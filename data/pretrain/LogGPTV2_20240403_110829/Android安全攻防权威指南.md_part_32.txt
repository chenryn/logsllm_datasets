等。尽管不会具体地介绍这些协议，但我们建议你做更多研究，来更全面地理解蓝牙所暴露出的
攻击面。
各种蓝牙协议中的大部分功能都需要首先进行配对。这通常需要在两台设备上都输人一个数
字码，通过确认来进行对话。一些设备使用硬编码的数字码，因面非常容易攻击。建立配对后，
有可能劫持会话并进行滥用。可能的攻击方法包括BlueJacking、BlueSnarfing和 Bluebugging。除
了可以与一些免提设备配对，Android设备还可以相互之间进行配对，来传输联系人列表、文件
等。蓝牙协议设计时的功能是非常多样化的，也提供了攻击者希望得到的几乎所有功能访问。许
多可行的攻击都利用了蓝牙协议规范中配对和加密过程的一些弱点。因此，蓝牙代表着一个有待
进一步探索、非常丰富而复杂的攻击面。
在Android设备上，蓝牙暴露的攻击面首先从内核开始。在内核中，设备驱动与硬件进行接
口，并实现了许多蓝牙协议都涉及的一些底层协议，包括逻辑链路控制和适配协议（L2CAP）以
及射频通信（RFCOMM）协议等。内核驱动通过进程间通信（IPC）机制，向Android操作系统
暴露了额外的功能。Android在4.2版本之前都是使用Bluez用户空间蓝牙协议栈，在4.2版本时
改用了Bluedroid。接下来，在Android框架层实现了暴露给Android应用的高层次API，每个组
件都代表着整体攻击面的一部分。关于Android系统中蓝牙子系统的更多信息，可参见
https:/source. android.com/devices/bluetooth.html:
4. Wi-Fi
几乎所有的Android设备都支持最基本形式的Wi-Fi，面新设备在被设计生产时，都很好地
跟上了Wi-Fi协议标准的发展。在写作本书时，受到最广泛支持的标准是802.11g和802.11n，面
只有很少一部分设备支持802.1lac。Wi-Fi协议主要用于连接局域网，面局城网会提供对互联网
---
## Page 142
126第5章理解Android的攻击面
的访问。Wi-Fi协议也可以被用于使用Ad-Hoc或Wi-FiDirect模式，直接连接到其他计算机系统。
一个典型的Wi-Fi网络最大范围大约36米，但是可以非常简单地使用中继器或定向天线进行扩展。
需要说明的是，对Wi-Fi的完整介绍超出了本书范围。其他一些已出版图书，包括Hacking
Exposed Wireless，更加详细地讲解了Wi-Fi 网络，感兴趣的读者可以参考。本节尝试概要介绍
Wi-Fi中的安全概念，然后解释它们是如何构成Android设备攻击面的。
Wi-Fi网络可以被配置成无需认证或者使用不同强度的多种认证机制中的一种。无需认证的
开放网络可以用完全被动的方式（无需连接）进行无线监听，而认证网络使用了不同的加密算法
来保护无线传输，因此无需连接的监听会变得更加困难，至少需要首先破解密钥。三种最为流行
的认证机制是WEP、WPA和WPA2。WEP相当容易破解，因此基本可以等同于没有保护。WPA
是设计用来解决这些弱点的，而WPA2则更进一步地增强了Wi-Fi网络的认证和加密。
Android上的Wi-Fi协议栈与蓝牙协议栈非常类似。事实上，许多设备经常包含同时实现了
这两种技术的单一芯片。与蓝牙协议相似，Wi-Fi协议软件栈的源代码是开源的。它也是从内核
驱动开始，内核驱动管理硬件并处理大多数的底层协议。在用户空间，wpa_supplicant实现
了认证协议，面Android操作系统管理记住的无线连接。与蓝牙类似，这些组件被暴露给不可信
的数据，因此也代表着一类非常有趣面值得进一步探索的攻击面。
除了能连接到Wi-Fi无线接人点（AP）之外，大多数Android设备还能作为AP热点。在这
一过程中，设备将会显著地扩大它的攻击面。另外的一些用户空间代码，具体面言也就是hostapd
和DNS服务器，将会被启动并暴露在网络上。这扩大了远程攻击面，特别是对那些能够连到
Android设备AP热点上的攻击者。
除了通用的Wi-Fi攻击，还没有针对Android设备Wi-Fi协议栈的已知成功攻击。可行的通
用攻击包括伪基站与中间人攻击。
5.NFC
NFC是建立在射频标识（RFID）之上的无线通信技术。在Android设备所支持的各种无线
技术中，NFC的作用范围是最短的，通常不超过约20厘米。Android设备上的NFC有三种典型
的应用场最。第一，标签（通常以贴纸的形式）被呈现给设备，设备读取标签的数据并进行处理。
在某些场合中，这些贴纸会作为交互式广告海报的一部分在公共场所展示；第二，两位用户将他
们的Android设备紧靠在一起来传输数据（如照片）：第三，NFC经常用于非接触式的支付。
Android对NFC的实现相当简单图5-6显示了AndroidNFC协议栈的概要。内核驱动与NFC
硬件进行对话，但并不深人处理接收的NFC数据，而是将数据传递给Android框架层的NFC服
务（com.android.nfc）。NFC服务则将处理后的NFC标签数据传递给那些已经注册接收NFC
消息的应用。
NFC数据可以通过多种形式接收，其中许多是Android默认支持的。所有这些被支持的实现
都在Android SDK的TagTechnology类中进行了很好的文档说明。关于Android上NFC的更多
倍息,详见http://develope.android.com/guide/topics/connectivity/nfc/index.html。
①其简体中文版《黑客大哪光：无线网络安全》已由机械工业出版社于2012年出版。—编者注
---
## Page 143
5.4物理相邻
127
NFC标签
NFC标签数据
W
(Nodef, MiFare)
NFC传输器/接收器
Android内核
libpn544_fs.so
NFC服务 (com.android.nfc)
libnfe_jni.so]libnfc.solibnfc_ndef.o
Android应用
Android应用
Android应用
图 5-6Android .上的 NFC
最流行的消息格式是NFC数据交换格式（NDEF），NDEF消息可以包含任何数据，但通常
只是用来传输文本、电话号码、联系信息、URL和图像。解析这些类型的消息经常会导致执行
一些动作，比如进行蓝牙设备配对、启动Web浏览器、拨号、打开YouTube或地图应用等。在
某些情况下，这些操作无需任何用户交互面直接被执行，这种特性对攻击者特别具有吸引力。在
通过NFC获取文件时，有些设备会根据文件类型启动默认的应用来打开接收到的文件。这些操
作中每一个都是NFC之下额外攻击面的很好案例。
目前已经有好几个利用NFC成功攻陷Android设备的案例。CharlieMiler演示过用NFC来
自动建立起其他无线技术（如蓝牙和Wi-FiDirect）的连接。这就能够到达一个原本不可用的攻
击面。Georg Wicherski和 JoshuaJ. Drake在 2012年 BlackHat USA大会上演示了通过 NFC发起的
一次成功的浏览器攻击。此外，之前还有提及，MWR实验室的研究人员在2012年的Mobile
Pwn2Own大赛上，使用NFC来利用PolarisOffice文档套件中的一个文件格式解析漏洞。这些攻
击都验证了，Android设备对NFC支持所暴露的攻击面可导致设备被攻破。
5.4.2其他技术
除了无线通信之外，还有其他两个技术也与Android设备的整体攻击面相关。具体面言，QR
---
## Page 144
128第5章理解Android的攻击面
码（快速响应矩阵码）和语音指令在理论上可以导致设备被攻破，对基于Android的GoogleGlass
和新的 Android设备（如 Moto X和 Nexus 5）更是如此。Google Glass的早期版本在每次拍照时
都会处理QR码。Lookout移动安全公司发现，一个秘密摆放的QR码会导致GoogleGlass加人恶
意的Wi-Fi网络中，加人后设备可以被进一步攻击。另外，GoogleGlass还大量使用了语音指令，
一位坐在GoogleGlass用户旁边的攻击者可以向设备说出指令，可以潜在地让Google Glass 访问
一个恶意网站，然后进行攻破。尽管以这些技术的底层实现作为目标会很困难，但是它们提供的
功能留下了利用空间，因此也可能成为设备被攻破的一条途径。
5.5本地攻击面
当攻击者获得对一个设备的任意代码执行后，那么逻辑上的下一步就是权限提升了。终极目
标是获得享有特权的代码执行，包括在内核空间中执行，或者以root或system用户身份执行。
然向，只是获取到少量权限（如一个附属用户组的权限），世经常可以暴露出更多受限的攻击面。
通常，在尝试找到新的root方法时，这些攻击面是最需要仔细检查的地方。我们在第2章中提到，
权限隔离的广泛使用意味着，为了实现终极目标需要结合使用多个小的提升漏洞。
本节将近距离地观察暴露给设备上已运行代码的不同攻击面，而已运行代码可以是一个
Android应用，也可以是通过ADB的 shell或其他。访问这些攻击面所需的权限，取决于这些不
同端点是如何被加固的。为了帮助理解Android系统中广泛使用的权限隔离机制，本节将介绍一
些用来审查OS权限和枚举暴露端点的工具。
5.5.1探索文件系统
Android的UNIX血统意味着许多攻击面都是通过文件系统条目暴露的。这些条目包括内核
代码进行直接交互的访问点。许多用户空间的组件，如特权服务，通过PP_UNIX族的套接字暴
露进程间通信功能。甚至，一些普通文件与目录条目如果没有进行充分的权限限制，也会为几种
攻击类型提供攻击路径。在文件系统中简单地检查这些条目，你就可以找出这些端点，审查它们
之下的攻击面，并潜在地提升你的权限。
每个文件系统条目都拥有几个不同的属性。首先最为重要的是，每个条目拥有一个属主用户
与用户组。第二重要的是条目的权限，这些权限指明了这个条目是否只能被属主用户和用户组读、
写、执行，还是可以被系统上任意用户读、写、执行。此外，一些特殊的权限控制着一些依赖于
文件类型的行为。例如，一个可执行文件如果设置了set-user-id或者set-group-id，那么它将以提
升后的权限执行。最后，每个条目有一个类型，告知系统如何对这个端点的操作进行处理，类型
包括常规文件、目录、字符设备、块设备、FIFO节点、符号链接和套接字等。在确定哪个攻击
面对于给定访问级别可达时，需要考虑所有这些属性，这是非常关键的。
可以很简单地使用opendir与stat系统调用，来枚举文件系统条目。然而一些目录并不
允许低权限用户来列举出它们的内容（也就是缺少read权限位）。在这种情况下，只能使用root
---
## Page 145
5.5本地攻击面129
权限来枚举文件系统。为了更容易地确定哪些文件系统条目更值得关注，JoshuaJ.Drake开发了
一个名为 canhazaxs 的工具。以下代码片段显示了这一工具在一部运行 Android 4.4的 Nexus 4上
执行后的效果。
1003,1004,1007,1009,1011,1015,1028,3001,3002,3003,3006 /dev /data
[*]uid=2000 (she11) ,
group8=2000 (she11) , 1003 (graphics) , 1004 (1nput1,1007 (1og) , 1009 (mount) , 1011
1015 (sdcard_rw) ,1028 (sdcard_r) ,3001 (net_bt_admin) , 3002 (net_bt) , 3003(inet) 
(adb) .
(5esaqu) 9000
[*]Found 0 entries that are set-uid executable
[*]  Found 1 entries that are set-gid executable
directory 2750 syatem shel1 /data/misc/adb
[*] Found 62 entries that are writable
[-.-1
fi1e 0666 sy8tem sy8tem /dev/cpuet1/app8/tasks
[- - -]
chardev 0666 system system /dev/gen1ock
[---]
socket 0666 root systen /dev/socket/pb
[...]
directory 0771 shel1 she11 /data/1ocal/tmp
[...]
传递给canhazaxs的-u和-g选项，分别代表在确定条目是否可读、可写、可执行时，所需
考虑的用户和用户组。在这些选项之后，可以指定要审查的任意数量的目录。对于每个目录，
canhazaxs会递归枚举其中的所有子目录。在审查完成之后，可访问的条目会以潜在影响程度进
行优先级排序显示。对于每个条目，canhazaxs会显示它的类型、权限、用户、用户组和路径。
这个工具让枚举文件系统所暴露攻击面的过程变得简单。
找到每个端点背后的代码则取决于条目的类型。对于内核驱动，通过特定条目的名称来搜索
内核源代码是最好的方法，这一点我们将在第10章中进一步讨论。而对于任意给定的普通文件
或目录，要想找出操作它们的代码异常困难。然而通过审查initrc文件与相关指令，在过去人们
已经发现了好几个权限提升漏洞。确定一个套接字端点背后的代码也是非常需要技巧的，稍后将
详细讨论。找到这些代码后，你可以确定端点所提供的功能。在这些端点之下的深人攻击面，代
表着发现未知权限提升漏洞的机会。
5.5.2找到其他的本地攻击面
并非所有的本地攻击面都是由文件系统条目暴露的，其他的本地攻击面是由Limux内核暴露
的，包括系统调用和套接字实现等。Android系统中的许多服务和应用通过不同类型的IPC（包
括套接字与共享内存）暴露着本地攻击面。
1.系统调用
Linux内核拥有一个暴露给本地攻击者的丰富攻击面。除了文件系统条目所代表的攻击面之
外，Linux内核在执行系统调用时还会处理一些潜在的恶意数据。因此，内核中的系统调用处理
---
## Page 146
130第5章理解Android的攻击面
函数代表着一个值得关注的攻击面。要想找到这些函数，可以简单地在内核源代码中搜索
SYSCALL_DEFINE字符串。
2.套接字
Android上运行的软件使用了各种不同类型的套接字来进行IPC。为了全面理解由各种不同
类型套接字所暴露出的攻击面，你必须了解套接字是如何创建的。套接字是用socket系统调用
创建的。尽管在Android各个层次上使用了多种抽象来创建和管理套接字，但这些抽象最终都会
使用socket系统调用。以下摘自Linux用户手册的代码片段显示了这个系统调用的函数原型：
int socket (int domain, int type, int protocol) ;
这里需要了解的关键是创建一个套接字需要指明域、类型和协议。域参数最为重要，因为它
的值决定了协议参数如何被解释。关于这些参数更详细的信息，包括每个参数所支持的值，可以
从Linux用户手册的socket函数部分找到。此外，也可以通过检查/proc/net/protocols文件系统
条目，来确定一款Android设备支持哪些协议。
sto3ooxd/seu/3o3d/ t- on xoqAsnq/- $ dus/tesot/esep/1qsoqfettaso
24 /proc/net/protoco1s
这个文件中每个条目都代表着值得进一步探索的攻击面，面实现每个协议的源代码可以从
Linux内核源代码的net子目录下找到。
·通用的套接字城
大多数Android设备都大量使用了PF_UNIX、PF_INET和PF_NETLINK域的套接字。PF_INET
域的套接字又被进一步分为SOCK_STREAM和SOCK_DGRAM类型，分别使用TCP和UDP协议。关于
每种套接字实例的状态详细信息，可以从/proc/net目录下的条目中获取，如表5-2中所示。
表5-2通用套接字域的状态文件