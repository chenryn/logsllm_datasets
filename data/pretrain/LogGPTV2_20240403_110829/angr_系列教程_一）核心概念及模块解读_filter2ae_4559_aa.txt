# angr 系列教程(一）核心概念及模块解读
## 前言
最近在学习 angr， 发现网上教程大部分都是简单介绍几个顶层接口，或者使用 angr 来解题，比较杂，而且很多接口已经丢弃。所以准备写 angr
系列的教程，同时当作个人学习的记录。
本文主要对 angr一些概念和接口进行介绍，更像是简略版的说明文档。文章略长，可以选择感兴趣的章节阅读。
希望通过这篇教程各位可以对 angr 的使用有整体的认识，快速上手 angr并利用它进行二进制分析和研究。对细节感兴趣的同学就可以查文档和看源码。
安装教程略去，按照文档安装即可。
## 顶层接口
首先简单介绍一下 angr 的几个顶层接口，我们会在下面章节中进一步介绍这些接口。
使用 angr 第一件事就是加载二进制文件，在 angr 中，基本上所有的对象操作都依赖于已有的 Project 。
    >>> import angr
    >>> proj = angr.Project('/bin/true')
以下是 angr 对 `Project` 类的说明。
> This is the main class of the angr module. It is meant to contain a set of
> binaries and the relationships between them, and perform analyses on them.
### 基本属性
载入二进制文件后，我们就可以访问一些基本属性，如文件名、架构、入口地址：
    >>> proj.arch
    >>> proj.entry
    >>> proj.filename
### loader
接下介绍 loader，angr 中的 CLE 模块用于将二进制文件载入虚拟地址空间，而CLE 最主要的接口就是 loader 类。
> The loader loads all the objects and exports an abstraction of the memory of
> the process. What you see here is an address space with loaded and rebased
> binaries.
可以通过 Project 的 `.loader`的属性查看
    >>> proj.loader
通过 loader, 我们可以获得二进制文件的共享库、地址空间等信息。
    >>> proj.loader.shared_objects
    OrderedDict([('true', ), ('libc.so.6', ), ('ld-linux-x86-64.so.2', )])
    >>> proj.loader.min_addr
    >>> proj.loader.max_addr
### factory
即 `AngrObjectFactory`，提供重要分析对象的接口，如 `blocks / state / SimulationManager` 等。
#### blocks
即程序基本块，我们可以给定地址，获取对应的基本块，为 Block 对象。
    >>> block = proj.factory.block(proj.entry)
可以查看 Block 对象的信息或执行操作，以下是接口
    >>> block.
    block.BLOCK_MAX_SIZE          block.instruction_addrs       block.serialize_to_cmessage(
    block.addr                    block.instructions            block.size
    block.arch                    block.parse(                  block.thumb
    block.bytes                   block.parse_from_cmessage(    block.vex
    block.capstone                block.pp(                     block.vex_nostmt
    block.codenode                block.serialize(
#### states
Project 对象仅表示程序的初始镜像，而在执行时，我们实际上是对 SimState 对象进行操作，它代表程序的一个实例镜像，模拟执行某个时刻的状态。
    >>> state = proj.factory.entry_state()
`SimState` 对象包含程序运行时信息，如内存/寄存器/文件系统数据等。
我们可以通过 `state.regs` 和 `state.mem` 访问寄存器和内存信息。
    >>> state.regs.rip
    >>> state.regs.rax
    >>> state.mem[proj.entry].int.resolved
可以注意到，返回的结果都是 BV 类型，并不是python 中的 int 类型，BV是位向量(bitvector)的简称，实际上就是一串比特序列，angr
使用位向量表示 CPU 数据。
以下展示位向量和 int 的相互转换
    >>> bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234
                                   # BVV stands for bitvector value
    >>> state.solver.eval(bv)                # convert to python int
    0x1234
我们可以存储位向量到寄存器/内存中，或者直接使用 int 类型，它会被自动转成位向量。
    >>> state.regs.rsi = state.solver.BVV(3, 64)
    >>> state.regs.rsi
    >>> state.mem[0x1000].long = 4
    >>> state.mem[0x1000].long.resolved
后续我们还会详细介绍位向量的操作。
对于 `state.mem` 接口：
  * `mem[ index ]` 指定地址
  * `.` 指定类型（如 `char, short, int, long, size_t, uint8_t, uint16_t...` ）
  * `.resolved` 将数据输出为位向量。
  * `.concrete` 将数据输出为int值。
#### Simulation Managers
> A simulation manager is the primary interface in angr for performing
> execution, simulation, whatever you want to call it, with states.
SM(Simulation Managers) 用于管理 state，执行 运行、模拟等操作。
我们使用单个 state 或 state 列表创建 `Simulation Managers`
    >>> simgr = proj.factory.simulation_manager(state)
    >>> simgr.active
    []
单个 SM 可以包含多个 stash(stash 中存放 state) ， 默认的stash 是 `active stash`，它使用我们传入的
`state`进行初始化。
接下来，我们进行简单的执行操作, 调用 step() 方法，这会执行一个基本块。
    >>> simgr.step()
再次查看 `active`，可以看到已经从 `0x4017b0` 变为 `0x1021ab0` . 而初始 state 不会受到影响， 因为执行不会改变
`SimState` 对象。
    >>> simgr.active
    []
    >>> simgr.active[0].regs.rip
    >>> state.regs.rip          
### Analyses
angr 内置了一些分析方法，用于提取程序信息。接口位于 `proj.analyses.` 中
    >>> proj.analyses.
    proj.analyses.BackwardSlice(              proj.analyses.Decompiler(                 proj.analyses.VFG(
    proj.analyses.BasePointerSaveSimplifier(  proj.analyses.DefUseAnalysis(             proj.analyses.VSA_DDG(
    proj.analyses.BinDiff(                    proj.analyses.Disassembly(               proj.analyses.VariableRecovery(
    proj.analyses.BinaryOptimizer(            proj.analyses.DominanceFrontier(         proj.analyses.VariableRecoveryFast(       .....
### 总结
以上就是顶层接口的说明，通过以上介绍，我们对 angr 有了初步的认识。
通常使用 angr 的步骤大概如下:
  1. 创建 project 并设置state
  2. 新建符号量/位向量 并在内存或其他地方设置
  3. 设置 Simulation Managers 
  4. 运行，探索满足需要的路径
  5. 约束求解，获取执行结果
接下来，我们对几个核心模块进行介绍。
## loader 加载模块
将二进制文件加载到虚拟的地址空间
通过我们可以 loader 对查看加载对象、符号重定位信息等，同时也可以设置初始的加载选项。
  * 已加载的对象
  * 符号和重定位
  * 加载选项
### 已加载的对象
获取对象，可以通过以下接口获取对应的对象。
  * `.all_objects/shared_objects/all_elf_objects/extern_object/kernel_object`
    >>> obj = proj.loader.main_object
    >>> obj = proj.loader.all_objects
    [, , , ]
获得加载对象后，直接与这些对象进行交互从中提取元数据，如：
  * 获取 ELF 的内存分段和文件分段
    >>> obj.sections                     
    , , , , ,...
  * 获取 PLT 表信息
    >>> obj.plt
    {'__uflow': 0x401400,
     'getenv': 0x401410,
     'free': 0x401420,
     'abort': 0x401430,
     '__errno_location': 0x401440,
     'strncmp': 0x401450,
     '_exit': 0x401460,
  * 显示预链接基址和实际装载的内存基址等地址信息
    >>> obj.linked_base
    0x0
    >>> 
    >>> obj.mapped_base
    0x400000
    >>> obj.max_addr
    0x60721f
  * ....
### 符号和重定位
使用 CLE 操作二进制的符号信息
#### 查找符号
    >>> malloc = proj.loader.find_symbol('malloc')
如果要获得对象的 symbol，则使用 `get_symbol` 方法：
    malloc = proj.loader.main_object.get_symbol('malloc')
我们会得到一个 symbol 对象，可以获取获取符号名/所属者/链接地址/相对地址等信息。
    >>> malloc.
    malloc.is_common           malloc.is_local            malloc.owner_obj           malloc.resolvedby
    malloc.is_export           malloc.is_static           malloc.rebased_addr        malloc.size
    malloc.is_extern           malloc.is_weak             malloc.relative_addr       malloc.subtype
    malloc.is_forward          malloc.linked_addr         malloc.resolve(            malloc.type
    malloc.is_function         malloc.name                malloc.resolve_forwarder(  
    malloc.is_import           malloc.owner               malloc.resolved
symbol 对象有三种获取其地址的方式：
  * `.rebased_addr`: 在全局地址空间的地址。
  * `.linked_addr`: 相对于二进制的预链接基址的地址。 
  * `.relative_addr`: 相对于对象基址的地址。 
    >>> malloc.rebased_addr
    0x10002c0
    >>> malloc.linked_addr 
    0x2c0     
    >>> malloc.relative_addr
    0x2c0
### 加载选项
#### 基本选项
名称 | `描述`  
---|---  
`auto_load_libs` | 是否自动加载程序的依赖  
`skip_libs` | 避免加载的库  
`except_missing_libs` | 无法解析共享库时是否抛出异常  
`force_load_libs` | 强制加载的库  
`ld_path` | 共享库的优先搜索搜寻路径  
在进行一些程序分析时，如果 auto_load_libs 为 True, angr 会同时分析动态链接库，导致耗时非常久，所以可以根据自己需要设置恰当的值。
    >>> proj = angr.Project('/bin/true')
    >>> proj.loader.shared_objects
    OrderedDict([('true', ), ('libc.so.6', ), ('ld-linux-x86-64.so.2', )])
    >>> proj = angr.Project('/bin/true', load_options={"auto_load_libs": False})
    >>> proj.loader.shared_objects
    OrderedDict([('true', )])
#### pre-binary 选项
在加载二进制文件时可以设置特定的参数，使用 `main_opts` 和 `lib_opts` 参数进行设置。
  * `backend` \- 指定 backend
  * `base_addr` \- 指定基址
  * `entry_point` \- 指定入口点
  * `arch` \- 指定架构
示例如下：
    >>> angr.Project('examples/fauxware/fauxware', main_opts={'backend': 'blob', 'arch': 'i386'}, lib_opts={'libc.so.6': {'backend': 'elf'}})
### backend
一般情况下，CLE 会自动选择对应的 backend，也可以自己指定。有的 backend 需要 同时指定架构。
以下是各个 backend 以及描述：
名称 | 描述  
---|---  
elf | ELF文件的静态加载器 (基于PyELFTools)  
pe | PE文件静态加载器 (基于PEFile)  
mach-o | Mach-O文件的静态加载器  
cgc | CGC (Cyber Grand Challenge)二进制的静态加载器  
backedcgc | CGC 二进制的静态加载器，允许指定内存和寄存器  
elfcore | ELF 核心转储的静态加载器  
blob | 将文件作为平面镜像加载到内存中  