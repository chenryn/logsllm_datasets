title:Inference and analysis of formal models of botnet command and control
protocols
author:Chia Yuan Cho and
Domagoj Babic and
Eui Chul Richard Shin and
Dawn Song
Inference and Analysis of Formal Models of Botnet
Command and Control Protocols
Chia Yuan Cho Domagoj Babi´c Eui Chul Richard Shin Dawn Song
{chiayuan@cs,babic@cs,ricshin,dawnsong@cs}.berkeley.edu
University of California, Berkeley
ABSTRACT
Keywords
We propose a novel approach to infer protocol state machines in the
realistic high-latency network setting, and apply it to the analysis
of botnet Command and Control (C&C) protocols. Our proposed
techniques enable an order of magnitude reduction in the number
of queries and time needed to learn a botnet C&C protocol com-
pared to classic algorithms (from days to hours for inferring the
MegaD C&C protocol). We also show that the computed protocol
state machines enable formal analysis for botnet defense, includ-
ing ﬁnding the weakest links in a protocol, uncovering protocol
design ﬂaws, inferring the existence of unobservable communica-
tion back-channels among botnet servers, and ﬁnding deviations of
protocol implementations which can be used for ﬁngerprinting. We
validate our technique by inferring the protocol state-machine from
Postﬁx’s SMTP implementation and comparing the inferred state-
machine to the SMTP standard. Further, our experimental results
offer new insights into MegaD’s C&C, showing our technique can
be used as a powerful tool for defense against botnets.
Categories and Subject Descriptors
F.1.1 [Computation by Abstract Devices]: Models of Compu-
tation—automata; I.2.6 [Artiﬁcial Intelligence]: Learning—con-
cept learning; C.2.2 [Computer-Communication Networks]: Net-
work Protocols—applications, protocol veriﬁcation; D.4.6 [Ope-
rating Systems]: Security and Protection—invasive software
General Terms
Security, Algorithms, Experimentation, Performance
This material is based upon work partially supported by the
National Science Foundation under Grants No.
0311808, No.
0448452, No. 0627511, and CCF-0424422, by the Air Force Of-
ﬁce of Scientiﬁc Research under Grant No. 22178970-4170, by the
Army Research Ofﬁce under grant DAAD19-02-1-0389, and by the
Ofﬁce of Naval Research under MURI Grant No. N000140911081.
Any opinions, ﬁndings, and conclusions or recommendations ex-
pressed in this material are those of the authors and do not neces-
sarily reﬂect the views of the National Science Foundation, the Air
Force Ofﬁce of Scientiﬁc Research, the Army Research Ofﬁce, or
the Ofﬁce of Naval Research.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
Protocol Model Inference and Analysis, Response Prediction
1.
INTRODUCTION
Protocol inference is a process of learning the inner workings
of a protocol through passive observation of the exchanged mes-
sages or through active probing of the agents involved in the mes-
sage exchange. Even for small simple protocols, manual protocol
inference (a.k.a. reverse-engineering) is tedious, error-prone, and
time-consuming. Automatic protocol inference sounds attractive,
but poses a number of technical challenges, for some of which we
propose novel solutions in this paper.
The applications of protocol inference are numerous. The main
application we are interested in is the inference of botnet protocols.
Botnets are the primary means through which denial of service at-
tacks, theft of personal data, and spamming are committed, causing
billions of dollars of damage annually [1]. Defeating such botnets
requires the understanding of their inner workings, i.e., their com-
munication protocols. The second application we are interested in
is inferring models of implementations of frequently used proto-
cols. While public standards are often available for such proto-
cols, implementations rarely strictly follow the standard, either due
to bugs in the implementation, pitfalls in understanding the stan-
dard, or ambiguities in the standard itself. In this setting, automatic
protocol inference technology can be used for ﬁngerprinting and
checking adherence to the standard. Other possible applications of
protocol inference include: automatic abstraction of agents partici-
pating in message exchange for assume-guarantee-style veriﬁcation
of protocols, fuzz testing of protocol implementations (e.g., [10]),
and reverse-engineering of proprietary and classiﬁed protocols.
Our main motivation is to provide the security community with
new techniques and tools to ﬁght botnets. The technology we have
developed is a powerful weapon against botnets, enabling auto-
matic inference of protocol models that can be used by both human
analysts and automatic tools. After presenting our main technical
contribution, we propose a number of analyses of inferred models:
identiﬁcation of protocol components most susceptible to disrup-
tive attacks (e.g., for the purpose of ﬁnding the most efﬁcient way
of bringing down a botnet), identiﬁcation of protocol design ﬂaws,
detection of back-channel communication to which the analyst has
no direct access, and detection of differences among protocol im-
plementations.
1.1 A Brief Overview of Protocol Inference
The inner workings of a protocol can be modelled in a number
of ways, but state-machine models are by far the most standard.
Thus, the problem of protocol inference is isomorphic to the prob-
lem of learning a state-machine describing the protocol. Modelling
protocols with ﬁnite and inﬁnite state-machines is a complex topic,
426(a)
(b)
(c)
1
a/y
1
a/y
1
a/y
b/w
c/y
b/w
2
a/w
c/x
b/y
2
a/w
b/y
b/x
c/w
b/x
b/w
2
b/x
3
a/x
3
a/x
3
a/x
Figure 1: Illustration of the difference between a complete
model with respect to the entire protocol alphabet (on the left),
complete state-machine with respect to a given subset of mes-
sages (in the middle), and an incomplete state-machine (on the
right).
but only two dimensions of the problem are relevant to this paper.
The ﬁrst dimension is the ﬁniteness of the state-machine. In this
paper, we focus on inferring ﬁnite state-machine models, both in
terms of the number of states and the size of the input (resp. output)
alphabet. The second dimension is the completeness of the state-
machine, a concept originating in the theory of automata. A com-
plete state-machine has transitions (resp. outputs) deﬁned for every
input alphabet symbol and from every state. An incomplete state-
machine might be missing some transitions, i.e., for some state-
input pairs, the next state (resp. output) is undeﬁned.
It is important to distinguish the automata-theoretic concept of
state-machine completeness from the model completeness. Con-
sider a simple protocol Π with input messages {a, b, c} and out-
put messages {w, x, y}, speciﬁed by the state-machine in Figure 1a.
Suppose we have to reverse-engineer the protocol from an imple-
mentation of Π while treating it as a black-box. The ﬁrst step in the
inference is to discover the valid input messages. To our knowl-
edge, there exists no automatic approach guaranteeing to discover
all the input messages. Suppose a subset M of input messages is
discovered during the inference, e.g., M = {a, b}. An automatic
protocol inference approach learns a complete state-machine (Fig-
ure 1b) with respect to M if from every state of the learned state-
machine and for every message from M, the next state and output
are known. Otherwise, the inferred state-machine is incomplete
(Figure 1c). The completeness of state-machine models is critical
for aforementioned applications, because the more transitions are
missing from the model, the higher the uncertainty of the analy-
sis. In this paper, we focus on inferring complete state-machines
through interactive on-line inference, in contrast to the previous
work [10, 21], which focused on passive off-line inference of in-
complete models. Given a complete alphabet (i.e., set of input
messages), our approach infers complete ﬁnite-state protocol mod-
els with desired accuracy and conﬁdence (the higher the accuracy
and conﬁdence, the higher the computational cost).
Passive off-line inference techniques can only learn from a se-
quence of observed messages. Off-line inference of a minimal
(or within a polynomial size of minimal) state-machine from ob-
served network communication is a computationally difﬁcult prob-
lem (NP-complete [16], [34, p. 98–99]). Heuristic best-effort infer-
ence algorithms are polynomial in the number and size of observed
message sequences, as in work of Hsu et al. [21], but there are no
guarantees that the inferred model will be minimal, or even at most
polynomially larger than the minimal. While off-line techniques
can infer models from a relatively small number of observed mes-
sage sequences, such models are inherently incomplete, rendering
any further analysis imprecise.
In contrast, on-line inference techniques are allowed to query the
agents involved in the message exchange proactively. On-line tech-
niques, like Angluin’s L∗ algorithm [3], have a polynomial worst-
case complexity and produce complete models. Despite polyno-
mial complexity, a number of challenges, especially in the con-
text of botnet protocol inference, remain: (1) Automatic inference
of complete protocol state-machines in the real-world network set-
ting requires solving a number of subtle technical challenges, rang-
ing from theoretical ones, like choosing the right formal model, to
technical ones, like reverse-engineering message formats. (2) Even
a simple protocol with twenty states might require tens of thou-
sands of message sequences to be generated. (3) In order to avoid
synchronized attacks by a large botnet on the university infrastruc-
ture, the experiments had to be anonymized by tunneling all the
trafﬁc through Tor [15]. (4) Exacerbated by the usage of Tor and
likely overloading of botnet servers, the network delay averaged
6.8 seconds per message in our experiments, dramatically reducing
the number of probing sequences feasible in reasonable amount of
time.
1.2 Main Contributions
On the inference side, the most important contribution of this
paper is a novel approach for complete state-machine inference in
the realistic high-latency network setting. Three innovations ren-
dered such inference possible: First, our formulation of the proto-
col inference problem as a Mealy machine inference problem re-
sults in more compact models and provides a simple, broadly un-
derstood formal underpinnings for our work. Second, we propose a
highly effective prediction technique for minimizing the number of
queries generated during the inference process. Third, we propose
two optimizations to the basic L∗: parallelization and caching.
On the analysis side, we show how the computed complete mod-
els can be used as a formal basis to study and defeat botnets: First,
we show how to identify the weakest links in a protocol, especially
in the context where multiple pools of bots partially share the same
resources. Such weakest links are critical for normal functioning
of one or more agents participating in the protocol. Second, we
show that the inferred model can be used to uncover protocol design
ﬂaws. Third, we demonstrate how inferred models can be used to
prove the existence of unobservable communication back-channels
among botnet servers, although we have no access to those commu-
nication channels. Besides proving the existence of such channels,
the analysis we propose can actually construct a state-machine rep-
resenting the model of the back-channel communication. Fourth,
we demonstrate how complete models can be used for detecting
differences between distinctive implementations of the same proto-
col.
On the experimental side, we show how to design an effective
protocol inference system and provide empirical evidence that our
optimizations — query response prediction, parallelization, and
caching — speed up the inference process by over an order of mag-
nitude compared to the basic L∗ algorithm. For instance, our pre-
diction technique alone reduces the time required for the MegaD
model inference from an estimated 4.46 days to 12 hours. Ap-
plying formal analysis to inferred complete models, we uncover
previously unknown facts about the MegaD botnet. Analyzing crit-
ical links, we identify the critical components of the botnet shared
among multiple pools of bots. Analyzing the properties of the in-
ferred model, we discover a design ﬂaw in MegaD. More precisely,
we ﬁnd a way to bypass MegaD’s master server authorization and
gain unlimited access to fresh spam templates, which can be used
to train spam ﬁlters even before a signiﬁcant percentage of bots
starts sending spam based on those templates. Analyzing the back-
channels, we prove that MegaD’s servers communicate with each
427other, and we even construct a formal model of such communi-
cation. Analyzing differences among Postﬁx and MegaD’s SMTP
implementations, we discover a number of interesting differences,
useful for detection and ﬁngerprinting. We validate our technique
by inferring the complete protocol state-machine from Postﬁx’s
SMTP implementation, checking its equivalence against the stan-
dard.
2. PROBLEM DEFINITION
A communication protocol is a set of rules for exchanging infor-
mation over some medium (e.g., the Internet). These rules regulate
data representation (i.e., the message format), encryption, and the
state-machine of the communication. Any automatic technique for
reverse-engineering of real-world protocols has to deduce message
formats, handle encryption, and infer state-machines. The ﬁrst two
components of the problem have received signiﬁcant attention of
the research community [5, 7, 12, 13, 36]. The third component —
protocol state-machine inference — has received far less attention,
and is the focus of this paper.
In the ﬁrst part of this section, we deﬁne the model inference
problem informally, and leave a more formal treatment for the sub-
sequent sections. In the second part of this section, we go further to
propose several automatic analyses of the model. We deﬁne several
related problems, which can be solved precisely only if a complete
state-machine of the protocol is known.
In the third part of this
section, we outline our assumptions.
2.1 Model Inference
The goal of protocol model inference is to learn a state-machine
describing the protocol composed of a ﬁnite set of states and a tran-
sition relation over a ﬁnite alphabet. In general, it is not possible
to learn a completely accurate model, without having access to a
source of counterexamples that show when the learned model dif-
fers from the actual system [3]. Thus, every protocol inference
approach is necessarily an ε-approximation, i.e., the inference cost
is proportional to the desired accuracy ε and conﬁdence γ.1 When
counterexamples are available, L∗ can make at most a polynomial
number of queries, but in the approximation setting, the number of
queries depends on the desired accuracy and conﬁdence.
There are two basic types of ﬁnite state-machines: the Moore
machine [28] and the Mealy machine [26].
Informally, the for-
mer distinguishes states according to whether they are accepting
or not, while the latter has no accepting states and distinguishes
states according to the sequence of outputs produced from a se-
quence of transitions. Since protocols are reactive systems2, the
Mealy machine is a more appropriate model. The problem this pa-
per addresses is how to learn the Mealy machine describing the
studied protocol in the realistic network setting, treating the proto-
col implementation as a black-box and learning the state-machine
from active probing. We actually set the bar higher: The problem
we want to solve is to learn the minimal (the fewest states) com-
plete (transitions deﬁned for all inputs and states) Mealy machine
describing the protocol.
2.2 Model Analysis
Once the protocol model is constructed, we wish to perform four
types of analysis: identiﬁcation of the critical links in the proto-
col, identiﬁcation of protocol design ﬂaws, proving the existence
of the background communication over unobservable channels, and
1The ε accuracy should not be confused with the empty string, also
denoted ε.
2Reactive systems maintain an ongoing interaction with their envi-
ronment rather than produce some ﬁnal value upon termination.
(dis)proving equivalence of different implementations of the same
protocol (a.k.a. equivalence checking [24]).
Identiﬁcation of the critical links in a protocol is important for
optimizing the attacks on the botnet. We deﬁne the problem as fol-
lows: Given an initial state of the protocol and some set of bad
actions (e.g., spamming), represented with output responses,3 that
we want to prevent from happening, what is the minimal set of tran-
sition edges that need to be disrupted in order to prevent the bots
from executing those actions? The bad actions can be disrupted
either by making it impossible for the bots to reach the state from
which the bad action is executed, or by disrupting the bad actions
themselves.
Identiﬁcation of protocol design ﬂaws can be done through man-
ual inspection of the model or automatic model checking (e.g., [9]).
In either case, the analyst needs to come up with a set of properties
and then check whether the model satisﬁes them. For instance, one
of the properties we checked was: “Bot cannot obtain spam tem-
plates before (1) being authenticated by the master server and (2)
getting a command to download spam templates.”
Proving the existence of background communication among ser-
vers whose communication we cannot eavesdrop is important for
gaining knowledge about the communication over channels we have
no access to. The knowledge of existence of such channels can
help security researchers in detecting inﬁltration traps. We deﬁne
the problem as follows: Given a client (a bot) communicating with
a certain number of servers (three in the MegaD case:
the mas-
ter, SMTP [23], and template server), can we prove existence and
build a model of inter-server communication, only from the ob-
served communication between the client and servers?
Equivalence checking (e.g., [24]) is an automatic analysis that
takes two formal models and either proves that models are equiva-
lent, or ﬁnds counterexamples showing the differences. In our set-
ting, we were especially interested in ﬁnding differences between
MegaD’s custom SMTP implementation and the standard SMTP
to detect the features that could be used for ﬁngerprinting.
In a
broader setting, equivalence checking can be used for detecting de-
viations from the standard, differences among different implemen-
tations of the same protocol, and uncovering implementation ﬂaws.
2.3 Assumptions
Determinism. We assume that the protocol to be learned is de-
terministic, i.e., that the same sequence of inputs from the initial
state always produces the same sequence of outputs and ends in the
same state. Among all the protocols we studied, we found only one
minor easy-to-handle source of non-determinism in the MegaD bot-
net protocol. We explain later how we handle that speciﬁc source
of non-determinism. Some limited amount of non-determinism can
be handled by extending the alphabet. For example, if a protocol
implementation in state s responds to message m either immedi-
ately with r or waits for ten seconds and responds with t, one can
split m into two messages, m0 and m10, such that the response to m0
(resp. m10) is r (resp. t). Each of the two messages can transition
from s into different states.
Resettability. State-machine inference algorithms require the
means of resetting the machine to a ﬁxed start state. The sequence
of inputs that reset the state-machine into its start state is known
as a homing sequence and every ﬁnite state-machine has such a
sequence [32]. Network protocol state-machines are often easily
reset by initiating a new connection or session. Thanks to the prior
work on the message format reverse-engineering [6, 12, 13], we
know the messages that reset the state-machines of the protocols
we study.