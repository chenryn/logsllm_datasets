    }   
/*  
 * Next up is the MDS matrix multiplication.  
 * The MDS matrix multiplication operates in the field  
 * GF(2)[x]/p(x) with p(x)=x^8+x^6+x^5+x^3+1.  
 * If you don't understand this, read a book on finite fields. You cannot  
 * follow the finite-field computations without some background.  
 *   
 * In this field, multiplication by x is easy: shift left one bit   
 * and if bit 8 is set then xor the result with 0x169.   
 *  
 * The MDS coefficients use a multiplication by 1/x,  
 * or rather a division by x. This is easy too: first make the  
 * value 'even' (i.e. bit 0 is zero) by xorring with 0x169 if necessary,   
 * and then shift right one position.   
 * Even easier: shift right and xor with 0xb4 if the lsbit was set.  
 *  
 * The MDS coefficients are 1, EF, and 5B, and we use the fact that  
 *   EF = 1 + 1/x + 1/x^2  
 *   5B = 1       + 1/x^2  
 * in this field. This makes multiplication by EF and 5B relatively easy.  
 *  
 * This property is no accident, the MDS matrix was designed to allow  
 * this implementation technique to be used.  
 *  
 * We have four MDS tables, each mapping 8 bits to 32 bits.  
 * Each table performs one column of the matrix multiplication.   
 * As the MDS is always preceded by q-boxes, each of these tables  
 * also implements the q-box just previous to that column.  
 */   
/* A small table to get easy conditional access to the 0xb4 constant. */   
static const Twofish_UInt32 mds_poly_divx_const[] = {0,0xb4};   
/* Function to initialise the MDS tables. */   
void Twofish::initialise_mds_tables()   
    {   
    int i;   
    Twofish_UInt32 q,qef,q5b;       /* Temporary variables. */   
    /* Loop over all 8-bit input values */   
    for( i=0; i> 1) ^ mds_poly_divx_const[ q & 1 ];   
        /*  
         * Divide by x again, and add q to get (1+1/x^2)*q.   
         * Note that (1+1/x^2) =  5B in the field, and addition in the field  
         * is exclusive or on the bits.  
         */   
        q5b = (qef >> 1) ^ mds_poly_divx_const[ qef & 1 ] ^ q;   
        /*   
         * Add q5b to qef to set qef = (1+1/x+1/x^2)*q.  
         * Again, (1+1/x+1/x^2) = EF in the field.  
         */   
        qef ^= q5b;   
        /*   
         * Now that we have q5b = 5B * q and qef = EF * q   
         * we can fill two of the entries in the MDS matrix table.   
         * See the Twofish specifications for the order of the constants.  
         */   
        MDS_table[1][i] = (q  > 1) ^ mds_poly_divx_const[ q & 1 ];   
        q5b = (qef >> 1) ^ mds_poly_divx_const[ qef & 1 ] ^ q;   
        qef ^= q5b;   
        /* The other two columns use the coefficient in a different order. */   
        MDS_table[0][i] = (qefs[0][i]= H02( i, S );   
            xkey->s[1][i]= H12( i, S );   
            xkey->s[2][i]= H22( i, S );   
            xkey->s[3][i]= H32( i, S );   
            }   
        break;   
    case 3:   
        for( i=0; is[0][i]= H03( i, S );   
            xkey->s[1][i]= H13( i, S );   
            xkey->s[2][i]= H23( i, S );   
            xkey->s[3][i]= H33( i, S );   
            }   
        break;   
    case 4:   
        for( i=0; is[0][i]= H04( i, S );   
            xkey->s[1][i]= H14( i, S );   
            xkey->s[2][i]= H24( i, S );   
            xkey->s[3][i]= H34( i, S );   
            }   
        break;   
    default:    
        /* This is always a coding error, which is fatal. */   
        Twofish_fatal( "Twofish fill_keyed_sboxes(): Illegal argument" );   
        }   
    }   
/*  
 * Initialise the Twofish implementation.  
 * This function must be called before any other function in the  
 * Twofish implementation is called.  
 * This routine also does some sanity checks, to make sure that  
 * all the macros behave, and it tests the whole cipher.  
 */   
Twofish::Twofish()   
    {   
    /* First test the various platform-specific definitions. */   
    test_platform();   
    /* We can now generate our tables, in the right order of course. */   
    initialise_q_boxes();   
    initialise_mds_tables();   
    /*   
     * And run some tests on the whole cipher.   
     * Yes, you need to do this every time you start your program.   
     * It is called assurance; you have to be certain that your program  
     * still works properly.   
     */   
    self_test();   
    }   
/*  
 * The Twofish key schedule uses an Reed-Solomon code matrix multiply.  
 * Just like the MDS matrix, the RS-matrix is designed to be easy  
 * to implement. Details are below in the code.   
 *  
 * These constants make it easy to compute in the finite field used   
 * for the RS code.  
 *  
 * We use Bytes for the RS computation, but these are automatically  
 * widened to unsigned integers in the expressions. Having unsigned  
 * ints in these tables therefore provides the fastest access.  
 */   
static unsigned int rs_poly_const[] = { 0, 0x14d };   
static unsigned int rs_poly_div_const[] = { 0, 0xa6 };   
/*  
 * Prepare a key for use in encryption and decryption.  
 * Like most block ciphers, Twofish allows the key schedule   
 * to be pre-computed given only the key.   
 * Twofish has a fairly 'heavy' key schedule that takes a lot of time   
 * to compute. The main work is pre-computing the S-boxes used in the   
 * encryption and decryption. We feel that this makes the cipher much   
 * harder to attack. The attacker doesn't even know what the S-boxes   
 * contain without including the entire key schedule in the analysis.   
 *  
 * Unlike most Twofish implementations, this one allows any key size from  
 * 0 to 32 bytes. Odd key sizes are defined for Twofish (see the   
 * specifications); the key is simply padded with zeroes to the next real   
 * key size of 16, 24, or 32 bytes.  
 * Each odd-sized key is thus equivalent to a single normal-sized key.  
 *  
 * Arguments:  
 * key      array of key bytes  
 * key_len  number of bytes in the key, must be in the range 0,...,32.  
 * xkey     Pointer to an Twofish_key structure that will be filled   
 *             with the internal form of the cipher key.  
 */   
void Twofish::PrepareKey(const Twofish_Byte key[],int key_len,TwofishKey* xkey)   
    {   
    /* We use a single array to store all key material in,   
     * to simplify the wiping of the key material at the end.  
     * The first 32 bytes contain the actual (padded) cipher key.  
     * The next 32 bytes contain the S-vector in its weird format,  
     * and we have 4 bytes of overrun necessary for the RS-reduction.  
     */   
    Twofish_Byte K[32+32+4];    
    int kCycles;        /* # key cycles, 2,3, or 4. */   
    int i;   
    Twofish_UInt32 A, B;        /* Used to compute the round keys. */   
    Twofish_Byte * kptr;        /* Three pointers for the RS computation. */   
    Twofish_Byte * sptr;   
    Twofish_Byte * t;   
    Twofish_Byte b,bx,bxx;      /* Some more temporaries for the RS computation. */   
    /* Check for valid key length. */   
    if( key_len  32 )   
        {   
        /*   
         * This can only happen if a programmer didn't read the limitations  
         * on the key size.   
         */   
        Twofish_fatal( "Twofish_prepare_key: illegal key length" );   
        /*   
         * A return statement just in case the fatal macro returns.  
         * The rest of the code assumes that key_len is in range, and would  
         * buffer-overflow if it wasn't.   
         *  
         * Why do we still use a programming language that has problems like  
         * buffer overflows, when these problems were solved in 1960 with  
         * the development of Algol? Have we not leared anything?  
         */   
        return;   
        }   
    /* Pad the key with zeroes to the next suitable key length. */   