outputs follows the same rational.
Since we are dealing with input parameters, output parameters, and the functional-
ity of semantic Web services operations (represented with c, c and c, respectively),
i o f
we define a Web service operation as a finite sequence of ontological concepts as:
sws(c, c c)
i o, f
The number of elements can be other than 3 if we consider more or fewer concepts to
be used in a match. The functionality and QoS of Web services [6] can also be con-
sidered when matching requests with advertisements. The functions and algorithm
that we present can be easily extended to include the notion of functionality, since
functionality can be treated in a similar way as inputs or outputs. What the reader
Web Services Discovery Utilizing Semantically Annotated WSDL 253
needs to keep in mind is that we always use the Tversky’s model [23] to match re-
quests with advertisements, independently of the elements (e.g. inputs, outputs, func-
tionality, QoS, etc) being considered.
3.2 Comparing Semantic Web Services Based on a Single Common Ontology
In this scenario, Web service input, output, and functionality concepts are related to
one global and unique ontology providing a common vocabulary for the specification
of semantics. Comparing a concept with the ontology is translated into searching for
the same or similar concepts within the ontology.
There are several functions that can be adapted and used to compute the degree of
match between two input, output, or functionality concepts belonging to the same
ontology. The following four main techniques have been identified [24]:
1. Ontology based approaches. These approaches [25-27] use an ontology and
evaluate the semantic relations among concepts. The most basic metric simply
computes the distance between two concepts in an ontology. This corresponds to
calculating the distance of nodes in a graph.
2. Corpus based approaches. These approaches [28-30] use a corpus to establish
the statistical co-occurrence of words. The rationale is that if two words con-
stantly appear together we may conclude that some relation exists between them.
3. Information theoretic approaches. These approaches [23, 31-33] consider both
a corpora and an ontology, and use the notion of information content from the
field of information theory. By statistically analyzing corpora, probabilities are
associated to concepts based on word occurrences. The information content for
each concept is computed in such a way that infrequent words are more informa-
tive than frequent ones. By knowing the information content of concepts it is
possible to calculate the semantic similarity between two given concepts.
4. Dictionary based approaches. These approaches [34, 35] use a machine readable
dictionary to discover relations between concepts. For example, one approach
determines the sense of a word in a given text by counting the overlaps between
dictionary definitions of the various senses.
Most of these approaches are not suitable to compute the degree of matching between
input and output concepts of the semantic Web services. All these metrics are sym-
metric (except [23]). This means that f(c , c ) = f(c , c ). As explained previously,
1 2 2 1
when matching inputs, outputs and functionality, the matching function needs to be
asymmetric.
Furthermore, ontology-based approaches are rather limited since only the taxonomy
of the ontology is used to find similarities between concepts. Corpus and dictionary-
based approaches require associating a probability with each concept and finding a
specific meaning of a word according to the context in which it is found in a dictionary,
respectively. These approaches are not simple to implement for Web services. Ques-
tions raised include which corpus and dictionaries to use and how to deal with the
heterogeneity of Web service discourse domains.
In our opinion, Tversky’s model [23] needs to be considered when matching se-
mantic Web services, since it has been considered one of the most powerful similarity
254 J. Cardoso, J.A. Miller, and S. Emani
models to date [36]. It is also known as a feature-counting metric or feature-contrast
model. This model is based on the idea that common features tend to increase the
perceived similarity of two concepts, while feature differences tend to diminish per-
ceived similarity. The model takes into account the features that are common to two
concepts and also the differentiating features specific to each. More specifically, the
similarity of concept c to concept c is a function of the features common to c and
1 2 1
c , those in c but not in c and those in c but not in c . For instance, a truck (Sport
2 1 2 2 1
Utility Vehicle) and a sedan are similar by virtue of their common features, such as
wheels, engine, steering wheel, and gears, and are dissimilar by virtue of their differ-
ences, namely the number of seats and the loading capacity.
=
Based on Tversky’s model, we introduce the matching functions S (c ,c ),
i R A
S = (c ,c ) and S =(c ,c ) which analyze the number of properties (which may be
o R A f R A
inherited) shared among two input, output or functionality concepts c and c (R
R A
stands for a Web service request, A stands for a Web service advertisement, i stands
for input, o stands for output, and f stands for functionality) conceptualized within the
same ontology. In our functions S=, function p(c) retrieves all the properties associated
with concept c and function |s| calculates the number of elements in set s. The equal
symbol between two concepts (e.g, c =c ) indicates that the concepts are the same.
R A
The symbol ‘>’ between two concepts (e.g. c >c ) indicates that concept c is a spe-
R A R
cialization of concept c . Finally, the symbol ‘c
⎪ R A
S= (c ,c )=⎪ ⎨ |p(c R)| , c c
⎪ | p(c )| R A
S =(c ,c )=S =(c ,c )= ⎨ R
o R A f R A 1, c c ). As a
R A R A
result, a Web service with input concept c is able to process concept c . For example,
A R
let us consider the ontology from Fig. 4. If a Web service request specifies concept
FinanceAccount as input and an advertisement specifies concept Contract as input
then the advertised service is able to process the input concept FinanceAccount. This
is because the concept c is a subclass of concept c and it has at least the same set of
R A
properties as c . In this case, the similarity is also one.
A
Case 3: In the third case, if the request concept c is a generalization of advertisement
R
concept c (c <c ), then c has probably some properties that do not exist in c .
A R A A R
Therefore, it is possible that a Web service advertisement with input c is not able to
A
process the input concept c due possibly to missing properties. For example, if a
R
Web service request R specifies concept Record as input and an advertisement A
specifies concept FinanceAccount as input then Web service A may not be able to
process the input concept Contract. This is because A may need the property Degree
and Competencies of the input concept to work properly.
Case 4: In the last case, concepts c and c are not equal and do not subsume each
R A
other in any way (c ≠ c ). In this scenario, we evaluate the matching by analyzing
R A
how many common properties exist between the two concepts and how many proper-
ties are different. Also, we analyze the percentage of input advertisement properties
that were satisfied.
=
As an example, let us illustrate the use of function S (c ,c ) for the four cases –
i R A
1), 2), 3) and 4) – that can occur when matching a request c with an advertisement
R
c . In our example, the Web services’ input is annotated with concepts from the on-
A
tology illustrated in Figure 4. The four cases that may occur are listed in Table 2 and
are evaluated as follows:
(cid:131) In case 1), both c and c are associated with the same concept (FinanceAccount).
R A
Since the request matches the advertisement perfectly. The result is 1.
(cid:131) In case 2), the request c is associated with the concept FinanceAccount and the
R
advertisement c is associated with the concept Contract. Since the concept Con-
A
tract is a generalization of concept FinanceAccount, the properties of the concept
FinanceAccount (the set {agreementMember, agreementPeriod, effectiveDate,
insured, accountHolder, amountDue}) is a superset of the properties of the con-
cept Contract (the set {agreementMember, agreementPeriod, effectiveDate,
insured}). All the properties of c exist in c . As a result, the similarity is evalu-
A R
ated to 1.
(cid:131) In case 3), the request c is associated with the concept FinanceAccount and the
R
advertisement c is associated with the concept DepositAccount. Since the concept
A
FinanceAccount is a superclass of concept DepositAccount, the properties of the
concept FinanceAccount (the set {agreementMember, agreementPeriod, effective-
Date, insured, accountHolder, amountDue}) is a subset of the properties of the
concept DepositAccount (the set {agreementMember, agreementPeriod, effective-
Date, insured, accountHolder, amountDue, simpleInterest, agreementBalance,
availableCash}). In this case, when the request c matches the advertisement c
R A
some properties of c are left unfulfilled (the properties simpleInterest, agreement-
A
Balance, and availableCash). To indicate this mismatch the matching is set to the
256 J. Cardoso, J.A. Miller, and S. Emani
ratio of the number of properties of c and the number of properties of c , which
R A
in this case is |p(c )|/|p(c )| = 6/9 = 0.67.
R A
(cid:131) In the last case (4), the request c is associated with the concept FinanceAccount
R
and the advertisement c is associated with the concept Option. The concept Fi-
A
nanceAccount has the set of properties {agreementMember, agreementPeriod, ef-
fectiveDate, insured, accountHolder, amountDue} and the concept Option has
the set of properties {agreementMember, agreementPeriod, effectiveDate, in-
sured, atTheMoney, inTheMoney, optionHolder}. Since the concepts do not have
a parent/children relationship, we compute the percentage by the advertisement’s
properties that are fulfilled with a property from c . The similarity is evaluated as
R
follows:
S=(c ,c )=| p(c R)∩p(c A)| = 4
i R A | p(c )| 7
A
The result of evaluating the function indicates a low degree of matching between the
concepts FinanceAccount and Option. Only one of the three advertisement’s proper-
ties are satisfied by request properties. The following table shows the results for the
four cases presented.
Table 2. An example of matching inputs with a common ontology commitment
Request c R Advertisement c A S i=(c R,c A)
FinancialAccount FinancialAccount 1
FinancialAccount Contract 1
FinancialAccount DepositAccount 0.67
FinancialAccount Option 0.57
As we can see, the concept DepositAccount is closer to the concept FinanceAc-
count than the concept Option. This result corroborates our perception and visual
analysis of the ontology and its concepts.
3.3 Comparing Semantic Web Services Based on Multiple Ontologies
In this scenario, different Web services are described by different ontologies. Since
there is no common ontology commitment, there is no common vocabulary which
makes the comparison of different concepts a more complicated task.
Web service parameters (such as inputs, outputs, and functionality) are identified
by words (classes) and there are two major linguistic concepts that need to be consid-
ered: synonymy and polysemy. Polysemy arises when a word has more than one
meaning (i.e., multiple senses). Synonymy corresponds to the case when two different
words have the same meaning. To tackle with the existence of these linguistic con-
cepts we will use a feature-based similarity measure that compares concepts based on
their common and distinguishing features (properties).
The problem of determining the similarity of concepts defined in different ontolo-
gies is related to the work on multi-ontology information system integration. Most of
the similarity measures previously presented [25-35] cannot be directly used to match
Web Services Discovery Utilizing Semantically Annotated WSDL 257
Web services since they are symmetric, and more importantly, they can only be used
when the concepts to be compared are defined in the same ontology.
Nonetheless, the Tversky’s feature-based similarity model [23] is interesting since
it takes into account the features or properties of concepts and not the taxonomy that
defines the hierarchy of concepts. When matching inputs and outputs, the features of
concepts need to be considered, especially when we compare concepts from different
ontologies we cannot rely on their taxonomy. One can argue that, in scenarios with
different ontologies, we need to take into account the context of ontologies when
comparing concepts. In our approach, the context of a concept is transparently repre-
sented by its inherited properties.
≠
Based on Tversky’s model, we introduce matching functions S (c ,c ),
S ≠ (c ,c ) and S ≠(c ,c ) for semantic Web services with no commoni onR toloA gy
o R A f R A
commitment based on the number of properties shared among two input or output
concepts c and c conceptualized within the same ontology. The function computes
R A
the geometric distance between the similarity of the domains of concept c and con-
R
cept c and the ratio of matched input properties from the concept c . Our similarity
A A
functions are defined as follows: