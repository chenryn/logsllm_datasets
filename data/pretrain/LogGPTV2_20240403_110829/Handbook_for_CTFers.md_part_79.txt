private S_path;
// The mode this file is opened in for writing
 / / A 1azy-1oaded resource handle for reading the file
private S_node;
private S_reader;
---
## Page 695
10.1 PHP Code Auditing
89
/ / A lazy-loaded resource handle for writing the file
// If magic_quotes_zuntime is on, this will be true
private S_writer;
private S_quotes = false;
private S_seekable = nul1;
// If stream is seekable true/false, or nul1 if not knowm
/++
* sparan string
+ Create a neu FileByteStream for Spath.
• @param boo |Swritable if true
Spath
public function _constzuct (Spath, Svritable = false) {
* * /
Sthis->_path = Spath;
Sthis->_mode = $writable ? 'w+b' : 'rb1;
if (function_exists ('get_magic_quotes_runtime*) && Bget_magic_
quotes_zuntime () == 1) (
Sthis->_quotes = true;
/++
+ Get the complete path to the file.
+ @return string
publie function getPath() {
* * /
return Sthis->_path;
ByteStream_PileByteStrean 
SfilePath=#/usr/share/nginx/html/etorage/framework/views/
public funetion _constsruet () {
34e41df0934a75437873264cd28e2d835bc38772.phpa :
parent : =__construcet (SilePath, true) :
public function _destzuct () (
if (file_exists (Sthis->getPath (111 {
unlink (Sthis->getPath (11 ;
Sobj = new Svift_ByteStrean_TemporaryFileByteStrean() :
Sp = new Phar (' - /1.phar', 0) ;
Sp->setStub (*GIF89a′) ;
Sp- >startBuffering() ;
Sp->setMetadata (Sobj) :
Sp->addFromString(′1. txt*,'text ) ;
Sp->stopBuffering() ;
rename (′ . /1 .phar, '1.gif′) ;
? >
Then upload the image, trigger the deserialization to delete the cached template
file when the image is checked, and then access the flag route to get the flag, see
Fig. 10.36.
---
## Page 696
684
10  Code Auditing
Fig, 10.36 Get flag
However, the problem can also be solved with an RCE vulnerability, and you
may wish to download the code for a code auditing exercise.
10.2Java Code Auditing
10.2.1LearningExperiences
Java will always be the *most familiar stranger" to CTF web-oriented competitors.
The unfamiliarity lies in the fact that Java’s large structure and complex features
e ads, os nou st eu aenue  Supns o adod sumosp uo
intuitive*. Familiarity lies in the fact that the vast majority of web frameworks on
the market today are more or less based on the Java web design pattern, and that
many of the environments we encounter in the real world penetration testing are Java
web environments rather than PHP or .NET, etc. In this section, I will share some of
my experiences in learming Java code auditing from scratch, which I hope will help
you.
1. how to get started
suaus, pue _Sussnns, spaom om1 Aq <pand Supne eae[ pauea I
In recent years, the number of articles in major security forums about Java
security is increasing. And there are more informations that you can refer
to. These informations are very helpful for the leaming of Java security. However,
when I first started with Java Security, there were way more less relevant articles
than today, and other kinds of information is also very little, so build from scratch to
really took a lot of effort. This process all rely on “struggling” and “°striving", just bit
the bullet and analyze the code.
Many people usually fall into a misunderstanding before they start learming Java
code auditing. They think that they need to finish leaming about Java before they can
start auditing Java code. In one way, this is not wrong, but the long-term, boring
learming process of Java can kill the enthusiasm for auditing, leading many people to
give up halfway. The author's view on this issue is “Do it, then know it.", aka, leam
by doing. If you are given a thick book about Java development introduction and
asked to read it from the beginning when you begin to leam java code auditing, even
if you can finish the book, you often don’t know what you can do with what you
read. And when you analyze it, you realize that what you leam from just reading the
---
## Page 697
10.2 Java Code Auditing
685
book is too useless and empty, and you don’t even know where to start in real-life
scenarios. Therefore, I recommend that beginners read and understand Java code
first and then start to analyze it directly, and try to solve any problem they encoun-
tered, learn what they don’t understand, and then summarize after trying to solve the
corresponding problem through leaming, which is way of learming with highly
efficieney.
There must be a lot of people who have encountered a lot of development
environment problems when trying to start a Java audit analysis, because they are
new to Java development and are not sure how to configure the dev environment.
They often encountered with the problems such as how to build projects using
op o mou  uis pue yeo o iofod u opdap 1 op mou u
JAR package to see the source code, how do I perform dynamic debugging, and so
asa um paapos arq nof se Suof sV ,sled, asaq Kq papensp aq 1,uog uo
problems yourself, you will not step on them again. So you must keep a stable mind
and slowly understand them by checking information or other methods. This is how
we learm Java, just slow work leads to meticulous work, which can make this cup of
“°coffee” more and more fragrant.
2. Getting Started
After you have stepped through a certain number of °traps" in your dev environment
configuration that seemingly have nothing to do with Java security, the first step of
azpeue pue aonpoudau o s 1xau op o paou no eu unoq seq aunof Suo, o
a large number of exposed vulnerabilities. Quality vulnerability’s analysis is the
easiest and most direct way to improve your skills, and Java auditing is very
knowledge-based, so if you haven’t debugged and analyzed it step by step, it'’s
hard to know why you can do it in that way, so it's recommended to analyze as many
vulnerabilities in large open source projects like Struts2, Jenkins, etc. as possible,
and learm some exploit chains, such as analyzing Deserialization exploit chain in
ysoserial, JNDI exploit flow, etc. Ask questions during the analysis, do your best to
explain the entire call chain of the vulnerability, and try to write your own exploits at
the same time.
pu mo 1 on ueod s11 xpom siseue qeuna jo 1o e Suop o
out of the overly detailed execution flow and think bolistically about how the
framework implements the flow, what is going on in the framework, and whether
you can explain each step of the execution flow. In this way, you will gradually get to
know the design patterms of the framework. The easiest way to illustrate this is if you
can understand the execution flow of the Struts2 framework. Once you are able to do
Isae| o azfjeue o Kn on uem Krtu noA uso mof uo sisfjeue Aqeauna aq
outbreaks of vulnerabilities in a timely manner, and gradually improve your under-
standing of Java auditing through extensive vulnerability analysis. That’s how you
get started.
3. Further study
I believe that at this point, with the knowledge you have accumulated, you will
gradually find that the vulnerabilities you have analyzed seem to have a particular
---
## Page 698
686
10  Code Auditing
pattern or relationship, and you will feel that you are geting worse and worse, so
congratulations, you have finally *embark on a hopeless adventure”.
This is where you can start to dive into some of the Java runtime mechanisms and
design pattems. On the way to pursuing that particular relationship, you'll start to
dive into things like Java dynamic proxies, Java class loading mechanisms, etc.,
which are like the roots of a tree, and which will be used regardless of the
framework. With these basics in place, you'll have a clearer understanding of
where you are and what you're doing when you analyze the framework source code.
x pug pue hodxa rop qpoq “urese 1ano pue yaao paeadau s! ssaod su
vulnerabilities. Quantitative change leads to qualitative change, which is also correct
for research about Java.
10.2.2
EnvironmentConfiguration
“IntelliJ IDEA° is recommanded as a common tool for dev environment configura-
tion and code viewing, which can be used to debug source code, software packages,
and remote programs. To create a new test project with IDEA, just select *File 
paas “xoq Soep dn-dod a u (LE'o1 Bly as) pueuo nuau ,1oofoid + moN
“sdk", which is the path that you have installed Java in (see Fig. 10.38), and then
test1
ntelliuIC
File
Edit View
Navigate
Code
AnalyzeBelactorBuildRynIoolsVCSWindc
New
Project
Qpen
Project from Existing Sources.
Open UR...
Project from Version Control
Open Recent
Module.
Close Project
Module from Bxisting Sources.
 segtings..
Ctrl+Alt+S Java Class
Fig, 10.37 IDEA menu
ava
Project SOK:
*1.8.0 171')
Jaw
Additional tibx
(62°09'1, uopua ewe] 91 ]
JBoss
dB12ME
J
P 1.8 Gvs ve
 Couds
Sping
○Aquilin TesNG
es Droos
 Jiva FX
avatt
Fig, 10.38 The path that you have installed Java in
---
## Page 699
10.2 Java Code Auditing
687
Fig, 10.39 Select the °hello
world" project for
NewProject
Create project fromjemplate
B Command Line App
Java HelloWorld
Fig, 10.40 Specify the
project puth, and enter a
New Project
project name
Project name:
test
Project location:
O:(workjava\test\test
Fig. 10.41 Result
Fig, 10.42 Setup process
Project Structure (Ctrl+Alt+Shift+S)
Q
click the Next button. Here I may just select the “hello world" project for demon-
stration (see Fig. 10.39), which is just a Main class and outputs “*hello world".
Specify the project path, and enter a project name, see Fig. 10.40, and the resulting
interface is shown in Fig. 10.41.
If you want to introduce a dependency package, you can create a new directory
named libs directly in the test directory, put the dependency JAR package in it, and
then configure the dependency directory in the project setings (see Figs. 10.42 and
10.43), and then select the alibs directory (you can create a new one), see Fig. 10.44.
At this point, you can debug some programs, put all the JAR packages in the libs
directory, and configure the debugging information, see Figs. 10.45 and 10.46.
---
## Page 700
10  Code Audiing
Fig, 10.43 Setup process
X
test
Fig, 10.44 Sctup pcocess
Fig, 10.45 Setup process
Main v
口
Q
Edit Configurations...
 Save “Main’ Configuration
Main
---
## Page 701
10.2 Java Code Auditing
689
Fig, 10.46 Setup process
Run/Debug Configurations
一
Add New Configuration
Arqulian IestNG
Attach to Nodejs/Chrome
 Compound
Cucumber java
Firefox Remote
Gradle
 Griffon
Gruntjs
cupjs
 JAR Application
JavaScript Debug
JBoss Server
Jest
Jetty Server
aunro
Kotlin
Kotlin script
Maven
npm
NW.js
Protractor
React Nativ
Remote
Spy-js
 Spy-js for Nodejs
TesNG
Tomcat Server
webLogic Server
XSLT
Choose a suitable server configuration or directly specify theJAR package, whose
detailed configuration information need to be searched by yourself.
That is to say if you want to debug a weblogic vulnerability, you should import all
the weblogic JAR packages into the libs file, configure the debugging information
and set breakpoints. Then you can start debugging by click on the “debug” button in
the upper right corner of IDEA.
---
## Page 702
069
10  Code Auding
Some common shortkeys (For Windows) are as follows.
▪ F4, Variable and function tracing.
* Ctrl+H to view inheritance relationships.
• Ctrl+Shift+N to find the file under the current project.
10.2.3Decompilation Tools
1. Fernflower
Fernflower is a builtin decompiler in IDEA, which is code friendly and has a
graphical user interface, check out https:/the. bytecode.club/showthread.php?
tid5 if your need some more information. The basic commands are as follows.
java -jar fermflower jar jarToDecompile jar deconp/
decomp represents the directory where the decompilation results are stored.
where jarToDecompile.jar represents the JAR package to be decompiled, and
2. JD-GUI
Java decompiler is also a decompiler tool recognized by many security practitioners
with a graphical interface, see Fig. 10.47. Select the “File → Open File" menu
command, and then select the JAR and WAR files that need to be decompiled, as
shown in Fig. 10.48.
10.2.4Introduction toServlets
Servlet is a component specification (Java application for servers) developed by Sun
Microsystems to extend the server functionality of the Web with platform- and
Fig, 10.47 Sctup peocess
Java Decompiler
File
Edit Navigation Search Help
Qpen File..
Close
Ctrl+W
Save
s
Save All Sources Ctrl+Alt+S
Recent Files
Alt+X
---
## Page 703
10.2 Java Code Auditing
169
File Edit Navigation Search Help
←→
bea_1s9_async_response.war3
·申META-INR
申TEB-INF
META-INF/schenas
classes
由eblogic.vsee.asymc
AsymcResponseBean.class
 AsymcResponseBean
AsyncResponseBeanPortType. class
AsyncResponseBeanSoap12.class
AsyncResponseBeanSoap12PortType.class
X
AsyncResponseService-annotation. xnl
AsyncResponseService.rsdl
AsyncResponseService. xnl
AsyncResponseServiceSoapl2-annotation.xnl
AsyncResponseServiceSoap12.sdl
AsymcResponseServiceSoap12.xnl
weblogic-vebservices.xnl
weblogic-vebservices-policy.xnl
woblogic.xnl
webservices.xal
Fig, 10.48 Select the JAR and WAR files that need to be decompiled
protocol-independent features that can generate dynamic Web pages that act as a
combination of client requests (Web browsers or other HTTP clients) and server
responses (databases or applications on an HTTP server). Midle Layer.
The scripting language on behalf of Java Web is JSP, but the Java Virtual
Machine will only parse class iles, so how does a JSP script running? This involves
the connection between JSP and Servlet, JSP is a subclass of Servlet after compiled
and interpreted by the Web container, JSP is better at page display function, while
Servlet is better at back-end logic control.
1. Servlet Life Cycle
The foundation of the Java Web lifecycle is built on the servlet lifecycle, which is the
uarsap A au asn jeq sxomaue qam pue pafod dSI saduus a oq jo ano
pattern (e.g. Spring MVC). Understanding the servlet lifecycle helps us to better
understand the flow of execution of an access request on the Java Web.
After the server receives the request from the client, a Servlet is invoked by the
web container. First, the Web container checks if the Servlet specified by the client
request has been loaded (the path to access a specific Servlet can be configured in
web.xml), if it has not been loaded, it loads and initializes the Servlet, by calling the
---
## Page 704
692
10  Code Auditing
Servlet's init( ) function. If it has been loaded, a new Servlet object will be created,
and the request is encapsulated into HttpServletRequest, and the response server
returns is encapsulated as HttpServletResponse.  HttpServletRequest and
HttpServletResponse are passed as parameters to call the function service( ), after
which the servlet implement the logical to deal with the request until the web
container is stopped or restarted. The approximate lifecycle of this process is: init()
service() → destroy0.
HttpServlet, which are subclasses of GenericServlet and specialize in handling
  ssnbau sn  p o sd uo (s d
doGet( ) function is called if the client’s request type is GET, and the doPost( )