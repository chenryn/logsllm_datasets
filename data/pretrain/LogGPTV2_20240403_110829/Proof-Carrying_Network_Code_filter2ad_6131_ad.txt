certify the credential:
sig(K
−1
Bob, τdelegate)
Now, when NetCo submits a network configuration update p
to Bob’s network, it is necessary for NetCo to provide credentials
Γ and a term witness e such that , Γ ⊢ e : KBob Says reconfig(p)
is derivable. To accomplish this, NetCo would also generate a cre-
dential asserting their intent to install p (identical in NALlight and
System FSays forms):
τreconfig ≜ KNetCo Says reconfig(p)
along with the signature:
sig(K
−1
NetCo, τreconfig)
Then to install p, NetCo submits Γ containing the following type
bindings:
delegate : τdelegate
reconfig : τreconfig
along with the certifying signatures described above, and also sub-
mits the following term witness:
witness1 ≜ config ← delegate;(((projl(config))[p]) reconfig)
On Bob’s Server, the following authorization judgment can then be
verified:
, Γ ⊢ witness1 : KBob Says reconfig(p)
4.1.1 Addressing Federation. In the federated edge computing
scenario where Alice aims to submit a PCNC request to forward
Bob’s public data to her, the scenario is complicated by the realistic
assumption that Bob and Alice do not have a direct trust relation-
ship. To resolve this, an appealing approach is to assume that mem-
bers of a network federation will allow each other to extend (not
entirely reconfigure) each other’s networks. Membership in this
group can be established by agreement on a certification authority
(CA), that possesses the private key for the FedMem group. In our
scenario this could be NetCo or another trusted entity. Certificates
can then be constructed using the public key for FedMem.
Bob can advertise his trust in the FedMem group using the fol-
lowing credential:
KBob Says KFedMem SpeaksFor KBob on (X : extend(X))
with the corresponding type form:
τFedMem ≜
KBob Says ∀X .KFedMem Says extend(X) → KBob Says extend(X)
along with the signature:
sig(K
−1
Bob, τFedMem)
Upon joining the federation, Alice can independently certify her
membership via the following certificate, issued by the CA:
KFedMem Says KAlice SpeaksFor KFedMem
with the corresponding type form:
τAlice ≜ KFedMem Says ∀X .KAlice Says X → KFedMem Says X
along with the signature:
sig(K
−1
FedMem, τAlice)
Proof-Carrying Network Code
CCS ’19, November 11–15, 2019, London, United Kingdom
Now, when Alice submits a network configuration extension p to
Bob’s network that forwards his public data to her, it is necessary
for Alice to provide credentials Γ and a term witness e such that
, Γ ⊢ e : KBob Says extend(p) is derivable. To accomplish this,
Alice would also generate a credential asserting her intent to extend
Bob’s current configuration q with p (identical in NALlight and
System FSays forms):
τextend ≜ KAlice Says extend(p)
along with the signature:
sig(K
−1
Alice, τextend)
Then Alice submits Γ containing the following type bindings:
extend : τextend
fedmem : τFedMem
alice : τAlice
along with the certifying signatures described above, and also sub-
mits the following term witness:
witness2 ≜
bobconfig ← fedmem;
bobconfig[p](config ← alice; (config[extend(p)] extend))
On Bob’s Server, the following authorization judgment can then be
verified:
, Γ ⊢ witness2 : KBob Says extend(p)
4.2 Behavioral Verification
The network configuration shown in Figure 5 reifies the network
structure for the case study introduced in Section 1. The local
network contains two hosts and four switches/routers. Hosts H1
and H2 represent IoT devices (like the sleep tracker and the blood
pressure monitor in the use case). There are also two local network
switches (at layer 2) SH1 for H1 and SH2 for H2–it is also possible
to have the switching capabilities implemented on IoT devices
themselves. When we consider a concrete implementation of the
case study in Section 5, we will simulate this exact structure in
Mininet as described in Section 5.3.
Behavioral Policy. We imagine that the local network owner Bob
specifies a behavioral policy that any network configuration code
must satisfy. The main concern is that this policy only allows public
or emergency data from escaping the network. Configuration code
submitted by vendors must be a refinement of this policy.
The policy includes specification of the network topology t, a
local forwarding policy f for the topology, and crucially a firewall
policy w that indicates what sort of traffic is allowed to escape the
network. Beginning with the topology, the local switches are linked
to the edge router denoted by ER, which is then connected to the
gateway switch GS for external communication. In NetKAT, it is
standard to use the following notation to represent a link from
switch S1, port P1, to switch S2, port P2:
dup · sw = S1 · pt = P1 · sw ← S2 · pt ← P2 · dup
By convention we will write such a link as follows:
[S1 : P1](cid:95) [S2 : P2]
Figure 5: Our Mininet network topology and configuration
where the numbers represent port numbers at the switches.
We can encode the network topology into NetKAT as follows:
t ≜ [SH1 : 2](cid:95) [ER : 2] + [SH2 : 2](cid:95) [ER : 3]+
[ER : 2](cid:95) [SH1 : 2] + [ER : 3](cid:95) [SH3 : 2]+
[ER : 1](cid:95) [GS : 1]
Intuitively, this program models the links between ER, SH1, and
SH2, and from ER to GS. To keep the example simple, we will
focus on the one-way flow of data from internal devices H1 and
H2 toward the gateway GS—i.e., we will not specify the behavior
of GS or of the network that connects it to external hosts. Hence,
the local policy forwards from hosts H1 and H2 toward GS:
f
≜ (sw = SH1 · pt ← 2)+
(sw = SH2 · pt ← 2)+
(sw = ER · pt ← 1)
The firewall policy specifies that only data marked with the PU B
flag, indicating public data, or with the 911 flag, indicating emer-
gency data, may be forwarded by the edge router:
w ≜ ¬(sw = ER)+
sw = ER · meta =PUB+
sw = ER · meta =911
The complete policy is then defined as follows, which is submitted
by Bob to the PCNC server:
spec ≜ (f · w · t)∗
4.2.1 Configuration and Reconfiguration. Also depicted in Fig-
ure 5 are two external hosts H3 and H4. Initially, when Bob’s home
network only includes the sleep tracker, we imagine that H3 is
the external data repository used by the vendor for data storage
and analysis. Thus, the initial network configuration uses the same
topology and forwarding policies t and f as spec, but refines the
firewall to only allow the release of public data destined for H3:
winit ≜ ¬(sw = ER) + sw = ER · dst = H3 · meta =PUB
and so the initial configuration is (f ·winit · t)∗, and observe it is the
case that (f ·winit ·t)∗ ≼ spec. Subsequently, when Bob’s network is
augmented to include the blood pressure monitor, NetCo provides
a reconfiguration that allows public and emergency data to be
ERH1H2SH1SH2GSH3H4Frenetic SDN controllerPCNC11223211H5 (Edge Device)CCS ’19, November 11–15, 2019, London, United Kingdom
Skalka et al.
released, while identifying a specific destination H4 for emergency
data (e.g., a care provider).
expressing trust in FedMem members in a similar manner as Bob,
for example via the credential:
wreconfig ≜ ¬(sw = ER)+
sw = ER · dst = H3 · meta =PUB+
sw = ER · dst = H4 · meta =911
In full detail, the reconfiguration program, that we call reconfig,
would be defined as:
reconfig ≜ (f · wreconfig · t)∗
and it is the case that reconfig ≼ spec, since reconfiguration code
only refines spec with specific data endpoints.
Putting together these definitions in the PCNC framework, suc-
cessful verification for the described reconfiguration request estab-
lishes validity of the following judgment:
, Γ ⊢ ⟨witness1, reconfig ≼ spec⟩ :
KBob Says reconfig(reconfig) × reconfig ≼ spec
4.2.2 Extension. Finally, in the scenario where Alice aims to
extends Bob’s network configuration to also forward his public
data to her, we imagine that Alice’s edge router address is H5. In
order to receive Bob’s public data, we can envision two possible
scenarios. In the first, we imagine that Bob is contacted by Alice via
some application-level process, and updates Bob’s sleep monitor
to send public data to H5. Then Alice can request to extend Bob’s
existing firewall with a new rule allowing public data out of the
network. That is, we can define wextend as:
wextend ≜ sw = ER · dst = H5 · meta =PUB
and Bob would install the program extend1:
extend1 ≜ reconfig + (f · wextend · t)∗
Another option is for Alice to duplicate traffic intended for H3 and
address it to H5 entirely at the network level. In this case she could
request to extend the forwarding behavior at ER via fextend:
fextend ≜ sw = SH1 · pt ← 2)+
(sw = SH2 · pt ← 2)+
(sw = ER · dst = H3 · dst ← H5 · pt ← 1)
and Bob would install the program extend2:
extend2 ≜ reconfig + (fextend · w · t)∗
In our implementation we explore the second option as described
in Section 5, because the sleep monitor application we used allows
only one data destination address to be specified.
Putting together these definitions in the PCNC framework, suc-
cessful verification of the second sort of extension request estab-
lishes validity of the following judgmement:
, Γ ⊢ ⟨witness2, extend2 ≼ spec⟩ :
KBob Says extend((fextend · w · t)∗) × extend2 ≼ spec
4.3 Additional Concerns
It is important to note that multiple PCNC servers can exist in
the same federated network that support their own policies. For
example, in the above scenario Bob is only the administrator of his
own network. Alice could also support reprogramming of her own
network with an edge controller running a PCNC server, and by
KAlice Says KFedMem SpeaksFor KAlice on (X : extend(X))
Of course, Bob or other principals would still need to be properly
credentialed as FedMem members by the FedMem CA. In particular,
Bob could not spoof membership using a credential like,
KBob Says ∀X .KBob Says X → KFedMem Says X
since hand-off will not logically apply to establish the delegation—
i.e., the verification would fail during System FSays type checking.
Another practical concern is certificate revocation—the creden-
tials discussed above are effectively irrevocable, which is problem-
atic if certain principals turn out to be untrustworthy. However,
credential revocation can be defined in NAL—e.g., via timestamps
and a notion of trusted local time, as explored in previous work
[35]. We omit consideration of revocation here for brevity.
Finally, we note that our scenario assumes that trust domains
(e.g., Bob’s network) have not been compromised. Otherwise, pri-
vate data could easily be leaked—e.g., by internally relabeling pri-
vate data packets as public. One method to address the problem of
device compromise is to use PCNC itself to segment the network
into different trust domains, and validate packets upon ingress. For
example, if the network contains an untrusted device, we could use
the switches at the trust boundary to drop packets that originate
from that device and carry the PU B tag, because only trusted de-
vices should add that tag. Moreover, we can use PCNC to ensure
that this behavioral property is always enforced, even when the
switches are reconfigured by other principals. As for individual de-
vice compromise, while defense against such threats falls out of the
scope of this paper, we could mitigate such risks by employing solu-
tions for device authentication [10, 33, 34], and/or for authorizing
firmware updates to avoid malware installation [26, 27].
5 PCNC IMPLEMENTATION
We have implemented the PCNC client-server framework described
in Section 3 in both a Mininet [39] simulation, and in a real Rasp-
berry Pi-based network with sleep tracking and blood pressure
monitoring devices. We extend the existing Frenetic [12] framework
with features for communicating and verifying PCNC messages. In
this Section we describe important details of the implementation,
and evaluate its performance using the PCNC instance formulated
in Section 4.
5.1 Client and Wire Format
The PCNC client accepts source code of a proof term, configura-
tion program, and credentials as input. It generates a JSON object
intended for communication to the server over https. For expres-
sions e, types τ, and NetKAT programs p, each has an s-expression
representation and we denote their serialized format as ⌊e⌋, ⌊τ⌋,
and ⌊p⌋, respectively. In full detail, the client takes as input the
following elements:
i. NetKat source code program p.
ii. System FSays source code proof term e.
iii. A list Γ of named credentials each of the form cred : KA Says τ.
iv. A list of private key signature cred : sig(K−1
A , ⌊τ⌋) for each
credential in Γ.
Proof-Carrying Network Code
CCS ’19, November 11–15, 2019, London, United Kingdom
{
}
"title": "PCNC Wire Format"
"description": "PCNC wire format schema"
"type": "object"
"ty": { "type" : "string", "description": "install request" }
"exp": { "type" : "string", "description": "install request proof"}
"tenv":
{
"type" : "array",
"items" :
{
"type": "object"
"key": { "type" : "string", "description": "credential id" }
"ty": { "type" : "string", "description": "credential" }
"enc": { "type" : "string", "description": "credential signature" }
}
}
"prog": { "type" : "string", "description": "configuration program"}
Figure 6: PCNC wire format schema.
{
"ty":"(Says (Principal KBob) Reconfig(Program ⌊reconfig⌋))",
"exp": "Bind config
(Var delegate_cred)
(Apply (TyApply Projl(Var config) (Program ⌊reconfig⌋))
(Var reconfig_cred))"
"tenv":
[{"key" : "reconfig_cred",
"ty" : "Says (Principal KNetCo) (Reconfig (Program ⌊reconfig⌋))",
"enc" : sig(K−1
NetCo, ⌊τreconfig⌋)},
{"key" : "delegate_cred",
"ty" : "Says (Principal KBob)
Prod (
(Forall X (Fun (Says (Principal KNetCo) Reconfig(TVar X))
(Says (Principal KBob) Reconfig(TVar X)))),
(Forall X (Fun (Says (Principal KNetCo) Extend(TVar X))
Bob, ⌊τdelegate⌋)}],
(Says (Principal KBob) Extend(TVar X)))))",
"enc" : sig(K−1
"prog": ⌊reconfig⌋
}
Figure 7: PCNC wire format example, with definitions from
Section 4 reconfiguration scenario.
In our implementation we generate and check signatures using the
Ring cryptography library [36]. Note, however, that the client does
not require access to private keys, so it can use credentials signed
and provided by non-local sources.
The client parses p, e, and Γ to a serialized format, associates sig-