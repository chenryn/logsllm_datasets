### Optimized Text

#### Unhandled Exceptions
Oyente flagged unhandled exceptions, which account for 27.9% of the contracts in our benchmark. Out of these 5,411 contracts, 1,385 are distinct, and 116 have available source code. Manual analysis confirmed that all 116 contracts are true positives. To verify this, we checked for the presence of external calls (SEND, CALL instructions) that are not followed by failure checks. These failure checks are typically implemented by verifying if the return value is non-zero.

The prevalence of this problem can be explained by the following observation: In the first 1,459,999 blocks on the public blockchain, 180,394 cross-contract calls were processed. Each contract invocation may involve additional calls to other contracts, increasing the call-stack depth. These can be due to function or library calls, external account transactions, or nested recursive contract calls. Figure 14 illustrates the call-stack depths of these contract invocations, showing that most involve some level of nesting (e.g., invoking other contracts). Notably, all contract invocations do not exceed a call-stack depth of 50 in benign runs, far below the limit of 1,024. This explains why exceptions are commonly unexpected and unhandled in benign invocations.

#### Transaction-Ordering Dependence
Transaction-ordering dependence (TOD) is less common, with 3,056 contracts, or 15.7% of the contracts in our benchmarks. Of these, 135 are distinct, and 32 have available source code. Manual verification revealed that 9 are false positives and 23 are true positives. To confirm, we looked for different flows of Ether where the outcome depends on the order of input transactions.

Several true positive cases, where this dependence is exploitable, are discussed later. An example of a false positive is shown in Figure 15, where there are two separate flows of Ether, but the order of their execution does not change the contract's outcome.

#### Public Verification
Verifying the attack on the public blockchain is feasible, but for ethical reasons, we did not conduct attack confirmation on contracts [22, 25, 26] where users might lose funds. Instead, we performed our verification on the EtherID contract, where the attack has less severity. Importantly, EtherID allows us to target our own accounts, ensuring that other accounts are not affected in the experiments.

We verified the problem with EtherID by creating our own IDs and self-purchasing them. We demonstrated that the registers of our IDs do not receive the intended payments when the registers use contract wallets or when buyers are malicious and conduct the call-stack exceeding attack.

Our two IDs, `dummywallet` and `foowallet`, were registered by addresses `0x33dc532ec9b61ee7d8adf558ff248542c2a2a62e` and `0x62ec11a7fb5e35bd9e243eb7f867a303e0dfe08b`, respectively. The price to buy either ID is 0.01 Ether. The address `0x33dc532...` is a contract address that performs some computation (burning gas) upon receiving any payment.

We then sent two transactions from different addresses to buy the two IDs. The first transaction, labeled 6, was to buy `dummywallet`. However, `0x33dc532...` is a contract address designed to burn all provided gas without doing anything else. Thus, the `send` function in Line 4 of EtherID to `0x33dc532...` fails, and `0x33dc532...` sells its ID without receiving any payment. The 0.01 Ether remains in the EtherID contract forever.

The second transaction, labeled 7, was sent from a contract that calls itself 1023 times before sending a buy request to EtherID to purchase `foowallet`. The code snippet for this attack is shown in Figure 16. When EtherID executes `send` in Line 4, the call stack already has 1024 frames, causing the `send` to fail regardless of the gas used. Consequently, the address `0x62ec11a7...` does not receive the 0.01 Ether payment as it should.

#### Related Work
**Smart Contract Security:**
Delmolino et al. [14] showed that even simple self-construct contracts (e.g., "Rock, Paper, Scissors") can contain several logic problems, including:
- **Contracts not refunding:** Some contracts proceed only if users send a certain amount of Ether but sometimes "forget" to refund users who send less.
- **Lack of cryptography for fairness:** Some contracts store user inputs in plaintext, allowing malicious users to submit biased inputs.
- **Incentive misalignment:** Some contracts do not incentivize users to follow intended behavior, leading to potential losses for participants.

These security problems are primarily logical flaws in contract implementation. In contrast, our paper documents new security bugs stemming from semantic misunderstandings by smart contract developers. We suggest improvements to the semantics and introduce Oyente to detect these bugs in existing Ethereum contracts. Our evaluation showed that 8,519 existing contracts contain at least one of these new bugs. The call-stack problem of Ethereum was previously reported in a security audit by Miller et al. [24], but it remains unfixed.

Other work also studies security and privacy concerns in designing smart contracts [6, 27, 39, 40]. For instance, Hawk [27] provides confidential execution for contracts using cryptographic techniques, and Town Crier [39] feeds reliable, trustworthy data from trusted web servers to smart contracts via hardware-rooted trust.

**Distributed Systems and Programming Languages:**
Security problems in smart contracts often relate to issues in traditional distributed systems. For example, concurrency control in multiuser distributed database systems (DBMS) [41] is superficially similar to the transaction-order dependency problem. However, transaction-ordering problems in permissionless distributed systems like cryptocurrencies are more complex because adversaries can manipulate the order.

Many previous works attempt to build a global timestamp in distributed systems, both asynchronous and synchronous [42â€“44]. Time in distributed systems traditionally forms a partial order rather than the total order given by the blockchain. As discussed in Section 3, having access to the block timestamp (in addition to the block ID) is redundant and invites attacks. Lastly, propagating exceptions is inspired by the exception handling mechanisms in modern programming languages [45, 46].

#### Example Code Snippets
**EtherID Contract:**
```solidity
function buyDomain(string memory domain, uint price, bool transfer, uint expires) public payable {
    Domain storage d = domains[domain];
    // ID on sale, and enough money
    if (d.price > 0 && msg.value >= d.price) {
        address(d.owner).send(d.price);
        d.owner = msg.sender; // Change the ownership
        d.price = price; // New price
        d.transfer = transfer; // New transfer
        d.expires = block.number + expires;
        DomainChanged(msg.sender, domain, 0);
    }
}
```

**PonziGovernmentMental Contract:**
```solidity
function lendGovernmentMoney(address buddy) public {
    if (lastTimeOfNewCredit + TWELVE_HOURS > block.timestamp) {
        // Sends jackpot to the last creditor
        creditorAddresses[creditorAddresses.length - 1].send(profitFromCrash);
        owner.send(this.balance);
        // Reset contract state
        lastCreditorPaidOut = 0;
        lastTimeOfNewCredit = block.timestamp;
        profitFromCrash = 0;
        creditorAddresses = new address[](0);
        creditorAmounts = new uint[](0);
        round += 1;
        return false;
    }
}
```

This optimized text is more structured, clear, and professional, making it easier to understand and follow.