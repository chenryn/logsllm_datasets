# NSD SECURITY DAY01
# 1：Linux基本防护措施
## 用户账号安全
### chage工具设置/查看账号有效期
\[root@client-50 \~\]# useradd tom
\[root@client-50 \~\]# chage -l tom
最近一次密码修改时间 ：3月 06, 2019
密码过期时间 ：从不
密码失效时间 ：从不
帐户过期时间 ：从不
两次改变密码之间相距的最小天数 ：0
两次改变密码之间相距的最大天数 ：99999
在密码过期之前警告的天数 ：7
\[root@client-50 \~\]# chage -l #查看用法
用法：chage \[选项\] 登录
选项：
-d, \--lastday 最近日期 将最近一次密码设置时间设为"最近日期"
-E, \--expiredate 过期日期 将帐户过期时间设为"过期日期"
-h, \--help 显示此帮助信息并推出
-I, \--inactive INACITVE 过期 INACTIVE 天数后，设定密码为失效状态
-l, \--list 显示帐户年龄信息
-m, \--mindays 最小天数 将两次改变密码之间相距的最小天数设为"最小天数"
-M, \--maxdays 最大天数 将两次改变密码之间相距的最大天数设为"最大天数"
-R, \--root CHROOT_DIR chroot 到的目录
-W, \--warndays 警告天数 将过期警告天数设为"警告天数"
\[root@client-50 \~\]# chage -E 2019-03-31 tom
###  passwd命令对账号的锁定解锁
不让用户登录的两种办法:
1,修改shell为/sbin/nologin
2,锁定
passwd命令:
-l 锁定 -u 解锁 -s 查看状态
\[root@client-50 \~\]# grep tom /etc/shadow
tom:!!:17961:0:99999:7::17986:
\[root@client-50 \~\]# passwd -l tom
锁定用户 tom 的密码 。
passwd: 操作成功
\[root@client-50 \~\]# passwd -u tom
解锁用户 tom 的密码。
passwd: 警告：未锁定的密码将是空的。
passwd: 不安全的操作(使用 -f 参数强制进行该操作)
\[root@client-50 \~\]# passwd -s tom
passwd：错误的参数 -s：未知的选项
\[root@client-50 \~\]# passwd -S tom
tom LK 2019-03-06 0 99999 7 -1 (密码已被锁定。)
## 强制定期修改密码
### /etc/login.defs用户默认属性配置文件 
新建用户的默认属性配置文件
PASS_MAX_DAYS 99999 最长天数
PASS_MIN_DAYS 0 最短天数
PASS_MIN_LEN 5 长度
PASS_WARN_AGE 7
### /etc/skel/ 用户初始环境目录
添加用户后家目录下都有隐藏文件,系统登录系统的配置文件
添加用户后自动从/etc/skel/ 目录下拷贝所有配置文件到用户家目录里面
利用此特性,在/etc/skel/预先放入文件,新建用户之后,每个用户家目录都会有此文件
\[root@client-50 \~\]# ls -a /etc/skel/
. .. .bash_logout .bash_profile .bashrc .mozilla
\[root@client-50 \~\]# touch /etc/skel/1.txt
\[root@client-50 \~\]# user add jerry
bash: user: 未找到命令\...
\[root@client-50 \~\]# useradd jerry
\[root@client-50 \~\]# ls -a /home/jerry/
. .. 1.txt .bash_logout .bash_profile .bashrc .mozilla
所有新建用户的目录下都会多1.txt文件了
## 伪装登录提示
![](media/image1.png){width="4.572222222222222in"
height="1.9729166666666667in"}
配置文件:
/etc/issue 系统版本和内核版本信息隐藏
/etc/issue.net 系统网络连接隐藏
/etc/redhat-release 版本信息
修改文件内容即可
## 文件系统安全
### 程序和服务控制
禁用非必要的系统服务
RHEL6 开启自启 chkconfig httpd on
RHEL6 开启不自启 chkconfig httpd off
RHEL7 开启自启 systemctl enable httpd
RHEL7 开启不自启 systemctl disable httpd
### 锁定/解锁保护文件
重要的文件系统不允许被随便修改
lsattr 查看有没有特殊属性
chattr 添加(+)/删除(-)文件属性
chattr命令用于设置文件的隐藏权限，格式为："chattr \[参数\] 文件"
-i 将无法对文件进行修改,
若对目录设置后则仅能修改子文件与复制子文件,而不能新建或删除。
-a 仅允许补充（追加）内容.无法覆盖/删除(Append Only)。
\[root@client-50 \~\]# mkdir test
\[root@client-50 \~\]# echo a \>test/a.txt
\[root@client-50 \~\]# ls test/
a.txt
\[root@client-50 \~\]# cat test/a.txt
a
\[root@client-50 \~\]# chattr +i test
\[root@client-50 \~\]# lsattr -d test
\-\-\--i\-\-\-\-\-\-\-\-\-\-- test
\[root@client-50 \~\]# rm test/a.txt
rm：是否删除普通文件 \"test/a.txt\"？y
rm: 无法删除\"test/a.txt\": 权限不够
\[root@client-50 \~\]# vim test/a.txt #vim可修改
\[root@client-50 \~\]# cat test/a.txt
asdfasdfa
\[root@client-50 \~\]# mv test/a.txt test/1.txt
mv: 无法将\"test/a.txt\" 移动至\"test/1.txt\": 权限不够
\[root@client-50 \~\]# touch test/b.txt
touch: 无法创建\"test/b.txt\": 权限不够
\[root@client-50 \~\]# cp test/a.txt b.txt
\[root@client-50 \~\]# ls test
a.txt
\[root@client-50 \~\]# lsattr test
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-- test/a.txt
# 2：用户切换与提权
### su用户切换时带"-" 与不带"-"
\[root@client-50 \~\]# id tom
uid=1001(tom) gid=1001(tom) 组=1001(tom)
\[root@client-50 \~\]# passwd -S tom
tom PS 2019-03-06 0 99999 7 -1 (密码已设置，使用 SHA512 算法。)
\[root@client-50 \~\]# echo \$PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
\[root@client-50 \~\]# echo \$PWD
/root
\[root@client-50 \~\]# whoami
root
\[root@client-50 \~\]# su tom #不带" - "切换
\[tom@client-50 root\]\$ echo \$PATH #查看系统环境,还是root环境中
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
\[tom@client-50 root\]\$ echo \$PWD
/root
\[tom@client-50 root\]\$ whoami
tom
\[tom@client-50 root\]\$ su - tom
密码：
\[tom@client-50 root\]\$ exit
exit
\[root@client-50 \~\]# su - tom
上一次登录：三 3月 6 10:34:55 CST 2019pts/0 上
\[tom@client-50 \~\]\$ echo \$PATH
/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/tom/.local/bin:/home/tom/bin
\[tom@client-50 \~\]\$ echo \$PWD
/home/tom
\[tom@client-50 \~\]\$ whoami
tom
\[tom@client-50 \~\]\$ su - #不输入用户名则切换root用户
密码：
上一次登录：三 3月 6 09:47:35 CST 2019tty1 上
\[root@client-50 \~\]# exit
### su - -c "命令" 用户
-c 变更为帐号为 root用户的使用者并执行指令（command）后再变回原来使用者
\[tom@client-50 \~\]\$ su - -c \"touch /root/tom.txt\" root
密码：
\[tom@client-50 \~\]\$
\[tom@client-50 \~\]\$ ls /root
ls: 无法打开目录/root: 权限不够
\[tom@client-50 \~\]\$ exit
登出
\[root@client-50 \~\]# ls
tom.txt
**/var/log/secure 记录用户执行过su验证的操作日志**
### sudo 用户提权
sudo是linux下常用的允许普通用户使用超级用户权限的工具，允许系统管理员让普通用户执行一些或者全部的root命令，如halt，reboot，su等等。这样不仅减少了root用户的登陆和管理时间，同样也提高了安全性。Sudo不是对shell的一个代替，它是面向每个命令的。
**它的特性主要有这样几点**：
1、sudo能够限制用户只在某台主机上运行某些命令。
2、sudo提供了丰富的日志，详细地记录了每个用户干了什么。它能够将日志传到中心主机或者日志服务器。
3、sudo使用时间戳文件\--日志
来执行类似的"检票"系统。当用户调用sudo并且输入它的密码时，用户获得了一张存活期为5分钟的票（这个值可以在编译的时候改变）。
4、sudo的配置文件是/etc/sudoers，属性必须为0440，它允许系统管理员集中的管理用户的使用权限和使用的主机。
**编辑配置文件命令:visudo**
注意：编辑sudo的配置文件/etc/sudoers是一般不要直接使用vi（vi
/etc/sudoers）去编辑，因为sudoers配置有一定的语法，直接用vi编辑保存系统不会检查语法，如有错也保存了可能导致无法使用sudo工具，最好使用visudo命令去配置。虽然visudo也是调用vi去编辑，但是保存时会进行语法检查，有错会有提示。
visudo命令去配置 保存是直接 wq
vim 编辑工具去配置 保存加"!" wq!
给用户提权操作
编辑/etc/sudoers 文件.添加权限
提权格式:
**sudo命令用法**
sudo -l #查看自己的sudo授权
sudo 特权命令
sudo -u \*用户名 "命令" #以\*用户的权限执行命令
参数说明：
-V 显示版本编号
-h 会显示版本编号及指令的使用方式说明
-l 显示出自己（执行 sudo 的使用者）的权限
-v 因为 sudo 在第一次执行时或是在 N 分钟内没有执行（N
预设为五）会问密码，这个 参数是重新做一次确认，如果超过 N
分钟，也会问密码
-k 将会强迫使用者在下一次执行 sudo 时问密码（不论有没有超过 N 分钟）
-b 将要执行的指令放在背景执行
-p prompt 可以更改问密码的提示语，其中 %u 会代换为使用者的帐号名称， %h
会显 示主机名称
-u username/#uid 不加此参数，代表要以 root
的身份执行指令，而加了此参数，可以 以 username 的身份执行指令（#uid 为该
username 的使用者号码）
-s 执行环境变数中的 SHELL 所指定的 shell ，或是 /etc/passwd 里所指定的
shell
-H 将环境变数中的 HOME （家目录）指定为要变更身份的使用者家目录（如不加
-u 参 数就是系统管理者 root ）
command 要以系统管理者身份（或以 -u 更改为其他人）执行的指令
\[root@client-50 \~\]# vim /etc/sudoers
91 \## Allow root to run any commands anywhere
92 root ALL=(ALL) ALL
98 \## Allows people in group wheel to run all commands
99 #%wheel ALL=(ALL) ALL #wheel组权限,过于危险,一般注释掉
101 \## Same thing without a password
102 \# %wheel ALL=(ALL) NOPASSWD: ALL \#
**解释:**
root ALL=(ALL:ALL) ALL
zdd ALL=(ALL) ALL
zdd:表示 zdd 用户。
第一个字段zdd指定的是用户：可以是用户名，也可以是别名。每个用户设置一行，多个用户设置多行，也可以将多个用户设置成一个别名后再进行设置。
ALL:表示从任何的主机上都可以执行，也可以这样 192.168.100.0/24。
第二个字段ALL指定的是用户所在的主机：可以是ip,也可以是主机名，表示这个sudo设置后的文件即/etc/sudoers只在这个主机上生效，ALL表示在所有主机上都生效！限制的一般都是本机，也就是限制使用这个文件的主机;如果指定为\"192.168.1.88=\"表示这个文件只有在这台主机上生效，如果拷贝到别的机子上是不起作用的！一般都指定为\"ALL\"表示所有的主机，不管文件拷到那里都可以用。
(ALL):是以谁的身份来执行，ALL就代表 root 可以任何人的身份来执行命令。
第三个字段（ALL）括号里指定的也是用户：指定以什么用户身份执行sudo，即使用sudo后可以享有所有账号下的权限。如果要排除个别用户，可以在括号内设置，比如ALL=(ALL,!root,!ops)。也可以设置别名
ALL :表示任何命令。
第四个字段ALL指定的是执行的命令：即使用sudo后可以执行所有的命令。也可以设置别名。NOPASSWD:
ALL表示使用sudo的不需要输入密码。
%wheel 表示wheel组提权权限
NOPASSWD: ALL 执行命令时不验证密码
mike localhost,client-50=/sbin/\* , !/sbin/ifconfig eth0
\*号通配所有 !取反设置
### sudo操作实例
\[root@client-50 \~\]# useradd dachui
\[root@client-50 \~\]# useradd tiechui
\[root@client-50 \~\]# useradd niuben
\[root@client-50 \~\]# echo 123456 \| passwd \--stdin dachui
更改用户 dachui 的密码 。
passwd：所有的身份验证令牌已经成功更新。