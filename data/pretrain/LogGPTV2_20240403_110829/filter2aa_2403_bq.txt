指令清单 17.22  Optimizing Keil 6/2013 (Thumb mode) 
PUSH    {R3-R7,LR} 
MOVS    R4, R2 
MOVS    R5, R3 
MOVS    R6, R0 
MOVS    R7, R1 
BL      __aeabi_cdrcmple 
BCS     loc_1C0 
MOVS    R0, R6 
MOVS    R1, R7 
POP     {R3-R7,PC} 
loc_1C0 
MOVS    R0, R4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
219 
MOVS    R1, R5 
POP     {R3-R7,PC} 
因为运行 Thumb 指令的硬件平台未必会有 FPU 硬件，所以 Keil 不会生成 FPU 的硬指令。因此在比较
浮点数时，Keil 没有直接使用 FPU 的比较指令，而是使用了额外的库函数__aeabi_cdrcmple 进行仿真处理。 
需要注意的是，本程序调用的仿真函数会在比较数值后保留 CPU 标志位，所以后面可以直接执行 BCS
（B-Carry Set，大于或等于的情况下触发 B 跳转）之类的条件执行指令。 
17.7.3 ARM64 
Optimizing GCC (Linaro) 4.9 
d_max: 
; D0 - a, D1 - b 
          fcmpe    d0, d1 
          fcsel     d0, d0, d1, gt 
; now result in D0 
          ret 
ARM64 处理器的 FPU 指令集，能够不通过 FPSCR 直接设置 APSR。至少，在逻辑上 FPU 不再独立于
主处理器。此处的 FCMPE 指令负责比较 D0 和 D1 寄存器中的值（即函数的第一、第二参数），并根据比
较结果设置相应的 APSR 标识位（N、Z、C、V）。 
FCSEL（Floating Conditional Select）首先判断条件 GT（Greater Than）是否成立，然后会选择性地复
制 D0 或 D1 的值到 D0 寄存器。需要强调的是，在进行条件判断的时候，这个指令依据 APSR 寄存器里的
标识、而非 FPSCR 里的标识进行判断。相比早期的 CPU 而言，ARM64 平台的这种“可直接访问 APSR”
的特性算得上是一种进步。 
如果条件表达式（GT）为真，那么 D0 将复制 D0 的值（即不发生值变化）。如果该条件表达式不成立，
则 D0 将复制 D1 寄存器的值。 
Non-optimizing GCC (Linaro) 4.9 
d_max: 
; save input arguments in "Register Save Area" 
  sub      sp, sp, #16 
  str      d0, [sp,8] 
  str      d1, [sp] 
; reload values 
  ldr      x1, [sp,8] 
  ldr      x0, [sp] 
  fmov     d0, x1 
  fmov     d1, x0 
; D0 - a, D1 - b 
  fcmpe    d0, d1 
  ble      .L76 
; a>b; load D0 (a) into X0 
  ldr      x0, [sp,8] 
  b        .L74  
.L76: 
; ab 的情况下，变量 a 的值将传递到 X0 寄存器；否则，变量 b 的值将传递给 X0 寄存器。最终，
X0 的值传递给 D0 寄存器，成为函数的返回值。 
练习题 
请在不使用新指令（包括 FCSEL 指令）的前提下，优化本例的程序。 
Optimizing GCC (Linaro) 4.9—float 
在把参数的数据类型从 double 替换为 float 之后，再进行编译： 
float f_max (float a, float b) 
{ 
  if (a>b) 
return a; 
  return b;  
}; 
f_max: 
; S0 - a, S1 - b 
  fcmpe   s0, s1 
  fcsel   s0, s0, s1, gt 
; now result in S0 
  ret 
程序使用了 S-字头的寄存器，而不再使用 D-字头寄存器。这是因为 S-字头寄存器的 32 位（即 64 位 D
字头寄存器的低 32 位）已经满足单精度浮点的存储需要了。 
17.7.4 MIPS 
即使是当今最受欢迎的 MIPS 处理器，其协作处理器也只能设置一个条件标识位。供 CPU 访问。早期
的 MIPS 处理器只有一个标识条件位（即 FCC0），现已逐步扩展到了 8 个（即 FCC7～FCC0）。这些条件标
识位位于浮点条件码寄存器（FCCR）。 
指令清单 17.23  Optimizing GCC 4.4.5 (IDA) 
d_max: 
; set FPU condition bit if $f14=a) 
; set return value to "b": 
mov.d    
$f0, $f14 
locret_14: 
jr       
$ra 
or       
$at, $zero ; branch delay slot, NOP 
“C.LT.D”是比较两个数值的指令。在它的名称中，“LT”表示条件为“Less Than”，“D”表示其数据
类型为 double。它将根据比较的结果设置、或清除 FCC0 条件位。 
“BC1T”检测 FCC0 位，如果该标识位被置位（值为 1）则进行跳转。“T”是 True 的缩写，表示
该指令的运行条件是“标识位被置位（True）”。实际上确实存在对应的 BC1F 指令，在判定条件为 False
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
221 
的时候进行跳转。 
无论上述条件转移指令是否发生跳转，它都决定了$F0 的最终取值。 
17.8 栈、计算器及逆波兰表示法 
现在，我们可以理解部分旧式计算器采取逆波兰表示法
①的道理了。例如，在计算“12+34”时，这种
计算器要依次按下“12”、“34”和加号。这种计算器采用了堆栈机器（stack machine）的构造。逆波兰记
法不需要括号来标识操作符的优先级。所以，在计算复杂表达式时，这种构造计算器的操作十分简单。 
17.9 x64 
有关 x86-64 系统处理浮点数的方法，请参见本书第 27 章。 
17.10 练习题 
17.10.1 题目 1 
请去除 17.7.1 节所示例子中的 FXCH 指令，进行改写并进行测试。 
17.10.2 题目 2 
请描述下述代码的功能。 
指令清单 17.24  Optimizing MSVC 2010 
__real@4014000000000000 DQ 04014000000000000r   ; 5 
_a1$ = 8 
;size=8 
_a2$ = 16  
;size=8 
_a3$ = 24  
;size=8 
_a4$ = 32  
;size=8 
_a5$ = 40  
;size=8 
_f       PROC 
  fld  
QWORD PTR _a1$[esp-4] 
  fadd     QWORD PTR _a2$[esp-4] 
  fadd     QWORD PTR _a3$[esp-4] 
  fadd     QWORD PTR _a4$[esp-4] 
  fadd     QWORD PTR _a5$[esp-4] 
  fdiv     QWORD PTR __real@4014000000000000 
  ret  
0  
_f  
  ENDP 
指令清单 17.25  Non-optimizing Keil 6/2013 (Thumb mode/compiled for Cortex-R4F CPU) 
f PROC 
  VADD.F64 d0,d0,d1 
  VMOV.F64 d1,#5.00000000 
  VADD.F64 d0,d0,d2 
  VADD.F64 d0,d0,d3 
  VADD.F64 d2,d0,d4 
  VDIV.F64 d0,d2,d1 
① Reverse Polish notation，请参见 https://en.wikipedia.org/wiki/Reverse_Polish_notation。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
222 
逆向工程权威指南（上册） 
  BX        lr  
  ENDP 
指令清单 17.26  Optimizing GCC 4.9 (ARM64) 
f: 
  fadd    d0, d0, d1 
  fmov    d1, 5.0e+0 
  fadd    d2, d0, d2 
  fadd    d3, d2, d3 
  fadd    d0, d3, d4 
  fdiv    d0, d0, d1 
  ret 
指令清单 17.27  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
arg_10           =  0x10 
arg_14           =  0x14 
arg_18           =  0x18 
arg_1C           =  0x1C 
arg_20           =  0x20 
arg_24           =  0x24 
                  lwc1  $f0, arg_14($sp) 
                  add.d  $f2, $f12, $f14 
                  lwc1   $f1, arg_10($sp) 
                  lui    $v0, ($LC0 >> 16) 
                  add.d $f0, $f2, $f0 
                  lwc1  $f2, arg_1C($sp) 
                  or    $at, $zero 
                  lwc1 
$f3, arg_18($sp) 
                  or      $at, $zero 
                  add.d  $f0, $f2 
                  lwc1   $f2, arg_24($sp) 
                  or     $at, $zero 
                  lwc1  $f3, arg_20($sp) 
                  or     $at, $zero 
                  add.d  $f0, $f2 
                  lwc1   $f2, dword_6C 
                  or     $at, $zero 
                  lwc1   $f3, $LC0 
                  jr     $ra 
                  div.d  $f0, $f2 
$LC0:            .word 0x40140000 # DATA XREF: f+C 
# f+44 
dword_6C:     .word 0            # DATA XREF: f+3C 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1188 章
章    数
数        组
组  
在内存中，数组就是按次序排列的、相同数据类型的一组数据。 
18.1 简介 
#include  
int main()  
{ 
    int a[20]; 
    int i; 
    for (i=0; i<20; i++) 
        a[i]=i*2; 
    for (i=0; i<20; i++) 
        printf ("a[%d]=%d\n", i, a[i]); 
    return 0;  
}; 
18.1.1 x86 
MSVC 
使用 MSVC 2008 编译上述程序可得如下所示的指令。 
指令清单 18.1  MSVC 2008 
_TEXT     SEGMENT 
_i$ = -84  
; size = 4 
_a$ = -80               ; size = 80 
_main     
PROC 
    push    ebp 
    mov     ebp, esp 
    sub     esp, 84    ; 00000054H 
    mov 
DWORD PTR _i$[ebp], 0 
    jmp 
SHORT $LN6@main 
$LN5@main: 
    mov 
eax, DWORD PTR _i$[ebp] 
    add 
eax,  1 
    mov 
DWORD PTR _i$[ebp], eax 
$LN6@main: 
    cmp  
DWORD PTR _i$[ebp], 20; 00000014H 
    jge 
SHORT $LN4@main 
    mov 
ecx, DWORD PTR _i$[ebp] 
    shl  
ecx, 1 
    mov     edx, DWORD PTR _i$[ebp] 
    mov 
DWORD PTR _a$[ebp+edx*4], ecx 
    jmp 
SHORT $LN5@main 
$LN4@main: 
    mov  
DWORD PTR _i$[ebp], 0 
    jmp 
SHORT $LN3@main 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
224 
逆向工程权威指南（上册） 
$LN2@main: 
    mov   
eax, DWORD PTR _i$[ebp] 
    add     eax, 1 
    mov 
DWORD PTR _i$[ebp], eax 
$LN3@main: 
    cmp     DWORD PTR _i$[ebp], 20    ; 00000014H 
    jge     SHORT $LN1@main 
    mov     ecx, DWORD PTR _i$[ebp] 
    mov     edx, DWORD PTR _a$[ebp+ecx*4] 
    push    edx 
    mov     eax, DWORD PTR _i$[ebp] 
    push   eax 
    push    OFFSET $SG2463 
    call    _printf 
    add     esp, 12        ; 0000000cH 
    jmp  
SHORT $LN2@main 
$LN1@main: 
    xor     eax, eax 
    mov     esp, ebp 
    pop     ebp 
    ret     0 
_main    
ENDP 
这里除去两个循环之外没有非常特别之处。第一个循环填充数据，第二个循环打印数据。“shl ecx, 1”
指令所做的运算是 ecx=ecx*2，更详细的介绍请参见 16.2.1 节。 
程序为数组申请了 80 字节的栈空间，以存储 20 个 4 字节元素。 
现在使用 OllyDbg 打开这个执行程序。 
如图 18.1 所示，数组中的每个元素都是 32 位的 int 型数据，数组每个元素的值都是其索引值的 2 倍。 
图 18.1  OllyDbg：填充数组 
因为全部数组都存储于栈中，所以我们可以在内存数据窗口里看到整个数组。 
GCC 
若使用 GCC 4.4.1 编译上述程序，可得到如下所示的指令。 