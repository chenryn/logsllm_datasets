             25 LOAD_CONST          5 (5)
             28            
             29 STORE_GLOBAL        2 (2)
             32 STORE_GLOBAL        1 (1)
             35            
             36 STORE_GLOBAL        3 (3)
             39            
             40 LOAD_CONST          6 (6)
             43 PRINT_EXPR     
             44            
             45 LOAD_CONST          5 (5)
             48            
             49 STORE_GLOBAL        2 (2)
             52 LOAD_CONST          6 (6)
             55 PRINT_EXPR     
             56            
             57 LOAD_CONST          7 (7)
             60            
             61 STORE_FAST          4 (4)
             64                0
             67 DELETE_ATTR         1 (1)
             70 STORE_GLOBAL        4 (4)
             73 CALL_FUNCTION       1
             76 STORE_FAST          5 (5)
             79 STORE_GLOBAL        5 (5)
             82 DELETE_ATTR         2 (2)
             85 STORE_GLOBAL        0 (0)
             88 CALL_FUNCTION       1
             91 RETURN_VALUE 
继续，发现肛不动了。。。。然后从底下开始肛
             64                0
             67 DELETE_ATTR         1 (1)
             70 STORE_GLOBAL        4 (4)
             73 CALL_FUNCTION       1
             76 STORE_FAST          5 (5)
             79 STORE_GLOBAL        5 (5)
             82 DELETE_ATTR         2 (2)
             85 STORE_GLOBAL        0 (0)
             88 CALL_FUNCTION       1
             91 RETURN_VALUE
根据之前得到的结论，可以猜测这里的代码是:
        xxx = rotor.newrotor(secret)
        return xxx.decrypt(data)
所以猜测上面的操作数，0指的是局部变量`data`，1指的是全局变量`newrotor`, 2猜测可能是全局变量`decrypt`,
4指的是局部变量`secret`, 5指的是局部变量`rot`，的0可能指的是全局变量`rotor`
然后查找bytecode，改成:
             64 LOAD_GLOBAL         0
             67 LOAD_ATTR           1 (1)
             70 LOAD_FAST           4 (4)
             73 CALL_FUNCTION       1
             76 STORE_FAST          5 (5)
             79 LOAD_FAST           5 (5)
             82 LOAD_ATTR           2 (2)
             85 LOAD_FAST           0 (0)
             88 CALL_FUNCTION       1
             91 RETURN_VALUE
发现，合情合理，使人姓胡.....
然后和上面一样，整体替换bytecode:
    >>> dis.disassemble_string(dec.co_code.replace("\x99","\x64").replace("\x68","\x7d").replace("\x61","\x7c").replace("\x60","\x6a").replace("\x9b","\x74"))
              0 LOAD_CONST          1 (1)
              3 STORE_FAST          1 (1)
              6 LOAD_CONST          2 (2)
              9 STORE_FAST          2 (2)
             12 LOAD_CONST          3 (3)
             15 STORE_FAST          3 (3)
             18 LOAD_FAST           1 (1)
             21 LOAD_CONST          4 (4)
             24 PRINT_EXPR     
             25 LOAD_CONST          5 (5)
             28            
             29 LOAD_FAST           2 (2)
             32 LOAD_FAST           1 (1)
             35            
             36 LOAD_FAST           3 (3)
             39            
             40 LOAD_CONST          6 (6)
             43 PRINT_EXPR     
             44            
             45 LOAD_CONST          5 (5)
             48            
             49 LOAD_FAST           2 (2)
             52 LOAD_CONST          6 (6)
             55 PRINT_EXPR     
             56            
             57 LOAD_CONST          7 (7)
             60            
             61 STORE_FAST          4 (4)
             64 LOAD_GLOBAL         0 (0)
             67 LOAD_ATTR           1 (1)
             70 LOAD_FAST           4 (4)
             73 CALL_FUNCTION       1
             76 STORE_FAST          5 (5)
             79 LOAD_FAST           5 (5)
             82 LOAD_ATTR           2 (2)
             85 LOAD_FAST           0 (0)
             88 CALL_FUNCTION       1
             91 RETURN_VALUE
             18 LOAD_FAST           1 (1)
             21 LOAD_CONST          4 (4)
             24 PRINT_EXPR     
             25 LOAD_CONST          5 (5)
             28            
             29 LOAD_FAST           2 (2)
             32 LOAD_FAST           1 (1)
             35            
             36 LOAD_FAST           3 (3)
             39            
             40 LOAD_CONST          6 (6)
             43 PRINT_EXPR     
             44            
             45 LOAD_CONST          5 (5)
             48            
             49 LOAD_FAST           2 (2)
             52 LOAD_CONST          6 (6)
             55 PRINT_EXPR     
             56            
             57 LOAD_CONST          7 (7)
             60            
             61 STORE_FAST          4 (4)
猜测这部分就是局部变量`secret`计算的方法，最后一句`STORE_FAST 4`，猜测就是把上面计算后的值储存到`secret`中
整体看看，发现主要就剩``和`PRINT_EXPR`不通顺了。。。然后他们都是没操作数的，所以排除了调用函数，调用属性之类的
之后联想到最开头对`key_a, key_b, key_c`的赋值，然后目前的bytecode中没有任何运算操作
再来看这部分
             18 LOAD_FAST           1 ("!@#$%^&*")
             21 LOAD_CONST          4 (4)
             24 PRINT_EXPR
所以猜测`PRINT_EXPR`, 是字符串和整型之间的操作运算
             29 LOAD_FAST           2 ("abcdefgh")
             32 LOAD_FAST           1 ("!@#$%^&*")
             35 
这里猜测``是字符串和字符串之间的操作运算
到这里，我们来想想，整型和字符串之间的操作有啥？
    >>> "a"*3
    >>> "aaa"[1]
    >>> "aaa"[:1]
    >>> "aaa"[1:]
字符串和字符串之间呢？
    >>> "aaa" + "bbb"                 # 我只想到了这一个
从上面可以猜测出，``可能是字符串拼接的操作，然后`PRINT_EXPR`需要一个一个去试，现在我们可以还原出`decrypt`函数了:
    # import rotor
    def decrypt(data):
        key_a = "!@#$%^&*"
        key_b = "abcdefgh"
        key_c = '<>{}:"'
        secret=key_a*4 + "|" + (key_b+key_a+key_c)*2 + "|" + key_b*2 + "EOF"
        # secret=key_a[4] + "|" + (key_b+key_a+key_c)[2] + "|" + key_b[2] + "EOF"
        # secret=key_a[4:] + "|" + (key_b+key_a+key_c)[2:] + "|" + key_b[2:] + "EOF"
        # secret=key_a[:4] + "|" + (key_b+key_a+key_c)[:2] + "|" + key_b[:2] + "EOF"
        rot = rotor.newrotor(secret)
        return rot.decrypt(data)
简直难受.......
* * *