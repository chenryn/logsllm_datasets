### Flicker-based Secure Execution Mode

In a Flicker-based secure execution mode, the program leverages Intel TXT [15] to ensure secure execution. The attestation process is performed after the UTP Flicker session has completed.

#### Common Usage Scenario

In a typical scenario, the user opens the website of an online web shop in Firefox and selects items to purchase. When the user is ready to submit the order, they press the "Submit" button on the final summary page. The browser extension detects this action (by recognizing the button's unique ID) and connects to the web server to request a nonce and a confirmation message. Upon receiving the requested data, the extension invokes the client utility program, which switches the graphics card to text mode and formats the received data for a Flicker session. This approach simplifies the work required within the Flicker-protected environment by leveraging untrusted code to invoke text mode. The Flicker framework then executes with TXT-based hardware protections, using the UTP module as its PAL (Platform Abstraction Layer). Figure 5 illustrates the additional modules we have implemented.

#### Code Size and TCB

Table I provides the lines of code (LoC) for the implemented modules on the client side, as well as the code size of the existing Flicker framework, which is part of the TCB (Trusted Computing Base) of our UTP agent. The overall TCB, including drivers for user I/O, is only a few thousand LoC.

| Module | Language | LoC |
| --- | --- | --- |
| Client utility program | C | 321 |
| JavaScript | 95 |
| C | 540 |
| Firefox extension | JavaScript | 956 |
| AIK generation program | C | 254 |
| Keyboard & display drivers | C | 260 |
| Flicker PAL | C/Assembly | 741 |
| Flicker TCB | - | 1080 |
| UTP helper functions | C | 2335 |
| **Total** | - | **2335** |

*Note: The given LoC include the PS/2 and VGA drivers. Support for USB keyboards would increase the code size by 1500-2000 LoC.*

### Confirmation Agent (Client-Side)

When invoked, the UTP module displays the confirmation message and prompts the user to enter a randomly chosen character sequence to avoid habituation. Figure 4 shows a sample confirmation dialog. If the correct sequence is entered, PCR 19 is extended with the nonce and the confirmation string provided by the server. If an incorrect sequence is entered or if the user chooses not to confirm the transaction, a failure message is extended into PCR 19. Finally, a special value indicating the end of the secure session is extended into PCRs 18 and 19. Although a well-behaved OS will prevent application software from accessing the TPM at localities 2 and 3, a malicious OS can still access these addresses. On Intel hardware, PCR 17 can only be extended by Intel’s SINIT Authenticated Code Module (we use Q35 SINIT 17.BIN for our prototype).

After the UTP module returns, the utility program requests a TPM Quote that includes PCRs 17 and 18 (containing measurements of Flicker and the UTP code), and PCR 19, which contains the hashed nonce and confirmation text string. The nonce is also used by the TPM for signature generation during the attestation operation.

### Confirmation Verification (Server-Side)

The verification script receives the data and verifies it according to the following criteria:
- The signature is valid and from a registered TPM (i.e., one that has been registered during the enrollment phase). We currently authenticate the client device based on a simple whitelist of allowed devices, realized as a list of known public AIKs. More sophisticated authentication methods are applicable (e.g., [23], [24], [25]).
- The PCR values for Flicker and the UTP code in PCRs 17 and 18 are correct, i.e., they match the known-good list.
- The PCR value of the nonce and confirmation text string in PCR 19 is correct, i.e., it matches the values sent by the verifier for this transaction confirmation.

If all checks are successful, the transaction is accepted by the web server, and the user sees a corresponding message in the web browser.

### Detailed PCR Contents

- **PCR 17**: Represents the SINIT module for SinitMleData.Version 6 [10]:
  - `Extend(SHA1(SinitMleData.SinitHash | Extend(SHA1(SinitMleData.BiosAcm.ID | SinitMleData.EdxSenterFlags)) | SinitMleData.MsegValid | SinitMleData.StmHash | SinitMleData.PolicyControl | SinitMleData.LcpPolicyHash | (OsSinitData.Capabilities,0)))`
- **PCR 18**: Hash of the Flicker-based PAL written for UTP:
  - `Extend(SinitMleData.MleHash)`
- **PCR 19**: Input and output parameters of the UTP Flicker session, where `1` means confirmed and `0` means not confirmed:
  - `Extend(1|0); Extend(nonce); Extend(SHA1(ConfMsg))`

### Deployment

Our UTP confirmation agent is designed to be generic and not service provider-specific. Service providers can adapt the content or look and feel of the messages without redesigning the UTP agent. The end user does not need to understand the secure mode code, nor is there a need for per-system or per-TPM generation of expected hashes. To use the UTP agent, the user only needs to download the agent code and the browser extension and install it on an OS that supports the Flicker framework (currently Linux). The same agent code and browser extension can be reused across many platforms, with minor variants (e.g., Windows vs. Linux, Intel vs. AMD).

To support a wide range of hardware for user input, our prototype includes drivers for VGA display and PS/2 keyboards, and optionally USB keyboards. These can be used as a fallback in case more sophisticated drivers are not available. Our current prototype assumes the OS is the lowest layer of system software, but Flicker and UTP can coexist with virtualization software. A hypervisor such as Xen [36] could be modified to enable Flicker and thus our UTP agent.

### Performance Evaluation

We implemented and tested our prototype on a Dell Optiplex 755 with a 3.0 GHz Intel Core2 Duo E6850 and ST Microelectronics v1.2 TPM, running Ubuntu 9.04 (i386) and Linux kernel 2.6.30-6. Figure 6 shows the timeline of a typical transaction confirmation. While the system waits for user confirmation in secure mode, the rest of the OS is halted, and the user's current work is suspended. However, all steps before entering and after resuming secure mode happen in the background and are transparent to the user. There is a delay of approximately one second before the confirmation summary is displayed, which includes the time to switch the graphics card to text mode, enter secure mode, and initialize the video device in the Flicker PAL. This short delay is common across websites when waiting for a transaction summary.

### Security Analysis

The security of our approach relies on three main properties:
1. The server accepts only transactions that are properly confirmed.
2. The UTP agent is executed in an isolated mode, protected against software-based tampering, and controls user-centric I/O devices (keyboard, screen, mouse).
3. The remote server can verify whether the confirmation agent was executed in secure mode and that the user confirmed the transaction via the keyboard.

#### Transactions Must Be Confirmed

The essence of our approach is that a specially designed confirmation agent is executed in an isolated environment on the client system, enabling the user to confirm a proposed transaction. Given the strength of our adversary (superuser privileges on the legacy OS), the usability of the confirmation procedure is crucial. We also discuss the ability of attackers to attach malicious input devices or compromise other peripherals. Heuristics such as refusing to verify a transaction on a system with multiple USB keyboards may offer some protection, but fundamentally, this is a significant challenge. Solutions requiring the user to transcribe a few digits from the display raise the bar for attackers, as they would need a malicious video interface card, a more complex task than compromising a USB keyboard.

In our implementation, the server sends the confirmation message to be displayed by the UTP confirmation agent. The agent displays the message and requests the user to enter a few random characters as confirmation. The adversary (e.g., malware on the user’s computer) may modify or construct a new transaction request and send it to the server. Though the details of the malicious transaction are displayed, the user might overlook them. Studies show that users do not always check the confirmation message carefully enough [38]. Therefore, the specific details of the displayed message and the actions required for confirmation are critical.

#### Isolated Execution

Our confirmation agent executes with hardware-enforced isolation, leveraging Intel TXT and the Flicker architecture to protect itself from other code and devices on the system. The adversary has two options for tampering:
1. Manipulate or replace the confirmation agent code when it is going to be executed.
2. Execute an entirely different application that fakes the confirmation agent display on screen, fooling the user.

In the first case, the malicious agent will execute, and the user may be tricked into confirming a different transaction. However, activation of the secure mode will hash the agent’s code into PCR 18, which will be detected by the web server, invalidating the transaction.

In the second case, the confirmation agent and isolated execution mode are not invoked. Instead, an application in the untrusted mode simulates the confirmation dialog. The user cannot detect a faked dialog, but even if the user confirms it, the malicious code cannot reset PCR 18 and extend it with the expected hash. The web server will detect this.

#### Remote Attestation

Given the adversary's superuser privileges, they may invoke an isolated execution environment with their own code and inputs or fake the entire process from the user's perspective. Our defense relies on the contents of the PCRs in the client system’s TPM. Specifically, PCRs 17–19 contain hashes of the chipset-specific signed code, the confirmation agent code, and the nonce, confirmation string, and user response.

- **PCR 17** can only be extended by the CPU or Intel-signed SINIT Authenticated Code Module, allowing the remote server to verify the code invoked in the isolated environment.
- **PCR 18** is extended as part of the dynamic root of trust operation, containing the hash of the UTP confirmation agent code. The web server can verify this to detect unintended code execution.
- **PCR 19** contains the hashed nonce and confirmation text string, ensuring the integrity of the transaction.

This setup enables the web server to detect and deny transactions originating from hardware with known vulnerabilities and to verify that the isolated environment was correctly invoked.