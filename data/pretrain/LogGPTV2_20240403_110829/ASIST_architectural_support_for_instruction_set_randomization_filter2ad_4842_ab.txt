we would like to easily extend an ISR system to provide de-
fenses against ROP attacks.
5. Evasion attacks by guessing the encryption key. Many of
the proposed ISR implementations are vulnerable to evasion
attacks that try to guess the encryption key and inject valid
code into the vulnerable system [48, 53]. Sovarel et al. [48]
demonstrate the feasibility of an incremental attack that uses
partial key guessing to reduce the number of tries needed to
ﬁnd the key. Also, attackers may be able to steal or infer the
encryption key when memory secrecy breaks [53].
To put our work into context, we compare ASIST with other
ISR implementations in Table 1. ASIST is the only ISR imple-
mentation with hardware support, resulting in negligible runtime
overhead for any type of applications. ASIST also supports a new
dynamic code encryption approach that allows the transparent en-
cryption of any application with shared libraries. To defend against
attempts to guess or steal the encryption key, ASIST (i) stores the
encryption key in a hardware register accessible only by the kernel
through privileged instructions, and avoids storing the key in pro-
cess’s memory, (ii) generates a new random key at each execution
of the same program when dynamic encryption is used, (iii) sup-
ports large key sizes up to 128-bit, and (iv) besides XOR and trans-
position (already implemented), it supports more secure encryption
algorithms in case of memory disclosure. Moreover, ASIST pre-
vents the execution of injected code at the kernel by using separate
keys for user-level programs and kernel’s code. Finally, ASIST is
able to prevent ROP attacks using return address encryption.
Disk
Disk
Disk
Encrypted 
Unmodified 
Unmodified 
Application Binary A
Application Binary B
Application Binary C
execve()
load_elf_binary()
asist_modeA=static
keyA=read_key()
execve()
load_elf_binary()
execve()
load_elf_binary()
asist_modeB=dynamic
keyB=random_key()
asist_modeC=dynamic
keyC=random_key()
Scheduler
process A keyA process B keyB process C keyC
Process Table
context switch
sta [%key] %asi, %addr
Instruction 
Instruction 
Fetch
Decode
Register 
Access
Execute
Memory
Exception Write-back
key
ASI
data
CPU
D-cache
Supervisor
ASI registers
D
Q
usrkey 
register
EN
Q
D
oskey 
register
EN
MMU
I-cache
Unencrypted 
instructions
key
Decrypt
Encrypted 
instructions
I/O Bus
Disk
DDR 
Controler
Main 
Memory
Encrypted 
Binary A
Encrypted 
Binary B
Encrypted 
Binary C
text page fault
Page fault handler:
__do_fault()
if (text_fault && asist_modeB==dynamic) { 
new_page=alloc_page_vma(...); //anonymous page
copy_encrypted(new_page, f_page, keyB, ...);
//copy, encrypt, and map new anonymous page
}
Figure 1: ASIST architecture. The operating system reads the
key from the ELF binary (static encryption) or randomly gen-
erates a new key (dynamic encryption), saves the key in the
process table, and stores the key of the running process in the
usrkey register. The processor decrypts each instruction with
usrkey or oskey register, according to the supervisor bit.
3. ASIST ARCHITECTURE
Our architecture spans hardware, operating system and user space
(see Figure 1), to support hardware-assisted ISR. ASIST supports
two alternative ways of code encryption: static and dynamic. In
static encryption, the key is pre-deﬁned and exists within the exe-
cutable ﬁle, while all code sections are already encrypted with this
key. In case of dynamic encryption, the executable ﬁle is unmodi-
ﬁed and the key is decided randomly by the respective loader of the
operating system at the beginning of each execution. The code sec-
tions are encrypted dynamically at runtime whenever a code page
is requested from ﬁle system and before this page gets mapped to
the process’s virtual address space.
The processor has been extended with two new registers: usrkey
and oskey, which store the keys of the running user-level process
and operating system kernel’s code respectively. The operating
system keeps the key of each process in a respective ﬁeld in the
process table, and stores the key of the next process that is sched-
uled for execution in the usrkey register using the sta privileged
SPARC instruction. Moreover, the processor is modiﬁed to decrypt
each instruction before the instruction fetch cycle, using one of the
above two registers as a key, according to the supervisor bit.
ELF file before the encryption
ELF file after the encryption
ELF header
ELF header
Program header table
Program header table
.init
.text
.fini
.rodata
...
.data
.bss
...
Section header table
.note.asist
.init
.text
.fini
.rodata
...
.data
.bss
...
Section header table
.section ".note.asist", "a"
.p2align 2
.long 1f - 0f
.long 3f - 2f
.long 0x2
# name size
# desc size
# type 
# name
0:  .asciz "ASIST"
1:  .p2align 2
2:  .long 0x01234567 # desc (key)
3:  .p2align 2
New section
Encrypted section
Figure 2: The ELF format of a statically encrypted executable
ﬁle. The key is stored in a new note section inside the ELF ﬁle,
and all the code sections are encrypted with this key.
3.1 Encryption
We support two possible options for encrypting an executable
program: static and dynamic encryption. In static encryption, the
program is encrypted before each execution with a pre-deﬁned key.
In dynamic encryption, a key is randomly generated at the binary
loader, and all code pages are encrypted with this key at the page
fault handler before they are mapped to the process’s address space.
The main advantage of static code encryption is that it has no
runtime overhead. However, this approach has several drawbacks.
First, the same key is used for each execution, which makes it sus-
ceptible to brute force attacks trying to guess this key. Second, each
executable ﬁle needs to be encrypted before running. Third, static
encryption does not support shared libraries; all programs must be
statically linked with all necessary libraries. In contrast, dynamic
encryption has a number of advantages: it generates a random key
at each execution so it cannot be easily guessed, it encrypts all ex-
ecutables transparently without the need to run an encryption pro-
gram, and it is able to support shared libraries. The drawback of
dynamic encryption is a potential runtime overhead to encrypt a
code page when it is loaded to memory at a code page fault. In
Section 5 we show that due to the low number of code page faults,
dynamic encryption is very efﬁcient.
3.1.1
Static Binary Encryption
To statically encrypt an ELF executable we extended objcopy
with a new ﬂag (--encrypt-code). The encryption key can
be provided by the user, else it is randomly chosen by the tool.
Figure 2 shows the modiﬁcations of a statically encrypted ELF ex-
ecutable ﬁle. We add a new note section (.note.asist) inside
the encrypted ELF ﬁle that contains the program’s encryption key.
We also changed the ELF binary loader in the Linux kernel to read
the note section from the ELF, get the key, and store it in a new
ﬁeld (key) of the current process. In this mode of operation we set
a new ﬁeld per process (asist_mode) to static. The key is stored
in the process table and is used by the kernel to update the usrkey
hardware register each time this process is scheduled for execution.
Our static encryption tool also ﬁnds and encrypts all the code
sections in ELF. Therefore, all needed libraries must be statically
linked, to be properly encrypted. Moreover, it is important to com-
pletely separate code from data into different sections by the linker.
This is because the encryption of any data, which are not decrypted
by the modiﬁed processor, will probably disrupt the program ex-
ecution. Fortunately, many linkers are conﬁgured this way. Sim-
ilarly, compiler optimizations like jump tables, which are used to
perform faster switch statements with indirect jumps, should be
also moved to a separate, non-code section.
To address the issue of using the same key at all executions,
which may facilitate a key guessing attack, one approach could be
to re-encrypt the binary after a process crash. Another approach
could be to encrypt the original binary at the user-level part of
execve(), by randomly generating a new key and copying the
binary into an encrypted one. However, we do not recommend this
approach due to the extra time needed to copy and encrypt the en-
tire binary at load time, especially for large binaries that are also
statically linked with large libraries. Encrypting the entire binary is
probably an unnecessary overhead, as many parts of the code that
will be encrypted are unlikely to be actually executed.
3.1.2 Dynamic Code Encryption
We now introduce a new technique to dynamically encrypt a pro-
gram’s code before it is loaded into the process’s memory. This
approach is based on the fact that every page with executable code
will be loaded from disk (or buffer cache) to the process’s address
space the ﬁrst time it is accessed by the program through a page
fault. Thus, we decided to perform the code encryption at this
point. This way, ASIST encrypts only the code pages that are actu-
ally used by the program at each execution.
First, the ELF binary loader is modiﬁed to randomly generate
a new key, which is stored into the process table. It also sets the
asist_mode ﬁeld of the current process to dynamic. The code
encryption is performed by the page fault handler at a text page
fault, i.e., on a page containing executable code, if the process that
is responsible for the page fault uses dynamic encryption according
to asist_mode. Then, a new anonymous page is allocated, and
the code page fetched from disk (or buffer cache) is encrypted and
copied on this page using the process’s encryption key. The new
page is ﬁnally mapped to the process’s address space.
We allocate an anonymous page, i.e., a page that is not backed
by a ﬁle, and copy the encrypted code on this page, so that the
changes will not be stored at the original binary ﬁle. Although
processes running the same code could share the respective code
pages in physical memory, we have a separate copy of each page
with executable code for each process, as they have different keys.
This may result in a small memory overhead, but it is necessary in
order to use a different key per process and achieve better isolation.
In practice, the memory allocated for code accounts only for a small
fraction of the total memory. Note that we can still beneﬁt from
buffer cache, as we copy the cached page.
We also modiﬁed the fork() system call to randomly generate
a new key for the child process. When the modiﬁed fork() copies
the parent process’s page table, it omits copying its last layer so that
the child’s code pages will not be mapped with pages encrypted
with the parent’s key. To operate correctly, the dynamic encryption
approach requires a separation of code and data per each page. For
this, we modify the linker to align the ELF headers, data, and code
sections to a new page, by adding the proper padding.
3.1.3
Shared Libraries
Our dynamic code encryption technique supports the use of shared
libraries without extra effort. The code of a shared library is en-
crypted with each process’s key on the respective page fault when
loading a page to process’s address space, as we explained above.
In this way we have a separate copy of each shared library’s page
for each process. This is necessary in order to use a different key
per process, which offers better protection and isolation.
3.1.4
Self-Modifying Code
The design we presented does not support randomized programs
with self-modifying code or runtime code generation, i.e., programs
that modify their code or generate and execute new code. To sup-
port such programs, we added a new system call in Linux ker-
nel: asist_encrypt(char *buf, int size). This sys-
tem call encrypts the code that exists in the memory region starting
from buf with size bytes length, using the current process’s key
that is stored in process table. However, the buf buffer may be
vulnerable to a code injection attack, e.g., due to a buffer overﬂow
vulnerability in the program that may lead to the injection of mali-
cious code into buf. Then, this code will be correctly encrypted us-
ing asist_encrypt() and will be successfully executed. Like
previous work supporting ISR with self-modifying code [9], we be-
lieve that programs should carefully use the asist_encrypt()
system call to avoid malicious code injection in buf.
3.1.5 Encryption Algorithms and Key Size
The simplest, and probably the fastest, encryption algorithm is to
XOR each bit of the code with the respective bit of the key. Since
code is much larger than a typical key, the bits of the key are reused.
To accelerate encryption we XOR code and key as words, instead
of bits. However, XOR was found to be susceptible to key guess-
ing and key extraction attacks [48, 53]. In our prototype we imple-
mented XOR encryption with key size that can range from 32-bit
to 128-bit, to reduce the probability of a successful guess. The key
size should be a multiple of 32-bit to support XOR between 32-bit
words. We also implemented transposition, which is a stronger en-
cryption algorithm than XOR. In transposition we shufﬂe the bits
of a 32-bit word using an 160-bit key. For each bit of the encrypted
word we choose one of the 32 bits of the original word based on the
respective bits of the key. We use the asist_mode ﬂag to deﬁne
the encryption algorithm, key size, and encryption method.
3.1.6 Tolerance to Key Guessing Attacks
To evade ISR protection, an attacker can try to guess the encryp-
tion key and inject code encrypted with this key. The probability of
a successful guess with XOR encryption is 1/2key size, e.g., 1/232
for 32-bit key and 1/2128 for 128-bit key. In case of transposition,
the probability of a successful guess is 1/32!, which is much lower
than the respective probability with XOR. In case of a single guess,
all the above probabilities seem good enough to protect a system.
However, if the same key is used consistently, e.g., in case of static
encryption, a brute force attack can be used to eventually guess the
correct key. Sovarel et al. [48] present an incremental attack that
reduces the number of tries needed to ﬁnd the encryption key by
observing system’s behavior. ASIST can address such attacks with
dynamic encryption, as a new key is generated before each execu-
tion. Barrantes et al. [9] show that code injections in systems pro-
tected with ISR result in the execution of at most ﬁve instructions
before causing an exception. Therefore, with dynamic encryption,
the probability of success of a brute force or incremental attack re-
mains 1/2key size with XOR or 1/32! with transposition.
3.2 Hardware Support
Figure 3 outlines ASIST’s hardware architecture for ISR support
when using XOR with a 32-bit key. We added two new registers
to store the encryption keys: usrkey and oskey. These registers are
memory mapped using a new Address Space Identiﬁer (ASI), and
are accessible only by the operating system through two privileged
SPARC instructions: sta (store word to alternate space) and lda
(load word from alternate space). The operating system sets the
usrkey register using sta with the key of the user-level process that
sta [%key] %asi, %addr
Instruction cache
key
32
ASI
key
32
ASI
Q
D
usrkey 
register
EN
D
Q
oskey 
register
EN
32
32
Supervisor
key
32
32
Encrypted 
instruction
Unencrypted 
instruction
32
32