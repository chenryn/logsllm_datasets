IMIX, CET requires modiﬁcations to the TLB, semantic
changes to the page table, and the introduction of new in-
structions. Contrary to IMIX, CET’s hardware extension
is tailored to isolate the shadow stack of a CFI implemen-
tation [45]. As expected, generalizing CET’s shadow
stack to support arbitrary memory accesses still allows
implementation of an isolated shadow stack [18].
9 Related Work
In the following, we discuss techniques that may be used
to protect memory against unintended access. Table 1
provides an overview of characteristics of these tech-
niques. We explain each of its aspects in detail, and com-
pare them to IMIX.
Software-based Memory Protection. Software-fault
isolation techniques (SFI) [51, 61] allow to create a sep-
arate protected memory region. SFI is implemented by
instrumenting every memory-access instruction such that
the address is masked before the respective instruction is
executed. This ensures that the instrumented instruction
can only access the designated memory segment, how-
ever, this instrumentation also has a signiﬁcant perfor-
mance impact. Though SFI instruments every load/store
92    27th USENIX Security Symposium
USENIX Association
instruction, invalid memory accesses cannot be detected,
but are instead masked to point to unprotected mem-
ory [37]. ISboxing [20] leverages instruction preﬁxes of
x86-64 to implicitly mask load and store operations. The
instruction preﬁx determines whether a memory-access
instruction uses a 32-bit (default case) or 64-bit address.
By ensuring that untrusted code can only use 32-bit ad-
dresses to access memory, protected data can be stored
in memory that can only be addressed with 64-bit ad-
dresses. Yet, this reduces the available address space sig-
niﬁcantly, and allows linked libraries to access protected
memory.
Another way of protecting data against malicious modiﬁ-
cations is to enforce data-ﬂow integrity (DFI) [2, 10, 55].
DFI creates a data-ﬂow graph by means of static anal-
ysis, which is enforced during run time by instrument-
ing memory-access instructions. However, the perfor-
mance overhead of DFI, which e.g. is on average 7% for
WIT [2], prevents it from being used to safeguard pro-
tection secrets of code-reuse mitigations, since it would
further increase the mitigation’s performance overhead.
IMIX can be used for both protecting sensitive data (like
DFI does) and enabling efﬁcient protection of safe re-
gions for control-ﬂow hijacking mitigations.
Retroﬁtting Existing Memory Protection. Segmen-
tation is a legacy memory-isolation feature on x86-
32 that allows to split the memory into isolated seg-
ments [61, 65]. For memory accesses, the current privi-
lege level is checked against the segment’s required priv-
ilege level directly in hardware. On x86-64 segmenta-
tion registers still exist but access control is no longer
enforced [37]. On the surface, re-enforcing legacy seg-
mentation seems to be an attractive solution, however,
IMIX is easier to implement from a hardware perspec-
tive: segmentation requires arithmetic operations, IMIX
only one check. Moreover, IMIX provides higher ﬂex-
ibility: protected memory does not need to consist of
one contiguous memory region. As segmentation reg-
isters are rarely used by regular applications any more,
they are often used to store base addresses for memory
hiding [6, 38, 41]. Indeed, segmentation-based memory
hiding comes with no performance overhead, however,
unlike IMIX, it does not provide real in-process isolation
and is vulnerable to memory-disclosure attacks [22, 26].
Paging can also be used as well to provide in-process iso-
lation by removing read/write permissions from a page
when executing untrusted code [5]. However, regu-
larly switching between trusted and untrusted code is ex-
pensive because of 1) two added mprotect() system
calls, and 2) the following invalidation of TLB entries
for each of them [60]. Further, this technique is vulnera-
ble to race-condition attacks, i.e., the attacker can access
the protected data from a second thread that runs concur-
rently to the trusted code. IMIX avoids both disadvan-
tages.
A more recent feature introduced with Intel VT-x is Ex-
tended Page Tables (EPT) [32] to implement hardware-
assisted memory virtualization. EPT provide another
layer of indirection for memory accesses that is con-
trolled by the hypervisor but is otherwise conceptually
the same as regular paging. Additionally, VT-x intro-
duces an instruction, vmfunc, that enables fast switches
between EPT mappings. Hence, to isolate memory, the
hypervisor maintains two EPT mappings [16] (regular
and protected memory) and trusted code invokes the
vmfunc instruction instead of mprotect()). How-
ever, this approach suffers from the same disadvantages
as the previous approach which relies on regular paging.
Proposed Memory Isolation Mechanisms. There are
already several academic proposals for memory isola-
tion. HDFI [56] is a ﬁne-grained data isolation mecha-
nism that uses MMU tagging for RISC-V. However, due
to the need of an additional tag table, HDFI needs two
accesses per memory operation. Thus, HDFI leverages
additional hardware units (like a cache) to lower the per-
formance impact. Still, HDFI relies on complex static
analysis for data-ﬂow integrity which does not meet the
requirements for modern JIT-compiled code. IMIX sup-
ports JIT compilation by building on existing function-
ality like mprotect, furthermore, IMIX does not need
any additional static analysis.
CHERI [62] extends a RISC architecture with ﬁne-
grained memory isolation using a set of ISA extensions.
For this, two compartments are introduced, however,
switching costs are comparably high (620 cycles over-
head). In addition, CHERI also relies on intensive static
analysis unsuitable for JIT code.
is another data isolation approach, but
ILDI
[13]
existing ARM features
for ARM.
(Privileged Access Never, PAN)
to create
a safe region for sensitive kernel memory, isolated from
potential kernel exploits. By explicitly granting Load
and Store Unprivileged (LSU)
instructions
access to sensitive data,
regular accesses (possibly
attacker controlled) are no longer allowed to access the
safe region. However, ILDI imposes a high performance
overhead on the kernel (35.3%). IMIX proposes a gen-
eral approach that can be leveraged by both kernel-space
and user-space mitigations.
leverages
It
Recent Hardware Extensions. Recent Intel CPUs im-
plement a variety of new memory-protection features.
In particular, Memory Protection Extensions (MPX) and
Memory Protection Keys (MPK) can be retroﬁtted to en-
able in-process memory isolation. Nevertheless, as we
discuss in the following, they are not viable alternatives
USENIX Association
27th USENIX Security Symposium    93
Name
400.perlbench
401.bzip2
403.gcc
429.mcf
433.milc
444.namd
445.gobmk
447.dealII
450.soplex
453.povray
456.hmmer
458.sjeng
462.libquantum
464.h264ref
470.lbm
471.omnetpp
473.astar
482.sphinx3
483.xalancbmk
GeoMean
CPI+Seg (%) CPI+IMIX (%) CPI+MPK (%)
-
0.19
2856.48
-2.41
-0.45
-0.09
32.41
-
-0.74
-
-1.35
1.39
-2.62
536.02
-1.94
1444.02
0.70
5.52
1385.67
12.43
-
0.13
61.49
-2.08
-0.63
-0.10
2.55
-2.57
-3.83
-
-2.17
1.43
-2.32
2.04
-2.04
42.95
0.67
-0.99
59.23
4.24
-
0.44
65.73
-4.89
-0.47
0.66
2.52
-3.37
-2.96
-
-2.54
1.36
-2.16
4.67
-1.99
56.62
0.20
-0.32
73.27
3.99
CPI+MPX (%)
-
132.36
-
203.71
-6.36
-8.60
-
-
2.88
-
15.43
56.81
106.41
46.87
-9.82
-
-1.29
-0.68
-
36.86
Table 2: Comparison of memory isolation techniques. CPI+Seg uses memory hiding to protect the safe region, for the
remaining the respective technique is used. Note that entries marked with “-” crashed with CPI applied.
to IMIX as both come with disadvantages that render
them impractical.
The main goal of MPX [31] is to provide hardware-
assisted bounds checking to avoid buffer overﬂows.
Therefore, the developer speciﬁes bounds using ded-
icated registers (each contains a lower and an upper
bound) that can be checked by newly introduced instruc-
tions. MPX can be retroﬁtted to enforce memory isola-
tion by deﬁning one bound that divides the address space
in two segments: a regular, and a protected region. Then,
bounds checks are inserted for every memory access in-
struction that is not allowed to access protected mem-
ory [37]. This has two main disadvantages. First, MPX
does not fail safe, i.e., not instrumented instructions (by
a third-party library, for example) can still access the
safe region. Second, instructions that are allowed to ac-
cess protected memory can still access unprotected mem-
ory. Hence, an attacker might be able to redirect mem-
ory accesses of trusted code to attacker-controlled mem-
ory. To avoid such attacks, additional instrumentation
of the trusted code is required, which signiﬁcantly in-
creases the performance overhead, as depicted in Table 2.
Protecting CPI’s safe region with MPX using the open-
source implementation by Koning et al. [37] results in a
total performance overhead of 36.86% with a maximum
of 203.71% for mcf, which cannot be considered prac-
tical, especially since we were not able to execute the
benchmarks that show the highest overheads across all
techniques. In comparison, IMIX is secure by default,
and enforces strict isolation between protected and un-
protected memory without additional overhead.
Intel’s MPK is a feature to be available in upcoming In-
tel x86-64 processors [27, 34], already available on other
architectures like IA-64 [30], and ARM32 (called mem-
ory domains) [4]. Since IMIX and MPK implement a
similar idea, we also evaluated MPK based on the ap-
proximation given by Koning et al. [37] using the setup
we describe in Section 7.
As shown in Table 2, using MPK to protect the CPI safe
region results in a total performance overhead of 12.43%
with a maximum of 2856.48% for gcc. We identiﬁed
the additional instrumentation to switch between trusted
and untrusted code to be the root cause of the additional
overhead. This emphasizes the conceptual differences of
MPK and IMIX. MPK enables many distinct domains
to be present. Reducing these to two possible domains
allows IMIX to be leveraged by mitigations like CPI or
CFI that rely on frequent domain switches. In contrast,
MPK is useful if the application changes domains infre-
quently, i.e., for temporal memory isolation, or to isolate
different threads.
Encryption can also be used to protect memory. For
instance, Intel Total Memory Encryption [35] (Secure
Memory Encryption for AMD [36]) allows to encrypt the
whole memory transparently, protecting it from physical
analysis like cold-boot attacks, but not local memory cor-
ruption attacks [37]. Another encryption feature, AES-
NI [35], reduces overhead associated with encryption
94    27th USENIX Security Symposium
USENIX Association
dramatically, which can be used to encrypt and decrypt
safe regions as needed. Even with hardware encryption
support, solutions like CCFI still induce a performance
overhead of up to 52% [42], and keeping the encryp-
tion key safe requires relying on unused registers and en-
suring that this key is never spilled to memory [14, 37].
IMIX is not prone to register spilling, since it does not
rely on a secret to protect memory.
Trusted Execution Environments like Intel SGX [15] of-