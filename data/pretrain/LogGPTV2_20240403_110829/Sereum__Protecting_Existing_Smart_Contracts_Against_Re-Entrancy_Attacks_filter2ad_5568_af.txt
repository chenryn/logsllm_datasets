the balance is updated after the external call, the contract is
still safe from re-entrancy attacks.
However, the access pattern to these lock variables during
contract re-entrance matches an attack pattern, i.e., the internal
state (the lock variable) that affects the control ﬂow in subse-
quent (re-entered) invocation of the contract, is updated sub-
sequently (at ). Operating at bytecode level, it is challenging
to distinguish the benign state updates of locks from those of
critical variables such as balances. Note that manual locking
is an error-prone approach as it could allow an attacker to re-
enter other functions of the same contract, unless the entry
of every function is guarded by the lock. In contrast, Sereum
automatically introduces locks for all possibly dangerous vari-
ables (detected via taint tracking) across all functions thereby
13
removing the burden from developers to manually determine
all possible vulnerable functions and critical variables.
C. Performance and Memory Overhead
Since there are no benchmarks, consisting of realistic
contracts, available for EVM implementations, we measured
the performance overhead by timing the execution of a subset
of blocks from the Ethereum blockchain. We sampled blocks
from the blockchain, starting from 460000, 450000, 440000,
4300000 and 4200000, we use 10 consecutive blocks. We run
those 50 blocks in batch 10000 times, while accounting only
for the EVM’s execution time. We perform one run with plain
geth, on which Sereum is based, and one with Sereum with
attack detection enabled. For the performance evaluation, we
do not consider those transactions, which Sereum ﬂags as a re-
entrancy attack. Sereum aborts those transactions early, which
can result in much shorter execution time, compared to the
normal execution. We measured the performance overhead of
Sereum, compared with plain geth when running 50 blocks
in batch. Here, we average the runtime over 10,000 runs of
the same 50 blocks. We benchmarked on a 8-core Intel(R)
Xeon(R) CPU E5-1630 v4 with 3.70GHz and 32 GB RAM.
The mean runtime of geth was 2277.0 ms (σ = 146.7 ms).
The mean runtime of Sereum was 2494.5 ms (σ = 174.8
ms). As such, Sereum incurred a mean overhead of 217.6
ms (σ = 100.9 ms) or 9.6%. While measuring the timing
of the executed transactions, we additionally measured the
memory usage of the whole Ethereum client. We used Linux
cgroups to capture and measure the memory usage of Sereum
and all subprocesses. We sample the memory usage every
second while performing the runtime benchmarks. During our
benchmark, Sereum required on average 9767 MB of memory
with active attack detection, while the plain geth required 9252
MB.
This shows that Sereum can effectively detect re-entrancy
attacks with a negligible overhead. In fact, the actual runtime
overhead is not noticeable. The average time until the next
block is mined in 14.5 seconds and contains 130 transactions
on average (between Jan 1, 2018 until Aug 7, 2018). Given
our benchmark results, a rough estimate of EVM execution
time per block is 0.05 seconds, with Sereum adding 0.005
seconds overhead. Compared to the total block time the
runtime overhead of Sereum is therefore not noticeable during
normal usage.
VII. RELATED WORK
In this section, we overview related work in the area—
beyond the state of the art defenses and analysis tools that
have been described in Section II.
Vyper [7] is an experimental language dedicated to maxi-
mize the difﬁculty of writing misleading code while ensuring
human-readability to enable easy auditing of the contract. It
achieves better code clarity by considerably limiting high-
level programming features such as class inheritance, function
overloading, inﬁnite loops, and recursive calls. This approach
sacriﬁces the expressiveness of the language in exchange for
gas predictability. Babbage [36] has been recently proposed by
the Ethereum community as a visual programming language
that consists of mechanical components aiming to help pro-
grammers to better understand the interactivity of components
in a contract. Bamboo [2] is another contract programming
language focusing on the state transition of contracts. A con-
tract is described as a state machine whose state will change
along with the contract signature. Obsidian [14] follows a
similar approach and proposes a solidity-like language with the
addition of state and state transitions as ﬁrst-class constructs in
the programming language. These proposals all aim to make
the contracts more predictable. Simplicity [33] exhibits larger
expressiveness yet allowing easy static analysis compared to
EVM code. Static analysis provides useful upper bound com-
putation estimation on the transactions, thus giving the peers
more predictable views on the transaction execution. Simplicity
also features self-contained transactions that exclude the global
state in the contract execution.
Notice that such novel programming languages do make
it simpler for developers to write correct contracts. However,
wide-scale deployment of new programming models would
require rewriting of all legacy software, which requires sig-
niﬁcant development effort.
VIII. CONCLUSION
Re-entrancy attacks exploit inconsistent internal state of
smart contracts during unsafe re-entrancy, allowing an attacker
in the worst case to drain all available assets from a smart
contract. So far, it was believed that advanced ofﬂine analysis
tools can accurately detect these vulnerabilities. However, as
we show, these tools can only detect basic re-entrancy attacks
and fail to accurately detect new re-entrancy attack patterns,
such as cross-function, delegated and create-based re-entrancy.
Furthermore, it remains open how to protect existing contracts
as smart contract code is supposed to be immutable and
contract creators are anonymous, which impedes responsible
disclosure and deployment of patched contract. To address the
particular ecosystem of smart contracts, we introduce a novel
run-time smart contract security solution, called Sereum, which
exploits dynamic taint tracking to monitor data-ﬂows during
smart contract execution to automatically detect and prevent
inconsistent state and thereby effectively prevent basic and
advanced re-entrancy attacks without requiring any semantic
knowledge of the contract. By running Sereum on almost 80
million Ethereum transactions involving 93,942 contracts, we
show that Sereum can prevent re-entrancy attacks in existing
contracts with negligible overhead. Sereum is designed to
run in enforcement mode, protecting existing contracts, when
Sereum is integrated into the blockchain ecosystem. However,
Sereum can be particularly relevant for smart contract devel-
opers in order to identify attacks against their contracts and
patch them accordingly. Namely, Sereum can also be executed
locally by contract developers that are interested in ensuring
the security of their deployed contracts. Lastly, we are the ﬁrst
in presenting and analyzing false positive cases when searching
for re-entrancy vulnerabilities. We reveal root causes of false
positive issues in existing approaches and give concrete advice
to smart contract developers to avoid suspicious patterns during
development.
ACKNOWLEDGMENT
This work has been partially funded by the DFG as part
of project S2 within the CRC 1119 CROSSING.
14
REFERENCES
[1] https://github.com/nexusdev/hack-recovery, [Online; accessed Jul 28,
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
2018].
“Bamboo: a language for morphing smart contracts,” https://github.com/
pirapira/bamboo, [Online; accessed Jul 24, 2018].
“ethersplay: Evm disassembler and related analysis tools.” https://
github.com/trailofbits/ethersplay, [Online; accessed Jul 28, 2018].
“Securing smart contracts project,” https://www.syssec.wiwi.uni-due.de/
en/research/research-projects/securing-smart-contracts/.
“Solidity documentation,” [Online; accessed Aug 6, 2018]. [Online].
Available: http://solidity.readthedocs.io/
“Solidity withdrawal from contracts,” [Online; accessed Jul 25, 2018].
[Online]. Available: https://solidity.readthedocs.io/en/develop/common-
patterns.html#withdrawal-from-contracts
“Vyper,” https://github.com/ethereum/vyper.
“Critical
sal-
vaged from potential attacks,” https://www.reddit.com/r/MakerDAO/
comments/4niu10/critical_ether_token_wrapper_vulnerability_eth/, Jun.
2016, [Online; accessed Jul 28, 2018].
“A list of altcoins,” https://www.investitin.com/altcoin-list/, 2018, [On-
line; accessed Aug 6, 2018].
token wrapper vulnerability -
eth tokens
ether
[10] N. Atzei, M. Bartoletti, and T. Cimoli, “A survey of attacks on
ethereum smart contracts (sok),” in Proceedings of the 6th International
Conference on Principles of Security and Trust, 2017.
[11] T. Avgerinos, A. Rebert, S. K. Cha, and D. Brumley, “Enhancing
symbolic execution with veritesting,” in Proceedings of the 36th Inter-
national Conference on Software Engineering, ser. ICSE 2014. ACM,
2014.
[12] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Gollamudi,
G. Gonthier, N. Kobeissi, N. Kulatova, A. Rastogi, T. Sibut-Pinote,
N. Swamy, and S. Z. Béguelin, “Formal veriﬁcation of smart contracts:
Short paper,” in Proceedings of the 2016 ACM Workshop on Program-
ming Languages and Analysis for Security, 2016.
J. Clause, W. Li, and A. Orso, “Dytan: A generic dynamic taint analysis
framework,” in Proceedings of the 2007 International Symposium on
Software Testing and Analysis. ACM, 2007.
[13]
[14] M. Coblenz, “Obsidian: A safer blockchain programming language,” in
2017 IEEE/ACM 39th International Conference on Software Engineer-
ing Companion (ICSE-C), May 2017.
[15] ConsenSys Diligence, “Ethereum smart contract best practices,”
[Online; accessed Jul 25, 2018]. [Online]. Available: https://consensys.
github.io/smart-contract-best-practices/known_attacks/
[16] P. Daian, “Chasing the dao attackers wake,” https://pdaian.com/blog/
[17]
[18]
contract
chasing-the-dao-attackers-wake/, [Online; accessed Jul 26, 2018].
“Dao
0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413,
accessed Aug 1, 2018].
“TheDarkDAO contract address.” [Online]. Available: https://etherscan.
io/address/0x304a554a310C7e546dfe434669C62820b7D83490
https://etherscan.io/address/
[Online;
address,”
[19] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox,
J. Jung, P. McDaniel, and A. N. Sheth, “Taintdroid: an information-
ﬂow tracking system for realtime privacy monitoring on smartphones,”
ACM Transactions on Computer Systems (TOCS), vol. 32, no. 2, 2014.
I. Grishchenko, M. Maffei, and C. Schneidewind, “A semantic frame-
work for the security analysis of ethereum smart contracts,” in Proceed-
ings of the 7th International Conference on Principles of Security and
Trust, 2018.
[20]
[21] S. Grossman, I. Abraham, G. Golan-Gueta, Y. Michalevsky, N. Rinet-
zky, M. Sagiv, and Y. Zohar, “Online detection of effectively callback
free objects with applications to smart contracts,” Proceedings of the
ACM on Programming Languages, 2017.
[22] E. Hildenbrandt, M. Saxena, X. Zhu, N. Rodrigues, P. Daian, D. Guth,
and G. Rosu, “KEVM: A complete semantics of the ethereum virtual
machine,” Tech. Rep., 2017.
[23] C. Jentzsch, “The History of the DAO and Lessons Learned,” Aug
2016, [Online; accessed Aug 1, 2018]. [Online]. Available: https:
//blog.slock.it/the-history-of-the-dao-and-lessons-learned-d06740f8cfa5
15
[24] H. Jordan, B. Scholz, and P. Suboti´c, “Soufﬂé: On synthesis of program
analyzers,” in International Conference on Computer Aided Veriﬁcation.
Springer, 2016.
[26]
[25] S. Kalra, S. Goel, M. Dhawan, and S. Sharma, “ZEUS: Analyzing
safety of smart contracts,” in Proceedings 2018 Network and Distributed
System Security Symposium.
J. C. King, “Symbolic execution and program testing,” Communications
of the ACM, vol. 19, no. 7, 1976.
J. Krupp and C. Rossow, “TEETHER: Gnawing at ethereum to auto-
matically exploit smart contracts,” in 27th USENIX Security Symposium
(USENIX Security 18), 2018.
Internet Society, 2018.
[27]
[28] V. Kuznetsov, J. Kinder, S. Bucur, and G. Candea, “Efﬁcient state merg-
ing in symbolic execution,” in Proceedings of the 33rd ACM SIGPLAN
Conference on Programming Language Design and Implementation,
2012.
[30]
[29] L. Luu, D. Chu, H. Olickel, P. Saxena, and A. Hobor, “Making smart
contracts smarter,” in Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security, 2016.
“Manticore symbolic execution tool v0.2.2.” [Online]. Available:
https://github.com/trailofbits/manticore
“Mythril v0.19.7.” [Online]. Available: https://github.com/ConsenSys/
mythril
I. Nikolic, A. Kolluri, I. Sergey, P. Saxena, and A. Hobor, “Finding
the greedy, prodigal, and suicidal contracts at scale,” in 34th Annual
Computer Security Applications Conference (ACSAC’18), 2018.
[31]
[32]
[33] R. O’Connor, “Simplicity: A new language for blockchains,” in Pro-
the 2017 Workshop on Programming Languages and
ceedings of
Analysis for Security. ACM, Oct. 2017.
“Oyente tool,” https://github.com/melonproject/oyente,
cessed Jul 26, 2018].
[Online; ac-
[34]
[35] R. Price, “Digital currency ethereum is cratering because of a $50
million hack,” https://www.businessinsider.com/dao-hacked-ethereum-
crashing-in-value-tens-of-millions-allegedly-stolen-2016-6, Jun. 2016,
[Online; accessed May 4, 2018].
[36] C. Reitwiessner, “Babbage – a mechanical smart contract language,”
https://medium.com/@chriseth/babbage-a-mechanical-smart-contract-
language-5c8329ec5a0e, 2017, [Online; accessed Jul 24, 2018].
[37] E. J. Schwartz, T. Avgerinos, and D. Brumley, “All you ever wanted to
know about dynamic taint analysis and forward symbolic execution (but
might have been afraid to ask),” in 31st IEEE Symposium on Security
and Privacy, S&P, 2010.
[39]
[38] M. Suiche, “Porosity: A decompiler
for blockchain-based smart
[Online]. Available: https://github.com/
contract bytecode,” 2017.
comaeio/porosity
J. Tanner, https://blog.indorse.io/ethereum-upgradeable-smart-contract-
strategies-456350d0557c, Mar 2018, [Online; accessed Aug 6, 2018].
Ivanitskiy, R. Takhaviev,
E. Marchenko, and Y. Alexandrov, “Smartcheck: Static analysis of
ethereum smart contracts,” in Proceedings of
the 1st International
Workshop on Emerging Trends in Software Engineering for Blockchain,
2018.
I.
[40] S. Tikhomirov, E. Voskresenskaya,
[41] D. Trabish, A. Mattavelli, N. Rinetzky, and C. Cadar, “Chopped sym-
bolic execution,” in Proceedings of the 40th International Conference
on Software Engineering, 2018.
[42] P. Tsankov, A. M. Dan, D. D. Cohen, A. Gervais, F. Buenzli, and M. T.
Vechev, “Securify: Practical security analysis of smart contracts,” in
Proceedings of the 2018 ACM Conference on Computer and Commu-
nications Security, CCS, 2018.
J. Wilcke,
currently-undergoing-dos-attack/, 2016,
2018].
https://blog.ethereum.org/2016/09/22/ethereum-network-
[Online; accessed Jul 28,
[43]
[44] G. Wood, “Ethereum: A secure decentralised generalised transaction
ledger (EIP-150 revision),” 2016. [Online]. Available: http://gavwood.
com/paper.pdf
[45] Y. Zhou, D. Kumar, S. Bakshi, J. Mason, A. Miller, and M. Bailey,
“Erays: Reverse engineering ethereum’s opaque smart contracts,” in
27th USENIX Security Symposium, 2018.