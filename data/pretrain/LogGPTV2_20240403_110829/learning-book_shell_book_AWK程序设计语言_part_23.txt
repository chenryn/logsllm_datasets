138
function frame() (
# create frame for graph
for (i = ox; i  1) {
--do [ox =+ [-dox
} else if ($i == "-" & top > 1) {
--do [do1xoes =- [-doxes
}else if ($i == "*" && top > 1){
--do [01x [-dx
} else if ($i == "/"&& top > 1){
--do [doxe =/ [dx
} else if ($i == "^" &6 top > 1){
--do [doxe =、[dx8
}else{
printf("error: cannot evaluate &s\n", $i)
top = 0
next
if (top == 1)
printf("\t.8g\n", stack[top--])
else if (top > 1){
printf ("error: too many operands\n")
top = 0
---
## Page 148
第六章小型语言
140
）
对于输入
1 2 + 3 4 - * 5 /
calc1给出的答案是-0.6.
我们的第二个逆波兰式计算器支持用户自定义变量，并且可以调用数学函数，变量名由字母开始，后
跟字母或数字，语句uar=表示把核项元素弹出，并赋值给变量uar.如果输入行以赋值语句结束，则不会
打印出任何值，一个典型的交互过程看起来就像这样（由程序打印的内容向右缩进）：
0 -1 stan2 pi=
pi
3.1415927
355 113 / x= x
3.1415929
x pi /
1.0000001
2 sqrt
1.4142136
直接对前一个程序进行扩展，就可以得到新版的计算器：
144
# calc2 - reverse-Polish calculator, version 2
#
input: expressions in reverse Polish
#
output: value of each expression
{for (i = 1; i  1){
stack[top-1] -= stack[top]; top--
}else if ($i == "*" && top > 1){
stack[top-1] *= stack[top]; top--
} else if ($i == "/" && top > 1) {
--do [d1xs =/ [-dos
}else if ($i == "" && top > 1）{
stack[top-1] ^= stack[top]; top--
}else if ($i == "sin" && top > 0){
([dox) =[do]s
}else if ($i =="cos" && top > 0){
([doxe)s =[do]s
---
## Page 149
第六章小型语言
141
}else if ($i == "atan2" && top > 1){
-do([dxsdo1x)u =[d
}else if ($i == "1og" && top > 0){
stack[top] = log(stack[top])
）（0<dodx=）Ts（