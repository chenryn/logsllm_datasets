Table 4: Number of crashing (#c) and non-crashing (#nc) inputs found by
crash exploration (Exploration) as well as the percentage of how many could
be successfully traced (Tracing).
Table 5: Time spent on tracing, predicate analysis (PA) and ranking of each
target (in hours:minutes).
Target
mruby
Lua
Perl
screen
readelf
mruby
objdump
patch
Python
tcpdump
NASM
Bash
Bash
Python
nm
mruby
Python
Xpdf
mruby
PHP
libzip
mruby
NASM
Sleuthkit
Lua
Exploration
#c
#nc
2708
120
1482
398
6037
1591
858
2164
1803
687
3914
809
122
27
266
886
1546
211
619
161
2138
2476
842
5483
2102
213
1695
253
468
111
1928
4063
2536
705
545
779
2327
1128
800
2081
286
36
3557
1629
1787
590
175
108
579
1948
Tracing
#c
#nc
100% 99.9%
100% 100%
100% 99.9%
100% 100%
100% 100%
100% 99.9%
100% 100%
74.8% 89.7%
100% 100%
100% 100%
100% 100%
7.1% 15.9%
50.7% 55.5%
98.0% 98.2%
100% 100%
100% 100%
99.7% 99.8%
100% 100%
99.7% 99.9%
100% 100%
100% 100%
100% 99.9%
99.8% 100%
100% 100%
100% 100%
#1
#2
#3
#4
#5
#6
#7
#8
#9
#10
#11
#12
#13
#14
#15
#16
#17
#18
#19
#20
#21
#22
#23
#24
#25
Target
mruby
Lua
Perl
screen
readelf
mruby
objdump
patch
Python
tcpdump
NASM
Bash
Bash
Python
nm
mruby
Python
Xpdf
mruby
PHP
libzip
mruby
NASM
Sleuthkit
Lua
Tracing
01:08
00:09
00:53
00:11
00:05
01:44
< 1 min
00:36
01:20
00:01
00:20
00:49
00:26
01:23
00:01
01:47
04:03
00:19
01:58
01:16
< 1 min
01:57
00:10
< 1 min
00:11
PA Ranking
00:04
< 1 min
00:17
< 1 min
< 1 min
00:16
< 1 min
< 1 min
00:05
< 1 min
00:07
00:03
00:01
00:08
< 1 min
00:02
00:03
00:03
00:22
00:03
< 1 min
00:16
00:02
< 1 min
< 1 min
00:19
00:03
01:52
00:04
00:02
00:42
< 1 min
< 1 min
00:15
< 1 min
00:12
00:01
00:02
00:14
< 1 min
00:49
00:55
00:01
00:21
00:47
< 1 min
00:49
00:03
< 1 min
00:07
#1
#2
#3
#4
#5
#6
#7
#8
#9
#10
#11
#12
#13
#14
#15
#16
#17
#18
#19
#20
#21
#22
#23
#24
#25
stead of the original class. As a consequence, the garbage
collector decides to free the struct containing the original
class NotImplementedError, a very uncommon event. Sub-
sequent predicates point to locations where the string is at-
tached to the presumed exception object during the raising of
the exception. Additionally, predicates pinpoint the crashing
location by stating that a crash will occur if the dereferenced
value is smaller than a byte.
6.4.2 Case Study: Heap Buffer Overﬂow in readelf
GNU Binutils’ readelf application may crash as a result
of a heap buffer overﬂow when parsing a corrupted MIPS
option section [5]. This bug (Bug #5) was assigned CVE-
2019-9077. Note that this bug only crashes when ASAN is
used. Consequently, we use a binary compiled with ASAN
for crash exploration but run subsequent tracing on a non-
ASAN binary. The bug is triggered when parsing a binary
input where a ﬁeld indicates that the size is set to 1 despite the
actual size being larger. This value is then processed further,
amongst others, by an integer division where it is divided
by 0x10, resulting in a value of 0. The 0 is then used as
size for allocating memory for some struct. More speciﬁcally,
it is passed to the cmalloc function that delegates the call
to xmalloc. In this function, the size of 0 is treated as a
special case where one byte should be allocated and returned.
Subsequently, writing any data larger than one byte—which
is the case for the struct the memory is intended for—is an
out-of-bounds write. As no crucial data is overwritten, the
program ﬂow continues as normal unless it was compiled
with ASAN, which spots the out-of-bounds write.
To prevent this bug, the developers introduced a ﬁx where
they check whether the allocated memory’s size is sufﬁcient
to hold the struct. Analyzing the top 50 predicates, we observe
that each of these predicates is assigned a score larger than or
equal 0.99. Our seventh predicate pinpoints the ﬁx by making
the case that an input crashes if the value in rcx is smaller than
7. The other predicates allow us to follow the propagation
until the crashing location. For instance, two predicates exist
that point to the integer division by 0x10, which causes the
0. The ﬁrst predicate states that crashes have a value smaller
than 0x7 after the division. The second predicate indicates
that the zero ﬂag is set, demonstrating a use case for our ﬂag
predicates. We further see an edge predicate, which indicates
USENIX Association
29th USENIX Security Symposium    247
that only crashes enter the special case, which is triggered
when xmalloc is called with a size of 0.
6.4.3 Case Study: Use-after-free in Lua
In version 5.3.5, a use-after-free bug (#25, CVE-2019-6706)
was found in the Lua interpreter [25]. Lua uses so-called up-
values to implement closures. More precisely, upvalues are
used to store a function’s local variables that have to be ac-
cessed after returning from the function [39]. Two upvalues
can be joined by calling lua_upvaluejoin. The function ﬁrst
decreases the ﬁrst upvalue’s reference count and, critically,
frees it if it is not referenced anymore, before then setting
the reference to the second upvalue. The function does not
check whether the two passed parameters are equal, which se-
mantically has no meaning. However, in practice, the upvalue
will be freed before setting the reference, thus provoking a
use-after-free. ASAN detects the crash immediately while
regular builds crash with a segmentation fault a few lines later.
Our approach manages to create three predicates with a
score of 1. All of these three predicates are edge predicates,
i. e., detecting that for crashes, another path was taken. More
precisely, for the very ﬁrst predicate, we see the return from
the function where the second upvalue’s index was retrieved.
Note that this is before the developers’ ﬁx, but the ﬁrst point
in the program where things go wrong. The second predicate
describes the function call where the upvalue references are
fetched, which are then compared for equality in the devel-
oper ﬁx, i. e., it is located closely before the ﬁx. The third
predicate is located right after the developer ﬁx; thus, we have
to inspect three predicates or three source lines until we locate
the developer ﬁx. It describes the return from the function
decreasing the reference count. All other predicates follow
the path from the root cause to the crashing location.
6.4.4 Case Study: Uninitialized Variable in mruby
The mruby interpreter contains a bug where uninitialized
memory is accessed (Bug #19). This happens in the unpack_m
function when unpacking a base64 encoded value from a
packed string. A local char array of size four is declared
without initialization. Then, a state machine implemented as
a while loop iterates over the packed string, processing it.
The local char array is initialized in two states during this
processing step. However, crafting a speciﬁc packed string
allows to avoid entering these two states. Thereby, the local
array is never properly initialized and MSAN aborts program
execution upon the use of the uninitialized memory.
When analyzing the top 50 predicates, we ﬁnd that they
are are all related to the bug. The 16th predicate pinpoints the
location where the developer ﬁx is inserted. It describes that
crashes fail to pass the condition of the while loop and—as
a consequence—leave the loop with the local variable being
uninitialized. Another predicate we identify pinpoints if the
condition allows skipping the initialization steps, stating that
this is a characteristic inherent to crashing inputs. All other
predicates highlight locations during or after the state machine.
Note that the crash only occurs within MSAN; thus, the
binary we trace does not crash. However, this does not pose
a problem for our analysis, which efﬁciently pinpoints root
cause and propagation until the crashing and non-crashing
runs no longer differ. In this particular case, the uninitialized
memory is used to calculate a value that is then returned. For
instance, we see that the minimal memory value written is
less than 0x1c at some address. Consequently, our analysis
pinpoints locations between the root cause and the usage of
the uninitialized value.
6.4.5 Case Study: Null Pointer Dereference in NASM
For NASM (#11, CVE-2018-16517), we analyze a logic ﬂaw
which results in a null pointer dereference that crashes the
program. This happens because a pointer to a label is not
properly initialized but set to NULL. The program logic as-
sumes a later initialization within a state machine. However,
this does not happen because of a non-trivial logic ﬂaw. The
developers ﬁx this problem by a signiﬁcant rewrite, chang-
ing most of the implementation handling labels (in total, 500
lines of code were changed). Therefore, we conclude that no
particular line can be determined as the root cause; never-
theless, we investigate how our approach performs in such a
scenario. This is a good example to demonstrate that some-
times deﬁning the root cause can be a hard challenge even for
a human.
Analyzing the top 50 predicates reported, we ﬁnd that
AURORA generates predicates pointing to various hotspots,
which show that the label is not initialized correctly. More
precisely, we identify a perfect edge predicate stating that
the pointer is initially set to NULL for crashes. Subsequent
predicates inform us that some function is called, which takes
a pointer to the label as a parameter. They identify that for
crashes the minimal value for rdi (the ﬁrst function parameter
in the calling convention) is smaller than 0xff. Immediately
before the function attempts to dereference the pointer, we
see that the minimal value of rax is smaller than 0xff, which
indicates that the value was propagated. Afterward, a seg-
mentation fault occurs as accessing the address 0 is illegal.
In summary, we conclude that AURORA is useful to narrow
down the scope even if no deﬁnite root cause exists.
7 Discussion
As our evaluation shows, our approach is capable of identify-
ing and explaining even complex root causes where no direct
correlation between crashing cause and root cause exists. Nev-
ertheless, our approach is no silver bullet: It still reports some
predicates that are not related to the root cause. Typically,
248    29th USENIX Security Symposium