formed on a PC with a Pentium 4 CPU (3.6 GHz) and 2
Gigabytes of RAM.
The results of our analysis are shown in Table 1. Wa-
ler found 29 previously-unknown vulnerabilities in four
real-world applications and 18 previously-unknown vul-
nerabilities in eight Jebbo applications. It also produced
a low number of false positives. In Table 1, the columns
Lines of Code and Bytecode Instructions show the size of
the applications in terms of the number of lines of Java
code (JSP pages were ﬁrst compiled into their servlet
representations) and of the number of bytecode instruc-
tions, respectively. The column Entry Points shows how
many entry points were found and analyzed by Waler and
the column States Explored shows how many states were
covered. The columns Likely Invariants and Invariants
Violated respectively show how many invariants were
generated by Daikon and how many of them were re-
ported as violated by Waler. The numbers in the column
Alerts represent the (manual) aggregation of the reported
invariants violations (as it is discussed in Section 4.3.3).
The columns Vulnerabilities, Bugs, and False Positives
show the aggregated number of vulnerabilities, security-
unrelated bugs, and false alarms that were produced by
Waler. Note that the numbers on these columns are based
on the analysis of the aggregated alerts. Finally, the col-
umn Running Time shows the time required for the anal-
ysis.
5.1 Vulnerabilities
Easy JSP Forum: The ﬁrst application that we ana-
lyzed is the Easy JSP Forum application, a community
forum written in JSP. Using Waler, we found that any
authenticated user can edit or delete any post in a fo-
rum. To enforce access control, the Forum application
does not show a “delete” or “edit link” for a post if the
current user does not have moderator’s privileges for the
current forum but fails to check these privileges when
a delete or an edit request is received. Thus, if a user
forges a delete/edit request to the application using a
valid post id (all ids can be obtained from the source
code of web pages accessible by all users), a post will
be deleted/modiﬁed.
GIMS: The second application that we analyzed is the
Global Internship Management System (GIMS) web ap-
plication, a human resource management software. Us-
ing Waler, we found that many of the pages in the ap-
Application
Easy JSP Forum
GIMS
JaCoB
JspCart
Jebbo
1
2
3
4
5
6
7
8
Lines
of Code
2,416
6,153
8,924
21,294
1,027
1,882
1,438
1,182
804
1,524
1,499
1,463
Entry
States
Bytecode
Instructions Points Explored
251,657
36,228
26,809
1,152,661
7,348
11,269
15,129
45,765
2
40
38
86
2,304
4,227
2,993
2,709
2,025
3,709
2,826
2,782
16
20
17
8
8
19
15
15
1,725
529
195
73
59
268
398
1,031
Likely
Invariants
Invariants Alerts
Violated
Vulne-
rabilities
Bugs
False
Positives
5,824
6,993
81,832
34,286
8,777
7,767
7,388
4,474
2,792
5,159
3,342
8,468
6
55
0
5
2
3
2
3
3
9
10
15
3
27
0
5
2
2
2
3
3
9
5
6
2
23
0
5
2
0
2
0
1
6
4
3
0
2
0
0
0
0
0
2
0
3
1
3
1
2
0
0
0
2
0
1
2
0
0
0
Runtime
(min)
319
88
79
4,576
1.5
1
1
0.5
0.5
0.5
0.5
1.2
Table 1: Experimental results.
plication do not have sufﬁcient protection from unautho-
rized access. In particular, our tool correctly identiﬁed
14 servlets that can be accessed by an unauthenticated
user (a user that is not logged in at all). Most of these
pages do contain a check that ensures that there is some
user data in a session (which is only true for authenti-
cated users). When a check fails, the application gener-
ates output that redirects the client’s browser to a login
page. Unfortunately, at this point, the application does
not stop to process the request due to a missing return
statement. Moreover, we found that certain pages in the
GIMS application that should only be accessible to users
with administrative privileges do not have checks to con-
ﬁrm the role of the current user. As a result, nine admin-
istrative pages were correctly reported as vulnerable.
JaCoB: The third application is JaCoB, a community
message board application that supports posting and
viewing of messages by registered users. For this pro-
gram, our tool neither found any vulnerabilities nor did
it generate any false alert. However, closer analysis of
the application revealed two security ﬂaws, which could
not be identiﬁed with the techniques used by Waler. For
example, when a user registers with the message board or
logs in, she is expected to provide a username and a pass-
word. Unfortunately, when this information is processed
by the application, the password is simply ignored. Also,
in this application, a list of all its users and their private
information is publicly available. These two problems
represent serious security issues; however, they cannot
be detected by Waler because the program speciﬁcation
that can be inferred from the application’s behavior does
not contain any discrepancies with respect to the appli-
cation’s code.
JspCart: The fourth test application is JspCart, which is
a typical online store. Waler identiﬁed a number of pages
in its administrative interface that can be accessed by
unauthorized users. In JspCart, all pages available to an
admin user are protected by checks that examine the User
object in the session. More precisely, the application ver-
iﬁes that a user is authenticated and that the user has ad-
ministrative privileges. However, Waler found that four
out of 45 pages are missing the second check. Therefore,
any user that has a regular account with the store can ac-
cess administrative pages and add, modify, or delete set-
tings (e.g., the processing charge for purchases). A sim-
pliﬁed version of one of these vulnerabilities is shown
in Figure 3. Waler also found a logic vulnerability that
allows an authenticated user to edit the personal informa-
tion of another user by submitting a valid email address
of an existing user. This vulnerability is similar to the
one shown in Figure 4.
Jebbo: We analyzed a set of eight Jebbo applications that
were written by senior-level undergraduate students as a
class project. Jebbo is a message board application that
allows its users to open accounts, post public messages,
and update their own messages and personal information.
Some of the applications also implement a message rat-
ing functionality. For this project, all students were pro-
vided with a description of the application to implement
along with a set of rules (including security constraints)
that were expected to be enforced by the application.
After running Waler on this set of applications, we
found that six out of eight applications contained one or
more logic ﬂaws. Examples of the vulnerabilities found
by Waler include the fact that unauthenticated users can
post a message to the board, and the lack of authoriza-
tion checks when users rate an existing message (e.g., in
order to avoid for a user to rate its own messages). Iron-
ically, most of the student followed the provided speciﬁ-
cation carefully and were checking that access to certain
pages is limited to authenticated users only; however, due
to various mistakes, the enforcing checks were not al-
ways sufﬁcient. For example, common problems that we
found are missing return statements on an error path and
a failure to foresee all possible paths available to a user
to access a certain functionality.
Waler identiﬁed a number of application logic ﬂaws
that are associated with unauthorized data modiﬁcation,
14
such as the possibility to edit personal information or
posts belonging to another user. Some of the examples of
these vulnerabilities are shown in Figure 4 and Figure 5.
These vulnerabilities are classic examples of inconsis-
tent usage of data by the application. It is interesting to
observe that even though the students were aware of pos-
sible parameter tampering vulnerabilities, and, in many
cases, they were very careful about checking user input
for validity, they often failed to apply this knowledge to
cases where there were multiple paths to the same pro-
gram point.
The results for the Jebbo application demonstrate that
logic ﬂaws are hard to avoid, even in simple web appli-
cations. Almost all applications in this set were found
to be vulnerable despite the fact that the students were
given a clear program speciﬁcation and knew basic web
security practices. Given the class level of the students
who were enrolled in the class, it is reasonable to assume
that their programming skills are not far off from those
of entry-level programmers. This, together with the fact
that the complexity of real-world applications is much
higher than the complexity of the Jebbo application, can
be seen as an indication of how wide-spread web appli-
cation logic ﬂaws are. Moreover, it can be argued that
many real-world application are, at least partially, writ-
ten by students who are widely employed year-round as
interns.
5.2 Discussion
As it is shown in Table 1, Waler generated a low number
of false positives. Careful analysis of the alerts which did
not represent a vulnerability revealed that the majority
of them represent true weaknesses in code. These alerts
were classiﬁed as bugs. We found that these bugs were
either potential vulnerabilities that turned out to be unex-
ploitable in particular situations or were not interesting
for exploitation. For example, an unauthenticated user
might be able to access a certain page, but this access
does not contain any sensitive information. We classiﬁed
the rest of the alerts as false positives.
We also carefully analyzed the applications for false
negatives. We found that Waler missed some security
problems, like the ones in JaCoB, but we consider these
vulnerabilities to be out of scope as they cannot be de-
tected using our approach. We also identiﬁed several
cases where Waler missed vulnerabilities that should be
detectable using the described approach. The main rea-
son for such false negatives is the incomplete modeling
of all application features in the current version of Waler.
For example, Waler only identiﬁes program checks in the
form of if -statements, but in real applications, checks can
be implemented using, for instance, database queries and
15
regular expressions. Precise modeling of such constructs
is left for future work.
The other way to evaluate the false negatives rate of
Waler would be to run it on an application that has some