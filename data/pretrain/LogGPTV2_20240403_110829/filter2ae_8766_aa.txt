历史内容：
  * 第一篇：
本篇主要聊一聊框架核心模块：规则体系。
## 0x01 写在前面
在上篇文章提到过，[xray](https://docs.xray.cool/#/guide/poc) 有着完善的规则体系，而且业内同志提交的 poc
积极性很高，所以更新较快，质量也很高，有很多值得借鉴之处。因此我想在 xray 规则的基础上设计一套规则体系，既能兼容 xray 的
poc，又能融入自己的一些想法。
xray poc 的运行原理，简单来说就是根据`自定义的规则`对`原始请求`变形，然后获取变形后的响应，再检查响应是否匹配规则中定义的表达式。
我认为这里有几个关键点：
  1. 原始请求来源
  2. 兼容 xray 现在规则
  3. 扩展 xray：组包时更细致的分类
## 0x02 原始请求来源
原始请求就是根据待检测目标构造 HTTP 请求包，构造原始包时通常有以下来源：
  1. url 。根据输入的 url 补充基础请求头，生成基础的 get http 请求，类似于`Burpsuite Repeater`的`Parse URL As Request`。
核心代码：
    func GenOriginalReq(url string) (*http.Request, error) {
        // 生成原始请求，如果没有协议默认使用http
        if strings.HasPrefix(url, "http://") || strings.HasPrefix(url, "https://") {
        } else {
            url = "http://" + url
        }
        originalReq, err := http.NewRequest("GET", url, nil)
        if err != nil {
            log.Error("util/requests.go:GenOriginalReq original request gen error", url, err)
            return nil, err
        }
        originalReq.Header.Set("Host", originalReq.Host)
        originalReq.Header.Set("Accept-Encoding", "gzip, deflate")
        originalReq.Header.Set("Accept","*/*")
        originalReq.Header.Set("User-Agent", conf.GlobalConfig.HttpConfig.Headers.UserAgent)
        originalReq.Header.Set("Accept-Language","en")
        originalReq.Header.Set("Connection","close")
        return originalReq, nil
    }
  1. 直接输入 http 报文文件。解析该文件，生成 http 请求，类似于`Burpsuite Repeater`的`Parse from file`。go 语言可使用原生 http 包的`http.ReadRequest`方法实现。
核心代码：
    func GenOriginalReqFromRaw(filePath string) (*http.Request, error)  {
        raw, err := ioutil.ReadFile(filePath)
        if err != nil {
            c.JSON(msg.ErrResp("请求报文文件解析失败"))
            return nil, err
        }
        oreq, err := http.ReadRequest(bufio.NewReader(bytes.NewReader(raw)))
        if err != nil {
            return nil, err
        }
        if !oreq.URL.IsAbs() {
            scheme := "http"
            oreq.URL.Scheme = scheme
            oreq.URL.Host = oreq.Host
        }
        return oreq, nil
    }
  1. 三是通过代理的形式监听获取（如 xray 浏览器代理模式）
## 0x03 兼容 xray
xray 的规则体系是基于 Common Expression Language ( cel 表达式) 实现的。Google 官方提供了 go 语言的
cel 包 [cel-go](https://github.com/google/cel-go)。通过向 cel
环境注入变量、方法，即可在该环境内动态的执行表达式，并返回 bool 型结果（符合 or 不符合）。
### cel表达式
运行 cel 表达式有三个过程：
  1. 构建 cel 环境。初始化一个 cel.Env
  2. 向 cel 环境中注入类型、方法。xray 规则所有的变量、方法，可参考[这里](https://docs.xray.cool/#/guide/poc?id=%e5%86%85%e9%83%a8%e5%8f%98%e9%87%8f%e4%b8%8e%e5%87%bd%e6%95%b0%e9%80%9f%e6%9f%a5)。为兼容 xray ，依照文档实现所有类型、方法（包括文档中未提及的 icontains 方法），[完整实现](https://github.com/jweny/pocassist/blob/master/pkg/cel/cel.go)。
  3. 计算表达式。计算表达式的逻辑很简单，传入表达式、cel 环境、以及要检测变量列表即可。对于 xray 来说，要检测的变量列表，除了注入到环境的几个类型（UrlType、Request、Response、Reverse）之外，还要考虑 [Set](https://docs.xray.cool/#/guide/poc?id=poc-%e7%bb%93%e6%9e%84) 中自定义的变量，表达式中使用 `{{}}`的部分需要替换成 Set 的 Value。[完整实现](https://github.com/jweny/pocassist/blob/master/pkg/cel/cel.go#L444)。
值得一提的是，set 中自定义的变量可能引用之前的变量，所以 set 一定是要有序加载的，，因此建议不要使用 go 的map 去保存 set（因为 map
是无序的）。可以使用`gopkg.in/yaml.v2`包的 `MapSlice`保存。
我们可以定一个 `cel controller` 去管理整个 cel
的生命周期，[完整实现](https://github.com/jweny/pocassist/blob/master/poc/rule/cel.go)。
### 构造请求
上面提到过， poc 的运行阶段，一共有两个请求：一是原始请求，二是根据规则构造的请求。
poc 规则直接决定了对原始请求如何变形。这里以 airflow 未授权访问漏洞的 poc 举例。
    name: poc-yaml-airflow-unauth
    rules:
      - method: GET
        path: /admin/
        expression: |
          response.status == 200 && response.body.bcontains(b"Airflow - DAGs") && response.body.bcontains(b"DAGs")
检测目标为`testphp.vulnweb.com/aaa/bbb.html` 时，原始请求就应该是：
    GET /aaa/bbb.html HTTP/1.1
    Host: testphp.vulnweb.com
    User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0
    Accept-Encoding: gzip, deflate
    Connection: close
根据 poc 规则，漏洞所在的 path 为`/admin`，如果airflow部署在二级目录`/aaa/`，那么
poc的请求就应该是`/aaa/admin`。规则中没有配置请求头，那么就使用原始请求的请求头。
xray 是以目录为单位进行扫描，因此 xray 变形后请求为：
    GET /aaa/admin/ HTTP/1.1
    Host: testphp.vulnweb.com
    User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0
    Accept-Encoding: gzip, deflate
    Connection: close
为了追求性能，尽可能的小内存占用，发起请求时，我使用了更高效的
[fasthttp](https://github.com/valyala/fasthttp) 替换掉原生的 http
包。因此定义了一个`*fasthttp.Request`去保存构造的 go 原生的 http对象。
[完整实现](https://github.com/jweny/pocassist/blob/master/poc/rule/request.go)
### 检测链控制
xray 的单个 [rule](https://docs.xray.cool/#/guide/poc?id=poc-%e7%bb%93%e6%9e%84)
的表达式返回值是一个bool 型结果（符合 or 不符合），这个结果作为整个 rule 的值，也就是对应了一个请求/响应。
通常来说一个 poc 是有多个请求和响应的检测链。xray 中定义了两种检测链格式。
一是 rules 。 rule 组成的有序列表（[]rule），值为 true 的 rule ，如果后面还有其他 rule ，则继续执行后续 rule
，如果后续没有其他 rule ，则表示该 poc 的结果是 true 。
二是 groups 。 rules 组成的列表`map[string]rules`，只要有一组 rules 执行成功，就认为该 poc 的结果为 true
。
所以原则上来说 groups 和 rules 只能存在一个。我这里才去的方式是先校验 groups 是否为空，非空才去执行rules。核心代码：
    func ExecExpressionHandle(ctx controllerContext){
        var result bool
        var err error
        poc := ctx.GetPoc()
        if poc == nil {
            log.Error("[rule/handle.go:ExecExpressionHandle error] ", "poc is nil")
            return
        }
        if poc.Groups != nil {
            result, err = ctx.Groups(ctx.IsDebug())
        } else {
            result, err = ctx.Rules(poc.Rules,ctx.IsDebug())
        }
        if err != nil {
            log.Error("[rule/handle.go:ExecExpressionHandle error] ", err)
            return
        }
        if result {
            ctx.Abort()
        }