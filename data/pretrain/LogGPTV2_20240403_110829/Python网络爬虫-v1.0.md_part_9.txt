第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 116
def parse(self, response):
filename = response.url.split("/")[-2]
open(filename, 'wb').write(response.body)
allow_domains 是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页。 从 parse 函
数可以看出，将链接的最后两个地址取出作为文件名进行存储。 然后运行一下看看，在 tutorial 目录下按住 shift
右击，在此处打开命令窗口，输入：
scrapy crawl dmoz
运行结果如图：
报错了：
UnicodeDecodeError: 'ascii' codec can't decode byte 0xb0 in position 1: ordinal not in range(128)
运行第一个 Scrapy 项目就报错，真是命运多舛。应该是出了编码问题，谷歌了一下找到了解决方案：
在 python 的 Lib\site-packages 文件夹下新建一个 sitecustomize.py：
import sys
sys.setdefaultencoding('gb2312')
再次运行，OK，问题解决了，看一下结果：
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 117
最后一句 INFO: Closing spider (finished)表明爬虫已经成功运行并且自行关闭了。 包含[dmoz]的行，那对应
着我们的爬虫运行的结果。 可以看到 start_urls 中定义的每个URL都有日志行。 还记得我们的 start_urls 吗？
http://www.dmoz.org/Computers/Programming/Languages/Python/Books
http://www.dmoz.org/Computers/Programming/Languages/Python/Resources
因为这些 URL 是起始页面，所以他们没有引用(referrers)，所以在它们的每行末尾你会看到 ( referer:  )。 在 parse 方法的作用下，两个文件被创建：分别是 Books 和 Resources，这两个文件中有 URL 的页
面内容。
那么在刚刚的电闪雷鸣之中到底发生了什么呢？ 首先，Scrapy 为爬虫的 start_urls 属性中的每个 URL 创建了
一个 scrapy.http.Request 对象 ，并将爬虫的 parse 方法指定为回调函数。 然后，这些 Request 被调度并执
行，之后通过 parse()方法返回 scrapy.http.Response 对象，并反馈给爬虫。
##
取
爬取整个网页完毕，接下来的就是的取过程了。光存储一整个网页还是不够用的。在基础的爬虫里，这一步可以
用正则表达式来抓。在 Scrapy 里，使用一种叫做 XPath selectors 的机制，它基于 XPath 表达式。 如果你想
了解更多 selectors 和其他机制你可以查阅资料：点我点我
这是一些 XPath 表达式的例子和他们的含义
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 118
• /html/head/title: 选择 HTML 文档  元素下面的  标签。
• /html/head/title/text(): 选择前面提到的  元素下面的文本内容
• //td: 选择所有  元素
• //div[@class="mine"]: 选择所有包含 class="mine" 属性的 div 标签元素
以上只是几个使用 XPath 的简单例子，但是实际上 XPath 非常强大。 可以参照 W3C 教程：点我点我。
为了方便使用 XPaths，Scrapy 提供 XPathSelector 类，有两种可以选择，HtmlXPathSelector(HTML 数据
解析)和 XmlXPathSelector(XML 数据解析)。必须通过一个 Response 对象对他们进行实例化操作。 你会发
现 Selector 对象展示了文档的节点结构。因此，第一个实例化的 selector 必与根节点或者是整个目录有关 。
在 Scrapy 里面，Selectors 有四种基础的方法（点击查看 API 文档）：
• xpath()：返回一系列的 selectors，每一个 select 表示一个 xpath 参数表达式选择的节点
• css()：返回一系列的 selectors，每一个 select 表示一个 css 参数表达式选择的节点
• extract()：返回一个 unicode 字符串，为选中的数据
• re()：返回一串一个 unicode 字符串，为使用正则表达式抓取出来的内容
##
xpath 实验
下面我们在 Shell 里面尝试一下 Selector 的用法。 实验的网址：http://www.dmoz.org/Computers/Program
ming/Languages/Python/Books/
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 119
熟悉完了实验的小白鼠，接下来就是用 Shell 爬取网页了。进入到项目的顶层目录，也就是第一层 tutorial 文件
夹下，在 cmd 中输入：
scrapy shell http://www.dmoz.org/Computers/Programming/Languages/Python/Books/
回车后可以看到如下的内容：
在 Shell 载入后，你将获得 response 回应，存储在本地变量 response 中。 所以如果你输入 response.bod
y，你将会看到 response 的 body 部分，也就是抓取到的页面内容：
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 120
或者输入 response.headers 来查看它的 header 部分：
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 121
现在就像是一大堆沙子握在手里，里面藏着我们想要的金子，所以下一步，就是用筛子摇两下，把杂质出去，选
出关键的内容。
selector 就是这样一个筛子。 在旧的版本中，Shell 实例化两种 selectors，一个是解析 HTML 的 hxs 变
量，一个是解析 XML 的 xxs 变量。
而现在的 Shell 为我们准备好的 selector 对象，sel，可以根据返回的数据类型自动选择最佳的解析方案(XML o
r HTML)。
然后我们来捣弄一下！~
要彻底搞清楚这个问题，首先先要知道，抓到的页面到底是个什么样子。 比如，我们要抓取网页的标题，也就是
 这个标签：
可以输入：
sel.xpath('//title')
结果就是：
这样就能把这个标签取出来了，用 extract()和 text()还可以进一步做处理。
备注：简单的罗列一下有用的 xpath 路径表达式：
表达式 描述
nodename 选取此节点的所有子节点。
/ 从根节点选取。
// 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。
. 选取当前节点。
.. 选取当前节点的父节点。
@ 选取属性。
全部的实验结果如下，In[i]表示第 i 次实验的输入，Out[i]表示第 i 次结果的输出（建议大家参照：W3C 教程）：
In [1]: sel.xpath('//title')
Out[1]: [Open Directory - Computers: Progr'>]
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 122
In [2]: sel.xpath('//title').extract()
Out[2]: [u'Open Directory - Computers: Programming: Languages: Python: Books']
In [3]: sel.xpath('//title/text()')
Out[3]: []
In [4]: sel.xpath('//title/text()').extract()
Out[4]: [u'Open Directory - Computers: Programming: Languages: Python: Books']
In [5]: sel.xpath('//title/text()').re('(\w+):')
Out[5]: [u'Computers', u'Programming', u'Languages', u'Python']
当然 title 这个标签对我们来说没有太多的价值，下面我们就来真正抓取一些有意义的东西。 使用火狐的审查元素
我们可以清楚地看到，我们需要的东西如下：
我们可以用如下代码来抓取这个  标签：
sel.xpath('//ul/li')
从  标签中，可以这样获取网站的描述：
sel.xpath('//ul/li/text()').extract()
可以这样获取网站的标题：
sel.xpath('//ul/li/a/text()').extract()
可以这样获取网站的超链接：
sel.xpath('//ul/li/a/@href').extract()
当然，前面的这些例子是直接获取属性的方法。 我们注意到 xpath 返回了一个对象列表， 那么我们也可以直接
调用这个列表中对象的属性挖掘更深的节点。
（参考：Nesting selectorsandWorking with relative XPathsin theSelectors）：
sites = sel.xpath('//ul/li')
for site in sites:
title = site.xpath('a/text()').extract()
link = site.xpath('a/@href').extract()
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 123
desc = site.xpath('text()').extract()
print title, link, desc
##
xpath 实战
我们用 shell 做了这么久的实战，最后我们可以把前面学习到的内容应用到 dmoz_spider 这个爬虫中。
在原爬虫的 parse 函数中做如下修改：
from scrapy.spider import Spider
from scrapy.selector import Selector
class DmozSpider(Spider):
name = "dmoz"
allowed_domains = ["dmoz.org"]
start_urls = [
"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
]
def parse(self, response):
sel = Selector(response)
sites = sel.xpath('//ul/li')
for site in sites:
title = site.xpath('a/text()').extract()
link = site.xpath('a/@href').extract()
desc = site.xpath('text()').extract()
print title
注意，我们从 scrapy.selector 中导入了 Selector 类，并且实例化了一个新的 Selector 对象。这样我们就可以
像 Shell 中一样操作 xpath 了。
我们来试着输入一下命令运行爬虫（在 tutorial 根目录里面）：
scrapy crawl dmoz
运行结果如下：
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 124
果然，成功的抓到了所有的标题。但是好像不太对啊，怎么 Top，Python 这种导航栏也抓取出来了呢？ 我们只
需要红圈中的内容：
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 125
看来是我们的 xpath 语句有点问题，没有仅仅把我们需要的项目名称抓取出来，也抓了一些无辜的但是 xpath 语
法相同的元素。审查元素我们发现我们需要的  具有 class='directory-url' 的属性， 那么只要把 xpath 语
句改成 sel.xpath('//ul[@class="directory-url"]/li') 即可 将 xpath 语句做如下调整：
from scrapy.spider import Spider
from scrapy.selector import Selector
class DmozSpider(Spider):
name = "dmoz"
allowed_domains = ["dmoz.org"]
start_urls = [
"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
]
def parse(self, response):
sel = Selector(response)
sites = sel.xpath('//ul[@class="directory-url"]/li')
for site in sites:
title = site.xpath('a/text()').extract()
link = site.xpath('a/@href').extract()
desc = site.xpath('text()').extract()
print title
成功抓出了所有的标题，绝对没有滥杀无辜：
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 126
##
使用 Item
接下来我们来看一看如何使用 Item。前面我们说过，Item 对象是自定义的 python 字典，可以使用标准字典语法
获取某个属性的值：
>>> item = DmozItem()
>>> item['title'] = 'Example title'
>>> item['title']
'Example title'
作为一只爬虫，Spiders 希望能将其抓取的数据存放到 Item 对象中。为了返回我们抓取数据，spider 的最终代
码应当是这样:
from scrapy.spider import Spider
from scrapy.selector import Selector
from tutorial.items import DmozItem
class DmozSpider(Spider):
name = "dmoz"
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 127
allowed_domains = ["dmoz.org"]
start_urls = [
"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
]
def parse(self, response):
sel = Selector(response)
sites = sel.xpath('//ul[@class="directory-url"]/li')
items = []
for site in sites:
item = DmozItem()
item['title'] = site.xpath('a/text()').extract()
item['link'] = site.xpath('a/@href').extract()
item['desc'] = site.xpath('text()').extract()
items.append(item)
return items
第 12 章 爬虫框架 Scrapy 的第一个爬虫示例入门教程 | 128
##
存储内容（Pipeline）
保存信息的最简单的方法是通过Feed exports，主要有四种：JSON，JSON lines，CSV，XML。 我们将结
果用最常用的 JSON 导出，命令如下：
scrapy crawl dmoz -o items.json -t json
-o 后面是导出文件名，-t 后面是导出类型。 然后来看一下导出的结果，用文本编辑器打开 json 文件即可（为了
方便显示，在 item 中删去了除了 title 之外的属性）：
因为这个只是一个小型的例子，所以这样简单的处理就可以了。 如果你想用抓取的 items 做更复杂的事情，你可
以写一个 Item Pipeline(条目管道)。 这个我们以后再慢慢玩^_^
更多信息请访问
http://wiki.jikexueyuan.com/project/python-crawler/