modiﬁed to take into account the “border k-gram”. This is further discussed in
Section 5.1.
4 IDS Enhancements Using Privilege and Argument
Abstraction
We now consider a simple gray-box enhancement to an IDS which can either
prevent or make mimicry attacks more diﬃcult. To simplify the discussion and
evaluation, we will only apply the enhancement to the baseline self-based IDS
which use system call numbers in the k-grams [1, 2, 3].
154
Sufatrio and R.H.C. Yap
4.1 Using Arguments and Privileges
In Unix, every process environment contains credentials which are evaluated
by the access control mechanism when the process makes a system call. The
credentials which determine the current privileges of a process are its eﬀective
user-id (euid) and eﬀective group-id (egid). The euid (egid) is either the actual
real uid (gid) of the user, or it has been changed by invoking a setuid (setgid)
executable. So, euid and egid are simply a subset of all the user and group-id
values deﬁned in a system.
We propose to enhance k-gram to include not only the system number but also
(abstracted) information about the euid, egid and system call arguments. It is
common for attacks to try and exploit programs executing in a privileged mode.
The idea is that such attacks can be detected if the corresponding system call
subtraces are unprivileged in the normal trace(s). A program which conforms to a
good setuid programming practice generally drops privileges as soon as possible.
Rather than using the actual values, we abstract the euid, egid and system call
arguments into categories based on a conﬁguration speciﬁcation. This is mainly
to reduce the false positive rate which can be higher since the space of values
is much greater. The abstraction technique also provides ﬂexibility for us to
group arguments and privileges together in terms of their importance/sensitivity
level.
Formally, we can represent the privilege and argument categorization in the
set of natural numbers).
operating system model with the following mapping functions:
– Function EuidCat : U → U
– Function EgidCat : G → G
– For each s ∈ S with S = the set of system call numbers, function ArgCats :
As,1 × As,2 × . . . × As,max arg → Cs, where As,i for i ∈ [1..max arg]= the
set of possible entries for i-th argument of the system call s, and Cs ⊂ N.
Note that it is also possible to omit some arguments, i.e. with wildcards.
(cid:4), where: U = the set of euid and U
(cid:4), where: G = the set of egid and G
(cid:4) ⊂ N (the
(cid:4) ⊂ N.
As mentioned previously, we can treat the IDS as a FSA model. In the basic
self-based IDS, the alphabet was over the system call numbers S, while in the
s∈S Cs. Note
extension, the alphabet is now a tuple U
that while we have focused on Unix, the approach extends to other operating
systems.
(cid:4)× S× C where C =
(cid:4)× G
(cid:8)
4.2 A Simple Category Speciﬁcation Scheme
We now give a simple scheme for deﬁning the abstraction and categories. The
category speciﬁcation is constructed by taking into account the importance or
sensitivity level of ﬁles/directories in the underlying OS from the security stand-
point. The main goal of the speciﬁcation is to separate operations which have
potential security risks from the benign ones.
Improving Host-Based IDS with Argument Abstraction
155
A fragment of an example speciﬁcation is as follows:
# EUID Abstraction
# Format: :,,...
0:0
1:2000,2001,2003
100:*
# EGID Abstraction
# Format: :,,...
0:0
1:1,2,3,5
100:*
# Argument Abstraction
# Format:    , ... 
open p=/etc/passwd o=O WRONLY|o=O RDRW * 1
open p=/etc/shadow o=O WRONLY|o=O RDRW * 2
open * * * 18
chmod p=/etc/{passwd,shadow,group,hosts.equiv}|p=/proc/kmem * - 1
# Illegal Transitions Section
# Format:   [, ]* ...
open [1..6,8-11,13-15] 0,* *,0
{chmod,fchmod,chown,fchown,lchown,mknod,unlink} 1 0,* *,0
The example consists of four sections: euid, egid, argument categorization and
illegal transitions. This example is only meant to be illustrative.
Privilege Abstraction. The euid and egid section are meant to provide the
actual value mapping for EuidCat : U → U
(cid:4). The
example speciﬁcation uses the following syntax for euid and egid:
(cid:4) and EgidCat : G → G
where u
(cid:4)
i
∈ U
(cid:4), uij ∈ U, g
(cid:4)
i
(cid:14)u
(cid:15) : (cid:14)ui1(cid:15),(cid:14)ui2(cid:15), . . . ,(cid:14)uin(cid:15);
(cid:4)
(cid:15) : (cid:14)gi1(cid:15),(cid:14)gi2(cid:15), . . . ,(cid:14)gin(cid:15);
(cid:14)g
(cid:4)
i
i
∈ G
(cid:4) and gij ∈ G.
To ensure that EuidCat (EgidCat) is a total mapping, a special entry “*”
is employed to indicate other euids (egids) so that the mapping satisﬁes the
requirement for a function. As euid=0 and egid=0 signify important privileges
in Unix, each of them has a distinguished mapping.
Argument Abstraction. The speciﬁcation is a straightforward one. It maps
the system call together with its corresponding arguments (deﬁned in an ar-
gument speciﬁc fashion, i.e. understands pathnames for open) into a number
(its category). One point to note that while it is possible to have more com-
plex abstractions, we have found it suﬃcient to only use a single abstract value
to represent multiple arguments. We now brieﬂy discuss some considerations in
creating a deﬁnition:
– The approach we have used is to focus the speciﬁcation to a subset of sys-
(cid:4) ⊂ S which should be checked in order to prevent attacks aimed
tem calls S
156
Sufatrio and R.H.C. Yap
Other system calls in S − S
at gaining full control of the system. Our choice for the system call subset
(cid:4) is based on the work of Bernaschi et al. [18] which classiﬁes Unix sys-
S
tem calls according to their threat level with respect to system penetration.
(cid:4) to be the system calls in Threat-Level 1 Category of
Here, we consider S
[18], namely: open, chmod, fchmod, chown, fchown, lchown, rename, link,
unlink, symlink, mount, mknod, init module and execve.
(cid:4), which have not been deﬁned in the speciﬁ-
cation are mapped to a unique default value. We do not address the issues
raised by the system calls in Threat-Level 2 (can be used for a denial of ser-
vice) and 3 (can be used for subverting the invoking process) as otherwise we
might need a richer IDS model which can also deal with issues such as: mem-
ory/storage consumption metering, ﬁle access pattern, etc, which are beyond
the scope of this paper. One advantage of the system call subset, which is
approximately 10% of the total number of system calls, is that it reduces
monitoring overheads which is important when the IDS is run on-line.
Bernaschi et al. also groups setuid/setgid system call family into the
Threat 1 list. However, we take a diﬀerent approach here in that we cap-
ture the eﬀect of the setuid/setgid system call family as changes in process
credential values –in the form of (euid,egid) pairs– to form part of the state
information in our enhanced IDS model.
(cid:4) ∈ S
– Given a system call s
(cid:4), a simple approach for the choice of abstraction
is to ensure that any critical operations on security-sensitive objects are
mapped to a value diﬀerent from a normal one.
– It is convenient, when specifying the abstractions and categories to make use
of sequential matching from the start to the end of the deﬁnition. In this
fashion, more speciﬁc mappings can be made ﬁrst and the most general ones
last. This is similar to the ordering in ﬁrewall conﬁguration ﬁles.
– Pathnames require special treatment and we use a special notation,
p=.
Because pathnames in Unix are not unique, they have to be made canonical
by turning them into a normalized absolute pathname (see also [15]).
4.3 Disallowing Transitions
It is also useful to specify the transitions that can lead to “bad states”. The
idea is to identify those singleton system calls with the corresponding privileges
which can be suﬃcient to compromise the system’s security. An example would
be the operation of chown() on /etc/passwd with root privileges. Thus, the
usual way of measuring anomaly signal by means of LFC function as in [2] is not
adequate. This can also be used as an enhancement to access control to actually
deny such a system call invocation in a program.
Our category speciﬁcation deﬁnes bad transitions as:
(cid:4) are
where c is the abstracted value for the arguments of system call s
the abstracted privileges for user and group. Let D0 be the set of bad transitions.
(cid:4) and g
(cid:4), u
(cid:4)
s
c
(cid:4)
[u
, g
(cid:4)]∗
Improving Host-Based IDS with Argument Abstraction
157
This speciﬁcation may be too strict and needs to be adjusted with respect to
the normal traces. When the normal proﬁle is extracted from the normal trace
dataset, we collect in the set DN , those transitions from D0 which match against
normal traces. The ﬁnal adjusted negative transitions are D = D0−DN . The IDS
detection then concludes that any system call in an execution trace matching
an illegal transition d ∈ D constitutes an intrusion. In addition, we may also
prevent the operation itself.
5 Experimental Results
We present the construction of the shortest stealthy attacks on the two variations
of self-based IDS and our improved IDS. The three IDS variants are given in
Table 1. In Tables 2 to 4, a dash (–) indicates that no stealthy attack could
be constructed. We then experiment with our improved IDS against various
mimicry attack strategies and investigate its false-positive rate.
The category speciﬁcation used in these experiments uses the system call
subset discussed in Section 4. For the choice of arguments, from the Table 4
(cid:4) are
in [18], we can see that the dangerous arguments for system calls in S
mainly ﬁles/directories. Garﬁnkel and Spaﬀord (Appendix B) [19] gives a com-
prehensive list of security sensitive and important ﬁles/directories that one
might want to consider monitoring in Unix. In the experiments, we have used
a sample generic conﬁguration with several ﬁles which are security critical
in the Unix/Linux environment: user and group related ﬁles (/etc/passwd,
/etc/shadow, /etc/group), kernel memory device (/proc/kmem), and system
conﬁguration ﬁles (/etc/hosts.equiv). We have omitted for simplicity most of
the system conﬁguration ﬁles in /etc (such as: /etc/inetd.conf, /etc/hosts,
/etc/cron/*) and devices ﬁles in /dev. We have however included entries for
various directories commonly found in the Unix/Linux ﬁle system hierarchy con-
forming to the Filesystem Hierarchy Standard (http://www.pathname.com/fhs
/pub/fhs-2.3.html). While one can use a more detailed speciﬁcation, this is
already suﬃcient to show an increase in IDS robustness.
Table 1. IDS models used in mimicry attack construction
IDS Model Remark
IDS-1
IDS-2
IDS-3
Self-based IDS with normal proﬁle stored as a set of k-grams [1, 2]
Self-based IDS with normal proﬁle stored as a graph of k-grams
(with only direct edges allowed)
Our improved IDS with normal proﬁle as a set of k-grams
5.1 Attack Construction: Baseline vs Improved Self-based IDS
We extend the attack construction algorithm to also work with our improved
IDS model. This is easily done since it just increases the amount of state per
node in the graph with the euid, egid and argument category value.
158
Sufatrio and R.H.C. Yap
Our automatic attack construction is implemented in C on a PC with a Pen-
tium 4 processor (1.82 GHz) with 256 MB of RAM running Redhat Linux. We
have used also various older versions of the Redhat Linux distribution so as to be
able to run the traces corresponding to older versions of programs together with
their exploits. The traces are captured in Linux by using the strace utility. For
simplicity, we have removed system calls which are related to signal events such
as SIGALRM, SIGCHLD, etc. due to their asynchronous nature. In addition, we
have purposely set the euid and egid value of all system call entries in the normal
trace to 0. This is to provide the worst-case condition for attacks to occur, i.e.
we assume a poorly written setuid program.
Remarks on the Exploits Used. As our objective is to investigate the prac-
ticality of automated attack construction, we experiment with real programs
using existing real exploits. Here, we have considered two attack scenarios: (i)
buﬀer-overﬂow scenario: where we can replace the shellcode of a buﬀer-overﬂow
exploit with a code sequence executing a stealthy attack trace; and (ii) direct
attack: which might be the result of replacing the program by a trojan which
then executes a stealthy trace to fool the IDS.
The following remarks apply to our experiments:
– The three exploits make use of execve() system call to spawn a root shell.
However, execve() is not present in the normal trace. Therefore, we use
an alternative strategy to write an entry to the ﬁle “/etc/shadow”. This
actually corresponds to Attack-strategy A2 from our list of strategies shown in
Section 5.2. This particular attack strategy is chosen for detailed comparison
here as it has been used for mimicry attacks in self-based IDS (e.g. see [6]).
We remark that it is perfectly all right to modify the original attack since
we assume an intelligent adversary.
– In the buﬀer-overﬂow case, there is another constraint that the stealthy
attack trace must be introduced at the “attack-introduction point” or “point
of seizure”. Hence, we need to manually determine this point and make note
of the k system calls before the attack point, which we call a border k-gram.
Given this, we need to ensure that the concatenation of border k-gram and
the stealthy attack trace still passes the IDS. Thus, we need to slightly modify
the search algorithm as follows: (i) the border k-gram must be included as
an additional input which will then deﬁne the associated border-node in V ;
and (ii) the ﬁrst-level nodes in V are explored during the search only if they
are connected to the border node (and with path length > k − 1).
Traceroot2 (Traceroute Exploit). This traceroute exploit is the one previ-
ously used in [6]. It is available at: http://www.packet-stormsecurity.org/
0011-exploits/traceroot2.c. The exploit attacks LBNL Traceroute v1.4a5
which is included in the Linux Redhat 6.2 distribution.
The original attack sequence is: setuid(0),setgid(0), execve("/bin/sh").
This is changed into: open(),write(), close(), exit(). The result of the attack
construction on normal traces generated from three Traceroute’s sessions (with a
Improving Host-Based IDS with Argument Abstraction
159
Table 2. Attack construction for Traceroute with k=5–11 (2,789 Sys-calls in Normal)
k=5 k=6 k=7 k=8 k=9 k=10 k=11
Traceroute Search Result
Resulting Length of Stealthy Attack Trace:
IDS-1 (Buﬀer-Overﬂow Case)
IDS-2 (Buﬀer-Overﬂow Case)
IDS-3 (Buﬀer-Overﬂow Case)
IDS-1 (Direct-Attack Case)
IDS-2 (Direct-Attack Case)
IDS-3 (Direct-Attack Case)
Average Search Time (User+Sys) 0.170s 0.210s 0.250s 0.300s 0.460s 0.388s 0.340s
64
116
−
51
54
−
112
116
−
54
54
−
116
125
−
54
56
−
46
48
−
41
43
−
48
48
−
45