把自定义的异常处理程序的地址链接到这个异常处理指针链里。在注册异常处理程序时，需要使用一种名
为_EXCEPTION_REGISTRATION 的数据结构。它其实只是一个简单的单向链表，使用栈结构存储各项节
点的链数据。 
指令清单 68.1  MSVC/VC/crt/src/exsup.inc 
\_EXCEPTION\_REGISTRATION struc 
     prev     dd       ? 
     handler dd       ? 
\_EXCEPTION\_REGISTRATION ends 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
678 
逆向工程权威指南（下册） 
可见，每个节点的“handler”都是一个异常处理程序的启始地址，每个节点的“prev”字段都是上一
个节点的地址指针。而最后一个节点的“prev”字段的值为 0xFFFFFFFF(-1)。 
在注册好我们自定义的异常处理程序以后，我们调用 RaiseException()函数、触发用户异常的处理过程。
异常处理程序首先检查异常代码，如果异常代码是 0xE1223344，它就返回 ExceptionContinueExecution。这
个返回值代表“已经纠正 CPU 的状态”（通常通过调整 EIP/ESP 寄存器实现）、“操作系统可以继续执行后
续指令”。如果把异常代码修改为其他值，那么处理函数的返回值则会变为 ExceptionContinueSearch。顾名
思义， 操作系统就会逐一尝试其他的异常处理程序—万一没有找到有关问题（并不仅仅是错误代码）的异
常处理程序，我们就会看到标准的 Windows 进程崩溃对话框。 
系统异常（system exceptions）和用户异常（user exceptions）之间的区别是什么？系统异常的有关信
息是： 
由 WinBase.h 定义的异常状态 
在 ntstatus.h 里的相应状态 
错误编号 
EXCEPTION_ACCESS_VIOLATION 
STATUS_ACCESS_VIOLATION 
0xC0000005 
EXCEPTION_DATATYPE_MISALIGNMENT 
STATUS_DATATYPE_MISALIGNMENT0x80000002 
EXCEPTION_BREAKPOINTSTATUS_ 
BREAKPOINT0x80000003 
EXCEPTION_SINGLE_STEP 
STATUS_SINGLE_STEP 
0x80000004 
EXCEPTION_ARRAY_BOUNDS_EXCEEDED 
STATUS_ARRAY_BOUNDS_EXCEEDED 
0xC000008C 
EXCEPTION_FLT_DENORMAL_OPERAND 
STATUS_FLOAT_DENORMAL_OPERAND 
0xC000008D 
EXCEPTION_FLT_DIVIDE_BY_ZERO 
STATUS_FLOAT_DIVIDE_BY_ZERO 
0xC000008E 
EXCEPTION_FLT_INEXACT_RESULT 
STATUS_FLOAT_INEXACT_RESULT 
0xC000008F 
EXCEPTION_FLT_INVALID_OPERATION 
STATUS_FLOAT_INVALID_OPERATION 
0xC0000090 
EXCEPTION_FLT_OVERFLOW 
STATUS_FLOAT_OVERFLOW 
0xC0000091 
EXCEPTION_FLT_STACK_CHECK 
STATUS_FLOAT_STACK_CHECK 
0xC0000092 
EXCEPTION_FLT_UNDERFLOW 
STATUS_FLOAT_UNDERFLOW 
0xC0000093 
EXCEPTION_INT_DIVIDE_BY_ZERO 
STATUS_INTEGER_DIVIDE_BY_ZERO 
0xC0000094 
EXCEPTION_INT_OVERFLOW 
STATUS_INTEGER_OVERFLOW 
0xC0000095 
EXCEPTION_PRIV_INSTRUCTION 
STATUS_PRIVILEGED_INSTRUCTION 
0xC0000096 
EXCEPTION_IN_PAGE_ERROR 
STATUS_IN_PAGE_ERROR 
0xC0000006 
EXCEPTION_ILLEGAL_INSTRUCTION 
STATUS_ILLEGAL_INSTRUCTION 
0xC000001D 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
679 
续表 
as defined in WinBase.h 
as defined in ntstatus.h 
numerical value 
EXCEPTION_NONCONTINUABLE_EXCEPTION 
STATUS_NONCONTINUABLE_EXCEPTION 
0xC0000025 
EXCEPTION_STACK_OVERFLOW 
STATUS_STACK_OVERFLOW 
0xC00000FD 
EXCEPTION_INVALID_DISPOSITION 
STATUS_INVALID_DISPOSITION 
0xC0000026 
EXCEPTION_GUARD_PAGE 
STATUS_GUARD_PAGE_VIOLATION 
0x80000001 
EXCEPTION_INVALID_HANDLE 
STATUS_INVALID_HANDLE 
0xC0000008 
EXCEPTION_POSSIBLE_DEADLOCK 
STATUS_POSSIBLE_DEADLOCK 
0xC0000194 
CONTROL_C_EXIT 
STATUS_CONTROL_C_EXIT 
0xC000013A 
32 位错误代码的具体含义，如下图所示。 
S 是最高的两位（第 30、31 位），为 基本的状态代码，一共有 4 种组合，分别是 11、10、01 以及 00。
它们分别代码的意义是：11 代表错误，10 代表警告，01 代表信息，00 代表成功。 
U 是第 29 位（第 29 位），它只有 0 和 1 两种状态，代表该异常是否属于用户侧异常。 
上面我们提到的一个返回值是 0xE1223344。最高的 4 位是 0xE（1110）。这几个比特位代表：①这
是属于用户态异常；②这是一个错误信息。实事求是地讲，本例这个程序与这些最高位的值没有关系；
而考究的异常处理程序应当能够充分利用错误代码的所有信息。 
接着，程序试图读取地址为 0 的内存数据。这个地址实际就是 NULL 指针指向的地址。访问这个地址
必将导致系统错误，因为根据 ISO C 标准这个地址不应当存放任何数据（硬性规定）。此时操作系统会优
先调用程序自己注册的异常处理程序。后者会判断错误代码是否为 EXCEPTION_ACCESS_VIOLATION，
从而得知该异常是否是自己可以处理的问题。 
读取地址为 0 的指令大致如下： 
指令清单 68.2  MSVC2010  
        ... 
        xor  
eax, eax 
        mov  
eax, DWORD PTR [eax] ; exception will occur here 
        push  
eax 
        push  
OFFSET msg 
        call  
_printf 
        add  
esp, 8 
        ... 
我们的程序是不是可以实时处理这个错误以使得程序能继续执行呢？答案是肯定的。我们的异常处理程
序能够修正 EAX 寄存器的值，让操作系统继续执行下去。这就是自定义异常处理程序的功能。字符串显示
函数 printf 显示的数值是 1234，因为执行了我们的异常处理函数之后，EAX 的数值不再是 0 了，而是全局变
量 new_value 的值。因此执行流程就得到了恢复。 
以下就是程序执行的步骤：首先内存管理器检测出由中央处理器 CPU 发出的错误信息，接着 CPU 将
此进程挂起，并在 Windows 的内核中检索异常处理程序的句柄。然后依次调用 SEH 链的 handler。 
本例是由 MSVC 2010 编译的程序。当然，我们并不能保证其他的编译程序同样会使用 EAX 寄存
器存放该指针。 
它所演示的地址替换技巧非常的精妙。我经常使用这种技术演示 SEH 的内部构造。不过，我还不曾使
用这种技巧实时修复异常错误。 
为什么 SEH 相关的记录存储于栈，而不是其他的地方？据说，如此一来操作系统就不需要关心这类数
据的释放操作，毕竟函数结束以后这些数据都会被自动释放。但是，笔者也不难 100%保证这种假说的正确
异步社区会员 dearfuture(15918834820) 专享 尊重版权
680 
逆向工程权威指南（下册） 
性。这有点像本书 5.2.4 节讲到的 alloca()函数。 
68.3.2  让我们重新回到 MSVC 
据说，C++语言开发环境已经能够稳妥的处理各种异常情况，只有 C 语言的开发人员才需要关注代码
的异常处理机制。所以微软推出了一个面向 MSVC 的非标准 C 扩展。这个扩展组件不适用于 C++程序。  
有关详情请参阅：https://msdn.microsoft.com/en-us/library/swezty51.aspx 
__try 
{ 
    ... 
} 
__except(filter code) 
{ 
    handler code 
}  
除了“try-except”语句之外，MSVC 还支持“try-finally”语句： 
__try 
{ 
    ... 
} 
__finally 
{ 
    ... 
}  
前者中的“filter code”是一个用来判断是否执行“handler code（响应指令）”的表达式。如果代码太
长、无法表示为一个表达式，那么就得借助于独立的过滤函数。 
Windows 内核就大量使用这种 SEH 结构。以 WRK（Windows Research Kernel）的某段指令为例:  
指令清单 68.3  WRK-v1.2/base/ntos/ob/obwait.c 
try { 
    KeReleaseMutant( (PKMUTANT)SignalObject, 
                     MUTANT_INCREMENT, 
                     FALSE, 
                     TRUE ); 
} except((GetExceptionCode () == STATUS_ABANDONED || 
          GetExceptionCode () == STATUS_MUTANT_NOT_OWNED)? 
             EXCEPTION_EXECUTE_HANDLER : 
             EXCEPTION_CONTINUE_SEARCH) { 
    Status = GetExceptionCode(); 
    goto WaitExit; 
}  
指令清单 68.4  WRK-v1.2/base/ntos/cache/cachesub.c 
try { 
    RtlCopyBytes( (PVOID)((PCHAR)CacheBuffer + PageOffset), 
                  UserBuffer, 
                  MorePages ? 
                    (PAGE_SIZE - PageOffset) : 
                    (ReceivedLength - PageOffset) ); 
} except( CcCopyReadExceptionFilter( GetExceptionInformation(), 
                                                            &Status ) ) { 
下面也是一组过滤代码。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
681 
指令清单 68.5  WRK-v1.2/base/ntos/cache/copysup.c 
LONG 
CcCopyReadExceptionFilter( 
    IN PEXCEPTION_POINTERS ExceptionPointer, 
    IN PNTSTATUS ExceptionCode 
    ) 
/*++ 
Routine Description: 
    This routine serves as a exception filter and has the special job of 
    extracting the "real" I/O error when Mm raises STATUS_IN_PAGE_ERROR 
    beneath us. 
Arguments: 
    ExceptionPointer - A pointer to the exception record that contains 
                       the real Io Status. 
    ExceptionCode - A pointer to an NTSTATUS that is to receive the real 
                    status. 
Return Value: 
    EXCEPTION_EXECUTE_HANDLER 
--*/ 
{ 
    *ExceptionCode = ExceptionPointer->ExceptionRecord->ExceptionCode; 
    if ( (*ExceptionCode == STATUS_IN_PAGE_ERROR) && 
         (ExceptionPointer->ExceptionRecord->NumberParameters >= 3) ) { 
        *ExceptionCode = (NTSTATUS) ExceptionPointer->ExceptionRecord->ExceptionInformation[2]; 
    } 
    ASSERT( !NT_SUCCESS(*ExceptionCode) ); 
    return EXCEPTION_EXECUTE_HANDLER; 
}  
从内部来讲，SEH 是由操作系统支持的异常处理扩展。但是异常处理函数属于_except_handler3（SEH3）
或_except_handler4（SEH4）。而且响应代码依赖于 MSVC 编译器。它需要由 MSVC 的库文件或者 msvcr*.dll
的动态链接库提供支持。SEH 是由 MSVC 提供的一种机制，这一点至关重要。其他 Win32 的编译器的异
常响应机制可能与 SEH 完全不同。 
SEH3 
SEH3 定义了一个_except_handler3 的异常处理函数，而且还对_EXCEPTION_REGISTRATION 表进行
了扩充、添加了 scope table 和 previous try level 的指针。在此基础上，SEH4 对 scope table 表添加了四个值，
以实现缓冲溢出保护。 
scope table 是一个表，它的元素都由 filter 表达式和 handler code 块的指针构成。这个表可以正确处理
带有嵌套关系的多级 try/except 语句。  
本书再次强调，操作系统只关心 SEH 里各节点的 prev 字段和 handle 字段，从不关心任何其他数
据。函数_except_handler3 的作用是读取其他的字段以及 scope 表的数值，并且判断什么时间执行哪个
异常处理函数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
682 
逆向工程权威指南（下册） 
函数_except_handler3 的源代码并不公开。然而，Sanos 操作系统（与 Win32 系统部分兼容），再现
了这个函数。在某种程度上说，由 Sanos 实现的_except_handler3 与 Windows 系统的同名函数十分相似（请
参阅其源文件/src/win32/msvcrt/except.c）。除此以外，Wine 平台和 ReactOS 系统也开发了类似的函数。 
如果 filter 指针是空指针 NULL，那么 handler 指针将指向“finally”所在的代码块。 
在执行过程中，堆栈中的 previous try level 改变了，因此函数_except_handler3 能从目前的嵌套中获取
信息，目的是知道使用哪个 scope table 表。 
执行期间，栈中的 previous try level 字段将会发生变化。_except_handler3 根据这项数据获取当前嵌套
级的信息，进而判断要使用 scope table 中的哪个表项。每一个 try 块都分配了一个唯一的数作为标识，
scopetable 表中条目（entry）间的关系则描述了 try 块的嵌套关系。 
SEH3: 一个 try/except 块的例子 
#include  
#include  
#include  
int main() 
{ 
    int* p = NULL; 
    __try 
    { 
        printf("hello #1!\n"); 
        *p = 13; // causes an access violation exception; 
        printf("hello #2!\n"); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
683 
    } 
    __except(GetExceptionCode()==EXCEPTION_ACCESS_VIOLATION ? 
            EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) 
    { 
        printf("access violation, can't recover\n"); 
    } 
}  
指令清单 68.6  MSVC 2003 
$SG74605 DB  
'hello #1!', 0aH, 00H 
$SG74606 DB  
'hello #2!', 0aH, 00H 
$SG74608 DB  
'access violation, can''t recover', 0aH, 00H 
_DATA     ENDS 
; scope table: 
CONST      SEGMENT 
$T74622    DD 
0ffffffffH    ; previous try level 
            DD 
FLAT:$L74617 ; filter 
           DD 
FLAT:$L74618 ; handler 
CONST     ENDS 
_TEXT     SEGMENT 
$T74621 = -32 ; size = 4 
_p$ = -28      ; size = 4 
__$SEHRec$ = -24 ; size = 24 
_main      PROC NEAR 
    push   ebp 
    mov  
 ebp, esp 
    push   -1   
; previous try level 
    push   OFFSET FLAT:$T74622  
; scope table 
    push   OFFSET FLAT:__except_handler3 ; handler 
    mov  
 eax, DWORD PTR fs:__except_list 
    push   eax   
; prev 
    mov 
 DWORD PTR fs:__except_list, esp 
    add 
 esp, -16 
; 3 registers to be saved: 
    push   ebx 
    push   esi 
    push 
 edi 
    mov 
 DWORD PTR __$SEHRec$[ebp], esp 
    mov 
 DWORD PTR _p$[ebp], 0 
    mov 
 DWORD PTR __$SEHRec$[ebp+20], 0 ; previous try level 
    push 