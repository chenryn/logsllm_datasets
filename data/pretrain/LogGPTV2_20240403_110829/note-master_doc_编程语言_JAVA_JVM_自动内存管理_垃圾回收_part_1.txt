# 垃圾回收
> 一个跟踪过程，它传递性地跟踪指向当前使用的对象的所有指针，以便找到可以引用的所有对象，然后重新使用在此跟踪过程中未找到的任何堆内存。公共语言运行库垃圾回收器还压缩使用中的内存，以缩小堆所需要的工作空间
- 回收什么
- 何时回收
- 如何回收
## JAVA对象生命周期
### 内存回收API
- Object的finalize方法，垃圾收集器在回收对象时调用，有且仅被调用一次
   - 如果覆写了该方法的对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()
方法
- System的gc方法。不靠谱
## 内存分配与回收
### Minor GC 和 Full GC
- Minor GC（Young GC）:回收新生代，这种类型的GC执行很频繁，执行速度也很快
  - 当 Eden 空间满时，就将触发一次 Minor GC
- Full GC（Major GC）：回收老年代和新生代，这种GC执行一般比较少，执行速度慢
  - System.gc()会建议虚拟机去触发Full GC,但只是建议
  - 老年代空间不足的情况下，也会进行Full GC
  -  CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足，会触发 Full GC
### 内存分配策略
```mermaid
graph LR
  start -- new --> A{栈?}
  A --> |Y| 栈
  A --> |N| B{大?}
  B --> |Y| O
  B --> |N| C{TLAB?}
  C --> |Y| E
  C --> |N| E
  E --> D{GC清除?}
  D --> S1
  S1 --> D
  S1 --> F{Age?}
  F --> |Y| O
  F --> |N| S2
  S2 --> D
  D --> |Y| 结束
  O -- fgc --> 结束
  栈 -- pop --> 结束
```
- 对象优先在Eden上分配
```java
// -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8
public class AllocationWithEden {
    private static final int _1MB = 1024 * 1024;
    public static void main(String[] args) {
        byte[] allocation1, allocation2, allocation3, allocation4;
        allocation1 = new byte[2 * _1MB];
        allocation2 = new byte[2 * _1MB];
        allocation3 = new byte[2 * _1MB];
        allocation4 = new byte[4 * _1MB]; // 出现一次Minor GC
    }
}
```
- 为避免在 Eden 和 Survivor 之间的大量内存复制，大对象的内存直接在老年代
  - `-XX:PretenureSizeThreshold`
```java
/**
 * -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8
 */
public class LargeObjectWithOld {
    public static void main(String[] args) {
        byte[] allocation;
        allocation = new byte[8 * 1024*1024]; // //直接分配在老年代中
    }
}
```
- 长期存活的对象进入老年代
  - `-XX:MaxTenuringThreshold` 用来定义年龄的阈值
```java
/**
 * -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=1
 */
public class OldObjectWithOld {
    private static int _1MB = 1024*1024;
    public static void main(String[] args) {
        byte[] allocation1, allocation2, allocation3;
        allocation1 = new byte[_1MB / 4]; // 什么时候进入老年代决定于XX:MaxTenuring-Threshold设置
                allocation2 = new byte[4 * _1MB];
        allocation3 = new byte[4 * _1MB];
        allocation3 = null;
        allocation3 = new byte[4 * _1MB];
    }
}
```
- 动态对象年龄判定
  - 如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄
```java
/**
 * -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=15 -XX:+PrintTenuringDistribution
 */
public class OldObjectWithHalfSpace {
    private static int _1MB = 1024*1024;
    public static void main(String[] args) {
        byte[] allocation1, allocation2, allocation3, allocation4;
        allocation1 = new byte[_1MB / 4]; // allocation1+allocation2大于survivo空间一半
        allocation2 = new byte[_1MB / 4];
        allocation3 = new byte[4 * _1MB];
        allocation4 = new byte[4 * _1MB];
        allocation4 = null;
        allocation4 = new byte[4 * _1MB];
    }
}
```
- 空间分配担保
  - Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的
  - 否则虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许失败
    - 就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC
    - 否则进行Full GC
  - JDK 6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行Minor GC，否则将进行Full GC
## 对象已死
### 引用计数算法
> 为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。
在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收
虽然占用了一些额外的内存空间来进行计数，它的原理简单，判定效率也很高。但这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作
### 可达性分析算法
基本思路就是通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，对象之间的联系称为引用链，如果某个对象无法从 GC Root到达，则证明此对象是不可能再被使用的
```mermaid
stateDiagram-v2
  state GCRoots {
    线程栈变量
    静态变量
    常量池
    JNI指针
  }
  常量池 --> H
  JNI指针 --> H
  I
  E --> F
  F --> E
  静态变量 --> D
  线程栈变量 --> A
  A --> B
  B --> C
```
可以作为GCRoots的对象包括下面几种：
- 虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象
- 方法区中的类静态属性引用的对象
- 方法区中常量引用的对象
- 本地方法栈中JNI(Native方法)引用的对象
- Java虚拟机内部的引用，如基本数据类型对应的Class对象
- 被同步锁（synchronized关键字）持有的对象
- 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等
除了这些固定的GC Roots集合以外，根据垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合
### 引用
- 基于对象引用判定无用对象
- 对象引用链
```mermaid
stateDiagram-v2
  对象创建 --> 对象初始化
  对象初始化 --> 强引用
  强引用 --> 弱引用
  强引用 --> 软引用
  弱引用 --> 强引用
  软引用 --> 强引用
  软引用 --> finalize
  强引用 --> finalize
  弱引用 --> finalize
  finalize --> 虚引用
  虚引用 --> 不可达
```
利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态
#### 强引用
```java
Object obj = new Object(); Object obj2 = obj; 
```
- 强引用还存在，对象就不会被回收，哪怕发生OOM异常
#### 软引用
```java
Object obj = new Object();
SoftReference sf = new SoftReference(obj);
obj = null;  // 使对象只被软引用关联
```
- 有用但并非必需的对象
- 在系统的内存不够时，会把这些对象列为可回收
应用场景：缓存
#### 弱引用
```java
Object obj = new Object();
WeakReference wf = new WeakReference(obj);
obj = null;
```
- 比软引用强度更弱些
- 只能生存到下一次垃圾收集发生之前
作用在于当强引用丢失之后，这个对象就会被回收
Thread中包含变量ThreadLocalMap，因此ThreadLocalMap与Thread的生命周期是一样长，如果都没有手动删除对应key，都会导致内存泄漏
```java
static class ThreadLocalMap {
    static class Entry extends WeakReference> {
        Object value;
        Entry(ThreadLocal k, Object v) {
            super(k);
            value = v;
        }
    }