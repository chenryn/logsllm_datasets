}
17.3.4 实现接口
当然，我们还是必须实现List接口。C方法是把函数定义统一放在list.c
文件中。然后，整个程序由 
list.h（定义数据结构和提供用户接口的原
型）、list.c（提供函数代码实现接口）和 films3.c （把链表接口应用于特定
编程问题的源代码文件）组成。程序清单17.5演示了list.c的一种实现。要运
行该程序，必须把films3.c和list.c一起编译和链接（可以复习一下第9章关于
编译多文件程序的内容）。list.h、list.c和films3.c组成了整个程序（见图
17.5）。
程序清单17.5 list.c实现文件
/* list.c -- 支持链表操作的函数 */
#include 
1335
#include 
#include "list.h"
/* 局部函数原型 */
static void CopyToNode(Item item, Node * pnode);
/* 接口函数 */
/* 把链表设置为空 */
void InitializeList(List * plist)
{
*plist = NULL;
}
/* 如果链表为空，返回true */
bool ListIsEmpty(const List * plist)
{
if (*plist == NULL)
return true;
else
return false;
}
/* 如果链表已满，返回true */
1336
bool ListIsFull(const List * plist)
{
Node * pt;
bool full;
pt = (Node *)malloc(sizeof(Node));
if (pt == NULL)
full = true;
else
full = false;
free(pt);
return full;
}
/* 返回节点的数量 */
unsigned int ListItemCount(const List * plist)
{
unsigned int count = 0;
Node * pnode = *plist;  /* 设置链表的开始 */
while (pnode != NULL)
{
1337
++count;
pnode = pnode->next; /* 设置下一个节点 */
}
return count;
}
/* 创建储存项的节点，并将其添加至由plist指向的链表末尾（较慢的实
现） */
bool AddItem(Item item, List * plist)
{
Node * pnew;
Node * scan = *plist;
pnew = (Node *) malloc(sizeof(Node));
if (pnew == NULL)
return false;  /* 失败时退出函数 */
CopyToNode(item, pnew);
pnew->next = NULL;
if (scan == NULL)    /* 空链表，所以把 */
*plist = pnew;    /* pnew放在链表的开头 */
else
1338
{
while (scan->next != NULL)
scan = scan->next; /* 找到链表的末尾 */
scan->next = pnew;   /* 把pnew添加到链表的末尾 */
}
return true;
}
/* 访问每个节点并执行pfun指向的函数 */
void Traverse(const List * plist, void(*pfun)(Item item))
{
Node * pnode = *plist;  /* 设置链表的开始 */
while (pnode != NULL)
{
(*pfun)(pnode->item); /* 把函数应用于链表中的项 */
pnode = pnode->next; /* 前进到下一项 */
}
}
/* 释放由malloc()分配的内存 */
/* 设置链表指针为NULL   */
1339
void EmptyTheList(List * plist)
{
Node * psave;
while (*plist != NULL)
{
psave = (*plist)->next;  /* 保存下一个节点的地址  */
free(*plist);       /* 释放当前节点     */
*plist = psave;      /* 前进至下一个节点   */
}
}
/* 局部函数定义 */
/* 把一个项拷贝到节点中 */
static void CopyToNode(Item item, Node * pnode)
{
pnode->item = item; /* 拷贝结构 */
}
1340
图17.5 电影程序的3个部分
1.程序的一些注释
list.c文件有几个需要注意的地方。首先，该文件演示了什么情况下使用
1341
内部链接函数。如第12章所述，具有内部链接的函数只能在其声明所在的文
件夹可见。在实现接口时，有时编写一个辅助函数（不作为正式接口的一部
分）很方便。例如，使用CopyToNode()函数把一个Item类型的值拷贝到Item
类型的变量中。由于该函数是实现的一部分，但不是接口的一部分，所以我
们使用 static 存储类别说明符把它隐藏在list.c文件中。接下来，讨论其他函
数。
InitializeList()函数将链表初始化为空。在我们的实现中，这意味着把
List类型的变量设置为NULL。前面提到过，这要求把指向List类型变量的指
针传递给该函数。
ListIsEmpty()函数很简单，但是它的前提条件是，当链表为空时，链表
变量被设置为NULL。因此，在首次调用 
ListIsEmpty()函数之前初始化链表
非常重要。另外，如果要扩展接口添加删除项的功能，那么当最后一个项被
删除时，应该确保该删除函数重置链表为空。对链表而言，链表的大小取决
于可用内存量。ListIsFull()函数尝试为新项分配空间。如果分配失败，说明
链表已满；如果分配成功，则必须释放刚才分配的内存供真正的项所用。
ListItemCount()函数使用常用的链表算法遍历链表，同时统计链表中的
项：
unsigned int ListItemCount(const List * plist)
{
unsigned int count = 0;
Node * pnode = *plist;  /* 设置链表的开始 */
while (pnode != NULL)
{
++count;
1342
pnode = pnode->next; /* 设置下一个节点 */
}
return count;
}
AddItem()函数是这些函数中最复杂的：
bool AddItem(Item item, List * plist)
{
Node * pnew;
Node * scan = *plist;
pnew = (Node *) malloc(sizeof(Node));
if (pnew == NULL)
return false;       /* 失败时退出函数 */
CopyToNode(item, pnew);
pnew->next = NULL;
if (scan == NULL)       /* 空链表，所以把 */
*plist = pnew;       /* pnew放在链表的开头 */
else
{
while (scan->next != NULL)
1343
scan = scan->next; /* 找到链表的末尾 */
scan->next = pnew;   /* 把pnew添加到链表的末尾 */
}
return true;
}
AddItem()函数首先为新节点分配空间。如果分配成功，该函数使用
CopyToNode()把项拷贝到新节点中。然后把该节点的next成员设置为NULL。
这表明该节点是链表中的最后一个节点。最后，完成创建节点并为其成员赋
正确的值之后，该函数把该节点添加到链表的末尾。如果该项是添加到链表
的第 1 个项，需要把头指针设置为指向第1项（记住，头指针的地址是传递
给AddItem()函数的第2个参数，所以*plist就是头指针的值）。否则，代码继
续在链表中前进，直到发现被设置为NULL的next成员。此时，该节点就是
当前的最后一个节点，所以，函数重置它的next成员指向新节点。
要养成良好的编程习惯，给链表添加项之前应调用ListIsFull()函数。但
是，用户可能并未这样做，所以在AddItem()函数内部检查malloc()是否分配
成功。而且，用户还可能在调用ListIsFull()和调用AddItem()函数之间做其他
事情分配了内存，所以最好还是检查malloc()是否分配成功。
Traverse()函数与ListItemCount()函数类似，不过它还把一个指针函数作
用于链表中的每一项。
void Traverse (const List * plist, void (* pfun)(Item item) )
{
Node * pnode = *plist; /* 设置链表的开始 */
while (pnode != NULL)
1344
{
(*pfun)(pnode->item); /* 把函数应用于该项*/
pnode = pnode->next;  /* 前进至下一个项 */
}
}
pnode->item代表储存在节点中的数据，pnode->next标识链表中的下一个
节点。如下函数调用：
Traverse(movies, showmovies);
把showmovies()函数应用于链表中的每一项。
最后，EmptyTheList()函数释放了之前malloc()分配的内存：
void EmptyTheList(List * plist)
{
Node * psave;
while (*plist != NULL)
{
psave = (*plist)->next;  /* 保存下一个节点的地址  */
free(*plist);       /* 释放当前节点     */
*plist = psave;      /* 前进至下一个节点   */
}
1345
}
该函数的实现通过把List类型的变量设置为NULL来表明一个空链表。因
此，要把List类型变量的地址传递给该函数，以便函数重置。由于List已经是
一个指针，所以plist是一个指向指针的指针。因此，在上面的代码中，*plist
是指向Node的指针。当到达链表末尾时，*plist为NULL，表明原始的实际参
数现在被设置为NULL。
代码中要保存下一节点的地址，因为原则上调用了free()会使当前节点
（即*plist指向的节点）的内容不可用。
提示 const的限制
多个处理链表的函数都把const List * plist作为形参，表明这些函数不会
更改链表。这里， const确实提供了一些保护。它防止了*plist（即plist所指
向的量）被修改。在该程序中，plist指向movies，所以const防止了这些函数
修改movies。因此，在ListItemCount()中，不允许有类似下面的代码：
*plist = (*plist)->next; // 如果*plist是const，不允许这样做
因为改变*plist就改变了movies，将导致程序无法跟踪数据。然而，
*plist和movies都被看作是const并不意味着*plist或movies指向的数据是
const。例如，可以编写下面的代码：
(*plist)->item.rating = 3; // 即使*plist是const，也可以这样做
因为上面的代码并未改变*plist，它改变的是*plist指向的数据。由此可
见，不要指望const能捕获到意外修改数据的程序错误。
2.考虑你要做的
现在花点时间来评估ADT方法做了什么。首先，比较程序清单17.2和程
序清单17.4。这两个程序都使用相同的内存分配方法（动态分配链接的结
构）解决电影链表的问题，但是程序清单17.2暴露了所有的编程细节，把
1346
malloc()和prev->next这样的代码都公之于众。而程序清单17.4隐藏了这些细
节，并用与任务直接相关的方式表达程序。也就是说，该程序讨论的是创建
链表和向链表中添加项，而不是调用内存函数或重置指针。简而言之，程序
清单17.4是根据待解决的问题来表达程序，而不是根据解决问题所需的具体
工具来表达程序。ADT版本可读性更高，而且针对的是最终的用户所关心的
问题。
其次，list.h 和 list.c 文件一起组成了可复用的资源。如果需要另一个简
单的链表，也可以使用这些文件。假设你需要储存亲戚的一些信息：姓名、
关系、地址和电话号码，那么先要在 list.h 文件中重新定义Item类型：
typedef struct itemtag
{
char fname[14];
char lname [24];
char relationship[36];
char address [60];
char phonenum[20];
} Item;
然后„„只需要做这些就行了。因为所有处理简单链表的函数都与Item类
型有关。根据不同的情况，有时还要重新定义CopyToNode()函数。例如，当
项是一个数组时，就不能通过赋值来拷贝。
另一个要点是，用户接口是根据抽象链表操作定义的，不是根据某些特
定的数据表示和算法来定义。这样，不用重写最后的程序就能随意修改实
现。例如，当前使用的AddItem()函数效率不高，因为它总是从链表第 1 个
项开始，然后搜索至链表末尾。可以通过保存链表结尾处的地址来解决这个
1347