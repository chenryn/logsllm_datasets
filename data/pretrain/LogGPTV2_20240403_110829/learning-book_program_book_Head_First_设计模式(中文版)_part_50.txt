ConcreteStateA
ConcreteStateB
handle)
hande()
可以有许多具体的
不管是在什么时候，只要有人调用
状态。
Context的request(）方法，它就会被
个
番托到状态来处理。
ConcteteState（具体状态）处理来自Context的请求。每
一个ConcteteState都提供了它自己对于请求的实现。所
以，当Context改变状态时行为也跟着改变。
410
第10章
---
## Page 447
状态模式
等一下，在我的记忆中，
氮略模式和这张类围根本就
是一模一样。
好眼力！是的，类图是一样的，但是这两个模式的差别在于它们
的“意图”。
以状态模式而言，我们将一群行为封装在状态对象中，context的行
为随时可委托到那些状态对象中的一个。随着时间的流逝，当前状态
在状态对象集合中游走改变，以反映出context内部的状态，因此，
context的行为也会跟着改变。但是context的客户对于状态对象了解不
多，甚至根本是浑然不觉。
而以策略模式而言，客户通常主动指定Context所要组合的策略对象
是哪一个。现在，固然策略模式让我们具有弹性，能够在运行时改变
策略，但对于某个context对象来说，通常都只有一个最适当的策略对
象。比方说，在第1章，有些鸭子（例如绿头鸭）被设置成利用典型的
飞翔行为进行飞翔，而有些鸭子（例如橡皮鸭和诱饵鸭）使用的飞翔
行为只能让他们紧贴地面。
一般来说，我们把策略模式想成是除了继承之外的一种弹性替代方
案。如果你使用继承定义了一个类的行为，你将被这个行为困住，甚
至要修改它都很难。有了策略模式，你可以通过组合不同的对象来改
变行为。
我们把状态模式想成是不用在context中放置许多条件判断的替代方
案。通过将行为包装进状态对象中，你可以通过在context内简单地改
PD
变状态对象来改变context的行为。
你现在的位置
411
---
## Page 448
状态模式问答
theregare_no
DumbQuestions
法。但唯一的前提是，你的状态对象不能持有它们自己
状态应该是什么。ConcreteState总是决定接下来的状态
想要共享状态，你需要把每个状态都指定到静态的实例
是什么吗？
变量中。如果你的状态需要利用到Context中的方法或
者实例变量，你还必须在每个handler(）方法内传入一个
合：不，并非总是如此，Context也可以决定状态
context的引用。
转换的流向。
一般来讲，当状态转换是因定的时候，就适合放在
使用状态模式似乎总是增加我们设计中类的
Context中：然而，当转换是更动态的时候，通常就会放数目。请看GumballMachine的例子，新版本比旧版本多
在状态类中（例如，在GumbalIMachine中、由运行时糖
出了许多类！
果的数目来决定状态要转换到NoQuarter还是SoldOut）。
将状态转换放在状态类中的缺点是：状态类之间产生了
合：
没错，在个别的状态类中封装状态行为，结
依赖。在我们的GumbalIMachine实现中，我们试图通过
果总是增加这个设计中类的数目。这就是为了要获取弹性
使用Context上的getter方法把依赖减到最小，而不是显式
而付出的代价。除非你的代码是一次性的，可以用完就扔
硬编码具体状态类。
掉（是呀！才怪！），那么其实状态模式的设计是绝对值
请注意，在做这个决策的同时，也等于是在为另一件事
得的。其实真正重要的是你暴露给客户的类数目，而且我
情做决策：当系统进化时，究竞哪个类是对修改封闭（
们有办法将这些额外的状态类全都隐藏起来。
Context还是状态类）的。
让我们看一下另一种做法：如果你有一个应用，它有很
多状态，但是你决定不将这些状态封装在不同的对象
中，那么你就会得到巨大的、整块的条件语句。这会让
你的代码不容易维护和理解。通过使用许多对象，你可
部状态以及行为的，所以只有Context才会对状态提出请以省下很多的工夫。
求。客户不会直接改变Context的状态。全盘了解状态是
Context的工作、客户根本不了解，所以不会直接和状态
联系。
你不是使用接口实现糖果机状态的吗？
签
B：
是的。如果我们没有共同的功能可以放进抽
些实例之间可以共享状态对象吗？
象类中，就会使用接口。在你实现状态模式时，很可能
想使用抽象类。这么一未，当你以后需要在抽象类中加
412第10章
---
## Page 449
状态模式
十次抽中一次的游戏，尚未解决······
别忘了，我们还没有完事呢。我们还有一个游戏在等待实现：然而，我们已经实现了状态模式，
所以实现这个游戏应该易如反掌。首先，我们要在GumbalIMachine类中加入一个状态：
public class GumballMachine {
State soldOutState;
State noQuarterState;
你需要在这里加进一个新的
State hasQuarterState;
WinnerState状态，然后在构造
State soldState;
器中将它初始化。
State state = soldoutState;
int count = 0;
别忘了在这里提供一
个WinnetStateette方
//这里有一些方法
法。
现在让我们实现WinnerState类本身，其实它很像SoldState类：
public class WinnerState implements State {
//实例变量和构造器
就跟SoldState一样
我们在这里释放出两题糖果，然后进入
//insertQuarter错误信息
NoQuatteState 或SoldOutState
//ejectQuarter错误信息
//turnCrank错误信息
public void dispense(){
System.out.println("You'RE A WINNER! You get two gumballs for your quarter");
gumballMachine.releaseBal1() ;
if (gumbal1Machine.getCount () == 0){
gumbal1Machine setState (gumballMachine .getSoldOutState ()) ;
如果还有第二
}else{
题糖果的话
gumballMachine.releaseBall () ;
if (gumballMachine.getCount() > 0){
我们就把它释
gumballMachine,setState (gumballMachine .getNoQuarterState () ) :
放出来。
}else{
System.out.println("Oops, out of gumballs!");
gumballMachine.setState (gumballMachine .getSoldOutState ()) ;
你现在的位置
413
---
## Page 450
实现十个中一个的游戏
完成这个游戏
我们还要再做一个改变：我们需要实现机会随机数，还要增加一个进入
WinnerState状态的转换。这两件事情都要加进HasQuarterState，因为顾客会从
这个状态中转动曲柄：
首先我们增加一个随
public class HasQuarterState implements State {
机数产生器，产生
Random randomWinner-new Random(System.currentTimeMillis());
GumballMachine gumballMachine;
10%赢的机…
public HasQuarterState (GumballMachine gumballMachine){
this.gumballMachine = gumballMachine;
}
public void insertQuarter() {
System.out.println("You can't insert another quarter");
public void ejectQuarter(){
System.out.println("Quarter returned") ;
然后决定这个顾客是
gumballMachine.setState (gumballMachine.getNoQuarterState ()) ;
否赢了。
public void turnCrank(){
System.out.println("You turned...");
int winner=randomWinner.nextInt(10);
if（（winner==0)66（gumballMachine.getCount(）>1））（
gumballMachine.setState(gumballMachine.getWinnerState());
}else（
gumbal1Machine.setState (gumba11Machine.getSoldState());
如果赢了，而且有足
够的糖果可以让他一
public void dispense ()(
次得到两题的话，我
System.out.println("No gumball dispensed") ;
们就进入WinnerState状
态：否则，就进入
SoldState状态（就跟平
常一样）。
哇！实现起来真是容易！我们刚刚为GumballMachine增加了一个新的状态，并实现了这
个新的状态。要做的事情只是实现我们的机会游戏，并转换到正确的状态。看来我们新
的代码策略已经奏效了
414
第10章
---
## Page 451
状态模式
向万能糖果公司的CEO做展示
万能糖果公司的CEO来访，来看看我们的新糖果机代码的演示。希望这些状态都没问题！我们
要让这个展示简短而甜蜜（CEO们的注意力可不会停留太久），但希望时间能够足够长，至少
让我们赢一次！
这个代码其实没有改，我们只是把它缩
短了一些。
再来一次，让糖果机一开始
public class GumballMachineTestDrive {
public static void main (String[] args)(
就装了5题糖果。
GumballMachine gumballMachine = new Gumbal1Machine (5) ;
System. out .println (gumballMachine) ;
gumballMachine.insertQuarter () ;
gumbal1Machine.turnCrank () ;
我们希望能赢，所以一直投钱并转
System. out.println (gumballMachine) ;
动曲柄。然后打印出糖果机的状
gumballMachine.insertQuarter () ;
N
gumballMachine. turnCrank () ;
gumballMachine.insertQuarter () ;
gumballMachine, turnCrank () ;
System. out.println (gumballMachine) ;
整个开发团队都在会议室外面屏息以
待，想知遂基于状态模式的设计是否
能赢得青味。
你现在的位置》415
---
## Page 452
测试糖果机
好！太棒了！
Fie Edt Winc
java GumballMachineTestDrive
Mighty Gumball,Inc.
Java-enabled Standing
Gumball Model #2004
。
Inventory:5 gumballs
Machine is waiting for quarter
You inserted a quarter
You turned..
YOU'RE A WINNER!You get two gumballs for your quarter
A gumball comes rolling out the slot...
Mighty Gumball,Inc.
Java-enabled Standing Gumball Model #2004
Inventory:3 gumballs
Machine is waiting for quarter
You inserted a quarter
You turned...
Agumball comes rolling out the slot..
You inserted a quarter
You turned...
YoU'RE A WINNER! You get two gumballs for your quarter
这是老天爷的春顾吗：在我
Agumbal1
comes rolling out the slot..
们向CEO展示的时候，我们
Oops,out of gumballs!
不是赢了一次，而是赢了两
次！
Mighty Gumball，Inc.
Java-enabled Standing
Gumball Model #2004
Inventory:0 gumballs
Machine is sold out
问：
我们为什么需要WinnerState？为什么不直接在SoldState中发放两颗糖果？
答：
这是一个好问题。这两个状态几乎一样，唯一的差别在于，WinnerState状态会发放两颗糖果。你
当然可以将发放两颗糖果的代码放在SoldState中，当然这么做有缺点，因为你等于是将两个状态用一个状态类
来代表。这样做你牺牡了状态类的清断易懂来减少一些完余代码。你也应该考虑到在前面的章节中所学到的原
则：一个类，一个责任。将WinnerState状态的责任放进SoldState状态中，你等于是让SoldState状态具有两个责
任。那么促销方案结束之后或者赢家的机率改变之后、你又该怎么办呢？所以，这必须用你的智慧来做折表，
416
第10章
---
## Page 453
状态模式
棒根了！你们这帮家伙，做得好。
通过这个新游戏，我们的销售量已经
直冲云需了。你知道吗？我们也制造
汽水机，而我在想或许可以为这些机器也
装上这套游戏。我们旧的糖果机都能这么
做了，新的汽水机应该也可以吧？
精神检查····
是的，万能糖果公司的CEO或许需要去做精神检查，但这不是我们所要说
的。在推出我们的黄金版本之前，让我们再检查看看GumbalIMachine还有哪
些方面需要改进：
■我们在售出糖果和赢家状态中，有许多重复的代码。我们必
须把这部分清理一下。要怎么做呢？我们可以把State设计成
抽象类，然后把方法的默认行为放在其中；毕竞，像是“你
可恶！我是糖果机，不是电
已经投入25分钱”这类的消息，不会被顾客看见。所以，所
脑。你要摄清楚！Jim。
有的“错误响应”行为都可以写得具有通用性，并放在抽象
的State类中供子类继承。
·dispense(方法即使是在没有25分钱时曲柄被转动的情况下
也总是会被调用。我们可以轻易地修改这部分，做法是让
turnCrank(）返回一个布尔值，或者引入异常。你认为哪一种
做法比较好？
■状态转换的所有智能被放在状态类中，这可能导致什么问
题？我们要将逻辑移进糖果机中吗？这有什么优缺点？
■你会实例化许多的GumballMachine对象吗？如果是的话，你
可能想要将状态的实例移到静态的实例变量中共享。这需要
PDG
对GumbalIMachine和uState做怎样的改变？
你现在的位置
417
---
## Page 454
围炉夜话：状态与策略
西护表话
今夜话题：策略模式与状态模式重聚
策略
状态
老兄，你听说了我来自第1章吗？
是的，我听说了。
我刚去帮了模板方法一个忙一他们要我帮他们
结束那个章节。言归正传，我的高贵的老兄，近
来如何？
没什么变化一一我还是在帮类的忙，让他们在不
同的状态中展现不同的行为。
我不这么认为，你看起来就像是在抄袭我，只是
换个词罢了。你想想：我允许对象能够通过组合
和委托来拥有不同的行为或算法。你只是在抄袭
我罢了。
我承认我们所做的事情绝对有关系，但是我的意
图和你的完全不一样。我教客户使用组合和委托
的做法是完全不一样的。
是吗？怎么说？我不了解。
如果你能别花那么多时间在自己身上，或许你就
能了解我所说的。总而言之，想想看你是如何工
作的：你有一个可以实例化的类，而且通常给它
一个实现某些行为的策略对象。像是在第1章你处
理呱呱叫的行为，对吗？真正的鸭子就拿到真正
的呱呱叫行为，橡皮鸭子拿到吱吱叫的呱呱叫行
为。
是的，那是很精细的活儿.我相信你一定能够
看出来，为什么这比继承你的行为更有威力，你
说是吧？
是的，当然了。现在，你来了解一下我的工作方
式，它是截然不同的。
很抱歉，你需要解释一下你的工作。
418
第10章
---
## Page 455
状态模式
策略
状态
好吧！当我的Context对象被创建之后，我可以告
诉它们从什么状态开始，然后它们会随着时间而
改变自已的状态。
嘿！别这样，我也可以在运行时改变行为；毕竞
这正是组合的目的！
当然你也能这么做，但是我的做法是利用许多不
同的状态对象：我的Context对象会随着时间而改
变状态，而任何的状态改变都是定义好的。换句
话说，“改变行为”这件事是建立在我的方案中
的一一这就是我的工作方式！
好吧！我承认，我并没有鼓励我的对象拥有一组
定义良好的状态转换。事实上，我通常会去控制
我的对象使用什么策略。
看吧！我已经说过了我们在结构上很像，但是我
们做事情的意图是十分不同的。面对这个事实吧，
我们两个在这个世界上都有用处。
是呀！继续做你的美梦吧，我的老兄。你好像以