定义了TCP慢启动算法。
• http://www.ietf.org/rfc/rfc1122.txt
RFC 1122，“Requirements for Internet Hosts—Communication Layers”（“对因特
网主机的要求——通信层”）讨论了TCP确认和延迟确认。
• http://www.ietf.org/rfc/rfc896.txt
RFC 896，“Congestion Control in IP/TCP Internetworks”（“IP/TCP网络间的拥塞
控制”）是John Nagle于1984年发布的。描述了TCP拥塞控制的必要性。介绍
了现在称为“Nagle算法”的算法。
• http://www.ietf.org/rfc/rfc0813.txt
RFC 813，“Window and Acknowledgement Strategy in TCP”（“TCP中的窗口和
确认机制”）是一个早些年（1982年）制定的规范，它描述了TCP窗口和确认的
实现机制，解释了延迟确认技术的早期技术。
• http://www.ietf.org/rfc/rfc0793.txt
RFC 793，“Transmission Control Protocol”（“传输控制协议”），是Jon Postel于
106 1981年给出的TCP协议经典定义。
112 ｜ 第4章
第二部分
结构
HTTP
第二部分的6章主要介绍了HTTP服务器、代理、缓存、网关和机器人应用程序，
这些都是Web系统架构的构造模块。
• 第5章概述了Web服务器结构。
• 第6章详细介绍了HTTP代理服务器，它们是连接HTTP客户端的中间服务器，
是HTTP服务和控制的平台。
• 第7章深入研究了Web的缓存机制。缓存是通过对常用文档进行本地复制来提
高性能、减少流量的设备。
• 第8章介绍了一些应用程序，通过这些程序，HTTP就可以与使用不同协议（比
如SSL加密协议）的软件进行互操作了。
• 第9章介绍了Web客户端，结束了HTTP架构之旅。 107
~
• 第10章涵盖了HTTP未来发展的一些主题，特别介绍了HTTP-NG技术。 108
第5章
服务器
Web
115
Web服务器每天会分发出数十亿的Web页面。这些页面可以告诉你天气情况，装
载在线商店的购物车，还能帮你找到许久未联系的高中同学。Web服务器是万维网
的骨干。本章将介绍以下话题。
• 对多种使用不同类型软硬件的Web服务器进行调查。
• 介绍如何用Perl编写简单的诊断性Web服务器。
• 一步一步地解释Web服务器是如何处理HTTP事务的。
为了对问题进行具体的说明，例子中使用了Apache Web服务器及其配置选项。
5.1 各种形状和尺寸的Web服务器
Web服务器会对HTTP请求进行处理并提供响应。术语“Web服务器”可以用来表
示Web服务器的软件，也可以用来表示提供Web页面的特定设备或计算机。
Web服务器有着不同的风格、形状和尺寸。有普通的10行Perl脚本的Web服务
器、50MB 的安全商用引擎以及极小的卡上服务器。但不管功能有何差异，所有
的 Web 服务器都能够接收请求资源的 HTTP 请求，将内容回送给客户端（参见
图 1-5）。
5.1.1 Web服务器的实现
Web服务器实现了HTTP和相关的TCP连接处理。负责管理Web服务器提供的资
源，以及对Web服务器的配置、控制及扩展方面的管理。
Web服务器逻辑实现了HTTP协议、管理着Web资源，并负责提供Web服务器的
109 管理功能。Web服务器逻辑和操作系统共同负责管理TCP连接。底层操作系统负责
管理底层计算机系统的硬件细节，并提供了TCP/IP网络支持、负责装载Web资源
的文件系统以及控制当前计算活动的进程管理功能。
Web服务器有各种不同的形式。
• 可以在标准的计算机系统上安装并运行通用的软件Web服务器。
• 如果不想那么麻烦地去安装软件，可以买一台Web服务器设备，通常会是一台
安装在时髦机架上的计算机，里面的软件会预装并配置好。
• 随着微处理器奇迹般地出现，有些公司甚至可以在少量计算机芯片上实现嵌入式
Web服务器，使其成为完美的（便携式）消费类设备管理控制台。
我们分别来看看这些实现方式。
116 ｜ 第5章
5.1.2 通用软件Web服务器
通用软件Web服务器都运行在标准的、有网络功能的计算机系统上。可以选择开源
软件（比如Apache或W3C的Jigsaw）或者商业软件（比如微软和iPlanet的Web
服务器）。基本上所有的计算机和操作系统中都有可用的Web服务器软件。
尽管不同类型的Web服务器程序有数万个（包括定制的和特殊用途的Web服务
器），但大多数Web服务器软件都来自少数几个组织。
2002年2月，Netcraft调查（http://www.netcraft.com/survey/）显示有三家厂商主宰
了公共因特网Web服务器市场（参见图5-1）。
• 免费的Apache软件占据了所有因特网Web服务器中大约60%的市场。
• 微软的Web服务器占据了另外30%。
• Sun的iPlanet占据了另外3%。
图5-1 Netcraft的自动化调查估计的Web服务器市场份额 110
但这些数据也不能尽信，通常大家都认为Netcraft调查会夸大Apache软件的优势。
首先，在调查计算服务器的时候没有考虑其流行程度。各大ISP的代理服务器访问
研究表明，Apache服务器提供的页面数量远小于60%，但仍然超过了微软和Sun
的iPlanet。然而，据说微软和iPlanet服务器在公司企业中要比Apache更受欢迎。
5.1.3 Web服务器设备
Web服务器设备（Web server appliance）是预先打包好的软硬件解决方案。厂商会
在他们选择的计算机平台上预先安装好软件服务器，并将软件配置好。下面是一些
Web服务器设备的例子：
• Sun/Cobalt RaQ Web设备（http://www.cobalt.com）；
• 东芝的Magnia SG10（http://www.toshiba.com）；
Web服务器 ｜ 117
• IBM的Whistle Web服务器设备（http://www.whistle.com）。
应用解决方案不再需要安装及配置软件，通常可以极大地简化管理工作。但是，
Web服务器通常不太灵活，特性不太丰富，而且服务器硬件也不太容易重用或
升级。
5.1.4 嵌入式Web服务器
嵌入式服务器（embeded server）是要嵌入到消费类产品（比如打印机或家用设备）
中去的小型Web服务器。嵌入式Web服务器允许用户通过便捷的Web浏览器接口
来管理其消费者设备。
有些嵌入式Web服务器甚至可以在小于一平方英寸的空间内实现，但通常只能提供
最小特性功能集。下面是两种非常小的嵌入式Web服务器实例：
• IPic火柴头大小的Web服务器（http://www-ccs.cs.umass.edu/~shri/iPic.html）；
• NetMedia SitePlayer SP1以太网Web服务器（http://www.siteplayer.com）。
5.2 最小的Perl Web服务器
要构建一个特性完备的HTTP服务器，是需要做一些工作的。Apache Web服务
器的内核有超过50 000行的代码，那些可选处理模块的代码量更是远远超过这个
数字。
这个软件所要做的就是支持HTTP/1.1的各种特性：丰富的资源支持、虚拟主机、
访问控制、日志记录、配置、监视和性能特性。在这里，可以用少于30行的Perl
111 代码来创建一个最小的可用HTTP服务器。我们来看看这是怎么实现的。
例5-1显示了一个名为type-o-serve的小型Perl程序。这个程序是个很有用的诊断
工具，可以用来测试与客户端和代理的交互情况。与所有Web服务器一样，type-o-
serve会等待HTTP连接。只要type-o-serve收到了请求报文，就会将报文打印在屏
幕上，然后等待用户输入（或粘贴）一条响应报文，并将其回送给客户端。通过这
种方式，type-o-serve假扮成一台Web服务器，记录下确切的HTTP请求报文，并
允许用户回送任意的HTTP响应报文。
这个简单的type-o-serve实用程序并没有实现大部分的HTTP功能，但它是一种很
有用的工具，产生服务器响应报文的方式与Telnet产生客户端请求报文的方式相同
（参见例5-1）。可以从http://www.http-guide.com/tools/type-o-serve.pl上下载type-o-
serve程序。
118 ｜ 第5章
例5-1 type-o-serve——用于HTTP调试的最小型Perl Web服务器
#!/usr/bin/perl
use Socket;
use Carp;
use FileHandle;
# (1) use port 8080 by default, unless overridden on command line
$port = (@ARGV ? $ARGV[0] : 8080);
# (2) create local TCP socket and set it to listen for connections
$proto = getprotobyname('tcp');
socket(S, PF_INET, SOCK_STREAM, $proto) || die;
setsockopt(S, SOL_SOCKET, SO_REUSEADDR, pack("l", 1)) || die;
bind(S, sockaddr_in($port, INADDR_ANY)) || die;
listen(S, SOMAXCONN) || die;
# (3) print a startup message
printf(" >>\n\n",$port);
while (1)
{
# (4) wait for a connection C
$cport_caddr = accept(C, S);
($cport,$caddr) = sockaddr_in($cport_caddr);
C->autoflush(1);
# (5) print who the connection is from
$cname = gethostbyaddr($caddr,AF_INET);
printf(" >>\n",$cname);
# (6) read request msg until blank line, and print on screen
while ($line = )
{
print $line;
if ($line =~ /^\r/) { last; }
} 112
# (7) prompt for response message, and input response lines,
# sending response lines to client, until solitary "."
printf(" >>\n");
while ($line = )
{
$line =~ s/\r//;
$line =~ s/\n//;
if ($line =~ /^\./) { last; }
print C $line . "\r\n";
}
close(C);
}
Web服务器 ｜ 119
图5-2显示了Joe的五金商店的管理员是如何用type-o-serve来测试HTTP通信的。
• 首先，管理员启动了type-o-serve诊断服务器，在一个特定的端口上监听。由于
Joe的五金商店已经有一个产品化的Web服务器在监听80端口了，所以管理员
用下面这条命令在端口8080（可以选择任意未用端口）上启动了type-o-serve服务：
% type-o-serve.pl 8080
• 只要type-o-serve开始运行了，就可以将浏览器指向这个Web服务器。在图5-2中，
浏览器指向了http://www.joes-hardware.com:8080/foo/bar/blah.txt。
• type-o-serve程序收到来自浏览器的HTTP请求报文，并将HTTP请求报文的内
容打印在屏幕上。然后type-o-serve诊断工具会等待用户输入一条简单的响应报
文，后面跟着只有一个句号的空行。
• type-o-serve将HTTP响应报文回送给浏览器，浏览器会显示响应报文的主体。
HTTP请求报文
GET /foo/bar/blah.txt HTTP/1.1
Accept: */*
Accept-language: en-us
Accept-encoding: gzip, deflate
User-agent: Mozilla/4.0
Host: www.joes.hardware.com:8080
Connection: Keep-alive
type-o-serve对话
% ./type-o-serve.pl 8080
>>
>>
GET /foo/bar/blah.txt HTTP/1.1
Accept: */*
Accept-language: en-us
Accept-encoding: gzip, deflate
User-agent: Mozilla/4.0
Host: www.joes-hardware.com:8080
Connection: Keep-alive
>>
HTTP/1.0 200 OK
Connection: close
HTTP响应报文 Content-type: text-plain
HTTP/1.0 200 OK Hi there!
Connection: close
Content-type: text/plain
Hi there!
图5-2 type-o-serve实用程序让用户输入服务器响应，将其回送给客户端
5.3 实际的Web服务器会做些什么
例5-1显示的Perl服务器是一个Web服务器的小例子。最先进的商用Web服务器
要比它复杂得多，但它们确实执行了几项同样的任务，如图5-3所示。