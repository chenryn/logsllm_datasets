title:Software-Implemented Fault Injection Methodology for Design and Validation
of System Fault Tolerance
author:Raphael R. Some and
Won S. Kim and
Garen Khanoyan and
Leslie Callum and
Anil Agrawal and
John J. Beahan
A Software-Implemented Fault Injection Methodology for 
Design and Validation of System Fault Tolerance 
Raphael R. Some*, Won S. Kim, Garen Khanoyan, Leslie Callum, Ani1 Agrawal, and John J. Beahan 
Jet Propulsion Laboratory,  California Institute of Technology, 4800 Oak Grove Drive, Pasadena, CA 91109 
PI:EMAIL 
Abstract 
In this paper, we present our experience  in developing 
a methodology  and  tool at  the Jet Propulsion  Laboratoly 
(JPL) for Software-Implemented  Fault Injection  (SWIFI) 
into a parallel processing supercomputer,  which  is being 
designed  for  use  in  next  generation  space  exploration 
missions.  The fault injector uses software-based  strategies 
to  emulate  the  effects  of  radiation-induced 
transients 
occurring  in the system  hardware  components. The JPL’s 
SWlFI  tool  set  called  JIFI 
(JPL’s Implementation  of  a 
Fault  Injector)  is  being  used,  in  conjunction  with  an 
appropriate  system  fault  model,  to  evaluate  candidate 
hardware  and  software  fault  tolerance  urchitectures, 
determine  the  sensitivity  of  applications  to faults  and 
measure the effectiveness  of fault detection,  isolation, and 
recovery  strategies.  JIFI  has  been  validated  to  inject 
faults  into  user-speciJied  CPU  registers  and  memory 
regions  with  a  uniform  random  distribution  in  location 
and  time.  Together  with  verifiers,  classifiers,  and  run 
scripts,  JIFI  enables  massive fault  injection  campaigns 
and statistical data analysis. 
1. Introduction 
is 
to 
for 
(REE) 
Project 
The  objective  of 
the  Remote  Exploration  and 
Experimentation 
bring 
supercomputing technology into space [I],  [2]. It has twin 
goals  of  1)  demonstrating  a  process 
rapidly 
transferring  Commercial-Off-The-Shelf 
(COTS)  high- 
performance computing technology  into  ultra-low power, 
fault tolerant architectures for space and 2) demonstrating 
that  high-performance  onboard  processing  capability 
enables  a  new  class  of  science  investigation  and  highly 
autonomous remote operation.  It  is important to note that 
REE’s  use  will  be  as  a  scientific  data  processor,  not  a 
spacecraft  control  computer.  This is  critical  in  assessing 
the suitability of the REE system to the application and to 
evaluation of its performance.  It is also key to defining a 
development  and 
the 
appropriate use of fault injection based experimentation. 
including 
approach 
testing 
The REE project is employing mainly COTS hardware 
and  software components due to the  wide gap (1 0-1 OOx) 
in  performance/power  between  commercial  processors 
and those available in a radiation hardened version as well 
as  in  cost  (projected  to  be  lOOx or  greater).  The  REE 
architecture [ 11 is a parallel processing “cluster computer” 
interconnected  stand-alone 
consisting  of  a  pool  of 
computers  working 
integrated 
computing 
(Message  Passing 
Interface)  standard 
for  parallel  program 
is  used 
coordination and comhunication. 
together  as  a  single 
resource.  The  MPI 
Because  REE  hardware  is  not  radiation  hardened, 
Galactic  Cosmic  Ray  (GCR)  and  Solar  Proton  induced 
transients  will  cause  Single  Event  Effects  (SEE’S), i.e., 
spurious bit flips, signal line noise and clock pulses, in the 
system  hardware  components,  thus  affecting  system 
reliability and availability.  Expected fault types and rates 
are  being  determined  by  a  separate  modeling  effort  in 
which  the  results  of  ground-based  radiation  testing  are 
extrapolated to a range of mission environments. The fault 
model 
the  expected 
fault 
conditions for the mission environments of interest. 
thus  generated  provides 
A suite of fault injection tools used in conjunction with 
the fault model [2] is needed to analyze and evaluate fault 
behavior  of  the  REE  system.  Before  a  fault-tolerant 
system is deployed, it must be tested and validated.  How 
reliable is it  in  detecting and recovering from faults? Are 
there critical hardware/software components or techniques 
in  fault-tolerant system design? What are the sensitivities 
of different application software modules and the  system 
software  to  various  types  of  faults?  What  are  the  fault 
detection  and  mitigation  coverage?  These  questions 
become  even  more  relevant  in  the  REE  system  , where 
COTS components instead of radiation-hardened chips are 
used. 
There  are  basically  four  approaches  to  implementing 
fault  injection:  1) hardware-implemented  fault  injection, 
2) fault injection by  simulation, 3)  software-implemented 
fault  injection  (SWIFI),  and  4) hybrid  fault  injection 
which  is  a  combination  of  the  above  three  techniques. 
Hardware-implemented  fault  injection  techniques  need 
special hardware, and  simulation techniques need a  good 
simulation model of the target system. SWIFI techniques 
alter  the  hardwarekoftware  state  of  the  system  using 
special software in order to cause the system to behave as 
if  a hardware fault had occurred. SWIFI techniques have 
to  the  other 
several  potential  advantages  compared 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
501 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:00:35 UTC from IEEE Xplore.  Restrictions apply. 
techniques:  1)  lower  complexity  detailed  models,  2) 
reduced  development  effort,  3)  lower  cost,  and  4) 
increased portability. There  are quite a few SWIFI based 
fault  injectors  such  as  FIAT,  FERRARI,  NFTAPE, 
DOCTOR,  ORCHESTRA,  SPI,  LOKI,  and  Xception. 
Most of these have been well documented elsewhere. Two 
which are of interest to the REE project, and which we are 
investigating for future use to augment JIFI, are Xception 
and NFTAPE. 
Xception  [3] is a commercially available fault injector 
that  operates at  the  exception handler  level, independent 
of  the  application  code,  to  minimize  intrusion  into  the 
application.  NFTAPE  [4]  permits  the  injection  of  CPU, 
memory,  1/0  and  communication  related  faults  in  a 
networked  system.  In  NFTAPE, 
the  fault  injection 
component is implemented in a Lightweight Fault Injector 
(LWFI).  This  fault  injector  uses  a  component-based 
architecture that allows porting of NFTAPE to a variety of 
platforms. 
JIFI  has  been  developed  to  support  the  REE  Project. 
This in-house  development  effort  has  provided  JPL  with 
experience  and  an  understanding  of  fault  injection.  This 
paper  describes  the  JIFI 
injector  and  recent 
enhancements  to  achieve  uniform  fault  distribution  over 
the  user-specified  fault  location  range  and  time  interval. 
The original version was implemented by John Beahan [SI 
on PowerPC boards under the Linux operating system and 
was later ported to the real-time Lynx operating system. In 
this paper,  we  present  an  overview  of  JIFI  including the 
theory  of  operation, uniform  fault  distribution, statistical 
error test, and  experimental methodology. 
fault 
2. Theory of Operation 
JIFI is an. application-level software-implemented fault 
injector,  providing  an  easy-to-use  environment  for  fault 
injection  experiments  including  massive  fault  injection 
campaigns to get statistical data on fault performance. The 
user  needs  to  add  a  few  JIFI  function  calls  inside  the 
application  source codes to  allow  fault  injections.  When 
used  with  a  configuration  file  and  execution  scripts,  a 
campaign  of  a  thousand  fault  injection  experiments  may 
be  automatically run, results  collected  and  evaluated  and 
statistical results obtained in a single day. 
The  basic  approach  is  to  have  a  JIFI  fault  injector 
process  forked  from  the  application  program  for  each 
node in such a way  as to be transparent to MPI and other 
facilities.  By  utilizing  the  system  ptrace()  routines,  JIFI 
can  inject  bit-flip  faults  from  outside  of  the  application 
into the registers and memory of an executing process.  It 
has facilities  for both  1)  time-triggered random faults and 
2 )  location-triggered 'targeted faults.  The time-triggered 
faults  are  injected  into  the  application  at  the  specified 
rates,  but  are  not  repeatable  due  to  randomized  trigger. 
faults,  watchdog 
Control  of  fault  rates,  single/multiple-fault  models, 
multiple-bit-flip 
timeouts,  modeled 
memory  size,  logging  to  files,  verbosity  of  output,  and 
injection  control  is  done  via  setting  parameters  in  a 
centrally-located  set  of  hierarchical  configuration  files. 
The configuration file can be easily customized for testing 
single  or  multiple  MPI  tasks  across  multiple  machines, 
with settings customizable on a per-task basis. 
Two kinds of fault injection locations are supported by 
JIFI: (CPU registers  and  memory.  The Power  PC  604  or 
750  CPU  contains more  than  120 registers.  The  current 
JIFI tool identifies 75 of the registers by the number 0 to 
74, including 32 general purpose registers and 32 floating- 
point registers.  Among the 75 registers, ptrace() does not 
support alteration of the content of register 32, 33, 34, and 
39,  and  thus  faults  cannot  be  injected  into  these  four 
registers. 
The  location-triggered  targeted  faults  are  injected  into 
variables, arrays, data  structures, or subroutines specified 
by  the  user  in  the  application,  and  the  application  can 
control the injection process in a repeatable manner. 
Memory  fault locations can be  grouped  into user area 
and Operating System (OS) kernel  area. At  present, only 
fault  injections 
into  user  areas  are  available.  Fault 
injections  into the  following four user  memory  areas are 
supported: user text, user data, user heap,  and user stack, 
The  text  area  contains  machine  codes  and  read-only 
constants. The data region contains global variables. The 
heap  region  contains  dynamically  allocated  memories 
which are createdallocated by calling malloc() or calloc(). 
The istack region  contains local variables.  Both heap and 
stack memory sizes vary dynamically. 
JIFI tools support uniform fault distribution over time 
for  time-triggered  random  faults  at  specified  rates.  The 
fault  rate  for  each  fault  injection  location  group  is 
specified by  its inverse parameter, average fault injection 
interval  or  mean  time  between  faults  (MTBF).  Each 
injection  region  can  be  assigned  different  MTBF's.  JIFI 
tools, also  support multiple-bit-flip  fault injections.  When 
the  user  sets the  JIFI  parameter  multiBitMem to  1 ,   each 
memory fault injection causes a single bit-flip. 
A.  functional block  diagram of JIFI is shown in Figure 
1. When  swifilnitMPl()  is  called  at  the  beginning  of the 
application  main(),  it  forks JIFI  as  a  parent  process  and 
the application as a child process  for each node. The JIFI 
parent  process  attaches  ptrace  to  the  application  child 
proc.ess, so  that  the  application  process  responds  to  JIFI 
ptrace calls, while executing the application program. The 
JIFI process computes the time to the next fault injection 
based  on  uniform  random  distribution  over  time  using 
fault  rates  (specified  by  MTBF's)  of  all  activated  fault 
injection regions,  and sets the timer to the computed time 
to.invoke the  SIGALARM  signal  upon  timer  expiration. 
Until SIGALARM  is detected, the JIFI process continues 
baby-sitting by tending all the signals received.  Since all 
502 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:00:35 UTC from IEEE Xplore.  Restrictions apply. 
JIFI uarent urocess 
Auulication child Drocess 
I 
Attach ptrace to App. child process & 
do more JIFI setup 
I 
Set timer alarm 
I 
Wait for signals; 
Bounce child 
When the baby-sitting  loop receives  the  SIGALARM 
signal  indicating timer  expiration,  the  JIFI  process stops 
the  application  process  immediately.  It  then  determines 
the fault  location based  on a uniform random  distribution 
over  the  specified  fault  region,  and  injects  the  fault  into 
the  application  process  using  ptrace().  Upon  completion 
of  the  fault  injection,  the  JIFI  process  saves  the  fault 
injection data  and goes back to the beginning of the fault 
injection loop to prepare for the next fault injection. If the 
total  number  of  faults  has  reached  the  user  specified 
number, no more faults are injected. When the application 
finishes  the  program  execution,  it  notifies  JlFl  of 
its 
completion  via  the  App-Finished 
flag  and  swifiEnd() 
function  call.  JIFI  then  writes  fault  injection  reports  for 
each node of the multi-processor  system and exits. 
3. Uniform Fault Distribution 
It  is also desirable to be  able to perform  a wide range 
of both  targeted  and  random  fault  injection  experiments. 
For example, instead of injecting faults randomly over the 
entire  range  of the  memory  locations  and  over the  entire 
duration  of  the  program’s  execution,  the  fault  injector 
should  be  able  to  inject  faults  with  a  uniform  random 
distribution over a specified location range  and execution 
time  window.  Thus,  injection  is  targeted  towards  those 
areas  and  times  representing  the  resources  used  by  a 
particular  routine  or  representing  a  specific  program 
execution  point  or  a  mission  event.  This controlled  fault 
injection enables us to investigate  fault tolerance behavior 
(such  as 
latency,  propagation, 
detection, and recovery) for each software segment. 
sensitivities,  error 
Inject fault to App. child k 
3.1 Uniform fault distribution over time 
App-Finished? 
Write fault injection reports 
and exit 
Figure  1.  JlFl  functional  block  diagram  illustrating 
how faults  are  injected into the  application program 
with uniform distribution in time and space. Since all 
signals  bound  for  the  ptraced  child  process  are 
intercepted,  the  baby-sitting  loop  handles  these 
signals while waiting for the JlFl timer alarm signal. 
the  signals  bound  for  the  ptraced  child  process  are 
intercepted, the baby-sitting loop bounces these signals to 
the  child  process  properly. 
timing  fault 
distribution  is  maintained  independently  for  each  of the 
different  fault-location  types of register, code, data, stack, 
heap, and user-defined  regions. 
Uniform 
An  initial  version  of  JlFl  failed  to  yield  uniform 
random  fault  distribution  over time  (Figure 2). A  simple 
“iterative  floating-point  addition”  program  was  run  200 
times with JIFI configuration parameters of: initDelay = 1 
s  (no  injection  for  the  initial  1  s),  regMTBF  =  I  s 
(register  mean  time  between  fault  injections  is  1  s), 
regInjActive  =  1 
(register  fault  injection  ON),  and 
multiFault  = 1  (1 fault per  run).  The  fault injection time 
distribution  from  the  200  runs  clearly  shows  that  fault 
injections  occur  discretely  at  0.25  s intervals (Figure 2). 