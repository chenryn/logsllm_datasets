Adium 
NOP Size 
 Count 
 Total available bytes 
1 
225 
225 
2 
12 
24 
3 
20 
60 
4 
6 
24 
5 
42 
210 
6 
5 
30 
7 
28 
196 
8 
9 
72 
9 
3 
27 
10 
9 
90 
11 
9 
99 
12 
3 
36 
13 
14 
182 
14 
2 
28 
15 
6 
90 
Total bytes 
1393 
45
Code Injection – Other possibilities 
§  Highly variable between versions, newer BBEdit has a 
different profile. 
§  Requires “complex” shellcode payload. 
§  A mix of operations and jumps. 
§  And jumps only, to reach the usable areas. 
§  Needs to solve some symbols. 
§  And execute a 2nd stage payload. 
§  Non-exec heap from Lion onwards. 
46
Code Injection – Other possibilities 
§  Fourth possibility. 
§  Add a new segment command. 
§  With execution permissions. 
§  And modify entrypoint or its code to start execution 
from there. 
§  We could reorder the segments to make this less visible. 
§  A LC_SEGMENT at the end is highly suspicious. 
47
OS.X/Boubou 
48
OS.X/Boubou 
§  A OS X proof of concept infector/virus. 
§  Tries to infect /Applications. 
§  Two stages infection: 
1) Apps owned by the current user. 
2) Remaining apps (root owned) if privilege escalation 
is successful. 
49
OS.X/Boubou 
§  Uses the library injection technique to infect the main 
binary. 
§  Also supports frameworks. 
§  Two main components: 
– The infector - responsible for infection. 
– The library - contains the malware payload. 
50
OS.X/Boubou 
§  Tries to make life harder for anti-virus. 
§  Steals a random amount of bytes from the infected 
binary code. 
§  Encrypts and stores them at the library. 
§  One library per infected binary/framework. 
§  Clean-up requires more work J. 
51
OS.X/Boubou 
§  Does not use Launch Daemons or Services. 
§  That’s lame, seriously! 
§  Many apps are infected, so there’s a strong probability 
of having our malware payload frequently loaded. 
§  IM & Twitter clients, for example. 
§  The backdoor availability should be equivalent to a 
daemon. 
52
OS.X/Boubou 
§  We can try to escalate privileges. 
§  Our malware payload is executed in app context. 
§  Try to exploit the human element - abuse trust and 
familiarity. 
§  Use authorization services framework to request higher 
privileges. 
§  Flashback does it but from a terminal program. 
§  This is unusual and more suspicious. 
53
OS.X/Boubou 
54
OS.X/Boubou 
§  This app context property is also useful to “attack” Little 
Snitch and other app firewalls. 
§  The connection request starts from a “trusted” 
application. 
§  Strong probability of user accepting connections. 
§  Or we can be smarter! 
§  Parse Little Snitch rules looking for suitable rules (any/
any?). 
55
OS.X/Boubou – How it works 
§  The infector searches for available frameworks inside 
each app and randomly selects one. 
§  Verifies if it’s infectable and if not goes to the next one. 
§  If all previous attempts fail it tries to infect main binary. 
§  Steals a random number of bytes from the __text 
section and stores them inside the library. 
§  This is done by expanding the __LINKEDIT segment (or 
with a new segment, if we wish so). 
56
OS.X/Boubou – How it works 
§  The library has a constructor as its entrypoint. 
§  extern void init(void) __attribute__ ((constructor)); 
§  When the app is started, dyld will load the infected 
library and call the constructor. 
§  Next step is to find its own address (ASLR compatible) 
and the image it stole the bytes from. 
§  Verifies if target was a framework or executable. 
§  Decrypts the stored bytes. 
57
OS.X/Boubou – How it works 
§  And restores them. 
§  Infected application can now run normally. 
§  We can launch a thread with our malware payload. 
§  A botnet with C&C. 
§  Or just hijack the browser(s) as Flashback did. 
§  Or log the IM messages. 
§  Or steal iTunes logins and CC info (http://reverse.put.as/2011/11/22/
evil-itunes-plugins-from-hell/). 
§  Or some other (evil) stuff! 
58
OS.X/Boubou – How it works 
59
OS.X/Boubou – “APT” 
§  It isn't fun if you can’t keep it! 
§  App updates will kill the infection L. 
§  But the probability of losing total access is very low. 
§  Because we infected so many apps. 
§  We can do better! 
§  Let’s continue to abuse features and probabilities… 
60
OS.X/Boubou – “APT” 
§  Sparkle framework (http://sparkle.andymatuschak.org/). 
§  “Sparkle is an easy-to-use software update framework 
for Cocoa developers.”. 
§  Each app has its own framework copy. 
§  We can hijack/swizzle the update process. 
§  And infect again the updated version. 
§  Oh, and while we are there we can escalate privileges: 
ask user password to upgrade. 
61
OS.X/Boubou – “APT” 
§  Other ways to keep access: 
§  Check snare’s awesome work on EFI rootkits. 
§  Install a TrustedBSD rootkit. (http://reverse.put.as/2011/09/18/abusing-os-x-
trustedbsd-framework-to-install-r00t-backdoors/) 
§  Patch the anti-virus. (http://reverse.put.as/2012/02/13/av-monster-the-
monster-that-loves-yummy-os-x-anti-virus-software/) 
§  Classic sysent rootkit or any other type. 
§  Etc... 
62
OS.X/Boubou – AV-Monster 
§  This is a PoC I created a couple of months ago. 
§  Abuses the fact that there is a single point of entry for 
AV products (check Apple Note 2127). 
§  AVs kernel module installs a listener that receives file 
events and pass this info to the userland scanning 
engine. 
§  We can patch the listener. 
§  And it’s game over! 
63
OS.X/Boubou – AV-Monster 
}
    return result;
}
Note: Kauth is not invoked when a program is started by the debugger. You can detect this case using the technique
shown in Technical Q&A QA1361, 'Detecting the Debugger'.
Back to Top 
Anti-Virus Scanner
Kauth allows you to implement an anti-virus program that supports both "on access" and "post modification" file scanning.
The latter is easy: all you need to do is register a listener for the KAUTH_SCOPE_FILEOP scope and watch for the 
KAUTH_FILEOP_CLOSE action. If you see a modified file being closed, you can pass that file to your user space daemon for
scanning. As the scanning proceeds asynchronously in the background, there should be no problems with deadlock.
Implementing "on access" scanning is more challenging. Your approach depends on whether you can always fix a file. If
that's the case, you can listen for KAUTH_FILEOP_OPEN (in the KAUTH_SCOPE_FILEOP) and scan the file immediately after it's been 
opened. However, the result of your listener is always ignored, so there is no way to deny the actor access to that file.
If you can't always fix a file, and thus you may want to deny the actor access to the file, you must listen for the appropriate 
actions in the KAUTH_SCOPE_VNODE scope. If you scan a file, detect that it's infected, and can't fix it, you should return
KAUTH_RESULT_DENY to prevent the actor from using it.
The difficulty with both of these "on access" approaches is avoiding deadlock. See Implementing a Listener for a detailed 
discussion of this problem.
Back to Top 
New Kernel Subsystem
If you're implementing an entirely new kernel subsystem (for example, a sophisticated protocol stack), you may decide to 
implement your authorization using Kauth. There are seven steps to this:
Decide on a scope name. You should use a reverse DNS-style name, as illustrated by the built-in scopes described in 
this document.
1.
Decide on a set of actions. You can choose to use either an enumeration (as done by the file operations scope) or a
2.
64
OS.X/Boubou – AV-Monster 
§  Patches the in-memory kernel module. 
§  The disk version can be easily patched. 
§  At the time of testing no AV had checksum features.  
§  As far as I know it still holds true today. 
§  Argument: if you gain root, all is lost. 
§  It’s valid and somewhat reasonable! 
§  But, how really hard is to gain root access? 
65
Privilege escalation 
§  This presentation assumes that there’s a way to execute 
the malware code. 
§  I’m not much of a exploitation guy. 
§  And assumptions are the economist’s trick to simplify his 
job J. 
§  OS X is less audited so it should be easier to find holes. 
§  But... here is a simple, widespread, lame(!) and still not 
fixed way to do it. 
66
Privilege escalation – A ½ dayz 
§  Apps delegate privileged operations in helper binaries. 
§  These binaries can be overwritten due to bad 
permissions. 
§  Because many applications are installed with drag & 
drop. 
§  Permissions = logged-in user. 
§  Overwrite one of the helpers with a simple shell script or 
a binary of your choice. 
67
Privilege escalation – A ½ dayz 
§  Backup applications. 
§  Require higher privileges to make full backups. 
§  Overwrite one helper binary. 
§  Wait for a backup and voilà, exploit code is executed with 
higher privileges. 
§  Infect the whole system, install your r00tkitz, etc. 
§  Win! 
68
Privilege escalation – A ½ dayz 
§  Carbon Copy Cloner 
69
Privilege escalation – A ½ dayz 
70
Privilege escalation – A ½ dayz 
71
Final remarks 
§  It’s not really hard to write “good” OS X malware. 
§  The (monetary) incentives exist and are increasing. 
§  Number of samples will grow. 
§  Maybe more targeted attacks - Execs love Macs! 
§  Gatekeeper is an interesting move. 
§  But identity theft is not rocket science. 
§  And infection rates could be huge before there’s time to 
cancel the certificate. 
72
Final remarks – Solutions? 
§  Throwing (more) money at the problem doesn’t work. 
§  Reduce the incentives! 
§  Not with long-term prison threats. 
§  With education. 
§  I don’t believe that making users dumb and leaving 
everything to technology is the solution. 
§  We need to make users smart and aware, not dumb and 
passive. 
73
References 
§  http://reverse.put.as 
§  http://ho.ax 
§  Eric Filiol and J.-P. Fizaine. "Max OS X n'est pas invulnérable aux 
virus : comment un virus se fait compagnon". Linux Magazine HS 
32. 
§  http://www.securelist.com/en/analysis/204792227/
The_anatomy_of_Flashfake_Part_1 
§  http://www.intego.com/mac-security-blog/ 
§  http://www.symantec.com/connect/ko/blogs/osxflashbackk-
overview-and-its-inner-workings 
§  Mac OS X ABI Mach-O File Format Reference 
74
Greets to: 
snare, #osxre, Od, put.as team, nullm0dem 
Old sk00l greets to: 
nemo, LMH, KF, mu-b, Dino Dai Zovi, Charlie 
Miller, Carsten Maartmann-Moe 
And a special thanks to noar, for his 
contribution, valuable feedback and ideas 
J 
75
http://reverse.put.as 
PI:EMAIL 
@osxreverser 
#osxre @ irc.freenode.net 
76