# Adium NOP Size Analysis

| NOP Size | Count | Total Available Bytes |
|----------|-------|-----------------------|
| 1        | 225   | 225                   |
| 2        | 12    | 24                    |
| 3        | 20    | 60                    |
| 4        | 6     | 24                    |
| 5        | 42    | 210                   |
| 6        | 5     | 30                    |
| 7        | 28    | 196                   |
| 8        | 9     | 72                    |
| 9        | 3     | 27                    |
| 10       | 9     | 90                    |
| 11       | 9     | 99                    |
| 12       | 3     | 36                    |
| 13       | 14    | 182                   |
| 14       | 2     | 28                    |
| 15       | 6     | 90                    |
| **Total** | **1393** | **45**              |

## Code Injection – Other Possibilities
- **Highly Variable Between Versions**: Newer versions of BBEdit have different profiles.
- **Complex Shellcode Payload**: Requires a more intricate shellcode payload.
- **Mix of Operations and Jumps**: Involves a combination of operations and jumps to reach usable areas.
- **Symbol Resolution**: Needs to resolve some symbols.
- **Second-Stage Payload Execution**: Must execute a second-stage payload.
- **Non-Executable Heap**: From OS X Lion onwards, the heap is non-executable.

### Fourth Possibility
- **Add a New Segment Command**: Introduce a new segment command with execution permissions.
- **Modify Entrypoint or Code**: Adjust the entrypoint or its code to start execution from the new segment.
- **Segment Reordering**: Reorder segments to make the new segment less conspicuous.
- **Suspicious LC_SEGMENT**: A new LC_SEGMENT at the end is highly suspicious.

## OS.X/Boubou
- **OS X Proof of Concept Infector/Virus**: Tries to infect `/Applications`.
- **Two-Stage Infection**:
  1. Apps owned by the current user.
  22. Remaining apps (root-owned) if privilege escalation is successful.

### Infection Techniques
- **Library Injection**: Uses library injection to infect the main binary.
- **Framework Support**: Also supports frameworks.
- **Main Components**:
  - **Infector**: Responsible for infection.
  - **Library**: Contains the malware payload.

### Anti-Virus Evasion
- **Code Obfuscation**: Steals a random amount of bytes from the infected binary code, encrypts, and stores them in the library.
- **One Library per Binary/Framework**: Each infected binary or framework has its own library.
- **Clean-Up Complexity**: Clean-up requires more effort.

### Persistence
- **No Launch Daemons or Services**: Does not use Launch Daemons or Services.
- **High Probability of Loading**: Many apps are infected, increasing the likelihood of the malware payload being frequently loaded.
- **Backdoor Availability**: Backdoor availability is equivalent to a daemon.

### Privilege Escalation
- **App Context Execution**: Malware payload is executed in the app context.
- **Exploit Human Element**: Abuses trust and familiarity to escalate privileges.
- **Authorization Services Framework**: Uses the authorization services framework to request higher privileges.
- **Comparison with Flashback**: Flashback does this from a terminal program, which is more suspicious.

### Firewall Bypass
- **Little Snitch Exploitation**: Connection requests start from a "trusted" application, increasing the probability of user acceptance.
- **Rule Parsing**: Parses Little Snitch rules to find suitable rules (e.g., any/any).

## How It Works
- **Framework Selection**: The infector searches for available frameworks inside each app and randomly selects one.
- **Infectability Check**: Verifies if the selected framework is infectable; if not, it moves to the next one.
- **Main Binary Infection**: If all previous attempts fail, it tries to infect the main binary.
- **Byte Stealing**: Steals a random number of bytes from the `__text` section and stores them in the library.
- **Segment Expansion**: This is done by expanding the `__LINKEDIT` segment or adding a new segment.

### Library Initialization
- **Constructor as Entrypoint**: The library has a constructor as its entrypoint.
- **Dynamic Loader**: When the app starts, `dyld` loads the infected library and calls the constructor.
- **Address and Image Verification**: Finds its own address (ASLR compatible) and the image it stole the bytes from.
- **Framework/Executable Check**: Verifies if the target was a framework or an executable.
- **Byte Decryption and Restoration**: Decrypts and restores the stored bytes, allowing the infected application to run normally.
- **Malware Payload Execution**: Launches a thread with the malware payload, such as a botnet with C&C, browser hijacking, IM message logging, or stealing iTunes logins and credit card information.

## Persistence and Advanced Techniques
- **App Updates and Infection**: App updates will kill the infection, but the probability of losing total access is low due to multiple infections.
- **Sparkle Framework Hijack**: Hijacks the Sparkle update process to reinfect updated versions and escalate privileges by asking for the user's password.
- **Other Persistence Methods**:
  - **EFI Rootkits**: Check snare’s work on EFI rootkits.
  - **TrustedBSD Rootkit**: Install a TrustedBSD rootkit.
  - **Anti-Virus Patching**: Patch the anti-virus software.
  - **Classic Sysent Rootkit**: Use a classic sysent rootkit or other types.

### AV-Monster
- **Proof of Concept**: Created a few months ago.
- **Single Point of Entry**: Abuses the single point of entry for AV products.
- **Kernel Module Listener**: Patches the in-memory kernel module listener.
- **Checksum Features**: At the time of testing, no AV had checksum features, and it still holds true today.
- **Root Access Argument**: Gaining root access means all is lost, but how hard is it to gain root access?

## Privilege Escalation
- **Execution Assumption**: Assumes there is a way to execute the malware code.
- **Simplified Assumptions**: Simplifies the job with assumptions.
- **OS X Auditing**: OS X is less audited, making it easier to find vulnerabilities.
- **Helper Binaries Overwrite**: Apps delegate privileged operations to helper binaries, which can be overwritten due to bad permissions.
- **Backup Applications**: Overwrites a helper binary to exploit during a backup operation, executing code with higher privileges.

### Carbon Copy Cloner
- **Helper Binary Overwrite**: Overwrites a helper binary and waits for a backup to execute the exploit code with higher privileges.
- **System Infection**: Infects the whole system, installs rootkits, etc.

## Final Remarks
- **Ease of Writing Malware**: It is not very difficult to write effective OS X malware.
- **Monetary Incentives**: There are increasing monetary incentives for creating malware.
- **Targeted Attacks**: More targeted attacks may occur, especially against executives who use Macs.
- **Gatekeeper**: Gatekeeper is an interesting move, but identity theft is not complex.
- **Certificate Revocation**: Infection rates could be high before certificates are revoked.

### Solutions
- **Reducing Incentives**: Throwing more money at the problem is ineffective; reducing incentives through education is better.
- **User Education**: Making users smart and aware, rather than dumb and passive, is key.

## References
- [reverse.put.as](http://reverse.put.as)
- [ho.ax](http://ho.ax)
- Eric Filiol and J.-P. Fizaine. "Max OS X n'est pas invulnérable aux virus : comment un virus se fait compagnon". Linux Magazine HS 32.
- [The Anatomy of Flashfake Part 1](http://www.securelist.com/en/analysis/204792227/The_anatomy_of_Flashfake_Part_1)
- [Intego Mac Security Blog](http://www.intego.com/mac-security-blog/)
- [Symantec: OSX.Flashback Overview and Its Inner Workings](http://www.symantec.com/connect/ko/blogs/osxflashbackk-overview-and-its-inner-workings)
- [Mac OS X ABI Mach-O File Format Reference](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachORuntime/Reference/reference.html)

## Greets to:
- snare, #osxre, Od, put.as team, nullm0dem
- Old sk00l greets to: nemo, LMH, KF, mu-b, Dino Dai Zovi, Charlie Miller, Carsten Maartmann-Moe
- Special thanks to noar for his contribution, valuable feedback, and ideas.

## Contact
- [reverse.put.as](http://reverse.put.as)
- Email: PI:EMAIL
- Twitter: @osxreverser
- IRC: #osxre @ irc.freenode.net