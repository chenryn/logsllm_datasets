3(cid:4) Switch
5(cid:4) Resume
SGX
Enclave
Kernel
SMM
Handler
4(cid:4) Live
patching
1(cid:4) Patch transfer
Patch
Server
Reserved Memory
for Live Patching
2(cid:4) Patch
pre-process
the Remote Patch Server,
Fig. 2: High-level architecture of KSHOT. Our approach uses
three secure entities:
the SGX
enclave in a helper application, and the SMM-based kernel
patching environment. The annotations 1–5 trace the life cycle
of trusted live patching. In (1), we transfer the patch; in (2),
we pre-process the binary patch; in (3), we switch to SMM;
in (4), we apply the patch at the binary level; and in (5), we
resume the updated OS.
IV. SYSTEM ARCHITECTURE
KSHOT aims to provide a reliable and low-overhead live
patching framework for untrusted kernels. KSHOT achieves
these goals by using a novel combination of an SGX enclave
within a helper application that securely downloads patched
source code which is built and written to kernel memory by a
custom SMM Handler. By construction, our approach beneﬁts
from very low storage overhead associated with application
checkpointing, rapid deployment of patches with low latency,
and the trustworthy application of patches even when the
kernel’s patching mechanism has been compromised.
First, we assume that an operator wants to update a vulnera-
ble, buggy, or compromised kernel on a system (which we call
the Target Machine). Next, we assume that developers have
created an updated, ﬁxed, or otherwise patched version of the
kernel that the operator wants to apply to the Target Machine.
Brieﬂy, our approach is to leverage an SGX enclave in a helper
application to download an updated binary kernel patch, then
use the SMM Handler to pause the Target Machine’s execution
and apply the patch. This novel combination of system features
allows us to deploy patches with low runtime overhead, low
latency, and without having to trust the underlying OS to
deploy the patch.
Figure 2 summarizes our approach. First, the Target OS
information which is required for compiling compatible binary
patches is gathered and sent
to the remote Patch Server.
Second, an SGX-based application fetches the binary patch
from the remote Patch Server and collects required patching
information (e.g., patch location addresses). The information
is loaded into the reserved memory region to be processed
by the SMM Handler code. Third, we remotely trigger [39] a
patching command, and forced switch current host to SMM
to execute the SMM Handler, which modiﬁes the Target Ma-
chine’s memory. Through a combination of hooking, adding
redirection instructions in target functions, and locating the
binary patch in a reserved memory location (see Section V),
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
3
the patch is applied so that the updated code will be executed
on the next invocation once the SMM Handler completes.
A. KSHOT Components
There are three main components in our KSHOT architec-
ture: the remote Patch Server, system-speciﬁc patch prepro-
cessing in the SGX enclave, and SMM-based kernel patching.
Remote patch server: The remote Patch Server is an in-
dependent, trusted system that constructs and supplies trusted
binary patches. That
is, we assume that developers have
already provided a ﬁxed or updated binary kernel
image
that we seek to apply to the Target Machine. The Patch
Server communicates with the target machine to obtain OS
information, which is used to build a compatible binary kernel
image, allowing for the creation of consistent binary patches.
SGX-based patch preparation: This component includes
kernel information collection and binary patch preprocessing.
These processes take place in an SGX enclave. The data
transmitted between SGX and the Patch Server, as well as
between SGX and SMM, are encrypted to protect patch code
from malicious changes. Leveraging SGX for patch prepro-
cessing provides several beneﬁts: First, it reduces the SMM
workload and thus the time during which the OS is paused
to execute the SMM Handler. Second, it reduces the amount
of software that must be developed in SMM (e.g., bespoke
network drivers must be implemented to transfer data if all
processing is handled in SMM). Finally, because of the large
semantic gap between SMM and the host environment [40], it
is more natural to gather kernel information from the software
layer within an SGX-enabled helper application.
SMM-based kernel patching: This component includes
patch decryption, patch function integrity checking, and binary
patching. KSHOT promises consistency of kernel execution
since the hardware automatically saves and restores architec-
tural state (e.g., registers) while switching to SMM. This saves
substantial time and resource overhead compared to software-
based system state saving and restoration (i.e., checkpointing)
in previous live patching approaches. In addition, if a kernel
error occurs after patching [22], this component can undo the
patch and rollback the system. While the patch operations are
processed in SMM, the target OS is halted (which precludes
simultaneous state changes). Because this activity is carried
out with SMM support, even kernel-level attacks cannot com-
promise patching operations. In addition to a patching module,
KSHOT can leverage a kernel introspection module for kernel
protection.
B. Qualitative Analysis of KSHOT
We design a system that enables reliable and efﬁcient patch-
ing. Current live patching systems, like kpatch and Ksplice,
depend on the correct execution of kernel functions, and thus
implicitly trust the kernel and patching mechanism. As a result,
a compromised, buggy, or vulnerable kernel may lead to failed
deployments. To address this issue, we leverage SMM to
process patches, which has two advantages. First, SMM is
an isolated execution environment which cannot be accessed
by host applications, including kernel rootkits or malware:
the SMM Handler cannot be disrupted by such activities.
Second, switching to SMM pauses the host system and restores
the architectural state once the SMM Handler completes. We
thus avoid implementing expensive checkpointing mechanisms
(as in kpatch or KUP), considerably reducing storage over-
head. This represents a tradeoff between two conﬂicting non-
functional quality properties (space and time); we evaluate this
tradeoff empirically in Section VI.
Since SMM effectively pauses the OS’s execution, we must
carefully choose which aspects of our system execute in
the SMM Handler. We propose to implement only required
functionalities in SMM (i.e., memory read/write capabilities)
to quickly deploy patches once they are made available to
the SMM Handler. Separately, we use an SGX enclave in
userspace to securely download the patch and marshal the
patch data into the SMM Handler. This SGX enclave allows
the patch to be downloaded securely using the system’s
existing networking stack. Together, the SGX enclave and
SMM Handler provide a low overhead, high efﬁciency, secure
mechanism for applying kernel patches at runtime.
V. KSHOT DESIGN AND IMPLEMENTATION
The goal for KSHOT is to live patch an OS kernel with
(1) minimal downtime, (2) minimal overhead, (3) support
for compromised kernels, and (4) support for consistency
without being kernel-speciﬁc. We implemented a prototype of
KSHOT based on Intel SGX and x86 SMM. The SGX-based
TEE supports receiving and preprocessing patches, providing
security without the full overhead of SMM. Encrypted patches
are processed in SMM and placed in an executable memory
space. Via SMM,
the system stores the state of runtime
processes, restoring that state after applying the patch when
SMM completes. This allows for the deployment of a trusted
binary patch via a possibly-compromised target system.
A. Binary Patch Preparation
We leverage a trusted remote server to prepare binary kernel
patches. First, basic information about the OS, including the
kernel version, conﬁguration, and compilation ﬂags sufﬁcient
to rebuild the binary image, are all transferred to the remote
server. The remote server then builds pre-patch and post-patch
versions of the kernel binary using that same compilation
information. A binary diff is sent back to the SGX enclave
on the Target Machine.
In KSHOT, kernel vulnerabilities are patched via function-
level changes. We thus patch the code for the affected func-
tions, rather than replacing either the entire kernel image or
just a few vulnerable instructions (see Section II). Replacing
an entire compromised kernel with a patched one (as in KUP)
is a powerful solution, but
incurs a signiﬁcant storage
overhead. By contrast, ﬁxing individual vulnerable instructions
is more ﬂexible and has been demonstrated in previous work
(e.g., KARMA [9] and kGraft [11]). However, instruction-
level approaches also have signiﬁcant drawbacks. First, current
instruction-level patching relies on the OS kernel to monitor
it
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
4
the state of runtime functions and to decide if the instructions
can be patched without introducing inconsistencies. Second,
challenges such as identifying instructions in target func-
tions [41] in the face of compiler optimizations are difﬁcult,
frequently leading to patching failures [42].
Identifying Target Functions: Given the pre- and post-
patch binary kernel
image, we extract all corresponding
patched functions. While this process is complicated by com-
piler optimizations [42], we do not claim any novelty in our
identiﬁcation of the functions that must be updated, instead
making use of a combination of existing algorithms and tech-
niques. Our prototype builds a source-level call graph [43],
[44] of the kernel by using the codeviz tool [45]. We also
make use of IDA Pro [46] to create a binary-level call graph of
the kernel binary image. Differences between the source- and
binary-level call graphs illuminate certain compiler optimiza-
tions [42], including inlining, which is particularly common in
OS kernels. Because functions may be transitively inlined, we
employ a worklist algorithm that iteratively identiﬁes impli-
cated functions until no new implicated functions can added.
KSHOT makes use of existing binary signature matching
methods such as iBinHunt [47] and FIBER [42] to align and
identify relevant sections of the binary kernel image.
Patching Target Functions: After we identify and analyze
all relevant
target functions, we must make the memory
containing the (binary) newly-patched instructions accessible
to the running kernel. In general, we cannot directly replace
vulnerable function instruction memory with a patched func-
tion without compromising consistency. To solve this problem,
we use trampolines (cf. [24]): We store the patched functions
in a reserved memory space and link old code to the new
functions by replacing the ﬁrst instruction in the target function
with a jmp instruction. The conﬁgurations of reserved memory,
including memory size, location and page attributes, are all
saved in SMM code in advance via the patch server. A basic
trampoline approach addresses calls to the beginning of a
function but does not address internal jumps and branches to
intermediate labels. This is because the offset for each jump
and branch in the post-patch binary may have changed. Thus,
For the purposes of discussion and evaluation, we group
implicated functions into three broad categories (of increasing
difﬁculty to support via kernel live patching). Type 1 functions
do not involve inlining. Type 2 functions do involve inlining.
Type 3 functions modify global or shared variables.
For Type 3 analyses, we consider global or shared variables
changed in the patch. Such a variable might be deleted,
added, or modiﬁed. If the variable’s size is not modiﬁed,
the patch code is unaffected. However, if storage space for
a variable is inserted or deleted, care must be taken to avoid
inconsistent handling of that data between pre- and post-patch
code. To handle such variable modiﬁcations, we change the
corresponding variable and type in kernel memory (i.e., in data
and text segments). In general, signiﬁcant changes to storage
layouts (e.g., adding or removing a ﬁeld in a widely-used data
structure) may result in patch application failures; we evaluate
this empirically in Section VI.
we must change these offsets to retain required functionality
via the standard approach of calculating label differences.
KSHOT is a system for kernel-space patches that need
not trust the operating system: our focus is on deploying a
compiled binary patch in a compromised system (e.g., via
hardware support) and we are agnostic to the underlying
standard binary patching mechanism.
Supporting Kernel Tracing: Recent versions of the Linux
kernel include a special form of tracing support [48] that
is relevant to kernel live patching. When the trace attribute
is enabled, more than half of functions (23, 000 of 32, 000
in Linux 3.14) are compiled with a special 5-byte trace
instruction sequence which can be dynamically changed at
runtime by the kernel itself (not by our live patching). KSHOT
must be aware of such tracing instructions to avoid conﬂicts.
Naively patching an entire function containing such a tracing
sequence will result in incorrect execution or other memory
errors at runtime. Since the tracing instructions are located at
a ﬁxed offset from the entry of the function, our solution is to
identify such 5-byte trace instruction signatures and patch the
instructions after them, leaving the tracing itself untouched.
B. SGX-based Patch Preparation
KSHOT uses Intel SGX hardware support
to safeguard
trusted live patch preprocessing. The preparation of executable
binary patches proceeds in a trusted environment before the
processed patch is made available to the SMM-based live
patching module. In this subsection, we describe our SGX
enclave behavior. We assume that collecting information about
the current OS kernel can be done safely at boot time, and that
such information can be passed to the remote patch server that
produces the binary patch. In addition, we encrypt communi-
cation when obtaining the binary patch from the remote server.
This is also particularly relevant when passing data between
the SMM handler and SGX enclave. Both communications
are handled by untrusted applications or network drivers—we
encrypt data while in transit.
Due to the isolation properties of Intel SGX enclaves and
SMRAM, there is no direct channel for data transmission
between them. To exchange data between these two entities,
we use shared memory for encrypted data transmission. In
general, unless care is taken, there may not be a spare kernel
memory region available. In addition, if we live patch an
existing kernel function, it may change the function size and
cause a kernel consistency issue. We address these issues by
reserving a physical memory space for KSHOT at boot time.
Memory Protection and Isolation: We ﬁrst conﬁgure the
boot loader (e.g., grub) to reserve a suitable kernel memory
allocation space (18MB for our prototype implementation).
We also add page attribute operation code to the paging init
function to provide the appropriate access limitations for that
memory. The reserved memory includes three logical parts:
mem RW, mem W, and mem X. The small mem RW is a
read/write area used for key exchange. Our prototype uses
the Difﬁe-Hellman key exchange algorithm [49]. The larger
mem W region is write-only and is used for storing the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
5
0
1
2
3
4
5
6
7
sequence
operation