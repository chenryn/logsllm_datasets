### High-Level Architecture of KSHOT

KSHOT is designed to provide a reliable and low-overhead live patching framework for untrusted kernels. The system leverages a combination of an SGX enclave within a helper application and a custom SMM (System Management Mode) handler to securely download, preprocess, and apply binary patches. This approach ensures that patches can be applied even if the kernel's patching mechanism has been compromised.

#### Life Cycle of Trusted Live Patching

1. **Patch Transfer**: The patch is transferred from the remote Patch Server.
2. **Patch Preprocessing**: The binary patch is preprocessed in the SGX enclave.
3. **Switch to SMM**: The system switches to SMM to execute the SMM Handler.
4. **Apply the Patch**: The patch is applied at the binary level.
5. **Resume the OS**: The updated operating system resumes execution.

### System Architecture

KSHOT aims to provide a reliable and low-overhead live patching framework for untrusted kernels. It achieves this by using a novel combination of an SGX enclave within a helper application and a custom SMM handler. This approach offers several benefits:
- **Low Storage Overhead**: Minimal storage overhead associated with application checkpointing.
- **Rapid Deployment**: Low-latency deployment of patches.
- **Trustworthy Application**: Secure patch application even when the kernelâ€™s patching mechanism is compromised.

#### Assumptions
- An operator wants to update a vulnerable, buggy, or compromised kernel on a target machine.
- Developers have created an updated, fixed, or otherwise patched version of the kernel.

#### Approach
- **Step 1**: Gather and send the target OS information required for compiling compatible binary patches to the remote Patch Server.
- **Step 2**: An SGX-based application fetches the binary patch from the remote Patch Server and collects necessary patching information (e.g., patch location addresses). This information is loaded into a reserved memory region for processing by the SMM Handler.
- **Step 3**: Remotely trigger a patching command, switch the host to SMM, and execute the SMM Handler to modify the target machine's memory. The patch is applied so that the updated code will be executed on the next invocation once the SMM Handler completes.

### KSHOT Components

There are three main components in the KSHOT architecture:
1. **Remote Patch Server**:
   - An independent, trusted system that constructs and supplies trusted binary patches.
   - Communicates with the target machine to obtain OS information and build a compatible binary kernel image.

2. **SGX-based Patch Preparation**:
   - Includes kernel information collection and binary patch preprocessing.
   - Data transmitted between the SGX enclave and the Patch Server, as well as between the SGX enclave and SMM, are encrypted.
   - Benefits: Reduces SMM workload, minimizes the amount of software developed in SMM, and simplifies kernel information gathering.

3. **SMM-based Kernel Patching**:
   - Includes patch decryption, integrity checking, and binary patching.
   - Ensures consistency of kernel execution by automatically saving and restoring architectural state during SMM.
   - Can undo the patch and rollback the system if a kernel error occurs after patching.
   - Provides a secure environment for patch operations, even in the presence of kernel-level attacks.

### Qualitative Analysis of KSHOT

KSHOT is designed to enable reliable and efficient patching. Unlike current live patching systems like kpatch and Ksplice, which depend on the correct execution of kernel functions and implicitly trust the kernel, KSHOT leverages SMM to process patches. This provides two key advantages:
- **Isolation**: SMM is an isolated execution environment, inaccessible to host applications, including kernel rootkits or malware.
- **State Preservation**: Switching to SMM pauses the host system and restores the architectural state upon completion, avoiding the need for expensive checkpointing mechanisms.

### Design and Implementation

The goal of KSHOT is to live patch an OS kernel with:
- **Minimal Downtime**
- **Minimal Overhead**
- **Support for Compromised Kernels**
- **Consistency Without Being Kernel-Specific**

#### Binary Patch Preparation

- **Step 1**: Basic OS information (kernel version, configuration, compilation flags) is transferred to the remote server.
- **Step 2**: The remote server builds pre-patch and post-patch versions of the kernel binary.
- **Step 3**: A binary diff is sent back to the SGX enclave on the target machine.

#### Patching Target Functions

- **Function-Level Changes**: KSHOT patches the code for affected functions rather than replacing the entire kernel image.
- **Trampolines**: Patched functions are stored in a reserved memory space, and old code is linked to new functions via jmp instructions.
- **Global/Shared Variables**: Carefully handle modifications to global or shared variables to avoid inconsistencies.

#### Supporting Kernel Tracing

- **Trace Instructions**: KSHOT must be aware of special 5-byte trace instruction sequences in recent Linux kernels to avoid conflicts.
- **Solution**: Identify and patch instructions after the trace sequence, leaving the tracing itself untouched.

#### SGX-based Patch Preparation

- **Trusted Environment**: SGX enclaves provide a trusted environment for preparing executable binary patches.
- **Data Encryption**: Communication between the SGX enclave and the SMM handler is encrypted.
- **Memory Reservation**: A physical memory space is reserved at boot time to address potential kernel consistency issues.

### Memory Protection and Isolation

- **Boot Loader Configuration**: Configure the boot loader to reserve suitable kernel memory allocation space.
- **Page Attributes**: Add page attribute operation code to provide appropriate access limitations.
- **Reserved Memory Regions**: Include read/write, write-only, and executable regions for key exchange, data storage, and patch execution.

This structured and detailed approach ensures that KSHOT can effectively and securely live patch untrusted kernels with minimal downtime and overhead.