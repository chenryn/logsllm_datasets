[23] Karim El Defrawy and Joshua Lampkins. Founding
digital currency on secure computation (full version of
this paper). use your favorite search engine to (cid:12)nd it.
[24] Peter Bogetoft et al. Secure multiparty computation
goes live. In Financial Cryptography, pages 325{343,
2009.
[25] Sarah Meiklejohn et al. A (cid:12)stful of bitcoins:
Characterizing payments among men with no names.
IMC, 2013.
[26] Ittay Eyal and Emin Gun Sirer. Majority is not
enough: Bitcoin mining is vulnerable. In Financial
Cryptography, 2014.
[27] Yair Frankel, Yiannis Tsiounis, and Moti Yung.
\indirect discourse proof" : Achieving e(cid:14)cient fair
o(cid:11)-line e-cash. In ASIACRYPT, pages 286{300, 1996.
[28] Matthew K. Franklin and Moti Yung. Communication
complexity of secure computation (extended abstract).
In STOC, pages 699{710, 1992.
[29] Juan A. Garay and Yoram Moses. Fully polynomial
byzantine agreement for n > processors in t + 1
rounds. SIAM J. Comput., 27(1):247{290, 1998.
[30] Amir Herzberg, Stanislaw Jarecki, Hugo Krawczyk,
and Moti Yung. Proactive secret sharing or: How to
cope with perpetual leakage. In CRYPTO, pages
339{352, 1995.
[31] Wen-Shenq Juang. A practical anonymous o(cid:11)-line
multi-authority payment scheme. Electronic Commerce
Research and Applications, 4(3):240{249, 2005.
[32] Dan Kaminsky. Some thoughts on bitcoin, 2011. http:
//www.slideshare.net/dakami/bitcoin-8776098.
[33] Jonathan Katz, Ueli Maurer, Bj(cid:127)orn Tackmann, and
Vassilis Zikas. Universally composable synchronous
computation. In TCC, pages 477{498, 2013.
[34] Anna Lysyanskaya and Zul(cid:12)kar Ramzan. Group blind
digital signatures: A scalable solution to electronic
cash. In Financial Cryptography, pages 184{197, 1998.
[35] Robert McMillan. $1.2m hack shows why you should
never store bitcoins on the internet, 2013. http://
www.wired.com/wiredenterprise/2013/11/inputs/.
[36] Ian Miers, Christina Garman, Matthew Green, and
Aviel D. Rubin. Zerocoin: Anonymous distributed
e-cash from bitcoin. In IEEE Symposium on Security
and Privacy, pages 397{411, 2013.
[37] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic
cash system, 2008. http://bitcoin.org/bitcoin.pdf.
[38] Rafail Ostrovsky and Moti Yung. How to withstand
mobile virus attacks (extended abstract). In PODC,
pages 51{59, 1991.
[39] Torben P. Pedersen. Non-interactive and
information-theoretic secure veri(cid:12)able secret sharing.
In CRYPTO, pages 129{140, 1991.
[40] Berry Schoenmakers. A simple publicly veri(cid:12)able
secret sharing scheme and its application to electronic.
In CRYPTO, pages 148{164, 1999.
[41] David Schultz. Mobile Proactive Secret Sharing. PhD
thesis, Massachusetts Institute of Technology, 2007.
[42] Adi Shamir. How to share a secret. Commun. ACM,
22(11):612{613, 1979.
[43] Markus Stadler, Jean-Marc Piveteau, and Jan
Camenisch. Fair blind signatures. In EUROCRYPT,
pages 209{219, 1995.
APPENDIX
A. CONVERT_SHARINGS SECURITY PROOF
We prove security of the protocol Convert Sharings in the
framework of Universal Composability (UC) [17]. A real
world protocol is said to be UC-secure if an environment, Z,
that provides inputs and receives outputs from the protocol
cannot distinguish whether it is interacting with the real (or
hybrid) protocol or an ideal one that uses an ideal functional-
ity performing the same task as the real world protocol. We
compare the ideal protocol with a hybrid protocol which re-
places calls to sub-protocols with calls to sub-functionalities.
The ideal functionality FCS for Convert Sharings is:
Description of FCS.
1.
Input Phase
1.1 Z instantiates each server Si with its input to
′
, K, n, t and its
the protocol, which is ℓ, ℓ
share of the degree d = ℓ + t − 1 polynomial
] × [K]. Z initializes
H (k)
the adversary A with auxiliary input z.
1.2 All servers send the inputs they received from
Z to FCS. If inputs are inconsistent, FCS out-
puts (abort) and aborts.
for each (a, k) ∈ [ℓ
′
a
2. Corruption Phase
a
b
′
and for each (b, k) ∈ [ℓ] × [K].
b
, K) to A.
(i) for each corrupt Si
A may iteratively request to corrupt servers by
sending messages (corrupt, Si) to FCS. For each
such corruption, FCS sends H (k)
a (i) to A for each
(a, k) ∈ [ℓ
] × [K] and sends (corrupt) to Si. After
each corruption, A may provide new input shares
for Si to FCS.
3. Output Phase
3.1 FCS sends (Shares?, ℓ, ℓ
′
3.2 A sends FCS shares V (k)
3.3 FCS interpolates from the shares of H (k)
] × [ℓ] × [K].
re-
ceived from the honest servers the points
a (−b) for each (a, b, k) ∈ [ℓ
H (k)
+ t − 1 polynomials
V (k)
uniformly at random, subject to the con-
b
straint that they agree with the shares received
from A and they satisfy V (k)
a (−b)
for each (a, b, k) ∈ [ℓ
′
(i) to each honest Si
for each (b, k) ∈ [ℓ] × [K]. FCS provides out-
3.5 FCS provides outputs V (k)
3.4 FCS chooses degree d
′
(−a) = H (k)
] × [ℓ] × [K].
b
′
′
= ℓ
11puts to the corrupt servers as speci(cid:12)ed by the
adversary.
Note that the functionality does not include a post-output
corruption phase or a post-execution corruption phase as
in [16]. The reason for eliminating post-output corruption
is that the adversary chooses its output, and hence learns
no new information in the output phase. Without loss, we
can assume that the adversary only corrupts after receiving
new information. (This follows the convention used in [22].)
Post-execution corruption is not needed when secure era-
sures are assumed, as stated in [16]. The reason is that mes-
sages sent and received during the protocol can be deleted
after the protocol is (cid:12)nished. Thus the adversary has no
information to learn from the protocol execution after the
protocol has (cid:12)nished.
i
a
and U (k)
The ideal world adversary (simulator) is given below. The
intuition behind it is as follows: The simulator begins by
emulating the sub-functionalities as if generating sharings
for (i, k) ∈ [n] × [K]. In
of polynomials H (K+1)
reality, the simulator simply provides to the hybrid-world
adversary the shares it requested, and whenever the adver-
sary requests to corrupt another party, the simulator chooses
random shares. The only di(cid:14)culty occurs in step 11. At this
point, the simulator has already provided the adversary with
every share of eHa and eUi. Thus the shares that the simula-
eHa is a sum of polynomials with H (K+1)
tor provides to the adversary upon corruption must match
with what has already been sent. The key point here is that
as a summand, and
only exists in the hybrid execution, not in FCS. So
H (K+1)
upon corruption, the simulator forwards the shares of H (k)
for k ∈ [K] received from FCS to the adversary, and then
chooses a share of H (K+1)
so that the sum matches with
the share of eHa that has already been sent. The process is
similar for the eUi.
a
a
a
a
Before describing the simulator, we need to describe the
except that only degree d (and no degree 2d) sharings will
sub-functionalities used. The functionality FShareB used in
the hybrid model will be essentially the same as the function-
ality FRobustShare from [22]. The functionalities FRandom and
FRandomB will be essentially the same as Fdouble from [22],
be created, and for FRandom the batch size is 1. Both FShareB
and FRandomB will be modi(cid:12)ed so that the batch size (ℓ or
′
ℓ
) is an input to the functionality.
The functionality FOpen receives from all players the shares
of the sharing(s) to be opened, interpolates the secret(s), and
then sends the secret(s) to each player and to the adversary.
′
′
the auxiliary input z that S received from Z.
Simulator S for Convert Sharings.
1. S internally runs A with the inputs (ℓ, ℓ
2. S, emulating FRandomB , sends (Shares?, ℓ
′
, K) and
, ℓ) to A
represents the number of sharings being
(where ℓ
generated and ℓ represents the batch size used for
those sharings).
3. A sends shares H (K+1)
(i) to S for each corrupt Si
and each a ∈ [ℓ
4. S, emulating FShareB , sends (Shares?, {1, . . . , n},
) to A (where {1, . . . , n} represents the
n(K + 1), ℓ
identities of the dealers, n(K + 1) represents the
].
a
′
′
′
j
i
K
j
j
∑
∑
(i) + U (K+1)
K
k=1 r(k)U (k)
a (i) + H (K+1)
a
to the constraint
′
of degree d
5. A sends shares U (k)
(i) for each corrupt Si.
polynomi-
using the polynomials already received from A.
repre-
number of sharings being generated, and ℓ
sents the batch size used for those sharings).
(i) to S for each corrupt Si and
each (j, k) ∈ [n]× [K + 1]. A also sends polynomials
to S for each corrupt Si and each
U (k)
k ∈ [K + 1].
6. S, emulating FRandom, sends (Shares?, K) to A
(where K represents the number of sharings being
generated).
7. A sends shares R(k)(i) to S for each corrupt Si and
each k ∈ [K].
8. Emulating FOpen, S receives (again) from A the
shares received in the previous step and sends uni-
formly random values {r(k)}k∈[K] to A.
9. A may iteratively request to corrupt servers. Each
(corrupt, Si) message that S receives from A is for-
warded to FCS, and shares H (k)
a (i) that S receives
10. S chooses degree d polynomials eHa that are ran-
from FCS are forwarded to A.
that eHa(i) =
∑
dom subject
als eUi that are random subject to the constraint that
k=1 r(k)H (k)
For each honest Sj, S chooses degree d
eUj(i) =
rupt Si and eUj(−a) = eHa(j) for each a ∈ [ℓ
each corrupt Si, de(cid:12)ne eUi =
(i) for each cor-
]. For
i +U (K+1)
11. Emulating the honest servers, S sends messages for
the honest servers as in step 7 of Convert Sharings,
with A emulating the (recipient) corrupt servers.
More speci(cid:12)cally, A iteratively selects each honest
server to send messages to dishonest servers in se-
quence, with S sending messages on behalf of the
honest servers according to the protocol speci(cid:12)ca-
tion of Convert Sharings, and and after each receipt
of messages from an honest server, A may choose
to iteratively corrupt servers. With each server cor-
ruption, the following steps are performed:
11.1 S forwards the corruption request from A to
FCS.
a (q) for (a, k) ∈
∑
] × [K] of
′
[ℓ
server Sq
corrupt
from FCS, S computes shares H (K+1)
(q) =
11.3 S chooses uniformly random polynomials U (k)
for k ∈ [K] that are consistent with the shares
already received from the adversary in step 5
∑
(−a) = H (k)
a (q) for each a ∈
and satisfy U (k)
[ℓ
k=1 r(k)U (k)
=
(−a) = H (K+1)
(q) for each a ∈ [ℓ
for k ∈ [K + 1] to A.
q − eUq.
(Note that by way eUq was de(cid:12)ned, this implies
a (q) − eHa(q).
11.4 S computes U (k+1)
11.5 S sends H (k)
a (q) for (a, k) ∈ [ℓ
′
11.2 Upon receiving shares H (k)
] × [K + 1] and
K
k=1 r(k)H (k)
K
k=1 r(k)U (k)
U (K+1)
(newly)
].)
U (k)
q
′
].
′
i
q
q
q
a
′
a
q
′
K
12. After all honest servers have sent their shares in the
previous step, the A sends the shares of the dis-