原文地址：
# 前言
Zimperium
zLabs的研究员最近披露了一个影响多个高权限Android服务的关键漏洞。Google将其指定为CVE-2018-9411并在[7月安全更新](https://source.android.com/security/bulletin/2018-07-01)（2018-07-01补丁级别）中进行了修补，包括[9月安全更新](https://source.android.com/security/bulletin/2018-09-01)（2018-09-01补丁级别）中的其他补丁。
我为此漏洞编写了一个PoC，来演示如何使用它来从常规非特权应用程序中提升权限。
这篇博文将介绍漏洞和漏洞利用的技术细节。以及漏洞相关背景、漏洞相关的服务和漏洞详情。至于为什么选择某个特定服务作为其他服务的攻击目标，文中会详细阐述。
# Project Treble
Project
Treble对Android内部运作方式进行了大量更改。其中有一个较大的变更，使得许多系统服务都被碎片化了。以前，服务包含AOSP（Android开源项目）和供应商代码。在Project
Treble之后，这些服务全部分为一个AOSP服务以及一个或多个供应商服务，称为HAL服务。有关更多背景信息，参阅[我的BSidesLV演讲](https://blog.zimperium.com/zlabs-bsides-las-vegas-android-security-helps-fails/)和[我之前的博文](https://blog.zimperium.com/cve-2017-13253-buffer-overflow-multiple-android-drm-services/)。
## HIDL
Project Treble引入的分离机制导致了IPC（进程间通信）总数的增加;
先前在AOSP和供应商代码之间通过相同过程传递的数据现在必须通过AOSP和HAL服务之间的IPC。因为Android中的大多数IPC通过[Binder](https://elinux.org/Android_Binder)通信，所以谷歌决定新的IPC也应该这么做。
但仅仅使用现有的Binder代码是不够的，Google也决定进行一些修改。首先，他们引入了[多Binder域](https://source.android.com/devices/architecture/hidl/binder-ipc#contexts)，以便将这种新型IPC与其他域分开。更重要的是，他们引入了[HIDL](https://source.android.com/devices/architecture/hidl-cpp)\- 一种通过Binder
IPC传递的数据的新格式。这种新格式有一组新的库集，专门用于AOSP和HAL服务之间的IPC新Binder域。其他Binder域仍使用旧格式。
与旧的HIDL格式相比，新HIDL格式的操作有点像层。两者的底层都是Binder内核驱动程序，但顶层是不同的。对于HAL和AOSP服务之间的通信，使用新的库集;
对于其他类型的通信，使用旧的库集。两组库都包含的代码非常相似，以至于某些原始代码甚至直接
被复制到新的HIDL库中（虽然我个人觉得这样复制粘贴并不好）。尽管每个库的用法并不完全相同（你不能简单地用一个替换另一个），但它仍然非常相似。
两组库集都表现为在Binder事务中作为C++对象传输的数据。这意味着HIDL为许多类型的对象引入了自己的新接口，包括了从相对简单的对象（如表示字符串的对象）到更复杂的实现（如文件描述符）或对其他服务的引用。
## 共享内存
Binder
IPC一个重要的方面是使用了共享内存。为了保持简单性和良好性能，Binder将每个事务限制为最大1MB。如果进程希望通过Binder在彼此之间共享大量数据，进程会使用共享内存。
为了通过Binder共享内存，进程利用了Binder用来共享文件描述符的功能。文件描述符可以使用mmap映射到内存，并允许多个进程通过共享文件描述符来共享相同的内存区域。常规Linux（非Android）的需要面对的一个问题是：文件描述符通常由文件提供，那如果进程想要共享匿名内存区域会怎么样？对于这种情况，Android使用了[ashmem](https://elinux.org/Android_Kernel_Features#ashmem)，它允许进程在不涉及实际文件的情况下分配内存来备份文件描述符。
通过Binder共享内存是HIDL和旧库集之间不同实现的一个例子。在这两种情况下，最终操作都是相同的：一个进程将ashmem文件描述符映射到其内存空间，通过Binder将该文件描述符传输到另一个进程，然后另一个进程将其映射到自己的内存空间。但是处理这个的对象的接口是不同的。
在HIDL的情况下，共享内存的一个重要对象是 _hidl_memory_
。如[源代码中所述](https://android.googlesource.com/platform/system/libhidl/+/android-8.1.0_r29/base/include/hidl/HidlSupport.h#199)：“hidl_memory是一种可用于在进程之间传输共享内存片段的结构”。
# 漏洞
让我们来仔细看看hidl_memory的成员：
来自system / libhidl / base / include / hidl /
HidlSupport.h的片段（[源代码](https://android.googlesource.com/platform/system/libhidl/+/android-8.1.0_r29/base/include/hidl/HidlSupport.h#276)）
  * _mHandle_ \- 一个[句柄](https://source.android.com/devices/architecture/hidl-cpp/types#handle)，是一个包含文件描述符的HIDL对象（在这种情况下只有一个文件描述符）。
  * _mSize_ \- 要共享的内存大小。
  * _mName_ \- 应该代表内存的类型，但只有ashmem类型会起作用。
当通过HIDL中的Binder传输这样的结构时，复杂对象（如 _hidl_handle_ 或 _hidl_string_
）有自己的自定义代码用于读写数据，而简单类型（如整数）则“原样”传输。这意味着它的内存大小将作为64位整数传输。另一方面，[在旧的库集中，使用32位整数](https://android.googlesource.com/platform/frameworks/native/+/android-8.1.0_r29/libs/binder/IMemory.cpp#318)。
这看起来就很奇怪了，为什么内存的大小是64位？为什么不像和旧的库集不一样？32位进程又如何处理这个问题呢？让我们看一下映射hidl_memory对象的代码（针对ashmem类型）：
来自system / libhidl / transport / memory / 1.0 / default / AshmemMapper.cpp的片段
（[源代码](https://android.googlesource.com/platform/system/libhidl/+/android-8.1.0_r29/transport/memory/1.0/default/AshmemMapper.cpp#30)）
有趣！没有任何关于32位进程的处理，甚至没有提到内存大小是64位。
那这中间发生了什么呢？mmap签名中长度字段的类型是size_t，这意味着它的位数与进程的位数相匹配。在64位进程中没有问题，一切都是64位。而在32位进程中，它的大小则被截断为32位，因此
**仅会使用低32位** 。
也就是说，如果32位进程接收到大小大于UINT32_MAX（0xFFFFFFFF）的hidl_memory，则实际的映射内存区域将小得多。例如，对于大小为0x100001000的hidl_memory，内存区域的大小将仅为0x1000。在这种情况下，如果32位进程基于hidl_memory大小执行边界检查，结果肯定是失败，因为它们会错误地指示内存区域跨越整个内存空间。这就是漏洞所在！
## 寻找目标
即然有了漏洞，那现在就试着找到一个利用目标。  
寻找符合以下标准的HAL服务：
  1. 编译为32位。
  2. 接收共享内存作为输入。
  3. 在共享内存上执行边界检查时，也不会截断大小。例如，以下代码就没有风险，因为它对截断的size_t执行边界检查：
这些是触发漏洞的基本要求，但我认为还有一些可选的更可靠的目标：
  1. 在AOSP中有默认接口。虽然供应商最终负责所有HAL服务，但AOSP确实包含某些供应商可以使用的默认接口。在许多情况下，当存在这样的接口时，供应商并不愿意修改它，最终还是原样照搬。这使得这样的目标更有趣，因为它可能与多个供应商相关，而不是特定于供应商的服务。
应该注意的是，尽管HAL服务被设计为只能由其他系统服务访问，但事实并非如此。有一些特定的HAL服务实际上可以由常规的非特权应用程序访问，每个服务都有其自身的原因。因此，目标的最后一个要求是：
  1. 可以从无特权的应用程序直接访问。否则一切都只能存在于假设中，因为我们将讨论这样一个目标，只有在你已经破坏了另一个服务的情况下才能访问它。
幸运的是，有一个满足所有这些要求的HAL服务： _android.hardware.cas_ ，AKA _MediaCasService_ 。
# CAS
CAS（Conditional Access
System），表示条件访问系统。CAS本身大部分超出了本博文的范围，但总的来说，它与DRM类似（因此[差异并不是很明显](https://security.stackexchange.com/questions/137273/whats-the-difference-between-drm-and-cas)）。简单地说，它的功能与DRM相同 - 存在需要解密的加密数据。
## MediaCasService
首先，MediaCasService确实允许应用程序解密加密数据。参阅[我以前的博客文章](https://blog.zimperium.com/cve-2017-13253-buffer-overflow-multiple-android-drm-services/)，该博文处理了名为MediaDrmServer的服务中的漏洞，您可能会注意到与DRM进行比较的原因。MediaCasService与MediaDrmServer（负责解密DRM媒体的服务）从其API到内部运行方式都非常相似。
与MediaDrmServer略有不同的是其术语：API不是解密，而是称为解扰（尽管它们最终也会在内部对其进行解密）。
让我们看看[解扰方法](https://android.googlesource.com/platform/hardware/interfaces/+/android-8.1.0_r29/cas/1.0/default/DescramblerImpl.cpp#79)是如何运作的（这里省略了一些小部分以简化操作）：
不出所料，数据通过共享内存共享。有一个缓冲区指示共享内存的相关部分（称为 _srcBuffer_