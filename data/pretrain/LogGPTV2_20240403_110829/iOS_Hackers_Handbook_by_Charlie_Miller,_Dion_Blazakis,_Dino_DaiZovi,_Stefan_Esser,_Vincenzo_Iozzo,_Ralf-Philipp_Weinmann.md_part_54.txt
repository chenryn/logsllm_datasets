regions. see RWX (readable, writeable,
GSM basics, 329–330
and executable) regions
kernel debugging, 250–256
Real-Time Embedded Multithreading: Using
SMS, 163
ThreadX and ARM (Lamie), 337
protosw, 262
Real-time Executive System (REX),
provisioning, 74–77
337–338
provisioning profi les, 74–77
real-time operating system (RTOS), 328
.psd (Photoshop) fi les, 6
RealView Suite (RVDS), 342
bbiinnddeexx..iinndddd 338833 44//1166//22001122 55::4400::5588 PPMM
384 Index n R–S
rebooting, 309 introduction, 222–224
redis.py, 133 Mandatory Code-Signing and, 70
redsn0w manually constructing payload,
booting ramdisk, 61–62 225–230
building ramdisk, 59 overview, 219
jailbreaking. see jailbreaking Pwn2Own 2010, 13
kernel debugging, 252 summary, 247
kernel heap buffer overfl ows, 285 testing payloads, 232–235
patching vulnerability into kernel, 270 using to chain two exploits, 242–247
reduced attack surface, 5–6 routines for JailBreakMe v3, 243–245
reduced instruction set code (RISC) RR (Radio Resource Management), 330
architecture, 220 RTOS (real-time operating system)
regions, RWX. see RWX (readable, defi ned, 328
writeable, and executable) regions underneath the stacks, 335–342
regions, system allocator, 188–189 *rules* vector, 120, 126
registers RVDS (RealView Suite), 344
ARM basics, 220 RWX (readable, writeable, and executable)
exfi ltrate fi le content payload, 235 regions
paniclog, 252 altering iOS shellcode, 96–101
registration, TrustedBSD, 122–123 attacking inside MobileSafari, 94
Remote Management details screen, 44 MAP_JIT bug, 95–96
removing confi guration profi les, 25–26 MobileSafari and, 91
Request-Line, 142–143
S
resource limits, 270–271
restoreStack, 234 s_byte primitive, 172
return-into-libc, 222–223 s_size primitive, 171–172
return-oriented programming (ROP). see s_string primitive, 172–173
ROP (return-oriented programming) Safari
REX (Real-time Executive System), fuzzing, 144–148
337–338 Quick Look fuzzing, 153
RFC 3852 Cryptographic Message Syntax tools for debugging heap manipulation
(CMS), 16 code, 206
RFX daughterboards, 331 Saffron
RISC (reduced instruction set code) automating ROP payload construction,
architecture, 220 231
rlimit, 271 exploitation, 212
root JailBreakMe v3, 242–247
bundle installation, 308 Saffron-dump.py, 247
jailbreaking, 303 Saffron-ROP-dump.py, 247
root user Sandbox, 70
Sandbox Profi le Language (SBPL)
kernel exploitation, 269
sandboxing apps, 111–116
privilege escalation, 310
user space library implementation,
userland jailbreaks, 301
111–116
ROP (return-oriented programming)
sandbox_init
ARM basics, 220–222
ASLR challenges, 211–213 extensions, 113–116
attacking inside MobileSafari, 94 how sandboxing impacts App Store vs.
automating payload construction, platform apps, 133
230–232 sandboxing apps, 110–112
DEP and, 7–8 user space library implementation,
exfi ltrate fi le content payload, 235–242 117–119
heap bugs and, 224 SANDBOX_NAMED, 110–111
bbiinnddeexx..iinndddd 338844 44//1166//22001122 55::4400::5588 PPMM
Index n S–S 385
sandboxd attacking inside MobileSafari, 94
extracting sandboxes, 129–130 exfi ltrate fi le content payload, 235–242
how profi le bytecode works, 126 ROP introduction, 222–223
understanding sandboxing, 108–109 stripped down iOS, 6
sandboxing using ROP to chain two exploits,
apps, 109–116 242–247
handling confi guration from user space, Short Message Service Center (SMSC)
123–124 defi ned, 163–164
how profi le bytecode works, 126–133 fuzzing SMS, 165–166
impact on App Store vs. platform Short Message Service (SMS). see SMS
applications, 133–137 (Short Message Service)
implementing TrustedBSD, 121–123 side effects, 230–231
in iOS security architecture, 8 signaling channels, 330
jailbreaking and, 298 signatures
into the Kernel, 121 AMFI binary trust cache, 319–320
kernel patches, 322–324 application signing, 78–79
overview, 107 how they are enforced on processes,
overwriting, 272 84–88
policy enforcement, 125–126 signed pages, 88–89
SpyPhone and, 12–13 signing information, 80–84
summary, 137–138 Sigwald, Jean, 55
understanding, 108–109 Silberman, Pete, 347
understanding implementation, 116–117 SIM Application Toolkit (STK), 346–347
user space library implementation, SIM cards, 327
117–121 Simple Certifi cate Enrollment Protocol
Sandbox.kext, 108–109 (SCEP) server, 28
SAPI (Service Access Point Identifi er), 330 simulator, fuzzing with, 155–158
Satisfi ability Modulo Theory (SMT), sleep, 236
231–232 small object allocation, 201–202
sb_evaluate(), 322–323 small object deallocation, 202
SBPL (Sandbox Profi le Language) small regions, 188
sandboxing apps, 111–116 smart fuzzing, 142–143
user space library implementation, SMS (Short Message Service)
111–116 attacks on iOS 2, 10
sbx_cred_label_update_execve, 133–137 defi ned, 330
SCEP (Simple Certifi cate Enrollment understanding security threats, 5
Protocol) server, 28 SMS fuzzing
Scheme scripts, 119–120 basics, 163–165
Schuetz, David, 19, 28 focusing on PDU mode, 165–166
Seatbelt, 108 generation-based fuzzing with Sulley,
Secure Shell (SSH) server, 61–62 170–175
Secure Socket Layer (SSL), 30–31 iOS injection, 175–177
security.mac.proc_enforce, 312–313 monitoring SMS, 177–181
semi-octets, 166 overview, 162
SerialKDPProxy, 253–254 SMS bugs, 182–184
Service Access Point Identifi er (SAPI), 330 specifi cation-guided fuzz testing,
setgroups(), 255–256 348
setProperty(), 265–266 using other types of UDH data, 169–170
setsockopt(), 262–263 using PDUspy, 167
S-Gold 2, 328–329 using UDH information, 167–168
shellcode working with concatenated messages,
altering iOS, 96–101 168
bbiinnddeexx..iinndddd 338855 44//1166//22001122 55::4400::5588 PPMM
386 Index n S–T
SMSC (Short Message Service Center) superclass, 258–259
defi ned, 163–164 Supplementary Services (SS), 330
fuzzing SMS, 165–166 suspend_t, 339
SMS-DELIVER format, 165 Sutton, Michael, 145
SMS-SUBMIT format, 165 SVC, 222
SMT (Satisfi ability Modulo Theory), symbols
231–232 locating system call tables, 272–273
sock, 226–229 PPT fuzzing, 160–162
soft unlocks, 346–347 sync(), 309
Solar Designer, 222–223 syringe, 252
spans, 201 sysctl variable
specifi cation-guided fuzz testing, 348 fi nding vulnerabilities in kernel
SpringBoard extensions, 263–264
fuzzing MobileSafari, 159 kernel patching, 312–313
monitoring SMS, 177 privilege escalation, 311
SpyPhone, 12–13 sysent, 272–273
SS (Supplementary Services), 330 system allocator. see iOS system allocator
SSH (Secure Shell) server, 61–62 system calls
SSL (Secure Socket Layer), 30–31 arbitrary code execution, 278
stack buffer overfl ows arbitrary memory overwrite, 272–273
kernel state reparation, 310 ARM conventions, 221–222
local, 348–350
T
stack traces, 345–346
T1, 242–247
stack-related bugs
tainted, 86–87
exploitation and, 185
tar
exploiting kernel stack overfl ows,
bundle installation, 308
279–285
installing base utilities, 306
ROP introduction, 223–224
task ports, 320–321
RTOSes underneath the stacks, 335–342
task_for_pid, 320–321
start_addr, 339
tasks, 336–337
stat, 236
TCMalloc
state of heap
exploiting arithmetic vulnerabilities,
detecting kernel, 293–294
206–211
kernel Heap Feng Shui, 291
exploiting object lifetime issues, 211
reparation, 309–310
obtaining predictable heap layout,
state variables, 263
202–204
static analysis, 347
taming, 202
static trust cache, 83
tools for debugging heap manipulation
stdout, 174
code, 204–206
stealFile_rop_3_1_3_gs, 236
understanding, 200–202
Storm8, 11–12
TCP ports, 27–28
strings
tcprelay.sh, 62
exploiting arithmetic vulnerabilities,
TDMA (Time Division Multiple Access),
208–209
329–330
Pwn2Own 2010, 213
test cases
structure of kernel, 249–250
converting fuzzer, 174–175
suid
fuzzing MobileSafari, 158
bundle installation, 308
fuzzing Safari, 144–145
jailbreaking fi lesystem, 304
submitting and monitoring, 143–144
Sulley generation-based fuzzing, 170–175
test(i), 181
bbiinnddeexx..iinndddd 338866 44//1166//22001122 55::4400::5588 PPMM
Index n T–U 387
testing implementation, 121–123
fuzzing Safari, 145–148 MACF, 70
fuzzing with simulator, 157 policy enforcement, 125–126
gaining App Store approval, 103–104 understanding sandboxing, 108–109
infrastructure, 217–218 tx_byte_allocate(), 340–341
ROP payloads, 232–235 type-length-value (TLV) syntax, 168
specifi cation-guided fuzz, 348 typeofaddress, 172
tethered jailbreaks, 298
U
text messages. see SMS (Short Message
Service) UDH (User Data Header)
text mode, 165 information, 182–183
thread_exception_return(), 325 SMS fuzzing, 167–168
using other types of data, 169–170
threads, 335
UDP (User Datagram Protocol), 253
ThreadX
UHD, 332
byte pools, 340–341
UID key
overview, 335
attacking user passcodes, 51
threats, 3–5
data protection key hierarchy, 49
Thumb, 220
defi ned, 48
Thumb2
ultrasn0w
defi ned, 220
iOS security basics, 2 AT+XAPP vulnerability, 348–349
Time Division Multiple Access (TDMA), jailbreaking, 298
329–330 unlock, 350–356
timestamp of the message (TP-SCTS), 166 Um interface layers, 330
tiny regions, 188 UMTS (Universal Mobile
TinyScheme, 119–120 Telecommunications), 328
TLV (type-length-value) syntax, 168 uniCount, 283
TMSI REALLOCATION COMMAND, 356 uninitialized kernel variables, 274–278
Universal Mobile Telecommunications
tools
(UMTS), 328
for debugging heap manipulation code,
Universal Software Radio Peripheral
204–206
(USRP), 331–332
exploiting system allocator, 190–191
xpwntool, 249–250 Universal Subscriber Identity Module
(USAT), 346
topics, 27
UNIX
TP-DCS (data coding scheme), 166
privilege separation, 6
TP-PID (protocol identifi er), 166
SMS iOS injection, 176
TP-SCTS (timestamp of the message), 166
unlocking
TP-UDL (user data length), 166
traffi c channels, 330 ultrasn0w, 350–356
traps user passcodes, 52–54
attacking IOKit drivers through, 266–267 unsigned libraries
defi ned, 222 altering iOS shellcode, 96–101
detecting kernel heap state, 293–294 gaining App Store approval, 103–104
trust cache, 83 using meterpeter on iOS, 101–103
Trust Profi le, 40–41 untethered jailbreaks, 298–299
TrustedBSD untethering exploit installation, 304
handling confi guration from user space, uplink, 329–330
123–124 USAT (Universal Subscriber Identity
how profi le bytecode works, 126–133 Module), 346
how sandboxing impacts App Store vs. USB, 298
platform apps, 133 usbmuxd, 61
bbiinnddeexx..iinndddd 338877 44//1166//22001122 55::4400::5588 PPMM
388 Index n U–Z
use-after-free bugs, 186–187 vulnerabilities
user client, 264–265 analysis, 342–348
User Data Header (UDH). see UDH (User discovering with fuzzing. see fuzzing
Data Header) iOS applications
user data length (TP-UDL), 166 exploitation. see exploitation
User Datagram Protocol (UDP), 253 history of iOS attacks, 9–14
user space in IOKit drivers, 264–268
handling sandboxing confi guration jailbreaking and, 298–299
from, 123–124 in kernel extensions, 261–264
kernel debugging, 256 local, 327
library implementation, 117–121 object lifetime, 186–188
privilege escalation, 310–312 SMS bugs, 182–183
privilege separation, 6
userland jailbreaks, 301 W
/usr/bin, 306 Wade, Chris, 9
/usr/local/bin, 55 WebKit, 144
USRP (Universal Software Radio Weinmann, Ralf-Philipp, 13
Peripheral), 331–332 worms, Ikee, 10–11
write
V manually constructing ROP payload,
validation 225, 228
AMFI binary trust cache, 319–320 SMS iOS injection, 176
enforcing signatures, 86–87
provisioning profi les, 77 X
variables x86 applications
debugging environment, 191 automating ROP payload construction,
exploiting uninitialized kernel, 274–278 231
fi nding vulnerabilities in kernel fuzzing with simulator, 157
extensions, 263–264 syscalls, 222
kernel patching. see kernel patching Xcode, 78–79
locating system call tables, 272–273 XMPP protocol, 27–28
/var/stash, 307 XNU kernel structure, 250
verifi cation XOR deallocation, 192
dynamic trust, 84 xpwntool
signing information, 80–84 extracting baseband fi rmware,
Trust Profi le, 42 343–344
virtualization kernel binary, 249–250
fuzzing with simulator, 155–158 xrefs, 70
taming iOS allocator, 190
testing infrastructure, 217 Z
visual voicemail, 170 zalloc(), 286–287, 290
vm_allocate, 100 zalloc_canblock(), 286–287
vm_fault, 84–85 zfree(), 287
vm_fault_enter(), 313–314 zi_alloc_size, 293–294
vmmap zi_count, 293–294
code signing enforcement, 88 zi_cur_size, 293–294
defi ned, 206 zi_elem_size, 293–294
how kernel handles JIT, 93 ZIP archives, 343–344
vm_map_enter, 316–317 zone heap allocator, 286–291
vm_map_protect, 318–319 Zovi, Dino Dai
vn_getpath(), 322–323 BISC for x86, 231
vnode_check_signature, 82, 319–320 iOS system allocator, 188
bbiinnddeexx..iinndddd 338888 44//1166//22001122 55::4400::5588 PPMM