    *   Now, we need to create a `values.yaml` file that will be used to supply configuration information when we deploy OpenUnison. This book's GitHub repository contains a base file in the `chapter7` directory:
    ```
    network:
      openunison_host: "k8sou.apps.XX-XX-XX-XX.nip.io"
      dashboard_host: "k8sdb.apps.XX-XX-XX-XX.nip.io"
      api_server_host: ""
      session_inactivity_timeout_seconds: 900
      k8s_url: https://0.0.0.0:6443
    cert_template:
      ou: "Kubernetes"
      o: "MyOrg"
      l: "My Cluster"
      st: "State of Cluster"
      c: "MyCountry"
    image: "docker.io/tremolosecurity/openunison-k8s-login-saml2:latest"
    myvd_config_path: "WEB-INF/myvd.conf"
    k8s_cluster_name: kubernetes
    enable_impersonation: false
    dashboard:
      namespace: "kubernetes-dashboard"
      cert_name: "kubernetes-dashboard-certs"
      label: "k8s-app=kubernetes-dashboard"
      service_name: kubernetes-dashboard
    certs:
      use_k8s_cm: false
    trusted_certs: []
    monitoring:
      prometheus_service_account: system:serviceaccount:monitoring:prometheus-k8s
    saml:
      idp_url: https://portal.apps.tremolo.io/idp-test/metadata/dfbe4040-cd32-470e-a9b6-809c840
      metadata_xml_b64: ""
    ```
    您需要为部署更改以下值:
    *   `Network: openunison_host:`该值应该使用集群的 IP 地址，也就是 Docker 主机的 IP 地址；例如，`k8sou.apps.192-168-2=131.nip.io`。
    *   `Network: dashboard_host`:这个值应该使用你的集群的 IP 地址，也就是你的 Docker 主机的 IP 地址；例如，`k8sdb.apps.192-168-2-131.nip.io`。
    *   `saml: idp url`: This value should be the SAML2 metadata URL that you retrieved from the SAML2 lab page in the previous step.
        使用您自己的条目编辑或创建文件后，保存文件并继续部署您的 OIDC 提供商。
        *   要使用您的`values.yaml`文件部署 OpenUnison，请执行一个`Helm install`命令，该命令使用`-f`选项来指定`values.yaml`文件:
    ```
    helm install orchestra tremolo/openunison-k8s-login-saml2 --namespace openunison -f ./values.yaml
    NAME: orchestra
    LAST DEPLOYED: Fri Apr 17 16:02:00 2020
    NAMESPACE: openunison
    STATUS: deployed
    REVISION: 1
    TEST SUITE: None
    ```
    *   In a few minutes, OpenUnison will be up and running. Check the deployment status by getting the pods in the `openunison` namespace:
    ```
    kubectl get pods -n openunison
    NAME                                    READY   STATUS    RESTARTS   AGE
    openunison-operator-858d496-zzvvt       1/1    Running   0          5d6h
    openunison-orchestra-57489869d4-88d2v   1/1     Running   0          85s
    ```
    要完成 OIDC 部署，您还需要遵循另一个步骤:您需要与部署的依赖方一起更新 SAML2 实验室。
    *   现在 OpenUnison 正在运行，我们需要使用`values.yaml`文件中`network.openunison_host`的主机和`/auth/forms/saml2_rp_metadata.jsp`路径
    ```
    curl --insecure https://k8sou.apps.192-168-2-131.nip.io/auth/forms/saml2_rp_metadata.jsp
    .
    .
    .
    ```
    从 OpenUnison 获取 SAML2 元数据*   Copy the output, paste it into the testing identity provider where it says **Meta Data**, and click **Update Relying Party**:
    ![Figure 7.5 – Testing the identity provider with the relying party metadata  ](img/Fig_7.5_B15514.jpg)
    图 7.5–使用依赖方元数据测试身份提供者
    *   Finally, we need to add some attributes to our test user. Add the attributes shown in the following screenshot:
    ![Figure 7.6 – Identity provider test user configuration ](img/Fig_7.6_B15514.jpg)
    图 7.6–身份提供者测试用户配置
    *   接下来，点击**更新测试用户数据**保存你的属性。这样，您就可以登录了。*   You can log into the OIDC provider using any machine on your network by using the assigned nip.io address. Since we will test access using the dashboard, you can use any machine with a browser. Navigate your browser to `network.openunison_host` in your `values.yaml` file. Enter your testing identity provider credentials, if needed, and then click **Finish Login** at the bottom of the screen. You should now be logged into OpenUnison:
    ![Figure 7.7 – OpenUnison home screen ](img/Fig_7.7_B15514.jpg)
    图 7.7–open unison 主屏幕
    *   让我们通过点击 **Kubernetes 仪表板**链接来测试 OIDC 提供商。当查看初始仪表盘屏幕时，不要惊慌–您将看到如下内容:**
 **![](img/Fig_7.8_B15514.jpg)
图 7.8–在单点登录与应用编程接口服务器集成完成之前的 Kubernetes 仪表板
看起来有很多错误！我们在仪表板上，但似乎没有任何授权。这是因为应用编程接口服务器还不信任 OpenUnison 生成的令牌。下一步是告诉 Kubernetes 信任 OpenUnison 作为其 OpenID Connect 身份提供者。
### 将 Kubernetes 应用编程接口配置为使用 OIDC
此时，您已经将 OpenUnison 部署为 OIDC 提供者，它正在工作，但是您的 Kubernetes 集群尚未配置为将其用作提供者。要将 API 服务器配置为使用 OIDC 提供程序，您需要向 API 服务器添加 OIDC 选项，并提供 OIDC 证书，以便 API 信任 OIDC 提供程序。
因为我们使用的是 KinD，所以我们可以使用几个`kubectl`和`docker`命令添加所需的选项。
为了向 API 服务器提供 OIDC 证书，我们需要检索证书并将其复制到 KinD 主服务器。我们可以在 Docker 主机上使用两个命令来实现这一点:
1.  第一个命令从其机密中提取 OpenUnison 的 TLS 证书。这与 OpenUnison 的入口对象引用的机密相同。我们使用`jq`实用程序从机密中提取数据，然后 base64 将其解码:
    ```
    kubectl get secret ou-tls-certificate -n openunison -o json | jq -r '.data["tls.crt"]' | base64 -d > ou-ca.pem
    ```
2.  第二个命令将证书复制到主服务器进入`/etc/Kubernetes/pki`目录:
    ```
    docker cp ou-ca.pem cluster01-control-plane:/etc/kubernetes/pki/ou-ca.pem
    ```
3.  正如我们前面提到的，要将 API 服务器与 OIDC 集成，我们需要有 API 选项的 OIDC 值。要列出我们将使用的选项，请描述`openunison`名称空间中的`api-server-config`配置图:
    ```
    kubectl describe configmap api-server-config -n openunison
    Name:         api-server-config
    Namespace:    openunison
    Labels:       
    Annotations:  
    Data
    ====
    oidc-api-server-flags:
    ----
    --oidc-issuer-url=https://k8sou.apps.192-168-2-131.nip.io/auth/idp/k8sIdp
    --oidc-client-id=kubernetes
    --oidc-username-claim=sub
    --oidc-groups-claim=groups
    --oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem
    ```
4.  接下来，编辑应用编程接口服务器配置。OpenID Connect 是通过更改 API 服务器上的标志来配置的。这就是为什么托管 Kubernetes 通常不提供 OpenID Connect 作为一个选项，但是我们将在本章后面讨论这个问题。每个发行版对这些更改的处理方式都不同，因此请查看您的供应商文档。对于 KinD，shell 进入控制平面并更新清单文件:
    ```
    docker exec -it cluster-auth-control-plane bash
    apt-get update
    apt-get install vim
    vi /etc/kubernetes/manifests/kube-apiserver.yaml 
    ```
5.  在名为`--oidc-client`和`–oidc-issuer-url`的`command`下寻找两个选项。用产生应用编程接口服务器标志的前面命令的输出替换这两个。确保在前面加上间距和破折号(`-`)。完成后应该是这样的:
    ```
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --oidc-issuer-url=https://k8sou.apps.192-168-2-131.nip.io/auth/idp/k8sIdp
        - --oidc-client-id=kubernetes
        - --oidc-username-claim=sub
        - --oidc-groups-claim=groups
        - --oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem
        - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
    ```
6.  Exit vim and the Docker environment (*ctl+d*) and then take a look at the `api-server` pod:
    ```
    kubectl get pod kube-apiserver-cluster-auth-control-plane -n kube-system
    NAME                      READY   STATUS    RESTARTS  AGE kube-apiserver-cluster-auth-control-plane   1/1  Running 0 73s  
    ```
    请注意，它只有岁。那是因为 KinD 看到清单中有的变化，重新启动了 API 服务器。
    重要说明
    API 服务器吊舱被称为“静态吊舱”。这个吊舱不能直接更换；必须从磁盘上的清单中更改其配置。这为您提供了一个由应用编程接口服务器作为容器管理的过程，但没有为您提供一个在出现问题时需要直接在 EtcD 中编辑 pod 清单的情况。
### 验证 OIDC 集成