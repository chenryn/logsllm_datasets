title:Towards reducing the attack surface of software backdoors
author:Felix Schuster and
Thorsten Holz
Towards Reducing the Attack Surface
of Software Backdoors
Felix Schuster and Thorsten Holz
Horst Görtz Institute for IT-Security
Ruhr-University Bochum, Germany
{ﬁrstname.lastname}@rub.de
ABSTRACT
Backdoors in software systems probably exist since the very
ﬁrst access control mechanisms were implemented and they
are a well-known security problem. Despite a wave of public
discoveries of such backdoors over the last few years, this
threat has only rarely been tackled so far.
In this paper, we present an approach to reduce the at-
tack surface for this kind of attacks and we strive for an
automated identiﬁcation and elimination of backdoors in bi-
nary applications. We limit our focus on the examination
of server applications within a client-server model. At the
core, we apply variations of the delta debugging technique
and introduce several novel heuristics for the identiﬁcation
of those regions in binary application that backdoors are
typically installed in (i.e., authentication and command pro-
cessing functions). We demonstrate the practical feasibility
of our approach on several real-world backdoors found in
modiﬁed versions of the popular software tools ProFTPD
and OpenSSH. Furthermore, we evaluate our implementa-
tion not only on common instruction set architectures such
as x86/x64, but also on commercial oﬀ-the-shelf embedded
devices powered by a MIPS32 processor.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access
General Terms
Security
Keywords
Software Backdoors; Dynamic Analysis; Binary Analysis
1.
INTRODUCTION
In today’s computing environment, we typically rely on
software components that are not implemented by ourselves,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516716.
but from a (potentially untrusted) third party, e.g., a com-
mercial provider or an open source project. This is a com-
mon practice and natural consequence of the complexity of
modern computer systems. Of course, executing unknown
code has several security implications; among others it in-
volves the question whether the executable has some un-
documented, unwanted, or hidden functionality [35]. Pur-
posefully (or even unintentionally) the program could for
example have an undocumented account that is only avail-
able upon speciﬁc conditions [2], or oﬀer another kind of
remote access to an adversary [3–5]. In the best case, such
code does not cause any harm at all, but it is a challenging
problem to determine if an unknown piece of (binary) code
contains a backdoor. From an attacker’s perspective, espe-
cially server applications are an interesting target for the
deployment of backdoors: such applications are typically re-
motely reachable and an attacker can abuse them to obtain
access to a system that can afterwards be used as a stepping
stone to attack further machines within a network. Hence,
our focus within this paper lies on network services since we
view them as some of the most relevant attack targets.
Towards Prevention of (Software) Backdoors.
While lots of work on implementing and detecting back-
doors in hardware has been published recently (e.g., [6, 21,
24, 36]), the area of software backdoors has not received
much attention. Previous work in that area has mainly ad-
dressed authentication routines. For example, Dai et al. in-
troduced an approach to eliminate backdoors from response-
computable authentication routines, i.e., the typical challenge-
response based authentication [12]. Their idea is to reduce
the attack surface by eliminating potential triggers for a
backdoor. However, an attacker could still add a backdoor
by adding additional command handlers or installing mech-
anisms that entirely bypass the authentication process in a
server application on certain triggers.
To address the problem, the idea of privilege separation
can be used to split an application into diﬀerent trust do-
mains (e.g., [9, 30]). Nevertheless, an attacker with broad
access to an application’s source code can still install back-
doors within suﬃciently privileged components and thus a
certain attack surface remains. The problem is further com-
plicated in cases where we do not have access to source code,
but need to perform our analysis on the binary level only.
Automated Identiﬁcation of Sensitive Components.
In this paper, we address the problem of software back-
doors in server applications and introduce an automated way
851to detect and to disable certain types of backdoors in a given
binary program. Our approach consists of three phases:
In the ﬁrst phase, we identify the speciﬁc regions in a
given binary that are especially prone to attacks, i.e., the
authentication routines and code related to command dis-
patching and command handling functionality. By closely
monitoring the server application while it processes inputs
automatically generated according to a protocol speciﬁca-
tion and analyzing the resulting traces, we can spot these
parts in a precise and automated way. We leverage the idea
of delta debugging/diﬀerential analysis [16,40] and introduce
an algorithm to identify the relevant regions of a given bi-
nary application.
In the second phase, once the initial components of in-
terest are identiﬁed, we use this knowledge to determine
suspicious components in an application, e.g., hidden com-
mand handlers or edges not taken in the control ﬂow graph
(CFG) of an authentication routine. To this end, we intro-
duce several heuristics that enable us to determine which
code regions are suspicious. Furthermore, we aggregate in-
formation that can serve as a starting point for further au-
tomated (or manual) investigations.
In an optional third phase, the results from the previ-
ous phases can be used to modify or instrument the server
application in an automated way such that program parts
identiﬁed as suspicious are monitored or disabled at runtime.
As a side eﬀect, this feature can be used as a ﬂexible way
to enable dynamic reconﬁguration of server applications for
which no source code is available.
Results.
We have implemented our approach to detect and to dis-
able software backdoors in server applications in a tool called
Weasel. For the recording of traces and other runtime anal-
yses, Weasel employs gdb, the standard debugger for the
GNU software system. gdb is available for a large number
of operating systems and hardware architectures and Wea-
sel currently contains adapter code for x86, x64 and MIPS-
32 processor architectures running Linux operating systems,
enabling the analysis of a wide range of platforms.
We have successfully tested Weasel with seven diﬀer-
ent server applications on diﬀerent platforms including a
widespread corporate VoIP telephone and a popular con-
sumer router.
In all cases, we were able to precisely and
automatically identify the key program parts involved in
the authentication process or the dispatching and handling
of commands. We were able to detect known real-world
backdoors contained in certain versions of ProFTPD and
OpenSSH [2, 15]. Furthermore, as a case study, graduate
students from our group have implemented eleven diﬀerent
kinds of backdoors for ProFTPD. Our tool can be used to
detect or disable the majority of these artiﬁcial backdoors as
well. This demonstrates the practical feasibility of the ap-
proach to reduce the attack surface for software backdoors.
To demonstrate a potential mitigation approach, Wea-
sel is also capable of transforming a given binary applica-
tion to reduce the set of available commands. This is im-
plemented by precisely identifying the command dispatcher
functions leveraging automated data structure identiﬁcation
methods [25,31]. Once we have found the speciﬁc data struc-
tures, we modify them such that certain commands are in-
accessible.
In summary, this paper makes the following contributions:
• We introduce an automated way to identify critical
parts in server applications that are typically prone to
backdoors. We show how this information can be used
a) to detect backdoors and hidden functionality and
b) to reduce the attack surface for backdoors in legacy
binary software.
• We implemented our techniques in a tool called Wea-
sel for x86, x64 and MIPS32 systems running diﬀer-
ent versions of Linux. The code is freely available at
https://github.com/flxflx/weasel.
• We show how several real-world backdoors for ProFTPD
and OpenSSH can be successfully discovered using our
techniques. Furthermore, we evaluated our techniques
with other examples of binary programs on diﬀerent
platforms, including COTS embedded devices.
2. RELATED WORK
Backdoors in computer systems are a well-known security
problem. Over the last few years, the security community
has mainly focused on backdoors in integrated circuits and
ways to detect or implement such hardware backdoors [6,19,
21,24,33,34,36]. Furthermore, several backdoors in diﬀerent
components of a computer such as network cards [32] or
directly in the CPU [14] were proposed. Our approach is
orthogonal to such work since we focus on the detection of
backdoors on the binary level, an area that has received
almost no attention so far.
Wysopal et al. [37] presented a pattern-based, static anal-
ysis approach to identify backdoors in software. The main
limitation is that patterns need to be speciﬁed in advance,
which implies that potential backdoors need to be known
before the analysis can be carried out. Nevertheless, the
results delivered by our tool could be used to improve the
accuracy of such a static analysis approach:
for example,
a static ASCII string should be more likely to represent a
static password when it is referenced in or close to a function
identiﬁed to be involved in the authentication process of an
application.
Geneiatakis et al. [18] recently proposed a similar (al-
though not backdoor-related) technique to ours to identify
authentication-points in server applications using Intel’s Pin
tool [26]. Our approach can be applied to a broader range
of platforms and environments and is fully automated. In
fact, our implementation only requires a remote gdb instance
to connect to and automatically collects all required traces
on function and basic block level, while invoking the cor-
responding server application repeatedly without requiring
any supervision. By only relying on gdb, we are able to ana-
lyze software on COTS embedded devices such as routers or
VoIP telephones without special eﬀort. We think that this is
especially useful in the context of backdoors given the often
high criticality of such devices and the rather large amount
of corresponding backdoors publicly reported lately [3–5].
Furthermore, we consider implicit edges in the CFG of a
function induced by conditional instructions as described in
Section 4, a problem not addressed in prior work.
A basic insight for backdoor detection is that some kind
of trigger needs to be present such that an attacker can ac-
tivate the backdoor. As a result, work on automated iden-
tiﬁcation or silencing of triggers is also related to our work.
Brumley et al. [10] demonstrated how trigger-based behav-
ior in malware can be identiﬁed and Dai et al. introduced an
852approach to eliminate backdoors from response-computable
authentication routines, i.e., the typical challenge-response
based authentication [12]. While such approaches reduce the
attack surface, an attacker can still implement a backdoor
and bypass the approach (e.g., by adding additional com-
mand handlers or completely bypassing the authentication
process). Our approach complements such approaches and
helps to reduce the attack surface even further.
Somewhat related to our approach is the idea of privi-
lege separation, i.e., the process of splitting an application
into diﬀerent trust domains [9, 11, 22, 28, 30, 39]. Note that
such approaches do not completely mitigate the risk of back-
doors since an attacker can still install backdoors within
suﬃciently privileged components. The backdoors for SSH
servers analyzed in Section 5 demonstrate that this is indeed
a problem in practice.
3. APPROACH
We now provide a high-level overview of our approach
before presenting implementation details in the next section.
3.1 Attacker Model for Software Backdoors
There are many diﬀerent mechanisms an attacker can use
to bypass implemented security mechanisms. To narrow
down the scope of the discussions, we ﬁrst deﬁne the term
backdoor in the context of this paper to illustrate the capa-
bilities of an attacker:
Deﬁnition: A backdoor is a hidden, undocumented, and
unwanted program or a program modiﬁcation/manipulation
that on certain triggers bypasses security mechanisms or per-
forms unwanted/undocumented malicious actions.
The deﬁnition should be seen as an intuitive and tangible
description of what a backdoor is. Note that a backdoor can
be either intentional or unintentional, depending on whether
it was created on purpose or as a dangerous side-eﬀect of
some other “harmless” activity (e.g., debugging access with
elevated privileges that is not disabled in the release ver-
sion of a product). Naturally, there are unlimited ways how
an attacker can implement a backdoor in a given software
system: an adversary can for example purposely introduce
buﬀer overﬂow vulnerabilities or ﬂawed cryptographic mod-
ules, both of which complicate the analysis signiﬁcantly. In
general, the problem of detecting software backdoors is un-
decidable and thus we strive for an automated way to at
least reduce the attack surface and detect certain cases of
backdoors in practice.
For the remainder of this paper, we focus on the following
classes of backdoors as part of our attacker model:
• ﬂawed authentication routines
• hidden commands and services
In fact, most of the recently publicly disclosed backdoors fall
into these two classes [2–5, 15, 20, 27] and thus we think that
this constraint for the problem space is reasonable.
Running Example.
As our running example, we illustrate a backdoor that at-
tackers added to the ProFTPD server. This example high-
lights the challenges we face and explains some of the issues
we have to deal with. Note that the example is in C code,
while we perform our analysis on the binary level.
Figure 1: The two additional basic blocks in the
ﬂow graph of the function pr help add response() in
ProFTPD implementing the ACIDBITCHEZ backdoor
At the end of November 2010, the distribution server
of the ProFTPD project was compromised and a snippet
of code was added to one of the source ﬁles of ProFTPD
1.3.3c [2]. In essence, a function responsible for the process-
ing of the standard FTP command HELP was modiﬁed in
such a way that passing the argument ACIDBITCHEZ would
result in immediate privileged access to the corresponding
system (a root shell ) for an unauthenticated user. The ac-
tual malicious code introduced by the attacker is shown in
Listing 1. The backdoor was (likely manually) detected
about three days later and then eliminated by removing the
changes.
Listing 1: Backdoor in ProFTPD server
( strcmp ( t a r g e t , ”ACIDBITCHEZ”) == 0 )
s e t u i d ( 0 ) ;
s e t g i d ( 0 ) ;
system ( ”/ b i n / sh ; / s b i n / sh ” ) ;
i f
{
}
The central goal of our approach is to automatically iden-
tify such harmful extensions. The scope of our approach is
limited to binary code, mainly since we often do not have
access to source code.
Malicious additions to binary software can often be re-
liably detected by static analysis techniques [16] when at
least one supposedly benign version of the software is avail-
able. Typically the deployment of a simple backdoor in-
troduces a handful of additional basic blocks to the CFG
of a function that handles external inputs. Figure 1 de-
picts the malicious addition to the CFG of the function
pr_help_add_response() in ProFTPD that constitutes the
backdoor of our running example.
In such a case, binary
software comparison approaches [16, 17] are likely capable
to detect these suspicious code regions. Unfortunately, in
practice we typically do not have access to such a version
mov edi, offset hidden_arg ; "ACIDBITCHEZ"mov ecx, 0Chmov esi, ebxrepe cmpsbjz loc_backdoorloc_backdoor:mov [esp+7Ch+uid], 0 ; uidcall _setuidmov [esp+7Ch+uid], 0 ; gidcall _setgidmov [esp+7Ch+uid], offset command ; "/bin/sh;/sbin/sh"call _systemmov eax, ds:help_listjmp loc_continue853that can reliably be trusted for most software systems. This
is why our approach does not rely on the existence of such
a version. Instead, we examine the behavior of a single ver-
sion of binary software at runtime and apply techniques that
extend the idea of Zeller’s delta debugging approach [40] on