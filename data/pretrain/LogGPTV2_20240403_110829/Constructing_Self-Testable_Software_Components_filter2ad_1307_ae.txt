built-in  test  mechanisms  comprising  assertions  and  reporter 
methods,  we  seek 
increase  component’s  testability,  an 
important  step to improve reliability of  the component itself  and 
of  the applications using it. The steps for the  production  of  self- 
testable component have  been  presented.  A prototyping  tool  that 
to 
supports some of  these  steps was developed.  It is focused on 00 
components developed  in C t t .  One step that  is automated  is test 
selection,  performed  by  the  consumer  using  test  information 
contained  in  the  component.  The  main  aspects  of  our  testing 
selection  strategy  are:  (i)  it  is  based  on 
the  component 
specification;  (ii) it  combines  different  techniques  that  cover  not 
only behavioral  aspects but  also values  of  method’s  parameters: 
(iii) it allows test case reuse when deriving tests for a subclass, by 
the  use  of  the  hierarchical  incremental  technique.  Preliminary 
results  of  an  empirical  validation  of  the  test  selection  strategy 
using  mutation  analysis  are  also  presented.  Although  incipient, 
the results  showed  that  the  test  strategy  has  a  good  potential  to 
reveal  methods’ interaction  faults.  They also served  to  point  out 
the  need  to retest  inherited  features  in  the  context  of  a subclass, 
even  if  they  don’t  interact  with  modified  or  newly  introduced 
features,  among  other  reasons,  to  avoid  that  faults  introduced 
during base class maintenance  remain unrevealed in the subclass. 
term,  further  empirical 
evaluations  are  being  envisaged,  to  help  improve  the  approach. 
We are also extending this approach for components having  more 
than  one class; so instead  of  method’s  interactions  inside a class 
(intraclass  testing),  we  focus  on  interactions  between  classes 
(interclass testing). In  the long term, we envisage the construction 
of  an  infrastructure  supporting  the development  and  use  of  self- 
testable  components  that  is  generic  enough  to  be  applicable  to 
components developed  using different languages. 
7.  Acknowledgements 
As  future  works, 
the  short 
in 
This  work  was  partially  supported  by  grants  from  the 
Brazilian  Research Council  (CNPq). We  would also like to thank 
the  reviewers,  whose  comments  greatly  contributed 
to  the 
improvement of this text. 
8. 
References 
F.Bachmann,  L.Bass  et  al.  “Technical  Concepts  of 
Component Based Software Engineering”.  Technical  Report 
CM U/SEI-2000-TR-008,  04/2000. 
S.Barbey,  D.Buchs, C.Ptraire.  “A  Theory  of  Specification- 
Based  Testing  for  Object-Oriented  Software”,  in  Proc.  2nd. 
European  Dependable  Computing  Conference  (EDCC-2), 
Italy,  1996, pp303-320. 
A.Beugnard,  J.Jezeque1,  N.Plouzeau,  D.Watkins.  “Making 
Components  Contract  Aware”,  E E E  Computer,  July/] 999, 
~ ~ 3 8 - 4 5 .  
B.Beizer.  “Software  Testing  Techniques”. 
Thomson Computer Press, 2”dy Edition,  1990. 
B.Beizer. “Black-Box Testing”. John Wiley & Sons,  1995. 
R.V.Binder.  “Testing  Object-Oriented  Systems:  Models, 
Patterns and Tools”. Addison-Wesley,  2000. 
R.V.Binder.  “The  FREE  Approach 
to  Testing  Object- 
Oriented  Software:  an  Overview”,  report  of  RSBC,  1994, 
available on the Web: www.rsbc.com. 
R.V.Binder.  “Design  for  Testability 
Systems”, Comm. of ACM, 37(9), SeptA994, pp87-101. 
R.V.Binder. “Testing for Reuse: Libraries and Frameworks”, 
in  Journal  of  Object-Oriented  Programming  (JOOP),  6(6), 
Aug/l996. 
in  Object-Oriented 
International 
1. 
2. 
3. 
4. 
5. 
6. 
7. 
8. 
9. 
159 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:37 UTC from IEEE Xplore.  Restrictions apply. 
IO.  M.E.Delamaro. “Interface  Mutation:  an  Adequacy Criterion 
for  Integration  Testing”.  PhD  Thesis,  Physics  Institute, 
S.Paulo State University at S.Carlos,  1997. (in Portuguese) 
1 1.  M.E.Delamaro, 
J .C.Maldonado, 
A.M.R.Vincenzi. 
“Proteum/IM 
Integrated  Mutation  Testing 
environment”, in Proc. of  Mutation  2000 Symposium,  USA, 
Oct/2000. 
2.0:  An 
12.  R.A.DeMillo,  R.J.Lipton,  F.G.Sayward.  “Hints  on  test  data 
selection:  Help  for  the  Practitioner  Programmer”.  IEEE 
Computer, 1 1 (4), 1978, pp34-43. 
14.  S.C.P.F.Fabbri, 
13.  R.K.Doong,  P.Frankl.  “The  ASTOOT  Approach  to Testing 
Object-Oriented  Programs”,  in  ACM  Trans  on  Software 
Engineering  and Methodology,  3(2), ApriM994, pp101-130. 
P.C.Masiero, 
M.E.Delamaro.  “Mutation  Analysis  Testing  for Finite State 
Machines”, 
International  Symposium  on 
Software  Reliability  Engineering 
(ISSRE’94),  USA, 
Nov/l994, ~ ~ 2 2 0 - 2 2 9 .  
J . C. M al don ado, 
in  Roc.  5”. 
15.  S.C.P.F.Fabbri, 
J.C.Maldonado, 
P.C.Masiero, 
M.E.Delamaro.  “Mutation  Analysis  Applied  to  Validate 
Specifications  Based  on  Petri  Nets”,  in  FORTE’95  - 8‘h. 
IFIP  Conference  on  Formal  Descriptions  Techniques  for 
Distributed  Systems and Communication Protocols,  Canada, 
Octl1995, ~ ~ 3 2 9 - 3 3 7 .  
J.C.Maldonado,  T.Sugeta,  P.C.Masiero. 
“Mutation  Testing Applied to Validate  Specifications  Based 
on  Statecharts”, in  Proc.  91h.  International  Symposium  on 
Software  Reliability  Engineering 
(lSSRE’99),  USA, 
Nov/l999, ~ ~ 2 1 0 - 2 1 9 .  
16.  S.C.P.F.Fabbri, 
17.  X.Franch.  “The Convenience  for a Notation to Express Non- 
Functional  Characteristics  of  Software  Components”,  in 
Is‘.  Workshop  on  Component-Based  Systems, 
Proc. 
Switzerland, 
the  Web: 
www.cs.iastate.edu/-leavens/F&BS/FoCBS.html. 
Available 
1997. 
on 
18.  R.S.Freedman.  “Testability  of  Software Components”.  IEEE 
Trans. Software Eng.,  17(6), June/1991, pp553-564. 
19.  J.Gao.  “Testing  Component-Based  Software”.  Proc. of 
STARWest,  San  Jose,  USA,  1999. Available  on  the  Web: 
ww\~..enrr.sisu/cdu/uaoicrrv/rcp(~rdsl~r-tcst.htni. 
20.  M.-J.Harrold, 
J.McCregor,  K.Fitzpatrick. 
“Incremental 
Testing  of  Object-Oriented  Class  Structures,  in  Proc.  14Ih. 
IEEE  Int.  Conference  on  Software  engineering  (ICSE-14), 
1992, ~ ~ 6 8 - 8 0 .  
21.  D.Hoffman.  “Hardware  Testing  and  Software  Ics”.  Proc. 
Northwest  Software  Quality  Conference,  USA,  Sepdl989, 
~ ~ 2 3 4 - 2 4 4 .  
22.  D.Hoffman,  P.Strooper.  “The  Testgraph  Methodology”,  in 
Journal  of  Object-Oriented  Programming  (JOOP),  Nov- 
Dec11995, pp35-41. 
23.  IEEE  Standard  Glossary 
of  Software  Engineering 
Terminology  ANSYIEEE 610.12, 1990, IEEE Press. 
24.  D.Kung,  J.Gao,  P.Hsia,  Y.Toyoshima,  C.Chen,  Y.S.Kim, 
Y.K.Song.  “Developping  an  Object-Oriented  Software 
Testing  and  Maintenance  Environment”,  in  Comm.  of  the 
ACM, 38(10), Oct/1995, ~ ~ 7 5 - 8 7 .  
25.  B.Meyer.  Object-Oriented  Software  Constritction.  Prentice 
Hall,  1988. 
26.  B.Meyer.  “Applying  Design  by  Contract”.  IEEE Computer, 
27.  G.J.Myers.  “The  Art  of  Software Testing”.  John  Wiley  & 
Oct.11992, pp40-51. 
Sons,  1978. 
28.  R.S.Pressman,  Software  Engineering,  a  Practitioner’s 
Approach. McGraw-Hill,  1997, 4’.  Edition. 
29.  S.Siegel.  “Object-Oriented  Software  Testing:  a Hierarchical 
Approach”.  John Wiley & Sons, 1996. 
30.  S.R.S. Souza, J.C.Maldonado,  S.C.P.  F.Fabbri,  W.Lopes de 
Souza. “Mutation Testing Applied to Estelle  Specifications”, 
in Proc.  of  33th.  Hawaii  Intern.  Conf.  On  System  Science, 
mini-track  on  Distributed  Systems  Testing,  Hawaii, 
J an/2000. 
31.  C.Szyperski. 
“Component 
Software.  Beyond  00 
Programming”.  Addison-Wesley,  1998. 
32.  C.M.Toyota,  E.Martins. 
a 
Methodology for the Construction  of  Sekf-Testing  Classes”, 
in  IX  International  Conference  on  Software  Technology  - 
Software  Quality,  Curitiba,  Brazil, 
(in’ 
Portuguese) 
in  00  Testing: 
June11998. 
“Reuse 
33.  C.M.Toyota.  “Improving  Class  Testability  using  the  Self- 
Testing 
Institute  of 
Computing,  State  University  of  Campinas,  June/2000.  (in 
Portuguese) 
concept”.  Master  Dissertation, 
34.  Y .Traon;  D.Deveaux; 
J.-M.JCzCquel. 
“Self-testable 
Components: from Pragmatic Tests to Design-for-Testability 
Methodology”.  in Roc. 1 ’I.  Workshop on Component-Based 
Systems, 
URL: 
www.Cs.iastate.edu/-leavens/FoCBS/F&BS. html. 
Switzerland, 
1997. 
35.  A.M.R.Vincenzi, 
J.C.Maldonado, 
E.F.Barbosa, 
Interface  Operators:  a  Case 
in  XI11  Brazilian  Symposium  on  Software 
M.E.Delamaro.  “Essential 
Study”, 
Engineering,  S.Catarina, Brazil, Oct11999, pp373-391. 
36.  J.M.Voas;  K.W.Miller.  “Software  Testability: 
the  New 
Verification”.  IEEE Software, MarcMl995, pp17-28. 
37.  J.M.Voas,  M.Schmid,  MSchatz.  “A  Testability  based 
Assertion  Placement  Tool  for  Object-Oriented  Software”, 
Technical  Report  - Information  Technology  Laboratory, 
NIST  CGR  98-735,  Jan/1998.  Available  on 
the  Web: 
http://www.rstcorp.com. 
38.  Y.Wang,  G.King,  l.Court,  M.Ross.  “On  Testable  Object- 
Oriented  Programming”,  in  ACM  Software  Engineering 
Notes, 22(4), July/l997, pp84-90. 
39.  Y.Wang;  G.King;  H.Wickburg.  “A  Method  for  Built-in 
Tests  in  Component-based  Software  Maintenance”.  Proc. 
3rd. European  Conference  on  Software  Maintenance  and 
Reengeneering  (CSMR), Holanda, March/l999, pp186-189. 
Test  Data 
IEEE  Trans.  Software  Eng.  SE-12,  12, 
40.  E.J.Weyuker. 
“Axiomatizing 
Software 
Adequacy”. 
Dec/l986, pl128-1138. 
41.  E.J.Weyuker.  “Testing  Component-Based  Software:  a 
Cautionary Tale”. IEEE Software, Sept-Octll998, pp54-59. 
42.  R.L.Yanagawa.  “Evaluating  the  approach  for  construction 
and  use  of  self-testable  components”.  Master  Dissertation, 
Institute  of  Computing,  State  University  of  Campinas, 
Decembed2000.  (in Portuguese) 
160 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:37 UTC from IEEE Xplore.  Restrictions apply.