CPE OS Name: cpe:/o:centos:centos:7
sshd; type tty;class user
—3600-bash
(sshd)
3596 sshd:root@pts/2
UID USER
0root
0root
0root
Kernel:Linux 3.10.0-229.20.1.e17.x86_64
session-status 200
list-sessions
第6章使用systemd管理Linux系统服务137
SEAT
，当前终端如果想
---
## Page 154
6.4.1
Nginx 为例，从大家熟悉的 sysVinit 方式开始，来介绍如何编写自己的 systemd 服务脚本。
要使用 systemd 管理它们的启动，那就需要自行编写 systemd的 service文件，在这里我们以
6.4
如下：
间管理命令 timedatectl，使用 status 参数可以查看当前的系统时间。该命令的执行方法具体
6.3.5timedatectl 命令
138运维前线：一线运维专家的运维方法、技巧与实践
（2）安装：
（1）下载Nginx:
除了系统自带的软件之外，在实际应用中我们经常还会部署其他的开源软件，如果也需
为了统一早期版本的 date hwclock 这些查看和设置时间的命令，systemd 增加了一个时
#nginx.sh
#!/bin/bash
（3）编写启动脚本：
[root@localhost ~]# make install
[root@localhost~]#make
[root@localhost ~]#./configure --prefix=/usr/local/nginx
[root@localhost ~]# cd nginx-1.9.4/
[root@localhost ~]# tar zxf nginx-1.9.4.tar.gz
[root@localhost ~]# wget http://nginx.org/download/nginx-1.9.4.tar.gz
[root@localhost ~]# timedatectl set-ntp yes
使用 set-ntp 参数可以开启或关闭NTP 时间同步服务，开启时间同步的命令如下：
systemd服务管理
NTP
[root@localhost
编写Nginx的sysVinit启动脚本
DST active:n/a
RTC in local TZ:
synchronized:no
NTP enabled:n/a
Timezone:Asia/Shanghai (CsT,+0800)
RTC time:Thu 2015-12-10 10:32:32
Universaltime:Thu 2015-12-10 10:32:33UTC
Local time:Thu 2015-12-10 18:32:33CST
~]#timedatectlstatus
4060 1oginctl session-status 200
no
-4061 less
---
## Page 155
function
#重启函数
function stop{
#停止函数
function start{
function nginx_is_running {
#进程是否正在运行，若运行则返回0，若没有运行则返回
nginx_bin="/usr/local/nginx/sbin/nginx"
启动函数
/etc/rc.d/init.d/functions
加载系统函数
定义变量
http://nginx.org/download/nginx-1.9.5.tar.gz
description:nginx server
chkconfig:35 13 68
Nginx的顺序
则可以设置为
设置Nginx在runlevel为3或5时，随着系统一起启动，如果不需要开机启动，
stop
fi
else
if[$(nginx_is_running）=1 ];then
else
if[
fi
fi
else
then
if[-d/proc/$ngunx_pid_number]
#/proc下有和进程 PID 相同名称的目录，
local nginx_pid_number=$(cat $nginx_pid)
echo "nginx is not run"
echo
echo
${nginx_bin}
#停止Nginx
exit2
[xraad xuthu)s a- {uta xutbu)s
#启动Nginx
[$(nginx_is_running）=0] && echo "nginx is running"
restart{
-f ${nginx_pid} ];then
0
chkconifg:-13 68
-p ${nginx_prefix} -s stop
；这里的13和68分别表示开机启动和关机时
第6章使用systemd管理Linux系统服务
，即为该进程正在运行
L
139
---
## Page 156
6.4.2
Nginx的启动脚本。
140
systemd启动脚本不需要编写 Shell 脚本，
Description=nginx - high performance web server
sysVinit 脚本是在Centos5.x/6.x系统上面运行的，接下来我们看看 systemd 如何编写
[Unit]
使Nginx开机能够自动运行。
然后使用命令：
那么，应该怎样使用呢，我们将脚本复制到/etc/init.d/目录下，并为其设置可执行权限：
restart)
case "$1" in
[root@localhost~]#
[root@localhost ~]# chmod 755 /etc/init.d/nginx
esac
function status{
编写Nginx的systemd启动脚本
[root@localhost ~]# cp nginx.sh/etc/init.d/nginx
status)
stop)
start)
if[-f ${nginx_pid}];then
start
运维前线：一线运维专家的运维方法、技巧与实践
fi
status
restart
ii
stop
start
exit2
echo "nginx is not run"
[ $(nginx_is_running)= 0 ] && echo "nginx is running"
echo
exit0
"usage: $0 {start|stoplrestartlstatus}"
chkconfig --add nginx
，这里建立一个Nginx 的 systemd 启动脚本，脚
---
## Page 157
件，
Process:21244 ExecStart=/usr/local/nginx/sbin/nginx (code=exited, status=0/
如果Nginx成功启动，则可以查看到如下信息：
使用 systemctl start 命令运行Nginx 服务，命令如下：
systemctl daemon-reload
确保我们添加进去的[Unit] 被系统加载。
is successful
将脚本放在/usr/lib/systemd/system/目录下，使用如下命令可重新载人所有的[Unit]文
nginx[21242]:nginx: configuration file /usr/local/nginx/conf/nginx.conf test
syntax is ok
nginx[21242]:nginx: the configuration file /usr/local/nginx/conf/nginx.conf
status=O/SUCCESS)
Docs:http://nginx.org/en/docs/
[root@localhost ~]# systemctl start nginx.service
WantedBy=multi-user.target
[Install]
PrivateTmp=true
ExecStop=/bin/kill -S QUIT $MAINPID
#ExecStop参数指定停止Nginx服务时执行的命令
ExecReload=/bin/kill -S HUP $MAINPID
#ExecReload参数指定重新加载时执行的命令
ExecStart=/usr/local/nginx/sbin/nginx
#ExecStart参数用来启动Nginx服务
ExecStartPre=/usr/local/nginx/sbin/nginx-t
的检测
PIDFile=/usr/local/nginx/logs/nginx.pid
Type=forking
After=network.target remote-fs.target nss-lookup.target
Main PID:21247（nginx）
SUCCESS)
Active:active (running)
nginx.service-nginx-high performance web server
[Service]
#After参数设置项用来确认启动的顺序
Documentation=http://nginx.org/en/docs/
（
Process:
[root@localhost~]# systemctl status nginx.service
Group:/system.slice/nginx.service
ExecStartPre 参数可确保 ExecStart 参数启动之前执行的命令，这里是在启动之前进行配置文件正确性
-21248 nginx:worker process
-21247nginx:master process
Loaded: loaded (/usr/lib/systemd/system/nginx.service; disabled)
21242ExecStartPre=/usr/local/nginx/sbin/nginx -t (code=exited
/usr/local/nginx/sbin/nginx
第6章使用systemd管理Linux系统服务141
---
## Page 158
services里面绑定了服务名称和对应的TCP或UDP端口。
是 service rsync，还要注意此名称需要和/etc/services 配置文件的名称相对应，因为在/etc/
rsync 服务：
机通信，那么就需要使用类似于xinetd的方式来进行端口绑定，我们先来看下xinetd封装的
程、识别硬件设备、挂载磁盘、执行计划任务等。
6.4.3
大家根据6.2节所述的原理可以实现大多数开源软件的启动脚本。
142
在这个配置文件中，service参数后面的服务名称可用于区别其他的服务，这里用的
systemd的功能不仅限于以上几种，它还能代替很多系统的功能，例如：socket 激活进
口 socket_type 为接受请求的类型，如果 TCP 协议为流类型，UDP 协议为数据报类型，
口disable 参数用来标记是否开机启动此项服务，这里设置为 yes的时候表示开机不启动
[root@localhost~]# grep rsync /etc/services
在 systemd 没有出现之前，系统管理员经常会编写一些 Shell脚本，有些脚本需要跨主
通过上述信息可以得知，Nginx 服务已被正确关闭。这就是 systemd 的启动脚本，相信
下面继续来看看其他参数：
rsync
service rsync
1.使用systemd的socket 激活进程
nginx.service -nginx-high performance web server
[root@localhost~]#
[root@localhost~]#
使用systemctl stop可以停止服务，再使用 systemctl status 命令可以看到如下信息：
systemd[1]: Started nginx - high performance web server.
那么这里使用TCP 协议，所以类型使用 stream 方式。
rsync服务。
systemd 的其他功能
disable = yes
运维前线：一线运维专家的运维方法、技巧与实践
log_on_failure += USERID
server
user
wait
socket_type
Active:inactive (dead)
Loaded:loaded (/usr/lib/systemd/system/nginx.service; disabled)
Docs:http://nginx.org/en/docs/
873/tcp
= /usr/bin/rsync
systemctl status nginx.service
systemctl stop nginx.service
=no
=stream
#rsync
---
## Page 159
即可。
脚本中可以使用read类命令接收用户的输人请求，然后根据自己的需要调用Nginx启动脚本
下面的配置信息写人/etc/systemd/system/start-nginx.service文件：
用户 socket 的请求，然后根据请求的内容启动Nginx程序的脚本。
种 daemon类型的程序是无法支持的，一般应用于 Shell或 docker上。例如，编写一个接收
注意，应用程序必须支持 socket 激活，而且能够处理 socket 请求，所以像Apache Nginx 这
的 socket 功能就会简单很多。
最后将这个socket激活：
很简单，ExecStart是指在这个 service启动的时候会调用/usr/local/startnginx.sh脚本，在
systemd 的这个特性称为 socket 激活进程功能，但是在使用socket激活进程的时候需要
目前这个功能在CentOS7上面并不完善，如果需要在生产环境中使用类似的功能建议还
当使用者请求到 8080 端口的时候就会调用 Shell脚本来启动 Nginx了。
systemctl start start-nginx.socket
systemctl enable start-nginx.socket
ExecStart=/usr/local/startnginx.sh
Description=start nginx
这里的ListenStream表示的是 8080端口，一旦收到请求就会调用和它同名的 servie文
WantedBy=sockets.target
LinstenStream=8080
首先需要创建一个 socket 类型的[Unit] 文件，命名为 start-nginx.unit，内容如下：
使用 rsync 命令访问 873 端口即可连接到rsync 服务，过程略显繁琐，使用 systemd 集成
[Unit]
[Install]
[Socket]
[root@localhost~]# service xinetd restart
[root@localhost ~]# chkconfig rsync on
配置完成后可使用如下命令启动sync服务：
log_on_failure是将错误信息记录到日志，这里使用了+=USERID 参数，将把用户信
口 server是最重要的参数，这里表示的是绑定的应用程序，
user是xinetd调用rsync的用户权限。
wait表示请求是否会阻塞，如果希望并发处理用户的请求可以将此参数设置为 no。
[Service]