# 创建支持SSH服务的Docker镜像

## Dockerfile
```dockerfile
# 基础镜像
FROM ubuntu:14.04

# 维护者信息
MAINTAINER waitfish from dockerpool.com (PI:EMAIL)

# 设置环境变量，使所有操作都是非交互式的
ENV DEBIAN_FRONTEND noninteractive

# 添加网易源到apt源列表
RUN echo "deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse" >> /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse" >> /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse" >> /etc/apt/sources.list

# 更新软件包列表并安装必要的软件包
RUN apt-get update && apt-get install -y openssh-server python-minimal wget ca-certificates

# 取消PAM限制
RUN sed -i 's/session    required    pam_loginuid.so/#session    required    pam_loginuid.so/g' /etc/pam.d/sshd

# 创建SSH目录和文件
RUN mkdir -p /var/run/sshd
RUN mkdir -p /root/.ssh
ADD authorized_keys /root/.ssh/authorized_keys
RUN chmod 755 /run.sh

# 复制运行脚本
ADD run.sh /run.sh

# 设置自启动命令
CMD ["/run.sh"]

# 开放22端口
EXPOSE 22
```

## 构建镜像
```bash
$ sudo docker build -t sshd:dockerfile .
```

## 测试镜像
```bash
$ sudo docker run -d -p 10122:22 sshd:dockerfile
$ ssh 192.168.1.200 -p 10122
```

## 运行容器
```bash
$ sudo docker run -d -p 10122:22 sshd:dockerfile
```

## 查看镜像
```bash
$ sudo docker images
```

## 查看容器
```bash
$ sudo docker ps
```

### 关于是否需要为Docker容器启用SSH服务的争论
在Docker社区中，对于是否需要为Docker容器启用SSH服务一直存在争议。

**一方观点：**
- Docker的理念是一个容器只运行一个服务。因此，如果每个容器都运行一个额外的SSH服务，就违背了这个理念。
- 认为根本没有从远程主机进入容器进行维护的必要。

**另一方观点：**
- 在Docker 1.3版本之前，虽然官方推出了`docker exec`命令，但在从宿主主机进入容器时依然存在障碍。
- 使用SSH进行服务的维护是目前Linux用户较为熟悉的方式，并且对资源的需求不高，比较适合生产环境。

### 结论
在Docker推出更加高效、安全的方式对容器进行维护之前，容器的SSH服务仍然是有必要的。

---

# 创建带Apache服务的Docker镜像

## 准备工作
首先，创建一个`apache_ubuntu`工作目录，并在其中创建`Dockerfile`和`run.sh`文件。

```bash
$ mkdir apache_ubuntu && cd apache_ubuntu
$ touch Dockerfile run.sh
```

## Dockerfile
```dockerfile
# 基础镜像
FROM sshd:dockerfile

# 维护者信息
MAINTAINER waitfish from dockerpool.com (PI:EMAIL)

# 设置环境变量，使所有操作都是非交互式的
ENV DEBIAN_FRONTEND noninteractive

# 安装Apache
RUN apt-get update && apt-get install -yq apache2

# 删除默认安装的文件，并创建示例站点
RUN rm -rf /var/www/html && mkdir -p /app && ln -s /app /var/www/html

# 设置Apache相关的一些变量
ENV APACHE_DOCUMENTROOT /var/www
ENV APACHE_SERVERALIAS docker.localhost
ENV APACHE_SERVERNAME localhost
ENV APACHE_SERVERADMIN admin@localhost
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_RUN_DIR /var/run/apache2
ENV APACHE_PID_FILE /var/run/apache2.pid
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_RUN_GROUP www-data
ENV APACHE_RUN_USER www-data

# 更改系统的时区设置
RUN echo "Asia/Shanghai" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata

# 添加示例Web站点
COPY sample /app

# 添加运行脚本并设置权限
ADD run.sh /run.sh
RUN chmod 755 /run.sh

# 开放80端口
EXPOSE 80

# 设置自启动命令
CMD ["/run.sh"]
```

## run.sh
```bash
#!/bin/bash
exec apache2 -D FOREGROUND
```

## sample/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Hello, Docker!</title>
</head>
<body>
    <h1>Hello, Docker!</h1>
</body>
</html>
```

## 构建镜像
```bash
$ sudo docker build -t apache:ubuntu .
```

通过以上步骤，您可以根据自己的需求轻松定制Web服务或Web应用镜像。