* 参见 [Vim 参考手册](https://vimhelp.org/recover.txt.html#swap-file) 中的 `:help swap-file`。
### 模糊寻找插件
现在，模糊查找是一个我不能没有的插件。在服务器上当你每天需要打开 20 个文件时，使用 `:Ex` 或 `:e` 或 `:tabe` 等命令打开文件是没问题的。而当编码时，我通常需要打开数百个文件。正如我所说，CtrlP 很好地完成了这项工作。它很小，没有依赖性，纯 Vim。它用 `Ctrl + P` 组合键打开，这对我来说有点奇怪。我知道一些著名的编辑器（我记得是 VSCode）使用这个组合键。问题是，这已经是很重要的 Vim 绑定键，我不想覆盖它。所以对我来说，赢家是 `引导键 + 引导键`（逗号按两次）。
`ctrlp_user_command` 只是改变了 CtrlP 获取文件列表的方式。它不使用内置的递归文件列表（glob），而是使用 `git ls-files`，这通常更好，因为它忽略了 `.gitignore` 中的东西，所以像 `node_modules` 或其他可能拖慢列表的不相关目录不会受到影响。
使用 `引导键` + `B`/`T`/`F`/`Q`/`M` 来打开缓冲区、标签、当前文件的标签、快速修复缓冲区和最近使用的文件的列表，非常有用。具体来说，一旦你用 `ctags` 生成了标签列表，这基本上就是数百种编程语言的“去……定义处”，而且不需要插件！这都是 Vim 内置的。现在澄清一下，当我说输入 `引导键 + B` 时，是指按下逗号，然后按 `B` 键，而不是像用 `Control` 或 `Shift` 那样一起按。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/pi_netrw.txt.html#netrw-explore) 中的 `:help Explore`。
* 参见 [ctrlp.vim GitHub](https://github.com/kien/ctrlp.vim)。
### 缓冲区管理
虽然现在 Vim 支持标签，但缓冲区管理是掌握 Vim 的一个重要技能。我通常会有很多缓冲区，我需要经常做 `:bdelete`。那么，`引导键 + D` 似乎是一个不错的选择，可以更快地完成这个任务。我也喜欢关闭 Quickfix 窗口，所以也有 `引导键 + W` 的组合键，我在浏览搜索结果时经常使用这个功能。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/windows.txt.html#buffer-hidden) 中的 `:help buffer-hidden`。
### Ggrep 和 fugitive 插件
说到搜索，它和打开文件一样重要。我希望能够对代码库进行检索。为此，有一个来自 fugitive 插件的很棒的 `:Ggrep` 命令，它使用 `git grep`，忽略了垃圾文件，只搜索 Git 中的内容。由于 `Shift + K` 是 Vim 中的一个自由键，它非常适用于自动检索光标位置的词语。最后，能够使用 `引导键 + G` 输入任意的搜索模式也很好。注意，这将打开一个叫做 Quickfix 的窗口，你可以在这里浏览结果、查看下一个/上一个/最后一个/第一个出现的地方，等等。这个窗口也用于编译器或其他工具的输出，所以要熟悉它。如果你对此感到陌生，我建议进一步阅读文档。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/quickfix.txt.html) 中的 `:help quickfix`。
* 参见 [vim-fugitive GitHub](https://github.com/tpope/vim-fugitive)。
### 用 fugitive 进行搜索、检索
顺便说一下，用 `/` 键搜索是智能和大小写敏感的，这意味着如果所有的搜索字符都是小写的，Vim 的搜索会忽略大小写。默认情况下，它会高亮显示结果，我觉得我已经敲了无数次的 `:noh`（来关闭高亮显示）。这就是为什么我有 `引导键 + S` 来切换高亮显示。我建议以后也多读读手册中关于搜索的内容。
接下来是搜索、检索。fugitive 插件已经为你提供了。使用命令 `:Ggrep pattern` 来进行 `git grep`，结果会进入 Quickfix 窗口。然后简单地使用快速修复命令（`:cn`、`:cp` 等等）浏览结果，或者简单地使用 `:CtrlPQuickfix`（`引导键 + Q`）来直观地滚动它们。CtrlP 的快速修复整合的酷炫之处是，你可以通过输入以匹配文件名或内容来进一步在搜索结果中搜索。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/quickfix.txt.html#grep) 中的 `:help grep`。
* 参见 [Vim 参考手册](https://vimhelp.org/pattern.txt.html#noh) 中的 `:help noh`。
* 参见 [vim-fugitive GitHub](https://github.com/tpope/vim-fugitive) 。
### Ctags
`引导键 + C` 可以生成一个 ctags 文件，以便更好地导航，这在处理一个新的代码库或做一个有很多跳转的较长的编码任务时很有用。ctags 支持数百种语言，而 Vim 可以利用所有这些知识来导航。后面会有更多关于如何配置它的内容。注意我已经讨论过 `引导键 + T` 来打开所有标签的模糊搜索，记得吗？这两个是非常相同的。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/tagsrch.txt.html) 中的 `:help ctags`。
* 参见 [Universal Ctags 网站](https://ctags.io)。
### 按键映射
能够通过在项目目录下创建一个 `.vimrc` 文件来覆盖该项目中的任何设置是一个好主意。只要把它放在（全局的） `.gitignore` 中，以确保你不需要在每个项目中编辑成千上万的 `.gitignore` 文件。这样的一个项目的 `.vimrc` 可以是这样的（对于使用 GNU Makefile 的 C/C++ 项目）：
```
" coding style
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
" include and autocomplete path
let &path.="/usr/local/include"
" function keys to build and run the project
nnoremap  :wall!:make!
nnoremap  :!LD_LIBRARY_PATH=/usr/local/lib ./project
```
正如你所看到的，我通常将 `F2` 到 `F10` 等键映射到编译、运行、测试和类似的操作。用 `F9` 来调用 `make`，听起来不错。还记得 MS-DOS 上的蓝色 Borland IDE 吗？
如前所述，在全局范围内忽略 `.vimrc` 和（由 `ctags` 生成的）`tags` 是个好主意，所以不需要每次都更新 `.gitignore`：
```
# git config --global core.excludesfile ~/.gitignore
# cat ~/.gitignore
/.vimrc
/tags
/TAGS
```
在我的个人配置中还有几条只与那些非美国键盘布局的人有关（我用捷克语）。我需要用“死键”来输入许多字符（LCTT 译注：“死键”是一种通过将变音符号与后面的字母结合起来打出重音字符的方法。这种方法在历史上被用于机械打字机），这根本不可能，我宁愿输入命令而不是按那些难以按下的组合键。这里有一个解决问题的办法：
```
" CTRL-] is hard on my keyboard layout
map  
" CTRL-^ is hard on my keyboard layout
nnoremap  :b#
nnoremap  :bp
nnoremap  :bn
" I hate entering Ex mode by accident
map Q 
```
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/map.txt.html) 中的 `:help map`。
功能键在 Vim 中都是自由的，除了 `F1`，它被绑定在帮助上。我不需要帮助，并不是说我已经会对 Vim 了如指掌，并不是。但如果需要的话，我可以简单地输入 `:help`。而 `F1` 是一个关键的键，离 `Esc` 键如此之近。我喜欢将它用于缓冲区交换（`:b#`），将 `F2`/`F3` 用作下一个/上一个。你越是与缓冲区打交道，你就越需要这个。如果你没有使用过 `Ctrl + ^`，我建议你要习惯于它。哦，你有没有丑陋地输入 `:visual` 进入过 Ex 模式？许多初学者都不知道如何从该模式下退出 Vim。对我来说，这就是打扰，因为我很少使用它。
现在，熟悉 `ctags` 是成功使用 Vim 的一个关键因素。这个工具支持数百种语言，它不小心就为你不想创建标签的文件创建它，因此我建议忽略典型的垃圾目录：
```
# cat ~/.ctags.d/local.ctags
  --recurse=yes
  --exclude=.git
  --exclude=build/
  --exclude=.svn
  --exclude=vendor/*
  --exclude=node_modules/*
  --exclude=public/webpack/*
  --exclude=db/*
  --exclude=log/*
  --exclude=test/*
  --exclude=tests/*
  --exclude=\*.min.\*
  --exclude=\*.swp
  --exclude=\*.bak
  --exclude=\*.pyc
  --exclude=\*.class
  --exclude=\*.cache
```
### Airline 插件
我一定不能忘记 Vim 的 Airline 插件。在 Fedora 的两个插件中，这个插件很轻量级，不需要外部依赖，而且可以开箱即用我所有的字体。你可以定制它，而且还有主题之类的东西。我只是碰巧喜欢它的默认设置。
我必须提到，有两个主要的 Ctags 项目：Exuberant Ctags 和 Universal Ctags。后者是一个更现代的复刻。如果你的发行版有，就用它。如果你在 Fedora 35+ 上，你应该知道你现在用的是 Universal Ctags。
### 总结
作为总结，我的建议是这样的。尽量保持你的 Vim 配置流畅和干净。这将在未来得到回报。在我转换到新配置之后，我不得不重新学习“写入并退出”的命令，因为我总是不小心把它打成 `:Wq`，而我在旧的配置里有一个“小技巧”，让它实际上按我的意思工作。好吧，这个可能真的很有用，并能入选，我希望你能明白我的意思：
```
:command Wq wq
:command WQ wq
```
最后的一个快速技巧是：你可能需要经常改变你的默认 Vim 配置，来找到我在这里向你介绍的和你自己口味之间的舒适区。使用下面的别名，这样你就不需要一直搜索历史。相信我，当一个 Vim 用户在命令历史里搜索 “vim” 时，找不到什么是相关的内容：
```
alias vim-vimrc='vim ~/.vimrc'
```
就是这些了。也许这可以帮助你在没有大量插件的情况下在 Vim 的丰富世界遨游。“简简单单” 的 Vim 也很不错！
要尝试你刚刚读到的内容，请安装软件包并检出这些配置：
```
test -f ~/.vimrc && mv ~/.vimrc ~/.vimrc.backup
curl -s https://raw.githubusercontent.com/lzap/vim-lzap/master/.vimrc -o ~/.vimrc
mkdir ~/.vimbackup
```
特别感谢 Marc Deop 和 [Melanie Corr](https://opensource.com/users/melanie-corr) 对本文的审阅。
### 更新
我已经在这种配置下生存下来了！我唯一的纠结是 CtrlP 插件的结果顺序不同。文件的模糊算法与 `fzf.vim` 插件不同，所以我以前用各种搜索词能找到的文件现在找不到了。我最后安装了 Fedora 的 fzf 包以获得更相关的文件搜索，它附带了一个 vim 函数 `FZF`，可以绑定到引导键组合上。请看我的 [GitHub 仓库](https://github.com/lzap) 中更新后的配置文件。一路走来，我学到了很多东西。有一些键的绑定我已经忘记了，这要感谢许多插件。
这篇文章最初发表在 [作者的网站](https://lukas.zapletalovi.com/2021/11/a-sane-vim-configuration-for-fedora.html) 上，经许可后重新发表。
---
via: 
作者：[Lukáš Zapletal](https://opensource.com/users/lzap) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出