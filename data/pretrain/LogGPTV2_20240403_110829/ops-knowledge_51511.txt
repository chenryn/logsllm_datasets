If you are planning to set up an automated screen scraper on Google App Engine using Python, and you want to store the scraped data into an entity in the App Engine, there are a few considerations and tools that could be useful for your project.

**BeautifulSoup** is indeed a powerful library for parsing HTML and XML documents. It is widely used and well-documented, making it a good choice for extracting information from web pages. However, as noted, BeautifulSoup only parses the static content of a webpage. If the site you are targeting relies heavily on JavaScript to load or modify its content, BeautifulSoup alone may not suffice since it does not execute JavaScript.

For handling sites with dynamic content (i.e., those requiring JavaScript execution), you might need a more robust solution. **Selenium** is a popular option that allows you to control a web browser directly from your script, enabling the execution of JavaScript. Selenium can be integrated with Python through the `selenium` package. While Selenium is very capable, it's worth noting that running a full browser instance might be resource-intensive and not all environments, including certain configurations of Google App Engine, support this out-of-the-box due to sandboxing restrictions.

Given these limitations, another alternative you might consider, especially if moving towards a Java-based solution, is **HtmlUnit**. HtmlUnit is a headless web browser written in Java, which means it can render web pages and execute JavaScript without the overhead of a graphical user interface. This makes it a suitable tool for scraping websites that rely on JavaScript for content generation. Since you're open to potentially switching to Java, HtmlUnit could indeed be a viable path forward, offering both the ability to parse dynamic content and the efficiency needed for server-side applications.

In summary, while BeautifulSoup is great for simple, static page scraping, for more complex scenarios involving JavaScript, exploring options like Selenium (if you stay with Python) or HtmlUnit (if you switch to Java) would be advisable. Each has its pros and cons, so the best choice depends on the specific requirements of your project, including the nature of the target website and the constraints of your deployment environment.