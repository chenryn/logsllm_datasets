        tactics = set(tactics)
        for rule in self.all_rules:
            rule_tags = rule.contents.data.tags
            if 'Continuous Monitoring' in rule_tags or rule.contents.data.type == 'machine_learning':
                continue
            threat = rule.contents.data.threat
            if threat:
                missing = []
                threat_tactic_names = [e.tactic.name for e in threat]
                primary_tactic = f"Tactic: {threat_tactic_names[0]}"
                # missing primary tactic
                if primary_tactic not in rule.contents.data.tags:
                    missing.append(primary_tactic)
                # listed tactic that is not in threat mapping
                tag_tactics = set(rule_tags).intersection(tactics)
                missing_from_threat = list(tag_tactics.difference(threat_tactic_names))
                if missing or missing_from_threat:
                    err_msg = self.rule_str(rule)
                    if missing:
                        err_msg += f'\n    expected: {missing}'
                    if missing_from_threat:
                        err_msg += f'\n    unexpected (or missing from threat mapping): {missing_from_threat}'
                    invalid.append(err_msg)
        if invalid:
            err_msg = '\n'.join(invalid)
            self.fail(f'Rules with misaligned tags and tactics:\n{err_msg}')
    def test_os_tags(self):
        """Test that OS tags are present within rules."""
        required_tags_map = {
            'linux': 'OS: Linux',
            'macos': 'OS: macOS',
            'windows': 'OS: Windows'
        }
        invalid = []
        for rule in self.all_rules:
            dir_name = rule.path.parent.name
            # if directory name is linux, macos, or windows,
            # ensure the rule has the corresponding tag
            if dir_name in ['linux', 'macos', 'windows']:
                if required_tags_map[dir_name] not in rule.contents.data.tags:
                    err_msg = self.rule_str(rule)
                    err_msg += f'\n    expected: {required_tags_map[dir_name]}'
                    invalid.append(err_msg)
        if invalid:
            err_msg = '\n'.join(invalid)
            self.fail(f'Rules with missing OS tags:\n{err_msg}')
    def test_ml_rule_type_tags(self):
        """Test that ML rule type tags are present within rules."""
        invalid = []
        for rule in self.all_rules:
            rule_tags = rule.contents.data.tags
            if rule.contents.data.type == 'machine_learning':
                if 'Rule Type: Machine Learning' not in rule_tags:
                    err_msg = self.rule_str(rule)
                    err_msg += '\n    expected: Rule Type: Machine Learning'
                    invalid.append(err_msg)
                if 'Rule Type: ML' not in rule_tags:
                    err_msg = self.rule_str(rule)
                    err_msg += '\n    expected: Rule Type: ML'
                    invalid.append(err_msg)
        if invalid:
            err_msg = '\n'.join(invalid)
            self.fail(f'Rules with misaligned ML rule type tags:\n{err_msg}')
    @unittest.skip("Skipping until all Investigation Guides follow the proper format.")
    def test_investigation_guide_tag(self):
        """Test that investigation guide tags are present within rules."""
        invalid = []
        for rule in self.all_rules:
            note = rule.contents.data.get('note')
            if note is not None:
                results = re.search(r'Investigating', note, re.M)
                if results is not None:
                    # check if investigation guide tag is present
                    if 'Resources: Investigation Guide' not in rule.contents.data.tags:
                        err_msg = self.rule_str(rule)
                        err_msg += '\n    expected: Resources: Investigation Guide'
                        invalid.append(err_msg)
        if invalid:
            err_msg = '\n'.join(invalid)
            self.fail(f'Rules with missing Investigation tag:\n{err_msg}')
    def test_tag_prefix(self):
        """Ensure all tags have a prefix from an expected list."""
        invalid = []
        for rule in self.all_rules:
            rule_tags = rule.contents.data.tags
            expected_prefixes = set([tag.split(":")[0] + ":" for tag in definitions.EXPECTED_RULE_TAGS])
            [invalid.append(f"{self.rule_str(rule)}-{tag}") for tag in rule_tags
             if not any(prefix in tag for prefix in expected_prefixes)]
        if invalid:
            self.fail(f'Rules with invalid tags:\n{invalid}')
class TestRuleTimelines(BaseRuleTest):
    """Test timelines in rules are valid."""
    def test_timeline_has_title(self):
        """Ensure rules with timelines have a corresponding title."""
        from detection_rules.schemas.definitions import TIMELINE_TEMPLATES
        for rule in self.all_rules:
            timeline_id = rule.contents.data.timeline_id
            timeline_title = rule.contents.data.timeline_title
            if (timeline_title or timeline_id) and not (timeline_title and timeline_id):
                missing_err = f'{self.rule_str(rule)} timeline "title" and "id" required when timelines are defined'
                self.fail(missing_err)
            if timeline_id:
                unknown_id = f'{self.rule_str(rule)} Unknown timeline_id: {timeline_id}.'
                unknown_id += f' replace with {", ".join(TIMELINE_TEMPLATES)} ' \
                              f'or update this unit test with acceptable ids'
                self.assertIn(timeline_id, list(TIMELINE_TEMPLATES), unknown_id)
                unknown_title = f'{self.rule_str(rule)} unknown timeline_title: {timeline_title}'
                unknown_title += f' replace with {", ".join(TIMELINE_TEMPLATES.values())}'
                unknown_title += ' or update this unit test with acceptable titles'
                self.assertEqual(timeline_title, TIMELINE_TEMPLATES[timeline_id], unknown_title)
class TestRuleFiles(BaseRuleTest):
    """Test the expected file names."""
    def test_rule_file_name_tactic(self):
        """Test to ensure rule files have the primary tactic prepended to the filename."""
        bad_name_rules = []
        for rule in self.all_rules:
            rule_path = rule.path.resolve()
            filename = rule_path.name
            # machine learning jobs should be in rules/ml or rules/integrations/
            if rule.contents.data.type == definitions.MACHINE_LEARNING:
                continue
            threat = rule.contents.data.threat
            authors = rule.contents.data.author
            if threat and 'Elastic' in authors:
                primary_tactic = threat[0].tactic.name
                tactic_str = primary_tactic.lower().replace(' ', '_')
                if tactic_str != filename[:len(tactic_str)]:
                    bad_name_rules.append(f'{rule.id} - {Path(rule.path).name} -> expected: {tactic_str}')
        if bad_name_rules:
            error_msg = 'filename does not start with the primary tactic - update the tactic or the rule filename'
            rule_err_str = '\n'.join(bad_name_rules)
            self.fail(f'{error_msg}:\n{rule_err_str}')
    def test_bbr_in_correct_dir(self):
        """Ensure that BBR are in the correct directory."""
        for rule in self.bbr:
            # Is the rule a BBR
            self.assertEqual(rule.contents.data.building_block_type, 'default',
                             f'{self.rule_str(rule)} should have building_block_type = "default"')
            # Is the rule in the rules_building_block directory
            self.assertEqual(rule.path.parent.name, 'rules_building_block',
                             f'{self.rule_str(rule)} should be in the rules_building_block directory')
    def test_non_bbr_in_correct_dir(self):
        """Ensure that non-BBR are not in BBR directory."""
        proper_directory = 'rules_building_block'
        for rule in self.all_rules:
            if rule.path.parent.name == 'rules_building_block':
                self.assertIn(rule, self.bbr, f'{self.rule_str(rule)} should be in the {proper_directory}')
            # Is the rule of type BBR
            self.assertEqual(rule.contents.data.building_block_type, None,
                             f'{self.rule_str(rule)} should not have building_block_type or be in {proper_directory}')
class TestRuleMetadata(BaseRuleTest):
    """Test the metadata of rules."""
    def test_updated_date_newer_than_creation(self):
        """Test that the updated_date is newer than the creation date."""
        invalid = []
        for rule in self.all_rules:
            created = rule.contents.metadata.creation_date.split('/')
            updated = rule.contents.metadata.updated_date.split('/')
            if updated '
            self.assertIn(rule_id, deprecated_rules, f'{rule_str} is logged in "deprecated_rules.json" but is missing')
    @unittest.skipIf(PACKAGE_STACK_VERSION < Version.parse("8.3.0"),
                     "Test only applicable to 8.3+ stacks regarding related integrations build time field.")
    def test_integration_tag(self):
        """Test integration rules defined by metadata tag."""
        failures = []
        non_dataset_packages = definitions.NON_DATASET_PACKAGES + ["winlog"]
        packages_manifest = load_integrations_manifests()
        valid_integration_folders = [p.name for p in list(Path(INTEGRATION_RULE_DIR).glob("*")) if p.name != 'endpoint']
        for rule in self.production_rules:
            if isinstance(rule.contents.data, QueryRuleData) and rule.contents.data.language != 'lucene':
                rule_integrations = rule.contents.metadata.get('integration') or []
                rule_integrations = [rule_integrations] if isinstance(rule_integrations, str) else rule_integrations
                rule_promotion = rule.contents.metadata.get('promotion')
                data = rule.contents.data
                meta = rule.contents.metadata
                package_integrations = TOMLRuleContents.get_packaged_integrations(data, meta, packages_manifest)
                package_integrations_list = list(set([integration["package"] for integration in package_integrations]))
                indices = data.get('index')
                for rule_integration in rule_integrations:
                    if ("even.dataset" in rule.contents.data.query and not package_integrations and  # noqa: W504
                       not rule_promotion and rule_integration not in definitions.NON_DATASET_PACKAGES):  # noqa: W504
                        err_msg = f'{self.rule_str(rule)} {rule_integration} tag, but integration not \
                                found in manifests/schemas.'
                        failures.append(err_msg)
                    # checks if the rule path matches the intended integration
                    # excludes BBR rules
                    if rule_integration in valid_integration_folders:
                        if rule.path.parent.name not in rule_integrations and rule.path.parent.name != "bbr":
                            err_msg = f'{self.rule_str(rule)} {rule_integration} tag, path is {rule.path.parent.name}'
                            failures.append(err_msg)
                    # checks if an index pattern exists if the package integration tag exists
                    integration_string = "|".join(indices)
                    if not re.search(rule_integration, integration_string):
                        if rule_integration == "windows" and re.search("winlog", integration_string):
                            continue
                        err_msg = f'{self.rule_str(rule)} {rule_integration} tag, index pattern missing.'
                        failures.append(err_msg)
                # checks if event.dataset exists in query object and a tag exists in metadata
                # checks if metadata tag matches from a list of integrations in EPR
                if package_integrations and sorted(rule_integrations) != sorted(package_integrations_list):
                    err_msg = f'{self.rule_str(rule)} integration tags: {rule_integrations} != ' \
                              f'package integrations: {package_integrations_list}'
                    failures.append(err_msg)
                else:
                    # checks if rule has index pattern integration and the integration tag exists
                    # ignore the External Alerts rule, Threat Indicator Matching Rules, Guided onboarding
                    ignore_ids = [
                        "eb079c62-4481-4d6e-9643-3ca499df7aaa",
                        "699e9fdb-b77c-4c01-995c-1c15019b9c43",
                        "0c9a14d9-d65d-486f-9b5b-91e4e6b22bd0",
                        "a198fbbd-9413-45ec-a269-47ae4ccf59ce",
                        "0c41e478-5263-4c69-8f9e-7dfd2c22da64",
                        "aab184d3-72b3-4639-b242-6597c99d8bca",