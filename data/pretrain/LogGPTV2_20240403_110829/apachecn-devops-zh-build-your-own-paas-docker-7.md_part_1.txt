# 七、在我们的平台即服务上部署
在前面的章节中，我们通过结合诸如 Crane 和 nginx-proxy 之类的工具，从以一种非常实际的方式建立我们的 PaaS 发展到了一种“被黑在一起的自动化”方式。仍然缺少一部分——如何部署您的代码。
在本章中，我们将讨论以下主题:
*   我们当前设置的问题
*   可用的工具/服务
*   dokku—迷你英雄库
*   用 Dokku 设置一个 WordPress 应用
# 我们当前设置的问题
我们当前的设置由三个容器组成:一个 WordPress 容器，一个 MySQL 容器和一个数据量容器，与 Crane 捆绑在一起。
我们当前使用`VOLUME`容器作为文件存储的设置的主要问题是，我们需要一种进入卷中编辑文件的方法。到目前为止，进入它的唯一方法是将它安装在另一个容器上。
另一个问题是我们没有版本控制我们的源代码。我们刚刚下载了 WordPress 和一些插件，并把它留在那里。如果我们更新 WordPress 或者做一些其他的改变呢？我们当然希望在版本控制之下。
如果我们想保持应用架构不变，有两种选择:
*   创建一个新的容器，装载我们的数据卷容器，安装它，并通过 SSH 访问它
*   在我们的 WordPress 容器中安装并打开对 SSH 的访问
安装 SSH 后，我们可以从远程机器访问容器外壳，因此，我们可以安装 Git 来对文件进行版本控制。通过这种方式，我们可以在需要时将新代码连接并推入数据量容器。
连接 SSH 时，可以直接进入容器，无需连接 Docker hosts shell。
如果您可以连接到 Docker 主机，从那里，如果您打开一个新的 shell 进入您的数据卷容器，第三个选项将是 SSH 进入您的 Docker 主机，然后使用`docker exec –it container_name /bin/sh`访问容器。
虽然这确实有效，但也有更简单的方法。
# 可用的工具/服务
当我们看到今天可用的托管 PaaS 提供商时，我们会想到其中的两个—OpenShift 和 Heroku。许多开发者喜欢 Heroku，因为它易于使用。他们的哲学给出了一个为什么的提示:
> *“开发者生产率:*
> 
> *开发人员生产力是我们的战斗口号，是我们所做一切的核心。为什么需要三个步骤？零步骤就可以了，为什么还要采取任何行动？”*
开发人员通常希望将时间花在代码上，而不是管理服务器、部署等等。
![The tools/services available](img/00062.jpeg)
在 Heroku 上，您可以获得一个远程 Git 存储库，您可以将代码推入其中。您的应用的语言和依赖项由特殊文件标识，具体取决于您使用的语言。环境变量用于配置，您可以通过在源代码中包含的名为 **Procfile** 的特殊文件中指定命令来指示 Heroku 执行什么。
每当您将代码推送到远程 Heroku Git 存储库中时，应用就会重建，您可以立即在线使用它。如果您有特殊的构建需求，Heroku 允许您创建自己的构建包，您可以在其中指定要做的事情。
基本上，如果你想在 Heroku 上建立一个 WordPress 博客，你需要经过以下步骤:
1.  本地下载最新版本的 WordPress。
2.  创建一个 Procfile 并定义要执行的内容(在这种情况下是一个运行 PHP 和 Apache2 的构建包)。
3.  创建一个`composer.json`文件，指定 PHP 是依赖项。
4.  对 WordPress 配置文件进行一些更改。
5.  创建 Heroku 应用，添加附加组件(如数据库)，并在 Heroku 上定义环境变量。
6.  将您的本地代码推送到 Heroku。
当您对代码进行更改时，您只需将 Git 推送到 Heroku 来部署新代码。您不能直接在 Heroku 的服务器上编辑代码，也不能安装主题或插件(您必须在本地完成并推送新代码)。
![The tools/services available](img/00063.jpeg)
如果你选择像 OpenShift 这样的提供商，你将对你的 PaaS 有更多的控制，你可以用 SSH 连接到它，也可以存储应用下载的静态文件。
我们正在寻找这样的东西；只是我们想托管自己的平台，让 Docker 容器在后台使用。
# doku–Docker 式微型英雄库
Dokku 可以在[https://github.com/progrium/dokku](https://github.com/progrium/dokku)找到。这是一个由作者描述如下的项目:
> *“Docker 在大约 100 行 Bash 中为迷你英雄库提供动力。”*
就功能而言，Dokku 执行部署的方式与 Heroku 相同。让我们安装 Dokku 并看看它能为我们的 PaaS 做些什么。
## 安装
Dokku 需要运行 Ubuntu 14.04，我们从创建一个运行它的新 EC2 实例开始。
下面是我们看到的截图:
![Installation](img/00064.jpeg)
当我们创建了一个实例并使其启动和运行时，我们可以从安装 Docker 本身开始:
```
sudo apt-get install docker.io
```
完成后，我们继续安装 Dokku。
推荐的引导 bash 安装对我不起作用，所以我克隆了 repo:
```
cd /tmp
git clone https://github.com/progrium/dokku.git
cd dokku
sudo make install
dokku version
```
### 注
您可以在[http://progrium.viewdocs.io/dokku/installation](http://progrium.viewdocs.io/dokku/installation)的官方安装页面上了解安装过程。
安装过程需要一段时间，但应该会成功。
根据前面链接的文档，我们应该编辑`/home/dokku/VHOST`文件来保存我们计划使用的域名的内容。我们现在跳过这个，因为它包括设置一些域名系统记录。当我们将该文件留空时，我们将以`http://ip:port`的形式到达我们的 PaaS。稍后我们将回到这一步。
现在剩下的唯一步骤是在我们的本地机器上创建一个`ssh`密钥对，并将公共部分添加到服务器用户 Dokku 的`authorized_keys`文件中，这样我们就可以以非常安全的方式与 Git 连接，而无需使用密码。
在您的本地机器上，使用以下命令:
```
cd ~/.ssh
ssh-keygen –t rsa
#I named my key pair id_rsa
cat id_rsa.pub
#copy the output so you have it in your clipboard
```
在服务器上，使用以下命令:
```
#As your ubuntu user
#Replace  with the key you just copied
# can be replaced with anything, like "remoteuser".
echo "" | sudo sshcommand acl-add dokku 
```
如果你将你的`ssh-key`命名为`id_rsa`以外的东西，你将不得不编辑你的本地`.ssh/config`文件来使它工作。
现在 Dokku 配置完成了，我们应该可以开始使用它了。
## 创建 Dokku 示例应用
是时候我们设置一个演示应用了，这样你就可以学习这个过程了。在这种情况下，让我们以 Heroku 的`Node.js`示例应用为例。
我们从克隆 Heroku 的`node-js-sample` GitHub 存储库开始，获取应用的内容。以下任务都应该在你的本地机器上完成，当我进入**server.com**时，你应该输入你的服务器的网址或 IP 地址。如果您使用域，请确保您已经为其设置了域名系统记录，或者在本地`/etc/hosts`文件中输入了记录:
```
#Clone the repo
git clone PI:EMAIL:heroku/node-js-sample.git
cd node-js-sample
#Add a Dokku git remote
git remote add dokku PI:EMAIL:first-app
#Push to Dokku
git push dokku master
```
当我们推送至 Dokku 中一个不存在的分支或应用名称时，Dokku 会创建一个新的应用并进行部署。推送完成后，您应该会在输出的底部看到类似这样的内容:
```
=====> Application deployed:
 http://54.191.69.5:49154
```
当然，IP 地址和端口对你来说不会一样。
显示输出，如下所示:
![Creating a sample Dokku app](img/00065.jpeg)
在你的网络浏览器中进入`ip:port`找到你自己的页面，说**你好世界**。我们刚刚在 Dokku 上部署了第一个应用！
要修改和重新部署站点，我们可以在`node-js-sample`项目中的`public/ folder`内创建一个名为`index.html`的文件。此节点应用将始终在公共文件夹中查找文件。如果找不到请求的文件，应用将返回到打印**你好世界**。因此，如果我们创建一个文件并请求它，节点服务器会将它提供给我们。
将其粘贴为`index.html`文件的内容:
```
    Hello
    First edit!
```
这是一个简单的网页。
让我们继续创建文件并推送，如下代码所示:
```
nano public/index.html
#paste the HTML
#save the file
#commit your changes
git add public/index.html
git commit –m "Added first HTML page."
#push to dokku
git push dokku master
```
### 注
从输出中注意到，每次部署时端口都会改变，因为会创建一个新容器，而旧容器会关闭。
稍后，当我们添加一个要部署的域名时，URL 当然是相同的。Nginx 配置文件在部署时更新。将你的浏览器指向新的`ip:port`，你会看到一个巨大的标题写着**先编辑！**。
每当你做编辑时，只需推送它们。多库会处理剩下的。
## 多库是如何工作的
正如我之前描述的 Heroku 的基本步骤，在 Dokku 上部署时，你可能会认出这些步骤，这也是 Dokku 的目标。他们希望像我们这样的人对部署过程感到满意。
Dokku 可以看作是以下工具之间的粘合剂:Docker、Buildstep、ssh-command、pluginhook、ssh、git 和 nginx。源代码只有大约 100 行长，它附带了几个插件，总共包含大约 500 行代码。这就是 Dokku 的力量——任何人都可以编写插件来扩展 Dokku 的功能。
我们还没有安装任何插件，像我们这样干净的安装只能做一些基本的事情，比如部署、查看应用的日志、删除应用以及在应用的容器中运行命令。还有相当多的外挂；它们都列在[http://progrium.viewdocs.io/dokku/plugins](http://progrium.viewdocs.io/dokku/plugins)上。
### 接收过程
如果我们查看主 Dokku 文件(在项目根中命名为`dokku`，我们注意到每当`receive`动作被触发时(当我们推送到主分支时发生)，我们会看到以下代码:
```
case "$1" in
  receive)
    APP="$2"; IMAGE="dokku/$APP"
    echo "-----> Cleaning up ..."
    dokku cleanup
    echo "-----> Building $APP ..."
    cat | dokku build $APP
    echo "-----> Releasing $APP ..."
    dokku release $APP
    echo "-----> Deploying $APP ..."
    dokku deploy $APP
    echo "=====> Application deployed:"
         dokku urls $APP | sed "s/^/       /"
    echo
    ;;
```
通过这个输出，我们可以识别什么时候我们已经推给了主人。
如果我们在调用`deploy`时遵循插件链，我们最终会得到一个名为`post-deploy`的插件钩子。一个名为`nginx-vhosts`的标准插件被触发，这又调用了该插件中名为`nginx:build-config`的函数。
前面文件中的代码片段如下所示:
```
case "$1" in
  nginx:build-config)
    APP="$2"; DOKKU_APP_LISTEN_PORT="$3"; DOKKU_APP_LISTEN_IP="${4}"
    VHOST_PATH="$DOKKU_ROOT/$APP/VHOST"
    WILDCARD_SSL="$DOKKU_ROOT/tls"
    SSL="$DOKKU_ROOT/$APP/tls"
    if [[ -z "$DOKKU_APP_LISTEN_PORT" ]] && [[ -f "$DOKKU_ROOT/$APP/PORT" ]]; then
      DOKKU_APP_LISTEN_PORT=$( Overriding default nginx.conf with detected nginx.conf.template"
        NGINX_CONF=$APP_NGINX_TEMPLATE
      fi
      xargs -i echo "-----> Configuring {}..."  Creating $SCHEME nginx.conf"
        echo "upstream $APP { server $DOKKU_APP_LISTEN_IP:$DOKKU_APP_LISTEN_PORT; }" > $DOKKU_ROOT/$APP/nginx.conf
        eval "cat > $DOKKU_ROOT/$APP/nginx.conf"
        echo "-----> Running nginx-pre-reload"
        pluginhook nginx-pre-reload $APP $DOKKU_APP_LISTEN_PORT $DOKKU_APP_LISTEN_IP
        echo "       Reloading nginx"
        restart_nginx
      fi
    else
      if [[ -f "$DOKKU_ROOT/$APP/VHOST" ]]; then
        echo "-----> VHOST support disabled, deleting $APP/VHOST"
        rm "$DOKKU_ROOT/$APP/VHOST"
      fi
      if [[ -f "$DOKKU_ROOT/$APP/nginx.conf" ]]; then