by the simulator. When the adversary provides the ﬁnal
bit of input, the simulator gets f (x) and can obtain a sim-
ulated garbled circuit F and garbled outputs d from the
static-secure scheme. Then it can program the random
oracle to return the appropriate masks.8
i
1,e0
1,e1
2,e1
(cid:28)Gb( f ,(cid:29)d):
(F,e,d) ← Gb( f )
R ← {0,1}κ
for each output wire i:
δ b
i ← H(R(cid:27)out(cid:27)i(cid:27)b(cid:27)db
i )⊕(cid:29)db
(cid:29)F ← (F ⊕ H(R(cid:27)gc),{δ b
i })
2, . . . ,e 0
(cid:29)e ← (e0
m(cid:27)R,e1
m(cid:27)R)
return ((cid:29)F,(cid:29)e)
(cid:28)Ev((cid:29)F,(cid:29)X):
parse (cid:29)Xm as Xm(cid:27)R and (cid:29)F as (F(cid:25),δ )
X ← ((cid:29)X1,(cid:29)X2, . . . ,Xm)
Y ← Ev(F(cid:25) ⊕ H(R(cid:27)gc),X)
y ←(cid:30)De(Y )
for each output wire i:
(cid:29)Yi = δ yi
return(cid:29)Y
i ⊕ H(R(cid:27)out(cid:27)i(cid:27)yi(cid:27)Yi)
Figure 9:
Transformation from a static-secure doubly-
projective garbling scheme (Gb, En, Ev, De,(cid:30)De) to one satis-
fying Deﬁnition 6.
8Technically, the proof assumes that the simulator for the static-
secure scheme can set the (simulated) garbled input encoding arbitrar-
ily. This is true for common existing schemes; e.g., [35].
16
312  25th USENIX Security Symposium 
USENIX Association
Setup stage: On common input (sid, SETUP, f ,N,ε), where f is a boolean circuit, N is the number of executions. The parties
agree on parameters B,(cid:31)N derived from Lemma 1. Let M ∈ {0,1}µ×n be a κs-probe resistant matrix for each party’s input of
size n. Let a ∈ {0,1} denote the role of the current party and b = a⊕ 1. Note: the protocol is symmetric where both parties
simultaneously play the roles of Pa and Pb.
• Cut-and-Choose Commit: Pa chooses at random the cut and choose set σa ⊂ [(cid:31)N] of size (cid:31)N − NB. Pa send
(COMMIT, (sid, CUT-AND-CHOOSE,a),σa) to Fcom. For j ∈ [(cid:31)N]:
j ,e j) ←(cid:30)Gb( f (cid:23),d j) and sends the Fa
µ
rot and receives choice bits ca
– OT Init: Pa sends (INIT, (sid, OT,a, j)) to F
– Send Circuit: Pa chooses random output wire labels d j, computes (Fa
j ,eb
Pb where f (cid:23)(xa,r, ˜xb) = f (xa,Mr⊕ ˜xb) and r, ˜xb are Pb’s inputs. Let ea
xa, ˜xb,r, for circuit Fa
to
j respectively be the labels encoding
j and e∗j,t,h index the label of the tth wire with value h in the set e∗j
j in response.
j ,er
j
– Input Commit: Pa sends the following to Fcom:
(cid:31) (COMMIT, (sid,xa-INPUT,a, j,t,h),ea
(cid:31) (COMMIT, (sid,xb-INPUT,a, j,t,h),eb
(cid:31) (COMMIT, (sid, r-INPUT,a, j,t,h),er
j,t,Mc[t]⊕h)t∈[n],h∈{0,1}.
)t∈[n],h∈{0,1}
)t∈[µ],h∈{0,1}
j,t,h
j,t,h
– Output Commit: Pa sends (COMMIT, (sid, OUTPUT,a, j), d j) to Fcom.
• Cut-and-Choose: Pb sends (OPEN, (sid, CUT-AND-CHOOSE,b)) to Fcom and Pa receives σb. For j ∈ σb:
j . Pb veriﬁes the correctness of Fa
j .
– OT Decommit: Pa sends (OPEN, (sid, OT,a, j)) to F
– Check Circuit: Pa sends Pb the d j and coins used to garble Fa
– Input Decommit: Let ea
j be the veriﬁed labels as above.
µ
rot and Pb receives choice bits cb
j.
j ,eb
j ,er
(cid:31) Pa sends (OPEN, (sid,xa-INPUT,a, j,t,h))∀t,h to Fcom and Pb receives labels e(cid:23)a.
(cid:31) Pa sends (OPEN, (sid,xb-INPUT,a, j,t,h))∀t,h to Fcom and Pb receives labels e(cid:23)b.
(cid:31) Pa sends (OPEN, (sid, r-INPUT,a, j,t,h))∀t,h to Fcom and Pb receives labels e(cid:23)r.
(cid:31) If there exists a e(cid:23)a
t,h (cid:20)= ea
j, or e(cid:23)r (cid:20)= er
• Bucketing: Pb randomly maps the indices of [(cid:31)N]− σb into sets β a
– Output: Pa sends (OPEN, (sid, OUTPUT,a, j)) to Fcom. Pb receives d(cid:23) and return ABORT if d(cid:23) (cid:20)= d j.
– Bucket Labels: Pa generates random output labels Oa
N s.t. |β a
i . For j ∈ β a
i , Pa send the output translation
i,t,h) to Pb, where d j are the output labels of Fa
j .
1 , ...,β a
i for bucket β a
j [t]⊕h, or e(cid:23)b (cid:20)= eb
i | = B. For i ∈ [N]:
j, Pb returns ABORT .
j,t,Mcb
– Ofﬂine Inputs:
i,t,h ⊕ d j,t,h}t,h and H(Oa
j := {Oa
T a
(cid:31) Pa sends (AGGREGATE, (sid, OT-AG,a,i),{(sid, OT,a, j)| j ∈ β b
tion strings δ a
(cid:31) Pb sends (DELIVER, (sid, OT-AG,a,i),{er
{(sid,r-INPUT,b, j,t,h)}t,h.
(cid:31) For j ∈ β b
i , Pa receives X r
j and Wj from F
and receives X(cid:23)r
j for j ∈ β a
i .
j,w j| j ∈ β b
i }) to F
µ
rot. Pa send (OPEN, (sid,r-INPUT,b, j,t,ca
(cid:20)= X r
j .
Execution stage: On common bucket index i and Pa’s input xa.
j . Pa returns ABORT if X(cid:23)r
j
µ
rot and Pb receives the OT aggrega-
i }) to F
µ
rot where w j are the decommitment strings to
j [t]),Wj,t )∀t to Fcom
(sid, OT,a, j(cid:23)). For all j ∈ β b
i :
• Receiver’s Inputs: Let j(cid:23) be the ﬁrst index in β a
i . Pa sends ˜xa := xa ⊕ Mca
j(cid:23) to Pb where ca
j(cid:23) are the choice bits of
j encodes ˜xa for Fb
j and w j are the
j,t )∀t to Fcom and receives X(cid:23)a
j . Pa
j )[t]}t to Pa where ea
j )[t]),W a
– Pb sends X a
– Pa receives X a
j )[t]}t and W a
j := {w j,( ˜xa⊕Mδ a
• Sender’s Inputs: For j ∈ β b
j := {ea
decommitments string to {(sid,xa-INPUT,b, j,t,h)}t,h.
j ,W a
returns ABORT if X a
j
j,t,( ˜xa⊕Mδ a
j and sends (OPEN, (sid,xa-INPUT,b, j,t, (xa ⊕ Mca
(cid:20)= X(cid:23)a
j .
i , Pb sends (OPEN, (sid,xb-INPUT,b, j,t, (xb ⊕ Mcb
j . Pa returns ABORT if ˜xb ⊕ Mδ b
X b
i , let Yj :=(cid:30)Ev(Fb
(cid:20)= (xb ⊕ Mcb
j ).
• Evaluate: For j ∈ β b
j , (X b
j ,X r
j ,X a
• PSI Commit: For ∀ j,t, if (H(Yj,t ) (cid:20)= H(Ob
• Output Decommit: For j ∈ β b
If there exists j, j(cid:23) s.t. d(cid:23)j,t,h ⊕ T b
CHEATING!, else PA returns y j s.t. Ij ∈ R.
j )) with semantic value y j.
j
i , Pb sends (OPEN, (sid, OUTPUT,b, j)) to Fcom and Pa receives d(cid:23)j.
j,t,h (cid:20)= d(cid:23)j(cid:23),t,h ⊕ T b
j(cid:23),t,h, Pa returns ABORT.
j,t,y j[t] ⊕ Oa
Pa pads I to size B with random values and sends (INPUT, (sid, PSI,i),I) to Fpsi and receives (INPUT,Pb).
i,t,y j[t])), then Yj,t ← {0,1}κc. Let I := {(cid:29)t Yj,t ⊕ T b
i,t,y j[t]} j∈β b
i
.
• PSI Decommit: Pb sends (OPEN, (sid, PSI,i)) to Fpsi and Pa receives the intersection R.
If |R| (cid:20)= 1, Pa returns
j )[t]))∀t to Fcom. Pa receives the labels
Figure 15: Malicious secure online/ofﬂine dual-execution 2PC protocol Πmulti-sfe.
USENIX Association  
25th USENIX Security Symposium  313
17
Parameters: Two parties: a sender P1 and receiver P2;
(cid:30) = bit-length of items in the set; n = size of parties’
sets; F = a PRF.
Ofﬂine phase: Parties perform random OTs, resulting
in P1 holding strings mi,t
{0,1} ← {0,1}κc; and P2 holding
ci and mi,t
Input committing phase:
ci[t]. Here, ci ∈ {0,1}(cid:30) and i ∈ [n],t ∈ [(cid:30)].
• On input (INPUT,{A2,1, . . . ,A 2,n}) to P2, P2 ran-
domly permutes its input and then sends di :=
A2,i ⊕ ci for each i ∈ [n].
• On input (INPUT,{A1,1, . . . ,A 1,n}) for P1, P1 ran-
domly permutes its input and then computes
Si, j =(cid:31)t F(mi,t
• P1 sends (COMMIT, sid, (S1,1, . . . ,S n,n)) to Fcom.
P1
receives
then outputs
Output
sends
(OPENED, sid, (S1,1, . . . ,S n,n)).
On
to Fcom and P2
di[t]⊕A1, j[t], j) for i, j ∈ [n].
(OUTPUT),
(OPEN, sid)
phase:
input
P2
{A2,i | ∃ j :(cid:31)t F(mi,t
ci[t], j) =S i, j}.
Figure 13: Weakly-malicious-secure, synchronous (3-round),
two-phase PSI protocol Πsync-psi.
Parameters: Two parties: a sender P1 and receiver P2;
(cid:30) = bit-length of items in the set; n = size of parties’
sets; F = a PRF.
Ofﬂine phase: Parties perform random OTs, resulting
in P1 holding strings mi,t
{0,1} ← {0,1}κc; and P2 holding
ci and mi,t
For i ∈ [n], P1 chooses πi ← {0,1}(cid:30). Then for i, j ∈ [n],
party P1 does the following:
• For t ∈ {0,1}(cid:30), choose zi, j
t ← {0,1}(cid:30) subject to
(cid:31)t zi, j
t = 0
• for
t ∈ [(cid:30)],b ∈ {0,1}; P1 sends (COMMIT,
ci[t]. Here, ci ∈ {0,1}(cid:30) and i ∈ [n],t ∈ [(cid:30)].
(sid,i, j,t,b),F(mi,t
π j[t]⊕b, j)⊕ zi, j
t ) to Fcom.
committing
Input
phase:
put
(INPUT,{A1,1, . . . ,A 1,n})
(INPUT,{A2,1, . . . ,A 2,n}) for P2,
domly permute their
do:
in-
for
and
the parties ran-
inputs and asynchronously
On
P1
Parameters: A sender P1 and receiver P2.
Setup: On common input S from both parties,
for every s ∈ S choose random m0,m1 ← {0,1}κc
and random c ← {0,1}.
Internally store a tuple
(s,m0,m1,c).
P1 output: On input (GET,s) from P1, if there is
a tuple (s,m0,m1,c) for some m0,m1,c then give
(OUTPUT,s,m0,m1) to P1.
P2 output: On input (GET,s) from P2, if there is
a tuple (s,m0,m1,c) for some m0,m1,c then give
(OUTPUT,s,c,mc) to P2.
Figure 10: Random OT functionality Fot.
Parameters: A sender P1 and receiver P2.
Commit: On input (COMMIT, sid,v) from P1:
If
a tuple of the form (sid,·,·) is stored, then abort.
If P1 is corrupt, then obtain value r from the ad-
versary; otherwise choose r ← {0,1}κc and give r
to P1.
Internally store a tuple (sid,r,v) and give
(COMMITTED, sid) to P2.
Reveal: On input (OPEN, sid,r(cid:26)) from P2:
a tuple (sid,r(cid:26),v) is stored for some v,
give (OPENED, sid,v) to P2.
(ERROR, sid) to P2.
Figure 11: Non-interactive commitment functionality Fcom.
if
then
Otherwise, give
Parameters: Two parties: a sender P1 and receiver
P2; (cid:30) = length of items; n = size of parties’ sets.
First phase (input commitment): On input
(INPUT,Ai) from party Pi (i ∈ {1,2}), with Ai ⊆
{0,1}(cid:30) and |Ai| = n: If this is the ﬁrst such command
from Pi then internally record Ai and send message
(INPUT,Pi) to both parties.
Second phase (output): On input (OUTPUT) from
Pi, deliver (OUTPUT,A1 ∩ A2) to the other party.
Figure 12: Two-phase private set intersection (PSI) functional-
ity F
n,(cid:30)
psi .
• P1 sends d1, j := A1, j ⊕ π j for each j ∈ [n]
• P2 sends d2,i := A2,i ⊕ ci for each i ∈ [n]
to Fcom and P2
Output phase: On input (OUTPUT):
for i, j ∈ [n],
t ∈ [(cid:30)], party P1 sends (OPEN, (sid,i, j,t,d1, j[t] ⊕
expects
to receive
d2,i[t]))
(OPENED, (sid,i, j,t,d1, j[t]⊕ d2,i[t]),ρi, j
t ).
P2 outputs {A2,i | ∃ j :(cid:31)t F(mi,t
ci[t], j) =(cid:31)t ρi, j
t }
Figure 14: Weakly-malicious-secure, asynchronous (2-round),
two-phase PSI protocol Πasync-psi.
314  25th USENIX Security Symposium 
USENIX Association
18