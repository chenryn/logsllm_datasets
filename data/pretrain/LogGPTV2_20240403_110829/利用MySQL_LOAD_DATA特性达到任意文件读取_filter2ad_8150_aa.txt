## 利用MySQL LOAD DATA特性达到任意文件读取
嘿，如果你能登陆对方的mysql服务器，却发现对方的数据库上没有什么重要数据怎么办？尝试通过MySQL LOAD DATA INFILE 特性来读取文件吧！
### Load Data Infile
LOAD DATA INFILE
语句从一个文本文件中以很高的速度读入一个表中。如果指定LOCAL关键词,从客户主机读文件。如果LOCAL没指定,文件必须位于服务器上。语法如下：
    LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name'
    [REPLACE | IGNORE]
    INTO TABLE tbl_name
    [PARTITION (partition_name,...)]
    [CHARACTER SET charset_name]
    [{FIELDS | COLUMNS}
    [TERMINATED BY 'string']
    [[OPTIONALLY] ENCLOSED BY 'char']
    [ESCAPED BY 'char']
    ]
    [LINES
    [STARTING BY 'string']
    [TERMINATED BY 'string']
    ]
    [IGNORE number {LINES | ROWS}]
    [(col_name_or_user_var,...)]
    [SET col_name = expr,...]
但我们用到的语句大致如下：
    load data infile 'file_name' into table table_name fields terminated by '分隔符'
本地测试一下语句，环境如下:
服务器：mysql 5.5.53，Windows系统，IP-192.168.246.1
客户端：Kali，IP-192.168.246.137
  1. 从本地服务器导入数据
        # test.txt内容
     "3","pwd3"
     "4","pwd4"
     # load data infile命令
     load data infile 'D:/Equipment/phpstudy/MySQL/test.txt' into table user fields terminated by ',';
  2. 从客户端导入数据
        # /root/Document/test.txt 内容
     "1","pwd1"
     "2","pwd2"
     mysql -h 192.168.246.1 -u root -p -D test -e "load data local infile '/root/Documents/test.txt' into table user fields terminated by ',';"
回到我的本机(IP: 192.168.246.1)看一下添加数据成功没有
        MySQL [test]> select * from user;
     +------+--------+
     | name | passwd |
     +------+--------+
     | "1"  | "pwd1" |
     | "2"  | "pwd2" |
     | "3"  | "pwd3" |
     | "4"  | "pwd4" |
     +------+--------+
     4 rows in set (0.00 sec)
添加成功。
### 从服务器端阅读文件
想要使用LOAD DATA
INFILE，服务器配置必须启用该功能，你可以通过标志位来判断服务器是否启动了该功能(默认是启动的)。你也可以在连接时使用`--enable-local-infile`来开启该功能。
使用wireshark抓包，在发出连接请求时，查看服务器回包中带有的FLAG 信息即可：
    Can Use LOAD DATA LOCAL: Set
为了安全原因,当读取位于服务器上的文本文件时,文件必须处于数据库目录或可被所有人读取。你可以通过执行`show variables like
'%secure%'`来查看：
secure-file-priv参数是用来限制LOAD DATA, SELECT ... OUTFILE, and
LOAD_FILE()传到哪个指定目录的。
  * secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出
  * 当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下，此时如果读写发生在其他文件夹，就会报告如下错误：
        RROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
  * 当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制
另外,为了读取服务器上文件，在服务器主机上你必须有file的权限。否则报错：
    ERROR 1045 (28000): Access denied for user
如果上述限制都满足的话，我们可以尝试通过LOAD DATA来读取一些更有用的文件，变成任意文件读取漏洞！
尝试读取MySQL的配置文件my.ini
成功读取，我们从一个没什么用的数据库读到了更好更有用的信息！
#### 分析
让我们来深入的了解一下LOAD DATA INFILE 的工作原理。使用wireshark抓包：
  1. 客户端(即攻击者)连接mysql服务器3306端口
  2. 服务器发送问候包，包括协议线程ID，版本，mysql认证类型等。
  3. 客户端的下一个数据包是带有用户名，密码，数据库的认证包，以及LOAD DATA LOCAL选项的标志位
  4. 之后有一些包含客户端指定查询的数据包，如：“'show databases”'，“'select @@ version_comment limit 1”'等
  5. 然后是我们的查询语句`load data local infile '/etc/passwd' into table test.test fields terminated by '\n';`以及回包
​ 这个数据包对连接的客户端说：“嘿！请阅读/etc/passwd 文件并发给我”
上述过程就是LOAD DATA INFILE 的整个过程。如果能执行LOAD DATA INFILE
导入服务器上的文件自然是最好的，但是有时候我们并不能执行LOAD DATA INFILE，我们只能执行LOAD DATA LOCAL
INFILE，即导入我们本机上的文件，这是因为我们当前账户没有读取服务器本地文件的权限。所以我们转换思路，互换一下服务器和客户端的位置，让被攻击者作为客户端来连接我们的服务器，并使客户端执行LOAD
DATA LOCAL INFILE语句，下面的利用方式就是如此
### 从客户端读取文件
关于LOAD DATA INFILE 来读取文件的技术并不新鲜，以前就有了相关的帖子、工具和文章：
  * [Database Honeypot by design](https://www.slideshare.net/qqlan/database-honeypot-by-design-25195927) \- Yuri Goltsev的演示文档 (August 2013)
  * [Rogue-MySql-Server Tool](https://github.com/allyshka/Rogue-MySql-Server) \- 用于读取连接客户端文件的MySQL虚假服务器（September 2013）
  * [MySQL connect file read](http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/) \- 来自俄罗斯的安全帖子(April 2016)
所以介绍一下从客户端读取文件的攻击流程：
攻击流程大致如上图：
  1. 攻击者向受害者提供MySQL服务器地址、账户、密码