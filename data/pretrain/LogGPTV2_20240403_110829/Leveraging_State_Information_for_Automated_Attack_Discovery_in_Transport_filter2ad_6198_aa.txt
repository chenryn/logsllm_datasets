title:Leveraging State Information for Automated Attack Discovery in Transport
Protocol Implementations
author:Samuel Jero and
Hyojeong Lee and
Cristina Nita-Rotaru
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Leveraging State Information for Automated Attack
Discovery in Transport Protocol Implementations
Samuel Jero
Purdue University
PI:EMAIL
Hyojeong Lee
Purdue University
PI:EMAIL
Cristina Nita-Rotaru
Purdue University
PI:EMAIL
Abstract—We present a new method for ﬁnding attacks in
unmodiﬁed transport protocol implementations using the speciﬁ-
cation of the protocol state machine to reduce the search space of
possible attacks. Such reduction is obtained by appling malicious
actions to all packets of the same type observed in the same
state instead of applying them to individual packets. Our method
requires knowledge of the packet formats and protocol state
machine. We demonstrate our approach by developing SNAKE,
a tool that automatically ﬁnds performance and resource exhaus-
tion attacks on unmodiﬁed transport protocol implementations.
SNAKE utilizes virtualization to run unmodiﬁed implementations
in their intended environments and network emulation to create
the network topology. SNAKE was able to ﬁnd 9 attacks on 2
transport protocols, 5 of which we believe to be unknown in the
literature.
I.
INTRODUCTION
Transport protocols provide end-to-end communication in a
layered network architecture by implementing guarantees such
as reliability, in-order delivery, and congestion control. They
are used not only directly by applications, but also by Internet
services such as BGP and secure protocols such as SSL. The
most well known transport protocol is TCP, which underlies
the majority of Internet communication today and provides
connections, reliability, in-order delivery, ﬂow control, and
congestion control to applications that use it.
The design and implementation of transport protocols is
complex, with many components, special cases, error condi-
tions, and interacting features. Further, many implementations
are written in low level languages like C for improved per-
formance and make use of error-prone, but highly efﬁcient,
constructs like pointer manipulation and type casting. These
low level constructs are difﬁcult to address by model checking
systems, making such systems of limited use beyond checking
the protocol design. Unfortunately, transport protocol imple-
mentations often sacriﬁce simplicity and ease of understanding
for improved performance, resulting in a high probability of
bugs introduced during implementation.
Although there are few transport protocols in common use,
because of their ubiquitous role in network communication,
there are many different
implementations and variants of
these transport protocols. For example, the nmap security
scanner is able to detect 3,079 distinct TCP/IP network stack
conﬁgurations in its most recent version [1]. This includes
printers, VoIP phones, routers, and embedded systems, along
Hyojeong Lee is now with Google, Inc. This work was done while at Purdue
University.
with general purpose operating systems. While many of these
may be different conﬁgurations of a few common networking
stacks, these variations represent different handling of partic-
ular network conditions, which often implies the exercise of
different code paths.
Despite the importance of these protocols and the com-
plexity and number of their implementations, the testing of
transport protocol implementations has been mainly a manual
and ad-hoc process [2], [3], [4]. This lack of systematic testing
for transport protocols and their implementations has resulted
in a stream of new bugs and attacks [5], [2], [6], [3]. Consider
TCP, one of the most well studied and well tested network
protocols; the list of discovered attacks extends from the mid-
1980’s to the present day [7], [8], [9], [10], [11], [12], [13].
Many of these attacks have been discovered repeatedly or
rediscovered again in slightly different contexts.
Prior work in testing network protocol implementations has
focused on easing the development of manual tests [2], [14]
and on enabling deeper testing for crashes by using stateful
fuzzing techniques [15], [16], [17]. Other work has focused
on systematic testing by leveraging techniques like symbolic
execution [18], [5] and dynamic interface reduction [19] in
combination with concrete attack execution. Many of these
techniques require access to the source code and require heuris-
tics to efﬁciently handle low level constructs like type casting,
pointer casting, and function pointers, which are heavily used
in network protocol implementations. The major challenge
faced by all of these approaches is search space explosion.
In this paper we focus on automated attack ﬁnding for
transport protocol implementations. Speciﬁcally, we leverage
information about the packet formats and protocol state ma-
chine to automatically create attack scenarios consisting of
malicious actions performed on protocol packets in targeted
protocol states. Knowledge of the packet formats enables the
generation of malicious packets based on packet type while
information about the state machine allows the tracking of
the current state of the protocol at runtime. State tracking
is achieved without code instrumentation by monitoring the
packets while malicious packet manipulation is achieved using
a network proxy. By inferring the current state of the protocol
state machine, our method can perform malicious actions on
all packets of a particular type in a particular protocol state
instead of on individual packets, signiﬁcantly reducing the
search space. The protocol state machine also allows us to
identify key points for attack injection in the transport protocol,
ensuring wide coverage. Note that the state machine and packet
formats are an important part of any protocol speciﬁcation.
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.22
DOI 10.1109/DSN.2015.22
1
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:11:45 UTC from IEEE Xplore.  Restrictions apply. 
As such, they are often readily available in the speciﬁcation
documents themselves. For proprietary protocols where the
speciﬁcation of the state machine may not be available, recent
work in state machine inference may be leveraged [20].
Our approach works with unmodiﬁed implementations ir-
respective of their operating system, programming language,
or required libraries. It does not require access to the source
code, enabling the testing of a wide range of transport protocol
implementations, including proprietary, closed-source systems.
The contributions of this paper are:
• We present a new approach to search space reduction
without instrumenting the code. This approach lever-
ages the description of the protocol state machine to
identify critical points in the search space for attack
injection and to explore the implementation more
thoroughly. We use knowledge of the packet formats
to perform a variety of malicious actions, including
packet ﬁeld manipulation, and apply these malicious
actions to packet type, protocol state pairs instead
of individual packets, enabling signiﬁcant state space
reduction. We also use the protocol state machine to
ensure that we test all protocol states, providing wide
coverage.
• We demonstrate our approach with SNAKE, our new
tool for ﬁnding attacks on unmodiﬁed transport layer
protocol implementations running in arbitrary operat-
ing systems and in realistic networks. SNAKE (State-
based Network AttacK Explorer) uses virtualization
to run unmodiﬁed transport layer implementations in
their intended environments and a network emulator
to tie these virtual machines together into a realistic,
emulated network. The network emulator intercepts
and modiﬁes packets, tracks the current protocol state
during execution, and uses this information to create
packet-based attacks at speciﬁc points in the state ma-
chine execution. SNAKE is general for use on many
transport protocols, requiring only the description of
the packet header formats and the transport protocol
state machine as input.
• We use SNAKE to examine a total of 5 implementa-
tions, 2 transport protocols—TCP and DCCP—, and 4
operating systems. We ﬁnd 9 attacks, 5 of which are, to
the best of our knowledge, unknown in the literature.
We also compare our state-based attack search with
two baseline approaches and show its effectiveness in
search space reduction.
The rest of this paper is organized as follows. Section II
reviews related work. Section III discusses the system and at-
tack models we consider. Sections IV and V present the design
and the implementation of our system, respectively. Section VI
shows our results, including the attacks we discovered, while
Section VII concludes our work.
II. RELATED WORK
A variety of other works have looked at automatically ﬁnd-
ing vulnerabilities in network protocols or distributed systems.
One common method for doing this is to combine model
checking techniques with actual execution. DeMeter [19] is
one such tool that uses a technique called dynamic interface
reduction to reduce the search space. The key insight of
this technique is to hide local non-determinism by splitting
a distributed system into components that communicate via
message passing.
Several other systems [18], [5] leverage a technique called
symbolic execution. Symbolic execution simulates code exe-
cution using symbolic variables and updates these variables
with constraints as the code runs [21]. MACE [18] combines
symbolic execution with concrete execution and protocol state
machine inference. The inferred protocol state machine is used
as a search space map to allow deep exploration and enable
parallelism. From each state, a combination symbolic/concrete
execution system is started. The symbolic execution identiﬁes
new code paths to explore with further concrete execution.
MAX [5] utilizes symbolic execution to ﬁnd manipulation
attacks against network protocols. MAX takes some metric
of performance and possible vulnerable lines of code and
uses symbolic execution and concrete testing with a malicious
proxy to attempt to repeatedly force that vulnerable statement
to be executed. In contrast, SNAKE does not rely on model
checking techniques that require access to the protocol source
code or manual marking of vulnerable statements.
Another method for ﬁnding vulnerabilities in network
protocols and their implementations is fuzzing. KiF [15] is
one such fuzzer. It is designed to test SIP implementations for
crashes or fatal errors and makes use of the SIP packet format
as well as the SIP protocol state machine to cover deeper and
more relevant portions of the search space. Interestingly, the
authors infer a protocol state machine for each implementation
they test instead of using the state machine from the protocol
speciﬁcation. SNOOZE [14] and EXT-NSFSM [16] are other
network protocol fuzzers. SNOOZE [14] also targets the SIP
protocol and makes use of the protocol state machine to track
the target implementation. However, SNOOZE requires the
user to provide a fuzzing scenario and so does not need to
deal with state space reduction. EXT-NSFM [16] uses the
state machine of a target protocol to enable deeper fuzzing
of application protocols like FTP. In particular, it tracks the
protocol state machine to determine what part of the protocol
to fuzz without unnecessarily restarting the application. Both
tools search for crashes or other fatal errors.
Packetdrill [2] is a framework for creating tests for network
protocol stacks. It
is designed to help reproduce bugs or
ease the writing of regression tests. The rich environment
Packetdrill provides allows sending and receiving packets
using a tcpdump-like syntax as well as the performance of
system calls and the running of arbitrary shell commands or
python scripts. SNAKE is orthogonal to Packetdrill. They have
different goals and can compliment each other: our approach
offers great breadth for test coverage while Packetdrill provides
depth for speciﬁc test cases.
Turret [6] is a platform for ﬁnding performance attacks
against intrusion tolerant distributed systems. Turret inserts
a malicious proxy in front of an unmodiﬁed implementation
to simulate a malicious attacker and uses a greedy search
strategy to look for the malicious actions that cause the largest
impact in system performance. SNAKE uses a different set of
malicious actions that are tailored for transport-layer, two-party
protocols instead of multi-party application protocols. Further,
22
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:11:45 UTC from IEEE Xplore.  Restrictions apply. 
since intrusion tolerant distributed systems are designed to be
attack resistant, Turret is able to use a greedy search strategy
that looks for actions that cause performance impacts and then
combines them. By contrast, SNAKE uses a search strategy
based on the network protocol state machine.
III. SYSTEM AND ATTACK MODEL
In this section we provide an overview of transport proto-
cols and describe the attacks that we consider in this paper. As
usually such protocols are deployed in a client-server setting,
we will refer to the two parties as client and server.
A. Transport Protocols
Transport layer protocols provide end-to-end communica-
tion between two applications running on two different hosts.
They use the concept of a port to allow multiple applications
to use the same host simultaneously and provide a checksum
to protect data from accidental corruption as it travels from
one host to the other. With the exception of UDP [22], which
provides only unreliable data delivery, most transport protocols
provide additional services such as: (1) reliability, (2) ordered
delivery, (3) ﬂow control, and (4) congestion control. Many
transport protocols are connection-oriented, as both parties
need to maintain state. Connection-oriented protocols consist
of three phases: connection establishment, data transfer and
connection tear-down.
Connection establishment. Connection establishment,
typically in the form of a handshake, takes place before any
data can be exchanged between the client and the server.
During connection establishment the client and server ex-
change sequence numbers, set sequence windows, and allocate
necessary buffers. Errors or delays in this phase may lead to
connection termination without any data transfer.
Data transfer. Once a connection is established, data
ﬂows between the two parties. During this phase, packets
may be buffered by the sender, to guarantee reliability, and
by the receiver, to enforce ordered delivery to the application.
Additionally, system parameters such as congestion window
size and timeouts are dynamically adjusted to implement ﬂow
control and congestion control.
Reliability. Reliability is usually implemented using ac-
knowledgments and retransmissions. The sender uses a buffer
to store data that has been sent and includes a sequence
number on each packet. Periodically, the receiver sends an
acknowledgment to the sender. When the sender receives
this acknowledgment, it determines what data has been lost
and retransmits this data. Data acknowledged as received
correctly is also removed from the sender’s buffer. Since there
is the possibility of acknowledgments being dropped by the
network, the sender includes a timer to retransmit data if no
acknowledgment of sent data has been received after some
lengthy time interval. Note also that transport protocols are
allowed to declare failure after several retransmissions and
terminate the connection without having delivered the data.
Failure of reliability will result in connection termination or
an improper change in sending rate due to interactions with
congestion control.
order that it was sent. This is related to reliability and the
two are usually implemented together. Implementing ordered
delivery also requires a packet sequence number, allowing the