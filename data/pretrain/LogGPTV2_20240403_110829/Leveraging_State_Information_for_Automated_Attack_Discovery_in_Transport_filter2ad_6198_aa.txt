**Title: Leveraging State Information for Automated Attack Discovery in Transport Protocol Implementations**

**Authors:**
- Samuel Jero, Purdue University
- Hyojeong Lee, Google, Inc. (formerly at Purdue University)
- Cristina Nita-Rotaru, Purdue University

**Conference:**
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

**Abstract:**
We introduce a novel method for identifying attacks in unmodified transport protocol implementations by utilizing the protocol state machine to reduce the search space of potential attacks. This reduction is achieved by applying malicious actions to all packets of the same type observed in the same state, rather than to individual packets. Our method requires knowledge of packet formats and the protocol state machine. We demonstrate our approach with SNAKE, a tool that automatically discovers performance and resource exhaustion attacks on unmodified transport protocol implementations. SNAKE employs virtualization to run unmodified implementations in their intended environments and network emulation to create the network topology. SNAKE successfully identified 9 attacks on 2 transport protocols, 5 of which, to the best of our knowledge, are previously undocumented.

**I. Introduction**
Transport protocols ensure end-to-end communication in layered network architectures by providing guarantees such as reliability, in-order delivery, and congestion control. They are fundamental to both applications and Internet services like BGP and SSL. TCP, the most well-known transport protocol, underpins much of today's Internet communication, offering connections, reliability, in-order delivery, flow control, and congestion control.

The design and implementation of transport protocols are complex, involving many components, special cases, error conditions, and interacting features. Many implementations are written in low-level languages like C for performance, using constructs like pointer manipulation and type casting, which are error-prone but efficient. These low-level constructs are challenging for model checking systems, limiting their effectiveness beyond protocol design verification. Consequently, transport protocol implementations often prioritize performance over simplicity, increasing the likelihood of bugs.

Despite the few commonly used transport protocols, there are numerous implementations and variants. For example, nmap can detect 3,079 distinct TCP/IP network stack configurations [1], including printers, VoIP phones, routers, and embedded systems. These variations represent different handling of network conditions, implying the exercise of different code paths.

Testing transport protocol implementations has been largely manual and ad-hoc [2], [3], [4]. This lack of systematic testing has led to a continuous stream of new bugs and attacks [5], [2], [6], [3]. Even TCP, one of the most studied and tested protocols, has had a long history of discovered attacks [7], [8], [9], [10], [11], [12], [13].

Prior work in testing network protocol implementations has focused on easing the development of manual tests [2], [14] and on deeper testing for crashes using stateful fuzzing techniques [15], [16], [17]. Other approaches have used symbolic execution [18], [5] and dynamic interface reduction [19] combined with concrete attack execution. These techniques often require access to source code and heuristics to handle low-level constructs, facing the challenge of search space explosion.

In this paper, we focus on automated attack discovery for transport protocol implementations. We leverage information about packet formats and the protocol state machine to create attack scenarios consisting of malicious actions on protocol packets in targeted states. Knowledge of packet formats enables the generation of malicious packets based on packet type, while state machine information allows tracking the current protocol state at runtime. By inferring the current state, our method can apply malicious actions to all packets of a particular type in a specific state, significantly reducing the search space. The state machine also helps identify key points for attack injection, ensuring wide coverage.

Our approach works with unmodified implementations, regardless of operating system, programming language, or required libraries, and does not require source code access. The contributions of this paper are:

- A new approach to search space reduction without code instrumentation, leveraging the protocol state machine to identify critical points for attack injection and explore the implementation thoroughly.
- Demonstration of our approach with SNAKE, a tool for finding attacks on unmodified transport layer protocol implementations running in arbitrary operating systems and realistic networks.
- Use of SNAKE to examine 5 implementations, 2 transport protocols (TCP and DCCP), and 4 operating systems, discovering 9 attacks, 5 of which are, to the best of our knowledge, unknown in the literature. We also compare our state-based attack search with two baseline approaches, showing its effectiveness in search space reduction.

**II. Related Work**
Several works have explored automatic vulnerability discovery in network protocols and distributed systems. One common method combines model checking with actual execution. DeMeter [19] uses dynamic interface reduction to reduce the search space by hiding local non-determinism.

Other systems [18], [5] use symbolic execution, simulating code execution with symbolic variables and updating them with constraints. MACE [18] combines symbolic and concrete execution, using an inferred protocol state machine for deep exploration and parallelism. MAX [5] uses symbolic execution to find manipulation attacks against network protocols, focusing on performance metrics and vulnerable code lines.

Fuzzing is another method for finding vulnerabilities. KiF [15] targets SIP implementations, using the SIP packet format and state machine for deeper coverage. SNOOZE [14] and EXT-NSFSM [16] are other network protocol fuzzers, using state machines to track target implementations and enable deeper fuzzing without unnecessary restarts.

Packetdrill [2] is a framework for creating network protocol tests, designed to reproduce bugs and ease regression testing. SNAKE complements Packetdrill, offering broad test coverage while Packetdrill provides depth for specific test cases.

Turret [6] finds performance attacks against intrusion-tolerant distributed systems, using a greedy search strategy. SNAKE, in contrast, uses a search strategy based on the network protocol state machine, tailored for transport-layer, two-party protocols.

**III. System and Attack Model**
This section provides an overview of transport protocols and the attacks considered in this paper. Transport protocols facilitate end-to-end communication between applications on different hosts, using ports to allow multiple applications to share the same host. Most transport protocols provide reliability, ordered delivery, flow control, and congestion control. Connection-oriented protocols involve three phases: connection establishment, data transfer, and connection tear-down.

**A. Transport Protocols**
- **Connection Establishment:** A handshake occurs before data exchange, where sequence numbers and buffers are set. Errors or delays may lead to connection termination.
- **Data Transfer:** Data flows between the client and server, with packets buffered for reliability and ordered delivery. System parameters are dynamically adjusted for flow and congestion control.
- **Reliability:** Implemented using acknowledgments and retransmissions. The sender stores sent data and includes sequence numbers. The receiver sends acknowledgments, and the sender retransmits lost data if no acknowledgment is received within a timeout period.
- **Ordered Delivery:** Ensures data is delivered in the order it was sent, using sequence numbers and buffers.

By understanding these phases and mechanisms, we can better identify and exploit vulnerabilities in transport protocol implementations.