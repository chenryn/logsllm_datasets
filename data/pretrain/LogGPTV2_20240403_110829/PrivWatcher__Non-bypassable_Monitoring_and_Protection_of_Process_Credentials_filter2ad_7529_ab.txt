code reuse attacks but can be subverted by simpler forms of
code reuse (e.g., forming malicious arguments and jumping
to a kernel function entry point).
3. SYSTEM DESIGN
PrivWatcher prevents privilege escalation attacks that ma-
nipulate process credentials via kernel memory corruption.
Figure 2 shows the architectural design of PrivWatcher. At
a high level, PrivWatcher isolates process credentials into a
safe region. By leveraging control over the kernel’s MMU
operations, the safe region is non-writable to the kernel.
PrivWatcher then interposes checks whenever the privilege
of a process changes and its credentials need to be updated.
These checks verify that the new process privilege does not
violate the kernel’s access control policies. For example, un-
der POSIX-style Discretionary Access Control (DAC) pol-
icy [34] implemented on most Unix/Linux systems, a non-
root process is never allowed to become root unless it is
executing a root-setuid binary [24].
To eﬀectively harden OS kernels and provide new opportu-
nities for intrusion detection, PrivWatcher needs to achieve
169the following objectives in order to address the challenges
of protecting process credentials: 1) secure allocation that
isolates protected data ﬁelds (i.e., process credentials), 2)
non-bypassable protection that guarantees the TOCTTOU
consistency of process credentials, and 3) eﬀective integrity
veriﬁcation that enforces the original semantics of the ker-
nel’s access control policy.
In the rest of this section, we
describe in detail how PrivWatcher achieves all these objec-
tives. Afterwards, we present an in-depth security analysis
of the introduced techniques.
3.1 Isolating Process Credentials
To address the ﬁrst challenge, PrivWatcher 1) identiﬁes
critical non-control data ﬁelds relevant to process creden-
tials, and 2) reorganizes the kernel’s memory layout so that
these ﬁelds are aggregated in a well-deﬁned memory region.
3.1.1 Process Credentials in Linux
The Linux kernel maintains its Process Control Blocks
(PCB) as the task_struct structure. The kernel allocates
a separate instance of this structure for each process that
it creates. The structure encodes information necessary for
process management, such as process identiﬁcation, process
state and memory map. Data ﬁelds relevant to process cre-
dentials are grouped in another data structure called the
credentials structure (cred). The privileges of a process are
described by an instance of the cred structure, which is re-
ferred to by a pointer ﬁeld in task_struct.
/* number of p r o c e s s e s s u b s c r i b e d */
/* real UID of the task */
/* real GID of the task */
/* saved UID of the task */
/* saved GID of the task */
/* e f f e c t i v e UID of the task */
/* e f f e c t i v e GID of the task */
/* UID for VFS ops */
/* GID for VFS ops */
/* SUID - less s e c u r i t y m a n a g e m e n t */
/* caps our c h i l d r e n can inherit */
/* caps we ’ re p e r m i t t e d */
/* caps we can a c t u a l l y use */
/* c a p a b i l i t y b o u n d i n g set */
/* Ambient c a p a b i l i t y set */
/* default keyring to attach
* r e q u e s t e d keys to */
usage ;
a t o m i c _ t
1 struct cred {
2
3 # ifdef C O N F I G _ D E B U G _ C R E D E N T I A L S
4
5
6
magic ;
7 # define C R E D _ M A G I C
8 # define C R E D _ M A G I C _ D E A D
9 # endif
a t o m i c _ t
void
u n s i g n e d
s u b s c r i b e r s ;
* p u t _ a d d r ;
0 x 4 3 7 3 6 5 6 4
0 x 4 4 6 5 6 1 4 4
c a p _ i n h e r i t a b l e ;
c a p _ p e r m i t t e d ;
c a p _ e f f e c t i v e ;
c a p _ b s e t ;
c a p _ a m b i e n t ;
j i t _ k e y r i n g ;
uid ;
gid ;
suid ;
sgid ;
euid ;
egid ;
fsuid ;
fsgid ;
s e c u r e b i t s ;
kuid_t
kgid_t
kuid_t
kgid_t
kuid_t
kgid_t
kuid_t
kgid_t
u n s i g n e d
k e r n e l _ c a p _ t
k e r n e l _ c a p _ t
k e r n e l _ c a p _ t
k e r n e l _ c a p _ t
k e r n e l _ c a p _ t
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24 # ifdef C O N F I G _ K E Y S
25
26
27
28
29
30
31 # endif
32 # ifdef C O N F I G _ S E C U R I T Y
33
void
34 # endif
35
36
37
38
39
40
41 };
struct r c u _ h e a d
u n s i g n e d char
* s e c u r i t y ;
rcu ;
struct key __rcu * s e s s i o n _ k e y r i n g ; /* keyring i n h e r i t e d over fork */
struct key
struct key
struct key
/* keyring private to this process */
/* keyring private to this thread */
/* assumed r e q u e s t _ k e y a u t h o r i t y */
* p r o c e s s _ k e y r i n g ;
* t h r e a d _ k e y r i n g ;
* r e q u e s t _ k e y _ a u t h ;
struct u s e r _ s t r u c t * user ;
struct u s e r _ n a m e s p a c e * user_ns ;
struct g r o u p _ i n f o * g r o u p _ i n f o ;
/* s u b j e c t i v e LSM s e c u r i t y */
/* real user ID s u b s c r i p t i o n */
/* user_ns the caps and k e y r i n g s are
* r e l a t i v e to . */
/* s u p p l e m e n t a r y groups for
* euid / fsgid */
/* RCU d e l e t i o n hook */
Listing 1: Credentials structure in the Linux kernel
As shown in Listing 1, the cred structure contains various
user ID (uid) and group ID (gid) ﬁelds. In Linux, a uid/gid
value of 0 (zero) means that the process has root (superuser)
privileges and can access all system resources. Furthermore,
Android, which is based on Linux, typically reserves uid/gid
in the range of 1 to 10,000 for system privileged daemons,
which are granted more privileges than normal applications.
PrivWatcher protects all instances of the cred structure
that are referred to by at least one task_struct. This in-
cludes all cred instances that are used by the kernel to rep-
resent process privileges. PrivWatcher particularly focuses
on protecting the various uid/gid ﬁelds of each of these in-
stances. This prevents attackers from escalating privileges
by inﬂuencing any of the monitored ﬁelds to take values
that are reserved for privileged processes. The same tech-
nique can be extended to protect other ﬁelds, such as the
security pointer which deﬁnes the contexts of custom se-
curity modules (e.g., SELinux [51]). In addition, the cred
structure contains various types of capability ﬁelds that de-
termine if the process is permitted to do certain actions. For
instance, the kernel allows processes that have the setuid
capability more freedom to change their (uid) and escalate
their privilege.
PrivWatcher requires the kernel to organize its PCB in a
canonical layout where data ﬁelds relevant to process cre-
dentials are separated into a standalone structure, as is the
case with Linux (i.e., the cred structure). This is because
structures occupy contiguous memory addresses at runtime,
and thus a standalone credentials structure allows dedicated
use of the safe region. Otherwise the entire PCB would need
to be protected, which is infeasible because it is updated fre-
quently by multiple subsystems of the kernel.
It is worth noting that on earlier versions of the Linux ker-
nel, data ﬁelds related to process credentials (e.g., uid/gid)
are lumped directly into task_struct and therefore does
not meet PrivWatcher’s requirement of canonical PCB lay-
out. However, by using static code analysis techniques, such
as [39, 43], we can easily rearrange the PCB and automate
refactoring of the source code.
3.1.2 Moving Process Credentials to the Safe Region
The kernel stores runtime instances of the cred structure
in dynamically allocated heap memory. The memory allo-
cator for small kernel objects such as cred typically acts as
a cache on top of the kernel’s page-level allocator. Thus,
in order to aggregate and protect all instances of the cred
structure, the kernel should be modiﬁed to allocate them in
memory pages belonging to the safe region. As mentioned,
PrivWatcher guarantees that the safe region is never mapped
writable to the kernel.
However, one subtlety arises if we choose to rely on the
kernel’s allocator. This is because some allocators keep in-
ternal states in the same memory pages where objects are
allocated from. In such cases, the allocator itself needs write
access to the safe region. For example, the Linux kernel’s
default allocator Slub [13] organizes free objects into a linked
list. Whenever objects are deallocated, this free list needs to
be updated. Therefore, PrivWatcher would then be forced
to mediate the allocator’s list maintenance operations.
To avoid this extra complexity in mediating kernel allo-
cator’s maintenance operations, as an alternative, allocation
from the safe region can also be carried out by PrivWatcher.
In order to minimize changes to the kernel, we adopt the
following strategy: The kernel continues to use its original
allocator for the cred structure, but whenever an instance of
the cred structure is about to be assigned to a task_struct,
it requests PrivWatcher to make a duplicate from the safe
region. We modify the kernel so that it uses the duplicate
returned by PrivWatcher, and frees the original unprotected
one as appropriate. This approach also has the nice prop-
erty of allowing us to focus on exactly those cred instances
that describe process privileges.
170Figure 3: A three-way interconnection that binds
together the credentials structure, the PCB and the
process address space.
3.2 Ensuring TOCTTOU Consistency
The previous setup prevents direct overwrites to data ﬁelds
of existing veriﬁed credentials (i.e., overwrite attacks in our
threat model). However, to fully address the challenge of
ensuring TOCTTOU consistency, we still need to guarantee
that the context of use is the same as the context of veri-
ﬁcation. A lack of this property leads to potential forging
attacks, reuse attacks, or address space injection attacks, as
mentioned in Section 2.
To address this challenge, PrivWatcher ﬁrst creates a se-
cure, unforgeable path that links together process creden-
tials and their presumed context of use (i.e., the process
that they are supposed to describe). Then, by adopting a
dual reference monitor, PrivWatcher actively veriﬁes the va-
lidity of this link to ensure that TOCTTOU consistency for
process credentials is preserved. In the following, we present
the details of our approach.
3.2.1 Creating a Secure Veriﬁcation Path
Non-control data ﬁelds typically describe entities. These
entities in turn determine the context of use.
In the case
of process credentials, they describe the privileges of a pro-
cess. There are two contexts, rooted in the current hardware
states that represent the currently executing process:
• The kernel representation: The kernel represents pro-
cesses as instances of the task_struct structure. In
the Linux kernel, the task_struct of the currently ex-
ecuting process is obtained by ﬁrst reading the stack
register and locating the top of the current kernel-
mode stack, where a pointer gives the address of the
current task_struct.
• The hardware representation: The hardware views pro-
cesses as individual address spaces, which is deﬁned by
a set of address translation page tables (PGT). The
base address of the current ﬁrst level PGT (known in
Linux as Page Global Directory, or pgd) is loaded into
a hardware register (e.g., cr3 in Intel x86 and ttbr0 in
ARM). To facilitate process switch, the pgd of a pro-
cess is linked to task_struct, as shown in Figure 1.
Figure 4: PrivWatcher’s dual reference monitor.
The kernel-side reference monitor ensures TOCT-
TOU consistency of process credentials; the isolated
environment reference monitor veriﬁes changes to
process privileges.
PrivWatcher enforces a strict one-to-one relationship be-
tween a process and its credentials. As shown in Figure 3,
this is achieved by using a three-way interconnection that
links each instance of the cred structure to the task_struct
and address space contexts of the process that it describes.
For convenience, we refer to these links as the “back refer-
ences”. Note that the (forward) reference from pgd to cred
is implicit, and that the current hardware pgd (e.g., cr3)
should always agree with the one back referenced by the
cred of the current process.
Looking further into the implementation of these tech-
niques, PrivWatcher introduces two new ﬁelds into the cred
structure to record back references. This is shown in Fig-
ure 3 as bp_cred and process_pgd. Also, when PrivWatcher
decides that a set of process credentials violates the kernel’s