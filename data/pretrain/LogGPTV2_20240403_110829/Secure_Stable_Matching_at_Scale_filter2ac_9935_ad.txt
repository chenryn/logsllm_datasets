have been made without a reviewer split.
As we assume an honest-but-curious model, we can trust that the
split will be performed correctly. For any implementation where
XOR-sharing is used to hide the preferences from the computation
parties, reviewer splitting must be performed by the members of
the matching sets before they submit their preferences. In cases
where the data is partitioned among the computation parties rather
than being XOR-shared, we suggest that the computation parties be
responsible for performing the split.
5. RESULTS
We implemented and benchmarked our secure stable matching
protocols using the Obliv-C [61] multi-party computation frame-
work, which executes Yao’s Garbled Circuits protocol [59] with
various optimizations [5, 25, 62]. Our code was compiled using
gcc version 4.8.4 under Amazon’s distribution of Ubuntu 14.04
(64 bit), with the -O3 ﬂag enabled.
We ran each benchmark on a pair of Amazon EC2 C4.2xlarge
nodes, located within the same datacenter. These nodes are provi-
sioned with 15GiB of DDR4 memory and four physical cores par-
titioned from an Intel Xeon E5-2666 v3 running at 2.9GHz, each
core being capable of executing two simultaneous threads. The
inter-node bandwidth was measured to be 2.58 Gbps, and inter-
node network latency to be roughly 150 µs.
5.1 Gale-Shapley
In addition to our oblivious linked multi-list, we used other spe-
cialized oblivious data structures in our secure Gale-Shapley imple-
mentation where doing so provides us with the best performance.
We used the fastest available implementations of Square-Root and
Circuit ORAM, from Zahur et al.. We also used Zahur et al.’s obliv-
ious queue construction [60], modiﬁed to avoid dynamic allocation
of new layers by including a constant, public size bound.
As a point of comparison, we implemented and benchmarked
a “textbook” version of Secure Gale Shapley, which omitted our
oblivious linked multi-list construction in favor of storing the pref-
erences array in a single ORAM of size Θ(n2). The textbook ver-
sion still uses the other oblivious data structures including the obliv-
ious queue. It is equivalent to the version of Secure Gale-Shapley
described by Zahur et al. [63], which is the best previously-published
secure stable matching result. For both the textbook and improved
versions of Secure Gale-Shapley, we benchmarked variants using
Square-Root ORAM, Circuit ORAM, and Linear Scan.
Figure 8 and Table 1 present our ﬁndings, which are consistent
with our analytical results and conﬁrm that Square-Root ORAM
outperforms both Circuit ORAM and Linear Scan for all tested pa-
rameters. At 512× 512 members, we achieve more than 40× im-
provement relative to the previous best technique, completing the
benchmark in under 48 minutes, compared to over 33 hours. In ad-
dition to the results presented in our ﬁgures, we tested our improved
algorithm with Square-Root ORAM at 1024× 1024 members, and
found that it required 228 minutes to complete.
5.2 Roth-Peranson
We implemented Secure Roth-Peranson using the constructions
described in Sections 3.1 and 4.2, and tested it on synthesized data
across a range of parameters, as well as data chosen to simulate the
full national medical residency match.
(a) Proposer Count. For this benchmark we
varied n between 29 and 213, and set m = 64,
q = 4, r = 64, s = 16
Figure 8: Secure Gale-Shapley Execution Time vs Pair Count.
Values are mean wall-clock times in seconds for full protocol exe-
cution including initialization. For benchmarks of 4–64 pairs, we
collected 30 samples; for 128–256 pairs we collected three sam-
ples; and for 512 pairs we collected one sample.
Pairs
64
128
256
512
1024
Linear Scan
Circuit ORAM
Square-Root
Textbook
3.05
48.21
771.69
–
–
Improved
0.12
0.80
5.62
41.23
207.65
Textbook
5.97
27.82
157.49
858.36
–
Improved
0.39
1.72
8.43
55.65
240.54
Textbook
0.49
5.00
44.84
440.31
–
Improved
0.06
0.33
1.73
9.41
42.33
Table 1: Secure Gale-Shapley Gate Count vs Pair Count. Val-
ues represent billions of non-free gates required for full protocol
execution including initialization.
5.2.1 Parametric benchmarks
We benchmarked our implementation using synthetic data and
varying each of the bounds (n,m,q,r,s) independently in order to
demonstrate their effect on the execution time. We recorded statis-
tics individually for each of the phases described in Section 4.4.
The results of this experiment are summarized in Figure 9. Exe-
cution cost increases linearly with all ﬁve parameters, consistent
with our analytical results. We also collected the total number of
non-free gates executed for each sample, observing a consistent ex-
ecution speed of around 3.7M gates/second across the experiments.
5.2.2 National Medical Residency Match
To assess the performance of our Secure Roth-Peranson algo-
rithm in a realistic context, we used it to compute matches for
a dataset designed to model the 2016 national medical residency
match. The NRMP does not release raw preference data, even in
de-identiﬁed form [31]. They do, however, release comprehensive
statistical information about each year’s match [41]. We used this
to construct a synthetic dataset with similar properties.
The primary NRMP match for 2016 involved 4,836 residency
programs having a total of 30,750 available positions, and 35,476
aspiring residents who collectively submitted 406,173 rankings. A
subset of the participants were subject to the match variations de-
scribed at the end of this section; however, as our algorithm does
(b) Reviewer Count.
For this
benchmark we varied m between
26 and 210, and set n = 29, q = 4,
r = 64, and s = 16
(d) Reviewer Preference Bound.
For this benchmark we varied r be-
tween 24 and 28, and set n = 29,
m = 64, q = 4, and s = 16
(c) Proposer Preference Bound.
For this benchmark we varied q be-
tween 4 and 64, and set n = 29,m =
64,r = 64,s = 16
(e) Reviewer Positions Bound.
For this benchmark we varied s be-
tween 4 and 64, and set n = 29,
m = 64, q = 4, and r = 64
Figure 9: Secure Roth-Peranson Parametric Benchmark Re-
sults. We show the impact of the ﬁve major parameters (n, m, q,
r, s). Times spent during the sharing ,
setup , permutation ,
and proposal/rejection phases are recorded individually. Y-axis
values represent average wall-clock times from 30 samples.
not handle variations, we consider all of them to be unique indi-
viduals participating in accordance with the basic scheme. Thus,
for our benchmark, n = 35476 and m = 4836. The average number
of positions per program was 6.35; we chose s = 12. The average
number of ranked applicants per position varied according to pro-
gram category. We chose to limit programs to 10 ranked candidates
Linear ScanCircuit ORAMSquare-Root ORAMTextbook AlgorithmImproved Algorithm2223242526272829Number of Pairs10-210-1100101102103104105106Execution Time (seconds)29210211212213Number of Proposers0100200300400500600700Execution Time (seconds)26272829210Number of Reviewers0100200300400500600700Execution Time (seconds)2223242526Proposer Preference Bound0100200300400500600700800Execution Time (seconds)2425262728Reviewer Preference Bound020406080100120140Execution Time (seconds)2223242526Reviewer Positions Bound020406080100120Execution Time (seconds)Algorithm Phase
Time (hours)
Billions of Non-Free Gates
Sharing
Setup
Permutation
Proposal/Rejection
Total
1.07
1.60
0.56
15.01
18.22
18.14
29.65
6.56
172.52
226.87
Table 2: Secure Roth-Peranson NRMP Benchmark Results. For
this benchmark we set n = 35476, m = 4836, q = 15, r = 120, and
s = 12. These parameters are intended to be representative of the
match performed by the National Residency Matching Program.
per position, giving us r = 120 (programs with fewer than 12 posi-
tions are still permitted to rank up to 120 candidates). It should be
noted that no program category exceeds an average of 8.4 ranked
applicants per position except for anaesthesiology PGY-2, which
is a signiﬁcant outlier with an average of 19.4. However, anaes-
thesiology PGY-2 programs have 6.24 positions each on average,
so an average-sized anaesthesiology PGY-2 program may still rank
19 candidates per position. Finally, the average aspiring resident
ranked 11.45 programs. We chose q = 15.
We believe these parameters to be accommodating to the vast
majority of participants in the NRMP match, but recognize that a
few outliers must accept limitations. Programs with an unusually
large number of positions can be accommodated by splitting as de-
scribed in Section 4.4. However, we lack data to determine how
many programs would be required to split; as such we have omit-
ted this step. Therefore, our results should be considered primarily
a demonstration of the feasibility of calculating an NRMP-scale
match securely, rather than a report of the precise cost of doing so.
The preferences of each resident (proposer) are chosen randomly
from the available programs (reviewers), and vice versa. This is
unrealistic, but cannot impact performance results, since our algo-
rithm is data-oblivious by nature.
We collected only three samples for this benchmark due to its
long execution time. Gate count and average execution time are
reported in Table 2. It required just over eighteen hours (or 225 bil-
lion gates) to complete. This seems efﬁcient enough to be of practi-
cal use in cases such as the NRMP, where the computational cost is
insigniﬁcant (less than $16 total at current AWS prices) compared
to the administrative costs already incurred by existing methods.
Complexities of the Actual NRMP Match. Roth and Peranson
designed several extensions to their basic algorithm to accommo-
date properties of the NRMP match, including couples matching
and contingent programs, which cannot be handled by our version.
Couples matching allows residents with romantic partners to syn-
chronize their rankings such that their proposals are accepted or
rejected together, and breaking a tentative match containing one
member of a couple causes the other member’s tentative match to
break as well. Contingent programs require residents to also match
with prerequisite programs. The process for matching such pro-
grams is effectively identical to couples’ matching, except that one
proposer submits two linked ranking lists and proposes to multiple
reviewers simultaneously. Contingent programs can combine with
couples’ matching to create four-way dependency structures.
Roth and Peranson’s match variation extensions function by al-
lowing those proposers and reviewers who were displaced by cou-
ples or contingent matches which were themselves subsequently
displaced to rewind their preferences and propose again from the
beginning. The instability chaining algorithm is naturally amenable
to this process, and it is performed at the end of each round, be-
fore new proposers are added. Roth and Peranson also specify that
a loop detector is necessary. These match variations remove the
guarantee that a stable matching exists, and they make the problem
of ﬁnding a stable match (if one exists) NP-complete [44].
Unfortunately, our linked multi-list construction is fundamen-
tally incompatible with these extensions, due to the fact that it per-
mits each potential pairing to be accessed only once. Before each
rewinding, it would be necessarily to completely reshufﬂe or regen-
erate the preferences array. Reshufﬂing after each iteration would
add a term of Ω(n3qlognq) to our asymptotic complexity, causing
it to become impractical for large inputs. Moreover, Roth and Per-
anson’s extensions do not guarantee that the algorithm completes
in a ﬁxed number of rounds; thus any straightforward secure im-
plementation would leak the number of rounds required. Although
our method does not support the additional extensions used in the
NMRP match, we note that many other important matchings (such
as public school assignments) do not require these extensions.
6. PRIOR WORK
Gale-Shapley is the ﬁrst problem presented in Kleinberg and Tar-
dos’ introductory algorithms textbook [28], and there is a vast lit-
erature on stable matching. Gusﬁeld and Irving provide a book-
length technical survey [21] and Alvin Roth published a general-
audience book [47]. Here, we focus only on related work on privacy-
preserving stable matching.
Golle [19] developed a privacy-preserving version of the classic
Gale-Shapley algorithm in a setting where the matching protocol
is performed by a group of matching authorities. Privacy and cor-
rectness are guaranteed when a majority of the matching authorities
are honest. Golle argued that generic multi-party computation pro-
tocols were too impractical to implement an algorithm as complex
as Gale-Shapley, and developed a protocol using threshold Pallier
encryption and re-encryption mixnets. Golle’s protocol requires
O(n5) asymmetric cryptographic operations. Although he claimed
it was “practical”, it has never been implemented.