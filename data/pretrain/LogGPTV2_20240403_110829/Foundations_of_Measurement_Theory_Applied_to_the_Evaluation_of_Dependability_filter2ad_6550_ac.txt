### Analysis of Logical Properties and Metrological Considerations

The observations presented in this section are based on an objective analysis of the works considered, without attempting to numerically quantify the measurement properties. Our aim is not to question the results presented in the literature but to highlight that underestimating or neglecting factors such as uncertainty, intrusiveness, resolution, and repeatability can significantly reduce the trust in the achieved measures or in the developed measurement systems.

#### Classification of Works (Table 3)

In the left part of Table 3, the works are classified according to the criteria introduced in Section 3, which relate to the dimensions of the systems. The columns "Tool" and "Experiment" indicate whether the main focus was on the tool or the experiments performed, or both.

The works cover a wide range of situations where dependability measures have been collected. These differences arise from the type of analysis performed or the kind of system under study. We analyze fault-injection tools (e.g., [8], [13]), general prototyping frameworks (e.g., [15]), a new total ordering protocol [24], and a fail-aware system [23]. These experiences encompass eight different system typologies, with some works belonging to more than one category.

#### Metrological Properties (Table 3, Right Part)

In the "Relevant Properties" column, we identify the most important metrological properties that should have been addressed for each paper. The "Awareness" column indicates the measurement properties for which some concern has been shown, often with good observations. Given the diverse, non-uniform, and often partial approaches observed, it was challenging to identify these elements. Therefore, in some cases, the ticks in the table are based on our interpretation and understanding. This does not imply that the authors ignored these properties but rather that they were not given adequate emphasis.

### Uncertainty

Although a full awareness of all measurement properties is not always achieved, some tools perform a detailed analysis of measurement parameters. For example, the software fault injection tool Loki ([13], [14]) uses post-runtime analysis with off-line clock synchronization to place injections on a single global timeline and determine if the intended faults were properly injected. This approach evaluates the uncertainty of the time instant at which faults were injected, even though it is not explicitly referred to as uncertainty. While the approach is informal compared to the Guide to the Expression of Uncertainty in Measurement (GUM) [5], it demonstrates a significant interest in quantitatively evaluating the dispersion of the values attributed to the measurand.

In the experiment related to FORTRESS ([23]), uncertainty issues are addressed when measuring one-way delay. FORTRESS computes an upper bound \( ub(m) \) on the transmission delay \( td(m) \) of each delivered message. Due to the inability to precisely estimate \( td(m) \), the error is estimated as the difference between the computed upper bound and a known lower bound for the message transmission delay \( \delta_{min} \).

For some time measurements, uncertainty may be less relevant, especially when measuring long intervals. Examples include FTAPE [12] and the experiment in [19], where the execution time with/without faults and the restart time of the operating system are measured, respectively. In these cases, the relative uncertainty is very small, justifying the absence of assumptions or concerns about uncertainty.

### Intrusiveness

A significant subset of the surveyed tools demonstrates a strong awareness of the importance of designing non-intrusive measuring instruments. For instance:

- **Loki [13]**: The runtime does not block the system while notifications about the system state are in transit. A post-runtime check corrects possible problems due to non-compatible views of the system state.
- **ORCHESTRA [17]**: Designed to address the intrusiveness of fault injection on distributed real-time systems by exploiting operating system support to assess and compensate for intrusiveness.
- **XCEPTION [7]**: Evaluates tool characteristics using system performance monitoring facilities.
- **MAFALDA [9]**: Chooses fault injection techniques with awareness of the intrusiveness problem.
- **MAFALDA-RT [10]**: Focuses on temporal intrusiveness, identifying the main causes as the time related to fault injection and the observation of system behavior.
- **FTAPE [12]**: Recognizes the intrusiveness of the fault injection and workload monitoring components and estimates the time overhead.
- **GOOFI [8]**: Offers two logging modes to balance between detailed (time-consuming) and normal (less time-consuming) operations.
- **PFI Tool [18]**: Acknowledges the potential intrusiveness of their approach but lacks a detailed metrological characterization.

In the experiments, intrusiveness is considered only in [22], where a dependability benchmark for commercial systems is proposed and studied using TMR-based prototype machines (with the FTAPE tool). The time overhead of the fault injection tool is accounted for, although not as thoroughly as in [12].

### Conclusion

The analysis highlights the importance of considering metrological properties such as uncertainty and intrusiveness in the design and evaluation of dependability measurement systems. While many works show a good understanding of these properties, there is still room for improvement in providing a more formal and consistent approach to their assessment.