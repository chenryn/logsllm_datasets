的任何一本CommonLisp参考书中的DEFINE-COMPILER-MACRO部分。
CL-PPCRE为其接受正则表达式参数的函数定义了编译器宏。这个编译器宏通过在编译期解析正则表达式来优化
殊类型的宏，它提供了优化一个特定的函数调用的机会，方法是将对该函数的调用转化成更高效的代码。
(baz))
(bar)
www.TopSage.com
32.3 让它工作，让它正确，让它更快
407
---
## Page 425
去定义一个类似下面这样的宏：
的格式是与实现相关的。下面是它们在AllegroCommonLisp中的样子：
408
CL-USER>
如果你在foo中将TIME替换成labeled-time，那么将得到下面的输出：
当然，如果输出中带有一个标签的话就更易于阅读了。如果你大量使用这种技术，也许值得
现在你可以调用foo了，而Lisp将会打印出两份报告，一个是bar的，另一个是baz的。具体
如果你想要查看bar和baz究竟哪一个花了更多的时间，那么可以将foo的定义改成下面这样：
当然，如果你想要分析的Lisp形式被重复调用的话，那么来自TIME的输出就显得笨拙了。你
从这些输出中，很明显可以看出foo的大多数时间都花在了baz上。
(BAR)
(defmacro labeled-time（form)
CL-USER>（foo)
(defun foo()
BAZ)
(time(baz)))
270,172 cons cells,1,696 other bytes,0 static bytes
space allocation:
cpu time
cpu time （non-gc) 490 msec user,0msec system
24,172 cons cells,1,696 other bytes,0 staticbytes
real time
cputime（total)
270,172 cons ce11s, 1,696 other bytes,0 static bytes
realtime
cpu time
realtime
cpu time
cpu time
cputime
(time
(progn
（time，form)))
（format *trace-output*“~2&~a",form)
time
第32章结论：下一步是什么
(bar))
（foo)
(gc)
(total)
(gc)
(total)
(gc)
(non-gc)
(gc)
(non-gc) 60 msec user,0 msec system
1,088msec
131msec
105msec
710 msec user, 10 msec system
680
190
60 msec user,0 msec system
60 msec user,0 msec system
170 msec user,
0msec user,0 msec system
1,696 other bytes,0 static bytes
msec user,
msecuser,
www.TopSage.com
10 msec system
0msecsystem
10msec system
c.com
---
## Page 426
了它自己的分析工具，并且由于它们具有对实现内部的访问权限，因此能够得到对用户层代码未
表，显示在带有不同标签的代码段中分别花费的时间，如下所示：
始和结束的时刻都将记录下来并关联到你提供的标签上。函数show-timing-data可以输出一个
一些宏和GET-INTERNAL-RUN-TIME：
而不包括垃圾收集等内部例行公事在内的时间量。下面是一个简单而有用的分析工具，它使用了
RUN-TIME则测量某种具体实现所定义的值，例如Lisp实际执行的时间量，或是Lisp执行用户代码
GET-INTERNAL-REAL-TIME测量的是“挂钟时间”，也就是实际流逝的时间量，而GET-INTERNAL-
具，它们返回一个按照常量INTERNAL-TIME-UNITS-PER-SECOND的值逐秒递增的数值，
你可以明显地从多个角度让这段分析代码变得更专业。此外，你的Lisp实现也很有可能提供
NIL
CL-USER> (show-timing-data)
这个分析器可以让你将with-timing包装在任意Lisp形式之外。每当该形式被执行时，其开
(defun compile-timing-data ()
(defun show-timing-data ()
(defun clear-timing-data ()
(defmacro with-timing (label &body body)
(defparameter *timing-data* ())
84% BAR:
(loop with timing-table 
(with-gensyms (start)
finally
summing time into total
for time 
for
(let
(return
(incf
{incf
(format
#'>:key #'fifth))))
{label start 
((,start (get-internal-run-time)))
(gethash
(gethash label timing-table 0) time)
{let
(- end start)
-of-total label time count time-per)))
(list label time count
label
(count (gethash label count-table)))
end)
（）））
(progn
round (/ time count)) (round (* 100 (/ time total))))))
 count-table 0))
(make-hash-table)
,start (get-internal-run-time)) *timing-data*)))))
www.TopSage.com
@body)
32.3
让它工作，让它正确，让它更快
409
---
## Page 427
中其他任何代码之前。"该声明声称为形参x和v传递的参数将总是fixnum的。换句话说，这是一-
其中的DECLARE表达式并非Lisp形式，相反，它是DEFUN语法的一部分，并且必须出现在函数体
你可以通过编写下面的函数来告诉编译器，ada的两个参数都是fixnum：
CommonLisp函数也可以被编译成一两个指令。
信息，包括参数和返回值的类型，以及在通用性和错误检查方面接受类似C的妥协的话，那么
直接被编译成一两个机器指令。不过，如果你愿意为Common Lisp编译器提供跟C编译器同样的
bignum对象。
的值。并且由于C语言中的算术在加法的结果过大而无法用返回值的类型表示时只是简单地溢
表示成一个fixnum，即单个机器字可表示的数，从而可能不得不分配一个bignum对象。
并且就算a和b都是整数(你所关心的情形)，加法程序也不得不考虑加法的结果可能过大而无法
些数字的类型是整数、比值、浮点数还是复数，然后派发到适当的用于实际类型的加法程序上。
值是数字，因此必须生成代码在运行期检查。并且一旦检测出它们确实是数字，它还需要检测这
的原生编译器时。
那么你很可能会发现Common Lisp版本慢很多，即便当你的Common Lisp实现号称是带有高质量
基本思想是，它们用来向编译器提供信息以帮助其生成更好的代码。
工作。
的算法，那么接下来就是“代码精修”阶段了，即局部优化你的代码，让其绝对不做任何多余的
寻找一个更有效的基本算法，这是获得最大性能提升的最佳方法。但假设你已经使用了一个适当
必可见的一些信息。
，不做任何溢出检测，也不会在数学意义上的和过大而无法填入单个机器字时分配一个
这是因为CommonLisp版本的函数做了太多的事一
410
①声明可以出现在引人新变量的多数Lisp形式中，例如LET、LBT*和DO家族的循环宏。LOOP有其自己的用于声明
这就是声明的用处。声明的主要用法是为了告诉编译器关于变量和其他表达式的类型。例如，
这样，尽管Common Lisp代码的行为更有可能从数学意义上讲是正确的，但是C版本很可能
而在C语言中，由于所有变量的类型都是声明了的，编译器精确地知道a和b将保存何种类型
Common Lisp中用于代码精修的主要工具是它的各种可选的声明。Common Lisp声明背后的
你一旦在代码中发现了瓶颈所在，就可以开始设法调优了。当然，你应当尝试的第一件事是
(defun add (x y)
int add (int x, int y) { return x + y; }
我在第10章里提到过，如果你比较这个Lisp函数和看起来等价的C函数之间的性能：
举一个简单的例子，考虑下面这个CommonLisp函数：
循环变量类型的语法。第20章里提过的特殊操作符LOCALLY，就是专门用来创建一个可书写声明的作用域的。
(defun add (x y) (+ x y))
declare
第32章结论：下一步是什么
(fixnum x y))
www.TopSage.com
一CommonLisp编译器甚至不知道a和b的
---
## Page 428
明的第一个版本的add和最终版本之间的区别。首先，定义并编译最初的版本。
确地看到当你调用一个函数时究竟发生了什么。例如，你可以使用DISASSEMBLE来感受没有声
你的Lisp实现使用了一个原生编译器，同时你还懂你所在平台上的汇编语言的话，那么就可以精
但其基本思想是，它可以向你展示编译一个指定的函数后所生成的代码。
的，因为它依赖于具体实现编译代码的方式一—是否编译成机器码、字节码或其他的某种形式.
多像C代码。
望给定的一段CommonLisp代码在多大程度上接近于C和C++的性能，完全取决于你想让它们有
C重写代码。FFI可以用来访问已有的C代码，但声明可在需要接近C的性能时使用。当然，你希
需要对其调优，那么就放手去做吧。由于你可以这样去使用声明，因而很少只出于性能考虑来月
并且应该只在性能分析表明它们可以带来不同的效果时才添加它们。如果没有它们的时候也能得
add，那么结果可能也会很糟。因此，你应该仅在你的程序已经正常工作以后才使用这类声明，
加法溢出了，那么结果将是数学上错误的或者更坏。另外，如果有人使用错误的参数数量来调用
你可以写成下面这样：
重要，而0意味着完全不重要。这样，为了让Common Lisp将add编译到跟C编译器差不多的程度
从0到3的数值，包括0和3在内。该数值指定了编译器应当给予对应量的相对权重，其中3代表最
列表都含有符号SPEED、SAFETY、SPACE、DEBUG和COMPILATION-SPEED中的一个，以及一个
供的调试信息的数量；编译过程本身的速度。OPTIMIZE声明由一个或多个列表构成，其中每个
运行期错误检查的程度；代码的内存使用，包括代码本身的大小和运行期的内存占用；随代码提
生成快速但危险的代码。OPTIMIZE声明被用来告诉编译器如何平衡5个量：被生成的代码的速度；
这样：
这样，为了给Common Lisp编译器相当于C编译器得到的所有关于ada的信息，你可以写成下面
个诸如FIXNUM这样的类型说明符和一个形式，从而告诉编译器该形式将求值到给定的类型上。
个对编译器的承诺，并且编译器被允许生成假设你所言为真的代码。
于是，你可以使用DISASSEMBLE来查看声明是否对生成的代码产生了任何效果。并且如果
为了声明返回值的类型，你可以将形式(+×Y)包装在THE特殊操作符中。该操作符接受-
Lisp中内置的另一个代码调优工具是函数DISASSEMBLE。该函数的确切行为是与实现相关
当然，现在这个Lisp版本将只承担相当于C版本的义务了。如果传递的参数不是fixnum或者
不过，即便是这个版本也需要更多的一个声明，才能让CommonLisp编译器像C编译器那样
(defun add (x y) (+ x y))
(defun add (x y)
(defun add (x y)
(the fixnum (+ x y)))
(declare
(the fixnum (+ x y)))
(optimize (speed 3) (safety 0)))
(fixnum x y))
www.TopSage.com
32.3
让它工作，让它正确，让它更快
411
---
## Page 429
编译下面的带有完整声明的add版本。