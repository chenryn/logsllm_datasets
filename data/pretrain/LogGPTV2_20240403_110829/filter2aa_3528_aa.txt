### A CTF-Style Escape Journey on VMware Workstation

**Principal Investigator (PI):** [EMAIL]

#### About Us
- **Beijing Chaitin Tech Co., Ltd (@ChaitinTech)**
  - Website: [https://chaitin.cn/en](https://chaitin.cn/en)
  - Real World CTF: [https://realworldctf.com/](https://realworldctf.com/)
- **Chaitin Security Research Lab**
  - Achievements:
    - 3rd place at Pwn2Own 2017
    - Winners at GeekPwn 2015, 2016, 2018, and 2019
  - Notable Projects:
    - PS4 Jailbreak
    - Android Rooting
    - IoT Offensive Research
    - ESXi Escape
- **CTF Players from Team b1o0p and Tea Deliverers**
  - Achievements:
    - 2nd place at DEFCON 2016
    - 3rd place at DEFCON 2019
    - 1st place at HITCON 2019

#### Before We Start
- **VMM (Hypervisor):** Virtual Machine Monitor
- **Guest OS:** Operating System running inside the virtual machine
- **Host OS:** Operating System running on the physical hardware

#### What is a Virtual Machine Escape?
A Virtual Machine (VM) escape occurs when an attacker exploits vulnerabilities in the hypervisor to gain access to the host operating system. This can lead to the execution of arbitrary code on the host, compromising the entire system.

**Normal Operation:**
- VMM sanitizes all sensitive behaviors of the guest OS.
- Guest OS instances (0, 1, ..., N) are isolated from the Host OS.

**Exploitation:**
- An attacker exploits a vulnerability in the VMM.
- The attacker gains control over the host OS.
- The attacker can execute arbitrary code on the host, potentially gaining network connections and other privileges.

#### Introduction to VMware Workstation
**Architecture:**
- **Host OS:** The operating system running on the physical hardware.
- **Physical Hardware:** The underlying hardware resources.
- **User Mode:** The user space where applications run.
- **VM Monitor (VMM):** The hypervisor that manages the virtual machines.
  - **vmware-vmx:** The main process for managing VMs.
  - **vmmon:** The kernel module for low-level VM operations.
- **Virtual Machines (VMs):** Multiple VMs running on the host.
- **Host World:** The environment of the host OS.
- **VM World:** The environment of the virtual machines.

**Architecture After VMware Runs:**
- The VM Monitor (VMM) creates and manages the virtual machines.
- Each VM runs in its own isolated environment, with the VMM ensuring security and resource management.

#### Attack Surface
- **Graphics**
- **Ethernet**
- **USB**
- **SATA**
- **SCSI**
- **COM**

**Recent Attacks:**
- **Pwn2Own 2019:** Exploits targeting graphics, Ethernet, and USB.
- **TianfuCup 2018:** Exploits targeting Ethernet and SATA.
- **Pwn2Own 2017:** Exploits targeting SCSI and COM.

#### Our Target
- **CVE-2019-5541:** A vulnerability in the e1000e virtual network card.

#### Analysis of CVE-2019-5541
**How e1000e Works:**
- **Guest OS:** Manages the e1000e virtual network card.
- **Registers:**
  - **TDT (Transmit Descriptor Tail):** Points to the last descriptor.
  - **TDH (Transmit Descriptor Head):** Points to the next descriptor.
  - **TDBAL (Transmit Descriptor Base Address Low):** Lower 32 bits of the base address.
  - **TDBAH (Transmit Descriptor Base Address High):** Upper 32 bits of the base address.

**Packet Transfer Process:**
- The guest OS writes data to the e1000e registers.
- The VMM reads the data from the guest memory and processes it.
- If certain conditions are met, the VMM sends the packet.

**Vulnerable Code:**
```c
void __usercall e1000_process_TXD_CMD_DEXT() {
  ...
  packet = e1000_init_packet(...);
  if(packet){
    e1000_send_packet(...,packet);
  }
  ...
}

void __usercall e1000_init_packet(...) {
  ...
  hdr_size = hdr_len + vlan_size; // vlan_size will be 4 or 0
  sigment_num = (mss + pay_size - 1) / mss;
  simple_segment_size = (mss+hdr_size+0x11)&0xfffffff8;
  packet = malloc(sigment_num * simple_segment_size);
  ...
  if(mss){
    buf = &packet[ipcss+10];
    data = hdr + mss - ipcss;
    if(flag_0)
      *(buf+2) = htons(data); // Heap overflow write happens!
  }
  ...
}
```

**Heap Overflow:**
- The `ipcss` value can be manipulated to cause a heap overflow.
- This allows the attacker to write arbitrary data beyond the allocated buffer.

**Limitations:**
- The `ipcss` value is derived from the transfer struct, which is read from the guest memory.
- The VMM handles the transfer struct and increments the `TDH` register after processing each descriptor.

**Packet Transfer Structure:**
```c
union {
  struct {
    uint64_t buf_addr;
    uint64_t size;
  } transfer_data;
  struct {
    uint8_t ipcss;   // IP checksum start
    uint8_t ipcso;   // IP checksum offset
    uint16_t ipcse;  // IP checksum end
    uint8_t tucss;   // TCP checksum start
    uint8_t tucso;   // TCP checksum offset
    uint16_t tucse;  // TCP checksum end
    uint32_t cmd_and_length;
    uint8_t status;  // Descriptor status
    uint8_t hdr_len; // Header length
    uint16_t mss;    // Maximum segment size
  } prop_desc;
} transfer;
```

**Conclusion:**
- The vulnerability in the e1000e virtual network card can be exploited to perform a heap overflow, leading to a potential VM escape.
- Understanding the attack surface and the internal workings of the VMM is crucial for both defending against and exploiting such vulnerabilities.