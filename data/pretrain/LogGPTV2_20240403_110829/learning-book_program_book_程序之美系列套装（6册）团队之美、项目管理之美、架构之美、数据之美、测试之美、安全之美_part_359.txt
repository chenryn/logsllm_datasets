在编辑状态下用户鼠标滑过保存键时摘要界面就会出现
lando
MRH
用户鼠标快速经过保存键时界面并不出现
lando
MRH
如果将焦点（点击）切换到编辑范围或完全移走，摘要界面
lando
MRH
就会消失
将焦点完全移走，鼠标再次滑过保存键，摘要界面会出现
lando
MRH
鼠标经过保存，界面出现。移动鼠标直接向右，点击取消。
lando
MRH
点击编辑，界面不出现
摘要界面在编辑的消失和再出现过程中保持内容
lando
MRH
2046
---
## Page 2048
表16-2：编辑摘要对话窗口的验收测试（续）
测试
开发签核
测试签核
用户在摘要中录人内容并点击取消。用户点击编辑，然后再
lando
MRH
打开编辑摘要，旧的摘要就不再出现
lando
MRH
中
lando
MRH
摘要要坚持用标准的输出/再输出的工作空间
lando
MRH
对一个页面发表评论不应改变当前编辑摘要
lando
MRH
用户不能在界面中录入多于250个字符的内容
lando
MRH
末尾会删除大于250个字符的内容
lando
MRH
有新的屏幕采集时文件会自动更新
lando
上表只列出了15个测试，我相信你会找出更多。实际的软件有35
个，包括即使没有浏览器也可以写编辑摘要的API用的本地化需求；
也包括用来作为估量故事需求的一定量的自动化测试。
你可能会注意到这个表不是全部都要测试的表，不是测试用例。它
只是一个验收测试表。这些列出的测试具有沟通的价值，警如说，
创造了一个共享的模型用来沟通必须要完成的工作。如果把这个表
算作一个测试用例的话则不够充分。它只是令开发者大致了解编辑
摘要是怎么一回事。
现在开发者已经备齐了他们需要写代码的一切。Orlando给
Stash（JeremyStashewsky）打电话和他配组共用一个编辑器屏幕创
建了一个故事。他们在Perl中写好了反向编译的代码，为了设计和测
试方便，他们文顺便用TDD写好了测试单元。存细讨论TDD会超出
这一章的范畴，所以我就请Lando概括了一下他所做的事情。
我用TDD创作一个新故事的过程是首先对故事中我想要有的一些参
数规划。我先写出一些简单的失败测试，然后修改代码令其通过测
试。之后，在经过“正常”使用的假想后，我再对剩下的故事测试进
行刷新并重复此过程。
#initialize some globals well use
setup_testsO;
2047
---
## Page 2049
signal_edit_summary:{
myShub=setup_page(
revision_id=>Ssave_revision_id,
edit_summary=>'Dancing is forbidden!,
signal_edit_summary=>1,
Shub->edit->edit_content;
my$page=load_page_by_id(hub=>Shub,page_id=>Spage_id);
isSpage- >edit_summary,'Dancing is forbidden!',proxy method
works;
#check that the signal was created
signal_ok(
viewer=>Suser,
signaler=>$user,
body= >"Dancing is forbidden!"(edited Save Page in Admin
Wiki),
topic=>{
page_id=>Spage_id,
workspace_id=>Scurrent_workspace- >workspace_id,
1,
msg=>'normal length edit summary with signal′
2048
---
## Page 2050
#check that the appropriate events were created
is_event_count(2);
event_ok(
event_class=>'signal'
action=>'page_edit,
event_ok(
event_class=>'page',
action=>'edit_save'，
当Lando做完他的工作后就会删掉标有“开发中"的标签换成“质检
中”。下一次开发者查看工作进程的时候就会看到这则故事已被神奇
地移到测试队列中。这时测试的负责人（我本人）就会接着做下一
步的工作。
我的工作就是查看有没有最新版本的代码，然后在所有支持的浏览
器上尝试运行各种测试结果：警如说最新版和以前版本的企，
Firefox和Safari。我也尝试一些奇怪的字母组合，特殊字母组合，当
然还有不含空格的文本。
在完成故事测试后，我对故事和相关的变动进行探索性测试。②我
发现在E下，这个对话窗口没有在正确的位置上打开（而是跑到了
最右边），所以我就将故事的状态标签改回到“开发中"并用电子邮
件通知开发者。Lando修正后，再次标上“质检中”，我再次进行测
试。如果没问题，我就将这则故事传到用户验收（区）。
偶尔会有问题大到难以标注，或很难去修正但不影响使用。这时测
试者就会创立一个Bugzilla（跟踪缺陷）券并留下一个备忘。然后产
2049
---
## Page 2051
品经理根据这个备忘来决定是否可以发货。接下来的故事，警如
说，就是将一个摘要加到改动历史。我发现如果在改动历史中加入
250个没有空格的字符会引起很严重的滚动条和边距问题。经过一阵
考虑，我们决定：a）这不是英文语句中常见的情况；b）即使不是
今天但这个问题也许会得到解决：c）我可以写一个缺陷报告。
每两周一次我们将只测试过一次的软件送到软件生产区时，即使是
小的修改都容易引起一些惊慌。如果我们每两周一次在每一种浏览
器进行验收测试，这种负担最终可能会令整个组陷入瘫痪。因此我
们导入一种固定的测试结构：wikitests。
wikitestsI3]
wikitest是由关键词主导的驱动浏览器的测试。在wikitests中每一个测
试都用表中一系列的命令表示，每个命令占表的一行。这些命令是
Selenese，与英语相似。任何懂得基本语法的人都可以读懂这些命
令。不仅如此，由于这些命令被存在wiki页面中，任何人都可以浏
览、修改和保存这些命令。此外我们还可以建立我们自已的命令。
例如，stlogin，其包含普通的运行。以下表格举例示范编辑摘要的测
试。你会发现，第一列是命令，第二列和第三列是参数。警如说，
在第一个命令中，pt代表暂停变数，5000是替代值。第二个命令，
st-admin是一个采取行动的末尾命令，update-page是创建新的一页，
第三列是与预想结果的比较。（如果输出结果说“无法创立新的一
页"或类似的语句，则测试返回一个错误。）在
wait_for_element_present后出现的数字是千分之几秒的等待时间，
%%variable_name%%意味着用数值替代变量等。缩写版的编辑摘要
的测试如下：
2050
---
## Page 2052
备注
测试用例：编辑摘要
备注
测试用例：编辑摘要一
用文件来创建一个页面
st-admin
updatepage workspace X%workspace% emai1
"Edit
emailx% page“Edit Summaries %%start_tine%%”
Summaries %
<%%aikitest_client_filesxxmikitest_toc.txt
%start_time%
%”一个页面
已经被创建了
备注
测试用例：编辑摘要——创建一个编辑摘要
open_ok
/%workspace%%/index.cgi?Edit Summaries
x%start_tinex%
wait_for_element_visible_ok
steditbuttonlink
30000
click_ok
steditbuttonlink
wait_for_element_visible_ok
1ink=wiki Text
30000
click_ok
link=Wiki Text
wait_for_element_visible_ok
wikinyg_wikitext_textarea
30000
wait_for_element_visible_ok
stsavebuttonlink
30000
备注
测试用例：编辑摘要
输人摘要
wait_for_element_present_ok
steditsummarytextarea