        if (token == null || !token.equals(v_token)){
            data.put("VerificationStatus", false);
            return data;
        }
        return editInfo(request,response);
    }
## SQL 注入
SQL注入（SQL
Injection）是一种常见的Web安全漏洞，攻击者通过利用应用程序没有对用户输入进行充分验证的缺陷，将恶意的SQL语句注入到后端数据库中，从而导致数据库的数据被窃取、篡改、破坏等风险。  
通常，SQL注入攻击发生的原因是开发人员没有对用户输入的数据进行充分验证或过滤，或者使用了不安全的SQL查询方法。攻击者可以通过输入特定的字符串或符号来欺骗程序，从而注入恶意的SQL语句。
### 开发思路
SQL注入真是老生常谈。目前防御SQL注入的手段最有效的还是预编译，当然预编译也不是万能的，大致上有这些防御SQL注入的方式。
  1. 使用参数化的SQL语句或预编译语句。
    * 这种方法可以避免直接拼接SQL语句，有效防止SQL注入攻击。但是如果参数不正确地传递，仍可能导致SQL注入漏洞。
  2. 对用户输入进行过滤和验证。
    * 这种方法可以检查输入数据的格式、类型、长度等是否符合要求，避免恶意输入攻击，但是需要保证过滤和验证的严格性。
  3. 使用ORM框架。
    * ORM框架可以把对象与数据库表映射起来，自动生成SQL语句，有效地避免手写SQL带来的漏洞。但是ORM框架的质量和使用方式也需要谨慎考虑。
  4. 限制数据库用户的权限。
    * 把数据库用户权限限制在最小范围内，避免恶意用户获取敏感数据。但是如果数据库被攻破，仍有可能导致数据泄露。
  5. 避免把错误信息暴露给用户。
    * 在出现异常或错误时，不要把详细信息直接暴露给用户，避免攻击者利用这些信息进行注入攻击。但是错误信息的处理也需要及时，以便开发人员快速定位和修复问题。
  6. 对重要数据进行加密存储。
    * 对于重要数据，采用加密存储的方式，即使数据库被攻破也不容易泄露敏感信息。但是加密的算法和密钥管理也需要谨慎考虑。
  7. 定期对数据库进行安全审计。
    * 定期对数据库进行安全审计，检查是否存在异常或漏洞，及时修复问题，保证系统的安全性。但是需要保证审计的全面性和严格性。
Java中执行SQL语句的方式大致有以下几种：
  1. 使用 JDBC 的 `java.sql.Statement`执行SQL语句。
  2. 使用 JDBC 的 `java.sql.PreparedStatement`执行SQL语句。
  3. 使用 Hibernate 的 `createQuery`执行SQL语句。
  4. 使用 MyBatis 映射执行SQL语句。
Hibernate 默认会将所有传入的参数使用 JDBC 的 PreparedStatement 进行预编译，从而防止 SQL 注入攻击。
    Query query = session.createQuery("FROM User WHERE username = :username");
    query.setParameter("username", username);
    List users = query.list();
MyBatis 则是通过编写映射文件，在映射的语句中使用`${}`和`#{}`来设置变量输出的位置。其中`#{}`的底层也是使用 JDBC 的
PreparedStatement 进行预编译。而`${}`则是直接输出变量，类似于字符拼接从而导致SQL注入。  
JDBC 的 PreparedStatement 会自动将 SQL 中的占位符`?`替换成预编译后的参数，使用参数化的方式执行 SQL。下面是预编译的例子。
    String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
    PreparedStatement stmt = connection.prepareStatement(sql);
    stmt.setString(1, username);
    stmt.setString(2, password);
    ResultSet rs = stmt.executeQuery();
尽管预编译非常好用，但在SQL语句中不能使用单引号的地方往往不能使用预编译。例如 `order
by`，这些地方没有过滤就有可能存在SQL注入风险。并且预编译不会对模糊查询中的两个通配符，`%`和`_`做转义，没有过滤的话很有可能导致恶意模糊查询。  
如果使用`Statement`的方式，那么将没有预编译，通常是使用字符拼接的方式执行SQL语句，在开发过程中，我大量使用了`Statement.executeQuery`方法，如果不对用户输入的内容自行做过滤，那么不可避免的会导致SQL注入的产生。  
代码来源：`com/pika/electricrat/sqli/dao/UserGbkDaoImpl.java`
    // 查询，字符串拼接
    public HashMap findUserById(String id){
        return query("select * from sys_account where id=" + id);
    }
    // 直接使用 executeQuery 执行SQL语句，没有过滤。
    public HashMap query(String sql){
        System.out.println(sql);
        HashMap data = new HashMap<>();
        try {
            ResultSet rs = s.executeQuery(sql);
            rs.next();
            data.put("id", rs.getInt("id"));
            data.put("username", rs.getString("username"));
            data.put("msg", "ok");
        } catch (SQLException e){
            e.printStackTrace();
            data.put("msg", e.getMessage());
        }
        return data;
    }
值得一提的是参考了【BJDCTF 2020】简单注入，我过滤了单引号，转义成`\'`。  
代码来源：`com/pika/electricrat/sqli/dao/UserGbkDaoImpl.java`
    public HashMap findUserFilter(String username, String password){
        username = username.replaceAll("'+", "\\\\'");
        password = password.replaceAll("'+", "\\\\'");
        return query("select * from sys_account where username='" + username + "' and password='" + password + "'");
    }
## RCE 远程命令执行
Java RCE（Remote Code
Execution）命令执行漏洞指的是通过Java应用程序漏洞，攻击者可以在受害者服务器上执行恶意代码的安全漏洞。攻击者可以通过向Java应用程序发送精心构造的恶意请求，绕过应用程序的身份验证和授权机制，最终在服务器上执行任意命令。  
该漏洞的产生原因主要是Java应用程序在处理用户输入时，没有对输入数据进行充分的验证和过滤。攻击者可以通过构造精心制作的请求，绕过应用程序的安全控制，从而在服务器上执行恶意代码。
### 开发思路
在Java中，可以执行系统命令的方法有以下几种：
  1. Runtime类的exec()方法
这是Java最基本的执行系统命令的方法，通过Runtime.getRuntime().exec(command)可以执行指定的系统命令。
  1. ProcessBuilder类
这是一个更加高级的执行系统命令的方式，它提供了更多的控制和配置选项，例如设置工作目录、环境变量等。  
通过ProcessBuilder可以构建一个包含系统命令及参数的列表，然后执行该命令。相比于Runtime类的exec()方法，ProcessBuilder提供了更多的安全保障。ProcessBuilder的命令执行漏洞更好实现，如下所示：
    String ip = request.getParameter("ip");
    ProcessBuilder pb = new ProcessBuilder("ping", "-t", "3", ip);
    Process p = pb.start();
Runtime.getRuntime().exec 方法，它有很多不同的执行方式。其中用的比较多的有两种：
  1. 作为字符串传入
`Runtime.getRuntime().exec(String command)`
  1. 作为字符串数组传入
`Runtime.getRuntime().exec(String[] command)`  
第一种方式会经过`StringTokenizer`进行处理，将会改变我们原来的语言，导致命令无法执行。第二种就直接调用 ProcessBuilder
来执行命令了，具体就跟上面给出的实例代码一直。具体其中的不同之处请师傅自行搜索了解，这里不再赘述了。  
总之，为了能够成功演示，我使用了`/bin/sh`作为基础文件，保证后面传入的数据被当作参数也能够正常运行。  
代码来源：`com/pika/electricrat/rce/RceServlet.java`
    @Api({RequestMethodType.POST})
    public Map cmd(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, InterruptedException {
        String command = request.getParameter("cmd");
        HashMap data = new HashMap<>();
        data.put("data", execCmd(command));
        return data;
    }
    @Api({RequestMethodType.POST})
    public Map ping(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, InterruptedException {
        String ip = request.getParameter("ip");
        HashMap data = new HashMap<>();
        data.put("data", execCmd("ping -c 4 " + ip));
        return data;
    }
    public static String execCmd(String cmd) throws IOException, InterruptedException {
        List bash_cmd = new ArrayList<>();
        bash_cmd.add("/bin/sh");
        bash_cmd.add("-c");
        bash_cmd.add(cmd);
        Process p = Runtime.getRuntime().exec(bash_cmd.toArray(new String[bash_cmd.size()]));
        InputStream is = p.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
        String line;
        StringBuilder text = new StringBuilder();
        while((line = reader.readLine())!= null){
            text.append(line).append("\n");
        }
        p.waitFor();
        is.close();
        reader.close();
        p.destroy();
        return text.toString();
    }
## URL跳转漏洞
URL跳转漏洞（Open Redirect漏洞）指的是Web应用程序中的一种安全漏洞，攻击者可以利用这种漏洞将用户重定向到恶意网站。  
攻击者可以通过构造一个特定的URL，将其伪装成合法的跳转链接，欺骗用户点击跳转链接，最终将用户重定向到恶意网站，从而实施钓鱼、欺诈等攻击行为。例如，攻击者可以伪造一个银行登录页面，让用户输入账号和密码，从而窃取用户的银行账号和密码。
### 开发思路
URL跳转漏洞通常发生在Web应用程序中的跳转功能上。开发人员没有对跳转的URL进行充分的验证和过滤，导致攻击者可以通过修改URL的参数，伪造跳转链接，最终将用户重定向到恶意网站。  
在URL跳转这个实现上面，前端和后端都能实现。后端实现的话可以使用设置301/302状态码和`Location`头的方式实现跳转。
    response.setStatus(301);
    response.setHeader("Location", request.getParameter("url"));
也可以使用`sendRedirect`进行跳转。
    response.sendRedirect(request.getParameter("url"));
前端实现起来会方便很多。直接修改`window.location.href`属性即可，也没有做其他的过滤。  
代码来源：`src/main/webapp/pages/urlredirect/urlredirect.html`
    function goUrl(){
      window.location.href = $("#url")[0].value;
    }
## 任意文件上传
任意文件上传漏洞是一种Web应用程序安全漏洞，攻击者可以利用此漏洞将任意文件上传到服务器上，从而实现攻击目的。攻击者通常可以上传包含恶意代码的Web
Shell、病毒、木马程序等恶意文件，通过这些文件进行远程控制、信息窃取、篡改网站内容、网站挂马等攻击行为。  
任意文件上传漏洞通常是由于Web应用程序的开发人员没有对上传的文件类型和文件大小进行充分的验证和过滤所致。攻击者可以通过修改上传的文件类型、伪造上传的文件头等方式绕过验证，上传任意类型和大小的文件。一旦攻击者上传了恶意文件，他们就可以在服务器上执行任意的命令，并获得系统权限，这将给Web应用程序带来严重的安全威胁。
### 开发思路
通常我们上传文件会特别关注以下几个方面：
  1. 文件类型校验：根据文件后缀名或者文件头（magic number）判断文件类型，只接受安全的文件类型（ **白名单** ），如图片、PDF、文本等，拒绝危险的文件类型，如可执行文件等。
  2. 文件大小校验：限制文件大小，避免上传过大的文件。
  3. 文件名校验：防止上传包含危险字符的文件名，如 ../ 等。 **对文件进行重命名** 。
  4. 文件内容校验：对于上传的文件，可以对其内容进行检查，如通过杀毒软件进行检查，避免上传带有病毒的文件。
除此之外还有其他防范的操作。
  * 文件下载时不提供文件名，只提供文件随机生成的ID。
  * 全站不解析JSP、JSPX等可以解析对象的文件。
  * 上传文件目录低权限、网站运行权限低权限等。
> 题外话，如果不校验文件内容，那么必须考虑文件包含漏洞存在的情况。