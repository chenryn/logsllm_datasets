title:Demonstrating generalized virtual topologies in an openflow network
author:Elio Salvadori and
Roberto Doriguzzi Corin and
Matteo Gerola and
Attilio Broglio and
Francesco De Pellegrini
Demonstrating Generalized Virtual Topologies in an
OpenFlow Network
Elio Salvadori, Roberto Doriguzzi Corin, Matteo Gerola,
Attilio Broglio, Francesco De Pellegrini
Via alla Cascata 56/D Povo, 38123 Trento - Italy
CREATE-NET
{esalvadori, rdoriguzzi, mgerola, abroglio, fdepellegrini}@create-net.org
1.
INTRODUCTION
Network Virtualization (NV) is one of the most promising
approaches to enable innovation in today’s network. Gen-
erally speaking, NV refers to the possibility of pooling to-
gether low–level hardware and software resources belonging
to a networked system into a single administrative entity. In
such a way network resources could be eﬀectively shared in
a transparent way among diﬀerent logical network instances
corresponding to diﬀerent virtual network topologies.
A recent approach toward Network Virtualization has been
proposed through FlowVisor [1], whose aim is to leverage on
the speciﬁc features of an OpenFlow–controlled network [2]
to share the same hardware forwarding plane among multi-
ple logical networks.
As highlighted by the authors in [1], one of the major limita-
tions of FlowVisor is the inability to establish virtual topolo-
gies not restricted by the underpinning physical topology.
As a consequence, FlowVisor is unable to provide researchers
ﬂexibility in designing their experiments with arbitrary net-
work topologies on a deﬁned physical infrastructure.
The architecture presented in Chapter 2 of this paper, called
ADVisor (ADvanced FlowVisor), provides the functionali-
ties to overcome the above-mentioned FlowVisor’s limitation
by allowing the instantiation of generalized virtual topolo-
gies in a OpenFlow network through the implementation of
virtual links as aggregation of multiple physical links and
OpenFlow-enabled switches.
In this demo we will show the conﬁguration of a simple
virtual topology performed through a Web-based control
framework which allows the reservation of network resources
(nodes, links and bandwidth) and the management of vir-
tual resources (virtual links and virtual ports). We will also
demonstrate the eﬀective instantiation of the virtual topol-
ogy by running a synthetic traﬃc generator application.
Categories and Subject Descriptors
D.2.8 [Computer Communication Networks]: Network
Architecture and Design
General Terms
Experimentation
Keywords
Network Virtualization, OpenFlow
Copyright is held by the author/owner(s).
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
ACM 978-1-4503-0797-0/11/08.
2. PROPOSED ARCHITECTURE
Like FlowVisor, ADVisor sits between the physical hard-
ware and the guest OpenFlow controllers and enables the
implementation of logical topologies and, like FlowVisor,
ADVisor can recursively “slice” a virtual topology (see Fig.
1). Diﬀerently from FlowVisor, ADVisor does not act as a
transparent proxy but can directly reply to the OpenFlow
network with the purpose of enabling the instantiation of
logical topologies completely decoupled from the underlying
physical network.
In ADVisor, Virtual Topologies (VT) are identiﬁed through
a set of tuples included in conﬁguration ﬁles and specifying
each component of a Virtual Topology (virtual nodes, vir-
tual links and virtual ports). Furthermore, the ﬂow space
of each switch in the network is partitioned among Virtual
Topologies through combinations of bits involving only the
OSI-Layer 2 ﬁelds of the packet header such as the VLAN
ID, the MPLS labels or IEEE 802.1ad –based multiple vlan
tagging. These last two options are giving higher ﬂexibility
since they both allow the experimentation to be performed
up to L2, however they are not available yet on any switch
hardware being the OpenFlow speciﬁcation version 1.1.0 [3]
recently released.
Controller
ADVisor
(a)
(b)
Figure 1: (a) ADVisor can be placed between the
OpenFlow switches and the physical network or
(b) between an instance of FlowVisor and the con-
trollers to recursively “slice” a virtual topology.
In order to provide a full overview of the system, we will
give a description of the modules composing ADVisor:
Topology Monitor. This module checks the Virtual
Topology conﬁguration in order to determine whether the
switch that generated the OpenFlow protocol message is an
458VT Controller
EXPEDIENT
WEB
ADVisor Plugin
ADVisor
Port Mapper
FlowVisor
sw4
PC2
L3
sw2
VL2
sw3
L2
L1
sw1
VL1
Physical Ethernet link
Virtual link
Traﬃc path
Switch/Link outside 
the Virtual Topology
PC1
Topology Monitor
Link Broker
Virtual topology 
configurations
Figure 3: The Virtual Topology used in the demon-
stration.
Packet-in
message
New Flow
OpenFlow Switch
New flow entry
Figure 2: ADVisor software architecture.
end-point of a link or is part of a virtual link (e.g. switch
sw2 in Fig. 3). In the ﬁrst case the message is forwarded
to the controller, in the second case the message is managed
directly by the Link Broker.
Port Mapper. This module edits the in port and ac-
tions ﬁelds of the OpenFlow protocol messages by replacing
their values with ones consistent with the virtual links con-
ﬁguration. For instance, switch sw3 in Fig. 3 is connected
to the physical network through a single link while to the
Virtual Topology through two diﬀerent virtual links. Port
Mapper remaps the in port value contained in the Packet in
messages generated by the switch with a virtual value de-
pendent on the virtual link.
Link Broker. The Link Broker creates or modiﬁes Open-
Flow protocol messages directed to the switches. Its main
objective is to control switches composing virtual links and
that should not be managed by controllers. For instance,
switch sw2 in Fig. 3 is a component of virtual links between
switches sw1 and sw3 and between switches sw3 and sw4.
OpenFlow protocol messages sent by sw2 to the controller of
this topology are always managed by the Link Broker that
directly replies to the switch hiding sw2 to the controller.
FlowVisor. Provides the basic slicing mechanism based
on the OpenFlow protocol and manages the TLS secure con-
nections with OpenFlow switches and controllers.
SFA-based control framework. The Expedient-based
framework [4] provides an intuitive web user interface for
the ADVisor managers to conﬁgure the resources for the
experimenters. Expedient includes the ADVisor plugin, an
extension of the original OpenFlow plugin, which allows the
selection of network resources (OpenFlow switches, virtual
links, bandwidth etc.) for each Virtual Topology assigned
to experimenters.
3. DEMONSTRATION
The primary goal of the demonstration is to show the
eﬀective instantiation of a virtual topology and the man-
agement of virtual links and virtual ports with this initial
prototype of ADVisor. The demonstration is performed on a
remote testbed at the CREATE-NET premises composed of
four NetFPGA-based OpenFlow switches (interconnected as
shown in Fig. 3) and one central unit running ADVisor and
an instance of the NOX controller. All testbed devices are
connected through Ethernet cables and are compliant with
OpenFlow speciﬁcation 1.0.0. The virtual topology instanti-
ated for the demonstration includes three switches sw1, sw3
and sw4 plus two virtual links: VL1, formed with the ag-
gregation of physical links L1 and L2 plus switch sw2; VL2
formed with the aggregation of L2, L3 and sw2.
During the demonstration, the Expedient-based user in-
terface (see Fig. 4) is used to conﬁgure the virtual topology
depicted in Fig. 3 including virtual links VL1 and VL2; once
conﬁgured, some synthetic traﬃc is transmitted from P C1
to P C2.
Through the output of the NOX controller, the experiment
demonstrates the ability of ADVisor to correctly control
switch sw2 (i.e keeping sw2 out of the view of the NOX
controller) and to properly manage virtual links and virtual
ports on sw3. Of course being the system fully reconﬁg-
urable, other virtual topologies “carved” from the physical
topology will be shown as well.
Topology
Figure 4: Screenshot of Expedient showing the
topology conﬁguration page.
4. REFERENCES
[1] R. Sherwood, G. Gibb, K. Yap, G. Appenzeller, M. Casado,
N. McKeown, and G. Parulkar, “FlowVisor: A Network
Virtualization Layer,” OpenFlow Switch Consortium, Tech.
Rep., October 2009.
[2] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar,
L. Peterson, J. Rexford, S. Shenker, and J. Turner, “OpenFlow:
enabling innovation in campus networks,” ACM SIGCOMM
Computer Communication Review, vol. 32, no. 2, pp. 69–74,
April 2008.
[3] OpenFlow Switch Consortium, “OpenFlow Switch Speciﬁcation
Version 1.1.0,” Tech. Rep., February 2011.
[4] Expedient: A Pluggable Platform for GENI Control
Frameworks. [Online]. Available:
http://yuba.stanford.edu/˜jnaous/expedient/
459