# Demonstrating Generalized Virtual Topologies in an OpenFlow Network

**Authors:**
- Elio Salvadori
- Roberto Doriguzzi Corin
- Matteo Gerola
- Attilio Broglio
- Francesco De Pellegrini

**Affiliation:**
CREATE-NET, Via alla Cascata 56/D, Povo, 38123 Trento, Italy

**Contact:**
{esalvadori, rdoriguzzi, mgerola, abroglio, fdepellegrini}@create-net.org

---

## 1. Introduction

Network Virtualization (NV) is a promising approach for enabling innovation in modern networks. NV involves pooling low-level hardware and software resources into a single administrative entity, allowing these resources to be shared transparently among different logical network instances, each corresponding to a distinct virtual network topology.

A recent approach to Network Virtualization is FlowVisor [1], which leverages the specific features of an OpenFlow-controlled network [2] to share the same hardware forwarding plane among multiple logical networks. However, as noted by the authors in [1], one of the major limitations of FlowVisor is its inability to establish virtual topologies that are not constrained by the underlying physical topology. This limitation restricts researchers' flexibility in designing experiments with arbitrary network topologies on a defined physical infrastructure.

In this paper, we present ADVisor (ADvanced FlowVisor), an architecture that overcomes the limitations of FlowVisor by enabling the instantiation of generalized virtual topologies in an OpenFlow network. ADVisor achieves this by implementing virtual links as aggregations of multiple physical links and OpenFlow-enabled switches.

This demonstration will showcase the configuration of a simple virtual topology using a web-based control framework. The framework allows the reservation of network resources (nodes, links, and bandwidth) and the management of virtual resources (virtual links and virtual ports). We will also demonstrate the effective instantiation of the virtual topology by running a synthetic traffic generator application.

**Categories and Subject Descriptors:**
D.2.8 [Computer Communication Networks]: Network Architecture and Design

**General Terms:**
Experimentation

**Keywords:**
Network Virtualization, OpenFlow

**Copyright:**
Held by the author/owner(s).

**Conference:**
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
ACM 978-1-4503-0797-0/11/08.

---

## 2. Proposed Architecture

Like FlowVisor, ADVisor sits between the physical hardware and the guest OpenFlow controllers, enabling the implementation of logical topologies. Similar to FlowVisor, ADVisor can recursively "slice" a virtual topology (see Figure 1). However, unlike FlowVisor, ADVisor does not act as a transparent proxy but can directly respond to the OpenFlow network to enable the instantiation of logical topologies completely decoupled from the underlying physical network.

In ADVisor, Virtual Topologies (VT) are identified through a set of tuples in configuration files, specifying each component of a Virtual Topology (virtual nodes, virtual links, and virtual ports). The flow space of each switch in the network is partitioned among Virtual Topologies using combinations of bits involving only the OSI-Layer 2 fields of the packet header, such as the VLAN ID, MPLS labels, or IEEE 802.1ad-based multiple VLAN tagging. These options provide higher flexibility, although they are not yet available on all switch hardware due to the recent release of OpenFlow specification version 1.1.0 [3].

**Figure 1:**
(a) ADVisor can be placed between the OpenFlow switches and the physical network or
(b) between an instance of FlowVisor and the controllers to recursively "slice" a virtual topology.

To provide a comprehensive overview of the system, we describe the modules composing ADVisor:

- **Topology Monitor:** This module checks the Virtual Topology configuration to determine whether the switch that generated the OpenFlow protocol message is an endpoint of a link or part of a virtual link (e.g., switch sw2 in Figure 3). In the first case, the message is forwarded to the controller; in the second case, the message is managed directly by the Link Broker.

- **Port Mapper:** This module edits the in_port and actions fields of the OpenFlow protocol messages by replacing their values with ones consistent with the virtual links configuration. For example, switch sw3 in Figure 3 is connected to the physical network through a single link but to the Virtual Topology through two different virtual links. Port Mapper remaps the in_port value in the Packet-in messages generated by the switch with a virtual value dependent on the virtual link.

- **Link Broker:** The Link Broker creates or modifies OpenFlow protocol messages directed to the switches. Its main objective is to control switches that are part of virtual links and should not be managed by controllers. For instance, switch sw2 in Figure 3 is a component of virtual links between switches sw1 and sw3 and between switches sw3 and sw4. OpenFlow protocol messages sent by sw2 to the controller of this topology are always managed by the Link Broker, which hides sw2 from the controller.

- **FlowVisor:** Provides the basic slicing mechanism based on the OpenFlow protocol and manages the TLS secure connections with OpenFlow switches and controllers.

- **SFA-based Control Framework:** The Expedient-based framework [4] provides an intuitive web user interface for ADVisor managers to configure the resources for experimenters. Expedient includes the ADVisor plugin, an extension of the original OpenFlow plugin, which allows the selection of network resources (OpenFlow switches, virtual links, bandwidth, etc.) for each Virtual Topology assigned to experimenters.

**Figure 3:**
The Virtual Topology used in the demonstration.

**Figure 2:**
ADVisor software architecture.

---

## 3. Demonstration

The primary goal of the demonstration is to show the effective instantiation of a virtual topology and the management of virtual links and virtual ports using this initial prototype of ADVisor. The demonstration is performed on a remote testbed at the CREATE-NET premises, composed of four NetFPGA-based OpenFlow switches (interconnected as shown in Figure 3) and one central unit running ADVisor and an instance of the NOX controller. All testbed devices are connected through Ethernet cables and are compliant with OpenFlow specification 1.0.0.

The virtual topology instantiated for the demonstration includes three switches (sw1, sw3, and sw4) and two virtual links: VL1, formed by the aggregation of physical links L1 and L2 plus switch sw2; and VL2, formed by the aggregation of L2, L3, and sw2.

During the demonstration, the Expedient-based user interface (see Figure 4) is used to configure the virtual topology depicted in Figure 3, including virtual links VL1 and VL2. Once configured, some synthetic traffic is transmitted from PC1 to PC2.

Through the output of the NOX controller, the experiment demonstrates ADVisor's ability to correctly control switch sw2 (keeping sw2 out of the view of the NOX controller) and to properly manage virtual links and virtual ports on sw3. The system is fully reconfigurable, allowing other virtual topologies to be carved from the physical topology.

**Figure 4:**
Screenshot of Expedient showing the topology configuration page.

---

## 4. References

[1] R. Sherwood, G. Gibb, K. Yap, G. Appenzeller, M. Casado, N. McKeown, and G. Parulkar, “FlowVisor: A Network Virtualization Layer,” OpenFlow Switch Consortium, Tech. Rep., October 2009.

[2] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner, “OpenFlow: Enabling Innovation in Campus Networks,” ACM SIGCOMM Computer Communication Review, vol. 32, no. 2, pp. 69–74, April 2008.

[3] OpenFlow Switch Consortium, “OpenFlow Switch Specification Version 1.1.0,” Tech. Rep., February 2011.

[4] Expedient: A Pluggable Platform for GENI Control Frameworks. [Online]. Available: http://yuba.stanford.edu/~jnaous/expedient/

---