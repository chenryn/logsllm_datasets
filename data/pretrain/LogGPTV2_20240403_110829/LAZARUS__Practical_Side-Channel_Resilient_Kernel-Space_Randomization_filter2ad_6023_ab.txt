ing information and can be exploited [8]. More speciﬁcally, the execution of
the prefetch instruction of recent Intel processors exhibits a timing diﬀerence,
LAZARUS: Practical Side-Channel Resilient
243
which depends directly on the state of the TLBs. As in the case of the other side-
channel attacks, this is used to access privileged addresses by the attacker. Since
this access originates from an unprivileged instruction it will fail, and according
to the documentation the processor will not raise an exception. Hence, its exe-
cution time diﬀers for cached kernel addresses. This yields another side channel
that leaks the randomization secret.
Intel’s TSX. Transactional memory extensions introduced by Intel encapsulate
a series of memory accesses to provide enhanced safety guarantees, such as roll-
backs. While potentially interesting for the implementation of concurrent soft-
ware without the need for lock-based synchronization, erroneous accesses within
a transaction are not reported to the operating system. More speciﬁcally, if the
MMU detects an access violation, the exception is masked and the transaction
is rolled back silently. However, an adversary can measure the timing diﬀer-
ence between two failing transactions to identify privileged addresses, which are
cached in the TLBs. This enables the attacker to signiﬁcantly improve over the
original page fault timing side-channel attack [13,23]. The reason is that the
page fault handler of the OS is never invoked, signiﬁcantly reducing the noise in
the timing signal.
3 LAZARUS
In this section, we give an overview of the idea and architecture of LAZARUS,
elaborate on the main challenges, and explain in detail how we tackle these
challenges.
3.1 Adversary Model and Assumptions
We derive our adversary model from the related oﬀensive work [6,8,10,13,23].
– Writable ⊕ Executable Memory. The kernel enforces Writable ⊕ Exe-
cutable Memory (W⊕X) which prevents code-injection attacks in the ker-
nel space. Further, the kernel utilizes modern CPU features like SMAP and
SMEP [12] to prevent user-mode aided code-injection and code-reuse attacks.
– Kernel Address Space Layout Randomization (KASLR). The base
address of the kernel is randomized at boot time [2,14].
– Absence of Software-Based Information-Disclosure Vulnerability.
The kernel does not contain any vulnerabilities that can be exploited to dis-
close the randomization secret.
– Malicious Kernel Extension. The attacker cannot load malicious kernel
extensions to gain control over the kernel, i.e., only trusted (or signed) exten-
sions can be loaded.
– Memory-corruption Vulnerability. This is a standard assumption for
many real-world kernel exploits. The kernel, or a kernel extension contains
a memory-corruption vulnerability. The attacker has full control over a user-
mode process from which it can exploit this vulnerability. The vulnerability
244
D. Gens et al.
Fig. 2. The idea behind our side channel protection: An unprivileged user process ( 1 )
can exploit the timing side channel for kernel addresses through shared cache access in
the MMU paging caches ( 2 ). Our defense mitigates this by enforcing ( 3 ) a separation
between diﬀerent privilege levels for randomized addresses ( 4 ).
enables the attacker to overwrite a code pointer of the kernel to hijack the
control-ﬂow of the kernel. However, the attacker cannot use this vulnerability
to disclose any addresses.
While modern kernels suﬀer from software-based information-disclosure vul-
nerabilities, information-disclosure attacks based on side channels pose a more
severe threat because they can be exploited to disclose information in the absence
of software vulnerabilities. We address the problem of side channels, and treat
software-based information-disclosure vulnerabilities as an orthogonal problem.
3.2 Overview
Usually, kernel and user mode share the same virtual address space. While legit-
imate accesses to kernel addresses require higher privilege, these addresses still
occupy some parts of the virtual memory space that is visible to user processes.
The idea behind our side-channel defense is to strictly and eﬃciently separate
randomized kernel memory from virtual memory in user space.
Our idea is depicted in Fig. 2. Kernel execution and user space execution
usually share a common set of architectural resources, such as the execution
unit (Core), and the MMU. The attacker leverages these shared resources in the
following way: in step 1 , the attacker sets up the user process and memory
setting that will leak the randomization secret. The user process then initiates
a virtual memory access to a kernel address.
Next, the processor invokes the MMU to check the required privilege level
in step 2 . Since a user space process does not possess the required privileges
to access kernel memory, any such access will ultimately be denied. However, to
deny access the MMU has to look up the required privileges in the page tables.
These are structured hierarchically with multiple levels, and separate caches on
every level. Hence, even denied accesses constitute a timing side-channel that
directly depends on the last cached level.
We address 3 the root of this side channel: we separate the page tables for
kernel and user space. This eﬀectively prevents side-channel information from
LAZARUS: Practical Side-Channel Resilient
245
kernel addresses to be leaked to user space, because the MMU uses a diﬀerent
page table hierarchy. Thus, while the processor is in user mode, the MMU will
not be able to refer to any information about kernel virtual addresses, as shown
in step 4 .
3.3 Challenges for Fine-Grained Address Space Isolation
To enable LAZARUS to separate and isolate both execution domains a number
of challenges have to be tackled: ﬁrst, we must provide a mechanism for switching
between kernel and user execution at any point in time without compromising the
randomized kernel memory (C1). More speciﬁcally, while kernel and user space no
longer share the randomized parts of privileged virtual memory, the system still
has to be able to execute code pages in both execution modes. For this reason,
we have to enable switching between kernel and user space. This is challenging,
because such a transition can happen either through explicit invocation, such as
a system call or an exception, or through hardware events, such as interrupts. As
we will show our defense handles both cases securely and eﬃciently.
Second, we have to prevent the switching mechanism from leaking any side-
channel information (C2). Unmapping kernel pages is also challenging with
respect to side-channel information, i.e., unmapped memory pages still exhibit a
timing diﬀerence compared to mapped pages. Hence, LAZARUS has to prevent
information leakage through probing of unmapped pages.
Third, our approach has to minimize the overhead for running applications
to oﬀer a practical defense mechanism (C3). Implementing strict separation
of address spaces eﬃciently is involved, since we only separate those parts of
the address space that are privileged and randomized. We have to modify only
those parts of the page table hierarchy which deﬁne translations for randomized
addresses.
In the following we explain how our defense meets these challenges.
C1: Kernel-User Transitioning. Processor resources are time-shared between
processes and the operating system. Thus, the kernel eventually takes control
over these resources, either through explicit invocation, or based on a signaling
event. Examples for explicit kernel invocations are system calls and exceptions.
These are synchronous events, meaning that the user process generating the
event is suspended and waiting for the kernel code handling the event to ﬁnish.
On the one hand, after transitioning from user to kernel mode, the event
handler code is no longer mapped in virtual memory because it is located in the
kernel. Hence, we have to provide a mechanism to restore this mapping when
entering kernel execution from user space.
On the other hand, when the system call or exception handler ﬁnishes and
returns execution to the user space process, we have to erase those mappings
again. Otherwise, paging entries might be shared between privilege levels. Since
all system calls enter the kernel through a well-deﬁned hardware interface, we can
activate and deactivate the corresponding entries by modifying this central entry
point.
246
D. Gens et al.
Transitions between kernel and user space execution can also happen through
interrupts. A simple example for this type of event is the timer interrupt, which is
programmed by the kernel to trigger periodically in ﬁxed intervals. In contrast
to system calls or exceptions, interrupts are asynchronously occurring events,
which may suspend current kernel or user space execution at any point in time.
Hence, interrupt routines have to store the current process context before
handling a pending interrupt. However, interrupts can also occur while the
processor executes kernel code. Therefore, we have to distinguish between inter-
rupts during user or kernel execution to only restore and erase the kernel entries
upon transitions to and from user space respectively. For this we facilitate the
stored state of the interrupted execution context that is saved by the interrupt
handler to distinguish privileged from un-privileged contexts.
This enables LAZARUS to still utilize the paging caches for interrupts occur-
ing during kernel execution.
C2: Protecting the Switching Mechanism. The code performing the address space
switching has to be mapped during user execution. Otherwise, implementing a
switching mechanism in the kernel would not be possible, because the processor
could never access the corresponding code pages. For this reason, it is necessary
to prevent these mapped code pages from leaking any side-channel information.
There are two possibilities for achieving this.
First, we can map the switching code with a diﬀerent oﬀset than the rest of
the kernel code section. In this case an adversary would be able to disclose the
oﬀset of the switching code, while the actual randomization secret would remain
protected.
Second, we can eliminate the timing channel by inserting dummy mappings
into the unmapped region. This causes the surrounding addresses to exhibit an
identical timing signature compared to the switching code.
Since an adversary would still be able to utilize the switching code to conduct
a code-reuse attack in the ﬁrst case, LAZARUS inserts dummy mappings into
the user space page table hierarchy.
C3: Minimizing Performance Penalties. Once paging is enabled on a processor,
all memory accesses are mediated through the virtual memory subsystem. This
means that a page walk is required for every memory access. Since traversing
the page table results in high performance penalties, the MMU caches the most
prominent address translations in the Translation Lookaside Buﬀers (TLBs).
LAZARUS removes kernel addresses from the page table hierarchy upon
user space execution. Hence, the respective TLB entries need to be invalidated.
As a result, subsequent accesses to kernel memory will be slower, once kernel
execution is resumed.
To minimize these perfomance penalties, we have to reduce the amount of
invalidated TLB entries to a minimum but still enforce a clear separation between
kernel and user space addresses. In particular, we only remove those virtual
mappings, which fall into the location of a randomized kernel area, such as the
kernel code segment.
LAZARUS: Practical Side-Channel Resilient
247
4 Prototype Implementation
We implemented LAZARUS as a prototype for the Linux kernel, version 4.8 for
the 64 bit variant of the x86 architecture. However, the techniques we used are
generic and can be applied to all architectures employing multi-level page tables.
Our patch consists of around 300 changes to seven ﬁles, where most of the code
results from initialization. Hence, LAZARUS should be easily portable to other
architectures. Next, we will explain our implementation details. It consists of the
initialization setup, switching mechanism, and how we minimize performance
impact.
4.1 Initialization
We ﬁrst setup a second set of page tables, which can be used when execution
switches to user space. These page tables must not include the randomized por-
tions of the address space that belong to the kernel. However, switching between
privileged and unprivileged execution requires some code in the kernel to be
mapped upon transitions from user space. We explicitly create dedicated entry
points mapped in the user page tables, which point to the required switching
routines.
Fixed Mappings. Additionally, there are kernel addresses, which are mapped to
ﬁxed locations in the top address space ranges. These ﬁxmap entries essentially
represent an address-based interface: even if the physical address is determined at
boot time, their virtual address is ﬁxed at compile time. Some of these addresses
are mapped readable to user space, and we have to explicitly add these entries
as well.
We setup this second set of page tables only once at boot time, before the
ﬁrst user process is started. Every process then switches to this set of page tables
during user execution.
Dummy Mappings. As explained in Sect. 3, one way of protecting the code pages
of the switching mechanism is to insert dummy mappings into the user space
page table hierarchy. In particular, we create mappings for randomly picked
virtual kernel addresses to span the entire code section. We distribute these
mappings in 2M intervals to cover all third-level page table entries, which are
used to map the code section. Hence, the entire address range which potentially
contains the randomized kernel code section will be mapped during user space
execution using our randomly created dummy entries.
4.2 System Calls
There is a single entry point in the Linux kernel for system calls, which is called
the system call handler. We add an assembly routine to execute immediately
after execution enters the system call handler. It switches from the predeﬁned
user page tables to the kernel page tables and continues to dispatch the requested