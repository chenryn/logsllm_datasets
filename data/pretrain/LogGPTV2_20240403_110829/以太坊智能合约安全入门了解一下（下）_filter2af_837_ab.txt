        }
    }
使用 remix-ide 模拟攻击流程：
###  6\. Bad Randomness – 可预测的随机处理
伪随机问题一直都存在于现代计算机系统中，但是在开放的区块链中，像在以太坊智能合约中编写的基于随机数的处理逻辑感觉就有点不切实际了，由于人人都能访问链上数据，合约中的存储数据都能在链上查询分析得到。如果合约代码没有严格考虑到链上数据公开的问题去使用随机数，可能会被攻击者恶意利用来进行
“作弊”。
摘自 DASP 的代码块：
    uint256 private seed;
    function play() public payable {
        require(msg.value >= 1 ether);
        iteration++;
        uint randomNumber = uint(keccak256(seed + iteration));
        if (randomNumber % 2 == 0) {
            msg.sender.transfer(this.balance);
        }
    }
这里 `seed` 变量被标记为了私有变量，前面有说过链上的数据都是公开的，`seed` 的值可以通过扫描与该合约相关的 TX 来获得。获取 `seed`
值后，同样的 `iteration` 值也是可以得到的，那么整个 `uint(keccak256(seed + iteration))`
的值就是可预测的了。
就 DASP 里面提到的，还有一些合约喜欢用 `block.blockhash(uint blockNumber) returns (bytes32)`
来获取一个随机哈希，但是这里切记不能使用 `block.number` 也就是当前块号来作为 `blockNumber` 的值，因为在官方文档中明确写了：
block.blockhash(uint blockNumber) returns (bytes32): hash of the given block –
only works for 256 most recent blocks excluding current
意思是说 `block.blockhash()` 只能使用近 256 个块的块号来获取 Hash 值，并且还强调了不包含当前块，如果使用当前块进行计算
`block.blockhash(block.numbber)` 其结果始终为 `0x0000000.....`：
同样的也不能使用 `block.timestamp`, `now` 这些可以由矿工控制的值来获取随机数。
一切链上的数据都是公开的，想要获取一个靠谱的随机数，使用链上的数据看来是比较难做到的了，这里有一个独立的项目
[Oraclize](https://github.com/oraclize/ethereum-api) 被设计来让 Smart Contract
与互联网进行交互，有兴趣的同学可以深入了解一下。（附上基于 Oraclize 的随机数获取方法
[randomExample](https://github.com/oraclize/ethereum-examples/blob/master/solidity/random-datasource/randomExample.sol)）
###  7\. Front Running – 提前交易
“提前交易”，其实在学习以太坊智能合约漏洞之前，我还并不知道这类漏洞类型或者说是攻击手法（毕竟我对金融一窍不通）。简单来说，“提前交易”就是某人提前获取到交易者的具体交易信息（或者相关信息），抢在交易者完成操作之前，通过一系列手段（通常是提高报价）来抢在交易者前面完成交易。
在以太坊中所有的 TX 都需要经过确认才能完全记录到链上，而每一笔 TX 都需要带有相关手续费，而手续费的多少也决定了该笔 TX
被矿工确认的优先级，手续费高的 TX 会被优先得到确认，而每一笔待确认的 TX
在广播到网络之后就可以查看具体的交易详情，一些涉及到合约调用的详细方法和参数可以被直接获取到。那么这里显然就有 Front-Running
的隐患存在了，示例代码就不举了，直接上图（形象一点）：
在 [etherscan.io](https://etherscan.io/txsPending) 就能看到还未被确认的 TX，并且能给查看相关数据：
**（当然了，为了防止信息明文存储在 TX 中，可以对数据进行加密和签名）**
###  8\. Time Manipulation
“时间篡改”（DASP 给的名字真抽象 XD），说白了一切与时间相关的漏洞都可以归为 “Time Manipulation”。在 Solidity
中，`block.timestamp` （别名 `now`）是受到矿工确认控制的，也就是说一些合约依赖于 `block.timestamp`
是有被攻击利用的风险的，当攻击者有机会作为矿工对 TX 进行确认时，由于 `block.timestamp`
可以控制，一些依赖于此的合约代码即预知结果，攻击者可以选择一个合适的值来到达目的。（当然了 `block.timestamp`
的值通常有一定的取值范围，出块间隔有规定 XD）
该类型我还没有找到一个比较好的例子，所以这里就不给代码演示了。:)
###  9\. Short Address Attack – 短地址攻击
在我着手测试和复现合约漏洞类型时，短地址攻击我始终没有在 remix-ide
上测试成功（道理我都懂，咋就不成功呢？）。虽然漏洞没有复现，但是漏洞原理我还是看明白了，下面就详细地说明一下短地址攻击的漏洞原理吧。
首先我们以外部调用 `call()` 为例，外部调用中 `msg.data` 的情况：
在 remix-ide 中部署此合约并调用 `callFunc()` 时，可以得到日志输出的 `msg.data` 值：
    0x4142c000000000000000000000000000000000000000000000000000000000000000001e
其中 `0x4142c000` 为外部调用的函数名签名头 4
个字节（`bytes4(keccak256("foo(uint32,bool)"))`），而后面 32 字节即为传递的参数值，`msg.data` 一共为
4 字节函数签名加上 32 字节参数值，总共 `4+32` 字节。
看如下合约代码：
    pragma solidity ^0.4.10;
    contract ICoin {
        address owner;
        mapping (address => uint256) public balances;
        modifier OwnerOnly() { require(msg.sender == owner); _; }
        function ICoin() { owner = msg.sender; }
        function approve(address _to, uint256 _amount) OwnerOnly { balances[_to] += _amount; }
        function transfer(address _to, uint256 _amount) {
            require(balances[msg.sender] > _amount);
            balances[msg.sender] -= _amount;
            balances[_to] += _amount;
        }
    }
具体代币功能的合约 ICoin，当 A 账户向 B 账户转代币时调用 `transfer()` 函数，例如 A
账户（0x14723a09acff6d2a60dcdf7aa4aff308fddc160c）向 B
账户（0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db）转 8 个 ICoin，`msg.data` 数据为：
    0xa9059cbb  -> bytes4(keccak256("transfer(address,uint256)")) 函数签名
    0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2db  -> B 账户地址（前补 0 补齐 32 字节）
    0000000000000000000000000000000000000000000000000000000000000008  -> 0x8（前补 0 补齐 32 字节）
那么短地址攻击是怎么做的呢，攻击者找到一个末尾是 `00` 账户地址，假设为
`0x4b0897b0513fdc7c541b6d9d7e929c4e5364d200`，那幺正常情况下整个调用的 `msg.data` 应该为：
    0xa9059cbb  -> bytes4(keccak256("transfer(address,uint256)")) 函数签名
    0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200  -> B 账户地址（注意末尾 00）
    0000000000000000000000000000000000000000000000000000000000000008  -> 0x8（前补 0 补齐 32 字节）
但是如果我们将 B 地址的 `00` 吃掉，不进行传递，也就是说我们少传递 1 个字节变成 `4+31+32`：
    0xa9059cbb  -> bytes4(keccak256("transfer(address,uint256)")) 函数签名
    0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2  -> B 地址（31 字节）
    0000000000000000000000000000000000000000000000000000000000000008  -> 0x8（前补 0 补齐 32 字节）
当上面数据进入 EVM 进行处理时，会犹豫参数对齐的问题后补 `00` 变为：
    0xa9059cbb
    0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200
    0000000000000000000000000000000000000000000000000000000000000800
也就是说，恶意构造的 `msg.data` 通过 EVM 解析补 0 操作，导致原本 `0x8 = 8` 变为了 `0x800 = 2048`。
上述 EVM 对畸形字节的 `msg.data` 进行补位操作的行为其实就是短地址攻击的原理（但这里我真的没有复现成功，希望有成功的同学联系我一起交流）。
短地址攻击通常发生在接受畸形地址的地方，如交易所提币、钱包转账，所以除了在编写合约的时候需要严格验证输入数据的正确性，而且在 Off-Chain
的业务功能上也要对用户所输入的地址格式进行验证，防止短地址攻击的发生。
同时，老外有一篇介绍 [Analyzing the ERC20 Short Address
Attack](https://ericrafaloff.com/analyzing-the-erc20-short-address-attack/)
原理的文章我觉得非常值得学习。
###  – Unknown Unknowns – 其他未知，:) 未知漏洞，没啥好讲的，为了跟 DASP 保持一致而已
## III. 自我思考
前后花了 2 周多的时间去看以太坊智能合约相关知识以及本文（上/下）的完成，久违的从 0 到 1
的感觉又回来了。多的不说了，我应该也算是以太坊智能合约安全入门了吧，近期出的一些合约漏洞事件也在跟，分析和复现也是完全 OK
的，漏洞研究原理不变，变得只是方向而已。期待同更多的区块链安全研究者交流和学习。
###  1\. 以太坊中合约账户的私钥在哪？可以不通过合约账户代码直接操作合约账户中的 Ether 吗？
StackExchange 上有相关问题的回答 [“Where is the private key for a contract
stored?”](https://ethereum.stackexchange.com/questions/185/where-is-the-private-key-for-a-contract-stored)，但是我最终也没有看到比较官方的答案。但可以知道的就是，合约账户是由部署时的合约代码控制的， **不确定是否有私钥可以直接控制合约进行
Ether 相关操作** （讲道理应该是不行的）。
###  2\. 使用 keccak256() 进行函数签名时的坑？- 参数默认位数标注
在使用 keccak256 对带参函数进行签名时，需要注意要严格制定参数类型的位数，如：
    function somefunc(uint n) { ... }
对上面函数进行签名时，定义时参数类型为 `uint`，而 `uint` 默认为 256 位，也就是 `uint256`，所以在签名时应该为
`keccak256("somefunc(uint256)")`，千万不能写成 `keccak256("somefunc(uint)")`。
## 参考链接
  * 
  * 
  * 
## 关于我们
0Kee
Team隶属于360信息安全部，360信息安全部致力于保护内部安全和业务安全，抵御外部恶意网络攻击，并逐步形成了一套自己的安全防御体系，积累了丰富的安全运营和对突发安全事件应急处理经验，建立起了完善的安全应急响应系统，对安全威胁做到早发现，早解决，为安全保驾护航。技术能力处于业内领先水平，培养出了较多明星安全团队及研究员，研究成果多次受国内外厂商官方致谢，如微软、谷歌、苹果等，多次受邀参加国内外安全大会议题演讲。目前主要研究方向有区块链安全、WEB安全、移动安全（Android、iOS）、网络安全、云安全、IOT安全等多个方向，基本覆盖互联网安全主要领域。