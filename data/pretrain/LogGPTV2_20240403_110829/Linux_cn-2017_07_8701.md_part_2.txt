一个 Jenkins 任务定义了一系列不间断的操作。如果你跟随本篇引导的话，那么你可以使用我已经在 GitHub 上为你准备了一个 Android 练习项目，你可以使用这个来试试手。它只是一个多模块的 app，带有单元测试、Android 测试，包括 JaCoCo、SonarQube 插件。
* [pamartineza/helloJenkins](https://github.com/pamartineza/helloJenkins)
首先创建一个新的 Freestyle 任务项目，取名为 `Hello_Android`。不要在名字中使用空格，这样可以避免与 SonarQube 不兼容的问题。
![](/data/attachment/album/201707/16/211719vpgiwugzrt0ueiti.png)
*创建一个 Freestyle Jenkins 任务*
接下来就是配置了，我给每一部分都做了截屏。
**概况**
这部分比较繁琐，你可以在这里变更任务的名字、增加简介。如果你使用 GitHub 项目，你还可以写下项目的 URL（不要 \*.git，这是 url 的部分，不是仓库的）。
![](/data/attachment/album/201707/16/211720mm6qrlkrefl5lf1w.png)
*项目 Url 配置*
**源代码管理**
这时候我们就要选择我们的 CVS 作为 Git，并且增加仓库的 url（这次就要包括 \*.git）然后选择分支拉取。因为这是一个公开的 GitHub 仓库，我们就不需要提交证书了，否则的话就要设置账号和密码。
相比于使用你的带有完全权限的公开仓库，我更倾向于为你的私有库创建一个新的只读用户来专门配给 Jenkins 任务使用。
另外，如果你已经使用了双因子认证，Jenkins 就无法拉取代码，所以为 Jenkins 专门创建一个用户可以直接从私有库中拉取代码。
![](/data/attachment/album/201707/16/211721y5gkmu3epszkkskq.png)
*配置仓库*
**构建触发器**
你可以手动开始构建，也可以远程地、周期性地、或者在另一个任务构建完成之后开始构建，只要这些改变可以被检测到。
最好的情况肯定是一旦你更改了某些地方，就会立刻触发构建事件，Github 为此提供了一个名叫 webhooks 的系统。
* [Webhooks | GitHub 开发者指南](https://developer.github.com/webhooks/)
这样，我们就可以配置来发送这些事件到 CI 服务器，然后触发构建。显然，我们的 CI 服务器必须要联网，并且可以与 GitHub 服务器通信。
你的 CI 服务器也许为了安全只限于内网使用，那么解决办法就只有集中周期性的提交。我就是只有工作时才打开 CI，我把它设置为每十五分钟轮询一次。轮询时间可以通过 CRON 语法设置，如果你不熟悉，请点击右侧的帮助按钮获取带有例子的丰富文档。
![](/data/attachment/album/201707/16/211723aypaezokabj2m2o3.png)
*仓库轮询配置*
**构建环境**
这里我推荐设置构建超时来避免 Jenkings 占用内存和 CPU ，毕竟有时候有意外发生。当然，你还可以插入环境变量和密码等等。
![](/data/attachment/album/201707/16/211725hky62fkzdmoohrd2.png)
*构建超时*
**构建**
现在是见证魔法的时刻了，增加一个 Build 步骤，引入 Gradle 脚本，选择 Gradle Wrapper (默认情况下，Android 项目带有 Gradle Wrapper，不要忘记把它检入到 Git ），然后定义你要执行哪些任务：
1. clean：清除之前构建的所有历史输出，这样可以确保没有东西缓存，从头构建。
2. asseembleDebug： 生成调试 .apk 文件。
3. test：在所有模块上执行 JUnit 测试。
4. connectedDebugAndroidTest：在连接到 CI 的实体机上执行安卓测试单元（也可以使用安装了安卓模拟器的 Jenkins 插件，但是它不支持所有型号，而且相当麻烦）。
![](/data/attachment/album/201707/16/211727cpge6fo4w87a4eez.png)
*配置 Gradle*
**构建后操作**
我们将要增加“发布 JUnit 测试报告”，这一步由 JUnit 插件提供，其搜集由 JUnit 测试结果生成的 XML 文件，它会生成漂亮的图表来按时间展示测试结果。
我们 app 模块中，测试运行结果的路径是： `app/build/test-results/debug/*.xml`。
在多模块项目中，其它的“纯” Java 模块中测试结果在这里：`*/build/test-results/*.xml`。
![](/data/attachment/album/201707/16/211729ox1fefykkt3nnnnj.png)
还要增加“记录 JaCoCo 覆盖率报告”，它要创建一张显示代码覆盖率的图表。
![](/data/attachment/album/201707/16/211731ii1h3tf6hzht6g96.png)
#### 运行 Jenkins 任务
只要有任何改变提交到仓库，我们的测试任务将每十五分钟执行一次，但是如果你不想等的话，或者你只是想验证一下配置的改变，你也可以手动运行。单击“现在构建”按钮，当前的构建将出现在构建历史中，点击它可以查看细节。
![](/data/attachment/album/201707/16/211735x87npzpocyvjn7og.png)
*手动执行任务*
最有趣的部分是控制台输出，你可以看到 Jenkins 是如何拉取代码并执行我们之前定义的 Gradle 项目，例如 clean。
![](/data/attachment/album/201707/16/211739zw8om2r8ae0jr2ej.png)
*控制台输出的开始部分*
如果一切都正常的话，控制台将会有如下输出 (任何仓库连接问题，单元测试或 Android 测试的失败都将导致构建失败)。
![](/data/attachment/album/201707/16/211743rq7zgxyoiwxg2qal.png)
*哈哈哈哈，构建成功，测试结果符合预期*
### 第五步－SonarQube
这部分我会讲讲如何安装、配置 SonarQube ，并配以使用 Docker 作为容器的 MySQL 数据库。
* [Continuous Code Quality | SonarQube](https://www.sonarqube.org/)
SonarQube 是个代码静态分析工具，它可以帮助开发者写出干净的代码、检测错误和学习最佳体验。它还可以跟踪代码覆盖、测试结果、功能需求等等。SonarQube 检测到的问题可以使用插件十分容易的导入到 Android Studion/IntelliJ 中去。
* [JetBrains Plugin Repository :: SonarQube Community Plugin](https://plugins.jetbrains.com/idea/plugin/7238-sonarqube-community-plugin)
#### 安装 Docker
安装 Docker 十分容易，按照下面的教程即可：
* [在 Ubuntu 上安装 Docker](https://docs.docker.com/engine/installation/linux/ubuntulinux/)
#### 生成容器
**MySQL**
我们先搭建一个 MySQL5.7.17 服务器容器，命名为 `mysqlserver`，它将在开机引导时启动，带有一个在你的家目录下的本地卷，带有密码，服务暴露在 localhost:3306 上（把命令中的 `YOUR_USER` 和 `YOUR_MYSQL_PASSWORD` 替换为你自己账号密码）。
```
$ docker run --name mysqlserver --restart=always -v /home/YOUR_USER/mysqlVolume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=YOUR_MYSQL_PASSWORD -p 3306:3306 -d mysql:5.7.17
```
**phpMyAdmin**
想要优雅简单地管理 MySQL服务器，我强烈推荐 phpMyAdmin。你只要建立个容器，命名为 `phpmyadmin`，然后链接到我们的 `mysqlserver` 容器，它会在开机引导时启动，它暴露在 localhost:9090。使用最新的版本。
```
$ docker run --name phpmyadmin --restart=always --link mysqlserver:db -p 9090:80 -d phpmyadmin/phpmyadmin
```
你可以用你的 mysql 密码 `YOUR_MYSQL_PASSWORD` ，以 root 身份登录 localhost:9090 的 phpMyAdmin 界面，并创建一个数据库 sonar，使用`uft8_general_ci` 字符集。此外，也创建一个 sonar 的新用户，密码 `YOUR_SONAR_PASSWORD`，并给它 sonar 数据库的权限。
**SonarQube**
现在我们已经创建好了我们的 SonarQube 容器，就叫 `sonarqube`，它会在机器引导时启动，自动链接搭配我们的数据库，服务暴露在 localhost:9090，使用 5.6.4 版本。
```
$ docker run --name sonarqube --restart=always --link mysqlserver:db -p 9000:9000 -p 9092:9092 -e "SONARQUBE_JDBC_URL=jdbc:mysql://db:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance" -e "SONARQUBE_JDBC_USER=sonar" -e "SONARQUBE_JDBC_PASSWORD=YOUR_SONAR_PASSWORD" -d sonarqube:5.6.4
```
#### 配置 SonarQube
如果一起都正常，你将在 localhost:9000 看到如下页面：
![](/data/attachment/album/201707/16/211745wxq0a4vw9xi41vva.png)
好了，让我们来配置必要的插件和基本的配置文件：
1. 在页面的右上角可以登录（默认的管理员账号和密码是 admin/admin）。
2. 进入到 Administration，然后点击 System，接下来是 Updata Center，最后是 Updates Only。
	* 如果需要的话，更新 Java 插件。
3. 现在启用，并安装以下插件
	* Android （提供 Android lint 规则）
	* Checkstyle
	* Findbugs
	* XML
4. 返回顶部，点击重启按钮完成整个安装。
#### SonarQube 配置文件
我们刚刚安装的插件可以定义配置文件，可以用一套规则去衡量项目的代码质量。
同一时间一个项目只能使用一个配置文件。但是我们可以定义父配置文件并继承规则，所以要对我们的项目执行所有的规则，我们可以创建定制的配置文件并链状串联所有配置文件。
就这么干，点击 Quality Profiles ，跳转到 Create ，然后命名，比如 CustomAndroidProfile。
将 Android Lint 作为父级，然后选择 Android Lint 配置，增加 FindBugs Security Minial 作为上一级，继续此步骤，直到你完成父级继承方案，并且设置 CustomAndroidProfile 作为默认。
![](/data/attachment/album/201707/16/211747rerj2jkr822qqj4n.png)
*继承链*
#### 运行 Sonarqube 分析器
现在我们的 SonarQube 已经正式配置完毕，我们需要添加一个 Gradle 任务 `sonarqube` 到我们的 Jenkins 任务。我们在最后执行。
![](/data/attachment/album/201707/16/211748wbtt9w1utnhjdnuk.png)
再次运行 Jenkins 任务，一旦运行完毕，我们可以在 localhost:9090 中看到我们的 sonarQube 控制面板。
![](/data/attachment/album/201707/16/211750bumwynhmhsybu8rn.png)
*分析结果的显示*
点击项目名称我们可以进入到不同的显示界面，最重要的可能就是问题界面了。
在下一屏，我将展示一个主要问题，它是一个空构造器方法。就我个人而言，使用 SonarQube 最大的好处就是当我点击“...”时可以在屏幕底部显示解释。这是一个学习编程十分有用的技能。
![](/data/attachment/album/201707/16/211753wc2sv9jbc49rh69z.png)
### 第六步 附加：配置其他 Android 应用
想要配置 Android 应用得到覆盖率和 sonarqube 的结果，只要安装 JaCoCo 和 Sonarqube 插件就可以了。你也可以在我的示例中得到更多信息
* [pamartineza/helloJenkins](https://github.com/pamartineza/helloJenkins)
你也可以看看我在云上测试的文章：
* [使用 Jenkins CI 服务器在云设备上运行 Android 测试](https://pamartinezandres.com/running-android-tests-on-cloud-devices-using-a-jenkins-ci-server-firebase-test-lab-amazon-device-b67cb4b16c40)
### 最后
啊，你终于走到头了，希望你觉得本文有点用处。你要是发现了任何错误，有任何疑问，别迟疑，赶紧评论。我拼了老命也要帮你。哦，忘了提醒，好东西要和朋友分享。
---
作者简介：
![](/data/attachment/album/201707/16/211753j87zhvi9926ti432.jpg)
Entrepreneur & CEO at GreenLionSoft · Android Lead @MadridMBC & @Shoptimix · Android, OpenSource and OpenData promoter · Runner · Traveller
---
via: 
作者：[Pablo A. Martínez](https://medium.com/@pamartineza) 译者：[Taylor1024](https://github.com/Taylor1024) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出