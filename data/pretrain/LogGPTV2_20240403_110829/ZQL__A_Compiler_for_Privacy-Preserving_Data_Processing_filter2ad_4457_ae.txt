(R: (int pub ∗ int) table) // time, reading
(T: (int ∗ int) lookuptable) = // reading, fee
↓ (sum ((time, reading) →lookup reading T) R)
The query looks up the non-linear price of each reading
in the table T using lookup and sums the results.
USENIX Association  
22nd USENIX Security Symposium  173
11
Another popular application in the literature involves
pay-as-you-drive insurance schemes. Such schemes re-
quire drivers to ﬁt a black box in their car that records
their driving habits, and allow the insurer to compute a
premium based on the safety of the driving, as well as
distance or time. The use of zero-knowledge protocols
to support such automotive settings, including road us-
age billing and tolling has been well established in the
literature [5, 61, 44].
An example policy used by a UK auto insurance pi-
lot scheme involves recording the segment of road trav-
elled, the distance and the speed and use those to sub-
tract “points” from a virtual driving license. Points are
linked to the magnitude of speed violations on the road
segments travelled. The insurance rate per mile is then
computed as a function of the points subtracted, up to
a threshold where the insurance becomes invalid. We
can express such a policy in ZQL using a table for the
recorded road segments used, and lookup tables to en-
code the speed limit of road segments, the penalty points
per magnitude of violation, and ﬁnally the insurance pre-
mium for a certain number of points:
let pay as you go
(Segments : (int ∗ int ∗ int ∗ int) table)
(Limits : (int ∗ int) lookuptable )
(Penalties : (int ∗ int) lookuptable )
(Rates : (int ∗ int) lookuptable ) =
let points =
sum ((time, road, speed, miles) →
let limit = lookup road Limits
lookup (speed − limit) Penalties) Segments
let rate = lookup points Rates
let miles =
sum ((time, road, speed, miles) →miles) Segments
↓ (miles ∗ rate)
The pay as you go application makes extensive use of
lookup tables to simulate traditional database half-joins
between tables. The values of these tables are largely ar-
bitrary and related to the insurance policy. We note that
to fully secure this insurance mechanism, some informa-
tion about the start and end times of the segments must
also be signed by the black box and veriﬁed to avoid ma-
licious replays or omissions. We also note that, depend-
ing on policies, the query leaks information from indi-
vidual secret inputs to the computed premium. Securing
against source query leakage is beyond the remit of ZQL,
but could be achieved by adapting differentially private
schemes [36].
The ﬁnal example illustrates how ZQL lookups can be
used to approximate functions on real numbers. A very
common problem in privacy preserving protocols for lo-
cation based services is to prove that the reading from a
trusted sensor is at a certain distance from a speciﬁc loca-
tion. For example privacy friendly theft prevention sys-
tem may need to periodically prove that a trusted reading
is within a certain distance from their (secret) home lo-
cation [56]. Similar protocols can be of use for offender
monitoring, curfew enforcement or tracking of trucks of
goods. Previous work has proposed zero-knowledge dis-
tance protocols, such as [15].
The gps distance protocol takes as secret inputs the
longitude and latitude of two points, as well as some
precomputed tables, and returns an approximation of the
distance between the two points in meters. The approxi-
mation used works for small distances under the assump-
tion that the curvature of the earth is negligible. It still
requires the computation of the trigonometric function
cos(x/2). To achieve this, we assume the input longitude
and latitudes are in the units rad/105, and that interme-
diate computations are precise to two decimal points.
let gps distance (lat1: int) (lon1: int) (lat2: int) (lon2: int)
(hcos: (int ∗ int) lookuptable )
(red: (int ∗ int) lookuptable)
(dist: (int ∗ int) lookuptable) =
let latsum = lat1 + lat2
// Table: hcos(x) = round(cos((x)/2· 105)· 102)
let hc = lookup latsum hcos
let dlat = lat2 − lat1
let dlon = lon2 − lon1
let lon cos = dlon ∗ hc
// Table: red(x) = round(x/102)in(rad/105)2
let r2 = lookup lon cos red
let squares = dlat∗dlat + r2
// Table: dist(x) =round( √x· R/105)
// where R is earth’s radius (meters).
↓ (lookup squares dist)
In this example, lookups are used to approximate real
functions, including trigonometric functions and division
which is not yet natively supported. The hcos table has a
large domain (∼ 1 million items) but can be reused across
multiple operations. Other tables have a relatively small
domain related to the distances of the points compared.
8 Discussion
Prototype implementation & limitations Our com-
piler uses the language development and testing facili-
ties of F#: we program source queries as (a small sub-
set of) F#, then extract the ZQL abstract syntax tree
(AST) through reﬂection. The compilation pipeline per-
forms ZQL type-checking, applies the shared translation,
and ﬁnally produces the data-source, prover and veriﬁer
code. Each of these steps operates on well-typed ZQL
expressions. This enables us to share many optimizations
as ZQL-to-ZQL transformations.
Besides standard optimizations, the compiler supports
a more general variant of lookup primitive, named ﬁnd,
that returns any lookup-table row that meets a condition
expressed as a boolean expression on the whole content
174  22nd USENIX Security Symposium 
USENIX Association
12
of the row. This provides more ﬂexibility on the use of
lookup tables, but its compilation is more complex.
In addition to cryptographic code, ZQL also synthe-
sizes a custom marshaller and un-marshaller for the cryp-
tographic evidence and results of the query. Following
the ZQL approach, this code is specialized and compiled
for a speciﬁc proof. Hence, the size and location of all
ﬁelds, parametrized on the input table lengths, in known
at compile time and there is no need to rely on a general-
purpose parser, a component that is traditionally a source
of security ﬂaws.
We support three distinct compiler back-ends:
Concrete F# The main branch of the compiler trans-
forms and compiles the ﬁnal ZQL data source, prover
and veriﬁer into F# code, linked either to the standard
.NET big integer libraries, or to proprietary managed li-
braries that support pairing based cryptography.
Symbolic F# The second branch of the compiler is
linked against symbolic execution libraries for all the op-
erators and primitives. Interestingly, since the F# branch
makes extensive use of abstract types in the ﬁnal prover
and veriﬁer, there is no need to write a separate symbolic
execution environment: the mathematical functions can
simply be replaced with equivalents computing on sym-
bolic polynomials. The resulting code jointly computes
the execution time and the proof size, as polynomial ex-
pressions of the input lengths and the unit costs of each
cryptographic operation. We use symbolic execution to
predict the performance of the compiler, and hope to use
it in the future to chose between alternative optimization
strategies at compile time.
Concrete C++ Finally, we support compilation of the
veriﬁer to native C++ code, linked with high perfor-
mance native big integer libraries. This branch in-
volves transforming the functional ZQL veriﬁer and un-
marshaller code into an imperative program and optimiz-
ing it using standard low-level techniques such as remov-
ing dead code, removing spurious copies, and minimiz-
ing memory re-allocations. The resulting native program
takes a proof as an input, and outputs the veriﬁed result.
The native branch does not support on-the-ﬂy compila-
tion and execution, and currently works for RSA groups
only. Yet the resulting binary can be easily deployed
where .NET runtimes are not available.
The process of compiling a query remains fast even on
small devices. Thus, a service could simply send ZQL
queries to the user, to be reviewed, compiled, then ex-
ecuted locally. To this end, our compiler also has an
API that takes source ZQL ASTs, compiles them to F#,
then also compiles and dynamically load the resulting F#
code. This is likely to be faster, cheaper, safer and more
reliable than providing custom binaries every time the
query is updated.
The prototype compiler is still subject to limitations.
For instance, some optimizations, such as moving de-
classiﬁcations up in the dataﬂow to minimize the size of
the Σ-protocol, or batching some exponential computa-
tions, could be systematically applied.
Performance Evaluation Table 1 illustrates the per-
formance of ZQL code for the three applications pre-
sented in Section 7. It provides the execution time for the
F# provers and veriﬁers, as well as the size of the proof,
for different security parameters of RSA (1024 bits, 2048
bits) and the pairing based cryptography over a 254 bits
Barreto-Naehrig curve (BN254). The smart meter bill
readings table is of size (cid:31)read = 5 and the pay as you go
query road segments table is of size (cid:31)seg = 25. This
means that for the 1024 bit RSA branch, the prover can
process a meter reading every ∼ 120mS or a segment
of road every ∼ 360mS. The proof size for the pair-
ing based branch is ∼ 755 bytes per reading and ∼ 1921
bytes per segment. As expected, the pairing based proofs
are more compact than their RSA counterparts for the
same or even higher levels of security: a 254 bits curve
provides about 128 bits of security which would corre-
spond to a 3072 bits RSA modulus.1 This is further ag-
gravated by the lack of tightness in RSA-based security
reductions [8]. Prover timings take into account the gen-
eration of random numbers. We note that these numbers,
while slow by the standards of non-privacy friendly com-
putation, are perfectly adequate for computing bills and
insurance premiums in real time.
Besides the main F# backend we experimented with
a C++ back-end that compiles to a native veriﬁer. Al-
though more performant in absolute terms, the native
veriﬁer is not signiﬁcantly faster than its F# counterpart.
The RSA 1024 bit computation of the pay as you go ver-
iﬁer took 4,290mS as compared with the F# backend us-
ing native big integer binding that took 5,111mS. Pro-
ﬁling the C++ execution indicates that more than 90%
of the time is spent inside the modular multiplication
function performing exponentiations. Thus, improving
the performance of ZQL comes down to either faster ex-
ponentiations (through batching, multi-exponentiation or
hardware) or reducing the number of operations required
through more aggressive simpliﬁcation of the protocols.
Finally, table 1 illustrates the output of the symbolic
execution engine on these three applications, in a conﬁg-
uration that measures the number of exponentiations (E),
pairings ( ˆe), and signature veriﬁcation operations (sigv)
in terms of the length of the input tables ((cid:31)read and (cid:31)seg),
and ignore all other costs.
Where next? The current ZQL language is subject to
some intrinsic limitations, and we are actively exploring
options to overcome them.
1http://www.cryptopp.com/wiki/Security_Level
USENIX Association  
22nd USENIX Security Symposium  175
13
Examples (branch)
smart meter bill (1024)
smart meter bill (2048)
smart meter bill (BN254)
smart meter bill (symbolic)
pay as you go (1024)
pay as you go (2048)
pay as you go (BN254)
pay as you go (symbolic)
gps dist (1024)
gps dist (2048)
gps dist (BN254)
gps dist (symbolic)
prover (mS)
586
3,498
1,374
E + 16· E· (cid:30)read+
6· (cid:30)read · ˆe
5,314
32,442
8,305
15· E + 40· E· (cid:30)seg+
12· (cid:30)seg · ˆe + 6· ˆe
501
3,017
841
60· E + 18· ˆe
veriﬁer (mS)
599
3,148
2,092
6· E + 14· E· (cid:30)read+
8· (cid:30)read · ˆe + sigv
5,111
30,859
12,261
29· E + 35· E· (cid:30)seg+
16· (cid:30)seg · ˆe + 8· ˆe + sigv
529
2,889
1,253
71· E + 24· ˆe + 4· sigv
proof size (Bytes)
6,106
10,585
3,773
67 +|h| +|sig| + 2· (cid:30)Ga+
(cid:30)Ga · (cid:30)read + 22· (cid:30)read+
2· (cid:30)read · q + num + 7· q
57,368
100,099
28,819
167 +|h| +|sig| + 6· (cid:30)Ga+
4· (cid:30)Ga · (cid:30)seg + 56· (cid:30)seg+
8· (cid:30)seg · q + num + 23· q
5044
8629
2751
233 +|h| + 4·|sig|+
10· (cid:30)Ga + 33· q
Table 1: Performance for our three applications: runtime, and communicated proof sizes. The smart meter bill readings table is
of size (cid:30)read = 5, the pay as you go query road segments table is of size (cid:30)seg = 25, the gps distance is between two points.