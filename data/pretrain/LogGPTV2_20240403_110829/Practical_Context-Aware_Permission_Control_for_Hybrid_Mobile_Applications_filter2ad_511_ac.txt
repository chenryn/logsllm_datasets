picture capturing functionality. The permissions are speciﬁed in terms of the
labels (e.g. CAMERA) that give permission to access a particular resource (e.g.
device’s camera).
Our design also supports ﬁner-grained permission speciﬁcation, i.e., at the
level of speciﬁc APIs instead of speciﬁc resources. However, specifying such ﬁner
policies must be done sensibly, as it increases bookkeeping and needs better
understanding of the APIs by the user, and therefore could potentially break
existing interactions if policies are speciﬁed incorrectly.
3.3 Application Lifecycle in MobileIFC
Figure 3 shows a typical life cycle of an application. The user ﬁrst registers
with the MobileIFC framework by providing his mandatory privacy policies spe-
ciﬁc to his sensitive data and resources. For example, he can specify that his
contact list should never be shared with any external entity. The developer of
an application decides on the structure of the chunks for that application and
during the application’s deployment on MobileIFC, he speciﬁes the information
required by each chunk and the external entity a particular chunk needs to com-
municate with. MobileIFC uses this information to generate the manifest for
the application. As shown in the ﬁgure, a manifest is basically a speciﬁcation
of the application’s external communications (irrespective of the chunks) along
with the user’s data that is shared for each communication. This manifest needs
to be approved by the user before the application is installed for the user. Ad-
ditionally, the MobileIFC platform ensures that all of the application’s chunks
comply with the user’s mandatory privacy policies and the manifest approved
by the user. For any context-aware policies, the context is resolved at runtime
and associated conditions are veriﬁed before any access is granted.
3.4 The Banking Application on MobileIFC
To illustrate the application design within MobileIFC, let us revisit our bank-
ing application introduced in Section 2.2. To satisfy the user’s privacy require-
ments, two conditions should be fulﬁlled: (1) no banking data should be shared
with Google; and (2) user’s contact list should be kept private.
In the current application design, the application can freely leak any content
it possesses to any external entity after it has the INTERNET permission. Even if
the external entities are restricted to only bank.com and Google, the application
would be able to pass all information about the user, including the details of his
bank account and his check images, to Google (see Figure 1(a)). Moreover, his
contact list can be shared with bank.com.
The division of an application into multiple chunks allows the application
writer to develop diﬀerent functionality within an application that relies on dif-
ferent pieces of the user information. In the MobileIFC framework, the banking
application would be split into three chunks as shown in Figure 1(b). Chunk
C1 can only communicate with bank.com and has access to its login informa-
tion (such as userid and password). Additionally, it also receives check images
taken from the device’s camera. Chunk C2 has no access to any of the banking
information and interacts with Google using the user’s current geolocation to
produce a map of the bank’s locations nearest to the user. Chunk C3 has access
to user’s contact list, but does not communicate with any external entity.
Since chunk C2 is given access to user’s geolocation information, this is the
only information it can communicate to an external entity. Moreover, it is re-
stricted to communicating only with Google. As per basic information ﬂow-
control rules, information can ﬂow from a less restricted to a more a restricted
chunk, thereby allowing one-way communication from C2 to C1. As a result, C2
can pass a user’s selected branch location on the map to C1, which, in turn, uses
the selection to show the local information of that branch. Since C3 cannot com-
municate with any external entity, it cannot leak any information outside the
MobileIFC framework. This enables C3 to receive any information from other
chunks as well as any additional user content such as the contact list.
In additional to the security beneﬁts provided by MobileIFC, its design also
supports graceful degradation to partial usability for the applications. Taking the
case of our banking application, a user can decide not to share his geolocation
with Google by not approving that part of the manifest. This would not impact
bank.com
google.com
C1
C2
C3
ADsafe object
Application
Manifest
User approved
Application
Manifest
Policy 
Manager
User Policies
User data
Proxy Engine
(Policy Enforcement)
MobileIFC 
Framework
Hybrid Framework (PhoneGap)
Fig. 4: High-level view of MobileIFC implementation.
the core banking functionality of the application and if designed for graceful
degradation, it would only partially impact the overall user experience.
4
Implementation
One of the goals of our implementation is to require minimum changes to the
mobile user experience and minimum eﬀorts from the application developers.
From the user’s perspective, the only new requirement of MobileIFC is to attach
privacy policies to his sensitive data and device’s resources. If the user opts
not to provide such mandatory policies (before application installation and/or
at runtime), MobileIFC still defaults to the install time-approval model even
though it can be more ﬁne-grained than the current permission models. For
application developers, the additional eﬀort means that the application has to
be structured into chunks along security-relevant boundaries, instead of strict
functionality boundaries.
In view of the aforementioned goals, MobileIFC’s implementation comple-
ments the PhoneGap framework to include several new features and functional-
ity. First, it provides an interface for users to specify their ﬁne-grained, context-
aware privacy policies and also enable them to modify these policies even after
application installation. The policies can be made applicable to one or more
applications. Second, the implementation extends the support for application
manifests by enabling application to include ﬁne-grained requirements. Note
that the extended manifest ﬁle is parsed by MobileIFC and not by the underly-
ing OS and hence no changes are needed in the OS. Third, it provides tools to
reﬁne and merge user policies and application manifests. Finally, it provides the
platform for application deployment that eﬃciently deploy the chunks, associate
appropriate information ﬂow labels to each chunk based on the user policies and
provides the enforcement layer to provably ensure that communication patterns
of the application always satisfy the chunk labels. The platform also resolves
35.769915 
 -78.599146 
Fig. 5: Context-aware policy example in MobileIFC.
context, such as the device’s location, for administering context-aware policies
by invoking appropriate resource access APIs of the underlying OS.
Figure 4 shows a high level view of our implementation presented in regards
to our running banking example. The application chunks are contained and de-
ployed as individual ADsafe objects to achieve complete isolation between chunks
and to prevent any direct access to the device’s resources. MobileIFC provides
a set of APIs that are exposed to the application chunks to (1) access resources
and (2) support both unidirectional and bidirectional communication among the
chunks. These APIs are available as an add-on library for the application devel-
opers as part of the software development process (e.g. as an eclipse add-on) and
packaged into the PhoneGap framework to be made available to the application
code at runtime. We anticipate that packaging of the application with the hybrid
framework would be done by a trusted party, such as an app store, to prevent
malicious application developers to deploy a modiﬁed hybrid framework.
During the application’s deployment into the app store, the application de-
velopers provide their chunk requirements as part of a manifest ﬁle. For our
implementation, the manifest’s speciﬁcation is build on top of Android’s man-
ifest format to include conditions for specifying ﬁne-grained requirements. For
policy speciﬁcation, we currently provide our own custom language for writing
the privacy policies (see Figure 5 for an example), however, we are in the process
of porting the standard policy language, XACML [28], to specify such policies.
The user can specify his privacy policies in the language using the interfaces
provided by MobileIFC.
At application installation, MobileIFC veriﬁes whether the application re-
quirements detailed in the manifest satisfy the user policies and informs the user
in case of conﬂicts. If the user policies are not marked as mandatory, the user
has the option to resolve the conﬂicts before the application is added. At the
time of approval, the user can selectively choose to prevent certain ﬂows at the
cost of degradation of functionality. The approved ﬂows of the user manifest
are fed to the Policy Manager, which applies the mediation policies into the
Proxy Engine based on the manifest. The users can also modify their policies
using MobileIFC’s interfaces any time after the application’s installation with
the updates being handled by the Policy Manager.
The Policy Manager translates the high-level user policies into low-level,
pluggable deployment of such policies. It creates templates for the policies, where
context-based conditions are speciﬁed as informative variables that need to be
resolved by the Proxy Engine at runtime. In a simplistic representation, the
state-based policy from Section 2.2 would translate into the following:
if VAR ( geolocation . getCurrent Lo c at i on ) == CONST ( Pentagon )
! allow Permissions . CAMERA
This directs the Proxy Engine to resolve the VAR by invoking the PhoneGap API
geolocation.getCurrentLocation and compare it with the CONST Pentagon
that is supplied as part of the high-level policy. The condition is veriﬁed before
access to any API that requires CAMERA permission is provided.
The MobileIFC framework tracks and enforces information ﬂow using a la-
beling system based on existing models [24, 30]; we omit further details in the
paper.
5 Evaluation
The main goals for our evaluation are to determine whether the user’s pri-
vacy policies are actually enforced for an application deployed on MobileIFC and
whether the impact this architecture has on the mobile user and on the appli-
cation developer is acceptable. To determine whether the policy enforcement in
MobileIFC protects the user’s privacy, we modiﬁed our banking application such
that in addition to its normal functionality, it would also try to leak information
by creating diﬀerent attack scenarios. For example, the application would try
to send the bank credentials to google.com. The privacy policies we considered
in our evaluation restricted the communication of banking credentials only to
bank.com, thus these information leaks have to be stopped by MobileIFC. To
determine whether MobileIFC is an attractive approach for the end user, we an-
alyzed the performance impact of its runtime enforcement. Finally, to determine
the impact on the application developer, we analyzed the burden on the devel-
opment process by measuring the amount of code changes necessary to adapt
the application to the MobileIFC platform. In addition to the banking applica-
tion, we also developed a healthcare application (based on Microsoft’s Health
Vault [7]) and a ﬁnancial management application (based on mint.com [8]) to
show the viability of application development in MobileIFC.
5.1 Security Analysis
Our analysis aims to show that MobileIFC prevents applications from leaking
any user information. We tested the ability of our prototype by creating synthetic
exploits that attempt to break out of MobileIFC’s information ﬂow control model
to leak user information. We enhanced the ability of our banking application to
launch these attacks against our prototype; if successful, these attacks would
allow the application to leak information to entities outside the system.
Table 1 shows the results of testing our prototype against a wide range of
these synthetic attacks. In all our experimental tests, MobileIFC successfully pre-
Attack Attack Step
A1 One chunk creating illicit connection to
another chunk
A2
Leaks via the reverse path of a unidi-
rectional inter-chunk communication
Example attack in the
banking application
C3 makes a connection to
C2
C1 leaking credentials to
C2
A3 Chunk retrieves unapproved user infor-
C2 retrieves contact list
mation
A4
Leaks to an unknown external entity
A5
Leaking restricted information to an al-
lowed external entity
C3 leaks contact list to
evil.com
C1 sends credentials to
google.com
Prevented
by Mo-
bileIFC?
√
√
√
√
√
Table 1: Prevention of information leaks against various synthetic attacks.
vented all leaks before the information could be passed outside the system. Our
ADsafe-based containment of chunks and complete mediation of communication
to external entities by MobileIFC contributed to the prevention of A1 and A4.
A2 was prevented by the one-way communication enforcement of MobileIFC. All
access to user data is administered by MobileIFC thus preventing A3. Finally,
the approved external entity for a chunk also determines the input information
it can receive (either from MobileIFC or another chunk). As a result, attack A5
is implicitly prevented at chunk creation.
5.2 Integration Overhead
An application developer tasked with developing hybrid applications for Mo-
bileIFC faces two challenges. First, the application code must be structured into
chunks and, second, the chunks need to be adapted to use MobileIFC’s APIs for
accessing data and resources, or to communicate with each other. The restruc-
turing challenge is tackled to a large degree by existing software development
methods that engineer the code into reusable and maintainable modules. In
other words, current software engineering practices would naturally lead to the