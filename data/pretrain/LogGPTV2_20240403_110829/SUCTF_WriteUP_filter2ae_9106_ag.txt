        m = ""
        for i in range(0, len(cipherText)):
            m += ms[i % keySize][i / keySize]
        return [m, key, totalScore]
    def decryptWithKey(key):
        cipherText = getCipherBytesFromFile("data6")
        m = ""
        keyBytes = []
        for i in range(len(key)):
            keyBytes.append(ord(key[i]))
        for i in range(len(cipherText)):
            byte = ord(cipherText[i]) ^ keyBytes[i % len(key)]
            m += chr(byte)
        return m
    def main():
        cipherText = getCipherBytesFromFile("cipher.txt")
        bestScore = -10000
        bestKey = bestM = ""
        for size in range(1, 50):
            [m, key, score] = crackKeyWithSize(size, cipherText)
            if score > bestScore:
                bestScore = score
                bestKey = key
                bestM = m
        print bestKey
        print bestScore
        print bestM
    if __name__ == "__main__":
        main()
###  TNT
####  step 1
1.流量分析,发现全是`SQLMAP`的流量,注入方式为时间盲注。首先写代码把所有的请求URL提取出来(或者用`wireshark`打开`pcpa`文件-导出分组解析结果-为`csv`)
####  step 2
Sqlmap在时间盲注时,最后会使用`!=`确认这个值,所以可以提取出所有带有`!=`的URL,提取出后面的ascii码,使用chr(数字)将其转换为字符
####  step 3
打印出来,会发现一串`BASE64`,`BASE64`有点奇怪,反复分析,发现没有大写`X`,多了符号`.`,当然是把点替换成`X`啦.解码,保存为文件(可以使用`Python`,记得写入的时候使用`open(file,'wb')`
二进制写入模式。)
####  step 4
文件头为`BZ`,应该是个`bzip`文件,把扩展名改成`bz2`,winrar解压(或者直接在linux下用bunzip2解压).`file1`文件头为`xz`的文件头,使用`xz`解压,里面又是一个`gz`格式的`file1`,再解压一次,得到`33.333`文件,文件尾部有`Pk`字样,说明是`zip`,二进制编辑器改文件头为`zip`文件头,解压.改文件头为`rar`,解压得到flag.
    import urllib
    import sys
    import re
    import base64
    f=open('''exm1.pcap''','rb').read()
    pattern=re.compile('''GET /vulnerabilities/sqli_blind/.+HTTP/1.1''')
    lines=pattern.findall(f)
    a=0
    for line in lines:
        raw_line=urllib.unquote(line)
        i=raw_line.find("!=")
        if i>0:
            a=0
            asc=raw_line[i+2:]
            asc=asc[:asc.find(')')]
            sys.stdout.write(chr(int(asc)))
        else:
            a+=1
            if a>10:
                sys.stdout.write('n')
                a=0
    str='QlpoOTFBWSZTWRCesQgAAKZ///3ry/u5q9q1yYom/PfvRr7v2txL3N2uWv/aqTf7ep/usAD7MY6NHpAZAAGhoMjJo0GjIyaGgDTIyGajTI0HqAAGTQZGTBDaTagbUNppkIEGQaZGjIGmgMgMjIyAaAPU9RpoMjAjBMEMho0NMAjQ00eo9QZNGENDI0zUKqflEbU0YhoADQDAgAaaGmmgwgMTE0AGgAyNMgDIGmTQA0aNGg0HtQQQSBQSMMfFihJBAKBinB4QdSNniv9nVzZlKSQKwidKifheV8cQzLBQswEuxxW9HpngiatmLK6IRSgvQZhuuNgAu/TaDa5khJv09sIVeJ/mhAFZbQW9FDkCFh0U2EI5aodd1J3WTCQrdHarQ/Nx51JAx1b/A9rucDTtN7Nnn8zPfiBdniE1UAzIZn0L1L90ATgJjogOUtiR77tVC3EVA1LJ0Ng2skZVCAt+Sv17EiHQMFt6u8cKsfMu/JaFFRtwudUYYo9OHGLvLxgN/Sr/bhQITPglJ9MvCIqIJS0/BBxpz3gxI2bArd8gnF+IbeQQM3c1.M+FZ+E64l1ccYFRa26TC6uGQ0HnstY5/yc+nAP8Rfsim4xoEiNEEZclCsLAILkjnz6BjVshxBdyRThQkBCesQg='.replace('.','X')
    print ''
    print str
    fw=open('file1.bz2','wb')
    fw.write(base64.b64decode(str))
    fw.close()
###  Game
出题人前一段时间沉迷ACM无法自拔，觉得博弈论实在是太有意思了，又觉得作为一名优秀的选手，掌握这些优秀的算法是非常基础的（x，于是就出了这个题。
用到的三个博弈分别为`Bash game`, `Wythoff game` 和 `Nim game`。具体的推导和结论么，都给你名字了还不去查维基百科（x
解题脚本：
    from pwn import *
    import math
    import hashlib
    import string
    p = remote('game.suctf.asuri.org', 10000)
    p.recvuntil('Prove your heart!n')
    def proof(key, h):
        c = string.letters+string.digits
        for x0 in c:
            for x1 in c:
                for x2 in c:
                    for x3 in c:
                        if (hashlib.sha256(key + x0 + x1 + x2 + x3).hexdigest() == h):
                            return x0 + x1 + x2 + x3
    p.recvuntil('sha256(')
    key = p.recv(12)
    p.recvuntil('== ')
    h = p.recvline().strip()
    print key, h
    s = proof(key, h)
    print s
    p.sendline(s)    
    p.recvuntil('Let's pick stones!')
    for i in xrange(20):
        p.recvuntil('===========================================================================')
        p.recvuntil('There are ')
        n = int(p.recvuntil('stones')[:-6])
        p.recvuntil(' - ')
        x = int(p.recvuntil('once')[:-4])
        print n, x
        if (n % (x + 1) == 0):
            p.sendline('GG')
            continue
        else:
            p.sendline(str(n % (x + 1)))
            n -= n % (x + 1)
            while(n > 0):
                p.recvuntil('I pick ')
                g = int(p.recvuntil('!')[:-1])
                p.sendline(str(x + 1 - g))
                n -= x + 1
    print "level 1 pass"
    p.recvuntil('You have 8 chances to input 'GG' to skip this round.')
    for i in xrange(20):
        p.recvuntil('===========================================================================')
        a = 99999
        b = 99999    
        while (a != 0 and b != 0):
            p.recvuntil('Piles: ')
            g = p.recvline().strip().split(' ')
            a, b = int(g[0]), int(g[1])
            print a, b
            if (a == 0):
                p.sendline("%d 1" % b)
                break
            if (b == 0):
                p.sendline("%d 0" % a)
                break
            if (a == b):
                p.sendline("%d 2" % a)
                break
            z = abs(a - b)
            x = min(a, b)
            y = max(a, b)
            maxd = int(z * (1 + math.sqrt(5)) / 2)
            if (maxd  x):
                t = 1
                while True:
                    g = int(t * (1 + math.sqrt(5)) / 2)
                    if (g in (a, b) or (g + t) in (a, b)):
                        break
                    t = t + 1
                if (g == a and g + t == b):
                    p.sendline('GG')
                    print "GG"
                    break
                if (g == a):
                    l = [b - (g + t), 1]
                if (g == b):
                    l = [a - (g + t), 0]
                if (g + t == a):
                    l = [b - g, 1]
                if (g + t == b):
                    l = [a - g, 0]
            else:
                p.sendline('GG')
                print "GG"
                break
            if (l[1] == 0 or l[1] == 2):
                a -= l[0]
            if (l[1] == 1 or l[1] == 2):
                b -= l[0]
            p.sendline("%d %d" % (l[0], l[1]))
    print "level2 pass"
    def xxor(l):
        r = 0
        for i in l:
            r ^= i
        return r
    p.recvuntil('Last one is winner. You have 5 chances to skip.')
    for i in xrange(20):
        print p.recvuntil('===========================================================================')
        r = [99999] * 5
        while (sum(r) != 0):
            p.recvuntil('Piles: ')
            r = p.recvline()
            #print r
            r = map(int, r.strip().split(' '))
            print r
            xor = 0
            for j in xrange(5):
                xor ^= r[j]
            if (xor == 0):
                p.sendline('GG')
                print "GG"
                break
            else:
                for mx in xrange(5):
                    for d in xrange(r[mx] + 1):
                        l = list(r)
                        l[mx] -= d
                        if (xxor(l) == 0):
                            q = [d, mx]
                            break
            p.sendline("%d %d" % (q[0], q[1]))
            r[q[1]] -= q[0]
    print "level3 pass"
    p.interactive()
// 电脑的策略和这个策略是一样的（也没其他策略啊
打下来得到鬼畜的Flag`SUCTF{gGGGGggGgGggGGggGGGggGgGgggGGGGGggggggGgGggggGg}`
###  Padding的秘密
####  step 1
下载附件，修改`secret`后缀为`zip`，发现有`.git`。  
老招数了，通过`git`回溯版本可以拿到源码`SUcrypto.py`和`key.jpg`
####  step 2
分析源码（后为hint1）可知，为`one-time-pad`(一次性密码本加密)相关漏洞。  
一次性密码本多次使用后将存在泄露风险。
即我们可以通过词频分析（工具请自行上gayhub搜索），获得脚本中的密钥key，和所有的tips（nc上的2选项templates）  
此处省略漫长的分析过程。。。。。。
####  step 3
获得了密钥`key：“FL4G is
SUCTF{This_is_the_fake_f14g},guys”`后，通过nc提交得到新的hint：“嘤嘤嘤，flag不在这里，人家说secret里有、东西”
> 这里有大师傅在做题过程中提示会有非预期解，是本人的疏忽，深表歉意
回到`secret`压缩包里有`winrar`注释，一大长串的padding串。转ascii后发现有`09`、`20`、`0D0A`三种字符。结合新hint：有“.”东西，可想到带‘.’的加解密中，最容易想到的摩斯电码。
    09   -> .
    20   -> -    0D0A -> 空格
摩斯电码解密 再hex一下会得到缺了一部分的`flag`。
结合`key.jpg`即可获得`flag`。
###  签到
base32编码，直接解码得到Flag