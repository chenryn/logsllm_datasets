 postgres=# select oid::regclass,(pgstattuple(oid)).* from pg_class where relkind='r' order by free_space desc limit 1 offset 0;
 -[ RECORD 1 ]------+-----------
 oid | pg_rewrite
 table_len | 98304
 tuple_count | 107
 tuple_len | 84992
 tuple_percent | 86.46
 dead_tuple_count | 0
 dead_tuple_len | 0
 dead_tuple_percent | 0
 free_space | 12260
 free_percent | 12.47
 如果浪费的空间太大, 并且确实想回收空间的话, 可以适当的vacuum full; -- vacuum full 会重建表. 特别注意.
 或者使用pg_reorg重组表, 可以减少排他锁的时间.
 http://blog.163.com/digoal@126/blog/static/163877040201411205420775/
PostgreSQL 日常维护和检查
 膨胀索引|不平衡索引的重建,
 postgres=# select oid::regclass,(pgstattuple(oid)).* from pg_class where relkind='i' order by free_space desc limit 1 offset 0;
 -[ RECORD 1 ]------+-------------------------
 oid | pg_depend_depender_index
 table_len | 237568
 tuple_count | 6290
 tuple_len | 150960
 tuple_percent | 63.54
 dead_tuple_count | 1
 dead_tuple_len | 24
 dead_tuple_percent | 0.01
 free_space | 43120
 free_percent | 18.15
 如果浪费的空间太大, 并且确实想回收空间的话. 可以新建同样的索引, 然后删除老的索引, 建索引时可以选择CONCURRENTLY参
数.
PostgreSQL 日常维护和检查
 prevent xid wrapped 的处理, 因为事务ID为32位循环使用的, 所以如果不做处理的话, 会出现数据"disappear"的现象.
 为了防止数据disappear的现象, 数据库的vacuum操作将记录的事务ID改写为FrozenTransactionId, 这个ID视为比所有XID更早的ID.
 src/include/access/transam.h
 /* Special transaction ID values
 *
 * BootstrapTransactionId is the XID for "bootstrap" operations, and
 * FrozenTransactionId is used for very old tuples. Both should
 * always be considered valid.
 *
 * FirstNormalTransactionId is the first "normal" transaction id.
 * Note: if you need to change it, you must change pg_class.h as well.
 */
 #define InvalidTransactionId ((TransactionId) 0)
 #define BootstrapTransactionId ((TransactionId) 1)
 #define FrozenTransactionId ((TransactionId) 2)
 #define FirstNormalTransactionId ((TransactionId) 3)
 #define MaxTransactionId ((TransactionId) 0xFFFFFFFF)
PostgreSQL 日常维护和检查
 和FREEZE动作几个相关参数 :
 autovacuum_freeze_max_age = 1900000000 # maximum XID age before forced vacuum
 # (change requires restart)
 这个参数表示如果表的年龄(pg_class.relfrozenxid)超过autovacuum_freeze_max_age , 即使未设置autovacuum参数, 也将自
动强制对该表执行vacuum freeze . 从而降低表的年龄.
 vacuum_freeze_min_age = 50000000
 这个参数表示vacuum在扫描数据块时, 允许保留的事务ID的年龄, 年龄大于vacuum_freeze_min_age 值的事务ID将被替换
为FrozenXID .
 vacuum_freeze_table_age = 1500000000
 如果表的年龄大于vacuum_freeze_table_age 那么vacuum操作将扫描全表, 因此可用于降低表的年龄, 表的年龄将降到
vacuum_freeze_min_age 设置的值.
PostgreSQL 日常维护和检查
 加深对这几个参数的印象
 digoal=# truncate tbl_freeze_test ;
 TRUNCATE TABLE
 digoal=# insert into tbl_freeze_test select generate_series(1,100000);
 INSERT 0 100000
 digoal=# set vacuum_freeze_min_age=10000000;
 SET
 digoal=# select pg_relation_filepath('tbl_freeze_test');
 pg_relation_filepath
 ----------------------------------------------
 pg_tblspc/66422/PG_9.3_201306121/16384/93056
 (1 row)
PostgreSQL 日常维护和检查
 第一次还没有生成VM文件, 所以如果现在执行vacuum是会扫描全表的.
 pg93@db-172-16-3-150-> ll pg_tblspc/66422/PG_9.3_201306121/16384/93056*
 -rw------- 1 pg93 pg93 3.5M Dec 17 21:46 pg_tblspc/66422/PG_9.3_201306121/16384/93056
 -rw------- 1 pg93 pg93 24K Dec 17 21:46 pg_tblspc/66422/PG_9.3_201306121/16384/93056_fsm
 digoal=# vacuum verbose tbl_freeze_test;
 INFO: vacuuming "postgres.tbl_freeze_test"
 INFO: "tbl_freeze_test": found 0 removable, 100000 nonremovable row versions in 443 out of 443 pages
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.01u sec elapsed 0.01 sec.
 VACUUM
 未生成VM文件前, vacuum进程必须扫描全表.
 vm文件也就是为了减少VACUUM进程扫描开销而设计的.
PostgreSQL 日常维护和检查
 此时的xmin是normal xmin
 digoal=# select min(xmin::text),max(xmin::text) from tbl_freeze_test limit 10;
 min | max
 -----------+-----------
 316732599 | 316732599
 (1 row)
 同时在vacuum后自动生成了vm文件
 pg93@db-172-16-3-150-> ll pg_tblspc/66422/PG_9.3_201306121/16384/93056*
 -rw------- 1 pg93 pg93 3.5M Dec 17 21:46 pg_tblspc/66422/PG_9.3_201306121/16384/93056
 -rw------- 1 pg93 pg93 24K Dec 17 21:46 pg_tblspc/66422/PG_9.3_201306121/16384/93056_fsm
 -rw------- 1 pg93 pg93 8.0K Dec 17 21:46 pg_tblspc/66422/PG_9.3_201306121/16384/93056_vm
PostgreSQL 日常维护和检查
 digoal=# set vacuum_freeze_min_age=0;
 SET
 digoal=# vacuum verbose tbl_freeze_test;
 INFO: vacuuming "postgres.tbl_freeze_test"
 INFO: "tbl_freeze_test": found 0 removable, 0 nonremovable row versions in 0 out of 443 pages
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 VACUUM
 这里执行vacuum时不会扫描任何块, 所以xmin还是normal xid, 没有被改为frozenxid
 digoal=# select min(xmin::text),max(xmin::text) from tbl_freeze_test limit 10;
 min | max
 -----------+-----------
 316732599 | 316732599
 (1 row)
PostgreSQL 日常维护和检查
 digoal=# set vacuum_freeze_table_age = 0;
 SET
 digoal=# vacuum verbose tbl_freeze_test;
 INFO: vacuuming "postgres.tbl_freeze_test"
 INFO: "tbl_freeze_test": found 0 removable, 100000 nonremovable row versions in 443 out of 443 pages
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.03u sec elapsed 0.03 sec.
 VACUUM
 vacuum_freeze_table_age=0的话是告诉VACUUM进程, 如果表的年龄超出0, 要扫描全表. (所以这里就达到目的了)
 digoal=# select min(xmin::text),max(xmin::text) from tbl_freeze_test limit 10;
 min | max
 -----+-----
 2 | 2
 (1 row)
PostgreSQL 日常维护和检查
 空闲时段的人为干预freeze (set vacuum_freeze_table_age = 0; vacuum table; 或者直接执行vacuum freeze tbl; 效果一样), 可
以减少自动触发force whole table vacuum for prevent wrapped xid的概率.
 因为自动触发如果发生在数据库繁忙节点, 会带来较大的IO性能影响.
 查找年龄较老的表, 手工降低年龄.
 digoal=# select age(relfrozenxid),relname from pg_class where relkind='r' order by age(relfrozenxid) desc;
 vacuum freeze tablename;
 vacuum重要性以及如何定制vacuum计划
 http://blog.163.com/digoal@126/blog/static/163877040201412282455978/
 数据"消失"实验
 http://blog.163.com/digoal@126/blog/static/163877040201183043153622/
PostgreSQL 日常维护和检查
 日志文件的维护
 压缩保存
 日志内容的检查
 日志的错误输出
 长SQL
 锁等待
 错误级别的日志
 日志文件查询
 外部表
 http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-CSVLOG
 http://www.postgresql.org/docs/9.3/static/file-fdw.html
PostgreSQL 日常维护和检查
 CREATE TABLE postgres_log
 (
 log_time timestamp(3) with time zone,
 user_name text,
 database_name text,
 process_id integer,
 connection_from text,
 session_id text,
 session_line_num bigint,
 command_tag text,
 session_start_time timestamp with time zone,
 virtual_transaction_id text,
 transaction_id bigint,
 error_severity text,
 sql_state_code text,
 message text,
 detail text,
PostgreSQL 日常维护和检查
 hint text,
 internal_query text,
 internal_query_pos integer,
 context text,
 query text,
 query_pos integer,
 location text,
 application_name text,
 PRIMARY KEY (session_id, session_line_num)
 );
 To import a log file into this table, use the COPY FROM command:
 COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
 导入查询
PostgreSQL 日常维护和检查
 外部表查询
 CREATE EXTENSION file_fdw;
 CREATE SERVER pglog FOREIGN DATA WRAPPER file_fdw;
 CREATE FOREIGN TABLE pglog (
 log_time timestamp(3) with time zone,
 user_name text,
 database_name text,
 process_id integer,
 connection_from text,
 session_id text,
 session_line_num bigint,
 command_tag text,
 session_start_time timestamp with time zone,
 virtual_transaction_id text,
 transaction_id bigint,
PostgreSQL 日常维护和检查
 error_severity text,
 sql_state_code text,
 message text,
 detail text,
 hint text,
 internal_query text,
 internal_query_pos integer,
 context text,
 query text,
 query_pos integer,
 location text,
 application_name text
 ) SERVER pglog
 OPTIONS ( filename '/data/pgdata/pg_root/pg_log/postgresql-2013-12-20_000000.csv', format 'csv' );
PostgreSQL 日常维护和检查
 检查集群是否正常
 检查 standby的延迟(pg_stat_replication)
 PostgreSQL 数据库巡检模板
 http://blog.163.com/digoal@126/blog/static/1638770402014252816497/
练习
 日志记录类型, 日志的处理, 表的维护, 数据的维护.