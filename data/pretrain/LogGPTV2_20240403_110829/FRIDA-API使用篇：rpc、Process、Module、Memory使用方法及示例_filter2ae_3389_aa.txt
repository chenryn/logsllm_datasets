# FRIDA-API使用篇：rpc、Process、Module、Memory使用方法及示例
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
大家好，窝又来写文章了，咱们现在在这篇文章中，我们来对其官方的一些非常常用的`API`进行学习。所谓工欲善其事，必先利其器。想要好好学习`FRIDA`我们就必须对`FRIDA
API`深入的学习以对其有更深的了解和使用，通常大部分核心原理也在官方`API`中写着，我们学会来使用一些案例来结合`API`的使用。
注意，运行以下任何代码时都需要提前启动手机中的`frida-server`文件。
系列文章目录搬新“家”了，地址： ，接下来窝会努力写更多喔
~
## 1.1 FRIDA输出打印
###  1.1.1 console输出
不论是什么语言都好，第一个要学习总是如何输出和打印，那我们就来学习在`FRIDA`打印值。在官方API有两种打印的方式，分别是`console`、`send`，我们先来学习非常的简单的`console`，这里我创建一个`js`文件，代码示例如下。
    function hello_printf() {
        Java.perform(function () {
            console.log("");
            console.log("hello-log");
            console.warn("hello-warn");
            console.error("hello-error");
        });
    }
    setImmediate(hello_printf,0);
当文件创建好之后，我们需要运行在手机中安装的`frida-server`文件，在上一章我们学过了如何安装在`android`手机安装`frida-server`，现在来使用它，我们在`ubuntu`中开启一个终端，运行以下代码，启动我们安装好的`frida-server`文件。
    roysue@ubuntu:~$ adb shell
    sailfish:/ $ su
    sailfish:/ $ ./data/local/tmp/frida-server
然后执行以下代码，对目标应用`app`的进程`com.roysue.roysueapplication`使用`-l`命令注入`Chap03.js`中的代码`1-1`以及执行脚本之后的效果图`1-1`！
`frida -U com.roysue.roysueapplication -l Chap03.js`
代码1-1 代码示例
图1-1 终端执行
可以到终点已经成功注入了脚本并且打印了`hello`，但是颜色不同，这是`log`的级别的原因，在`FRIDA`的`console`中有三个级别分别是`log、warn、error`。
级别 | 含义  
---|---  
log | 正常  
warn | 警告  
error | 错误  
###  1.1.2 console之hexdump
`error`级别最为严重其`次warn`，但是一般在使用中我们只会使用`log`来输出想看的值；然后我们继续学习`console`的好兄弟，`hexdump`，其含义:打印内存中的地址，`target`参数可以是`ArrayBuffer`或者`NativePointer`,而`options`参数则是自定义输出格式可以填这几个参数`offset、lengt、header、ansi`。
`hexdump`代码示例以及执行效果如下。
    var libc = Module.findBaseAddress('libc.so');
    console.log(hexdump(libc, {
      offset: 0,
      length: 64,
      header: true,
      ansi: true
    }));
               0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF
    00000000  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00  .ELF............
    00000010  03 00 28 00 01 00 00 00 00 00 00 00 34 00 00 00  ..(.........4...
    00000020  34 a8 04 00 00 00 00 05 34 00 20 00 08 00 28 00  4.......4. ...(.
    00000030  1e 00 1d 00 06 00 00 00 34 00 00 00 34 00 00 00  ........4...4...
###  **1.1.3 send**
`send`是在`python`层定义的`on_message`回调函数，`jscode`内所有的信息都被监控`script.on('message',
on_message)`，当输出信息的时候`on_message`函数会拿到其数据再通过`format`转换，
其最重要的功能也是最核心的是能够直接将数据以`json`格式输出，当然数据是二进制的时候也依然是可以使用`send`，十分方便，我们来看代码`1-2`示例以及执行效果。
    # -*- coding: utf-8 -*-    import frida
    import sys
    def on_message(message, data):
        if message['type'] == 'send':
            print("[*] {0}".format(message['payload']))
        else:
            print(message)
    jscode = """
        Java.perform(function () 
        {
            var jni_env = Java.vm.getEnv();
            console.log(jni_env);
            send(jni_env);
        });
     """
    process = frida.get_usb_device().attach('com.roysue.roysueapplication')
    script = process.create_script(jscode)
    script.on('message', on_message)
    script.load()
    sys.stdin.read()
    运行脚本效果如下：
    roysue@ubuntu:~/Desktop/Chap09$ python Chap03.py 
    [object Object]
    [*] {'handle': '0xdf4f8000', 'vm': {}}
可以看出这里两种方式输出的不同的效果，`console`直接输出了`[object
Object]`，无法输出其正常的内容，因为`jni_env`实际上是一个对象，但是使用`send`的时候会自动将对象转`json`格式输出。通过对比，我们就知道`send`的好处啦~
## 1.2 FRIDA变量类型
学完输出之后我们来学习如何声明变量类型。
索引 | API | 含义  
---|---|---  
1 | new Int64(v) | 定义一个有符号Int64类型的变量值为v，参数v可以是字符串或者以0x开头的的十六进制值  
2 | new UInt64(v) | 定义一个无符号Int64类型的变量值为v，参数v可以是字符串或者以0x开头的的十六进制值  
3 | new NativePointer(s) | 定义一个指针，指针地址为s  
4 | ptr(“0”) | 同上  
代码示例以及效果
    Java.perform(function () {
        console.log("");
        console.log("new Int64(1):"+new Int64(1));
        console.log("new UInt64(1):"+new UInt64(1));
        console.log("new NativePointer(0xEC644071):"+new NativePointer(0xEC644071));
        console.log("new ptr('0xEC644071'):"+new ptr(0xEC644071));
    });
        输出效果如下：
        new Int64(1):1
        new UInt64(1):1
        new NativePointer(0xEC644071):0xec644071
        new ptr('0xEC644071'):0xec644071
`frida`也为`Int64(v)`提供了一些相关的API：
索引 | API | 含义  
---|---|---  
1 | add(rhs)、sub(rhs)、and(rhs)、or(rhs)、xor(rhs) | 加、减、逻辑运算  
2 | shr(N)、shl(n) | 向右/向左移位n位生成新的Int64  
3 | Compare(Rhs) | 返回整数比较结果  
4 | toNumber() | 转换为数字  
5 | toString([radix=10]) | 转换为可选基数的字符串(默认为10)  
我也写了一些使用案例，代码如下。
    function hello_type() {
        Java.perform(function () {
            console.log("");
            //8888 + 1 = 8889
            console.log("8888 + 1:"+new Int64("8888").add(1));
            //8888 - 1 = 8887
            console.log("8888 - 1:"+new Int64("8888").sub(1));
            //8888 << 1 = 4444
            console.log("8888 << 1:"+new Int64("8888").shr(1));
            //8888 == 22 = 1 1是false
            console.log("8888 == 22:"+new Int64("8888").compare(22));
            //转string
            console.log("8888 toString:"+new Int64("8888").toString());
        });
    }
代码执行效果如图1-2。
图1-2 Int64 API
## 1.3 RPC远程调用
可以替换或插入的空对象，以向应用程序公开`RPC`样式的`API`。该键指定方法名称，该值是导出的函数。此函数可以返回一个纯值以立即返回给调用方，或者承诺异步返回。也就是说可以通过rpc的导出的功能使用在`python`层，使`python`层与`js`交互，官方示例代码有`Node.js`版本与`python`版本，我们在这里使用`python`版本，代码如下。
###  1.3.1 远程调用代码示例
    import frida
    def on_message(message, data):
        if message['type'] == 'send':
            print(message['payload'])
        elif message['type'] == 'error':
            print(message['stack'])
    session = frida.get_usb_device().attach('com.roysue.roysueapplication')
    source = """
        rpc.exports = {
        add: function (a, b) {
            return a + b;
        },
        sub: function (a, b) {
            return new Promise(function (resolve) {
            setTimeout(function () {
                resolve(a - b);
            }, 100);
            });
        }
        };
    """
    script = session.create_script(source)
    script.on('message', on_message)
    script.load()
    print(script.exports.add(2, 3))
    print(script.exports.sub(5, 3))
    session.detach()
###  1.3.2 远程调用代码示例详解
官方源码示例是附加在目标进程为`iTunes`，再通过将`rpc`的`./agent.js`文件读取到`source`，进行使用。我这里修改了附加的目标的进程以及直接将`rpc`的代码定义在`source`中。我们来看看这段是咋运行的，仍然先对目标进程附加，然后在写`js`中代码，也是`source`变量，通过`rpc.exports`关键字定义需要导出的两个函数，上面定义了`add`函数和`sub`函数，两个的函数写作方式不一样，大家以后写按照`add`方法写就好了，`sub`稍微有点复杂。声明完函数之后创建了一个脚本并且注入进程，加载了脚本之后可以到`print(script.exports.add(2,
3))`以及`print(script.exports.sub(5,
3))，`在`python`层直接调用。`add`的返回的结果为`5`，`sub`则是`2`，下见下图`1-3`。
图1-3 执行python脚本
## 1.4 Process对象
我们现在来介绍以及使用一些`Process`对象中比较常用的`api`~
###  1.4.1 Process.id
`Process.id`：返回附加目标进程的`PID`
###  1.4.2 Process.isDebuggerAttached()
`Process.isDebuggerAttached()`：检测当前是否对目标程序已经附加
###  1.4.3 Process.enumerateModules()
枚举当前加载的模块，返回模块对象的数组。  
`Process.enumerateModules()`会枚举当前所有已加载的`so`模块，并且返回了数组`Module`对象，`Module`对象下一节我们来详细说，在这里我们暂时只使用`Module`对象的`name`属性。
    function frida_Process() {
        Java.perform(function () {
            var process_Obj_Module_Arr = Process.enumerateModules();
            for(var i = 0; i < process_Obj_Module_Arr.length; i++) {
                console.log("",process_Obj_Module_Arr[i].name);
            }
        });
    }
    setImmediate(frida_Process,0);
我来们开看看这段`js`代码写了啥：在`js`中能够直接使用`Process`对象的所有`api`，调用了`Process.enumerateModules()`方法之后会返回一个数组，数组中存储N个叫Module的对象，既然已经知道返回了的是一个数组，很简单我们就来`for`循环它便是，这里我使用下标的方式调用了`Module`对象的`name`属性，`name`是`so`模块的名称。见下图`1-4`。