solution which allowed one train to share the same key with many
RBCs, in addition to the one train sharing a key with exactly one
RBC. For ¨OBB, an online scheme was required to distribute keys
with RBCs as no standard was available at the time. (cid:140)ese solu-
tions, however, whilst compliant with the current standard, should
not be deemed secure, as the compromise of one train key would
compromise its communications with all RBCs under that scheme.
Furthermore, the other solutions advocate the use of public key en-
cryption through its use of RSA, which is not post-quantum secure,
with no rati(cid:128)ed alternatives for use.
3 ERTMS KEY GENERATION OVERVIEW
Within the current implementation of ERTMS, long-term keys are
installed on RBCs and OBUs, which are used to derive a session key
using exchanged nonces through the EuroRadio protocol [18]. (cid:140)is
session key is used as the MAC key to authenticate and provide
integrity protection of transmi(cid:138)ed messages. In this section, we
provide an overview of ERTMS and TRAKS Key Generation, before
formally de(cid:128)ning these schemes in Section 4.
In the current ERTMS Key Management scheme, the infrastruc-
ture manager allocates a unique key for each RBC-OBU pair. (cid:140)is
key is randomly generated by the Key Management Centre, and
is encrypted and a MAC is computed for this. (cid:140)is setup is pend-
ing changes following a proposed modi(cid:128)cation which is part of
the ETCS Level 3 baseline standard that introduces a PKI, which
2(cid:140)e SUBSET-114 speci(cid:128)cations were (cid:128)rst released a number of years a(cid:137)er SUBSET-037
was released
allows the trains and RBCs to communicate directly to the KMC
over TCP/IP.
(cid:140)e existing and proposed parallel scheme carry signi(cid:128)cant op-
erational overhead, and both present a security exposure due to
the potential to extend the validity of keys. In our solution, we
o(cid:130)er a fully backwards-compatible scheme, which allows the KMC
to issue keys until such a time that the RBC may be updated to
support dynamic key generation. (cid:140)is reduces the overhead on
national KMC owners, improves interoperability for cross-border
operation, and also reduces the requirement of the home infrastruc-
ture manager to go out into the (cid:128)eld to install keys on the RBCs
for each new entity introduced into the network. Furthermore, the
scheme presented in this paper supports the authentication of data
on EuroBalises (EBs), such as the current location data. Currently
this data is trusted and assumed to be accurate and authentic, but
is sent without any form of authentication.
Security Requirements. Under the existing key key management
scheme, an implicit permissions model exists: a EuroRadio session
cannot be established if there is no cryptographic relationship be-
tween two entities denoted by id and id(cid:48). (cid:140)is is because a key
kmid,id(cid:48) does not exist between them. One bene(cid:128)t of this scheme
is that a train cannot be given signalling commands in an area it is
not authorised to operate in. An example a(cid:138)ack which is prevented
is GSM relaying, where the train tra(cid:129)c is redirected to a distant
GSM Base Station. Without this permissions model (assuming all
keys have been installed), the train would be given the command
to move forward until it has reached a balise to provide its location.
(cid:140)is could place the train in a potentially unsafe situation.
Informal A(cid:136)acker Model. In our scheme, we investigate a(cid:138)ackers
that have the ability to insert keys, intercept keys between the KMC
and Train, and intercept keys between the KMC and RBC.
If an a(cid:138)acker is able to install arbitrary keys onto either the train
or RBC, it can create a state of disassociation between what the
KMC and train/RBC believes is the current set of loaded keys. It
is currently not clear in the ERTMS speci(cid:128)cations what remedia-
tion should take place if a key is a(cid:138)empted to be installed and one
already exists. In the case of key interception, once the transport
keys, keys which are used to encrypt and provide integrity and
authentication of payloads between train/RBC and KMC, are in-
stalled onto the train or RBC, the a(cid:138)acker is not able to establish
the kmid,id(cid:48) keys unless they know the appropriate secret used to
generate the keys. As the transport keys are installed in plaintext,
an a(cid:138)acker who obtains the transport key at the point of manufac-
ture/commissioning is able to intercept all keys between a train or
RBC.
We therefore consider an a(cid:138)acker from the Dolev-Yao model,
who operates in polynomial time, and is able to monitor communi-
cations between the KMC and any train and RBC. In particular, the
a(cid:138)acker is also able to send arbitrary messages to any given train,
RBC or KMC, and either delay, modify or delete messages being
sent between participants. Any proposed solution has to consider
the capabilities of such an a(cid:138)acker.
ERTMS Parameters. In the ERTMS System Speci(cid:128)cations [5], iden-
tity variables, known as NID C, are assigned to speci(cid:128)c ‘zones’ of
operation, with varying scope, from an entire country to a speci(cid:128)c
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Richard J. Thomas, Mihai Ordean, Tom Chothia, and Joeri de Ruiter
ERTMS Entities
OBU ↔ RBC
RBC ↔ RBC
KMC ↔ RBC/OBU
KMC ↔ KMC
Handshake MAC
KSMAC
KSMAC
KMAC
KMAC
×
×
kt1
K-KMC1
Encryption
×
×
kt2
K-KMC2
ERTMS Keys
NID C Secret
RBC Derivation Key
Train Key
Balise Secret
Balise NID C Area Key
Balise MAC Key
Current
KMAC r id,oid
×
×
×
×
×
TRAKS
knid c
kmrid,null
kmrid,oid
km
kmNID C,null
kmNID C,b❕id
Figure 1: Current ERTMS Key Management Hierarchy [17],
showing the speci(cid:128)c keys used between ERTMS entitles in
speci(cid:128)c applications: session handshake, message authenti-
cation and encryption.
line in a country. (cid:140)ese are assigned by a central body, from a pool
of available values. We leverage these variables to de(cid:128)ne a per-
missions model of where a train is allowed to operate, rather than
relying on the direct pairing relationship that the current scheme
uses. From this, the infrastructure manager derives a set of keys
that are allocated to RBCs in that speci(cid:128)c area identi(cid:128)ed by an
NID C. If the infrastructure manager is not in a position to support
the full capabilities of dynamic key-derivation at RBC level, they
can use the same functions to generate train keys for a RBC. (cid:140)is
is done by computing the RBC key, and applying this to the set
of train IDs authorised to operate within the NID C. Train IDs and
RBC IDs are allocated by the infrastructure manager from a central
ERTMS ID database, EDB. (cid:140)e result of this process is a set of keys
which are backwards-compatible with the existing ERTMS scheme.
We provide an example application of TRAKS in Section 3.1.
For national infrastructure managers, this reduces the time taken
to allow a train to cross borders, as the pre-requisite step to install
keys on the RBC is no longer required, as the RBC is able to derive
any key required based on the (cid:128)rst EuroRadio message received
by the train (where the train ID is provided). Under this model, we
also enforce a permissions model, whereby, through partitioning of
the rail network, we ensure that keys are not unnecessarily issued,
where the operational zones are exactly de(cid:128)ned and controlled.
Trains may also be reallocated to new areas - in the current scheme,
this would rely on an engineer going into the (cid:128)eld to install the
requisite keys on the train and RBCs, however, under our proposed
scheme, TRAKS, this can be managed between the train and key
management centre, with no requirement to interact with the RBC.
Current Key Distribution. Key distribution in ERTMS is currently a
manual process, where keys are generated by the KMC and then
distributed as required in response to a valid request. (cid:140)is set of
keys is then accompanied with a separate MAC and encrypted using
pre-shared symmetric keys referred to as transport keys. When a
new train or RBC is added to the system, however, these transport
keys, used to encrypt and authenticate payloads to and from the
OBU, RBC and KMC, are installed in cleartext. (cid:140)e compromise of
the transport media (e.g. USB stick or CD) would allow an a(cid:138)acker
to forge their own valid messages which could compromise safety.
Under TRAKS, we propose a new key distribution scheme, whereby
Figure 2: Proposed TRAKS Key Management Hierarchy. We
introduce the new notation used throughout this paper as: a
train with OBU ID 3, communicating with an RBC with ID 5
would have the key kmrid5,oid3. Balise MAC Keys are bound
by the NID C they are located in and their unique balise group
ID, b❕id.
trains and RBCs instead generate their own transport keys in such a
way that an external a(cid:138)acker would require knowledge of the keys
in order to obtain the keying material. In our scheme, we propose
a shared key between the key management centre and approved
vendors, which is used for vendor-KMC communications. Trains
and RBCs have a burnt-in key pair, installed by the vendor which
can be used for train/RBC-vendor communications.
In the following we de(cid:128)ne a framework for ERTMS key genera-
tion, outlining the functions run by the Key Management Centre.
Using this outline de(cid:128)nition, we can de(cid:128)ne a model of the current
ERTMS Key Generation scheme in Algorithm 1 and TRAKS in Al-
gorithm 2. Using these models, it is possible to prove the security
of these mathematical models against an a(cid:138)acker, which gives us
con(cid:128)dence that our proposed solution does not compromise the
security of ERTMS.
De(cid:128)nition 3.1. An ERTMS key generation scheme KMAC =
(SGen, INIT.ID, GEN.KMAC) over a ERTMS id database EDB is
a tuple of three polynomial-time algorithms:
knid c ← SGen(1λ ) :
is a probabilistic key generation algorithm
run by the KMC. It takes as input a security parameter λ
and outputs a random value s of length λ.
IDt ← INIT.ID(EDB, t ) :
kmid,id(cid:48) ← GEN.KMAC(id, id(cid:48), knid c) :
is a deterministic algorithm run by the
KMC to retrieve a set of ids from an ERTMS database. It
takes as input a database EDB and a ERTMS entity type t
and outputs the set of ids corresponding to t. In the current
ERTMS standard t ∈ {OBU , RBC, EB}.
is an algorithm run by
the KMC to generate a MAC derivation key. It takes as
input two ids id ∈ IDt and id(cid:48) ∈ IDt(cid:48), and a secret knid c,
and outputs the key kmid,id(cid:48) that is used to authenticate
communication between id and id(cid:48).
3.1 TRAKS Application Example
We present a high-level hierarchy of ERTMS Key Management
under TRAKS in Figure 3. Key management operations which
allow trains to operate across borders remain unchanged, with a
symmetric pair of keys shared between KMCs. From the current
ERTMS scheme, we introduce an intermediary level, leveraging
TRAKS: A Universal Key Management Scheme for ERTMS
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
NID C, denoted in Figure 3 by knid cx where x is the identity of the
region (NID C) of operation. NID C is an allocated ERTMS variable
that represents a speci(cid:128)c region or line. (cid:140)is has a unique secret
key allocated per NID C, representing a mapping from NID C to its
line secret.
For a given region or line, a number of RBCs may operate. Using
the line secret knid cx , and the RBC identity, the RBC keys are
established. In the (cid:128)gure, we show two trains which are authorised
to operate over two NID C regions each. By applying De(cid:128)nition 3.1
and additionally supplying the identity of the train, the KMC al-
locates the keys required to the OBUs. For the RBCs, however, a
single derivation function is required to establish the keys.
More concretely, let us consider an example national domain
de(cid:128)ned by Figure 3, with 4 NID C regions and 6 RBCs. For each
NID C in this domain, which have NID C values 1, 2, 3 and 4, the
Key Management Centre will generate a line secret (based on a
function which produces random output, e.g. using a Hardware
Security Module) for the regions. It stores the line secret output
knid c1, ...,knid c4. To provide RBC keys, the Key Management
Centre will use the line secret for the given NID C and compute
the individual key for that RBC by combining the ID of the RBC
and the line secret. We discuss the speci(cid:128)cs of generating keys in
Section 9. As an example, for RBC2 and RBC3, the Key Management
Centre will use the line secret for NID C2, knid c2, and compute the
individual RBC keys based on the IDs of RBC2 and RBC3 (i.e. rid2
and rid3), producing kmrid2,null and kmrid3,null , which would
then be installed on the RBCs.
When train keys are required, the KMC will determine for which
RBCs a key is required, and, for each of these RBCs, it will derive
the corresponding RBC key, and output a key which is the result of
applying the train ID to the RBC key using GEN.KMAC(rid, oid,
knid cx ). (cid:140)is results in a key which uniquely pairs a train to a
given RBC and can be installed on the train. When a train sends
the (cid:128)rst EuroRadio message, the RBC will use the ID of the train