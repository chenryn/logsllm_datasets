title:Melting Pot of Origins: Compromising the Intermediary Web Services
that Rehost Websites
author:Takuya Watanabe and
Eitaro Shioji and
Mitsuaki Akiyama and
Tatsuya Mori
Melting Pot of Origins: Compromising the
Intermediary Web Services that Rehost Websites
Takuya Watanabe∗†, Eitaro Shioji∗, Mitsuaki Akiyama∗ and Tatsuya Mori†‡§
∗NTT Secure Platform Laboratories, Tokyo, Japan
†Waseda University, Tokyo, Japan
‡NICT, Tokyo, Japan
§RIKEN AIP, Tokyo, Japan
Email: PI:EMAIL, PI:EMAIL
Abstract—Intermediary web services such as web proxies,
web translators, and web archives have become pervasive as a
means to enhance the openness of the web. These services aim to
remove the intrinsic obstacles to web access; i.e., access blocking,
language barriers, and missing web pages. In this study, we refer
to these services as web rehosting services and make the ﬁrst
exploration of their security ﬂaws. The web rehosting services use
a single domain name to rehost several websites that have distinct
domain names; this characteristic makes web rehosting services
intrinsically vulnerable to violating the same origin policy if not
operated carefully. Based on the intrinsic vulnerability of web
rehosting services, we demonstrate that an attacker can perform
ﬁve different types of attacks that target users who make use
of web rehosting services: persistent man-in-the-middle attack,
abusing privileges to access various resources, stealing credentials,
stealing browser history, and session hijacking/injection. Our
extensive analysis of 21 popular web rehosting services, which
have more than 200 million accesses per day, revealed that these
attacks are feasible. In response to this observation, we provide
effective countermeasures against each type of attack.
I.
INTRODUCTION
While the architecture of the web follows the fundamental
Internet design framework — the End-to-End principle [53]—
several web services that deviate from the principle have
been developed to enhance the openness of the web. Typical
examples of such services include web proxy, web translator,
and web archive, which all aim to enhance the openness of
the web in the following ways: Web proxies enable a user to
access websites that are blocked by nations and institutes. Web
translators help a user to understand a web document written
in a foreign language that is difﬁcult for the user to read.
Web archives enable a user to access a version of previously
published web content, which is not available presently due to
several reasons such as expiration, maintenance, or blocking.
All these technologies work on top of a middle box, which we
call “web rehosting” throughout this paper.
With the increase in the number of web users, web rehost-
ing services have become pervasive. For instance, according
to the web trafﬁc statistics provided by SimilarWeb [55],
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24140
www.ndss-symposium.org
one of the most popular web proxy services, ProxySite [51]
had more than 20 million accesses per day in September
2019. The world’s top search engine companies such as
Google, Microsoft, Baidu, and Yandex offer web translator
services. Google website translator alone supports over 100
languages [22], [55] and serves over 80 million accesses
per day from all over the world. Through an analysis of
anonymized access logs collected from Wayback Machine
servers in February 2012, AlNoamany et al. [3] reported that
the service had about 82 million accesses per day. All these
web rehosting services have become popular because they
enhance the openness of the web. Furthermore, they are easy
to use, as a user can simply access such services by using a
normal browser and inputting a URL of interest; unlike other
alternative solutions such as an HTTP proxy1, VPN, or Tor,
they do not require setting changes and the installation of
special applications.
As web rehosting services offer enhanced web access
to various websites, an attacker has an incentive to exploit
them because users may input privacy-sensitive information
while accessing rehosted websites via a web rehosting service.
For instance, a user who uses a web proxy to access to a
webmail service needs to input the credential of the webmail
account via the web proxy. Similarly, content rewriting on
web rehosting services is useful for inciting and intimidating
users. An attacker may want to abuse the web translator to
create fake news by completely rewriting an original news
article while giving the fake article the appearance of the
translated version of the original article shown by the web
translator. Given this background,
this work addresses the
generic security ﬂaws of web rehosting services. To the best of
our knowledge, this is the ﬁrst study to focus comprehensively
on the services with the property of rehosting websites and
identify the security problems in common. Based on the
observations found through an analysis of various rehosting
services, we propose a Proof-of-concept (PoC) attack model
and evaluate its feasibility.
The key idea of the attacks is to leverage the fact that
a single domain name provided by a web rehosting service
is used to access multiple rehosted websites; this “melting
pot of origins” situation allows an attacker to bypass the
ﬁltration of the same origin policy (SOP). A malicious website
rehosted by an attacker to the web rehosting has the same
1In this paper, we call proxies with web-based interfaces (i.e., a type of web
rehosting services) web proxies and distinguish them from HTTP proxies.
origin as the rehosted websites. The malicious site enables the
attacker to tamper, steal, and/or take control of the various
resources of a victim’s browser when the victim accesses to
rehosted websites. Using this vulnerability, we demonstrate
that an attacker can perform the following ﬁve attacks, which
exploit different resources: (1) persistent man-in-the-middle
(MITM) attack, (2) abusing privileges to access resources,
(3) stealing credentials, (4) stealing browser history, and (5)
session hijacking and injection.
Our attacks exploit both traditional and modern browser
features: service workers [23] and application cache (App-
Cache) [67] for (1), browser permissions for (2), password
manager for (3), localStorage [46] for (4), and cookies for
(4) and (5). We note that of the ﬁve attacks, the persistent
MITM attack, which is enabled by abusing the service worker
or AppCache, is quite powerful in the sense that it can be
executed even under a secured channel — HTTPS. In this
attack, an attacker, who should be outside the network path in a
realistic attack scenario, does not need to intercept the HTTPS
channel. Once a victim accesses a rehosted malicious website,
an attacker can manipulate any requests/responses made by
the victim and rehosted websites. The attack is sustained until
the browser data is manually cleaned up; hence, the attack is
persistent.
To verify the feasibility of the attacks, we collected 21
popular web rehosting services and tested whether or not
these web rehosting services are vulnerable to the attacks.
We found that 18 services were vulnerable to at least one
of the attacks. The persistent MITM attack was effective on
13 web rehosting services, including prominent services such
as Google Translate, Wayback Machine (web archive), and
Hide My Ass (web proxy). We also revealed that around 40%
of the top-10K websites including sensitive categories (e.g.,
porn, dating, and piracy) had a unique ﬁngerprintable record
in their cookie and localStorage, implying that the browser
history theft, which leverages ﬁngerprints, will succeed when
these websites are accessed by a victim via a web rehosting
service.
The contributions of our study are summarized as fol-
trinsic to web rehosting services.
extensive analysis of 21 web rehosting services.
lows:
• This is the ﬁrst study to shed light on the security ﬂaws of
web rehosting services, which offer enhanced accessibility
to various web services.
• We present ﬁve attacks derived from the vulnerability in-
• We demonstrate the feasibility of the attack through the
• We provide effective countermeasures against the attacks.
The remainder of the paper is organized as follows: Sec-
tion II presents a background of the web technologies targeted
in this study. In Section III, we present the threat model and
the descriptions of derived attacks under the threat model.
Section IV demonstrates the feasibility of attacks through
experiments using 21 of the popular web rehosting services.
Section V discusses the coverage of our study, human fac-
tors, and ethical considerations. Section VI presents effective
countermeasures against the threats. In Section VII, we review
related works in comparison with ours. We conclude our study
in Section VIII.
Fig. 1. Overview of web rehosting services.
II. BACKGROUND
In this section, we review the background of web technolo-
gies that are targeted in the proposed attack.
A. Web Rehosting in the Wild
Figure 1 presents a high-level overview of web rehosting
services. Upon receiving a request from a user to access a
website, the web rehosting service fetches the content of the
website on behalf of the user, transforms the content following
the context of the service, and presents the transformed content
to the user. Most web rehosting services with this character-
istic can be classiﬁed into three categories: web proxy, web
translator, and web archive (several exceptions are discussed
in Section V-A). While web rehosting services are used for
various purposes, their usage is common — a user simply
accesses a web rehosting service and inputs a URL of interests.
The simplicity of the web rehosting services has made it
possible for many people to use it easily. Besides, the services
are available to people who are non tech-savvy, people on a
network with limited ports, and even people using a shared
PC at libraries or schools. These advantages well explain the
reasons why other tools such as Tor or VPNs, which require
a change of setting and/or installation of a special application,
may not be adopted as an alternative solution under certain
circumstances.
Table I summarizes the 21 web rehosting services we
studied in this work. The list contains 11 web proxy services,
7 web translator services, and 3 web archive services. The
estimated number of daily accesses is over 200 million in total
according to SimilarWeb [55], implying that these services
are widely used. Of the 21 services, only three services
have not adopted the HTTPS scheme as of September 2019.
Note that we anonymized two services at the request of their
providers: Service-α denotes web-proxy services using an
open-source software as the backend system. The software has
been redistributed by a third party and has kept unmaintained
for several years. Service-β represents a web translator which
is popular in a certain country.
B. Advanced Web Features
In this section, we describe the advanced web features
that are targeted by attacks that compromise web rehosting
2These web translator services except for Weblio and PROMT Online have
two separated domain names for website translation and text translation. We
only showed the data for the website translation.
2
a.exampleBlocking, Language barrier,  Missing web pagesyWebrehostingTABLE I.
A LIST OF WEB REHOSTING SERVICES EXAMINED IN THIS
STUDY. SERVICE-α AND SERVICE-β HAVE BEEN ANONYMIZED AT
REQUEST OF THEIR PROVIDERS.
Category
Proxy
Translator2
Archive
Rehosting Service
ProxySite [51]
Hide My Ass! [25]
Hide me [24]
Sitenable Web Proxy [56]
FilterBypass [14]
ProxFree [50]
toolur [61]
hidester [26]
GenMirror [16]
UnblockVideos [63]
Service-α
Google Translate [20]
Bing Translator [41]
Weblio [68]
PROMT Online [49]
Service-β
Yandex.Translate [70]
Baidu Translate [4]
Wayback Machine [30]
Google Cache [19]
FreezePage [15]
Scheme
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTPS
HTTP/S
HTTPS
HTTPS
HTTPS
HTTP
HTTPS
HTTPS
HTTP
HTTPS
HTTP/S
HTTP
#Accesses / Day [55]
20.14M
4.64M
4.49M
2.50M
1.26M
1.18M
0.92M
0.76M
0.41M
0.38M
–
80.45M
2.62M
2.30M
0.58M
–
0.18M
N/A
45.42M
41.50M
N/A
services.
Service Worker. A service worker [23] is a modern web
feature for both desktop and mobile platforms. It is supported
by major browsers such as Chrome, Edge, Safari, Firefox, and
Opera. It is an event-driven web worker written in JavaScript.
It works independently with the main browser thread and
provides rich features such as background data synchronization
and push notiﬁcation handling. A notable feature of a service
worker is that it can proxy all the requests and responses
between a web client and servers, and modify the content.
Thus, it offers quite powerful capabilities.
A service worker inherently implements strong security
constraints to prevent
its powerful capabilities from being
exploited. First, it only works on web services that are op-
erated in a secure context, i.e., HTTPS or local. Second, the
service worker, which ensures compliance with the SOP, is
associated with the origin and URL path and only operates
on a URL whose path contains the service worker script or
the lower. Accordingly,
if a web server environment sep-
arates operation areas by their subdomain names or URL
paths like generic hosting services do, one cannot register a
service worker that targets a website that is operated under
the same web server but has a different subdomain name
or URL path. Finally, a browser requires that
the MIME
type of the service worker script be speciﬁc to JavaScript,
text/javascript, application/javascript, and
application/x-javascript; otherwise, it does not reg-
ister the service worker.
Application Cache. The HTML5 standard provides an ap-
plication caching mechanism (AppCache [67]) that allows a
web application to run ofﬂine. This feature has the following
three advantages: (1) Ofﬂine browsing — users can browse
websites even when they are ofﬂine. (2) Speed — as the
cached resources reside in storage of browsers, they are loaded
quickly. (3) Reduced workload — a browser downloads only
changed resources from the server; hence, the cache mech-
anism reduces the workload of the network and server. To
achieve (1), the ofﬂine browsing AppCache provides a cached
alternative resource instead of a fallback page displayed due
3
to network or server errors.
Since the HTML 5.1 standard was released in November
2016, AppCache has been deprecated [67]. It is recommended
that developers use the service worker API as an alternative
solution. However, as of September 2019, AppCache still
works with the latest versions of browsers, including Chrome,
Firefox, Opera, IE, and Safari. The constraints of AppCache
are similar to those for a service worker. The chief difference
is that AppCache works independently of paths for pages on
the same origin.
Browser Permissions. In HTML5, web browsers support
accessing various resources such as geolocation, camera, mi-
crophone, and notiﬁcations. Access to these resources re-
quires permission through user interaction, and a permission
is granted to each resource for the realms with the same
origin [65]. As with the features shown above, this access
control assumes that a different website runs on a different
domain name. However, the access granted via a web rehosting
service violates this assumption.
Browser-based Password Managers. Presently, major
browsers such as Chrome, Firefox, Opera, IE, and Safari all