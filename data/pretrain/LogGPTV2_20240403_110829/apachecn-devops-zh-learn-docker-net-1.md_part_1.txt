# 一、Docker 网络入门
**Docker** 是一种轻量级容器技术，近年来引起了极大的兴趣。它巧妙地将各种 Linux 内核特性和服务(如名称空间、cgroups、SELinux 和 AppArmor 配置文件)捆绑在 AUFS 和 BTRFS 等联合文件系统上，以制作模块化映像。这些映像为应用提供了一个高度可配置的虚拟化环境，并遵循一次写入，在任何地方运行的工作流程。一个应用可以由运行在 Dcker 容器中的单个进程组成，也可以由运行在它们自己的容器中的多个进程组成，并且随着负载的增加而被复制。因此，需要强大的网络元素来支持各种复杂的用例。
在本章中，您将了解 Docker 网络的基本组件，以及如何构建和运行简单的容器示例。
本章涵盖以下主题:
*   网络和 Docker
*   `docker0`桥联网
*   Docker 卵形网络
*   Unix 域网络
*   链接 Docker 容器
*   Docker 网络有什么新功能
Docker 凭借其对性能的精通和通用的可复制性架构，在行业中获得了很大的吸引力，同时提供了现代应用开发的以下四个基石:
*   自治
*   分散
*   平行
*   隔离
此外，大规模采用 Thoughtworks 的微服务架构，即 **LOSA** ( **大量小应用**)正在进一步为 Docker 技术带来潜力。因此，谷歌、VMware 和微软等大公司已经将 Docker 移植到他们的基础设施中，无数 Docker 初创公司的推出也延续了这一势头，即 Tutum、Flocker、Giantswarm 等。
由于 Docker 容器可以在任何地方复制它们的行为，无论是您的开发机器、裸机服务器、虚拟机还是数据中心，应用设计人员可以将注意力集中在开发上，而操作语义则留给 DevOps。这使得团队工作流模块化、高效且高效。Docker 不应与 **虚拟机** ( **VM** )混淆，尽管它们都是虚拟化技术。虽然 Docker 共享一个操作系统，为运行在容器中的应用提供足够的隔离和安全级别，但它后来完全抽象出了操作系统，并提供了强大的隔离和安全保证。然而，与虚拟机相比，Docker 的资源占用非常少，因此在经济性和性能方面更受青睐。但是，它仍然不能完全替代虚拟机，因此是虚拟机技术的补充。下图显示了虚拟机和 Docker 的体系结构:
![Docker Networking Primer](img/00002.jpeg)
# 网络和 Docker
每个 Docker 容器都有自己的网络栈，这是由于 Linux 内核的 NET 命名空间，每个容器都有一个新的 NET 命名空间被实例化，不能从容器外部或其他容器看到。
Docker 网络由以下网络组件和服务提供支持。
## Linux 桥
这些是内置在内核中的 L2/媒体访问控制学习交换机，用于转发。
## 打开虚拟开关
这个是一个可编程的支持隧道的高级桥。
## 夜
网络地址转换器是直接转换 IP 地址和端口(SNAT、DNAT 等)的实体。
## 可采性
这个是内核中的一个策略引擎，用于管理数据包转发、防火墙和 NAT 功能。
## 表面化/SELinux
每个应用的防火墙策略可以用这些来定义。
各种网络组件可以用来与 Docker 一起工作，提供了访问和使用基于 Docker 的服务的新方式。因此，我们看到许多图书馆采用不同的网络方式。其中比较突出的有 Docker Compose、Weave、Kubernetes、pipeline、libnetwork 等等。下图描述了 Docker 网络的基本思想:
![AppArmor/SELinux](img/00003.jpeg)
# Docker 桥
`docker0`桥是默认联网的心脏。当 Docker 服务启动时，会在主机上创建一个 Linux 桥。容器上的接口与桥对话，桥代理外部世界。同一台主机上的多个容器可以通过 Linux 桥相互通信。
`docker0`可以通过`--net`标志进行配置，通常有四种模式:
*   `--net default`
*   `--net=none`
*   `--net=container:$container2`
*   `--net=host`
## 净默认模式
在这种模式下，默认桥被用作容器相互连接的桥。
## 净=无模式
在这种模式下，创建的容器是真正隔离的，不能连接到网络。
## 网络=容器:$容器 2 模式
使用这个标志，创建的容器与名为`$container2`的容器共享其网络命名空间。
## 网络=主机模式
在这种模式下，创建的容器与主机共享其网络命名空间。
### Docker 容器中的端口映射
在本节中，我们看一下容器端口如何映射到主机端口。该映射可以由 Docker 引擎隐式完成，也可以指定。
如果我们创建两个名为**容器 1** 和**容器 2** 的容器，这两个容器都从私有 IP 地址空间分配了一个 IP 地址，并且还连接到了**Docker 0** 桥，如下图所示:
![Port mapping in Docker container](img/00004.jpeg)
前面的两个容器将能够相互 ping 通，并到达外部世界。
对于外部访问，它们的端口将映射到主机端口。
正如上一节提到的，容器使用网络名称空间。创建第一个容器时，会为该容器创建一个新的网络命名空间。在容器和 Linux 桥之间创建了一个 vEthernet 链接。从容器的`eth0`发送的流量通过 vEthernet 接口到达网桥，然后被交换。下面的代码可以用来显示 Linux 桥的列表:
```
# show linux bridges
$ sudo brctl show
```
输出将类似于如下所示，带有一个桥名和它所映射到的容器上的`veth`接口:
```
bridge name      bridge id        STP enabled    interfaces
docker0      8000.56847afe9799        no         veth44cb727
 veth98c3700
```
容器如何连接外部世界？主机上的`iptables nat`表用于伪装所有外部连接，如下图所示:
```
$ sudo iptables -t nat -L –n
...
Chain POSTROUTING (policy ACCEPT) target prot opt
source destination MASQUERADE all -- 172.17.0.0/16
!172.17.0.0/16
...
```
如何从外界到达容器？使用主机上的`iptables nat`选项再次完成端口映射。
![Port mapping in Docker container](img/00005.jpeg)
# 孵蛋器
open vsswitch 是一个强大的网络抽象。下图显示了 OVS 如何与 **虚拟机**、**虚拟机管理程序**和**物理交换机**交互。每个**虚拟机**都有一个与之关联的 **vNIC** 。每个 **vNIC** 通过 **VIF** (也称为**虚拟接口**)与 **虚拟交换机**相连:
![Docker OVS](img/00006.jpeg)
OVS 使用隧道机制(如 GRE、VXLAN 或 STT)来创建虚拟覆盖，而不是使用物理网络拓扑和以太网组件。下图显示了如何为容器配置 OVS，以便使用 GRE 隧道在多台主机之间进行通信: