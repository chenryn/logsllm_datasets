The figure shows the command prompt’s open handles:
You can also display the open handle table by using the
command-line Handle tool from Sysinternals. For example, note
the following partial output of Handle when examining the file
object handles located in the handle table for a Cmd.exe process
before and after changing the directory. By default, Handle filters
out non-file handles unless the –a switch is used, which displays all
the handles in the process, similar to Process Explorer.
Click here to view code image
C:\Users\aione>\sysint\handle.exe -p 8768 -a users
Nthandle v4.22 - Handle viewer
Copyright (C) 1997-2019 Mark Russinovich
Sysinternals - www.sysinternals.com
cmd.exe            pid: 8768   type: File           150: 
C:\Users\Public
An object handle is an index into a process-specific handle table, pointed
to by the executive process (EPROCESS) block (described in Chapter 3 of
Part 1). The index is multiplied by 4 (shifted 2 bits) to make room for per-
handle bits that are used by certain API behaviors—for example, inhibiting
notifications on I/O completion ports or changing how process debugging
works. Therefore, the first handle index is 4, the second 8, and so on. Using
handle 5, 6, or 7 simply redirects to the same object as handle 4, while 9, 10,
and 11 would reference the same object as handle 8.
A process’s handle table contains pointers to all the objects that the
process currently has opened a handle to, and handle values are aggressively
reused, such that the next new handle index will reuse an existing closed
handle index if possible. Handle tables, as shown in Figure 8-33, are
implemented as a three-level scheme, similar to the way that the legacy x86
memory management unit implemented virtual-to-physical address
translation but with a cap of 24 bits for compatibility reasons, resulting in a
maximum of 16,777,215 (224-1) handles per process. Figure 8-34 describes
instead the handle table entry layout on Windows. To save on kernel memory
costs, only the lowest-level handle table is allocated on process creation—the
other levels are created as needed. The subhandle table consists of as many
entries as will fit in a page minus one entry that is used for handle auditing.
For example, for 64-bit systems, a page is 4096 bytes, divided by the size of
a handle table entry (16 bytes), which is 256, minus 1, which is a total of 255
entries in the lowest-level handle table. The mid-level handle table contains a
full page of pointers to subhandle tables, so the number of subhandle tables
depends on the size of the page and the size of a pointer for the platform.
Again using 64-bit systems as an example, this gives us 4096/8, or 512
entries. Due to the cap of 24 bits, only 32 entries are allowed in the top-level
pointer table. If we multiply things together, we arrive at 32*512*255 or
16,711,680 handles.
Figure 8-33 Windows process handle table architecture.
Figure 8-34 Structure of a 32-bit handle table entry.
EXPERIMENT: Creating the maximum number of
handles
The test program Testlimit from Sysinternals has an option to open
handles to an object until it cannot open any more handles. You can
use this to see how many handles can be created in a single process
on your system. Because handle tables are allocated from paged
pool, you might run out of paged pool before you hit the maximum
number of handles that can be created in a single process. To see
how many handles you can create on your system, follow these
steps:
1. 
Download the Testlimit executable file corresponding to the
32-bit/64-bit Windows you need from
https://docs.microsoft.com/en-
us/sysinternals/downloads/testlimit.
2. 
Run Process Explorer, click View, and then click System
Information. Then click the Memory tab. Notice the
current and maximum size of paged pool. (To display the
maximum pool size values, Process Explorer must be
configured properly to access the symbols for the kernel
image, Ntoskrnl.exe.) Leave this system information display
running so that you can see pool utilization when you run
the Testlimit program.
3. 
Open a command prompt.
4. 
Run the Testlimit program with the –h switch (do this by
typing testlimit –h). When Testlimit fails to open a new
handle, it displays the total number of handles it was able to
create. If the number is less than approximately 16 million,
you are probably running out of paged pool before hitting
the theoretical per-process handle limit.
5. 
Close the Command Prompt window; doing this kills the
Testlimit process, thus closing all the open handles.
As shown in Figure 8-34, on 32-bit systems, each handle entry consists of
a structure with two 32-bit members: a pointer to the object (with three flags
consuming the bottom 3 bits, due to the fact that all objects are 8-byte
aligned, and these bits can be assumed to be 0), and the granted access mask
(out of which only 25 bits are needed, since generic rights are never stored in
the handle entry) combined with two more flags and the reference usage
count, which we describe shortly.
On 64-bit systems, the same basic pieces of data are present but are
encoded differently. For example, 44 bits are now needed to encode the
object pointer (assuming a processor with four-level paging and 48-bits of
virtual memory), since objects are 16-byte aligned, and thus the bottom four
bits can now be assumed to be 0. This now allows encoding the “Protect
from close” flag as part of the original three flags that were used on 32-bit
systems as shown earlier, for a total of four flags. Another change is that the
reference usage count is encoded in the remaining 16 bits next to the pointer,
instead of next to the access mask. Finally, the “No rights upgrade” flag
remains next to the access mask, but the remaining 6 bits are spare, and there
are still 32-bits of alignment that are also currently spare, for a total of 16
bytes. And on LA57 systems with five levels of paging, things take yet
another turn, where the pointer must now be 53 bits, reducing the usage
count bits to only 7.
Since we mentioned a variety of flags, let’s see what these do. First, the
first flag is a lock bit, indicating whether the entry is currently in use.
Technically, it’s called “unlocked,” meaning that you should expect the
bottom bit to normally be set. The second flag is the inheritance designation
—that is, it indicates whether processes created by this process will get a
copy of this handle in their handle tables. As already noted, handle
inheritance can be specified on handle creation or later with the
SetHandleInformation function. The third flag indicates whether closing the
object should generate an audit message. (This flag isn’t exposed to
Windows—the Object Manager uses it internally.) Next, the “Protect from
close” bit indicates whether the caller is allowed to close this handle. (This
flag can also be set with the SetHandleInformation function.) Finally, the
“No rights upgrade” bit indicates whether access rights should be upgraded if
the handle is duplicated to a process with higher privileges.
These last four flags are exposed to drivers through the
OBJECT_HANDLE_INFORMATION structure that is passed in to APIs such
as ObReferenceObjectByHandle, and map to OBJ_INHERIT (0x2),
OBJ_AUDIT_OBJECT_CLOSE (0x4), OBJ_PROTECT_CLOSE (0x1), and
OBJ_NO_RIGHTS_UPGRADE (0x8), which happen to match exactly with
“holes” in the earlier OBJ_ attribute definitions that can be set when creating
an object. As such, the object attributes, at runtime, end up encoding both
specific behaviors of the object, as well as specific behaviors of a given
handle to said object.
Finally, we mentioned the existence of a reference usage count in both the
encoding of the pointer count field of the object’s header, as well as in the
handle table entry. This handy feature encodes a cached number (based on
the number of available bits) of preexisting references as part of each handle
entry and then adds up the usage counts of all processes that have a handle to
the object into the pointer count of the object’s header. As such, the pointer
count is the number of handles, kernel references through
ObReferenceObject, and the number of cached references for each handle.
Each time a process finishes to use an object, by dereferencing one of its
handles—basically by calling any Windows API that takes a handle as input
and ends up converting it into an object—the cached number of references is
dropped, which is to say that the usage count decreases by 1, until it reaches
0, at which point it is no longer tracked. This allows one to infer exactly the
number of times a given object has been utilized/accessed/managed through a
specific process’s handle.
The debugger command !trueref, when executed with the -v flag, uses this
feature as a way to show each handle referencing an object and exactly how
many times it was used (if you count the number of consumed/dropped usage
counts). In one of the next experiments, you’ll use this command to gain
additional insight into an object’s usage.
System components and device drivers often need to open handles to
objects that user-mode applications shouldn’t have access to or that simply
shouldn’t be tied to a specific process to begin with. This is done by creating
handles in the kernel handle table (referenced internally with the name
ObpKernelHandleTable), which is associated with the System process. The
handles in this table are accessible only from kernel mode and in any process
context. This means that a kernel-mode function can reference the handle in
any process context with no performance impact.
The Object Manager recognizes references to handles from the kernel
handle table when the high bit of the handle is set—that is, when references
to kernel-handle-table handles have values greater than 0x80000000 on 32-
bit systems, or 0xFFFFFFFF80000000 on 64-bit systems (since handles are
defined as pointers from a data type perspective, the compiler forces sign-
extension).
The kernel handle table also serves as the handle table for the System and
minimal processes, and as such, all handles created by the System process
(such as code running in system threads) are implicitly kernel handles
because the ObpKernelHandleTable symbol is set the as ObjectTable of the
EPROCESS structure for these processes. Theoretically, this means that a
sufficiently privileged user-mode process could use the DuplicateHandle API
to extract a kernel handle out into user mode, but this attack has been
mitigated since Windows Vista with the introduction of protected processes,
which were described in Part 1.
Furthermore, as a security mitigation, any handle created by a kernel
driver, with the previous mode set to KernelMode, is automatically turned
into a kernel handle in recent versions of Windows to prevent handles from
inadvertently leaking to user space applications.
EXPERIMENT: Viewing the handle table with the
kernel debugger
The !handle command in the kernel debugger takes three
arguments:
Click here to view code image
!handle   
The handle index identifies the handle entry in the handle table.
(Zero means “display all handles.”) The first handle is index 4, the
second 8, and so on. For example, typing !handle 4 shows the first
handle for the current process.
The flags you can specify are a bitmask, where bit 0 means
“display only the information in the handle entry,” bit 1 means
“display free handles (not just used handles),” and bit 2 means
“display information about the object that the handle refers to.”
The following command displays full details about the handle table
for process ID 0x1540:
Click here to view code image
lkd> !handle 0 7 1540
PROCESS ffff898f239ac440
    SessionId: 0  Cid: 1540    Peb: 1ae33d000  ParentCid: 
03c0
    DirBase: 211e1d000  ObjectTable: ffffc704b46dbd40  
HandleCount: 641.
    Image: com.docker.service
Handle table at ffffc704b46dbd40 with 641 entries in use
0004: Object: ffff898f239589e0  GrantedAccess: 001f0003 
(Protected) (Inherit) Entry: ffffc704b45ff010
Object: ffff898f239589e0  Type: (ffff898f032e2560) Event
    ObjectHeader: ffff898f239589b0 (new version)
        HandleCount: 1  PointerCount: 32766
0008: Object: ffff898f23869770  GrantedAccess: 00000804 
(Audit) Entry: ffffc704b45ff020
Object: ffff898f23869770  Type: (ffff898f033f7220) 
EtwRegistration
    ObjectHeader: ffff898f23869740 (new version)
        HandleCount: 1  PointerCount: 32764
Instead of having to remember what all these bits mean, and
convert process IDs to hexadecimal, you can also use the debugger
data model to access handles through the Io.Handles namespace of
a process. For example, typing dx @$curprocess.Io.Handles[4]
will show the first handle for the current process, including the
access rights and name, while the following command displays full
details about the handles in PID 5440 (that is, 0x1540):
Click here to view code image
lkd> dx -r2 @$cursession.Processes[5440].Io.Handles
@$cursession.Processes[5440].Io.Handles
    [0x4]
        Handle           : 0x4
        Type             : Event
        GrantedAccess    : Delete | ReadControl | WriteDac | 
WriteOwner | Synch | QueryState | ModifyState
        Object           [Type: _OBJECT_HEADER]
    [0x8]
        Handle           : 0x8
        Type             : EtwRegistration
        GrantedAccess
        Object           [Type: _OBJECT_HEADER]
    [0xc]
        Handle           : 0xc
        Type             : Event
        GrantedAccess    : Delete | ReadControl | WriteDac | 
WriteOwner | Synch | QueryState | ModifyState
        Object           [Type: _OBJECT_HEADER]
You can use the debugger data model with a LINQ predicate to
perform more interesting searches, such as looking for named
section object mappings that are Read/Write:
Click here to view code image
lkd> dx @$cursession.Processes[5440].Io.Handles.Where(h => 
(h.Type == "Section") && (h.GrantedAccess.MapWrite) && 
(h.GrantedAccess.MapRead)).Select(h => h.ObjectName)
@$cursession.Processes[5440].Io.Handles.Where(h => (h.Type 
== "Section") && (h.GrantedAccess.MapWrite) && 
(h.GrantedAccess.MapRead)).Select(h => h.ObjectName)
    [0x16c]          : "Cor_Private_IPCBlock_v4_5440"
    [0x170]          : "Cor_SxSPublic_IPCBlock"
    [0x354]          : "windows_shell_global_counters"
    [0x3b8]          : "UrlZonesSM_DESKTOP-SVVLOTP$"
    [0x680]          : "NLS_CodePage_1252_3_2_0_0"
EXPERIMENT: Searching for open files with the
kernel debugger
Although you can use Process Hacker, Process Explorer, Handle,
and the OpenFiles.exe utility to search for open file handles, these
tools are not available when looking at a crash dump or analyzing a
system remotely. You can instead use the !devhandles command to
search for handles opened to files on a specific volume. (See
Chapter 11 for more information on devices, files, and volumes.)
1. 
First you need to pick the drive letter you are interested in
and obtain the pointer to its Device object. You can use the
!object command as shown here:
Click here to view code image
lkd> !object \Global??\C:
Object: ffffc704ae684970  Type: (ffff898f03295a60) 
SymbolicLink
    ObjectHeader: ffffc704ae684940 (new version)
    HandleCount: 0  PointerCount: 1
    Directory Object: ffffc704ade04ca0  Name: C:
    Flags: 00000000 ( Local )
    Target String is '\Device\HarddiskVolume3'
    Drive Letter Index is 3 (C:)
2. 
Next, use the !object command to get the Device object of
the target volume name:
Click here to view code image
1: kd> !object \Device\HarddiskVolume1
Object: FFFF898F0820D8F0 Type: (fffffa8000ca0750) 
Device
3. 
Now you can use the pointer of the Device object with the
!devhandles command. Each object shown points to a file:
Click here to view code image
lkd> !devhandles 0xFFFF898F0820D8F0
Checking handle table for process 0xffff898f0327d300
Kernel handle table at ffffc704ade05580 with 7047 
entries in use
PROCESS ffff898f0327d300
    SessionId: none  Cid: 0004    Peb: 00000000  
ParentCid: 0000
    DirBase: 001ad000  ObjectTable: ffffc704ade05580  
HandleCount: 7023.
    Image: System
019c: Object: ffff898F080836a0  GrantedAccess: 
0012019f (Protected) (Inherit) (Audit) Entry: 
ffffc704ade28670
Object: ffff898F080836a0  Type: (ffff898f032f9820) 
File
    ObjectHeader: ffff898F08083670 (new version)
        HandleCount: 1  PointerCount: 32767
        Directory Object: 00000000  Name: 
\$Extend\$RmMetadata\$TxfLog\
                                          $TxfLog.blf 
{HarddiskVolume4}
Although this extension works just fine, you probably noticed
that it took about 30 seconds to a minute to begin seeing the first
few handles. Instead, you can use the debugger data model to
achieve the same effect with a LINQ predicate, which instantly
starts returning results:
Click here to view code image
lkd> dx -r2 @$cursession.Processes.Select(p => 
p.Io.Handles.Where(h =>
     h.Type == "File").Where(f => 
f.Object.UnderlyingObject.DeviceObject ==
     (nt!_DEVICE_OBJECT*)0xFFFF898F0820D8F0).Select(f =>
     f.Object.UnderlyingObject.FileName))
@$cursession.Processes.Select(p => p.Io.Handles.Where(h => 
h.Type == "File").
Where(f => f.Object.UnderlyingObject.DeviceObject == 
(nt!_DEVICE_OBJECT*)
0xFFFF898F0820D8F0).Select(f => 
f.Object.UnderlyingObject.FileName))
   [0x0]
   [0x19c]    : "\$Extend\$RmMetadata\$TxfLog\$TxfLog.blf" 
[Type: _UNICODE_STRING]
   [0x2dc]    : 
"\$Extend\$RmMetadata\$Txf:$I30:$INDEX_ALLOCATION" [Type: 
_UNICODE_STRING]
   [0x2e0]    : 
"\$Extend\$RmMetadata\$TxfLog\$TxfLogContainer00000000000000
000002"
                [Type: _UNICODE_STRING]
Reserve Objects
Because objects represent anything from events to files to interprocess
messages, the ability for applications and kernel code to create objects is
essential to the normal and desired runtime behavior of any piece of
Windows code. If an object allocation fails, this usually causes anything from
loss of functionality (the process cannot open a file) to data loss or crashes
(the process cannot allocate a synchronization object). Worse, in certain
situations, the reporting of errors that led to object creation failure might
themselves require new objects to be allocated. Windows implements two
special reserve objects to deal with such situations: the User APC reserve
object and the I/O Completion packet reserve object. Note that the reserve-
object mechanism is fully extensible, and future versions of Windows might
add other reserve object types—from a broad view, the reserve object is a
mechanism enabling any kernel-mode data structure to be wrapped as an
object (with an associated handle, name, and security) for later use.
As was discussed earlier in this chapter, APCs are used for operations such
as suspension, termination, and I/O completion, as well as communication
between user-mode applications that want to provide asynchronous
callbacks. When a user-mode application requests a User APC to be targeted
to another thread, it uses the QueueUserApc API in Kernelbase.dll, which
calls the NtQueueApcThread system call. In the kernel, this system call
attempts to allocate a piece of paged pool in which to store the KAPC control
object structure associated with an APC. In low-memory situations, this
operation fails, preventing the delivery of the APC, which, depending on
what the APC was used for, could cause loss of data or functionality.
To prevent this, the user-mode application, can, on startup, use the
NtAllocateReserveObject system call to request the kernel to preallocate the
KAPC structure. Then the application uses a different system call,
NtQueueApcThreadEx, that contains an extra parameter that is used to store