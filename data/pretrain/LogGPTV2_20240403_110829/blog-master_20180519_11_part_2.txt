--init-steps=init_steps  
    Perform just a selected set of the normal initialization steps.  
   init_steps specifies the initialization steps to be performed, 
   using one character per step. Each step is invoked in the 
   specified order. The default is  
    dtgvp. The available steps are:  
    d (Drop)  
        Drop any existing pgbench tables.  
    t (create Tables)  
        Create the tables used by the standard pgbench scenario, 
       namely pgbench_accounts, pgbench_branches, pgbench_history, 
       and pgbench_tellers.  
    g (Generate data)  
        Generate data and load it into the standard tables, 
       replacing any data already present.  
    v (Vacuum)  
        Invoke VACUUM on the standard tables.  
    p (create Primary keys)  
        Create primary key indexes on the standard tables.  
    f (create Foreign keys)  
        Create foreign key constraints between the standard tables. (Note that this step is not performed by default.)  
```  
- Add approximated Zipfian-distributed random generator to pgbench (Alik Khilazhev)  
增加Zipfian-distributed随机分布值的产生函数，可以生成需要Zipf分布的数据。Zipf分布数据的背景知识：  
https://baike.baidu.com/item/Zipf%E5%AE%9A%E5%BE%8B  
1935年,哈佛大学的语言学专家Zipf在研究英文单词出现的频率时,发现如果把单词出现的频率按由大到小的顺序排列,则每个单词出现的频率与它的名次的常数次幂存在简单的反比关系，这种分布就称为Zipf定律,它表明在英语单词中,只有极少数的词被经常使用,而绝大多数词很少被使用.实际上,包括汉语在内的许多国家的语言都有这种特点。这个定律后来在很多领域得到了同样的验证，包括网站的访问者数量、城镇的大小和每个国家公司的数量。  
相信你一定听过这样的说法：  
80%的财富集中在20%的人手中……  
80%的用户只使用20%的功能……  
20%的用户贡献了80%的访问量……  
…………  
你知道我在说“二八原则”或“20/80原则”，是的，没错！  
-----------  
如果把所有的单词（字）放在一起看呢？会不会20%的词（字）占了80%的出现次数？答案是肯定的。  
早在上个世纪30年代，就有人（Zipf）对此作出了研究，并给出了量化的表达——齐普夫定律（Zipf's Law）：一个词在一个有相当长度的语篇中的等级序号（该词在按出现次数排列的词表中的位置，他称之为rank，简称r）与该词的出现频率（他称为frequency，简称f）的乘积几乎是一个常数（constant，简称C）。用公式表示，就是 r × f = C 。  
```  
·   random_zipfian generates an approximated bounded zipfian 
distribution. For parameter in (0, 1), an approximated algorithm 
is taken from "Quickly Generating Billion-Record Synthetic Databases", 
Jim Gray et al, SIGMOD  
    1994. For parameter in (1, 1000), a rejection method is used, 
   based on "Non-Uniform Random Variate Generation", Luc Devroye, 
   p. 550-551, Springer 1986. The distribution is not defined 
   when the parameter's value is 1.0.  
    The drawing performance is poor for parameter values close 
   and above 1.0 and on a small range.  
    parameter defines how skewed the distribution is. The larger 
   the parameter, the more frequently values to the beginning 
   of the interval are drawn. The closer to 0 parameter is, 
   the flatter (more uniform) the access  
    distribution.  
Hash functions hash, hash_murmur2 and hash_fnv1a accept an input 
value and an optional seed parameter. In case the seed isn't 
provided the value of :default_seed is used, which is initialized 
randomly unless set by the  
command-line -D option. Hash functions can be used to scatter the 
distribution of random functions such as random_zipfian or 
random_exponential. For instance, the following pgbench script 
simulates possible real world  
workload typical for social media and blogging platforms where 
few accounts generate excessive load:  
    \set r random_zipfian(0, 100000000, 1.07)  
```  
- Allow the random seed to be set in pgbench (Fabien Coelho)  
```  
--random-seed=SEED  
  Set random generator seed. Seeds the system random number generator, 
  which then produces a sequence of initial generator states, one for 
  each thread. Values for SEED may be: time (the default, the seed is 
  based on the  
  current time), rand (use a strong random source, failing if none is 
  available), or an unsigned decimal integer value. The random generator 
  is invoked explicitly from a pgbench script (random...  functions) 
  or implicitly  
  (for instance option --rate uses it to schedule transactions). When 
  explicitly set, the value used for seeding is shown on the terminal. 
  Any value allowed for SEED may also be provided through the environment variable  
  PGBENCH_RANDOM_SEED. To ensure that the provided seed impacts all 
  possible uses, put this option first or use the environment variable.  
  Setting the seed explicitly allows to reproduce a pgbench run exactly, 
  as far as random numbers are concerned. As the random state is managed 
  per thread, this means the exact same pgbench run for an identical invocation  
  if there is one client per thread and there are no external or data 
  dependencies. From a statistical viewpoint reproducing runs exactly 
  is a bad idea because it can hide the performance variability or improve performance  
  unduly, e.g. by hitting the same pages as a previous run. However, 
  it may also be of great help for debugging, for instance re-running 
  a tricky case which leads to an error. Use wisely.  
```  
- Allow pgbench to do exponentiation with pow() and power() (Raúl Marín Rodríguez)  
支持power函数.  
- Add hashing functions to pgbench (Ildar Musin)  
```
Hash functions hash, hash_murmur2 and hash_fnv1a accept an input value and an 
optional seed parameter. In case the seed isn't provided the value of :default_seed is 
used, which is initialized randomly unless set by the command-line -D option. 
Hash functions can be used to scatter the distribution of random functions such 
as random_zipfian or random_exponential. For instance, the following pgbench 
script simulates possible real world workload typical for social media and 
blogging platforms where few accounts generate excessive load:  
\set r random_zipfian(0, 100000000, 1.07)  
\set k abs(hash(:r)) % 1000000  
```  
- Make pgbench statistics more accurate when using --latency-limit and --rate (Fabien Coelho)  
提高统计精确度  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")