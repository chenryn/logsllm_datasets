(Enc, Dec)
secure, the NIZK scheme is perfectly complete, com-
putationally zero-knowledge and simulation sound
extractable, the commitment scheme comm is adaptively
secure,
then the above protocol securely emulates
F(Ideal-NaiveKeyTheft).
D.3 Proofs for Naive Key Theft Contract
We now prove Theorem 1. For any real-world adver-
sary A, we construct an ideal-world simulator S, such
that no polynomial-time environment E can distinguish
whether it is in the real or ideal world. We ﬁrst describe
the construction of the simulator S and then argue the
indistinguishability of the real and ideal worlds.
The simulator
simP runs
D.3.1 Ideal-World Simulator
Due to Canetti [26], it sufﬁces to construct a simulator S
for the dummy adversary that simply passes messages to
and from the environment E. The ideal-world simulator
S also interacts with the F(Ideal-NaiveKeyTheft) ideal
functionality. Below we construct the user-deﬁned por-
tion of our simulator simP. Our ideal adversary S can
be obtained by applying the simulator wrapper S(simP).
The simulator wrapper modularizes the simulator con-
struction by factoring out the common part of the simu-
lation pertaining to all protocols in this model of execu-
tion.
Init.
((cid:99)crs,τ, ek) ←
NIZK.(cid:98)K(1λ ), and gives (cid:99)crs to the environment E, and
retains the trapdoor τ.
Simulating honest parties. When the environment E
sends inputs to honest parties, the simulator S needs to
simulate messages that corrupted parties receive, from
honest parties or from functionalities in the real world.
The honest parties will be simulated as below.
• Environment E sends
(“create”, $reward,
pkV ,Tend,C) to an honest contractor C: Simulator
simP receives (“create”, $reward, pkV ,Tend,C) from
F(Ideal-NaiveKeyTheft).
simP forwards the mes-
sage to the simulated inner contract functionality
G(Contract-NaiveKeyTheft), as well as to the envi-
ronment E.
• Environment E sends input (“intent”, skV) to an hon-
est perpetrator P: Simulator simP receives notiﬁcation
from the ideal functionality F(Ideal-NaiveKeyTheft)
without seeing skV. Simulator simP now computes ct
to be an encryption of the 0 vector. simP then sim-
ulates the NIZK π.
simP now computes the com-
mitment cm honestly.
simP sends (“intent”,cm) to
the simulated G(Contract-NaiveKeyTheft) functional-
ity, and simulates the contract functionality in the ob-
vious manner.
• Environment E sends input (“claim”) to an honest per-
petrator P:
input
Case 1: Contractor C is honest.
simP sends the
(“claim”, ct, π, r) values to the internally simu-
lated G(Contract-NaiveKeyTheft) functionality,
19
Case 2: Contractor C is corrupted.
where ct and π are the previously simulated val-
ues and r is the randomness used in the commit-
ment cm earlier.
simP receives skV
from F(Ideal-NaiveKeyTheft).
simP computes (ct(cid:48),π(cid:48)) terms using the hon-
est algorithm.
simP now explains the com-
mitment cm to the correctly formed (ct(cid:48),π(cid:48))
values. Notice here we rely the commitment
scheme being adaptively secure. Suppose the
corresponding randomness is r(cid:48) simP now sends
(“claim”, ct(cid:48),π(cid:48),r(cid:48)) to the internally simulated
G(Contract-NaiveKeyTheft) functionality, and
simulates the contract functionality in the obvi-
ous manner.
Simulating corrupted parties.
The following mes-
sages are sent by the environment E to the simula-
tor S(simP) which then forwards it onto simP. All
of the following messages received by simP are of
the “pseudonymous” type, we therefore omit writing
“pseudonymous”.
• simP receives an intent message (“intent”, cm):
forward it to the internally simulated G(Contract-
NaiveKeyTheft) functionality,
• simP receives a claim message (“claim”, ct,π,r,P):
If π veriﬁes, simulator simP runs the NIZK’s extrac-
tion algorithm, and extracts a set of witnesses includ-
ing skV. S now sends (“claim”, skV ,P) to the ideal
functionality F(Ideal-NaiveKeyTheft).
• Simulator simP receives a message (“create”, $reward,
pkV ,Tend,C): do nothing.
D.3.2
Indistinguishability of Real and Ideal Worlds
To prove indistinguishability of the real and ideal worlds
from the perspective of the environment, we will go
through a sequence of hybrid games.
Real world. We start with the real world with a dummy
adversary that simply passes messages to and from the
environment E.
Hybrid 1. Hybrid 1 is the same as the real world, ex-
cept that now the adversary (also referred to as a sim-
ulator) will call ((cid:99)crs,τ, ek) ← NIZK.(cid:98)K(1λ ) to perform
will pass the simulated (cid:99)crs to the environment E. When
a simulated setup for the NIZK scheme. The simulator
an honest perpetrator P produces a NIZK proof, the sim-
ulator will replace the real proof with a simulated NIZK
proof before passing it onto the environment E. The
simulated NIZK proof can be computed by calling the
NIZK.(cid:98)P((cid:99)crs,τ,·) algorithm which takes only the state-
ment as input but does not require knowledge of a wit-
ness.
Fact 1 It is not hard to see that if the NIZK scheme is
computational zero-knowledge, then no polynomial-time
environment E can distinguish Hybrid 1 from the real
world except with negligible probability.
Hybrid 2. The simulator simulates the G(Contract-
NaiveKeyTheft) functionality. Since all messages to
the G(Contract-NaiveKeyTheft) functionality are pub-
lic, simulating the contract functionality is trivial. There-
fore, Hybrid 2 is identically distributed as Hybrid 1 from
the environment E’s view.
Hybrid 3. Hybrid 3 is the same as Hybrid 2 except for
the following changes. When an honest party sends a
message to the contract (now simulated by the simulator
S), it will sign the message with a signature veriﬁable
under an honestly generated nym. In Hybrid 3, the sim-
ulator will replace all honest parties’ nyms and generate
these nyms itself. In this way, the simulator will simulate
honest parties’ signatures by signing them itself. Hybrid
3 is identitally distributed as Hybrid 2 from the environ-
ment E’s view.
Hybrid 4. Hybrid 4 is the same as Hybrid 3 except for
the following changes. When the honest perpetrator P
produces an ciphertext ct and if the contractor is also un-
corrupted, then simulator will replace this ciphertext with
an encryption of 0 before passing it onto the environment
E.
Fact 2 It is not hard to see that if the encryption scheme
is semantically secure, then no polynomial-time environ-
ment E can distinguish Hybrid 4 from Hybrid 3 except
with negligible probability.
Hybrid 5. Hybrid 5 is the same as Hybrid 4 except the
following changes. Whenever the environment E passes
to the simulator S a message signed on behalf of an hon-
est party’s nym, if the message and signature pair was not
among the ones previously passed to the environment E,
then the simulator S aborts.
Fact 3 Assume that the signature scheme employed is
secure, then the probability of aborting in Hybrid 5 is
negligible. Notice that from the environment E’s view,
Hybrid 5 would otherwise be identically distributed as
Hybrid 4 modulo aborting.
Hybrid 6. Hybrid 6 is the same as Hybrid 5 except
for the following changes. Whenever the environment
20
passes (“claim”, ct,π) to the simulator (on behalf of cor-
rupted party P), if the proof π veriﬁes under the state-
ment (ct,P), then the simulator will call the NIZK’s ex-
tractor algorithm E to extract a witness (r, skV ). If the
NIZK π veriﬁes under the statement (ct,P), and the ex-
tracted skV does not satisfy match(pkV , skV ) = 1, then
abort the simulation.
Fact 4 Assume that the NIZK is simulation sound ex-
tractable, then the probability of aborting in Hybrid 6
is negligible. Notice that from the environment E’s view,
Hybrid 6 would otherwise be identically distributed as
Hybrid 5 modulo aborting.
Finally, observe that Hybrid 6 is computationally in-
distinguishable from the ideal simulation S unless one
of the following bad events happens:
• The skV decrypted by an honest contractor C is differ-
ent from that extracted by the simulator S. However,
given that the encryption scheme is perfectly correct,
this cannot happen.
• The honest public key generation algorithm results
in key collisions. Obviously, this happens with neg-
ligible probability if the encryption and signature
schemes are secure.
Fact 5 Given that the encryption scheme is semanti-
cally secure and perfectly correct, and that the signa-
ture scheme is secure, then Hybrid 6 is computation-
ally indistinguishable from the ideal simulation to any
polynomial-time environment E.
D.4 Extension to Incentive Compatible
Key Theft Contract
Ideal program. The ideal program for an incentive
compatible key theft contract is given in Figure 11.
Contract. The incentive compatible key theft contract
is given in Figure 12 (a repeat of Figure 4 for the readers’
convenience).
Protocol. The user-side programs for the incentive com-
patible key theft contract are supplied in Figure 13.
Theorem 2 (Incentive compatible key theft contract)
Assume that the encryption scheme (Enc, Dec) is per-
fectly correct and semantically secure, the NIZK scheme
is perfectly complete, computationally zero-knowledge
and simulation sound extractable,
then the protocol
described in Figures 12 and 13 securely emulates
F(Ideal-NaiveKeyTheft).
Proof: A trivial extension of the proof of Theorem 1,
the naive key theft case.
Contract-KeyTheft
Init: Set state := INIT. Let crs := KeyGennizk(1λ ) denote
a hard-coded NIZK common reference string gener-
ated during a trusted setup process.
Create: Same as in Contract-NaiveKeyTheft (Figure 9), ex-
cept that an additional parameter ∆T is additionally
submitted by C.
Intent: Same as Contract-NaiveKeyTheft.
Claim: Same as Contract-NaiveKeyTheft, except that the
ledger update ledger[P] := ledger[P] +$reward does
not take place immediately.
Revoke: On receive (“revoke”, Πrevoke) from some R:
Assert Πrevoke is valid, and state (cid:54)= ABORTED.
ledger[R] := ledger[R] + $smallreward.
If state = CLAIMED:
t := (time elapsed since successful Claim).
P := (successful claimer)
rewardP := f ($reward,t).
ledger[P] := ledger[P] + rewardP .
Else, rewardP := 0
ledger[C] :=
ledger[C] + $reward− $smallreward
−rewardP
Set state := ABORTED.
Timer: If state = CLAIMED and at least ∆T time elapsed
since successful Claim:
ledger[P] := ledger[P] + $reward where P is suc-
cessful claimer;
Set state := ABORTED.
Else if current time T > Tend and state (cid:54)= ABORTED:
ledger[C] := ledger[C] + $reward.
Set state := ABORTED.
// P should not submit claims after time Tend − ∆T .
Figure 12: Key compromise CSC that thwarts revoke-
and-claim attacks. Although supercially written in a
slightly different manner, this ﬁgure is essentially equiv-
alent to Figure 4 in the main body. We repeat it here and
write the contract with respect to the differences from
Figure 9 for the readers’ convenience.
Ideal-KeyTheft
Init: Set state := INIT.
Create: Upon recipient of (“create”,$reward, pkV ,Tend,∆T )
from some contractor C:
Same as Ideal-NaiveKeyTheft (Figure 8), and addi-
tionally store ∆T .
Intent: Upon recipient of (“intent”, skV ) from some perpe-
trator P: Same as Ideal-NaiveKeyTheft.
Claim: Upon recipient of (“claim”) from perpetrator P:
Same as Ideal-NaiveKeyTheft except that the ledger
update ledger[P] := ledger[P] + $reward does not
happen.
Revoke: Upon receiving (“revoke”, Πrevoke) from some R:
Notify S of (“revoke”, Πrevoke)
Assert Πrevoke is valid, and state (cid:54)= ABORTED.
ledger[R] := ledger[R] + $smallreward.
If state = CLAIMED:
t := (time elapsed since successful Claim).
P := (successful claimer).
rewardP := f ($reward,t).
ledger[P] := ledger[P] + rewardP .
Else, rewardP := 0
ledger[C] := ledger[C] + $reward− rewardP
−$smallreward
Set state := ABORTED.
Timer: If state = CLAIMED and at least ∆T time elapsed
since successful Claim:
ledger[P] := ledger[P] + $reward;
Set state := ABORTED.
Else if current time T > Tend and state (cid:54)= ABORTED:
ledger[C] := ledger[C] + $reward.
Set state := ABORTED.
Figure 11: Thwarting revoke-and-claim attacks in the
key theft ideal program.
21
E Formal Protocols for Public Document
Leakage
E.1 Formal Description
Ideal program for public document leakage. We for-
mally describe the ideal program for public document
leakage in Figure 14.
Contract. The contract program for public leakage is
formally described in Figure 15, which is a repeat of Fig-
ure 2 for the readers’ convenience.
Protocol. The protocols for public leakage are formally
described in Figure 16.
Theorem 3 (Public leakage) Assume that the encryp-
tion scheme (Enc, Dec) is perfectly correct and seman-
tically secure, the NIZK scheme is perfectly complete
and computationally zero-knowledge,
then the proto-
col described in Figures 2 and 16 securely emulates
F(Ideal-PublicLeaks).
Proof: The formal proofs are supplied in Appendix E.2.
Ideal World Simulator
E.2 Proofs for Public Document Leakage
E.2.1
The wrapper part of S(simP) was described earlier , we
now describe the user-deﬁned simulator simP.
Init. The simulator simP runs crs ← NIZK.K(1λ ), and
(pk, sk) ← KeyGenenc(1λ ). The simulator gives (crs, pk)
to the environment E, and remembers sk.
The simulator S(simP) will also simulate the random
oracle (RO) queries. For now, we simply assume that
a separate RO instance is employed for each protocol
instance – or we can use the techniques by Canetti et
al. [28] to have a global RO for all protocol instances.
Simulation for an honest seller C.
• Create: Environment E sends input (“create”, M,
C, Tend)
simP receives
(“create”,
functionality
F(Ideal-PublicLeaks) – and this message is routed
through S. simP now generates an msk using the hon-
est algorithm. For i ∈ [n], pick cti
$←{0,1}(cid:96) where
(cid:96) denotes the length of each document. Pick c0 :=