1
OLONNONS-StrutsO logQjO RCE研究
看到有⼈分析Struts2 log4j2 RCE 
漏洞点位于 org.apache.struts2.dispatcher.DefaultStaticContentLoader#process  
具体调⽤过程为⾸先根据过滤器配置 
进⼊  org.apache.struts2.dispatcher.filter.StrutsExecuteFilter#doFilter  
1.前⾔ 
2
当mapping为空时也就是我们请求的路径找不到action时进⼊  executeStaticResourceRequest  
⾸先获取  getServletPath 如果  staticResourceLoader.canHandle(resourcePath) 为真的
话进⼊  findStaticResource canHandle的代码如下 
Java
复制代码
    public boolean executeStaticResourceRequest(HttpServletRequest 
request, HttpServletResponse response) throws IOException, 
ServletException {
        String resourcePath = RequestUtils.getServletPath(request);
        if ("".equals(resourcePath) && null != request.getPathInfo()) {
            resourcePath = request.getPathInfo();
        }
        StaticContentLoader staticResourceLoader = 
(StaticContentLoader)this.dispatcher.getContainer().getInstance(StaticCont
entLoader.class);
        if (staticResourceLoader.canHandle(resourcePath)) {
            staticResourceLoader.findStaticResource(resourcePath, request, 
response);
            return true;
        } else {
            return false;
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
3
判断我们路径中师傅包含 /struts/ 或 /static/ 。进⼊ findStaticResource  
Java
复制代码
    public boolean canHandle(String resourcePath) {
        return this.serveStatic && (resourcePath.startsWith("/struts/") || 
resourcePath.startsWith("/static/"));
    }
1
2
3
4
⾸先如果请求的⽂件存在就读取⽂件，读取的⽂件位于 
Java
复制代码
    public void findStaticResource(String path, HttpServletRequest 
request, HttpServletResponse response) throws IOException {
        String name = this.cleanupPath(path);
        Iterator i$ = this.pathPrefixes.iterator();
        InputStream is;
        do {
            while(true) {
                String pathPrefix;
                URL resourceUrl;
                do {
                    if (!i$.hasNext()) {
                        try {
                            response.sendError(404);
                        } catch (IOException var10) {
                            this.LOG.warn("Unable to send error response, 
code: {};", 404, var10);
                        } catch (IllegalStateException var11) {
                            this.LOG.warn("Unable to send error response, 
code: {}; isCommited: {};", 404, response.isCommitted(), var11);
                        }
                        return;
                    }
                    pathPrefix = (String)i$.next();
                    resourceUrl = this.findResource(this.buildPath(name, 
pathPrefix));
                } while(resourceUrl == null);
                is = null;
                try {
                    String pathEnding = this.buildPath(name, pathPrefix);
                    if (resourceUrl.getFile().endsWith(pathEnding)) {
                        is = resourceUrl.openStream();
                    }
                    break;
                } catch (IOException var12) {
                }
            }
        } while(is == null);
        this.process(is, path, request, response);
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
5
然后进⼊  process  
6
Java
复制代码
    protected void process(InputStream is, String path, HttpServletRequest 
request, HttpServletResponse response) throws IOException {
        if (is != null) {
            Calendar cal = Calendar.getInstance();
            long ifModifiedSince = 0L;
            try {
                ifModifiedSince = request.getDateHeader("If-Modified-
Since");
            } catch (Exception var19) {
                this.LOG.warn("Invalid If-Modified-Since header value: 
'{}', ignoring", request.getHeader("If-Modified-Since"));
            }
            long lastModifiedMillis = 
this.lastModifiedCal.getTimeInMillis();
            long now = cal.getTimeInMillis();
            cal.add(5, 1);
            long expires = cal.getTimeInMillis();
            if (ifModifiedSince > 0L && ifModifiedSince  -1) {
                servletPath = 
requestUri.substring(requestUri.indexOf(servletPath));
            }
        }
        if (StringUtils.isNotEmpty(servletPath)) {
            return servletPath;
        } else {
            startIndex = request.getContextPath().equals("") ? 0 : 
request.getContextPath().length();
            int endIndex = request.getPathInfo() == null ? 
requestUri.length() : requestUri.lastIndexOf(request.getPathInfo());
            if (startIndex > endIndex) {
                endIndex = startIndex;
            }
            return requestUri.substring(startIndex, endIndex);
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
10
主要修复的地⽅在于  
org.apache.struts2.dispatcher.DefaultStaticContentLoader#findStaticResource
这⾥这样检测基本没有绕过的可能了。 
分析玩上⾯触发  log4shell 的点后感觉这个漏洞点并不是很通⽤，因为⼤多数使⽤struts2框架的站点
xml配置是下⾯这样的。 
2.通⽤触发⽅式 
11
只有当我们请求的路径结尾为  .action 时才会进⼊struts2的处理流程，⽽上⾯那个漏洞的请求的路径都
是静态⽂件⾃然进⼊不到struts2的处理流程，更别提触发漏洞了。 
于是找了⼀个更为通⽤的点位于参数拦截器  
com.opensymphony.xwork2.interceptor.ParametersInterceptor#isWithinLengthLim
it  
当参数名⼤于最⼤⻓度时即可触发  log4shell ，下载了struts2⼏个版本发现官⽅只在2.5.x版本使⽤
log4j2。 
在本地搜索  struts2-core-*.jar  
12
可能由于⽤struts2开发的站都⽐较⽼的原因⼤多数都是⽤的⾮2.5.x版本。