(19)
(20)
(21)
with the following ratio:
𝑃(𝜃𝑣|𝑚𝑖 = 1, 𝑥𝑖, 𝑆)
𝑃(𝜃𝑣|𝑚𝑖 = 0, 𝑥𝑖, 𝑆) =
where
𝑃(𝜃|𝑆−𝑖) =
𝜃′ exp(−𝑙(𝑥𝑖, 𝜃′))𝑃(𝜃′|𝑆−𝑖)𝑑𝜃′
exp(−𝑙(𝑥𝑖, 𝜃𝑣))
∫
exp(−𝑗≠𝑖 𝑚 𝑗 · 𝑙(𝑥 𝑗 , 𝜃))
∫
𝜃′ exp(−𝑗≠𝑖 𝑚 𝑗 · 𝑙(𝑥 𝑗 , 𝜃′))𝑑𝜃′
(cid:18)∫
𝑃(𝑚𝑖 = 0) ) − 𝑙(𝑥𝑖, 𝜃𝑣)
(22)
(cid:19)
Putting things together, we have
𝑃(𝑚𝑖 = 1|𝜃𝑣, 𝑥𝑖, 𝑆) = 𝜎[ log( 𝑃(𝑚𝑖 = 1)
𝜃′
− log
exp(−𝑙(𝑥𝑖, 𝜃′))𝑃(𝜃′|𝑆−𝑖)𝑑𝜃′
]
(23)
The first term is equivalent to the log ratio of the prior probabil-
ity, i.e., the fraction of training data in the query set. In most of
our experiments, we use a balanced split which makes this term
vanish. Thus, only the second and last term will affect the attacker
prediction. Next, we investigate the last term. By applying Jensen’s
inequality, we can bound the last term from above.
− log
= − log E𝜃′ exp(−𝑙(𝑥𝑖, 𝜃′))
≤ −E𝜃′ log exp(−𝑙(𝑥𝑖, 𝜃′))
= E𝜃′𝑙(𝑥𝑖, 𝜃′)
(24)
Additionally, we can obtain the lower bound by taking the optimi-
mum over the full parameter space, i.e.
exp(−𝑙(𝑥 𝑗 , 𝜃′))𝑃(𝜃′|𝑆−𝑖)𝑑𝜃′
(cid:18)∫
(cid:19)
𝜃′
(cid:18)∫
𝜃′
− log
exp(−𝑙(𝑥 𝑗 , 𝜃′))𝑃(𝜃′|𝑆−𝑖)𝑑𝜃′
(cid:19)
≥ − log max
𝜃′
𝑙(𝑥𝑖, 𝜃′)
= min
𝜃′
exp(−𝑙(𝑥𝑖, 𝜃′))
(25)
Under the assumption of a highly peaked posterior, e.g. uni-modal
Gaussian [57], we can well approximate this quantity by using one
sample, i.e. using one reference model that is not trained on the
query sample. Formally,
𝑃(𝑚𝑖 = 1|𝜃𝑣, 𝑥𝑖, 𝑆) ≈ 𝜎 [−𝑙(𝑥𝑖, 𝜃𝑣) + 𝑙(𝑥𝑖, 𝜃𝑟)]
= 𝜎 [−𝐿(𝑥, R(𝑥|G𝑣)) + 𝐿(𝑥, R(𝑥|G𝑟)]
= 𝜎 [−𝐿cal(𝑥, R(𝑥|G𝑣)]
(26)
where the dependence on 𝑆, 𝜃𝑣 is absorbed in the calibrated distance
𝐿cal(𝑥, R(𝑥|G𝑣)).
Hence, the optimal attacker classifies 𝑥𝑖 as in the training set if the
membership probability is sufficiently large, i.e., 𝐿cal(𝑥, R(𝑥|G𝑣))
is sufficiently small (than a threshold), following from the non-
decreasing property of 𝜎.
□
B EXPERIMENT SETUP
B.1 Hyper-parameter Setting
We fix 𝑘 to be 20k for evaluating the full black-box attacks. We set
𝜆1 = 1.0, 𝜆2 = 0.2, 𝜆3 = 0.001 for our partial black-box and white-
box attack on CelebA, and set 𝜆1 = 1.0, 𝜆2 = 0.0, 𝜆3 = 0.0 for the
other cases. The maximum number of iterations for optimization
are set to be 1000 for our white-box attack and 10 for our partial
black-box attack.
B.2 Model Architectures
We use the official implementations of the victim GAN models.2 We
re-implement WGANGP model with a fully-connected structure
for non-image datasets. The network architecture is summarized in
Table 4. The depth of both the generator and discriminator is set to
5. The dimension of the hidden layer is fix to be 512 . We use ReLU
as the activation function for the generator and Leaky ReLU with
𝛼 = 0.2 for the discriminator, except for the output layer where
either the sigmoid or identity function is used.
Generator
(MIMIC-III)
FC (512)
ReLU
FC (512)
ReLU
FC (512)
ReLU
FC (512)
ReLU
FC (dim(𝑥))
Sigmoid
Generator
(Instagram)
FC (512)
ReLU
FC (512)
ReLU
FC (512)
ReLU
FC (512)
ReLU
FC (dim(𝑥))
Identity
Discriminator
(MIMIC-III and Instagram)
FC (512)
LeakyReLU (0.2)
FC (512)
LeakyReLU (0.2)
FC (512)
LeakyReLU (0.2)
FC (512)
LeakyReLU (0.2)
FC (1)
Identity
Table 4: Network architecutre of WGANGP on MIMIC-III
and Instagram.
B.3 Implementation of Baseline Attacks
We provide more details of implementing baseline attacks that are
discussed in Section 6.7.
LOGAN. For CelebA, we employ DCGAN as the attack model,
B.3.1
which is the same as in the original paper [25]. For MIMIC-III and
Instagram, we use WGANGP as the attack model.
B.3.2 MC. For implementing MC in the full black-box setting on
CelebA, we apply the same process of their best attack on the RGB
image dataset: First, we employ principal component analysis (PCA)
on a data subset disjoint from the query data. Then, we keep the
first 120 PCA components as suggested in the original paper [29]
and apply dimensionality reduction on the generated and query
data. Finally, we calculate the Euclidean distance of the projected
data and use the median heuristic to choose the threshold for MC
attack.
C ADDITIONAL RESULTS
C.1 Sanity-check in the White-box Setting
C.1.1 Analysis on optimization initialization. Due to the non-convexity
of our optimization problem, the choice of initialization is of great
importance. We explore three different initialization heuristics in
2
https://github.com/tkarras/progressive_growing_of_gans,
https://github.com/igul222/improved_wgan_training,
https://github.com/carpedm20/DCGAN-tensorflow,
https://github.com/mp2893/medgan,
https://drive.google.com/drive/folders/10RCFaA8kOgkRHXIJpXIWAC-
uUyLiEhlY
∥G𝑣(𝑧)−𝑥∥2
our experiments, including mean (𝑧0 = 𝜇), random (𝑧0 ∼ N(𝜇, Σ)),
and nearest neighbour (𝑧0 = argmin𝑧∈{𝑧𝑖 }𝑘
2). We find
𝑖=1
that the mean and nearest neighbor initializations perform well
in practice, and are in general better than random initialization
in terms of the successful reconstruction rate (reconstruction er-
ror smaller than 0.01). Therefore, we apply the mean and nearest
neighbor initialization in parallel, and choose the one with smaller
reconstruction error for the attack.
C.1.2 Analysis on Optimization Method. We explore three opti-
mizers with a range of hyper-parameter search: Adam [39], RM-
SProp [63], and L-BFGS [46] for reconstructing generated samples
of PGGAN on CelebA. Figure 13 shows that L-BFGS achieves supe-
rior convergence rate with no additional hyper-parameter. There-
fore, we select L-BFGS as our default optimizer in the white-box
setting.
Figure 13: Convergence rate of various optimizers (Adam,
RMSProp, L-BFGS) with different learning rates. Mean ini-
tialization (𝑧0 = 𝜇) is applied in this analysis study.
C.1.3 Analysis on Distance Metric Design for Optimization. We
show the effectiveness of our objective design (Equation 8). Al-
though optimizing only for element-wise difference term 𝐿2 yields
reasonably good reconstruction in most cases, we observe unde-
sired blur in reconstruction for CelebA images. Incorporating deep
image feature term 𝐿lpips and regularization term 𝐿reg benefits the
successful reconstruction rate. See Figure 14 for a demonstration.
Table 5: Successful reconstruction rate for generated sam-
ples from different GANs.
Success rate (%)
DCGAN PGGAN WGANGP VAEGAN
99.89
99.25
99.83
99.55
Sanity Check on Distance Metric Design for Optimization. In
C.1.4
addition, we check if the non-convexity of our objective function
affects the feasibility of attack against different victim GANs. We
apply optimization to reconstruct generated samples. Ideally, the
reconstruction should have no error because the query samples are
directly generated by the model, i.e., their preimages exist. We set a
030060090012001500iterations0.000.050.100.150.200.250.300.35reconstructionerrorAdam,lr=0.001Adam,lr=0.002Adam,lr=0.005Adam,lr=0.010Adam,lr=0.015Adam,lr=0.020Adam,lr=0.025RMSProp,lr=0.001RMSProp,lr=0.002RMSProp,lr=0.005RMSProp,lr=0.010RMSProp,lr=0.015RMSProp,lr=0.020RMSProp,lr=0.025L-BFGS(a)
(b)
(c)
Figure 14: Reconstruction error plots of PGGAN-generated samples on CelebA. The x-axis represents the Euclidean distance
between a reconstructed latent code to its ground truth value. The y-axis represents the 𝐿2 residual in the image domain. The
images in orange frame are generated samples. Their reconstructed copies are shown on their right. Samples below the dashed
line have reconstruction residuals smaller than 0.01, where no visual difference can be observed. Therefore, the reconstruction
is in general better if there is a higher portion of sample points below the dashed line (a higher successful reconstruction rate).
(a) Reconstruction results when disabling 𝐿lpips and 𝐿reg (𝜆1 = 1.0, 𝜆2 = 0, 𝜆3 = 0). (b) Reconstruction results when disabling 𝐿reg
(𝜆1 = 1.0, 𝜆2 = 0.2, 𝜆2 = 0). (c) Reconstruction results when enabling all the 𝐿2, 𝐿lpips and 𝐿reg terms (𝜆1 = 1.0, 𝜆1 = 0.2, 𝜆2 = 0.001).
We find that using all the terms most benefits the reconstruction.
threshold of 0.01 to the reconstruction error for counting successful
reconstruction rate, and evaluate the success rate for four GAN
models trained on CelebA. Table 5 shows that we obtained more
than 99% success rate for all the GANs, which verifies the feasibility
of our optimization-based attack.
C.1.5 Analysis on Distance Metric Design for Classification. We
propose to enable/disable 𝜆1, 𝜆2, or 𝜆3 in Equation 8 to investigate
the contribution of each term towards classification thresholding
(membership inference) on CelebA. In detail, we consider using (1)
the element-wise difference term 𝐿2 only, (2) the deep image feature
term 𝐿lpips only, and (3) all the three terms together to evaluate
attack performance. Figure 15 shows the AUCROC of attack against
each various GANs. We find that our complete distance metric
design achieves general superiority to single terms. Therefore, we
use the complete distance metric for classification thresholding.
Figure 15: White-box attack performance against GANs on
CelebA, w.r.t. distance metric design for classification.
C.2 Additional Quantitative Results
C.2.1 Evaluation on Full Black-box Attack. Attack Performance
w.r.t. Training Set Size: Table 6 corresponds to Figure 5(a), Fig-
ure 5(b), and Figure 5(c) in the main paper.
PGGAN
WGANGP
64
1.00
1.00
128
1.00
1.00
64
WGANGP
0.98
MEDGAN 0.78
128
0.97
0.65
(a) CelebA
512
256
0.99
1.00
1.00
0.97
(b) MIMIC-III
512
256
0.87
0.93
0.57
0.54
(c) Instagram
1024
0.95
0.89
2048
0.79
0.72
4096
0.58
0.62
20k
0.51
0.51
1024
0.81
0.52
2048
0.68
0.52
4096
0.54
0.51
8192
0.52
0.51
WGANGP
64
1.00
128
1.00
256
0.97
512
0.90
1024
0.72
2048
0.54
4096
0.50
8192
0.50
10k
0.50
Table 6: Full black-box attack performance w.r.t. training set
size.
Attack Performance w.r.t. Training Set Selection: Table 7 cor-
responds to Figure 6 in the main paper.
C.2.2 Evaluation on Partial Black-box Attack. Attack Performance
w.r.t. Training Set Selection: Table 7 corresponds to Figure 6 in
the main paper.
051015202530zspaceeuclideandistance0.000.020.040.060.080.10pixelspaceeuclideandistance99.395%L2051015202530zspaceeuclideandistance0.000.020.040.060.080.10pixelspaceeuclideandistance99.735%L2+Llpips051015202530zspaceeuclideandistance0.000.020.040.060.080.10pixelspaceeuclideandistance99.825%L2+Llpips+LregPGGANWGANGPDCGANVAEGAN0.50.60.7AUCROCCelebAL2LlpipsL2+Llpips+Lreg(a) Full black-box
PGGAN WGANGP DCGAN VAEGAN
random
identity
0.51
0.53
0.51
0.53
0.51
0.51
0.50
0.51
PGGAN
WGANGP