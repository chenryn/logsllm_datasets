Towards a Linked Open Data Based Device Recommendation in IoT 35
a unique WebID, this id is a unique URL that will identify a user and provide
access to all data authorized by him through HTTP requests. The second com-
ponent, is the SOLID application that allows users to register/add, view, and
edit data on PODs. By implementing the SOLID framework in our approach,
we provide each device owner the ability to control access to his devices’ data
thus preserving his privacy.
Fig.1. Overview of the approach architecture in a smart home domain
2.4 Architecture
Fig.1 represents an architecture of our approach in a smart home domain. It’s
made up of two components. The user will also have a role in the architecture
by registering and providing initial information about his devices.
SOLIDServer: TheSOLIDserverwillbeavailableforallcontrolnodes.Itwill
be used to register and annotate users and devices as well as store all annotated
data. To do this, the server will use a base ontology to describe and annotate
devices with LOD resources. After registration, each user and device will be
identified using a WebID. To allow the discovery of different devices, the server
will act as a global directory for the control nodes. This directory will contain
WebIDs of users and their owned devices. Using this global directory, a control
nodecangettheWebIDofadevicethroughwhichsemanticdatadescribingthis
device can be accessed according to the device’s owner permissions.
Control Node: Thecontrol nodecouldbehostedlocally ordeployed remotely
on a Cloud service. It has access to the SOLID server to perform the following
operations:
36 F. Komeiha
1. Providing the user with an interface to register and create his profile thus
obtaining a unique WebID for himself.
2. Allowing the user to register new devices and obtaining a unique WebID for
each registered device via the SOLID server.
3. Tracking the availability of the devices in its managed network.
4. Performing similarity and recommendation of IoT devices. For this task, the
control node will use LDS5, our library of LOD-based similarity measures.
End User: The user registers devices in his network through the interface
implemented in the control node. The registration process will allow him to
createhisprofile,add/managealistofhisfriendsaswellasprovideinformation
about IoT devices in his ecosystem. The user will also set the permissions for
data availability and accessibility to other control nodes.
Figure2 depicts detailed description about the components and functionali-
ties of our proposed approach.
Fig.2. Detailed representation of our SOLID-based device recommendation approach
5 https://github.com/FouadKom/lds.
Towards a Linked Open Data Based Device Recommendation in IoT 37
3 Challenges
Three major challenges face our approach, mainly in the recommendation pro-
cess. These challenges stem from the SOLID architecture itself which aims to
decentralize data storage. To do so, SOLID allows PODs to be data containers
accessedfromdifferentapplications.Inourapproach,thedataPODusedcanbe
either hosted by the SOLID server or a different POD provider could be used to
contain data about users and their devices. Our challenges come from the latter
case:
– The first challenge may be faced as each POD provider may have different
devicedescriptionframeworksorontologies.Thismeansthatdifferentvocab-
ularies might be used which will affect the ability of the system to perform
similarity calculations and recommendations correctly. In this case, ontology
alignment mechanisms should be utilized.
– Thesecondchallengeisthedatadistribution.TheutilizationofseveralPOD
providerstodescribedevicesmeansdataisdistributedamongseveralservers.
Thismeansthattherecommendationprocess,inthiscase,willrequireaccess-
ing several providers to retrieve data of devices. Thus, the recommendation
process could be time-consuming. This issue can be solved by introducing
data caching and indexing of previously recommended devices at the control
node level. This might help decrease the time needed for recommendations
and limit the number of data access. This leads us to the third challenge.
– Caching user data by the recommendation system could violate user privacy
policy when the user updates it. A user could permit our system to use for
the first time a part of the data, then he decides to no longer share access.
To solve this challenge, we must provide a privacy policy update mechanism
triggered once the user updates his permissions.
4 Related Work
After the introduction of SWoT, many approaches relying on semantic device
annotation were introduced.
In [4], authors propose a recommender system based on a service broker.
They utilize the service-oriented architecture where devices are conceptualized
asservicesforaccessingtheirfunctionalities.TheframeworkusesAgglomerative
bottom-up Clustering to increase the velocity of recommendations. Similarity
between services is calculated using the Normalized Google Distance (NGD).
In [6] authors propose a context-aware semantic-based discovery mecha-
nism. The architecture is composed of three main levels. Directory level which
uses a multi-proxy module for translation between devices using different pro-
tocols. Devices are then annotated semantically through ontological concepts.
Constrained-network level where a concept directory containing entries of used
concepts for annotations and the URL of annotated resources is defined. This
facilitates the discovery of similar devices annotated using the same ontology
38 F. Komeiha
concepts.Unconstrainednetwork(Internet)levelwhereresourcedirectoriescom-
municate over a P2P overlay for a global device discovery.
In[8]authorsintroduceadistributedmodulardirectoryofserviceproperties.
Authors try to solve the problem of complexity and low processing of ontologies
by providing distributed independent directories called search providers. Each
searchproviderrepresentsasemanticpredicateinanontology.Theontologycan
beextendedbyaddinganewsearchprovider.Todiscoverservices,thearchitec-
tureenablescomplexqueryingofsearchprovidersthroughqueryfederation.The
service discovery mechanism is based on the Virtual State Layer (VSL) middle-
ware which implements a security-by-design, and secure data access is ensured
through role-based access model.
In [12], authors present a social architecture for IoT service recommenda-
tion. The architecture has 3 layers: a perception layer, a network layer, and an
interoperability layer. The perception layer detects devices in the architecture.
The network layer maps IoT data to communication protocols. The interoper-
ability layer is based on oneM2M6and fiware7protocols for ensuring seamless
communication between devices. The architecture also includes a recommender
system that manages user-user, thing-thing, and user-thing relations based on
dataretrievedfromtheinteroperabilitylayer.Relationsarethenusedforservice
recommendation.
Tothebestofourknowledge,ourworkisthefirstattempttoannotatesmart
devices using the LOD cloud for IoT device recommendation. Other works such
as[5,10]benefitfromLODtoannotatesensordataforreasoningandknowledge
discovery.Overallinthedevicediscoverydomain,only[8]tookintoconsideration
theincapabilityofsingledomainontologiestocoverallnecessarydomainaspects.
Besides, their approach was the only approach to provide a secure data access.
However, contrary to their approach, by employing an LOD based annotation
we are benefiting from the regularly updated data cloud without any additional
update to the device annotation schema. In terms of privacy and security, our
SOLID based approach is a more dynamic user-centric approach where users
control access to their data in contrast to their role-based data access approach.
5 Conclusion and Future Work
Inthispaper,wepresentedourIoTdevicerecommendationapproachthatanno-
tatesdevicesusingtheLODresources.OurapproachbenefitsfromexistingLOD-
based semantic measures for similarity calculation between annotated devices.
We utilized a user-user social relation network to recommend devices to a user
basedonhisfriend’secosystems.Takingintoconsiderationdataprivacy,weuti-
lizetheSOLIDarchitectureprovidingdeviceownersmorecontrolovertheirdata
and who can access it.
6 https://www.onem2m.org/.
7 https://www.fiware.org/developers/catalogue/.
Towards a Linked Open Data Based Device Recommendation in IoT 39
In the future, we intend to start our experimentation and evaluation process
in a smart-home use case. We also aim to further improve our approach and
solve the previously mentioned and/or eventual new challenges.
References
1. Beltran,V.,Ortiz,A.M.,Hussein,D.,Crespi,N.:Asemanticservicecreationplat-
form for social IoT (March 2014). https://doi.org/10.1109/WF-IoT.2014.6803173
2. Chen, Y., Zhou, M., Zheng, Z., Chen, D.: Time-aware smart object recommenda-
tion in social internet of things. IEEE Internet Things J. 7(3), 2014–2027 (2020)
3. Cheniki,N.,Belkhir,A.,Sam,Y.,Messai,N.:LODS:alinkedopendatabasedsim-
ilarity measure. In: 2016 IEEE 25th International Conference on Enabling Tech-
nologies: Infrastructure for Collaborative Enterprises (WETICE), Paris, France,
pp. 229–234 (June 2016)
4. Chirila, S., Lemnaru, C., Dinsoreanu, M.: Semantic-based IoT device discovery
andrecommendationmechanism.In:2016IEEE12thInternationalConferenceon
IntelligentComputerCommunicationandProcessing(ICCP),pp.111–116(2016)
5. Gyrard,A.:Anarchitecturetoaggregateheterogeneousandsemanticsenseddata.
In: Cimiano, P., Corcho, O., Presutti, V., Hollink, L., Rudolph, S. (eds.) ESWC
2013.LNCS,vol.7882,pp.697–701.Springer,Heidelberg(2013).https://doi.org/
10.1007/978-3-642-38288-8 54
6. Mecibah, R., Djamaa, B., Yachir, A., Aissani, M.: A scalable semantic resource
discovery architecture for the internet of things. In: Demigha, O., Djamaa, B.,
Amamra, A. (eds.) CSA 2018. LNNS, vol. 50, pp. 37–47. Springer, Cham (2019).
https://doi.org/10.1007/978-3-319-98352-3 5
7. Meymandpour,R.,Davis,J.G.:Enhancingrecommendersystemsusinglinkedopen
data-basedsemanticanalysisofitems.In:3rdAustralasianWebConference(AWC
2015), Sydney, Australia (27–30 January 2015)
8. Pahl, M., Liebald, S.: A modular distributed IoT service discovery. In: 2019
IFIP/IEEE Symposium on Integrated Network and Service Management (IM),
pp. 448–454 (2019)
9. Passant,A.:Measuringsemanticdistanceonlinkingdataandusingitforresources
recommendations. In: AAAI Spring Symposium: Linked Data Meets Artificial
Intelligence, vol. 77, p. 123 (2010)
10. Pfisterer, D., et al.: Spitfire: toward a semantic web of things. IEEE Commun.
Mag. 49(11), 40–48 (2011)
11. Piao,G.,Ara,S.,Breslin,J.G.:Computingthesemanticsimilarityofresourcesin
DBpedia for recommendation purposes. In: Qi, G., Kozaki, K., Pan, J.Z., Yu, S.
(eds.) JIST 2015. LNCS, vol. 9544, pp. 185–200. Springer, Cham (2016). https://
doi.org/10.1007/978-3-319-31676-5 13
12. Saleem, Y., Crespi, N., Rehmani, M.H., Copeland, R., Hussein, D., Bertin, E.:
Exploitation of social IoT for recommendation services. In: 2016 IEEE 3rd World
Forum on Internet of Things (WF-IoT), pp. 359–364 (2016)
13. Zorgati, H., Djemaa, R.B., Amor, I.A.B.: Service discovery techniques in internet
ofthings: a survey. In: 2019 IEEEInternational Conference on Systems, Man and
Cybernetics (SMC), pp. 1720–1725 (2019)
Learning Performance Models
Automatically
B
Runan Wang( )
Department of Computing, Imperial College London, London, UK
PI:EMAIL
Abstract. To ensure the quality of frequent releases in DevOps con-
text, performance models enable system performance simulation and
prediction. However, building performance models for microservice or
serverless-basedapplicationsinDevOpsiscostlyanderror-prone.Thus,
we propose to employ model discovery learning for performance mod-
els automatically. To generate basic models to represent the applica-
tion,wefirstintroduceperformance-relatedTOSCAmodelsasarchitec-
tural models. Then we transform TOSCA models into layered queueing
network models. A main challenge of performance model generation is
model parametrization. We propose to learn parametric dependencies
from monitoring data and systems analysis to capture the relationship
betweeninputdataandresourcedemand.Withfrequentreleasesofnew
features,weconsideremployingdetectingparametricdependenciesincre-
mentally to keep updating performance models in each iteration.
· ·
Keywords: Model discovery Performance models Model
·
parameterization Parametric dependencies
1 Introduction
DevOps has been widely adopted by in the industry, becoming an important
part of software development methodologies. However, how to keep the rapid
pace of deliveries and ensure the quality of the software at the same time is an
open challenge in the context of DevOps.
Learningperformancemodelsisamodeldiscoveryprocessofbuildingperfor-
mance models with accurate specification of properties based on learning infor-
mation through systems with testing and monitoring. Learning performance
models for prediction is quite useful in DevOps practices because it can pro-
vide the possibility to answer a series of what-if questions about system perfor-
mance. Besides, learning performance prediction models can also help to specu-
latethesystemstructurewithoutlookingdeepintoeachcomponentdevelopment
for both developers and cloud infrastructure providers. Developers can analyze
and predict system performance with simulation results and calibrate the per-
formance models in each DevOps iteration. In general, the providers are not
Supervised by: G. Casale and A. Filieri.
(cid:2)c SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.40–46,2021.
https://doi.org/10.1007/978-3-030-76352-7_6
Learning Performance Models Automatically 41
explicit about the internals of microservices (e.g., source codes). Thus, learning
performance models through monitoring the deployed microservices can help to
generate basic performance models with limited information about the develop-
ment of each microservice. The infrastructure providers can infer the customer
usageofmicroservicesandachieveresourcemanagementwithsuchperformance
prediction models.
In order to satisfy the requirement of automation in DevOps, high-degree
automation is required in learning performance models. In this paper, we pro-
pose to learn performance models and their parameters from data-driven anal-
ysis on monitoring data. Compared with these existing works modelling with
PCM or UML specifications [2,12] that requires deep understanding of internal
components or manual definition, the generation of a basic TOSCA model can
be done by analyzing network traffic, allowing automatic extraction and gen-
eration. With parameters of performance models specified in TOSCA models,
it can be transformed into LQN models automatically. By learning parametric
dependenciesfrommonitoringdataandcode-levelanalysis,resourcedemandcan
be calibrated with additional dependencies and the topological structure can be
updated to adapt to new changes.
Thispaperaimstoprovideaninsightintolearningperformancemodelsauto-
matically for DevOps practices, which will combine model discovery, program
analysis, and machine learning approaches to carry out the following research
problems.
– P1: Generate and transform performance models automatically by learning
monitoring data.
– P2: Accurate model parameters estimation.
– P3:Extractandlearnparametricdependenciesforperformancemodelsincre-
mentally.
– P4: Iteratively update and enrich performance models in DevOps cycles.
2 Related Work
Performance Model Generation. Performance models are an abstraction of
a real system, which can describe the system with a simplified representation
and enable simulations and predictions. To learn performance models in the
context of DevOps, it is important to involve both architectural and stochas-
tic models. This is because generating architectural models can help adapt to
new changes and involving with stochastic models can be solved with analytical
solversorsimulations.Existingmethodsforgeneratingarchitecture-levelmodels
like UML [12] and Palladio component model (PCM) [2] rely on manual analy-
sis and domain knowledge, which cannot satisfy the requirement of high-degree
automation in DevOps. In addition, the description languages of architectural
modelsinpreviousworksareindependentofdeployment,whichbringscomplex-