### Towards a Linked Open Data Based Device Recommendation in IoT

In our approach, each user is assigned a unique WebID, which is a unique URL that identifies the user and provides access to all data authorized by them through HTTP requests. The second component is the SOLID application, which allows users to register, view, and edit data on Personal Online Data (POD) stores. By implementing the SOLID framework, we provide device owners with the ability to control access to their devices' data, thereby preserving their privacy.

#### 2.4 Architecture

Figure 1 represents the architecture of our approach in a smart home domain, consisting of two main components. The user also plays a role in the architecture by registering and providing initial information about their devices.

**SOLID Server:**
- The SOLID server will be available to all control nodes.
- It will be used to register and annotate users and devices, as well as store all annotated data.
- The server will use a base ontology to describe and annotate devices with Linked Open Data (LOD) resources.
- After registration, each user and device will be identified using a WebID.
- To facilitate the discovery of different devices, the server will act as a global directory for the control nodes, containing WebIDs of users and their owned devices.
- Using this global directory, a control node can retrieve the WebID of a device, and access semantic data describing the device according to the owner's permissions.

**Control Node:**
- The control node can be hosted locally or deployed remotely on a cloud service.
- It has access to the SOLID server to perform the following operations:
  1. Provide the user with an interface to register and create their profile, thus obtaining a unique WebID.
  2. Allow the user to register new devices and obtain a unique WebID for each registered device via the SOLID server.
  3. Track the availability of devices in its managed network.
  4. Perform similarity and recommendation of IoT devices using LDS5, our library of LOD-based similarity measures.

**End User:**
- The user registers devices in their network through the interface implemented in the control node.
- The registration process allows the user to create their profile, manage a list of friends, and provide information about IoT devices in their ecosystem.
- The user will also set permissions for data availability and accessibility to other control nodes.

Figure 2 provides a detailed description of the components and functionalities of our proposed approach.

**Challenges:**

Three major challenges face our approach, primarily in the recommendation process. These challenges stem from the SOLID architecture, which aims to decentralize data storage. In our approach, the data PODs used can be either hosted by the SOLID server or by a different POD provider. Our challenges arise from the latter case:

- **First Challenge:** Each POD provider may have different device description frameworks or ontologies, leading to the use of different vocabularies. This affects the system's ability to perform similarity calculations and recommendations correctly. Ontology alignment mechanisms should be utilized to address this issue.
- **Second Challenge:** Data distribution. Utilizing several POD providers to describe devices means that data is distributed among multiple servers. This makes the recommendation process time-consuming as it requires accessing several providers to retrieve device data. Introducing data caching and indexing of previously recommended devices at the control node level can help decrease the time needed for recommendations and limit the number of data accesses.
- **Third Challenge:** Caching user data by the recommendation system could violate user privacy policies if the user updates their permissions. A privacy policy update mechanism must be provided to ensure that the system respects the user's updated permissions.

**Related Work:**

After the introduction of the Semantic Web of Things (SWoT), many approaches relying on semantic device annotation have been introduced.

- **[4]:** Authors propose a recommender system based on a service broker. They utilize a service-oriented architecture where devices are conceptualized as services for accessing their functionalities. The framework uses Agglomerative bottom-up Clustering to increase the velocity of recommendations. Similarity between services is calculated using the Normalized Google Distance (NGD).
- **[6]:** Authors propose a context-aware, semantic-based discovery mechanism. The architecture consists of three main levels: a directory level with a multi-proxy module for protocol translation, a constrained-network level with a concept directory, and an unconstrained network (Internet) level where resource directories communicate over a P2P overlay for global device discovery.
- **[8]:** Authors introduce a distributed modular directory of service properties. They solve the problem of complexity and low processing of ontologies by providing distributed independent directories called search providers. Each search provider represents a semantic predicate in an ontology. The service discovery mechanism is based on the Virtual State Layer (VSL) middleware, which implements a security-by-design and ensures secure data access through a role-based access model.
- **[12]:** Authors present a social architecture for IoT service recommendation. The architecture includes three layers: a perception layer, a network layer, and an interoperability layer. The recommender system manages user-user, thing-thing, and user-thing relations based on data retrieved from the interoperability layer.

To the best of our knowledge, our work is the first attempt to annotate smart devices using the LOD cloud for IoT device recommendation. Other works such as [5, 10] benefit from LOD to annotate sensor data for reasoning and knowledge discovery. In the device discovery domain, only [8] considered the incapability of single-domain ontologies to cover all necessary domain aspects and provided secure data access. However, our SOLID-based approach is more dynamic and user-centric, allowing users to control access to their data, in contrast to a role-based data access approach.

**Conclusion and Future Work:**

In this paper, we presented our IoT device recommendation approach that annotates devices using LOD resources. Our approach benefits from existing LOD-based semantic measures for similarity calculation between annotated devices. We utilized a user-user social relation network to recommend devices based on a user's friends' ecosystems. Taking data privacy into consideration, we utilized the SOLID architecture to provide device owners with more control over their data and who can access it.

In the future, we intend to start our experimentation and evaluation process in a smart-home use case. We also aim to further improve our approach and address the previously mentioned and any new challenges that may arise.

**References:**

1. Beltran, V., Ortiz, A.M., Hussein, D., Crespi, N.: A semantic service creation platform for social IoT (March 2014). https://doi.org/10.1109/WF-IoT.2014.6803173
2. Chen, Y., Zhou, M., Zheng, Z., Chen, D.: Time-aware smart object recommendation in social internet of things. IEEE Internet Things J. 7(3), 2014–2027 (2020)
3. Cheniki, N., Belkhir, A., Sam, Y., Messai, N.: LODS: a linked open data based similarity measure. In: 2016 IEEE 25th International Conference on Enabling Technologies: Infrastructure for Collaborative Enterprises (WETICE), Paris, France, pp. 229–234 (June 2016)
4. Chirila, S., Lemnaru, C., Dinsoreanu, M.: Semantic-based IoT device discovery and recommendation mechanism. In: 2016 IEEE 12th International Conference on Intelligent Computer Communication and Processing (ICCP), pp. 111–116 (2016)
5. Gyrard, A.: An architecture to aggregate heterogeneous and semantic sensed data. In: Cimiano, P., Corcho, O., Presutti, V., Hollink, L., Rudolph, S. (eds.) ESWC 2013. LNCS, vol. 7882, pp. 697–701. Springer, Heidelberg (2013). https://doi.org/10.1007/978-3-642-38288-8_54
6. Mecibah, R., Djamaa, B., Yachir, A., Aissani, M.: A scalable semantic resource discovery architecture for the internet of things. In: Demigha, O., Djamaa, B., Amamra, A. (eds.) CSA 2018. LNNS, vol. 50, pp. 37–47. Springer, Cham (2019). https://doi.org/10.1007/978-3-319-98352-3_5
7. Meymandpour, R., Davis, J.G.: Enhancing recommender systems using linked open data-based semantic analysis of items. In: 3rd Australasian Web Conference (AWC 2015), Sydney, Australia (27–30 January 2015)
8. Pahl, M., Liebald, S.: A modular distributed IoT service discovery. In: 2019 IFIP/IEEE Symposium on Integrated Network and Service Management (IM), pp. 448–454 (2019)
9. Passant, A.: Measuring semantic distance on linking data and using it for resources recommendations. In: AAAI Spring Symposium: Linked Data Meets Artificial Intelligence, vol. 77, p. 123 (2010)
10. Pfisterer, D., et al.: Spitfire: toward a semantic web of things. IEEE Commun. Mag. 49(11), 40–48 (2011)
11. Piao, G., Ara, S., Breslin, J.G.: Computing the semantic similarity of resources in DBpedia for recommendation purposes. In: Qi, G., Kozaki, K., Pan, J.Z., Yu, S. (eds.) JIST 2015. LNCS, vol. 9544, pp. 185–200. Springer, Cham (2016). https://doi.org/10.1007/978-3-319-31676-5_13
12. Saleem, Y., Crespi, N., Rehmani, M.H., Copeland, R., Hussein, D., Bertin, E.: Exploitation of social IoT for recommendation services. In: 2016 IEEE 3rd World Forum on Internet of Things (WF-IoT), pp. 359–364 (2016)
13. Zorgati, H., Djemaa, R.B., Amor, I.A.B.: Service discovery techniques in internet of things: a survey. In: 2019 IEEE International Conference on Systems, Man and Cybernetics (SMC), pp. 1720–1725 (2019)

---

### Learning Performance Models Automatically

**Runan Wang**
Department of Computing, Imperial College London, London, UK
PI: EMAIL

**Abstract:**
In the DevOps context, performance models enable system performance simulation and prediction. However, building performance models for microservice or serverless-based applications in DevOps is costly and error-prone. Thus, we propose to employ model discovery learning for performance models automatically. To generate basic models to represent the application, we first introduce performance-related TOSCA models as architectural models. Then, we transform TOSCA models into layered queueing network models. A main challenge of performance model generation is model parametrization. We propose to learn parametric dependencies from monitoring data and systems analysis to capture the relationship between input data and resource demand. With frequent releases of new features, we consider employing incremental detection of parametric dependencies to keep updating performance models in each iteration.

**Keywords:**
Model discovery, Performance models, Model parameterization, Parametric dependencies

**1 Introduction**

DevOps has been widely adopted in the industry, becoming an important part of software development methodologies. However, maintaining the rapid pace of deliveries while ensuring software quality remains an open challenge in the DevOps context.

Learning performance models involves a model discovery process of building performance models with accurate property specifications based on learning from system testing and monitoring. This is particularly useful in DevOps practices as it can answer a series of "what-if" questions about system performance. Additionally, learning performance prediction models can help developers and cloud infrastructure providers speculate on the system structure without delving deeply into each component's development. Developers can analyze and predict system performance with simulation results and calibrate the performance models in each DevOps iteration. Infrastructure providers, who are often not explicit about the internals of microservices (e.g., source codes), can infer customer usage of microservices and achieve resource management with such performance prediction models.

To meet the automation requirements in DevOps, high-degree automation is essential in learning performance models. In this paper, we propose to learn performance models and their parameters from data-driven analysis of monitoring data. Unlike existing works that require deep understanding of internal components or manual definition, our approach allows automatic extraction and generation of basic TOSCA models by analyzing network traffic. With parameters specified in TOSCA models, they can be transformed into Layered Queueing Network (LQN) models automatically. By learning parametric dependencies from monitoring data and code-level analysis, resource demand can be calibrated with additional dependencies, and the topological structure can be updated to adapt to new changes.

This paper aims to provide insights into learning performance models automatically for DevOps practices, combining model discovery, program analysis, and machine learning approaches to address the following research problems:

- **P1:** Generate and transform performance models automatically by learning from monitoring data.
- **P2:** Estimate model parameters accurately.
- **P3:** Extract and learn parametric dependencies for performance models incrementally.
- **P4:** Iteratively update and enrich performance models in DevOps cycles.

**2 Related Work**

**Performance Model Generation:**
Performance models are abstractions of real systems, enabling simulations and predictions. In the DevOps context, both architectural and stochastic models are crucial. Architectural models help adapt to new changes, while stochastic models can be solved with analytical solvers or simulations. Existing methods for generating architectural-level models, such as UML [12] and Palladio Component Model (PCM) [2], rely on manual analysis and domain knowledge, which do not meet the high-degree automation requirements in DevOps. Additionally, the description languages of architectural models in previous works are deployment-independent, adding complexity.

**References:**

1. Beltran, V., Ortiz, A.M., Hussein, D., Crespi, N.: A semantic service creation platform for social IoT (March 2014). https://doi.org/10.1109/WF-IoT.2014.6803173
2. Chen, Y., Zhou, M., Zheng, Z., Chen, D.: Time-aware smart object recommendation in social internet of things. IEEE Internet Things J. 7(3), 2014–2027 (2020)
3. Cheniki, N., Belkhir, A., Sam, Y., Messai, N.: LODS: a linked open data based similarity measure. In: 2016 IEEE 25th International Conference on Enabling Technologies: Infrastructure for Collaborative Enterprises (WETICE), Paris, France, pp. 229–234 (June 2016)
4. Chirila, S., Lemnaru, C., Dinsoreanu, M.: Semantic-based IoT device discovery and recommendation mechanism. In: 2016 IEEE 12th International Conference on Intelligent Computer Communication and Processing (ICCP), pp. 111–116 (2016)
5. Gyrard, A.: An architecture to aggregate heterogeneous and semantic sensed data. In: Cimiano, P., Corcho, O., Presutti, V., Hollink, L., Rudolph, S. (eds.) ESWC 2013. LNCS, vol. 7882, pp. 697–701. Springer, Heidelberg (2013). https://doi.org/10.1007/978-3-642-38288-8_54
6. Mecibah, R., Djamaa, B., Yachir, A., Aissani, M.: A scalable semantic resource discovery architecture for the internet of things. In: Demigha, O., Djamaa, B., Amamra, A. (eds.) CSA 2018. LNNS, vol. 50, pp. 37–47. Springer, Cham (2019). https://doi.org/10.1007/978-3-319-98352-3_5
7. Meymandpour, R., Davis, J.G.: Enhancing recommender systems using linked open data-based semantic analysis of items. In: 3rd Australasian Web Conference (AWC 2015), Sydney, Australia (27–30 January 2015)
8. Pahl, M., Liebald, S.: A modular distributed IoT service discovery. In: 2019 IFIP/IEEE Symposium on Integrated Network and Service Management (IM), pp. 448–454 (2019)
9. Passant, A.: Measuring semantic distance on linking data and using it for resources recommendations. In: AAAI Spring Symposium: Linked Data Meets Artificial Intelligence, vol. 77, p. 123 (2010)
10. Pfisterer, D., et al.: Spitfire: toward a semantic web of things. IEEE Commun. Mag. 49(11), 40–48 (2011)
11. Piao, G., Ara, S., Breslin, J.G.: Computing the semantic similarity of resources in DBpedia for recommendation purposes. In: Qi, G., Kozaki, K., Pan, J.Z., Yu, S. (eds.) JIST 2015. LNCS, vol. 9544, pp. 185–200. Springer, Cham (2016). https://doi.org/10.1007/978-3-319-31676-5_13
12. Saleem, Y., Crespi, N., Rehmani, M.H., Copeland, R., Hussein, D., Bertin, E.: Exploitation of social IoT for recommendation services. In: 2016 IEEE 3rd World Forum on Internet of Things (WF-IoT), pp. 359–364 (2016)
13. Zorgati, H., Djemaa, R.B., Amor, I.A.B.: Service discovery techniques in internet of things: a survey. In: 2019 IEEE International Conference on Systems, Man and Cybernetics (SMC), pp. 1720–1725 (2019)

---

This optimized version aims to make the text more coherent, clear, and professional. If you need further adjustments or specific sections to be refined, please let me know!