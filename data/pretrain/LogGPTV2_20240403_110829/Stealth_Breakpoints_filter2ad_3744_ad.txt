fragments, there are many such self-checking code frag-
ments. To further complicate matters, the self-checking code
fragments are generated at runtime with predeﬁned values
for the branch variable (EAX) for each fragment. This prede-
ﬁned value is the value for which the fragment will perform
the desired function. If, for a given self-checking code frag-
ment, the branch variable (EAX) contains a different value,
the functionality is undeﬁned. This makes the process of pre-
computing and manually adjusting the value of the EAX reg-
ister a tedious process.
As seen, traditional software breakpoints fail to help in
analysing the virus because of its self-modifying and self-
checking abilities. However, we can use VAMPiRE and hard-
ware breakpoints to set breakpoints on code fragments such
as the ones shown in ﬁgures 6 and 7. The performance mea-
surements comparing hardware breakpoints and VAMPiRE
are shown in Figure 8, for various such code fragments un-
der our prototype debugger. With VAMPiRE, for purposes of
measurement, code being debugged and breakpoints fall un-
der two categories. The ﬁrst is when the code being debugged
and the breakpoints are on separate memory pages. The sec-
ond is when the code and the breakpoints are on the same
page. The latency due to our framework for both cases with
various self-modifying and self-checking virus code frag-
ments is shown in Figure 8. The x-axis is the amount of clock
cycles that have elapsed between executing the code with the
breakpoint set and breakpoint triggering. The y-axis (cate-
gory axis) represents the code fragments which were chosen
arbitrarily from our debugging sessions with the W32.HIV.
Also, a part of the graph is magniﬁed (indicated by dotted
lines) to provide a clear representation of categories with low
values on the x-axis.
Figure 8. Performance of VAMPiRE vs Hard-
ware Breakpoints
From the graph we can see that the performance of VAM-
PiRE is comparable to hardware breakpoints in the case
where code and breakpoints exist on different memory pages.
However, in some cases (as exempliﬁed by Fragment-2, Fig-
ure 8, for code and breakpoints on different memory pages)
when the data and/or code reference to a page is much higher,
    ... 1. xor eax, esi 2. and eax, 38567fffh 3. add eax, ecx 4. cmp eax, edi 5. jbe 100F5000 6. mov edi, eax 7. mov ecx, [esi+3ch] 8. xor ecx, [esi+30h] 9. mov [esi+3ch], ecx10. mov esi, [esi+40h]11. xor eax, eax12. mov dl, [edi]13. or dl, [esi]14. movzx edx, dl15. add eax, edx16. inc edi17. inc esi18. loop 1219. cmp eax, 520. je 100FF0F021. cmp eax, 1022. je 100FF1F0    ...Breakpoint100    50      02000       10000      50     100   150   200    250   300Latency in Clock Cycles ( x 103)Fragment - 1Fragment - 2Fragment - 3Fragment - 4Code and Breakpoints on Separate Memory PagesCode and Breakpoints onthe Same Memory PageHardware BreakpointsVAMPiRE82.76165.1024.74297.9547.42103.2461.74130.4515.71221.1132.581820.5892.61610.0820.51210.02we ﬁnd that the latency of VAMPiRE is much more than
that of hardware breakpoints. When we look at code and
breakpoints existing on the same memory page, the latency
of VAMPiRE is inherently higher due to its design and the
single-step mechanism coming into effect (see Section 3.4).
Thus we can conclude that the performance of the frame-
work is highly dependent on the nature of code being de-
bugged and the nature of the breakpoints set by an individ-
ual. However, the measurements give a gross indication of
the latency one might expect. As seen from Figure 8, the la-
tency of the framework is found to be well within the limits
to suit interactive debugging.
While it is possible to set hardware breakpoints on the
code fragments discussed so far, we soon ﬁnd that the virus
has efﬁcient anti-debugging capabilities that prevent the use
of hardware breakpoints too. Before we discuss these ca-
pabilities a few words on hardware breakpoints are in or-
der. The hardware breakpoint mechanism on the IA-32 (and
compatible) processors makes use of a set of debug regis-
ters named DR0–DR7 and an exception handler for break-
point and single-step. Registers DR0–DR3 are 32-bit regis-
ters which contain the linear address in memory where a
code, data or a I/O breakpoint should occur, providing 4
breakpoints in total to be active at a time. DR7 is a control
register which is used to setup the breakpoints initially. When
a breakpoint is triggered, the exception handler is invoked
with certain status ﬂags in the DR6 (status) register which de-
scribes the type of breakpoint and its attributes (code /data /
I/O, read/write/execute).
Let us look at Figure 9 which shows a code frag-
ment from the virus in the context of hardware break-
points from a debugging session under the Windows 9x
OS. The W32.HIV spawns (and eventually kills) sev-
eral ring-0 (privileged) threads in the system at arbitrary
intervals. The code used to spawn these threads are con-
cealed within the virus polymorphic/metamorphic lay-
ers. The threads are different each time they are spawned,
but have a common functionality as shown by the code frag-
ment in Figure 9.
tion to grab hold of the single-step handler address. It then
checks if the handler is pointing to something different from
the expected system default range (which for Windows 9x
is C0000000h–C000FFFFh). If the handler address is out of
range, the thread knows that there is a debugger installed,
and behaves in a very unfriendly manner (using the JMP in-
struction) to throw the system into an unstable state as long
as the debugger is active. This is shown in lines 1–11, Fig-
ure 9 (the actual behaviour is concealed behind the JMP in-
struction and is not shown here).
The second level of anti-debugging within the threads
employ the debug registers themselves for computation and
functioning as shown in lines 12–19, Figure 9. The only
workaround to this second level, when using hardware break-
points, is to manually compute the values in registers and
trace them one at a time, while changing the instructions to
hold registers other than debug registers. However, this is
more than a mission, as (1) there are multiple threads one
needs to change that are spawned and killed at regular inter-
vals and (2) the threads themselves have self-checking code
fragments, which means one has to set the instructions back
to what they were before proceeding to trace further.
However, since VAMPiRE does not make use of any hard-
ware speciﬁc debugging registers, it is possible to set break-
points and trace through such code fragments. Figure 10
shows the performance measurements that were obtained
using VAMPiRE alone for such code fragments, using our
prototype debugger. The x-axis is the amount of clock cy-
cles that have elapsed between executing the code with the
breakpoint set and breakpoint triggering. The y-axis (cate-
gory axis) represents the code fragments which were once
again chosen arbitrarily from our debugging sessions with
the W32.HIV. A point to be noted is that the graph is not
a comparison (since hardware breakpoints cannot be used to
analyse such code fragments) but is only provided for the
sake of completeness of performance evaluation.
Figure 9. Anti-Debugging Code Fragment
The threads ﬁrst check to see if the default single-step
handler has been altered by checking the system interrupt
descriptor table (IDT). It makes use of the SIDT instruc-
Figure 10. Performance of VAMPiRE
As seen, the features provided by standard debuggers
in using hardware and software breakpoints do not sufﬁce
to study code employing self-modiﬁcation, self-checking
and/or any form of anti-debugging as in the case of the
W32.HIV and other similar viruses and malicious programs.
With VAMPiRE however, this task is greatly simpliﬁed. The
framework allows unlimited number of breakpoints to be set
    ...   1. sub esp, 8 2. sidt [esp] 3. mov eax, [esp] 4. mov edx, [esp+2] 5. mov eax, [edx+8] 6. cmp eax, [esi+2bh] 7. jb 11 8. cmp eax, [esi+2dh] 9. ja 1110. jmp 1211. jmp CA50D000h12. mov dr0, edi13. mov eax, esi14. ror eax, 1615. mov dr1, eax16. mov ebx, dr2    ...... 1. xor eax, esi 2. and eax, 38567fffh 3. add eax, ecx 4. cmp eax, edi 5. jbe 10015000 6. mov edi, eax 7. mov ecx, [esi+3ch] 8. xor ecx, [esi+30h] 9. mov [esi+3ch], ecx10. mov esi, [esi+40h]11. rep movsb12. mov eax, edi13. cmp eax, 514. je 1001F0F015. cmp eax, 1016. je 1001F1F017. cmp eax, 4F18. je 1001F4F0BADBEHAVE0       5       10      15      20      25     30Latency in Clock Cycles ( x 103)Fragment - 5Fragment - 6Fragment - 7Fragment - 8Code and Breakpoints on Separate Memory PagesCode and Breakpoints onthe Same Memory PageVAMPiRE300    250   200   150   100    50      061.28261.0226.29105.785.133.1126.2118.21on code, data, and I/O with the same precision as that of hard-
ware breakpoints. The breakpoints set by VAMPiRE cannot
be detected or countered and the latency of the framework
is well suited for interactive debugging as seen from its per-
formance measurements. These features make VAMPiRE the
ﬁrst and a very powerful breakpoint framework speciﬁcally
tailored for malware analysis.
5. Conclusions
This paper presented VAMPiRE, a breakpoint framework
that overcomes the limitations of hardware and software
breakpoints in the context of malware. VAMPiRE cannot
be detected or countered and provides unlimited number of
breakpoints to be set on code, data, and I/O with the same
precision as that of hardware breakpoints. This makes VAM-
PiRE higly conducive for microscopic analysis of current
generation malware, that are increasingly becoming hard-
ened to analysis. We discussed our experience using VAM-
PiRE to analyze a real world malware, demonstrating the
utility of the framework. We also showed that the perfor-
mance of the framework is well suited for interactive de-
bugging. VAMPiRE can be plugged into any debugger with
ease and supports various platforms with its retargetable de-
sign. The framework currently runs under the Windows and
Linux OSs on the IA-32 (and compatible) processors. VAM-
PiRE forms the backbone of our malware analysis environ-
ment currently under development, and this will provide a
completely stealth analysis environment to analyze and com-
bat malware. VAMPiRE is currently known to have only one
drawback in that of not supporting legacy I/O breakpoints in
kernel-mode. We are working towards a solution to support
this feature in the near future.
References
[1] American Arium. Itanium ITP: Intel itanium ICE kit.
[2] B. Beander. Vax debug: An interactive, symbolic, multilingual
In Proceedings of the ACM SIGSOFT/SIGPLAN
debugger.
Software Engineering Symposium on High-Level Debugging,
1983.
[3] P. A. Buhr, M. Karsten, and J. Shih. Kdb: A multithreadedde-
bugger for multithreaded applications. In Proceedings of the
SIGMETRICS symposium on Parallel and Distributed Tools,
January 1996.
[4] T. Cargill and B. Locanthi. Cheap hardware support for soft-
ware debugging and proﬁling. In Proceedings of the Second
International Conference on Architectural Support for Pro-
gramming Languages and Operating Systems, October 1987.
[5] H. Chen, C. Kao, and I. Huang. Analysis of hardware and soft-
ware approaches to embedded in-circuit emulation of micro-
processors. In Proceedings of the 7th Asia Paciﬁc Conference
on Computer Systems Architecture. Australian Computer Sci-
ence Communications, January 2002.
[6] Compuware Corporation. Debugging blue screens. Technical
Paper, September 1999.
[7] M. Copperman and J. Thomas. Poor man’s watchpoints. ACM
SIGPLAN Notices, January 1995.
[8] Corelis. EMDT/K5 boundary-scan (JTAG) emulator for the
AMD K5 processors.
[9] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M. Chen.
Revirt: Enabling intrusion analysis through virtual-machine
logging and replay. In Proceedings of the 2002 Symposium on
Operating Systems Design and Implementation (OSDI), De-
cember 2002.
[10] Hewlette Packard. The WDB debugger. HP Technical Soft-
ware.
[11] M. S. Johnson. Some requirements for architectural support of
software debugging. In Symposium on Architectural Support
for Programming Languages and Operating Systems, April
1982.
[12] P. Kessler. Fast breakpoints: design and implementation. In
Proceedings of the conference on Programming Language de-
sign and implementation, June 1990.
[13] S. T. King, G. W. Dunlap, and P. M. Chen. Debugging op-
erating systems with time-traveling virtual machines. In Pro-
ceedings of the Usenix Annual Technical Conference - Gen-
eral Track, April 2005.
[14] M. A. Linton. The evolution of dbx. In Proceedings of the
Usenix Summer Conference, June 1990.
[15] M. Loukides and A. Oram. Getting to know gdb. Linux Jour-
nal, 1996.
[16] P. S. Magnusson, M. Christensson, J. Eskilson, G. Fors-
gren, G. Hallberg, J. Hogberg, F. Larsson, A. Moestedt, and
B. Werner. Simics: A full system simulation platform. IEEE
Computer Society, 2(35):50–58, February 2002.
[17] McAfee Inc. The W9x.CIH virus. Virus Information Library,
July 1998.
[18] McAfee Inc. The W32.HIV virus. Virus Information Library,
October 2000.
[19] McAfee Inc. The W32.MyDoom virus. Virus Information Li-
brary, February 2004.
[20] J. M. Mellor-Crummey and T. J. LeBlanc. A software instruc-
tion counter. In Proceedings of the Third International Con-
ference on Architectural Support for Programming Languages
and Operating Systems, April 1989.
[21] V. Paxon. A survey of support for implementing debuggers.
October 1990.
[22] N. Ramsey. Correctness of trap-based breakpoint implemen-
tations. In Proceedings of 21st Symposium on Principles of
Programming Languages, February 1994.
[23] J. Robbins. Debugging windows based applications using
windbg. Miscrosoft Systems Journal, 1999.
[24] A. Vasudevan and R. Yerraballi. Sakthi: A retargetable dy-
namic framework for binary instrumentation. In Proceedings
of the Hawaii International Conference in Computer Sciences,
January 2004.
[25] R. Wahbe. Efﬁcient data breakpoints.
In Proceedings of
the 5th International Conference on Architectural Support for
Programming Languages and Operating Systems, September
1992.
[26] R. Wahbe, S. Lucco, and S. L. Graham. Practical data break-
In Proceedings of the
points: Design and implementation.
conference on Programming Language Design and Implemen-
tation, June 1993.