4.1.1 Decomposable Flows
Android ICC facilitates passing Binder objects between components. Components that are in the
same process will thus share a regular Java reference to a local Binder object. When components are
in diﬀerent processes, one can have a local Binder object reference and the other a remote reference.
The code of the components is oblivious to this distinction, allowing us to separate their processes
without loss of functionality. However, in the analysis stage (in which components are typically in
the same app process), such ICC events incur process memory ﬂows (Rmem edges). In this case we
can, by app decomposition, force the information to cross process boundaries (making it possible
to monitor) without breaking app behavior. We call these decomposable ﬂows.
Another type of decomposable ﬂow occurs when communication via process memory is an API
behavior that is transparent to the developer and can be changed in the enforcing version of the OS.
For example, the Android Shared Preferences mechanism is a key-value map that is serialized to a
ﬁle and cached in a static Map variable. Thus, consecutive writes-reads by diﬀerent components
are process memory ﬂows. This mechanism can, however, be managed by a central Binder object
in the enforcing OS version. It is thus possible to separate processes of components communicating
via shared preferences.
CommTrack and MemTrack are designed to identify and report decomposable ﬂows as Rcomm
edges (by CommTrack) rather than Rmem edges (by MemTrack). Another interesting approach (for
future work) detecting programming patterns involving process memory ﬂows and automatically
modify app code during repackaging to invoke fewer such ﬂows.
12
4.2 Component Identity
Components in Android, like threads or processes in most operating systems, have entry points
and exit points. These deﬁne the context in which code execution is performed by the component.
Entry points and exit points may be added at runtime, when components register callbacks.
CommTrack, MemTrack and PermTrack rely on the ability to recognize the currently running
component throughout the dynamic analysis operation. We maintain this information at the DVM
itself, with two extensions: ﬁrst, a VM register holding the Component Identity (CI), and second,
a boolean register, the Code Flag (CF) register, which indicates whether the currently executing
method belongs to a class from the app package (and written by the developer) or from the Android
framework, Java library code, etc.
4.2.1 CI Register and object CI
We instrumented the Android OS such that the identity of the component is saved in a designated
DVM register on entry and reset to its previous value on exit. The component identity is represented
by a 32-bit value uniquely identifying it: the String::hashCode() of the component’s class name4.
During interpreting of bytecode that does not belong to any component, the CI register will contain
0.
Static JNI functions are exposed to allow Java code to read and set the CI register content. It is
maintained by Android framework code as well as DVM code. The following inductive rules specify
how component identity is deﬁned and how the CI register is maintained.
Basis. Every component is implemented, by its author, via a Java class that extends a basic
component class (see Section 2.1). Several predeﬁned methods, which are declared by the parent
class and which the author can implement in the extending class, are the initial component entry
points. The Android framework will call these methods on speciﬁc events (e.g., when the user
presses the app icon, or when the phone receives an SMS). The CI register is thus updated upon
entering and exiting these methods.
Inductive step. Component code can register further callbacks for events at runtime. These call-
backs are objects of classes that implement designated interfaces (or extend designated classes)
deﬁned by the Android or Java frameworks. When the event occurs, the framework invokes the
callback, which is a method of the designated interface (or class). Thus, when component code
calls any method and passes an object as a parameter value, the object may contain such a call-
back method. It is therefore considered as running under this component’s identity, and the CI
register should be accordingly updated. For example, consider the code in Listing 1: In this code
line, an anonymous class implementing the interface Runnable is created and an instance is passed
to Thread’s constructor. The thread is then started and calls the run() method of the instance.
run() is deﬁned as part of a component’s code, but is called by a class, that is part of the Java
language. During execution of run(), the CI register should contain the component identity of the
deﬁning component. Such callbacks are very common in Java, and our tracking must handle this
case.We therefore mark any object passed to a method by a component. When its methods are
entered, the component identity register is switched back to the identity of the passing component.
To reﬂect this logic, we augmented the DVM to attach an object CI to every Java object. This
32-bit value is initialized to 0 upon object instantiation. The ﬁrst time component code passes an
4Hash collisions are rare but possible. However, they would be detected in the log output, and the analysis could
then be re-run with a re-randomized hash.
13
public class ThreadStarter extends BroadcastReceiver {
@override
public void onReceive(Context context,
Runnable runnable = new Runnable() {
Intent intent) {
void run() {
Log.d("anonymousRunnable",
"thread(cid:32)created");
} }
new Thread(runnable).start();
}
}
Listing 1: Example: callback registration
object as a method parameter value, this object’s CI is updated to contain the value in the CI
register at the time of the method call. When entering an object’s member method, it is the CI
register’s turn to be updated: if the object CI is not 0, the VM restores the CI register from it. The
VM then saves the previous CI register value on the stack and restores it on returning from the
method. Once an object’s CI contains a nonzero value, it will not be changed again. The object
component identity is the identity of the ﬁrst registering component.
4.2.2 Code Flag Register
Most code running under a component identity is not actually contained in the app package classes.
Calls into Java and Android framework libraries still run under the component identity of the
calling component. The distinction between component code written by the developer of the app
and library code is irrelevant when monitoring high-level ICC or resource use.
It is important,
however, when using taint analysis for tracking inter-component information ﬂows through the
process memory (see Section 4.4).
We thus add another 1-bit ﬂag to the DVM, called the CF. Its value indicates whether the
currently running code is a part of the app package (and is part of the implementation of its com-
ponents) or is part of the Android framework. Upon method entry/exit (and exception unwinding),
we update the Framework Code Flag according to the code type (package or framework) of the
code pointed at by the instruction pointer. Code type is indicated by the class preﬁx of its con-
taining method. The preﬁx is checked against a list of known framework preﬁxes (“com.android”,
“java.lang”, etc.).
4.3 CommTrack
DroidDisintegrator’s CommTracking subsystem monitors and logs all of the intra-app cross-component
communication events that correspond with edges in Rcomm. The subsystem does not track cross-
component communication via direct access to shared content in the process address space (which
is handled by MemTrack; see Section 4.4). By analyzing the resulting log, we infer the relation
Rcomm. Monitoring falls into the following categories.
Predeﬁned ICC events. A component invokes an operation (e.g., sends an Intent) that invokes one
of another component’s entry points. To keep track of sender identity in Intent-based ICC, we
instrumented the Intent class to contain a sender component ﬁeld, updated by the (instrumented)
Intent-sending API implementation. The identity of the intent’s sender is checked before entering
14
the invoked component, and the information ﬂow is logged. We similarly instrument activity results
and log ﬂows when they are read. We instrument the ContentProvider API, which diﬀers slightly in
that it is not Intent based, to log directed information ﬂows on content queries, deletes, insertions,
and so forth. We also capture component runtime registration, a form of ICC in itself.
Communication via Binder. As explained in Section 2.2, when a component sends a Binder call to
another component in its own process, the event should be recorded as an Rcomm event. The local
Binder object’s object CI ﬁeld will typically contain the identity of the component that instantiated
it, and upon the call the identity register will be updated to this identity. In this case, we capture
an Rcomm ﬂow from the calling component to the callee5.
Other Communication. We deal similarly with other channels and readable/writable resources:
ﬁlesystem, Shared Preferences and Content Providers. If a component writes to such a resource,
which another component later reads from, this is considered a ﬂow between the writing component
and the reading one. We intercept and log ﬁle system inodes reads/writes, as well as reads/writes to
content providers and Android’s SharedPrefs mechanism (see Section 4.1.1). CommTrack captures
the read/write accesses, and an analysis of the log produces the ﬂow events. Similarly, possible
ﬂows through the Internet and other information sources that are also sinks are detected by the
later analysis (but use of permissions is captured by PermTrack).
4.4 MemTrack
DroidDisintegrator’s MemTrack module, which is based on TaintDroid [EGC+14], monitors and logs
cross-component communication through process memory (i.e., events that correspond to edges in
Rmem). We built, on top of TaintDroid’s taint propagation, our own tagging of data elements. Our
aim is to keep track of reads and writes of data so that if one component writes data that another
reads, this event will be logged. Consequently, MemTrack diﬀers somewhat from traditional tainting
schemes: data access by component code is a taint sink (for reads) and source (for writes).
Tainting and Taint Storage. Taint is tracked via taint tags, which are 32-bit bitmasks. Each bitmask
bit is mapped to some component identity. To minimize collisions, only components which actually
run within the app are mapped (at runtime) from some available bit; this happens when the CI
register is ﬁrst updated to contain their identifying value. Apps can have more than 32 components,
but we found that they very rarely execute more than 32 components at runtime within the same
process. (It is straightforward to extend MemTrack’s bitmask size, or add a level of indirection, to
support that case.)
Taint Granularity. TaintDroid alters DVM’s runtime stack and structures underlying Java objects
to allocate a 32-bit taint tag for each data element. A tag is maintained for every method local
variable, method argument, class static ﬁeld, class instance ﬁeld, and array. We used TaintDroid’s
taint granularity and changed only the tag value semantics.
The one exception is array handling. TaintDroid maintains one taint tag per array. We em-
piricallyfound that this incurs many falsely reported process memory ﬂows.6 Assigning a separate
5When the called method’s object is not a Binder object at all, this mechanism can falsely report ﬂows. However,
these falsely reported ﬂows rarely aﬀect the policy construction, because when the object is not a Binder object,
an Rmem ﬂow between the corresponding components will almost always be reported as well as the Rcomm one (see
Section 4.4).
6This stems from the Android framework’s use of arrays to hold some objects that become tainted by many
components, although diﬀerent components often only access disjoint array elements. For example, there exists an
array of objects representing a UI View object of every Activity in the process. A UI view’s reference will typically be
15
tag for every array element incurred such a large overhead that the analysis became too slow to
be practical7. We currently regard process memory ﬂows through arrays as false positives, as they
most likely are. Note that (as discussed in Section 4.10) this can only result in overly restrictive
policies, which can be easily discovered by an additional testing phase, and does not compromise
the soundness of the enforcement.
Taint Sources, Sinks and Taint Propagation. When a component writes to a data element, the VM
turns on the bit representing that component in the data’s taint tag. When a component A reads
a data element D, the taint tag of D is checked by the VM. If it is tainted by components other
than A, then we identify (and log) information ﬂows from those components into A. Whenever
data is manipulated by bytecode, data taint is propagated. This means that every data access by
Java code may be a taint source, a taint sink, require taint propagation or a combination of these.
Therefore tainting and logging of ﬂows are carried out by the DVM itself, and their implementation
is interleaved with taint propagation.
Taint propagation, tainting and logging occur in the DVM opcode implementation and JNI
calls. We deliberately turn oﬀ TaintDroid’s taint propagation abilities through ﬁle system nodes
and Binder RPCs, since we monitor only ﬂows of data that do not cross process boundaries (inter-
component information ﬂows through these interfaces are monitored by CommTrack).
We classify data access by the DVM opcodes and JNI methods into three types8: reading a value
(possibly written by another component), writing a value (possibly other components will read),
and moving an aggregation (n-ary operator result) of values into a data location (here we read each
of them and write into one taint location). We add handlers for these events and instrument the
DVM to call them, passing the taint tags. Appendix A.2 speciﬁes how each of these access types is
handled.
The handling logic for these data access events changes according to the event type and whether
the VM is running component code (which is a taint source and sink) or other code (such as
framework libraries, which only propagate taint). This is reﬂected in the CI and CF register values.
To avoid reporting decomposable ﬂows (see Section 4.1.1) as Rmem edges, we nullify taint tags
of shared preferencesvalues (by instrumenting the SharedPreferences implementation) and local
Binder object method arguments9.
4.5 PermTrack
The DroidDisintegrator PermTrack subsystem monitors permission use by individual components.
All permission checks occur within the method checkUidPermission of the Package Manager (PM)
system service or the method checkPermission of the Activity Manager. Both are Binder methods
and can be invoked remotely or locally. An operation typically invokes one of these methods if it
wishes to check the permission of the third party requesting the operation, usually also through a
Binder RPC. We capture calls to these methods, and when a permission is granted we deduce that
tainted with the respective activity’s component identity. The entire array quickly becomes tainted with all Activities’
tags although every Activity only accesses its own view.
7Pebbles [SBL+14] and Spandex [CGL+14] proposed using lazy taint tagging for arrays. This optimization should
be incorporated into DroidDisintegrator as well.
8TaintDroid contains JNI method prototype annotations, which specify how information is expected to propagate
through the method, between the method arguments and return value.
9Thus, we instrumented the DVM to recognize calls to local Binder objects. We do not recursively remove the
taints of arguments, as this can cause missed process memory ﬂows.
16
the component requesting the calling operation used the permission (this also requires maintaining
information about the calling componentfor every Binder RPC call).
We instrument the socket API to record Internet permission use. Accesses to log ﬁles, the SD
card, bluetooth and camera devices are recorded as respective permission uses.
4.6 Automated Dynamic Analysis
Appsplayground is a tool for scalable automatic dynamic analysis of Android apps. It employs a Java
app that connects to an emulator running a modiﬁed version of the OS and governs app behavior
exploration logic. Appsplayground was designed to trigger, among other things, information ﬂows
from sources to sinks in apps. It features intelligent event triggering for exhaustive exploration of app
functionality and disguise techniques that make running inside the emulator less discernible from
running inside a physical device. We take advantage of these features by merging Appsplayground
with our Android variant.
4.7 Policy Generation
After driving the app in the dynamic analysis emulator, DroidDisintegrator uses information cap-
tured by CommTrack, MemTrack and PermTrack to output a graph depicting Rmem, Rcomm, as
well as component permission use (see Figure 3 and Figure 5). DroidDisintegrator uses a database
with our manual classiﬁcation (source or sink or both) for each permission.
If a new, unclassi-
ﬁed permission is encountered, the DroidDisintegrator user is prompted to classify it at this stage.
A mapping of components to processes is deduced, as described in Section 3.3 (by computing
mem, and then Rscc ≡ SCC (Rproc)). A policy is generated, as described
Rproc ≡ Rcomm ∪ Rmem ∪ R−1
in Section 3.4.
A bipartite graph depicting the source-to-sink information ﬂows in the app is output (depict-
ing the policy’s security guarantees). Additionally, the Rproc graph (see Figure 5 and Figure 3) is