== 行为审计
了解系统正在和已经发生了什么是系统保密很重要的一部分。强烈推荐您定期审计日志易的用户行为和服务器行为日志。
=== 模块日志说明
本节列出日志易各模块的日志输出路径和关键字说明, 您可以按照说明进行日志审计。
==== Yottaweb
日志路径： /data/rizhiyi/logs/yottaweb/request.log
关键字：
* error: 表示调用某个 api 接口出错
* result: 表示调用某个 api 接口返回的结果
* timeout: 表示调用某个 api 接口超时
具体关键字请参考 api文档  中对于每个资源访问所使用的 URL。
日志路径：/data/rizhiyi/logs/yottaweb/audit.log
日志路径： /data/rizhiyi/logs/yottaweb/track.log
关键字：
* searchInitUsedTime: 搜索页数初次加载完成所有数据的时间，单位毫秒
* dashboardInitUsedTime: 仪表盘标签页初次加载完成所有数据的时间，单位毫秒
* moveTabToDashboard: 仪表盘的移出到其他
* eventListSelectField: 点开单个字段弹出框
* configRegHelper: 字段提取正则辅助,每次点完成时，划选过的次数
* configRunCount: 点击字段提取的运行统计，其中 countOpen 参数为 true 代表开启，false 代表关闭
* submitNewOfflineTask: 提交离线任务
* showAllFields: 点击字段列表上的入口查看【全部字段】
* openFieldsModal: 点开单个字段弹出框
* blockFields: 屏蔽选中字段
* searchWithInfo: 在字段弹出框上选择的具体功能，其中 type 表示功能类型，如'|top 10' 代表【TOP10字段】过滤
* generateStatsCharts  通过统计菜单配置图表效果，其中 type 表示选择的统计类型
==== yottaweb lynxee相关日志信息
** service_list 获取服务列表
** service_new 创建服务
** service_delete 删除服务
** service_update 更新服务
** service_detail 获取服务详情
** service_import 服务导入
** get_service_health 获取服务健康度
** device_list 设备列表
** device_new 创建设备
** device_update 更新设备
** device_checkonly 检查设备是否唯一
** device_delete 删除设备
** get_simple_service 获取服务和其关联的监控项健康度
** device_detail 设备详情
** device_import 设备导入
** get_device_kpi 获取service-metric下的kpi
** watch_list 获取kpi列表
** watch_detail 获取kpi详情
** watch_update 更新kpi
** watch_delete 删除kpi
** get_kpi_group 获取metric
** apply_model 应用模型
** kpi_algorithms 获取算法
** saved_algo 保存算法信息
** submit_kpi_task 提交训练
** query_train_result 轮询训练结果
** submit_detect 提交检测
** save_detect_config 保存检测配置
** detect_result 轮询检测结果 
** fast_detect_result 根据检测配置获取检测结果
** cancel_tasks 取消训练
** get_task_list 获取训练列表
** anomaly_preview_anomaly 日志异常检测获取检测异常
** anomaly_preview_cluster 日志异常检测获取模型列表
** anomaly_joblist 获取日志异常检测任务列表
** anomaly_submit 新建日志异常检测训练任务
** anomaly_delete 删除日志异常检测训练任务
** anomaly_suspendjob 暂停日志异常检测的检测任务
** anomaly_restartjob 继续日志异常检测任务
** anomaly_retrain 日志异常检测任务重新训练
** sensitivity_detect 敏感度检测
** anomaly_start_detection 日志异常检测开始任务
** anomaly_get_detect_config 获取检测任务配置
** anomaly_update_model 修改日志异常检测任务模式
** pattern_detail 日志异常检测任务模型详情
** choose_parameter 关注／取消关注日志异常检测模式字段
** update_parameter 更新日志异常检测模式中的参数
** pattern_split 模式拆分
** pattern_abstract 模式预合并
** pattern_merge 模式合并
** pattern_rollback 模式回滚
** pattern_save 模式保存
==== splserver
日志路径：/data/rizhiyi/logs/splserver/splserver.log
关键字：
* receive task:  接受到提交任务请求
* Spl finish executing task： 请求执行完成
* Time cost：执行任务耗时
调度任务日志路径：/data/rizhiyi/logs/splserver/scheduler.log
关键字:
* 调度任务执行关键字
** submit job 提交调度任务
**  job [ID] success 调度任务执行成功
**  job [ID] failed 调度任务执行失败
* 告警任务执行关键字：
** alert 'ID' started 告警任务开始执行
** alert 'ID' finished 告警任务执行完成
** trigger alert levels 触发告警级别
** send alert cef req 发送告警请求
** recv alert cef resp 发送告警应答
* 定时任务执行关键字：
** start execute saved schedule task 开始执行定时任务
** start to write to local db 开始写入定时任务历史
** start to write to external db 开始写入外部jdbc
* 定时清理任务
** start clean notice info 开始清理NoticeInfo数据库表
** start clean saved schedule 开始清理ScheduleResult数据库表
** start clean search info stat 开始清理SearchInfoStat数据库表
** IndicesCleaner run 开始删除索引
==== Logriver
日志路径：/data/rizhiyi/logs/logriver/logriver.log
关键字：
* Exception: 异常
* source.KafkaSource: kafka读取相关
** commit Offset: 提交offset
* regex timeout: 正则超时
* sink.EsSink: 每个batch写入es状态
** index ok: 写入es成功
** index error: 写入es失败
* sink.KafkaSink: 每个batch写入kafka状态
* schedule.ParserRuleUpdater: 定时更新抽取规则
** no new parseRule: 抽取规则没有最新更改
* metrics.LogEventTracker: 通过本地上传的trace信息
==== Kafka
日志路径：/data/rizhiyi/logs/kafka/kafka.log
关键字：
* No broker in ISR for partition:  节点异常，partition无可用ISR
* Disk error while replicating data.： 硬盘写故障，多半是硬盘满
* Removed ArrayBuffer(xx) from list ： 节点异常，被移除出集群
* failed to complete preferred replica leader election ： 选举失败，如果持续出现这个日志则表明节点状态出现异常，选举无法正常完成。
==== Collector
日志路径：/data/rizhiyi/logs/collector/collector.log
关键字: 因为全部日志已经规范化处理，所以只需要日志级别关键字 WARN/ERROR
==== Heka
日志路径：
* ServerHeka: /data/rizhiyi/logs/heka/*
* 普通Heka: Heka安装目录下的logs子目录
主要有三类日志文件:
1. hekad-daemon.log: hekad-daemon进程的日志
2. hekad.stderr: hekad打印到标准出错的日志
3. hekad.stdout: hekad打印到标准输出的日志
===== hekad-daemon.log 关键字
* Get uri failed:
上报心跳异常，示例如下:
 2016/06/29 12:24:18 Get uri failed: Get http://192.168.1.92:8080/?act=report_heartbeat&ip=192.168.1.31&port=10001&status=Running&os=linux&is_server_heka=false&platform=linux-x64&version=1.6.34.0: dial tcp 192.168.1.92:8080: getsockopt: connection refused
通常在日志尾部有具体错误原因, 通常错误原因和解决办法有:
1. auth进程异常: 检查并恢复auth进程
2. Heka到auth 8080端口网络策略不通: 申请开通Heka到auth 8080端口网络策略
3. 数据库异常: 这种可以通过类似下面示例的命令看到更详细错误原因, 通常是表结构问题，将表结构修复到正确版本即可
[source,bash]
curl 'http://192.168.1.92:8080/?act=report_heartbeat&ip=192.168.1.31&port=10001&status=Running&os=linux&is_server_heka=false&platform=linux-x64&version=1.6.34.0'
* Error reading config:
hekad.toml 配置文件异常, 示例如下:
 Error reading config: error opening file: open /opt/heka-1_6_34.0-linux-amd64/conf/hekad.toml
常见错误原因和对应解决办法有:
1. hekad-daemon.toml 中 config配置所指向的文件不存在: 创建一个空的hekad-daemon.toml
2. hekad.toml 配置格式异常: 重新按配置说明正确配置hekad.toml
* Auto update failed:
下载升级包异常, 示例如下:
 2016/06/30 16:51:18 Auto update failed:Get http://192.168.1.60/api/v0/agent/download/linux-x64/1.6.24.0/hekad: dial tcp 192.168.1.60:80: getsockopt: connection refused
通常在日志尾部有具体错误原因，常见错误原因和解决办法有:
1. yottaweb进程异常: 检查并修复yottaweb进程
2. 到yottaweb 80端口网络策略不通: 申请开通Heka到yottaweb 80端口网络策略
3. 升级包下载有问题，如md5不匹配: 检查yottaweb上升级包是否正常，如果异常重新上传升级包
* Start hekad xxx failed:
hekad启动异常, 示例如下:
 2016/07/06 10:45:08 Start hekad [/opt/heka-1_6_34.0-linux-amd64/bin/hekad -config=/opt/heka-1_6_34.0-linux-amd64/conf/hekad.toml] failed: exit status 1
这个的具体原因需要查看 hekad.stderr 文件内容。
===== hekad.stderr 关键字
* record exceeded MAX_RECORD_SIZE
单行消息超过配置上限, 示例如下:
 2016/06/28 15:31:27 Input '1_file_input' error: record exceeded MAX_RECORD_SIZE 65794 and was truncated
解决办法为:调大 hekad.toml 中的 `max_message_size`，并重启。
[NOTE]
====
单行消息超限问题, 一般还需要同时修改 collector 和 kafka 两个模块的配置。
collector 配置项, 修改后的值应略大于 heka 设置:
* collector0.sources.sourceHttp.maxChunkSize: 默认 5MB
* collector0.sources.sourceHttp.proto.maxEventSize: 默认 1088KB
kafka 配置项, 修改后的值应略大于 collector 设置:
* message.max.bytes: 默认 4MB
* replica.fetch.max.bytes: 需大于等于上个配置项
====
* 1 error loading plugins
配置文件异常, 示例如下:
 2016/07/06 10:45:07 No registered plugin type: EventlogInput
 2016/07/06 10:45:08 Error reading config: 1 errors loading plugins
错误原因通常可以在它之前某行日志找到，比如上例中的 "No registered plugin type: EventlogInput"。
常见错误原因和对应解决办法有:
1. 插件不存在: 确认插件名是否写对，以及对应版本是否包含该插件
2. 某插件的配置项缺少必需配置: 配上缺少的必需配置
3. 某插件配置项有错: 根据提示修改配置项
* HTTP Error code returned: 或 COLLECTOR RETURN ERROR:
上报日志异常，这行日志尾部有错误原因，常见错误原因和对应解决办法有:
1. 限额不足: 申请更大的 license
2. collector 本身有问题: 需要查看 Collector 日志做进一步分析
3. token 不正确: 调整 forwarder.config 中的 token 配置