### 优化后的文本

#### 设置
TCP Cubic 和 TCP New Reno 在适应不断变化的信道条件时响应较慢，因此会导致较高的缓冲延迟。相比之下，Verus 能够快速适应信道变化，从而显著降低缓冲延迟。

#### 表1：Jain公平性指数
表1展示了三种协议的Jain公平性指数。我们报告了五种不同场景下的平均公平性指数。结果显示，虽然在用户数量较少的情况下，TCP Cubic 具有较高的公平性，但在高竞争条件下（大约70%的公平性），其公平性显著下降。相反，尽管在用户数量较少的情况下 Verus 的公平性略低于 TCP Cubic，但在高竞争条件下仍能保持合理的公平性。TCP NewReno 在所有场景中的公平性表现较为一致，但在用户数量较少的情况下，其公平性略低于 Verus。

### 第七章 Verus 微观评估
在前一节中详细介绍了 Verus 的宏观评估，本节将重点讨论 Verus 的具体微观评估，以描述其公平性和适应性特性。本节的所有评估均在一个简化的网络配置中进行，该配置包括一个哑铃拓扑结构，三台笔记本电脑通过千兆以太网交换机连接到一台服务器。服务器的出站带宽通过 Linux 流量控制 (tc) 工具进行控制。该工具还用于模拟每个客户端的延迟，以配置 RTT。

#### 快速变化的网络
我们测量了 Verus 在高信道变化情况下的适应速度。实验配置为每五秒改变一次整个网络参数，即链路容量、网络 RTT 和丢包率。我们考虑了两个版本的实验：第一个版本中，链路容量在10 Mbps和100 Mbps之间变化；第二个版本中，链路容量在2 Mbps和20 Mbps之间变化。第二个版本的原因是 Sprout 实现的带宽上限为18 Mbps。在这两种情况下，RTT 在10 ms到100 ms之间变化，丢包率在0%到1%之间变化。

图11a显示了第一次实验中随时间变化的吞吐量，灰色阴影区域表示可用链路容量。观察到 Verus 优于其他协议，并且能够非常快速地适应快速变化的网络条件。由于 Sprout 实现中的带宽限制，Sprout 表现不佳。图11b显示了在较低链路容量变化（最高20 Mbps）下，Verus 与 Sprout 的吞吐量和延迟结果。可以看到，Sprout 的表现有所改善，但 Verus 仍然比 Sprout 平均具有更高的吞吐量。

#### 新到达的流
为了了解新流到达的影响，我们考虑了一个场景，其中八个竞争的 Verus 流共享90 Mbps的瓶颈链路。实验配置为每30秒启动一个新的 Verus 流，从而随着时间的推移增加竞争流的数量。图12显示了七个 Verus 客户端随时间变化的吞吐量。在最初的30秒内，只有一个 Verus 流活跃，该流完全利用了90 Mbps的链路。观察到 Verus 能够快速适应新流的到来，并在新流到来和离开时达到良好的公平性。

#### 不同 RTT 的影响
为了了解不同 RTT 对 Verus 流的影响，我们进行了一个简单的实验，其中三个具有不同 RTT（20 ms、50 ms 和 100 ms）的竞争 Verus 流共享60 Mbps的瓶颈链路。图13显示了不同 Verus 流吞吐量的时间变化。观察到 Verus 流的吞吐量与流的 RTT 无关，这表明 Verus 的公平性模型接近于最大最小公平性。鉴于基于延迟的协议使用非线性控制机制，这些协议比传统的基于窗口的协议更难以分析建模。我们计划在未来的工作中开发一个模型来更全面地描述 Verus 及其他基于延迟的控制协议的行为。

#### Verus 与 TCP
当引入新的拥塞控制协议时，一个关键问题是与传统 TCP 的公平性。我们研究了多个 Verus 流如何与多个 TCP Cubic 流共享以太网瓶颈（因为 TCP Cubic 目前是大多数 TCP 安装的标准）。实验包括三个 Verus 流和三个 TCP Cubic 流共享60 Mbps的链路容量。在实验开始时，每30秒添加一个新的 Verus 流。一旦所有三个 Verus 流都存在，每隔30秒添加一个新的 TCP Cubic 流（分别在90秒、120秒和150秒时）。图14显示了随时间变化的吞吐量比较。结果显示，Verus 与 TCP Cubic 平等共享瓶颈容量。

#### Verus 延迟曲线的影响
为了评估延迟剖面曲线的影响，我们比较了两种情况：一种是延迟剖面曲线每秒正常更新，另一种是 Verus 使用其生成的第一个曲线而不进行更新。图15显示了我们在五个不同收集轨迹上的模拟结果。结果显示，更新曲线对性能有显著影响，因为蜂窝信道的变化需要 Verus 根据这些变化更新其操作点。

#### 短流
短流是正常网络流量的主要特征，这是由于常见检索内容的性质。虽然 Verus 并不是专门为处理短流而设计的，但它能够自然地处理短连接。对于不超出慢启动阶段的短流，Verus 由于相同的慢启动机制而表现出类似于传统 TCP 的行为。慢启动之后，Verus 使用记录的延迟剖面快速适应，就像它适应信道变化一样。

### 结论
本文介绍了 Verus，这是一种适用于不可预测蜂窝网络的自适应探索拥塞控制协议。通过连续使用延迟测量和延迟剖面，Verus 能够适应快速变化的蜂窝条件和竞争流量。我们通过仿真和真实世界实验，在各种实验场景下测试了 Verus 在3G和LTE网络中的性能。结果显示，在蜂窝网络中，Verus 比 TCP Cubic 实现了更高的吞吐量，同时保持了显著更低的端到端延迟，特别是在 LTE 网络中。Verus 在快速变化的网络条件下也优于最近的一些蜂窝网络拥塞控制协议，如 Sprout。未来，我们计划实验其他快速适应机制，以理论化地表征 Verus 的行为并开发其内核实现。

### 致谢
感谢 Ali Raza 在运行测量和实验方面的帮助。感谢我们的指导 Sachin Katti 和匿名审稿人的宝贵反馈。还要感谢 Keith Winstein 在 Sprout 方面的帮助。Thomas Pötsch 由德国不来梅大学动态物流国际研究生院资助。感谢纽约大学阿布扎比分校研究所和科技经济发展中心 (CTED) 对 Lakshminarayanan Subramanian 在这项研究工作中的支持。

### 参考文献
[参考文献部分保持不变]

希望这些改进能使文本更加清晰、连贯和专业。如果还有其他需要进一步优化的地方，请告诉我！