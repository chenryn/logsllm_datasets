that page-table bits can be ﬂipped via Rowhammer from
JavaScript, while Bosman et al. [7] ﬂipped the types of
JavaScript objects through the browser. Aweke et al. [2] also
demonstrated Rowhammer ﬂips without the use of CLFLUSH,
and with a halved DRAM refresh interval. Van Der Veen
et al. [61] used Rowhammer to gain root on mobile phones,
while Lipp et al. [38] and Tatar et al. [59] used network
requests to induce Rowhammer ﬂips via a completely remote
attack. Frigo et al. [14] managed to induce bit ﬂips from the
browser’s interface to the GPU. ECC memory was shown to
be vulnerable to Rowhammer by Cojocar et al. [13].
Lou et al. [41] systematically categorize Rowhammer at-
tacks in a framework to better understand the problem and
uncover new types of Rowhammer attacks. Their methodology,
however, is limited and completely ignores the possibility of
using Rowhammer as a read side channel.
Defenses. Various defenses have been proposed for Rowham-
mer attacks, aiming to detect ongoing attacks [2, 12, 20, 27,
47, 69], neutralize the effect of bits being ﬂipped [19, 61], or
eliminate the possibility of Rowhammer bit ﬂips in the ﬁrst
place [8, 31, 33, 34].
II. BACKGROUND
This section provides the necessary background on DRAM
architecture, the row-buffer timing side channel described by
Pessl et al. [49], and the Rowhammer bug. We begin by brieﬂy
overviewing DRAM organization and hierarchy.
A. DRAM Organization
DRAM Hierarchy. DRAM (dynamic random access mem-
ory) is organized in a hierarchy of cells, banks, ranks, and
DIMMs, which are connected to one or more channels.
More speciﬁcally, at the lowest level DRAM stores bits in
units called cells, each consisting of a capacitor paired with
a transistor. The charge on the capacitor determines the value
of the bit stored in the cell, while the transistor is used to
access the stored value. For true cells, a fully charged capacitor
represents a ‘1’ and a discharged capacitor represents a ‘0’
while the opposite holds true for anti cells.
Memory cells are arranged in a grid of rows and columns
called a bank. Cells in each row are connected via a word
line, while cells in each column are connected across bit lines.
Banks are then grouped together to form a rank, which often
corresponds to one side of a DIMM. Each DIMM is inserted,
possibly with other DIMMs, into a single channel, which is a
physical connection to the CPU’s memory controller.
DRAM Operation. Access to a DRAM bank operates at
a resolution of a row, typically consisting of 65536 cells, or
8 KiB. To activate a row, the memory controller raises the
word line for the row. This produces minute currents on the
bit lines, which depend on the charge in the cells of the active
row. Sense ampliﬁers capture these currents at each column
and amplify the signal to both copy the logical value of the
cell into a latch and refresh the charge in the active row. Data
can then be transferred between the CPU and the row buffer,
which consists of the latches that store the values of the cells
in the active row.
Over time, the charge in the cell capacitors in DRAM leaks.
To prevent data loss through leakage, the charges need to be
refreshed periodically. Refreshing is handled by the memory
controller, that ensures that each row is opened at least once
every refresh interval, which is generally 64 ms [30] for
DDR3 and DDR4. LPDDR4 deﬁnes temperature-dependent
adaptations for the refresh interval [29].
DRAM Addressing. Modern memory controllers use a com-
plex function to map a physical address to the correct physical
location in memory (i.e., to a speciﬁc channel, DIMM, rank,
bank, row, and column). While these functions are proprietary
and undocumented for Intel processors, they can be reverse
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
697
···
expect ﬂip
hammer
expect ﬂip
hammer
expect ﬂip
···
hammer
···
expect ﬂip
hammer
expect ﬂip
···
hammer
···
expect ﬂip
expect ﬂip
expect ﬂip
hammer
expect ﬂip
expect ﬂip
expect ﬂip
···
Fig. 1: Reverse engineered DDR3 single channel mapping (2
DIMM per channel) for Ivy Bridge / Haswell (from [49]).
(a) Double-sided
(b) Single-sided
(c) One-location
Fig. 2: Different hammering techniques as presented by [21].
engineered through both software- and hardware-based tech-
niques [49]. For example, Section II-A shows the DRAM
mapping for a typical conﬁguration found in Ivy Bridge and
Haswell systems. As the ﬁgure shows, the bank and the rank
are determined based on bits 13–21 of the physical address. We
have veriﬁed that the mapping matches the Haswell processor
we use in our experiments.
Row Addressing. As discussed above, DRAM rows have a
ﬁxed size of typically 8 KiB. However, from the implementa-
tion side, it is usually more important to know what amount of
memory has the same row index. This is sometimes referred to
as same-row [19, 55]. If the address goes to the same row and
the same bank, it is called same-row same-bank; if it goes
to different banks but has the same row index, it is called
same-row different-bank [55].
In our experimental setup, we have a total of 32 DRAM
banks, and thus an aligned block of 256 KiB = 218 B of
memory has the same row index. In other words, the row
index on our system is directly determined by bits 18 and
above of the physical address. Pessl et al. [49] provide a more
extensive discussion.
B. Row-Buffer Timing Side Channel
Opening a row and loading its contents into the row buffer
results in a measurable latency. Even more so, repeatedly
alternating accesses to two uncached memory locations will
be signiﬁcantly slower if these two memory locations happen
to be mapped to different rows of the same bank [49]. In
Section V, we use this timing difference to identify virtual
addresses whose contents lie within the same bank, and
also uncover the lower 22 physical addressing bits, thereby
enabling double-sided Rowhammer attacks.
C. Rowhammer
The trend towards increasing DRAM cell density and de-
creasing capacitor size over the past decades has given rise to
a reliability issue known as Rowhammer. Speciﬁcally, repeated
accesses to rows in DRAM can lead to bit ﬂips in neighboring
rows (not only the direct neighbors), even if these neighboring
rows are not accessed [34].
The Root Cause of Rowhammer. Due to the proximity of
word lines in DRAMs, when a word line is activated, crosstalk
effects on neighboring rows result in partial activation, which
leads to increased charge leakage from cells in neighboring
rows. Consequently, when a row is repeatedly opened, some
cells lose enough charge before being refreshed to drop to an
uncharged state, resulting in bit ﬂips in memory.
Performing Uncached Memory Accesses.
A central re-
quirement for triggering Rowhammer bit ﬂips is the capability
to make the memory controller open and close DRAM rows
rapidly. For this, the adversary needs to generate a sequence
of memory accesses to alternating DRAM rows that bypass
the CPU cache. Several approaches have been suggested for
bypassing the cache.
• Manually Flush Cache Lines.
The x86 instruction
set provides the CLFLUSH instruction, which ﬂushes the
cache line containing its destination address from all of
the levels of the cache hierarchy. Crucially, CLFLUSH only
requires read access to the ﬂushed address, facilitating
Rowhammer attacks from unprivileged user-level code. On
ARM platforms, prior to ARMv8, the equivalent cache line
ﬂush instruction could only be executed in kernel mode;
ARMv8 does, however, offers operating systems the option
to enable an unprivileged cache line ﬂush operation.
• Cache Eviction.
In cases where the CLFLUSH instruction
is not available (e.g. in the browser), an attacker can force
contention on cache sets to cause cache eviction [2, 19].
• Uncached DMA Memory. Van Der Veen et al. [61] report
that the cache eviction method above is not fast enough to
cause bit ﬂips on contemporary ARM-based smartphones.
Instead,
they used the Android ION feature to allocate
uncacheable memory to unprivileged userspace applications.
• Non-temporal instructions. Non-temporal load and store
instructions direct the CPU not to cache their results. Avoid-
ing caching means that subsequent accesses to the same
address bypass the cache and are served from memory [50].
Another important distinction between Rowhammer attacks is
the strategy in which DRAM rows are activated, i.e., how
aggressor rows are selected. See Figure 2.
Double-sided Rowhammer.
The highest amount of
Rowhammer-induced bit ﬂips occur when the attacker ham-
mers,
the two rows
adjacent to a target row. This approach maximizes the number
of neighboring row activations, and consequently the charge
leakage from the target row (Figure 2a). However, for double-
sided hammering, the attacker needs to locate addresses in the
two adjacent rows, which may be difﬁcult without knowledge
of the physical addresses and their mapping to rows. Previous
attacks exploited the Linux pagemap interface, which maps
virtual to physical addresses. However, to mitigate the Seaborn
is repeatedly opens and closes,
that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
698
and Dullien [55] attack, recent versions of Linux only allow
root access to the pagemap interface.
Another avenue used by previous works for ﬁnding adjacent
rows is to use huge pages, e.g., transparent huge pages (THP),
to obtain large blocks of physically contiguous memory [19].
Single-sided Rowhammer.
To avoid the need for ﬁnding
the two rows adjacent to the target row, an adversary can take
a more opportunistic approach, which aims to cause bit ﬂips
in any row in memory (Figure 2b). This can be achieved by
guessing several addresses at random, e.g., 8 addresses, in the
hope that some fall within two rows in the same bank. With
B banks, the probability of having at least one such a pair is
1 − (cid:2)n
B−i
B , i.e., 61.4% for 8 addresses and 32 banks.
i=1
Alternatively, the adversary can take a more disciplined
approach and use the row-buffer timing channel (Section II-B)
to identify rows in the same bank [6, 61].
Because only one of the rows being hammered is located
near the target row, single-sided Rowhammer results in fewer
bit ﬂips than double-sided Rowhammer [2].
One-location Rowhammer.
Finally, one-location hammer-
ing [21], is the least restrictive strategy, but also generates
the fewest number of bit ﬂips (Figure 2c). Here, the attacker
repeatedly ﬂushes and then reads from a single row. The
presumed cause of ﬂips, in this case, is that newer memory
controller policies automatically close DRAM rows after a
small amount of time. This obviates the need to open different
rows in the same bank.
D. RSA Background
As the end-to-end attack described in this paper recovers
RSA private keys from an OpenSSH server, we now brieﬂy
overview the RSA [53] cryptosystem and signature scheme.
A user creates an RSA key pair by ﬁrst generating two
random primes, p and q, a public exponent e, and a private
exponent d such that e · d ≡ 1 (mod (p − 1)(q − 1)). The
public key is then set to be (e, N ) where N = pq, and the
private key is set to be (d, N ). To sign a message m, the signer
uses its private key to compute σ ← zd mod N, where z is a
collision resistant hashing of m. To verify a signature σ, the
veriﬁer ﬁrst hashes the message by herself and obtains a digest
z(cid:2). She then computes z(cid:2)(cid:2) ← σe mod N using the public key
and veriﬁes that z(cid:2) = z(cid:2)(cid:2), and rejects the signature otherwise.
The Chinese Remainder Theorem. A common optimization
used by most applications to compute σ ← zd mod N is the
Chinese Remainder Theorem (CRT). Here, the private key
is ﬁrst augmented with dp ← d mod (p − 1) and dq ←
d mod (q−1). Next, instead of computing zd mod N directly,
the signer computes σp ← zdp mod p and σq ← zdq mod q.
Finally, the signer computes σ from σp and σq using the CRT.
Partial Key Recovery. Cryptographic keys recovered through
a side channel are typically subject to some measure of noise.
Often only a fraction of the key bits are recovered, and their
values are not known with certainty. Various researchers have
exploited the redundancy present in private key material to
correct the errors [5, 25, 44, 46, 48, 66].
III. THREAT MODEL
We assume an attacker that runs unprivileged software
within the same operating system (OS) as the victim software.
The OS maintains isolation between the victim program and
the attacker. In particular, we assume that
the OS works
correctly. We further assume that the attacker cannot exploit
microarchitectural side channel leakage from the victim, either
because the victim does not
leak over microarchitectural
channels or because the OS enforces time isolation [16]. We
do assume that the machine is vulnerable to the Rowhammer
attack. However, we assume that the attacker only changes
its own private memory to bypass any countermeasures and
detection mechanisms. Finally, we assume that the attacker is
able to somehow trigger the victim to perform allocations of
secret data (for example using an incoming SSH connections
for the OpenSSH attack in Section VII).
IV. RAMBLEED
Previous research mostly considers Rowhammer as a threat
to data integrity, allowing an unprivileged attacker to modify
data without accessing it. With RAMBleed, however, we
show that Rowhammer effects also have implications on data
conﬁdentiality, allowing an unprivileged attacker to leverage
Rowhammer-induced bit ﬂips in order to read the value of