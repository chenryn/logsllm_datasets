title:Kruiser: Semi-synchronized Non-blocking Concurrent Kernel Heap Buffer
Overflow Monitoring
author:Donghai Tian and
Qiang Zeng and
Dinghao Wu and
Peng Liu and
Changzhen Hu
Kruiser: Semi-synchronized Non-blocking Concurrent Kernel Heap Buffer
Overﬂow Monitoring
Donghai Tian†∗, Qiang Zeng∗, Dinghao Wu∗, Peng Liu∗, Changzhen Hu†
†School of Computer Science, Beijing Institute of Technology, Beijing, China
{dhai, chzhoo}@bit.edu.cn
∗Pennsylvania State University, University Park, PA, USA
{quz105, dinghao, pliu}@psu.edu
Abstract
Kernel heap buffer overﬂow vulnerabilities have been
exposed for decades, but there are few practical counter-
measure that can be applied to OS kernels. Previous so-
lutions either suffer from high performance overhead or
compatibility problems with mainstream kernels and hard-
In this paper, we present KRUISER, a concurrent
ware.
kernel heap buffer overﬂow monitor. Unlike conventional
methods, the security enforcement of which is usually in-
lined into the kernel execution, Kruiser migrates security
enforcement from the kernel’s normal execution to a con-
current monitor process, leveraging the increasingly pop-
ular multi-core architectures. To reduce the synchroniza-
tion overhead between the monitor process and the running
kernel, we design a novel semi-synchronized non-blocking
monitoring algorithm, which enables efﬁcient runtime de-
tection on live memory without incurring false positives. To
prevent the monitor process from being tampered and pro-
vide guaranteed performance isolation, we utilize the virtu-
alization technology to run the monitor process out of the
monitored VM, while heap memory allocation information
is collected inside the monitored VM in a secure and efﬁ-
cient way. The hybrid VM monitoring technique combined
with the secure canary that cannot be counterfeited by at-
tackers provides guaranteed overﬂow detection with high
efﬁciency. We have implemented a prototype of KRUISER
based on Linux and the Xen hypervisor. The evaluation
shows that Kruiser can detect realistic kernel heap buffer
overﬂow attacks effectively with minimal overhead.
1 Introduction
Buffer overﬂows have been comprehensively studied for
many years, but they remain as most severe vulnerabili-
ties. According to the National Vulnerability Database, 319
buffer overﬂow vulnerabilities were reported in 2010, and
239 of them were marked as high severity [39].
Buffer overﬂows can be roughly divided into two cate-
gories: stack-based buffer overﬂows and heap-based buffer
overﬂows. Both exist in not only user space but also kernel
space. Compared with user-space buffer overﬂows, kernel-
space buffer overﬂow vulnerabilities are more severe in that
once such a vulnerability is exploited, attackers can over-
ride any kernel-level protection mechanism. Recently, more
and more realistic buffer overﬂow exploits have been re-
leased in modern operating systems including Linux [52],
OpenBSD [54] and the latest Windows 7 system [35].
Many effective countermeasures against stack-based
buffer overﬂows have been proposed, some of which, such
as StackGuard [14] and ProPolice [26], have been widely
deployed in compilers and commodity OSes. On the other
hand, practical countermeasures against heap-based buffer
overﬂows are few, especially in the kernel space. To our
knowledge, there are no practical mechanisms that have
been widely deployed detecting kernel space heap buffer
overﬂows. Previous methods suffer from two major lim-
itations: (1) some of them perform detection before each
buffer write operation [4, 27, 38, 28, 47], which inevitably
introduce considerable performance overhead. This kind of
inlined security enforcement can heavily delay the moni-
tored process when the monitored operations become in-
tense; (2) some approaches do not check heap buffer over-
ﬂows until a buffer is deallocated [45, 3], so that the detec-
tion occasions entirely depend on the control ﬂow, which
may allow a large time window for attackers to compromise
the system. Other approaches [48, 16] either depend on spe-
cial hardware or require the operating system to be ported
to a new architecture, which are not practical for wide de-
ployment.
In this paper, we present Kruiser, a concurrent kernel
heap overﬂow monitor. Unlike previous solutions, Kruiser
utilizes the commodity hardware to achieve highly efﬁcient
monitoring with minimal changes to the existing OS kernel.
Our high-level idea is consistent with the canary checking
methods, which ﬁrst place canaries into heap buffers and
then check their integrity. Once a canary is found to be
tampered, an overﬂow is detected.
Different from conventional canary-based methods that
are enforced by the kernel inline code, we make use of a
separate process, which runs concurrently with the OS ker-
nel to keep checking the canaries. To address the concur-
rency issues between the monitor process and OS kernel,
we design an efﬁcient data structure that is used to collect
canary location information. Based on this data structure,
we propose a novel semi-synchronized algorithm, by which
the heap allocator does not need to be fully synchronized
while the monitor process is able to check heap canaries
continuously. The monitor process is constantly checking
kernel heap buffer overﬂows in an inﬁnite loop. We call this
technique kernel cruising. Our semi-synchronized cruis-
ing algorithm is non-blocking. The kernel execution is not
blocked by monitoring, and monitoring is not blocked by
the kernel execution. Thus the performance and other im-
pacts on kernel execution characteristics are very small on
a multi-core architecture.
We have explored kernel heap management design prop-
erties to collect heap buffer region information at page level
instead of individual buffers. A conventional approach is to
maintain the collection of canary addresses of live buffers
in a dynamic data structure, which requires hooking per
buffer allocation and deallocation. Instead of interposing
per heap buffer operation, we explore the characteristics
of kernel heap management and hook the much less fre-
quent operations that switch pages into and out of the heap
page pool, which enables us to use a ﬁx-sized static data
structure to store the metadata describing all the canary lo-
cations. Compared to using a dynamic data structure, our
approach avoids the overhead of data structure growth and
shrink; more importantly, it reduces overhead and complex-
ity of the synchronization between the monitor process and
the canary collecting code.
To provide performance isolation and prevent the moni-
tor process from being compromised by attackers, we take
advantage of virtualization to deploy the monitor process
in a trusted execution environment. Kruiser employs the
Direct Memory Mapping technique, by which the moni-
tor process can perform frequent memory introspection ef-
ﬁciently. On the other hand, the buffer address information
is collected inside the VM to avoid costly hypervisor calls;
Secure In-VM (SIM) [50] approach is adapted to protect the
metadata from attackers.
In summary, we make the following contributions:
• Semi-synchronized concurrent monitoring: We
propose a novel non-blocking concurrent monitoring
algorithm, in which neither the monitor process nor
the monitored process needs to be fully synchronized
to eliminate concurrency issues such as race condi-
tions; the monitor keeps checking live kernel memory
without incurring false positives. We call this semi-
synchronized. Concurrent monitoring leverages more
and more popular multicore architectures and thus the
performance overhead is low compared to inline secu-
rity enforement.
• Kernel cruising: The novel cruising idea has been re-
cently explored [65, 25]. It is nontrivial to apply this
to kernel heap cruising.
• Page-level buffer region vs. individual buffers: We
explore speciﬁc kernel heap management design prop-
erties to keep metadata at page level instead of at in-
dividual buffer level. This enables very efﬁcient heap
buffer metadata bookkeeping via a static ﬁxed-size ar-
ray instead of dynamic data structures and thus reduces
the performance overhead dramatically.
• Out-of-VM monitoring plus In-VM interposition:
The isolated monitor process along with direct mem-
ory mapping through virtualization is applied to
achieve efﬁcient out-of-the-box monitoring. More-
over, we apply the SIM framework to protect the In-
VM metadata collection. The hybrid VM monitoring
scheme provides a secure and efﬁcient monitoring.
• Secure canary: Unlike conventional canaries, which
can be inferred and then counterfeited based on other
canary values, we proposed the conception of secure
canary and provided an efﬁcient solution, such that
once a canary is corrupted, it cannot be recovered by
attackers. Secure canaries along with the hybrid VM
monitoring scheme guarantee the detection of buffer
overﬂow attacks.
We have implemented a prototype of Kruiser based on
Linux and the Xen hypervisor. The effectiveness of Kruiser
has been evaluated and the experiments show that Kruiser
can detect kernel heap overﬂows effectively. With respect to
performance and scalability, our kernel cruising approach is
practical—it imposes negligible performance overhead on
SPEC CPU2006, and the throughput slowdown on Apache
is 7.9% on average.
2 Threat Model
This paper is focused on monitoring kernel heap buffer
overﬂows. Other security issues, such as memory content
disclosure or shellcode injection by exploiting format string
vulnerabilities, are not in the scope of this paper. We as-
sume the goal of an attacker X is to compromise the kernel
of a VM; then he can do anything the kernel can do. At-
tacker X can launch arbitrary attacks against the kernel, but
we assume that before a heap overﬂow attack succeeds, the
kernel has not been compromised by other attacks launched
by X. Otherwise, he had already achieved his goal. Once the
attacker X has compromised the kernel using heap buffer
overﬂows, we assume X can do anything the kernel is au-
thorized to do regarding memory read/write, OS control
ﬂow altering, etc. Since this work relies on the virtual-
ization technology to monitor the kernel heap, we assume
the underlying hypervisor is trusted. We leverage previous
research (e.g., HyperSafe [62], HyperSentry [6] and Hyper-
Check [61]) to protect the hypervisor security. Moreover,
our trusted computing base includes a trusted VM where the
monitor resides. This VM is special, and it is not supposed
to run any other applications.
3 Challenges
In this section, we present the challenges we have en-
countered during the design and implementation of this
work. Their solutions are presented in the next section.
C1. Synchronization. Since the monitor process checks
heap memory which is shared and modiﬁed by other pro-
cesses, synchronization is vital to ensure the monitor pro-
cess locate and check live buffers reliably without incurring
false positives.
Lock-based approach: A straightforward approach is to
walk along the existing kernel data structures used to man-
age heap memory, which is usually accessed in a lock-based
manner. This requires the monitor process to follow the
locking discipline. When the lock is held by the moni-
tor process, other processes may be blocked. On the other
hand, the monitor process needs to acquire the lock to pro-
ceed. Both the kernel performance and monitoring effect
will be affected using the lock-based approach. Another ap-
proach is to collect canary addresses in a separate dynamic
data structure such as a hash table. By hooking per buffer al-
location and deallocation, the canary address is inserted into
and removed from the hash table, respectively. Neverthe-
less, it still does not reduce but migrate the lock contention,
since the monitor process and other processes updating the
hash table are synchronized using locks.
Lock-free approach: Scanning volatile memory regions
without acquiring locks is hazardous [25], which usually
needs to suspend the system to double check when an
anomaly is detected. The whole system pause is not de-
sirable and sometimes unacceptable. Another approach is
to maintain the collection of canary addresses in a lock-
free data structure. All processes update and access the
data structure in a non-blocking manner. However, the con-
tention between accessing processes may still lead to high
overhead.
Address space 1
Address space 2
Entry code
Exit code
Hooks
Entry code
Exit code
Figure 1. Overview of Kruiser.
C2. Self-protection and canary counterfeit. As a coun-
termeasure against buffer overﬂow attacks, our component
can become an attack target itself. We rely on a monitor
process that keeps checking—that is, cruising—the kernel
heap integrity. After the system is compromised by exploit-
ing the buffer overﬂow vulnerabilities, attackers may try to
kill the monitor process to disable the detection completely.
Attackers can also tamper or manipulate the data structure
needed by our component to mislead or evade the detection.
Moreover, attackers may try to recover the canary after cor-
rupting it.
C3. Compatibility. Kernel heap management is among
the most important components in OS kernels, whose data
structures and algorithms are generally well designed and
implemented for efﬁciency. Thus, the concurrent heap mon-
itoring should not introduce much modiﬁcation for heap
management. Moreover, the solution should be compatible
with mainstream systems as well as hardware.
4 Overview
Kruiser attaches one canary word at the end of each
heap buffer and generates a separate monitor process, which
keeps scanning, or cruising, the canaries to detect buffer
overﬂows and runs concurrently with the monitored system.
In this section we present an overview of the Kruiser ar-
chitecture and the design choices addressing the challenges
presented in the previous section. As shown in Figure 1,
the monitor process is run in a different VM from the mon-
itored OS to strengthen self-protection. The heap buffer
metadata and hooking code are kept in the monitored VM
to achieve efﬁcient buffer information collection. The mon-
itor accesses the inter-VM heap metadata via an efﬁcient
technique called direct memory mapping. To achieve a con-
current monitoring, the monitor process needs to locate and
access the canaries reliably and efﬁciently, while the moni-
tored system allocates and deallocates the buffers and heap
pages continuously.
To address the synchronization challenge (C1), We
explore the characteristics of kernel heap management, and
propose to interpose heap page allocation and deallocation,
by which we maintain concise metadata describing canary
locations in a separate efﬁcient data structure. Compared
with interposing per buffer allocation and deallocation, the
interposition is lightweight and the resultant overhead is
much lower. The per page metadata is concise, which en-
ables us to use a ﬁx-sized static data structure to store it.
Compared with using a concurrent dynamic data structure
to collect canary addresses, the contention due to synchro-
nizing data structure growth and shrink and the overhead
due to data structure maintenance (node allocation and deal-
location) are completely eliminated. More importantly, as
the monitor process traverses our own data structure rather
than relying on existing kernel data structures, it is more
ﬂexible to design the synchronization algorithm, i.e.
the
monitor process do not need to follow the synchronization
discipline imposed by the kernel data structure. Therefore,
we are able to design a highly efﬁcient semi-synchronized
non-blocking algorithm, which enables the monitor process
to constantly check the live memory of the monitored kernel
without incurring false positives.
To address the self-protection and canary counterfeit
challenge (C2), we apply the virtualization technology to
deploy the monitor process into a trusted environment (Fig-
ure 1). To ensure the same efﬁciency as in-the-box moni-
toring, we introduce the Direct Memory Mapping (DMM)
technique, which allows the monitor process to access the
monitored OS memory efﬁciently. To protect the heap
metadata and interposition code from being compromised
by attackers, we apply the SIM [50] framework, which en-
ables the data and code to be protected safely and efﬁciently
inside the monitored VM. As shown in Figure 1, by utiliz-
ing the VMM, we introduce two separate address spaces
in the monitored VM, and address space 2 is used to place
the heap metadata and interposition code. The entry code
and exit code are the only ways to transfer execution be-
tween the two address spaces so that the metadata can be
updated. Canaries are generated applying efﬁcient cryptog-
raphy, such that once a canary is corrupted, it is difﬁcult for
attackers to infer and then recover the canary value.
To address the compatibility challenges (C3), we
made minimal changes to the existing kernel heap manage-
ment based on the commodity hardware. Speciﬁcally, we
hook the allocation/deallocation that adds/removes pages
into/from the heap page pool to update the corresponding
heap metadata in our data structure, so that kernel heap
buffer allocation algorithms are not changed. On the other
hand, the major monitor component is located out of the
monitored kernel leveraging the popular VMM platform,
which is widely used in cloud computing nowadays.
5 Kernel Cruising
In this section, we present the semi-synchronized non-
blocking kernel cruising algorithm. We introduce the data
structure used in the algorithm in Section 5.1. We discuss
potential race conditions in Section 5.2 and describe our al-
gorithm in Section 5.3.
5.1 Page Identity Array
Kernels usually maintain heap metadata in dynamic data
structures. For example, Linux kernel uses a set of lock-
based lists to describe the heap page pool. It is tempting
to walk along the existing data structures to check heap