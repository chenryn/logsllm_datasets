File Upload:
Select a file to upload: 
```
这将允许从本地计算机中选择一个文件，当用户点击“上传文件”时，表单会和选择的文件一起提交
### 编写后台 Servlet
以下是 servlet UploadServlet，会接受上传的文件并把它储存在目录 /webapps/data 中。使用外部配置，如 web.xml 中的 context-param 元素，这个目录名也可以被添加，如下所示：
```java
....
    Location to store uploaded file
    file-upload
         c:\temp\save\
....
```
以下是 UploadServlet 的源代码，可以一次处理多个文件的上传。在继续操作之前，请确认下列各项：
下述例子依赖于 FileUpload，所以一定要确保在你的 classpath 中有最新版本的 commons-fileupload.x.x.jar 文件。你可以从 http://commons.apache.org/fileupload/ 中下载。
FileUpload 依赖于 Commons IO，所以一定要确保在你的 classpath 中有最新版本的 commons-io-x.x.jar 文件。可以从 http://commons.apache.org/io/ 中下载。
在测试下面实例时，你上传的文件大小不能大于 maxFileSize，否则文件将无法上传。
请确保已经提前创建好目录 c:\temp and c:\apache-tomcat-5.5.29\webapps\data。
```java
// Import required java libraries
import java.io.*;
import java.util.*;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.output.*;
@WebServlet(urlPatterns = "/UploadServlet")
public class UploadServlet extends HttpServlet {
   private boolean isMultipart;
   private String filePath;
   private int maxFileSize = 50 * 1024;
   private int maxMemSize = 4 * 1024;
   private File file ;
   public void init( ){
      // Get the file location where it would be stored.
      filePath =
             getServletContext().getInitParameter("file-upload");
   }
   public void doPost(HttpServletRequest request,
               HttpServletResponse response)
              throws ServletException, java.io.IOException {
      // Check that we have a file upload request
      isMultipart = ServletFileUpload.isMultipartContent(request);
      response.setContentType("text/html");
      java.io.PrintWriter out = response.getWriter( );
      if( !isMultipart ){
         out.println("");
         out.println("");
         out.println("Servlet upload");
         out.println("");
         out.println("");
         out.println("No file uploaded");
         out.println("");
         out.println("");
         return;
      }
      DiskFileItemFactory factory = new DiskFileItemFactory();
      // maximum size that will be stored in memory
      factory.setSizeThreshold(maxMemSize);
      // Location to save data that is larger than maxMemSize.
      factory.setRepository(new File("c:\\temp"));
      // Create a new file upload handler
      ServletFileUpload upload = new ServletFileUpload(factory);
      // maximum file size to be uploaded.
      upload.setSizeMax( maxFileSize );
      try{
      // Parse the request to get file items.
      List fileItems = upload.parseRequest(request);
      // Process the uploaded file items
      Iterator i = fileItems.iterator();
      out.println("");
      out.println("");
      out.println("Servlet upload");
      out.println("");
      out.println("");
      while ( i.hasNext () )
      {
         FileItem fi = (FileItem)i.next();
         if ( !fi.isFormField () )
         {
            // Get the uploaded file parameters
            String fieldName = fi.getFieldName();
            String fileName = fi.getName();
            String contentType = fi.getContentType();
            boolean isInMemory = fi.isInMemory();
            long sizeInBytes = fi.getSize();
            // Write the file
            if( fileName.lastIndexOf("\\") >= 0 ){
               file = new File( filePath +
               fileName.substring( fileName.lastIndexOf("\\"))) ;
            }else{
               file = new File( filePath +
               fileName.substring(fileName.lastIndexOf("\\")+1)) ;
            }
            fi.write( file ) ;
            out.println("Uploaded Filename: " + fileName + "");
         }
      }
      out.println("");
      out.println("");
   }catch(Exception ex) {
       System.out.println(ex);
   }
   }
   public void doGet(HttpServletRequest request,
                       HttpServletResponse response)
        throws ServletException, java.io.IOException {
        throw new ServletException("GET method used with " +
                getClass( ).getName( )+": POST method required.");
   }
}
```
记得添加 maven 依赖
```xml
            commons-fileupload
            commons-fileupload
            1.4
            commons-io
            commons-io
            2.4
```
编译和运行 Servlet,现在尝试使用上面创建的 HTML 表单来上传文件。当你访问 http://localhost:8080/UploadFile.htm 时，它会显示如下所示的结果，这将有助于你从本地计算机中上传任何文件。
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-3/11.png)
---
## 处理日期
使用 Servlet 的最重要的优势之一是你可以使用核心 Java 中的大多数可用的方法。本教程将讲解 Java 提供的 Date 类，该类在 java.util 包中是可用的，这个类封装了当前的日期和时间。
Date 类支持两个构造函数。第一个构造函数用当前日期和时间初始化对象。
```
Date( )
```
下面的构造函数接受一个参数，该参数等于自 1970 年 1 月 1 日凌晨零点以来经过的毫秒数。
```
Date(long millisec)
```
一旦你得到一个可用的 Date 对象，你可以调用下列任意支持的方法来使用日期：
```
boolean after(Date date)
如果调用的 Date 对象中包含的日期在 date 指定的日期之后，则返回 true，否则返回 false。
```
```
boolean before(Date date)
如果调用的 Date 对象中包含的日期在 date 指定的日期之前，则返回 true，否则返回 false。
```
```
Object clone( )
重复调用 Date 对象。
```
```
int compareTo(Date date)
把调用对象的值与 date 的值进行比较。如果两个值是相等的，则返回 0。如果调用对象在 date 之前，则返回一个负值。如果调用对象在 date 之后，则返回一个正值。
```
```
int compareTo(Object obj)
如果 obj 是 Date 类，则操作等同于 compareTo(Date)。否则，它会抛出一个 ClassCastException。
```
```
boolean equals(Object date)
如果调用的 Date 对象中包含的时间和日期与 date 指定的相同，则返回 true，否则返回 false。
```
```
long getTime( )
返回 1970 年 1 月 1 日以来经过的毫秒数。
```
```
int hashCode( )
为调用对象返回哈希代码。
```
```
void setTime(long time)
设置 time 指定的时间和日期，这表示从 1970 年 1 月 1 日凌晨零点以来经过的时间（以毫秒为单位）。
```
```
String toString( )
转换调用的 Date 对象为一个字符串，并返回结果。
```
### 获取当前的日期和时间
在 Java Servlet 中获取当前的日期和时间是非常容易的。你可以使用一个带有 `toString()` 方法的简单的 Date 对象来输出当前的日期和时间，如下所示：
```java
// Import required java libraries
import java.io.*;
import java.util.Date;
import javax.servlet.*;
import javax.servlet.http.*;
// Extend HttpServlet class
@WebServlet(urlPatterns = "/CurrentDate")
public class CurrentDate extends HttpServlet {
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
      String title = "Display Current Date & Time";
      Date date = new Date();
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n" +
        "\n" +
        "" + title + "\n" +
        "" + date.toString() + "\n" +
        "");
  }
}
```
现在，让我们来编译上述 servlet 并在 web.xml 文件中创建适当的条目，然后使用 URL http://localhost:8080/CurrentDate 来调用该 servlet。这将会产生如下所示的结果：
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-3/12.png)
尝试刷新 URLhttp://localhost:8080/CurrentDate，每隔几秒刷新一次你都会发现显示时间的差异。
### 日期比较
正如我上面所提到的一样，你可以在 Servlet 中使用所有可用的 Java 方法。如果你需要比较两个日期，以下是方法：
* 你可以使用 `getTime()` 来获取两个对象自 1970 年 1 月 1 日凌晨零点以来经过的毫秒数，然后比较这两个值。
* 你可以使用方法 `before()`、`after()` 和 `equals()`。由于一个月里 12 号在 18 号之前，例如，new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回 true。
* 你可以使用 `compareTo()` 方法，该方法由 Comparable 接口定义并由 Date 实现。
正如我上面所提到的一样，你可以在 Servlet 中使用所有可用的 Java 方法。如果你需要比较两个日期，以下是方法：
* 你可以使用 `getTime()` 来获取两个对象自 1970 年 1 月 1 日凌晨零点以来经过的毫秒数，然后比较这两个值。
* 你可以使用方法 `before()`、`after()` 和 `equals()`。由于一个月里 12 号在 18 号之前，例如，new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回 true。
* 你可以使用 `compareTo()` 方法，该方法由 Comparable 接口定义并由 Date 实现。
SimpleDateFormat 是一个以语言环境敏感的方式来格式化和解析日期的具体类。 SimpleDateFormat 允许你通过为日期时间格式化选择任何用户定义的模式开始。
```java
// Import required java libraries
import java.io.*;
import java.text.*;
import java.util.Date;
import javax.servlet.*;
import javax.servlet.http.*;
// Extend HttpServlet class
@WebServlet(urlPatterns = "/CurrentDate")
public class CurrentDate extends HttpServlet {
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set response content type
      response.setContentType("text/html"); 
      PrintWriter out = response.getWriter();
      String title = "Display Current Date & Time";
      Date dNow = new Date( );
      SimpleDateFormat ft = 
      new SimpleDateFormat ("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n" +
        "\n" +
        "" + title + "\n" +
        "" + ft.format(dNow) + "\n" +
        "");
  }
}
```
再次编译上述 servlet，然后使用 URL http://localhost:8080/CurrentDate 来调用该 servlet。这将会产生如下所示的结果：
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-3/13.png)
要指定时间格式，那么使用时间模式的字符串。在这种模式下，所有的 ASCII 字母被保留为模式字母，这些字母定义如下：
| 字符	| 描述	    |    实例 |
| - | - | - |
| G	    | 时代指示器	                | AD |
| y	    | 四位数的年	                | 2001 |
| M	    | 一年中的月	                | July 或 07 |
| d	    | 一月中的第几天	            | 10 |
| h	    | 带有 A.M./P.M. 的小时（1~12）	| 12 |
| H	    | 一天中的第几小时（0~23）	     | 22 |
| m	    | 一小时中的第几分	             | 30 |
| s	    | 一分中的第几秒	             | 55 |
| S	    | 毫秒	234 |
| E	    | 一周中的星期几	| Tuesday |
| D	    | 一年中的第几天	| 360 |
| F	    | 一个月中的某一周的某一天	| 2 (second Wed. in July) |
| w	    | 一年中的第几周	| 40 |
| W	    | 一月中的第几周	| 1 |
| a	    | A.M./P.M. 标记	| PM |
| k	    | 一天中的第几小时（1~24）	| 24 |
| K	    | 带有 A.M./P.M. 的小时（0~11）	| 10 |
| z	    | 时区	| Eastern Standard Time |
| '	    | Escape for text	| 分隔符 |
| "	    | 单引号	| ` |
---
## Source & Reference
- http://wiki.jikexueyuan.com/project/servlet/cookies-handling.html
- https://wiki.jikexueyuan.com/project/servlet/session-tracking.html
- https://wiki.jikexueyuan.com/project/servlet/database-access.html
- https://wiki.jikexueyuan.com/project/servlet/file-uploading.html
- https://wiki.jikexueyuan.com/project/servlet/handling-date.html