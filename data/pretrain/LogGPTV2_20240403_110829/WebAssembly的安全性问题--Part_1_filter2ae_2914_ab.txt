  * **堆加固(Heap Hardening)** : 堆加固技术是用来缓解缓冲区溢出到元数据时可能导致的对free()之类的需要用到元数据的函数的操纵，从而造成任意写。常见的加固方法包括不可预测的分配以及对元数据的检验，例如链表指针以及块长度等。emscripten包含了经过稍微修改的（这样就可以不需要syscall来运行）的dlmalloc实现，来完成基本的unlink()，具有完全可以确定的分配位置以及没有包含任何真正的不基于assert的验证机制
  * **数据不可执行(DEP)** : 由于WebAssembly无法访问浏览器执行的低级指令，因此不需要DEP。
  * **针对不安全功能的警告** : 测试表明无法在WebAssembly中编译已弃用的函数。Emscripten只会编译在C99中有效的函数。
  * **Control Flow Integrity(CFI)** : 可以提供CFI检查的编译器可以保护被编译为WASM的代码。
### 3.3 可能出现的漏洞
凭借WebAssembly如何在较低级别工作的扎实基础知识，我们可以了解本地漏洞如何转换为网页。Web应用程序提供不同的攻击向量，针对攻击者的不同目标以及不同的用例。因此，许多经典的攻击是不能实现的。随着Web开发环境的不断变化，可能会引入新的漏洞利用链。本部分的目标是研究攻击者可能利用的一些漏洞。
#### 3.3.1 整数溢出(Integer Overflows/underflows)
在WebAssembly中，有四种数据类型:
  * i32: 32-bit integer
  * i64: 64-bit integer
  * f32: 32-bit floating point
  * f64: 64-bit floating point
与C/C++一样，这些类型中的每一种都具有不同的属性，应该在特定情况下使用。Javascript不知道这些东西是什么。Javascript是一种高级，动态，弱类型和解释的编程语言，因此它能做的最好的事情就是将一个数字传递给WebAssembly代码。
JavaScript的数字可以时-2^53和2^53之间的任何值。32位整数可以取-2^31和2^31之间的任何值。在WebAssembly中，i32和i64整数本身不是有符号或无符号的，因此这些类型的解释由各个运算符决定。当算术运算尝试创建一个超出可以用给定位数表示的范围的数值时，结果是整数溢出。但是，更可能的情况是利用整数溢出来利用缓冲区溢出。
我们将在后面的部分中介绍WebAssembly中缓冲区溢出的后果。
#### 3.3.2 格式化字符串(Format String attacks)
默认情况下，Emscripten的printf将信息打印到JavaScript控制台，似乎只是用于调试目的。当攻击者在调用printf或族中的其他函数，例如sprintf()时，控制格式指定的字符串时，可能能够直接对内存进行读写。
以下示例和输出演示了此操作。
    #include 
    #include  
    #include 
    int main(int argc, const char *argv[]) 
    { 
        char bof[] = "AAAA"; 
        printf("%x.%x.%x.%x.%x.\n");
        return 0; 
    }
运行结果为:
    0.0.0.0.41414141.
存储在线性寄存器中的bof将打印到控制台。Emscripten的printf支持％n格式类型，允许攻击者写入数据，而不仅仅是读取数据。但是，尝试通过利用格式化字符串漏洞写入线性内存会引发JavaScript异常。例如，以下的代码和生成的异常。
    #include  
    #include  
    #include 
    int main(int argc, const char *argv[]) 
    { 
        char bof[] = "\x01"; 
        printf("%x.%x.%x.%x.%n.\n");
        return 0;
    }
运行结果为:
    uncaught exception: Runtime error: The application has corrupted its heap memory area (address zero)!
为了理解导致此错误的原因，必须对Emscripten的printf实现进行反向设计和调试。我们将此作为未来的研究方向。
#### 3.3.3 基于堆栈的缓冲区溢出(Stack Based Buffer Over ows)
如WebAssembly文档中所述，如果模块尝试写入分配的线性内存边界之外的内存，则将抛出内存越界的错误异常并终止执行。但是，没有机制可以保护覆盖存储在线性寄存器中的变量。因此，在某些情况下，诸如strcpy之类的不安全函数可能允许攻击者覆盖局部变量。我们可以在以下示例中研究这个想法：bof0
    #include 
    #include 
    #include 
    #include 
    EM_JS(void,overflowAlert,(),{
        alert("overflow");
    });
    int main() 
    {
        char bof0[] = "abc";
        char bof1[] = "123";
        strcpy(bof1,"BBBBBBB");
        if(strcmp(bof0,"abc"))
            overflowAlert();
    return 0;
    }
编译指令:
    emcc bof0.c -o bof0.html’ and run with ’emrun bof0.html
这是一个经典的缓冲区溢出。因为bof0和bof1是连续存储的，所以我们可以用不安全的函数(如strcpy)写入bof1和bof0的边界。然而，这本身就可能是危险的，正如我们将在以下各节中所表明的那样，因为局部变量会导致其他更严重的可利用漏洞。
## 小结
本篇文章介绍了一些基本概念和一些基本的利用方式，在Part 2 中，将会有一些WebAssembly独特的利用方式。