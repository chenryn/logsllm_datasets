title:Demonstrating a Tool for Injection Attack Prevention in MySQL
author:Iberia Medeiros and
Miguel Beatriz and
Nuno Ferreira Neves and
Miguel Correia
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Demonstrating a Tool for Injection Attack
Prevention in MySQL
Ib´eria Medeiros1
Miguel Beatriz2
1LaSIGE, Faculdade de Ciˆencias, Universidade de Lisboa, Portugal
2INESC-ID, Instituto Superior T´ecnico, Universidade de Lisboa, Portugal
Nuno Neves1
Miguel Correia2
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—Despite the signiﬁcant efforts put in building more
secure web applications, cases of high impact breaches continue
to appear. Vulnerabilities in web applications are often created
due to inconsistencies in the way SQL queries are believed to be
run and the way they are actually executed by a Database Man-
agement System (DBMS). This paper presents a demonstration of
SEPTIC, a mechanism that detects and blocks injection attacks
inside the DBMS. The demonstration considers a scenario of a
non-trivial PHP web application, backed by a MySQL DBMS,
which was modiﬁed to include SEPTIC. It presents how SEPTIC
blocks injection attacks without compromising the application
correctness and performance. In addition, SEPTIC is compared
to alternative approaches, such as sanitizations carried out with
standard functions provided language and a web application
ﬁrewall.
Keywords—Web applications; injection attacks; DBMS; soft-
ware security; runtime protection; security.
I.
INTRODUCTION
Despite all effort put in building more secure web appli-
cations, cases of high impact breaches continue to appear. In
fact, the number of web application attacks increased by 26%
in the ﬁrst quarter of 2016 [21], 87% of which were SQL
injection attacks (SQLI). SQLI attacks are performed with
different aims, often for extracting information from databases.
For example, recently, they may have been used to steal 11.5
million sensitive documents from a notorious law ﬁrm, causing
much embarrassment
to many people [8]. They have also
been employed in multistage attacks to critical infrastructures,
namely to alter the levels of chemicals added to drinking water
in a water treatment facility [22].
Defending web applications from SQLI attacks has always
been an important challenge. There are two approaches that are
most common. In the ﬁrst – sanitization of user inputs – devel-
opers insert in the code calls to sanitization functions provided
by the language (e.g., function mysql_real_escape_string
in PHP) or by third party libraries to process the inputs before
they are included in a query that is susceptible to exploitation
(e.g., a query executed by mysql_query). In the second –
use of protection components – systems administrators in-
stall web application ﬁrewalls (WAFs) or application delivery
controllers (ADCs) [23], [9] operating between the browser
and the application, ﬁltering all user inputs supplied to the
application and blocking those that are considered suspicious,
or SQL proxies or database ﬁrewalls [5], operating between the
application and the Database Management System (DBMS),
ﬁltering the queries. There are also other alternatives, such as
mechanisms that ﬁrst analyse or modify the source code of the
web applications, then block injections in runtime [2], [3], [6],
[20], [10].
Although these solutions contribute to improve web secu-
rity, there are many forms of injection attacks for which it
is difﬁcult to provide comprehensive defences. In particular,
these ﬂaws often arise due to a semantic mismatch, i.e., a gap
between the way SQL queries are believed by developers to be
processed and the way they are actually executed by databases,
leading to subtle bugs. This mismatch leads to unexpected
vulnerabilities in the sense that mechanisms such as those
mentioned above can become ineffective, resulting in false
negatives (attacks not detected). To avoid this problem, these
attacks could be handled after the server-side code processes
the inputs and the DBMS validates the queries, reducing the
amount of assumptions that are made. The mismatch and this
solution are not restricted to web applications, meaning that the
same problem can be present in other business applications. In
fact, any class of applications that use a database as backend
may be vulnerable to injection attacks.
In this paper, we present a demonstration of a novel
mechanism that blocks injection attacks inside the DBMS,
protecting any application that uses the database. By running
the mechanism inside the DBMS, the defense is provided off-
the-shelf (without requiring installation), which may lead to
automatic protection similarly to what is currently available
for binary programs based on techniques like address space
layout randomization and canaries [17].
This mechanism is called SElf-Protecting daTabases pre-
ventIng attaCks (SEPTIC) [11]. It focuses on the main cat-
egories of attacks related with databases: SQLI attacks that
continue to be among those with highest risk and for which
new variants continue to appear; and stored injection attacks
that also involve SQL queries. For SQLI, we identify the
attacks essentially by comparing queries with query models,
taking to its full potential an idea that has been previously
used only outside of the DBMS [3], [6] and circumventing the
semantic mismatch. For stored injection, we resort to plugins
that are executed on the ﬂy to deal with speciﬁc attacks before
data is inserted in the database.
SEPTIC is demonstrated with a non-trivial web applica-
tion backed by a database, which corresponds to a com-
mon deployment scenario. In particular,
the demonstration
is based based in the following elements: a web application
programmed in PHP, the language most used in development
of this sort of programs; the Apache web server, also one
of the most commonly utilized web servers; and a MySQL
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.38
551
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:13 UTC from IEEE Xplore.  Restrictions apply. 
backend database, which is probably the most popular open-
source DBMS. The demonstration illustrates how SEPTIC
blocks injection attacks without compromising the application
correctness and performance. The main objectives are:
1)
2)
3)
To show example attacks that can take advantage
of the semantic mismatch to circumvent protection
mechanisms, such as those implemented in the appli-
cation by resorting to PHP sanitization functions and
protection components such as the popular ModSe-
curity WAF [23];
To present the operation of the SEPTIC mechanism
implemented inside MySQL to prevent injection at-
tacks, solving the semantic mismatch problem and
blocking attacks that attempt to exploit it;
To show that SEPTIC is effective and more accurate
than other commonly employed mechanisms, and
that applications are no longer compromised when
SEPTIC is in use.
The paper is organized as follows. Section II presents an
overview of the SEPTIC mechanism, including its features
and modules, detection examples and impact caused in the
MySQL performance. Section III presents the scenario, which
corresponds to an usual interaction between web applications
and databases. This section also explains attacks that exploit
ﬂaws originating from the semantic mismatch. Section IV
presents the phases of the demonstration based on the scenario.
The paper ends with conclusions and discussion in Section V.
II. SEPTIC MECHANISM
This section presents the SEPTIC mechanism, giving a
general overview of its functionality and features. There is
a description of the four modules that compose it, together
with the operation modes and actions. Some examples of
attack detection are included and there is a discussion on the
performance impact in MySQL.
A. Overview
SEPTIC operates inside of the DBMS to detect and block
injection attacks at runtime. Normally, prior to the execution
of a query transmitted by an application, the DBMS parses and
validates the received information. SEPTIC runs right before
the execution step, after all potential modiﬁcations have been
applied to the queries. It analyzes the queries to determine if
they are malicious, ﬂagging them as attacks and then possibly
stopping their processing.
SEPTIC detects SQLI and stored injection attacks. To ﬁnd
SQLI attacks, it compares the structure of the query currently
being processed with a query model previously learned. If
the structure does not match the model, then this indicates
that the query was somehow changed, maybe to cause some
(malicious) unexpected behavior. For stored injection attacks,
SEPTIC applies plugins to check if the user inputs provided to
INSERT and UPDATE commands are erroneous. In the current
implementation there are plugins capable of discovering the
following classes of attacks: stored (persistent) XSS, remote
and local ﬁle inclusion (RFI and LFI), and OS and remote
command execution (OSCI and RCE).
SEPTIC has two main modes of operation: (1) training
mode (or learning mode), to learn the query models of the
queries issued by the application; (2) normal mode, to ﬁnd,
block, and log attacks. The normal mode can be set up as
being detection(-only) or prevention. In the detection mode, the
attacks are not blocked but only logged; in prevention mode,
they are both stopped and logged. The natural order of using
SEPTIC is to ﬁrst run in learning mode and then later on put
it in normal mode.
SEPTIC is composed of 4 modules, as shown in Figure 1
and explained in more detail in Section II-C.
(cid:9)
(cid:5)(cid:1)(cid:17)(cid:3)(cid:11)(cid:3)(cid:9)(cid:21)(cid:3)(cid:19)(cid:24)
(cid:25)(cid:12)(cid:17)(cid:26)(cid:3)(cid:19)(cid:1)(cid:14)(cid:1)(cid:21)(cid:12)(cid:20)(cid:9)(cid:19)(cid:12)(cid:8)(cid:3)(cid:19)
(cid:27)(cid:28)(cid:1)(cid:8)(cid:29)(cid:3)(cid:1)(cid:23)(cid:30)(cid:6)(cid:13)
(cid:5)
(cid:21)(cid:12)(cid:20)(cid:9)(cid:19)(cid:12)(cid:8)(cid:3)(cid:19)
(cid:22)(cid:23)
(cid:16)(cid:3)(cid:2)(cid:3)(cid:17)(cid:12)(cid:8)(cid:7)(cid:17)
(cid:5)(cid:13)(cid:1)(cid:14)(cid:1)(cid:5)(cid:6)
(cid:15)(cid:12)(cid:2)(cid:12)(cid:16)(cid:3)(cid:17)
(cid:1)(cid:2)
(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)
(cid:12)(cid:8)(cid:8)(cid:12)(cid:11)(cid:18)
(cid:19)(cid:3)(cid:8)(cid:3)(cid:11)(cid:8)(cid:7)(cid:17)
(cid:20)(cid:7)(cid:16)(cid:16)(cid:3)(cid:17)
(cid:9)(cid:3)(cid:10)(cid:11)(cid:12)(cid:7)(cid:13)
(cid:1)(cid:2)(cid:3)(cid:3)(cid:2)(cid:4)(cid:5)(cid:6)
(cid:7)(cid:8)(cid:3)(cid:8)(cid:4)(cid:3)(cid:8)(cid:7)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:1)(cid:5)(cid:6)
(cid:2)(cid:7)(cid:8)(cid:9)(cid:10)(cid:9)(cid:11)(cid:12)(cid:8)(cid:9)(cid:7)(cid:2)
Fig. 1: Overview of the SEPTIC modules and data ﬂow.
Before being executed in normal mode, SEPTIC has to be
trained in order to learn the query models of the queries issued
by application. In training mode only the QS&QM manager
and ID generator modules are used. For each query, the ﬁrst
component receives a validated query (Q validated) by the
DBMS and creates its model, whereas the second component
produces its ID. Then, the query model and the ID are stored
in the QM learned store.
When the mechanism is in normal mode, the QS&QM
manager receives a validated query, extracts its query structure
(QS), and requests a query identiﬁer (ID) from the ID genera-
tor. Then, it obtains the query model (QM) associated to that
ID. Next, the attack detector module looks for SQLI and stored
injection attacks, by comparing the QS with the QM and by
applying plugins, respectively. The attacks are registered by
the logger module. In case SEPTIC does not know a QM for
that ID, the QS&QM manager creates a QM, associates the
QM with that ID, and stores it in the QM learned store. The
logger also saves information that a new model was created.
SEPTIC was developed in C. In our prototype, a few lines
of code were added to a single MySQL ﬁle, and the rest of
the code was included in two new ﬁles that were linked with
the rest of the DBMS.
B. Features
SEPTIC has a set of important features, which we present
by comparing them with other mechanisms used to detect
SQLI attacks. Notice that none of these mechanism operate
inside the DBMS, but typically between the application and
the DBMS.
•
Server-side language independence – SEPTIC re-
quires minimal and optional support at server-side
552
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:13 UTC from IEEE Xplore.  Restrictions apply. 
•
•
•
•
•
language engine (SSLE) level to obtain the external
identiﬁers (unlike [18], [14], [7], [25]);
No client conﬁguration – the DBMS client connectors
do not need reconﬁguration to use SEPTIC, as it is
inside the DBMS;
Client diversity – several DBMS clients of different
types may be connected to a single DBMS server with
SEPTIC;
No application source code modiﬁcation – the pro-
grammer does not need to make changes to the web