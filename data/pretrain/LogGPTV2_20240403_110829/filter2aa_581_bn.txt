        "http://photoz.flickr.com/dev/actions/all"
          ]
}
In response to this request, the authorization server generates a permission ticket:
HTTP/1.1 201 Created
Content-Type: application/json
{"ticket": "016f88989-f9b9-11e0-bd6f-0cc66c6004de"}
When the permission ticket is created at the authorization server, the resource server 
sends the following response to the client:
HTTP/1.1 403 Forbidden
WWW-Authenticate: UMA realm="my-realm",
                  host_id=" photos.flickr.com ",
                  as_uri="https://auth.server.com"
                  error="insufficient_scope"
Appendix d  UMA evolUtion
393
{"ticket": "016f88989-f9b9-11e0-bd6f-0cc66c6004de"}
Now the client has to get a new RPT with the required set of permissions. Unlike in 
the previous case, this time the RPT request also includes the ticket attribute from the 
previous 403 response:
POST /rpt HTTP/1.1
Host: as.example.com
Authorization: Bearer GghgjhsuyuE8heweds
{
      "rpt": "dsdsJKhkiuiuoiwewjewkej",
      "ticket": "016f88989-f9b9-11e0-bd6f-0cc66c6004de"
}
Note the Rpt endpoint of the authorization server is secured with oAuth 2.0. to 
access the Rpt endpoint, the client must use an AAt in the Http Authorization 
header as the oAuth bearer token.
At this point, prior to issuing the new RPT to satisfy the requested set of permissions, 
the authorization server evaluates the authorization policies set by the resource owner 
against the client and the requesting party. If the authorization server needs more 
information regarding the requesting party while evaluating the policies, it can interact 
directly with the requesting party to gather the required details. Also, if it needs further 
approval by the resource owner, the authorization server must notify the resource owner 
and wait for a response. In any of these cases, once the authorization server decides to 
associate permissions with the RPT, it creates a new RPT and sends it to the client:
HTTP/1.1 201 Created
Content-Type: application/json
{"rpt": "dsdJhkjhkhk879dshkjhkj877979"}
Appendix d  UMA evolUtion
394
 UMA Phase 3: Accessing the Protected Resource
At the end of phase 2, the client got access to a valid RPT with the required set of 
permissions. Now the client can use it to access the protected resource. The resource 
server again uses the Introspection API exposed by the authorization server to check 
the validity of the RPT. If the token is valid and has the required set of permissions, the 
corresponding resource is returned to the client.
 UMA APIs
UMA defines two main APIs: the Protection API and the Authorization API (see Figure D-9). 
The Protection API sits between the resource server and the authorization server, and 
the Authorization API sits between the client and the authorization server. Both APIs are 
secured with OAuth 2.0. To access the Protection API, the resource server must present a 
PAT as the bearer token; and to access the Authorization API, the client must present an 
AAT as the bearer token.
Figure D-8. The client gets an authorized RPT from the authorization server
Appendix d  UMA evolUtion
395
 Protection API
The Protection API is the interface exposed to the resource server by the authorization 
server. It consists of three subelements: the OAuth Resource Set Registration endpoint,2 
the Client Requested Permission Registration endpoint, and the OAuth Token 
Introspection (RFC 7662) endpoint.
These three APIs that fall under the Protection API address different concerns. 
The resource server uses the Resource Set Registration API to publish semantics and 
discovery properties of its resources to the authorization server. The resource server does 
this in an ongoing manner. Whenever it finds a resource set that needs to be protected by 
an external authorization server, it talks to the corresponding Resource Set Registration 
endpoint to register new resources. This action can be initiated by the resource server 
itself or by the resource owner. The following example shows a JSON request to the 
Resource Set Registration API of the authorization server. The value of the name attribute 
should be human-readable text, and the optional icon_uri can point to any image that 
represents this resource set. The scope array should list all the scope values required to 
2 The latest draft of the OAuth Resource Set Registration specification is available at  
https://tools.ietf.org/html/draft-hardjono-oauth-resource-reg-07
Figure D-9. UMA APIs
Appendix d  UMA evolUtion
396
access the resource set. The type attribute describes the semantics associated with the 
resource set; the value of this attribute is meaningful only to the resource server and can 
be used to process the associated resources:
{
  "name": "John’s Family Photos",
  "icon_uri": "http://www.flickr.com/icons/flower.png",
  "scopes": [
       "http://photoz. flickr.com/dev/scopes/view",
       "http://photoz. flickr.com/dev/scopes/all"
   ],
  "type": "http://www. flickr.com/rsets/photoalbum"
}
This JSON message is also known as the resource description. Each UMA 
authorization server must present a REST API to create (POST), update (PUT), list (GET), 
and delete (DELETE) resource set descriptions. The resource server can utilize this 
endpoint either during phase 1 or in an ongoing manner.
The resource server accesses the Client Requested Permission Registration 
endpoint during phase 2 of UMA flow. The resource server uses this API to inform the 
authorization server about the level of permissions required for the client to access the 
desired resource. The resource server uses the Introspection API to check the validity of 
the RPT.
 Authorization API
The Authorization API is the interface between the client and the authorization server. 
The main responsibility of this API is to issue RPTs.
Appendix d  UMA evolUtion
397
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_20
APPENDIX E
Base64 URL Encoding
Base64 encoding defines how to represent binary data in an ASCII string format. The 
objective of base64 encoding is to transmit binary data such as keys or digital certificates 
in a printable format. This type of encoding is needed if these objects are transported as 
part of an email body, a web page, an XML document, or a JSON document.
To do base64 encoding, first the binary data are grouped into 24-bit groups. 
Then each 24-bit group is divided into four 6-bit groups. Now, a printable character 
can represent each 6-bit group based on its bit value in decimal (see Figure E-1). 
For example, the decimal value of the 6-bit group 000111 is 7. As per Figure E-1, the 
character H represents this 6-bit group. Apart from the characters shown in Figure E-1, 
the character = is used to specify a special processing function, which is to pad. If the 
length of the original binary data is not an exact multiple of 24, then we need padding. 
Let’s say the length is 232, which is not a multiple of 24. Now we need to pad this binary 
data to make its length equal to the very next multiple of the 24, which is 240. In other 
words, we need to pad this binary data by 8 to make its length 240. In this case, padding 
is done by adding eight 0s to the end of the binary data. Now, when we divide this 240 
bits by 6 to build 6-bit groups, the last 6-bit group will be of all zeros—and this complete 
group will be represented by the padding character =.
398
The following example shows how to base64-encode/decode binary data with Java 8. 
The java.util.Base64 class was introduced from Java 8.
byte[] binaryData = // load binary data to this variable
// encode
String encodedString = Base64.getEncoder().encodeToString(binaryData);
// decode
binary[] decodedBinary = Base64.getDecoder().decode(encodedString);
One issue with base64 encoding is that it does not work quite well with URLs. The + 
and / characters in base64 encoding (see Figure E-1) have a special meaning when used 
within a URL. If we try to send a base64-encoded image as a URL query parameter and if 
the base64-encoded string carries any of the preceding two characters, then the browser 
will interpret the URL in a wrong way. The base64url encoding was introduced to 
address this problem. The way base64url encoding works is exactly the same as base64 
encoding other than two exceptions: the character - is used in base64url encoding 
instead of the character + in base64 encoding, and the character _ is used in base64url 
encoding instead of the character / in base64 encoding.
Figure E-1. Base64 encoding
Appendix e  BAse64 URL encoding
399
The following example shows how to base64url-encode/decode binary data with 
Java 8. The java.util.Base64 class was introduced from Java 8.
byte[] binaryData = // load binary data to this variable
// encode
String encodedString = Base64.getUrlEncoder().encodeToString(binaryData);
// decode
binary[] decodedBinary = Base64.getUrlEncoder().decode(encodedString);
Appendix e  BAse64 URL encoding
401
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_21
APPENDIX F
Basic/Digest 
Authentication
HTTP Basic authentication and Digest authentication are two authentication schemes, 
used for protecting resources on the Web. Both are based on username- and password- 
based credentials. When trying to log in to a web site, if the browser presents you a dialog 
box asking your username and password, then most probably this web site is protected 
with HTTP Basic  or Digest authentication. Asking the browser to challenge the user 
to authenticate is one of the quick and dirty ways of protecting a web site. None or at 
least very few web sites on the Internet today use HTTP Basic or Digest authentication. 
Instead, they use a nice form-based authentication or their own custom authentication 
schemes. But still some use HTTP Basic/Digest authentication to secure direct API-level 
access to resources on the Web.
HTTP Basic authentication is first standardized through the HTTP/1.0 RFC (Request 
For Comments)1 by IETF (Internet Engineering Task Force). It takes the username and 
password over the network as an HTTP header in cleartext. Passing user credentials over 
the wire in cleartext is not secure, unless it’s used over a secured transport channel, like 
HTTP over TLS (Transport Layer Security). This limitation was addressed in the RFC 
2617, which defined two authentication schemes for HTTP: Basic Access Authentication 
and Digest Access Authentication. Unlike Basic authentication, the Digest authentication 
is based on cryptographic hashes and never sends user credentials over the wire in 
cleartext.
1 Hypertext Transfer Protocol—HTTP/1.0, www.rfc-base.org/txt/rfc-1945.txt
402
 HTTP Basic Authentication
The HTTP/1.0 specification first defined the scheme for HTTP Basic authentication 
and got further refined by RFC 2617. The RFC 2617 was proposed as a companion 
to the HTTP 1.1 specification or the RFC 2616.2 Then again in 2015, the RFC 2617 
was obsoleted by the new RFC 7617. It’s a challenge-response-based authentication 
scheme, where the server challenges the user to provide valid credentials to access a 
protected resource. With this model, the user has to authenticate him for each realm. 
The realm can be considered as a protection domain. A realm allows the protected 
resources on a server to be partitioned into a set of protection spaces, each with its own 
authentication scheme and/or authorization database.3 A given user can belong to 
multiple realms simultaneously. The value of the realm is shown to the user at the time 
of authentication—it’s part of the authentication challenge sent by the server. The realm 
value is a string, which is assigned by the authentication server. Once the request hits the 
server with Basic authentication credentials, the server will authenticate the request only 
if it can validate the username and the password, for the protected resource, against the 
corresponding realm.
ACCESSING THE GITHUB API WITH HTTP BASIC AUTHENTICATION
GitHub is a web-based git repository hosting service. Its REST API4 is protected with HTTP 
Basic authentication. This exercise shows you how to access the secured GitHub API to create 
a git repository. You need to have a GitHub account to try out the following, and in case you do 
not have one, you can create an account from https://github.com.
Let’s try to invoke the following GitHub API with cURL. It’s an open API that doesn’t require any 
authentication and returns pointers to all available resources, corresponding to the provided 
GitHub username.
\> curl  -v  https://api.github.com/users/{github-user}
For example:
\> curl  -v  https://api.github.com/users/prabath
2 Hypertext Transfer Protocol—HTTP/1.1, www.ietf.org/rfc/rfc2616.txt
3 HTTP Authentication: Basic and Digest Access Authentication, www.ietf.org/rfc/rfc2617.txt
4 GitHub REST API, http://developer.github.com/v3/
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
403
The preceding command returns back the following JSon response.
{
   "login":"prabath",
   "id":1422563,
   "avatar_url":"https://avatars.githubusercontent.com/u/1422563?v=3",
   "gravatar_id":"",
   "url":"https://api.github.com/users/prabath",
   "html_url":"https://github.com/prabath",
   "followers_url":"https://api.github.com/users/prabath/followers",
    "following_url":"https://api.github.com/users/prabath/following 
{/other_user}",
   "gists_url":"https://api.github.com/users/prabath/gists{/gist_id}",
    "starred_url":"https://api.github.com/users/prabath/starred{/owner} 
{/repo}",
   "subscriptions_url":"https://api.github.com/users/prabath/subscriptions",
   "organizations_url":"https://api.github.com/users/prabath/orgs",
   "repos_url":"https://api.github.com/users/prabath/repos",
   "events_url":"https://api.github.com/users/prabath/events{/privacy}",
    "received_events_url":"https://api.github.com/users/prabath/received_
events",
   "type":"User",
   "site_admin":false,
   "name":"Prabath Siriwardena",
   "company":"WSO2",
   "blog":"http://blog.faciellogin.com",
   "location":"San Jose, CA, USA",
   "email":"PI:EMAIL",
   "hireable":null,
   "bio":null,
   "public_repos":3,
   "public_gists":1,
   "followers":0,
   "following":0,
   "created_at":"2012-02-09T10:18:26Z",
   "updated_at":"2015-11-23T12:57:36Z"
}
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
404
Note All the cURL commands used in this book are broken into multiple lines just 
for clarity. When you execute them, make sure to have it as a single line, with no 
line breaks.
now let’s try out another API. Here you create a GitHub repository with the following API call. 
This returns a negative response with the HTTP status code 401 Unauthorized. The API is 
secured with HTTP Basic authentication, and you need to provide credentials to access it:
\> curl -i  -X POST -H 'Content-Type: application/x-www-form-urlencoded'
       -d '{"name": "my_github_repo"}'  https://api.github.com/user/repos
The preceding command returns back the following HTTP response, indicating that the request 
is not authenticated. observing the response from GitHub for the unauthenticated API call to 
create a repository, it looks as though the GitHub API isn’t fully compliant with the HTTP 1.1 
specification. According to the HTTP 1.1 specification, whenever the server returns a 401 
status code, it also must return the HTTP header WWW-Authenticate.
HTTP/1.1 401 Unauthorized
Content-Type: application/json; charset=utf-8
Content-Length: 115
Server: GitHub.com
Status: 401 Unauthorized
{
  "message": "Requires authentication",
  "documentation_url": "https://developer.github.com/v3/repos/#create"
}
Let’s invoke the same API with proper GitHub credentials. Replace $GitHubUserName and 
$GitHubPassword with your credentials:
curl  -i –v -u $GitHubUserName:$GitHubPassword
        -X POST -H 'Content-Type: application/x-www-form-urlencoded'
        -d '{"name": "my_github_repo"}'  https://api.github.com/user/repos
next, let’s look at the HTTP request generated from the cURL client:
POST /user/repos HTTP/1.1
Authorization: Basic cHJhYmF0aDpwcmFiYXRoMTIz
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
405
The HTTP Authorization header in the request is generated from the username and password 
you provided. The formula is simple: Basic Base64Encode(username:password). Any 
base64-encoded text is no better than cleartext—it can be decoded quite easily back to the 
cleartext. That is why Basic authentication on plain HTTP isn’t secured. It must be used in 
conjunction with a secured transport channel, like HTTPS.
The preceding command returns back the following HTTP response (truncated for clarity), 
indicating that the git repository was created successfully.
HTTP/1.1 201 Created
Server: GitHub.com
Content-Type: application/json; charset=utf-8
Content-Length: 5261
Status: 201 Created
{
  "id": 47273092,
  "name": "my_github_repo",
  "full_name": "prabath/my_github_repo"
}
Note To add HTTP Basic authentication credentials to a request generated from 
a cURL client, you can use the option –u username:password. This creates the 