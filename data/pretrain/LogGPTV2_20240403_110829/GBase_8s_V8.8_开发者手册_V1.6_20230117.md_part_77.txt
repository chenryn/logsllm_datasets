(11rows)
由于相关子查询出现在targetlist（查询返回列表）里，对于t1.c1=t2.c1不匹配的场景仍
然需要输出值，因此使用left-outerjoin关联T1&T2确保t1.c1=t2.c1在不匹配时子SSQ能够
返回不匹配的补空值，但是这里带了count语句及时在t1.c1=t2.t1不匹配时需要输出0，因
此可以使用一个case-whenNULLthen0elsecount(*)来代替。
上述SQL语句可以改写为：
withssqas
(
selectcount(*)cnt,c1fromt2groupbyc1
)
selectcasewhen
ssq.cntisnullthen0
elsessq.cnt
endcnt,t1.c1,t3.c1
fromt1leftjoinssqonssq.c1=t1.c1,t3
wheret1.c1=t3.c1
orderbyssq.cnt,t1.c1;
改写后的执行计划为
​ QUERYPLAN
南大通用数据技术股份有限公司
563
GBase 8s V8.8开发者手册
-------------------------------------------
​ Sort
​ SortKey:ssq.cnt,t1.c1
​ CTEssq
​ -> HashAggregate
​ GroupByKey:t2.c1
​ -> SeqScanont2
​ -> HashJoin
​ HashCond:(t1.c1=t3.c1)
​ -> HashLeftJoin
​ HashCond:(t1.c1=ssq.c1)
​ -> SeqScanont1
​ -> Hash
​ -> CTEScanonssq
​ -> Hash
​ -> SeqScanont3
(15rows)
 相关条件为不等值场景
例如：
selectt1.c1,t1.c2
fromt1
wheret1.c1=(selectagg()fromt2.c2>t1.c2);
对于非等值相关条件的SubLink目前无法提升，从语义上可以通过做2次join（一次
CorrelationKey，一次rownum自关联）达到提升改写的目的。
改写方案有两种。
 子查询改写方式
selectt1.c1,t1.c2
fromt1,(
selectt1.rowid,agg()aggref
fromt1,t2
wheret1.c2>t2.c2groupbyt1.rowid
)dt/*derivedtable*/
wheret1.rowid=dt.rowidANDt1.c1=dt.aggref;
 CTE改写方式
WITHdtas
(
南大通用数据技术股份有限公司
564
GBase 8s V8.8开发者手册
selectt1.rowid,agg()aggref
fromt1,t2
wheret1.c2>t2.c2groupbyt1.rowid
)
selectt1.c1,t1.c2
fromt1,derived_table
wheret1.rowid=derived_table.rowidAND
t1.c1=derived_table.aggref;
- 对于AGG类型为count(*)时需要进行CASE-WHEN对没有match的场景补0处理，
非COUNT(*)场景NULL处理。
-CTE改写方式如果有sharescan支持性能上能够更优。
更多优化示例
示例：修改select语句，将子查询修改为和主表的join，或者修改为可以提升的subquery，
但是在修改前后需要保证语义的正确性。
explain(costsoff)select*fromt1wheret1.c1in(selectt2.c1fromt2wheret1.c1=t2.c2);
QUERYPLAN
--------------------------------
SeqScanont1
Filter:(SubPlan1)
SubPlan1
-> SeqScanont2
Filter:(t1.c1=c2)
(5rows)
上面事例计划中存在一个subPlan，为了消除这个subPlan可以修改语句为：
explain(costsoff)select*fromt1whereexists(selectt2.c1fromt2wheret1.c1=t2.c2and
t1.c1=t2.c1);
QUERYPLAN
------------------------------------------
HashJoin
HashCond:(t1.c1=t2.c2)
-> SeqScanont1
-> Hash
-> HashAggregate
GroupByKey:t2.c2,t2.c1
-> SeqScanont2
南大通用数据技术股份有限公司
565
GBase 8s V8.8开发者手册
Filter:(c2=c1)
(8rows)
从计划可以看出，subPlan消除了，计划变成了两个表的hashjoin，这样会大大提高执
行效率。
14.4.6.3 统计信息调优
统计信息调优介绍
GBase8s是基于代价估算生成的最优执行计划。优化器需要根据analyze收集的统计信
息行数估算和代价估算，因此统计信息对优化器行数估算和代价估算起着至关重要的作用。
通过analyze收集全局统计信息，主要包括：pg_class表中的relpages和reltuples；pg_statistic
表中的stadistinct、stanullfrac、stanumbersN、stavaluesN、histogram_bounds等。
实例分析1：未收集统计信息导致查询性能差
在很多场景下，由于查询中涉及到的表或列没有收集统计信息，会对查询性能有很大的
影响。
表结构如下所示：
CREATETABLELINEITEM
(
L_ORDERKEY BIGINT NOTNULL
,L_PARTKEY BIGINT NOTNULL
,L_SUPPKEY BIGINT NOTNULL
,L_LINENUMBER BIGINT NOTNULL
,L_QUANTITY DECIMAL(15,2)NOTNULL
,L_EXTENDEDPRICE DECIMAL(15,2)NOTNULL
,L_DISCOUNT DECIMAL(15,2)NOTNULL
,L_TAX DECIMAL(15,2)NOTNULL
,L_RETURNFLAG CHAR(1) NOTNULL
,L_LINESTATUS CHAR(1) NOTNULL
,L_SHIPDATE DATE NOTNULL
,L_COMMITDATE DATE NOTNULL
,L_RECEIPTDATE DATE NOTNULL
,L_SHIPINSTRUCT CHAR(25) NOTNULL
,L_SHIPMODE CHAR(10) NOTNULL
,L_COMMENT VARCHAR(44) NOTNULL
)with(orientation=column,COMPRESSION=MIDDLE);
CREATETABLEORDERS
(
南大通用数据技术股份有限公司
566
GBase 8s V8.8开发者手册
O_ORDERKEY BIGINT NOTNULL
,O_CUSTKEY BIGINT NOTNULL
,O_ORDERSTATUS CHAR(1) NOTNULL
,O_TOTALPRICE DECIMAL(15,2)NOTNULL
,O_ORDERDATE DATENOTNULL
,O_ORDERPRIORITYCHAR(15) NOTNULL
,O_CLERK CHAR(15) NOTNULL
,O_SHIPPRIORITY BIGINT NOTNULL
,O_COMMENT VARCHAR(79) NOTNULL
)with(orientation=column,COMPRESSION=MIDDLE);
查询语句如下所示：
explainverboseselect
count(*)asnumwait
from
lineiteml1,
orders
where
o_orderkey=l1.l_orderkey
ando_orderstatus='F'
andl1.l_receiptdate>l1.l_commitdate
andnotexists(
select
*
from
lineiteml3
where
l3.l_orderkey=l1.l_orderkey
andl3.l_suppkey<>l1.l_suppkey
andl3.l_receiptdate>l3.l_commitdate
)
orderby
numwaitdesc;
当出现该问题时，可以通过如下方法确认查询中涉及到的表或列有没有做过analyze收
集统计信息。
(1) 通过explainverbose执行query分析执行计划时会提示WARNING信息，如下所示：
WARNING:Statisticsinsometablesorcolumns(public.lineitem.l_receiptdate,
public.lineitem.l_commitdate,public.lineitem.l_orderkey,public.lineitem.l_suppkey,
public.orders.o_orderstatus,public.orders.o_orderkey)arenotcollected.
HINT:Doanalyzefortheminordertogenerateoptimizedplan.
南大通用数据技术股份有限公司
567
GBase 8s V8.8开发者手册
(2) 可以通过在pg_log目录下的日志文件中查找以下信息来确认是当前执行的query是否由
于没有收集统计信息导致查询性能变差。
2017-06-1417:28:30.336CST14064402457985620971684[BACKEND]LOG:Statisticsin
sometablesorcolumns(public.lineitem.l_receiptdate,public.lineitem.l_commitdate,
public.lineitem.l_orderkey,public.linei
tem.l_suppkey,public.orders.o_orderstatus,public.orders.o_orderkey)arenotcollected.
2017-06-1417:28:30.336CST14064402457985620971684[BACKEND]HINT:Doanalyze
fortheminordertogenerateoptimizedplan.
当通过以上方法查看到哪些表或列没有做analyze，可以通过对WARNING或日志中上
报的表或列做analyze可以解决由于为收集统计信息导致查询变慢的问题。
14.4.6.4 算子级调优
算子级调优介绍
一个查询语句要经过多个算子步骤才会输出最终的结果。由于个别算子耗时过长导致整
体查询性能下降的情况比较常见。这些算子是整个查询的瓶颈算子。通用的优化手段是
EXPLAINANALYZE/PERFORMANCE命令查看执行过程的瓶颈算子，然后进行针对性优化。
如下面的执行过程信息中，Hashagg算子的执行时间占总时间的：(51016-13535)/56476
≈66%，此处Hashagg算子就是这个查询的瓶颈算子，在进行性能优化时应当优先考虑此算
子的优化。
算子级调优示例
示例1：基表扫描时，对于点查或者范围扫描等过滤大量数据的查询，如果使用SeqScan
全表扫描会比较耗时，可以在条件列上建立索引选择IndexScan进行索引扫描提升扫描效率。
gsql=# explain(analyzeon,costsoff)select*fromstore_saleswheress_sold_date_sk=
2450944;
id| operation | A-time |A-rows|PeakMemory |
A-width
----+--------------------------------+---------------------+--------+--------------+---------
1|-> Streaming(type:GATHER) |3666.020 | 3360|195KB |
2| -> SeqScanonstore_sales|[3594.611,3594.611]| 3360|[34KB,34KB]|
(2rows)
PredicateInformation(identifiedbyplanid)
南大通用数据技术股份有限公司
568
GBase 8s V8.8开发者手册
-----------------------------------------------
2--SeqScanonstore_sales
Filter:(ss_sold_date_sk=2450944)
RowsRemovedbyFilter:4968936
gsql=# createindexidxonstore_sales_row(ss_sold_date_sk);
CREATEINDEX
gsql=# explain(analyzeon,costsoff)select*fromstore_sales_rowwheress_sold_date_sk=
2450944;
id| operation | A-time |A-rows|
PeakMemory |A-width
----+------------------------------------------------+-----------------+--------+--------------+----------
1|-> Streaming(type:GATHER) |81.524 | 3360|
195KB |
2| -> IndexScanusingidxonstore_sales_row|[13.352,13.352]| 3360|[34KB,
34KB]|
(2rows)
上述例子中，全表扫描返回3360条数据，过滤掉大量数据，在ss_sold_date_sk列上建
立索引后，使用IndexScan扫描效率显著提高，从3.6秒提升到13毫秒。
示例2：如果从执行计划中看，两表join选择了NestLoop，而实际行数比较大时，NestLoop
Join 可能执行比较慢。如下的例子中 NestLoop 耗时 181 秒，如果设置参数
enable_mergejoin=off关掉MergeJoin，同时设置参数enable_nestloop=off关掉NestLoop，让
优化器选择HashJoin，则Join耗时提升至200多毫秒。
示例3：通常情况下Agg选择HashAgg性能较好，如果大结果集选择了Sort+GroupAgg，
则需要设置enable_sort=off，HashAgg耗时明显优于Sort+GroupAgg。
南大通用数据技术股份有限公司
569
GBase 8s V8.8开发者手册
14.4.7 经验总结：SQL 语句改写规则
根据数据库的SQL执行机制以及大量的实践，总结发现：通过一定的规则调整SQL语
句，在保证结果正确的基础上，能够提高SQL执行效率。如果遵守这些规则，常常能够大
幅度提升业务查询效率。
 使用unionall代替union。
union在合并两个集合时会执行去重操作，而unionall则直接将两个结果集合并、不执
行去重。执行去重会消耗大量的时间，因此，在一些实际应用场景中，如果通过业务逻辑已
确认两个集合不存在重叠，可用unionall替代union以便提升性能。
 join列增加非空过滤条件。
若join列上的NULL值较多，则可以加上isnotnull过滤条件，以实现数据的提前过滤，
提高join效率。
 notin转notexists。
notin语句需要使用nestloopantijoin来实现，而notexists则可以通过hashantijoin来
实现。在join列不存在null值的情况下，notexists和notin等价。因此在确保没有null值时，
可以通过将notin转换为notexists，通过生成hashjoin来提升查询效率。
如下所示，如果t2.d2字段中没有null值（t2.d2字段在表定义中notnull）查询可以修
改为：
SELECT*FROMt1WHERE NOTEXISTS(SELECT*FROMt2WHEREt1.c1=t2.d2);
产生的计划如下：
QUERYPLAN
------------------------------
HashAntiJoin
HashCond:(t1.c1=t2.d2)
-> SeqScanont1
-> Hash
-> SeqScanont2
(5rows)
 选择hashagg。
南大通用数据技术股份有限公司
570
GBase 8s V8.8开发者手册
查询中GROUPBY语句如果生成了groupagg+sort的plan性能会比较差，可以通过加大