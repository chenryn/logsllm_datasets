# 十、创造 POD 安全策略
到目前为止讨论的大部分安全性都集中在保护 Kubernetes APIs 上。认证意味着对应用编程接口调用的认证。授权意味着授权访问某些 API。甚至仪表板上的讨论也主要集中在如何通过仪表板安全地向应用编程接口服务器进行认证。
本章将有所不同，因为我们现在将把重点转移到保护节点上。我们将学习如何**pods security policies**(**PSPs**)保护 Kubernetes 集群的节点。我们的重点将是容器如何在集群的节点上运行，以及如何防止这些容器获得超出其应有的访问权限。在本章中，我们将通过研究在节点不受保护的情况下如何利用漏洞来访问集群来详细了解影响。我们还将探索如何在不需要节点访问的代码中利用这些场景。
在本章中，我们将涵盖以下主题:
*   什么是 PSP？
*   他们不是要走了吗？
*   启用 pod 安全策略
*   psp 的替代品
# 技术要求
要遵循本章中的示例，请确保您有一个运行配置的 KinD 集群，该配置来自 [*第 8 章*](08.html#_idTextAnchor228)*RBAC 策略和审核*。
您可以在以下 GitHub 存储库中访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/tree/master/chapter 10](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/tree/master/chapter10)。
# 什么是 POD 安全策略？
PSP 是一个 Kubernetes 资源，它允许你为你的工作负载设置安全控制，允许你对 pod 的功能设置限制。PSP 在 pod 被允许启动之前被评估，如果 pod 试图做 PSP 禁止的事情，它将不被允许启动。
许多人都有使用物理和虚拟服务器的经验，大多数人都知道如何保护运行在这些服务器上的工作负载。当您谈论保护每个工作负载时，需要对容器进行不同的考虑。要理解为什么 PSPs 和其他 Kubernetes 安全工具如**开放策略代理** ( **OPA** )存在，您需要了解容器与**虚拟机** ( **VM** )有何不同。
## 了解容器和虚拟机之间的区别
“*容器是一个轻量级的 VM* ”通常是对容器和 Kubernetes 不熟悉的人描述容器的方式。虽然这是一个简单的类比，但从安全角度来看，这是一个危险的比较。运行时的容器是在节点上运行的进程。在 Linux 系统上，这些进程被一系列 Linux 技术隔离，这些技术限制了它们对底层系统的可见性。
转到 Kubernetes 集群中的任何节点，运行`top`命令，容器中的所有进程都会列出。例如，即使 Kubernetes 在 KinD 中运行，运行`ps -A -elf | grep java`也会显示 OpenUnison 和 operator 容器进程:
![Figure 10.1 – Pod processes from the system console ](img/Fig_10.1_B15514.jpg)
图 10.1–系统控制台中的 Pod 流程
相比之下，虚拟机顾名思义是一个完整的虚拟系统。它模拟自己的硬件，有一个独立的内核，等等。虚拟机管理程序为虚拟机提供隔离，直至硅层，而相比之下，节点上每个容器之间的隔离非常少。
注意
有一些容器技术可以在自己的虚拟机上运行容器。容器仍然只是一个过程。
当容器没有运行时，它们只是一个“tarball of tarballs”，文件系统的每一层都存储在一个文件中。该映像仍然存储在主机系统或多个主机系统上，无论容器先前在哪里运行或拉出。
注意
“tarball”是由`tar` Unix 命令创建的文件。也可以压缩。
另一方面，虚拟机有自己的虚拟磁盘来存储整个操作系统。虽然有一些非常轻量级的虚拟机技术，但虚拟机和容器之间的大小通常有一个数量级的差异。
虽然有些人将容器称为轻量级虚拟机，但这与事实相去甚远。它们不是以同样的方式隔离的，需要更多地关注它们如何在节点上运行的细节。
从这一节，你可能会认为我们试图说容器是不安全的。没有比这更偏离事实的了。保护 Kubernetes 集群及其上运行的容器，需要注意细节并了解容器与虚拟机的区别。由于许多人确实了解虚拟机，因此很容易尝试将它们与容器进行比较，但这样做会使您处于劣势，因为它们是非常不同的技术。
一旦您了解了默认配置的局限性以及由此带来的潜在危险，您就可以修复这些“问题”
## 容器突破
容器突破是指容器的进程访问底层节点。一旦到达该节点，攻击者现在就可以访问您的环境中该节点拥有的所有其他 pods 和任何功能。爆发也可能是将本地文件系统装入容器的问题。来自[https://securekubernetes.com](https://securekubernetes.com)的一个例子，最初是由来自 VMware 的 Duffie Cooley 指出的，它使用一个容器来挂载本地文件系统。在一个 KinD 集群上运行这个命令会打开对节点文件系统的读取和写入:
```
kubectl run r00t --restart=Never -ti --rm --image lol --overrides '{"spec":{"hostPID": true, "containers":[{"name":"1","image":"alpine","command":["nsenter","--mount=/proc/1/ns/mnt","--","/bin/bash"],"stdin": true,"tty":true,"imagePullPolicy":"IfNotPresent","securityContext":{"privileged":true}}]}}'
If you don't see a command prompt, try pressing Enter.
```
前面代码中的`run`命令启动了一个容器，该容器添加了一个对该示例至关重要的选项`hostPID: true`，该选项允许容器共享主机的进程命名空间。您可能会看到一些其他选项，例如`–mount`和将`privileged`设置为`true`的安全上下文设置。所有选项的组合将允许我们写入主机的文件系统。
现在您已经在容器中了，执行`ls`命令查看文件系统。注意提示是怎样的`root@r00t:/#`，确认你在容器中而不是在主机上:
```
root@r00t:/# ls
bin  boot  build  dev  etc  home  kind  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
```
为了证明我们已经将主机的文件系统映射到我们的容器，创建一个名为`this is from a container`的文件并退出容器:
```
root@r00t:/# touch this_is_from_a_container
root@r00t:/# exit
```
最后，让我们看看主机的文件系统，看看容器是否创建了该文件。由于我们使用单个工作节点运行 KinD，因此我们需要使用 Docker 将`exec`插入到工作节点中。如果您正在使用书中的 KinD 集群，工作节点被称为`cluster01-worker`:
```
docker exec -ti cluster01-worker ls /
bin  boot  build  dev  etc  home  kind  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  this_is_from_a_container  tmp  usr  var
```
就在那里！在本例中，运行了一个装载本地文件系统的容器。从吊舱内部，创建了`this_is_from_a_container`文件。在退出 pod 并进入节点容器后，文件就在那里了。一旦攻击者可以访问节点的文件系统，他们也可以访问 kubelet 的凭证，这可以打开整个集群。
不难想象一系列事件会导致比特币矿工(或者更糟)在集群上运行。网络钓鱼攻击获取开发人员用于其群集的凭据。即使这些凭据只能访问一个名称空间，也会创建一个容器来获取 kubelet 的凭据，然后从那里启动容器，在整个环境中机密部署矿工。肯定有多种缓解措施可用于防止此攻击，包括以下措施:
*   多因素认证，可以防止网络钓鱼凭据被使用
*   仅预授权某些容器
*   一个 PSP，通过阻止一个容器运行来阻止这次攻击`privileged`
*   适当保护的基本映像
安全的核心是设计得当的形象。对于物理机和虚拟机，这是通过保护基本操作系统来实现的。安装操作系统时，您不会在安装过程中选择所有可能的选项。在服务器上运行任何角色或功能不需要的东西都被认为是不良做法。同样的做法需要延续到将在集群上运行的映像，这些映像应该只包含应用所需的必要二进制文件。
考虑到正确保护集群上的映像是多么重要，下一节将从安全角度探讨容器设计。构建一个锁定的容器使得管理节点的安全性变得更加容易。
## 正确设计容器
在探索如何建造`PodSecurityPolicy`之前，重要的是解决容器是如何设计的。通常，使用`PodSecurityPolicy`来减轻对节点的攻击最困难的部分是，如此多的容器是作为根构建和运行的。一旦应用了受限策略，容器将停止运行。这在多个层面上是有问题的。系统管理员在几十年的网络计算中已经学会不要以 root 身份运行进程，尤其是像 web 服务器这样的服务，这些服务是通过不可信网络匿名访问的。
注意
所有网络都应被视为“不可信的”假设所有网络都是敌对的，这将导致更安全的实现方法。这也意味着需要安全性的服务需要经过认证。这个概念叫做零信任。多年来，身份专家一直在使用和倡导这一技术，但谷歌的 BeyondCorp 白皮书([https://cloud.google.com/beyondcorp](https://cloud.google.com/beyondcorp))在 DevOps 和云原生世界中推广了这一技术。零信任的概念也应该适用于你的集群！
代码中的错误会导致对底层计算资源的访问，进而导致容器崩溃。不需要时在特权容器中以 root 用户身份运行，如果被代码错误利用，可能会导致爆发。
2017 年的 Equifax 漏洞利用了 Apache Struts 网络应用框架中的一个 bug，在服务器上运行代码，然后用来渗透和提取数据。如果这个易受攻击的 web 应用是使用特权容器在 Kubernetes 上运行的，那么这个错误可能会导致攻击者获得对集群的访问权限。
建造容器时，至少应遵守以下几点:
*   **以 root 以外的用户身份运行**:绝大多数应用，尤其是微服务，不需要 root。不要以 root 用户身份运行。
*   **只写卷**:如果不写容器，就不需要写权限。音量可以由 Kubernetes 控制。如果需要写入临时数据，请使用`emptyVolume`对象，而不是写入容器的文件系统。
*   **最小化容器中的二进制文件**:这可能很棘手。有些人主张“无发行版”容器，只包含应用的二进制文件，静态编译。没有炮弹，没有工具。当试图调试为什么应用没有按预期运行时，这可能会有问题。这是一个微妙的平衡。
*   **Scan containers for known Common Vulnerability Exposures (CVEs); rebuild often**: One of the benefits of a container is that it can be easily scanned for known CVEs. There are several tools and registries that will do this for you. Once CVEs have been patched, rebuild. A container that hasn't been rebuilt in months, or years even, is every bit as dangerous as a server that hasn't been patched.
    重要说明
    扫描简历是报告安全问题的标准方式。应用和操作系统供应商将在他们的代码中更新补丁来解决这些问题。安全扫描工具随后会使用这些信息，在容器出现已修补的已知问题时采取行动。
在撰写本文时，市场上任何 Kubernetes 发行版最严格的默认值都属于红帽的 OpenShift。除了正常的默认策略之外，OpenShift 还使用随机的用户标识运行 pod，除非 pod 定义指定了一个标识。
在 OpenShift 上测试您的容器是一个好主意，即使它不是您用于生产的发行版。如果一个容器将在 OpenShift 上运行，它可能会与集群可以扔给它的几乎任何安全策略一起工作。最简单的方法是使用红帽的代码就绪容器([https://developers.redhat.com/products/codeready-containers](https://developers.redhat.com/products/codeready-containers))。该工具可以在您的本地笔记本电脑上运行，并启动一个最小的 OpenShift 环境，可用于测试容器。
注意
虽然 OpenShift 有非常严格的开箱即用的安全控制，但它不使用 PSP。它有自己的先于 PSP 的策略系统，称为**安全上下文约束** ( **SCCs** )。SCC 是类似于 PSP，但是不使用 RBAC 来关联豆荚。
### PSP 详细信息
PSP 与 Linux 进程的运行方式紧密相关。该策略本身是任何 Linux 进程都可以拥有的潜在选项的列表。
一个 PSP 有几类特权:
*   **特权**:吊舱需要作为特权吊舱运行吗？pod 是否需要做一些改变底层操作系统或环境的事情？
*   **主机交互**:吊舱是否需要直接与主机交互？例如，它需要主机文件系统访问吗？
*   **卷型**:这个吊舱可以挂载什么样的卷？是否要将其限制在特定的卷上，如机密卷，而不是磁盘？
*   **用户上下文**:流程允许以什么用户身份运行？除了确定允许的用户标识和组标识范围，还可以设置 SELinux 和 AppArmor 上下文。
一个简单的非特权策略可能如下所示:
```
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: pod-security-policy-default
spec:
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    # Forbid adding the root group.
    - min: 1
      max: 65535
  runAsUser:
    rule: 'MustRunAs'
    ranges:
    # Forbid adding the root group.
    - min: 1
      max: 65535
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    # Forbid adding the root group.
    - min: 1
      max: 65535
  volumes:
  - emptyDir
  - secret
  - configMap
  - persistentVolumeClaim
```
规范没有提到容器是否可以被特权化，也没有提到任何来自主机的可以被访问的资源。这意味着，如果 pod 定义试图直接装载主机的文件系统或以根用户身份启动，pod 将失败。必须显式启用任何权限，pod 才能使用它们。
此策略通过指定`MustRunAs`选项限制 pod 可以运行到除 root 以外的任何用户，该选项设置为介于`1`和`65535`之间；它不包括用户 0(根用户)。
最后，该策略允许安装大多数吊舱可能需要的标准卷类型。很少(如果有的话)pods 需要能够挂载节点的文件系统。
有了这个策略，我们之前用来访问节点文件系统的突破就会停止。这是我们之前尝试运行的吊舱的 YAML:
```
---
spec:
  hostPID: true
  containers:
  - name: '1'
    image: alpine
    command:
    - nsenter
    - "--mount=/proc/1/ns/mnt"
    - "--"
    - "/bin/bash"
    stdin: true