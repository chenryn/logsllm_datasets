_F2__x_t_erm_ENTER
_p_w_d_ENTER
_i_d_ENTER
_c_a_t_SPACE/etc/passwd_ENTER
_
===========================
usbpro HID analyzer done
Figure 6: GoodUSB’s proﬁling tool, HoneyUSB, captures injected
keystrokes from a USB storage device maliciously exposing a key-
board (HID) interface.
allows a BadUSB device to take nearly any action on the system
[25]. While GoodUSB allows users to disable the HID interface of
the USB device completely, there are cases where the HID interface
is legal and a functioning part of the device, e.g., the HID interface
of a USB headset controlling the volume of the internal speaker.
To mitigate the danger of HID-based BadUSB attacks, we have
instrumented a copy of the Linux USB HID driver to restrict the
number of characters that can be injected by USB devices. The
Linux USB HID driver is widely used by many USB devices be-
cause it bridges the USB and Input layers in the kernel. As USB Re-
quests Blocks (URBs) are a common abstraction for USB packets
within the kernel, we instrumented the USB HID driver at the URB
level, which saved us from having to perform packet inspection.
We modiﬁed the original USB HID driver to restrict the kinds of
URBs the driver can report to the higher-level input driver. The cur-
rent limited USB HID driver supports only 3 different keystrokes,
corresponding to volume increase, volume decrease, and the mute
button, as are commonly found on USB headsets.
Exercising control of device activity above the interface level
requires instrumenting the various USB drivers to support access
control, like what grsecurity [27] does, which is tedious, potentially
error-prone and volatile to driver changes and new drivers. How-
ever, our limited USB HID driver demonstrates that our approach
can dramatically reduce the scope of BadUSB attacks by limiting
the general USB HID driver without touching any speciﬁc drivers.
5. EVALUATION
We now evaluate the GoodUSB architecture. We ﬁrst provide
a security case study in Section 5.1, where GoodUSB is tested
against a variety of malicious and benign devices. In Section 5.2,
we provide a performance evaluation of our system.
5.1 Attack Analysis
The authors of BadUSB have published a proof-of-concept im-
plementation online [7] with reverse engineered ﬁrmware for a par-
ticular USB storage device that adds a malicious HID interface.
Rather than use this highly speciﬁc instance of BadUSB, we use
several popular penetration and development tools to launch a va-
riety of attacks in order to demonstrate the range of defenses pro-
vided by GoodUSB.
5.1.1 HID-Based Attacks
To demonstrate GoodUSB’s resistance to attacks from exposing
human interface device (HID) interfaces (e.g., exposing keyboard
functionality), we use the Rubber Ducky penetration testing device.
The Ducky provides a user-friendly scripting language enabling
different HID-based attacks. We load a basic Ubuntu terminal com-
mand script [17] into the Ducky, which opens an xterm window
once the Ducky is plugged into the victim’s computer. It then is-
When the Ducky is plugged in again, GoodUSB recognizes it
and shows the correct security picture. Rather than enabling this de-
vice as a USB storage device, we click “This is NOT my device!”,
which redirects the Ducky into HoneyUSB. Using the usbpro
utility, we can easily see all the information and activities of the
ducky, including reconstructing its injected keystrokes, as shown
in Figure 6.
5.1.2 Other USB Interfaces and Composite Devices
We demonstrate more robust interface attacks using a Teensy
USB development board [20]. Unlike the Rubber Ducky, Teensy
is able to simulate not only USB HID devices but also USB Serial
devices, USB MIDI devices and others. Moreover, Teensy is also
able to combine different interfaces together to make a compos-
ite device, which is how devices such as USB headsets and smart-
phones present themselves to hosts.
First, we consider a scenario where a Teensy presents a USB
storage form factor but is acting as a serial device to transmit mes-
sages (e.g., shell scripts) to a trojan residing on the host machine.
To accomplish this, we program a Teensy 3.1 board to expose a se-
rial terminal at /dev/ttyACM0. When the board is plugged in, it
attempts to communicate over the serial interface to the trojan lis-
tening on the tty interface. Based on its form factor, however, the
user registers the Teensy as a USB storage device with GoodUSB.
Consequently, the serial interface is not exposed and the trojan can-
not receive its commands.
sues several commands, including checking the /etc/passwd
ﬁle. The ﬁrst time we plug in the Ducky, GoodUSB pops up the
device registration GUI, asking users for their expectations of the
device’s functionality. Since the Ducky appears to be a USB thumb
drive, we choose “USB Storage” and register it with a security im-
age selected from a list, as shown in Figure 4c. The attack fails
because GoodUSB does not allow USB HID interfaces for “USB
Storage” devices. However, the Ducky continues to function in its
capacity as a storage device.
We next use the Teensy to demonstrate GoodUSB’s ability to
handle composite devices. We program the Teensy to simultane-
ously register itself as a keyboard, a joystick, a mouse and a serial
port. Each interface is controlled by a separate task on the board;
for example, one job instructs the mouse to move around the screen,
while an independent task controls the joystick. With the help of
the advanced mode of gud, GoodUSB displays all the interfaces
requested by the Teensy before any drivers are loaded. This allows
the user to whitelist individual interfaces; for example, we can en-
able mouse functionality while disabling all other input types. The
result is that GoodUSB is able to enforce least privilege over the
composite device by disabling other undesired functionalities re-
quested by the device.
5.1.3 Smartphone-Based USB Attacks
The authors of BadUSB released a shell script called BadAndroid
that emulates a DNS-based Man in the Middle (MitM) attack on the
host machine using a rooted Android phone5. The basic function-
ality required by this attack is USB Tethering, which allows a USB
device to present itself as an Ethernet card to the host. In this ex-
periment, we connect a Nexus S phone to GoodUSB and register
it as “USB Cellphone.” GoodUSB only permits the smartphone to
use the mass storage and vendor-speciﬁc interfaces. At ﬁrst, Nexus
S only registers the storage interface. However, when we enable
USB Tethering on the phone, GoodUSB detects the new interface
5The malicious phone sends the host false DNS information, e.g.,
the IP address of an attacker-controlled server for a banking web
site to steal credit card information.
Action
Normal Enumeration
Min
Avg
140266
140424
Max
141001
Mdev
126
Overhead
N/A
GoodUSB Steps:
Device Identiﬁcation
First Enumeration
Second Enumeration
Honeypot Redirect
8.0
146308
146306
248951
9.0
147675
147463
262057
10.0
149336
149268
295444
0.2
609
558
6842
N/A
5.2%
5.0%
N/A
Table 1: Microbenchmarking GoodUSB operation (in microsec-
onds) averaged over 20 runs.
request and pops up the registration window again, asking for the
user’s permission. Only if the user explicitly selects “USB Cell-
phone with Tethering” will the network interface be available. If
the standard “USB Cellphone” description is again selected, teth-
ering over USB, and the potential DNS MitM attack, is thwarted.
Alternately, when GoodUSB presented a second device regis-
tration window, we could have ﬂagged the device as potentially
malicious. The Nexus S would have then been redirected to Hon-
eyUSB and been granted permission to register the USB Tether-
ing interface, where usbpro would have observed the IP packets
sent and received by the phone. If there is a legitimate need for
additional interfaces such as the network interface for tethering,
GoodUSB can provide this support through the advanced interface
menu or through adding an additional device-to-interface mapping
(e.g., tethering-enabled phones) on the basic menu.
5.2 Performance Analysis
The utility of GoodUSB depends on its imposing minimal over-
head on the host. Below, we provide a micro benchmark based
on the different operations of GoodUSB. Our host machine is a
Lenovo ThinkCentre desktop, with a 3GHz Intel(R) Core(TM)2
Duo CPU (2 cores) and 4 GB of RAM. HoneyUSB, which exe-
cutes inside a KVM virtual guest, runs on the same host, with 2
virtual CPUs and 2GB memory. Both are running Ubuntu Linux
14.04 LTS with kernel 3.13. The testing USB device is a Logitech
ClearChat USB headset H390, containing 4 interfaces (3 audio +
1 HID). To precisely measure the overhead imposed by the core
system rather than user interactions, we bypass the measurement
of the GUI component by hard-coding messages to the kernel from
the user daemon. All measurements are based on 20 enumerations
using same device plugged into the same USB port on the test ma-
chine.
Table 1 provides the results of our measurements. Normal Enu-
meration displays the time required to add a new USB device by
the original khub thread in the kernel without GoodUSB enabled.
Device Identiﬁcation shows the overhead of our device class iden-
tiﬁer, which measures all the descriptors from the USB device and
the current conﬁguration using SHA1. The average overhead for
this step 9 us, which is almost negligible compared to the whole
USB enumeration, which takes about 140 ms. First Enumeration
demonstrates the case when GoodUSB is enabled where the de-
vice is plugged in for the ﬁrst time (within the user space, both the
device registration and the security picture selection GUIs would
be popped up). Compared to the original device adding proce-
dure, GoodUSB only introduces 5.2% overhead. Second Enumer-
ation shows the case where the device is recognized by GoodUSB
(within the user space, only the device recognition GUI would show
up). Compared with the original procedure, GoodUSB only presents
5.0% overhead. Finally, we measure the overhead of HoneyUSB
redirection in Honeypot Redirect. Note that HoneyUSB is already
started in our evaluation and it usually takes 5–10 seconds to start it
in our host machine. Once HoneyUSB is running, the whole redi-
rection needs only 262 ms to allow the device to re-enumerate.
We performed similar tests with a Kingston 2GB USB thumb
drive and a Nexus S phone with/without GoodUSB. The enumer-
ation times are comparable - the overhead is 5.1% for the USB
storage and 7.3% for the phone. The phone appears to have larger
overhead because it enumerates more quickly in our testing, which
is 2275 us in average without GoodUSB enabled. Because USB
is a master-slave protocol, the device’s ability to modify the speed
of enumeration is limited. The speed is dictated by USB 2.0 bus
speeds and the processing delay on the host. The enumeration of
a headset is slower than a ﬂash drive because it is registering more
interfaces, which causes more processing on the host and more data
to be sent over the USB interface. GoodUSB’s overhead is thus vir-
tually negligible during the USB device enumeration phase. There
is no impact at all on regular device operations (e.g., ﬁle transfer,
mouse movement, etc.) after the enumeration phase.
6. DISCUSSION
Does selectively disabling interfaces break USB devices?
We tested GoodUSB against a number of devices found in our
laboratory and commonly used, including USB keyboards, mouses,
ﬂash drives, headsets, wireless adaptors, webcams, smart phones
and chargers, and can anecdotally report that selective authoriza-
tion of interfaces does not prevent benign USB devices from per-
forming the authorized functions in most cases. For example, we
tested GoodUSB against a Logitech USB headset that requested
interfaces for Audio (Input), Audio (Output), and Human Interface
Device (HID). Each feature was able to work in isolation when the
others were disabled, e.g., a headset with HID interface disabled.
This is an exciting potential application for GoodUSB, as some en-
terprise environments may wish to selective disable certain features
(e.g., the microphone found in a headset) for fear that they be mis-
used by malware. We expect that compatibility issues will arise
in instances where USB device developers make unexpected use of
interfaces. One example may be the yubikey [41], an authentication
aid that is both a USB smart card and a HID keyboard. While there
always exist some USB quirks and a serious USB device survey
is needed to tell how diverse the combination of interfaces is, for
these unusual cases, GoodUSB can be easily extended to support
these special devices by adding new device-to-interface mappings.
Can GoodUSB authenticate individual USB device units?
Because devices can lie about their identity, GoodUSB relaxes
the concept of authentication, instead seeking to identify classes of
devices at the granularity of the product type under the same man-
ufacturer. This is sufﬁcient for the goals of our system, which only
seeks to restrict the interface set available to certain kinds of de-
vices; all USB devices of the same model should require access to
the same interfaces.
Can GoodUSB protect against malicious smart phones?
Smart phones are troublesome for GoodUSB due to the use of
the vendor-speciﬁc interface. To minimize compatibility issues,
GoodUSB allows the vendor-speciﬁc interface to be loaded for most
kinds of devices. Many smart phones, including Android and iPhone
devices, request the vendor-speciﬁc interface during enumeration.
Because the phone’s actions are ultimately dependent on a user
space driver, GoodUSB cannot make a determination as to the de-
vice’s potential actions until after the device has loaded. To provide
some conﬁdence as to the intent of the device, we recommend plug-
ging smart phones into HoneyUSB via passthrough, where usbpro
is able to proﬁle the phone in the sandbox.
To demonstrate, we proﬁled the Nexus 5 and iPhone 3GS in Hon-
eyUSB. usbpro reported that Nexus 5 used the vendor-speciﬁc
interface to load the usbfs kernel driver. Different from other
USB kernel drivers, the only functionality provided by usbfs is
to expose the device node to user space on the host and to enable
ﬁle I/O operations. From there, Nexus 5 loads gvfsd-mtp to per-
form the Media Transfer Protocol (MTP) over USB connections.
The iPhone 3GS uses two vendor-speciﬁc interfaces for loading the
usbfs and ipheth kernel drivers. In user space, the usbmuxd
driver allows data synchronization between the host machine and
iOS device. This serves to demonstrate that HoneyUSB can be
used independently of the rest of our system to proﬁle potentially
malicious smart phones.
Can GoodUSB be used as IDS?
Though GoodUSB rests on the ﬁnal decision of users, it is pos-
sible to extend GoodUSB into an IDS for USB devcies, assisting
users to identify anomalous combination of interfaces (storage +
keyboard), as well as anomalous device behaviors (delayed reg-
istration of a keyboard, for instance). For the former, GoodUSB
can pop up an warning window, notifying the policy violation of
the device to the user, rather than disabling the anomalous inter-
face silently. For the later, usbpro could be used to learn the
normal behaviors of devices, and to detect abnormal behaviors in
the future. Machine learning based techniques using timing side
channels [2] can also be integrated into GoodUSB, helping detect
abnormal behaviors of devices early in the USB enumeration phase.
Is GoodUSB easily deployable?
GoodUSB was designed with consideration for users with lim-