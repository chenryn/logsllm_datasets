                    if (_jspx_out != null && ((JspWriter)_jspx_out).getBufferSize() != 0) {
                        try {
                            if (response.isCommitted()) {
                                out.flush();
                            } else {
                                out.clearBuffer();
                            }
                        } catch (IOException var19) {
                        }
                    }
                    if (_jspx_page_context == null) {
                        throw new ServletException(var21);
                    }
                    _jspx_page_context.handlePageException(var21);
                }
            } finally {
                _jspxFactory.releasePageContext(_jspx_page_context);
            }
从上述代码中可以看到，此处依旧未做二次校验，直接获取filename以及content并将其作为参数传递给WorkspaceUtils.saveFile()函数，下面我们跟进该函数进行分析：  
saveFile函数代码如下所示，从这里可以直接根据提供的文件名创建文件并写入内容，之后赋予权限与改变文件拥有者完成写文件操作(其实准确来说应该是创建文件，而不是上传文件，不过由于文件名以及文件路径和文件内容可控，可以说是一个间接性的文件上传)：  
## 关于EXP的思考
在这里我们要提到一个EXP：  
首先，说一下曲折的道路：在该EXP的项目中，我们注意到了几个类似于上面文件分析的代码文件，刚开始笔者以为这应该是存在漏洞的文件，结果跟踪了一下发现存在矛盾，感觉此处的设置应该不会导致安全问题，权限校验以及逻辑非常清晰，可以说很nice~，之后无奈的去微信公众号中找了一些相关的文章发现很多都是关于漏洞复现的，很是无语，于是再找....,过了一段时间(大概半天)，找到了一篇文件，结果发现该国内知名安全公司的分析进竟然也是拿着这个文件进行了一波分析，而且跳过了关键的一些操作，例如isFileWhitelisted等，笔者觉得很是不对，于是剩下的就是想方法获取源码了，之后搭建靶机，发现开启SSH端口，且密码为初始设置的密码，所以不再为内部"内部"只读的事情烦恼，直接SSH连接上去，之后下载下来，导入IDEA分析~  
之所以说上面的这些是因为，如果有人去分析的话不要再去拿这个代码去分析了，同时也表明该代码在逻辑设计上的安全设计值的思考与学习，可以说是JAVA开发人员的一个很好的借鉴点，这里以文件读取为例对其安全机制做说明：  
核心点如下所示：
    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
          HttpSession session = null;
          JspWriter out = null;
          JspWriter _jspx_out = null;
          PageContext _jspx_page_context = null;
          try {
             response.setContentType("text/html");
             PageContext pageContext = _jspxFactory.getPageContext(this, request, response, (String)null, true, 8192, true);
             _jspx_page_context = pageContext;
             ServletContext application = pageContext.getServletContext();
             ServletConfig config = pageContext.getServletConfig();
             session = pageContext.getSession();
             out = pageContext.getOut();
             out.write("\n\n\n\n\n\n\n\n\n\n\n");
             String fileName = WebUtils.getProperty(request, "fileName");
             String username = request.getRemoteUser();
             Enumeration headerNames = request.getHeaderNames();
             Map headers = new HashMap();
             if (username == null) {
                username = F5Properties.getApplicationString("auth.override_user");
             }
             while(headerNames.hasMoreElements()) {
                String headerName = (String)headerNames.nextElement();
                headers.put(headerName, request.getHeader(headerName));
             }
             User user = new User(username, headers);
             UsernameHolder.setUser(user);
             try {
                if (!WorkspaceUtils.isFileWhitelisted(fileName)) {
                   throw new IllegalAccessException("Forbidden to access file " + fileName);
                }
                if (!WorkspaceUtils.userCanAccessPartition(user, fileName, false)) {
                   throw new IllegalAccessException("Forbidden to access file " + fileName);
                }
                JSONObject resultObject = WorkspaceUtils.readFile(fileName);
                out.print(resultObject.toString());
             } catch (IOException var24) {
                throw var24;
             } catch (IllegalAccessException var25) {
                throw var25;
             }
          } catch (Throwable var26) {
             if (!(var26 instanceof SkipPageException)) {
                out = (JspWriter)_jspx_out;
                if (_jspx_out != null && ((JspWriter)_jspx_out).getBufferSize() != 0) {
                   try {
                      if (response.isCommitted()) {
                         out.flush();
                      } else {
                         out.clearBuffer();
                      }
                   } catch (IOException var23) {
                   }
                }
                if (_jspx_page_context == null) {
                   throw new ServletException(var26);
                }
                _jspx_page_context.handlePageException(var26);
             }
          } finally {
             _jspxFactory.releasePageContext(_jspx_page_context);
          }
在上述代码中在直接使用readFie之前会对filename进行一次校验：  
之后跟进该函数中，可以看到会使用getCanonicalPath()来获取当前文件名的路径信息，同时该函数会过滤掉路径中类似于".."的特殊符号，这是其一，另外在这里会创建一个whilelistDirSet的迭代器并结合while循环来依次判断当前的filename是否在白名单中，当然此时的比较对象为realDirPath即父级目录的绝对路径信息：  
在这里我看一下whilelistDirSet，可以看到添加的白名单有"/var/ilx/workspaces/",
"/var/sdm/plugin_store/plugins/"  
之后还有一个有意思的地方是还会对当前操作的用户进行一次全新校验检测，函数WorkspaceUtils.userCanAccessPartition如下所示，自己分析即可：  
在这之后我们才可以进行文件读取，假设我们的主机上存在之前所说的漏洞，那么我们后端的代码改成这样可以有效防御吗？答案是：一定程度上可以，至少在这里是可以的，因为整个文件系统体系结构庞大也说不是上还有其他的地方存在相关的漏洞，这也不好说~
还有一个就是再进行命令执行时，有一次CSRF Token校验，这也值得学习与借鉴：  
在该EXP中的java文件可以说是一种很好的修复策略，涉及到了以下几点：  
1、二次权限校验  
2、白名单策略限制文件读取的路径  
3、采用CSRF Token机制  
4、命令合法性检测机制  
当然，该漏洞要想规避的最佳策略还是需要结合服务器端的配置以及后端代码的来进行修复~
## NewPOC
2020年7月7日，TEAM
ARES安全研究团队披露出一则新的POC，该POC使用JAVA反序列化配合CVE-2020-5902漏洞来执行命令，涉及的类正是org.hsqldb.util.scriptool.main，整个思路较为新颖，而且前一种EXP的利用需要近期有用户进行登录操作才可以实现RCE以及反弹shell，如果没有用户登录则只能读取一些服务器端可读文件以及可读目录下的文件内容，而该EXP一方面可以躲避WAF的检测与拦截(就目前而言)，另一方面由于F5
BIG-IP默认在初始化状态下会运行Hysql，导致攻击者可以通过远程访问并利用org.hsqldb.util.scriptool.main自身的反序列化Gadget来实现RCE，该EXP利用范围显得更加广泛，整个故事如下：  
TEAM ARES首先对官方给出的补丁进行了分析：  
官方给出的缓解措施中通过修改配置项来规避路径穿越造成的文件读取以及命令执行：  
之后通过比较漏洞版本15.1.0
和修改版本15.1.0.4.发现有很多不同点，首先是配置项发生了变化，该配置项使得当攻击者企图通过..;/来达访问未授权的页面时都会被重定向到404页面：  
还有一个特殊的点就是Apache configuration中的/hsqldb被移除了：  
在正常情形下我们直接请求hsqldb是会被重定向到登陆认证页面：  
但是，发现在请求URL后面追加分号";"后即可绕过认证，正常访问hsqldb：  
那么通过/hsqldb我们又可以做点什么呢？之后了解到hypersql是java应用程序使用的嵌入式关系数据库，其某些方法可能存在被滥用的风险。  
刚开始，我们尝试使用用户定义函数(UDF)，然而我们发现该特性在1.8版中不可用，不过幸运的是我们发现我们可以调用本机java函数以及服务器可用的任何方法，主要限制是它必须是静态方法，之后在hsqldb源代码中寻找静态方法，我们发现org.hsqldb.util.scriptool.main()方法反序列化了一个表示为ascii十六进制字符串的java对象，这看起来非常有利用价值，所以我们尝试使用sqltool来手动调用它，并遇到了“序列化失败”错误：  
从上面的错误消息中我们可以看到只需要将enableunsafeserialization属性设置为true，即可成功执行payload，此时，我们证明了经过身份验证的远程代码执行是可能的，之后试图使用/hsqldb;来绕过原先的身份认证并实现RCE，结果post请求导致了连接错误，所以我们再次查看了缓解措施中的建议——regex”.
_..;._ "并注意到原Bypass是"..;”,然后，我们改变了Exploit，使其直接访问hqsldb：  
完整的EXP: 11\hsqldb.jar 1.6\ysoserial)  
在该EXP中hsqldb主要用于提供org.hsqldb库文件，f5RCE.java用于调用org.hsqldb.util.ScriptTool.main()来反序列化payload(在此之前会通过jdbc来远程访问目标主机的hsqldb)，这里更加通俗的说可以是远程连接hsqldb之后得到一个交互端并通过org.hsqldb.util.ScriptTool.main()来反序列化我们的攻击者载荷从而达到RCE：  
CVE-2020-5902.sh通过openssl来提取证书，并通过keytool来将证书或证书链加到可信任证书的清单中(主要是解决443证书信任问题)，之后通过ysoserial利用CC6来生成nc.class，之后生成十六进制的payload.hex，并通过javac命令编译f5RCE.java(此时的资源类来自hsqldb.jar)，最后执行f5RCE并向远程目标主机发送攻击载荷：  
目前已经有检测到该POC相关攻击流量，具体如下图所示：  
同时检测到使用上述方法获取到的shell为root权限，攻击者可在反弹的shell中创建root权限的系统帐户：  
补充说明：关于这个漏洞，笔者从原靶机下载hsqldb.jar包并导入JD-GUI进行分析时，首先定位到关键的函数org.hsqldb.ScriptTool.class的main函数中，并跟踪了整个流程，发现并未出现反序列化的操作，之后全局搜索关键词deserialize发现在getObject处被调用，之后反向追溯getObject函数的调用点，发现Function.class与Column.class两处，之后在Column中对函数convertObject进行溯源，发现在jdbcPreparedStatement.class处被调用，之后再次溯源函数setParameter发现setAsciiStream处被调用，这是较为符合TEAM
ARES在描述中所说“反序列化了一个表示为ascii十六进制字符串的java对象”，但是在ScriptTool中执行过程中并未调用，除非是参数处理时先对参数的输入流进行解析规范化；另外对Function.class中的函数getArguments进行跟踪溯源到getValue()，这里依旧未在org.hsqldb.ScriptTool.class的main函数执行过程中找到，关于这两点笔者并不确定，所以也不在进行深入了，相关截图也不放进来了，整个文章的篇幅已经过长了，有兴趣的可以研究一下，关于原代码中的核心代码以及原EXP、New
EXP还有jar包都放在了GitHub上：
## 防御措施
### 缓解措施
1、登陆 TMOS Shell（tmsh）执行
    tmsh
2、修改 httpd 配置信息
    edit /sys httpd all-properties
3、文件内容如下
    include 'FileETag MTime Size
    Redirect 404 /
    Redirect 404 /
    '
4、按照以下操作保存文件
    按下 ESC 并依次输入
     :wq
5、执行命令刷新配置文件
    save /sys config
6、重启httpd服务
    restart sys service httpd
7、禁用IP对TMUI界面的访问
### 应用升级
BIG-IP 15.x: 15.1.0.4  
BIG-IP 14.x: 14.1.2.6  
BIG-IP 13.x: 13.1.3.4  
BIG-IP 12.x: 12.1.5.2  
BIG-IP 11.x: 11.6.5.2  
PS：建议还是能升级的尽量升级，缓解措施则使用以上最新的缓解措施，并随时关注官方的更新
## 文末总结
有时候我们在做代码审计时可能会发现代码中存在和上面“后端代码分析”部分出现的相同的情形——只要访问到该页面并构造请求即可实现文件读取、命令执行等操作，但是就苦于一开始就有权限校验，从而没法利用，通过该漏洞我们可以认识到，如果后端的代码中存在上述类似的问题，我们可以首先看一下目标服务器的相关中间件，看看是否有可利用的解析特性包括文件解析、URL解析等等，该漏洞不仅值得安全研究人员思考借鉴，同时也值得甲方项目负责人、架构师等项目负责人进行思考与借鉴。
## 参考链接