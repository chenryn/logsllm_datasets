[7] APPLE.
Apple TV Memory Specifications.
https://
developer.apple.com/library/tvos/documentation/
General/Conceptual/AppleTV_PG/index.html#//
apple_ref/doc/uid/TP40015241-CH12-SW1.
June 2016.
Accessed:
[8] APPLE. HomeKit. http://www.apple.com/ios/homekit/.
Accessed: Oct 2015.
[9] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL,
A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL,
P. Flowdroid: Precise context, flow, field, object-sensitive and
lifecycle-aware taint analysis for android apps.
In ACM sym-
posium on Programming Language Design and Implementation
(PLDI) (2014).
[10] BACKES, M., BUGIEL, S., AND GERLING, S. Scippa: System-
In Proceedings of the 30th
centric ipc provenance on android.
Annual Computer Security Applications Conference (2014).
[11] BEHRANG FOULADI AND SAHAND GHANOUN. Honey, I’m
Home!!, Hacking ZWave Home Automation Systems. Black Hat
USA, 2013.
[12] BUSOLD, C., HEUSER, S., RIOS, J., SADEGHI, A.-R., AND
ASOKAN, N. Smart and secure cross-device apps for the internet
of advanced things. In Financial Cryptography and Data Security
(FC) (2015).
[13] CARD, S. K., ROBERTSON, G. G., AND MACKINLAY, J. D.
The information visualizer, an information workspace.
In
SIGCHI Conference on Human factors in computing systems
(1991).
[14] CARLINI, N., FELT, A. P., AND WAGNER, D. An evaluation of
the google chrome extension security architecture. In Presented
as part of the 21st USENIX Security Symposium (USENIX Secu-
rity 12) (2012).
[15] CHENG, W., PORTS, D. R., SCHULTZ, D., POPIC, V.,
BLANKSTEIN, A., COWLING, J., CURTIS, D., SHRIRA, L.,
AND LISKOV, B. Abstractions for usable information flow con-
trol in aeolus. In USENIX ATC (2012).
[16] CONTI, M., CRISPO, B., FERNANDES, E., AND ZHAU-
NIAROVICH, Y. Crˆepe: A system for enforcing fine-grained
context-related policies on android. TIFS (2012).
[17] DENNING, T., KOHNO, T., AND LEVY, H. M. Computer secu-
rity and the modern home. Communications of ACM (2013).
[18] EFSTATHOPOULOS, P., KROHN, M., VANDEBOGART, S.,
FREY, C., ZIEGLER, D., KOHLER, E., MAZI `ERES, D.,
KAASHOEK, F., AND MORRIS, R. Labels and event processes
in the asbestos operating system. In SOSP (2005).
[19] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J.,
MCDANIEL, P., AND SHETH, A. N. Taintdroid: an information-
flow tracking system for realtime privacy monitoring on smart-
phones. In OSDI (2010).
[20] ENCK, W., ONGTANG, M., AND MCDANIEL, P. On lightweight
mobile phone application certification. In ACM SIGSAC Confer-
ence on Computer and Communications Security (CCS) (2009).
[21] ERNST, M. D., JUST, R., MILLSTEIN, S., DIETL, W., PERN-
STEINER, S., ROESNER, F., KOSCHER, K., BARROS, P. B.,
BHORASKAR, R., HAN, S., VINES, P., AND WU, E. X. Col-
laborative verification of information flow for a high-assurance
app store. In ACM SIGSAC Conference on Computer and Com-
munications Security (CCS) (2014).
[22] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER,
D. Android permissions demystified. In ACM SIGSAC Confer-
ence on Computer and Communications Security (CCS) (2011).
[23] FELT, A. P., EGELMAN, S., FINIFTER, M., AKHAWE, D., AND
WAGNER, D. How to ask for permission. In USENIX Conference
on Hot Topics in Security (HotSec) (2012).
[24] FELT, A. P., EGELMAN, S., AND WAGNER, D. I’ve got 99 prob-
lems, but vibration ain’t one: A survey of smartphone users’ con-
cerns. In Proceedings of the Second ACM Workshop on Security
and Privacy in Smartphones and Mobile Devices (2012).
[25] FELT, A. P., HA, E., EGELMAN, S., HANEY, A., CHIN, E.,
AND WAGNER, D. Android permissions: User attention, com-
prehension, and behavior. In Proceedings of the Eighth Sympo-
sium on Usable Privacy and Security (2012), Symposium On Us-
able Privacy and Security (SOUPS).
[26] FERNANDES, E., JUNG, J., AND PRAKASH, A. Security analy-
sis of emerging smart home applications. In IEEE Symposium on
Security and Privacy (S&P) (2016).
[27] FISHER, D. Pair of Bugs Open Honeywell Home Controllers
https://threatpost.com/pair-
Up to Easy Hacks.
of-bugs-open-honeywell-home-controllers-up-to-
easy-hacks/113965/. Accessed: Oct 2015.
[28] GIFFIN, D. B., LEVY, A., STEFAN, D., TEREI, D., MAZI `ERES,
D., MITCHELL, J. C., AND RUSSO, A. Hails: Protecting data
privacy in untrusted web applications. In OSDI (2012).
[29] GOOGLE.
Project Brillo.
https://developers.google.
com/brillo/. Accessed: Oct 2015.
[30] GOOGLE. Project Weave. https://developers.google.
com/weave/. Accessed: Oct 2015.
[31] GOOGLE ANDROID.
Requesting Permissions at Run-
http://developer.android.com/training/
time.
permissions/requesting.html. Accessed: Feb 2016.
[32] GOOGLE DEVELOPERS. Google Fit Developer Documenta-
tion. https://developers.google.com/fit/. Accessed:
Feb 2016.
[33] GOOGLE NEST.
How much bandwidth will Nest cam
https://nest.com/support/article/How-much-
use?
bandwidth-will-Nest-Cam-use. Accessed: June 2016.
[34] HACHMAN, M. Want
to unlock your door with your
face? Windows 10 for IoT Core promises to do just that.
http://www.pcworld.com/article/2962330/internet-
of-things/want-to-unlock-your-door-with-your-
face-windows-10-for-iot-core-promises-to-do-
just-that.html. Accessed: Feb 2016.
[35] HESSELDAHL, A.
A Hacker’s-Eye View of the Internet
of Things. http://recode.net/2015/04/07/a-hackers-
eye-view-of-the-internet-of-things/. Accessed: Oct
2015.
[36] HEULE, S., RIFKIN, D., RUSSO, A., AND STEFAN, D. The
most dangerous code in the browser.
In 15th Workshop on
Hot Topics in Operating Systems (HotOS XV) (Kartause Ittingen,
Switzerland, May 2015), USENIX Association.
[37] HRITCU, C., GREENBERG, M., KAREL, B., PIERCE, B. C.,
AND MORRISETT, G. All your ifcexception are belong to us. In
Proceedings of the 2013 IEEE Symposium on Security and Pri-
vacy (2013), SP ’13.
546  25th USENIX Security Symposium 
USENIX Association
[38] HRITCU, C., GREENBERG, M., KAREL, B., PIERCE, B. C.,
AND MORRISETT, G. All your ifcexception are belong to us.
In Security and Privacy (SP), 2013 IEEE Symposium on (2013),
IEEE.
[39] JANA, S., MOLNAR, D., MOSHCHUK, A., DUNN, A.,
LIVSHITS, B., WANG, H. J., AND OFEK, E. Enabling fine-
grained permissions for augmented reality applications with rec-
ognizers. In USENIX Security Symposium (2013).
[40] JANA, S., NARAYANAN, A., AND SHMATIKOV, V. A Scanner
Darkly: Protecting User Privacy from Perceptual Applications.
In IEEE Symposium on Security and Privacy (S&P) (2013).
[41] JIA, L., ALJURAIDAN,
J., FRAGKAKI, E., BAUER, L.,
STROUCKEN, M., FUKUSHIMA, K., KIYOMOTO, S., AND
MIYAKE, Y. Run-time enforcement of information-flow prop-
erties on android. In European Symposium on Research in Com-
puter Security (2013).
[42] KROHN, M., YIP, A., BRODSKY, M., CLIFFER, N.,
KAASHOEK, M. F., KOHLER, E., AND MORRIS, R. Informa-
tion flow control for standard os abstractions. In SOSP (2007).
[43] LEE, S., WONG, E. L., GOEL, D., DAHLIN, M., AND
SHMATIKOV, V. box: A platform for privacy-preserving apps.
In NSDI (2013).
[44] LOMAS, N. Critical Flaw identified In ZigBee Smart Home De-
vices.
http://techcrunch.com/2015/08/07/critical-
flaw-ided-in-zigbee-smart-home-devices/. Accessed:
Oct 2015.
[45] MYERS, A. C. Jflow: Practical mostly-static information flow
control. In SIGPLAN-SIGACT Symposium on Principles of Pro-
gramming Languages (POPL) (1999).
[46] NADKARNI, A., AND ENCK, W. Preventing accidental data dis-
closure in modern operating systems. In Proceedings of the 2013
ACM SIGSAC conference on Computer & communications secu-
rity (2013), ACM.
J.
Lights-After-Dark SmartThings App.
[47] PANSARASA,
https://github.com/jpansarasa/SmartThings/blob/
master/smartapps/elasticdev/lights-after-dark.
src/lights-after-dark.groovy. Accessed: Feb 2016.
[48] PAUPORE, J., FERNANDES, E., PRAKASH, A., ROY, S., AND
OU, X. Practical always-on taint tracking on mobile devices. In
USENIX Workshop on Hot Topics in Operating Systems (HotOS)
(2015).
[49] RAHMATI, A., AND MADHYASTHA, H. V. Context-specific ac-
cess control: Conforming permissions with user expectations. In
ACM Workshop on Security and Privacy in Smartphones & Mo-
bile Devices (SPSM) (2015).
[50] ROESNER, F., AND KOHNO, T. Securing embedded user in-
terfaces: Android and beyond. In USENIX Security Symposium
(2013).
[51] ROESNER, F., KOHNO, T., MOSHCHUK, A., PARNO, B.,
WANG, H. J., AND COWAN, C. User-driven access control: Re-
thinking permission granting in modern operating systems.
In
IEEE S&P (2012).
[52] ROY, I., PORTER, D. E., BOND, M. D., MCKINLEY, K. S.,
AND WITCHEL, E. Laminar: Practical fine-grained decentralized
information flow control. In PLDI (2009).
[53] RUSSELLO, G., CONTI, M., CRISPO, B., AND FERNANDES, E.
Moses: Supporting operation modes on smartphones.
In ACM
Symposium on Access Control Models and Technologies (SAC-
MAT) (2012).
[54] RUWASE, O., GIBBONS, P. B., MOWRY, T. C., RAMACHAN-
DRAN, V., CHEN, S., KOZUCH, M., AND RYAN, M. Paralleliz-
ing dynamic information flow tracking.
In Proceedings of the
Twentieth Annual Symposium on Parallelism in Algorithms and
Architectures (2008).
[55] SAMSUNG. SmartThings. http://www.smartthings.com/.
Accessed: Nov 2015.
[56] SAMSUNG SMARTTHINGS.
Samsung SmartThings Memory
https://community.smartthings.com/
Specifications.
t/the-next-generation-of-smartthings-is-here/
21521. Accessed: June 2016.
[57] SAMSUNG SMARTTHINGS.
SmartThings Capabilities Ref-
http://docs.smartthings.com/en/latest/
erence.
capabilities-reference.html. Accessed: Feb 2016.
[58] SAMSUNG SMARTTHINGS. What happens if
I
lose my internet connection?
goes out or
//support.smartthings.com/hc/en-us/articles/
205956960-What-happens-if-the-power-goes-out-
or-I-lose-my-internet-connection-. Accessed: May
2016.
the power
https:
[59] SARWAR, G., MEHANI, O., BORELI, R., AND KAAFAR, M. A.
On the effectiveness of dynamic taint analysis for protecting
against private information leaks on android-based devices.
In
International Conference on Security and Cryptography (SE-
CRYPT) (2013).
[60] SCHWARTZ, E. J., AVGERINOS, T., AND BRUMLEY, D. All you
ever wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In IEEE
Symposium on Security and Privacy (S&P) (2010).
[61] STEFAN, D., RUSSO, A., BUIRAS, P., LEVY, A., MITCHELL,
J. C., AND MAZI ´ERES, D. Addressing covert termination and
timing channels in concurrent information flow systems. In ACM
SIGPLAN Notices (2012).
[62] STEFAN, D., RUSSO, A., MITCHELL, J. C., AND MAZI `ERES,
In
D. Flexible dynamic information flow control in Haskell.
Haskell Symposium (September 2011), ACM SIGPLAN.
[63] STEFAN, D., YANG, E. Z., MARCHENKO, P., RUSSO, A., HER-
MAN, D., KARP, B., AND MAZI `ERES, D. Protecting users by
confining javascript with cowl. In OSDI (2014).
[64] TEMPLEMAN, R., RAHMAN, Z., CRANDALL, D., AND KAPA-
DIA, A. PlaceRaider: Virtual theft in physical spaces with smart-
phones. In ISOC Network and Distributed System Security Sym-
posium (NDSS) (2013).
[65] VACHHARAJANI, N., BRIDGES, M. J., CHANG, J., RANGAN,
R., OTTONI, G., BLOME, J. A., REIS, G. A., VACHHARAJANI,
M., AND AUGUST, D. I. Rifle: An architectural framework
for user-centric information-flow security. In Microarchitecture,
2004. MICRO-37 2004. 37th International Symposium on (2004).
[66] WEI, F., ROY, S., OU, X., AND ROBBY. Amandroid: A pre-
cise and general inter-component data flow analysis framework
for security vetting of android apps. In ACM SIGSAC Conference
on Computer and Communications Security (CCS) (2014).
[67] WETHERELL,
J.
Android Heart Rate Monitor App.
https://github.com/phishman3579/android-heart-
rate-monitor. Accessed: Feb 2016.
[68] XU, Y., HUNT, T., KWON, Y., GEORGIEV, M., SHMATIKOV,
V., AND WITCHEL, E. Earp: Principled storage, sharing, and
protection for mobile apps. In NSDI (2016).
[69] XU, Y., AND WITCHEL, E. Maxoid: Transparently confining
mobile applications with custom views of state. In Proceedings
of the Tenth European Conference on Computer Systems (2015),
ACM.
[70] YOON, M.-K.,
SALAJEGHEH, N., CHEN, Y.,
AND
Pift: Predictive information flow
CHRISTODORESCU, M.
tracking.
In 21st International Conference on Architectural
Support for Programming Languages and Operating Systems
(2016).
USENIX Association  
25th USENIX Security Symposium  547
[71] ZELDOVICH, N., BOYD-WICKIZER, S., KOHLER, E., AND
MAZI `ERES, D. Making information flow explicit in histar. In
OSDI (2006).
[72] ZHANG, D., ASKAROV, A., AND MYERS, A. C. Predictive
mitigation of timing channels in interactive systems.
In ACM
SIGSAC Conference on Computer and Communications Security
(CCS) (2011).
[73] ZHOU, Y., AND JIANG, X. Dissecting android malware: Char-
acterization and evolution. In IEEE S&P (2012).
Appendix A: FlowFence API
We summarize the object-oriented FlowFence API for
developers in Table 4. There are two kinds of API:
QM-management, and Within-QM. Developers use the
QM-management API to request loading QMs into sand-
boxes, making QM calls, and receiving opaque handles
as return values. The primary data types are: QM ,
and Handle. The former data type represents a refer-
ence to a loaded QM. The latter data type represents an
opaque handle, that FlowFence creates as a return value
of a QM. Developers use resolveCtor, or resolveM to
load a specific QM into a sandbox (FlowFence automati-
cally manages sandboxes), and receive a reference to the
loaded QM. Then, developers specify the string name of
a QM method to execute.
The Within-QM API is available to QMs while they
are executing within a sandbox. Currently, FlowFence
has two data types available for QMs. KVStore offers
ways to get and put values in the Key-Value store. The
Trusted API offers facilities like network communica-
tion, logging, and smart home control (our prototype has
a bridge to SmartThings).
QM-management Data Types and API
Handle
QM 
QM  ctor = resolveCtor(T)
QM  m = resolveM(retType, T, methStr,
[paramTypes])
Handle ret = QM .call([argList])
channelName,
subscribeEventChannel(appID,
QM )
Within-QM Data Types and API
KVStore
KVStore kvs = getKVStore(appID, name)
kvs.put(key, value, taint label)
T value = kvs.get(key)
getTrustedAPI(apiName).invoke([params])
getChannel(chanName).fireEvent(taint label,
[params])
Semantics
An opaque handle. Data is stored in the Trusted Service, with its
taint labels.
A reference to a QM of type T, on which developers can issue
method calls.
Resolve the constructor for QM T, and return a reference to it.
Resolve an instance/static method of a QM, loading the QM into
a sandbox if necessary.
Call a method on a loaded QM, and return an opaque handle as
the result.
Subscribe to a channel for updates, and register a QM to be exe-
cuted automatically whenever new data is placed on the channel.
Semantics
Provides methods to interact with the Key-Value Store.
Get a reference to a named KVStore.
Put a (key, value) pair into the KVStore along with a taint label,
where T can be a basic type such as Int, Float, or a serializable
type. Any existing taint of the calling QM will be automatically
associated with the value’s final set of taint labels.
Get the value of type T corresponding to specified key, and taint
the QM with the appropriate set of taint labels.
Call a Trusted API method to declassify sensitive data.
Fire an event with parameters, specifying taint label. Any existing
taint labels of the calling QM will be added automatically.
Table 4: FlowFence API Summary. QM-management data types and API is only available to the untrusted portion of
an app that does not operate with sensitive data. The Within-QM data types and API is available only to QMs.
548  25th USENIX Security Symposium 
USENIX Association