formation of natural chunks within the application code. While these chunks
are deﬁned along functional lines (i.e., they reﬂect self-contained, inter-related
code and data elements), it is highly probable that they would serve as chunks
in MobileIFC, which deﬁnes chunks based on the communication requirements
with external entities.
The second challenge, of adapting chunks to use MobileIFC’s APIs, requires
understanding of the APIs on the part of the developer. While we preserve
the signature of the APIs for data/resource access from the original PhoneGap
APIs, we introduce new APIs for uni- and bi-directional communications. We
designed the MobileIFC support library to minimize the complexity of code
changes required by an application, as shown in the example below.
In a monolithic design, after the application receives the user’s selected bank
location on the map, it makes the following procedure call:
setSelected L o ca t io n ( bankLocation ID );
In MobileIFC design, this call would be in the form of a inter-chunk unidirec-
tional call from C2 to C1 as follows:
MobileIFC . c a l l R e m o t e F u n c t i o n N o R e t u r n
(" C1 " , " setSelect ed L oc a ti o n " , bankLocation ID );
While this code transformation is currently done manually, the simplicity of the
change and its purely syntactic form means that it can be automated, possibly
as part of the software development environment.
While MobileIFC requires additional eﬀort from the application developers
(to compensate for eﬀective enforcement beneﬁts at runtime), our experience
developing the three representative (banking, healthcare and ﬁnancial manage-
ment) applications show that this eﬀort is reasonably low and can be further
reduced by automating the chunking process.
5.3 Performance Estimates
With an new architectural framework and a new way of developing applica-
tions, it is diﬃcult to accurately predict the impact of our design on the perfor-
mance of these applications. Most of the cost to provide information ﬂow control
is amortized at application initialization as each chunk is only given access to
the capability object of the resources that are allowed for that chunk (Figure 2).
This object is modiﬁed accordingly to include any runtime policy changes. This is
suﬃcient for ﬂow control if no context-aware policies are speciﬁed for a resource.
In cases where context-aware policies are deﬁned, the context needs to be
resolved at runtime at the time when resource access is requested. This results
in runtime performance overhead associated with mediation of resource access
and resolution of context. To get a rough estimate of the cost of supporting the
MobileIFC design and the overhead involved in our system, we conducted ex-
periments against our sample banking application, measuring overhead imposed
by the mediating design of MobileIFC.
The experiments were performed on Motorola Atrix phone with dual-core
1GHz processor and 1 GB RAM running Android 2.3.4. Each test was run 10
times and values were averaged. The results show that the overhead introduced
by MobileIFC’s mediated checks is negligible with a each check amounting to
5.2ms. The cost of context resolution was dependent on the sensor being queried,
with values of 1.3 seconds for geolocation resolution, 3.5 seconds for access point
lookups and 5.2 seconds for Bluetooth device discovery.
While these performance numbers may vary considerably based on the hard-
ware sensors available in the mobile device, they still provide an intuition that
the user’s runtime experience of the application would potentially be impacted
by context resolution. These numbers can be amortized by caching the results
of sensor queries across applications and by intelligent sampling. We plan to
consider such options as part of our future work.
6 Discussion
In this section, we discuss limitations of the application design in MobileIFC
and address some of the challenges originating from the new requirements im-
posed by our design.
MobileIFC’s containment mechanism uses ADsafe to limit access of the appli-
cation code to within chunk boundaries. ADsafe only applies to web technologies
that are primarily used to develop hybrid applications. However, certain hybrid
frameworks such as PhoneGap also support an ability to add plugin code in the
native programming language of the underlying OS (e.g. Java for Android and
Objective-C for iOS). Such code also needs to be constrained to control access
to the APIs exposed by the OS. There are multiple approaches to address this
challenge. The plugin code inherits the permissions given to the hybrid frame-
work and therefore, the ﬁrst approach is to limit the permissions given to the
hybrid platform that would also constrain the plugin. However, support of a
new permission model would need modiﬁcations to the underlying OS. The sec-
ond approach would be to limit the plugin to use safe subsets of the plugin’s
programming language (such as Joe-E for Java [20]). Once the plugin code is
constrained, mediation similar to MobileIFC can be applied to enforce speciﬁc
policies. We plan to evaluate some of these approaches as part of future work.
In the current MobileIFC implementation, the application developers are
vested with the additional responsibility to partition their applications along
security-relevant boundaries. MobileIFC’s design, of only allowing ﬂows that are
approved, ensures that an application cannot cheat about its requirements. From
the application developer’s perspective, our design has the additional beneﬁt of
isolating bugs or vulnerabilities within a chunk, giving them another incentive to
adopt MobileIFC. As part of our future work, we plan to automate the process
of creating logical boundaries within existing applications in order to partition
them into chunks based on their input and output requirements. We will explore
ways to leverage source and binary analysis techniques to partition the applica-
tions, thereby reducing the burden on the application developers, while at the
same time preserving the privacy guarantees. Such solutions can be integrated
into development tools such as Worklight Studio [5] to facilitate application de-
velopment for MobileIFC.
While our design goal is to limit the burden on the users, MobileIFC does
impose new usability requirements. The users need to understand the risk as-
sociated with sharing their data with various external entities and formulate
appropriate policies as per their individual requirements. While corporate ad-
ministrators can be expected to be better informed and to develop suitable poli-
cies for corporate users, regular users can use external resources such as Norton
Safe Web [9] to make trust decisions about external entities. Moreover, our pol-
icy language is simple (Figure 5) and can be further complimented by a usable
interface for improved usability.
7 Related Work
Mobile application security has been a major research focus in recent years.
Research has analyzed the security issues of mobile applications for diﬀerent
mobile platforms, mostly focused on Android [17, 19, 31] with some work target-
ing iOS [16]. These works mostly target oﬄine analysis of mobile applications
looking for malicious behavior [31], or security evaluation of mobile platforms
and their permission models [18, 19]. Other research target runtime analysis of
the applications and the underlying platforms [13, 17].
TaintDroid [17] is one of the ﬁrst systems to address IFC for mobile platforms.
TaintDroid exploits dynamic taint analysis in order to label privately declared
data with a taint mark, audit on-track tainted data as it propagates through the
system, and warn the user if tainted data aims to leave the system at a taint sink
(e.g., network interface). However, TaintDroid is limited in its tracking of control
ﬂows due to high performance penalties. AppFence [21] is another system that
extends the TaintDroid framework by allowing users to enable privacy control
mechanisms to help diﬀerence between authorized data sharing and malicious
data leakage. While MobileIFC shares a common goal of detecting unauthorized
leakage of sensitive data, its approach is orthogonal to the one taken by Taint-
Droid. Since it pushes the bulk of design decisions before runtime and does not
require low-level taint tracking, MobileIFC successfully improves eﬃciency and
simpliﬁes enforcement at runtime. Moreover, we are addressing the IFC for hy-
brid applications and hence MobileIFC’s IFC does not require any changed to
the underlying operating system. To the best of our knowledge, we are the ﬁrst
to provide an IFC solution for hybrid applications.
Saint [26] introduces a ﬁne-grained access control model that enforces secu-
rity decisions based on signatures, conﬁgurations and contexts (e.g., phone state
or location). Saint relies on on application developers to deﬁne security policies,
therefore, it suﬀers from the issue of malicious applications intentionally leaking
user data. By contrast, MobileIFC’s permission model is user-centric and pro-
tects against both vulnerable and malicious applications. Moreover, we believe
that users are better suited to understand the value of their own personal data or
resources. As previously mentioned, users also include system administrators of
corporations, therefore MobileIFC also enables enforcement of corporate security
policies in BYOD setups.
Both Apex [25] and CRePE [14] focus on enabling/disabling functionalities
and enforcing runtime constraints on mobile applications. While Apex provides
the user with the means to selectively choose the permissions and runtime con-
straints each application has, CRePE enables the enforcement of context-related
policies similar to MobileIFC. However, their enforcement is too coarse-grained
and is limited to only access control. For instance, networking would be disabled
for all applications, not just particular ones. Moreover, it requires rooting of the
device for enable enforcement in the Android OS, while our solution provides
the enforcement in the application’s hybrid runtime. Aurasium [29] and Dr. An-
droid [22] use application repackaging to enable policy enforcement at runtime
and does not require any OS modiﬁcations. Even though both systems support
ﬁner-grained policies, such as allowing access to speciﬁc external IPs, they still
do not provide information ﬂow control. However, MobileIFC can beneﬁt from
some of these repackaging techniques to automatically modularize applications
into chunks. We will explore this as future work.
New mobile OSes, such as ChromeOS [3] and FirefoxOS [4], enable web appli-
cations to have native access to device’s resources. These new platforms provide
alternatives to the traditional mobile OSes (such as Android and iOS), and re-
quire explicit installation. In contrast, hybrid platforms enable web technologies
to be used for application development in traditional OSes. While our current
solution is built for hybrid platforms, some of the techniques, such as context-
aware permission control, can be applied to the new OSes; one diﬀerence being
that MobileIFC has to be built into the OS itself.
8 Conclusions
We presented a practical design of a novel framework, called MobileIFC, that
considerably improves privacy control in the presence of untrusted hybrid mobile
applications. Our design allows the applications to access sensitive user data
while preventing them from leaking such data to external entities. MobileIFC
redesigns the applications to achieve eﬃcient information ﬂow control over user
content passed through these applications.
We also introduced a ﬂexible permission model that enables the users to spec-
ify ﬁne-grained, context-aware policies. Our model supplements user approved
policies with an ability to specify generic, high-level, mandatory policies. We
developed a working prototype of our MobileIFC system and used it for devel-
oping representative applications to demonstrate viability of MobileIFC and its
applicability to real-world scenarios.
With portability and ease of application development driving the evolution
of new hybrid frameworks, the number of hybrid applications will continue to
rise. With their increased reliance on new code (via JavaScript) available at
runtime, hybrid applications will stretch the limits of the current solutions to
mobile application security. We believe that MobileIFC provides a practical di-
rection for the development of eﬃcient security and privacy solutions for mobile
applications.
References
1. ADSafe. http://www.adsafe.org.
2. Apps Created with PhoneGap. http://phonegap.com/app/.
3. Chrome OS. http://www.chromium.org/chromium-os.
4. Firefox OS. https://developer.mozilla.org/Firefox_OS.
5. IBM Worklight.
http://www-03.ibm.com/software/products/us/en/
worklight/.
6. IGN Dominate. http://wireless.ign.com/articles/116/1167824p1.html.
7. Microsoft HealthVault. http://www.microsoft.com/en-us/healthvault/.
8. Mint. https://www.mint.com/.
9. Norton Safe Web. http://safeweb.norton.com/.
10. PhoneGap. http://www.phonegap.com.
11. Sencha. http://www.sencha.com.
12. B. Bergstein.
IBM Faces
vice”, May
ibm-faces-the-perils-of-bring-your-own-device/.
2012.
the Perils
“Bring Your Own De-
http://www.technologyreview.com/news/427790/
of
13. S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry.
Towards Taming Privilege-Escalation Attacks on Android. In NDSS, San Diego,
CA, Feb. 2012.
14. M. Conti, V. T. N. Nguyen, and B. Crispo. CRePE: Context-related Policy En-
forcement for Android. In ISC, Boca Raton, FL, Oct. 2011.
15. L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege Escalation
Attacks on Android. In ISC, Boca Raton, FL, Oct. 2011.
16. M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting Privacy Leaks in
iOS Applications. In NDSS, San Diego, CA, Feb. 2011.
17. W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N.
Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy
Monitoring on Smartphones. In OSDI, Vancouver, Canada, Oct. 2010.
18. W. Enck, M. Ongtang, and P. McDaniel. On Lightweight Mobile Phone Applica-
tion Certiﬁcation. In CCS, Chicago, IL, Nov. 2009.
19. A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission Re-
Delegation: Attacks and Defenses. In USENIX Security Symposium, San Fransisco,
CA, Aug. 2011.
20. M. Finifter, A. Mettler, N. Sastry, and D. Wagner. Veriﬁable Functional Purity in
Java. In CCS, Alexandria, VA, Oct. 2008.
21. P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. “These Aren’t the
Droids You’re Looking For”: Retroﬁtting Android to Protect Data from Imperious
Applications. In CCS, Chicago, IL, Oct. 2011.
22. J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, and
T. Millstein. Dr. Android and Mr. Hide: Fine-grained Permissions in Android
Applications. In SPSM Workshop, Raleigh, NC, Oct. 2012.
23. P. McDougall.
IBM Acquires Mobile Specialist Worklight.
informationweek.com/news/development/mobility/232500829.
http://www.
24. A. C. Myers and B. Liskov. A Decentralized Model for Information Flow Control.
In SOSP, Saint Malo, France, Oct. 1997.
25. M. Nauman, S. Khan, and X. Zhang. Apex: Extending Android Permission Model
and Enforcement with User-deﬁned Runtime Constraints. In ASIACCS, Beijing,
China, Apr. 2010.
26. M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. Semantically Rich
Application-Centric Security in Android. In ACSAC, Honolulu, HI, Dec. 2009.
27. K. Singh, S. Bhola, and W. Lee. xBook: Redesigning Privacy Control in Social
Networking Platforms. In USENIX Security Symposium, Montreal, Canada, Aug.
2009.
28. M. Verma. XML Security: Control information access with XACML. http://www.
ibm.com/developerworks/xml/library/x-xacml/.
29. R. Xu, H. Sadi, and R. Anderson. Aurasium: Practical Policy Enforcement for
Android Applications. In USENIX Security Symposium, Bellevue, WA, Aug. 2012.
30. N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazi`eres. Making Information
Flow Explicit in HiStar. In OSDI, Seattle, WA, November 2006.
31. Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization and Evolu-
tion. In IEEE S&P, San Fransisco, CA, May 2012.