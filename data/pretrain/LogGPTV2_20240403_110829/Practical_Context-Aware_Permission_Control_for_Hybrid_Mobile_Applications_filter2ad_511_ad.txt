### Formation of Natural Chunks within Application Code

Natural chunks within the application code are typically defined along functional lines, meaning they consist of self-contained, inter-related code and data elements. It is highly likely that these chunks will also serve as units in MobileIFC, which defines chunks based on communication requirements with external entities.

### Adapting Chunks to Use MobileIFC’s APIs

The second challenge involves adapting these chunks to use MobileIFC’s APIs, which requires a good understanding of the APIs by the developer. While we maintain the API signatures for data/resource access from the original PhoneGap APIs, we introduce new APIs for uni- and bi-directional communications. The MobileIFC support library is designed to minimize the complexity of code changes required by an application, as demonstrated in the following example.

#### Example: Monolithic Design vs. MobileIFC Design

In a monolithic design, after the application receives the user's selected bank location on the map, it makes the following procedure call:
```java
setSelectedLocation(bankLocationID);
```

In the MobileIFC design, this call would be transformed into an inter-chunk unidirectional call from C2 to C1:
```java
MobileIFC.callRemoteFunctionNoReturn("C1", "setSelectedLocation", bankLocationID);
```

While this code transformation is currently done manually, the simplicity and purely syntactic nature of the change mean that it can be automated, possibly as part of the software development environment.

### Developer Effort and Automation

Although MobileIFC requires additional effort from application developers (to compensate for effective enforcement benefits at runtime), our experience developing three representative applications (banking, healthcare, and financial management) shows that this effort is reasonably low. This effort can be further reduced by automating the chunking process.

### Performance Estimates

With a new architectural framework and a new way of developing applications, accurately predicting the impact on performance is challenging. Most of the cost associated with information flow control is amortized at application initialization, as each chunk is only given access to the capability objects of the resources allowed for that chunk (Figure 2). These objects are modified to include any runtime policy changes, which is sufficient for flow control if no context-aware policies are specified for a resource.

In cases where context-aware policies are defined, the context needs to be resolved at runtime when resource access is requested. This results in runtime performance overhead associated with mediation of resource access and resolution of context. To estimate the cost and overhead involved in supporting the MobileIFC design, we conducted experiments using our sample banking application, measuring the overhead imposed by the mediating design of MobileIFC.

#### Experimental Setup and Results

The experiments were performed on a Motorola Atrix phone with a dual-core 1GHz processor and 1 GB RAM running Android 2.3.4. Each test was run 10 times, and the values were averaged. The results show that the overhead introduced by MobileIFC’s mediated checks is negligible, with each check taking approximately 5.2ms. The cost of context resolution varied depending on the sensor being queried, with values of 1.3 seconds for geolocation resolution, 3.5 seconds for access point lookups, and 5.2 seconds for Bluetooth device discovery.

While these performance numbers may vary based on the hardware sensors available in the mobile device, they still provide insight into the potential impact on the user’s runtime experience. These numbers can be mitigated by caching the results of sensor queries across applications and by intelligent sampling. We plan to consider such options as part of our future work.

### Discussion

In this section, we discuss the limitations of the application design in MobileIFC and address some of the challenges arising from the new requirements imposed by our design.

#### Containment Mechanism

MobileIFC’s containment mechanism uses ADsafe to limit access of the application code to within chunk boundaries. ADsafe is primarily used for web technologies, which are commonly used to develop hybrid applications. However, certain hybrid frameworks like PhoneGap also support adding plugin code in the native programming language of the underlying OS (e.g., Java for Android and Objective-C for iOS). Such code also needs to be constrained to control access to the APIs exposed by the OS. There are multiple approaches to address this challenge:

1. **Limit Permissions**: The plugin code inherits the permissions given to the hybrid framework. By limiting the permissions given to the hybrid platform, the plugin's access can also be constrained. However, this approach requires modifications to the underlying OS.
2. **Safe Subsets**: Limit the plugin to use safe subsets of the plugin’s programming language (such as Joe-E for Java [20]). Once the plugin code is constrained, mediation similar to MobileIFC can be applied to enforce specific policies.

We plan to evaluate these approaches as part of our future work.

#### Developer Responsibility and Automation

In the current MobileIFC implementation, application developers are responsible for partitioning their applications along security-relevant boundaries. MobileIFC’s design ensures that only approved flows are allowed, preventing applications from cheating about their requirements. From the developer's perspective, this design has the additional benefit of isolating bugs or vulnerabilities within a chunk, providing another incentive to adopt MobileIFC. As part of our future work, we plan to automate the process of creating logical boundaries within existing applications to partition them into chunks based on their input and output requirements. We will explore ways to leverage source and binary analysis techniques to reduce the burden on developers while preserving privacy guarantees. Such solutions can be integrated into development tools like Worklight Studio [5] to facilitate application development for MobileIFC.

#### Usability Requirements

While our design goal is to limit the burden on users, MobileIFC does impose new usability requirements. Users need to understand the risks associated with sharing their data with various external entities and formulate appropriate policies according to their individual requirements. Corporate administrators can be expected to develop suitable policies for corporate users, while regular users can use external resources like Norton Safe Web [9] to make trust decisions about external entities. Moreover, our policy language is simple (Figure 5) and can be further enhanced with a usable interface for improved usability.

### Related Work

Mobile application security has been a major research focus in recent years. Research has analyzed security issues in mobile applications for different platforms, primarily focusing on Android [17, 19, 31], with some work targeting iOS [16]. These works mostly target offline analysis of mobile applications for malicious behavior [31] or security evaluation of mobile platforms and their permission models [18, 19]. Other research focuses on runtime analysis of applications and underlying platforms [13, 17].

#### TaintDroid and AppFence

TaintDroid [17] is one of the first systems to address Information Flow Control (IFC) for mobile platforms. It uses dynamic taint analysis to label privately declared data with a taint mark, audit tainted data as it propagates through the system, and warn the user if tainted data aims to leave the system. However, TaintDroid is limited in its tracking of control flows due to high performance penalties. AppFence [21] extends the TaintDroid framework by allowing users to enable privacy control mechanisms to differentiate between authorized data sharing and malicious data leakage. While MobileIFC shares the common goal of detecting unauthorized leakage of sensitive data, its approach is orthogonal to TaintDroid. MobileIFC pushes most design decisions before runtime and does not require low-level taint tracking, thus improving efficiency and simplifying enforcement at runtime. Additionally, MobileIFC addresses IFC for hybrid applications without requiring changes to the underlying operating system. To the best of our knowledge, we are the first to provide an IFC solution for hybrid applications.

#### Saint, Apex, and CRePE

Saint [26] introduces a fine-grained access control model that enforces security decisions based on signatures, configurations, and contexts (e.g., phone state or location). Saint relies on application developers to define security policies, making it vulnerable to malicious applications intentionally leaking user data. In contrast, MobileIFC’s permission model is user-centric and protects against both vulnerable and malicious applications. Users are better suited to understand the value of their personal data or resources. As previously mentioned, users also include system administrators of corporations, enabling MobileIFC to enforce corporate security policies in Bring Your Own Device (BYOD) setups.

Both Apex [25] and CRePE [14] focus on enabling/disabling functionalities and enforcing runtime constraints on mobile applications. While Apex provides users with the means to selectively choose permissions and runtime constraints for each application, CRePE enables the enforcement of context-related policies similar to MobileIFC. However, their enforcement is too coarse-grained and limited to access control. For instance, networking might be disabled for all applications, not just specific ones. Moreover, it requires rooting of the device for enforcement in the Android OS, while our solution provides enforcement in the application’s hybrid runtime. Aurasium [29] and Dr. Android [22] use application repackaging to enable policy enforcement at runtime without requiring OS modifications. Although both systems support finer-grained policies, such as allowing access to specific external IPs, they do not provide information flow control. MobileIFC can benefit from some of these repackaging techniques to automatically modularize applications into chunks, which we will explore as future work.

#### New Mobile Operating Systems

New mobile operating systems, such as ChromeOS [3] and FirefoxOS [4], enable web applications to have native access to device resources. These platforms provide alternatives to traditional mobile OSes (such as Android and iOS) and require explicit installation. In contrast, hybrid platforms enable web technologies to be used for application development in traditional OSes. While our current solution is built for hybrid platforms, some techniques, such as context-aware permission control, can be applied to the new OSes, with the difference being that MobileIFC would need to be built into the OS itself.

### Conclusions

We presented a practical design of a novel framework called MobileIFC, which significantly improves privacy control in the presence of untrusted hybrid mobile applications. Our design allows applications to access sensitive user data while preventing them from leaking such data to external entities. MobileIFC redesigns applications to achieve efficient information flow control over user content passed through these applications.

We also introduced a flexible permission model that enables users to specify fine-grained, context-aware policies. Our model supplements user-approved policies with the ability to specify generic, high-level, mandatory policies. We developed a working prototype of our MobileIFC system and used it to develop representative applications, demonstrating its viability and applicability to real-world scenarios.

With the increasing popularity of hybrid frameworks driven by portability and ease of application development, the number of hybrid applications will continue to rise. With their increased reliance on new code (via JavaScript) available at runtime, hybrid applications will stretch the limits of current mobile application security solutions. We believe that MobileIFC provides a practical direction for the development of efficient security and privacy solutions for mobile applications.

### References

1. ADSafe. <http://www.adsafe.org>.
2. Apps Created with PhoneGap. <http://phonegap.com/app/>.
3. Chrome OS. <http://www.chromium.org/chromium-os>.
4. Firefox OS. <https://developer.mozilla.org/Firefox_OS>.
5. IBM Worklight. <http://www-03.ibm.com/software/products/us/en/worklight/>.
6. IGN Dominate. <http://wireless.ign.com/articles/116/1167824p1.html>.
7. Microsoft HealthVault. <http://www.microsoft.com/en-us/healthvault/>.
8. Mint. <https://www.mint.com/>.
9. Norton Safe Web. <http://safeweb.norton.com/>.
10. PhoneGap. <http://www.phonegap.com>.
11. Sencha. <http://www.sencha.com>.
12. B. Bergstein. "IBM Faces the Perils of 'Bring Your Own Device'." May 2012. <http://www.technologyreview.com/news/427790/ibm-faces-the-perils-of-bring-your-own-device/>.
13. S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. "Towards Taming Privilege-Escalation Attacks on Android." In NDSS, San Diego, CA, Feb. 2012.
14. M. Conti, V. T. N. Nguyen, and B. Crispo. "CRePE: Context-related Policy Enforcement for Android." In ISC, Boca Raton, FL, Oct. 2011.
15. L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. "Privilege Escalation Attacks on Android." In ISC, Boca Raton, FL, Oct. 2011.
16. M. Egele, C. Kruegel, E. Kirda, and G. Vigna. "PiOS: Detecting Privacy Leaks in iOS Applications." In NDSS, San Diego, CA, Feb. 2011.
17. W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. "TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones." In OSDI, Vancouver, Canada, Oct. 2010.
18. W. Enck, M. Ongtang, and P. McDaniel. "On Lightweight Mobile Phone Application Certification." In CCS, Chicago, IL, Nov. 2009.
19. A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. "Permission Re-Delegation: Attacks and Defenses." In USENIX Security Symposium, San Francisco, CA, Aug. 2011.
20. M. Finifter, A. Mettler, N. Sastry, and D. Wagner. "Verifiable Functional Purity in Java." In CCS, Alexandria, VA, Oct. 2008.
21. P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. "'These Aren't the Droids You're Looking For': Retrofitting Android to Protect Data from Imperious Applications." In CCS, Chicago, IL, Oct. 2011.
22. J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, and T. Millstein. "Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications." In SPSM Workshop, Raleigh, NC, Oct. 2012.
23. P. McDougall. "IBM Acquires Mobile Specialist Worklight." <http://www.informationweek.com/news/development/mobility/232500829>.
24. A. C. Myers and B. Liskov. "A Decentralized Model for Information Flow Control." In SOSP, Saint Malo, France, Oct. 1997.
25. M. Nauman, S. Khan, and X. Zhang. "Apex: Extending Android Permission Model and Enforcement with User-defined Runtime Constraints." In ASIACCS, Beijing, China, Apr. 2010.
26. M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. "Semantically Rich Application-Centric Security in Android." In ACSAC, Honolulu, HI, Dec. 2009.
27. K. Singh, S. Bhola, and W. Lee. "xBook: Redesigning Privacy Control in Social Networking Platforms." In USENIX Security Symposium, Montreal, Canada, Aug. 2009.
28. M. Verma. "XML Security: Control information access with XACML." <http://www.ibm.com/developerworks/xml/library/x-xacml/>.
29. R. Xu, H. Sadi, and R. Anderson. "Aurasium: Practical Policy Enforcement for Android Applications." In USENIX Security Symposium, Bellevue, WA, Aug. 2012.
30. N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. "Making Information Flow Explicit in HiStar." In OSDI, Seattle, WA, November 2006.
31. Y. Zhou and X. Jiang. "Dissecting Android Malware: Characterization and Evolution." In IEEE S&P, San Francisco, CA, May 2012.