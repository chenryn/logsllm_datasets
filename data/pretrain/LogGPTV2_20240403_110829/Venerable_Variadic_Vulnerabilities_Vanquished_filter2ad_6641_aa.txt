title:Venerable Variadic Vulnerabilities Vanquished
author:Priyam Biswas and
Alessandro Di Federico and
Scott A. Carr and
Prabhu Rajasekaran and
Stijn Volckaert and
Yeoul Na and
Michael Franz and
Mathias Payer
Venerable Variadic Vulnerabilities Vanquished
Priyam Biswas, Purdue University; Alessandro Di Federico, Politecnico di Milano;  
Scott A. Carr, Purdue University; Prabhu Rajasekaran, Stijn Volckaert, Yeoul Na,  
and Michael Franz, University of California, Irvine; Mathias Payer, Purdue University
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/biswas
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXVenerable Variadic Vulnerabilities Vanquished
Priyam Biswas1, Alessandro Di Federico2, Scott A. Carr1, Prabhu Rajasekaran3, Stijn Volckaert3,
Yeoul Na3, Michael Franz3, and Mathias Payer1
1Department of Computer Science, Purdue University
{biswas12, carr27}@purdue.edu, PI:EMAIL
2Dipartimento di Elettronica, Informazione e Bioingegneria, Politecnico di Milano
PI:EMAIL
3Department of Computer Science, University of California, Irvine
{rajasekp, stijnv, yeouln, franz}@uci.edu
Abstract
Programming languages such as C and C++ support vari-
adic functions, i.e., functions that accept a variable num-
ber of arguments (e.g., printf). While variadic func-
tions are ﬂexible, they are inherently not type-safe. In
fact, the semantics and parameters of variadic functions
are deﬁned implicitly by their implementation. It is left
to the programmer to ensure that the caller and callee fol-
low this implicit speciﬁcation, without the help of a static
type checker. An adversary can take advantage of a mis-
match between the argument types used by the caller of a
variadic function and the types expected by the callee to
violate the language semantics and to tamper with mem-
ory. Format string attacks are the most popular example
of such a mismatch.
Indirect function calls can be exploited by an adver-
sary to divert execution through illegal paths. CFI re-
stricts call targets according to the function prototype
which, for variadic functions, does not include all the ac-
tual parameters. However, as shown by our case study,
current CFI implementations are mainly limited to non-
variadic functions and fail to address this potential attack
vector. Defending against such an attack requires a state-
ful dynamic check.
We present HexVASAN, a compiler based sanitizer to
effectively type-check and thus prevent any attack via
variadic functions (when called directly or indirectly).
The key idea is to record metadata at the call site and
verify parameters and their types at the callee whenever
they are used at runtime. Our evaluation shows that Hex-
VASAN is (i) practically deployable as the measured
overhead is negligible (0.45%) and (ii) effective as we
show in several case studies.
1
Introduction
C and C++ are popular languages in systems program-
ming. This is mainly due to their low overhead ab-
stractions and high degree of control left to the devel-
oper. However, these languages guarantee neither type
nor memory safety, and bugs may lead to memory cor-
ruption. Memory corruption attacks allow adversaries to
take control of vulnerable applications or to extract sen-
sitive information.
Modern operating systems and compilers implement
several defense mechanisms to combat memory corrup-
tion attacks. The most prominent defenses are Address
Space Layout Randomization (ASLR) [47], stack ca-
naries [13], and Data Execution Prevention (DEP) [48].
While these defenses raise the bar against exploitation,
sophisticated attacks are still feasible.
In fact, even
the combination of these defenses can be circumvented
through information leakage and code-reuse attacks.
Stronger defense mechanisms such as Control Flow
Integrity (CFI) [6], protect applications by restricting
their control ﬂow to a predetermined control-ﬂow graph
(CFG). While CFI allows the adversary to corrupt non-
control data, it will terminate the process whenever the
control-ﬂow deviates from the predetermined CFG. The
strength of any CFI scheme hinges on its ability to stati-
cally create a precise CFG for indirect control-ﬂow edges
(e.g., calls through function pointers in C or virtual calls
in C++). Due to ambiguity and imprecision in the analy-
sis, CFI restricts adversaries to an over-approximation of
the possible targets of individual indirect call sites.
We present a new attack against widely deployed mit-
igations through a frequently used feature in C/C++ that
has so far been overlooked: variadic functions. Variadic
functions (such as printf) accept a varying number of
arguments with varying argument types. To implement
variadic functions, the programmer implicitly encodes
the argument list in the semantics of the function and
has to make sure the caller and callee adhere to this im-
plicit contract. In printf, the expected number of argu-
ments and their types are encoded implicitly in the for-
mat string, the ﬁrst argument to the function. Another
frequently used scheme iterates through parameters until
USENIX Association
26th USENIX Security Symposium    183
a condition is reached (e.g., a parameter is NULL). List-
ing 1 shows an example of a variadic function. If an ad-
versary can violate the implicit contract between caller
and callee, an attack may be possible.
In the general case, it is impossible to enumerate the
arguments of a variadic function through static analysis
techniques. In fact, their number and types are intrinsic
in how the function is deﬁned. This limitation enables (or
facilitates) two attack vectors against variadic functions.
First, attackers can hijack indirect calls and thereby call
variadic functions over control-ﬂow edges that are never
taken during any legitimate execution of the program.
Variadic functions that are called in this way may inter-
pret the variadic arguments differently than the function
for which these arguments were intended, and thus vio-
late the implicit caller-callee contract. CFI countermea-
sures speciﬁcally prevent illegal calls over indirect call
edges. However, even the most precise implementations
of CFI, which verify the type signature of the targets of
indirect calls, are unable to fully stop illegal calls to vari-
adic functions.
A second attack vector involves overwriting a variadic
function’s arguments directly. Such attacks do not vi-
olate the intended control ﬂow of a program and thus
bypass all of the widely deployed defense mechanisms.
Format string attacks are a prime example of such at-
tacks.
If an adversary can control the format string
passed to, e.g., printf, she can control how all of the
following parameters are interpreted, and can potentially
leak information from the stack, or read/write to arbitrary
memory locations.
The attack surface exposed by variadic functions is
signiﬁcant. We analyzed popular software packages,
such as Firefox, Chromium, Apache, CPython, nginx,
OpenSSL, Wireshark, the SPEC CPU2006 benchmarks,
and the FreeBSD base system, and found that variadic
functions are ubiquitous. We also found that many of
the variadic function calls in these packages are indirect.
We therefore conclude that both attack vectors are realis-
tic threats. The underlying problem that enables attacks
on variadic functions is the lack of type checking. Vari-
adic functions generally do not (and cannot) verify that
the number and type of arguments they expect matches
the number and type of arguments passed by the caller.
We present HexVASAN, a compiler-based, dynamic san-
itizer that tackles this problem by enforcing type checks
for variadic functions at run-time. Each argument that is
retrieved in a variadic function is type checked, enforc-
ing a strict contract between caller and callee so that (i) a
maximum of the passed arguments can be retrieved and
(ii) the type of the arguments used at the callee are com-
patible with the types passed by the caller. Our mecha-
nism can be used in two operation modes: as a runtime
monitor to protect programs against attacks and as sani-
tizer to detect type mismatches during program testing.
We have implemented HexVASAN on top of the
LLVM compiler framework, instrumenting the compiled
code to record the types of each argument of a variadic
function at the call site and to check the types when-
ever they are retrieved. Our prototype implementation
is light-weight, resulting in negligible (0.45%) overhead
for SPEC CPU2006. Our approach is general as we show
by recompiling the FreeBSD base system and effective as
shown through several exploit case studies (e.g., a format
string vulnerability in sudo).
We present the following contributions:
• Design and implementation of a variadic function
sanitizer on top of LLVM;
• A case study on large programs to show the preva-
lence of direct and indirect calls to variadic func-
tions;
• Several exploit case studies and CFI bypasses using
variadic functions.
2 Background
Variadic functions are used ubiquitously in C/C++ pro-
grams. Here we introduce details about their use and im-
plementation on current systems, the attack surface they
provide, and how adversaries can abuse them.
#include 
#include 
int add(int start, ...) {
int next, total = start;
va_list list;
va_start(list, start);
do {
next = va_arg(list, int);
total += next;
} while (next != 0);
va_end(list);
return total;
}
int main(int argc, const char *argv[]) {
printf("%d\n", add(5, 1, 2, 0));
return 0;
}
Listing 1: Example of a variadic function in C. The
function add takes a non-variadic argument start
(to initialize an accumulator variable) and a series
of variadic int arguments that are added until
the
terminator value 0 is met. The ﬁnal value is returned.
184    26th USENIX Security Symposium
USENIX Association
2.1 Variadic functions
Variadic functions (such as the printf function in the C
standard library) are used in C to maximize the ﬂexibil-
ity in the interface of a function, allowing it to accept a
number of arguments unknown at compile-time. These
functions accept a variable number of arguments, which
do not necessarily have ﬁxed types. An example of a
variadic function is shown in Listing 1. The function add
accepts one mandatory argument (start) and a varying
number of additional arguments, which are marked by
the ellipsis (...) in the function deﬁnition.
The C standard deﬁnes several macros that portable
programs may use to access variadic arguments [33].
stdarg.h, the header that declares these macros, deﬁnes
an opaque type, va_list, which stores all information re-
quired to retrieve and iterate through variadic arguments.
In our example, the variable list of type va_list is ini-
tialized using the va_start macro. The va_arg macro
retrieves the next variadic argument from the va_list,
updating va_list to point to the next argument as a side
effect. Note that, although the programmer must specify
the expected type of the variadic argument in the call to
va_arg, the C standard does not require the compiler to
verify that the retrieved variable is indeed of that type.
va_list variables must be released using a call to the
va_end macro so that all of the resources assigned to the
list are deallocated.
printf is an example of a more complex variadic
function which takes a format string as its ﬁrst argument.
This format string implicitly encodes information about
the number of arguments and their type.
Implementa-
tions of printf scan through this format string several
times to identify all format arguments and to recover
the necessary space in the output string for the speciﬁed
types and formats. Interestingly, arguments do not have
to be encoded sequentially but format strings allow out-
of-order access to arbitrary arguments. This ﬂexibility is
often abused in format string attacks to access arbitrary
stack locations.
2.2 Variadic functions ABI
The C standard does not deﬁne the calling convention
for variadic functions, nor the exact representation of the
va_list structure. This information is instead part of the
ABI of the target platform.
x86-64 ABI. The AMD64 System V ABI [36], which
is implemented by x86-64 GNU/Linux platforms, dic-
tates that the caller of a variadic function must adhere to
the normal calling conventions when passing arguments.
Speciﬁcally, the ﬁrst six non-ﬂoating point arguments
and the ﬁrst eight ﬂoating point arguments are passed
through CPU registers. The remaining arguments, if any,
are passed on the stack. If a variadic function accepts ﬁve
mandatory arguments and a variable number of variadic
arguments, then all but one of these variadic arguments
will be passed on the stack. The variadic function itself
moves the arguments into a va_list variable using the
va_start macro. The va_list type is deﬁned as follows:
typedef struct {
unsigned int gp_offset;
unsigned int fp_offset;
void *overflow_arg_area;
void *reg_save_area;
} va_list[1];
va_start allocates on the stack a reg_save_area to
store copies of all variadic arguments that were passed
in registers. va_start initializes the overflow_arg_area
ﬁeld to point to the ﬁrst variadic argument that was
passed on the stack. The gp_offset and fp_offset ﬁelds
are the offsets into the reg_save_area. They represent
the ﬁrst unused variadic argument that was passed in a
general purpose register or ﬂoating point register respec-
tively.
and
either
it
ﬁeld
from either
or moves
to point
overflow_arg_area,
gp_offset/fp_offset
The va_arg macro retrieves the ﬁrst unused vari-
the reg_save_area or
increases
the
to the
adic argument
the
the
overflow_arg_area pointer forward,
next variadic argument.
Other architectures. Other architectures may imple-
ment variadic functions differently. On 32-bit x86, for
example, all variadic arguments must be passed on the
stack (pushed right to left), following the cdecl calling
convention used on GNU/Linux. The variadic function
itself retrieves the ﬁrst unused variadic argument directly
from the stack. This simpliﬁes the implementation of
the va_start, va_arg, and va_end macros, but it generally
makes it easier for adversaries to overwrite the variadic
arguments.
2.3 Variadic attack surface
When calling a variadic function, the compiler statically
type checks all non-variadic arguments but does not en-
force any restriction on the type or number of variadic ar-
guments. The programmer must follow the implicit con-
tract between caller and callee that is only present in the
code but never enforced explicitly. Due to this high ﬂex-
ibility, the compiler cannot check arguments statically.
This lack of safety can lead to bugs where an adver-
sary achieves control over the callee by modifying the
arguments, thereby inﬂuencing the interpretation of the
passed variadic arguments.
Modifying the argument or arguments that control the
interpretation of variadic arguments allows an adversary
USENIX Association
26th USENIX Security Symposium    185
to change the behavior of the variadic function, causing
the callee to access additional or fewer arguments than
speciﬁed and to change the interpretation of their types.
An adversary can inﬂuence variadic functions in sev-
eral ways. First, if the programmer forgot to validate the
input, the adversary may directly control the arguments
to the variadic function that controls the interpretation of
arguments. Second, the adversary may use an arbitrary
memory corruption elsewhere in the program to inﬂu-
ence the argument of a variadic function.
Variadic functions can be called statically or dynam-
ically. Direct calls would, in theory, allow some static
checking. Indirect calls (e.g., through a function pointer),
where the target of the variadic function is not known, do
not allow any static checking. Therefore, variadic func-
tions can only be protected through some form of run-
time checker that considers the constraints of the call site
and enforces them at the callee side.
2.4 Format string exploits
Format string exploits are a perfect example of corrupted
variadic functions. An adversary that gains control over
the format string used in printf can abuse the printf
function to leak arbitrary data on the stack or even re-
sort to arbitrary memory corruption (if the pointer to the
target location is on the stack). For example, a format
string vulnerability in the smbclient utility (CVE-2009-
1886) [40] allows an attacker to gain control over the
Samba ﬁle system by treating a ﬁlename as format string.
Also, in PHP 7.x before 7.0.1, an error handling function
in zend execute API.c allows an attacker to execute arbi-
trary code by using format string speciﬁers as class name
(CVE-2015-8617) [1].
Information leaks are simple: an adversary changes
the format string to print the desired information that re-
sides somewhere higher up on the stack by employing the
desired format string speciﬁers. For arbitrary memory
modiﬁcation, an adversary must have the target address
encoded somewhere on the stack and then reference the
target through the %n modiﬁer, writing the number of al-
ready written bytes to that memory location.
The GNU C standard library (glibc) enforces some
protection against format string attacks by checking if
a format string is in a writable memory area [29]. For
format strings, the glibc printf implementation opens
/proc/self/maps and scans for the memory area of the
format string to verify correct permissions. Moreover, a
check is performed to ensure that all arguments are con-
sumed, so that no out-of-context stack slots can be used
in the format string exploit. These defenses stop some at-
tacks but do not mitigate the underlying problem that an
adversary can gain control over the format string. Note
that this heavyweight check is only used if the format
string argument may point to a writable memory area
at compile time. An attacker may use memory corrup-
tion to redirect the format string pointer to an attacker-