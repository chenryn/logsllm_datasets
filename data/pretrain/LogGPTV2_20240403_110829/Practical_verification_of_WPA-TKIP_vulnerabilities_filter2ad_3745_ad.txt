An important property of fragmentation is whether the
last fragment is allowed to be bigger than the previous frag-
ments. Strictly speaking this is not allowed in the 802.11
standard [14, §9.5] yet we rely on this during the decryption
attack. We found that all devices supporting fragmentation
permitted this behaviour (see Table 2 column diﬀ. size).
As mentioned in Sect. 2.3 the receiver should update its
replay counter after reassembling the MSDU. This leaves
open the possibility to send each fragment of an MSDU us-
ing the same TSC, keystream, and priority. If allowed, an
attacker is then able to inject 16 fragments using only one
keystream.
In Table 2 column eﬀ. frag. we see that this
technique is indeed possible on several devices.
Finally we tested if fragments can be sent without us-
ing a sequential replay counter, i.e., whether we can skip
TSC values. The 802.11 standard permits this behaviour
for TKIP [14, §11.4.2.6], though some devices only accepted
sequential TSC (see Table 2 column skip TSC).
Surprisingly we also discovered critical implementation
ﬂaws in some devices, particularly in wireless USB adapters.
Several do not drop packets with an already used TSC, al-
lowing an attacker to replay packets (see Table 2 column
Replay). Another ﬂaw is that certain devices do not ver-
ify the MIC value of a fragmented TKIP packet (see Ta-
ble 2 column any MIC). This removes the requirement of
ﬁrst having to execute the Beck and Tews attack to obtain
the MIC key. After all, if the MIC value is not veriﬁed we
do not have to calculate it, meaning there is no reason to
know the MIC key. On Windows the Ralink WA-U150BB
drops fragmented packets with an incorrect MIC, but does
not transmit a MIC failure. As mentioned in Sect. 3, drop-
ping the packet but not sending a MIC failure can open the
door for novel attacks on the MIC key.
More worrisome, we also encountered wireless adapters
that accepted unencrypted packets while connected to an
encrypted network (see Table 2 column Unenc.). In partic-
ular the vulnerability is present in the Windows drivers for
the AWUS036h, a device popular for its wide reception and
high transmission power. Another device susceptible to the
attack was the Scarlet VDSL Box. This is a router that is
handed out by the Belgium ISP Scarlet when a customer
buys a VDSL internet connection. The reason this case is
interesting is because the vulnerability has a higher impact
when present on APs. An attacker could abuse the ﬂaw to
easily inject arbitrary traﬃc into the network, but also to
send packets to the internet using the public IP of the vic-
tim. It might be an interesting future research direction to
test for additional implementation ﬂaws on a wider array of
devices.
6.3 Verifying Our Attacks
According to the 802.11 speciﬁcation, the TKIP counter-
measures must disable only TKIP traﬃc for one minute [14,
§11.4.2.4]. However, most of the APs we tested disabled all
Table 3: Impact of our DoS attack on several Ac-
cess Points. The term Both denotes that TKIP and
CCMP traﬃc was disabled. Open source router
ﬁrmware was tested on the Asus RT-N10.
Access Point
Linksys WAG320N
WRT54G 4.21.5
Scarlet VDSL Box
Cisco Aironet 1130 AG
Asus RT-N10 1.0.2.4
Tomato 1.28
DD-WRT v24-sp2
Protocols Disabled
WPA1 WPA2
Both
Both
Both
TKIP
TKIP
Both
Both
Both
TKIP
Both
Both
Both
Both
Both
wireless traﬃc, including CCMP protected traﬃc in mixed
mode. When targeting these devices one single TKIP client
allows an attacker to take down the complete wireless net-
work. More precisely, the behaviour of an AP depends on
whether WPA1 or WPA2 is being used (see Table 3). Prac-
tically the diﬀerence between WPA1 and WPA2 is mainly
between supported encryption schemes: WPA1 mandates
TKIP support and optionally allows CCMP, while the re-
verse is true for WPA2. For example, the WRT54G only
supports TKIP when using WPA1, while the Belkin N300
only supports WPA2 with CCMP.
For the fragmentation, portscan, and decryption attack
to work we need to be able to accurately predict the ﬁrst
12 bytes of encrypted packets. To test our prediction al-
gorithm we monitored TKIP traﬃc generated by visiting
several websites for 20 minutes. In total 36643 data pack-
ets were captured, of whom 36642 were predicted correctly.
The single miss was an EAPOL packet, which we purposely
ignored. Further, we weren’t able to capture all packets as
an attacker, meaning the keystreams corresponding to cer-
tain TSCs remained unknown. In total 5680 packets were
not captured, consisting of 13% of all traﬃc.
The fragmentation and portscan attack has been tested
against Windows, Linux, iOS, and Android. When con-
nected to a networking using TKIP, all were found to be
vulnerable. Additionally we tested the attacks under two au-
thentication mechanisms: the ﬁrst being a shared passphrase
and the second being a personal login and password veriﬁed
using PEAP-MSCHAP v2. In both situations the attacks
were successful. These tests clearly demonstrate the relia-
bility of the attacks.
For the decryption attack we found that, when connected
to a network using TKIP, Windows, Linux, and Android
were vulnerable. Mac OS X and iOS only include the ﬁrst
8 bytes of the UDP packet in the ICMP unreachable reply,
meaning the targeted packet is never included. Neverthe-
less, we did receive ICMP unreachable replies from all oper-
ating systems, meaning the Michael reset attack worked in
all cases. Installing a ﬁrewall which blocks the ICMP un-
reachable replies prevents the decryption attack, though the
Michael reset attack itself will remain possible.
7. RELATED WORK
Several DoS attacks exist on wireless networks. Arguably
the most well-known attack consists of forging deauthenti-
cation frames to either the client or AP [2]. This is possible
because the deauthentication message is not protected us-
ing any keying material. Continuously sending them will
result in a DoS attack. An advantage of our attack is that
it requires replaying only two frames each minute to discon-
nect every client that is using TKIP. Hence our attack is
stealthier and requires less power to execute. Furthermore,
nowadays the deauthentication attack can be prevented by
enabling protected management frames [14, §4.5.4.9]. Com-
pared to the DoS attack of Glass and Muthukkumarasamy [9]
our attack is easier to execute, since their attack requires
a man-in-the-middle position. Another advantage is that
our attack can be used to easily verify whether the client
sends MIC failure reports, and thus to see if it is possible
to perform the Beck and Tews attack [17]. The Beck and
Tews attack could also be changed to a DoS attack. Once
the ﬁrst MIC failure has been detected, the corresponding
packet could be injected a second time. However, on average
128 packets have to be injected before a MIC failure is trig-
gered. This makes the attack easier to detect. It also isn’t
as easy to implement compared to our DoS attack, making
it more diﬃcult to execute in practice.
K¨onings et al. found DoS vulnerabilities at the physical
and MAC layer of 802.11, some halting traﬃc for one minute
with minimal packet injection [15]. Contrary to our DoS,
their attacks do not simultaneously disconnect all clients
connected to a network. Bicakci and Tavli give a survey on
DoS attacks at the physical and MAC layer. The attacks
they discuss require injecting a large amount of frames [3].
One of the ﬁrst attacks on TKIP was found by Beck
and Tews and decrypts an ARP reply packet. As a re-
sult the MIC key for AP to client communication can be
obtained [20] and a few small packets can be injected.
It
only works if the QoS extension is enabled and takes 12–
15 minutes to execute. Halvorson et al. improved the at-
tack, allowing larger packets to be injected [11]. However
their technique does not allow injection of more packets, and
takes longer to execute compared to our fragmentation at-
tack. Morii and Todo came up with a modiﬁcation removing
the requirement that the AP must have enabled QoS [17].
They found that even if QoS was not used, clients will still
accept and process a QoS frame. This allows an attacker to
forge the QoS header if not present. In another paper Todo
et al. managed to reduce the execution time of the Beck and
Tews attack to 8–9 minutes [21].
The Michael algorithm was designed by Ferguson [6]. It
was quickly revealed to be invertible by Wool [22]. Based
on this Wool suggested a related message attack on TKIP.
Huang et al. showed that Michael is not collision free and
suggested a packet forgery attack [13].
Beck suggested the use of two magic words to reset the
Michael state [1]. Unfortunately, no thorough theoretical
analysis was provided, and no implementation in a practical
setting was given. Based on the fragmentation attack on
WEP by Bittau et al. [4], Beck also suggested using the
fragmentation attack on TKIP, though no implementation
was made to verify his ideas.
Wireless drivers have been tested before for vulnerabili-
ties [5]. Most of the techniques focus on fuzzing with the aim
of ﬁnding code injection attacks. However, only a limited
amount of research has been done to ﬁnd logical implemen-
tation ﬂaws. In particular we found no previous work testing
for replay attacks, seeing if it is possible to inject plaintext
packets into an encrypted network, or testing whether the
MIC of fragmented TKIP packets is veriﬁed.
Moen et al. have analysed the key scheduling algorithm in
TKIP [16]. They found that, given less than 10 RC4 packet
keys, it is possible to recover the temporal key (TK) with a
time complexity of O(2105) compared to a brute force attack
with complexity O(2128).
8. CONCLUSION
TKIP was designed as an intermediary solution to mit-
igate the existing ﬂaws of WEP. We found that TKIP is
still supported by a large number of networks. Further, we
showed that TKIP fails to provide suﬃcient security, by de-
scribing and implementing several new attacks. In addition,
during our experiments, we identiﬁed several critical im-
plementation vulnerabilities in several wireless devices. We
conjecture that a more substantial test of these implemen-
tations will reveal more vulnerabilities.
Specifying a short rekeying interval prevents the fragmen-
tation and decryption attack, unfortunately this does not
prevent our DoS attack. To secure a wireless network it is
strongly advised to only support the more secure CCMP.
9. ACKNOWLEDGEMENTS
The authors would like to thank the anonymous reviewers
and the shepherd for their valuable feedback.
This research is partially funded by the Research Fund
KU Leuven, and by the EU FP7 project NESSoS. With the
ﬁnancial support from the Prevention of and Fight against
Crime Programme of the European Union (B-CCENTRE).
Mathy Vanhoef holds a Ph. D. fellowship of the Research
Foundation - Flanders (FWO).
10. REFERENCES
[1] M. Beck. Enhanced TKIP michael attacks. Retrieved 4
Februari, 2013, from http://download.aircrack-ng.
org/wiki-files/doc/enhanced_tkip_michael.pdf.
[2] J. Bellardo and S. Savage. 802.11 denial-of-service
attacks: real vulnerabilities and practical solutions. In
Proceedigns of the USENIX Security Symposium, 2003.
[3] K. Bicakci and B. Tavli. Denial-of-service attacks and
countermeasures in IEEE 802.11 wireless networks,
2009.
[4] A. Bittau, M. Handley, and J. Lackey. The ﬁnal nail
in WEP’s coﬃn. In IEEE Symposium on Security and
Privacy, pages 386–400, 2006.
[5] L. Butti and J. Tinn´es. Discovering and exploiting
802.11 wireless driver vulnerabilities. Journal in
Computer Virology, 4(1):25–37, 2008.
[6] N. Ferguson. Michael: an improved MIC for 802.11
WEP. IEEE doc. 802.11-2/020r0, Jan. 2002.
[7] G. Fleishman. Say goodbye to WEP and TKIP.
Retrieved 26 November, 2012, from
http://bit.ly/cSFSvj, 2010.
[8] S. R. Fluhrer, I. Mantin, and A. Shamir. Weaknesses
in the key scheduling algorithm of RC4. In Selected
Areas in Cryptography, pages 1–24, 2001.
[9] S. M. Glass and V. Muthukkumarasamy. A study of
the TKIP cryptographic dos attack. In 15th
International Conference on Networks. IEEE, 2007.
[10] M. Guennoun, A. Lbekkouri, A. Benamrane,
M. Ben-Tahir, and K. El-Khatib. Wireless networks
security: Proof of chopchop attack. In WOWMOM,
pages 1–4, 2008.
[11] F. M. Halvorsen, O. Haugen, M. Eian, and S. F.
Mjølsnes. An improved attack on TKIP. In 14th
Nordic Conference on Secure IT Systems, NordSec
’09, 2009.
[12] B. Harris and R. Hunt. Review: TCP/IP security
threats and attack methods. Computer
Communications, 22(10):885–897, 1999.
[13] J. Huang, J. Seberry, W. Susilo, and M. W. Bunder.
Security analysis of michael: The IEEE 802.11i
message integrity code. In EUC Workshops, pages
423–432, 2005.
[14] IEEE Std 802.11-2012 (Rev. of IEEE Std 802.11-2007).
Wireless LAN Medium Access Control (MAC) and
Physical Layer (PHY) Speciﬁcations, 2012.
[15] B. K¨onings, F. Schaub, F. Kargl, and S. Dietzel.
Channel switch and quiet attack: New DoS attacks
exploiting the 802.11 standard. In LCN, 2009.
[16] V. Moen, H. Raddum, and K. J. Hole. Weaknesses in
the temporal key hash of WPA. Mobile Computing
and Communications Review, 8(2):76–83, 2004.
[17] M. Morii and Y. Todo. Cryptanalysis for RC4 and
breaking WEP/WPA-TKIP. IEICE Transactions,
94-D(11), 2011.
[18] S. Park, K. Kim, D. Kim, S. Choi, and S. Hong.
Collaborative QoS architecture between DiﬀServ and
802.11e wireless LAN. In Vehicular Technology
Conference, 2003.
[19] A. Stubbleﬁeld, J. Ioannidis, and A. D. Rubin. A key
recovery attack on the 802.11b wired equivalent
privacy protocol (wep). ACM Trans. Inf. Syst. Secur.,
7(2), 2004.
[20] E. Tews and M. Beck. Practical attacks against WEP
and WPA. In Proceedings of the second ACM
conference on Wireless network security, WiSec ’09,
2009.
[21] Y. Todo, Y. Ozawa, T. Ohigashi, and M. Morii.
Falsiﬁcation attacks against WPA-TKIP in a realistic
environment. IEICE Transactions, 95-D(2), 2012.
[22] A. Wool. A note on the fragility of the Michael
message integrity code. IEEE Transactions on
Wireless Communications, 3(5):1459–1462, 2004.