unused space of the headers is ﬁlled with encrypted zeros,
4https://www.privacy-cd.org/en/using-upr/download
which can be veriﬁed; however, it contains encrypted ran-
dom data in the Windows version, which is impossible to
distinguish from a backdoor version of the keys. Our analy-
sis proves, at least for the Windows version, that the bina-
ries do not diﬀer from the source, and hence do not include
such backdoors. The team then presented the discovery of
a weakness in the keyﬁle algorithm, by which it is possible
to manipulate any ﬁle so that it has no eﬀect when added
as a keyﬁle to encrypt a container.
Sogeti, a French information technology consulting com-
pany, reviewed TrueCrypt 6.0a for Windows, Linux and Mac
OS X, as part of a ﬁrst-level security certiﬁcation for in-
formation technologies (CSPN) for the French government
in 2008 [38]. CSPN is a security certiﬁcation formalized
by the Central Information Systems Security Division (DC-
SSI), a government entity under the authority of the Gen-
eral Secretary for French National Defence. This test is to
be performed in 30 man-days, and is meant to provide a ref-
erence opinion about the security of an application (True-
Crypt here). Sogeti’s analysis of TrueCrypt reported that
the cryptographic algorithms were implemented correctly,
and provided a positive opinion about the application in gen-
eral, even mentioning that “the product [TrueCrypt] inspires
conﬁdence”. However, several vulnerabilities were found, re-
garding a BIOS memory leakage of the password size in case
of a system-encrypted partition, memory leakage of the pass-
word after the creation of a volume, memory leakage of key-
ﬁles path, memory leakage of the XTS secondary key of a
volume after a backup of its header, and a denial-of-service
attack against the TrueCrypt driver. Several best practices
are also suggested to avoid the identiﬁed issues.
In 2013, Amossys proceeded with the same test against
TrueCrypt 7.1a for Windows only [2], building up on the pre-
vious analysis. They also conclude that the implementation
of the main functionalities is correct. They however point
out few vulnerabilities that remained unﬁxed since the pre-
vious CSPN test, including the BIOS memory leakage, mem-
ory leakage of the last created volume’s password, and mem-
ory leakage of keyﬁles path after a volume is dismounted.
The Open Crypto Audit Project5 mandated iSEC Re-
search Labs for a security assessment of selected security-
sensitive parts of TrueCrypt 7.1a for Windows in 2014 [24].
iSEC identiﬁed 11 vulnerabilities, including two integer over-
ﬂow vulnerabilities, possible leakage of sensitive information
from the pageﬁle, various internal information leakage, and
lack of security checks in the bootloader. They also propose
corrections. However, no serious ﬂaws were found. Adding
our results about the past 16 versions helps to build trust
around TrueCrypt.
6. CONCLUSION
As few users compile security-critical open-source soft-
ware themselves from the source, there should be a way
to guarantee that the oﬃcial build is indeed compiled from
the published source. This guarantee would prevent mali-
cious/coerced authors from inserting backdoors in the com-
piled version only, and would also defend against targeted
attacks. It can be oﬀered thanks to a veriﬁable build that
enables reproducing the oﬃcial build. Veriﬁable build can
be achieved either by a semantic comparison between the of-
ﬁcial and recompiled ﬁles, an approach taken by Fedora and
5http://opencryptoaudit.org/
openSUSE; or through a deterministic build process, which
can be repeated and would always provide the same output,
hence exactly matching the oﬃcial build. However, sources
of non-determinism can be diﬃcult to isolate and reproduce.
A perfectly deterministic build can only be achieved if all
variables can be controlled. In our case study, we encoun-
tered a source of non-determinism based on the brand of the
CPU of the building machine, which only showed up after we
dug into several versions of the same application, and found
no documentation about it. This problem leads to the fol-
lowing conclusion: it is not possible to ensure deterministic
builds over time if the build process relies on closed-source
software for which an exact documentation is unavailable.
Also, through our analysis of 16 versions of TrueCrypt for
Windows, we can conclude that verifying old software pack-
ages that inherently do not provide a guaranteed determinis-
tic build, can turn into a forensic case in which one needs to
gather all the appropriate tools that may have impacted the
authors’ build, and explain the reasons behind any oddities.
In the end, we concluded that the binary ﬁles of TrueCrypt
for Windows from version 5.0 to and 7.1a match the available
source code. Our hope is that the challenges as uncovered
through our TrueCrypt case study, and other concurrent
projects, would eventually help guide designing future de-
terministic/veriﬁable build processes, which are critical for
trusting security-critical software.
7. ACKNOWLEDGMENTS
We are grateful to anonymous ACSAC2014 reviewers for
their suggestions. We also wish to thank the anonymous
contributors for providing copies of old Microsoft develop-
ment kits and pointing few additional details in our analysis.
The second author is supported in part by an NSERC Dis-
covery Grant and an FRQNT nouveau chercheur grant.
8. REFERENCES
[1] AMD. Software optimization guide for AMD64
processors, Sept. 2005.
[2] Amossys. Rapport de certiﬁcation
DCSSI-CSPN-2013/09, Oct. 2013. http://www.ssi.
gouv.fr/IMG/cspn/anssi-cspn 2013-09fr.pdf.
[3] Bitcoin project. Bitcoin Core, 2014. https://bitcoin.
org/en/download.
[4] J. Bobbio. Reproducible builds for Debian. In
DebConf ’13, Vaumarcus, Switzerland, Aug. 2013.
[5] J. Bobbio. Byte-for-byte identical reproducible builds?
In FOSDEM’14, Brussels, Belgium, Feb. 2014.
[6] Conifer Systems. Build determinism. Blog article
(Oct. 17, 2008). http://www.conifersystems.com/
2008/10/17/build-determinism/.
[7] Conifer Systems. Machine-independent builds. Blog
article (Sept. 15, 2008). http://www.conifersystems.
com/2008/09/15/machine-independent-builds/.
[8] X. de Carn´e de Carnavalet. How I compiled TrueCrypt
7.1a for Win32 and matched the oﬃcial binaries. Blog
article (Oct. 21, 2013). https://madiba.encs.concordia.
ca/˜x decarn/truecrypt-binaries-analysis/.
[9] X. de Carn´e de Carnavalet and M. Mannan.
Challenges and implications of veriﬁable builds for
security-critical open-source software. Technical
Report 979115, Concordia University, Oct. 2014.
http://spectrum.library.concordia.ca/979115/.
[10] Debian Wiki. ReproducibleBuilds. Wiki article visited
on May 21, 2014. https://wiki.debian.org/
ReproducibleBuilds.
[11] Debian Wiki. SameKernel. Wiki article visited on May
21, 2014. https://wiki.debian.org/SameKernel.
[12] E. Egorochkin. Deterministic (bit-perfect) builds, June
2013. nix-dev mailing list. http://lists.science.uu.nl/
pipermail/nix-dev/2013-June/011357.html.
[13] Fedora Project. Reproducible builds for Fedora.
https://github.com/kholia/ReproducibleBuilds.
[14] S. Forrest, A. Somayaji, and D. H. Ackley. Building
diverse computer systems. In HotOS’97, Cape Cod,
MA, USA, May 1997.
[15] M. Franz. E unibus pluram: Massive-scale software
diversity as a defense mechanism. In NSPW’10,
Concord, MA, USA, Sept. 2010.
[16] R. Gallagher and G. Greenwald. How the NSA plans
to infect ‘millions’ of computers with malware. News
article (Mar. 12, 2014). https://ﬁrstlook.org/
theintercept/article/2014/03/12/nsa-plans-infect-
millions-computers-malware/.
Common Object File Format speciﬁcation v8.3, 2013.
[31] Microsoft. Proﬁle-guided optimizations, 2013. http://
msdn.microsoft.com/en-us/library/vstudio/e7k32f4k.
aspx.
[32] Microsoft. Specify symbol (.pdb) and source ﬁles in
the Visual Studio Debugger, 2013. http://msdn.
microsoft.com/en-us/library/ms241613.aspx.
[33] Mozilla Developer Network. Building with
proﬁle-guided optimization, Aug. 2013. https://
developer.mozilla.org/en/docs/Building with Proﬁle-
Guided Optimization.
[34] openSUSE Build Service. Build result compare script.
https://build.opensuse.org/package/show/openSUSE:
Factory/build-compare.
[35] M. Perry. Deterministic builds part one: Cyberwar
and global compromise. Tor Project article (Aug. 20,
2013). https://blog.torproject.org/blog/deterministic-
builds-part-one-cyberwar-and-global-compromise.
[36] D. Pistelli. Microsoft’s Rich signature
(undocumented). Blog article (Nov. 11, 2010). http://
www.ntcore.com/ﬁles/richsign.htm.
[17] Gitian.org. Gitian: a secure software distribution
[37] PrivacyLover.com. Analysis: Is there a backdoor in
method, Oct. 2009.
[18] GnuWin project. CoreUtils and gzip for Windows.
Truecrypt? Is Truecrypt a CIA honeypot? Blog article
(Aug. 14, 2010). http://www.privacylover.com/.
http://sourceforge.net/projects/gnuwin32/.
[38] SOGETI Infrastructure Services. Rapport de
[19] J. Gordon. The RSDS pdb format, 2010. http://www.
godevtool.com/Other/pdb.htm.
[20] A. Gostev. ’Gadget’ in the middle: Flame malware
spreading vector identiﬁed. Blog article (June 4,
2012). https://securelist.com/blog/incidents/33081/
gadget-in-the-middle-ﬂame-malware-spreading-
vector-identiﬁed-22/.
[21] Hex-Rays.com. Fast library identiﬁcation and
recognition technology, Feb. 2012. https://www.hex-
rays.com/products/ida/tech/ﬂirt/index.shtml.
[22] IEEE and The Open Group. dd. The Open Group
Base Speciﬁcations Issue 7.
[23] Intel. Intel 64 and IA-32 architectures software
developer’s manual, Feb. 2014.
[24] iSEC. Open Crypto Audit Project - TrueCrypt -
Security assessment, Apr. 2014.
[25] S. T. King, J. Tucek, A. Cozzie, C. Grier, W. Jiang,
and Y. Zhou. Designing and implementing malicious
hardware. In USENIX LEET’08, San Francisco, CA,
USA, Aug. 2008.
[26] H. Kirsch. The theory of build systems, Sept. 2013.
http://www.pifpafpuf.de/BuildTheory.html.
[27] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz.
SoK: Automated software diversity. In IEEE
Symposium on Security and Privacy, San Jose, CA,
USA, May 2014.
[28] E. Lippert. Past performance is no guarantee of future
results. Blog article (May 31, 2012). http://ericlippert.
com/2012/05/31/past-performance-is-no-guarantee-
of-future-results/.
[29] J. Menn. Exclusive: NSA inﬁltrated RSA security
more deeply than thought - study. Reuters news
article (Mar. 31, 2014). http://www.reuters.com/
article/2014/03/31/us-usa-security-nsa-rsa-
idUSBREA2U0TY20140331.
[30] Microsoft. Microsoft Portable Executable and
certiﬁcation DCSSI-CSPN-2008/03, Dec. 2008. http://
www.ssi.gouv.fr/IMG/cspn/dcssi-cspn 2008-03fr.pdf.
[39] StackOverﬂow.com. How do I build TrueCrypt on
Windows?, Nov. 2012. http://stackoverﬂow.com/
questions/13379644/how-do-i-build-truecrypt-on-
windows/13414137#13414137.
[40] The Netwide Assembler bug tracking system. NASM
crashes when building x64 .obj ﬁle. Bug ticket (Oct. 6,
2009). http://sourceforge.net/p/nasm/bugs/469/.
[41] The PaX Team. Address space layout randomization,
Mar. 2003. http://pax.grsecurity.net/docs/aslr.txt.
[42] K. Thompson. Reﬂections on trusting trust. Commun.
ACM, 27(8):761–763, Aug. 1984.
[43] Tor Project bug track system. Improve software
assurance. Bug ticket (May 31, 2012). https://trac.
torproject.org/projects/tor/ticket/6008.
[44] TrueCrypt Foundation. TrueCrypt.
[45] Ubuntu Privacy Remix Team. Security analysis of
TrueCrypt 7.0a with an attack on the keyﬁle
algorithm. Technical report (Aug. 14, 2011). https://
www.privacy-cd.org/downloads/truecrypt 7.0a-
analysis-en.pdf.
[46] M. Uecker. Building packages three times in a row.
Debian mailing list. https://lists.debian.org/debian-
devel/2007/09/msg00746.html.
[47] J. Walton. An analysis of the Windows PE checksum
algorithm, Mar. 2008. http://www.codeproject.com/
Articles/19326/An-Analysis-of-the-Windows-PE-
Checksum-Algorithm.
[48] D. Wendlandt, D. G. Andersen, and A. Perrig.
Perspectives: Improving SSH-style host authentication
with multi-path probing. In USENIX Annual
Technical Conference, Boston, MA, USA, June 2008.
[49] D. A. Wheeler. Fully Countering Trusting Trust
through Diverse Double-Compiling. PhD thesis,
George Mason University, Oct. 2009.