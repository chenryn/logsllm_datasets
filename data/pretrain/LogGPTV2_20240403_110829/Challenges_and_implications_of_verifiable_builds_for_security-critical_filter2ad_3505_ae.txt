### Unused Space in Headers

The unused space in the headers is filled with encrypted zeros, which can be verified. However, in the Windows version, this space contains encrypted random data, making it indistinguishable from a backdoor version of the keys. Our analysis confirms that, at least for the Windows version, the binaries do not differ from the source code and thus do not include such backdoors. The team also discovered a weakness in the keyfile algorithm, which allows any file to be manipulated so that it has no effect when added as a keyfile to encrypt a container.

### Security Certification by Sogeti

In 2008, Sogeti, a French information technology consulting company, reviewed TrueCrypt 6.0a for Windows, Linux, and Mac OS X as part of a first-level security certification (CSPN) for the French government [38]. CSPN is a security certification formalized by the Central Information Systems Security Division (DCSSI), a government entity under the authority of the General Secretary for French National Defence. This test, conducted over 30 man-days, aims to provide a reference opinion on the security of an application. Sogeti's analysis concluded that the cryptographic algorithms were correctly implemented, and they provided a positive opinion about the application, noting that "the product [TrueCrypt] inspires confidence." However, several vulnerabilities were identified, including BIOS memory leakage of the password size for system-encrypted partitions, memory leakage of the password after volume creation, memory leakage of keyfiles path, memory leakage of the XTS secondary key of a volume after a header backup, and a denial-of-service attack against the TrueCrypt driver. Sogeti also suggested several best practices to address these issues.

### Follow-Up Analysis by Amossys

In 2013, Amossys conducted a similar test on TrueCrypt 7.1a for Windows [2], building on the previous analysis. They concluded that the implementation of the main functionalities was correct but noted that some vulnerabilities remained unfixed since the previous CSPN test, including BIOS memory leakage, memory leakage of the last created volume’s password, and memory leakage of keyfiles path after a volume is dismounted.

### Security Assessment by iSEC Research Labs

In 2014, the Open Crypto Audit Project [5] commissioned iSEC Research Labs to conduct a security assessment of selected security-sensitive parts of TrueCrypt 7.1a for Windows [24]. iSEC identified 11 vulnerabilities, including two integer overflow vulnerabilities, possible leakage of sensitive information from the pagefile, various internal information leaks, and lack of security checks in the bootloader. They also proposed corrections. Despite these findings, no serious flaws were discovered. Our results on the past 16 versions help build trust in TrueCrypt.

### Conclusion

Since few users compile security-critical open-source software themselves from the source, there should be a way to ensure that the official build is indeed compiled from the published source. This guarantee would prevent malicious or coerced authors from inserting backdoors in the compiled version only and would also defend against targeted attacks. A verifiable build, which enables reproducing the official build, can offer this guarantee. Verifiable builds can be achieved through either a semantic comparison between the official and recompiled files, as done by Fedora and openSUSE, or through a deterministic build process, which always provides the same output. However, sources of non-determinism can be difficult to isolate and reproduce. A perfectly deterministic build can only be achieved if all variables are controlled. In our case study, we encountered a non-deterministic issue based on the CPU brand of the building machine, which was undocumented. This leads to the conclusion that it is not possible to ensure deterministic builds over time if the build process relies on closed-source software with incomplete documentation.

Through our analysis of 16 versions of TrueCrypt for Windows, we conclude that verifying old software packages that inherently do not provide a guaranteed deterministic build can turn into a forensic task. One needs to gather all the appropriate tools that may have impacted the authors' build and explain any oddities. Ultimately, we concluded that the binary files of TrueCrypt for Windows from version 5.0 to 7.1a match the available source code. We hope that the challenges uncovered through our TrueCrypt case study and other concurrent projects will guide the design of future deterministic/verifiable build processes, which are critical for trusting security-critical software.

### Acknowledgments

We are grateful to anonymous ACSAC2014 reviewers for their suggestions. We also thank the anonymous contributors for providing copies of old Microsoft development kits and pointing out additional details in our analysis. The second author is supported in part by an NSERC Discovery Grant and an FRQNT nouveau chercheur grant.

### References

[1] AMD. Software optimization guide for AMD64 processors, Sept. 2005.
[2] Amossys. Rapport de certification DCSSI-CSPN-2013/09, Oct. 2013. http://www.ssi.gouv.fr/IMG/cspn/anssi-cspn 2013-09fr.pdf.
[3] Bitcoin project. Bitcoin Core, 2014. https://bitcoin.org/en/download.
[4] J. Bobbio. Reproducible builds for Debian. In DebConf ’13, Vaumarcus, Switzerland, Aug. 2013.
[5] J. Bobbio. Byte-for-byte identical reproducible builds? In FOSDEM’14, Brussels, Belgium, Feb. 2014.
[6] Conifer Systems. Build determinism. Blog article (Oct. 17, 2008). http://www.conifersystems.com/2008/10/17/build-determinism/.
[7] Conifer Systems. Machine-independent builds. Blog article (Sept. 15, 2008). http://www.conifersystems.com/2008/09/15/machine-independent-builds/.
[8] X. de Carné de Carnavalet. How I compiled TrueCrypt 7.1a for Win32 and matched the official binaries. Blog article (Oct. 21, 2013). https://madiba.encs.concordia.ca/~x_decarn/truecrypt-binaries-analysis/.
[9] X. de Carné de Carnavalet and M. Mannan. Challenges and implications of verifiable builds for security-critical open-source software. Technical Report 979115, Concordia University, Oct. 2014. http://spectrum.library.concordia.ca/979115/.
[10] Debian Wiki. ReproducibleBuilds. Wiki article visited on May 21, 2014. https://wiki.debian.org/ReproducibleBuilds.
[11] Debian Wiki. SameKernel. Wiki article visited on May 21, 2014. https://wiki.debian.org/SameKernel.
[12] E. Egorochkin. Deterministic (bit-perfect) builds, June 2013. nix-dev mailing list. http://lists.science.uu.nl/pipermail/nix-dev/2013-June/011357.html.
[13] Fedora Project. Reproducible builds for Fedora. https://github.com/kholia/ReproducibleBuilds.
[14] S. Forrest, A. Somayaji, and D. H. Ackley. Building diverse computer systems. In HotOS’97, Cape Cod, MA, USA, May 1997.
[15] M. Franz. E unibus pluram: Massive-scale software diversity as a defense mechanism. In NSPW’10, Concord, MA, USA, Sept. 2010.
[16] R. Gallagher and G. Greenwald. How the NSA plans to infect ‘millions’ of computers with malware. News article (Mar. 12, 2014). https://firstlook.org/theintercept/article/2014/03/12/nsa-plans-infect-millions-computers-malware/.
[31] Microsoft. Profile-guided optimizations, 2013. http://msdn.microsoft.com/en-us/library/vstudio/e7k32f4k.aspx.
[32] Microsoft. Specify symbol (.pdb) and source files in the Visual Studio Debugger, 2013. http://msdn.microsoft.com/en-us/library/ms241613.aspx.
[33] Mozilla Developer Network. Building with profile-guided optimization, Aug. 2013. https://developer.mozilla.org/en/docs/Building with Profile-Guided Optimization.
[34] openSUSE Build Service. Build result compare script. https://build.opensuse.org/package/show/openSUSE:Factory/build-compare.
[35] M. Perry. Deterministic builds part one: Cyberwar and global compromise. Tor Project article (Aug. 20, 2013). https://blog.torproject.org/blog/deterministic-builds-part-one-cyberwar-and-global-compromise.
[36] D. Pistelli. Microsoft’s Rich signature (undocumented). Blog article (Nov. 11, 2010). http://www.ntcore.com/files/richsign.htm.
[17] Gitian.org. Gitian: a secure software distribution method, Oct. 2009.
[18] GnuWin project. CoreUtils and gzip for Windows. http://sourceforge.net/projects/gnuwin32/.
[37] PrivacyLover.com. Analysis: Is there a backdoor in Truecrypt? Is Truecrypt a CIA honeypot? Blog article (Aug. 14, 2010). http://www.privacylover.com/.
[19] J. Gordon. The RSDS pdb format, 2010. http://www.godevtool.com/Other/pdb.htm.
[20] A. Gostev. 'Gadget' in the middle: Flame malware spreading vector identified. Blog article (June 4, 2012). https://securelist.com/blog/incidents/33081/gadget-in-the-middle-flame-malware-spreading-vector-identified-22/.
[21] Hex-Rays.com. Fast library identification and recognition technology, Feb. 2012. https://www.hex-rays.com/products/ida/tech/flirt/index.shtml.
[22] IEEE and The Open Group. dd. The Open Group Base Specifications Issue 7.
[23] Intel. Intel 64 and IA-32 architectures software developer’s manual, Feb. 2014.
[24] iSEC. Open Crypto Audit Project - TrueCrypt - Security assessment, Apr. 2014.
[25] S. T. King, J. Tucek, A. Cozzie, C. Grier, W. Jiang, and Y. Zhou. Designing and implementing malicious hardware. In USENIX LEET’08, San Francisco, CA, USA, Aug. 2008.
[26] H. Kirsch. The theory of build systems, Sept. 2013. http://www.pifpafpuf.de/BuildTheory.html.
[27] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SoK: Automated software diversity. In IEEE Symposium on Security and Privacy, San Jose, CA, USA, May 2014.
[28] E. Lippert. Past performance is no guarantee of future results. Blog article (May 31, 2012). http://ericlippert.com/2012/05/31/past-performance-is-no-guarantee-of-future-results/.
[29] J. Menn. Exclusive: NSA infiltrated RSA security more deeply than thought - study. Reuters news article (Mar. 31, 2014). http://www.reuters.com/article/2014/03/31/us-usa-security-nsa-rsa-idUSBREA2U0TY20140331.
[30] Microsoft. Microsoft Portable Executable and Common Object File Format specification v8.3, 2013.
[38] SOGETI Infrastructure Services. Rapport de certification DCSSI-CSPN-2008/03, Dec. 2008. http://www.ssi.gouv.fr/IMG/cspn/dcssi-cspn 2008-03fr.pdf.
[39] StackOverflow.com. How do I build TrueCrypt on Windows?, Nov. 2012. http://stackoverflow.com/questions/13379644/how-do-i-build-truecrypt-on-windows/13414137#13414137.
[40] The Netwide Assembler bug tracking system. NASM crashes when building x64 .obj file. Bug ticket (Oct. 6, 2009). http://sourceforge.net/p/nasm/bugs/469/.
[41] The PaX Team. Address space layout randomization, Mar. 2003. http://pax.grsecurity.net/docs/aslr.txt.
[42] K. Thompson. Reflections on trusting trust. Commun. ACM, 27(8):761–763, Aug. 1984.
[43] Tor Project bug track system. Improve software assurance. Bug ticket (May 31, 2012). https://trac.torproject.org/projects/tor/ticket/6008.
[44] TrueCrypt Foundation. TrueCrypt.
[45] Ubuntu Privacy Remix Team. Security analysis of TrueCrypt 7.0a with an attack on the keyfile algorithm. Technical report (Aug. 14, 2011). https://www.privacy-cd.org/downloads/truecrypt 7.0a-analysis-en.pdf.
[46] M. Uecker. Building packages three times in a row. Debian mailing list. https://lists.debian.org/debian-devel/2007/09/msg00746.html.
[47] J. Walton. An analysis of the Windows PE checksum algorithm, Mar. 2008. http://www.codeproject.com/Articles/19326/An-Analysis-of-the-Windows-PE-Checksum-Algorithm.
[48] D. Wendlandt, D. G. Andersen, and A. Perrig. Perspectives: Improving SSH-style host authentication with multi-path probing. In USENIX Annual Technical Conference, Boston, MA, USA, June 2008.
[49] D. A. Wheeler. Fully Countering Trusting Trust through Diverse Double-Compiling. PhD thesis, George Mason University, Oct. 2009.