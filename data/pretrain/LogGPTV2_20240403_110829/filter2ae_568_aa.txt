## 前言
2019年10月9号，Mozilla安全团队公开了iTerm2一个存在了7年的任意命令执行漏洞，用户在使用常规命令（如ssh、curl等存在信息返回的命令）时都存在被攻击的可能，而由于iTerm2的是目前Mac
OSX上最流行的终端之一，因此该漏洞影响范围较大，CVSS评分为`9.8（critical）`。
该漏洞存在于iTerm2的tmux集成模块中，但是与tmux的安装与否没有关系，只需要用户的iTerm2输出恶意的内容时，攻击者就可以在用户的计算机上执行命令，所以许多常见的命令都可以导致用户被攻击，如`nc`、`cat`、`ssh`、`curl`、`head`、`tail`等等。
## 什么是tmux？
> tmux 是一款终端复用软件，用户可以在一个窗口里通过 tmux 创建、访问和控制多个分离的终端，同时还允许对终端进行“解绑”与“附加”。
tmux提供了一个纯文本交互的接口以方便其他应用与tmux进行交互，这一特性称为`CONTROL
MODE`，iTerm2也通过这一特性来实现了[tmux集成模块](https://www.iterm2.com/documentation-tmux-integration.html)。
在tmux的man page中，可以知道`CONTROL MODE`可以由`tmux -C`和`tmux
-CC`启动，该模式要求client需要发送以回车为结尾的tmux命令，每个tmux命令都会有一个以`%begin`开头和`%end`结尾的文本块代表输出内容，或者一个以%error开头的文本块代表错误内容。
在`CONTROL MODE`中tmux服务端会向客户端输出如下内容，来通知其状态的改变：
  * **%client-session-changed** client session-id name
  * **%exit** [reason]
  * **%layout-change** window-id window-layout window-visible-layout window-flags
  * **%output** pane-id value
  * **%pane-mode-changed** pane-id
  * **%session-changed** session-id name
  * **%session-renamed** name
  * **%session-window-changed** session-id window-id
  * **%sessions-changed**
  * **%unlinked-window-add** window-id
  * **%window-add** window-id
  * **%window-close** window-id
  * **%window-pane-changed** window-id pane-id
  * **%window-renamed** window-id name
## 分析
首先先看对应的(commit)[:
> Do not send server-controlled values in tmux integration mode.
>
> CVE-2019-9535
>
>   * Use session number everywhere rather than session name
>   * Do not poll tmux for the set-titles-string, status-left, and status-> right and  
>  then request the values of the returned format strings. Use ${T:} eval  
>  instead. These features are now only available for tmux 2.9 and later.
>   * Hex-encode options saved in the tmux server to make them unexploitable
> (e.g.,  
>  hotkeys, window affinities, window origins, etc.). The old values are  
>  accepted as inputs but will never be produced as output.
>
可以知道漏洞存在于处理`set-titles-string`，`status-left`和 `status-right`时没有对输入进行校验从而导致的命令注入。由于漏洞成因相近，本文只分析`set-titles-string`的漏洞原理和利用。
阅读tmux源码时，发现当以`-CC`进入`CONTROL MODE`时，tmux会输出`\033P1000p`和一个`初始化文本块`，例如：
    \033P1000p%begin 1337 0 0
    %end 1337 0 0
而iTerm2也是利用这一输出判断是否进入tmux模式，因此通过构造输出，iTerm2也会进入tmux模式
    $ printf "\033P1000p%%begin 1337 0 0\n%%end 1337 0 0"
    ** tmux mode started **
    Command Menu
    ----------------------------    esc    Detach cleanly.
      X    Force-quit tmux mode.
      L    Toggle logging.
      C    Run tmux command.
在阅读iTerm2源码后，发现当处于tmux模式时，iTerm2会将tmux的输出传入`TmuxGateway.m`的`executeToken`函数中，该函数负责处理tmux的返回数据并调用相应的回调函数。
在处理`初始化文本块`时，会调用`currentCommandResponseFinishedWithError`函数
    - (void)currentCommandResponseFinishedWithError:(BOOL)withError
    {
    // ......
        if (!_initialized) {
            _initialized = YES;
            if (withError) {
                [delegate_ tmuxInitialCommandDidFailWithError:currentCommandResponse_];
            } else {
                [delegate_ tmuxInitialCommandDidCompleteSuccessfully];
            }
        }
    // ......
    }
最后会进入`PTYSession.m`的 `tmuxInitialCommandDidCompleteSuccessfully`函数来进行初始化
    - (void)tmuxInitialCommandDidCompleteSuccessfully {
        // This kicks off a chain reaction that leads to windows being opened.
        [_tmuxController ping];
        [_tmuxController validateOptions];
        [_tmuxController checkForUTF8];
        [_tmuxController guessVersion];
        [_tmuxController loadTitleFormat];
    }
而该函数会调用`TmuxGateWay.m`的`sendCommand`向服务端发送一系列的tmux命令用于初始化：
# | tmux命令 | 回调函数  
---|---|---  
1 | display-message -p -F . | handlePingResponse  
2 | show-window-options -g aggressive-resize | showWindowOptionsResponse  
3 | show-option -g -v status | handleStatusResponse  
4 | list-sessions -F "\t" | checkForUTF8Response  
5 | display-message -p "#{version}" | handleDisplayMessageVersion  
6 | show-window-options pane-border-format | guessVersion23Response  
7 | list-windows -F "#{socket_path}" | guessVersion22Response  
8 | list-windows -F "#{session_activity}" | guessVersion21Response  
9 | list-clients -F "#{client_cwd}" | guessVersion18Response  
10 | show-options -v -g set-titles | handleShowSetTitles  
11 | show-options -v -g set-titles-string | handleShowSetTitlesString  
当命令#10（`show-options -v -g set-titles`）的返回是`on`时，变量`_shouldSetTitles`值设为`true`，而命令#11（`show-options -v -g
set-titles-string`）将返回的内容存入`setTitlesString`变量中，使得该变量可控
    - (void)handleShowSetTitles:(NSString *)result {
        _shouldSetTitles = [result isEqualToString:@"on"];
        [[NSNotificationCenter defaultCenter] postNotificationName:kTmuxControllerDidFetchSetTitlesStringOption
                                                            object:self];
    }
    - (void)handleShowSetTitlesString:(NSString *)setTitlesString {
        _setTitlesString = [setTitlesString copy];
    }
同时`handleShowSetTitles`函数会广播`kTmuxControllerDidFetchSetTitlesStringOption`消息，从而触发`PTYTab.m`的`tmuxDidFetchSetTitlesStringOption`函数。
    - (void)tmuxDidFetchSetTitlesStringOption:(NSNotification *)notification {
        if (notification.object != tmuxController_) {
            return;
        }
        [self updateTmuxTitleMonitor];
    }
    - (void)updateTmuxTitleMonitor {
        if (!self.isTmuxTab) {
            return;
        }
        if (tmuxController_.shouldSetTitles) {
            if (_tmuxTitleMonitor) {
                return;
            }
            [self installTmuxTitleMonitor];
        } else {
            if (!_tmuxTitleMonitor) {
                return;
            }
            [self uninstallTmuxTitleMonitor];
        }
    }
但是由于此时`tmuxController_`为`nil`，因此`notification.object != tmuxController_`为真，
**并不会调用`updateTmuxTitleMonitor`**。
但是， **如果**
执行了`updateTmuxTitleMonitor`函数，由于`_shouldSetTitles`为`true`，所以会调用`installTmuxTitleMonitor`
    - (void)installTmuxTitleMonitor {
        assert(!_tmuxTitleMonitor);
        if (self.tmuxWindow < 0) {
            return;