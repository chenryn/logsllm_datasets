## 0x01 工具
首先是要用到的工具，中间主要用了ida，hopper和lldb
  * dumpdecrypted: 将苹果加密过的app砸壳
  * class-dump: 导出MachO文件里ObjC类及方法定义
  * CydiaSubstrate: 将第三方动态库注入进程
  * Cycript: 用js语法写ObjC方法
  * Theos: 越狱插件开发工具
  * IDA: 反汇编、反编译工具
  * Hopper: OSX反汇编、反编译工具
  * Debugserver + LLDB: 动态调试器
## 0x02 ARM指令
    arm是RISC结构，数据从内存到CPU之间移动只能通过L/S指令来完成，就是ldr/str指令
    ldr 把数据从内存移到cpu
    str 把cpu的数据数据转移到内存
    lldb读取内存的数据，memory read  
    ldr r0, 0x12345678   //把0x12345678这个地址中的值存放到r0中
    ldr r0, =0x12345678  //把0x12345678这个地址写到r0中
    例子：
    COUNT EQU 0x40003100 //定义一个COUNT变量，地址是0x40003100
    ...
    LDR R1,=COUNT       //将COUNT这个变量的地址，也就是0x40003100放到R1中
    MOV R0,#0           //将立即数0放到R0中
    STR R0,[R1]         //将R0中的值放到以R1中的值为地址的存储单元去
    B 跳转指令
    BL 带返回的跳转指令
    BLX 带返回和状态切换的跳转指令
    BX  带状态切换的跳转指令
    BLX指令从ARM指令集跳转到指令中所指定的目标地址，并将处理器的工作状态从ARM切换到Thumb状态，该指令同时将PC的当前内容保存到寄存器R14，因此，当子程序使用Thumb指令集，而调用者者使用ARM指令集，可以通过BLX指令实现子程序的调用和处理器工作状态切换，同时，子程序的返回可以通过将寄存器R14的值复制到PC中来完成。
     R0-R3:        用于函数参数及返回值的传递，超过4个参数，其它参数存在栈中，在ARM中栈是向下生长的，R0还可以作为返回值。
      R4-R6, R8, R10-R11: 没有特殊规定，就是普通的通用寄存器
      R7:          栈帧指针，指向母函数与被调用子函数在栈中的交界。
      R9:          在iOS3.0被操作系统保留
      R12:          内部过程调用寄存器，动态链接时会用到，不必深究
      R13:          SP(stack pointer)，是栈顶指针
      R14:          LR(link register)，存放函数的返回地址。
      R15:          PC(program counter)，指向当前指令地址。
    ADC    带进位的加法
      ADD    加法
      AND    逻辑与
      B      分支跳转，很少单独使用
      BL          分支跳转，跳转后返回地址存入r14
      BX          分支跳转，并切换指令模式（Thumb/ARM）
      CMP        比较值，结果存在程序状态寄存器，一般用于分支判断
      BEQ        结果为0则跳转
      BNE        结果不为0跳转
      LDR        加载寄存器，从内存加载到寄存器
      LDRB      装载字节到寄存器
      LDRH      装载半字到寄存器（一个字是32位）
      LSL         逻辑左移 这是一个选项，不是指令
      LSR         逻辑右移 这是一个选项，不是指令
      MOV        传送值/寄存器到一个寄存器 
      STR         存储一个寄存器，寄存器值存到内存
      STRB       存储一个字节
      STRH       存储一个半字
      SUB         减法
      PUSH POP 堆栈操作
    有时候需要
    db  ；定义字节类型变量，一个字节数据占一个字节单元，读完一个偏移量加1
    dw  ；定义字类型变量，一个字数据占2个字节单元，读完一个，偏移量加2
    dd  ；定义双字类型变量，一个双字数据占4个字节单元，读完一个，偏移量加4
    IDA给某个位置命名的时，它会使用该位置的虚拟地址和表示一个该地址的类型的前缀进行命名：
    sub_xxx  ；地址xxx处的子例程
    loc_xxx  ；地址xxx处的一个指令
    byte_xxx ；位置xxx处的8位数据
    word_xxx ;位置xxx处的16位数据
    dword_xxx ;位置xxx处的32位数据
    unk_xxx   ;位置xxx处大小未知的数据
    关于sp，bp等栈寄存器的解释：
    SP is stack pointer. The stack is generally used to hold "automatic" variables and context/parameters across function calls. Conceptually you can think of the "stack" as a place where you "pile" your data. You keep "stacking" one piece of data over the other and the stack pointer tells you how "high" your "stack" of data is. You can remove data from the "top" of the "stack" and make it shorter.
    虽然是英文，但是看起来要比中文易懂
ida里面有三种颜色的箭头:
  1. 蓝色，顺序执行
  2. 绿色，条件为(YES)
  3. 红色，条件为（NO）
## 0x03 lldb使用方法
    lldb操作相关指令
    image list -o -f 查看进程在虚拟内存中相对模块基地址
    br s -a [addr]  打断点
    breakpoint delete  删除断点
    s/n  是针对源代码
    br list 列出所有断点
    br dis 1  禁用序号为1的断点
    jump  跳转到新地址
    ni   断点的单步之行, netxi(next instruction简写:ni)
    si   stepi(step instruction 简写:si)
    display /10i $pc-16  显示当前PC附近的10条指令
    si会进入函数之行，ni执行完但是不会进入函数内，执行过程中可以利用display /i $pc来看下一个执行的instruction是什么
    c  放开执行该断点
    p  输出某个寄存器的值
    p $r0  输出寄存器的内容
    也可以将一个地址所存放的值进行打印
    p/x $sp 就是输出$sp指针所指的地址处存放的值，以16进制表示
    po (char *)$r2   po打印Object-C对象
    register read --all  读取所有的寄存器内容
    thread list ／／打印所有线程
    thread select  ／／跳到某个线程
    thread info ／／输出当前线程信息
    frame variable  ／／打印当前栈所有变量
    frame variable '变量名' ／／打印某个变量
    frame info 查看当前帧栈信息
    frame select 跳到指定帧栈
frida的常见用法：
  * hook函数(IOS中theos具备的功能）
  * 记录函数执行日至(IOS中theos具备的功能）
  * 调用函数（IOS中cycript具备的功能）
  * 读写内存（类似调试器的功能）
lldb:
  * lldb在object-c类对象所有函数设置断点: `breakpoint set -r '\[ClassName .*\]$'`
常用：
    breakpoint set --name 
        "set a breakpoint on a given function name, globally. eg.
         breakpoint set --name viewDidLoad
         or
         breakpoint set --name "-[UIView setFrame:]"
    break set --selector 
        "set a breakpoint on a selector, globally. e.g.,
        breakpoint set --selector dealloc
    bt  //查看堆栈
    frame select 
    thread list 
    expression $r6 //查看r6寄存器的值
    1. 加参数可以更改显示方式，如/x十六进制打印
    2. po一般用作查看对象信息
    3. po的命令是“expression -O -"命令的别名
    第一次使用malloc_info需要在lld里面导入lldb.macosx.heap
    malloc_info -s 
    memory read   读取内存的值
### 0x04 Hopper基本使用
hopper和LLDB所选择的ARM架构位数得一致，要么是32位，要么都是64位，计算公式：  
hopper里面显示的都是"模块偏移前基地址",而lldb要操作的都是"模块偏移后的基地址"，所以从hopper到lldb要做一个地址偏移量的转换。
    偏移后模块基地址 ＝  偏移前模块地址 + ALSR
偏移前地址从Hopper看:
ALSR偏移地址从LLDB看:
由上图可知ASLR偏移：30000  