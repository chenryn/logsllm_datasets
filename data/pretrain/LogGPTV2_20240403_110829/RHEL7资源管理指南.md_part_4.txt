::: para
如要管理 Block IO，请使用单位配置文件 [**\[Service\]**]{.bold .bold}
部分中的下列指令。下列指令假设 `BlockIOAccounting`{.option} 参数已启动：
:::
::: variablelist
[`BlockIOWeight`{.option}=*value*]{.term}
:   ::: para
    为已执行进程选取一个新的整体 block IO 权重，并以此替代
    *value*。权重需在 10 到 1000 之间选择，默认值是 1000。
    :::
[`BlockIODeviceWeight`{.option}=*device_name* *value*]{.term}
:   ::: para
    请为 *device_name* 所指的设备选取 block IO 权重，并以此代替
    *value*。用名称或者通向此设备的路径来代替 *device_name*。因为有
    `BlockIOWeight`{.option}，您可以在 10 到 1000 之间选取权重值。
    :::
[`BlockIOReadBandwidth`{.option}=*device_name* *value*]{.term}
:   ::: para
    此指令可以为一个单位限定具体带宽。用设备名称或通向块设备节点的路径替换
    *device_name*，*value* 代表带宽率。使用
    [*K*]{.emphasis}、[*M*]{.emphasis}、[*G*]{.emphasis}、[*T*]{.emphasis}
    后缀作为计量单位。没有后缀的值默认单位为 "字节/秒"。
    :::
[`BlockIOWriteBandwidth`{.option}=*device_name* *value*]{.term}
:   ::: para
    此指令可以给指定设备限定可写带宽。参数与可与
    `BlockIOReadBandwidth`{.option} 一致。
    :::
:::
::: para
上述的每一个指令控制一个与之相符的 cgroup 参数。请参阅〈[Kernel
管控器专项介绍](#chap-Using_Control_Groups.html#itemlist2-Controller-Specific_Kernel_Documentation){.xref}〉中对
`blkio`{.systemitem} 管控器的介绍。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
目前，`blkio`{.systemitem}
资源管控器暂不支持已缓冲的编写操作。它主要针对直接 I/O，所以已缓冲编写的
service 将忽略 `BlockIOWriteBandwidth`{.option}
的限制。另一方面，已缓冲的读取操作是受到支持的，`BlockIOReadBandwidth`{.option}
限制对直接读取和已缓冲读取操作均起作用。
:::
:::
:::
::: example
[⁠]{#chap-Using_Control_Groups.html#ex-Limiting_Block_IO_of_a_Unit}
**例 2.5. 限定一个单位 Block IO 的可用量**
::: example-contents
::: para
如要降低 Apache service 存取 `/home/jdoe/`{.filename} 目录 block IO
的权重，请将下列字符添加至
`/usr/lib/systemd/system/httpd.service`{.filename} 单位文件：
:::
``` screen
[Service]
BlockIODeviceWeight=/home/jdoe 750
```
::: para
如要设定 Apache 从 `/var/log/`{.filename} 目录读取的最大带宽为
5MB/秒，请使用下列句法：
:::
``` screen
[Service]
BlockIOReadBandwith=/var/log 5M
```
::: para
如要应用此项修改，请重新载入 systemd 的配置并重启 Apache，这样所修改的
service 文件会生效：
:::
``` screen
~]# systemctl daemon-reload
~]# systemctl restart httpd.service
```
:::
:::
#### [⁠]{#chap-Using_Control_Groups.html#br-Managing_Other_System_Resources}管理其它系统资源
::: para
另有几种指令，可在单位文件中使用以协助管理资源。
:::
::: variablelist
[`DeviceAllow`{.option}=*device_name* *options*]{.term}
:   ::: para
    此选项可以控制存取指定设备节点的次数。此处，*device_name*
    代表通向设备节点的路径，或者是 `/proc/devices`{.filename}
    中特定的设备组名称。用 `r`{.literal}、`w`{.literal} 和 `m`{.literal}
    的组合来替换
    `options`{.option}，以便单位读取、写入或者创建设备节点。
    :::
[`DevicePolicy`{.option}=*value*]{.term}
:   ::: para
    此处，*value* 是以下三种之一。[*strict*]{.emphasis} ：仅允许
    `DeviceAllow`{.option}
    指定的存取类型；[*closed*]{.emphasis}：允许对标准伪设备的存取，如：/dev/null、/dev/zero、/dev/full、/dev/random
    和 /dev/urandom； [*auto*]{.emphasis}：如果不显示
    `DeviceAllow`{.option}，则允许对所有设备进行存取，此设定为默认设置。
    :::
[`Slice`{.option}=*slice_name*]{.term}
:   ::: para
    请用存放单位的 slice 名称替换 *slice_name*。默认名称是
    [*system.slice*]{.emphasis}。scope
    单位不能以此方式排列，因为它们已与其父 slice 绑定。
    :::
[`ControlGroupAttribute`{.option}=*attribute* *value*]{.term}
:   ::: para
    此选项可以设定 Linux cgroup
    管控器公开的多项控制群组参数。用您希望修改的低级别 cgroup 参数来替换
    *attribute*，用此参数的新值来替换 *value*。更多关于 cgroup
    管控器的信息，请参阅〈[Kernel
    管控器专项介绍](#chap-Using_Control_Groups.html#itemlist2-Controller-Specific_Kernel_Documentation){.xref}〉。
    :::
:::
::: example
[⁠]{#chap-Using_Control_Groups.html#ex-Changing_Low-level_Cgroup_Attributes}
**例 2.6. 更改低级别 cgroup 的属性**
::: example-contents
::: para
如果您希望更改 [*memory.swappiness*]{.emphasis} 设置来重新设定 kernel
替换 cgroup 任务所用进程内存的趋势，请参阅〈[Kernel
管控器专项介绍](#chap-Using_Control_Groups.html#itemlist2-Controller-Specific_Kernel_Documentation){.xref}〉对内存管控器的介绍。如要将
Apache service 的 [*memory.swappiness*]{.emphasis} 设为
70，请添加下列信息至
`/usr/lib/systemd/system/httpd.service`{.filename}：
:::
``` screen
[Service]
ControlGroupAttribute=memory.swappiness 70
```
::: para
要应用此项修改，请重新载入 systemd 的配置并重启 Apache 来让修改过的
service 文件生效：
:::
``` screen
~]# systemctl daemon-reload
~]# systemctl restart httpd.service
```
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_Control_Groups.html#sec-Obtaining_Information_About_Control_Groups}2.4. 获得关于控制群组的信息 {.title}
:::
::: para
使用 `systemctl`{.command}
指令将系统单位列表并检查它们的状态。`systemd-cgls`{.command}
指令可以检查控制群组的层级，`systemd-cgtop`{.command}
可以监控控制群组的实时资源消耗。
:::
::: section
::: titlepage
## [⁠]{#chap-Using_Control_Groups.html#sec-Listing_Units}2.4.1. 将单位列表 {.title}
:::
::: para
使用下列指令将系统中所有被激活单位列表：
:::
``` synopsis
systemctl list-units
```
::: para
`list-units`{.option}
是默认执行选项，也就是说，即便您遗漏了此选项，也不会影响结果：
:::
``` screen
systemctl
UNIT                     LOAD   ACTIVE SUB     DESCRIPTION
abrt-ccpp.service        loaded active exited  Install ABRT coredump hook
abrt-oops.service        loaded active running ABRT kernel log watcher
abrt-vmcore.service      loaded active exited  Harvest vmcores for ABRT
abrt-xorg.service        loaded active running ABRT Xorg log watcher
...
```
::: para
以上所列结果包含四项：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [*UNIT*]{.emphasis} ------ 单位名称，也反映单位在 cgroup
    树中的位置。 如〈["systemd
    的单位类型"一节](#chap-Introduction_to_Control_Groups.html#br-Systemd_Unit_Types){.xref}〉所述，有三种单位类型与资源控制相关：[*slice*]{.emphasis}、[*scope*]{.emphasis}
    和 [*service*]{.emphasis}。关于 `systemd`{.systemitem}
    的单位类型介绍，请参阅《[Red Hat Enterprise Linux 7
    系统管理员指南](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide)
    · [ *使用 systemd 管理 service* ]{.emphasis}》。
    :::
-   ::: para
    [*LOAD*]{.emphasis} ------
    显示单位配置文件是否被正确装载。如果装载失败，文件会包含
    [*error*]{.emphasis} 而不是
    [*loaded*]{.emphasis}。其它单位装载状态有：[*stub*]{.emphasis}、[*merged*]{.emphasis}
    和 [*masked*]{.emphasis}。
    :::
-   ::: para
    [*ACTIVE*]{.emphasis} ------ 高级单位的激活状态，是 SUB 的一般化。
    :::
-   ::: para
    [*SUB*]{.emphasis} ------
    低级单位的激活状态。可能值的范围取决于单位类型。
    :::
-   ::: para
    [*DESCRIPTION*]{.emphasis} ------ 描述单位内容和性能。
    :::
:::
::: para
默认情况下，`systemctl`{.command} 只会列出被激活的单位（依据 ACTIVE
域中的高级激活状态）。使用 `--all`{.option}
选项可以查看未被激活的单位。如要限制结果列表中的信息量，请使用
`--type`{.option} (`-t`{.option})
参数，此参数需要单位类型的逗号分隔列表，如：[*service*]{.emphasis} 和
[*slice*]{.emphasis} 或者单位装载状态，如：[*loaded*]{.emphasis} 和
[*masked*]{.emphasis}。
:::
::: example
[⁠]{#chap-Using_Control_Groups.html#Using_systemctl_list-units}
**例 2.7. 使用 systemctl list-units**
::: example-contents
::: para
如要查看系统使用的全部 slice 列表，请输入：
:::
``` synopsis
~]$ systemctl -t slice
```
::: para
如要将全部被激活的已屏蔽 service 列表，请输入：
:::
``` synopsis
~]$ systemctl -t service,masked 
```
:::
:::
::: para
对您系统中安装的单位文件及其状态列表，请输入：
:::
``` synopsis
systemctl list-unit-files
```
:::
::: section
::: titlepage
## [⁠]{#chap-Using_Control_Groups.html#sec-Viewing_the_Control_Group_Hierarchy}2.4.2. 查看控制群组的层级 {.title}
:::
::: para
上述指令不会超越单位水平来显示 cgroup
中运行的真正进程。`systemctl`{.command}
结果也不会显示单位的层级。您可以使用 `systemd-cgls`{.command} 指令，根据
cgroup 将运行的进程分组来同时实现两者。 要显示您系统中的全部 cgroup
层级，请输入：
:::
``` synopsis
systemd-cgls
```
::: para
当 `systemd-cgls`{.command} 不带参数发布，它会返回整体 cgroup
层级。cgroup 树的最高层由 slice 构成，外观如下：
:::
``` screen
├─system
│ ├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 20  
│ ...
│      
├─user
│ ├─user-1000
│ │ └─ ...
│ ├─user-2000
│ │ └─ ...
│ ...
│     
└─machine  
  ├─machine-1000
  │ └─ ...
  ...
```
::: para
请注意，只有当您运行了虚拟机或者容器的时候，机器 slice
才会出现。更多关于 cgroup 树的信息，请参阅〈["systemd
的单位类型"一节](#chap-Introduction_to_Control_Groups.html#br-Systemd_Unit_Types){.xref}〉。
:::
::: para
如要减少 `systemd-cgls`{.command} 的输出并查看层级的特定一部分，请执行：
:::
``` synopsis
systemd-cgls name
```
::: para
请用您希望检查的资源管控器的名字替换 *name*。
:::
::: para
或者，使用 `systemctl status`{.command} 来显示系统单位的详细信息。cgroup
的子树是此指令结果的一部分。
:::
``` synopsis
systemctl status name
```
::: para