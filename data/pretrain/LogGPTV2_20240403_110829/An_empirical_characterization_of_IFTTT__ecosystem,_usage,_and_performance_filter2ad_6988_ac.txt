### Custom Proxy and IFTTT Execution Timeline

**Custom Proxy ❸** observes the trigger event and notifies **Our Server ❺**. Table 5 illustrates the applet execution timeline for A2 under scenario E2.

| t (s) | Event |
|-------|-------|
| 0     | Trigger event detected by Custom Proxy ❸ |
| 0.04  | Notification sent to Our Server ❺ |
| 0.16  | Confirmation received from trigger service ❺ |
| 81.1  | IFTTT engine ❼ polls trigger service ❺ about the trigger |
| 82.1  | IFTTT engine ❼ sends action request to action service ❺ |
| 83.0  | After querying ❺, Custom Proxy ❸ sends the action to the IoT device |
| 83.8  | Test controller ❾ confirms that the action has been executed |

### Performance Testing and Analysis

Over a period of three days, the testbed executed each applet 50 times at different times. Before each test, we ensured both local WiFi and Internet connectivity were good through active probing to avoid network performance bottlenecks.

For better visualization, we grouped the latency of A1 to A4 and A5 to A7, as the performance within each group is qualitatively similar. We first examined A1 to A4. Their T2A latency values are not only large but also highly variable, with the 25th, 50th, and 75th percentiles being 58s, 84s, and 122s, respectively. This may not be a significant issue for "non-real-time" applets such as A4. However, for applets like A2 (using a smart switch to turn on a light), such long and highly variable latency degrades user experience. In extreme cases, the T2A latency can reach 15 minutes.

To identify the cause of such high latency and variance, we replaced the involved service entities with our own implementation, known to be performance-wise efficient. We designed the following three experiments and ran them on our testbed:

- **E1**: Replace the official trigger service (e.g., Hue Service ❻) with Our Service ❺.
- **E2**: Replace the trigger and action services with Our Service ❺.
- **E3**: In addition to E2, further replace the IFTTT engine ❼ with our own implementation that follows the IFTTT protocol and performs frequent polling (every 1 second).

Figure 5 plots the T2A latency for A2 under scenarios E1/E2 and E3 (for each scenario, we ran 20 tests). The results clearly indicate that the performance bottleneck is the IFTTT engine itself, as E3 dramatically reduces the T2A latency compared to E1 and E2, which exhibit similar performance. Specifically, we observed that IFTTT employs a very long polling interval, which dominates the overall T2A latency. Table 5 exemplifies the breakdown of the T2A latency for a typical execution of applet A2 under scenario E2. As shown, Our Service ❺ is notified about the trigger event at t=0.16 sec; however, the polling request from the IFTTT engine ❼ arrives much later at t=81.1 sec.

### Real-Time API and Polling

IFTTT also provides a real-time API, which allows a trigger service to proactively send a notification to IFTTT about a trigger event. Through experiments, we found that using the real-time API brings no performance impact for our service (figure not shown). Note that the real-time API merely provides hints to the IFTTT engine, which still needs to poll the service to get the trigger event delivered. In other words, the IFTTT engine has full control over trigger event queries and likely ignores real-time API hints. We provide more discussions in §6.

Another observation relates to the low T2A latency of A5 to A7 in Figure 4. Since they all use Alexa as the trigger, it is likely that IFTTT customizes the polling frequency or processes the real-time API hints for some services (such as Alexa) with timing requirements. However, as indicated by our previous results (e.g., A2), such customization does not yet cover all applets requiring low latency. When we used our own service to host Alexa, its latency became large.

### Sequential and Concurrent Applet Execution

**Sequential Execution of Applets:**
We tested the performance when a trigger is activated multiple times sequentially (every 5 seconds in our experiment). As exemplified in the top part of Figure 6, due to the long and highly variable polling latency, 119 seconds later, the action associated with the first trigger is executed together with a cluster of subsequent actions. The second and third clusters come at 247 and 351 seconds, respectively. The actions are sequentially mapped to triggers, but the actions' timing is "reshaped" by IFTTT. Such a clustered pattern, observed from all triggers for A1 to A4, is caused by the batched process of IFTTT polling. Upon receiving a polling query, the trigger service should return many buffered trigger events (up to k) to IFTTT. k is a parameter in the polling query (50 by default). Because each polling query response contains multiple trigger events, the resulting actions naturally form a cluster. The bottom part of Figure 6 shows one extreme case (possibly when IFTTT experiences high workload) where the polling delay between two clusters inflates to 14 minutes.

**Concurrent Execution of Applets:**
Users can create two applets with the same trigger, say "if A then B" and "if A then C" to realize "if A then B and C." When A is triggered, ideally, B and C should be executed simultaneously. Figure 7 plots the CDF for T2A latency difference between "turn on Hue light when email arrives" and "activate WeMo switch when email arrives," which share the same trigger, across 20 tests. As shown, the T2A latency difference ranges from -60 to 140 seconds. This is because (1) the polling delay is highly fluctuating, and (2) the polling response of one applet cannot be piggybacked with that of another applet. The results indicate that in reality, IFTTT cannot guarantee the simultaneous execution of two applets with the same trigger. This may cause unexpected results for end users (e.g., a user wants to use a smart switch to turn on the heat and close the window).

### Infinite Loop

Multiple applets can be chained in IFTTT. However, users may misconfigure chained applets to form an "infinite loop," e.g., A triggers B, which further triggers A. An infinite loop may waste resources and even damage the IoT equipment. Through experiments, we confirmed that despite a simple task, no "syntax check" is performed by IFTTT to detect a potential infinite loop. Furthermore, we experimentally confirmed that an infinite loop may be jointly triggered by IFTTT and 3rd-party automation services. For example, a user applies the following IFTTT applet: add a row in my Google Spreadsheet when an email is received. Meanwhile, the user has also enabled in her spreadsheet the notification feature [12], which sends her an email if the spreadsheet is modified. The applet and the enabled notification thus cause an implicit infinite loop. Since IFTTT is not aware of the latter, it cannot detect the loop by analyzing the applets offline. Instead, some runtime detection techniques are needed.

### Related Work

**IFTTT Characterization:**
Ur et al. investigated the human factor of trigger-action programming in smart homes [27]. As part of the study, they collected 67K IFTTT recipes (i.e., applets) in 2013 to demonstrate that users can create a large number of combinations of triggers and actions. A follow-up CHI note [28] by the same authors analyzed basic statistics of 224K IFTT recipes crawled in 2015. Surbatovich et al. [25] used the dataset of [28] to analyze the security and privacy risks of IFTTT recipes. Huang et al. [19] investigated how to make IFTTT-style TAP better fit users' mental models. Our study distinguishes from the above in several aspects. First, we provide an up-to-date characterization of the IFTTT ecosystem with new observations that differ from previous measurements (e.g., the dominance of IoT services described in §3.2). Second, we build a real IFTTT testbed and show the interaction among different entities in the ecosystem. Third, we conduct experiments to analyze the applet execution performance.

**IFTTT-like Platforms:**
There are also commercial platforms such as Atooma [2], WigWag [14], Android Tasker [11], Zipato [15], Stringify [10], and WayLay [13]. Some use more complex languages such as flowcharts [10] or even Bayesian Networks [13]. All of them have registered less popularity compared to IFTTT.

**Trigger-Action Programming (TAP):**
TAP has been studied for more than a decade. It is often used in automation for smart homes [17, 21, 26, 29, 30], smart buildings [22], and general IoT/context-aware systems [16, 18, 20, 23]. We instead conduct an empirical study of IFTTT, the most popular commercial TAP platform [19].

### Discussions and Conclusions

**Performance Improvements:**
We observe that the T2A latency, dominated by the polling delay, is often long and highly variable. Instead of polling, an effective way to reduce latency is to perform push (or utilize the real-time API with the same concept). However, there are reasons why IFTTT has not yet fully adopted this approach. One possible reason is that if all trigger services perform push, the incurred instantaneous workload may be too high: IoT workload is known to be highly bursty [24]; for IFTTT, it is likely also the case (consider popular applets such as "update wallpaper with new NASA photo"). On the other hand, this creates opportunities for predicting trigger events to perform polling smartly or provisioning resources for accepting more real-time hints. Such optimizations only need to apply to top applets that dominate usage (Figure 3).

**Distributed Applet Execution:**
Currently, all applet executions need to be handled by the centralized IFTTT engine. Many applets can be executed fully locally by using users' smartphones or tablets as a local IFTTT engine. This would dramatically improve system scalability. Nevertheless, designing such a hybrid (centralized + distributed) applet execution scheme is challenging in many aspects: what are users' incentives for adopting the local version (maybe better privacy or operating without the Internet)? How to determine which applets to execute locally? How to quickly recover when the local IFTTT engine goes down? More research is needed in this direction.

**Permission Management:**
We notice that IFTTT performs coarse-grained permission control at the service level: for a service involved in any trigger or action installed by the user, IFTTT will need all permissions of the service. For example, installing an applet with the trigger "new email arrives" requires permissions for reading, deleting, sending, and managing emails. This facilitates usability (as the user will not be bothered when future applets involving the same service are installed) but incurs potential security issues (as the "least privilege principle" is violated). We need better permission management schemes that balance the tradeoff between usability and security.

**Limitations:**
We acknowledge that observing the IoT ecosystem from the perspective of IFTTT is interesting but still limited, as IFTTT may not cover all available IoT devices and their owners. To conclude, in this study, we observe the fast growth of the IFTTT ecosystem and its increasing usage for automating IoT-related tasks, which correspond to 52% of services and 16% of applet usage. We observe several performance inefficiencies and identify their causes. We plan to study future IFTTT features such as queries and conditions [25].

### Acknowledgements

We would like to thank our shepherd, Hamed Haddadi, and the anonymous reviewers for their valuable comments and suggestions. This research was supported in part by the National Science Foundation under grants #1629347 and #1566331.

### References

[1] Amazon Echo - What We Know Now (Updated). http://files.constantcontact.com/150f9af2201/70c07fdd-a197-4505-9476-e83aa726f025.pdf.

[2] Atooma. https://www.atooma.com/.

[3] Google APIs. https://console.developers.google.com/.

[4] IFTTT. https://ifttt.com/.

[5] IFTTT API (2017). https://platform.ifttt.com/docs/api_reference.

[6] IFTTT Egg Minder Service. https://ifttt.com/eggminder.

[7] OAuth 2.0. https://oauth.net/2/.

[8] Philips Hue. http://www2.meethue.com/en-us/.

[9] Philips Hue API. https://www.developers.meethue.com/philips-hue-api.

[10] Stringify. https://www.stringify.com/.

[11] Tasker for Android. http://tasker.dinglisch.net/.

[12] Turn on Notifications in a Google Spreadsheet. https://support.google.com/docs/answer/91588.

[13] Waylay.io. http://www.waylay.io/index.html.

[14] WigWag Smart Home. https://www.wigwag.com/home.html.

[15] Zipato. https://www.zipato.com/.

[16] F. Cabitza, D. Fogli, R. Lanzilotti, and A. Piccinno. End-User Development in Ambient Intelligence: A User Study. In Proceedings of the 11th Biannual Conference on Italian SIGCHI Chapter, pages 146–153. ACM, 2015.

[17] L. De Russis and F. Corno. Homerules: A Tangible End-User Programming Interface for Smart Homes. In Proceedings of the 33rd Annual ACM Conference Extended Abstracts on Human Factors in Computing Systems, pages 2109–2114. ACM, 2015.

[18] A. K. Dey, T. Sohn, S. Streng, and J. Kodama. iCAP: Interactive Prototyping of Context-Aware Applications. In International Conference on Pervasive Computing, pages 254–271. Springer, 2006.

[19] J. Huang and M. Cakmak. Supporting Mental Model Accuracy in Trigger-Action Programming. In Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing, pages 215–225. ACM, 2015.

[20] C.-J. M. Liang, B. F. Karlsson, N. D. Lane, F. Zhao, J. Zhang, Z. Pan, Z. Li, and Y. Yu. SIFT: Building an Internet of Safe Things. In Proceedings of the 14th International Conference on Information Processing in Sensor Networks, pages 298–309. ACM, 2015.

[21] S. Mennicken, J. Vermeulen, and E. M. Huang. From Today’s Augmented Houses to Tomorrow’s Smart Homes: New Directions for Home Automation Research.