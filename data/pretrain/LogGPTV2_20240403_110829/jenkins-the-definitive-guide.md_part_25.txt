org.apache.maven.plugins
maven-checkstyle-plugin
2.4
${sonar.url}/rules_configuration/export/java/My_Rules/checkstyle.xml
Now, running mvn checkstyle:checkstyle or mvn site will analyse your source code and
generate XML reports that Jenkins can use.
231
Note that in the last example, we used a Checkstyle ruleset that we have uploaded to a Sonar server
(defined by the ${sonar.url} property). This strategy makes it easy to use the same set of Checkstyle
rules for Eclipse, Maven, Jenkins, and Sonar.
Recent versions of Gradle also offer some integrated Checkstyle support. You can set up Checkstyle
for your builds as shown here:
apply plugin: 'code-quality'
This will use the checkstyle ruleset in config/checkstyle/checkstyle.xml by default. You can
override this with the checkstyleConfigFileName property: at the time of writing, however, you
can’t get the Gradle code quality plugin to obtain the Checkstyle rules from a URL.
You can generate the Checkstyle reports here by running gradle checkstyleMain or gradle
check.
9.3.2. PMD/CPD
PMD3 is another popular static analysis tool. It focuses on potential coding problems such as unused
or suboptimal code, code size and complexity, and good coding practices. Some typical rules include
“Empty If Statement,” “Broken Null Check,” “Avoid Deeply Nested If Statements,” “Switch Statements
Should Have Default,” and “Logger Is Not Static Final.” There is a fair amount of overlap with some
of the Checkstyle rules, though PMD does have some more technical rules, and more specialized ones
such as rules related to JSF and Android.
PMD also comes with CPD, a robust open source detector of duplicated and near-duplicated code.
PMD is a little less flexible than Checkstyle, though you can still pick and choose the rules you want
to use in Eclipse, and then export them as an XML file (see Figure 9.2, “Configuring PMD rules in
Eclipse”). You can then import this rule set into other Eclipse projects, into Sonar, or use it in your Ant
or Maven builds.
3 http://pmd.sourceforge.net
232
Figure 9.2. Configuring PMD rules in Eclipse
PMD comes with an Ant task that you can use to generate the PMD and CPD reports. First, though, you
need to define these tasks, as shown in the following example:
Next, you can generate the PMD XML report by invoking the PMD task as illustrated here:
233
And, to generate the CPD XML report, you could do something like this:
You can place this XML ruleset in your project classpath (for example, in src/main/resources for
a Maven project), or in a separate module (if you want to share the configuration between projects).
An example of how to configure Maven 2 to generate PMD and CPD reports using an exported XML
ruleset as shown here:
org.apache.maven.plugins
maven-pmd-plugin
2.5
1.6
true
xml
/pmd-rules.xml
20
true
If you are using Maven 3, you would place the plugin definition in the 
configuration section. This example also shows how to use a ruleset in another dependency (in this case
the pmd-rules.jar file):
...
...
...
org.apache.maven.plugins
maven-site-plugin
3.0-beta-2
org.apache.maven.plugins
234
maven-pmd-plugin
2.5
1.6
true
xml
/pmd-rules.xml
50
true
com.wakaleo.code-quality
pmd-rules
1.0.1
Now, you can run either mvn site or mvn pmd:pmd pmd:cpd to generate the PMD and CPD reports.
Unfortunately there is currently no built-in Gradle support for PMD or CPD, so you have to fall back
on invoking the PMD Ant plugin directly, as shown here:
configurations {
pmdConf
}
dependencies {
pmdConf 'pmd:pmd:4.2.5'
}
task pmd 
236
Then, to run FindBugs, you could set up a “findbugs” target as shown in the following example. Note
that FindBugs runs against your application byte-code, not your source code, so you need to compile
your source code first:
If you are using Maven 2, you don’t need to keep a local copy of the FindBugs installation. You just
need to configure FindBugs in the reporting section as shown here:
org.codehaus.mojo
findbugs-maven-plugin
2.3.1
Max
true
Or for a Maven 3 project:
...
...
...
org.apache.maven.plugins
maven-site-plugin
3.0-beta-2
org.codehaus.mojo
findbugs-maven-plugin
2.3.1
Max
true
237
In both cases, you can generate the XML reports by running mvn site or mvn findbugs:findbugs.
The XML reports will be placed in the target directory.
At the time of writing there is no special support for FindBugs in Gradle, so you need to invoke the
FindBugs Ant plugin.
9.3.4. CodeNarc
CodeNarc is a static analysis tool for Groovy code, similar to PMD for Java. It checks Groovy source