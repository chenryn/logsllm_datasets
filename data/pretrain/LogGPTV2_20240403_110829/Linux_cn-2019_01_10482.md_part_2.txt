| Address | Mnemonic | Bit Pattern | Octal Equivalent |
| --- | --- | --- | --- |
| 0 | LDA | 00 111 010 | 0 7 2 |
| 1 | (address) | 10 000 000 | 2 0 0 |
| 2 | (address) | 00 000 000 | 0 0 0 |
| 3 | MOV B, A | 01 000 111 | 1 0 7 |
| 4 | LDA | 00 111 010 | 0 7 2 |
| 5 | (address) | 10 000 001 | 2 0 1 |
| 6 | (address) | 00 000 000 | 0 0 0 |
| 7 | ADD B | 10 000 000 | 2 0 0 |
| 8 | STA | 00 110 010 | 0 6 2 |
| 9 | (address) | 10 000 010 | 2 0 2 |
| 10 | (address) | 00 000 000 | 0 0 0 |
| 11 | JMP | 11 000 011 | 3 0 3 |
| 12 | (address) | 00 000 000 | 0 0 0 |
| 13 | (address) | 00 000 000 | 0 0 0 |
如果你通过开关来将上表的这些值输入到 Altair，最终会得到一个程序，它会读取内存 128 中的值，并将其与 129 中的值相加，最终将其保存至 130 中。伴随每条取一个地址的指令的地址，它们最开始会给出最低有效位，这便是第二个字节总会被清零的原因了（没有高于 255 的地址）。在输入这个程序并在 128 和 129 中输入了一些值之后，你可以向下短暂推动 “RUN” ，之后再将它推到 “STOP” 位置。因为程序循环执行，以一秒内执行上千次的速度反复地添加并保存那些值。并且最后得到的值总是相同的，如果你停止该程序并查看 130 的内容，你应该能找到正确答案。
我不知道普通的 Altair 用户是否使用过汇编程序，不过 z80pack 包括了一个：`z80asm`，意思是 适用于 Z80 的汇编程序   Z80 assembly ，所以它使用了一组不同的助记符。不过因为 Z80 是被设计来兼容为 Intel 8080 写的软件的，所以即使助记符不一样，它们的操作码也是相同的。你可以直接将 `z80asm` 汇编码装载进 Altair：
```
        ORG  0000H
START:  LD   A,(80H)   ;Load from address 128.
        LD   B,A       ;Move loaded value from accumulator (A) to reg B.
        LD   A,(81H)   ;Load from address 129.
        ADD  A,B       ;Add A and B.
        LD   (82H),A   ;Store A at address 130.
        JP   START     ;Jump to start.
```
编译之后，你可以调用汇编程序来将其转换为 Intel HEX 文件：
```
$ ./z80asm -fh -oadd.hex add.asm
```
我们用带有 `h` 参数的 `-f` 标识来定义输出的 HEX 文件。你可以用 `-x` 标识来传递 HEX 文件，从而使得 Altair 能够加载该程序：
```
$ ./altairsim -x add.hex
```
这会在内存中自动设置前 14 个字，就和你通过开关手动输入这些值一样。你可以直接使用 “RUN” 按钮来替代以前那些繁琐的步骤，这是如此的简单！
我不觉得有很多 Altair 用户以这种方式来编写软件。Altair BASIC 发布后，使得 BASIC 成为了 Altair 编程最简单的方法。z80pack 同时也包括了一些不同版本 Altair BASIC 的 HEX 文件；在模拟器中，你可以用这个方式加载 4.0 版本的 4K BASIC：
```
$ ./altairsim -x basic4k40.hex
```
当你开启模拟器并按下 “RUN” 按钮之后，你就会看到 BASIC 开始执行了，同时它会在终端中与你交互。它首先会提示你输入你的内存可用量，我们输入 4000 字节。随后，在显示 “OK” 提示符之前，它会问你几个问题，Gates 和 Allen 用这个“OK”来代替标准的 “READY” 并以此节省内存。在这之后，你便可以使用 BASIC 了：
```
OK
PRINT 3 + 4
 7
```
虽然运行 BASIC 只有 4kb 的内存并没有给你足够的空间，但你可以看到它是如何从使用前面板迈出了重要的一步。
很显然，Altair 远不及如今的家用电脑和笔记本电脑，并且比它晚十多年发布的 Mac 电脑看上去也是对这个简朴的 Altair 电脑的巨大飞跃。但是对第一批购买并亲手组装了 Altair 的《大众电子》的读者们来说，Altair 才是他们拥有的第一个真正的全功能电脑，而这一切只用了 400 美金低价和一半的书柜空间。对那时只能用 [一叠卡片](/article-10382-1.html) 或一卷磁带来与计算机交互的人们来说，Altair 是个令人眼前一亮的玩意。这之后的微型计算机基本都是在对 Altair 改进，使得它更易用。从某种意义上来说，它们只是更复杂的 Altair。Altair，一个野兽派的极简作品，却为之后的许多微型计算机打下了铺垫。
如果你觉得这篇文章写的不错，你可以在推特上关注 [@TwoBitHistory](https://twitter.com/TwoBitHistory) 或订阅 [RSS feed](https://twobithistory.org/feed.xml) 来获得我们文章的更新提醒。文章每两周就会更新一次！
---
1. Paul E. Ceruzzi, A History of Modern Computing (Cambridge, Mass: MIT Press, 2003), 226. [↩](#fnref1)
2. “Mark-8 Minicomputer,” Byran’s Old Computers, accessed July 21, 2018, . [↩](#fnref2)
3. Paul E. Ceruzzi, A History of Modern Computing (Cambridge, Mass: MIT Press, 2003), 226. [↩](#fnref3)
---
via: 
作者：[Sinclair Target](https://twobithistory.org) 选题：[lujun9972](https://github.com/lujun9972) 译者：[zhs852](https://github.com/zhs852) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出