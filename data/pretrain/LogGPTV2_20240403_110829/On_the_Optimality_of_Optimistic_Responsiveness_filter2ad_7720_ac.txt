do not equivocate and one chain certificate extends the other, we
select higher of the two.
v (Bℓ) and C1/2
v′ (Bk′),C1/2
v′ (Bℓ′)), we say CC  3n/4 votes for Bk in view v. Note that a re-
sponsive commit doesn’t depend on the commit-timer and ∆, and
a replica can commit at the actual speed of the network (δ). When
a replica’s commit-timerv,k for Bk expires in view v, the replica
synchronously commits Bk and all its ancestors. When a replica
commits Bk, it aborts commit-timers for all its ancestors.
The commit step is non-blocking and it does not affect the critical
path of progress. The leader can make a proposal for the next block
as soon as it receives a certificate for the previous block independent
of whether replicas have committed blocks for previous heights.
Note that if an honest replica commits a block Bk in view v
using one of the rules, it is not necessary that all honest replicas
commit Bk in view v using the same rule, or commit Bk at all. Some
Byzantine replicas may decide to send votes to only a few honest
replicas causing some honest replicas to commit using a responsive
rule whereas some others using a synchronous rule. A Byzantine
leader could send an equivocating block to some honest replicas
and prevent them from committing. The protocol ensures safety
despite all inconsistencies introduced by Byzantine replicas.
Blame and quit view. A view-change is triggered when repli-
cas observe lack of progress or an equivocating proposal from the
current leader. If an honest replica learns an equivocation, it broad-
casts ⟨blame, v⟩r message along with the equivocating proposals
and quits view v. The equivocating proposals serve as a proof of
misbehavior and all honest replicas blame the leader to trigger a
view-change. To ensure progress, the leader is expected to propose
at least one block every 2∆ time that trigger the replica’s vote. Oth-
erwise, replicas blame the current leader. Replicas quit view v when
they receive f +1 blame messages, detect equivocation. On quitting
view v, replica r broadcasts ⟨quit-view, v, CC⟩r where CC is the
highest ranked chain certificate known to r.
We now provide some intuition on why either of these commit
rules are safe within a view. We discuss safety across views in the
subsequent section.
Why does a responsive commit ensure safety within a view?
Consider an honest replica r that responsively commits a block Bk
at time t. This is because it received ⌊3n/4⌋ + 1 votes for Bk by time
t and it did not observe any equivocation until then. It is easy to see
that if there exists ⌊3n/4⌋ + 1 votes for Bk, no other equivocating
block B′
k′ at any height k′ can be committed responsively due to a
simple quorum intersection argument. Under a minority corruption,
any two quorums of size ⌊3n/4⌋ + 1 intersect in f + 1 replicas out
of which at least one replica is honest. This honest replica will not
vote for two equivocating blocks.
A synchronous commit of an equivocating block cannot happen
due to the following reason. Since replica r hasn’t received an
equivocation until time t, no replica has voted for an equivocating
proposal until time t − ∆. Hence, their synchronous 2∆ window for
committing an equivocating block ends at time > t + ∆. A commit
for Bk at time t implies that some honest replica must have voted
and forwarded the corresponding proposal before t and this will
arrive by time t + ∆ at all honest replicas. This will prevent any
other replica from committing an equivocating block. Observe that
a responsive commit does not imply that an equivocating block B′
k′
will not be certified; hence, during a view-change, we need to be
able to carefully extend the chain that contains a block that has
been committed by some other replica.
Why does a synchronous commit ensure safety within a view?
Consider an honest replica r that votes for a block Bk at time t and
commits at time t + 2∆ because it did not observe an equivocation
until then. This implies (i) all honest replicas have received Bk by
time t + ∆, and (ii) no honest replica has voted for an equivocating
block by time t + ∆. Due to the rules of voting, no honest replica
will vote for an equivocating block in this view after time t + ∆
ruling out an equivocating commit through either of the two rules.
4.2 View-change
The view-change protocol is responsible for replacing a possibly
faulty leader with a new leader to maintain liveness. In the process,
it needs to maintain safety of any commit that may have happened
in the previous views.
Status. After quitting view v, a replica waits for 2∆ time before
entering view v + 1. The 2∆ wait ensures that all honest replicas
receive a certificate for a block Bk before entering view v +1 if some
honest replica committed Bk in view v. This is critical to maintain
the safety of the commit in view v. The replica updates its chain
Let v be the view number and replica L be the leader of view v. While in view v, a replica r runs the following protocol:
commit-timerv,k.
(4) (Non-blocking) Blame and quit view.
(1) Propose. If replica r is the leader L, upon receiving Cv(Bk−1), it broadcasts ⟨propose, Bk , v, Cv(Bk−1)⟩L where Bk extends Bk−1.
(2) Vote. Upon receiving the first proposal ⟨propose, Bk , v, Cv(Bk−1)⟩L with a valid view v certificate for a block at height k − 1 (not
necessarily from L) where Bk extends Bk−1, if no leader equivocation is detected, forward the proposal to all replicas, broadcast a
vote in the form of ⟨vote, Bk , v⟩r , set commit-timerv,k to 2∆, and start counting down.
(3) (Non-blocking) Commit rules. Replica r commits block Bk using either of the following rules if r is still in view v:
(a) Responsive commit. On receiving ⌊3n/4⌋ + 1 votes for Bk, i.e., C3/4
(b) Synchronous commit. If commit-timerv,k reaches 0, commit Bk and all its ancestors.
- Blame if no progress. For p > 0, if fewer than p proposals trigger r’s votes in (2p + 4)∆ time in view v, broadcast ⟨blame, v⟩r .
- Quit view on f + 1 blame messages. Upon gathering f + 1 distinct ⟨blame, v⟩r messages, broadcast ⟨quit-view, v, CC⟩ along with
f + 1 blame messages where CC is the highest ranked chain certificate known to r. Abort all view v timers, and quit view v.
- Quit view on detecting equivocation. If leader equivocation is detected, broadcast ⟨quit-view, v, CC⟩r along with the equivocating
proposals, abort all view v timers, and quit view v.
v (Bk), commit Bk and all its ancestors immediately. Abort
Figure 1: Steady state protocol for optimal optimistic responsiveness with 2∆-synchronous latency and > 3n/4-sized quorum.
Let L and L’ be the leaders of view v and v + 1, respectively. Each replica r runs the following steps.
i) Status. Wait for 2∆ time. Until this time, if a replica receives any chain certificates, the replica updates its chain certificate CC to
the highest possible rank. Set lockv +1 to be the highest ranked chain certificate at the end of the 2∆ wait. Send ⟨status, lockv +1⟩r to
L′. Enter view v + 1.
ii) New-view. The new leader L′ waits for 2∆ time after entering view v + 1. L′ broadcasts ⟨new-view, v + 1, lockv +1⟩L′, where lockv +1
iii) First vote. Upon receiving the first ⟨new-view, v + 1, lock′⟩L′, if lockv +1 ≤ lock′, then broadcast ⟨new-view, v + 1, lock′⟩L′ and
is the highest ranked chain certificate known to L′ after this wait.
⟨vote, tip(lock′), v + 1⟩r .
Figure 2: View-change protocol for optimal optimistic responsiveness with 2∆-synchronous latency and > 3n/4-sized quorum.
certificate CC to the highest possible rank and sets lockv +1 to CC.
It then sends lockv +1 to the next leader L′ via a ⟨status, lockv +1⟩r .
New-view. Leader L′ waits 2∆ time after entering view v + 1 to
receive a status message from all honest replicas. Based on these
status messages, L′ picks the highest ranked chain certificate lock′.
It creates a new-view message ⟨new-view, v + 1, lock′⟩L′ and sends
it to all honest replicas. The highest ranked chain certificate across
all honest replicas at the end of view v helps an honest leader to
appropriately send a new-view message that will be voted upon by
all honest replicas and maintain the liveness of the protocol.
First vote. Upon receiving a ⟨new-view, v + 1, lock′⟩L′ message,
if the certified chain certificate lock′ has a rank no lower than r’s
locked chain certificate lockv +1, then it forwards the new-view
message to all replicas and broadcasts a vote for it.
Next, we provide some intuition on how the view-change proto-
col ensures safety across views and liveness.
Why do replicas lock on chains extending committed blocks
before entering the next view? In this protocol, we use locks to
ensure safety. The protocol guarantees that if an honest replica
commits a block (through either rules), then at the end of the view
all honest replicas will lock on a chain certificate that extends the
committed block. At the start of the next view, when the leader
sends a lock through the new-view message, by testing whether
this lock is higher than the lock stored locally, an honest replica
ensures that only committed blocks are extended.
What ensures that replicas lock on chains extending com-
mitted blocks before entering the next view? Suppose an hon-
est replica r responsively commits a block Bk in view v at time t.
Notice that no honest replica has entered view v + 1 by time t + ∆;
otherwise, replica r must have received blame certificate by time t
due to the 2∆ wait in the status step. In addition, replica r sends
a quit-view message containing the highest certified chain certifi-
cate CC such that tip(CC) extends Bk when quitting view v. CC
reaches all honest replicas by the time an honest replica enters view
v + 1. In the proof, we show there does not exist an equivocating
chain certificate CC′ that ranks higher than CC. Thus, all honest
replicas lock on CC or higher before entering view v + 1.
If replica r synchronously commits Bk in view v at time t, then
replica r voted for Bk at time t−2∆. It did not detect an equivocation
or blame certificate by time t. This implies all honest replicas will
vote for Bk at time t − ∆ and receive C1/2
v (Bk) by time t. As noted
earlier, there does not exist an equivocating certificate in view v
during synchronous commit. Hence, all honest replicas will lock
on CC containing C1/2
How does the protocol ensure liveness? The protocol ensures
liveness by allowing a new honest leader to always propose a block
that will be voted for by all honest replicas. All honest replicas send
their locked chain certificate to the next leader L′ at the start of the
new view in a status message. L′ could be lagging and enter v + 1
∆ time after other replicas. Thus, it waits 2∆ time to collect chain
certificates from all honest replicas. If L′ is honest, it extends the
v (Bk) before entering view v + 1.
highest ranked chain certificate lock′. This suffices to ensure that
all honest replicas vote on its proposal, in turn, ensuring liveness
when the leader is honest. In the new view, as long as the leader
keeps proposing valid blocks, honest replicas will vote and keep
committing new blocks.
k′ in view v does not exist.
4.3 Safety and Liveness
We say a block Bk is committed directly in view v if an honest
replica successfully runs the responsive commit rule 3(a), or the
synchronous commit rule 3(b) on block Bk. Similarly, we say a block
Bk is committed indirectly if it is a result of directly committing a
block Bℓ (ℓ > k) that extends Bk but is not equal to Bk.
We say that a replica is in view v at time t if the replica executes
the Enter view v of Step i) in Figure 2 by time t and did not execute
any Quit view of Step 5 in Figure 1 for view v at time t or earlier.
Claim 7. If a block Bk is committed directly in view v using the re-
sponsive commit rule, then a responsive certificate for an equivocating
block B′
Proof. If replica r commits Bk due to the responsive commit rule in
view v, then r must have received ⌊3n/4⌋ + 1 votes, i.e., C3/4
v (Bk),
forming a quorum for Bk in view v. A simple quorum intersection
argument shows that a responsive certificate for equivocating block
B′
k′ cannot exist.
□
Claim 8. If a block Bk is committed directly in view v using the
responsive commit rule, then there does not exist a chain certificate
CC in view v, such that CC > (C3/4
v (Bk),⊥) where a block in CC
equivocates Bk .
Proof. By Claim 7, no equivocating block can have a responsive
block certificate. So all responsive block certificates must extend
Bk. Since we assume that CC > (C3/4
v (Bk),⊥) then it must be that
either CC is of the form (C3/4
v (Bk), C1/2
v (Bℓ)) and by definition Bℓ
extends Bk, or CC is of the form (C3/4
v (Bk′), C1/2
v (Bℓ′)) where Bk′
extends Bk and again by transitivity Bℓ′ must extend Bk.
□
k′ does not exist in view v.
Claim 9. If a block Bk is committed directly in view v using the
synchronous commit rule, then a block certificate for an equivocating
block B′
Proof. Suppose replica r directly commits block Bk at time t using
the synchronous commit rule. So replica r voted and forwarded
the proposal for Bk at time t − 2∆ and its commit-timerv,k ex-
pired without detecting equivocation. By synchrony assumption,
all replicas receive the forwarded proposal for Bk by time t − ∆.
Since they do not vote for equivocating blocks, they will not vote
for B′
k′ received at time > t − ∆. Moreover, no honest replica must
have voted for an equivocating block at time ≤ t − ∆. Otherwise,
replica r would have received the equivocating proposal by time t
and it wouldn’t have committed. Since no honest replica votes for
an equivocating block, B′
□
k′ will not be certified.
Claim 10. If a block Bk is committed directly in view v using
the responsive commit rule, then all honest replicas receive a chain
certificate CC such that tip(CC) extends Bk before entering view
v + 1.
Proof. Suppose replica r directly commits block Bk at time t using
the responsive commit rule. No honest replica r′ has entered view
v + 1 at time ≤ t + ∆; otherwise replica r′ must have sent a blame
certificate at time ≤ t − ∆ (due to 2∆ wait in the status step) and r
must receive the blame certificate at time ≤ t and wouldn’t commit.
By Claim 8, there doesn’t exists a conflicting chain certificate