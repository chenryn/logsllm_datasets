代码中由于对切片做了很多索引操作，所以有各种各样的越界检测，我们抛开这部分代码来看，就可以看出 Username 和 Organization 的储存结构
—— 第一个字节存放字符串长度，后续跟字符数据。
根据 **前置知识** 中切片的相关知识，这里调用 math_big_nat_setBytes 的切片内容我们可以大致还原，主要就是根据切片的 len 和
cap 来确定，
切片左边的值：由来源切片的 cap 减去的内容
切片右边的值：由来源切片左边的值 + 新切片的 len
所以 main_a 和 main_b 的内容来源于新的切片内容分别是
    a[org_len + name_len + 2:org_len + name_len + 2 + 8]
    a[org_len + name_len + 10:org_len + name_len + 10 + 8]
这部分内容可以结合上面的伪代码结合得出，也就是 Username 和 Organization 后的 8 字节是 main_a 的内容，再后 8 字节是
main_b 的内容，最后 4 字节是 main_expire 的内容。
这里需要注意的是，main_a 和 main_b 的内容都是以字节的形式直接转换为大数类型，而 main_expire 是以 WORD 的形式读取（使用 2
字节），这两种读取方式的字节序不同。
####  数据表
综合上面所说的，可以得出以下表格来记录 KeyFile 文件内加密数据格式
偏移 | 内容 | 变量名 | 长度  
---|---|---|---  
0 | Username 长度 | name_len | 1  
1 | Username 内容 | str_name | name_len  
1 + name_len | Organization 长度 | org_len | 1  
2 + name_len | Organization 内容 | str_org | org_len  
2 + name_len + org_len | 内容 A | main_a | 8  
10 + name_len + org_len | 内容 B | main_b | 8  
18 + name_len + org_len | 过期时间 | main_expire | 2  
###  验证逻辑
####  约束条件
了解了程序如何解析 KeyFile 后，接下来才是本文最关键的地方，也就是程序的验证方法。
首先会把 main_a 和 main_b 的内容相加，然后与
13417336609348053335（0xba33f48ee008e957）进行比对，如果相同则进入后续的判定，这就是对 a 和 b
之间关系的一个约束。
####  初始化大数
接下来又对三个大数进行了初始化，我把这几个常量去 Google 搜索了一下，发现 main_p 的值是在 GF(p)
上的椭圆曲线中常用的一种取值，这对于我们了解接下来的代码的大致内容有所帮助。
这样根据常量来猜测程序意义的方法也是常用的，这里就是借助了椭圆曲线中常见的 p。
####  验证代码
最终的检测代码就是判断题目 public_key 是否在椭圆曲线（y^2 = x^3 + ax + b）上，其中 a 和 b
是用户可控的值，我们现在有一个在椭圆曲线上的点 生成元 G ，那么我们就可以根据这个 G 点的值和 a + b 的约束来反推 a 和 b 的值。
    (gy^2) % p                                      =   (gx^3 + a * gx + b) % p
    (gy^2 - gx^3) % p                               =   (a * gx + b) % p
    (gy^2 - gx^3 - (a + b)) % p                     =   (a * (gx - 1)) % p
    (a * gx + b) % p - ((a + b) % p)                = (a * (gx - 1)) % p
    ((a * gx + b) % p - ((a + b) * inv(gx - 1)) % p = a % p
推导过程只是我粗浅的理解，所以可能不是很规范，但是表明了如何推出 a 的值，有了 a 的值后，我们直接相减就可以计算得到 b 的值。
###  注册机编写
通过上述的逻辑和整理，我们可以快速的编写出一个 Keygen，我的代码如下
    import base64
    import gmpy2
    from Crypto.Util.number import *
    def calc_ab():
        gx = 0xf20553f3b02d1cad6aa8f895cc331a84b78f9bded26ecd9170662d3251d8d8a2
        gy = 0xa5c2e0fca8853a37f651726d719dd734421d0e01adf23c12c921e9060bc4c832
        p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
        sum = 0xba33f48ee008e957  # a + b
        # y^2 = x^3 + ax + b
        p1 = (gy * gy) % p   # y^2
        p2 = (gx * gx * gx) % p  # x^3
        p3 = (p1 - p2) % p   # ax + b
        p4 = (p3 - sum) % p  # ax + b - (a + b) = a * (x - 1)
        inv = gmpy2.invert(gx - 1, p)
        a = (p4 * inv) % p
        b = (sum - a) % p
        return a, b
    def generate(Username, Organization, ExpireTime):
        if len(Username) >= 16:
            return ""
        if len(Organization) >= 16:
            return ""
        if ExpireTime > 0xffff:
            return ""
        reg_info = ""
        reg_info += chr(len(Username)) + Username
        reg_info += chr(len(Organization)) + Organization
        a, b = calc_ab()
        reg_info += long_to_bytes(a).rjust(8, '\x00') + long_to_bytes(b).rjust(8, '\x00')
        reg_info += long_to_bytes(ExpireTime).rjust(2, '\x00')[::-1]
        en_info = ''
        for i in reg_info:
            en_info += chr(ord(i) ^ 0xAA) + chr(ord(i) ^ 0x55)
        en_info = base64.b64encode(en_info)
        return '---BEGIN CERT---\n' + en_info + "\n----END CERT----"
    with open("C:\\reg.crt", "w") as f:
        f.write(generate('wjh', 'org', 8888))
接下来把 KeyFile 拖入程序，点击 Register，即可成功通过验证得到 Flag
可以发现 flag 的值其实就是 main_a 和 main_b 的 hex 编码后的值，这样可以保证 flag 的唯一性。
###  总结
在这之前其实也遇到过一些 Golang 的题目，但是因为 Golang
难以分析，所以这些题目的核心算法相对来说都比较简单，都是一些比较简单的逻辑问题。这道题虽然分析过程看似简单轻松，但是实际上我对其内涵的原理和程序的用法进行了深入的研究，消耗了大量的时间和精力。虽然本题最终展现的并不是一个
ECC 难题，但是在逆向分析的过程中，我也学习到了一些 ECC 的内涵和代码实现。希望各位师傅可以借此题来开篇学习 Golang 逆向和 ECC 算法。