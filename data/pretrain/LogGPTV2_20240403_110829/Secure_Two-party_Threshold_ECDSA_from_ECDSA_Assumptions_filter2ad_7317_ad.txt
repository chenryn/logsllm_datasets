nP-ECDSA protocol allows it to perform
setup for any threshold t such that t ≤ n. The only required
changes are the use of polynomials of the appropriate degree
(as in Shamir Secret Sharing), and the evaluation of the
consistency check in step 6 over contiguous threshold-sized
groups of parties. However, our signing protocol is not so
easily generalized, and therefore we leave general threshold
signing to future work.
B. Signing
Once the setup is complete, suppose two parties from the
set P (we will resume referring to them as Alice and Bob)
wish to sign. They can use Lagrange interpolation [50] to
construct additive shares t0
B of the secret key, but the signing
A
algorithm we have previously described requires multiplicative
shares. To account for this, we modify our signing algorithm
in the following intuitive way: originally, the second invocation
of πMul took skA/kA from Alice and skB/kB from Bob and
computed additive shares of the product
, t0
skA · skB
kA · kB
We replace this with two invocations of πMul that calculate
t0
kA · kB
A
and
t0
kA · kB
B
respectively. Alice and Bob can then locally sum their outputs
from these two multiplications to yield shares of
t0
A + t0
kA · kB
B
=
sk
k
987
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
(cid:8)
(cid:9)
π2P-Sign
Protocol 4. 2-of-n Signing
This protocol is parameterized identically to Protocol 1, except
that Alice and Bob provide Shamir-shares p(A), p(B) of sk
as input, rather than multiplicative shares.
Key Share Reconstruction:
nP-ECDSA
:
1) Alice locally calculates the correct Lagrange coefﬁcient
λA,B for Shamir-reconstruction with Bob. Bob likewise
calculates λB,A. They then use their respective points
p(A), p(B) on the polynomial p to calculate additive
shares of the secret key
..= λA,B · p(A)
..= λB,A · p(B)
t0
A
t0
B
Multiplication and Instance Key Exchange:
2) Bob chooses his secret instance key, kB ← Zq, and Alice
← Zq. Bob computes
chooses her instance key seed, k(cid:3)
..= kB · G
DB
and sends DB to Alice.
A
3) Alice computes
A
· DB
R(cid:3) ..= k(cid:3)
..= H(R(cid:3)
kA
R ..= kA · DB
) + k(cid:3)
A
4) Alice chooses a pad φ ← Zq, and then Alice and Bob
run the πMul subprotocol with inputs φ + 1/kA and 1/kB
respectively, and receive shares t1
B of their padded
joint inverse instance key.
A and t1
5) Alice and Bob run the πMul subprotocol with inputs
t0
, t2a
B
A
of Alice’s secret key share over their joint instance key
/kA and 1/kB respectively. They receive shares t2a
A
t2a
A + t2a
B =
t0
kA · kB
A
6) Alice and Bob run the πMul subprotocol with inputs 1/kA
B of
, t2b
and t0
B
Bob’s secret key share over their joint instance key
/kB respectively. They receive shares t2b
A
t2b
A + t2b
B =
t0
kA · kB
B
7) Alice and Bob merge their respective shares
B + t2b
A + t2b
..= t2a
..= t2a
t2
B
t2
A
A
B
8) Alice transmits R(cid:3) to Bob, who computes
) · DB + R(cid:3)
For both Alice and Bob let (rx, ry) = R.
Consistency Check, Signature, and Veriﬁcation:
R ..= H(R(cid:3)
(cid:9)
πSign
2P-ECDSA
(cid:8)
As in Protocol 1
VI. MULTIPLICATION WITH OT EXTENSIONS
The Bulk of both the complexity and the practical cost of
our scheme arises from the OT-extension protocols which we
use to perform multiplication. We augment Simplest OT [33]
with a veriﬁcation procedure and refer to the new primitive as
988
Veriﬁed Simplest OT (VSOT). VSOT is used as the basis for
a lightly optimized instantiation of the KOS [34] OT-extension
protocol, which is used in turn to build the OT-multiplication
primitive required by our main signing protocol.
If we did not desire simulation-based malicious security,
then it would be sufﬁcient to use the Simplest OT scheme
without modiﬁcation. In composing the protocol to build a
larger simulation-sound malicious protocol however, there is
a complication. The security proof relies upon the fact that
the protocol’s hash queries are modeled as calls to a Random
Oracle, and uses those queries to extract the receiver’s inputs.
However, the queries need not occur before the receiver has sent
its last message, and so there is no guarantee that a malicious
receiver will actually query the oracle. When Simplest OT
is composed, it may be the case that the receiver’s inputs
are required for simulation before they are required by the
receiver itself, in which case the protocol will be unsimulatable.
This ﬂaw has recently been noticed by a number of authors,
including Byali et al. [51], who discuss it in more detail, and it
seems to affect other OT protocols as well [35], [52]. Barreto
et al. [52] propose to solve the problem by adding a public-key
veriﬁcation process in the Random Oracle model. Rather than
using expensive public-key operations, however, we specify
that the receiver must prove knowledge of its output using
only symmetric-key operations, ensuring that it does in fact
hold that output, and therefore that its input is extractable.
As a consequence, our protocol is able to realize only an OT
functionality (FSF-OT) that allows for selective failure by the
sender, but we show that this is sufﬁcient for our purposes.
A. Veriﬁed Simplest OT
We begin by describing the VSOT protocol. Because Alice
and Bob participate in this protocol with their roles reversed,
relative to the usual arrangement, we refer to the participants
simply as the sender and receiver in this section. The protocol
comprises four phases. In the ﬁrst, the sender generates a
private/public key pair, and sends the public key to the receiver.
In the second phase, the receiver encodes its choice bit and
the sender generates two random pads based upon the encoded
choice bit in such a way that the receiver can only recover
one. The third phase is a veriﬁcation, which is necessary to
ensure that the protocol is simulatable. Finally, the pads are
used by the sender to mask its messages for transmission to the
receiver in the fourth phase. This protocol realizes the FSF-OT
functionality, which is given as Functionality 3 in Appendix A.
Protocol 5. Veriﬁed Simplest OT (πVSOT):
This protocol is parameterized by the Elliptic curve (G, G, q),
and symmetric security parameter κ = |q|, and a hash function
H : {0, 1}∗ (cid:6)→ Zq. It relies upon the F RDL
ZK functionality. It
takes as input a choice bit ω ∈ {0, 1} from the receiver, and
two messages α0, α1 ∈ Zq from the sender. It outputs one
message αω ∈ Zq to the receiver, and nothing to the sender.
Public Key:
1) The sender samples b ← Zq and computes B ..= b · G.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
2) The sender submits (B, b) to the F RDL
ZK functionality,
and the receiver receives B along with a bit indicating
whether the proof was sound. If it was not, the receiver
aborts.
Pad Transfer:
3) The receiver samples a ← Zq, and then computes its
encoded choice bit A and the pad ρω
A ..= a · G + ω · B
ρω ..= H (a · B)
and sends A to the sender.
4) The sender computes two pads
ρ0 ..= H (b · A)
ρ1 ..= H (b · (A − B))
Veriﬁcation:
5) The sender computes a challenge
)) ⊕ H(H(ρ1
and sends the challenge ξ to the receiver.
ξ ..= H(H(ρ0
))
6) The receiver computes a response
ρ(cid:3) ..= H(H(ρω
and sends ρ(cid:3) to the sender.
)) ⊕ (ω · ξ)
7) The sender aborts if ρ(cid:3)
(cid:8)= H(H(ρ0)). Otherwise, it
opens its challenge by sending H(ρ0) and H(ρ1) to the
receiver.
8) The receiver aborts if the value of H(ρω) it received
from the sender does not match the one it calculated
itself, or if
ξ (cid:8)= H(H(ρ0
)) ⊕ H(H(ρ1
))
Message Transfer:
9) The sender pads its two messages α0, α1, and transmits
the padded messages ˆα0, ˆα1 to the receiver
ˆα0 ..= α0
ˆα1 ..= α1
+ ρ0
+ ρ1
10) The receiver removes the pad from its chosen message
αω
= ˆαω − ρω
For simplicity, we describe VSOT as requiring one complete
protocol evaluation per OT instance. However, if (public)
nonces are used in each of the hash invocations, then the
Public Key phase can be run once and the resulting (single)
public key B can be reused in as many Transfer and Veriﬁcation
phases as required without sacriﬁcing security. Further note
that if the messages transmitted by the sender are speciﬁed
to be uniform, then the sender can actually omit the Message
Transfer phase entirely and treat the pads ρ0, ρ1 as messages,
receiving them as output instead of supplying them as input.
Likewise, the receiver treats its one pad ρω as its output. This
effectively transforms VSOT into a Random OT protocol. We
989
make use of both of these optimizations in our implementation.
B. Correlated OT-extension with KOS
(cid:8)
Our multiplication protocol requires the use of a large number
of OT instances where the correlation between messages is
speciﬁed, but the messages must otherwise be random. There-
fore, rather than using VSOT directly, we layer a Correlated
OT-extension (COTe) protocol atop it. This is essentially an
instantiation the KOS protocol; thus we include a protocol
description here for completeness, but refer the reader to Keller
et al. [34] for a more thorough discussion. Being a Correlated
OT protocol, it allows the sender to deﬁne a correlation between
the two messages, but does not allow the sender to determine
the messages speciﬁcally. As with all OT-extension systems,
it is divided into a setup protocol, which uses some base OT
system to generate correlated secrets between the two parties,
and an extension protocol, which uses these correlated secrets
to efﬁciently perform additional OTs. These protocols realize
the Correlated Oblivious Transfer functionality F (cid:4)
COTe, which
is given as Functionality 4 in Appendix A.
Protocol 6. KOS Setup
This protocol is parameterized by the curve order q and the
symmetric security parameter κ = |q|. It depends upon the
OT Functionality FSF-OT, and takes no input from either party.
Alice receives as output a private OTe correlation ∇ ∈ {0, 1}κ
and a vectors of seeds s∇ ∈ Zκ
q , and Bob receives two vectors
of seeds s0 and s1 ∈ Zκ
q .
Setup:
1) Alice samples a correlation vector, ∇ ← {0, 1}κ.
2) For each bit ∇i of the correlation vector, Alice and Bob
access the FSF-OT functionality, with Alice acting as the
receiver and using ∇i for her choice bit and Bob acting
as the sender. Bob samples two random seed elements
i ← Zq and s1
i ← Zq and Alice receives as output a
s0
single seed element s∇i
3) Alice and Bob collate their individual seed elements
into vectors, s∇ and s0, s1 respectively, and take these
vectors as output.
πSetup
KOS
(cid:9)
:
.
i
(cid:8)
(cid:9)
:
KOS
πExtend
Protocol 7. KOS Extension
This protocol is parameterized by the OT batch size (cid:13), the OT
security parameter κOT, the curve order q, and the symmetric
security parameter κ = |q|. For notational convenience, let
(cid:13)(cid:3)
= (cid:13) + κOT. It makes use of the pseudo-random generator
q (cid:6)→ Z2(cid:2)(cid:2) , which expands its argument and then
PrgZ : Zκ
outputs the chunk of (cid:13)(cid:3) bits indexed by the value given as
a subscript, and it makes use use of the hash function H :
{0, 1}∗ (cid:6)→ Zq. The protocol also uses a fresh, public OT-
extension index, extid. Alice supplies a vector of input integers,
q, along with her private OTe correlation ∇ ∈ {0, 1}κ
α ∈ Z(cid:4)
and seed s∇ ∈ Zκ
q , which she received during the KOS setup
protocol. Bob supplies a vector of choice bits ω ∈ {0, 1}(cid:4)
along with his seeds s0 and s1 ∈ Zκ
q from the OT setup.
Alice and Bob receive tA and tB ∈ Z(cid:4)
q as output.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
Extension:
1) Bob chooses γext ← {0, 1}κOT and collates
2) Bob computes two vectors of PRG expansions of his
OT-extension seeds
v0 ..=
w ..= ω(cid:12)γext
(cid:12)
(cid:11)
(cid:12)
(cid:11)
Prgextid (s0
i )
Prgextid (s1
i )
v1 ..=
(cid:11)
i∈[1,κ]
i∈[1,κ]
(cid:12)
)
i∈[1,κ]
and Alice computes a vector of expansions of her
correlated seed
v∇ ..=
Prgextid (s∇i
3) Bob collates the vector ψ ∈ Z(cid:4)(cid:2)
i
q , which is the transpose
of v0. That is, the ﬁrst element of ψ is the concatenation
of the ﬁrst bits of all of the elements of v0, and so on.
More formally if we deﬁne a matrix
V ∈ {0, 1}κ×(cid:4)(cid:2)
then the relationship is given by
4) Bob computes the matrix
= Bits(v0
i ) ∀i ∈ [1, κ]
Vi
Vj = Bits(ψj) ∀j ∈ [1, (cid:13)(cid:3)
]
(cid:11)
(cid:12)
u ..=