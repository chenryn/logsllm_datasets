|                                  | 可使用别名而不是实际的单元名称。 |
+----------------------------------+----------------------------------+
| `RequiredBy`{.literal}           | 依赖于这个单                     |
|                                  | 元的单元列表。当启用此单元时，在 |
|                                  | `RequiredBy`{.literal}           |
|                                  | 中                               |
|                                  | 列出的单元会获得对这个单元的一个 |
|                                  | `Require`{.literal} 依赖项。     |
+----------------------------------+----------------------------------+
| `WantedBy`{.literal}             | 依赖于这个单元                   |
|                                  | 的单位列表。当启用这个单元时，在 |
|                                  | `WantedBy`{.literal}             |
|                                  | 中列出的单元会得到一个           |
|                                  | `Want`{.literal} 依赖项。        |
+----------------------------------+----------------------------------+
| `Also`{.literal}                 | 指定要随这                       |
|                                  | 个单元一起安装或卸载的单元列表。 |
+----------------------------------+----------------------------------+
| `DefaultInstance`{.literal}      | 仅限于实例化单元，这个选项指     |
|                                  | 定启用单位的默认实例。请参阅[使  |
|                                  | 用实例化单元](https://access.re  |
|                                  | dhat.com/documentation/en-us/red |
|                                  | _hat_enterprise_linux/9/html/con |
|                                  | figuring_basic_system_settings/a |
|                                  | ssembly_working-with-systemd-uni |
|                                  | t-files_configuring-basic-system |
|                                  | -settings#con_working-with-insta |
|                                  | ntiated-units_assembly_working-w |
|                                  | ith-systemd-unit-files){.link}。 |
+----------------------------------+----------------------------------+
| ::: {#assembly_working-          |                                  |
| with-systemd-unit-files_configur |                                  |
| ing-basic-system-settings.html#f |                                  |
| tn.idm140217689055472 .footnote} |                                  |
| [^\[a\]^](#assembly_work         |                                  |
| ing-with-systemd-unit-files_conf |                                  |
| iguring-basic-system-settings.ht |                                  |
| ml#idm140217689055472){.simpara} |                                  |
| 有关 \[Install\]                 |                                  |
| 部分可配置选项的完整列表，请查看 |                                  |
| `systemd.unit(5)`{.literal}      |                                  |
| 手册页。                         |                                  |
| :::                              |                                  |
+----------------------------------+----------------------------------+
:::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_creating-custom-unit-files_assembly_working-with-systemd-unit-files}创建自定义单元文件 {.title}
:::
从头开始创建单元文件有多种用例：您可以运行自定义守护进程，创建某些现有服务的第二个实例
，如[使用 sshd
服务的第二个实例来创建自定义单元文件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_creating-a-custom-unit-file-by-using-the-second-instance-of-the-sshd-service_assembly_working-with-systemd-unit-files){.link}。
另一方面，如果您只想修改或扩展现有单元的行为，请使用
[修改现有单元文件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_modifying-existing-unit-files_assembly_working-with-systemd-unit-files){.link}
中的说明。
::: title
**流程**
:::
以下流程描述了创建自定义服务的一般过程：
::: orderedlist
1.  使用自定义服务准备可执行文件。这可以是自定义创建的脚本，也可以是软件供应商提供的可执行文件。如果需要，准备
    PID 文件来保存自定义服务主要进程的恒定
    PID。也可以包含环境文件来存储该服务的 shell
    变量。确保源脚本可以执行（通过执行
    `chmod a+x`{.literal}）且不是交互式的。
2.  在 `/etc/systemd/system/`{.literal}
    目录中创建一个单元文件，并确定它有正确的文件权限。以
    `root`{.literal} 用户身份执行：
    ``` literallayout
    touch /etc/systemd/system/name.service
    chmod 664 /etc/systemd/system/name.service
    ```
    使用要创建的服务的名称替换
    [*name*]{.emphasis}。请注意，该文件不需要可执行。
3.  打开上一步中创建的 `name.service`{.literal}
    文件并添加服务配置选项。根据您要创建的服务类型，您可以选择多种选项，请参见[单元文件结构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#con_unit-file-structure_assembly_working-with-systemd-unit-files){.link}。
    以下是网络相关服务的单元配置示例：
    ``` literallayout
    [Unit]
    Description=service_description
    After=network.target
    [Service]
    ExecStart=path_to_executable
    Type=forking
    PIDFile=path_to_pidfile
    [Install]
    WantedBy=default.target
    ```
    其中：
    ::: itemizedlist
    -   [*service_description*]{.emphasis} 是一个说明性描述，在 journal
        日志文件和 `systemctl status`{.literal} 命令的输出中显示。
    -   `After`{.literal}
        设置可确保仅在网络运行时启动该服务。添加以空格分开的其它相关服务或目标列表。
    -   [*path_to_executable*]{.emphasis} 代表到实际可执行服务的路径。
    -   `type=forking`{.literal} 用于生成 fork
        系统调用的守护进程。该服务的主要进程使用
        [*path_to_pidfile*]{.emphasis} 中指定的 PID 创建。在 [重要
        \[Service\]
        部分选项](#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#tabl-systemd-Service_Sec_Options "表 16.2. 重要 [Service] 部分选项"){.link}查找其他启动类型。
    -   `WantedBy`{.literal}
        指出该服务应该启动的目标。将这些目标视为运行级别旧概念的替代。
    :::
4.  以 `root`{.literal} 用户身份执行以下命令来通知
    [**[systemd]{.application}**]{.strong} 已存在新的
    `name.service`{.literal} 文件：
    ``` literallayout
    systemctl daemon-reload
    systemctl start name.service
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在创建新的单元文件或修改现有单元文件后，始终运行
    `systemctl daemon-reload`{.literal}
    命令。否则，`systemctl start`{.literal} 或者
    `systemctl enable`{.literal} 命令可能会因为
    [**[systemd]{.application}**]{.strong}
    状态和磁盘中的实际服务单元文件不匹配而失败。请注意，对于有大量单元的系统来说，这需要很长时间，因为每个单元的状态必须在重新载入的过程中被序列化，然后再进行反序列化。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_creating-a-custom-unit-file-by-using-the-second-instance-of-the-sshd-service_assembly_working-with-systemd-unit-files}使用 sshd 服务的第二个实例创建自定义单元文件 {.title}
:::
系统管理员通常需要配置并运行多个服务实例。这可以通过创建原始服务配置文件的副本并修改某些参数来避免与服务的主实例冲突。以下流程演示了如何创建
`sshd`{.literal} 服务第二个实例。
::: orderedlist
**流程**
1.  创建第二个守护进程将使用的 `sshd_config`{.literal} 文件副本：
    ``` literallayout
    # cp /etc/ssh/sshd{,-second}_config
    ```
2.  编辑上一步中创建的 `sshd-second_config`{.literal}
    文件，为第二个守护进程分配不同的端口号和 PID 文件：
    ``` literallayout
    Port 22220
    PidFile /var/run/sshd-second.pid
    ```
    有关 `Port`{.literal} 和 `PidFile`{.literal} 选项的详情，请查看
    `sshd_config`{.literal}(5)手册页。请确定您选择的端口没有被其他服务使用。在运行该服务前，PID
    文件不一定存在，它会在服务启动时自动生成。
3.  为 `sshd`{.literal} 服务创建 systemd 单元文件副本：
    ``` literallayout
    # cp /usr/lib/systemd/system/sshd.service /etc/systemd/system/sshd-second.service
    ```
4.  按如下方式更改上一步中创建的 `sshd-second.service`{.literal}:
    ::: orderedlist
    1.  修改 `Description`{.literal} 选项：
        ``` literallayout
        Description=OpenSSH server second instance daemon
        ```
    2.  将 sshd.service 添加到 `After`{.literal}
        选项中指定的服务，因此第二实例仅在第一个实例启动后启动：
        ``` literallayout
        After=syslog.target network.target auditd.service sshd.service
        ```
    3.  sshd 的第一个实例包括密钥生成，因此删除
        [**ExecStartPre=/usr/sbin/sshd-keygen**]{.strong} 行。
    4.  为 `sshd`{.literal} 命令添加
        `-f /etc/ssh/sshd-second_config`{.literal}
        参数，以便使用其它配置文件：
        ``` literallayout
        ExecStart=/usr/sbin/sshd -D -f /etc/ssh/sshd-second_config $OPTIONS
        ```
    5.  在进行以上修改后，sshd-second.service 应该如下所示：
        ``` literallayout
        [Unit]
        Description=OpenSSH server second instance daemon
        After=syslog.target network.target auditd.service sshd.service
        [Service]
        EnvironmentFile=/etc/sysconfig/sshd
        ExecStart=/usr/sbin/sshd -D -f /etc/ssh/sshd-second_config $OPTIONS
        ExecReload=/bin/kill -HUP $MAINPID
        KillMode=process
        Restart=on-failure
        RestartSec=42s
        [Install]
        WantedBy=multi-user.target
        ```
    :::
5.  如果使用 SELinux，请将 sshd 的第二个实例的端口添加到 SSH 端口，否则
    sshd 的第二个实例将被拒绝绑定到端口：
    ``` literallayout
    # semanage port -a -t ssh_port_t -p tcp 22220
    ```
6.  启用 sshd-second.service，以便在引导时自动启动：
    ``` literallayout
    # systemctl enable sshd-second.service
    ```
7.  使用 `systemctl status`{.literal} 命令验证 sshd-second.service
    是否在运行。
8.  通过连接到该服务来验证是否正确启用了端口：
    ``` literallayout
    $ ssh -p 22220 user@server
    ```
    如果使用防火墙，请确定正确配置了防火墙以便允许到第二个 sshd
    实例的连接。
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_converting-sysv-init-scripts-to-unit-files_assembly_working-with-systemd-unit-files}将 SysV init 脚本转换为单元文件 {.title}
:::
在将 SysV init
脚本转换为单元文件前，请确保在其它位置还没有进行相关的转换。Red Hat
Enterprise Linux
中安装的所有核心服务都带有默认的单元文件，很多第三方软件包也是如此。
将初始化脚本转换成单元文件需要分析脚本并从中提取所需信息。基于这个数据，您可以创建一个单元文件。因为初始化脚本可以根据服务的类型有很大变化，您可能需要雇佣更多配置选项，而不是本章中所述。请注意，systemd
单元不再支持 init 脚本提供某种级别的定制。
转换所需要的大多数信息都会在脚本的标头中提供。以下示例显示了在 Red Hat
Enterprise Linux 6 中启动 `postfix`{.literal} 服务初始化脚本的打开部分：
``` literallayout
!/bin/bash # postfix Postfix Mail Transfer Agent # chkconfig: 2345 80 30 # description: Postfix is a Mail Transport Agent, which is the program that moves mail from one machine to another. # processname: master # pidfile: /var/spool/postfix/pid/master.pid # config: /etc/postfix/main.cf # config: /etc/postfix/master.cf  BEGIN INIT INFO # Provides: postfix MTA # Required-Start: $local_fs $network $remote_fs # Required-Stop: $local_fs $network $remote_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: start and stop postfix # Description: Postfix is a Mail Transport Agent, which is the program that moves mail from one machine to another. # END INIT INFO
```
在上面的例子中,只有以 [**\# chkconfig**]{.strong} 和 [**\#
description**]{.strong} 开头的行是强制的，因此您可能不会在不同的 init
文件中找到其他行。[**BEGIN INIT INFO** ]{.strong} 和 [**END INIT
INFO**]{.strong} 行之间连接的文本名为 [**Linux Standard Base (LSB)
header**]{.strong}。如果指定，LSB
标头包含定义服务描述、依赖项和默认运行级别的指令。下面是一个分析任务概述，旨在收集新单元文件所需的数据。postfix
init 脚本用作示例。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_finding-the-systemd-service-description_assembly_working-with-systemd-unit-files}查找 systemd 服务描述 {.title}
:::
您可以在以 [**#description**]{.strong}
开头的行中查找有关脚本的描述性信息。将此描述与单元文件 \[Unit\] 部分中的
`Description`{.literal} 选项中的服务名称一起使用。LSB 标头可能在
[**#Short-Description**]{.strong} 和 [**#Description**]{.strong}
行中包含类似的数据。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#ref_finding-the-systemd-service-dependencies_assembly_working-with-systemd-unit-files}查找 systemd 服务依赖项 {.title}
:::
LSB 标头可能包含一些在服务间组成相依性指令。大多数可以转换到 systemd
单元选项，请查看下表：
::: table
[]{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#tabl-systemd-Init_Deps}
**表 16.4. LSB 标头中的依赖项选项**
::: table-contents
  LSB 选项                                             描述                                                                                                                                                                                                                                 单元文件的对等
  ---------------------------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------------
  `Provides`{.literal}                                 指定服务的引导工具名称，可在其他初始化脚本中引用（使用 \"\$\" 前缀）。因为单元文件根据文件名指向其他单元，所以不再需要这个操作。                                                                                                     --
  `Required-Start`{.literal}                           包含所需服务的引导工具名称。这作为排序依赖关系转换，引导设备名称将被替换为它们所属的对应服务或目标的单元文件名称。例如，如果为 `postfix`{.literal}，则 \$network 的 Required-Start 依赖项转换为 network.target 上的 After 依赖项。   `After`{.literal}, `Before`{.literal}
  `Should-Start`{.literal}                             比 Required-Start 更弱的依赖项。Should-Start 依赖项失败不会影响服务的启动。                                                                                                                                                          `After`{.literal}, `Before`{.literal}
  `required-Stop`{.literal}, `Should-Stop`{.literal}   组成负依赖关系。                                                                                                                                                                                                                     `Conflicts`{.literal}
:::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_finding-default-targets-of-the-service_assembly_working-with-systemd-unit-files}查找服务的默认目标 {.title}
:::
以 [**#chkconfig**]{.strong}
开始的行包含三个数字值。最重要的是第一个代表启动该服务的默认运行级别的数字。将这些运行级别映射到等同的
systemd 目标。然后，在单元文件的 \[Install\] 部分中列出
`WantedBy`{.literal} 选项中的这些目标。例如： `postfix`{.literal}
之前在运行级别 2、3、4 和 5 中启动，它们转换为 multi-user.target 和
graphical.target。请注意，graphical.target 依赖于
multiuser.target，因此不需要同时指定它们。您可能会在 LSB 标头的
[**#Default-Start**]{.strong} 和 [**#Default-Stop**]{.strong}
行中找到默认和禁用运行级别的信息。
[**#chkconfig**]{.strong}
行里指定的其他两个值代表初始化脚本的启动和关闭优先级。如果
[**systemd**]{.strong}
加载初始化脚本，则对这些值进行解释，但没有等价的单元文件。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_finding-files-used-by-the-service_assembly_working-with-systemd-unit-files}查找该服务使用的文件 {.title}
:::
初始化脚本需要从专用目录中载入功能库，并允许导入配置、环境和 PID
文件。环境变量是在初始化脚本标头中以 [**#config**]{.strong}
开始的行指定的，它转换为 `EnvironmentFile`{.literal} 单元文件选项。在
[**#pidfile**]{.strong} init 脚本行中指定的 PID 文件使用
`PIDFile`{.literal} 选项导入到单元文件中。
未包含在初始化脚本标头中的关键信息是该服务可执行文件的路径，以及该服务可能需要的一些其他文件。在以前的
Red Hat Enterprise Linux 版本中，init 脚本使用 Bash case
语句定义默认操作的服务行为，如 [**start**]{.strong},
[**stop**]{.strong}, 或