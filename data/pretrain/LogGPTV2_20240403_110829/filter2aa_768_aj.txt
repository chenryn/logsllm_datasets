### PDB 文件中的 EXE 符号

PDB 文件对应的可执行文件（如 EXE、DLL、SYS 等）的信息由一个称为全局符号（Global Scope）的特殊符号表示。这个符号是文件中所有其他符号的根节点，也是唯一没有父符号的符号。通过调用 `IDiaSession` 接口的 `get_globalScope` 方法，可以获得该 EXE 符号的 `IDiaSymbol` 指针。表 25-12 展示了 `NameDeco.PDB` 文件（VC6 生成的调试版本符号文件）中 EXE 符号的属性值。

**表 25-12：`NameDeco.PDB` 文件的 `SymTagExe` 符号**

| 方法/属性          | 值                                                                                   |
|-------------------|-------------------------------------------------------------------------------------|
| get_age           | 0                                                                                   |
| get_guid          | {45DD54E4-0000-0000-0000-000000000000}                                               |
| get_isCTypes      | 0                                                                                   |
| get_isStripped    | 0                                                                                   |
| get_machineType   | 0                                                                                   |
| get_name          | NameDeco                                                                            |
| get_signature     | 1172133092                                                                          |
| get_symbolsFileName | C:\...\code\chap25\NameDeco\Debug\NameDeco.pdb                                       |

表的第一列是 `IDiaSymbol` 接口的方法名，代表了 EXE 符号的一种属性；第二列是通过调用这些方法读取到的属性值。以下是各个属性的解释：

- **Age**：表示 PDB 文件自创建以来的版本序号。PDB 文件支持增量更新，因此在未进行 Clean 或 Rebuild All 的情况下，每次修改后 Age 属性会递增 1。
- **GUID**：代表符号文件的全局 ID。每次 Rebuild All 时，链接器会生成一个新的 GUID。VC6 生成的符号文件不包含真正的 GUID，而是使用时间戳模拟生成。
- **isCTypes**：表示符号文件是否包含 C 语言类型。
- **isStripped**：表示是否从文件中剥离了私有符号。
- **MachineType**：表示符号文件及其对应可执行文件的 CPU 类型。枚举类型 `CV_CPU_TYPE_e` 定义了各种 CPU 类型，值为 0 表示英特尔 8080 CPU。
- **Name**：符号文件的主文件名（不含扩展名），通常是目标文件的名称。
- **Signature**：PDB 文件创建时的时间戳。Rebuild All 时会改变，但 Edit and Continue (EnC) 时不会改变。
- **symbolsFileName**：当前 PDB 文件的完整路径。

调试器通常使用 GUID 和 Age 属性来标识符号文件，并以此寻找与可执行文件匹配的符号文件。对于不包含 GUID 的符号文件，会使用 Signature 来生成一个 GUID。WinDBG 的符号管理器也使用这两个值的组合作为子目录名来存储同一个可执行文件的多个符号文件。

### Compiland 符号

Compiland 是编译过程中使用的“素材”文件，包括源程序文件、中间目标文件和依赖库文件。例如，驱动程序 `Beep.PDB` 中描述了 5 个 Compiland：

- `{Compiland}[1] obj\i386\beep.obj(0)`
- `{Compiland}[2] obj\i386\beep.res(0)`
- `{Compiland}[3] ntoskrnl.exe(0)`
- `{Compiland}[4] HAL.dll(0)`
- `{Compiland}[5] * Linker *(0)`

每个 Compiland 的属性可以通过 `IDiaSymbol` 接口的方法读取，表 25-13 列出了 `BaseClass.obj` 的 Compiland 符号属性。

**表 25-13：Compiland 符号示例**

| 方法/属性              | 值                                                                                       |
|-----------------------|-----------------------------------------------------------------------------------------|
| get_editAndContinueEnabled | 1                                                                                       |
| get_lexicalParentId    | 1224                                                                                    |
| get_libraryName        | c:\dig\dbg\author\code\chap25\HiWorld\debug\BaseClass.obj                                 |
| get_name              | .\BaseClass.cpp                                                                         |
| get_sourceFileName     | 0                                                                                       |

### CompilandEnv 符号

`SymTagCompilandEnv` 类型的符号用于描述其所属 Compiland 符号的环境信息。常见的 CompilandEnv 符号包括：

- **Obj**：目标文件信息。
- **Cwd**：当前工作目录。
- **Cl**：编译器驱动程序的文件名和路径。
- **Cmd**：编译选项。
- **Src**：源程序文件。
- **Pdb**：VCx0 符号文件。

### CompilandDetail 符号

`SymTagCompilandDetail` 类型的符号用于描述其所属 Compiland 符号的详细信息，包括编译器和链接器的名称和版本等。表 25-14 显示了 `BaseClass.obj` 的 CompilandDetail 符号属性。

**表 25-14：SymTagCompilandDetail 类型的符号示例**

| 方法/属性              | 值            | 简介                                      |
|-----------------------|--------------|------------------------------------------|
| get_backEndBuild      | 50727        | 编译器后端的 Build 号                    |
| get_backEndMajor      | 14           | 编译器后端的主版本号                      |
| get_backEndMinor      | 0            | 编译器后端的小版本号                      |
| get_compilerName      | Microsoft (R) Optimizing Compiler | 编译器名称                                |
| get_editAndContinueEnabled | 1          | 是否启用 EnC                              |
| get_frontEndBuild     | 50727        | 编译器前端的 Build 号                    |
| get_frontEndMajor     | 14           | 编译器前端的主版本号                      |
| get_frontEndMinor     | 0            | 编译器前端的小版本号                      |
| get_hasDebugInfo      | 1            | 是否包含调试信息                          |
| get_hasManagedCode    | 0            | 是否包含托管代码                          |
| get_hasSecurityChecks | 1            | 是否使用 /GS 编译                         |
| get_isCVTCIL          | 0            | 是否从公共中间语言（CIL）转化而来         |
| get_isDataAligned     | 1            | 用户定义数据类型（UDT）是否内存对齐       |
| get_isHotpatchable    | 0            | 是否使用 /hotpatch 编译                   |
| get_isMSILNetmodule   | 0            | 是否包含微软中间语言的 .Net 模块          |
| get_language          | CPP[1]       | 源程序语言，1 代表 C++                     |
| get_platform          | Pentium III[7] | 编译时选择的目标平台（CPU）                |

### 类型符号

#### SymTagBaseType

`SymTagBaseType` 符号用于描述程序语言的基本数据类型。`CVCONST.H` 中的 `BasicType` 枚举类型定义了基本类型的常量。

```c
enum BasicType {
    btNoType = 0, 
    btVoid = 1, 
    btChar = 2, 
    btWChar = 3, 
    btInt = 6, 
    btUInt = 7, 
    btFloat = 8, 
    btBCD = 9, 
    btBool = 10, 
    btLong = 13, 
    btULong = 14, 
    btCurrency = 25, 
    btDate = 26, 
    btVariant = 27, 
    btComplex = 28, 
    btBit = 29, 
    btBSTR = 30, 
    btHresult = 31
};
```

除了符号 ID 和类型外，每个 `SymBaseType` 符号还具有以下属性：

- **Base Type**：基本类型，值为 `BasicType` 枚举常量中的一个。
- **Length**：数据类型的长度。
- **lexicalParentId**：通常为所在符号文件的 EXE 符号的 ID。
- **UnalignedType**：该类型是否内存对齐。
- **ConstType**：声明该类型时是否将其声明为常数。
- **VolatileType**：声明该类型时是否附加了 `volatile` 关键字。

#### SymTagUDT

`SymTagUDT` 符号用于描述用户定义的数据类型（如结构、类和联合）。数组和枚举类型分别由 `SymTagArrayType` 和 `SymTagEnum` 描述。一个 `SymTagUDT` 符号通常有多个子符号，每个子符号描述它的一个成员或方法。表 25-15 列出了 `tagPOINT` 结构和 `CBaseClass` 类的 UDT 符号的各种属性值和简单说明。

**表 25-15：UDT 符号示例**

| 属性          | tagPOINT | CBaseClass |
|---------------|----------|------------|
| ...           | ...      | ...        |

希望这些优化后的文本能够更清晰地传达所需信息。如果有进一步的需求，请随时告知！