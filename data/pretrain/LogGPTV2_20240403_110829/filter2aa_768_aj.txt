来描述这个 PDB 文件所对应的可执行文件（EXE、DLL、SYS 等）的信息，它是文件内
所 有 其 他 符 号 的 祖 先 ， 也 是 唯 一 没 有 父 符 号 的 符 号 。 调 用 IDiaSession 接 口 的
get_globalScope 方 法 可 以 得 到 EXE 符 号 的 IDiaSymbol 指 针 。 表 25-12 显 示 了
NameDeco.PDB（VC6 产生的调试版本符号文件）文件的 EXE 符号的各个属性值。 
表 25-12  NameDeco.PDB 文件的 SymTagExe 符号 
方法/属性 
值 
get_age 
0 
get_guid 
{45DD54E4-0000-0000-0000-000000000000} 
get_isCTypes 
0 
get_isStripped 
0 
《软件调试》补编 
- 39 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
续表 
方法/属性 
值 
get_machineType 
0 
get_name 
NameDeco 
get_signature 
1172133092 
get_symbolsFileName 
C:\...\code\chap25\NameDeco\Debug\NameDeco.pdb 
表中第一列是 IDiaSymbol 接口的方法名，代表了 EXE 符号的一种属性，第二列是
通过调用这个方法读取到的属性值。以下是对各个属性的解释说明。 
年龄（Age）属性代表了这个 PDB 文件自创建以来的版本序号。因为 PDB 文件是支
持递增或部分修改的，所以如果没有做过 Clean 或者 Rebuild All，大多时候 VC 都是
在现有的 PDB 文件基础上做修改。另外，当我们在 VC 的集成环境中调试时，我们
可以对被调试的程序作一些小的改动然后继续调试（即所谓的 Edit and Continue，简
称 EnC），这时，VC 只是编译受影响的模块，并对 PDB 文件作局部更新。每次更新
PDB 后，Age 属性会被递增 1。 
GUID 属性用来代表一个符号文件的全局 ID。每创建一个新的 PDB 文件时（如 Rebuild 
All），链接器会生成一个新的 GUID 给该文件。因此同一个项目不同版本的 PDB 文件，
其 GUID 可能是不同的。VC6 产生的符号文件不包含真正的 GUID，所以返回的是利
用时间戳（Time Stamp）模拟生成的，其中的 45DD54E4 是下面的 Signature 值
1172133092 的十六进制。 
isCTypes 用来说明这个符号文件是否包含 C（语言）类型。 
isStripped 表示是否从这个文件剥离出了私有符号。 
MachineType 表示符号文件以及它对应的可执行文件的 CPU 类型。枚举类型
CV_CPU_TYPE_e 定义了各种 CPU 类型，0 表示英特尔的 8080 CPU。 
Name 属性是符号文件的主文件名（不含后缀），通常这也是符号文件所对应的目标文
件的名称。 
Signature 属性是 PDB 文件创建时的时间戳。因此它的稳定性与 GUID 属性是一致的，
EnC 时 不 会 改 变 ， 但 是 Rebuild All 时 会 改 变 。 使 用 Sig2Time 小 程 序
（code\chap25\Sig2Time）可以把 Signature 中的数值转换为时间，如 1172133092 对应
的时间是 2007 年 2 月 22 日 11:31:32。 
symbolsFileName 属性是当前 PDB 文件的完整路径。 
调试器通常使用 GUID 值和 Age 值共同来标识一个符号文件，并以此为依据来寻找与
一个可执行文件相匹配的符号文件。对于不包含 GUID 的符号文件会使用 Signature 来产
生一个 GUID。WinDBG 的符号管理器也是使用这两个值的组合作为子目录名来存储同一
个可执行文件的多个符号文件的。以 Beep.sys 为例，它的多个 PDB 文件是以如下规则存
放在多个子目录中的： 
beep.pdb\GUID+Age\beep.pdb 
例如，以下是两个版本的 Beep.PDB 的完整路径： 
D:\symbols\beep.pdb\65DC45B439164E4C9DEFF20E161DC74C1\beep.pdb  
D:\symbols\beep.pdb\380E3FD31\beep.pdb 
对于第一个，65DC45B439164E4C9DEFF20E161DC74C 来自于该符号文件的 GUID
值，紧跟其后的 1 是 Age 属性的值。第二个应该是较早的编译器产生的符号文件，380E3FD3
应该是 Signature 值，使用 Sig2Time 程序可以将其转换为时间：Thu Oct 21 02:18:59 1999。 
《软件调试》补编 
- 40 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
25.9.2  SymTagCompiland[2] 
Compiland 是编译方面的一个术语，用来泛指编译过程中所使用的用来产生目标文件
的各种“素材”文件。包括各种源程序文件（.c、cpp、.rc 等）、中间目标文件（.obj、.res
等）和依赖的库文件（.lib、.dll 等）。举例来说，以下是驱动程序 Beep.PDB 中所描述的 5
个 Compiland： 
 {Compiland}[1]obj\i386\beep.obj(0) 
 {Compiland}[2]obj\i386\beep.res(0) 
 {Compiland}[3]ntoskrnl.exe(0) 
 {Compiland}[4]HAL.dll(0) 
 {Compiland}[5]* Linker *(0) 
其中方括号中的数字是这个 Compiland 的 ID，圆扩号中的数字是这个 Compiland 的子
符号的数目，因为这是个 Free 版本的公开符号文件，所以这些 Compiland 都没有子符号
（扩号中都是 0）。表 25-13 列出了通过调用 IDiaSymbol 接口的方法（第 1 列）读取到的
Compiland 符号的属性。 
表 25-13  Compiland 符号示例 
方法/属性 
值 
get_editAndContinueEnabled 
1 
get_lexicalParentId 
1224 
get_libraryName 
c:\dig\dbg\author\code\chap25\HiWorld\debug\BaseClass.obj 
get_name 
.\BaseClass.cpp 
get_sourceFileName 
0 
因为调试符号是以关系数据库所惯用的表格形式存储的，所以从存储结构上来看，各
个符号之间都是并列（平行）关系。但是为了体现出符号之间的附属和关联关系，除了
EXE 符号外，其他每个符号都有一个父词条 ID（Lexical Parent ID）属性，用来标识这个
符号的词典编撰意义上的“父”符号。有了父词条 ID，本来平行存储的各个符号在逻辑
上便有了父子关系，形成逻辑上的树状结构，根节点是 EXE 符号，其下一代便是很多个
Compiland 符号，每个 Compiland 符号又有很多子符号（见图 25-12）。为了节约篇幅，下
文列出的符号属性中大多省略了父词条 ID 属性。 
从图 25-12 中可以看到，每个 Compiland 符号下又包含了很多个子符号，比如描述环
境信息的 SymTagCompilandEnv 符号，描述函数的函数符号等。 
图 25-12  PDB 符号的树形逻辑结构 
25.9.3  SymTagCompilandEnv[4] 
SymTagCompilandEnv 类型的符号用来描述它所属的 Compiland 符号的环境信息。比
《软件调试》补编 
- 41 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
如图 25-12 中的 BaseClass.obj 符号有 6 个 SymTagCompilandEnv 类型的子符号，分别描述
这个 Compiland 的某一方面信息。以下是常见 CompilandEnv 符号的名称、用途和典型值： 
Obj 环境串，目标文件信息。Obj 和 res 类型的 Compiland 通常有一个 obj 环境串，
Dll 类型的 Compiland 通常有很多个。比如 BaseClass.obj 有一个 obj 环境串，其值为目标
文件的全路径。 
Cwd 环境串，当前工作目录（Current Working Directory）。比如 BaseClass.obj 的 Cwd
环境串的值为 c:\...\chap25\HiWorld，即项目目录。 
Cl 环境串，编译器的推动器程序（Compiler Driver，参见 20.3.2 节）的文件名称和路
径，通常只有 C/C++源文件的 Compiland 才有这个子符号，比如 BaseClass.obj 的 Cl 环境
串为 C:\Program Files\Microsoft Visual Studio 8\VC\bin\cl.exe。 
Cmd 环境串，编译选项，即编译所属的 Compiland 时使用的参数，比如 BaseClass.obj
的 Cmd 环境串为 -Od -DWIN32 -D_DEBUG -D_WINDOWS -D_UNICODE -DUNICODE 
-Gm-EHs-EHc-RTC1-MDd-Yustdafx.h-Fpc:\...\chap25\HiWorld\Debug\HiWorld.pch-Foc:\...\cha
p25\HiWorld\Debug\-Fdc:\...\chap25\HiWorld\Debug\vc80.pdb-W3-c 
Src 环境串，源程序文件。如 BaseClass.obj 的 Src 环境串为.\BaseClass.cpp。 
Pdb 环境串，VCx0 符号文件。VCx0 符号文件是在 VC 集成环境中调试时所使用的符
号文件，x 是 VC 编译器的主版本号。如 BaseClass.obj 的 Pdb 环境串为 c:\dig\...\ 
Debug\vc80.pdb。 
CompilandEnv 符号通常没有子符号。 
25.9.4  SymCompilandDetail[3] 
SymTagCompilandDetail 类型的符号用来描述它所属的 Compiland 符号的详细信息，
包括相关的编译器和链接器名称版本等。表 25-14 显示了用来描述 BaseClass.obj 的
CompilandDetail 符号的各个属性。 
表 25-14  SymTagCompilandDetail 类型的符号示例 
方法/属性 
值 
简介 
get_backEndBuild 
50727 
编译器后端的 Build 号 
get_backEndMajor 
14 
编译器后端的主版本号 
get_backEndMinor 
0 
编译器后端的小版本号 
get_compilerName 
Microsoft (R) 
Optimizing 
Compiler 
编译器名称 
get_editAndContinueEnabled 
1 
是否启用 EnC 
get_frontEndBuild 
50727 
编译器前端的 Build 号 
get_frontEndMajor 
14 
编译器前端的主版本号 
get_frontEndMinor 
0 
编译器前端的小版本号 
get_hasDebugInfo 
1 
是否包含调试信息 
get_hasManagedCode 
0 
是否包含托管代码 
get_hasSecurityChecks 
1 
是否使用/GS 编译 
get_isCVTCIL 
0 
是否从公共中间语言（CIL）转化而来 
get_isDataAligned 
1 
用户定义数据类型（UDT）是否内存对齐 
get_isHotpatchable 
0 
是否使用/hotpatch 编译 
get_isMSILNetmodule 
0 
是否包含微软中间语言的.Net 模块 
get_language 
CPP[1] 
源程序语言，1 代表 C++ 
get_platform 
Pentium III[7] 
编译时选择的目标平台（CPU） 
对于 DLL 类型的 Compiland，它的 CompilandDetail 符号的语言属性为 LINK，
CompilerName 属性为链接器的名字，如： Microsoft (R) LINK。SymTagCompiland- Detail
《软件调试》补编 
- 42 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
类型的符号通常没有名称，也没有子符号。 
25.10  类型符号 
本节将介绍 PDB 文件中用于描述数据类型的各种符号。首先从描述基本数据类型的
SymTagBaseType 开始。 
25.10.1  SymTagBaseType[16] 
SymTagBaseType 符号用来描述程序语言定义的基本数据类型。CVCONST.H 中的
BasicType 枚举类型定义了用来表示基本类型的各个常量。 
enum BasicType{ btNoType = 0,   
btVoid = 1, 
btChar = 2, btWChar = 3, 
    btInt = 6, 
btUInt = 7, 
btFloat = 8, 
btBCD = 9, btBool = 10, 
    btLong = 13, 
btULong = 14, 
btCurrency = 25,  btDate = 26, 
    btVariant = 27, btComplex = 28, btBit = 29, btBSTR = 30, btHresult = 31}; 
除了符号 ID 和类型外，每个 SymBaseType 符号通常还有以下几种属性。 
Base Type：即基本类型，值为 BasicType 枚举常量中的一个。 
Length：数据类型的长度，例如 void 类型的长度为 0。  
父词条 ID（lexicalParentId）：通常为所在符号文件的 EXE 符号的 ID。 
内存对齐（UnalignedType）：该类型是否内存对齐。 
是否常量（ConstType）：即声明该类型时是否将其声明为常数（constant）。 
易变性（VolatileType）：即声明该类型时是否附加了 volatile 关键字。 
对于一种基本类型，符号文件中可能包含多个符号，对应不同的内存特征（const/ 
volatile）。使用 SymView 工具打开 HiWorld_RES.PDB，左侧选择 SymTag 页，然后选中
BaseType[16]条目，便可以看到这个文件中所包含的基本类型符号。使用这种方法也可以
观察其他类型的符号。 
25.10.2  SymTagUDT[11] 
SymTagUDT 符号用来描述用户（程序员）定义的数据类型（User Defined Type），包括
结构、类和联合。数组和枚举类型分别由 SymTagArrayType 和 SymTagEnum 来描述。 
一个 SymTagUDT 符号通常会有多个子符号，每个子符号描述它的一个成员或者方法，
SymTagUDT 符号本身用来描述 UDT 的概括性信息。表 25-15 列出了描述 tagPOINT 结构
和 CBaseClass 类的 UDT 符号的各种属性值和简单说明。 
表 23-15  UDT 符号示例 
属性 
tagPOINT 
CBaseClass 