capability to intercept an external connection attempt and forge a corresponding re-
3 The Slapper signature used in snort is the string “TERM=xterm”.
4 In fact, due to the strict conﬁnement requirement, even a dedicated worm testbed is not able to
support such study.
Virtual Playgrounds for Worm Behavior Investigation
17
sponse, it remains an open question whether such technique can survive the subsequent
counter-measures taken by the worms.
Another limitation is that current prototype is only applicable to Linux worms, even
though the design principles and concepts can be generally applied to build vGrounds
for Windows worms. One notable hard challenge in extending current vGround
implementation for Windows worms is to develop highly scalable system virtualization
and customization techniques for Windows systems. However, it is encouraging to
note that recent advances in system virtualization technologies such as the VMware
ESX server [13] and hardware virtualization support such as the Intel’s Vanderpool
technology [24] have shown great promises in addressing this challenge. Once these
technologies become available, they can be naturally leveraged to support Windows-
based vGrounds.
6 Related Work
Testbeds for Destructive Experiments. The DETER project [10] provides a shared
testbed to researchers to conduct a wide variety of security experiments. With a pool
of physical machines in a number of sites, the DETER testbed is able to provide
each researcher with a virtually dedicated experiment environment in an efﬁcient on-
demand fashion. In the current practice, the granularity of resource allocation is often
one physical node. The vGround software platform can be deployed in the DETER
testbed as a value-added worm experiment service. As a result, worm researchers will
beneﬁt not only from the testbed’s general services (e.g., topology generation, result
visualization), but also from the new features brought by vGround (i.e. easy recovery,
larger scale, and conﬁnement).
Netbed [50], Modelnet [47], and PlanetLab [7] are highly valuable and accessible
testbeds/environments for general networking and distributed system experiments.
On the other hand, the vGround platform is an enabling software system that can
potentially (“already” in the case of PlanetLab) be deployed in these testbeds to enhance
their support for destruction-oriented worm experiments. For example, PlanetLab and
Modelnet currently do not support worm experiments, especially when kernel-level
damages (e.g., kernel-level rootkit installation) are incurred.
The anti-virus industry has long been building worm testbeds (including
virtualization-based testbeds) for timely capture and analysis of worms. Such testbeds
are mainly for in-house exclusive use by highly skillful and specially trained experts.
As a result, wide deployability, infrastructure sharing, and user convenience are not
their primary design concerns. One of the pioneering industry testbeds is Internet-inna-
Box [48] originally built at IBM. It involves virtual machines and virtual networks,
both enabled by an “emulation package” that supports virtual Win9x environments. The
testbed is based on one or more physical machines, each with two physical network
connections - one dedicated to trafﬁc between the VMs. While sharing the same
principle of system and network virtualization, vGrounds do not require dedicated
network connections and administrator privileges. Also, the vGround platform imposes
lower requirement of user skills by performing automatic vGround generation and
deployment. Further, vGrounds support virtual routers and user-speciﬁed network
topology. However, vGround currently does not support Windows worms.
18
X. Jiang et al.
VM-Based Worm Investigation. Virtual machines provide an isolated virtualization
layer for running and observing untrusted services and applications. Among the notable
VM technologies are VMware [13], User-Mode Linux (UML) [30], Denali[49], and
Xen[26]. VM technologies have been heavily leveraged to study worms. In current
practice, various VM technologies including VMware [13] and User-Mode Linux
(UML) [30] have been actively deployed as honeypots to capture worms, especially
during the early stage of their propagation. To analyze a worm, VM-based technologies
have also be developed. One advanced VM-based forensic platform is ReVirt[31].
ReVirt enhances individual VMs with efﬁcient logging and replay capabilities for
intrusion analysis purpose, making it possible for a worm researcher to replay the
worm exploitation process in an instruction-by-instruction fashion. Finally, to study
how worms propagate, we have argued that only VMs are not enough, leading to our
development of new network virtualization techniques.
Virtual Networks. Recently, network virtualization attracts increasing research at-
tention. In [25], research efforts are called for to create “virtual testbeds” on top of
shared distributed infrastructures - the vGround platform is a step towards this vision.
Different virtual networks have been developed such as X-bone [45], VNET [43], and
VIOLIN [32]. Both X-bone and VNET create a “virtual Internet” which does not
hide the existence of the underlying physical hosts and their network connections. If
used in vGround, they would not be able to conﬁne worm trafﬁc within the virtual
Internet. VIOLIN is our previous effort in network virtualization and it does not provide
automatic virtual network generation and bootstrapping.
Honeypot Systems. We ﬁrst note that a vGround itself is not a honeypot system.
Recently, there have been signiﬁcant advances in honeypot systems and their ap-
plications [40, 29, 51]. For example, Honeyd [40] is a highly scalable and efﬁcient
framework for low-interaction virtual honeypots. The vGround platform and honeypot
systems are different in nature: Honeypot systems are connected to and interact with
the real Internet, while the vGround is an isolated virtual environment to replay worm
behavior. As a result, they perfectly complement each other. In fact, a promising
integration will be to use honeypot systems to “capture” real-world worms, and then
use vGrounds to run the captured worms in a realistic but isolated environment. Such
an integration has great potential in automatic capture and characterization of 0-day
worms.
7 Conclusion
The vGround platform enables impact-conﬁned and resource-efﬁcient experiments with
Internet worms. The main features of vGround are supported by a suite of virtualization-
based new techniques. Using real-world worms, we have demonstrated that vGrounds
are high-ﬁdelity conﬁned playgrounds to run worms and observe key aspects of their
behavior, including network space targeting, propagation pattern, exploitation steps,
and malicious payload. These results are critical to the development of worm detection
and defense mechanisms, which can also be tested in vGrounds. For worm researchers,
the vGround platform accommodates their iterative experiment workﬂows with great
Virtual Playgrounds for Worm Behavior Investigation
19
efﬁciency and convenience. The vGround platform makes a timely contribution to worm
detection and defense research.
Acknowledgments
We thank Aaron Walters, David Evans, Sonia Fahmy, Wenke Lee, Ninghui Li, Peng
Ning, and Yi-Min Wang for providing insightful comments on early versions of this
paper. The ﬁnal version of this paper beneﬁts from valuable suggestions from the
anonymous reviewers and the guidance of our shepherd, George Mohay. This work
was supported in part by NSF Grants SCI-0504261 and SCI-0438246, and a gift from
Microsoft Research. Some of this effort was also supported by the sponsors of CERIAS,
and that support is gratefully acknowledged.
References
[1] Bro. http://bro-ids.org.
[2] Internet Protocol V4 Address Space. http://www.iana.org/assignments/ipv4-address-space.
[3] Linux Ramen Worm.
http://service1.symantec.com/sarc/sarc.nsf/html/pf/linux.ramen.
worm.html.
[4] Linux/Lion Worms. http://www.sophos.com/virusinfo/analyses/linuxlion.html.
[5] Linux/Slapper Worms. http://www.sophos.com/virusinfo/analyses/linuxslappera.html.
[6] objdump. http://www.gnu.org/software/binutils/manual/html chapter/binutils 4.html.
[7] PlanetLab. http://www.planet-lab.org.
[8] Snort. http://www.snort.org.
[9] Tcpdump. http://www.tcpdump.org.
[10] The DETER Project. http://www.isi.edu/deter/.
[11] The Honeynet Project. http://www.honeynet.org.
[12] Virtual PC. http://www.microsoft.com/windows/virtualpc/default.mspx.
[13] VMware. http://www.vmware.com/.
[14] ISC Bind 8 Transaction Signatures Buffer Overﬂow Vulnerability.
http://www.securityfocus.com/bid/2302, 2001.
[15] Linux Adore Worms.
http://securityresponse.symantec.com/avcenter/venc/data /linux.adore.worm.html, 2001.
[16] Linux Lion Worms. http://www.whitehats.com/library/worms/lion/, 2001.
[17] Ramen Worm. http://www.sans.org/y2k/ramen.htm, Feb. 2001.
[18] CERT Advisory CA-2002-27 Apache/mod ssl Worm.
http://www.cert.org/advisories/CA-2002-27.html, 2002.
[19] PUD: Peer-To-Peer UDP Distributed Denial of Service.
http://www.packetstormsecurity.org/distributed/pud.tgz, 2002.
[20] Google Smacks Down Santy Worm.
http://www.pcworld.com/news/article/0,aid,
119029,00.asp, Dec. 2004.
[21] MyDoom Worms. http://us.mcafee.com/virusInfo/default.asp?id=mydoom, 2004.
[22] Santy Worms. http://www.f-secure.com/v-descs/santy a.shtml, Dec. 2004.
[23] Witty Worms.
http://securityresponse.symantec.com/avcenter/venc/data/w32.witty.worm.html, Mar. 2004.
[24] Vanderpool Technology. http://www.intel.com/technology/computing/vptech/, 2005.
[25] T. Anderson, L. Peterson, S. Shenker, and J. Turner. A Global Communications Infrastruc-
ture: A Way Forward. http://www.arl.wustl.edu/netv/contrib/nsf Dec2.ppt, Dec. 2004.
20
X. Jiang et al.
[26] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, R. N. Alex Ho, I. Pratt, and
A. Warﬁeld. Xen and the Art of Virtualization . SOSP 2003.
[27] C. Carella, J. Dike, N. Fox, and M. Ryan. UML Extensions for Honeypots in the ISTS
Distributed Honeypot Project. Proceedings of the 2004 IEEE Workshop on Information
Assurance United States Military Academy, West Point, NY, June 2004.
[28] P. Craveiro. SANS Malware FAQ: What is t0rn rootkit?
http://www.sans.org/resources/malwarefaq/t0rn rootkit.php.
[29] D. Dagon, X. Qin, G. Gu, W. Lee, J. Grizzard, J. Levine, and H. Owen. HoneyStat: Local
Worm Detection Using Honeypots. Proceedings of the 7th RAID, Sept. 2004.
[30] J. Dike. User Mode Linux. http://user-mode-linux.sourceforge.net.
[31] G. Dunlap, S. King, S. Cinar, M. Basrai, and P. Chen. ReVirt: Enabling Intrusion Analysis
through Virtual-Machine Logging and Replay. OSDI 2002.
[32] X. Jiang and D. Xu. VIOLIN: Virtual Internetworking on Overlay Infrastructure. Technical
Report CSD-TR-03-027, Purdue University, July 2003.
[33] X. Jiang, D. Xu, and R. Eigenmann. Protection Mechanisms for Application Service
Hosting Platforms. CCGrid 2004, Apr. 2004.
[34] K2. ADMmutate. CanSecWest/Core01 Conference, Vancouver
http://www.ktwo.
ca/ADMmutate-0.8.4.tar.gz, Mar. 2001.
[35] H. A. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Signature
Detection. Proceedings of the 13th Usenix Security Symposium, Aug. 2004.
[36] J. Nazario. Defense and Detection Strategies against Internet Worms. Artech House
Publishers, ISBN: 1-58053-537-2, 2004.
[37] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically Generating Signatures for
Polymorphic Worms. Proceedings of Oakland 2005, May 2005.
[38] F. Perriot and P. Szor. An Analysis of the Slapper Worm Exploit. Symantec White Paper
http://securityresponse.symantec.com/avcenter/reference/analysis.slapper.worm.pdf.
[39] K. S. Perumalla and S. Sundaragopalan. High-Fidelity Modeling of Computer Network
Worms. Proceedings of 20th ACSAC, Dec. 2004.
[40] N. Provos. A Virtual Honeypot Framework. Proceedings of the USENIX 13th Security
Symposium, San Diego, USA, Aug. 2004.
[41] T. Ptacek and J. Nazario. Exploit Virulence: Deriving Worm Trends From Vulnerability
Data. CanSecWest/Core04 Conference, Vancouver, Apr. 2004.
[42] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated Worm Fingerprinting.
Proceedings of the ACM/USENIX OSDI, Dec. 2004.
[43] A. Sundararaj and P. Dinda.
Towards Virtual Networks for Virtual Machine Grid
Computing. Proceedings of the Third USENIX Virtual Machine Technology Symposium
(VM 2004), Aug. 2004.
[44] P. Szor.
Fighting Computer Virus Attacks.
Invited Talk, the 13th Usenix Security
Symposium (Security 2004), San Diego, CA, Aug. 2004.
[45] J. Touch. Dynamic Internet Overlay Deployment and Management Using the X-Bone.
Proc. of IEEE ICNP 2000, Nov. 2000.
[46] J. Twycross and M. M. Williamson.
Implementing and Testing a Virus Throttle.
Proceedings of the USENIX 12th Security Symposium, Washington, DC, Aug. 2003.
[47] A. Vahdat, K. Yocum, K. Walsh, P. Mahadevan, D. Kostic, J. Chase, and D. Becker.
Scalability and Accuracy in a Large-Scale Network Emulator. OSDI 2002.
[48] I. Whalley, B. Arnold, D. Chess, J. Morar, and A. Segal. An Environment for Controlled
Worm Replication & Analysis (Internet-inna-Box). Proceedings of Virus Bulletin Confer-
ence, Sept. 2000.
[49] A. Whitaker, M. Shaw, and S. D. Gribble. Scale and Performance in the Denali Isolation
Kernel. Proceedings of USENIX OSDI 2002, Dec. 2002.
Virtual Playgrounds for Worm Behavior Investigation
21
[50] B. White, J. Lepreau, L. Stoller, R. Ricci, S. Guruprasad, M. Newbold, M. Hibler, C. Barb,
and A. Joglekar. An Integrated Experimental Environment for Distributed Systems and
Networks. Proceedings of 5th OSDI, Dec. 2002.
[51] V. Yegneswaran, P. Barford, and D. Plonka. On the Design and Use of Internet Sinks for
Network Abuse Monitoring. Proc. of 7th RAID, Sept. 2004.
[52] C. C. Zou, D. Towsley, W. Gong, and S. Cai. Routing Worm: A Fast, Selective Attack
Worm based on IP Address Information. Umass ECE Technical Report TR-03-CSE-06,
Nov. 2003.
Empirical Analysis of Rate Limiting Mechanisms
Cynthia Wong, Stan Bielski, Ahren Studer, and Chenxi Wang
{cindywon, bielski, astuder, chenxi}@cmu.edu
Carnegie Mellon University
Abstract. One class of worm defense techniques that received atten-
tion of late is to “rate limit” outbound traﬃc to contain fast spreading
worms. Several proposals of rate limiting techniques have appeared in
the literature, each with a diﬀerent take on the impetus behind rate lim-
iting. This paper presents an empirical analysis on diﬀerent rate limiting
schemes using real traﬃc and attack traces from a sizable network. In the
analysis we isolate and investigate the impact of the critical parameters
for each scheme and seek to understand how these parameters might be
set in realistic network settings. Analysis shows that using DNS-based
rate limiting has substantially lower error rates than schemes based on
other traﬃc statistics. The analysis additionally brings to light a number
of issues with respect to rate limiting at large. We explore the impact of
these issues in the context of general worm containment.
Keywords: Rate Limiting, Internet Worms, Worm Containment.
1 Introduction
Fast-spreading worms such as Blaster [16], and SoBig [11] wreaked havoc on
the Internet and caused millions of dollars in downtime and IT expenses. In
addition to consuming valuable network and computing resources, worms provide
potential vehicles for DDoS attacks, as seen in the case of SoBig and Blaster
[11, 16]. The need to mitigate worm spread is apparent and pressing.
Researchers have proposed various techniques for worm defense, both in detec-
tion [7, 22, 9, 13] and response [23, 21, 1, 12, 4]. Automatic response techniques are
of particular interest because methods that require human intervention simply
cannot match the speed and voracity of modern day worms. One class of auto-
mated response techniques seeks to rate limit the outbound spread of worm traf-
ﬁc [23, 1, 12] while allowing the continued operation of legitimate applications.
These rate limiting schemes oﬀer a gentler alternative to the simple detect-and-
block-the-host approach, and therefore are more palatable to actual deployment.
A recent analytical study also showed that when deployed at appropriate points
in the network, rate limiting can substantially reduce the spread of infection [25].
In this work, we undertake an empirical analysis of existing rate limiting mech-
anisms, with the goal of understanding the relative performance of the various
schemes. Our study is based on real traﬃc traces collected from the border of a
network with 1200 hosts. The trace data includes real attack traﬃc of Blaster
and Welchia, which infected over 100 hosts. We implement each scheme against
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 22–42, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
Empirical Analysis of Rate Limiting Mechanisms
23
the trace data and analyze their performance in terms of false positive and false
negative rates. In the case of worm defense, it is particularly important that false
positives are kept at a minimum without greatly impacting false negatives.
We analyze the eﬃcacy of the various schemes on both worm traces and nor-
mal traﬃc. The inclusion of real worm data allows us to draw insights without
having to consider the limitations of simulated attacks. We study three rate lim-
iting schemes, Williamson’s IP throttling [23], Chen’s failed-connection-based
scheme [1] and Schechter’s credit-based rate limiting [12]. Williamson’s throt-
tling scheme limits the rate of distinct IP connections from an end host [23].
Chen et al. [1] and Schechter et al. [12] both apply rate limiting to hosts that
exhibit an abnormally high number of failed connections. In addition, we study
an alternative rate limiting strategy based on DNS statistics—namely limiting
outgoing connections without prior DNS translations, thereby restricting the
contact rate of scanning worms. Ganger et al. made the ﬁrst observation that
DNS-based statistics can be used to detect and contain malicious worms [4].
Recently Whyte et al. showed that DNS-based worm detection can be extended
to a network setting [22]. The DNS-based rate limiting mechanism we study is
a modiﬁed version of [4]. One goal of this study is to investigate using DNS
behavior as a basis for rate limiting and its relative performance with respect to
other schemes.
In addition to studying DNS-based rate limiting, the other components of
our analysis seek to understand the fundamentals of rate limiting technology.
For instance, we evaluate the impact of dynamic vs. static rates. We study the
eﬀect of host vs. edge-based deployment. Some of these issues were not explored
adequately in the studies of the individual schemes.
Our analysis is the ﬁrst that we are aware of that oﬀers evaluation of the diﬀer-
ent rate limiting schemes on an equal footing—running against the same traﬃc
traces. The trace data we use in this study is from an open network without
strict traﬃc policies. Since most of the rate limiting mechanisms target enter-
prise networks with stricter traﬃc settings, we believe that our analysis provides
reasonable insights into how well these schemes might perform in practice.
2 Related Work
The rate limiting schemes by Williamson et al. [23], Chen et al. [1], and Schechter
et al. [12] are the target of our analysis. We defer discussions of these schemes
to later sections of the paper.
Our work aims to provide a study of rate-limiting techniques as a defense
against Internet worm propagation. Worm defense is a richly studied ﬁeld; there
exist many schemes outside rate limiting [21, 7, 9, 22, 18, 13, 3]. Some are com-
plimentary to rate limiting at large, which can be combined in practice. For
instance, the scan detection work by Weaver et al. [21] and Jung et al. [7] can be
used to protect enterprise networks from incoming infections while rate limiting
seeks to contain outbound propagations. Also of interest are the various forms
of worm detection work [22, 13, 9, 3]. In this paper we choose to focus on analysis
24
C. Wong et al.
of automated response techniques. We ﬁnd it beneﬁcial to limit our discussion
to a set of similar technologies so as to permit meaningful comparisons.
We note that there exists a rich body of worm modeling and analysis work
[15, 26, 8, 19, 20, 10, 14] that oﬀers theoretical understanding of and technical in-
sights into worm defense. Our goal is not to study worm propagation in a broad
sense, but rather we seek to evaluate and understand the impact and limita-
tions of a particular defense strategy, rate limiting. We believe that rate limiting
is a lightweight technique that can be readily deployed and administered, and
therefore represents a promising defense strategy.
Our study is the ﬁrst that oﬀers a direct comparison of diﬀerent rate limiting
technologies, using real traﬃc and attack traces. The analysis part of our study is
similar in spirit to the DDoS ﬁlter analysis by Collins et. al. [2], though the target