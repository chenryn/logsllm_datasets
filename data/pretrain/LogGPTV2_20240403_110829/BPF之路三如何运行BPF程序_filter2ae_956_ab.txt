`perf_event_open`系统调用用于打开一个被测量事件的文件描述符
    /*
        evt_attr: 描述要监视的事件的属性
        pid: 要监视的进程id, 设为-1的话表示监视所有进程
        cpu: 要见识的CPU
        group_fd: 事件组id, 暂时不用管
        flags: 相关表示, 暂时不用管
    */
    static int perf_event_open(struct perf_event_attr *evt_attr, pid_t pid, int cpu, int group_fd, unsigned long flags)
    {
        int ret;
        ret = syscall(__NR_perf_event_open, evt_attr, pid, cpu, group_fd, flags);
        return ret;
    }
重点在于配置`struct perf_event_attr`, 主要成员如下
    struct perf_event_attr { 
       __u32     type;         /* 事件类型 */
       __u32     size;         /* attribute结构的大小 */ 
       __u64     config;       /* 含义根据事件类型而定, 描述具体的事件配置 */
       union { 
           __u64 sample_period;    /* 取样时长 Period of sampling */
           __u64 sample_freq;      /* 取样频率 Frequency of sampling */ 
       };
       __u64     sample_type;  /* 取样种类 */ 
        ...;
       union { 
           __u32 wakeup_events;    /* 每n个事件唤醒一次 */
           __u32 wakeup_watermark; /* bytes before wakeup */ 
       };
    };
本例中我们要测量的是 **跟踪点类型中, 进入execve** 这一事件, 因此可以把`struct
perf_event_attr`的`type`设置为`PERF_TYPE_TRACEPOINT`, 表示跟踪点类型的事件.
此时config的值就表示具体要观测哪一个跟踪点, 这个值可以从debugfs中获取,
路径`/sys/kernel/debug/tracing/events///id`中保存着具体的跟踪点的值. 如下
因此如下设置就可以打开测量对应事件的efd
        //设置一个perf事件属性的对象
        struct perf_event_attr attr = {};
        attr.type = PERF_TYPE_TRACEPOINT;    //跟踪点类型
        attr.sample_type = PERF_SAMPLE_RAW;    //记录其他数据, 通常由跟踪点事件返回
        attr.sample_period = 1;    //每次事件发送都进行取样
        attr.wakeup_events = 1;    //每次取样都唤醒
        attr.config = 678;  // 观测进入execve的事件, 来自于: /sys/kernel/debug/tracing/events/syscalls/sys_enter_execve/id
        //开启一个事件观测, 跟踪所有进程, group_fd为-1表示不启用事件组
        int efd = perf_event_open(&attr, -1/*pid*/, 0/*cpu*/, -1/*group_fd*/, 0);
        if(efd
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    //类型转换, 减少warning, 也可以不要
    #define ptr_to_u64(x) ((uint64_t)x)
    //对于系统调用的包装, __NR_bpf就是bpf对应的系统调用号, 一切BPF相关操作都通过这个系统调用与内核交互
    int bpf(enum bpf_cmd cmd, union bpf_attr *attr, unsigned int size)
    {
        return syscall(__NR_bpf, cmd, attr, size);
    }
    //对于perf_event_open系统调用的包装, libc里面不提供, 要自己定义
    static int perf_event_open(struct perf_event_attr *evt_attr, pid_t pid, int cpu, int group_fd, unsigned long flags)
    {
        int ret;
        ret = syscall(__NR_perf_event_open, evt_attr, pid, cpu, group_fd, flags);
        return ret;
    }
    //用于保存BPF验证器的输出日志
    #define LOG_BUF_SIZE 0x1000
    char bpf_log_buf[LOG_BUF_SIZE];
    //通过系统调用, 向内核加载一段BPF指令
    int bpf_prog_load(enum bpf_prog_type type, const struct bpf_insn* insns, int insn_cnt, const char* license)
    {
        union bpf_attr attr = {
            .prog_type = type,        //程序类型
            .insns = ptr_to_u64(insns),    //指向指令数组的指针
            .insn_cnt = insn_cnt,    //有多少条指令
            .license = ptr_to_u64(license),    //指向整数字符串的指针
            .log_buf = ptr_to_u64(bpf_log_buf),    //log输出缓冲区
            .log_size = LOG_BUF_SIZE,    //log缓冲区大小
            .log_level = 2,    //log等级
        };
        return bpf(BPF_PROG_LOAD, &attr, sizeof(attr));
    }
    //保存BPF程序
    struct bpf_insn bpf_prog[0x100];
    int main(int argc, char **argv){
        //先从文件中读入BPF指令
        int text_len = atoi(argv[2]);
        int file = open(argv[1], O_RDONLY);
        if(read(file, (void *)bpf_prog, text_len)>一书中的HelloWorld, BPF程序如下. 其通过段名来表示这个BPF程序要附着到哪里
    //clang -O2 -target bpf -c ./bpf.c -o bpf.o
    #include 
    #define SEC(NAME) __attribute((section(NAME), used)) //设置段属性, 表示把某一变量或者函数放到ELF文件中名为NAME的段中
    //bpf_trace_printk()被编译为内核的一部分，永远不会被编译到你的 BPF 目标文件中。当尝试加载您的程序时，该函数会load_bpf_file()执行一个重定位步骤，
    static int (*bpf_trace_printk)(const char *fmt, int fmt_size, ...) = (void *) BPF_FUNC_trace_printk;
    //把bpf_prog编译到名为tracepoint/syscalls/sys_enter_execve的段中
    SEC("tracepoint/syscalls/sys_enter_execve")  
    int bpf_prog(void* ctx){
        char msg[] = "Hello";
        bpf_trace_printk(msg, sizeof(msg)); //在内核跟踪日志中打印消息
        return 0;
    }
    //程序许可证, 为了与内核兼容
    char _license[] SEC("license") = "GPL";
接着是最令人困惑的loader程序, 由于引用了`bpf_load.c`中的两个函数, 因此先分析这两个函数的源码.
要注意此时加载的编译出来的ELF格式的目标文件, 不再是单纯的指令
    #include 
    #include "bpf_load.h"
    int main(int argc, char **argv){
        if(load_bpf_file(argv[1])!=0){
            printf("error\n");
        }