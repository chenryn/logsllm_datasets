    extern void set_seed (int seed) {
        unsigned int s = (unsigned int)seed;
        for (mti=0; mti= N) {
            const unsigned int LOWER_MASK = (1u > 1) ^ (-(y & 1) & MATRIX_A);
                if (++km >= N) km = 0;
            }
            y = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N-1] = mt[M-1] ^ (y >> 1) ^ (-(unsigned int)(y & 1) & MATRIX_A);
            mti = 0;
        }
        y = mt[mti++];
        y ^=    y >> TEMU;
        y ^= (y > TEML;
        return y&0xff;
    }
    int main(void) {
        for (int t = 1580486400; t >> pt_part = b'{n    "filename": "flag.txt",n    "hash": "'
    >>> ct_part = open('flag.txt.enc', 'rb').read()[:43]
    >>> bytes(a ^ b for a, b in zip(pt_part, ct_part))
    b'n0t4=l4gn0t4=l4gn0t4=l4gn0t4=l4gn0t4=l4gn0t'
由于该部分的内容主要为若干个key的拼接，可知key为`n0t4=l4g`，接下来直接进行解密即可得到明文，从而得到flag：
    >>> ct = open('flag.txt.enc', 'rb').read()
    >>> key = b'n0t4=l4g'
    >>> truekey = b''
    >>> while len(truekey) >> truekey = truekey[:len(ct)]
    >>> pt = bytes(a ^ b for a, b in zip(ct, truekey))
    >>> pt
    b'{n    "filename": "flag.txt",n    "hash": "2f98b8afa014bf955533a3e72cee0417413ff744e25f2b5b5838f5741cd69547",n    "plaintext": "CTF{plz_dont_r0ll_ur_own_crypto}"n}'
## decrypto-2
题目描述：  
Kerckhoffs’s principle states that “A cryptosystem should be secure even if
everything about the system, except the key, is public knowledge.” So here’s
our really unbreakable cipher.
题目附件：  
[flag.svg.enc](https://github.com/ichunqiu-resources/anquanke/blob/master/009/decrypto-2/flag.svg.enc)  
[decrypto.py](https://github.com/ichunqiu-resources/anquanke/blob/master/009/decrypto-2/decrypto.py)
审计一下源码，发现题目的加密经过了多个函数处理，整理一下可以表示为如下形式：
    设:
    blk0 = sha256(key + struct.pack(''
    ct_part = open('flag.svg.enc', 'rb').read()[:32]
    blk0 = bytes(a ^ b for a, b in zip(prefix[:32], ct_part))
    blkset = blk0
    ct = open('flag.svg.enc', 'rb').read()
    count = 1
    while len(blkset) n  nn'
## decrypto-3
题目描述：  
Fine, I learned not to roll my own crypto. I hear OpenSSL is good and easy to
use, so I’ll use that to encrypt my secrets. Unfortunately, I keep crashing.
Can you help me figure out what the bug is?
题目附件：  
[flag.txt.enc](https://github.com/ichunqiu-resources/anquanke/blob/master/009/decrypto-3/flag.txt.enc)  
[crypto](https://github.com/ichunqiu-resources/anquanke/blob/master/009/decrypto-3/crypto)  
[core](https://github.com/ichunqiu-resources/anquanke/blob/master/009/decrypto-3/core)
执行crypto程序尝试加密，可以看到程序提示Segmentation
fault，我们对crypto程序进行逆向，可以看到程序没有去符号表，直接定位到setup_crypter函数：
    __int64 __fastcall setup_crypter(__int64 a1)
    {
      __int64 v1; // ST08_8
      __int64 v2; // rax
      void *v3; // ST18_8
      __int64 v4; // rax
      v1 = a1;
      *(_QWORD *)(a1 + 160) = HMAC_CTX_new();
      v2 = EVP_sha256();
      HMAC_Init_ex(*(_QWORD *)(v1 + 160), v1 + 64, 32LL, v2, 0LL);
      *(_QWORD *)(a1 + 168) = EVP_CIPHER_CTX_new();
      v3 = calloc(0x10uLL, 1uLL);
      v4 = EVP_aes_256_cbc(16LL, 1LL);
      return EVP_EncryptInit_ex(*(_QWORD *)(v1 + 168), v4, 0LL, v1 + 32, v3);
    }
可以看到程序使用AES-256进行加密，v3为IV，在使用calloc函数分配内存空间后没有进行赋值，因此IV为`b'x00' *
16`，即calloc赋的初值，程序使用的key我们不知道，但题目把报错后的core
dump的core文件提供给我们了，考虑到core文件通常包含程序运行时的内存，寄存器状态，堆栈指针，内存管理信息等，我们可以考虑遍历core文件来从中寻找密钥，AES-256使用32字节长的密钥，因此我们从`i=0`开始到`i=len(ct)-32`为止，不断把core[i:i+32]的内容当做key来进行解密，如果解密的内容中包含’CTF’，即视为解密成功。
将上述推导过程写成代码形式如下：
    from Crypto.Cipher import AES
    f = open('core', 'rb').read()
    ct = open('flag.txt.enc', 'rb').read()
    iv = b'x00' * 16
    for i in range(len(f) - 32):
        key = f[i:i+32]
        cipher = AES.new(key, AES.MODE_CBC, iv)
        pt = cipher.decrypt(ct)
        if b'CTF' in pt:
            print(pt)
            break
执行代码即可在pt中找到flag：
    b'PR_SET_DUMPABLE (since Linux 2.3.20)nSet the state of the "dumpable"nflag, which determines whether core dumps are produced for the calling processnupon delivery of a signal whose default behavior is to produce a core dump.nnMADV_DONTDUMP (since Linux 3.4)nExclude from a core dump those pages in the range specified by addr and length.nThis is useful in applications that have large areas of memory that are knownnnot to be useful in a core dump. The effect of MADV_DONTDUMP takes precedencenover the bit mask that is set via the /proc/PID/coredump_filter file (seencore(5)).nnnMan, if only I'd known about those options before I dumped core and sent it out.nnCTF{core_dump_your_secrets}nx0fx0fx0fx0fx0fx0fx0fx0fx0fx0fx0fx0fx0fx0fx0fwRxd7/?x83xdcx15Yxb1(rx19x1axe7x86xc4ZmLx87xe9x00xb0P{4Hxb8}x03x8a'
## eccmul
题目描述：  
Never done ECC before? Now you can!  
eccmul-3e426cd0.challenges.bsidessf.net:25519
题目只给了一个服务器地址和端口，nc连接上去看一下：
    Curve Generated: y^2 = x^3 + 3538569901*x + 1463263163 mod 12382431221540560483
    Point `P` on curve: [7446047202987944211,10385346314533718897]
    Scalar `s`: 7780639736
    Please compute `R` = `s*P`
    R? (enter in form [1234,5678])>
给定曲线、点P、标量s，要求给出s*P，直接在SageMath下计算即可：
    sage: a = 3538569901
    sage: b = 1463263163
    sage: n = 12382431221540560483