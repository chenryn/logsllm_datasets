**作者：天融信阿尔法实验室  
公众号：**
### 前言
在前几个月，Thinkphp连续爆发了多个严重漏洞。由于框架应用的广泛性，漏洞影响非常大。为了之后更好地防御和应对此框架漏洞，阿尔法实验室对Thinkphp框架进行了详细地分析，并在此分享给大家共同学习。
本篇文章将从框架的流程讲起，让大家对Thinkphp有个大概的认识，接着讲述一些关于漏洞的相关知识，帮助大家在分析漏洞时能更好地理解漏洞原理，最后结合一个比较好的RCE漏洞(超链接)用一种反推的方式去进行分析，让大家将漏洞和框架知识相融合。体现一个从学习框架到熟悉漏洞原理的过程。
### 一、框架介绍
ThinkPHP是一个免费开源的，快速、简单的面向对象的轻量级PHP开发框架，是为了敏捷WEB应用开发和简化企业应用开发而诞生的。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。
### 二、环境搭建
#### 2.1 Thinkphp环境搭建
安装环境：Mac Os MAMP集成软件
PHP版本：5.6.10
Thinkphp版本：5.1.20
thinkphp安装包获取（Composer方式）：
首先需要安装composer。
curl -sS https://getcomposer.org/installer | php
下载后，检查Composer是否能正常工作，只需要通过 php 来执行 PHAR：
若返回信息如上图，则证明成功。
然后将composer.phar 移动到bin目录下并改名为composer
    mv composer.phar /usr/local/bin/composer
Composer安装好之后，打开命令行，切换到你的web根目录下面并执行下面的命令：
    composer create-project topthink/think=5.1.20 tp5.1.20  –prefer-dist
若需要其他版本，可通过修改版本号下载。
验证是否可以正常运行，在浏览器中输入地址：
http://localhost/tp5.1.20/public/
如果出现上图所示，那么恭喜你安装成功。
#### 2.2 IDE环境搭建及xdebug配置
PHP IDE工具有很多，我推荐PhpStorm，因为它支持所有PHP语言功能， 提供最优秀的代码补全、重构、实时错误预防、快速导航功能。
PhpStorm下载地址：
Xdebug
Xdebug是一个开放源代码的PHP程序调试器，可以用来跟踪，调试和分析PHP程序的运行状况。在调试分析代码时，xdebug十分好用。
下面我们说一下xdebug怎么配置（MAMP+PHPstrom）
1.下载安装xdebug扩展(MAMP自带 ）。
2.打开php.ini文件，添加xdebug相关配置
[xdebug]
xdebug.remote_enable = 1
xdebug.remote_handler = dbgp
xdebug.remote_host = 127.0.0.1
xdebug.remote_port = 9000 #端口号可以修改，避免冲突
xdebug.idekey = PHPSTROM
然后重启服务器。
3.客户端phpstorm配置
3.1点击左上角phpstorm，选择preferences
3.2 Languages & Frameworks -> PHP，选择PHP版本号，选择PHP执行文件。
在选择PHP执行文件的时候，会显示 “Debugger:Xdebug”，如果没有的话，点击open打开配置文件。
将注释去掉即可。
3.3配置php下的Debug
Port和配置文件中的xdebug.remote_port要一致。
3.4配置Debug下的DBGp proxy
填写的内容和上面php.ini内的相对应。
3.5配置servers
点击+号添加
3.6配置debug模式
在Server下拉框中，选择我们在第4步设置的Server服务名称，Browser选择你要使用的浏览器。所有配置到此结束。
4.xdebug使用
开启xdeubg监听
下一个断点，然后访问URL，成功在断点处停下。
### 三、框架流程浅析
我们先看入口文件index.php，入口文件非常简洁，只有三行代码。
可以看到这里首先定义了一下命名空间，然后加载一些基础文件后，就开始执行应用。
第二行引入base.php基础文件，加载了Loader类，然后注册了一些机制–如自动加载功能、错误异常的机制、日志接口、注册类库别名。
这些机制中比较重要的一个是自动加载功能，系统会调用
Loader::register()方法注册自动加载，在这一步完成后，所有符合规范的类库（包括Composer依赖加载的第三方类库）都将自动加载。下面我详细介绍下这个自动加载功能。
首先需要注册自动加载功能，注册主要由以下几部分组成:
  1. 注册系统的自动加载方法 \think\Loader::autoload
  2. 注册系统命名空间定义
  3. 加载类库映射文件（如果存在）
  4. 如果存在Composer安装，则注册Composer自动加载
  5. 注册extend扩展目录
其中2.3.4.5是为自动加载时查找文件路径的时候做准备，提前将一些规则(类库映射、PSR-4、PSR-0)配置好。
然后再说下自动加载流程，看看程序是如何进行自动加载的？
spl_autoload_register()是个自动加载函数，当我们实例化一个未定义的类时就会触发此函数，然后再触发指定的方法，函数第一个参数就代表要触发的方法。
可以看到这里指定了think\Loader::autoload()这个方法。
首先会判断要实例化的`$class`类是否在之前注册的类库别名`$classAlias`中，如果在就返回,不在就进入findFile()方法查找文件，
这里将用多种方式进行查找，以类库映射、PSR-4自动加载检测、PSR-0自动加载检测的顺序去查找(这些规则方式都是之前注册自动加载时配置好的)，最后会返回类文件的路径，然后include包含，进而成功加载并定义该类。
这就是自动加载方法，按需自动加载类，不需要一一手动加载。在面向对象中这种方法经常使用，可以避免书写过多的引用文件，同时也使整个系统更加灵活。
在加载完这些基础功能之后，程序就会开始执行应用，它首先会通过调用Container类里的静态方法get()去实例化app类，接着去调用app类中的run()方法。
在run()方法中，包含了应用执行的整个流程。
  1. `$this->initialize()`，首先会初始化一些应用。例如：加载配置文件、设置路径环境变量和注册应用命名空间等等。
  2. `this->hook->listen(‘app_init’);` 监听app_init应用初始化标签位。Thinkphp中有很多标签位置，也可以把这些标签位置称为钩子，在每个钩子处我们可以配置行为定义，通俗点讲，就是你可以往钩子里添加自己的业务逻辑，当程序执行到某些钩子位置时将自动触发你的业务逻辑。
  3. 模块\入口绑定
进行一些绑定操作，这个需要配置才会执行。默认情况下，这两个判断条件均为false。
  4. `$this->hook->listen(‘app_dispatch’);`监听app_dispatch应用调度标签位。和2中的标签位同理，所有标签位作用都是一样的，都是定义一些行为，只不过位置不同，定义的一些行为的作用也有所区别。
  5. `$dispatch = $this->routeCheck()->init();` 开始路由检测，检测的同时会对路由进行解析，利用array_shift函数一一获取当前请求的相关信息（模块、控制器、操作等）。
  6. `$this->request->dispatch($dispatch);`记录当前的调度信息,保存到request对象中。
  7. 记录路由和请求信息
如果配置开启了debug模式，会把当前的路由和请求信息记录到日志中。
  8. `$this->hook->listen(‘app_begin’);` 监听app_begin(应用开始标签位)。
  9. 根据获取的调度信息执行路由调度
期间会调用Dispatch类中的exec()方法对获取到的调度信息进行路由调度并最终获取到输出数据$response。
然后将`$response`返回，最后调用Response类中send()方法，发送数据到客户端，将数据输出到浏览器页面上。
在应用的数据响应输出之后，系统会进行日志保存写入操作，并最终结束程序运行。
### 四、漏洞预备知识
这部分主要讲解与漏洞相关的知识点，有助于大家更好地理解漏洞形成原因。
#### 4.1命名空间特性
ThinkPHP5.1遵循PSR-4自动加载规范，只需要给类库正确定义所在的命名空间，并且命名空间的路径与类库文件的目录一致，那么就可以实现类的自动加载。
例如，\think\cache\driver\File类的定义为：
    namespace think\cache\driver;
    class File
    {