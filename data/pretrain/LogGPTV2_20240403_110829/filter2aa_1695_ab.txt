# Space of the Process
- I can match this generic point.

## Key Point
- **Simplified Exploit Flow:**
  1. `VectorAllocate()`
  2. `findCorruptVector()`
  3. `execRopAndShellCode()`
  4. `buildRopAndShellCode()`
  5. `triggerVulnerability()`
  6. `VectorSpray()`

## Ideal Exploit Flow:
- **Key Point:**
  1. `vectorAllocate()`
  2. `findCorruptVector()`
  3. `execRopAndShellCode()`
  4. `buildRopAndShellCode()`
  5. `triggerVulnerability()`
  6. `CheckVectorLen()`
  7. `LogAndStopExploit()`

## Implementation Details
- **JIT Flow Hooking:**
  - Before AS3 methods are called, they are JITed. Therefore, I hook the JIT flow of AVM2.
  - When the hook point is hit, I can check the AS3 Vector status change between the previous and current hits.
  - This allows me to check if a previous AS3 method has corrupted an AS3 Vector.

- **Background Knowledge:**
  - AVM2 will JIT AS3 methods for performance.
  - AVM2’s verifier checks security during JIT.
  - After JIT, the emitted machine code address is saved in a struct named `MethodInfo`.
  - `MethodInfo` also saves a method ID, which can be used to get the AS3 method name.

- **Key Function:**
  - In AVM2 (https://github.com/adobe-flash/avmplus), `BaseExecMgr::verifyJit` is the function to verify and emit code.

- **Post-JIT Hooking:**
  - After hooking the JIT flow, we can check the vector status in our `JIT_HOOK` function.
  - This means we can check if the vector has been corrupted after previous AS3 methods have been executed.

- **Practical Implementation:**
  - `JIT_HOOK()`
  - `CheckVectorLen()`
  - `vectorAllocate()`
  - `findCorruptVector()`
  - `execRopAndShellCode()`
  - `buildRopAndShellCode()`
  - `triggerVulnerability()`

## Checking Vector Length
- **Hooking Vector Creation:**
  - Flash Player has four types of AS3 Vector objects: `Vector.<int>`, `Vector.<uint>`, `Vector.<Number>`, and `Vector.<Object>`.
  - I hook the creation functions for `Vector.<int>` and `Vector.<uint>`.
  - In AVMplus source code, the creation function is a template function, meaning there are four instances in the Flash binary.

- **Checking Vector Length:**
  - When a vector object is created, I save the vector object address.
  - The data list, which saves vector data, is at `vector_obj_addr + 0x18`.
  - The first 4 bytes of the data list represent the vector length.
  - Therefore, `poi(poi(vector_obj_addr + 0x18))` gives the vector length.

- **Practical Implementation:**
  - `JIT_HOOK()`
  - `CheckVectorLen()`
  - `vectorAllocate()`
  - `findCorruptVector()`
  - `execRopAndShellCode()`
  - `buildRopAndShellCode()`
  - `triggerVulnerability()`
  - `SaveVectorObj()`

## Hook Version
- **Version Check:**
  - Some samples check the Flash Player version. If the version is too high or too low, execution terminates.
  - I change the Flash Player version string in memory.
  - For example, change `WIN 18,0,0,160` to `WIN 16,0,0,160`.
  - Search for `WIN x,0,0,x` in the OCX image memory.

## Hooking Flash OCX Load
- **Hooking Flash OCX:**
  - Need to hook Flash OCX when it is loaded for the first time.
  - Similar to Windbg’s module load event.
  - Flash OCX in IE is a COM component.
  - Hook COM component creation in IE, check CLSID of Flash OCX.

- **Hooking `CoGetClassObject`:**
  - Hook the `CoGetClassObject` function in `urlmon.dll`.
  - Use `IsEqualCLSID(rclsid, CLSID_Flash)` to identify the Flash component being loaded.
  - Find the Flash OCX module base address and size, then search for binary sequences to hook JIT, vector creation, and version.

## Running the Demo
- **Demo:**
  - CVE-2015-5119

## Manual Check
- **FED Sample:**
  - FED finally provides small samples for manual checking.
  - I need to debug these samples to confirm if it is a 0-day or to find the root cause of the 0-day.

## Debugging Challenges
- **No Symbols:**
  - No symbols for Flash Player.
  - All AS3 methods are JITed, and addresses are dynamic.
  - Flash player has script execution timeouts.

- **DbgFlashVul Tool:**
  - I wrote a tool to help with debugging.
  - A Windbg extension named `DbgFlashVul` written in C++.
  - It can trace AS3 methods and set breakpoints based on AS3 method names.

- **DbgFlashVul Commands:**
  - `!help DbgFlashVul`
  - `!EnableTraceJit 1`
  - `!SetBpForJitCode`

## Real Example: CVE-2015-3090
- **Exploit Kits:**
  - Used by most exploit kits.
  - Vulnerability can be simplified as follows:
    ```actionscript
    private var myShaderjob:ShaderJob = null;
    this.myShaderjob = new ShaderJob(this.myShader);
    ...
    this.myShaderjob.width = 0;
    this.myShaderjob.start();
    this.myShaderjob.width = 606;
    ```
  - Changing `ShaderJob` width asynchronously causes memory overwrite.

- **Exploit Flow:**
  - `prepareshaderjob()`
  - `prepareVector()` // vector