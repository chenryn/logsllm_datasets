6-1 各种各样的函数 181 ●
执行结果
n | p | mod_col
---+---+--------
0 | |
0 | |
| |
7 | 3 | 1
5 | 2 | 1
4 | |
| 3 |
1 | |
2 | |
1 | | 凡 例
mod_col:MOD(n,p)的返回值（n÷p的余数）
| |
这里有一点需要大家注意：主流的DBMS都支持MOD函数，只有
SQL Server不支持该函数。
特定的SQL
KEYWORD SQL Server使用特殊的运算符（函数）“%”来计算余数，使用如下的专用语法可
●%运算符（SQL Server） 以得到与代码清单6-3相同的结果。需要使用SQL Server的读者需要特别注意。
SQL Server
SELECT n, p,
n % p AS mod_col
FROM SampleMath;
■ROUND——四舍五入
语法6-3 ROUND函数
ROUND(对象数值，保留小数的位数)
KEYWORD ROUND函数用来进行四舍五入操作。四舍五入在英语中称为round。
●ROUND函数
如果指定四舍五入的位数为1，那么就会对小数点第2位进行四舍五入处
理。如果指定位数为2，那么就会对第3位进行四舍五入处理（代码清
单6-4）。
代码清单6-4 对m列的数值进行 列位数的四舍五入处理
n
SELECT m, n,
ROUND(m, n) AS round_col
FROM SampleMath;
● 182 第6章 函数、谓词、CASE表达式
执行结果
m | n | round_col
---------+---+----------
500.000 | 0 | 500
-180.000 | 0 | -180
| |
| 7 |
| 5 |
| 4 |
8.000 | |
2.270 | 1 | 2.3 凡 例
5.555 | 2 | 5.56 m：对象数值
| 1 | n：四舍五入位数
8.760 | | round_col：ROUND(m,n)的返回值（四舍五入的结果）
字符串函数
截至目前，我们介绍的函数都是主要针对数值的算术函数，但其实
算术函数只是SQL（其他编程语言通常也是如此）自带的函数中的一
部分。虽然算术函数是我们经常使用的函数，但是字符串函数也同样
KEYWORD 经常被使用。
●字符串函数
在日常生活中，我们经常会像使用数字那样，对字符串进行替换、截
取、简化等操作，因此SQL也为我们提供了很多操作字符串的功能。
为了学习字符串函数，我们再来创建一张表（SampleStr），参见
代码清单6-5。
代码清单6-5 创建SampleStr表
-- DDL：创建表
CREATE TABLE SampleStr
(str1 VARCHAR(40),
str2 VARCHAR(40),
str3 VARCHAR(40);
SQL Server PostgreSQL
-- DML：插入数据
BEGIN TRANSACTION; ①
INSERT INTO SampleStr (str1, str2, str3) VALUES ('opx' ,
'rt',NULL);
INSERT INTO SampleStr (str1, str2, str3) VALUES ('abc' ,
'def' ,NULL);
INSERT INTO SampleStr (str1, str2, str3) VALUES ('山田' ,
'太郎' ,'是我');
6-1 各种各样的函数 183 ●
INSERT INTO SampleStr (str1, str2, str3) VALUES ('aaa' ,
NULL ,NULL);
INSERT INTO SampleStr (str1, str2, str3) VALUES (NULL ,
'xyz',NULL);
INSERT INTO SampleStr (str1, str2, str3) VALUES ('@!#$%' ,
NULL ,NULL);
INSERT INTO SampleStr (str1, str2, str3) VALUES ('ABC' ,
NULL ,NULL);
INSERT INTO SampleStr (str1, str2, str3) VALUES ('aBC' ,
NULL ,NULL);
INSERT INTO SampleStr (str1, str2, str3) VALUES ('abc太郎' ,
'abc' ,'ABC');
INSERT INTO SampleStr (str1, str2, str3) VALUES ('abcdefabc' ,
'abc' ,'ABC');
INSERT INTO SampleStr (str1, str2, str3) VALUES ('micmic' ,
'i' ,'I');
COMMIT;
表示下一行接续本行，只是由于版面所限而换行。
特定的SQL
不同的DBMS事务处理的语法也不尽相同。代码清单6-5中的DML语句在
MySQL中执行时，需要将①部分更改为“START TRANSACTION;”。在Oracle和
DB2中执行时，无需用到①的部分（请删除）。
详细内容请大家参考4-4节中的“创建事务”。
下面让我们来确认一下创建好的表中的内容，其中应该包含了
str1、str2、str3三列。
SELECT * FROM SampleStr;
执行结果
str1 | str2 | str3
----------+------+-----
opx | rt |
abc | def |
山田 | 太郎 | 是我
aaa | |
| xyz |
@!#$% | |
ABC | |
aBC | |
abc太郎 | abc | ABC
abcdefabc | abc | ABC
micmic | i | I
● 184 第6章 函数、谓词、CASE表达式
■ ——拼接
||
语法6-4 函数
||
字符串1||字符串2
在实际业务中，我们经常会碰到abc + de = abcde这样希望将字符串
KEYWORD 进行拼接的情况。在SQL中，可以通过由两条并列的竖线变换而成的“||”
●| |函数
函数来实现（代码清单6-6）。
代码清单6-6 拼接两个字符串（str1+str2）
Oracle DB2 PostgreSQL
SELECT str1, str2,
str1 || str2 AS str_concat
FROM SampleStr;
执行结果
str1 | str2 | str_concat
----------+------+------------
opx | rt | opxrt
abc | def | abcdef
山田 | 太郎 | 山田太郎
aaa | |
| xyz |
@!#$% | |
ABC | |
aBC | |
abc太郎 | abc | abc太郎abc 凡 例
abcdefabc | abc | abcdefabcabc str_concat： str1 || str2的返回值
micmic | i | micmaci （ 拼接结果）
进行字符串拼接时，如果其中包含NULL，那么得到的结果也是
NULL。这是因为“||”也是变了形的函数。当然，三个以上的字符串也
可以进行拼接（代码清单6-7）。
代码清单6-7 拼接三个字符串（str1+str2+str3）
Oracle DB2 PostgreSQL
SELECT str1, str2, str3,
str1 || str2 || str3 AS str_concat
FROM SampleStr
WHERE str1 = '山田';
执行结果
str1 | str2 | str3 | str_concat 凡 例
------+------+------+----------- str_concat： str1 || str2 || str3的返回值
山田 | 太郎 | 是我 | 山田太郎是我 （ 拼接结果）
6-1 各种各样的函数 185 ●
这里也有一点需要大家注意，||函数在SQL Server和MySQL中无
法使用。
特定的SQL
KEYWORD SQL Server使用“+”运算符（函数）来连接字符串A。MySQL使用CONCAT函数
●+运算符（SQL Server） 来完成字符串的拼接。使用如下SQL Server/MySQL的专用语法能够得到与代码清单6-7
●CONCAT函数（MySQL） 相同的结果。另外，在SQL Server 2012及其之后的版本中也可以使用CONCAT函数。
注A SQL Server
SELECT str1, str2, str3,
由于这和Java中连接字符串的方
str1 + str2 + str3 AS str_concat
法相同，估计有些读者已经比较
FROM SampleStr;
熟悉了。
MySQL SQL Server 2012及之后
SELECT str1, str2, str3,
CONCAT(str1, str2, str3) AS str_concat
FROM SampleStr;
■LENGTH——字符串长度
语法6-5 LENGTH函数
LENGTH(字符串)
KEYWORD 想要知道字符串中包含多少个字符时，可以使用LENGTH（长度）函
●LENGTH函数
数（代码清单6-8）。
代码清单6-8 计算字符串长度
Oracle DB2 PostgreSQL MySQL
SELECT str1,
LENGTH(str1) AS len_str
FROM SampleStr;
执行结果
str1 | len_str
----------+--------
opx | 3
abc | 3
山田 | 2
aaa | 3
|
@!#$% | 5
ABC | 3
aBC | 3
abc太郎 | 5
abcdefabc | 9 凡 例
micmic | 6 len_str：LENGTH(str1)的返回值（str1的字符长度）
● 186 第6章 函数、谓词、CASE表达式
需要注意的是，该函数也无法在SQL Server中使用。
特定的SQL
KEYWORD SQL Server使用LEN函数来计算字符串的长度。使用如下SQL Server的专用语
●LEN函数（SQL Server） 法能够得到与代码清单6-8相同的结果。
SQL Server
SELECT str1,
LEN(str1) AS len_str
FROM SampleStr;
我想大家应该逐渐明白“SQL中有很多特定的用法”这句话的含义
了吧。
KEYWORD
●字节 专 栏
●多字节字符
字节（byte）是计算机中用来表
对1个字符使用 函数有可能得到2字节以上的结果
LENGTH
述数据大小的基本单位。如本
LENGTH函数中，还有一点需要大家特别注意，那就是该函数究竟以什么为
书所述，通常情况下“1字符=1
字节”。单位字节（KB）是字节 单位来计算字符串的长度。这部分是初级以上阶段才会学习到的内容，在此先简
的1024倍，单位兆字节（MB）
单介绍一下。
是千字节的1024倍，单位千兆
可能有些读者已经有所了解，与半角英文字母占用1字节不同，汉字这样的
字节（GB）是兆字节的1024
倍。表示硬盘容量时经常会使 全角字符会占用2个以上的字节（称为多字节字符）。因此，使用MySQL中的
用 的“100 GB”“250 GB”， LENGTH这样以字节为单位的函数进行计算时，“LENGTH(山田)”的返回结果是
其中100 GB指的是可以存储 4。同样是LENGTH函数，不同DBMS的执行结果也不尽相同A
。
1024×1024×1024×100=
107,374,182,400个半角英文 虽然有些混乱，但这正是我希望大家能够牢记的。
字母。
注A
MySQL中还存在计算字符串长度 ■ LOWER——小写转换
的自有函数CHAR_LENGTH。
语法6-6 函数
LOWER
LOWER(字符串)
KEYWORD
●LENGTH函数（MySQL） LOWER函数只能针对英文字母使用，它会将参数中的字符串全都转
●CHAR_LENGTH函数
（MySQL） 换为小写（代码清单6-9）。因此，该函数并不适用于英文字母以外的场合。
此外，该函数并不影响原本就是小写的字符。
KEYWORD 代码清单6-9 大写转换为小写
●LOWER函数
SELECT str1,
LOWER(str1) AS low_str
6-1 各种各样的函数 187 ●
FROM SampleStr
WHERE str1 IN ('ABC', 'aBC', 'abc', '山田');
执行结果
str1 | low_str
------+--------
abc | abc
山田 | 山田