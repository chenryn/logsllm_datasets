 add esp, 0x6 
 pop dword [edx] 
 mov edx, 0x404218 
 add esp, 0x12 
 pop dword [edx] 
 mov [esp], eax 
 add esp, 0x4 
 mov edi, 0x404200 
 push eax 
 pop ecx 
 add esp, 0x8 
 cmp ecx, 0x0 
 pushfd  
4
 add esp, 0x2 
 mov eax, 0x7 
 pop dword [edi+eax*4] 
 mov eax, 0x40421c 
 mov ecx, [eax] 
 and ecx, 0x40 
 shr ecx, 0x6 
 mov eax, 0x1 
 xor eax, ecx 
 mov [esp], eax 
 not dword [esp] 
 mov eax, [esp] 
 and eax, 0x1 
 mov edx, eax 
 shl edx, 1 
 mov [0x404220], edx 
 mov edi, 0x404200 
 cmp dword [edi+0x20], 0x0 
 jz dword 0x406fb5 
 sub esp, 0x4 
 mov eax, 0x3 
 push dword [edi+eax*4] 
 add esp, 0x4 
 push dword [esp] 
 pop edx 
 sub esp, 0x4 
 push edx 
 mov eax, [0x12e7a4] 
 sub eax, 0x2b0d0c86 
 add eax, 0x2cb87490 
 add eax, 0xfffffdb0 
 sub eax, 0x2cb87490 
 add eax, 0x2b0d0c86 
 mov edx, eax 
 sub esp, 0x8 
 mov [esp], edx 
 sub esp, 0xa 
 mov dword [esp], 0x4 
 mov eax, [0x12eba0] 
 sub esp, 0xa 
 push eax 
 sub esp, 0x4 
 mov dword [esp], 0x40904f 
 mov edx, 0x404218 
 push dword [edx] 
 mov edx, 0x404200 
 push dword [edx] 
 jmp 0x406038 
 EnumProcessModules
 sub esp, 0x8 
 mov dword [esp], 0x104 
 mov dword [0x404204], 0x1000000 
 mov edx, 0x404204 
 push dword [edx] 
 mov eax, [esp] 
 add esp, 0x4 
 push eax 
 sub esp, 0x4 
 mov dword [esp], 0x409059 
 jmp 0x406038 
 GetModuleBaseNameA
 mov eax, [0x12eba0] 
 add esp, 0x6 
 push eax 
 sub esp, 0x4 
 mov dword [esp], 0x409063 
 jmp 0x406038 
 CloseHandle
 sub esp, 0x2 
 mov dword [esp], 0xfffffdc8 
 add esp, 0x8 
 mov dword [esp], 0x40906d 
 jmp 0x406038 
 _strupr
 add esp, 0xc 
 push eax 
 sub esp, 0x2 
 mov dword [esp], 0x409077 
 jmp dword near [0x4020bc] 
1
 strcmp
 mov eax, 0x0 
 mov ecx, 0x0 
 add esp, 0x4 
 test eax, ecx 
 pushfd  
 mov eax, 0x7 
 pop dword [edi+eax*4] 
 mov eax, 0x40421c 
 mov ecx, [eax] 
 and ecx, 0x40 
 shr ecx, 0x6 
 mov eax, 0x0 
 xor eax, ecx 
 mov [esp], eax 
 not dword [esp] 
 mov eax, [esp] 
 and eax, 0x1 
 mov edx, eax 
 shl edx, 1 
 mov [0x404220], edx 
 mov edi, 0x404200 
 cmp dword [edi+0x20], 0x0 
 jz dword 0x406fb5 
 mov eax, 0x1 
 mov ecx, 0x1 
 add esp, 0x4 
 test eax, ecx 
 pushfd  
 add esp, 0x4 
 mov dword [esp], 0xfffffdc8 
(a) Original program
(b) Deobfuscated program
Fig. 7. Example of CFGs with instructions
which in turn interprets byte code for the program to be
executed: the results are similar to those presented here, in
that we are able to remove most of the obfuscation and recover
deobfuscated control ﬂow graphs that are very similar to those
shown here. We selected a subset of our test programs which
we used for single-level emulation, including binary-search,
bubble-sort and matrix-multiply and obfuscated them using
Code Virtualizer, and then applied another round of emulation
using EXECryptor. Each of these programs therefore had two
levels of emulation. We also wrote an emulator, modeled
on DLXsim and SPIM, for a small RISC-like processor
that we call tinyRISC, and ran it on hand-compiled byte-
code for a binary-search program. This program was also
obfuscated using CodeVirtualizer and EXECryptor and is
included as tinyRISC:bin-search; this program uses three levels
of emulation (the tinyRISC emulator, Code Virtualizer, and
EXECryptor). Table II shows the similarity numbers for the
obfuscated and deobfuscated CFGs of our test programs. It
can be seen that the similarity of the deobfuscated CFGs and
the original CFGs ranges from 80.6% to 87.9%. This shows
that our approach is effective in cutting through multiple levels
of emulation.
The similarity between the numbers for the multi-level
emulated binaries and the ones obfuscated using only Code
Virtualizer in Table I suggests that applying additional levels
of emulation does not change the structure of the underlying
interpreted program, although the obfuscated programs are
quite different (see CFG similarity numbers for the obfus-
686686
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
cated programs in the two cases), and the execution traces
differ signiﬁcantly with those for multi-level emulation being
signiﬁcantly larger.
PROGRAM
binary-search
bubble-sort
matrix-multiply
tinyRISC:bin-search
AVERAGE
No. of
Levels
2
2
2
3
CFG similarity (%)
Obf.
4.45
6.41
5.26
4.45
5.14
Deobf.
85.29
80.64
81.63
87.87
83.85
SIMILARITY OF ORIGINAL AND DEOBFUSCATED CONTROL FLOW GRAPHS:
MULTI-LEVEL EMULATION. No. of Levels GIVES THE NUMBER OF
EMULATION LEVELS IN THE OBFUSCATED CODE.
TABLE II
B. Return-Oriented Programs
We evaluated our prototype implementation with two differ-
ent sets of ROP test cases. The ﬁrst set of binaries were sim-
ple synthetic programs including factorial, ﬁbonacci, matrix-
multiply and bubble-sort. These programs were implemented
by chaining relevant ROP gadgets from Windows system
libraries such as ntdll.dll and msvcrt.dll rather than
a high level programming language to carry out the intended
computation so they can simulate the behavior of ROP attacks.
We chose these programs because they have enough complex
structures such as loops and conditional statements to measure
the ability of a reverse engineering system which tries to
recover the logic of the underlying computation. For com-
parison purposes we also created the non-ROP version of the
programs which are written in C. We also applied our approach
to several ROP malware samples, but found that our ROP
malware samples had a relatively simple control ﬂow structure
since all they were trying to do was to change the access
permissions on some memory pages to make them executable.
As a result, our hand-crafted ROP benchmarks presented a
greater challenge for deobfuscation than the malware samples
we tested. For our hand-crafted ROP sample, we tried to use
ROPC [31] to create the ROP programs but, for a variety of
technical reasons, were not able to get it to work.
The similarity numbers for our synthetic programs are
presented in Table III. The column labeled Obf. shows the CFG
similarity of the ROP version of the program to its non-ROP
version and column labeled Deobf. shows the similarity of the
PROGRAM
factorial
ﬁbonacci
matrix-multiply
bubble-sort
AVERAGE
CFG similarity (%)
Obf.
47.61
30.61
64.51
48.22
47.73
Deobf.
88.88
85.71
79.22
82.85
84.16
SIMILARITY OF ORIGINAL AND DEOBFUSCATED CONTROL FLOW GRAPHS:
TABLE III
ROPS
deobfuscated ROP program to its non-ROP version. The table
shows that our method is also able to reverse engineer the ROP
gadgets and produce a very similar control ﬂow graph to the
non-ROP version by simplifying the ROP version execution
trace.
We have included the set of control ﬂow graphs of two ROP
programs, factorial and ﬁbonacci in Figure 8 very similar to
Figure 6. Note that the factorial program has a nested loop;
the reason is that we did not ﬁnd a multiplication gadget in
ntdll.dll or msvcrt.dll, so we simulated this using a
loop of additions.5
C. Comparison With Coogan et al.
We tested our approach against that of Coogan et al. [6]; the
results are shown in Figure 9. Coogan’s approach results in
complex equations that are difﬁcult to map to CFGs, especially
for nontrivial programs. Our approach, by contrast, produces
CFGs that can be meaningfully compared to the original
program’s CFGs. So we think that our approach produces more
understandable results than Coogan’s. We ran Coogan’s tool on
their set of test programs and mapped the resulting relevant
subtraces (which is equivalent to the deobfuscated program
in our terminology) to CFGs. We ﬁrst applied our tool on
the traces used by Coogan et al. in their experiments [6] and
compared the similarity of the resulting deobfuscated traces
with the original ones. To compare the result of the two tools,
we also generated CFGs of the relevant subtraces produced by
their tool and compared the CFGs to the original programs.
It can be seen, from Figure 9, that our system outperforms
Coogan’s tool with a 30% to 60% higher similarity numbers
in all the programs. We were not able to get a result of their
tool on the md5 program obfuscated using Code Virtualizer
because the computation did not ﬁnish on time so we did not
have any data for that. The small difference between similarity
numbers of the programs that are common in our set of input
programs and the set they used for evaluation, e.g., hunatcha,
is that the programs used by Coogan et al. and represented in
Figure 9 are slightly different from those used for Table I.
Coogan et al. do not apply their technique to obfuscations
other than emulation, nor do they provide results for multi-
level emulation.
V. DISCUSSION
Like all other work on automatic malware analysis, we
presuppose that the malicious code has been analyzed and
(since we are using dynamic analysis) an execution trace has
been collected. If a program attempts to thwart analysis via
anti-analysis defenses then those defenses will have to be
overcome before our techniques can be applied. This problem
is common to all work on automated malware analysis and is
orthogonal to the topic of this paper, so we do not pursue it
further here.
5This problem with unavailability of multiplication gadgets in Windows
system libraries, and a solution using iterated addition, is also discussed by
Roemer et al. [7].
687687
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
Original
ROP
(a) factorial
Deobfuscated
ROP
(b) ﬁbonacci
Deobfuscated
Fig. 8. Some examples of ROP deobfuscation results
CODE VIRTUALIZER
VMPROTECT
Original
)
%
(
y
t
i
r
a
l
i
m
i
s
G
F
C
100
80
60
40
20
0
i
c
c
a
n
o
b
ﬁ
e
s
o
o
M
l
l
u
B
t
l
u
m
-
x
i
r
t
a
m
a
h
c
t
a
n
u
h
l
a
i
r
o
t
c
a
f
5
d
m
e
g
a
r
e
v
A
i
c
c
a
n
o
b
ﬁ
e
s