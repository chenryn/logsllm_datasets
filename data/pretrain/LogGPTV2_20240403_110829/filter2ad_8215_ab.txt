l | List Command | 存储命令文件的挂起列表，这些文件指示Google Drive 目录  
ls | List Success | 存储包含要下载的远程 Google Drive 文件路径的临时列表文件  
lf | List Failed | T失败列表命令的临时位置，在可以重试或清除它们前放在此处  
并不是所有GIMMICK的变体使用所有的目录。例如，macOS 植入程序不使用“ df”目录，它创建但不访问“ lf”和“ p”目录。
GCDTimerManager 管理各种 GCD
对象，以确保植入程序的正常调度，并保存调度计时器的集合及其相应的块。该恶意软件创建了几个命名的调度队列，用于管理特定的与 c2相关的任务:
**名字** | **目的**  
---|---  
SendBaseinfoQueue | Regularly generates and sends a system reconnaissance
heartbeat message to the C2 containing the following: 定期生成并向
c2发送一个系统侦察信息，包含以下内容:Hardware UUID；Eth0接口的 MAC 地址；CPU 模型字符串；OS 版本字符串  
list_request_queue | 在“l”目录中生成一个列表请求文件，其中包含一个格式为“/”的路径  
ls_cmd_queue | 解析“ ls”目录中的文件，并为每一行写一个相应的下载命令文件到“ d”目录  
ReadCmdQueue 1. readcmdlet | 从“ ds”目录解密和解析文件，并执行包含在其中的命令，将结果保存到“ u”目录  
CredsCheck | 检查 Google Drive 会话是否超时，并在必要时重新进行身份验证  
DriveClearTrashQueue | 定期删除 Google Drive 的垃圾文件  
DriveDownQueue | 解析存储在“ d”中的文件，并将相应的文件从 Google Drive 下载到“ ds”目录  
DriveUploadQueue | 上传存储在“ u”目录中的反馈文件  
DriveFailUploadQueue | 第二次尝试上传失败的上传项目。第二次尝试无论结果如何，标记为成功。  
fileListQueue | 解析存储在“ l”目录中的文件，并为每个文件更新 Google Drive 的 DriveManager
目录映射，并生成要下载到“ ls”目录中的文件列表  
此外，GCDTimerManager
使用在初始化过程中解码的静态配置信息来设置植入程序的运作时间，限制可能引起防御者注意的连接。它在配置数据的最开始从字符串解析工作时间。这个字符串以一组由连字符分隔的单位数字开始，然后是两个冒号字符和两个由连字符分隔的两位数字。第一组数字表示恶意软件活动的日期，第0天是星期天。第二组两位数字表示活动时间范围。以“1-2-3-4-5:
: 00-23”的初始值为准，植入程序将在工作日上午12点至晚上11点激活ー这是图4所示的配置 blob 中的第一个数据。
### 命令的生命周期
由于恶意软件操作的异步特性，命令执行需要分阶段的方法。虽然每个步骤是异步执行的，但每个命令都遵循相同的步骤:
1.攻击者将加密的有效载荷上传到 Google Drive。
2.“list_request_queue”触发调度计时器
  * 将写入“ l”目录的新请求文件
3.“fileListQueue”触发调度计时器
  * 从“ l”目录读取列表请求
  * 从 Google Drive 会话更新 DriveManager 状态
  * 将列表文件拖放到“ ls”目录中
4.“ls_cmd_queue” 触发调度计时器
  * 从“ ls”目录解析列表文件
  * 为“ d”目录中的每个远程文件放入下载命令文件
  * 从“ ls”目录中删除列表文件
5.“DriveDownloadQueue” 触发调度计时器
  * 枚举“d”目录中的文件
  * 将下载的命令文件排队到“ ds”目录
  * 下载完成后，删除远程 Google Drive 文件和本地下载命令文件的队列
6.“ReadCmdQueue” 触发调度计时器
  * 从“ ds”目录读取和解密命令文件
  * 处理命令执行
  * 删除本地命令文件
  * 将加密的“反馈”文件写入“ u”目录
7.“DriveUploadQueue” 触发调度计时器
  * 枚举“u”目录中的文件
  * 将结果文件的上传排成队列
  * 上载完成后，对本地结果文件的删除进行排队
### 命令和反馈
命令作为“ds”目录中的加密文件到达系统，一旦使用植入程序的静态 AES 密钥解密，将生成 JSON 对象。命令解析器只读取四个 JSON 字段。
**Name** | **Type**  
---|---  
CMDType | Number  
content | String  
params | String  
savepath | String  
虽然每个命令 JSON 必须有一个CMDType 字段，但是所需的字段因命令而异。下表总结了可用的命令及其必需字段。
**Enum** | **描述** | **附加必需的 JSON 字段**  
---|---|---  
0 | 传输基本系统信息 | None  
1 | 上传文件到 C2 | params  
2 | Download file to client | content, savepath  
3 | 执行 shell 命令并将输出写入 C2 | params  
4 | 设置客户端的 Google Drive 计时器间隔 | params  
5 | 为客户端信息心跳消息设置客户端计时器间隔 | params  
6 | 覆盖目标工作时间信息 | params  
对C2的反馈也被格式化为 JSON，其字段与命令非常相似。但是，所有反馈 JSON 对象都有一个额外的必需字段“ UUID”，该字段由设备的
Hardware UUID 填充。
### 总结
Storm Cloud
是一个高级的和多功能的黑客，调整其工具集，以配合攻击目标的不同的操作系统。他们利用内置的操作系统工具、开源工具和定制的恶意软件植入来实现他们的目标。利用
c2的云平台，比如使用 Google Drive，增加了不被网络监控解决方案发现的可能性。加上恶意软件只在受害者工作日发出信号这一事实，其隐蔽性更甚。
排除平台因素，GIMMICK
恶意软件组的样本相当庞大和复杂，部分原因在于其异步设计的复杂性，例如它的线程和锁定机制。将这个恶意软件移植到一个新的操作系统(macOS)并使其适应这个系统的工作并非轻而易举的事情，这表明它背后的黑客拥有充足的资源、娴熟的技能和多才多艺。值得注意的是，Volexity
只观察到过 Storm Cloud 使用过 GIMMICK (macOS 和 Windows版本)。然而，这个恶意软件植入程序是否由 Storm
Cloud开发或专有还是不确定的
### 附录
以下资源描述了苹果的Grand Central Dispatch:
  * [https://www.amazon.com/dp/099105556X/ref=cm_sw_em_r_mt_dp_RYJ6VS3327WSY7SE551Y?_encoding=UTF8&psc=1](https://www.amazon.com/dp/099105556X/ref=cm_sw_em_r_mt_dp_RYJ6VS3327WSY7SE551Y?_encoding=UTF8&psc=1) -> ISDN-13: 978-0991055562 
  * [ttps://www.amazon.com/dp/0321706250/ref=cm_sw_em_r_mt_dp_7J0VBS0DW5NWAZAFT5ZF](https://www.amazon.com/dp/0321706250/ref=cm_sw_em_r_mt_dp_7J0VBS0DW5NWAZAFT5ZF) ISDN-13: 978-0321706256 
  * [ttps://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/](https://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/)
  * [ttps://opensource.apple.com/source/libclosure/libclosure-67/BlockImplementation.txt.auto.html](https://opensource.apple.com/source/libclosure/libclosure-67/BlockImplementation.txt.auto.html)
* * *