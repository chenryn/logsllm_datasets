result := [][]string{} 
return true
for i, j := 0, slen-1; i 2->3->4->5, reorder it to 1->5->2->4->3.
Given 1->2->3->4, reorder it to 1->4->2->3.
func hasCycle142(head *ListNode) (bool,*ListNode) {
slow := head 
return fast 
for fast != slow {
return false, nil
for slow != nil && fast != nil && fast.Next != nil {
fast := head 
slow = slow.Next
fast = fast.Next
if fast == slow {
slow = slow.Next 
fast = fast.Next.Next
return true, slow
---
## Page 277
代码
拼接最终的结果。这种做法的时间复杂度是 O(n)，空间复杂度是 O(1)。
这里的反转区间是从中点一直到末尾。最后利用2个指针，一个指向头结点，一个指向中间结点，开始
先找到链表的中间结点，然后利用逆序区间的操作，如 第 92 题里的 reverseBetween()操作，只不过
更好的做法是结合之前几道题的操作：链表逆序，找中间结点。
杂度是 O(n)，空间复杂度是 O(n)。
最近简单的方法是先把链表存储到数组里，然后找到链表中间的结点，按照规则拼接即可。这样时间复
func reorderList(head *ListNode) *ListNode {
//解法一单链表
package leetcode
* Definition for singly-linked list.
p2 = preMiddle.Next
pl = head 
//重新拼接链表
for preCurrent.Next != nil {
preCurrent := pl.Next 
preMiddle := pl 
//反转链表后半部分
for p2.Next != nil && p2.Next.Next != nil {
p2 := head 
//寻找中间结点
 type ListNode struct {
preMiddle.Next = current 
current.Next = preMiddle.Next 
preCurrent.Next = current.Next
current := preCurrent.Next
pl = pl.Next 
return head
 := head 
Val int 
Next *ListNode
 1->2->3->6->5->4 t0 1->6->2->5->3->4
1->2->3->4->5->6 t0 1->2->3->6->5->4
---
## Page 278
144. Binary Tree Preorder Traversal
func listToArray(head *ListNode) []int 
func reorderListl(head *ListNode) *ListNode {
//解法二数组
return array
for cur != nil {
cur := head 
if head == nil {
array := []int{}
return head
if length%2 == 0 {
if length == 0 {
array := listToArray(head)
return head
for pl != preMiddle { 
for i := 0; i < len(array)/2; i++ { 
last := head 
cur := head
length := len(array)
array = append(array, cur.val)
 return array
cur = cur.Next 
cur.Next = nil
else { 
 return head 
last.Next = nil
last = tmp 
cur = tmp.Next
cur.Next = tmp 
tmp := &ListNode{val: array[length-1-i], Next: cur.Next}
p2 = preMiddle.Next
pl.Next = p2 
p2.Next = pl.Next 
preMiddle.Next = p2.Next
= p2.Next
---
## Page 279
代码
两种递归的实现方法，见代码。
解题思路
先根遍历一颗树。
题目大意
Follow up: Recursive solution is trivial, could you do it iteratively?
Example:
Given a binary tree, return the preorder traversal of its nodes' values.
题
//解法一递归
package leetcode
Output: [1,2,3]
Input: [1,null,2,3]
目