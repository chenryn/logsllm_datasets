title:Attacks on Wireless Coexistence: Exploiting Cross-Technology Performance
Features for Inter-Chip Privilege Escalation
author:Jiska Classen and
Francesco Gringoli and
Michael Hermann and
Matthias Hollick
9
3
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Attacks on Wireless Coexistence: Exploiting
Cross-Technology Performance Features for
Inter-Chip Privilege Escalation
Jiska Classen∗
PI:EMAIL
Francesco Gringoli†
PI:EMAIL
Michael Hermann∗
PI:EMAIL
Matthias Hollick∗
PI:EMAIL
∗ Technical University of Darmstadt, Secure Mobile Networking Lab
† University of Brescia, CNIT
Abstract—Modern mobile devices feature multiple wireless
technologies, such as Bluetooth, Wi-Fi, and LTE. Each of them is
implemented within a separate wireless chip, sometimes packaged
as combo chips. However, these chips share components and re-
sources, such as the same antenna or wireless spectrum. Wireless
coexistence interfaces enable them to schedule packets without
collisions despite shared resources, essential to maximizing net-
working performance. Today’s hardwired coexistence interfaces
hinder clear security boundaries and separation between chips
and chip components. This paper shows practical coexistence
attacks on Broadcom, Cypress, and Silicon Labs chips deployed in
billions of devices. For example, we demonstrate that a Bluetooth
chip can directly extract network passwords and manipulate
trafﬁc on a Wi-Fi chip. Coexistence attacks enable a novel
type of lateral privilege escalation across chip boundaries. We
responsibly disclosed the vulnerabilities to the vendors. Yet, only
partial ﬁxes were released for existing hardware since wireless
chips would need to be redesigned from the ground up to prevent
the presented attacks on coexistence.
I. INTRODUCTION
Wireless communication is enabled by Systems on a Chip
(SoC), implementing technologies such as Wi-Fi, Bluetooth,
LTE, and 5G. While SoCs are constantly optimized towards
energy efﬁciency, high throughput, and low latency commu-
nication, their security has not always been prioritized. New
exploits are published continuously [1], [6], [27], [30], [35],
[39], [48]. Firmware patching to mitigate ﬂaws requires strong
collaboration between vendors and manufacturers, leading to
asynchronous, incomplete, and slow patch cycles [48]. In ad-
dition, ﬁrmware patch difﬁng can provide attackers with SoC
vulnerabilities multiple months before public disclosure [22].
Mobile device vendors account for potentially insecure
wireless SoCs by isolating them from the Operating System
(OS) and hardening the OS against escalation strategies. For
example, on Android, the Bluetooth daemon residing on top of
OS drivers runs with limited privileges, is sandboxed, and is
currently being reimplemented in a memory-safe language [3].
As a result, recent wireless exploit chains targeting the mobile
OS instead of the SoC are rather complex and need to ﬁnd a
bypass for each mitigation [8], [9], [47].
We provide empirical evidence that coexistence, i.e., the
coordination of cross-technology wireless transmissions, is an
unexplored attack surface. Instead of escalating directly into
the mobile OS, wireless chips can escalate their privileges into
other wireless chips by exploiting the same mechanisms they
use to arbitrate their access to the resources they share, i.e.,
the transmitting antenna and the wireless medium. This new
model of wireless system exploitation is comparable to well-
known threats that occur when multiple threads or users can
share resources like processors or memory [33], [34], [38].
This paper demonstrates lateral privilege escalations from a
Bluetooth chip to code execution on a Wi-Fi chip. The Wi-
Fi chip encrypts network trafﬁc and holds the current Wi-
Fi credentials,
thereby providing the attacker with further
information. Moreover, an attacker can execute code on a
Wi-Fi chip even if it is not connected to a wireless network.
In the opposite direction, we observe Bluetooth packet types
from a Wi-Fi chip. This allows determining keystroke timings
on Bluetooth keyboards, which can allow reconstructing texts
entered on the keyboard [43].
Since wireless chips communicate directly through hard-
wired coexistence interfaces, the OS drivers cannot ﬁlter
any events to prevent this novel attack. Despite reporting
the ﬁrst security issues on these interfaces more than two years
ago, the inter-chip interfaces remain vulnerable to most of our
attacks. For instance, Bluetooth→Wi-Fi code execution is still
possible on iOS 14.7 and Android 11.
Wireless coexistence is indispensable for high-performance
wireless transmissions on any modern device [63]. We experi-
mentally conﬁrm that these interfaces exist and are vulnerable:
• We explore a Broadcom and Cypress Bluetooth↔Wi-Fi
interface, which is present in all iPhones and MacBooks,
the Samsung Galaxy S series, Raspberry Pis and IoT
devices.
• We successfully launch Bluetooth→Wi-Fi code execution
on all recent Broadcom and Cypress combo chips.
• We implement packet type information disclosure and
Denial of Service (DoS) on the standardized IEEE
802.15.2 coexistence interface, used by Silicon Labs and
further vendors, to show that this novel attack type is
generally applicable.
© 2022, Jiska Classen. Under license to IEEE.
DOI 10.1109/SP46214.2022.00047
1229
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
We received nine Common Vulnerabilities and Exposure
(CVE) identiﬁers for the implemented attacks (see Table I).
Since the underlying issue is broader than our practical attack
implementations, we informed the Bluetooth SIG, responsi-
ble for the Mobile Wireless Standards (MWS) speciﬁcation.
Moreover, we included wireless chip manufacturers, such as
Intel, Marvell, MediaTek, NXP, Qualcomm, and Texas Instru-
ments, in the responsible disclosure process, if their datasheets
mentioned coexistence interfaces [32], [42], [44], [45], [57].
The rest of the paper is structured as follows. We provide
a background on wireless coexistence in Section II. Based
on the threat model presented in Section III, we introduce
coexistence attack concepts in Section IV. Then, we detail
practical coexistence attacks on various chips and technologies
in Section V. In Section VI, we discuss patch timelines
and mitigation strategies while hardware-based ﬁxes are not
available. We discuss other wireless side channels, which
are related to our novel coexistence-based attack scheme, in
Section VII. We conclude our work in Section VIII.
II. WIRELESS COEXISTENCE
Minimizing the number of collisions is a fundamental goal
of all wireless communication systems. Technologies like
Bluetooth and LTE prevent collisions by assigning to each
node a ﬁxed schedule of reserved time slots [11]. Wi-Fi
nodes, instead, try to avoid collisions by repeatedly deferring
their transmissions if the channel is busy [10]. While these
mechanisms are effective when working in isolation, differ-
ent channel access mechanisms operating in close proximity
over the same frequencies can cause severe interference [55].
Wireless coexistence solves this problem by introducing an
additional control
layer that arbitrates transmissions from
different transceivers collocated in the same node [63].
A. Working Principle
We show in Figure 1 Bluetooth Low Energy (BLE) (blue)
and Wi-Fi (green) frames transmitted and received at a node
that adopts a wireless coexistence mechanism. When BLE is
operating using in its assigned time slots, the Wi-Fi transceiver
is literally blocked. As soon as the BLE transceiver releases the
channel, the Wi-Fi chip may start transmitting a data frame
and afterward wait for the acknowledgment that it expects
from the receiver. Meanwhile, the BLE transceiver cannot use
any time slot that may occur (shadowed gray frames in the
middle of the Wi-Fi one) and rests until the next Wi-Fi-free
slot. Such coordination is fundamental to i) prevent collisions
that neither BLE nor Wi-Fi would have been able to avoid on
their own and hence ii) increase the aggregated throughput.
Shared
Medium
BLE
Event
Acknowledged
Wi-Fi Data
M S
Data
M S
A
M S
t
Fig. 1: Wireless packet scheduling example for Wi-Fi and BLE
on a shared medium.
Also, technologies that use different frequencies can collide
and must adopt some coexistence mechanism. For example,
3GPP allocated for the uplink channel of LTE band 7 frequen-
cies above 2.5 GHz that are very close to the upper side of the
2.4 GHz ISM band used by Wi-Fi and Bluetooth: interference
is still possible because of spurious harmonics even if there is
no actual spectral overlapping [37].
B. Coexistence Architecture
Coexistence implementations depend on the underlying chip
architecture: separate chips or combo chips. On separate chips
(see Figure 2a), all scheduling information is exchanged using
an external hardwired interface. Sometimes, such interfaces
are documented for interoperability between chips by differ-
ent vendors. Combo chips (see Figure 2b) typically embed
separate cores dedicated to the different protocols for perfor-
mance reasons. The combined design allows sharing redundant
components such as the antenna. However, additional shared
components, such as transmission and reception buffers, could
also be involved in coexistence coordination. It is up to the
vendor to optimize the hardware design and add proprietary
features.
Both concepts are common in practice. For example, we
reverse-engineered coexistence interfaces on an iPhone 11.
We found that Bluetooth and Wi-Fi use a Broadcom combo
chip with proprietary coexistence features, while the Intel LTE
baseband chip is interconnected with a serial MWS interface.
C. Involved Components
Coexistence interfaces are part of the chip’s hardware be-
cause packet scheduling requires real-time information from
multiple chips or cores. The ﬁrmware running on the chip
can send data to hardwired interfaces by writing to Mem-
ory Mapped Input/Output (MMIO) addresses. Thus, some
coexistence behavior can be ﬁrmware-deﬁned. Conﬁgurability
depends on the initial hardware design by the vendor.
In general, coexistence is managed directly by the chips
without involving the OS, e.g. Android or iOS, which does
not see real-time packet scheduling information. However,
coexistence information that
timing-critical can be
coordinated externally. For example, on an iPhone with MWS,
frequency band conﬁguration information from the LTE chip
is processed by iOS and then forwarded to the Bluetooth chip.
is not
Bluetooth
Chip
Hardwired
Interface
Wi-Fi
Chip
a) Separate Bluetooth and Wi-Fi chip.
Bluetooth
Core
Hardwired
Interface
Wi-Fi
Core
Shared Components
b) Bluetooth and Wi-Fi combo chip.
Fig. 2: Coexistence architectures.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
21230
TABLE I: Practical coexistence attacks demonstrated in this paper.
Attack Type
Component
Chip Type
Vendor
Architectural
Shared Memory
Combo
Broadcom, Cypress
SECI (Proprietary)
Combo, Separate
Broadcom, Cypress
PTA (Standardized)
Separate
Silicon Labs
Protocol-based
D. Relevance
Due to backward compatibility, coexistence features are
bound to be available on future chips, even if chunks of Wi-Fi
trafﬁc are ofﬂoaded to the 5 GHz or 60 GHz bands. Even now,
recent standards such as 802.11ax continue to operate in the
2.4 GHz band.
III. THREAT MODEL
In the following, we explain the attacker’s goals and pre-
requisites for launching coexistence attacks.
A. Attacker Goals
When exploiting coexistence, the attacker aims at escalating
privileges laterally from one wireless chip or core into another.
This way, the attacker can extract secret information only