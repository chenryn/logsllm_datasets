cesses, and in fact anti-malware applications top-up their defence
strategy relying on whether an application is whitelisted, that is,
trusted. Only trusted applications can e.g., access protected files.
But, our findings have revealed a dissonance here: medium integrity
level applications, like Notepad, are considered trusted and thus al-
lowed to e.g., access protected files. But an application with medium
integrity level, that is running with standard user rights, does not
necessarily behave in a benign manner. As we showed for the case
of Notepad, medium but untrusted applications, such as malware,
can have their actions looking like be trusted by using the appli-
cation as a puppet; in so doing, they can bypass the anti-malware
guard.
We think that a better defence is to combine the integrity levels
and the trust label used by anti-malware. We state it as the following
principle:
Security Principle 1. Messages between applications should be
allowed only when the sender has at least the same integrity level as
the receiver and and the sender is at least as trusted as the receiver.
Principle 1 reminds the renowned Bell and La Padula Model
on messages-flow between different security “clearence” levels [6]
(see also [28]). But it is not exactly the same, since we cope with
“security” instead of confidentiality. Attempting a formalization of
Principle 1, components should be classified by “security levels”,
made of two elements: the UIPI “integrity levels”, (I = [admin ,
user, or sandbox], ordered) and the anti-virus software’s “trust
levels” (T = [digitally signed / whitelisted, not digitally signed / not
whitelisted], also ordered). Principle 1 suggests a policy saying that
an application of security level (I ,T) should not accept messages
coming from applications of security level (I′,T ′) when (I′ < I), or
when (I′ ≥ I) but (T ′ < T ′).
In conclusion, we believe that applying Principle 1 would have
prevented receiving SendInput from effecting whitelisted applica-
tions that has a potential to be exploited, e.g., Notepad. One should,
however, evaluate whether this may also broke some of the existing
automation software solutions. A conclusive statement about this
would require to perform a wide spread test on automation appli-
cations. It also had fostered AV vendors take measures not only to
protect the system, but also to protect their AV programs against
other supposedly trusted applications, in addition to conventional
malware attacks against AV products. A practical fix is to configure
AV kernel module to require admin rights to be accessed. In this
regard, it might be helpful to monitor SendInput API and block all
simulated keyboard and mouse events dispatched to AV program
although the problem of understanding whether a low-level event,
such as an interrupt, has been generated by a human or not might
be difficult to solve in general.
A Game of “Cut and Mouse”: Bypassing Antivirus by Simulating User Inputs
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
8 RELATED WORK
In this section, first we review existing attacks involving simulated
inputs to perform malicious actions. Next, we outline previous
research on the security of antivirus software.
8.1 Attacks Related to Input Simulation
Input simulation is the practice of programmatically synthesiz-
ing input events, such as mouse clicks or key strokes, which are
typically performed by the user. This section describes some the
most powerful existing attack techniques that make use of input
simulation.
8.1.1 Ghost Clicks. In [30], Springall et al. developed a proof-of-
concept malware to manipulate votes in Estonian Internet Voting
system. On infected clients, the malware simulates keyboard inputs
to activate the electronic identifier (e-ID) of voters and submit a
vote in a hidden session that is invisible to the voters.
Recently, under a different threat model, in [18] Maruyama et
al. demonstrate a method to generate tap events on touch screens
of smart phones using electromagnetic waves. In this scenario, the
victim’s device can be forced to pair with a malicious Bluetooth
device once it gets in the range of the attackers. Even if the victim
denies the pairing by choosing CANCEL in the security prompt, the
attacker can alter this selection and make the OS to recognize user
input as CONNECT.
Pay-per-click advertising systems are also vulnerable to fake
clicks, which is known as Click Fraud [31]. In these systems, the
advertisers get paid according to the number of clicks on adver-
tisements. By generating fraudulent clicks on the ads, a malicious
advertiser can increase its payment.
Perhaps the attack closest to the one described in this paper
is Synthetic Clicks [21], credited to Patric Wardle [11]. Exploiting
a bug in macOS OS, the attacker could send programmatically-
created mouse clicks events to security prompts that would result
in vertical privilege escalation. This way the attacker could cause
any damage, including retrieving all of the user’s passwords stored
in the keychain. Our attacks, Cut-and-Mouse and Ghost Control,
target Windows OS, do not rely upon a bug in the OS, and can
be used to instruct a privileged application to perform different
malicious operations.
8.1.2 Reprogramming USB Firmware. In [22], Nohl et al. demon-
strated that it is feasible to modify the firmware of a USB device, for
instance a USB stick, to behave like a keyboard. Known as BadUSB,
this technique works by reprogramming the device’s firmware in
order to type commands on the victim’s computer. When plugged
into a computer, the malicious USB device can simulate the key
strokes of the user, for example, type and execute a script which
downloads and runs a malware.
Shatter Attack. In [3], Paget describes a weakness in Win-
8.1.3
dows OS that allow a process to inject arbitrary code into another
process and execute. The “shatter attack”, a term coined by Paget,
works as follows: first, the malware copies the code-to-be-injected
to the clipboard. Next, it sends WM_PASTE message to target process
to paste the clipboard contents into a text field on the GUI of the
target process. At this point, the malicious code has been moved
onto the memory space of the target process. To execute this code,
the malware process sends another window message, a carefully
crafted WM_TIMER message, which causes a jump to the address of
the malicious code. The main difference with our attacks is the
presence of the malicious code during the injection, while with
Cut-and-Mouse we use and control a privileged application as a
"puppet" to perform various operations without injecting new code
into the target process memory.
8.2 Previous Research on Security of AVs
Traditionally, AVs have been in the target of security researchers
due to their incomparable importance. Since AV vendors mostly
utilize blacklisting as the main defense technique, many researchers
investigated this area. For instance, [9] and [29] analyzed the feasi-
bility of evade detection via obfuscation.
Another significant research topic about AVs is the implemen-
tation related vulnerabilities. To name a few examples: [15, 16, 25,
26, 32]. That said, the discoveries in this field mostly involve the
bugs in the AV software, rather than a flaw in their design or threat
model.
Finally, in [2], Al-Saleh and Crandall developed a technique to
determine if the target AV is up-to-date using side channel analy-
sis, allowing the attacker to learn which signatures exists in virus
database of the victim.
9 CONCLUSIONS
Antivirus programs (AVs) have become one of the de facto computer
security standards. Recently, they have also integrated ransomware
detection modules. There has been quite an attention to this class of
malware, given its world-wide impact; therefore, interested to know
how current AVs can mitigate the threat, we started to dive into
the matter. What we found is indeed surprising. Despite the great
attention to security that AV companies put into their products, the
security issues we discovered are in the interaction between OS
defences and AV defences.
Precisely, we found that it is possible for a malicious program
to (i) turn off AV’s real-time scanning protection feature; and (ii)
bypass anti-ransomware protected folder solutions by misusing
whitelisted applications to encrypt user data. To this end, we have
discussed and provided two proof-of-concept programs, Ghost Con-
trol and Cut-and-Mouse, which were able to either disable several
off-the-shelf AVs or bypass their anti-ransomware feature. We be-
lieve that the two issues can be fixed and avoided in the future, but
this requires software developers to have a general understanding of
what caused them. We stated that understanding in our Principle 1.
One could question whether such attacks can be detected by
the human user’s seeing, e.g., the mouse icon clicking here and
there. However, we believe that making security dependent on the
user’s reaction is fundamentally a wrong design choice, as user may
indeed enlarge the attack surface; in addition, malware can perform
these attacks when the user is not using the computer, e.g., through
some heuristic based on user’s activities. Thus a better mitigation
solution would be aimed at understanding whether keyboard and
mouse events come from a legitimate user or whether instead they
are synthesized by a (malicious) program. In a sense, discerning
such situation is what malware is already trying to achieve, namely
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Ziya Alper Genç, Gabriele Lenzini, and Daniele Sgandurra
[16] Joxean Koret. 2016. AV: Additional Vulnerabilities. Retrieved June 10, 2019 from
https://www.hoystreaming.com/wp-content/uploads/2016/03/hb_bilbo.pdf
Wiley & Sons, Indianapolis, IN, USA.
[17] Joxean Koret and Elias Bachaalany. 2015. The Antivirus Hacker’s Handbook. John
[18] S. Maruyama, S. Wakabayashi, and T. Mori. 2019. Tap ’n Ghost: A Compilation
of Novel Attack Techniques against Smartphone Touchscreens. In 2019 2019 IEEE
Symposium on Security and Privacy (SP). IEEE Computer Society, Los Alamitos,
CA, USA, 628–645.
[19] Alana Maurushat. 2013. Disclosure of Security Vulnerabilities: Legal and Ethical
Issues. Springer-Verlag London, London.
[20] Microsoft. 2019.
Retrieved June
10, 2019 from https://docs.microsoft.com/en-us/windows-hardware/drivers/
driversecurity/driver-security-checklist
[21] NIST. 2017. NVD – CVE-2017-7150.
Retrieved June 10, 2019 from https:
Driver security checklist.
//nvd.nist.gov/vuln/detail/CVE-2017-7150
[22] Karsten Nohl, Sascha Krißler, and Jakob Lell. 2014. BadUSB—On accessories that
turn evil. Retrieved May 15, 2019 from https://srlabs.de/wp-content/uploads/
2014/07/SRLabs-BadUSB-BlackHat-v1.pdf
[23] Working Group Dual Use of the Flemish Interuniversity Council. 2017. Guidelines
for researchers on dual use and misuse of research.
[24] OPSWAT. 2019. Windows Anti-malware Market Share Report. Retrieved June
10, 2019 from https://metadefender.opswat.com/reports/anti-malware-market-
share#!/
[25] Tavis Ormandy. 2015. Analysis and Exploitation of an ESET Vulnerability.
Retrieved June 10, 2019 from https://googleprojectzero.blogspot.com/2015/06/
analysis-and-exploitation-of-eset.html
[26] Tavis Ormandy. 2016. How to Compromise the Enterprise Endpoint.
Re-
trieved June 10, 2019 from https://googleprojectzero.blogspot.com/2016/06/how-
to-compromise-enterprise-endpoint.html
[27] TaxSlayer Pro. 2017. Quick Start Manual. Retrieved June 10, 2019 from http:
//downloads.taxslayer.com/online/2017-Quick-Start-Manual.pdf
[28] John Rushby. 1986. The Bell and La Padula Security Model. Computer Science
[29] Monirul I. Sharif, Andrea Lanzi, Jonathon T. Giffin, and Wenke Lee. 2008. Imped-
Laboratory, SRI International, Menlo Park, CA. Draft Technical Note.
ing Malware Analysis Using Conditional Code Obfuscation.
293–308.
[30] Drew Springall, Travis Finkenauer, Zakir Durumeric, Jason Kitcat, Harri Hursti,
Margaret MacAlpine, and J. Alex Halderman. 2014. Security Analysis of the Esto-
nian Internet Voting System. In Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’14). ACM, New York, NY, USA,
703–715.
[31] Kenneth C. Wilbur and Yi Zhu. 2009. Click Fraud. Marketing Science 28, 2 (2009),
[32] Feng Xue. 2008.
Retrieved June 10, 2019
from https://blackhat.com/presentations/bh-europe-08/Feng-Xue/Presentation/
bh-eu-08-xue.pdf
Attacking Antivirus.
[33] Feng Xue. 2008. Attacking The Antivirus.
[34] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda.
2007. Panorama: Capturing System-wide Information Flow for Malware De-
tection and Analysis. In Proceedings of the 14th ACM Conference on Computer
and Communications Security (CCS ’07). ACM, New York, NY, USA, 116–127.
https://doi.org/10.1145/1315245.1315261
[35] Ilsun You and Kangbin Yim. 2010. Malware Obfuscation Techniques: A Brief
Survey. In International Conference on Broadband, Wireless Computing, Com-
munication and Applications (BWCCA ’10). IEEE, Piscataway, New Jersey, US,
4.
understanding if it is running in a sandbox, e.g., using reverse Tur-
ing tests to detect the presence (or absence) of a human, – this
further reinforces the analogy of attackers and defenders are each
learning from others. However, before that discernment becomes
possible, OS and AV defences have to cooperate better. At the root
of our findings there is a misalignment between two different con-
cepts: that of integrity levels used by the OS, and that of trusted
applications on which instead AV defences rely upon. They have
not been conceived to work together and, at a higher level, they
have to be harmonized. This is indeed what our Principle 1 means
to achieve. We will attempt a synthesis of the two concepts by
developing a proof-of-concept component that implements it, thus
creating a test-bed for the validity of the Principle itself, which is
one of our future research works.
ACKNOWLEDGMENTS
This work was partially funded by European Union’s Horizon 2020
research and innovation programme under grant agreement No
779391 (FutureTPM) and by Luxembourg National Research Fund
(FNR) under the project PoC18/13234766-NoCry PoC.
REFERENCES
[1] Mohsen Ahmadvand, Alexander Pretschner, and Florian Kelbert. 2019. A tax-
onomy of software integrity protection techniques. In Advances in Computers.
Vol. 112. Elsevier, Cambridge, MA, USA, 413–486.
[2] Mohammed I. Al-Saleh and Jedidiah R. Crandall. 2011. Application-level Recon-
naissance: Timing Channel Attacks Against Antivirus Software. In Proceedings of
the 4th USENIX Conference on Large-scale Exploits and Emergent Threats (LEET’11).
USENIX Association, Berkeley, CA, USA, 9.
[3] Chris Paget (alias Foon). 2002. Exploiting design flaws in the Win32 API for
privilege escalation. Retrieved May 15, 2019 from https://web.archive.org/web/
20060904080018/http://security.tombom.co.uk/shatter.html
[4] Hyrum S. Anderson, Anant Kharkar, Bobby Filar, David Evans, and Phil Roth.
2018. Learning to Evade Static PE Machine Learning Malware Models via Rein-
forcement Learning. arXiv:cs.CR/1801.08917
[5] AV-TEST. 2019. The best antivirus software for Windows Home User. Retrieved
June 10, 2019 from https://www.av-test.org/en/antivirus/home-windows/
[6] D. E. Bell and L. J. La Padula. 1976. Secure computer system: Unified exposition
and Multics interpretation. Technical Report ESD-TR-75-306. Mitre Corporation.
[7] Battista Biggio and Fabio Roli. 2018. Wild Patterns: Ten Years After the Rise of
Adversarial Machine Learning. In Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’18). ACM, New York, NY, USA,
2154–2156. https://doi.org/10.1145/3243734.3264418
[8] Iker Burguera, Urko Zurutuza, and Simin Nadjm-Tehrani. 2011. Crowdroid:
Behavior-based Malware Detection System for Android. In Proceedings of the 1st
ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM
’11). ACM, New York, NY, USA, 15–26. https://doi.org/10.1145/2046614.2046619
[9] Mihai Christodorescu and Somesh Jha. 2004. Testing malware detectors. ACM
SIGSOFT Software Engineering Notes 29, 4 (2004), 34–44.
[10] Ian Goodfellow, Patrick McDaniel, and Nicolas Papernot. 2018. Making Machine
Learning Robust Against Adversarial Inputs. Commun. ACM 61, 7 (June 2018),
56–66. https://doi.org/10.1145/3134599
[11] Andy Greenberg. 2019. Another Mac Bug Lets Hackers Invisibly Click Security
Prompts. Retrieved June 10, 2019 from https://www.wired.com/story/apple-
macos-bug-synthetic-clicks/
[12] IT Services of Mitchell Hamline School of Law. 2017.
Technology No-
tice – Disable Antivirus before using Examplify.
Retrieved May
31, 2019 from https://mitchellhamline.edu/technology/2017/12/03/technology-
notice-disable-antivirus-before-using-examplify/
[13] S. Josefsson. 2006. The Base16, Base32, and Base64 Data Encodings. RFC 4648. RFC
Editor. http://www.rfc-editor.org/rfc/rfc4648.txt http://www.rfc-editor.org/rfc/
rfc4648.txt.
[14] Dhilung Kirat and Giovanni Vigna. 2015. MalGene: Automatic Extraction of
Malware Analysis Evasion Signature. In Proceedings of the 22Nd ACM SIGSAC
Conference on Computer and Communications Security (CCS ’15). ACM, New York,
NY, USA, 769–780.
[15] Joxean Koret. 2014. Breaking Antivirus Software. Retrieved June 10, 2019 from
http://joxeankoret.com/download/breaking_av_software_44con.pdf