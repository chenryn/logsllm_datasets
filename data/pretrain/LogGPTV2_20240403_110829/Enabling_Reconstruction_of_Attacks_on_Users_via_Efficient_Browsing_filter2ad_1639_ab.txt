special key is pressed. For example, pressing tab while
entering data in a form usually allows to transition from
an input ﬁeld to another, thus indicating that the previous
ﬁeld has been fully entered. Other keys (e.g., the space bar)
may be used to scroll a page or pause/start a video, or to
navigate to the previous page (e.g., using the backspace).
We have selected a total of ﬁve special keys whose raw
keydown event triggers a webshot.
• Generic Input Events: All other input events, such as mouse
movements, mouse wheel, key presses, etc., that do not fall
within the above categories are also considered. Speciﬁcally,
we trigger a webshot for each “generic” event, but impose a
time constraint: if the previous webshot has been taken more
than a predeﬁned number of seconds ago (e.g., 5 seconds),
we take another webshot, otherwise we skip this event (i.e.,
no webshot is taken). Notice that this time constraint only
applies to “generic” input events, and to the case when a key
is kept pressed. For all other single events mentioned earlier
(e.g., mouse down, tap, etc.) we always take a webshot,
regardless of the time.
Webshots are logged synchronously with the triggering input
event, as required by the forensic rigor property introduced in
Section I. Effectively, the user input will be held from processing
until a full webshot is taken. In Section IV, we will explain
that because user inputs are processed on the render thread of
Chromium’s renderer process, this has the effect of preventing
the DOM of the page from changing before the webshot is
recorded. Hence, each webshot reﬂects what the user saw at the
moment of her interaction with the page. This has the effect
of preventing attempts from the attacker to hide the attack by
altering the log, for example by rapidly changing the DOM
and appearance of the page immediately after a user-browser
interaction.
III. USE CASES
In this section, we discuss a representative use case scenario,
to highlight how our system could be used in practice. In general,
we envision ChromePic to be particularly useful in aiding the
reconstruction and trace-back of attacks that involve user actions,
such as social engineering and phishing attacks. In these cases,
reconstructing what the user saw or what exact information
was entered on a phishing page is critical to understand how
the attack unfolded. We argue that these types of attack are
difﬁcult to reconstruct without a visual account of what the user
experienced. ChromePic would ideally be deployed in corporate
and government network environments, where web-based attacks
may represent the ﬁrst step of larger incidents (e.g., targeted
attacks). At the same time, we believe ChromePic may also be
useful in other scenarios, such as in web application debugging.
Example Use Case: Meet Bob, a corporate employee who, while
using the browser at work, falls victim to a social engineering
malware download attack [31] by clicking on a misleading
advertisement. Once installed, the malware opens a backdoor to
the corporate network, which is later used by the malware owners
to gain access to and exﬁltrate sensitive information, triggering
a data breach detection (e.g., due to side effects such as selling
of information in the underground markets). Then, a forensic
analysis team is hired to investigate how the data was leaked. By
analyzing network logs, such as web proxy logs that report all
URLs visited by the corporate network users, the forensic analysts
notice something anomalous (e.g., a particularly suspicious set
3
of URLs) in Bob’s web logs recorded a week earlier. Therefore,
the analysts ask for authorization to explore Bob’s ChromePic
logs. Finally, by exploring the webshots produced by our system,
the analysts are able to reconstruct the social engineering attack
that tricked Bob into installing the initial malicious software.
By learning how Bob fell for the attack, including obtaining
a precise reconstruction of the visual tricks used for the social
engineering attack, the corporate network security team could
then develop a user training session on social engineering, to
better educate corporate employees on how to decrease the
likelihood of becoming a victim [16]. In addition, by having both
the screenshot taken at the very moment when the user clicked on
the misleading ad, as well as the related full DOM snapshot, this
information could be used to enhance browser-based defenses
against social engineering [3].
Notice that ChromePic enables the reconstruction not only of
the exact moment in which the attack is triggered (e.g., a click
on a social engineering malware ad), but also of the sequence
of pages with which the user interacted before falling for the
attack. In addition, in case of phishing attacks ChromePic would
also provide an account of the exact information the user leaked
on the phishing site. Knowing what information was “phished”
may be important to decide what actions to take to mitigate
the damage to both the user and to the corporate network (e.g.,
the user may have leaked access credentials related to sensitive
corporate assets).
IV. SYSTEM DETAILS
A. Background
Before we present the details of ChromePic, we ﬁrst provide
a brief overview on the Chromium browser architecture. As
Chromium’s architecture is fairly complex, we will limit the
following description to highlight only those components that
are needed to understand how our code modiﬁcations and
optimizations work.
Chromium uses a multi-process architecture [40], which
includes a main browser process, called Browser, and one
rendering process, called Renderer, per each open browser tab1.
The Browser runs multiple threads [45], including a UI Thread,
which handles UI events among other things, and an IO Thread,
which handles the IPC communications [39] between the Browser
and all Renderers. Each Renderer is also multithreaded [38]. The
Renderer’s Main Thread is responsible for communicating via
IPC with the Browser, whereas the Renderer’s Render Thread
is responsible for rendering web content, including executing
JavaScript code.
As shown in Figure 1, user inputs to a web page are ﬁrst
received by the Browser’s UI Thread, and then asynchronously
communicated via IPC (by the IO Thread) to the Renderer that
is responsible for the tab where the page is rendered. The IPC
message will ﬁrst be processed by the Renderer’s Main Thread,
and then forwarded to the Renderer’s Render Thread [38]. For
instance, a click on a hyperlink will be processed by the Render
Thread, to decide whether a navigation event should be triggered.
1In practice, a Renderer may in some cases be responsible for rendering more
than one tab [40]. To simplify our description, in the following we will assume
one tab per Renderer. Also, we will not consider out-of-process-iframes [41],
which are a recent ongoing project.
4
Fig. 1. Overview of how user inputs to a web page are passed to the Renderer
Thread. Dashed arrows indicate asynchronous calls. Notice that the function
names are intentionally simpliﬁed, and do not exactly reﬂect the (long chains
of) function calls that exists in the source code.
Furthermore, JavaScript code execution (e.g., initiated due to a
listener registered on the input event), is also executed in the
context of the Render Thread.
B. ChromePic Overview
Figure 2 provides a simpliﬁed overview of how our
ChromePic browser generates a webshot. Notice that all dashed
arrows in the ﬁgure represent asynchronous calls.
In response to a user input, ChromePic takes the following
main actions: (1) on the Browser process, it calls Chromium’s
code for taking a screenshot of the current visible tab (see details
in Section IV-D), to which the user input is destined; (2) it opens
a ﬁle that will be used to save the DOM snapshot and passes its
ﬁle descriptor, fd, to the Renderer, along with the user input;
(3) as the input and fd are received by the Renderer, it saves the
current entire DOM, including embedded objects and JS code,
in MHTML format; (4) once the DOM snapshot has been saved,
the Renderer waits for conﬁrmation from the Browser that the
screenshot taking process has terminated; only then, (5) the user
input is processed using the original Renderer’s workﬂow. In this
process, notice that if the screenshot ﬁnishes before the DOM
snapshot is saved, there will simply be no delay between steps
(3) and (5).
The high-level steps described above allow us to guarantee
that each webshot is taken synchronously with the user input, and
no DOM modiﬁcation due to the current input is allowed before
the webshot is logged, in accordance with the forensic rigor
requirement stated in Section I. Moreover, our webshot events
are transparent to the (possibly malicious) page. ChromePic’s
code is designed so that after logging the input can continue
its “natural” processing path, and no information regarding the
webshot events is transferred to the page (notice that while
side-channel attacks cannot be excluded, user input timings are
not easily predictable, thus making detecting the existence of
ChromePic a laborious, non-deterministic endeavor).
Challenges. While the process of taking synchronous screenshots
may appear straightforward at ﬁrst, our design of ChromePic
faces two main challenges. First, the limited documentation
for many of the modules we instrumented forced us to a great
deal of “reverse engineering” of the source code. In fact, our
code modiﬁcations had to span not only multiple processes, but
also multiple threads per process (UI, IO, Renderer, GPU, etc.).
In addition, while we strived to limit the number of changes
to existing code as much as possible, to meet our efﬁciency
requirements we had to engineer a number of optimizations, so
to minimize the webshot overhead shown in Figure 2.
Browser IO ThreadIPCSend(input)UserRenderer Main ThreadinputRenderer Render ThreadNotify(input)Input ProcessingBrowser UI ThreadSend(input)Fig. 2. Simpliﬁed view of how ChromePic processes user inputs that trigger a webshot. Dashed arrows indicate asynchronous calls.
Every
is
received,
Renderer
C. Identifying the Target Renderer Process
a
has
corresponding
Process
RenderProcessHost object
in the Browser process,
which is used to send and receive IPC messages between
the two processes. Effectively, the RenderProcessHost
represents the Browser side of a single Browser-Renderer
IPC connection [40]. A RendererProcessHost object
communicates with multiple RenderWidgetHost instances,
each one representing one tab in the browser [38]. For
every RenderWidgetHost object, we create a custom
SnapshotHandler object whose responsibility is
to
coordinate the process of
taking webshots for a given
tab. When an input event
the responsible
RenderWidgetHost object is identiﬁed by the Browser, and
represents the last point in the Browser after which the event is
passed on to the correct Renderer via IPC message. We take
control of the input event just before it is passed on to the
Renderer, and handle the event via our SnapshotHandler
instead. By doing so, we are able to identify the correct
RoutingID for the IPC messages [39], and therefore we can
coordinate the process of taking a snapshot with the appropriate
Render Thread.
D. Taking Screenshots Efﬁciently
One way to implement
the TakeScreenshot func-
tion shown in Figure 2, would be to call Chromium’s
CopyFromCompositingSurface and simply wait
for
the CopyFromCompositingSurfaceFinished callback
(see Figure 3). However, we empirically found that this process
sometimes takes a large amount of time to ﬁnish (e.g., several
hundred milliseconds, depending on the web page). Obviously,
a large latency would be unsustainable for our purposes, as
it violates our efﬁciency requirements. Therefore, we had
to break down and study the details of the process used
by Chromium to satisfy CopyFromCompositingSurface.
While documentation such as [37], [42] helped, this was not an
easy task, as it required a much deeper understanding of the
internals of Chromium’s compositing process than found in the
sparse Chromium project documents.
We then discovered that to efﬁciently take synchronous
screenshots we could safely use the process depicted in Figure 3.
Speciﬁcally, to satisfy CopyFromCompositingSurface,
the Browser relies on a graphics library (GL) API and assistance
from the GPU (with code running on the GPU process, or GPU
thread in Android [37]). The GL/GPU module in Figure 3 is
represented separately from the Browser UI thread for presen-
tation convenience (to be more precise, the DrawFrame and
GetFrameBufferPixels functions are actually executed
5
Fig. 3. Overview of how screenshots are taken and the Renderer is notiﬁed
(notice that some of the function call names have been shortened and made
more readable for presentation purposes, compared to the source code).
asynchronously within the context of the Browser’s UI thread.
Only the ReadBack part of the screenshot taking process is
executed on the GPU process/thread).
In simpliﬁed terms, we can break down the screenshot-taking
process into ﬁve main steps: (1) draw (i.e., composite the layers
of) the web page; (2) copy the pixels; (3) crop/scale; (4) read
back the ﬁnal bitmap; (5) save to ﬁle (we execute the ﬁle
saving process within the Browser’s File Thread [45]). However,
we found that once step (2) is completed, the screenshot has
effectively been taken, and do not need to wait for the crop/scale
operation before we can “release” the user input for further
processing. Namely, after step (2) the screenshot content is not
going to be inﬂuenced by the processing of the input, even if
the input causes the DOM to change.
The DrawFrame operation is controlled by the compositor
scheduler cc::scheduler, which takes into account factors
such as the device’s v-sync and dynamically establishes a target
rate at which frames are drawn [36]. For instance, on devices with
a v-sync frequency of 60Hz, a frame would be ideally drawn
every ∼16ms. Thanks to these properties, the time between
the arrival of the user input and our Send(screen_taken)
message in Figure 3 is typically on the order of only few tens
of milliseconds (see Section VII).
E. Taking “Deep” DOM Snapshots Efﬁciently
Along with each screenshot, we also take a “deep” DOM
snapshot that not only includes the current structure of the DOM
(at the time of the input), but also the content of all frames,
embedded objects (e.g., images), and javascript code. To enable
these rich DOM snapshots, we apply several important changes to
Chromium’s code for saving web pages in MHTML format [32].
Speciﬁcally, we enhance Chromium’s code to include javascript
Browser IO ThreadIPCSend(input, fd)take tabscreenshotUserRenderer Main ThreadIPCSend(screen_taken)inputRenderer Render ThreadNotify(input, fd)Notify(screen_taken)regular inputprocessingtake DOMsnapshotTakeScreenshot()Browser UI ThreadSend(input, fd)wait for screenshot...Browser File ThreadSave(screen)Send(screen_taken)webshotoverheadsave to ﬁle (fd)GL / GPU UserinputCopyFromCompositingSurface()Browser UI ThreadsetNeedsCommmitDrawFrame()GetFrameBufferPixels()RequestCopyOfOuput()Browser IO ThreadSend(screen_taken)PrepareTextureCopyOutputResult()ResultCropScaleReadBackCopyFromCompositingSurfaceFinishedIPC messageto RendererBrowser File ThreadSaveTakeScreenshot()code into the DOM snapshots and, importantly, to signiﬁcantly
improve efﬁciency. Below, we focus on detailing these latter
code optimizations.
To save a page in MHTML format, Chromium implements a
GenerateMHTML function, which can be called in the Browser
process from the UI Thread. Given a speciﬁc tab, this function
is responsible for serializing the tab’s web page content into
MHTML format, and to save it into a ﬁle. However, the Browser
does not have direct access to the DOM of the page in each tab.
Therefore, to save the MHTML content the Browser must rely on
the Renderer process. But because the Renderer executes within
a sandbox, it cannot directly open a ﬁle to save the MHTML
content. Chromium’s solution is to (1) open a ﬁle in the Browser
process; (2) pass the ﬁle descriptor of the already opened ﬁle to
the Renderer; and (3) ask the Renderer (via IPC message) to
produce the MHTML content of the main page and each frame
it embeds, and to save it into this ﬁle.
Unfortunately, instead of sending only one IPC message to
the Renderer for the entire process, Chromium’s code results into
sending one IPC message to request to save the main page, as
well as one separate IPC message to the Renderer to request the
saving of each frame embedded in the page2. Because modern