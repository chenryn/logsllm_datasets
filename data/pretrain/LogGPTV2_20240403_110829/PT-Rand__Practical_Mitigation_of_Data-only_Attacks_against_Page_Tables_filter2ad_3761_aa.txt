title:PT-Rand: Practical Mitigation of Data-only Attacks against Page Tables
author:Lucas Davi and
David Gens and
Christopher Liebchen and
Ahmad-Reza Sadeghi
PT-Rand: Practical Mitigation of Data-only Attacks
against Page Tables
Lucas Davi,∗ David Gens,† Christopher Liebchen,† Ahmad-Reza Sadeghi†
∗University of Duisburg-Essen, Germany. PI:EMAIL
†CYSEC/Technische Universität Darmstadt, Germany.
{david.gens,christopher.liebchen,ahmad.sadeghi}@trust.tu-darmstadt.de
Abstract—Kernel exploits constitute a powerful attack class
allowing attackers to gain full control over a system. Various
kernel hardening solutions have been proposed or deployed in
practice to protect the kernel against code injection (e.g., DEP)
or code-reuse exploits (e.g., CFI). However, the security of all
these hardening techniques relies heavily on the assumption that
kernel page tables cannot be manipulated, e.g., by means of data-
only attacks. Ensuring kernel page tables integrity is not only
essential for kernel security but also a challenging task in practice
since existing solutions require hardware trust anchors, costly
hypervisors, or inefﬁcient integrity checks.
In this paper, we ﬁrst motivate the importance of protecting
kernel page tables by presenting a data-only attack against page
tables to bypass the recently released CFI-based (Linux) kernel
hardening technique RAP. Thereafter, we present the design and
implementation of PT-Rand, the ﬁrst practical solution to protect
kernel page tables that does not suffer from the mentioned deﬁ-
ciencies of previous proposals. PT-Rand randomizes the location
of page tables and tackles a number of challenges to ensure that
the location of page tables is not leaked. This effectively prevents
the attacker from manipulating access permissions of code pages,
thereby enabling secure enforcement of kernel exploit mitigation
technologies such as CFI. We extensively evaluate our prototype
implementation of PT-Rand for the current Linux kernel on the
popular Linux distribution Debian and report a low overhead
of 0.22% for common benchmarks. Moreover, we combine RAP
with PT-Rand to protect RAP against data-only attacks on kernel
page tables.
I.
INTRODUCTION
Operating system kernels are essential components in mod-
ern computing platforms since they provide the interface be-
tween user applications and hardware. They also feature many
important services such as memory and disk management. Typ-
ically, the kernel is separated from user applications by means
of memory protection, i.e., less-privileged user applications can
only access the higher-privileged kernel through well-deﬁned
interfaces, such as system calls. Attacks against kernels are
gaining more and more prominence for two reasons: ﬁrst,
the kernel executes with high privileges, often allowing the
attacker to compromise the entire system based on a single
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23421
kernel exploit. Second, the kernel implements a major part of
the security subsystem. Hence, to escalate execution privileges
to root or escape from application sandboxes in browsers, it is
often inevitable to compromise the kernel. Kernel exploits are
leveraged in (i) all of the latest iOS jailbreaks, (ii) browser
sandbox exploits against Chrome [37], and (iii) large-scale
attacks by nation-state adversaries to obtain full control over
the targeted system, as in the infamous case of Stuxnet [42].
Typical means for program code exploitation are memory
corruption vulnerabilities. They allow attackers to alter control
and data structures in memory to execute (injected) malicious
code, or to launch code-reuse attacks using techniques such as
return-oriented programming [25, 46]. One of the main reasons
for the prevalence of memory corruption vulnerabilities is
that a vast amount of software is programmed in unsafe
languages such as C and C++. In particular, kernel code is
typically completely written in these languages for better per-
formance, legacy reasons, and hardware-close programming.
The monolithic design of the commodity kernels and numerous
device drivers increase the attack surface compared to user-
mode applications. For instance, over the last 17 years 1526
vulnerabilities have been documented in the Linux kernel [14].
Various solutions have been proposed or deployed in practice
to protect software systems against code-injection or code-
reuse exploits: modern kernel hardening solutions like Su-
pervisor Mode Execution Protection (SMEP) and Supervi-
sor Mode Access Protection (SMAP) [27] prevent access to
user-mode memory while the CPU executes code in kernel
mode [3, 27]. This prevents the attacker from executing code
with kernel privileges in user mode. The deployment of W⊕X
(Writable ⊕ Executable) prevents the adversary from executing
code in the data memory. Indeed, W⊕X has dramatically
reduced the threat of code-injection attacks. However, attackers
have already eluded to more sophisticated exploitation tech-
niques such as code reuse to bypass these measures and to
hijack the control ﬂow of the targeted code. Mitigating control-
ﬂow hijacking attacks is currently a hot topic of research [51].
The most promising and effective defenses at the time of
writing are control-ﬂow integrity (CFI) [1], ﬁne-grained code
randomization [31], and code-pointer integrity (CPI) [30].
However, all defenses against control-ﬂow hijacking are based
on the following assumptions: ﬁrstly, they assume that code
pages cannot be manipulated. Otherwise, the adversary can re-
place existing code with malicious code or overwrite CFI/CPI
checks. Secondly,
they assume that critical data structures
containing code pointers (e.g., the shadow stack for CFI, the
safe region for CPI) are isolated. Otherwise, the adversary can
manipulate them by overwriting code pointers.
However, as observed by Ge et al. [19], defenses against
control-ﬂow hijacking in the kernel additionally require the
protection of page tables against data-only attacks. Otherwise
the assumptions mentioned above will not hold and these
defenses can simply be bypassed by manipulating the page
tables.
Data-only attacks do not change the control ﬂow of the
program. Instead they direct the control ﬂow to certain nodes
within the control-ﬂow graph (CFG) of the underlying program
by altering the input data. Hence, the executed path in the CFG
is indistinguishable from any other benign execution. Page
tables are data structures that map virtual addresses to physical
addresses. They deﬁne read-write-execute permissions for code
and data memory pages, where a page is simply a contiguous
4KB memory area. Hence, attackers can launch data-only
attacks (based on memory corruption vulnerabilities in the
kernel) to alter page tables, and consequently disable mem-
ory protection, manipulate code pages, and inject malicious
code [38]. Recently industry researchers have presented several
page-table based attacks [16] stressing that these attacks are
possible because the attacker can easily determine the location
of the page tables.
To tackle data-only attacks on page tables, previous work
suggested kernel instrumentation to mediate any access to
memory-management structures according to a security pol-
icy [4, 5, 13, 20, 43, 49]. However, as we elaborate on
related work in Section VIII, all these solutions suffer from
at least one of the following shortcomings: high performance
overhead, require additional and higher privileged execution
modes (e.g., hypervisors), or depend on architecture-speciﬁc
hardware features. Recently, Microsoft released a patch for
Windows 10 [28] that randomizes the base address used to
calculate the virtual address of page table entries. However, this
patch does not protect against crucial information disclosure
attacks that have been frequently shown to circumvent any
(even ﬁne-grained) randomization scheme [15, 48].
Goal and Contributions. In this paper, we present the design
and implementation of a novel memory protection scheme, PT-
Rand, that prevents the attacker from manipulating page tables.
We highlight the importance of page table protection by im-
plementing a real-world exploit, based on a vulnerable kernel
driver (CVE-2013-2595), to directly manipulate the code of a
kernel function. Using this attack, we circumvent a recently
released CFI kernel hardening scheme, Linux RAP [52], and
execute arbitrary code with kernel privileges. In summary, our
contributions are as follows:
Page Table Protection: We present a practical and effective
protection of page tables against data-only attacks without
requiring additional hardware or a hypervisor. Rather than
applying expensive policy enforcement checks, we random-
ize page tables when they are allocated and ensure that
no information related to the location of page tables is
leaked. To achieve this, we need to tackle several challenges.
(1) There are many data pointers that the attacker can exploit
to locate page tables. (2) The physical memory (including
page tables) is usually mapped 1:1 into the virtual address
space. Hence,
the attacker can easily locate and access
this section. (3) The kernel still needs to efﬁciently access
page tables, and distinguish between randomized and regular
memory pages. As we will show in Section V, PT-Rand
tackles all these challenges, while remaining compatible to
existing software, like kernel drivers.
Prototype Implementation: We provide a fully working
prototype implementation for a recent Linux kernel (v4.6).
We also combine Linux kernel CFI protection (RAP) with
PT-Rand to protect RAP against data-only attacks on page
tables.
Performance Evaluation: We provide an extensive security
and performance evaluation. In particular, we show that
the attacker cannot bypass the randomization by means
of guessing attacks. Our performance measurements for
popular benchmarking suites SPEC CPU2006, LMBench,
Phoronix, and Chromium browser benchmarks show that
PT-Rand incurs almost no measurable overhead (0.22% on
average for SPEC), successfully applies to many complex,
modern system conﬁgurations, and is highly practical as it
supports a variety of applications and kernel code.
PT-Rand effectively enables memory protection and paves the
way for secure deployment of defenses to thwart code-reuse
attacks on the kernel.
II. BACKGROUND: MEMORY PROTECTION AND PAGING
In this section, we recall the basic principles of memory
protection and paging that are needed for the understanding of
the following sections.
Memory protection ensures that (i) privileged kernel code is
isolated from less-privileged user code, (ii) one process cannot
access the memory space of another process, and (iii) read-only
data memory cannot be tampered with by unauthorized write
operations. To enforce memory protection, modern operating
systems leverage a widely-deployed CPU feature called pag-
ing. Although the implementation details vary among different
architectures, the basic principles are the same. Hence, without
loss of generality, we focus our discussion on paging for the
contemporary x86_64 architecture.
Paging creates an indirection layer to access physical
memory. Once enabled, the CPU will only operate on virtual
memory (VM), i.e., it can no longer access physical memory.
The advantage of paging is that processes start working with
large contiguous memory areas. However, physically, the mem-
ory areas are scattered throughout the RAM, or swapped out on
hard disk. As a consequence, each access to a virtual memory
address needs to be translated to a physical address. This
is achieved by a dedicated hardware engine called Memory
Management Unit (MMU). The translation is performed by
means of page tables that operate at the granularity of pages,
where a typical page size is 4KB. Speciﬁcally, the operating
system stores mapping information from virtual to physical
addresses into these page tables thereby enabling efﬁcient
translation. To isolate processes from each other, the kernel
assigns each process to its own set of page tables. In addition,
page tables maintain read-write-execute permissions for each
memory page. These permissions are enforced at the time of
translation, e.g., allowing the operating system to prevent write
operations to code pages or executing data pages.
Figure 1 provides high-level insights into the translation
process. First, the memory subsystem of the CPU receives the
2
physical memory to a ﬁxed address into the virtual memory. To
quickly translate a physical to a virtual address, the kernel adds
the physical address to the start address of the 1:1 mapping,
and can then use the resulting virtual address to access the
memory.
III. ON THE NECESSITY OF PAGE TABLES PROTECTION
In the adversary setting of kernel exploits the attacker
has full control over the user mode, and hence, can execute
arbitrary code with user-mode privileges, and interact with the
kernel through system calls and driver APIs. The attacker’s
goal is to gain higher privilege level to be able to execute
arbitrary code with kernel-mode privileges. To do so,
the
attacker needs to hijack a control-ﬂow path of kernel code
by overwriting a kernel code pointer, e.g., a return address or
function pointer, using a memory-corruption vulnerability that
is exposed either through the kernel itself or one of the loaded
drivers.
In the following, we brieﬂy provide an overview of the
main kernel-related exploitation techniques as well as the de-
fenses that are deployed or proposed against these attacks. To
mitigate kernel code-injection and kernel code-reuse attacks,
the kernel must be hardened with a variety of protection
measures such as W⊕X and Control-Flow Integrity (CFI),
ﬁne-grained randomization or Code-Pointer Integrity (CPI).
However, as we elaborate in the following the security of all
these defenses relies on the integrity of page tables that can be
attacked by means of data-only attacks – We show this using a
real-world exploit that manipulates page tables against a kernel
CFI protection.
Traditional Kernel Attacks. To escalate the attacker’s privi-
leges to kernel privileges, a common exploitation technique
is as follows: ﬁrst,
the attacker allocates a new buffer in
memory, writes malicious code into this buffer, and sets the
memory page on which the buffer is located to executable.
The latter can be achieved by common user space library
functions such as mprotect() on Linux and VirtualProtect()
on Windows. Recall that these actions are possible because
the attacker has already gained control over the user space.
Second, the attacker overwrites a kernel code pointer with