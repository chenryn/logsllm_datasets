title:Protecting Data from Malicious Software
author:Matthew Schmid and
Frank Hill and
Anup K. Ghosh
Protecting Data from Malicious Software 
Matthew Schmid & Frank Hill 
Cigital, Inc. 
{mschmid, fhill}@cigital.com 
Abstract 
though 
effective, 
environments,” 
Corruption  or  disclosure  of  sensitive  user  documents 
can  be  among  the  most  lasting  and  costly  effects  of 
malicious  software  attacks.    Many  malicious  programs 
specifically target files that are likely to contain important 
user data.  Researchers have approached this problem by 
developing  techniques  for  restricting  access to resources 
on  an  application-by-application  basis.    These  so-called 
“sandbox 
are 
cumbersome  and  difficult  to  use.    In  this  paper,  we 
present a prototype Windows NT/2000 tool that addresses 
malicious  software  threats  to  user  data  by  extending  the 
existing set of file-access permissions.  Management and 
configuration options make the tool unobtrusive and easy 
to  use.    We  have  conducted  preliminary  experiments  to 
assess the usability of the tool and to evaluate the effects 
of improvements we have made.  Our work has produced 
an  intuitive  data-centric  method  of  protecting  valuable 
documents  that  provides  an  additional  layer  of  defense 
beyond existing antivirus solutions. 
1. Introduction 
to 
Despite 
individuals. 
the  efforts  of 
the  antivirus  community, 
malicious  software  continues  to  be  a  major  threat  to 
businesses  and 
  Malicious  software 
commonly  appears  innocuous  and  carries  on  its  true 
purpose  unbeknownst  to  its  victim.    A  particularly 
dangerous  form  of  malicious  software  (malware)  is  that 
which  remains  undetected  while  it  continues  to  perform 
malicious  actions.    Viruses  may  attach  themselves  to 
ordinary  programs  without  any  noticeable  effect  on  the 
original  software.    Trojans  may  stealthily  steal  valuable 
information  and  transmit  it  anywhere  on  the  Internet.  
Malicious  mobile  code  may  surreptitiously  destroy  or 
steal files while a person browses the World Wide Web.  
For  the  typical  user,  the  greatest  threat  that  malware 
poses  is  its  ability  to  steal,  modify,  or  destroy  important 
data.  The costs associated with damage to the operating 
system  or  other  software  is  negligible  when  compared 
with the value of the information that a person has labored 
Anup K. Ghosh 
DARPA 
PI:EMAIL 
to  produce.    After  all,  the  computer  and  its  software  are 
simply tools being used to aid in the creation of this data 
in the first place.  While corporations may be legitimately 
concerned  with  side  effects  such  as  system  availability 
and  the  resources  required  to  eradicate  an  out-of-control 
virus,  users  are  ultimately  concerned  with  the  integrity 
and confidentiality of the data contained in their files. 
The Windows NT / 2000 security model provides users 
with  the  ability  to  protect  sensitive  documents  from 
access  by  other  users.    The  type  of  access  control 
provided  by  Windows  is  known  as  discretionary  access 
control  (DAC)  because  the  owner  of  a  file  is  given 
discretion  in  determining  the  access  permissions  for  that 
file.    This  is  in  contrast  with  mandatory  access  control 
(MAC)  where  file  permissions  are  much  more  tightly 
controlled  [16].    Figure  1  shows  the  Windows  NT  4.0 
dialog  box  that  enables  a  user  to  select  file  permissions 
for a document.   
Figure  1.  Discretionary  access  control  on 
Windows NT 
While this security model protects sensitive data from 
nosy  or  ill-intentioned  colleagues,  it  does  nothing  to 
defend  against  most  malicious  software.    The  reason  for 
this  disparity  is  that  malicious  software  is  actually 
executed by the user himself.  The consequence of a DAC 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
system is that once a person runs a program, that program 
has the ability to change the access permissions on any of 
that user’s files.  Malicious code therefore has the ability 
to  do  anything  that  the  user  could  do,  including  the 
reading  of,  writing  to,  or  destruction  of  any  documents 
that belong to the compromised user. 
In this paper we introduce the FileMonster; a prototype 
tool  for  extending  Windows  discretionary  access  control 
to better protect important files from damage or snooping 
by  all  forms  of  malicious  software.    The  FileMonster 
shares  some  characteristics  with  prior  research  into 
application  sandboxing  (see  the  Related  Work  section), 
yet  we  believe  that  its  unique  approach  to  this  problem 
solves  many  of  the  usability  issues  that  have  plagued 
earlier  systems.    This  prototype  provides  an  additional 
level  of  protection  from  malicious  software  with  a 
minimal impact on the normal work environment. 
2. A data-centric protection mechanism 
Existing access control mechanisms do little to protect 
your  files  from  malicious  software.    To  make  matters 
worse,  the  Windows  operating  system  makes  it  difficult 
or  impossible  to  observe  how an application is using the 
file  system  without  the  help  of  a  third-party  monitoring 
tool  (see  www.sysinternals.com  for several useful system 
monitoring tools).  The prototype described here works by 
increasing the visibility of access to important documents 
on  your  computer.    Essentially  we  provide  two  new  file 
system  permissions:  confirm  on  read  and  confirm  on 
write.    These  permissions  indicate  that  when  a  program 
performs  either  a  read  or  write  operation  on  a  protected 
file,  the  user  must  provide  a  confirmation  before  this 
operation can proceed.  This eliminates the possibility that 
a  malicious  program  can  read  or  alter  a  protected  file 
without  first  getting  permission  from  the  user.    The 
confirm on read permission should be used on files whose 
contents  are  considered  confidential.    This  will require a 
confirmation from a user if any program attempts to read 
data  from  the  file.    The  confirm  on  write  permission 
should be used on files whose valuable contents must not 
be  damaged.    This  permission  requires  a  confirmation 
when a program tries to write to or delete the file.  These 
permissiond  may  also  be  combined  (confirm  on  access).  
We  have  developed  a  prototype,  named  FileMonster, 
which  enforces 
the  Windows 
NT/2000 operating system. 
these  permissions  on 
In  addition  to  supporting  permissions  on  a  per  file 
basis, the FileMonster also allows users to set permissions 
based  on  file  types  (extensions).    This  provides  broad 
protection to a group of files.  For example, a user might 
decide  that  all  of his Microsoft Excel files (identified by 
the  XLS file extension) should be protected with  confirm 
on read permission.  The FileMonster would then require 
confirmation whenever a program accessed a file with the 
extension  of  XLS.    Individual  file  permissions  always 
override  group  permissions,  allowing  someone  to  tailor 
file permissions to fit current needs. 
We  refer  to  our  system  as  being  data-centric  to 
distinguish  it  from  other  research  efforts  that  have 
investigated  techniques  of  protecting  resources  against 
malicious  software  that  have  been  largely  application-
centric.    An  application-centric  approach  to  malicious 
software prevention focuses on restricting the capabilities 
of applications that a user believes may attempt malicious 
behavior.  The Java sandbox is a well-known commercial 
example of a security model that is designed to restrict the 
behaviors  of  untrusted  software.    The  Janus  prototype, 
described  in  [9;  17],  is  one  of  the  better-known research 
efforts 
application 
sandboxing.  This and other systems of defending against 
malicious  software  are  further  described  in  the  Related 
Work section. 
investigated 
that 
performing 
the  user  chooses 
In  contrast,  a  data-centric  approach  to  malicious 
software prevention focuses on better protecting resources 
from misuse by any application executing on the system.  
In  the  case  of  the  FileMonster,  the  emphasis  is  on 
providing  users  with  an  extended  set  of  file  permissions 
that can be used to further safeguard important files.  In a 
data-centric  approach, 
to  protect 
important  data  from  tampering  or  snooping.    In  an 
application-centric model the user must decide whether an 
application should be run in a restricted environment and 
how that application should access system resources.  Our 
prototype is more limited in the type of resources that are 
protected  (focusing  only  on  the  file  system)  however  we 
believe  that  this  results  in  a  tool  that  is  much  easier  to 
configure  and  use,  and  focuses  on  the  resources  that  are 
most important to protect.  We believe that a data-centric 
approach is not only easier to manage and understand, but 
that it is inherently safer than an application-centric model 
because  protections 
the  sensitive 
resource, not around the untrusted application.  This paper 
will  describe  the  data-centric  malicious  software  defense 
prototype  that  we  built  and  will  discuss  its  various 
strengths and weaknesses. 
is  placed  around 
3. Security vs. usability 
As  with  almost  any  security  mechanism  there  is 
generally a trade-off between security and usability.  The 
FileMonster  allows  a  user  to  vary  a  number  of  security 
settings  that  balance  security  with  usability  until  an 
acceptable  compromise  has  been  reached.    Here  we 
explain  FileMonster  features that can be configured by a 
user  and  how  these  features  affect  the  security  and 
usability of the system. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
3.1. Handling user confirmations 
refer 
to  as  simple 
When  a  user  marks  a  file  such  that  confirmation  is 
required,  the  FileMonster  prototype  can  request  this 
confirmation in one of two ways.  The first confirmation 
method,  which  we  will 
file 
confirmation,  will  simply  block 
from 
occurring, then pop up a dialog box that asks the user to 
confirm  or  deny  the  action.    As  shown  in  Figure  2,  this 
dialog box lists the file that is being accessed, the type of 
access  (read  or  write)  that  is  being  requested,  and  the 
application  that  has  issued  the  request.    The  user  may 
either elect to allow the operation to continue as requested 
or to reject the request. 
file  access 
Using  a  simple  dialog  box  to  receive  a  confirmation 
from a user may be sufficient in most situations, however 
there is a security weakness in this approach that makes it 
unsuitable for some high security environments.  The flaw 
is  due  to  the  ability  of  a  hostile  application  to  send 
windowing  messages  directly  to  the  confirmation  dialog 
box  without  any  input  from  the  user.    If  a  piece  of 
malicious  code  were  designed  specifically  to  thwart  the 
FileMonster’s  protections,  the  code  could  attempt  to 
access a protected file, wait for the confirmation window 
to  pop  up,  and  then  send  a  confirmation  message  to that 
window that appeared to come from the user. 
Figure 2. FileMonster confirmation window 
Our  solution  to  this  problem  is  to  provide  users  with 
the  option  of  using  a  secure  file  confirmation  method.  
This  technique  leverages  Windows  NT’s  built-in  support 
for  multiple  desktops  and  the  ability  to  secure  these 
desktops.  A desktop is “an on-screen work area that uses 
icons and menus to simulate the top of a desk” (Microsoft 
Visual  Studio  Help).    An  example  of  where  Windows 
uses  multiple  desktops  is  the  screen  change  that  occurs 
when a user presses Ctrl-Alt-Del.  Regardless of what you 
are  working  on,  the  screen  is  changed  to  reflect  a  new 
desktop with only a dialog box that presents options such 
as Shutdown, Lock Workstation, etc. 
When an application creates a desktop it can control a 
variety  of  security  settings  for  that  desktop.    When  the 
FileMonster performs a secure file confirmation it creates 
a  desktop  that  only  the  FileMonster  program  itself  can 
manipulate.    No  other  program  is  capable  of  sending 
messages  to  this  desktop  or  using  it  to  display  windows.  
To perform a file confirmation, a user must switch to this 
desktop  and  then  choose  to  allow  or  deny  the  requested 
operation.    The  FileMonster  system  can  be  sure  that  the 
confirmation  comes  directly  from  the  user  because  no 
other  programs  can  pass  messages  to  the  dialog  box 
displayed on the secure desktop. 
  The  simple 
level  of  security. 
Providing both a simple file confirmation method and a 
secure  file  confirmation  method  allows  users  to  choose 
their  desired 
file 
confirmation is vulnerable to attacks specifically targeting 