# Title: Protecting Data from Malicious Software

**Authors:** Matthew Schmid, Frank Hill, and Anup K. Ghosh

## Abstract
The corruption or disclosure of sensitive user documents can be one of the most damaging and costly effects of malicious software attacks. Many malicious programs specifically target files that are likely to contain important user data. Researchers have addressed this issue by developing techniques for restricting access to resources on an application-by-application basis. These "sandbox" environments, while effective, can be cumbersome and difficult to use. In this paper, we present a prototype Windows NT/2000 tool that extends the existing set of file-access permissions to address malicious software threats to user data. Management and configuration options make the tool unobtrusive and easy to use. We have conducted preliminary experiments to assess the usability of the tool and to evaluate the effects of our improvements. Our work has produced an intuitive, data-centric method of protecting valuable documents, providing an additional layer of defense beyond existing antivirus solutions.

## 1. Introduction
Despite the efforts of the antivirus community, malicious software continues to pose a significant threat to both businesses and individuals. Malware often appears harmless but carries out its true purpose without the victim's knowledge. A particularly dangerous form of malware is that which remains undetected while performing malicious actions. Viruses may attach themselves to ordinary programs without noticeable effects, Trojans may stealthily steal valuable information, and malicious mobile code may destroy or steal files while a person browses the web.

For the typical user, the greatest threat posed by malware is its ability to steal, modify, or destroy important data. The cost associated with damage to the operating system or other software is negligible compared to the value of the information that a person has labored to produce. The computer and its software are merely tools used to create this data. While corporations may be concerned with side effects such as system availability and the resources required to eradicate an out-of-control virus, users are ultimately concerned with the integrity and confidentiality of the data in their files.

The Windows NT/2000 security model provides users with the ability to protect sensitive documents from access by other users through discretionary access control (DAC). This is in contrast to mandatory access control (MAC), where file permissions are more tightly controlled. Figure 1 shows the Windows NT 4.0 dialog box that enables a user to select file permissions for a document.

![Figure 1. Discretionary access control on Windows NT](figure1.png)

While this security model protects sensitive data from nosy or ill-intentioned colleagues, it does nothing to defend against most malicious software. The reason for this disparity is that malicious software is executed by the user. Once a program is run, it has the ability to change the access permissions on any of the user’s files. Therefore, malicious code can do anything the user could do, including reading, writing to, or destroying any documents belonging to the compromised user.

In this paper, we introduce FileMonster, a prototype tool that extends Windows discretionary access control to better protect important files from damage or snooping by all forms of malicious software. FileMonster shares some characteristics with prior research into application sandboxing but addresses many of the usability issues that have plagued earlier systems. This prototype provides an additional level of protection from malicious software with minimal impact on the normal work environment.

## 2. A Data-Centric Protection Mechanism
Existing access control mechanisms do little to protect files from malicious software. Furthermore, the Windows operating system makes it difficult or impossible to observe how an application is using the file system without the help of a third-party monitoring tool. The prototype described here increases the visibility of access to important documents on your computer by providing two new file system permissions: "confirm on read" and "confirm on write." These permissions require the user to provide confirmation before a program can perform a read or write operation on a protected file, eliminating the possibility that a malicious program can access or alter a protected file without permission.

- **Confirm on Read:** This permission should be used on files whose contents are considered confidential. It requires user confirmation if any program attempts to read data from the file.
- **Confirm on Write:** This permission should be used on files whose valuable contents must not be damaged. It requires user confirmation when a program tries to write to or delete the file.

These permissions can also be combined (e.g., "confirm on access"). We have developed a prototype, named FileMonster, which enforces these permissions on the Windows NT/2000 operating system.

In addition to supporting permissions on a per-file basis, FileMonster allows users to set permissions based on file types (extensions), providing broad protection to a group of files. For example, a user might decide that all Microsoft Excel files (identified by the XLS extension) should be protected with "confirm on read" permission. Individual file permissions always override group permissions, allowing users to tailor file permissions to fit their current needs.

We refer to our system as being data-centric to distinguish it from other research efforts that have investigated application-centric approaches to protecting resources against malicious software. An application-centric approach focuses on restricting the capabilities of applications that a user believes may attempt malicious behavior. The Java sandbox is a well-known commercial example of a security model designed to restrict the behaviors of untrusted software. The Janus prototype, described in [9; 17], is another example of an application-centric approach.

In contrast, a data-centric approach focuses on better protecting resources from misuse by any application executing on the system. In the case of FileMonster, the emphasis is on providing users with an extended set of file permissions to further safeguard important files. In a data-centric approach, the user chooses to protect important data from tampering or snooping. In an application-centric model, the user must decide whether an application should be run in a restricted environment and how it should access system resources. Our prototype is more limited in the type of resources it protects (focusing only on the file system), but we believe this results in a tool that is much easier to configure and use, focusing on the resources that are most important to protect. We believe a data-centric approach is not only easier to manage and understand but is inherently safer because protections are placed around the sensitive resource, not around the untrusted application.

## 3. Security vs. Usability
As with almost any security mechanism, there is generally a trade-off between security and usability. FileMonster allows users to vary a number of security settings to balance security with usability until an acceptable compromise is reached. Here, we explain the features that can be configured by a user and how these features affect the security and usability of the system.

### 3.1. Handling User Confirmations
When a user marks a file such that confirmation is required, FileMonster can request this confirmation in one of two ways:

- **Simple File Confirmation:** This method blocks file access from occurring, then pops up a dialog box asking the user to confirm or deny the action. The dialog box lists the file being accessed, the type of access (read or write), and the application that issued the request. The user can either allow the operation to continue or reject the request.
  
  Using a simple dialog box to receive a confirmation from a user may be sufficient in most situations. However, there is a security weakness in this approach that makes it unsuitable for high-security environments. The flaw is due to the ability of a hostile application to send windowing messages directly to the confirmation dialog box without any input from the user. If a piece of malicious code were designed to thwart FileMonster’s protections, it could attempt to access a protected file, wait for the confirmation window to pop up, and then send a confirmation message to the window that appeared to come from the user.

- **Secure File Confirmation:** To address this problem, FileMonster provides users with the option of using a secure file confirmation method. This technique leverages Windows NT’s built-in support for multiple desktops and the ability to secure these desktops. When FileMonster performs a secure file confirmation, it creates a desktop that only the FileMonster program itself can manipulate. No other program can send messages to this desktop or use it to display windows. To perform a file confirmation, the user must switch to this desktop and choose to allow or deny the requested operation. The FileMonster system can be sure that the confirmation comes directly from the user because no other programs can pass messages to the dialog box displayed on the secure desktop.

Providing both a simple file confirmation method and a secure file confirmation method allows users to choose their desired level of security. The simple file confirmation method is vulnerable to attacks specifically targeting the confirmation dialog, while the secure file confirmation method provides a higher level of security.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.