### Safe
- **Minimum Guard**: 256 KiB
- **CATT Guard**: 128 MiB
- **Row Size**: 2 MiB
- **Safe Configuration**: 128 KiB, 256 KiB (✓)

### Module Configurations
The module was tested in two configurations: default and aggressive. In the aggressive configuration, sample periods and thresholds were reduced by a factor of 10. The protected system was then profiled using these configurations.

### Source Code Modifications
We used the source code freely provided by the authors [1], with a modification to disable the use of the precise store event, as it was unavailable on the Haswell CPUs of our test systems. This change is considered inconsequential to the results of this evaluation, as the profile only uses loads to trigger bit flips.

### Evaluation Results
Table 4 shows the results of an 8 MiB run for two memory setups. We observed a roughly 50% reduction in bit flip counts when ANVIL was in use, with minimal differences between the default and aggressive runs. This suggests that bit flips occurred not due to poor detection sensitivity, but rather due to fundamental issues in identifying which rows are at risk and, consequently, failing to refresh them. The ratio of prevented to unprevented bit flips is consistent with the increased Rowhammer effectiveness due to new insights into memory addressing, as previously shown in Fig. 3. We propose enhancing ANVIL with detailed models of memory addressing to better identify potential Rowhammer targets and accurately refresh them.

### CATT Analysis
Next, we examined CATT [8], which aims to mitigate the damage of Rowhammer attacks crossing the kernel-userspace boundary by partitioning the physical address space into two contiguous regions: one for the kernel and one for userspace, with a "buffer" or "guard" row in between. CATT calculates the size of this guard row by accounting for the number of banks, ranks, DIMMs, and channels of memory in use, multiplying the standard DRAM row size (8 KiB) by each of these factors. This approach assumes a linear and monotonic mapping between physical and DRAM address spaces, which, as shown in Fig. 1, can be false.

Table 5 presents the results for four representative memory configurations, showcasing all combinations of the rank mirroring and on-DIMM remapping features. For every setup marked as unsafe, we consistently found bit flips far enough away in physical address space from both aggressor rows to "jump over" the guard area, thus defeating the linear protection guarantees of CATT. In the "Minimum Guard" column, we provide the minimum size a CATT-like contiguous guard zone needs to fully protect against hammering. In cases where this minimum contiguous guard distance is impractically large, a non-wasteful isolation-based defense must support accurate memory addressing and non-contiguous guard buffers.

### Attack Simulator
To demonstrate Hammertime’s simulator, we implemented several published Rowhammer attacks as exploit models:
- **Page Table Entry Exploits**: These rely on flipping bits in memory used to hold page tables. Previous work [20] suggested exploiting flips in the page frame pointer bits of a PTE. Other useful attacks include setting the U/S bit of a PTE to allow userspace access to a kernel page and clearing the NX bit to mark memory as executable.
- **Dedup Est Machina [7]**: This exploits 1 → 0 flips in bits 0–10 and 52–63 of 64-bit words in a page.
- **Flip Feng Shui [19]**: This relies on triggering bit flips at specific page offsets to corrupt the contents of sensitive files in the page cache.

We evaluated each model with all double-sided flip tables presented in Sect. 5.1. The results are shown in Table 6. The "Min Mem" column represents the minimum amount of physically contiguous memory required (on average) to find one single useful bit flip. The "Time" column is an estimate of the mean time to the first bit flip, assuming precise targeting and 200ms spent on each Rowhammer test.

### Related Work
To our knowledge, there are no studies systematically applying accurate memory addressing models to implement either Rowhammer attacks or defenses. Similarly, there are no studies looking into address manipulation beyond the memory controller in the context of exploiting Rowhammer.

Kim et al. [13] first described the Rowhammer bug in widespread commodity hardware, identifying the root cause as the repeated toggling of the DRAM row buffer. They found that many bits are susceptible to flips and that flipping bits requires modest amounts of memory accesses (fewer than 150K in their experiments).

Seaborn [20] presented the first concrete Rowhammer exploits, escaping the Google Native Client (NaCl) sandbox and escalating local privileges on Linux. Gruss et al. [9] showed that double-sided Rowhammer can be performed from the browser without CLFLUSH and /proc/self/pagemap. Qiao et al. [18] demonstrated how Rowhammer can be triggered using non-temporal memory instructions. Bosman et al. [6] showed that bits can be flipped from JavaScript using probabilistic double-sided Rowhammer without huge pages.

Research so far has predominantly targeted DDR3 RAM and x86 processors. Aichinger [3] analyzed the prevalence of the Rowhammer bug on server systems with ECC memory, while Lanteigne [14] performed an analysis on DDR4 memory. Van der Veen et al. [21] demonstrated that ARM-based mobile devices are equally susceptible to Rowhammer. New attack techniques focus on the DRAM itself, such as Lanteigne's [14,15] examination of data and access patterns influencing bit flip probabilities on DDR3 and DDR4 memory on Intel and AMD CPUs. Pessl et al. [17] demonstrated that reverse engineering bank DRAM addressing can reduce the search time for Rowhammer bit flips.

### Conclusion
Rowhammer continues to be a significant security concern, with increasingly sophisticated attacks surfacing in both industry and academia. Defenses have been developed to prevent or mitigate the security impact of bit flips. However, both attacks and defenses often make simplifying assumptions about memory layout and addressing, limiting their generality, reproducibility, and effectiveness.

To address this gap, we analyzed how an accurate memory addressing model impacts Rowhammer. Our analysis shows that software's ability to trigger and protect against Rowhammer is greatly influenced by the addressing schemes used by the memory subsystem. We introduced an end-to-end model of DRAM addressing, including the previously unexplored techniques of rank mirroring and on-DIMM remapping. Using this model, attackers can trigger significantly more bit flips than previously assumed, even on DIMMs where the state of the art fails. We also showed that existing defenses do not properly account for memory addressing and can be bypassed by informed attackers.

To support our work, we introduced Hammertime, a software suite for Rowhammer studies. Hammertime allows researchers to profile a large set of DIMMs for bit flips and later use the resulting data to simulate the Rowhammer defect in software. More importantly, Hammertime makes Rowhammer research faster, more comparable, and more reproducible. To foster further Rowhammer research and support reproducible and comparable studies, we are releasing Hammertime as open source.

### References
1. ANVIL source code (2016). https://github.com/zaweke/rowhammer/tree/master/anvil. Accessed 03 Apr 2018
2. Advanced Micro Devices: BIOS and Kernel Developers Guide (BKDG) for AMD Family 15h Models 60h–6Fh Processors, May 2016
3. Aichinger, B.: DDR memory errors caused by row hammer. In: HPEC 2015 (2015)
4. Arcangeli, A.: Transparent hugepage support. In: KVM Forum (2010)
5. Aweke, Z.B., et al.: ANVIL: software-based protection against next-generation rowhammer attacks. In: ASPLOS 2016 (2016)
6. Bosman, E., Razavi, K., Bos, H., Giuﬀrida, C.: Over the edge: silently owning Windows 10’s secure browser. In: BHEU 2016 (2016)
7. Bosman, E., Razavi, K., Bos, H., Giuﬀrida, C.: Dedup Est machina: memory deduplication as an advanced exploitation vector. In: SP 2016 (2016)
8. Brasser, F., Davi, L., Gens, D., Liebchen, C., Sadeghi, A.R.: Can’t touch this: software-only mitigation against rowhammer attacks targeting kernel memory. In: 26th USENIX Security Symposium (USENIX Security 2017), Vancouver, BC, pp. 117–130. USENIX Association (2017). https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/brasser
9. Gruss, D., Maurice, C., Mangard, S.: Rowhammer.js: a remote software-induced fault attack in JavaScript. In: Caballero, J., Zurutuza, U., Rodríguez, R.J. (eds.) DIMVA 2016. LNCS, vol. 9721, pp. 300–321. Springer, Cham (2016). https://doi.org/10.1007/978-3-319-40667-1_15
10. JEDEC: DDR3 SDRAM STANDARD. JESD79-3C, November 2008
11. Kasamsetty, K.: DRAM scaling challenges and solutions in LPDDR4 context. In: MemCon 2014 (2014)
12. Khan, S., Wilkerson, C., Wang, Z., Alameldeen, A.R., Lee, D., Mutlu, O.: Detecting and mitigating data-dependent DRAM failures by exploiting current memory content. In: MICRO 2017 (2017)
13. Kim, Y., et al.: Flipping bits in memory without accessing them: an experimental study of DRAM disturbance errors. In: ISCA 2014 (2014)
14. Lanteigne, M.: A Tale of Two Hammers: A Brief Rowhammer Analysis of AMD vs. Intel, May 2016. http://www.thirdio.com/rowhammera1.pdf
15. Lanteigne, M.: How Rowhammer Could Be Used to Exploit Weaknesses in Computer Hardware. SEMICON China (2016)
16. Meza, J., Wu, Q., Kumar, S., Mutlu, O.: Revisiting memory errors in large-scale production data centers: analysis and modeling of new trends from the field. In: DSN 2015 (2015)
17. Pessl, P., Gruss, D., Maurice, C., Schwarz, M., Mangard, S.: DRAMA: exploiting DRAM addressing for cross-CPU attacks. In: SEC 2016 (2016)
18. Qiao, R., Seaborn, M.: A new approach for rowhammer attacks. In: 2016 IEEE International Symposium on Hardware Oriented Security and Trust (HOST), pp. 161–166, May 2016. https://doi.org/10.1109/HST.2016.7495576
19. Razavi, K., Gras, B., Bosman, E., Preneel, B., Giuﬀrida, C., Bos, H.: Flip Feng Shui: hammering a needle in the software stack. In: SEC 2016 (2016)
20. Seaborn, M.: Exploiting the DRAM rowhammer bug to gain kernel privileges. In: BH 2015 (2015)
21. van der Veen, V., et al.: Drammer: deterministic rowhammer attacks on mobile platforms. In: CCS 2016 (2016)
22. Xiao, Y., Zhang, X., Zhang, Y., Teodorescu, M.R.: One bit flips, one cloud flops: cross-VM row hammer attacks and privilege escalation. In: SEC 2016 (2016)