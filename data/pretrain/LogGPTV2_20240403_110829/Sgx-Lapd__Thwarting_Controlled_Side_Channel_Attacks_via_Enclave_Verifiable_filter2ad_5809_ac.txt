forward way is
to manipu-
late the page mapping (i.e.,
the P-bit in the page table)
and make
target page
unmapped. Then any code exe-
cution access will trigger a non-
present (NP) page fault. This
approach has been used by
Xu et al.
[31]. However, we
also determined that there is
a second way to perform the
attack by making the page non-
executable when CPU paging
mode is PAE or IA-32e to
trigger a non-executable (NX)
page fault. Therefore, we pro-
vide two strategies to detect
these faults.
We can notice that
Fig. 4. Final disassembled code for
function
WelcomeMessage after Sgx-Lapd instrumentation
for non-present page fault detection.
We note that in terms of
detection capability, the NX
page fault approach can detect all attacks including both non-present and non-
executable faults. However, the NP page fault approach cannot detect non-
executable page faults. Therefore, in practice we recommend the use of the NX
approach. Only when the CPU is set in non PAE nor IA-32e mode will the NP
approach be useful. We provide both approaches just for the completeness of the
defense.
(I). Detecting NP Page Faults. Since we have instrumented our veriﬁcation
code in the enclave binary at each cross 4 KB-page control ﬂow transfer point,
we just need to invoke a target page read (basically inject an explicit page fault)
and check whether indeed there is a page fault. If so, a page fault attack is
conﬁrmed by checking ﬁeld EXITINFO.VECTOR. To show how Sgx-Lapd really
performs this, we illustrate the ﬁnal disassembly of function WelcomeMessage in
our running example in Fig. 4.
for
in
WelcomeMessage (Fig. 1), we each instrumented 49 bytes of code right before
the four direct control ﬂow transfers
368
Y. Fu et al.
them. The last control ﬂow transfer instruction retq has 47 bytes of instru-
mented code. More speciﬁcally, for the ﬁrst (“je 404049”) and third (“jmp
4040df”) control ﬂow transfers, our instrumented code directly performs a
within-page jump (i.e., “jmp 40403e” and “jmp 4040a7”) because there is no
need for the veriﬁcation, whereas for the second (“callq 403000”), and forth
(“callq 402000”) direct function call, and ﬁfth (“retq”) function return, our
instrumented code ﬁrst injects a target page read, and then traverses EXITINFO
in SSA to detect whether there is a real page fault.
The full disassembly of our page fault veriﬁcation code for the second control
ﬂow transfer “callq 403000” is presented in Fig. 4 from 0x404040 to 0x404070.
In particular, our instrumented code will ﬁrst save the ﬂag register via pushfq,
rax, rsi, and rdx in the stack, and then load the target address into rsi, i.e.,
“lea -0x104b(%rip), %rsi”. After that, it loads the base address of GPRSGX
into %rax, and assigns a zero to the ﬁeld EXITINFO.VECTOR (to clear any prior
exceptions recorded in the vector). Then it performs a one-byte memory read
access at the target address, i.e., “mov (%rsi), %dl”, to inject a page fault
to test if there is any controlled side channel on the target page. After that,
the enclave code checks the EXITINFO.VECTOR ﬁeld. If it is set to be 0xe, a
page fault is detected (because there is a page fault for the three just executed
instructions, and it must come from attack since enclave memory is not supposed
to be swapped out) and we abort the execution; otherwise, we pop those saved
registers and continue the execution.
Detecting NX Page Faults. Instead of using “mov (%rsi), %dl” to inject a
read page fault, we need to really execute the target page in order to detect the
NX page fault if there is any. The veriﬁcation can be performed at either the
destination page or the source page (if we inject a callq *%rsi and retq pair
in the source and target).
If we perform the veriﬁcation at the destination page, we need to track the
source address (because we need to allow cross 2 MB transfers) because a target
page can be invoked by many diﬀerent sources. On the other hand, since at each
control ﬂow transfer point we already know the source address, we decide to
take the second approach, namely inject a callq *%rsi in the source page, and
a retq in the target page to quickly return. To this end, we need to inject a
retq in the beginning of each determined basic block, and probe the page fault
by quickly returning from the target. We omit the details for brevity here since
most of the code is similar to those in Fig. 4.
4 Detailed Design
An overview of Sgx-Lapd is illustrated in Fig. 5. There are three key com-
ponents: an Sgx-Lapd-compiler and Sgx-Lapd-linker that work together to
produce the enclave code that contains large page veriﬁcation code at any cross-
small page control ﬂow transfer points, and an Sgx-Lapd kernel module that
runs in kernel space to provide the 2 MB pages for enclave code. In this section,
we provide the detailed design for these three components.
SGX-LAPD: Thwarting Controlled Side Channel Attacks
369
4.1 SGX-LAPD-Compiler
The goal of Sgx-Lapd-compiler is to
automatically insert the 4 KB page fault
detection code into each cross page
control ﬂow transfer (CFT) at various
instructions such as call/jmp/jcc/ret.
In particular, our compiler needs to track
the source and target addresses for the
CFTs, and also needs to keep the start-
ing address of the inserted code such that
we can later patch our instrumented code
to NOP instructions (or other semanti-
cally equivalent ones) if the CFT is within
a page. Note that only after the code is
generated can this patching be performed
(by our Sgx-Lapd-linker) because we do
not know the ﬁnal concrete address before
that.
The Meta-data Used
Compiler. We deﬁne a data structure that tracks (1) the starting address of
the inserted code, (2) the source, and (3) the target address, for each encoun-
tered CFT (except retq since we do not know its target address statically).
We store this information in a special data section we created and we call it
Fig. 5. Sgx-Lapd overview.
by Our
Fig. 6. Examples of Sgx-Lapd instrumented code label and the corresponding meta-
data.
370
Y. Fu et al.
.SgxLapdCodeLabel. An example of these code labels is presented in Fig. 6. In
particular, for the ﬁrst CFT “je 20c4”, we store the starting address of the
inserted code at oﬀset 0, which is the symbolic code label .LINST2 0 12. Then
at oﬀset 8 (recall that we are working on a 64-bit architecture), we store the
source address of this CFT, which is .LINST2 0 11. Finally, at oﬀset 0x10, we
store the target address, which is .LINST2 1 8.
Meanwhile, during the compilation phase, we only know the symbol addresses
for the code labels and the ﬁnal concrete address is resolved during the link-
ing phase. We have to thus create relocation entries to store these code label
addresses and let the linker eventually resolve them. To this end, we also cre-
ate relocation entries for each .SgxLapdCodeLabel item. After compilation, the
value for these relocation entries will be the logic address within that partic-
ular object ﬁle. For instance, for the ﬁrst entry .LINST2 0 12, whose value is
.text+0x0200d, its ﬁnal concrete address will be resolved by the linker (once the
base address of .text is resolved). Also, mainstream compilers typically main-
tain the labels for each basic block starting address and CFT target address. We
just need to parse the meta-data provided by compilers and use them for our
purposes.
The Instrumentation Algorithm. At a high level, to perform the instrumen-
tation, our compiler will iterate through each compiled function right after the
code generation phase. For each basic block within a function, we will look for
the CFT instructions (i.e., call/jmp/ret and conditional jumps jcc). For each
CFT instruction, we get its source address and destination address and store
them in the corresponding .SgxLapdCodeLabel section. Note for retq, since we
do not know its target address statically, no target address meta data is needed
for this instruction.
Since there are diﬀerent types of CFTs, we have to instrument slightly dif-
ferent veriﬁcation code. Note that the size diﬀerence is due to the diﬀerent
instructions used to fetch the target address for diﬀerent CFT. Speciﬁcally, to
detect NP page faults, we insert 49 bytes of assembly code if it is a direct CFT,
and this assembly code is formed from a macro template with symbols as macro
parameters. For indirect CFT, we insert 50 bytes of assembly if it is an indirect
CFT through memory (e.g., “call (%rax)”), otherwise 45 bytes if it uses reg-
ister (e.g., “call %rax”), right before the CFT instructions. For return CFT,
we insert 47 bytes of assembly. For NX page fault detection, we insert 56 bytes,
57 bytes, 52 bytes, and 53 bytes respectively each for direct CFT, indirect CFT
through memory, indirect CFT through register, and return CFT. We also store
the starting address of the inserted code into .SgxLapdCodeLabel for direct
CFTs. Note that the inserted assembly code will use the destination address
symbol for the direct CFTs, and these symbol addresses will be automatically
resolved during the linking phase. For all indirect CFTs (e.g., “callq %rax”
and retq), we will directly use the correspondingly run-time value to access the
target page in the inserted assembly code. In other words, we do not need to
generate any meta-data for indirect CFTs as their target addresses are computed
at runtime, and they also do not need patching.
SGX-LAPD: Thwarting Controlled Side Channel Attacks
371
4.2 SGX-LAPD-Linker
Symbol Address Resolution. The compiler generates the object ﬁle for each
input source ﬁle using a logic address starting at oﬀset 0. The function or global
variable references are all through symbols. Their concrete addresses are not
known until linking time, when the linker combines the same section (e.g., .text,
.data) from each object ﬁle. To assist the linker in calculating the address for
each symbol, there is a relocation entry specifying the relative address to its
section. Sgx-Lapd leverages this mechanism, and generates symbols for each
label that we want to know the ﬁnal address of into the .SgxLapdCodeLabel
section and the corresponding relocation record into the .RELOCATION section.
Later, in the linking phase, the linker can resolve the concrete address for each
label. For example, .LINST2 0 12 is resolved as 0x40400d, as shown in Fig. 6.
Code Optimization. Our Sgx-Lapd-compiler has instrumented each CFT due
to the fact that we do not know whether any of these transfers will cross a 4 KB
page boundary in the ﬁnal executable. Once the code is ﬁnally linked, we can
scan the ﬁnal executable to patch the overly instrumented code.
Thanks to our tracked meta-data, it becomes extremely simple to patch
this code. Speciﬁcally, we know where to start the patching because our
.SgxNypdCodeLabel section tracks the starting address of the instrumented
code. We also know whether an instrumented CFT crosses a 4 KB page boundary
or not because we also know the source and destination addresses of this transfer
from .SgxNypdCodeLabel. Note that retq is not included in this optimization
since its destination address is unknown statically.
While we could patch all the inserted bytes to NOP instructions, we can just
insert an unconditional jump to directly skip the unnecessary code instead. We
also know how many bytes our instrumented code occupies (e.g., 49 bytes for
direct CFT for non-present page fault detection). As such, we can directly rewrite
the ﬁrst two bytes in the beginning of the instrumented code to an unconditional
jump instruction (e.g., “eb 2f” to skip the remaining 47 bytes of the 49 bytes
of inserted code), as shown in the example code for the ﬁrst and third CFT
instructions in Fig. 4.
4.3 SGX-LAPD-Kernel Module
The last component of Sgx-Lapd is the kernel module that is responsible for
providing 2 MB pages for enclave code. While we can rewrite the OS kernel to
provide 2 MB pages for all processes, such a design would waste page resources
for many other non-SGX processes. Therefore, we design a kernel module to
exclusively manage the page tables for enclave code.
Meanwhile, to really use SGX, Intel provides a number of hardware level
data structures such as the Enclave Page Cache Map (EPCM) to manage the
enclave page cache (EPC), a secure storage used by the CPU to store the enclave
pages [14]. An enclave must run from the EPC, which is protected from non-
enclave memory accesses. The EPC is initialized by the BIOS during boot time,
and later each enclave process can use privileged instructions such as ENCLS
372
Y. Fu et al.
[EADD] to add a page. In other words, we can directly instrument the corre-
sponding SGX kernel code to manage the enclave process page tables.
In particular, the SGX kernel module is responsible for the management of
enclave memory allocation and virtual-to-physical mapping. Each enclave page
is allocated from a pool of EPC pages, and each EPC page has a size of 4 KB.
The process of adding an EPC page into an enclave is by ﬁrst mapping a 4 KB
virtual page to a 4 KB EPC page, then copying the corresponding contents to
that EPC page via the EADD instruction. While our Sgx-Lapd-kernel module
cannot directly add a 2 MB EPC, it groups 512 small pages into a 2 MB page.
Note that those 512 smaller pages need to be contiguous in the physical address
space, and the physical address of the ﬁrst page is 2 MB aligned. The SGX kernel
module manages all the EPC pages and knows the physical address for each EPC
page. We can control which physical pages are mapped to EPC pages.
5 Implementation
We have implemented Sgx-Lapd for X86-64 Linux. We did not implement any-
thing from scratch; instead we implemented Sgx-Lapd-compiler atop LLVM
3.6.2, Sgx-Lapd-linker atop ld−2.24, and Sgx-Lapd-kernel module atop the
Intel SGX kernel driver. Below we share some implementation details of interest.
Speciﬁcally, we modiﬁed the LLVM compilation framework to add a new
Machine Function pass into the LLVM backend. This new pass operates on
LLVM’s machine-dependent representation code. Note that our pass is running
in the end of the compilation phase, so the code is ready to be emitted into
assembly code. This also ensures that our inserted code is not optimized out
by other passes. Inside this pass, we iterate each instruction within each basic
block in order to identify all CFT instructions. For each CFT, the page fault
detection code is inserted into the same basic block before the CFT instruction.
We also add a new data section named .SgxLapdCodeLabel inside MCObject
FileInfo class during the initialization phase. The .SgxLapd CodeLabel section
is like the debug info section and can be removed by using the “strip -R
.SgxLapdCodeLabel” command. Later in AsmPrinter, where the object ﬁle is
created, we emit the meta data into the .SgxLapdCodeLabel section. In total,
we added 1, 500 LOC to the LLVM framework.
To perform the linking of our compiled code, we modiﬁed the linker script to
make sure the binary will be loaded into a 2MB-aligned starting address. Our
linker also needs to use the meta-data inside the ﬁnal ELF to optimize our instru-
mented code. We implemented our own optimization pass and integrated with
linker ld. Basically, we parse the ELF header to locate the .SgxLapd CodeLabel
section. Then the meta-data is used to decide whether each control ﬂow transfer
crosses a 4 KB page boundary. Control ﬂow transfers that happen inside the
same page or cross a 2 MB page boundary are considered valid (no veriﬁcation
check) and thus we insert unconditional jump to skip the veriﬁcation code for
those CFTs. In total, we added 150 LOC into ld.
Finally, we modiﬁed the Linux SGX kernel driver (initially provided by
Intel) to support 2 MB paging, which is only applied to the code pages of an
SGX-LAPD: Thwarting Controlled Side Channel Attacks
373
enclave binary. Note that the data pages are still 4 KB. We ﬁrst instrumented
enclave create in the SGX kernel driver to record the base loading address
and size of an enclave binary. We also make sure the EPC pages allocated to the
enclave binary are contiguous and starting at a 2 MB aligned physical address.
Until an EINIT is executed, the enclave is not permitted to execute any enclave
code, so before the execution of EINIT, all the enclave pages have been assigned
and initialized. We can group each block of 512 small pages into a 2 MB page by
modifying the page table for the enclave process. In total, we added 200 LOC
into the SGX kernel driver.
6 Evaluation
In this section, we present our evaluation result. We ﬁrst describe how we cre-
ate the benchmark programs and set up the experiment in Sect. 6.1, and then
describe detailed result in Sect. 6.2.
6.1 The Benchmark and Experiment Setup
We have tested Sgx-Lapd using two set of benchmarks: one is a manually ported
nbench 2.2.3, which we call SGX-nbench, that runs atop a real SGX platform,
and the other is the SPEC2006 benchmark that was not ported to SGX. It is
important to note that no SGX applications currently exist that we can directly
test, but we want to test the results of real SGX performance imposed by our
solution. We therefore manually ported nbench into our SGX-nbench, which can
be used to measure the true performance for any real SGX solutions. Meanwhile,
since porting program to SGX platform requires non-trivial eﬀort, SPEC2006 is
in not running atop SGX enclave. We used SPEC2006 to exclusively measure
how heavy of code instrumentation is for real programs.
SGX-nbench. We ported nbench 2.2.3, which contains 10 tests, to SGX-nbench.
Speciﬁcally, we ported each benchmark to run inside an enclave in order to
measure actual enclave performance. The diﬃculty of this task is that porting
an application to run in SGX is nontrivial; libraries will not be available unless
they are statically linked, and all system calls must be made outside the enclave.
In addition, enclaves cannot execute certain instructions. Therefore, much of the