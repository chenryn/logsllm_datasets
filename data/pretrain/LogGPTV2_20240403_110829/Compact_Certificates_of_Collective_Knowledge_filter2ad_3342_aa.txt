title:Compact Certificates of Collective Knowledge
author:Silvio Micali and
Leonid Reyzin and
Georgios Vlachos and
Riad S. Wahby and
Nickolai Zeldovich
6
9
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Compact Certiﬁcates of Collective Knowledge
Silvio Micali∗†, Leonid Reyzin∗‡, Georgios Vlachos§, Riad S. Wahby∗¶, Nickolai Zeldovich∗†
∗Algorand
†MIT CSAIL
‡Boston University
§Axelar and University of Waterloo
¶Stanford
PI:EMAIL, PI:EMAIL, georgios@axelar.network, PI:EMAIL, PI:EMAIL
Abstract—We introduce compact certiﬁcate schemes, which
allow any party to take a large number of signatures on a
message M, by many signers of diﬀerent weights, and compress
them to a much shorter certiﬁcate. This certiﬁcate convinces
the veriﬁers that signers with suﬃcient total weight signed M,
even though the veriﬁer will not see—let alone verify—all of the
signatures. Thus, for example, a compact certiﬁcate can be used
to prove that parties who jointly have a suﬃcient total account
balance have attested to a given block in a blockchain.
After deﬁning compact certiﬁcates, we demonstrate an eﬃ-
cient compact certiﬁcate scheme. We then show how to imple-
ment such a scheme in a decentralized setting over an unreliable
network and in the presence of adversarial parties who wish to
disrupt certiﬁcate creation. Our evaluation shows that compact
certiﬁcates are 50–280× smaller and 300–4000× cheaper to verify
than a natural baseline approach.
I. Introduction
Suppose many people wish to attest to having witnessed an
important event. They could each sign an attestation message
M that has the relevant information about the event. The
resulting collection of signatures will constitute a certiﬁcate
of this event. This certiﬁcate, however, will be quite large and
will take a long time to verify. Our goal is to reduce the size
and veriﬁcation time by combining multiple signatures into a
single compact certiﬁcate. Moreover, we want to ensure that,
even though each attestor has a signing public key, the veriﬁer
will need access only to a small subset of these keys.
We generalize the above problem in two ways. First, we wish
to go beyond public keys and signatures to any NP statements
and their witnesses (provided as attestations); signatures are
then just a special case, with each NP statement comprising a
public key and the message M. Second, our attestors are not
all equal; rather, they have assigned weights. Our goal is to
show that attestors with suﬃcient total weight have provided
witnesses to their corresponding NP statements.
Our ﬁrst contribution is to deﬁne compact certiﬁcate
schemes in terms of their functionality and security in
Section III. Crucially, our deﬁnition ensures that the veriﬁers
never need to receive or store a linear amount of information:
they need neither all the NP statements nor all the weights,
but only a commitment to this information.
We then construct the ﬁrst ever compact certiﬁcate scheme
in Section IV. Using our scheme, anyone in possession of
the signatures (more generally, NP witnesses) can reduce
the size of the attestations and the veriﬁcation time from
linear to logarithmic in the total number of public keys (more
generally, NP statements). We prove the security of our scheme
in Section V-A and analyze its concrete security parameters
in Section V-B.
Compact certiﬁcates do not assume that all attestors have
provided their attestations. Some of the attestors may not have
witnessed the event, or may be oﬀ-line or dishonest. A compact
certiﬁcate can be formed as long as any set of attestors with
suﬃcient weight have provided correct attestations.
After deﬁning and constructing compact certiﬁcates, we
consider their use in situations when some attestors are honest
and some are adversarial. We consider two possible security
goals in such situations, both assuming some bound on the
fraction of adversarial attestors. The ﬁrst, easier to achieve,
goal, is to produce a compact certiﬁcate guaranteeing that
at least one honest attestor testiﬁed to a given statement.
However, even honest attestors may have diﬀerent views of
what actually happened. Thus, the second, more diﬃcult, goal,
is to produce an incontrovertible certiﬁcate, i.e., to produce
a compact certiﬁcate guaranteeing that a majority of honest
attestors testiﬁed to the statement (and thus, if honest attestors
are assumed not to contradict themselves, it is computationally
infeasible to produce an incontrovertible certiﬁcate for a
contradictory statement, because any contradictory statement
would get only a minority of attestors). We analyze these goals
in Section VI.
A. Performance Evaluation
We implement our compact certiﬁcate scheme and evaluate
its performance experimentally in Section VII. For one million
attestors and 128-bit security, the cost of creating the certiﬁcate
(excluding the cost of verifying the attestations themselves)
is about 6 seconds. Certiﬁcate size ranges from 120 kBytes
to 650 kBytes and veriﬁcation cost ranges from 9 msec to
72 msec, depending on the fraction of cooperating attestors.
Compared to the naïve approach of retrieving and verifying a
large fraction of all attestors’ signatures, compact certiﬁcates
are roughly 50–280× smaller and take roughly 300–4000×
less time to verify.
B. Blockchain Application
We also explore a speciﬁc application of compact certiﬁ-
cates: certifying a recent state in a blockchain that uses stake-
weighted voting (e.g., [13, 37, 38, 56]). The correctness of
a typical blockchain is diﬃcult to verify for someone who
© 2021, Silvio Micali. Under license to IEEE.
DOI 10.1109/SP40001.2021.00096
626
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
is not participating in real time: the veriﬁer must start with
the genesis block and proceed forward one block at a time,
checking that each block was properly added according to
the rules of the speciﬁc blockchain. Instead, using a compact
certiﬁcate scheme, we can have blockchain participants sign
a recent block after it has been decided upon, and collect
the signatures to form a compact certiﬁcate for this block.
The weight of a signer, in this case, could be the signer’s
account balance or stake in the blockchain. This process is
meant to supplement, not supplant, existing block consensus
mechanisms; thus, we can choose to have it performed only
for every Nth block for some N.
Assuming the adversary controls less total stake than the
weight of the signers proven by the compact certiﬁcate, the
veriﬁer can be assured that the block was signed by at least
one honest participant and is thus correct. To determine
the stake, the veriﬁer could use some pre-speciﬁed earlier
block—for example, the most recent block that has a compact
certiﬁcate. This would allow much faster veriﬁcation of the
whole blockchain, starting from the genesis block, because one
would need to verify only a 1/N fraction of blocks, and each
block veriﬁcation would use less CPU time and bandwidth,
because of the compact certiﬁcate attesting to its correctness.
The blockchain application presents additional challenges
beyond the construction of the compact certiﬁcate in a
standalone, centralized setting. A design needs to address
how frequently to certify blocks, how to determine who will
collect the signatures, how to determine if enough signatures
have been collected, how the signatures will be retransmitted
in case of network errors, and how retransmission will stop
without creating vulnerabilities to denial of service of attacks.
We address these challenges in Section VIII.
C. Related Work
Signatures: Aggregate signatures (which compress signatures
of multiple signers on diﬀerent messages) [1, 22, 23, 54,
55, 72, 79], multisignatures (which compress signatures of
multiple signers on the same message) [4–6, 18, 21, 25, 30,
32, 43, 44, 59, 62, 65, 71, 74, 80, 82], threshold signatures
(which allow multiple signers to coordinate producing a single
signature) [18, 21, 29, 39–42, 50–53, 64, 70, 85, 87] and
designs that combine their aspects (e.g., [2, 66]) can help
reduce signature size. However, all these approaches require
considerably more coordination than compact certiﬁcates.
First, consider aggregate signatures and multisignatures.
These schemes require special-purpose designs, in contrast
to compact certiﬁcates, which work with any underlying
signature scheme (and, more generally, with any NP statement).
Moreover, the veriﬁer of aggregate signatures and multisigna-
tures needs to know all the public keys that participated in
the signing process, making sublinear-size certiﬁcates and/or
sublinear-time veriﬁcation impossible.
Threshold signatures apply secure multi-party computation
to key generation and signing, and thus in principle work
with any signature scheme. In contrast to compact certiﬁcates,
however, they require the signers to coordinate (exchange mes-
sages) during key generation and, depending on the scheme,
also during computation. Moreover, a compact certiﬁcate
scheme can be used regardless of the number of attestors
who participated, while in a threshold signature scheme, the
minimum required number of signers is set at key generation
time and cannot be arbitrarily changed.
Finally, we emphasize that a compact certiﬁcate scheme
is designed to handle attestors of varying weights—a feature
generally not present in the aforementioned signature schemes.
And, of course, compact certiﬁcates can handle any NP
statement, not just a signature veriﬁcation predicate.
Succinct arguments: Several lines of work on succinct non-
interactive arguments of knowledge (SNARKs) [3, 8, 9, 11, 12,
16, 17, 24, 34–36, 47–49, 58, 73, 83, 90, 91] allow a prover
to construct a short proof for any NP statement. In principle
a SNARK could be used to generate a compact certiﬁcate,
in essence by proving a statement that veriﬁes some or all
attestors’ signatures. In practice, the cost of using this approach
for a large number of attestors is prohibitive: for commonly
used SNARKs, 10 ms is a conservative estimate for the cost of
proving validity of one attestor’s signature [81, §4.4 and Fig. 3],
meaning that constructing a compact certiﬁcate for one million
users would take well over an hour. Under the same conditions,
our scheme’s proving cost is about 6 seconds (§VII).
A better approach is to combine SNARKs and compact
certiﬁcates: rather than proving validity of attestors’ signatures
directly, prove knowledge of a valid compact certiﬁcate.
This approach would reduce the SNARK’s proving costs by
orders of magnitude (because the compact certiﬁcate veriﬁer
only checks a small number of attestors’ signatures) while
potentially reducing certiﬁcate size and veriﬁcation cost. We
leave evaluating this approach to future work.
II. Background
We assume familiarity with Merkle trees [75] and the
cryptographic modeling of hash functions as random oracles
[7]. All hash functions used in this paper—including those
used to build a Merkle tree—will be modeled as random
oracles (a reader interested in a detailed formalization of
Merkle trees built with random oracles may see [10, §2.2 and
§3.1]). We will denote the output length of a hash function
by λ.
A. Vector Commitments
Vector commitments (introduced in [31, 68]) provide a way
to commit to a list of values and then eﬃciently reveal only a
subset of those values. These commitments are binding, but not
hiding. Note that vector commitments with the properties listed
below can be provided by Merkle trees [75] (see Appendix A),
by algebraic techniques [19, 28, 31, 33, 57, 63, 67, 68, 88, 89],
or by polynomial commitments (introduced in [60]; see, e.g.,
[20, 27] for an overview) adapted to vectors per [57, Appx.
C].
Vector Commitment Functionality: A vector commitment
consists of three algorithms: Commit(A) takes a list A of values
and produces a short output C; ComProve(i, A) produces
a proof πi; and ComVerify(C, i, v, πi) outputs T (“true” or
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
627
“accept”) if A[i] = v and C and πi were correctly produced via
Commit and ComProve, respectively. Since there is no hiding
property, we assume these algorithms are deterministic.