User: 如何自动化部署Docker容器？请提供脚本代码。
Assistant: 自动化部署 Docker 容器的方法主要有两种，一种是使用 Docker Compose，另一种是使用脚本。

以下是使用 Docker Compose 的示例：

1. 创建 docker-compose.yml 文件：

```yml
version: '3.3'
services:
  nginx:
    image: nginx
    container_name: nginx
    restart: always
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
```

2. 在同一目录下创建 nginx.conf 文件：

```conf
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    gzip  on;

    server {
        listen       80;
        server_name  localhost;

        location / {
            proxy_pass  http://web:3000;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }
}
```

3. 使用 docker-compose up 启动容器：

```bash
docker-compose up -d
```

以上步骤将自动拉取 Nginx 镜像，创建一个名为 nginx 的容器，并将 ./nginx.conf 文件挂载到容器的 /etc/nginx/nginx.conf 文件中，然后将容器的 80 端口映射到主机的 80 端口，最后将容器加入 app-network 网络中。

以下是使用脚本的示例：

1. 创建 deploy.sh 脚本文件：

```bash
#!/bin/bash

# 拉取最新代码
git pull origin master

# 构建 Docker 镜像
docker build -t myapp:latest .

# 停止并删除旧容器
docker stop myapp
docker rm myapp

# 启动新容器
docker run -d --name myapp -p 3000:3000 myapp:latest
```

2. 添加可执行权限并运行脚本：

```bash
chmod +x deploy.sh
./deploy.sh
```

以上步骤将自动拉取最新代码，构建 Docker 镜像，停止并删除旧容器，然后启动新容器。需要注意的是，这种方法需要手动配置 Nginx 反向代理等具体部署步骤。