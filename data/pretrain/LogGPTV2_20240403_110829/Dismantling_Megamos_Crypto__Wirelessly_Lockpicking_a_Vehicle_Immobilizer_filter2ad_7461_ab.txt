such an immobilizer is enforced by law. For example, ac-
cording to European Commission directive (95/56/EC)
it is mandatory that all cars sold in the EU from 1995
are ﬁtted with an electronic immobilizer. Similar reg-
ulations apply to other countries like Australia, New
Zealand (AS/NZS 4601:1999) and Canada (CAN/ULC
S338-98). Although in the US it is not required by law,
according to the independent organization Insurance In-
stitute for Highway Safety (IIHS), 86 percent of all new
passenger cars sold in the US had an engine immobilizer
installed [55].
An electronic car immobilizer consists of three main
components: a small transponder chip which is embed-
ded in (the plastic part of) the car key, see Figure 1(b);
an antenna coil which is located in the dashboard of the
vehicle, typically around the ignition barrel; and the im-
mobilizer unit that prevents the vehicle from starting the
engine when the transponder is absent.
The immobilizer unit communicates through the an-
tenna coil and enumerates all transponders that are in
proximity of ﬁeld. The transponder identiﬁes itself and
waits for further instructions. The immobilizer chal-
lenges the transponder and authenticates itself ﬁrst. On
a successful authentication of the immobilizer unit, the
transponder sends back its own cryptographic response.
Only when this response is correct, the immobilizer unit
enables the engine to start.
The immobilizer unit is directly connected to the in-
ternal board computer of the car, also referred to as Elec-
trical Control Unit (ECU). To prevent hot-wiring a car,
the ECU blocks fuel-injection, disables spark-plugs and
deactivates the ignition circuit if the transponder fails to
authenticate.
2.2 Hardware setup
We used the Proxmark III to eavesdrop and com-
municate with the car and transponder.
This is a
generic RFID protocol analysis tool [56] that sup-
ports raw data sampling at a frequency of 125 kHz.
We implemented a custom
ﬁrmware and FPGA design
that supports the modulation
and encoding schemes of
Megamos Crypto transpon-
ders.
The design samples
generic analog-digital con-
verter
(ADC) values and
interpret
them in real-time
in the micro-controller. We
have
com-
mands to eavesdrop, read and emulate a transponder.
Our library is able to decode ﬁeld and transponder
modulation simultaneously and is very precise in timing.
Figure 3: Proxmark 3
implemented
2.3 Notation
Throughout this paper we use the following mathemat-
ical notation. Let F2 = {0, 1} be the set of Booleans.
The symbol ⊕ denotes exclusive-or (XOR), 0n denotes
a bitstring of n zero-bits. ε denotes the empty bitstring.
Given two bitstrings x and y, xy denotes their concatena-
tion. Sometimes we write this concatenation explicitly
with x · y to improve readability. x denotes the bitwise
complement of x. Given a bitstring x ∈ Fk
2, we write xi to
denote the i-th bit of x. For example, given the bitstring
x = 0x03 = 00000011 ∈ F8
2, x0 = 0 and x6 = x7 = 1.
3 Megamos Crypto
This section describes Megamos Crypto in detail. We
ﬁrst describe the Megamos Crypto functionality, mem-
ory structure, and communication protocols, this comes
from the product datasheet [21] and the application
note [23]. Then we brieﬂy describe how we reverse-
engineered the cryptographic algorithms and protocols
used in Megamos Crypto. Finally, we describe these al-
gorithms and protocols in detail.
3.1 Memory
There are two types of Megamos Crypto transponders,
in automotive industry often referred to as Magic I
(V4070) [20] and Magic II (EM4170) [21]. The EM4170
transponder is the newer version and it has 16 memory
blocks of 16-bit words. The contents of these mem-
ory blocks are depicted in Figure 4. The older version
(V4070) supports exactly the same read and write oper-
ations and cryptographic algorithms, but it only has 10
memory blocks. The blocks 10 to 15, which store 64
bits of additional user memory and a 32-bit PIN code are
simply not readable. The EM4170 transponder uses the
same communication and is therefore backwards com-
patible with the V4070 transponder. Note that in some
cars the new revision is deployed as replacement for the
V4070 without making use of, or even initializing the
additional user memory blocks and PIN code. The whole
memory is divided in three sections with different access
rights, see Figure 4.
The transponder identiﬁer id is always read-only. The
write access over the other memory blocks is determined
by the value of the lock-bit l0. Just as speciﬁed, the value
of lock-bit l1 does not have any inﬂuence the memory
access conditions. Similarly, a successful or failed au-
thentication has no effect on the access conditions.
• When l0 = 0, all memory blocks (except id) of a
Megamos Crypto transponder are still writable. The
key k, PIN code pin are write-only and the user
memory um blocks (which includes the lock-bits l)
are read-write. However, after a successful write in
block 1, the new value of l0 determines the access
condition for future write operations.
706  22nd USENIX Security Symposium 
USENIX Association
4
• When l0 = 1, all writing is disabled. However, it
does not affect the read access conditions. This
means that the key k, PIN code pin can not be read
out and the user memory um becomes read-only.
Because the lock-bits l are stored in a user memory
block they can always be read out.
The EM4170 allows to set the lock-bit l0 back to zero
using a PIN code pin. A valid PIN code resets the access
conditions and enables again writing of k, pin, um and
l. The PIN code has to be known or overwritten to the
transponder before it is locked, otherwise an exhaustive
search of the PIN code is required.
Block Content
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
user memory
user memory, lock bits
device identiﬁcation
device identiﬁcation
crypto key
crypto key
crypto key
crypto key
crypto key
crypto key
pin code
pin code
user memory
user memory
user memory
user memory
Denoted by
um0 . . . um15
um16 . . . um29l0l1
id0 . . . id15
id16 . . . id31
k0 . . . k15
k16 . . . k31
k32 . . . k47
k48 . . . k63
k64 . . . k79
k80 . . . k95
pin0 . . . pin15
pin16 . . . pin31
um30 . . . um45
um46 . . . um61
um62 . . . um77
um78 . . . um93
read-only
write-only
read-write
Figure 4: Megamos Crypto transponder memory layout
3.2 Functionality and communication
The Megamos Crypto transponder supports four dif-
ferent operations:
read, write, reset and
authenticate.
• read operations are performed by three dif-
ferent commands, each returns multiple blocks.
The transponder
returns the concatenation of
these blocks in one bitstring. The three avail-
able bitstrings are id31 . . . id0, l1l0um29 . . . um0 and
um93 . . . um30.
• write stores a 16-bit memory block in the mem-
ory of the transponder. The arguments for this com-
mand are the block number and the data. After
receiving the command, the transponder stores the
data in memory if the access conditions allow the
requested write operation.
• reset takes the id and 32-bit PIN code as an ar-
gument. If the PIN code matches the value that is
stored in pin, then the lock-bit l0 is reset, see Sec-
tion 3.1 for more details about l0.
• authenticate takes three arguments. The ﬁrst
one is a 56-bit car nonce nC. The second argument
is a bitstring of 7 zero bits. The datasheet [21] refers
to them as “divergency bits”.
It seems that these
bit-periods are used to initialize the cipher. In Sec-
tion 3.6 we show that the authentication protocol ex-
actly skips 7 cipher steps before it starts generating
output. The third argument is a 28-bit authentica-
tor from the car aC. If successful, the transponder
responds with its 20-bit authenticator aT .
When the driver turns on the ignition, several back-
and-forward messages between the car and transponder
are exchanged.
It starts with the car reading out the
transponder memory blocks that contains the identity,
user memory and lock-bits. Next, the car tries to authen-
ticate using the shared secret key k. If the authentication
fails, the car retries around 20 times before it reports on
the dashboard that the immobilizer failed to authenticate
the transponder. Figure 5 shows an eavesdropped trace
of a German car that initializes and authenticates a Meg-
amos Crypto transponder.
To the best of our knowledge, there is no publicly
available document that describes the structure of Meg-
amos Crypto cipher. However, a simpliﬁed representa-
tion of the authentication protocol is presented in the
EM4170 application note [23] as shown in Figure 6.
It does not specify any details beyond the transmitted
messages and the checks which the car and transpon-
der must perform. The car authenticates by sending a
nonce nC = Random and the corresponding authentica-
tor aC = f (Rnd, K). When the car successfully authenti-
cated itself, the Megamos Crypto transponder sends the
transponder authenticator aT = g(Rnd, f , K) back to car.
(cid:7)(cid:13)(cid:25)(cid:16)(cid:1)(cid:25)(cid:26)(cid:13)(cid:26)(cid:19)(cid:22)(cid:21)
(cid:7)(cid:13)(cid:25)(cid:16)(cid:1)(cid:25)(cid:26)(cid:13)(cid:26)(cid:19)(cid:22)(cid:21)
(cid:12)(cid:24)(cid:13)(cid:21)(cid:25)(cid:23)(cid:22)(cid:21)(cid:15)(cid:16)(cid:24)
(cid:12)(cid:24)(cid:13)(cid:21)(cid:25)(cid:23)(cid:22)(cid:21)(cid:15)(cid:16)(cid:24)
(cid:17)(cid:42)(cid:49)(cid:40)(cid:44) (cid:20)(cid:30)(cid:49)
(cid:17)(cid:42)(cid:49)(cid:40)(cid:44) (cid:20)(cid:30)(cid:49)
(cid:23)(cid:26)(cid:38)(cid:29)(cid:39)(cid:37)
(cid:23)(cid:26)(cid:38)(cid:29)(cid:39)(cid:37)
(cid:31)
(cid:31)
(cid:31)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:20)(cid:3)
(cid:31)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:20)(cid:3)
(cid:32)
(cid:32)
(cid:32)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:31)(cid:4)(cid:20)(cid:3)
(cid:32)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:31)(cid:4)(cid:20)(cid:3)
(cid:38)(cid:39)(cid:1)(cid:26)(cid:28)(cid:44)(cid:34)(cid:39)(cid:38)
(cid:38)(cid:39)(cid:1)(cid:26)(cid:28)(cid:44)(cid:34)(cid:39)(cid:38)
(cid:13)(cid:14)
(cid:13)(cid:14)
(cid:39)(cid:6)(cid:35)(cid:6)
(cid:39)(cid:6)(cid:35)(cid:6)
(cid:23)(cid:38)(cid:29)
(cid:23)(cid:38)(cid:29)
(cid:10)(cid:11)(cid:1)(cid:16)(cid:34)(cid:44)
(cid:10)(cid:11)(cid:1)(cid:16)(cid:34)(cid:44)
(cid:31)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:20)(cid:3)
(cid:31)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:20)(cid:3)
(cid:9)(cid:12)(cid:1)(cid:16)(cid:34)(cid:44)
(cid:9)(cid:12)(cid:1)(cid:16)(cid:34)(cid:44)
(cid:32)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:31)(cid:4)(cid:20)(cid:3)
(cid:32)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:31)(cid:4)(cid:20)(cid:3)
(cid:9)(cid:7)(cid:1)(cid:16)(cid:34)(cid:44)
(cid:9)(cid:7)(cid:1)(cid:16)(cid:34)(cid:44)
(cid:17)(cid:42)(cid:49)(cid:40)(cid:44) (cid:20)(cid:30)(cid:49)
(cid:17)(cid:42)(cid:49)(cid:40)(cid:44) (cid:20)(cid:30)(cid:49)
(cid:31)
(cid:31)
(cid:31)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:20)(cid:3)
(cid:31)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:20)(cid:3)
(cid:13)(cid:14)
(cid:13)(cid:14)
(cid:38)(cid:39)(cid:1)(cid:26)(cid:28)(cid:44)(cid:34)(cid:39)(cid:38)
(cid:38)(cid:39)(cid:1)(cid:26)(cid:28)(cid:44)(cid:34)(cid:39)(cid:38)
(cid:32)
(cid:32)
(cid:32)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:31)(cid:4)(cid:20)(cid:3)
(cid:32)(cid:2)(cid:23)(cid:38)(cid:29)(cid:4)(cid:31)(cid:4)(cid:20)(cid:3)
Figure 6: Authentication procedure excerpt from [23]
For communication the Megamos Crypto transponder
uses a low frequency wave of 125 kHz and applies am-
plitude shift keying (ASK) modulation by putting a small
resistance on the electro magnetic ﬁeld. It utilizes a cus-
USENIX Association  
22nd USENIX Security Symposium  707
5
Message
3
Origin
Car
Transponder A9 08 4D EC
Car
Transponder 80 00 95 13
Car
Transponder AA AA AA AA AA AA AA AA
Car
Transponder 60 9D 6
6 | 3F FE 1F B6 CC 51 3F | 07 | F3 55 F1 A
5
F
Description
Read identiﬁer
Identﬁer id31 . . . id0
Read user memory and lock-bits
First user memory l1l0um29 . . . um0
Read large user memory (EM4170)
Second user memory um93 . . . um30
Authentication, nC55 . . . nC0 , 07, aC
Car authenticated successful, send back aT
Figure 5: Eavesdropped Megamos Crypto authentication using the 96-bit key 000000000000010405050905.