      $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php –simple-report=$DIRECTORY/dirsearch 4
      echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    else 5
      nmap $DOMAIN > $DIRECTORY/nmap 6
      echo "The results of nmap scan are stored in $DIRECTORY/nmap."
      $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
      echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    fi
If the user specifies `      nmap-only     ` [ 1 ]{.CodeAnnotation
aria-label="annotation1"} , we run `      nmap     ` only and store the
results to a file named *nmap* [ 2 ]{.CodeAnnotation
aria-label="annotation2"} . If the user specifies
`      dirsearch-only     ` [ 3 ]{.CodeAnnotation
aria-label="annotation3"} , we execute and store the results of
Dirsearch only [ 4 ]{.CodeAnnotation aria-label="annotation4"} . If the
user specifies neither [ 5 ]{.CodeAnnotation aria-label="annotation5"} ,
we run both scans [ 6 ]{.CodeAnnotation aria-label="annotation6"} .
如果用户指定了只运行nmap (nmap-only
1)，我们只运行nmap并将结果存入名为nmap的文件中 (nmap
2)。如果用户指定了只运行Dirsearch (dirsearch-only
3)，我们只执行并存储Dirsearch的结果 (4)。如果用户没有指定
(5)，我们将运行两个扫描 (6)。
Now you can make your tool run only the Nmap or Dirsearch commands by
specifying one of these in the command:
现在您可以通过在命令中指定其中之一来仅运行Nmap或Dirsearch命令：
    $ ./recon.sh scanme.nmap.org nmap-only
    $ ./recon.sh scanme.nmap.org dirsearch-only
### Running Additional Tools {#c05.xhtml#h2-501546c05-0014}
What if you want the option of retrieving information from the crt.sh
tool, as well? For example, you want to switch between these three modes
or run all three recon tools at once:
如果您想要从crt.sh工具中检索信息，该怎么办？例如，您想在这三种模式之间切换或同时运行所有这三个recon工具。
    $ ./recon.sh scanme.nmap.org nmap-only
    $ ./recon.sh scanme.nmap.org dirsearch-only
    $ ./recon.sh scanme.nmap.org crt-only
[ ]{#c05.xhtml#Page_86 .pagebreak title="86"} We could rewrite the
`      if-else     ` statements to work with three options: first, we
check if `      MODE     ` is `      nmap-only     ` . Then we check if
`      MODE     ` is `      dirsearch-only     ` , and finally if
`      MODE     ` is `      crt-only     ` . But that's a lot of
`      if-else     ` statements, making the code complicated.
我们可以将if-else语句重写为三个选项：首先，我们检查MODE是否仅限于nmap。然后，我们检查MODE是否仅限于dirsearch，最后检查MODE是否仅限于crt。但这会造成很多if-else语句，让代码变得复杂。
Instead, let's use bash's `      case     ` statements, which allow you
to match several values against one variable without going through a
long list of `      if-else     ` statements. The syntax of
`      case     ` statements looks like this. Note that the statement
ends with `      esac     ` , or `      case     ` backward:
使用bash的case语句，而不是通过长长的if-else语句列表来匹配多个值与一个变量。case语句的语法如下。请注意，语句最后以esac或case后退结束。
    case $VARIABLE_NAME in
      case1)
        Do something
        ;;
      case2)
        Do something
        ;; 
      caseN)
        Do something
        ;;
      *)       
        Default case, this case is executed if no other case matches.
        ;; 
    esac
We can improve our script by implementing the functionality with
`      case     ` statements instead of multiple `      if-else     `
statements:
我们可以通过使用case语句而不是多个if-else语句来实现功能，从而改进我们的脚本。
    #!/bin/bash
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    TODAY=$(date)
    echo "This scan was created on $TODAY"
    DOMAIN=$1
    DIRECTORY=${DOMAIN}_recon
    echo "Creating directory $DIRECTORY."
    mkdir $DIRECTORY
    case $2 in
      nmap-only)
        nmap $DOMAIN > $DIRECTORY/nmap
        echo "The results of nmap scan are stored in $DIRECTORY/nmap."
        ;;
      dirsearch-only)
        $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
        echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
        ;;         
      crt-only)       
        curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt 1
        echo "The results of cert parsing is stored in $DIRECTORY/crt."
        ;;
      *)
        nmap $DOMAIN > $DIRECTORY/nmap
        echo "The results of nmap scan are stored in $DIRECTORY/nmap."
        $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
        echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
        curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
        echo "The results of cert parsing is stored in $DIRECTORY/crt."
        ;;
    esac
The `      curl     ` command [ 1 ]{.CodeAnnotation
aria-label="annotation1"} downloads the content of a page. We use it
here to download data from crt.sh. And `      curl     ` 's
`      -o     ` option lets you specify an output file. But notice that
our code has a lot of repetition! The sections of code that run each
type of scan repeat twice. Let's try to reduce the repetition by using
functions. The syntax of a bash function looks like this:
curl命令1下载页面的内容。我们在这里使用它来从crt.sh下载数据。curl的-o选项可以让您指定输出文件。但请注意我们的代码有很多重复！运行每种扫描类型的代码段重复两次。让我们尝试通过使用函数来减少重复。Bash函数的语法如下：
    FUNCTION_NAME()
    {
      DO_SOMETHING
    }
After you've declared a function, you can call it like any other shell
command within the script. Let's add functions to the script:
在声明函数之后，你可以像脚本中的任何其他shell命令一样调用它。让我们向脚本中添加函数：
在脚本中添加函数后，你可以像普通的shell命令一样调用它。
    #!/bin/bash
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    TODAY=$(date)
    echo "This scan was created on $TODAY"
    DOMAIN=$1
    DIRECTORY=${DOMAIN}_recon
    echo "Creating directory $DIRECTORY."
    mkdir $DIRECTORY
    nmap_scan() 1
    {
      nmap $DOMAIN > $DIRECTORY/nmap
      echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    }
    dirsearch_scan() 2
    {
      $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
      echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    }
    crt_scan() 3
    {
      curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
      echo "The results of cert parsing is stored in $DIRECTORY/crt."
    }
    case $2 in 4
      nmap-only)
        nmap_scan
        ;;
      dirsearch-only)
        dirsearch_scan
        ;;         
      crt-only)       
        crt_scan
        ;;
      *)       
        nmap_scan
        dirsearch_scan
        crt_scan
        ;;     
    esac
You can see that we've simplified our code. We created three functions,
`      nmap_scan     ` [ 1 ]{.CodeAnnotation aria-label="annotation1"} ,
`      dirsearch_scan     ` [ 2 ]{.CodeAnnotation
aria-label="annotation2"} , and `      crt_scan     ` [ 3
]{.CodeAnnotation aria-label="annotation3"} . We put the
`      scan     ` and `      echo     ` commands in these functions so
we can call them repeatedly without writing the same code over and over
[ 4 ]{.CodeAnnotation aria-label="annotation4"} . This simplification
might not seem like much here, but reusing code with functions will save
you a lot of headaches when you write more complex programs.
你可以看到我们已经简化了我们的代码。我们创建了三个函数，nmap_scan
1，dirsearch_scan 2和crt_scan
3。我们将扫描和回显命令放入这些函数中，因此我们可以重复调用它们，而无需一遍又一遍地编写相同的代码4。尽管在这里简化可能不会有太大影响，但在编写更复杂的程序时，重用代码并使用函数将为您节省很多头疼。
Keep in mind that all bash variables are *global* except for input
parameters like `      $1     ` , `      $2     ` , and `      $3     `
. This means that variables like `      $DOMAIN     ` ,
`      $DIRECTORY     ` , and `      $PATH_TO_DIRSEARCH     ` become
available throughout the script after we've declared them, even if
they're declared within functions. On the other hand, parameter values
like `      $1     ` , `      $2     ` , and `      $3     ` can refer
only to the values the function is called with, so you can't use a
script's input arguments within a function, like this:
请记住，除了输入参数 \$1、\$2 和\$3，所有 Bash
变量都是全局的。这意味着，在声明它们之后，例如 \$DOMAIN、\$DIRECTORY 和
\$PATH_TO_DIRSEARCH
这样的变量在整个脚本中都可以使用，即使它们在函数内声明。另一方面，像
\$1、\$2 和 \$3
这样的参数值只能引用函数被调用时的值，所以你不能在函数内部使用脚本的输入参数，例如：
    nmap_scan()
    {
      nmap $1 > $DIRECTORY/nmap 
      echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    }
    nmap_scan
Here, the `      $1     ` in the function refers to the first argument
that `      nmap_scan     ` was called with, not the argument our
*recon.sh* script was called with. Since `      nmap_scan     ` wasn't
called with any arguments, `      $1     ` is blank.
这里的函数\$1指的是nmap_scan被调用时的第一个参数，而不是我们的recon.sh脚本被调用时的参数。由于nmap_scan没有被任何参数调用，\$1为空。
### Parsing the Results {#c05.xhtml#h2-501546c05-0015}
Now we have a tool that performs three types of scans and stores the
results into files. But after the scans, we'd still have to manually
read and make sense of complex output files. Is there a way to speed up
this process too?
现在我们有一个可以执行三种扫描并将结果存储到文件中的工具。但是，在扫描之后，我们仍然需要手动阅读和理解复杂的输出文件。有没有办法也加快这个过程呢？
Let's say you want to search for a certain piece of information in the
output files. You can use *Global Regular Expression Print* *(*
`      grep     `{.variable} *)* to do that. This command line utility
is used to perform searches in text, files, and command outputs. A
simple `      grep     ` command looks like this:
假设你想在输出文件中搜索某个信息片段。你可以使用全球正则表达式打印（grep）来实现。这个命令行实用程序用于在文本、文件和命令输出中执行搜索。一个简单的
grep 命令如下：
    grep password file.txt
This tells `      grep     ` to search for the string
`      password     ` in the file *file.txt* , then print the matching
lines in standard output. For example, we can quickly search the Nmap
output file to see if the target has port 80 open:
这告诉grep在file.txt文件中搜索字符串\"password\"，然后在标准输出中打印匹配的行。例如，我们可以快速搜索Nmap输出文件，看看目标是否开放了80端口：
    $ grep 80 TARGET_DIRECTORY/nmap
    80/tcp open http
You can also make your search more flexible by using regular expressions
in your search string. A *regular expression* , or *regex* , is a
special string [ ]{#c05.xhtml#Page_89 .pagebreak title="89"} that
describes a search pattern. It can help you display only specific parts
of the output. For example, you may have noticed that the output of the
Nmap command looks like this:
你也可以使用正则表达式来让搜索更加灵活。正则表达式（又称为
regex）是一种描述搜索模式的特殊字符串。它可以帮助你仅显示输出中的特定部分。例如，你可能已经注意到
Nmap 命令输出的结果具有如下的格式：
    Starting Nmap 7.60 ( https://nmap.org )
    Nmap scan report for scanme.nmap.org (45.33.32.156)
    Host is up (0.065s latency).
    Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2f