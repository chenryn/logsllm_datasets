Security and Trust. Springer, 115–134.
[72] Jaideep Vaidya, Vijayalakshmi Atluri, and Qi Guo. 2007. The role mining prob-
lem: finding a minimal descriptive set of roles. In Proceedings of the 12th ACM
symposium on Access control models and technologies. ACM, 175–184.
[73] Jaideep Vaidya, Vijayalakshmi Atluri, and Qi Guo. 2010. The role mining problem:
A formal perspective. ACM Transactions on Information and System Security
(TISSEC) 13, 3 (2010), 27.
[74] Jaideep Vaidya, Vijayalakshmi Atluri, and Janice Warner. 2006. RoleMiner: mining
roles using subset enumeration. In Proceedings of the 13th ACM conference on
Computer and communications security. ACM, 144–153.
[75] Zhongyuan Xu and Scott D Stoller. 2012. Algorithms for mining meaningful
roles. In Proceedings of the 17th ACM symposium on Access Control Models and
Technologies. ACM, 57–66.
[76] Zhongyuan Xu and Scott D Stoller. 2014. Mining Attribute-Based Access Control
Policies from Logs. In Data and Applications Security and Privacy XXVIII. Springer,
276–291.
[77] Zhongyuan Xu and Scott D Stoller. 2015. Mining attribute-based access control
policies. IEEE Transactions on Dependable and Secure Computing 12, 5 (2015),
533–545.
[78] Kan Yang, Zhen Liu, Xiaohua Jia, and Xuemin Sherman Shen. 2016. Time-
domain attribute-based access control for cloud-based video content sharing: A
cryptographic approach. IEEE Transactions on Multimedia 18, 5 (2016), 940–950.
[79] Qiang Yang, Haining Henry Zhang, and Tianyi Li. 2001. Mining web logs for
prediction models in WWW caching and prefetching. In Proceedings of the seventh
ACM SIGKDD international conference on Knowledge discovery and data mining.
ACM, 473–478.
[80] Dana Zhang, Kotagiri Ramamohanarao, and Tim Ebringer. 2007. Role engineering
using graph optimisation. In Proceedings of the 12th ACM Symposium on Access
Control Models and Technologies. ACM, 139–144.
A SIMPLIFYING THE COMPUTATION OF
EXPECTATIONS
We prove here Lemma 2. We start with some auxiliary lemmas and
definitions.
Lemma 3. Let f and g be facts, φ be a formula in L, (u, p) ∈ U × P,
and {ψi}i ⊆ L such that {ψ X
i (u, p)}i is a set of mutually independent
b
random variables under the distribution q.
(cid:80)
(cid:103)
Ef(cid:55)→b[g] =
 =
(cid:89)
= 1 − Ef(cid:55)→b
Ef(cid:55)→b
(cid:103)
b∈Range(g) ˜qg (b) b
(cid:103)
(¬φ)X (u, p)
(u, p)
(cid:102)
(cid:42)(cid:44)(cid:94)
if f = g
otherwise.
ψ X
i (u, p)
(cid:43)(cid:45)X
φX (u, p)
Ef(cid:55)→b
Ef(cid:55)→b
(cid:102)
(cid:102)
ψi
.
.
i
i
Proof. Observe that, for a Bernoulli random variable X, E [X] =
P (X = 1). Recall also that E [XY] = E [X] E [Y], whenever X and
Y are mutually independent. With these observations and using
standard probability laws, one can derive the equations above. □
Lemma 4. Let φ ∈ L and let (u, p) ∈ U × P. If φX (u, p) is diverse,
can be computed using only the equations
then Ef(cid:55)→b
from Lemma 2.
φX (u, p)
(cid:102)
(cid:103)
This lemma is proved by induction on φ and by recalling that any
two different random facts are independent under the distribution
q, which follows from the way that the distribution q is factorized.
Corollary 2.
Ef(cid:55)→b[L (Auth, X; φ)] =
(cid:103)(cid:12)(cid:12)(cid:12) .
(cid:88)
φX (u, p)
(cid:102)
(cid:12)(cid:12)(cid:12)Auth(u, p) − Ef(cid:55)→b
(cid:88)
(u,p)∈U ×P\Auth
φX (u, p).
Proof. L (Auth, X; φ) can be rewritten as follows:
(u,p)∈U ×P
(cid:17)
1 − φX (u, p)
+
(cid:88)
(cid:16)
(u,p)∈Auth
The result follows from the linearity of expectation.
□
Lemma 2 follows from Lemma 4 and Corollary 2.
B POLICY MINERS BUILT USING UNICORN
We present here technical details on how we built policy miners
for different policy languages using Unicorn.
B.1 ABAC policies
ABAC is an access control paradigm where permissions are assigned
to users depending on the users’ and the permission’s attribute
values. An ABAC policy is a set of rules. A rule is a set of attribute
values. Recall that a request (u, p) is a pair consisting of a user
u ∈ U and a permission p ∈ P. A rule assigns a permission p to a
user u if u and p’s permission attribute values contain all of the
rule’s attribute values. A policy assigns p to u if some rule in the
policy assigns p to u.
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom108∧
(cid:17)
(cid:17)
When mining ABAC policies, we are not only given a permission
assignment Auth ⊆ U × P, but also attribute assignment relations
UAtt ⊆ U × AttVals and PAtt ⊆ P × AttVals that describe what
attribute values each user and each permission has. Here, AttVals
denotes the set of possible attribute values. We refer to previous
work for a discussion on how to obtain these attribute assignment
relations [18, 77].
i ≤N
j≤M
(cid:94)
(cid:95)
si , aj
si , aj
(cid:16)RUA(cid:16)
(cid:16)RPA(cid:16)
ABAC
M, N (u, p) below is a template formula for ABAC:
The objective in mining ABAC policies is to find a set of rules
that assigns permissions to users based on the users’ and the per-
missions’ attribute values. We explain next how to build a policy
miner for ABAC using Unicorn. Let Rules and AttVals be sorts for
rules and attribute values, respectively. Let RUA and RPA be flexible
binary relation symbols of type Rules × AttVals. For M, N ∈ N, the
formula φ
(cid:43)(cid:45) .
(cid:17)
and PAtt(cid:16)p, aj
(cid:17)
(cid:17)
→ UAtt(u, aj )
→ PAtt(p, aj )
denoting an attribute value. The formula RUA(cid:16)
formula RPA(cid:16)
(cid:17)
assignment relations. The formulas UAtt(cid:16)u, aj
In this formula, si, for i ≤ N , is a rigid constant symbol of sort
Rules denoting a rule. The symbol aj, for j ≤ M, is a rigid constant
describes
whether rule si requires the user to have the attribute value aj. The
(cid:17)
describes an analogous requirement. We use
two rigid relation symbols UAtt and PAtt to represent the attribute
de-
scribe whether u and p, respectively, are assigned the attribute value
M, N (u, p) is satisfied by (u, p) ∈ U × P
aj. Intuitively, the formula φ
if, for some rule si, (u, p) possesses all user and permission attribute
values required by si under RUA and RPA.
Observe that a policy miner does not need to find an interpreta-
tion for the symbols UAtt and PAtt because the organization already
has interpretations for those symbols. When mining ABAC policies,
the organization already knows what attribute values each user
and each permission has and wants to mine from them an ABAC
policy. The miner only needs to specify which attribute values
must be required by each rule. This is why we specify the attribute
assignment relations with rigid symbols.
si , aj
si , aj
(14)
(cid:42)(cid:44)
(cid:17)
ABAC
We use L(Auth, I; φ
ABAC
M, N ) as the objective function. Observe that
ABAC
every atomic formula occurs at most once in φ
M, N , so, by Corol-
lary 1, we can use Lemma 2 to compute all relevant expectations.
ABAC
M, N )
to avoid mining policies with too many rules or unnecessarily large
rules. One such regularization term is
Finally, we can also add a regularization term to L(Auth, I; φ
(cid:88)
(cid:88)
RUAI(cid:16)
(cid:17)
+ RPAI(cid:16)
(cid:17)
si , aj
si , aj
.
∥I∥ =
i ≤N
j≤M
The expression ∥I∥ counts the number of attribute values required
by each rule, which is a common way to measure an ABAC pol-
icy’s complexity [18, 77]. If we instead use the objective function
ABAC
λ ∥I∥ + L(Auth, I; φ
M, N ), then the objective function penalizes
not only policies that differ substantially from Auth, but also poli-
cies that are too complex. Observe that ∥X∥ is diverse. Hence, we
can use the linearity of expectation and Lemma 2 to compute all
expectations needed to implement Algorithm 1.
B.2 ABAC policies from logs
Some miners are geared towards mining policies from logs of access
requests [18, 56, 76]. We now present an objective function that can
be used to mine ABAC policies from access logs, instead of permis-
ABAC
M, N for the rest of this subsection.
sion assignments. We let φ := φ
A log G is a disjoint union of two subsets A and D of U ×P, denot-
ing the requests that have been authorized and denied, respectively.
In the case of ABAC, a policy mined from a log should aim to
fulfill three requirements. The policy should be succinct, generalize
well, and be precise [18]. Therefore, we define an objective function
L′ABAC (G, I) as the sum
L′ABAC (G, I) = λ0 ∥I∥ + L1 (G, I) + L2 (G, I) .
(15)
The term ∥I∥ is as defined in Section B.1 and aims to make the
policy succinct by penalizing complex policies. The term L1 (G, I)
aims to make the mined policy generalize well and is defined as
(cid:17)
+
L1 (G, I) = λ1,1
λ1,2
1 − φI (u, p)
φI (u, p).
Finally, the function L2 (G, I) aims to make the mined policy
precise by penalizing policies that authorize too many requests that
are not in the log.
L2 (G, I) = λ2
φI (u, p).
(u,p)∈U ×P\G
(cid:103)
L′ABAC (G, X)
One can show that φX (u, p) is diverse, for any (u, p) ∈ U × P.
using only the
Therefore, we can compute Ef(cid:55)→b
linearity of expectation and Lemma 2.
B.3 Business-meaningful RBAC policies
Frank et. al. [30] developed a probabilistic policy miner for RBAC
policies that incorporated business information. Aside from a per-
mission assignment, the miner takes as input an attribute-assignment
relation AA ⊆ U × AVal, where AVal denotes all possible combi-
nation of attribute values. It is assumed that each user is assigned
exactly one combination of attribute values.
This miner grants similar sets of roles to users that have similar
attribute values. For this, it uses the following formula ∆(u, u′, I)
that measures the disagreement between the roles that a policy I
assigns to two users u and u′:
(cid:16)
(cid:88)
(cid:88)
(u,p)∈A
(u,p)∈D
(cid:88)
(cid:102)
(cid:17)
∆(u, u′, I) =(cid:88)
(cid:16)
i ≤N
(cid:88)
(cid:88)
u,u′∈U
a∈AVal
∥I∥ = 1
N
UAI (u, ri )
1 − 2UAI (u, ri )UAI (u′, ri )
.
The formula ∥I∥ below shows how Frank et al.’s miner measures
an RBAC policy’s complexity. The complexity increases whenever
two users with the same combination of attribute values get as-
signed significantly different sets of roles.
AA(u, a)AA(u′, a)∆(u, u′, I).
Here, N denotes the total of users. Note that AA is a rigid relation
symbol representing AA. Its interpretation is therefore fixed and
not computed by the policy miner.
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom109One can then compute Ef→b[∆(u, u′, X)] by using the linearity of
expectation and the fact that E [X n] = (E [X])n, for n ∈ N and X a
Bernoulli random variable. Hence,
(cid:2)∆(u, u′, X)(cid:3) =
(cid:102)
(cid:88)
(cid:42)(cid:44) Ef→b
(cid:102)
Ef→b
(cid:16)Ef→b
i ≤N
2
UAX (u, ri )
−
UAX (u, ri )
(cid:103)
(cid:103)(cid:17)2 Ef→b
(cid:102)
UAX (u′, ri )
(cid:103) (cid:43)(cid:45) .
(cid:16)Auth, I; φ
(cid:17)
To mine business-meaningful RBAC policies, we use the objec-
tive function λ ∥I∥ + L
, where λ > 0 is a trade-off
hyper-parameter. Observe that this objective function penalizes the
following types of policies.
RBAC
N
• Policies that assign significantly different sets of roles to
users with the same attribute values.
• Policies whose assignment of permissions to users substan-
tially differs from the assignment given by Auth.
The random variable ∥X∥ is, however, not diverse. This is because,
for i ≤ N, the random fact UAX (u, ri ) occurs more than once in
∆(u, u′, X). Nonetheless, observe that
∆(u, u′, X) =(cid:88)
UAX (u, ri ) − 2
i ≤N
(cid:16)UAX (u, ri )
(cid:17)2 UAX (u′, ri ).
One can check that this observation and Lemma 2 suffice to compute
the expectations necessary for Algorithm 1.
C MINING XACML POLICIES
Although XACML is the de facto standard for access control spec-
ification, no algorithm has previously been proposed for mining
XACML policies. We now illustrate how, using Unicorn, we have
built the first XACML policy miner.
C.1 Background
XACML syntax. To simplify the presentation, we use a reduced
version of XACML, given as a BNF grammar below. However, our ap-
proach extends to the core XACML. Moreover, our reduced XACML
is still powerful enough to express Continue [27, 47], a benchmark
XACML policy used for policy analysis.
::= allow | deny
::= (⟨Dec⟩, α )
::= FirstApp | AllowOv | DenyOv
::= (⟨Comb⟩, (⟨Pol⟩∗ | ⟨Rule⟩∗))
⟨Dec⟩
⟨Rule⟩
⟨Comb⟩
⟨Pol⟩
Fix a set AVals of attribute values. An XACML rule is a pair
(δ, α ), where δ ∈ {allow, deny} is the rule’s decision and α is a
subset of AVals. An XACML policy is a pair (κ, ¯π ), where κ ∈
{FirstApp, AllowOv, DenyOv} is a combination algorithm and ¯π is
either a list of policies or a list of XACML rules. FirstApp, AllowOv,
DenyOv denote XACML’s standard policy combination algorithms.
We explain later how they work. For a policy π, we denote its com-
bination algorithm by Comb (π ) and, for a rule r, we denote its
decision by Dec(r ).
XACML semantics. We now recall XACML’s semantics. A re-
quest is a subset of AVals denoting the attribute values that a subject
s, an action a, and an object o satisfy when s attempts to execute
A policy π of the form (AllowOv,
a on o. We denote by 2AVals the set of requests. A request satis-
fies a rule (δ, α ) if the request contains all attributes in α. In this
case, if δ = allow, then we say that the rule authorizes the request;
otherwise, we say that the rule denies the request.
π′1, . . . , π′ℓ
) authorizes a re-
quest z if there is an i ≤ ℓ such that π′i authorizes z. The policy