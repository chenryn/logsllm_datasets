# T3协议反序列化分析
## 目录导读
[TOC]
## 前言
本文将基于对RMI的认知，对`cve-2015-4852`漏洞进行分析。该漏洞作为T3协议反序列化漏洞的始祖，必有其价值，不仅可以研究漏洞原理，更是可以在补丁中学到防御与绕过的艺术，因为Weblogic后面的T3协议的反序列化漏洞，基本也是与漏洞补丁对抗的产物。
## T3协议
之前已经跟大家详细的分析过RMI了，Java原生的RMI通信是基于JRMP协议的，而在Weblogic中，使用的即是T3协议。T3协议允许Weblogic
Server和其他Java程序或其他Weblpgic Server之前通信。
### T3协议组成
  * 请求包头
  * 请求主体
使用wireshark抓包可以看到，下图是T3协议的通信数据包
  * HL: 标识后边发起的T3协议头长度
  * AS: 标识了发送的序列化数据的容量
查看十六进制数据可以发现
客户端与服务端通信的数据均以`\n\n`结尾
### T3协议数据交换过程
## T3协议攻击原理
目前已经了解了T3协议的数据交换过程，我们还需要对数据包中的二进制串有一个深入的认知，才能理解T3协议反序列化的原理。
需要知道的有：
  * 每个T3的数据包中都必须包含T3协议头
  * 序列化数据的头部二进制串为`aced0005`
  * 数据包前4字节，标识了数据包的长度
  * 长度标识后一个字节标识了该数据包是请求还是响应，01代表请求,02代表响应
那么T3协议的攻击原理就简单易懂了，我们只需要替换数据包中的某部分序列化数据为恶意数据即可
图示如下：
说是替换，其实是将T3协议头写好，拼接第一部分正常序列化数据，拼接恶意的序列化数据，拼接第二部分正常序列化数据，以此来构造恶意的数据包。
## Weblogic环境搭建
笔者使用的是A-Team的工具进行自动化搭建的，github连接：
过程比较简单，详情可以看README.md
### 1、编译docker环境
    docker build --build-arg JDK_PKG=jdk-7u21-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=wls1036_generic.jar -t weblogic1036jdk7u21 .
### 2、启动docker镜像
    docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk7u21 weblogic1036jdk7u21
此时访问7001端口就可以看到weblogic的页面了
为了后面我们使用IDEA调试weblogic，还需要将weblogic依赖的jar包下下来，导入IDEA中
    docker exec -it weblogic1036jdk7u21 /bin/bash
    cd /u01/app/oracle/
    cp -r middleware/ /root/WeblogicEnvironment-master/
然后将modules、wlserver两个依赖导入IDEA即可
## T3协议攻击示例
本次调试分析源码所使用的weblogic版本为10.3.6
### 1、生成序列化payload
### 2、编写发送数据的脚本
这里笔者在网上找了一份pyhton的
    #!/usr/bin/python
    import socket
    import struct
    import sys
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = (sys.argv[1], int(sys.argv[2]))
    print 'connecting to %s port %s' % server_address