要在我们的集群上运行 cocroach db，我们将使用官方的 cocroach db Helm 图表:
1.  The first thing we need to do is to add the CockroachDB Helm chart repository, using the following command:
    ```
    helm repo add cockroachdb https://charts.cockroachdb.com/
    ```
    这将产生以下输出:
    ```
    "cockroachdb" has been added to your repositories
    ```
2.  Before we install the chart, let's create a custom `values.yaml` file in order to tweak some of the default settings for CockroachDB. Our file for this demo looks like the following:
    蟑螂-db-values.yaml
    ```
    storage:
      persistentVolume:
        size: 2Gi
    statefulset:
      resources:
        limits:
          memory: "1Gi"
        requests:
          memory: "1Gi"
    conf:
      cache: "256Mi"
      max-sql-memory: "256Mi"
    ```
    如您所见，我们指定了`2` GB 的持久卷大小、`1` GB 的 Pod 内存限制和请求，以及 CockroachDB 的配置文件内容。该配置文件包括`cache`和最大`memory`的设置，其中设置为`256` MB 的内存限制大小的 25%。这个比率是一个最佳实践。请记住，这些并不都是生产就绪的设置，但它们将适用于我们的演示。
3.  At this point, let's go ahead and create our CockroachDB cluster using the following Helm command:
    ```
    helm install cdb --values cockroach-db-values.yaml cockroachdb/cockroachdb
    ```
    如果成功，您将看到来自 Helm 的冗长的部署消息，我们在此不再赘述。让我们使用以下命令来检查集群上到底部署了什么:
    ```
    kubectl get po 
    ```
    您将看到类似如下的输出:
    ```
    NAMESPACE     NAME                                          READY   STATUS      RESTARTS   AGE
    default       cdb-cockroachdb-0                             0/1     Running     0          57s
    default       cdb-cockroachdb-1                             0/1     Running     0          56s
    default       cdb-cockroachdb-2                             1/1     Running     0          56s
    default       cdb-cockroachdb-init-8p2s2                    0/1     Completed   0          57s
    ```
    如您所见，除了用于某些初始化任务的设置窗格之外，我们在 StatefulSet 中还有三个窗格。
4.  为了检查以查看我们的集群是否正常工作，我们可以使用一个在 CockroachDB Helm 图表输出中方便地给我们的命令(它将根据您的 Helm 版本名称而变化):
    ```
    kubectl run -it --rm cockroach-client \
            --image=cockroachdb/cockroach \
            --restart=Never \
            --command -- \
            ./cockroach sql --insecure --host=cdb-cockroachdb-public.default
    ```
如果成功，将打开一个控制台，并显示类似以下内容的提示:
```
root@cdb-cockroachdb-public.default:26257/defaultdb>
```
在下一节中，我们将使用 SQL 测试 CockroachDB。
## 用 SQL 测试 CockroachDB
现在，我们可以运行 SQL 命令到我们新的 cocroach db 数据库！
1.  首先，让我们用以下命令创建一个数据库:
    ```
    CREATE DATABASE mydb;
    ```
2.  接下来，让我们创建一个简单的表:
    ```
    CREATE TABLE mydb.users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        first_name STRING,
        last_name STRING,
        email STRING
     );
    ```
3.  然后，让我们用这个命令添加一些数据:
    ```
    INSERT INTO mydb.users (first_name, last_name, email)
      VALUES
          ('John', 'Smith', 'PI:EMAIL');
    ```
4.  最后，我们用这个来确认数据:
    ```
    SELECT * FROM mydb.users;
    ```
这将为您提供以下输出:
```
                  id                  | first_name | last_name |      email
---------------------------------------+------------+-----------+------------------
  e6fa342f-8fe5-47ad-adde-e543833ffd28 | John       | Smith     | PI:EMAIL
(1 row)
```
成功！
如您所见，我们有一个功能齐全的分布式 SQL 数据库。让我们继续讨论最后一种有状态的工作负载类型:消息传递。
# 在 Kubernetes 上实现消息传递和队列
对于消息传递，我们将实现 RabbitMQ，一个支持 Kubernetes 的开放源消息队列系统。消息传递系统通常用于应用中，以分离应用的各种组件，从而支持规模和吞吐量，以及异步模式，如重试和服务工作人员队伍。例如，不是一个服务直接调用另一个服务，而是一个服务可以将一个消息放在一个持久的消息队列中，此时它将被一个正在监听队列的工作容器接收。与负载平衡方法相比，这允许容易的水平扩展和更大的整个组件停机容限。
RabbitMQ 是消息队列的众多选项之一。正如我们在本章第一节中提到的，RabbitMQ 是消息队列的行业标准选项，不一定是专门为 Kubernetes 构建的队列系统。然而，它仍然是一个很好的选择，并且非常容易部署，我们很快就会看到。
让我们从在 Kubernetes 上实现 RabbitMQ 开始！
## 在立方上部署 rabbitmq
在 Kubernetes 上安装 rabbtmq 可以通过操作员或通过 Helm 图表轻松完成。在本教程中，我们将使用 Helm 图表:
1.  首先，让我们添加合适的`helm`存储库(由**比塔米**提供):
    ```
    helm repo add bitnami https://charts.bitnami.com/bitnami
    ```
2.  Next, let's create a custom values file to tweak some parameters:
    值-rabbitq . YAML
    ```
    auth:
      user: user
      password: test123
    persistence:
      enabled: false
    ```
    如您所见，在这种情况下，我们正在禁用持久性，这对于快速演示来说非常棒。
3.  Then, RabbitMQ can easily be installed on the cluster using the following command:
    ```
    helm install rabbitmq bitnami/rabbitmq --values values-rabbitmq.yaml
    ```
    一旦成功，您将会看到来自 Helm 的确认消息。RabbitMQ Helm 图表还包括一个管理用户界面，所以让我们用它来验证我们的安装是否有效。
4.  First, let's start a port forward to the `rabbitmq` service:
    ```
    kubectl port-forward --namespace default svc/rabbitmq 15672:15672
    ```
    然后，我们应该可以访问`http://localhost:15672`上的 RabbitMQ 管理 UI。它将如下所示:
    ![Figure 15.4 – RabbitMQ management console login](img/B14790_15_004.jpg)
    图 15.4–RabbTMq 管理控制台登录
5.  Now, we should be able to log in to the dashboard using the username and password specified in the values file. Upon login, you will see the RabbitMQ dashboard main view.
    重要的是，您将看到您的 RabbitMQ 集群中的节点列表。在我们的例子中，我们只有一个节点，显示如下:
    ![Figure 15.5 – RabbitMQ management console node item](img/B14790_15_005.jpg)
    图 15.5–RabbTMq 管理控制台节点项目
    对于每个节点，您可以看到名称和一些元数据，包括内存、正常运行时间等。
6.  In order to add a new queue navigate to **Queues** on the top bar, click **Add a new queue** toward the bottom of the screen. Fill out the form as follows, then click **Add queue**:
    ![Figure 15.6 – RabbitMQ management console queue creation](img/B14790_15_006.jpg)
    图 15.6–RabbTMq 管理控制台队列创建
    如果成功，屏幕将刷新，新队列将添加到列表中。这意味着我们的 RabbitMQ 设置工作正常！
7.  最后，现在我们有了一个队列，我们可以向它发布一条消息。为此，在**队列**页面点击您新创建的队列，然后点击**发布消息**。
8.  Write any text in the **Payload** text box and click **Publish Message**. You should see a confirmation popup telling you that your message has been published successfully, and the screen should refresh, showing your message on the queue, as shown in the following figure:
    ![Figure 15.7 – RabbitMQ management console queue status](img/B14790_15_007.jpg)
    图 15.7–RabbTMq 管理控制台队列状态
9.  最后，要模拟从队列中的获取消息，请单击页面底部附近的**获取消息**，该页面将展开以显示新的部分，然后单击**获取消息**按钮。您应该看到您发送的消息的输出，证明队列系统工作正常！
# 总结
在本章中，我们学习了在 Kubernetes 上运行有状态工作负载。首先，我们回顾了一些有状态工作负载类型的高级概述以及每个类型的一些示例。然后，我们继续在 Kubernetes 上实际部署其中一个工作负载—对象存储系统。接下来，我们对一个名为 cocroach db 的 NewSQL 数据库进行了同样的操作，向您展示了如何在 Kubernetes 上轻松部署 cocroach db 集群。
最后，我们向您展示了如何使用 Helm 图在 Kubernetes 上部署 RabbitMQ 消息队列。本章中使用的技巧将帮助您在 Kubernetes 上部署和使用流行的有状态应用模式。
如果你已经走了这么远，感谢你坚持阅读本书的全部 15 章！我希望您已经学会了如何使用广泛的 Kubernetes 功能，并且现在您已经拥有了在 Kubernetes 上构建和部署复杂应用所需的所有工具。
# 问题
1.  Minio 的 API 与什么云存储产品兼容？
2.  StatefulSet 对分布式数据库有什么好处？
3.  用你的话说，是什么让有状态应用难以在 Kubernetes 上运行？
# 进一步阅读
*   Minio 快速入门文档:[https://docs.min.io/docs/minio-quickstart-guide.html](https://docs.min.io/docs/minio-quickstart-guide.html)
*   CockroachDB Kubernetes 指南:[https://www . cocroach labs . com/docs/v 20.2/用 Kubernetes 编排一个本地集群](https://www.cockroachlabs.com/docs/v20.2/orchestrate-a-local-cluster-with-kubernetes)