makefile中针对特定的变量使用override指令可覆盖掉这个命令行选项。
--file=makefile
-fmakefile
把所指定的文件（而不是默认的文件名，即makefile、Makefile或GNUMakefile）
作为makefile来读。
261
---
## Page 272
262
附录一
--help
-h
为命令行选项输出一份简单的摘要。
--include-dir=directory
-Idirectory
如果在当前目录找不到引l人文件，在搜索编译进make里的搜索路径之前，先到所
指定的目录中找找看。--include-dir选项可以在命令行上指定任意多次。
--keep-going
-k
即使有一个命令返回错误状态也不要终止make进程，只是跳过当前工作目标的其
余部分，并且继续进行其他工作目标的处理。
--just-print
-n
显示make将会执行哪些命令，但不会执行命令脚本中的任何命令。当你想在make
实际工作之前先了解它会执行哪些命令，这个选项非常有用。但请注意，这个选项
只能避免命令脚本中命令的执行动作，shel1函数中的命令就没办法了。
--old-file=file
-ofile
让file的时间戳变成在任何文件（的时间戳）之前，以及对需要更新的工作目标
采取适当的动作。如果一个文件的时间戳被意外变更或是会影响依存图中的某个必
要条件，这个选项将会很有用。这个选项用来对--new-file（-w）选项的不足之
处进行补充。
--print-data-base
-P
输出make的内部数据库。
--touch
-t
对每个尚未更新（out-of-date）的工作目标运行touch程序，以便更新它的时间
戳。指定这个选项可以让依存图中的所有文件变成已更新的。例如，一个核心头文
件的注释被变更，可能会使得make非必要地重新编译大量源代码。要避免重新编
译浪费机器的时间，你可以使用--touch选项让所有文件变成已更新的。
--new-file=file
-Wfile
让fi1e的时间戳变成在任何工作月标（的时间戳）之后。指定这个选项，不必编
---
## Page 273
运行make
263
辑文件或变更文件的时间戳，就可以迫使工作目标进行更新的动作。这个选项用来
对--old-file选项的不足之处进行补充。
--warn-undefined-variables
如果有一个未定义的变量被扩展就会输出一个警告信息。这是一个非常有用的诊断
工具，因为未定义的变量会被安静地扩展成空无一物。然而，基于自定义的目的在
makefile中使用空变量也很常见。这个选项同样也会汇报任何未设定的自定义变
量。
---
## Page 274
附录二
越过make的极限
如你所见，GNUmake可以做若干令人难以置信的事情，但是能够以eval结构让make
3.80越过极限的例子并不多见。在接下来的例子中，我们要来看看是否可以越过极限。
数据结构
make的一个极限是，当我们所编写的复杂makefile用到了make所欠缺的数据结构能力
时，make偶尔也会变成废物。一个极为有限的做法就是，你可以将变量定义成内嵌的
点号（或是->，如果你坚持的话）的形式来模拟一个数据结构：
file.path=/foo/bar
file.type = unix
file.host = oscar
结构传递给一个函数：
defineremote-file
$（if $（filter unix,S（$l.type)),\
/net/$(s1.host)/s($i.path),
//s($1.host)/$($1.path))
endef
然而，这似乎是一个无法令人满意的解决方案，理由如下：
你无法轻易地为此“结构”分配一个实例（instance）。创建一个新的实例涉及以下
动作：选择新变量的名称，以及对每个元素进行赋值。这也意味着，不保证这些假
实例（pseudo-instance）具有相同的字段（称为槽）。
此结构只存在于用户的心中，它们是一组不同的make变量，而不是一个具有自己
名称的统一实体（unifiedentity）。而且因为此结构没有名称，你很难建立一个指
264
---
## Page 275
越过make的极限
265
向此结构的引用（或指针），所以将它们作为参数来传递或存储到变量中是个愚蓄
的行为。
·没有方无一失的方法可用来访问结构的一个槽。变量名称中任何一个部分的打字错
误，将会产生错误的值（或是没有值），而且不会从make获得警告信息。
不过，remote-file函数暗示了一个更广泛的解决方案。假设我们以经求值的变量来
实现结构实例。早期的Lisp对象系统（甚至今天的某些系统）使用了类似的技术。一个
结构，比如file-info，可以具有以符号名称来表示的实例，比如file_info_1。
另一个实例可能名为file_info_2。此结构的槽可以用经求值的变量来表示：
file_info_l_path
file_info_l_type
file_info_i_host
因为实例具有符号名称，所以它可以被存入一个或多个变量（通常，程序员的选择是使
用递归变量或简单变量）：
before_foo=file_info_1
another_foo =S(before_foo)
file-info的元素可以使用Lisp-like的取值函数（getter）和设值函数（setter）：
path := $(call get-value,before_foo,path)
$(call set-value,before_foo,path,/usr/tmp/bar)
我可以进一步地为file-info结构创建一个模板，方便新实例的分配：
orig_foo:=S(call new,file-info)
S（call set-vaiue,orig_foo,path,/foo/bar
tmp_foo := S（call new,file-info)
S(cal1 set-value,tmp_foo,path,/tmp/bar)
现在，file-info具有两个不同的实例。最后，我们可以为槽加人默认值的概念。所
以，我们可以这样来声明file-info结构：
$(call defstruct,file-info，\
$（call defslot,path,）,
s（call defslot,type,unix），\
$(call defslot,host,oscar))
defstruct函数的第一个参数是结构的名称，后面跟着一串defslot调用。每个defslot
调用中包含了一个槽名与默认值（name，defaultvalue）的配对。从例B-I中可以看
到defstruct以及支持程序代码的实现方式：
---
## Page 276
266
附录二
例B-l：make中的结构定义
#S（next-id）一返回一个独一无二的编号
next_id_counter :=
define next-id
$(words $（next_id_counter))s（eval next_id_counter +=1)
endef
#all_structs-
已定义结构的列表
all_structs :=
value_sep:=XxSepxx
#$（call defstruct,struct_name,$（call defslot,slot_name，value),...)
define defstruct
$（eval all_structs +=$1)
$（eval $1_def_slotnames :=)
$(foreach v,S2 $3 $4S5 $6 S7S8$9$（10) S（11),
$（if $（$v_name),
$（eval $1_def_slotnames
+=S($v_name))
$（eval s1_def_s（$v_name)_default:=S（Sv_value))))
endef
#S（call defslot,slot_name,slot_value)
define defslot
$（eval tmp_id:=$（next_id）)
S（eval $1_$（tmp_id)_name := $1)
$（eval $1_s(tmp_id)_value:= $2)
$1_s(tmp_id)
endef
all_instances
一将任何结构的所有实例列在此处
all_instances :=
S（call new，struct_name)
define new
s(strip
S（if s（filter S1,$（all_structs)),,
S（eval instance := $1@s（next-id))
$（eval all_instances += S（instance))
$（foreach v,s（S（strip s1)_def_slotnames),
S（eval $（instance）_Sv:=$（S(strip $1)_def_Sv_default)))
$(instance))
endef
$（call delete，variable)
define delete
$(strip
s（if s（filter $($(strip $1)),S（all_instances)),,
s（error Invalid instance‘s（$(strip $1))'))
$（eval all_instances := $（filter-out $（$（strip $1)),S(all_instances)))\
$（foreach v,$（S（strip $1)_def_slotnames),
$（eval S（instance）_$v :=)）)
1
endef
---
## Page 277
越过make的极限
267
#S（call struct-name,instance_id)
define struct-name
$（firstword s（subst @，，S（S（strip Si))))
endef
S（call check-params,instance_id,slot_name)
define check-paramc
S（if s（filter S($(strip $1)).$（all_instances)).,
S（error Invalid instance 'S(strip Sl)'))
S（if S（filter $2,S(S（call struct-name,S1)_def_slotnames)),,
S（error Instance ‘$（$（strip $1))'does not have slot *S（strip $2)'))
endef
#$（call get-value,instance_id,slot_name）
define get-value
S(strip
S（ca11 check-params.$1,S2)
$（s（$（strip $1））_$（strip $2）))
endef
#S(call set-value,instance_id,slot_name,value)
define set-value
$（cal1 check-params,$1,$2）\
S（eval s(S（strip $1))_S(strip $2）:=S3)
endef
#s（call dump-struct,struct_name)
define dump-struct
(S（strip s1)_def_slotnames "s（$（strip $1)_def_slotnames)"
S（foreach s,
$（$（strip $1)_def_slotnames）,$(strip
endef
#S(call print-struct,struct_name)
define print-struct
($（foreach s，
s($(strip s1)_def_slotnames),S(strip
（"$s*$（s（strip S1）_def_$s_default)·}）））
endef
#$（call dump-instance，i
instance_id)
define dump-instance
(S（eval tmp_name := S（call struct-name,$1）)
$（foreach s,
$（s（tmp_name)_def_slotnames),S（strip
{$（$（strip $1）)_$s “S（s(S(strip $1）)_Ss）*})）)
1
endef
$（call print-instance,instance_id)
define print-instance
{S（foreach s,
$（$（call struct-name,S1）_def_s1otnames),*$(strip
$（call get-value,$1,$s))）}
endef
---
## Page 278
268
附录二
让我们一次查看一段程序代码。首先看到的是next-id函数的定义，这是一个简单的
计数器：
#S（next-id）—-返回一个独一无二的数字
next_id_counter :=
define next-id
$（words $(next_id_counter))s(eval next_id_counter += 1)
endef
许多人认为make无法进行算术运算，因为这个语言的限制太大。一般来说，的确是如
此，不过像这样的极限测试通常可以求得你想要的结果。此函数会使用eVal重新定义
一个简单变量的值。此函数包含了两个表达式：第一个表达式会返回next_id_counter
中的单词数目：第二个表达式会将另一个单词附加到该变量。它并不是非常有效率，但
是当数字在数千时它还是很好的。
下一段是定义defstruct函数本身以及创建支持的数据结构。