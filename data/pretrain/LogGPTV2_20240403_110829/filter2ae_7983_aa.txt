俗话说，工欲善其事，必先利其器，在二进制安全的学习中，使用工具尤为重要，而IDA又是玩二进制的神器，以前在使用IDA的时候，只是用几个比较常用的功能，对于IDA的其他功能没有去研究，于是本着学习的精神，参考着《IDA
pro权威指南》(第二版)，写下这篇文章，记录自己的学习心得，下面的记录都是在Windows平台下的IDA pro7.0进行的
# 一些二进制工具
在《IDA pro权威指南》的开篇一两章中，先是介绍了几款常用于二进制研究的工具，我这里简单的记了几个，介绍一波：
C++filt：  
可以用于显示出c++中复杂的重载后的函数名称
PE tools：  
是一组用于分析Windows系统中正在运行的进程和可执行文件的工具
string：  
可以用于直接搜索出elf文件中的所有字符串  
参数-a 表示搜索整个文件，参数-t 可以显示出每一个字符串的偏移，参数-e 可以用于搜索更多的字符编码的字符串，如Unicode编码
strip：
可用于elf去符号，去符号后仍然保持正常功能但增加了逆向的难度，出题恶人必备
开发了IDA的天才是Ilfak，他的个人博客有很多IDA的教程  
# IDA目录结构
在IDA的安装根目录下有许多文件夹，各个文件夹存储不同的内容
cfg：包含各种配置文件，基本IDA配置文件ida.cfg,GUI配置文件idagui.cfg，文本模式用户界面配置文件idatui.cfg,  
idc：包含IDA内置脚本语言IDC所需要的核心文件  
ids：包含一些符号文件  
loaders：包含用于识别和解析PE或者ELF  
plugins：附加的插件模块  
procs：包含处理器模块
# 常用快捷键
IDA中的快捷键都是和菜单栏的各个功能选项一一对应的，基本上你只要能在菜单栏上找到某个功能，也就能看到相应的快捷键，这里记录几个常用的：
a：将数据转换为字符串
f5：一键反汇编
esc：回退键，能够倒回上一部操作的视图（只有在反汇编窗口才是这个作用，如果是在其他窗口按下esc，会关闭该窗口）
shift+f12：可以打开string窗口，一键找出所有的字符串，右击setup，还能对窗口的属性进行设置
ctrl+w：保存ida数据库
ctrl+s：选择某个数据段，直接进行跳转
ctrl+鼠标滚轮：能够调节流程视图的大小
x：对着某个函数、变量按该快捷键，可以查看它的交叉引用
g：直接跳转到某个地址
n：更改变量的名称
y：更改变量的类型
/ ：在反编译后伪代码的界面中写下注释
\：在反编译后伪代码的界面中隐藏/显示变量和函数的类型描述，有时候变量特别多的时候隐藏掉类型描述看起来会轻松很多
；：在反汇编后的界面中写下注释
ctrl+shift+w：拍摄IDA快照
u：undefine，取消定义函数、代码、数据的定义
# 常用设置
## 拍摄快照
由于IDA不提供撤销的功能，如果你不小心按到某个键，导致ida数据库发生了改变，就得重新来过，所以要记得在经常操作的时候，加上快照：file-->take
database snapshot  
加完快照后，会生成一个新的ida数据库文件，本质上是有点像另存的操作
快捷键：ctrl+shift+w
## 菜单栏常用设置
view-->open subviews: 可以恢复你无意中关闭的数据显示窗口
windows-->reset desktop: 可以恢复初始ida布局
option-->font: 可以改变字体的相关属性
## 在流程视图中添加地址偏移
IDA中的流程视图可以说是非常的好用，简单明了地能看出程序的执行流程，尤其是在看if分支代码和循环代码的时候，能够非常直观
但是，我们还可以改得更加好用，在这个视图中添加地址偏移的话，我们取地址就非常方便，不再需要按空格切换视图去找，在菜单栏中设置：option-->general
将该选项打钩后就可以看到效果了：
## 自动添加反汇编注释
这个功能对于萌新来说非常友好，在刚刚初学汇编的时候，
难免遇到几个不常用的蛇皮汇编指令，就得自己一个个去查，很麻烦，开启了自动注释的功能后，IDA就可以直接告诉你汇编指令的意思
同样是在菜单栏中设置：option-->general
效果如下：
# 常用操作
## 创建数组
在操作IDA的时候，经常会遇到需要创建数组的情况，尤其是为了能方便我们看字符串的时候，创建数组显得非常必要，以下我随便找了个数据来创建数组
首先点击选中你想要转换成数组的一块区域：
接着在菜单栏中选择：edit-->array，就会弹出如下的选项框
下面来解释一下各个参数的意思：
`Array element size` 这个值表示各数组元素的大小（这里是1个字节），是根据你选中的数据值的大小所决定的
`Maximum possible size` 这个值是由自动计算得出的，他表示数组中的元素的可能的最大值
`Array size` 表示数组元素的数量，一般都根据你选定的自动产生默认值
`Items on a line` 这个表示指定每个反汇编行显示的元素数量，它可以减少显示数组所需的空间
`Element print width` 这个值用于格式化，当一行显示多个项目时，他控制列宽
`Use “dup” construct` ：使用重复结构，这个选项可以使得相同的数据值合并起来，用一个重复说明符组合成一项
`Signed elements` 表示将数据显示为有符号数还是无符号数
`Display indexes` 显示索引，使得数组索引以常规的形式显示，如果选了这个选项，还会启动右边的Indexes选项栏，用于选择索引的显示格式
`Create as array` 创建为数组，这个一般默认选上的
创建好了以后，就变成了这样：
)
可以看到这些数据已经被当成一个数组折叠到了一起，其中`2 dup(0FFh)`这样的，表示有两个重复的数据0xff
## 流程图
### 折叠流程图中的分支
在流程视图中，分支过多的时候，可以在窗口标题处右击选择group nodes，就能把当前块折叠起来
效果如下:
分支块是可以自己命名的，方便自己逆向理解
### 函数调用图
菜单栏中：view-->graphs-->Function calls(快捷键Ctrl+F12)
这个图能很清楚地看到函数之间是如何相互调用的
### 函数流程图
菜单栏中：view-->graphs-->flowt chart(快捷键F12)
这个其实跟IDA自带的反汇编流程视图差不多，他可以导出来作为单独的一张图
## 创建结构体：
### 手工创建结构体
创建结构体是在IDA的structures窗口中进行的，这个操作在堆漏洞的pwn题中经常使用
可以看到，这里已经存在了四个结构体，程序本身存在的，可以右击选择hide/unhide,来看具体的结构体的内容
创建结构体的快捷键是：insert
在弹出的窗口中，可以编辑结构体的名字
这底下有三个复选框，第一个表示显示在当前结构体之前（就会排列在第一位，否则排列在你鼠标选定的位置），第二个表示是否在窗口中显示新的结构体，第三个表示是否创建联合体。
需要注意的是，结构体的大小是它所包含的字段大小的总和，而联合体的大小则等于其中最大字段的大小
在单击ok以后，就定好了一个空的结构体：
将鼠标放在 ends这一行，单击快捷键D即可添加结构体成员，成员的命名默认是以field_x表示的，x代表了该成员在结构体中的偏移
同时，可以把鼠标放在结构体成员所在的行，按D，就可以切换不同的字节大小
默认情况下可供选择的就只有db，dw，dd（1，2，4字节大小）
如果想添加型的类型，可以在option-->setup data types(快捷键Alt+D)，进行设置
如图，勾选了第五个和第九个的话，就会出现dq和xmmword了（代表了8字节和16字节）
如果要添加数组成员则可以对着成员所在的那一行，右击选择array
如图，要创建的是16个元素的4字节数组
**如果要删除结构体，那么对着结构体按下delete键即可删除**
**如果要删除成员，则对着成员按下u（undefine）但是需要注意的是，这里只是删除了成员的名字，而没有删除它所分配的空间**
如图，我们删除了中间的field_10的数组成员：
会变成这样：
数组所分配的20个字节的空间并没有被删除，这时如果要删除掉这些空间，就需要在原来数组成员所在的第一行中按下Ctrl+S，删除空间（Edit-->shrink
struct types）
就可以真正的删除掉成员
**给结构体的成员重命名可以用快捷键N**
我们在IDA中创建好了结构体以后，就是去应用它了
如图，这是一个典型的堆的题目
可以看到v1是一个新建的chunk的地址指针，而后的操作都是往chunk不同的偏移位置写入内容，为了方便我们逆向观察，可以将其变成一个结构体，通过`v1`
`v1+4` `v1+0x48` 这样的偏移，创建好结构体后，将`char *v1`的类型改成`mail
*v1`,（快捷键Y可以更改函数、变量的类型和参数）这个mail是我们创建的结构体的名称，效果如下：
### 导入C语言声明的结构体
实际上，IDA有提供一个更方便的创建结构体的方法，就是直接写代码导入
在View-->Open Subviews-->Local Types中可以看到本地已有的结构体，在该窗口中右击insert
可以添加新的结构体：
这样就导入了新的结构体：
但同时我们发现structure视图里面，并没有这个结构体，我们需要对着my_structure右击，选择 synchronize to idb
这样structure视图就有了,如图
这里你会发现，多出来两个db的undefined的成员，这是因为ida默认是会把结构体统一4字节对齐的，满足结构体的大小为0x28
## IDA动态调试elf：
这里我以一个在Ubuntu虚拟机中的elf为例子，进行调试