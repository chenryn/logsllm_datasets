joins the mix and then aborts, disrupting the protocol
for all other users. Decentralization also requires mix
users to interact via a peer-to-peer network in order
to identify each other and mix payments. This coor-
dination between users causes communication to grow
quadratically [9], [10], limiting scalability; neither [43]
nor [34] performs a mix with more than 50 users.
Decentralization also makes it easy for an attacker to
create many Sybils and trick Alice A into mixing with
them in order to deanonymize her payments [10], [47].
TumbleBit sidesteps these scalability limitations by not
requiring coordination between mix users. The full
version [20] discusses the other tumblers in Table I-A.
After this paper was ﬁrst posted, Dorier and Ficsor
began an independent TumbleBit implementation.3
to (i.e., attempt
II. BITCOIN SCRIPTS AND SMART CONTRACTS
In designing TumbleBit, our key challenge was
ensuring compatibility with today’s Bitcoin protocol.
We therefore start by reviewing Bitcoin transactions and
Bitcoin’s non-Turing-complete language Script.
Transactions. A Bitcoin user Alice A is identiﬁed by
her bitcoin address (which is a public ECDSA key),
and her bitcoins are “stored” in transactions. A single
transaction can have multiple outputs and multiple in-
puts. Bitcoins are transferred by sending the bitcoins
held in the output of one transaction to the input of a
different transaction. The blockchain exists to provide a
public record of all valid transfers. The bitcoins held
in a transaction output can only be transferred to a
single transaction input. A transaction input T3 double-
spends a transaction input T2 when both T2 and T3
point
to transfer bitcoins from) the
same transaction output T1. The security of the Bitcoin
protocol implies that double-spending transactions will
not be conﬁrmed on the blockchain. Transactions also
include a transaction fee that is paid to the Bitcoin miner
that conﬁrms the transaction on the blockchain. Higher
fees are paid for larger transactions. Indeed, fees for
conﬁrming transactions on the blockchain are typically
expressed as “Satoshi-per-byte” of the transaction.
Scripts.
Each transaction uses Script to determine
the conditions under which the bitcoins held in that
transaction can be moved to another transaction. We
build “smart contracts” from the following transactions:
- Toffer: One party A offers to pay bitcoins to any party
that can sign a transaction that meets some condition C.
The Toffer transaction is signed by A.
- Tfulﬁll: This transaction points to Toffer, meets the
condition C stipulated in Toffer, and contains the public
key of the party B receiving the bitcoins.
3https://github.com/NTumbleBit/NTumbleBit
3
itself
Script
supports
is posted to the blockchain ﬁrst. When Tfulﬁll
Toffer
is conﬁrmed by the blockchain, the bitcoins in Tfulﬁll
ﬂow from the party signing transaction Toffer
to the
party signing Tfulﬁll. Bitcoin scripts support two types
of conditions that involve cryptographic operations:
The condition C stipulated in
Hashing condition:
Toffer is: “Tfulﬁll must contain the preimage of value
y computed under the hash function H.” Then, Tfulﬁll
collects the offered bitcoin by including a value x such
that H(x) = y. (We use the OP_RIPEMD160 opcode
so that H is the RIPEMD-160 hash function.)
Signing condition: The condition C stipulated in Toffer
is: “Tfulﬁll must be digitally signed by a signature that
veriﬁes under public key PK .” Then, Tfulﬁll fulﬁlls
this condition if it is validly signed under PK . The
signing condition is highly restrictive: (1) today’s Bit-
coin protocol requires the signature to be ECDSA over
the Secp256k1 elliptic curve [41]—no other elliptic
curves or types of signatures are supported, and (2)
the condition speciﬁcally requires Tfulﬁll
to be
signed. Thus, one could not use the signing condi-
tion to build a contract whose condition requires an
arbitrary message m to be signed by PK .4 (Tum-
bleBit uses the OP_CHECKSIG opcode, which re-
quires veriﬁcation of a single signature, and the “2-of-2
multisignature” template ‘OP_2 key1 key2 OP_2
OP_CHECKMULTISIG’ which requires veriﬁcation of a
signature under key1 AND a signature under key2.)5
under
“IF” and “ELSE”. Script also supports timelocking
(OP_CHECKLOCKTIMEVERIFY opcode [46]), where
Toffer also stipulates that Tfulﬁll is timelocked to time
window tw. (Note that tw is an absolute block height.)
This allows the party that posted Tfulﬁll to reclaim their
bitcoin if Tfulﬁll
is
higher than tw. Section VIII-A details the scripts used
in our implementation.
2-of-2 escrow.
relies heavily on the
commonly-used 2-of-2 escrow smart contract. Suppose
that Alice A wants to put Q bitcoin in escrow to
be redeemed under the condition C2of 2: “the fulﬁlling
transaction includes two signatures: one under public
key PK 1 AND one under PK 2.”
To do so, A ﬁrst creates a multisig address
PK (1,2) for the keys PK 1 and PK 2 using the Bit-
coin createmultisig command. Then, A posts an
escrow transaction Tescr on the blockchain that sends
Q bitcoin to this new multisig address PK (1,2). The
Tescr transaction is essentially a Toffer transaction that
requires the fulﬁlling transaction to meet condition
C2of 2. We call the fulﬁlling transaction Tcash the cash-
out transaction. Given that A doesn’t control both PK 1
4This is why [21] is not Bitcoin-compatible. [21] requires a blind
signature to be computed over an arbitrary message. Also, ECDSA-
Secp256k1 does not support blind signatures.
is unspent and the block height
TumbleBit
composing
conditions
5Unlike cryptographic multisignatures, a Bitcoin 2-of-2 multisig-
nature is a tuple of two distinct signatures and not a joint signature.
and PK 2 (i.e., doesn’t know the corresponding secret
keys), we also timelock the Tescr transaction for a time
window tw. Thus, if a valid Tcash is not conﬁrmed by
the blockchain within time window tw, the escrowed
bitcoins can be reclaimed by A. Therefore, A’s bitcoins
are escrowed until either (1) the time window expires
and A reclaims her bitcoins or (2) a valid Tcash is
conﬁrmed. TumbleBit uses 2-of-2 escrow to establish
pairwise payment channels, per Figure 1.
III. TUMBLEBIT: AN UNLINKABLE PAYMENT HUB
Our goal is to allow a payer, Alice A, to unlinkably
send 1 bitcoin to a payee, Bob B. Naturally, if Alice
A signed a regular Bitcoin transaction indicating that
Addr A pays 1 bitcoin to Addr B, then the blockchain
would record a link between Alice A and Bob B
and anonymity could be harmed using the techniques
of [31], [42], [8]. Instead, TumbleBit funnels payments
from multiple payer-payee pairs through the Tumbler T ,
using cryptographic techniques to ensure that, as long
as T does not collude with TumbleBit’s users, then no
one can link a payment from payer A to payee B.
A. Overview of Bob’s Interaction with the Tumbler
We overview TumbleBit’s phases under the assump-
tion that Bob B receives a single payment of value
1 bitcoin. TumbleBit’s Anonymity properties require
all payments made in the system to have the same
denomination; we use 1 bitcoin for simplicity. In our
full version [20] we also discuss how Bob can receive
multiple payments of denomination 1 bitcoin each.
TumbleBit has three phases (Fig 1). Off-blockchain
TumbleBit payments take place during the middle Pay-
ment Phase, which can last for hours or even days.
Meanwhile, the ﬁrst Escrow Phase sets up payment
channels, and the last Cash-Out Phase closes them
down; these two phases require on-blockchain transac-
tions. All users of TumbleBit know exactly when each
phase begins and ends. One way to coordinate is to use
block height; for instance, if the payment phase lasts
for 1 day (i.e., ≈ 144 blocks) then the Escrow Phase is
when block height is divisible by 144, and the Cash-Out
Phase is when blockheight+1 is divisible by 144.
1: Escrow Phase. Every Alice A that wants to send
payments (and Bob B that wants to receive payments)
during the upcoming Payment Phase runs the escrow
phase with T . The escrow phase has two parts:
(a) Payee B asks the Tumbler T to set up a payment
channel. T escrows 1 bitcoin on the blockchain via
a 2-of-2 escrow transaction (Section II) denoted as
Tescr(T ,B) stipulating that 1 bitcoin can be claimed by
any transaction signed by both T and B. Tescr(T ,B) is
timelocked to time window tw 2, after which T can
reclaim its bitcoin. Similarly, the payeer A escrows 1
bitcoin in a 2-of-2 escrow with T denoted as Tescr(A,T ),
timelocked for time window tw 1 such that tw 1 < tw 2.
4
(b) Bob B obtains a puzzle z through an off-
blockchain cryptographic protocol with T which we call
the puzzle-promise protocol. Conceptually, the output of
this protocol is a promise by T to pay 1 bitcoin to B
in exchange for the solution to a puzzle z. The puzzle
z is just an RSA encryption of a value 
z = fRSA(, e, N ) = e mod N
(1)
where (e, N ) is the TumbleBit RSA public key of
the Tumbler T . “Solving the puzzle” is equivalent
to decrypting z and thus obtaining its “solution” .
Meanwhile, the “promise” c is a symmetric encryption
under key 
c = Enc(σ)
where σ is the Tumbler’s ECDSA-Secp256k1 signature
on the transaction Tcash(T ,B) which transfers the bitcoin
escrowed in Tescr(T ,B) from T to B. (We use ECDSA-
Secp256k1 for compatibility with the Bitcoin protocol.)
Thus, the solution to a puzzle z enables B to claim 1
bitcoin from T . To prevent misbehavior by the Tumbler
T , our puzzle-promise protocol requires T to provide a
proof that the puzzle solution  is indeed the key which
decrypts the promise ciphertext c. The details of this
protocol, and its security guarantees, are in Section VI.
2: Payment Phase. Once Alice A indicates she is ready
to pay Bob B, Bob B chooses a random blinding factor
r ∈ Z∗
N and blinds the puzzle to
z = re z mod N.
(2)
Blinding ensures that even T cannot link the original
puzzle z to its blinded version z. Bob B then sends z to
A. Next, A solves the blinded puzzle z by interacting
with T . This puzzle-solver protocol is a fair exchange
that ensures that A transfers 1 bitcoin to T iff T gives
a valid solution to the puzzle z. Finally, Alice A sends
the solution to the blinded puzzle  back to Bob B. Bob
unblinds  to obtain the solution
 = /r mod N
(3)
and accepts Alice’s payment if the solution is valid, i.e.,
e = z mod N.
3: Cash-Out Phase. Bob B uses the puzzle solution 
to decrypt the ciphertext c. From the result B can create
a transaction Tcash(T ,B) that is signed by both T and B.
B posts Tcash(T ,B) to the blockchain to receive 1 bitcoin
from T .
Our protocol crucially relies on the algebraic prop-
erties of RSA, and RSA blinding. To make sure that
the Tumbler is using a valid RSA public key (e, N ),
TumbleBit also has an one-time setup phase:
0: Setup. Tumbler T announces its RSA public
key (e, N ) and Bitcoin address AddrT , together with a
non-interactive zero-knowledge proof of knowledge π6
6Such a proof could be provided using the GQ identiﬁcation pro-
tocol [19] made non-interactive using the Fiat-Shamir heuristic [14]
in the random oracle model.
5
of the corresponding RSA secret key d. Every user of
TumbleBit validates (e, N ) using π.
B. Overview of Alice’s Interaction with the Tumbler
We now focus on the puzzle-solving protocol be-
tween A and the Tumbler T to show how TumbleBit
allows A to make many off-blockchain payments via
only two on-blockchain transactions (aiding scalability).
During the Escrow Phase, Alice opens a payment
channel with the Tumbler T by escrowing Q bitcoins in
an on-blockchain transaction Tescr(A,T ). Each escrowed
bitcoin can pay T for the solution to one puzzle. Next,
during the off-blockchain Payment Phase, A makes off-
blockchain payments to j ≤ Q payees. Finally, during
the Cash-Out Phase, Alice A pays the Tumbler T by
posting a transaction Tcash(A,T )(j) that reﬂects the new
allocation of bitcoins; namely, that T holds j bitcoins,
while A holds Q − j bitcoins. The details of Alice A’s
interaction with T , which are based on a technique used
in micropayment channels [36, p. 86], are as follows:
1: Escrow Phase. Alice A posts a 2-of-2 escrow
transaction Tescr(A,T ) to the blockchain that escrows Q
of Alice’s bitcoins. If no valid transaction Tcash(A,T ) is
posted before time window tw 1, then all Q escrowed
bitcoins can be reclaimed by A.
2: Payment Phase. Alice A uses her escrowed bitcoins
to make off-blockchain payments to the Tumbler T . For
each payment, A and T engage in an off-blockchain
puzzle-solver protocol (see Sections V-A,V-C).
Once the puzzle is solved, Alice signs and gives T
a new transaction Tcash(A,T )(i). Tcash(A,T )(i) points to
Tescr(A,T ) and reﬂects the new balance between A and
T (i.e., that T holds i bitcoins while A holds Q − i
bitcoins). T collects a new Tcash(A,T )(i) from A for
each payment. If Alice refuses to sign Tcash(A,T )(i),
then the Tumbler refuses to help Alice solve further
puzzles. Importantly, each Tcash(A,T )(i) for i = 1...j
(for j < Q) is signed by Alice A but not by T , and is
not posted to the blockchain.
3: Cash-Out Phase. The Tumbler T claims its bit-
coins from Tescr(A,T ) by signing Tcash(A,T )(j) and
posting it to the blockchain. This fulﬁlls the condi-
tion in Tescr(A,T ), which stipulated that the escrowed
coins be claimed by a transaction signed by both A
and T . (Notice that all the Tcash(A,T )(i) point to the
same escrow transaction Tescr(A,T ). The blockchain
will therefore only conﬁrm one of these transactions;
otherwise, double spending would occur. Rationally,
the Tumbler T always prefers to conﬁrm Tcash(A,T )(j)
since it transfers the maximum number of bitcoins to
T .) Because Tcash(A,T )(j) is the only transaction signed
by the Tumbler T , a cheating Alice cannot steal bitcoins
by posting a transaction that allocates fewer than j
bitcoins to the Tumbler T .
Remark: Scaling Bitcoin. A similar (but more elaborate)
technique can be applied between B and T so that
DoS and Sybil protection. TumbleBit uses transaction
fees to resist DoS and Sybil attacks. Every Bitcoin
transaction can include a transaction fee that is paid
to the Bitcoin miner who conﬁrms the transaction on
the blockchain as an incentive to conﬁrm transactions.
However, because the Tumbler T does not trust Alice
A and Bob B, T should not be expected to pay fees
on the transactions posted during the Escrow Phase. To
this end, when Alice A establishes a payment channel
with T , she pays for both the Q escrowed in transaction
Tescr(A,T ) and for its transaction fees. Meanwhile, when
the Tumbler T and Bob B establish a payment channel,
the Q escrowed bitcoins in Tescr(T ,B) are paid in the
Tumbler T , but the transaction fees are paid by Bob B
(Section III-A). Per [9], fees raise the cost of an DoS
attack where B starts and aborts many parallel sessions,
locking T ’s bitcoins in escrow transactions. This simi-
larly provides Sybil resistance, making it expensive for
an adversary to harm anonymity by tricking a user into
entering a run of TumbleBit where all other users are
Sybils under the adversary’s control.
IV. TUMBLEBIT: ALSO A CLASSIC TUMBLER.
We can also operate TumbleBit as classic Bitcoin
Tumbler. As a classic Tumbler, TumbleBit operates in
epoches, each of which (roughly) requires two blocks
to be conﬁrmed on the blockchain (≈ 20 mins). During
each epoch, there are exactly ℵ distinct bitcoin addresses
making payments (payers) and ℵ bitcoin addresses
receiving payments (payees). Each payment is of de-
nomination 1 bitcoin, and the mapping from payers to
payees is a bijection. During one epoch, the protocol
itself is identical to that in Section III with the following
changes: (1) the duration of the Payment Phase shrinks
to seconds (rather than hours or days); (2) each payment
channel escrows exactly Q = 1 bitcoin; and (3) every
payee Bob B receives payments at an ephemeral bitcoin