note that existing segments that are attached to no process will be
immediately destroyed when this file is set to 1.
setting this option will also destroy segments that were created,
but never attached,
upon termination of the process that created the segment with
.br shmget (2).
.ip
setting this file to 1 provides a way of ensuring that
all system v shared memory segments are counted against the
resource usage and resource limits (see the description of
.b rlimit_as
in
.br getrlimit (2))
of at least one process.
.ip
because setting this file to 1 produces behavior that is nonstandard
and could also break existing applications,
the default value in this file is 0.
set this file to 1 only if you have a good understanding
of the semantics of the applications using
system v shared memory on your system.
.tp
.ir /proc/sys/kernel/shmall " (since linux 2.2)"
this file
contains the system-wide limit on the total number of pages of
system v shared memory.
.tp
.ir /proc/sys/kernel/shmmax " (since linux 2.2)"
this file
can be used to query and set the run-time limit
on the maximum (system v ipc) shared memory segment size that can be
created.
shared memory segments up to 1 gb are now supported in the
kernel.
this value defaults to
.br shmmax .
.tp
.ir /proc/sys/kernel/shmmni " (since linux 2.4)"
this file
specifies the system-wide maximum number of system v shared memory
segments that can be created.
.tp
.ir /proc/sys/kernel/sysctl_writes_strict " (since linux 3.16)"
.\" commit f88083005ab319abba5d0b2e4e997558245493c8
.\" commit 2ca9bb456ada8bcbdc8f77f8fc78207653bbaa92
.\" commit f4aacea2f5d1a5f7e3154e967d70cf3f711bcd61
.\" commit 24fe831c17ab8149413874f2fd4e5c8a41fcd294
the value in this file determines how the file offset affects
the behavior of updating entries in files under
.ir /proc/sys .
the file has three possible values:
.rs
.tp 4
\-1
this provides legacy handling, with no printk warnings.
each
.br write (2)
must fully contain the value to be written,
and multiple writes on the same file descriptor
will overwrite the entire value, regardless of the file position.
.tp
0
(default) this provides the same behavior as for \-1,
but printk warnings are written for processes that
perform writes when the file offset is not 0.
.tp
1
respect the file offset when writing strings into
.i /proc/sys
files.
multiple writes will
.i append
to the value buffer.
anything written beyond the maximum length
of the value buffer will be ignored.
writes to numeric
.i /proc/sys
entries must always be at file offset 0 and the value must be
fully contained in the buffer provided to
.br write (2).
.\" fixme .
.\"     with /proc/sys/kernel/sysctl_writes_strict==1, writes at an
.\"     offset other than 0 do not generate an error. instead, the
.\"     write() succeeds, but the file is left unmodified.
.\"     this is surprising. the behavior may change in the future.
.\"     see thread.gmane.org/gmane.linux.man/9197
.\"		from: michael kerrisk (man-pages 
.\"		subject: sysctl_writes_strict documentation + an oddity?
.\"		newsgroups: gmane.linux.man, gmane.linux.kernel
.\"		date: 2015-05-09 08:54:11 gmt
.re
.tp
.i /proc/sys/kernel/sysrq
this file controls the functions allowed to be invoked by the sysrq key.
by default,
the file contains 1 meaning that every possible sysrq request is allowed
(in older kernel versions, sysrq was disabled by default,
and you were required to specifically enable it at run-time,
but this is not the case any more).
possible values in this file are:
.rs
.tp 5
0
disable sysrq completely
.tp
1
enable all functions of sysrq
.tp
> 1
bit mask of allowed sysrq functions, as follows:
.pd 0
.rs
.tp 5
\ \ 2
enable control of console logging level
.tp
\ \ 4
enable control of keyboard (sak, unraw)
.tp
\ \ 8
enable debugging dumps of processes etc.
.tp
\ 16
enable sync command
.tp
\ 32
enable remount read-only
.tp
\ 64
enable signaling of processes (term, kill, oom-kill)
.tp
128
allow reboot/poweroff
.tp
256
allow nicing of all real-time tasks
.re
.pd
.re
.ip
this file is present only if the
.b config_magic_sysrq
kernel configuration option is enabled.
for further details see the linux kernel source file
.i documentation/admin\-guide/sysrq.rst
.\" commit 9d85025b0418163fae079c9ba8f8445212de8568
(or
.i documentation/sysrq.txt
before linux 4.10).
.tp
.i /proc/sys/kernel/version
this file contains a string such as:
.ip
    #5 wed feb 25 21:49:24 met 1998
.ip
the "#5" means that
this is the fifth kernel built from this source base and the
date following it indicates the time the kernel was built.
.tp
.ir /proc/sys/kernel/threads\-max " (since linux 2.3.11)"
.\" the following is based on documentation/sysctl/kernel.txt
this file specifies the system-wide limit on the number of
threads (tasks) that can be created on the system.
.ip
since linux 4.1,
.\" commit 230633d109e35b0a24277498e773edeb79b4a331
the value that can be written to
.i threads\-max
is bounded.
the minimum value that can be written is 20.
the maximum value that can be written is given by the
constant
.b futex_tid_mask
(0x3fffffff).
if a value outside of this range is written to
.ir threads\-max ,
the error
.b einval
occurs.
.ip
the value written is checked against the available ram pages.
if the thread structures would occupy too much (more than 1/8th)
of the available ram pages,
.i threads\-max
is reduced accordingly.
.tp
.ir /proc/sys/kernel/yama/ptrace_scope " (since linux 3.5)"
see
.br ptrace (2).
.tp
.ir /proc/sys/kernel/zero\-paged " (powerpc only)"
this file
contains a flag.
when enabled (nonzero), linux-ppc will pre-zero pages in
the idle loop, possibly speeding up get_free_pages.
.tp
.i /proc/sys/net
this directory contains networking stuff.
explanations for some of the files under this directory can be found in
.br tcp (7)
and
.br ip (7).
.tp
.i /proc/sys/net/core/bpf_jit_enable
see
.br bpf (2).
.tp
.i /proc/sys/net/core/somaxconn
this file defines a ceiling value for the
.i backlog
argument of
.br listen (2);
see the
.br listen (2)
manual page for details.
.tp
.i /proc/sys/proc
this directory may be empty.
.tp
.i /proc/sys/sunrpc
this directory supports sun remote procedure call for network filesystem
(nfs).
on some systems, it is not present.
.tp
.ir /proc/sys/user " (since linux 4.9)"
see
.br namespaces (7).
.tp
.i /proc/sys/vm
this directory contains files for memory management tuning, buffer, and
cache management.
.tp
.ir /proc/sys/vm/admin_reserve_kbytes " (since linux 3.10)"
.\" commit 4eeab4f5580d11bffedc697684b91b0bca0d5009
this file defines the amount of free memory (in kib) on the system that
should be reserved for users with the capability
.br cap_sys_admin .
.ip
the default value in this file is the minimum of [3% of free pages, 8mib]
expressed as kib.
the default is intended to provide enough for the superuser
to log in and kill a process, if necessary,
under the default overcommit 'guess' mode (i.e., 0 in
.ir /proc/sys/vm/overcommit_memory ).
.ip
systems running in "overcommit never" mode (i.e., 2 in
.ir /proc/sys/vm/overcommit_memory )
should increase the value in this file to account
for the full virtual memory size of the programs used to recover (e.g.,
.br login (1)
.br ssh (1),
and
.br top (1))
otherwise, the superuser may not be able to log in to recover the system.
for example, on x86-64 a suitable value is 131072 (128mib reserved).
.ip
changing the value in this file takes effect whenever
an application requests memory.
.tp
.ir /proc/sys/vm/compact_memory " (since linux 2.6.35)"
when 1 is written to this file, all zones are compacted such that free
memory is available in contiguous blocks where possible.
the effect of this action can be seen by examining
.ir /proc/buddyinfo .
.ip
present only if the kernel was configured with
.br config_compaction .
.tp
.ir /proc/sys/vm/drop_caches " (since linux 2.6.16)"
writing to this file causes the kernel to drop clean caches, dentries, and
inodes from memory, causing that memory to become free.
this can be useful for memory management testing and
performing reproducible filesystem benchmarks.
because writing to this file causes the benefits of caching to be lost,
it can degrade overall system performance.
.ip
to free pagecache, use:
.ip
    echo 1 > /proc/sys/vm/drop_caches
.ip
to free dentries and inodes, use:
.ip
    echo 2 > /proc/sys/vm/drop_caches
.ip
to free pagecache, dentries, and inodes, use:
.ip
    echo 3 > /proc/sys/vm/drop_caches
.ip
because writing to this file is a nondestructive operation and dirty objects
are not freeable, the
user should run
.br sync (1)
first.
.tp
.ir  /proc/sys/vm/sysctl_hugetlb_shm_group " (since linux 2.6.7)"
this writable file contains a group id that is allowed
to allocate memory using huge pages.
if a process has a filesystem group id or any supplementary group id that
matches this group id,
then it can make huge-page allocations without holding the
.br cap_ipc_lock
capability; see
.br memfd_create (2),
.br mmap (2),
and
.br shmget (2).
.tp
.ir /proc/sys/vm/legacy_va_layout " (since linux 2.6.9)"
.\" the following is from documentation/filesystems/proc.txt
if nonzero, this disables the new 32-bit memory-mapping layout;
the kernel will use the legacy (2.4) layout for all processes.
.tp
.ir /proc/sys/vm/memory_failure_early_kill " (since linux 2.6.32)"
.\" the following is based on the text in documentation/sysctl/vm.txt
control how to kill processes when an uncorrected memory error
(typically a 2-bit error in a memory module)
that cannot be handled by the kernel
is detected in the background by hardware.
in some cases (like the page still having a valid copy on disk),
the kernel will handle the failure
transparently without affecting any applications.
but if there is no other up-to-date copy of the data,
it will kill processes to prevent any data corruptions from propagating.
.ip
the file has one of the following values:
.rs
.ip 1: 4
kill all processes that have the corrupted-and-not-reloadable page mapped
as soon as the corruption is detected.
note that this is not supported for a few types of pages,
such as kernel internally
allocated data or the swap cache, but works for the majority of user pages.
.ip 0: 4
unmap the corrupted page from all processes and kill a process
only if it tries to access the page.
.re
.ip
the kill is performed using a
.b sigbus
signal with
.i si_code
set to
.br bus_mceerr_ao .
processes can handle this if they want to; see
.br sigaction (2)
for more details.
.ip
this feature is active only on architectures/platforms with advanced machine
check handling and depends on the hardware capabilities.
.ip
applications can override the
.i memory_failure_early_kill
setting individually with the
.br prctl (2)
.b pr_mce_kill
operation.
.ip
present only if the kernel was configured with
.br config_memory_failure .
.tp
.ir /proc/sys/vm/memory_failure_recovery " (since linux 2.6.32)"
.\" the following is based on the text in documentation/sysctl/vm.txt
enable memory failure recovery (when supported by the platform).
.rs
.ip 1: 4
attempt recovery.
.ip 0: 4
always panic on a memory failure.
.re
.ip
present only if the kernel was configured with
.br config_memory_failure .
.tp
.ir /proc/sys/vm/oom_dump_tasks " (since linux 2.6.25)"
.\" the following is from documentation/sysctl/vm.txt
enables a system-wide task dump (excluding kernel threads) to be
produced when the kernel performs an oom-killing.
the dump includes the following information
for each task (thread, process):
thread id, real user id, thread group id (process id),
virtual memory size, resident set size,
the cpu that the task is scheduled on,
oom_adj score (see the description of
.ir /proc/[pid]/oom_adj ),
and command name.
this is helpful to determine why the oom-killer was invoked
and to identify the rogue task that caused it.
.ip
if this contains the value zero, this information is suppressed.
on very large systems with thousands of tasks,
it may not be feasible to dump the memory state information for each one.
such systems should not be forced to incur a performance penalty in
oom situations when the information may not be desired.
.ip
if this is set to nonzero, this information is shown whenever the
oom-killer actually kills a memory-hogging task.
.ip
the default value is 0.
.tp
.ir /proc/sys/vm/oom_kill_allocating_task " (since linux 2.6.24)"
.\" the following is from documentation/sysctl/vm.txt
this enables or disables killing the oom-triggering task in
out-of-memory situations.
.ip
if this is set to zero, the oom-killer will scan through the entire
tasklist and select a task based on heuristics to kill.
this normally selects a rogue memory-hogging task that
frees up a large amount of memory when killed.
.ip
if this is set to nonzero, the oom-killer simply kills the task that
triggered the out-of-memory condition.
this avoids a possibly expensive tasklist scan.
.ip
if
.i /proc/sys/vm/panic_on_oom
is nonzero, it takes precedence over whatever value is used in
.ir /proc/sys/vm/oom_kill_allocating_task .
.ip
the default value is 0.
.tp
.ir /proc/sys/vm/overcommit_kbytes " (since linux 3.14)"
.\" commit 49f0ce5f92321cdcf741e35f385669a421013cb7
this writable file provides an alternative to
.ir /proc/sys/vm/overcommit_ratio
for controlling the
.i commitlimit
when
.ir /proc/sys/vm/overcommit_memory
has the value 2.
it allows the amount of memory overcommitting to be specified as
an absolute value (in kb),
rather than as a percentage, as is done with
.ir overcommit_ratio .
this allows for finer-grained control of
.ir commitlimit
on systems with extremely large memory sizes.
.ip
only one of
.ir overcommit_kbytes
or
.ir overcommit_ratio
can have an effect:
if
.ir overcommit_kbytes
has a nonzero value, then it is used to calculate
.ir commitlimit ,
otherwise
.ir overcommit_ratio
is used.
writing a value to either of these files causes the
value in the other file to be set to zero.
.tp
.i /proc/sys/vm/overcommit_memory
this file contains the kernel virtual memory accounting mode.
values are:
.rs
.ip
0: heuristic overcommit (this is the default)
.br
1: always overcommit, never check
.br
2: always check, never overcommit
.re
.ip
in mode 0, calls of
.br mmap (2)
with
.b map_noreserve
are not checked, and the default check is very weak,
leading to the risk of getting a process "oom-killed".
.ip
in mode 1, the kernel pretends there is always enough memory,
until memory actually runs out.
one use case for this mode is scientific computing applications
that employ large sparse arrays.
in linux kernel versions before 2.6.0, any nonzero value implies mode 1.
.ip
in mode 2 (available since linux 2.6), the total virtual address space
that can be allocated
.ri ( commitlimit
in
.ir /proc/meminfo )
is calculated as
.ip
    commitlimit = (total_ram \- total_huge_tlb) *
                  overcommit_ratio / 100 + total_swap
.ip
where:
.rs 12
.ip * 3
.i total_ram
is the total amount of ram on the system;
.ip *
.i total_huge_tlb
is the amount of memory set aside for huge pages;
.ip *
.i overcommit_ratio
is the value in
.ir /proc/sys/vm/overcommit_ratio ;
and
.ip *
.i total_swap
is the amount of swap space.
.re
.ip
for example, on a system with 16 gb of physical ram, 16 gb
of swap, no space dedicated to huge pages, and an
.i overcommit_ratio
of 50, this formula yields a
.i commitlimit
of 24 gb.
.ip
since linux 3.14, if the value in
.i /proc/sys/vm/overcommit_kbytes
is nonzero, then
.i commitlimit
is instead calculated as:
.ip
    commitlimit = overcommit_kbytes + total_swap
.ip
see also the description of
.ir /proc/sys/vm/admin_reserve_kbytes
and
.ir /proc/sys/vm/user_reserve_kbytes .
.tp
.ir /proc/sys/vm/overcommit_ratio " (since linux 2.6.0)"
this writable file defines a percentage by which memory
can be overcommitted.
the default value in the file is 50.
see the description of
.ir /proc/sys/vm/overcommit_memory .
.tp
.ir /proc/sys/vm/panic_on_oom " (since linux 2.6.18)"
.\" the following is adapted from documentation/sysctl/vm.txt
this enables or disables a kernel panic in
an out-of-memory situation.
.ip
if this file is set to the value 0,
the kernel's oom-killer will kill some rogue process.
usually, the oom-killer is able to kill a rogue process and the
system will survive.
.ip
if this file is set to the value 1,
then the kernel normally panics when out-of-memory happens.
however, if a process limits allocations to certain nodes
using memory policies
.rb ( mbind (2)
.br mpol_bind )
or cpusets
.rb ( cpuset (7))
and those nodes reach memory exhaustion status,
one process may be killed by the oom-killer.
no panic occurs in this case:
because other nodes' memory may be free,
this means the system as a whole may not have reached