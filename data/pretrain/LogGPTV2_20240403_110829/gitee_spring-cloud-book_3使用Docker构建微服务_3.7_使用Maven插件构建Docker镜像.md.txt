# 3.7 使用Maven插件构建Docker镜像
## 工具
工欲善其事，必先利其器。笔者经过调研，有以下几款Docker的Maven插件进入笔者视野：
| 插件名称                | 官方地址                                     |
| ------------------- | ---------------------------------------- |
| docker-maven-plugin | https://github.com/spotify/docker-maven-plugin |
| docker-maven-plugin | https://github.com/fabric8io/docker-maven-plugin |
| docker-maven-plugin | https://github.com/bibryam/docker-maven-plugin |
笔者从Stars、文档易用性以及更新频率三个纬度考虑，选用了第一款。
## 使用插件构建Docker镜像
### 简单使用
我们以之前的项目：microservice-discovery-eureka为例：
* 在pom.xml中添加下面这段
```xml
				com.spotify
				docker-maven-plugin
				0.4.12
					microservice-discovery-eureka
					java
					["java", "-jar", "/${project.build.finalName}.jar"]
							/
							${project.build.directory}
							${project.build.finalName}.jar
```
* 执行命令：
```shell
mvn clean package docker:build
```
* 我们会发现控制台有类似如下内容：
```shell
[INFO] Building image microservice-discovery-eureka
Step 1 : FROM java
Pulling from library/java
Digest: sha256:581a4afcbbedd8fdf194d597cb5106c1f91463024fb3a49a2d9f025165eb675f
Status: Downloaded newer image for java:latest
 ---> ea40c858f006
Step 2 : ADD /microservice-discovery-eureka-0.0.1-SNAPSHOT.jar //
 ---> d1c174083bca
Removing intermediate container 91913d847c20
Step 3 : ENTRYPOINT java -jar /microservice-discovery-eureka-0.0.1-SNAPSHOT.jar
 ---> Running in 0f2aeccdfd46
 ---> d57b027ca65a
Removing intermediate container 0f2aeccdfd46
Successfully built d57b027ca65a
[INFO] Built microservice-discovery-eureka
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:38 min
[INFO] Finished at: 2016-09-18T01:05:05-07:00
[INFO] Final Memory: 40M/198M
```
恭喜，构建成功了。
* 我们执行`docker images` 会发现该镜像已经被构建成功：
```
REPOSITORY                      TAG                 IMAGE ID            CREATED              SIZE
microservice-discovery-eureka   latest              d57b027ca65a        About a minute ago   681.5 MB
```
* 启动镜像
```shell
docker run -p 8761:8761 microservice-discovery-eureka
```
我们会发现该Docker镜像会很快地启动。
* 访问测试
访问[http://Docker宿主机IP:8761](http://Docker宿主机IP:8761) ，能够正常看到Eureka界面。
### 使用Dockerfile进行构建
上文讲述的方式是最简单的方式，很多时候，我们还是要借助Dockerfile进行构建的，首先我们在/microservice-discovery-eureka/src/main/docker目录下，建立文件Dockerfile
```
FROM java:8
VOLUME /tmp
ADD microservice-discovery-eureka-0.0.1-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
EXPOSE 9000
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
```
修改pom.xml
```xml
				com.spotify
				docker-maven-plugin
				0.4.12
					microservice-discovery-eureka-dockerfile
					${project.basedir}/src/main/docker
							/
							${project.build.directory}
							${project.build.finalName}.jar
```
其他步骤一样。这样即可使用Dockerfile进行构建Docker镜像啦。
### 将Docker镜像push到DockerHub上
* 首先修改Maven的全局配置文件settings.xml，添加以下段落 
```xml
    docker-hub
    你的DockerHub用户名
    你的DockerHub密码
      你的DockerHub邮箱
```
* 在DockerHub上创建repo,例如：test，如下图
![DockerHub](images/docker-3.png)
* 项目pom.xml修改为如下：注意imageName的路径要和repo的路径一致
```xml
				com.spotify
				docker-maven-plugin
				0.4.12
					eacdy/test
					${project.basedir}/src/main/docker
							/
							${project.build.directory}
							${project.build.finalName}.jar
					docker-hub
					https://index.docker.io/v1/
```
* 执行命令：
```shell
mvn clean package docker:build  -DpushImage
```
* 搞定，等构建成功后，我们会发现Docker镜像已经被push到DockerHub上了。
###将镜像push到私有仓库
在很多场景下，我们需要将镜像push到私有仓库中去，这边为了讲解的全面性，私有仓库采用的是配置登录认证的私有仓库。
* 和push镜像到DockerHub中一样，我们首先需要修改Maven的全局配置文件settings.xml，添加以下段落 
```xml
    docker-registry
    你的DockerHub用户名
    你的DockerHub密码
      你的DockerHub邮箱
```
* 将项目的pom.xml改成如下，
```xml
  com.spotify
  docker-maven-plugin
  0.4.12
    reg.itmuch.com/test-pull-registry
    ${project.basedir}/src/main/docker
        /
        ${project.build.directory}
        ${project.build.finalName}.jar
    docker-registry
```
* 执行：
```shell
mvn clean package docker:build  -DpushImage
```
稍等片刻，将会push成功。
* 如果想要从私服上下载该镜像，执行：
```shell
docker login reg.itmuch.com  # 然后输入账号和密码
docker pull reg.itmuch.com/test-pull-registry
```
### 将插件绑定在某个phase执行
在很多场景下，我们有这样的需求，例如执行`mvn clean package` 时，自动地为我们构建docker镜像，可以吗？答案是肯定的。我们只需要将插件的`goal` 绑定在某个phase即可。
所谓的phase和goal，可以这样理解：maven命令格式是：`mvn phase:goal` ，例如`mvn package docker:build` 那么，`package` 和 `docker` 都是phase，`build` 则是goal 。
下面是示例：
首先配置属性：
```
  reg.itmuch.com
```
插件配置：
```xml
        com.spotify
        docker-maven-plugin
            build-image
            package
              build
          ${docker.image.prefix}/${project.artifactId}
          java
          ["java", "-jar", "/${project.build.finalName}.jar"]
              /
              ${project.build.directory}
              ${project.build.finalName}.jar
```
如上，我们只需要添加：
```xml
            build-image
            package
              build
```
即可。本例指的是讲docker的build目标，绑定在package这个phase上。也就是说，用户只需要执行`mvn package` ，就自动执行了`mvn docker:build` 。
## 常见异常
### 连接不上2375（一般在Win7上出现）
```
Connect to localhost:2375 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused: connect -> [Help 1]
```
解决步骤：
* 输入`docker-machine env` 
```powershell
$Env:DOCKER_TLS_VERIFY = "1"
$Env:DOCKER_HOST = "tcp://192.168.99.100:2376"
$Env:DOCKER_CERT_PATH = "C:\Users\Administrator\.docker\machine\machines\default
```
* 为插件添加配置
```xml
https://192.168.99.100:2376				C:\Users\Administrator\.docker\machine\machines\default
```
修改后插件配置变为：
```xml
	com.spotify
	docker-maven-plugin
	0.4.12
		eacdy/test
		${project.basedir}/src/main/docker
		https://192.168.99.100:2376
		C:\Users\Administrator\.docker\machine\machines\default
				/
				${project.build.directory}
				${project.build.finalName}.jar
		docker-hub
		https://index.docker.io/v1/
```
* 参考：[https://github.com/spotify/docker-maven-plugin/issues/116](https://github.com/spotify/docker-maven-plugin/issues/116)
## TIPS
1. imageName必须符合正则[a-z0-9-_.]，否则将会构建失败
2. 插件默认使用localhost:2375去连接Docker，如果你的Docker端口不是2375，需要配置环境变量`DOCKER_HOST=tcp://:2375`
## 代码地址（任选其一）
> [https://git.oschina.net/itmuch/spring-cloud-study/tree/master/docker/microservice-discovery-eureka](https://git.oschina.net/itmuch/spring-cloud-study/tree/master/docker/microservice-discovery-eureka)
> [https://github.com/eacdy/spring-cloud-study/tree/master/docker/microservice-discovery-eureka](https://github.com/eacdy/spring-cloud-study/tree/master/docker/microservice-discovery-eureka)
## 参考文档
>  [http://developer.51cto.com/art/201404/434879.htm](http://developer.51cto.com/art/201404/434879.htm)
>  [https://linux.cn/article-6131-rss.html](https://linux.cn/article-6131-rss.html)