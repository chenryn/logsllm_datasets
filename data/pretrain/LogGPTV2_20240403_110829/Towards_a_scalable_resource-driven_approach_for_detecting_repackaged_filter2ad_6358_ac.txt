a(j). To solve this problem, we sort the statistical feature
vectors of all apps according to the lexicographical order and
then group apps having identical feature vectors. As shown
in Figure 3, v(5635) and v(9440) are identical, and therefore
we group a(5635) and a(9440) into the same cluster cn. Then,
we insert clusters containing one or more apps into the k-d
tree, where each node represents a cluster. When we query
n nearest neighbors for each cluster Ci, we regard Ci and
its neighbors as candidate cluster pairs. For two clusters Ci
and Cj, the candidate app pairs include: (1) app pairs in
Ci; (2) app pairs in Cj; and (3) app pairs between Ci and
Cj.
Figure 3: Statistical feature vectors are sorted in Lexico-
graphical order. Apps that have identical feature vectors are
grouped in the same cluster.
3.7.2 Pair-wise Comparison
The distance between two apps a(k) and a(h) is measured
by Df in Eqn.(5). Given a threshold θ, if Df (a(k), a(h)) is
smaller than θ, they are in the same PR-Group.
3.8 Repackaging Veriﬁcation
Apps in PR-Groups have similar appearance and func-
tionalities. However, since developers may create a bunch of
similar apps that cannot be considered as repackaged apps,
we perform a veriﬁcation on apps in each RP-Groups. More
precisely, we extract developer certiﬁcates from apps and
distinguish each certiﬁcate with their MD5 checksum. If all
apps in a PR-Group share the same certiﬁcate, they are not
repackaged. Otherwise, apps repackaging is detected.
4.
IMPLEMENTATION
App9440: (4,12,8,23,12,33,9,5,0,2,0,3,0,0,0)App5635: (4,12,8,23,12,33,9,5,0,2,0,3,0,0,0)..................CnCn-1Cn+1Cn+2We have implemented Resdroid with 2770 lines of Python
code, 1157 lines of Java code, and 309 lines of C code.
4.1 DexDumper
To handle hardened apps whose original classes.dex is
encrypted or hidden in shared libraries, we design and imple-
ment DexDumper that dumps the original classes.dex of a
hardened app from memory during runtime. It is motivated
by the observation that the Dalvik virtual machine (DVM)
cannot run encrypted classes.dex and therefore the origi-
nal classes.dex will be restored before being executed.
DexDumper ﬁrst invokes the ptrace system call to at-
tach to the process of a running hardened app, and then
reads the app’s memory and searchs for the dex ﬁles. As
the memory space of a process is very large, DexDumper
manages to narrow the searching scope to eﬃciently locate
the target dex code. More precisely, it reads the process
mapping ﬁle of the hardened app, namely /proc/PID/maps
(PID stands for the app’s process ID), where we can get the
start address, the end address, and the attributes of each
memory piece. Note that the memory where dex ﬁles are
mapped into has attributes “r-xp”, meaning that the area is
readable (r), executable (x) and private (p). From memo-
ry pieces with such attributes, we can dump a set of dex
format ﬁles since some pre-loaded runtime libraries (e.g.,
PI:EMAIL) are also located.
For each dumped dex ﬁles, DexDumper looks for the ap-
p’s package name (deﬁned in the app’s manifest) in their
string constants pool. If found, it is considered as the orig-
inal classes.dex. Since hardening will not alter the app’s
resources, ResDroid takes in the dumped dex ﬁle and the
resources from the hardened apps for further process.
4.2 Feature Extraction
We employ apktool to decompile apps. Apktool can re-
store an app’s resources and translate its dex code into smali
format simultaneously. However, we found that apktool may
crash when processing some apps. For such apps, we use
aapt and baksmali to obtain their resources and smali code
separately. To construct ATG, we use A3E [10] to perform
static analysis on apps. It took around 22 hours to generate
ATGs for all apps in our data set. Then we run PageR-
ank to pick 5 major packages, which took another 3 hours.
In total, the extraction of statistical features consumed 25
hours. Such a long period is not unexpected because both
A3E and the PageRank algorithm are time-consuming. It is
acceptable as we only need to do this computation once.
When extracting layout features of apps, we observed that
93.7% apps deﬁne their layouts in XML under the res/lay-
out directory. Therefore, we can obtain their layout struc-
tures by traversing the XML ﬁles. Since some apps generate
their layouts dynamically, we use GATOR (v1.0) [4, 40] to
process them, which can construct an app’s layouts from
the codes by conducting static reference analysis for GUI
objects. We further enhanced GATOR from two aspects.
First, it does not handle certain GUI components (i.e., frag-
ments and dialogs). As fragment is widely used to realize
components reuse in diﬀerent layouts, we added functions
to handle it. Second, as GATOR only takes in source codes,
we empowered it to accept dex ﬁles.
Similar to activities, layouts of fragments can be deﬁned in
static XML ﬁles or dynamically created at runtime. There-
fore, we ﬁrst identify fragment objects in activities, and then
examine the fragment and check whether its layout is de-
ﬁned in resource ﬁle. If so, we directly parse the XML ﬁle
to obtain its structure. Otherwise, we construct its layout
structure by re-using the code logic designed for processing
dynamically-generated activity layouts. The extraction of
structural features took 49.7 hours.
4.3 Clustering and NNS
In coarse-grained clustering, we use a parallel implementa-
tion of spectral clustering [14], which can eﬀectively handle
large-scale data. Since the last step of spectral clustering is
actually running k-means, the number of clusters should be
speciﬁed. We use x-means [36] to estimate a proper number,
instead of choosing it arbitrarily.
5. EXPERIMENTS
Our data set contains 169,352 apps crawled from 10 An-
droid markets, including the oﬃcal market Google Play and
9 other third-party markets. Our experiments were conduct-
ed on a PC running Ubuntu Linux 12.04LTS with an 8-core
Intel i7 3.50GHz CPU and 32GB memory.
5.1 Ground Truth
We use 200 pairs (400 apps) of repackaged and original
apps as ground truth to evaluate ResDroid. All the repack-
aged apps are real malware or adware (121 from SandDroid4
and other 79 from ContagioMobile5). The original apps were
downloaded from Google Play. There are chances that d-
iﬀerent versions of the same app present dissimilar GUIs.
Therefore, to make the ground truth more reliable, we on-
ly select original apps that have the nearest (or the same)
version codes with the repackaged ones.
5.2 Clustering-based Approach
During the coarse-grained processing, the x-means algo-
rithm [36] was used to estimate the number of clusters (de-
noted as C). The recommended value was 291. We also
tried other values close to 291 (i.e., 200, 250, 350, and 400)
when performing the spectral clustering. Figure 4 shows the
CDFs of the sizes of clusters. With the increment of C, the
average cluster size decreases. Figure 4(b) shows that when
C = 291 nearly 10% clusters (around 20% groud truth clus-
ters) contain more than 1,500 apps. As shown in Figure 4(c),
when C = 400, all clusters contain less than 1,500 apps.
It is obvious that the smaller a cluster is, the more quickly
(and hopefully more accurate) the hierarchy clustering will
be ﬁnished. Furthermore, although we need to perform more
clustering, it is easy to parallelize the tasks as they are inde-
pendent. So a large C may be expected. However, as shown
in Figure 4(d), more false negatives appear along with the
increment of C. The false negative is 0 when C = 291, but it
increases to 3 when C = 400. Moreover, a larger C requires
longer time to perform the spectral clustering. Considering
both cluster sizes and false negative rate, we ﬁnally chose
291 as the number of clusters in coarse-grained clustering.
We apply hierarchical clustering to each cluster produced
by coarse-grained clustering to generate PR-Groups. In hi-
erarchical clustering, we set the cutoﬀ value to 0.1. That
4http://sanddroid.xjtu.edu.cn
5http://contagiominidump.blogspot.com
(a) C = 200
(b) C = 291
(c) C = 400
(d) Consumed time and false
negatives with diﬀerent C
Figure 4: CDFs of sizes of clusters produced by spectral (coarse-grained) clustering with diﬀerent numbers of cluters
means, if two clusters have a distance less than or equal to
0.1, they will be merged into the same PR-Group.
1,605 PR-Groups are obtained and they include 6,906 app-
s in total. Figure 5 shows the distribution of the sizes of
PR-Groups. Over 98% of PR-Groups have sizes smaller
than 50. The average size of PR-Groups is 4.03, which is
small enough for manually checking if need. Among all of
our ground truth pairs, the repackaged app and the original
app fell into the same PR-Groups, meaning that the false
negative rate is 0.
(a) CDF
(b) Histogram
Figure 5: Distribution of the sizes of PR-Groups that are
produced by hierarchical clustering with cutoﬀ value 0.1.
5.3 NNS-based Approach
We ﬁrst build a k-d tree according to statistical features
and query nearest neighbors of each tree node for selecting
candidate app pairs. More precisely, we set the number of
neighbors (n) to 10. Then, we compare their structural fea-
tures and calculate their distance following Eqn.(5). Note
that wl and we can be adjusted to support diﬀerent crite-
ria. For example, if wl > we, more emphasis is paid to
the layout features. Otherwise, the event handler features
may be regarded as more important. In our experiments,
wl = we = 0.5. The distance threshold θ was set to 0.15,
meaning that if the distance between two apps is smaller
than 0.15 they will be classiﬁed into the same PR-Group.
The total number of PR-Groups produced by NNS-based
approach is 2,070, including 10,867 apps. The average size
of PR-Groups is 4.8. Figure 6 illustrates the distribution
of the sizes of PR-Groups. Similar to the clustering-based
approach, most of PR-Groups (over 90%) are smaller than
50. However, there are several PR-Groups whose sizes are
larger than 500 and the largest size is 997. Only two pairs
of repackaged and original apps are not grouped into the
same PR-Groups, and therefore the false negative rate of
NNS-based approach is 1%.
5.4 Accuracy
(a) CDF
(b) Histogram
Figure 6: Distribution of the sizes of PR-Groups when
NNS-based approach is employed, with distance threshold
0.15.
Section 5.2 and Section 5.3 show that both clustering-
based approach and NNS-based approach can eﬀectively de-
tect repackaged apps with very low false negative. To eval-
uate the false postive rate of our approaches, we random-
ly selected 100 groups from the PR-Groups produced by
clustering-based approach, and manually checked their re-
sources and smali codes. We also executed these apps in
Android emulator to check whether they have similar GUI
and functionality. We did the same thing to the PR-Groups
produced by NNS-based approach.
In the results of clustering-based approach, we found three
PR-Groups that contain false positives. So the false posi-
tive rate this approach is 3%. But not surprisingly, the sizes
of these three PR-Groups (i.e., 80, 84 and 127) are larger
than the average value. Our analysis reveals two major rea-
sons for these false positives. First, those apps have only a
few activities and their simple functionalities lead to simi-
lar statistical features and structural features. Second, apps
created by some online tools (e.g., App Makr6) may use
the same template, and therefore these apps have similar
appearance and event handlers. We discuss how to handle
them in Section 6.
In the results of NNS-based approach, we found 5 PR-
Groups containing false positives, and hence the false pos-
itive rate is 5%. Similar to the results of clustering-based
approach, these false positives were all found from groups
with large size (i.e., 520, 548, 641, 885 and 991). It shows
that NNS-based approach is not as accurate as clustering-
based approach. The reason may be that when querying
nearest neighbors, k-d tree (or other NNS algorithms) only
considers most similar ones “locally” whereas in clustering-
based approach each sample will be compared with others
(i.e., construct a global view). It demonstrates a tradeoﬀ be-
6http://www.appmakr.com
05001000150000.20.40.60.81Cluster SizeCDF  All ClustersGT Clusters05001000150000.20.40.60.81Cluster SizeCDF  All ClustersGT Clusters05001000150000.20.40.60.81Cluster SizeCDF  All ClustersGT Clusters2002502913504006080100Time (min)  2002502913504000123False Negative PairCluster SizeTimeFalse Neg05010015020000.20.40.60.81PR−Group SizeCDF0100200300400500100101102103PR−Group SizeNumber of PR−Groups05010015020000.20.40.60.81PR−Group SizeCDF02004006008001000100101102103104PR−Group SizeNumber of PR−Groupstween eﬃciency and eﬀectiveness. That is, clustering-based
approach suﬀers from high computational complexity but is
more accurate.
In contrast, NNS-based approach is much
more eﬃcient but less accurate.
5.5 Complexity
Since the time complexity of both spectral clustering and
hierarchical clustering are O(N 3), the overall complexity of
clutering-based approach is O(N 3). Although the compu-
tational cost of clustering-based approach is high, we may
leverage parallel computing to speed up the process. For
NNS-based approach, we sort feature vectors in lexicograph-
ical order before building k-d tree. This step can be ac-
complished within O(N logN ). Moreover, the complexity of
building k-d tree and that of querying nearest neighbors are
also O(N logN ). Therefore, the overall time complexity of
NNS-based solution is O(N logN ).
5.6 Code Obfuscation/App Hardening
We implement DexDumper to extract the original class-
es.dex from apps protected by typical hardening systems.
Therefore, attackers could not employ such hardening tech-
niques to evade ResDroid.
We also tested ResDroid’s ability to confront obfuscation
techniques. We ﬁrst employed Proguard to obfuscate apps
from source codes. The results showed that both statistical
features and structural features were not aﬀected. Then we
used SandMark7 to generate obfuscated code from bytecode.
However, since SandMark does not support Android’s dex
format, we converted dex ﬁles into jar ﬁles through dex2jar
and then fed jar ﬁles to SandMark. Unfortunately, although
SandMark provides 39 kinds of obfuscation methods, on-
ly three of them (static method bodies, method merger and
class encrypter) could successfully process these jar ﬁles. Af-
ter converting the obfuscated jar ﬁles back to dex through
dx, we found that static method boides and method merg-
er had no inﬂuence on ResDroid. However, ResDroid failed
to extract structural features when the jar was encrypted
by the class encrypter, and we propose possible solutions in
Section 6.
5.7 Observations
Apart from the ground truth, ResDroid identiﬁed 64 repack-
aged apps. We examined some of them manually and report
the observations.
5.7.1 App Plagiarism
We found that some plagiarizers repackaged apps and re-
published these apps as their own. For example, an app
(package name: com.bluedog1893.android.translate) has i-
dentical structural features with another app (package name:
com.dollars.translate). However, they have completely dif-
ferent icons. After manual examination, we found that the
former one contains most of the resources and the whole
codes from the latter one, but the string resources have
been converted from English to Chinese. Moreover, while
the original app does not have ads, the plagiarizer added ad
libraries to make proﬁts.
5.7.2 Massively-produced Apps
We found a set of apps from the same developer having
the same structural features. Figure 7 shows three of them.
7http://sandmark.cs.arizona.edu
(a) App 1
(b) App 2
(c) App 3
Figure 7: Three apps have exactly the same layout
To create these apps, the developer just wrote the codes
once and then applied the same codes to diﬀerent resources
for quickly producing “new” apps.
Another example comes from a PR-Group where the pack-
age names of all 83 apps follow the pattern: com.lvping.mobile.
cityguide.*. These apps provide guidance for travellers, and
the last piece of their package names represents the city’s
name. For example, the app with package name com.lvping.
mobile.cityguide.sydney236 oﬀers a travelling guide for Syde-
ny. However, these 83 apps were signed with two diﬀerent
certiﬁcates. Speciﬁcally, 4 of them are signed by the certiﬁ-
cate whose MD5 ﬁngerprint is ’246DA3F3F52830A9E3FD041
11BA4C1D4’, while other 79 apps are signed by the certiﬁ-
cate whose MD5 is ’76439FA93B09D3FA51874769C74486AB’.
We examined the owners and issuers of the two certiﬁcates.