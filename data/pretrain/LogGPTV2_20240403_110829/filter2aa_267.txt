### 我的CS笔记之 - In-memory Evasion 1

#### 0x00 前言
最近，我重新回顾了2018年由Cobalt Strike（CS）作者制作的一系列关于In-memory Evasion的视频。虽然之前看过这些视频，但当时没有做笔记，导致很多细节现在变得模糊不清。因此，学习过程中做笔记非常重要。

该系列共有五个视频，原版上传到YouTube时未提供自动英文字幕。为了方便自己和其他英语水平有限的学习者，我将这些视频重新上传，并添加了英文字幕：[链接](https://www.youtube.com/watch?v=FeydRT3UTVE&list=PLI7tp5mNfPSbgSBc0VpCNh7t98vwJO0jv)。尽管国内的技术资料比以前丰富了许多，但质量参差不齐，因此掌握英语对于获取高质量技术信息至关重要。

这五个视频可以分为以下四个部分：
1. **内存侦测手法**（Memory Detections）
2. **CS Payload执行流程**（A Payload's Life）
3. **如何使用CS逃避侦测**（Evasions）
4. **模拟APT组织样本**（Threat Emulation）

常言道，“以攻促防”。然而，作为红队成员，我们更应该明白“未知防、焉知攻”的道理。只有深入了解防御方的侦测手段，才能更好地提升攻击技术。

#### 0x01 常见的侦测手法
在视频中，作者主要使用Process Hacker工具来从进程、线程和内存三个方面进行侦测。因为CS大量使用反射DLL，所以重点在于内存中的这些反射DLL。首先，打开Process Hacker并选中一个进程，查看其属性：

- **进程信息**：
  - 数字签名
  - 命令行
  - 当前目录
  - 开始时间
  - PEB地址
  - 父进程
  - 保护策略

- **线程信息**：
  - 线程开始地址
  - 开始地址模块

- **内存信息**：
  - 基址
  - 内存大小
  - 内存权限（读、写、执行）
  - 内存作用（堆、栈、PEB、文件等）

基于这些信息，常见的侦测手法主要有三种：

1. **线程开始地址**：
   - 正常情况下，线程的开始地址应有一个关联的模块名称。而注入的DLL则没有模块名称。

2. **内存权限**：
   - 正常情况下，内存属性很少会出现同时具有读、写、执行权限（RWX）的情况，而这种权限组合通常被恶意软件利用。

3. **内存内容**：
   - 通过匹配特定特征（如DOS头、PE头、字符串、代码中的函数等）来检测内存中的异常。
   - 使用YARA规则进行匹配是一种常见方法。

内存检测工具主要分为两种模式：

- **一次性扫描**：例如，蓝队使用的溯源工具，在受害机器上快速查找植入体。
- **事件驱动**：当有新进程或新线程启动时进行扫描，结合关联分析和主动防御机制。

常见的侦测工具及其侦测点包括：

- **反射注入侦测**：
  - MZ头
  - RWX内存
  - 内存未与任何模块关联

- **Get-InjectedThread.ps1工具**：
  - 线程开始地址未与任何模块关联

- **LOKI工具**：
  - 使用YARA规则扫描文件

#### 0x02 总结
本视频主要介绍了基本的进程、线程和内存知识，以及Process Hacker的基本使用方法。此外，还讲解了CS在内存中的异常指标及检测这些异常的工具原理。虽然这些内容相对基础，但扎实的基础是进一步学习的关键。作者还推荐了一些其他资料：

- 书籍：《The Art of Memory Forensics》
- PPT：《Advanced Attack Detection》（William Burgess 和 Matt Watkins）

希望这些笔记对你有所帮助！

---
**Author: L.N. / Date: 2021-09-06 / Produced by AttackTeamFamily**
**No. 1-4 / 4 - Welcome to [www.red-team.cn](http://www.red-team.cn)**