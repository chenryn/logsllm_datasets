3.3 Bandwidth Detour Properties
Symmetry. We deﬁne a detour to be symmetric if the same detour node beneﬁts
both the forward and reverse direction of the direct path. Since congestion in the
forward path rarely aﬀects the reverse path, we expect bandwidth to be diﬀerent
for each direction. However, our results show that 89% of the 18 036 paths for
which we have measurements in both directions, have at least one symmetric de-
tour. We believe this happens because the quality of a detour path is dominated
by the properties of the detour node (such as download and upload speed), which
are the same in both directions, rather than by congestion on the path. Symmet-
ric detours are better than average: they improve the median path performance
by 39% compared to 16% for the asymmetric detours.
86
T. Haddow et al.
Skewness. Detour nodes that have lower latency to the source or destination
are more likely to provide higher throughput for TCP transfers. We deﬁne the
skewness of a detour path as the ratio of the absolute diﬀerence between the
latencies from the detour node to the source and destination to the maximum of
the two latencies. As their skewness decreases towards 0, detours are more likely
to improve the bandwidth of the direct path: the median skewness value for good
detours is 0.43 compared to the median (0.54) of all detours. The reverse case
is also true: as skewness increases towards 1, detours are less beneﬁcial for the
direct path. In our measurements, the detours that do not beneﬁt the direct path
at all have a median skewness of 0.58. These results suggest that low skewness
values may be associated with detours that have high-capacity links, and which
in turn have a higher probability of being good detours.
Persistence in Time. Given the variability of bandwidth measurements, we
investigate the longevity of detour paths: for a detouring platform, short-lived
detours would be less useful. Our measurements show that approximately two-
thirds of all bandwidth detours persist for more than 90 minutes. This suggests
that a platform can make long-term decisions about detour paths.
4 Exploiting Detours
Applications must be able to discover and exploit good bandwidth detours. Here
we examine the challenges in implementing a detour routing platform when it
consists of cooperative edge or near-edge nodes. In particular, we ﬁnd that low-
level kernel access is not required for good detouring performance.
4.1 Detouring Mechanisms
Two options exist for routing between a pair of Internet hosts via a tertiary de-
tour node: (a) network-level IP detouring or (b) transport-level TCP detouring.
IP detouring works by encapsulating every IP packet on egress from the source
node and sending it to the appropriate detour node, which in turn forwards it to
the destination node. From an application standpoint, IP detouring is the more
natural approach: (1) it can be deployed transparently because it only operates
at the IP layer; (2) it supports both TCP and UDP traﬃc; and (3) the same
detouring mechanism can be used for other metrics such as latency. However, it
also has a major disadvantage: the detour path is composed of two complete end-
to-end Internet paths. This increases the network-level hop count compared to
the direct path. The associated increase in loss probability and latency adversely
aﬀects TCP throughput [10].
The alternative to IP detouring is to break the TCP connection at the detour
node and use TCP detouring, which is analogous to split-TCP [7]. By splitting
a long TCP connection into two separate connections terminated mid-path, the
feedback-based control loop of TCP becomes more responsive due to reduced
path latency. Although this comes at the cost of increased state within the
network, this may be acceptable when TCP connections are split by end hosts,
Bandwidth Detouring on the Internet
87
instead of network routers [9]. For TCP detouring, we deploy SOCKS proxies
at potential detour nodes and use application-level “socksifying” software to
redirect connections via the appropriate detour proxy. This retains the beneﬁt
of being transparent to destination nodes and preserves path symmetry.
To compare IP and TCP detouring, we deploy both detouring mechanisms
on UkairoLab3. We then perform an all-to-all-via-all measurement: for each pair
of nodes, we predict and measure the throughput achievable via each of the
potential detour nodes using both IP and TCP detouring. For TCP detouring,
we predict the throughput of the detoured connection to be the minimum of the
throughput of the two paths, i.e. the narrow link [2]. For IP detouring, we also
predict the throughput analytically as described in §4.2.
Figure 4 shows the predicted and measured detouring improvement for each
method. The results match the intuition that the long TCP paths created by IP
detouring adversely aﬀect performance. In contrast, splitting the TCP connec-
tion signiﬁcantly boosted most pairs; for example, 40% of paths improved by at
least 5 Mbps. However, the discrepancy between measured and predicted TCP
detouring performance is larger for paths which are predicted to beneﬁt more
from detouring, suggesting there can exist a bottleneck in forwarding throughput
at the detour node.
Although TCP detouring beneﬁts from the eﬀect of a split TCP connection,
most improvement comes from choosing a good detour node with respect to
the throughput it oﬀers, rather than its latency to the endpoints. For example,
77% of all detours provide at least 10% and 1 Mbps bandwidth improvement;
of the detours where the intermediate leg latencies are lower than the direct
path latency (which stand to beneﬁt most from a split TCP connection), only
28% provide similar improvements. While the features of IP detouring, such as
transparency and UDP support, outweigh those of TCP detouring, we conclude
that the performance gains of TCP detouring make it the better choice.
4.2 Analysis of IP and TCP Detouring
Using a stylised stochastic model of TCP’s congestion control mechanism [16],
the following square-root formula relates the steady-state throughput of a path’s
BTC to its packet loss probability p and its average round trip delay RTT:
BTC =
Φ
RTT
√
p
.
(1)
This formula is valid for both the case where loss is independent of the rate, in
which case Φ = 2, and the rate dependent case where the loss depends (linearly)
on the rate, in which case Φ ≈ 1.31. We use this formula to perform a back-of-
the-envelope calculation to derive the IP detouring bandwidth.
IP Detouring. Let us denote by BTC1, p1, RTT1, and BTC2, p2, RTT2 the
average throughput, the loss and the round trip delay of the constituent paths
3 We found that, on PlanetLab, the long delay between timeslices due to heavy load
severely damaged performance of userspace IP processing.
88
T. Haddow et al.
s
h
t
a
P
f
o
F
D
C
1.0
0.8
0.6
0.4
0.2
0.0
Measured Direct Path
Achieved Detour Throughput
Detour Estimate (Validation)
Detour Estimate (Prediction)
 0
 20
 40
 60
 80
 100
Bandwidth (Mbps)
s
h
t
a
P
f
o
F
D
C
1.0
0.8
0.6
0.4
0.2
0.0
Direct Path Throughput
Random Detour
Latency Predicted Detour
Best Detour
 0
 20
 40
 60
 80
 100
Bandwidth (Mbps)
Fig. 5. Detour paths substantially increase
throughput. However, bandwidth varia-
tions over time can lead to overestimating
a given detour’s potential improvement.
Fig. 6. Latency performs no better than
random selection for discovering band-
width detour paths.
that we will refer to as the ﬁrst and second leg, respectively. The following
approximates the resulting throughput:
(cid:2)
BTCIP ≈
RTT1
RTT1 + RTT2
(RTT2BTC2)2
(RTT1BTC1)2 + (RTT2BTC2)2 BTC1
(2)
where we drop the p1p2 term in the corresponding square-root expression since
the loss probabilities p1 and p2 are in general small; in the second equality, we
replace p1 and p2 using Eq. (1). It is easy to see that the predicted throughput is
always strictly smaller than the minimum of BTC1 and BTC2, i.e. the respective
throughputs of the two legs taken in isolation.
TCP Detouring. Baccelli et al. [2] describe two coupled stochastic diﬀerential
equations that govern the dynamics of the throughput of the two legs of a detour
path. The coupling is dictated by the buﬀer at the detour node. The key feature
of this model is that the TCP throughput of the composed path is, in general,
the minimum bandwidth of the two constituent paths given that the buﬀer at
the detour node is suﬃciently large. In our system, we ensure this holds.
The above analysis conﬁrms what we observed in practice in Figure 4: IP
detouring provides worse performance compared to TCP detouring as predicted
by the minimum of the throughputs of the two legs.
4.3 Detouring Overlay Performance
We describe our experience in deploying a TCP detouring platform on 50 Planet-
Lab nodes. The experiment is divided in two phases: prediction and validation.
First, we measure BTC between all pairs of nodes to predict good detours, con-
suming on average 571 MBytes per node. We stop after 90 minutes and ﬁnd that
1845 out of 2019 paths are detourable. We estimate detour bandwidth by taking
the minimum bandwidth of the two intermediate legs. In the second validation
Bandwidth Detouring on the Internet
89
phase, we use TCP detouring to validate the best detour for each path. Since
we avoid concurrent measurements, the second phase takes substantially longer:
after 11 hours, we obtain 689 detourable paths. In Figure 5, we plot the distri-
butions of (a) measured direct path bandwidth; (b) estimated detour bandwidth
in the prediction phase and (c) in the validation phase; and (d) achieved detour
throughput measured in the validation phase.
We make several observations. First, the median bandwidth improves signif-
icantly, from 12 Mbps to 21 Mbps, using TCP detouring. Detours improve the
bandwidth on direct paths in 69% of the cases (not shown in the plot). The large
increase in bandwidth of detours can justify the ﬁxed measurement overhead per
node, assuming at least a modest usage of detoured paths after their discovery
to amortise measurement costs. Second, we observe the 10 Mbps egress band-
width limit present on some PlanetLab nodes. Finally, the beneﬁts of detouring
are largely lost at around 50 Mbps, suggesting a throughput bottleneck due to
limitations on node performance.
The substantial diﬀerence between the detour bandwidths at the time of pre-
diction and the estimated bandwidth at the time of validation may be caused
by the variability of bandwidth measurements (cf. Figure 1). Since detour band-
width is constrained by the minimum bandwidth of the two legs, we see a con-
sistent decrease of around 25% upon validating detour bandwidth a few hours
later. Although the best detours for any given path may be constantly changing,
we can still see temporal consistency in detour path performance.
4.4 Detour Transferability
To discover if good latency detours can also be eﬀective for ﬁnding good band-
width detours, we compare the estimated bandwidth via the best latency detour
for each direct path. We measure latency and BTC on 10 265 paths between
136 PlanetLab nodes and compute the best bandwidth and latency detours be-
tween each pair of nodes for which we have measurements.
Figure 6 shows the distribution of estimated bandwidth for the best band-
width and latency detours found through brute-force search, and the estimated
bandwidth through detours chosen randomly. As discussed earlier, the best pos-
sible detour results in signiﬁcant improvements over the direct path, although
these are likely unachievable due to bandwidth ﬂux. Employing the best latency
detour for bandwidth detouring results in performance equal to a random de-
tour. This implies that discovery methods for ﬁnding good bandwidth detour
based on latency detours are not eﬀective.
5 Conclusions
To understand how to exploit bandwidth detouring on the Internet, we ad-
dressed several key questions in this paper. We illustrated the preponderance
and longevity of potential bandwidth detour routes: 74.8% of paths had a detour
that improved bandwidth by at least 20% and 1 Mbps; and most detours lasted
90
T. Haddow et al.
for more than 90 minutes. Contrary to our initial goals of providing transparent
IP-level detouring, we gave evidence that signiﬁcantly better performance can be
achieved through the use of TCP-level detouring. Interestingly, this also means
that kernel access is not required for overlay participation, perhaps broadening
adoption of a general detouring platform. More research is needed to explore
practical and scalable methods for detour discovery and how wide-spread band-
width detouring would interact with traﬃc engineering policies by ISPs.
Acknowledgements. We thank Nokia Research IT and David Eyers for hosting
UkairoLab machines. Thom Haddow is supported by a Doctoral Training Grant
from the UK Engineering and Physical Sciences Research Council (EPSRC).
References
1. Andersen, D.G., Balakrishnan, H., Kaashoek, M.F., Morris, R.: Resilient Overlay
Networks. In: SOSP, Chateau Lake Louise, Banﬀ, Canada (2001)
2. Baccelli, F., Caroﬁglio, G., Foss, S.: Proxy Caching in Split TCP: Dynamics, Sta-
bility and Tail Asymptotics. In: INFOCOM 2008, pp. 131–135 (2008)
3. Gummadi, K.P., Madhyastha, H., Gribble, S.D., et al.: Improving the reliability of
internet paths with one-hop source routing. In: OSDI (2004)
4. Ho, S.W., Haddow, T., Ledlie, J., Draief, M., Pietzuch, P.: Deconstructing Internet
Paths: An Approach for AS-Level Detour Route Discovery. In: IPTPS (2009)
5. Jain, M., Dovrolis, C.: Pathload: A Measurement Tool for End-to-End Available
Bandwidth. In: PAM, Fort Collins, CO (2002)
6. Jain, M., Dovrolis, C.: Path Selection using Available Bandwidth Estimation in
Overlay-based Video Streaming. Com. Networks 52(12), 2411–2418 (2008)
7. Karbhari, P., Ammar, M.H., Zegura, E.W.: Optimizing End-to-End Throughput
for Data Transfers on an Overlay-TCP Path. In: Boutaba, R., Almeroth, K.C.,
Puigjaner, R., Shen, S., Black, J.P. (eds.) NETWORKING 2005. LNCS, vol. 3462,
pp. 943–955. Springer, Heidelberg (2005)
8. Kopparty, S., Krishnamurthy, S.V., Faloutsos, M., Tripathi, S.K.: Split TCP for
Mobile Ad Hoc Networks. In: GLOBECOM (2002)
9. Ladiwala, S., Ramaswamy, R., Wolf, T.: Transparent TCP Acceleration. Com.
Communications 32(4), 691–702 (2009)
10. Lakshman, T., et al.: Performance of TCP/IP for Networks with High Bandwidth-
delay Products and Random Loss. IEEE/ACM Trans. Netw. 5(3), 336–350 (1997)
11. Lee, S.J., Banerjee, S., Sharma, P., Yalagandula, P., Basu, S.: Bandwidth-Aware
Routing in Overlay Networks. In: INFOCOM, Phoenix, AZ (2008)
12. Lee, S.-J., Sharma, P., Banerjee, S., Basu, S., Fonseca, R.: Measuring Bandwidth
Between PlanetLab Nodes. In: Dovrolis, C. (ed.) PAM 2005. LNCS, vol. 3431, pp.
292–305. Springer, Heidelberg (2005)
13. Lumezanu, C., Baden, R., Levin, D., Bhattacharjee, B., Spring, N.: Symbiotic
Relationships in Internet Routing Overlays. In: NSDI (2009)
14. Lumezanu, C., Baden, R., Spring, N., Bhattacharjee, B.: Triangle Inequality and
Routing Policy Violations in the Internet. In: Moon, S.B., Teixeira, R., Uhlig, S.
(eds.) PAM 2009. LNCS, vol. 5448, pp. 45–54. Springer, Heidelberg (2009)
15. Madhyastha, H.V., Isdal, T., Piatek, M., Dixon, C., et al.: iPlane: An Information
Plane for Distributed Services. In: OSDI, Seattle, WA (2006)
Bandwidth Detouring on the Internet
91
16. Padhye, J., Firoiu, V., Towsley, D.F., Kurose, J.F.: Modeling TCP Throughput: A
Simple Model and Its Empirical Validation. In: SIGCOMM (1998)
17. Savage, S., Anderson, T., Aggarwal, A., Becker, D., Cardwell, N., Collins, A.,
Hoﬀman, E., Snell, J., Vahdat, A., Voelker, G., Zahorjan, J.: Detour: Informed
Internet Routing and Transport. IEEE Micro. 19(1), 50–59 (1999)
18. Strauss, J., Katabi, D., Kaashoek, M.F.: A Measurement Study of Available Band-
width Estimation Tools. In: IMC (2003)
19. Zhu, Y., Dovrolis, C., Ammar, M.H.: Dynamic Overlay Routing based on Available
Bandwidth Estimation: A Simulation Study. Com. Networks 50(6), 742–762 (2006)