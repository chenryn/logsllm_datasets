**解释**：返回字符串值的子集，该值以开始索引字符开头，并在结束索引之前结束一个字符。
参数：
-   String-包含所需返回子字符串的字符串。
-   startIndex-表示返回子字符串的起始位置的整数。用0从左边开始计数。
-   endIndex-表示子字符串结束后的一个位置的整数。即定义的字段减1
**示例**：获取Chewing Gum字符串从0开始，的前四个字符。
*\${str:substring(\"Chewing Gum\", 0, 5)}*
**返回**：Chew
str:toLower()
**格式**：str:toLower(\)
**解释**：将字符串数据转换为所有小写字母。
参数：
-   字符串-转换字符串到小写。
示例：
*\${str:toLower(\"FALSE\")}*
**返回**： false
str:toUpper()
**格式**：str:toUpper(\)
**解释**：将字符串数据转换为所有大写字母。
参数：
-   字符串-转换字符串到大写。
示例：
*\${str:toUpper(\"false\")}*
**返回**： FALSE
str:trim()
**格式**：str:trim(\)
**解释**：修剪字符串中的前导和尾随空格字符，包括空格和返回字符
参数：
-   字符串-要返回的字符串不需要额外的空格字符。
**示例**：删除Address字段中的前后的空字符
*\${str:trim(record:value(\"/Address\"))}*
str:truncate()
**格式**：str:truncate(\, \)
**解释**：返回截断到指定长度的字符串。使用整数指定长度。
参数：
-   字符串-要截断的字符串。
-   长度-表示要保留的字符数的整数。
**示例**：当电话号码字段包括诸如415-555-5555这样的字符串号码时，返回区号（前三位为区号）
*\${str:truncate(record:value(\'/phone\'),3)}*
**返回**：415
#### file（文件）函数
file:fileExtension()
**格式**：file:fileExtension(\)
**解释**：从文件路径返回文件扩展名
参数：
-   文件路径-文件的绝对路径。
**示例**：返回weblog.txt的扩展名
***[\${file:fileExtension(\'/logs/weblog.txt\')}]{.smallcaps}***
**返回**：txt
file:fileName()
**格式**：file:fileName(\)
**解释**：从文件路径返回文件名。
参数：
-   文件路径-文件的绝对路径。
**示例**：返回weblog.txt的扩展名
*\${file:fileName(\'/logs/weblog.txt\')}*
**返回**：weblog.txt
file:parentPath()
**格式**：file:parentPath(\)
解释：
当与文件的路径一起使用时，在没有最后分隔符的情况下返回文件的路径，如/files为/files/file.log.
当与指向目录的路径一起使用时，返回路径到没有最后分隔符的目录，如/serverA/logs为/serverA/logs/2016.
参数：
-   文件路径-文件的绝对路径。
**返回类型**：字符串。
示例：
-   下面的表达式(包括文件的路径)返回\"/serverB/logs\":
*\${file:parentPath(\'/serverB/logs/weblog.txt\')}*
-   下面的表达式(包括指向目录的路径)返回父目录，\"/serverB/logs\":
*\${file:parentPath(\'/serverB/logs/weblogs\')}*
#### field（字段）函数
说明：在帮助手册中有field函数（即f:xxx()），但是在实际应用中并没有发现此函数，需要根据实际场景确认。
f:path()
**解释**：返回字段的路径。用于返回具有指定路径的字段或按表达式中定义的路径返回字段。
**返回类型**：字符串。
**示例**：以下字段路径表达式返回除AUDIT_DATE字段之外的所有日期时间字段：
*/\*\[\${f:type() == \'DATETIME\' && f:path() != \'/audit_date\'}\]*
f:type()
**解释**：返回字段的数据类型。用于返回具有指定类型的字段或字段类型与表达式中定义的字段类型相同的字段。
**重要说明**：在表达式中指定数据类型时使用所有大写，并将字符串括在引号中。
**返回类型**：字符串。
**示例**：以下字段路径表达式返回所有布尔字段：
*/\*\[\${f:type() == \'BOOLEAN\'}\]*
f:value()
**解释**：返回字段的值。用于返回具有指定值的字段或表达式中定义的值所在的字段。
**返回类型**：取决于字段类型。
**示例**：以下字段路径表达式只返回值大于0的字段。
*/\*\[\${f:value() \> 0}\]*
#### time（时间）函数
time:createDateFromStringTZ()
**格式**：time:createDateFromStringTZ(\, \, \)
**解释**：基于字符串字段中的日期时间并使用指定的时区创建日期对象。日期时间字符串不应包括时区。
参数：
-   字符串-带有日期时间值的字符串，不包括时区。
-   时区-与日期时间值关联的时区。创建日期对象时使用时区。
时区格式参考以下链接：
https://www.vmware.com/support/developer/vc-sdk/visdk400pubs/ReferenceGuide/timezone.html.
带有GMT前缀的数字时区，如GMT-0500或GMT-8：00。注意，不支持仅数字时区(如-500)。
短期时区ID，如EST和CST-这些时区通常不建议使用，因为它们可以代表多个时区，例如CST代表中央标准时间和中国标准时间。
-   日期格式-字符串数据使用的日期格式。有关日期格式的信息，请参阅https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat
**示例**：下面的表达式使用TZ字段中指定的时区将DateTime字段中的字符串值转换为Date对象。它假定日期为"2016年3月30日12：15：33"
*\${time:createDateFromStringTZ(record:value(\'/Datetime\'),
\'record:value(\'/TZ\')\', \'MM/dd/yyyy hh:mm:ss a\')}*
time:dateTimeToMilliseconds()
**格式**：time:dateTimeToMilliseconds(\)
**解释**：将日期对象转换为以毫秒为单位的格式或UNIX时间。
**返回类型**：long
**示例**：下面的表达式将当前时间转换为以秒为单位的当前时间或UNIX时间，然后将该值乘以1000，将值转换为毫秒：
*\${time:dateTimeToMilliseconds(time:now())}*
time:dateTimeZoneOffset()
**格式**：dateTimeZoneOffset(\，\)
**解释**：返回指定日期和时区的时区偏移量(毫秒)。时区偏移量是与协调世界时(UTC)以小时和分钟为单位的差值。
参数：
-   日期对象-要使用的日期对象。
-   时区-与日期时间值关联的时区。
时区格式参考以下链接：
https://www.vmware.com/support/developer/vc-sdk/visdk400pubs/ReferenceGuide/timezone.html.
带有GMT前缀的数字时区，如GMT-0500或GMT-8：00。注意，不支持仅数字时区(如-500)。
短期时区ID，如EST和CST-这些时区通常不建议使用，因为它们可以代表多个时区，例如CST代表中央标准时间和中国标准时间。
**返回类型**：long
**示例**：以下表达式使用TZ字段中指定的时区返回存储在日期字段中的日期对象的时区偏移量：
*\${time:dateTimeZoneOffset(record:value(\'/Date\'),
record:value(\'/TZ\'))}*
time:extractDateFromString()
**格式**：time:extractDateFromString(\, \)
**解释**：根据指定的日期格式从字符串中提取日期对象。
参数：
-   字符串-用于提取日期对象的字符串。
-   格式字符串\--指定\参数中数据的日期格式的字符串。有关创建日期格式的信息，请参阅：https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html.
**返回类型**：Date object.
**示例**：以下表达式将字符串'2017-05-01 20：15：30.915'转换为日期对象：
*\${time:extractDateFromString(\'2017-05-01 20:15:30.915\',\'yyyy-MM-dd
HH:mm:ss.SSS\')}*
time:extractLongFromDate()
**格式**：time:extractLongFromDate(\，\)
**解释**：根据指定的日期格式从日期对象中提取长值。
参数：
-   日期对象-提取长值的日期对象。
-   格式字符串-指定要提取的日期数据的格式的字符串。有关创建日期格式的信息，请参阅：https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html
**返回类型**：long
**示例**：以下表达式从时间戳字段中存储的Date对象返回月份作为长值：
*\${time:extractLongFromDate(record:value(\'/Timestamp\'), \"MM\")}*
注：因为函数返回一个long值，所以不能在数据格式字符串中指定非数字数据。例如，日期格式"MMM"返回月份的三个字符缩写(如"Jul")，这将导致函数返回不正确的结果。
time:extractStringFromDate()
**格式**：time:extractStringFromDate(\，\)
**解释**：根据指定的日期格式从Date对象中提取字符串值。
参数：
-   日期对象-提取字符串值的日期对象。
-   格式字符串-指定要提取的日期数据的格式的字符串。有关创建日期格式的信息，请参阅：https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html
**返回类型**：String
**示例**：以下表达式从存储在时间戳字段中的Date对象返回月份为字符串值：
*\${time:extractStringFromDate(record:value(\'/Timestamp\'), \"MMM\")}*
time:millisecondsToDateTime(\)
**格式**：time:millisecondsToDateTime(\)
**解释**：将以毫秒为单位的时代或UNIX时间转换为日期对象。如果时间或UNIX时间以秒为单位，则将该值乘以1000，生成毫秒范围内的值。
**参数**：无
**返回类型**：Date object.
**示例**：下面的表达式以秒为单位，将各时期的时间相乘，然后将该值转换为Date对象：
*\${time:millisecondsToDateTime(record:value(\"/epochTime\")\* 1000)}*
time:now()
**格式**：time:now()
**解释**：当前时间。数据采集器机器作为java.util.Date对象。
**参数**：无