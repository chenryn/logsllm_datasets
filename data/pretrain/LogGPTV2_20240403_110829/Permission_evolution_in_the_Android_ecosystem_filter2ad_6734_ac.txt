### Permission Changes in Android Applications

#### Platform-Induced Permission Changes
In addition to analyzing the functionality, we also computed the permission changes induced by updates in the Android platform. These results are presented in column 3 of Table 4. Surprisingly, these platform-induced changes account for only a small fraction of the overall permission changes: less than 3% of either additions or deletions.

In summary, our analysis indicates that most permission changes, which primarily consist of additions, are not driven by changes in the platform itself.

#### Primary Causes of Permission Additions
To identify the primary cause of permission additions, we examined the top five most frequently added and dropped permissions, as shown in the first columns of Tables 5 and 6. The second column of these tables will be explained shortly.

For the added permissions, we observed that Android apps have become more aggressive in requesting resources, often by asking for new permissions. For example, apps now commonly request permissions such as `WAKE_LOCK`, `GET_ACCOUNTS`, and `VIBRATE`. 

- **WAKE_LOCK**: This permission prevents the processor from sleeping or the screen from dimming, allowing the app to run continuously without requiring user intervention.
- **VIBRATE**: This permission enables the phone to vibrate, notifying the user when the app invokes certain functionalities.
- **WRITE_EXTERNAL_STORAGE**: This permission is added to enable writing data to external storage, such as an SD card, to meet increasing storage requirements.

We also noted that permissions that do not enhance user experience, such as `ACCESS_MOCK_LOCATION` and `INSTALL_PACKAGES`, are being dropped.

#### Security and Privacy Concerns
As Android apps increasingly add new permissions, users naturally have growing security and privacy concerns. For instance, how can users ensure that apps do not abuse these permissions?

For comparison, Table 7 lists the top 20 permissions that Android malware requests and abuses, as reported by Zhou and Jiang [18]. Returning to column 2 in Tables 5 and 6, this column shows the result of comparing the added (and deleted) permissions in our stable dataset with the top 20 malware permission list. A ‘(cid:2)’ indicates that the corresponding permission is on the malware list, while a ‘×’ indicates it is not.

Our findings show that most of the added permissions are on the malware list, whereas none of the dropped permissions are. Although we cannot claim that these third-party apps are malicious, this trend should concern users, as it suggests that the overall system becomes less secure. For example, in a confused deputy attack, a malicious app could compromise and leverage a benign app to achieve its malevolent goals [15].

#### Apps Requesting More Dangerous Permissions
Next, we investigated the added permissions in the "Dangerous" protection level, as these introduce higher risks. Figure 3(b) shows that 66.11% of permission increases in apps require at least one more "Dangerous" permission. Specifically, `WRITE_EXTERNAL_STORAGE` is the most requested "Dangerous" permission, allowing sensitive personal or enterprise files to be written to external media. This permission is also a common target for malicious activities. Other frequently requested dangerous permissions include `INTERNET`, `READ_PHONE_STATE`, and `WAKE_LOCK`.

- **INTERNET** and **READ_PHONE_STATE**: These permissions are often needed for embedded advertising libraries, but they also raise privacy concerns due to potential abuse of user information.

We cross-checked this list with the top 20 malware permissions [18], as shown in column 2 of Table 8. We found that 9 out of the 16 frequent permissions listed are also frequently used by malicious apps, intensifying our privacy and security concerns.

#### Macro and Micro Evolution Patterns
Our characterization of permission changes, in terms of absolute numbers (added/deleted), reveals a general trend toward apps requiring more and more permissions. Additionally, we conducted an in-depth study to identify finer-grained patterns in permission evolution.

**Macro Patterns:**
- **0→1**: The app starts using a particular permission.
- **1→0**: The app stops using a particular permission.
- **1→0→1**: The app stops and then resumes using a particular permission.
- **1→0→1→0**: The app alternates between using and not using a particular permission.

Table 9 summarizes the macro-patterns observed in the stable dataset, along with their frequencies. We found that permission additions (0→1) dominate the changes, occurring with a frequency of 90.46%. Other interesting patterns, such as permissions being deleted and then re-added, were also observed.

This detailed analysis provides a comprehensive understanding of the evolving permission landscape in Android applications and highlights the need for robust security and privacy measures.