functionality), we also computed the permission changes in-
duced by changes in the Android platform, which we show
in column 3 of Table 4). Surprisingly, these induced changes
only account for a small number of the permission changes:
less than 3% of either additions or deletions.
In sum, we
were able to conclude that permission changes, which consist
mostly of additions, are not due to changes in the platform.
We now set out to answer the question: what is the pri-
mary cause for the permission additions? We show the
Top-5 most frequently added and dropped permission in the
ﬁrst column of Table 5 and Table 6; column 2 of these ta-
bles will be explained shortly. For the added permissions,
we found that Android apps became more aggressive in ask-
ing for resources, by asking for new permissions. For in-
stance, the Android apps adopt permissions such as WAKE_
LOCK, GET_ACCOUNTS, and VIBRATE. WAKE_LOCK prevents the
processor from sleeping or the screen from dimming, hence
allowing the app to run constantly without bothering the
user for wake-up actions. VIBRATE enables the phone to vi-
brate for notifying the user when the corresponding apps
invokes some functionality. In order to meet the increasing
requirement of storage, WRITE_EXTERNAL_STORAGE is added
to enable writing data into the external storage of the device
such as an SD card. We note that permissions that do not
improve the user experience, e.g., ACCESS_MOCK_LOCATION
and INSTALL_PACKAGES, the apps simply drop them.
As Android Apps are increasingly adding new permis-
sions, users are naturally have security and privacy concerns,
e.g., how can they be sure that apps do not abuse permis-
sions?
For comparison, in Table 7, we list the Top-20 permissions
that Android malwares request (and abuse), as reported by
Zhou and Jiang [18]. We now come back to column 2 in
Tables 5 and 6; the columns show the result of comparing
the added (and respectively, deleted) permissions in our sta-
ble dataset with the Top-20 malware permission list. A ‘(cid:2)’
means the corresponding Android permission is in the Top-
36
70
60
50
40
30
20
10
t
e
s
a
t
a
D
f
o
e
g
a
t
n
e
c
r
e
P
0
−10
70
60
50
40
30
20
10
t
e
s
a
t
a
D
f
o
e
g
a
t
n
e
c
r
e
P
0
−10
Permission Changes of Stable Dataset
Dangerous Permission Changes of Stable Dataset
Added and Dropped Permissions
t
e
s
a
t
a
D
f
o
e
g
a
t
n
e
c
r
e
P
70
60
50
40
30
20
10
0
20
s
e
g
n
a
h
C
l
e
v
e
L
n
o
i
t
c
e
o
r
P
t
f
o
r
e
b
m
u
N
−3−2−1 0 1 2 3 4 5 6 7 8 9 10
Number of Permission Changes
14
500
400
300
200
100
0
−100
Normal Dangerous
Sig
Protection Level
Sig or Sys
−5
0
5
10
15
Number of Permission Changes
(a)
Figure 3: Permission and protection level changes in the third-party apps.
(b)
(c)
Permission Changes of Pre−installed Apps
Dangerous Permission Changes of Pre−installed Apps
Added and Dropped Permissions
70
60
50
40
30
20
10
t
e
s
a
t
a
D
f
o
e
g
a
t
n
e
c
r
e
P
20
0
−6
−3−2−1 0 1 2 3 4 5 6 7 8 9
11
Number of Permission Changes
s
e
g
n
a
h
C
l
e
v
e
L
n
o
i
t
c
e
t
o
r
P
f
o
r
e
b
m
u
N
500
400
300
200
100
0
−100
Normal Dangerous
Sig
Protection Level
Sig or Sys
−5
0
5
10
15
Number of Permission Changes
(a)
(b)
(c)
Figure 4: Permission and protection level changes in the pre-installed apps.
Android Permission
ACCESS MOCK LOCATION
READ OWNER DATA
INSTALL PACKAGES
RECEIVE MMS
MASTER CLEAR
In Top 20?
×
×
×
×
×
Table 6: Most frequently deleted permissions in the
stable dataset.
20 malware permission list, while a ‘×’ means the permission
is not in the list. We found that most of the added permis-
sions are on the malware list, while none of the dropped
permissions are on the list. Though we certainly can not
claim these third-party apps are malicious, the trend should
concern users: as apps gain more powerful access, the over-
all system becomes less secure. For example, in the confused
deputy attack, a malicious app could compromise and lever-
age a benign app to achieve its malevolent goals [15].
5.2 Apps Want More Dangerous Permissions
We now proceed to investigate the added permissions in
the Dangerous protection level as they introduce more risks.
Figure 3(b) shows that 66.11% of permission increases in
apps required at least one more Dangerous permission. In
more detail, we list the frequently used Dangerous permis-
sions in the ﬁrst column of Table 8. We found that WRITE_
EXTERNAL_STORAGE is the most requested Dangerous permis-
sion, in which sensitive personal or enterprise ﬁles can be
written to external media. This permission is also a hot-
spot for most malicious activities. INTERNET, READ_PHONE_
STATE, andWAKE_LOCK are also requested frequently by the
new versions of the apps. The ﬁrst two are needed to allow
for embedded advertising libraries (ads), but these third-
Permission
INTERNET
READ PHONE STATE
ACCESS NETWORK STATE
WRITE EXTERNAL STORAGE
ACCESS WIFI STATE
READ SMS
RECEIVE BOOT COMPLETED
WRITE SMS
SEND SMS
VIBRATE
ACCESS COARSE LOCATION
READ CONTACTS
ACCESS FINE LOCATION
WAKE LOCK
CALL PHONE
CHANGE WIFI STATE
WRITE CONTACTS
WRITE APN SETTINGS
RESTART PACKAGES
% of apps using it
97.8%
93.6%
81.2%
67.2%
63.8%
62.7%
54.6%
52.2%
43.9%
38.3%
38.1%
36.3%
34.3%
33.7%
33.7%
31.6%
29.7%
27.7%
26.4%
Table 7: Top-20 most frequent permissions re-
quested by malware (from Zhou and Jiang [18]).
party ads are also raising privacy concerns of abusing the
user’s personal information. We then cross-checked this list
with the Top-20 malware permissions [18], as shown in col-
umn 2 of Table 8. We observed that 9 of the 16 frequent
permissions listed are also frequently used by malicious apps.
This signiﬁcant overlap intensiﬁes our privacy and security
concerns.
5.3 Macro and Micro Evolution Patterns
The characterization of permission changes we provided so
far, in terms of absolute numbers (added/deleted), reveals
37
Dangerous permission
WRITE EXTERNAL STORAGE
WAKE LOCK
READ PHONE STATE
ACCESS COARSE LOCATION
CAMERA
INTERNET
ACCESS FINE LOCATION
READ LOGS
READ CONTACTS
RECORD AUDIO
BLUETOOTH
CALL PHONE
CHANGE WIFI STATE
GET TASKS
MODIFY AUDIO SETTINGS
MANAGE ACCOUNTS
In Top 20?
(cid:2)
(cid:2)
(cid:2)
(cid:2)
×
(cid:2)
(cid:2)
×
(cid:2)
×
×
(cid:2)
(cid:2)
×
×
×
Table 8: Frequently used Dangerous Android permis-
sions of stable dataset.
Macro pattern Frequency
90.46%
8.59%
0.84%
0.11%
0→1
1→0
1→0→1
1→0→1→0
Table 9: Macro evolution patterns of permission us-
age in the stable dataset.
the general trend toward apps requiring more and more per-
missions. In addition, we also performed an in-depth study
where we looked for a ﬁner-grained characterization of per-
missions evolution in terms of “patterns”, e.g., repeated oc-
currences of permission changes.
Macro patterns. To construct the macro patterns, we use
0→1 and 1→0 as the basic modes, where ‘0’ represents the
state that the corresponding app does not use a particular
permission, ‘1’ represents the state that the corresponding
app uses a particular permission, and ‘→’ represents a state
transition. In Table 9, we tabulate the macro-patterns we
observed in the stable dataset, along with their frequencies.
We found that the permission additions dominate the per-
mission changes (0→1 has a 90.46% frequency), as pointed
out earlier in Section 5.1. We also found occurrences of other
interesting patterns, e.g., permissions being deleted and then