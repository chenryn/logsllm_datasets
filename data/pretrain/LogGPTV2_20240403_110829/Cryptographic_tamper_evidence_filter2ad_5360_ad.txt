Lemma 1. Let C be an α-separating collection. Then C-
scheme is α-synchronous tamper-evident.
Indeed, since C is α-separating, there exists I, such that
t1, t2 ∈ I but te (cid:15)∈ I. Thus, both signatures bσt1,M1 and
Deﬁne Cα,β = {{t} : t > 0} S {Iα,β,i,j :
the level. Deﬁne interval Iα,β,i,j = [i∆j, . . . , i∆j + Lj − 1].
|Iα,β,i,j| = Lj. We refer to j as the level of Iα,β,i,j,
Note:
and i as its displacement.
i > 0, j ≥ 0}.
Intuitively, the singleton sets deal with the cases |t1−t2| = 0
(i.e., t1 = t2), while the level j intervals handle the distances
|t1−t2| such that dj  β > 0, the above formula simpliﬁes to O(lg t). We leave
out of this version of the paper the question of computing
the values of β for the given α, which would yield the best
constant factors hidden by the big-O notation. It may be
helpful to consider the case of 2-synchronicity: using β = 1,
the number of keys stored and used at time t is at most
2 + 4 lg t. Thus we have the following lemma:
Lemma 2. For any constant α > 0 and ordinary signature
scheme Σ, there exists an α-synchronous tamper-evident
scheme KESig, storing O(lg t) keys and generating O(lg t)
Σ-signatures for each KESig-signature at time t.
3.4 Lower Bounds for the Subset Separation
Schemes
In this section we consider only the tamper-evident
schemes that are based on an ordinary signature scheme
and separate S from F by requiring that for any te  0, any α-synchronous
scheme for each signature at time t must generate Ω(lg t)
ordinary signatures (using as many diﬀerent keys).
Indeed, let  > 0 be some arbitrarily small constant, set
t2 = t, and initially let t1 = t− 1 and te = (cid:18)t − (1 + α) − (cid:19).
There must be a key that separates t1, t2 from te. And it
must be diﬀerent from the one that separates t2 = t and t1 =
(cid:18)t − (1 + α) − (cid:19) from te = (cid:18)t − (1 + α) − (1 + α)2 − 2(cid:19).
This step can be iterated k times as long as t ≥ k
i=0(1 +
α)i = (1 + α)k+1/α. Thus, at least Ω(lg t) ordinary signa-
tures (all using diﬀerent keys) must be generated for each
TE signature at time t.
The next section extends these lower bounds to the most
general tamper-evident schemes.
4. GENERAL LOWER BOUNDS
Let KESig be some key-evolving signature scheme with a
divergence test, according to the deﬁnitions in Sec. 2.1, and
the adversary as in the Deﬁnition 1.
Deﬁne support of t, suppKESig(t), to be a longest increas-
ing chain t0, t1, . . . , tl = t, such that t, ti+1 are ti-safe in
the given KESig scheme for all i : 0 ≤ i ≤ l − 1. Or-
der of t, ordKESig(t), is deﬁned to be the length l of this
chain (measured in the number of possible values for the
exposure time period ti). For example, if KESig is strongly
tamper-evident (ste), then for any t, ordKESig(t) = t + 1,
since we can set ti = i − 1 for all 0 ≥ i ≥ t + 1; exposure
time te = −1 corresponds to having no exposure. For α-te
KESig, ordKESig(t) = Θ(log1+α t).
Recall that k is the security parameter used in the deﬁni-
tion of safety (Def. 2).
must be at least ordKESig(t) · k.
We now show that the length of the signature at time t
Let t0, t1, . . . , tl = t be a support of t. Let F (cid:1)
be any
(forger) algorithm; unless stated otherwise, we do not as-
sume that F (cid:1)
has any access to the legitimate signer’s secrets
or even signatures. In this respect, F (cid:1)
is signiﬁcantly weaker
than the adversary F of the Deﬁnition 1. Generate an in-
stance of KESig, and let the legitimate signer S generate
signatures (cid:3)ti, σi(cid:4) for some message m and all i = 1, . . . , l
(signature for t0 is not needed, since t0 is used only as a
possible exposure time period; often t0 =−1). For a signa-
ture (cid:3)t, σ(cid:4) of some other message m(cid:1)
((cid:15)= m) at time t, deﬁne
event Ci((cid:3)t, σ(cid:4)) to be KESig.Div((cid:3)ti, σi(cid:4),(cid:3)t, σ(cid:4)) = ok. Let
C[j]((cid:3)t, σ(cid:4)) be the conjunction of all Ci=1,... ,j((cid:3)t, σ(cid:4)).
Lemma 3. Prob[ F (cid:1) → (t, σ) : s.t. C[l]((cid:3)t, σ(cid:4)) ]  1/2lk. Thus,
Prob[ C[l]((cid:3)t, σ(cid:1)(cid:4)) ] > 1/2kl, which contradicts Lemma 3.
Thus, the following theorem follows as a corollary from the
Lemma:
If |σ|  k · ordKESig(t).
Since ordKESig(t) = t + 1 for the strongly tamper-evident
schemes, and for the α-synchronous schemes (for constant
α > 0) ordKESig(t) = Θ(lg t), we get the following corollaries:
(ste Signature Length).
|σ| > k · (t + 1) for any ste KESig.Sign → (cid:3)t, σ(cid:4).
(α-te Signature Length).
|σ| = Ω(k · lg t) for any α-te KESig.Sign → (cid:3)t, σ(cid:4), α > 0.
Corollary 2
Corollary 1
5. DISCUSSION
Lower Bounds Implications. Ultimately, the strongest
possible security that can be achieved is to use strong
tamper-evidence while advancing the time period with every
signature (perhaps even introducing an idle time period be-
tween subsequent signatures). This is essentially equivalent
to keeping a log of all the signatures.
One way to interpret the above lower-bounds is that —
unless a diﬀerent way to deﬁne tamper-evidence is found for
which our lower bounds do not apply— such a log is the best
that can be done. This fact further motivates our slightly
weaker deﬁnitions of tamper-evidence.
Universal evidence. Our constructions can be modiﬁed
(e.g., using chaining as suggested in the footnote 6) so that
any pair of signatures (cid:3)t1, σ1(cid:4),(cid:3)t2, σ2(cid:4), which are both valid
for the same public key but Div((cid:3)t1, σ1(cid:4),(cid:3)t2, σ2(cid:4)) = foul,
represents a universal and indisputable evidence that either
the key has been exposed or that the signer is faking the key
exposure.
PKI implications. Revocation is a traditional method of
dealing with the compromised keys. Whatever is the revoca-
tion mechanism, the key compromise must be detected ﬁrst,
and then the revocation process followed appropriately. In
all the traditional Public Key Infrastructures (PKIs), some
party — call it Revocation Authority (RA) — must be con-
vinced that the key is indeed compromised, before it actu-
ates the revocation: typically, generating a revocation note9.
9This can be a self-signed “suicide note” (as in PGP or other
approaches e.g., [30]); in these cases RA is the signer himself.
Alternatively, in the more common PKIs, the revocation
note is a part of a Certiﬁcate Revocation List (CRL), or a
similar data structure, which is generated (and certiﬁed) by
some trusted third party, such as the Certiﬁcation Authority
(CA).
Whether RA is the signer himself or a CA (or other),
convincing RA of the key compromise using the previously
existing methods is potentially cumbersome both logistically
and legally.
In contrast, our schemes allow anyone to detect tamper-
ing and present a universally convincing proof of the com-
promise: two valid but inconsistent signatures as above. In
fact, such a proof may serve as a revocation note.10
Moreover, if we add some infrastructure —which is also
utilized in the PKI— to the tamper-resilience, we can fur-
ther optimize PKI: Suppose that instead of the CRL, the
infrastructure maintains a publicly accessible space for two
signatures per each user. Each legitimate signer S can post
his signature for each day in that space (the signature should
be veriﬁed before being posted to avoid denial of service at-
tack). Normally, the space for the second signature is empty.
Then, instead of checking a CRL, the veriﬁers can use that
signature with the Div algorithm to verify that S has not
been compromised. Of course, it is possible that immedi-
ately following an exposure, F manages to post her version
of the daily signature. But then S will be able to detect
the tampering and post it into the second space — thus
when two signatures are posted for a user, the correspond-
ing key is considered suspended. Then the legitimate signer
can resolve the conﬂict by out-of-band means, which will re-
sult in removing the forged signature and enabling further
functioning of this signer.
Such an eﬃcient recovery from security failures is a very
important feature of the system. Thus, while this method
might not necessarily the space requirements of the PKI, it
does optimize its infrastructure and recovery functions. And
that is often more important than the space requirements.
The public posting site can be replaced with a more “per-
sonal” version: in the case of regular transactions between
the signer and a recipient, the recipient can keep the latest
signer’s signature as a “cookie”. Then even after the expo-
sure of the signer’s secrets, the adversary cannot imperson-
ate the singer to the recipient (again, except immediately
after the exposure).
Symmetric signatures and peer-to-peer setting.
Since our constructions are generic,