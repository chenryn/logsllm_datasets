#define va_list char*
#ifndef wIN32
define va_start (ap,arg)(ap= (va_list)karg+sizeof (arg))
#define va_arg(ap,t)(*(t*) ((ap+=sizeof(t))-sizeof (t)))
#define va_end(ap) (ap= (va_1ist}0)
include 
#else
#endif
int vfprintf (FILE *strean, const char *format, va_list arglist)
int translating = 0;
const char* p = 0;
int ret = 0;
(d++1,0\. =1 d,emxo] = d) 1og
evitch (*p)
case '$':
if (!translating)
else
translating = 1;
if (fputc('$',
return EOF;
strean) c1 /c /DwIN32 /Gs- entry.c malloc.c printf.c atdio.c string.c
>1ib entry.oby nalloc.obj printf.obj stdio.obj atring.oby /ovr:minicrt.1ib
·/DWIN32表示定义WIN32这个宏，这也正是在代码中用于区分平台的宏。
·/GS-表示关闭堆栈保护功能，MSVC和GCC一样也会在不定参数中插入堆栈保护功
能。不管这个功能会不会在最后链接时发生“_security_cookie”和“_scurity_check_
cookie”符号未定义错误。
为了测试MiniCRT是否能够正常运行，我们专门编写了一段测试代码，用于测试Mini
CRT的功能，如清单13-7所示。
清单13-7test.c
include *minicrt.h*
int main(int arge, char* argv[1)
程序员的自我修养—链接、装载与库
---
## Page 455
432
第13章运行库实现
int i;
char** v = malloc(argc*sizeof(char*)) ;
FILE* fp:
for(i=0;1< argc:++i){
v[1] = ma1loe (8trlen(argv[i1) + 1) :
strcpy (v[i] 。 argv[i]);
fp = fopen(*test,txt*,*v*);
for(i = 0; i < argc; ++i) (
fwrite(&len, 1, sizeof (int), fp1 ;
int len = strlen(v[i1):
fwrite(v[i),1, 1en, fp) :
fclose(fp1:
fp = fopen(*test.txt*,*r"):
for(i = 0; i < argc; ++i) {
int len;
fread (&len, 1, sizeof (1nt), fp) :
char* buf;
buf =mal1oc(len +1);
fread(buf, 1, 1en, fp);
printf(*&d 8s\n*, len, buf);
buf [len] =
*\0';
free (buf) ;
free (v[i]) ;
fclose(fp) :
这段代码用到了 Mini CRT中绝大部分函数，包括malloc、free、fopen、fclose、fread、
fwrite、printf，并且测试了main参数。它的作用就是将main的参数字符串都保存到文件中，
然后再读取出来，由printf显示出来。在Linux下，可以用下面的方法编译和运行test.c：
$1d -atatic -e mini_ort_entry entry.o test.o minicrt.a -o test
$1s -1 test