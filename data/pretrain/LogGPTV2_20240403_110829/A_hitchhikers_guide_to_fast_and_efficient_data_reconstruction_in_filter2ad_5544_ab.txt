struction of missing or otherwise unavailable data by 25%
to 45% without requiring any additional storage and main-
taining same level of fault-tolerance as RS-based systems.
It can be used with any choice of the system parameters
k and r. To the best of our knowledge, this is the ﬁrst
practical solution available in literature that reduces the
disk and network traﬃc during reconstruction without in-
3More speciﬁcally, these numbers are for the ‘Hitchhiker-
XOR+’ version of Hitchhiker.
creasing the storage overhead or (severely) limiting the
system design.
• Propose a new storage code built on top of RS that makes
use of the theoretical framework of piggybacking to reduce
the amount of data required for reconstruction.
• Propose a novel disk layout technique that ensures that
the savings in network traﬃc are translated to savings in
disk traﬃc as well. This technique is general and can also
be used to save disk resources in other storage codes.
• Implement Hitchhiker in HDFS, and test it by deploying
it on a test cluster with 60 machines in a data center
at Facebook and verify the theoretical guarantees of 35%
savings in network and disk traﬃc during reconstruction.
• Evaluate the read time and compute time metrics of
Hitchhiker on the data-warehouse cluster in production
at Facebook consisting of multiple thousands of machines
with ongoing real-time traﬃc and workloads, showing a
32% reduction in time to read data and a 36% reduction
in computation time during reconstruction.
This
establishes that Hitchhiker can reduce the latency of
degraded reads, and also perform faster recovery from
machine failures and decommissioning.
2. THEORETICAL BACKGROUND
2.1 Reed-Solomon (RS) codes
As discussed brieﬂy in §1, a (k, r) RS code [23] encodes k
data bytes into r parity bytes. The code operates on each set
of k bytes independently and in an identical fashion. Each
such set on which independent and identical operations are
performed by the code is called a stripe. Fig. 2 depicts ten
units of data encoded using a (k = 10, r = 4) RS code that
generates four parity units. Here, a1, . . . , a10 are one byte
each, and so are b1, . . . , b10. Note that the code is operating
independently and identically on the two columns, and hence
each of the two columns constitute a stripe of this code.
We use the notation a = [a1 ··· a10] and b = [b1 ··· b10].
Each of the functions f1, f2, f3 and f4, called parity func-
tions, operate on k = 10 data bytes to generate the r = 4
parities. The output of each of these functions comprises one
byte. These functions are such that one can reconstruct a
from any 10 of the 14 bytes {a1, . . . , a10, f1(a), . . . , f4(a)}.
In general, a (k, r) RS code has r parity functions gener-
ating the r parity bytes such that all the k data bytes are
recoverable from any k of the (k + r) bytes in a stripe.
In the above discussion, each unit is considered indivisible:
all the bytes in a unit share the same fate, i.e., all the bytes
are either available or unavailable. Hence, a reconstruction
operation is always performed on one or more entire units.
A unit may be the smallest granularity of the data handled
by a storage system, or it may be a data chunk that is always
written onto the same disk block.
Reconstruction of any unit is performed in the following
manner. Both the stripes of any 10 of the remaining 13
units are accessed. The RS code guarantees that any desired
data can be obtained from any 10 of the units, allowing
for reconstruction of the requisite unit from this accessed
data. This reconstruction operation in the RS code requires
accessing a total of 20 bytes from the other units.
2.2 Theoretical Framework of Piggybacking
In this section, we review a theoretical framework pro-
posed in [22] for the construction of erasure codes, called the
1 byte←−−−→
1 byte←−−−→
1 byte
←−−−−−−→
1 byte
←−−−−−−→
1 byte
←−−−−−−→
1 byte
←−−−−−−→
b1 +g1(a)
...
b10 +g10(a)
f1(b)+g11(a)
f2(b)+g12(a)
f3(b)+g13(a)
f4(b)+g14(a)
(cid:123)(cid:122)
(cid:124)
(cid:125)
(cid:123)(cid:122)
stripe
a1
...
a10
f1(a)
f2(a)
f3(a)
f4(a)
(cid:123)(cid:122)
(cid:124)
(cid:124)
(cid:125)
(cid:125)
(cid:124)
(cid:124)
a1
...
a10
f1(a)
f2(a)
f3(a)
f4(a)
(cid:123)(cid:122)
b1
...
b10
f1(b)
(cid:123)(cid:122)
f2(b)⊕a1⊕a2⊕a3
f3(b)⊕a4⊕a5⊕a6
f4(b)⊕a7⊕a8⊕a9⊕a10
(cid:125)
(cid:124)
(cid:123)(cid:122)
stripe
(cid:125)
(cid:125)
unit 1
...
Data
unit 10
unit 11
Parity unit 12
unit 13
unit 14
(cid:124)
a1
...
a10
f1(a)
f2(a)
f3(a)
f4(a)
(cid:123)(cid:122)
stripe
b1
...
b10
f1(b)
f2(b)
f3(b)
f4(b)
(cid:123)(cid:122)
stripe
(cid:125)
(cid:125)
(cid:124)
1st substripe
2nd substripe
1st substripe
2nd substripe
Figure 2: Two stripes of a (k =10, r =
4) Reed-Solomon (RS) code. Ten
units of data (ﬁrst ten rows) are en-
coded using the RS code to generate
four parity units (last four rows).
The
Figure 3:
theoreti-
cal framework of Piggyback-
ing [22] for parameters (k =
10, r =4). Each row represents
one unit of data.
Figure 4: Hitchhiker-XOR code for
(k =10, r =4). Each row represents
one unit of data.
Piggybacking framework. The framework operates on pairs
of stripes of an RS code (e.g., the pair of columns depicted
in Fig. 2). The framework allows for arbitrary functions of
the data pertaining to one stripe to be added to the second
stripe. This is depicted in Fig. 3 where arbitrary functions
g1, . . . , g14 of the data of the ﬁrst stripe of the RS code a
are added to the second stripe of the RS code. Each of these
functions outputs values of size one byte.
The Piggybacking framework performs independent and
identical operations on pairs of columns, and hence a stripe
consists of two columns. The constituent columns of a stripe
will be referred to as substripes (see Fig. 3).
Irrespective of the choice of the Piggybacking functions
g1, . . . , g14, the code retains the fault tolerance and the stor-
age eﬃciency of the underlying RS code. To see the fault
tolerance, recall that RS codes allow for tolerating failure of
any r units. In our setting of (k = 10, r = 4), this amounts
to being able to reconstruct the entire data from any 10 of
the 14 units in that stripe. Now consider the code of Fig. 3,
and consider any 10 units (rows). The ﬁrst column of Fig. 3
is identical to the ﬁrst stripe (column) of the RS code of
Fig. 2, which allows for reconstruction of a from these 10
units. Access to a now allows us to compute the values of
the functions g1(a), . . . , g14(a), and subtract the respective
functions out from the second columns of the 10 units un-
der consideration. What remains are some 10 bytes out of
{b1, . . . , b10, f1(b), . . . , f4(b)}. This is identical to the second
stripe (column) of the RS code in Fig. 2, which allows for the
reconstruction of b. It follows that the code of Fig. 3 can also
tolerate the failure of any r = 4 units. We will now argue
storage eﬃciency. Each function gi outputs one byte of data.
Moreover, the operation of adding this function to the RS
code is performed via “ﬁnite ﬁeld arithmetic”, and hence the
result also comprises precisely one byte.4 Thus the amount
of storage is not increased upon performing these operations.
It is easy to see that each of these arguments extend to any
generic values of the parameters k and r.
The theoretical framework of Piggybacking thus provides
a high degree of ﬂexibility in the design of the erasure code
4We do not employ any special properties of ﬁnite ﬁeld arith-
metic in the paper, and do not assume the reader to be
conversant of the same.
by allowing for an arbitrary choice of the functions gi’s.
When using this framework for constructing codes, this
choice must be made in a manner that imparts desired
features to the erasure code. In this paper we design these
functions to increase the eﬃciency of reconstruction.
3. HITCHHIKER’S ERASURE CODE
One of the main components of Hitchhiker is the new era-
sure code proposed in this paper. The proposed code reduces
the amount of data required during reconstruction, without
adding any additional storage overhead. Furthermore, the
code can be used for any values of the system parameters
k and r, thus maintaining both (P1) storage optimality and
(P2) generic applicability properties of RS codes. This code
is based on the recently proposed theoretical framework of
piggybacking ([22];§2).
The proposed code has three versions, two of which re-
quire only XOR operations in addition to encoding of the
underlying RS code. The XOR-only feature of these era-
sure codes signiﬁcantly reduces the computational complex-
ity of decoding, making degraded reads and failure recovery
faster (§6.3). Hitchhiker’s erasure code optimizes only the
reconstruction of data units; reconstruction of parity units
is performed as in RS codes.
The three versions of Hitchhiker’s erasure code are de-
scribed below. Each version is ﬁrst illustrated with an ex-
ample for the parameters (k = 10, r = 4), followed by the
generalization to arbitrary values of the parameters. With-
out loss of generality, the description of the codes’ oper-
ations considers only a single stripe (comprising two sub-
stripes). Identical operations are performed on each stripe
of the data.
3.1 Hitchhiker-XOR
As compared to a (k = 10, r = 4) RS code, Hitchhiker-
XOR saves 35% in the amount of data required during the
reconstruction of the ﬁrst six data units and 30% during the
reconstruction of the remaining four data units.
3.1.1 Encoding
The code for (k = 10, r = 4) is shown in Fig. 4. The ﬁg-
ure depicts a single stripe of this code, comprising two sub-
stripes. The encoding operation in this code requires only
XOR operations in addition to the underlying RS encoding.
Hitchhiker-XOR+ requires 35% lesser data for reconstruc-
tion of any of the data units as compared to RS codes.
3.1.2 Reconstruction
First consider reconstructing the ﬁrst unit. This requires
reconstruction of {a1, b1} from the
remaining units.
Hitchhiker-XOR accomplishes this using only 13 bytes
from the other units:
the bytes belonging to both the
substripes of units {2, 3} and the bytes belonging to only
the second substripe of units {4, . . . , 12}. These 13 bytes
are {a2, a3, b2, b3 . . . , b10, f1(b), f2(b) ⊕ a1 ⊕ a2 ⊕ a3}. The
decoding procedure comprises three steps. Step 1: observe
that the 10 bytes {b2, . . . , b10, f1(b)} are identical to the
corresponding 10 bytes in the RS encoding of b (Fig. 2).
RS decoding of these 10 bytes gives b (and this includes
one of the desired bytes b1). Step 2: XOR f2(b) with the
second byte (f2(b) ⊕ a1 ⊕ a2 ⊕ a3) of the 12th unit. This
gives (a1 ⊕ a2 ⊕ a3). Step 3: XORing this with a2 and a3
gives a1. Thus both a1 and b1 are reconstructed by using
only 13 bytes, as opposed to 20 bytes in RS codes,
resulting in a saving of 35%.
Let us now consider the reconstruction of any unit i ∈
{1, . . . , 10}, which requires reconstruction of {ai, bi}. We
shall ﬁrst describe what data (from the other units) is re-
quired for the reconstruction, following which we describe
the decoding operation. Any data unit i ∈ {1, 2, 3} is re-
constructed using the following 13 bytes: the bytes of both
the substripes of units {1, 2, 3}\{i}, and the bytes belong-
ing to only the second substripe from units {4, . . . , 12}.5
Any data unit i ∈ {4, 5, 6} is also reconstructed using only
the bytes belonging to both the substripes of
13 bytes:
units {4, 5, 6}\{i}, and the bytes belonging to only the sec-
ond substripe of units {1, 2, 3, 7, . . . , 11, 13}. Any data unit
i ∈ {7, 8, 9, 10} is reconstructed using 14 bytes: both sub-
stripes of units {7, 8, 9, 10}\{i}, and only the second sub-
stripe of units {1, . . . , 6, 11, 14}.
Three-step decoding procedure:
Step 1: The set of 10 bytes {b1, . . . , b10, f1(b)}\{bi} be-
longing to the second substripe of the units {1, . . . , 11}\{i}
is identical to the 10 corresponding encoded bytes in the RS
code. Perform RS decoding of these 10 bytes to get b (which
includes one of the desired bytes bi).
Step 2: In the other bytes accessed, subtract out all com-
ponents that involve b.
Step 3: XOR the resulting bytes to get ai.
Observe that during the reconstruction of any data unit,
the remaining data units do not perform any computation.