### Reconstruction of Missing or Unavailable Data

Our solution reduces the amount of data required for reconstruction by 25% to 45% without increasing storage overhead and while maintaining the same level of fault tolerance as Reed-Solomon (RS) based systems. This method is compatible with any choice of system parameters \( k \) and \( r \). To the best of our knowledge, this is the first practical solution in literature that decreases disk and network traffic during reconstruction without increasing storage overhead or severely limiting system design.

#### Key Contributions
- **New Storage Code**: We propose a new storage code built on top of RS that leverages the theoretical framework of piggybacking to reduce the amount of data needed for reconstruction.
- **Disk Layout Technique**: A novel disk layout technique ensures that savings in network traffic are also translated into savings in disk traffic. This technique is general and can be applied to other storage codes to save disk resources.
- **Implementation and Testing**: Hitchhiker was implemented in HDFS and tested on a test cluster with 60 machines at Facebook. The results verified a 35% reduction in network and disk traffic during reconstruction.
- **Performance Evaluation**: Hitchhiker was evaluated on a production data-warehouse cluster at Facebook, consisting of thousands of machines with ongoing real-time traffic and workloads. The evaluation showed a 32% reduction in read time and a 36% reduction in computation time during reconstruction, establishing that Hitchhiker can reduce latency for degraded reads and perform faster recovery from machine failures and decommissioning.

### Theoretical Background

#### 2.1 Reed-Solomon (RS) Codes
A \((k, r)\) RS code encodes \( k \) data bytes into \( r \) parity bytes. Each set of \( k \) bytes is processed independently and identically. Such sets are called stripes. Figure 2 illustrates ten units of data encoded using a \((k = 10, r = 4)\) RS code, generating four parity units. Here, \( a_1, \ldots, a_{10} \) and \( b_1, \ldots, b_{10} \) are each one byte. The code operates independently and identically on the two columns, making each column a stripe.

We denote \( a = [a_1 \cdots a_{10}] \) and \( b = [b_1 \cdots b_{10}] \). Parity functions \( f_1, f_2, f_3, \) and \( f_4 \) generate the \( r = 4 \) parities from the \( k = 10 \) data bytes. These functions ensure that \( a \) can be reconstructed from any 10 of the 14 bytes \(\{a_1, \ldots, a_{10}, f_1(a), \ldots, f_4(a)\}\).

In general, a \((k, r)\) RS code has \( r \) parity functions generating \( r \) parity bytes, allowing all \( k \) data bytes to be recoverable from any \( k \) of the \( (k + r) \) bytes in a stripe. Each unit is considered indivisible, and reconstruction is performed on entire units. A unit may be the smallest granularity of data handled by the storage system or a data chunk written to the same disk block.

Reconstruction of any unit involves accessing both stripes of any 10 of the remaining 13 units. The RS code guarantees that any desired data can be obtained from any 10 units, allowing for the reconstruction of the requisite unit from the accessed data. This process requires accessing a total of 20 bytes from the other units.

#### 2.2 Theoretical Framework of Piggybacking
The Piggybacking framework, proposed in [22], allows for the construction of erasure codes by adding arbitrary functions of the data from one stripe to the second stripe. This is illustrated in Figure 3, where functions \( g_1, \ldots, g_{14} \) of the data from the first stripe are added to the second stripe. Each function outputs values of one byte.

The Piggybacking framework performs independent and identical operations on pairs of columns, with each pair forming a stripe. The constituent columns of a stripe are referred to as substripes (see Figure 3).

Regardless of the choice of Piggybacking functions \( g_1, \ldots, g_{14} \), the code retains the fault tolerance and storage efficiency of the underlying RS code. The code can tolerate the failure of any \( r \) units, and the storage efficiency is maintained because each function \( g_i \) outputs one byte, and the operation is performed via finite field arithmetic, ensuring no increase in storage.

### Hitchhiker’s Erasure Code

Hitchhiker's erasure code reduces the amount of data required during reconstruction without adding any additional storage overhead. It can be used for any values of the system parameters \( k \) and \( r \), maintaining both storage optimality and generic applicability properties of RS codes. The code is based on the recently proposed theoretical framework of piggybacking ([22]; §2).

Hitchhiker's erasure code has three versions, two of which require only XOR operations in addition to the encoding of the underlying RS code. This feature significantly reduces the computational complexity of decoding, making degraded reads and failure recovery faster (§6.3). The code optimizes only the reconstruction of data units; reconstruction of parity units is performed as in RS codes.

#### 3.1 Hitchhiker-XOR
For a \((k = 10, r = 4)\) RS code, Hitchhiker-XOR saves 35% in the amount of data required during the reconstruction of the first six data units and 30% during the reconstruction of the remaining four data units.

##### 3.1.1 Encoding
The encoding operation in Hitchhiker-XOR requires only XOR operations in addition to the underlying RS encoding. Figure 4 shows the code for \((k = 10, r = 4)\), depicting a single stripe comprising two substripes.

##### 3.1.2 Reconstruction
To reconstruct the first unit, Hitchhiker-XOR uses only 13 bytes from the other units: the bytes belonging to both substripes of units \(\{2, 3\}\) and the bytes belonging to only the second substripe of units \(\{4, \ldots, 12\}\). These 13 bytes are \(\{a_2, a_3, b_2, b_3, \ldots, b_{10}, f_1(b), f_2(b) \oplus a_1 \oplus a_2 \oplus a_3\}\). The decoding procedure comprises three steps:

1. **Step 1**: Observe that the 10 bytes \(\{b_2, \ldots, b_{10}, f_1(b)\}\) are identical to the corresponding 10 bytes in the RS encoding of \( b \) (Figure 2). RS decoding of these 10 bytes gives \( b \) (including the desired byte \( b_1 \)).
2. **Step 2**: XOR \( f_2(b) \) with the second byte \((f_2(b) \oplus a_1 \oplus a_2 \oplus a_3)\) of the 12th unit. This gives \((a_1 \oplus a_2 \oplus a_3)\).
3. **Step 3**: XOR this result with \( a_2 \) and \( a_3 \) to get \( a_1 \). Thus, both \( a_1 \) and \( b_1 \) are reconstructed using only 13 bytes, compared to 20 bytes in RS codes, resulting in a 35% saving.

For the reconstruction of any unit \( i \in \{1, \ldots, 10\} \), which requires reconstruction of \(\{a_i, b_i\}\):

- **Units \( i \in \{1, 2, 3\} \)**: Reconstructed using 13 bytes: the bytes of both substripes of units \(\{1, 2, 3\} \setminus \{i\}\), and the bytes belonging to only the second substripe from units \(\{4, \ldots, 12\}\).
- **Units \( i \in \{4, 5, 6\} \)**: Reconstructed using 13 bytes: the bytes of both substripes of units \(\{4, 5, 6\} \setminus \{i\}\), and the bytes belonging to only the second substripe of units \(\{1, 2, 3, 7, \ldots, 11, 13\}\).
- **Units \( i \in \{7, 8, 9, 10\} \)**: Reconstructed using 14 bytes: the bytes of both substripes of units \(\{7, 8, 9, 10\} \setminus \{i\}\), and the bytes belonging to only the second substripe of units \(\{1, \ldots, 6, 11, 14\}\).

**Three-step decoding procedure**:
1. **Step 1**: The set of 10 bytes \(\{b_1, \ldots, b_{10}, f_1(b)\} \setminus \{b_i\}\) belonging to the second substripe of the units \(\{1, \ldots, 11\} \setminus \{i\}\) is identical to the 10 corresponding encoded bytes in the RS code. Perform RS decoding of these 10 bytes to get \( b \) (which includes the desired byte \( b_i \)).
2. **Step 2**: In the other bytes accessed, subtract out all components that involve \( b \).
3. **Step 3**: XOR the resulting bytes to get \( a_i \).

During the reconstruction of any data unit, the remaining data units do not perform any computation.