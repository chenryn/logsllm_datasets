  * `file:~/code/main.c::255`: A line number 
  * `file:~/xx.org::*My Target`: A search for `>` heading.
  * `file:~/xx.org::#my-custom-id`: A	search for-  a custom ID
### [Properties](https://orgmode.org/guide/Properties.html)
Properties are key-value pairs associated with an entry. They live in a special drawer with the name `PROPERTIES`. Each property is specified on a single line, with the key (surrounded by colons) first, and the value after it:
```org
* CD collection
** Classic
*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :END:
```
You may define the allowed values for a particular property `Xyz` by setting a property `Xyz_ALL`. This special property is inherited, so if you set it in a level 1 entry, it applies to the entire tree. When allowed values are defined, setting the corresponding property becomes easier and is less prone to typing errors. For the example with the CD collection, we can pre-define publishers and the number of disks in a box like this:
```org
* CD collection
  :PROPERTIES:
  :NDisks_ALL:  1 2 3 4
  :Publisher_ALL: "Deutsche Grammophon" Philips EMI
  :END:
```
If you want to set properties that can be inherited by any entry in a file, use a line like:
```org
#+PROPERTY: NDisks_ALL 1 2 3 4
```
This can be interesting for example if you want to track when was a header created:
```org
*** Title of header
   :PROPERTIES:
   :CREATED:  
   :END:
```
### [Code blocks](https://orgmode.org/manual/Structure-of-Code-Blocks.html)
Org offers two ways to structure source code in Org documents: in a source code block, and directly inline. Both specifications are shown below.
A source code block conforms to this structure:
```org
#+NAME: 
#+BEGIN_SRC   
#+END_SRC
```
You need to use snippets for this to be usable.
An inline code block conforms to this structure:
```org
src_{}
```
or
```org
src_[]{}
```
Where:
- `#+NAME: `: (Optional) Names the source block so it can be called, like a function, from other source blocks or inline code to evaluate or to capture the results. Code from other blocks, other files.
- `#+BEGIN_SRC’ … ‘#+END_SRC`: (Mandatory) They mark the start and end of a block that Org requires.
- ``: (Mandatory) It is the identifier of the source code language in the block. See [Languages](https://orgmode.org/worg/org-contrib/babel/languages/index.html) for identifiers of supported languages.
- ``: (Optional) Switches provide finer control of the code execution, export, and format.
- ``: (Optional) Heading arguments control many aspects of evaluation, export and tangling of code blocks. Using Org’s properties feature, header arguments can be selectively applied to the entire buffer or specific subtrees of the Org document.
- ``: Source code in the dialect of the specified language identifier. 
## Archiving
When we no longer need certain parts of our org files, they can be archived. You can archive items by pressing `;A` (Default `o$`) while on the heading. This will also archive any child headings. The default location for archived headings is `.org_archive`, which can be changed with the `org_archive_location` option.
The problem is that when you archive an element you loose the context of the item unless it's a first level item. 
Another way to archive is by adding the `:ARCHIVE:` tag with `;a` and once all elements are archived move it to the archive.
```lua
org = {
  org_toggle_archive_tag = ';a',
  org_archive_subtree = ';A',
}
```
There are some work in progress to improve archiving in the next issues [1](https://github.com/nvim-orgmode/orgmode/issues/413), [2](https://github.com/nvim-orgmode/orgmode/issues/369) and [3](https://github.com/joaomsa/telescope-orgmode.nvim/issues/2). 
If you [don't want to have dangling org_archive files](https://github.com/nvim-orgmode/orgmode/issues/628) you can create an `archive` directory somewhere and then set:
```lua
local org = require('orgmode').setup({
  org_archive_location = "~/orgmode/archive/" .. "%s_archive",
)}
```
### Use archiving to clean long checklists
When you have big tasks that have nested checklists, when you finish the day working on the task you may want to clean the checklist without loosing what you've done, for example for reporting purposes.
In those cases what I do is archive the task, and then undo the archiving. That way you have a copy of the state of the task in your archive with a defined date. Then you can safely remove the done checklist items.
## Refiling
Refiling lets you easily move around elements of your org file, such as headings or TODOs. You can refile with `r` with the next snippet:
```lua
org = {
  org_refile = 'r',
}
```
When you press the refile key binding you are supposed to press `` to see the available options, once you select the correct file, if you will be shown a autocomplete with the possible items to refile it to. Luckily there is [a Telescope plugin](https://github.com/joaomsa/telescope-orgmode.nvim).
Install it by adding to your plugin config:
```lua
use 'joaomsa/telescope-orgmode.nvim'
```
Then install it with `:PackerInstall`.
You can setup the extension by doing:
```lua
require('telescope').load_extension('orgmode')
```
To replace the default refile prompt:
```lua
vim.api.nvim_create_autocmd('FileType', {
  pattern = 'org',
  group = vim.api.nvim_create_augroup('orgmode_telescope_nvim', { clear = true })
  callback = function()
    vim.keymap.set('n', 'r', require('telescope').extensions.orgmode.refile_heading)
    vim.keymap.set('n', 'g', require('telescope').extensions.orgmode.search_headings)
  end,
})
```
If the auto command doesn't override the default `orgmode` one, bind it to another keys and never use it.
If you refile from the capture window, [until this issue is solved](https://github.com/joaomsa/telescope-orgmode.nvim/issues/4), your task will be refiled but the capture window won't be closed.
Be careful that it only refiles the first task there is, so you need to close the capture before refiling the next
The plugin also allows you to use `telescope` to search through the headings of the different files with `search_headings`, with the configuration above you'd use `g`.
## Agenda
The org agenda is used to get an overview of all your different org files. Pressing `ga` (Default: `oa`) gives you an overview of the various specialized views into the agenda that are available. Remember that you can press `g?` to see all the available key mappings for each view.
```lua
  global = {
    org_agenda = 'ga',
  },
```
You'll be presented with the next views:
* `a`: Agenda for current week or day
* `t`: List of all TODO entries
* `m`: Match a TAGS/PROP/TODO query
* `M`: Like `m`, but only TODO entries
* `s`: Search for keywords
* `q`: Quit
So far the `nvim-orgmode` agenda view lacks the next features:
- Custom agenda commands
- These interactions with the items:
  - Remove it
  - Promote/demote it
  - Order it up and down
### Move around the agenda view
* `.`: Go to Today
* `J`: Opens a popup that allows you to select the date to jump to.
* ``: Next agenda span (Default `f`). For example if you are in the week view it will go to the next week.
* ``: Previous agenda span (Default `b`).
* `/`: Opens a prompt that allows filtering current agenda view by category, tags and title. 
  For example, having a `todos.org` file with headlines that have tags `mytag` or `myothertag`, and some of them have check in content, searching by `todos+mytag/check/` returns all headlines that are in `todos.org` file, that have `mytag` tag, and have `check` in headline title. 
  Note that `regex` is case sensitive by default. Use the vim regex flag `\c` to make it case insensitive. For more information see `:help vim.regex()` and `:help /magic`.
  Pressing `` in filter prompt autocompletes categories and tags.
* `q`: Quit                                                                                                
```lua
  agenda = {
    org_agenda_later = '',
    org_agenda_earlier = '',
  },
```
### Act on the agenda elements
* ``: Open the file containing the element on your cursor position. By default it opens it in the same buffer as the agenda view, which is a bit uncomfortable for me, I prefer the behaviour of `` so I'm using that instead.
* `t`: Change `TODO` state of an item both in the agenda and the original Org file
* `=`/`-`: Change the priority of the element
* `r`: Reload all org files and refresh the current agenda view.
```lua
  agenda = {
    org_agenda_switch_to = '',
    org_agenda_goto = '',
    org_agenda_priority_up = '=',
    org_agenda_set_tags = 'g',
    org_agenda_deadline = 'd',
    org_agenda_schedule = 's',
  },
```
### Agenda views:
* `vd`: Show the agenda of the day
* `vw`: Show the agenda of the week
* `vm`: Show the agenda of the month
* `vy`: Show the agenda of the year
Once you open one of the views you can do most of the same stuff that you on othe org mode file:
There is still no easy way to define your [custom agenda views](https://orgmode.org/manual/Custom-Agenda-Views.html), but it looks possible [1](https://github.com/nvim-orgmode/orgmode/issues/478) and [2](https://github.com/nvim-orgmode/orgmode/issues/135).
### [Agenda searches](https://orgmode.org/worg/org-tutorials/advanced-searching.html#property-searches)
When using the search agenda view you can:
* Search by TODO states with `/WAITING`
* Search by tags `+home`. The syntax for such searches follows a simple boolean logic:
  - `|`: or
  - `&`: and
  - `+`: include matches
  - `-`: exclude matches 
  Here are a few examples:
  - `+computer&+urgent`: Returns all items tagged both `computer` and `urgent`.
  - `+computer|+urgent`: Returns all items tagged either `computer` or `urgent`.
  - `+computer&-urgent`: Returns all items tagged `computer` and not `urgent`.
  As you may have noticed, the syntax above can be a little verbose, so org-mode offers convenient ways of shortening it. First, `-` and `+` imply `and` if no boolean operator is stated, so example three above could be rewritten simply as:
  ```
  +computer-urgent
  ```
  Second, inclusion of matches is implied if no `+` or `-` is present, so example three could be further shortened to:
  ```
  computer-urgent
  ```
  Example number two, meanwhile, could be shortened to:
  ```
  computer|urgent
  ```
  There is no way (as yet) to express search grouping with parentheses. The `and` operators (`&`, `+`, and `-`) always bind terms together more strongly than `or` (`|`). For instance, the following search
  ```
  computer|work+email
  ```
  Results in all headlines tagged either with `computer` or both `work` and `email`. An expression such as `(computer|work)&email` is not supported at the moment. You can construct a regular expression though:
  ```
  +{computer\|work}+email
  ```
* [Search by properties](https://orgmode.org/worg/org-tutorials/advanced-searching.html#property-searches): You can search by properties with the `PROPERTY="value"` syntax. Properties with numeric values can be queried with inequalities `PAGES>100`. To search by partial searches use a regular expression, for example if the entry had `:BIB_TITLE: Mysteries of the Amazon` you could use `BIB_TITLE={Amazon}`
## [Capture](https://orgmode.org/manual/Capture.html)
Capture lets you quickly store notes with little interruption of your work flow. It works the next way:
- Open the interface with `;c` (Default `oc`) that asks you what kind of element you want to capture. 
- Select the template you want to use. By default you only have the `Task` template, that introduces a task into the same file where you're at, select it by pressing `t`.
- Fill up the template.
- Choose what to do with the captured content:
  - Save it to the configured file by pressing `;w` (Default `c`)
  - Refile it to a file by pressing `;r` (Default `or`).
  - Abort the capture `;q` (Default `ok`).
```lua