title:Iris: a scalable cloud file system with efficient integrity checks
author:Emil Stefanov and
Marten van Dijk and
Ari Juels and
Alina Oprea
Iris: A Scalable Cloud File System with
Efﬁcient Integrity Checks
∗
Emil Stefanov
UC Berkeley
PI:EMAIL
Marten van Dijk
RSA Laboratories
PI:EMAIL
Alina Oprea
RSA Laboratories
PI:EMAIL
Ari Juels
RSA Laboratories
PI:EMAIL
ABSTRACT
We present Iris, a practical, authenticated ﬁle system designed to
support workloads from large enterprises storing data in the cloud
and be resilient against potentially untrustworthy service providers.
As a transparent layer enforcing strong integrity guarantees, Iris
lets an enterprise tenant maintain a large ﬁle system in the cloud.
In Iris, tenants obtain strong assurance not just on data integrity,
but also on data freshness, as well as data retrievability in case of
accidental or adversarial cloud failures.
Iris offers an architecture scalable to many clients (on the or-
der of hundreds or even thousands) issuing operations on the ﬁle
system in parallel. Iris includes new optimization and enterprise-
side caching techniques speciﬁcally designed to overcome the high
network latency typically experienced when accessing cloud stor-
age. Iris also includes novel erasure coding techniques for the ﬁrst
efﬁcient construction of a dynamic Proofs of Retrievability (PoR)
protocol over the entire ﬁle system.
We describe our architecture and experimental results on a pro-
totype version of Iris. Iris achieves end-to-end throughput of up
to 260MB per second for 100 clients issuing simultaneous requests
on the ﬁle system. (This limit is dictated by the available network
bandwidth and maximum hard drive throughput.) We demonstrate
that strong integrity protection in the cloud can be achieved with
minimal performance degradation.
Introduction
1.
Organizations that embrace cloud computing outsource massive
amounts of data, as well as workloads to external cloud providers.
Cost savings, lower management overhead, and rapid elasticity are
just some of the attractions of the cloud.
But cloud computing entails a sacriﬁce of control. Tenants give
up conﬁguration and management oversight of the infrastructure
∗
This research was mostly performed while visiting RSA Labora-
tories. Partially supported by an NSF Graduate Research Fellow-
ship under Grant No. DGE-0946797 and a DoD National Defense
Science and Engineering Graduate Fellowship.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
229
that contains their data and computing resources.
In cloud stor-
age systems today, for example, tenants can only discover corrup-
tion or loss of their data (particularly infrequently accessed data) if
their service providers faithfully report failures or security lapses—
or when a system failure occurs. This integrity-measurement gap
creates business risk and complicates compliance with regulatory
requirements.
We propose a cloud-oriented authenticated ﬁle system called Iris
that gives tenants efﬁcient, comprehensive, and real-time data-integrity
veriﬁcation. The Iris system enables an enterprise tenant—or an
auditor acting on the tenant’s behalf—to verify the integrity and
freshness of any data retrieved from the ﬁle system while perform-
ing typical ﬁle system operations. Data integrity ensures that data
has not been accidentally modiﬁed or corrupted, while freshness
ensures that the latest version of the data is always retrieved (and
thus prevents rollback attacks reverting the ﬁle system state to a
previous version). Moreover, tenants in Iris can efﬁciently audit the
cloud provider on a regular basis and obtain continuous guarantees
about the correctness and availability of the entire ﬁle system.
Motivating scenario We envision a scenario in which a large
enterprise migrates its internal distributed ﬁle system to a cloud
storage service. An important requirement for our system is that
enterprise users (called herein clients) perform the same ﬁle sys-
tem operations as they typically do (e.g., ﬁle read, write, update,
and delete operations, creation and removal of directories) without
modifying applications running on user machines. The slowdown
in operation latency should be small enough to be unnoticed by
users even when a large number of clients (on the order of hun-
dreds and even thousands) issue operations on the ﬁle system in
parallel.
Design goals in Iris Iris aims to support outsourcing of enterprise-
class ﬁle systems to the cloud seamlessly and with minor perfor-
mance degradation. Thus the design goals of Iris stem from the
most common needs of enterprise-class tenants:
- Efﬁciency: Cloud ﬁle systems need to achieve throughputs close
to those offered by local ﬁle systems under thousands of operations
issued concurrently by many clients. Individual ﬁle system opera-
tion latency overhead should also be minimal.
- Scalability: A cloud ﬁle system should be scalable to large en-
terprise ﬁle systems under a variety of workloads with potentially
very sensitive performance requirements. The system should also
be scalable to multiple clients issuing operations on the ﬁle system
in parallel.
- Transparency: Transparency and backwards compatibility with
existing ﬁle system interfaces is important to facilitate migration to
the cloud seamlessly.
- Strong integrity protection: Data and ﬁle system meta-data re-
trieved from the cloud need to be both authentic and fresh. Ten-
ants’ ability to verify continuously the integrity and availability of
their data with minimal bandwidth and computation is a desirable
feature, as well.
Contributions of Iris
In more detail, the key technical contributions and novel elements
in Iris are:
- Authenticated ﬁle system design: The ﬁrst contribution of Iris
is to provide data integrity and freshness for an enterprise-class
ﬁle system in an efﬁcient way. To that end, we design a balanced
Merkle-tree data structure that authenticates both ﬁle system data
and meta-data blocks. The distinctive features of our data structure
design compared to other authenticated ﬁle systems is that it efﬁ-
ciently supports updates from multiple clients in parallel (without
blocking) and it handles all existing ﬁle system operations (includ-
ing delete, move and truncate) with minimal overhead. Iris further
implements many optimizations for typical ﬁle system workloads
(e.g., those involving sequential ﬁle accesses).
In addition, Iris is designed to overcome the main economic
barrier in migrating storage to the cloud: the impact of high net-
work latency.
Iris implements novel caching techniques locally,
within the enterprise trust boundary. A lightweight (possibly dis-
tributed) trusted entity called the portal mediates ﬁle system oper-
ations passing between the enterprise clients and cloud and caches
most recently accessed blocks. We develop techniques to cache
the authentication information (nodes of the Merkle tree), handle
dependencies among nodes, and preserve Merkle tree consistency
when multiple clients simultaneously access nodes from the (par-
tially cached) data structure.
- Continuous auditing of ﬁle system correctness (PoR): Iris pro-
vides the ﬁrst construction for dynamic Proofs of Retreivability
(PoR) [18]; it enables an enterprise tenant to continuously monitor
the operation of the cloud storage service and obtain strong guaran-
tees about the correctness and availability of the entire ﬁle system.
With a PoR, a tenant can verify the correctness and availability of
large data collection stored in the cloud with low computation and
bandwidth cost. While previous PoR protocols are designed for
static data (e.g., archival ﬁles), our protocol is the ﬁrst to efﬁciently
support dynamic PoR protocols over the entire ﬁle system. One of
the key innovations in Iris is the design of a sparse randomized era-
sure code over the ﬁle system data and metadata. The new erasure
code is speciﬁcally crafted to hide the code parity structure (typi-
cally revealed by other codes during ﬁle updates) and be resilient
against a potentially adversarial cloud. It enables recovery when
corruptions are detected through auditing.
- End-to-end design and implementation: One of our main con-
tributions is the end-to-end design and full implementation of Iris
consisting of 25,000 lines of code. We show through our perfor-
mance evaluation that the caching mechanism in Iris is effective in
achieving low latency for ﬁle system operations (similar to LAN la-
tencies). Moreover, Iris achieves high throughput (up to 260MB for
100 clients issuing simultaneous requests on the ﬁle system in our
local testbed), with the bottleneck given by the available network
bandwidth and hard drive throughput. Finally, we demonstrate that
the overall cost of adding strong integrity protection to Iris is mini-
mal.
2. Related Work
File systems with integrity support: Early cryptographic ﬁle sys-
tems were designed to protect data conﬁdentiality [6] and the in-
230
tegrity of data [29] in local storage. Later cryptographic networked
ﬁle systems provided different integrity guarantees. TCFS [8] and
SNAD [23] provide data integrity by storing a hash for each ﬁle
data block. A number of systems construct a Merkle tree over ﬁles
in order to authenticate ﬁle blocks more efﬁciently (e.g., [14, 13,
19, 4, 24, 25]).
Many cryptographic ﬁle systems to date provide data integrity,
but do not authenticate the ﬁle system directory structure (or meta-
data), e.g., [19, 24, 25]. Others, while authenticating both ﬁle sys-
tem data and meta-data, do not provide strong freshness guarantees.
SiRiUS [16] does not ensure data freshness, but only partial meta-
data freshness by periodically requiring clients to sign meta-data
entries. SUNDR [21] implements a property called “fork consis-
tency” that detects freshness violations only when clients commu-
nicate out of band. More recently, SPORC [12] supports the build-
ing of collaborative cloud applications, enabling clients to recover
from malicious forks performed by untrusted cloud servers. De-
pot [22] reconciles malicious forks even in the presence of faulty
clients.
To the best of our knowledge, few cryptographic ﬁle systems
provide freshness of both ﬁle system data and meta-data. SFSRO [14]
and Cepheus [13] build a Merkle tree over the ﬁle system directory
tree. While this approach efﬁciently supports ﬁle system operations
like moving or deletion of entire directories, it results in an unbal-
anced authentication data structure and thus has a high authentica-
tion cost for directories with many entries. Athos [17] constructs
a balanced data structure that maps the directory tree of the ﬁle
system in a set of node relations represented as a skip list. Athos
abstracts away the hierarchical structure of the directory tree, how-
ever, and doesn’t provide efﬁcient support for some existing ﬁle
system operations, e.g., garbage collection. Moreover, its primary,
prototyped design handles only a single client. FARSITE [4] is a
peer-to-peer storage system that uses a distributed directory group
to maintain meta-data information. Meta-data freshness is guaran-
teed when more than two thirds of the directory group members are
correct. Data freshness is provided by storing hashes of ﬁle Merkle
trees in the directory group.
Other systems provide data integrity guarantees for key-value
stores. Venus [28] implements strong consistency semantics for
a key-value store with malicious storage in the back-end. Cloud-
Proof [26] provides a mechanism for clients to verify the integrity
and freshness, as well as other properties of cloud-stored data.
PoRs/PDPs: A Proof of Retrievability (PoR) [18] is a challenge-
response protocol that enables a cloud provider to demonstrate to
a client that a ﬁle is retrievable, i.e., recoverable without any loss
or corruption. Proofs of data possession (PDP) [5] are related pro-
tocols that only detect a large amount of corruption in outsourced
data. Most existing PDP [5] and PoR [18, 27, 7, 10] protocols are
designed for static data, i.e., infrequently modiﬁed data.
Dynamic PDP protocols have been proposed by Erway et al. [11],
but they were not designed to handle typical ﬁle system operations.
For instance, Erway et al. [11] support operations like insertion in
the middle of a ﬁle, but do not efﬁciently support moving and delet-
ing entire ﬁles or directories. The CS2 system [20] designs and im-
plements an efﬁcient dynamic PDP protocol, as well as techniques
for searching over encrypted data.
Several papers ([30] and [31]) claim to construct dynamic PoRs,
but in fact only provide dynamic PDP schemes. To the best of our
knowledge, designing efﬁcient dynamic PoR protocols is extremely
challenging and has stood as an open problem in the community.
3. System model and overview
Iris is designed as an enterprise ﬁle system using back-end cloud
storage. Clients in Iris (enterprise users) issue ﬁle system oper-
ations intermediated by Iris and relayed to the public cloud. An
important design consideration is that heavy caching on the enter-
prise side is strictly necessary. There are several reasons for this.
First, if local caching is not performed, the cost of network trans-
fer to and from the cloud will far outweigh any storage costs sav-
ings ([9] points to the extremely high cost of network transfer).
Second, without local caching individual operation latency will be