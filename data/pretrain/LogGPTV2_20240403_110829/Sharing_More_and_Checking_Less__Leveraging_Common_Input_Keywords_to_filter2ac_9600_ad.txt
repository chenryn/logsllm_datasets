2
14
R/XR/WNR 19
9
AC/G/W
2
A/T
5
DIR/DSR
C1/M2
2
2
39
192M ARM32 (LE)
105M ARM32 (LE)
60M ARM32 (LE)
123M MIPS32 (LE)
64M MIPS32 (LE)
700M ARM32 (LE)
38M
12M
5M
8M
12M
60M
135M 1,244M 2
5
10
3
12
3
0
33
7 Evaluation
Netgear
Tenda
Type Bug IDs
Device Series
PSV-2020-0267
R7000/R7000P BoF CVE-2020-28373
R6400v2
XR300
CI
CI
W20E
G1/G3
AC15/AC18
IAC 1 unassigned
CI
CI
CI
CI
CI
Ksrc
Service
HTML HTTP
XML
UPnP
CNVD-2020-15102 HTML+ HTTP
CNVD-2020-28091 HTML+ HTTP
PSV-2020-0277
HTML HTTP
HTTP
CNVD-2019-22866 JS
CNVD-2019-22867 JS
HTTP
CNVD-2019-22869 HTML HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HTTP
HNAP
HNAP
HNAP
HNAP
HNAP
HNAP
HTTP
HNAP
HTTP
HTTP
HTTP
3
JS
CNVD-2020-46058 JS
CNVD-2020-46059 JS
CNVD-2020-29725 JS
CNVD-2020-40766 JS
CNVD-2020-40767 JS
CNVD-2020-40768 JS
CNVD-2020-28089 JS
CNVD-2020-28090 JS
1 unassigned
JS
JS
CVE-2019-7388
JS
CVE-2019-7389
JS
CVE-2019-7390
JS
CVE-2019-8392
XML
CVE-2019-8312
CVE-2019-8314
XML
XML
CVE-2019-8316
XML
CVE-2019-8317
XML
CVE-2019-8318
XML
CVE-2019-8316
JS
CNVD-2020-23845 XML
CVE-2019-9117
CVE-2019-9118
CVE-2019-9119
33
JS
JS
JS
3
T10
TOTOLink A950RG
DIR 823G
IAC
DIR 878
CI
D-Link
DIR 878 882
IAC 1 unassigned
CI
Motorola
C1 M2
Total
CI
3
We evaluate SaTC on real-world embedded systems to answer
the following research questions:
• Q1: Can SaTC ﬁnd real-world vulnerabilities? How effec-
tive is it compared to the state-of-the-art tool? (§7.1)
• Q2: Can SaTC accurately detect the input keywords? (§7.2)
• Q3: How efﬁcient and accurate is our taint analysis? (§7.3)
Dataset. To evaluate our approach, we selected six major
IoT vendors that have provided their device ﬁrmware online,
speciﬁcally, Netgear, D-Link, Tenda, TOTOLink, Motorola
and Axis. As shown in Table 3, we eventually collected 39
ﬁrmware samples from 14 series, including 37 routers and 2
cameras. Among the samples, 32 adopt the ARM32 architec-
ture, while another seven use the MIPS32 architecture. On
average, each ﬁrmware is 26 megabytes and totally SaTC has
processed 1,024 megabytes.
Existing Tool. We compared our tool with KARONTE [34],
the state-of-the-art static bug-hunter for embedded systems.
It monitors the interactions between multiple binaries in the
ﬁrmware back-end, and utilizes taint analysis to track data-
ﬂow between binaries to detect vulnerabilities.
Bug Conﬁrmation. Each alert produced by SaTC contains
the call trace from the start point to the sink function, and the
corresponding input keywords. We distinguish true positives
from false positives according to whether the path is reachable
in the back-end. If we can manually generate the proof-of-
crash (PoC) based on the alert and verify it on the physical
device, we consider the true positive as a real bug.
7.1 Real-world Vulnerabilities
As shown in Table 4, SaTC detected 33 previously unknown
bugs, and at the time of paper writing, 30 of them have been
conﬁrmed by their developers. 25 bugs are command injec-
tion vulnerabilities; two of them are buffer overﬂow bugs;
the other six belong to incorrect access control which could
result in privacy disclosure. As we deﬁne more sinks related
to system-like functions, our tool found more command in-
jection vulnerabilities than other types. 30 bugs have assigned
CVE/CNVD/PSV numbers due to their severe security conse-
quence, while developers are still actively inspecting another
one. The last column shows the services where SaTC detects
vulnerabilities. Other than the common HTTP protocol, SaTC
also supports other services such as UPnP and HNAP. These
results show that SaTC can effectively ﬁnd common vulnera-
bilities in various network services of embedded systems.
Comparison with KARONTE. We compared SaTC with
the state-of-the-art static analysis tool KARONTE on discov-
ering vulnerabilities.
We use the dataset1 and experiment result released by
KARONTE, which includes four major IoT vendors (i.e., Net-
gear, TP-link, D-Link, and Tenda) and totally 49 ﬁrmware
samples. Table 5 shows our evaluation results. SaTC
raised 2,084 alerts and out of them, 683 are true positives;
KARONTE produced 74 alerts, among which 46 were true
positives. The result shows that SaTC can ﬁnd more true pos-
itives than KARONTE. On the design level, SaTC takes a
similar method as KARONTE, which both rely on common
strings to connect different components of the IoT devices:
KARONTE uses common strings between multiple back-end
binaries to connect data ﬂow, while SaTC identiﬁes common
1 https://github.com/ucsb-seclab/karonte#dataset
312    30th USENIX Security Symposium
USENIX Association
Table 5: Compared with KARONTE on its dataset. For each
vendor we report the device series, the number of ﬁrmware samples,
the average analysis time (hour), the total number of alerts (#Alert)
and the total number of true positives (#TP).
Vendor
Device Series
R/XR/WNR
Netgear
D-Link
TP-Link TD/WA/WR/TX/KC
Tenda
DIR/DWR/DCS
AC/WH/FH
KARONTE
#Samples #Alerts #TP Time
23 17:13 h
15 14:09 h
1:30 h
2
6
1:01 h
17
9
16
7
36
24
2
12
SaTC
#Alerts #TP Time
1,901
32
7
144
537 16:47 h
1:57 h
22
4:13 h
2
122 12:19 h
Total
-
49
74
46 33:57 h
2,084
683 35:16 h
Table 6: Compared with KARONTE. We list the analysis time
(min), the number of alerts (#Alert) and true positives (#TP).
Compare
AC15 AC18 W20E 878 R6400 R7000 XR300
SaTC
KARONTE
#Alert
#TP
Time
# Alert
# TP
Time
10
4
573
17
0
222
10
4
576
17
0
210
4
2
55
0
0
153
22
16
502
0
0
214
4
4
1,823
0
0
2,880
5
2
694
0
0
2,880
10
4
1,377
0
0
2,880
identiﬁers between the front-end and the back-end to locate
entries of user input. However, the difference in the ﬁnal re-
sult is signiﬁcant. As SaTC can analyze front-end ﬁles to
reveal input entries in the back-end, we can signiﬁcantly ﬁnd
more analysis points for taint analysis and thus improve the
bug-detection capacity. In contrast, common strings identiﬁed
by KARONTE in back-end binaries cannot guarantee to be
related to the user input. Therefore, KARONTE suffers from
inefﬁcient analysis and misses a lot of bugs.
We further selected seven new ﬁrmware samples from
three vendors, speciﬁcally, Tenda, D-Link, and Netgear, to
conﬁrm the advantage of SaTC on more IoT devices. We
ran KARONTE and SaTC until it completes the analysis or
time out (2 days), and set SaTC to only detect command in-
jection vulnerability. The result is given in Table 6. SaTC
successfully found 36 true positives, while KARONTE could
not ﬁnd any true positive in any samples. For AC15 and
AC18, KARONTE provided 17 paths to the sink addresses.
We manually veriﬁed that all the warnings are false posi-
tives. For W20E, KARONTE found no potential vulnerability.
KARONTE did not ﬁnd any border binary in D-Link DIR
878 and thus could not raise any alert. For R6400, R7000
and XR300, KARONTE could not ﬁnish analysis within 48
hours. We found it hangs while analyzing a basic block and
thus found no vulnerability. These results indicate that SaTC
outperforms KARONTE on discovering vulnerabilities in
embedded systems.
We further manually checked the alerts that are only found
by our tool (in Table 5) and identiﬁed the underlying reasons
that KARONTE missed them. Firstly, SaTC and KARONTE
adopt different features to identify border binaries. Speciﬁ-
cally, KARONTE uses the features of instructions and func-
tions to identify border binaries, while SaTC considers the
string extracted from the front-end ﬁles instead. These differ-
ent heuristics cause KARONTE and SaTC to select different
border binaries. For example, in Tenda AC series, SaTC se-
lects httpd as the border binary while KARONTE selects
app_data_center. SaTC raises 144 alerts, which are missed
by KARONTE. Secondly, SaTC and KARONTE identify dif-
ferent entry points. KARONTE focuses on the shared data
between binaries, while SaTC focuses on the entry points of
the user input. For example, SaTC ﬁnds the keyword ed_url
in the border binary httpd of Netgear R6400 that labels the
user input, which cannot be found by KARONTE and re-
sults in a false negative. As another example, for the keyword