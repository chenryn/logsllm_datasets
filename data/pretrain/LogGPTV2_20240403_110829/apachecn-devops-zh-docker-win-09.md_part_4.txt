要为用户`elton`将映像推送到名为`private-app`的存储库，我需要在存储库名称中用完整的 DTR 域标记它。我的 DTR 实例在`dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com`运行，所以我需要使用的完整映像名称是`dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app`:
```
docker image tag sixeyed/file-echo:nanoserver-1809 `
 dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app
```
这是一个私有存储库，因此只能由用户`elton`访问。DTR 提供了与任何其他 Docker 注册表相同的 API，因此我需要使用`docker login`命令登录，指定 DTR 域作为注册表地址:
```
> docker login dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com
Username: elton
Password:
Login Succeeded
> docker image push dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app
The push refers to repository [dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app]
2f2b0ced10a1: Pushed
d3b13b9870f8: Pushed
81ab83c18cd9: Pushed
cc38bf58dad3: Pushed
af34821b76eb: Pushed
16575d9447bd: Pushing [==================================================>]  52.74kB
0e5e668fa837: Pushing [==================================================>]  52.74kB
3ec5dbbe3201: Pushing [==================================================>]  1.191MB
1e88b250839e: Pushing [==================================================>]  52.74kB
64cb5a75a70c: Pushing [>                                                  ]  2.703MB/143MB
eec13ab694a4: Waiting
37c182b75172: Waiting
...
...
```
如果我将存储库公开，任何可以访问 DTR 的人都可以提取映像，但是这是一个用户拥有的存储库，因此只有`elton`帐户有权推送。
这和 Docker Hub 是一样的，任何人都可以从我的`sixeyed`用户库中拉一张图片，但是只有我可以推它们。对于多个用户需要访问推送映像的共享项目，您可以使用组织。
# 组织和团队
组织支持共享存储库的所有权。组织及其拥有的存储库与拥有存储库权限的用户是分开的。特定用户可能具有管理员访问权限，而其他用户可能具有只读访问权限，特定团队可能具有读写访问权限。
The user and organization model of DTR is the same in the paid subscription tiers of Docker Hub. If you don't need the full production suite of Docker Enterprise but you need private repositories with shared access, you can use Docker Hub.
我已经为书呆子晚餐组织下的书呆子栈的更多组件创建了存储库:
![](img/8a5e090e-42bb-443a-aa48-b0592e29a4b2.png)
我可以授予个人用户或团队对存储库的访问权限。书呆子晚餐行动队是我在 UCP 创建的管理用户群。这些用户可以直接推送映像，因此他们可以读写所有存储库:
![](img/efec642a-563b-4090-80e9-737e9293866a.png)
Nerd 晚餐测试人员团队只需要对存储库的读取权限，因此他们可以在本地提取映像进行测试，但不能将映像推送到注册表:
![](img/d3812ad2-757f-48e7-9a60-ea678de03287.png)
如何在 DTR 组织存储库取决于你。您可以将所有应用存储库放在一个组织下，并为可能在许多项目中使用的共享组件建立一个单独的组织，例如 NATS 和弹性搜索。这意味着共享组件可以由一个专门的团队管理，该团队可以批准更新并确保所有项目都使用相同的版本。项目团队成员拥有读取权限，因此他们总是可以获取最新的共享映像并运行完整的应用栈，但是他们只能将更新推送到他们的项目存储库。
DTR 的权限级别为无、读、读写和管理。它们可以在存储库级别应用于团队或个人用户。DTR 和 UCP 的认证一致但授权模式不同，这意味着开发人员可以完全访问 DTR 的拉和推映像，但可能只能读取 UCP 的运行容器。
在一个成熟的工作流程中，您不会让单个用户推送映像，而是全部自动化。您的初始推送将来自构建映像的 CI 系统，然后您将向映像添加来源层，从促销策略开始。
# DTR 的形象推广策略
许多公司在其注册表中使用多个存储库来存储应用生命周期不同阶段的映像。最简单的例子是一个用于经历不同测试阶段的映像的`nerd-dinner-test/web`存储库，以及一个用于已经被批准生产的映像的书呆子-晚餐-产品/网络存储库。
如果映像符合您指定的标准，DTR 提供了将映像从一个存储库自动复制到另一个存储库的映像推广策略。这为安全软件供应链增加了一个重要环节。配置项流程可以从每次构建中将映像推送到测试存储库，然后 DTR 可以检查映像并将其提升到生产存储库。
您可以根据扫描中发现的漏洞数量、映像标签的内容以及映像中开源组件使用的软件许可证来配置升级规则。我为从`nerd-dinner-test/web`到`nerd-dinner-prod/web`的映像升级配置了一些合理的策略:
![](img/cf81e705-c28b-4049-9b36-131360593401.png)
当我将符合所有标准的映像推送到测试存储库时，它会被 DTR 自动提升到生产存储库:
![](img/2218ea06-00d5-4f85-ab96-a2ce137c079f.png)
将您的生产存储库配置为没有最终用户可以直接推送到它们，这意味着映像只能通过自动化过程到达那里，例如通过 DTR 的推广。
Docker Trusted Registry 为您提供了构建安全交付管道所需的所有组件，但它并未强制要求任何特定的流程或技术。来自 DTR 的事件可以触发网络挂钩，这意味着您可以将您的注册表与几乎任何配置项系统集成。触发 webhook 的一个事件是映像升级，您可以使用它来触发新映像的自动签名。
# 映像签名和内容信任
DTR 利用 UCP 管理的客户证书，用数字签名对映像进行签名，该数字签名可以追踪到一个已知的用户账户。用户从 UCP 下载一个客户端包，其中包含他们的客户端证书的公钥和私钥，由 Docker CLI 使用。
您可以对其他系统的用户帐户使用相同的方法，这样您就可以为您的配置项服务创建一个帐户，并设置存储库，以便只有配置项帐户可以访问推送。这使您可以将映像签名集成到您的安全交付管道中，应用来自配置项流程的签名，并使用该签名来实现内容信任。
您可以使用环境变量打开 Docker 内容信任，当您将映像推送到注册表时，Docker 将使用客户端包中的密钥对它们进行签名。内容信任仅适用于特定的映像标签，而不适用于默认的`latest`标签，因为签名是针对标签存储的。
我可以将`v2`标记添加到我的私人映像中，在 PowerShell 会话中启用内容信任，并将标记的映像推送到 DTR:
```
> docker image tag `
    dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app `
    dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app:v2
> $env:DOCKER_CONTENT_TRUST=1
> >docker image push dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app:v2The push refers to repository [dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app]
2f2b0ced10a1: Layer already exists
...
v2: digest: sha256:4c830828723a89e7df25a1f6b66077c1ed09e5f99c992b5b5fbe5d3f1c6445f2 size: 3023
Signing and pushing trust metadata
Enter passphrase for root key with ID aa2544a:
Enter passphrase for new repository key with ID 2ef6158:
Repeat passphrase for new repository key with ID 2ef6158:
Finished initializing "dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app"
Successfully signed dtrapp-dow2e-hvfz.centralus.cloudapp.azure.com/elton/private-app:v2
```