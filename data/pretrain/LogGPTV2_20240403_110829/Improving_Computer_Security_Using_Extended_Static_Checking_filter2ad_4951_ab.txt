Figure 2. Eau Claire’s function speciﬁcation syntax.
2.2 Speciﬁcations
Eau Claire’s speciﬁcation language is modeled after
ESC/Modula3’s speciﬁcation language [6]. At its heart
is the concept of procedural abstraction, the idea that a
set of operations can be grouped, named, and invoked as
though they were a single operation. In order for proce-
dural abstraction to be useful, there must be a contract
between a procedure’s caller and the procedure’s imple-
mentation. The contract tells the caller what it must pro-
vide to the procedure and what to expect from the pro-
cedure in return. The contract tells the procedure what it
should expect from the caller and what it must provide in
return. Most programming languages enforce some as-
pects of this contract at compile time. For example, ISO
C requires that when a function is declared with a pro-
totype, the formal and actual function arguments must
agree in both number and type [13].
Eau Claire’s function speciﬁcation language allows
the contract between callers and implementations to be
further elaborated. As illustrated in Figure 2, a function
speciﬁcation may contain zero or more of the following:
Requires: requires R. The function precondition.
Eau Claire checks that all callers ensure that the
expression R evaluates to true before the function
is invoked. If a caller does not guarantee that the
precondition is met, Eau Claire will include the as-
sociated violation message in its output along with
the textual location of the call. When it checks the
speciﬁed function, Eau Claire assumes that R eval-
uates to true.
Modiﬁes: modifies V . The list of variables that may
be modiﬁed by the implementation. Eau Claire ac-
counts for the side effects that a function call might
have upon the environment of the caller by assum-
ing that all variables on the list V will be modi-
ﬁed in accordance with the function’s postcondi-
tion. When checking the speciﬁed function’s im-
plementation, Eau Claire would ideally check to
make sure that an implementation did not alter any
state not on the list, but it does not do so currently.
Ensures: ensures  . The function postcondition.
Eau Claire checks that the implementation causes
the expression  to evaluate to true when the func-
tion returns. If there are cases in which the postcon-
dition may not be met, Eau Claire will include the
associated violation message in its output. When
evaluating callers, Eau Claire assumes that  eval-
uates to true when the function returns.
In order to make function speciﬁcations easier to
read, a function may have multiple requires entries,
in which case the function’s precondition is equivalent
to the conjunction of the precondition expressions. The
same is true for ensures and the function’s postcondi-
tion. If a speciﬁcation has multiple modifies entries,
the list of variables that may be modiﬁed is the union of
the variable lists.
As much as possible, the semantics of speciﬁcation
expressions are the same as the semantics of C expres-
sions. A C expression is considered true if it evaluates to
an integer other than zero. A C expression is considered
false if it evaluates to zero. Speciﬁcation expressions
may contain variables, logical operators, comparison op-
erators, arithmetic operators, pointer indirection, struc-
ture selection, and array selection. Speciﬁcation expres-
sions may not contain function calls or operators that can
change the value of a variable. Assignment is not per-
mitted, for example. Eau Claire also supports a number
of special constructs in speciﬁcation expressions that do
not exist in C, as described in Table 2.
In addition to function speciﬁcations, Eau Claire al-
lows for the declaration of speciﬁcation variables. Spec-
iﬁcation variables are not concrete: they do not affect a
program’s compilation or execution, and therefore they
cannot appear outside of speciﬁcations. Speciﬁcation
variables are useful for reasoning about program prop-
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
Construct
$final
$return
$valid
$length
$string
Description
In many cases it is useful to refer to both the initial value and the ﬁnal value of a variable
in a postcondition. In order to remain consistent with precondition expressions, an un-
adorned variable in a postcondition refers to the variable in its initial state. The expression
$final(v) refers to the variable v in its ﬁnal state.
In a postcondition the expression $return represents the return value of the function.
The expression $valid(v) evaluates to 1 if the pointer or array variable v is non-null
and points to allocated storage. It evaluates to 0 otherwise.
The expression $length(v) is equal to the number of allocated elements pointed to by
the array or pointer variable v.
The expression $string(s) evaluates to 1 if $valid(s) evaluates to 1 and if a null
terminator occupies at least one of the allocated locations pointed to by s. It evaluates to 0
otherwise.
$string length The expression $string length(s) is equal to the least index of the pointer or array
$static
exists
forall
variable s occupied by the value 0.
An expression of the form $static(s) evaluates to true only if s is a pointer to a stati-
cally allocated object such as a string constant.
An expression of the form exists (variable list) (expression) evaluates
to true if the inner expression is non-zero for at least one combination of variable values.
An expression of the form forall (variable list) (expression) evaluates
to true only if the inner expression is non-zero for all combinations of variable values.
Table 2. In addition to standard C expressions, Eau Claire provides special constructs for use
in speciﬁcations.
erties that may not be explicitly represented by the pro-
gram’s concrete variables.
2.3 Translating C into Guarded Commands
At ﬁrst blush,
translating C into Guarded Com-
mands might appear to be challenging because C in-
cludes function calls, data structures, pointers, and side
effects, none of which can be represented directly in
Eau Claire’s Guarded Command language. While it is
true that these topics present challenges, the process of
translating C into Guarded Commands is further com-
plicated by ambiguities regarding the deﬁnition of the C
language [13, 24].
First, there is no single authoritative deﬁnition of C.
Major C dialects include standard C (also known as ISO
C or ANSI C), traditional C (sometimes called K&R C),
and clean C (a subset of C++). Naturally, implemen-
tations vary in the degree to which they adhere to one
standard or another.
Second, all deﬁnitions of C require an implementa-
tion to prescribe its own meaning for certain constructs.
For example, it is the responsibility of the implementa-
tion to deﬁne the range of values that can be represented
by the integral types.
Third, the behavior of some constructs is not fully
speciﬁed—the language deﬁnition does not always im-
pose a requirement on the implementation. For exam-
ple, the order of evaluation of expressions is largely un-
constrained. An implementation could evaluate the ex-
pression (x * y * z) by ﬁrst evaluating z, then x,
then y, and then multiplying.
Finally, the behavior resulting from some operations
is completely undeﬁned. For example, accessing unini-
tialized memory could result in the termination of the
program or it could result in no ill-effects whatsoever.
The same is true of dereferencing a null pointer or in-
dexing an array outside of its bounds.
The extended static checking philosophy allows
Eau Claire to give up on ﬁnding all of the potential errors
in a program and instead concentrate on ﬁnding the most
likely and most important errors. Letting go of sound-
ness allows us to make the important assumption that
the programmer is not intentionally trying to hide vul-
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
nerabilities from the tool. For that reason, we treat all
translation dilemmas in the same manner: Eau Claire
interprets C programs as though they were written by a
competent programmer who is interested in creating a
correct and portable program. Table 3 lists C language
constructs and describes how Eau Claire translates them.
The purpose of Eau Claire is not to determine how
closely the program in question adheres to any particular
standard (other than the speciﬁed security properties) or
to measure the program’s semantic correctness. For this
reason, Eau Claire assumes that undeﬁned operations do
not occur. This assumption limits the types of security
ﬂaws that Eau Claire can detect. Imagine a function that
modiﬁes a variable more than once between successive
sequence points.1 Under the deﬁnition of ISO C, the
function is performing an illegal operation. An ISO C
compiler would be within its rights to cause the variable
take on an arbitrary value. Eau Claire will not consider
this possibility, instead assuming that the modiﬁcations
will take place in the order in which they appear. Miss-
ing this type of only remotely feasible ﬂaw is a good
trade-off in exchange for not tormenting the user with a
list of every possible location of an undeﬁned operation.
to assume that any two structure ﬁeld names referred to
the same ﬁeld within the structure or that any two data
type names were equivalent.
A correct but impractical veriﬁcation condition could
be extracted from the augmented guarded command
simply by computing its weakest precondition accord-
ing to the equations given in Section 2.1, but Flanagan
and Saxe point out that doing so can result in a formula
that is exponentially larger than the Guarded Command
program that it represents [11]. This would disallow the
checking of large C functions. Instead Eau Claire imple-
ments the two-stage generation algorithm that Flanagan
and Saxe recommend, which produces a formula that is
often linear and in the worst case quadratic in the size of
the Guarded Command program it represents.
3 Experimental Results
This section presents two real-world security vulner-
abilities and shows how Eau Claire can be used to ﬁnd
them. The examples illustrate some of the errors that
Eau Claire is able to detect, but Eau Claire is by no
means limited to these types of vulnerabilities.
2.4 Translating Guarded Commands into a
veriﬁcation condition
3.1 RSAREF buffer overﬂow
After Eau Claire has translated a function into a
guarded command, it augments the command using the
function’s speciﬁcation. Given the function F with
guarded command translation gcF  and requires and
ensures conditions R and  respectively, the augmented
guarded command for the function is
assume(R);
gcF ;
assert( )
In addition to the requires expressions provided by
the user (if any), Eau Claire adds to R an expression
declaring that all of the ﬁelds for each type of structure
or union used in the function be unique. A similar ex-
pression declares that all data types used in the function
are unique. This is necessary because Eau Claire uses
arrays to represent structure ﬁelds and pointer derefer-
encing. Without them, the theorem prover would be free
1ISO C deﬁnes a sequence point to exist at the completion of all
expressions that are not part of a larger expression. A program may
only modify a variable once between two successive sequence points,
so the result of evaluating an expression like ++x++ is undeﬁned.
In 1994, RSA Data Security released RSAREF2, a
reference implementation of the RSA and DES encryp-
tion algorithms, the MD2 and MD5 message digest algo-
rithms, and a number of other widely used cryptographic
tools. Because RSAREF2 is free for non-commercial
purposes, it was quickly adopted for use in a number
of popular Internet applications including PGP (a set of
programs for securing email messages, ﬁles, and net-
work connections), SSH (a secure remote login pro-
gram), and Apache mod ssl (a module that enables the
Apache web server to communicate using the Secure
Socket Layer (SSL) protocol).
In 1999, Solino and Richarte discovered buffer over-
ﬂow vulnerabilities in RSAREF2 [3]. The vulnerabil-
ities made it possible for an attacker to overwrite the
call stack and thereby execute arbitrary code by ex-
ploiting RSAREF2’s RSA implementation. Speciﬁcally,
an overﬂow can occur when the library attempts to en-
crypt or decrypt blocks that are larger than the maximum
block size compiled into the program. The buffer over-
ﬂow happens inside the standard library function mem-
cpy.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
Construct
Expressions
Operations
Type sizes
Floating
point types
Arrays
Pointers
Structures
and Unions
Conditionals
Loops
Flow control
Description
For the purpose of determining side-effects, Eau Claire assumes that expressions are eval-
uated from left to right. It supports arithmetic and logical operator expressions, negation,
and conditional expressions.
Eau Claire supports the integral operations addition, subtraction, multiplication, and divi-
sion. It does not support bitwise manipulation, and it assumes that arithmetic overﬂow does
not occur.
Eau Claire allows the user to deﬁne the number of bytes used to represent the integral types
and the number of bytes used to represent pointers.
Eau Claire does not model ﬂoating point values or operations. Converting a ﬂoating point
number into an integral value results in the integral value being unknown.
Eau Claire models an array as a single variable rather than as a collection of dynamically
named variables. Eau Claire thereby assumes that arrays do not overlap.
In order to account for aliasing, Eau Claire models a pointer dereference operation as an
index into the pointer’s type [23]. In other words, dereferencing a pointer p of type T is
modeled as T[p]. For the purpose of evaluating Boolean expressions, Eau Claire assumes
that NULL is equal to zero.