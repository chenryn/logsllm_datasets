unsigned char d_type; /* type of file */
char d_name[256]; /* filename */
};
POSIX 段 d name段内单文件。段
的或 Linux 的。将程或 POSIX 
的程 d name。
程调 readdir()文件们们的
文件或读时 readdir()  NULL。
时 readdir()  NULL。读文件程
调 readdir() 将 errno 设 0 errno。
readdir() 设的 errno  EBADF效的 dir。对程
 NULL 读。
7.2.4.2 关闭目录流
 closedir()  opendir() 的
#include 
#include 
int closedir (DIR *dir);
调 closedir()  dir 的的文件
 0。时 -1设 errno  EBADF能的
 dir 的。
实 find file in dir() readdir() 给
文件。文件存 0。零
/*
* find_file_in_dir - searches the directory
’path’ for a
* file named ’file’.
*
– 233 –
 7 
文件理
* Returns 0 if ’file’ exists in ’path’ and a
nonzero
* value otherwise.
*/
int find_file_in_dir (const char *path, const
char *file)
{
struct dirent *entry;
int ret = 1;
DIR *dir;
dir = opendir (path);
errno = 0;
while ((entry = readdir (dir)) != NULL) {
if (!strcmp(entry->d_name, file)) {
ret = 0;
break;
}
}
if (errno && !entry)
perror (”readdir”);
closedir (dir);
return ret;
}
7.2.4.3 用于读取目录内容的系统调用
的读内的 C 提的 POSIX 。
内调 readdir()  getdents()内更给
出调
#include 
#include 
#include 
– 234 –
 7 
文件理
#include 
#include 
/*
* Not defined for user space: need to
* use the _syscall3( ) macro to access.
*/
int readdir (unsigned int fd, struct dirent
*dirp, unsigned int count);
int getdents (unsigned int fd, struct dirent
*dirp, unsigned int count);
调们。
空间程 C 的调 opendir(), readdir()  closedir()。
7.3 链接
的,  inode 的映射。
单的上（ inode 的
 inode 的的。单 inode（或
单文件以同时 /etc/customs  /var/run/ledger 。
子的映射 inode同文件
的 inode 同的 /etc/customs  /var/run/ledger 同文件
。文件文件的以。的示
的的。或的
。同文件文件。
我们的。文件以零或
。文件 1 文件文件
能或。 0 的文件文件上对的
。文件 0 时文件空。∗进
程文件时文件文件。进程文
件文件。
∗ 0 的文件文件工 fsck 的工作。的
文件然文件。内能文
件空以。文件以。
– 235 –
 7 
文件理
Linux 内进理。文件
的实的。文件 0 时文件
。
文件文件 inode 的映射
时的更的。文件我们将
。
7.3.1 硬链接
作的 Unix 调 link()  POSIX 我们以
link() 存文件的新
#include 
int link (const char *oldpath, const char
*newpath);
调 link() 存的文件 oldpath  nwepath 的新
 0。 oldpath  newpath 同文件实上我们
” ” 。
时调 -1设 errno
EACCESS
调的进程对 oldpath 的或
对 newpath 的写。
EEXIST
newpath 存 link() 将存的。
EFAULT
效的 oldpath 或 newpath 。
EIO
内 I/O （。
ELOOP
 oldpath 或 newpath 时。
EMLINK
oldpath 的 inode 的。
ENAMETOOLONG oldpath 或 newpath 。
ENOENT
oldpath 或 newpath 存。
ENOMEM
内存。
ENOSPC
 newpath 的设备新的空间。
ENOTDIR
oldpath 或 newpath 。
EPERM
 newpath 的文件新的或 old-
path 。
– 236 –
 7 
文件理
EROFS
newpath 读文件上。
EXDEV
newpath  oldpath 同文件上。（Linux 单
文件方即能
。
子新 pirate的文件 privateer 同 in-
ode（即同文件 /home/kidd
int ret;
/*
* create a new directory entry,
* ’/home/kidd/privateer’, that points at
* the same inode as ’/home/kidd/pirate’
*/
ret = link (”/home/kidd/privateer”,
/home/kidd/pirate”);
if (ret)
perror (”link”);
7.3.2 符号链接
的 symlinks 或。的相同处
文件的文件的同的
的文件。文件的文件（
的。时内的
（调以”l” 的调 lstat()操作
文件。同文件的
文件。
能相对或绝对。以的的
”.” 或的”..” 。
的的以能文件。实
上以能存（或存的文
件。空的。时空的的
存的时。
– 237 –
 7 
文件理
的调相
#include 
int symlink (const char *oldpath, const char
*newpath);
调 symlink()  oldpath 的 newpath 0。
时 symlink()  -1设 errno
EACCESS
调的进程对 oldpath 的或对
 newpath 的写。
EEXIST
newpath 存 symlink( ) 将存的。
EFAULT
效的 oldpath 或 newpath 。
EIO
内 I/O  ()。
ELOOP
 oldpath 或 newpath 时。
EMLINK
oldpath 的 inode 的。
ENAMETOOLONG oldpath 或 newpath 。
ENOENT
oldpath 或 newpath 存。
ENOMEM
内存。
ENOSPC
 newpath 的设备新的空间。
ENOTDIR
oldpath 或 newpath 的。
EPERM
 newpath 的文件新的。
EROFS
newpath 读文件上。
以 /home/kidd/pirate 的（相
对 /home/kidd/privateer
int ret;
/*
* create a symbolic link,
* ’/home/kidd/privateer’, that
* points at ’/home/kidd/pirate’
*/
ret = symlink (”/home/kidd/privateer”,
”/home/kidd/pirate”);
– 238 –
 7 
文件理
if (ret)
perror (”symlink”);
7.3.3 解除链接
的操作即文件。提
的调 unlink() 处理
#include 
int unlink (const char *pathname);
调 unlink() 文件 pathname 0。
文件的文件文件。进程文件进程
文件内文件文件。进程文件文件
。
 pathname 文件。
 pathname 文件（设备 FIFO或 socket调
文件文件文件的进程以。
时 unlink()  -1设 errno
EACCESS
调的进程对 pathname 的写或对
pathname 的。
EFAULT
效的 pathname 。
EIO
内 I/O  ()。
EISDIR
pathname 。
ELOOP
 pathname 时。
ENAMETOOLONG pathname 。
ENOENT
pathname 存。
ENOMEM
内存。
ENOTDIR
pathname 的。
EPERM
。
EROFS
pathname 读文件上。
unlink() 。程我们更（” 
”的 rmdir() 。
– 239 –
 7 
文件理
对文件的 C 提 remove()
#include 
int remove (const char *path);
调 remove() 文件 path 0。 path 文件
remove() 调 unlink() path  remove() 调 rmdir()。
时 remove()  -1 errno 以调 unlink()  rmdir() 出的
效。
7.4 复制和移动文件
的文件处理文件,  cp 
mv 实。文件新给文件内的。
文件新的同对文件的将
（同存文件的。文件
的。备的。
7.4.1 复制
然能 Unix 实文件的
或调。 cp 或 GNOME s Nautilus 文件理工实
能。
文件 src  dst 的文件的步
1.  src。
2.  dst存存零。
3. 将 src 读内存。
4. 将写 dst。
5. 操作 src 读写 dst。
6.  dst。
7.  src。
 mkdir() 子的文件
单。
– 240 –
 7 
文件理
7.4.2 移动
操作 Unix 提文件的调。 ANSI C 
文件操作的调 POSIX 对文件操作
#include 
int rename (const char *oldpath, const char
*newpath);
调 rename() 将 oldpath  newpath。文件内 inode
。 oldpath  newpath 同文件∗调将。 mv
工调操作。
时 rename()  0 oldpath 的文件 newpath 。
时调 -1 oldpath 或 newpath设 errno
EACCESS
调的进程对 oldpath 或 newpath 的写或
对 oldpath 或 newpath 的或
oldpath 时对 oldpath 的写。实
 oldpath 时 rename（更新 oldpath
的..。
EBUSY
oldpath 或 newpath 。
EFAULT
效的 oldpath 或 newpath 。
EINVAL
newpath  oldpath  oldpath 
的子。
EISDIR
newpath 存 oldpath 。
ELOOP
 oldpath 或 newpath 时。
EMLINK
oldpath 的或 oldpath 
 newpath 的。
ENAMETOOLONG oldpath 或 newpath 。
ENOENT
oldpath 或 newpath 的存或空的
。
ENOMEM
内空间。
∗然 Linux 设备即们同设备上能将
。
– 241 –
 7 
文件理
ENOSPC
设备空间。
ENOTDIR
oldpath 或 newpath 的（的
或 oldpath  newpath 存。
ENOTEMPTY
newpath 空。
EPERM
的设 (sticky
bit)调进程的效 ID 文件
的 ID进程。
EROFS
文件读。
EXDEV
oldpath  newpath 同文件上。
 7-1 对同文件相的。
表格 7-1 不同类型文件互相移动效果
dst 文件
dst 
dst 
dst 存
src 文件
dst  src 
EISDIR
文件
 dst 
文件
src 
ENOTDIR
  dst  空
 src   
 dst
ENOTEMPTY
 dst 
src 
 dst 
EISDIR
 dst 
src 存
ENOENT
ENOENT
ENOENT
ENOENT
对以上 src  dst 同文件上调
 EXDEV。
7.5 设备节点
设备程设备的文件。程设备
上的 Unix I/O（读写时内以同
– 242 –
 7 
文件理
文件 I/O 的方式处理。内将给设备。设备处理
 I/O 操作。设备提设备程
设备或的。设备 Unix 上件的。
设备 Unix 的处理。对
件同的 read() write()  mmap() 进操作 Unix 
的。
内何设备处理设备
属性设备设备。设备对的设备映射
内。设备的设备对内的设备（原
设备上的 open()  -1 设 errno 
ENODEV。我们的设备存的设备。
7.5.1 特殊设备节点
的 Linux 上的设备。设备 Linux 
的们 Linux ABI 的出的。
空设备 /dev/null设备 1设备 3。设备文件的
 root 读写。内对设备的写。对文
件的读文件（EOF。
零设备 /dev/zero设备 1设备 5。空设备内
对零设备的写。读设备 null 。
满设备 /dev/full设备 1设备 7。零设备读
 null （’\0’。写 ENOSPC 设备满。
设备同的。们对程处理
（满文件。空设备零设备写们
提 I/O 操作。
7.5.2 随机数生成器
内的设备 /dev/random  /dev/urandom。们的设备