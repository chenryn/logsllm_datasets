### 7.2.4.1 目录条目结构

```c
struct dirent {
    unsigned char d_type; /* 文件类型 */
    char d_name[256];     /* 文件名 */
};
```

在 POSIX 中，`d_name` 字段用于存储单个文件的名称。当使用 `readdir()` 函数读取目录时，它会返回一个指向 `dirent` 结构的指针。如果 `readdir()` 返回 `NULL`，则表示已经读取完所有目录项。调用 `readdir()` 之前应将 `errno` 设为 0，以便在 `readdir()` 失败时可以检查 `errno`。如果 `readdir()` 设置 `errno` 为 `EBADF`，则表示传递给它的 `dir` 参数无效。

### 7.2.4.2 关闭目录流

```c
#include <sys/types.h>
#include <dirent.h>

int closedir(DIR *dir);
```

`closedir()` 函数用于关闭由 `opendir()` 打开的目录流。成功时返回 0，失败时返回 -1 并设置 `errno` 为 `EBADF`，表示传递的 `dir` 参数无效。

### 示例：查找目录中的文件

```c
/*
* find_file_in_dir - 在 'path' 目录中搜索名为 'file' 的文件
* 如果 'file' 存在于 'path' 中，则返回 0；否则返回非零值。
*/
int find_file_in_dir(const char *path, const char *file) {
    struct dirent *entry;
    int ret = 1;
    DIR *dir;

    dir = opendir(path);
    if (dir == NULL) {
        perror("opendir");
        return -1;
    }

    errno = 0;
    while ((entry = readdir(dir)) != NULL) {
        if (!strcmp(entry->d_name, file)) {
            ret = 0;
            break;
        }
    }

    if (errno && !entry)
        perror("readdir");

    closedir(dir);
    return ret;
}
```

### 7.2.4.3 用于读取目录内容的系统调用

C 提供了 POSIX 标准的 `readdir()` 函数来读取目录内容。底层实现可能使用 `getdents()` 系统调用来获取目录项。

```c
#include <sys/types.h>
#include <dirent.h>
#include <unistd.h>

int readdir(unsigned int fd, struct dirent *dirp, unsigned int count);
int getdents(unsigned int fd, struct dirent *dirp, unsigned int count);
```

用户空间程序通常使用 `opendir()`, `readdir()` 和 `closedir()` 来处理目录操作。

### 7.3 链接

链接是文件系统中多个路径名到同一个 inode 的映射。每个 inode 可以有多个硬链接。例如，文件 `/etc/customs` 和 `/var/run/ledger` 可以共享同一个 inode，从而成为同一个文件的不同名称。

#### 7.3.1 硬链接

硬链接可以通过 `link()` 函数创建。

```c
#include <unistd.h>

int link(const char *oldpath, const char *newpath);
```

`link()` 函数创建一个新的硬链接 `newpath` 指向 `oldpath` 所指向的文件。成功时返回 0，失败时返回 -1 并设置 `errno`。

- `EACCESS`: 进程没有对 `oldpath` 或 `newpath` 的适当权限。
- `EEXIST`: `newpath` 已经存在。
- `EFAULT`: `oldpath` 或 `newpath` 是无效指针。
- `EIO`: 发生 I/O 错误。
- `ELOOP`: `oldpath` 或 `newpath` 中包含过多符号链接。
- `EMLINK`: `oldpath` 的 inode 已达到最大链接数。
- `ENAMETOOLONG`: `oldpath` 或 `newpath` 名称过长。
- `ENOENT`: `oldpath` 或 `newpath` 不存在。
- `ENOMEM`: 内存不足。
- `ENOSPC`: `newpath` 所在设备没有足够的空间。
- `ENOTDIR`: `oldpath` 或 `newpath` 不是目录。
- `EPERM`: `newpath` 是只读文件系统上的文件，或者 `oldpath` 是不可链接的。
- `EROFS`: `newpath` 在只读文件系统上。
- `EXDEV`: `newpath` 和 `oldpath` 不在同一文件系统上（Linux 允许在同一文件系统上的硬链接）。

#### 7.3.2 符号链接

符号链接（或软链接）是一个特殊的文件，它包含另一个文件或目录的路径名。

```c
#include <unistd.h>

int symlink(const char *oldpath, const char *newpath);
```

`symlink()` 函数创建一个新的符号链接 `newpath` 指向 `oldpath`。成功时返回 0，失败时返回 -1 并设置 `errno`。

- `EACCESS`: 进程没有对 `oldpath` 或 `newpath` 的适当权限。
- `EEXIST`: `newpath` 已经存在。
- `EFAULT`: `oldpath` 或 `newpath` 是无效指针。
- `EIO`: 发生 I/O 错误。
- `ELOOP`: `oldpath` 或 `newpath` 中包含过多符号链接。
- `EMLINK`: `oldpath` 的 inode 已达到最大链接数。
- `ENAMETOOLONG`: `oldpath` 或 `newpath` 名称过长。
- `ENOENT`: `oldpath` 或 `newpath` 不存在。
- `ENOMEM`: 内存不足。
- `ENOSPC`: `newpath` 所在设备没有足够的空间。
- `ENOTDIR`: `oldpath` 或 `newpath` 不是目录。
- `EPERM`: `newpath` 是只读文件系统上的文件。
- `EROFS`: `newpath` 在只读文件系统上。

#### 7.3.3 解除链接

解除链接是指删除文件的一个链接。这可以通过 `unlink()` 函数完成。

```c
#include <unistd.h>

int unlink(const char *pathname);
```

`unlink()` 函数删除 `pathname` 指定的文件或符号链接。成功时返回 0，失败时返回 -1 并设置 `errno`。

- `EACCESS`: 进程没有对 `pathname` 的写权限或其父目录的搜索权限。
- `EFAULT`: `pathname` 是无效指针。
- `EIO`: 发生 I/O 错误。
- `EISDIR`: `pathname` 是目录。
- `ELOOP`: `pathname` 中包含过多符号链接。
- `ENAMETOOLONG`: `pathname` 名称过长。
- `ENOENT`: `pathname` 不存在。
- `ENOMEM`: 内存不足。
- `ENOTDIR`: `pathname` 的某个组件不是目录。
- `EPERM`: 进程没有权限删除 `pathname`。
- `EROFS`: `pathname` 在只读文件系统上。

对于文件和目录的通用删除，可以使用 `remove()` 函数。

```c
#include <stdio.h>

int remove(const char *path);
```

`remove()` 函数根据 `path` 的类型调用 `unlink()` 或 `rmdir()`。成功时返回 0，失败时返回 -1 并设置 `errno`。

### 7.4 复制和移动文件

复制和移动文件是常见的文件操作。在 Unix 中，这些操作可以通过命令行工具 `cp` 和 `mv` 实现，也可以通过编程接口实现。

#### 7.4.1 复制文件

复制文件的基本步骤如下：

1. 打开源文件。
2. 检查目标文件是否存在，如果存在则删除。
3. 将源文件读入内存。
4. 将数据写入目标文件。
5. 重复读写操作直到源文件结束。
6. 关闭目标文件。
7. 关闭源文件。

#### 7.4.2 移动文件

移动文件可以通过 `rename()` 函数实现。

```c
#include <stdio.h>

int rename(const char *oldpath, const char *newpath);
```

`rename()` 函数将 `oldpath` 重命名为 `newpath`。成功时返回 0，失败时返回 -1 并设置 `errno`。

- `EACCESS`: 进程没有对 `oldpath` 或 `newpath` 的适当权限。
- `EBUSY`: `oldpath` 或 `newpath` 正在被其他进程使用。
- `EFAULT`: `oldpath` 或 `newpath` 是无效指针。
- `EINVAL`: `newpath` 是 `oldpath` 的子目录。
- `EISDIR`: `newpath` 存在且是目录，而 `oldpath` 不是目录。
- `ELOOP`: `oldpath` 或 `newpath` 中包含过多符号链接。
- `EMLINK`: `oldpath` 的 inode 已达到最大链接数。
- `ENAMETOOLONG`: `oldpath` 或 `newpath` 名称过长。
- `ENOENT`: `oldpath` 或 `newpath` 不存在。
- `ENOMEM`: 内存不足。
- `ENOSPC`: `newpath` 所在设备没有足够的空间。
- `ENOTDIR`: `oldpath` 或 `newpath` 的某个组件不是目录。
- `ENOTEMPTY`: `newpath` 是非空目录。
- `EPERM`: 进程没有权限移动 `oldpath` 到 `newpath`。
- `EROFS`: `newpath` 在只读文件系统上。
- `EXDEV`: `oldpath` 和 `newpath` 不在同一文件系统上。

### 7.5 设备节点

设备节点是代表硬件设备的特殊文件。它们允许用户通过标准文件 I/O 接口与设备进行交互。设备节点分为字符设备和块设备两种类型。

#### 7.5.1 特殊设备节点

- **空设备** (`/dev/null`): 丢弃所有写入的数据，读取时总是返回 EOF。
- **零设备** (`/dev/zero`): 读取时总是返回零字节，写入时丢弃所有数据。
- **满设备** (`/dev/full`): 读取时总是返回零字节，写入时返回 `ENOSPC` 表示设备已满。

#### 7.5.2 随机数生成器

随机数生成器设备包括 `/dev/random` 和 `/dev/urandom`。这些设备提供加密安全的随机数。