normal sealed sender message (thus solving the bootstrapping
problem). The conversation proceeds with the initiator of the
conversation sending messages to the receiver using sealed
sender (one way), and the conversation receiver sending replies
to the initiator’s anonymous identity. Importantly, the identity
of the initiator is never leaked, as no messages exchanged in
the conversation contain that person’s long-term identity. We
prove that out protocol securely realizes the deﬁnition of sealed
sender conversations presented in Section V-A.
A straightforward extension is to move towards two-way
sealed sender conversations where both parties use anonymous
identities. This solution is described in Section VI-C. When an
initiator starts a conversation as described above, the receiver
also creates a new anonymous identity and sends it via sealed
sender back to the conversation initiator. This protocol offers a
single opportunity to link the receiver to their new, anonymous
identity (by correlating the timing of the received message and
the registering of a new public key), but, as we have shown,
network noise makes it difﬁcult to re-identify users with only
a single event. Even in the unlikely case that the conversation
receiver is linked to their long-term identity, we show that the
conversation initiator remains anonymous.
Both protocols place the service provider at risk of denial
of service attacks, and so in Section VI-D, we aim to limit
the power of users to arbitrarily register anonymous identities.
Allowing users to create unlimited anonymous identities would
lead to strain on the service provider if there is no way
to differentiate between legitimate anonymous identities and
malicious ones. To prevent these attacks, users are each given
a limited number of anonymous credentials that
they can
“spend” to register anonymous keys, reminiscent of the earliest
e-cash systems [8]. These credentials can be validated by the
service provider to ensure that a legitimate user is requesting an
anonymous identity without revealing that user’s identity. We
use blind signatures to implement our anonymous credentials.
We evaluate the practicality of this approach in Section VI-E
and show that it could be deployed cheaply for either one-way
or two-way sealed sender conversations.
For simplicity, we assume that communicating users have
already exchanged delivery tokens. Any protections derived
from these delivery tokens can be added to the following
protocols in a straightforward manner. Additionally, we as-
sume users connect to the service provider via an anonymous
channel, e.g., Tor or Orbot.
A. Preliminaries
Sealed Sender We assume that the service provider imple-
ments the sealed sender mechanism described in Section II-A.
Speciﬁcally, we assume that a client can generate a pub-
lic/private key pair and publish their public key as an address
registered with the service. If the server permits it through
some veriﬁcation process, the server will allow messages to
be sent to that public key without a sender.
More formally, we assume that the system has a sealed
sender encryption scheme Πssenc. While Signal does not give a
proof of security for the scheme it uses, for our constructions
we will assume that Πssenc
is a signcryption scheme that
satisﬁes ciphertext anonymity [35] and adopt
the notation
presented in [51] for its algorithms6. We say a sealed sender
encryption scheme Πssenc is a set of three algorithms:
pair.
• SSKeyGen(1λ) → (pk, sk) generates a public/private key
• SSEnc(m, sks, pkr) → c takes in a message m,
the
sender’s secret key sks and the receiver’s public key pkr,
and outputs a ciphertext c
• SSDecVer(skr, c) → {(m, pks),⊥} takes in the receiver’s
private key skr and a ciphertext c and either outputs
a message m,and the public key of the sender pks,
or returns the error symbol ⊥. (Note that this actually
constitutes decryption followed by veriﬁcation in the
notation of [51], returning ⊥ when either step fails.)
Formal security deﬁnitions are given in [51]. In short, the
scheme satisﬁes (1) message indistinguishability, (2) unforge-
ability, and (3) ciphertext anonymity, meaning the ciphertext
reveals nothing about the sender or receiver.
Blind Signatures The mechanism to prevent abuse for the
creation of anonymous accounts relies on the cryptographic
primitive of blind signatures, as ﬁrst proposed by [8]. Blind
signature schemes have 5 algorithms: BSKeyGen, BSBlind,
BSSign, BSExtract and BSVerify. BSBlind takes in the public
key of the signer, a message, and some randomness and outputs
a blinded message. BSSign takes in the signer’s private key and
a blinded message and outputs a blinded signature. BSExtract
takes in a blinded signature and the randomness used in
blinding and outputs a normal signature. Finally, BSVerify
takes in a message and the signer’s public key and decides
if the signature is valid.
The interaction between a server with the signing keypair
sk, pk and a client is as follows:
1) Client generates the blinded message
b ← BSBlind(m, pk; r) for r ←${0, 1}λ
2) Client sends b to the server for signing.
3) Server computes the blinded signature
sblind ← BSSign(b, sk) and returns it to the client.
s ← BSExtract(sblind, pk; r)
4) Client extracts the real signature
5) Client, in a different network connection, sends the initial
message m and the real signature s to the server, who runs
BSVerify(pk, m, s)
The blind signature scheme should have the usual signature
unforgeability property. Additionally, it should be impossible
for a server to link the blinded message and blinded signature
to the real message and real signature. We use the RSA-based
construction of blind signatures from [8].
6We note that ciphertext anonymity is actually a stronger primitive than
required, as there is no need for receiver anonymity.
10
B. One-way Sealed Sender Conversations
First, we provide the construction of sealed sender conver-
sations which we build on in this solution and those that follow.
Recall that a sealed sender conversation reveals the ﬂow of the
conversation (including message timing, etc.) and the identity
of the initial receiver, but at no point can the service provider
identify the initial sender.
The intuition behind our solution is straightforward: when
initiating a new conversation, a sender generates an ephemeral,
per-conversation key pair. This key pair is registered with the
service provider anonymously, but otherwise is treated as a
normal identity in the system. Throughout the lifetime of the
conversation, this identity key is used instead of the long-term
identity of conversation initiator. As long as the ephemeral
public key is never associated with the long-term identity, and
never used in any other conversations, the service provider
cannot learn anything about the true identity of the user that
generated that ephemeral identity.
Generally, the ﬂow of a sealed sender conversation is as
follows. During the setup, each sender Ps with long-term keys
(pks, sks) creates entries (Pr, pkr, pks) for each receiver Pr
with public key pkr. Some user, who we call the initiator,
starts the conversation by running the Initiate Conversation
protocol below where Ps generates and registers an ephemeral
identity for a receiver Pr. Whenever the receiver comes online
(or possibly immediately by receiving a push notiﬁcation)
and receives the appropriate information, they will
locally
associate the ephemeral key with the initiator for the duration
of the conversation. From this point, both users may send
messages using the Send Message protocol and receive those
messages from the service provider via Push Message, over
an open, long-term connection. The protocol Open Receiver
Connection is used to establish a channel for such push
notiﬁcations, either for a user’s long-term mailbox, or for an
ephemeral mailbox created for a single conversation.
Every user must maintain a conversation table,
to re-
member where messages should be sent in all ongoing con-
versations. Each table entry stored by a user Ps is a tuple
(Pr, pkβ, pkα, skα), where Pr is the actual message recipient,
pkβ is the recipient’s mailbox (public key) to which the
message is addressed, and (pkα, skα) is the key pair used to
sign and encrypt the message. Depending on who initiated
the conversation, one of pkβ or pkα will correspond to an
ephemeral identity pke, and the other will correspond to one
of the long-term identities pkr or pks.
Initiate One-Way Sealed Conversation to Pr:
1) Initiator Ps does the following:
fresh
a) looks up Pr’s long-term public key pkr
(pke, ske) ←
b) generates
c) encrypts c ← Πssenc.SSEnc(‘‘init’’(cid:107)pke, sks, pkr)
d) connects to the service provider anonymously and
Πssenc.SSKeyGen(1λ)
ephemeral
keys
sends c(cid:107)pke for pkr
e) appends (Pr, pkr, pke, ske) to the conversation table
f) Registers a new mailbox for the public key pke and uses
Open Receiver Connection with keypair public key
pke, ske to establish a connection for push notiﬁcations.
2) The service provider delivers c (sealed sender) to Pr
based on pkr, either immediately pushing the message
or waiting for the receiver to come online.
3) When the receiver Pr receives the message to its long-
term mailbox pkr, it:
a) decrypts and veriﬁes
(‘‘init’’(cid:107)pke, x, pks) ← Πssenc.SSDecVer(skr, c)
b) appends (Ps, pke, pkr, skr) to the conversation table
c) uses Send Message to send a delivery receipt to Ps
(which now goes to pke from the conv. table)
Send Message to P∗
1) Sender looks up freshest entry (P∗, pkβ, pkα, skα) in the
2) Sender encrypts c ← Πssenc.SSEnc(m, skα, pkβ)
3) Sender sends c for pkβ to the service provider, anony-
conversation table.
mously if necessary.
4) If there is an open connection associated with pkβ, the
service provider uses Push Message for c over that con-
nection. Otherwise, the service provider sets the message
as pending in the mailbox associated with pkβ
Open Receiver Connection for (pkβ, skβ)
1) Receiver connects to the service provider and demon-
strates knowledge of key pair (pkβ, skβ) such that there
is a registered mailbox for public key pkβ
2) The receiver and the server build a long-term connection
3) If there are any pending messages in the mailbox associ-
for message delivery, indexed by pkβ
ated with pkβ, use Push Message for those messages.
Push Message c to pkβ
1) Service provider looks up an open connection indexed
by pkβ. If such a connection exists, the service provider
sends c over it
←
entry
Πssenc.SSDecVer(skβ, c)
(P∗, pkα, pkβ, skβ) exists in the conversations table,
dropping it otherwise.
(m, pkα)
an
2) Receiver
decrypts
veriﬁes
and
as
c
We prove that this construction securely realizes the deﬁ-
nition Figure 6 in the standalone model in Appendix B. The
proof is straightforward: we construct a simulator and show
that an adversary corrupting the service provider and any
number of clients cannot distinguish between the real protocol
and interacting with the ideal functionality.
C. Two-way Sealed Sender Conversations
While the construction above successfully realizes sealed
sender conversations, the identity of the receiver is still leaked
to the service provider. Ideally, we would like for both users in
a conversation to communicate using only ephemeral identities,
so that the service provider sees only the ﬂow of messages
in a conversation but does not learn either party’s long-term
identity. However, this again leads to a bootstrapping problem:
if both users use fresh, anonymous identities, how do they
exchange this ephemeral contact information while remaining
anonymous?
11
While heavyweight cryptography (such as PIR or ORAMs)
may provide a more robust solution, in this work we focus on
scalable solutions that might plausibly be adopted by secure
messaging platforms. As such, we present a natural extension
of our one-way sealed sender conversation protocol.
After an initiator creates an ephemeral key pair, opens
a new mailbox, and sends this to the receiver, the receiver
responds by doing the same thing: creating a second ephemeral
key pair, opening a second mailbox, and sending this back
to the initiator as part of the initial delivery receipt. After
this, both the conversation initiator and receiver will have
conversation table entries of the form P∗, pke1, pke2, ske2,
with two different ephemeral keys for sending and receiving
messages in the conversation.
This requires minimal changes to the previous protocol.
Essentially, the Initiate protocol gains another section for the
recipient to create their own ephemeral identity, but the Send,
Open Connection, and Push Message protocols are identical.
In Appendix C we provide the full details of these updated
protocols, along with an additional protocol Change Mailbox
which is used to update an ephemeral key pair for one side of
an existing conversation.
Security. We have two security goals for this protocol. First,
we require that this protocol is a secure instantiation of a one-
way sealed sender conversation, just like the protocol above.
This is clear, as the only party whose behavior changes from
the protocols in Section VI-B is the initial receiver. Simulating
their behavior is easy because that user’s identity is already
leaked by the ideal functionality. As such, the proof remains
nearly identical to that in Appendix B.
Second, we require that the service provider has only one
chance to identify the initial receiver. Note that besides the
initial messages, all sent messages are only linked to the
anonymous identities. Thus, no information about the users’
true identities are leaked by these messages. This only source
of information about these identities comes from the timing
of the mailbox’s initial opening, so this is the only chance to
identify the initial receiver. As described in our simulations,
in a reasonably busy network it is difﬁcult to link two events
perfectly. Instead, it requires many epochs of repeated behavior
to extract a link. Therefore, giving the service provider only
a single chance to de-anonymize the receiver will most likely
(though not provably) provide two-sided anonymity. To further
decrease the chance of a successful attack, the initial receiver
can introduce some initial random delay in opening and using
a new mailbox.
Obscuring the Conversation Flow. A natural generalization
of this approach is to switch mailboxes often throughout a
conversation, possibly with each message. This may provide
further obfuscation, as each mailbox is only used once. While
analyzing how well this approach would obscure the conversa-
tion ﬂow is difﬁcult, as linking multiple messages together
requires the service provider to ﬁnd a timing correlation
between the various mailboxes’ activities, it is clear it provides
no worse anonymity than the above construction.
12
D. Protecting against Denial of Service
Both constructions presented above require users to anony-
mously register public keys with the service provider. This
provides an easy way for attackers to launch a denial of
service attack: simply anonymously register massive numbers
of public keys. As such, we now turn our attention to bounding
the number of ephemeral identities a user can have open,
without compromising the required privacy properties.
We build on anonymous credential systems, such as [8].
Intuitively, we want each user in the system to be issued a
ﬁxed number of anonymous credentials, each of which can