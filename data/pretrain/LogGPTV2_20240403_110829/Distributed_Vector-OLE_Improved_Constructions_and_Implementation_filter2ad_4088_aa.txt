title:Distributed Vector-OLE: Improved Constructions and Implementation
author:Phillipp Schoppmann and
Adrià Gasc&apos;on and
Leonie Reichert and
Mariana Raykova
Distributed Vector-OLE: Improved Constructions
and Implementation
Phillipp Schoppmann
Humboldt-Universität zu Berlin
PI:EMAIL
Leonie Reichert
Humboldt-Universität zu Berlin
PI:EMAIL
ABSTRACT
We investigate concretely efficient protocols for distributed oblivi-
ous linear evaluation over vectors (Vector-OLE). Boyle et al. (CCS
2018) proposed a protocol for secure distributed pseudorandom
Vector-OLE generation using sublinear communication, but they
did not provide an implementation. Their construction is based on
a variant of the LPN assumption and assumes a distributed key
generation protocol for single-point Function Secret Sharing (FSS),
as well as an efficient batching scheme to obtain multi-point FSS.
We show that this requirement can be relaxed, resulting in a weaker
variant of FSS, for which we give an efficient protocol. This allows
us to use efficient probabilistic batch codes that were also recently
used for batched PIR by Angel et al. (S&P 2018). We construct
a full Vector-OLE generator from our protocols, and compare it
experimentally with alternative approaches. Our implementation
parallelizes very well, and has low communication overhead in
practice. For generating a VOLE of size 220, our implementation
only takes 0.52s on 32 cores.
1 INTRODUCTION
The ability to distribute correlated randomness between two parties
in the absence of a trusted dealer is a central problem to cryptogra-
phy. In the context of secure computation this ability enables split-
ting the computation in an offline phase which is input independent
and can be executed in advance, and an online phase which is very
efficient. Many previous works have focused on improving and
optimizing methods for generation of correlated randomness in the
context of oblivious transfer extension [3, 4, 6, 35], which provides
offline precomputation for two party computation based on garbled
circuits [56], Beaver multiplicative triples [5, 18, 20, 38, 39], which
are at the core of offline computation for secure arithmetic compu-
tation, as well as oblivious linear evaluation (OLE) [9, 24, 25, 46],
which can be viewed as the equivalent of OT extension in arithmetic
setting and which can be used for multiplicative triple generation.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363228
1
Adrià Gascón
Google
PI:EMAIL
Mariana Raykova
Google
PI:EMAIL
In this paper we focus on vector OLE (VOLE), which is the vector-
ized variant of an oblivious linear evaluation. More concretely, one
party, the sender, holds vectors u, v and a second party, the receiver
has value 𝑥. The goal of the protocol is to enable the receiver to
learn w = u𝑥 + v without revealing any further information to any
of the parties. The concept of VOLE was introduced by Applebaum
et al. [2]. In the recent work of Boyle et al. [9], the authors showed
that VOLE is implied by a pseudorandom variant of the protocol
where the vectors u, v are pseudorandom and are generated during
the execution of the protocol as outputs to the first party.
Succinctness is a crucial property for correlated randomness
protocols, which aim to distribute long correlated outputs between
the parties by communicating only short seeds. Boyle et al. [9]
showed how to achieve succinctness in the setting of pseudorandom
VOLE. The idea of their approach is to use a random linear code
to extend short (sub-linear) seed vectors to long pseudorandom
vectors. By masking the encoded vectors with a shared, sparse noise
vector, they reduce security of their VOLE generator to the LPN
assumption [7]. The authors leverage functions secret sharing (FSS)
for multi-point functions as a way to distribute the LPN noise vector
to the inputs of the parties in an oblivious manner with succinct
communication. This requires a two-party computation protocol
for distributed generation of the FSS keys for the underlying multi-
point function. The proposed approach reduces the multi-point FSS
to several executions of single point FSS by leveraging batching
techniques. For distributed single-point FSS key generation, the
authors suggest using the two party FSS key generation protocol
of Doerner and shelat [23].
In this work we address pseudorandom VOLE generation from
a practical perspective. In particular, we focus on the primal variant
of the protocol proposed in [9]. This is because to the best of our
knowledge, there is no practical (i.e., implemented) construction of
the “LPN-friendly” codes required for the dual variant. While the
primal variant has a lower bound of ˜𝑂(√
𝑛) on its communication
overhead, our implementation is still very efficient in practice. This
is due to several improvements we make to the construction in [9].
Our main observation is that the non-zero indices of the shared
sparse noise vector needed for LPN are part of the output to one
of the parties. We use this observation in two ways. First, it allows
us to use a more efficient batching scheme than what is proposed
in [9]. Similar to previous work [1, 21], we use cuckoo hashing to
do probabilistic batching. This allows us to split up an instance of
𝑡-point FSS into 𝑚 = 𝑂(𝑡) instances of single-point FSS, where 𝑚
is in practice only slightly larger than 𝑡. Second, we modify the FSS
construction itself, which gives us a large constant-factor speedup
in each FSS generation and evaluation. Our protocol is constant
round, does not require secure PRG evaluations, has sub-linear
communication, and like the distributed construction proposed by
[9], provides security in the semi-honest model.
Our VOLE construction implies efficiency improvements in a
wide range of applications such as secure linear algebra, sparse
matrix multiplications and machine learning computations over
sparse data, oblivious polynomial evaluation and private set inter-
section, and improved efficiency for semi-private data accessed in
some ORAM constructions.
1.1 Contributions
As building blocks for our distributed VOLE protocol we develop
constructions of several primitives of independent interest.
A protocol for (𝑛 − 1)-out-of-𝑛 Random OT (Section 3). An impor-
tant component of our solution is a novel protocol for (𝑛 − 1)-out-
of-𝑛 Random OT that requires one round and logarithmic communi-
cation. While any 𝑚-out-of-𝑛 OT protocol requires communication
Ω(𝑚), we show how to leverage the fact that all messages are ran-
dom to compress 𝑛 − 1 messages in a logarithmic number of seeds
in manner oblivious to the sender. In terms of computation, an
execution involves (i) 2𝑛 local PRG evaluations per party, and (ii)
log𝑘(𝑛) parallel executions of an (𝑘 − 1)-out-of-𝑘 OT protocol. In
our implementation we choose 𝑘 = 2, and thus rely on 1-out-of-2
OT. Our (𝑛−1)-out-of-𝑛 Random OT implies a construction private
puncturable PRF [8], which enables a party to obtain a punctured
PRF key at a location that remains secret to the full PRF key owner.
Known-Index SPFSS (Section 4). The VOLE generation in [9] uses
SPFSS but assumes that one of the parties knows the input that
evaluate to non-zero in the point function, while the function value
us secret-shared. We propose a protocol for known-index SPFSS
that outperforms the alternatives proposed in [9]. The protocol
uses a reduction to (𝑛− 1)-out-of-𝑛 Random OT, and thus leverages
the protocol mentioned above. While known-index SPFSS implies
distributed VOLE, its relevance is not limited to this application. It
can be also viewed as a type of “scatter” vector operation, which is a
core component in secure protocols for machine learning tasks [51].
Our protocol outperforms the solutions presented in [51], resulting
in immediate gains for tasks such as gradient descent model training
on sparse data.
Efficient Known-Indices MPFSS from SPFSS (Section 5). To obtain
a solution for distributed VOLE generation, we show an efficient
reduction from known-indices MPFSS, where one party chooses the
indices of the point function, to known-index SPFSS. Our reduction
is based on Cuckoo hashing [47], and in practice it is very efficient,
in particular when compared with the alternatives proposed by
Boyle et al. [9].
Distributed VOLE (Section 6). We combine the above protocol
building blocks with some further optimizations, to obtain a full
protocol for distributed VOLE generation.
Applications (Section 7). We investigate several applications of
our protocols, including linear algebra and matrix manipulation
primitives commonly used in data analysis tasks. We show how our
2
protocols yield concretely efficient secure two-party instantiations
for Oblivious Polynomial Evaluation. We further show that our
known-index SPFSS protocol can be used to improve the efficiency
(both in asymptotic round complexity and concrete efficiency) of
semi-private accesses in a recent FSS-based distributed ORAM con-
struction [23].
Experimental Evaluation (Section 8). While Boyle et al. [9] pro-
vide estimates for runtime and communication, they do not provide
an implementation or an experimental evaluation. We implement
all of our protocols, both over finite fields and integer rings, as well
as the primal variant of the VOLE protocol proposed by Boyle et
al. [9]. Instantiated over a finite field, we can generate a random
VOLE of length 𝑛 = 220 in about 5s. For comparison, generating the
same using standard Gilboa multiplication takes 70% longer and
has a 160% higher communication overhead. At the same time, our
construction parallelizes nicely: using 32 threads, we can get an
additional speedup of 9.8x, reducing the time to compute the above
triple to 0.52𝑠. In order to have a comprehensive comparison with
alternative approaches we implemented and optimized Gilboa’s
multiplication protocol [31] and presented a comparison between
our random VOLE protocol and a instantiation leveraging Gilboa’s
multiplications.
Concurrent Work. In recent concurrent work [10], Boyle et al.
present a two-round OT extension protocol based on Vector-OLE.
As in our work, they observe that VOLE key generation can be
performed in a constant number of rounds. Unlike us, they imple-
ment the more efficient dual VOLE generator and provide malicious
security. However, their implementation is limited to binary fields.
2 PRELIMINARIES
2.1 Oblivious Transfer
Oblivious transfer (OT) [50] is a fundamental primitive in cryp-
tography that allows a receiver to obliviously select one out of
two messages held by a sender without revealing the selection
bit to the sender and without learning anything about the second
message. The OT functionality is sufficient to implement general
secure computation [40, 43, 56]. Here, a major step towards practi-
cal efficiency was the development of OT extension [6, 35], which
allows to compute many computationally efficient online OTs us-
ing a small number of expensive OTs that can be executed in an
advance offline phase. A variant of OT extension is random OT
(ROT) extension [48], where random messages are generated as
output to the sender while the receiver obtains one of the messages
based on the selection bit. The ROT functionality has been used as
a PRF with a single oblivious evaluation in the context of private
set intersection protocols [48, 49].
All of the above OT notions can be generalized also to a setting
where the sender has multiple messages and the receiver selects
multiple indices. We formalize this in the following definition.
Definition 2.1 (𝑚-out-of-𝑛 Oblivious Transfer (OT)). An 𝑚-out-
of-𝑛 oblivious transfer is a protocol between two parties, sender
and a receiver, where the sender has 𝑛 messages as input and the
receiver has 𝑚 selection indices. The receiver obtains the messages
corresponding to its indices while learning nothing about the re-
maining messages, and the sender learns nothing. If the 𝑛 messages
are random and generated during the execution of the protocol as
output for the sender, the protocol is called random 𝑚-out-of-𝑛 OT,
or 𝑚-out-of-𝑛 ROT.
The communication complexity of 1-out-of-2 OT constructions
is linear in the number of messages that the sender has. Naor and
Pinkas [45] showed a reduction of 1-out-of-𝑛 OT to log 𝑛 instances
of 1-out-of-2 OT, which yields logarithmic communication com-
plexity. Observing that 1-out-of-𝑛 OT is equivalent functionality to
symmetric private information retrieval [16] is another approach
to obtain an OT protocol with logarithmic complexity. Considering
the general 𝑚-out-of-𝑛 functionality the communication complex-
ity naturally scales linearly in 𝑚 because we need to transfer at least
that many messages. In Section 3 we show that this is no longer
the case when we consider the 𝑚-out-of-𝑛 ROT functionality and