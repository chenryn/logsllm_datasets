(gdb) target remote :31337
Renote debugging using :31337
Remote debugging from host 127,0.0.1
0x40116408 in ?? ()
#00x4011d408in 77 （)
(gdb)back
T#
0x400d1fce in 77 ()
Backtrace stopped: previous frame identical to this frame (corrupt
2(
0x400d1fce in ?? ()
stack?)
(gdb)
运行客户端后，使用targetremote命令将其连接至等待的GDB服务器。该命令的参数
根据配置环境时使用ADB转发的端口面定。如果IP地址省略，那么GDB客户端默认使用本地
回环接口。现在就可以完全访问目标进程了，可以设置断点，查看寄存器，查看内存，等等。
4.使用gdbclient命令
AOSP编译环境中定义了一个内置的bash命令gdbclient，可以自动完成上述大部分过程。
它可以进行端口转发，启动GDB服务器，自动连接GDB客户端。要使用这个命令，gdbserver
必须在设备上，并且在ADB用户的执行路径中，因此也许只适用于eng编译生成的设备。可以
通过以下shell命令来查看该内置命令的全部定义：
dev:-/android/source $ declare -f gdbclient
gdbclient ()
[...]
简洁起见，不再列举完整的命令，建议读者使用自已的编译环境跟踪该命令。
gdbclient首先查询Android编译系统，以确定环境初始化过程中定义的详细信息，包括路
径和变量（如目标设备架构）。然后，gdbclient会试确定它是如何被调用的。可以使用0、1
2或3个参数启动gdbclient。第一个参数是在/system/bin目录中一个二进制文件的名字。第二
个参数是转发的端口号，以冒号字符作为前缓。前两个参数会分别覆盖app_process和：5039
这两个默认参数。
第三个参数用于指定其附加的进程ID号或命令名。如果它是一个命令名，gdbclient会尝
试在目标设备上使用内置的pid命令来解析其进程ID号。如果该参数被成功处理，gdbclient
会使用ADB来自动转发设备端口并将gdbserver附加至目标进程上：如果被省略，则由用户负责
启动GDB服务器。
接下来，与ndk-gdb脚本类似，gdbclient会产生一个GDB脚本。它会设置一些符号相关
的GDB变量并让GDB客户端连接等待的 GDB服务器。gdbclient与ndk-gdb脚本有两点主要
---
## Page 199
7.6调试原生代码183
区别。其一，gdbclient依赖于来自自定义生成版本的符号，而不是从目标设备上获取的二进
制文件。如果没有自定义的生成版本，gdbclient 不可能正常运行。其二，gdbclient 不允许
用户指定额外的命令或脚本供GDB客户端执行。内置gdbclient的不灵活性和假设条件使其
难以使用，尤其是在高级调试场景下。虽然通过重定义内置gdbwrapper或创建自定义.gdbinit文
件能解决一些问题，但是这些选项还未经深入探究，在此留给读者作为练习。
7.6.4提升自动化程度
调试像Android浏览器这样的应用可能非常耗时。如果想开发利用程序，进行逆向工程分析。
或者深人研究一个问题，掌握一些小技巧会有很大的帮助。自动化启动GDB服务器和客户端的
过程有助于简化调试。本节介绍的方法可以将一些特定的项目操作自动化，我们会演示如何把这
些方法应用在调试Android测览器中。你可能会发现这些方法与第6章中采用的方法非常相似，
但是此处的目的是提高研究人员的效率，面非完全自动化测试。通过自动实现尽可能多的普通任
务，能够给研究人员更多发挥技能的空间。
1.自动化设备上的任务
在许多场景下，例如开发利用程序时，开启多个调试会话是很有必要的。不过在附加模式下，
gdbserver在调试会话结束后就退出了。在这些情况下，使用一些小的shell脚本来自动实现多次
附加过程是非常有帮助的。
第一步是在主机上创建以下简短的shell脚本并执行。
7
dev:~/android/source $ cat > debugging.sh
#:/bin/sh
Mhile true; do
adb she11 *su -c /data/local/tap/attach.sh' >> adb.1og 2>&1
8leep 4
done
dev:~/android/source $ chmod 755 debugging.sh
*D
dev:=/android/eource $
在主机后台运行此脚本可以保证设备上的gdbserver实例退出4秒后重新启动。这里的时间
延迟是为了让目标进程有足够的时间从系统中清除。虽然这个脚本需要设备自身shell脚本的支
持，但是在主机上运行此脚本有助于防止gdbserver端点不小心暴露给不可信的网络。
下一步，在设备上创建shell脚本/data/local/tmp/attach.sh并运行。
she11@maguro: /data/1oca1/tap $ cat > attach.sh
#1/system/bin/sh
am start -a android.intent action, VIsw -d about :blank 1
 start the browsez
com, google.android.browser
 wait for it to start
sleep 2
---
## Page 200
184第7章调试与分析安全漏洞
 attach gdbserver
PID=* . /busybox pidof con,google.android,browser* # requires busybox
cd /data/1oca1/tmp
-/gdbserver --attach tcp:31337 $PID
she11emaguro:/data/Loca1/tmp $ chmod 755 attach.sh
D
she11emaguro:/data/1oca1/tmp S
该脚本实现了启动浏览器，获取其进程ID号，并将GDB服务器附加至该进程的整个过程。
有了这两个脚本，只需在主机后台执行第一个脚本即可。
dev:~/android/source $ ./debugging sh &
使用这两个小脚本可以消除不必要的窗口切换来重启gdbserver。这使得研究人员可以专注
于手头上的工作，专心使用GDB客户端来调试目标进程。
2.自动化GDB客户端
自动化GDB客户端有助于进一步简化分析过程。现在的所有GDB客户端都支持GDB自定
义脚本语言，较新版本AOSP的GDB客户端也包含了对Python脚本的支持。本节使用GDB脚
本自动实现连接gdbserver的过程。
如果只附加至远程GDB服务器，使用GDB客户端的-ex选项就足够了。该选项可以让研究
人员指定一个命令在GDB客户端启动后运行。以下片段展示了如何使用此选项通过target
remote命令附加至等待中的GDB服务器：
dev:~/android/source S arm-eabi-gdb -Q -ex *target remote :31337*
Remote debugging using :31337
Renote debugging from host 127,0.0.1
0x401b5ee4 in ?? ()
(gpB)
在后续小节中可以看到，有时候有必要自动执行多个GDB客户端命令。虽然在一个命令中
可以多次使用-ex选项，但还有另一种方法更加合适：除了-ex选项，GDB客户端也支持-x选
项。使用此选项，研究人员可以将其选择的多个命令放人文件中并将文件名作为-x选项的参数。
7.6.1节中使用过这种功能。GDB也会默认从当前目录的gdbinit文件中读取命令并执行。将脚本
命令放人该文件后，不再需要为GDB指定其他选项。
不管使用哪种方法，编写GDB脚本对自动化调试都是非常有帮助的。使用GDB脚本可以实
现复杂的特定操作，例如自定义跟踪和相互依赖的断点。更多高级脚本将在7.9节中介绍。
7.6.5使用符号进行调试
符号是调试原生代码时最有用的信息，包含了人类可以理解的信息，同时也对应了二进制文
件中的代码位置。ARM二进制文件符号也被调试器用来判断处理器当前的执行模式。无符号调
试可能是一件非常痛苦的事情，会在后面的7.6.6节进一步介绍。不论符号已经存在还是需要编
译才能得到，都应当想办法使用符号。本节会讨论关于符号的细节，并就如何在Android上更好
地利用符号调试原生代码给予指导。
---
## Page 201
7.6调试原生代码185
Android设备上的二进制文件包含不同级别的符号信息，这因设备和二进制文件的不同而异。
移动运营商出售的产品设备在其二进制文件中往往不包含任何符号。在包括Nexus设备在内的部
分设备中，有很多二进制文件只包含部分符号，这是使用userdebug或eng编译Android版本
的典型做法。部分符号提供了一些可以人工识别的信息（如函数名），面不提供文件或行号信息。
带有完全符号的二进制文件则会包含大量信息，对调试代码很有帮助。完全的符号包含文件和行
号信息，可以用来实现源代码级的调试。简而言之，在Android上调试原生代码时遇到的困难与
已有的符号级别成反比。
1.获取符号
一些软件行业的供应商（例如Microsoft 和Mozilla）通过符号服务器公开提供符号，但是
Android环境下没有供应商为其编译版本提供符号。事实上，Android编译版本的符号往往需要通
过源代码来生成，这就需要非常强大的编译机器。除了泄露出来的少量Android工程编译版本，
以及Nexus设备上现有的部分符号外，自定义编译是获取符号的唯一途径。
幸运的是，可以为AOSP支持的设备编译整个镜像。在编译过程中，包含符号信息的文件会
与发布版本文件同时生成。由于包含符号的二进制文件非常大，如果将其刷人设备，会很快耗尽
系统的可用空间。举个例子，WebKit带符号的库文件libwebcore.so就超过了450兆字节。因此
在远程调试时，可以将这些带有符号的大文件与运行在设备上的无符号二进制文件配合使用。
除了编译生成一个完整的设备镜像，也可以编译单个组件。采用这种方式可以减少编译时间，
使调试过程更加高效。使用make命令或者编译系统内置的mm命令，只需编译需要的组件，相
7
应的依赖就会被自动编译。在AOSP的顶层目录下，指定第一个参数为所需的组件并执行make
或命令即可。可以使用以下命令查找组件名列表：
dev:-/android/source $ find . -name Android.mk -print -exec grep 1
. /externa1/webkit/Android.mk
[- .· ]
LOCAL_MoDUL8 := 1ibwebcore
[ . .-]
上面的命令会输出每一个Android.mk文件的路径及其定义的模块。正如在以上片段中看到
的，extemal/webkit/Android.mk文件定义了1ibwebcore模块。因此，执行mm libwebcore 命令
会生成所需要的组件。编译系统将包含符号的文件写人out/targeuproduct/maguro/symbols目录下
的system/lib/libwebcore.so中。路径中的 maguro部分是针对目标设备的，如果要为不同的设备编
译，应该使用相应的产品名称，例如Nexus4的名称为mako。
2.使用符号
通过以上方法或其他方式获取符号后，就要开始使用了。不论是使用gdbc1ient、ndk-gdb
脚本，还是直接使用GDB，都需要加载刚获得的符号来提升调试体验，虽然这些工具的使用过
程稍有差异，但是GDB客户端最终都需要加载并显示这些符号。这里将介绍每种方法如何使用
符号，并进一步讨论提高符号加载速度的方法。
AOSP提供的内置gdbclient会自动使用编译生成的符号。gdbelient通过Android编译
---
## Page 202
186第7章调试与分析安全漏洞
系统获取生成符号的路径，并指示GDB客户端在其中查找。不幸的是，gdbelient会使用默认
生成的儿乎所有模块的符号。由于带符号的模块会占用较大空间，所以这个过程可能非常慢。其
实在大多数情况下，完全没有必要为所有模块加载符号。
单独使用NDK调试时，ndk-gdb脚本也支持自动加载符号。与内置gdbc1ient不同，ndk-gdb
脚本直接从目标设备上下载app_process、linker和 libc.so文件。前面提到，这些二进制文件只包
含部分符号。有人会认为，如果使用自定义编译生成的带有完全符号的二进制文件来替换这些文
件，情况会得以改善。然面，ndk-gdb会覆盖这些现有文件。为了避免这种情况，只需简单地注
释以runadb_cmdpul1开头的命令的行即可。这样，ndk-gdb就会使用带有完全符号的二进
制文件。因为只用到了较少的带符号文件，使用ndk-gdb通常比使用gdbclient速度快。此外，
还能够准确地控制加载哪些符号。
正如7.6.3节和7.6.4节深人讨论到的，直接调用AOSPGDB客户编是调试原生代码的首选
方法。使用此方法能够最大化地控制目标设备和GDB客户端自身的情况。同时调试不同的项目
时，它也支持管理项目特定的配置。本节剩余部分概述了如何搭建这样的环境并进行最佳的
Android浏览器调试体验。
要搭建项目特定的最佳调试环境，第一步是创建存放项目相关数据的目录。此次演示在
AOSP根目录下创建gn-browser-dbg目录：
dev:gn-browser-dbg $
下一步是为想要加载符号的模块创建符号链接。我们只使用当前目录下的符号链接，而不是
像内置gdbclient那样使用整个符号目录。加载所有符号浪费时间和资源，而且通常是不必要
的。虽然在超快的SSD或RAM驱动器上存储符号文件是有帮助的，但是只起到了有限的作用。
为了加快该过程，应该只为有限的模块加载符号：
dev:gn-browser-dbg $ 1n -8 ../out/target/product/maguro/symbo18
dev:gn-browser-dbg $ 1n -8 symbo1s/aystem/bin/1inker
dev:gn-browser-dbg $ 1n -8 8ymbo18/system/bin/app_process
dev:gn-browser-dbg $ 1n -s symbo1s/system/1ib/1ibe.8o
dev:gnbrowserdbg $ 1n -s symbo1s/system/1ib/1ibdvm,so
dev:gn-browser~dbg $ 1n 8 symbo1s/system/1ib/1ibstdc++ .s0
dev:gnbrowserdbg $ 1n -a aymbo1s/system/1ib/1ibandroid_runtime.so
此处，首先为符号目录自身创建符号链接，然后为核心系统文件创建符号链接，包括
libwebcore.so （WebKit）、libstdc++,so 和 libdvm.so （Dalvik VM)。之后创建 GDB 脚本。该脚本
是调试工程的基础，可以直接包含更多的高级脚本。然后，只需要两个命令就可开始调试：
dev:gn-browser-dbg $ cat > script.gdb
te11 gdib where to find symbo1e
set so1ib-search-path