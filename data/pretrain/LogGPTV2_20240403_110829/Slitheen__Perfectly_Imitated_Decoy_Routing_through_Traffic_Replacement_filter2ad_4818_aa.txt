title:Slitheen: Perfectly Imitated Decoy Routing through Traffic Replacement
author:Cecylia Bocovich and
Ian Goldberg
Slitheen: Perfectly Imitated Decoy Routing
through Trafﬁc Replacement
Cecylia Bocovich
University of Waterloo
PI:EMAIL
ABSTRACT
As the capabilities of censors increase and their ability to perform
more powerful deep-packet inspection techniques grows, more pow-
erful systems are needed in turn to disguise user trafﬁc and allow
users under a censor’s inﬂuence to access blocked content on the In-
ternet. Decoy routing is a censorship resistance technique that hides
trafﬁc under the guise of a HTTPS connection to a benign, uncen-
sored “overt” site. However, existing techniques far from perfectly
mimic a typical access of content on the overt server. Artiﬁcial
latency introduced by the system, as well as differences in packet
sizes and timings betray their use to a censor capable of performing
basic packet and latency analysis. While many of the more recent
decoy routing systems focus on deployability concerns, they do so
at the cost of security, adding vulnerabilities to both passive and
active attacks. We propose Slitheen, a decoy routing system capa-
ble of perfectly mimicking the trafﬁc patterns of overt sites. Our
system is secure against previously undefended passive attacks, as
well as known active attacks. Further, we show how recent in-
novations in trafﬁc-shaping technology for ISPs mitigate previous
deployability challenges.
CCS Concepts
•Security and privacy → Privacy protections; Network security;
•Networks → Network protocols;
Keywords
censorship resistance, decoy routing, network latency, TLS, HTTP
state
1.
INTRODUCTION
Historically, censorship efforts paralleled advances in society and
technology that promoted the production and dissemination of in-
formation. From literature [6], to music and art [2], almost all
forms of human expression have undergone scrutiny and censor-
ship by powerful authorities, including governments, religious or-
ganizations, and individuals. Resistance to censorship comes in the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978312
Ian Goldberg
University of Waterloo
PI:EMAIL
form of faster and more reliable methods of distributing informa-
tion, prompting in turn an increase in the efforts of the censor to
combat these innovations.
The cat-and-mouse relationship between censors in power and
their resisting constituents continues to the present day. The Inter-
net, although originally a tool developed by the United States gov-
ernment and research laboratories as a backup communication net-
work, has blossomed into a diverse and powerful means of commu-
nication, social organization, and distribution of information. Un-
fortunately, governments and other political authorities have rec-
ognized the potential of uninhibited international communication
to change the balance of power. Many countries as a result have
adopted a centralized network infrastructure [1,16] that makes traf-
ﬁc easy to surveil and ﬁlter.
The capabilities of censors to monitor and control trafﬁc inside
their sphere of inﬂuence has expanded in the last few years, neces-
sitating increasingly rigorous techniques to counteract state-level
censorship of the web.
In response to increasingly popular cen-
sorship-resistance tools such as Tor [4], censoring authorities such
as the Great Firewall of China (GFC) have used sophisticated deep-
packet inspection (DPI) techniques [23] to analyze application-level
data in TLS connections to detect the usage of censorship circum-
vention techniques.
Decoy routing [7,12,14], or end-to-middle (E2M) proxying [25,
26], is a proposed solution to censorship that combats state-level
adversaries with state-level defenses. Decoy routing relies on the
deployment of relay stations to routers belonging to friendly par-
ticipating ISPs outside of the censor’s sphere of inﬂuence. Users
access blocked content by tagging trafﬁc to an uncensored, overt
website, indicating to a deployed relay station—on the network
path between the user and the benign site—that they wish to access
blocked content covertly. The tag provides the means for the re-
lay station to open a proxy connection to the censored website. By
moving the client side of the proxy to the middle of the network,
the client’s use of decoy routing systems remains undetectable by
the censor.
Existing decoy routing systems are vulnerable to latency analysis
and website ﬁngerprinting attacks. In 2012, Schuchard et al. [18]
showed that simple latency analysis allows a censor to not only
distinguish decoy routing trafﬁc from regular trafﬁc, but also deter-
mine which censored sites were accessed by the client. Although
there is no evidence of censors using more traditional website ﬁn-
gerprinting techniques [11, 21] to take advantage of the differences
in packet sizes, timings, and directionality to distinguish between
a regular visit to the overt site and a disguised visit to a different
censored page, the capabilities of modern censors are sufﬁcient to
support these more sophisticated techniques.
Existing systems that have addressed challenges to deployment
have opened themselves up to active attacks. The success of decoy
routing schemes relies on adoption by a large and diverse group
of ISPs. As such, challenges to deployment such as requiring in-
line blocking and symmetric ﬂows have proven to be prohibitive
enough to inhibit the use of decoy routing schemes. Recent at-
tempts at reducing these requirements have exposed the system to
active attacks [25] that deﬁnitively identify decoy trafﬁc, or sim-
ple passive attacks due to their highly unusual trafﬁc patterns [7].
Whether through an active attack or by identifying unusual brows-
ing patterns, a censor that is able to identify the use of decoy routing
may block the client’s use of the system or seek out the client for re-
crimination, rendering the service in the best case useless and dan-
gerous at worst. We argue that as the capabilities of both censors
and friendly ISPs continue to grow, the challenges to deployability
will lessen and the need for highly secure systems will grow. In
fact, existing DPI equipment can force route symmetry or share a
ﬂow’s state between multiple DPI boxes [17].
Our contribution. In this paper we propose Slitheen,1 a novel de-
coy routing system that defends perfectly against latency analysis
and ﬁngerprinting attacks by perfectly mimicking an access to an
allowed, uncensored site. We use careful knowledge of the HTTP
protocol to deliver censored content to users in the place of image
or video resources from the overt, decoy site. By only replacing un-
necessary “leaf” resources, we ensure that the client will fully load
the overt site in the same manner and timing as a typical access.
A key feature of our replacement protocol is to forward packets as
soon as possible after they arrive at the station to prevent adding
latency in the replacement process. This requires keeping track of
the TCP, TLS, and HTTP states of each ﬂow in order to correctly
handle delayed or missing packets. Our technique forces censored
content to hold the same shape as benign trafﬁc to the overt destina-
tion, eliminating the censor’s ability to use latency or packet sizes
and timings to identify Slitheen trafﬁc.
We stand ﬁrmly on the side of security in the above-mentioned
security-deployability trade-off, but argue that advances in trafﬁc
shaping technology mitigate previously prohibitive barriers faced
by potential participants. Trafﬁc shapers support the practice of
in-line blocking and allow ISPs to force trafﬁc that crosses into
their domain into symmetric ﬂows. Still, to reduce the amount of
overhead our system adds to regular trafﬁc ﬂow, we only institute
ﬂow blocking of downstream data.
In the next section, we give a general overview of decoy rout-
ing and discuss existing techniques. We then introduce Slitheen,
our proposed decoy routing scheme in Section 3. In Section 4, we
discuss the security of our system and our defenses to both pas-
sive and active attacks, including latency analysis and website ﬁn-
gerprinting techniques. We end the discussion with a comparison
to existing decoy routing schemes. In Section 5, we discuss our
proof-of-concept implementation and follow with an evaluation of
its performance in Section 6. Finally, we conclude in Section 7.
2. RELATED WORK
Early censorship circumvention systems consisted of a simple
proxy. A user could hide their destination site from a censoring
ISP by instead making an encrypted connection to a proxy server
outside of the censor’s area of inﬂuence. A censor would see that
the client had made a connection to the proxy, but would be un-
able to determine which webpage the client visited. Tor [4] is a
much more robust system, with stronger anonymity properties, that
1Slitheen is named after a Doctor Who alien capable of taking the
exact form of its victims.
is widely used for censorship circumvention in a similar manner.
Tor extends the simple proxy model by routing the user’s trafﬁc
through a circuit of three proxies, or relays. The additional hops
guarantee web-browsing anonymity for the client, even in the event
that the censor has compromised one of the relays. However, Tor
itself does not mask a client’s participation in the system. Clients
select relays from a publicly available list, one that is also available
to a censoring authority. Censors have been known to block access
to Tor by simply blacklisting connections to known Tor entry, or
guard, relays [20].
In response to the blocking of Tor guards, the Tor Project has
begun to gradually and selectively release the location of secret or
hidden entry relays, called bridges [19]. A client may use these
relays to continue circuit construction with publicly listed relays.
As Tor bridges are not included in public Tor directories, they are
much more difﬁcult for a censor to track down and block. However,
censors such as the Great Firewall of China (GFC) have employed
other techniques to identify Tor trafﬁc in the event that the client is
using a hidden entry to Tor.
Tor trafﬁc has several distinguishing characteristics that are nec-
essary for providing anonymity, but allow a censor to distinguish
Tor trafﬁc from regular trafﬁc to an unknown IP address. In 2012,
Winter and Lindskog experimentally conﬁrmed that the GFC could
identify the use of Tor bridges with deep packet inspection (DPI)
boxes due to the unique ciphersuite list sent by Tor clients in the
TLS ClientHello message [23]. Furthermore, Tor trafﬁc is distin-
guishable in the fact that all packets entering and leaving the Tor
network are padded to 512-byte cells.
2.1 Pluggable Transports
In an effort to disguise connections to Tor, various pluggable
transports have been proposed to change the shape and protect the
contents of connections to Tor bridges and guard relays. To dis-
guise easily identiﬁable trafﬁc patterns, transports take two main
approaches: obscuring the trafﬁc patterns randomly, or mimicking
existing protocols. Transports such as Obfsproxy [3] and Scram-
bleSuit [24] aim to make the trafﬁc look as random as possible, re-
lying on the censor’s use of blacklisting to ignore a connection that
does not match typical Tor trafﬁc. Others, such as Marionnete [5],
SkypeMorph [15], and StegoTorus [22] aim to mimic allowed pro-
tocols as closely as possible to avoid raising the suspicion of the
censor.
Meek [10] is a recently proposed system that relies on an innova-
tive technique called domain fronting to hide the true destination of
a client’s trafﬁc. Unlike existing pluggable transports, Meek trafﬁc
appears to the censor to be heading to a legitimate, allowed website.
The censored, covert destination (typically a proxy running on the
same cloud service as the allowed website) is instead hidden in the
Host: header ﬁeld of the HTTP header to the allowed site. Des-
tination information appears in three different places in an HTTPS
request: the IP address, the TLS Server Name Indication (SNI) ex-
tension, and the Host header of the HTTP request. While the ﬁrst
two are viewable by a censor or any router between the client and
the destination, the HTTP request is encrypted with all other ap-
plication data after the completion of the TLS handshake. Domain
fronting is the practice of specifying one domain, usually an edge
server for a cloud service, in the IP address and SNI ﬁelds, while
setting the encrypted HTTP host header to a different domain.
To make a connection to Tor using Meek, the client establishes a
TLS connection with an edge server of an overt destination that al-
lows domain fronting. Many content distribution networks (CDNs)
and large websites, such as Google App Engine and Amazon Cloud-
Front, allow domain fronting for web applications that subscribe to
The client may then connect to a censored covert webpage through
the relay station; the trafﬁc between the client and the covert des-
tination appears to the censor as encrypted trafﬁc to and from the
overt site.
Cirripede takes a different approach by inserting a tag in the Ini-
tial Sequence Numbers (ISNs) of TCP SYN packets to register the
client with the relay station over the course of 12 TCP connec-
tions. Once registered, the client initiates a TLS connection with
an overt destination, now routed by the relay station through a ser-
vice proxy, and sends an initial HTTP GET request. After the re-
quest goes through, the service proxy terminates the connection on
behalf of the client, and begins to impersonate the overt destina-
tion. The proxy generates a new TLS session key, computed from
the registration tag and station private key, and issues a Change-
CipherSpec message and Finished message to the client. Once the
client responds with a valid Finished message, the service proxy
begins to relay trafﬁc between the client and the censored site until
a predetermined time interval has passed.
In Curveball, the client and the relay station share a predeter-
mined secret, obtained through the use of a covert channel. This
secret is used to generate a tag recognizable by the station and is
inserted in the ClientHello message of a TLS handshake to the overt
destination, similar to Telex. Upon receipt of this tagged message,
the relay station observes the completion of the TLS handshake
with the overt destination, and assumes the role of the server, send-
ing the client a Hello message in the form of a TLS record en-
crypted with the client-station shared secret. Once the client re-
sponds with a similar Hello message, the station begins to proxy
trafﬁc between the client and the censored site.
Despite the strong deniability properties of the three ﬁrst-ge-
neration schemes, none achieved widespread adoption. Telex and
Curveball require symmetric ﬂows between the client and the overt
destination (i.e., ﬂows for which the upstream and downstream
paths both traverse the same relay station), as well as in-line ﬂow
blocking (i.e., where the relay station must actively modify traf-
ﬁc by dropping, delaying, or modifying packets), speculated to be
a prohibitively large barrier to participation by friendly ISPs [25].
In order to combat these shortcomings, Wustrow et al. proposed
TapDance [25], a non-blocking, asymmetric decoy routing system.
TapDance ﬂows are tagged in an initial, incomplete HTTP GET
request to the overt site, after the negotiated TLS handshake. The
TapDance station recovers the tag (steganographically embedded in
the ciphertext of an ignored GET request header), and uses the cor-
responding secret to encrypt a conﬁrmation, mimicking an HTTP
response from the overt site. The client then sends the station up-
stream requests for a censored site, making sure to never signify