NTLM Type3 Flag
例如，考虑一条消息，该消息指定Flag：
Negotiate Unicode (0x00000001)  
Request Target (0x00000004)  
Negotiate NTLM (0x00000200)  
Negotiate Always Sign (0x00008000)
结合以上flag位” 0x00008205 “。但是这在物理传输时上面的数据将被设置为” 0x05820000
“（因为它以小尾数字节顺序表示，这个非常重要，因为很多时候看到位置不对会产生疑问）。
## Type 1消息
我们来看看Type 1消息：
偏移量 | 描述 | 内容  
---|---|---  
0 | NTLMSSP签名 | Null-terminated ASCII “NTLMSSP” (0x4e544c4d53535000)  
8 | NTLM消息Type | long (0x0000001)  
12 | Flags | long  
（16） | 提供的域（可选） | security buffer  
（24） | 提供的工作站（可选） | security buffer  
（32） | 操作系统版本结构（可选） | 8 Bytes  
（32） （40） | 数据块的开始（如果需要）  
Type
1消息从客户端发送到服务器以启动NTLM身份验证。其主要目的是通过Flags指示受支持的选项，从而建立用于认证的”基本规则”。作为可选项，它还可以为服务器提供客户端的工作站名称和客户端工作站具有成员资格的域；服务器使用此信息来确定客户端是否符合本地身份验证的条件。
通常，Type 1消息包含来自以下集合的Flags：
Flags | 说明  
---|---  
Negotiate Unicode (0x00000001) | The client sets this flag to indicate that it
supports Unicode strings.  
Negotiate OEM (0x00000002) | This is set to indicate that the client supports
OEM strings.  
Request Target (0x00000004) | This requests that the server send the
authentication target with the Type 2 reply.  
Negotiate NTLM (0x00000200) | Indicates that NTLM authentication is supported.  
Negotiate Domain Supplied (0x00001000) | When set, the client will send with
the message the name of the domain in which the workstation has membership.  
Negotiate Workstation Supplied (0x00002000) | Indicates that the client is
sending its workstation name with the message.  
Negotiate Always Sign (0x00008000) | Indicates that communication between the
client and server after authentication should carry a “dummy” signature.  
Negotiate NTLM2 Key (0x00080000) | Indicates that this client supports the
NTLM2 signing and sealing scheme; if negotiated, this can also affect the
response calculations.  
Negotiate 128 (0x20000000) | Indicates that this client supports strong
(128-bit) encryption.  
Negotiate 56 (0x80000000) | Indicates that this client supports medium
(56-bit) encryption.  
提供的域是一个安全缓冲区，其中包含客户机工作站具有其成员资格的域。即使客户端支持Unicode，也始终采用OEM格式。
提供的工作站是包含客户端工作站名称的安全缓冲区。这也是OEM而不是Unicode。
在Windows的最新更新中引入了OS版本结构。它标识主机的操作系统构建级别，其格式如下：
Description | Content  
---|---  
0 | Major Version Number  
1 | Minor Version Number  
2 | Build Number  
4 | Unknown  
你可以通过CMD运行”winver.exe”来找到操作系统版本。它应该提供类似于以下内容的字符串：
请注意，操作系统版本结构和提供的域/工作站是可选字段。在所有消息类型中发现了三种Type 1型消息：
版本1-完全省略了提供的域和工作站安全缓冲区以及操作系统版本结构。在这种情况下，消息在Flags字段之后结束，并且是固定长度的16字节结构。这种形式通常出现在较旧的基于Win9x的系统中，并且在Open
Group的ActiveX参考文档（[第11.2.2节](http://www.opengroup.org/comsource/techref2/NCH1222X.HTM#ntlm.2.2)）中有大致记录。
版本2-存在提供的域和工作站缓冲区，但没有操作系统版本结构。数据块在安全缓冲区标头之后的偏移量32处立即开始。在大多数Windows现成的出厂版本中都可以看到这种形式。
版本3-既提供了域/工作站缓冲区，也提供了OS版本结构。数据块从OS版本结构开始，偏移量为40。此格式是在相对较新的Service
Pack中引入的，并且可以在Windows 2000，Windows XP和Windows 2003的当前修补版本中看到。
注：目前一般来说都是版本3了。
因此，”最最少的”格式正确的Type 1消息为：
    4e544c4d535350000100000002020000
这是”版本1”Type 1消息，仅包含NTLMSSP签名，NTLM消息Type
和最少的Flags集（NegotiateNTLM和NegotiateOEM）。
###  Type 1消息示例
请考虑以下十六进制Type 1消息：
    4e544c4d53535000010000000732000006000600330000000b000b0028000000 
    050093080000000f574f524b53544154494f4e444f4d41494e
我们将其分解如下：
0 | 0x4e544c4d53535000 | NTLMSSP Signature  
---|---|---  
8 | 0x01000000 | Type 1 Indicator  
12 | 0x07320000 | Flags:Negotiate Unicode (0x00000001)Negotiate OEM
(0x00000002)Request Target (0x00000004)Negotiate NTLM
(0x00000200)Negotiate Domain Supplied (0x00001000)Negotiate
Workstation Supplied (0x00002000)  
16 | 0x0600060033000000 | Supplied Domain Security Buffer:Length: 6 bytes
(0x0600)Allocated Space: 6 bytes (0x0600)Offset: 51 bytes (0x33000000)  
24 | 0x0b000b0028000000 | Supplied Workstation Security Buffer:Length: 11
bytes (0x0b00)Allocated Space: 11 bytes (0x0b00)Offset: 40 bytes
(0x28000000)  
32 | 0x050093080000000f | OS Version Structure:Major Version: 5
(0x05)Minor Version: 0 (0x00)Build Number: 2195
(0x9308)Unknown/Reserved (0x0000000f)  
40 | 0x574f524b53544154494f4e | Supplied Workstation Data (“WORKSTATION”)  
51 | 0x444f4d41494e | Supplied Domain Data (“DOMAIN”)  
分析这些信息，我们可以看到：
  * 这是一条NTLM Type 1消息（来自NTLMSSP签名和Type 1指示符）。
  * 此客户端可以支持Unicode或OEM字符串（同时设置了”Negotiate Unicode”和”Negotiate OEM”Flags）。
  * 该客户端支持NTLM身份验证（Negotiate NTLM）。
  * 客户端正在请求服务器发送有关身份验证目标的信息（设置了Request Target）。
  * 客户端正在运行Windows 2000（5.0），内部版本2195（Windows 2000系统的生产内部版本号）。
  * 该客户端正在发送其域” DOMAIN “（设置了”Negotiate Domain Supplied flag”Flags，并且该域名称存在于”提供的域安全性缓冲区”中）。
  * 客户端正在发送其工作站名称，即” WORKSTATION “（已设置”Negotiate Workstation Supplied flag”Flags，并且工作站名称出现在”提供的工作站安全缓冲区”中）。
请注意，提供的工作站和域为OEM格式。此外，安全缓冲区数据块的布局顺序并不重要；在该示例中，工作站数据位于域数据之前。
创建Type 1消息后，客户端将其发送到服务器。服务器会像我们刚刚所做的那样分析消息，并创建答复。这将我们带入下一个主题，即Type 2消息。
## Type 2消息
偏移量 | Description | Content  
---|---|---  
0 | NTLMSSP Signature | Null-terminated ASCII “NTLMSSP” (0x4e544c4d53535000)  
8 | NTLM Message Type | long (0x02000000)  
12 | Target Name | security buffer  
20 | Flags | long  
24 | Challenge | 8 bytes  
(32) | Context (optional) | 8 bytes (two consecutive longs)  
(40) | Target Information (optional) | security buffer  
(48) | OS Version Structure (Optional) | 8 bytes  
32 (48) (56) | start of data block  
服务器将Type 2消息发送给客户端，以响应客户端的Type
1消息。它用于完成与客户端的选项Negotiate，也给客户端带来了challenge。它可以选择包含有关身份验证目标的信息。
典型的2类消息flags包括（前面已经翻译过，这里就不翻译了，正好也可以看看原文）：
Flags | 说明  
---|---  
Negotiate Unicode (0x00000001) | The server sets this flag to indicate that it