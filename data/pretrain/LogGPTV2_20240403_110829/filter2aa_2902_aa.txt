安卓APP在各种场景下的调试总结
前言
做此项工作的原因在于笔者之前在CTF比赛中遇到Android逆向类型的题目时，因为只有一个安卓手机作
为主力机，出于安全考虑以及手机厂商限制通常很难获得root权限，再比如使用模拟器则通常面临x86
环境下调试arm native模块的困难，常常因为调试问题困扰很久，于是下定决心折腾一番，希望能对各
位在各种不同限制条件下能够对安卓APP进行调试有所帮助，其中难免遗漏或错误之处也欢迎各位师傅
指正。
如何动态运行待调试的APP
想要调试一个安卓APP，首先最基本的就是要具备一个可以将其动态运行起来的环境，这个环境整体上
可以分为模拟器环境和真机环境。
模拟器
模拟器方面大致是有三种不同的选择，可以在不同条件下选择合适的：
基于VirtualBox的安卓模拟器，以逍遥、夜神等为代表的市场上最常见的一类模拟器，核心是基于
VirtualBox的x86虚拟机，在虚拟机中安装安卓操作系统。
优点：1.可以使用硬件虚拟化技术加速 2.模拟整个操作系统，提供了极为完整的软件运行环
境，软件兼容性较强
缺点：1.该类模拟器虚拟机中通常安装x86平台的安卓系统，在运行只含有arm平台native库
的APP时可能会出现问题，可以尽量选择安卓9.0或11.0及以上版本的该类模拟器，其中新增
的指令翻译技术可以让x86平台模拟运行arm指令，此外，使用IDA pro对native层模块进行调
试时会报错，即arm native层模块在此环境下能运行但是不能调试，具体可能是由于指令转译
机制的存在导致。
BlueStacks为代表的基于API翻译技术的，原理是把Android底层API接口翻译成Windows API
优点：1.因为采用API翻译，其运行效率高，且对PC硬件本身没有硬件虚拟化要求，在硬件兼
容性方面有一定的优势
缺点：1.Bluestacks需要翻译的Android接口数量巨大，很难面面俱到，软件兼容性方面欠佳 
2.该类模拟器同样通常支持x86平台的安卓系统，在运行只含有arm平台native库的APP时可
能会出现问题，可以选择4.0及以上版本的Bluestacks模拟器，Bluestacks也具有指令翻译技
术可以让x86平台模拟运行arm指令，此外，使用IDA pro对native层模块进行调试时也会报
错，即arm native层模块在此环境下能运行但是不能调试，具体可能是由于指令转译机制的存
在导致。
Android Virtual Device，Android Studio中的模拟器组件
优点：1.可以选择模拟原生arm架构的安卓系统，软件兼容性最好，能够使用ida调试arm 
native层模块
缺点：1.基于qemu模拟器进行arm安卓系统，存在巨大的指令翻译开销，速度很慢
Android Studio的安装包比较大，其实AVD组件是可以单独安装的，这里给出一个关于AVD安
装使用的小技巧,即使用官方的command-tools手动安装配置模拟器组件：
安卓真机
使用真机环境是最佳选择，但是不便之处在于：
通常主力机为了安全考虑都不会进行root，或者因为目前手机厂商限制无法root
调试机一般本身就是淘汰的旧手机，再者如果只用来调试，比如电池长时间忘记充电可能寿命很快
就会结束
具备root权限的真机环境当然是最完美的调试环境了，本文后续主要讨论无root环境下的真机环境
比较
通过以上对比，笔者在调试APP时通常首先考虑是否要进行native层且是arm架构的native模块的调试，
如果不需要则使用一般的安卓模拟器就可以方便的调试，如果需要那么通常考虑真机调试或使用AVD模
拟arm安卓系统调试。
如何获取APP的调试权限
安卓系统中想要调试APP的一个条件是APP是可调试的，即AndroidManifest.xml中的
android:debuggable=true。而通常的APP release版本通常都是取消这个属性的，那么这种情况该如何
解决呢？
//使用命令行配置安装模拟器
//列出所有可安装软件包
sdkmanager --list
//安装几个必须的组件
sdkmanager emulator
sdkmanager platform-tools
sdkmanager extras;google;Android_Emulator_Hypervisor_Driver //硬件加速驱动
sdkmanager platforms;android-31   //这个是最新的SDK，不然模拟器运行不起来
//选择一个安卓镜像，笔者测试安卓7.1.1版本是可用的
sdkmanager system-images;android-25;google_apis;arm
//创建一个device
avdmanager create avd -n avd -k "system-images;android-
25;google_apis;arm" -d 15 -p 
//运行
emulator\emulator.exe -avd avd
方法一：重打包设置APP可调试属性
因此APP可调试的第一种方案就是修改android:debuggable属性，具体是通过：
apktool解包→修改AndroidManifest.xml中的android:debuggable=true→apktool重打包
重新安装即可使用adb jdwp即可查看到APP可调试
这种方法优点在于不需要root权限即可完成，缺点是需要处理针对重打包相关APP加固，例如签名验证
等。
方法二：开启系统全局可调试
除了apk中的 debuggable 属性以外，可调试属性还可以在系统中的ro.debuggable全局变量指定，换句
话说，只要把系统里的 debuggable 值设为true，那么不管apk中这个属性是什么值都可以被调试了。
而这个全局变量的修改一种是通过重新刷写系统镜像，修改磁盘中的配置文件达到永久修改的效果，另
一种是通过动态修改该全局变量的内存值达到临时开启的效果。
笔者尝试的是上述第二种方法，已有的工具有mprop、magisk等，修改完成后使用stop;start命令重启
刷新adb demon进程，再使用adb jdwp即可查看到系统内所有APP可调试
这种方式的优点是一旦开启就达到全局可调试的效果，不改变APP本身所以不需要处理完整性校验，缺
点是因为ro.debuggable通常处于系统init进程中，而init进程宿主是root用户，修改init进程内存需要注
入该进程因此同样需要root权限。
APP的Java层调试
本节介绍APP Java层调试的具体流程。
JEB
Java层的调试主要是smali代码层面的，其中个人感觉最方便的还是JEB。笔者在此之前一直使用吾爱破
解网盘中老旧的JEB 2.x破解版，但现在网盘中已有3.x、4.x版本，使用体验比旧版本好很多。JEB的配置
也很简单，我这里给出一些主要注意的点：
jeb是java写的，运行依赖jre运行环境，并且对版本似乎有一些限制，笔者使用的是jdk-8u121，经
测试可以运行
jeb调试时会依赖adb工具，所以要在系统PATH中加入adb环境路径
用JEB打开APK后，可以很方便的直接选择对应的程序附加调试，如果需要调试的代码处于APP启动
期间，可以使用adb shell am start -D -n xxx.xxx.xxx，使APP启动时停在入口处等待附加调试
Ctrl+B可以对smali下断点，同时使用TAB快捷键可以打开并列窗口对照查看对应位置的Java源码
Eclipse/Android Studio
查阅相关资料时有发现，使用apktool或dex2jar+jd-gui等工具反编译出源码，再通过Eclipse/Android 
Studio调试的，但是笔者没有成功，有经验的小伙伴可以补充一下，但是整体来看配置要比JEB繁琐很
多。
Frida
Frida本身并不是一个调试工具，但笔者把他写在这里因为他可以通过hook打印log，对程序流程进行粗
粒度的调试。其实很多时候对Java层并不需要很细粒度的调试，很多时候只希望打印出一些log辅助代码
的理解，同时JEB等工具的调试速度还是比较慢，那么frida就是一个很方便实用的选择，不仅可以打印