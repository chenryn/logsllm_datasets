title:Security vulnerabilities: from measurements to design
author:Ravishankar K. Iyer
Invited Talk
Security Vulnerabilities: From Measurements to Design 
Ravishankar K. Iyer 
Center for Reliable and High-Performance Computing 
Coordinated Science Laboratory 
University of Illinois at Urbana-Champaign 
1308 West Main Street, Urbana, IL 61801 
www.crhc.uiuc.edu
ABSTRACT
Ths  paper  presents  a  study  that  uses  extensve  analyss  of  real 
securty  vulnerabltes  to  drve  the  development  of:  )  runtme 
technques for detecton/maskng of securty attacks and ) formal 
source code analyss methods to enable dentfcaton and removal 
of  potental  securty  vulnerabltes. 
  The  presentaton  wll 
descrbe  the  hardware  archtecture  of  a  Relablty  and  Securty 
Engne (RSE) that embodes the proposed technques, to provde 
run-tme checkng at the processor level. 
Categories and Subject Descriptors
D.. 
asserton checkers, formal methods, valdaton. 
[Software/Program  Verification]:  Measurements, 
General Terms
Securty, Measurement, Verfcaton. 
Keywords
Analyss of securty vulnerabltes, maskng technques, runtme 
detecton of securty attacks. 
1. INTRODUCTION 
In-depth  analyss  of  real  data  on  securty  vulnerabltes  can 
enable a fundamental study of the underlyng characterstcs. Ths 
understandng  can  then  gude  the  development  of  generc 
solutons, applcable to a broad range of vulnerabltes, makng us 
less  relant on  hghly  customzed  technques  amed  at  protectng 
aganst  specfc  types  of  vulnerabltes.  Ths  study  combnes  an 
analyss  of  data  on  securty  vulnerabltes  wth  a  focused 
examnaton of source code to model securty vulnerabltes and 
assocated  attacks.  The  nsghts  ganed  are  used  to  devse  two 
generc  solutons:  measurement-drven  mechansms  for  runtme 
detecton and/or maskng of securty attacks that explot resdual 
vulnerabltes  n  the  applcaton  code  and  formal-reasonng-
drven technques for dentfcaton and removal of vulnerabltes. 
2. SUMMARY OF THE STUDY 
The  measurement  based  study,  ntally  developed  a  fnte-state 
machne  (FSM)  modelng  methodology  to  depct  and  analyze 
Permsson to make dgtal or hard copes of all or part of ths work for 
personal or classroom use s granted wthout fee provded that copes are 
not  made  or  dstrbuted  for  proft  or  commercal  advantage  and  that 
copes  bear  ths notce  and the full  ctaton on the  frst page.  To  copy 
otherwse,  or  republsh,  to  post  on  servers  or  to  redstrbute  to  lsts, 
requres pror specfc permsson and/or a fee. 
ASIACCS’06, March –, 00, Tape, Tawan.
Copyrght 00 ACM ---0/0/000…$.00. 


randomzaton 
(CDR) 
ncludng  stack  buffer  overflow, 
tamperng  (UCIT).  Our  survey  of 
many of the sgnfcant securty vulnerabltes reported n CERT 
Advsores  and  Bugtraq  databases.  In 
ths  approach,  each 
vulnerable  program  s  decomposed  nto  multple  elementary 
actvtes, each correspondng to a par of predcates: the predcate 
that  s  expected  to  be  mplemented  to  ensure  securty  and  the 
predcate that s actually mplemented n the program. A securty 
vulnerablty s thus represented as a predcate par msmatch. The 
FSM methodology  s exemplfed  by  analyzng  a  wde  spectrum 
of  vulnerabltes, 
nteger 
overflow,  heap  overflow,  fle  race  condton,  and  format-strng 
vulnerabltes.  Decomposng  vulnerable  programs  nto  multple 
elementary actvtes offers formalsm for analyzng the program 
mplementaton.  The  approach  enables  pnpontng  of  common 
characterstcs among dfferent categores of vulnerabltes.  
FSM-based analyss of vulnerabltes ndcates that most explots 
(e.g.,  format-strng,  nteger  overflow,  heap  overflow  and  buffer 
overflow) succeed because of predctable program memory layout 
or  unprotected  control  data.  The  vulnerabltes  susceptble  to 
these  types  of  explots  are  defned  as  unauthorzed  control 
nformaton 
the  CERT 
advsores ndcates that UCIT vulnerabltes account for % of 
advsory  entres.  We  use  memory  layout  randomzaton  (MLR) 
and  control  data 
to  mask  UCIT 
vulnerabltes.  Both  technques  effectvely  break  an  attacker’s 
ablty  to  explot  the  vulnerabltes,  and  both  ncur  only  small 
runtme  overhead.  These  technques  do  not  requre  modfcaton 
of  applcaton  source  code;  they  are  mplemented  ether  by 
modfyng  the  dynamc  program  loader  (MLR)  or  by  enhancng 
the C compler (CDR). Both technques are proven to be effectve 
aganst real-world attacks.   
Further data analyss provdes evdence that a programmng flaw, 
namely, ponter tantedness, s a common cause of vulnerablty. 
A  ponter  s  tanted  when  ts  value  can  be  derved  drectly  or 
ndrectly  from  user 
nput.  Snce  ponters  are  nternal  to 
applcatons, they should be transparent to users. Thus, a tantable 
ponter  s  a  potental  securty  vulnerablty.    The  semantc  of 
ponter  tantedness  can  be  formally  defned,  whch  allows 
theorem-provng technques to be appled on program source code 
to detect potental vulnerabltes. Ths technque has been appled 
to examne commonly used C-lbrary functons to formally derve 
the  securty  precondtons  that  must  be  met  to  ensure  ther 
vulnerablty-free  mplementaton.  Although  the  technques  we 
have  mplemented  currently  target  programs  wrtten  n  C,  they 
am  at  uncoverng  resdual  securty  vulnerabltes  and  defeatng 
attacks  due 
to 
the 
observatons  and 
ths  paper  are 
genercally applcable to any program exposed to memory-related 
vulnerabltes. 
The  presentaton  wll  address  the  hardware  archtecture  of  a 
Relablty and Securty Engne (RSE) that embodes the proposed 
technques, to provde run-tme checkng at the processor level. 
low-level  memory  errors.  Therefore, 
technques  dscussed 
n