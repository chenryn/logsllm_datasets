# Title: Security Vulnerabilities: From Measurements to Design
# Author: Ravishankar K. Iyer
# Invited Talk

## Abstract
This paper presents a study that uses extensive analysis of real security vulnerabilities to drive the development of: 1) runtime techniques for detection and masking of security attacks, and 2) formal source code analysis methods to identify and remove potential security vulnerabilities. The presentation will describe the hardware architecture of a Reliability and Security Engine (RSE) that incorporates the proposed techniques to provide runtime checking at the processor level.

### Categories and Subject Descriptors
D.1.5 [Software/Program Verification]: Assertions, Formal Methods, Validation.

### General Terms
Security, Measurement, Verification.

### Keywords
Analysis of security vulnerabilities, Masking techniques, Runtime detection of security attacks.

## 1. Introduction
In-depth analysis of real data on security vulnerabilities can enable a fundamental study of their underlying characteristics. This understanding can guide the development of generic solutions applicable to a broad range of vulnerabilities, reducing reliance on highly customized techniques aimed at specific types of vulnerabilities. This study combines an analysis of security vulnerability data with a focused examination of source code to model security vulnerabilities and associated attacks. The insights gained are used to devise two generic solutions: measurement-driven mechanisms for runtime detection and/or masking of security attacks that exploit residual vulnerabilities in the application code, and formal-reasoning-driven techniques for identifying and removing vulnerabilities.

## 2. Summary of the Study
The measurement-based study initially developed a finite-state machine (FSM) modeling methodology to depict and analyze security vulnerabilities, including stack buffer overflow, integer overflow, heap overflow, file race condition, and format-string vulnerabilities. In this approach, each vulnerable program is decomposed into multiple elementary activities, each corresponding to a pair of predicates: the predicate expected to be implemented to ensure security and the predicate actually implemented in the program. A security vulnerability is thus represented as a predicate pair mismatch. The FSM methodology is exemplified by analyzing a wide spectrum of vulnerabilities.

FSM-based analysis of vulnerabilities indicates that most exploits (e.g., format-string, integer overflow, heap overflow, and buffer overflow) succeed due to predictable program memory layout or unprotected control data. Vulnerabilities susceptible to these types of exploits are defined as unauthorized control information tampering (UCIT). Our survey of CERT Advisories and Bugtraq databases indicates that UCIT vulnerabilities account for 14% of advisory entries. We use memory layout randomization (MLR) and control data randomization (CDR) to mask UCIT vulnerabilities. Both techniques effectively break an attacker’s ability to exploit the vulnerabilities and incur only small runtime overhead. These techniques do not require modification of application source code; they are implemented either by modifying the dynamic program loader (MLR) or by enhancing the C compiler (CDR). Both techniques have been proven effective against real-world attacks.

Further data analysis provides evidence that a programming flaw, namely, pointer taint, is a common cause of vulnerability. A pointer is tainted when its value can be derived directly or indirectly from user input. Since pointers are internal to applications, they should be transparent to users. Thus, a taintable pointer is a potential security vulnerability. The semantics of pointer taint can be formally defined, allowing theorem-proving techniques to be applied to program source code to detect potential vulnerabilities. This technique has been applied to examine commonly used C-library functions to formally derive the security preconditions that must be met to ensure their vulnerability-free implementation. Although the techniques we have implemented currently target programs written in C, they aim to uncover residual security vulnerabilities and defeat attacks due to low-level memory errors. Therefore, the observations and techniques discussed in this paper are generically applicable to any program exposed to memory-related vulnerabilities.

The presentation will address the hardware architecture of a Reliability and Security Engine (RSE) that embodies the proposed techniques to provide runtime checking at the processor level.

---

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

**ASIACCS’06, March 20–22, 2006, Taipei, Taiwan.**
**Copyright 2006 ACM 1-59593-373-0/06/0005…$5.00.**