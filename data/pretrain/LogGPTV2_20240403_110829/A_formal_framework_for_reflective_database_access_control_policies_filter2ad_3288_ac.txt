Tn) into the database state. Access to the database for any
non-administrator user is then restricted to using only the
view predicates.
Example 3. Recall the database from Example 1. We
may wish to allow all employees to access their own records.
This is accomplished by deﬁning the ﬁrst rule in Figure 3.
We may also wish to allow all managers to view the names
and positions of employees in their departments, but not
salary values. This is accomplished by deﬁning the second
rule in Figure 3. This rule uses Prolog-style syntactic sugar
of using the underscore character to represent a “don’t care”
value; semantically, this is equivalent to replacing each un-
derscore with a unique variable name that does not appear
elsewhere in the rule. Note that ﬁeld-level ﬁltering is ac-
complished in this rule by replacing the Salary ﬁeld in the
head of the rule by a null constant. Note also the semantics
of Datalog queries means that these two rules are combined
disjunctively, i.e. a query only needs to satisfy one rule to
return an answer. Thus, a manager may query the table
to get all accessible values, and the answer will include the
manager’s own data (including salary) and the data of all
employees in the department (excluding salary).
We may also wish to allow all HR employees to insert new
employee records into the database. This is accomplished in
the third rule in Figure 3.
2
Example 4. TD provides a very powerful language for
expressing policies. Allowing users other than administra-
tors to deﬁne their own rules without restrictions can lead
to security violations. Recall the example from Section 2 in
which Bob is put in charge of a company picnic. As before,
if Bob deﬁnes the policy for his picnic table as shown in the
fourth rule in Figure 3, then any query on any employee’s
assignment from picnic will also copy that employee’s data
(including conﬁdential salary data) into Bob’s leaked_info
table because it queries the employee table directly as a
superuser, rather than using Bob’s permissions deﬁned by
view.employee.
2
Example 4 demonstrates how the policy described in Fig-
ure 2 might be encoded using TD and view predicates, which
provide a model that is much easier to analyze. Preventing
malicious users from writing such a policy could be accom-
plished by only allowing the policy to be executed under
their privileges, so that the eﬀects of a policy are limited
to anything that user is already allowed to do manually.
In other words, they should only be allowed to access view
predicates under their own privileges, or built-in predicates
which require no special privileges.
Example 5. The ﬁrst rule shown in Figure 4 corrects
the faulty policy from the fourth rule from Figure 3.
In
this rule, all table lookups in Bob’s policy are replaced with
view predicates with the username “bob” as the ﬁrst pa-
rameter. Consequently, when another principal, say Alice,
accesses “the” picnic table, view.picnic will be invoked,
but the ﬁrst clause in the body of the rule will fail if bob
does not have read-access to Alice’s employee table informa-
tion. Consequently, the rule will not ﬁre, and hence protect
Alice’s data from being written onto Bob’s leaked_info ta-
ble. This has the added consequence that Alice cannot read
the data in the picnic table, making this a rather useless
“ﬁx.” It does, however, serve to demonstrate that any policy
Bob writes can do no more than Bob himself would be able
to do manually. The other rules in Figure 4 provide basic
privileges for Bob to the table he owns and must be created
by an administrator (although it would be straightforward
for these basic privileges to be created by the database au-
tomatically when Bob creates the two tables).
2
The problem introduced in Example 4 and the ﬁx pro-
posed in Example 5 demonstrate one of the pitfalls in RD-
BAC. In Example 5, the problem was ﬁxed by executing
the body of the rule under the policy deﬁner’s (Bob’s) priv-
ileges. This violates the guideline advocated by Rosenthal
and Sciore [30], who suggest that policies should be exe-
cuted under the privileges of the query invoker, rather than
the policy deﬁner.
However, we believe that executing the policy under the
deﬁner’s privileges is crucial, especially in the setting where
evaluating the policy has side-eﬀects (such as writing to a ta-
ble). Modifying the policy from Example 5 to execute under
the invoker’s privilege (by replacing the constant bob with
the variable User) would still suﬀer from the same problem
as the original policy in Example 4: all employee data visible
to the query invoker would be leaked to Bob’s leaked_info
table.
The above examples give a simple yet powerful and robust
scheme to write policies in a straight-forward manner using
TD, simply by making sure that all accesses in untrusted
1.
view.picnic(User, Person, Assignment) :-
view.employee(‘bob’, Person, Salary, Dept, Pos),
view.ins.leaked_info(‘bob’, Person, Salary, Dept, Pos),
view.picnic(‘bob’, Person, Assignment).
2.
3.
4.
5.
6.
7.
view.picnic(‘bob’, Person, Assignment) :- picnic(Person, Assignment).
view.ins.picnic(‘bob’, Person, Assignment) :- ins.picnic(Person, Assignment).
view.del.picnic(‘bob’, Person, Assignment) :- del.picnic(Person, Assignment).
view.leaked_info(‘bob’, Person, Salary, Dept, Pos) :- leaked_info(Person, Salary, Dept, Pos).
view.ins.leaked_info(‘bob’, Person, Salary, Dept, Pos) :- ins.leaked_info(Person, Salary, Dept, Pos).
view.del.leaked_info(‘bob’, Person, Salary, Dept, Pos) :- del.leaked_info(Person, Salary, Dept, Pos).
Figure 4: Corrected policy rule from Figure 3 with basic privilege rules
user policies are replaced by appropriate view-predicates.
The power of having rules with side-eﬀects is useful in a
variety of scenarios,
like auditing/logging accesses to the
database, and also in certain policies like the Chinese Wall
policy, where accessing one category in a database automat-
ically causes a side-eﬀect that prevents the same user from
accessing another category [9]. TD semantics provides a
sound semantics to the policies and algorithmic solutions to
evaluate access-rights.
5. SECURITY ANALYSIS
5.1 Security Analysis and Decidability
Formal security analysis can intuitively be described as
answering the question “can user u ever gain privilege p on
object o?” This is substantially diﬀerent than simply analyz-
ing whether a given action should be allowed or disallowed—
it requires us to examine not just the current system state,
but all future system states. The well-known “HRU model”
describes a simple matrix-based access control model, with
the surprising property that even if every policy in a system
can be eﬃciently evaluated, security analysis can be unde-
cidable [18]. This is not the case for every access control
model; security analyses of some existing access control sys-
tems without the same expressiveness as the HRU model
can be decidable while still allowing useful policies to be ex-
pressed [24, 32]. Unfortunately, it is easy to show that the
HRU model can be simulated in TD:
Theorem 1. There exists a set of non-recursive TD rules
2
that can simulate the HRU model.
In spite of the undecidability result of the general case, it
is possible to make restrictions on the policies that enable
decidable security analysis algorithms. To show this, we will
follow the formalism for access control systems deﬁned by Li
and Tripunitara [24] as a four-tuple hΓ, Ψ, Q, ⊢i where Γ is
the set of possible system states, Ψ is a set of rules that may
be used to change the state, Q is a set of logical formulas for
determining access privileges, and ⊢ is a function mapping
Γ × Q → {true, false} that indicates whether a given logical
formula is true for a given system state. A security analysis
instance is a four-tuple of the form hγ, ψ, T , 2φi where γ ∈
Γ, ψ ∈ Ψ, T is a set of trusted users, φ ∈ Q, and 2 is a
temporal logic operator [22] meaning “in the current and in
all future states.” This instance is true if and only if for any
sequence of state changes starting with γ using transitions in
ψ and not initiated by any user in T , φ holds in each state.
To express RDBAC systems in this formalism, let Γ be the
set of possible databases, including both possible database
states and the transaction base, as deﬁned in Section 3.2.
Let Ψ be the set of transaction bases for these databases.
Q and ⊢ must be deﬁned in terms of what security prop-
erties we wish to prove about our system. For the pur-
poses of this paper, Q will be the set of formulas of the form
canRead(U, P, T1, . . . , Tn) or ¬canRead(U, P, T1, . . . , Tn) where
U is a given principal, P is a given predicate name with arity
n, and {T1, . . . , Tn} are either variables or constants.5 For
a database D ∈ Γ, D = hS, ψi, and a given formula
φ = canRead(U, P, T1, . . . , Tn) ∈ Q,
we will deﬁne ⊢ (D, φ) = true if and only if there exist a
variable substitution σ and a sequence of database states S
such that view.P (U, σ(T1), . . . , σ(Tn) can be inferred using
the sequence S. For negated formulas, ⊢ (D, ¬φ) = true if
and only if ⊢ (D, φ) = false. In each of the following the-
orems, security analysis will entail calculating whether the
canRead formula can ever be true in any future database
state resulting from a non-trusted user executing any se-
quence of rules.
5.2 Side-Effect-Free Policies
The ﬁrst class of policies for which we show security anal-
ysis is decidable is a restricted class in which untrusted
users cannot execute policies that cause side-eﬀects on the
database (i.e., contain neither assertions nor retractions).
Note that this is a very reasonable restriction, as there are
many policies whose evaluation does not require any side-
eﬀects on the database. Also, notice that this precludes
the possibility of untrusted users to expand the domain of
the database (introduce new subjects/principals, new at-
tributes, etc.)
Theorem 2. Security analysis is decidable for a database
with state S and transaction base P with all rules containing
no side-eﬀects.
2
While this may initially seem very restrictive, it is impor-
tant to note that we only need to consider untrusted users
not in T .
If a policy in the transaction base contains an
assertion or retraction, but that policy can only be invoked
by trusted users in T , and no operations initiated by other
users will cause that policy to be invoked, then we need not
consider that policy for the purpose of security analysis, al-
lowing us to use Theorem 2. Checking whether users not in
T can invoke the policy could at worst be done by trying
each user one by one to see whether the policy is satisﬁable
5
Adding formulas for expressing other access privileges, such as
canInsert or canDelete, would follow this same pattern.
for that user, although in many cases this can be made sim-
pler (such as if the policy contains a condition to check for
a constant set of users). Checking whether operations initi-
ated by other users will cause the policy to be invoked can
be done by recursively examining the other policies in the
transaction base.
If the policy in question appears in the
body of any other policy, then that policy must similarly
only be invokable by trusted users, and cannot be invoked
by operations initiated by other users.
We can similarly extend the usefulness of this class of
policies by separating write privileges on the database. If an
assertion or retraction to a predicate p’ does not aﬀect the
policies on another predicate p, then policies that change p’
can also be eﬀectively removed for the purposes of security
analysis on p. This check can also be done with a recursive
process. We will say that p depends on p’ if there exists a
rule for p such that at least one of the literals in the body
of the rule either has predicate name p’, or depends on p’.
If p does not depend on p’, then no invocation of any rule
for p will access values in p’, and thus will not be aﬀected
by changes made to p’.
In Section 6 we describe an implementation of the above
security analysis for a side-eﬀect free policy by encoding the
analysis as the evaluation of a query.
5.3 Append-Only Policies
Allowing untrusted users to make updates to the database
complicates security analysis. Understanding the eﬀect of a
set of policies on a changeable database state has already
been shown to be undecidable. However, we can simplify
the problem if the policies impose limits on the kinds of
changes an untrusted user may make.
We describe below a class of policies that satisfy two
conditions— they allow adding new facts to the database
but allow no retractions, and secondly, they disallow poli-
cies to change the domain of possible values that appear
anywhere in the database, the latter being formalized as a
condition called “safe rewritability.” For this class of poli-
cies, Theorem 4 shows that security analysis is decidable,
and Theorem 5 shows that it can be approximately decided
using a simple Datalog query.
−→
t1 ), ..., pn(
We deﬁne the rewrite operation ⊲ as a function mapping
a retraction-free and empty-predicate-free rule to a set of
−→
rules, deﬁned recursively as follows: given a rule r = p(
t )
−→
tn )., if the body of r contains no as-
:- p1(
−→
sertion predicates, then ⊲(r) = {r}. Otherwise, let pi(
ti )
−→
−→
be the ﬁrst assertion predicate ins.q(
ti ), so that no pj (
tj )
−→
for j < i is an assertion predicate. Let r1 be the rule q(
ti )
−−→
ti−1). and r2 be the same as rule r
:- p1(
−→
−→
ti ) omitted. That is, r2 = p(
but with pi(
t1 ),
−→
−−→
tn ). Then ⊲(r) =
ti−1), pi+1(
..., pi−1(
{r1} ∪ ⊲(r2).
−→
t1 ), ..., pi−1(
−−→
ti+1), ..., pn(
−→
t ) :- p1(
For example, if r = p :- p1, p2, ins.p3, p4, ins.p5,
p6., then ⊲(r) consists of the following three rules:
p3 :- p1, p2.
p5 :- p1, p2, p4.
p :- p1, p2, p4, p6.
Note that the rewrite operator is well deﬁned, because r
may only have a ﬁnite number of assertion predicates, and r2
has one fewer assertion predicates than r. Observe that since
⊲(r) removes all assertions, it constitutes a classic Datalog
program and can be evaluated as such. However, note that
the rules of ⊲(r) are not semantically equivalent to r; in fact
⊲(r) allows all inferences that r does, and possibly more.
We call a set of TD rules {r1, . . . , rn} safely rewritable if
each of {⊲(r1), . . . , ⊲(rn)} is safe (in the classical Datalog
sense). Safe rewritability prohibits expanding the domain of
a database, and allows us to compute a single, ﬁnite model
for the Datalog database derived from rewriting each rule
in a TD database. Note also that the Datalog database is
not a simulated execution of every rule in the TD database.
The inference rules for TD require that all predicates in a
given rule hold, not just the predicates occurring before an
assertion. It is, however, a maximal database in terms of set
containment. (We will say that a literal q ∈ D if q can be
inferred from D.)
Lemma 3. For any TD database with safely rewritable
rules and initial state S and transaction base P and any
ﬁnite sequence of rule invocations, the ﬁnal state is a subset
of the model of the Datalog database derived from the union
of S and the rewritten rules from P (i.e. ⊲(P )).
2
Theorem 4. Security analysis is decidable for a database