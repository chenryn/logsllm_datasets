when needed. As a result, on-demand loading addresses a per-
formance bottleneck of the preparation phase, which enables a
much higher throughput of Morula processes and signiﬁcantly
reduces the likelihood of having Morula process shortages even
during device boot. As shown in Section V, the boot time
is eventually improved by 51% on average. Additionally, the
memory usage efﬁciency of apps is also improved due to the
exclusion of unnecessary classes.
On the other hand, this optimization strategy may incur
slight launch-time or runtime delays when on-demand dynamic
loading is triggered for those classes that would have been
preloaded otherwise. In average cases, based on our afore-
mentioned statistics, disabling the preloading only leaves 122
classes to be loaded dynamically by a regular app, whose
negative impact on performance is too small
to measure.
However, we have seen some real apps that have a large
dependency on the preloaded classes, and they tend to be
delayed by less than 0.5 seconds when launched (because these
classes now need to be loaded dynamically).
Recognizing its strength and the potential drawback, we
designed and implemented this optimization to be dynamically
controllable through a new Android kernel property. We rec-
ommend enabling this optimization by default because it sig-
niﬁcantly shortens device boot time and reduces app memory
footprints. However, it can be disabled when preparing Morula
processes for launching and hosting potential apps that require
a large portion of the preloaded classes.
Selective Randomization. The key security beneﬁt of Morula
that fortiﬁes the weakened ASLR on Android—allowing indi-
vidually randomized memory layout for each process—is also
the main reason why Morula causes additional time and space
overhead compared to the Zygote model. This optimization
strategy, namely selective randomization, aims to strike a bal-
ance between security gain and performance penalty, especially
for low-end devices with restricted computing resources. For
instance, suppose the device can only support a limited number
of apps under the Morula model due to the performance
overheads. In this case, it would be better to run the apps
that are more likely to be vulnerable to ASLR exploits under
the Morula model, and run the rest under the Zygote model.
A simple and efﬁcient approach to classify apps into one of
the two groups described above can be done based on whether
an app is distributed with a native code component (i.e., built
with Android NDK). In fact, Android apps without the native
code component are less likely to be exploited to leak memory
layout information compared to the apps with the native code
component, because the native code distributed with each app
can be an easy target for attackers. Apps without the native
code components only run the default libraries in Android, and
these libraries are well-maintained by either device vendors or
Google, as they are widely used. However, apps with native
code components may load uncommon third-party native code,
and many of them are not well-maintained and out dated. Note
that this approach sacriﬁces security for performance beneﬁts,
and thus it should be applied with the proper understanding of
its limitations (Section VI).
Our selective randomization strategy simply reroutes app
launch requests for a non-NDK app to the old Zygote process
creation model, saving the prepared Morula processes for those
apps that may be a concern for leaking address layout or
evading ASLR. In general, checking if an app contains or
432
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
uses native code can be easily achieved by searching for binary
executables in the package or JNI declarations in the bytecode.
However, we are aware of techniques, such as binary ﬁle
obfuscations, remote bytecode, Java reﬂections, etc., that can
be used to hide the use of native code, and in turn, abuse
this optimization to bypass Morula. A simple solution is to
instrument the JNI binding component inside the DVM and
reject stealthy 3rd party native code. We leave this as future
work.
D. System Implementation
We used Android 4.2 (Jelly Bean) as the reference plat-
form to prototype Morula. The implementation is generic to
all Android versions, including the latest 4.42, and can be
ported to them without changes. To minimize the changes
introduced to the OS and maintain backward compatibility, we
implemented Morula on top of the current Android process
manager and conﬁned Morula’s code within two existing
modules: the Activity Manager and the Zygote daemon. The
Activity Manager is extended to dynamically maintain a pool
of Morula processes and fulﬁll app launch requests using
either a prepared Morula process or a forked Zygote process,
depending on the selective randomization strategy. The code
added to the Zygote daemon handles Morula preparation
requests and creates Morula processes accordingly. The new
daemon also checks the system property that indicates whether
on-demand loading is enabled. When possible, our code reuses
the existing initialization and specialization routines in Zygote,
which have been peer-reviewed and deployed in the real world
for years. All
inter-module requests are sent and received
through pipes or sockets. The sender’s UID is always
checked to make sure that only system modules can interact
with Morula, avoiding abuses or attacks from malicious apps.
Morula only adds 548 lines of Java code and 197 lines of
C code to the Android OS, which we hope can be promptly
reviewed by the security community and soon merged into
the Android Open Source Project. We believe this simple and
effective countermeasure can be easily adopted by vendors
without any technical hurdles. The implementation is generic
to all versions of Android and free of compatibility issues with
vendor-speciﬁc OS customizations, which are implemented at
a much higher level than Morula.
V. EVALUATION
In this section we report of our evaluation of Morula and its
comparison with the original Android system. First, we evalu-
ated the effectiveness of ASLR by determining whether Morula
can provide different memory layout among Android processes
and prevent our proposed attacks. Second, we measured end-
to-end device boot performance to see whether Morula can be
used by real-world users without noticeable overheads. Lastly,
we conducted Android compatibility tests to check whether
Morula causes compatibility issues with either Android apps
or the OS. All experiments were conducted on the Galaxy
Nexus, which has a dual-core 1200 MHz CPU (ARM Cortex-
A9), 1 GB RAM, and 32 GB built-in storage.
2 Android 4.4 (KitKat) introduced an experimental feature, ART, which
pre-compiles an app’s bytecode into native code at installation-time [6]. This
feature changes various aspects of the Android OS and DVM, but ART is also
relying on the Zygote process creation model to speed up the app launches.
A. ASLR Effectiveness
The goal of Morula is to make ASLR effective without
degrading performance so that a commodity Android system
can prevent the attacks described in Section III. We measured
the effectiveness of ASLR in two ways: examining randomness
of the memory layout of the entire Android system, and
estimating how much effort is required to bypass ASLR by
an attacker.
System-wide Randomness. Based on our experience of break-
ing the ASLR scheme, we deﬁne a measure of a memory
layout’s randomness and use this measure to check whether
the address space layout
in the entire Android system is
sufﬁciently random. If it is, no attacker can guess exploitable
target addresses in other applications from leaked memory
addresses.
First, we measure the address space layout randomness of
each shared library using the notion of entropy [10]. Since
entropy captures the uncertainty of a given random variable, we
can apply this to measure the address space layout randomness
by treating the possible addresses as a random variable.
To be speciﬁc, let Xm be a discrete random variable with
base addresses {x1, x2, ..., xn} for a shared library m, and
p(xi) is a probability mass function (pmf). Then H(Xm), the
normalized address space layout entropy of the shared library
m, is deﬁned as
H(Xm) = − n(cid:2)
i=1
p(xi)
ln p(xi)
ln n
,
and 0 ≤ H(Xm) ≤ 1 due to the normalization factor ln n.
H(Xm) becomes zero when the shared library m is mapped
to the same address for all different apps, and becomes one
when it is mapped to all different and unique addresses.
For example, suppose libc.so is loaded by four Android
apps at the same address, 0x1000. Then the output of pmf
will be p(0x1000) = 1, and the address space layout entropy of
libc.so is computed as H(Xlibc.so) = 0. However, suppose
libssl.so is loaded by four Android apps at four different
addresses {0x1000, 0x2000, 0x3000, 0x4000}. In this case,
the outputs of pmf will be always 0.25 because each address
is uniformly distributed, and H(Xlibssl.so) = 1.
Based on the randomness on each shared library above, the
address space layout randomness of an entire Android system
in the device D is deﬁned as
(cid:9)
m∈M
H(Xm)
|M|
,
R(D) =
where M is a set of shared libraries running on the device D
and |M| is a size of M. Thus, R(D) shows the averaged ad-
dress space layout randomness for all shared libraries running
in the device D.
We measured R(D) on our Android device after booting is
ﬁnished, and different process creation models were applied for
the boot procedure. As shown in Figure 7, the current Android
(labeled as Zygote) has 0.127 entropy, which means the current
shared libraries among Android applications mostly share their
address space layouts. Therefore, it is possible for attackers to
exploit vulnerable applications by guessing target addresses
433
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
Mode
Zygote
Wrap
Morula
R(D)
0.127
0.993
0.992
T (D)
1
19,373
18,360
Fig. 7. ASLR effectiveness; R(D) denotes the averaged address space layout
randomness and T(D) denotes the averaged number of trials for successful
ASLR bypassing.
based on leaked addresses. Note that entropy for Zygote is not
zero because a few shared libraries are independently loaded
by apps, which results in different base addresses for such
libraries. Morula along with Wrap, however, has more than
0.990 entropy. This suggests that an Android system with
Morula deployed has heterogeneously different address space
layouts for apps, and thus it is difﬁcult for attackers to correctly
guess the address space layouts.
Number of Trials to Bypass ASLR. To see how Morula helps
an Android system prevent remote coordinated or local trojan
attacks, we ﬁrst design a cross-ASLR attack model and use
this model to measure the attacker’s required efforts to bypass
ASLR. In this model, it is assumed that the attacker already
leaked a single piece of address information: the address x for
a certain application ai. Based on such leaked information,
the attacker tries to further infer a semantically equivalent
addresses in other applications. The semantically equivalent
address here refers to the address with the identical memory
values or footprints in other applications. For example, two
addresses in separate apps are semantically equivalent address
if those two point to the same library with the same offset.
It is also assumed that the attacker has prior knowledge of
the memory layout in that semantically equivalent addresses
are in similar locations for two apps3, and the attacker has
access to a decision oracle to test whether the given address is
semantically equivalent in the other application. An example
of how to query an oracle,
is exploiting the
target application with the guessed address and then making
a decision based on the result: accept
if the exploitation
was successful, and reject if the exploitation failed (e.g., an
application crashed).
in practice,
Based on the assumptions described above, a cross-ASLR
attack is described in Algorithm 1. Given the leaked address x,
the attacker tries to ﬁnd a semantically equivalent address for
the other target application. The attacker queries the decision
oracle repeatedly, starting from the leaked address x and
stepping up/down by adding/subtracting the current address
with a page offset. This is because the base addresses in the
library are aligned at page boundaries and the semantically
equivalent addresses are located in similar areas, as per the
attacker’s prior knowledge.
3 This prior knowledge is based on widely used techniques to break
ASLR deployed systems. For example, to bypass stack address randomization,
attackers usually get
the rough stack base addresses from other systems
running similar execution environments (i.e., an operating system with same
distribution and version) [42]. The other reasoning behind this is that the
base address for each library is in the order of its loading due to the
functions of mmap() system call implementations and such a loading order is
deterministic [21].
Zygote
Wrap
Morula (no opt)
Morula (on-demand load)
Morula (selective rand.)
Morula (both opt)
)
s
d
n
o
c
e
s
(
e
m
i
t
t
o
o
B
80
60
40
20
0
)
B
M
(
e
s
u
y
r
o
m
e
m
l
a
o
t
t
f
o
e
z
s
A
i
Zygote
Wrap
Morula (no opt)
Morula (on-demand load)
Morula (selective rand.)
Morula (both opt)
800
600
400
200
0
(a) Booting time
(b) Memory usage
Fig. 8. End-to-end boot-time performance overheads of Morula compared to
the default Zygote process creation model. Morula increased boot time 230%
and memory usage 269%. After applying both optimizations, however, Morula
decreased boot time 3% and increased memory usage 34%.. We measured boot
time and total memory usage immediately after Android becomes ready to use.
Performance beneﬁts from selective randomization need careful interpretations
(Section VI).
Algorithm 1 Cross-ASLR Attack
// In : an address ptr leaked by an attacker
// Out: a semantically equivalent address in
//
the other target application
// walk away from ptr, by PAGE_SIZE step
for (offset = 0;; offset += PAGE_SIZE) {
for (target in {ptr-offset, ptr+offset}) {
// found semantically equivalent address
if (ORACLE(target) == ACCEPT)
return target;
}
}
Thus, since each oracle access involves additional costs
(e.g., observing crashes),
the attacker’s required efforts to
bypass ASLR is directly related to the number of oracle
accesses. We call this number of oracle accesses the number of
trials, and count the number of trials using the address space
layout immediately following device boot. This is shown as
T (D) in Figure 7. The count under the Zygote model is one,
which indicates that the attacker would be successful on the
ﬁrst try. However, under the Morula model, the attacker would
face immense challenges in that they need to try more than
18,000 times. This suggests that the attacker needs to search
more than 18,000 memory pages or crash the app more than
18,000 times to correctly guess the address. We believe that
this huge number of trials makes the attack meaningless and
shows that Morula signiﬁcantly raises the bar for attackers to
bypass ASLR.
B. Performance Overheads
End-to-end Boot-time Performance Overheads. To compare
the performance overhead, we evaluated each process creation