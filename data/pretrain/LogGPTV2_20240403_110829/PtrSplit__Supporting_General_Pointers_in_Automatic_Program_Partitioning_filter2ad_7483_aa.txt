title:PtrSplit: Supporting General Pointers in Automatic Program Partitioning
author:Shen Liu and
Gang Tan and
Trent Jaeger
PtrSplit: Supporting General Pointers in Automatic Program
Partitioning
The Pennsylvania State University
The Pennsylvania State University
Shen Liu
University Park, PA
PI:EMAIL
Gang Tan
University Park, PA
PI:EMAIL
Trent Jaeger
The Pennsylvania State University
University Park, PA
PI:EMAIL
ABSTRACT
Partitioning a security-sensitive application into least-privileged
components and putting each into a separate protection domain
have long been a goal of security practitioners and researchers.
However, a stumbling block to automatically partitioning C/C++
applications is the presence of pointers in these applications. Point-
ers make calculating data dependence, a key step in program par-
titioning, difficult and hard to scale; furthermore, C/C++ pointers
do not carry bounds information, making it impossible to automat-
ically marshall and unmarshall pointer data when they are sent
across the boundary of partitions. In this paper, we propose a set of
techniques for supporting general pointers in automatic program
partitioning. Our system, called PtrSplit, constructs a Program De-
pendence Graph (PDG) for tracking data and control dependencies
in the input program and employs a parameter-tree approach for
representing data of pointer types; this approach is modular and
avoids global pointer analysis. Furthermore, it performs selective
pointer bounds tracking to enable automatic marshalling/unmar-
shalling of pointer data, even when there is circularity and arbitrary
aliasing. As a result, PtrSplit can automatically generate executable
partitions for C applications that contain arbitrary pointers.
KEYWORDS
Automatic program partitioning; bounds tracking; data marshalling
1 INTRODUCTION
Following the principle of least privilege, privilege separation in
software refers to separating a software application into multiple
partitions, each with its own set of privileges. Partitions are isolated
so that the compromise of one partition does not directly lead to the
compromise of other partitions. Function calls between partitions
are realized by Remote-Procedure Calls (RPCs); data for an RPC
are marshalled and sent to the callee, which unmarshalls the data,
performs its computation, and sends the result back to the caller.
Privilege separating programs in low-level, type-unsafe lan-
guages such as C/C++ is especially beneficial to security because
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134066
these programs are prone to attacks (e.g., attacks enabled by mem-
ory vulnerabilities). For instance, OpenSSH was refactored by Provos
et al. to have unprivileged monitor processes for handling user con-
nections and one privileged server process [28]. Another example
is the microkernel operating-system design, in which a minimum
amount of code is kept in the kernel and most OS functionalities
are pushed outside. Yet another example is Google’s Chromium
browser, which isolates each tab into a sandboxed process [1, 29].
These manual restructuring efforts have significantly improved
the security of the relevant software; however, they are labor inten-
sive and sometimes error-prone.
Several systems [3, 5, 21, 32] have been proposed to apply pro-
gram analysis to separate C/C++ applications automatically into
partitions, from a small number of user annotations about sensitive
data. These systems demonstrate automatic program partitioning
can be practical. However, one major limitation of these systems is
that they lack good support for pointer data, which are prevalent
in C/C++ applications. In particular,
• C-style pointers do not carry bounds information; when
a pointer needs to be sent across the partition boundary
in an RPC call, marshalling does not know the size of the
underlying buffer and consequently cannot marshall the
buffer automatically. Some systems adopt heuristics when
marshalling pointer data (e.g., a “char *” pointer is assumed
to point to a null-terminated string); however, programmers
are often required to write marshalling and unmarshalling
code manually for pointer data, especially for pointers that
point to dynamically allocated buffers. Some systems avoid
the problem by restricting the partitioning algorithm to not
create partitions that require pointer passing; this design,
however, limits the flexibility of where partitions can be
created.
• A program-partitioning algorithm needs to reason about
dependence in a program to decide where to split. When the
program has pointers, a global pointer analysis is typically
required to understand aliasing and how data flow in mem-
ory. However, global pointer analysis is often complex and
does not scale to large programs.
In this paper, we propose a series of techniques that enable the
support of pointers in automatic program partitioning. These tech-
niques are implemented and evaluated in a system called PtrSplit.
Its major techniques and contributions are as follows:
• Taking source code as input, PtrSplit constructs a static
Program-Dependence Graph (PDG) for the program. A fea-
ture in PtrSplit’s PDG that distinguishes it from previous
Session K3:  Program AnalysisCCS’17, October 30-November 3, 2017, Dallas, TX, USA2359PDGs for imperative programs is a technique called parame-
ter trees. It provides a modular way of constructing the PDG
for a program with pointers; as a result, only an intraproce-
dural pointer analysis is needed, instead of a global pointer
analysis. Our tree representation generalizes the object-tree
approach in prior work [19], which discussed a tree repre-
sentation for objects in object-oriented languages and did
not cover pointers at the language level; our system uses the
tree representation for representing pointers in imperative
languages and deals with circular data structures resulting
from pointers.
Based on the PDG, PtrSplit performs a standard reachability-
based program-partitioning algorithm that separates the
program into a partition that accesses sensitive data and
a partition for the rest of the code.
• To marshall pointers, PtrSplit instruments the program so
that pointers carry bounds information. However, prior work
shows that full pointer bounds tracking incurs significant
performance overhead. PtrSplit makes the critical observa-
tion that program partitioning does not need full pointer
tracking—it is sufficient to track the bounds of pointers that
cross the partitioning boundary. Therefore, given an arbi-
trary partitioning of the program, PtrSplit computes a set of
pointers that require bounds information and instruments
the program to track the bounds of only those pointers. We
call this selective pointer bounds tracking.
• PtrSplit generates code that performs marshalling and un-
marshalling for data sent over an RPC call. This is auto-
matic even for pointer data because all pointers that cross
the partition boundary carry bounds information. We de-
scribe a type-based algorithm for performing deep copies of
pointer data, which can cope with the situation of circular
data structures and arbitrary aliasing, without user involve-
ment. For instance, PtrSplit allows one partition to send a
circular linked list to a second partition.
The prototype of PtrSplit is implemented inside LLVM; our pre-
liminary evaluation on security-sensitive benchmarks and compute-
intensive benchmarks suggests the system is already practical for
C applications with pointers and can produce executable partitions
with a modest amount of performance overhead.
2 RELATED WORK
Several tools have been proposed to assist programmers in program
partitioning. Privman [16] is a library for helping programmers
manually partition their applications to control access to privileged
system calls. Wedge [3] provides a dynamic profiling tool for parti-
tioning assistance. It collects statistics about how a program uses
memory to help programmers draw partition boundaries; how-
ever, programmers still need to perform manual code changes and
partitioning. Trellis [22] infers access policies on code and data
in multi-user applications from user annotations and enforces the
policies through a modified OS.
Automatic program partitioning employs program analysis and
separates a program into multiple partitions, with minimum user
involvement. Privtrans [5] performs static analysis to automati-
cally partition a C application into a privileged master process
2
with sensitive information and an unprivileged slave process. Pro-
gramCutter [32] collects a dynamic dependence graph via profiling
and performs graph partitioning to produce partitions that bal-
ance performance and security using a multi-terminal minimal cut
algorithm. SeCage [21] employs hybrid static/dynamic analysis
to compute a set of functions that can access secrets and isolates
the sensitive partition via hardware virtualization support. Jif/s-
plit [33, 35] automatically partitions a Java source program based
on security-label annotations and a description of trust relation-
ships between protection domains. Swift [7] generalizes Jif/split
for the development of web applications by exploring general al-
gorithms for improving both security and performance. With the
emergence of Trusted Execution Environments (TEEs), there have
also been program-partitioning frameworks that target Intel’s SGX
or ARM’s TrustZone. For instance, Rubinov et al. [30] proposed a
static-analysis framework that partitions an Android application
into one component that runs in TrustZone’s secure world and one
that runs in TrustZone’s normal world. A similar system called
Glamdring [20] targets Intel’s SGX.
All the aforementioned automatic program partitioning frame-
works, either partition programs in languages that do not have
explicit pointers (e.g., Java) or require programmers to manually
write marshalling and unmarshalling code for pointer data [5, 32];
furthermore, data dependence computed by these frameworks that
partition C/C++ application are incomplete in the presence of point-
ers and can lead to incorrect partitioning results. In contrast, Ptr-
Split uses a PDG representation that soundly represents pointer
data as parameter trees, and tracks pointer bounds for automatic
marshalling and unmarshalling without user involvement.
PtrSplit partitions programs so that sensitive data within the
sensitive partition cannot be directly or indirectly accessed by the
insensitive partition. It is a form of controlling the flow of sen-
sitive information. Information flow can be controlled in other
mechanisms, through dynamic information-flow flow tracking as
in systems such as Asbestos [10], HiStar [34], and Flume [17], or
a capability model as in Capsicum [31], or via a static language
mechanism such as Jif [23].
3 SYSTEM OVERVIEW
Fig. 1 presents PtrSplit’s workflow. It takes the source code of a sin-
gle threaded C application as input; the code has been annotated by
the programmer with information about sensitive and declassified
data. Sensitive data can be either confidential data (e.g., keys) or
data from an untrusted source (i.e., tainted data such as user input).
The source code is converted to an LLVM IR program by LLVM’s
front end. PtrSplit then constructs the PDG for the IR program.
A PDG-based algorithm then computes two raw partitions: one
sensitive raw partition that can access sensitive data and one in-
sensitive raw partition with the rest of the code. However, raw
partitions cannot run directly because after partitioning some func-
tion calls become Remote-Procedure Calls (RPCs) and it is necessary
to add RPC wrapper code for data marshalling and unmarshalling.
In PtrSplit, each partition is loaded into a separate process, so RPC
wrapper code must be added for inter-process communication.
Based on raw partitions, PtrSplit performs selective pointer
bounds tracking, which tracks bounds information for pointers
Session K3:  Program AnalysisCCS’17, October 30-November 3, 2017, Dallas, TX, USA2360Figure 1: The workflow of our automatic program-partitioning framework (gray components belong to PtrSplit).
whose values can potentially cross the partitioning boundary. Bounds
information for pointers is then used by a type-based method, which
generates RPC wrappers that perform data marshalling and unmar-
shalling for inter-process RPC calls. In the end, PtrSplit generates
one executable partition with all sensitive code, data, and RPC wrap-
pers, and also an executable partition with insensitive code, data,
and RPC wrappers.
A running example. We will illustrate the main points of PtrSplit
by a toy example in Fig. 2. The example takes a username and a
text input from the user, greets the user by the greeter function,
initializes a key, and encrypts the text by xor-ing it with the key.
The global key is the sensitive data that needs protection; therefore,
it is marked sensitive using a C attribute. Note the program has a
format-string vulnerability at line 6 in greeter, which could allow
an attacker to take over the program and learn the key.
Intuitively, a partitioning framework should put the greeter
function into the insensitive partition since no sensitive data can
flow to it. Other functions, including initkey, encrypt, and main
should be in the sensitive partition since key may be accessed
by them directly or indirectly. This partitioning would isolate the
format-string error in greeter into the insensitive partition and pre-
vent the attacker from learning the key. Similar to other partitioning
frameworks, PtrSplit also supports declassification. If ciphertext
is annotated as declassified data, main can also stay in the insen-
sitive partition even though it accesses ciphertext; in this way,
vulnerabilities in main are isolated.
4 PDG AND PARTITIONING
Program partitioning requires analyzing dependence in an input
program carefully and adjusting the program to a distributed pro-
gramming style. A key step in PtrSplit is to construct for the pro-
gram a graph representation of dependencies, called the Program
Dependence Graph (PDG [11]); two follow-up steps in PtrSplit in-
cluding program partitioning and selective pointer bounds tracking
are performed on the PDG, as we will discuss.
Conceptually, a PDG represents a program’s data and control
dependence in a single graph and can facilitate static analysis in-
cluding program slicing and automatic parallelization. There are
many systems that construct PDGs for programs in different lan-
guages and with different precision. A distinguishing feature of
our PDG construction is its approach of parameter trees for rep-
resenting composite data (e.g., pointers) that are passed during
function calls and returns. We will start explaining nodes and edges
that are common in a PDG representation in Sec. 4.1, and discuss
the parameter-tree approach in Sec. 4.2. In this discussion, we will
use examples in C for readability, even though PtrSplit constructs
PDGs for LLVM IR programs; the IR-level PDG construction will
be explained in Sec. 4.3. Finally, we present a standard PDG-based
partitioning algorithm in Sec. 4.4.
4.1 Regular Nodes and Edges in PDGs
Every instruction in the program is represented as an instruction
node in a PDG. For edges, there are data/control dependence edges
and call edges.
In general, an instruction node n1 is data dependent on instruc-
tion node n2 if n1 uses some data produced by n2. Our PDGs have
two kinds of data-dependence edges:
(1) there is a def-use dependence if n1 uses a variable x that is defined
in n2; an edge from n2 to n1 with label x is added.1
(2) there is a RAW (Read-After-Write) dependence if n1 reads mem-
ory that was written by n2 and an edge from n2 to n1 is added
with label id, assuming id points to the memory in question.
An example of def-use dependence is as follows. Variable x is
defined in “x = 1” and later used in the assignment to y.
x = 1;
... // x not modified
y = x + x;
1The edge direction reflects the dataflow direction, instead of the direction of depen-
dence; this makes algorithms on PDGs easier to state.
3
Session K3:  Program AnalysisCCS’17, October 30-November 3, 2017, Dallas, TX, USA2361char __attribute__((annotate("sensitive"))) *key
;
char *ciphertext;