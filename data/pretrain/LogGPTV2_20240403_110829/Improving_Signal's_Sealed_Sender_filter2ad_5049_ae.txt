### Improved Text

To enhance the system, we introduce two additional protocols: **Get Signed Mailbox Key** and **Open a Mailbox**. These protocols are designed to allow users to register new public keys in a secure and anonymous manner.

#### Get Signed Mailbox Key
1. **User Authentication**: The user, \( P_s \), authenticates to the service provider using their long-term identity, \( pk_s \). The server verifies that the client has not exceeded their quota of generated ephemeral identities.
2. **Key Generation**: The client generates a new key pair \((pke, ske) \leftarrow \Pi_{ssenc}.SSKeyGen(1^\lambda)\).
3. **Blinding Public Key**: The client blinds the public key \( pke \) with \( b \leftarrow \Pi_{bs}.BSBlind(pke, pk_{sign}; r) \), where \( r \leftarrow \{0, 1\}^\lambda \).
4. **Server Signing**: The server signs the blinded public key with \( sblind \leftarrow \Pi_{bs}.BSSign(b, sk_{sign}) \) and returns the blinded signature to the client.
5. **Signature Extraction**: The client extracts the real signature locally with \( \sigma_e \leftarrow \Pi_{bs}.BSExtract(sblind, pk_{sign}; r) \).

#### Open a Mailbox
1. **Anonymous Connection**: The client connects anonymously to the server and sends \( (pke, \sigma_e) \).
2. **Verification and Uniqueness Check**: The server verifies \( \Pi_{bs}.BSVerify(pk_{sign}, \sigma_e) = 1 \) and checks that \( pke \) has not been used before.
3. **Mailbox Registration**: If the verification is successful and \( pke \) is unique, the server registers an anonymous mailbox with the key \( pke \) and sets an expiration date.

### Integration into Sealed Sender Conversations
Integrating these protocols into one-way and two-way sealed sender conversations is straightforward. At the beginning of each time period (e.g., daily), users can run the **Get Signed Mailbox Key** protocol up to \( k \) times, where \( k \) is a fixed constant determined by the system. When a user needs to open a mailbox, they execute the **Open a Mailbox** protocol. The process of sending and receiving messages remains unchanged.

### Security Considerations
1. **Regular Key Updates**: The signing key for the blind signature scheme, \( pk_{sign} \), should be updated regularly.
2. **Expiration of Mailboxes**: Anonymous mailboxes should have an expiration date. Without these measures, malicious users could accumulate enough anonymous credentials or open mailboxes to launch a denial-of-service attack.

### Network Conditions and Performance
We tested the feasibility of using blind signatures by implementing the protocols for a single client and server. The cryptographic overhead was evaluated using RSA-2048 ciphertexts and ECDSA. The networking for both the client and server were implemented in Python, with the Django web framework on the server. An RSA-2048 blind signature library in Java was also developed and called via RPC.

#### Timing Results
- **ECDSA KeyGen**: 0.049 seconds (client local), 0.049 seconds (server local)
- **Open a Mailbox**: 0.061 seconds (client local), 0.032 seconds (server local)
- **Get Signed Mailbox Key**: 0.013 seconds (client local), 0.039 seconds (server local)

The communication overhead for running the full protocol is less than 1KB, consisting of 3 RSA-2048 ciphertexts and 1 ECDSA public key.

### Deployment Considerations
1. **Key Rolling**: The server must maintain a database of previously registered ephemeral identities to prevent re-use. This database must be maintained for as long as the identities are valid.
2. **Regular Intervals**: Users should perform the **Get Signed Mailbox Key** at regular intervals, but avoid performing both operations immediately if sending to a new conversation.
3. **Cost Overhead**: Supporting 10 million anonymous mailboxes per day would cost approximately $40 per month, including AWS Lambda and DynamoDB costs.

### Discussion
#### Other Solutions
- **Random Delays**: Sending delivery or read receipts after a random delay can make it harder for attackers to correlate messages, but it is ineffective against our attack.
- **Cover Traffic**: Sending random sealed-sender messages to cover the true pattern of ongoing conversations can slow down the attack, but it has significant costs for the service provider.
- **Disable Automatic Receipts**: Allowing users to disable delivery receipts can mitigate the attack, but it requires mutual agreement and does not fully solve the problem.

#### Drawbacks and Likelihood of Adoption
- **Complexity**: Adding complexity to the system increases the likelihood of errors and vulnerabilities.
- **Network Information**: A malicious service provider could use network information to identify users, which can be mitigated by using Tor.
- **Multi-Device Support**: Managing ephemeral identities across multiple devices adds complexity.

Despite these drawbacks, the proposed solution is practical and cost-effective, making it a reasonable option for adoption by Signal or other secure messengers.

#### Group Messaging
Extending the solution to group messaging is an important future direction. While the main solution can be applied, the initial configuration and key management in a group setting are more complex.

### Related Work
- **Attacks on Mobile Messaging**: Many mobile messaging services are vulnerable to attacks, even with encryption.
- **Statistical Disclosure Attacks (SDAs)**: SDAs have been studied extensively, and recent variants aim to learn sender-receiver correlations over large numbers of observations.
- **Private Messaging**: End-to-end encrypted messaging applications like WhatsApp, Telegram, and Signal are gaining popularity, but they still face challenges in providing complete anonymity.

### Conclusion
In this work, we analyze and improve upon Signal's sealed sender messaging protocol. We identify a statistical disclosure attack that can identify message senders despite the sealed sender protocol. Our proposed solution involves users registering ephemeral mailbox identities, which provides better anonymity and security.