at a time. The Arbitrum standard library provides code to
do this as well as track when new messages have arrived
in the inbox.
4.4 Extensions
In this section, we describe extensions to Arbitrum’s de-
sign that may prove useful, particularly when the Arbi-
trum Veriﬁer is implemented as a public blockchain.
Off-chain progress Arbitrum allows VMs to perform
orders of magnitude more computation than existing sys-
tems at the same on-chain cost. However, usage of VMs
frequently depends on communication between a VM’s
managers and the VM itself. In our prior description of
Arbitrum’s protocol, this communication had to be on-
chain and thus was limited by the speed of the consensus
mechanism. Arbitrum is compatible with state-channel
and sidechain techniques, and there are several construc-
tions that allow managers to communicate with a VM
and unanimously advance a VM’s state off-chain. We
present details of one such construction in the extended
version of this paper.
Zero Knowledge one step proofs While Arbitrum has
good privacy properties, there is one scenario in which a
small privacy leak is possible. A manager submitting a
one step proof will be forced to reveal some of the state
as part of the proof. While only a small portion of the
state will be revealed for each challenge, and only if the
managers fail to agree on a unanimous assertion, this can
potentially be sensitive data.
We can instead implement the one step proof as a
zero-knowledge protocol using Bulletproofs [7]. To do
so will require encoding a one step VM transition as an
arithmetic circuit and proving that the transition is valid.
While we could use SNARKs [4, 16, 27], Bulletproofs
have the beneﬁt that they do not require a trusted setup.
Although veriﬁcation time for Bulletproofs is linear in
the circuit, considering that a one-step transition circuit
will be small, and that one-step proofs will be infrequent
events, this should not be a problem in practice.
While zero-knowledge proofs can in theory be used to
prove the correctness of the entire state transition (and
not just a single step), doing this for complex computa-
tions is not feasible with current tools. Combining the
challenge and bisection protocol with a zero-knowledge
proof only at the last step allows us to simultaneously
achieve scalability and full privacy. This takes advantage
of the fact that the Arbitrum VM is designed to simplify
one-step proofs.
Reading the Blockchain In our current design, Arbi-
trum VMs do not have the ability to directly read the
blockchain.
If launched as a public blockchain, we could easily
extend the VM instruction set to allow a VM to read the
blockchain directly. To do so, we would create a canon-
ical encoding of a block as an Arbitrum tuple, with one
ﬁeld of that tuple containing the tuple representing the
previous block in the blockchain. This would allow a
VM that had the tuple for the current block to read earlier
blocks. The precondition of an assertion would specify
a recent block height, and the VM would have a special
instruction that pushes the associated block tuple to the
stack. In order to be able to verify a one-step proof of
this instruction, the Veriﬁer just needs to keep track of
the Arbitrum tuple hash of each block (just a single hash
per block).
We stress that reading the blockchain does not require
putting lots of data on a VM’s data stack. A blockchain
read consists of putting just the top-level tuple of the
speciﬁed block on the stack. To read deeper into the
blockchain, this tuple can be lazily expanded, providing
the VM with just the data that it needs to read the desired
location.7
7Note that reading the blockchain in this manner supports oblivious
reads compatible with zero-knowledge proofs, as the Veriﬁer does not
need to know what position (if any) in the blockchain is being read.
The Veriﬁer need only verify the top-level tuple hash, which is the hash
of a recent block. If the tuple was expanded to read deeper into the
blockchain, this all happens inside Arbitrum application code and the
location of the read will not be published on-chain. In this manner,
blockchain reads are fully compatible with zero-knowledge one-step
proofs. In particular, the Veriﬁer would always provide the speciﬁed
block tuple hash as an input to the zero-knowledge proof. If indeed
the one-step proof is on a read-blockchain instruction, the proof would
verify that the correct hash was put on the stack. The zero knowledge
proof would not leak information as to whether the blockchain was ac-
tually read (as the block hash is always an input to the proof even if no
read occurred) or where on the blockchain a read occurred (since the
current block tuple could have been expanded inside Arbitrum applica-
tion code to read anywhere in the blockchain).
1362    27th USENIX Security Symposium
USENIX Association
5
Implementation and Benchmarks
to be written to the blockchain.
In order to reﬁne and evaluate Arbitrum, we produced
a full implementation of the Arbitrum system. This in-
cludes code to represent all parties involved: a central-
ized Veriﬁer, a VM, an honest manager, and a key-based
actor. These parties are fully capable of performing
all parts of the Arbitrum protocol. Our implementation
comprises about 6800 lines of Go code, including about
3400 lines for the VM emulator, 1350 lines for the as-
sembler and loader, 650 lines for the honest manager,
550 lines for the Veriﬁer, and the remainder for various
shared code.
In order to ease the coding of more powerful smart
contract VMs, we implemented the Arbitrum standard
library which contains about 3000 lines of Arbitrum
assembly code, supporting useful data structures such
as large tuples, key-value stores, queues, and character
strings; and utilities for handling messages, currency, and
time.
We demonstrate the power and versatility of this im-
plementation by implementing two smart contracts.
5.1 Escrow Contract
We ﬁrst discuss a simple escrow contract. The escrow
code ﬁrst waits for a message containing the identities
of three parties (Alice, Bob, and Trent) and an integer
deadline, along with some amount of currency that the
VM will hold. The VM then waits for a message from
Trent, ignoring messages that arrive from anybody else.
If the message from Trent contains an even integer, the
VM sends the currency to Alice and halts. If the mes-
sage from Trent contains something else, the VM sends
the currency to Bob and halts. If the current time exceeds
the deadline, the VM sends half of the currency to Alice,
the remaining currency to Bob, and then halts. This re-
quires 59 lines of Arbitrum assembly code, which makes
signiﬁcant use of the standard library. The executable ﬁle
produced by the assembler contains 4016 instructions.
Executing the contract requires 5 total transactions to
be added to the blockchain. The initial create VM trans-
action is 309 bytes. After that a 310 byte message is sent
to the VM communicating the identities of the parties in-
volved and the deadline, and giving currency to the VM.
Next, Trent indicates his verdict by sending a 178 byte
message to the VM.
Next, the VM must be executed to actually cause the
payouts. First a 350 byte assertion is broadcast, assert-
ing the execution of 2897 AVM instructions, leaving the
VM in the halted state. Next after the challenge win-
dow has passed, a conﬁrmation transaction of 113 bytes
is broadcast conﬁrming and accepting the asserted exe-
cution. The entire process requires a total of 1,260 bytes
Iterated Hashing
5.2
One area where Arbitrum shines is the efﬁciency with
which it can carry out VM computation. To demonstrate
this, we measured the throughput of an Arbitrum VM
which performs iterative SHA-256 hashing. The code for
this VM is an inﬁnite loop where the VM hashes 1000
times and then jumps back to the beginning. The VM
code makes use of the AVM’s hash instruction, which is
implemented in native code.
We evaluated operating performance of this VM on
an early 2013 Apple MacBook Pro, 2.7GHz Intel Core
i7. As a baseline, using native code on the same ma-
chine, we were able to perform 1,700,000 hashes per
second. Running the VM continuously we were able to
advance the VM by 970,000 hashes per second. Our im-
plementation was able to achieve over half of the raw
performance of native code. This stands in compari-
son to Ethereum, which is capable of processing a to-
tal of approximately 1600 hashes per second (limited by
Ethereum’s global gas limit, which is required due to the
Veriﬁer’s Dilemma).
Arbitrum’s performance advantage extends further.
While we demonstrated the current limit on execution in-
side a single VM, the Veriﬁer is capable of handling large
numbers of VMs simultaneously.
Instantiating many
copies of the Iterated Hashing VM, we measured that
the Veriﬁer node running on our machine was capable of
processing over 5000 disputable assertions per second.
This brings the total possible network throughput up to
over 4 billion hashes per second, compared to 1600 for
Ethereum.
6 Background and related work
6.1 Refereed Delegation
The problem of delegating computation involves a
resource-bounded client outsourcing computation to a
more powerful server. The server should provide a proof
that it correctly carried out the computation, and check-
ing the proof should be far more efﬁcient for the veriﬁer
than performing the computation itself [17].
Refereed-delegation (RDoC) is a two-server protocol
for the problem of delegating computation [10, 11]. The
computation is delegated to multiple servers that inde-
pendently report the result to the client. If they agree,
the client accepts the result. If the servers disagree, how-
ever, they undergo a bisection protocol to identify a one-
step disagreement. The client can then efﬁciently eval-
uate the single step to determine which server was ly-
ing. Aspects of Arbitrum’s bisection protocol are very
USENIX Association
27th USENIX Security Symposium    1363
similar to RDoC. In Arbitrum, it is as if the Veriﬁer is
outsourcing a VM’s computation back to the VM’s man-
agers, who in many cases are the parties interested in the
VM’s computation. Arbitrum’s VM architecture makes
dispute resolution very efﬁcient.
6.2 Bitcoin
Bitcoin is a decentralized digital currency [26].
Bitcoin natively supports only a simple scripting lan-
guage that is not Turing Complete and is mainly used for
signature validation. Many techniques have been devel-
oped to allow more complex scripting on top of Bitcoin’s
scripting language. These generally fall into two cate-
gories: (1) protocols that use cryptographic tools to en-
able more complex functionality while restricting them-
selves to Bitcoin’s scripting language, and (2) protocols
that use Bitcoin as a consensus layer, including raw data
on the blockchain with additional validation rules known
by nodes running the protocol, but not validated by the
Bitcoin miners.
The ﬁrst variety of scripting enhancements include
zero-knowledge contingent payments [3, 9, 23] that are
able to realize a fair exchange of digital goods. While
powerful and efﬁcient, zero-knowledge contingent pay-
ments are limited and unable to realize general smart
contracts. The latter variety, which includes Counter-
party [1] and Open Assets [12], pushes the entire effort
of validation onto every wallet. In these overlay proto-
cols, every node must validate every transaction (even
those that they are not a part of) in order to have conﬁ-
dence in correctness. Contrast this to Arbitrum in which
miners guarantee the correctness of all monetary transac-
tions, and nodes must only monitor the internal state of
the VMs they care about.
6.3 Ethereum
Ethereum [31] is a digital currency that supports state-
ful, Turing-complete smart contracts. Miners emulate a
contract’s code and update the state accordingly. In or-
der for an Ethereum block to be valid, miners must cor-
rectly emulate all of the contract computations that they
include in their block and correctly update the state (in-
cluding monetary balances) to reﬂect those changes. If
a miner does not update the state correctly, other miners
will reject that block.
Ethereum aims for “global correctness,” or the ability
of every participant in the system to trust that every con-
tract has been correctly executed contingent only on the
mining consensus process working as intended. In con-
trast, Arbitrum does not try to provide correctness guar-
antees for a VM to parties who are not interested in that
VM, and this enables Arbitrum to reap large advantages
in scalability and privacy. In Arbitrum, parties can safely
ignore VMs that they are not interested in.
Limitations of Ethereum style smart contracts
Ethereum’s approach to smart contracts has several
drawbacks.
Scalability.
It has long been known that Ethereum’s
model cannot scale. Requiring miners to emulate every
smart contract is expensive, and this work must be dupli-
cated by every miner. While Ethereum does require the
parties who are interested in a computation to compen-
sate miners (with “gas”) for the cost of executing, this
does not lower the cost – it only shifts it.
Ethereum copes with the Veriﬁer’s Dilemma by hav-
ing a “global gas limit” that severely limits the amount
of computation that can be included in each block.8
Ethereum’s global gas limit is a signiﬁcant limitation that
makes many computations – that would take just sec-
onds to execute on a modern CPU – unachievable [8, 24].
Even for computations which are below the gas limit,
Ethereum’s pay-per-instruction model can become pro-
hibitively expensive.
Privacy. All Ethereum contract code is public, and this
is a necessity of the model as every miner needs to be
able to emulate all of the code. Any privacy in Ethereum
must come as an overlay. There has been progress toward
using zkSNARKs [4, 16, 27] in Ethereum so that miners
can verify proofs while inputs to the contract call remain
hidden. However, the ability to do this this is severely
limited in practice as the cost to verify a SNARK is
high,9 so the throughput would be severely limited to just
a few such transactions per block. Moreover, SNARKs
impose a heavy computational cost on the prover.
Inﬂexibility.
In legal contracts, the parties to a contract
can modify or cancel the contract by mutual agreement.
This is considered an important feature of legal contracts,
because it prevents the parties from being trapped by
an erroneous contract or unforeseen circumstances. For
Ethereum-style smart contracts, deviation from the code
8While Arbitrum does limit the number of steps of computation in
an assertion in some cases, Arbitrum’s limit is much less constraining.
The Arbitrum limit applies only to disputable assertions, not to unan-
imous assertions which can include an unlimited number steps. Also,
Arbitrum’s limit, when it applies, is per VM and assumes many VMs
can be managed in parallel, whereas Ethereum’s is a global limit on the
total computation over all VMs.
on
testnet
(0x15e7f5ad316807ba16fe669a07137a5148973235738ac424d5b70fk8
9ae7625e3) validated a SNARK using 1,933,895 gas. At the current
mainnet gas limit of 7,976,645, this would only allow 4 transactions
per block.