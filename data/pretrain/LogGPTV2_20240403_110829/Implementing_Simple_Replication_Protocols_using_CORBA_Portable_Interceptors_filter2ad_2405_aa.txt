# Implementing Simple Replication Protocols using CORBA Portable Interceptors and Java Serialization

## Authors
Mohamed Taha Bennani, Laurent Blain, Ludovic Courtès, Jean-Charles Fabre, Marc-Olivier Killijian, Eric Marsden, François Taïani

### Abstract
This paper evaluates the utility of widely available features in off-the-shelf CORBA and Java platforms for implementing fault-tolerance mechanisms in industrial-grade systems. Building on prior work at LAAS on reflective fault-tolerant frameworks, we describe the use of interception and state capture mechanisms in CORBA and Java to implement a simple replication strategy on a small middleware-based system built with GNU/Linux and JOrbacus. We discuss the practical benefits and limitations of the resulting system.

## 1. Introduction
The objective of this practical experience report is to illustrate the extent to which basic mechanisms like CORBA Portable Interceptors and Java Serialization can be used to implement simple replication protocols. The portable interceptor mechanism introduced by recent versions of the CORBA standard offers a powerful means to intercept interactions in a distributed system, while Java’s serialization mechanisms provide a transparent and portable state capture facility. From a practitioner’s perspective, the value of these features for fault-tolerance mechanisms remains to be assessed. 

We emphasize that the goal of this paper is not to present a full-fledged framework for distributed fault-tolerance. Many existing works, such as the Fault-Tolerant CORBA standard and corresponding implementations like IRL and Eternal, already provide such frameworks. Other approaches, such as the FTS project, use portable interceptors but require non-standard object adapters, leading to significant modifications of the underlying ORB. Our primary goal is to investigate lightweight implementation approaches based on standard off-the-shelf platforms and evaluate their effectiveness.

In this paper, we report on experiments performed on a prototype platform called DAISY (Dependable Adaptive Interceptors and Serialization-based sYstem). DAISY leverages our yearlong experience in designing and validating fault-tolerant reflective platforms and incorporates lessons learned from their implementation.

The paper is organized as follows: In Section 2, we present our motivations and the basic elements of our middleware-based platform. In Section 3, we describe how portable interceptors were used to develop a simple replication strategy. In Section 4, we discuss the benefits and limitations of the current version of these basic off-the-shelf mechanisms.

## 2. Motivations and Platform
A computer system is said to be reflective if it can observe and modify itself as part of its own computation. Reflection introduces a clean separation between the base level, where normal computation occurs, and the meta-level, where computation about the system takes place. Interactions between levels include reification, introspection, and intercession.

These mechanisms are useful for separating concerns and have made reflective architectures attractive for implementing non-functional mechanisms such as fault tolerance and security in more transparent and adaptable ways. Several projects, including Maud, Garf, and Friends, have explored this issue. For example, the Friends system is a CORBA-compliant reflective fault-tolerant platform based on a Meta Object Protocol. Today, limited reflection capabilities are available in popular development platforms like CORBA and Java, highlighting the increasing attractiveness of reflection for dynamically adapting non-functional requirements.

To investigate the benefits and limitations of these standard reflective facilities, we describe how passive replication of CORBA objects can be implemented. This platform is currently being used to develop other replication strategies and to implement reflection at various levels, both at the middleware and the operating system levels, using the concept of multi-layer reflection presented at DSN 2003.

**Figure 1. Middleware-based platform**

Our prototype platform (see Figure 1) is organized in a layered architecture that integrates the middleware layers ORBacus (JORBacus v4.1.2) and Sun’s Java v1.4.1, on top of the GNU/Linux operating system (Linux 2.4 for x86).

## 3. Implementation
Our implementation of the passive replication mechanism combines Portable Interceptors to synchronize remote clients and different server replicas, and Java Serialization to obtain the internal state of application objects.

We use two types of Portable Interceptors: one for the client side and one for the server side (Figure 2). On the client side, the PIClient intercepts outgoing requests and forwards them to the current primary replica. On the server side, the PIServer has two modes: primary and backup. The PIServer handles request processing, state transfer, and ensures smooth reconfiguration when a replica crashes. The PIServer of the primary delivers requests to the backup replica. We do not assume the availability of atomic multicast services.

**Figure 2. Architecture with PIClient & PIServer for primary-backup replication**

Using these Portable Interceptors, we can observe ongoing requests and trigger the different stages of the replication protocol. However, except for a few exception-raising or -resignaling techniques, CORBA’s portable interceptors do not allow requests or replies to be modified. A portable interceptor inherits its concurrency model from the server it is attached to, and requests can be served either sequentially or in parallel, beyond the control of the PIs.

### 3.1. Overview of the Implementation
The behavior of the client’s interceptor (PIClient) is shown below:

**Constructor:**
- Obtain backup references through the name server.
- Determine the client unique ID.

**send_request:**
- Add the request unique ID (client unique ID + request number) to the request.

**receive_reply:**
- Increment the request counter.

**receive_exception:**
- Issue ForwardRequest exceptions to the primary (twice), then the backup.

The core of the client-side interceptor’s role is in the `receive_exception` method. When the ORB signals a transient communications error, the interceptor raises a `ForwardRequest` exception to redirect the client to a different server. After two consecutive errors from the primary, the client interceptor assumes the primary has failed and redirects further requests to the backup, triggering a primary-backup switch.

On the server side, the primary and backup replicas each contain a PIServer working in two different modes: primary and backup mode.

**Primary Mode:**
- Relay requests to the primary server for processing.
- Fetch the server’s internal state after processing (using Java serialization).
- Send a checkpoint to the backup replica, including the request ID, state information, and a copy of the reply message, if any.

**Backup Mode:**
- Receive checkpoints and update the state of the server replica using Java serialization.
- When the backup receives a primary failure notification, it switches to primary mode and starts processing requests.
- Use the unique request identifier to avoid processing the same request twice when the backup switches to primary mode.

For clarity, we first show the pseudo-code for a scenario with a single client in the system. The `receive_request` method is invoked by the ORB before a request is transferred to the server object, and the `send_reply` method is called before a reply is passed to the transport layer. The necessary modifications for the multi-client case are discussed later.

**Constructor:**
- If in primary role, obtain the reference of the backup.
- Determine the server unique ID.

**receive_request:**
- If in primary role:
  - If first activation, obtain the reference of the Primary Server.
- Else (backup role):
  - If first activation, obtain the references of the Primary and Backup Servers.
  - If the current request is 'set_state':
    - In fault-free behavior, set the backup state.
    - Buffer the state and request ID.
  - If the primary has crashed:
    - Set the backup to primary role.
    - If the request ID matches the buffered request ID, re-execute the request.
    - Otherwise, apply the received state info.

**send_reply:**
- If in primary role, get the state from the primary and set the state in the backup.

The start of `receive_request` contains some reference handling due to the initialization sequence of portable interceptors. In the `receive_request` code, `set_state` requests from the primary are buffered until a new `set_state` request arrives or the backup becomes primary. This is because an interceptor cannot modify a request. When the primary crashes, the client and the remaining backup must reach a common view on when the crash occurred. Cases where the primary was idle or handling a request are easy to handle, but the case where a `set_state` request was sent but the reply was not yet generated is more complex. In this case, the backup must discard the last `set_state` request and re-execute the request to answer the client.

---

This revised text aims to be more coherent, clear, and professional, with improved structure and flow.