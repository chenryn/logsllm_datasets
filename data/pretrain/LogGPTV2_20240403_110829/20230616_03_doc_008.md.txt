# PostgreSQL 控制文件的作用与管理

## 目标
- 了解控制文件的结构
- 学习如何维护控制文件
- 掌握在没有备份的情况下恢复损坏的控制文件的方法

## 控制文件的位置
### 逻辑位置
- 存放在 `pg_global` 表空间中

### 物理位置及名称
- 路径：`$PGDATA/global/pg_control`
- 大小：8KB
- 建议内容大小不超过512字节

## 控制文件的内容
### 初始化时生成的静态信息
- `pg_control` 版本号: 1201
- 目录版本号: 201909212
- 数据库系统标识符: 6744130188358323871
- 最大数据对齐: 8
- 数据块大小: 8192
- 大关系段中的块数: 131072
- WAL 块大小: 16384
- 每个 WAL 段的字节数: 16777216
- 标识符的最大长度: 64
- 索引中的最大列数: 32
- TOAST 块的最大大小: 1996
- 日期/时间类型存储: 64位整数
- `float4` 参数传递方式: 按值
- `float8` 参数传递方式: 按值

### `postgresql.conf` 中的配置信息
- `wal_level` 设置: `replica`
- `wal_log_hints` 设置: `on`
- `max_connections` 设置: 1000
- `max_worker_processes` 设置: 8
- `max_wal_senders` 设置: 10
- `max_prepared_xacts` 设置: 0
- `max_locks_per_xact` 设置: 64
- `track_commit_timestamp` 设置: `off`

### Write-Ahead Logging (WAL) 及 Checkpoint 的动态信息
- 最近检查点位置: 2E/CD32D270
- 最近检查点的 REDO 位置: 2E/CD32D270
- 最近检查点的 REDO WAL 文件: 000000110000002E000000CD
- 最近检查点的时间线 ID: 17
- 最近检查点的前一个时间线 ID: 17
- 最近检查点的全页写入状态: `on`
- 下一个事务 ID: 0:538902
- 下一个 OID: 385511
- 下一个多事务 ID: 5
- 最近检查点的时间: 2020年7月18日星期六 下午10:11:14 EDT
- 未记录关系的假 LSN 计数器: 0/3E8
- 备份开始位置: 0/0
- 备份结束位置: 0/0
- 是否需要备份结束记录: `no`

## 控制文件的维护
### 维护要点
1. **固定部分**：初始化数据库时生成，保持不变。
2. **动态更新**：在发生检查点、备份或日志切换等操作时自动更新。
3. **配置参数更新**：如果 `postgresql.conf` 中的重要参数被修改，也会自动更新。
4. **备份**：数据库备份时会一起备份控制文件。
5. **不可手动修改**：不能手动编辑该文件。
6. **启动和恢复**：启动和恢复数据库时需要此文件。目前没有避免单一故障点的设计策略。

## 控制文件备份
### 备份方法
- **tar 命令**
  ```sh
  tar -jcv -f baseline.tar.bz2 $PGDATA
  ```
- **pg_basebackup 命令**
  ```sh
  pg_basebackup -D bk1 -Ft -z -P
  ```
- **pg_rman 命令**
  ```sh
  pg_rman backup --backup-mode=full -B /home/postgres/pg_rman_bk/ -C -P
  ```

## 控制文件恢复
### 重建控制文件
- **PostgreSQL 10 以前版本**：使用 `pg_resetxlog` 工具。
- **PostgreSQL 10 及以后版本**：使用 `pg_resetwal` 工具。

#### `pg_resetwal` 工具参数
- `-x XID`：设置下一个事务 ID。
- `-m MXID`：设置下一个和最旧的多事务 ID。
- `-O OFFSET`：设置下一个多事务偏移量。
- `-l XLOGFILE`：强制新事务日志的最小 WAL 起始位置。

#### 示例
```sh
cd $PGDATA/global
touch pg_control
pg_resetwal -l 0000001100000038000000CC -O 0x1000000000 -m 0x00010000,0x00010000 -x 0x000100000 -f $PGDATA
```

### 计算参数值
- **-l XLOGFILE**：找到 `pg_wal` 目录下最大的日志文件编号并加1。
  ```sh
  cd /usr/local/pg12.2/data/pg_wal/
  ll
  -rw------- 1 postgres postgres 16777216 Jul 19 06:19 0000001100000038000000C4
  -rw------- 1 postgres postgres 16777216 Jul 19 06:16 0000001100000038000000C5
  -rw------- 1 postgres postgres 16777216 Jul 19 06:17 0000001100000038000000C6
  -rw------- 1 postgres postgres 16777216 Jul 19 06:17 0000001100000038000000C7
  -l 0000001100000038000000C8
  ```

- **-O OFFSET**：在 `pg_multixact/members` 目录下找到最大值，加1后乘以65536，转换为16进制并在末尾添加4个0。
  ```sh
  cd $PGDATA/pg_multixact/members/
  ll
  -rwxr-x--- 1 postgres postgres 8192 Jul 18 22:11 0000
  -O=0x1000000000
  ```

- **-m MXID**：在 `pg_multixact/offsets` 目录下找到最大文件编号，加1并在后面跟上4个0。
  ```sh
  cd $PGDATA/pg_multixact/offsets
  ll
  -rwxr-x--- 1 postgres postgres 8192 Jul 19 05:57 0000
  -m=0x00010000,0x00010000
  ```

- **-x XID**：在 `pg_xact` 目录下找到最大文件编号，加1并在后面跟上5个0。
  ```sh
  cd $PGDATA/pg_xact/
  ll
  total 140
  -rwxr-x--- 1 postgres postgres 139264 Jul 18 23:21 0000
  -x=0x000100000
  ```

### 启动数据库
```sh
pg_ctl start
```

## 总结
- 了解了控制文件的结构
- 学习了如何维护控制文件
- 掌握了在无备份情况下恢复损坏的控制文件的方法

## 练习
1. 在数据库中创建一些表，写入一些数据，并执行一些更新操作。记录所有记录值。
2. 执行检查点。
3. 查询数据库的控制文件内容。
4. 删除控制文件。
5. 关闭数据库实例。
6. 尝试启动数据库实例，观察错误信息。
7. 使用 `pg_resetwal` 重建控制文件，确定需要设置哪些值以及如何计算这些值。
8. 启动实例，观察控制文件的内容与之前有何变化。
9. 检查数据是否还在数据库实例中，是否有丢失。