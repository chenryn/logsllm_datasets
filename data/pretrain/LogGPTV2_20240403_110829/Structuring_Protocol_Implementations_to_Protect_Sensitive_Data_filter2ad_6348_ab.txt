authenticates the server to the client. It is possible, how-
ever, to abuse the signing operation exported by RSAd.
Although a compromised SSLd cannot directly read the
private key, it can sign any data chosen by the attacker;
the attacker controls the SSLd compartment, and can in-
voke RSAd with any arguments she chooses. Thus, the at-
tacker can use a compromised SSLd to produce valid sig-
natures using the server’s identity. This example demon-
strates that simply putting sensitive data beyond direct
reach of untrusted code does not provide sufﬁcient isola-
tion.
We name such attacks against a cryptographic proto-
col’s partitioning oracle attacks. Any trusted compart-
ment or sequence of trusted compartments isolating sen-
sitive data and exporting privileged operations to un-
trusted code can be an oracle. An oracle takes untrusted
input from untrusted code and returns the result of a priv-
ileged operation. An attacker can obtain sensitive infor-
mation by invoking the trusted compartment with ap-
propriately chosen inputs. SSLd is meant only to pass
RSAd an ephemeral key or the DH components for its
own current session for signing. But if an active man-
in-the-middle attacker compromises SSLd, she can sign
arbitrary keys and DH components and present them to
other users, and so impersonate the server.
We have further identiﬁed oracle structures in the
“baseline” privilege-separated OpenSSH server [9]. The
trusted monitor process exposes a private key-signing op-
eration to the unprivileged compartment for authentica-
tion of the server during key exchange. The unprivileged
compartment thus has an oracle for the server’s private
key, and an attacker who compromises that compartment
can impersonate the OpenSSH server, just as was de-
scribed for the SSL web server above.
While studying the SSH and SSL/TLS protocols, we
identiﬁed further oracle attacks. Digital signatures suf-
fer not only from signing oracles, but also veriﬁcation
oracles, in which an attacker can force successful signa-
ture veriﬁcation by supplying chosen inputs to a trusted
compartment performing this privileged operation. There
also exists an oracle where an attacker forces a set of
trusted compartments generating a session key to pro-
duce the same key used in a past user’s session; we name
this oracle a deterministic session key oracle. Forcing
reuse of a session key allows an attacker to replay mes-
sages from a past session. (This particular threat exists in
SSL’s RSA key exchange protocol.) Finally, encryption
and decryption oracles may allow an attacker to encrypt
arbitrary data and decrypt conﬁdential messages.
3.3 Discussion
The SKD and oracle attacks are independent of the low-
level system primitive used to limit privilege; they appear
equally in applications built with privilege separation and
DIFC. These attacks are made possible by weakly struc-
tured cryptographic protocol implementations. The im-
plementation of a cryptographic protocol should guaran-
tee the same properties provided in the middle of the net-
work: data conﬁdentiality, data integrity, and robust au-
thentication of the peers, even if untrusted compartments
in its implementation are compromised. Avoiding SKD
and oracle attacks requires subtle structuring of the im-
plementation of a cryptographic protocol.
The SKD and oracle attacks target building blocks of
cryptographic protocols. Risk of an SKD attack exists in
many cases where a session key and key exchange pro-
tocol are used. Similarly, oracle attacks are associated
with basic cryptographic operations such as encryption,
decryption, signing, signature veriﬁcation, message au-
thentication, &c.
We next propose guiding principles for defense against
SKD and oracle attacks. Just as these attacks arise in
building blocks for cryptographic protocols, these prin-
ciples concern how to implement these building blocks
safely. We thus believe both the attacks and defenses ap-
ply to many cryptographic protocols.2
4 Principles for Partitioning
In this section, we deﬁne principles to guide the pro-
grammer when partitioning an implementation of a cryp-
tographic protocol into reduced-privilege compartments.
These principles allow preserving the key end-to-end se-
curity properties of the protocol, even when untrusted
compartments are compromised. Our principles are ag-
nostic to the underlying privilege-enforcement mecha-
nism. Thus, they may be applied in DIFC-based systems,
in privilege-separated systems based on Linux processes,
and in other systems. They apply both to the client and
server sides of cryptographic protocols.
Throughout, we assume that an attacker can compro-
mise untrusted code and execute arbitrary code in its
compartment, though only with the privileges allowed in
that compartment. In this threat model, if an untrusted
compartment acquires sensitive information or an at-
tacker compromises a privileged compartment, we pre-
sume she obtains sensitive information.
4.1 Two-Barrier, Three-Stage Partitioning
A cryptographic protocol typically shares a symmetric
secret key between two communicating parties, used to
compute message authentication codes (MACs) and to
encrypt data. A key exchange protocol conﬁdentially
shares this symmetric key. In addition, in some applica-
tions, the cryptographic protocol must authenticate peers
to each other. Any authentication method that does not
rely on transferring sensitive data, such as public key
authentication, may be performed during the key ex-
change protocol, before a session-key-encrypted chan-
nel has been established. The SSL/TLS protocol ﬁts this
model [4]. In contrast, password-based authentication,
e.g., as supported by SSH [13], sends sensitive data over
the network, and must therefore only authenticate after
the session-key-MACed and -encrypted channel has been
established. After authentication, an application is as-
sured of the remote principal’s identity, and can grant the
remote principal access to locally stored sensitive data.
We distinguish two attack models. The ﬁrst is that of
the SKD attack described in Section 3.1, where a man-
in-the-middle attacker exploits a vulnerability in a client
or server application to obtain the peers’ session key. The
second attack model is that of an impersonation attack,
where an attacker exploits an endpoint and subverts au-
thentication in order to impersonate one of the peers.
In order to prevent these attacks, a partitioned applica-
tion should implement structures that we term a session
key barrier and a user privilege barrier. These divide
an application into three stages, as shown in Figure 3.
The ﬁrst such stage, the session key negotiation stage,
performs the key exchange protocol. The second stage,
the pre-authenticated stage, conducts peer authentica-
Figure 3: Barriers and stages in protocol partitioning.
tion. Finally, the post-authenticated stage processes user
requests. Within each stage, one untrusted compartment
handles network input and executes without privileges to
read or write sensitive data, while multiple trusted com-
partments execute with privilege to access sensitive data.
These trusted compartments export any necessary privi-
leged operations to the untrusted compartment.
Session Key Barrier The session key barrier denotes
the killing of the untrusted compartment that completes
session key negotiation and the subsequent spawning of a
new untrusted compartment (in Linux, a process) to con-
tinue execution in the pre-authenticated stage. We now
explain why this structure is necessary.
The untrusted compartment performing session key
negotiation (before the session key barrier) is the only
untrusted compartment in the partitioning of the crypto-
graphic protocol implementation that processes cleartext,
unauthenticated messages from the network. These mes-
sages (and exploits!) may arrive from an SKD attacker.
Thus, while the untrusted compartment in the session key
negotiation stage interacts with the remote peer to com-
pute the session key, it should not have read access to
the session key. In addition, any data that allows deriving
the session key, such as a private Difﬁe-Hellman compo-
nent (in the case of Difﬁe-Hellman key exchange) or a
pre-master secret (in the case of RSA-based session key
establishment in SSL) should be also considered sensi-
tive. All access to privileged operations with such data
should be provided via trusted compartments.
Because this compartment only processes messages in
cleartext, it does not in fact need read access to the ses-
sion key; only the next stage, the pre-authenticated stage,
which continues execution after the channel between the
two peers is MAC’ed and encrypted with the session key,
needs the session key.
Principle 1: A network-facing compartment perform-
ing session key negotiation should not have access to
a session key, nor any data that allows deriving the
session key.
Because the untrusted compartment performing ses-
sion key negotiation may be exploited, we cannot trust
the provenance of the code executing in that compart-
ment at the end of session key negotiation, and rather
than allowing that compartment to continue execution in
session keynegotiationpre-authenticatedstagepost-authenticatedstageuser privilege barriersession key barriertrustedcompartmentstrustedcompartmentstrustedcompartmentsthe pre-authenticated stage, where it would have access
to the session key, we kill it (i.e., kill the Linux process).
But why can’t an SKD attacker exploit the untrusted
compartment in the pre-authenticated stage? This com-
partment only processes input that is MAC’ed using the
now available session key. A would-be SKD attacker
cannot inject messages with a valid MAC into the chan-
nel, and so is precluded from exploiting this compart-
ment. We assume here that the MAC computation func-
tion itself, which processes network input, can be audited
and trusted not to be exploited.
Thus, both the MAC on the channel and the killing of
the untrusted compartment in which session key negoti-
ation has completed effectively erect a barrier between
any SKD attacker and the session key.
Principle 2: When enabling the MAC, a network-
facing compartment performing session key negotia-
tion should be killed, and a new one created with priv-
ilege to access the session key.
Principle 3: After enabling the MAC, there should be
no unMAC’ed messages processed by the untrusted
compartment.
Note that the “original” privilege-separated OpenSSH
server does in fact destroy the unprivileged compartment
after user authentication, but we require this be done
after key exchange. The “original” OpenSSH destroys
the compartment not for SKD attack-resistance reasons,
but because of a programming difﬁculty. In this imple-
mentation, the unprivileged compartment runs as user ID
nobody, but must change its user ID to that of the au-
thenticated user. Changing a process’s user ID requires
root privilege; therefore, the monitor kills the compart-
ment and creates a new one with the required user ID.
Transitioning to the pre-authenticated stage may re-
quire transferring state from the unprivileged compart-
ment of the session key negotiation stage to the unpriv-
ileged compartment of the pre-authenticated stage. As
this state comes from a compartment that may be con-
trolled by an SKD attacker, the pre-authentication stage
should validate this state’s sanity to prevent an SKD
attacker from passing bad state in an attempt to com-
promise the pre-authenticated stage. The same problem
arises when a privileged compartment accepts arguments
to a privileged operation from an untrusted compartment;
these arguments should also be veriﬁed to prevent com-
promise of the privileged compartment.
Principle 4: Any state exported from a compartment
performing session key negotiation and any untrusted
arguments passed to privileged compartments should
be validated.
We do not offer general techniques for veriﬁcation of
untrusted state and arguments. However, in our parti-
tioning of protocol implementations, we employ pipes
for inter-process communication. Although marshaling,
unmarshaling, and data copies cost in performance, this
mechanism provides a recipient with an RPC-like expec-
tation of the format of the data it receives. These RPC-
like semantics ease state and argument veriﬁcation.
The session key barrier is enforced when an appli-
cation switches permanently from communicating with
cleartext messages to MAC’ed messages. Some proto-
cols, such as SSL, however, can alternate between these
two types of messages. In such cases, the transition be-
tween the two stages should be performed after the last
cleartext message. However, doing so would require pro-
cessing messages MAC’ed and encrypted with the ses-
sion key during the session key negotiation stage, which
risks creating session key oracles! We address this prob-
lem with Principle 7.
Principle 5: A cryptographic protocol should not al-
ternate between cleartext messages and MAC’ed mes-
sages.
User Privilege Barrier The user privilege barrier rep-
resents any authentication method that can be used to
authenticate a peer before granting it privilege to ac-
cess sensitive information owned by a particular user.
This barrier prevents impersonation attacks, where an at-
tacker exploits an application to subvert its authentica-
tion mechanism. Authentication should be performed by
an unprivileged compartment that has no access to sensi-
tive user data. The pre-authenticated stage is protected by
the session key barrier, so this stage is not exposed to any
SKD attacker. However, it is crucial for the integrity of
the session key barrier that there be no unMAC’ed mes-
sages processed during the pre-authenticated and post-
authenticated stages. Without the SKD threat, the ses-
sion key is no longer sensitive information in the pre-
authentication stage, and it can be accessed directly by
unprivileged code. We allow the impersonator to access
the session key at this point because it is his own key and
does not correspond to any other user’s session. Success-
ful authentication transitions the application into the next
stage, the post-authenticated stage.
Today’s state-of-the-art privilege-reduced applications
implement the user privilege barrier as we require. How-
ever, monolithic, full-privilege applications perform au-
thentication in a privileged compartment. The privilege-
separated OpenSSH server performs user authentication
in an unprivileged compartment, and then the monitor
creates a new compartment with the user ID and group
ID of the authenticated user. The HiStar-labeled SSL
web server supports only password authentication, and
the unprivileged httpd daemon obtains ownership of the
user’s labels only after the user successfully authenti-
cates with an authentication daemon.
Some protocols authenticate peers without sending
conﬁdential data, such as passwords. For example, the
SSL protocol’s handshake supports only public key au-
thentication methods. Such authentication techniques
can be merged with the key exchange protocol or per-
formed in cleartext after it. Thus, the user privilege bar-
rier can be established within the session key negotia-
tion stage omitting the pre-authenticated stage. This op-
timization is encouraged, as it reduces the number of
stages and compartments, and thus increases the perfor-
mance of a privilege-separated application.
Authentication that requires passing sensitive data en-
crypted with the session key cannot be performed dur-
ing the session key negotiation stage. If it were, the ses-
sion key negotiation stage would require a trusted com-
partment to decrypt sensitive data, and that compart-
ment would result in a session key oracle that could
be used to decrypt the user’s sensitive data. Moreover,
other trusted compartments would be needed to process
authentication-related sensitive data, because we cannot
allow untrusted code to operate with conﬁdential data.
The post-authenticated stage executes in a compart-
ment with the authenticated user’s privilege;
it acts
for the authenticated user and can access his data.
When we transition from the pre-authenticated to post-
authenticated stage, we need not kill the former, as it can-
not be exploited, given the MAC’ed channel precludes
SKD attacks and the authentication barrier prevents im-
personation attacks. Instead, we can change the privilege
of the compartment used in the pre-authenticated stage
to that of the authenticated user, and continue execution
with the code for the post-authentication stage.
We note that
for
some applications,
the post-
authenticated stage may require further privilege sep-
aration. For example, an application may require ac-
cess to a centralized database where sensitive data be-
longing to many users is stored. In this case, the user-
authenticated compartment should be denied direct ac-