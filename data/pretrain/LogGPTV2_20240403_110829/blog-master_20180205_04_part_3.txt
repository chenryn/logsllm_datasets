```  
-- drop table agg;  
```  
一次创建1024个分区表，每个分区表24个分区。  
```  
do language plpgsql $$  
declare  
begin  
  for i in 1..1024 loop  
    -- 创建主表  
    execute format(  
    '  
      CREATE unlogged TABLE agg%s (      
          id   serial8 not null,      
          lt   timestamp not null,      
          tu   int2,  
          gv   text,  
          mid  int2,  
          _cnt int,  
          _sum int8,  
          avg  float8,  
          min  int,  
          max  int,  
          p90  int,  
          p95  int,  
          p99  int  
      )  
      PARTITION BY LIST ( (extract(''hour'' from lt)::text) )  
    ', i);  
    for x in 0..23 loop  
      -- 创建分区  
      execute format('CREATE unlogged TABLE agg%s_%s PARTITION OF agg%s FOR VALUES IN (%L)', i, x, i, x);  
      -- PG 10的话，请在这里建索引  
      execute format('create index idx_agg%s_%s_lt on agg%s_%s(lt)', i, x, i, x);  
    end loop;  
    -- 创建索引(PG 11支持)  
    -- execute format('create index idx_agg%s_lt on agg%s(lt)', i, i);  
  end loop;  
end;  
$$;  
```  
明细+统计，总共30720张表。  
维护数据时，TRUNCATE最早的分区即可，分区循环使用。   
### 定义动态写入函数  
为了方便压测，使用动态SQL写入数据，写入到对应的FEED明细表。  
```  
create or replace function ins_mx(  
  int,    -- suffix  
  text,   -- GV  
  int,    -- RC  
  int[],  -- v1  
  int[],  -- v2  
  int[],  -- v3  
  int[],  -- v4  
  int[],  -- v5  
  int[],  -- v6  
  int[],  -- v7  
  int[],  -- v8  
  int[]   -- v9  
) returns void as $$  
declare  
begin  
  execute format(  
  '  
    insert into mx%s   
      (lt,gv,rc,v1,v2,v3,v4,v5,v6,v7,v8,v9)  
    values  
      (now(),%L,%s,%L,%L,%L,%L,%L,%L,%L,%L,%L)  
  ',  
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12  
  );  
end;  
$$ language plpgsql strict;  
```  
例子  
```  
select ins_mx(1,'a',10,gen_randarr(100,10),gen_randarr(100,10),gen_randarr(100,10),gen_randarr(100,10),gen_randarr(100,10),gen_randarr(100,10),gen_randarr(100,10),gen_randarr(100,10),gen_randarr(100,10));  
 ins_mx   
--------  
(1 row)  
postgres=# select * from mx1;  
 id |             lt             | gv | rc |              v1               |              v2               |               v3                |               v4               |               v5                |               v6             
     |              v7              |               v8               |               v9                 
----+----------------------------+----+----+-------------------------------+-------------------------------+---------------------------------+--------------------------------+---------------------------------+----------------------------  
-----+------------------------------+--------------------------------+--------------------------------  
  1 | 2018-02-06 16:14:10.874121 | a  | 10 | {17,12,33,2,73,67,73,12,87,8} | {99,34,70,82,98,9,53,73,52,8} | {96,32,41,72,98,66,14,68,99,41} | {75,16,53,8,19,26,75,92,38,61} | {99,36,95,70,18,94,79,71,67,31} | {79,62,63,20,35,60,86,49,29  
,85} | {89,4,1,42,12,20,68,86,11,6} | {48,10,42,43,80,60,37,59,31,4} | {90,10,66,52,30,0,12,15,49,41}  
(1 row)  
```  
## 压测设计1  
### 定义写入压测1  
动态，写多表，数组数据为动态数据  
1024个随机表，1500个随机分组，2个2500个元素的随机数组。  
```  
vi test1.sql  
\set suffix random(1,1024)  
\set gv random(1,1500)  
select ins_mx(:suffix,:gv,2500,gen_randarr(100,2500),gen_randarr(100,2500),'{}','{}','{}','{}','{}','{}','{}');  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 56 -j 56 -T 120  
transaction type: ./test1.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 56  
number of threads: 56  
duration: 120 s  
number of transactions actually processed: 1475459  
latency average = 4.554 ms  
latency stddev = 1.226 ms  
tps = 12267.216576 (including connections establishing)  
tps = 12269.288221 (excluding connections establishing)  
statement latencies in milliseconds:  