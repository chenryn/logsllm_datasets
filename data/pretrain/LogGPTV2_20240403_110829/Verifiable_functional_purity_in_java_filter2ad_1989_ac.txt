veriﬁably immutable. An object is immutable if its state, and the
state of all objects reachable from it, can never change during its
lifetime. Immutability is transitive: all objects reachable from an
immutable object must themselves be immutable. To statically ver-
ify purity, we need the language to provide some way to verify
that a type T is immutable, i.e., that every instance of T will be
immutable.
Objects that represent a capability to affect or observe external
state must not be considered immutable, even if their explicit state
in the language is immutable.
5. PURE METHODS
Languages that meet our requirements (§ 4) make veriﬁcation of
purity easy. The condition is simple: If all parameters to a method
(including the implicit this parameter) are statically declared to
be of an immutable type, then the method is pure.
A pure method cannot cause any side effects, because it will
never be able to obtain a reference to a shared mutable object. The
only mutable objects it can access are those that it creates itself, but
any changes it makes to them are not side effects since they will not
be visible outside the method’s execution. The method is also pre-
vented from causing any effects external to the language runtime,
as all such effects would require an appropriate capability. Such
capabilities are not considered immutable and thus are unavailable
to methods with only immutable arguments.
The only state observable to the method is that in the global
scope and reachable from its arguments. Since the global scope is
constant (essentially determined at compile time), the only varying
state it can observe is from its arguments. As immutable arguments
cannot provide a view of external state, the only observable state
that immutable arguments can provide is captured in the deﬁnition
of reference-list equivalence above (§ 4.1). For a language without
any inherently nondeterministic constructs, ensuring that two invo-
cations of a method start in indistinguishable states is sufﬁcient to
ensure that they will terminate identically.
In our approach, purity is part of the contract of a method: we
can verify that a method is pure simply by examining its type sig-
nature. This is powerful, because it means that we do not need
to inspect the implementation of the method or of other code that
it might call. Internally, it may make use of mutating operations
and impure methods. Any operation expressible in the language,
no matter how much internal mutation it contains, can be veriﬁably
pure if a wrapper method is written with a pure interface. We do not
need an automated tool to identify for us which methods are pure;
instead, programmers can recognize pure methods from their type
signatures. An annotation may be used on such methods in order
to ensure that they remain pure under maintenance, i.e., that their
argument types remain immutable in later versions of the program.
6.
IMPLEMENTATION
The object-capability language Joe-E was designed by Mettler
et al. and speciﬁed as a technical report [16]. The contribution of
this paper is not the design of the object-capability language Joe-E,
which will be the subject of a forthcoming paper. Instead, this paper
covers our subsequent work to make Joe-E a deterministic object-
capability language and how this enables veriﬁcation of purity.
Joe-E is a subset of Java; the Joe-E veriﬁer, implemented as an
Eclipse 3.2 plug-in, checks Java source code to conﬁrm that it falls
within the Joe-E subset. Any Java program that is accepted by the
veriﬁer is also a Joe-E program with the same semantics, but not
all Java programs pass the veriﬁer.
6.1 Side effects and Nondeterminism
The restrictions on globally-available side effects and nondeter-
minism are accomplished by exposing only a subset of the ﬁelds
and methods deﬁned in the Java libraries to Joe-E code. The Joe-E
language deﬁnes a whitelist of ﬁelds and methods from the Java
libraries that Joe-E code is allowed to use; the Joe-E veriﬁer will
reject programs that make reference to any ﬁeld or method not on
!"#$%!&!’()*!+,,!-)$!../!-)$!+0!)1’’!2)$34-5!6789:7!;((-5?$!?%@()A!;(( cards)
If CardData is an immutable data structure holding the data read
from a single memory card, this function will be pure. Hence we
can be conﬁdent tabulation will be deterministically repeatable, and
that the tabulation operation cannot (even if it is buggy or insecure)
corrupt other election data.
Some caveats apply. The soundness of our determinism guaran-
tee depends on consistent behavior from the portion of the Java li-
braries that Joe-E programs are allowed to call. While it is straight-
forward to block truly nondeterministic library methods, the se-
mantics of some methods differs between Java library releases, in-
cluding useful methods that are fully deterministic within a particu-
lar version. For example, the behavior of many string and character
routines has changed between versions to reﬂect characters added
to the Unicode speciﬁcation. For this reason, our implementation
only guarantees reproducibility between executions using the same
library version. Since Joe-E does not currently require all asser-
tions to be pure, our determinism guarantee is also predicated on
whether or not assertions are enabled. In Java, results of ﬂoating
point operations may differ between JVMs, which may cause code
to have platform-dependent behavior.
7. EVALUATION AND EXPERIENCE
Our approach is intended primarily for programmers develop-
ing new code in Joe-E with veriﬁable purity in mind. Since Joe-
E is intended to be as familiar as possible to Java programmers,
we wanted to understand to what extent our approach would re-
quire Java programmers to change the coding style they are used
to. We chose three Java libraries and retroﬁtted them (a) to pass
the Joe-E veriﬁer and (b) to have veriﬁably pure methods and re-
sulting security properties. The refactoring was performed by a
programmer who had no prior experience using Joe-E or any other
object-capability language.
We give a detailed account of our experience, for three purposes:
(1) to give the reader a sense of the type and magnitude of changes
Source lines of code
After
Before
276
319
688
692
10,848
12,652
Num. classes
Before After
1
25
99
1
25
94
Num. methods
After
Before
9
9
80
79
947
965
AES
Voting
HTML
Table 1: Basic code metrics for the three libraries used for eval-
uation, as measured both before and after refactoring.
that were necessary, (2) to understand the programming patterns
that could potentially act as a barrier to the adoption of our system,
and (3) to evaluate the strengths and limitations of our approach to
veriﬁable purity. See Table 1 for the three applications we analyze.
(We used the Eclipse Metrics Plugin [25] for all code metrics.)
7.1 AES library
7.1.1 Motivation
We started with an open-source AES implementation written in
Java [6]. We sought to prove that the encrypt and decrypt meth-
ods are pure. This would then enable us to check at runtime that
these methods satisfy the inverse property, as described in Sec-
tion 2.2.
7.1.2 Changes to the codebase
First, we refactored the code to pass the Joe-E veriﬁer. The AES
library initially contained mutable static state: it used static vari-
ables of array type to hold the S-box tables. We replaced these
with ImmutableArrays, to meet Joe-E’s requirement that all static
variables be immutable.
Second, we refactored the class to provide veriﬁably pure meth-
ods. Originally, the AES library’s interface had this type signature:
public AES()
public void setKey(byte[] key)
public byte[] encrypt(byte[] plain)
public byte[] decrypt(byte[] cipher)
After refactoring, the signatures for the relevant methods and con-
structors became:
public AES(ByteArray key)
public ByteArray encrypt(ByteArray plain)
public ByteArray decrypt(ByteArray cipher)
Method signatures for encrypt and decrypt were changed so
that all parameters would have an immutable type, thus making
the methods veriﬁably pure. This was accomplished by replacing
each byte[] array with a ByteArray. Also, because encrypt and
decrypt are instance methods on the AES class, we had to make the
AES class immutable. As an immutable class, it can no longer have
its key speciﬁed using a setter method that mutates its state. Instead,