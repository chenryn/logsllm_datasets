# []{#packaging-software_packaging-and-distributing-software.html#packaging-software_packaging-and-distributing-software}第 3 章 打包软件 {.title}
:::
本节介绍 RPM 打包的基础知识。
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#con_rpm-packages_packaging-software}RPM 软件包 {.title}
:::
RPM 软件包是包含其它文件和元数据的文件（系统所需文件的信息）。
特别是，RPM 软件包由 `cpio`{.literal} 归档组成。
`cpio`{.literal} 归档包含：
::: itemizedlist
-   文件
-   RPM 标头（软件包元数据）
    `rpm`{.literal}
    软件包管理器使用此元数据来确定依赖项、安装文件的位置和其他信息。
:::
### []{#packaging-software_packaging-and-distributing-software.html#_types_of_rpm_packages}RPM 软件包的类型
RPM
软件包有两种类型。这两种类型都共享文件格式和工具，但内容不同，并实现不同的目的：
::: itemizedlist
-   源 RPM（SRPM）
    SRPM 包含源代码和 SPEC 文件，这些文件描述了如何将源代码构建为二进制
    RPM。另外，也可以选择包括源代码的补丁。
-   二进制 RPM
    一个二进制 RPM 包含了根据源代码和补丁构建的二进制文件。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#rpm-packaging-tools_packaging-software}列出 RPM 打包工具的工具 {.title}
:::
以下流程描述了如何列出 `rpmdevtools`{.literal} 软件包提供的工具。
::: itemizedlist
**先决条件**
-   已安装 `rpmdevtools`{.literal} 软件包，它提供多个用于打包 RPM
    的实用程序：
    ``` literallayout
    # dnf install rpmdevtools
    ```
:::
::: itemizedlist
**步骤**
-   列出 RPM 打包工具的工具：
    ``` literallayout
    $ rpm -ql rpmdevtools | grep bin
    ```
:::
有关以上实用程序的更多信息，请参阅其手册页或帮助对话框。
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#setting-up-rpm-packaging-workspace_packaging-software}设置 RPM 打包工作区 {.title}
:::
这部分论述了如何使用 `rpmdev-setuptree`{.literal} 程序设置属于 RPM
打包工作区的目录布局。
::: itemizedlist
**先决条件**
-   已安装 `rpmdevtools`{.literal} 软件包，它提供多个用于打包 RPM
    的实用程序：
    ``` literallayout
    # dnf install rpmdevtools
    ```
:::
::: itemizedlist
**步骤**
-   运行 `rpmdev-setuptree`{.literal} 程序：
    ``` literallayout
    $ rpmdev-setuptree
    $ tree ~/rpmbuild/
    /home/user/rpmbuild/
    |-- BUILD
    |-- RPMS
    |-- SOURCES
    |-- SPECS
    `-- SRPMS
    5 directories, 0 files
    ```
:::
创建的目录用于以下目的：
::: informaltable
  ------- ----------------------------------------------------------------------------------------------------------------
  目录    目的
  BUILD   构建软件包时，会创建各种 `%buildroot`{.literal} 目录。如果日志输出没有足够的信息，这可用于调查失败的构建。
  RPMS    此处创建了二进制 RPM，在用于不同架构的子目录中创建，例如在子目录 `x86_64`{.literal} 和 `noarch`{.literal} 中。
  源      此处，打包商放置了压缩源代码存档和补丁。`rpmbuild`{.literal} 命令将在此处查找它们。
  SPECS   软件包程序在此放置 SPEC 文件。
  SRPMS   当 `rpmbuild`{.literal} 用于构建 SRPM 而不是二进制 RPM 时，会创建生成的 SRPM。
  ------- ----------------------------------------------------------------------------------------------------------------
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#assembly_what-a-spec-file-is_packaging-software}什么是 SPEC 文件 {.title}
:::
您可以将 SPEC 文件作为 `rpmbuild`{.literal} 实用程序用来构建 RPM
的配方。SPEC
文件通过定义一系列部分中的说明，为构建系统提供必要信息。这些部分在
[*Preamble*]{.emphasis} 和 [*Body*]{.emphasis}
部分中定义。[*Preamble*]{.emphasis} 部分包含一系列在 [*Body*]{.emphasis}
部分中使用的元数据项。[*Body*]{.emphasis} 部分代表说明的主要部分。
以下小节描述了 SPEC 文件的每个部分。
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#ref_spec-file-preamble-items_assembly_what-a-spec-file-is}Preamble 项 {.title}
:::
下表介绍了 RPM SPEC 文件的 [*Preamble*]{.emphasis}
部分中经常使用的一些指令。
::: table
[]{#packaging-software_packaging-and-distributing-software.html#idm140428013832224}
**表 3.1. RPM SPEC 文件的 `Preamble`{.literal} 部分中使用的项目**
::: table-contents
+---------------------------+-----------------------------------------+
| SPEC 指令                 | 定义                                    |
+:==========================+:========================================+
| `名称`{.literal}          | 软件包的基本名称，应该与 SPEC           |
|                           | 文件名匹配。                            |
+---------------------------+-----------------------------------------+
| `版本`{.literal}          | 软件的上游版本。                        |
+---------------------------+-----------------------------------------+
| `Release`{.literal}       | 发                                      |
|                           | 布此软件版本的次数。通常，将初始值设为  |
|                           | 1%{?di                                  |
|                           | st}，并在每个新版软件包中递增。当软件的 |
|                           | 一个新`版本`{.literal}构建时，将重置为  |
|                           | 1。                                     |
+---------------------------+-----------------------------------------+
| `概述`{.literal}          | 软件包的一个简短总结.                   |
+---------------------------+-----------------------------------------+
| `许可证`{.literal}        | 所打包的软件许可证。                    |
+---------------------------+-----------------------------------------+
| `URL`{.literal}           | 有关程序的更多信息的完整                |
|                           | URL。大多数                             |
|                           | 情况下，这是所打包软件的上游项目网站。  |
+---------------------------+-----------------------------------------+
| `Source0`{.literal}       | 上游源代码的压缩存档的路径或            |
|                           | URL（未修补，补丁会在                   |
|                           | 其他位置处理）。这应该指向该存档的可访  |
|                           | 问且可靠的存储，例如上游页面而不是打包  |
|                           | 程序的本地存储。如果需要，可以添加更多  |
|                           | SourceX                                 |
|                           | 指令，每次递                            |
|                           | 增数字，例如：Source1、Source2、Source3 |
|                           | 等。                                    |
+---------------------------+-----------------------------------------+
| `Patch`{.literal}         | 应用于                                  |
|                           | 源代码的第一个补丁的名称（如有必要）。  |
|                           |                                         |
|                           | 该指令可以通过两                        |
|                           | 种方式应用：带有或不带补丁末尾的数字。  |
|                           |                                         |
|                           | 如果没有指定数                          |
|                           | 字，则会在内部分配一个条目。也可以使用  |
|                           | Patch0, Patch1, Patch2, Patch3          |
|                           | 明确提供数字。                          |
|                           |                                         |
|                           | 这些补丁可以通过使用                    |
|                           | %patch0、%patch1、%patch2               |
|                           | 宏等应用。宏在 RPM SPEC 文件的          |
|                           | [*Body*]{.emphasis} 部分中的 %prep      |
|                           | 指令中应用。或者，您可以使用 %autopatch |
|                           | 宏，以 SPEC                             |
|                           | 文件中提供的顺序自动应用所有补丁。      |
+---------------------------+-----------------------------------------+
| `BuildArch`{.literal}     | 如果软件包没有架构依赖，例如，如果      |
|                           | 完全使用解释编程语言编写，则将其设置为  |
|                           | `B                                      |
|                           | uildArch: noarch`{.literal}。如果没有设 |
|                           | 置，软件包会自动继承构建机器的架构，如  |
|                           | `x86_64`{.literal}。                    |
+---------------------------+-----------------------------------------+
| `BuildRequires`{.literal} | 使                                      |
|                           | 用编译语言构建程序所需的逗号或空格分开  |
|                           | 的软件包列表。`BuildRequires`{.literal} |
|                           | 可以有多个条目，每个条目都在 SPEC       |
|                           | 文件中的独立的行中。                    |
+---------------------------+-----------------------------------------+
| `Requires`{.literal}      | 安装之后，软件需要以逗号或空格          |
|                           | 分开的软件包列表。`Requires`{.literal}  |
|                           | 可以有多个条目，每个条目都在 SPEC       |
|                           | 文件中的独立的行中。                    |
+---------------------------+-----------------------------------------+
| `ExcludeArch`{.literal}   | 如果某一软件不能在特定处理              |
|                           | 器架构上运行，您可以在此处排除该架构。  |
+---------------------------+-----------------------------------------+
| `Conflicts`{.literal}     | `Conflicts`{.literal} 与                |
|                           | `Requires`{.literal} 相反。如果存在与   |
|                           | `Conflicts`{.literal}                   |
|                           | 匹配的软                                |
|                           | 件包，则软件包是否可以安装取决于，带有  |
|                           | `Conflict`{.literal}                    |
|                           | 标签的软件包是否位于已安装的软          |
|                           | 件包中，还是准备要被安装到的软件包中。  |
+---------------------------+-----------------------------------------+
| `Obsoletes`{.literal}     | 这                                      |
|                           | 个指令会改变更新的工作方式，具体取决于  |
|                           | `rpm`{.literal}                         |
|                           | 命令是否直接在                          |
|                           | 命令行中使用，或者更新是由更新还是依赖  |
|                           | 项解析程序执行。当在命令行中使用时，RPM |
|                           | 会删除与                                |
|                           | 正在安装的软件包的过时匹配的所有软件包  |
|                           | 。当使用更新或依赖项解析器时，包含匹配  |
|                           | `Obsoletes:`{.literal}                  |
|                           | 的软                                    |
|                           | 件包会作为更新添加并替换匹配的软件包。  |
+---------------------------+-----------------------------------------+
| `Provides`{.literal}      | 如果向软件包添加了                      |
|                           | `Provides`{.literal}，                  |
|                           | 则软件包可以通过名称以外的依赖项引用。  |
+---------------------------+-----------------------------------------+
:::
:::
`Name`{.literal}、`Version`{.literal} 和 `Release`{.literal} 指令包含
RPM 软件包的文件名。RPM 软件包维护者和系统管理员经常调用这三个指令
[**N-V-R**]{.strong} 或 [**NVR**]{.strong}，因为 RPM 软件包文件名具有
`NAME-VERSION-RELEASE`{.literal} 格式。
以下示例演示了如何通过查询 `rpm`{.literal} 命令获取特定软件包的
[**NVR**]{.strong} 信息。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140428018546992}
**例 3.1. 查询 rpm 为 bash 软件包提供 NVR 信息**
::: example-contents
``` literallayout
# rpm -q bash
bash-4.4.19-7.el8.x86_64
```
:::
:::
在这里，`bash`{.literal} 是软件包名称，`4.4.19`{.literal}
是版本，`7el8`{.literal} 是发行版本。最后的标记是
`x86_64`{.literal}，它向架构发出信号。与 [**NVR**]{.strong}
不同，架构标记不直接控制 RPM 打包程序，而是由 `rpmbuild`{.literal}
构建环境进行定义。这种情况的例外是独立于架构的 `noarch`{.literal}
软件包。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#ref_spec-file-body-items_assembly_what-a-spec-file-is}正文项 {.title}
:::
下表列出 RPM SPEC 文件的 `Body 部分`{.literal}中使用的项目。
::: table
[]{#packaging-software_packaging-and-distributing-software.html#idm140428020327744}
**表 3.2. RPM SPEC 文件的 Body 部分中使用的项目**
::: table-contents
  SPEC 指令                  定义

  `%description`{.literal}   RPM 中打包的软件的完整描述。此描述可跨越多行，并且可以分为几个段落。
  `%prep`{.literal}          用于准备要构建的软件的命令或一系列命令，例如，在 `Source0`{.literal} 中解压缩存档。此指令可以包含 shell 脚本。
  `%build`{.literal}         将软件构建到机器代码（用于编译的语言）或字节代码（用于某些解释语言）的命令或一系列命令。
  `%install`{.literal}       命令或一系列命令，用于将所需的构建工件从 `%builddir`{.literal} （构建发生位置）复制到 `%buildroot`{.literal} 目录（其中包含要打包文件的目录结构）。这通常意味着将文件从 `~/rpmbuild/BUILD`{.literal} 复制到 `~/rpmbuild/BUILDROOT`{.literal}，并在 `~/rpmbuild/BUILDROOT`{.literal} 中创建必要的目录。这仅在创建软件包时运行，而不是当最终用户安装软件包时。有关详细信息，请参阅[使用 SPEC 文件](#packaging-software_packaging-and-distributing-software.html#con_working-with-spec-files_packaging-software "使用 SPEC 文件"){.link}。
  `%check`{.literal}         用于测试软件的命令或一系列命令。这通常包括单元测试等内容。
  `%files`{.literal}         包括在最终用户系统中的文件列表。
  `%changelog`{.literal}     在不同 `Version`{.literal} 或 `Release`{.literal} 之间软件包所发生的更改记录。
:::
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#con_spec-file-advanced-items_assembly_what-a-spec-file-is}高级 items {.title}
:::
SPEC 文件还可以包含高级项目，如
[Scriptlets](#advanced-topics.html#scriptlets-directives_epoch-scriplets-and-triggers "scriptlets 指令"){.link}
或
[Triggers](#advanced-topics.html#triggers_epoch-scriplets-and-triggers "Triggers 指令"){.link}。
它们在安装过程中对最终用户系统而不是构建过程的不同点生效。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#buildroots_packaging-software}BuildRoots {.title}
:::
在 RPM 打包上下文中，`buildroot`{.literal} 是 chroot
环境。这意味着，构建工件被放在使用与最终用户系统中未来层次结构相同的文件系统层次结构，并将
`buildroot`{.literal}
用作根目录。构建工件的放置应遵守最终用户系统的文件系统层次结构标准。