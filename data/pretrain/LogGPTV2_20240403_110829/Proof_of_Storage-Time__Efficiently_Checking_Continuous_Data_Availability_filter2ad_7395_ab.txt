take less than 4 minutes. As a comparison, a 64MB-ﬁle setup
procedure of the outsourced PoR scheme Fortress [5] would
cost more than 10 minutes for both the prover and the veriﬁer.
Also, note that we did not perform any optimization, and the
main costly component is due to hashing large ﬁles (which
can be pre-computed and optimized in various ways).
Although VDFs somehow ensure that adversaries cannot
evaluate the function much faster, precautions are needed when
instantiating the concrete parameters for the VDF evaluations.
(1) A (small) gap exists between the number of unit operations
needed for an honest evaluator and that for the adversary. We
resolve this by selecting parameters to guarantee that the ad-
versary cannot ﬁnish the proof ahead of time while the honest
evaluator can ﬁnish the work within a reasonable extension; (2)
The calculation of unit operations could be expedited. Several
organizations, including Filecoin and Ethereum, have made
substantial investments in ﬁnding the fastest machine possible
for these tasks. We provide more detailed discussions on these
issues in Sec. VI-B.
Security analysis. Rigorously analyzing the security of PoSt
turned out to be challenging. For soundness, we need to extract
data via interacting with a “partial” legitimate prover, i.e., the
only items the extractor gets are a subset of conﬁgurations and
the code of the transition function. The main difﬁculty is that
it seems impossible to unify the strategies of a cheating prover
by only knowing that the ﬁnal proof is admissible. Thus, it is
complicated to recover the sequence of each computation step
and provide an extractor with a universal strategy.
To address this obstacle, we leverage random oracles.
Speciﬁcally, we design our PoSt s.t., for an admissible PoSt
prover, all PoR challenges except the ﬁrst one must be gen-
erated from the random oracle, while all other PoR proofs
except the last one must be queries to the random oracle. Since
the PoSt prover is evaluated, and the extractor simulates the
random oracle, PoR challenges and responses can be seen by
the extractor. It becomes possible for the extractor to invoke a
PoR extractor and recover the data by controlling the random
oracle. Our extraction strategy may be of independent interest.
PoR syntax is adapted from [44] by Shacham and Waters,
except
that we specify the interaction between the prover
and the veriﬁer as a challenge-and-response procedure. For-
mally, a proof of retrievability scheme deﬁnes four algorithms,
PoR.Kg, PoR.Store, PoR.V and PoR.P:
B. Related works
Ateniese et al.
introduced Provable Data Possession
(PDP) [8] to allow a cloud provider to prove to its clients
that their data is intact and available. Proof of Retrievablity
(PoR) was initially proposed by Juels and Kaliskiand [31]
and improved in a series of subsequent works [44], [18],
[24], [47], [45], [20], [4]. PoR requires the existence of an
extractor to completely recover the stored data. PDP/PoR can
be extended with various advanced features, such as supporting
dynamic updates [20], [45], multiple servers [21], [18], [36],
or replication [4], [37], [28], [23]. For better efﬁciency, it’s
possible to outsource PoR’s veriﬁcation workload to a third
party auditor [5]. However,
the auditor must continuously
challenge the storage server and “compress” and forward the
responses to the data owner. Moreover, the construction in
[5] requires a trusted randomness beacon to generate PoR
challenges periodically.
A primitive named Proof of Space-Time has recently been
proposed by Moran and Orlov [33]. Their notion is distinct
from the one introduced in the Filecoin whitepaper and that
we consider in this paper. In their paper, “space-time” is
meant to capture the use of space as a resource over time but
does not consider the availability of content. In this respect,
their concept can be viewed as an extension of Proof of
Space [6], [27]. Another similar notion is sustained-memory
complexity [3], which requires that any algorithm evaluating
a speciﬁc function must use a large amount of memory for
many steps.
II. PRELIMINARY
In this section, we introduce several preliminary notions.
Interactive Turing machine. An interactive Turing machine
(ITM) is to model interactive algorithms used in real-life com-
puting systems. It was initially used by Goldwasser, Micali,
and Rackoff [30] to model interactive proof systems. An ITM
has an input tape, an output tape, a randomness tape, and k
working tapes, and it changes its state step by step following
the instruction described by a transition function. Appendix A
includes a formal deﬁnition of ITM. It is convenient to use
a transition function based on conﬁgurations to describe the
execution procedure of an ITM. A conﬁguration consists of
a state, the contents on the tapes, and the positions of the
tape headers. The running of an ITM is sequentially changing
the conﬁgurations, according to the transition function and
the symbols on the input tape. More importantly, given one
conﬁguration at a speciﬁc time and the transition function,
anyone can run the ITM from that point on.
Proof of retrievability. Proof of retrievability [31], [44] is a
proof-of-storage scheme which provides strong retrievability
guarantees. The soundness of PoR requires that if a server can
pass an audit then a special extractor algorithm, interacting
with the server, must be able (w.h.p.) to extract the ﬁle. Our
•
•
•
•
PoR.Kg: Generate a public-private keypair (pk, sk).
PoR.Store(sk, D): Taking as input a secret key sk
and a ﬁle D ∈ {0, 1}∗, the “setup” algorithm encodes
D into D∗ as the ﬁle to be stored, and generates a
public tag tg for further proof and veriﬁcation.
PoR.V: The veriﬁcation algorithm consists of two
parts: 1). PoR.Vcha, which generates a challenge c,
and 2). PoR.Vvalid, which veriﬁes the response p
from the prover P corresponding to the challenge c.
Speciﬁcally, PoR.Vcha(pk, sk, tg) takes the public key
pk, the secret key sk and the tag tg as inputs, and
generates a challenge c. PoR.Vvalid(pk, sk, tg, c, p)
takes the public key pk, the secret key sk, the tag tg,
the challenge c, the corresponding proof p as inputs,
and outputs a bit b which is either 1 or 0 to indicate
whether the veriﬁer accepts or not.
PoR.P(pk, tg, D∗, c): The proving algorithm takes as
input the public key pk, the ﬁle tag tg output by
PoR.Store, the encoded ﬁle D∗ and the challenge
c, and outputs a proof p after computation.
Publicly veriﬁable. If the veriﬁcation algorithm PoR.V does
not need to take the secret key sk as input, we call this PoR
scheme publicly veriﬁable.
Stateful/stateless PoR. A PoR scheme can be either stateful
[31] or stateless [44]. A PoR scheme is stateful if the number of
audit interactions between the prover and veriﬁer is bounded,
and the veriﬁer has to maintain a state to record the number
of interactions. While a PoR scheme is stateless if the veriﬁer
does not need to maintain a state, and can invoke the audit
procedure an unlimited (polynomial) number of times.
Correctness and soundness. A PoR scheme should satisfy
both correctness and soundness. Correctness requires that the
veriﬁcation algorithm always accepts the proof when inter-
acting with an honest prover. Soundness aims to model that
any party who can convince the veriﬁer must be storing
that ﬁle. The formal soundness deﬁnition of PoR follows the
classical notion of proof of knowledge [44]. Mainly, soundness
requires that for any ITM P(cid:48) generated by the adversary that
implements a legitimate prover in the proof-of-retrievability
protocol, there is an extractor algorithm Extr(pk, sk, tg,P(cid:48))
taking as input the public and private keys, the ﬁle tag tg,
and the description of the ITM P(cid:48),
that outputs the ﬁle
D ∈ {0, 1}∗. Note that Extr is given non-black-box access
to P(cid:48) and can, in particular, rewind it. The logic behind this
extractability deﬁnition is that the best way to guarantee the
prover possesses the data is to recover it via interacting with
the prover.
Unpredictability. To facilitate our PoSt construction, we de-
ﬁne a special property for the challenge-response style of PoR,
named unpredictability. It ensures that the prover cannot guess
a valid response before he sees the corresponding challenge.
Formally, we have the following deﬁnition.
4
Deﬁnition 1: A challenge-response style PoR scheme is
unpredictable if for any P.P.T adversary A, the following holds,
(cid:20) p ←$A(pk, tg, D∗)∧
(cid:21)
(cid:12)(cid:12)(cid:12)(cid:12) c ←$Vcha
Pr
1 ← Vvalid(pk, sk, tg, c, p)
< negl(λ).
-
where PoR.V := (Vcha,Vvalid), and λ is the security parameter.
Note that unpredictability is not provided by default 2, but it
is achieved by most existing PoR schemes, e.g., compact PoR
[44], since the prover’s response has enough high entropy.
III. DELAY FUNCTION
A delay function is a function F : X → Y that, even
when using multiple processors and parallelism, cannot be
evaluated in less than a prescribed time [14]; while, on the
other hand, there exists an algorithm so that honest evaluators
can terminate the computation in a similar amount of time.
Here we introduce two variants of the delay function. One is
the veriﬁable delay function (VDF) [14], which enables the
evaluator to generate a succinct proof to show the correctness
of the result. The other is the trapdoor delay function (TDF)
[48], which enables the holder of the secret trapdoor to evaluate
the function without delay. The formal deﬁnitions are given
next.
A. Veriﬁable delay function
A VDF is a scheme consisting of the following three
algorithms [15], [48]:
•
•
•
VDF.Setup(λ, s) is a randomized algorithm that given
as input the security parameter λ and a delay param-
eter s (measured by Turing machine steps), generates
the public parameters pp. The input and output spaces,
X and Y, are determined by pp. For meaningful
security, the delay parameter s is restricted to be sub-
exponentially sized in λ.
VDF.Eval(pp, x) is a randomized algorithm that given
as input the public parameters pp and x ∈ X , outputs
the answer y ∈ Y and a proof π.
VDF.Verify(pp, x, y, π) is a deterministic algorithm
that given as input the public parameters pp, x ∈ X ,
y ∈ Y, and the proof π, emits one bit 1 or 0 to denote
an acceptance or a rejection.
A VDF must satisfy the following three properties [15]:
-
-
all
time: For
δ-evaluation
generated
by
pp
VDF.Setup(λ, s) and all x ∈ X ,
the algorithm
VDF.Eval(pp, x) must run in steps (1 + δ)s with
poly(log(s), λ) processors.3
Sequentiality: A parallel algorithm A, using at most
poly(λ) processors, that runs in sequential steps less
than s cannot compute the function. Speciﬁcally, for
a random x ∈ X and pp output by VDF.Setup(λ, s),
2A counterexample is that the prover returns all the data independently of
the challenge.
3It has recently been shown in [25], [48] that one can convert a VDF into
a tight one which can be evaluated in sequential steps s + O(1) with an
honest prover using O(log(s)) processors and space. Therefore, without loss
of generality, we assume 0 < δ (cid:28) 1 in the following sections.
if (y, π) ← VDF.Eval(pp, x) then Pr[A(pp, x) = y]
is negligible.
Uniqueness: For an input x ∈ X , exactly one y ∈ Y
will be accepted by VDF.Verify. Speciﬁcally, let A be
an efﬁcient algorithm that given pp as input, outputs
(x, y, π) such that VDF.Verify(pp, x, y, π) = accept.
Then Pr[VDF.Eval(pp, x)] (cid:54)= y] is negligible.
B. Trapdoor delay function
A TDF F : X → Y is a scheme consisting of the following
three algorithms [48]:
•
•
•
TDF.Setup (λ, s) is a randomized algorithm that takes
as input a security parameter λ and a delay parameter
s (measured by Turing machine steps), and outputs
public parameters pp and a trapdoor tr. The delay
parameter s is sub-exponential in λ.
TDF.Eval(pp, x) takes as input x ∈ X and outputs a
y ∈ Y.
TDF.TrapEval(pp, tr, x) takes as input x and a trap-
door tr, outputs a y ∈ Y.
TDF must satisfy δ-evaluation time and sequentiality as in
the case of standard VDF. Similarly, we assume 0 < δ (cid:28) 1
for TDF. In fact, the gap between the honest evaluator and
the malicious one that is characterized by δ could be even
smaller than that
in VDF, because no proof needs to be
generated. Besides, the following two unique requirements
must be satisﬁed by TDF:
-
-
Trapdoor efﬁciency: TDF.TrapEval must run in to-
tal steps polynomial in O(log s) and λ. Therefore
TDF.TrapEval is much faster than TDF.Eval.
Correctness: TDF.Eval and TDF.TrapEval will pro-
duce the same result on the same input.
The TDF can be easily instantiated via the RSA trapdoor
as described in [48] (See Appendix C).
IV. FORMALIZING PROOF OF STORAGE-TIME
that
the data is continuously available at
Now we are ready to give a formal deﬁnition of PoSt.
Recall that PoSt is a protocol that enables the veriﬁer to
audit
the server
for a speciﬁc range of time. The syntax of PoSt is similar
to the challenge-response style of PDP/PoR in section II,
except that time parameters must now be considered. How to
measure time is a tricky question, and indeed, time is hard to
capture by algorithms. Instead, we consider using the number
of unit steps of a Turing machine (which can be seen as a
mathematical abstraction of CPU clock cycles) as a measure
of time similar to the time-lock puzzles [42] and the VDF [14].
In the following, the time parameters are all represented as the
number of steps of the Turing machine.
The ideal version of continuous data availability is a
continuous notion that makes it challenging to instantiate. A
discretized approximation seems to be inevitable, and this can
be accomplished by choosing an audit frequency parameter t.
Hence, the large time range T can be arbitrarily divided into
time segments of length t, and the prover must provide a valid
5
proof at least once in every time slot. Obviously, a smaller t
would result in a better availability guarantee.
Speciﬁcally, the key generation phase of PoSt takes as
input the audit frequency parameter t, and a deposit time T
which expresses the time that the data ﬁle is supposed to
be stored at the server. Besides, the veriﬁer needs to keep
a timer for checking whether the ﬁnal proof is received on
time. For simplicity, we do not consider the communication
latency. Formally, a PoSt scheme consists of the following
four algorithms.
•
•
•
•
PoSt.Kg(λ, t, T ): Given the security parameter λ, the