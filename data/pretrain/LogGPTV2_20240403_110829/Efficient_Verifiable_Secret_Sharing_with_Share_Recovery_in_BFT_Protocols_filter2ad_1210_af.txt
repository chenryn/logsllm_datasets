Each microbenchmark ran for at least 60 seconds and collected
at least 30 samples. Before computing the final statistic, we ignored
any requests that were completed in the first 10 seconds and the
last 10 seconds of the run. We report the aggregate throughput
during the run and the mean and standard deviation of the latency
of each request completed in our run.
vssShare∗ Microbench-
6.1.1
mark Figure 3a shows that
Ped-VSSR can sustain more
sharings per second than
KZG-VSSR for all cluster
sizes. This gap increases as
the number of replicas in-
creases. The difference be-
tween Ped-VSSR and KZG-
VSSR is due to the under-
lying VSS scheme. KZG-
VSSR computes witnesses
for each share, which in-
volves evaluating a polyno-
mial in the elliptic curve
group. Additionally, the throughput decrease is quadratic since
evaluating each share (or witness) takes O(n) CPU time and there
are n shares. So, vssShare∗ takes O(n2) time for both KZG-VSSR
and Ped-VSSR. We see this cost mirrored in the latency graph as
well in Figure 3b.
Figure 4: Volume the dealer
transmits per replica to share
a secret among n replicas
Figure 4 shows the size of the share and associated metadata
that is sent to each replica when the client shares a single 254 bit
integer, which is equal to the disk space that the replica needs to
store a secret shared value. As expected, Ped-VSSR has a linearly
(a) vssReconstruct∗ throughput
(b) vssReconstruct∗ latency
Figure 6: vssReconstruct∗ latency and throughput vs. n
increasing bandwidth and storage footprint with respect to the
cluster size. Meanwhile, KZG-VSSR only requires each replica to
store 860 bytes of information irrespective of the cluster size.
vssVerify∗ Microbenchmark Figure 5 shows that the through-
6.1.2
put and latency of verifying a share, which is done by the repli-
cas upon receiving a share. We see that KZG-VSSR’s latency and
throughput stays constant at 117 operations per second with a 350
millisecond mean latency irrespective of the cluster size. Meanwhile,
Ped-VSSR’s throughput decreases and latency increases as the num-
ber of replicas in the cluster increases. We see that KZG-VSSR
is asymptotically faster than Ped-VSSR, but Ped-VSSR’s cheaper
cryptographic operations still causes it to outperform KZG-VSSR.
vssReconstruct∗ Microbenchmark vssReconstruct∗ has al-
6.1.3
most identical performance between KZG-VSSR and Ped-VSSR,
as we see in Figure 6. vssReconstruct∗ does not include the time
taken to run vssVerify∗ since share verification happens when the
message itself is verified. Figure 6a shows that vssReconstruct∗
can occur at very high throughput with its performance dropping
off quadratically. Figure 6b similarly shows that the latency is in-
creasing quadratically as the cluster size increases. This quadratic
performance hit is due to the quadratic number of modular multi-
plications each vssReconstruct∗ requires.
vssRecoverContrib∗ Microbenchmark Figure 7 shows that
6.1.4
vssRecoverContrib∗ throughput and latency is independent of the
cluster size for both KZG-VSSR and Ped-VSSR. Additionally, Ped-
VSSR’s vssRecoverContrib∗ has exactly half the throughput (430 vs.
860) and twice the latency (118 ms vs. 59 ms) of KZG-VSSR. This
is a side effect of using recovery polynomials to do share recovery.
vssRecoverContrib∗ only has to do a constant amount of work per
recovery. Ped-VSSR’s vssRecoverContrib∗ operation requires two
polynomial shares to be recovered while while KZG-VSSR only
requires one.
(b) vssRecoverContrib∗ latency
(a) vssRecoverContrib∗ throughput
Figure 7: vssRecoverContrib∗ latency and throughput vs. n
(a) PUT operation throughput
Figure 10: PUT operation latency and throughput vs. n
(b) PUT operation latency
6.2 Incorporating VSSR into PBFT
We incorporate VSSR into a PBFT implementation in order to imple-
ment a threshold trusted third party (T3P). We instantiate our T3P
using KZG-VSSR and Ped-VSSR, which we will refer to as KZG-T3P
and Ped-T3P. We also implement and evaluate a key-value store on
top of KZG-T3P, Ped-T3P, and PBFT.
(a) vssRecoverVerify∗ throughput
(b) vssRecoverVerify∗ latency
Figure 8: vssRecoverVerify∗ latency and throughput vs. n
(a) vssRecover∗ throughput
(b) vssRecover∗ latency
Figure 9: vssRecover∗ latency and throughput vs. n
vssRecoverVerify∗ Microbenchmark Figure 8 shows that KZG-
6.1.5
VSSR’s vssRecoverVerify∗ operation has higher throughput and
lower latency than Ped-VSSR. This performance difference occurs
since vssRecoverVerify∗ must combine commitments and witnesses
from the contributions received from vssRecoverContrib∗. KZG-
VSSR performs this computation using a constant number of ellip-
tic curve multiplications whereas Ped-VSSR computes this using a
linear number of elliptic curve multiplications. Thus, as the cluster
size increases, Ped-VSSR’s performance also degrades accordingly.
vssRecover∗ Microbenchmark Similar to vssReconstruct∗,
6.1.6
share verification via vssRecoverVerify∗ happens in our implemen-
tation upon receiving each share from a replica. Figure 9 shows
that vssRecover∗ incurs costs primarily due to interpolation (like
vssReconstruct∗), evaluation of the DPRF and interpolation of any
witnesses. Therefore, asymptotically, we see in Figure 9a and Fig-
ure 9b that vssRecover∗ behaves similarly to vssReconstruct∗ but
with an order of magnitude lower throughput and an order of mag-
nitude higher latency.
To generate load in our evaluation, a client sends PUT requests
asynchronously to the primary. The client pregenerates the requests
to send to the cluster and loops through them once they are finished.
For our throughput experiments, the clients asynchronously send
enough requests at a time to saturate the system. For our latency
benchmarks, the clients send requests serially and measure the
latency of each request. We used Amazon AWS to run our tests and
used c5.4xlarge instances for all clients and replicas.
Similar to our microbenchmarks, our implementation uses the
Relic [2] cryptographic library for most cryptographic operations
and the BN_P254 elliptic curve. For signatures in PBFT, our imple-
mentation uses the optimized secp256k1 library used in Bitcoin.
6.2.1 Benchmarks Figure 10b shows that for all schemes and clus-
ter sizes, the request latency is less than 35 milliseconds. We see the
expected performance hits, such as KZG-T3P having lower perfor-
mance than Ped-T3P and secret sharing having some overhead over
vanilla PBFT. However, the total latencies show that our scheme is
efficient enough to be used in certain scenarios.
Figure 10a shows the throughput overhead of secret sharing.
Due to the quadratic overhead of Ped-T3P and PBFT, we see that
the performance penalty stays roughly constant over all cluster
sizes. Since KZG-T3P is linear, we see the performance overhead
shrinking slightly as the cluster size increases. PBFT took a 78%
performance hit in throughput when going from n = 4 to n = 25.
Similarly, Ped-T3P took a 79% performance hit. However, KZG-T3P
did a linear number of cryptographic operations that dominated
the performance overhead and only suffered a 60% drop.
7 Related Work
This paper makes three primary contributions: VSSR, a framework
for building VSS schemes that provides share recovery; KZG-VSSR,
an instantiation of VSSR that has linear dealer cost on the sharing
phase; and a threshold trusted third party (T3P) built by combining
VSSR with a Byzantine Fault Tolerant state machine. We discuss
the related works below.
target here. Additionally, these systems do not have any control
over the data itself; i.e., the sensitive data must be managed by the
owner, which is not suitable for a large class of applications.
CALYPSO [30] resolves this through the use of a publicly verifi-
able secret sharing scheme, but they require two BFT clusters—one
for access control and one for secret management. Thus, their pro-
tocol requires more replicas to operate. Additionally, CALYPSO
requires the access-control policy to be specified ahead of time by
the client, whereas a T3P can easily allow dynamic access-control
policies.
A related line of work addresses the problem of causal ordering
in Byzantine systems using secret sharing [? ? ? ]. However, these
systems use secret sharing to hide commands from the replicated
service for fairness and consequently reveal the commands imme-
diately. Thus, these techniques do not help with our key problem
of share recovery.
8 Conclusion
This paper investigates how to incorporate verifiable secret sharing
(VSS) into Byzantine fault tolerance (BFT) protocols. Solving the
VSS with share recovery problem is a necessary first step towards
that goal. Thus, we presented a framework, VSSR, and instantiated it
using two distinct VSS schemes in order to solve the VSS with share
recovery problem. We then incorporated these two instantiations
into PBFT and evaluated them with a private key value store.
9 Acknowledgements
We would like to thank the anonymous reviewers for their feedback
on our paper. Ethan Cecchetti and Dragos-Adrian (Adi) Seredinschi
provided helpful discussion on various aspects of the paper. This
work was supported by NSF grant DGE-1650441. Any opinions,
findings, and conclusions or recommendations expressed in this
material are those of the authors and do not necessarily reflect the
views of the funding agencies.
7.1 Proactive secret sharing
A treatment of the prior work in verifiable secret sharing and asyn-
chronous verifiable secret sharing is given in Section 2.2. Unlike
those prior works though, another way to approach share recovery
is through proactive secret sharing. Proactive secret sharing has
been used in threshold signature schemes [14, 16] and in storage
systems [6, 47]. Using proactive secret sharing for share recovery
would require sending a random polynomial that has nothing in
common with the original shared polynomial except for the share
that the recovering replica is interested in.
Prior work in proactive secret sharing [28] is difficult to apply
directly to the problem of share recovery, however. Some works [27,
28] assume a synchronous broadcast channel that delivers to all
replicas instantaneously, which greatly simplifies the problem of
agreeing on a random recovery polynomial. Other proactive secret
sharing systems [6, 17, 21, 39, 40, 47] require replicas to reshare their
secret shares and a new polynomial is formed through interpolation.
Batching [4, 5] and parallelization [22] also have been explored in
proactive secret sharing schemes, and while batching provides
similar asymptotic guarantees to KZG-VSSR, it does so at a large
latency cost. PVSS [48] does not make any such assumption and can
be used in VSSR, but it suffers from an exponential setup cost in the
number of faults it tolerates, making it unusable for tolerating more
than a few faults. MPSS [44] uses a Byzantine agreement protocol
in order to explicitly agree on the random recovery polynomial,
which would add a few additional rounds to VSSR if used in share
reconstruction. CHURP [34] uses bivariate polynomials and thus
the share refresh protocol incurs a quadratic cost.
Although closest “in spirit” to proactive recovery schemes, VSSR
addresses only the share phase. It is left for future work to see
whether proactive share recovery can be expedited with techniques
borrowing from VSSR.
7.2 Privacy in BFT
Methods to store data across n storage nodes in a way that ensures
the privacy, integrity, and availability of the data despite up to k of
these nodes being compromised is a theme that has been revisited
numerous times in the last 30 years (e.g., [18, 23, 25, 33, 46]). The
proposals in this vein of research often do not defend against the
misbehavior of the data writers. In particular, a data writer might
deploy data to the storage nodes in a way that makes data recovery
impossible or ambiguous, in the sense that the data reconstructed
depends on which correct nodes cooperate to do so. Protecting
against corrupt data writers is one of the primary goals of verifiable
secret sharing and its derivatives, for which we’ve surveyed the
most directly related works in Section 2.
With the rise of blockchains supporting smart contracts, there
has been a resurgence of activity in finding ways to add privacy
guarantees to Byzantine fault-tolerant algorithms, and indeed this
is one motivation behind our work. Another class of approaches to
this problem uses zero knowledge proofs [36, 43] for privacy. These
approaches provide a very strong guarantee where it is impossible
for anyone (other than the data owner) to recover the sensitive data,
but where anyone can validate that the data satisfies some prespec-
ified properties. However, such systems only work for a limited set
of applications, rather than general purpose state machines that we
References
[1] T. Yurek A. Kate, A. Miller. 2019. Brief Note: Asynchronous Verifiable Secret
Sharing with Optimal Resilience and Linear Amortized Overhead. arXiv preprint
arXiv:1902.06095 (2019).
[2] D. F. Aranha and C. P. L. Gouvêa. [n.d.]. RELIC is an Efficient LIbrary for
Cryptography. https://github.com/relic-toolkit/relic.
[3] M. Backes, A. Datta, and A. Kate. 2013. Asynchronous computational VSS with re-
duced communication complexity. In Topics in Cryptology – CT-RSA 2013 (LNCS),
Vol. 7779. 259–276.
[4] J. Baron, K. El Defrawy, J. Lampkins, and R. Ostrovsky. 2014. How to Withstand
Mobile Virus Attacks, Revisited. In ACM Conference on Principles of Distributed
Computing (PODC) 2014. 293–302.
[5] J. Baron, K. El Defrawy, J. Lampkins, and R. Ostrovsky. 2015. Communication-
Optimal Proactive Secret Sharing for Dynamic Groups. In International Conference
on Applied Cryptography and Network Security (ACNS) 2015. 23–41.
[6] K. D. Bowers, A. Juels, and A. Oprea. 2009. HAIL: A high-availability and integrity
layer for cloud storage. In ACM Conference on Computer and Communications
Security (CCS) 2009. 187–198.
[7] G. Bracha and S. Toueg. 1985. Asynchronous Consensus and Broadcast Protocols.
J. ACM 32, 4 (Oct. 1985), 824–840.
[8] C. Cachin, K. Kursawe, A. Lysyanskaya, and R. Strobl. 2002. Asynchronous
verifiable secret sharing and proactive cryptosystems. In 9th ACM Conference on
Computer and Communications Security (CCS).
[] C. Cachin, K. Kursawe, F. Petzold, and V. Shoup. 2001. Secure and efficient
asynchronous broadcast protocols. In Advances in Cryptology – CRYPTO ’01.
524–541.
[9] C. Cachin, K. Kursawe, and V. Shoup. 2005. Random oracles in Constantinople:
Practical asynchronous Byzantine agreement using cryptography. Journal of
Cryptology 18 (July 2005), 219–246. Issue 3.
[10] R. Canetti and T. Rabin. 1993. Fast Asynchronous Byzantine Agreement with
Optimal Resilience. In 25thACM Symposium on Theory of Computing (STOC).
42–51.