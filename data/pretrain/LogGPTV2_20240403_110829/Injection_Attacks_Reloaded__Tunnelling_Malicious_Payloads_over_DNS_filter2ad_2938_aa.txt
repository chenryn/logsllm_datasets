# Injection Attacks Reloaded: Tunnelling Malicious Payloads over DNS

## Authors
- Philipp Jeitner, TU Darmstadt
- Haya Shulman, Fraunhofer SIT

## Abstract
The traditional design principle for Internet protocols is to be strict when sending and tolerant when receiving. DNS adheres to this principle, ensuring transparency in handling DNS records. This transparency, while facilitating the deployment of new applications, introduces a significant security vulnerability. In this work, we demonstrate a new method to launch string injection attacks by encoding malicious payloads into DNS records. These attacks can compromise popular applications, including DNS caches, LDAP, and eduroam services. Our study confirms that over 1.3 million (96%) open DNS resolvers are standard-compliant and treat DNS records transparently, making them susceptible to these attacks.

## 1. Introduction
The Domain Name System (DNS) is a critical component of the Internet, originally designed to translate domain names to IP addresses. Over time, DNS has evolved to support a wide range of applications, from location-based services using GPOS records to security mechanisms like TLSA records for certificate authentication. The core feature enabling this versatility is the requirement for transparent handling of DNS records, meaning DNS servers should not attempt to interpret or alter the records they serve.

In this work, we show that this transparency, while essential for the rapid deployment of new technologies, creates a significant security risk. We exploit this transparency to encode malicious payloads into DNS records, which can then be used to launch injection attacks against various applications. Our attacks leverage the fact that DNS resolvers do not modify received records, and receiving applications do not sanitize the data, leading to misinterpretations and security breaches.

## 2. Analysis of DNS Resolution Chain
### 2.1 Components in DNS Lookup
We analyze the interaction between three types of software components involved in DNS lookups:
- **(Recursive) DNS Resolvers**: Handle DNS queries and responses.
- **Stub DNS Resolvers**: Interface between applications and DNS resolvers.
- **Applications**: Initiate DNS lookups and process the responses.

### 2.2 System Stub Resolvers
Stub resolvers provide the interface between applications and DNS resolvers. Applications typically use POSIX-standardized APIs to perform DNS lookups. These APIs are expected to validate domain names before returning them to the application. However, our analysis shows that most stub resolvers do not perform this validation, exposing applications to potential attacks.

### 2.3 Recursive Resolvers and Forwarders
Recursive resolvers handle DNS queries and responses transparently, as required by the DNS standard. They store and handle domain names in their encoded form and do not parse or modify the records. This ensures compatibility with mechanisms like DNSSEC, which would be invalidated by any changes to the encoded records.

### 2.4 Applications
Applications initiate DNS lookups and process the returned records. For non-standard record types, applications often implement their own DNS lookup functionality, which may lack proper input validation. This makes them vulnerable to injection attacks.

## 3. Injection Attacks Against Applications
### 3.1 Study Methodology
#### 3.1.1 Attack Overview
Our attack involves encoding malicious payloads into DNS records and triggering a DNS lookup from the target application. The DNS resolver receives the malicious records, relays them to the application, and the payload causes the application to deviate from its intended behavior.

#### 3.1.2 Selecting Target Applications
We evaluate injection attacks against popular services and applications, focusing on four DNS use-cases: address lookup, service discovery, reverse lookup, and authentication. We select applications based on their popularity and the ease with which an attacker can trigger a DNS lookup.

## 4. Evaluation of Injection Attacks
We evaluate our injection attacks against a population of over 3 million open DNS resolvers in the Internet. Our results show that more than 96% of these resolvers do not modify the records they receive, making them susceptible to our attacks. We also demonstrate successful cache poisoning against 105,000 resolvers, which cannot be prevented by common DNSSEC setups.

## 5. Countermeasures
To mitigate these vulnerabilities, we recommend:
- Implementing input validation in applications and stub resolvers.
- Enhancing DNS resolver configurations to detect and block malicious records.
- Collaborating with DNS and application vendors to develop and deploy robust security measures.

## 6. Related Work
We review related work on DNS security, including previous studies on DNS cache poisoning and injection attacks. Our work builds on these studies by demonstrating a new class of injection attacks that exploit the transparency of DNS record handling.

## 7. Conclusion
The transparency of DNS record handling, while essential for the flexibility and evolution of the DNS, introduces significant security risks. By encoding malicious payloads into DNS records, attackers can launch injection attacks against a wide range of applications. Our findings highlight the need for enhanced input validation and robust security measures in DNS and application implementations.

For more information and detailed evaluations, visit [our project website](https://xdi-attack.net).

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and engaging for the reader.