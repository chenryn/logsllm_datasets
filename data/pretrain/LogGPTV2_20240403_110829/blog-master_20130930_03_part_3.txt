  _SDT_PROBE(provider, name, 6, (arg1, arg2, arg3, arg4, arg5, arg6))  
#define STAP_PROBE7(provider, name, arg1, arg2, arg3, arg4, arg5, arg6, arg7) \  
  _SDT_PROBE(provider, name, 7, (arg1, arg2, arg3, arg4, arg5, arg6, arg7))  
#define STAP_PROBE8(provider,name,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) \  
  _SDT_PROBE(provider, name, 8, (arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8))  
#define STAP_PROBE9(provider,name,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)\  
  _SDT_PROBE(provider, name, 9, (arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9))  
#define STAP_PROBE10(provider,name,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) \  
  _SDT_PROBE(provider, name, 10, \  
             (arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10))  
#define STAP_PROBE11(provider,name,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11) \  
  _SDT_PROBE(provider, name, 11, \  
             (arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11))  
#define STAP_PROBE12(provider,name,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12) \  
  _SDT_PROBE(provider, name, 12, \  
             (arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12))  
/* This STAP_PROBEV macro can be used in variadic scenarios, where the  
   number of probe arguments is not known until compile time.  Since  
   variadic macro support may vary with compiler options, you must  
   pre-#define SDT_USE_VARIADIC to enable this type of probe.  
   The trick to count __VA_ARGS__ was inspired by this post by  
   Laurent Deniau :  
       http://groups.google.com/group/comp.std.c/msg/346fc464319b1ee5  
   Note that our _SDT_NARG is called with an extra 0 arg that's not  
   counted, so we don't have to worry about the behavior of macros  
   called without any arguments.  */  
#ifdef SDT_USE_VARIADIC  
#define _SDT_NARG(...) __SDT_NARG(__VA_ARGS__, 12,11,10,9,8,7,6,5,4,3,2,1,0)  
#define __SDT_NARG(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12, N, ...) N  
#define _SDT_PROBE_N(provider, name, N, ...) \  
  _SDT_PROBE(provider, name, N, (__VA_ARGS__))  
#define STAP_PROBEV(provider, name, ...) \  
  _SDT_PROBE_N(provider, name, _SDT_NARG(0, ##__VA_ARGS__), ##__VA_ARGS__)  
#endif  
/* These macros are for use in asm statements.  You must compile  
   with -std=gnu99 or -std=c99 to use the STAP_PROBE_ASM macro.  
   The STAP_PROBE_ASM macro generates a quoted string to be used in the  
   template portion of the asm statement, concatenated with strings that  
   contain the actual assembly code around the probe site.  
   For example:  
        asm ("before\n"  
             STAP_PROBE_ASM(provider, fooprobe, %eax 4(%esi))  
             "after");  
   emits the assembly code for "before\nafter", with a probe in between.  
   The probe arguments are the %eax register, and the value of the memory  
   word located 4 bytes past the address in the %esi register.  Note that  
   because this is a simple asm, not a GNU C extended asm statement, these  
   % characters do not need to be doubled to generate literal %reg names.  
   In a GNU C extended asm statement, the probe arguments can be specified  
   using the macro STAP_PROBE_ASM_TEMPLATE(n) for n arguments.  The paired  
   macro STAP_PROBE_ASM_OPERANDS gives the C values of these probe arguments,  
   and appears in the input operand list of the asm statement.  For example:  
        asm ("someinsn %0,%1\n" // %0 is output operand, %1 is input operand  
             STAP_PROBE_ASM(provider, fooprobe, STAP_PROBE_ASM_TEMPLATE(3))  
             "otherinsn %[namedarg]"  
             : "r" (outvar)  
             : "g" (some_value), [namedarg] "i" (1234),  
               STAP_PROBE_ASM_OPERANDS(3, some_value, some_ptr->field, 1234));  
    This is just like writing:  
        STAP_PROBE3(provider, fooprobe, some_value, some_ptr->field, 1234));  
    but the probe site is right between "someinsn" and "otherinsn".  
    The probe arguments in STAP_PROBE_ASM can be given as assembly  
    operands instead, even inside a GNU C extended asm statement.  
    Note that these can use operand templates like %0 or %[name],  
    and likewise they must write %%reg for a literal operand of %reg.  */  
#if __STDC_VERSION__ >= 199901L  
# define STAP_PROBE_ASM(provider, name, ...)            \  
  _SDT_ASM_BODY(provider, name, _SDT_ASM_STRING, (__VA_ARGS__)) \  
  _SDT_ASM_BASE  
# define STAP_PROBE_ASM_OPERANDS(n, ...) _SDT_ASM_OPERANDS_##n(__VA_ARGS__)  
#else  
# define STAP_PROBE_ASM(provider, name, args)   \  
  _SDT_ASM_BODY(provider, name, _SDT_ASM_STRING, (args)) \  
  _SDT_ASM_BASE  
#endif  
#define STAP_PROBE_ASM_TEMPLATE(n)      _SDT_ASM_TEMPLATE_##n  
/* DTrace compatible macro names.  */  
#define DTRACE_PROBE(provider,probe)            \  
  STAP_PROBE(provider,probe)  
#define DTRACE_PROBE1(provider,probe,parm1)     \  
  STAP_PROBE1(provider,probe,parm1)  
#define DTRACE_PROBE2(provider,probe,parm1,parm2)       \  
  STAP_PROBE2(provider,probe,parm1,parm2)  
#define DTRACE_PROBE3(provider,probe,parm1,parm2,parm3) \  
  STAP_PROBE3(provider,probe,parm1,parm2,parm3)  
#define DTRACE_PROBE4(provider,probe,parm1,parm2,parm3,parm4)   \  
  STAP_PROBE4(provider,probe,parm1,parm2,parm3,parm4)  
#define DTRACE_PROBE5(provider,probe,parm1,parm2,parm3,parm4,parm5)     \  
  STAP_PROBE5(provider,probe,parm1,parm2,parm3,parm4,parm5)  
#define DTRACE_PROBE6(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6) \  
  STAP_PROBE6(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6)  
#define DTRACE_PROBE7(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7) \  
  STAP_PROBE7(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7)  
#define DTRACE_PROBE8(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8) \  
  STAP_PROBE8(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8)  
#define DTRACE_PROBE9(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9) \  
  STAP_PROBE9(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9)  
#define DTRACE_PROBE10(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9,parm10) \  
  STAP_PROBE10(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9,parm10)  
#define DTRACE_PROBE11(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9,parm10,parm11) \  
  STAP_PROBE11(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9,parm10,parm11)  
#define DTRACE_PROBE12(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9,parm10,parm11,parm12) \  
  STAP_PROBE12(provider,probe,parm1,parm2,parm3,parm4,parm5,parm6,parm7,parm8,parm9,parm10,parm11,parm12)  
#endif /* sys/sdt.h */  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")