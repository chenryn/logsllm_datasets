G
∗
T and α
$← Zp.
The (cid:6)-PDDH assumption is actually implied by the sim-
pler (cid:6)-BDHE assumption, as kindly pointed out to us in
personal communication by Brent Waters. For ease of pre-
sentation we use the PDDH assumption in security proofs;
security under the BDHE assumption automatically follows.
Theorem 3.4. If the ((cid:6) + 1)-BDHE assumption holds in
groups G1, GT, then the (cid:6)-PDDH also holds in G1, GT. More
precisely,
Adv(cid:4)PDDH
G1,GT (κ) ≤ (cid:6) · Adv((cid:4)+1)BDHE
G1,GT
(κ) .
Proof (due to Brent Waters). The proof employs a
hybrid argument. Consider the sequence of games Game-i
for i = 1, . . . , (cid:6) where an adversary A is given as input a tu-
2
2
ple (g, gα, gα
, . . . , gα
, H, H α, H α
, Hi+1, . . . , H(cid:4)),
$← GT and the other inputs are as in
where H, Hi+1, . . . , H(cid:4)
the (cid:6)-PDDH game.
, . . . , H α
(cid:3)
i
The (cid:6)-PDDH assumption says that it is hard to distinguish
between Game-0 and Game-(cid:6). If algorithm A breaks the (cid:6)-
PDDH assumption with advantage , then there must exist
some i ∈ {0, . . . , (cid:6)} such that A distinguishes Game-i from
Game-(i + 1) with probability /(cid:6). Given this algorithm A,
consider the following adversary B against the ((cid:6)+1)-BDHE
assumption.
(cid:3)
(cid:3)+2
2(cid:3)+2
, . . . , gα
2
On input (g, h, gα, gα
, . . . , gα
(cid:3)+1
, gα
, h), Hj ← e(gα
, S), al-
or random.
, h) for j = 1, . . . , i,
$← GT for j = i + 2, . . . , (cid:6). It then runs A on
, . . . , gα
, H, H1, . . . , Hi, S, Hi+2, . . . , H(cid:4)) to
gorithm B has to decide whether S = e(g, h)α
It sets H ← e(gα
and chooses Hj
2
input (g, gα, gα
A.
(cid:3)−i+j
(cid:3)−i
(cid:3)
It is clear that if S = e(g, h)α
then B perfectly simu-
lates Game-i, while if S is random then it perfectly simu-
lates Game-i + 1. It can therefore win its own game with
probability /(cid:6) simply outputting whatever A outputs.
(cid:3)+1
3.1 Modiﬁed Boneh-Boyen Signatures
We use the following modiﬁcation of the weakly-secure
signature scheme by Boneh and Boyen [4]. The scheme uses
a pairing generator Pg as deﬁned above.
The signer’s secret key is (xm, x1, . . . , xl) $← Zp, the corre-
sponding public key is (g, ym = gxm , y1 = gx1 , . . . , yl = gxl)
where g is a random generator of G1. The signature on the
tuple
following
s ← g
1/(xm+m+x1c1+...+xlcl); veriﬁcation is done by checking
whether e(s, ym · g
(m, c1, . . . , cl)
1 · . . . · ycl
l ) = e(g, g) is true.
of messages
m · yc1
Security against weak chosen-message attacks is deﬁned
through the following game. The adversary begins by out-
putting N tuples of messages ((m1, c1,1, . . . , c1,l), . . . , (mN ,
cN,1, . . . , cN,l)). The challenger then generates the key pair
and gives the public key to the adversary, together with sig-
natures s1, . . . , sN on the message tuples. The adversary
wins if it succeeds in outputting a valid signature s on a tu-
ple (m, c1, . . . , cl) (cid:7)∈ {(m1, c1,1, . . . , c1,l), . . . , (mN , cN,1, . . . ,
cN,l)}.
the
is
The scheme is said to be unforgeable under weak chosen-
message attack if no PPT adversary has non-negligible prob-
ability of winning this game. An adaptation of the proof
of [4] can be used to show that this scheme is unforgeable
under weak chosen-message attack if the (N + 1)-SDH as-
sumption holds. The proof is provided in the full version of
this paper [9].
3.2 Zero-Knowledge Proofs and Σ-Protocols
We use various zero-knowledge proofs of knowledge [3,
24] protocols to prove knowledge of and statement about
discrete logarithms such as (1) proof of knowledge of a dis-
crete logarithm modulo a prime [34], (2) proof of knowledge
of equality of (elements of) representations [21] , (3) proof
that a commitment opens to the product of two other com-
mitted values [7, 13, 16], and also (4) proof of the disjunction
or conjunction of any two of the previous [25].
When referring to the proofs above, we will follow the
notation introduced by Camenisch and Stadler [15] and for-
mally deﬁned by Camenisch, Kiayias, and Yung [10]. For
instance, PK{(a, b, c) : y = gahb∧˜y = ˜ga˜hc} denotes a“zero-
knowledge Proof of Knowledge of integers a, b, c such that
y = gahb and ˜y = ˜ga˜hc holds,” where y, g, h, ˜y, ˜g, and ˜h are
elements of some groups G = (cid:10)g(cid:11) = (cid:10)h(cid:11) and ˜G = (cid:10)˜g(cid:11) = (cid:10)˜h(cid:11).
The convention is that the letters in the parenthesis (a, b, c)
denote quantities of which knowledge is being proven, while
all other values are known to the veriﬁer.
Given a protocol in this notation, it is straightforward
to derive actual protocol implementing the proof. Indeed,
the computational complexities of the proof protocol can be
easily derived from this notation: basically for each term
135y = gahb, the prover and the veriﬁer have to perform an
equivalent computation, and to transmit one group element
and one response value for each exponent. We refer to, e.g.,
Camenisch, Kiayias, and Yung [10] for details on this.
3.3 Credential Signature Scheme
We use the signature scheme proposed and proved secure
by Au et al. [2], which is based on the schemes of Camenisch
and Lysyankaya [12] and of Boneh et al. [5].
It assumes cyclic groups G and GT of order p and a bi-
linear map e : G × G → GT. The signer’s secret key is a
$← Zq. The public key contains a number
random element x
$← G, where (cid:6) ∈ N is a
of random bases g1, h0, . . . , h(cid:4), h(cid:4)+1
parameter, and y ← gx
1 .
A signature on messages m0, . . . , m(cid:4) ∈ Zp is a tuple
$← Zp are values chosen at random by
(A, r, s) where r, s
the signer and A = (g1hm0
··· hm(cid:3)
1y) = e(g1hm0
0
Such a signature can be veriﬁed by checking whether
0
(cid:4) hr
(cid:4)+1, g1) .
e(A, gs
Now assume that we are given a signature (A, r, s) on
messages m0 . . . , m(cid:4) ∈ Zp and want to prove that we indeed
possess such a signature. To this end, we need to augment
the public key with values u, v ∈ G such that logg1 u and
logg1 v are not known. This can be done by choosing ran-
and
dom values t, t
executing the following proof of knowledge
(cid:3) $← Zp, computing ˜A = Aut, B = vtut
(cid:2)
··· hm(cid:3)
(cid:4) hr
(cid:4)+1)1/(x+s).
PK{(α, β, s, t, t
(cid:3)
(cid:2) ∧ 1 = B
B = vtut
·e(u, y)te(u, g1)αe(h(cid:4)+1, g1)r
, m0, . . . , m(cid:4), r) :
−svαuβ ∧ e( ˜A,y)
(cid:6)
e(g1,g1) = e( ˜A, g1)
i=0 e(hi, g1)mi} ,
(cid:4)
−s·
where α = st and β = st
(cid:3)
.
4. OUR CONSTRUCTION
We now describe our scheme in detail. We model ac-
cess control lists as tuples of exactly (cid:6) categories ACLi =
(ci1, . . . , ci(cid:4)) ∈ C (cid:4). A record can therefore be associated with
at most (cid:6) categories; unused entries are ﬁlled with a dum-
my category cij = dummy for which we assume every user is
given a credential for free. To issue anonymous credentials
we employ the signature scheme presented in Section 3.3.
and to implement the oblivious access control we extend the
protocol by Camenisch et al. [14]. We will also use a number
of proof protocols about discrete logarithms as described in
Section 3.2
Initial Setup.
We now describe the setup procedures of the issuer and
the database provider. Users do not have their own setup
procedure.
ISetup(C ):
(G, GT, p)
$← Pg(1κ)
∗
$← GT
; g1, h0, h1, h2, u, v
gt, ht
$← Zp ; yI ← g
xI
sk I ← xI ; pk I ← (g1, h0, h1, h2, u, v, w, gt, ht, yI )
Return (sk I, pk I)
xI
1
$← G
∗
of prime order p, a public key pk I and corresponding secret
key sk I for security parameter κ and category universe C .
He publishes the public key as a system-wide parameter.
(cid:2)
DBSetup
(G, GT)
pk I, DB = (Ri, ACLi)i=1,...,N
$← Pg(p) ; g, h
:
; H ← e(g, h)
∗
$← G
(cid:3)
(cid:3)
xi
$← Zp ; yDB ← gxDB
$← Zp ; yi ← gxi
xDB
For i = 1, . . . , (cid:2) do
sk DB ← (h, xDB, x1, . . . , x(cid:3))
pk DB ← (g, H, yDB, y1, . . . , y(cid:3))
For i = 1, . . . , N do
Parse ACLi as (ci1, . . . ci(cid:3))
(cid:7) (cid:3)
1
j=1 xj·cij
Ei ← g
xDB+i+
Fi ← e(h, Ei) · Ri
(cid:2)
ERi ← (Ei, Fi)
Return
(pk DB, ER1, . . . , ERN ), sk DB
Figure 3: Database Setup algorithm
To set up the database, the database provider runs the
algorithm shown in Figure 3. That is, it uses the issuer’s
public key and a pairing group generator to create goups of
the same order p and generate keys for encrypting records.
First the database provider chooses its secret key xDB. Next
he encrypts each record Ri as (Ei, Fi), each with its own key.
These keys not only depend on the database provider’s se-
cret key (xDB), but also on the index of the record (i) and
the categories deﬁned in the access control policy for the
record ({xc}
i=1 ACLi). The pairs (Ei, Fi) can be seen as
an ElGamal encryption [29] in GT of Ri under the public
key H. But instead of using random elements from GT as
the ﬁrst component, our protocol uses veriﬁably random [28]
(cid:7) (cid:3)
j=1 xj·cij . It is this veriﬁability that
values Ei = g
during the transfer phase allows the database to check that
the user is indeed asking for the decryption key for one par-
ticular records with a particular access control policy for
which user has appropriate credentials.
c∈(cid:8) N
xDB+i+
1
Issuing Credentials.
To be able to make database queries, a user needs to ob-
tain the credentials for the categories she is allowed to access.
To this end, the user runs the Issue protocol with the issuer
as depicted in Figure 4. We leave open how the issuer de-
termines which user has access to which categories, but we
do assume that the communication links are authenticated
so that the issuer knows which user it is talking to.
U(c, stU, pk I) :
If (stU = ⊥) then
$← Zp ; P ← h
zU
stU ← (zU, P, 0, ∅, ∅)
zU
0
Issue() :
P -
I(sk I, pk I, c, [P ]) :
If P already assigned
then return ⊥
Parse stU as (zU, P, fDB , CU, CredU)
PK{(zU) : P = h
0 }-
Ac ← (g1P hc
1h
CU ← CU ∪ {c} ; CredU ← CredU ∪ {(Ac, sc, rc)}
rc
If e(Ac, g
2 , g1) then
Return stU ← (zU, P, fDB , CU, CredU)
sc, Ac
1h
sc
1 yI ) = e(g1P hc
zU
$← Zp
xI +sc