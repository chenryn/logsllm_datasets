variable asserted to be true} and let N = {~a ∈ (tND(t )\P)|~a is a snapshot
i
·
Boolean variable asserted to be false}. Let P′∪N′ be a partition of tND(t ) such
i
that P′ = {~a ∈ 2tND(ti)\∅|~a is a snapshot Boolean variable asserted to be true}
and let N′ = {~a ∈ (2tND(ti)\∅\P)|~a is a snapshot Boolean variable asserted to be
false}. A snapshot of t , denoted by tss(t ) is a set of asserted snapshot Boolean
i i
·
variables such that, if t is a XOR-split then tss(t ) = P ∪N; if t is an OR-split
i i i
·
then tss(t ) = P′∪N′.
i
Remark 1. Clearly P ∩N = P′∩N′ = ∅. Note that P,P′ and N are
always nonempty sets, but N′ can be empty. When N′ is empty, it means that
Termination of Workflows 239
all the Boolean terms of the outgoing condition of the task t are true, i.e., all
i
snapshot Boolean variables are asserted to be true.
Notation 1. We denote by tss(t ) (cid:9) tND(t ) to specify that tss(t ) is
i i i
a snapshot with all snapshot Boolean variables in tND(t ).
i
Example 3. The task t of the workflow from Figure 1 has the
2
·
task snapshot tss (t ) = P′ ∪N′, where P′ = {~a } and N′ = {~a }, i.e., ~a is
1 2 1 1 1 2 1 3 2
asserted to be true and ~a is asserted to be false. It has also the task snapshot
3
·
tss (t ) = P′ ∪N′, where P′ = {~a } and N′ = {~a }, i.e., ~a is asserted to be
2 2 2 2 2 3 2 2 3
true and~a is asserted to be false.
2
Definition 2.17. Let WG be a workflow. Suppose that ND =
{i ,i ,...,i }, i.e., t ,t ,...,t are the non-deterministic tasks of WG. For
1 2 k i1 i2 ik
every l ∈ {1,...,k} let tss(t ) be a snapshot of t . A snapshot of WG, denoted
il il
by wss(WG), is an element of the form (tss(t ),tss(t ),...,tss(t )).
i1 i2 ik
Example 4. The workflow from Figure 1 has several snapshots. As
ND = {2,6}, wND(WG) = {tND(t ),tND(t )}, tND(t ) = {~a ,~a }, tND(t ) =
2 6 2 2 3 6
·
{~a ,~a }. Let tss(t ) = P′ ∪ N′, where P′ = {~a } and N′ = {~a }, i.e., ~a is
7 8 2 2 3 2
·
asserted to be true and ~a is asserted to be false. Let tss(t ) = P ∪N, where
3 6
P = {~a } and N = {~a }, i.e., ~a is asserted to be true and ~a is asserted to be
7 8 7 8
false.
· ·
Then one snapshot of WG, is (tss(t ),tss(t )) = (P′ ∪N′,P ∪N), i.e.,
2 6
~a = true,~a = false,~a = true,~a = false.
2 3 7 8
Remark 2. If t is a XOR-split then it has |tND(t )| snapshots, if t
i i i
|2tND(ti)|−1
is an OR-split then it has snapshots. If the workflow WG does
not contain non-deterministic tasks, ND = ∅. Therefore, there are no workflow
snapshots.
Definition 2.18. A behavioral task model of a task t is a behavioral
expression denoted by b(t) when t is a deterministic task; and if t is a non-
deterministic task it is denoted by b(t,s), where s is a task snapshot. The
behavioral expressions b(t) and b(t,s) are expressed in Table 2 and depend on
the type of the EA models associated to them.
Definition 2.19. Let WG be a workflow. The behavioral workflow
model of WG, denoted by B(WG,s), is a system of equalities formed by the
behavioral task models of all tasks t ∈ T, i.e.,
i
Case 1. If WG does not contain non-deterministic tasks, then the be-
n
havioral workflow model is b(t ).
i
i=1
V
240 G. Cravo, J. Cardoso
Table 2: Behavioral task models
EA model structure Behavioral task model Task Snapshot
t : f f b(t)/b(t,s) s = tss(t)
E C
t : a′ •a′ •···•a′ a′ a′ = a′ = ··· = a′ = a′ —
i1 i2 il j i1 i2 il j
t : a′ a′ •a′ •···•a′ a′ = a′ = a′ = ··· = a′ —
i j1 j2 jl i j1 j2 jl
t : a′ ⊕a′ ⊕···⊕a′ a′ a′ = a′ ⊕a′ ⊕···⊕a′ —
i1 i2 il j j i1 i2 il
t : a′ a′ ⊕a′ ⊕···⊕a′ a′ = a′ ∧~a , s (cid:9) tND(t)
i j1 j2 jl j1 i j1
a′ = a′ ∧~a ,
j2 i j2
.
.
.
a′ = a′ ∧~a
jl i jl
t : a′ ⊗a′ ⊗···⊗a′ a′ a′ = a′ ⊗a′ ⊗···⊗a′ —
i1 i2 il j j i1 i2 il
t : a′ a′ ⊗a′ ⊗···⊗a′ a′ = a′ ∧~a , s (cid:9) tND(t)
i j1 j2 jl j1 i j1
a′ = a′ ∧~a ,
j2 i j2
.
.
.
a′ = a′ ∧~a
jl i jl
t : a′ a′ a′ = a′ —
i j i j
Case 2. If WG contain non-deterministic tasks, suppose that t , t ,
i1 i2
..., t are the non-deterministic tasks of WG. For any workflow snapshot s =
ik
(s , s , ..., s ) = wss(WG) = (tss(t ), tss(t ), ..., tss(t )) the behavioral
i1 i2 ik i1 i2 ik
n
workflow model is b(t ,s ), where
i i
i=1
V
b(t ), i ∈ {1,...,n}\{i ,i ,...,i },
i 1 2 k
(1) b(t ,s ) =
i i
(b(t il,s il), l ∈ {1,2,...,k}.
Remark 3. If all the tasks t ∈ T are deterministic and therefore there
i
is no workflow snapshots, we can denote B(WG,s) simply by B(WG).
Example 5. The workflow from Figure 1 has the following behavioral
workflow model B(WG,s):
a′ = a′,a′ = a′,a′ = a′,a′ = a′ ,
2 4 3 5 7 9 8 10
a′ = a′ = a′,a′ = a′ = a′ ,
⊔ 1 6 11 12 ⊓
a′ = a′ ∧~a ,a′ = a′ ∧~a ,a′ = a′ ⊕a′ ,
7 6 7 8 6 8 11 9 10
a′ = a′ ∧~a ,a′ = a′ ∧~a ,a′ = a′ ⊗a′.
2 1 2 3 1 3 12 4 5
Termination of Workflows 241
Definition 2.20. We say that WG logically terminates if a′ is true
⊓
whenever a′ is true and we say that WG never logically terminates if a′ is
⊔ ⊓
false whenever a′ is true.
⊔
Definition 2.21. Let WG be a workflow and B(WG,s) be its behav-
ioral workflow model. We say that B(WG,s) is positive if a′ is true, whenever
⊓
a′ is asserted to be true in B(WG,s). We say that B(WG,s) is negative if a′
⊔ ⊓
is false, whenever a′ is asserted to be true in B(WG,s).
⊔
Theorem 2.3. Let WG be a workflow and let B(WG,s) be its behav-
ioral workflow model. Then, WG logically terminates if and only if B(WG,s)
is positive.
Proof. Case 1. Suppose that WG does not contain non-deterministic
tasks, i.e., all the tasks present in WG are deterministic. Then, B(WG,s) =
n
B(WG) = b(t ). Since WG is formed by all its EA models, and according
i
i=1
to DefinitionV2.18., every EA model t : f f is described by its behavioral
i Ei Ci
task model b(t ), consequently the behavior of the workflow is described by
i
B(WG). Hence, a′ is true when a′ is true in WG if and only if a′ is true when
⊓ ⊔ ⊓
a′ is true in B(WG), i.e., WG logically terminates if and only if B(WG) is
⊔
positive.
Case 2. Suppose that WG contains non-deterministic tasks. Suppose
that ND = {i ,i ,...,i }, i.e., t , t , ..., t are the non-deterministic tasks
1 2 k i1 i2 ik
ofWG.Lets=(s ,s ,...,s )=(tss(t ),tss(t ),...,tss(t ))beaworkflow
i1 i2 ik i1 i2 ik
n
snapshot of WG. Then B(WG,s) = b(t ,s ), where b(t ,s ) is defined by (1).
i i i i
i=1
Bearing in mind that WG is foVrmed by all its EA models, and according
to Definition 2.18., every EA model t : f f is described by its behavioral
i Ei Ci
taskmodelb(t ,s ),thenthebehavioroftheworkflowisdescribedbyB(WG,s).
i i
Therefore, a′ is true when a′ is true in WG if and only if a′ is true when a′
⊓ ⊔ ⊓ ⊔
is true in B(WG,s), i.e., WG logically terminates if and only if B(WG,s) is
positive.
Theorem 2.4. Let WG be a workflow and let B(WG,s) be its be-
havioral workflow model. Then, WG never logically terminates if and only if
B(WG,s) is negative.
Proof. Using similar arguments as those from the proof of the previous
Theorem, we can state that a′ is false whenever a′ is true in WG if and only if
⊓ ⊔
a′ is false when a′ is true in B(WG,s). Thus, WG never logically terminates
⊓ ⊔
if and only if B(WG,s) is negative.
242 G. Cravo, J. Cardoso
3. Conclusions
To guarantee that workflows successfully terminate, it is necessary to
verify their properties at design time. In this paper we present a formal theory,
based on graphs, to check the termination of workflows. In our approach we
model workflows with tri-logic acyclic directed graphs and develop a snapshot-
based formalism to investigate the termination of workflows. The analysis of
graphs-based workflows is important since many of the most well-known and
widespreadworkflowsystemsuseanotationbasedongraphs. Whileitispossible
to transform a graph-based workflow into a Petri net-based workflow and then
verifyitstermination,webelievethatitismorepracticalforworkflowvendorsto
directly implement into their systems the theory that we have developed. This
solutionwillallowcommercialapplicationstobelesscomplexandeliminatesthe
need to implement a software layer to interpret Petri nets. The contribution of
our work will enable the development of a new set of tools that will support and
allow business process analysts to verify the correct design of their workflows in
an early phase of the workflow lifecycle development.
References
[1] W. M. P. van der Aalst. The application of petri nets to workflow
management, Journal of Circuits, Systems and Computers, 8 (1998), No
1, 21–66.
[2] P. Attie, et al. Specifying and enforcing intertask dependencies. In:
Proc. 19th Int. Conference on Very Large Data Bases, Ireland, 1993, 134–
145.
[3] J. Cardoso and G. Cravo. Verifying the logical termination of work-
flows. In: Proc. 5th Annual Hawaii International Conference on Statistics,
Mathematics and Related Fields, ISSN: 1550-3747, 16-18 January, Hawaii,
USA, 2006, 330–346.
[4] U. Dayal, et al. Organizing long-running activities with triggers and
transactions. In: ACM SIGMOD International Conference on Manage-
ment of Data Table of Contents, 1990, 204–214.
[5] J. Eder, et al. A workflow system based on active databases. In: Pro-
ceedings of CON ’94, Workflow Management: Challenges, Paradigms and
Products, Austria, 1994, 249–265.
[6] A.H.M. ter Hofstede and E.R. Nieuwland. Task structure se-
mantics through process algebra. Software Engineering Journal, 8 (1993),
No 1, 14–20.
Termination of Workflows 243
[7] J. Klingemann, et al. Deriving service models in cross-organizational
workflows. In: Proceedings of RIDE - Information Technology for Virtual
Enterprises (RIDE-VE ’99), Sydney, Australia, 1999, 100–107.
[8] METEOR. Meteor (managing end-to-end operations) project home page,
http://lsdis.cs.uga.edu, 2004.
[9] P. Muth, et al. Enterprise-wide workflow management based on state
and activity charts. In: Proceedings NATO Advanced Study Institute on
WorkflowManagementSystemsandInteroperability. SpringerVerlag,1998.
[10] M.P. Singh. Semantical considerations on workflows: An algebra for
intertask dependencies. In: Fifth International Workshop on Database
Programming Languages, Electronic Workshops in Computing, Italy, 1995.
Departamento de Matema´tica e Engenharias
Universidade da Madeira
9000-390 Funchal, Portugal
E-MAIL: {gcravo, jcardoso}@uma.pt