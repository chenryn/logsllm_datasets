### Constraint Descriptions and Schematron Syntax

**Constraint 1: Spousal Relationship Role Assignment**
- **Description**: John Wack and Susan Wack, who are in a spousal relationship, should not be assigned to the same role.
- **Schematron Syntax**:
  ```xml
  <assert test="count(user[text()='JohnW']) + count(user[text()='SusanW']) &lt;= 1" diagnostics="Wack_Violate">
    John Wack and Susan Wack should not be assigned to the same role. The violating assignment is for the role: {role}
  </assert>
  ```
- **Diagnostic Message**:
  - From pattern "Checking for Conflicting Users":
    - Assertion fails: "John Wack and Susan Wack should not be assigned to the same role" at `/Bank_RBAC_Model[1]/UserRoleAssignment[4]`.
    - The violating assignment is for the role: LNO.

**Constraint 2: Dependent Role Assignments**
- **Description**: Any user assigned to the Safe Deposit Vault (SDV) role must already be assigned to the Customer Service Representative (CSR) role.
- **Schematron Syntax**:
  ```xml
  <assert test="not(user[@role='SDV'] and not(user[@role='CSD']))" diagnostics="Dependent_Role_Violation">
    A user assigned to SDV must already be assigned to CSR role. The following user is assigned to SDV role but not to CSR role: {user}
  </assert>
  ```
- **Diagnostic Message**:
  - From pattern "Checking for Dependent Role Assignments":
    - Assertion fails: "A user assigned to SDV must already be assigned to CSR role" at `/Bank_RBAC_Model[1]/UserRoleAssignment[3]/user[2]`.
    - The following user is assigned to SDV role but not to CSR role: Gray.

**Constraint 3: Role Limit for Specific User**
- **Description**: TomK should not be assigned more than two roles.
- **Schematron Syntax**:
  ```xml
  <assert test="count(UserRoleAssignment[user/text()='TomK']) &lt;= 2" diagnostics="Tom_Limit">
    Tom should be assigned a maximum of 2 roles. The actual number of roles assigned to Tom is: {count(UserRoleAssignment[user/text()='TomK'])}
  </assert>
  ```
- **Diagnostic Message**:
  - From pattern "Checking for limit on Tom's Assignments":
    - Assertion fails: "Tom should be assigned a maximum of 2 roles" at `/Bank_RBAC_Model[1]`.
    - The actual number of roles assigned to Tom is: 3.

**Constraint 4: Least Privilege Constraint**
- **Description**: The right to open an account and close an account should not be assigned to the same role.
- **Schematron Syntax**:
  ```xml
  <assert test="count(privilege[text()='OPEN_ACCT']) + count(privilege[text()='CLOSE_ACCT']) &lt;= 1" diagnostics="Excess_Priv">
    The Privilege to Open and Close Accounts should not be assigned to the same role. The errant role is: {role}
  </assert>
  ```
- **Diagnostic Message**:
  - From pattern "Excess Privilege for a Role":
    - Assertion fails: "The Privilege to Open and Close Accounts should not be assigned to the same role" at `/Bank_RBAC_Model[1]/RolePrivilegeAssignment[3]`.
    - The errant role is: CSR.

**Constraint 5: Transaction Integrity Constraint**
- **Description**: The right to perform the operation of Loan Approval should be given to more than one role to maintain transaction integrity.
- **Schematron Syntax**:
  ```xml
  <assert test="count(role[privilege[text()='LOAN_APPROVAL']]) &gt; 1" diagnostics="Min_Role_Reqmt">
    A Minimum of two roles is required for loan approval. The only role now is: {role}
  </assert>
  ```
- **Diagnostic Message**:
  - From pattern "Minimal Roles required for an operation":
    - Assertion fails: "A Minimum of two roles is required for loan approval" at `/Bank_RBAC_Model[1]`.
    - The only role now is: LNO.

### Related Work

Substantial work in policy specification and verification for authorization data [13, 14] has been based on logic programming. A major disadvantage of this approach is that the authorization data embedded in predicates and other logic programming artifacts cannot be easily extracted and mapped to formats suitable for instantiation within various access control frameworks. XML-based frameworks for authorization specification overcome this disadvantage, but they have limitations in specifying certain types of policy constraints. For example, OASIS XACML [15] and IBM’s XACL [16] are geared towards securing XML documents and do not support traditional access controls such as DAC or MAC or enterprise access controls like RBAC. Smith and Deng [17] developed a DTD Schema for an RBAC model, leaving domain constraint verification to a separate administrative API. However, DTD Schemas generally have limitations in representing even structural constraints (e.g., element occurrences) and rudimentary domain-specific policy constraints.

### Scope for Further Work

We have provided a framework for validating enterprise authorization specifications. The platform and language-independent nature of the framework make it ideal for integration into the security data and policy specification module of enterprise security administration tools. With standardized API (e.g., DOM) based XML parsers, authorization data can be easily mapped to the native formats required by various platform-specific access control mechanisms, as done in provisioning tools [18].

However, our constraint specification framework has limitations. For instance, it is not possible to formulate constraints involving nested processing of data in two sets (e.g., verifying consistency of privilege assignments for each pair of SSD roles). This limitation is evident in the formulation of Constraint 4, where we had to identify specific pairs of conflicting users instead of using a generalized list. Additionally, our framework only includes static constraints and not dynamic constraints that use contextual information (e.g., time, location, process state) to enforce access restrictions at runtime. We are exploring the possibility of specifying such constraints through XSLT templates and using XSLT processors with various language bindings to automatically generate code in procedural languages like Java and C++ for incorporation into the access enforcement module of target platforms.

### References

[1] D.Ferraiolo, J.Cugini, and D.R.Kuhn. “Role Based Access Control (RBAC): Features and Motivations” Proc. 11th Annual Computer Security Applications Conference, December 1995.

[2] R.S. Sandhu, E.J.Coyne, H.L.Feinstein, and C.E.Youman. “Role Based Access Control Models” IEEE Computer, vol 29, Num 2, February 1996, p38-47.

[3] XML 1.0, W3C Recommendation Feb '98, http://www.w3.org/XML/

[4] XML Schema Part 0: Primer W3C Recommendation, 2 May 2001, http://www.w3.org/TR/xmlschema-0/

[5] Document Object Model Technical Reports, http://www.w3.org/DOM/DOMTR

Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 1063-9527/03 $17.00 © 2003 IEEE