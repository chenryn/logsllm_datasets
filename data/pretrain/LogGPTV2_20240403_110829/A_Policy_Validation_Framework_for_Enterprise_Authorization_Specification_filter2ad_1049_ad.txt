assigned to the same role (whatever be the role) since they
have spousal relationship.
The schematron description of the above constraint is:
       count (user [text () = 'JohnW'])
                                    + count(user [text() = 'SusanW'])"
               diagnostics="Wack_Violate">John Wack and
         Susan Wack should not be assigned to the same 
role
         The violating 
                  assignment is for the role:  
The diagnostic message prints out the role that JohnW
and SusanW are assigned:
From pattern "Checking for Conflicting Users":
     Assertion fails: "John Wack and Susan Wack should 
not be assigned to the same role"  at
         /Bank_RBAC_Model[1]/UserRoleAssignment[4]
        ... The 
violating assignment is for the role: LNO 
Constraint  5:  (Constraint  specifying  dependent  role
assignments): Every user assigned to Safe Deposit Vault
role  (@role=’SDV’)  should  already be assigned to
Customer Service Representative role (@role=’CSD’).
The Schematron syntax for the above constraint is:
      A user assigned to 
SDV must already be assigned to CSR role 
         The
following user is assigned to SDV role but not to CSR role: 
The diagnostic message due to our authorization
specification not conforming to the above constraint is:
From pattern "Checking for Dependent Role 
Assignments":
     Assertion fails: "A user assigned to SDV must already 
be assigned to CSR role"  at
/Bank_RBAC_Model[1]/UserRoleAssignment[3]/user[2]
        ... The following user is assigned to SDV 
role but not to CSR role: Gray 
Constraint  6:  (Limits  on  Role  Assignment  for  a
specific  user):  The  specification  of  the  constraint  that  a 
particular user Tom  (user/text()=  ‘TomK’)  should  not  be 
assigned more than two roles is:. 
limit  on  Tom's
for 
count(UserRoleAssignment[user/text()='TomK'])"
diagnostics="Tom_Limit">Tom should be assigned a 
maximum of 2 roles
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
         The actual number 
of roles assigned to Tom is: 
The diagnostic message generated on our authorization
specification is: 
From pattern "Checking for limit on Tom's Assignments":
     Assertion fails: "Tom should be assigned a maximum of 
2 roles"  at
         /Bank_RBAC_Model[1]
        ..
. The actual number of roles assigned to Tom is: 3
Constraint 7:  (Least Privilege Constraint): The right to
open an account as well as to close an account should not 
be assigned  to  the  same  role.  The  Schematron  constraint
can  be  specified  not  only  to  verify  whether a role with
both  privileges  exists  in  the Bank-Authorization XML
Data but  also  to  print  out  the  violating  Role. The
constraint specification is: 
(count(privilege[text()='OPEN_ACCT']) +
count(privilege[text()='CLOSE_ACCT']))"
diagnostics="Excess_Priv">The Privilege to Open and 
Close Accounts should not be assigned to same role 
         The errant role is: 
The diagnostic error message generated by Schematron
Validator is: 
From pattern "Excess Privilege for a Role":
     Assertion fails: "The Privilege to Open and Close 
Accounts should not be assigned to same role"  at
   /Bank_RBAC_Model[1]/RolePrivilegeAssignment[3]
   ... The errant 
role is: CSR
Constraint 8: (Transaction Integrity Constraint): The 
right to perform certain operations should be assigned
to more than  one  role  in  order  to  maintain  the 
integrity of the transaction  that  is  facilitated  by  this 
operation.
The  constraint  that  the  right  to  perform  the operation of
Loan Approval  should be given to more than one role is
specified as: 
      =2"  diagnostics="Min_Role_Reqmt">A
Minimum of two roles is required for loan approval
         The only role 
now is: 
The diagnostic error message generated due to a violation
of the policy constraint in our bank-enterprise
authorization specification is: 
From pattern "Minimal Roles Roles required for an 
operation":
     Assertion fails: "A Minimum of two roles is required for 
loan approval"  at
/Bank_RBAC_Model[1]
        ..
. The only role now is: LNO
7.  Related Work
A  substantial  work  done  in  the area of policy
specification  and  verification  for  authorization data
[13,14] are based on the logic programming approach. A 
major  disadvantage  of  the  logic programming approach
is that the authorization data embedded in the predicates 
and other logic programming  artifacts  cannot  be  easily
extracted and mapped to the format that is amenable for 
instantiation within the access control frameworks of the 
various  target  platforms.  XML-based  frameworks for
authorization specification  certainly  overcome 
this
present XML-based
disadvantage.  However 
approaches have limitations with  respect  to  the  type  of
policy constraints they can specify. The OASIS XACML
[15]  and  IBM’s  XACL  [16]  are  access  control policy
specification frameworks that are mainly geared towards 
securing XML documents and  they  do  not  provide
support  for  representing  traditional  access  controls  such 
as  DAC  or  MAC  or  enterprise  access  controls  such as
RBAC. Smith and Deng  [17]  have  developed  a  DTD 
Schema of an RBAC Model and have left the verification
of domain  constraints  to  a  separate  administrative  API. 
Further  DTD  Schemas  in  general  have  limitations with
the
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
respect  to  representation  of  even  structural  constraints 
(e.g. number of occurrences of an element) for an RBAC 
model and they cannot be used for representation of even 
rudimentary domain-specific policy constraints.  
[6] R.Chandramouli, “Application of XML Tools for Enterprise-
wide RBAC Implementation Tasks”, Proc. Of 5th ACM 
workshop on Role-based Access Control, July 2000, Berlin, 
Germany. 
[7]  A.Schaad, “Role-based Access Control system of a 
European Bank: A Case Study and Discussion”, Proc. Of 6th
ACM Symposium on Access Control Models and Technologies 
(SACMAT 2001), Chantilly, VA, USA. 
[8] Resource Description Framework (RDF), 
http://www.w3.org/RDF/
[9] Schematron - Pattern-based schema language, 
http://www.ascc.net/xml/resource/schematron/schematron.html
[10] D.Ferraiolo, R.Sandhu, S.Gavrila, D.R.Kuhn and 
R.Chandramouli, “Proposed NIST Standard for Role-based 
Access Control”, ACM Trans. Inf.Syst.Security, Vol 4, Aug 
2001, pp 224-274. 
[11] http://www.xmlspy.com/download.html
[12]  http://www.topologi.com/
[13] Jajodia, S., Samarati, P.,et al, “A Logical Language for 
Expressing Authorizations”, IEEE Symposium on Security and 
Privacy, Oakland, CA, USA, 1997. 
[14] Chomicki, J., Lobo, J., Naqvi, S. “A Logic Programming 
Approach to Conflict Resolution in Policy Management,”, 7th
Intl. Conf. On Principles of Knowledge Representation and 
Reasoning, Brackenridge, CO, USA, 2000. 
[15] T. Moses, “The OASIS XACML Language Proposal”, 
http://www/oasisopen.org/committees/xacml/docs
[16] M Kudo, S.Hada, “XML Access Control”, 
“http://www.trl.ibm.com/projects/xml/xacl/xmlac-proposal.html,
Oct 2000. 
[17] Nathan N. Vuong , Geoffrey S. Smith , Yi Deng, Managing 
security policies in a distributed environment using extensible
markup language (XML), Proceedings of the 16th ACM 
SAC2001 symposium on Applied computing  March 2001, Las 
Vegas, Nevada, United States. 
[18] Ferraiolo D.F, Kuhn D.R, Chandramouli R, “Role-
Based Access Control”, Artech House, April 2003. 
8.  Scope for Further Work 
We  have  provided  a  framework  for  validation  of  an 
enterprise  authorization  specification.  The  platform  and 
language  independent  nature  of  the  framework  makes  it 
an ideal candidate for incorporating this into the security 
data  and  policy  specification  module  of  enterprise 
security  administration  tools.  With  the  availability  of 
standardized  API  (e.g.,  DOM)  based  XML  parsers, 
authorization  specification  data  can  be  easily  be  mapped 
to the native formats required of various platform-specific 
access  control  mechanisms  as  is  done  in  a  class  of  tools 
called provisioning tools [18]. 
However,  our  constraint  specification  framework  is 
not without its limitations. For example, it is not possible 
to formulate constraints that involve nested processing of 
data  in  two  sets  (e.g.,  verify  consistency  of  privilege 
assignments  for  each  pair  of  SSD  roles).  This  limitation 
could  be  seen  in  the  formulation  of  Constraint  4,  where 
we  had  to  identify  the  specific  pair  of  conflicting  users 
instead  of  formulating  the  constraint  using  a  generalized 
list  of  all  conflicted  users.  Further  our  constraint 
specification  framework  contains  only  static  constraints 
but  not  dynamic  constraints  that  make  use  of  contextual 
information  like  time,  location,  process  state  etc.  to 
enforce  access  restriction  at  run  time.  We  are  exploring 
the  possibility  of  specifying  such  constraints  through 
XSLT  templates  and  then  use  XLST  processors  with 
various language bindings to automatically generate code 
in  procedural  languages  like  Java  and  C++  so  as  to 
incorporate them in the access enforcement module of the 
access control mechanism of target platforms. 
9.  References 
[1] D.Ferraiolo, J.Cugini, and D.R.Kuhn. “Role Based Access 
Control (RBAC): Features and Motivations” Proc. 11th Annual 
Computer Security Applications Conference, December 1995. 
[2]  R.S.  Sandhu,  E.J.Coyne,  H.L.Feinstein  and  C.E.Youman. 
“Role  Based  Access  Control  Models”  IEEE  Computer,  vol  29, 
Num 2, February 1996, p38-47. 
[3]  XML 
http://www.w3.org/XML/
1.0,  W3C  Recommendation 
Feb 
'98, 
[4] XML Schema Part 0: Primer W3C Recommendation, 2 May 
2001 http://www.w3.org/TR/xmlschema-0/
[5] Document Object Model Technical Reports, 
http://www/w3.org/DOM/DOMTR
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE