transfer his computations into Zp(cid:28) and Zq(cid:28) without
eventually factoring N = p · q, which is commonly
assumed to be a hard problem. A further gap is
that the user deploys LFSRs with feedback functions
fa(x) ∈ Zp(cid:28)[x] and fb(x) ∈ Zq(cid:28) where the provider only
knows the feedback functions f ∗a (x), f ∗b (x) ∈ Z[x] that
are multiples of fa(x), fb(x). Given that these func-
tions involve more inputs, and require the construc-
i ∈ Zp(cid:28) and b(k)
4Observe that in principle it may happen with some prob-
ability that more than one root exhibits this pattern. This is
the reason why a padding length ≥ log2(n· s) is proposed such
that the expected number of incorrectly reconstructed sectors
in the ﬁle is less than 1.
5Recall that this property is validated by the proof of
retrievability already.
−→b j := (0 . . .0
j−1
(cid:31)(cid:30)(cid:29)(cid:28)
n·s−( j−1)−λ∗
0 . . .0
(cid:31)(cid:30)(cid:29)(cid:28)
,α∗1 , . . . ,α ∗λ∗,
),
(13)
where −→b1 corresponds to the given feedback polyno-
mial f ∗a (x) and the others are derived by simple shift
of indexes.
Hence, for any valid relation (cid:30)v = (vi)i ∈ V, there
exist unique coeﬃcients c1, . . . ,c n·s−λ∗+1 ∈ Z such that
(cid:30)v = ∑i ci · −→bi . Let imin be the smallest index with
cimin (cid:24)= 0. Then, it holds that the ﬁrst v j = 0 for
j  imin) are zero at index imin.
Hence, it holds that maxi{(cid:22)log2(vi)(cid:21)} ≥ (cid:22)log2(α∗1 )(cid:21).
This shows that the eﬀort of executing a valid rela-
tion (cf. Equation (12)) involves at least one exponen-
tiation with an exponent of size (cid:22)log2(α∗1 )(cid:21).6 The ef-
fort to compute one exponentiation for an exponent of
bitsize k is 3/2·k·Tmult, where Tmult stands for the time
it takes the resource-constrained rational attacker
(see Section 2.3) to multiply two values modulo N [27].
6One may combine several exponentiations to reduce the
overall number of exponentiations but one cannot reduce the
eﬀort to compute at least once the exponentiation with the
highest exponent.
1060  25th USENIX Security Symposium 
USENIX Association
10
Thus, a pessimistic lower bound for reconstructing
a missing value gi is 3/2·(cid:30)log2(α∗1 )(cid:28)· Tmult. Observe
that we ignore here additional eﬀorts such as ﬁnding
appropriate valid relations (cf. Equation (12)), etc.
Assume now that the service provider stores less
than a fraction δ of all sectors of a given replica
where δ refers to the threshold chosen by the user
(see also Deﬁnition 2). Thus, for any value gi con-
tained in the challenge, the probability that gi has
to be re-computed is at least 1− δ . Due to the fact
that this holds for the values h j as well and that a
challenge requests (cid:30)· s sectors, the expected number
of values that need to be recomputed is 2(cid:30)· s· (1−δ ).
To achieve the binding property with respect to a
rational attacker, one has to ensure that the time
eﬀort for recomputing these values incurs costs that
exceed the costs for storing these values. This im-
plies a time threshold Tthr which marks the minimum
computational eﬀort this should take. Given such a
threshold Tthr, we get the following inequality:
(cid:30)log2(α∗1 )(cid:28) ≥
Tthr
3(cid:30)· s· (1− δ )· Tmult
.
(14)
That is, if the parameters are chosen as displayed
in (14), a dishonest provider would bear on average
higher costs than an honest provider. Here, one
can use the common cut-and-choose approach, by
posing a number of challenges where the number is
linear in the security parameter κ, to ensure that the
overall probability to circumvent these computations
is negligible in κ. This proves the binding property
(cf. Deﬁnition 2) with respect to the class of PPT
service providers that can execute a bounded number
of threads in parallel only.
Notice that Mirror can easily cope with (i) diﬀerent
attacker strengths, and (ii) variable cost metrics, as
follows:
j
i and hb(k)
Length of LFSR: One option would be to increase
λ∗, i.e., the length of the LFSR communicated
to the provider, and hence the number of values
ga(k)
the provider has to use for gener-
ating the replicas. In the extreme case, λ∗ could
be made equal to half of the total number of
sectors n· s—which would result into a scheme
whose bandwidth consumption is comparable
to [18].
Bitlength of coeﬃcients: Another
alternative
would be to keep λ∗ short, but to increase
the bitlengths of the coeﬃcients α∗i and β∗j .
This would preserve the small bandwidth
consumption of Mirror but would increase the
time eﬀort to run Replicate. This option will
also not aﬀect the latency borne by users in
verifying the provider’s response.
Hybrid approach: Clearly, one can also aim for a
hybrid scheme, by increasing both the public
LFSR length λ∗ and the coeﬃcients α∗i and β∗j .
In Section 5, we investigate reasonable choices of α∗1 ,
ρ, and Tthr to satisfy Equation 14. Of course, the
same considerations can also be applied with respect
to β∗1 which we omit for space reasons.
5
Implementation & Evaluation
In this section, we evaluate an implementation of
Mirror within a realistic cloud setting and we compare
the performance of Mirror to the MR-PDP solution
of [18].
5.1
Implementation Setup
We implemented a prototype of Mirror in Scala. For a
baseline comparison, we also implemented the multi-
replica PDP protocol7 of [18], which we denote by
MR-PDP in the sequel (see Appendix A for a descrip-
tion of the MR-PDP of [18]). In our implementation,
we relied on SHA-256, and the Scala built-in random
number generator.
We deployed our implementation on a private net-
work consisting of two 24-core Intel Xeon E5-2640
with 32GB of RAM. The storage server was running
on one 24-core Xeon E5-2640 machine, whereas the
clients and auditors were co-located on the second
24-core Xeon E5-2640 machine.
To emulate a realistic Wide Area Network (WAN),
the communication between various machines was
bridged using a 100 Mbps switch. All traﬃc ex-
changed on the networking interfaces of our machines
was shaped with NetEm [31] to ﬁt a Pareto distri-
bution with a mean of 20 ms and a variance of 4
ms—thus emulating the packet delay variance spe-
ciﬁc to WANs [19].
In our setup, each client invokes an operation in
a closed loop, i.e., a client may have at most one
pending operation.
When implementing Mirror, we spawned multiple
threads on the client machine, each thread corre-
sponding to a unique worker handling a request of a
client. Each data point in our plots is averaged over
10 independent measurements; where appropriate, we
include the corresponding 95% conﬁdence intervals.
7We acknowledge that PDP oﬀers weaker guarantees than
POR. However, to the best of our knowledge, no prior propos-
als for multi-replica-POR exist. MR-PDP thus oﬀers one-of-
the-few reasonable benchmarks for Mirror.
USENIX Association  
25th USENIX Security Symposium  1061
11
]
s
[
B
M
4
6
e
t
a
c
i
l
p
e
r
o
t
e
m
T
i
 1200
 1000
 800
 600
 400
 200
 0
λ*=5
λ*=15
λ*=40
λ*=60
10 20 30 40 50 60 70 80 90 100
|α1*|
]
s
[
y
c
n
e
a
L
t
 3
 2.5
 2
 1.5
 1
 0.5
 0
0
40
80
120
|α1*|
160
200
]
s
[
y
c
n
e
a
L
t
 7000
 6000
 5000
 4000
 3000
 2000
 1000
 0
MR-PDP (Store)
Mirror (Store)
1
2
8
16
32
File size [MB]
64
128 1024
(a) Impact of |α∗1| on replication time.
(b) Impact of |α∗1| on the time required
by a rational provider to issue correct
responses.
(c) Latency incurred in Store w.r.t. the
ﬁle size.
]
s
[
y
c
n
e
a
L
t
 400
 350
 300
 250
 200
 150
 100
 50
 0
MR-PDP (Replicate)
1
2
8
r
32
64
]
s
[
y
c
n
e
a
L
t
 4000
 3500
 3000
 2500
 2000
 1500
 1000
 500
Mirror (Replicate)
1
2
8
r
32
64
]
s
[
y
c
n
e
a
L
t
 6
 5
 4
 3
 2
 1
 0
MR-PDP (Verify-Client)
MR-PDP (Verify-Server)
Mirror (Verify-Client)
Mirror (Verify-Server)
1
2
8
r
32
64
(d) Latency incurred in Replicate as wit-
nessed by the clients of MR-PDP w.r.t.
r.
(e) Latency incurred in Replicate as wit-
nessed by the service provider in Mirror
w.r.t. r.
(f) Latency incurred in Verify as seen by
clients.
Figure 1: Performance evaluation of Mirror in comparison to the MR-PDP scheme of [18]. Each data point
in our plots is averaged over 10 independent runs; where appropriate, we also show the corresponding 95%
conﬁdence intervals.
Parameter
File size
|p|
|q|
RSA modulus size
Number of challenges (cid:31)
Length of secret LFSR λ
Length of public LFSR λ∗
Fraction of stored sectors δ
Number of replicas r
Default Value
64 MB
1024 bits
1024 bits
2048 bit
40 challenges
2
15
0.9
2
Table 2: Default parameters used in the evaluation.
Table 2 summarizes the default parameters assumed
in our setup.
5.2 Evaluation Results
Before evaluating the performance of Mirror, we start
by analyzing the impact of the block size on the
latency incurred in the veriﬁcation of Mirror and
in MR-PDP. Our results (Figure 4 in Appendix E)
show that modest block sizes of 8 KB yield the most
balanced performance, on average, across the inves-
tigated schemes. In the rest of our evaluation, we
therefore set the block size to 8 KB.
Impact of the bitsize of α∗1 : In our implementa-
tion, our choice of parameters was mainly governed
by the need to establish a tradeoﬀ between the repli-
cation performance and the resource penalty incurred
on a dishonest provider. To this end, we choose a
small value for the public LFSR length λ∗, i.e., the
LFSR length communicated to S , and small coeﬃ-
cients α∗i and β∗j (these coeﬃcients were set to 1 bit
for i, j > 1). Recall that using smaller coeﬃcients al-
lows for faster exponentiations and hence a decreased
replication eﬀort.
However, as shown in Equation 14, the bitsize of
α∗1 (which we shortly denote by |α∗1| in the follow-
ing) plays a paramount role in the security of Mirror.
Note that the same analysis applies to β∗1 —which we
do not further consider to keep the discussion short.
Clearly, |α∗1| (and λ∗) also impacts the ﬁle replica-
tion time at the service provider. In Figure 1(a), we
evaluate the impact of |α∗1| on the replication time,
and on the time invested by a rational provider (who
does not replicate) to answer every client challenge in