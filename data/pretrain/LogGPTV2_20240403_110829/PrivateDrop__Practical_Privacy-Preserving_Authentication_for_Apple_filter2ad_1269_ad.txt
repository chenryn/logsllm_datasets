exact overhead depends on the chosen implementation. In
case Apple provides keys αi along with values Yi and signa-
tures sign (σVR,Yi), the additional communication overhead
in the precomputation phase is only O(m). Otherwise, if the
keys are chosen on the client device, a non-interactive zero-
knowledge Schnorr proof requires additional computation
with O(m) exponentiations and hash operations.
Implementation and Integration
Overhead. Overall, in the precomputation phase, both par-
ties have a computation overhead of O(m + n), which is a
one-time cost. In the online phase, the computation over-
head is O(m), with m (cid:28) n, while the communication over-
head is O(m + n). Due to n still being fairly limited in prac-
tice (e.g., n = 10k) and the availability of a low-latency and
high-bandwidth Wi-Fi connection, this communication over-
head is very well manageable (cf. our experiments in § 6).
5
We implement both the original AirDrop protocol and
our PrivateDrop extension for iOS and macOS to empiri-
cally study the overhead caused by PSI. We do not use Ap-
ple’s closed source AirDrop implementation to provide a fair
comparison between non-PSI and PSI. In the following, we
discuss our implementation (including mDNS and HTTPS
communication) and our integration of PrivateDrop into the
original AirDrop protocol stack. Our open-source implemen-
tation is available on GitHub [45].
5.1
Apple does not expose or document a low-level AirDrop API
that would allow us to integrate our PrivateDrop extension
and conduct a ﬁne-grained performance evaluation. Using an
existing open-source implementation of AirDrop [46] is also
not an option as it is written in Python, which is not supported
on iOS and not optimized for performance.
Implementation of the Base Protocol
3584    30th USENIX Security Symposium
USENIX Association
nS}
1, . . . ,IDS
mS}
AirDrop Sender S
Input:
ABS = {cS
1, . . . ,cS
IDsS = {IDS
Output: ABR ∩ IDsS
← Zq
kS $
For i = 1 to mS:
hS
i = H(IDS
Obtain Y S
$
← Zq, yS
i ), αS
i
σ,i for yS
i from Apple
i = (hS
i )αS
i
j )kS
)
j ),H(cS
For j = 1 to nS:
uS
j = H(H(cS
← Zq
rS $
Abort if sign(cid:0)σVR,Y R
For i = 1 to mR:
(cid:1) invalid
i
i )rS
i = (yR
1, . . . ,yR
mR ,zS
mR ,aS
mR )
i )kS , aS
zS
i = (yR
1 ,zS
1,aS
cS = H(yR
pS = rS + kS · cS
mS ,zR
mS ,aR
mS )
1,zR
1 , . . . ,yS
cR = H(yS
1 ,aR
For j = 1 to mS:
j )pR
(cid:54)= aR
j · (zR
j )1/αS
j , (zR
j )
j ∈ IDsS|∃i : uR
Abort if (yS
j = H(hS
vS
Output {IDS
j )cR
i = vS
j}
Precomputation Phase
Online Phase
σ,1,...,Y Rσ,mR )
(Y R
Message M1
←−−−−−−−−−−−−−
(zS
1, . . . ,zS
mR ),
(aS
mR ), pS,
1, . . . ,aS
{uS
1, . . . ,uS
nS},
(Y S
σ,1, . . . ,Y S
σ,mS ),
Message M2
−−−−−−−−−−−−−→
(zR
1 , . . . ,zR
mS ),
mS ), pR,
1 , . . . ,aR
(aR
{uR
1 , . . . ,uR
nR}
Message M3
←−−−−−−−−−−−−−
nR}
1 , . . . ,IDR
mR}
AirDrop Receiver R
Input:
ABR = {cR
1 , . . . ,cR
IDsR = {IDR
Output: ABS ∩ IDsR
← Zq
kR $
For i = 1 to mR:
hR
i = H(IDR
Obtain Y R
For j = 1 to nR:
uR
j = H(H(cR
← Zq
rR $
$
← Zq, yR
i ), αR
i
σ,i for yR
i from Apple
i = (hR
i )αR
i
j ),H(cR
j )kR
)
mR ,aS
mR )
i )cS
1 ,zS
mR ,zS
1, . . . ,yR
(cid:54)= aS
i )1/αR
i )
1,aS
cS = H(yR
For i = 1 to mR:
i )pS
i · (zS
i , (zS
i ∈ IDsR|∃ j : uS
(cid:16)
(cid:17)
Abort if (yR
vR
i = H(hR
Output {IDR
For j = 1 to mS:
Abort if sign
j )kR , aR
j = (yS
zR
cR = H(yS
1,zR
1 ,aR
pR = rR + kR · cR
σVR,Y S
j
j )rR
j = (yS
1 , . . . ,yS
mS ,zR
j = vR
i }
invalid
mS ,aR
mS )
Figure 4: PrivateDrop’s full PSI-based mutual authentication protocol for AirDrop. The protocol is based on the optimized and interleaved
execution of DO2 (green) and DO3 (orange), cf. Tab. 1 and Fig. 2, divided into a reusable precomputation and an online phase.
Therefore, we re-implement the full AirDrop protocol stack
in Swift, Apple’s modern programming language that com-
piles down to assembler code. In particular, we use Apple’s
public NetService API [8] to announce services via mDNS
and bootstrap communication over the AWDL interface. In
addition, we use SwiftNIO [9] to achieve high-performance
asynchronous network operations and to implement HTTPS
communication. In App. C, we show that our AirDrop imple-
mentation performs very similar to Apple’s.
AirDrop’s validation records are implemented using cryp-
tographic message syntax (CMS) [47]. To provide the best
integration with Apple’s existing certiﬁcation infrastructure,
we also implement the signatures Yσ,i in Eq. (6) in CMS. For
validation, we use the OpenSSL library [71], as Apple’s Secu-
rity framework provides CMS support only on macOS but not
on iOS [6]. The individual validation records VRσ,i in Eq. (4)
are not part of our implementation.
5.2
Implementation of the PSI Operations
Implementing our PSI protocol requires access to low-level el-
liptic curve (EC) operations, for which we would have liked
to utilize built-in operating system capabilities. Unfortu-
nately, Apple’s Swift-based CryptoKit [7] does not expose
the required point operations, e.g., addition and scalar multi-
plication. As an alternative, we use the established open-
source library Relic [11]. Compared to other third-party
candidates such as MIRACL [68] or libecc [15], Relic is
focused on efﬁciency [73, 81] and portability with support
for all relevant architectures, i.e., arm64 (iOS and macOS)
and x86_64 (macOS). Also, Relic is written in C, which inte-
grates well with our Swift-based protocol implementation.
We instantiate all primitives to provide a security level
of 128 bit. Our Difﬁe-Hellman-based PSI implementa-
tion uses the standardized elliptic curve P-256.
USENIX Association
30th USENIX Security Symposium    3585
protocol yields no matches, no validation records are included.
If the PSI protocol yields one or more matches, one randomly
chosen individual validation record that corresponds to one
of the matches is included in the request. Note that, in princi-
ple, we could include the validation records for all matches.
However, this would yield no beneﬁt as one contact identiﬁer
is sufﬁcient to uniquely identify the other party based on the
user’s address book.7 On the contrary, transmitting multiple
validation records would increase communication overhead
and require the receiver to verify multiple signatures.
Communication Rounds. Note that after processing M2,
the receiver has already selected the appropriate individual
validation record and can send it back to the sender with M3.
The sender will include its individual validation record in
the Ask request when initiating a ﬁle transfer. By piggy-
backing the receiver’s validation record to M3, we avoid one
additional communication round that would be necessary to
exchange VRσ,i after the PSI protocol has completed. In total,
our PSI-based protocol only incurs one additional communi-
cation round compared to the original authentication.
Integration with the BLE Advertisements
5.4
AirDrop’s BLE advertisements contain the ﬁrst two bytes of
the sender’s hashed contact identiﬁers, which are also part
of the validation record. Receivers use these hashes to check
if the sender is a potential contact match and whether they
should turn on their AWDL interface to conduct the full au-
thentication handshake. As shown in [92], this mechanism
provides no additional security as it can easily be circum-
vented with brute force. Therefore, the short hashes appear to
be an optimization to prevent wakeups of the receiver’s Wi-Fi
radio that unnecessarily drain the device’s battery.
As the purpose of our work is to prevent any leakage of