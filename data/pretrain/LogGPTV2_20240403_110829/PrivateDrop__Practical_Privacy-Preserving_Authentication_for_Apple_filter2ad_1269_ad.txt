### Communication and Computation Overhead

The exact overhead incurred by the chosen implementation varies. If Apple provides keys \(\alpha_i\) along with values \(Y_i\) and signatures \(\text{sign}(\sigma_{VR}, Y_i)\), the additional communication overhead in the precomputation phase is only \(O(m)\). Conversely, if the keys are generated on the client device, a non-interactive zero-knowledge Schnorr proof requires additional computation involving \(O(m)\) exponentiations and hash operations.

### Implementation and Integration Overhead

In the precomputation phase, both parties incur a one-time computation overhead of \(O(m + n)\). In the online phase, the computation overhead is \(O(m)\) (with \(m \ll n\)), while the communication overhead is \(O(m + n)\). Given that \(n\) is typically limited in practice (e.g., \(n = 10,000\)) and assuming a low-latency, high-bandwidth Wi-Fi connection, this communication overhead is manageable (as demonstrated in our experiments in §6).

### Implementation Details

We implemented both the original AirDrop protocol and our PrivateDrop extension for iOS and macOS to empirically study the overhead introduced by PSI. To ensure a fair comparison between non-PSI and PSI, we did not use Apple’s closed-source AirDrop implementation. Our open-source implementation, including mDNS and HTTPS communication, is available on GitHub [45].

#### Challenges in Integration

Apple does not provide or document a low-level AirDrop API, which would have allowed us to integrate our PrivateDrop extension and conduct a fine-grained performance evaluation. Additionally, using an existing open-source implementation of AirDrop [46] was not feasible as it is written in Python, which is not supported on iOS and is not optimized for performance.

### Base Protocol Implementation

We re-implemented the full AirDrop protocol stack in Swift, Apple's modern programming language, which compiles down to assembler code. We used Apple's public NetService API [8] to announce services via mDNS and bootstrap communication over the AWDL interface. For high-performance asynchronous network operations and HTTPS communication, we utilized SwiftNIO [9]. Our implementation performs very similarly to Apple’s, as shown in App. C.

AirDrop’s validation records are implemented using Cryptographic Message Syntax (CMS) [47]. To integrate seamlessly with Apple’s existing certification infrastructure, we also implemented the signatures \(Y_{\sigma,i}\) in CMS. For validation, we used the OpenSSL library [71], as Apple’s Security framework provides CMS support only on macOS, not on iOS [6]. The individual validation records \(VR_{\sigma,i}\) in Eq. (4) are not part of our implementation.

### PSI Operations Implementation

Implementing our PSI protocol required access to low-level elliptic curve (EC) operations. Unfortunately, Apple’s Swift-based CryptoKit [7] does not expose the necessary point operations, such as addition and scalar multiplication. As an alternative, we used the established open-source library Relic [11], which is focused on efficiency [73, 81] and portability, supporting all relevant architectures (arm64 for iOS and macOS, and x86_64 for macOS). Relic is written in C, integrating well with our Swift-based protocol implementation.

All primitives were instantiated to provide a security level of 128 bits. Our Diffie-Hellman-based PSI implementation uses the standardized elliptic curve P-256.

### Communication Rounds

If the PSI protocol yields no matches, no validation records are included. If there are one or more matches, one randomly chosen individual validation record corresponding to one of the matches is included in the request. Including multiple validation records would increase communication overhead and require the receiver to verify multiple signatures, which is unnecessary since one contact identifier is sufficient to uniquely identify the other party based on the user’s address book.

After processing message M2, the receiver has already selected the appropriate individual validation record and can send it back to the sender with message M3. By piggybacking the receiver’s validation record on M3, we avoid an additional communication round that would otherwise be needed to exchange \(VR_{\sigma,i}\) after the PSI protocol completes. Overall, our PSI-based protocol incurs only one additional communication round compared to the original authentication.

### Integration with BLE Advertisements

AirDrop’s BLE advertisements include the first two bytes of the sender’s hashed contact identifiers, which are also part of the validation record. Receivers use these hashes to check if the sender is a potential contact match and whether they should activate their AWDL interface for the full authentication handshake. As shown in [92], this mechanism provides no additional security and can be easily circumvented with brute force. The short hashes appear to be an optimization to prevent unnecessary wakeups of the receiver’s Wi-Fi radio, thus conserving battery life.

The purpose of our work is to prevent any leakage of information through these mechanisms.