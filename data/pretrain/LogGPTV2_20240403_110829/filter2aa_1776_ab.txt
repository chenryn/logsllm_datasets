### 优化后的文本

#### 启动 FrozenBubble 应用
```bash
adb shell am start \
  -c android.intent.category.LAUNCHER \
  -n org.jfedor.frozenbubble/.FrozenBubble
```
**启动意图 (Intent)**
- **动作 (Action)**: `android.intent.action.MAIN`
- **类别 (Category)**: `android.intent.category.LAUNCHER`
- **组件 (Component)**: `org.jfedor.frozenbubble/.FrozenBubble`

**执行命令**
```bash
$ adb shell dumpsys | grep -i bubble
```
**输出**
```
name=org.jfedor.frozenbubble/org.jfedor.frozenbubble.FrozenBubble
Intent { act=android.intent.action.PACKAGE_ADDED dat=package:org.jfedor.frozenbubble flg=0x10000000 (has extras) }
* TaskRecord{40744ad0 #4 A org.jfedor.frozenbubble}
  affinity=org.jfedor.frozenbubble
  intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=org.jfedor.frozenbubble/.FrozenBubble}
  realActivity=org.jfedor.frozenbubble/.FrozenBubble
...
```

#### ActivityManager 的职责
- 启动新的活动 (Activities) 和服务 (Services)
- 获取内容提供者 (Content Providers)
- 广播意图 (Intents)
- 管理内存不足 (OOM) 调整
- 处理应用无响应 (ANR, Application Not Responding)
- 管理权限
- 任务管理
- 生命周期管理

#### 使用 JDB 进行 Android 应用调试
```bash
#!/bin/bash
adb wait-for-device
adb shell am start \
    -e debug true \
    -a android.intent.action.MAIN \
    -c android.intent.category.LAUNCHER \
    -n org.jfedor.frozenbubble/.FrozenBubble &
debug_port=$(adb jdwp | tail -1);
adb forward tcp:29882 jdwp:$debug_port &
jdb -J-Duser.home=. -connect com.sun.jdi.SocketAttach:hostname=localhost,port=29882 &
```

**JDWP (Java Debug Wire Protocol)**
- 在 APK 清单文件中设置 `debuggable="true"`

**JDB 使用示例**
```bash
> threads
Group system:
  (java.lang.Thread)0xc14050e388   Compiler         cond. Waiting
  (java.lang.Thread)0xc14050e218   Signal Catcher   cond. waiting
  (java.lang.Thread)0xc14050e170   GC               cond. waiting
  (java.lang.Thread)0xc14050e0b8   HeapWorker       cond. waiting
Group main:
  (java.lang.Thread)0xc14001f1a8   main             running
  (org.jfedor.frozenbubble.GameView$GameThread)0xc14051e300
                                   Thread­10       running
  (java.lang.Thread)0xc14050f670   SoundPool       running
  (java.lang.Thread)0xc14050f568   SoundPoolThread  running
  (java.lang.Thread)0xc140511db8   Binder Thread #2 running
  (java.lang.Thread)0xc140510118   Binder Thread #1 running
> suspend 0xc14051e300
> thread 0xc14051e300
 Thread-10[1] where
  [1] android.view.SurfaceView$3.internalLockCanvas (SurfaceView.java:789)
  [2] android.view.SurfaceView$3.lockCanvas (SurfaceView.java:745)
  [3] org.jfedor.frozenbubble.GameView$GameThread.run (GameView.java:415)
```

#### Dalvik Debug Monitor Server (DDMS)
- DDMS 是一个用于调试和监控 Android 应用的工具。

#### 反编译与反汇编
- **apktool**: 用于反编译 APK 文件
- **dex2jar**: 将 DEX 文件转换为 JAR 文件
- **Jad / jd-gui**: 用于反编译 Java 字节码

**smali**: Android DEX 格式的汇编器/反汇编器
- **smali**: 汇编器
- **baksmali**: 反汇编器
- 完全集成在 apktool 中

**反编译示例**
```bash
$ apktool d ../AngryBirds/Angry+Birds.apk 
I: Baksmaling...
I: Loading resource table...
...
I: Decoding file­resources...
I: Decoding values*/* XMLs...
I: Done.
I: Copying assets and libs...
```

#### Java 字节码与 Dalvik 字节码
- **Java 字节码** (基于栈)
- **Dalvik 字节码** (基于寄存器)

**示例方法**
```java
public int method(int i1, int i2) {
    int i3 = i1 * i2;
    return i3 * 2;
}
```

**Java 字节码**
```assembly
method public method(II)I
    iload_1
    iload_2
    imul
    istore_3
    iload_3
    iconst_2
    imul
    ireturn
.end method
```

**Dalvik 字节码**
```assembly
.method public method(II)I
    mul-int v0, v2, v3
    mul-int/lit8 v0, v0, 2
    return v0
.end method
```

#### 修改游戏初始关卡
- 从第 1 关修改为第 5 关

**反汇编过程**
```bash
$ mkdir workspace smali-src
$ cd workspace
$ unzip ../FrozenBubble-orig.apk
Archive:  ../FrozenBubble-orig.apk
  inflating: META-INF/MANIFEST.MF
  inflating: META-INF/CERT.SF
  inflating: META-INF/CERT.RSA
  inflating: AndroidManifest.xml
...
extracting: resources.arsc
$ bin/baksmali -o smali-src workspace/classes.dex
```

**生成的文件列表**
```bash
smali-src$ find
./org/jfedor/frozenbubble/FrozenBubble.smali
./org/jfedor/frozenbubble/R$id.smali
./org/jfedor/frozenbubble/GameView.smali
./org/jfedor/frozenbubble/SoundManager.smali
./org/jfedor/frozenbubble/LaunchBubbleSprite.smali
./org/jfedor/frozenbubble/Compressor.smali
./org/jfedor/frozenbubble/R$attr.smali
./org/jfedor/frozenbubble/BubbleFont.smali
./org/jfedor/frozenbubble/PenguinSprite.smali
./org/jfedor/frozenbubble/GameView$GameThread.smali
./org/jfedor/frozenbubble/LevelManager.smali
./org/jfedor/frozenbubble/BubbleSprite.smali
./org/jfedor/frozenbubble/R$string.smali
...
```

**查找 LevelManager 类的方法**
```bash
smali-src$ grep "\.method" org/jfedor/frozenbubble/LevelManager.smali
.method public constructor ([BI)V
.method private getLevel(Ljava/lang/String;)[[B
.method public getCurrentLevel()[[B
.method public getLevelIndex()I
.method public goToFirstLevel()V
.method public goToNextLevel()V
.method public restoreState(Landroid/os/Bundle;)V
.method public saveState(Landroid/os/Bundle;)V
```

**Dalvik 方法元信息**
- **签名**
- **异常处理信息**
- **注解**
- **使用的寄存器数量**
- **调试信息**
  - 行号
  - 局部变量生命周期

**查找方法调用**
```bash
smali-src$ grep -r goToFirstLevel *
org/jfedor/frozenbubble/GameView$GameThread.smali: 
invoke-virtual {v2}, Lorg/jfedor/frozenbubble/LevelManager;->goToFirstLevel()V
org/jfedor/frozenbubble/LevelManager.smali:
.method public goToFirstLevel()V
```

**等效的 Java 代码**
```java
objLevelManager.goToFirstLevel();
```

通过以上步骤，您可以更清晰地理解和操作 FrozenBubble 应用的启动、调试和反编译过程。