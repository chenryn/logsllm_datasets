  -c android.intent.category.LAUNCHER \
  -n org.jfedor.frozenbubble/.FrozenBubble
Starting: Intent 
{ act=android.intent.action.MAIN 
cat=[android.intent.category.LAUNCHER] 
cmp=org.jfedor.frozenbubble/.FrozenBubb
le (has extras) 
Execute FrozenBubble
$ adb shell dumpsys | grep -i bubble
name=org.jfedor.frozenbubble/org.jfedor.frozenbubble.Froz
enBubble
    Intent { act=android.intent.action.PACKAGE_ADDED 
dat=package:org.jfedor.frozenbubble flg=0x10000000 (has 
extras) }
  * TaskRecord{40744ad0 #4 A org.jfedor.frozenbubble}
    affinity=org.jfedor.frozenbubble
    intent={act=android.intent.action.MAIN 
cat=[android.intent.category.LAUNCHER] flg=0x10200000 
cmp=org.jfedor.frozenbubble/.FrozenBubble}
    realActivity=org.jfedor.frozenbubble/.FrozenBubble
...
ActivityManager
• Start new Activities and Services
• Fetch Content Providers
• Intent broadcasting
• OOM adj. Maintenance
• ANR (Application Not Responding)
• Permissions
• Task management
• Lifecycle management
ActivityManager
• starting new app from Launcher:
– onClick(Launcher)
– startActivity
– 
– ActivityManagerService
– startViaZygote(Process.java)
– 
– Zygote
Use JDB to Trace Android Application
#!/bin/bash
adb wait-for-device
adb shell am start \
    -e debug true \
    -a android.intent.action.MAIN \
    -c android.intent.category.LAUNCHER \
    -n org.jfedor.frozenbubble/.FrozenBubble &
debug_port=$(adb jdwp | tail -1);
adb forward tcp:29882 jdwp:$debug_port &
jdb -J-Duser.home=. -connect \ 
com.sun.jdi.SocketAttach:hostname=localhost,port=29882 &
JDWP: Java Debug Wire Protocol
JDWP: Java Debug Wire Protocol
In APK manifest, debuggable=”true"
In APK manifest, debuggable=”true"
JDWP: Java Debug Wire Protocol
JDWP: Java Debug Wire Protocol
JDB usage
> threads
Group system:
  (java.lang.Thread)0xc14050e388   Compiler         cond. Waiting
  (java.lang.Thread)0xc14050e218   Signal Catcher   cond. waiting
  (java.lang.Thread)0xc14050e170   GC               cond. waiting
  (java.lang.Thread)0xc14050e0b8   HeapWorker       cond. waiting
Group main:
  (java.lang.Thread)0xc14001f1a8   main             running
  (org.jfedor.frozenbubble.GameView$GameThread)0xc14051e300
                                   Thread­10       running
  (java.lang.Thread)0xc14050f670   SoundPool       running
  (java.lang.Thread)0xc14050f568   SoundPoolThread  running
  (java.lang.Thread)0xc140511db8   Binder Thread #2 running
  (java.lang.Thread)0xc140510118   Binder Thread #1 running
> suspend 0xc14051e300
> thread 0xc14051e300
 Thread-10[1] where
  [1] android.view.SurfaceView$3.internalLockCanvas (SurfaceView.java:789)
  [2] android.view.SurfaceView$3.lockCanvas (SurfaceView.java:745)
  [3] org.jfedor.frozenbubble.GameView$GameThread.run (GameView.java:415)
> suspend 0xc14051e300
> thread 0xc14051e300
 Thread-10[1] where
  [1] android.view.SurfaceView$3.internalLockCanvas (SurfaceView.java:789)
  [2] android.view.SurfaceView$3.lockCanvas (SurfaceView.java:745)
  [3] org.jfedor.frozenbubble.GameView$GameThread.run (GameView.java:415)
DDMS = Dalvik Debug Monitor Server
DDMS = Dalvik Debug Monitor Server
(JDB)
> thread 0xc14051e300
 Thread-10[1] where
  [1] android.view.SurfaceView$3.internalLockCanvas (SurfaceView.java:789)
  [2] android.view.SurfaceView$3.lockCanvas (SurfaceView.java:745)
  [3] org.jfedor.frozenbubble.GameView$GameThread.run (GameView.java:415)
(JDB)
> thread 0xc14051e300
 Thread-10[1] where
  [1] android.view.SurfaceView$3.internalLockCanvas (SurfaceView.java:789)
  [2] android.view.SurfaceView$3.lockCanvas (SurfaceView.java:745)
  [3] org.jfedor.frozenbubble.GameView$GameThread.run (GameView.java:415)
hierarchyviewer: Traverse widgets
Figure out the association between APK resources and runtime behavior.
Figure out the association between APK resources and runtime behavior.
Decompile / Disassembly
• apktool: http://code.google.com/p/android-apktool/
• dex2jar: http://code.google.com/p/dex2jar/
• Jad / jd-gui: http://java.decompiler.free.fr/
smali : assembler/disassembler for Android's dex format
• http://code.google.com/p/smali/
• smali: The assembler
• baksmali: The disassembler
• Fully integrated in apktool
$ apktool d ../AngryBirds/Angry+Birds.apk 
I: Baksmaling...
I: Loading resource table...
...
I: Decoding file­resources...
I: Decoding values*/* XMLs...
I: Done.
I: Copying assets and libs...
$ apktool d ../AngryBirds/Angry+Birds.apk 
I: Baksmaling...
I: Loading resource table...
...
I: Decoding file­resources...
I: Decoding values*/* XMLs...
I: Done.
I: Copying assets and libs...
Java bytecode vs. Dalvik bytecode
(stack vs. register)
public int method( int i1, int i2 ) {
    int i3 = i1 * i2;
    return i3 * 2;
}
method public method(II)I
    iload_1
    iload_2
    imul
    istore_3
    iload_3
    iconst_2
    imul
    ireturn
.end method
method public method(II)I
    iload_1
    iload_2
    imul
    istore_3
    iload_3
    iconst_2
    imul
    ireturn
.end method
.var 0 is “this”
.var 1 is argument #1
.var 2 is argument #2
.var 0 is “this”
.var 1 is argument #1
.var 2 is argument #2
.method public method(II)I
    mul­int v0,v2,v3
    mul­int/lit­8 v0,v0,2
    return v0
.end method
.method public method(II)I
    mul­int v0,v2,v3
    mul­int/lit­8 v0,v0,2
    return v0
.end method
this: v1 (Ltest2;)
parameter[0] : v2 (I)
parameter[1] : v3 (I)
this: v1 (Ltest2;)
parameter[0] : v2 (I)
parameter[1] : v3 (I)
Java
Dalvik
Dalvik Register frames
• Dalvik registers behave more like local variables
• Each method has a fresh set of registers.
• Invoked methods don't affect the registers of 
invoking methods.
Practice: Level Up
Change initial game level
From 1 to 5 !
Disassembly
$ mkdir workspace smali­src
$ cd workspace
$ unzip ../FrozenBubble­orig.apk
Archive:  ../FrozenBubble­orig.apk
  inflating: META­INF/MANIFEST.MF
  inflating: META­INF/CERT.SF
  inflating: META­INF/CERT.RSA
  inflating: AndroidManifest.xml
...
extracting: resources.arsc
$ bin/baksmali ­o smali­src workspace/classes.dex
Output
smali­src$ find
./org/jfedor/frozenbubble/FrozenBubble.smali
./org/jfedor/frozenbubble/R$id.smali
./org/jfedor/frozenbubble/GameView.smali
./org/jfedor/frozenbubble/SoundManager.smali
./org/jfedor/frozenbubble/LaunchBubbleSprite.smali
./org/jfedor/frozenbubble/Compressor.smali
./org/jfedor/frozenbubble/R$attr.smali
./org/jfedor/frozenbubble/BubbleFont.smali
./org/jfedor/frozenbubble/PenguinSprite.smali
./org/jfedor/frozenbubble/GameView$GameThread.smali
./org/jfedor/frozenbubble/LevelManager.smali
./org/jfedor/frozenbubble/BubbleSprite.smali
./org/jfedor/frozenbubble/R$string.smali
...
Generated
from resources
org.jfedor.frozenbubble/.FrozenBubble
Output
smali­src$ grep "\.method" 
org/jfedor/frozenbubble/LevelManager.smali
.method public constructor ([BI)V
.method private getLevel(Ljava/lang/String;)[[B
.method public getCurrentLevel()[[B
.method public getLevelIndex()I
.method public goToFirstLevel()V
.method public goToNextLevel()V
.method public restoreState(Landroid/os/Bundle;)V
.method public saveState(Landroid/os/Bundle;)V
List the methods implemented in class LevelManager
List the methods implemented in class LevelManager
Dalvik::Types
• Base types
– I : int / J : long / S : short
– Z : boolean
– D : double / F : float
– C : char
– V : void (when return value)
• Classes: Ljava/lang/Object;
• Arrays: [I, [Ljava/lang/Object;, [[I
.method private getLevel(Ljava/lang/String;)[[B
→ private byte[][] getLevel(String data)
.method public goToNextLevel()V
→ public void goToNextLevel();
.method private getLevel(Ljava/lang/String;)[[B
→ private byte[][] getLevel(String data)
.method public goToNextLevel()V
→ public void goToNextLevel();
Dalvik::Methods
• Rich meta-information is assigned to Dalvik
methods
• Method meta-information:
– Signature
– Try-catch information
– Annotations
– Number of registers used
– Debug information
• Line numbers
• Local variable lifetime
Output
smali­src$ grep ­r goToFirstLevel *
org/jfedor/frozenbubble/GameView$GameThread.smali: 
invoke­virtual {v2},
  Lorg/jfedor/frozenbubble/LevelManager;­>goToFirstLevel()V
org/jfedor/frozenbubble/LevelManager.smali:
.method public goToFirstLevel()V
That the first argument of the method invocation is “this” as
this is a non-static method.
That the first argument of the method invocation is “this” as
this is a non-static method.
GameView$GameThread.smali
.method public newGame()V
        . . .
    move­object/from16 v0, p0
    iget­object v0, v0, 
Lorg/jfedor/frozenbubble/GameView$GameThread;­
>mLevelManager:Lorg/jfedor/frozenbubble/LevelManager;
    move­object v2, v0
    invoke­virtual {v2}, 
Lorg/jfedor/frozenbubble/LevelManager;­>goToFirstLevel ()V
Equals to Java:
objLevelManager.goToFirstLevel();
Equals to Java:
objLevelManager.goToFirstLevel();
LevelManager.smali