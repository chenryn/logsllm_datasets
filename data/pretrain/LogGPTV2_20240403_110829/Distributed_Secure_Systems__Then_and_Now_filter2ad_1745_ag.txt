number  of  need-to-know  compartments  is  supported, 
however,  the  number  of  different  security  partitions 
191191
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
can well exceed the number of physical hosts available. 
Even when the number of distinct security partitions is 
small,  the  demand  for  resources  within  each  partition 
can  vary  with  time.  Furthermore,  some  users  might 
prefer  to  use  personal  workstations  for  their  activities 
in  many  different  security  partitions.  All  these  cases 
require some provision for reallocating host  machines 
to different security partitions. 
With untrusted hosts, this can only be accomplished 
by  temporal  separation,  which  in  its  simplest  form  is 
periods  processing.  This  requires  manual  intervention 
to  exchange  all  demountable  storage  and 
the 
reinitialization  of  all  fixed  storage  to  remove  every 
trace  of  information  from  the  old  security  partition 
before the machine can be brought up again at its new 
level,  either  “clean”  or  reloaded  with  the  suspended 
state of some previous activation at that level. 
Manual  periods  processing  requires  very  rigid 
administrative  controls,  and  it  is  slow  and  expensive, 
We  therefore  propose  mechanisms  for  automating  the 
process,  making 
it  both  rapid  and  secure.  The 
mechanisms  required  include  one  that  causes  a  host’s 
TNIU  to  load  the  encryption  key  of  a  new  security 
partition, and another that provides temporal separation 
for different uses of the host machine, 
A project to develop an implementation of the 
system described here has a sponsor and is being 
carried out. 
The system state of a host machine is contained in its 
writable storage: CPU registers, RAM, and disks, The 
disks of a Unix system provide swap space and contain 
the  local  file  system.  With  the  exception  of  the  file 
system, the local storage available to a host is all used 
for  strictly  temporary  purposes  and  can  simply  be 
erased and reinitialized when the host changes security 
partitions.  This  is  achieved  by  causing  the  host  to 
boot-load  a  trusted  stand-alone  purge  program  from 
ROM  on  power-up,  or  on  command  from  its  TNIU. 
This program systematically clears and reinitializes all 
temporary storage available to its host processor. 
Unlike  temporary  storage,  the  local  file  system 
cannot  just  be  erased  when  the  host  changes  security 
partitions;  it  must  be  retained  (inaccessibly)  for  later 
activations of the host in the same partition. Since Unix 
United provides convenient access to remote files, this 
requirement can be satisfied by holding files remotely, 
either  in  file  servers  dedicated  to  particular  security 
partitions, or in the secure file store. 
Operating  host  machines  without  local  file  store  is 
inefficient.  Accordingly,  the  purge  program  creates  a 
local file system on its host’s disk  and initializes it to 
contain  the  standard  utility  programs.  (These  can  be 
obtained from a local read-only floppy disk, or from a 
“boot server” accessed over the LAN.) Each reference 
to an apparently local file is intercepted by a local file 
relocation process added to the Newcastle Connection. 
This  process  checks  to  see  if  the  requested  file  is 
already  present  in  the  local  file  system.  If  it  is,  the 
access is allowed to proceed normally. If it is not, the 
relocation process first obtains a local copy of the file 
from the machine that maintains the permanent version 
of  the  host’s  file  system  for  the  security  partition 
concerned. For example, if the host  is known as PW5 
(personal  workstation  number  5)  and  is  currently 
operating  in  the  Secret(NATO)  partition,  then  a 
reference  to  the  local  file  /user  /john  /paper  might 
cause the local file relocation process to obtain a copy 
of the file /../SNSERVER/PW5/user/john/paper, where 
SNSERVER is the name of the machine that maintains 
the  Secret(NATO)  file  system.  This  process 
is 
perfectly straightforward and need not be trusted, since 
an  attempt  to  name  a  machine  in  the  wrong  security 
partition  will  be  caught  by 
the  standard  TNIU 
mechanisms (the local and remote machines will have 
incompatible  encryption  keys).  Files  modified  or 
created  during  a  session  must,  of  course,  be  written 
back  to  their  permanent  file  system  by  the  local  file 
relocation process at or before the end of the session, 
In  outline,  the  complete  scenario  for  automatically 
changing the security partition in which a host operates 
is as follows. A user at a terminal attached to a TTIU is 
authenticated  and  asked  for  the  security  partition  in 
which he wishes to work. If this partition is within his 
clearance, a signal is sent to the TNIU of a vacant host 
machine  (or 
the  user’s  personal  workstation) 
instructing  it  to  switch  to  the  indicated  security 
partition.  This  signal  is  protected  against  forgery  or 
spoofing  by 
techniques 
employed between TNIUs. Upon receipt of the signal, 
the  host’s  TNIU  loads  the  encryption  key  appropriate 
to the new security partition, initiates the purging and 
reinitialization  of  its  host  machine,  and  informs  the 
host’s local file relocation process of the identity of its 
new security partition, 
the  standard  encryption 
We have described a distributed system that provides 
limited  but  useful  form  of  multilevel  secure 
a 
operation.  Four  distinct  methods 
for  achieving 
separation  (physical,  temporal,  cryptographical,  and 
logical)  have  been  illustrated.  When  used  judiciously, 
they can provide security without inefficiency and with 
only  a 
trusted  mechanisms. 
trusted  mechanisms  are  relatively 
Moreover,  our 
simple and within the current state of the art. Indeed, a 
number  of  them  have  previously  been  proposed  (and 
some  implemented)  by  others,  though  usually  as 
stand-alone systems. A more extensive treatment of the 
topics covered in this article is available as a technical 
report[10]. It describes our mechanisms in more detail, 
limited  number  of 
to 
192192
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
relates  them  to  their  precursors,  and  discusses  some 
enhancements  to  the  basic  system  (the  inclusion  of 
downgraders  or  guards,  and  support  for  multilevel 
objects, for instance). Readers who wish to learn more 
about  issues  and  techniques  relating  to  computer 
security  should  consult  the  excellent  book  by  D.  E. 
Denning[8]. 
A  project  to  develop  an  implementation  of  the 
system described here is being sponsored by the Royal 
Signals and Radar Establishment, or RSRE, of the UK 
Ministry  of  Defence,  and  is  being  carried  out  by 
System  Designers  Ltd,  of  Camberley  in  conjunction 
with 
the  Microelectronics  Applications  Research 
Institute, or  MARI, and  the  Computing Laboratory of 
the University of Newcastle upon Tyne. The first stage 
of this project will result in the delivery of a prototype 
to RSRE in mid-1983. The security mechanisms of the 
prototype will be provided by ordinary user processes 
in  a  standard  Unix  United  system.  This  will  not,  of 
course, be secure, but it will allow the operation of the 
various  mechanisms  to  be  studied  in  practice,  enable 
the overall performance of the system to be evaluated, 
and  most 
impact  of  a 
mechanically  enforced  security  policy  to  be  observed 
in  a  realistic  environment.  If  this  stage  is  judged  a 
success, a prototype implementation of the real system 
will follow. We hope that before long we will be able 
to  report  on  the  progress  of  this  project  and,  in  due 
course, on how well  it achieves  its  security, usability, 
and performance goals.  
importantly,  permit 
the 
Acknowledgments 
This  research  was  sponsored  by  the  Royal  Signals 
and Radar Establishment,  Malvern, England. We very 
much  appreciate  the  enthusiastic  encouragement  of 
Derek  Barnes  of  RSRE  and  the  stimulation  of  our 
many  colleagues  at  Newcastle,  particularly  those 
involved  with  Unix  United.  The  Newcastle 
Connection, a commercial product licensed by MARI, 
the  creation  of  Lindsay  Marshall  and  Dave 
is 
Brownbridge,  while 
remote  procedure  call 
mechanism is the work of Fabio Panzieri and Santosh 
Shrivastava. 
Two anonymous referees directed our attention to a 
number of vexatious technical problems with some of 
our  mechanisms  and 
to  make  several 
improvements. The final form of this article benefited 
considerably  from  the  careful  reading,  criticism,  and 
advice of Pete Tasker of the Mitre Corporation. Sarah 
Rolph, also of the Mitre Corporation, suggested many 
improvements in the presentation of this material. 
led  us 
the 
References 
1.  C.  E.  Landwehr,  “A  Survey  of  Formal  Models  for 
Cornputer  Security,  “  Computing  Surveys,  Vol.  13,  No.  3, 
Sept. 1981, pp. 247-278. 
2.  M.  H.  Cheheyl  et  al.,  “Verifying  Security,”  Computing 
Surveys, Vol. 13, No. 3, Sept. 1981, pp. 279-339. 
3.  J.  M.  Rushby,  “The  Design  and  Verification  of  Secure 
Systems,”  Proc.  Eighth  ACM  Symp.  Operating  System 
Principles, Dec. 1981, pp. 12-21, (ACM Operating Systems 
Review, Vol. 15, No. 5). 
4.  G.  Grossman,  “A  Practical  Executive 
for  Secure 
Communications,”  Proc.  1982  Symp.  Security  and  Privacy, 
IEEE Computer Society, Apr. 1982, pp. 144-155. 
5. D. Lomet  et  al.,  “A Study of Provably Secure Operating 
Systems,”  research  report  RC9239,  IBM  T.  J.  Watson 
Research Center, Feb. 1982. 
6. D. R. Brownbridge, L. F. Marshall, and B. Randell, “The 
Newcastle  Connection,  or  UNIXes  of  the  World  Unite!” 
Software  –  Practice  and  Experience,  Vol.  12,  Wiley 
Interscience, Dec. 1982, pp. 1147-1162. 
7.  S.  K.  Shrivastava  and  F.  Panzieri,  “The  Design  of  a 
Reliable  Remote  Procedure  Call  Mechanism,”  IEEE  Trans. 
Computers, Vol. C-31, No. 7, July 1982, pp. 692-697. 
8.  D.  E.  Denning,  Cryptography  and  Data  Security, 
Addison-Wesley, Reading, Mass., 1982. 
9. R. M. Needham and M. Schroeder, “Using Encryption for 
Authentication  in  Large  Networks  of  Computers,”  Comm. 
ACM, Vol. 21, No, 12, Dec. 1978, pp. 993-999. 
10.  J.  M.  Rushby  and  B.  Randell,  “A  Distributed  Secure 
System,” tech. report 182, Computing Laboratory, University 
of Newcastle upon Tyne, England, Feb. 1983. 
specification, 
John  M.  Rushby  is  a  computer 
scientist with the Computer Science 
Laboratory  of  SRI  International. 
His  research  interests  include  the 
design, 
and 
verification  of  secure  systems  and 
other  computer  systems  that  must 
satisfy stringent requirements. From 
1979  to  1982,  he  was  a  research 
associate  with 
the  Computing 
Laboratory  of  the  University  of 
Newcastle upon Tyne, England, and 
from 1975 to 1978 he was a lecturer 
in  the  Department  of  Computer 
Science  at  Manchester  University, 
England. Rushby received BSc and 
PhD  degrees  in  Computer  Science, 
both 
the  University  of 
Newcastle upon Tyne,  in 1971 and 
1977, respectively. 
from 
193193
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
Brian  Randell  is  a  professor  of 
computing science at the University 
of  Newcastle  upon  Tyne,  where  in 
1971  he  initiated  a  program  of 
research on computing systems that 
now  encompasses  several  major 
projects.  From  1964  to  1969,  he 
was  with  IBM,  primarily  at  the 
IBM  Research  Center  in  the  US, 
working  on  operating  systems,  the 
design 
speed 
system  design 
computers,  and 
methodology.  Before 
that,  he 
worked  for  the  English  Electric 
Company, where he led a team that 
implemented 
of 
compilers, including the Whetstone 
KDF9  Algol  compiler.  Randell 
graduated 
from 
Imperial College, London, in 1957. 
in  mathematics 
number 
ultra 
high 
of 
a 
Subsequent Developments 
 For  some  years  after  the  publication  of  the  DSS 
paper  we  had  little  knowledge  of  how  RSRE’s  work 
was  progressing.  However  by  about  1985  the  RSRE 
DSS  prototype  had  been  completed  and  partially 
declassified,  and  we  had  been  brought  back  into  the 