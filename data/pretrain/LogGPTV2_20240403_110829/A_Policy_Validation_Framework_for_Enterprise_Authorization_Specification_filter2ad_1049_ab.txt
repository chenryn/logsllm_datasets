### 2.3 A Language for Specifying Policy Constraints for Data and Its Support

We have previously noted that XML Schemas, with their support for data types, cardinality, and participation constraints, can handle structural constraints. Consequently, all model-based constraints, which are inherently structural, can be expressed through XML Schemas. However, policy constraints pertain to the enterprise domain and involve the content of the enterprise authorization specification. Specifically, they relate to the model entities and relations in the Bank-Authorization XML Data. Studies [6,7] have shown that content-based policy constraints are more complex than model-based constraints because they may involve intricate logical expressions or rules.

One approach to representing domain constraints is to annotate an XML Schema, which has been used to represent a domain model, with ontological information using pattern-based languages such as RDF [8] and Schematron [9]. In this paper, we have annotated the XML Schema for the Bank-RBAC Model with Schematron constraints that specify rules that the access control data (in Bank-Authorization XML Data) must satisfy for the bank enterprise domain.

### 2.4 A Tool or API for Validation of Enterprise Authorization Specification

We have utilized a tool called the Schematron Validator to validate the authorization specification (in Bank-Authorization XML Data) for conformance to policy constraints specified through the Schematron language. Since the Schematron Validator also checks an XML document for conformance to the referenced structure, it automatically verifies the XML-encoded bank-enterprise authorization specification for conformance to the Bank-RBAC model specified through the XML Schema. Thus, using this tool, we can validate the Bank-Authorization XML Data for both model-based and content-based (policy) constraints.

### 3. XML Schema Specification of Bank-RBAC Model

The fundamental unit for modeling any concept in XML Schema is the element. An XML Schema element can be defined with a name, type, and a set of attributes. The type can be a simple data type, such as 'string', or a complex data type. A complex data type may include additional elements. Additionally, a data type can be an enumerated type, which can only assume values from a given set. A special data type called 'ID' is also supported, often used for an attribute that uniquely identifies an instance of an element.

It is possible to specify certain structural constraints associated with an element. We can define the maximum and minimum occurrences of an element instance in the XML document based on the XML Schema specification. We can also specify whether the use of an element or attribute is mandatory or optional.

For our Bank-RBAC model, all entities (User, Role, Privileges) and relations (User-Role relation (UA), Role-Inheritance relation (RH), and Privilege-Role relation (PA)) are modeled as elements. Since these entities either contain multiple attributes (as in the case of User, Role, and Privileges) or sub-elements (as in the case of UA, RH, and PA), the associated data type is always a complex data type.

#### User Entity Specification

The definition of the 'userType' data type means that a user is represented with two attributes: 'userID' and 'fullname'. The 'userID' attribute is declared as mandatory, while 'fullname' is optional. The data type for 'userID' is designated as 'xs:ID', implying that the value for 'userID' must be unique, disallowing duplicates.

```xml
<xs:complexType name="userType">
    <xs:sequence>
        <xs:element name="userID" type="xs:ID" minOccurs="1" maxOccurs="1"/>
        <xs:element name="fullname" type="xs:string" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
</xs:complexType>
```

#### Role Entity Specification

To complete the role component, we need to define the data types "validRole" and "roleLimit". The "validRole" data type lists the set of permissible role names in the bank enterprise, while "roleLimit" specifies the minimum and maximum number of users that can be assigned to a role.

```xml
<xs:simpleType name="validRole">
    <xs:restriction base="xs:string">
        <xs:enumeration value="Teller"/>
        <xs:enumeration value="Manager"/>
        <!-- Add other roles as needed -->
    </xs:restriction>
</xs:simpleType>

<xs:simpleType name="roleLimit">
    <xs:restriction base="xs:integer">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="10"/>
    </xs:restriction>
</xs:simpleType>
```

#### Privilege Entity Specification

A privilege is a combination of a resource and an operation. The privilege entity in the Bank-RBAC model is specified as follows:

```xml
<xs:complexType name="privilegeType">
    <xs:sequence>
        <xs:element name="resource" type="xs:string" minOccurs="1" maxOccurs="1"/>
        <xs:element name="operation" type="xs:string" minOccurs="1" maxOccurs="1"/>
    </xs:sequence>
</xs:complexType>
```

#### User-Role Assignment (UA) Relation

The XML Schema representation for the User-Role Assignment (UA) relation in the Bank-RBAC model is as follows:

```xml
<xs:element name="UA" type="uaType" minOccurs="0" maxOccurs="unbounded"/>
<xs:complexType name="uaType">
    <xs:sequence>
        <xs:element ref="userID" minOccurs="1" maxOccurs="1"/>
        <xs:element ref="roleID" minOccurs="1" maxOccurs="1"/>
    </xs:sequence>
</xs:complexType>
```

#### Role-Inheritance (RH) Relation

The XML Schema representation for the role-inheritance relation (RH) is as follows:

```xml
<xs:element name="RH" type="rhType" minOccurs="0" maxOccurs="unbounded"/>
<xs:complexType name="rhType">
    <xs:sequence>
        <xs:element ref="roleID" minOccurs="1" maxOccurs="1"/>
        <xs:element ref="parentRoleID" minOccurs="1" maxOccurs="1"/>
    </xs:sequence>
</xs:complexType>
```

#### Privilege-Role (PA) Relation

The Privilege-Role relation (PA) is specified in XML Schema as:

```xml
<xs:element name="PA" type="paType" minOccurs="0" maxOccurs="unbounded"/>
<xs:complexType name="paType">
    <xs:sequence>
        <xs:element ref="roleID" minOccurs="1" maxOccurs="1"/>
        <xs:element ref="privilegeID" minOccurs="1" maxOccurs="1"/>
    </xs:sequence>
</xs:complexType>
```

Finally, the entire Bank-RBAC model, consisting of the User, Role, Privilege, and UA, RH, and PA relations, is specified in the XML Schema by creating a root element called 'BANK_RBAC_Model' with the entities and relations as sub-elements.

```xml
<xs:element name="BANK_RBAC_Model">
    <xs:complexType>
        <xs:sequence>
            <xs:element ref="User" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element ref="Role" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element ref="Privilege" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element ref="UA" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="RH" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="PA" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
</xs:element>
```

The above XML Schema definition was verified to be syntactically correct using the XML Schema Validator tool â€“ XML Spy [11].

### 4. Encoding the Enterprise Authorization Specification in XML

With the XML Schema specification of the Bank-RBAC model developed, we now encode the enterprise authorization specification in an XML document whose tag structure should correspond to the element definitions in the XML Schema.

#### Sample Set of Users

A sample set of users is represented as follows:

```xml
<User userID="U1" fullname="John Doe"/>
<User userID="U2" fullname="Jane Smith"/>
```

#### Sample Set of Roles

A sample set of role instances is:

```xml
<Role roleID="R1" name="Teller" limit="5"/>
<Role roleID="R2" name="Manager" limit="3"/>
```

#### Sample Set of Privileges

A sample set of privileges is:

```xml
<Privilege privID="CLOSE_ACCT" resource="DepAcct" operation="Close"/>
<Privilege privID="OPEN_ACCT" resource="DepAcct" operation="Open"/>
```

These examples illustrate how the XML Schema can be used to encode and validate the Bank-Authorization XML Data for the bank enterprise.