It is useful to point out at this stage that XML Parsers
can also be  used  to  validate  an  XML  document  for 
conformance  to  the  structure  specified  in  an  associated 
XML  Schema  document.  Hence  in  our  case the Bank-
Authorization XML Data  document  can  be  validated  for 
conformance  to  Bank-RBAC  model  specified  through  a 
XML Schema  document.  However  as  we  pointed  out
earlier,  XML  Schemas  can  only  be  used  for  specifying
data  typing  and  cardinality constraints. These constraints
are useful for properly specifying model entities and their
associated  binary  relations.  Hence  XML  Schemas  can 
specify model-based constraints and therefore can be used
to validate whether  the  Bank-Authorization  XML  data
does  indeed  conform  to  the  particular  adaptation  of  the
RBAC  model  for  our  banking  enterprise  (i.e.,  Bank-
RBAC model).
2.3 A Language for specifying policy constraints
for  data 
its  support 
We already alluded to the fact that the XML Schema
with 
types,  cardinality  and 
participation  constraints  can  handle  structural constraints
and hence all model-based constraints (being structural in
nature) can be expressed through XML Schema. However
policy  constraints  pertain  to  the  enterprise  domain  and 
hence involve the  contents  of  enterprise  authorization
specification.  More  specifically  they  involve the model
entity  and  relation 
the  Bank-
Authorization  XML  Data.  Further,  studies have shown
[6,7]  that  the  content-based  policy constraints  are  much
more complicated than model-based constraints since they
may involve complex logical expressions or rules.
instances  found 
in 
One approach  that  has  been  adopted  to  represent
domain constraints is to  annotate  an  XML  Schema  that
has been used for representing a model for a domain, with
ontological
information  regarding  the  domain  using
pattern based languages such as RDF [8] and Schematron
[9]. In this paper we have annotated the XML Schema for 
Bank-RBAC  Model  with  Schematron constraints that
specify  rules  that  that  the  access  control  data  (in  Bank-
Authorization  XML  Data)  pertaining to the bank
enterprise domain has to satisfy.
2.4  A  Tool  or  API  for  Validation  of  Enterprise
Authorization Specification 
the 
validating 
bank-enterprise 
We have used a tool called the Schematron Validator
for
authorization
specification  (in  Bank-Authorization  XML  Data)  for 
conformance  to  policy constraints specified through the
Schematron  language.  Since  the  Schematron Validator
tool also validates an XML document for conformance to
the  referenced  structure,  it  also  automatically  checks  the 
XML encoded bank-enterprise authorization specification
for  conformance  to  the  Bank-RBAC model specified
through  XML  Schema.  Hence  using  this  tool  we  can 
validate 
for
the  Bank-Authorization  XML Data
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
satisfaction of both model-based as well as content-based 
(policy) constraints. 
3.  XML Schema specification of Bank-
RBAC Model 
The basic artifact for modeling any concept in XML 
Schema  is  the  element.  A  name,  type  and  a  set  of 
attributes  can  be  specified  for  an  XML  Schema  element. 
The  type  can  be  a  simple  data  type  like  a  ‘string’,  or  a 
complex  data  type.  A  complex  data  type  in  turn  may 
involve  additional  elements.  A  data  type  can  be  an 
enumerated type (can only assume a value from a   given 
set) as well. In addition a special data type called ‘ID’ is 
supported.  This  is  often  used  as  the  data  type  for  an 
attribute if that attribute uniquely identifies an instance of 
that element. 
It  is  possible  to  specify  certain  structural  constraints 
associated with an element. We can specify the maximum 
and minimum of times that element instance can occur in 
the  XML  document  based  on 
the  XML  Schema 
specification.  We  can  also  specify  whether  the  use  of  an 
element or attribute is mandatory or optional. 
As far as our Bank-RBAC model is concerned, all the 
entities (User, Role, Privileges) as well as relations (User-
Role  relation  (UA),  Role-Inheritance  relation  (RH)  and 
Privilege-Role  relation  (PA))  are  modeled  as  elements. 
Since these entities either contain multiple attributes (as in 
the  case  of  elements  representing  User,  Role  and 
Privileges) or sub elements (as in the case of UA, RH and 
PA)  relations,  the  data  type  associated  is  always  a 
complex data type. 
The specification of the User entity is as follows: 
The  above  definition  of  the  data  type  ‘userType’ 
means  that  a  user  is  represented  as  having  two  attributes 
‘userID’  and  ‘fullname’  with  the  former  declared  as  a 
mandatory attribute and the latter declared as an optional 
attribute.  Please  note  that  the  data  type  for  ‘userID’  
attribute  is  designated  as  ‘xs:ID’  which  implies  that  the 
value for ‘userID’ attribute must be unique and hence no 
duplicates are allowed.
The entity ‘Role’ is specified as follows: 
To complete our definition of role component, we need to 
define  the  data  types  “validRole”  and  “roleLimit”.    The 
data  type  definition  of  “validRole”  lists  the  set  of 
permissible  role  names  in  the  bank  enterprise  while  that 
for the “roleLimit” is used to specify a number that stands 
for the minimum and maximum number of users that can 
be assigned to that role. 
The privilege is a combination of a resource and 
operation. The privilege entity of the Bank-RBAC model 
is specified as: 
We now provide the XML Schema representation for the 
User-Role  Assignment  (UA)  relation  of  the  Bank-RBAC 
model. 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
The XML Schema representation for the role-inheritance 
relation (RH) is as follows:
The Privilege-Role relation (PA) is specified in XML 
Schema as: 
maxOccurs="unbounded"/>
Finally the fact that the entire Bank-RBAC model is 
made  of  entities  User,  Role,  Privilege  and  UA,  RH and
PA relations is specified in the XML Schema by creating
a root  element  called  ‘BANK_RBAC_Model’  with 
elements  representing  the  entities  and  relations  as  sub-
elements.
Observe that some of the elements specified above do not
have the name attribute (like other element definitions we 
have seen  before)  but  refers  to  the  already  defined 
elements through the value specified in the ‘ref’ attribute.
The  above  XML  Schema  definition  was  verified  to  be 
syntactically  correct  using the  XML  Schema  Validator
tool – XML Spy [11].
4. Encoding the enterprise authorization
specification in XML 
Now  that  we  have  developed  an  XML Schema
specification  of  the  Bank-RBAC  model, we now encode
the  enterprise  authorization  specification  in  an  XML 
document whose tag  structure  should  correspond  to  the
element definitions in the XML Schema.
We  represent  a  sample  set  of  users (by providing
instances of the ‘user’ element in XML schema) as given 
below:
A sample set of encodings for role instances is: 
A sample set of privileges are given below:
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
<privilege privID="CLOSE_ACCT" resource="DepAcct"