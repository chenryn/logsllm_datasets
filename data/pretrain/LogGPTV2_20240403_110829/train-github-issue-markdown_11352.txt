struct Net : torch::nn::Module {  
Net()  
: conv1(torch::nn::Conv2dOptions(1, 20, / _kernel_size=_ /5).stride(1)),  
conv2(torch::nn::Conv2dOptions(20, 40, / _kernel_size=_ /5)),  
fc1(640, 120),  
fc2(120, 10) {  
register_module("conv1", conv1);  
register_module("conv2", conv2);  
register_module("conv2_drop", conv2_drop);  
register_module("fc1", fc1);  
register_module("fc2", fc2);  
}  
torch::Tensor forward(torch::Tensor x) {  
x = torch::relu(torch::max_pool2d(conv1->forward(x), 2));//(28-5)+1=24,12 x 12
x 10  
x = torch::relu(torch::max_pool2d(conv2_drop->forward(conv2->forward(x)),
2));//(12-5)+1=8,4 x 4 x 20  
//x = torch::relu(torch::avg_pool2d(conv2_drop->forward(conv2->forward(x)),
2));//(12-5)+1=8,4 x 4 x 20
    	x = x.view({ -1, 640 });
    	x = torch::relu(fc1->forward(x));
    	x = torch::dropout(x, /*p=*/0.5, /*training=*/is_training());
    	x = fc2->forward(x);
    	return torch::log_softmax(x, /*dim=*/1);
    }
    torch::nn::Conv2d conv1;
    torch::nn::Conv2d conv2;
    torch::nn::Dropout2d conv2_drop;
    torch::nn::Linear fc1;
    torch::nn::Linear fc2;
};
cc @yf225 @houseroad @spandantiwari @lara-hdr @BowenBao @neginraoof