set -e
# Configure ECS Agent
echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
# Set HTTP Proxy URL if provided
...
...
# Write AWS Logs region
...
...
# Write AWS Logs config
...
...
# Start services
sudo service awslogs start
sudo chkconfig docker on
sudo service docker start
sudo start ecs
```
Starting services
在前面的例子中，请注意，为了简洁起见，我省略了第一次运行脚本的前面部分。请注意，您首先启动 awslogs 服务，该服务确保 CloudWatch 日志代理将获取所有 Docker Engine 日志，然后继续启用 Docker 在启动时启动，启动 Docker，最后启动 ECS 代理。
# 执行所需的健康检查
我们在第一次运行的脚本中需要执行的最后一项任务是运行状况检查，它确保 ECS 容器实例已经初始化并成功注册到已配置的 ECS 集群。这是对您的 ECS 容器实例的合理运行状况检查，因为 ECS 代理只能在 Docker Engine 运行时运行，并且 ECS 代理必须在 ECS 集群中注册才能部署您的应用。
回想一下上一章，当您检查一个 ECS 容器实例的内部时，ECS 代理公开了一个本地 HTTP 端点，可以查询该端点的当前 ECS 代理状态。您可以使用该端点创建一个非常简单的运行状况检查，如下所示:
```
#!/usr/bin/env bash
set -e
# Configure ECS Agent
echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
# Set HTTP Proxy URL if provided
...
...
# Write AWS Logs region
...
...
# Write AWS Logs config
...
...
# Start services
...
...
# Health check
# Loop until ECS agent has registered to ECS cluster
echo "Checking ECS agent is joined to ${ECS_CLUSTER}"
until [[ "$(curl --fail --silent http://localhost:51678/v1/metadata | jq '.Cluster // empty' -r -e)" == ${ECS_CLUSTER} ]]
 do printf '.'
 sleep 5
done
echo "ECS agent successfully joined to ${ECS_CLUSTER}"
```
Performing a health check
在前面的例子中，配置了一个 bash `until`循环，它使用 curl 每五秒查询一次`http://localhost:51678/v1/metadata`端点。该命令的输出通过管道传输到`jq`，如果该属性不存在，它将返回集群属性或空值。一旦 ECS 代理注册到正确的 ECS 集群并在 JSON 响应中返回该属性，循环将完成，第一次运行的脚本将完成。
# 测试您的自定义 ECS 容器实例映像
您现在已经完成了所有定制，是时候使用`packer build`命令重建您的映像了。在您这样做之前，现在是验证您是否有正确的 Packer 模板，以及是否已经创建了相关的支持文件的好时机。以下示例显示了您现在应该在 packer-ecs 存储库中拥有的文件夹和文件结构:
```
> tree
.
├── Makefile
├── files
│   └── firstrun.sh
├── manifest.json
├── packer.json
└── scripts
    ├── cleanup.sh
    ├── cloudinit.sh
    ├── storage.sh
    └── time.sh
2 directories, 8 files
```
Verifying the Packer repository
假设一切就绪，您现在可以通过运行`make build`命令再次运行您的 Packer 构建。
完成所有工作并成功创建您的 AMI 后，您现在可以在 AWS 控制台中查看您的 AMI，方法是导航至**服务** | **EC2** 并从左侧菜单中选择 AMI:
![](img/286a5d2f-7e98-467b-a671-5f3ad55eaf24.png)
EC2 dashboard AMIs
在前面的截图中，您可以看到您在本章前面和刚才构建的两个 AMIs。请注意，最新的 AMI 现在包括三个数据块设备，`/dev/xvdcy`代表您在本章前面添加的额外 20 GB gp2 卷。
此时，您实际上可以通过单击**启动**按钮来测试您的 AMI，这将启动 EC2 实例向导。点击**查看并启动**按钮后，点击**编辑安全组**链接，通过 SSH 向实例授予您的 IP 地址访问权限，如下图所示:
![](img/c0fd0ffb-bc0b-4026-b9c0-9d8232b143cd.png)
Launching a new EC2 instance
完成后，点击**查看并启动**，然后点击**启动**按钮，最后配置一个您有权访问的合适的 SSH 密钥对。
在启动实例屏幕上，您现在可以单击指向新 EC2 实例的链接，并复制公共 IP 地址，以便可以 SSH 到该实例，如下图所示:
![](img/99e70e6b-1183-437c-bf3b-7d2c04fde547.png)
Connecting to a new EC2 instance
连接到实例后，您可以验证为 Docker 卷存储配置的额外 20 GB 卷是否已成功装载:
```
> sudo mount
proc on /proc type proc (rw,relatime)
sysfs on /sys type sysfs (rw,relatime)
/dev/xvda1 on / type ext4 (rw,noatime,data=ordered)
devtmpfs on /dev type devtmpfs (rw,relatime,size=500292k,nr_inodes=125073,mode=755)
devpts on /dev/pts type devpts (rw,relatime,gid=5,mode=620,ptmxmode=000)
tmpfs on /dev/shm type tmpfs (rw,relatime)
/dev/xvdcy on /data type ext4 (rw,noatime,data=ordered)
none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,relatime)
```
Verifying storage mounts
您可以通过运行`date`命令来检查时区配置是否正确，该命令应显示正确的时区(美国/东方)，并验证`ntpd`服务是否正在运行:
```
> date
Wed Feb 21 06:45:40 EST 2018
> sudo service ntpd status
ntpd is running
```
Verifying time settings
接下来，您可以通过查看`/etc/cloud/cloud.cfg`文件来验证 cloud-init 配置是否已配置为禁用安全更新:
```
> cat /etc/cloud/cloud.cfg
# WARNING: Modifications to this file may be overridden by files in
# /etc/cloud/cloud.cfg.d
# If this is set, 'root' will not be able to ssh in and they
# will get a message to login instead as the default user (ec2-user)
disable_root: true
# This will cause the set+update hostname module to not operate (if true)
preserve_hostname: true
datasource_list: [ Ec2, None ]
repo_upgrade: none
repo_upgrade_exclude:
 - kernel
 - nvidia*
 - cudatoolkit
mounts:
 - [ ephemeral0, /media/ephemeral0 ]
 - [ swap, none, swap, sw, "0", "0" ]
# vim:syntax=yaml
repo_update: false
```
Verifying cloud-init settings
您还应该根据您配置的清理脚本，验证 Docker 服务是否已停止并在启动时被禁用:
```
> sudo service docker status
docker is stopped
> sudo chkconfig --list docker
docker 0:off 1:off 2:off 3:off 4:off 5:off 6:off
```
Verifying disabled services
最后，您可以验证第一次运行的脚本存在于`ec2-user`主目录中:
```
> pwd
/home/ec2-user
> ls 
firstrun.sh
```
Verifying first-run script
此时，您已经成功地验证了您的 ECS 容器实例已经按照您的定制进行了构建，现在您应该从 EC2 控制台终止该实例。您会注意到它处于未配置状态，在 Docker 服务被禁用的情况下，您的 ECS 容器实例实际上不能做太多事情，在下一章中，您将学习如何使用 cloud information 来利用您安装到自定义机器映像中的 cloud information 帮助器脚本来配置实例创建时的 ECS 容器实例，并利用您创建的自定义。
# 摘要
在本章中，您学习了如何使用流行的开源工具 Packer 构建自定义的 ECS 容器实例机器映像。您学习了如何创建 Packer 模板，并了解了组成模板的各个部分，包括变量、构建器、资源调配器和后处理器。作为映像构建过程的一部分，您可以使用 Packer 变量、环境变量和少量 Make automation 的组合来注入验证对 AWS 的访问所需的临时会话凭据。
您成功地在您的 ECS 容器实例映像中引入了许多构建时定制，包括安装 CloudFormation 帮助器脚本和 CloudWatch 日志代理，并确保系统配置为在启动时以正确的时区运行 NTP 服务。您在 cloud-init 配置中禁用了自动安全更新，如果使用 HTTP 代理，这可能会导致问题。
最后，您创建了一个第一次运行的脚本，用于在实例创建和首次引导时配置您的 ECS 容器实例。此脚本配置 ECS 集群成员身份，启用可选的 HTTP 代理支持，为 Docker 和 ECS 代理系统日志配置 CloudWatch 日志代理，并执行运行状况检查以确保您的实例已成功初始化。
在下一章中，您将学习如何使用您的自定义 AMI 来构建 ECS 集群和相关的底层 EC2 自动缩放组，这将有助于您理解对您的自定义机器映像执行各种自定义的基本原理。
# 问题
1.  Packer 模板的哪个部分定义了 Packer 构建过程中使用的临时实例的 EC2 实例类型？
2.  对/错:打包器需要 SSH 在打包器构建过程中访问临时实例。
3.  您使用什么配置文件格式来定义 Packer 模板？
4.  对/错:您必须将您的 AWS 凭证硬编码到您的打包模板中。
5.  对/错:要捕获打包器创建的 AMI ID，您必须解析打包器构建过程的日志输出。
6.  ECS 优化的 AMI 的默认存储配置是什么？
7.  您会使用哪种类型的打包程序将文件写入/etc 目录？
8.  您可以从需要很长时间才能启动的自定义 AMI 创建一个 EC2 实例。AMI 安装在专用子网中，环境中没有配置额外的基础架构。启动时间慢的可能原因是什么？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   打包亚马逊 EBS Builder 文档:[https://www.packer.io/docs/builders/amazon-ebs.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)，[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/welcome . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)
*   Amazon ECS-优化 AMI:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/ECS-优化 _AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
*   CloudWatch 日志入门:[https://docs . AWS . Amazon . com/Amazon CloudWatch/latest/logs/CWL _ getting Started . html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_GettingStarted.html)
*   CloudFormation Helper Scripts 参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/cfn-Helper-Scripts-Reference . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html)
*   使用 ECS 命令行界面:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/ECS _ CLI . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)