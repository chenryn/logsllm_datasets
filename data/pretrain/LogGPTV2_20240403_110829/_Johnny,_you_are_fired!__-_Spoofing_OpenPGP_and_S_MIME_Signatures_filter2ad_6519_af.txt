### Vulnerabilities in GnuPG Usage Across Different Categories

We identified vulnerable software across three primary categories:
1. **Programming Language Libraries**: Specific libraries for programming languages.
2. **File Integrity Verification**: Applications using certificate pinning to verify the integrity of files stored under external control, such as cloud storage, including version control systems like Git.
3. **Package Managers**: Package managers that use GnuPG for integrity protection of software packages.

Despite the widespread use of GnuPG, we were unable to conduct an exhaustive review due to the large number of libraries and applications. Additionally, available code search engines are not well-suited for identifying applications that call an external application through a shell interface. Therefore, there may still be a significant number of vulnerable applications using GnuPG.

#### Python-GnuPG
**Python-gnupg** is a library interface for GnuPG in the Python language. It uses the status line interface and conflates it with logging messages. This conflation makes 717 applications potentially susceptible to the embedded filename injection attack, depending on how and in which context they use the Python library.

#### Bitcoin Source Code Repository Integrity
The Bitcoin project uses the Git version control system, which supports signatures on individual software patches to verify the integrity of the repository over time. A shell script using GnuPG to verify the integrity of all commits is included in the distribution. This script uses the status line API without anchoring regular expressions, making it susceptible to the malicious user ID injection attack. An attacker who can inject arbitrary keys into the user's keyring can re-sign modified source code commits, bypassing the verification script. Given that the Bitcoin source code is frequently used as the basis for other cryptocurrencies, this error may propagate to many similar projects, such as Litecoin.

#### Signature Bypass in Simple Password Store
**Pass**, a popular password manager for UNIX, uses the GnuPG status line API to encrypt password files and digitally sign configuration files and extension plugins. It does not anchor the regular expressions, making it susceptible to the malicious user ID injection attack. If Pass is used to synchronize passwords over untrusted cloud storage, an attacker with control over that storage can add their public key to the configuration, causing Pass to transparently re-encrypt the passwords to the attacker's key over time. If extension plugins are enabled, the attacker can achieve remote code execution. This vulnerability is documented as CVE-2018-12356.

#### Yarn Package Manager
**Yarn**, a package manager by Facebook for the JavaScript runtime Node.js, primarily relies on TLS to secure the integrity of the installation package. However, it also attempts to use GnuPG signature verification to secure the integrity of the installer from the build server to the download server. Unfortunately, Yarn fails to implement any form of certificate pinning or trust management, accepting any valid signature by any key in the local keyring, even untrusted keys. If an attacker can inject a public key into the user's keyring and perform a Man-in-the-Middle (MiTM) attack against one of Yarn’s download servers, they can replace the installation package with one containing a backdoor, gaining remote code execution on the user’s machine. This finding is documented as CVE-2018-12556.

### Unsuccessful Cryptographic Attacks
We analyzed 19 out of 20 OpenPGP email clients (excluding Airmail, which we could not test) and all 22 email clients supporting S/MIME signatures to check for vulnerabilities to well-known attacks on the PKCS#1v1.5 signature scheme for RSA with exponent e = 3. Specifically, we checked for mistakes in handling padding and ASN.1 structures. All tested clients resisted our attempts.

### Related Work
The OpenPGP standard only defines how to sign the email body, leaving critical headers like `SUBJECT` and `FROM` unsigned unless additional extensions are applied. Research by Levi et al. developed a GUI to help users understand the limitations of S/MIME digital signatures for emails. Usability studies, such as those by Whitten and Tygar, discuss the difficulties inexperienced users face in manually verifying the validity of a signature and understanding different PGP trust levels.

It is known that messages signed by a certain entity can be reused in another context, leading to "surreptitious forwarding" attacks. Davis demonstrated how to strip signatures in various encryption schemes. Gillmor highlighted the problems of partially-signed Inline PGP messages and non-signed attachments, and showed a message tampering attack through header substitution.

Recently, Poddebniak et al. described two attacks to exfiltrate the plaintext of OpenPGP encrypted messages, which exploit missing isolation between multiple MIME parts. GnuPG has had signature spoofing bugs in the past, such as allowing the injection of unsigned data into signed messages and returning a valid signature status for messages with arbitrary text prepended or appended to an Inline PGP signature.

### Future Work
A user study could clarify whether weak forgery findings, such as conflicting security indicators, would convince email users. Research questions include: Do users pay attention to email security indicators? Do users examine digital signature details? How do users react once they detect broken signatures?

### Conclusion
We demonstrated practical email signature spoofing attacks against many OpenPGP and S/MIME capable email clients and libraries. Our results show that email signature checking and correctly communicating the result to the user is surprisingly hard, and most clients do not withstand rigorous security analysis. While none of the attacks directly target the OpenPGP or S/MIME standards, they raise concerns about the practical security of email applications. We recommend that OpenPGP, MIME, and S/MIME offer more concrete implementation advice and security best practices for developing secure applications in the future.