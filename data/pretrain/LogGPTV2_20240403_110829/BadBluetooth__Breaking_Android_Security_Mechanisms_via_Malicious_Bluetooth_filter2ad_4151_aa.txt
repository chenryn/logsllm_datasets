title:BadBluetooth: Breaking Android Security Mechanisms via Malicious Bluetooth
Peripherals
author:Fenghao Xu and
Wenrui Diao and
Zhou Li and
Jiongyi Chen and
Kehuan Zhang
BadBluetooth: Breaking Android Security
Mechanisms via Malicious Bluetooth Peripherals
∗The Chinese University of Hong Kong
Email: {xf016, cj015, khzhang}@ie.cuhk.edu.hk
Fenghao Xu∗, Wenrui Diao†‡, Zhou Li§, Jiongyi Chen∗, Kehuan Zhang∗
†Shandong University, Email: PI:EMAIL
§University of California, Irvine, Email: PI:EMAIL
‡Jinan University
Abstract—Bluetooth is a widely used communication tech-
nology, especially under the scenarios of mobile computing and
Internet of Things. Once paired with a host device, a Bluetooth
device then can exchange commands and data, such as voice,
keyboard/mouse inputs, network, blood pressure data, and so on,
with the host. Due to the sensitivity of such data and commands,
some security measures have already been built into the Bluetooth
protocol, like authentication, encryption, authorization, etc.
However, according to our studies on the Bluetooth protocol as
well as its implementation on Android system, we ﬁnd that there
are still some design ﬂaws which could lead to serious security
consequences. For example, it is found that the authentication
process on Bluetooth proﬁles is quite inconsistent and coarse-
grained: if a paired device changes its proﬁle, it automatically
gets trust and users would not be notiﬁed. Also, there is no strict
veriﬁcation on the information provided by the Bluetooth device
itself, so that a malicious device can deceive a user by changing
its name, proﬁle information, and icon to be displayed on the
screen.
To better understand the problem, we performed a systematic
study over the Bluetooth proﬁles and presented three attacks
to demonstrate the feasibility and potential damages of such
Bluetooth design ﬂaws. The attacks were implemented on a
Raspberry Pi 2 device and evaluated with different Android OS
versions ranging from 5.1 to the latest 8.1. The results showed
adversaries could bypass existing protections of Android (e.g.,
permissions, isolations, etc.), launch Man-in-the-Middle attack,
control the victim apps and system, steal sensitive information,
etc. To mitigate such threats, a new Bluetooth validation mecha-
nism was proposed. We implemented the prototype system based
on the AOSP project and deployed it on a Google Pixel 2 phone for
evaluation. The experiment showed our solution could effectively
prevent the attacks.
I.
INTRODUCTION
As a wireless communication technology, Bluetooth has
been adopted by a variety of electronic products including
personal computers, smartphones and IoT devices, because
of its technical advantages in short-range data exchange.
Especially, given the context of IoT, smart devices could be
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23482
www.ndss-symposium.org
connected with each other and controlled by a phone through
Bluetooth.
Bluetooth has also become a lucrative target for adversaries
due to its features like data sensitivity, transmission in the
open air, and data handling in the kernel space. Recent years
have seen lots of Bluetooth-related CVEs [11] resulting in
system crashes, information leakage or privilege escalation on
the target device. Besides the typical threats like data snifﬁng
and weak pairing pass/PIN code, many vulnerabilities are
caused by bugs in Bluetooth stacks, like kernel drivers, which
could lead to code injections, arbitrary code execution, remote
crash, etc [31], [38], [40]. There are also studies related to
privacy issues. For example, Naveed et al. [34] discovered that
an unauthorized app could steal sensitive data by connecting
wrongfully to a third-party Bluetooth device.
To get a deeper understanding of Bluetooth security, we
conducted a systematic study on Bluetooth at the logic level,
including the underlying assumptions of the adversary model,
device authentication, authorization, and security policies.
Particularly, we focus on the Android platform due to its
prevalence and its support of countless Bluetooth applications
and services. In the end, we identiﬁed several new Blue-
tooth vulnerabilities even in the latest Android version. These
vulnerabilities are mainly associated with Bluetooth proﬁle,
which is a standard interface about a particular Bluetooth
functionality (e.g., audio transmission) but never thoroughly
evaluated from the security perspective. For example, we found
the current Android system assumes that a Bluetooth device
only would support a ﬁxed set of proﬁles, but this assumption
is invalid because a malicious Bluetooth device actually can
change its claimed proﬁles dynamically. As a result, several
existing measures become insecure. For example, Android
system will not check and notify users about the changes of
device proﬁles, thus a device could ﬁrst pair with the host using
a benign function/proﬁle and then switch to another proﬁle
and steal information without being identiﬁed. We also found
that the Bluetooth device authentication is too coarse-grained
and permissive, and most proﬁles, including the ones created
dynamically, will be trusted by default once the user chooses to
pair with that device. Even worse, the process of pairing with
the device could be fully hidden to the user (see Section III
for more details).
The newly discovered vulnerabilities can lead to severe
attacks on user’s privacy. To demonstrate the potential security
implications of these vulnerabilities, we devise several concrete
attack examples under the name of BadBluetooth. In one
attack, a malicious Bluetooth device could switch from a
legitimate proﬁle to the Human Interface Device (HID) proﬁle
stealthily. With such an HID proﬁle, the malicious device could
emulate the behavior of a Bluetooth keyboard and a Bluetooth
mouse by injecting keystroke and mouse movements and click
events. Consequently, it is able to change phone conﬁgurations,
bypass security protections, and install malicious apps without
being detected. In another attack, a malicious Bluetooth device
could change its proﬁle to Personal Area Networking (PAN)
stealthily, then launch a Man-in-the-Middle attack to sniff the
network trafﬁc or inject spooﬁng packets (like DHCP/DNS
replies pointing them to malicious servers).
Such vulnerabilities are not bugs caused by programming
mistakes. Instead, they are rooted from the incorrect perception
and assumptions on the Bluetooth communication. To mitigate
the security threats, we design a new validation mechanism
named Proﬁle Binding. It enforces a ﬁne-grained control for
the Bluetooth proﬁles and prevents the unauthorized changes of
proﬁles. We implemented and deployed our solution on Google
Pixel 2. The evaluation result showed that it can prevent the
BadBluetooth attack effectively with negligible overhead.
Contributions. We summarize the contributions of this paper
as follows:
•
•
•
New vulnerabilities. We investigated the design and
implementation of Bluetooth on Android system and
identiﬁed several vulnerabilities, such as the wrong
assumptions on device proﬁles, coarse-grained device
authentication and authorization mechanisms, as well
as deceivable and vague user interface.
New Attacks. To demonstrate the feasibility and secu-
rity implications of our newly discovered vulnerabili-
ties, we came up with several new attacks under real-
istic settings. These attacks can bypass existing data
isolation mechanisms of Android, causing information
leakage, changes of system security settings, etc. We
implemented and evaluated them on different Android
phones ranging from Android 5.1 to the latest Android
8.1.
Defense and Evaluations. We proposed a ﬁne-grained
device proﬁle management mechanism to mitigate the
security threats. Also, we implemented it on Android
8.1 and demonstrated it could address the threats
effectively.
Roadmap. The rest of this paper is organized as follows.
Section II gives the necessary background about Bluetooth.
Section III describes the Bluetooth design ﬂaws found in our
research. Section IV overviews the attacks against Android,
and Section V describes these attacks in details. We evaluate
our attacks under real-world settings in Section VI. Our
defense solution is presented in Section VII. Section VIII
discusses some advanced topics, and Section X concludes this
paper.
II. BACKGROUND
In this section, we introduce the relevant background about
Bluetooth. We ﬁrst overview Bluetooth stack and describe
Fig. 1: Bluetooth Stack.
Bluetooth proﬁle and connection mechanisms in details. Then,
we describe how Bluetooth functionalities are supported by
Android and how the risks are managed.
A. Bluetooth Overview
Bluetooth was proposed as a wireless technology standard
to enable short-range data exchange, which was invented two
decades ago. It has been gaining wide popularity among end-
users: the forecast shows near 10 billion Bluetooth devices
will be in use by 2018 [7], covering a variety of device types,
including PC, mobile phone, smartwatch, car, medical appli-
ances, etc. Comparing to another popular wireless standard,
i.e., Wi-Fi, which is designed for wireless local area network
(WLAN), Bluetooth is more user-centric, supporting wireless
personal area network (WPAN) and requiring minimum con-
ﬁguration efforts. Currently, Bluetooth standard is managed
by the Bluetooth Special Interests Group (SIG), and the latest
speciﬁcation is Bluetooth 5.0.
i.e.,
Bluetooth Stack. We illustrate the abstracted Bluetooth stack
in Figure 1. In essence, Bluetooth stack is a multi-layer
architecture including the lower physical and link layers, the
middleware layer and the application layer [6]. The lower
layers are implemented by Bluetooth chips, including radio
controller, baseband controller, etc. They communicate with
“host”,
the operating system running on the device,
through Host Controller Interface (HCI). The protocols in the
middleware layer are all implemented by the host. Different
from other communication technology like Wi-Fi, Bluetooth
protocols do not rely on the widely adopted TCP/IP stack. The
base-level protocol for the middleware layer is Logical Link
Control Adaptation Protocol (L2CAP), which can be treated as
TCP for Bluetooth stack. It manages the connection between
two Bluetooth devices, which implements features like QoS,
ﬂow-control, fragmentation and reassembly mechanisms. A
suite of application-oriented protocols are devised on top
of L2CAP. For example, Radio Frequency Communications
(RFCOMM) is used to generate the serial data stream, which
can replace the transmission of data over serial ports. Service
Discovery Protocol (SDP) broadcasts the services (e.g., headset
capability) supported by the host device and the associated
parameters (e.g., device identiﬁer) to other devices, in order to
establish the connection. To enable more efﬁcient data trans-
2
SDPHost Controller Interface (HCI)Bluetooth ControllerSCO/eSCO(Audio)RFCOMM...GATTATTL2CAPApplicationmission, audio transport can be supported using Synchronous
Connection-Oriented (SCO) channel, without using L2CAP.
The application layer deﬁnes the functionalities offered to
users.
Starting from the Bluetooth 4.0, a technology named
Bluetooth Low Energy (BLE) was incorporated, which aims to
reduce the power consumption for new devices in healthcare
and home entertainment. New protocols like Generic Attribute
Proﬁle (GATT) are included to facilitate BLE modes.
Bluetooth Proﬁle. To regulate the communication between
heterogeneous Bluetooth devices manufactured by different
vendors, the concept of Bluetooth proﬁle was proposed, which
is characterized by a general functionality of a device. Each
proﬁle contains settings to bootstrap the communications, like
the formats of user interface and dependencies of protocols. So
far, there are more than 30 proﬁles standardized by Bluetooth
SIG [10]. The most commonly used proﬁle is Headset Proﬁle
(HSP), which speciﬁes how a Bluetooth headset can be used
with mobile phones. It relies on SCO channel to encode the
audio and RFCOMM protocol to transfer AT commands [8] for
control capabilities like answering a call. A device can claim a
subset of proﬁles but the implementation must be compatible
with the standard.
Bluetooth Connection. Before the connection is established
between two Bluetooth devices, one device should be in the
discoverable mode, which can choose to respond to an inquiry
from the other nearby device with information like device
name, device class, list of services (proﬁles) and technical
information (e.g., manufacturer). Each device has a unique
48-bit MAC address but it is usually not used in the above
process. Instead, a friendly name deﬁned by the manufacturer
or the user is displayed. However, if the inquiry initiator knows
the address of another device, the inquiry has to be answered.
After the information is exchanged, a pairing procedure
would be executed to authenticate the remote device and pro-
tect the communication against eavesdroppers. Pairing usually
involves certain user interactions to conﬁrm the identity of the
remote device. Such a process could require a user to enter a
PIN presented by the remote device or compare the numerical
code on the displays of both devices, for example. If pairing
is successful, a shared secret named link key is created to
encrypt their communications, and both devices are said to
be bonded. If both devices memorize the pairing information
and the secret, they can connect to each other without going
through pairing again in the future.
One thing to pay attention is that the communication for the
two bonded devices is proﬁle-centric: after retrieving necessary
information from SDP, one device has to take additional step
to connect to the proﬁle of the other one before using its
functionality (the ﬁrst becomes initiator and the latter becomes
acceptor). In addition,
two devices can maintain multiple
channels under different proﬁles. For example, a user’s phone
could connect to the headset proﬁle and the keyboard proﬁle
of a single Bluetooth device at the same time.
B. Android Bluetooth
The early Android versions used Linux’s BlueZ stack as
its Bluetooth stack. Since Android 4.2, Google developed
its own stack, named Bluedroid or Fluoride. For normal
users, they could perform Bluetooth related operations through
Android Settings (a system app). To interact with Bluetooth
stack, both an Android third-party app and the Settings app
could invoke android.bluetooth APIs to communicate
with a system process, which is packaged as an app and
located at packages/apps/Bluetooth. This system app
implements various Bluetooth services and proﬁles. Receiving
the request from the upper-level Android app, it further invoke
into the native Bluetooth stack code, located at system/bt.
Bluetooth Permission. Since the Bluetooth communication
the access to the Bluetooth
may involve sensitive data,
functionalities on Android is mediated by a
set of
permissions. A third-party app can initiate the discovery
of nearby Bluetooth devices or change the Bluetooth
settings if the BLUETOOTH_ADMIN permission is granted.
Further, with BLUETOOTH permission, the app can perform
Bluetooth communication with another device,
such as
requesting and accepting connections. The protection levels
for both two permissions are normal, which means any
third-party app claiming them will be auto-granted without
reminding users. Since Bluetooth discovery may reveal
the location of
if an app
requests to scan nearby devices,
it has to declare either
the dangerous-level ACCESS_COARSE_LOCATION or
ACCESS_FINE_LOCATION permission. By default,
the
pairing process needs the user’s interaction. However, a
system app can avoid this with a granted signature-level
permission BLUETOOTH_PRIVILEGED.
from Android 6.0,
the user,
Note that, the BadBluetooth attack described in this paper
does not require any dangerous-level or signature-level
permissions (see details in Section IV).
III. DESIGN WEAKNESSES
The existing mechanisms around Bluetooth security focus
on proving the identity of the remote device (through pairing),
ensuring the conﬁdentiality of the communication (through
encryption), and restricting the capabilities of the untrusted
apps on the host (through permission). These mechanisms
work under the assumption that the remote device is trust-
worthy, say, its manufacturer or the owner certiﬁes the device
functionalities responsibly. However, such an assumption is
not always true. More speciﬁcally, our study reveals that an
adversary could manipulate the proﬁles on a remote device in
an unexpected way and use it as a stepping-stone to attack
the paired Android phone, casting severe threats to the phone
owner.
This new problem rises mainly because the security model
deﬁned by the Bluetooth stack is coarse-grained, focusing on
the device level. The problem is further complicated due to
the issues underlying the design of the Bluetooth framework
on the host, e.g., Android. Below we list ﬁve key issues and
elaborate the potential security implications for each of them.
Weakness #1: Inconsistent Authentication Process on Pro-
ﬁles. Before two devices are bonded, a user could verify the
identity of the remote device with an array of measures, like
comparing the displayed PINs. However, the best practices
regarding how proﬁles should be veriﬁed are not clear, since
3
they are never documented by Bluetooth core speciﬁcations.
As such, the device and host vendors have to come up with
ad-hoc ways for proﬁle authentication, and mechanisms differ
signiﬁcantly among these vendors or even proﬁles. Taking
Android as an example, the proﬁles are not listed during the
pairing process and are only visible to the user and adjustable
later (see Figure 2). If the device makes changes on the
proﬁles, it still gets trusted since pairing has already done,
and the user will not be immediately notiﬁed. Regarding how
the proﬁle channels are set up, some require user interactions
(e.g., File Sharing) while some can be done silently through
an app (e.g., Internet Access). As such, a device can contain
adversarial functionalities without revealing them to the user
in the beginning. For instance, a headset re-programmed by
an adversary could enable Human Interface Device (HID)
proﬁle after being paired with a phone and send unauthorized
keystrokes (see Section V-A).
Weakness #2: Overly Openness to Proﬁle Connection. To
better align with the Bluetooth speciﬁcations, a Bluetooth stack
typically supports many proﬁles (e.g., 15 for Android 8.0 [2]).
What’s problematic here is that a pro-active approach is usually
taken by the host, like Android: once the bond is created, the
host will try its best to connect to all the proﬁles claimed by
the remote device, without explaining the risk to the user or
letting her vet the connections. Even though the user could
disconnect certain proﬁles later in the device detail menu (see