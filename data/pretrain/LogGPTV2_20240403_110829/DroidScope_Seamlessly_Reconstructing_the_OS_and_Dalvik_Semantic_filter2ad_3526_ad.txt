Bench/Java and CaffeineMark. For those benchmarks,
the API tracer’s performance is greater than that of the
NOJIT Baseline, despite the fact that instrumentation is
taking place. This difference is due to Java libraries, such
as String methods, still beneﬁting from JIT in the API
tracer.
6.2 Analysis of DroidKongFu
The DroidKungFu malware contains three components.
First, the core logic is implemented in Java and is con-
tained within the com.google.ssearch package.
This is the main target of our investigation. Second are
the exploit binaries which are encrypted in the apk, de-
crypted by the Java component and then subsequently
executed. Third is a native library that is used as a shell.
It contains JNI exported functions that can run shell com-
mands and is the main interface for command and con-
trol. Unfortunately the command and control server was
unavailable at the time of our test and thus we did not
analyze this feature.
Discovering the Internal Logic We began our investi-
gation by running the API tracer on the sample and an-
alyzing the log. We ﬁrst looked for system calls of in-
terest and found a sys open for a ﬁle named “gjsvro”.
ABenchMarkCaffieneMarkCFBench/NativeCFBench/JavaCFBench/OverallCPUBench (ms)Multicore (ms)Softweg/CPUSoftweg/GraphicsSoftweg/MemoryLinpack/SinglethreadLinpack/Multithread0%20%40%60%80%100%120%0%20%40%60%80%100%120%NOJIT BaselineContext OnlyAPI TracerDalvik Instruction TracerTaint TrackerPercent of BaselinePercent of BaselineFigure 9: getPermission Pseudocode
There was also a subsequent sys write to the ﬁle from
a byte array. We later found that this array is actu-
ally part of a Java ArrayObject which was populated
by the Utils.decrypt method, which is part of Droid-
KungFu. Since decrypt takes a byte array as the param-
eter, we were able to search backwards and identify that
this particular array was read from an asset inside the
App’s package ﬁle called ”gjsvro”.
It means that dur-
ing execution, DroidKungFu decrypts an asset from its
package and generates the ”gjsvro” ﬁle. We then found
that DroidKungFu called Runtime.exec with parameters
“chmod 4755” and the name of the ﬁle, making the ﬁle
executable and setting the setuid bit. After that, it called
Runtime.exec again for “su” which led to a sys fork. Fur-
thermore, the ﬁle path for “gjsvro” was then written to
a ProcessImpl OutputStream, followed immedi-
ately by “exit”. Since this stream is piped to the child’s
stdin, we know that the intention of “su” was to open a
shell which is then used to execute “gjsvro” followed by
“exit” to close the shell. This did not work though since
“su” did not execute successfully.
Next we used the Dalvik instruction tracer to obtain
a Dalvik instruction trace. The trace showed that the
decrypt and Runtime.exec methods were invoked from
a method called getPermission2, which was called from
getPermission following a comparison using the result
of isVersion221 and some ﬁle existence checks. To get a
more complete picture of the getPermission method, we
ran dexdump and built the overview pseudocode shown
in Figure 9 . It is evident that to explore the getPermis-
sion1 and getPermission3, we must instrument the sam-
ple and change the return values of the different method
invocations.
With the Dalvik view support, we manipulated the re-
turn values of isVersion221 and exist methods and were
able to explore all three methods getPermission1, get-
Permission2, and getPermission3. They are essentially
different ways to obtain the root privilege on different
Android conﬁgurations. getPermission1 and getPermis-
sion2 only uses the “gjsvro” exploit. The main difference
is that getPermission1 uses Runtime.exec to execute the
exploit while the other uses the “su” shell. On the other
hand, getPermission3 decrypts “ratc”, “killall” (a wrap-
per for “ratc”) and “gjsvro” and executes them using its
own native library. As the API tracer monitors both
Figure 10: Taint Graph for DroidKungFu
Java and native components, our logs show that the li-
brary then calls sys vfork and sys execve to execute the
commands. This indicates that getPermission3 was try-
ing to run both “udev” exploit and “rage against the cage”
(ratc) exploits.
Analyzing Root Exploits Since Gingerbread has al-
ready been patched against these exploits, they never ex-
ecuted correctly. To further analyze these root exploits,
we ﬁrst needed to remove the corresponding patches
from the virtual device build. Here we focus on “ratc,”
since “udev” is analyzed in the same manner. Due to
space constraints we present the exploit diagnosis of
“ratc” in Appendix A.
We ﬁrst ran the API tracer on the ratc exploit, but did
not observe any malicious behavior in the API log. We
did see suspicious behavior in the process log provided as
part of the OS-view reconstruction. Particularly, we ob-
served that numerous ratc processes (descendants of the
original ratc process) were spawned, the adbd process
with uid 2000 ended, followed by more ratc processes
and then by an adbd process with uid 0 or root. This
signiﬁes that the attack was successful. It is worth not-
ing that the traditional adb based dynamic analysis would
fail to observe the entire exploiting process because adbd
is killed at the beginning.
Further analysis of the logs and descendent processes
showed that there are in fact three types of ratc processes.
The ﬁrst is the original ratc process that simply iterates
through the /proc directory looking for the pid of the
adbd process. Its child then forked itself until sys fork re-
turned -11 or EAGAIN. At this point it wrote some data
to a pipe and resumed forking. In the grandchild process
we see a call to sys kill to kill the adbd process followed
by attempts to locate the adbd process after it re-spawns.
Triggering Data leakage Reverting back to the default
Gingerbread build, we sought to observe the informa-
tion leakage behavior in doSearchReport. As depicted
11
getPermission {  if checkPermission() then doSearchReport(); return   if !isVersion221() then     if getPermission1() then return  if exists("bin/su" or "xbin/su") then     getPermission2(); return  if !isVersion221() then getPermission3(); return}UrlEncodedFormEntity.AbstractHttpClient.execute()sys_write(34, 0x405967d0, 397)String @ 0x4056a448“imei=123456789012345&ostype=...”byte[ ] @ 405967c0 / void* @ 405967d0“POST /search/sayhi.php HTTP/1.1...”String @ 0x40524e80“123456789012345”getDeviceId()in Figure 9, this involves instrumenting checkPermission
during execution of getPermission. The Dalvik instruc-
tion trace shows that doSearchReport invokes update-
Info, which obtains sensitive information about the de-
vice including the device model, build version and IMEI
amongst other things. We also observed outgoing HTTP
requests, which failed because the server was down. We
then redirected these HTTP requests to our own HTTP
server by adding a new entry into /etc/hosts. To fur-
ther analyze this information leakage, we used the taint
tracker and built a simpliﬁed taint propagation graph,
which is shown in Figure 10. Objects, both Java and
native, are represented by rectangular nodes while meth-
ods are represented by oval nodes. We see that UrlEn-
codedFormEntity (the constructor) propagated the orig-
inal tainted IMEI number in the String @ 0x40524e80
to a second String that looks like an HTTP request. The
taint then propagated to a byte array at 0x405967c0 by
AbstractHttpClient.execute. We ﬁnally see the taint ar-
riving at the sink at sys write. Note that sys write used
a void* at 0x405967d0, which is the contents array of
the byte array Object (see the StringObject example in
Section 4.2). This is expected since JNI provides direct
access to arrays to save on the cost of memcpy.
6.3 Analysis of DroidDream
Like analyzing DroidKungFu, we ﬁrst used the API
tracer to get a basic understanding of DroidDream, and
then obtained instruction traces and analyzed informa-
tion leakage.
From the log generated by the API tracer and the
shadow task list, we found that there are two Droid-
Dream processes. “com.droiddream.lovePositions,” the
main process, does not exhibit any malicious behavior
except using Runtime.exec to execute “logcat -c” which
clears Android’s internal log. Again, this behavior indi-
cates that traditional Android debugging tools fall short
for malware analysis.
“com.droiddream.lovePositions:remote,”
the other
process, is the malicious one. The logs show that Droid-
Dream retrieves the IMSI number along with other sen-
sitive information like IMEI, and encodes them into an
XML String. Then we observed a failed attempt to open
a network connection to 184.105.245.17:8080.
In order to observe this networking behavior, we instru-
ment the return values of sys connect and sys write to
make DroidDream believe these network operations are
successful.
Using the taint tracker, we marked these information
sources as tainted and obtained taint propagation graphs,
which conﬁrm that DroidDream did leak sensitive infor-
mation from these sources to a remote HTTP server. The
graph for leaking IMSI information is illustrated in Fig-
ure 11. We simpliﬁed the graph and annotated it to in-
Figure 11: Taint Graph for DroidDream
clude crypt which is the DroidDream method used to
xor-encrypt the byte array. The graph shows that get-
SubscriberId is used to obtain the IMSI from the system
as a String @ 0x40522a10. The IMSI String, along with
other information, is then encoded into an XML format
using format. The resulting String is then converted into
a byte[] @ 0x405232a8 for encryption by crypt. The
encrypted version is used to create a ByteArrayInput-
Stream. For brevity, we use a generic “API Native Mem-
ory” node to illustrate that the taint further propagates
through memory until the eventual sink at sys write.
We further investigated the crypt method by augment-
ing the Dalvik instruction tracer to track taint propaga-
tion and generate a taint-annotated Dalvik instruction
trace. Not only do we see the byte array being xor-ed
with a static ﬁeld name “KEYVALUE,” we also see that
the encryption is being conducted on the byte[] in-place.
A snippet of the trace log is depicted in Figure 12.
DroidDream also includes the udev and ratc ex-
ploits (unencrypted), plus the native library terminal like
DroidKungFu. Since we have already analyzed them in
DroidKungFu, we skipped the analysis on them in Droid-
Dream.
7 Discussion
Limited Code Coverage Dynamic analysis is known to
have limited code coverage, as it only explores a single
execution path at a time. To increase code coverage, we
may explore multiple execution paths as demonstrated in
previous work [6, 9, 31]. In the experiments, we demon-
strated that we can discover different execution paths by
manipulating the return values of system calls, native
12
String @ 0x40522a10“310260000000000”getSubscriberId()Formatter.format()byte[] @ 0x405232a8String @ 0x40523288“<?xml version="1.0" ...”getBytes()crypt()sys_write(33, 405261a8, 257)API Native MemoryByteArrayInputStreamysis takes too long, certain timeout events are triggered
leading to different execution paths. The analyst must
be aware of these new challenges. In summary, further
investigation in this area is needed.
8 Related Work
Virtual Machine Introspection Virtual Machine Intro-
spection is a family of techniques that rebuild a guest’s
context from the virtual machine monitor [21, 24]. This
is achieved by understanding the important kernel data
structures (such as the task list) and extracting impor-
tant information from these data structures. For closed-
source operating systems, it is difﬁcult to have complete
understanding of the kernel data structures. To solve this
problem, Dolan-Gavitt et al. developed a technique that
automatically generates introspection tools by ﬁrst mon-
itoring the execution of a similar tool within the guest
system and then mimicking the same execution outside
of the guest system [16]. With deep understanding of the
Android kernel, DroidScope is able to intercept certain
kernel functions and traverse proper kernel data struc-
tures to reconstruct the OS level view. In comparison,
DroidScope takes it one step further to reconstruct the
Dalvik/Java view, such that both Java and native compo-
nents from an App can be analyzed simultaneously and
seamlessly.
Dynamic Binary Instrumentation PIN [27], Dy-
namoRIO [5], and Valgrind [32] are powerful dynamic
instrumentation tools that analyze user-level programs.
They are less ideal for malware analysis, because they
share the same memory space with user-level mal-
ware and thus can be subverted. Bernat et al. used
a formal model to identify observable differences due
to instrumentation of sensitive instructions and created
a sensitivity-resistant instrumentation tool called SR-
Dyninst [4]. Like the other tools though, it cannot be
used to analyze kernel-level malware.
Anubis [1], PinOS [7], TEMU [35], and Ether [15] are
based on CPU emulators and hypervisors. They have the
full system view of the guest system and thus are better
suited for malware analysis. These systems only sup-
port the x86 architecture and Ether, in principle, cannot
support ARM, because it relies on the hardware virtual-
ization technology on x86. A new port must be devel-
oped for ARM virtualization [30]. While Atom based
mobile platforms are available, ARM still dominates the
Android market and thus ARM based analysis is impor-
tant. To the best of our knowledge, DroidScope is the
ﬁrst ﬁne-grained dynamic binary instrumentation frame-
work that supports the ARM architecture and provides a
comprehensive interface for Android malware analysis.
We do not however support control ﬂow tainting or dif-
ferent tainting proﬁles like Dytan [10]. Since Dytan is
Figure 12: Excerpt of Dalvik Instruction Trace for
DroidDream. A Dalvik instruction entry shows the location
of the current instruction in square brackets, the decoded in-
struction plus the values of the virtual registers in parenthesis.
A taint log entry is indented and shows tainted memory being
read or written to. The memory’s physical address is shown in
parenthesis and the total bytes tainted is represented by ”len.”
APIs and even internal Dalvik methods of the App. This
simple approach works fairly well in practice although a
more systematic approach is desirable. One method is to
perform symbolic execution to compute path constraints
and then automatically explore other feasible paths. We
have not yet implemented symbolic execution and leave
it as future work. In particular, we seek to use tainting in
conjunction with the Dalvik view to implement a sym-
bolic execution engine at the Dalvik instruction level.
Detecting and Evading DroidScope In the desktop en-
vironment, malware becomes increasingly keen to the
execution environment. Emulation-resistant malware de-
tect if they are running within an emulated environment
and evade analysis by staying dormant or simply crash-
ing themselves. Researchers have studied this problem
for desktop malware [2, 26, 36]. The same problem has
not arisen for Android malware analysis. However, as
DroidScope or similar analysis platforms become widely
adopted to analyze Android malware, we anticipate sim-
ilar evasion techniques will eventually appear. As mal-
ware may detect the emulated environment using emula-
tion bugs in the emulator, some efforts have been made to
detect bugs in the CPU emulators and thus can improve
emulation accuracy [28, 29].
More troubling are the intrinsic differences between
the emulated environment and mobile systems. Mobile
devices contain numerous sensors, e.g. GPS, motion and
audio, with performance proﬁles which might be difﬁcult
to emulate. While exploring multiple execution paths
may be used to bypass these types of tests, they might
still not be sufﬁcient. For example we have observed
that Android, as an interactive platform, can be sensitive
to the performance overhead due to analysis. If the anal-
13
[43328f40] aget-byte v2(0x01), v4(0x405232a8), v0(186)  Getting Tainted Memory: 40523372(2401372)  Adding M@410accec(42c5cec) len = 4[43328f44] sget-object v3(0x0000005e), KEYVALUE// field@0003[43328f48] aget-byte v3(0x88), v3(0x4051e288), v1(58)[43328f4c] xor-int/2addr v2(62), v3(41)  Getting Tainted Memory: 410accec(42c5cec)  Adding M@410accec(42c5cec) len = 4[43328f4e] int-to-byte v2(0x17), v2(23)  Getting Tainted Memory: 410accec(42c5cec)  Adding M@410accec(42c5cec) len = 4[43328f50] aput-byte v2(0x17), v4(0x405232a8), v0(186)  Getting Tainted Memory: 410accec(42c5cec)  Adding M@40523372(2401372) len = 1based on PIN, it is theoretically feasible to port the tool
to PIN for ARM [23], although it will still be limited to
analyzing user-level malware.
Dalvik Analysis Tools Enck et al. used ded to convert
Dalvik bytecode into Java bytecode and soot to further
convert it into Java source code to identify data ﬂow
violations [20]. While powerful, the authors note that
some violations could not be identiﬁed due to code re-
covery failures. DroidRanger is a static analysis tool that
operates on Dalvik bytecode directly and was success-