骤二：抓取数据包并修改投诉内容参数complaintsContent的值，如图9-8所示。通过Burp
Suite工具重复提交投诉信息，如图9-9所示。
图9-7 填写投诉信息
图9-8 抓取数据包
图9-9 暴力重复提交
步骤三：经过暴力重复提交后，客户端显示提交成功，如图9-10所示。
图9-10 提交成功
步骤四：返回页面查看历史投诉建议内容，可看到通过首次验证码认证，成功提交了
多次投诉，如图9-11、图9-12所示。
图9-11 成功提交多次投诉
图9-12 查看投诉信息
9.2.3 修复建议
针对验证认证次数问题，建议验证码在一次认证成功后，服务端清空认证成功的
session，这样就可以有效防止验证码一次认证反复使用的问题。
9.3 验证码客户端回显测试
9.3.1 测试原理和方法
当验证码在客户端生成而非服务器端生成时，就会造成此类问题。当客户端需要和服
务器进行交互发送验证码时，可借助浏览器的工具查看客户端与服务器进行交互的详细信
息。
9.3.2 测试过程
攻击者进入找回密码页面，输入手机号与证件号，获取验证码，服务器会向手机发送
验证码，通过浏览器工具查看返回包信息，如果返回包中包含验证码，证明存在此类问
题，如图9-13所示。
图9-13 验证码客户端回显测试流程
以某P2P金融平台为例。
步骤一：使用浏览器访问该网站，在找回密码页面中任意输入一个手机号码和开户证
件号，如图9-14所示。
图9-14 输入手机号与证件号
步骤二：单击“下一步”按钮，即可向该手机发送短信验证码。按 F12 键启用浏览器调
试工具可看到短信验证码在本地生成，如图9-15所示。
图9-15 查看本地生成的验证码
步骤三：输入本地生成的验证码，如图9-16所示。
图9-16 输入验证码
进入重置密码页面，如图9-17所示。
图9-17 进入密码重置页面
步骤四：重置密码成功，如图9-18所示。
图9-18 重置成功
9.3.3 修复建议
针对验证码在客户端回显的情况，建议采取如下措施来预防此类问题：
（1）禁止验证码在本地客户端生成，应采用服务器端验证码生成机制；
（2）设置验证码的时效性，如180秒过期；
（3）验证码应随机生成，且使用一次即失效。
9.4 验证码绕过测试
9.4.1 测试原理和方法
在一些案例中，通过修改前端提交服务器返回的数据，可以实现绕过验证码，执行我
们的请求。
9.4.2 测试过程
攻击者进入注册账户页面，输入任意手机号码，获取验证码，在注册账户页面填写任
意验证码，提交请求并抓包，使用抓包工具查看并修改返回包信息，转发返回数据包，查
看是否注册成功，如图9-19所示。
图9-19 验证码绕过测试流程
以某P2P网站系统注册功能为例。
步骤一：首先输入任意手机号码和密码，我们此处以 18888888886 为例，单击“获取
手机验证码”，由于我们无法获取到18888888886这个手机的真实验证码，我们随意填写一
个验证码1234，如图9-20所示。
步骤二：单击注册领红包并通过 burp 对数据包进行截获，右击选择 Do intercept-
Response to this request，如图9-21所示。
图9-20 输入手机号码
图9-21 抓取数据包
步骤三：然后单击 Forword 后，burp 工具里显示的就是网站返回的数据包。因为我
们填写的手机验证码1234肯定是错误的，而此时res_code的值为1，证明了当手机验证码
错误时res_code的值为1。我们将返回数据包中的res_code的值改为0，从而实现绕过验证
码，如图9-22所示。
步骤四：继续单击Forword后，即可成功注册该手机号码18888888886的账号并登录跳
转到用户界面，如图9-23所示。
图9-22 修改返回值
图9-23 注册成功并登录
9.4.3 修复建议
针对此漏洞，建议在服务端增加验证码的认证机制，对客户端提交的验证码进行二次
校验。
9.5 验证码自动识别测试
9.5.1 测试原理和方法
前面几小节介绍的测试方法主要针对业务逻辑设计上存在缺陷的验证码机制，而事实
上还有很大一部分验证码机制在逻辑上并不存在问题，这就涉及与验证码机制本身的正面
对抗，也就是验证码识别技术。
网站登录页面所使用的图形验证码是出现最早也是使用最为广泛的验证码，我们就以
图形验证码为例来讲解如何对其进行自动识别。
一般对于此类验证码的识别流程为：图像二值化处理→去干扰→字符分割→字符识
别。
图像二值化就是将图像上像素点的灰度值设置为0或255，也就是将整个图像呈现出明
显的黑白效果。
为了防止验证码被自动识别，通常用加入一些点、线、色彩之类的方式进行图像干
扰，如图9-24所示。
图9-24 验证码图像干扰
所以为了达到良好的识别效果，需要对图像进行去干扰处理。
字符分割主要包括从验证码图像中分割出字符区域，以及把字符区域划分成单个字
符。
字符识别就是把处理后的图片还原回字符文本的过程。
9.5.2 测试过程
攻击者访问网站登录页面，通过刷新验证码页面查看验证码组成规律，进行图像二值
化、去干扰等处理，并进行人工比对，存储成功识别的验证码包，截入工具，利用工具对
登录页面进行暴力破解，根据返回包的大小和关键字判断是否破解成功，如图9-25所示。
以某游戏站点为例。
图9-25 验证码自动识别测试流程
步骤一：首先通过多次刷新验证码，发现验证码主要由数字或小写字母组成，于是通
过PKAV HTTP Fuzzer工具设定一个验证码包含的字符范围，如图9-26所示。
图9-26 设定验证码字符范围
步骤二：通过第三方识别工具可以自动对验证码图像进行二值化、去干扰等处理，然
后通过人工比对来完善识别的准确率，如图9-27、图9-28所示。
步骤三：当识别的准确率符合自己预期的效果后（比如达到90%以上），就可以对登
录页面进行抓包分析了，通过Burp Suite工具抓取登录的数据包，如图9-29所示。
图9-27 验证码人工比对
图9-28 验证码人工比对
图9-29 抓取登录数据包
步骤四：将抓取到的请求数据包放至PKAV HTTP Fuzzer工具的请求包内，设置验证
码标志位，用户名和密码标志位，如图9-30所示。
图9-30 设置请求包
单击即可开始对账号密码进行暴力破解，验证码会自动载入，如图9-31所示。
图9-31 暴力破解
查看请求结果，可发现一个长度为611的返回包，用户名和密码为admin：admin，可
成功登录网站，如图9-32所示。
图9-32 成功登录
9.5.3 修复建议
针对验证码被自动识别的风险，建议通过以下几个方面来进行加固：
（1）增加背景元素的干扰，如背景色、背景字母等；
（2）字符的字体进行扭曲、粘连；
（3）使用公式、逻辑验证方法等作为验证码，如四则运算法、问答题等；
（4）图形验证码和使用者相关，比如选择联系人头像、选择购买过的物品等作为验
证码。
第10章 业务数据安全测试
10.1 商品支付金额篡改测试
10.1.1 测试原理和方法
电商类网站在业务流程整个环节，需要对业务数据的完整性和一致性进行保护，特别
是确保在用户客户端与服务、业务系统接口之间的数据传输的一致性，通常在订购类交易
流程中，容易出现服务器端未对用户提交的业务数据进行强制校验，过度信赖客户端提交
的业务数据而导致的商品金额篡改漏洞。商品金额篡改测试，通过抓包修改业务流程中的
交易金额等字段，例如在支付页面抓取请求中商品的金额字段，修改成任意数额的金额并
提交，查看能否以修改后的金额数据完成业务流程。
10.1.2 测试过程
该项测试主要针对订单生成的过程中存在商品支付金额校验不完整而产生业务安全风
险点，通常导致攻击者用实际支付远低于订单支付的金额订购商品的业务逻辑漏洞，如图
10-1所示。
测试过程以登录http：//www.xxx.cn/service/electronic/init.action网上营业厅购买充值卡
为例。
图10-1 测试流程图
步骤一：购卡选择卡面值后进入支付平台页面，如图10-2所示。
图10-2 实际支付金额
抓包并篡改支付请求中的明文金额字段 elecCardConfirm.money，如图 10-3 和图10-4
所示。
图10-3 抓取支付请求
图10-4 篡改支付请求中的支付金额字段
步骤二：跳转支付平台，完成篡改后订单金额支付流程，如图10-5和图10-6所示。
图10-5 在支付平台支付篡改后的金额
图10-6 支付平台回调电商平台提示支付完成
步骤三：支付平台支付完成后自动回调商城，显示订单成功生成并完成支付流程，表
明本次测试实现了用篡改后的金额0.01元在电商平台订购到100元的商品的操作，如图10-
7所示。
图10-7 电商平台提示订单已经完成支付
10.1.3 修复建议
商品信息，如金额、折扣等原始数据的校验应来自于服务器端，不应接受客户端传递
过来的值。
10.2 商品订购数量篡改测试
10.2.1 测试原理和方法
商品数量篡改测试是通过在业务流程中抓包修改订购商品数量等字段，如将请求中的
商品数量修改成任意非预期数额、负数等后进行提交，查看业务系统能否以修改后的数量
完成业务流程。
10.2.2 测试过程
该项测试主要针对商品订购的过程中对异常交易数据处理缺乏风控机制而导致的相关
业务逻辑漏洞，例如针对订购中的数量、价格等缺乏判断而产生意外的结果，往往被攻击
者所利用，如图10-8所示。
测试过程以某网上营业厅积分商城为例。
图10-8 测试流程图
步骤一：将商品放入购物车，对于实物礼品需要放在购物车中进行订购。放入购物车
后，单击进入购物车，如图10-9所示。
图10-9 将要购买的商品添加进购物车