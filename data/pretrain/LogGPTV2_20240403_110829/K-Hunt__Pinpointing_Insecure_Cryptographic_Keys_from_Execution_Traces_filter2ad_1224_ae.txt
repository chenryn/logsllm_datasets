RKPH
Table 3: Results of the detected insecure keys in the tested
benchmarks.
(I) Detecting DGK. Since the key generation process is not man-
aged by the crypto libraries, we excluded the libraries from the
detection of deterministically generated keys, and only evaluated
the 15 applications. Among the 15 applications, K-Hunt identi-
fied deterministically generated keys in two: Cryptochief that uses
a proprietary stream cipher and Imagine that uses a close-source
implementation of DSA-1024.
The first case of DGK is in the Imagine picture browser software,
which uses a digital signature to verify whether a user provided
license code is valid. K-Hunt identified five crypto key buffers.
Those buffers had only deterministic taint tag, which indicated a
deterministic key is used. We then conducted a manual analysis of
the application and found a very complex crypto flaw: the program
uses an incorrect DSA signature verification to check the license
code, which leads to the exposure of private key. Such an insecure
key management has actually been leveraged to break the ECDSA
digital signature of Sony Play Station 3 [42].
In particular, a DSA cipher contains five large integers: p, q, д as
fixed parameters (which are public known), x as the private key
(which should never be leaked), and k as a random factor (which
should be a random secret). It generates a public key y = дx mod p.
To use DSA for digital signature, it has to go through the following
two processes.
• Signature Generation. To sign a message m, the DSA cipher
computes the signature as a pair (r, s) with a cryptographic hash
function H (e.g., SHA-256) through equation (1) and (2), and
then distribute r and s to the receiver.
r = дk mod p mod q
−1(H(m) + x · r) mod q
(1)
s = k
(2)
• Signature Verification. The receiver then verifies the signa-
ture (r, s) with the public knowledge of p, q, д, y and H(m) to
verify whether the signature is valid if v, calculated using the
following equation from (3) to (6), equals to r.
−1 mod q
w = s
u1 = H(m) · w mod q
u2 = r · w mod q
(3)
(4)
(5)
v = (дu1 · yu2 mod p) mod q
(6)
Through manual reverse-engineering, we noticed that the five
detected key buffers correspond to the publicly known parameters
p, q, д, y, and the random secret factor k. Thus, Imagine actually
leaks the random secret factor k by hard-coding it in the software.
A further reverse engineering of the license registration process
of Imagine reveals that this software only tells the user s without
passing r, when a user provides a message m to generate its digital
signature. However, the signature verification requires r in equa-
tion (5). Therefore, the software then locally computes r by using
equation (1) through a hard-coded k. Unfortunately, the exposure
of k is a severe mistake for DSA digital signature. Specifically, if an
attacker has obtained a legal pair of (r, s), with the leaked k, it can
then compute the private key x with the following equation:
x = r
−1(k · s − H(m)) mod q
(7)
As such, an attacker is able to forge any other legitimate digital
signatures with the private key x. We have informed the developer
of Imagine, and this vulnerability has been confirmed and the patch
is still under development as the time of this writing.
The second case of deterministically generated key was found in
Cryptochief, a file encryption tool2. This program accepts two files
as inputs: one is a key file and the other is a plaintext file. It then
outputs an encrypted file. The lengths of the key and plaintext files
are both arbitrary, while the length of the encrypted file is equal to
that of the plaintext file.
We used K-Hunt to monitor the encryption process of Cryp-
tochief. Interestingly, K-Hunt pinpointed that the key buffer has
only 8 bytes, and this key buffer is composed from three local input
sources. The IL for each input source is only one byte. Therefore,
this key buffer has only three bytes IL. This indicates that the key
buffer only acquires at most 24-bits of information from the local
input. As such, an attacker can easily brute force all the possible
keys with just 224 possibilities to decrypt any ciphertext without
the key file. Our further analysis with program source code reveals
that the key derivation function of Cryptochief only uses the head
byte, the tail byte and the count of all bytes of the key file data to
generate an 8-byte key buffer.
(II) Detecting INK. In secure key agreement protocols, the shared
key should be influenced by all participants. As a result, when K-
Hunt reveals that a shared key is generated with non-deterministic
inputs, it further checks whether the non-deterministic inputs come
from different parties. In our experiments we only consider the
client-server model, which involves two participants. Of the five
2Cryptochief was first mentioned by Bruce Schneier in his blog article [62] in 2006.
The source code of this program is released [20] after the Hack.lu 2014 CTF contest.
crypto protocols in Cryptcat, Wget, UltraSurf, IpMsg, and PSCP, two
protocols in Ultrasurf and IpMsg use insecurely negotiated keys.
Both programs generate session keys locally and the server just
accepts the key from the client.
More specifically, in the case of IpMsg that adopts a message en-
cryption with RSA-2048 and AES-256, although K-Hunt does not iden-
tify the used RSA key, it does discovers that the AES key is selected
locally (the key is generated using the Windows CryptGenRandom
API). Actually, it is a common mistake to conduct a session key
exchange if the client encrypts the session key with a deterministic
server RSA public key (and then sends it to the server). This not only
brings the issue that the session can be controlled by a malicious
or tampered client, but also hinders the server to authenticate the
client since every attacker could forge the identity through using
the public key.
(III) Detecting RK. We investigated the root cause of recoverable
keys in both libraries and applications by analyzing the source code,
or reverse-engineering the program’s binary when the source was
not available. The recoverable keys are split into four subclasses in
Table 3, two that affect crypto libraries and two that affect applica-
tions. These subclasses are explained below.
RK in Crypto Libraries. Recoverable keys are due to the lack of
crypto key buffer sanitization. In particular, we found four libraries
(Libsodium, LibTomcrypt, Nettle, WolfSSL) that do not zero out the
crypto key buffer, which we term No-Memory-Zeroing (NMZ). For
instance, in Nettle and WolfSSL, the library developers do not provide
any scrubbing functions. For LibTomcrypt, the scrubbing function
provided by the library developers is implemented as an empty
function. An unintentional case happens in Libsodium. Although
it provides a sodium_memzero scrubbing function to clean most of
its key buffer, Libsodium ignores the round key extension in its AES
implementation (utilizing AES NI hardware feature): the round key
buffer on the stack is not cleaned and thus could be leaked. We
have reported this recoverable key to the developers, and they have
patched this issue.
We also found four libraries that use what we term Manual-
Memory-Zeroing (MMZ), in which a scrubbing function is provided
to clean the key buffer. For instance, mbedTLS uses mbedtls_aes_
free to zero the key; GnuTLS uses zeroize_temp_key in wrap_
nettle_cipher_close to zero the key; and Libgcrypt uses gcry_
cipher_close to zero the key. However, a major problem for MMZ
is that it does not clean the sensitive data automatically and it may
leave the crypto key in memory if the scrubbing function is not
invoked.
RK in Crypto Applications. We identify two common root causes
for recoverable keys in crypto applications. We term the first RK in
Program Heap (RKPH). In this category crypto key buffers are freed
without having been sanitized after the crypto operation completes.
There are 4 applications with insecure crypto keys in this category.
Among those applications, Ccrypt, Cryptcat, and WinRAR, all have
been developed for more than 10 years, but they are still vulnerable
to the crypto key buffer sanitization issue.
We term the second RK in Program Stack (RKPS). A crypto key
buffer can also be placed in the stack and developers often ignore
the sanitization of stack variables. This recoverable key category
affects 9 applications: 7-zip, Enpass, IpMsg, KeePass, MuPDF, Sage,
UltraSurf, Wannacry, and Wget. Interestingly, this issue helps the
forensic analysis of the ransomware families Sage and Wannacry. In
particular, since they place the encryption keys in the stack and do
not clean them, it is possible for an analyst to retrieve the key from
the stack memory, similarly to the heap crypto key identification
case in the RSA private key extraction of Wannacry (which affects a
Windows XP crypto library that we do not analyze) [45].
6.4 Performance Overhead
As described in §5, K-Hunt includes three Pintools: code profiling,
randomness testing, and key tracking. To evaluate the performance
overhead of these Pintools, we selected four command-line crypto
applications and two representative crypto libraries. We report the
performance overhead of the three Pintools compared to null PIN
by running the 6 selected programs 10 times each. As shown in
Figure 3, on average the performance overhead of code profiling
is 2.1 times, 5.7 times for randomness testing, and 7.6 times for
key tracking. We observe that the overhead is larger for programs
with complex data transformation (e.g., 7-zip), asymmetric ciphers
(e.g., RSA), and digital signatures (e.g., ECDSA). Nonetheless, the
performance overhead is reasonable for most programs tested by
K-Hunt.
7 LIMITATIONS AND FUTURE WORK
K-Hunt has a number of limitations. First, while K-Hunt is able to
pinpoint the insecure keys, it does not report any specific crypto al-
gorithms (e.g,. AES, DSA) to which the insecure key belongs. In fact,
K-Hunt has all the building blocks to support the identification of
each specific crypto algorithm used by an binary executable. More
specifically, since K-Hunt has identified the data bundles of key
buffer K, ciphertext C, and plaintext P, we can actually perform
a brute force search of the encryption algorithm E by computing
whether C = E(K, P), where E are those well-known crypto algo-
rithms. Certainly, this is only possible when software uses standard
crypto algorithms (e.g., if they follow the never-implement-your-
own-crypto practice [29, 61]). We leave the identification of specific
crypto algorithms in a binary executable as one of our future efforts.
Second, K-Hunt performs the taint propagation at the function
level. That is, if a function uses a tainted tag, all the data defined
in that function will have that tainted tag. Such taint propagation
may overly propagate the tainted tag, making insecure keys appear
secure. For instance, it might be possible that a function uses a ran-
dom function, but the return value of the random function is never
assigned to the crypto key. While we have not encountered such a
case, we plan to address this issue by implementing a fine-grained
taint propagation policy, and meanwhile address the performance
issues caused from this policy.
Finally, K-Hunt will not be able to detect the crypto keys if they
are stored in CPU registers. A particular case is the secure in-cache
execution [34, 44] technique against the cold-boot attack [46]. In
this case the crypto key is never evicted to memory and thus our
approach is not able to detect it.
There are also other possible extensions of K-Hunt. For instance,
crypto operations are increasingly used by mobile apps to protect
their sensitive data. Thus, extending K-Hunt to detect insecure
keys in mobile apps is a logical next step.
8 RELATED WORK
Crypto Key Identification. There has been significant interests
of identifying crypto keys. For instance, Shamir et al. presented an
efficient algebraic attack which can locate the secret RSA keys in
long bit strings, and more general statistical attacks which can find
arbitrary crypto keys embedded in large programs [64]. Halderman
et al. proposed the cold-boot attack [46] to retrieve the crypto keys
from physical memory of the device. Hargreaves et al. presented a
linear scan method to recover encryption keys from memory [47].
Maartmann et al. discussed the forensic identification and extraction
of crypto keys [57]. However, those approaches focus on identifying
a key with its mathematic structure and do not consider utilizing
dynamic program analysis to discover the used key, whereas K-
Hunt fully utilizes dynamic program execution information such as
the number of basic block execution and data entropy/randomness
to identify the crypto key. Moreover, K-Hunt makes a step even
further by using the dynamic taint analysis to detect the insecure
crypto keys, which is less concerned by previous key identification
studies.
Crypto Primitive Identification. A number of efforts have fo-
cused on identifying the crypto primitives from various aspects
(e.g., [33, 43, 54, 58, 70]). However, archiving efficient and accurate
crypto primitive identification is still a non-trivial task. There are
still many open challenges needed to be addressed. Recent results
indicate that data flow analysis [52, 53] is a promising technique
to help identify crypto algorithms. One major problem of state-of-
the-art crypto primitive identification techniques is that they are
sensitive to function boundary and parameter recognition. Existing
techniques (e.g., CryptoHunt [68]) require the boundary of crypto
function to be identified accurately to recognize crypto function.
Crypto Misuse Detection. Public awareness of crypto flaw is
growing and the increased awareness has resulted in an increase
of efforts to detect crypto misuses [37, 50, 55]. Over the past a few
years, many crypto misuse cases in mobile apps and firmwares
(e.g., [35, 39]) have been discovered. For commodity software, some
crypto misuses for popular software products are also discovered [36,
37, 41, 67]. Recently, TaintCrypt [60] proposed the concept of cryp-
tographic program analysis to help developers detect the crypto
misuse using LLVM-based static source code analysis. However, it
requires the source code to conduct the analysis. K-Hunt comple-
ments the existing crypto misuse detection approach by exclusively
focusing on identifying the insecure crypto keys from binary exe-
cutables.
Comparison. Clearly we are not the first to look into the security
issues of crypto code, and there are a number of closely related
works that focus on identifying the crypto primitives, as shown
in Table 4. In particular, among the compared systems, Kerckhoffs,
Aligot, Crypto-DFG, and Cryptohunt require the pre-defined templates
to identify crypto algorithms. Therefore, they cannot detect propri-
etary ciphers. ReFormat, Dispatcher, and MovieStealer are not specif-
ically designed for crypto primitive identification, and thus they
22x
20x
18x
16x
14x
12x
10x
8x
6x
4x
2x
0x
Code profiling
Etnropy/Randomness testing
Key tracking
12.4x
10.1x
5.21x
3.65x
1.57x
R
A
R
W i n
2.31x
7 -zip
2.59x
2.11x
1.53x
W g et
P
22.0x
13.1x
15.2x
9.16x
4.54x
3.73x
1.72x
A
S
D
C
2.99x
3.18x
1.56x
1.44x
S
E
o ta n - A
B
A
S
o ta n - R
B
2.82x
A
S
D
C
o ta n - E
B
11.5x
9.67x
3.24x
1.17x
1.25x
1.24x
S
E
L - A
S
S
p e n
O
A
S
L - R
S
S
p e n
O
L - E
S
S
p e n
O
3.12x
1.83x
1.43x
u tt y -s c p
Figure 3: Runtime overhead (times) of three pintools of K-Hunt compared to null PIN.
Systems
Aligot [33]
CipherXRay [54]
Crypto-DFG [52]