by taking the total cost for each type of PrivEx node and dividing
it by the count of that type of node, to ﬁnd the cost at each type of
node. This helps identify potential bottlenecks.
Computational Overhead.
We present PrivEx overhead statistics to show that both schemes
have low computation requirements. The hardware for our experi-
ments is a 3 GHz quad-core AMD desktop computer with 4 GiB of
RAM running stock Ubuntu 14.04.
Using a test harness we measure the time the core components
of each PrivEx scheme take under parameters typically found in the
Tor network. We simulate a network of 10 TKSs and 1000 DCs; the
latter reﬂects the number of exits in the current Tor network. The
number of censored websites to collect statistics for is 1000 and
each website is “visited” one million times. No actual website con-
nections are made by the DCs since we are interested in capturing
the overhead of the PrivEx schemes.
PrivEx-S2. From Table 1, we note that the setup phase of PrivEx-
S2 takes 4.1 s on average and that the tally phase takes 470 ms on
average (adding the “per node” times, as the nodes act in parallel).
Without any ACN trafﬁc (i.e. no DC increment operations), the
total overhead wall-clock time per epoch is 4.6 s. The key ﬁgure to
note is that the addition operations at the DC nodes take less then
1 µs each (900 µs for 1000 visits per DC) on average. This low cost
is important, as this operation will be called the most often and the
impact on DC nodes must be negligible so that they can service
ACN requests without undue overhead.
6https://crysp.uwaterloo.ca/software/privex/
Operation
TKS initialize
TKS register
DC initialize
DC register
DC increment
DC publish
TKS publish
TS sum
Epoch Total
Total per epoch (ms)
0.012±0.004
41000±3000
40000±3000
312±8
900±90
1.7±0.1
0.56±0.06
470±20
83000±6000
Per node (ms)
0.0012±0.0004
4100±300
0.312±0.008
0.90±0.09
40±3
0.0017±0.0001
0.056±0.006
470±20
—
Table 1: The overhead per epoch (with 95% conﬁdence inter-
vals) incurred by participants in the PrivEx-S2 scheme for 10
TKSs and 1000 DCs with 1000 websites with one million visits
per epoch.
Operation
TKS initialize
DC combine key
DC initialize
DC increment
PBB productize
TKS decrypt
PBB DL Lookup
Epoch Total
Total per epoch (ms)
10.9±0.2
4.05±0.02
295000±600
3.9±0.1
50400±400
448000±3000
6293±40
800000±3000
Per node (ms)
1.09±0.02
295±0.6
0.00405±0.00002
0.0039±0.0001
50400±400
44800±300
6290±40
—
Table 2: The overhead per epoch (with 95% conﬁdence inter-
val) incurred by participants in the PrivEx-D2 scheme for 10
TKSs and 1000 DCs with 1000 websites with one million visits
per epoch.
PrivEx-D2. From Table 2, we note that the setup phase of PrivEx-
D2 takes 297 ms on average with the DC nodes bearing the most
cost. The entire tally phase takes 1.69 m on average per epoch
(adding the “per node” numbers, as these operations occur in paral-
lel). Combining the overhead for both phases, the epoch overhead
wall-clock time is 1.7 m on average. We see in PrivEx-D2 that the
addition operation takes 3.9 µs on average and again, like PrivEx-
S2 above, this is desirable since it is the most frequent operation.
Discussion. PrivEx-S2 has lower computational cost than PrivEx-
D2, by a factor of almost 10 in our example. Yet, it is clear from
these results that the computational overhead at each type of node
in PrivEx is low and that the time requirements are a small frac-
tion of the duration of an epoch. Indeed, even if there are applica-
tions where statistics need to be gathered for shorter epochs, PrivEx
can still be useful; as we saw earlier, for each setup-tally cycle
the PrivEx-S2 scheme incurs less than 4.6 s of overhead while the
PrivEx-D2 scheme incurs less than 1.7 m of overhead, meaning the
statistics collection frequency can be as low as 5 s and 2 m respec-
tively. This ﬂexibility allows one to match the appropriate PrivEx
scheme to the application’s statistics frequency and threat model
requirements.
Communication Overhead.
We now give a closed-form analysis of the communication costs
of the two PrivEx schemes. In the following description, DCN ,
T KSN , and WN represent the number of DC nodes, TKS nodes,
and websites for which we are collecting statistics respectively.
An overhead in common for both schemes is the list of websites
and the constants for DDP calculations σ, φ, and γ. We make the
Setup
156.25
0
0
156.25
Tally
3906.25
39.07
0
3945.32
Total
4062.50
39.07
0
4101.56
Per node
4.06
3.91
0
—
DC
TKS
TS
Total
Table 3: Communication cost (in KiB) of PrivEx-S2 for 1000
websites, 10 TKSs and 1000 DCs per epoch, using closed-form
analysis.
Setup
(KiB)
0
0.94
937.5
938.44
Tally
(MiB)
61.07
0.31
641.17
702.55
Total
(MiB)
61.07
0.31
642.09
703.47
Per node
(KiB)
62.54
31.74
657500
—
DC
TKS
PBB
Total
Table 4: Communication cost of PrivEx-D2 for 1000 websites,
10 TKSs and 1000 DCs per epoch, using closed-form analysis.
Note the units in the column headings.
conservative assumption that the website domain name in the URL
will not be more than 255 characters long, therefore the maximum
length of the URL list is 255 · WN bytes. The constants require
8 bytes in total. In the experimental setting above this overhead is
∼249 KiB, the overwhelming majority of it being the website list.
While it is not as signiﬁcant, we note that the website lists and val-
ues for the constants need not be transmitted every epoch, instead
only being sent when there is a drastic change in the network con-
ditions or the website lists are updated.
PrivEx-S2.
material to each TKS for a total of 16DCN · T KSN bytes.
In the tally phase, each DC sends 4 bytes to the TS for each
website in the database for a total of 4WN · DCN bytes. Similarly,
each TKS also sends the same amount to the TS for each website
for a total of 4WN · T KSN bytes.
In the setup phase, each DC sends 16 bytes of key
In each epoch, the total communication cost, in bytes, is
16DCN · T KSN + 4WN (DCN + T KSN )
For 10 TKSs and 1000 DCs tracking 1000 websites we see from
Table 3 that the total communication cost for every epoch is ∼4 MiB,
but the cost for each type of node is far lower at only ∼4 KiB.
PrivEx-D2.
In the setup phase, each TKS sends 96 bytes of
key material and zero-knowledge proof to the PBB for a total of
96T KSN bytes. Then, each DC retrieves the key material and the
proofs from the PBB for a total of 96T KSN · DCN bytes.
In the tally phase, each DC sends a 32-byte commitment to the
PBB for a total of 32DCN bytes. After all DCs have sent their
commitments, the PBB sends each DC the commitments of the
other DCs for a total of 32DC 2
N bytes. Then, each DC sends a
64-byte opening of the commitment for each website to the PBB
for a total of 64WN · DCN bytes. The PBB then sends, in parallel,
the opening of the DC’s commitments to each TKS for a total of
T KSN (DCN (64WN + 32)) bytes. In response each TKS sends
the results of the partial decryption for each website in the database,
along with a zero-knowledge proof of equality of discrete logs for
a total of T KSN (32WN + 64) bytes.
In each epoch, the total communication cost, in bytes, is
32 (WN (2DN · T KSN + 2DN + T KSN )
N + 4DN · T KSN + 5T KSN + DN
+ D2
(cid:1)
From Table 4 we see that, in our experimental setting, the total
communication cost for each epoch is ∼703 MiB, while each of the
TKS and DC nodes send only ∼32 KiB and ∼63 KiB respectively.
The bulk of the communication cost is borne by the PBB node.
Discussion. Both schemes scale linearly with the number of web-
sites and TKSs. PrivEx-D2 scales quadratically with the number
of DCs while PrivEx-S2 remains linear. While it is true that the
PrivEx-D2 scheme is generally more expensive, we note that each
DC and TKS transmits only tens of KiB of trafﬁc per epoch, which
is comparable to PrivEx-S2. However, the PBB transmits hundreds
of mebibytes due to the higher security and privacy guarentees it
allows. To mitigate the impact of this load, it is expected that the
PBB will be well resourced for this task. Indeed, we expect that in
real deployments the number of TKSs would be closer to three and
the number of websites would be closer to 100. In that scenario,
the total communication cost would be approximately 55 MiB per
epoch.
The PrivEx-S2 scheme is relatively lightweight, enjoying very
low overhead and perhaps a better choice in low-bandwidth envi-
ronments or where the size of the website list will be very large.
Even so, in absolute terms, both PrivEx schemes have low over-
head for DC and TKS nodes. We note that in the Tor network, even
relays in the 1st percentile by bandwidth (18.4 KBps)—which are
also the least likely to be chosen in circuits in any event—can man-
age the load easily. [34]
From the perspective of the DC, which is also a node in the ACN,
PrivEx does not signiﬁcantly impact bandwidth usage which can
be better used to service ACN trafﬁc. From the perspective of the
TKS, TS, and PBB, even though we expect that the servers would
be well provisioned for the task of aggregating statistics, the re-
source requirements are low enough that they would also not be
signiﬁcantly impacted by participating in PrivEx.
7. RELATED WORK
Differential Privacy. While PrivEx utilizes differential privacy
(DP), there are many key differences in the setting in which it is
traditionally applied and the PrivEx setting.
In classical DP there is a trusted centralized database—who is
usually a third party host—which can see the real data and is con-
sidered secure.
Instead, in PrivEx the data is distributed across
nodes in the network where no entity has access to all of the real
data from all of the nodes. The only data that is revealed to anyone
is the aggregated statistics with noise added. An adversary would
have to compromise a large fraction of the DCs, or all of the TKSs,
in order to access the private data of the honest parties.
In the usual DP setting the database is static across epochs and
clients use up their privacy budget to make a number of database
queries—the results of which are usually private unless they choose
to make them public. As discussed at the end of §5.2, in PrivEx,
the database is completely refreshed at the start of every epoch and
only a single constant query is ever made every epoch, the result of
which is then made public.
A number of works consider the problem of securely computing
functions in a distributed differential privacy setting.
Dwork et al. [10] provide a method for generating shares of ran-
dom Gaussian noise in a multiparty setting mirroring the distribu-
tion of noise in our setting. The key difference is that the parties
work together to ﬁrst produce noise shares which are then used to
perturb the data in their individual databases where as in PrivEx
the noise is calculated independently using network state and does
3 of the
not incur extra protocol rounds. Also, they assume that 2
participants will be honest while PrivEx makes no such explicit re-
striction, i.e. a lone honest DC may enjoy the same level of privacy
as the designer intended, albeit with longer aggregation periods to
gain the same level of utility as designed.
In the two-party setting of distributed differential privacy, Goyal