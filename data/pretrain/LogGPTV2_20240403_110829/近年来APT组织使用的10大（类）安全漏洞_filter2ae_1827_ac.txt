2018年1月31日，韩国CERT发布公告称发现Flash
0day漏洞（CVE-2018-4878）的野外利用，攻击者通过发送包含嵌入恶意Flash对象的Office Word附件对指定目标进行攻击。
  * **漏洞详情**
CVE-2018-4878通过Flash
om.adobe.tvsdk包中的DRMManager对象进行攻击，如下代码所示，triggeruaf函数中创建一个MyListener对象实例，通过initialize进行初始化，并将该实例设置为null，之后的第一个LocalConnection().connect()会导致gc回收该实例内存，第二次LocalConnection().connect()时触发异常，在异常处理中会创建一个新的MyListener实例，内存管理器会将之前MyListener对象实例的内存分配给新对象，即此处的danglingpointer，设置timer，在其回调函数中检测uaf是否触发，成功则通过Mem_Arr进行站位：
  * **相关CVE**
  * **相关APT** **组织**
  * **相关APT** **事件**
Group123利用CVE-2018-4878攻击韩国敏感部门。
  * **补丁及解决方案**
个人用户下载打开来源不明的文档需要非常谨慎，使用360安全卫士之类的防病毒木马流氓软件的工具进行扫描以尽可能降低风险，如果有条件尽量使用虚拟机打开陌生文档。
软件厂商adobe已经发布了漏洞相应的补丁：
### 9\. iOS三叉戟漏洞
iOS三叉戟漏洞是目前唯一一个公开披露的针对iOS系统浏览器的远程攻击实例，并真实用于针对特点目标的APT攻击中。
  * **漏洞概述**
iOS三叉戟漏洞是指针对iOS 9.3.5版本之前的iOS系统的一系列0 day漏洞，其利用了3个0
day漏洞，包括一个WebKit漏洞，一个内核地址泄露漏洞和一个提权漏洞。通过组合利用三个0
day漏洞可以实现远程对iOS设备的越狱，并且安装运行任意恶意代码。
  * **漏洞详情**
iOS三叉戟漏洞利用载荷可以通过访问特定的URL触发，所以可以通过短信、邮件、社交网络或者即时通讯等发送恶意链接诱导目标人员点击打开链接实现漏洞的触发。由于WebKit
JavaScriptCore库存在任意代码执行漏洞，当Safari浏览器访问恶意链接并触发恶意的JavaScript载荷执行，其利用代码进入Safari
WebContent进程空间。其随后利用另外两个漏洞实现权限提升，并越狱掉iOS设备。最后三叉戟漏洞可以实现下载和运行用于持久性控制的恶意模块。
图片来源Lookout[3]
  * **相关CVE**
iOS三叉戟漏洞涉及3个0 day漏洞，其CVE编号及相关信息如下表所示：  
  * **相关APT** **组织和事件**
三叉戟漏洞的最初发现是因为阿联酋一名重要的人权捍卫者Ahmed
Mansoor在2016年8月10日和11日，其iPhone手机收到两条短信，内容为点击链接可以查看关于关押在阿联酋监狱犯人遭受酷刑的秘密内容。其随后将短信内容转发给公民实验室(Citizen
Lab)，由公民实验室和Lookout安全公司联合分析发现，最后发现该三叉戟漏洞和相关恶意载荷与著名的以色列间谍软件监控公司NSO Group有关。
图片来源[1]
  * **补丁及解决方案**
苹果公司随后在2016年8月25日发布iOS 9.3.5，修补了三叉戟漏洞[2]。
### 10.Android浏览器remote2local漏洞利用
该Android浏览器漏洞利用代码的泄露揭示了网络军火商和政府及执法机构利用远程攻击漏洞针对Android用户的攻击和监控，并且该漏洞利用过程实现几乎完美，也体现了漏洞利用技术的艺术特点。
该漏洞利用代码几乎可以影响当时绝大多数主流的Android设备和系统版本。
  * **漏洞概述**
Android浏览器remote2local漏洞利用是2015年7月Hacking
Team遭受入侵并泄露内部源代码资料事件后，其泄露源代码中包含了针对Android
4.0.x-4.3.x系统版本的浏览器的攻击利用代码，其可以达到远程代码执行，并执行提权代码提升至root权限，最后达到静默安装恶意程序的目的。
该漏洞利用的组合了Google Chrome的三个N-day漏洞和针对Android系统的提权漏洞完成完整的利用攻击过程。
  * **漏洞详情**
该Android浏览器漏洞利用主要因为WebKit中关于XML语言解析和XSLT转换的libxslt库，其利用过程实际上是基于多个漏洞的组合利用过程。其首先利用一个信息泄露漏洞获取内存地址相关信息，并利用内存任意读写构造ROP攻击最终实现执行任意代码的目的。其最后执行提权代码，该漏洞利用中使用的提权漏洞为CVE-2014-3153，其产生于内核的Futex系统调用。当提权获得root权限以后，执行静默安装恶意APK应用。
  * **相关CVE**
Hacking Team的针对Android浏览器的remote2local漏洞利用工具结合了3个针对浏览器的漏洞和2个用于提权的漏洞。  
  * **相关APT** **组织和事件**
该漏洞的相关利用情况没有在历史公开的事件报告中披露过，由于专注于向政府部门及执法机构提供电脑入侵与监视服务的意大利公司Hacking
Team在2015年7月遭受入侵，其内部源代码和相关资料邮件内容被泄露，首次披露了其具有针对该漏洞的完整攻击利用代码。
并且在泄露的邮件中频繁出现该公司向客户说明该漏洞的利用方法和过程。
  * **补丁及解决方案**
Google在发布的Android 4.4系统版本修复了上述问题。
## 总结
**方程式一类的顶尖APT** **组织掌握最先进的漏洞攻击技术**
方程式一类顶尖的APT组织掌握了最先进的漏洞攻击技术，这包括了其对几乎所有互联网相关设施、设备、软件、应用漏洞的全覆盖，而其它APT组织依然钟情于使用客户端软件的漏洞进行钓鱼攻击。
**针对Office** **的漏洞攻击依然是大部分APT** **攻击的焦点**
从使用频率上来看，Office漏洞依然是大部分APT组织最常使用的漏洞，且依然是非常有效的APT攻击入口。
**移动端APT** **攻击逐渐成为新的热点**
移动设备的普及程度和市场占有率的大幅度提升，所以APT组织也开始将针对其目标对象的攻击范围延伸至移动设备领域。在过去针对移动设备攻击的APT活动中，以针对iOS系统的三叉戟漏洞和针对Android系统的Hacking
Team泄露的浏览器攻击利用尤为出众，并揭示了移动定向攻击中也同样具备过去网络攻击中展现的技术高级性特点，也揭示了网络军火商制作和贩卖针对移动平台的网络武器的事实。
## 参考
[1].https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/
[2].https://support.apple.com/zh-cn/HT207107
[3].https://info.lookout.com/rs/051-ESQ-475/images/lookout-pegasus-technical-analysis.pdf
[4].https://github.com/f47h3r/hackingteam_exploits/tree/master/vector-exploit/src/ht-webkit-Android4-src
[5].http://www.freebuf.com/vuls/78594.html
[6].http://www.freebuf.com/vuls/84720.html
[7].https://wikileaks.org/hackingteam/emails/emailid/74975
[8].https://wikileaks.org/hackingteam/emails/emailid/631119
[9].https://security.tencent.com/index.php/blog/msg/87
[10].https://blog.trendmicro.com/trendlabs-security-intelligence/hacking-team-rcsandroid-spying-tool-listens-to-calls-roots-devices-to-get-in/
[11].https://wikileaks.org/ciav7p1/cms/page_11629096.html
[12].https://wikileaks.org/ciav7p1/cms/page_13205587.html
[13].https://www.welivesecurity.com/2017/05/09/sednit-adds-two-zero-day-exploits-using-trumps-attack-syria-decoy/
[14].https://www.mdsec.co.uk/2018/02/adobe-flash-exploitation-then-and-now-from-cve-2015-5119-to-cve-2018-4878/
[15].https://www.fortinet.com/blog/threat-research/the-curious-case-of-the-document-exploiting-an-unknown-vulnerability-part-1.html
[16].https://www.fireeye.com/blog/threat-research/2017/05/eps-processing-zero-days.html
[17].https://www.anquanke.com/post/id/94841
[18].https://www.anquanke.com/post/id/94210
[19].https://www.anquanke.com/post/id/87311
[20].https://www.anquanke.com/post/id/87122
[21].https://ti.360.net/blog/articles/detailed-analysis-of-eternalblue/
[22].https://research.checkpoint.com/eternalblue-everything-know/
[23].https://paper.seebug.org/536/
[24].https://paper.seebug.org/351/
[25].https://github.com/worawit/MS17-010
[26].https://embedi.com/blog/skeleton-closet-ms-office-vulnerability-you-didnt-know-about/
[27]https://bbs.pediy.com/thread-221995.htm
[28]http://www.venustech.com.cn/NewsInfo/4/46670.Html
[29]http://www.freebuf.com/vuls/81868.html
[30]http://www.freebuf.com/vuls/162629.html
[31]http://www.freebuf.com/vuls/112589.html
[32]http://rtf2latex2e.sourceforge.net/MTEF3.html
[33]http://bobao.360.cn/learning/detail/3738.html
[34]http://blog.trendmicro.com/trendlabs-security-intelligence/ms17-010-eternalblue/