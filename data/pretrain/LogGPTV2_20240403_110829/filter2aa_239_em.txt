（代码文件
ObjectToXmlSerializationWOAttributes / Program.cs）：
    private static XmlAttributeOverrides GetInventoryXmlAttributes()
    {
      var inventoryAttributes = new XmlAttributes();
      inventoryAttributes.XmlArrayItems.Add(new XmlArrayItemAttribute("Book",
        typeof(BookProduct)));
      inventoryAttributes.XmlArrayItems.Add(new XmlArrayItemAttribute("Product",
        typeof(Product)));
      var bookIsbnAttributes = new XmlAttributes();
      bookIsbnAttributes.XmlAttribute = new XmlAttributeAttribute("Isbn");
      var productDiscountAttributes = new XmlAttributes();
      productDiscountAttributes.XmlAttribute =
        new XmlAttributeAttribute("Discount");
      var overrides = new XmlAttributeOverrides();
      overrides.Add(typeof(Inventory), "InventoryItems", inventoryAttributes);
      overrides.Add(typeof(BookProduct), "ISBN", bookIsbnAttributes);
      overrides.Add(typeof(Product), "Discount", productDiscountAttributes);
      return overrides;
    }
运行应用程序时，创建的XML内容和以前一样：
        100
        Product Thing
        10
        0
        0
        0
        0
        0
        false
        101
        How To Use Your New Product Thing
        10
        0
        0
        0
        0
        0
        false
  注意： .NET特性类型名通常以Attribute结尾。使用括号应用特性时，这个后
缀可以忽略。如果没有这个后缀，编译器会自动添加。可以用作特性的类直接或间接
派生于基类Attribute。使用括号应用特性XmlElement时，编译器会实例化
XmlElementAttribute类型。使用括号应用属性XmlAttribute时，这种命名会显得尤为突
出。在后台，使用了XmlAttributeAttribute类。编译器如何区分这个类和XmlAttribute？
类XmlAttribute用于从DOM树中读取XML属性，但它不是.NET特性，因为它没有派生
自基类Attribute。特性的更多信息参见第16章。
在反序列化代码中，需要相同的特性重写（代码文件
ObjectToXmlSerializationWOAttributes /Program.cs）：
    public static void DeserializeInventory()
    {
      using (FileStream stream = File.OpenRead(InventoryFileName))
      {
        XmlSerializer serializer = new XmlSerializer(typeof(Inventory),
        GetInventoryXmlAttributes());
        Inventory newInventory = serializer.Deserialize(stream) as Inventory;
        foreach (Product prod in newInventory.InventoryItems)
        {
        WriteLine(prod.ProductName);
        }
      }
    }
System.Xml.XmlSerialization名称空间提供了一个功能非常强大的工具集，可以把对
象序列化到XML中。把对象序列化和反序列化到XML中替代了把对象保存为二进制格
式，因此可以通过XML对对象进行其他处理。这将大大增强设计的灵活性。
27.6 LINQ to XML
处理XML没有足够的可用选项？LINQ to XML是另一个可用的选项。LINQ to XML允
许查询XML代码，其方式类似于查询对象列表和数据库。LINQ to Objects参见第13章，
LINQ to Entities参见第38章。虽然XmlDocument提供的DOM树和XPathNavigator提供的
XPath查询实现了一个基于标准的方法来查询XML数据，而LINQ to XML提供了查询的简
单.NET变体——该变体类似于查询其他数据存储。除了LINQ to Objects提供的方法之外，
LINQ to XML还在System.Xml.Linq名称空间中添加了这个查询的一些XML规范。LINQ to
XML还比基于标准的XmlDocument XML创建方式更容易创建XML内容。
以下部分描述可用于LINQ to XML的对象。
 注意： 
本章的许多示例都使用了Hamlet.xml文件。这个XML文件在
http://metalab. unc.edu/ bosak/xml/eg/shaks200.zip上，以XML文件格式包含莎士比亚的所
有戏剧。
示例代码使用了以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Xml.XDocument
名称空间：
    System
    System.Collections.Generic
    System.Linq
    System.Xml.Linq
    static System.Console
27.6.1 XDocument对象
XDocument对象像XmlDocument一样，也表示XML文档，但它更容易处理。
XDocument对象还和这个名称空间中的其他新对象一起使用，如XNamespace、
XComment、XElement和XAttribute对象。
XDocument对象的一个更重要的成员是Load（）方法：
    XDocument doc = XDocument.Load(HamletFileName);
这个操作会把HamletFileName常量定义的Hamlet.xml文件的内容加载到内存中。还可
以给Load（）方法传递一个TextReader或XmlReader对象。现在就可以以编程方式处理
XML，如下面的代码片段所示，访问根元素的名称，检查根元素是否有特性（代码文件
LinqToXmlSample/Program.cs）：
    XDocument doc = XDocument.Load(HamletFileName);
    WriteLine($"root name: {doc.Root.Name
}");
    WriteLine($"has root attributes? {doc.Root.HasAttributes
}");
输出的结果如下：
    root name: PLAY
    has root attributes? False
另一个重要的成员是Save（）方法，它类似于Load（）方法，可以保存到一个物理磁
盘位置，或一个TextWriter或XmlWriter对象中：
    XDocument doc = XDocument.Load(HamletFileName);
    doc.Save(SaveFileName);
27.6.2 XElement对象
一个常用的对象是Xelement对象。使用这个对象可以轻松地创建包含单个元素的对
象，该对象可以是XML文档本身，也可以只是XML片段。使用Load方法与XElement的方
式类似于使用Load方法和XDocument。例如，下面的例子写入一个XML元素及其相应的
值：
    var company = new XElement("Company", "Microsoft Corporation");
    WriteLine(company);
在创建XElement对象时，可以定义该元素的名称和元素中使用的值。在这个例子
中，元素的名称是, 元素的值是Microsoft Corporation。在控制台应
用程序中运行它，得到的结果如下：
    Microsoft Corporation
还可以使用多个XElement对象创建比较完整的XML文档，如下例所示（代码文件
LinqToXmlSample/Program.cs）：
    public static void CreateXml()
    {
      var company =
        new XElement("Company",
        new XElement("CompanyName", "Microsoft Corporation"),
        new XElement("CompanyAddress",
          new XElement("Address", "One Microsoft Way"),
          new XElement("City", "Redmond"),
          new XElement("Zip", "WA 98052-6399"),
          new XElement("State", "WA"),
          new XElement("Country", "USA")));
      WriteLine(company);
    }
这个API的优点是XML的层次结构用API表示。XElement的第一个实例化给第一个参
数传递字符串“Company”。这个参数的类型是XName，表示XML元素的名称。第二个参
数是另一个XElement。第二个XElement定义了Company的XML子元素。第二个元素
把"CompanyName"定义为XName, "Microsoft Corporation"定义为其值。指定公司地址的
XElement是Company元素的另一个子元素。其后的所有其他XElement对象是
CompanyAddress的直接子对象。构造函数允许将任意数量的对象定义为类型params object
[]。所有这些对象被当作子对象。
运行这个应用程序，得到的结果如下所示。
      Microsoft Corporation
        One Microsoft Way
        Redmond
        WA 98052-6399
        WA
        USA
  注意： XElement构造函数的语法可以轻松地创建层次XML。所以很容易从
LINQ查询中创建XML（把对象树转换为XML），参见本节后面的内容，也可以把一个
XML语法转变为另一个XML语法。
27.6.3 XNamespace对象
XNamespace对象表示XML名称空间，很容易应用于文档中的元素。例如，在前面的
例子中，通过创建XNamespace对象，很容易给根元素应用一个名称空间（代码文件
LinqToXmlSample/Program.cs）：
    public static void WithNamespace()
    {
      XNamespace ns = "http://www.cninnovation.com/samples/2015";
      var company =
        new XElement(ns + "Company
",
        new XElement("CompanyName", "Microsoft Corporation"),
        new XElement("CompanyAddress",
          new XElement("Address", "One Microsoft Way"),
          new XElement("City", "Redmond"),
          new XElement("Zip", "WA 98052-6399"),
          new XElement("State", "WA"),
          new XElement("Country", "USA")));
      WriteLine(company);
    }
在这个例子中，创建了一个XNamespace对象，具体方法是给它赋予
http://www.cninnovation.com/samples/2015的值。之后，就可以在根元素中通过
实例化XElement对象来使用它。
这会生成如下所示的结果。
      Microsoft Corporation
        One Microsoft Way
        Redmond
        WA 98052-6399
        WA
        USA
  注意： XNamespace允许通过给XNamespace分配一个字符串来创建，而不是
使用new运算符，因为这个类实现了字符串中的隐式类型转换操作符。也可以使用+运
算符与XNamespace对象，右边是一个字符串，因为+操作符的一个实现代码返回
XName。操作符重载参见第8章。
除了仅处理根元素之外，还可以把名称空间应用于所有元素，如下例所示（代码文件
LinqToXmlSample/Program.cs）：
    public static void With2Namespace()
    {
      XNamespace ns1 = "http://www.cninnovation.com/samples/2015";
      XNamespace ns2 = "http://www.cninnovation.com/samples/2015/address";
      var company =
        new XElement(ns1 + "Company",
        new XElement(ns2
 + "CompanyName", "Microsoft Corporation"),
        new XElement(ns2
 + "CompanyAddress",
          new XElement(ns2
 + "Address", "One Microsoft Way"),
          new XElement(ns2
 + "City", "Redmond"),
          new XElement(ns2
 + "Zip", "WA 98052-6399"),
          new XElement(ns2
 + "State", "WA"),
          new XElement(ns2
 + "Country", "USA")));
      WriteLine(company);
    }
这会生成如下所示的结果。
        Microsoft Corporation
        One Microsoft Way
        Redmond
        WA 98052-6399
        WA
        USA
在这个例子中，子名称空间应用于指定的所有对象，但、、
和元素除外，因为它们继承自其父对象，而
有名称空间声明。
27.6.4 XComment对象
XComment对象可以轻松地把XML注释添加到XML文档中。下面的例子说明了如何
把一条注释添加到文档的开头和Company元素中（代码文件
LinqToXmlSample/Program.cs）：
    public static void WithComments()
    {
      var doc = new XDocument();
      XComment comment = new XComment("Sample XML for Professional C#.");
      doc.Add(comment);
      var company =
        new XElement("Company",
          new XElement("CompanyName", "Microsoft Corporation"),
          new XComment("A great company"),
          new XElement("CompanyAddress",
          new XElement("Address", "One Microsoft Way"),
          new XElement("City", "Redmond"),
          new XElement("Zip", "WA 98052-6399"),
          new XElement("State", "WA"),
          new XElement("Country", "USA")));
      doc.Add(company);
      WriteLine(doc);
    }
运行应用程序，调用WithComments方法，就可以看到生成的XML注释：
      Microsoft Corporation
        One Microsoft Way
        Redmond
        WA 98052-6399
        WA
        USA
27.6.5 XAttribute对象
除了元素之外，XML的另一个要素是特性。通过XAttribute对象添加和使用特性。下
面的例子说明了给根节点添加一个特性的过程（代码文件
LinqToXmlSample/Program.cs）：
    public static void WithAttributes()
    {
      var company =
        new XElement("Company",
        new XElement("CompanyName", "Microsoft Corporation"),
        new XAttribute("TaxId", "91-1144442"),