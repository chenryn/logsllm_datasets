satisfying d((cid:126)x∗, (cid:126)y) > t∗. Otherwise, the adversary can trivially
win the game by decrypting the challenge ciphertext by itself.
3. GENERIC CONSTRUCTION OF EDE
In this section, we ﬁrst revisit the deﬁnition of inner-product en-
cryption (IPE). Then, we show how to generically and efﬁciently
construct EDE from an IPE with reasonable size of private keys
and ciphertexts.
3.1
An inner-product encryption comprises of the following four algo-
rithms IPE.Setup, IPE.Key, IPE.Enc, IPE.Dec.
Inner-Product Encryption
• The IPE.Setup[λ, n] (setup) algorithm takes as input the se-
curity parameter λ and an integer n. It outputs a master pub-
lic/secret key pair (IPE.mpk, IPE.msk).
• The IPE.Key[(cid:126)z, IPE.msk] (key generation) algorithm takes
as input an n-length vector (cid:126)z = (z1, z2 ,··· , zn) ∈ Σn and
(IPE.mpk, IPE.msk). It outputs a private key IPE.sk(cid:126)z of (cid:126)z.
Here, Σ is the space of all vectors.
• The IPE.Enc[ (cid:126)w, M ] (encryption) algorithm takes as input an
n-length vector (cid:126)w = (w1, w2,··· , wn) ∈ Σn, a message
M and IPE.mpk. It outputs a ciphertext denoted by IPE.CT.
• The IPE.Dec[IPE.CT, IPE.sk(cid:126)z] (decryption) algorithm takes
as input IPE.CT encrypted with (cid:126)w and the private key IPE.sk(cid:126)z
of (cid:126)z. It outputs the message iff the inner product, denoted by
(cid:104) (cid:126)w, (cid:126)z(cid:105), is equal to zero. More precisely, successful decryp-
tion requires (cid:104) (cid:126)w, (cid:126)z(cid:105) = w1z1 + w2z2 + ··· + wnzn = 01.
3.2 Our Generic Construction
Katz, Sahai and Waters [4] proposed a generic vector transfor-
mation to support polynomial equations, which is also suitable for
1More precisely, the inner product considers (cid:104) (cid:126)w, (cid:126)z(cid:105) = 0 mod p,
where p is the order of group.
our EDE construction. However, the generic transformation is not
very efﬁcient due to the long vector transformation. Here, we give
speciﬁc vector transformations based on the formula of Euclidean
distance. We transform n-length vectors (cid:126)x, (cid:126)y into the n + 2-length
vectors (cid:126)w, (cid:126)z, respectively, under the integer l deﬁned as follows.
n(cid:88)
(cid:126)wl = ( x1 , x2 ,
···
, xn , − l +
fix2
i
(cid:126)zl = (−2f1y1,−2f2y2,··· ,−2fnyn, 1 ,
l +
i=1
1 )
fiy2
i ).
,
n(cid:88)
i=1
It is not hard to verify the transformation satisﬁes the relationship
between inner product and distance (cid:104) (cid:126)wl1 , (cid:126)zl2(cid:105) = d((cid:126)x, (cid:126)y) + l2 − l1.
With the above vector transformation, the generic construction
of EDE from an IPE is deﬁned as follows.
Setup. Taking as input the security parameter λ and distance pa-
rameters (n, f1, f2,··· , fn), the setup algorithm runs the algo-
rithm IPE.Setup[λ, n+2] to generate IPE.mpk and IPE.msk. Next,
it chooses an integer k0. The mpk and msk are deﬁned as
mpk = (IPE.mpk, n, f1, f2,··· , fn, k0), msk = IPE.msk.
KeyGen. The key generation algorithm takes as input an n-length
vector (cid:126)y = (y1, y2, ··· , yn) and the master secret key msk. It runs
the algorithm IPE.Key[(cid:126)zl, IPE.msk] : l = 0, 1, 2,··· , k0. The pri-
vate key sk(cid:126)y of (cid:126)y is sk(cid:126)y =
Encryption. The encryption algorithm takes as input the master
public key mpk, an n-length vector (cid:126)x, a threshold value t and a
(cid:101) (the minimum integer not less than
message M. Let l0 = (cid:100) t
). It runs the algorithm IPE.CTl = IPE.Enc[ (cid:126)wl, M ] for l =
k0, 2k0,··· , (l0 − 1)k0, t. The ciphertext encrypted with ((cid:126)x, t) is
IPE.sk(cid:126)zl : l = 0, 1, 2,··· , k0
(cid:110)
(cid:111)
t
k0
k0
.
CT =
IPE.CTl : l = k0, 2k0,··· , (l0 − 1)k0, t
.
(cid:110)
(cid:111)
Decryption. The decryption takes as input a ciphertext CT for
((cid:126)x, t), the master public key mpk and the private key sk(cid:126)y of (cid:126)y.
If d((cid:126)x, (cid:126)y) = j > t, it simply returns the symbol ⊥. Otherwise,
suppose (i− 1)· k0 ≤ j  t
and the IPE scheme is secure, because for all l1 ≤ t and l2 ≥ 0
(cid:104) (cid:126)wl1 , (cid:126)zl2(cid:105) = d((cid:126)x, (cid:126)y) + l2 − l1 > 0 and then (cid:104) (cid:126)wl1 , (cid:126)zl2(cid:105) (cid:54)= 0.
k0
4. NEW IPE WITH SHORT PRIVATE KEYS
In this section, we propose a new IPE with the shortest private
key compared to existing IPE schemes in the literature. It can be
adopted to reduce to the private key size of EDE scheme.
IPE.Setup: The setup algorithm takes as input a security param-
eter λ and an integer n to denote the length of vector.
It ﬁrst
chooses a pairing group PG = (G, GT , g, p, e). The algorithm
then chooses random αi, β from Zp for all i = 1, 2,··· , n. Fi-
nally, for all i = 1, 2,··· , n, it computes group elements gi = gαi
and u = e(g, g)β. The IPE.mpk and IPE.msk are deﬁned as:
IPE.msk = (α1, α2,··· , αn, β).
IPE.mpk = (PG, gi, u),
IPE.Key: The key generation algorithm takes as input an n-length
vector (cid:126)z = (z1, z2,··· , zn) ∈ Zn
p and the master public/secret
key pair (IPE.mpk, IPE.msk). The algorithm randomly chooses
t ∈ Zp and computes the private key IPE.sk(cid:126)z as follows.
gβ+t(cid:80)n
IPE.Enc: The encryption algorithm takes as input an n-length vec-
tor (cid:126)w = (w1, w2,··· , wn) ∈ Zn
p , a message M ∈ GT and the
master public key IPE.mpk. It chooses random r, s from Zp and
creates the ciphertext as follows.
ur · M, gr, gr
i=1 αizi , gt(cid:17) ∈ G × G.
IPE.sk(cid:126)z =
IPE.CT =
1gsw1 , gr
(cid:16)
(cid:16)
.
2gsw2 ,
··· , gr
ngswn(cid:17)
i=1 αizi , C0)−1e(gt, (cid:81)n
IPE.Dec: Suppose that IPE.CT = (Cm, C0, C1,··· , Cn) is a
ciphertext encrypted with (cid:126)w and we have a private key IPE.sk(cid:126)z
message by M = Cm·e(gβ+t(cid:80)n
for (cid:126)z satisfying (cid:104) (cid:126)w, (cid:126)z(cid:105) = 0. The decryption algorithm decrypts the
i=1 C zi
i ).
The proposed IPE is provably secure in the selective security
model with payload property under the DBDH assumption (given
g, ga, gb, gc, Z, to decide whether Z is equal to e(g, g)abc or not).
1 ,··· , w∗
The sketch of proof is described as follows. Let (cid:126)w∗ = (w∗
n)
be the challenge vector. Randomly choose η, ηi ∈ Zp and set
αi = −ηw∗
i b + ηi, β = bc. Subsequently, we can simulate the
IPE.mpk. For a private key query on (cid:126)z satisfying (cid:104) (cid:126)w∗, (cid:126)z(cid:105) (cid:54)= 0, set
(cid:104) (cid:126)w∗,(cid:126)z(cid:105)η c + t(cid:48) where t(cid:48) is a random number. Hence, we can
t as t =
simulate the private key of (cid:126)z. In the challenge ciphertext, we set
r = a and s = η · ab, where ur contains e(g, g)abc and we embed
Z into it. If Z = e(g, g)abc, we have simulated a valid challenge
ciphertext. Otherwise, it is a one-time encryption such that we can
use the guess of the adversary to solve the hard problem.
5. CONCLUSION
1
We introduced the notion of Euclidean distance based encryp-
tion (EDE). The primary motivation of proposing this encryption
notion is to bridge the gap between biometric based encryption and
pattern recognition. We proposed a generic construction of EDE
from IPE with reasonable size of private keys and ciphertexts. We
also proposed a new IPE with the shortest private key composed of
two group elements only, for the need of short EDE keys. We note
that our new IPE is of an independent interest.
6. REFERENCES
[1] A. K. Jain and D. Maltoni, Handbook of Fingerprint
Recognition. Secaucus, NJ, USA: Springer-Verlag New
York, Inc., 2003.
[2] A. Sahai and B. Waters, “Fuzzy identity-based encryption,” in
EUROCRYPT 2005, ser. LNCS, vol. 3494. Springer, 2005,
pp. 457–473.
[3] T. Okamoto and K. Takashima, “Achieving short ciphertexts
or short secret-keys for adaptively secure general
inner-product encryption,” in CANS 2011, ser. LNCS,
Springer, 2011, pp. 138–159.
[4] J. Katz, A. Sahai, and B. Waters, “Predicate encryption
supporting disjunctions, polynomial equations, and inner
products,” in EUROCRYPT 2008, ser. LNCS, vol. 4965.
Springer, 2008, pp. 146–162.