一般情况下不区分大小写。当然，这一定论不适用于那些区分大小写的
、MIN()和MAX(）。
、=、
：因此，_bin 的排序规则名里不包括语言名，如latinl_bin 和
latinl
latinl
latin1
big5
big5
Charset
latinl
latin
latinl
latinl
latinl
、>和LIKE。
<>‘ABC"），但这只是因为同一个字符的大写和
Id
二进制串其实没有大小写的概念。区分大小写是
，也就是说，
=+
6
8
84
8
1DefaultICompiled| Sortlen
Yes
ucs2_general_ci
：每种排序规则都捆绑在某个特定的字符
，比较操作是基于数字字符编码值进行
Yes
Yes
Yes
1
32
和
---
## Page 153
串是不一样的。
节字符的字符串来说，这两个值是不一样的：
那么长度的单位是字符。如果用LENGTH（）函数来测量，那么长度的单位是字节。对包含有多字
字符串‘ABCD'中的每个字符转换为相应的ucs2字符，结果为包含4个字符的ucs2字符串。
使用了ucs2双字节字符集：
个新的字符串。通过下面的示例可以看出字符集引导符和CONVERT（）函数之间的区别，它们都
一些空格)。而
串的值（不过，对于多字节字符集，当该字符串包含的字节数不足时，它可能会在其尾部增加
不过，可以使用CONVERT（）函数将任意字符串转换为另一种指字符集形式的字符串：
紧跟一个引号形式的字符串，其间不能有任何空白。
式给出的字符串，这个空白是必需的。
例演示的是如何将字符串解释为latin2或utf8字符集：
introducer)。紧跟引导符后面的字符串，既可以用引号形式，也可以是一个十六进制值。下面示
其中，charset 是某种被支持的字符集名。
所示：
这里还有一个更容易让人迷糊的问题，即二进制串与使用某种二进制排序规则的非二进制
字符串的“长度”如何定义？这要视具体情况而定。如果用CHAR_LENGTH（）函数来测量，
引导符记法可用于引号形式的字符串或十六进制常量，但不能用于字符串表达式或列值。
口使用了二进制排序规则的非二进制串，会被解释成字符，并且比较的是它们的数字字
口二进制串没有字符集的概念。它会被解释成字节，并且比较的是单字节的数字代码。
mySql> SELECT CHAR_LENGTH(@s1),LENGTH(@s1),CHAR_LENGTH(@s2),LENGTH(@s2);
假设当前字符集为latin1（一种单字节字符集)。
mysql> SET @s1 = _ucs2 'ABCD';
引导符和CONVERT（）函数是不一样的。引导符只会改变对字符串的解释，并不会改变字符
CONVERT(str USING charset);
第二种记法是N'str"，它等价于_utf8'str'。请注意，在N（不区分大小写）的后面必须
对于引号里的字符串，字符集引导符和字符串之间的空白是可选的。对于以十六进制值形
_latin2'abc'
有两种记法约定可用于将某个字符串常量强制解释为某种指定的字符集。第一种记法如下
_utf8 0x646566
_utf8x'646566
_latin2
CHAR_LENGTH(@s1)ILENGTH(@s1)ICHAR_LENGTH(@s2)
binary
CHARSET(X0123')ICOLLATION(X'0123')
'def
X'616263
市CONVERT（）函数则是以某个字符串作为输入参数，并根据给定的字符集生成一
Ibinary
_charset记法称为字符集引导符（character set
|LENGTH(@s2)
3.1数据值类别
133
---
## Page 154
3.1.2.2字符集相关的系统变量
集有关，其余的与排序规则有关。每个排序规则变量都有一个相应的字符集变量与之相连。
UPPER（）或LOWER（）之类的函数，那么必须先把它转换为非二进制串：
念，因而无从得知哪些字节值对应着大写或小写字符。如果需要把某个二进制串传递给诸女
函数：
建一个二进制串和一个使用了某种二进制排序规则的非二进制串，然后把它们传递给UPPER（）
134
MySQL服务器有几个系统变量，它们涉及字符集支持的各个方面。其中大部分变量与字符
口 character_set_filesystem 表示的是文件系统字符集。MySQL会用它来解释在 SQL
有些字符集变量表示的是服务器或当前数据库的属性。
mySql> SELECT @s1, UPPER(CONVERT(@s1 USING latin1));
UPPER（）函数为何没有把二进制串转换为大写呢？这是因为二进制串没有任何字符集的概
mysql> SET @s1 = BINARY 'abcd';
通过下面这个示例，我们可以看到二进制串和非二进制串在大小写方面的区别。它会先创
口character_set_connection 是服务器使用的变量。当服务器接收到来自客户端的语
其他的字符集变量将影响客户和服务器之间通信。
口 character_set_database 和 collation_database 分别表示默认数据库的字符集和
character_set_server和collation_server 分别表示服务器的默认字符集和排
口 character_set_system 表示的是用于存储标识符的字符集。这始终为 utf8。
口
@s11UPPER(CONVERT(@s1 USING latin1）)
|UPPER(@S1)|UPPER(@s2)
character_set_client 表示的是客户端向服务器发送 SQL语句时使用的字符集。
序规则。
abcdIABCD
abcd
Au
ysql> SET @s2=
语句（如LOAD DATA语句）里代表文件名的文字串。在该文件被打开之前，其文件名
所有文字串，如果它由字符集引导符引导，那么它会使用该字符集引导符所表示的字
变量便会发挥作用。这时，表的默认设置将会沿用数据库的默认设置。
序规则。当你创建某个表时，如果没有明确地为其指定字符集和排序规则，那么这些
将它们设置好。如果没有默认数据库，那么它们会被设置为服务器的默认字符集和排
排序规则。这两个变量都是只读的，每当你选择一个默认数据库时，服务器都会自动
符值，这种值通常是基于每个字符多个字节算出的。
collation_connection 适用于语句字符串里的两个文字串值之间的比较。
符集来进行解释。）
connection,
句字符串时，
说的“结果”
第3章
数据类型
IABCD
，并使用后者的字符集来处理该语句。（这里有个例外，即对于语句里的
包括数据值和诸如列名之类的元数据。
会将该字符串从character_set_client 转换为character_set_
_latin1 'abcd COLLATE latin1_bin;
UPPER(@S2);
如
---
## Page 155
如下。
排序规则会受到类似下面那样的影响：
并进行相应的调整。例如，如果将 LC_ALL 设置为 en_US.UTF-8，那么文字量的默认字符集和
法。将环境变量LANG 或LC_ALL设置成指定某一个语言区域，然后这些客户端会检测这些变量，
语句相同的效果，达到将你所用通信字符集通知服务器的目的。
语句是等效的：
变量。例如，想要使用utf8字符集，则需要更改3个变量：
面的输出即表明：客户端和服务器之间使用了latin1字符集来进行通信。
对于像 mysql和 mysqladmin 这种标准的 MySQL 客户端程序，甚至还有一种更简单的方
口在设置字符集变量的同时，也会将相关的排序规则变量设置为该新字符集默认的排序
对于那些成对出现的变量（一个字符集变量和一个排序规则变量)，它们之间的影响关系
口在设置排序规则变量的同时，也会将相关的字符集变量设置为该新排序规则名的第一
mySql> SELECT CHARSET('abcd'),COLLATION('abcd'）;
在设置与通信有关的字符集时会有一个限制,即不能使用ucs2、utf16、utf16le或utf32。
不过，使用 SET NAMES 语句可以更方便地达到同样的效果。下面这条语句与上面的3条 SET
mysql> sET character_set_client = utf8;
如果某个客户端想使用另一种字符集来与服务器进行通信，那么它需要修改与通信有关的
mysql> SHOW VARIABLES LIKE 'collation\_%';
mysql> SHOW VARIABLES LIKE'character\_set\_%;
很可能你会发现，绝大多数字符集和排序规则变量都被默认设置成了相同的值。例如，
有许多客户端租
mysql> SET NAMES 'utf8';
mysql> SET
utf8
Variable_name
Variable_name
规则。
collation_server
collation_database
collation_connection
character_set_filesystem
character_set_database
character_set_client
默认值为binary（即不进行转换），
字符串会从 character_set_client 转换为 character_set_filesystem。此变量的
character_set_connection = utf8;
程序都支持--default-character-set选项，此选项可以获得与 SETNAMES
utf8_general_ci
IValue
latinl_swedish_ci
latinl_swedish_ci
latinl_swedish_ci
1Value
utf8
binary
latinl
latinl
latinl
latinl
3.1数据值类别
135
下
---
## Page 156
分大小写）当作NULL：
否为 NULL。但不能对NULL 进行算术运算。如果用它进行算术运算，那么结果将是 NULL。此外，
有
“不适用”和“不在其中”等。可以将NULL值插到表中，从表里检索它们，以及测试某个值是
3.1.6
3.1.5
面语句利用其文本表示形式，创建了一个POINT类型，并把结果赋值给了一个自定义变量
实现。关于这些规范的更多信息，可以在“OpenGeospatialConsortium”的官网
一功能让我们可以直接表示像点、线和多边形这样的值。这些类型都是每一个OpenGIS 规范的
3.1.4
个小数点和多达6位数字（微秒）的精度，如＇12：30：15.000045＇或+2008-06-1510:30：12.5′。
使用STR_TO_DATE（)函数来进行转换。具体示例请参考3.2.6节。
函数，按任意方式来显示日期值，但默认显示格式是先显示年。对于其他格式的输入值，需要
“ISO8601”格式），但还是会有很多MySQL初学者对此感到不习惯。可以利用DATE_FORMAT（）
间合并在一起的值，如'2012-06-1712:30:43′。需要特别注意的是，MySQL是按“年-月-
3.1.3时态（日期/时间）值
2008-12-31T12:00:00'。
日
136
有许多函数，在你使用NULL或非法参数调用它们时，也会返回NULL。
NULL是一种“没有类型的”值。它通常用来表示“无值”、“未知值”、
1”的顺序来表示日期的，并且输入值也必须是这样的顺序。虽然这是标准的SQL格式（也叫
在书写关键字NULL时，不需要加引号，也不用区分大小写。MySQL还会把单独的\N（区
MySQL支持空间值，不过仅限于InnoDB、MyISAM、NDB和ARCHIVE这几种引擎。这
时间值或日期时间组合值的语法还支持在时间后面紧跟一个小数形式的秒，其中包含有一
对于组合后的日期时间值，允许在日期和时间之间加一个字符“T”，但不能用空格，如
布尔常量TRUE和FALSE 将分别被当作1和0。它们不区分大小写。
在表达式里，零会被当成假，任何非零、非NULL的值会被当成真。
本书只涉及了很少的空间值应用。关于这些类型的更多信息请参考MySQL参考手册。
时态值包括日期值或时间值，如+2012-06-17＇或'12:30：43'。MySQL也支持将日期和时
mySql> SELECT \N,ISNULL(\N）;
SET@pt=POINTFROMTEXT(POINT（1020)·）;
例如,当把character_set_connection变量设置为utf8时,会将collation_connection
NULLI
NULLIISNULL(\N)
5布尔值
NULL值
空间值
部分所暗示的那个字符集。
第3章数据类型
1
、“缺失值”、“超界”
---
## Page 157
行模式匹配。(事实上，数字类型也支持模式匹配，只不过字符串类型的模式匹配更为常见一点。)
于表示图像和声音的二进制数据。字符串可以按照大小写进行比较。此外，还可以对字符串进
有序的整数或浮点值。在你需要一组唯一标识编号的时候，可以使用它。
的数类型可以带有正负号，也可以不带正负号。有一种特殊的属性，它可以让列自动生成一组
3.2.1
必不可少。
型的最大显示宽度(M)是可选的。反之，对于VARCHAR(M)，这种没有方括号的，表示(M)
展示其规范。其中，方括号([1)表示可选信息。例如，语法 MEDIUMINT【(M)］表示的是该类
特
何对待那些值。例如，你既可以把数值存储在一个数字列里，也可以把它们存储在一个字符串列
3.2
点，如取值范围和存储要求。我们将以各种数据类型在CREATETABLE语句里的用法为例，
表3-3显示的是MySQL的字符串数据类型。字符串可以容纳任何内容，甚至能容纳那些用