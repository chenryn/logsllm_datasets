框架为管理员提供了不同的选项来调试规则，并在数据包匹配时提供不同的选项。本节描述了这些选项。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#creating-a-rule-with-a-counter_debugging-nftables-rules}创建带有计数器的规则 {.title}
:::
在识别规则是否匹配时，可以使用计数器。本节描述了如何创建带有计数器的新规则。
::: itemizedlist
-   [有关在现有规则中添加计数器的步骤的更多信息，请参阅在现有规则中添加计数器](#getting-started-with-nftables_configuring-and-managing-networking.html#adding-a-counter-to-an-existing-rule_debugging-nftables-rules "在现有规则中添加计数器"){.link}。
:::
::: itemizedlist
**先决条件**
-   您要添加该规则的链已存在。
:::
::: orderedlist
**流程**
1.  在链中添加使用 `counter`{.literal}
    参数的新规则。以下示例添加一个带有计数器的规则，它允许端口 22 上的
    TCP 流量，并计算与这个规则匹配的数据包和网络数据的数量：
    ``` literallayout
    # nft add rule inet example_table example_chain tcp dport 22 counter accept
    ```
2.  显示计数器值：
    ``` literallayout
    # nft list ruleset
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport ssh counter packets 6872 bytes 105448565 accept
      }
    }
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#adding-a-counter-to-an-existing-rule_debugging-nftables-rules}在现有规则中添加计数器 {.title}
:::
在识别规则是否匹配时，可以使用计数器。本节论述了如何在现有规则中添加计数器。
::: itemizedlist
-   [有关使用计数器添加新规则的步骤的更多信息，请参阅使用计数器创建规则。](#getting-started-with-nftables_configuring-and-managing-networking.html#creating-a-rule-with-a-counter_debugging-nftables-rules "创建带有计数器的规则"){.link}
:::
::: itemizedlist
**先决条件**
-   您要添加计数器的规则已存在。
:::
::: orderedlist
**流程**
1.  在链中显示规则及其句柄：
    ``` literallayout
    # nft --handle list chain inet example_table example_chain
    table inet example_table {
      chain example_chain { # handle 1
        type filter hook input priority filter; policy accept;
        tcp dport ssh accept # handle 4
      }
    }
    ```
2.  通过替换规则而不是使用 `counter`{.literal}
    参数来添加计数器。以下示例替换了上一步中显示的规则并添加计数器：
    ``` literallayout
    # nft replace rule inet example_table example_chain handle 4 tcp dport 22 counter accept
    ```
3.  显示计数器值：
    ``` literallayout
    # nft list ruleset
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport ssh counter packets 6872 bytes 105448565 accept
      }
    }
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#monitoring-packets-that-match-an-existing-rule_debugging-nftables-rules}监控与现有规则匹配的数据包 {.title}
:::
`nftables`{.literal} 中的追踪功能与 `nft monitor`{.literal}
命令相结合，可让管理员显示与规则匹配的数据包。该流程描述了如何为规则启用追踪以及与本规则匹配的监控数据包。
::: itemizedlist
**先决条件**
-   您要添加计数器的规则已存在。
:::
::: orderedlist
**流程**
1.  在链中显示规则及其句柄：
    ``` literallayout
    # nft --handle list chain inet example_table example_chain
    table inet example_table {
      chain example_chain { # handle 1
        type filter hook input priority filter; policy accept;
        tcp dport ssh accept # handle 4
      }
    }
    ```
2.  通过替换规则而不是使用 `meta nftrace set 1`{.literal}
    参数来添加追踪功能。以下示例替换了上一步中显示的规则并启用追踪：
    ``` literallayout
    # nft replace rule inet example_table example_chain handle 4 tcp dport 22 meta nftrace set 1 accept
    ```
3.  使用 `nft monitor`{.literal}
    命令显示追踪。以下示例过滤命令的输出，仅显示包含
    `inet example_table example_chain`{.literal} 的条目：
    ``` literallayout
    # nft monitor | grep "inet example_table example_chain"
    trace id 3c5eb15e inet example_table example_chain packet: iif "enp1s0" ether saddr 52:54:00:17:ff:e4 ether daddr 52:54:00:72:2f:6e ip saddr 192.0.2.1 ip daddr 192.0.2.2 ip dscp cs0 ip ecn not-ect ip ttl 64 ip id 49710 ip protocol tcp ip length 60 tcp sport 56728 tcp dport ssh tcp flags == syn tcp window 64240
    trace id 3c5eb15e inet example_table example_chain rule tcp dport ssh nftrace set 1 accept (verdict accept)
    ...
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    根据启用追踪的规则数量以及匹配的流量数量，`nft monitor`{.literal}
    命令可能会产生大量输出。使用 `grep`{.literal}
    或者其他实用程序过滤输出。
    :::
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#backing-up-and-restoring-the-nftables-rule-set_getting-started-with-nftables}备份和恢复 nftables 规则集 {.title}
:::
这部分论述了如何将 `nftables`{.literal}
规则备份到文件，以及从文件中恢复规则。
管理员可以使用具有规则的文件将规则传送到不同的服务器。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#backing-up-the-nftables-rule-set-to-a-file_backing-up-and-restoring-the-nftables-rule-set}将 nftables 规则设置为文件 {.title}
:::
本节论述了如何将 `nftables`{.literal} 规则集备份到文件中。
::: itemizedlist
**流程**
-   备份 `nftables`{.literal} 规则：
    ::: itemizedlist
    -   `nft list ruleset`{.literal} 格式：
        ``` literallayout
        # nft list ruleset > file.nft
        ```
    -   JSON 格式：
        ``` literallayout
        # nft -j list ruleset > file.json
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#restoring-the-nftables-rule-set-from-a-file_backing-up-and-restoring-the-nftables-rule-set}从文件中恢复 nftables 规则集 {.title}
:::
本节论述了如何恢复 `nftables`{.literal} 规则集。
::: itemizedlist
**流程**
-   恢复 `nftables`{.literal} 规则：
    ::: itemizedlist
    -   如果要恢复的文件为 `nft list ruleset`{.literal} 格式或包含
        `nft`{.literal} 命令：
        ``` literallayout
        # nft -f file.nft
        ```
    -   如果要恢复的文件采用 JSON 格式：
        ``` literallayout
        # nft -j -f file.json
        ```
    :::
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#additional_resources_6}其它资源 {.title}
:::
::: itemizedlist
-   [在 Red Hat Enterprise Linux 8 中使用
    nftables](https://www.redhat.com/en/blog/using-nftables-red-hat-enterprise-linux-8){.link}博客页面提供了使用
    `nftables`{.literal} 功能的概述。
-   [iptables 之后会发生什么？Its successor, of course:
    nftables](https://developers.redhat.com/blog/2016/10/28/what-comes-after-iptables-its-successor-of-course-nftables/){.link}
    文章解释了为什么用 `nftables`{.literal} 替换 `iptables`{.literal}。
-   [Firewalld: The Future is
    nftables](https://developers.redhat.com/blog/2018/08/10/firewalld-the-future-is-nftables/){.link}
    提供了关于使用 `nftables`{.literal} 替换 `firewalld`{.literal}
    作为默认后端的信息。
:::
:::
:::
[]{#using-xdp-filter-for-high-performance-traffic-filtering-to-prevent-ddos-attacks_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#using-xdp-filter-for-high-performance-traffic-filtering-to-prevent-ddos-attacks_configuring-and-managing-networking.html#using-xdp-filter-for-high-performance-traffic-filtering-to-prevent-ddos-attacks_configuring-and-managing-networking}第 48 章 使用 xdp-filter 进行高性能流量过滤以防止 DDoS 攻击 {.title}
:::
与数据包过滤器（如 `nftables`{.literal}）相比，Express Data
Path（XDP）在网络接口上处理并丢弃网络数据包。因此，XDP
在到达防火墙或其他应用程序前决定了软件包的下一步。因此，XDP
过滤器需要较少的资源，并可处理比传统数据包过滤器更高的网络数据包，从而防止分布式拒绝服务(DDoS)攻击。例如，在测试过程中，红帽在单一内核中每秒丢弃了两千六百万（26
million）网络数据包，这比同一硬件中 `nftables`{.literal}
的丢弃率要高得多。
`xdp-filter`{.literal} 工具允许或使用 XDP
丢弃传入的网络数据包。您可以创建规则来过滤与特定对象或特定命令的流量：
::: itemizedlist
-   IP 地址
-   MAC 地址
-   端口
:::
请注意，即使 `xdp-filter`{.literal}
具有明显更高的数据包处理速率，但它的功能与 `nftables`{.literal}
相同。`xdp-filter`{.literal} 是一个概念性的工具，用来演示使用 XDP
进行数据包过滤。另外，您可以使用工具代码来更好地了解如何编写您自己的 XDP
应用程序。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在 AMD 和 Intel 64 位以外的构架中，`xdp-filter`{.literal}
工具只作为技术预览提供。红帽产品服务级别协议（SLA）不支持技术预览功能，且其功能可能并不完善，因此红帽不建议在生产环境中使用它们。这些预览可让用户早期访问将来的产品功能，让用户在开发过程中测试并提供反馈意见。
如需有关
[技术预览功能支持范围](https://access.redhat.com/support/offerings/techpreview){.link}
的信息，请参阅红帽客户门户网站中的技术预览功能支持范围。
:::
::: section
::: titlepage
# []{#using-xdp-filter-for-high-performance-traffic-filtering-to-prevent-ddos-attacks_configuring-and-managing-networking.html#dropping-network-packets-that-match-an-xdp-filter-rule_using-xdp-filter-for-high-performance-traffic-filtering-to-prevent-ddos-attacks}丢弃与 xdp-filter 规则匹配的网络数据包 {.title}
:::
这部分论述了如何使用 `xdp-filter`{.literal} 丢弃网络数据包：
::: itemizedlist
-   到特定目的地端口
-   从一个指定的 IP 地址
-   从一个指定的 MAC 地址
:::
`xdp-filter`{.literal} 的 `allow`{.literal}
策略定义允许所有流量，过滤器只丢弃与特定规则匹配的网络数据包。例如，如果您知道要丢弃的数据包的源
IP 地址，请使用这个方法。
::: itemizedlist
**先决条件**
-   已安装 `xdp-tools`{.literal} 软件包。
-   支持 XDP 程序的网络驱动程序。
:::
::: orderedlist
**流程**
1.  加载 `xdp-filter`{.literal} 来处理特定接口上传入的数据包，如
    `enp1s0`{.literal}：
    ``` literallayout
    # xdp-filter load enp1s0
    ```
    默认情况下，`xdp-filter`{.literal} 使用 `allow`{.literal}
    策略，实用程序只丢弃与任何规则匹配的流量。
    另外，使用 `-f feature`{.literal} 选项只启用特定功能，如
    `tcp`{.literal}、`ipv4`{.literal} 或
    `ethernet`{.literal}。仅加载所需的功能（而不是全部）可提高软件包处理的速度。要启用多个功能，使用逗号分隔它们。
    如果该命令出错，则网络驱动程序不支持 XDP 程序。
2.  添加规则来丢弃与它们匹配的数据包。例如：
    ::: itemizedlist
    -   要将传入的数据包放到端口 `22`{.literal}，请输入：