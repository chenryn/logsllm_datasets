.ir slab ,
that might be reclaimed, such as caches.
.tp
.ir sunreclaim " %lu (since linux 2.6.19)"
part of
.ir slab ,
that cannot be reclaimed on memory pressure.
.tp
.ir kernelstack " %lu (since linux 2.6.32)"
amount of memory allocated to kernel stacks.
.tp
.ir pagetables " %lu (since linux 2.6.18)"
amount of memory dedicated to the lowest level of page tables.
.tp
.ir quicklists " %lu (since linux 2.6.27)"
(\fbconfig_quicklist\fp is required.)
[to be documented.]
.tp
.ir nfs_unstable " %lu (since linux 2.6.18)"
nfs pages sent to the server, but not yet committed to stable storage.
.tp
.ir bounce " %lu (since linux 2.6.18)"
memory used for block device "bounce buffers".
.tp
.ir writebacktmp " %lu (since linux 2.6.26)"
memory used by fuse for temporary writeback buffers.
.tp
.ir commitlimit " %lu (since linux 2.6.10)"
this is the total amount of memory currently available to
be allocated on the system, expressed in kilobytes.
this limit is adhered to
only if strict overcommit accounting is enabled (mode 2 in
.ir /proc/sys/vm/overcommit_memory ).
the limit is calculated according to the formula described under
.ir /proc/sys/vm/overcommit_memory .
for further details, see the kernel source file
.ir documentation/vm/overcommit\-accounting.rst .
.tp
.ir committed_as " %lu"
the amount of memory presently allocated on the system.
the committed memory is a sum of all of the memory which
has been allocated by processes, even if it has not been
"used" by them as of yet.
a process which allocates 1 gb of memory (using
.br malloc (3)
or similar), but touches only 300 mb of that memory will show up
as using only 300 mb of memory even if it has the address space
allocated for the entire 1 gb.
.ip
this 1 gb is memory which has been "committed" to by the vm
and can be used at any time by the allocating application.
with strict overcommit enabled on the system (mode 2 in
.ir /proc/sys/vm/overcommit_memory ),
allocations which would exceed the
.i commitlimit
will not be permitted.
this is useful if one needs to guarantee that processes will not
fail due to lack of memory once that memory has been successfully allocated.
.tp
.ir vmalloctotal " %lu"
total size of vmalloc memory area.
.tp
.ir vmallocused " %lu"
amount of vmalloc area which is used.
since linux 4.4,
.\" commit a5ad88ce8c7fae7ddc72ee49a11a75aa837788e0
this field is no longer calculated, and is hard coded as 0.
see
.ir /proc/vmallocinfo .
.tp
.ir vmallocchunk " %lu"
largest contiguous block of vmalloc area which is free.
since linux 4.4,
.\" commit a5ad88ce8c7fae7ddc72ee49a11a75aa837788e0
this field is no longer calculated and is hard coded as 0.
see
.ir /proc/vmallocinfo .
.tp
.ir hardwarecorrupted " %lu (since linux 2.6.32)"
(\fbconfig_memory_failure\fp is required.)
[to be documented.]
.tp
.ir lazyfree " %lu (since linux 4.12)"
shows the amount of memory marked by
.br madvise (2)
.br madv_free .
.tp
.ir anonhugepages " %lu (since linux 2.6.38)"
(\fbconfig_transparent_hugepage\fp is required.)
non-file backed huge pages mapped into user-space page tables.
.tp
.ir shmemhugepages " %lu (since linux 4.8)"
(\fbconfig_transparent_hugepage\fp is required.)
memory used by shared memory (shmem) and
.br tmpfs (5)
allocated with huge pages.
.tp
.ir shmempmdmapped " %lu (since linux 4.8)"
(\fbconfig_transparent_hugepage\fp is required.)
shared memory mapped into user space with huge pages.
.tp
.ir cmatotal " %lu (since linux 3.1)"
total cma (contiguous memory allocator) pages.
(\fbconfig_cma\fp is required.)
.tp
.ir cmafree " %lu (since linux 3.1)"
free cma (contiguous memory allocator) pages.
(\fbconfig_cma\fp is required.)
.tp
.ir hugepages_total " %lu"
(\fbconfig_hugetlb_page\fp is required.)
the size of the pool of huge pages.
.tp
.ir hugepages_free " %lu"
(\fbconfig_hugetlb_page\fp is required.)
the number of huge pages in the pool that are not yet allocated.
.tp
.ir hugepages_rsvd " %lu (since linux 2.6.17)"
(\fbconfig_hugetlb_page\fp is required.)
this is the number of huge pages for
which a commitment to allocate from the pool has been made,
but no allocation has yet been made.
these reserved huge pages
guarantee that an application will be able to allocate a
huge page from the pool of huge pages at fault time.
.tp
.ir hugepages_surp " %lu (since linux 2.6.24)"
(\fbconfig_hugetlb_page\fp is required.)
this is the number of huge pages in
the pool above the value in
.ir /proc/sys/vm/nr_hugepages .
the maximum number of surplus huge pages is controlled by
.ir /proc/sys/vm/nr_overcommit_hugepages .
.tp
.ir hugepagesize " %lu"
(\fbconfig_hugetlb_page\fp is required.)
the size of huge pages.
.tp
.ir directmap4k " %lu (since linux 2.6.27)"
number of bytes of ram linearly mapped by kernel in 4 kb pages.
(x86.)
.tp
.ir directmap4m " %lu (since linux 2.6.27)"
number of bytes of ram linearly mapped by kernel in 4 mb pages.
(x86 with
.br config_x86_64
or
.br config_x86_pae
enabled.)
.tp
.ir directmap2m " %lu (since linux 2.6.27)"
number of bytes of ram linearly mapped by kernel in 2 mb pages.
(x86 with neither
.br config_x86_64
nor
.br config_x86_pae
enabled.)
.tp
.ir directmap1g " %lu (since linux 2.6.27)"
(x86 with
.br config_x86_64
and
.b config_x86_direct_gbpages
enabled.)
.re
.tp
.i /proc/modules
a text list of the modules that have been loaded by the system.
see also
.br lsmod (8).
.tp
.i /proc/mounts
before kernel 2.4.19, this file was a list
of all the filesystems currently mounted on the system.
with the introduction of per-process mount namespaces in linux 2.4.19 (see
.br mount_namespaces (7)),
this file became a link to
.ir /proc/self/mounts ,
which lists the mounts of the process's own mount namespace.
the format of this file is documented in
.br fstab (5).
.tp
.i /proc/mtrr
memory type range registers.
see the linux kernel source file
.i documentation/x86/mtrr.txt
.\" commit 7225e75144b9718cbbe1820d9c011c809d5773fd
(or
.i documentation/mtrr.txt
before linux 2.6.28)
for details.
.tp
.i /proc/net
this directory contains various files and subdirectories containing
information about the networking layer.
the files contain ascii structures and are,
therefore, readable with
.br cat (1).
however, the standard
.br netstat (8)
suite provides much cleaner access to these files.
.ip
with the advent of network namespaces,
various information relating to the network stack is virtualized (see
.br network_namespaces (7)).
thus, since linux 2.6.25,
.\" commit e9720acd728a46cb40daa52c99a979f7c4ff195c
.ir /proc/net
is a symbolic link to the directory
.ir /proc/self/net ,
which contains the same files and directories as listed below.
however, these files and directories now expose information
for the network namespace of which the process is a member.
.tp
.i /proc/net/arp
this holds an ascii readable dump of the kernel arp table used for
address resolutions.
it will show both dynamically learned and preprogrammed arp entries.
the format is:
.ip
.in +4n
.ex
ip address     hw type   flags     hw address          mask   device
192.168.0.50   0x1       0x2       00:50:bf:25:68:f3   *      eth0
192.168.0.250  0x1       0xc       00:00:00:00:00:00   *      eth0
.ee
.in
.ip
here "ip address" is the ipv4 address of the machine and the "hw type"
is the hardware type of the address from rfc\ 826.
the flags are the internal
flags of the arp structure (as defined in
.ir /usr/include/linux/if_arp.h )
and
the "hw address" is the data link layer mapping for that ip address if
it is known.
.tp
.i /proc/net/dev
the dev pseudo-file contains network device status information.
this gives
the number of received and sent packets, the number of errors and
collisions
and other basic statistics.
these are used by the
.br ifconfig (8)
program to report device status.
the format is:
.ip
.ex
inter\-|   receive                                                |  transmit
 face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
    lo: 2776770   11307    0    0    0     0          0         0  2776770   11307    0    0    0     0       0          0
  eth0: 1215645    2751    0    0    0     0          0         0  1782404    4324    0    0    0   427       0          0
  ppp0: 1622270    5552    1    0    0     0          0         0   354130    5669    0    0    0     0       0          0
  tap0:    7714      81    0    0    0     0          0         0     7714      81    0    0    0     0       0          0
.ee
.\" .tp
.\" .i /proc/net/ipx
.\" no information.
.\" .tp
.\" .i /proc/net/ipx_route
.\" no information.
.tp
.i /proc/net/dev_mcast
defined in
.ir /usr/src/linux/net/core/dev_mcast.c :
.ip
.in +4n
.ex
indx interface_name  dmi_u dmi_g dmi_address
2    eth0            1     0     01005e000001
3    eth1            1     0     01005e000001
4    eth2            1     0     01005e000001
.ee
.in
.tp
.i /proc/net/igmp
internet group management protocol.
defined in
.ir /usr/src/linux/net/core/igmp.c .
.tp
.i /proc/net/rarp
this file uses the same format as the
.i arp
file and contains the current reverse mapping database used to provide
.br rarp (8)
reverse address lookup services.
if rarp is not configured into the
kernel,
this file will not be present.
.tp
.i /proc/net/raw
holds a dump of the raw socket table.
much of the information is not of
use
apart from debugging.
the "sl" value is the kernel hash slot for the
socket,
the "local_address" is the local address and protocol number pair.
\&"st" is
the internal status of the socket.
the "tx_queue" and "rx_queue" are the
outgoing and incoming data queue in terms of kernel memory usage.
the "tr", "tm\->when", and "rexmits" fields are not used by raw.
the "uid"
field holds the effective uid of the creator of the socket.
.\" .tp
.\" .i /proc/net/route
.\" no information, but looks similar to
.\" .br route (8).
.tp
.i /proc/net/snmp
this file holds the ascii data needed for the ip, icmp, tcp, and udp
management
information bases for an snmp agent.
.tp
.i /proc/net/tcp
holds a dump of the tcp socket table.
much of the information is not
of use apart from debugging.
the "sl" value is the kernel hash slot
for the socket, the "local_address" is the local address and port number pair.
the "rem_address" is the remote address and port number pair
(if connected).
\&"st" is the internal status of the socket.
the "tx_queue" and "rx_queue" are the
outgoing and incoming data queue in terms of kernel memory usage.
the "tr", "tm\->when", and "rexmits" fields hold internal information of
the kernel socket state and are useful only for debugging.
the "uid"
field holds the effective uid of the creator of the socket.
.tp
.i /proc/net/udp
holds a dump of the udp socket table.
much of the information is not of
use apart from debugging.
the "sl" value is the kernel hash slot for the
socket, the "local_address" is the local address and port number pair.
the "rem_address" is the remote address and port number pair
(if connected).
"st" is the internal status of the socket.
the "tx_queue" and "rx_queue" are the outgoing and incoming data queue
in terms of kernel memory usage.
the "tr", "tm\->when", and "rexmits" fields
are not used by udp.
the "uid"
field holds the effective uid of the creator of the socket.
the format is:
.ip
.ex
sl  local_address rem_address   st tx_queue rx_queue tr rexmits  tm\->when uid
 1: 01642c89:0201 0c642c89:03ff 01 00000000:00000001 01:000071ba 00000000 0
 1: 00000000:0801 00000000:0000 0a 00000000:00000000 00:00000000 6f000100 0
 1: 00000000:0201 00000000:0000 0a 00000000:00000000 00:00000000 00000000 0
.ee
.tp
.i /proc/net/unix
lists the unix domain sockets present within the system and their
status.
the format is:
.ip
.ex
num refcount protocol flags    type st inode path
 0: 00000002 00000000 00000000 0001 03    42
 1: 00000001 00000000 00010000 0001 01  1948 /dev/printer
.ee
.ip
the fields are as follows:
.rs
.tp 10
.ir num :
the kernel table slot number.
.tp
.ir refcount :
the number of users of the socket.
.tp
.ir protocol :
currently always 0.
.tp
.ir flags :
the internal kernel flags holding the status of the socket.
.tp
.ir type :
the socket type.
for
.br sock_stream
sockets, this is 0001; for
.br sock_dgram
sockets, it is 0002; and for
.br sock_seqpacket
sockets, it is 0005.
.tp
.ir st :
the internal state of the socket.
.tp
.ir inode :
the inode number of the socket.
.tp
.ir path :
the bound pathname (if any) of the socket.
sockets in the abstract namespace are included in the list,
and are shown with a
.i path
that commences with the character '@'.
.re
.tp
.i /proc/net/netfilter/nfnetlink_queue
this file contains information about netfilter user-space queueing, if used.
each line represents a queue.
queues that have not been subscribed to
by user space are not shown.
.ip
.in +4n
.ex
   1   4207     0  2 65535     0     0        0  1
  (1)   (2)    (3)(4)  (5)    (6)   (7)      (8)
.ee
.in
.ip
the fields in each line are:
.rs 7
.tp 5
(1)
the id of the queue.
this matches what is specified in the
.b \-\-queue\-num
or
.b \-\-queue\-balance
options to the
.br iptables (8)
nfqueue target.
see
.br iptables\-extensions (8)
for more information.
.tp
(2)
the netlink port id subscribed to the queue.
.tp
(3)
the number of packets currently queued and waiting to be processed by
the application.
.tp
(4)
the copy mode of the queue.
it is either 1 (metadata only) or 2
(also copy payload data to user space).
.tp
(5)
copy range; that is, how many bytes of packet payload should be copied to
user space at most.
.tp
(6)
queue dropped.
number of packets that had to be dropped by the kernel because
too many packets are already waiting for user space to send back the mandatory
accept/drop verdicts.
.tp
(7)
queue user dropped.
number of packets that were dropped within the netlink
subsystem.
such drops usually happen when the corresponding socket buffer is
full; that is, user space is not able to read messages fast enough.
.tp
(8)
sequence number.
every queued packet is associated with a (32-bit)
monotonically increasing sequence number.
this shows the id of the most recent packet queued.
.re
.ip
the last number exists only for compatibility reasons and is always 1.
.tp
.i /proc/partitions
contains the major and minor numbers of each partition as well as the number
of 1024-byte blocks and the partition name.
.tp
.i /proc/pci
this is a listing of all pci devices found during kernel initialization
and their configuration.
.ip
this file has been deprecated in favor of a new
.i /proc
interface for pci
.ri ( /proc/bus/pci ).
it became optional in linux 2.2 (available with
.b config_pci_old_proc
set at kernel compilation).
it became once more nonoptionally enabled in linux 2.4.
next, it was deprecated in linux 2.6 (still available with
.b config_pci_legacy_proc
set), and finally removed altogether since linux 2.6.17.
.\" fixme document /proc/sched_debug (since linux 2.6.23)
.\" see also /proc/[pid]/sched
.tp
.ir /proc/profile " (since linux 2.4)"
this file is present only if the kernel was booted with the
.i profile=1
command-line option.
it exposes kernel profiling information in a binary format for use by
.br readprofile (1).
writing (e.g., an empty string) to this file resets the profiling counters;
on some architectures,
writing a binary integer "profiling multiplier" of size
.ir sizeof(int)
sets the profiling interrupt frequency.
.tp
.i /proc/scsi
a directory with the
.i scsi
mid-level pseudo-file and various scsi low-level
driver directories,
which contain a file for each scsi host in this system, all of
which give the status of some part of the scsi io subsystem.
these files contain ascii structures and are, therefore, readable with
.br cat (1).
.ip
you can also write to some of the files to reconfigure the subsystem or
switch certain features on or off.
.tp
.i /proc/scsi/scsi
this is a listing of all scsi devices known to the kernel.
the listing is similar to the one seen during bootup.
scsi currently supports only the \fiadd\-single\-device\fp command which
allows root to add a hotplugged device to the list of known devices.
.ip
the command
.ip
.in +4n
.ex
echo \(aqscsi add\-single\-device 1 0 5 0\(aq > /proc/scsi/scsi
.ee
.in
.ip
will cause
host scsi1 to scan on scsi channel 0 for a device on id 5 lun 0.
if there
is already a device known on this address or the address is invalid, an
error will be returned.
.tp
.i /proc/scsi/[drivername]
\fi[drivername]\fp can currently be ncr53c7xx, aha152x, aha1542, aha1740,
aic7xxx, buslogic, eata_dma, eata_pio, fdomain, in2000, pas16, qlogic,
scsi_debug, seagate, t128, u15\-24f, ultrastore, or wd7000.
these directories show up for all drivers that registered at least one
scsi hba.
every directory contains one file per registered host.
every host-file is named after the number the host was assigned during
initialization.
.ip
reading these files will usually show driver and host configuration,
statistics, and so on.
.ip
writing to these files allows different things on different hosts.
for example, with the \filatency\fp and \finolatency\fp commands,