对一个应用程序进行设计包括生成该项目的一个抽象的表示。依赖于被建模的整个解决方
案的不同部分，如硬件、软件或者数据库构件，在这个阶段中可以使用多种不同的建模技术。
这个阶段将要确定在编码阶段所使用的编程语言和软件库。
当做出设计决策之后，关于模糊测试的可行以及可能使用的方法开始成为关注的焦点。在
这个阶段有两个重要的细节将被定义，它们会影响到整个的模糊测试方法。首先，要确定将被
实现的软件和硬件平台。这将会影响能够被使用的模糊测试工具，并且影响将被应用的模糊测
试类。例如，如果该项目是一个被设计为运行在Linux操作系统中的控制合应用程序，那么采
用环境变量模糊测试将更加合适。如果该项目被设计为运行在Windows操作系统中，那么标记
为“编写脚本安全”的ActiveX控件是否将向外部的Web站点提供函数呢？如果是这种情况，那
么就应当应用COM对象的模测试。
在SDLC的这一阶段中，可能将会选择处理通信的网络协议，例如，如果在该特定项目的
需求中，要求采用一种内嵌的即时消息解决方案，那么可扩展的消息处理现场协议
（Extensible Messagingand Presence Protocl,XMPP）可能就会被选中。这个协议是一种开放的
XML通信技术，它是1999年由开源组织在Jabber9项目中开发的。这是在SDLC中将协议规范
传递给模糊测试团队的一个很好的阶段。同时也可以在这个阶段中分配一些资源，以搜索并枚
举出当前可用的XMPP测试工具以及前面所发现的XMPP解析漏洞。
在设计阶段中所做出的另外一个重要的决定与将要在应用程序中被开发的输人向量相关，
需要记住的是，模糊测试是这样一种简单的技术，即它向一个应用程序提供非常规输人，并且
观察所发生的情况。因此确定所有这样的输人向量以及如何最佳地利用它们进行模糊测试是一
个非常关键的问题。在准确确定输入向量的构成时，进行创造性的思考也非常重要。仅仅因为
某些操作是在内部进行的而没有直接暴露给一个终端用户，这井不能表明一个攻击者不能创建
定制代码以访问接口。所列举的输人向量越完整，那么使用模糊测试的代码覆盖就可以完成的
更好。
http://www.jabber.org/
---
## Page 369
354第四部分展塑
25.1.3编码
在编码阶段，开发者要构建整个项目所需要的各个组成部分，并且逐步将它们集成在一起
以形成一个统一的应用程序。在这里需要记住的重要一点是，开发者可以并且应当在开发过程
中使用模糊测试。为发现错误而进行的测试的重担不应当只由QA团队和安全专业人士来承担。
当代码被编译并且经过了适当的功能测试之后，也应当对它们进行足够的安全性测试。针
对在设计阶段所确定的任何可能的输人向量而言，都可以应用模糊测试。如果所提供的一个
ActiveX控件已经准备好了，那么就开始对它进行模糊测试。如果完成了一个网络服务，那么
同样开始对它实施模糊测试。正如我们在前面的第19章“内存数据的模糊测试”和第20章“内
存数据的模糊测试：自动化”中所看到的，内存数据模糊测试同样可以被应用于函数层次。如
果一个给定的函数被设计为从一个用户提供的字符串中抽取出一个邮件地址，那么就使用许多
随机生成以及智能选择的字符串值来对该函数进行上千次的调用。
不完善的输人验证往往是导致安全漏洞的原因，而模糊测试将有助于开发者更好地理解为
什么输人验证如此重要。模糊测试被设计为要识别这样的输人，即开发者没有考虑到以及应用
程序不能够处理的输入。当开发者发现这种情形时，他们将在最佳的位置来构建适当的输人验
证控件，并且确保在后续代码中不再出现同样的错误。更为重要的是，漏洞在SDLC中被发现
的越早，那么修改这些错误的开销也就会越少，当一个开发者发现其自已代码中的错误时，就
会更早的修复它们。
25.1.4测试
当软件开发进人到测试阶段时，QA团队就开始发挥作用了。在项目发布之前，安全保证
团队也应当参加到测试阶段中。如果缺陷在软件发布之前被发现，那么整个开销就会越少。另
外，你可以通过确保漏洞都是在内部被发现，而不是首先出现在一个公开的邮件列表中，来维
护公司的声誉。
对于QA团队和安全研究者而言，确定如何在测试阶段最佳地协同工作以更好地相互利用
资源是非常重要的。对于某些软件提供商而言，在SDLC中包含安全问题专家可能是一个新的
方法，但逐渐增多的被公开发现的漏洞也说明了包含安全专家是非常必要的。
QA团队和安全研究者都需要认识到在测试阶段可以应用的商业的和开源的模糊测试工具。
这是可以实现对等培训任务的地方，安全研究者更有可能掌握最新最好并且可用的模糊测试工
具的知识，他们可以利用这些知识来对QA团队和开发者进行模糊测试工具的培调，而这些工
具可以被用来提高安全性。作为该培训的一个副产品，开发者能够认识到他们可以避免常见的
编程错误，并且能够更好地理解安全编程实践。
25.1.5维护
尽管开发者、QA团队和安全研究者已经微出了最大的努力，但是仍然可以在最终的产品代
码中发现导致简单异常以及重要安全漏洞的错误。主要的软件提供商都已经在安全领域中投入
了数十亿美元，尽管情形有所改善，但是我们仍将面对包含有漏洞的代码。因此，即使生成了
产品代码，继续对安全漏洞进行研究是非常重要的。新的模糊测试工具、经验丰富的研究者以
---
## Page 370
第25章取的教训355
及改进的模糊测试技术都可能对前面测试过的代码进行更新的检测，并且发现新的漏洞。另外，
漏洞可能会具有依赖性的被实现，因此在代码作为产品发布之后由于配置的改变使得漏洞就会
出现。作为一个例子，某些问题可能不会在32位平台上出现，但是将会在64位平台上出现。
除了在开发团队内部通过努力积极识别漏洞代码之外，在适当的时候对独立的研究者做出
响应以及同其协同工作也是非常重要的。独立的研究者负责发现软件中的大多数公开的安全漏
洞。尽管这些研究者发现漏洞的目的各不相同，但是他们所做出的努力对于生成更加安全的产
品代码是非常重要的。软件提供商应当在适当的时候提供这样的过程，即允许独立的研究者向
开发团队报告他们的错误发现情况，以作为连接研究者和开发者之间的桥梁，从而最终实现对
错误的修复。
25.1.6在SDLC中实现模糊测试
我们认识到瀑布模型所展现的是一种过度简化的软件开发过程。大多数的项目都需要多个
开发团队来协同工作，并且SDLC的各个阶段是循环选代的出现，而不是瀑布模型中所描述的
纯粹的顺序执行过程。无论如何，任何的开发模型都是将这些基本的开发阶段进行适当的组合
形成的。不要只关注于模型本身，而是要利用本章所讨论的知识在你自己的SDLC模型中实现
模糊测试，以在产品发布之前更好地保证代码的安全。
25.2开发者
当要在新的项目中实现安全性要求时，开发者是第一道防线，并且当他们开发了新的函数、
类以及库时，应当能够对这些对象进行模糊测试。通过培养开发者认识到基本的安全问题的技
能，就可以立刻解决许多开销很大的安全问题，而不再将问题留给QA或者安全保证团队，因
此留给公众用户去发现的问题也就更少。
通常情况下，开发者是在他们所熟悉的一个特定的集成开发环境（IDE）中来完成其大部
分编程工作的。例如微软的VisualStudio，是在Windows平台上进行C#和VisualBasic编程的
标准的IDE，而Eclipse则是使用Java和多种其他语言进行编程的一个主流的IDE。鼓励开发者在
其开发过程实践中结合模糊测试的一个推荐方法是开发IDE插件，面不是要求开发者去学习一
个全新的工具集以进行安全测试。尽管SPIDynamics的DevInspect工具不是一个特定的模糊
测试工具，但是它却提供了此方法的一个例子，DevInspect是扩展了VisualStudio和Eclipse功
能的一个工具，使开发者能够对ASP.Net和JavaWeb应用程序进行源代码分析以及黑盒测试。
25.3QA研究者
在传统意义上，QA只关注于功能测试而不是安全测试。幸运的是，由于终端用户逐渐认
识到了不安全的软件所带来的危害，并且向其软件提供商提出了更多的安全方面的要求，因此
使得这种情况得到了改变。尽管不应当期望QA团队成为安全问题的专家，但是应当期望他们
对安全性具有一个基本的了解，更为重要的是，他们要知道何时需要引人安全问题专家。模糊
http:/www.spidynamics.com/products/devinspect/
---
## Page 371
356
第四部分展
测试是一种非常适合于QA团队的测试过程，因为它可以实现高度的自动化。例如，逆向工程
对于QA研究者而言将不是一个适于掌握的技能，因为它是一种高度专业化的技能，井且需要
经过大量的培训。另一方面，执行模糊测试工具对于QA团队来说是一项非常现实的工作。尽
管这可能需要同安全保证团队进行协同工作以确定一个特定的异常是否会导致一个可利用的条
件，在测试阶段中，任何类型的崩溃都需要进行评审，并且应当被开发者所解决。这时，安全
性和功能性之间的区别已经不再重要。而重要的是解决目前所遇到的问题。
25.4安全问题研究者
模糊测试对于安全问题研究者而言井不是一个新的概念。由于模糊测试所具有的相对简单
性以及高回报率，使其成为了一种被广泛使用的用于发现安全漏洞的方法，在过去的几年中，
安全问题研究者根本就没有被包含在SDLC中。并且目前在许多开发组织中仍然是这种情形。
如果你在SDLC中没有使用安全问题专家，那么就需要对你的软件开发过程重新进行评审了。
例如微软，它通过主办BlueHat安全简报9，从著名的安全问题研究者那里获得相关的知识，以
武装其员工的头脑。
安全问题研究者所面临的挑战
是，将其所关注的焦点转移到在
领城用户
0
SDLC的早期发现漏洞。不论漏洞是
何时被发现的，只要对其进行修复就
15X
是有意义的，但是随着项目开发阶段
的不断进行，修复漏洞的开销也在不
统/可格
6.5X
受性测试
断增加，如图25-3所示。安全性团队
IX
静态分析
集成测试
可以利用特殊的技能以调整测试过
程，从而持续地改进所使用的模糊测
测试
开发
试工具和技术。尽管QA团队应当负
责执行标准的模糊测试工具和脚本，
图25-3在SDLC中修复软件缺陷的开销
但是实际上是安全问题研究者来构建定制的工具或者识别新的技术，并且持续的对QA团队和
开发者进行相关的培训。
25.5小结
任何一个软件开发者可以说“安全性不是我的问题，我们有一个团队来考虑安全问题”的
时代已经过去了。安全性是每一个人的责任，包括开发者、QA团队以及安全问题研究者。作
为一个产品经理，不能够满足于简单的忽略漏洞，并且希望这些漏洞将会神奇地消失。你的员
工也必须要使用相应的过程和工具，以将安全性嵌入到SDLC中，并且模糊测试代表了一个可
以被上述三类人所利用的自动化的过程。模糊测试并不是一个万能钥匙，但是它是一种可以开
发用户友好的安全性工具的方法，从而可以发现大量的漏洞。
http:/www.microsoft.com/technet/security/bluehat/sessions/default.mspx
蒲客资源网WwW.176Ku.CoM，1000G无加密版教程书籍杂志全免KEY提供，完全无加密。
---
## Page 372
第26章展
兰望
“但是总的来说，对我和劳拉这是难以置信的一年。
GeorgeW.Bush，在发生9·11攻击三个月之后
对其上任第一年的工作进行总结，Washington，DC，2001年12月20日
模糊测试将向什么方向发展呢？其应用领域已经开始从学术研究转向了企业级的测试床，
并且贯穿于SDLC的整个过程中。由于有更多的软件开发者接受了模糊测试，因此有许多商业
工具被开发以利用这种功能强大的方法也就不足为奇了。在本章中，我们将讨论模糊测试的现
状，并且预测其进一步的发展方向。
26.1商业工具
可以证明，表明一种工业成熟度的强有力的标志就是商业工具在该领域中的应用，这也是
我们当前对模期测试技术所要做出的证明。大量的软件开发者如微软都已经接受了模糊测试，
并且将其作为在SDLC的早期发现安全漏洞的一种方法。同时还将会出现新的产品和公司以满
足开发健壮的、用户友好的模糊器的需求。在本节中，我们将介绍目前存在的一些商业化工具，
这些工具是以字母顺序来排列的。
26.1.1安全性测试工具beSTORMe
beSTORM是利用模糊测试技术的一种黑盒测试工具，用于在多种不同的基于网络的协议
中发现漏洞。beSTORM安全性最初是来自于所创建的公开的Web站点SecuriTeam，其目的是
发布与安全相关的新闻和资源。beSTORM所能够测试的协议如下所示：
·HTTP-超文本传输协议
FrontPage扩展名
·DNS-城名系统
·FTP-文件传输协议
·TFTP-一般的文件传输协议
·POP3-用于电子邮件接收的邮局协议，版本3
·SIP-会话启动协议
·SMB-服务器消息块
·SMTP-简单的邮件传输协议
·SSLv3-安全Socket层，版本3
http:/www.beyondsecurity.com/
---
## Page 373
358
第四部分展