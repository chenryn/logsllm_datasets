stance, a simple ping measurement may be executed every N seconds, with various
pieces of information returned (e.g., success/failure, loss rate, presence of reorder-
ing, etc.) to remd. These results could then trigger additional measurements in an
attempt to determine the reason behind the initial observations.
– Reactive Measurements. These are measurements that remd executes in response
to previously-measured network phenomenon. For instance, if a tool reports to
remd that the loss rate between the local host and a given remote host exceeds a
threshold, then a reactive measurement can be triggered to attempt to determine
the cause of the increased loss rate or how long it persists. The results of reactive
measurements are fed back to remd and are then used to determine whether further
reactive measurements are needed. Reactive measurements can be active or passive
measurements.
A Reactive Measurement Framework
97
– External Measurements. These are measurement results delivered to remd with-
out remd initiating them itself. These measurements could come from SNMP mon-
itoring systems, routers, intrusion detection systems (IDS), system log analyzers or
custom built monitors. Each of these entities potentially has a unique and useful
vantage point from which to assess certain network conditions and attributes.
The various components of the system interact by passing structured messages be-
tween the remd and the measurement tools. We can incorporate arbitrary tools into
the system by writing simple wrapper scripts1 that (i) understand and process requests
formed by the remd, (ii) evaluate the output of the given tool(s) (return codes, output
ﬁles, standard output), and (iii) form responses in the format remd requires. We use
XML for requests and responses to ensure an extensible message structure that can
accommodate communication with arbitrary measurement tools (their diverse set of ar-
guments and result types). In addition, XML parsers are widely available allowing users
to construct wrapper scripts without building complicated parsers and in a wide variety
of languages. Finally, we note that while the contents of the messages passed between
the remd and the various measurement tools must be well-formed, the meaning of the
information and its relationship within the overall experiment is deﬁned at run-time
by the remd conﬁguration, allowing a great degree of ﬂexibility and leaving remd as
neutral glue.
3.2 Internal Architecture
Internally, the REM system has three basic components: a measurement scheduler, an
event receptor, and a state machine to capture the linkages between measurements. The
measurement scheduler runs measurement tools at prescribed times. For instance, the
user may want to run a simple measurement to assess a path periodically, along with
successive reactive measurements as dictated by the results of the ﬁrst measurement.
Or, upon detecting a failure the user may wish to run the reactive measurements after a
given amount of time, rather than immediately (e.g., to test DNS resolution N seconds
after observing a failed lookup). The event receptor receives notiﬁcations from external
monitors (e.g., an SNMP monitor) that then may initiate a chain of reactive measure-
ments, and from the activity of the reactive measurements themselves. Finally, the state
machine manages the transitions between various measurements.
Figure 2 gives an example of an REM state machine. It codiﬁes that REM should
start a ping measurement based on an internal timer. Based on the results of the ping
measurement, REM will execute zero, one, or two reactive measurements. If the loss
rate measured by ping exceeds a threshold T , REM executes treno [10] in an attempt to
determine where in the path the congestion occurs. If the ping measurement observes
packet reordering on the path, REM uses cap [1] to assess the impact of reordering on
TCP’s congestion control algorithms. Note: if the ping indicates a loss rate that exceeds
T and packet reordering is present both treno and cap will be executed (bringing up a
number of coordination issues that we discuss in more detail below). In the case where
the ping measurement indicates both a loss rate below T and no reordering, then no
1 The NIMI measurement infrastructure [15,14] has successfully used a similar wrapper script
technique to incorporate arbitrary measurement tools.
98
M. Allman and V. Paxson
LOSS RATE > T ?
treno
TIMER
ping
REORDERING?
cap
Fig. 2. Simple state machine whereby all measurements are invoked by remd
further measurements are executed. In other words, an implicit terminal state follows
each state in the machine. If, after executing a measurement, none of the transitions are
valid, then the current measurement chain ends. Finally, the treno and cap states could,
of course, also have transitions to additional measurements.
Bro
DNS QUERY FAILURE
remd
dig
DNS QUERY FAILURE
(60 SECOND DELAY)
Fig. 3. Simple state machine of a reactive measurement triggered by an external monitor
Figure 3 gives a second example of an REM state machine. Here, remd (everything
within the dotted line) receives a DNS failure notiﬁcation from an external source,
namely an instance of the Bro IDS (which can perform extensive, application-layer
analysis of trafﬁc). Upon receiving the message indicating a DNS failure occurred,
remd executes a dig measurement in an attempt to resolve the given hostname. Each
time the given hostname cannot be resolved, REM schedules another dig measurement
for 60 seconds into the future. In addition to setting a time between measurements, a
maximum number of attempts can be conﬁgured. For instance, inserting 60 seconds
between DNS queries and running a maximum of 10 queries may sufﬁce for a given
experiment. Of course, a simple periodic timer will not sufﬁce for all situations; our
prototype REM system also provides Poisson-based intervals and exponential backoff.
The above examples are clearly simplistic, and the thorny problem of measurement
scheduling and collision remains. A user may wish to have two reactive measurements
run in parallel in one instance, and serially in another. In addition, a user may wish
to base a reaction on the output of multiple measurements. These situations greatly
A Reactive Measurement Framework
99
complicate state machine construction. While this complexity can be hidden from the
user by providing a high-level interface from which the system then creates the actual
state machine, we may need a more powerful abstraction to cover all possible cases in
the future. For example, we could use the quite general framework of Petri Nets [16]
to codify the reaction path. Alternatively, we could directly employ Bro’s events and
timers. Our current prototype is based on a simple state machine. As we explore the
sorts of reactive measurements we ﬁnd we want to express in practice we will look to
enhancing the system’s abstract model to support these sorts of richer couplings.
As indicated above, external notiﬁcations to the REM system can come from any
network monitoring system (IDS, SNMP, custom developed, etc.). Attempting to inter-
face remd with legacy systems may require a lightweight shim to provide the necessary
“plumbing”. For example, consider integrating the Bro IDS into the REM framework.
Since the Bro system includes a client library for transmitting Bro events and typed
values, to integrate it with REM we can devise a simple event receiver that understands
Bro events and translates them into remd notiﬁcations.
Note, as discussed thus far, the REM system has no particular provisions for security
mechanisms over and above those placed on the user-level tools by the underlying oper-
ating system. We believe this is the generally correct model. However, we clearly must
require access control for external notiﬁcations. A natural approach for doing so would
be to layer such notiﬁcations on top of SSL connections in order to leverage SSL’s
authentication capabilities. We could potentially augment this with an authorization ca-
pability allowing a researcher to deﬁne which external monitors can communicate with
remd and what sort of messages they can send.
3.3 Details
The high-level architecture sketched above is realized through a system whereby each
experiment keeps a variable list that can be arbitrarily populated with state informa-
tion by the experiment conﬁguration and the measurement tools as they are executed.
For instance, a measurement tool’s argument list can be populated by the conﬁguration
setting variables for the tool. Wrapper scripts consult the variable list and add to it infor-
mation about the outcome of a particular measurement. Once a measurement is ﬁnished
and the updated list returned, remd executes the transitions, which are speciﬁed using
arbitrary Python code that runs in the context of a given variable list. Using this scheme
the remd is only required to manage the overall measurement process and not have
any understanding of the measurements themselves. Thus, remd is charged with tasks
such as moving variable lists around, executing transition code from the conﬁguration,
managing processes, and stopping processes that take too long.
3.4 Interfacing to External Resources
A REM system such as described above would provide a solid foundation for conduct-
ing fundamentally new and different measurement studies. However, the system can
be more useful still if it were to contain the ability to interact with different types of
external resources. Below we sketch two possibilities.
100
M. Allman and V. Paxson
Measurement Infrastructures. Often we can derive more information about a network
anomaly by probing the network from multiple vantage points. For instance, a DNS
failure may be a local problem to a given network or a more general global problem
with one of the root DNS servers. If we perform DNS lookups at only one point in the
network (i.e., where remd is running), we can fail to observe the full scope of the prob-
lem. However, by running the same DNS query from a number of distributed points in
the Internet, a more complete story about the failure might emerge. Thus, we should aim
to interface the REM system with distributed measurement systems such as scriptroute
[19] or DipZoom [17]. Such interfaces provide the ability to run reactive measurements
at many points in the network simultaneously to gather as much information as possible
about network anomalies. Note that by using wrapper scripts, the REM system can ac-
commodate such interfaces without any particular extensions to the general framework:
we simply write wrapper scripts invoked by remd that, for example, execute scriptroute
tools to run measurements on alternate hosts and gather the results.
Measurement Repositories. While reactive measurement offers a great deal of power,
one deﬁciency is that sometimes the overt trigger for a failure or anomaly comes late:
that is, by the time we observe the problem, we may have missed valuable precursors
that shed light on the problem’s onset. We envision a partial counter to this problem in
the form of interfacing to measurement repositories. For instance, wrapper scripts could
interface with the bulk packet recorder outlined in [7] in an attempt to try to build under-
standing about the precursors to some observed phenomena. Another obvious source of
information could be the RouteViews repository [11] of advertised routing tables.
4 Summary
Our two major—if preliminary—contributions are (i) developing the general notion
of reactive measurement as a paradigm that focuses on a measurement process as the
key to better understanding observed behaviors, and (ii) the design and prototyping
of a reactive measurement system to aid researchers in using the technique in their
own work. We believe that if the community absorbs and leverages this concept in
their experimental designs, it can lead to signiﬁcant advances in better understanding
network behavior. We hope by exposing our initial design to the community we will get
feedback on important aspects to include in future versions of our framework.
Acknowledgments
The ideas in this paper have beneﬁted from discussions with a number of people in-
cluding Fred Baker, Ben Chodroff, Scott Shenker and Randall Stewart. This work was
funded in part by Cisco Systems and NSF grants ITR/ANI-0205519 and NSF-0722035.
Our thanks to all.
Any opinions, ﬁndings, and conclusions or recommendations expressed in this ma-
terial are those of the authors or originators and do not necessarily reﬂect the views of
the National Science Foundation.
A Reactive Measurement Framework
101
References
1. Allman, M.: Measuring End-to-End Bulk Transfer Capacity. In: ACM SIGCOMM Internet
Measurement Workshop (November 2001)
2. Anderson, D.S., Fleizach, C., Savage, S., Voelker, G.M.: Spamscatter: Characterizing In-
ternet Scam Hosting Infrastructure. In: Proceedings of the USENIX Security Symposium
(August 2007)
3. Chang, D.-F., Govindan, R., Heidemann, J.: Exploring The Ability of Locating BGP Missing
Routes From Multiple Looking Glasses. In: ACM SIGCOMM Network Troubleshooting
Workshop (September 2004)
4. Clark, D., Partridge, C., Ramming, J.C., Wroclawksi, J.: A Knowledge Plane for the Inter-
net. In: ACM SIGCOMM Workshop on Future Directions in Network Architecture (August
2003)
5. Huang, H., Jennings III, R., Ruan, Y., Sahoo, R., Sahu, S., Shaikh, A.: PDA: A Tool for
Automated Problem Determination. In: Proceedings of USENIX Large Installation System
Administration Conference (LISA) (November 2007)
6. Jung, J., Sit, E., Balakrishnan, H., Morris, R.: DNS Performance and the Effectiveness of
Caching. In: ACM SIGCOMM Internet Measurement Workshop (November 2001)
7. Kornexl, S., Paxson, V., Dreger, H., Feldmann, A., Sommer, R.: Building a Time Machine
for Efﬁcient Recording and Retrieval of High-Volume Network Trafﬁc. In: ACM Internet
Measurement Conference (2005)
8. Krishnamurthy, B., Madhyastha, H.V., Spatscheck, O.: ATMEN: A Triggered Network Mea-
surement Infrastructure. In: Proceedings of WWW (May 2005)
9. Mao, Z.M., Rexford, J., Wang, J., Katz, R.: Towards an Accurate AS-Level Traceroute Tool.
ACM SIGCOMM (2003)
10. Mathis, M.: Diagnosing Internet Congestion with a Transport Layer Performance Tool. In:
Proceedings of INET 1996 (June 1996)
11. University of Oregon RouteViews Project, http://www.routeviews.org
12. Paxson, V.: End-to-End Routing Behavior in the Internet. ACM SIGCOMM (August 1996)
13. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-Time. In: Proceedings
of the 7th USENIX Security Symposium (January 1998)
14. Paxson, V., Adams, A., Mathis, M.: Experiences with NIMI. In: Proceedings of Passive and
Active Measurement (2000)
15. Paxson, V., Mahdavi, J., Adams, A., Mathis, M.: An Architecture for Large-Scale Internet
Measurement. IEEE Communications (1998)
16. Peterson, J.L.: Petri Net Theory and the Modeling of Systems. Prentice Hall, Englewood
Cliffs (1981)
17. Rabinovich, M., Triukose, S., Wen, Z., Wang, L.: Dipzoom: the Internet measurements mar-
ketplace. In: 9th IEEE Global Internet Symp. (2006)
18. Roesch, M.: Snort: Lightweight
intrusion detection for networks. In: Proceedings of
USENIX LISA (1999)
19. Spring, N., Wetherall, D., Anderson, T.: Scriptroute: A Public Internet Measurement Facility.
In: USENIX Symposium on Internet Technologies and Systems (USITS) (2003)