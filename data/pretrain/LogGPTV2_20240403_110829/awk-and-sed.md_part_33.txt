，这就意味着，
，而不是对原来的$1
第九章 函数
，当调用函数
---
## Page 231
的成绩按升序排序。
以通过的方式编写 sort（）函数的意思是可以很容易地重用它。为了说明这一-
1987年nawk 的原始版本，我们或许就需要编写tolower（）和toupper（）函
实际上，我们在本章提供的许多脚本都可以改写为函数。
下面是实际的排序结果：
数不必将数组返回给主例程，
序排列。在函数的末尾，
面
被覆盖的值的一个备份。
二个元素交换（注6）。为了真正交换数据，我们用一个临时变量来存储将要
素并于它前面的值想比较。如果第一个元素比第二个大，则将第一个元素与第
的脚本中，我们将学生的成绩读到一个数组中，
#输出循环
#打印学生姓名
sort(grades, NF-1) 
#调用排序函数来排序元素
for (i = 2; i  ARRAY[j]; --j)
我们用return 语句返回到程序的调用点（注7）。函
 循环将不停地交换相邻的数据知道所有的数据都按顺
50192241
：对学生成绩进行排序的脚本
因为数组已经被修改，它可以直接被访问。
- 231.
，并用它来对学生的成绩进行排序。在下
++i)
，并调用函数 sort（）对学生
，例如，
，如果我们只有
第九章
函数
---
## Page 232
我们产品的编辑Lenny 回复了另外一个需求。
另一个排序的例子
注意，保存函数文档的有关信息有助于在重用它们时理解他们如何工作。
文件名。
注意：
/usr/local/share/awk 下的文件 sorf.awk
这个命令假设 grade.awk 在当前工作目录中，并且排序函数定义在目录
指定了两个程序文件：
将前面编写的排序函数放置在与主程序 grade，awk 不同的文件中。下面的命令
下。Awk 允许使用多个-f选项来指定多个程序文件（注8）。
你或许希望把一个有用的函数保存在一个文件中，
维护函数库
注7：
注6:
序函数的另一个版本，它包含第三个参数用于指示按升序或降序排序。
除排序后的数组中的第一个元素来实现。还可以做另一个联系，
然而，如果我们希望在删除最低分数后计算学生的平均成绩，那么可以通过删
意，
$ awk -f grade.awk -f /usr/local/share/awk/sort. awk grades.test 
ellis: 89 90 92 96 96 98
dunce: 60 60 61 62 64 80
jasper: 80 82 84 84 88
andrea: 85 89 90 90 94
john: 78 85 88 91 92 94
mona: 70 70 77 83 85 89
$ awk -f grade. sort.awk grades.test
printf(" \n")
for (j = 1; j 0”将为真。当到达文件末
前面两个过程：
测试 getline 的返回值来读取若干输入行。下面的过程代替了 sorter 程序中的
我们在第九章“函数”的最后演示的 sorter.awk 程序，
面的行的第一个字段：
以下例子显示了上面的脚本是如何工作的，它的功能是打印在“.SH Name”后
一个变量从而避免改变$O，正如我们马上要看到的一样。
行后，getline 将它赋给 $O 并将它分解成字段。同时设置系统变量 NF、NR 和
这个模式匹配任意包含“.SH”且其后跟有“Name”的行，
me”
实际上是下一行。例如，从帮助页中提取命令的名字。下面的例子匹配了标题
将文本参数放置在下一行上。尽管这个宏是用来查找行的模式，但它所要处理
行不再看做是变量$O。然而，如果需要，
FNR。因此新行变成当前行，这时可以引用$1 并检索第一个字段。注意前面的
在前面的章节中，我们使用一个手册页源文件作为例子。通常情况下，-man 宏
注意：
读
#匹配"Related Commands”并收集它们
XSubImage 
$ awk -f getline.awk test
/^\. SH "?Name"?/ {
# getline.awk 
，读取下一行，并打印它的第一个字段：
的
“na
while (getline > 0)
print 
法类似于一个语句。不能写成 getline (（)，它的语法不允许有圆括
尽管 getline 函数被称为一个函数并且返回了一个值，但它的语 
print $1 # 打印新行的 $1值
getline # 取得下一行
QQ群：
os as!pueuuoo = is!uo
-测试 getline 函数
50192241