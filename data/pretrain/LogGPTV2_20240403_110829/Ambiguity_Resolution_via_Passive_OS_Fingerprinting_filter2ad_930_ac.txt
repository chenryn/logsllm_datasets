ﬁngerprint sub-tables to match the SYNACK TCP/IP values.
A successful lookup will give the sensor access to its ambiguity resolution
policies. Whether the ambiguity is with overlapping IP fragments or overlap-
ping TCP segments, the sensor can perform the proper correction and push the
correctly sequenced data up the protocol stack.
5.2 Best-Match Fingerprinting
Xprobe2[10] utilizes a “fuzzy” approach to actively ﬁngerprinting remote hosts.
In a similar fashion, we employ a best-match algorithm to obtain a best guess of
the host’s operating system type in the situation where no exact match is found.
When a lookup is attempted, as described in section 5.1, and fails to ﬁnd
an entry in the SYN or SYNACK ﬁngerprint tables, we invoke the best-match
algorithm. Upon failure, then we iterate over every entry in the particular table
202
G. Taleck
that failed (either the SYN table or one of the 16 SYNACK sub-tables) and
tally a score for each ﬁeld. Once all ﬁngerprint scores have been calculated, the
highest score wins.
6 Resource Consumption
With ever-increasing network speeds, it is important for the network analysis of
packets by an IDS to be as fast as possible. To this end, a number of optimizations
have been made to satisfy the constraints placed on the IDS sensor.
6.1 On-demand Resolution
Since detecting the OS type can be an O(n) operation, the SYN and SYNACK
data from an IP are cached in a tree based upon the IP address of the host. To
prevent dubious SYN/SYNACK entries from ﬂooding the cache, the insertion
is only done once the three-way handshake is complete and we understand a
complete connection has been made. There is little sense in occupying resources
for some port scan or even a ﬂood.
When an ambiguity arises in future traﬃc received by the IDS, a lookup is
performed on the IP address of the host receiving the ambiguous packets, and
a decision is made as to how to resolve the ambiguity. With this approach, only
costly operations are performed when necessitated by the network traﬃc.
6.2 Fingerprint Caching
As described in the previous section, when an ambiguity arises, a lookup is
made into the IP SYN/SYNACK cache. If an entry is found that matches the
destination IP address of the packet(s) containing the ambiguity, the values of
the SYN/SYNACK entry are used to look up the OS type in a ﬁngerprint cache.
Since the IDS does not perform any computationally intensive operations
until an ambiguity arises, the average runtime cost is merely the cost of caching
SYN and SYNACK information. The resulting computational overhead is neg-
ligible.
At cold start, this cache is initialized to contain all the ﬁngerprints of the
database, built as described in Section 4. During runtime, if the lookup of the
OS type in the ﬁngerprint cache fails, the best-match algorithm is invoked to
make a best guess. This resulting value is then inserted as a new entry into the
ﬁngerprint cache, such that any following lookup will result in a cache hit.
6.3 Memory Utilization
The two caches used for the SYN/SYNACK lookup tree and the OS ﬁngerprint
tree can grow to very large sizes. Even though the amount of memory per entry
may be small, an IDS monitoring a large network can quickly expand the size of
these caches. Our implementation does not limit the size of these caches; rather,
Ambiguity Resolution via Passive OS Fingerprinting
203
when all available memory resources are consumed, the memory manager calls
back into these cache routines to free memory, eﬀectively wiping out as much
of the cache as needed for the system to continue monitoring. When memory
resources become available again, the cache can be rebuilt.
7 Experiments and Results
Using the mapping tool described in Section 4, we were able to map almost 1,200
hosts and identify 42 diﬀerent operating systems.
The TCP options tests gathered 223 unique responses from diﬀerent oper-
ating systems3, which is a wealth of information that can be used to identify
hosts.
Further examination of TCP traﬃc, as shown in Table 4, yielded several
common TCP SYN segments, that show the dispersion of SYNs to cover just
over 50% (9 of 16) of the 16 SYNACK sub-tables.
Table 4. Common options and variations of a TCP SYN Segment and the correspond-
ing encoded options for the SYNACK sub-table lookup.
# TCP options
Encoding
1) 
2) 
3) 
4) 
5) 
6) 
7) 
8) 
9) 
10) 
11) 
12) 
13) 
1
2
5
5
5
13
7
15
15
15
14
2
9
7.1 Drawbacks
This solution suﬀers from the cold start dilemma: If no traﬃc has been seen
by the IDS for a particular host that can be used to identify its ambiguity
resolution policies, then nothing can be done if the ﬁrst packets the IDS sees
contain ambiguities.
3 This number does not consider the TTL value since the TTL varies depending on
the path taken from the scanner to the host.
204
G. Taleck
The “freshness” of the ﬁngerprint database existing on the IDS is also an-
other potential source of failure. While we do actively maintain our internal
ﬁngerprint database as described in Section 4, our current solution does not au-
tomatically fetch the latest copy on its own. We rely on the IDS administrators
to occasionally refresh the packages .
7.2
Implications
Because there does not exist a one-to-one mapping of operating system ambiguity
resolution to TCP SYN/SYNACK negotiation behavior, this solution is prone
to resolving ambiguities incorrectly. For example, a false negative would result if
an administrator changes the default TCP behavior of his or her Windows 2000
server to match that of FreeBSD 5.0, which is then hit with an ambiguity attack
for Windows 2000. Since the IDS identiﬁed the server as FreeBSD, which has
a diﬀerent ambiguity resolution policy than Windows 2000, the attack would
be missed by the IDS. Similarly, false positives can also be generated in this
scenario if the attacking IP fragments or TCP segments formatted for FreeBSD.
However, note that an attacker is not able to change the IDS’s view of a
server the IDS is trying to protect. They will only be able to change the identity
of the system from they are connecting.
7.3 Comparison to Related Work
8 Future Work
The approach described in this paper can be extended in many other directions,
both to increase the accuracy of identifying end host network stacks and in
resolving protocol ambiguities.
Current passive OS ﬁngerprinting works only with the IP and TCP head-
ers, and even then not to their full extent. Research [21] has shown how web
servers operate diﬀerently under congestion. The tcpanoly[20] tool uses many
passive methods that could be integrated into the detection engine by noting
gratuitous ACKing, Reno implementations, and other variations throughout a
TCP conversation.
The sensor has the ability to use temporal knowledge of a particular IPs
passively detected OS ﬁngerprint to statistically guess the OS type in a NATed
environment.
Passive ﬁngerprinting can also be used to detect NATed hosts. Since NAT
typically only rewrites IP addresses, and possibly TCP or UDP ports, and leaves
other ﬁelds and options unscathed, the IDS can identify a NAT by counting the
number of unique ﬁngerprints for the same IP. If a ﬁngerprint radically changes
repeatedly in a given amount of time, a NAT can be detected and used more
intelligently by the engine.
We can increase the conﬁdence level of SYNACK ﬁngerprint lookups by
paying closer attention when we cache values. When a SYNACK is cached, its
Ambiguity Resolution via Passive OS Fingerprinting
205
corresponding SYN options encoded value is also cached. However, this value
may change from client to client. If we can cache a SYNACK for each encoded
SYN, then when a lookup happens, we could potentially have 16 entries to
match against each sub-table. The best-match algorithm could then ﬁnd the
closest operating system type for the given host.
9 Summary
In this paper, we describe a new method and implementation for emulating end
host network stacks by using new passive OS ﬁngerprinting techniques.
Compared to previous approaches, this method requires no work on the part
of administrators and still allows the stealth operation of the IDS sensor. Addi-
tionally, the mapping occurs in real-time. That is, traﬃc from a host that was
just brought up via DHCP can be mapped as soon as the sensor sees traﬃc from
or to it.
Passive detection does not rely on cooperation of ﬁrewalls or some given
network topology to operate eﬀectively. While knowing the network topology is
useful in detecting TTL evasions, it is not necessary for passive ﬁngerprinting.
This approach, while not perfect, attempts to remove some of the exploits
available to attackers trying to evade detection.
Finally, passive detection allows us to deploy IDS sensors on a read-only cable
and in a passive tap conﬁguration, and still reap the beneﬁts of Active Mapping.
Acknowledgments
Thanks to Mike Frantzen, Kevin Smith, and Jim Bauer for assistance with this
work and reviews of this paper.
References
1. Shankar, Umesh.: Active Mapping: Resisting NIDS Evasion Without Altering Traf-
ﬁc http://www.cs.berkeley.edu/˜ushankar/research/active/activemap.pdf
(2003)
2. Spitzner, L.: Know Your Enemy: Passive Fingerprinting, Identifying remote hosts,
without them knowing. http://project.honeynet.org/papers/finger/
3. Ptacek, T. H., Newsham, T.N.: Insertion, Evasion and Denial of Service: Eluding
Network Intrusion Detection. Secure Networks, Inc. 1998.
http://www.aciri.org/vern/Ptacek-Newsham-Evasion-98.ps
4. Handley, M. and Paxson, V.: Network Intrusion Detection: Evasion, Traﬃc Normal-
ization, and End-to-End Protocol Semantics. Proc. 10th USENIX Security Sym-
posium, 2001.
http://www.icir.org/vern/papers/norm-usenix-sec-01-html/norm.html
5. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-Time. Com-
puter Networks, 1999.
6. Fyodor: The Art of Port Scanning.
206
G. Taleck
7. Fyodor: Remote OS detection via TCP/IP Stack FingerPrinting
http://www.insecure.org/nmap/nmap-fingerprinting-article.html
8. Smart, M., Malan, G., Jahanian, F,: Defeating TCP/IP Stack Fingerprinting. Proc.
9th USENIX Security Symposium. 2000.
9. Berrueta, D.B.: A practical approach for defeating Nmap OS-Fingerprinting
http://voodoo.somoslopeor.com/papers/nmap.html
10. Arkin O., Yarochkin, F.: Xprobe v2.0, A Fuzzy Approach to Remote Active Op-
erating System Fingerprinting.
http://www.sys-security.com/archive/papers/Xprobe2.pdf
11. Song, D.: fragroute. http://www.monkey.org/˜dugsong/fragroute/
12. Savage. queso. http://www.apostols.org/projects.html
13. Michal Zalewski, M., Stearns, W.: p0f. http://www.stearns.org/p0f/
14. Alberto Ornaghi, Marco Valleri.: ettercap. http://ettercap.sourceforge.net/
15. Yoann Vandoorselaere, et. al.: prelude-ids. http://www.prelude-ids.org/
16. Postel, J.: Internet Protocol, RFC 791. September 1981.
17. Postel, J.: Transmission Control Protocol, RFC 793. September 1981.
18. Jacobson, V., Braden, R., Borman, D.: TCP Extensions for High Performance,
RFC 1323. May 1992
19. Griﬃn, J.L.: Testing Protocol Implementation Robustness. 29th Annual Interna-
tional Symposium on Fault-Tolerant Computing, 15-18 June 1999.
20. Paxson, V.: Automated Packet Trace Analysis of TCP Implementations SIG-
COMM, 1997.
21. Padhye, J., Floyd, S: Identifying the TCP Behavior of Web Servers. ICSI Technical
Report 01-002, 2000.
22. Comer, D.E.: Probing TCP Implementations. Usenix Summer, 1994.
23. McCanne, S., Leres, C., Jacobson, V.: libpcap http://www.tcpdump.org/, 1994.
24. Veysset, F., Courtay, O., Heen, O,: New Tool and Technique For Remote Operating
System Fingerprinting Intranode Research Team. 2002.