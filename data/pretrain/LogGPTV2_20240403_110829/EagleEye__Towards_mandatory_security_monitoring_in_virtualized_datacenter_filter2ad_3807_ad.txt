### State Replication for File Writes

EagleEye maintains a per-VM table in the EagleEye daemon at Dom 0 for files that are opened for write access in each guest system, as shown in Figure 12. Each table entry corresponds to one file and contains the following information:
- The path to the file
- Associated file descriptors
- Memory-mapped views (if any)
- A buffer holding the data written to the file thus far

Every file write in the guest system results in an update to the corresponding table entry. File open and file write events are captured by intercepting the respective system calls. Memory-mapped file I/O is tracked by intercepting `NtUnmapViewOfSection`, `NtMapViewOfSection`, and `NtCreateSection`. When a mapped view is about to be closed or when the memory-mapped file is about to be closed, EagleEye synchronizes the data from the mapped memory regions to the write buffer. The associated memory-mapped views are then removed from the write buffer entry.

When a security monitor wants to access the content of a file, EagleEye serves the content through disk introspection by default. For data blocks that have just been overwritten, the content is pulled from the write buffer. This ensures that the security monitor always has a consistent view of the current file content as perceived by the guest system. If a write buffer entry has associated memory-mapped views, EagleEye first synchronizes data from the associated memory-mapped views to the write buffer before serving the write buffer data to the security monitor.

A write buffer block can be freed when the data held by the block has been flushed to the disk. The current implementation relies on a background garbage collection process to periodically introspect the disk to determine if the current block data has been reflected on the disk. A table entry can be safely released if all associated descriptors have been closed, and the content in the buffer has all been flushed to the disk. In the worst case, the current implementation may double the space required for disk storage. If storage space is a concern, further optimization can be employed to reduce the space cost. For instance, the virtual disk subsystem (e.g., QEMU-dm) can be hooked to detect guest disk flushing events, allowing the garbage collection process to be triggered timely.

### Assumptions of System Model

The implementation depends on knowledge of the entry/exit points of the guest system call dispatcher, the semantics of the guest system calls hooked by EagleEye (Table 2), and the guest application binary interface (ABI) formats. The implementation does not support SR-IOV network adaptors, but mandatory security monitoring of network traffic can be transparently implemented with well-established network intrusion detection appliances.

The quarantine of virus-infected files (Step 13 in Figure 10) is implemented by hooks in the QEMU block device emulation layer. If the guest VM has direct access to the block device controller and does not use the device emulation layer, the quarantine feature can instead be implemented as stealthy hooks in the guest kernel (requiring further knowledge of the guest system model) or possibly through extensions of the block device controller hardware.

### Benchmarks for the Experiments

- **7-zip Compression**: Compression of 13,791 files (collected from the folders `Windows\SysWOW64`, `Windows\System32`, and `Windows\Microsoft.NET` on a freshly installed Windows Server 2008) with a total size of 2.55GB. 7-Zip is configured to use 4 threads for compression.
- **7-zip Decompression**: Decompression of the above compressed file using only 1 thread.
- **Build ClamAV 0.97.5**: Building ClamAV from source code with Visual Studio 2010.
- **x264 Encoding**: Encoding a 508MB RMVB file with the x264 encoder, configured to use 4 threads.

### Evaluation

We evaluate EagleEye by comparing it with a baseline system running no security monitor and with systems running conventional in-VM security monitors, including Kaspersky Endpoint Security 8 and a home-made in-VM malware scanner, InVM_AV. InVM_AV is functionally equivalent to Kaspersky from the experiment point of view, except that it is based on the same ClamAV scan engine as used by EagleEye.

For all experiments, the host machine is equipped with two Intel Xeon E5520 processors (a total of 16 logical cores) and 16 GB of memory. The storage consists of 2 SATA HDDs configured in JBOD mode. The host OS is Fedora Core 14 x86_64. Each guest VM is configured with 4 VCPUs and 4 GB of memory, and the guest OS is Windows Server 2008 x86_64 R2.

#### Overall Performance

In this experiment, we evaluate the performance of EagleEye by looking at the running time of four benchmark programs (Table 1) under seven different security monitor setups: baseline, Kaspersky, Kaspersky*, InVM_AV, InVM_AV*, EE, and EE*.

- **Baseline Setup**: A clean VM guest system without any security monitor.
- **Kaspersky Setup**: A VM with Kaspersky Endpoint Security 8 installed inside the VM guest.
- **InVM_AV Setup**: A VM with the InVM_AV scanner installed inside the VM guest.
- **EE Setup**: Uses the EagleEye prototype system, which includes a modified Xen hypervisor, a modified QEMU device model with EagleEye extensions, and the EagleEye daemon with the ClamAV detection engine linked as a shared library. The Eagle daemon is configured to use 4 threads.

InVM_AV, Kaspersky, and EE only scan files with specific extensions such as .COM, .EXE, .DLL, .SYS, etc. (a total of 59 extensions in the filter). We also created three additional setups that scan all files.

### Benchmark Running Times

Figure 13 shows the benchmark running times for different security monitoring setups.

- **7-zip Compression**:
  - Baseline: 100%
  - Kaspersky: 141%
  - InVM_AV: 106%
  - EE: 95%

- **7-zip Decompression**:
  - Baseline: 100%
  - Kaspersky: 684%
  - InVM_AV: 1008%
  - EE: 721%

- **x264 Encoding**:
  - Baseline: 100%
  - Kaspersky: 2%
  - InVM_AV: 1%
  - EE: 1%

- **Build ClamAV**:
  - Baseline: 100%
  - Kaspersky: 694%
  - InVM_AV: 261%
  - EE: 29%

These results demonstrate the performance impact of different security monitoring setups on various benchmarks.