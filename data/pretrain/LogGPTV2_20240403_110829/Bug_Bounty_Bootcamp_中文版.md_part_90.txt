Yet the rise of API-centric applications means that companies and
applications expose more and more of their data and functionalities
through APIs. APIs often leak sensitive data and the application logic
of the hosting application. As you'll see, this makes API bugs a
widespread source of security breaches and a fruitful target for bug
hunters.
然而，API中心化应用的崛起意味着企业和应用通过API越来越多地暴露他们的数据和功能。API经常泄露敏感数据和托管应用程序的应用程序逻辑。正如您将看到的，这使得API漏洞成为安全漏洞的普遍来源和漏洞猎人的有利目标。
## Hunting for API Vulnerabilities {#c24.xhtml#h1-501546c24-0002}
Let's explore some of the vulnerabilities that affect APIs and the steps
you can take to discover them. API vulnerabilities are similar to the
ones that affect non-API web applications, so make sure you have a good
understanding of the bugs we've discussed up to this point. That said,
when testing APIs, you should focus your testing on the vulnerabilities
listed in this section, because they are prevalent in API
implementations.
让我们探索一些影响API的漏洞以及你可以采取的措施来发现它们。API漏洞与影响非API
Web应用程序的漏洞类似，因此请确保你对我们到目前为止讨论的错误有良好的理解。话虽如此，在测试API时，您应该专注于本部分列出的漏洞，因为它们在API实现中很普遍。
Before we dive in, there are many open source API development and
testing tools that you can use to make the API testing process more
efficient. Postman (
[https://www.postman.com/](https://www.postman.com/){.LinkURL} ) is a
handy tool that will help you test APIs. You can use Postman to craft
complex API requests from scratch and manage the large number of test
requests that you will be sending. GraphQL Playground (
[https://github.com/graphql/graphql-playground/](https://github.com/graphql/graphql-playground/){.LinkURL}
) is an IDE for crafting GraphQL queries that has autocompletion and
error highlighting.
在我们深入研究之前，有许多开源 API 开发和测试工具可用于使 API
测试过程更有效。Postman (https://www.postman.com/)
是一个方便的工具，可帮助您测试 API。您可以使用 Postman
从头开始构建复杂的 API 请求，并管理将要发送的大量测试请求。GraphQL
Playground (https://github.com/graphql/graphql-playground/)
是一个可用于编写 GraphQL 查询的 IDE，具有自动完成和错误突出显示。
ZAP has a GraphQL add-on (
[https://www.zaproxy.org/blog/2020-08-28-introducing-the-graphql-add-on-for-zap/](https://www.zaproxy.org/blog/2020-08-28-introducing-the-graphql-add-on-for-zap/){.LinkURL}
) that automates GraphQL introspection and test query generation.
Clairvoyance (
[https://github.com/nikitastupin/clairvoyance/](https://github.com/nikitastupin/clairvoyance/){.LinkURL}
) helps you gain insight into a GraphQL API's structure when
introspection is disabled.
ZAP拥有一个GraphQL附加组件（https://www.zaproxy.org/blog/2020-08-28-introducing-the-graphql-add-on-for-zap/），用于自动化GraphQL的introspection和测试查询生成。当introspection被禁用时，Clairvoyance（https://github.com/nikitastupin/clairvoyance/）可帮助您了解GraphQL
API的结构。
### Performing Recon {#c24.xhtml#h2-501546c24-0005}
First, hunting for API vulnerabilities is very much like hunting for
vulnerabilities in regular web applications in that it requires recon.
The most difficult aspect of API testing is knowing what the application
expects and then tailoring payloads to manipulate its functionality.
首先，寻找API漏洞与寻找常规Web应用程序中的漏洞非常相似，需要进行侦察。API测试最困难的方面在于了解应用程序的预期，然后定制有效负载以操作其功能。
If you're hacking a GraphQL API, you might start by sending
introspection queries to figure out the API's structure. If you are
testing a SOAP API, start by looking for the WSDL file. If you're
attacking a REST or SOAP API, or if introspection is disabled on the
GraphQL API you're attacking, start by enumerating the API. *API
enumeration* refers to the process of identifying as many of the API's
endpoints as you can so you can test as many endpoints as possible.
如果你正在攻击一个GraphQL
API，你可能会从发送自我检视查询开始，以了解API的结构。如果你正在测试一个SOAP
API，请从寻找WSDL文件开始。如果你攻击的是一个REST或SOAP API，或者GraphQL
API上的内省被禁用了，那么请从枚举API开始。API枚举是指识别尽可能多的API端点的过程，以便你可以测试尽可能多的端点。
[ ]{#c24.xhtml#Page_363 .pagebreak title="363"} To enumerate the API,
start by reading the API's public documentation if it has one. Companies
with public APIs often publish detailed documentation about the API's
endpoints and their parameters. You should be able to find public API
documentations by searching the internet for *company_name API* or
*company_name developer docs* . This documentation provides a good start
for enumerating API endpoints, but don't be fooled into thinking that
the official documentation contains all the endpoints you can test! APIs
often have public and private endpoints, and only the public ones will
be found in these developer guides.
要列举API，首先读取API的公共文档（如果有的话）。有公共API的公司通常会发布API端点和参数的详细文档。通过在互联网上搜索company_name
API或company_name开发者文档，您应该能够找到公共API文档。这份文档为列举API端点提供了良好的起点，但不要被认为官方文档包含了您可以测试的所有端点所欺骗！API通常具有公共和私有端点，而这些开发者指南中只有公共端点。
Try using Swagger ( [https://swagger.io/](https://swagger.io/){.LinkURL}
), a toolkit developers use for developing APIs. Swagger includes a tool
for generating and maintaining API documentation that developers often
use to document APIs internally. Sometimes companies don't publicly
publish their API documentation but forget to lock down internal
documentation hosted on Swagger. In this case, you can find the
documentation by searching the internet for *company_name inurl:swagger*
. This documentation often includes all API endpoints, their input
parameters, and sample responses.
尝试使用 Swagger（https://swagger.io/）------这是一款开发人员用于开发
API 的工具包。Swagger 包含一个用于生成和维护 API
文档的工具，开发人员通常使用它来在内部记录 API。有时，公司不会公开发布其
API 文档，但会忘记锁定托管在 Swagger
上的内部文档。在这种情况下，您可以通过在互联网上搜索 company_name
inurl：swagger 来查找文档。该文档通常包括所有 API
终结点、它们的输入参数和示例响应。
The next thing you can do is go through all the application workflows to
capture API calls. You can do this by browsing the company's
applications with an intercepting proxy recording HTTP traffic in the
background. You might find API calls used in the application's workflow
that aren't in public documentation.
下一步您可以浏览公司的应用程序并使用拦截代理记录后台HTTP流量来捕捉API调用。您可能会发现在应用程序工作流中使用的API调用并没有在公共文档中列出。
Using the endpoints you've found, you can try to deduce other endpoints.
For instance, REST APIs often have a predictable structure, so you can
deduce new endpoints by studying existing ones. If both
*/posts/POST_ID/read* and / *posts/POST_ID/delete* exist, is there an
endpoint called */posts/POST_ID/edit* ? Similarly, if you find blog
posts located at */posts/1234* and */posts/1236* , does / *posts/1235*
also exist?
通过已发现的端点，你可以尝试推断其他的端点。例如，REST API
经常有可预测的结构，所以你可以通过研究已有的端点推断新的端点。如果
/posts/POST_ID/read 和 /posts/POST_ID/delete 都存在，那么是否存在一个
/posts/POST_ID/edit 的端点呢？同样地，如果你发现博客文章位于 /posts/1234
和 /posts/1236，那么 /posts/1235 是否也存在？
Next, search for other API endpoints by using recon techniques from [
Chapter 5 ]{.xref itemid="xref_target_Chapter 5"} , such as studying
JavaScript source code or the company's public GitHub repositories. You
can also try to generate error messages in hopes that the API leaks
information about itself. For example, try to provide unexpected data
types or malformed JSON code to the API endpoints. Fuzzing techniques
can also help you find additional API endpoints by using a wordlist.
Many online wordlists are tailored for fuzzing API endpoints; one
example wordlist is at
[https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d/](https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d/){.LinkURL}
. We will talk more about how to fuzz an endpoint in [ Chapter 25
]{.xref itemid="xref_target_Chapter 25"} .
接下来，通过使用第5章的侦察技术，例如研究JavaScript源代码或公司的公共GitHub存储库，搜索其他API端点。您还可以尝试生成错误消息，以期望API泄露有关自身的信息。例如，尝试向API端点提供意外的数据类型或格式错误的JSON代码。模糊技术也可以通过使用单词表来帮助您找到其他API端点。许多在线单词表都是针对模糊API端点的;一个例子单词表网址为https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d/。我们将在第25章中更详细地讨论如何模糊端点。
Also note that APIs are often updated. While the application might not
actively use older versions of the API, these versions might still
elicit a response from the server. For every endpoint you find in a
later version of the API, you should test whether an older version of
the endpoint works. For example, if the */api/* ***v2***
*/user_emails/52603991338963203244* endpoint exists, does this one: /
*api/* ***v1*** */user_emails/52603991338963203244* ? Older versions of
an API often contain vulnerabilities that have been fixed in newer
versions, so make sure to include finding older API endpoints in your
recon strategy.
请注意，API通常会进行更新。虽然应用程序可能不会主动使用API的旧版本，但这些版本仍然可能引发服务器的响应。对于您在API的较新版本中找到的每个端点，都应该测试旧版本端点是否可行。例如，如果存在/api/v2/user_emails/52603991338963203244端点，那么这个端点/api/v1/user_emails/52603991338963203244是否存在？API的旧版本通常包含修复在较新版本中修复的漏洞，因此请确保包括在您的recon策略中发现旧的API端点。
[ ]{#c24.xhtml#Page_364 .pagebreak title="364"} Finally, take the time
to understand each API endpoint's functionality, parameters, and query
structure. The more you can learn about how an API works, the more
you'll understand how to attack it. Identify all the possible user data
input locations for future testing. Look out for any authentication
mechanisms, including these:
最后，请花时间了解每个API端点的功能、参数和查询结构。您了解API如何运作，就越能理解如何攻击它。识别所有可能的用户数据输入位置以备未来测试。留意任何身份验证机制，包括以下内容：
-   What access tokens are needed?
-   Which endpoints require tokens and which do not?
-   How are access tokens generated?
-   Can users use the API to generate a valid token without logging in?
-   Do access tokens expire when updating or resetting passwords?
Throughout your recon process, make sure to take lots of notes. Document
the endpoints you find and their parameters.
在整个侦察过程中，一定要记下很多笔记。记录你找到的端点及其参数。
### Testing for Broken Access Control and Info Leaks {#c24.xhtml#h2-501546c24-0006}
After recon, I like to start by testing for access-control issues and
info leaks. Most APIs use access tokens to determine the rights of the
client; they issue access tokens to each API client, and clients use
these to perform actions or retrieve data. If these API tokens aren't
properly issued and validated, attackers might bypass authentication and
access data illegally.
在重新调查之后，我喜欢从测试访问控制问题和信息泄露开始。大多数API使用访问令牌来确定客户端的权限；它们向每个API客户端发放访问令牌，客户端使用这些令牌执行操作或检索数据。如果这些API令牌没有正确发放和验证，攻击者可能会绕过身份验证并非法访问数据。
For example, sometimes API tokens aren't validated after the server
receives them. Other times, API tokens are not randomly generated and
can be predicted. Finally, some API tokens aren't invalidated regularly,
so attackers who've stolen tokens maintain access to the system
indefinitely.
例如，有时服务器收到 API 令牌后并不会验证它们。有时，API
令牌不是随机生成的，可以被预测出来。最后，有些 API
令牌不会定期失效，因此窃取令牌的攻击者可以无限期地访问该系统。
Another issue is broken resource or function-level access control.
Sometimes API endpoints don't have the same access-control mechanisms as
the main application. For example, say a user with a valid API key can
retrieve data about themselves. Can they also read data about other
users? Or can they perform actions on another's behalf through the API?
Finally, can a regular user without admin privileges read data from
endpoints restricted to admins? Separately from REST or SOAP APIs, the
GraphQL API of an application may have its own authorization mechanisms
and configuration. This means that you can test for access-control
issues on GraphQL endpoints even though the web or REST API of an
application is secure. These issues are similar to the IDOR
vulnerabilities discussed in [ Chapter 10 ]{.xref
itemid="xref_target_Chapter 10"} .
另一个问题是资源或功能级别的访问控制被破坏。有时API端点没有与主要应用程序相同的访问控制机制。例如，如果一个拥有有效API密钥的用户可以检索有关自己的数据，那么他们是否也可以读取其他用户的数据？或者他们是否可以通过API代表其他人执行操作？最后，普通用户是否可以在没有管理员权限的情况下读取仅限管理员的端点的数据？除REST或SOAP
API之外，应用程序的GraphQL
API可能具有其自己的授权机制和配置。这意味着即使应用程序的Web或REST
API是安全的，您也可以测试GraphQL端点的访问控制问题。这些问题类似于第10章讨论的IDOR漏洞。
Other times still, an API offers multiple ways to perform the same
action, and access control isn't implemented across all of them. For
example, let's say that a REST API has two ways of deleting a blog post:
sending a POST request to */posts/POST_ID/delete* and sending a DELETE
request to */posts/POST_ID* . You should ask yourself: are the two
endpoints subject to the same access controls?
有时候，API
提供了多种执行相同操作的方式，而访问控制并没有在所有方式上实现。例如，假设一个
REST API 有两种删除博客文章的方法：向 /posts/POST_ID/delete 发送 POST
请求和向 /posts/POST_ID 发送 DELETE
请求。你应该问问自己：这两个端点是否受到相同的访问控制？
Another common API vulnerability is information leaks. API endpoints
often return more information than they should, or than is needed to
render the web page. For example, I once found an API endpoint that
populated a user's profile page. When I visited someone else's profile
page, an API call was used to return the profile owner's information. At
first glance, the profile [ ]{#c24.xhtml#Page_365 .pagebreak
title="365"} page didn't leak any sensitive information, but the API
response used to fetch the user's data actually returned the profile
owner's private API token as well! After an attacker steals the victim's
API token by visiting their profile page, they could impersonate the
victim by using this access token.
另一个常见的API漏洞是信息泄露。API端点通常返回比所需或应返回的信息多。举例来说，我曾经发现了一个API端点，用于填充用户的个人资料页面。当我访问其他人的个人资料页面时，API调用则用于返回资料所有者的信息。初看起来，个人资料页面并未泄漏任何敏感信息，但用于获取用户数据的API响应实际上还返回了资料所有者的私人API令牌！攻击者在访问受害者的个人资料页面后，可以窃取其API令牌，并利用该访问令牌冒充受害者。
Make a list of the endpoints that should be restricted by some form of
access control. For each of these endpoints, create two user accounts
with different levels of privilege: one that should have access to the
functionality and one that shouldn't. Test whether you can access the
restricted functionality with the lower-privileged account.
制定一个应该受到某种访问控制限制的端点列表。对于这些端点中的每一个，创建两个不同权限级别的用户账户：一个应该有权访问功能，另一个则没有权限。测试您是否可以使用低权限账户访问受限功能。
If your lower-privileged user can't access the restricted functionality,
try removing access tokens, or adding additional parameters like the
cookie `      admin=1     ` to the API call. You can also switch out the
HTTP request methods, including GET, POST, PUT, PATCH, and DELETE, to
see if access control is properly implemented across all methods. For
example, if you can't edit another user's blog posts via a POST request
to an API endpoint, can you bypass the protection by using a PUT request
instead?
如果您的低权限用户无法访问受限功能，则可以尝试移除访问令牌或添加其他参数，比如添加Cookie
admin=1到API调用中。您也可以更改HTTP请求方法，包括GET、POST、PUT、PATCH和DELETE，以查看是否对所有方法正确实施访问控制。例如，如果您无法通过POST请求到API端点来编辑另一个用户的博客文章，那么您是否可以通过使用PUT请求来绕过保护？
Try to view, modify, and delete other users' info by switching out user
IDs or other user identification parameters found in the API calls. If
IDs used to identify users and resources are unpredictable, try to leak
IDs through info leaks from other endpoints. For example, I once found