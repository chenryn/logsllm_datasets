manager.service 才行的意思。 好了！那么通过同样的方式，我们来找找 multi-user.target 要执行完毕得要载入的项目有哪些呢？
# 先来看看 multi-user.target 配置文件内规范了相依的操作环境有哪些呢？
[root@study ~]# cat /usr/lib/systemd/system/multi-user.target
[Unit]
Description=Multi-User System
Documentation=man:systemd.special（7）
Requires=basic.target
Conflicts=rescue.service rescue.target
After=basic.target rescue.service rescue.target
AllowIsolate=yes
[Install]
Alias=default.target
# 然后看看系统默认要载入的 unit 有哪些？
[root@study ~]# ls /usr/lib/systemd/system/multi-user.target.wants
brandbot.path plymouth-quit.service systemd-logind.service
dbus.service plymouth-quit-wait.service systemd-user-sessions.service
getty.target systemd-ask-password-wall.path
# 使用者自订要载入的 unit 又有哪些呢？
[root@study ~]# ls /etc/systemd/system/multi-user.target.wants
abrt-ccpp.service crond.service mdmonitor.service sshd.service
abrtd.service hypervkvpd.service ModemManager.service sysstat.service
abrt-oops.service hypervvssd.service NetworkManager.service tuned.service
abrt-vmcore.service irqbalance.service postfix.service vmtoolsd.service
abrt-xorg.service kdump.service remote-fs.target vsftpd2.service
atd.service ksm.service rngd.service vsftpd.service
auditd.service ksmtuned.service rsyslog.service
backup2.timer libstoragemgmt.service smartd.service
backup.timer libvirtd.service sshd2.service
通过上面的结果，我们又能知道 multi-usre.target 需要在 basic.target 运行完毕才能够载入上述的许多 unit 哩！然后再去 basic.target 里
头找数据等等～ 最终这些数据就可以通过“ systemctl list-dependencies graphical.target ”这个指令来列出所有的相关性的服务啰！这就是
systemd 的调用所需要的服务的流程喔！
Tips
要知道系统的服务启用的流程，最简单的方法就是“ systemctl list-dependencies graphical.target ”这个指令！只是，如果你想要知道
背后的配置文件意义， 那就是分别去找出 /etc 与 /usr/lib 下面的 graphical.target.wants/ 目录下的数据就对了！当然，配置文件脚本里面的
Requires 这个设置值所代表的服务， 也是需要是先载入喔！
约略分析一下“ systemctl list-dependencies graphical.target ”所输出的相依属性服务，基本上我们 CentOS 7.x 的 systemd 开机流程大约
是这样：
1. local-fs.target + swap.target：这两个 target 主要在挂载本机 /etc/fstab 里面所规范的文件系统与相关的内存交换空间。
2. sysinit.target：这个 target 主要在侦测硬件，载入所需要的核心模块等动作。
3. basic.target：载入主要的周边硬件驱动程序与防火墙相关任务
4. multi-user.target 下面的其它一般系统或网络服务的载入
5. 图形界面相关服务如 gdm.service 等其他服务的载入
除了第一步骤 local-fs.target, swap.target 是通过 /etc/fstab 来进行挂载的行为之外，那其他的 target 有做啥动作呢？简单得来说说！
如果你自己使用“ systemctl list-dependencies sysinit.target ”来瞧瞧的话，那就会看到很多相依的服务！这些服务你应该要一个一个去查
询看看设置脚本的内容， 就能够大致理解每个服务的意义。基本上，我们可以将这些服务归类成几个大项就是了：
特殊文件系统设备的挂载：包括 dev-hugepages.mount dev-mqueue.mount 等挂载服务，主要在挂载跟巨量内存分页使用与讯息伫列的功
能。 挂载成功后，会在 /dev 下面创建 /dev/hugepages/, /dev/mqueue/ 等目录；
特殊文件系统的启用：包括磁盘阵列、网络磁盘 （iscsi）、LVM 文件系统、文件系统对照服务 （multipath） 等等，也会在这里被侦测
与使用到！
开机过程的讯息传递与动画执行：使用 plymouthd 服务搭配 plymouth 指令来传递动画与讯息
日志式登录文件的使用：就是 systemd-journald 这个服务的启用啊！
载入额外的核心模块：通过 /etc/modules-load.d/*.conf 文件的设置，让核心额外载入管理员所需要的核心模块！
载入额外的核心参数设置：包括 /etc/sysctl.conf 以及 /etc/sysctl.d/*.conf 内部设置！
启动系统的乱数产生器：乱数产生器可以帮助系统进行一些密码加密演算的功能
设置终端机 （console） 字形
启动动态设备管理员：就是 udevd 这个家伙！用在动态对应实际设备存取与设备文件名对应的一个服务！相当重要喔！也是在这里启动
的！
不论你即将使用哪种操作环境来使用系统，这个 sysinit.target 几乎都是必要的工作！从上面你也可以看的出来，基本的核心功能、文件
系统、文件系统设备的驱动等等， 都在这个时刻处理完毕～所以，这个 sysinit.target 的阶段是挺重要的喔！
执行完 sysinit.target 之后，再来则是 basic.target 这个项目了。 sysinit.target 在初始化系统，而这个 basic .target 则是一个最阳春的操
作系统了！ 这个 basic.target 的阶段主要启动的服务大概有这些：
载入 alsa 音效驱动程序：这个 alsa 是个音效相关的驱动程序，会让你的系统有音效产生啰；
载入 firewalld 防火墙：CentOS 7.x 以后使用 firewalld 取代 iptables 的防火墙设置，虽然最终都是使用 iptables 的架构， 不过在设置上面
差很多喔！
载入 CPU 的微指令功能；
启动与设置 SELinux 的安全本文：如果由 disable 的状态改成 enable 的状态，或者是管理员设置强制重新设置一次 SELinux 的安全本
文， 也在这个阶段处理喔！
将目前的开机过程所产生的开机信息写入到 /var/log/dmesg 当中
由 /etc/sysconfig/modules/*.modules 及 /etc/rc.modules 载入管理员指定的模块！
载入 systemd 支持的 timer 功能；
在这个阶段完成之后，你的系统已经可以顺利的运行！就差一堆你需要的登陆服务、网络服务、本机认证服务等等的 service 类别啰！
于是就可以进入下个服务启动的阶段了！
在载入核心驱动硬件后，经过 sysinit.target 的初始化流程让系统可以存取之后，加上 basic.target 让系统成为操作系统的基础， 之后就
是服务器要顺利运行时，需要的各种主机服务以及提供服务器功能的网络服务的启动了。这些服务的启动则大多是附挂在 multi-user.target 这
个操作环境下面， 你可以到 /etc/systemd/system/multi-user.target.wants/ 里头去瞧瞧默认要被启动的服务喔！
也就是说，一般来说服务的启动脚本设置都是放在下面的目录内：
/usr/lib/systemd/system （系统默认的服务启动脚本设置）
/etc/systemd/system （管理员自己开发与设置的脚本设置）
而使用者针对主机的本机服务与服务器网络服务的各项 unit 若要 enable 的话，就是将它放到 /etc/systemd/system/multi-
user.target.wants/ 这个目录下面做个链接～ 这样就可以在开机的时候去启动他。这时回想一下，你在第十七章使用 systemctl enable/disable
时，系统的回应是什么呢？再次回想一下：
# 将 vsftpd.service 先 disable 再 enable 看看输出的信息为何？
[root@study ~]# systemctl disable vsftpd.service
rm '/etc/systemd/system/multi-user.target.wants/vsftpd.service'
[root@study ~]# systemctl enable vsftpd.service
ln -s '/usr/lib/systemd/system/vsftpd.service' '/etc/systemd/system/multi-user.target.
wants/vsftpd.service'
有没有发现亮点了？不是从 /etc/systemd/system/multi-user.target.wants/ 里面删除链接文件，就是创建链接文件～这样说，理解吧？ 你
当然不需要手动作这些链接，而是使用 systemctl 来处理即可！另外，这些程序除非在脚本设置里面原本就有规范服务的相依性， 这样才会有
顺序的启动之外，大多数的服务都是同时启动的！这就是 systemd 的多任务啰。
相相容容 systemV 的的 rc-local.service
另外，过去用过 Linux 的朋友大概都知道，当系统完成开机后，还想要让系统额外执行某些程序的话，可以将该程序指令或脚本的绝对
路径名称写入到 /etc/rc.d/rc.local 这个文件去！新的 systemd 机制中，它建议直接写一个 systemd 的启动脚本配置文件到 /etc/systemd/system
下面，然后使用 systemctl enable 的方式来设置启用它，而不要直接使用 rc.local 这个文件啦！
但是像鸟哥这种老人家就是喜欢将开机后要立刻执行的许多管理员自己的脚本，将它写入到 /etc/rc.d/rc.local 去嘛！那新版的 systemd
有没有支持呢？ 当然有！那就是 rc-local.service 这个服务的功能了！这个服务不需要启动，它会自己判断 /etc/rc.d/rc.local 是否具有可执行的
权限来判断要不要启动这个服务！ 你可以这样检查看看：
# 1. 先看一下 /etc/rc.d/rc.local 的权限，然后检查 multi-user.target 有没有这个服务
[root@study ~]# ll /etc/rc.d/rc.local
-rw-r--r--. 1 root root 473 Mar 6 13:48 /etc/rc.d/rc.local
[root@study ~]# systemctl status rc-local.service
rc-local.service - /etc/rc.d/rc.local Compatibility
Loaded: loaded （/usr/lib/systemd/system/rc-local.service; static）
Active: inactive （dead）
[root@study ~]# systemctl list-dependencies multi-user.target | grep rc-local
# 明明就有这个服务，但是 rc.local 不具有可执行 （x） 的权限，因此这个服务不会被执行
# 2. 加入可执行权限后，再看一下 rc-local 是否可被启用！
[root@study ~]# chmod a+x /etc/rc.d/rc.local; ll /etc/rc.d/rc.local
-rwxr-xr-x. 1 root root 473 Mar 6 13:48 /etc/rc.d/rc.local
[root@study ~]# systemctl daemon-reload
[root@study ~]# systemctl list-dependencies multi-user.target | grep rc-local
├─rc-local.service # 这个服务确实被记录到启动的环境下啰！
通过这个 chmod a+x /etc/rc.d/rc.local 的步骤，你的许多脚本就可以放在 /etc/rc.d/rc.local 这个文件内， 系统在每次开机都会去执行这文
件内的指令喔！非常简单吧！
提提供供 tty 界界面面与与登登陆陆的的服服务务
在 multi-user.target 下面还有个 getty.target 的操作界面项目喔！ 这个项目就是我们在第十七章用来举例的 tty 终端机界面的个数案例。
能不能提供适当的登陆服务也是 multi-user.target 下面的内容！包括 systemd-logind.service, systemd-user-sessions.service 等服务。
比较有趣的地方是，由于服务都是同步运行，不一定哪个服务先启动完毕。如果 getty 服务先启动完毕时，你会发现到有可用的终端机
尝试让你登陆系统了。 问题是，如果 systemd-logind.service 或 systemd-user-sessions.service 服务尚未执行完毕的话，那么你还是无法登陆
系统的。
Tips
有些比较急性子的伙伴在启动 CentOS 7.x 时，看到屏幕出现 tty1 可以让他登陆了～但是一开始输入正确的帐密却无法登陆系统！ 总要隔了
数十秒之后才能够顺利的登陆！知道原因了吗？ ^_^
如果你的 default.target 是 multi-user.target 的话，那么这个步骤就不会进行。反之，如果是 graphical.target 的话，那么 systemd 就会开
始载入用户管理服务与图形界面管理员 （window display manager, DM） 等，启动图形界面来让用户以图形界面登陆系统喔！ 如果你对于
graphical.target 多了哪些服务有兴趣，那就来检查看看：
[root@study ~]# systemctl list-dependencies graphical.target
graphical.target
├─accounts-daemon.service
├─gdm.service
├─network.service