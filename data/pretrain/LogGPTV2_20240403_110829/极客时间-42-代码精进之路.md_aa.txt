# 42 - 代码精进之路

## 开篇词 | 你写的每一行代码，都是你的名片

你好，我是范学雷，目前担任Oracle的主任工程师，并且是OpenJDK和Java安全的评审成员。很高兴与你探讨如何编写高质量的代码。

我的计算机编程之旅始于1994年，那时我还是一个大学一年级的学生。当时的计算机技术正处于快速发展阶段，但“互联网”这个概念还未普及。我们使用的计算机是286型号，操作系统为DOS，主要编程语言为Fortran和C语言，而Java尚未问世。每次上课，我都需要携带一张容量仅为360KB的5.25英寸软盘，这张脆弱的存储介质常常出现问题，令人头疼不已。那时候，拥有一张1.44MB容量的高密度3.5英寸软盘成了我最大的愿望之一。

尽管初期对编程并不特别感兴趣，但在大四时发生的两件事彻底改变了我对这一领域的看法：一位同学开发了一个五子棋人机对弈程序，在班级中无人能敌；另一位同学则选择了密码学作为研究方向，并乐于分享他的发现。这两件事不仅激发了我对编程的兴趣，还让我意识到了软件开发背后所蕴含的巨大潜力。

### 从新手到专家的成长之路

随着职业生涯的发展，我逐渐认识到写出好代码的重要性。刚开始时，即便是几十行代码也让我感到困难重重，但通过不断实践以及前辈们的指导，我的编码技能得到了显著提升。大约到了2000年左右，我已经能够高效地完成数千行甚至更多的代码编写任务了。

加入Java安全团队之后的经历进一步提升了我的专业水平。在那里，我见证了优秀设计与高质量代码是如何诞生的，这促使我从单纯追求数量转变为重视质量。回顾过去的作品，我发现早期编写的代码存在诸多不足之处——这或许是每位开发者必经的成长过程吧。

阅读他人代码同样教会了我很多宝贵的经验教训。作为OpenJDK社区的一员，我有幸参与了许多项目的代码审查工作。在这个过程中，我学会了识别潜在问题、提出改进建议，并帮助贡献者们提高他们的编程技巧。

总之，无论处于哪个阶段，持续学习并追求卓越始终是我们作为程序员应该坚持的方向。希望本专栏能够成为你成长道路上的一份指南，让我们一起探索如何写出更加优雅高效的代码吧！

---

# 01 | 从条件运算符说起，反思什么是好代码

撰写优质代码是每位程序员毕生追求的目标。那么究竟什么样的代码才能被称为“好”的呢？这个问题可能每个人心中都有不同的答案。今天我想围绕条件运算符（?:）展开讨论，分享一些个人见解。

在C语言领域内，关于是否使用条件运算符一直存在着争议。有人认为它可以使代码变得简洁明了，例如《C程序设计语言》一书中就大量采用了这种方式；但也有人坚决反对，主张永远不要使用这种结构。下面给出两个示例，请思考哪段代码更符合您的审美标准？

```java
if (variable != null) {
    return variable.getSomething();
}
return null;
```

对比之下：

```java
return variable != null ? variable.getSomething() : null;
```

或者更复杂的例子：

```java
return x >= 90 ? "A" : x >= 80 ? "B" : x >= 70 ? "C" : x >= 60 ? "D" : "E";
```

曾经我也偏好使用条件运算符来压缩代码长度，直到后来有同事指出这样做可能会增加理解难度。确实，看似简单直观的表达式实际上很容易隐藏错误。因此，选择易于理解和维护的方式进行编码变得尤为重要。

此外，随着时间推移和技术进步，“好”代码的标准也在发生变化。现代编程语言如Kotlin和Go已经放弃了对条件运算符的支持，转而提倡更加清晰易懂的语法结构。由此可见，适应环境变化并不断调整自己的编码习惯对于保持竞争力至关重要。

最后总结一下我个人对于“好”与“坏”代码的看法：
- “好”代码应当容易被理解、无明显安全隐患、满足核心需求、附带充分文档说明及经过严格测试。
- 相反，“坏”代码往往难以读懂、消耗过多资源、风格不一致且未经充分验证。

希望通过这些分享能够对你有所启发，在今后的工作中努力创造出更多优秀的作品！