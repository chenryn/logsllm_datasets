the OS emulation layer to initiate the enclave initialization
process. Note that the starting address of EPC for loading is
statically determined by the base address of code and the data
section so that the base address remains the same after loading
into EPC.
D. OpenSGX User Library
sgxlib is a user-level library for enclave that is designed
to (1) facilitate the enclave programming and (2) minimize the
attack surface between the enclave and its potentially malicious
host process. Table IV lists APIs implemented by sgxlib,
classified into HOST for host applications and ENCLAVE for
enclave programs. This section describes the design decisions
made in sgxlib and its security considerations.
Custom in-enclave library. Standard C libraries, such as
glibc, are frequently used by normal C programs. However,
using standard C libraries inside an enclave raises two concerns:
(1) any function call that relies on OS features or resources
will break the execution of enclave programs and (2) enabling
such functions opens up new attack surfaces (e.g., malicious
host can return a crafted input to the enclave). Thus, we
implement a number of custom library functions that have
a similar counterpart in the standard library, but we add a
sgx_ prefix to distinguish the two (e.g., sgx_memmove() for
memmove()).
Trampoline and stub. Although an enclave can legitimately
7
Host ProgramCode.enc_textOpenSGX-aware Binaryopensgx_load()codesgxlib.sgx0x8000Enclave code/dataEnclave codeEnclave data0x8000.enc_dataEPC pagessys_create_enclave()SECS, TCS, SSASECS, TCS, SSAType
API
void sgx_init(void)
void sgx_enter(tcs_t tcs, void (*aep)())
void sgx_resume(tcs_t tcs, void (*aep)())
int sgx_host_read(void *buf, int len)
int sgx_host_write(void *buf, int len)
void launch_quoting_enclave(void)
HOST
HOST
HOST
HOST
HOST
HOST
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
ENCL
void sgx_exit(void *addr)
void sgx_remote(const struct sockaddr *target_addr, socklen_t addrlen)
void sgx_getkey(keyrequest_t keyreq, void *key)
void sgx_getreport(targetinfo_t info, reportdata_t data, report_t *report)
int sgx_enclave_read(void *buf, int len)
int sgx_enclave_write(void *buf, int len)
void *sgx_memcpy(void *dest, const void *src, size_t size)
void *sgx_memmove(void *dest, const void *src, size_t size)
void sgx_memset(void *ptr, int value, size_t num)
int sgx_memcmp(const void *ptr1, const void *ptr2, size_t num)
size_t sgx_strlen(const char *string)
int sgx_strcmp(const char *p1, const char *p2)
int sgx_printf(const char *format, ...)
TABLE IV: List of APIs in sgxlib. HOST APIs are for host process and ENLC is for in-enclave use.
Description
Perform system initialization
EENTER wrapper
ERESUME wrapper
Read from enclave
Write to enclave
Launch quoting enclave
EEXIT wrapper
Request remote attestation
EGETKEY wrapper
EREPORT wrapper
Read from host
Write to host
Memory copy
Memory copy
Memory set to the specified value
Memory comparison
Get string length
String comparison
Write formatted data to standard out
access the host memory shared outside the enclave, it is not a
recommended practice since a malicious host or operating
system can potentially modify non-enclave memory. Thus,
instead of allowing such a practice, OpenSGX provides a
stricter form of communication protocol by using shared
code and data memory—we call them trampoline and stub,
respectively. The use of trampoline and stub defines a narrow
interface to the enclave, which is readily tractable for enforcing
the associated security properties.
The communication is one-way and entirely driven by
the requesting enclave. For example, to request a socket for
networking (see Figure 4), the enclave first sets up the input
parameters in stub (e.g., sets fcode to FSOCKET in Figure 4),
and then invokes a predefined handler, trampoline, by exiting
its enclave mode (i.e., by invoking EEXIT). Once the host
program (or OS) processes the enclave request, it stores the
result or return values to stub and enters the enclave mode
again by invoking ERESUME. After transferring the program’s
control back to the known location inside the enclave, the
enclave program can finally obtain the returned value (e.g.,
socket via in_arg0 in stub). The current design of trampoline
and stub is extensible enough for other purposes, allowing
customization by enclave developers without reinventing the
whole communication protocols.
Enclave-Host communication. sgxlib provides a dedicated
communication channel between an enclave and its host, similar
to a pipe. The host program sends data via sgx_host_write()
(respectively sgx_host_read() for receiving) and the en-
clave receives data via sgx_enclave_read() (respectively
sgx_enclave_write() for sending). The communication APIs
are implemented by using stub (without trampoline). More
specifically, we pre-allocate two memory blocks alongside stub
to support two different data flows. For security reasons, the
memory block is cleared before/after each write/read operation.
Dynamic memory allocation. Although it
is permitted
for an enclave program to use dynamically allocated host
memory, it can severely break the enclave isolation feature.
To avoid this, sgxlib supports a customized dynamic memory
allocation API, sgx_malloc(), which behaves similarly to glibc
malloc() [50], but only allocates memory from the enclave
heap (pre-allocated EPC pages, see Figure 3). sgx_malloc()
Fig. 4: Interface defined for communicating with the enclave’s host
program that performs the delegated calls to the operating system. In
this figure, a sgxlib library, sgx_socket(), running inside the enclave,
requests a socket system call via trampoline and stub, which are
pre-negotiated between the enclave and its wrapper when packaged
together.
manages the enclave heap by maintaining heap pointers, which
are initially set to the heap with the aid of OS during the
first initial sgx_malloc() call. When a pre-allocated heap area
becomes full, sgx_malloc() leverages the dynamic EPC page
allocation (via sys_add_epc()) to extend the enclave heap. With
EAUG/EACCEPT, the dynamic EPC page allocation ensures that
only a zero-filled EPC page, with an associated pending bit of
EPCM, is added to the enclave that invoked EACCEPT. Since the
pending bit can be switched only by executing EAUG/EACCEPT,
a malicious OS cannot deceive (Iago attack) the enclave to
add another EPC page. If an attacker passes an address that
overlaps an EPC stack page to EACCEPT, it returns an error
code.
Defense against malicious host application and OS. To
provide enclave with the ability to communicate with host
application or OS, it is unavoidable to introduce additional
attack surfaces to the enclave, which is often known as Iago
attacks [11]. sgxlib is designed after careful consideration of
the Iago attacks, broadly in three aspects: dynamic memory
allocation, network and I/O, and non-determinism/resources.
Note that Intel SGX neither prevents denial-of-service attacks
nor guarantees strong privacy (e.g., IP address), but provides
strong isolation and confidentiality. With this in mind, we
inspect potential attack surfaces in Table V and discuss defenses
8
Enclave ProgramCode...sgxlibTrampolineStubHost Programin_arg0sgx_socket_tramp()EEXITERESUMEfcodeout_arg0out_arg1out_arg2...(shared)sgx_socket(){  ...}fcode  → FSOCKETout_arg0  → domainout_arg1 → typeout_arg2 → protocolreturn → in_arg0sgx_socket()socket(out_arg0,          out_arg1,          out_arg2) →EPC pagesShared memoryType
MEM
MEM
DBG
TIME
RAND
IO
IO
IO
NET
NET
NET
NET
NET
NET
NET
Interface
sgx_malloc() → addr
sgx_free() → N/A
sgx_puts() → N/A
sgx_time() → time
sgx_rand() → rand
sgx_write() → len
sgx_read(*buf) → len
sgx_close() → N/A
sgx_socket() → fd
sgx_send() → N/A
sgx_recv(*buf) → len
sgx_accept() → fd
sgx_bind() → N/A
sgx_listen() → N/A
sgx_connect() → err
Attack surfaces
1) incorrect pointers 2) incorrect EPC page addition
1) not freed (used later for use-after-free)
1) ignored output
1) arbitrary time
1) arbitrary value
1) arbitrary reported len
1) crafted buf, 2) incorrect len
1) not closed
1) non-closed fd, 2) incorrect fd
1) ignored
1) crafted buf, 2) incorrect len
1) pre-allocated fd, 2) arbitrary number
1) failed binding
1) failed listen
1) failed connection
In-enclave usage/check
EACCEPT verifies the status of a new EPC page
sgx_free() fills a freed chunk with zero
No general way to prevent without trusted I/O
Validate time from the NTP server (not implemented)
Relying on rdrand inst (emulated if not supported)
No general way to prevent without trusted I/O
Encrypted message with integrity checking
Never reuse fd (monotonically increasing int)
Relying on packet encryption
Relying on packet encryption
Relying on packet encryption
Relying on packet encryption
Stop-on-failure
Stop-on-failure
Stop-on-failure
TABLE V: Consideration of Iago attacks in primitive sgxlib functions that are implemented by using the shared trampoline between host and
enclave programs. Note that Intel SGX does not consider denial-of-service attacks (e.g., stopping enclave execution) nor strong privacy (e.g.,
where to talk to).
on each category of attack.
• Memory-related operations (marked MEM): Since the Intel
SGX revision 2, enclave programs can dynamically request
EPC pages at runtime, which opens a large attack surface,
traditionally known as Iago attacks. However, Intel SGX
takes this into account and provides an EACCEPT instruction
that performs basic validation on newly assigned EPC pages
(e.g., non-enclave pages or pre-allocated EPC pages), which
thwarts a major source of memory-related attacks.
• Network and I/O services (marked IO, NET): Two prin-
ciples are considered to prevent network- and I/O-related
attacks: encryption and the fail-stop model. To guarantee the
confidentiality of packets, enclave programs should encrypt
all out-going packets and also validate the integrity and
authenticity of packets on all incoming packets. Upon any
failure, the enclave stops its execution, which dramatically
reduces the potential attack surface in handling all errors
and corner cases.
• Non-determinism and resources (marked DBG, TIME,
RAND): Enclave programs often need time and randomness
to provide rich experiences to users. To prevent Iago attacks,
OpenSGX attempts to fetch such values from trusted parties:
time from trusted entities (e.g., an encrypted packet from
known NTP servers) or randomness from trusted CPU (e.g.,
rdrand instruction).
Remote Attestation. OpenSGX provides sgx_remote() with
which the programmers can readily generate a remote attestation
request in an enclave program through a single API. It uses
sgx_getkey() and sgx_getreport() to get a report key and
create a report. By specifying the socket information of a target
enclave, a challenger can issue a remote attestation to check
(1) the correctness of the target program (based on the hash
of EPC contents) and (2) whether it is actually running inside
an enclave on the SGX-enabled platform (MAC with report
key). To launch and service a special enclave called quoting
enclave that verifies a target enclave through intra-attestation,
OpenSGX also provides launch_quoting_enclave() host API.
The overall procedure of remote attestation in OpenSGX is
implemented based on the SGX specification [2] by using an
RSA key scheme as an alternative to EPID (see §IV-A).
E. Debugging
Debugging is an essential feature for OpenSGX program-
mers to develop SGX-aware applications. As a software
emulator, OpenSGX can be easily integrated with a mature
debugging infrastructure such as gdb, not only to mimic Intel
SGX debugging-related instructions but also to examine the
status of internal hardware.
Debugging hardware. The hardware components of Intel SGX
are neither observable nor modifiable in real hardware. However,
because OpenSGX emulates them using software, developers
can observe the inner working of Intel SGX instructions and
internal data structures stored inside the hardware (e.g., EPCM).
OpenSGX provides a gdb interface to debug its emulated
hardware components.
Debugging enclaves. Since OpenSGX is implemented by
using QEMU’s dynamic code translation (known as TCG),
the gdb on OpenSGX can only see the instructions translated
by the TCG, not the application’s original instructions. To
provide a single stepping feature in debugging an enclave code,
we implement gdb-stub, which is a platform to support a
bridge to the remote gdb instance. The gdb-stub inside QEMU
helps gdb to understand the context of the enclave’s original
instructions, thus enabling a convenient single-step debugging.
Once a remote gdb instance is connected, developers can debug
enclave programs with a familiar gdb interface.
New gdb commands. On top of the built-in gdb commands,
OpenSGX provides four new useful gdb commands that
researchers can use in debugging enclave programs. They are
info epc, info epcm, and info secs to examine EPC-related
data structure, and list enclaves to list all the active enclaves
(and their contexts) with corresponding eid. All new commands
are implemented by using the gdb-python script.
F. Performance Monitoring
Unlike real hardware,
the emulation environment can
provide a precise, yet flexible way to measure performance
aspects of running enclaves. Since the wall-clock time is not
a meaningful metric in OpenSGX, we provide various other
metrics (e.g., context switches, invocations of SGX instructions)
that are useful to understand the performance characteristics
of an enclave.
OpenSGX keeps track of such information in a per-enclave
9
Component
QEMU SGX
OS emulation
SGX libraries
Examples
Tool
Tor
Total
Lines of code
5,954 lines of C