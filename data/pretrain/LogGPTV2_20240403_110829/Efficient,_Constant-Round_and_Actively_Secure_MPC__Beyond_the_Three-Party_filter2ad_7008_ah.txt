output as what the functionality returns.
S then sends x(cid:48)
1, x(cid:48)
P1 and P5 are corrupted.
In this case, the evaluator is not honest but only one of the garblers
is malicious. At a high level, after extracting the adversary’s inputs for P1 and P5, the simulator
obtains the output of the computation from the functionality and helps generate a fake circuit
that always evaluates to that output, but is indistinguisable from the real garbled circuit in the
adversary’s view. Furthermore, it should be hard for the adversary (corrupted P5) to produce any
output label that translates to a diﬀerent value than the hardcoded output in the fake garbled
circuit. More details follow.
S runs A. S receives two copies of seed s1 intended for honest parties P3 and P4 from A.
S checks whether the two copies are the same or not. If not, it sends an abort message to the
functionality. Else S generates random seeds s2, s3 and s4 on behalf of honest P2, P3 and P4 and
sends s3 and s4 to the adversary. It then generates random inputs x2, x3 and x4 for P2, P3 and P4
and uses them in the rest of the simulation.
S extracts P1’s input in the distributed garbled input generation as in the previous case. Denote
1. Extracting P5’s input is somewhat similar. Note that A sends three XOR shares of its
that by x(cid:48)
inputs to the garblers. At least two of these are honest parties and hence S obtains those shares.
31
1, x(cid:48)
5 for P1 and P5 and obtains out = f (x(cid:48)
1, x(cid:48)
S now calls the functionality with inputs x(cid:48)
The third share is extracted similarly to the input extraction for the garblers above since the process
for garbling each share is similar and the three shares are XORed to obtain the extracted input x(cid:48)
5.
1, x2, x3, x4, x(cid:48)
5).
Next, the simulator who plays the role of honest parties P2, P3, P4 needs to inﬂuence the distributed
circuit garbling scheme to generate a fake garbled circuit that hard-codes out as its output when run
5 and the random inputs S generated on behalf of honest parties, while
on extracted inputs x(cid:48)
ensuring that this fake distributed circuit garbling is indistinguishable from the real distributed
circuit garbling protocol from the adversary’s point of view.
The idea behind this simulation is as follows and is similar to the one in [BLO16b] except in our
case the adversary can be malicious on behalf of one garbler. S knows all the seeds generated above.
Furthermore, it has full control of any randomness and garbled circuit shares generated using s2
since only P1 is corrupted among the garblers and he does not hold s2, and S is playing the role of
all three parties holding s2. S participates in the distributed garbling as before for all intermediate
gates. For the output gates, however, it needs to make sure that the labels corresponding to bits
of out are always the labels encrypted in rows corresponding to evaluation using the extracted and
random inputs S knows. Given that S has knowledge of all seeds, it knows what the corresponding
label for out is (say, 0) and also knows the label corresponding to 1. For all such rows that encrypt
the label 1, S can produce the one-time pads that are derived using s2 (on behalf of honest P2, P3
and P4) such that the encrypted label is ﬂipped to the label for 0 instead. As a result, the generated
garbled circuit will evaluate to out, and this process is indistinguishable from the adversary’s point
of view given that it only can decrypt one row of each table and other rows are indistinguishable
from random given the semantic security of the encryption used for garbling and the fact that the
adversary does not know all seeds.
S sends this fake garbled circuit (or its hash) on behalf of honest parties to A who controls
the evaluator. Finally, S receives an output out(cid:48) along with the corresponding output label. If
it receives a diﬀerent output than out from the adversary, it instructs the functionality to abort.
The probability that P5 can generate a diﬀerent output label is negligible since in this fake garbled
circuit only one label is decrypted and portions of the other label are encrypted using a seed that is
not known to the adversary. As a result, the distributions in the real- and ideal-world interactions
are indistinguishable. This completes the sketch of the proof.
C Figures
32
Inputs. All parties hold the circuit C, security parameter κ. In addition Pi holds the following
private inputs:
Function f C
GC
1. A global diﬀerence string Ri ∈ {0, 1}κ chosen at random;
2. For every wire w in C that is not the output of an XOR gate, a random permutation bit pi
w
and ki
w,0 chosen at random from {0, 1}κ
Computation. Proceed as follows:
1.
For i ∈ [4], in a topological order, for every output wire w of an XOR gate with input wires u
and v, set pi
v,0 and ki
w,1 := ki
w := pi
v, ki
For every AND gate g ∈ C with input wires u, v and output wire w, every α, β ∈ {0, 1} and
every j ∈ [4], set:
u ⊕ pi
w,0 ⊕ Ri.
u,0 ⊕ ki
w,0 := ki
i=1 pi
w.
For every w in C, set pw :=(cid:76)4
(cid:16) 4(cid:77)
w,0 ⊕(cid:0)Ri · ((pu ⊕ α) · (pv ⊕ β) ⊕ pw)(cid:1)
(g||j) ⊕ Fki
gj
α,β :=
(g||j)
(cid:17)
Fki
u,α
v,β
(2)
2.
3.
Outputs. Output to all parties g1
α,β, for every AND gate g ∈ C and every α, β ∈ {0, 1}.
i=1
⊕ ki
α,β|| . . .||g4
Figure 9: The distributed circuit-garbling function.
Protocol Πsh4aot(P1, P2, P3)
The protocol is carried out among P1, P2, P3, with P1 and P2 acting as sender and receiver,
respectively, and P3 as the attester.
Input. P1 holds m0, m1, and P2 holds b.
Computation.
1. P1 sends m0, m1 to P3, and P2 sends b to P3.
2. P3 sends mb to P2.
Output. P2 outputs mb.
Figure 10: The passively secure 4-party protocol for Attested OT.
33
Functionality FB-4AOT(P1, P2,{P3, P4})
FB-4AOT interacts with parties P1, P2, P3, P4 and the adversary S, with P1 and P2 acting as sender and
receiver, respectively, and P3, P4 as attesters.
Input.
On input message (Sender, sid ,{m0,t, m1,t}t∈[(cid:96)]) from P1, where each mi,t ∈ M,
record
{(m0,t, m1,t)}t∈[(cid:96)] and send (Sender, sid ,{m0,t, m1,t}t∈[(cid:96)]) to P3 and P4 and (Sender, sid ) to the
adversary. Ignore further (Sender, ...) messages.
On input message (Receiver, sid ,{bt}t∈[(cid:96)]) from P2, where bt ∈ {0, 1}, record {bt}t∈[(cid:96)] and send
(Receiver, sid ,{bt}t∈[(cid:96)]) to P3 and P4 and (Receiver, sid ) to the adversary.
Ignore further
(Receiver, ...) inputs.
On input message (Attester, sid ,{mj
for j ∈ {3, 4}, where each
i,t ∈ M, record {(mj
t )}t∈[(cid:96)] and send (Attester, sid ) to the adversary. Ignore further
mj
(Attester, ...) messages.
t}t∈[(cid:96)]) from Pj
0,t, mj
0,t, mj
1,t, bj
1,t, bj
Output. On input message (Output, sid ) from the adversary,
0,t, m4
or (m0,t, m1,t, bt)
(Output, sid ,{mbt,t}t∈[(cid:96)]) to P2.
t ) for any t ∈ [(cid:96)],
(cid:54)= (m4
1,t, b4
if (m0,t, m1,t, bt) (cid:54)= (m3
send (Output, sid ,⊥) to P2;
0,t, m3
1,t, b3
t )
else send
Figure 11: The 4-party Batch Attested OT ideal functionality FB-4AOT.
34
Protocol Πb-4aot(P1, P2,{P3, P4})
The protocol is executed among P1, P2, P3, P4, with P1 and P2 acting as sender and receiver, re-
spectively, and P3, P4 as attestors. Let Commit = (ComGen, Com, Open) be a secure noninteractive
commitment scheme.
Inputs. P1 holds {m1
1,t}t∈[(cid:96)], and P2 holds {b2
t}t∈[(cid:96)].
0,t, m1
1. P1 generates random values {r0,t, r1,t}t∈[(cid:96)] ← {0, 1}∗ and computes (Com1
1,t, Open1,t)
0,t, Open0,t) :=
0,t}t∈[(cid:96)] and
0,t; r0,t),
1,t}t∈[(cid:96)] to P2 and sends {r0,t, m0,t, r1,t, m1,t}t∈[(cid:96)] to P3 and P4, who store them as
0,t, r3
and
0,t, m3
(Com1
1,t}t∈[(cid:96)] and {r4
exchange
0,t, r3
P1
1,t}t∈[(cid:96)], respectively.
1,t}t∈[(cid:96)]) and H({m4
1,t, m4
the
0,t, m4
they
1,t}t∈[(cid:96)]).
sends {Com1
0,t, m4
hash
values
t , r4
1,t, b4
:= Com(m1
P4
1,t, b3
Com(m1
{Com1
{r3
0,tm3
2. P3
H({m3
from P1
1,t; r1,t).
1,t, m3
received
0,t, r4
0,t, r4
t , r3
i.e.
of
(a) If the values match,
1,t, Openi
(Comi
compute H({Comi
{Open3
}t∈[(cid:96)] to P2.
t,b3
t
1,t) using scheme Commit and random values ri
then for i ∈ {3, 4}, Pi computes (Comi
0,t, Openi
0,t) and
0,t and ri
1,t respectively,
1,t}t∈[(cid:96)]) and sends the hash value to P2. (Wlog) P3 also sends
0,t, Comi
(b) If
the hash values do not match,
H({m4
0,t, m4
1,t, b4
t , r4
0,t, r4
1,t}t∈[(cid:96)]), they send ⊥ message to P2 (denoting abort).
0,t, m3
1,t, b3
t , r3
0,t, r3
i.e., H({m3
1,t}t∈[(cid:96)])
(cid:54)=
3. P2 checks the following and outputs ⊥ if any of them is true: (i) it receives ⊥ from P3 or P4; (ii)
the hash of the set of three commitments pairs it has received from P1, P3, P4 do not match;
(cid:54)=
i.e., H({Com1
t and for any t ∈ [(cid:96)].
H({Com4
Otherwise, P2 outputs {m3
1,t}t∈[(cid:96)]) or H({Com1
) = ⊥ for b3
, Open3
0,t, Com3
, Open3
t,b3
}t∈[(cid:96)] ← Open(Com3
t
1,t}t∈[(cid:96)]) (iii) Open(Com3
(cid:54)= H({Com3
1,t}t∈[(cid:96)])
1,t}t∈[(cid:96)])
0,t, Com1
0,t, Com1
0,t, Com4
t = b2
t,b3
t
).
t,b3
t
t,b3
t
t,b3
t
Figure 12: The 4-party protocol for Batch Attested OT.
35