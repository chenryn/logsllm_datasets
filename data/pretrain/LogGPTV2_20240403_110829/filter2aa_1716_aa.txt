{
GOD MODE unlocked:
Hardware backdoors in x86 CPUs
domas / @xoreaxeaxeax / DEF CON 2018
 Christopher Domas
 Cyber Security Researcher
./bio
disclaimer:
The research presented herein was conducted and 
completed as an independent consultant. None of 
the research presented herein was conducted 
under the auspices of my current employer. The 
views, information and opinions expressed in this 
presentation and its associated research paper are 
mine only and do not reflect the views, information 
or opinions of my current employer.
It is perilous to study too deeply
the arts of the Enemy,
for good or for ill…
But such falls and betrayals,
alas, have happened before…
(Demo)
 In the beginning, there was chaos…
 … then 30 years ago, 
we were rescued, by the rings of privilege
Ring model
Ring model
0
1
2
3
User
Kernel
 But we dug deeper…
 ring -1 : the hypervisor
 ring -2 : system management mode
 ring -3 : Q35 / AMT / ME
Ring model
“
The Enemy still lacks one thing
to give him strength and knowledge 
to beat down all resistance,
break down the last defenses,
and cover all the lands in a second darkness.
He lacks the One Ring
”
“Additionally, accessing some of the internal control registers 
can enable the user to bypass security mechanisms, e.g., 
allowing ring 0 access at ring 3.
In addition, these control registers may reveal information 
that the processor designers wish to keep proprietary.
For these reasons, the various x86 processor 
manufacturers have not publicly documented any description 
of the address or function of some control MSRs”
- US8341419 
Patents
 VIA C3
 point-of-sale
 kiosk
 ATM
 gaming
 digital signage
 healthcare
 digital media
 industrial automation
 PCs
C3
 (Image of test systems)
C3
 Thin client
 C3 Nehemiah Core
C3
 Unable to locate a developer manual
 Follow a trail of patent breadcrumbs …
Backdoor architecture
US8880851
US9043580
“FIG. 3 shows an embodiment of a cache memory. 
Referring to FIG. 3, in one embodiment, cache 
memory 320 is a multi-way cache memory. In one 
embodiment, cache memory 320 comprises 
multiple physical sections. In one embodiment, 
cache memory 320 is logically divided into multiple 
sections. In one embodiment, cache 
memory 320 includes four cache ways, i.e., cache 
way 310, cache way 311, cache way 312, and 
cache way 314. In one embodiment, a processor 
sequesters one or more cache ways to store or 
to execute processor microcode.”
- US Patent 8,296,528
Backdoor architecture
 Following patent breadcrumbs
is painful.
Backdoor architecture
 Follow the patents…
 8,880,851 
 9,292,470 
 9,317,301 
 9,043,580 
 9,141,389 
 9,146,742
Backdoor architecture
 A non-x86 core embedded
alongside the x86 core in the C3
 “Deeply Embedded Core” (DEC)
 Shares segments of pipeline with x86 core
 RISC architecture
 Pipeline diverges after the fetch phase
 Partially shared register file
Backdoor architecture
 A global configuration register
 Exposed to x86 core
through a model-specific-register (MSR)
 Activates the RISC core
 An x86 launch instruction
 A new instruction added to the x86 ISA
 Once the RISC core is active
 Starts a RISC instruction sequence
Backdoor architecture
 If our assumptions about the 
deeply embedded core are correct …
 … it can be used as a sort of backdoor,
able to surreptitiously circumvent 
all processor security checks.
Backdoor architecture
 US8341419:
 A model-specific-register can be used to 
circumvent processor security checks
 US8880851:
 A model-specific-register can be used to 
activate a new instruction in x86
 US8880851:
 A launch instruction can be used to
switch to a RISC instruction sequence
Enabling the backdoor
 Find an MSR bit that …
enables a new x86 instruction …
to activate a RISC core …
and bypass protections?
Enabling the backdoor
 64 bit control registers
 Extremely varied
 Debugging
 Performance monitoring
 Cache configuration
 Feature configuration
 Accessed by address, not by name
 Addresses range from
0x00000000 – 0xFFFFFFFF
 Accessed with 
rdmsr and wrmsr instructions
Model-specific-registers
 Accessible only to ring 0 code!
 Or maybe not.  We’ll revisit this later.
Model-specific-registers
“
…the various x86 processor 
manufacturers have not publicly 
documented any description of the 
address or function of some 
control MSRs.
”
- US8341419 
Model-specific-registers
Model-specific-registers
 Undocumented MSRs and MSR bits
 Sometimes, genuinely not implemented and 
reserved for future use
 But common to find undocumented bits that 
have observable effects
 Step 1:
 Which MSRs are
implemented by the processor?
Model-specific-registers
 Approach:
 Set #GP(0) exception handler
 Load MSR address
 rdmsr
 No fault?  MSR exists.
 Fault?  MSR does not exist.
Model-specific-registers
lidt %[new_idt]
movl %[msr], %%ecx
rdmsr
; MSR exists
_handler:
; MSR does not exist
 Results:
 1300 MSRs on target processor
 Far too many to analyze
Model-specific-registers
 Step 2:
 Which MSRs are unique?
Model-specific-registers
mov %[_msr], %%ecx
mov %%eax, %%dr0
rdtsc
movl %%eax, %%ebx
rdmsr
rdmsr_handler:
mov %%eax, %%dr0
rdtsc
subl %%ebx, %%eax
Model-specific-registers
 A side-channel attack
 Calculate the access time
for all 0x100000000 MSRs
Model-specific-registers
 Observation:
 Functionally different MSRs will have 
different access times
 The ucode backing each MSR is entirely different
 Functionally equivalent MSRs will have
approximately the same access times
 The ucode backing each MSR is roughly equivalent
 Differentiate between “like” and “unlike” MSRs
 “like” MSRs: 
adjacent MSRs with equal or 
functionally related access time
Model-specific-registers
 Hypothesis:
 The global configuration register is unique.
It does not have multiple, functionally equivalent versions.
Model-specific-registers
 With the timing side-channel, 
we identify 43 functionally unique MSRs, 
from the 1300 implemented MSRs.
Model-specific-registers
 43 MSRs to analyze = 2752 bits to check
 Goal: identify which bit activates the launch instruction
 Upper bound of ~1.3x1036 x86 instructions
 Scan 1,000,000,000 / second
 ~1.3x1036 / 1010 / 60 / 60 / 24 / 365
= approximately 1 eternity 
to scan for a new instruction
 2752 bits x 1 eternity per scan = 2752 eternities
Model-specific-registers
 sandsifter
 Scans the x86 ISA in about a day 
 Still can’t run 2752 times.
Model-specific-registers
 Toggle each of 2752 candidate bits 
one by one …
 But these are configuration bits –
many will lock, freeze, panic, reset, …
 Need automation
Model-specific-registers
Model-specific-registers
Target 
Relay
Switch
Master 
 Hardwire a relay to the target’s power switch
 Toggle MSR bits one by one
 Use a second computer to watch for panics, locks, etc.
 Toggle the relay when something goes wrong
 Record which MSR bits can be set
without making the target unstable
Model-specific-registers
 ~1 week, 100s of automated reboots
 Identified which MSR bits can be toggled 
without visible side effects
Model-specific-registers
 Toggle all stable MSR bits
 Run sandsifter to audit the processor 
for new instructions
Model-specific-registers
 (sandsifter demo)
Model-specific-registers
 Exactly one.  0f3f.
The launch instruction
 GDB + trial and error:
 The launch instruction is effectively a jmp %eax
The launch instruction
 With 0f3f identified, 
it is no longer necessary to run 
complete sandsifter scans
 Activate candidate MSR bits one by one, 
attempt to execute 0f3f
 Find MSR 1107, bit 0 activates the launch instruction
The global configuration register
 We suspect this will unlock the processor, 
and circumvent all security checks.
 We call MSR 1107, 
bit 0 the god mode bit.
The god mode bit
 With the god mode bit discovered …
 And the launch instruction identified …
 How do we execute instructions on the RISC core?
The x86 bridge
Approach: