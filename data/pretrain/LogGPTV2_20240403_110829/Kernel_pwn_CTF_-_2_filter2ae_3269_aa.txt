# Kernel pwn CTF 入门 - 2
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 接上文[ Kernel pwn CTF 入门 – 1](https://www.anquanke.com/post/id/255882)
## 四、小试牛刀
> 这里选用 CISCN2017_babydriver 作为笔者入门的第一题。之所以选用这一题是因为网上资料较多，方便学习。
###  1\. 题目附件
题目附件可在[此处](https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/kernel/CISCN2017-babydriver/babydriver.tar)下载。
题目给了三个文件，分别是：
  * boot.sh 启动脚本
  * bzImage 内核启动文件
  * rootfs.cpio 根文件系统镜像
###  2\. 尝试执行
初始时，直接解压 `babydriver.tar` 并运行启动脚本：
    # 解压
    mkdir babydriver
    tar -xf babydriver.tar -C babydriver
    # 启动
    cd babydriver 
    ./boot.sh
但 KVM 报错，其报错信息如下所示：
    Could not access KVM kernel module: No such file or directory
    qemu-system-x86_64: failed to initialize kvm: No such file or directory
使用以下命令查看当前 linux in vmware 支不支持虚拟化，发现输出为空，即 **不支持** 。
    egrep '^flags.*(vmx|svm)' /proc/cpuinfo
检查了一下物理机的 Virtualization Settings, 已经全部是打开了的。再检查以下 VMware 的CPU配置，发现没有勾选 `虚拟化
Intel VT-x/EPT 或 AMD-V/RVI`。
勾选后重新启动 linux 虚拟机，提示`此平台不支持虚拟化的 Intel VT-x/EPT`……
经过一番百度，发现是 Hyper-V 没有禁用彻底。彻底禁用的操作如下：
  * 控制面板—程序——打开或关闭Windows功能，取消勾选Hyper-V，确定禁用Hyper-V服务
  * **管理员权限** 打开 cmd，执行 `bcdedit /set hypervisorlaunchtype off`  
> 若想重新启用，则执行 `bcdedit /set hypervisorlaunchtype auto`
  * 重启计算机
之后再启动 linux in Vmware，其内部的 kvm 便可以正常执行了。
###  3\. 题目分析
**a. 目的**
  * 查看一下根目录的 `/init` 文件，不难看出这题需要我们进行 **内核提权** ，只有提权后才可以查看 flag。 
        #!/bin/sh
    mount -t proc none /proc
    mount -t sysfs none /sys
    mount -t devtmpfs devtmpfs /dev
    chown root:root flag                      # flag 被设置为只有 root 可读
    chmod 400 flag
    exec 0/dev/console
    exec 2>/dev/console
    insmod /lib/modules/4.4.72/babydriver.ko   # 加载漏洞驱动
    chmod 777 /dev/babydev
    echo -e "\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\n"
    setsid cttyhack setuidgid 1000 sh
    umount /proc
    umount /sys
    poweroff -d 0  -f
**b. 获取目标内核模块**
> 在提权之前，我们需要先把加载进内核的驱动 dump 出来，这个驱动大概率是一个存在漏洞的驱动。
首先使用 file 命令查看一下 rootfs.cpio 的文件格式：
    $ file rootfs.cpio                 
    rootfs.cpio: gzip compressed data, last modified: Tue Jul  4 08:39:15   2017, max compression, from Unix, original size modulo 2^32 2844672
可以看到是一个 gzip 格式的文件，因此我们需要给该文件改一下名称，否则 gunzip 将无法识别文件后缀。之后就是解压 gzip + 解包 cpio
的操作：
    mv rootfs.cpio rootfs.cpio.gz
    gunzip rootfs.cpio.gz
解压之后的文件便是正常的 CPIO 格式：
    $ file rootfs.cpio 
    rootfs.cpio: ASCII cpio archive (SVR4 with no CRC)
使用常规方式给 CPIO 解包即可：
    cpio -idmv  SMEP（Supervisor Mode Execution Protection 管理模式执行保护）： **禁止CPU处于 ring0
> 模式时执行用户空间代码** 。
>
> 还有一个比较相近的保护措施是 SMAP（Superivisor Mode Access Protection
> 管理模式访问保护）：禁止内核CPU访问用户空间的数据。
注意到 **没有启动 kaslr** 。
**d. 代码分析**
> 第一次接触内核题，代码什么的当然需要理清楚了。这里我们一一把驱动函数代码分析过去。
**1) babydriver_init**
**1.1) 关键代码**
先上代码，这里重点关注红框框住的部分（其余部分是异常处理）
简单精简一下，实际关键代码如下所示：
    alloc_chrdev_region(&babydev_no, 0, 1, "babydev");
    cdev_init(&cdev_0, &fops);
    cdev_0.owner = &_this_module;
    cdev_add(&cdev_0, babydev_no, 1);
    babydev_class = _class_create(&_this_module, "babydev", &babydev_no);
    device_create(babydev_class, 0, babydev_no, 0, "babydev");
在解释上面的代码之前，我们先来简单学习一下 **设备文件** 的相关知识。
**1.2) 设备号**
对于 **所有** 设备文件来说，一共分为三种，分别是：
  * 字符设备（ char device），例如控制台
  * 块设备（block device），例如文件系统
  * 网络设备（network device），例如网卡
设备文件可以通过设备文件名来访问，通常位于 /dev 目录下。`ls -a` 出来的第一个字符即说明了当前设备文件的类型：
    # c 表示字符设备
    crw-rw-rw-   1 root tty       5,   0 Oct  3 15:03 0
    # l 表示符号链接
    lrwxrwxrwx   1 root root          15 Oct  2 23:43 stdout -> /proc/self/fd/1
    # - 表示常规文件
    -rw-rw-r--  1 Kiprey Kiprey  203792 Jun 16  2017 babydriver.ko
我们可以在 **设备文件条目** 中最后一次修改日期之前看到两个数字(用逗号分隔)，例如上面的 `5, 0`（这个位置通常显示的是普通文件的
**文件长度** ），对于 **设备文件条目** 的信息中，形如`5,0`这样的一对数字，分别是特定设备的 **主设备号** 和 **副设备号** 。
在传统意义上， **主设备号** 标识与设备相关的 **驱动程序** 。例如，`/dev/null` 和 `/dev/zero`
都是由驱动1管理的。而多个串行终端（即 ttyX, ttySX）是由驱动4管理的。现代的Linux内核已经 **支持多个驱动程序共享主设备号**
，但是我们仍然可以看到，目前大多数设备仍然是按照 **一个主设备号对应一个驱动程序** 的方式来组织的。
内核 **使用副设备号来确定引用的是哪个设备** ，但副设备号的作用仅限于此，内核不会知道更多关于某个特定副设备号的信息。
主设备号和副设备号可同时保存与类型 `dev_t` 中，而该类型实际上是一个 `u32`；其中的12位用于保存主设备号，20位用于保存副设备号。
    typedef u32 __kernel_dev_t;
    typedef __kernel_dev_t    dev_t;
在编写驱动程序需要使用主副设备号时，最好不要直接进行位运算操作，而是使用 `` 头文件中的宏定义操作：
    #define MAJOR(dev)    ((dev)>>8)              // 获取主设备号
    #define MINOR(dev)    ((dev) & 0xff)          // 获取副设备号
    #define MKDEV(ma,mi)  ((ma) 还有一个名为`register_chrdev_region`的函数，它在调用时需要指定 **主副设备号的起始值**
> ，要求内核在起始值的基础上进行分配，与 `alloc_chrdev_region`功能相似但又有所不同。
设备号分配完成后，我们需要将其连接到实现设备操作的内部函数。
**1.3) 注册字符设备**
内核使用 `cdev` 类型的结构来表示字符设备，因此在操作设备之前，内核必须 **初始化** + **注册** 一个这样的结构体。
> 注意，一个驱动程序可以分配不止一个设备号，创建不止一个设备。
该函数的执行代码如下：
    cdev_init(&cdev_0, &fops);
cdev 结构体的初始化函数如下：
    /**
     * cdev_init() - initialize a cdev structure
     * @cdev: the structure to initialize
     * @fops: the file_operations for this device
     *
     * Initializes @cdev, remembering @fops, making it ready to add to the
     * system with cdev_add().
     */
    void cdev_init(struct cdev *cdev, const struct file_operations *fops)
正如注释中写到，传入的 cdev 指针所对应的 `struct cdev` 将会被初始化，同时 **设置该设备的各类操作** 为传入的
`file_operations`结构体指针。
`file_operations`结构体中包含了大量的函数指针：
    struct file_operations {
      struct module *owner;
      loff_t (*llseek) (struct file *, loff_t, int);
      ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
      ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
      ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
      ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
      int (*iopoll)(struct kiocb *kiocb, bool spin);
      int (*iterate) (struct file *, struct dir_context *);
      int (*iterate_shared) (struct file *, struct dir_context *);
      __poll_t (*poll) (struct file *, struct poll_table_struct *);
      long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
      long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
      int (*mmap) (struct file *, struct vm_area_struct *);
      unsigned long mmap_supported_flags;
      int (*open) (struct inode *, struct file *);
      int (*flush) (struct file *, fl_owner_t id);
      int (*release) (struct inode *, struct file *);
      int (*fsync) (struct file *, loff_t, loff_t, int datasync);
      int (*fasync) (int, struct file *, int);
      int (*lock) (struct file *, int, struct file_lock *);
      ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
      unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
      int (*check_flags)(int);
      int (*flock) (struct file *, int, struct file_lock *);
      ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
      ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
      int (*setlease)(struct file *, long, struct file_lock **, void **);
      long (*fallocate)(struct file *file, int mode, loff_t offset,
            loff_t len);
      void (*show_fdinfo)(struct seq_file *m, struct file *f);
    #ifndef CONFIG_MMU