APPENDIX C
PROOFS
A. Proof of Configuration Discovery
Lemma C.1. A configuration history chist can be verified by
any replica/client.
Proof: Let chist be a configuration history from configuration
0 to c. All the replicas know the members in M0 according to
our assumption. The chist consists of all the proofs of delivery
monotonically ordered by configuration numbers. Let the sets
of proofs of delivery be {certi} s.t. 0 ≤ i ≤ c The proof of
delivery numbered by configuration 0 consists of signatures
from Q0 replicas in M0. Therefore, all replicas can verify
cert0. Furthermore, every replica/client can obtain M1 from
cert0 since it consists of the information of new replicas and
replicas that are removed in the end of configuration 0. Sim-
ilarly, cert1 consists of Q1 signatures, so every replica/client
can verify it accordingly. It is then straightforward to see that
chist can be verified by any replica. 2
Lemma C.2. The configuration history is totally ordered.
Proof: We assume that
there are two valid configuration
histories chist1 and chist2, both from configuration 0 to c.
Let c′ be the first configuration where the proofs of delivery
are inconsistent, i.e., 1) 0  v, m = m′.
Proof. If pi delivers m in view v and c, at least Qc replicas
have previously broadcast ⟨COMMIT⟩ message. Among the
replicas, Qc − fc replicas are correct. The correct replicas
all have previously stored prepare certificates (either a set of
2fc + 1 ⟨PREPARE⟩ messages or fc + 1 ⟨COMMIT⟩ messages)
for m with s. If view change occurs, according to Lemma C.6,
replicas will eventually move to a view v′ where the leader is
correct. There are two cases for configuration c: c is the latest
configuration; the latest configuration is c′ where c′ > c.
Case (1): The new leader in view v′ receives Qc matching
⟨VIEW-CHANGE⟩ messages. In the new view, the leader assigns
each sequence number s with a m if there is a prepare
certificate for s. If a replica accepts s with a different m′ in
the new view, at least one ⟨VIEW-CHANGE⟩ messages includes
a valid prepare certificate for m′. The certificate consists of at
least Qc′ ⟨PREPARE⟩ messages or fc′ + 1 ⟨COMMIT⟩ messages
for c′ ≤ c. According to the protocol, a correct replica will not
send a ⟨PREPARE⟩ message for request m′ if it has already sent
a ⟨PREPARE⟩ message for some request m. Therefore, at least
one correct replica has sent a ⟨PREPARE⟩ message for request
m′ in configuration c′ and ⟨PREPARE⟩ message for request m
in configuration c′, both in the same view, a contradiction.
Case (2): Since at
installs
c′,
i.e.,
⟨ADD⟩ and/or ⟨REMOVE⟩ requests. Therefore, at least Qc′−1
replicas have previously broadcast ⟨COMMIT⟩ messages for
the membership request(s), among which Qc′−1 − fc′−1 are
(c′ − 1)-correct. There are two cases: c = c′ − 1, c  c′′, any c′′-correct replica that has delivered
the membership request must have included m in its execution
history. If the number of gc-correct replicas is greater than
Qc′ − fc′ and m has not been delivered for a sufficiently long
time, view change will occur. As shown in Lemma C.7, in the
new view, replicas will only accept m with sequence number
s. Eventually, gc-correct replicas will accept m. If the number
of gc-correct replicas is lower than Qc′ − fc′ and replicas still
continue to process requests, gc-correct replicas that have not
delivered m will catch up with other correct replicas after the
next view change and eventually deliver m.
Lemma C.8. In the same view v, if a correct replica pi
delivers a request m with sequence number s in configuration
2
2
c, and another correct replica pj delivers a request m′ with
sequence number s in configuration c′ where c′ ≥ c, m = m′.
Proof. If pi delivers m in c, it receives Qc matching ⟨COMMIT⟩
messages. If pj delivers m′ in c′, it receives Qc′ matching
⟨COMMIT⟩ messages. If c = c′, the correctness simply follows
from static BFT. We now show the correctness for c′ > c.
Without loss of generality, we consider c′ = c+1. Correctness
for c′ > c + 1 can be proved by induction.
There are three cases from c to c′: new replicas join the
system from c to c′; some replicas leave the system from c to
c′; multiple replicas join and leave from c to c′.
Case (1): We first consider the case where one replica joins in
configuration c′, i.e., Qc′ = Qc or Qc′ = Qc +1. If Qc = Qc′,
correctness simply follows. If Qc′ = Qc + 1, Qc + 1 replicas
have sent ⟨COMMIT⟩ messages for m′ in c′. Since Qc replicas
have sent ⟨COMMIT⟩ messages for m in c, the two quorums in
⌉,
total have size 2Qc + 1. We also know that Qc = ⌈ nc+fc+1
where nc is the number of replicas in configuration c and
fc is the number of failures the system can tolerate. Since
configuration c′ has nc + 1 replicas, the two quorums have at
least 2Qc + 1− (nc + 1) = 2⌈ nc+fc+1
⌉− nc ≥ fc + 1 replicas
in total. In our system, any new replica that joins the system
participates in the protocol after it completes state transfer
from replicas in c. Therefore, if any of the fc + 1 correct
replicas is a new replica, it will not accept m′ if m is included
in its execution history. We also assume that nc ≥ 3fc +
1. Therefore, at least one correct replica has sent ⟨COMMIT⟩
message for m in c and m′ in c′, a contradiction. For the
case where multiple replicas join, nc becomes nc + l and Qc
becomes Qc + q where 0 ≤ q ≤ l (concretely, q is bounded
by ⌈ l
Case (2): If l replicas are removed, nc becomes nc − l and Qc
becomes Qc − q where 0 ≤ q ≤ l. Consider the worst case
where Qc becomes Qc−l, there are 2Qc−l = 2Qc′ +l replicas
in total for any two quorums. There are 2Qc′ + l− (nc′ + l) ≥
fc′ + 1 correct replicas in common. Thus, at least one correct
replica has sent conflicting messages.
Case (3): We know that Qc replicas have broadcast m and
Qc−fc c-correct replicas (set S) have maintained valid prepare
certificates. If pj delivers m′ in c′, at least Qc′ − fc′ correct
replicas have previously delivered m′. If there exists a correct
replica pi in Qc′ − fc′ that is not in S, pi must have joined the
system in c as a correct replica will not deliver both m and
m′ with the same sequence number. Before pi participates
in the protocol, it completes state transfer with Qc replicas
in configuration c, i.e., all delivered requests before ⟨ADD, i⟩
request. If pi delivers m′, it does not have m in the execution
history. Thus, none of Qc replicas has sent a valid prepare
certificate for m during state transfer, a contradiction with the
fact that Qc replicas have sent PREPARE messages for m.
Lemma C.9. A correct replica pi delivers a request m with
sequence number s, configuration c, and view v. Another
correct replica pj delivers a request m′ with sequence number
s in configuration c′ and view v′ where c′ ≥ c and v′ > v.
Then m = m′.
3⌉). The proof is similar to the case for l = 1.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
171333
is
across views
Proof. Without loss of generality, we let c′ = c + 1 and let
c′ be the latest configuration, as the case for c′ > c + 1 can
be proved in the same way. Let the configuration changes in
view v′′ s.t. v ≤ v′′ ≤ v′. When configuration changes in v′′, at
least one correct replica pk in both Mc and Mc′ has delivered
m. This is because from view v to the beginning of view v′′,
the configuration does not change. From configuration c to c′,
the view v′′ does not change. Therefore, if pi delivers m and
pk delivers m′′, this is a contradiction with Lemma C.7 or
Lemma C.8. Furthermore, from view v′′ to v′, configuration
does not change, so if pj delivers m′ with s also in the
configuration c′, a contradiction with Lemma C.7.
Theorem C.3. (Total Order) If a correct replica in config-
uration c delivers a message m before delivering m′, then
another correct replica in configuration c delivers a message
m′ only after it has delivered m.
Proof. The correctness within the same view is shown
in Lemma C.8 and correctness
in
Lemma C.9.
Theorem C.4. (Same configuration delivery) If a correct
replica pi (resp. pj) delivers m in configuration ci (resp. cj),
then ci = cj.
Proof. For each correct replica pi (resp. pj), it delivers a
request upon receiving 2fci + 1 (resp. 2fcj + 1) matching
⟨COMMIT, v, c, s, h⟩ messages. It is straightforward to see that
ci = cj since the ⟨COMMIT⟩ messages have a matching
configuration number c.
Lemma C.10. A client eventually obtains a valid configu-
ration c from the configuration discovery protocol such that
at least one gc-correct replica in Mc has installed the latest
configuration.
Proof. A client repeats the submit() function and obtains
configuration until it obtains a valid reply. Thus, the client
eventually obtains a valid configuration c (according to Theo-
rem C.1) such that at least one gc-correct replica is in Mc.
Theorem C.5. (Liveness) If a correct client submits a request
m, then a correct replica in some configuration c eventually
delivers m.
Proof. We already show in Theorem C.2 that if pi delivers
m, all gc-correct replicas will eventually deliver m. Consider
c′ is the latest configuration, there are two cases: there exist
at least fc + 1 gc-correct replicas in c′; there are fewer than
fc + 1 gc-correct replicas in c′. In the first case, the client will
eventually receive fc + 1 matching replies.
We now show the second case where there are fewer than
fc + 1 gc-correct replicas in c′. According to Lemma C.1, a
configuration history can be verified by the client. Therefore,
if the client obtains a configuration c such that at least one gc-
correct replica in Mc has installed the latest configuration, the
request will eventually be broadcast to all replicas. Eventually
in some configuration, m is included in the queue of the leader
and then processed. According to the agreement property, the
request will eventually be delivered by all gc-correct replicas.
Theorem C.6. (Consistent delivery) A correct client submit-
ting m will deliver a correct response which is consistent with
the state in com configuration where m is delivered.
Proof. A correct client completes a request if it has received
fc + 1 matching replies. If the client previously submitted the
request in c, it completes the request. Otherwise, the client
verifies the configuration history. According to the total order
and agreement properties, any correct replica will execute and
deliver m with following the same order. Therefore, all correct
replicas will generate matching response to the client.
C. Proof of Dyno, Dyno-A, Dyno-AC
Theorem C.7. (Dyno achieves agreement V1 under G-
correct assumption) If a correct replica in configuration c
delivers a request m, then every c-correct replica eventually
delivers m.
Proof. According to Theorem C.2, if a correct replica delivers
m, then every gc-correct replica eventually delivers m. There
are at least fc + 1 gc-correct replicas according to the assump-
tion. Therefore, all c-correct replicas will eventually receive
fc + 1 ⟨COMMIT⟩ messages. Every correct replica broadcasts
a ⟨COMMIT⟩ message if it receives fc + 1 matching messages.
Therefore, all c-correct replicas will eventually receive 2fc +1
⟨COMMIT⟩ messages and deliver m.
Theorem C.8. (Dyno-A achieves agreement V1) If a correct
replica in c delivers a request m, then every c-correct replica
eventually delivers m.
Proof. According to Theorem C.2, if a correct replica delivers
m, then every gc-correct replica eventually delivers m. Let
the latest configuration of the system be c′. We show that a
c-correct replica pi that has not delivered m will eventually
deliver m. If fewer than 2fc+1 replicas are still correct, replica
pi will eventually time out. pi will query the configuration
service and obtain c′′ s.t. c′′ ≤ c′. The case for c′′ = c′
is trivial. If c′′ < c′ and there are more than fc′′ + 1 gc′′-
correct replicas, they will send correct hist to pi. We know
that m is included in hist of correct replicas in c′′. Thus, pi
will deliver m. If there are fewer than fc′′ + 1 gc′′-correct
replicas, replica pi will continue querying ObtainConf ig()
and eventually obtain c′. According to the protocol, pi will
eventually obtain the request history and deliver m.
Theorem C.9. (Dyno-AC achieves agreement V2) If a correct
replica delivers a request m in c, then every correct replica
in c eventually delivers m.
Proof. According to Theorem C.8, every c-correct replica will
deliver m. If a correct replica pi leaves the system, it must have
already delivered ⟨REMOVE, i⟩. Before pi delivers ⟨REMOVE, i⟩,
it must have delivered m since membership requests are
delivered after regular requests.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
181334