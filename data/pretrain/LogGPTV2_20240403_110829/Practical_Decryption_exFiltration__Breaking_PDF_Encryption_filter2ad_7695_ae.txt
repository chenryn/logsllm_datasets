comes to encryption, AES-CBC – or encryption without integrity
protection in general – is still widely supported. Even the latest
PDF 2.0 specification released in 2017 still relies on it. This must
be fixed in future PDF specifications and any other format encryp-
tion standard, without enabling backward compatibility that would
re-enable CBC gadgets [23]. A positive example is JSON Web En-
cryption standard [26], which learned from the CBC attacks on
XML [25] and does not support any encryption algorithm without
integrity protection.
ACKNOWLEDGMENTS
The authors would like to thank Martin Grothe for his valuable
feedback and insightful discussions. Jens Müller was supported by
the research training group “Human Centered System Security”,
sponsored by the state of North Rhine-Westfalia. Fabian Ising was
supported by the research project “MITSicherheit.NRW” funded by
the European Regional Development Fund North Rhine-Westphalia
(EFRE.NRW). Vladislav Mladenov was supported by the FutureTrust
project funded by the European Commission (grant 700542-Future-
Trust-H2020-DS-2015-1). In addition, this work was supported by
the German Research Foundation (DFG) within the framework of
the Excellence Strategy of the Federal Government and the States –
EXC 2092 CASA. We would also like to thank the CERT-Bund team
for their great support during the responsible disclosure process.
REFERENCES
[1] Adobe Systems. 2005. Acrobat JavaScript Scripting Guide.
[2] Adobe Systems. 2008. Adobe Supplement to the ISO 32000, BaseVersion: 1.7,
[3] Adobe Systems. 2012. XMP Specification Part 1.
[4] John August. 2014. Try to open this PDF, cont’d. https://johnaugust.com/2014/
[5] CANON. 2019. PDF Encryption.
https://www.canon.com.hk/en/business/
ExtensionLevel: 3.
try-to-open-this-pdf-contd
solution/PDF_Security.jspx
[6] CurtisCarmony,XunchaoHu,HengYin,AbhishekVasishtBhaskar,andMuZhang.
2016. Extract Me If You Can: Abusing PDF Parsers in Malware Detectors.. In NDSS.
The Internet Society.
[7] Ping Chen, Nick Nikiforakis, Christophe Huygens, and Lieven Desmet. 2015. A
Dangerous Mix: Large-scale analysis of mixed-content websites. In Information
Security. Springer, 354–363.
[8] CipherMail. 2019. Email Encryption Gateway. https://www.ciphermail.com/
gateway.html
[9] B.Danczul,J.Fuß,S.Gradinger,B.Greslehner,W.Kastl,andF.Wex.2013. Cuteforce
Analyzer: A Distributed Bruteforce Attack on PDF Encryption with GPUs and
FPGAs. In 2013 International Conference on Availability, Reliability and Security.
720–725. https://doi.org/10.1109/ARES.2013.94
[10] Dennis Detering, Juraj Somorovsky, Christian Mainka, Vladislav Mladenov, and
Jörg Schwenk. 2017. On the (in-) security of JavaScript Object Signing and Encryp-
tion. In Proceedings of the 1st Reversing and Offensive-oriented Trends Symposium.
ACM, 3.
[11] P. Deutsch. 1996. DEFLATE Compressed Data Format Specification version 1.3.
http://tools.ietf.org/rfc/rfc1951.txt RFC1951.
[12] P. Deutsch and J-L. Gailly. 1996. ZLIB Compressed Data Format Specification
version 3.3. http://tools.ietf.org/rfc/rfc1950.txt RFC1950.
[13] Elcomsoft. 2007. Unlocking PDF. https://www.elcomsoft.com/WP/guaranteed_
password_recovery_for_adobe_acrobat_en.pdf
[14] Elcomsoft. 2008. ElcomSoft Claims Adobe Acrobat 9 Is a Hundred Times Less
Secure. https://www.elcomsoft.com/PR/apdfpr_081126_en.pdf
[15] Gertjan Franken, Tom Van Goethem, and Wouter Joosen. 2018. Who Left Open
the Cookie Jar? A Comprehensive Evaluation of Third-Party Cookie Policies. In
27th USENIX Security Symposium (USENIX Security 18). USENIX Association,
Baltimore, MD, 151–168. https://www.usenix.org/conference/usenixsecurity18/
presentation/franken
[16] Christina Garman, Matthew Green, Gabriel Kaptchuk, Ian Miers, and Michael
Rushanan. 2016. Dancing on the lip of the volcano: Chosen ciphertext attacks on
apple imessage. In 25th {USENIX} Security Symposium ({USENIX} Security 16).
655–672.
[17] Martin Grothe, Christian Mainka, Paul Rösler, and Jörg Schwenk. 2016. How
to Break Microsoft Rights Management Services. In 10th USENIX Workshop on
Offensive Technologies (WOOT 16). USENIX Association, Austin, TX. https://www.
usenix.org/conference/woot16/workshop-program/presentation/grothe
[18] Martin Grothe, Christian Mainka, Paul Rösler, and Jörg Schwenk. 2016. How
to break microsoft rights management services. In 10th {USENIX} Workshop on
Offensive Technologies ({WOOT} 16).
[19] IBM. [n. d.]. BM Print Transforms from AFP forInfoprint Server for z/OS,
V1.2.2.
https://www-01.ibm.com/servers/resourcelink/svc00100.nsf/pages/
zOSV2R3G3252634/$file/aokfa00_v2r3.pdf
[20] Alexander1 Inführ. 2014.
Pictures on Steroids.
multiple-pdf-vulnerabilites-text-and.html
Multiple PDF Vulnerabilities – Text and
https://insert-script.blogspot.de/2014/12/
[21] Alexander2 Inführ. 2018. Adobe Reader PDF - Client Side Request Injection. https:
//insert-script.blogspot.de/2018/05/adobe-reader-pdf-client-side-request.html
[22] Innoport. [n. d.]. HIPAA Compliant Fax by Innoport. https://www.innoport.com/
hipaa-compliant-fax/
[23] Tibor Jager, Kenneth G Paterson, and Juraj Somorovsky. 2013. One Bad Apple:
Backwards Compatibility Attacks on State-of-the-Art Cryptography.. In NDSS.
[24] Tibor Jager, Sebastian Schinzel, and Juraj Somorovsky. 2012. Bleichenbacher’s
attack strikes again: breaking PKCS# 1 v1. 5 in XML Encryption. In European
Symposium on Research in Computer Security. Springer, 752–769.
[25] Tibor Jager and Juraj Somorovsky. 2011. How To Break XML Encryption. In The
18th ACM Conference on Computer and Communications Security (CCS).
[26] M. Jones and J. Hildebrand. 2015. JSON Web Encryption (JWE). http://tools.ietf.
org/rfc/rfc7516.txt RFC7516.
[27] Tommi Komulainen. [n. d.]. The Adobe eBook Case. Publications in Telecommuni-
cations Software and Multimedia TML-C7 ISSN 1455 ([n. d.]), 9749.
[28] Encryptomatic LLC. 2019.
Improving the Email Experience.
https://www.
encryptomatic.com/pdfpostman/
[29] Locklizard. 2019. What is PDF encryption and how to encrypt PDF documents &
files. https://www.locklizard.com/pdf-encryption/
[30] VladislavMladenov,ChristianMainka,KarstenMeyerzuSelhausen,MartinGrothe,
and Jörg Schwenk. [n. d.]. 1 Trillion Dollar Refund – How To Spoof PDF Signatures.
([n. d.]).
[31] VladislavMladenov,ChristianMainka,KarstenMeyerzuSelhausen,MartinGrothe,
and Jörg Schwenk. 2019. 1 Trillion Dollar Refund–How To Spoof PDF Signatures.
(2019).
[32] JensMüller,VladislavMladenov,DennisFelsch,andJörgSchwenk.2018. PostScript
Undead:PwningtheWebwitha35YearsOldLanguage.In International Symposium
on Research in Attacks, Intrusions, and Defenses. Springer, 603–622.
[33] Jens Müller, Marcus Brinkmann, Damian Poddebniak, Sebastian Schinzel, and
Jörg Schwenk. 2019. Re: What’s Up Johnny? – Covert Content Attacks on Email
End-to-End Encryption. https://arxiv.org/ftp/arxiv/papers/1904/1904.07550.pdf.
[34] NoSpamProxy. 2019. Simple Email Encryption. https://www.nospamproxy.de/
en/product/nospamproxy-encryption/
[35] U.S. Department of Justice. 2016. Standard Form 750 – Claims Collection Litigation
Report Instructions 2/16. https://www.justice.gov/jmd/file/789246/download
[36] Thom Parker. 2006. How to do (not so simple) form calculations.
https://
acrobatusers.com/tutorials/print/how-to-do-not-so-simple-form-calculations
[37] PDFlib. [n. d.]. PDF 2.0 (ISO 32000-2): Existing Acrobat Features. https://www.
pdflib.com/pdf-knowledge-base/pdf-20/existing-acrobat-features/
[38] Damian Poddebniak, Christian Dresen, Jens Müller, Fabian Ising, Sebastian
Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk. 2018. Efail:
Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels.
In 27th USENIX Security Symposium (USENIX Security 18). USENIX Association,
Baltimore, MD, 549–566. https://www.usenix.org/conference/usenixsecurity18/
presentation/poddebniak
[39] Dan-Sabin Popescu. 2012. Hiding Malicious Content in PDF Documents. CoRR
abs/1201.0397 (2012). arXiv:1201.0397 http://arxiv.org/abs/1201.0397
[40] F. Raynal, G. Delugré, and D. Aumaitre. 2010. Malicious Origami in PDF. Journal
in Computer Virology 6, 4 (2010), 289–315. http://esec-lab.sogeti.com/static/
publications/08-pacsec-maliciouspdf.pdf
[41] Check Point Research. 2018. NTLM Credentials Theft via PDF Files.
https:
//research.checkpoint.com/ntlm-credentials-theft-via-pdf-files/
[42] Ricoh. [n. d.]. Multifunctional Products and Printers for Healthcare.
http:
//brochure.copiercatalog.com/ricoh/mp501spftl.pdf
[43] Rimage. [n. d.]. Rimage encryption options keep your data secure. https://www.
rimage.com/emea/learn/tips-tools/encryption-keeps-data-secure/
Adobe
[44] Billy Rios, Federico Lanusse, and Mauro Gentile. 2013.
Reader Same-Origin Policy Bypass.
http://www.sneaked.net/
adobe-reader-same-origin-policy-bypass
[45] Samsung MFP Security. [n. d.]. White Paper: Samsung Security Framework.
http://www8.hp.com/h20195/v2/GetPDF.aspx/c05814811.pdf
[46] Dmitry Sklyarov and A Malyshev. 2001. eBooks security-theory and practice.
DEFCon. Retrieved March 1 (2001), 2004.
[47] STOIK Soft. 2019. Mobile Doc Scanner (MDScan) + OCR. https://play.google.
com/store/apps/details?id=com.stoik.mdscan
[48] Didier Stevens. 2017. Cracking Encrypted PDFs. https://blog.didierstevens.com/
2017/12/26/cracking-encrypted-pdfs-part-1/
[49] Marc Stevens, Elie Bursztein, Pierre Karpman, Ange Albertini, and Yarik Markov.
2017. The first collision for full SHA-1. In Annual International Cryptology Confer-
ence. Springer, 570–596.
[50] Adobe Systems. 2006. PDF Reference, version 1.7 (sixth edition ed.).
[51] Adobe Systems. 2017. Displaying 3D models in PDFs. https://helpx.adobe.com/
acrobat/using/displaying-3d-models-pdfs.html
[52] Adobe Systems. 2019. Applying actions and scripts to PDFs. https://helpx.adobe.
com/acrobat/using/applying-actions-scripts-pdfs.html
[53] Adobe Systems. 2019. How to fill in PDF forms. https://helpx.adobe.com/en/
[54] Adobe Systems. 2019. Starting a PDF review. https://helpx.adobe.com/acrobat/
acrobat/using/filling-pdf-forms.html
using/starting-pdf-review.html
[55] H. Valentin. 2012. Malicious URI resolving in PDF Documents. Blackhat Abu
Dhabi (2012). https://media.blackhat.com/ad-12/Hamon/bh-ad-12-malicious%
20URI-Hamon-Slides.pdf
[56] VITRIUM. 2019.
Image Protection.
https://www.vitrium.com/
[57] Wibu-Systems. 2019. PDF Protection.
https://www.wibu.com/solutions/
image-protection-drm/
document-protection/pdf.html
A PARTIAL ENCRYPTION
A necessary requirement for direct exfiltration attacks is support for
partial encryption. The PDF standard defines various possibilities
to mix encrypted and unencrypted content. In this section, we
document 18 methods for partial encryption, evaluated in Table 3.
A.1 The “Identity” Crypt Filter
PDF defines crypt filters, which “provide finer granularity control of
encryption within a PDF file” [50]. Standard crypt filters are StdCF
and DefaultCryptFilter for symmetric/asymmetric encryption, and
Identity for pass-through, which can be used to create a document
where only certain streams are encrypted. Although part of the
PDF specification, not all viewers support the Identity crypt filter.
(1) Single stream unencrypted, other streams/strings encrypted
(2) Single stream encrypted, other streams/strings unencrypted
(3) All streams are unencrypted, all strings remain encrypted
(4) All strings are unencrypted, all streams remain encrypted
A.2 The “None” Encryption Algorithm
In addition to pre-defined crypt filters, the definition of new filters is
allowed. For example, a MyCustomCF filter could be added using the
None algorithm (i.e., no encryption) and applied to certain streams,
or all streams or strings. In practice, the None algorithm is rarely
supported by PDF applications as shown in our evaluation
(5) Single stream unencrypted, other streams/strings encrypted
(6) All streams are unencrypted, all strings remain encrypted
(7) All strings are unencrypted, all streams remain encrypted
A.3 Special Unencrypted Streams
Various special streams remain unencrypted (XRef Stream) or can
be defined as encrypted or unencrypted (EmbeddedFile, Metadata).
Unencrypted streams can be manipulated and used in a different
context (e.g., as a container for JavaScript code). Encrypted streams
in an otherwise unencrypted document can be easily exfiltrated.
(8) EmbeddedFile unencrypted, other streams/strings encrypted
(9) EmbeddedFile encrypted, other streams/strings unencrypted
(10) Same as (9), but AuthEvent for decryption set to EFOpen
(11) Metadata unencrypted, other streams/strings encrypted
(12) Metadata encrypted, other streams/strings unencrypted
(13) XRef Stream unencrypted, other streams/strings encrypted
A.4 Special Unencrypted Strings
Various special strings are required to remain unencrypted in an
otherwise encrypted document. Their content can be manipulated
and afterward referenced to as an indirect object (e.g., for a URL).
(14) Encrypt Perms unencrypted, other streams/strings encrypted
(15) Sig Contents unencrypted, other streams/strings encrypted
(16) Trailer ID unencrypted, other streams/strings encrypted
(17) XRef Entry unencrypted, other streams/strings encrypted
A.5 Using Name Types as Strings
Name types define keys in dictionaries – similar to variable names.
They are never encrypted. Non-type-safe PDF viewers do accept
input of type name when a string would be expected (e.g., a URL).
(18) Unencrypted name used as string in an encrypted document
Acrobat Reader DC
Foxit Reader
PDF-XChange Viewer
Perfect PDF Reader
PDF Studio Viewer
Nitro Reader
Acrobat Pro DC
Foxit PhantomPDF
PDF-XChange Editor
Perfect PDF Premium
PDF Studio Pro
Nitro Pro
Nuance Power PDF
iSkysoft PDF Editor
Master PDF Editor
Soda PDF Desktop
PDF Architect
PDFelement
Preview
Skim
Evince
Okular
MuPDF
Chrome
Firefox
Safari
Opera
(2)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(3)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(4)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(15)
(1)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)