title:ObliVM: A Programming Framework for Secure Computation
author:Chang Liu and
Xiao Shaun Wang and
Kartik Nayak and
Yan Huang and
Elaine Shi
2015 IEEE Symposium on Security and Privacy
ObliVM: A Programming Framework for
Secure Computation
Chang Liu∗, Xiao Shaun Wang∗, Kartik Nayak∗, Yan Huang† and Elaine Shi∗
∗University of Maryland and †Indiana University
{liuchang,wangxiao,kartik,elaine}@cs.umd.edu, PI:EMAIL
(Conference version. Full version will appear shortly.)
Abstract—We design and develop ObliVM, a programming
framework for secure computation. ObliVM offers a domain-
speciﬁc language designed for compilation of programs into
efﬁcient oblivious representations suitable for secure computation.
ObliVM offers a powerful, expressive programming language and
user-friendly oblivious programming abstractions. We develop
various showcase applications such as data mining, streaming
algorithms, graph algorithms, genomic data analysis, and data
structures, and demonstrate the scalability of ObliVM to bigger
data sizes. We also show how ObliVM signiﬁcantly reduces
development effort while retaining competitive performance for
a wide range of applications in comparison with hand-crafted
solutions. We are in the process of open-sourcing ObliVM and
our rich libraries to the community (www.oblivm.com), offering
a reusable framework to implement and distribute new crypto-
graphic algorithms.
I.
INTRODUCTION
Secure computation [1], [2] is a powerful cryptographic
primitive that allows multiple parties to perform rich data ana-
lytics over their private data, while preserving each individual
or organization’s privacy. The past decade has witnessed enor-
mous progress in the practical efﬁciency of secure computation
protocols [3]–[8] As a result, secure computation has evolved
from being just a nice theoretical concept to having real system
prototypes [9]–[17]. Several attempts to commercialize secure
computation techniques have also been made [18], [19].
Architecting a system framework for secure computation
presents numerous challenges. First, the system must allow
non-specialist programmers without security expertise to de-
velop applications. Second, efﬁciency is a ﬁrst-class concern
in the design space, and scalability to big data is essential in
many interesting real-life applications. Third, the framework
must be reusable: expert programmers should be able to easily
extend the system with rich, optimized libraries or customized
cryptographic protocols, and make them available to non-
specialist application developers.
We design and build ObliVM, a system framework for
automated secure multi-party computation. ObliVM is de-
signed to allow non-specialist programmers to write programs
much as they do today, and our ObliVM compiler compiles
the program to an efﬁcient secure computation protocol. To
this end, ObliVM offers a domain-speciﬁc language that is
intended to address a fundamental representation gap, namely,
secure computation protocols (and other branches of modern
cryptography) rely on circuits as an abstraction of computa-
tion, whereas real-life developers write programs instead. In
architecting ObliVM, our main contribution is the design of
programming support and compiler techniques that facilitate
such program-to-circuit conversion while ensuring maximal
efﬁciency. Presently, our framework assumes a semi-honest
two-party protocol in the back end. To demonstrate an end-
to-end system, we chose to implement an improved Garbled
Circuit protocol as the back end, since it is among the most
practical protocols to date. Our ObliVM framework, including
source code and demo applications, will be open-sourced on
our project website http://www.oblivm.com.
A. Background: “Oblivious” Programs and Circuits
To aid understanding,
it helps to ﬁrst
think about an
intuitive but somewhat imprecise view: Each variable and each
memory location is labeled either as secret or public. Any
secret variable or memory contents are secret-shared among
the two parties such that neither party sees the values. The
two parties run a cryptographic protocol to securely evaluate
each instruction, making accesses to memory (public or secret-
shared) whenever necessary. For the time being, imagine that
the cryptographic protocol used to execute each instruction se-
curely realizes an ideal functionality without leaking any unin-
tended information. Therefore, the parties can only observe the
traces during the protocol execution: 1) the program counter
(also referred to as the instruction trace); 2) addresses of all
memory accesses (also referred to as the memory trace); and 3)
the value of every public or declassiﬁed variable (similar to the
notion of a low or declassiﬁed variable in standard information
ﬂow terminology). Imprecisely speaking, for security, it is
imperative that the program’s observable execution traces (not
including the outcome) be “oblivious” to the secret inputs. A
more formal security deﬁnition involves the use of a simulation
paradigm that is standard in the cryptography literature [20],
and is similar to the notion adopted in the SCVM work [15].
Relationship between oblivious programs and circuits. If
a program is trace-oblivious by the aforementioned informal
deﬁnition,
the program into a
sequence of circuits. These circuits are allowed to take memory
accesses as inputs, however, these memory access must be
oblivious to preserve security. By contrast, if a program is
not memory-trace oblivious, then a dynamic memory access
(whose address depends on secret inputs) cannot be efﬁciently
made in the circuit representation – a straightforward approach
(which is implicitly taken by almost all previous works except
SCVM [15]) is to translate each dynamic memory access into
a linear scan of memory in the resulting circuit, incurring
prohibitive costs for large data sizes.
is then easy to convert
it
Moreover,
instruction-trace obliviousness is effectively
© 2015, Chang Liu. Under license to IEEE.
DOI 10.1109/SP.2015.29
359
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:02 UTC from IEEE Xplore.  Restrictions apply. 
guaranteed by executing both branches of a secret conditional
in the resulting circuit where only one branch’s execution
takes effect. Our type system (formally deﬁned in a separate
manuscript [21]) rejects programs that loop on secret variables
– in these cases, a maximum public bound on the loop guard
can be supplied instead.
B. ObliVM Overview and Contributions
In designing and building ObliVM, we make the following
contributions.
Programming abstractions for oblivious algorithms. The
most challenging part about ensuring a program’s oblivious-
ness is memory-trace obliviousness – therefore our discus-
sions below will focus on memory-trace obliviousness. A
straightforward approach (henceforth referred to as the generic
ORAM baseline)
is to provide an Oblivious RAM (ORAM)
abstraction, and require that all arrays (whose access patterns
depend on secret inputs) be stored and accessed via ORAM.
This approach, which was effectively taken by SCVM [15],
is generic, but does not necessarily yield the most efﬁcient
oblivious implementation for each speciﬁc program.
At
the other end of the spectrum, a line of research
has focused on customized oblivious algorithms for special
tasks (sometimes also referred to as circuit structure de-
sign). For example, efﬁcient oblivious algorithms have been
demonstrated for graph algorithms [22], [23], machine learn-
ing algorithms [24], [25], and data structures [26]–[28]. The
customized approach can outperform generic ORAM, but is
extremely costly in terms of the amount of cryptographic
expertise and time consumed.
ObliVM aims to achieve the best of both worlds by
offering oblivious programming abstractions that are both
user- and compiler friendly. These programming abstractions
are high-level programming constructs that can be under-
stood and employed by non-specialist programmers without
security expertise. Behind the scenes, ObliVM translates pro-
grams written in these abstractions into efﬁcient oblivious
algorithms that outperform generic ORAM. When oblivious
programming abstractions are not applicable, ObliVM falls
back to employing ORAM to translate programs to efﬁcient
circuit representations. Presently, ObliVM offers the following
oblivious programming abstractions: MapReduce abstractions,
abstractions for oblivious data structures, and a new loop
coalescing abstraction which enables novel oblivious graph
algorithms. We remark that this is by no means an exhaus-
tive list of possible programming abstractions that facilitate
obliviousness. It would be exciting future research to uncover
new oblivious programming abstractions and incorporate them
into our ObliVM framework.
An expressive programming language. ObliVM offers an ex-
pressive and versatile programming language called ObliVM-
lang. When designing ObliVM-lang, we have the following
goals.
intuitive.
• Non-specialist application developers ﬁnd the language
• Expert programmers should be able to extend our frame-
work with new features. For example, an expert program-
mer should be able to introduce new, user-facing oblivious
programming abstractions by embedding them as libraries
in ObliVM-lang (see Section IV-B for an example).
• Expert programmers can implement even low-level circuit
libraries directly atop ObliVM-lang. Recall that unlike
a programming language in the traditional sense, here
the underlying cryptography fundamentally speaks only
of AND and XOR gates. Even basic instructions such
as addition, multiplication, and ORAM accesses must
be developed from scratch by an expert programmer.
In most previous frameworks, circuit libraries for these
basic operations are developed in the back end. ObliVM,
for the ﬁrst time, allows the development of such cir-
cuit libraries in the source language, greatly reducing
programming complexity. Section V-A demonstrates case
studies for implementing basic arithmetic operations and
Circuit ORAM atop our source language ObliVM.
• Expert programmers can implement customized protocols
in the back end (e.g., faster protocols for performing big
integer operations or matrix operations), and export these
customized protocols to the source language as native
types and native functions.
To simultaneously realize these aforementioned goals, we
need a much more powerful and expressive programming
language than any existing language for secure computa-
tion [10], [14]–[17]. Our ObliVM-lang extends the SCVM
language by Liu et al. [15] and offers new features
such as
phantom functions, generic constants, random types, as well as
native types and functions. We will show why these language
features are critical for implementing oblivious programming
abstractions and low-level circuit libraries.
Additional architectural choices. ObliVM also allows expert
programmers to develop customized cryptographic protocols
(not necessarily based on Garbled Circuit) in the back end.
These customized back end protocols can be exposed to the
source language through native types and native function calls,
making them immediately reusable by others. Section VI de-
scribes an example where an expert programmer designs a cus-
tomized protocol for BigInteger operations using additively-
homomorphic encryption. The resulting BigInteger types
and operations can then be exported into our source language
ObliVM-lang.
C. Applications and Evaluation
ObliVM’s easy programmability allowed us to develop a
suite of libraries and applications, including streaming algo-
rithms, data structures, machine learning algorithms, and graph
algorithms. These libraries and applications will be shipped
with the ObliVM framework. Our application-driven evaluation
suggests the following results:
Efﬁciency. We use ObliVM’s user-facing programming ab-
stractions to develop a suite of applications. We show that over
a variety of benchmarking applications, the resulting circuits
generated by ObliVM can be orders of magnitude smaller than
the generic ORAM baseline (assuming that the state-of-the-
art Circuit ORAM [29] is adopted for the baseline) under
moderately large data sizes. We also compare our ObliVM-
generated circuits with hand-crafted designs, and show that
for a variety of applications, our auto-generated circuits are
only 0.5% to 2% bigger in size than oblivious algorithms
hand-crafted by human experts.
360
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:02 UTC from IEEE Xplore.  Restrictions apply. 
Development effort. We give case studies to show how
ObliVM greatly reduces the development effort and expertise
needed to create applications over secure computation.
New oblivious algorithms. We describe a few new oblivious
algorithms that we uncover during this process of program-
ming language and algorithms co-design. Speciﬁcally, we
demonstrate new oblivious graph algorithms including obliv-
ious Depth-First-Search for dense graphs, oblivious shortest
path for sparse graphs, and an oblivious minimum spanning
tree algorithm.
D. Threat Model, Deployment, and Scope
Deployment scenarios and threat model. As mentioned,
ObliVM presently supports a two-party semi-honest protocol.
We consider the following primary deployment scenarios:
1) Two parties, Alice and Bob, each comes with their own
private data, and engage in a two-party protocol. For
example, Goldman Sachs and Bridgewater would like
to perform joint computation over their private market
research data to learn market trends.
2) One or more users break their private data (e.g., genomic
data) into secret shares, and split the shares among two
non-colluding cloud providers. The shares at each cloud
provider are completely random and reveal no infor-
mation. To perform computation over the secret-shared
data, the two cloud providers engage in a secure 2-party
computation protocol.
3) Similar as the above, but
the two servers are within
the same cloud or under the same administration. This
can serve to mitigate Advanced Persistent Threats or
insider threats, since compromise of a single machine
will no longer lead to the breach of private data. Similar
architectures have been explored in commercial products
such as RSA’s distributed credential protection [30].
In the ﬁrst scenario, Alice and Bob should not
learn
anything about each other’s data besides the outcome of the
computation. In the second and third scenarios, the two servers
should learn nothing about
the users’ data other than the
outcome of the computation – note that the outcome of the
computation can also be easily hidden simply by XORing the
outcome with a secret random mask (like a one-time pad). We
assume that the program text (i.e., code) is public.
Scope. A subset of ObliVM’s source language ObliVM-lang
has a security type system which, roughly speaking, ensures
that the program’s execution traces are independent of secret
inputs [15], [31]. However, a formal treatment of the language
and the type system is outside the scope of this paper and
deferred to a forthcoming manuscript [21].
By designing a new language, ObliVM does not directly
retroﬁt legacy code. Such a design choice maximizes oppor-
tunities for compile-time optimizations. We note, however,
that
in subsequent work joint with our collaborators [32],
we have implemented a MIPS CPU in ObliVM, which can
securely evaluate standard MIPS instructions in a way that
leaks only the termination channel (i.e.,
total runtime of
the program) – this secure MIPS CPU essentially provides
backward compatibility atop ObliVM whenever needed.
361
II. RELATED WORK
Existing general-purpose secure computation systems can
be classiﬁed roughly based on two mostly orthogonal dimen-
sions: 1) which “back end” secure computation protocol they
adopt – this will also decide whether the system is secure
against semi-honest or malicious adversaries, and whether the
system supports two or multiple parties; and 2) whether they
offer programming and compiler support – and if so, which
language and compiler they adopt.
A. Back End: Secure Computation Implementations
Below we discuss choices of back end secure computation
protocols and implementations. As discussed later, under real-
istic bandwidth provisioning about 1.4MB/sec, Garbled Circuit
is presently among the fastest general-purpose protocol for
secure computation. Currently, ObliVM primarily supports a
semi-honest Garbled Circuit based back end, but developers
can introduce customized gadgets for special-purpose types
and functions (e.g., operations on sets, matrices, and big
integers), and export them as native types and functions in
the source language. It would not be too hard to extend
ObliVM to support additional back end protocols such as
GMW and FHE – in particular, almost all known protocols
use a circuit abstraction (either boolean or arithmetic circuits).
An interesting direction of the future research is to create
new, compile-time optimizations that automatically selects the
optimal mix of protocols for a given program, similar to what
TASTY [13] proposed, but in a much broader sense.
Garbled Circuit (GC) implementations. The Garble Circuit
protocol was ﬁrst proposed by Andrew Yao [35]. Numerous
later works improved the original protocol: Free XOR shows
that XOR gates can be computed almost “freely” [5]–[7].
Row reduction techniques show that only 2 or 3 garbled
entries (rather than 4) need to be sent across the network
per AND gate [36], [37]. A building block called Oblivious
Transfer (OT) that is necessary for Garbled Circuit protocols
was proposed and improved in a sequence of works as well [3],
[8].
Several works have implemented the Garbled Circuit pro-
tocol – we give an overview of their features and performance
characteristics in Table I.
Non-GC protocols and implementations. Besides Garbled
Circuits, several other techniques have been proposed for
general-purpose secure computation,
including FHE [38],
GMW [2], schemes based on linear secret-sharing [9], [14],
etc. More discussions on non-GC protocols and implementa-
tions can be found in our online technical report [39].
B. Programming and Compiler Support
Secure computation compilers are in charge of compiling
programs to circuit representations. One subtlety must be
clariﬁed: instead of a single circuit, here a program may be
compiled to a sequence of circuits whose inputs are oblivious
memory accesses. The number of these circuits will determine
the number of interactions of the protocol.
Circuit generation. One key question is whether the circuits