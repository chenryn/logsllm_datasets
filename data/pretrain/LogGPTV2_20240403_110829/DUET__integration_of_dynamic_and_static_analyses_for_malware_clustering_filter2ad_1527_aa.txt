title:DUET: integration of dynamic and static analyses for malware clustering
with cluster ensembles
author:Xin Hu and
Kang G. Shin
DUET: Integration of Dynamic and Static Analyses for Malware
Clustering with Cluster Ensembles
Xin Hu
IBM T.J. Watson Research Labs
PI:EMAIL
Kang G. Shin
University of Michigan, Ann Arbor
PI:EMAIL
ABSTRACT
Automatic malware clustering plays a vital role in combating
the rapidly growing number of malware variants. Most ex-
isting malware clustering algorithms operate on either static
instruction features or dynamic behavior features to parti-
tion malware into families. However, these two distinct ap-
proaches have their own strengths and weaknesses in han-
dling diﬀerent types of malware. Moreover, diﬀerent cluster-
ing algorithms and even multiple runs of the same algorithms
may produce inconsistent or even contradictory results. To
remedy this heterogeneity and lack of robustness of a single
clustering algorithm, we propose a novel system called DUET
by exploiting the complementary nature of static and dy-
namic clustering algorithms and optimally integrating their
results. By using the concept of clustering ensemble, DUET
combines partitions from individual clustering algorithms
into a single consensus partition with better quality and ro-
bustness. DUET improves existing ensemble algorithms by
incorporating cluster-quality measures to eﬀectively recon-
cile diﬀerences and/or contradictions between base malware
clusterings. Using real-world malware samples, we compare
the performance of DUET (in terms of clustering precision,
recall and coverage) with individual state-of-the-art static
and dynamic clustering component. The comprehensive ex-
periments demonstrate DUET’s capability of improving the
coverage of malware samples by 20–40% while keeping the
precision near the optimum achievable by any individual
clustering algorithm.
1.
INTRODUCTION
The growing popularity of automatic malware-creation
toolkits, which allow even marginally skilled attackers to
create and customize malware programs, has produced a
plethora of malware variants. Clustering plays a key role
in processing new incoming malware samples. Automatic
and accurate partitioning of these samples into families will
(1) allow analysts to prioritize allocation of precious hu-
man resources for more important, distinct malware pro-
grams; (2) enable automatic classiﬁcation of incoming mal-
ware samples by associating them with existing clusters; and
(3) generalize existing mitigation techniques for new vari-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee. Request permissions from Permissions@acm.org.
ACSAC ’13 Dec. 9-13, 2013, New Orleans, Louisiana USA
Copyright is held by the owner/author(s). Publication rights licensed to
ACM. ACM 978-1-4503-2015-3/13/12 ...$15.00
http://dx.doi.org/10.1145/2523649.2523677.
ants. However, diﬀerent clustering algorithms often gener-
ate inconsistent results. Even multiple runs of the same
algorithm may produce distinct results due to diﬀerent pa-
rameter settings, random initialization or stochastic learning
process [32]. Furthermore, diﬀerent approaches have their
respective strengths and limitations that often depend on
the characteristics of input data, such as data distribution,
pre-processing procedures, anti-analysis techniques used by
malware programs, etc. Thus, no single algorithm can per-
form optimally across various data sets, and a wide range of
clustering algorithms have been proposed [4, 6, 20, 23, 27, 31].
Most existing approaches cluster malware using their dy-
namic behavior or static features. The main beneﬁt of dy-
namic behavior based clustering is its resilience to low-level
mutation techniques, such as packers or binary obfuscation
that do not aﬀect runtime behavior. However, behavior-
based approaches also suﬀer from several weaknesses. First,
they may have only limited coverage of an application’s be-
havior, failing to reveal the entire capabilities of a given mal-
ware program. This is because a dynamic analysis system
can only capture API or system-call traces corresponding to
the code path taken during a particular execution. Unfor-
tunately, depending on the program’s internal logics and/or
external environments, diﬀerent code paths may be taken
during diﬀerent executions. For instance, many malware
exhibit interesting behavior only when certain conditions
are met, such as speciﬁc date/time or receipt of network
commands (e.g. botnet). In contrast, static clustering algo-
rithms analyze features extracted from a program’s binary
or disassembled instructions. They are capable of covering
all possible code paths of an application, including parts of
the program that normally do not execute, thereby yielding
more accurate characterization of the program’s function-
alities. However, their performance may suﬀer when fac-
ing binary-level packing, anti-reversing and anti-disassembly
techniques. Because of these limitations, it is often very
challenging, if not impossible, to develop a single, eﬀective
clustering algorithm for all sets of malware programs.
In this paper, instead of focusing on developing a single
clustering algorithm that works only for a narrow range of
datasets, we design a uniﬁed clustering framework, called
DUET, exploiting the complementary features of static and
dynamic clustering approaches. DUET systematically com-
bines diﬀerent clustering algorithms based on the concept
of cluster ensemble. Speciﬁcally, given a set of (dynamic or
static) clusterings C1,C2, . . . , Cm, cluster ensemble attempts
to derive a single clustering C that, according to certain cri-
teria, is in as much agreement as possible with the original
m clusterings. By exploiting the consensus among diﬀerent
clustering algorithms, cluster ensemble combines strengths
of individual clusterings and yields better-quality clusters
79
with higher coverage. For instance, a dynamic approach may
mistakenly put all malware programs that stop execution
after detecting a virtual environment into the same cluster,
owing to the similar system calls invoked by the malware be-
fore they exit. Such coverage gaps can often be resolved by
using a static approach to grouping them according to their
binary traits. One challenge is how to reconcile the conﬂict-
ing results generated by diﬀerent clustering algorithms. If
static and dynamic approaches are assigned an equal weight
when reconciling their results, the ensemble algorithm can,
at best, make random choices. We address this problem
via a Clustering-Quality metric, which gauages how strongly
connected/related the data points are within each cluster.
By assigning each cluster a quality score, high-quality clus-
ters, where member malware programs share stronger con-
nections, are assigned heavier weights when combining the
conﬂicting results, thus improving the overall clustering ac-
curacy. Our evaluation of DUET with real-world malware
samples demonstrates its ability to improve the malware
coverage by 20–40% while keeping the accuracy near the
optimum achievable by any individual clustering algorithm.
The main contribution of DUET is to employ clustering en-
semble as a principled method to build a framework that
systematically uniﬁes static and dynamic clustering results,
achieving much better results than any single approach alone.
Although the ideas of exploiting diverse perspectives of static
and dynamic features have been discussed before, DUET is
unique in that it systematically addresses this problem and
demonstrates the eﬀectiveness of a relatively large-scale work-
ing prototype. DUET thus oﬀers additional insights into the
complementary nature of diﬀerent analysis approaches and
eﬃcient ways of integrating them in malware clustering.
The rest of this paper is organized as follows. Section 2
discusses related work. Section 3 provides a brief overview
of DUET architecture. Section 4 describes static and dynamic
clustering algorithms. Sections 5 and 6 detail the proposed
cluster ensemble algorithms. Section 7 presents the evalu-
ation results and Section 8 discuss the limitations. Finally,
Section 9 concludes the paper.
2. RELATED WORK
Static feature-based methods are among the ﬁrst few ap-
proaches proposed for malware clustering due mainly to their
simplicity and fast speed. Static features like PE headers
[31], code patterns [7], instruction sequences [16] or binary
sequences [15] are extracted and used to train various learn-
ing algorithms [19] for malware categorization and detec-
tion. Unfortunately, the popularity of static approaches en-
couraged malware writers to develop obfuscation techniques
and thwart the static analysis. As a result, dynamic ap-
proaches have recently received signiﬁcant attention. For
instance, Rieck et al. [27] trained a SVM classiﬁer using the
malware’s run-time behavior, such as copy ﬁles and create
processes. Bailey et al. [4] employed a hierarchical clus-
tering algorithm to group similarly-behaving malware sam-
ples based on non-transient state changes. More recently,
Bayer et al. [6] adopted locality-sensitive hashing (LSH) and
Rieck et al. [20] developed a prototype-based clustering al-
gorithm to improve the scalability of behavior-based clus-
tering. Unfortunately, dynamic approaches also have their
own weaknesses, e.g., an incomplete view of program’s be-
havior. Therefore, a systematic approach to combining the
strengths of both static and dynamic analysis algorithms is
highly desirable. Although the ideas of combining static and
dynamic clusterings have been mentioned in both industry
and academia [3, 24], very few have addressed their system-
atic integration. The work most relevant to ours are those of
Leita et al. [24] and Anderson et al. [3]. In their work in [24],
Leita et al. focused on gaining insights into the relationship
among diﬀerent code variants and presented several scenar-
ios where the combination of static and dynamic sources
can help detect clustering anomalies. However, these inte-
grations of static and dynamic clusterings are mostly done
manually and studied on a case-by-case basis. Anderson et
al. [3] applied a multi-kernel learning method to combine
similarity metrics for diﬀerent data sources including static
and dynamic features of malware programs. They trained
a multi-kernel SVM (Support Vector Machine) classiﬁer on
features extracted from 780 malicious and 776 benign pro-
grams, and demonstrate beneﬁts of combining diﬀerent data
sources in classifying malicious programs.
Cluster ensemble is a process of obtaining a single consen-
sus and better clustering results from a number of diﬀerent
clusterings [2]. Strehl and Ghosh [2] considered cluster en-
semble as a knowledge-reuse framework for combining dif-
ferent clusterings. Hong et al. [14] implemented an approach
that combines the relabeling and voting to achieve the best
agreement between the labels of partitions. Fed [10] and Jain
[11] constructed the consensus function as a co-association
matrix which represents the association or connectivity be-
tween each pair of data samples. These work all showed that
ensemble is an eﬀective way to improve the robustness, sta-
bility and accuracy of clustering. In this paper, we employed
the connectivity matrix-based ensemble approaches.
3. SYSTEM OVERVIEW
Figure 1: An overview of DUET
Fig. 1 depicts the system architecture of DUET. Given a
set of malware programs, DUET ﬁrst uses two diﬀerent fea-
ture extractors to derive (1) static-instruction features and
(2) dynamic-behavior features. Second, the results of indi-
vidual clusterings are generated by applying diﬀerent clus-
tering algorithms with diﬀerent parameters settings. Then,
the quality of each individual clustering is evaluated and
used to construct the connectivity-based consensus matrix,
where ensemble methods are applied to derive the ﬁnal par-
titions. We will elaborate each component of DUET in the
following sections.
4. MALWARE CLUSTERING
This section introduces the base static and dynamic clus-
tering algorithms used by DUET for ensembles. We adopt
the state-of-the-art malware clustering algorithm proposed
in [20] because of its eﬀectiveness and scalability. Note, how-
ever, that DUET does not rely on speciﬁc algorithms and can
easily accommodate other clustering algorithms to increase
the diversity of input clusterings.
80
4.1 Clustering Using Static Features
DUET’s static clustering component, henceforth referred to
as DUET-S, exploits the common observation that a large
portion of today’s malware are ﬁle-level variations of a small
number of families and tend to share similar instruction se-
quences. DUET-S consists of the following steps.
Unpacking: Packing is arguably the most popular tech-
niques used by malware writers to circumvent anti-virus de-
tection. A typical packer (e.g UPX) works by creating a
new binary containing the compressed version of the origi-
nal binary followed by the unpacker code. When the packed
program runs, the unpacker will ﬁrst be executed. The un-
packer de-compresses the original program codes, write them
into some memory location and jump to the ﬁrst instruc-
tion of the restored codes to start execution. Packing allows
malware to hide malicious instructions and evade anti-virus
detection, while keeping the original functionalities intact.
Since DUET-S , likely any other static analysis approach, re-
lies on features extracted from original instructions, it is
imperative to correctly unpack input malware programs.
While there exist unpacking tools such as UnPECompact,
ASProtect Deprotector, etc., they are often targeted speciﬁ-
cally at one or a few packers. In addition, they often have to
perform expensive processing to ensure that the unpacked
program can be successfully executed (e.g., the ﬁle head-
ers and imported tables must be correctly reconstructed),
making them too slow for large scale processing. In DUET-S,
we tailored a generic unpacking algorithm proposed in [13]
for eﬃcient malware clustering by exploiting the observa-
tion that, for static analysis, DUET-S need not guarantee the
executability of unpacked programs as long as the original
instructions can be inspected and features extracted. The
basic idea is to utilize the inherent property of the unpack-
ing procedure, i.e., a packed binary has to write the original
code into some memory space and execute them. Hence by
continuously monitoring memory access patterns of write
and execute, one can detect the occurrence of some form of
unpacking, self-modiﬁcation or on-the-ﬂy code generation.
To achieve this, DUET-S takes advantages of the physical
non-execution (NX) support in modern x86 CPUs. Speciﬁ-
cally, given a packed program, DUET-S loads it into memory,
marks all the memory pages as executable but non-writable.
Then during the execution, when the unpacker attempts
to write original codes into some memory page (which has
been marked as non-writable), a write exception will occur.
DUET-S captures such an exception, marks the page as dirty
and changes the permission to writable but non-executable.
When the unpacker jumps to the newly-generated code for
execution (e.g., after ﬁnishing unpacking), the absence of
executable permission on these pages triggers an execution
exception. DUET-S intercepts the exception and records the
memory page’s address (these modiﬁed-then-executed mem-
ory pages likely contain the original machine instructions
and thus are targets for feature extraction). Then DUET-S re-
moves the write permission from these memory pages again,
grants execution privilege and continues the program’s ex-
ecution. Finally, DUET-S dumps the process memory image
either at the end of program execution or after certain time
threshold (e.g., 2 minute). The rationale is that after the
program has been running for a suﬃcient amount of time ,
it is fairly safe to assume that the program has ﬁnished un-
packing and the original codes are present in the memory.
Notice that this generic unpacking process can be seamlessly
integrated into dynamic analysis, thereby incurring little ad-
ditional overhead for DUET.
Table 1: Unpacking eﬀectiveness (IC: Instruction
Count; NG Dist: N -gram Diﬀerence)
Packer
PECompact
EXECryptor
EXEStealth
VMprotect
Diﬀ in
NG
IC (%) Dist
0.068
0.88%
3.20%
0.176
0.071
0.88%
2.50%
0.10
Packer
ASProtect
UPX
NSPack
Armadillo
Diﬀ in
NG
IC (%) Dist
0.133
6.70%
0.88%
0.068
0.069
0.87%
–
–
To better understand the eﬀectiveness and limitation of
the generic unpacking algorithm, we use 8 popular packing
tools to pack malware programs and then compare DUET-
S unpacked ﬁles with their original version.
Ideally, the
unpacked binary should be byte- to-byte identical to the
original ﬁle. However, this is neither possible (DUET-S does
not reconstruct the import table, and the unpacker code is
also dumped from the memory), nor necessary for the pur-
pose of malware clustering. As a result, we use following
two metrics are directly related to clustering accuracy: (i)
the diﬀerence in their instruction count (IC), and (ii) the
distance between their N-gram feature vectors (NG, details
are elaborated later in this section). Table 1 summarizes
the results. For most packers, DUET-S successfully recovered
original binaries with only a 1–6% increase of ICs which
is often due to the inclusion of unpacker routines in the
dumped memory. Besides, the feature vectors of unpacked
binaries are very similar to those of the original binary with
most normalized distance measurements below 0.1, where 0
means identical and 1 means completely diﬀerent. However,
DUET-S also failed on some packers e.g., Armadillo. A further
investigation showed that Armadillo works by unpacking an
intermediate executable on disk and creating another pro-
cess to run this executable. Therefore, memory dump of an
Armadillo-packed ﬁle does not contain original instructions.
After running DUET-S on the large data set, we have also
observed other causes of unsuccessful unpacking, such as
malware samples refuse to run in a virtual machine or the
time required for unpacking is longer than the threshold.