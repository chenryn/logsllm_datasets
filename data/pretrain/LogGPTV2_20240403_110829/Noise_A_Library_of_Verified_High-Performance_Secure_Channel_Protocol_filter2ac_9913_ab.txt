and computes the same sequence of chaining and payload
encryption keys to decrypt the payload. In addition to the keys,
each participant also maintains a hash of the protocol transcript,
which is added as associated data to each encrypted handshake
payload (to prevent handshake message tampering.)
X: One-Way Encryption. The protocol X is a one-way
protocol that encrypts data in a single direction, from an initiator
I to a responder R. As such, this protocol can be considered a
replacement for constructions like NaCl Box [28] or HPKE [29]
for encrypting ﬁles or one-way messages.
We now break down the notation for this protocol, which
appears in Figure 2 under “message sequence”. The pre-
message token s, assumes that I has received R’s static public
key gr before the handshake. The handshake itself consists of
a single message (from I to S) with four tokens (e, es, s, ss)
followed by an encrypted payload (d0). Here, ephemeral-static
Difﬁe-Hellman (es) serves to provide conﬁdentiality for k1
(even if I’s static key were compromised), whereas static-
static Difﬁe-Hellman (ss) is used to authenticate I. After the
handshake, I can send any number data messages (d1, d2 . . .)
to R, using the ﬁnal payload encryption key.
NX: Server-Authenticated Key Exchange. The protocol NX
is a unilaterally authenticated key exchange protocol, where R
is authenticated but I is not. Hence, this protocol can be seen
as a replacement for TLS as it is used on the Web. The main
difference from X is that it has no pre-messages, and has a
second message that uses ephemeral-ephemeral Difﬁe-Hellman
(ee) to provide forward secrecy.
We can extend NX to a mutually-authenticated protocol by
adding a third handshake message that uses I’s static key (se).
This yields a different Noise protocol called XX, which is one
of the protocols used in WhatsApp. Both NX and XX are single
round-trip (1-RTT) protocols since the initiator has to wait for
the response before it can send its ﬁrst encrypted message.
However, in scenarios where I already knows R’s static public
key (gr) via a pre-message, it can use this prior knowledge
to start sending data with the ﬁrst message (0-RTT), but with
different secrecy and conﬁdentiality guarantees.
IKpsk2: Mutual-Authentication and 0-RTT. The IKpsk2
protocol, which is used by the WireGuard VPN, supports
mutual authentication and 0-RTT by relying on both Difﬁe-
Hellman and pre-shared keys, and hence provides some of the
strongest security properties among all Noise protocols.
The protocol starts like X but includes authenticated mes-
sages in both directions; it uses four Difﬁe-Hellman operations
and also a pre-shared key in the second message (psk token)
for additional protection against compromised static keys (and
future quantum adversaries). Removing the psk token yields a
protocol called IK, which is also used in WhatsApp.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
109
B. Formalizing Noise in F*
We deﬁne a series of F* types that encode the syntax of Noise
protocols. We deﬁne algebraic datatypes (enumerations) for
pre-message and message tokens. We then deﬁne a handshake
pattern as a record type containing a protocol name, a pre-
message from I to R (premessage ir), a pre-message from
R to I (premessage ri), and a list of handshake messages in
alternating directions (ﬁrst I to R, then R to I, and so on):
type premessage token = | PS | PE
type message token = | S | E | SS | EE | SE | ES | PSK
type handshake pattern = {
name : string;
premessage ir : option (list premessage token);
premessage ri : option (list premessage token);
messages : list (list message token)}
We also deﬁne some convenient notations in F* to construct a
handshake pattern. For example, IKpsk2 is written as:
The main handshake state type contains the full state of a
Noise handshake for a given participant; it includes the current
symmetric state and all the private, public, and shared keys
currently known to the participant:
type handshake state (cfg : conﬁg) = {
sym state : symmetric state cfg;
static : option (keypair cfg);
ephemeral : option (keypair cfg);
remote static : option (public key cfg);
remote ephemeral : option (public key cfg);
preshared : option preshared key}
Message Processing Functions. The Noise speciﬁcation
document describes a series of functions over the three state
objects, which we faithfully encode in F*. The highest-level
operations deﬁned by the document are functions for sending
or receiving one handshake or data message. We describe the
F* code for the handshake sending functions below.
let pattern IKpsk2 =
hs ”IKpsk2” [
∼∼ [E; ES; S; SS];
∼<∼ [E; EE; SE; PSK]]
The Noise speciﬁcation deﬁnes a set of syntactic validity rules
to ensure that the resulting protocols are implementable and
secure. An example functional constraint is that a protocol
should not use the token ee before e has been sent in both
directions. A security constraint is that a session key based on a
psk token should not be used for encryption unless an e has also
been sent (otherwise there could be encryption nonce reuse.)
We encode these rules as a boolean function over handshake
patterns, and check that it holds for all 59 patterns.
val well formed: handshake pattern → bool
Types for the Handshake State. To formalize the execution
rules, we closely follow the Noise speciﬁcation by deﬁning the
handshake state and functions over this state. Each type and
function in our speciﬁcation is parameterized by a conﬁg type
specifying three cryptographic algorithms: a Difﬁe-Hellman
group, an AEAD encryption scheme, and a hash algorithm:
type conﬁg = dh alg & aead alg & hash alg
The cipher state type consists of an AEAD key and a counter;
it can be used for AEAD encryption and decryption:
type cipher state = {k : option aead key; n : nat}
The symmetric state type represents the cryptographic state of
a Noise handshake. It contains a hash of the protocol transcript
(essentially all the message tokens processed so far), the current
session key, called chaining key in Noise, and a cipher state
(derived from the chaining key) which is used for encrypting
static keys and payloads during the handshake:
type symmetric state (cfg : conﬁg) = {
h : hash cfg; ck : chaining key cfg; c state : cipher state}
First, we deﬁne a function that implements the sending
operation for a single token as a case analysis over the 7
possible tokens (we show two cases below):
let send message token (cfg:conﬁg) (initiator is psk:bool)
(tk:token) (st:handshake state cfg) :
result (bytes & handshake state cfg) =
match tk with
| S → (match st.static with
| None → Fail No key
| Some k →
(match encrypt and hash cfg k.pub st.sym state with
| Fail x → Fail x
| Res (cipher, sym st’) →
Res (cipher, { st with sym state = sym st’; })))
| EE → dh update cfg st.ephemeral st.remote ephemeral st
| ...
The function send message token takes as arguments: a
conﬁg, a boolean ﬂag indicating whether the sender is the
initiator, a boolean ﬂag indicating whether the current protocol
uses psk, a token tk and a handshake state st. If the token
is an S, the code ﬁnds the sender’s static key (st.static),
encrypts it and adds to the transcript hash (encrypt and hash),
returning the ciphertext (cipher) and the updated handshake
state. If the token is an EE, the sender reads its ephemeral
private key (st.ephemeral), the peer’s ephemeral public key
(st.remote ephemeral) and calls the dh update function that
computes the Difﬁe-Hellman shared secret, mixes it into the
current chaining key, and returns an empty bytestring and the
updated handshake state. The other cases are similar.
Building on this token-level
function
send message tokens
function, we then write
a
calls
send message token to process an arbitrary list of tokens, and
use it to deﬁne a high-level function send messagei for sending
the i-th handshake message in a handshake pattern.
recursively
that
A similar sequence of functions builds up to the top-level
handshake receive function recv messagei. Using these and
other message-level functions in our speciﬁcation, we can
construct or process any pre-message, handshake message, or
application data message in a Noise protocol.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
110
Comparison with Prior Noise Models. Three features of
our speciﬁcation are notable. First, our F* code is executable
and precisely matches the Noise speciﬁcation at the byte
level. Indeed, by linking our speciﬁcation code with the
HACL* cryptographic library, we are able to extensively
test our speciﬁcation against test-vectors from other Noise
implementations. Second, we use recursive functions to model
protocols and messages of arbitrary length, even though in
practice, we may only care about the 59 protocols in the current
Noise speciﬁcation. Third, our code is structured as a protocol
interpreter, and hence provides a single generic functional
speciﬁcation for all Noise protocols.
These three features are in contrast with prior formal models
of Noise protocols that were written for various security
analyses [21], [22], [23], [9]. These models ignore many low-
level protocol details, are not precise at the byte level, and are
not testable. Their modeling languages cannot handle generic
recursion or protocol interpreters, and so require a separate
model for each Noise protocol. We believe our F* speciﬁcation
more closely captures the spirit of Noise and serves as a formal
companion to the Noise speciﬁcation.
C. Noise Protocol Security Guarantees
Different Noise protocols offer different security guarantees.
Even within a single protocol, the conﬁdentiality and authenti-
cation guarantees obtained by the initiator and responder often
differ. These guarantees typically improve with each handshake
message and stabilize after the handshake completes. For
example, IKpsk2 allows application data to be sent both during
the handshake (d0, d1) and after the handshake (d2, d3, . . .),
and each of these messages has different security guarantees.
The Noise speciﬁcation [20] deﬁnes 3 levels of authenticity
(A0-A2) and 6 levels of conﬁdentiality (C0-C5). Figure 2 lists
the security levels at each stage of our three protocol examples,
and Appendix B lists them for all 59 Noise patterns.
Payload Authentication Properties. The three authentication
levels are: A0: No authentication; A1: Sender authentication
vulnerable to Key Compromise Impersonation (KCI) attacks;
A2: Sender authentication without KCI attacks.
Consider a Noise protocol session between A and B, where
B receives a message M at authentication level A2 (supposedly)
from A. If B successfully decrypts this message, it has the
guarantee that the message was indeed sent by A, unless the
long-term static key of A (static Difﬁe-Hellman private key
and/or PSK) has been compromised (i.e., leaked to the attacker)
before the message was received. Authentication level A1 is
weaker: it only guarantees message authenticity if the static
keys of both A and B are uncompromised.
For example, in NX, the initiator is never authenticated, so
messages in the forward direction (→) in Figure 2 always have
authentication level A0. The responder is fully authenticated
and so its messages to the initiator are at level A2. In X
and IK, the ﬁrst message is authenticated by the initiator,
but authentication is based on static-static Difﬁe-Hellman (ss),
which means that if the responders’s static key is compromised,
an attacker can impersonate the initiator to the responder,
resulting in a KCI attack. Hence, the authentication level is
A1 for forward messages (→), until the third message when
the static-ephemeral Difﬁe-Hellman (se) token strengthens the
initiator’s authentication level to A2.
Payload Conﬁdentiality Properties. The six conﬁdentiality
levels, in increasing order of strength, are as follows: C0:
No conﬁdentiality; C1: Conﬁdentiality only against passive
adversaries; C2: Conﬁdentiality against active adversaries,
with weak forward secrecy against sender static compromise;
C3: Weak forward secrecy against sender and receiver static
compromise; C4: Strong forward secrecy unless sender static
was compromised before message; C5: Strong forward secrecy.
Of these, the ﬁrst two levels offer very weak conﬁdentiality,
in that an active network adversary can read a payload sent
at level C0 or C1. Levels C2-C5 offer incremental degrees of
forward secrecy, depending on which subset of static keys may
be compromised and when. C2 offers conﬁdentiality as long
as the sender’s ephemeral key and the recipient’s static keys
remain uncompromised. C3 additionally allows the receiver’s
static key to be compromised as long as the peer ephemeral
public key at the sender corresponds to an uncompromised
ephemeral private key at the recipient. C4 allows the sender
and recipient’s static keys to be compromised after the message
is sent. C5 provides conﬁdentiality even if the sender’s static
keys were compromised before the message was sent.
In Figure 2, X offers conﬁdentiality at level C2 because
there is no fresh ephemeral provided by the recipient. NX
offers strong forward secrecy at level C5 for messages to the
responder, but only level C1 for messages to the unauthenticated
initiator. IKpsk2 provides level C5 conﬁdentiality in both
directions from the third message. However, the ﬁrst message
only offers level C2 (like X) and the second message only offers
level C4 since an attacker who knows the responder’s static
private key and PSK will be able to forge the ﬁrst message,
record the second message, and later compromise the initiator’s
static key to obtain the session key and decrypt the payload.
We deﬁne an F* function that computes the authentica-
tion and conﬁdentiality levels for each message in each
handshake pattern (see Appendix B). We conﬁrm that it agrees
with the Noise speciﬁcation on the 38 protocols annotated in
the document, and we also compute levels for the 21 PSK
patterns not annotated in the speciﬁcation. In Section V, we
show how these security levels are mapped to precise security
goals stated as trace properties and we prove that our protocol
speciﬁcation meets these goals.
D. A High-Level API for Noise
A full protocol implementation has to handle many security-
critical details beyond message processing. For example, in
the NX protocol, when the initiator receives the responder’s
static key in the second message, it has to validate this key.
Otherwise, there is no guarantee it is talking to the intended
responder and all authenticity and conﬁdentiality guarantees
are lost. Similarly, in X and IKpsk2, the initiator static key
needs to be validated against some database of known initiators.
In PSK-based protocols like IKpsk2, the responder does not
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
111
know what PSK to use until it sees the initiator’s static key; so
we need a way for the responder to dynamically retrieve and
validate a PSK based on a protocol message. An implementation
that skips or incorrectly implements these key validation steps
becomes vulnerable to serious attacks. However, none of these
validation steps are documented in the Noise speciﬁcation and
so are left for the application layer to handle.
It is unrealistic to expect an application programmer who
uses Noise to have the intimate knowledge needed about a
speciﬁc Noise protocol in order to directly use the messaging
functions, perform all the required validation steps, and know
when it is safe to send or receive data.
We address this gap by formally specifying (and implement-
ing) a high-level API that combines several layers: a session-
based API that hides message-level protocol details, secure
key storage with user-provided policies for key management,
built-in validation steps and a defensive user-friendly interface
that provides clear guidance on when it is safe to send or
receive data over a Noise session. For example, sending
secret application data after the ﬁrst message of NX would be
disastrous, but may be safe with IKpsk2. §IV describes our
implementation of this high-level API in C.
III. IMPLEMENTING A NOISE COMPILER IN LOW*
Our speciﬁcation (§II) may run via the OCaml backend of
F*, which we use for testing and spec-validation purposes. This
execution path suffers, however, from slow performance: in F*
speciﬁcations, integers compile as inﬁnite-precision bignums;
sequences compile to persistent functional lists; and execution
relies on OCaml’s runtime system and garbage collector.
We now set out to write a low-level, efﬁcient implementation
of Noise protocols that does not suffer from such performance
shortcomings. This section focuses on a novel technique called
“hybrid embeddings”, a key technical ingredient that allows us
to author low-level code that remains parametric over the choice
of Noise pattern, in a fashion similar to the interpreter. With
hybrid embeddings, we verify the low-level code once then
generate for free any number of specialized implementations
for any Noise patterns: doing so, we minimize the veriﬁcation
effort while still guaranteeing low-level performance.
A. Warm-Up: Low* Implementation of ss
For our efﬁcient, low-level implementation of Noise proto-
cols, we use Low*. Low* is a subset of F*; or, said differently,
Low* is a shallow embedding of a well-behaved subset of
C into F*. Thanks to F*’s powerful effect system, Low*
deﬁnes a CompCert-like C memory model, which captures
heap- and stack-based allocations. A set of distinguished types,
combinators and libraries provides tools to operate on mutable
arrays, machine integers, const pointers, and so on. Low* has
been used for cryptographic libraries [26], [30], providers [15],
protocol record layers [31], [32] and parsers [14].
In contrast to §II, where functions were pure, Low* functions
use a new set of effects: Stack and ST. Consider the function
that performs the required processing for the SS token.
inline for extraction
let send ss (nc: iconﬁg) (ssdhi: ssdh impls nc)
(ssi: static info) (initiator: bool) (is psk: bool)
(st: valid send token hsm nc is psk SS ssi):
Stack error code
(requires (fun h →
live h st.static ∧ live h st.remote static ∧
not (is null st.static) ∧ not (is null st.remote static) ∧
loc disjoint (loc st.static) (loc st.remote static) ∧ ... ∧
sym state invariant st.sym state ∧ nc.dh pre ∧ ...))
(ensures (
let st0 v = eval handshake state h0 st ssi in
let st1 v = eval handshake state h1 st (ssi
let r v = Spec.send message token initiator is psk SS st0 v in
match to prim error code r, r v with
| CSuccess, Res (..., st1’ v) → st1 v == st1’ v ∧ ...
| CDH error, Fail DH →(cid:62)| →⊥))
init sk ssi) in
= ssdhi.dh update ssi st.static st.remote static st
Many of the parameters resemble the ones we saw earlier
(§II). The iconﬁg, for implementation conﬁguration, extends
a spec-level conﬁg with low-level speciﬁc preconditions such
as “our DH implementation requires AVX2” (nc.dh pre). The
ssdhi parameter contains our choice of implementation for
cryptographic operations related to the symmetric state and DH;
the Low* code is not only generic over the choice of algorithm
(like the earlier speciﬁcation), it is also generic over the choice
of implementation. As an example, if the iconﬁg commits
to Curve25519 for the DH algorithm, our code can operate
either with HACL*’s Curve51 or Curve64 implementation. The
ssi parameter stands for “state static-information”; it contains
statically-known information, such as whether at this point of
the handshake a symmetric key has been derived or not; and
it also contains the nonce (sequence number) to be used for
the cryptographic operations. Finally, initiator and is psk are
similar to the parameters we saw earlier (§II).
The function signature exhibits typical features of Low*. The
st argument represents the low-level state of the protocol, which
can be reﬂected in a given heap h0 as a high-level state, using
eval handshake state h0 st ssi. The Stack return effect indicates
that the function is valid vis-`a-vis the C memory model and
only performs stack allocations (this latter restriction can be
lifted by using the ST effect). The pre-condition covers spatial
(disjointness) and temporal (liveness) preconditions; as well
as functional correctness requirements, such as the symmetric
state invariant and the implementation-speciﬁc preconditions.
In the post-condition, we elide memory-related predicates (e.g.,
only the protocol state is modiﬁed by a call to this function)
for clarity. We focus instead of functional correctness: st0 v
reﬂects low-level state st as a spec-level state before calling
send ss; similarly, st1 reﬂects st after calling the function. If
we execute the interpreter on st0 and obtain st1’, then both st1’
and st1 coincide, i.e., if the speciﬁcation guarantees success, so
does the low-level implementation with the same result; if the
speciﬁcation errors out, so does the low-level implementation.
B. A Generic Low* Implementation
Inspired by the generic spec-level interpreter, we now write
an even more generic low-level function that not only works
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
112
for any choice of algorithm, implementation, responder and
PSK, but also works for any Noise token.
inline for extraction
let send message token nc ssdhi ssi initiator is psk
= match tk with
tk st out: (rtype (send token return type ssi is psk tk))
| S → send s nc ssdhi ssi initiator is psk st out
| E → send e nc ssdhi ssi initiator is psk st out
| ... → ... (* identical for SS, EE, SE, ES, PSK *)
The send message token function above attains the same
level of genericity as the speciﬁcation. Even the return type
of the function is generic: send token return type captures the
fact that SS returns an error code (for DHs that compute to 0),
whereas S does not, by reducing at compile-time to error code
or unit, respectively. (Here, our speciﬁcation is more precise
than the Noise speciﬁcation, which leaves it up to the user
to determine whether a DH that computes 0 is an error.) Our
function can thus be used for all Noise protocols: the initial
match acts as an interpreter, examines the Noise token, then
dispatches execution to a suitable set of Low* functions.
Our style saves a tremendous amount of veriﬁcation effort:
rather than replicating the effort for 59 protocols, we extract
the commonality, capture it with dependent types, and proceed
to write send message token once and for all. The challenge
now remains to ensure that the function generates valid C code
that eliminates all runtime checks on the nature of the token.
To that end, we rely on implicit staging and compile-time
partial evaluation via F*’s normalizer. The ﬁrst six parameters
of the function are compile-time parameters: once a Noise
protocol is chosen, their concrete value is statically known;
and the F* compiler is capable of performing enough partial
evaluation at compile-time that all uses of these parameters
disappear before the code is even extracted to C.
Consider, for instance, the X protocol we saw earlier. At
compile-time, we pick concrete values for the choice of algo-
rithms (nc) and implementations (ssdhi). For the ﬁrst handshake
message, we call send message token, with ssi.has key = false,
ssi.nonce = 0, initiator = true, is psk = false and of course tk = E.
Thanks to the “inline for extraction” keyword, F* aggressively
reduces the deﬁnition of send message token; the match reduces
away, leaving only a call to send e. This latter function itself
further reduces: for instance, any statement of the form if is psk