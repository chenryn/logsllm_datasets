Security
Known
vulnerability
Total
liabilities
Privacy
Population
Individual
liabilities
[43]
-
-
[43]
-
-
-
Proving
time
𝑂(𝑛)
𝑂(𝑛)
𝑂(𝑛 · 𝑀)
𝑂(𝑛)
𝑂(𝑛 + 𝐵)
𝑂(𝑛 · 𝐻)
𝑂(𝑛 · 𝐻)
Verification
time
𝑂(log 𝑛)
𝑂(log 𝑛)
𝑂(log 𝑛)
𝑂(𝑛 + 𝐵)
𝑂(𝐻)
𝑂(𝐻)
𝑂(log(𝑛 · 𝑀))
𝑂(log(𝑛 · 𝑀))
Proof
size
𝑂(log 𝑛)
𝑂(log 𝑛)
𝑂(log 𝑛)
𝑂(1)
𝑂(𝐻)
𝑂(𝐻)
Commitment
size on PBB
𝑂(1)
𝑂(1)
𝑂(1)
𝑂(1)
𝑂(𝑛 + 𝐵)
𝑂(1)
𝑂(1)
and 𝑟𝑐ℎ, i.e., 𝑐 = 𝑐𝑙𝑐ℎ + 𝑐𝑟𝑐ℎ . For the hash field, unlike hashing
the concatenation of two child nodes in a standard Merkle tree,
i.e., ℎ = H(ℎ𝑙𝑐ℎ ||ℎ𝑟𝑐ℎ), Maxwell-Todd includes the value field at
hashing, i.e., ℎ = H(𝑐||ℎ𝑙𝑐ℎ ||ℎ𝑟𝑐ℎ). For each leaf node mapped to a
user, ℎ = H(𝑐||𝐶𝐼), where 𝐶𝐼 is the credential information of the
user. We demonstrate in fig. 1 a summation Merkle tree for 4 users.
P generates the summation tree and commits the Merkle root
(ℎ𝑟𝑜𝑜𝑡 , 𝑐𝑟𝑜𝑜𝑡) to a PBB. The value 𝑐𝑟𝑜𝑜𝑡 is the amount of P’s total
liabilities. A user queries the prover for a Merkle proof to make
sure the amount is included in the tree. For instance, in fig. 1, the
prover sends the Merkle path (ℎ2, 𝑐2), (ℎ6, 𝑐6) to User 1. Possessing
5 = 𝑐1 + 𝑐2 and 𝑐′
(ℎ1, 𝑐1), User 1 computes 𝑐′
5 + 𝑐6, and checks
if 𝑐′
7 = 𝑐𝑟𝑜𝑜𝑡. And similarly for the hash field.
Assuming there are 𝑛 users, P’s proof generation time is 𝑂(𝑛)
and the complexities of the individual proof size and verification
time are both 𝑂(log 𝑛). The commitment size on the PBB is constant
𝑂(1). However, there is a security flaw in the design and the prover
is able to claim smaller liabilities [43], i.e., a malicious prover can
set the value field 𝑐 = max(𝑐𝑙𝑐ℎ , 𝑐𝑟𝑐ℎ) while also being able to
generate inclusion proofs that pass verifications successfully. We
demonstrate the flaw by an example in appendix B.1. Moreover, this
scheme doesn’t provide any privacy of our concern here. The value
of the total liabilities is public, and the population 𝑛 and individual
liabilities can be inferred via inclusion proofs. For example, each
user observes the prover’s liabilities to a user next to him/her in
the Merkle tree via the proof. The right-most user can infer the
population by the position of his/her leaf node in the tree, and
everyone can speculate 𝑛 by the tree height.
7 = 𝑐′
Figure 1: Summation Merkle tree constructions in Maxwell-
Todd, Maxwell+ and Camacho.
Maxwell+. We refer by Maxwell+ the Maxwell-Todd’s protocol
adopting the fix in [43]. The fix is demonstrated in fig. 1, modi-
fying the merge function of the hash field to include both values
and hashes of child nodes, i.e., ℎ = H(𝑐𝑙𝑐ℎ ||𝑐𝑟𝑐ℎ ||ℎ𝑙𝑐ℎ ||ℎ𝑟𝑐ℎ). In-
tuitively, this binds the value of each node in the parent hash to
provide verifiability and prevent the prover from manipulating the
values on the Merkle path. Maxwell+ doesn’t introduce additional
complexity on proving/verification time and proof/commitment
size; it does not offer better privacy than Maxwell either.
Maxwell++. Maxwell++ [19] is a protocol extending Maxwell+
to provide privacy of population and individual liabilities. Maxwell++
splits individual liabilities into small units and shuffles them, then
maps each unit to a leaf node in a summation Merkle tree. Denoted
by 𝑀, the splitting factor is the average number of entries each
user’s value is split into. The data written on the PBB is still 𝑂(1),
but the proving time is 𝑂(𝑛 · 𝑀) and the proof size and verification
time are increased to 𝑂(log(𝑛 · 𝑀)), because the number of leaf
nodes is 𝑛 · 𝑀. This scheme provides privacy of the number of users
and individual liabilities to some extent highly depending on the
selection of 𝑀. The greater 𝑀 is, the better the privacy Maxwell++
provides and the higher the complexity it ends up with. Full privacy
is achieved only when each user’s value is split into the smallest
possible unit, but this would be inefficient. Therefore, we say that
Maxwell++ offers partial privacy. Besides, Maxwell++ still cannot
conceal the total liabilities.
Camacho. Camacho [13] proposed a PoL protocol guarantee-
ing privacy of individual liabilities and total liabilities by using
homomorphic commitments, Pedersen commitments in particular,
and zero-knowledge range proofs (ZKRPs). Cryptographic commit-
ments guarantee hiding (an adversary cannot learn the value from
the commitment) and binding (a prover cannot open the commit-
ment to a different value). Denote by Com(𝑙, 𝑏) a commitment to
𝑙 ∈ Z𝑞, where 𝑏 is the blinding factor randomly selected from Z𝑞. By
homomorphism, Com(𝑙1, 𝑏1) · Com(𝑙2, 𝑏2) = Com(𝑙1 + 𝑙2, 𝑏1 + 𝑏2).
Details about Pedersen commitments are in appendix C.3. As de-
picted in fig. 1, Camacho’s scheme is based on Maxwell-Todd’s
construction, but replaces the value field in each node with its Ped-
ersen commitment to hide the value. When required to reveal the
total liabilities to an eligible auditor, the prover can open the com-
mitment in the Merkle root with the blinding factor. The prover may
also prove the range of the total liabilities with the commitment.
To prove inclusion of the prover’s liabilities to a user, the prover
sends a Merkle proof as always. However, that’s not sufficient
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3467because there might be an overflow when multiplying two commit-
ments, i.e., Com(𝑙1 +𝑙2, 𝑏1 +𝑏2) is opened to a smaller value (𝑙1 +𝑙2)
mod 𝑞 when 𝑙1 + 𝑙2 ≥ 𝑞. Therefore, the prover additionally gener-
ates a ZKRP for each commitment on the Merkle path to prevent
overflows. ZKRPs guarantees that the committed value is within a
certain range without leaking the value, details in appendix C.4.
Camacho guarantees privacy of individual liabilities and total li-
abilities, but not the number of users. It doesn’t address the security
flaw in Maxwell-Todd’s summation Merkle tree either.
Provisions. Provisions [25] also uses homomorphic commit-
ments and zero-knowledge proofs to preserve the privacy of liabili-
ties but without using a Merkle tree. The prover simply publishes a
commitment to his/her liabilities to each user with a range proof
on the PBB. Each user verifies that his/her commitment and all
range proofs are valid. A commitment to the total liabilities can be
extracted by multiplying all commitments on the PBB. Provisions
attempts to obscure the number of users by padding with dummy
users. Denoting by 𝐵 the number of dummy users padded, the prov-
ing and verification time, and the commitment size on the PBB
are 𝑂(𝑛 + 𝐵). Each verifier only receives a blinding factor of their
commitment for verification so the proof size is constant. Since
the complexity grows with 𝐵 and 𝐵 determines the level of privacy
provided, we say that privacy of population is partially satisfied.
If there is a third party auditor verifying the range proofs for all
commitments, each user only needs to verify that a valid commit-
ment to his/her amount is on the PBB. In this case, the verification
complexity for each client is 𝑂(1) while 𝑂(𝑛 + 𝐵) for the auditor.
The most severe practicality issue here is the massive data com-
mitted on a PBB. For example, the commitment size is over 8GiB
when 𝑛 + 𝐵 = 1𝑀 [25]. Even if the prover writes only the hash of all
commitments on the PBB, each user will need to download all the
commitments to verify consistency with the hash, which makes the
bandwidth complexity intolerable. Provisions argued against the
use of a Merkle tree by claiming that the proof size for each user will
be several hundred KiB due to the expensive ZKRPs for multiple
commitments. However, this is out-dated. Using Bulletproofs [11],
which hadn’t been proposed at the time of Provisions’ publishing,
the range proofs can be aggregated so the size can be much smaller,
only a few KiB for each user as we show in section 6.2.
DAPOL. DAPOL [20] builds on Camacho adopting the fix in [43]
and using sparse Merkle trees (SMT) to hide the number of users. As-
suming the maximum potential population is 𝑁 , the sparse Merkle
tree is of height 𝐻 ≥ ⌈log 𝑁⌉. Each user is mapped to a random
bottom-layer node in an empty SMT. The prover then builds this
tree with minimal nodes such that each node either has two child
nodes or none. We call the nodes with no child and not mapped to
a user padding nodes, each with a commitment to 0. The number of
nodes in an SMT is 𝑂(𝑛· 𝐻), thus the proving time is 𝑂(𝑛· 𝐻). Each
inclusion proof consists of 𝐻 tree nodes and range proofs, thus the
proof size and verification time for each user are both 𝑂(𝐻).
DAPOL targets full privacy of the population but its padding
node construction is flawed, probably due a typo. Padding nodes
have a hash field ℎ = H(“𝑝𝑎𝑑”||𝑖𝑑𝑥), where 𝑖𝑑𝑥 is the unique iden-
tifier of a node, e.g., a natural number, or (ℎ𝑒𝑖𝑔ℎ𝑡, 𝑝𝑜𝑠𝑖𝑡𝑖𝑜𝑛) such as
(3, 001) for Node 2 in fig. 1. The input to H(·) is deterministic, so
is the hash of a padding node, making padding nodes distinguish-
able from nodes of other types. Thus given an inclusion proof with
lation can be bounded within range [𝐻 − 𝑚 + 1, 2𝐻 −𝑚
padding nodes at heights {𝑥1, · · · , 𝑥𝑚} (root at height 0), the popu-
𝑖=1 2𝐻−𝑥𝑖].
An example of this privacy leak is presented in appendix B.2. Be-
sides, DAPOL utilizes expensive verifiable random function (VRF)
to construct SMT without clarifying necessity. Additionally, each
user is mapped to a leaf node in a verifiable way in DAPOL, i.e., a
user’s ID determines which leaf node to map. Therefore, there is a
chance that more than one user is mapped to the same leaf. E.g., if
there are 1M users and the tree height is 32, it’s almost certain that
this will happen. To avoid collision, the tree height needs to be suffi-
ciently large, leading to higher complexities of proving/verification
time and proof size. Moreover, DAPOL lacks formal analysis of its
security and privacy.
3 DEFINITIONS
There has not been a satisfactory formal definition of PoL so far.
The authors of Provisions only presented the security definitions
of proof-of-solvency which consists of PoL as a subtask, and infor-
mally the properties their PoL protocol satisfies. As mentioned, in
some applications the prover may want to keep the number of users
secret. In the definitions in Provisions, however, the population is
assumed to be public by default. Because of this, their security defi-
nitions are scheme specific, not applicable for the examination of
other protocols such as DAPOL which aims to provide population
privacy. In contrast, DAPOL generalizes PoL for a wider range of
applications and provides a better privacy definition allowing the
population to be concealed. Nevertheless, it mixes the failure proba-
bility of distributed auditing in the security definition thus makes it
tedious. In this section, we address these issues and formalize PoL
as a generalized cryptographic primitive for various applications
with minimal security requirements.
3.1 Entities
A generalized PoL protocol PoL involves two entities:
• Users: Denoted by U = {𝑢1, · · · , 𝑢𝑛}, this is a set of 𝑛 users.
• Prover: Denoted by P, the prover is the subject liable to the
users for certain obligations. For example, in the proof-of-
solvency case, P is liable to users in U for their deposits.
Note that P has no incentive to increase the total liabilities.
3.2 Functions
A PoL consists of algorithms defined as below:
• Setup: (𝑃𝐷, 𝑆𝐷) $← Setup(1𝜅, 𝐷𝐵). Executed by P, the prob-
abilistic polynomial-time (p.p.t.) algorithm takes as input 𝜅,
the security parameter, and 𝐷𝐵 = {(𝑖𝑑𝑢, 𝑙𝑢)}𝑢∈U, the data