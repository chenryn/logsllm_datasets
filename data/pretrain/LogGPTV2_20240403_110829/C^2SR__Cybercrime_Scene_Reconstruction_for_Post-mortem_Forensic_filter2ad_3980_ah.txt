[63] Di Ma and Gene Tsudik. A new approach to secure logging. Trans.
Storage, 5(1), March 2009.
[64] Shiqing Ma, Juan Zhai, Yonghwi Kwon, Kyu Hyung Lee, Xi-
angyu Zhang, Gabriela Ciocarlie, Ashish Gehani, Vinod Yegneswaran,
Dongyan Xu, and Somesh Jha. Kernel-supported cost-effective audit
logging for causality tracking. In ATC’18.
[66]
[65] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu Zhang,
and Dongyan Xu. MPI: Multiple perspective attack investigation with
semantic aware execution partitioning. In USENIX Security’17.
James Mickens, Jeremy Elson, and Jon Howell. Mugshot: Determin-
istic capture and replay for javascript applications. In NSDI’10.
Jiang Ming, Dinghao Wu, Jun Wang, Gaoyao Xiao, and Peng Liu.
Straighttaint: Decoupled ofﬂine symbolic taint analysis. In ASE’16.
Jiang Ming, Dinghao Wu, Gaoyao Xiao, Jun Wang, and Peng Liu.
In the 24th USENIX
Taintpipe: Pipelined symbolic taint analysis.
Conference on Security Symposium, SEC’15.
[67]
[68]
[69] Kiran-Kumar Muniswamy-Reddy, David A. Holland, Uri Braun, and
Margo Seltzer. Provenance-aware storage systems. In ATC’06.
[70] Satish Narayanasamy, Cristiano Pereira, and Brad Calder. Recording
shared memory dependencies using strata. In ASPLOS’06.
[71] Christopher Neasbitt, Bo Li, Roberto Perdisci, Long Lu, Kapil Singh,
and Kang Li. Webcapsule: Towards a lightweight forensic engine for
web browsers. In ACM CCS’15.
17
[72] Christopher Neasbitt, Roberto Perdisci, Kang Li, and Terry Nelms.
Clickminer: Towards forensic reconstruction of user-browser interac-
tions from network traces. In ACM CCS’14.
[73] Terry Nelms, Roberto Perdisci, Manos Antonakakis, and Mustaque
Ahamad. Towards measuring and mitigating social engineering soft-
ware download attacks. In USENIX Security’16.
[74] Nicholas Nethercote and Julian Seward. Valgrind: A framework for
heavyweight dynamic binary instrumentation. In PLDI’07.
James Newsome and Dawn Xiaodong Song. Dynamic taint analysis
for automatic detection, analysis, and signaturegeneration of exploits
on commodity software. In NDSS’05.
[76] NGINX Web Server, 2019. https://www.nginx.com/.
[77] Robert O’Callahan, Chris Jones, Nathan Froyd, Kyle Huey, Albert
Noll, and Nimrod Partush. Engineering record and replay for deploy-
ability. In ATC’17.
[78] Octane 2.0 JavaScript Benchmark. https://chromium.github.io/octane/.
[79] Riccardo Paccagnella, Pubali Datta, Wajih Ul Hassan, Adam Bates,
Christopher W. Fletcher, Andrew Miller, and Dave Tian. Custos:
Practical tamper-evident auditing of operating systems using trusted
execution. In NDSS’20.
[80] Soyeon Park, Yuanyuan Zhou, Weiwei Xiong, Zuoning Yin, Rini
Kaushik, Kyu H. Lee, and Shan Lu. Pres: Probabilistic replay with
execution sketching on multiprocessors. In SOSP’09.
[81] Thomas Pasquier, Xueyuan Han, Thomas Moyer, Adam Bates, Olivier
Hermant, David Eyers, Jean Bacon, and Margo Seltzer. Runtime
analysis of whole-system provenance. In ACM CCS’18.
[82] Peter Webster. Practical Crime Scene Analysis and Reconstruction.
Australian Journal of Forensic Sciences, 42(3).
[83] ProFTPD Server. http://www.proftpd.org/.
[84] Andrew Quinn, David Devecsery, Peter M. Chen, and Jason Flinn.
Jetstream: Cluster-scale parallelization of information ﬂow queries. In
OSDI’16.
[85] QupZilla browser, 2019. https://github.com/QupZilla/qupzilla.
[86] Shiru Ren, Chunqi Li, Le Tan, and Zhen Xiao. Samsara: Efﬁcient
deterministic replay with hardware virtualization extensions. In Pro-
ceedings of the 6th Asia-Paciﬁc workshop on systems.
[87] Shiru Ren, Le Tan, Chunqi Li, Zhen Xiao, and Weijia Song. Samsara:
Efﬁcient deterministic replay in multiprocessor environments with
hardware virtualization extensions. In ATC’16.
[88] Sherif Saad, Farhan Mahmood, William Briguglio, and Haytham
Jsless: A tale of a ﬁleless javascript memory-resident
Elmiligi.
malware. ArXiv, abs/1911.11276, 2019.
[89] Arunesh Sinha, Limin Jia, Paul England, and Jacob R Lorch. Contin-
uous tamper-proof logging using tpm 2.0. In International Conference
on Trust and Trustworthy Computing.
[90] Speedometer 2.0. https://browserbench.org/Speedometer2.0/.
[91] Sudarshan M. Srinivasan, Srikanth Kandula, Christopher R. Andrews,
and Yuanyuan Zhou. Flashback: A lightweight extension for rollback
and deterministic replay for software debugging. In ATC’04.
[92] Manolis Stamatogiannakis, Paul Groth, and Herbert Bos. Decoupling
provenance capture and analysis from execution. In the 7th USENIX
Conference on Theory and Practice of Provenance, TaPP’15.
[93] Dinesh Subhraveti and Jason Nieh. Record and transplay: Partial
checkpointing for replay debugging across heterogeneous systems. In
SIGMETRICS ’11.
[94] Benjamin E. Ujcich, Samuel Jero, Anne Edmundson, Qi Wang,
Richard Skowyra, James Landry, Adam Bates, William H. Sanders,
Cristina Nita-Rotaru, and Hamed Okhravi. Cross-app poisoning in
software-deﬁned networking. In ACM CCS’18.
[95] Phani Vadrevu, Jienan Liu, Bo Li, Babak Rahbarinia, Kyu Hyung Lee,
and Roberto Perdisci. Enabling reconstruction of attacks on users via
efﬁcient browsing snapshots. In NDSS’17.
[96] Kaushik Veeraraghavan, Dongyoon Lee, Benjamin Wester, Jessica
Ouyang, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. Dou-
bleplay: Parallelizing sequential logging and replay. In ASPLOS’11.
cryptocurrency
https://www.hackread.com/
[97] Websites
if
even
websites-use-cpu-mine-cryptocurrency-even-close/.
CPU
them.
your
close
use
you
to
mine
TABLE VIII.
Type
Random
Access
Sequential
Access
Timing
Dependent
Not
Recorded
LIST OF LINUX SYSCALLS WITH THE RESOURCE TYPE
CATEGORIES.
Syscall List
ioctl, pread64, pwrite64,
times, utime,
time,
ioctl, pread64, pwrite64,
read, write,
readv, writev, sys preadv,
sys pwritev, open, close, stat, fstat, lstat, lseek, access, setitimer, send-
ﬁle, getsockname, setsockopt, getsockopt, uname, fcntl, ﬂock, fsync,
fdatasync, truncate, ftruncate, getdents, getcwd, chdir, fchdir, rename,
mkdir, rmdir, creat, link, unlink, symlink, readlink, chmod, fchmod,
chown, fchown, lchown, umask, getrlimit, getrusage, sysinfo, getuid,
getgid, setuid, setgid, geteuid, getegid, setpgid, getppid, getpgrp,
setsid, setreuid, setregid, getgroups, setgroups, setresuid, getresuid,
setresgid, getresgid, getpgid, setfsuid, setfsgid, getsid, capget, capset,
mknod, ustat, statfs, fstatfs, sysfs, pivot root, sysctl, setrlimit, chroot,
sync, acct, mount, umount2, sethostname, setdomainname, quotactl,
setxattr, lsetxattr, fsetxattr, getxattr, lgetxattr, fgetxattr, listxattr, llistx-
attr, ﬂistxattr, removexattr,
lremovexattr, fremovexattr, getdents64,
utimes, openat, mkdirat, mknodat, fchownat, futimesat, newfstatat,
unlinkat, renameat, linkat, symlinkat, readlinkat, fchmodat, facces-
sat, splice, sync ﬁle range, vmsplice, utimensat,
timerfd settime,
timerfd gettime, prlimit64, name to handle at, open by handle at
read, write,
readv, writev, sys preadv,
sys pwritev, pipe, select, connect, accept, sendto, recvfrom, sendmsg,
recvmsg, listen, getpeername, accept4, pipe2, recvmmsg, sendmmsg
settimeofday, gettimeofday,
clock settime,
clock gettime, read (on random devices), pread64 (on random de-
vices), readv (on random devices), sys preadv (on random devices)
poll, mmap, mprotect, munmap, brk, rt sigaction, rt sigprocmask,
rt sigreturn,
sched yield, mremap, msync, mincore, madvise,
shmget, shmat, shmctl, dup, dup2, pause, shutdown, clone, fork,
vfork, execve, exit, wait4, kill, semget, semop, semctl, shmdt,
rt sigpending,
msgget, msgsnd, msgrcv, msgctl, ptrace,
rt sigtimedwait, rt sigqueueinfo, rt sigsuspend, sigaltstack, uselib,
personality, getpriority, setpriority, sched setparam, sched getparam,
sched setscheduler,
sched get priority max,
sched rr get interval, mlock, munlock,
sched get priority min,
lockall, munlockall, vhangup, adjtimex, swapon, swapoff, reboot,
init module, delete module, readahead, tkill, futex, sched setafﬁnity,
sched getafﬁnity, set thread area, get thread area, lookup dcookie,
restart syscall,
epoll create,
timer gettime,
timer settime,
semtimedop, fadvise64,
timer getoverrun, exit group, epoll wait, epoll ctl,
tgkill, mbind,
set mempolicy, get mempolicy, mq open, mq unlink, mq timedsend,
mq timedreceive, mq notify, mq getsetattr, kexec load, waitid,
inotify init,
add key,
inotify add watch,
pselect6,
get robust list, move pages,
ppoll,
timerfd create, eventfd, fallocate, signalfd4,
epoll pwait, signalfd,
eventfd2,
rt tgsigqueueinfo,
fanotify init,
fanotify mark, clock adjtime, syncfs, setns, getcpu,
kcmp, ﬁnit module, getpid, socketpair, gettid, process vm readv,
process vm writev, modify ldt,
ioperm, socket, bind, prctl,
arch prctl, io setup, io destroy, io getevents, io submit, io cancel,
tee, perf event open, nanosleep, getitimer, alarm,
timer delete,
clock getres, clock nanosleep
inotify rm watch, migrate pages,
sched getscheduler,
request key, keyctl,
ioprio set,
ioprio get,
remap ﬁle pages,
epoll create1,
dup3,
inotify init1,
unshare,
set robust list,
set tid address,
timer create,
syslog,
iopl,
Library Calls. Recall that C2SR also records user inputs such
as keystrokes. To do so, we interpose X-Window libraries and
implement record-and-replay mechanism via library hooking.
C2SR treats such library calls as same as sequential access
resources except for that C2SR does not raise exceptions if
there is any new inputs in a reconstructed execution.
[98]
Jun Xu, Dongliang Mu, Xinyu Xing, Peng Liu, Ping Chen, and Bing
Mao. Postmortem program analysis with hardware-enhanced post-
crash artifacts. In USENIX Security’17.
[99] Zhang Xu, Zhenyu Wu, Zhichun Li, Kangkook Jee, Junghwan Rhee,
Xusheng Xiao, Fengyuan Xu, Haining Wang, and Guofei Jiang. High
ﬁdelity data reduction for big data security dependency analyses. In
ACM CCS’16.
[100] Attila A Yavuz, Peng Ning, and Michael K Reiter. Efﬁcient, compro-
mise resilient and append-only cryptographic constructions for digital
forensics. computer, 15(29):37–43, 2011.
[101] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and
Engin Kirda. Panorama: Capturing system-wide information ﬂow for
malware detection and analysis. In ACM CCS’07.
[102] Nickolai Zeldovich, Silas Boyd-Wickizer, Eddie Kohler, and David
Mazi`eres. Making information ﬂow explicit in histar. In OSDI’06.
[103] Wenchao Zhou, Qiong Fei, Arjun Narayan, Andreas Haeberlen,
In
Boon Thau Loo, and Micah Sherr. Secure network provenance.
SOSP’11.
[104] Wenchao Zhou, Micah Sherr, Tao Tao, Xiaozhou Li, Boon Thau
Loo, and Yun Mao. Efﬁcient querying and maintenance of network
provenance at internet-scale. In ACM SIGMOD’10.
zlib Home Site, 2017. https://zlib.net/.
[105]
APPENDIX
A. The Complete List of System Call Categorization
type syscalls are accessing date,
As shown in Table VIII , we categorize Linux syscalls that
access external resources into three resource types; 1) Random-
Access, 2) Sequential-Access, and 3) Timing Dependent.
Random-Access Resources (125 syscalls). The random-
access type syscalls mostly access ﬁle systems, networks,
and internal system states. They are considered as external
resources because they may be different between machines
and those resources may not exist during the reconstruction.
Sequential-Access Resources (23 syscalls). The sequential-
access type syscalls access networks and pipes that are consid-
ered as an external resource and cannot be accessed randomly.
Timing-Dependent Resources (11 syscalls). The timing de-
pendent
time, or clock.
Reading from random devices (e.g., /dev/random) is also
categorized into this type.
Syscalls that are not recorded (156 syscalls). There exist
syscalls that we do not record because their executions do
not contribute cybercrime scene reconstruction. C2SR aims
to reconstruct a deterministic (exploit delivery) execution. The
execution of syscalls in this category do not affect deterministic
(exploit delivery) executions. For instance, the order of signals
(e.g., accomplished by rt sig∗ syscalls) does not affect the
successful exploit delivery (if it is deterministic). Our focus
is not a faithful replay of non-deterministic events that are
irrelevant to the successful execution (i.e., exploitation pro-
cess). If reconstruction of non-deterministic exploit execution
(e.g., concurrency attacks) is out of scope. To do so, one
must leverage faithful record-and-replay techniques. Note that
most exploits in practice are fairly deterministic (they mostly
succeed), as otherwise, the attacks would mostly fail. We do
not encounter such cases in our experiments, however, we
assume that the current version of C2SR may not be able
to handle corner cases if a non-deterministic event triggered
by not-recorded syscalls.
18