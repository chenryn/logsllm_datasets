that any entropy problems that still occur are the fault
of developers taking foolish shortcuts. Our ﬁndings sug-
gest otherwise: entropy-related vulnerabilities can result
from complex interaction between hardware, operating
systems, applications, and cryptographic primitives. We
have yet to develop the engineering practices and princi-
ples necessary to make predictably secure use of unpre-
dictable randomness across the diverse variety of systems
where it is required.
Primitives should fail gracefully under weak entropy.
Cryptographic primitives are usually designed to be se-
cure under ideal conditions, but practice will subject them
to conditions that are less than idea. We ﬁnd that RSA
and DSA, with surprising frequency, are used in practice
under weak entropy scenarios where, due to the design
of these cryptosystems, the private keys are totally com-
promised. More attention is needed to ensure that future
primitives degrade gracefully under likely failure modes
such as this.
8 Related Work
HTTPS surveys
The HTTPS public-key infrastruc-
ture has been a focus of attention in recent years, and
researchers have performed several large-scale scans to
measure TLS usage and CA behavior. In contrast, our
study addresses problems that are mostly separate from
the CA ecosystem.
In 2010, the Electronic Frontier Foundation (EFF) and
iSEC Partners debuted the SSL Observatory project [18]
and released the largest public repository of TLS certiﬁ-
cates. The authors used their data to analyze the CA
infrastructure and noted several vulnerabilities. We owe
the inspiration for our work to their fascinating dataset, in
which we ﬁrst identiﬁed several of the entropy problems
we describe; however, we ultimately performed our own
scans to have more up-to-date and complete data.
In 2011, Holz et al. [26] scanned the Alexa top 1 mil-
lion domains and observed TLS sessions passing through
the Munich Scientiﬁc Research Network (MWN). Their
study recorded 960,000 certiﬁcates and was the largest
academic study of TLS data at the time. They report many
statistics gathered from their survey, mainly focusing on
the state of the CA infrastructure. We note that they ex-
amined repeated keys and dismissed them as “curious,
but not very frequent.” Yilek et al. [37] performed daily
scans of 50,000 TLS servers over several months to track
replacement time for certiﬁcates affected by the Debian
weak key bug. Our count of Debian certiﬁcates provides
another data point on this subject.
Problems with random number generation
Several
signiﬁcant vulnerabilities relating to weak random num-
ber generation have been found in widely used software.
In 1996, the Netscape browser’s SSL implementation
was found to use fewer than a million possible seeds for
its PRNG [19]. In May 2008, Bello discovered that the
version of OpenSSL included in the Debian Linux distri-
bution contained a bug that caused keys to be generated
with only 15 bits of entropy [5]. The problem caused only
294,912 distinct keys to be generated per key size during
a two year period before the error was found [37].
Gutmann [22] draws lessons about secure software
design from the example of developer responses to an
OpenSSL update intended to ensure that the entropy
pool was properly seeded before use. He observes that
many developers responded by working around the safety
checks in ways that supplied no randomness whatso-
ever. The root cause, according to Gutmann, was that
the OpenSSL design left the difﬁcult job of supplying suf-
ﬁcient entropy to library users. He concludes that PRNGs
should handle entropy-gathering themselves.
Gutterman, Pinkas, and Reinmann analyzed the Linux
random number generator in 2006 [23]. In contrast to
our analysis, which focuses on empirical measurement of
an instrumented Linux kernel, theirs was based mainly
on a review of the LRNG design. They point out several
weaknesses from a cryptographic perspective, some of
which have since been remedied. In a brief experimental
section, they observe that the only entropy source used by
the OpenWRT Linux distribution was network interrupts..
Weak entropy and cryptography
In 2004, Bauer and
Laurie [2] computed the pairwise GCDs of 18,000 RSA
keys from the PGP web of trust and discovered a pair with
a common factor of 9, demonstrating that the keys had
been generated with broken (or omitted) primality testing.
The DSA signature weakness we investigate is well
known and appears to be folklore. In 2010, the hacking
group fail0verﬂow computed the ECDSA private key used
for code signing on the Sony PS3 after observing that the
signatures used repeated ephemeral keys [12]. Several
more sophisticated attacks against DSA exist: Bellare,
Goldwasser, and Miccancio [4] show that the private key
is revealed if the ephemeral key is generated using a lin-
ear congruential generator, and Howgrave-Graham and
Smart [27] give a method to compute the private key from
a fraction of the bits of the ephemeral key.
Ristenpart and Yilek [34] developed “virtual ma-
chine reset” attacks in 2010 that induce repeated DSA
ephemeral keys after a VM reset, and they implement
“hedged” cryptography to protect against this type of ran-
domness failure. Hedged public key encryption was intro-
duced by Bellare et al. in 2009 and is designed to fail as
gracefully as possible in the face of bad randomness [3].
As we were preparing this paper for submission, an in-
dependent group of researchers uploaded a preprint [31]
reporting that they had computed the pairwise GCD of
RSA moduli from the EFF SSL Observatory dataset and
a database of PGP keys. Their work is concurrent and in-
dependent to our own; we were unaware of these authors’
efforts before their work was made public. They declined
to report the GCD computation method they used. We
responded by publishing a blog post [25] describing our
GCD computation approach and summarizing some of
the key ﬁndings we detail in this paper.
The authors of the concurrent work report similar re-
sults to our own on the fraction of keys that were able to
be factored, and thus the two results provide validation for
each other. In their paper, however, the authors draw very
different conclusions than we do. They do not analyze the
source of these entropy failures, and they conclude that
RSA is “signiﬁcantly riskier” than DSA. In contrast, we
performed original scans that targeted SSH as well as TLS,
and we looked for DSA repeated signature weaknesses as
well as cofactorable RSA keys. We ﬁnd that SSH DSA
private keys are compromised at a higher rate than RSA
keys, and we conclude that the fundamental problem is an
implementational issue rather than a cryptographic one.
Furthermore, the authors of the concurrent work state
that they “cannot explain the relative frequencies and
appearance” of the weak keys they observed and report
no attempt to determine their source. In this work, we
performed extensive investigation to trace the vulnerable
keys back to speciﬁc devices and software implementa-
tions, and we have notiﬁed the responsible developers
and manufacturers. We ﬁnd that the weak keys can be ex-
plained by speciﬁc design and implementation failures at
various levels of the software stack, and we make detailed
recommendations to developers and users that we hope
will lessen the occurrence of these problems in the future.
9 Conclusion
In this work, we investigated the security of random num-
ber generation on a broad scale by performing and an-
alyzing the most comprehensive Internet-wide scans of
TLS certiﬁcates and SSH host keys to date. Using the
global view provided by our data, we discovered that inse-
cure RNGs are in widespread use, leading to a signiﬁcant
number of vulnerable RSA and DSA keys.
Our experiences suggest that the type of scanning and
analysis we performed can be a useful tool for ﬁnding sub-
tle ﬂaws in cryptographic implementations, and we hope
it will be applied more broadly in future work. Previous
examples of random number generation ﬂaws were found
by painstakingly reverse engineering individual devices
or implementations, or through luck when a collision was
observed by a single user. Our scan data allowed us to
essentially mine for vulnerabilities and detect problems
in dozens of different devices and implementations in a
single shot. Many of the collisions we found were too rare
to ever have been observed by a single user but quickly
became apparent with a near-global view of the universe
of public keys. The results are a reminder to all that
vulnerabilities can sometimes be hiding in plain sight.
Acknowledgments
The authors thank Dan Bernstein and Tanja Lange for dis-
cussion of batch factorization and OpenSSL, and Hovav
Shacham for advice on many aspects of this work. We
also thank Jake Appelbaum, Michael Bailey, Kevin Bor-
ders, Keith Brautigam, Ransom Briggs, Jesse Burns, Alek-
sander Durumeric, Prabal Dutta, Peter Eckersley, Andy
Isaacson, James Kasten, Ben Laurie, Stephen Schultze,
Ron Rivest, and David Robinson.
This material is based upon work supported by the
National Science Foundation under Award No. DMS-
1103803, the MURI program under AFOSR Grant No.
FA9550-08-1-0352, and a National Science Foundation
Graduate Research Fellowship.
References
[1] random(4) Linux manual page. http://www.kernel.org/doc/man-
pages/online/pages/man4/random.4.html.
[2] BAUER, M., AND LAURIE, B.
Factoring silly keys from
In The Shoestring Foundation Weblog (July
the keyservers.
2004). http://shoestringfoundation.org/cgi-bin/blosxom.cgi/2004/
07/01#non-pgp-key.
[3] BELLARE, M., BRAKERSKI, Z., NAOR, M., RISTENPART, T.,
SEGEV, G., SHACHAM, H., AND YILEK, S. Hedged public-key
encryption: How to protect against bad randomness.
In Proc.
Asiacrypt 2009 (Dec. 2009), M. Matsui, Ed., pp. 232–249.
[4] BELLARE, M., GOLDWASSER, S., AND MICCIANCIO, D.
“Pseudo-random” generators within cryptographic applications:
the DSS case. In Advances in Cryptology—CRYPTO ’97 (Aug.
1997), B. S. Kaliski Jr., Ed., pp. 277–291.
[5] BELLO, L. DSA-1571-1 OpenSSL—Predictable random number
generator, 2008. Debian Security Advisory. http://www.debian.
org/security/2008/dsa-1571.
[6] BERNSTEIN, D. J. How to ﬁnd the smooth parts of integers.
http://cr.yp.to/papers.html#smoothparts.
[7] BERNSTEIN, D. J. Fast multiplication and its applications. Algo-
rithmic Number Theory (May 2008), 325–384.
[8] BLUM, M., AND MICALI, S. How to generate cryptographically
strong sequences of pseudo-random bits. SIAM J. Comput. 13, 4
(1984), 850–864.
[9] BONEH, D. Twenty years of attacks on the RSA cryptosystem.
Notices of the AMS 46, 2 (1999), 203–213.
[10] BRIER, E., CLAVIER, C., CORON, J., AND NACCACHE, D.
Cryptanalysis of RSA signatures with ﬁxed-pattern padding. In
Advances in Cryptology—Crypto 2001, pp. 433–439.
[11] BROWN, D. R. L. Standards for efﬁcient cryptography 1: Elliptic
curve cryptography, 2009. http://www.secg.org/download/aid-
780/sec1-v2.pdf.
[12] BUSHING, MARCAN, SEGHER, AND SVEN. Console hacking
2010: PS3 epic fail. Talk at 27th Chaos Communication Congress
(2010). http://events.ccc.de/congress/2010/Fahrplan/attachments/
1780_27c3_console_hacking_2010.pdf.
[13] CHOR, B., AND GOLDREICH, O. Unbiased bits from sources of
weak randomness and probabilistic communication complexity. In
Proc. 26th IEEE Symposium on Foundations of Computer Science
(1985), pp. 429–442.
[14] COX, M., ENGELSCHALL, R., HENSON, S., LAURIE, B., ET AL.
The OpenSSL project. http://www.openssl.org.
[15] DAVIS, D., IHAKA, R., AND FENSTERMACHER, P. Crypto-
graphic randomness from air turbulence in disk drives. In Ad-
vances in Cryptology—CRYPTO ’94 (1994), pp. 114–120.
[16] DIERKS, T., AND RESCORLA, E. The Transport Layer Security
(TLS) Protocol, Version 1.2. RFC 5246.
[17] DORRENDORF, L., GUTTERMAN, Z., AND PINKAS, B. Crypt-
analysis of the Windows random number generator. In Proc. 14th
ACM Conference on Computer and Communications Security
(2007), CCS ’07, pp. 476–485.
[18] ECKERSLEY, P., AND BURNS, J. An observatory for the
SSLiverse. Talk at Defcon 18 (2010). https://www.eff.org/ﬁles/
DefconSSLiverse.pdf.
[19] GOLDBERG, I., AND WAGNER, D. Randomness and the Netscape
browser. Dr. Dobb’s Journal 21, 1 (1996), 66–70.
[20] GRANLUND, T., ET AL. The GNU multiple precision arithmetic
library. http://gmplib.org/.
[21] GUTMANN, P. Software generation of random numbers for cryp-
tographic purposes. In Proc. 7th USENIX Security Symposium
(1998), pp. 243–257.
[22] GUTMANN, P. Lessons learned in implementing and deploying
In Proc. 11th USENIX Security Symposium
crypto software.
(2002), pp. 315–325.
[23] GUTTERMAN, Z., PINKAS, B., AND REINMAN, T. Analysis
In Proc. 2006 IEEE
of the Linux random number generator.
Symposium on Security and Privacy (May 2006), pp. 371–385.
[24] HEFFNER, C., ET AL. LittleBlackBox: Database of private SS-
L/SSH keys for embedded devices. http://code.google.com/p/
littleblackbox/.
[25] HENINGER, N., ET AL. There’s no need to panic over factorable
keys–just mind your Ps and Qs. Freedom to Tinker weblog (2012).
https://freedom-to-tinker.com/blog/nadiah/new-research-theres-
no-need-panic-over-factorable-keys-just-mind-your-ps-and-qs.
[26] HOLZ, R., BRAUN, L., KAMMENHUBER, N., AND CARLE, G.
The SSL landscape—A thorough analysis of the X. 509 PKI using
active and passive measurements. In Proc. 2011 ACM SIGCOMM
Internet Measurement Conference (2011), pp. 427–444.
[27] HOWGRAVE-GRAHAM, N., AND SMART, N. Lattice attacks on
digital signature schemes. Designs, Codes and Cryptography 23,
3 (2001), 283–290.
[28] KLEINJUNG, T., AOKI, K., FRANKE, J., LENSTRA, A., THOMÉ,
E., BOS, J., GAUDRY, P., KRUPPA, A., MONTGOMERY, P.,
OSVIK, D., TE RIELE, H., TIMOFEEV, A., AND ZIMMERMANN,
P. Factorization of a 768-bit RSA modulus.
In Advances in
Cryptology—CRYPTO 2010 (2010), T. Rabin, Ed., pp. 333–350.
random k value,
http://rdist.root.org/2010/11/19/dsa-requirements-for-
DSA requirements for
[29] LAWSON, N.
2010.
random-k-value/.
[30] LENSTRA, A., LENSTRA, H., MANASSE, M., AND POLLARD, J.
The number ﬁeld sieve. In The development of the number ﬁeld
sieve, A. Lenstra and H. Lenstra, Eds., vol. 1554 of Lecture Notes
in Mathematics. 1993, pp. 11–42.
[31] LENSTRA, A. K., HUGHES, J. P., AUGIER, M., BOS, J. W.,
KLEINJUNG, T., AND WACHTER, C. Ron was wrong, Whit is
right. Cryptology ePrint Archive, Report 2012/064, 2012. http://
eprint.iacr.org/2012/064.pdf.
[32] LOCKE, G., AND GALLAGHER, P. FIPS PUB 186-3: Digital Sig-
nature Standard (DSS). Federal Information Processing Standards
Publication (2009).
[33] LYON, G. F. Nmap Network Scanning: The Ofﬁcial Nmap Project
Guide to Network Discovery and Security Scanning. Insecure,
USA, 2009.
[34] RISTENPART, T., AND YILEK, S. When good randomness goes
bad: Virtual machine reset vulnerabilities and hedging deployed
cryptography. In Proc. ISOC Network and Distributed Security
Symposium (2010).
[35] RIVEST, R. L., SHAMIR, A., AND ADLEMAN, L. A method for
obtaining digital signatures and public-key cryptosystems. Com-
mun. ACM 21 (Feb. 1978), 120–126.
[36] WOOLLEY, R., MURRAY, M., DOUNIN, M., AND ER-
FreeBSD security advisory FreeBSD-SA-
http://lists.freebsd.org/pipermail/
MILOV, R.
08:11.arc4random, 2008.
freebsd-security-notiﬁcations/2008-November/000117.html.
[37] YILEK, S., RESCORLA, E., SHACHAM, H., ENRIGHT, B., AND
SAVAGE, S. When private keys are public: Results from the 2008
Debian OpenSSL vulnerability. In Proc. 2009 ACM SIGCOMM
Internet Measurement Conference, pp. 15–27.
[38] YLONEN, T. SSH—secure login connections over the internet. In
Proc. 6th USENIX Security Symposium (1996), pp. 37–42.
[39] YLÖNEN, T., AND LONVICK, C. The secure shell (SSH) protocol
architecture. http://merlot.tools.ietf.org/html/rfc4251.