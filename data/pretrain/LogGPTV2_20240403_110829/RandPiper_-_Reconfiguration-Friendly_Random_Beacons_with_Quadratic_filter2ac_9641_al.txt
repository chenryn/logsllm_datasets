byzantine leader 𝐿𝑒 in some epoch 𝑒, then all honest nodes commit
𝑆𝐵, from the SMR property in Theorem B.5. Therefore during recon-
struction, a Byzantine node 𝑝 𝑗 ∈ P cannot provide incorrect shares
as it cannot generate a valid witness VSS.𝜋𝐿𝑒,𝑗 (except with negl(𝜅)
probability). If a Byzantine leader does not propose any block, then
all honest nodes agree on ⊥, thereby ensuring the commitment
property.
□
Concrete Instantiations. Consider instantiating VSS using the
Pedersen commitment based VSS [32] using the polynomial com-
mitment scheme. This scheme is identical to the Pedersen VSS [38]
which is an information-theoretic VSS scheme except that the poly-
nomial commitment based on 𝑞-SDH is used. The polynomial com-
mitment scheme however is identical to the Pedersen commitment
and is unconditionally hiding. Since our SMR is adaptively secure,
and our VSS scheme is unconditionally hiding, BRandPiper is also
adaptively secure. For the binding part, as shown in [32], one can
show a reduction to an adversary violating the binding property to
an adversary violating the 𝑞-SDH assumption.
Lemma B.23 (Bias-resistance). For any epoch 𝑒 ≥ 1, the probability
that a 𝑡-bounded adversary A can fix any 𝑐 bits of the BRandPiper
beacon output O𝑒 is negl(𝑐) + negl(𝜅).
Proof Sketch. The output in any epoch 𝑒 is O𝑒 ← 𝐻(𝑅𝑒),
where 𝑅𝑒 is the homomorphic sum of secrets from at least 𝑡 + 1
honest nodes. From the secrecy guarantee in Theorem B.22, we
know that no adversary A can predict the value of these honest
nodes until reconstruction with probability better than negl(𝜅). At
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3522the same time, no adversary A can change the committed value
for any 𝑝𝑖 during reconstruction due to the commitment guarantee
from Theorem B.22 with probability better than negl(𝜅). Therefore,
a 𝑡-bounded adversary cannot do better than guessing whose prob-
ability is negl(𝑐) + negl(𝜅) to fix 𝑐 bits in the output O𝑒 for any
epoch 𝑒 ≥ 1.
□
Lemma B.24 (Rushing Adversary Advantage). For any epoch 𝑒, a
rushing adversary can reconstruct output O𝑒 at most 2Δ time before
honest nodes.
The proof remains identical to Lemma B.11.
Lemma B.25 (BRandPiper 1-absolute unpredictability). The BRand-
Piper random beacon protocol is an 1-absolute unpredictable random
beacon.
Proof Sketch. Since our SMR protocol is adaptively secure and
our protocol is as secure as VSS, we can instantiate VSS with Ped-
ersen VSS which is information theoretically secure but at the cost
of communication complexity to prove adaptive security of BRand-
Piper. By instantiating VSS with eVSS [32], we do not know how to
show adaptive security using existing proof techniques. However,
no adaptive attacks against eVSS are known either.
Let 𝜏 be some time at which all honest nodes are in an epoch
𝑒 ≥ 1. We show that an adversary A cannot predict O𝑒+1. Due to
the secrecy property in Theorem B.22 and the fact that the beacon
output O𝑒+1 is derived from the reconstruction of 𝑅𝑒+1, which is
a homomorphic sum of inputs from at least 𝑛 − 𝑡 > 𝑡 nodes, any
adversary A cannot predict O𝑒+1. The values from the honest nodes
are guaranteed to be truly random (by definition). Therefore, the
output O𝑒+1 is unpredictable for an adversary A.
An adversary A can get a 1 epoch advantage since there can
exists times 𝜏 where some honest nodes are in epoch 𝑒 and others
are in epoch 𝑒 − 1. At this point, a rushing adversary knows the
output O𝑒 before the honest nodes.
□
Theorem B.26 (BRandPiper Secure Random Beacon). BRand-
Piper protocol is a 1-secure random beacon.
The proofs follow trivially from Lemma B.23, Lemma B.25, and
Lemma B.20.
C CLOCK SYNCHRONIZATION FOR NEW
NODES
In this section, we present a clock synchronization protocol to syn-
chronize some additional nodes when majority of honest nodes
are synchronized. Such a synchronization is useful during recon-
figuration when a new node joins the system. Prior known clock
synchronization protocol [1] can be used to synchronize all nodes
with a communication cost of 𝑂(𝜅𝑛3) without threshold signatures.
This holds true even when synchronizing a single node in the sys-
tem where a majority of nodes are already synchronized.
Our clock synchronization protocol to add new nodes (refer Fig-
ure 11) makes use of VSS secret sharing scheme presented in Sec-
tion 4.2.2. Our approach requires a total communication complexity
of 𝑂(𝜅𝑛3); however, this can be split over 𝑂(𝑛) iterations with
𝑂(𝜅𝑛2) communication. This will be useful in our beacon protocol
to maintain quadratic communication complexity in each round.
Our protocol uses the fact that 𝑂(𝑡) secret shares can be homo-
morphically combined to a single secret share of size 𝑂(1) and
𝑡 + 1 homomorphic secret shares can be be opened to get a 𝑂(𝜅)
sized secret. The opened secret can be broadcast among all nodes
to synchronize the clocks of all honest nodes including the new
joining node within Δ time from each other.
The first honest node to reset epoch-timer for some epoch 𝑒 will
broadcast sync message containing 𝑅𝑒 which makes all other honest
nodes reset their epoch-timer𝑒 within Δ time. Observe that since
the size of homomorphic 𝑅𝑒 is 𝑂(𝜅) bits, an all-to-all broadcast has
a cost of 𝑂(𝜅𝑛2) bits.
D RECONFIGURATION
In this section, we present reconfiguration mechanisms for our
beacon protocols to restore the resilience of the protocol after re-
moving some Byzantine nodes. We make following modification
to the protocols. Each node maintains a variable 𝑛𝑡 that records
the number of additional nodes that can be added to the system.
Variable 𝑛𝑡 is incremented each time a Byzantine node is added to
set P𝑟 and is decreased by one when a new node joins the system.
The value of 𝑛𝑡 can be at most 𝑡.
The generic reconfiguration protocol is presented in Figure 12.
The reconfiguration protocol applies to both beacon protocols. Later,
we make appropriate modifications for each beacon protocols.
If 𝑛𝑡 > 0 at some epoch 𝑒∗ and there are
Lemma D.1 (Liveness).
new nodes intending to join the system in epochs ≥ 𝑒∗, then eventually
a new node will be added to the system.
Proof. Suppose 𝑛𝑡 > 0 and a new node 𝑝𝑖 intends to join the
system. Suppose for the sake of contradiction, no new node includ-
ing 𝑝𝑖 is added to the system. However, since node 𝑝𝑖 intends to join
the system, it must have sent inquire requests to all nodes in the
system and at least 𝑡 + 1 honest nodes will respond to the inquire
request since 𝑛𝑡 > 0 at the end of some epoch 𝑒′ ≥ 𝑒∗.
Let node 𝑝𝑖 send join request along with an inquire certificate
and nodes receive the request in epoch 𝑒 ≥ 𝑒′. The first honest
leader 𝐿𝑒′′ of epoch 𝑒′′ ≥ 𝑒 will include the join request in its
block proposal if no new node has been added to the system since
epoch 𝑒′ and there does not exist any block proposal with a join
request in the last 𝑡 + 1 epochs in its highest ranked chain and by
Fact B.6, the block proposal with join request will be committed. A
contradiction.
If some node has already been added to the system since epoch 𝑒′,
this trivially satisfies the statement. Thus, we obtain a contradiction.
If there exists a block proposal 𝐵ℎ with a join request for some node
𝑝𝑘 in last 𝑡 epochs in the highest ranked chain for 𝐿𝑒′′, 𝐵ℎ will be
committed since honest node 𝐿𝑒′′ extends it. The lemma holds and
we obtain a contradiction.
□
D.1 Reconfiguration for GRandPiper
Node 𝑝𝑘 generates a PVSS (PVSS.(cid:174)𝑆, PVSS.(cid:174)𝐸, PVSS.𝜋) ← PVSS.ShGen(𝑅)
of a random value chosen from the input space of PVSS for nodes
P ∪ {𝑝𝑘} \ P𝑟 . During the join phase in the reconfiguration pro-
tocol (refer Figure 12), it sends a join request to all nodes P \ P𝑟
with entity M set to the above PVSS. In addition, all nodes update
22
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3523Let clock synchronization protocol start in epoch 𝑒. Node 𝑝𝑖 ∈ P performs the following:
(1) Share secrets. Leaders {𝐿𝑒, . . . , 𝐿𝑒+𝑡 } use block validation (refer Figure 8) and the BFT protocol to commit secrets {𝑠𝑒, . . . , 𝑠𝑒+𝑡 } respectively. e.g.,
Leader 𝐿𝑒 uses the block validation protocol while in epoch 𝑒 − 1 to share a single secret 𝑠𝑒 chosen uniformly at random and collect an ack certificate
AC(𝑆𝐵) on the commitment 𝑆𝐵 for secret 𝑠𝑒. In epoch 𝑒, Leader 𝐿𝑒 proposes block 𝐵𝑘 := (𝐻 (𝑆𝐵), AC(𝑆𝐵)).
(2) Reconstruct. When epoch-timer𝑒+2𝑡 expires, perform the following:
• Build homomorphic sum share 𝑆𝑉𝑖, witness VSS.𝜋𝑖, and commitment VSS.C𝑒 using secret shares for {𝑠𝑒, . . . , 𝑠𝑒+𝑡 }. Send 𝑆𝑉𝑖 and VSS.𝜋𝑖 to all the
• Upon receiving share 𝑆𝑉𝑗 and witness VSS.𝜋 𝑗 for VSS.C𝑒, ensure that VSS.ShVrfy(𝑆𝑉𝑗 , VSS.𝜋 𝑗 , VSS.C𝑒) = 1.
• Upon receiving 𝑡 + 1 valid homomorphic sum shares in 𝑆𝑉 , obtain 𝑅𝑒 ← VSS.Recon(𝑆𝑉).
(3) Synchronize. The first time node 𝑝𝑖 receives a valid homomorphic secret 𝑅𝑒 either through reconstruction or on receiving sync message from other
nodes, it (i) resets its epoch-timer𝑒+2𝑡+1 to the beginning of epoch 𝑒 + 2𝑡 + 1, and (ii) broadcasts a sync message containing 𝑅𝑒 to all other nodes.
nodes.
Figure 11: Clock synchronization protocol
A new node 𝑝𝑘 that intends to join the system uses following procedure to join the system.
(1) Inquire. Node 𝑝𝑘 inquires all nodes in the system to send the set of active nodes, i.e., P \ P𝑟 . Upon receiving the inquire request, an honest node 𝑝𝑖
responds to the request only if 𝑛𝑡 > 0. Node 𝑝𝑖 sends P \ P𝑟 at the end of some epoch 𝑒′ in which the inquire request was received. Node 𝑝𝑘 waits for at
least 𝑡 + 1 consistent responses from the same epoch 𝑒′ and forms an inquire certificate. An inquire certificate is valid if it contains 𝑡 + 1 inquire responses
that belong to the same epoch 𝑒′ and contains the same set of active nodes.
(2) Join. Node 𝑝𝑘 sends a join request to all nodes P \ P𝑟 along with the inquire certificate and an additional entity M specific to the beacon protocols.
(3) Propose. Upon receiving the join request, the leader 𝐿𝑒 of current epoch 𝑒 adds the join request containing inquire certificate and entity M in its block
proposal 𝐵𝑘 if (i) 𝐿𝑒 does not observe a block proposal with a join request in last 𝑡 + 1 epochs in its highest ranked chain and (ii) no new node has been
added since epoch 𝑒′.
(4) Update. If the block 𝐵𝑘 with the join request from node 𝑝𝑘 proposed in epoch 𝑒 gets committed by epoch 𝑒 + 𝑡, update 𝑛𝑡 ← 𝑛𝑡 − 1 in epoch 𝑒 + 𝑡 and
send P \ P𝑟 to node 𝑝𝑘. Henceforth, node 𝑝𝑘 becomes a passive node and receives all protocol messages from active nodes.
(5) Synchronize. Nodes execute clock synchronization protocol (refer Figure 11) from epoch 𝑒 + 𝑡 + 2 to synchronize node 𝑝𝑘. All nodes including node 𝑝𝑘
are synchronized in epoch 𝑒 + 3𝑡 + 3. At epoch 𝑒 + 3𝑡 + 3 update P ← P ∪ {𝑝𝑘 }. Henceforth, node 𝑝𝑘 becomes an active node and participates in the
protocol. Additionally, node 𝑝𝑘 participates in the reconstruction protocol only if it has required secret shares.
If node 𝑝𝑘 fails to join the system, it restarts reconfiguration process again after some time.
Figure 12: Reconfiguration protocol
Q(𝑝𝑘) with the PVSS provided by node 𝑝𝑘 once its join request
gets committed.
An adaptive adversary can corrupt any node as long as 𝑡 + 1
honest nodes have full queue Q(𝑝 𝑗) ≠ ⊥∀𝑝 𝑗 ∈ P \ P𝑟 , i.e., if the
adversary already corrupted 𝑡 nodes some of which are removed,
the adversary can corrupt old honest nodes only when node 𝑝𝑘
has full queue (i.e., Q(𝑝 𝑗) ≠ ⊥∀𝑝 𝑗 ∈ P \ P𝑟 ). This happens when
all nodes in P \ P𝑟 becomes a leader at least once after node 𝑝𝑘
becomes a leader. Due to random leader election, the expected
number of epochs required for all nodes to be selected as leaders is
𝑛
𝑖=0
Remark. GRandPiper beacon protocol can employ a rotating leader
election for BFT SMR with randomized leaders for reconstruction
phase. With this change, the adaptive resilience of BRandPiper is
restored in 𝑛 + 𝑡 + 1 epochs compared to expected 𝑛 log 𝑛 epochs.
Theorem D.2. GRandPiper protocol maintains safety and liveness
𝑖 = Θ(𝑛 log 𝑛).
1
𝑛
after reconfiguration.
Proof. Let node 𝑝𝑖 be the new joining node. GRandPiper pro-
tocol is safe and live before reconfiguration. Since we assume the
adversary can corrupt a new node as long as 𝑡 + 1 honest nodes
have full queue, i.e., Q(𝑝 𝑗) ≠ ⊥∀𝑝 𝑗 ∈ P \ P𝑟 , there will always be
𝑡 + 1 honest nodes with correct secret shares. Hence, the protocol
maintains safety and liveness after reconfiguration.
□
23
D.2 Reconfiguration for BRandPiper
Node 𝑝𝑘 that intends to join the system uses the reconfiguration
protocol (Figure 12) to join the system. During the join phase, node
𝑝𝑘 does not need to send any additional commitment i.e., sets
M := ⊥. Once node 𝑝𝑘 becomes the active node, it is then allowed
to become a leader using round-robin leader election and shares
VSS commitments to 𝑛 secrets when it becomes the leader. All
active nodes use the secret shares for node 𝑝𝑘 only when they have
committed the commitment shared by node 𝑝𝑘.
Like the reconfiguration for GRandPiper protocol, an adaptive
adversary can corrupt any node as long as 𝑡 + 1 honest nodes have
full queue Q(𝑝 𝑗) ≠ ⊥∀𝑝 𝑗 ∈ P \ P𝑟 . I.e., if the adversary already
corrupted 𝑡 nodes some of which are removed, the adversary can
corrupt old honest nodes only when node 𝑝𝑘 has full queue (i.e.,
Q(𝑝 𝑗) ≠ ⊥∀𝑝 𝑗 ∈ P \ P𝑟 ). This happens when all nodes in P \ P𝑟
becomes a leader at least once after node 𝑝𝑘 becomes a leader. Due
to the round-robin leader election, node 𝑝𝑘 will have full queue
after 𝑛 + 𝑡 + 1 epochs after it has become an active node.
Theorem D.3. BRandPiper protocol maintains safety and liveness
after reconfiguration.
The proof remains identical to Theorem D.2.
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3524