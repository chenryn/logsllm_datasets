## 优秀的代码是"经济"的代码大概也没人想记住这么多条标准吧？所以，**关于优秀代码的特点，我想用"经济"这一个词语来表达**。这里的"经济"，指的是使用较少的人力、物力、财力、时间、空间，来获取较大的成果或收益。或者简单地说，**投入少、收益大、投资回报高**。为了方便，你也可以先理解为节俭或者抠门儿的意思。当然，使用一个词语表达肯定是以偏概全的。但是，比起一长串的准则，一个关键词的好处是，更容易让人记住。我想这点好处可以大致弥补以偏概全的损失。该怎么理解"经济"呢？这需要我们把代码放到软件的整个生命周期里来考察。关于软件生命周期，我想你应该很熟悉了，我们一起来复习一下。一般而言，一个典型的软件生命周期，大致可以划分计划、分析和设计、代码实现、测试、运营和维护这六个阶段。在软件维护阶段，可能会有新的需求出现、新的问题产生、旧问题的浮现，这些因素可能就又要推动新一轮的计划，分析、设计、实现、测试、运营。这样，这个周期就会反复迭代，反复的循环，像一个周而复始的流水线。![](Images/ac9e011544894bd924f46a801329b138.png){savepage-src="https://static001.geekbang.org/resource/image/14/04/144679d37d552e4d5c436cab88582f04.png"}当我们说投入少的时候，说的是这整个生命周期，甚至是这个周而复始的生命周期的投入少。比如说，代码写得快，可是测试起来一大堆问题，就不是经济的。现代的大型软件开发，一般都会有比较细致的分工，在各个阶段参与的人是不同的；甚至在相同的阶段，也会有多人参与。一个稍有规模的软件，可能需要数人参与设计和实现。而为了使测试相对独立，软件测试人员和软件实现人员也是相对独立的，而且他们具备不同的优势和技能。![](Images/be5dc88d2c89e3b574a445f5aa5cb17c.png){savepage-src="https://static001.geekbang.org/resource/image/89/df/89bb4250efc6702f638f8981030927df.png"}所以，当我们考虑投入的时候，还要考虑这个生命周期里所有的参与人员。这些参与人员所处的立场、看问题的角度，所具有的资源禀赋，可能千差万别。比如说，如果客户需要阅读代码，才知道系统怎么使用，就不是经济的。是不是所有的软件都有这六个阶段呢？显然不是的，我本科的毕业论文程序，就完全没有运营和维护阶段，甚至也不算有测试阶段。我当时的毕业论文是一个关于加快神经网络学习的数学算法。只要验证了这个算法收缩得比较快，程序的使命就完成了，程序就可以退出销毁了。所以，运营和维护阶段，甚至测试阶段，对当时的我而言，都是不需要投入的阶段。在现代商业社会里，尤其我们越来越倾向于敏捷开发、精益创业，提倡"快速地失败、廉价地失败"，很多软件走不到维护阶段就已经结束了。而且，由于人力资源的限制，当然包括资金的限制，一个程序员可能要承担很多种角色，甚至从开始有了想法，到软件实现结束，都是一个人在战斗，哪里分什么设计人员、测试人员。对软件开发流程选择的差异，就带来了我们对代码质量理解，以及对代码质量重视程度的千差万别。比如说，一个创业公司是万万不能照搬大型成熟软件的开发流程的。因为，全面的高质量、高可靠、高兼容性的软件可能并不是创业公司最核心的目标。如果过分纠缠于这些代码指标，创始人的时间、投资人的金钱可能都没有办法得到最有效的使用。当然，越成熟的软件开发机制越容易写出优秀的代码。但是，**最适合当前现实环境的代码，才是最优秀的代码。**所以，当我们考虑具体投入的时候，还要考虑我们所处的现实环境。如果我们超出现实环境去讨论代码的质量，有时候会有失偏颇，丧失我们讨论代码质量的意义。既然具体环境千差万别，那我们还有必要讨论什么是优秀的代码吗？优秀的代码还能有什么共同的规律吗？即使一个人做所有的事情，即使代码用完一次就废弃，我们长期积累下来的编写优秀代码的经验，依然可以帮助到很多人。比如说，虽然创业公司的软件刚开始最核心的追求不是全面的高可靠性。可是，你也要明白，创业的目的不是为了失败，一旦创业公司稳住了阵脚，这个时候如果它们没有高可靠性的软件作为支撑，很快就会有反噬作用。而程序员背锅，就是反噬的其中一个后果。如何使用最少的时间、最少的资源，提供最可靠的软件，什么时候开始把可靠性提高到不可忽视的程度，有没有可能一开始就是高可靠的,这些就都是一个富有经验的创业公司技术负责人不得不考虑的问题。而我们总结出来的编写代码的经验，毫无疑问，可以为这些问题提供一些思路和出路。为什么我们要从"经济"这个角度来衡量优秀的代码呢？因为这是一个可以让我们更加理性的概念。一个营利性的公司，必须考虑投入产出比，没有人愿意做亏本的买卖，股东追求的是利润最大化。作为程序员，我们也必须考虑投入和产出。首先，我们的产出必须大幅度大于公司对我们的投入，否则就有随时被扫地出门的风险。然后，我们必须使用好我们的时间，在单位时间内创造更多的价值，否则，真的是没有功劳，只有徒劳。编写代码的时候，如果遇到困惑或者两难，你要想一想，怎么做才能做到投资少、收益大？即便具体环境千差万别，我还是有一些例子，可以和你一起分享：1.  代码写得又快又好，是"经济"的；代码写得快，但是错误多，不是一个"经济"的行为。2.  代码跑得又快又好，是"经济"的；代码跑得快，但是安全问题突出，不是一个"经济"的行为。3.  代码写得精简易懂，是"经济"的；代码写得精简，但是没人看得懂，不是一个"经济"的行为。
## 总结对于所有的程序员来说，每个人都会遇到两个有名的捣蛋鬼，一个捣蛋鬼是"合作"，另一个捣蛋鬼是"错误"。要合作，就需要用大部分人都舒服的方式。程序员间合作交流最重要的语言便是代码，换句话说，这就需要我们规范地编写代码，使用大家都接受的风格。不规范的代码，我们可能节省了眼前的时间，但是测试、运营、维护阶段，就需要更多的时间。而一旦问题出现，这些代码会重新返工，又回到我们手里，需要阅读、修改，再一次浪费我们自己的时间。对于这些代码，每一点时间的付出，都意味着投入，意味着浪费，意味着我们损失了做更有意义事情的机会。人人都会犯错误，代码都会有bug，可是有些错误的破坏力是我们无法承受的，其中，最典型的就是安全问题。很多安全问题对公司和个人造成不容忽视的恶劣影响。我见过因为安全问题破产的公司。这时候，甚至都不要谈什么投入产出比、经济效益了，所有的投入归零，公司破产，员工解散。这需要我们分外地卖力，拿出十二分的精神来处理潜在的安全威胁，编写安全的代码。如果我们把规范和安全作为独立的话题，优秀的代码需要具备三个特征：经济、规范、安全。这些内容就是我们接下来要在专栏里一起学习的主体。好了，今天我们一口气聊了很多，主要是在探讨到底什么样的代码才是优秀的代码。这个问题你之前考虑过吗？和我今天讲的是否一样呢？欢迎你在留言区写写自己的想法，我们可以进一步讨论。也欢迎你把今天的文章分享给跟你协作的同学，看看你们之间的理解是否一致。![](Images/64444bae3ac90f82cb45ef5f1bc68d94.png){savepage-src="https://static001.geekbang.org/resource/image/5a/98/5a96a612403912b80de030e742e2e598.jpg"}
# 02 \| 把错误关在笼子里的五道关卡上一讲中，我们一起讨论了什么是优秀的代码。简而言之，优秀的代码是经济、规范、安全的代码。在平时的工作中，我们要朝着这个方向努力，时常站在团队、流程、个人能力的角度去思考优秀代码。作为一名软件工程师，我们都想写出优秀的代码。可是，怎么才能编写出经济、规范、安全的代码呢？这是个大话题，相信你之前也有过思考。
## 无心的过失开始之前，我先给你讲个曾经发生过的真实案例。2014 年 2 月，苹果公司的 iOS和 OS X操作系统爆出严重的安全漏洞，聪明的黑客们可以利用这一漏洞，伪装成可信网站或者服务，来拦截用户数据。而造成这一漏洞的原因，也让业界专家大跌眼镜。下面我用 [C 语言的伪代码]{.orange}来给你简单描述下当时的漏洞情况。        if ((error = doSomething()) != 0)        goto fail;                 goto fail;        if ((error= doMore()) != 0)                goto fail;fail:        return error;其实这段代码非常简单，它有两个判断语句，如果判断条件成立，那就执行"gotofail"语句，如果不成立，那就跳过判断语句继续执行。上面的"gotofail"语句，它的意思是略过它之后的所有语句，直接跳转到标有"fail"语句的地方，也就是第6 行。我们来分析下，第一个判断条件（第一行和第二行），如果 error不等于零，那就跳转到 fail语句，这逻辑上没什么问题。而第三行，没有任何附加条件，就能直接跳转到fail语句，也就是说，它下面的代码永远也无法执行，这里是不是有问题？是的，漏洞就是出在这里。``{=html}这一行多余的代码就是导致苹果操作系统那个安全漏洞的罪魁祸首。2014 年 2 月21 日，苹果发布了相关的安全补丁，你随便一搜"GoTo Fail漏洞"就能找到相关的细节，我这里不赘述了。我们每天仰慕的苹果操作系统出现这样"低级"的错误，你是不是有点惊讶？这么一个"简单"的错误，引发了一个非常严重的安全漏洞，是不是也有点出乎意料？上面的错误，简单看，就是复制的时候多复制了一行，或者因为时间关系，或者因为粗心大意，苹果的工程师硬是没检查出来。这在我们平时的工作中，也经常出现。这个具有重大杀伤力的 bug是如此的"幼稚"，如此的"好玩"，如此的"萌萌哒"，以至于到现在，人们还可以买到印有"GoToFail"的 T恤衫，更别提业界对于这个问题的兴趣了。有很多文章，专门研究这一个"低级"安全漏洞；甚至有人探讨这个"低级"错误对于计算机软件教育的积极影响。所有的危机都不应该被浪费，这一次也不例外。这些年，我也一直在思考**为什么我们会犯如此"低级"的错误**？即使是在苹果这样的大公司。反过来再想，我们应该如何尽可能避免类似的错误呢？
## 人人都会犯错误没有人是完美的，人人都会犯错误。这应该是一个共识。这里面既有技术层面的因素，也有人类的行为模式的因素，也有现实环境的影响。我们在此不讨论人类进化和心智模式这样的严肃研究成果。但是，有两三个有意思的话题，我想和你聊聊。第一个比较普遍的观点是好的程序员不会写坏的代码，要不然，就是他还不足够优秀。我尊重这个观点背后代表的美好愿望，但是这个观点本身我很难认同。它一定程度上忽视了人类犯错误的复杂性，和影响因素的多样性。我认为，即使一个非常优秀的程序员，他主观上非常认真，能力又非常强，但他也会犯非常"低级"、"幼稚"的错误。所以，你不能因为苹果那个程序员，犯了那个非常低级的错误，就一棒子把他"打死"，认为他不是一个好的程序员。第二个更加普遍的观点是同样的错误不能犯第二次。作为一名程序员，我同样尊重这个观点背后代表的美好期望。但是，我想给这个观点加一点点限制。这个观点应该是我们对自身的期望和要求；对于他人，我们可以更宽容；**对于一个团队，我们首先要思考如何提供一种机制，以减少此类错误的发生**。如果强制要求他人错不过三，现实中，我们虽然发泄了怨气，但是往往错失了工作机制提升的机会。第三个深入人心的观点是一个人犯了错误并不可怕，怕的是不承认错误。同样的，我理解这个观点背后代表的美好诉求。这是一个深入人心的观点，具有深厚的群众基础，我万万不敢造次。在软件工程领域，我想，在犯错这件事情上，我们还是要再多一点对自己的谅解，以及对他人的宽容。错误并不可怕，你不必为此深深自责，更不应该责备他人。要不然，**一旦陷入自责和指责的漩涡，很多有建设意义的事情，我们可能没有意识去做；或者即使意识到了，也没法做，做不好**。我这么说，你是不是开始有疑惑了：人人都会犯错误，还重复犯，还不能批评，这怎么能编写出优秀的代码呢？换句话说就是，**我们怎么样才会少犯错误呢？**
## 把错误关在笼子里人人都会犯错误，苹果的工程师也不例外。所以，"GoToFail"的"幼稚"漏洞，实在是在情理之中。可是，这样的漏洞是如何逃脱重重"监管"，出现在最终的发布产品中，这多多少少让我有点出乎意料。我们先来看看，这个错误是经过了怎样的"工序"，穿越了多少障碍，需要多少运气，最终才能被"发布"出来。我把这样的工序总结为"五道关卡"。**第一道关：程序员****提高程序员的修养，是一个永不过时的课题。从别人的失败和自己的失败中学习、积累、提高，是一个程序员成长的必修课**。我知道，这是你和我一直都在努力做的事情。第三行的"GoToFail"，实在算得上"漏网之鱼"，才可以逃过哪怕最平凡的程序员的眼睛，堂而皇之地占据了宝贵的一行代码，并且狠狠地玩耍了一把。现在我们可以再回过来看看那段错误代码，如果是你写，你会怎么写呢？从你的角度来看，又有哪些细节可以帮助你避免类似的错误呢？这两个问题，你可以先停下来1 分钟，想一想。在我看来，上面那段代码，起码有两个地方可以优化。如果那位程序员能够按照规范的方式写代码，那"GoToFail"的漏洞应该是很容易被发现。我们在遇到问题的时候，也应该尽量朝着规范以及可持续改进的角度去思考错误背后的原因，而非一味地自责。首先，**他应该正确使用缩进**。你现在可以再看下我优化后的代码，是不是第三行的代码特别刺眼，是不是更容易被"逮住"？        if ((error = doSomething()) != 0)        goto fail;    goto fail;    if ((error= doMore()) != 0)        goto fail;fail:    return error;其次，**他应该使用大括号**。使用大括号后，这个问题是不是就自动消失了？虽然，多余的这一行依然是多余的，但已经是没有多大危害的一行代码了。        if ((error = doSomething()) != 0) {        goto fail;        goto fail;    }    if ((error= doMore()) != 0) {        goto fail;    }fail:    return error;从上面这个例子里，不知道你有没有体会到，好的代码风格带来的好处呢？工作中，像苹果公司的那位程序员一样的错误，你应该没少遇到吧？那现在，你是不是可以思考如何从代码风格的角度来避免类似的错误呢？魔鬼藏于细节。很多时候，**优秀的代码源于我们对细节的热情和执着**。可能，你遇到的或者想到的问题，不是每一个都有完美的答案或者解决办法。但是，**如果你能够找到哪怕仅仅是一个小问题的一个小小的改进办法，都有可能会给你的代码质量带来巨大的提升和改变**。当然，你可能还会说，我代码风格不错，但是那个问题就是没看到，这也是极有可能的事情。是这样，所以也就有了第二道工序：编译器。**第二道关：编译器**编译器在代码质量方面，作为机器，恪尽职守，它可以帮助我们清除很多错误。还是以上面的漏洞代码为例子，这一次其实编译器的防守并没有做好，因为它毫无察觉地漏过了多余的"GoToFail"。在 Java 语言里，对于无法访问的代码（第三行后的代码）， Java编译器就会及时报告错误。而在 2014 年 2 月的 GCC编译器里，并没有提供这样的功能。至今，GCC 社区对于无法访问代码的检查，还没有统一的意见 。然而，GCC社区并没有完全浪费这个"GoTo Fail"的问题 。为解决类似问题，从 GCC 6开始，GCC 社区为正确使用缩进提供了一个警告选项（-Wmisleading-indentation ）。如果代码缩进格式没有正确使用，GCC就会提供编译时警告。现在，如果我们启用并且注意到了 GCC编译器的警告，犯类似错误的机会应该会大幅度地降低了。在这里，我要提醒你的是，对于编译器的警告，我们一定要非常警觉。能消除掉所有的警告，你就应该消除掉所有的警告。就算实在没有办法消除掉编译警告，那你也一定要搞清楚警告产生的原因，并确认编译警告不会产生任何后续问题。**第三道关：回归测试 （Regression Testing）**一般地，软件测试会尽可能地覆盖**关键逻辑和负面清单**，以确保关键功能能够正确执行，关键错误能够有效处理。一般情况下，无论是开发人员，还是测试人员，都要写很多测试代码，来测试软件是否达到预期的要求。另外，这些测试代码还有一个关键用途就是做回归测试。如果有代码变更，我们可以用回归测试来检查这样的代码变更有没有使代码变得更坏。上述的"GoToFail"这样的代码变更，涉及到一个非常重要的负面检查点。遗憾的是，该检查点并没有包含在回归测试中；或者，在这个变更交付工程中，回归测试并没有被执行。软件测试没有办法覆盖所有的使用场景。但是，我们千万要覆盖关键逻辑和负面清单。一个没有良好回归测试的软件，很难保证代码变更的质量；也会使得代码变更充满不确定性，从而大幅地提高代码维护的成本。**第四道关：代码评审 （Code Review）****代码评审是一个有效的在软件研发过程中抵御人类缺陷的制度**。通过更多的眼睛检查软件代码，被忽视的错误更容易被逮住，更好的设计和实现更容易浮现出来。那代码评审是怎么实现的呢？一般情况下，代码评审是通过阅读代码变更进行的。而代码变更一般通过某种形式的工具呈现出来。比如OpenJDK 采用的[Webrev](http://openjdk.java.net/guide/webrevHelp.html)。你可以访问[我的一个代码评审使用的代码变更页面](http://cr.openjdk.java.net/~xuelei/8171337/webrev.00/)，感受下这种呈现方式。回到上面那个"GoToFail"的代码变更，看起来什么样子呢？下面是其中的一个代码变更版本示例：    if ((err = SSLHashSHA1.update(&hashCtx, &signedParams)) != 0)    goto fail;+   goto fail;if ((err = SSLHashSHA1.final(&hashCtx, &hashOut)) != 0)    goto fail;添加的这行代码，还是相当刺眼的。多一些眼睛盯着这些代码，多一些形式展现这些变更，就会大幅度地降低问题藏匿的几率。上述的"GoToFail"这样的代码变更，怎么就逃过代码评审者的眼睛呢？我想说的是，评审者也是人，我们不能期望评审者能发现所有的问题。**第五道关：代码分析 （Code Analysis）**静态代码分析（Static CodeAnalysis）是通过对源代码的检查来发现潜在问题的一种软件质量保障方式。有很多静态代码分析工具可以帮助你检查代码缺陷，比如说商业软件Coverity，以及开源软件FindBugs。你可以试试看，有哪些工具可以检测到这个"GoTo Fail"问题。代码覆盖率（CodeCoverage）是一个反映测试覆盖程度的指标。它不仅仅量化测试的指标，也是一个检测代码缺陷的好工具。如果你的代码覆盖率测试实现了行覆盖（LineCoverage），这个"GoTo Fail"问题也很难闯过这一关。很显然，苹果的这一关也没有拦截住"GoTo Fail"。这样，"GoToFail"就像千里走单骑的关云长，闯过了五关（有些软件开发流程，也许会设置更多的关卡）。
## 代码制造的流水线我们分析了这重重关卡，我特别想传递的一个想法就是，**编写优秀的代码，不能仅仅依靠一个人的战斗**。代码的优秀级别，依赖于每个关卡的优秀级别。高质量的代码，依赖于高质量的流水线。每道关卡都应该给程序员提供积极的反馈。这些反馈，在保障代码质量的同时，也能帮助程序员快速学习和成长。可是，即使我们设置了重重关卡，"GoToFail"依然"过关斩将"，一行代码一路恣意玩耍。这里面有关卡虚设的因素，也有我们粗心大意的因素。我们怎么样才能打造更好的关卡，或者设置更好的笼子？尤其是，**身为程序员，如何守好第一关？**欢迎你在留言区说说自己的思考。下一讲，我们再接着聊这个话题。