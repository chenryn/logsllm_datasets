✦大多数的项目团队是否拥有基于普遍问题的审核清单
列表？
✦项目团队是否通常针对选择的高风险代码执行审核？
CR1
✦大多数项目团队是否可以使用自动的代码分析工具去
查找安全问题？
✦大多数项目业务拥有者是否持续要求并审核来自代码
审核的结果？
CR2
✦项目团队是否根据应用程序特定的编码标准，使用自
动化的方式去检查代码？
✦常规项目审核是否需要一个为发布代码审核结果的最
低线？
CR3
安全测试 是/不是
✦项目是否明确指定一些基于需求的安全测试？
✦大多数项目是否在发布以前执行渗透测试？
✦大多数利益相关者是否意识到需在发布以前进行安全
测试？
ST1
✦项目是否使用了自动化工具去评估安全测试用例？
✦大多数项目是否遵守一个一致的过程，为利益相关者
评估并记录安全测试？
ST2
✦安全测试用例是否为应用程序特定的逻辑而综合制作
的？
✦常规项目审核是否需要来自于安全测试的最低标准结
果？
ST3
25
部署
评估表
漏洞管理 是/不是
✦大多数项目是否都有对于安全问题的联络点?
✦组织是否已设立一个安全响应团队？
✦大多数项目团队是否知道他们的安全联络点和响应团
队?
VM1
✦组织对于事件的报告和处理是否使用了一种一致的流
程？
✦大多数利益相关者是否意识到公开的相关安全事件与
他们的软件项目有关系?
VM2
✦大多数调查了根本起因的安全事件是否有了更多更深
入的建议？
✦大多数项目是否持续收集并报告关于安全事件的数据
和衡量标准?
VM3
环境强化 是/不是
✦大多数项目是否为操作环境记录需求？
✦大多数项目是否检查第三方软件部件的安全更新？ EH1
✦是否使用一个持续连贯的处理流程以对于关键依赖的
部件使用安全更新和补丁？
✦大多数项目是否权衡了应用程序的自动化检测和环境
的健康状态？
EH2
✦利益相关方是否意识到当进行操作时用于保护软件的
额外工具的选择？
✦常规审计是否为大多数的项目检查环境健康状况？
EH3
操作实现 是/不是
✦你是否递交了关于多数软件发布的安全记录？
✦大多数项目是否都记录了与安全相关的警报和产生错
误的条件？
OE1
✦大多数项目是否正在使用一个已理解的变更管理处理
流程？
✦项目团队是否为每个软件发布递交了一份操作安全手
册？
OE2
✦大多数项目是否为了恰当的操作安全信息，而去审计
检查每个发布？
✦软件组件的代码签名是否按照一致的处理流程被经常
进行？
OE3
 26
创建记分卡
根据为给每个安全实践填写的分
数，一个组织可以创建一个记分卡来
记录这些分数值。从功能而言，记分
卡可以是某个特定的时间记录的12组
分数。但是，通过每过一个时间间隔
产生了一个记分卡，有利于了解在时
间框架内，保证计划的总体变化。
在以下几种情况中，建议使用时
间间隔形式的记分卡：
✦差距分析——将获得的详细评估结
果与预期的性能等级做比较，获得分
数。
✦改善证明——在一次安全计划迭代
建立完成的前后，获得分数。
✦持续衡量——为一个已经就位的保
证计划，在持续的时间框架内获得分
数。
右侧的图是一个记分卡样本，展
现了一个组织的保证计划在一年中是
如何改变的。如果该组织还保存了他
们预期将在一年结束后获得的数据，
那将是另一组有趣的数据，因为这将
有助于显示在一年中计划改变的程
度。
27
建立保证计划
SAMM 的主要用法之一是帮助组
织建立软件安全保证计划。这个过程
很直接，通常，如果组织已经执行了
一些安全保证措施，那么由评估开始。
我们为普遍类型的组织提供了几
种路线图模板。因此，许多组织可以
选择一个相匹配的合适模版，然后适
当调整路线图模板以满足他们的需
求。对于其他类型的组织，则可能需
要建立一个自定义的路线图。
路线图（右图）由不同的阶段（垂
直线条）组成，其中实践随着等级的
提高而改善。因此，建立一个路线图，
允许选择哪些实践在每个计划的阶段
得到改善。组织可以根据他们的意愿
自由地定制将来的计划，但是，鼓励
根据业务驱动和组织特定的信息来循
序执行，以确保保证计划的目标与组
织的业务目标和风险承受能力相适
应。
路线图建立以后，执行保证计划
则很简单。一个组织从改善阶段开始，
通过执行定制的措施来达到预期的等
级。在该阶段结束时，应根据完成的
实际情况调整路线图，然后开始下一
阶段。
执行初步
评估
是否已有路
线图模版
建立一
个空模
版
选择合
适的路
线图
选择实践以
求改善
在路线图
标记选择
的改善
完成 为组织调
整路线图
没有 有
开始
添加其他阶
段
不
是
 28
独立软件供应商
路线图模版
关系
独立软件供应商的核心业务包括了构
建及销售软件组件和应用程序。
由于最初目的是限制会影响客户和用
户业务的常见漏洞，因而早期行动专注于
“代码审核”和“安全测试”的措施。
为了在产品说明中转向为积极主动地
避免安全错误，组织会逐渐加强针对“安全
需求”的措施。
此外，为了尽量降低已发现安全问题所
造成的影响，组织还会逐渐加强“漏洞管理”
措施。
随着组织逐渐成熟，来自“操作实现”
的措施被逐渐增加，以更好地为客户和用户
提供软件安全操作的信息。
额外的考虑
外包式开发
对于采用外部开发资源的组织，由于无
法直接接触代码，因此，“安全需求”对于
“代码审核”有着更为重要的优先级。此外，
在早期阶段的高级“威胁评估”，可以允许