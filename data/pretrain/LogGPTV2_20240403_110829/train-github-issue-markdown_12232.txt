##### System information (version)
  * OpenCV => 3.4 and 4.3
  * Operating System / Platform => Ubuntu 18.04
  * Compiler => GCC 7.5.0
##### Detailed description
I'm having some trouble since I changed from OpenCV 3.2 (repo version) to 4.x
(compiled from source) in my C++ project (also happens in 3.4). I've
replicated this behaviour in a small example that just opens a webcam and
records for 5 seconds.
With 3.2 and 3.3 I am able to set the webcam framerate to 30 at full hd, but
the same code with 3.4 or 4.3 just ignores the camera.set(cv::CAP_PROP_FPS,30)
and sets it to 5 instead. If I use 720p, the fps is set to 10.
I've done more tests with other two computers and different cameras. One
yields the same result, but a Macbook Pro running the same distribution OpenCV
4.3 seems to work. The two computers where I get the fps problem are desktops
with usb webcams.
##### Issue submission checklist
  * I report the issue, it's not a question 
  * I checked the problem with documentation, FAQ, open issues,  
answers.opencv.org, Stack Overflow, etc and have not found solution
  * I updated to latest OpenCV version and the issue is still there 
  * There is reproducer code and related data files: videos, images, onnx, etc 
    #include "opencv2/opencv.hpp"
    #include "iostream"
    #include "thread"
    #include 
    using namespace cv;
    VideoCapture camera(0);
    bool stop = false;
    int fc = 0;
    void saveFrames()
    {
        while(!stop)
        {
            Mat frame;
            camera >> frame;
            cv::imwrite("/tmp/frames/frame" + std::to_string(fc) + ".jpg", frame);
            fc++;
        }
    }
    int main()
    {
        if(!camera.isOpened())
            return -1;
        camera.set(cv::CAP_PROP_FRAME_WIDTH,1920);
        camera.set(cv::CAP_PROP_FRAME_HEIGHT,1080);
        camera.set(cv::CAP_PROP_FPS,30);
        double fps = camera.get(cv::CAP_PROP_FPS);
        std::cout << "FPS setting: " << fps << std::endl; // 5 with OCV4, 30 with OCV3.2
        std::thread tr(saveFrames);
        int waitSeconds = 5;
        usleep(waitSeconds * 1e6);
        stop = true;
        tr.join();
        std::cout << "Written " << fc << " frames of " << fps * waitSeconds << std::endl;
        return 0;
    }