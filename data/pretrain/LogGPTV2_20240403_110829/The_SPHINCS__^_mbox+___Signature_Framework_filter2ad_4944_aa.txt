title:The SPHINCS\(^\mbox+\) Signature Framework
author:Daniel J. Bernstein and
Andreas H&quot;ulsing and
Stefan K&quot;olbl and
Ruben Niederhagen and
Joost Rijneveld and
Peter Schwabe
The SPHINCS+ Signature Framework
Daniel J. Bernstein
University of Illinois at Chicago
Ruhr University Bochum
PI:EMAIL
Andreas Hülsing
Eindhoven University of Technology
PI:EMAIL
Ruben Niederhagen
Fraunhofer SIT, Darmstadt
PI:EMAIL
Joost Rijneveld
Radboud University
PI:EMAIL
Stefan Kölbl
Cybercrypt
PI:EMAIL
Peter Schwabe
Radboud University
PI:EMAIL
ABSTRACT
We introduce SPHINCS+, a stateless hash-based signature frame-
work. SPHINCS+ has significant advantages over the state of the
art in terms of speed, signature size, and security, and is among the
nine remaining signature schemes in the second round of the NIST
PQC standardization project. One of our main contributions in this
context is a new few-time signature scheme that we call FORS. Our
second main contribution is the introduction of tweakable hash
functions and a demonstration how they allow for a unified security
analysis of hash-based signature schemes. We give a security reduc-
tion for SPHINCS+ using this abstraction and derive secure param-
eters in accordance with the resulting bound. Finally, we present
speed results for our optimized implementation of SPHINCS+ and
compare to SPHINCS-256, Gravity-SPHINCS, and Picnic.
CCS CONCEPTS
• Security and privacy → Digital signatures.
KEYWORDS
Post-quantum cryptography, SPHINCS, hash-based signatures, state-
less, tweakable hash functions, NIST PQC, exact security
ACM Reference Format:
Daniel J. Bernstein, Andreas Hülsing, Stefan Kölbl, Ruben Niederhagen,
Joost Rijneveld, and Peter Schwabe. 2019. The SPHINCS+ Signature Frame-
work. In 2019 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’19), November 11–15, 2019, London, United Kingdom. ACM,
New York, NY, USA, 18 pages. https://doi.org/10.1145/3319535.3363229
1 INTRODUCTION
Hash-based signature schemes are among the oldest designs to
construct digital signatures. First introduced by Lamport [35] and
refined by Merkle [37] in 1979, forty years later the basic construc-
tions remain largely the same. With well-understood security and
minimal assumptions, they are often considered to be the most
conservative option available. Yet, it took the potentially imminent
construction of a quantum computer for them to gain popularity
and be considered for real-world applications. Today hash-based
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3363229
signature schemes are the first post-quantum signature schemes
formally defined in two RFCs [31, 36], and SPHINCS+, the scheme
presented in this work, is among the nine remaining signature pro-
posals in the second round of the NIST post-quantum cryptography
standardization project [1].
The performance of hash-based signatures, in terms of both
speed and size, has traditionally been an obstacle for adoption.
Developments over the past decade have taken significant steps
towards practicality, in particular through the design of XMSS [16].
Arguably the biggest hurdle towards practicality is of a more funda-
mental order: almost all hash-based signature schemes in literature
(including the schemes described in RFCs above) are stateful; they
need to keep track of all produced signatures. This was addressed in
practice by SPHINCS [9] in 2015, building upon theoretical work by
Goldreich [26, 27]. Merkle’s design crucially relies on iterating over
signing keys in order, to prevent reuse. Contrarily, the structure in
the designs following Goldreich is so large that, roughly, one can
pick a signing key at random each time and reasonably assume it
has not been used before. This is essential for many real-world uses,
where continuously updating a stateful key pair is often impossible:
consider, e.g., distributed servers and backups.
In this work we make three contributions to evolve the state of
the art in the area of hash-based signature schemes:
(1) We introduce SPHINCS+, a stateless hash-based signature
framework which has significant advantages over SPHINCS
in several dimensions and meets the requirements of the
NIST PQC project [40].
(2) We introduce the concept of tweakable hash functions and
show how it allows us to unify the security analysis of hash-
based signature schemes.
(3) We present speed results for our optimized implementa-
tion of SPHINCS+ and a comparison with the other rel-
evant symmetric-cryptography-based signature schemes:
SPHINCS-256 [9], Gravity-SPHINCS [6], and Picnic [17].
Introducing SPHINCS+. Although in a practical range, signature
size and speed of SPHINCS are far off from what we are used to
from RSA or ECDSA signatures. This work presents SPHINCS+, a
stateless hash-based signature framework which improves upon
SPHINCS in terms of speed and signature size. This is achieved by
introducing several improvements that strengthen the security of
the scheme and thereby allow for smaller parameters. We introduce
a signature framework instead of a specific signature scheme. The
main reason for this is the large flexibility offered by the many
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2129parameter options. This allows users to make highly application-
specific trade-offs with regards to the signature size, the signing
speed, the required number of signatures and the desired security
level, and even account for platform considerations such as memory
limits or hardware support for specific hash functions.
As SPHINCS+ resembles SPHINCS in many details, we refrain
from giving a detailed description of the full scheme in this paper
but rather focus on the aspects that differ from previous work. A full
formal specification of SPHINCS+ is available in the official submis-
sion to NIST [4]. We now briefly recall the high-level construction
of SPHINCS-like schemes to afterwards explain our improvements.
See Section 3 for a more specific description.
Hash-based signature constructions center around a Merkle tree
with one-time signature key pairs on its leaf nodes. For efficiency
reasons, the XMSSMT and SPHINCS constructions make use of a
hypertree: a tree of trees, linked together using one-time signa-
tures (OTS). As the leaf nodes of the SPHINCS tree are randomly
selected, there is a trade-off to be made between the size of the
tree and the likelihood of selecting the same leaf node twice. To
sway this trade-off towards allowing smaller trees, SPHINCS uses
a few-time signature scheme (FTS) at the bottom of the tree. The
generic construction of such a hypertree is illustrated in Figure 1.
Among the main distinguishing contributions of SPHINCS+ is
the introduction of a new few-time signature scheme: FORS, in-
troduced in Section 3.4. Another important change from SPHINCS
to SPHINCS+ is the way leaf nodes are chosen. SPHINCS+ uses
publicly verifiable index selection, described in Section 3.5. These
two changes together make it harder to attack SPHINCS+ via the
few-time signature scheme and hence allow us to choose smaller
parameters. With the same goal, we apply multi-target attack miti-
gation techniques as proposed in [33], making it harder to attack
SPHINCS+ using a (second-)preimage attack. We give a security
reduction in Section 4 to formally show these claims. Analyzing the
complexity of generic attacks against the required hash-function
properties, we derive a formula for the bit security of a given pa-
rameter set from our security reduction (Section 5).
Tweakable hash functions. Over the last decade there was a line
of work [15, 16, 19, 30, 33] focusing on reducing the assumptions
that have to be made to prove a hash-based signature scheme secure.
The first goal of this was to move away from collision resistance and
towards collision resilient schemes. This leads to the use of targeted
security notions like second-preimage and preimage resistance,
making multi-target attacks a concern. Consequently, more recent
proposals aimed at mitigating multi-target attacks [33].
Comparing these works, it turns out that the high-level con-
structions remain the same. What changes is the way nodes in
hash chains and trees are computed. In some works, inputs first
get XORed with random values, in others, functions are addition-
ally keyed. Some proposals do both, and others just prepend or
append additional data to the inputs before hashing. Although the
differences in schemes are somewhat local, each work redid a full se-
curity analysis of the whole signature scheme. While these security
analyses were already complex for stateful hash-based signature
schemes, the case of stateless schemes adds further complexity.
We introduce an abstraction which we call tweakable hash func-
tions in Section 2. Tweakable hash functions allow us to unify the
Figure 1: An illustration of a (small) SPHINCS structure.
description of hash-based signature schemes, abstracting away the
details of how exactly nodes are computed. This allows us to sepa-
rate the analysis of the high-level construction from the analysis
of how this computation is done. We demonstrate the utility of
this approach by proposing and analyzing three constructions of
tweakable hash functions in Section 2, one of which is essentially
the construction from [33]. Afterwards, the SPHINCS+ security
reduction in Section 4 bases security of large parts of SPHINCS+
on the properties of the used tweakable hash functions and ignores
how these are implemented (in addition security is based on proper-
ties of the initial message compression and the used PRFs). Hence,
changing the way nodes are computed in SPHINCS+ now only
requires analyzing the hashing construction as a tweakable hash
function. This also supports the design of dedicated constructions,
as it provides a clear specification of the required properties.
Performance & comparison. Having defined a generic frame-
work, we provide concrete parameters and instances (see Section 6)
and evaluate the performance of the resulting signature scheme.
Then we go for a comparison to similar signature schemes. The chal-
lenge here is that the schemes provide different levels of security
under different assumptions. In a demonstration of the flexibility
and competitiveness of our framework, we also define instances
that carefully mimic the security level and properties of other signa-
ture schemes based on symmetric primitives and compare to these;
see Section 7 for a discussion.
Full version. The full version of this paper is available from https:
//sphincs.org/resources.html
pkmh=9d=3hashnodeOTSnodeFTSnodeSession 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom21302 TWEAKABLE HASH FUNCTIONS
In this section we give a definition of tweakable hash functions,
provide security notions, and discuss different instantiations. In Sec-
tion 4 we then give a proof of security for the SPHINCS+ framework
using the properties of tweakable hash functions for the security
of node computations.
2.1 Functional definition.
A tweakable hash function takes public parameters P and context
information in form of a tweak T in addition to the message input.
The public parameters might be thought of as a function key or
index. The tweak might be interpreted as a nonce.
Definition 1 (Tweakable hash function). Let n, α ∈ N, P the public
parameters space and T the tweak space. A tweakable hash function
is an efficient function
Th : P × T × {0, 1}α → {0, 1}n, MD ← Th(P,T , M)
mapping an α-bit message M to an n-bit hash value MD using a
function key called public parameter P ∈ P and a tweak T ∈ T .
We sometimes write ThP ,T (M) in place of Th(P,T , M). We use
the term public parameter for the function key to emphasize that
it is intended to be public. Tweaks are used to define context and
take the role of nonces when it comes to security. In SPHINCS+ we
use as public parameter a public seed PK.seed which is part of the
SPHINCS+ public key. As tweak we use a hash function address
ADRS which identifies the position of the hash function call within
the virtual structure defined by a SPHINCS+ key pair. This allows
us to make the hash-function calls for each SPHINCS+ key pair
and position in the virtual tree structure of SPHINCS+ independent
from each other.
2.2 Security notions.
Of course, this abstraction is only useful for us if it provides some
security properties. What we require from tweakable hash func-
tions are two properties, which we call post-quantum single func-
tion, multi-target-collision resistance for distinct tweaks (pq-sm-tcr)
and post-quantum single function, multi-target decisional second-
preimage resistance for distinct tweaks (pq-sm-dspr).
pq-sm-tcr. Essentially, sm-tcr is a variant of target-collision re-
sistance. It is a two-stage game where an adversary A is allowed
to adaptively specify p targets (multi-target) instead of a single
one during the first stage. For this purpose A is given access to an
oracle implementing the already keyed function (single-function
as the same public parameters are used for all targets). The adver-
sary’s queries specify its targets for the second stage. In addition
we require distinct tweaks, i.e., A is not allowed to use the same
tweak for more than one query. Hence, A can only define one
target per tweak. After specifying all targets, A receives the public
parameters which are similar to a function key. The adversary wins
if it finds a collision for one of the targets. It should be noted that
as we are considering the post-quantum setting, we assume that
adversaries have access to a quantum computer but honest parties
do not. In consequence, all oracles in our definitions, except for ran-
dom oracles, only allow classical access. A more detailed discussion
of the post-quantum setting and quantum-accessible oracles can
be found in Appendix A. We formalize the above in the following
definition.
Definition 2 (pq-sm-tcr). In the following let Th be a tweakable
hash function as defined above. We define the success probability
of any adversary A = (A1, A2) against the sm-tcr security of Th.
The definition is parameterized by the number of targets p for which
it must hold that p ≤ |T |. In the definition, A1 is allowed to make p
queries to an oracle Th(P, ·, ·). We denote the set of A1’s queries
by Q = {(Ti , Mi)}p
i =1) =
(∀i, k ∈ [1, p], i (cid:44) k) : Ti (cid:44) Tk, i.e., DIST({Ti}p
i =1) outputs 1 iff all
tweaks are distinct.
i =1 and define the predicate DIST({Ti}p
(cid:104)
(A) = Pr
P ←R P; S ← ATh(P ,·,·)
( );
Succsm-tcr
Th,p
(j, M) ← A2(Q, S, P) : Th(P,Tj , Mj) = Th(P,Tj , M)
∧M (cid:44) Mj ∧ DIST({Ti}p
i =1)(cid:105)
1
.
(cid:110)
We define the insecurity of a tweakable hash function against
p target, time ξ, pq-sm-tcr adversaries as the maximum success
probability of any possibly quantum adversary A with p targets
and running time ≤ ξ:
(A)(cid:111)
.
InSecpq-sm-tcr (Th; ξ , p) = maxA
Succsm-tcr
Th,p
As a special case, we refer to pq-sm-tcr with tweak advice if A1
informs the oracle about all p tweaks it will use ahead of its queries.
sm-tcr is implied by collision resistance; a more detailed discus-
sion of the relation between the two notions is given in the full
version.
pq-sm-dspr. sm-tcr is a collision-finding notion. There are cases
in the security reduction for SPHINCS+ (and also XMSS-T [33])
where the adversary A works as a preimage finder. A reduction
from a one-wayness notion leads to a non-tight reduction. The
reason is that the reduction has to return preimages for some of
the potential one-wayness targets as part of the answers to signing
queries. If a preimage challenge was planted at a position for which
a preimage is required to answer the signing query, the reduction