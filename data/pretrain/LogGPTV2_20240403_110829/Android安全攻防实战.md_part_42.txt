第9章加密与在开发时使用设备管理策略
3.如果你正在使用 SQLiteOpenHelper对象，那么需要写一个它的子类。在这个
例子中，我们假设你的子类的名字为SQLCipherHelper。当你调用
gerWritableDatabase时，你会发现你需要给它传递一个字符串参数（数据库
的口令）以及 SQLiteOpenHelper 的 SQLCipher 版本。
import net sqleipher, database, SQLiteOpenllelper,
public class SQtCipherHelper extends SQLiteOpenHelper [
private static final int DB_VERSION = 1
private static final String DB_NAME  "my_encrypted_data.db*;
public SQLCipherHelper (Context context)(
super (context, DB_sAME, nu11, DB_VERSION) 
SQLiteDatabase , loadLibs (context.) 
小贴士
在完成任何一个数据库操作之前，先要用SQLiteDatabase
loadLibs（context）语句加载SQLCipher原生库。理想情况下，应该
在 content provider 或你的 app 的 application 对象的 onCreate 方法
中调用它。
工作原理
上面的代码演示了使用SQLite数据库的两种最常见的方法：直接使用
SQLiteDatabase 对象，或者使用 SQLiteOpenHelper。
当我们创建或获取SQLCiphcr数据库对象时，使用net.sqlcipher.database API和
默认的 SQLite API的区别在于：使用口令的方式，这是值得注意的要点。正如之前
实验所述，SQLCipher是用PBKDF2推导出加密密钥的。在本书编写时，默认配置
是使用4,000次选代产生了一个256位的AES密钥，开发人员只需决定如何生成口
令就行了。你可以用供每个app单独使用的PRNG（伪随机数生成器）来生成口令，
也可以用更为随机，也更为安全的用户输入来生成口令。SQLCipher将使用推导出的
密钥进行加密和解密。同时它也使用一个消息验证码（message authentication code，
MAC）来确认完整性和可靠性。以确保数据没有被有意或无意地修改掉。
289
---
## Page 308
Android安全攻防实战
进一步说明.
值得注意的是，因为SQLCipher中的大部分代码都是用标准C/C++编写的，所
以它也兼容Linux，Windows，iOS 和Mac OS 等平台。
IOCipher
IOCipher 和 SQLCipher均属于Guardian 项目，可以认为 IOCipher是SQLCipher
的远房表兄弟。它使我们能够直接mount一个加密的虚拟文件系统，这使得开发人
员能把他们app目录中所有的文件都透明地加密起来。和SQLCipher一样，IOCipher
也需要开发人员对密码进行管理，也都支持Android2.1+系统。
IOCipher的一个巨大优点在于：它是java.ioAPI的一个clone。这意味着，从集
成的角度来看，只需要对现有的文件管理代码做很少的一些变动就可以使用它了。
主要的改变在于，在第一次用口令mount一个文件系统时，你应该使用
info.guardianproject.iocipher.File，而不是原来的 java.io.File。
甚至，IOCipher 中也使用了SQLCipher中的部分代码，尽管它还不是很成熟，
但是如果你想保护的是文件面不是数据库中的数据的话，还是值得花点时间去研究
一下它的。
拓展阅读
●到 http://sqlcipher.net/downloads/处下载 SQLCipher。
▪For Android 版的 SQLCipher 的开源代码位于https:/github.com/sqlcipher/
android-database-sqlcipher 中 。
。“IOCipher：虚拟加密磁盘”项目位于https://guardianproject.info/code/iocipher/中。
9.7Android KeyStore provider
在Android 4.3中，添加了一个新的功能，它使得app能把加密私钥保存在一个
名为“Android KeyStore”的系统KeyStore中。“AndroidKeyStore”只能被创建它的
app访问，并由设备pin码保护。
具体而言，Android KeyStore 是个证书存储区（certificate store），所以只有公钥/
私钥可以存放在其中。目前为止，诸如AES密钥这类的对称密钥还不能存储在这里。
在Android 4.4里，Android KeyStore 已经增加了对椭圆曲线数字签名算法（the Elliptic
Curve Digital Signature Algorithm，ECDSA）的支持。这个实验中将讨论如何生成一
个新的密钥，并把它保存到AndroidKeyStore中，然后再从中把它读取出来。
290
---
## Page 309
第9章加密与在开发时使用设备管理策略
准备工作
由于这一特性要到Android 4.3中被添加了进来，所以我们要把Android manifest
文件中的 minimum SDKversion 设为 18。
如何做·.
开始吧。
1.创建一个你app的KeyStore 句柄（handle）。
public static final String ANDROID_KEYSTORE = "AndroidKeyStore*;
public void loadKeyStore ()(
try
keyStore = KeyStore,getInstance (ANDROID_KEYSToRE) /
keyStore. 1oad (nu11) 
) catch (Exception e){
// rooo: Bandle this appropriately 1n your app
e.printStackTrace () 
2.生成并保存 app 的密钥对。
public void generateNevKeyPair (String alias, Context context)
throws Bxception {
Calendar start = Calendar,getInstance ():
Calendar end = Calendar getInstance ():
// expires 1 year from today
end,add (1, Calendar ,YEAR) 
KeyPairGeneratorSpec spec - nev KeyPairGeneratorSpec.
Bui1der (context)
,setAlias (alias)
set:Subject (new X500Principal (*Cs= + alLas) )
,setSerla1Nunber (BigInteger TEN)
setStartDate (start , getTime ())
SetEndDate (end, getTime () )
f()PTTnq'
// use the Android keystore
KeyPa.lrGenerator gen =
KeyPairGenerator , getInstance (=RSA*, ANDROID_KEYSTORE) 
gen.initialize (spec);
291
---
## Page 310
Android安全攻防实战
// generates the keypair
gen , generateKeyPair () ;
3.用给定的别名（alias）获取密钥。
public PrivateKey loadPrivteKey(Stxing alias) throws Exception {
if (keyStore.isKeyEntry(allas))(
Log.e (TAG, *Could not find key alias: " + alias) ;
return nul1;
KeyStore.Entry entry = keyStore.getEntry(KEY_ALIAS, null) :
If (! (entry instanceof KeyStore,PrivateKeyEntry)){
(_x  0u 9T 。 +  + 1 *)o·60
return nul1;
return ((KeyStore-PzivateKeyEntry) entry) getPrivateKey () ;
工作原理
自打APIlevel1起，KeyStore 类就已经存在了-要访问新创建的Android KeyStore，
你需要使用指定常量“AndroidKeystore”。
按照谷歌文档的介绍，KeyStore类有个奇怪的问题一一如果没有用来加载这个
keyStore的 InputStream，你就要用null 去调用 load方法，否则，就有可能引发崩溃。
在生成密钥对时，我们要把所需的详细信息填入KeyPairGeneratorSpec.Builder
对象中—其中包括一个别名（alias），之后我们要用它把密钥从KeyStore 中提取出
来。在这个例子中，我们随意地把有效期设为当前时间再加1年，面默认的有效期
是10年。面用别名从KeyStore 中获取密钥只要调用keyStore.getEntry(alias”，null）就
行了，
这里我们还创建了一个PrivateKey接口，这样我们就可以在加密/解密时使用它
了。之后，我们会返回PrivateKey接口，这样我们就能用它来进行加密/解密操作了。
进一步说明
在Android 4.3中，KeyChain类的API也有所更新，这就使得开发人员能够知道
设备是否支持基于硬件的证书存储区（certificate store）。这基本上就意味着，设备支
持用于证书存储区的安全元件（Secure Element）。这一改进太令人兴奋了，因为这样
292
---
## Page 311
第9章加密与在开发时使用设备管理策略
一来，即使是在已经root了的设备上，也能确保证书存储区的安全了。然而，并非
所有设备都支持这种硬件特性。LG的Nexus 4，一款流行的设备，采用的就是ARM
的TrustZone技术进行硬件保护的。
拓展阅读
·Android开发应用指南中的KeyStore 类在https://developer.android.
com/reference/java/security/KeyStore.html 中
·KeyStore API使用方法的示例代码在https://developer.android.com/samples/
BasicAndroidKeyStore/index.html 中。
·NikolayElenkov关于Android4.3中增强证书存储功能的文章在
http://nelenkov.blogspot.co.uk/2013/08/credential-storageenhancements-android-
43.html 中 。
●ARMTrustZone的 相关网 页位于http://www.arm.com/products/processors
technologies/ trustzone/index.php 中 。
9.8在开发时使用设备管理策略
设备管理策略在Android 2.2中被首次引入，它能授权app获取更高级别的设备
控制能力。这些特性主要针对企业级app的开发人员，给予他们控制、限制和潜在的
破坏能力，同时还为他们提供了可选的第三方移动设备管理（MDM）解决方案。一
般来说，除非已经建立了相应的信任关系，比如，银行和银行app，它并不面向消费
类 app (consumer app）。
这个实验将定义以下两个旨在加强设备安全性的设备策略，此外它们也可以成
为企业移动安全策略的一部分。
·设备强制加密（这也将确保使用pin码/口令）。
·强制执行最大超时锁屏时间。
虽然设备加密并不能替代正确地加密app中的数据的作用，但它还是增加了整个
设备的安全性。面减少最大超时锁屏时间，也有助于保护被暂时丢在一边的设备。
app可以执行多少个设备策略是没有限制的。如果相关的策略有冲突的话，系统
会默认选择执行最安全的那个策略。举个例子，如果口令最短长度的策略有冲突，
那么将使用安全性最强的策略，以满足所有策略的要求。
293
---
## Page 312
Android安全攻防实战
准备工作
尽管在2.2版本中已经添加了设备管理策略，但这个功能及设备加密相关的具体
限制却要到Android3.0以上版本才被加上。因此，在这个实验中，你要确保所使用
的 SDK版本高于API-11。
怎么做
咱们开始吧。
1.定义一个设备管理策略的方法是：在res/xml文件夹里创建一个名为
“admin_policy_encryption_and_lock_imeout.xml.xml” 的新文件，该文件的内
容如下所示。
Cuses-policies>
2.创建一个DeviceAdminReceiver类的子类。它是app 中处理与设备管理相关
的系统广播（system broadcast）的入口点。
public class AppPolicyRecelver extends DeviceAdminReceiver [
// Called when the app is about to be deactivated as a device
administrator.
eOverride
public void onDisabled(Context context, Intent intent) {
ou39tqestp oq quen Aeu nof gqueuexnbex xnof uo Burpuedep //
// app or vipe stored data e.g clear prefs
context -getSharedPreferences (context - getPackageliame () ,
Context ,MODE_PRIVATE) edit () clear () apply () ;
super , onDisabled (context, Intent) /
BOverride
public void onEnabled(Context context, Intent intent) (
super ,onEnabled (context, intent.) 
// once enabled enforce
AppPo1icyContro1ler contro11er = new AppPo1icyContro1ler ()
controller.enforceTimeToLock (context) :
294
---
## Page 313
第9章加密与在开发时使用设备管理策略
contro11er,shouldPromptToEnableDevlceEncrpytion (context) :
BOverride
public CharSequence onDisableRequested (Context context, Intent
Intent)(
// issue varning to the user before disable e.g. app prefs
// vi11 be viped
return context,getText (R.stzing.device_admin_disable_policy) 
3.在你的 Android manifest 文件中再定义一个receiver。
Creceiver
android:name=*yoUR_APP_PGK.AppPo1lcyReceIvex*
android:permissLon=*android,permission,BIND_DEVICE_ADMIN" >
cmeta=data
andro1d:name=*andlrold. app, devI.ce_adm.n*
andro.id:resource=*@xm1/adm.n_po1Lcy_encryption_and_1ock_
timeout" />
我们定义的这个receiver使AppPolicyReceiver能够接收禁用/请求禁用管理设
置的intent系统广播事件。你也应该注意到，在元数据中，在这里我们是通
过文件名 admin_policy_encryption_and_lock_timeout,引用策略 XML 文件的。
4.我们还需要一个设备策略控制器，我们用它和在app中添加的具体代码，处
理与DevicePolicyManager 之间的通信。我们定义的第一种方法是针对其他
app 组件（如activity）的，用以验证设备管理状态，并获取与设备管理相关
的 intent-
public class AppPolicyController (
public boolean isDeviceAdminActive (Context context)(
DevicePolicyManager devicePolicyManager
295
---
## Page 314
Android安全攻防实战
(DevicePolicyManager)  context
- getSystemService (Context .DEVICE_POLICY_SERVICE) 
ComponentName appPolicyReceiver = nev ComponentName (context,
AppPolicyReceiver, class) /
return devicePo1icyManager, isAdminActive (appPolicyReceiver) :
public Intent getEnableDeviceAdminIntent (Context context)(
ComponentName appPolicyReceiver = new ComponentName (context,