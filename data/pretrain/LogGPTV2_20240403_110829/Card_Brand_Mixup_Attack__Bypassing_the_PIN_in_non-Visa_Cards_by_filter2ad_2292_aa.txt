title:Card Brand Mixup Attack: Bypassing the PIN in non-Visa Cards by
Using Them for Visa Transactions
author:David A. Basin and
Ralf Sasse and
Jorge Toro-Pozo
Card Brand Mixup Attack: Bypassing the PIN in 
non-Visa Cards by Using Them for Visa Transactions
David Basin, Ralf Sasse, and Jorge Toro-Pozo, 
Department of Computer Science, ETH Zurich
https://www.usenix.org/conference/usenixsecurity21/presentation/basin
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Card Brand Mixup Attack: Bypassing the PIN in
non-Visa Cards by Using Them for Visa Transactions
David Basin, Ralf Sasse, and Jorge Toro-Pozo
Department of Computer Science
ETH Zurich
Abstract
Terminal
Acquirer
Payment Network
Card Issuer
Most EMV transactions require online authorization by the
card issuer. Namely, the merchant’s payment terminal sends
an authorization request to the card issuer over a payment
network, typically operated by the company that brands the
card such as Visa or Mastercard. In this paper we show that
it is possible to induce a mismatch between the card brand
and the payment network, from the terminal’s perspective.
The resulting card brand mixup attack has serious security
consequences. In particular, it enables criminals to use a vic-
tim’s Mastercard contactless card to pay for expensive goods
without knowing the card’s PIN. Concretely, the attacker fools
the terminal into believing that the card being used is a Visa
card and then applies the recent PIN bypass attack that we
reported on Visa. We have built an Android application and
successfully used it to carry out this attack for transactions
with both Mastercard debit and credit cards, including a trans-
action for over 400 USD with a Maestro debit card. Finally,
we extend our formal model of the EMV contactless protocol
to machine-check ﬁxes to the issues found.
1 Introduction
There are more than 3.3 billion Visa credit and debit cards
in circulation worldwide [23]. Under the Mastercard brand
(excluding Maestro and Cirrus products) there are over 2 bil-
lion cards [22]. These two companies, together with Europay,
are the founders of EMV, the de facto protocol standard for
in-store smartcard payments. Other companies like American
Express, JCB, Discover, and UnionPay have also joined the
EMV consortium.
EMV transactions for high amounts require online autho-
rization from the card issuer. For this, the payment terminal
sends an authorization request to the card issuer, carrying
transaction details and a cryptographic Message Authentica-
tion Code (MAC) computed by the card over these details.
Upon reception, the card issuer performs various checks, in-
cluding that the associated account has sufﬁcient funds and
Figure 1: Communication ﬂow for online transaction autho-
rization. Upper and lower arrows represent the authorization
request and response, respectively.
that the MAC is correct. While these checks offer cryptograph-
ically veriﬁable guarantees to cardholders and merchants, one
must understand the properties of the payment system as a
whole, including the process by which terminals and issuers
exchange requests and responses.
Figure 1 displays the communication ﬂow of the online
authorization process, involving four parties: (1) the payment
terminal; (2) the merchant’s acquirer, which is a bank or ﬁ-
nancial institution that processes card payments on behalf of
the merchant; (3) the payment network, which connects the
acquirer and the card issuer; and (4) the issuer itself. There are
several payment networks, such as the Visa or Mastercard net-
works, and the mechanism by which the acquirer chooses the
one which the authorization request is sent to is called routing.
Typically, routing is based on the payment card’s brand. For
example, if the card is Visa branded, then the authorization
request is routed to the Visa payment network.
The payment terminal can determine the card brand from
different data objects supplied by the card during the trans-
action. These objects include the Primary Account Number
(PAN) and the Application Identiﬁers (AID). From the PAN,
more commonly known as the card number, the card brand
can be inferred from the leading digits. For example, if the
PAN starts with 4 then it is a Visa card. From the AIDs, which
indicate the EMV applications that the card supports (e.g.,
Visa Electron or V Pay), the card brand can be inferred from
the shared preﬁx, called the Registered Application Provider
Identiﬁer, which is usually a 10-digit value (5 bytes).
In this paper we show that it is possible to deceive a termi-
USENIX Association
30th USENIX Security Symposium    179
nal, and by extension the acquirer, into accepting contactless
transactions with a PAN and an AID that indicate different
card brands. Concretely, we have identiﬁed a man-in-the-
middle attack that tricks the terminal into completing a Visa
transaction with a Mastercard card.
Our attack, which we call a card brand mixup, has catas-
trophic consequences. In particular, it allows criminals to use
a victim’s Mastercard card to pay for expensive goods without
entering a PIN. The attack effectively turns the card into a
Visa card and then applies our recent PIN bypass attack [6].
In other words, the PIN can be bypassed for Mastercard cards
too, which so far had been considered protected against unau-
thorized purchases for amounts that require the entry of the
card owner’s secret PIN.
This new attack abuses two fundamental shortcomings of
the EMV contactless protocol: (1) the lack of authentication
of the card brand to the terminal, and (2) an attacker can
build all necessary responses speciﬁed by the Visa protocol
from the ones obtained from a non-Visa card, including the
cryptographic proofs needed for the card issuer to authorize
the transaction.
We have built a proof-of-concept Android application and
successfully used it to bypass PIN veriﬁcation for transactions
with Mastercard credit and debit cards, including two Maestro
debit and two Mastercard credit cards, all issued by different
banks. One of these transactions was for over 400 USD.
We have extended our formal model of the EMV protocol,
ﬁrst presented in [6]. Concretely, we generalize its speciﬁca-
tion of the issuer and the terminal-issuer channel to model
communication between the terminal and the issuer, even
when they do not agree on the brand of the payment card
used. Our extended model, available at [3] and speciﬁed in
the Tamarin model checker [26, 28], is precise enough that
its analysis uncovers the attack described here. We have also
used our extended model to construct security proofs for two
sets of ﬁxes. The ﬁrst set is the one we proposed in [6], which
is speciﬁc to the Visa kernel. The second set of ﬁxes, ﬁrst
presented in this paper, prevents card brand mixups in general
and applies to all EMV kernels.
Contributions. First, by carefully analyzing the EMV pro-
tocol with a focus on the terminal-issuer interaction, we dis-
cover a novel attack that allows criminals to trick the terminal
into believing that the card being used is of a brand that it is
not. Surprisingly, this is possible even for transactions autho-
rized online by the card issuer, who clearly does know the
right card brand.
Second, we demonstrate that this card brand mixup is not
just a mere disagreement between the card issuer and the
terminal, but that it has serious consequences. In particular,
the PIN does not protect Mastercard cardholders from lost
or stolen cards being used in fraudulent purchases for large
amounts. Consequently, the consumer should not be liable
for fraudulent transactions in which the cardholder was pre-
sumably veriﬁed. This is known as the liability shift in the
banking industry.
Finally, we analyze ﬁxes that prevent both the card mixup
and the PIN bypass attack. Namely, we extend our previous
formal models and provide computer-checked security proofs
for these ﬁxes.
Organization.
In Section 2 we provide technical back-
ground on our previous PIN bypass on Visa cards, which
we leverage for our new attack, and the EMV contactless
protocol. We then describe our card brand mixup attack and
the resulting PIN bypass in Section 3. We also report on our
proof-of-concept implementation and the results of our exper-
iments. In Section 4 we analyze and verify countermeasures
that secure online-authorized transactions. In Section 5 we
elaborate on previous work that exposes and exploits ﬂaws
on the EMV standard and we draw conclusions in Section 6.
Ethics and Disclosure. No merchant, bank, or any other
entity was defrauded. To test our attack, we setup and used
our own SumUp terminal and merchant account. Note that,
although the merchant infrastructure we used was our own, it
is a fully realistic and functional one. We did not tamper with
the hardware or software in any way.
After a successful disclosure process with Mastercard, they
conﬁrmed that our attack is effective. Mastercard identiﬁed
all 9 transactions that were routed to their network when we
carried out our Mastercard-Visa mixup attack. Mastercard
has since implemented and rolled out defense mechanisms
on their network and, in collaboration with Mastercard, we
have conducted experiments where our attack failed with their
mechanisms in place. Further details are given in Section 4.4.
2 Background
We ﬁrst provide background on contactless payments and
common attacks against them. We brieﬂy recall our previ-
ous work [6], which we build upon. Afterwards, we provide
technical details on the EMV contactless transaction.
2.1 Relay Attacks and PIN Bypass for Visa
Despite the undeniably smooth experience of a payment with
the tap of a card, contactless payment technology has been
exposed to numerous security issues. Payment terminals com-
municate wirelessly with the cards, and so can attackers. In
particular, Near Field Communication (NFC), which is the
communication technology that contactless payments use, al-
lows any suitable NFC-enabled device to communicate with
a contactless card and engage in fraudulent transactions.
While the range of an NFC signal is normally just a few
centimeters, it can be extended to a much larger range by
180    30th USENIX Security Symposium
USENIX Association
WiFi
WiFi
NFC
NFC
Figure 2: A relay attack on contactless payment. Devices
from left to right: payment terminal, attacker’s ﬁrst mobile
device, attacker’s second mobile device, and victim’s card.
relay attacks [7, 8, 11, 19, 30]. A relay attacker uses two mo-
bile devices, connected wirelessly, to make the victim’s card
engage in a transaction with a distant payment terminal. See
Figure 2 for a graphical representation.
Relay attacks, however, do not appear lucrative for crimi-
nals because they are presumably feasible only for purchases
for low amounts (e.g., under 25 EUR in most European coun-
tries), due to the need for the card’s PIN for transactions with
higher amounts. However, in our previous work, we discov-
ered a man-in-the-middle attack that allows criminals not
only to perform relay attacks but also to bypass the PIN for
contactless transactions with Visa cards.1
At a technical level, this attack consists simply in setting the
Card Transaction Qualiﬁers (CTQ) to the value 0x0280. The
CTQ is a data object transmitted from the card to the terminal
and instructs the latter which Cardholder Veriﬁcation Method
(CVM) must be used for the transaction. The CTQ value
0x0280 tells the terminal that PIN veriﬁcation is not required
and that the cardholder has been veriﬁed on the consumer’s
device (see [17], pp. 69–70). The ﬂaw in the Visa protocol
that leads to this attack is the lack of authentication of the
CTQ data object.
This attack does not apply to the Mastercard protocol be-
cause, in contrast to the Visa protocol, the card’s (lack of) sup-
port for cardholder veriﬁcation on the consumer’s device is
cryptographically protected against modiﬁcation. A computer-
checked proof of this can be found at [4].
2.2 The EMV Contactless Protocol
EMV’s speciﬁcation for contactless transactions comprises
over 1,200 pages of documentation. In this section we sum-
marize this speciﬁcation. We split our summary into the four
overlapping phases of a contactless transaction and brieﬂy
indicate, where applicable, the underlying security shortcom-
ings that our attack exploits.
selection process, where the terminal issues a SELECT com-
mand and the card submits the Application Identiﬁers (AIDs)
for the supported applications (a.k.a. kernels or protocols).
Based on the AIDs received, the terminal activates a kernel
for the transaction, which is one of:
• Kernel 2 for Mastercard AIDs,
• Kernel 3 for Visa AIDs,
• Kernel 4 for American Express AIDs,
• Kernel 5 for JCB AIDs,
• Kernel 6 for Discover AIDs, and
• Kernel 7 for UnionPay AIDs.
The most relevant kernel for our work is Mastercard’s, which
we outline in Figure 3 and is speciﬁed in the 590-page docu-
ment [16].
2.2.2 Ofﬂine Data Authentication
After a kernel has been activated and announced to the card
via a second SELECT command, the card requests the Pro-
cessing Data Object List (PDOL), which indicates some of
the transaction-speciﬁc data objects needed by the card for
the protocol. These data objects include, but are not limited
to, the transaction amount, the terminal’s country code, and a
terminal-generated random number.
Using the GET PROCESSING OPTIONS command, the
terminal supplies the requested PDOL data to the card. The
latter responds with the Application Interchange Proﬁle (AIP)
and the Application File Locator (AFL). The AIP informs
the terminal of the card’s capabilities and the AFL is a data
object that the terminal uses to request the card’s static data
(also known as records) using the READ RECORD command.
These records include:
• Primary Data such as the card number (called the Pri-
mary Account Number), the card’s expiration date, and
the list of the supported CVMs;
• PKI Data such as the card’s Public Key (PK) certiﬁcate,
the card issuer’s PK certiﬁcate, and the PK index of the
Certiﬁcate Authority (CA);
• Processing and Risk Data such as the ﬁrst and sec-
ond Card Risk Management Data Object Lists (CDOL1
and CDOL2, respectively), which typically include the
PDOL and further transaction-speciﬁc data.
2.2.1 Application Selection
A transaction is performed using one of the six EMV contact-
less protocols. Every transaction starts with the application
1Demo at https://youtu.be/JyUsMLxCCt8.
At this point, the terminal cryptographically authenticates
the card. This process is called Ofﬂine Data Authentication