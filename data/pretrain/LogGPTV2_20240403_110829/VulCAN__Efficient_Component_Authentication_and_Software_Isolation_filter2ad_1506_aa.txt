# VulCAN: Efficient Component Authentication and Software Isolation for Automotive Control Networks

**Authors:**
- Jo Van Bulck, imec-DistriNet, KU Leuven, Email: [PI:EMAIL]
- Jan Tobias Mühlberg, imec-DistriNet, KU Leuven, Email: [PI:EMAIL]
- Frank Piessens, imec-DistriNet, KU Leuven, Email: [PI:EMAIL]

## Abstract
Vehicular communication networks have become increasingly vulnerable to attacks, posing significant risks to passenger safety. This has led to the recall of millions of vehicles and legal actions against car manufacturers. Although recent standardization efforts aim to enhance security, practical solutions are not yet widely implemented in current vehicles. This paper introduces VulCAN, a comprehensive design for efficient vehicle message authentication, software component attestation, and isolation using lightweight trusted computing technology. Our approach not only protects against network-based attackers but also against more sophisticated adversaries capable of executing arbitrary code on participating electronic control units (ECUs). We demonstrate the feasibility and practicality of VulCAN by implementing and evaluating two industry-standard-compliant message authentication protocols on top of Sancus, an open-source embedded protected module architecture. Our results show that strong, hardware-enforced security guarantees can be achieved with a minimal trusted computing base (TCB) without compromising real-time performance under normal conditions.

## CCS Concepts
- **Security and privacy:** Embedded systems security, Distributed systems security, Key management, Security protocols, Domain-specific security and privacy architectures

## Keywords
Automotive security, CAN, Protected module, Trusted computing

## ACM Reference Format
Jo Van Bulck, Jan Tobias Mühlberg, and Frank Piessens. 2017. VulCAN: Efficient Component Authentication and Software Isolation for Automotive Control Networks. In Proceedings of the 33rd Annual Computer Security Applications Conference (ACSAC’17). ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3134600.3134623

## 1 Introduction
Modern road vehicles rely on a growing number of interconnected Electronic Control Units (ECUs) that collectively manage the vehicle's behavior and safety-critical functions. These ECUs form a distributed system, exchanging messages to interpret sensor data and trigger actuators such as brakes, airbags, and steering gear. However, these interactions are vulnerable to adversarial manipulation due to the lack of message authenticity guarantees in automotive communication standards, particularly the widely used Controller Area Network (CAN). The advent of networked infotainment systems has further exposed safety-critical components to remote attacks, threatening passenger and road user safety. Recent years have seen a steady stream of automotive attack demonstrations, highlighting the need for enhanced security measures. Emerging industry standards now include authentication and software security, but practical implementations that meet stringent real-time constraints are still lacking. Additionally, existing proposals often fail to address threats from adversaries who can execute arbitrary code on targeted ECUs, compromising key material or messages before or after authentication.

This paper presents VulCAN, an efficient approach to implement secure distributed automotive control software on lightweight trusted computing platforms. Our approach leverages trusted hardware and a minimal TCB, suitable for thorough validation and formal verification. Specifically, we use hardware-enforced memory protection to isolate critical software components on ECUs and harden them against code-abuse attacks. We also demonstrate how to securely interface these "vulcanized" components with peripheral I/O devices and dynamically attest their integrity across the untrusted vehicle network. Finally, we utilize hardware-level cryptographic primitives to efficiently implement message authentication for the CAN bus, ensuring real-time performance under benign conditions.

At the hardware level, our VulCAN prototype is based on Sancus, an open-source protected module architecture that extends an embedded openMSP430 processor. At the application level, we implement and evaluate two recently published AUTOSAR-compliant CAN authentication protocols, comparing their performance, TCB size, and security. We provide a detailed description of our FPGA-based setup and explain how to securely shield an off-the-shelf Seat instrument cluster via a CAN security gateway. To encourage future research, we make our hardware designs, a simulator, and the deployed software stack publicly available at https://distrinet.cs.kuleuven.be/software/vulcan. Our contributions include:

- Exploring the use of embedded trusted computing technology in automotive control networks to improve software security and reduce message authentication overhead.
- Presenting the first comparison of CAN authentication protocols in terms of security guarantees, performance, and TCB size, including the discovery of a novel replay attack against vatiCAN’s nonce renewal scheme.
- Discussing practical implications for vehicle maintenance and key management, and introducing a security gateway approach to shield unmodified legacy devices on the CAN bus.
- Demonstrating our security guarantees through an extended application scenario, which can serve as a basis for future automotive security research.

## 2 Background

### 2.1 Controller Area Network Authentication
The CAN bus is the most common broadcast communication medium in modern automobiles. A CAN message consists of an 11-bit ID, an optional 18-bit extended identifier, and up to 8 bytes of data payload. Dedicated transceiver hardware chips handle message acknowledgment and bus arbitration. CAN requires a fixed data transmission rate and allows recessive bits (one) to be overwritten by dominant bits (zero) during transmission. Message acknowledgment is implemented by overwriting the ACK bit at the end of the data frame. Bus arbitration is managed by listening to the bus while sending the message ID, backing off if an ID bit is overwritten. This ensures that messages with lower IDs have higher priorities. Each CAN frame includes a 16-bit Cyclic Redundancy Check (CRC) field to detect transmission errors.

Originally developed in 1983, CAN does not provide message authentication, making it susceptible to spoofing attacks. In response, the AUTOSAR standardization body published guidelines for backward-compatible message authentication. To date, two AUTOSAR-compliant CAN authentication protocols have been proposed: LeiA and vatiCAN. Both require a symmetric pre-shared key to compute a Message Authentication Code (MAC) over the message ID, payload, and a monotonically incrementing nonce to prevent replay attacks. Due to CAN payload limitations, 64-bit MACs are sent as separate messages with different IDs following the authenticated message.

### 2.2 Embedded Protected Module Architectures
VulCAN provides authenticated CAN components, ensuring the integrity and authenticity of critical messages both in transit and during processing by isolated software components on ECUs. It builds on the trusted computing features of Protected Module Architectures (PMAs), which support the secure and isolated execution of critical software modules with a minimal TCB. Hardware implementations of PMAs, such as Intel’s SGX and ARM’s TrustZone, as well as lightweight prototypes like Sancus, offer strong confidentiality and integrity guarantees for internal state, independent of other software on the platform.

Sancus is a fully open-source embedded PMA and hardware-only TCB that extends the memory access logic and instruction set of a low-cost, low-power openMSP430 microcontroller. It supports multiple mutually distrusting software components, each consisting of two contiguous memory sections in a shared single-address space. A hardware-level program counter-based access control mechanism ensures that a PM’s private data section can only be accessed by its corresponding code section, entered through a single entry point. Sancus also provides secure driver PMs with exclusive ownership over Memory-Mapped I/O (MMIO) peripheral devices.

Sancus offers hardware-level authenticated encryption, key derivation, and key storage by extending the CPU with a cryptographic core. It employs a three-level key hierarchy, with a unique node master key at the root, vendor keys derived from the node master key, and module keys derived from vendor keys. The security of Sancus’ attestation guarantees is based on the unforgeability of module identities. Upon enabling PM isolation, a Sancus-enabled processor computes the corresponding module key, storing it in a hardware-protected area for exclusive use by the PM. The vendor in possession of the vendor key can independently compute the module key, allowing for secure communication and attestation.

## 3 VulCANized CAN Components
In this section, we present our approach to secure, authenticated execution of distributed automotive applications running on multiple ECUs and communicating via an untrusted vehicular network. Our approach compartmentalizes the application into a small group of trustworthy authenticated software components, i.e., isolated PMs. Unlike previous work, VulCAN supports multiple mutually distrusting components on a single ECU, ensuring that code executing in one component cannot adversely impact other software on the same or another processor in the CAN network.

We depict an exemplary CAN network where an authenticated trusted path is established between a software component sensing braking pedal and wheel rotations, an Anti-lock Braking System (ABS) component, and a brake hydraulic actuator component. VulCAN guarantees that any braking action by the actuator can be traced back to the authenticated software components that originally sensed the driver’s braking pedal and wheel speed.

In the following, we introduce our attacker model, precisely formulate the requirements for practical and trustworthy vehicle component security, and elaborate on how to achieve these goals using VulCAN.