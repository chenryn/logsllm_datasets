title:VulCAN: Efficient Component Authentication and Software Isolation
for Automotive Control Networks
author:Jo Van Bulck and
Jan Tobias M&quot;uhlberg and
Frank Piessens
VulCAN: Efficient Component Authentication and Software
Isolation for Automotive Control Networks
Jo Van Bulck
imec-DistriNet, KU Leuven
PI:EMAIL
Jan Tobias Mühlberg
imec-DistriNet, KU Leuven
PI:EMAIL
Frank Piessens
imec-DistriNet, KU Leuven
PI:EMAIL
ABSTRACT
Vehicular communication networks have been subject to a growing
number of attacks that put the safety of passengers at risk. This
resulted in millions of vehicles being recalled and lawsuits against
car manufacturers. While recent standardization efforts address
security, no practical solutions are implemented in current cars.
This paper presents VulCAN, a generic design for efficient ve-
hicle message authentication, plus software component attesta-
tion and isolation using lightweight trusted computing technology.
Specifically, we advance the state-of-the-art by not only protecting
against network attackers, but also against substantially stronger
adversaries capable of arbitrary code execution on participating
electronic control units. We demonstrate the feasibility and practi-
cality of VulCAN by implementing and evaluating two previously
proposed, industry standard-compliant message authentication pro-
tocols on top of Sancus, an open-source embedded protected mod-
ule architecture. Our results are promising, showing that strong,
hardware-enforced security guarantees can be met with a minimal
trusted computing base without violating real-time deadlines under
benign conditions.
CCS CONCEPTS
• Security and privacy → Embedded systems security; Dis-
tributed systems security; Key management; Security protocols;
Domain-specific security and privacy architectures;
KEYWORDS
Automotive security, CAN, Protected module, Trusted computing
ACM Reference Format:
Jo Van Bulck, Jan Tobias Mühlberg, and Frank Piessens. 2017. VulCAN:
Efficient Component Authentication and Software Isolation for Automo-
tive Control Networks. In Proceedings of 33th Annual Computer Security
Applications Conference (ACSAC’17). ACM, New York, NY, USA, 13 pages.
https://doi.org/10.1145/3134600.3134623
1 INTRODUCTION
Today’s road vehicles are controlled by a growing number of inter-
connected Electronic Control Units (ECUs) that jointly operate the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC’17, December 2017, San Juan, Puerto Rico, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134623
car’s behavior and safety-critical functionality. Abstractly speaking,
these ECUs exchange messages and form an extensive distributed
system that interprets sensor readings and reacts to important
events by triggering the relevant actuators, e.g., brakes, airbags,
or steering gear. In practice, however, these software interactions
are susceptible to adversarial manipulations, as automotive com-
munication standards, including the widely used Controller Area
Network (CAN), typically provide no message authenticity guaran-
tees at all. This lack of security becomes untenable with the advent
of networked infotainment systems that expose safety-critical com-
ponents to remote attackers, threatening the safety of passengers
and other road users alike. The past years have indeed seen a steady
stream of automotive attack demonstrations [8, 10, 19, 22, 27, 28, 50],
whose risks have been acknowledged by emerging industry stan-
dards [3, 40] that encompass authentication and software security.
Recent research [34, 38] studies CAN authentication protocols
compliant to these standards. Importantly, however, these protocols
are not deployed in existing vehicles, and experimental implemen-
tations lack the performance needed to satisfy stringent automotive
real-time constraints. Moreover, existing proposals only address
software security and key confidentiality with respect to adver-
saries that do not control code execution on targeted ECUs. Yet, it
has been shown repeatedly that attackers are capable of influencing
code execution or even running their own code on individual ECUs
to compromise key material or messages before or after authentica-
tion [22, 28]. As such, we consider threat models that assume only
network communication can be interfered with rather naive.
This paper introduces VulCAN,1 an efficient approach to im-
plement secure distributed automotive control software on light-
weight trusted computing platforms. Our approach is distinguished
from previous work by relying on trusted hardware and a mini-
mal software Trusted Computing Base (TCB), suitable for thorough
validation and formal verification. Specifically, we rely on hardware-
enforced memory protection primitives to isolate critical software
components on participating ECUs, and to harden them against
code-abuse attacks such as return-oriented programming [9]. We
furthermore show how to securely interface such “vulcanized” soft-
ware components with peripheral I/O devices, and dynamically
attest their integrity across the untrusted vehicle network. Finally,
we leverage the hardware-level cryptographic primitives commonly
found in trusted computing architectures to efficiently implement
message authentication for the CAN bus, which is an essential
condition to preserve real-time deadlines when not under attack.
At the hardware level, our VulCAN prototype is based on San-
cus [33], an open-source protected module architecture that ex-
tends an embedded openMSP430 processor. At the application level,
1 Vulcan, the ancient Roman deity of fire and smithery, was entrusted with the forgery
of weapons and armor for gods and heroes.
ACSAC’17, December 2017, San Juan, Puerto Rico, USA
Jo Van Bulck, Jan Tobias Mühlberg, and Frank Piessens
we implement and evaluate two recently published AUTOSAR-
compliant CAN authentication protocols [34, 38], which we com-
pare in terms of performance overhead, TCB size, and offered se-
curity. We provide a detailed description of our FPGA-based setup,
and explain how to securely shield an off-the-shelf Seat instru-
ment cluster via a CAN security gateway. To encourage future
research on the evaluation of security architectures and protocols
for automotive control networks, we make our hardware designs,
a simulator, and the deployed software stack publicly available at
https://distrinet.cs.kuleuven.be/software/vulcan. In summary, we
make the following contributions:
• We explore the use of embedded trusted computing technol-
ogy in automotive control networks to improve on software
security, and to reduce message authentication overhead.
• To our knowledge, we present the first comparison of CAN
authentication protocols in terms of security guarantees,
performance results and TCB size. As part of our analysis,
we discovered a novel and practical replay attack against
vatiCAN’s [34] frequent nonce renewal scheme.
• We discuss practical implications of our approach with re-
spect to vehicle maintenance and key management, and in-
troduce a security gateway approach to transparently shield
unmodified legacy devices on the CAN bus.
• We present an extended application scenario that demon-
strates our security guarantees, and may serve as a basis for
future automotive security research in general.
2 BACKGROUND
2.1 Controller Area Network Authentication
The CAN bus is the most commonly used broadcast communication
medium in modern automobiles. From an application’s perspective,
a CAN message consists of an 11-bit ID, followed by an optional 18-
bit extended identifier, and up to 8 bytes of data payload (see Fig. 1).
Dedicated transceiver hardware chips implement a protocol for mes-
sage acknowledgement and bus arbitration for sending/receiving
data frames. Specifically, CAN requires a fixed data transmission
rate, and allows recessive bits (one) to be overwritten by dominant
bits (zero) during transmission. Message acknowledgement can
thus simply be implemented by overwriting the ACK bit at the end
of the data frame in real-time. Likewise, to solve bus arbitration,
CAN transceivers are required to continue listening on the bus
while sending the message ID at the beginning of the data frame,
and to back off when one of their ID bits has been overwritten.
This scheme ensures that messages with lower IDs effectively have
higher priorities. Finally, each CAN frame features a 16-bit Cyclic
Redundancy Check (CRC) field to detect transmission errors.
Figure 1: Extended data frame standardized by CAN 2.0B.
CAN was originally developed in 1983, when remote attackers
were of no concern, and does not provide any form of message
authentication. Any ECU connected to the network can spoof mes-
sages with arbitrary sender ID and payload, which forms the basis
of many attacks [10, 22, 27, 28]. As a response, the AUTOSAR [3]
standardization body published industry guidelines for backwards-
compatible message authentication in vehicular networks. To the
best of our knowledge, only two AUTOSAR-compliant CAN au-
thentication protocols have been proposed to date: LeiA [38] and
vatiCAN [34], where only the latter was actually implemented and
evaluated in terms of performance. Both protocols require a sym-
metric pre-shared cryptographic key at sender and receiver ECUs to
compute a Message Authentication Code (MAC) over the message
ID, payload, and a monotonically incrementing nonce to protect
against replay attacks. To deal with CAN payload length limitations
and to ensure backwards compatibility, 64-bit MACs are sent as a
separate message with a different ID, following the actual message
to be authenticated.
2.2 Embedded Protected Module Architectures
Security Primitives. The VulCAN approach provides a notion
of authenticated CAN components, which entails integrity and
authenticity of critical messages, both while in transit over the
untrusted vehicular network, as well as during processing by iso-
lated software components on the participating ECUs. For this,
VulCAN builds on the trusted computing features provided by
Protected Module Architectures (PMAs) [24, 42], a new brand of
security architectures that support the secure and isolated execu-
tion of critical software modules with a minimal TCB. Hardware
implementations of PMAs for higher-end systems, notably Intel’s
Software Guard Extensions (SGX) [25] and ARM’s TrustZone [2],
as well as several lightweight prototypes for embedded application
domains [6, 11, 21, 31] have been presented. These proposals have
in common that they provide Protected Modules (PMs) with strong
confidentiality and integrity guarantees regarding their internal
state, without having to trust any other software executing on the
platform, including traditionally privileged operating system code.
Modern PMAs offer a number of security primitives to (i) iso-
late PM software protection domains, (ii) attest the integrity of an
isolated PM, and (iii) facilitate key management for secure com-
munication. In the following, we elaborate on these features as
provided by the Sancus architecture, but it should be noted that the
VulCAN solution can in principle be implemented on any platform
that provides the above security primitives.
Sancus. Sancus [31, 33] is a fully open-source2 embedded PMA
and hardware-only TCB that extends the memory access logic and
instruction set of a low-cost, low-power openMSP430 [13] micro-
controller. Sancus supports multiple mutually distrusting software
components that each consist of two contiguous memory sections in
a shared single-address-space. A hardware-level program counter-
based access control mechanism [43] enforces that a PM’s private
data section can only be accessed by its corresponding code section,
which can only be entered through a single entry point. Sancus’
generic memory isolation primitive can furthermore be used to
provide secure driver PMs with exclusive ownership over Memory-
Mapped I/O (MMIO) peripheral devices that are accessed through
2https://distrinet.cs.kuleuven.be/software/sancus/
VulCAN: Vehicular Component Authentication and Software Isolation
ACSAC’17, December 2017, San Juan, Puerto Rico, USA
Figure 2: An example CAN network scenario to illustrate basic attacks and the security guarantees offered by our approach.
the address space. Since Sancus modules only feature a single con-
tiguous private data section, however, secure I/O on Sancus plat-
forms requires the use of small driver modules entirely written in
assembly code, using only registers for data storage [32].
Sancus also provides hardware-level authenticated encryption,
key derivation, and key storage functionality by extending the CPU
with a cryptographic core. Specifically, to implement secure com-
munication and local/remote attestation, Sancus employs a three
level key hierarchy. At the root of this hierarchy, every Sancus-
enabled CPU contains a unique hardware-level node master key
only known by the infrastructure provider that owns the embed-
ded computing node. Infrastructure providers furthermore assign
unique identifiers to independent software vendors who are to in-
stall a PM on a particular node. These vendor identifiers are used in
the second level of the key hierarchy to derive vendor keys from the
node master key. Finally, module keys are derived from a vendor
key using the module identity, which is composed of the contents
of a PM’s code section and the load addresses of both its sections.
The security of Sancus’ attestation guarantees is based on the un-
forgeability of these module identities. Upon enabling PM isolation,
after the module has been loaded by untrusted system software,
a Sancus-enabled processor computes the corresponding module
key, and stores it in a hardware-level protected storage area for
exclusive use by the PM. The benign software vendor in posses-
sion of the vendor key can compute the module key independently.
The use of a certain module key (e.g., by creating a MAC over a
fresh challenge) thus suffices to attest that a PM with a specific
code section has been loaded on a specific device, with isolation
enabled and without having been tampered with. The symmetric
module key can now be used to establish a confidentiality and
integrity-preserving communication channel between a remote
software vendor and its newly deployed PM. For this, PMs can
benefit from Sancus’ efficient cryptographic hardware primitives
by means of dedicated processor instructions for authenticated en-
cryption/decryption using either the module key, or an in-memory
key provided by software. Likewise, Sancus supports secure linking
of two PMs residing on the same computing platform by means of
novel instructions for caller/callee authentication.
Sancus finally comes with a dedicated C compiler that automates
the process of PM creation, and hides low-level concerns such as
secure linking, private call stack switching, and multiplexing user-
defined entry functions through the single physical entry point.
3 VULCANIZED CAN COMPONENTS
In this section, we present our approach to secure, authenticated ex-
ecution of distributed automotive applications that run on multiple
ECUs and communicate via an untrusted vehicular network. Our
approach compartmentalizes such an application into a small group
of trustworthy authenticated software components, i.e., isolated PMs.
In contrast to previous work, VulCAN supports multiple mutually
distrusting components on a single ECU, such that – apart from clas-
sical denial-of-service attacks – code executing in one component
can never be adversely impacted by any other software executing
on the same or another processor in the CAN network. We de-
pict an exemplary CAN network in Fig. 2, where an authenticated
trusted path is set up between a software component that senses
a braking pedal and wheel rotations, over an Anti-lock Braking
System (ABS) component, all the way to a brake hydraulic actuator
component. In short, VulCAN guarantees that any braking action
by the actuator component can be traced back to the authenticated
software components that originally sensed the driver’s braking
pedal and the wheel speed.
In the following, we first introduce our attacker model, and
precisely formulate the requirements for practical and trustworthy
vehicle component security. Finally, we elaborate on how to achieve