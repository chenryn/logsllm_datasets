scheme).
(G(¢),
Deﬁnition
Probabilis-
tic
Sign(¢)(¢),
Verify(¢)(¢; ¢)), where G is the key generation algo-
rithm, Sign is the signature algorithm, and Verify the ver-
iﬁcation algorithm, constitute a digital signature scheme
for a family (indexed by the public key P K) of mes-
sage spaces M(¢) if the following two hold:
Correctness. If a message m is in the message space for a
given public key P K, and S K is the corresponding secret
key, then the output of SignS K(m) will always be accepted
by the veriﬁcation algorithm VerifyP K. More formally, for
all values m and k:
Pr[(P K; S K) ˆ G(1k); (cid:190) ˆ SignS K(m) :
m ˆ MP K ^ :VerifyP K(m; (cid:190))] = 0:
Security. Even if an adversary has oracle access to the
signing algorithm that provides signatures on messages of
the adversary’s choice, the adversary cannot create a valid
signature on a message not explicitly queried. More for-
mally, for all families of probabilistic polynomial-time or-
acle Turing machines fA(¢)
k g, there exists a negligible func-
tion1 ”(k) such that
Pr[(P K; S K) ˆ G(1k); (Q; m; (cid:190)) ˆ ASignSK (¢)
(1k) :
VerifyP K(m; (cid:190)) = 1 ^ :(9(cid:190)0 j (m; (cid:190)0) 2 Q)] = ”(k):
k
For completeness, we give a standard deﬁnition of a fam-
ily of collision-resistant hash functions.
1 A function ” : N ! R is negligible if for every positive polynomial
p(¢) and for sufﬁciently large k, ”(k)  k + 1. In more detail, the encoder:
q ! Fn
q , where
1. takes as input the parameters n and k, and k +1 points
(i; yi), i 2 Fq, yi 2 Fq, 1 • i • k + 1,
2. ﬁnds a unique univariate polynomial p 2 Fq[x] over
elements of Fq and of degree at most k, such that
p(i) = yi, 1 • i • k + 1, and
3. outputs points (i; p(i)), for 1 • i • n. The ratio
k+1
n  0 be a parameter that con-
trols the performance of the decoder. The decoder takes as
input parameters n and k, the number of errors e that may
occur, and n points (xi; yi), 1 • i • n, and list-decodes,
i.e., it outputs a list of all univariate polynomials p 2 Fq[x]
of degree at most k such that yi 6= p(xi) for less than e val-
ues of i, 1 • i • n.
For a [n; k + 1]q Reed-Solomon code, we use a decoder
that runs in polynomial time and is due to Guruswami and
Sudan [13, 14]. We refer to this decoder as GS-Decoder.
Theorem 2.1 (Guruswami-Sudan). Consider a [n; k + 1]q
Reed-Solomon code. For any † > 0, given n points with
e = n ¡ p(1 + †)kn errors, GS-Decoder outputs a list
of size O(†¡1pn=k) in O(n2†¡5 log2 q logO(1) log q) time,
performing O(n2†¡5 log q) ﬁeld operations.
We view † as a parameter of the GS-Decoder, † > 0,
and use GSDecode†(n; k; e; f(xi; yi)j1 • i • ng) to de-
note that GS-Decoder runs with parameter † having as in-
put parameters the integers n, k, e and the points (xi; yi),
1 • i • n.
In practice, codes with constant expansion are used,
where k = ‰n for some constant ‰  0 and ‰  0 and ‰ < 1, polyno-
mial reconstruction on input ‰n, t, and n points in Fq £ Fq
can be solved, in ~O(n2) time, provided t ‚ p(1 + †)‰n,
where ~O(n2) ﬁeld operations are performed and the out-
put list has O(1) size.
3. Network Model and Authentication Frame-
work
A sender transmits a data stream, consisting of n pack-
ets marked with a group identiﬁcation tag2 (GID) to a re-
ceiver over an underlying “best-effort” network. No guaran-
tees about the delivery of the packets exist in general. Fur-
thermore, the network is an adversary of great, yet not un-
limited, power. In our model, packets may be adversarially
lost, altered, delayed, or injected. However, this adversary
is not given complete freedom — if it were, then no mes-
sages would ever get delivered, and so our task would be
hopeless.
3.1. The (ﬁ; ﬂ)-Network Model
We model the network as an adversarial entity, i.e., an
entity that can simultaneously inﬂict any possible type of
attack to the transmitted data stream. The repertoire of at-
tacks consists of packet losses, injections, alterations and
rearrangements. These modiﬁcations of the data stream are
adversarially chosen so that the adversary can cause the loss
of any selected packets. The ability to tolerate packet losses
has been widely considered an important property of multi-
cast authentication schemes [12, 19, 21, 22, 27, 28]. How-
ever, only a few previous schemes [21, 28] tolerate adver-
sarial losses, i.e., the capability by the adversary to choose
which packets are dropped and which survive.
Also, the adversary can inject packets of random or ma-
licious structure into the stream. This type of network fail-
ure has not been studied as widely in the context of mul-
ticast authentication. In contrast, we develop robust tech-
niques for dealing with it.
Finally the adversary can arbitrarily modify, delay or re-
arrange packets. Note that changing a packet corresponds to
destroying (losing) it and injecting a new packet.
An adversarial network modelled with the above capa-
bilities in terms of how the adversary is acting is what we
call a fully adversarial network.
Deﬁnition 3.1 (Fully adversarial network). A fully adver-
sarial network is a network that is used for the transmission
of a data stream and is controlled by an adversary. In par-
ticular, the adversary can:
† cause packets of her choice to be lost;
2 Conventionally and without loss of generality, we consider data
streams consisting of n packets, that is, at the sender, the data for
transmission is arranged in groups of size n. The GID adds no new
assumption about the transmitted stream. It corresponds to a means
for the packets to be grouped together, which in practice can be pro-
vided by any network-layer transmission protocol in use. In our frame-
work, the GID is used as an abstract quantity of constant size; in prac-
tice, it is a string of some small constant size, e.g., the size of a hash
value (20 bytes for SHA-1).
† inject packets (either random ones or with a speciﬁc
malicious structure); and
† arbitrarily alter, delay or rearrange packets.
It is realistic to assume that even if an adversary con-
trols part of the network, there are still some honest routers
and at least a fraction of the data packets goes through them.
Thus, we expect some reliability from the network; namely,
the network will faithfully deliver at least a constant frac-
tion, ﬁ, of all the packets of a given stream. This assump-
tion is also justiﬁed by the fact that if fewer than a con-
stant fraction of the packets survive, then it is unlikely that
meaningful information can be extracted from the surviv-
ing packets. Also, in modelling the ability of the adversary
to maliciously inject invalid packets, we take the follow-
ing into consideration: if the adversary injects packets at
too high a rate, this will result in a denial-of-service attack.
In this case, the receiver’s primary concern is unlikely to be
authentication. Thus, we assume that authentication is use-
ful when the stream is expanded by no more than a constant
factor ﬂ through adversarial packet injections.
Our two assumptions about the power of the adversary
to modify a stream of n packets transmitted by the sender
are expressed by two parameters of the adversarial network:
the survival rate ﬁ and the ﬂood rate ﬂ. In this paper, both
rates are considered to be constants.
Deﬁnition 3.2 (Network parameters). Consider a net-
work through which a stream of n packets is transmitted
by the sender.
† The survival rate ﬁ, 0 < ﬁ • 1, is the minimum frac-
tion of the packets that are guaranteed to reach the re-
ceiver unmodiﬁed. I.e., at least ﬁn packets in the re-
ceived stream are valid.
† The ﬂood rate ﬂ, ﬂ ‚ 1, is the maximum factor by
which the size of the received stream may exceed the
size of the transmitted stream. I.e., at most ﬂn pack-
ets are in the received stream.
A network with the above characteristics in terms of ad-
versarial behavior and reliability is what we call an (ﬁ; ﬂ)-
network and is the basis for our multicast authentication
framework.
Deﬁnition 3.3 ((ﬁ; ﬂ)-network). An (ﬁ; ﬂ)-network is a
fully adversarial network with survival rate ﬁ and ﬂood
rate ﬂ.
3.2. Authentication Framework
We describe a new multicast authentication framework
that is based on the (ﬁ; ﬂ)-network model. Our deﬁnition
of a multicast authentication scheme essentially mimics the
classical deﬁnition of security for signatures [11]. (This is
not surprising since in [1] it is shown that the two prob-
lems are equivalent.) A signature scheme consists of key
generation, signature, and veriﬁcation algorithms (see Def-
inition 2.1). Similarly, we have key generation, authentica-
tion, and decoding algorithms, speciﬁed below.
Key Generation: The key generation algorithm KeyGen
is a probabilistic polynomial-time algorithm that takes as
input the security parameter 1k, and outputs the key pair
(P K; S K). We write (P K; S K) ˆ KeyGen(1k).
We assume that the sender knows both the public key
P K and the secret key S K and that the receiver knows the
public key P K. The following two algorithms, authentica-
tor Auth and decoder Decode, are executed by the sender
and the receiver respectively. The sender runs Auth to pro-
cess data packets and create the authenticated packets. The
receiver runs Decode to decode the received packets and
recognize the valid ones.
Authenticator: The authenticator algorithm Auth takes as
input:
† (S K; P K): the secret key and the public key.
† GID: the group identiﬁcation tag of the data stream.
† n: the number of packets that need to be authenticated.
† ﬁ, ﬂ: the survival and ﬂood rates (at least ﬁn packets
are valid and at most ﬂn packets claim to belong to a
given GID).
† DP = fp1; : : : ; png: the data packets that need to be
authenticated.
The output of the authenticator algorithm is the set of au-
thenticated packets AP = fa1; : : : ; ang. We write: AP ˆ
Auth(S K; P K; GID; n; ﬁ; ﬂ; DP ).
Decoder: The decoder algorithm Decode takes as input:
† P K: the public key
† GID: the group identiﬁcation tag.
† n: the number of the original data packets.
† ﬁ, ﬂ: the survival and ﬂood rates.
† RP = fr1; : : : ; rmg: the received packets.
The decoder either rejects the input (when less than ﬁn
of the received packets are valid, or more than (ﬂ ¡ ﬁ)n
packets are injected by the adversary), or produces the out-
ng. Some of these packets
put packets OP = fp0
may be empty — an empty output packet is denoted by
?, and corresponds to the event that the decoder did not
receive the corresponding authenticated packet. We write:
fOP ; rejectg ˆ Decode(P K; GID; n; ﬁ; ﬂ; RP ).
1; : : : ; p0
A signature scheme has two requirements: correctness
and security. We have similar requirements for a multicast
authentication scheme. A multicast authentication scheme
is (ﬁ; ﬂ)-correct if, whenever at least ﬁn correct authenti-
cated packets are received among ﬂn total packets, all and
only the valid received packets will be decoded correctly,
i.e., the corresponding data packets will be among the out-
put packets. A multicast authentication scheme is secure if,
even if the adversary is allowed to query the authenticator
on any number of chosen inputs, the adversary cannot make
the decoder output a non-authenticated set of packets.
Deﬁnition 3.4 (Multicast Authentication Scheme). Prob-
abilistic polynomial-time algorithms
(KeyGen, Auth,
Decode) constitute an (ﬁ; ﬂ)-correct and secure multicast
authentication scheme if no probabilistic polynomial-time
adversary A can win non-negligibly often in the follow-
ing game:
1. A key pair is generated:
(P K; S K) ˆ KeyGen(1k):
2. The adversary A is given:
† The public key P K as input.
† Oracle access to the authenticator,
i.e.,
(GIDi; ni; ﬁi; ﬂi; DP i)
for
1 • i • poly(k), where poly(¢) is a poly-
the adversary can specify the val-
nomial,
ues
obtain
AP i ˆ Auth(S K; P K; GIDi; ni; ﬁi; ﬂi; DP i).
However,
issue more
than one query with the same group iden-
tiﬁcation tag. That is to say, for all i
6= j,
GIDi 6= GIDj.
the adversary cannot
and
3. At the end, A outputs a group identiﬁcation tag, GID,
the values n, ﬁ and ﬂ, and a set of packets, RP.
The adversary wins the game if one of the following viola-
tions occurs:
Violation of the correctness property: The adversary did
managed to construct RP in such a way that even
though it contains ﬁini packets of some authenti-
cated packet set AP i
for group identiﬁcation tag
GIDi = GID, the decoder still failed at identify-
ing all the correct packets. Namely, the adversary wins
if all of the following hold:
† For some i, the adversary’s query i contained