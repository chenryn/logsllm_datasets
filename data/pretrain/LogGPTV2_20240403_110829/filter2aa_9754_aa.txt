# SSRF
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**描述**
很多 web 应用都提供了从其他的服务器上获取数据的功能.使用用户指定的 URL,web 应用可以获取图片,下载文件,读取文件内容等.这个功能如果被恶意使用,可以利用存在缺陷的 web 应用作为代理攻击远程和本地的服务器.这种形式的攻击称为服务端请求伪造攻击(Server-side Request Forgery).
一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。
**相关文章**
- [浅析 SSRF 原理及利用方式](https://www.anquanke.com/post/id/145519)
- [Bypassing SSRF Protection](https://medium.com/@vickieli/bypassing-ssrf-protection-e111ae70727b)
- [Web漏洞挖掘指南 -SSRF服务器端请求伪造](https://mp.weixin.qq.com/s/JptsaTEB-OCWoic68uKTvw)
- [巧用对象存储回源绕过SSRF限制](https://mp.weixin.qq.com/s/BB34N50q2aWrVgu5LDcj6g)
- [SSRF漏洞Bypass技巧](https://zhuanlan.zhihu.com/p/73736127)
- [SSRF安全指北](https://cloud.tencent.com/developer/article/1780081)
- [浅谈云上攻防--SSRF漏洞带来的新威胁](https://cloud.tencent.com/developer/article/1885981)
- [实战篇丨聊一聊SSRF漏洞的挖掘思路与技巧](https://mp.weixin.qq.com/s/v6ZcP55hFwd3QB4TNnpfRg)
- [我在CTFHub学习SSRF](https://www.freebuf.com/articles/web/258365.html)
- [SSRF 攻击内网服务](http://diego.team/2020/05/27/ssrf-%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1/)
- [SSRF检测的一些思考](https://xz.aliyun.com/t/11050)
- [SSRF Tricks小结](https://www.mi1k7ea.com/2020/02/29/SSRF-Tricks%E5%B0%8F%E7%BB%93/)
- [IPv6 三个访问本地地址的小Tips](https://tttang.com/archive/1293/)
- [WEB非实用之SSRF的挖掘与利用](https://www.yuque.com/pmiaowu/bomi9w/mbs0gw)
**相关案例**
- [My First SSRF Using DNS Rebinding](https://geleta.eu/2019/my-first-ssrf-using-dns-rebinfing/)
- [SSRF in Exchange leads to ROOT access in all instances](https://hackerone.com/reports/341876) - 通过对 ssrf 访问 Google Cloud Metadata,直至 RCE
- [SSRF (Server Side Request Forgery) worth $4,913](https://medium.com/techfenix/ssrf-server-side-request-forgery-worth-4913-my-highest-bounty-ever-7d733bb368cb)
- [Just Gopher It: Escalating a Blind SSRF to RCE for $15k](https://sirleeroyjenkins.medium.com/just-gopher-it-escalating-a-blind-ssrf-to-rce-for-15k-f5329a974530)
- [SSRF exploitation in Spreedsheet to PDF converter](https://r4id3n.medium.com/ssrf-exploitation-in-spreedsheet-to-pdf-converter-2c7eacdac781) - excel 中的 ssrf+xxe 读文件
- [The unexpected Google wide domain check bypass](https://bugs.xdavidhu.me/google/2020/03/08/the-unexpected-google-wide-domain-check-bypass/)
- [Fixing the Unfixable: Story of a Google Cloud SSRF](https://bugs.xdavidhu.me/google/2021/12/31/fixing-the-unfixable-story-of-a-google-cloud-ssrf/) - google cloud ssrf + bypass
- https://github.com/httpvoid/writeups/blob/main/Hacking-Google-Drive-Integrations.md
- [BountyHunterInChina/重生之我是赏金猎人(六)-强行多次FUZZ发现某厂商SSRF到redis密码喷洒批量反弹Shell.pdf](https://github.com/J0o1ey/BountyHunterInChina/blob/main/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E6%98%AF%E8%B5%8F%E9%87%91%E7%8C%8E%E4%BA%BA(%E5%85%AD)-%E5%BC%BA%E8%A1%8C%E5%A4%9A%E6%AC%A1FUZZ%E5%8F%91%E7%8E%B0%E6%9F%90%E5%8E%82%E5%95%86SSRF%E5%88%B0redis%E5%AF%86%E7%A0%81%E5%96%B7%E6%B4%92%E6%89%B9%E9%87%8F%E5%8F%8D%E5%BC%B9Shell.pdf)
- [Security issues with cloudflare/odoh-server-go and the ODoH RFC draft #30](https://github.com/cloudflare/odoh-server-go/issues/30)
- [Vimeo upload function SSRF](https://dphoeniixx.medium.com/vimeo-upload-function-ssrf-7466d8630437)
- [[Google VRP] SSRF in Google Cloud Platform StackDriver](https://ngailong.wordpress.com/2019/12/19/google-vrp-ssrf-in-google-cloud-platform-stackdriver/)
- [Critical SSRF on Evernote](https://blog.neolex.dev/13/)
- [How to hack a company by circumventing its WAF through the abuse of a different security appliance and win bug bounties](https://www.redtimmy.com/how-to-hack-a-company-by-circumventing-its-waf-through-the-abuse-of-a-different-security-appliance-and-win-bug-bounties/)
- [挖到这个高危SSRF漏洞，小伙伴们都惊呆了！](https://www.freebuf.com/vuls/265163.html)
**相关工具**
- [In3tinct/See-SURF](https://github.com/In3tinct/See-SURF) - python 写的 ssrf 参数扫描工具
- [swisskyrepo/SSRFmap](https://github.com/swisskyrepo/SSRFmap) - 自动化 Fuzz SSRF 开发工具
- [ksharinarayanan/SSRFire](https://github.com/ksharinarayanan/SSRFire) - An automated SSRF finder. Just give the domain name and your server and chill! ;) Also has options to find XSS and open redirects
- [vp777/surferFTP](https://github.com/vp777/surferFTP) - SSRF to TCP Port Scanning, Banner and Private IP Disclosure by abusing the FTP protocol/clients
- [ethicalhackingplayground/ssrf-king](https://github.com/ethicalhackingplayground/ssrf-king) - SSRF plugin for burp Automates SSRF Detection in all of the Request
**相关靶场**
- [incredibleindishell/SSRF_Vulnerable_Lab](https://github.com/incredibleindishell/SSRF_Vulnerable_Lab) - This Lab contain the sample codes which are vulnerable to Server-Side Request Forgery attack
**payload**
- [bugbounty-cheatsheet/cheatsheets/ssrf.md](https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/ssrf.md)
- https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery
**相关资源**
- [cujanovic/SSRF-Testing](https://github.com/cujanovic/SSRF-Testing) - SSRF (Server Side Request Forgery) testing resources
- [assetnote/blind-ssrf-chains](https://github.com/assetnote/blind-ssrf-chains) - An exhaustive list of all the possible ways you can chain your Blind SSRF vulnerability
- https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery#
**writeup**
- [buuctf 刷题记录 [第二章 web进阶]SSRF Training](https://www.cnblogs.com/murkuo/p/14905886.html)
- [看雪CTF web（SSRF+XML+JAR协议）](https://blog.csdn.net/a3320315/article/details/110456361)
---
## ssrf 有哪些危害
- 内部端口扫描
- 攻击内网服务 (例如: redis,memcache,或存在 log4j rce 的服务)
    - 攻击 Kubelet API : 在云环境中，可通过 Kubelet API 查询集群 pod 和 node 的信息，也可通过其执行命令。为了安全考虑，此服务一般不对外开放。但是，攻击者可以通过 SSRF 去访问 Kubelet API，获取信息和执行命令。
    - 攻击 Docker Remote API：Docker Remote API 是一个取代远程命令行界面（rcli）的 REST API，默认开放端口为 2375。此 API 如果存在未授权访问，则攻击者可以利用其执行 docker 命令，获取敏感信息，并获取服务器 root 权限。因此为了安全考虑，一般不会在外网开放，此时我们就可以通过 SSRF 去尝试攻击那些不对外开放的 Docker Remote API。其过程与攻击 Kubelet API 类似。
    - 越权攻击云平台内其他组件或服务：由于云上各组件相互信任，当云平台内某个组件或服务存在 SSRF 漏洞时，就可通过此漏洞越权攻击其他组件或者服务。例如用户正常请求服务 A 时，云 API 层会对请求进行校验，其中包括身份、权限等。如果服务 A 存在 SSRF 漏洞，则可构造请求使服务 A 访问服务 B，因为服务 A 与服务 B 互相信任，所以服务 B 未校验服务 A 的请求，从而越权操作服务 B 的资源。
- 绕过 cdn 获取真实ip
    - https://webhook.site/
- 利用 ssrf 进行访问,产生 dos 的效果
- Cloud Metadata
    - 在云环境中，元数据即表示实例的相关数据，可以用来配置或管理正在运行中的实例。攻击通过 SSRF 去访问元数据中存储的临时密钥或者用于自启动实例的启动脚本，这些脚本可能会包含 AK、密码、源码等等，然后根据从元数据服务获取的信息，攻击者可尝试获取到受害者账户下 COS、CVM、集群等服务的权限。
    - [metadata 泄露](../../云安全/公有云安全.md#metadata-泄露)
---
## java 中的 ssrf
- [java ssrf](../../语言安全/JAVA安全/JAVA代码审计.md#ssrf)
---
## php 中的 ssrf
- [php ssrf](../../语言安全/PHP安全/PHP代码审计.md#ssrf)
---
## python 中的 ssrf
在 Python 中，常用的函数有 urllib(urllib2) 和 requests 库。
**CVE-2019-9740 & CVE-2019-9947**
以 urllib(urllib2) 为例， urllib 并不支持 gopher,dict 协议，但 urllib 曾爆出 CVE-2019-9740、CVE-2019-9947 两个漏洞，这两个漏洞都是 urllib(urllib2) 的 CRLF 漏洞，触发点不同，其影响范围都在 urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3 之间.
**漏洞示例**
```py
import sys
import urllib2
host = "127.0.0.1:7777?a=1 HTTP/1.1\r\nCRLF-injection:
test\r\nTEST: 123"
url = "http://"+ host + ":8080/test/?test=a"
try:
  info = urllib2.urlopen(url).info()
  print(info)
except Exception as e:
  print(e)
```
通过 CLRF漏洞，实现换行对redis的攻击
**CVE-2019-9948**
该漏洞只影响 urllib，范围在 Python 2.x 到 2.7.16，这个版本间的 urllib 支持 local_file/local-file 协议，可以读取任意文件
```
/ssrf?url=local_file:/etc/passwd
/ssrf?url=local-file:/etc/passwd
```
**解析差异**
已目标为例 http://baidu.com\@qq.com
- urllib3 取到的 host 是 baidu.com
- urllib 取到的 host 是 qq.com
---
## 绕过技巧
### 使用 @ 符号
当我们需要通过 URL 发送用户名和密码时，可以使用 http://username:PI:EMAIL，此时 @前的字符会被当作用户名密码处理，@后面的字符才是我们请求的地址，即 `http://test.com@127.0.0.1/` 与 `http://127.0.0.1/` 请求时是相同的，而这种方法有时可以绕过系统对地址的检测。
### 不同的 IP 格式
**不同进制**
开发人员在提取或者过滤域名或者 IP 时，未考虑到 IP 的进制转换的影响，则存在被利用进制转换绕过的可能。浏览器不仅可以识别正常的 IP 地址，也可以识别八进制、十进制、十六进制等其他进制的 IP 地址，但是有时候开发人员会忽视这一点，因此有时，我们可以通过这一点去绕过防护。
> http://www.subnetmask.info/
```bash
# 8进制 (127.0.0.1)
0177.0.0.1
# 10进制 (127.0.0.1)
2130706433
# 16进制 (127.0.0.1)
0x7F.0x00.0x00.0x01
# 注意：16进制使用时一定要加0x，不然浏览器无法识别，八进制使用的时候要加0
```
**利用别名绕过**
```
http://localhost/
http://127.127.127.127
http://127.0.1.3
http://127.0.0.0
```
**不规范格式**
```
http://0.0.0.0
http://127.000.000.1
http://127.1
http://127。0。0。1
http://①②⑦。0。0。①
```
**IPv6**
```