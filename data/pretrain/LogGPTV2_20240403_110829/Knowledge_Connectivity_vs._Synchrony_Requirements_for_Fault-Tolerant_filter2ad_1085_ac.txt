(25)
(26)
(27)
(28)
(29)
if i.previously known == i.known then
send VIEW(m.initiator , i.PD) to pj;
call upon Inquiry(); end if
return (i.known);
else
end if
else
end if
its list of adjacent nodes to i.known, which corresponds to
the list of participants returned by i.PD (line 13). So, if
pj ∈ i.PD, d(pi, pj) = 1 and i.known = N(1)(pi).
Induction: Suppose the Lemma holds for level  (r − 1).
On the reception of message VIEW from pj, i.known is
updated with j.PD (line 18). By the inductive hypothe-
sis, in round (r − 1), i.known = N(r−1)(pi), d(pi, pj) =
r − 1 and d(pj, pl) = 1. So, in round r, i.known con-
tains N(r−1)(pi) ∪ N(1)(pj), then i.known = N(r)(pi) and
d(pi, pl) = r.
2
Lemma 2 Consider a k-OSR participant detector. Let
f = |i.known|− f) in or-
der to know if it has received responses from every correct
process (line 21). Whenever this condition becomes true, pi
is sure that it belongs to the sink component and thus it can
terminate execution, returning true for the i.in the sink
predicate (lines 22-23).
Lemma 3 Consider a k-OSR participant detector. Let
f < k < n be the number of nodes that may crash. Algo-
rithm SINK (2) executed by each node satisfy the following
properties:
• Termination: every node pi terminates execution by
deciding whether it belongs to the sink component (true) or
not (false);
• Safety: a node pi is in the unique k-strongly connected
sink component iff algorithm SINK returns true.
Proof: Termination. At the beginning of execution, node
pi sends a REQUEST message to all processes in its local
view (i.known) (lines 11-12). Since at most f < k pro-
cesses can crash, pi will receive at least s = (|i.known|−f)
responses in line 13. Since Gdi is k-strongly connected,
|i.known| ≥ k, thus s ≥ k − f ≥ 1. If one of these re-
sponses equals nack, the algorithm terminates, by returning
false (lines 25-26). If a sufﬁcient number (≥ s) of ack re-
sponses is received (line 21), the algorithm terminates by
returning true (lines 22-23). Lines 23 and 26 are the only
points where the algorithm terminates. Thus true or false
are the only possible returns.
f: upper bound on the number of crashes
i.known: set of nodes
i.in the sink: boolean
i.responded: set of nodes
Algorithm 2 SINK ()
constants:
(1)
variables:
(2)
(3)
(4)
messages:
(5)
(6)
(7)
(8)
REQUEST message:
known: set of nodes
RESPONSE message:
ack/nack: boolean
send REQUEST (i.known) to pj; endfor
if m.known == i.known then
send RESPONSE (ack) to pj;
i.known = COLLECT();
i.responded = {};
for each j in i.known do
** All Nodes **
INIT:
(9)
(10)
(11)
(12)
VERIFICATION:
(13) upon receipt of REQUEST (m.known) from pj :
(14)
(15)
(16)
send RESPONSE (nack) to pj; endif