prediction buffer is empty before executing the code of the user thread.
Leaving STIBP enabled in a hyper-threaded system has a performance
penalty, so by default it is disabled for user-mode threads, leaving a thread to
be potentially vulnerable by speculation from a sibling SMT thread. The end-
user can manually enable STIBP for user threads through the
USER_STIBP_ALWAYS feature setting (see the “Hardware Indirect Branch
Controls” section previously in this chapter for more details) or through the
RESTRICT_INDIRECT_BRANCH_PREDICTION process mitigation
option.
The described scenario is not ideal. A better solution is implemented in the
STIBP pairing mechanism. STIBP pairing is enabled by the I/O manager in
phase 1 of the NT kernel initialization (using the KeOptimizeSpecCtrlSettings
function) only under certain conditions. The system should have
hyperthreading enabled, and the CPU should support IBRS and STIBP.
Furthermore, STIBP pairing is compatible only on non-nested virtualized
environments or when Hyper-V is disabled (refer to Chapter 9 for further
details.)
In an STIBP pairing scenario, the system assigns to each process a security
domain identifier (stored in the EPROCESS data structure), which is
represented by a 64-bit number. The system security domain identifier (which
equals 0) is assigned only to processes running under the System or a fully
administrative token. Nonsystem security domains are assigned at process
creation time (by the internal PspInitializeProcessSecurity function)
following these rules:
■    If the new process is created without a new primary token explicitly
assigned to it, it obtains the same security domain of the parent
process that creates it.
■    In case a new primary token is explicitly specified for the new process
(by using the CreateProcessAsUser or CreateProcessWithLogon
APIs, for example), a new user security domain ID is generated for
the new process, starting from the internal PsNextSecurityDomain
symbol. The latter is incremented every time a new domain ID is
generated (this ensures that during the system lifetime, no security
domains can collide).
■    Note that a new primary token can be also assigned using the
NtSetInformationProcess API (with the ProcessAccessToken
information class) after the process has been initially created. For the
API to succeed, the process should have been created as suspended
(no threads run in it). At this stage, the process still has its original
token in an unfrozen state. A new security domain is assigned
following the same rules described earlier.
Security domains can also be assigned manually to different processes
belonging to the same group. An application can replace the security domain
of a process with another one of a process belonging to the same group using
the NtSetInformationProcess API with the
ProcessCombineSecurityDomainsInformation class. The API accepts two
process handles and replaces the security domain of the first process only if
the two tokens are frozen, and the two processes can open each other with the
PROCESS_VM_WRITE and PROCESS_VM_OPERATION access rights.
Security domains allow the STIBP pairing mechanism to work. STIBP
pairing links a logical processor (LP) with its sibling (both share the same
physical core. In this section, we use the term LP and CPU interchangeably).
Two LPs are paired by the STIBP pairing algorithm (implemented in the
internal KiUpdateStibpPairing function) only when the security domain of
the local CPU is the same as the one of the remote CPU, or one of the two
LPs is Idle. In these cases, both the LPs can run without STIBP being set and
still be implicitly protected against speculation (there is no advantage in
attacking a sibling CPU running in the same security context).
The STIBP pairing algorithm is implemented in the KiUpdateStibpPairing
function and includes a full state machine. The routine is invoked by the trap
exit handler (invoked when the system exits the kernel for executing a user-
mode thread) only in case the pairing state stored in the CPU’s PRCB is
stale. The pairing state of an LP can become stale mainly for two reasons:
■    The NT scheduler has selected a new thread to be executed in the
current CPU. If the new thread security domain is different than the
previous one, the CPU’s PRCB pairing state is marked as stale. This
allows the STIBP pairing algorithm to re-evaluate the pairing state of
the two.
■    When the sibling CPU exits from its idle state, it requests the remote
CPU to re-evaluate its STIBP pairing state.
Note that when an LP is running code with STIBP enabled, it is protected
from the sibling CPU speculation. STIBP pairing has been developed based
also on the opposite notion: when an LP executes with STIBP enabled, it is
guaranteed that its sibling CPU is protected against itself. This implies that
when a context switches to a different security domain, there is no need to
interrupt the sibling CPU even though it is running user-mode code with
STIBP disabled.
The described scenario is not true only when the scheduler selects a VP-
dispatch thread (backing a virtual processor of a VM in case the Root
scheduler is enabled; see Chapter 9 for further details) belonging to the
VMMEM process. In this case, the system immediately sends an IPI to the
sibling thread for updating its STIBP pairing state. Indeed, a VP-dispatch
thread runs guest-VM code, which can always decide to disable STIBP,
moving the sibling thread in an unprotected state (both runs with STIBP
disabled).
EXPERIMENT: Querying system side-channel
mitigation status
Windows exposes side-channel mitigation information through the
SystemSpeculationControl Information and
SystemSecureSpeculationControlInformation information classes
used by the NtQuerySystemInformation native API. Multiple tools
exist that interface with this API and show to the end user the
system side-channel mitigation status:
■    The SpeculationControl PowerShell script, developed by
Matt Miller and officially supported by Microsoft, which is
open source and available at the following GitHub
repository: https://github.com/microsoft/SpeculationControl
■    The SpecuCheck tool, developed by Alex Ionescu (one of
the authors of this book), which is open source and
available at the following GitHub repository:
https://github.com/ionescu007/SpecuCheck
■    The SkTool, developed by Andrea Allievi (one of the
authors of this book) and distributed (at the time of this
writing) in newer Insider releases of Windows.
All of the three tools yield more or less the same results. Only
the SkTool is able to show the side-channel mitigations
implemented in the Secure Kernel, though (the hypervisor and the
Secure Kernel are described in detail in Chapter 9.) In this
experiment, you will understand which mitigations have been
enabled in your system. Download SpecuCheck and execute it by
opening a command prompt window (type cmd in the Cortana
search box). You should get output like the following:
Click here to view code image
SpecuCheck v1.1.1    --   Copyright(c) 2018 Alex Ionescu
https://ionescu007.github.io/SpecuCheck/  --   @aionescu
--------------------------------------------------------
Mitigations for CVE-2017-5754 [rogue data cache load]
--------------------------------------------------------
[-] Kernel VA Shadowing Enabled:                       yes
     > Unnecessary due lack of CPU vulnerability:    no
     > With User Pages Marked Global:                no
     > With PCID Support:                           yes
     > With PCID Flushing Optimization (INVPCID):   yes
Mitigations for CVE-2018-3620 [L1 terminal fault]
[-] L1TF Mitigation Enabled:                           yes
     > Unnecessary due lack of CPU vulnerability:    no
     > CPU Microcode Supports Data Cache Flush:     yes
     > With KVA Shadow and Invalid PTE Bit:         yes
(The output has been trimmed for space reasons.)
You can also download the latest Windows Insider release and
try the SkTool. When launched with no command-line arguments,
by default the tool displays the status of the hypervisor and Secure
Kernel. To show the status of all the side-channel mitigations, you
should invoke the tool with the /mitigations command-line
argument:
Click here to view code image
Hypervisor / Secure Kernel / Secure Mitigations Parser Tool 
1.0
Querying Speculation Features... Success!
   This system supports Secure Speculation Controls.
System Speculation Features.
   Enabled: 1
   Hardware support: 1
   IBRS Present: 1
   STIBP Present: 1
   SMEP Enabled: 1
   Speculative Store Bypass Disable (SSBD) Available: 1
   Speculative Store Bypass Disable (SSBD) Supported by OS: 
1
   Branch Predictor Buffer (BPB) flushed on Kernel/User 
transition: 1
   Retpoline Enabled: 1
   Import Optimization Enabled: 1
   SystemGuard (Secure Launch) Enabled: 0 (Capable: 0)
   SystemGuard SMM Protection (Intel PPAM / AMD SMI monitor) 
Enabled: 0
Secure system Speculation Features.
   KVA Shadow supported: 1
   KVA Shadow enabled: 1
   KVA Shadow TLB flushing strategy: PCIDs
   Minimum IBPB Hardware support: 0
   IBRS Present: 0 (Enhanced IBRS: 0)
   STIBP Present: 0
   SSBD Available: 0 (Required: 0)
   Branch Predictor Buffer (BPB) flushed on Kernel/User 
transition: 0
   Branch Predictor Buffer (BPB) flushed on User/Kernel and 
VTL 1 transition: 0
   L1TF mitigation: 0
   Microarchitectural Buffers clearing: 1
Trap dispatching
Interrupts and exceptions are operating system conditions that divert the
processor to code outside the normal flow of control. Either hardware or
software can generate them. The term trap refers to a processor’s mechanism
for capturing an executing thread when an exception or an interrupt occurs
and transferring control to a fixed location in the operating system. In
Windows, the processor transfers control to a trap handler, which is a
function specific to a particular interrupt or exception. Figure 8-11 illustrates
some of the conditions that activate trap handlers.
The kernel distinguishes between interrupts and exceptions in the
following way. An interrupt is an asynchronous event (one that can occur at
any time) that is typically unrelated to what the processor is executing.
Interrupts are generated primarily by I/O devices, processor clocks, or timers,
and they can be enabled (turned on) or disabled (turned off). An exception, in
contrast, is a synchronous condition that usually results from the execution of
a specific instruction. (Aborts, such as machine checks, are a type of
processor exception that’s typically not associated with instruction
execution.) Both exceptions and aborts are sometimes called faults, such as
when talking about a page fault or a double fault. Running a program for a
second time with the same data under the same conditions can reproduce
exceptions. Examples of exceptions include memory-access violations,
certain debugger instructions, and divide-by-zero errors. The kernel also
regards system service calls as exceptions (although technically they’re
system traps).
Figure 8-11 Trap dispatching.
Either hardware or software can generate exceptions and interrupts. For
example, a bus error exception is caused by a hardware problem, whereas a
divide-by-zero exception is the result of a software bug. Likewise, an I/O
device can generate an interrupt, or the kernel itself can issue a software
interrupt (such as an APC or DPC, both of which are described later in this
chapter).
When a hardware exception or interrupt is generated, x86 and x64
processors first check whether the current Code Segment (CS) is in CPL 0 or
below (i.e., if the current thread was running in kernel mode or user mode).
In the case where the thread was already running in Ring 0, the processor
saves (or pushes) on the current stack the following information, which
represents a kernel-to-kernel transition.
■    The current processor flags (EFLAGS/RFLAGS)
■    The current code segment (CS)
■    The current program counter (EIP/RIP)
■    Optionally, for certain kind of exceptions, an error code
In situations where the processor was actually running user-mode code in
Ring 3, the processor first looks up the current TSS based on the Task
Register (TR) and switches to the SS0/ESP0 on x86 or simply RSP0 on x64,
as described in the “Task state segments” section earlier in this chapter. Now
that the processor is executing on the kernel stack, it saves the previous SS
(the user-mode value) and the previous ESP (the user-mode stack) first and
then saves the same data as during kernel-to-kernel transitions.
Saving this data has a twofold benefit. First, it records enough machine
state on the kernel stack to return to the original point in the current thread’s
control flow and continue execution as if nothing had happened. Second, it
allows the operating system to know (based on the saved CS value) where
the trap came from—for example, to know if an exception came from user-
mode code or from a kernel system call.
Because the processor saves only enough information to restore control
flow, the rest of the machine state—including registers such as EAX, EBX,
ECX, EDI, and so on is saved in a trap frame, a data structure allocated by
Windows in the thread’s kernel stack. The trap frame stores the execution
state of the thread, and is a superset of a thread’s complete context, with
additional state information. You can view its definition by using the dt
nt!_KTRAP_FRAME command in the kernel debugger, or, alternatively, by
downloading the Windows Driver Kit (WDK) and examining the NTDDK.H
header file, which contains the definition with additional commentary.
(Thread context is described in Chapter 5 of Part 1.) The kernel handles
software interrupts either as part of hardware interrupt handling or
synchronously when a thread invokes kernel functions related to the software
interrupt.
In most cases, the kernel installs front-end, trap-handling functions that
perform general trap-handling tasks before and after transferring control to
other functions that field the trap. For example, if the condition was a device
interrupt, a kernel hardware interrupt trap handler transfers control to the
interrupt service routine (ISR) that the device driver provided for the
interrupting device. If the condition was caused by a call to a system service,
the general system service trap handler transfers control to the specified
system service function in the executive.
In unusual situations, the kernel can also receive traps or interrupts that it
doesn’t expect to see or handle. These are sometimes called spurious or
unexpected traps. The trap handlers typically execute the system function
KeBugCheckEx, which halts the computer when the kernel detects
problematic or incorrect behavior that, if left unchecked, could result in data
corruption. The following sections describe interrupt, exception, and system
service dispatching in greater detail.
Interrupt dispatching
Hardware-generated interrupts typically originate from I/O devices that must
notify the processor when they need service. Interrupt-driven devices allow
the operating system to get the maximum use out of the processor by
overlapping central processing with I/O operations. A thread starts an I/O
transfer to or from a device and then can execute other useful work while the
device completes the transfer. When the device is finished, it interrupts the
processor for service. Pointing devices, printers, keyboards, disk drives, and
network cards are generally interrupt driven.
System software can also generate interrupts. For example, the kernel can
issue a software interrupt to initiate thread dispatching and to break into the
execution of a thread asynchronously. The kernel can also disable interrupts
so that the processor isn’t interrupted, but it does so only infrequently—at
critical moments while it’s programming an interrupt controller or
dispatching an exception, for example.
The kernel installs interrupt trap handlers to respond to device interrupts.
Interrupt trap handlers transfer control either to an external routine (the ISR)
that handles the interrupt or to an internal kernel routine that responds to the
interrupt. Device drivers supply ISRs to service device interrupts, and the
kernel provides interrupt-handling routines for other types of interrupts.
In the following subsections, you’ll find out how the hardware notifies the
processor of device interrupts, the types of interrupts the kernel supports,
how device drivers interact with the kernel (as a part of interrupt processing),
and the software interrupts the kernel recognizes (plus the kernel objects that
are used to implement them).
Hardware interrupt processing
On the hardware platforms supported by Windows, external I/O interrupts
come into one of the inputs on an interrupt controller, for example an I/O
Advanced Programmable Interrupt Controller (IOAPIC). The controller, in
turn, interrupts one or more processors’ Local Advanced Programmable
Interrupt Controllers (LAPIC), which ultimately interrupt the processor on a
single input line.
Once the processor is interrupted, it queries the controller to get the global
system interrupt vector (GSIV), which is sometimes represented as an
interrupt request (IRQ) number. The interrupt controller translates the GSIV
to a processor interrupt vector, which is then used as an index into a data
structure called the interrupt dispatch table (IDT) that is stored in the CPU’s
IDT Register, or IDTR, which returns the matching IDT entry for the
interrupt vector.
Based on the information in the IDT entry, the processor can transfer control
to an appropriate interrupt dispatch routine running in Ring 0 (following the
process described at the start of this section), or it can even load a new TSS
and update the Task Register (TR), using a process called an interrupt gate.
In the case of Windows, at system boot time, the kernel fills in the IDT with
pointers to both dedicated kernel and HAL routines for each exception and
internally handled interrupt, as well as with pointers to thunk kernel routines
called KiIsrThunk, that handle external interrupts that third-party device
drivers can register for. On x86 and x64-based processor architectures, the
first 32 IDT entries, associated with interrupt vectors 0–31 are marked as
reserved for processor traps, which are described in Table 8-3.
Table 8-3 Processor traps
Vector 
(Mnemonic)
Meaning
0 (#DE)
Divide error
1 (#DB)
Debug trap
2 (NMI)
Nonmaskable interrupt
3 (#BP)
Breakpoint trap
4 (#OF)
Overflow fault
5 (#BR)
Bound fault
6 (#UD)
Undefined opcode fault
7 (#NM)
FPU error
8 (#DF)
Double fault
9 (#MF)
Coprocessor fault (no 
longer used)
10 (#TS)
TSS fault
11 (#NP)
Segment fault
12 (#SS)
Stack fault
13 (#GP)
General protection fault
14 (#PF)
Page fault
15
Reserved
16 (#MF)
Floating point fault
17 (#AC)
Alignment check fault
18 (#MC)
Machine check abort
19 (#XM)
SIMD fault
20 (#VE)
Virtualization exception
21 (#CP)
Control protection 
exception
22-31
Reserved
The remainder of the IDT entries are based on a combination of hardcoded
values (for example, vectors 30 to 34 are always used for Hyper-V-related
VMBus interrupts) as well as negotiated values between the device drivers,
hardware, interrupt controller(s), and platform software such as ACPI. For
example, a keyboard controller might send interrupt vector 82 on one
particular Windows system and 67 on a different one.
EXPERIMENT: Viewing the 64-bit IDT
You can view the contents of the IDT, including information on