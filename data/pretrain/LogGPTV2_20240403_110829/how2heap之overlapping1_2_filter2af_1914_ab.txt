      size = 134529,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后给三个chunk赋初值
    pwndbg> x/10gx p1
    0x603010:       0x3131313131313131      0x3131313131313131
    0x603020:       0x3131313131313131      0x3131313131313131
    0x603030:       0x3131313131313131      0x3131313131313131
    0x603040:       0x3131313131313131      0x3131313131313131
    0x603050:       0x3131313131313131      0x3131313131313131
    pwndbg> x/10gx p2
    0x603110:       0x3232323232323232      0x3232323232323232
    0x603120:       0x3232323232323232      0x3232323232323232
    0x603130:       0x3232323232323232      0x3232323232323232
    0x603140:       0x3232323232323232      0x3232323232323232
    0x603150:       0x3232323232323232      0x3232323232323232
    pwndbg> x/10gx p3
    0x603210:       0x3333333333333333      0x3333333333333333
    0x603220:       0x3333333333333333      0x3333333333333333
    0x603230:       0x3333333333333333      0x3333333333333333
    0x603240:       0x3333333333333333      0x3333333333333333
    0x603250:       0x3333333333333333      0x3333333333333333
这些都没啥好看的,我们直接往下走,此时我们free掉了chunk2,chunk2被放进了unsorted bin中
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603100 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603100
    smallbins
    empty
    largebins
    empty
    pwndbg>
紧接着我们假设我们溢出了chunk1,成功修改了chunk2的size为0x181
    pwndbg> x/10gx 0x603100
    0x603100:       0x3131313131313131      0x0000000000000181
    0x603110:       0x00007ffff7dd1b78      0x00007ffff7dd1b78
    0x603120:       0x3232323232323232      0x3232323232323232
    0x603130:       0x3232323232323232      0x3232323232323232
    0x603140:       0x3232323232323232      0x3232323232323232
之后程序malloc了p4,此时的堆
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 257,
      fd = 0x3131313131313131,
      bk = 0x3131313131313131,
      fd_nextsize = 0x3131313131313131,
      bk_nextsize = 0x3131313131313131
    }
    0x603100 PREV_INUSE {
      prev_size = 3544668469065756977,
      size = 385,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x3232323232323232,
      bk_nextsize = 0x3232323232323232
    }
    0x603280 PREV_INUSE {
      prev_size = 3689348814741910323,
      size = 134529,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
可以看到我们0x603100也就是p4的size是0x181,此时的p3,p4分别在
    pwndbg> p/x p3
    $1 = 0x603210
    pwndbg> p/x p4
    $2 = 0x603110
而这又意味这什么呢?
我们回想一下,p3的大小是0x100,而p4的大小为0x181,而这两个只相差0x100
    pwndbg> p/x 0x603210-0x603110
    $3 = 0x100
这样我们就成功的构造了overlapping,也就是说,我们的p4将整个p3都包了进去
###  总结
程序先是malloc了2个0x100大小的chunk,p1,p2,和一个大小为0x80的chunk,p3
紧接着,程序初始化了三个chunk,里面的值分别为1,2,3
之后程序free掉了p2,并假设拥有溢出的能力,通过溢出p1修改了p2的size域
此时p2的size是0x181,系统会认为我们有一个大小为0x180的在unsorted bin中的fake chunk
紧接着,我们再申请了一个大小为0x180的chunk p4,这样系统就会把我们unsorted bin中的free
chunk也就是我们构造好的大小为0x180的fake chunk拿出来给p4
此时p4的后0x80的空间就和p3共享了,这就构成了overlapping_chunk! 堆重叠
## overlapping_chunks_2
这里是overlapping的第二个,我们先看看源代码吧
###  源代码
我删除了一些无关语句,并加了一些注释(理解不对的地方多包涵2333
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(){
      intptr_t *p1,*p2,*p3,*p4,*p5,*p6;
      unsigned int real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;
      int prev_in_use = 0x1;
      //这个也被称为不相邻的free chunk conslidation 攻击(这里就不强翻了,没呢味儿
      fprintf(stderr, "nThis is also referenced as Nonadjacent Free Chunk Consolidation Attackn");
      fprintf(stderr, "nLet's start to allocate 5 chunks on the heap:");
      p1 = malloc(1000);
      p2 = malloc(1000);
      p3 = malloc(1000);
      p4 = malloc(1000);
      p5 = malloc(1000);
      //malloc_usable_size函数可以获取chunk实际分配的内存大小
      real_size_p1 = malloc_usable_size(p1);
      real_size_p2 = malloc_usable_size(p2);
      real_size_p3 = malloc_usable_size(p3);
      real_size_p4 = malloc_usable_size(p4);
      real_size_p5 = malloc_usable_size(p5);
      fprintf(stderr, "nnchunk p1 from %p to %p", p1, (unsigned char *)p1+malloc_usable_size(p1));
      fprintf(stderr, "nchunk p2 from %p to %p", p2,  (unsigned char *)p2+malloc_usable_size(p2));
      fprintf(stderr, "nchunk p3 from %p to %p", p3,  (unsigned char *)p3+malloc_usable_size(p3));
      fprintf(stderr, "nchunk p4 from %p to %p", p4, (unsigned char *)p4+malloc_usable_size(p4));
      fprintf(stderr, "nchunk p5 from %p to %pn", p5,  (unsigned char *)p5+malloc_usable_size(p5));
      //为了便于看攻击效果,所以五个chunk分别为A,B,C,D,E
      memset(p1,'A',real_size_p1);
      memset(p2,'B',real_size_p2);
      memset(p3,'C',real_size_p3);
      memset(p4,'D',real_size_p4);
      memset(p5,'E',real_size_p5);
      //我们现在Free一下p4,在有p5邻接top chunk的情况下,我们释放p4不会引起p4与top chunk的合并
      fprintf(stderr, "nLet's free the chunk p4.nIn this case this isn't coealesced with top chunk since we have p5 bordering top chunk after p4n");
      free(p4);
      //现在我们通过溢出chunk p1将chunk p2的size改成p2+p3的大小并且将标注为设为正在使用来触发漏洞
      fprintf(stderr, "nLet's trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2nwith the size of chunk_p2 + size of chunk_p3n");
      *(unsigned int *)((unsigned char *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2; //<--- BUG HERE
      现在我们再free p2,这个时候ptmalloc就会认为下一个chunk是p4(p2的size已经被我们更改为p2+p3的大小了
      fprintf(stderr, "nNow during the free() operation on p2, the allocator is fooled to think that nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) n");
      //这样就会创建一个大的错误包含p3的free chunk
      fprintf(stderr, "nThis operation will basically create a big free chunk that wrongly includes p3n");
      free(p2);
      //现在我们再创建一个新的大小正好是我们创建的fake free chunk的新chunk
      fprintf(stderr, "nNow let's allocate a new chunk with a size that can be satisfied by the previously freed chunkn");
      p6 = malloc(2000);
      real_size_p6 = malloc_usable_size(p6);
      fprintf(stderr, "nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and nwe can overwrite data in p3 by writing on chunk p6n");
      fprintf(stderr, "nchunk p6 from %p to %p", p6,  (unsigned char *)p6+real_size_p6);
      fprintf(stderr, "nchunk p3 from %p to %pn", p3, (unsigned char *) p3+real_size_p3);
      fprintf(stderr, "nData inside chunk p3: nn");
      fprintf(stderr, "%sn",(char *)p3);
      fprintf(stderr, "nLet's write something inside p6n");
      memset(p6,'F',1500);
      fprintf(stderr, "nData inside chunk p3: nn");
      fprintf(stderr, "%sn",(char *)p3);
    }
###  程序运行结果
    chunk p1 from 0x220f010 to 0x220f3f8
    chunk p2 from 0x220f400 to 0x220f7e8