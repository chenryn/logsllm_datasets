[TOC]
# 引言
通常一些应用壳代码、算法协议什么的都会在so层，需要保护起来增加逆向难度。
所以本篇文章通过分析壳程序来熟悉一下Native层分析。
# 概述
本篇分析内容如下，主要分析libshella_3.0.0.0.so文件：
  * init_array节解密JNI_OnLoad(通常so层保护就是对JNI_OnLoad进行保护，隐藏native方法注册)
  * 遍历/proc/self/maps获取so文件基址
# 分析过程
## init_array节：解密操作
下面代码是init函数，作为解密JNI_OnLoad之用
### 初始化
  * 这是每一个栈帧都会有的初始化操作：
    1. 保存上一个栈帧的帧地址和执行完当前栈帧后的返回地址到栈中
    2. 将当前栈帧(r11的值是栈地址)指向返回地址(LR的值是代码段地址)
    3. 压栈0x48，用来存放局部变量
    4. 参数入栈，R0、R1的值到栈顶处
    libshella_3.0.0.0.so:763FA944 STMFD           SP!, {R11,LR}
    libshella_3.0.0.0.so:763FA948 ADD             R11, SP, #4
    libshella_3.0.0.0.so:763FA94C SUB             SP, SP, #0x48
    libshella_3.0.0.0.so:763FA950 STR             R0, [R11,#var_48]
    libshella_3.0.0.0.so:763FA954 STR             R1, [R11,#var_4C]
### for循环
for循环，条件判断之后，执行循环体，接着跳转到条件判断之前的位置，执行最后一个语句块，这里是var_8 -= 0x1000
**伪代码**
    unsigned int var_8;
    for(var_8=init_array_addr & 0xFFFFF000; *(unkonwn *)var_8 != 0x464C457C; var_8 -= 0x1000)
        ;
**初始化赋值** ，给变量var_8赋值libshella_3.0.0.0.so内存基址
  1. 前两条指令：将init_array函数地址0x763FA944复制给R3
  2. 接着用BIC将0xFFF(0xFF0+0xF)中值为1的位清除，置0。即一个&0xFFFFF000操作，得到init_array节所在libshella_3.0.0.0.so文件的内存基址0x763FA000
  3. 将libshella_3.0.0.0.so内存基址保存到局部变量var_8(栈)中
  4. 跳转到loc_763FA97C
    libshella_3.0.0.0.so:763FA958 LDR             R3, =(init_array - 0x763FA964)
    libshella_3.0.0.0.so:763FA95C ADD             R3, PC, R3 ; init_array
    libshella_3.0.0.0.so:763FA960 BIC             R3, R3, #0xFF0
    libshella_3.0.0.0.so:763FA964 BIC             R3, R3, #0xF
    libshella_3.0.0.0.so:763FA968 STR             R3, [R11,#var_8]
    libshella_3.0.0.0.so:763FA96C B               loc_763FA97C
**判断** ，是否var_8变量存储的内存地址指向的数据是magic字段0x464C457C
  1. libshella_3.0.0.0.so内存基址赋值给给R3
  2. 取ELF头的前四字节，也就是magic赋值给R2
  3. 将0x464C457F赋值给R3
  4. 比较R2，R3，如果R2-R3！=0，则跳转到loc_763FA970 
**循环** ，将变量var_8减去0x1000
    ;循环
    libshella_3.0.0.0.so:763FA970 loc_763FA970                            ; CODE XREF: init_array+48j
    libshella_3.0.0.0.so:763FA970 LDR             R3, [R11,#var_8]
    libshella_3.0.0.0.so:763FA974 SUB             R3, R3, #0x1000
    libshella_3.0.0.0.so:763FA978 STR             R3, [R11,#var_8]
    ;判断
    loc_763FA97C                            ; CODE XREF: init_array+28j
    libshella_3.0.0.0.so:763FA97C LDR             R3, [R11,#var_8]
    libshella_3.0.0.0.so:763FA980 LDR             R2, [R3]
    libshella_3.0.0.0.so:763FA984 LDR             R3, =unk_464C457F 
                                ; LDR             R3, =0x464C457F
    libshella_3.0.0.0.so:763FA988 CMP             R2, R3
    libshella_3.0.0.0.so:763FA98C BNE             loc_763FA970
    ;跳出
  * 给变量var_C赋值，这个值为程序头表的内存地址
**伪代码**
    var_1C = 0;
    var_20 = 0;
    var_24 = 0;
    var_C = *(_DWORD *)(var_8 + 0x1C) + var_8; //程序头表地址
    var_10 = 0;
  1. 对变量var_1C、var_20、var_24置0
  2. 将变量var_8的值(libshella_3.0.0.0.so内存基址)赋值给var_28
  3. 将libshella_3.0.0.0.so内存基址加0x1C得到的内存地址指向的值（ELF偏移0x1C的值为程序头表的偏移值）赋给R2，将var_8的值赋给R3
  4. R3=R2+R3，即程序头表的内存地址赋值给R3
  5. 变量var_C存储程序头表的偏移地址
  6. 变量var_10置0
    libshella_3.0.0.0.so:75FFE990 MOV             R3, #0
    libshella_3.0.0.0.so:75FFE994 STR             R3, [R11,#var_1C]
    libshella_3.0.0.0.so:75FFE998 MOV             R3, #0
    libshella_3.0.0.0.so:75FFE99C STR             R3, [R11,#var_20]
    libshella_3.0.0.0.so:75FFE9A0 MOV             R3, #0
    libshella_3.0.0.0.so:75FFE9A4 STR             R3, [R11,#var_24]
    libshella_3.0.0.0.so:75FFE9A8 LDR             R3, [R11,#var_8]
    libshella_3.0.0.0.so:75FFE9AC STR             R3, [R11,#var_28]
    libshella_3.0.0.0.so:75FFE9B0 LDR             R3, [R11,#var_28]
    libshella_3.0.0.0.so:75FFE9B4 LDR             R2, [R3,#0x1C]
    libshella_3.0.0.0.so:75FFE9B8 LDR             R3, [R11,#var_8]
    libshella_3.0.0.0.so:75FFE9BC ADD             R3, R2, R3
    libshella_3.0.0.0.so:75FFE9C0 STR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFE9C4 MOV             R3, #0
    libshella_3.0.0.0.so:75FFE9C8 STR             R3, [R11,#var_10]
    libshella_3.0.0.0.so:75FFE9CC B               loc_75FFEA94
    libshella_3.0.0.0.so:75FFE9D0 ; ---------------------------------------------------------------------------
### while循环
**伪代码**
    var_10 = 0;
    while(*(unkown *)(var_28 + 0x2c) > var_10)
    {
        if(*(unkown*)var_C != 1 || *(unkown*)(var_C+0x18) != 5)
        {
            if(*(unkown*)var_C == 1 || *(unkown*)(var_C+0x18) == 6)
            {
                var_20 = *(_DWORD *)(var_C + 8) & 0xFFFFF000;
                var_24 = (*(_DWORD *)(var_C + 8) + *(_DWORD *)(var_C + 0x10) + 0xFFF) & 0xFFFFF000;
                break;
            }
        }
        else
        {
            var_1C = (*(unkown*)(var_C+0x8) + *(unkown*)(var_C+0x10) + 0xFFF) &0xFFFFF000;
        }
        *(unkown *)var10++;
        *(unkown *)var_C += 0x20;
    }
  1. while判断，如果var_28+0x2C指向的值(程序头表数量)大于变量var_10的值就循环
  2. 第一个if语句，判断当前程序头表类型是否为可加载类型或者程序头是否可读可执行(5h)，如果条件判断成立则跳转执行if语句块loc_75FFEA1C
第一个if语句的if语句块
​ 第二个if语句：判断是否当前段是可加载段或者段属性为可读可写(6h)，如果条件成立，跳出第二个if语句
​ 第二个if语句的if语句块：当前段的虚拟地址&
0xFFFFF000的结果赋值给var_20，下一个程序段的虚拟地址存储到var_24，跳出while循环
第一个if语句中的else语句块：当前段类型是可加载段或者是可读可执行权限，就将下一个段的虚拟地址根据0x1000对其后的值赋给变量var_1C，接着跳出if语句向下执行到loc_75FFEA7C
  3. var_10指向的值 + 1，var_C指向的值(var_C=var_28) + 0x20
    ;2. 将var_C这个内存地址值(程序头表类型)指向的数据赋给R3
    ;判断R3-1之后，如果zbit(z标志位)不为0，即R3不等于1，就跳转到loc_75FFEA1C
    ;将var_C这个内存地址值+0x18(p_flag)指向的值赋给R3
    ;判断R3的值是否为5
    libshella_3.0.0.0.so:75FFE9D0 loc_75FFE9D0                            ; CODE XREF: sub_75FFE944+164j
    libshella_3.0.0.0.so:75FFE9D0 LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFE9D4 LDR             R3, [R3]
    libshella_3.0.0.0.so:75FFE9D8 CMP             R3, #1
    libshella_3.0.0.0.so:75FFE9DC BNE             loc_75FFEA1C
    libshella_3.0.0.0.so:75FFE9E0 LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFE9E4 LDR             R3, [R3,#0x18]
    libshella_3.0.0.0.so:75FFE9E8 CMP             R3, #5
    libshella_3.0.0.0.so:75FFE9EC BNE             loc_75FFEA1C
    ;第一个if语句中的else语句块
    ;将程序头表偏移0x8的值赋给R2(段的虚拟地址),将程序头表偏移0x10的值(段在文件中的长度)赋给R3，R3 = R2+R3
    ;R3的值(下一个段的虚拟地址)，(R3 + 0xFFF) &0xFFFFF000
    ;将(R3 + 0xFFF) &0xFFFFF000值赋值给变量var_1C
    libshella_3.0.0.0.so:75FFE9F0 LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFE9F4 LDR             R2, [R3,#8]
    libshella_3.0.0.0.so:75FFE9F8 LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFE9FC LDR             R3, [R3,#0x10]
    libshella_3.0.0.0.so:75FFEA00 ADD             R3, R2, R3
    libshella_3.0.0.0.so:75FFEA04 ADD             R3, R3, #0xFF0
    libshella_3.0.0.0.so:75FFEA08 ADD             R3, R3, #0xF
    libshella_3.0.0.0.so:75FFEA0C BIC             R3, R3, #0xFF0
    libshella_3.0.0.0.so:75FFEA10 BIC             R3, R3, #0xF
    libshella_3.0.0.0.so:75FFEA14 STR             R3, [R11,#var_1C]
    libshella_3.0.0.0.so:75FFEA18 B               loc_75FFEA7C
    libshella_3.0.0.0.so:75FFEA1C ; ---------------------------------------------------------------------------    
    ;第一个if语句的if语句块
    ;开始第二个if语句的条件判断：前8条语句和上面类似，变量var_C指向的值是否为1或者变量var_C+0x18指向的值是否为6，如果条件成立，跳出当前if语句，执行到loc_75FFEA7C，第一个if语句else语句块执行完毕跳转的的地方
    libshella_3.0.0.0.so:75FFEA1C
    libshella_3.0.0.0.so:75FFEA1C loc_75FFEA1C                            ; CODE XREF: sub_75FFE944+98j
    libshella_3.0.0.0.so:75FFEA1C                                         ; sub_75FFE944+A8j
    libshella_3.0.0.0.so:75FFEA1C LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFEA20 LDR             R3, [R3]
    libshella_3.0.0.0.so:75FFEA24 CMP             R3, #1
    libshella_3.0.0.0.so:75FFEA28 BNE             loc_75FFEA7C
    libshella_3.0.0.0.so:75FFEA2C LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFEA30 LDR             R3, [R3,#0x18]
    libshella_3.0.0.0.so:75FFEA34 CMP             R3, #6
    libshella_3.0.0.0.so:75FFEA38 BNE             loc_75FFEA7C
    ;第二个if语句的if语句块
    ;var_C+0x8指向的值 & 0xFFFFF000，这个计算的值赋给var_20
    ;下一个程序段的虚拟地址存储到var_24
    ;最后跳转到loc_75FFEAAC，超出while判断语句，即一个break语句
    libshella_3.0.0.0.so:75FFEA3C LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFEA40 LDR             R3, [R3,#8]
    libshella_3.0.0.0.so:75FFEA44 BIC             R3, R3, #0xFF0
    libshella_3.0.0.0.so:75FFEA48 BIC             R3, R3, #0xF
    libshella_3.0.0.0.so:75FFEA4C STR             R3, [R11,#var_20]
    libshella_3.0.0.0.so:75FFEA50 LDR             R3, [R11,#var_C]