title:On Incentive Compatible Role-Based Reward Distribution in Algorand
author:Mehdi Fooladgar and
Mohammad Hossein Manshaei and
Murtuza Jadliwala and
Mohammad Ashiqur Rahman
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
On Incentive Compatible Role-based
Reward Distribution in Algorand
Mehdi Fooladgar†(cid:2), Mohammad Hossein Manshaei†‡(cid:2), Murtuza Jadliwala(cid:2), and Mohammad Ashiqur Rahman‡
†Department of Electrical and Computer Engineering, Isfahan University of Technology, Isfahan, Iran
(cid:2)Department of Computer Science, University of Texas at San Antonio, USA
‡Department of Electrical and Computer Engineering, Florida International University, USA
Abstract—Algorand is a recent, open-source public or permis-
sionless blockchain system that employs a novel proof-of-stake
Byzantine consensus protocol to efﬁciently scale the distributed
transaction agreement problem to billions of users. Despite its
promise, one relatively under-studied aspect of this protocol has
been the incentive compatibility of its reward sharing approach,
without which cooperation among rational network users cannot
be guaranteed, resulting in protocol failure. This paper is the
ﬁrst attempt to address this problem. By carefully modeling
the participation costs and rewards received within a strategic
interaction scenario in Algorand, we ﬁrst show that even a small
number of non-participating users (due to insufﬁciency of the
expected incentives) can result in the network failing to append
new transaction blocks. We further show that this effect, which
was observed in simulations, can be formalized by means of
a game-theoretic model that realistically captures the strategic
interactions between users in Algorand. Speciﬁcally, we formally
prove that mutual cooperation under the currently proposed
reward sharing approach in Algorand is not a Nash equilibrium.
To remedy this, we propose a novel reward sharing approach for
Algorand and formally show that it is incentive-compatible, i.e.,
it can guarantee cooperation within a group of selﬁsh users.
Extensive numerical and Algorand simulation results further
conﬁrm our analytical ﬁndings. Moreover, these results show that
for a given distribution of stakes in the network, our reward
sharing approach can guarantee cooperation with a signiﬁcantly
smaller reward per round.
Index Terms—Blockchain, Algorand, Incentive Compatibility,
Game Theory, Reward Sharing.
I. INTRODUCTION
A blockchain is an immutable distributed database that
records a time-sequenced history of facts called transactions.
This record is maintained by constructing consistent copies
of the cryptographic hash-chain of transaction blocks in a
distributed fashion. One key aspect of any blockchain protocol
is the consensus algorithm which enables agreement among
a distributed network of autonomous nodes or users1 (a.k.a.
miners in certain protocols) on the state of the blockchain, un-
der the assumption that a fraction of them could be malicious
or faulty. Blockchains could be further categorized as per-
missioned or permissionless depending on whether a trusted
infrastructure exists or not to establish veriﬁable identities
for network nodes. In Bitcoin [1], a popular permissionless
blockchain protocol, consensus is achieved by the network se-
lecting a leader in an unbiased fashion once every 10 minutes
(cid:2)M. Fooladgar and M. H. Manshaei are equally contributing authors.
1The term users and nodes are used interchangeably. Typically, users control
nodes which are computational systems that are part of the Algorand peer-to-
peer network and execute the reference software.
on an average (called a round). The selected leader gets the
right to commit or append a new block onto the blockchain.
The network then implicitly accepts this block by adding
on top of it or reject it by appending on some other block.
Bitcoin uses a Proof-of-Work (PoW) mechanism to select the
leader in each round, where nodes or miners compete with
each other by solving a hash puzzle. The node that wins this
competition gets the right to propose the next block. As PoW
involves signiﬁcant computation, Bitcoin includes a reward
mechanism to incentivize miners. Besides Bitcoin, several
other permissionless systems (e.g., Ethereum [2] and other alt-
coins [3]) also employ a PoW-based consensus algorithm and
a reward model to ensure honest participation.
Bitcoin’s PoW-based consensus mechanism, however, has
several shortcomings. In particular, the hash puzzle-based PoW
approach is wasteful in terms of energy [4], it does not prevent
forking and results in mining centralization [5]. Also, it does
not scale well with the number of transactions and network
users [6]. Several platform-speciﬁc efforts, such as BIP 102 [7]
and Bitcoin-NG [8], have been proposed to improve Bitcoin’s
transaction throughput. Alternatively, platform-agnostic solu-
tions aimed to improve the scalability-related shortcomings of
PoW-based consensus by employing a committee or sharding
approach [9], payment networks [10], [11], and side-chains
[12] have also been proposed. Several other approaches have
tried to either improve the existing version of PoW [13]
or have proposed alternatives such as Proof-of-Stake (PoS)
[14]–[18], Proof-of-Burn (PoB) [19], Proof-of-Elapsed Time
(PoET) [20] and Proof-of-Personhood (PoP) [21].
Of all
these improvements,
the Algorand protocol [18],
[22] has garnered the most attention within the permissionless
blockchain community, primarily because of its innovative
PoS-based consensus protocol that is not only computation-
ally (and energy) efﬁcient, but also provides strong security
guarantees against forking in a network comprising of faulty
and malicious users or nodes. Algorand eliminates the pos-
sibility of hash power centralization by removing the differ-
ence between normal network users and miners and scales
pretty well. In fact, Algorand can commit about 750 MBytes
of transactions per hour, which is 125 times of Bitcoin’s
throughput [22]. These security and performance guarantees of
Algorand’s consensus design has resulted in a lot of optimism
within the blockchain community. However, one critical issue
has not received much attention, if any: does the currently
proposed reward distribution approach in Algorand promote
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00059
452
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
participation or cooperation among rational users to complete
all the required protocol tasks?
Since the inception of Bitcoin, a signiﬁcant effort has
been spent by the research community towards understanding
the incentive-compatibility of its reward distribution approach
[23]–[25],
towards characterizing the strategic behavior of
rational miners in mining pools [24], [26]–[30], and towards
designing new incentive-compatible PoW-based cryptocurren-
cies [4] and scalability solutions [31], [32]. However, no such
analysis for Algorand exists yet, and this paper attempts to
ﬁll this research gap. We make the ﬁrst attempt to formally
analyze Algorand’s reward distribution strategy by employing
well-established game-theoretic tools and techniques. More
speciﬁcally, by modeling a single round of Algorand’s con-
sensus protocol as a single-stage non-cooperative multi-player
game, we show that without an efﬁcient reward sharing
protocol, rational nodes would have more incentive to deviate
from cooperation and behave selﬁshly. To overcome this
problem, we propose a new reward distribution approach for
Algorand, which, in addition to the stake possessed by users,
considers their roles during consensus or Byzantine agreement
for distributing the per-round rewards. We further show that
our proposed role-based reward distribution approach is able to
converge to a Nash equilibrium (NE) where a certain subset
of nodes will cooperate. We conduct an extensive empirical
evaluation of the proposed reward distribution approach us-
ing both numerical and Algorand protocol simulations. Our
evaluations further conﬁrm our analytical results by showing
that we can distribute signiﬁcantly smaller rewards among
users while enforcing cooperation in Algorand. The Algorand
Foundation can use our results to keep track of the network
state and adapt the distributed rewards accordingly. To the best
of our knowledge, this paper is the ﬁrst to provide a systematic
analysis of incentive design in Algorand.
II. ALGORAND SYSTEM MODEL
In this section, we ﬁrst summarize the Algorand protocol.
This description is intended to provide readers with the main
concepts of Algorand. Interested readers are referred to [1]
and [18] for more technical details on Bitcoin and Algorand.
A. Contrasting Consensus in PoW with PoS Blockchains
We begin by ﬁrst contrasting PoW consensus approach
of Bitcoin with the more recent PoS approach of Algorand.
In this direction, we highlight some of the most signiﬁcant
shortcomings of Bitcoin’s PoW approach and discuss how they
are overcome by Algorand’s PoS consensus.
• PoW wastes signiﬁcant amount of computation, and by
relation, the electrical energy used to achieve it. PoW schemes
also assume that a majority of the nodes contributing to the
network’s hash or computational power are honest, i.e., at least
51% of the network’s hash power comes from honest users.
• PoW-based consensus eventually leads to concentration
or centralization of power, where entities in the network
eventually monopolize computational power to control new
block addition (e.g., Bitcoin Mining Pools) [27]–[29].
• PoW allows the possibility of forking, where two different
hash chains could reach the same length and neither one
supersedes the other [24], [26]. Efforts to mitigate the impact
of forking in existing solutions have resulted in the block
inter-arrival and transaction conﬁrmation times to become
impractically high (e.g., current Bitcoin block inter-arrival
time is 10 minutes while transaction conﬁrmation time is
1 hour). As a result, current PoW blockchain solutions do
not scale well with the number of transactions and users.
To overcome these shortcomings, Algorand proposes a novel
PoS based consensus protocol. Similar to Bitcoin, Algorand is
fully decentralized and maintains a public, immutable ledger of
transactions by reaching consensus on the order of transactions
in the ledger. However in Algorand all users are “equal”, i.e,
there is no distinction between users (miners) who can add
new blocks and those who just create and receive transactions.
Moreover, as each user/node runs the same computationally
efﬁcient function to achieve consensus (as opposed to PoW-
based systems where users compete for the right to add the
next block), Algorand does not waste computations, and thus
electricity. Lastly, the design of Algorand’s consensus protocol
guarantees that there is no forking with an overwhelmingly
high probability. A side-effect of this is that Algorand scales
extremely well with the number of users/nodes and transac-
tions, compared to classical PoW-based systems [22].
B. Summary of Algorand
Next, we summarize the creation, distribution and agree-
ment of transaction blocks in Algorand, as shown in Fig. 1.
1) Assumed Adversary Model: In addition to standard cryp-
tographic assumptions, Algorand assumes that honest users
always run bug-free reference software and follow all protocol
steps. As is standard in PoS systems, Algorand assumes that
the fraction of money held by honest users is above some
threshold h (a constant greater than 2
3). An adversary can
participate in Algorand by creating multiple sybil nodes/users
and owning some money or stake in the system. An adversary
in Algorand can arbitrarily corrupt honest users, provided that
the amount of money held by honest, non-compromised users
remain above h. However, an adversary cannot compromise
the keys of honest non-compromised users. Algorand assumes
that most honest users receive messages sent by most other
honest users within some known time bound in order to
continue to make progress on adding blocks to the blockchain
(i.e., liveness goal). This is the strong synchrony assumption.
Algorand can achieve consensus or agreement on blocks (i.e.,
safety goal) even if the network is asynchronous (or controlled
by the adversary) for a long but bounded period of time,
provided it is strongly synchronous for a period of time after.
2) Network and Communication Protocol: The Algorand
network is a peer-to-peer network of honest and faulty or
malicious nodes, where each node is represented by a pub-
lic/private key pair (see Fig. 1-(a)). The number of malicious
or faulty nodes is bounded by the honest stake ownership con-
dition outlined earlier. Nodes in the network communicate in a
peer-to-peer fashion using unique TCP connections. Commu-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
453
M
M
(a)
Node 
Connections
✔✔✗
Gossip
Votes
M
Step #1
M
M
M
M
M
Malicious Nodes
Selected Members
Selected Leaders
Proposed Blocks
Sortition
The popular blocks
40 Votes
25 Votes
(b)
Block Proposal
M
M
t2
Re-Vote
on Popular 
Block
M
Step #2
t2
M
t1
t2
t2
M
t3
t3
M
(c)
Reduction Phase
(2 steps)
The most popular block 
is selected and sent to 
BinaryBA*
(d)
BinaryBA* Phase 
(<11 steps)
M
Step #k
M
M
M
Step #1
(e)
Final
Block
M
Fig. 1: Algorand System Model. (a) Algorand nodes build a peer-to-peer network. (b) Each user executes cryptographic sortition
algorithm to determine his role. At the time t1 each leader sends his proposed block to all ﬁrst-hop neighbors. Consequently, all
nodes forward their received blocks to their neighbors. (c) The Reduction phase reduces consensus problem to an agreement
on one or two options. In step#1, committee members vote for the highest priority block they received. In step#2, new
committee members count last step votes and re-transmit popular blocks as their vote in the second step. (d) BinaryBA(cid:2) phase
reach agreement on a proposed block from the reduction phase or an empty block. This phase can be followed up (on average
for 11 steps, i.e., k = 11) to ensure that each node agrees on the same consensus. In each step committee members votes for
their observation of the reduction phase. (e) the ﬁnal block would be added to the chain.
nications happen by means of a standard gossip protocol where
each node broadcasts his message to all his peers, who in
turn relay it to their neighbors. The Algorand communication
protocol deﬁnes four types of messages:
1. Transaction: This message transfers a certain amount of
Algos (currency unit in Algorand) from a sender to a receiver
(identiﬁed with their public-keys) and signed by the sender
(with its private key), which is referred to as a transaction.
Multiple transactions are organized into a block. An Algorand
block is either a set of transactions or an empty block. In
addition, each block contains a pre-determined random seed
(described later) and the hash of the previous consensus or
agreed block it is extending.
2. Voting: This message contains a signed vote by the
sender along with the sortition proof (described below). Each
sortition proof is associated with a priority value which is
computed in a deterministic fashion.
3. Block proposal: This message contains a new block (to be
added), along with the signed hash of the block and a sortition
proof establishing the role of the sender as a leader.
4. Credential: This message contains the sortition proof of
the leader, which is generally broadcast at the beginning of
each round by the leader using the gossip protocol. Peer nodes
employ the priority values extracted from sortition proofs in
the credential messages to avoid relaying block proposals with
low priorities. This helps preventing congestion in the network
due to a signiﬁcantly large number of block proposals.
3) Consensus or Byzantine Agreement: Algorand’s consen-
sus or Byzantine Agreement (denoted as BA(cid:2)) protocol oper-
ates in rounds, where in each round all nodes attempt to reach
agreement on a new block of transactions. At the beginning of
a round, each node employs cryptographic sortition to privately
determine if it is a block proposer or leader, i.e., has the right
to propose a block for that round. To propose a block, each