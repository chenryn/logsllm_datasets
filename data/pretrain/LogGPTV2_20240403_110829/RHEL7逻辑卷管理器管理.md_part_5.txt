# [⁠]{#LVM_administration.html#metadatadaemon}3.6. 元数据守护进程（lvmetad） {.title}
:::
[]{#LVM_administration.html#idm140426165565872
.indexterm}[]{#LVM_administration.html#idm140426165564912 .indexterm}
::: para
LVM 可选择性使用中央元数据缓存，通过守护进程（`lvmetad`{.command}）和
`udev`{.literal} 规则实施。该元数据守护进程有两个主要目的：提高 LVM
命令性能，同时允许 `udev`{.literal}
自动激活逻辑卷或整个卷组使其在该系统中可用。
:::
::: para
将 LVM 配置为通过在 `lvm.conf`{.filename} 配置文件中将
`global/use_lvmetad`{.literal} 变量设定为 1
使用该守护进程。这是默认值。有关 `lvm.conf`{.filename}
配置文件的详情请参考 [附录 B, *LVM
配置文件*](#config_file.html){.xref}。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
目前还不跨集群节点支持 `lvmetad`{.command}
守护进程，同时要求锁定类型为本地基于文件的锁定。使用
`lvmconf --enable-cluster/--disable-cluster`{.command}
命令时，会正确配置 `lvm.conf`{.filename} 文件，包括
`use_lvmetad`{.literal} 设置（`locking_type=3`{.literal} 应为 0）。
:::
:::
:::
::: para
如果将 `use_lvmetad`{.literal} 的值从 1 改为
0，则必须重启或使用以下命令手动停止 `lvmetad`{.literal} 服务：
:::
``` screen
# systemctl stop lvm2-lvmetad.service
```
::: para
通常每个 LVM
命令执行一次磁盘扫描查找所有相关物理卷，并读取卷组元数据。但如果元数据守护进程正在运行且已启动，则可跳过这个耗时的扫描。同时
`lvmetad`{.command} 守护进程在其可用时，会根据 `udev`{.literal}
规则对每个设备只扫描一次。这样可节省大量 I/O，同时减少完成 LVM
操作所需时间，尤其是对有很多磁盘的系统。
:::
::: para
当在运行时有新卷组可用时（例如通过热插拔或者
iSCSI），则不必须激活其逻辑卷方可使用。启用 `lvmetad`{.command}
守护进程后，可使用 `lvm.conf`{.filename} 配置文件中的
`activation/auto_activation_volume_list`{.literal}
选项配置一系列可自动激活的卷组和（/或者）逻辑卷。如果没有`lvmetad`{.command}
守护进程，则需要手动进行该操作。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
运行 `lvmetad`{.command} 守护进程时，如果执行
`pvscan --cache device`{.command} 命令，则不会应用
`/etc/lvm/lvm.conf`{.filename} 文件中的 `filter =`{.literal}
设置。要过滤设备，则需要使用 `global_filter =`{.literal} 设置。LVM
不会打开无法通过全局过滤的设备，也永远不会对其进行扫描。您可能需要使用全局过滤器，例如：当中
VM 中使用 LVM 设备，但不想要物理主机扫描 VM 中的设备内容。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_administration.html#lvmdisplaycommand}3.7. 使用 `lvm`{.command} 命令显示 LVM 信息 {.title}
:::
::: para
`lvm`{.command} 命令提供几个可用来显示 LVM 支持和配置的内置选项。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `lvm dumpconfig`{.command}
    :::
    ::: para
    显示载入 `/etc/lvm/lvm.conf`{.filename} 文件及其他任何配置文件后的
    LVM 配置信息。有关 LVM 配置文件的详情，请查看 [附录 B, *LVM
    配置文件*](#config_file.html){.xref}。
    :::
-   ::: para
    `lvm devtypes`{.command}
    :::
    ::: para
    显示可识别的内建块设备类型（Red Hat Enterprise Linux 发行本
    6.6及之后的产品）。
    :::
-   ::: para
    `lvm formats`{.command}
    :::
    ::: para
    显示可识别元数据格式。
    :::
-   ::: para
    `lvm help`{.command}
    :::
    ::: para
    显示 LVM 帮助信息。
    :::
-   ::: para
    `lvm segtypes`{.command}
    :::
    ::: para
    显示可识别逻辑卷片段类型。
    :::
-   ::: para
    `lvm tags`{.command}
    :::
    ::: para
    显示这个主机中定义的标签。有关 LVM 对象标签的详情，请查看 [附录 C,
    *LVM 对象标签*](#lvm_tags.html){.xref}。
    :::
-   ::: para
    `lvm version`{.command}
    :::
    ::: para
    显示当前版本信息。
    :::
:::
:::
:::
[]{#LVM_CLI.html}
::: chapter
::: titlepage
# [⁠]{#LVM_CLI.html#LVM_CLI}第 4 章 使用 CLI 命令管理 LVM {.title}
:::
::: para
本章总结了可使用 LVM 命令行界面（CLI）创建和维护逻辑卷的独立管理任务。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
如果要为集群环境生成或者修改 LVM 卷，则必须确定正在运行
`clvmd`{.command} 守护进程。有关详情请参考 [第 3.1 节 "在集群中创建 LVM
卷"](#LVM_administration.html#cluster_setup){.xref}。
:::
:::
:::
::: para
除 LVM 命令行界面（CLI）外，还可以使用系统存储管理器（System Storage
Manager，SSM）配置 LVM 逻辑卷。有关将 SSM 与 LVM
合用的详情，请查看*《存储管理指南》*。
:::
::: section
::: titlepage
# [⁠]{#LVM_CLI.html#CLI_usage}4.1. 使用 CLI 命令 {.title}
:::
::: para
LVM CLI 命令有一些常规功能。
:::
[]{#LVM_CLI.html#idm140426155142592
.indexterm}[]{#LVM_CLI.html#idm140426171929776 .indexterm}
::: para
命令行参数中需要指定大小时，可以明确指定单位。如果不指定单位，那么就使用默认的
KB 或者 MB。LVM CLI 不接受分数。
:::
::: para
LVM 指定单位时要无需区分大小写，比如 M 或者 m 的效果是一样的，例如 2
的乘方（乘 1024）。但是，在某个命令中指定 `--units`{.option}
参数时，小写表示该单位乘 1024，而大写表示该单位乘 1000。
:::
[]{#LVM_CLI.html#idm140426157452896
.indexterm}[]{#LVM_CLI.html#idm140426157805184 .indexterm}
::: para
在使用卷组或者逻辑卷名称作为命令参数时，完整路径名称是可选项。可将卷组
`vg0`{.filename} 中的逻辑卷 `lvol0`{.filename} 指定为
`vg0/lvol0`{.filename}。如果要求列出卷组列表，但却为空白，则会使用所有卷组列表替换。如果需要列出逻辑卷列表，但给出的是卷组，则会使用该卷组中的所有逻辑卷列表替换。例如：`lvdisplay vg0`{.command}
命令将显示卷组 `vg0`{.filename} 中的所有逻辑卷。
:::
[]{#LVM_CLI.html#idm140426179731584 .indexterm}
::: para
所有 LVM 命令都接受 `-v`{.option} 参数，多输入几次 v
可提高输出的详细程度。例如：以下示例显示的是 `lvcreate`{.command}
命令的默认输出。
:::
``` screen
# lvcreate -L 50MB new_vg
  Rounding up size to full physical extent 52.00 MB
  Logical volume "lvol0" created
```
::: para
下面是使用 `-v`{.option} 参数的 `lvcreate`{.command} 命令输出结果。
:::
``` screen
# lvcreate -v -L 50MB new_vg
    Finding volume group "new_vg"
  Rounding up size to full physical extent 52.00 MB
    Archiving volume group "new_vg" metadata (seqno 4).
    Creating logical volume lvol0
    Creating volume group backup "/etc/lvm/backup/new_vg" (seqno 5).
    Found volume group "new_vg"
    Creating new_vg-lvol0
    Loading new_vg-lvol0 table
    Resuming new_vg-lvol0 (253:2)
    Clearing start of logical volume "lvol0"
    Creating volume group backup "/etc/lvm/backup/new_vg" (seqno 5).
  Logical volume "lvol0" created
```
::: para
还可以使用 `-vv`{.option}、`-vvv`{.option} 或者 `-vvvv`{.option}
参数提高命令执行的详细程度。`-vvvv`{.option}
参数可以提供最多的信息。以下是 ` lvcreate`{.command} 命令使用
`-vvvv`{.option} 参数时输出结果的前几行。
:::
``` screen
# lvcreate -vvvv -L 50MB new_vg
#lvmcmdline.c:913         Processing: lvcreate -vvvv -L 50MB new_vg
#lvmcmdline.c:916         O_DIRECT will be used
#config/config.c:864       Setting global/locking_type to 1
#locking/locking.c:138       File-based locking selected.
#config/config.c:841       Setting global/locking_dir to /var/lock/lvm
#activate/activate.c:358       Getting target version for linear
#ioctl/libdm-iface.c:1569         dm version   OF   [16384]
#ioctl/libdm-iface.c:1569         dm versions   OF   [16384]
#activate/activate.c:358       Getting target version for striped
#ioctl/libdm-iface.c:1569         dm versions   OF   [16384]
#config/config.c:864       Setting activation/mirror_region_size to 512
...
```
[]{#LVM_CLI.html#idm140426113076304
.indexterm}[]{#LVM_CLI.html#idm140426113075344 .indexterm}
::: para
可以用命令的 `--help`{.option} 参数来显示任意 LVM CLI 命令的帮助信息。
:::
``` screen
# commandname --help
```
[]{#LVM_CLI.html#idm140426168696368 .indexterm}
::: para
要显示某个命令的 man page，请执行 `man`{.command} 命令：
:::
``` screen
# man commandname
```
::: para
`man lvm`{.command} 命令提供有关 LVM 的常规在线信息。
:::
::: para
所有 LVM 对象均使用创建该对象时分配的 UUID
作为内部参考。这在删除作为卷组一部分的名为 `/dev/sdf`{.filename}
的物理卷时很有用，因为将其插回后，它的名称会变为
`/dev/sdk`{.filename}。LVM 仍可以找到该物理卷，因为它是根据其 UUID
而不是其设备名称识别。有关创建物理卷时指定物理卷 UUID 详情的信息，请查看
[第 6.4 节
"恢复物理卷元数据"](#troubleshooting.html#mdatarecover){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_CLI.html#physvol_admin}4.2. 物理卷管理 {.title}
:::
[]{#LVM_CLI.html#idm140426158749136
.indexterm}[]{#LVM_CLI.html#idm140426158747696 .indexterm}
::: para
本小节论述了管理物理卷不同方面的命令。
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#physvol_create}4.2.1. 创建物理卷 {.title}
:::
[]{#LVM_CLI.html#idm140426156242992
.indexterm}[]{#LVM_CLI.html#idm140426156241552 .indexterm}
::: para
以下小节描述了创建物理卷时使用的命令。
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#partition_type}4.2.1.1. 设定分区类型 {.title}
:::
[]{#LVM_CLI.html#idm140426114213840 .indexterm}
::: para
如果您的物理卷使用整张磁盘设备，该磁盘不得有任何分区表。如果使用 DOS
磁盘分区，则应使用 `fdisk`{.command} 或者 `cfdisk`{.command}
命令或对等的命令将分区 id 设定为
0x8e。如果使用整个磁盘设备，则只需要删除分区表，即彻底破坏该磁盘中的数据即可。可使用以下命令将第一扇区归零，从而删除现有分区：
:::
``` screen
# dd if=/dev/zero of=PhysicalVolume bs=512 count=1