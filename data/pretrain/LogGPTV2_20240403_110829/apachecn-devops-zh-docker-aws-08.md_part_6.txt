      overrides=event['ResourceProperties'].get('Overrides',{}),
      count=1,
      startedBy=event['RequestId']
    )
    # Extract the ECS task ARN from the return value from the run_task call
    task = tasks['tasks'][0]['taskArn']
    print("Started ECS task %s" % task)
    # Creates a waiter object that polls and waits for ECS tasks to reached a stopped state
    # http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#waiters
    waiter = client.get_waiter('tasks_stopped')
    # Wait for the task ARN that was run earlier to stop
    waiter.wait(
      cluster=event['ResourceProperties']['Cluster'],
      tasks=[task],
    )
    # After the task has stopped, get the status of the task
    # http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#ECS.Client.describe_tasks
    result = client.describe_tasks(
      cluster=event['ResourceProperties']['Cluster'],
      tasks=[task]
    )
    # Get the exit code of the container that ran
    exitCode = result['tasks'][0]['containers'][0]['exitCode']
    # Return failure for non-zero exit code, otherwise return success
    # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html for more details on cfnresponse module
    if exitCode > 0:
      print("ECS task %s failed with exit code %s" % (task, exitCode))
      cfnresponse.send(event, context, cfnresponse.FAILED, {}, task)
else:
      print("ECS task %s completed successfully" % task)
      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, task)
  except Exception as e:
    print("A failure occurred with exception %s" % e)
    cfnresponse.send(event, context, cfnresponse.FAILED, {})
```
Creating an inline Lambda function using CloudFormation
在高层次上，自定义资源函数接收 CloudFormation 自定义资源事件，并从 AWS Python SDK 调用 ECS 服务的`run_task`方法，传入 ECS 集群、ECS 任务定义和可选覆盖来执行。然后，该函数等待任务完成，检查 ECS 任务的结果以确定关联的容器是否成功完成，然后以成功或失败来响应云信息。
请注意，该函数导入了一个名为`cfnresponse`的模块，该模块包含在 AWS Lambda Python 运行时环境中，为响应 CloudFormation 自定义资源请求提供了一个简单的高级机制。该函数还导入了一个名为`boto3`的模块，该模块提供了 AWS Python SDK，并用于创建一个`client`对象，该对象专门与 ECS 服务交互。然后，Lambda 函数定义了一个名为`handler`的函数，这是传递给 Lambda 函数的新事件的入口点，请注意，`handler`函数必须接受一个包含 CloudFormation 自定义资源事件的`event`对象和一个提供 Lambda 环境运行时信息的`context`对象。请注意，该函数应该只尝试为 CloudFormation 创建和更新请求运行一个任务，并且可以在收到删除自定义资源的请求时简单地返回成功，因为给定的任务是短期资源。
The code in the preceding example is by no means production-level code and has been simplified for demonstration purposes to only handle two primary scenarios related to success and failure.
# 了解自定义资源 Lambda 函数资源
现在您已经理解了 Lambda 函数代码的实际工作原理，让我们关注您在前面的示例中添加的配置的剩余部分。
`EcsTaskRunner`资源定义了 Lambda 函数，这里描述了关键配置属性:
*   `FunctionName`:函数的名称。要理解函数命名的一个重要方面是，用于存储函数日志的相关 CloudWatch 日志组必须遵循`/aws/lambda/`的命名约定，并且您可以看到`FunctionName`属性与`EcsTaskRunnerLogGroup`资源的`LogGroupName`属性相匹配。请注意，`EcsTaskRunner`还必须根据`DependsOn`设置的配置声明对`EcsTaskRunnerLogGroup`资源的依赖。
*   `Handler`:以`.`格式指定 Lambda 函数的入口点。请注意，当使用内联代码机制时，为您的 Lambda 函数创建的模块将始终被称为`index`。
*   `Timeout`:重要的是要明白，在写的时候，Lambda 有一个最大的五分钟(300 秒)超时，这意味着你的功能必须在五分钟内完成，否则它们将被终止。Lambda 函数的默认超时时间为 3 秒，由于部署新的 ECS 任务、运行 ECS 任务并等待任务完成确实需要时间，因此该超时时间已增加到 300 秒的最大超时时间。
*   `Role`:定义要分配给 Lambda 函数的 IAM 角色。请注意，引用的`EcsTaskRunnerRole`资源必须信任 lambda.amazonaws.com，如果您想要捕获任何日志，至少每个 Lambda 函数都必须有权限写入关联的 CloudWatch 日志组。ECS 任务运行器功能需要运行和描述 ECS 任务的权限，条件的使用被配置为仅将这些权限授予栈中定义的 ECS 集群。
# 创建自定义资源
既然您的定制资源 Lambda 函数和相关的支持资源已经就绪，您就可以定义实际的定制资源对象了。对于我们的用例，我们需要定义一个自定义资源，该资源将在我们的应用容器中运行`python3 manage.py migrate`命令，并且给定迁移任务与应用数据库交互，该任务必须配置定义与应用数据库资源连接的各种数据库环境变量。
一种方法是利用您之前创建的`ApplicationTaskDefinition`资源并指定一个命令覆盖，然而一个问题是`ApplicationTaskDefinition`包含`collectstatic`容器，我们并不真的希望在您运行迁移时运行该容器。为了克服这一点，您需要创建一个名为`MigrateTaskDefinition`的单独任务定义，它只包含一个专门运行数据库迁移的容器定义:
```
...
...
Resources:
 MigrateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
 Properties:
 Family: todobackend-migrate
 ContainerDefinitions:
 - Name: migrate
 Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}
 MemoryReservation: 5
 Cpu: 5
 Environment:
 - Name: DJANGO_SETTINGS_MODULE
 Value: todobackend.settings_release
 - Name: MYSQL_HOST
 Value: !Sub ${ApplicationDatabase.Endpoint.Address}
 - Name: MYSQL_USER
 Value: todobackend
 - Name: MYSQL_PASSWORD
 Value: !Ref DatabasePassword
 - Name: MYSQL_DATABASE
 Value: todobackend
Command: 
 - python3
 - manage.py
 - migrate
 - --no-input
 LogConfiguration:
 LogDriver: awslogs
 Options:
 awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend
 awslogs-region: !Ref AWS::Region
 awslogs-stream-prefix: docker
  EcsTaskRunner:
    Type: AWS::Lambda::Function
...
...
```
Creating a migrate task definition
在前面的示例中，请注意`MigrateTaskDefinition`资源需要配置与数据库相关的环境变量，但是不需要您之前在`ApplicationTaskDefinition`资源中配置的卷映射或端口映射。
有了这个任务定义，您现在可以创建自定义资源，如下例所示:
```
...
...
Resources:
 MigrateTask:
 Type: AWS::CloudFormation::CustomResource
 DependsOn:
 - ApplicationAutoscaling
 - ApplicationDatabase
 Properties:
 ServiceToken: !Sub ${EcsTaskRunner.Arn}
 Cluster: !Ref ApplicationCluster
 TaskDefinition: !Ref MigrateTaskDefinition MigrateTaskDefinition:
     Type: AWS::ECS::TaskDefinition
   ...
   ...
   ApplicationService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationAutoscaling
      - ApplicationLogGroup
      - ApplicationLoadBalancerHttpListener
 - MigrateTask
Properties:
...
...
```
Creating a migrate task custom resource
在前面的示例中，请注意您的自定义资源是使用`AWS::CloudFormation::CustomResource`类型创建的，并且您创建的每个自定义资源都必须包含`ServiceToken`属性，该属性引用相关自定义资源 Lambda 函数的 ARN。其余的属性特定于您的自定义资源函数，在我们的例子中，它必须至少指定需要执行的任务的目标 ECS 集群和 ECS 任务定义。请注意，自定义资源包含依赖项，以确保它仅在创建`ApplicationAutoscaling`和`ApplicationDatabase`资源后运行，并且您还需要在本章前面创建的`ApplicationService`资源上添加依赖项，以便在`MigrateTask`自定义资源成功完成之前不会创建或更新该资源。
# 部署自定义资源
您现在可以使用`aws cloudformation deploy`命令部署您的更改了。部署云信息栈更改时，一旦云信息开始创建自定义资源并调用您的 Lambda 函数，您就可以导航到 AWS Lambda 控制台来查看您的 Lambda 函数并检查函数日志。
CloudFormation custom resources can be time-consuming to initially get working, particularly if your code throws exceptions and you don't have appropriate code to catch these exceptions and send failure responses. It is possible for you to end up waiting several hours for a custom resource action to timeout, because your custom resource threw an exception and did not return an appropriate failure response to CloudFormation.
下面的截图演示了如何在 AWS Lambda 控制台中查看从您的云信息栈创建的`todobackend-ecsTasks` Lambda 函数:
![](img/eb137671-2741-4ba2-8634-1079e75d3526.png)
Viewing Lambda functions in the AWS console
在前面的截图中，**配置**选项卡提供了关于您的函数的配置细节，甚至包括一个内联代码编辑器，您可以在其中查看、测试和调试您的代码。**监控**选项卡提供对您的功能的各种指标的访问，并包括一个有用的**跳转到日志**链接，该链接将您直接带到 CloudWatch 日志中您的功能的日志:
![](img/6adc9b11-80cc-4199-b42f-94ef997e1f74.png)
Viewing Lambda function logs in the AWS console
在前面的截图中，START 消息指示了函数被调用的时间，您可以看到一个状态为 SUCCESS 的响应主体被生成，它被发布到 CloudFormation 自定义资源响应 URL。
现在也是查看您的 ecs 任务的 CloudWatch 日志的好时机—显示了**/todo backnd/ECS/todo backnd**日志组，这是在您的 CloudFormation 栈中配置的日志组，它收集应用的所有 ECS 任务日志。请注意，有几个日志流——一个用于生成静态任务的**收集静态**容器，一个用于运行迁移的**迁移**容器，以及一个用于主到后台应用的日志流。请注意，每个日志流都在日志流名称的末尾包含 ECS 任务标识-这些与您使用 ECS 控制台或 AWS CLI 交互的 ECS 任务标识直接相关:
![](img/03520e7d-967e-43de-a3cd-855c822ebe16.png)
ECS log groups in CloudWatch logs
# 验证应用
作为最后的检查，示例应用现在应该完全正常工作了——例如，在早期失败的 todos 链接现在应该可以工作了，如下面的屏幕截图所示。
您可以与 API 交互来添加或删除待办事项，现在您的所有待办事项都将保存在栈中定义的应用数据库中:
![](img/98dcd51c-619f-4fde-bab1-95f5526d88bb.png)
Working todobackend application
# 摘要
在本章中，您使用 ECS 成功地将示例 Docker 应用部署到了 AWS。您学习了如何定义关键的支持应用和基础架构资源，包括如何使用 AWS RDS 服务创建应用数据库，以及如何将您的 ECS 应用与 AWS 弹性负载平衡服务提供的应用负载平衡器集成。
有了这些支持资源，您学习了如何创建控制容器运行时配置的 ECS 任务定义，然后通过为示例应用创建 ECS 服务，将 ECS 任务定义的实例部署到 ECS 集群。您学习了 ECS 任务定义如何定义卷和多个容器定义，并使用此功能创建了一个独立的非必需容器定义，该定义总是在部署 ECS 任务定义时运行，并为示例应用生成静态 web 文件。您还将示例应用的 ECS 服务与栈中的各种应用负载平衡器资源集成在一起，确保以高度可用的方式在 ECS 服务的多个实例之间对应用的连接进行负载平衡。
虽然您能够成功地将您的应用部署为 ECS 服务，但是您发现您的应用没有完全运行，因为为您的应用数据库建立模式和表的数据库迁移还没有运行。您通过创建 ECS 任务运行器云信息定制资源解决了这个问题，该资源允许您在每个应用部署中将迁移作为单次任务运行。自定义资源被定义为用 Python 编写的简单 Lambda 函数，它首先在给定的 ECS 集群上为给定的 ECS 任务定义运行一个任务，等待任务完成，然后根据与任务相关联的容器的退出代码报告任务的成功或失败。
有了这个定制资源，您的示例应用现在已经完全正常运行了，尽管它仍然有一些不足。在下一章中，我们将解决其中的一个缺陷，即机密管理和确保密码保密，这对安全的生产级 Docker 应用至关重要。
# 问题
1.  对/错:无线电数据系统实例要求您创建至少有两个子网的数据库子网组。
2.  配置应用负载平衡器时，哪些组件服务终端用户的前端连接？
3.  对/错:在创建应用负载平衡器侦听器之前，目标组可以接受来自目标的注册。
4.  当配置允许应用数据库和 ECS 容器实例之间访问的安全组规则时，您会收到一个关于循环依赖关系的 CloudFormation 错误。您可以使用什么类型的资源来解决这个问题？
5.  您可以配置包含两个容器定义的 ECS 任务定义。其中一个容器定义执行一个简短的配置任务，然后退出。您发现 ECS 正在根据此任务定义持续重新启动 ECS 服务。您如何解决这个问题？
6.  您可以配置哪个 CloudFormation 参数来定义对其他资源的显式依赖？
7.  true/False:cloud information 自定义资源使用 AWS Lambda 函数来执行自定义资源调配任务。
8.  当接收 CloudFormation 自定义资源事件时，您需要处理哪三种类型的事件？
9.  您创建了一个带有内联 Python 函数的 Lambda 函数，该函数执行自定义配置任务，但是当试图查看该函数的日志时，不会向 CloudWatch 日志中写入任何内容。您确认日志组名称已为该功能正确配置。问题最可能的原因是什么？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   CloudFormation RDS 实例资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-properties-RDS-database-Instance . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html)
*   CloudFormation 应用负载平衡器资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-elastic cloadbalancing v2-Load Balancer . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html)
*   CloudFormation 应用负载平衡器侦听器资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-elastic cloadbalancingv2-Listener . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html)
*   CloudFormation 应用负载平衡器目标组资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-elastic cloadbalancingv2-Target Group . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html)
*   CloudFormation ECS 任务定义资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-ECS-Task Definition . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html)
*   CloudFormation ECS 服务资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-ECS-Service . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)
*   CloudFormation Lambda 函数资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-Lambda-Function . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html)
*   CloudFormation Lambda 函数代码:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-properties-Lambda-Function-Code . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html)
*   CloudFormation 自定义资源文档:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/template-Custom-resources . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html)
*   CloudFormation 自定义资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/crpg-ref . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref.html)