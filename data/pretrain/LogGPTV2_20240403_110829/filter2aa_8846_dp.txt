DES 的 16 轮变换和 56 位密钥不够安全，现在计算机速度这么快，早就可以很快破解了。
完成可以再多变换几轮，可以用 2 到 3 个密钥甚至更多的密钥来搞好几个 DES 来回变换，把机
器都转晕了。这里要了解 4 种 3 重 DES 的方法：
E 代表 1 次 16 轮的 DES 加密；数字代表密钥的个数；P 代表明文；C 代表密文；E(K,P)代
表用密钥 K 对 P 进行加密；D 代表解密。
①DES-EEE3，C=E（K1,E（K2，E(K3，P)））,有效密钥=56×3＝168 位。看不懂就换个方
式表达：EEE3 就是用 3 个密钥分别加密 3 次。
②DES-EDE3，C=E（K1,D（K2，E(K3，P)）），与①一样，第二次是解密，不是加密。
③DES-EEE2，C=E（K1,E（K2，E(K1，P)）），与①一样，只用 2 个密钥，共 112 位。
④DES-EDE2，C=E（K1,D（K2，E(K1，P)）），与②一样，第二次解密，用 2 个密钥。
为什么用三重而不是两重 DES 呢，因为两重的加密强度与一重相比并没有提升（通过使用
中间相遇攻击）。
3.国际数据加密算法(IDEA) International Data Encryption Algorithm
IDEA 的算法和 DES 是一样的，只是扩充了密钥的长度。它对 64 位字串进行异或（XOR）
和求模（MOD）操作，将 128 位密钥分解成 52 个 16 位密钥来用，可以使用 DES 的前四种转换
模式（分组加密运算方式），不能使用 CTR 模式。IDEA 最重要的应用就是 PGP（可靠隐私安全
—84—
电子邮件系统）。
PGP（Pretty Good Privacy）有两版本：商业版本使用 RSA 进行密钥交换，使用 IDEA 进
行加密/解密，使用 MD5 生成消息摘要；免费版本则使用 Diffie-Hellman 进行密钥交换，使用
Carlisle Adams/Stafford Tavares (CAST) 128 位算法进行加密/解密，使用 SHA-1 生成消息
摘要。
4.Blowfish
Blowfish 比 IDEA 和 DES 更快，也是 64 位变换，还扩展了密钥的强度和灵活性，密钥长
度从 32 位到 448 位可变。它是公开免费的算法，用在 LINUX，美国政府没选择用它来代替 DES。
5.Skipjack
美国政府搞的 DES 算法，也是 64 位变换，但使用一个 80 位的密钥。
它支持并集成到 Clipper 和 Capstone 高速加密芯片中；最可怕的是它支持密钥托管，
NIST 和财政部各管部分代码，在法律允许的情况下，美国政府可以随意解密。所以除了政府
强制，没人喜欢用它。
6.RC5 密码 Rivest Cipher 5
RC4 是对称加密，它更是一种流密码。RC4 算法本质上是一个由最长 256 密钥初始化的伪
随机数发生器（PRNG），其产生的密钥流与明文进行异或。它速度是最快的，但效率低，很快
被破解了，无线的 WEP 加密就用了它。它密钥长度可变，现在用于 SSL。
RC5 是 RSA 数据安全公司的商秘算法，收费的。RC5 就不是固定的对 64 位字串进行变换
了，它支持可变的字串长度（32、64、128 位）和可变的密钥长度（0-2048 位）和可选的加密
轮数（最多 255 轮）。
7.高级加密标准(AES) Advanced Encryption Standard
2000 年，美国总算搞出来 DES 的升级替代算法了，基于 Rijndael 算法。它采用密码块链
接消息认证码协议(CCMP)的计数器模式。商业部要求所有非政府的密级信息要用这个来加密，
它的特点就是有 3 种密钥长度和加密强度：
128 位密钥进行 10 轮加密；192 位 12 轮；256 位 14 轮（40 年可破）。
身为加密协议的 CCMP 是 802.lli 无线局域网标准的一个组成部分。CCMP 协议基于 AES，
其中 CRT 模式是它的加密算法。CBC-MAC(CCM)模式则用于消息完整性运算。
CCMP 中的 AES 处理必须使用 AES 128 位密钥、128 位数据块（分组）和一个 48 位的初始
向量 IV，且根据美国联邦信息处理标准，AES 算法(一种块密码)使用大小为 128 位的块，长度
为 128、192 和 256 位的密码密钥，运算轮数相对为 10、12 和 14 轮，CCMP 使用了 128 位密钥
和一个 48 位 IV，可以最大限度减少面对重放攻击的脆弱性。CTR 成分可以提供数据隐私保护。
密码块链接消息认证码成分产生了个消息完整性代码可为数据包有效载荷数据提供数据源认
证和数据完整性保护。802.lli 标准包含 CCMP。AES 常被 802.lli 称作加密协议，但 AES 本身
其实只是个块密码，加密协议实际上是 CCMP。
8.Twofish 算法/双鱼-2 个 64 位
Twofish 是另一种 AES ，处理 128 位的字串分组，使用最大 256 位的密钥。
Twofish 用了两种新技术：预白噪声化和后白噪声化（Prewhitening，Postwhitening），
是指用一个独立不同的子密钥来对文本进行变换，提高随机性；预白就是先对明文洗白白，后
—85—
白就是对最后的密文再洗白白。
总结：每种算法的字串分组长度和密钥长度是多少位、可不可变要自己去归纳记忆，虽然
书上有表格，自己不弄，记得不牢。
9.对称密钥的管理/密钥的带外分配
最后要讲一下对称加密最麻烦的事了：分发和管理密钥！
密钥的管理实践包括：密钥的生成、分发、存储、销毁、恢复和托管。其中：
存储密钥要注意两个问题：一是密钥别跟加密的数据存在一起，要另外保管；二是密钥别
完整的存储，要分给 2 个人各保管一半，这就是知识分离原则（split knowledge）（考点）。
10.密钥分配中心(KDC)
在 Kerberos 系统中，详见第五域 B.1 章节，用密钥分配中心 KDC 来管理密钥：
①第一种是主密钥，这是由每个用户和 KDC 共享的私钥。每个用户都有自己的主密钥，用
于加密用户与 KDC 之间的通信流。
②第二种密钥是会话密钥，在需要时创建，在通信会话期间使用，会话结束后废弃。
11.密钥分发
重点讲对称密钥的 3 种分发方法：
①离线分发（Offline Distribution）
就是机要部门经常要干的注钥、换钥工作，将密钥载体通过物理连接直接注入到保密系统
或设备中；最大的缺陷就是密钥在运输过程中可能被截获。
②公钥加密（Public Key Encryption）
许多通信者希望充分利用对称加密算法的速度优势，同时又能克服密钥分发过程中存在的
安全缺陷。方法就是：用公钥算法来验证身份、建立初始通信连接，并传送密钥；用私钥算法
来传送大量数据。一般情况下，私钥加密的速度比公钥快 1000 倍。
③Diffie-Hellman 算法（非对称加密算法）
如果没有可靠的运输途径，没有合适的公钥基础架构，前面 2 种方法都不行。
Diffie-Hellman 算法就是密钥交换算法，它是非对称加密，基于离散对数难题 Discrete
logarithms，也称为指数密钥协商 Exponential Key Agreement。它的基础是收发双方已经约
定了两个很大很大的，独有的，相当于密钥作用的数字；然后就可以放心的交换对称密钥了。
它的基本流程如下：
1.收发双方约定好 2 个很大很大的数字：质数 p 和整数 g，其中 1<g<p。
2.发方自己选一个随机的很大的整数 r；算出一个大 R，R=(gr
) MOD p。
3.收方自己选一个随机的很大的整数 s；算出一个在 S，S=(gs
) MOD p。
4.收发双方互换大 R 和大 S。
5.发方算出密钥 K=(Sr
) MOD p；
6.收方算出密钥 K=(Rs
) MOD p。
为什么两 K 算出来是一样的，我也没搞清楚。反正 K 就可以用作对称密钥了。
这个算法仅用于密钥协商即安全的发送密钥，并不提供数据加密和数字签名的功能。
二、非对称密钥算法/公钥密码学 Asymmetric Key Cryptography/Public Key
—86—
每个人有 2 个密钥，称之为密钥对，即一个公钥、一个私钥；公钥是公开共享的，私钥是
自己独有的，加密和解密必须是一个公、一个私，或者一个私、一个公。这样解决了对称加密
算法的很多不足，带来的优点有：
①随意扩展。有多少用户，就需要多少对密钥，这个量是很少的，也好管理，人再多也不
怕。
②密钥不用经常更新。每个人保护好自己的私钥就行了，如果离职了，就删除自己的密钥，
不影响其它人的加密，也不用换掉全部的密钥。密钥的分发管理也很简单，带内发送就行。
③实现了不可否认性，还有完整性和身份验证。私钥还可以这么用：先对要发送的消息进
行散列运算（MD5 什么的），得到 1 个消息摘要；再用私钥对这个消息摘要进行加密，得到 1
个数字签名；然后把加密的消息、数字签名和公钥都发出去就行了；最后，接收者用它的公钥
解密消息得到消息明文，用公钥解密数字签名得到消息摘要明文，用散列运算得到接收文件的
消息摘要，对比一下消息摘要（散列值）是否一致，就知道这个消息是不是可靠的了。这里面，
消息摘要提供了完整性；数字签名提供了身份验证，也就是不可否认性。
对发送方来说，如果机密性很重要，那么他就会使用接收方的公钥来加密文件。因为只有
拥有相应私钥的人才能进行解密，这称为安全消息格式(secure message format)。
对发送方来说，如果身份验证很重要，那么他会使用自己的私钥来加密数据。这保证了只
有拥有该私钥的人才能加密这些数据，这称为公开消息格式(open message format)。
非对称加密最大的缺点就是运算很慢啊。如果要对大量的传输数据进行加密，最好结合两
份种方法：用非对称系统来建立通信连接，给对方发送 1 个对称系统用的共享密钥；再用对称
系统来加密随后进行的大数据通信。同时使用这两种技术称为混合方法（混合加密），也经常
被称为数字信封(digital envelope)。
下面是几典型的公钥算法：
1.RSA
最著名的、商业的公钥加密系统。基本原理是：大质数的因数分解很难很难，质数就是素
数。它的密钥对是这么算来的：
1.选 2 个很大很在的质数（200 位以上，比密钥还长）p 和 q，算出其乘积 n=p*q。
2.找出合适的数 e 和 d 分别用来生成公钥和私钥，其中：
 ①e<n，且 e 与(n-1)*(q-1)互质；
 ②d 满足(e*d-1) MOD (p-1)(q-1)=0
3.e 和 n 共同作为公钥，d 作为私钥；加解密过程如下：
 C=P
e
MOD n
 P=Cd
MOD n
安全多用途互联网邮件扩展(S/MIME) 协议就使用 RSA 加密算法，并依靠 X.509 证书交换
密钥。S/MIME 还支持 AES 和 3DES 对称加密算法。它目前主要应用于桌面邮件应用程序，并
没用在 Web 电子邮件系统。(需要浏览器插件)。RSA 加密速度很慢，密钥长度一般为 2048 位。
攻击 RSA 算法的三种主要方法是：
①蛮力攻击，尝试所有可能的私钥。
②数学攻击，因子分解两个质数的乘积。
—87—
③T 计时攻击，计量解密算法的运行时间。
2.背包算法 Merkle-Hellman / Merkle-Hellman Knapsack
与 RSA 一样，这种算法也基于因式分解操作的困难性，但是它依赖于被称为超增序列的集
合论组件，而不是依赖于大质数。它在 1984 年被破解了。
3. EI Gamal 算法
对称密码中的 Diffie-Hellman 算法使用大的整数和模数算法来安全交换私钥。1985 年，
T.EI Garnal 博士利用这个原则开发了非对称密钥算法。它是公共免费的，不是商业收费的。
不过它最大的缺点是加密的密文长度比明文增加了 1 倍，如果是窄带传输大数据，这个算法显
然不适用。
4.椭圆曲线密码系统(ECC) Elliptic Curve Cryptosystem
ECC 肯定会考的，它的数学原理很复杂，其基础是椭圆曲线的离散对数问题（ECDLP），
它比 RSA 的质数因数分解、以及 Diffie-Hellman 与 EI Gamal 的标准离散对数还要难。不过
不用了解那么细，知道大概就行了。记住 1024 位的 RSA 密钥强度相当于 160 位的椭圆曲线密
钥强度！它的速度明显比 RSA 快得多。
5.非对称密钥的管理
对称密钥分发很麻烦，那非对称密钥呢，不用操心怎么分发的，只要管好生成与使用环节
就行了。主要做法：选择公开的加密算法；确保密钥完成随机生成；选择合适的密钥长度；个
人必须管好自己的私钥；定期换钥；安全备份密钥。
I.3 公钥基础设施（PKI）
公钥加密系统的 1 个主要优点是可以验证对方的身份，使陌生双方之间的通信更可靠。
而受信任的公钥基础设施(PKI)是实现公钥加密系统的基本条件，它一般结合了非对称和
对称算法以及哈希（散列函数）和数字证书。很像公安制证中心管身份证。PKl 提供下列安全
服务：•机密性；•访问控制；完整性；•身份验证；•不可否认性。
1.证书 Certificates
数字证书（Certificates）不是数字签名（digital signature）。
数字签名可以证明 1 个信息是属于某个密钥对的；
数字证书可以证明这个密钥对是属于某个真实的人或机构的。
怎么证明呢？必须要有一个可信的证书颁发机构（CA）Certificate Authority 来发布被
认可的证书；你要想拥有证书，就必须带一堆资料去 CA 做实名验证和登记，这样 CA 才发布证
书来代表真实唯一的你。
数字证书的国际标准是 X.509（X.500 电子目录服务系列标准中的），它用在了 SSL 中，
它规定数字证书的数据包括以下内容：
①X.509 版本号；②序列号（CA 编号）；③签名算法标识符；④发布者（CA）；⑤有效期；
⑥证书主体（持有人的唯一名字）；⑦主体的公钥。
这里插播一下 SSL：
安全套接字(SSL) Secure Sockets Layer 和安全传输层协议(TLS) Transport Layer