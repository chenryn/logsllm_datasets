Contrast: https://github.com/elastic/elasticsearch/blob/master/rest-api-
spec/api/search.json#L160-L162
with (admittedly incomplete but not more so than your spec)
https://github.com/bitemyapp/bloodhound/blob/master/src/Database/Bloodhound/Types.hs#L536-L544
https://github.com/bitemyapp/bloodhound/blob/master/src/Database/Bloodhound/Types.hs#L601-L629
https://github.com/bitemyapp/bloodhound/blob/master/src/Database/Bloodhound/Types.hs#L823-L832
https://github.com/bitemyapp/bloodhound/blob/master/src/Database/Bloodhound/Types.hs#L1729-L1742
People are using Bloodhound in production.
I would suggest that a more complete spec is needed to assist client library
authors, but I know how annoying maintaining documentation is. Given that,
consider that Bloodhound (which has tests) can be tested against Elasticsearch
to ensure spec correctness. Have you considered making an explicit spec via a
client library in a language with explicit datatypes that was high enough
level to make it usable for a casual reader?
Part of what exacerbates the situation with the spec is that your docs do
_not_ show complete or working examples, they show fragments of the complete
JSON document that would be required to work, the reader is expected to
  1. Know this
  2. Manually inject the fragment you're showing them into the rest of the structure which is not well explained or connected to the individual doc page they're on
The problems with 1 and 2 are compounded by the fact that it's _extremely_
easy to get the JSON structure wrong, then you are now faced with the prospect
of making fiddly little changes to the JSON over and over until works.
Thus, datatypes that take care of the JSON for you.
The _primary_ complaints I hear from people about Elasticsearch are the docs &
API. It makes what is otherwise a very useful product considerably more
frustrating to use than it needs to be.