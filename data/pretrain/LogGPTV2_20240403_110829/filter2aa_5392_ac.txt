.PP
控制字符 ^D 和 ^Z, 以及 _\|_END_\|_ 和 _\|_DATA_\|_ 变量可以表示文件的逻辑结束. 其后的文本被忽略.
.PP
_\|_DATA_\|_ 之后的文本可以通过文件句柄`PACKNAME::DATA'\fR 读取,`PACKNAME'\fR 是 _\|_DATA_\|_ 所在的包的名称. 句柄指向_\|_DATA_\|_ 后面的文本. 读取结束程序会自动关闭该句柄`close DATA'\fR. 为了与 _\|_DATA_\|_ 还没有出现以前已经存在的程序兼容, _\|_END_\|_ 在顶级脚本中与 _\|_DATA_\|_ 性质相同(在用`require'\fR 或`do'\fR 调用时是不同的) 不过可以通过`main::DATA'\fR 来调用其中的内容.
.PP
参见 SelfLoader 详细了解 _\|_DATA_\|_, 其中还有例子. 要注意在BEGIN 块中无法读取DATA句柄: 因为BEGIN 块在编译时即被执行, 而此时 _\|_DATA_\|_ (或 _\|_END_\|_) 还未被程序看到.
.PP
\fI裸词\fR
.\".IX Subsection "Barewords"
.PP
在文法上没有特殊意义的词语都被看作字符串. 称之为 "裸词". 和文件句柄以及标签一样, 仅包含小写字母的裸词有可能在将来与程序中的保留词发生冲突, 实际上,当你使用`use warnings'\fR 语句,或是\fB\-w\fR 选项时, Perl会对此提出警告. 一些人可能希望完全禁止这样的词. 如果有如下语句:
.PP
.nf
\&    use strict 'subs';
.fi
.PP
那么不能被解释为子程序的裸词会引起编译时错误. 这种限制到块结束时终止. 而内部的块可以撤消这一限制, 用`no strict 'subs''\fR
.PP
\fI数组合并分隔符\fR
.\".IX Subsection "Array Joining Delimiter"
.PP
数组和序列被合并为双引号引用的字符串时，以变量$"\fR 指定的值 (如果指定了\[lq]use English;\[rq] 那么是$LIST_SEPARATOR\fR 的值) 作为分隔符，默认是空格。下列语句等价：
.PP
.nf
\&    $temp = join($", @ARGV);
\&    system "echo $temp";
.fi
.PP
.nf
\&    system "echo @ARGV";
.fi
.PP
在搜索模式中(在双引号字符串中也是)有一个易混淆之处:`/$foo[bar]/'\fR 应该是`/${foo}[bar]/'\fR (`[bar]'\fR 是正则表达式的字符类) 还是`/${foo[bar]}/'\fR/ (`[bar]'\fR 是数组@foo\fR 的下标) 呢? 如果@foo\fR 不存在, 那很明显它应该是字符类. 如果@foo\fR 存在, Perl 会尽力猜测`[bar]'\fR 的含义, 且它几乎总是对的. 如果它猜错了, 或者你比较偏执, 你可以使用花括号.
.PP
here\-document 的语法已经被移动到 perlop 中的\[lq]Quote and Quote-like Operators\[rq]
.SS "List value constructors 列表值构造"
.\".IX Subsection "List value constructors"
列表是用逗号分开的各个值组成的(如果优先级需要的话,外面还要用圆括号包围):
.PP
.nf
\&    (LIST)
.fi
.PP
在不需要列表的上下文中, 列表的值是最后一个元素的值, 这与C中的逗号操作符类似. 例如:
.PP
\&    @foo = ('cc', '-E', $bar);
.PP
将列表赋给数组@foo, 但是
.PP
\&    $foo = ('cc', '-E', $bar);
.PP
将$bar 的值赋给$foo. 注意, 数组在标量上下文中的值是数组的长度; 下例将3赋给$foo:
.PP
.nf
\&    @foo = ('cc', '-E', $bar);
\&    $foo = @foo;                # $foo gets 3
.fi
.PP
列表的最后可以输入逗号, 所以这样也是正确的:
.PP
.nf
\&    @foo = (
\&        1,
\&        2,
\&        3,
\&    );
.fi
.PP
要将here-document 赋给数组, 一行作为一个元素, 可以这样作:
.PP
.nf
\&    @sauces = '\fR 操作符会更易读.`=>'\fR 与逗号作用相同, 不过它
还有一个作用, 那就是可以使它左侧的对象被解释为字符串: 如果该对象是裸
字的话,将是合法的标识符 (`=>'\fR 不引用包含双冒号的复合标识符). 这在初始
化哈希时棒极了:
.PP
.nf
\&    %map = (
\&                 red   => 0x00f,
\&                 blue  => 0x0f0,
\&                 green => 0xf00,
\&   );
.fi
.PP
或者初始化哈希的引用:
.PP
.nf
\&    $rec = {
\&                witch => 'Mable the Merciless',
\&                cat   => 'Fluffy the Ferocious',
\&                date  => '10/31/1776',
\&    };
.fi
.PP
or for using call-by-named-parameter to complicated functions: