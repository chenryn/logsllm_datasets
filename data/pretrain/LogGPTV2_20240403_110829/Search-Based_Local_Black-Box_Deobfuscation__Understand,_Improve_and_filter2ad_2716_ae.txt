EA
VR-EA
EA-ED
(a) Enhancement rate
)
s
(
e
m
T
i
40
35
30
25
20
15
10
5
0
Xyntia-MBA
Syntia-MBA
QSynth
CVC4-MBA
STOKE-synth
EA
VR-EA
EA-ED
(b) Mean synthesis time per expression ‚Äì STOKE-opti not
shown as it always uses 60 s
Figure 6: Syntia, QSynth, Xyntia, CVC4 and STOKE on EA, VR-EA and EA-ED datasets (timeout = 60 s)
the best solution seen so far in case the search gets lost. These
features enable Xyntia to keep the advantages of Syntia (stability,
output quality) while clearly improving over its weaknesses: espe-
cially Xyntia manages with 1s timeout to synthesize twice more
expressions than Syntia with 10min timeout.
Other S-metaheuristics also perform significantly better than
MCTS here, demonstrating that the problem itself is not well-suited
for partial solution exploration and simulation-guided search.
6 COMPARISON WITH OTHER APPROACHES
We now extend the comparison to other state-of-the-art tools: (1) a
greybox deobfuscator (QSynth [16]); (2) whitebox simplifiers (GCC,
Z3 simplifier and our custom simplifier); (3) program synthesizers
(CVC4 [6], winner of the SyGus‚Äô19 syntax-guided synthesis com-
petition [2] and STOKE [29], an efficient superoptimizer). Unlike
blackbox approaches, greybox and whitebox methods should be
evaluated on the enhancement rate, as otherwise they can always
succeed by returning the obfuscated expression. The enhancement
rate measures how often synthesized expressions are smaller than
the original ones (ùëûùë¢ùëéùëôùëñùë°ùë¶ ‚â§ 1).
Benchmarks. We compare blackbox program synthesizers on B2,
and grey/white box approaches on the three QSynth datasets,4 each
of them comprising 500 expressions obfuscated with Tigress [11]:
EA (base dataset, obfuscated with the EncodeArithmetic transforma-
tion), VR-EA (EA obfuscated with Virtualize and EncodeArithmetic
protections), and EA-ED (EA obfuscated with EncodeArithmetic
and EncodeData transformations).
Whitebox. We first compare Xyntia over the EA, VR-EA and EA-
ED datasets with 3 whitebox approaches: GCC, Z3 simplifier (v4.8.7)
and our custom simplifier. As expected, they are not efficient com-
pared to Xyntia. Regardless of the dataset, they simplify ‚â§ 68 ex-
pressions where Xyntia simplifies 360 of them.
Greybox. We now compare Xyntia to QSynth published results [16]
on EA, VR-EA and EA-ED. Fig. 6a shows that while both tools reach
comparable results (enhancement rate ‚âà 350/500) for simple obfus-
cations (EA and VR-EA), Xyntia keeps the same results for heavy
obfuscations (EA-ED) while QSynth drops to 133/500. Actually,
unlike QSynth, Xyntia is insensitive to syntactic complexity.
4https://github.com/werew/qsynth-artifacts
Program synthesizers. We finally compare Xyntia to state-of-
the-art program synthesizers, namely CVC4 [6] and STOKE [29].
CVC4 takes as input a grammar and a specification and returns,
through enumerative search, a consistent expression. STOKE is a
super-optimizer leveraging program synthesis (based on Metropolis
Hasting) to infer optimized code snippets. It does not return an
expression but optimized assembly code. STOKE addresses the
optimization problem in two ways: (1) STOKE-synth starts from
a pre-defined number of nops and mutates them. (2) STOKE-opti
starts from the non-optimized code and mutates it to simplify it.
While STOKE integrates its own sampling strategy and grammar,
CVC4 does not ‚Äì thus, we consider for CVC4 the same sampling
strategy as Xyntia (100 I/O samples with 5 constant vectors) as
well as the Expr and Mba grammars. More precisely, CVC4-Expr
is used over B2 to compare to Xyntia (XyntiaOpt) and CVC4-Mba
is evaluated on EA, VR-EA and EA-ED to compare against QSynth.
Our experiments show that CVC4-Expr and STOKE-synth syn-
thesize less than 40% of B2 (respectively 36.8% and 38.0%) while
Xyntia reaches 90.6% proven equivalence rate. Indeed enumerative
search (CVC4) is less appropriate when time is limited. Results of
STOKE-synth are also expected as its search space considers all
assembly mnemonics. Moreover, Fig. 6a shows that blackbox and
whitebox (STOKE-opti) synthesizers do not efficiently simplify ob-
fuscated expressions. STOKE-opti finds only 1 / 500 expressions
over EA-ED and does not handle jump instructions, inserted by the
VM, failing to analyze VR-EA.
Conclusion. Xyntia rivals QSynth on light / mild protections and
outperforms it on heavy protections, while pure whitebox ap-
proaches are far behind, showing the benefits of being independent
from syntactic complexity. Also, Xyntia outperforms state-of-the-
art program synthesizers showing that it is better suited to perform
deobfuscation. These good results show that seeing deobfuscation
as an optimization problem is fruitful.
7 DEOBFUSCATION WITH XYNTIA
We now prove that Xyntia is insensitive to common protections
(opaque predicates) as well as to recent anti-analysis protections
(MBA, covert channels, path explosion) and we confirm that black-
box methods can help reverse state-of-the-art virtualization [11, 34].
Session 10A: Crypto, Symbols and Obfuscation CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea25217.1 Effectiveness against usual protections
Xyntia is able to bypass many protections.
Mixed Boolean-Arithmetic [37] hides the original semantics
of an expression both to humans and SMT solvers. However, the
encoded expression remains equivalent to the original one. As such,
the semantic complexity stays unchanged, and Xyntia should not
be impacted. Launching Xyntia on B2 obfuscated with Tigress [11]
Encode Arithmetic transformation (size of expression: x800) con-
firms that it has no impact: equivalence range with and without
protection respectively equals 90.0 - 93.8% and 90.6 - 94.2%.
Opaque predicates [14] obfuscate control flow by creating ar-
tificial conditions in programs. The conditions are traditionally
tautologies and dynamic runs of the code will follow a unique path.
Thus, sampling is not affected and synthesis not impacted. We show
it by launching Xyntia over B2 obfuscated with Tigress AddOpaque
transformation (result: equiv. range equals 89.9 - 93.0%).
Path-based obfuscation [25, 35] takes advantage of path ex-
plosion to thwart symbolic execution, massively adding additional
feasible paths. We show that it has no effect, by protecting B2 with
a custom encoding inspired by [25] (result: equiv. range equals 89.5
- 93.7%).
Covert channels [31] hide information flow to static analyzers
by rerouting data to invisible part of the states (usually OS related)
before retrieving it ‚Äì for example taking advantage of timing differ-
ence between a slow thread and a fast thread. Again, as blackbox
deobfuscation focuses only on input-output relationships, covert
channels should not disturb it. Note that the probabilistic nature of
such obfuscations (obfuscated behaviours can differ from unobfus-
cated ones from time to time) could be a problem in case of high
fault probabilities, but in order for the technique to be useful, fault
probability must precisely remains low. We show it has no impact
by obfuscating B2 with the InitEntropy and InitImplicitFlow (thread
kind) transformations of Tigress [11] (result: equiv. range equals
89.0 - 94.0%).
Conclusion. State-of-the-art protections are not effective against
blackbox deobfuscation. They prevent efficient reading of the code and
tracing of data but blackbox methods directly execute it.
7.2 Virtualization-based obfuscation
We now use Xyntia to reverse code obfuscated with state-of-the-art
virtualization. We obfuscate a program computing MBA operations
with Tigress [11] and VMProtect [34] and our goal is to reverse the
VM handlers.5 Using such a synthetic program enables to expose a
wide variety of handlers.
Table 6: Xyntia and Syntia results over program obfuscated
with Tigress [11] and VMProtect [34]
Tigress (simple) Tigress (hard) VMProtect
Binary size
# handlers
# instructions per handlers
Xyntia Completely retrieved
Syntia Completely retrieved
Partially retrieved
Partially retrieved
40KB
13
16
12/13
13/13
0/13
13/13
251KB
17
54
16/17
17/17
0/17
17/17
615KB
114
43
0/114
76/114
0/114
76/114
5Note that, as Syntia, Xyntia does not consider memory operations.
Tigress [11] is a source-to-source obfuscator. Our obfuscated pro-
gram contains 13 handlers. Since at assembly level each handler
ends with an indirect jump to the next handler to execute, we were
able to extract the positions of handlers using execution traces. We
then used the scripts from [7] to sample each handler. Xyntia syn-
thesizes 12/13 handlers in less that 7 s each. We can classify them
in different categories: (1) arithmetic and Boolean (+, ‚àí, √ó, ‚àß, ‚à®, ‚äï);
(2) stack (store and load); (3) control flow (goto and return); (4) call-
ing convention (retrieve obfuscated function arguments). These
results show that Xyntia can synthesize a wide variety of handlers.
Interestingly, while these handlers contain many constant values
(typically, offsets for context update), Xyntia can handle them as
well. In particular, it infers the calling convention related handler,
synthesizing constant values up to 28 (to access the 6th argument).
Thus, even if Xyntia is inherently limited on constant values (see
Section 5.6) it still handles them to a limited extent. Repeating
the experiment by adding Encode Data and Encode Arithmetic to
Virtualize yields similar results. Xyntia synthesizes all 17 exposed
handlers but one, confirming that Xyntia handles combinations of
protections. Finally, note that Syntia fails to synthesize handlers
completely (not handling constant values). Still it infers arithmetic
and Boolean handlers (without context updates).
VMProtect [34] is an assembly-to-assembly obfuscator. We use the
latest premium version (v3.5.0). As each VM handler ends with a ret
or an indirect jump, we easily extracted each distinct handler from
execution traces. Our traces expose 114 distinct handlers containing
on average 43 instructions (Table 6). VMProtect VM is stack-based.
To infer the semantics of each handler, we again used Blazytko‚Äôs
scripts [7] in ‚Äúmemory mode‚Äù (i.e., forbidding registers to be seen
as inputs or outputs). Our experiments show that each arithmetic
and Boolean handlers (add, mul, nor, nand) are replicated 11 times to
fake a large number of distinct handlers. Moreover, we are also able
to extract the semantics of some stack related handlers. In the end,
we successfully infer the semantics of 44 arithmetic or Boolean
handlers and 32 stack related handlers. Synthesis took at most 0.3 s
per handler. Syntia gets equal results as Xyntia.
Conclusion. Xyntia synthesizes most Tigress VM handlers, (includ-
ing interesting constant values) and extracts the semantics of VM-
Protect arithmetic and Boolean handlers. This shows that blackbox
deobfuscation can be highly effective, making the need for efficient
protections clear.
8 COUNTER BLACKBOX DEOBFUSCATION
We now study defense mechanisms against blackbox deobfuscation.
8.1 General methodology
We remind that blackbox methods require the reverser to locate
a suitable reverse window delimiting the code of interest with its
inputs and outputs. This can be done manually or automatically [7],
still this is mandatory and not trivial. The defender could target
this step, reusing standard obfuscation techniques.
Still there is a risk that the attacker finds the good windows. Hence
we are looking for a more radical protection against blackbox attacks.
We suppose that the reverse windows, inputs and outputs are correctly
identified, and we seek to protected a given piece of code.
Session 10A: Crypto, Symbols and Obfuscation CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2522Note that adding extra fake inputs (not influencing the result)
is easily circumvented in a blackbox setting by dynamically test-
ing different values for each input and filtering inputs where no
difference is observed.
Protection rationale. Even with correctly delimited windows,
synthesis can still be thwarted. Recall that blackbox methods rely
on 2 main steps (1) I/O sampling; (2) learning from samples, and
both can be sabotaged.
‚Ä¢ First, if the sampling phase is not performed properly, the
learner could miss important behaviors of the code, returning
incomplete or even misleading information;
‚Ä¢ Second, if the expression under analysis is too complex, the
learner will fail to map inputs to their outputs.
In both cases, no information is retrieved. Hence, the key to
impede blackbox deobfuscation is to migrate from syntactic com-
plexity to semantic complexity. We propose in Sections 8.2 and 8.3
two novel protections impeding the sampling and learning phases.
8.2 Semantically complex handlers
Blackbox approaches are sensitive to semantic complexity. As such,
relying on a set of complex handlers is an effective strategy to
thwart synthesis. These complex handlers can then be combined
to recover standard operations. We propose a method to generate
arbitrary complex handlers in terms of size and number of inputs.
Complex semantic handlers. Let ùëÜ be a set of expressions and
‚Ñé, ùëí1, ..., ùëíùëõ‚àí1 be ùëõ expressions in ùëÜ. Suppose that (ùëÜ, ‚òÖ) is a group.
‚Ñéùëñ, where for all i, with 0 ‚â§ ùëñ < ùëõ,
Then ‚Ñé can be encoded as ‚Ñé =
if ùëñ = 0
if 1 ‚â§ ùëñ < ùëõ ‚àí 1
if ùëñ = ùëõ ‚àí 1
ùëíùëñ ‚àí ùëíùëñ+1
ùëíùëõ‚àí1
 ‚Ñé ‚àí ùëí1
ùëõ‚àí1
‚òÖ
ùëñ=0
‚Ñéùëñ =
Note that ‚àíùëíùëñ is the inverse element of ùëíùëñ in (ùëÜ, ‚òÖ). Each ‚Ñéùëñ is then a
new handler that can be combined with others to express common
operations ‚Äì e.g. ùë• + ùë¶ = ‚Ñé0 + ‚Ñé1 + ‚Ñé2 where ‚Ñé0 = (ùë• + ùë¶) + ‚àí((ùëé ‚àí
ùë•2) ‚àí (ùë•ùë¶)), ‚Ñé1 = (ùëé ‚àí ùë•2) ‚àí ùë•ùë¶ + (‚àí(ùë¶ ‚àí (ùëé ‚àß ùë•)) √ó (ùë¶ ‚äó ùë•)) and
‚Ñé2 = (ùë¶ ‚àí (ùëé ‚àß ùë•)) √ó (ùë¶ ‚äó ùë•). Note that the choice of (ùëí1, ..., ùëíùëõ) is
arbitrary. One can choose very complex expressions with as many
arguments as wanted.
Experimental design. To evaluate our new encoding, we created
3 datasets ‚Äì BP1, BP2 and BP3, listed by increasing order of com-
plexity. Each dataset contains 15 handlers which can be combined
to encode the +,‚àí,√ó,‚àß and ‚à® operators. Within a dataset, all han-
dlers have the same number of inputs. Table 7 reports details on
each dataset. The mean overhead column is an estimation of the
complexity added to the code by averaging the number of operators
needed to encode a single basic operator (+,‚àí,√ó,‚à®,‚àß). Overheads
in BP1 (21x), BP2 (39x) and even BP3 (258x) are reasonable com-
pared to some syntactical obfuscations: encoding ùë• + ùë¶ with MBA
three times in Tigress yields a 800x overhead.
Table 7: Protected datasets
#exprs min size max size mean size
#inputs mean overhead
BP1
BP2
BP3
15
15
15
4
8
58
11
21
142
6.87
12.87
86.07
3
6
6
x21
x39
x258
Evaluation. Results (Fig. 7) show that Xyntia (with 1 h/expr.) man-
ages well low complexity handlers (BP1: 13/15), but performance
degrades quickly as complexity increases (BP2: 3/15, BP3: 1/15).