#########    source_dir = "/Users/user1/Desktop/files    
# 定义一个用于记录扩展名放在指定目录的队列    filename_q = Queue()    
# 遍历目录并存入队列    write_to_q(source_dir, filename_q)这段代码实现了定义队列，并把指定目录下所有的文件名称和路径写入到队列中的功能。在这里有两个关键的知识点需要你掌握，它们分别是如何遍历目录，以及如何写入队列。先来看如何遍历目录的函数。它在代码的第 5 行，叫做 os.walk()函数，和之前我们学习过的 pathlib()函数一样，都能实现对目录的遍历，但是它的返回值值得你学习一下。我使用 for 循环遍历 walk() 函时，分别使用了 full_path、dirs 和 files三个变量，因此 walk()函数的返回值有三个。这三个变量分别对应每次遍历的文件的完整路径、文件所在的目录，以及该目录下所有文件名称的列表。你可以根据你的工作场景灵活组合这三个变量，由于我在移动的场景需要文件的完整路径和文件名，所以我只使用了第一个参数full_path 和第三个参数 files。此外，我在实现遍历时，也像创建目录一样增加了容错。如果某一目录下没有文件，就不需要对该目录进行移动了，所以我使用了"ifnot files" 来判断 files列表的值。 由于我增加了 not 关键字，if的判断条件就从列表中包含文件，变成了列表中没包含任何一个文件。当条件成立时，则执行continue 语句，跳过当前这次循环。而 else 语句中，是当 files列表中包含了文件名称的处理过程，在这种情况下，我会将文件的完整路径和该路径下的文件列表放到缓冲区中。在当前代码，我把队列这一数据类型作为缓冲区，它和我们之前学习过的多进程通信的队列功能和用法完全相同，区别则是我们导入的库名称不同。要想把对象存入队列，可以使用 put() 函数。从队列取出数据，则可以使用get() 函数。我把循环遍历得到的路径和文件名称均使用了 put()函数存放到队列中，实现了生产者这一角色。接下来，我们来学习消费者这一角色实现的代码，学习如何实现分类并将文件移动到新的文件夹的。分类并移动到新的文件夹同样的，我先把代码写在下面，然后再为你详细分析如何实现从队列取出文件名并进行分类的功能。    
# 移动文件到新的目录    def move_to_newdir(filename_withext, file_in_path, type_to_newpath):        