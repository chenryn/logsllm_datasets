close (fname)
dofi le(ARGV[1])
(ARGC == 2)
dofile("/dev/stdin")
else {
QQ群：
print 
dofile($2)
for (i in symtab)
gsub("@" i "@", symtab[i])
50192241
下面是m1程序的全部代码。
将@if 或@unless终止
如果varname == O将包含后续文件
如果varname！=O将包含后续文本
如果没有定义名字设设置
402
和@comment相同
#在行 @name@的任意位置
第十三章
脚本的汇总
---
## Page 385
function dofile(fname, savefile,
function error(s) {
# @ignore DELIM
#
女
#
#
#
 Jon L. Bentley, PI:EMAIL 
你所期望的内容
M1比 M4少了3步.
BUGS
在行的开始处为@name被看做与 @name@相同
用相应的值代替
在输入中出现@name@的地方，在输出中
因此引用了后面的换行
可以在每行的末尾，
 @stderr stuff
print "m1 error: " s | "cat 1>&2"; exit 1 
作者
if (fname in activefiles)
while (readline() != EOF) {
savebuffer = buffer; buffer =
savefile = file; file = fname
activefiles[fname] = 1
error("recursively reading file: " fname)
} else if (/^@include[\t]/) {
} else if (/^@default[\t]/) 
} else if (/^@define[\t]/) 
if (index($0,
QQ群：
dodef ()
print $0
if (NF != 2) error("bad include line")
if (!($2 in symtab))
dodef (）
50192241
你可能将漏掉一些
用反斜杠将定义扩展到多行，
“@"） == 0）
将结果送到标准错误文件
忽略输入直到DELIM开始的行
- 403 -
 savebuffer,
第十三章
newstring)
脚本的汇总
---
## Page 386
function readline(i, status) {
#
#
：返回"EOF"或""
将下一个输入行放到全局字符串"buffer"中
buffer = savebuffer
file = savefile 
delete activefiles [fname]
close (fname)
if (buffer != ""){
}else {
}else if（/^@ignore[\t]/）{#将输入切断，直到 $2
” else if (/^@unless[\t]/） {
 else if (/^@(comment|@)[\t]?/） {
else
QQ群：
else
"8= 2) { 
if (ARGC == 1)
symtab[name] = str
while (str ~ /\\$/)
str = $0 
return Ir
dofile("/dev/stdin")
error("usage: m1 [fname...]")
for
str = substr(str,
sub(/^[\t]+/，""，x) 
× = $O 
if (readline() == EOF)
QQ群：
error ("EOF inside definition")
dofile(ARGV[i])
(i = 1;i< ARGC; i++)
r ="@" r 
50192241
1，length(str)-1） "\n"
- 406 -
第十三章
+
脚本的汇总
---
## Page 389
Jon Bentley建议可以做的其他扩展:
以及宏处理器通常处理的其他事情。
在宏处理器中包含“@else”条件；通过命令行处理宏定义、
m1是宏处理器的一个好的开端。你或许想了解如何对它进行扩展，例如，允许
7
的是这些条件可以被互相嵌套。
这个程序的剩余部分用于处理文本的条件包含或排除，这部分很简单。比较好
行
直到遇到以“\”结尾的行为止。这是对m的附加改进：宏的主体可以不止一
空白字符的地方都被OFS（一个空行）的值代替。函数然后继续收集剩下的宏，
中的空白字符。简单的将空字符串赋值给$1和$2将重建这个记录，但所有出现
删除最前面的两个字段。现在$0的新值只包含（第一行）宏的主体。
最后，函数dodef()处理宏的定义。它将$2中的宏名字保存起来，然后用sub ()
理。这个版本比用在m程序中的方法要更有效率。
名字。对新行的重新扫描将在较高层逻辑构件中由readline(和dofile（）来管
函数dosubs （实际执行宏的转换。他从左向右处理行，并用宏的主体代替宏的
才从输入中获取一个新行。
本中的任何附加宏名。只有当处理完所有的扩展文本并送到输出后，这个程序
函数readline（）处理“回推”。
样。有趣的是，首先对被包含的文件名进行宏处理。仔细阅读这个函数，这有
1.
《ComputerLanguage》中的内容解释了使用sub（）的目的，即为了保护宏主体
一些好的技巧。
们能解释这个特殊的文件名/dev/stdin。
实现这个技巧。如果你用的是gawk或BelLabs awk，这是不成问题的，
殊的文件，名为/dev/stdin，用于访问标准输入。我们正好可以用“-”
一空格）。
避免使用V10/dev/stdin特殊文件（注：英文原文V10与/dev/stdin之间有
的宏的主体。
中的这种宏将文本追加到已定义的宏中。在m中者可以用于扩展已经定义
增加“@append MacName MoreText”，和troff中的“.am”一-样。在troff
也就是，这包含多行的宏主体，简单化dodoef（）中的逻辑结构
增加命令“@longdef”和“@longend”。这些命令可以定义长主体的宏，
并将扩展的输出通过一个管道传递给指定的shel命令。
添加 “@shell DELIM shell line here” ,
。贝尔实验室的UNIX系统（和一些其他的UNIX系统）包含一个特
QQ群：
50192241
。扩展一个宏之后，宏处理器检测最新创建的文
- 407 -
（见第十一章）
，这将读取输入行到“SELIM”
第十三章
“未定义”的宏，
脚本的汇总
它
来
---
## Page 390
Wesley出版），均使用了awk，这些书都是很值得一读的。
Programming Pearls- Confessions of a Coder》
最后注意一点，Jon在他的两本书中--《ProgrammingPearls》和《More
QQ群：
50192241
第十三章
（两本书都被Addison-
脚本的汇总
---
## Page 391
的内容，后续的命令地址将被应用于模式空间中的当前行，而不是原始的输入
个命令没有地址，那么它被应用于每个输入行。如果一个命令改变了模式空间
命令的地址和模式空间中的行匹配，那么这个命令将被应用于匹配行。如果一
sed 将每个输入行拷贝到一个模式空间。sed 指令由地址和编辑命令组成。如果
sed 命令的普通形式为：
sed 命令的语法
频繁使用的 sed 脚本通常是通过 shell 脚本来调用的。这对 sed 和 awk 来说是
如果脚本的第一行是“#n”，sed 将按-n 指定的方式工作。
-f file 
-e cmd 
下面是可识别的选项：
且它们可以被多次使用。编辑的结果是将命令和脚本文件串联起来。
许指定一个 scriptfile,即包含 sed 命令的文件。两种形式可以一起使用，并
第一种形式允许在命令行指定一个编辑命令，
调用 sed 的语法有两种形式：
in
命令行语法
[addr ess[,addr ess]l[!]command [ar guments]
下一个参数是编辑命令。当指定多个脚本时很有用。
下一个参数是一个包含编辑命令的文件。
仅打印用p 命令或 s 命令的 p 标记指定的行。
sed [-n] 
sed [-n][-e] 
-f scriptfile file(s)
QQ群：
‘commmand’
50192241
file(s)
409
，用单引号括起来。第二种形式允
Sed 的快速参考
附录一sed 的快速参考
附录一
---
## Page 392
表A-1：模式匹配元字符
注意，空正则表达式“//”表示和前面的正则表达式一样。
sed 中的正则表达式元字符
大括号（Il）被sed 应用于地址的嵌套或对同一个地址应用多个命令。
在地址后面的！操作符使 sed 将相应的命令作用于所有与该地址不匹配的行。
分隔的地址，这个命令将被应用于位于第一个和第二个地址范围之间的所有
有
址，那么相应的命令将被应用于和这个地址匹配的行。如果指定了两个用逗号
如果没有指定模式，相应的命令将被应用于所有的行。如果只指定了一个地
符匹配，
则表达式描述的。另外，
地址可以是一个行号或是由斜杠包含着的一个模式（/parttern/）．模式是用正
模式寻址
左
行
左大括号必须在一行的末尾，而右大括号必须单独在一行。确保大括号后面没
\In,m\}
空格。
[..]
commandl
[/patter n/[,/patter n/ll
但模式空间底部的换行符除外。
正则表达式的起始位置时是特殊的。
定位位于行起始位置后面的正则表达式。只有当~符号出现在
的任意次出现。（仅限于sed和 grep）
定的字符）。\In\}将匹配 n 次出现，\in,\匹配 n 和m 之间
它前面的某个范围内单个字符出现的次数（包括正则表达式指
那些字符以外的所有字符。连字符(-)用天表示字符的范围。
号第一个字符为脱字符（~）则匹配除了换行符和类中列出的
在被指定为类中的成员时都会失去它们原来的含义。如果方括
匹配广括号中的字符类中的任意一个字符。其他所有的元字符
指定的字符)
匹配任意个（包括〇个）在它前面的字符（包括由正则表达式
匹配除换行符以外的任意单个字符
QQ群：
\n 可以用来与模式空间（N命令的结果）的任意换行
50192241
，包括a,i,r,q 和=。
- 410 -
附录一
sed 的快速参考
---
## Page 393