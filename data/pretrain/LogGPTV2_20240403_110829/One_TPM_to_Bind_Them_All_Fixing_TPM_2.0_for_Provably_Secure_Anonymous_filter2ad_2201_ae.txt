(1||bsn)gsk}(“sign”).
VERIFY(ipk , σ, m, bsn, (D, I), RL, SRL) :
• Parse σ = (nym, πcred ,{πSRL,i}).
• Verify πcred ,{πSRL,i} w.r.t. ipk , m, bsn, (D, I), SRL.
• For every gsk i ∈ RL, check that HG1
• Output 1 if all proofs are correct, and 0 otherwise.
(1||bsn)gsk i (cid:4)= nym.
(cid:3)
(cid:3)
, m
(cid:3)
(cid:3) ← VERIFY(ipk , σ
LINK(ipk , bsn, (σ, m, (D, I), SRL), (σ
• Get f ← VERIFY(ipk , σ, m, bsn, (D, I), RL, SRL),
and f
(cid:3) = ∅.
with RL = RL
• Continue if f = f
• Parse σ = (nym, πcred ,{πSRL,i}), σ
(cid:3) = (nym(cid:3)
• If nym = nym(cid:3), output 1, and 0 otherwise.
(cid:3) = 1, else abort with output ⊥.
, (D
, I
(cid:3)), RL
, bsn, (D
(cid:3)
, m
, π
, I
(cid:3)
(cid:3)
(cid:3))) :
(cid:3)), SRL
(cid:3)
(cid:3)),
, SRL
cred ,{π
(cid:3)
SRL,i}).
(cid:3)
Fig. 4. High-level overview of the DAA protocols.
In contrast
Split-Keys for Strong Privacy.
to existing
schemes, we do not set gsk = tsk because solely relying
on the secret key tsk of the TPM would not allow for the
strong privacy property we are aiming for. Instead, we partially
follow the approach of Camenisch et al. [24] and let the host
contribute to the platform’s secret key. That is, we split the
key as gsk = tsk + hsk, where hsk is the contribution of
the host to the platform secret key. As in previous work, the
platform secret key gsk gets blindly signed by the issuer using
a partially blind signature PBSign that certiﬁes the secret key
by signing the platform’s public key gpk = ˜ggsk .
Note that to allow for algorithmic agility, we derive the plat-
form’s key from a generator ˜g, which can either be a cleared
(0||str) for
generator created with TPM.Commit as ˜g ← HG1
some string str, or ˜g ← ¯g, i.e. being the standard generator
ﬁxed in all TPMs. When using a cleared generator, the input to
the hash function will be prepended with a 0-bit to ensure that
the same generator will not be used in a signature (where we
will prepend a 1-bit when creating generators), as this would
break the unlinkability between joining and signing otherwise.
We now have to ensure that gsk is derived from a key tsk
held inside a real TPM. To this end, the TPM ﬁrst has to prove
(cid:3) = ˜gtsk is based on the same
in πtpk that its contribution tpk
secret key tsk as the actual TPM public key tpk = ¯gtsk . The
host then forwards tpk , tpk
and πtpk along with a proof πgpk
(cid:3)
that it correctly derived gpk from the TPM’s contribution tpk
to the issuer.
(cid:3)
Each TPM is equipped by the manufacturer with an endorse-
ment key. This key allows the issuer to verify the authenticity
of the TPM provided values in the JOIN protocol. As this
910
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:02 UTC from IEEE Xplore.  Restrictions apply. 
is the standard procedure in all DAA protocols, we omit the
details how this authentication is done and implicitly assume
that the value tpk in the JOIN protocol is authenticated with
the endorsement key.
After having obtained a membership credential on the joint
secret key gsk (and possibly a set of attributes attrs), the
attestation signatures are then computed jointly by the host
and TPM.
Signature-Based Revocation. We also want
to support
signature-based revocation introduced in the EPID protocol
by Brickell and Li [28], [29] as it allows one to revoke
TPMs without assuming that a secret key held inside the TPM
becomes publicly available upon corruption, which improves
the standard private-key-based revocation in DAA.
Roughly, for signature-based revocation, a platform would
extend its signatures by additional values (B, nym) where B
is a random generator for G1 and nym ← Bgsk . The sig-
nature revocation list SRL contains tuples {(Bi, nymi)} from
signatures of the platforms that are revoked. Thus, a platform
must also show that it is not among that list by proving
πSRL,i ← SPK
∗{(gsk ) : nym = Bgsk ∧ nymi (cid:4)= Bgsk
i }.
Any TPM interface that supports such proofs would raise Bi
to the secret key and inevitably provide a static DH oracle.
Camenisch et al. [10] recently addressed this issue and
proposed a q-SDH-based DAA scheme with signature-based
revocation that avoids this issue. Instead of giving the gener-
ator as direct input, it uses Bi ← HG1
(1||bsn i) computed by
the TPM, i.e., the TPM gets 1||bsn i as input and the SRL has
the form {(1||bsn i, nymi)}. For every (1||bsn i, nymi) ∈ SRL,
the platform shows that HG1 (1||bsn i)gsk (cid:4)= nymi by taking a
(1||bsn i)/nymi)γ, and proving
random γ, setting Ci = (HG1
∗{(γ · gsk , γ) :
SRL,i ← SPK
(cid:3)
π
1 = HG1 (1||bsn)γ·gsk (
)γ ∧
1
nym
(1||bsn i)γ·gsk (
Ci = HG1
)γ}(“sign”).
1
nymi
While the proposed scheme successfully removes the static
DH oracle and is provably secure in the UC model, their proto-
col makes different calls to the TPM to prove non-revocation,
and requires the TPM to maintain state (bsn, nym) that it used
in the signing procedure to later create the non-revocation
proofs. Extra TPM commands would be required to implement
this exact behavior in a TPM. In this work, we use the
same core idea but slightly change the communication, such
that we can leverage the ﬂexible TPM.Commit and TPM.Sign
commands and avoid introducing new TPM commands. In
addition, we give the TPM all the input it requires to create the
non-revocation proof, such that it does not need to keep any
state between signing and creating the non-revocation proof.
More precisely, we can construct the non-revocation proof
based on our revised TPM interface using the Prove protocol.
The host obtains Ci and constructs πSRL,i ← (Ci, π
(cid:3)
SRL,i) by
running
911
(Ci, π
To verify πSRL,i
SRL,i), checks that Ci (cid:4)= 1G1, and veriﬁes π
(cid:3)
SRL,i) ← Prove(hsk , 1G1 , 1||bsn, 1,⊥, γ, 1||bsn i,⊥,
(cid:3)
{(γ, 1/nym, 1/nymi,⊥)}, “sign”,⊥),
in the VERIFY algorithm, one parses
(cid:3)
πSRL,i = (Ci, π
w.r.t. (Ci, 1||bsn i, nymi, nym), where (1||bsn i, nymi) ∈ SRL.
SRL,i
Note that since signature-based revocation is independent
of the concrete PBSign scheme used for the membership
credential, the above proof instantiation and the revocation
checks in VERIFY are the same for the q-SDH-based and
LRSW-based schemes.
Concrete Instantiations. The description of the JOIN and
SIGN protocols and the VERIFY and LINK algorithms are
given in Fig. 4, using an abstract NIZK proof statement for
πcred, and a generic partially-blind signature scheme PBSign
for obtaining the membership credential. The concrete in-
stantiation for this proof depends on the instantiation used
for the PBSign scheme. In the following two sections we
describe how PBSign and πcred can be instantiated with a q-
SDH-based scheme (BBS+ signature [18]) and a LRSW-based
scheme (CL-signature [17]) respectively. The latter uses a
novel way to blindly issue CL signatures, which is signiﬁcantly
more efﬁcient than previous approaches and is of independent
interest.
For both concrete instantiations we assume the availability
of system parameters consisting of a security parameter τ, a
bilinear group G1, G2, GT of prime order p with generators g1
of G1 and g2 of G2 and bilinear map e, generated w.r.t τ, and
with ¯g denoting the ﬁxed generator used by the TPMs. Note
that we will not repeat the parts of the DAA protocol that are
independent of the PBSign instantiation, such as the signature-
based revocation, the revocation checks within VERIFY, and
the LINK protocol.
5.2.1 q-SDH-based DAA Instantiation
Our q-SDH-based scheme is most similar to the scheme
by Camenisch et al. [10], which in turn propose a provably
secure version of the scheme by Brickell and Li [3], which
is standardized as mechanism 3 in ISO/IEC 20008-2 [31]. In
addition, their and our scheme support membership creden-
tials with selective attribute disclosure, similar to DAA with
Attributes as proposed by Chen and Urian [32].
We now show how to instantiate PBSign and the affected
proofs with q-SDH-based BBS+ signatures yielding a prov-
ably secure q-SDH-based DAA scheme ΠqSDH−DAA using the
revised TPM 2.0 interfaces proposed in Sec. 4.
SETUP: The issuer generates its key pair (ipk , isk ) as follows:
• Choose (h0, . . . , hL) ←$ G
2 and
(cid:3) ← gx
(cid:3) =
X
1}(“setup”).
gx
• Set ipk ← (h0, . . . , hL, X, X
Protocol participants, when retrieving ipk, will verify πipk .
JOIN: Here we show how the host obtains the proof πtpk
from the TPM and how the issuer computes the membership
credential using the BBS+ signature scheme. For this scheme,
1 , and prove πipk ←$ SPK{x : X = gx
, πipk ), and isk ← x.
, x ←$ Zp, set X ← gx
2 ∧ X
L+1
1
(cid:3)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:02 UTC from IEEE Xplore.  Restrictions apply. 
(cid:3)
and we can simplify πtpk to
∗{tsk : tpk = ¯gtsk}(“join”, n).
we set ˜g = ¯g, so tpk = tpk
πtpk ← SPK
• The host obtains πtpk by calling
(∗, πtpk ) ← Prove(0, tpk ,⊥, 1,⊥, 1,⊥,⊥,∅,⊥, (“join”, n)).
• The issuer computes the membership credential cred ←
PBSign(isk , gpk , attrs) on the joint public key gpk and
a set of attributes attrs = (a1, . . . , aL) with isk = x as
follows: It chooses a random (e, s) ∈ Z2
0 · gpk · L(cid:4)
A ← (g1 · h
p, and derives
i ) 1
ai
e+x .
h
s
i=1
i=1 h
0 · gpk · (cid:5)L
That is, the issuer creates a standard BBS+ signature on the
message (gsk , a1, . . . , aL), where gsk = tsk +hsk is blindly
signed in form of gpk = ¯ggsk . It sets cred ← (A, e, s).
• The host upon receiving (cred , attrs) from the issuer,
computes b ← g1 · hs
ai
i , and checks that
(cid:3) ← ((A, e, s), b).
e(A, Xge
2) = e(b, g2). Finally, it sets cred
(cid:3) =
SIGN: A platform holding a membership credential cred
((A, e, s), b) on platform key gsk and attributes attrs can sign
message m w.r.t. basename bsn, attribute disclosure (D, I),
and signature-based revocation list SRL. As shown in Fig. 4,
each signature σ contains a proof of a membership credential
πcred w.r.t. the pseudonym nym = HG1 (1||bsn)gsk , which are
computed as follows:
• The host ﬁrst randomizes the BBS+ credential ((A, e, s), b):
A ←
Choose r1 ←$ Z
(cid:3) ← Ar1, ¯
(cid:3) ← br1 · h
(cid:3) ← s − r2 · r3.
(cid:3)−e · br1 (= A
A
The host and TPM then jointly compute the following proof
D = {1, . . . , L}\D the indices of
(cid:3)
cred. We denote by ¯
π
attributes that are not disclosed.
p, r2 ←$ Zp, r3 ← 1
∗
−r2
(cid:3)x), b
0
r1 , set A
, and s
(cid:3)
cred
π
← SPK
(cid:4)
−1
g
1
i∈D
−ai = b
(cid:3)) :
ai ∧
∗{(gsk ,{ai}i∈ ¯D, e, r2, r3, s
(cid:4)
(cid:3)−r3 h
hi
hi
i∈ ¯D
(1||bsn)gsk ∧
0 }((“sign”, (D, I), SRL), m)
nym = HG1
(cid:3)−e · h
(cid:3) = A
r2
s(cid:2)
0 ¯ggsk
¯
A/b
This proof and pseudonym are computed by running
(nym, π
(cid:3)
cred
) ← Prove(hsk , d,⊥, 1,⊥, 1, 1||bsn,
(cid:3)
g
−ai
i
d
all
the
S
witnesses
i∈D h
the
(cid:5)
¯
, S, (“sign”, (D, I), SRL), m),
A/b
−1
1
for
and
proof:
(cid:3)), (r2, 1G1 , 1G1 , h0), (−r3, b
(cid:3)
(cid:3)