ORDER BY：主键列表。
PARTITION BY：分区表达式。
智能运维：从O搭建大规模分布式AIOps系统
(date，datetime)，8192)
---
## Page 182
一个节点宕机了，那么这个节点上的数据都将不可用。
）ENGINE = Distributed(ck_cluster,'default'，'nginx'， rand());
CREATE TABLE IF NOT EXISTS default.nginx_all ON CLUSTER ck_cluster
布均匀，如 intHash64(code)。配置示例如下：
直接按照 code 分发，节点之间的数据就会不平衡，我们可以通过对指定字段 hash 来让事件分
事件，那么相同 code 的事件将写到同一个节点上。但是Nginx 的 code一般都是不均匀分布的，
发事件。我们默认使用 randO随机分发事件到每个节点上，或者通过 Nginx 请求的 code 来分发
请求节点再对各个节点上的结果集进行聚合，最后得到最终的结果。
Distributed(ck_cluster,'default'，'nginx', rand())
参数：
布式表前，必须在每个节点上创建 MergeTree Family 表。
Distributed 表本身并不存储数据，它只是关联本机上面的 MergeTree 表。因此，我们在创建分
通过 Distibuted 表查询,数据会在每个节点上进行聚合，然后将结果集发送给请求的节点,
3.ReplicatedMergeTree表引擎
cost_time UInt16
code String,
datetimeDateTime
date Date,
通过 Distributed 表写入事件时，数据会通过 Distributed 表中 Sharding key 指定的方法来分
○集群名称
Distributed 表允许在多台服务器上进行分布式写入和查询处理。分布式引擎需要以下几个
创建了本地表和分布式表，但是它们都没有副本，
配置示例如下：
〇分区键值（Sharding key）
ClickHouse 通过 Distributed 表引擎来关联不同节点上的 MergeTree 表,从而形成分布式表。
O
关联的表名称
数据库的名称
没有实现高可用性，这就意味着如果有
第8章时序数据分析框架
155
---
## Page 183
docs/ en/table_engines。
件的表引擎、Memory表引擎等。想了解更多内容，请参考官方文档：https://clickhouse.yandex/
CREATE TABLE IF NOT EXISTS default.nginx ON CLUSTER ck_cluster
据，提高查询的响应速度。
布式副本表。
CREATE TABLE IF NOT EXISTS default.nginx ON CLUSTER ck_cluster
ReplicatedMergeTree('/clickhouse/tables/(layer)-(shard)/hits',
个参数。
引擎除需要提供 MergeTree 表所需的几个参数外，还需要指定 ZooKeeper 的节点路径和名称两
ZooKeeper 和宏定义，现在我们只要用副本表取代 MergeTree 表就可以实现数据副本。副本表
PARTITION BY date ORDER BY (date, datetime) SETTINGS index_granularity = 8192;
intHash32(UserID)，(CounterID,EventDate,
156
code String,
cost_time UInt16
code String，
dateDate,
副本表通过 ZooKeeper 同步数据，上面在对 ClickHouse 集群进行配置时，已经配置了
除了上面介绍的这些表引擎，ClickHouse 还提供了很多表引擎，
cost_time UInt16
datetime DateTime,
dateDate,
配置示例如下：
在已有的分布式副本表上，我们还可以对其创建物化聚合视图表，预聚合我们要查询的数
4.AggregatingMergeTree表引擎
在副本表的基础上创建分布式表（配置见“Distributed 表引擎”一节），就可以实现一个分
datetimeDateTime
完整的副本表配置示例如下：
智能运维：从O搭建大规模分布式AIOps系统
intHash32(UserID)，EventTime)，8192)
：比如直接从 Kafka 读取事
，'(replica)'，EventDate,
'(replica}')
'(replica}')
---
## Page 184
种类型：常规函数、聚合函数和 ARRAY JOIN。下面分别列出各种类型下的一些常用函数。
8.4.6
ClickHouse 官方实现了 300 多个函数支持实时的数据查询与分析。ClickHouse 将函数分为三
C
O
（2）
O plus(a, b): a+b
（1）算术函数
常规函数作用于某一行，其结果不受其他行的影响。
1．常规函数
C
toDateTime: 2018-01-01 01:00:00
toDate: 2018-01-01
toUInt8OrZero
toFloat32
toInt8
toUInt8
类型转换函数
lcm(a,b)：取a与b的最小公倍数
gcd(a,b)：取a与b 的最大公因数
abs(a)：取绝对值
negate(a): -a
modulo(a, b): a % b
intDivOrZero(a,b)：整除，b可以为 0。若b为0，则结果等于 0
intDiv(a,b)：整除，b 不能为 0 
divide(a,b)：a/b，结果为浮点型，并非整除
multiply(a, b): a * b
minus(a, b): a-b
函数支持
第8章时序数据分析框架
157
---
## Page 185
158
O-Array：函数以 Array 为后缀，如 sumArray(arr)，计算数组 arr 中元素的和
O
!
O
（3）日期函数
?
-If：如果函数以 If 为后缀，如 CountIfO，这时函数将接收一个额外的参数，用来判断
uniqUpTo(N)(x)：统计指定列x出现不同值的个数，相当于对 groupUniqArray 的结果做
toStartOfHour：找出从指定时间开始的小时
toHour：找出指定时间所在的小时
cast(xt)：将x类型转换成t 类型
toString
智能运维：从O搭建大规模分布式AIOps系统
count。如果返回的值小于指定的 N，则显示实际的值；如果返回的值大于 N，则显示
groupUniqArray(x)：返回指定列x出现的不同值，相当于 SQL 中的distinct
计算95%的耗时分布
quantile(level)(x)：计算指定列水平分位数，level 是一个 O~1的浮点数，比如可以用它
runningDifferenceO：计算指定列相邻值的差
topK(N)(column)：计算指定列中出现次数最多的N个值
uniqO：计算不同值的数量
:Ouns
max0:
countO:
聚合函数
today：返回当前日期，如2018-01-01
now：返回当前时间，如2018-01-0101:01:01
toRelativeHourNum：统计从某个固定点开始到现在的小时数
是否满足条件
N+1个数
计算和
统计最大值
：统计行数
---
## Page 186
ARRAY JOIN arr AS a;
FROM test
SELECT
'd']);
INSERT INTO test VALUES （'test1'，['11'，'12'，'13'，'11'])，（'test2'， ['a'，'b'，'c',
ENGINE = Memory;
CREATETABLEteSt
成多行。该函数以数组作为参数。示例如下：
arr,
S
（2）导入测试数据
arr Array(String)
s String,
执行结果如图 8-8 所示。
（4）执行结果
（3）返回ARRAY JOIN
（1）创建测试表
普通函数只会改变每行中的值，聚合函数会压缩一组行，而 ARRAY JOIN 则是将一行展开
3.ARRAY JOIN
test2
test2
test2
test2
test1
test1
test1
test1
图8-8ARRAY JOIN执行结果
T'a
a'
a'
'11'
'11'
11'
1212
12
P
p
p
第8章时序数据分析框架
p5qp
112131
159
---
## Page 187
8.6
以从容地展示系统内部各个环节的性能和业务指标。
数据引擎，给大数据时代下的运维带来了极大的便利。当面对一个复杂的系统时，我们依然可
是数据引擎的发展也是非常迅速的，像Druid、ClickHouse 这样的专为海量数据多维分析而生的
8.5本章小结
160
从 Graphite 到 Druid 再到 ClickHouse，我们发现虽然监控需求的深度和广度越来越大，但
欲进一步了解更多的函数及其使用方法，读者可以查看 ClickHouse 官方文档[4]。
[4]https://clickhouse.yandex/docs/en/functions
[3] https://clickhouse.yandex/docs/en
[2] http://druid.io/docs/0.12.0/design/index.html
[1] htps://graphite.readthedocs.io/
参考文献
智能运维：从O搭建大规模分布式AIOps系统
---
## Page 188
成了很多算法模型案例，极大地降低了学习成本。接下来我们将重点介绍TensorFlow的安装使
习框架，开发者的使用规模比较大，文档较为丰富，非常方便入门学习。同时，TensorFlow 集
的对比情况。
细；TensorFlow 支持更大的并发处理和复杂的模型等。图9-1 列举了几个常见的机器学习框架
（图片来源：斯坦福的CS231n课件一
每个框架都有自己的特点，比如 Caffe支持C++，对CNN 的支持非常好；Theano 的文档非常详
9.1
读者可以结合业务并根据这些框架的特点进行选择。TensorFlow作为 Google 的开源机器学
常见的机器学习框架有 Theano、TensorFlow、Torch、Caffe、MXNet、Neon 和CNTK等，
简介
Good at RNN
source code
Readable
Modelparallel
Multi-GPU:
Multi-GPU:
Pretrained
Language
No
Yes (C++)
No
Yes
Yes++
C++,Python
Caffe
图9-1常见的机器学习框架的对比情况
Convolutional Neural Networks for Visual Recognition(Winter 2016))
Mediocre
Yes (Lua)
Yes++
Lua
Torch
Yes
No
Experimental
Yes (Lasagne)
Python
Theano
机器学习框架
Yes (best)
No
Yes (best)