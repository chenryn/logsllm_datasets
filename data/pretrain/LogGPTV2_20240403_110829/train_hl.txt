on linux, a process has both a filesystem group id and an effective group id.
the (linux-specific) filesystem group id is used
for permissions checking when accessing filesystem objects,
while the effective group id is used for some other kinds
of permissions checks (see
.br credentials (7)).
.pp
normally, the value of the process's filesystem group id
is the same as the value of its effective group id.
this is so, because whenever a process's effective group id is changed,
the kernel also changes the filesystem group id to be the same as
the new value of the effective group id.
a process can cause the value of its filesystem group id to diverge
from its effective group id by using
.br setfsgid ()
to change its filesystem group id to the value given in
.ir fsgid .
.pp
.br setfsgid ()
will succeed only if the caller is the superuser or if
.i fsgid
matches either the caller's real group id, effective group id,
saved set-group-id, or current the filesystem user id.
.sh return value
on both success and failure,
this call returns the previous filesystem group id of the caller.
.sh versions
this system call is present in linux since version 1.2.
.\" this system call is present since linux 1.1.44
.\" and in libc since libc 4.7.6.
.sh conforming to
.br setfsgid ()
is linux-specific and should not be used in programs intended
to be portable.
.sh notes
the filesystem group id concept and the
.br setfsgid ()
system call were invented for historical reasons that are
no longer applicable on modern linux kernels.
see
.br setfsuid (2)
for a discussion of why the use of both
.br setfsuid (2)
and
.br setfsgid ()
is nowadays unneeded.
.pp
the original linux
.br setfsgid ()
system call supported only 16-bit group ids.
subsequently, linux 2.4 added
.br setfsgid32 ()
supporting 32-bit ids.
the glibc
.br setfsgid ()
wrapper function transparently deals with the variation across kernel versions.
.ss c library/kernel differences
in glibc 2.15 and earlier,
when the wrapper for this system call determines that the argument can't be
passed to the kernel without integer truncation (because the kernel
is old and does not support 32-bit group ids),
it will return \-1 and set \fierrno\fp to
.b einval
without attempting
the system call.
.sh bugs
no error indications of any kind are returned to the caller,
and the fact that both successful and unsuccessful calls return
the same value makes it impossible to directly determine
whether the call succeeded or failed.
instead, the caller must resort to looking at the return value
from a further call such as
.ir setfsgid(\-1)
(which will always fail), in order to determine if a preceding call to
.br setfsgid ()
changed the filesystem group id.
at the very
least,
.b eperm
should be returned when the call fails (because the caller lacks the
.b cap_setgid
capability).
.sh see also
.br kill (2),
.br setfsuid (2),
.br capabilities (7),
.br credentials (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/backtrace.3
.so man3/hsearch.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\" and copyright 2008, linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\"
.\" modified 1993-07-24 by rik faith (PI:EMAIL)
.\" modified 2002-08-10 walter harms
.\"	(PI:EMAIL)
.\" modified 2003-11-18, 2004-10-05 aeb
.\"
.th remainder 3 2021-03-22 "" "linux programmer's manual"
.sh name
drem, dremf, dreml, remainder, remainderf, remainderl \- \
floating-point remainder function
.sh synopsis
.nf
.b #include 
.pp
/* the c99 versions */
.bi "double remainder(double " x ", double " y );
.bi "float remainderf(float " x ", float " y );
.bi "long double remainderl(long double " x ", long double " y );
.pp
/* obsolete synonyms */
.bi "double drem(double " x ", double " y );
.bi "float dremf(float " x ", float " y );
.bi "long double dreml(long double " x ", long double " y );
.pp
.fi
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br remainder ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
        || _xopen_source >= 500
.\"    || _xopen_source && _xopen_source_extended
        || /* since glibc 2.19: */ _default_source
        || /* glibc = 200112l
        || /* since glibc 2.19: */ _default_source
        || /* glibc 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references: rfc 2553
.th getipnodebyname 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
getipnodebyname, getipnodebyaddr, freehostent \- get network
hostnames and addresses
.sh synopsis
.nf
.b #include 
.b #include 
.b #include 
.pp
.bi "struct hostent *getipnodebyname(const char *" name ", int " af ,
.bi "                                int " flags ", int *" error_num );
.bi "struct hostent *getipnodebyaddr(const void *" addr ", size_t " len ,
.bi "                                int " af ", int *" "error_num" );
.bi "void freehostent(struct hostent *" "ip" );
.fi
.sh description
these functions are deprecated (and unavailable in glibc).
use
.br getaddrinfo (3)
and
.br getnameinfo (3)
instead.
.pp
the
.br getipnodebyname ()
and
.br getipnodebyaddr ()
functions return the names and addresses of a network host.
these functions return a pointer to the
following structure:
.pp
.in +4n
.ex
struct hostent {
    char  *h_name;
    char **h_aliases;
    int    h_addrtype;
    int    h_length;
    char **h_addr_list;
};
.ee
.in
.pp
these functions replace the
.br gethostbyname (3)
and
.br gethostbyaddr (3)
functions, which could access only the ipv4 network address family.
the
.br getipnodebyname ()
and
.br getipnodebyaddr ()
functions can access multiple network address families.
.pp
unlike the
.b gethostby
functions,
these functions return pointers to dynamically allocated memory.
the
.br freehostent ()
function is used to release the dynamically allocated memory
after the caller no longer needs the
.i hostent
structure.
.ss getipnodebyname() arguments
the
.br getipnodebyname ()
function
looks up network addresses for the host
specified by the
.i name
argument.
the
.i af
argument specifies one of the following values:
.tp
.b af_inet
the
.i name
argument points to a dotted-quad ipv4 address or a name
of an ipv4 network host.
.tp
.b af_inet6
the
.i name
argument points to a hexadecimal ipv6 address or a name
of an ipv6 network host.
.pp
the
.i flags
argument specifies additional options.
more than one option can be specified by bitwise or-ing
them together.
.i flags
should be set to 0
if no options are desired.
.tp
.b ai_v4mapped
this flag is used with
.b af_inet6
to request a query for ipv4 addresses instead of
ipv6 addresses; the ipv4 addresses will
be mapped to ipv6 addresses.
.tp
.b ai_all
this flag is used with
.b ai_v4mapped
to request a query for both ipv4 and ipv6 addresses.
any ipv4 address found will be mapped to an ipv6 address.
.tp
.b ai_addrconfig
this flag is used with
.b af_inet6
to
further request that queries for ipv6 addresses should not be made unless
the system has at least one ipv6 address assigned to a network interface,
and that queries for ipv4 addresses should not be made unless the
system has at least one ipv4 address assigned to a network interface.
this flag may be used by itself or with the
.b ai_v4mapped
flag.
.tp
.b ai_default
this flag is equivalent to
.br "(ai_addrconfig | ai_v4mapped)" .
.ss getipnodebyaddr() arguments
the
.br getipnodebyaddr ()
function
looks up the name of the host whose
network address is
specified by the
.i addr
argument.
the
.i af
argument specifies one of the following values:
.tp
.b af_inet
the
.i addr
argument points to a
.i struct in_addr
and
.i len
must be set to
.ir "sizeof(struct in_addr)" .
.tp
.b af_inet6
the
.i addr
argument points to a
.i struct in6_addr
and
.i len
must be set to
.ir "sizeof(struct in6_addr)" .
.sh return value
null is returned if an error occurred, and
.i error_num
will contain an error code from the following list:
.tp
.b host_not_found
the hostname or network address was not found.
.tp
.b no_address
the domain name server recognized the network address or name,
but no answer was returned.
this can happen if the network host has only ipv4 addresses and
a request has been made for ipv6 information only, or vice versa.
.tp