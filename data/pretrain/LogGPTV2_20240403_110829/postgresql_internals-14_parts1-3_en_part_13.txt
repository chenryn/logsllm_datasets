Ithappensduringheaptruncation,1whichisthefinalvacuumphase.
p. Heaptruncationrequiresashortexclusivelockonthetable.Toavoidholdingother
processesfortoolong,attemptstoacquirealockdonotexceedfiveseconds.
Sincethetablehastobelocked,truncationisonlyperformediftheemptytailtakes
atleast 1 ofthetableorhasreachedthelengthof,pages.Thesethresholds
16
arehardcodedandcannotbeconfigured.
v. If,despitealltheseprecautions,tablelocksstillcauseanyissues,truncationcanbe
disabled altogether using the vacuum_truncate and toast.vacuum_truncate storage
parameters.
6.4 Analysis
When talking about vacuuming, we have to mention yet another task that is
closely related to it, even though there is no formal connection between them.
It is analysis,2 or gathering statistical information for the query planner. The
collected statistics include the number of rows (pg_class.reltuples) and pages
(pg_class.relpages)inrelations,datadistributionwithincolumns,andsomeother
information.
Youcanruntheanalysismanuallyusingthecommand,3orcombineitwith
vacuumingbycalling.However,thesetwotasksarestillperformed
sequentially,sothereisnodifferenceintermsofperformance.
1 backend/access/heap/vacuumlazy.c,lazy_truncate_heapfunction
2 postgresql.org/docs/14/routine-vacuuming.html#VACUUM-FOR-STATISTICS
3 backend/commands/analyze.c
122
6.5 AutomaticVacuumandAnalysis
Historically,appearedfirst,inversion.,whileaseparatecom-
mandwasnotimplementeduntilversion..Inearlierversions,statisticswerecollected
byascript.
Automatic vacuum and analysis are set up in a similar way,so it makes sense to
discussthemtogether.
6.5 Automatic Vacuum and Analysis
Unlessthedatabasehorizonisheldupforalongtime,routinevacuumingshould
copewithitswork.Buthowoftendoweneedtocallthecommand?
Ifafrequentlyupdatedtableisvacuumedtooseldom,itwillgrowbiggerthande-
sired.Besides,itmayaccumulatetoomanychanges,andthenthenextrun
willhavetomakeseveralpassesovertheindexes.
Ifthetableisvacuumedtoooften,theserverwillbebusywithmaintenanceinstead
ofusefulwork.
Furthermore,typicalworkloadsmaychangeovertime,sohavingafixedvacuuming
schedulewillnothelpanyway: themoreoftenthetableisupdated,themoreoften
ithastobevacuumed.
Thisproblemissolvedbyautovacuum,1 whichlaunchesvacuumandanalysispro-
cessesbasedontheintensityoftableupdates.
About theAutovacuum Mechanism
Whenautovacuumisenabled(autovacuumconfigurationparameterison),theau- on
tovacuum launcherprocessisalwaysrunninginthesystem. Thisprocessdefines
theautovacuumscheduleandmaintainsthelistof“active”databasesbasedonus-
agestatistics.Suchstatisticsarecollectedifthetrack_countsparameterisenabled. on
Donotswitchofftheseparameters,otherwiseautovacuumwillnotwork.
1 postgresql.org/docs/14/routine-vacuuming.html#AUTOVACUUM
123
Chapter6 VacuumandAutovacuum
1min Once in autovacuum_naptime, the autovacuum launcher starts an autovacuum
worker1 for each active database in the list (these workers are spawned by post-
master,as usual). Consequently,if there are N active databases in the cluster,N
workersarespawnedwithintheautovacuum_naptimeinterval. Butthetotalnum-
berofautovacuumworkersrunninginparallelcannotexceedthethresholddefined
3 bytheautovacuum_max_workersparameter.
Autovacuum workers areverysimilar to regular background workers,but theyappeared
much earlier than this general mechanism of task management. It was decided to
leave the autovacuum implementation unchanged, so autovacuum workers do not use
max_worker_processesslots.
Oncestarted,thebackgroundworkerconnectstothespecifieddatabaseandbuilds
twolists:
• thelistofalltables,materializedviews,andtablestobevacuumed
• thelistofalltablesandmaterializedviewstobeanalyzed(tablesare
notanalyzedbecausetheyarealwaysaccessedviaanindex)
Thentheselectedobjectsarevacuumedoranalyzedonebyone(orundergoboth
operations),andoncethejobiscomplete,theworkeristerminated.
Automatic vacuuming works similar to the manual one initiated by the 
command,buttherearesomenuances:
• Manualvacuumingaccumulatestuplesinamemorychunkofthemainte-
nance_work_mem size. However, using the same limit for autovacuum is un-
desirable, as it can result in excessive memory consumption: there may be
several autovacuum workers running in parallel, and each of them will get
maintenance_work_mem of memory at once. Instead, Postgre provides a
separatememorylimitforautovacuumprocesses,whichisdefinedbytheau-
tovacuum_work_memparameter.
−1 By default, the autovacuum_work_mem parameter falls back on the regular
maintenance_work_memlimit,soiftheautovacuum_max_workersvalueishigh,
youmayhavetoadjusttheautovacuum_work_memvalueaccordingly.
1 backend/postmaster/autovacuum.c
124
6.5 AutomaticVacuumandAnalysis
• Concurrent processing of several indexes created on one table can be per-
formedonlybymanualvacuuming;usingautovacuumforthispurposewould
resultinalargenumberofparallelprocesses,soitisnotallowed.
Ifaworkerfailstocompleteallthescheduledtaskswithintheautovacuum_naptime
interval,theautovacuum launcherspawnsanotherworkertoberuninparallelin
thatdatabase.Thesecondworkerwillbuilditsownlistsofobjectstobevacuumed
andanalyzedandwillstartprocessingthem. Thereisnoparallelismatthetable
level;onlydifferenttablescanbeprocessedconcurrently.
WhichTables Need to beVacuumed?
Youcandisableautovacuumatthetablelevel—althoughitishardtoimaginewhy
itcouldbenecessary.Therearetwostorageparametersprovidedforthispurpose,
oneforregulartablesandtheotherfortables:
• autovacuum_enabled
• toast.autovacuum_enabled
In usual circumstances,autovacuum is triggered either by accumulation of dead p.
tuplesorbyinsertionofnewrows.
Deadtupleaccumulation. Deadtuplesareconstantlybeingcountedbythestatis-
tics collector; their current number is shown in the system catalog table called
pg_stat_all_tables.
Itisassumedthatdeadtupleshavetobevacuumediftheyexceedthethreshold
definedbythefollowingtwoparameters:
• autovacuum_vacuum_threshold, which specifies the number of dead tuples 50
(anabsolutevalue)
• autovacuum_vacuum_scale_factor, which sets the fraction of dead tuples in a 0.2
table
125
Chapter6 VacuumandAutovacuum
Vacuumingisrequiredifthefollowingconditionissatisfied:
pg_stat_all_tables.n_dead_tup>
autovacuum_vacuum_threshold+
autovacuum_vacuum_scale_factor×pg_class.reltuples
Themainparameterhereisofcourseautovacuum_vacuum_scale_factor: itsvalueis
importantforlargetables(anditislargetablesthatarelikelytocausethemajority
ofissues).Thedefaultvalueof%seemstoobigandmayhavetobesignificantly
reduced.
For different tables,optimal parameter values may vary: they largely depend on
thetablesizeandworkloadtype.Itmakessensetosetmoreorlessadequateinitial
valuesandthenoverridethemforparticulartablesusingstorageparameters:
• autovacuum_vacuum_thresholdandtoast.autovacuum_vacuum_threshold
• autovacuum_vacuum_scale_factorandtoast.autovacuum_vacuum_scale_factor
v. Rowinsertions. Ifrowsareonlyinsertedandareneitherdeletednorupdated,the
tablecontainsnodeadtuples. Butsuchtablesshouldalsobevacuumedtofreeze
p. heap tuples in advance and update the visibility map (thus enabling index-only
scans).
Atablewillbevacuumedifthenumberofrowsinsertedsincethepreviousvacu-
umingexceedsthethresholddefinedbyanothersimilarpairofparameters:
1000 • autovacuum_vacuum_insert_threshold
0.2 • autovacuum_vacuum_insert_scale_factor
Theformulaisasfollows:
pg_stat_all_tables.n_ins_since_vacuum>
autovacuum_vacuum_insert_threshold+
autovacuum_vacuum_insert_scale_factor×pg_class.reltuples
126
6.5 AutomaticVacuumandAnalysis
Likeinthepreviousexample,youcanoverridethesevaluesatthetablelevelusing
storageparameters:
• autovacuum_vacuum_insert_thresholdanditscounterpart
• autovacuum_vacuum_insert_scale_factoranditscounterpart
WhichTables Need to BeAnalyzed?
Automaticanalysisneedstoprocessonlymodifiedrows,sothecalculationsarea
bitsimplerthanthoseforautovacuum.
Itisassumedthatatablehastobeanalyzedifthenumberofrowsmodifiedsince
thepreviousanalysisexceedsthethresholddefinedbythefollowingtwoconfigu-
rationparameters:
• autovacuum_analyze_threshold 50
• autovacuum_analyze_scale_factor 0.1
Autoanalysisistriggeredifthefollowingconditionismet:
pg_stat_all_tables.n_mod_since_analyze>
autovacuum_analyze_threshold+
autovacuum_analyze_scale_factor×pg_class.reltuples
Tooverrideautoanalysissettingsforparticulartables,youcanusethesame-name
storageparameters:
• autovacuum_analyze_threshold
• autovacuum_analyze_scale_factor
Sincetablesarenotanalyzed,theyhavenocorrespondingparameters.
127
Chapter6 VacuumandAutovacuum
Autovacuum inAction
Toformalizeeverythingsaidinthissection,let’screatetwoviewsthatshowwhich
tablescurrentlyneedtobevacuumedandanalyzed.1 Thefunctionusedinthese
viewsreturnsthecurrentvalueofthepassedparameter,takingintoaccountthat
thisvaluecanberedefinedatthetablelevel:
=> CREATE FUNCTION p(param text, c pg_class) RETURNS float
AS $$
SELECT coalesce(
-- use storage parameter if set
(SELECT option_value
FROM pg_options_to_table(c.reloptions)
WHERE option_name = CASE
-- for TOAST tables the parameter name is different
WHEN c.relkind = 't' THEN 'toast.' ELSE ''
END || param
),
-- else take the configuration parameter value
current_setting(param)
)::float;
$$ LANGUAGE sql;
Thisishowavacuum-relatedviewcanlooklike:
=> CREATE VIEW need_vacuum AS
WITH c AS (
SELECT c.oid,
greatest(c.reltuples, 0) reltuples,
p('autovacuum_vacuum_threshold', c) threshold,
p('autovacuum_vacuum_scale_factor', c) scale_factor,
p('autovacuum_vacuum_insert_threshold', c) ins_threshold,
p('autovacuum_vacuum_insert_scale_factor', c) ins_scale_factor
FROM pg_class c
WHERE c.relkind IN ('r','m','t')
)
SELECT st.schemaname || '.' || st.relname AS tablename,
st.n_dead_tup AS dead_tup,
c.threshold + c.scale_factor * c.reltuples AS max_dead_tup,
st.n_ins_since_vacuum AS ins_tup,
c.ins_threshold + c.ins_scale_factor * c.reltuples AS max_ins_tup,
st.last_autovacuum
FROM pg_stat_all_tables st
JOIN c ON c.oid = st.relid;
1 backend/postmaster/autovacuum.c,relation_needs_vacanalyzefunction
128
6.5 AutomaticVacuumandAnalysis
The max_dead_tup column shows the number of dead tuples that will trigger au-
tovacuum,whereasthemax_ins_tupcolumnshowsthethresholdvaluerelatedto
insertion.
Hereisasimilarviewforanalysis:
=> CREATE VIEW need_analyze AS
WITH c AS (
SELECT c.oid,
greatest(c.reltuples, 0) reltuples,
p('autovacuum_analyze_threshold', c) threshold,
p('autovacuum_analyze_scale_factor', c) scale_factor
FROM pg_class c
WHERE c.relkind IN ('r','m')
)
SELECT st.schemaname || '.' || st.relname AS tablename,
st.n_mod_since_analyze AS mod_tup,
c.threshold + c.scale_factor * c.reltuples AS max_mod_tup,
st.last_autoanalyze
FROM pg_stat_all_tables st
JOIN c ON c.oid = st.relid;
Themax_mod_tupcolumnshowsthethresholdvalueforautoanalysis.
Tospeeduptheexperiment,wewillbestartingautovacuumeverysecond:
=> ALTER SYSTEM SET autovacuum_naptime = '1s';
=> SELECT pg_reload_conf();
Let’struncatethevactableandtheninsert,rows. Notethatautovacuumis
turnedoffatthetablelevel.
=> TRUNCATE TABLE vac;
=> INSERT INTO vac(id,s)
SELECT id, 'A' FROM generate_series(1,1000) id;
Hereiswhatourvacuum-relatedviewwillshow:
=> SELECT * FROM need_vacuum WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−+−−−−−−−−−−−
tablename | public.vac
dead_tup | 0
max_dead_tup | 50
ins_tup | 1000
max_ins_tup | 1000
last_autovacuum |
129
Chapter6 VacuumandAutovacuum
The actual threshold value is max_dead_tup = 50, although the formula listed
abovesuggeststhatitshouldbe50+0.2×1000=250.Thethingisthatstatistics
onthistablearenotavailableyetsincethecommanddoesnotupdateit:
=> SELECT reltuples FROM pg_class WHERE relname = 'vac';
reltuples
−−−−−−−−−−−
−1
(1 row)
v. The pg_class.reltuples value is set to −1; this special constant is used instead of
zerotodifferentiatebetweenatablewithoutanystatisticsandareallyemptytable
thathasalreadybeenanalyzed.Forthepurposeofcalculation,thenegativevalue
istakenaszero,whichgivesus50+0.2×0=50.
Thevalueofmax_ins_tup = 1000differsfromtheprojectedvalueof,forthe
samereason.
Let’shavealookattheanalysisview:
=> SELECT * FROM need_analyze WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−−+−−−−−−−−−−−
tablename | public.vac
mod_tup | 1006
max_mod_tup | 50
last_autoanalyze |
We have updated (inserted in this case) , rows; as a result, the threshold is
exceeded: sincethetablesizeisunknown,itiscurrentlysetto. Itmeansthat
autoanalysiswillbetriggeredimmediatelywhenweturniton:
=> ALTER TABLE vac SET (autovacuum_enabled = on);
Oncethetableanalysiscompletes,thethresholdisresettoanadequatevalueof
rows.
=> SELECT reltuples FROM pg_class WHERE relname = 'vac';
reltuples
−−−−−−−−−−−
1000
(1 row)
130
6.5 AutomaticVacuumandAnalysis
=> SELECT * FROM need_analyze WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
tablename | public.vac
mod_tup | 0
max_mod_tup | 150
last_autoanalyze | 2022−09−19 14:51:25.983319+03
Let’sgetbacktoautovacuum:
=> SELECT * FROM need_vacuum WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−+−−−−−−−−−−−
tablename | public.vac
dead_tup | 0
max_dead_tup | 250
ins_tup | 1000
max_ins_tup | 1200
last_autovacuum |
The max_dead_tup and max_ins_tup values have also been updated based on the
actualtablesizediscoveredbytheanalysis.
Vacuumingwillbestartedifatleastoneofthefollowingconditionsismet:
• Morethandeadtuplesareaccumulated.