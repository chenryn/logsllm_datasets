title:Iframes/Popups Are Dangerous in Mobile WebView: Studying and Mitigating
Differential Context Vulnerabilities
author:Guangliang Yang and
Jeff Huang and
Guofei Gu
Iframes/Popups Are Dangerous in Mobile 
WebView: Studying and Mitigating Differential 
Context Vulnerabilities
GuangLiang Yang, Jeff Huang, and Guofei Gu, Texas A&M University
https://www.usenix.org/conference/usenixsecurity19/presentation/yang-guangliang
This paper is included in the Proceedings of the 
28th USENIX Security Symposium.
August 14–16, 2019 • Santa Clara, CA, USA
978-1-939133-06-9
Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Iframes/Popups Are Dangerous in Mobile WebView:
Studying and Mitigating Differential Context Vulnerabilities
GuangLiang Yang, Jeff Huang, Guofei Gu
Texas A&M University
{ygl, jeffhuang, guofei}@tamu.edu
Abstract
In this paper, we present a novel class of Android Web-
View vulnerabilities (called Differential Context Vulnerabili-
ties or DCVs) associated with web iframe/popup behaviors.
To demonstrate the security implications of DCVs, we de-
vise several novel concrete attacks. We show an untrusted
web iframe/popup inside WebView becomes dangerous that
it can launch these attacks to open holes on existing defense
solutions, and obtain risky privileges and abilities, such as
breaking web messaging integrity, stealthily accessing sensi-
tive mobile functionalities, and performing phishing attacks.
Then, we study and assess the security impacts of DCVs
on real-world apps. For this purpose, we develop a novel tech-
nique, DCV-Hunter, that can automatically vet Android apps
against DCVs. By applying DCV-Hunter on a large number
of most popular apps, we ﬁnd DCVs are prevalent. Many high-
proﬁle apps are veriﬁed to be impacted, such as Facebook,
Instagram, Facebook Messenger, Google News, Skype, Uber,
Yelp, and U.S. Bank. To mitigate DCVs, we design a multi-
level solution that enhances the security of WebView. Our
evaluation on real-world apps shows the mitigation solution
is effective and scalable, with negligible overhead.
1 Introduction
Nowadays, mobile app developers enjoy the beneﬁts of the
amalgamation of web and mobile techniques. They can easily
and smoothly integrate all sorts of web services in their apps
(hybrid apps) by embedding the browser-like UI component
“WebView”. WebView is as powerful as regular web browsers
(e.g., desktop browsers), and well supports web features, in-
cluding the utilization of iframes/popups.
In the web platform, iframes/popups are frequently used,
but also often the root cause of several critical security is-
sues (e.g., frame hijacking [11] and clickjacking [23, 43]).
In past years, in regular browsers, their behaviors have been
well studied, and a variety of mature iframe/popup protec-
tion solutions (e.g., Same Origin Policy (SOP) [6], HTML5
iframe sandbox [4], and navigation policies [11]) have been
deployed.
Inconsistencies Between Browsers and WebView. How-
ever, in WebView, a totally different working environment
is provided for iframes/popups, due to WebView’s own pro-
gramming and UI features. Although these features improve
app performance and user experience, they extensively impact
iframe/popup behaviors and introduce security concerns. In
particular, WebView enables several programming APIs (Fig-
ure 1) to help developers customize iframe/popup behaviors.
For example, the setting APIs allow developers to conﬁgure
their WebView instances. In the customized web environment
(WebView), it is unclear whether existing iframe/popup pro-
tection solutions are still effective.
Furthermore, WebView UI is designed in a simple style
(Figure 2) that only one UI area for rendering web content is
provided. Due to the lack of the address bar, it is difﬁcult for
users to learn what web content is being loaded; due to the
lack of the tab bar, it is unknown how multiple WebView UI
instances (WUIs) are managed. Therefore, if an iframe/popup
has abilities to secretly navigate the main frame (the top
frame) or put their own WUI to the foremost position for
overlaying the original WUI, phishing attacks occur and may
cause serious consequences. Consider the scenario shown in
Figure 3 and 4. The Huntington banking app (one million+
downloads) uses WebView to help users reset passwords (Fig-
ure 3-a,b). Inside WebView, the main frame contains an iframe
for isolatedly loading untrusted third-party tracking content
(Figure 4). However, if the untrusted web content inside the
iframe obtains the ability of stealthily redirecting the main
frame to a fake website (Figure 3-c), serious security risks are
posed. For example, users’ personal (e.g., SSN info and Tax
ID) and bank account information may be stolen, and further
ﬁnancial losses may also be caused.
Differential Context Vulnerability (DCV). Motivated by
above security concerns, we conduct the ﬁrst security study of
iframe/popup behaviors in the context of Android WebView.
In this paper, we use the term “context” to refer to a web
environment that includes GUI elements (e.g., the address
and tab bars), corresponding web management APIs (e.g., the
setting APIs in WebView), and security policies (e.g., SOP
USENIX Association
28th USENIX Security Symposium    977
Critical Features
& Behaviors
Different Contexts
Browsers
WebView
Table 1: A Summary of Differential Context Vulnerabilities (DCVs)
Attacks
Explanations
Consequences
Main-Frame
Creation
Address
Bar
Java APIs
Origin Hiding Attack
Special common origins
(e.g., null) Of Main-Frame
Sensitive functionalities behind postMessage
and JavaScript Bridges can be leveraged,
which may cause the leakage of sensitive
information (e.g., location), and risky access
on Hardware (e.g., camera and microphone)
Management of
new popups
Tab Bar
Android
Frameworks
Main-Frame
Navigation
Address
Bar
Java APIs
WUI overlap attack
WUI closure attack
Traditional navigation
based attack
Privileged navigation
attack
No protection on the WUI
rendering sequence
Permissive navigation
policies
Harmful conﬂict between
WebView Customizations
and web APIs
Phishing attacks
and navigation policies).
As a consequence, our study uncovers a novel class of
vulnerabilities and design ﬂaws in WebView. These vulner-
abilities are rooted in the inconsistencies between different
contexts of regular browsers and WebView. As summarized in
Table 1, several critical web features and behaviors (i.e., main-
frame creation, popup creation, and main-frame navigation)
are involved (see more details in Section 3). These features
and behaviors are harmless or even safe in the context of
regular browsers, but become risky and dangerous in the con-
text of WebView. To demonstrate their security implications,
we devise several concrete attacks. We show through these
attacks, remote adversaries (e.g., web or network attackers
on iframes/popups) can obtain several unexpected and risky
privileges and abilities:
1) Origin-Hiding: hiding the origin when
• breaking the integrity of web messaging (i.e., postMes-
sage) [8], which allows the communication between
mutually distrusted web frames; and
• secretly accessing web-mobile bridges [21], which link
the web layer with the mobile or native layer (e.g., Java
for Android) (Figure 1);
Existing work has shown that postMessage’s message
receivers [44, 47] and web-mobile bridges [21, 49, 53]
often carry sensitive functionalities. Thus, these function-
alities can be further stealthily accessed by the untrusted
iframe/popup through the attack. As a result, sensitive
information (e.g., GPS location) may be stolen, and impor-
tant hardware (e.g., microphone) may be unauthorizedly
accessed.
2) WebView UI Redressing: performing phishing attacks by
overlapping the foremost benign WUI with an untrusted
WUI;
3) (Privileged) Main-Frame Navigation: freely redirecting
the main frame to a fake website.
Moreover, we examine the effectiveness of existing protec-
tion solutions, which include not only the solutions designed
for regular browsers (inherited by WebView), but also the
solutions proposed for Android UI and WebView. We ﬁnd
that these solutions are ineffective to defend against the above
attacks:
Figure 1: WebView Programming Features
1) For origin-hiding attacks, existing defense solutions for
postMessage [11, 44, 47, 52] and web-mobile bridges
[18, 21, 38, 45, 49] usually provide security enforcement
relying on origin validation. However, unfortunately, the
key origin information of the untrusted iframe/popup can
be hidden during attacks, which leads to the bypass of the
security enforcement.
2) For WUI redressing attacks, they are similar to Android
UI redressing attacks [15, 20, 35]. However, the associ-
ated Android UI protection solutions (e.g., [13, 41]) are
circumscribed to prevent WUI addressing attacks. This is
mainly because that these protections work by monitoring
exceptional Android UI state changes between different
apps, while the WUI state change occurs within an app
during attacks.
3) For main-frame navigation attacks, one related solution is
the iframe sandbox security mechanism, which can effec-
tively limit the navigation capability of an arbitrary iframe.
However, through DCV attacks, an untrusted iframe can
still break the above limitation and cause privilege escala-
tion.
More details about the vulnerabilities and the weakness of
existing defense solutions are presented in Section 3. For
convenience, considering the root reason of this new type of
vulnerability (i.e., the inconsistencies between the contexts of
regular browsers and WebView), we refer to the vulnerabili-
ties as Differential Context Vulnerabilities or DCVs, and the
associated attacks as DCV attacks.
DCV-Hunter & Findings. We next study and assess the se-
curity impact of DCVs on real-world hybrid apps. To achieve
the goal, we develop a novel static vulnerability detection tech-
nique, DCV-Hunter, to automatically vet given apps against
978    28th USENIX Security Symposium
USENIX Association
Figure 2: UI Comparison
Figure 4: Attack Scenario
Figure 3: Attacking the Huntington Bank App
DCVs. Then, by applying DCV-Hunter on a number of most
popular apps, we show that DCVs are prevalent. More specif-
ically, we ﬁnd 38.4% of 11,341 hybrid apps are potentially
vulnerable, including 13,384 potentially vulnerable WebView
instances and 27,754 potential vulnerabilities. Up to now, the
potentially impacted apps have been downloaded more than
19.5 Billion times in total. Furthermore, our evaluation shows
DCV-Hunter is scalable and effective, and has relatively low
false positives (~1.5%).
We also manually verify that many high-proﬁle apps are
vulnerable (a list of video demos of our attacks can be found
online [2]), including Facebook, Instagram, Facebook Messen-
ger, Google News, Skype, Uber, Yelp, WeChat, Kayak, ESPN,
McDonald’s, Kakao Talk, and Samsung Mobile Print. Several
popular third-party development libraries, such as Facebook
Mobile Browser and Facebook React Native, are also vul-
nerable and they inﬂuence hundreds of apps. Several special
sensitive categories of apps are affected including leading
password management apps (such as dashlane, lastpass, and
1password), and popular banking apps (such as U.S. bank,
Huntington bank, and Chime mobile bank).
In our analysis, we also ﬁnd that some apps implement their
own URL address and title bars, which reduce the inconsisten-
cies between regular browsers and WebView. However, these
home-brewed URL bars hardly eliminate DCVs due to several
limitations. One major limitation is that their implementation
is often error-prone. For example, Facebook Messenger (Fig-
ure 5, one billion+ downloads) is equipped with the library
“Facebook Mobile Browser” to handle URLs contained in
messages (e.g., SMS). The browser library implements its
own address bar (Figure 5-b) to reﬂect the change of web
content (Figure 5-c) and mitigate DCV attacks (e.g., the WUI
overlap attack). However, this address bar contains a design
ﬂaw (race condition). By combining a couple of DCV attacks,
untrusted iframes/popups can still launch phishing attacks
(Figure 5-d). Due to the inclusion of the vulnerable library,
many high-proﬁle apps are impacted, such as Facebook and
Figure 5: Attacking Facebook Messenger
Instagram. In addition to the vulnerable library, we ﬁnd this
design ﬂaw is shared by many other popular apps that are not
equipped with that library, such as Kakao Talk (100 million+
downloads).
We have reported our ﬁndings to the Android security team
and many app developers. Up to now, a number of them (e.g.,
the Android and Facebook security teams) have conﬁrmed
our ﬁndings.
DCV Mitigation. DCVs are not caused by programming mis-
takes. It is extremely difﬁcult for developers to eliminate the
DCV security issues, especially considering the existence of
the limitations in WebView (Section 3.6). To mitigate the
problem, we propose a multi-level protection solution by
enhancing the security of WebView programming and UI
features. Our defense solution is implemented by instrument-
ing WebView’s independent library, but without touching the
source code of Android frameworks. Our solution is easy
to use, and can simply work after developers involve our
instrumented library, and provide a list of trusted domains.
Our evaluation on real-world apps shows that our solution
is effective and scalable, and introduces negligible overhead.
Furthermore, considering the Android version fragmentation
issue, we also test the compatibility of our solution. The re-
sult shows our solution is available in many major popular
Android versions (5.0+), and covers almost 90% of Android
devices in use.
Contributions. In sum, we make the following contributions:
• We investigate the security of iframe/popup in Android
WebView, and discover several novel and fundamental
design ﬂaws and vulnerabilities in WebView (i.e., DCVs).
• We design a novel automatic vulnerability detection tool
“DCV-Hunter” to quantify the prevalence of DCVs.
• We apply DCV-Hunter on a set of popular apps, and con-
ﬁrm that DCVs have severe security impacts.
• We further propose a multi-level solution to mitigate DCV
attacks.
USENIX Association
28th USENIX Security Symposium    979
Iframes/Popups and Related Protections
2 Background and Threat Model
Before we dive into our study of iframe/popup security, we
ﬁrst introduce necessary background information and our
threat model.
2.1
Iframes/popups are frequently used in web apps, for example,
to view ﬁles in various formats (e.g., images, videos and
PDFs), or load third-party untrusted web content (e.g., ads).
They are easy to use. To create an iframe, developers can 1)
either use the HTML element ; 2) or run JavaScript
code to dynamically build an iframe DOM node.
Furthermore, to enable a popup, developers can use the
following HTML code to generate a link:
, ...)
or window.close().
Similar to the usage of the HTML element , “win-
dow.open()” can also determine where to open popup content.
Related Protections. Up to now, several practical protection
solutions were designed and deployed in regular browsers:
• Same origin policy (SOP): SOP isolates web frames whose
origins are different. Note that SOP causes side effects that
different origins are not allowed to communicate with each