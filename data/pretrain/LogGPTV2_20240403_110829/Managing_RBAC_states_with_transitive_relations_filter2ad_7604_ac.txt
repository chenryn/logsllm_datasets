nated by role system administrators.
In GM , as depicted in Figure 3, the access of group g to
role r is authorized if and only if there is a path from g to
r. Similarly, group g has privilege p if and only if there is
143
1. the set of privileges that authorized to group g is:
∪{r.P | TCGU (g, g
(cid:48)
) ∧ LU R(g
(cid:48)
, r)}.
2. the set of users that access role r is,
) ∧ TCGR (r
∪{g.U | LU R(g, r
(cid:48)
(cid:48)
, r)}}.
Example 3. Refer to Figure 3. Rg1→ = {r1, r4, r5, r6, r3};
U→r3 = {g1, g2, g3}.
5. CONFLICTS ON A RBAC STATE
In this section, we ﬁrst show how various constraints are
expressed and evaluated in a RBAC state, and how to ﬁnd
and remove redundant constraints. We then provide the
concept of a secured RBAC state.
5.1 Conﬂict Constraints
A taxonomy on conﬂict constraints is given in [12]. Infor-
mally, conﬂict constraints are “bad” data sets that should
not occur in a RBAC state. Each conﬂict constraint is im-
posed on actual (group or role) nodes of GM .
Let CM be the set of conﬂict constraints on RBAC with a
state of GM . In the paper, the conﬂict constraints we dis-
cussed are symmetric and non-transitive. That is, if CM (x, y)
and CM (y, z) hold, then CM (y, x) holds but CM (x, z) may
not hold. Specially, CM can consist of the following listed
conﬂict constraints.
5.1.1 CS: Conﬂicts on shared elements
1. Group-group conﬂicts (CSgg): Two groups are dis-
jointed and do not share a common user. CSgg(g1, g2)
holds if and only if g1.U ∩ g2.U = ∅. For example, in
Figure 1, CSgg(g1, g9) and CSgg(g2, g9) hold, but not
CSgg(g1, g2).
In GM , CSgg(g1, g2) means that group g1 and group g2
do not have a common ancestor in GU . If CSgg(g1, g2)
holds for two groups g1 and g2 of GU , then the con-
straints will propagate to their ancestors. That is,
CSgg(g(cid:48), g(cid:48)(cid:48)) holds for the groups g(cid:48) and g(cid:48)(cid:48) that sat-
Cgg(g(cid:48), g(cid:48)(cid:48)) is derived from the fact of Cgg(g1, g2) and,
therefore, is redundant. Generally, let Red(Cgg) be
{(x, y) | (TCGU (x, w1) ∧ (CSgg(w1, y) ∨ CSgg(y, w1)))
isfy (cid:99)TCGU (g(cid:48), g1) ∧ (cid:99)TCGU (g(cid:48)(cid:48), g2) in GU . The fact of
∨((CSgg(x, w1) ∨ CSgg(w1, x)) ∧ TCGU (y, w1))
∨(TCGU (x, w1) ∧ (CSgg(w1, w2) ∨ CSgg(w2, w1))
∧TCGU (y, w2))}.
Then the set of redundant arcs of CSgg is
RedA(CSgg) = CSgg ∩ Red(CSgg).
Therefore, (cid:60)(CSgg) = CSgg − RedA(CSgg).
2. Role-role conﬂicts (CSrr): Two roles do not share a
common privilege. CSrr(r1, r2) holds if and only if
r1.P ∩ r2.P = ∅. In GM , if CSrr(r1, r2) holds, then
CSrr(r(cid:48), r(cid:48)(cid:48)) holds for the roles r(cid:48) and r(cid:48)(cid:48) that satisfy
(cid:99)TCGR (r1, r(cid:48)) ∧ (cid:99)TCGR (r2, r(cid:48)(cid:48)). Let RedA(CSrr) be the
144
Figure 4: Role-role conﬂicts CSrr
set of redundant tuples of CSrr. Let Red(CSrr) be
{(x, y) | (TCGR (w1, x) ∧ (CSrr(w1, y) ∨ CSrr(y, w1)))
∨((CSrr(x, w1) ∨ CSrr(w1, x)) ∧ TCGr (w1, y))
∨(TCGR (w1, x) ∧ (CSrr(w1, w2) ∨ CSrr(w2, w1))
∧TCGR (w2, y))}.
Then the set of redundant conﬂicts of CSrr is
RedA(CSrr) = CSrr ∩ Red(CSrr).
The reduction of CSrr is
(cid:60)(CSrr) = CSrr − RedA(CSrr).
Example 4. Let GR be the role graph depicted in
Figure 4. Assume CSrr = {(r3, r4), (r4, r5), (r3, r5),
(r4, r7), (r6, r7)}. Since Red(CSrr) is {(r4, r7), (r3, r6),
(r5, r6), (r6, r7)} holds, the set of redundant tuples in
CSrr is RedA(CSrr) = {(r4, r7), (r5, r6), (r6, r7)}.
3. User-user conﬂicts (CSuu): Two users should not both
be assigned to the same group. If CSuu(u1, u2) holds,
then {u1, u2} (cid:54)⊆ g.U for each group g of GU .
4. Privilege-privilege conﬂicts (CSpp): certain two priv-
ileges should not both be assigned to the same role.
CSpp(p1, p2) holds if and only if Rp1∩Rp2 = ∅ holds or,
equivalently, there exists no role r such that {p1, p2} ⊆
r.P .
For example, in Figure 2, it can be that CSpp(p3, p5),
CSpp(p3, p6) and CSpp(p4, p6) hold. The redundancy
RedA(CSpp) and the reduction of CSpp can be derived
in a similar way.
RedA(CSpp) = CSpp∩
{(x, y) | (TCGP (x, w1) ∧
(CSpp(w1, y) ∨ Cpp(y, w1))
∨(CSpp(x, w1) ∨ CSpp(w1, x)) ∧ TCGP (y, w1)
∨TCGP (x, w1) ∧ (CSpp(w1, w2) ∨ CSpp(w2, w1))
∧TCGR (y, w2))}.
(cid:60)(CSpp) = CSpp − RedA(CSpp).
Figure 3: Integrating Group and Role Graphs
CS conﬂicts (CSgg, CSrr, CSuu and CSpp) need to be spec-
iﬁed when deﬁning the set of nodes of GM . Each group and
role of GM should not infringe upon the CS conﬂicts.
5.1.2 CA: Conﬂicts on assignment
1. Groups-role conﬂicts (CAgs→r): Two particular user
groups, which may be included in a larger group, should
not be assigned to the same role.
That is, if CAgs→r(g1, g2), then Rg1→ ∩ Rg2→ = ∅
where Rg→ is the set of roles that are reachable from
g. That is,
Rg→ = {r|(cid:99)TCGU (g, w1)∧LU R(w1, w2)∧(cid:99)TCGR (w2, r)}.
Suppose that gi is assigned to role ri for i = 1, 2 and
{r1, r2} ∩ Rg0→ = ∅. For example, in Figure 3, it can
be CAgs→r(g3, g4) and CAgs→r(g3, g5). Similarly,
RedA(CAgs→r) and (cid:60)(CAgs→r) satisfy
RedA(CAgs→r) = CAgs→r∩
{(x, y) | (TCGU (w1, x) ∧
(CAgs→r(w1, y) ∨ CAgs→r(y, w1)) ∨
(CAgs→r(x, w1) ∨ CAgs→r(w1, x)) ∧ TCGU (w1, y)
∨TCGU (w1, x) ∧
(CAgs→r(w1, w2) ∨ CAgs→r(w2, w1))
∧TCGU (w2, y))}.
(cid:60)(CAgs→r) = CAgs→r − RedA(CAgs→r).
In this situation, these two groups are not reachable
from one to another in GU . That is, (g1.U (cid:54)⊆ g2.U ) ∧
(g2.U (cid:54)⊆ g1.U ) holds if CAgs→r(g1, g2), Rg1→ (cid:54)= ∅ and
Rg2→ (cid:54)= ∅ hold.
2. User-role conﬂicts (CAus→r): Two users do not permit
to assign the same role. User-role conﬂicts (CAus→r)
can be evaluated and expressed by composing user-
user (CSuu) and group-role (CAgs→r).
Let Ri = {Rg→|ui ∈ g.U} be the set of roles that are
accessible from ui (i = 1, 2). Then CAus→r(u1, u2)
holds if and only if R1 ∩ R2 = ∅.
For example, in Figure 3, since Ru4 = {r3, r7}, Ru5 =
{r5, r6} and Ru6 = {r6}, it can be that CAus→r(u4, u5)
and CAus→r(u4, u6) hold but not CAus→r(u5, u6).
On the other hand, if CAus→r(u1, u2) holds, then
CAgs→r(g1, g2)
holds for any groups g1 and g2 that satisfy ui ∈ gi.U
(i = 1, 2).
If CAus→r(u1, u2) holds and there exists a group g
such that {u1, u2} ⊂ g.U , then Rg→ = ∅. There-
fore, Users-role conﬂicts CAus→r can be expressed via
groups-role conﬂicts Cgs→r in a RBAC state.
3. Static group-roles conﬂicts (CAg→rs): Two particular
roles, which may be included in a large role, should
not be assigned from the same group. That is,
if
CAg→rs(r1, r2), then U→r1 ∩ U→r2 = ∅.
For example, in Figure 3, it can be CAg→rs(r1, r2) and
CAg→rs(r2, r5). This conﬂict is also called Static sep-
aration of duty. For RedA(CAg→rs) and (cid:60)(CAg→rs),
we have
RedA(CAg→rs) = CAg→rs∩
{(x, y) | (TCGR (x, w1) ∧
(CAg→rs(w1, y) ∨ CAg→rs(y, w1))
∨(CAg→rs(x, w1) ∨ CAg→rs(w1, x))
∧TCGR (y, w1) ∨ TCGR (x, w1) ∧
(CAg→rs(w1, w2) ∨ CAg→rs(w1, w2)) ∧
TCGR (y, w2))}.
(cid:60)(CAg→rs) = CAg→rs − RedA(CAg→rs). No groups
will assign to any common ancestors of r1 and r2 in
GM if CAg→rs(r1, r2) holds.
4. Weak exclusion or dynamic separation of duty Cr||r:
Two roles are weakly exclusive if, during a session, a
user of a group has activated one of the roles, then
they should not activate the weakly exclusive role at
the same time. This is called Simple Dynamic Separa-
tion of Duty in [23]. If two role r1 and r2 are weakly
exclusive, which is denoted as Cr||r(r1, r2), then
(a) these two roles are not reachable from one to an-
other. That is,
¬(TCGR (r1, r2) ∨ TCGR (r2, r1);
145
and
(b) there exists no role r that is assigned to a group
and satisﬁes
(TCGR (r, r1) ∧ TCGR (r, r2).
That is, these two roles do not share a common
ancestor role that is assigned to a group.
RedA(Cr||r) and (cid:60)(Cr||r) can be derived through
RedA(Cr||r) = Cr||r∩
{(x, y) | (TCGR (x, w1) ∧
(Cr||r(w1, y) ∨ Cr||r(y, w1))
∨(Cr||r(x, w1) ∨ Cr||r(w1, x)) ∧ TCGR (y, w1)
∨TCGR (x, w1) ∧ (Cr||r(w1, w2) ∨ Cr||r(w2, w1))
∧TCGR (y, w2))}.
(cid:60)(Cr||r) = Cr||r − RedA(Cr||r).
For example, in Figure 3, RedA(Cr||r) is {(r1, r3)} if
Cr||r(r1, r3) and Cr||r(r3, r5) hold.
5. Object-based separation of duty: A user may per-
form two diﬀerent operations on diﬀerent objects, but
may not perform these two operations on the same ob-
ject [23]. Assume that obi and opi are the object and
operation respectively (i = 1, 2). Let pij = (opi, obj)
where 1 ≤ i, j ≤ 2. Deﬁne r1.P = {p11, p22}, r2.P =
{p12, p21}, r3.P = {p11, p21}, and r4.P = {p12, p22}.
The constraint can be described by:
(a) No roles of GR have privileges of r3.P = {p11, p21};
(b) No roles of GR have privileges of r4.P = {p12, p22}.
Therefore, the conﬂicts of object-based separation of
duty can be expressed via privilege-privilege conﬂicts
(CSpp).
Besides other reasons, the removal of redundant conﬂicts can
make the enforcement of conﬂict constraints more eﬃcient.
For instance, the checking of (cid:60)(CSgg) can be more eﬃcient
than the checking of CSgg as the former can be smaller than
the later.
5.2 A secured RBAC state
Let CM be the set of conﬂict constraints of RBAC state GM .
As discussed above, conﬂicts of object-based separation of
duty and user-user conﬂicts can be described through other
conﬂicts, we assume that CM is
CM = CSgg ∪ CSrr ∪ CSpp ∪ CSuu ∪ CAgs→r
∪CAg→rs ∪ CAr||r.
CM (x, y) holds if
CSgg(x, y) ∨ CSrr(x, y) ∨ CSpp(x, y) ∨ CSuu(x, y)
∨CAgs→r(x, y) ∨ CAg→rs(x, y) ∨ CAr||r(x, y)
holds.
Deﬁnition 1. A RBAC state GM is secured for CM if
1. CM ∩ TCGM = ∅ holds;
2. GM = (cid:60)(GM ) and CM = (cid:60)(CM ).
The ﬁrst condition means that GM satisﬁes the secured re-
quirements of CM . The second condition means that there
is no redundancy in both GM and CM . In this paper, we
assume that we perform conﬂict checks on any update to
ensure that CM ∩ TCGM = ∅ holds for the updated state.
Example 5. Refer to Figure 3. Let
CSgg = {(g1, g9), (g2, g9)};
CSrr = {(r3, r4), (r4, r5), (r3, r5)};
CSpp = {(p3, p5), (p3, p6), (p4, p6)};
CAgs→r = {(g3, g4), (g3, g5)};
CAg→rs = {(r1, r2), (r2, r5)};
CAus→r = {(u4, u5), (u4, u6)},
where Cus→r can be rewritten into a set of Cgs→r which is
{(g3, g4), (g3, g5), (g4, g6), (g5, g6)}. Then GM is a secured
RBAC state under CM where:
GU = {(g1, g2), (g2, g3), (g3, g6), (g1, g4), (g4, g5)};