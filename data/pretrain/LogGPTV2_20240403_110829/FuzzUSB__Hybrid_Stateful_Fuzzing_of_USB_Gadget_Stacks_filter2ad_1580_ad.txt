previously unknown bugs (listed in Table VII). While 9 of
them were found within the Android gadgets, the remaining
21 bugs arose from the Linux gadgets. Although the majority
are gadget bugs, we also discovered 4 USB host bugs as a
by-product of the fuzzing. We have reported all the findings
to the corresponding parties, among which 27 were confirmed
by the community, 9 patched already, and 8 CVEs assigned.
The bugs detected stem from various memory errors, such as
use-after-free, null-pointer-deref, memory leakage, etc. These
bugs could affect the kernel in a severe way and lead to
exploitations, ranging from DoS attacks (§C-A) to control-flow
attacks (§C-B). Among the Android gadget bugs detected, we
notice that similar bugs could be detected from different OEM
vendors. For example, we discovered an accessory gadget bug
from the Google Android and then found a similar bug in
the Samsung Android gadget. This could happen when OEMs
derive their codebase from Google AOSP inheriting similar
bugs from the upstream code without big changes.
2) Case Study: Human Interface Device (HID) devices,
such as a keyboard and mouse, are used to interact with
humans. The corresponding HID gadget facilitates HID-specific
communications over USB. Figure 9 showcases simplified
buggy code found in the HID gadget, where an error arises due
to the race condition on the shared object hidg. Specifically,
f_hidg_read() waits for data from the host (line 6). After
it receives data from Ch3, a use-after-free crash may occur
when accessing hidg (line 9) because hidg may have been
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
92220
Bug type
#
Use-after-free
1
Slab-out-of-bounds
2
Integer overflow
3
Memory leak
4
Use-after-free
5
Use-after-free
6
Use-after-free
7
Null-ptr-deref
8
Memory leak
9
10
Use-after-free
11 Memory leak
12 Memory leak
13
Use-after-free
14
Kernel panic
15 Memory leak
Use-after-free
16
Use-after-free
17
Deadlock
18
19
Use-after-free
20
Kernel panic
21 Memory leak
Null-ptr-deref
22
Null-ptr-deref
23
Null-ptr-deref
24
25
Use-after-free
Use-after-free
26
Use-after-free
27
28
Use-after-free
29 Memory leak
Use-after-free
30
31
Use-after-free
Use-after-free
32
Use-after-free
33
34
Null-ptr-deref
Crash module
usb_hcd_unlink_urb (hcd.c)
gadget_dev_desc_UDC_store (configfs.c)
k_ascii (keyboard.c)
usbtest_probe (usbtest.c)
printer_ioctl (f_printer.c)
f_hidg_poll (f_hidg.c)
config_item_get (item.c)
tty_wakeup (tty_io.c)
scsi_init_io (scsi_lib.c)
printer_read (f_printer.c)
usb_copy_descriptors (config.c)
hidg_set_alt (f_hidg.c)
gs_flush_chars (u_serial.c)
usb_ep_queue (core.c)
u_audio_start_playback (u_audio.c)
tty_init_dev (tty_io.c)
do_set_interface (f_mass_storage.c)
tcm_alloc (f_tcm.c)
f_hidg_read (f_hidg.c)
usb_composite_setup_continue (composite.c)
gs_start_io (u_serial.c)
gether_disconnect (u_ether.c)
__configfs_open_file (file.c)
ecm_opts_ifname_show (f_ecm.c)
check_tty_count (tty_io.c)
conn_gadget_read (f_conn_gadget.c)
mtp_read (f_mtp.c)
acc_read (f_acc.c)
usb_cser_set_alt (f_cdev.c)
laf_read (f_laf.c)
acc_read (f_acc.c)
mtp_read (f_mtp.c)
f_cdev_open (f_cdev.c)
laf_release (f_laf.c)
Gadget
(host)
common
(host)
(host)
printer
hid
mass
acm
(host)
printer
loopback
hid
serial
hid
uac1
serial
mass
tcm
hid
mass
serial
ecm
common
ecm
serial
conn
mtp
accessory
cdev
laf
accessory
mtp
cdev
laf
TABLE VII: List of previously unknown bugs discovered by FUZZUSB.
Kernel
linux-5.5
linux-5.6
linux-5.6
linux-5.6
linux-5.6
linux-5.6
linux-5.6
linux-5.6
linux-5.5
linux-5.6
linux-5.6
linux-5.6
linux-5.7
linux-5.6
linux-5.8
linux-5.8
linux-5.8
linux-5.8
linux-5.8
linux-5.8
linux-5.8
linux-5.8
linux-5.8
linux-5.8
linux-5.8
android-4.9 (S)
android-4.9 (S)
android-5.4 (G)
android-4.19 (S)
android-4.19 (L)
android-4.9 (S)
android-4.19 (L)
android-4.9 (S)
android-4.19 (L)
Status
Patched
Patched
Patched
Patched
Patched
Confirmed
Confirmed
Confirmed
Reported
Patched
Confirmed
Confirmed
Confirmed
Confirmed
Confirmed
Confirmed
Confirmed
Reported
Confirmed
Confirmed
Confirmed
Confirmed
Reported
Reported
Reported
Patched
Confirmed
Patched
Reported
Patched
Confirmed
Confirmed
Patched
Reported
CVE
CVE-2020-12464
CVE-2020-13143
CVE-2020-13974
CVE-2020-15393
CVE-2020-27784
CVE-2021-0936
CVE-2021-26689
CVE-2021-30313
deallocated by hidg_free() without checking its validity
(line 16).
Note that to trigger this bug, a fuzzer needs to not only
consider inputs from multiple channels but also understand
the statefulness of the communication. Figure 10 illustrates
a sequence of state transitions leading up to the bug. Since
the buggy point resides deeply in the state machine, to reach
this location, the fuzzer needs to follow a specific transition
path, producing the right inputs for the different channels. In
particular, when the code is in the state (wait-data), without
the input from Ch1 and Ch3, a simple sequence of fuzzing
inputs in a limited channel cannot trigger the bug because the
code will not receive data from the host, but instead return at
line 7. Unlike other code coverage guided fuzzers, FUZZUSB
is able to follow all the needed steps to fully explore the code’s
internal states, revealing deep bugs much more efficiently.
B. Efficiency
Apart from its ability to find previously unknown vulnera-
bilities, we evaluate FUZZUSB in terms of code coverage. As
mentioned earlier in §VI, we first try to obtain the best mutation
ruleset, which we will rely on for the rest of the evaluation. In
this experiment, we run FUZZUSB using different mutation
rules and compare the achieved coverage. Considering the rule
choices available and various testing scenarios, we use a total of
16 different rule combinations as follows: nonstop transition (A)
struct f_hidg *hidg = file->private_data;
...
if (recv_data_from_host ()) // wait for data from Ch3
...
list = list_entry(&hidg->complete, ...) // error!!
...
goto fail;
1 /* function from Ch4 */
2 ssize_t f_hidg_read(struct file *file, ...)
3 {
4
5
6
7
8
9
10
11 }
12 /* function from Ch1 */
13 void hidg_free(struct usb_function *f)
14 {
15
16
17
18 }
struct f_hidg *hidg = func_to_hidg(f);
kfree(hidg);
...
Fig. 9: Vulnerable HID gadget code.
and 3 sec interval transition (B) for R1, transition-coverage (C)
and transition-coverage (D) for R2, unexplored state selection
(E) and random state selection (F) for R3, and reconnection
(G) and 5 times retrials (H) for R43. Figure 11 presents the
per-rule average code coverage for 28 gadgets. We ran the
tests for 24 hours for each combination with every gadget. The
experimental results show that coverage does not benefit much
3We did initial experiments ahead by changing (and incrementing) thresholds.
As a result, 5 times retry was enough for state transitions to complete when
transitions failed, and 3 sec transition interval was the smallest we could
observe some difference from nonstop transitions.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
102221
— nonstop transition (R1(A)), transition-coverage (R2(C)),
unexplored first (R3(E)) and 5 times transition retrials (R4(H)).
We use this ruleset for the rest of our evaluation.
We ran FUZZUSB using 28 gadgets and measured the
achieved code coverage over 50 hours. We compared it
with the result from the baseline fuzzers, G-fuzzer, and
FuzzUSB-SL. Figure 12a shows the average results after
three runs. Compared with the baseline G-fuzzer, FUZZUSB
achieved significant coverage improvements. FUZZUSB also
outperforms FuzzUSB-SL, implicating that state-aware input
generation is crucial in improving the code coverage in addition
to multi-channel fuzzing. In short, full-fledged FUZZUSB
showed three times and two times of improvement in the
code coverage when compared to the general code-coverage
guided fuzzers, G-fuzzer, and FuzzUSB-SL, respectively.
Figure 13 presents per-gadget code coverage after 50-hour
runs. As expected, FUZZUSB showed better coverage for all
the cases in comparison with FuzzUSB-SL and G-fuzzer.
Note that the coverage difference is much higher in the mass_-
storage gadget because of the reason that we discussed in
§III — its core functionality (e.g., handling SCSI) relies on
state-aware inputs, resulting in poor performance if inputs
remain state-agnostic. Unlike FUZZUSB and FuzzUSB-SL,
the coverage of G-fuzzer showed varying results per gadget.
The reason is that most of the coverage achieved by G-fuzzer
was derived by executing the first two initialization phases of
a gadget driver (i.e., configuration and enumeration), which
are shared among gadgets.
We designed another experiment to better highlight the
contribution of FUZZUSB to code coverage of stateful fuzzing.
In this experiment, we trigger state transitions every 30
seconds, while, in between, we resort to code coverage only
to guide mutations. Figure 14 demonstrates the code coverage
improvement rate for the first 5 minutes of FUZZUSB’s run.
The experiment relies on 3 gadgets that represent unique
behaviors with different USB device classes (e.g., Ethernet
and storage). As expected, the higher rate of coverage growth
happens every 30 seconds, just after we enable the state-
transition-based mutations. In particular, higher growth rates
are observed up to the early stage of the data communication
phase (near 150 seconds), meaning that state transitions are
essential in these phases.
In addition, we investigate the effectiveness of the multi-
channel fuzzing, breaking down the overall coverage by
inputs from different channels. Figure 15 shows per-channel
coverage results with the same gadget set used in Figure 14,
listing coverage from the host, gadget, and both channels
(i.e., combination). Although the figure solely illustrates
the partial result in the first 3 hours of the experiment (to
particularly highlight the most coverage change), we ensure
that each experiment lasted for 24 hours and the rest of the
(unplotted) results yielded the same trend. As shown in the
figure, for all these gadgets, the individual channels have their
unique coverage contribution, and this implies that fuzzing
multiple channels is essential to achieve more coverage than
single-channel fuzzing. Overall, the gadget channel presents a
Fig. 10: The state transitions of the vulnerable HID gadget in Figure 9
necessary to reach the bug.
Fig. 11: The colormap for the coverage and the identified bug count
(in parenthesis) under 16 mutation rules. While showing mutation
rules R1 - R4 in each side, A - H indicate the concrete options used
for each rule.
(a) Code coverage.
(b) Cumulative sum of bugs found.
Fig. 12: Coverage and bug-finding results running FUZZUSB for 50
hours.
from random transition R3(F) in comparison with unexplored
first approach R3(E) due to the frequently revisiting of the
explored states by random transitions. Meanwhile, transition
coverage R2(C) presents a slightly better result than state-
coverage R2(D), as taking bi-directional transitions provides
more chances to explore more paths. Based on these results, we
choose the mutation ruleset that yields the best performance
in coverage, i.e., showing 1.0 scaled coverage in the table
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
112222
Ch4: read(line 2)openedwait dataCh3: data(line 6)openedCh1: disconnect(line 16)BUG!! (line 9)AABBGGHHEEFFCCDDR1R4R2R30.96(28)1.00(30)0.88(27)0.91(28)0.81(23)0.79(19)0.81(20)0.78(18)0.89(26)0.85(28)0.84(26)0.88(29)0.75(20)0.74(21)0.74(23)0.72(19)R1R2R3R4(A) non-stop(B) 3 sec interval(C) transition-cov(D) state-cov(E) unexplored first (F) random(G) reconnect (H) 5 times retrials01040502030Time(hour)0600040002000# BlockexploredFuzzUSBFuzzUSB-SLG-fuzzer01020304050Time (hour)020Cumulative sum of bugsFuzzUSBFuzzUSB-SLG-fuzzerFig. 13: Per-gadget code coverage after 50-hour runs.
Fig. 14: Coverage improvement rate within the first five minutes
of execution for three representative gadgets. To highlight coverage
contribution by state changes, we only allow state transition every 30
seconds.
higher contribution at an earlier time, because it is in charge of
early initialization steps, e.g., gadget configuration. Note that
the host channel has more impact on mass_storage gadget
than the others. This happens because the mass_storage
gadget heavily interacts with the host by following the SCSI
protocol.
C. FreeBSD USB Gadget Stack
To show the generality and flexibility of FUZZUSB, we
extend FUZZUSB to examine the USB gadget stack of
FreeBSD 14, the latest version at the time of the experiment.
Note that FreeBSD is used for not only desktop and server
machines but also embedded and IoT devices, supporting
multiple USB gadget functionalities [44–46].
Experimental setup. Unlike Linux and Android, FreeBSD