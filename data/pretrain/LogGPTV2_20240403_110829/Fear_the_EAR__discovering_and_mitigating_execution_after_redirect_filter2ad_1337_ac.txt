Due to Ruby’s dynamic nature, this CFG might be in-
complete. In particular, strings containing Ruby code can
be evaluated at run-time using the eval function, object
methods can be dynamically called at run-time using the
send function, and methods can be added to objects at run-
time. We do not address EAR vulnerabilities associated
with these language features. However, we have found that
these features are rarely used in practice (see Section 3.2).
Step 2: Finding Redirection
To detect EARs, we must ﬁrst ﬁnd all program paths (from
any program entry to any program exit point) in the CFG
that call the Ruby on Rails method redirect_to. The rea-
son is that we need to check these paths for the presence
of code execution between the redirect call and the program
exit point. Note that intra-procedural analysis is not enough
to ﬁnd all EARs. Consider the code in Listing 2. Simply
looking in ensure_admin for code execution after the call to
redirect_to and before the end of this method is not suﬃ-
cient. Thus, we need to perform inter-procedural analysis to
ﬁnd all possible ways in which code execution can continue
after a redirect_to call until the end of the program.
Our inter-procedural analysis proceeds as follows: we start
by ﬁnding all methods that directly call redirect_to. These
methods are added to a set called interesting methods. Then,
for each method in the interesting methods set, we add to
this set all methods that call it. This process is iterated
until a ﬁxpoint is reached, and no new interesting methods
are found.
At this point, every element (method) in interesting meth-
ods can eventually lead to a redirect_to call. Whenever a
call to an interesting method returns, its execution will con-
tinue after the call site in the caller. Thus, all paths from
invocations of redirect_to until the end of the program are
captured by the paths from all invocations (call sites) of in-
teresting methods to the end of the methods that contain
these calls. Now, to detect an EAR, we can simply look for
code that is executed on a path from the call site of an in-
teresting method until the end of the method that contains
this call.
Step 3: Prune Infeasible Paths
Looking for all paths from the redirect_to method to the
program exit point might lead to false positives due to in-
feasible paths. Consider the example in Listing 4. There
1 class UsersControll er <
A p p l i c a t i o n C o n t r o l l er
def ensure_logge d_ in
if not current_user
redirect_to ( " / " ) and return false
end
@logged_in_u se rs += 1
return true
2
3
4
5
6
7
8
9
10
11
12
13
14
15 end
end
end
def delete_all
if not ensure_logge d_ in ()
return
User . delete (: all )
Listing 4: Example of potential false positive.
are no EARs in this code. The redirect_to on Line 4 will
always return true, thus, return false (also on Line 4) will
execute as well. Because of this, ensure_logged_in will al-
ways return false after performing a redirect. As a result,
the call to ensure_logged_in on Line 11 will always return
false, and the return on Line 12 will always occur.
The CFG for the code in Listing 4 is shown in Figure 2.
With no additional processing, we would incorrectly report
the path from redirect_to on Line 4 to the statement in
Line 6. Moreover, we would also report an EAR because of
the path from the redirect to the User.delete on Line 13.
The ﬁrst path is denoted as (1) in Figure 2, the second path
as (2).
To prune infeasible paths in the CFG, we explore all paths
that follow an interesting method. If all paths following an
interesting method call return the same Boolean value, we
propagate this Boolean constant to all the call sites of this
method. Then, we recursively continue constant value prop-
agation at all the call sites, pruning infeasible paths every-
where after the interesting method is called. We iteratively
continue this process throughout the CFG; whenever we ﬁnd
a constant return value, we propagate this return value to
all call sites.
Figure 2 shows the results of performing our pruning pro-
cess on the CFG of Listing 4. Initially, all paths after the
redirect_to in ensure_logged_in do not return the same
Boolean, so we cannot conclude anything about the return
value of ensure_logged_in. However, redirect_to always
returns true. Therefore, we perform constant value propa-
gation on the return value of redirect_to, which is used in
a branch. As a consequence, we can prune all of the paths
that result from the false branch. The edges of this path
are labeled with (1) in Figure 2. Now, all paths from redi-
rect_to return false, which means that ensure_logged_in
will always return false after a redirect. We now per-
form constant value propagation at all the call sites of en-
sure_logged_in, removing all the paths labeled with (2).
At this point, there is nothing more to be pruned, so we
stop. It can be seen that there is no path from redirect_to
to state-changing code (deﬁned in the next step) along the
solid lines.
Step 4: Detecting EARs
Once the CFG of the controller has been simpliﬁed and inter-
esting method information has been extracted, we perform
EAR detection. This is a fairly simple process; we traverse
delete_all
_tmp_ = ensure_logged_in()
ensure_logged_in
current_user
 false
redirect_to("/")
 true
 true
 false (1)
return false
@logged_in_users += 1
 (1)
return true
 (1)
_tmp_
 true (2)
 false
User.delete(:all)
return
 (2)
return
Figure 2: Control Flow Graph for the code shown in List-
ing 4. The dotted lines are paths removed from the CFG by
Step 3 of the EAR detection algorithm.
the CFG of every method to see if potentially problematic
code can be executed after a call to an interesting method.
We conservatively deﬁne such code as any statement that
could possibly modify the program state, excluding state-
ments that alter the control ﬂow. This excludes return and
branches, but includes assignment and method calls. As a
special case, we also disregard all operations that set the
flash or session array variable. These arrays are used in
the former case to set a message to be displayed on the
destination page, and in the latter case to store some infor-
mation in the user’s session. These calls are disregarded be-
cause they do no aﬀect the state of the web application and
are frequently called after redirection. We report as a poten-
tial EAR each method that executes potentially problematic
code between the invocation of an interesting method and
its return statements.
Step 5: Distinguishing Between Benign and Vulner-
able EARs
We also introduce a heuristic to identify vulnerable EARs.
This heuristic looks for paths from an interesting method
to a function that modiﬁes the database. If one is found,
the EAR is marked as vulnerable. We used the Rails doc-
umentation to determine the 16 functions that modify the
database. Of course, this list can be easily extended. This
process is not sound, because we perform no type analysis,
and look only at the method names being called. Moreover,
we do not analyze the models, only looking for this speciﬁc
list. Despite these limitations, our results (Section 4.1) show
Type of EAR reported
Benign
Vulnerable
Total
Total Projects
Any EAR
Only Benign
At least one vulnerable EAR
Number reported
3,089
855
3,944
18,127
1,173
830
343
Classiﬁcation after manual analysis Number
485
True Vulnerable EARs
Benign EARs
325
45
No EARs (False Positives)
Table 2: Results of manually inspecting the 855 vulnerable
EARs reported by our white-box tool. 40.1% were benign,
and 5.3% were not EARs.
Table 1: Results of running the white-box detector against
Ruby on Rails applications, 6.5% of which contained an EAR
ﬂaw. 2.9% of the projects had an EAR classiﬁed as vulner-
able.
that this heuristic is still a good indicator of potentially vul-
nerable EARs that deserve the developer’s attention.
3.2 Limitations
The white-box EAR detector is limited to analyzing Ruby
on Rails applications, although the detection algorithm can
be extended to any programming language and web frame-
work. Detection is neither sound nor complete. False neg-
atives can occur when a Rails application uses Ruby’s dy-
namic features such as eval or send to execute a redirect.
While such dynamic features are used extensively in the
Ruby on Rails framework itself, they are rarely used by web
applications written in Rails. Of the 3,457,512 method calls
in controllers that we tested our tool on, there were 428
(0.012%) eval method calls and 2,426 (0.07%) send method
calls, which shows how infrequently these are used in Rails
web applications.
The white-box tool can report two types of false positives:
false EARs, that is, the tool reports an EAR although no
code can be executed after a redirect, or false vulnerable
EARs, where the tool mistakes a benign EAR as vulnerable.
False EARs can occur for several reasons. One reason is
that the path from the redirect function to the code execu-
tion that we found is infeasible. A typical example is when
the redirect call and the code execution occur in opposite
branches. The branch conditions for these are mutually ex-
clusive, so there can never be a path from the redirect call to
the code execution. Examples of this type of false positive
are discussed in Section 4.1, and these could be mitigated
by introducing better path sensitivity.
False vulnerable EARs are a problem caused by the heuris-
tic that we use. The biggest issue is that we simply look for
method calls that have the same name as method calls that
update/change the database. However, we do not perform
any type analysis to determine the object that the method
is called on. Thus, methods such as delete on a hash table
will trigger a false vulnerable EAR, since delete is also a
method of the database object. Improved heuristics could be
developed, for instance, that include the type of the object
the method is being invoked on.
Despite these limitations, our experiments demonstrate
that the tool works very well in practice. In addition, Ruby
on Rails controllers are typically very small, as most appli-
cation logic is present in the models. Thus, our tool works
very well on these types of controllers. We provide5 our
tool to the community at large, so that others may use it to
detect EARs in their code.
5https://github.com/adamdoupe/find_ear_rails
4. RESULTS
We used our EAR detection tool to ﬁnd real-world EARs
in open-source Ruby on Rails web applications. First, we
downloaded 59,255 open-source projects from GitHub [19]
that were designated as Ruby projects and that were not a
fork of another project. We identiﬁed 18,127 of the down-
loaded Ruby projects that had an app/controllers folder,
indicating a Ruby on Rails application.
Table 1 summarizes the results. In total, we found 3,944
EAR instances in 1,173 projects. 855 of these EARs, present
in 343 projects, were classiﬁed as vulnerable by our system.
This means that 6.5% of Rails applications we tested con-
tained at least one EAR, and 29.3% of the applications con-
taining EARs had an EAR classiﬁed as vulnerable.
Of the 1,173 projects that contained at least one EAR, we
notiﬁed those project owners that had emails listed in their
GitHub proﬁle, for a total of 624. Of these project owners,
107 responded to our email. Half of the respondents, 49,
conﬁrmed the EARs we reported. 26 other respondents told
us that the GitHub project was no longer being maintained
or was a demo/toy. Three respondents pointed out false
positives, which we conﬁrmed, while 6 of the project own-
ers said that there were not going to ﬁx the EAR because
there was no security compromise. The rest of the responses
thanked us for the report but did not oﬀer a conﬁrmation of
the reported EAR.
4.1 Detection Effectiveness
To determine the eﬀectiveness of our tool, we manually
inspected all 855 vulnerable EARs. The results are shown
in Table 2. We manually veriﬁed that 485, or 59.9%, were
true positives. Many of these were caused by ad-hoc au-
thorization checks, where the developer simply introduced
a redirect when the check failed. Some examples of secu-
rity violations were allowing non-administrators access to
administrator functionality, allowing modiﬁcations to items
not belonging to the current user, and being able to sign up
for a conference even though it was full.
Listing 5 shows an interesting example adapted from a real
EAR where the redirect is followed by and return (Line 3),
however, due to Ruby’s semantics, this code contains an
EAR. In Ruby, a return with no arguments returns false6,
thus, redirect_to_login will always return false (because
of the “no argument” return call on Line 3). The result is
that the return on Line 8 will never be executed, because
redirect_to_login will always return false, and the short-
circuit logic of and will cause Line 10 to be executed. This
example shows that our tool discovers non-obvious EARs.
For vulnerable EARs, we consider two diﬀerent types of
false vulnerable EARs, which are benign
false positives:
6Technically nil, but nil and false are equivalent for
Boolean comparisons.
1 class BanksControll er <
A p p l i c a t i o n C o n t r o l l er
def redirect_to_ l og in
redirect_to ( " / login " ) and return
2
3
4
5
6
7
8
9
10
11
12 end
end
end
def create
if not current_user . is_admin ?
redirect_to_ l og in () and return
end
@bank = Bank . create ( params [: bank ])
From our results, we can conclude that we detect EARs
well. However, it is more diﬃcult to distinguish between
benign and vulnerable EARs. Classiﬁcation could be im-
proved by using a better heuristic to detect intended redi-
rects. However, even though certain EARs might not be
vulnerable at the moment, they are still programming er-
rors that should be ﬁxed. This is conﬁrmed by the responses
that we received from developers who were grateful for error
reports even though they are not exploitable at the moment.
Also, our tool reports one true vulnerability for every benign
EAR mistakenly classiﬁed as vulnerable. This is well in line
with the precision of previous static analysis tools [24,25,28].
Listing 5:
vulnerability in Ruby on Rails.
True positive Execution After Redirect
4.2 Performance