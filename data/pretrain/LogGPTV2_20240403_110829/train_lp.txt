.i data
arguments should match the values used in the original
.br mount ()
call, except for those parameters that are being deliberately changed.
.pp
the following
.i mountflags
can be changed:
.br ms_lazytime ,
.\" fixme
.\" ms_lazytime seems to be available only on a few filesystems,
.\" and on ext4, it seems (from experiment that this flag
.\" can only be enabled (but not disabled) on a remount.
.\" the following code in ext4_remount() (kernel 4.17) seems to
.\" confirm this:
.\"
.\"        if (*flags & sb_lazytime)
.\"                sb->s_flags |= sb_lazytime;
.br ms_mandlock ,
.br ms_noatime ,
.br ms_nodev ,
.br ms_nodiratime ,
.br ms_noexec ,
.br ms_nosuid ,
.br ms_relatime ,
.br ms_rdonly ,
.br ms_strictatime
(whose effect is to clear the
.br ms_noatime
and
.br ms_relatime
flags),
and
.br ms_synchronous .
attempts to change the setting of the
.\" see the definition of ms_rmt_mask in include/uapi/linux/fs.h,
.\" which excludes ms_dirsync and ms_silent, although sb_dirsync
.\" and sb_silent are split out as per-superblock flags in do_mount()
.\" (linux 4.17 source code)
.br ms_dirsync
and
.br ms_silent
flags during a remount are silently ignored.
note that changes to per-superblock flags are visible via
all mounts of the associated filesystem
(because the per-superblock flags are shared by all mounts).
.pp
since linux 3.17,
.\" commit ffbc6f0ead47fa5a1dc9642b0331cb75c20a640e
if none of
.br ms_noatime ,
.br ms_nodiratime ,
.br ms_relatime ,
or
.br ms_strictatime
is specified in
.ir mountflags ,
then the remount operation preserves the existing values of these flags
(rather than defaulting to
.br ms_relatime ).
.pp
since linux 2.6.26, the
.b ms_remount
flag can be used with
.b ms_bind
to modify only the per-mount-point flags.
.\" see https://lwn.net/articles/281157/
this is particularly useful for setting or clearing the "read-only"
flag on a mount without changing the underlying filesystem.
specifying
.ir mountflags
as:
.pp
.in +4n
.ex
ms_remount | ms_bind | ms_rdonly
.ee
.in
.pp
will make access through this mountpoint read-only, without affecting
other mounts.
.\"
.ss creating a bind mount
if
.i mountflags
includes
.br ms_bind
(available since linux 2.4),
.\" since 2.4.0-test9
then perform a bind mount.
a bind mount makes a file or a directory subtree visible at
another point within the single directory hierarchy.
bind mounts may cross filesystem boundaries and span
.br chroot (2)
jails.
.pp
the
.ir filesystemtype
and
.ir data
arguments are ignored.
.pp
the remaining bits (other than
.br ms_rec ,
described below) in the
.i mountflags
argument are also ignored.
(the bind mount has the same mount options as
the underlying mount.)
however, see the discussion of remounting above,
for a method of making an existing bind mount read-only.
.pp
by default, when a directory is bind mounted,
only that directory is mounted;
if there are any submounts under the directory tree,
they are not bind mounted.
if the
.br ms_rec
flag is also specified, then a recursive bind mount operation is performed:
all submounts under the
.i source
subtree (other than unbindable mounts)
are also bind mounted at the corresponding location in the
.i target
subtree.
.\"
.ss changing the propagation type of an existing mount
if
.ir mountflags
includes one of
.br ms_shared ,
.br ms_private ,
.br ms_slave ,
or
.br ms_unbindable
(all available since linux 2.6.15),
then the propagation type of an existing mount is changed.
if more than one of these flags is specified, an error results.
.pp
the only other flags that can be specified while changing
the propagation type are
.br ms_rec
(described below) and
.br ms_silent
(which is ignored).
.pp
the
.ir source ,
.ir filesystemtype ,
and
.ir data
arguments are ignored.
.pp
the meanings of the propagation type flags are as follows:
.tp
.br ms_shared
make this mount shared.
mount and unmount events immediately under this mount will propagate
to the other mounts that are members of this mount's peer group.
propagation here means that the same mount or unmount will automatically
occur under all of the other mounts in the peer group.
conversely, mount and unmount events that take place under
peer mounts will propagate to this mount.
.tp
.br ms_private
make this mount private.
mount and unmount events do not propagate into or out of this mount.
.tp
.br ms_slave
if this is a shared mount that is a member of a peer group
that contains other members, convert it to a slave mount.
if this is a shared mount that is a member of a peer group
that contains no other members, convert it to a private mount.
otherwise, the propagation type of the mount is left unchanged.
.ip
when a mount is a slave,
mount and unmount events propagate into this mount from
the (master) shared peer group of which it was formerly a member.
mount and unmount events under this mount do not propagate to any peer.
.ip
a mount can be the slave of another peer group
while at the same time sharing mount and unmount events
with a peer group of which it is a member.
.tp
.br ms_unbindable
make this mount unbindable.
this is like a private mount,
and in addition this mount can't be bind mounted.
when a recursive bind mount
.rb ( mount ()
with the
.br ms_bind
and
.br ms_rec
flags) is performed on a directory subtree,
any unbindable mounts within the subtree are automatically pruned
(i.e., not replicated)
when replicating that subtree to produce the target subtree.
.pp
by default, changing the propagation type affects only the
.i target
mount.
if the
.b ms_rec
flag is also specified in
.ir mountflags ,
then the propagation type of all mounts under
.ir target
is also changed.
.pp
for further details regarding mount propagation types
(including the default propagation type assigned to new mounts), see
.br mount_namespaces (7).
.\"
.ss moving a mount
if
.i mountflags
contains the flag
.br ms_move
(available since linux 2.4.18),
then move a subtree:
.i source
specifies an existing mount and
.i target
specifies the new location to which that mount is to be relocated.
the move is atomic: at no point is the subtree unmounted.
.pp
the remaining bits in the
.ir mountflags
argument are ignored, as are the
.ir filesystemtype
and
.ir data
arguments.
.\"
.ss creating a new mount
if none of
.br ms_remount ,
.br ms_bind ,
.br ms_move ,
.br ms_shared ,
.br ms_private ,
.br ms_slave ,
or
.br ms_unbindable
is specified in
.ir mountflags ,
then
.br mount ()
performs its default action: creating a new mount.
.ir source
specifies the source for the new mount, and
.ir target
specifies the directory at which to create the mount point.
.pp
the
.i filesystemtype
and
.i data
arguments are employed, and further bits may be specified in
.ir mountflags
to modify the behavior of the call.
.\"
.sh return value
on success, zero is returned.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
the error values given below result from filesystem type independent
errors.
each filesystem type may have its own special errors and its
own special behavior.
see the linux kernel source code for details.
.tp
.b eacces
a component of a path was not searchable.
(see also
.br path_resolution (7).)
.tp
.b eacces
mounting a read-only filesystem was attempted without giving the
.b ms_rdonly
flag.
.ip
the filesystem may be read-only for various reasons, including:
it resides on a read-only optical disk;
it is resides on a device with a physical switch that has been set to
mark the device read-only;
the filesystem implementation was compiled with read-only support;
or errors were detected when initially mounting the filesystem,
so that it was marked read-only
and can't be remounted as read-write (until the errors are fixed).
.ip
some filesystems instead return the error
.br erofs
on an attempt to mount a read-only filesystem.
.tp
.b eacces
the block device
.i source
is located on a filesystem mounted with the
.b ms_nodev
option.
.\" mtk: probably: write permission is required for ms_bind, with
.\" the error eperm if not present; cap_dac_override is required.
.tp
.b ebusy
an attempt was made to stack a new mount directly on
top of an existing mount point that was created in this
mount namespace with the same
.i source
and
.ir target .
.tp
.b ebusy
.i source
cannot be remounted read-only,
because it still holds files open for writing.
.tp
.b efault
one of the pointer arguments points outside the user address space.
.tp
.b einval
.i source
had an invalid superblock.
.tp
.b einval
a remount operation
.rb ( ms_remount )
was attempted, but
.i source
was not already mounted on
.ir target .
.tp
.b einval
a move operation
.rb ( ms_move )
was attempted, but the mount tree under
.i source
includes unbindable mounts and
.i target
is a mount that has propagation type
.br ms_shared .
.tp
.b einval
a move operation
.rb ( ms_move )
was attempted, but the parent mount of
.i source
mount has propagation type
.br ms_shared .
.tp
.b einval
a move operation
.rb ( ms_move )
was attempted, but
.i source
was not a mount, or was \(aq/\(aq.
.tp
.b einval
a bind operation
.rb ( ms_bind )
was requested where
.i source
referred a mount namespace magic link (i.e., a
.i /proc/[pid]/ns/mnt
magic link or a bind mount to such a link)
and the propagation type of the parent mount of
.i target
was
.br ms_shared ,
.\" see commit 8823c079ba7136dc1948d6f6dcb5f8022bde438e
but propagation of the requested bind mount could lead to a circular
dependency that might prevent the mount namespace from ever being freed.
.tp
.b einval
.i mountflags
includes more than one of
.br ms_shared ,
.br ms_private ,
.br ms_slave ,
or
.br ms_unbindable .
.tp
.b einval
.i mountflags
includes
.br ms_shared ,
.br ms_private ,
.br ms_slave ,
or
.br ms_unbindable
and also includes a flag other than
.br ms_rec
or
.br ms_silent .
.tp
.br einval
an attempt was made to bind mount an unbindable mount.
.tp
.br einval
in an unprivileged mount namespace
(i.e., a mount namespace owned by a user namespace
that was created by an unprivileged user),
a bind mount operation
.rb ( ms_bind )
was attempted without specifying
.rb ( ms_rec ),
which would have revealed the filesystem tree underneath one of
the submounts of the directory being bound.
.tp
.b eloop
too many links encountered during pathname resolution.
.tp
.b eloop
a move operation was attempted, and
.i target
is a descendant of
.ir source .
.tp
.b emfile
(in case no block device is required:)
table of dummy devices is full.
.tp
.b enametoolong
a pathname was longer than
.br maxpathlen .
.tp
.b enodev
.i filesystemtype
not configured in the kernel.
.tp
.b enoent
a pathname was empty or had a nonexistent component.
.tp
.b enomem
the kernel could not allocate a free page to copy filenames or data into.
.tp
.b enotblk
.i source
is not a block device (and a device was required).
.tp
.b enotdir
.ir target ,
or a prefix of
.ir source ,
is not a directory.
.tp
.b enxio
the major number of the block device
.i source
is out of range.
.tp
.b eperm
the caller does not have the required privileges.
.tp
.b eperm
an attempt was made to modify
.rb ( ms_remount )
the
.br ms_rdonly ,
.br ms_nosuid ,
or
.br ms_noexec
flag, or one of the "atime" flags
.rb ( ms_noatime ,
.br ms_nodiratime ,
.br ms_relatime )
of an existing mount, but the mount is locked; see
.br mount_namespaces (7).
.tp
.b erofs
mounting a read-only filesystem was attempted without giving the
.b ms_rdonly
flag.
see
.br eacces ,
above.
.sh versions
the definitions of
.br ms_dirsync ,
.br ms_move ,
.br ms_private ,
.br ms_rec ,
.br ms_relatime ,
.br ms_shared ,
.br ms_slave ,
.br ms_strictatime ,
and
.br ms_unbindable
were added to glibc headers in version 2.12.
.\"
.sh conforming to
this function is linux-specific and should not be used in
programs intended to be portable.
.sh notes
since linux 2.4 a single filesystem can be mounted at
multiple mount points, and multiple mounts can be stacked
on the same mount point.
.\" multiple mounts on same mount point: since 2.3.99pre7.
.pp
the
.i mountflags
argument may have the magic number 0xc0ed (\fbms_mgc_val\fp)
in the top 16 bits.
(all of the other flags discussed in description
occupy the low order 16 bits of
.ir mountflags .)
specifying
.br ms_mgc_val
was required in kernel versions prior to 2.4,
but since linux 2.4 is no longer required and is ignored if specified.
.pp
the original
.b ms_sync
flag was renamed
.b ms_synchronous
in 1.1.69
when a different
.b ms_sync
was added to \fi\fp.
.pp
before linux 2.4 an attempt to execute a set-user-id or set-group-id program
on a filesystem mounted with
.b ms_nosuid
would fail with
.br eperm .
since linux 2.4 the set-user-id and set-group-id bits are
just silently ignored in this case.
.\" the change is in patch-2.4.0-prerelease.
.\"
.ss mount namespaces
starting with kernel 2.4.19, linux provides mount namespaces.
a mount namespace is the set of filesystem mounts that
are visible to a process.
mount namespaces can be (and usually are)
shared between multiple processes,
and changes to the namespace (i.e., mounts and unmounts) by one process
are visible to all other processes sharing the same namespace.
(the pre-2.4.19 linux situation can be considered as one in which
a single namespace was shared by every process on the system.)
.pp
a child process created by
.br fork (2)
shares its parent's mount namespace;
the mount namespace is preserved across an
.br execve (2).
.pp
a process can obtain a private mount namespace if:
it was created using the
.br clone (2)
.br clone_newns
flag,
in which case its new namespace is initialized to be a