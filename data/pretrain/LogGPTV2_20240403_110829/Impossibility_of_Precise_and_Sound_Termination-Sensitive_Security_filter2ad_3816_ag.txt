[22] D. Volpano and G. Smith, “Eliminating covert ﬂows with minimum
typings,” in Proc. of CSFW 1997, ser. CSFW ’97, 1997.
[23] M. Abadi, A. Banerjee, N. Heintze, and J. G. Riecke, “A core calculus
of dependency,” in Proc. of POPL 1999, 1999, pp. 147–160.
[24] A. Sabelfeld and D. Sands, “A per model of secure information ﬂow in
sequential programs,” Higher-Order and Symbolic Computation, vol. 14,
no. 1, pp. 59–91, 2001.
[25] S. Moore, A. Askarov, and S. Chong, “Precise enforcement of progress-
sensitive security,” in Proc. of CCS 2012, ser. CCS ’12, 2012, pp. 881–
893.
[26] J. Agat, “Transforming out timing leaks,” in Proc. of POPL 2000, ser.
POPL ’00, 2000.
[27] D. M. Volpano and G. Smith, “Probabilistic noninterference in a
concurrent language,” Journal of Computer Security, vol. 7, no. 1, 1999.
[28] G. Boudol and I. Castellani, “Noninterference for concurrent programs,”
in Proc. of ICALP 2001, 2001, pp. 382–395.
[29] J. Agat and D. Sands, “On conﬁdentiality and algorithms,” in Proc. of
[30] T. Terauchi, “A type system for observational determinism,” in Proc. of
IEEE SP 2001, 2001, pp. 64–77.
CSF 2008, 2008, pp. 287–300.
[31] T. Antonopoulos, P. Gazzillo, M. Hicks, E. Koskinen, T. Terauchi, and
S. Wei, “Decomposition instead of self-composition for proving the
absence of timing channels,” in Proc. of PLDI, 2017, pp. 362–375.
[32] M. Vanhoef, W. D. Groef, D. Devriese, F. Piessens, and T. Rezk,
“Stateful declassiﬁcation policies for event-driven programs,” in Proc.
of CSF 2014, ser. CSF’ 14, 2014, pp. 293–307.
[33] I. Bolosteanu and D. Garg, “Asymmetric secure multi-execution with
declassiﬁcation,” in Proc. of POST 2016, 2016, pp. 24–45.
[34] V. Kashyap, B. Wiedermann, and B. Hardekopf, “Timing- and
termination-sensitive secure information ﬂow: Exploring a new ap-
proach,” in Proc. of IEEE SP 2011, ser. SP ’11, 2011, pp. 413–428.
[35] W. Rafnsson and A. Sabelfeld, “Secure multi-execution: Fine-grained,
declassiﬁcation-aware, and transparent,” Journal of Computer Security,
vol. 24, no. 1, pp. 39–90, 2016.
[36] M. R. Clarkson and F. B. Schneider, “Hyperproperties,” Journal of
Computer Security, vol. 18, no. 6, pp. 1157–1210, 2010.
[37] A. Asperti and C. Armentano, “A page in number theory,” J. Formalized
Reasoning, vol. 1, no. 1, pp. 1–23, 2008.
(cid:2)
(cid:2)
(cid:2)
or O
(cid:2)(cid:2)
, O
(cid:2)(cid:2)
, O
(cid:2)(cid:2) = I
• lec
• lec
(cid:2)(cid:2)
(cid:6)= I
(cid:2)(cid:2)
(cid:6)= I
.μ. Since I
(cid:2)(cid:2), lecx(cid:2)
(cid:2)(cid:2) = I
(cid:2)(cid:23)l and O
(cid:2) = O(cid:23)l.
(cid:2)
lecx(cid:2)(cid:2)
(cid:2)
.μ = lecx(cid:2)
X. PROOF OF SECTION 6
(cid:2), and lecx I0→E lecx(cid:2)
(cid:2) (cid:23)⊥ and O
(cid:2)(cid:2) (cid:6)= I
(cid:2) (cid:23)⊥. Since I
I0→E lec
For the sake of contradiction, we assume that I
(cid:2) (cid:6)= O(cid:23)⊥.
(cid:2)(cid:2)
Case 1: I
is stuck because of the scheduler and lecx(cid:2)
. Contradiction since the scheduler is fair.
i1→E lec
Lemma VI.3. For any lecs and I, suppose that lecs(I) (cid:2)
(cid:2)(cid:11). For any l, it
, O(cid:11), and for any l, (cid:10)(cid:10)lecs, I(cid:11)(cid:11)(l) = (cid:10)I
(cid:10)I
follows that I
Proof. Base case: l = ⊥. Let (cid:10)(cid:10)lecs, I(cid:11)(cid:11)(⊥) = (cid:10)I
lecx = lecs(⊥). We need to prove that I
O(cid:23)⊥.
(cid:2)(cid:11), and
(cid:2) =
(cid:2) (cid:23)⊥
(cid:2) (cid:23)⊥, there exists I0
(cid:6)= I
(which may be an empty stream that has only input events
from ⊥) s.t. lecs(⊥)
(cid:2)
, and lec
will consume an input event at ⊥. Since lecs(⊥) =
and lecx(cid:2)
lecx, since they consume the same input events at ⊥, since
.P = lecx.P and
programs are deterministic, we have that lec
(cid:2) (cid:23)⊥, we have the following
lec
cases:
i1→E
, and i1 (cid:6)= i2. Contra-
have the same programs,
(cid:2) (cid:23)⊥.
Since the inputs consumed are the same, local executions are
(cid:2) = O(cid:23)l.
deterministic, and the scheduler is fair, we have that O
(cid:2) (cid:3) l. That is for
Contradiction.
(cid:2) (cid:23)l(cid:2) and Ol(cid:2) = O (cid:23)l(cid:2), where
all l
(cid:10)(cid:10)lecs, I(cid:11)(cid:11)(l
(cid:2) = O(cid:23)l, where
(cid:2)(cid:2) = I
We now need to prove that I
(cid:10)(cid:10)lecs, I(cid:11)(cid:11)(l
Let lecx = (cid:10)lecs(l).P, lecs(l).μ, [[l,(cid:10)(cid:10)lecs, I(cid:11)(cid:11)]](cid:11)l. As for the
(cid:2)(cid:2) (cid:6)=
case of ⊥, for the sake of contradiction, we suppose that I
(cid:2) (cid:6)= O(cid:23)l.
(cid:2)(cid:23)l or O
I
(cid:6)= I
(cid:2) (cid:23)l, there exists I0
Case 1: I
which may be an empty stream and has only input events at
l s.t. lecs(l) I0→E lec
will
consume an input event at l and the input events consumed
by them makes I
(cid:2) (cid:3) l, we have that I
l(cid:2) , Ol(cid:2)(cid:11).
(cid:2)
(cid:2)(cid:11).
(cid:2)(cid:2)
(cid:2)) = (cid:10)I
(cid:2)) = (cid:10)I
(cid:2) and lecx(cid:2)
diction since lec
memories, and inputs at ⊥.
(cid:2) (cid:23)l. Since I
(cid:2), lecx I0→E lecx(cid:2)
(cid:6)= O (cid:23)l. As proven above, I
IH: Suppose that the lemma holds for all l
(cid:2)
.μ.
.P and lec
From the construction of lecx, we have that
lecx.P =
lecs(l).P , lecx.μ = lecs(l).μ, the waiting input for lecx is
.P = lecx(cid:2)
.μ = lecx(cid:2)
(cid:2)(cid:23)l.
(cid:2)(cid:2) (cid:6)= I
(cid:2)
We now prove that lec
i2→E lecx(cid:2)(cid:2)
(cid:2)(cid:23)l and O
Case 2: O
(cid:2)
, and lec
and lecx(cid:2)
(cid:2)(cid:2) = I
(cid:2)(cid:2)
(cid:6)= I
(cid:2)
l(cid:2) = I
, O
(cid:2)(cid:2)
(cid:2)
509
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
.P (cid:6)= lecx(cid:2)
.μ (cid:6)= lecx(cid:2)
(cid:2) (cid:3) l. The input events at l
(cid:2) is lecs(l).W (ch) : I
from the waiting input of lecs(l) and inputs consumed by lower
(cid:2)
executions. Since program are deterministic, lec
.P
.μ only when lecs(l) and lecx consume
or lec
a different input event. Since they consume the same input
events at l (that is I0), they must consume a different input
(cid:2) available for the local ex-
event at l
(cid:2). The
(cid:2)(ch), where Γ(ch) = l
ecution at l
(cid:2) available for lecx is lecs(l).W (ch) : I
(cid:2)
l(cid:2) (ch),
input events at l
(cid:2). Since lecs(l) and lecx consume a different
(cid:2) (cid:3) l, there exists ch s.t. Γ(ch) = l
where Γ(ch) = l
(cid:2) and
input event at l
(cid:2)(ch) (cid:6)= lecs(l).W (ch) : I
(cid:2)
l(cid:2) (ch). In other
lecs(l).W (ch) : I
(cid:2)(ch) (cid:6)= I
(cid:2) and I
(cid:2)
words, there exists ch s.t. Γ(ch) = l
l(cid:2).
(cid:2)(cid:23)l(cid:2)(cid:6)= I
(cid:2)
l(cid:2). Contradiction.
Therefore, I
(cid:2)(cid:2), lecx(cid:2)
Case 2: O
i2→E lecx(cid:2)(cid:2)
We have the following cases:
(cid:2)
• lec
lecx(cid:2)
(cid:2)
• lec
is stuck forever because of
i1→E lecx(cid:2)(cid:2)
i1→E lec
the scheduler and
. Contradiction since the scheduler is fair.
, and i1 (cid:6)= i2. Contra-
(cid:2) and lecx(cid:2)
diction since lec
have the same programs,
memories, and inputs at l (that is the input obtained by
removing I0 from I (cid:23)l).
(cid:2) (cid:23)⊥.
Since the inputs consumed are the same, local executions are
(cid:2) = O(cid:23)l.
deterministic, and the scheduler is fair, we have that O
Contradiction.
Theorem VI.2 (Soundness). For any lecs, lecs is ITSNI.
(cid:6)= O (cid:23)l. As proven above, I
Proof. Let lecs(I1)(cid:2) (cid:10)I
1, O1(cid:11) and lecs(I2)(cid:2) (cid:10)I
2, O2(cid:11). From
(cid:2)
(cid:2)
il(cid:2) and Oi(cid:23)l(cid:2) =
i (cid:23)l(cid:2) = I
(cid:2)(cid:2)
(cid:2), we have that: I
(cid:2)
Lemma VI.3, for any l
il(cid:2), where (cid:10)(cid:10)lecs, Ii(cid:11)(cid:11)(l
(cid:2)) = (cid:10)I
il(cid:2)(cid:11).
(cid:2)(cid:2)
(cid:2)
O
(cid:2) (cid:15) l,
(cid:2) (cid:15) l, we have that I1(cid:23)l(cid:2) = I2(cid:23)l(cid:2). Thus, for l
For any l
(cid:2) (cid:15) l,
(cid:2)(cid:2)
(cid:2)
(cid:2)
(cid:2)(cid:2)
1l(cid:2) = O
1l(cid:2) = I
2l(cid:2). Therefore, for l
2l(cid:2) and O
we have that I
2|l and
1 (cid:23)l(cid:2) = I
2 (cid:23)l(cid:2) and O1 (cid:23)l(cid:2) = O2 (cid:23)l(cid:2). Thus, I
1|l = I
(cid:2)
(cid:2)
(cid:2)
(cid:2)
I
O1|l = O2|l. Hence, SMEF is ITSNI.
(cid:2)(cid:2) = I
(cid:2)(cid:2)
il(cid:2) , O
(cid:2)
XI. PROOF OF SECTION 7
(cid:2)
(cid:2)
(cid:2)
, η and τ
, η such that Γ, τ (cid:27) c : τ
Given a security level l, program P is typable as high with
environment Γ, denoted Γ (cid:27) P : Hl, if there exists τ, τ
, η such
(cid:2) (cid:6)(cid:15) l. We write Γ (cid:27) P : H when l
that Γ, τ (cid:27) c : τ
is clear from the context. Given a security level l, program P
is typable as low with environment Γ, denoted Γ (cid:27) P : Ll, if
(cid:2) (cid:15) l. We
there exists τ, τ
, η and τ
write Γ (cid:27) P : L when l is clear from the context.
∗
(cid:2) as the
Auxiliary deﬁnitions for the proof: We deﬁne
I,O
reﬂexive and transitive closure of (cid:2). We also deﬁne
(cid:2) as the
reﬂexive and transitive closure of (cid:2) where I1 and O2 recall
the input streams and output streams used for the transitions.
In this section, we coinductively extend the notion of visible
event and overload visible() for streams.
(cid:2)
We require the deﬁnition of concatenation of streams,
denoted ++, deﬁned coinductively as follows:
s + +S
s : S + +S
(cid:2) = S
(cid:2)(cid:2)
(cid:2) = s : S
(cid:2)(cid:2)
[] + +[] = []
[] + +S = S
We overload ++ to be applied to input and outputs of our
language, in a per channel basis. We deﬁne Γ (cid:27) μ =l μ
(cid:2)
510
(cid:2)(x) for all variables x st Γ(x) (cid:15) l. We deﬁne
if μ(x) = μ
equality with respect to a security level l between events,
denoted =l, as:
¬visiblel(a1) ¬visiblel(a1)
visiblel(a1) visiblel(a1)
a1 = a2
a1 =l a2
a1 =l a2
For simplicity, in the following we will assume that there
is a strict separation between input and output channels.
This simpliﬁes greatly the following deﬁnition and lifting
this restriction does not shed any light on the main result.
We will use the following function on input streams for the
bisimulation:
g(a, I, ch) =
⎧⎪⎨
⎪⎩I
I
(cid:2)