具体演示过程，你可以看下面。
那么对于这两者，我们应该使用哪个呢？
个人感觉应该优先使用 #!/usr/bin/env python ，因为不是所有的机器的 python 解释器都是
/usr/bin/python 。
1.16 dict() 与 {} 生成空字典有什么区别？
在初始化一个空字典时，有的人会写 dict()，而有的人会写成 {}
很多人会想当然的认为二者是等同的，但实际情况却不是这样的。
在运行效率上，{} 会比 dict() 快三倍左右。
使用 timeit 模块，可以轻松测出这个结果
$ python -m timeit -n 1000000 -r 5 -v "dict()"
raw times: 0.0996 0.0975 0.0969 0.0969 0.0994
1000000 loops, best of 5: 0.0969 usec per loop
$
$ python -m timeit -n 1000000 -r 5 -v "{}"
raw times: 0.0305 0.0283 0.0272 0.03 0.0317
1000000 loops, best of 5: 0.0272 usec per loop
那为什么会这样呢？
探究这个过程，可以使用 dis 模块
当使用 {} 时
$ cat demo.py
{}
$
$ python -m dis demo.py
1 0 BUILD_MAP 0
2 POP_TOP
4 LOAD_CONST 0 (None)
6 RETURN_VALUE
当使用 dict() 时：
$ cat demo.py
dict()
$
$ python -m dis demo.py
1 0 LOAD_NAME 0 (dict)
2 CALL_FUNCTION 0
4 POP_TOP
6 LOAD_CONST 0 (None)
8 RETURN_VALUE
可以发现使用 dict()，会多了个调用函数的过程，而这个过程会有进出栈的操作，相对更加耗时。
1.17 有趣但没啥用的 import 用法
import 是 Python 导包的方式。
你知道 Python 中内置了一些很有（wu）趣（liao）的包吗？
Hello World
>>> import __hello__
Hello World!
Python之禅
>>> import this
The Zen of Python, by Tim Peters
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
反地心引力漫画
在 cmd 窗口中导入 antigravity
>>> import antigravity
就会自动打开一个网页。
1.18 正负得负，负负得正
从初中开始，我们就开始接触了  ，并且都知道了  的思想。
Python 作为一门高级语言，它的编写符合人类的思维逻辑，包括  。
>>> 5-3
2
>>> 5--3
8
>>> 5+-3
2
>>> 5++3
8
>>> 5---3
2
1.19 return不一定都是函数的终点
众所周知，try…finally… 的用法是：不管try里面是正常执行还是有报异常，最终都能保证finally能够
执行。
同时我们又知道，一个函数里只要遇到 return 函数就会立马结束。
那问题就来了，以上这两种规则，如果同时存在，Python 解释器会如何选择？哪个优先级更高？
写个示例验证一下，就明白啦
>>> def func():
... try:
... return 'try'
... finally:
... return 'finally'
...
>>> func()
'finally'
从输出中，我们可以发现：在try…finally…语句中，try中的 return 会被直接忽视（这里的 return 不
是函数的终点），因为要保证 finally 能够执行。
如果 try 里的 return 真的是直接被忽视吗？
我们都知道如果一个函数没有 return，会隐式的返回 None，假设 try 里的 return 真的是直接被忽
视，那当finally 下没有显式的 return 的时候，是不是会返回None呢？
还是写个 示例来验证一下：
>>> def func():
... try:
... return 'try'
... finally:
... print('finally')
...
>>>
>>> func()
finally
'try'
>>>
从结果来看，当 finally 下没有 reutrn ，其实 try 里的 return 仍然还是有效的。
那结论就出来了，如果 finally 里有显式的 return，那么这个 return 会直接覆盖 try 里的 return，而
如果 finally 里没有 显式的 return，那么 try 里的 return 仍然有效。
1.20 字符串里的缝隙是什么？
在Python中求一个字符串里，某子字符（串）出现的次数。
大家都懂得使用 count() 函数，比如下面几个常规例子：
>>> "aabb".count("a")
2
>>> "aabb".count("b")
2
>>> "aabb".count("ab")
1
但是如果我想计算空字符串的个数呢？
>>> "aabb".count("")
5
奇怪了吧？
不是应该返回 0 吗？怎么会返回 5？
实际上，在 Python 看来，两个字符之间都是一个空字符，通俗的说就是缝隙。
因此 对于 aabb 这个字符串在 Python 来看应该是这样的
理解了这个“缝隙” 的概念后，以下这些就好理解了。
>>> (" " * 10).count("")
11
>>>
>>> "" in ""
True
>>>
>>> "" in "M"
True
1.21 Python2下 也能使用 print(“”)
可能会有不少人，觉得只有 Python 3 才可以使用 print()，而 Python 2 只能使用 print "" 。
但是其实并不是这样的。
在Python 2.6之前，只支持
print "hello"
在Python 2.6和2.7中，可以支持如下三种
print "hello"
print("hello")
print ("hello")
在Python3.x中，可以支持如下两种
print("hello")
print ("hello")
虽然 在 Python 2.6+ 可以和 Python3.x+ 一样，像函数一样去调用 print ，但是这仅用于两个 python
版本之间的代码兼容，并不是说在 python2.6+下使用 print() 后，就成了函数。
1.22 字母也玩起了障眼法
以下我分别在 Python2.7 和 Python 3.7 的 console 模式下，运行了如下代码。
在Python 2.x 中
>>> valuе = 32
File "", line 1
valuе = 32
^
SyntaxError: invalid syntax
在Python 3.x 中
>>> valuе = 32
>>> value
11
什么？没有截图你不信？
如果你在自己的电脑上尝试一下，结果可能是这样的
怎么又好了呢？
如果你想复现的话，请复制我这边给出的代码： valuе = 32
这是为什么呢？
原因在于，我上面使用的 value 变量名里的 е 又不是我们熟悉的 e ，它是 Cyrillic（西里尔）字
母。
>>> ord('е') # cyrillic 'e' (Ye)
1077
>>> ord('e') # latin 'e', as used in English and typed using standard keyboard
101
>>> 'е' == 'e'
False
细思恐极，在这里可千万不要得罪同事们，万一离职的时候，对方把你项目里的 e 全局替换成 e
，到时候你就哭去吧，肉眼根本看不出来嘛。
1.23 数值与字符串的比较
在 Python2 中，数字可以与字符串直接比较。结果是数值永远比字符串小。
>>> 100000000 >> 100000000 >> 100000000 >> alist = [0, 1, 2, 3, 4]
>>> alist[5]
Traceback (most recent call last):
File "", line 1, in 
IndexError: list index out of range
但是当你使用 alist[5:] 取一个区间时，即使 alist 并没有 第 6个元素，也不抛出异常，而是会返回
一个新的列表。
>>> alist = [0, 1, 2, 3, 4]
>>> alist[5:]
[]
>>> alist[100:]
[]
1.25 迷一样的字符串
示例一
## Python2.7
>>> a = "Hello_Python"
>>> id(a)
32045616
>>> id("Hello" + "_" + "Python")
32045616
## Python3.7
>>> a = "Hello_Python"
>>> id(a)
38764272
>>> id("Hello" + "_" + "Python")
32045616
示例二
>>> a = "MING"
>>> b = "MING"
>>> a is b
True
## Python2.7
>>> a, b = "MING!", "MING!"
>>> a is b
True
## Python3.7
>>> a, b = "MING!", "MING!"
>>> a is b
False
示例三
## Python2.7
>>> 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'
True
>>> 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'
False
## Python3.7
>>> 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'
True
>>> 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'
True
1.26 x 与 +x 等价吗？
在大多数情况下，这个等式是成立的。
>>> n1 = 10086
>>> n2 = +n1
>>>
>>> n1 == n2
True
什么情况下，这个等式会不成立呢？
由于Counter的机制， + 用于两个 Counter 实例相加，而相加的结果如果元素的个数 >> from collections import Counter
>>> ct = Counter('abcdbcaa')
>>> ct
Counter({'a': 3, 'b': 2, 'c': 2, 'd': 1})
>>> ct['c'] = 0
>>> ct['d'] = -2
>>>
>>> ct
Counter({'a': 3, 'b': 2, 'c': 0, 'd': -2})
>>>
>>> +ct
Counter({'a': 3, 'b': 2})
1.27 += 不等同于=+
对列表 进行 += 操作相当于 extend，而使用 =+ 操作是新增了一个列表。
因此会有如下两者的差异。
## =+
>>> a = [1, 2, 3, 4]
>>> b = a
>>> a = a + [5, 6, 7, 8]
>>> a
[1, 2, 3, 4, 5, 6, 7, 8]
>>> b
[1, 2, 3, 4]
## +=
>>> a = [1, 2, 3, 4]
>>> b = a
>>> a += [5, 6, 7, 8]
>>> a
[1, 2, 3, 4, 5, 6, 7, 8]
>>> b
[1, 2, 3, 4, 5, 6, 7, 8]
1.28 循环中的局部变量泄露
在Python 2中 x 的值在一个循环执行之后被改变了。
## Python2
>>> x = 1
>>> [x for x in range(5)]
[0, 1, 2, 3, 4]
>>> x
4
不过在Python3 中这个问题已经得到解决了。
## Python3
>>> x = 1
>>> [x for x in range(5)]
[0, 1, 2, 3, 4]
>>> x
1
1.29 局部/全局变量傻傻分不清
在开始讲之前，你可以试着运行一下下面这小段代码。
## demo.py
a = 1
def add():
a += 1
add()