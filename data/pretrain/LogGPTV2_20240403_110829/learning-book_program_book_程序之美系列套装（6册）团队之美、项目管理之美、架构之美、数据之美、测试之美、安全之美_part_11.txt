沟通，让人们可以访问源代码和缺陷跟踪信息，提供快照版本使得
别人可以根据自已的需要调整或修补组件等。其次就是要明确定义
组件及其修补程序的所有权和控制权：说清楚谁负责哪些东西。组
件的所有者控制哪些东西可以进入他的组件。调整组件的团队控制
他们的补丁程序，决定是否需要将其提供给组件的所有者，而组件
所有者可以决定是否要接受补丁程序进入组件，这样就有效地传递
了补丁程序的所有权。最后，并源项目默认使用补丁程序，而不是
变通方法。
Andrew：对大多数公司来说，这似乎是一个巨大的变化。你是怎么
做到的？
54
---
## Page 56
Auke：为了推广这种方式，我同时做三件事情。第一，遂步并放对
于开发相关资源的访问。因此，我从引入邮件列表开始，然后让代
码可供他人访问，接下来提供快照版本，还有其他工作。第二，我
反复不断地、甚至是冷酷无情地进行“布道”：我会定期访问所有团
队的关键人物，反复讲述这种方式的工作过程，它会带来哪些好
处，还会主动寻求他们的反馈。第三，我积极支持第一个修改其他
团队的组件或为其打补丁的团队。
目前，企业中还有一个共同的问题，他们需要使用下一代支持协作
的开发基础架构，以替代现有的并发基础架构。我们必须要替换掉
原有的基础架构——IBMRational，取而代之的是CollabNet，这样
开发人员社区就能以方便、安全的方式跨越组织和地域的边界进行
协作。之前的基础架构已经阻碍了协作（这也可以理解，回溯到过
去，那时没有这方面的需求，也就不必为了推动协作而进行相关产
品设计）。
Andrew：然后就产生了“内部开源"这个名字。
Auke：就起了个名字，效果却很好。我参加了公司内部的所有会
议，不管这些会议是研发部门还是整个公司的，我都会讲内部并源
在公司内制造话题的故事。这是一家很大的公司，所以花很大力气
才能制造话题并为人所知。这样做效果很好。当然，只要有机会我
这种情况持续了大概一年多，成效开始显现出来。他们开始为产生
了正面影响的内部开源活动说好话，接下来就开始认真对待了。
同时，我们还采取了很多开放性措施。我们并始让所有的源代码供
人访问，此后还采取了一些后续步骤。我们还公开沟通过程，不仅
仅用邮件列表提供支持，还包括并发人员在内。所有与并发有关的
讨论都并始在一个邮件列表中发生。产品团队中的人现在可以跟随
并发人员的讨论。我们让跟踪信息也更易于访问。同时，我们引入
了称为“快照版本"的方法。这可跟产品系列团队有不少争斗，因为
他们要做不少工作才能每周提供一个快照版本，或两周一次。基本
上，你要为所有的公共组件构建一个版本，让产品团队的人易于使
用，并可以挑出公共组件的一个最新版本进行调整，接下来还要让
补丁程序更易于返回到主线代码库中。上面这些就是我们在推动的
东西。只要上述措施开始成为标准流程的一部分，而且可以做到自
动化完成，那就能产生巨大影响，因为人们开始更容易调整并使用
公共组件了，这也增加了补丁程序被接受进入主线代码库的机会。
55
---
## Page 57
我们做的另外一件事就是编写一些关键文档。真正成功的并源项目
通常有三个层次截然不同的文档。在不同的时候，并源项目中的人
们叫这些文档的名字不同，或者组织方式不同，但是通常有三个截
然不同的层次。第一个是READM企：项目是十什么的，谁参与了项
目。第二个层次是如何使用：如何安装，运行时的依赖是什么样
的。文档中不会事无巨细什么都记，而是会说：“通常可以按下列
方式入手使用。”第三个层次是贡献者信息：人们应该如何自己构
建新版本的软件，需要哪些依赖，如何做贡献等。注意这符合社区
中三种完全不同的人：用户、项目贡献者、代码提交者。README
帮人们决定是否要成为用户，安装信息帮人们成为用户，而责献者
信息可以让一个用户成为贡献者。
这就是我们在成功的开源项目中看到的东西，我们将其复制到企业
内部。再次说明：这产生了很大的影响。举例来说，当我刚跟团队
碰面时，我从同一个部门拿到了一个标准配置的并发机器，尝试了
一下，却发现项目不能构建。这就意味着产品团队的并发人员也很
可能无法构建，很显然，缺失了某些信息。在着手工作之前，我必
须要问三个不同的并发人员。我们完成了一个很短的文档，其中指
明了运行时和构建时的依赖关系，并指出如何构建、运行。这文回
到了之前提到的：要使其易于使用，并根据需求进行调整。
Jenny：那么，让你的公司变得更开放，这改变了团队的工作方式。
可对于他们设计软件的方式来说，有任何实际影响么？
Auke：在开源与企业之间，有一个根本性的差异。我觉得，开源实
际上发现了如何正确重用软件，而企业还在学习过程中。你在企业
中看到的是，他们试图在设计时就考虑重用。理论上讲，这种做法
很好。可一般来说，人们不知道而且也很难预见软件会如何被重
用。人们真正了解的，就是在开始构建软件之后，才会发现一切跟
以前想象的不一样。虽然之前已经有过构想，但是软件的使用方式
与其工作方式都会有根本的不同。
Andrew：这样说来，为重用设计就不总是那么有价值了？
Auke：对软件开发来说，不是特别适合。在开源项目中，人们通常
会先构建只能在一个地方使用的功能。然后，其他人拿去开始按自
已的需要修改。他可以重用这个项目。只要完成了这个过程：使用
和重用，人们就知道存在哪些共性了，就可以重构代码，提取公共
功能。
56
---
## Page 58
这种模式非常常见。“为重用进行设计”太僵化了，效果不一定好，
而且适应性很差。这也许是努力的方向，但是在可预见的未来中不
具有可行性。“使用-使用-重用"方式要更合适。
因此，人们会先为满足某一种情况构建软件。企业中也应该这么
做。在公司里面，他们先在一个产品中构建某个特定的算法或特别
的功能。然后他们会开始推进演变过程，这样就能在其他产品中使
用了。要做到这一点，流程要更加并放，演变过程才会发生。从实
质上来看，这就是我们实施“内部开源"的作用。
Andrew：也就是说，人们做不到为重用设计？这听起来有些过激
了。
Auke：你仍然可以为重用设计，没问题。不过我的观点是：无论设
计的目的是什么，它总是在不断变化的，所以永远无法做到特别合
适。我之所以说为重用而设计是不可行的，部分原因是因为你在构
建和设计的时候，你会对其有更深入了解，从而带来新的变化。基
本上，开源和内部开源能让人很快发现一些合用但不是完全合适的
东西，而根据自已的需求进行修改也是很容易的事情。
目前很多企业都采取封闭源代码的方式。也就是说，如果你并发某
些软件，我是什么都看不到的。如果我向你要，你就会发送给我一
些二进制安装包。你可能提供源代码给我，但是只会发送一个版本
的源代码，而且也许是属于半年前的一个稳定版本的代码。所以，
我是不会动它的，因为一旦我改了它，那就全都是我自己负责了。
我不能把改过的代码反馈给你，因为已经过期了，而且你也不会花
时间将其集成到你的软件中，我也就很难拿到最新的软件了。
第二部分目标
57
---
## Page 59
假设你需要一套软件完成一项工作。现在有两套软件可供选择。第
一套软件极为出色。它永远不会崩溃，用户界面很漂亮，有强大的
技术支持，运行速度很快，用起来让人觉得很并心，价格不高，在
任何一种操作系统和几乎任何一台计算机上都能够使用。但它执行
的任务却不是你想要的。相比之下，另外一套软件非常糟糕。缺陷
很多，常常崩溃，运行速度也很慢。它只能在一种鲜为人知的操作
系统上使用，如果想让它全面运转起来，需要一台非常昂贵、速度
很快的机器。它的用户界面很丑陋，即使执行一个简单的任务也让
人很头疼。但它却能够完成所需工作的20%。在这两套软件中，你
会选择哪一套呢？
非常遗憾，你最后会选择那套编写得很糟糕的软件，因为它能够部
分完成你想做的部分事情。虽然这种假设看上去有些荒谬，但对我
们很多人来说，这种情况实际上并不很陌生。
在与团队一起工作时，团队目标不一致是可能出现的最糟糕的错
误。然而遗憾的是，这种现象比我们意识到的情况要严重得多。这
种现象本来不应当让人感到特别吃惊。随便打开一本软件工程的大
学教科书，可能都会看到类似这样的图表：缺陷发现得越晚，修复
成本就越高，并且成本呈指数级增长。但是大多数经验丰富的程序
58
---
## Page 60
员都不需要从教科书上去了解这些数据一—他们在实际工作中基本
上都看到过这种情况。
团队成员试图解决的是一些错误的问题，这是软件项目遇到困难的
一种最常见的情形。多年来，我们和许许多多的并发人员、测试人
员、架构师、项目经理和其他软件人员交谈过，他们都承认：当他
们把自已认为已经完工的产品交给客户，却听到客户说一些类似
“嗯，软件看起来不错，但它是我们想要的吗......？”的话时，那是
一种令人多么痛苦的感觉。当我们发现自己漏掉了一些从未有人提
起的、最重要的功能时，心情是多么沮丧。经验丰富的程序员谁没
有这么想过：“如果两个月前有人告诉我软件应当做成那样，我就
会以一种完全不同的方式去构建它了！”
如果你在敏捷团队中待过，你可能会同意“拥抱变化"这种说法。敏
捷团队中的程序员之所以能够很好地工作，一个原因是他们在不断
地回顾那些目标。他们要确保那些目标摆在每个人的面前：团队要
确保目标写在白板上，通过会议的方式，确保团队对任何变化都一
清二楚。他们让客户参与到项目的日常工作中，因为这是确保每个
人都与同一个目标保持一致的最有效的方法。
这些并发人员来说，还是很容易在项目并始的时候忽视了对目标的
设置。更多的时候，我们甚至连说话的机会都没有，就被客户、用
户和利益相关者送上了一条错误的道路。
客户，也就是我们为之构建软件的人，并不善于告诉我们他们需要
什么。他们需要的是解决方案而不是把他们的问题告诉你。他们说
要一辆平稳、快速、臭味少点的双人马车，但实际上他们需要的是
一辆更先进的、能把他们从一个地方送到另一个地方的汽车。他们
了解的知识不足以让他们提出一辆汽车的需求，所以很容易就会制
造一辆更好的、改良后的双人马车。为了找到更好的解决方案，开
发人员需要对整个运输问题都有足够的了解。
另一方面，作为开发人员，我们也存在自已特有的问题。我们很容
易认为自己已经完全了解了将要构建的软件。在客户讲述他们的期
望时，我们总是习惯性地打断他们：“好啦，我已经知道你们需要
什么了。”然后，回到自己的座位上，构建我们认为客户需要的软
件，但是到最后发现我们完全误解了他们的问题。（我们两个人偶
59
---
## Page 61
尔也会发生这样的事情，通常是因为我们想使用某个很酷的新技
术，所以找一个借口。）
所以说，理解项目的目标是至关重要的，这部分的故事和访谈内容
告诉我们项目的目标是如何影响团队的。软件有多好，或者说是不
是用户所需要的软件，这都不重要。与团队一起工作，一个最难的
地方是让每个人都与目标保持一致，以便构建适当的软件。即使最
好的团队也可能在这些目标上有冲突，冲突可能让团队分裂。但是
如果你从一开始就让每个人都与目标保持一致，在目标变化时让每
个人都知道（自标总是在不停变化的），那么项目取得成功的可能
性就会大得多。
第9章创建团队文化
GradyBooch访谈录
在软件行业，没有几个人的工作能够像GradyBooch那样得到广泛认
可。他在Rational和IBM取得的工作成果在两个方面对业界起到了指
导作用：面向对象开发，通过统一建模语言（UML）和Rational统