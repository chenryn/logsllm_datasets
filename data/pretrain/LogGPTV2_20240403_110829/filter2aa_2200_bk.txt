主要包括下面的工具
·DebugView
·RegistryMonitor
·FileMonitor
·TCPView
·IDA
·Samurai
·Rootkit Unhooker
·RootkitRevealer
·F_Secure BlackLight
·Rootkit Hook Analyzer
·IceSword
·Sophos Ant-Rootkit
这些工具可以在 Wrox/Wiley-Professional Rootkits 下载的 Chapter1 Tools 目录里找到。
DebugView
DebugView
DebugView
DebugView
DebugView,如图 A-1 所示，是一个可以监视本地系统或者网络上的任一台计算机的调
试输出的程序。它可以同时显示内核模式和用户模式的调试输出，所以既你不需要用一个调
试器来捕获你的程序或者调试驱动的调试输出，也不需要修改你的程序或者驱动来使用非标
准的输出 API。
图 A-1
在 Windows NT，2000，XP，Server 2003 和 Vista 下，DebugView 会捕获下面这些信息：
·Win32 OutputDebugString
·内核模式 DbgPrint
·在 Windows XP 和 Server 2003 上所有 DbgPrint 的变形
如果在 Windows NT/2000/XP 上造成崩溃时 DebugView 正在进行捕获，那么 DebugView
还会从崩溃文件里收集产生的内核模式调试输出信息。
简单地执行 DebugView 程序文件(dbgview.exe)后 DebugView 会马上开始捕获调试输出，
注意如果是在 Windows NT/2K/XP 下运行 DebugView，查看内核模式的调试输出必须要有管
理员权限。菜单，快捷键，和工具栏按钮可以用来清除窗口中已记录的信息，保存已记录的
信息到一个文件里，打开之前保存的文件，记录所有调试输出到文件，搜索调试调试输出，
过滤调试输入，改变窗口字体等等。
我要提醒一下你，在输出窗口搜索一个字符串是非常不明智的行为，如果你真的需要在
一个很长的输出列表里搜索一个调试字符串，我建议你把记录到的信息保存到一个文件里然
后使用你喜欢的编辑工具来搜索一个字符串。
RegistryMonitor
RegistryMonitor
RegistryMonitor
RegistryMonitor
如图 A-2 所示，RegMon 是一个对注册表进行实时监控并能显示出访问注册表的程序
名、被访问的注册表项和读取或者写入的数据的工具。
图 A-2
RegMon 会捕获一台主机上的所有注册表活动，在 Windows NT、2000 和 XP 上，
RegMon 会加载一个挂钩了内核系统调用表的设备驱动来截获和加入注册表系统服务。
对于 Windows .NET 服务，RegMon 使用了新操作系统的注册表回调机制来接收注
册表活动信息。
RegMon 在发现一个打开、创建或者是关闭调用时，它会更新内部维护的一个 hash
表，这个 hash 表是在项句柄和注册表路径名称之间进行映射的桥梁，当发现一个基于
句柄的调用时，RegMon 会在 hash 表里查找对应的全路径名并且显示出来，如果一个
基于句柄的访问引用了一个在 RegMon 运行之前就已经打开了的注册表项，RegMon 在
索引句柄表时就会失败，然后只会简单地显示项的值。
所有监控到的注册信息都存放在一个 ASCII 缓冲区里并且会定期的把它们显示到
RegMon 的主窗口里。用户只需要简单地执行 RegMon(regmon.exe)，RegMon 马上就会
捕获注册表活动。
菜单项和工具栏按钮可以用来在开始监视和停止监视之间进行切换，启用事件捕
获，控制主窗口的滚动栏，保存主窗口内容到一个 ASCII 文件等等。
通过工具栏或者菜单中的选项->过滤/高亮菜单选项打开过滤窗口，选择要显示的
数据，其中“*”通配符会匹配所有的字符串，并且这些都是区分大小写的。只有那些
在“包含”里但不在“排除”里的匹配选项会显示出来，如果有多个匹配字符串就要用
“;”号把它们隔开（如：“regmon;software”）。
举个例子，如果包含里面是“HKLM”而排除里面是“HKLM\Software”，那么除
了在 HKLM\Software 下面的，其它的引用了 HKLM 下面的项和值的条目都会被监控。
通配符使得我们可以使用复杂的匹配模式，举个例子，匹配指定的程序访问指定的
注册表项，如：包含里面是“Winword*Windows”就会使得 regmon 只显示 Micosoft Word
访问了包含“Windows”的项和值的条目。
使用高亮过滤器选项来指定你想高亮显示的输出，可以在选项->高亮颜色里选择高
亮颜色。
Regmon 的时间属性还可以显示从上次清空输出窗口（或者启动 regmon）到事件产
生时的时间间隔，选项菜单的时钟选项和工具栏上的按钮可以让你在两种模式之间进行
切换，工具栏上的按钮使用一个时钟或者停表图标来显示当前的模式，在显示持续期间
时，输出窗口上的时间域会显示从底层文件系统到指定服务请求所用的秒数。
要编辑在 RegMon 的输出窗口上显示的一个注册表项或者值，只要双击指定的项或
者值（或者使用工具拦按钮上的跳转到注册表或者点编辑->跳转到注册表）就会打开注
册表编辑器并且定位到指定的项或者值。
如果你让 RegMon 停止滚动，然后选择一个你感兴趣的进程条目然后点击右键，然
后选择包含进程，RegMon 就会只显示指定的进程的注册表操作，这是一种用来查找你
的进程或者其它的进程在你研究的时候做了什么的操作的非常方便的方法。
FileMonitor
FileMonitor
FileMonitor
FileMonitor
如图 A-3 所示，FileMon 是一个实时监控文件系统活动的工具，FileMon 可以显示每个
打开、读取、写入或者删除文件事件，产生事件的进程、事件的类型、文件的完整路径和每
个文件事件的结果状态。另外，FileMon 包含了一个可以用来显示文件大小、文件属性和其
它特定事件信息的“其它”列。
图 A-3
执行 File Monitror 程序文件（filemon.exe）后 FileMontor 会马上开始监控文件系统事件，
你可指定固定磁盘、可移动磁盘、读写磁盘、网络磁盘、邮槽和事件命名管道，一旦你指定
了感兴趣的卷类型，你就可以进行一步地过滤输出的内容。
FileMon 和 RegMon 非常地相似。和 RegMon 一样，菜单选项和工具栏按钮可以用来在
开始和停止监控之间进行切换、启用或者过滤事件捕获、控制主窗口的滚动和保存主窗口内
容到一个 ASCII 文件里。
FileMon 也可以像 RegMon 一样可以定位指定的位置，通过双击事件（或者使用工具栏
上的浏览跳转按钮或者点击编辑->浏览跳转菜单）就可以打开一个资源管理器窗口并定位到
指定的文件。
同时像 RegMon 一样，如果你让 FileMon 停止滚动并且从主窗口里选择一个你感兴趣的
条目，右键条目然后选择包含进程，FileMon 就只会显示指定进程的文件操作事件。再重申
一次，这是一个在你研究时判断你的进程或者其它进程做了什么的非常方便的方法。
TCPView
TCPView
TCPView
TCPView
如图 A-4 所示，TCPView 是一个对网络连接进行实时监控的工具，它可以显示所有有
关于 TCP 和 UDP 连接的一个详细列表，包含了连接所关联的进程、协议、本地和远程连接
地址和连接的当前状态。
图 A-4
当你打开 TCPView 的时候它会枚举所有活动 TCP 和 UDP 节点，把所有的 IP 地址解析
成域名模式，你可以点击工具栏上的按钮或者菜单项来切换显示的模式。
默认情况下，TCPView 每秒钟更新一次窗口，但是你可以通过点击选项->更新速度菜
单项来改变这个速度，连接状态改变时会用黄色高亮显示，连接关闭时会用红色显示，而新
连接会用绿色显示。
你可以通过选择文件->关闭或者右键选择关闭连接来关闭 established TCP/IP 连接（状
态显示为 ESTABLISHED 的连接）。
还可以通过保存菜单项把 TCPView 输出窗口的内容保存到一个文件中。
IDA
IDA
IDA
IDA
如图 A-5 所示，IDA 是本附录里最复杂的一个工具，如果你读过本书前面的内容，你
就知道可以使用 IDA 来查看 PE 文件，但是 IDA 所做的不仅仅是把这个文件转换成汇编语
言，因为它有大量的功能而且能反汇编多种处理器的文件、插件增强功能、自定义配置文件、
注释和重命名反汇编输出等等，掌握 IDA 需要花费不少的时间，幸好，默认的 IDA 配置能
够让用户拖动一个文件到 IDA 快捷方式（或者 idaw.exe 文件）进行处理。
图 A-5
先把 IDA 解压到一个新文件夹里，因为是不用安装的，所以在解压完后马上就可以使
用，如果你要为 IDA 创建一个快捷方式，你要知道你用 IDA 打开和保存的所有文件的数据
库文件都会保存在你所选择的工作目录里（快捷方式的“起始位置：”），这些数据库文件不
是原来的文件，而是在你下一次加载同一文件的时候会使用到的，因此，如果你移动了 IDA
或者改变了工作目录，就会丢失前一次对加载的文件的修改信息。
IDA 有两个主要的配置文件：IDA.CFG 和 IDATUI.CFG，用一个文本编辑器查看这两个
文件能够让你对 IDA 里的许多选项有一个更深刻的了解，无论是修改这两个文件中的哪一
个都显示出了 IDA 反汇编器的强大和复杂，所以记得要做一下备份或者在修改这些文件之
前做好要重要安装的准备。
在网上可以下载到很多的 IDA 插件，一些插件可以让 IDA 的使用变得非常之简单，还
有一些插件可以使 IDA 变得更加的强大，有的带有详细的说明如何配置和整合这个插件，
还有一些带有展示如何使用这个插件的教程，然而，毕竟 IDA 是一个黑客工具，所以有些
插件可以会带有 rootkit。
在选择了一个文件之后，在加载前 IDA 会询问一些问题，大多数情况下，默认的设置
都能够让 IDA 正确地处理目标文件，如果你知道所选择的文件不是一个 PE 格式文件（DOS
或者二进制），你就要自己选择一个适当格式，否则，直接点击出现的文件加载对话框上的
确定按钮，然后会弹出另一个基于已选择的文件和 IDA 的配置的对话框，不过当一个文件
是笫一次加载时通过都是直接使用默认的设置。
在文件加载完后，你会看到很多的“窗口”详细地列出了所选文件的每一部分信息，如
果你程序用过 IDA，你就知道在这里的“窗口”泛指，实际上，IDA 的这些窗口都是用特殊
的 ASCII 字符而不是图形构成的，所以要花一点时间来适应一下在习惯了这种基于文本的
界面后 ，你就会发现，操作 IDA 的窗口也可以像操作图形窗口一样的简单，要记住，IDA
的窗口是以双线条为边框的，左下角包含了一个可以改变窗口大小的小矩形，而每个“窗口”
右方和下方都有一个滚动条。
大多数逆向工作的主窗口都是反汇编窗口，这也是默认配置在初始时打开的惟一一个窗
口，如果在加载完一个文件后马上调整这个窗口的大小，你会看到在反汇编窗口下方的状态
区域，状态区域包含了从文件打开后所累积的记录条目信息，它通常被设置在 IDA 用户界
面层的最底层。
除了反汇编窗口外，下面的窗口可以从视图菜单里打开：函数、名字、签名、段、段寄
存器、选择子、交叉引用、结构体、枚举和问题等窗口，对于不同的目标文件，有些窗口可
能会是空工，而有些窗口可能是禁用的。
有几个选项可以使得逆向工作变得更简单，笫一个是函数跳转，如果你知道你要查看的
函数名称，你可以选择导航->跳转到然后双击一个函数来查看函数的反汇编代码，在跳转窗
口里你可使用滚动条或者输入函数的名称，还可以通过在反汇编窗口里双击任何一个引用了
此函数的地方跳转到函数里。
IDA 的另一个方便功能是可以浏览指定函数的机器码，在用特征字符串来查找 DLL 里
的没有导出的函数时这个功能特别有用，要让反汇编窗口同时显示汇编代码和机器码，选择
选项->文本表现菜单然后在机器码字节数里输入一个正数（我建议设置成 8）。
要查看更多的 IDA 使用信息，我建议你用包含 ida、反汇编器和教程的关键字去 Goolge
搜索一下。
Samurai
Samurai
Samurai
Samurai
如图 A-6 所示，Samurai 是一个基于主机的入侵防护系统，Samurai HIPS 初始化时会显
示一个关于常见安全漏洞的解决方案列表并且允许用户使用所有的列出的解决方案，一些漏
洞是对于特定的一个应用程序（如 AOL）或者一个特定的操作系统（如 XP 家庭版）的，
所以并不是所有的解决方案都会用在一台机器上，尽管如此，当用户点击应用配置按钮时，
Samurai 会提供一个基于用户选择的解决方案的最佳的修复配置。
图 A-6
Samurai 是一个完全可还原的强化工具，所改变的注册表条目、所有改变的文件权限、
所有禁用的服务、所有注入的进程等等都会被记录并且通过取消选择指定的解决方案或者卸
载 Samurai 来还原系统的配置。
对于 rootkit 开发都来说最感兴趣的解决方案要“DISABLE ROOTKITS-防止 rootkit 的
加载”，些功能会挂钩所有 rootkit 加载方式并且阻止一切的操作，如果是只有 rootkit 才会用
的加载方式，就会询问用户是否允许加载，因为模块的加载通常是在系统启动的过程的进行
的，当软件在安装或者启动时，如果试图加载一些奇怪的模块大多数的用户都会阻止这种行
为。
Rootkit
Rootkit
Rootkit
Rootkit Unhooker
Unhooker
Unhooker
Unhooker
如图 A-7 所示，Rootkit Unhooker 是目前我们讲到的最好的 rootkt 检测工具，并且它是
免费的，在可预见的未来里 rootkit 的检测会是非常的困难的，如果它不免费的话，可以在
这个方面获得一些收入，但它的免费对于担心 rootkit 的用户来说却是一个大大的好消息。
A-7
Rootkit Unhooker 具有如下的几具主要功能：
·内核钩子的检测和恢复
·隐藏进程的检测
·隐藏设备驱动的检测
·隐藏文件的检测
·代码钩子的检测
·报告
这五个检测功能可以检测到本书所讲的所有 rootkit 技术
笫一个标签页，SSDK 钩子的检测和恢复，显示了内核系统调用表的所有函数、函数地
址、挂钩标记和挂钩此函数的模块名字，单单是这个标签页提供了足够的信息来检测和清除
90%的 rootkit，在检测到一个钩子并且追踪到了挂钩些函数的模块名字（和安全软件对抗
的模块）后，你可以清除所有的 SSDT 钩子，在注册表里搜索目标模块并且删除引用了模块
的项，然后删除目标模块并重启。
笫二个标签页，隐藏进程的检测，显示了所有正在运行的进程、进程的 EPROCESS 地址
和进程的状态，所有的状态为“从 Windows API 隐藏”的进程都是正在运行但又不是进程链
表里的，隐藏的进程既可以是一个 rootkit 也可以是使用了 rootkit 技术的隐藏程序。
笫三个标签页，隐藏驱动的检测，显示了所有已加载的驱动、驱动的路径、驱动的大小
的加载基址、隐藏标记和一个引用列，所有标记为隐藏的驱动都是已加载但是不在设备驱动
列表里的驱动，这样可以清楚地表明了一个内核层的 rootkti。
笫四个标签页，隐藏文件的检测，显示了所有检测到的隐藏文件，这里所显示的不余目
录的隐藏，所以这里无法检测到使用我们本书里所讲的文件隐藏技术的程序，但我期望
Rootkit Unhooker 在下一个版本可以像单个文件一样可以检测到隐藏目录里的所有文件。
笫五个标签页，代码钩子的检测，显示了所有已加载进程的用户模式的钩子（进程注入），
因为有内核钩子，Rootkit Unhooker 可以摘掉所有所有被注入进程的钩子或者有选择地摘
掉特定进程的钩子，如果可能的话，在这里还会显示安装钩子的模块名称。
笫六个标签页，报告，显示了所有检测到的异常，可以按下扫描按钮来生成一个报告。
RootkitRevealer
如图 A-8 所示，RootkitRevealer 是一个只有一个按钮的 rootkit 检测工具，只需要按
下扫描按钮然后查看一下输出的结果，这里显示出发现的所有系统异常，描述栏通常可以用
来判断异常的原因。
图 A-8
RootkitRevealer 对文件系统和注册表的检测都是使用了高层的系统调用和底层的系统
调用然后进行对比分析，只要有任何的不同都会标记为异常。
由于最近微软收购了 Sysinternals，并且微软目前正在开发 Ghostbuster rootkit 检测工具，
RootkitRevealer 有可能会合并到 Strider Ghostbuster 里而成为 Strider Ghostbuster 的一部分。
F-Secure
F-Secure
F-Secure
F-Secure BlackLight
BlackLight
BlackLight
BlackLight
如图 A-9 所示，像 RootkitRevealer 一样，BlackLght 是一个只有一个按钮的 rootkit 检测
工具，只需要按下扫描按钮然后查看输出的结果就行了。
图 A-9
BlackLight 检测文件系统和正在运行的进程的异常，然后显示出来，这是一个非常基本
的 rootkit 检测工具，它无法检测到使用了本书里所讲的任何一个 rootkit 技术的程序，但是
一个方便的工具应该同时具有一键清理系统的异常的功能。
Rootkit
Rootkit
Rootkit
Rootkit Hook
Hook
Hook
Hook Analyzer
Analyzer
Analyzer
Analyzer
如图 A-10 所示，Rootkit Hook Analyzer 是一个介于一键扫描工具和多页/多功能扫描工
具之间的一个 rootkit 检测工具。有两具用来显示钩子和模块的标签页，钩子标签页和 Rootkit
Unhooker 里的 SSDT 标签页非常相似，但 Rootkit Hook Analyzer 很难检测到安装钩子的模块
名字。模块标签页和 Rootkit Unhooker 里的隐藏驱动检测标签页非常的相似，但它无法检测
隐藏的设备驱动。
图 A-10
IceSword
如图 A-11 所示，IceSword 是本附录里最复杂一个 rootkit 检测工具，同时它也是最不稳
定的，所以在使用这个软件时要做好蓝屏的准备。
图 A-11
如果不计它的复杂性和稳定性，IceSword 是一个非常棒的 rootkit 检测工具，这个工具
包含了 13 种不同的检测流氓软件的方法。这里用流氓软件来描述所有的恶意软件，不需要
rootkit，但是因为 rootkit 是流氓软件里的一个分支，可以使用一些相同的加载和存留技术，
这使得在一个工具里可以提供所有的功能，不幸的是，检测方法的数量、流氓软件类型的数
量和用户界面的复杂使得 IceSword 相对于其它 rootkit 检测工具来说使用起来非常困难。
IceSword 拥有的检测方法如下：
·进程检测
·TCP,UDP 和 RAW IP 端口活动检测
·内核模块检测
·自动启动程序检测
·服务检测
·Winsock 服务条目检测
·BHO 检测
·内核系统调用表钩子检测
·消息钩子检测
·进程创建检测
·进程结束检测
·注册表篡改检测
·文件系统篡改检测
通过列出所有认为正在系统上运行的进程来进行进程的检测，如果一个进程出现在
IceSword 的进程列表里但是没有出现在任务管理器的进程列表里就会认为是一个异常的进
程，如果 IcoSword 确定了是隐藏进程就会用红色来标记出这一行。
TCP,UDP 和 RAW IP 端口活动的检测是一个不准确的检测，通过显示本地机器的地址和
端口、远程机器的地址和端口和本地的进程名字，IceSword 允许用户解释显示的每个连接。
内核模块的检测只是简单地各列出所有当前加载的内核模块和它们的路径，在这里不会
显示出隐藏的设备驱动，但是如果一个内核层的 rootkt 使用了混淆技术，IceSwrod 会显示
出它和它的路径。生成的列表没有区分显示的模块，所有用户必须知道要找的是什么。
自动启动程序的检测列出出了所有在系统引导时自动运行的程序，这是通过显示各种注
册表条目来完成的，操作系统在引导时会检测这些注册表条目并且启动所定义的程序，这种
自动启动功能通过会被恶意软件所利用。
WInsock 服务条目的检测列出了所有以操作系统套接字层注册的协议，像自动启动程序
的检测一样，是通过显示各种注册表条目来完成的。
BHO 的检测列出了所有注册为浏览器扩展的软件，这种检测方法只是简单地显示 IE 浏
览器的 BHO 注册表条目的内核。
内核系统调用 表钩子的检测列出了所有内核系统调用表条目、原地址、当前地址、函
数所有在模块和与条目关联的 ntoskrnl.exe 里的导出函数名称，如果原地址和当前地址不
同就会以红色显示出来。
消息钩子的检测列出了所有程序当前所过滤的系统消息，要判断哪一个钩子是正常的哪
一个钩子是恶意的是非常困难的事，因此最好把此列的结果和其它的列一起组合起来判断。
进程创建的检测可以用来在常规操作时监视进程的活动，要想知道些列表里哪些是正常
的需要大量的专业知识，但在一些情况下一个不断创建的进程显示是不正常的。
进程结束的检测也可以用来在常规操作时进程的活动，和进程创建的检测一样，这种检
测技术同样需要有很好的专业知识，当前版本的 IceSword 还没有完全实现这种检测方法、
注册表篡改的检测会把不调用标准系统调用的调用显示出来，不幸的是注册表的扫描同
样也不是调用标准的内核系统调用来完成的，所以要检测一个隐藏的注册表条目用户必须对
注册表项进行一个一个的对比，这是一种非常沉闷的检测方法，但是如果你明确地知道要查
看哪里（例如 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services）,这样就可以利
用 IceSword 注册表篡改检测来查找 rootkit。
文件系统篡改检测通过使用底层的操作来显示本地文件系统，像注册表篡改的检测一
样，IceSwrod 不会进行标准的系统遍历来提醒用户文件的差异，这需要用户知道要查找的
明确文件，因此，IceSword 文件系统篡改的检测对于用来验证已经检测到的异常更有用一
点。
除了这些检测方法，IceSword 还可以作为一个基于规则的系统监视工具来配置，像进
程结束的检测一样，这个功能在当前的版本中还没完全实现。
Sophos Anti-Rootkit
如图 A-12 和 A-13 所示，Sophos Anti-Rootkit 和 RootkitRevealer，BlackLight 非常地相
似。对于这三个工具用户都可以简单地点击一个按钮来检测 rootkit，不过 Sophos 添加了取
消不想要的检测方法的功能。
图 A-12
图 A-13
检测隐藏进程和隐藏注册表条目是 Sophos 的强项，它能够找出本书里的进程隐藏程序
HdeMe.exe 和 MyDeviceDriver 注册表项，不过它无法找到隐藏的目录。Sophos 在扫描注册
时还会产生几千条误报，所以很难找到真正 rootkit 信息。