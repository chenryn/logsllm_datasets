implement RAD.
PaX [16], address obfuscation [3], and transparent
runtime randomization [23] use memory layout ran-
domization to defeat pointer corruption attacks on
Linux. DAWSON achieves the same eﬀect on Win-
dows. Relative address randomization, in addition to
absolute address randomization, is achieved in [4] using
a source-to-source transformation.
Non-executable data segments and instruction set
randomization [2, 13] address all injected code attacks.
Program shepherding [14] uses runtime monitoring of
branch targets to defeat injected code attacks.
(“encrypts”)
stored
pointer values, and can hence be eﬀective against all
pointer corruption attacks. However, the approach
does not consider the possibility that pointers may be
Pointguard [6]
randomizes
2Such attacks require absolute-address vulnerabilities such as
heap overﬂows or format-string bugs that are quite common.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Type
Description
Protection
Free space
Executable or DLL code
Granularity
of Rebasing
Inaccessible Not rebased
Read-only
Read-Write
Read-Write
Read-Write
Read-Write
Read-Write
Read-Write
Returned by virtual memory allocation routines Read-Write
Shared Info for kernel and user mode
Unwritable
Free
Code
Static data Within executable or DLL
Process and thread stacks
Stack
Main and other heaps
Heap
Thread Environment Block
TEB
PEB
Process Environment Block
Parameters Command-line and Environment variables
VAD
VAD
15 bits
15 bits
29 bits
20 bits
19 bits
19 bits
19 bits
15 bits
Not rebased
Figure 2. Types of regions within virtual memory of a Windows process.
aliased with non-pointer data, and hence can break le-
gitimate programs.
Complete memory error protection techniques can
deterministically stop all memory exploits, but they
impose a signiﬁcant overhead [24, 11, 19] and/or suﬀer
from incompatibility with legacy code [15, 10].
3.1 ASR Implementations on Windows
Wehntrust [21] is a third-party implementation of ASR
for Windows. As compared to our technique, it does
not randomize all memory regions — in particular, sev-
eral writable memory regions, including the environ-
ment variables, arguments, and the PEB/TEB aren’t
relocated.
(Their product literature does claim the
ability to relocate PEB/TEB, but in version 1.0.0.9
of their software, PEB/TEB wasn’t relocated.) In ad-
dition, they provide 19 bits or less randomness in the
stack, as opposed to the 29 bits in our implementation.
Ozone is another third-party ASR implementation,
but we haven’t been able to ﬁnd any information on
their product other than [20], according to which they
randomize the stack and the DLLs, but it is unknown if
the heap and other regions of the process memory are
randomized. Moreover, randomness in stack addresses
is much smaller than ours — just 16-bits.
Windows Vista is going to incorporate a limited
amount of ASR. According to [9], the stack, heap,
DLLs and the executables that ship with the OS are
randomized, but it is unclear whether other regions are.
More importantly, they use only 8-bits of randomness,
which makes brute-force attacks much easier than in
DAWSON3. Moreover, older versions of the OS, includ-
ing XP and 2003, are going to be widely deployed for
a long time to come, and hence our solution would still
be necessary, even if one were to be satisﬁed with 8-bits
of randomness.
3Vista relies on a combination of NX (non-executable data),
ASR and other techniques to defeat memory corruption attacks,
and hence its designers seem to believe that 8-bit randomization
is adequate.
4 Approach Description
We use the following techniques to implement AAR on
Windows without modifying the kernel or applications:
• Injecting a randomization DLL into a target process:
Much of the randomization functionality is imple-
mented in a DLL. We ensure that this DLL gets
loaded very early in the process creation. This DLL
“hooks4” standard Windows API functions relating
to memory allocation, and randomizes the base ad-
dress of all memory regions.
• Customized loader: Some of the memory allocation
happens prior to the time when the randomization
DLL gets loaded. To randomize memory allocated
prior to this point, we make use of a customized
loader, which makes use of lower level API functions
provided by ntdll to achieve randomization.
• Kernel driver5: Base addresses of some DLLs are
determined very early in the boot process, and to
randomize these, we have implemented a boot-time
driver.
In a couple of instances, we had to resort
to in-memory patching of the kernel executable im-
age, so that some hard-coded base addresses can be
replaced by random values. (Naturally, such patch-
ing is kept to a bare minimum in order to minimize
porting eﬀorts across diﬀerent versions of Windows.)
We use these techniques to randomize the base address
of diﬀerent memory regions in Windows as shown in
Figure 2. Below, we describe our approach for ran-
domizing each of these memory regions.
4“Hooking” is the term used in Windows literature to refer
to interception of function calls, typically in DLLs. There are
several standard techniques for this, and the interested reader is
referred to [18, 12].
5The term “driver” in Windows literature corresponds
roughly to the term “kernel module” in UNIX literature.
In
particular, it isn’t necessary for such drivers to be associated
with any devices.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20064.1 Dynamically Linked Libraries
UNIX operating systems generally rely on shared li-
braries, which contain position-independent code. This
means that they can be loaded anywhere in virtual
memory, and no relocation of the code would ever be
needed. This has an important advantage: diﬀerent
processes may map the same shared library at diﬀerent
virtual addresses, yet be able to share the same physical
memory. In contrast, Windows DLLs contain absolute
references to addresses within themselves, and hence
are not position-independent. Speciﬁcally, if a DLL is
to be loaded at a diﬀerent address from its default loca-
tion, then it has to be explicitly rebased, which involves
updating absolute memory references within the DLL
to correspond to the new base address.
Since rebasing modiﬁes the code in a DLL, there is
no way to share the same physical memory on Win-
dows if two applications load the same DLL at dif-
ferent addresses. As a result, the common technique
used in UNIX for library randomization, i.e., mapping
each library to a random address as it is loaded, would
be very expensive on Windows:
it requires a unique
copy of each library for every process. To avoid this,
our approach is to rebase a library the ﬁrst time it is
loaded after a reboot. All processes will then share this
same copy of the library6. This default behavior for a
DLL can be changed by explicit conﬁguration, using a
DAWSON-speciﬁc entry in the Windows Registry.
Rebasing is implemented by hooking the NtMap-
ViewOfSection function in ntdll, and changing a pa-
rameter that speciﬁes the new base address. This ap-
proach does not work for certain libraries such as ntdll
and kernel32 that get loaded very early during the re-
boot process. We have developed a kernel-mode driver
to rebase such DLLs. Speciﬁcally, we use an oﬄine
process to create a (randomly) rebased version of these
libraries (using the standard rebase tool) before a re-
boot. Then, during the reboot, our custom boot-driver
gets loaded before the Win32 subsystem is started up,
and overwrites the disk image of these libraries with
the corresponding rebased versions. When the Win32
subsystem starts up, these libraries are now loaded at
random addresses.
Note that when the base of a DLL is randomized,
the base address of code as well as static data within
the DLL gets randomized. The granularity of random-
ization that can be achieved is somewhat coarse, since
6This means that an attack based on the absolute location
of a library may succeed against all application that use this li-
brary. However, since our main goal is to stop an attack before
it compromises any one process, this limitation isn’t a signiﬁ-
cant concern. But it does mean that the analytical results in
Section 5 must be interpreted as the number of attempts across
all processes running on a host since a reboot.
Windows requires DLLs to be aligned on a 64K bound-
ary, thus removing 16-bits of randomness. In addition,
applications can typically use only up to 2GB of mem-
ory on Windows, thus reducing the randomness in DLL
addresses to 15-bits.
4.2 Stack Randomization
Unlike UNIX, where multithreaded servers aren’t the
norm, most servers on Windows are multi-threaded.
Moreover, most request processing is done by child
threads, and hence it is more important to protect
the thread stacks. Our approach to randomize thread
stacks is based on hooking the CreateRemoteThread
call, which in turn is called by CreateThread to cre-
ate a new thread. This routine takes the address of a
start routine as a parameter, i.e., execution of the new
thread will begin with this routine. We replace this
parameter with the address of a “wrapper” function
written by us. This wrapper function ﬁrst allocates a
new thread stack at a randomized address by hooking
NtAllocateVirtualMemory. However, this isn’t suf-
ﬁcient, since the allocated memory has to be aligned
on a 4K boundary. Since only the lower 2GB of ad-
dress space is typically usable, this leaves us with only
19-bits of randomness. To increase this, our wrapper
routine decrements the stack by a random number be-
tween 0 and 4K that is a multiple of 4. (Stack should
be aligned on a 4-byte boundary.) This provides an ad-
ditional 10-bits of randomness (for a total of 29 bits).
The above approach does not work for randomiz-
ing the main thread that begins execution when a new
process is created. This is because the CreateThread
isn’t involved in the the creation of this thread. To
overcome this problem, we have written a “wrapper”
program to start an application that is to be random-
ized. This wrapper is essentially a customized loader.
It uses the low-level call NtCreateProcess to create
a new process with no associated threads. Then the
loader explicitly creates a thread to start executing
in the new process, using a mechanism similar to the
above for randomizing the thread stack. The only dif-
ference is that this requires the use of a lower-level
function NtCreateThread rather than CreateThread
or CreateRemoteThread.
4.3 Executable Base Address Randomization
In order to “rebase” the executable, we need the exe-
cutable to contain relocation information. This infor-
mation is normally included in DLLs but is not typ-
ically present in release versions of COTS binaries7.
This requires a minimal level of cooperation from the
7This is true in the UNIX world as well — applications
need to be compiled with relocation information or as position-
independent code in order for ASR to be applicable.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006software vendor. As ASR gradually gains acceptance,
we believe that vendor cooperation will become easier
to obtain. We point out that unlike debug information,
there are no signiﬁcant intellectual property concerns
with providing relocation information.
When relocation information is available, rebasing of
executables is similar to that of DLLs: an executable
is rebased just before it is executed for the ﬁrst time
since a reboot, and future executions can share this
same rebased version.
If relocation information is not present, then the
executable cannot be rebased8. While randomization
of other memory regions protects against most known
exploits, an attacker can craft “return-to-exe” attacks
that exploit the code already present in the executable.
4.4 Heap Randomization
Windows applications typically use many heaps, each
created using a RtlCreateHeap function. We hook this
function and modify the base address of the new heap.
Due to alignment requirements, this can provide only
19 bits of randomness. To increase it further, we hook
individual requests for allocating memory from this