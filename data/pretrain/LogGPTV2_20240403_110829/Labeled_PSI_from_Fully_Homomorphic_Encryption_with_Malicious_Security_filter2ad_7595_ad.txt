[44,19], which require that the communication complexity be at least O(|Y | + |X| + |f|). In the
case that |X| (cid:29) |Y |, this represents a signiﬁcant saving. Moreover, in our protocol the receiver’s
work is proportional to O(|Y | log |X|), which can be of practical importance when the receiver is a
lightweight device, e.g. a cellphone.
The core idea is to return an additive secret share of the result, which can be forwarded as
input to a secondary MPC protocol. For simplicity, ﬁrst let us consider the case without labels and
where our PSI protocol is performed using a single split. In the standard PSI protocol having one
7. [Encrypt Y ]
(a) [Receiver’s OPRF] The receiver performs the interactive OPRF protocol of [31] using its set Y in
a random order as private input. The sender uses the key k as its private input. The receiver learns
Fk(y) for y ∈ Y and set Y (cid:48) = {H(Fk(y)) : y ∈ Y }.
(b) [Cuckoo Hashing] The receiver performs cuckoo hashing on the set Y (cid:48) into a table C with m bins
(c) [Batching] The receiver interprets C as a vector of length m with elements in F
using h1, h2, h3 has the hash functions.
td . For the bth set of
n/d (non-overlapping and contiguous) in C, the receiver batches them into a FHE plaintext polynomial
Y b.
1 ≤ i ≤ w − 1 and 0 ≤ j ≤ (cid:98)logw(B)(cid:99).
(d) [Windowing] For each Y b, the receiver computes the component-wise i · wj-th powers Y
i·wj
b
, for
i·2j
and forwards the ciphertexts
(e) [Encrypt] The receiver uses FHE.Encrypt to encrypt each power Y
ci,j to the sender.
8. [Intersect] For the bth batch,
(a) [Homomorphically compute encryptions of all powers] The sender receives the collection of
ciphertexts {ci,j} and homomorphically computes a vector c = (c0, . . . , cB), such that ck is a homo-
morphic ciphertext encrypting Y
k
b .
(b) [Homomorphically evaluate the dot product] For each Sb,1, ..., Sb,α, the sender homomorphically
evaluates
B(cid:88)
k=0
zb,j =
ck · Sb,j,k
and optionally performs modulus switching on the ciphertexts zb,j to reduce their sizes. All zb,j are
sent back to the receiver. If Labeled PSI is desired, repeat the same operation for P and denote the
returned ciphertexts qb,j.
9. [Decrypt and get result] For the b-th batch, the receiver decrypts the ciphertexts zb,1, ..., zb,α to obtain
rb,1, ..., rb,α, which are interpreted as vectors of n/d elements in F
Let r∗
y(cid:48) ∈ Y (cid:48), output the corresponding y ∈ Y if
α be vectors of m elements in F
1 , ..., r∗
td obtained by concatenating r∗
td .
j = r∗
1,j||...||r∗
md/n,j. For all
∃j : r
where i is the index of the bin that y(cid:48) occupies in C.
If Labeled PSI is desired, perform the same decryption and concatenation process on the qb,j ciphertexts
to obtain the m element vectors (cid:96)∗
α. For each r∗
j [i] = 0 above, output the label of the corresponding
y to be (cid:96)∗
∗
j [i] = 0 ,
1, ..., (cid:96)∗
j [i].
Fig. 2. Full Labeled PSI protocol continued (online phase).
split means that after decryption the receiver holds a single vector of results z, where zi is zero if
the item in the i-th position of its cuckoo table is in the intersection.
Instead of returning zi, the sender returns a ciphertext z(cid:48)
i = zi + ri, where ri is a vector of
uniformly random values. When the receiver decrypts the ciphertext, it will hold of 2-out-of-2
secret sharing of zi, which can be forwarded to a secondary MPC protocol and be checked for zero.
For example, the cardinality of the intersection can be computed by the circuit for
(cid:88)
cardinality(z(cid:48), r) =
1(z(cid:48)
i
?= ri)
i
In practice, we ﬁnd that our protocol obtains improved performance by utilizing more than one
split. This has the the eﬀect that for each position i of the receiver’s cuckoo table the sender returns
s results zi,1, . . . , zi,s, from which the receiver concludes that its item at cuckoo position i is in the
?= ri,j).
intersection if 0 ∈ {zi,1, . . . , zi,s}. As a result, the cardinality can be computed as(cid:80)
1(z(cid:48)
i,j
i,j
We note that while the main phase of the PSI protocol can beneﬁt from a modest size s = O(log |X|),
other parameters, e.g. the window size, can be increased to ensure s is a constant such as 4 or even 1.
In addition to simply computing on the intersection, it is possible to return secret shares of
the labels. When the same basic secret sharing based approach is applied to a label (cid:96) held by the
sender, the receiver will decrypt the share (cid:96)(cid:48) = (cid:96) + r. We note that its is straightforward for the
receiver to provide associated data for each item in its set. This data can simply be stored with
each item in the cuckoo table, and appropriately provided as input to the MPC protocol.
In the case that the sender receives the output of the function f, it is important that the
computation performed by f is symmetric. This means that the ordering of the inputs does not
impact the computation. This requirement is shared with [44], and stems from the use of cuckoo
hashing. In particular, the inputs to f are ordered by the receiver’s cuckoo hash table, which is
a function of its private input. Therefore, the output of f could reveal private information if the
function is not symmetric. We note that this symmetry requirement is not needed when the receiver
obtains the output of f since it already knows the ordering.
7 Malicious Security
We now show that our protocol is secure against a malicious receiver, while providing privacy
[29] against a malicious sender. The ideal functionality is presented in Figure 3. Observe that the
malicious party is allowed to have a larger set than if they were honest. The exact set sizes will be
discussed in the proof.
Parameters: The honest sender and receiver have respective set sizes Nx, Ny. If the sender or receiver is mali-
ciously corrupt, then their set size is N(cid:48)
– On input (Receive, sid, Y ) from the receiver where Y ⊂ {0, 1}∗, ensure that |Y | ≤ Ny if the receiver is
– Thereafter, on input (Send, sid, X) from the sender where Y ⊂ {0, 1}∗, ensure that |X| ≤ Nx if the sender
y otherwise. Give (Receiver-Input, sid) to the sender.
x otherwise. Give output (Output, sid, X ∩ Y ) to the receiver.
x or N(cid:48)
y respectively.
honest and |Y | ≤ N(cid:48)
is honest and |X| ≤ N(cid:48)
Fig. 3. Ideal PSI functionality.
7.1 One-Sided Simulation
Roughly speaking, to prove that the protocol π of Figure 2 has one-sided simulation [29] we must
show that for all malicious PPT receivers A there exists a simulator S such that the interaction of
A in the real protocol π is indistinguishable from the output of S when interacting with the ideal
functionality of Figure 3. More formally, consider Theorem 1.
Theorem 1. In the random oracle hybrid and in the presence of an OMGDH-hard group G, the
protocol π of Figure 2 securely computes the PSI functionality (Figure 3) with one-sided simulation
security [29, Deﬁnition 2.2] where N(cid:48)
y = Ny.
Proof. First, observe that steps 1 through 5 do not involve the receiver and therefore are trivial to
simulate. At Step 7a the receiver performs Ny OPRF invocations in the group G where the simulator
S plays the role of the sender. In Step 7e the receiver homomorphically encrypts its queries, and
sends it to the sender. At this point S uses the random oracle to extracts the receiver’s input Y ∗
from the Ny OPRF invocations (see Section 4.3). Y ∗ is forwarded to the ideal functionality, which
response with X∗ = X ∩ Y ∗. The simulator pads X∗ with random values not in Y ∗ to the size of
Nx and then performs steps 1 through 5 using X∗ as would be done by the honest sender with X.
S completes the protocol (Step 8) playing the role of the honest sender.
The correctness of this simulator directly follows the proof of [31]. In particular, all OPRF
values apart from the Ny which were extracted are uniformly distributed in the receiver’s view.
As such, padding X∗ with values not in Y ∗ induces the same distribution. Compared to [31], the
primary diﬀerence in our protocol is the use of FHE to compress the amount of communication.
7.2 Receiver Privacy
Achieving full simulation-based security against a malicious sender is extremely challenging in our
setting. Arguably, the most signiﬁcant barrier is that we require the communication complexity to
be sublinear in the size of the sender’s set. This makes traditional methods for extracting their set,
e.g. ZK proofs [31], not viable due to the associated communication overhead being linear.
The second biggest challenge is enforcing that the sender performs the correct computation. In
our protocol, the sender can deviate from the prescribed protocol in numerous ways. For instance,
it is well known [23,48] that the sender can incorrectly perform simple hashing, which allows the
receiver’s output distribution to depend on the receiver’s full set. Moreover, in our protocol, the
situation is even worse in that the sender obtains a homomorphically encrypted copy of the receiver’s
set. Instead of using it to evaluate our PSI circuit, the sender has a large degree of freedom to
compute a diﬀerent circuit, which may arbitrarily depend on the receivers set.
For example, it is trivial for the sender to force the receiver to output their full set. Recall that
in [12], and in our semi-honest protocol, when the returned ciphertext contains a zero, the receiver
interprets this to mean their corresponding item is in the intersection. A straightforward attack for
the sender would then be to simply encrypt and return a vector of zeros if it holds a public key, or
otherwise return an all-zero ciphertext.8 The receiver would then conclude that its full set is the
intersection.
Faced with these signiﬁcant challenges, we choose to forgo simulation based security when in
the presence of a malicious sender. Instead, we show that (1) our basic protocol achieves privacy[29]
against a malicious sender; (2) a simple modiﬁcation of our protocol can signiﬁcantly restrict the
class of attacks that a malicious sender can perform.
This notion of privacy against a malicious sender and full security against the receiver has
previously been considered in the context of PSI by Hazay and Lindell [29]. Informally, privacy
guarantees that the transcript of the sender reveals nothing about that receiver’s input. This is a
relaxation of full simulation based security in that, for example, we do not achieve independence
of inputs, nor guarantee output correctness. For a formal description, we refer the reader to [29,
Deﬁnition 2.2].
Theorem 2. In the presence of semantic secure fully homomorphic encryption scheme and an
OMGDH-hard group G, the protocol π of Figure 2 computes the PSI functionality (Figure 3) with
privacy [29, deﬁnition 2.2] against a malicious sender.
Proof. The receiver sends two messages to the sender. First are the OPRF queries with the form
H(y)β where β ∈ Z∗
q is sampled uniformly at random. By the assumption that OMGDH is a
8 The homomorphic encryption library used may or may not reject such a ciphertext as invalid. If it does, the sender
can still multiply any ciphertext obtained from the receiver by a nonzero plaintext mask that sets all but one
vector slot value to zero, leading the receiver to interpret all but one item as matching.
hard problem in the group G, replacing y with a uniformly random element is indistinguishable
and therefore these messages are independent of the receiver’s set. The second set of messages
sent by the receiver are the FHE encrypted powers which will be used to evaluate the symmetric
polynomial. By the assumption that the FHE scheme is semantically secure, replacing the powers
with uniformly random values is indistinguishable and therefore these messages are also independent
of the receivers set.
7.3 Two-Sided Simulation with Leakage
We now present a technique for restricting the types of attacks the sender can perform. The core
idea is inspired by Labeled PSI combined with the fact that evaluating a high-depth circuit using
leveled FHE which supports much smaller depth is diﬃcult—if not infeasible. First we consider
the setting where the sender does not reuse the result of the pre-processing phase with multiple
receivers.
For the receiver to conclude that an item y is in the intersection, we require that the sender
return an encryption of the label z = H(OPRFk(y)), where H is a suﬃciently complex hash function
which we model as a random oracle, e.g. SHA256. Due to H being a random oracle the sender has
two options for computing z: (1) it must know some x = y and locally compute z = H(OPRFk(x));
(2) it must use the receiver’s encrypted set of {OPRFk(y)} to homomorphically evaluate a circuit
that computes H using the given leveled FHE scheme under the ﬁxed encryption parameters that
the two parties have agreed to use.
We heuristically argue that evaluating such a circuit is extremely diﬃcult—if not infeasible—
using leveled FHE, where the parameters are chosen to support a much smaller multiplicative depth.
While there is no guarantee that a high degree polynomial cannot be evaluated, we experimentally
ﬁnd that for our parameters the noise level always overﬂows when even a few extra multiplications
are performed. In addition, hash functions such as SHA256 have very high depth and seem extremely
diﬃcult to evaluate using arithmetic FHE schemes due to the switching between binary and modular
arithmetic (in SHA256). Moreover, the depth of H can be increased arbitrarily by repeatedly
applying the hash function, and the number of repetitions can be decided after the encryption
parameters have been selected. To encapsulate this assumption we deﬁne the notion of F -limited.
Deﬁnition 1. We say a leveled fully homomorphic encryption scheme Σ is F -limited if for all F ∗
the probability of the following game outputting 1 is negligible. Uniformly sample an z and output
1 if Σ.Decsk(F ∗(Σ.Encpk(z))) = F (z) and otherwise output 0.
Under the assumption that the given (leveled) FHE scheme is H-limited, the sender must