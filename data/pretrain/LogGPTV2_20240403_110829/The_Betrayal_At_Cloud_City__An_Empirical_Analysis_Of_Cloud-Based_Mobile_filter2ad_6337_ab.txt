are additional stakeholders, like app users and internet ser-
vice providers (ISP), but they do not have direct remediation
oversight. We deﬁne a mapping between backends layers,
labels, and ownership, shown in Table 2.
The ﬁnal piece of the model is the mitigation compo-
nent that maps vulnerable backends to the proper mitigation
strategies. There are ﬁve mitigation strategies for developers:
• Upgrade (u) the software to vendor supported versions.
• Patch (p) vulnerable software with a vendor patch.
USENIX Association
28th USENIX Security Symposium    553
Label
First-Party (B1st)
HW OS
SS
AS
CS
(cid:35)
(cid:32)
(cid:72)(cid:35)
(cid:35)
(cid:32)
(cid:72)(cid:35)
Hybrid (Bhyb)
(cid:35)
Third-Party (B3rd) (cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
Table 2: Backend labels (ﬁrst-party - B1st,
third-party
B3rd, and hybrid - Bhyb) and cloud layers (hardware - HW ,
operating system - OS, software services - SS, application
software - AS, and communication services - CS) mapping
to stakeholders (developers - (cid:35), service providers - (cid:32), and
shared -(cid:72)(cid:35))
• Block (b) incoming internet trafﬁc to exposed services.
• Report (r) the vulnerability to the responsible party.
• Migrate (m) the backend to secure infrastructure.
In many cases,
the developer may not have control or
authority to ﬁx the issues but still has the option to report it
(r) or change service provider (m).
3.2 Counting Vulnerabilities
This work considers vulnerabilities which are software bugs
that exist in the backend software stack, including the oper-
ating system (OS), services (SS), application (AS), and com-
munication (CS). We consider N-Day vulnerabilities to be
those vulnerabilities which have an associated common vul-
nerabilities and exposure (CVE) number assigned by the na-
tional institute of standards and technology (NIST) and in-
dexed in the national vulnerability database (NVD) [13]. In
our ﬁndings, we count N-Day vulnerabilities by class and
instance, where class refers to the CVE number of a partic-
ular vulnerability and an instance refers to the vulnerabil-
ity affecting a speciﬁc interface or software component on
a mobile backend. For example, Apache Struts vulnerabil-
ity CVE-2017-5638 that affects Apache Struts 2.3.x before
2.3.32 and 2.5.x before 2.5.10.1 is counted as a single vul-
nerability (class), but it can affect multiple backends that run
different versions of Apache Struts (instances).
Some software versions are affected by multiple CVEs, in
this case, we do not count every CVE as an instance. We
generally assume patching the latest CVE should address all
previous unpatched CVEs. We only consider the latest CVE
affecting the vulnerable software and count it once. Further,
a vulnerability instance is a tuple of the backend’s domain
name, IP address, and the vulnerable software version. As
for 0-Day vulnerabilities, they are associated with the soft-
ware application (AS) running on the backend. This work
looks at three classes of 0-Day vulnerabilities, SQLi, XSS,
and XXE and counts each instance per API interface end-
point on the mobile backend. The deﬁned model, labels,
mitigations, mappings, and vulnerabilities are the basis for
our methodology, which we describe next.
4 Methodology
In this section, we provide an overview of our assessment
and details about implementing SkyWalker. Figure 1 is an
overview of SkyWalker’s internal components. We divide
the implementation into four phases, namely binary analy-
sis, labeling, ﬁngerprinting, and vulnerability analysis. Each
phase provides input to the next phase, starting from an input
app APK to the ﬁnal vulnerability/mitigation report.
4.1 Binary Analysis
SkyWalker leverages our prior work, Smartgen [19], to per-
form the binary analysis and extract query messages from
an APK binary. SkyWalker dynamically executes the code
paths to the network functions and extracts the native usage
of the backend APIs. The native usage of an API includes
the URI path and their parameter types/values.
4.2 Backend Labels
Backend labeling assigns one of the four labels deﬁned in our
model. The labels are used to map the responsible parties
and the mitigation strategies needed (excluding unknown),
shown in Table 2. Moreover, the labels are used to iden-
tify where the most common issues are found. To perform
the labeling, we curate three unique lists using the ipcat [20]
datacenter dataset. The ﬁrst list is called CP and contains
cloud providers, content delivery networks (CDNs), and mo-
bile platform cloud services. The second list, Colo, contains
a list of collocation centers. The third list is a list of SDK
libraries that we extracted using LibScout [21] (Table 3),
which help SkyWalker identify third-party backends. OS-
SPolice [22] provides a more comprehensive list, including
native libraries used by the mobile app, but our binary analy-
sis technique only instruments Java code, therefore, we limit
the third-party SDK identiﬁcation to LibScout.
To perform the labeling we generate a tuple for each
extracted backend B that contains the effective-second level
domain d, IP address ip, a boolean ﬂag lib indicating if
the backend belongs to an SDK library, and the developer
or vendor name v. We deﬁne a function owner() that
parses WHOIS, MaxMind [23], and ASN records to extract
ownership information. The owner() function uses text
tokenization, normalization, and aliasing to consolidate
varying records.
SkyWalker uses Algorithm 1 to assign labels to each back-
end. Algorithm 1 takes as input a list of backends, β , con-
taining tuples B = {d,ip,lib,v} and returns a list of labeled
backends β(cid:48). The algorithm uses the CP and Colo list to
check membership for the domains and IPs to determine the
appropriate label. The ﬁrst check is to determine the origin
of the backend (was it extracted from an SDK library?) then
554    28th USENIX Security Symposium
USENIX Association
Figure 1: SkyWalker Overview. Phase 1 (Binary Analysis) extracts backend URLs through a dynamic binary instrumentation
technique. Phase 2 labels backends into ﬁrst-party, third-party, and hybrid. Phase 3 discovers and ﬁngerprints the backend
services to collect cloud layer information. Phase 4 (vulnerability analysis) uses the ﬁngerprints and correlates them with
public vulnerabilities to identify vulnerable backends.
Algorithm 1: Assigning Labels to Backends
Input: β = List of backend tuple B = {d,ip,lib,v}
Output: β(cid:48) = Ownership labeled backend list
SDK: List of backend domains found in the SDK libraries;
CP: List of cloud and hosting providers (domains, net preﬁx, and ASNs);
Colo: List of collocation providers (domains, net preﬁx, and ASNs);
for ∀B ∈ β do
if B.lib∨ B.d ∈ SDK then
// Backend from Java lib
B.label ← “third-party”;
continue
end
if owner(B.d) (cid:54)= v∧ owner(B.d) /∈ CP then
// Backend domain not owned by developer or CP
B.label ← “third-party”;
continue
end
if B.ip ∈ CP then
// Backend IP hosted by cloud provider
B.label ← “hybrid”;
continue
end
if B.ip ∈ Colo then
// Backend IP hosted by collocation center
B.label ← “ﬁrst-party”;
continue
end
B.label ← “unknown”;
end
assigns “third-party” label if lib‘s value is true or the back-
end domain belongs to the list of SDK backends.
If none of the previous statements are true about the do-
main, then SkyWalker checks the IP membership against the
CP and Colo list.
If the IP address belongs to a network
on the CP list SkyWalker assigns “hybrid” label. If the IP
address belongs to a network on the Colo list SkyWalker as-
signs “ﬁrst-party” label. Otherwise, SkyWalker assigns an
“unknown” label since it cannot be determined.
It is im-
portant to note that SkyWalker’s labeling approach relies on
LibScout [21] to identify third-party backends based on the
SDK libraries. SkyWalker performs an additional check be-
fore setting the lib ﬂag to exclude SDK libraries built by the
same vendor (Google, Facebook, etc.).
4.3 Service Discovery and Fingerprinting
Service discovery identiﬁes internet-facing services on back-
ends and ﬁngerprinting identiﬁes the software type, version,
Third-Party SDKs
ACRA
AMoAd
AdColony
AdFalcon
Adrally
Amazon
Android
Apache
AppBrain
AppFlood
AppsFlyer
BeaconsInSpace
Bolts
Brightroll
Butter-Knife
Chartboost
CleverTap
Crashlytics
Crittercism
Dagger
EventBus
ExoPlayer
Facebook
Firebase
Flurry
Fresco
Fyber
Google
Gson
Guava
Guice
HockeyApp
InMobi
JSch
Joda-Time
MdotM
Millennial Media
Mixpanel
MoPub
New-Relic
OkHttp
Parse
Paypal
Picasso
Pollﬁsh
Retroﬁt
Segment
Stetho
Supersonic
Syrup
Tapjoy
Tremor Video
Twitter4J
Urban-Airship
Vungle
WeChat
ﬂickrj
heyZap
ironSource
jsoup
roboguice
scribe
smaato
vkontakte
Table 3: A list of third-party SDKs extracted by LibScout
from the top 5,000 apps, which is used to curate third-party
backends.
and conﬁguration of each service. Our approach is a multi-
tier approach that starts by remotely pinging the backend,
then port scanning it, then interacting with the discovered
service, and ﬁnally collecting service conﬁgurations. For in-
stance, the scan ﬁrst checks to see if the host is reachable,
then it scans for all ports to identify available services, then
it tries to connect to the service to collect its banner, and ﬁ-
nally, if the services use TLS/SSL, it would collect their con-
ﬁgurations and supported ciphers. For each step, our scanner
is conﬁgured to be non-intrusive, throttled (slow scan speed
and a light load on the remote server), and conservative (us-
ing techniques that yield low to no false positives).
First, SkyWalker groups all IP addresses into their net-
work preﬁxes and in a random order picks a preﬁx and a ran-
dom IP from the selected preﬁx to scan. Preﬁxes are grouped
by the autonomous system number (ASN) for each network.
If a network spans multiple ASNs, SkyWalker keeps each
ASN as a separate preﬁx to distribute the scanning uniformly
across different IP segments. SkyWalker does a TCP ping
against common service ports (FTP, SSH, HTTP/S, IMAP,
SMTP, RDP, etc.) by sending out a SYN packet followed by
USENIX Association
28th USENIX Security Symposium    555
101011000101011App IRStatic Analysis(Build ECG)Network APIIdentificationSelectiveSymbExBackend URLExtractionConstraint InstrumentedDynamic AnalysisBackend URLPopulate BackendTuple {d, ip, lib, v}Ownership ExtractionLabelAssignmentRemote PingPort ScanLabeledBackend URLInteractive ServiceIdentificationLayered Software IdentificationNASLFingerprintedBackendFFingerprint Confidence ScoreBinary AnalysisBackend LabelingService Discovery and Fingerprinting Vulnerability Analysis Fingerprint –CVECorrelationVulnerabilityVerificationReport BackendIssuesAppAPKa RST packet. TCP ping scans are more reliable in detecting
the availability of the remote server (backend) because they
are not ﬁltered by ﬁrewalls like ICMP scans.
Once SkyWalker establishes the host is reachable, Sky-
Walker conducts a TCP SYN scan (SYN-SYN/ACK-RST)
across all ports. This process identiﬁes candidate ports on
the target backend that will be used for a more thorough scan
(TCP connect). To be efﬁcient, SkyWalker uses the list of
ports identiﬁed in the TCP SYN scan to conduct a TCP con-
nect scan (SYN-SYN/ACK-ACK) i.e., establish a complete
connection. Based on the port/service identiﬁed, SkyWalker
interactively grabs the banner, the header response, and any
available conﬁguration. The retrieved information varies per
service type, for example, HTTP will have header informa-
tion unlike SSH, nonetheless, both help ﬁngerprint the host.
Moreover, SkyWalker looks for TLS/SSL connections on all
candidate ports because many services like HTTP and IMAP
can run over TLS/SSL. Finally, to obtain the backend IP ad-
dress fronted by CDNs, SkyWalker looks up the IP address
in a manually curated CDN list and uses passive DNS to ﬁnd
historical records that existed just before the current records.
When SkyWalker cannot locate such record, the backend is
excluded from ﬁngerprinting.
Once SkyWalker discovers all the services running on a
backend, SkyWalker uses the result to ﬁngerprint the back-
end. The ﬁngerprint identiﬁes the OS, SS, and CS type
(Linux, Windows; PHP, .NET, Python, Perl; FTP, SFTP,
HTTP, HTTPS, SSH, IMAP, etc.), version, and conﬁgura-
tion information if available. The ﬁngerprinting uses open
source and commercial Nessus Attack Scripting Language
(NASL) scripts to identify the different layers of software
on the backend. For example, to identify the OS, the NASL
script inspects the banner string, analyzes the SSL certiﬁcate,
checks additional running services (SMB, RDP, SSH), per-
forms structured ICMP pings, inspects HTTP headers, and
uses TCP/IP ﬁngerprinting algorithms [24]. Based on these
signals a conﬁdence score is provided based on matching a
set of pre-proﬁled OSes. For example, if 90% of the signals
match a Windows Server 2008 R2 Service Pack 1 proﬁle, we
consider the OS layer for that backend in the vulnerability
analysis. Any conﬁdence level below 90% or ambiguity be-
tween the same OS but different versions will not be consid-
ered for the vulnerability analysis phase.
Web Applications. Web apps (AS) are generally tailored
per mobile app, unlike OS, SS, and CS layers. The binary
phase performs in-context analysis for each API interface on
the backend, which provides API information used for ﬁn-
gerprinting. We reference the OWASP’s top 10 vulnerability
issues [14] that can be passively tested within the ethical and
legal bounds discussed in Section 8. Speciﬁcally, SkyWalker
uses side-channel SQLi through time delay, reﬂective XSS,
and XXE callback to identify candidate issues in web apps.
It is important to note that other vulnerabilities such as au-
thentication bypass, broken access control, and sensitive data
exposure present a high risk that can violate legal obliga-
tions. Adding a module to SkyWalker to support additional