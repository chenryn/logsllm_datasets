1 (1%)
3 (2%)
0 (0%)
but did not coalesce in the other tests. One path on port 80 acked
only the third segment in the queued test—returned no payload;
other tests show this path does not show proxy behavior and does
pass TCP options, but gives no reply to the data-ﬁrst sequence hole.
Likely it is also ignoring out of order segments in this test too. The
other path on port 80 showed similar behavior except that it does
not return payload even in the in-order test and does cache seg-
ments. We do not know what form of middleboxes these are, but
their behavior seems fragile.
Among those paths that coalesced, we saw quite a variety of be-
havior. The two small segments we sent were of 244 bytes. When
coalescing occurred, depending on the path, the ﬁrst coalesced seg-
ment received could be of 256, 488, 500 or 512 bytes in the in-order
test and 256, 476 or 488 bytes in the queued test. We have no idea
what motivates these particular segment sizes.
Overall, the story is quite good for TCP extensions. Although
middleboxes do split and coalesce segments, none did so while
passing unknown options (indeed one changed its behavior when
options were present). Thus it seems relatively safe to assume that
if an option is passed, it arrives with the segment on which it was
sent.
4.7 Intelligent NICs
Most of the experiments in this paper probe the network behav-
ior, but with the rise of “intelligent” Network Interface Cards, even
the NIC can have embedded TCP knowledge. Thus the NIC itself
might ﬁght with new TCP extensions.
We are concerned in particular with TCP Segmentation Ofﬂoad
(TSO), where the host OS sends large segments and relies on the
NIC to resegment to match the MTU or the receiver’s MSS. In
Linux, the TCP implementation chooses the split segment size to
allow all the TCP options to be copied to all the split segments
while still ﬁtting within the MTU. But what do NICs actually do—
do they really copy the options to all the split segments?
We tested twelve TSO NICs from four different vendors; In-
tel (82546, 82541GI, 82566MM, 82577LM, 82567V, 82598EB),
Nvidia (MCP55), Broadcom (BCM95723, BCM5755) and Marvell
(88E8053, 88E8056, 88E8059). For this, our initiator tool consists
of a user application and a custom Linux kernel, and we reused
the responder tool from the earlier middlebox tests. The key points
about the experiment are:
socket layer at one time.
• Our application calls write() to send ﬁve MSS of data to the
• The OS TCP stack composes one TCP segment that includes
all the data and passes it to the TSO layer. This large segment
also includes the TIMESTAMP or MP_DATA TCP option.
• The NIC performs TSO, splitting the large segment into mul-
• Our responder receives these segments and responds with a
segment echoing the headers in its payload so we can see
what was received.
tiple segments and transmits them.
All the NICs we tested correctly copied the options to all the split
segments. TSO is now sufﬁciently commonplace so that designers
of extensions to TCP should assume it. The implication is that
TCP options must be designed so that when they are duplicated on
consecutive segments, this does not adversely affect correctness or
performance.
We also tested Large Receive Ofﬂoad (LRO) behavior with the
Intel 82598EB ten gigabit ethernet NIC to see how TCP options
are treated. First, we receive bulk TCP trafﬁc with the NIC; all
packets in the trafﬁc include an MP_DATA option with the same
values. Second, we receive similar trafﬁc, but change the values of
the MP_DATA between packets. We also conducted the same tests
with a TIMESTAMP option instead of the MP_DATA. For both op-
tion kinds, packets were coalesced only when their option values
are same. The coalesced segment has one of the options on the
original segments. This behavior seems sane: on this particular
NIC, LRO simply tries to undo what TSO did by duplicating op-
tions. If options are different, no coalescing happens.
Both TSO and LRO seem to forbid TCP extensions to reliably
use the counts of sent and received options for signaling. Instead,
TCP extensions experiencing ofﬂoad should be prepared to handle
both duplicate and “merged” options. Disabling ofﬂoad altogether
at endpoints is possible, but will result in a performance penalty.
5. PROTOCOL DESIGN IMPLICATIONS
5.1 Multipath TCP
As more and more mobile devices come equipped with multiple
network interfaces such as 3G and WiFi, single path transport is
fundamentally unable to utilize the aggregate capacity and robust-
ness of the separate links. Multipath TCP (MPTCP) [11, 12, 30]
enables each TCP connection to be striped across multiple paths,
while offering the same reliable, in-order, byte-oriented transport
service to unmodiﬁed applications.
At ﬁrst sight, MPTCP seems straightforward to implement, but
the design has been evolving for a couple of years now, with most
changes aimed at accommodating the middleboxes deployed today
in the Internet. The measurement results in this paper have guided
the design, now undergoing standardization at the IETF.
To
the
use
endpoints
negotiate MPTCP,
the
MP_CAPABLE TCP option on SYN packets; they fall back to regu-
lar TCP if either endpoint does not support MPTCP or middleboxes
along the path remove the new option. Our results indicate that if
the option handshake goes through, MPTCP options will also be
allowed on data segments. To be on the safe side though, MPTCP
reverts to regular TCP if its options do not get through on any of
the data segments sent during the ﬁrst RTT of the connection.
Sequence numbers are fundamental to the MPTCP design.
It
would be easiest to reuse the TCP sequence numbers by striping
segments coming from the TCP stack across different paths (e.g.,
by selecting different addresses for the same endpoint). A short-
coming of this approach is that, on each path, MPTCP subﬂows
will look like TCP ﬂows with holes in their sequence space. Our
results show that 2 – 10 % of paths do not allow sequence holes by
data segments and around 25 % of paths do not allow those by Ack
segments to pass, and so MPTCP had to use one sequence space
per subﬂow to pass through middleboxes. This in turn implies the
need to add an additional data-level sequence number to allow the
receiver to put segments back in order before passing them to the
application.
How should the sender signal the data sequence numbers to the
receiver? There are two possibilities: use TCP options or embed
them in the TCP payload. Sending control information in the pay-
189load implies some form of payload chunking, similar to TLS-style
TLV encoding. This would cause the inconsistent retransmission
that is risky (see Sec. 4.5). This approach also would make it dif-
ﬁcult for future middleboxes to work with MPTCP, as they would
be forced to parse the payload. From these reasons it is cleaner to
encode data sequence numbers as TCP options.
The simplest solution is use a TCP option to add a data sequence
number (DSN) to each segment. Although we observed no middle-
box that both passed options and resegmented data, NICs perform-
ing TCP Segmentation Ofﬂoad (TSO) would replicate the data se-
quence number onto multiple segments. Multiple segments would
then have the same DSN—not what is desired.
Such a failure is a consequence of an implicit mapping of sub-
ﬂow sequence numbers (in the TCP headers) to data sequence num-
bers (in the options). The solution adopted by MPTCP is to make
this mapping explicit: a data sequence mapping option carries the
starting data sequence number, the starting subﬂow sequence num-
ber and the length of the mapping. This allows MPTCP to support
both TSO as well as LRO if coalescing happens only for segments
with duplicate options.
To complicate things more, we have seen that subﬂow sequence
numbers may be rewritten by middleboxes. To avoid this problem,
MPTCP signals subﬂow sequence numbers relative to the initial
subﬂow sequence number.
Finally there is one form of application-level gateway we did
not test for—a NAT with knowledge of FTP or SIP that rewrites
IP addresses in the TCP payload. Such rewriting can change the
payload length and would be really bad for MPTCP: Reordering at
the receiver might result in arbitrary-ordered data being passed to
the application. MPTCP includes a checksum in the DSN mapping
option to guard against such payload changes, and falls back to
single path TCP if required.
There are many more design decisions in MPTCP that were dic-
tated by veriﬁed, anecdotal or just possible middlebox behaviors.
We quickly list two here:
• Retransmitting data: to avoid the problems we observed with
sequence holes, MPTCP always sends the original data on
retransmission, even though that same data may already have
been received by the receiver via a different subﬂow.
• Proactive ACKing middleboxes might fail before sending data
to the receiver; this would halt MPTCP if data-level ACKs
were inferred from subﬂow ACKs. Although we observed no
pro-actively acking middlebox that would pass MPTCP op-
tions, MPTCP includes a data-level acknowledgement, sent
as a TCP option, to guard against such failures.
MPTCP was designed from ground up to co-exist with current
middleboxes and to play nicely with future ones. Our tests con-
ducted in this paper have provided a solid basis for MPTCP’s de-
sign choices.
5.2 TcpCrypt
TcpCrypt is a proposed extension to TCP that opportunistically
encrypts all TCP trafﬁc [4, 5]. TcpCrypt endpoints share a public
key on the wire and use that to derive a session key. After the initial
handshake TcpCrypt connections are secure against eavesdropping,
segment insertion or modiﬁcation and replay attacks. During the
initial handshake, connections are susceptible to man-in-the-middle
or downgrade attacks, but TcpCrypt also provides hooks to allow
application-level authentication of the encrypted connection.
TcpCrypt was motivated by the observation that server comput-
ing power is the performance bottleneck. To make ubiquitous en-
cryption possible, highly asymmetric public key operations are ar-
ranged so that the expensive work is performed by the client which
does not need to handle high connection setup rates. This is in con-
trast to SSL/TLS where the server does more work. This reversal
of roles together with ever increasing computing power makes it
feasible to have “always on” protection [5].
Use of TcpCrypt is negotiated with new CRYPT options in SYN
segments, and keying material is included in INIT messages that
are sent in both directions in the TCP payload before application
data is sent. The INIT exchange also probes the path support for
new options on data segments, thus coping with any middleboxes
that allow new options on SYNs but not on data. After the initial
negotiation, TcpCrypt can be either in the encrypting or disabled
states. In the disabled state TcpCrypt behaves exactly like regular
TCP. No further transitions are allowed once the connection reaches
one of these two states [4]. This is because applications can query
the TcpCrypt connection state and use it to make authentication
decisions.
In the encrypting phase TcpCrypt encrypts the TCP payload with
the shared session key and also adds a TCP MAC option to each
segment that is validated at the receiver. The keyed MAC covers the
encrypted payload as well as parts of the TCP header: the sequence
numbers, the TCP options, and the length, as well the acknowledge-
ment sequence number. The MAC covers neither the TCP ports nor
the IP header to allow network address translation.
TcpCrypt only accepts segments whose MAC is correct; when
the TCP MAC option is missing or incorrect the segment is silently
dropped. Hence, each segment will have a unique MAC, which also
will prevent segments from being coalesced by LRO.
Middleboxes that resegment TCP packets would cause TcpCrypt’s
MAC to fail validation, causing the connection to stall. Unlike
MPTCP, fallback to vanilla TCP behavior after entering the en-
crypting state is not viable. Fortunately we have not observed any
paths that both pass new TCP options and resegment data. TSO
would also cause TcpCrypt to fail, but the OS can disable this—the
performance penalty is negligible compared to the cost of encryp-
tion.
To guard against segment injection and replay attacks the MAC
needs to cover the TCP sequence numbers. This would fail when
middleboxes rewrite the ISN, so TcpCrypt includes the number of
bytes since the start of the connection in the pseudo-header covered
by the MAC rather than the absolute sequence number.
The MAC also covers acknowledgement sequence numbers. Any
proactive ACKs sent by middleboxes will just be dropped. If no
ACKs are passed end-to-end the connection will fail. Fortunately,
this problem is unlikely as such boxes are proxies (see Sec. 4.4),
and so would prevent TcpCrypt negotiation in the initial handshake
by removing the SYN options. Finally, HTTP-level proxies require
a valid HTTP header, which TcpCrypt would hide. However, such
proxies also prevent the initial handshake.
between
disabled
and
A key difference between TcpCrypt and MPTCP is the distinc-
tion
when
TcpCrypt is enabled it gives extra security to applications, which
then rely on the protection provided. Once enabled it is unaccept-
able from a security point of view to revert to TCP. MPTCP, on the
other hand, provides the same reliable, in-order, byte-stream ser-
vice to applications, and can detect problems and revert to TCP at
almost any time during a connection’s lifetime.
enabled;
5.3 Extending TCP Option Space
Extending TCP option space has been a discussion topic on IETF
mailing lists on many occasions, starting as early as 2004. The
main reason that no solution was standardized is because people
190felt there was no pressing need for more option space. MPTCP
uses a relatively large option space, as does TcpCrypt; this usage,
combined with existing options in use, leaves very little TCP op-
tion space remaining. With MPTCP approaching standardization,
extending the TCP option space has now gained enough support to
happen in practice.
Option space is scarce on both SYN and regular data packets.
Extending the option space on the ﬁrst SYN (active open) is dif-
ﬁcult because of the need to be backward compatible: if one adds
more options to the SYN, a legacy host might treat the extra options
as application data, corrupting the connection [19].
Extending the option space in regular segments seems straight-
forward at ﬁrst sight; the sending host simply needs to “extend” the
data offset ﬁeld in the TCP header. This is what the Long Option
(LO) draft [9] suggests: add a new LO option that a 16 bit-wide
value of the data offset. As with the other extensions we have dis-
cussed, resegmentation would be problematic here, but we did not
observe any middlebox that passes options and resegments. Still, it
would be good if the use of long options did not preclude TSO, and
this solution would—every split segment would appear to carry a
long option when in fact only the ﬁrst would.
To allow TSO, the sender must be explicit about the placement
of extended options, and solutions will resemble MPTCP’s data
sequence mapping. The receiver will be told the start of extended
options and their length‡.
The same constraints apply as in the case of MPTCP signaling:
the ISN may be rewritten, thus the sequence number must be rel-
ative to the beginning of the ﬂow. If middleboxes change payload
length (for instance by rewriting IP addresses for FTP/SIP), the ex-
tended option sequence numbers will be inaccurate; a checksum
covering the extra options is needed to cover such cases.
Another problem with extending TCP option space is the interac-
tion between middleboxes that understand deployed TCP options,
such as SACK. A middlebox might modify sequence numbers in
both the header and SACK blocks, but not understand the LO op-
tion. However, if the sender places a SACK block in the extended
option space, such middleboxes will not see it, and so cannot cor-
rect the selective acknowledgment numbers. We observed a signif-
icant number of middleboxes that modify sequence numbers and
pass the unknown TCP options, so this problem does not seem hy-
pothetical.
Segment caching middleboxes can also affect the LO option. If
the options in the payload differ between the original and the re-
transmitted segments, the middlebox will consider them as differ-
ent application data. We observed such segments could induce con-
nection failures.
Work arounds are possible—SACK blocks would have to be
placed in the regular options space, and no option in the extended
option space would be allowed to change on a retransmission. But
such workarounds rather limit the usefulness of extended options
and increase both the complexity of implementations and the po-
tential for subtle bugs.
6. CONCLUSION
Our goal in this paper has been to determine whether it is still
possible to extend TCP. In particular, what limitations are imposed
on TCP extensions by middleboxes and by “intelligent” NIC hard-
ware? To answer these questions necessitated building novel mea-
surement tools and recruiting volunteers from all over the world to
run them on a wide range of networks.
‡This is very much the functionality provided by the urgent pointer,
but this is known not to go well through middleboxes[14]
From our results we conclude that the middleboxes implement-
ing layer 4 functionality are very common—at least 25% of paths
interfered with TCP in some way beyond basic ﬁrewalling. We also
conclude that it is still possible to extend TCP using its intended ex-
tension mechanism—TCP options—but that there are some caveats.
Here are some guidelines:
• Negotiate new features on the SYN exchange before use.
• Be robust if an option is removed from the SYN/ACK—just
because the server agrees to use a feature does not mean the
client sees that agreement.
• Assume segments will be split (by TSO) and options dupli-
cated on those segments.
• Assume segments will be coalesced by LRO and some of
duplicated options eliminated.
There are also some warning stories, regarding behavior that is not
safe to assume:
• Do not assume sequence numbers arrive unmodiﬁed—if you
have to quote them, quote bytes from the start of the connec-
tion rather than absolute sequence numbers.
• Do not leave gaps in the sequence space—middleboxes need
to see all the packets.
• Retransmitting inconsistent information is risky.