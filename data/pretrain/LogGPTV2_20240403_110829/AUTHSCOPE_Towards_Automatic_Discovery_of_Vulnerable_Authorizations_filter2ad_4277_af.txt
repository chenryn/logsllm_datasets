27  "s_facebook_page": "http:\/\/",
28  ...
29 }
Figure 7: Alice Read Bob’s Information in app K.
Secret Data Leakage. Other than user’s private data, more sen-
sitive secret data can also be leaked from the vulnerabilities dis-
covered by AuthScope. Considering the K app as an example,
it is a second-hand goods trading app on Google Play, which has
between 500, 000 and 1, 000, 000 downloads. With this app, any
registered user can sell/buy second-hand goods. Unfortunately,
we found the authorization vulnerability can lead to user’s secret
data leakage.
In particular, ater authentication, the server will push detailed
information of the user based on her email address. Ater substi-
tuting Alice’s email with Bob’s, AuthScope successfully got Bob’s
information, part of which is shown in Figure 7. As we can see,
there are quite a number of private records in the response message
such as the registration date (line 2), modiication date (line 3), user
name (line 4), phone number (line 10), home address (line 14), Geo-
location (line 17, 18 which is null in our test case), last login time
(line 22). Among these leaked data, the most dangerous record is
Bob’s hashed password (which is 7c4a8d09ca3762af61e59520943
dc26494f8941b). Under no circumstance should the app provide
user’s password to the user. With a further investigation, we found
this hash password is generated by SHA-1, which can be easily
cracked by many online services (e.g., https://crackstation.net/ which
takes less than a second to return the plaintext of this password).
With this authorization vulnerability in K’s server, an atack
can easily get the hashed password, and further crack a user’s pass-
word when provided with the victim’s email address. Recently,
there are huge data breaches and likely the atacker can trivially
probe the victim’s email in K’s server. However, we also found
when opening a seller’s page, her email address is embedded in
the meta data. herefore, an adversary can also crawl all the prod-
ucts in this service and get all seller’s email, and further get their
hashed password. Considering that most online users today reuse
their password, such an atack can cause serious damages to many
online users.
7 DISCUSSIONS
Limitations and Future Works. While AuthScope has made
a irst step towards automatic discovery of authorization vulnera-
bilities in online service, it still has a number of limitations. First,
clearly AuthScope has false negatives. For instance, we only fo-
cused on the apps that use Facebook login (essentially using Face-
book login to bypass the authentication step), but not all the apps
have been using this social login. In our experiment, we iltered
more than 25, 000 mobile apps that do not contain Facebook logins.
How to handle other social login schemes (e.g., Google login), or
in general how to automatically login a remote service is still an
unsolved problem. his may require solving the challenges of au-
tomated service sign up, more intelligent Android UI recognition
and test case generation, etc.
Second, AuthScope only discovers the authorization vulnera-
bility that leads to the information leakage and account hijacking
atacks. Basically, these are atacks that lead to unauthorized read.
However, there are also many other interesting atacks such as
the unauthorized write. For instance, a user should not modify any
items that belong to other users. Currently, AuthScope is not able
to infer the unauthorized write automatically.
Finally, the vulnerable authorization is a general problem in
online services and is not just limited to Android app’s server side
implementation. Currently, we only developed the prototype that
performs dynamic Android app analysis and protocol reverse engi-
neering to infer the vulnerability, and we believe our methodology
can also be applied to other platforms such as iOS and Windows.
Also, AuthScope currently only handles the network communica-
tions with HTTP/HTTPS protocols. We will study how to enable
AuthScope to analyze the vulnerabilities for other platforms and
other protocols, as well as addressing the irst two limitations in
our future work.
Practicality of the Attack and Countermeasures. It is abso-
lutely incorrect to use predictable numbers without further autho-
rization checks to allow access of a user’s private resource. How-
ever, service developers may feel it is secure to just use email ad-
dress or other sophisticated numbers such as Facebook ID for the
authorization. However, we have to note that recently there are
massive data leakages and huge volume of Internet user’s email ad-
dresses have been leaked. We have to consider that email address
is a public information now. Also, Facebook ID can be crawled
and it can also be considered public. herefore, the atacks we
discovered are quite practical. To really ix these vulnerabilities,
we urge service developers to follow the best practices (as we have
discussed in §2.3) such as using random token in each session,
enforcing the security checks with the token and particular user,
and never assuming that a client is always trusted.
Ethics and Responsible Disclosure. When developing Auth-
Scope for vulnerability discovery, we do take ethics in the highest
standard. First, we only tested the services with the two legitimate
users we registered (namely Alice and Bob), and we never steal any
other user’s private information. Second, we never sent a large
volume of traic to a remote service (to perform any denial of
service atack), and all the traic is generated at the speed as how
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA811a normal user interacts with the remote system. Finally, we have
made responsible disclosures when we discover a vulnerability.
In particular, we have immediately notiied the developers based
on the corresponding contact information on Google Play. As
a result, some app developers contacted us to discuss the details
of their server vulnerabilities and we have worked together with
them to patch the vulnerabilities. For those apps whose vulnera-
bilities have not been ixed yet at the time of this writing, we do
not reveal their concrete app names and instead just masked their
names with symbol ‘***’ as shown in Table 3. We will continue to
provide our best eforts to help ix their vulnerabilities.
8 RELATED WORK
Vulnerability Discovery in Online Services. It is challenging
to develop vulnerability free sotware, and many online services
contain various vulnerabilities ranging from SQL injection [21],
cross-site-scripting [37], cross-site-forgery [11], to broken authen-
tication [19], and even application logic vulnerabilities (e.g., [33,
39, 40, 43]). Correspondingly, signiicant amount of eforts have
been focusing on identifying these vulnerabilities through either
white-box analysis with server code, or black-box analysis with
just network traic.
here are also eforts to particularly study the access control
issues in the online services. Most of them focused on the au-
thentication related problems, such as security with single-sign on
(e.g., [38, 45]), oauth (e.g., [15, 36]), authentication vulnerability
scanning (e.g., [10]), and password brute-force atacks with on-
line services (e.g., [47]). Compared to these works, AuthScope is
among the irst few to look into the post-authentication issues in
online services and is able to automatically discover the vulnerable
authorizations when given mobile apps enabled with social login.
Dynamic Analysis of Mobile Apps. AuthScope leverages dy-
namic analysis of Android apps to generate server request mes-
sages. In the past several years, there are a large body of research in
dynamic analysis of Android apps (e.g,. Monkey [7], Robotium [4],
AppsPlayground [34], and DynoDroid [26]). Recently, there are
also eforts of using symbolic execution (e.g., [8, 29, 42, 46] for more
systematic dynamic analysis of mobile apps.
Compared to these works, AuthScope is partially inspired by
AppsPlayground and we have extended it to support more accurate
and deeper UI element exploration. While we can also leverage the
symbolic execution to have beter coverage, we realize that we may
not need symbolic execution as identifying vulnerable authoriza-
tion may not need large volume of request messages. Certainly,
symbolic execution will help though.
Protocol Reverse Engineering. AuthScope needs to reverse
engineer the application protocol ields of interest and then per-
form ields substitution to identify security vulnerabilities. Over
the past decade, there are signiicant amount of eforts of analyz-
ing both network messages (e.g., [13, 16, 17, 25]) and instructions
traces (e.g., [14, 18, 22, 23, 28, 41]) to discover protocol formats
and use them for security applications. AuthScope is particularly
inspired by the protocol informatics project [13], and uses a cus-
tomized Needleman-Wunsch algorithm [30] to align and dif the
protocol messages and infer only the ields of our interest.
9 CONCLUSION
We have presented the design, implementation, and evaluation of
AuthScope, a tool that is able to automatically execute a mobile
app, generate post-authentication messages, and pinpoint the vul-
nerable access control implementations, particularly the vulnera-
ble authorizations, on the server side. We have tested AuthScope
with 4, 838 popular mobile apps from Google Play, and identiied
597 vulnerable authorization implementations in 306 mobile apps.
hese are very serious security vulnerabilities, very easy to atack,
and can cause severe damages to end users such as personal infor-
mation leakage and account hijacking. We have made responsible
disclosure to all of the vulnerable service providers, and many of
them have acknowledged us and patched (or started to patch) their
vulnerabilities. Finally, given the capability of such an automated
analysis, we would like to raise the awareness of the vulnerable au-
thorization implementation issues in online services and hope the
rest vulnerable service providers could patch their services shortly.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their very
helpful feedbacks. his research was supported in part by AFOSR
under grants FA9550-14-1-0119 and FA9550-14-1-0173, and NSF
awards 1453011 and 1516425. Any opinions, indings, conclusions,
or recommendations expressed are those of the authors and not
necessarily of the AFOSR and NSF.
REFERENCES
[1] “Facebook app-speciic ids,” https://developers.facebook.com/docs/graph-api/
reference/user/.
[8] S. Anand, M. Naik, M. J. Harrold, and H. Yang, “Automated concolic testing
of smartphone apps,” in Proceedings of the ACM SIGSOFT 20th International
Symposium on the Foundations of Sotware Engineering, ser. FSE ’12. New York,
NY, USA: ACM, 2012, pp. 59:1–59:11.
[9] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon,
D. Octeau, and P. McDaniel, “Flowdroid: Precise context, low, ield, object-
sensitive and lifecycle-aware taint analysis for android apps,” in Proceedings
of the 35th ACM SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’14. New York, NY, USA: ACM, 2014, pp. 259–269.
[10] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun, Y. Liu, and J. S.
Dong, “Authscan: Automatic extraction of web authentication protocols from
implementations.” in NDSS, 2013.
[11] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site request
forgery,” in Proceedings of the 15th ACM conference on Computer and communi-
cations security. ACM, 2008, pp. 75–88.
[12] E. Bauman, Y. Lu, and Z. Lin, “Half a century of practice: Who is still storing
plaintext passwords?” in Proceedings of the 11th International Conference on
Information Security Practice and Experience, Beijing, China, May 2015.
[13] M. Beddoe, “he protocol
informatics project,” 2017, https://github.com/
wolever/Protocol-Informatics.
J. Caballero and D. Song, “Polyglot: Automatic extraction of protocol format
using dynamic binary analysis,” in Proceedings of the 14th ACM Conference
on Computer and and Communications Security (CCS’07), Alexandria, Virginia,
USA, 2007, pp. 317–329.
[15] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague, “Oauth demystiied
for mobile application developers,” in Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2014, pp. 892–
903.
[16] A. Continella, Y. Fratantonio, M. Lindorfer, A. Pucceti, A. Zand, C. Kruegel, and
G. Vigna, “Obfuscation-resilient privacy leak detection for mobile apps through
[14]
[2] Hypertext
transfer protocol. https://www.w3.org/Protocols/rfc2616/rfc2616.
html. Last accessed in May 2017.
[3] “Plain text ofenders,” last accessed in May 2017.
[4] “Robotium,” https://code.google.com/p/robotium/, last accessed in May 2017.
[5] “Using burp proxy,” https://portswigger.net/burp/help/proxy_using.html, last
[6] “Xposed module repository,” http://repo.xposed.info/.
[7] “Ui/application exerciser monkey,” https://developer.android.com/tools/help/
accessed in May 2017.
monkey.html, 2017.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA812diferential analysis,” in Proceedings of the ISOC Network and Distributed System
Security Symposium (NDSS), 2017, pp. 1–16.
[17] W. Cui, J. Kannan, and H. J. Wang, “Discoverer: Automatic protocol reverse
engineering from network traces,” in Proceedings of the 16th USENIX Security
Symposium (Security’07), Boston, MA, August 2007.
[18] W. Cui, M. Peinado, K. Chen, H. J. Wang, and L. Irun-Briz, “Tupni: Automatic
reverse engineering of input formats,” in Proceedings of the 15th ACM Conference
on Computer and Communications Security (CCS’08), Alexandria, Virginia, USA,
October 2008, pp. 391–402.
[19] M. Dalton, C. Kozyrakis, and N. Zeldovich, “Nemesis: Preventing authentica-
tion & access control vulnerabilities in web applications.” in USENIX Security
Symposium, 2009, pp. 267–282.
J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, and
L. Stewart, “Htp authentication: Basic and digest access authentication,” Tech.
Rep., 1999.
[20]
[25]
[21] W. G. Halfond, J. Viegas, and A. Orso, “A classiication of sql-injection atacks
and countermeasures,” in Proceedings of the IEEE International Symposium on
Secure Sotware Engineering, vol. 1.
IEEE, 2006, pp. 13–15.
[22] Z. Lin, X. Jiang, D. Xu, and X. Zhang, “Automatic protocol format reverse
engineering through context-aware monitored execution,” in Proceedings of the
15th Annual Network and Distributed System Security Symposium (NDSS’08), San
Diego, CA, February 2008.
[23] Z. Lin and X. Zhang, “Deriving input syntactic structure from execution,” in
Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations
of Sotware Engineering (FSE’08), Atlanta, GA, USA, November 2008.
[24] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically veting android
apps for component hijacking vulnerabilities,” in Proceedings of the 2012 ACM
conference on Computer and communications security. ACM, 2012, pp. 229–240.
J. Ma, K. Levchenko, C. Kreibich, S. Savage, and G. M. Voelker, “Unexpected
means of protocol inference,” in Proceedings of the 6th ACM SIGCOMM on
Internet measurement (IMC’06). Rio de Janeriro, Brazil: ACM Press, 2006, pp.
313–326.
[26] A. Machiry, R. Tahiliani, and M. Naik, “Dynodroid: An input generation system
for android apps,” in Proceedings of the 2013 9th Joint Meeting on Foundations of
Sotware Engineering. ACM, 2013, pp. 224–234.
[27] A. Memon, I. Banerjee, and A. Nagarajan, “Gui ripping: Reverse engineering
of graphical user interfaces for testing,” in Proceedings of the 10th Working
Conference on Reverse Engineering, ser. WCRE ’03. Washington, DC, USA: IEEE
Computer Society, 2003, pp. 260–.
[28] P. Milani Compareti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex:
Protocol Speciication Extraction,” in IEEE Symposium on Security & Privacy,
Oakland, CA, 2009, pp. 110–125.
[29] N. Mirzaei, S. Malek, C. S. Păsăreanu, N. Esfahani, and R. Mahmood, “Testing
android apps through symbolic execution,” ACM SIGSOFT Sotware Engineering
Notes, vol. 37, no. 6, pp. 1–5, 2012.
[30] S. B. Needleman and C. D. Wunsch, “A general method applicable to the search
for similarities in the amino acid sequence of two proteins,” Journal of molecular
biology, vol. 48, no. 3, pp. 443–453, 1970.
[31] B. Nguyen, B. Robbins, I. Banerjee, and A. Memon, “Guitar: an innovative tool
for automated testing of gui-driven sotware,” Automated Sotware Engineering,
[32] E. I. Organick, he multics system: an examination of its structure. MIT press,
[33] G. Pellegrino and D. Balzaroti, “Toward black-box detection of logic laws in
web applications.” in NDSS, 2014.
pp. 1–41, 2013.
1972.
[34] V. Rastogi, Y. Chen, and W. Enck, “AppsPlayground: Automatic Security
Analysis of Smartphone Applications,” in hird ACM Conference on Data and
Application Security and Privacy, 2013.
[35] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “Smv-hunter:
Large scale, automated detection of ssl/tls man-in-the-middle vulnerabilities in
android apps,” in Proceedings of the 21st Annual Network and Distributed System
Security Symposium (NDSS’14), San Diego, CA, February 2014.
[36] S.-T. Sun and K. Beznosov, “he devil is in the (implementation) details: an
empirical analysis of oauth sso systems,” in Proceedings of the 2012 ACM
conference on Computer and communications security. ACM, 2012, pp. 378–390.
[37] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna, “Cross site
scripting prevention with dynamic data tainting and static analysis.” in NDSS,
vol. 2007, 2007, p. 12.
[38] R. Wang, S. Chen, and X. Wang, “Signing me onto your accounts through
facebook and google: A traic-guided security study of commercially deployed
single-sign-on web services,” in Security and Privacy (SP), 2012 IEEE Symposium
on.
IEEE, 2012, pp. 365–379.
[39] R. Wang, S. Chen, X. Wang, and S. Qadeer, “How to shop for free online–security
analysis of cashier-as-a-service based web stores,” in Security and Privacy (SP),
2011 IEEE Symposium on.
IEEE, 2011, pp. 465–480.
[40] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich, “Explicating
sdks: Uncovering assumptions underlying secure authentication and authoriza-
tion.” in USENIX Security, vol. 13, 2013.
[41] G. Wondracek, P. Milani, C. Kruegel, and E. Kirda, “Automatic network protocol
analysis,” in Proceedings of the 15th Annual Network and Distributed System
Security Symposium (NDSS’08), San Diego, CA, February 2008.
[42] M. Y. Wong and D. Lie, “Intellidroid: A targeted input generator for the dynamic
analysis of android malware,” in Proceedings of the 21st Annual Network and
Distributed System Security Symposium (NDSS’16), San Diego, CA, February
2016.
[43] L. Xing, Y. Chen, X. Wang, and S. Chen, “Integuard: Toward automatic
protection of third-party web service integrations.” in NDSS, 2013.
[44] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang, “Upgrading your android,
elevating my malware: Privilege escalation through mobile os updating,” in
Proceedings of the 2014 IEEE Symposium on Security and Privacy, ser. SP ’14.
Washington, DC, USA: IEEE Computer Society, 2014, pp. 393–408.
[45] Y. Zhou and D. Evans, “Ssoscan: Automated testing of web applications for
single sign-on vulnerabilities.” in USENIX Security, 2014, pp. 495–510.
[46] C. Zuo and Z. Lin, “Exposing server urls of mobile apps with selective symbolic
execution,” in Proceedings of the 26th World Wide Web Conference, Perth, Aus-
tralia, April 2017.
[47] C. Zuo, W. Wang, R. Wang, and Z. Lin, “Automatic forgery of cryptographically
consistent messages to identify security vulnerabilities in mobile services,”
in Proceedings of the 21st Annual Network and Distributed System Security
Symposium (NDSS’16), San Diego, CA, February 2016.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA813