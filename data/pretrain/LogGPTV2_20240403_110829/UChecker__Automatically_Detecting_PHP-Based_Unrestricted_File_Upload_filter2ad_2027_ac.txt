(Binary Operation)
(Array Access)
(Func Deﬁne)
(Func Call)
(STATEMENTS)
(Sequence)
(Assignment)
(Conditional)
(Return)
TABLE I: Core PHP Syntax Interpreted by UChecker
if
between v and l into the M ap of Env (i.e., M ap = M ap ∪
(v,l)).
ER(G,Env,l) where l is the label of an object denoted as
o = (x, t,l) (ER stands for “Extend_Reachability”). If cur ==
null, we will assign l to cur and add o to G (i.e., cur = l
and Add_FU NC _Ob j (G,l) or Add_OP_Ob j ect(G,l)). Oth-
l == null, this function simply returns cur .
erwise,
If cur = (y,d,r ) (i.e., not null), we will create a new
object u = Cr eate_OP_Ob j (AND,Boolean) (i.e., the created
object is (AND,boolean,u)). We then create two edges in-
cluding e1 = (u,l) and e2 = (u,r ) to represent the depen-
dency between the AND operator (i.e., u) and its operands
(i.e.,
l and r ). We next add p and these two edges
into G (i.e., Add_OP_Ob j ect(G,u), Add_Ed g e(G,e1), and
Add_Ed g e(G,e2)). Finally, we update cur = u so it points
to the new AND operator node. This function will return the
updated Env.
3) AST-based Interpretation
We next design an interpreter to generate the heap
graph (i.e., G) and a set of environments ((i.e., E =
{Env1,...,Env i ,...,Env n})) by traversing ASTs using op-
erations deﬁned for heap graph and environments. Our
interpreter processes the root node (i.e., a ﬁle or a function)
identiﬁed by the locality analysis. It explores all paths
towards the execution of a ﬁle upload built-in function (i.e.,
move_uploaded_file() or file_put_content()).
recursively evaluates each node in the
UChecker
AST, where
the
evaluation function is denoted as
eval(node, G, E ). node refers to an AST node, representing
either an expression (e.g., constant, variable, binary oper-
ation, and etc) or a statement (e.g., sequence, assignment,
conditional, and etc.); G is the heap graph; E is a set of
environments.
UChecker starts with the initialization of G and E . For
heap graph G, FU NC is initialized with built-in functions of
PHP languages or speciﬁc platforms (such as WordPress);
T contains primitive data types and the array data type.
Other sets of G, including OP, L, OC , OS, OFU NC , OOP , and
Ed g e are all assigned as Ø. E is initialized with one path
E = {Env}. For Env, both V ar and M ap are initialized as
Ø; cur = null (i.e., the reachability constraint is empty).
UChecker processes core PHP syntax. We use syn-
tax presented in Table I to illustrate the design of the
eval(node, G, E ) function. Without the loss of generality,
we consider E has n paths upon evaluating an AST node,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
(cid:1)(cid:2)(cid:3)
(cid:31)(cid:15)(cid:23)(cid:11)(cid:13)(cid:14)(cid:10)
(cid:31)(cid:16)(cid:7)(cid:15)(cid:10)
(cid:31)(cid:19)(cid:16)(cid:9)
(cid:2)(cid:4)(cid:3)(cid:6) (cid:1)(cid:7)(cid:3)(cid:6)(cid:5)
(cid:28)(cid:28)(cid:7)(cid:19)(cid:19)(cid:7)(cid:23)(cid:27)(cid:7)(cid:8)(cid:8)(cid:10)(cid:20)(cid:20)(cid:20)(cid:20)(cid:24)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:24)(cid:1)(cid:38)(cid:29)
(cid:28)(cid:28)(cid:7)(cid:19)(cid:19)(cid:7)(cid:23)(cid:27)(cid:7)(cid:8)(cid:8)(cid:10)(cid:20)(cid:20)(cid:20)(cid:20)(cid:24)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:24)(cid:1)(cid:36)(cid:29)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:28)(cid:25)(cid:16)(cid:7)(cid:15)(cid:10)(cid:26)(cid:24)(cid:1)(cid:20)(cid:21)(cid:19)(cid:13)(cid:16)(cid:12)(cid:24)(cid:1)(cid:37)(cid:29)
(cid:28)(cid:25)(cid:28)(cid:25)(cid:22)(cid:18)(cid:14)(cid:17)(cid:7)(cid:9)(cid:27)(cid:11)(cid:13)(cid:14)(cid:10)(cid:14)(cid:10)(cid:26)(cid:24)(cid:1)(cid:26)(cid:24) (cid:20)(cid:21)(cid:19)(cid:13)(cid:16)(cid:12)(cid:24)(cid:1)(cid:35)(cid:29)
(cid:28)(cid:31)(cid:27)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:24)(cid:1)(cid:6)(cid:24)(cid:1)(cid:7)(cid:19)(cid:19)(cid:7)(cid:23)(cid:24)(cid:1)(cid:34)(cid:29)
(cid:28)(cid:28)(cid:7)(cid:19)(cid:19)(cid:7)(cid:23)(cid:27)(cid:7)(cid:8)(cid:8)(cid:10)(cid:20)(cid:20)(cid:20)(cid:20)(cid:24)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:24)(cid:1)(cid:41)(cid:29)
(cid:28)(cid:28)(cid:20)(cid:28)(cid:20)(cid:31)(cid:21)(cid:10)(cid:20)(cid:21)(cid:10)(cid:20)(cid:21)(cid:24)(cid:1)(cid:7)(cid:19)(cid:19)(cid:7)(cid:23)(cid:24)(cid:1)(cid:39)(cid:29)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:28)(cid:25)(cid:34)(cid:35)(cid:36)(cid:26)(cid:24)(cid:1)(cid:20)(cid:21)(cid:19)(cid:13)(cid:16)(cid:12)(cid:24)(cid:1)(cid:40)(cid:29)
Fig. 5: The heap graph for array access statements in Listing 3
li
in E to retrieve the label
li = Get_M ap(Envi , x)). If
which is denoted as E = {Env1,...,Env i ,...,Env n}. If node
is an expression or a return statement, eval() will return
a vector of labels, denoted as , where li is
for the i th environment. For statements other than return,
eval() modiﬁes G and E but does not return anything. For
brevity, we describe the evaluation for a few challenging
expressions and statements including “Variable”, “Binary
Operation”, “Assignment”, and “Conditional”.
eval(x, G, E ): When UChecker sees a variable x, it queries
li of the object
each Envi
(cid:6)=
associated with x (i.e.,
null, li will be returned for Envi . Otherwise, a symbol
object (s,⊥,li ) will be created and added into G (i.e.,
li = Cr eate_Symbol_Ob j (s,⊥) and Add_Symbol_Ob j (li ));
an association between x and this symbol object, (x,li ), will
then be created and inserted into the M ap of Envi (i.e.,
Add_M ap(Envi ,(x,li ))). Finally, UChecker returns a vector
of labels denoted as , wherel i is for Envi .
eval(e1 op e2, G, E ): UChecker evaluates e1 and e2 using
G and E . We denote = eval(e1,G, E ) and
= eval(e2,G, E ). Then for each path (i.e.,
Envi ), UChecker creates a new operator object using ki =
Cr eate_OP_Ob j (op, t), where t represents the type of the
operation result. Two directed edges including ei ,l = (ki ,li )
and ei ,r = (ki ,ri ) will be added into G (i.e., Add_Ed g e(ei ,l )
and Add_Ed g e(ei ,r )). UChecker preserves the order of these
two edges for ki so that it can differentiate between the
“left” and “right” operand. Finally, UChecker returns a vector
of labels for newly created operator objects, denoted as , where ki is for the i th environment Envi .
eval(x[e], G, E ): UChecker
ﬁrst evaluates x to retrieve
the label li of the object associated with each path (i.e.,
li = Get_M ap(Envi , x) for the i th path). If li (cid:6)= null, li
will be returned for Envi . Otherwise, if x is a superglobal
variable, a symbol object with a speciﬁc name will be
created and added into G. For example,
if x refers to
$_FILES, a symbolic object ($_F I LES, ar r ay,li ) will be cre-
ated and added into G. Otherwise, li == null and x is not
a superglobal variable, a symbolic object with a randomly-
generated name, i.e., (s,⊥,li ), will be created and added into
G. Next, UChecker will evaluate e for n paths in E , getting a
vector of labels denoted as = eval(e,G, E ),
where ri is the label of the returned object for the i th path
(i.e., Envi ).
UChecker will then create a special operation node,
an array access operation denoted as ar r ay_access, for
each path (i.e., ki = Cr eate_OP_Ob j (ar r ay_access,⊥)).
The type is unknown (i.e., ⊥) since it depends on the type
586
of elements in this array. Two directed edges including
ei ,l = (ki ,li ) ande i ,r = (ki ,ri ) will be added into G (i.e.,
Add_Ed g e(ei ,l ) and Add_Ed g e(ei ,r )). Again, UChecker will
preserve the order of these two edges for ki so that it can
differentiate between the object of the array (i.e., “x”) and
that of the index (i.e., “e”). Finally, UChecker returns a vector
of labels for newly created ar r ay_access objects, denoted
as , where ki is for the i th environment
Envi .
1 $myfile = $_FILES [ ’ upload_file ’];
2 $name = $myfile [ ’ name ’];
3 $rnd = $test [ ’ 123 ’];
Listing 3: Array Access Statements
is
introduced to combine
(“upload_f i le", str i ng ,2)
(ar r r ay_access,⊥,3)
Figure 5 visualizes the heap graph and the environ-
ment for a PHP statement in Listing 3. $myfile refers
to $_FILES[’upload_file’], where $_FILES is recog-
nized as a superglobal variable. Therefore, UChecker cre-
ates an object with a special name of $_FILES,
re-
($_F I LES, ar r ay,1) as in Figure 5.
sulting the object
is created to in-
The object
dicate the index to access an array. Finally,
the ob-
ject
introduced to combine
($_F I LES, ar r ay,1) and (“upload_f i le", str i ng ,2), as the
name and index of an array, respectively. When $name =
$myfile[’name’] is evaluated, $myﬁle can be retrieved
(ar r r ay_access,⊥,5)
from the environment. Therefore,
(ar r r ay_access,⊥,3) and
is
(“name", str i ng ,4). When $rnd = $test[’123’] is eval-
uated, the variable $test cannot be found in the environ-
ment. $test is also not recognized as a superglobal variable.
Consequently, an object for the symbolic value with the
array type, (s$test , ar r ay,6), is introduced to represent the
array. The object for the index, (“123", str i ng ,7), is also
created. (ar r r ay_access,⊥,8) is ﬁnally created to combine
(s$test , ar r ay,6) and (“123", str i ng ,7) as array name and
index, respectively.
eval(x := e, G, E ): UChecker will ﬁrst evaluate e and
i.e., =
get a vector of returned labels,
eval(e,G, E ). Then for each Envi , UChecker will add an
into the M ap of Envi (i.e.,
association between x and li
Add_M ap(Envi ,(x,li ))).
eval(if e then S1 else S2, G, E ): UChecker will ﬁrst eval-
uate e using G and E for all paths, denoted as = eval(e,G, E ), where li
is for Envi . Then
we will make two copies of E , denoted as ET and EF where
ET = EF = E = {Env1,...,Env n}. UChecker then follows the
next three steps.
• We ﬁrst evaluate the “true” branch. For each path (e.g.,
Envi ) in ET , we extend its reachability constraint by
including this “true” branching condition representing
by li . Speciﬁcally, for each Envi in ET , UChecker calls
ER(G,Envi ,li ). Following this, UChecker will extend all
environments in ET with their corresponding ‘true”
branching conditions, resulting a set of new envi-
= {ER(Env1,l1),...,ER(Envn,ln)}.
ronments named E (cid:7)
Then, UChecker will recursively call eval(S1,G, E (cid:7)
T )
and result in a set of new environments denoted as
E (cid:7)(cid:7)
= {EnvT,1,...,Env T,u}, where u ≥ n.
T
T
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
structure is known a priori. Speciﬁcally, as discussed in
Section II, $_FILES is a pre-structured array that are indexed
by 5 keys including “name”, “type”, “tmp_name”, “error”,
and “size”, which represent the original ﬁle name, the type
information, the temporal ﬁlename, the error information,
and the size of the ﬁle. We therefore build an array with
the pre-deﬁned structure, keys, and symbolic values. In
addition, certain values also have pre-deﬁned structures.
For example, the value “name” refers to the concatenation
of the ﬁle name (say s f i lename) and the extension (say sext ),
where s f i lename and sext are their symbol values. Therefore,
the value of “name” can be represented as a structured
symbolic value denoted as (".", s f i lename, sext ), where “.” is
the concatenation operation.
Figure 6 presents how $_FILES, i.e., ($_F I LES, ar r ay,1)
in Figure 5, is extended to a pre-structured array. In this
case, it is possible to return a speciﬁc symbolic value for
accessing an element in a pre-structured array. Speciﬁcally,
$name, where $name = $myfile[’name’], can now directly
point to (".", s f i lename, sext ).
C. Vulnerability Modeling
Once our
interpreter encounters a sensitive ﬁle
writing operation (i.e., move_uploaded_file(esr c,ed st )
or file_put_content(ed st ,esr c )),
it will generate Z3
constraints to model conditions to exploit a vulnerability.
esr c and ed st
indicate the source and destination ﬁles,
respectively. We will use move_uploaded_file(esr c,ed st )
also applicable
to illustrate our design, which is
Speciﬁcally,
to
move_uploaded_file(esr c,ed st ) can be exploited when the
following three conditions are simultaneously satisﬁed for
at least one path. In other words, if no path can satisfy
all these three conditions, this program is free from this
vulnerability.
file_put_content($dst,
$src).
esr c) is tainted by $_FILES.
• Constraint-1: The content of the ﬁle to be created (i.e.,
• Constraint-2: The name of the ﬁle to be created (i.e.,
ed st ) has “php” or “php5” as the ﬁle extension, making
it executable. We use “php” in the following sections to
simplify the illustration.
• Constraint-3: move_uploaded_file(esr c,ed st ) is reach-
able (i.e., the reachability constraint of this path can
be satisﬁed).
In order to verify constraint-1, we can ﬁrst evaluate esr c
using G and E to obtain objects for all paths, denoted as
= eval(esr c,G, E ), where ls,i is the label
of the object for esr c of the i th path. Then esr c is tainted by
$_FILES (i.e., constraint-1 is satisﬁed) if there exists a path
in G from the objected referred by ls,i to $_FILES.
Constraint-2 and constraint-3 will be formally veriﬁed
using SMT. We evaluate ed st using G and E to obtain labels
for resulted objects, denoted as =
eval(ed st ,G, E ), where ld,i
is the label of the object for
ed st of the i th path. In addition, the reachability constraint
has already been represented by cur for each path Envi
(denoted as curi ). By traversing G starting from ld,i and
curi , we can generate 2 s-expressions for ed st and the
li ). Towards this end,
Fig. 6: An example of pre-structured array built for $_FILES
in Listing 3. s, st y pe , stmp , ser r or , ssi ze , spath sname , and
sext are symbolic values.
• We next evaluate the “false” branch. For each path
(e.g., Envi ) in EF , we extend its reachability con-
straint by including the negate of the “true” branch-
for each
ing condition (i.e.,
in EF , we ﬁrst create a “NOT” operator node
Envi
using ri = Cr eate_OP_Ob j (NOT,boolean) and add ri
into G using Add_OP_Ob j (G,ri ), where ri represents
the “false” condition. We also create an edge be-
tween ri and li , denoted as ei = (ri ,li ) and add it
into G using Add_Ed g e(G,ei ). Next, UChecker calls
ER(G,Envi ,ri ). Following this, UChecker will extend all
environments in EF with their corresponding ‘false”
branching conditions, resulting a set of new envi-
= {ER(Env1,r1),...,ER(Envn,rn)}.
ronments named E (cid:7)
Then, UChecker will recursively call eval(S2,G, E (cid:7)
F ) and
=
produce a set of new environments denoted as E (cid:7)(cid:7)
{EnvF,1,...,Env F,v }, where v ≥ n.
• After both branches are evaluated, UChecker will join
their resulted environment using E = E (cid:7)(cid:7)
It is worth noting that UChecker maintains the mapping
between the line number of each expression or statement,
which can be derived from AST, and nodes that are created
due to the evaluation of this expression or statement.
∪ E (cid:7)(cid:7)
T
F