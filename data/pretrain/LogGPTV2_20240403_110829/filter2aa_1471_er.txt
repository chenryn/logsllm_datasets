### iSCSI-Connected Disks and Booting

iSCSI-connected disks function like any other disk drive, both for the boot loader and the operating system, provided that the Microsoft iSCSI Initiator is used to provide access over an Ethernet connection. By using iSCSI-enabled disks instead of local storage, companies can save on space, power consumption, and cooling.

Traditionally, Windows has supported booting only from locally connected disks or through network booting via PXE. However, modern versions of Windows can natively boot from iSCSI devices using a mechanism called iSCSI Boot. As shown in Figure 12-9, the boot loader (Winload.efi) checks if the system supports iSCSI boot devices by reading the iSCSI Boot Firmware Table (iBFT) in physical memory, typically exposed through ACPI. The iBFT provides the location, path, and authentication information for the remote disk. If the iBFT is present, Winload loads the network interface driver provided by the manufacturer, which is marked with the CM_SERVICE_NETWORK_BOOT_LOAD (0x1) boot flag.

**Figure 12-9: iSCSI Boot Architecture**

Additionally, Windows Setup can read the iBFT to determine bootable iSCSI devices, allowing direct installation on such a device without the need for imaging. Combined with the Microsoft iSCSI Initiator, this enables Windows to boot from iSCSI.

### Hypervisor Loader

The hypervisor loader (Hvloader.dll) is responsible for loading and starting the Hyper-V hypervisor and the Secure Kernel. It integrates deeply with the Windows Loader and has two main goals:

1. **Detect the hardware platform**: Load and start the appropriate version of the Windows Hypervisor (Hvix64.exe for Intel systems, Hvax64.exe for AMD systems, and Hvaa64.exe for ARM64 systems).
2. **Parse the Virtual Secure Mode (VSM) policy**: Load and start the Secure Kernel.

In Windows 8, the hypervisor loader was an external executable loaded by Winload on demand, primarily to load and start Hyper-V. With the introduction of VSM and Trusted Boot, the architecture was redesigned for better integration.

#### Hypervisor Setup Phases

1. **Phase 1 (Initiation in Winload)**:
   - **Platform Detection**: The HvLoader detects the target platform using CPUID instructions.
   - **Memory Map Copy**: Copies the UEFI physical memory map and discovers IOAPICs and IOMMUs.
   - **Hypervisor Image Loading**: Loads the correct hypervisor image and its dependencies into memory.
   - **Version Check**: Ensures the hypervisor version matches the expected one.
   - **Hypervisor Loader Block Allocation**: Allocates a data structure to pass system parameters between HvLoader and the hypervisor.
   - **Page Tables Construction**: Constructs the hypervisor page tables hierarchy, including the mapping of the hypervisor image and system physical pages below the first megabyte.

2. **Phase 2 (Final Stages of Winload)**:
   - **UEFI Services Discard**: Copies the physical address ranges of UEFI Runtime Services into the hypervisor loader block.
   - **Processor State Capture**: Captures the processor state, disables interrupts, debugger, and paging.
   - **Code Execution Transfer**: Transfers code execution to the below 1 MB physical page using `HvlpTransferToHypervisorViaTransitionSpace`.

After the hypervisor starts, it uses the saved processor context to resume code execution in the context of a new virtual machine, called the root partition.

### Virtual Secure Mode (VSM) Launch

The launch of VSM is divided into three phases:

1. **Phase 1 (Data Preparation)**:
   - Copies data from the Windows loader block to the VSM loader block.
   - Generates master key, IDK key, and Crashdump key.
   - Loads the SecureKernel.exe module into memory.

2. **Phase 2 (Initialization by Winload)**:
   - Copies UEFI runtime services physical address ranges, ACPI tables, code integrity data, and the complete system physical memory map into the VSM loader block.
   - Constructs the protected page tables hierarchy for the protected VTL1 memory space.
   - Builds the needed GDT.

3. **Phase 3 (Final Launch)**:
   - Performs final checks (e.g., IOMMU presence, VSM privileges for the root partition).
   - Sets up the encrypted hypervisor crash dump area.
   - Copies VSM encryption keys and transfers execution to the Secure Kernel entry point (SkiSystemStartup).

### VSM Startup Policy

At startup, the Windows loader determines whether to launch VSM. To prevent malware from disabling this protection, the system uses a specific policy to seal the VSM startup settings. In the default configuration, at the first boot after Windows Setup, the Windows Loader reads and seals the VSM configuration stored in the VSM root registry key `HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard`.

VSM can be enabled by various sources:
- **Device Guard Scenarios**: Each scenario is stored as a subkey in the VSM root key, controlled by the `Enabled` DWORD registry value.
- **Global Settings**: Stored in the `EnableVirtualizationBasedSecurity` registry value.
- **HVCI Code Integrity Policies**: Stored in the code integrity policy file (Policy.p7b).

By default, VSM is automatically enabled when the hypervisor is enabled, unless the `HyperVVirtualizationBasedSecurityOptOut` registry value exists.

Each VSM activation source specifies a locking policy. If the locking mode is enabled, the Windows loader builds a Secure Boot variable called `VbsPolicy`, storing the VSM activation mode and platform configuration. This variable is read at every subsequent boot, overriding any changes in the Windows registry.

### Experiment: Understanding the VSM Policy

In this experiment, you will examine how the Secure Kernel startup is resistant to external tampering. Follow these steps:

1. **Enable VBS**: Enable Virtualization Based Security (VBS) in a compatible edition of Windows (Pro and Business editions work well). Verify VBS is enabled using Task Manager (look for the "Secure System" process on the Details tab).
2. **Check UEFI Lock**: Ensure Secure Boot is enabled and the UEFI lock is set. Use the Local Group Policy Editor (`gpedit.msc`) to navigate to `Computer Configuration > Administrative Templates > System > Device Guard > Turn On Virtualization Based Security`.
3. **Disable VBS**: Disable VBS through the Group Policy Editor and delete all related registry keys and values in `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard`.
4. **Disable Hypervisor**: Run `bcdedit /set {current} hypervisorlaunchtype off` from an elevated command prompt.
5. **Restart and Verify**: Restart the system and check Task Manager. Despite the changes, the Secure System and LsaIso processes should still be present, indicating the UEFI secure variable `VbsPolicy` is still active.
6. **Examine VbsPolicy Variable**: Use the Efi Shell to examine the `VbsPolicy` variable content. Copy the Efi Shell to a FAT32 USB stick and run the following command in the Efi Shell:
   ```sh
   dmpstore VbsPolicy -guid 77FA9ABD-0359-4D32-BD60-28F4E78F784B
   ```

### Secure Launch

If Trusted Execution is enabled and the system is compatible, Winload follows a different boot path called Secure Launch. This implements Intel Trusted Boot (TXT) technology or SKINIT on AMD64 machines. The goal is to start a secure boot sequence where the CPU is the only root of trust.

**Secure Launch on Intel Machines**:
- **Boot Library Initialization**: Detects Trusted Boot and registers a boot callback.
- **RAM Disk Creation**: Creates a RAM disk with Winload, the hypervisor, VSM module, and boot OS components.
- **TcbLaunch.exe Execution**: Reads TcbLaunch.exe into memory and triggers the boot callback.
- **TXT MLE Routine**: Replaces the boot application entry point with a TXT MLE routine.
- **GETSEC(SENTER) Instruction**: Measures TcbLaunch.exe and, if successful, transfers execution to the real boot application entry point (TcbMain).
- **TcbMain Function**: Reinitializes the Boot Library, registers events, and calls TcbLoadEntry from the Tcbloader.dll module.
- **Tcbloader.dll Module**: Loads, verifies, and starts the hypervisor, sets up the Hypercall page, and launches the Secure Kernel.

**Secure Launch on AMD Machines**:
- **SKINIT Instruction**: Reinitializes the processor and starts the execution of the secure loader (SL) in a tamper-proof manner.
- **SL Validation**: Validates the system state, extends measurements into the PCR, and transfers execution to the AMD MLE launch routine.
- **MLE Routine**: Initializes the IDT and GDT, builds the page table, and jumps back to TcbLaunch.
- **TcbLaunch**: Reinitializes the Boot Library, registers events, and calls TcbLoadEntry from the tcbloader.dll module.

### Initializing the Kernel and Executive Subsystems

When Winload calls Ntoskrnl, it passes a data structure called the Loader Parameter block. This block contains essential information such as system and boot partition paths, memory tables, hardware tree, SYSTEM registry hive, and a list of boot drivers.

**Experiment: Loader Parameter Block**
- **Attach Kernel Debugger**: Attach a kernel debugger before booting and break at the initial kernel debugger breakpoint.
- **Dump Loader Parameter Block**: Use the `dt` command to dump the block:
  ```sh
  kd> dt poi(nt!KeLoaderBlock) nt!LOADER_PARAMETER_BLOCK
  ```
- **Physical Memory Ranges**: Use the `!loadermemorylist` command to dump the physical memory ranges:
  ```sh
  kd> !loadermemorylist 0xfffff800`22949000
  ```

This detailed breakdown provides a comprehensive understanding of the boot process, VSM, and Secure Launch mechanisms in modern Windows systems.