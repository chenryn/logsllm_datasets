employs. Therefore, an iSCSI-connected disk appears as any other disk drive,
both to the boot loader and to the OS, as long as the Microsoft iSCSI Initiator
is used to provide access over an Ethernet connection. By using iSCSI-
enabled disks instead of local storage, companies can save on space, power
consumption, and cooling.
Although Windows has traditionally supported booting only from locally
connected disks or network booting through PXE, modern versions of
Windows are also capable of natively booting from iSCSI devices through a
mechanism called iSCSI Boot. As shown in Figure 12-9, the boot loader
(Winload.efi) detects whether the system supports iSCSI boot devices
reading the iSCSI Boot Firmware Table (iBFT) that must be present in
physical memory (typically exposed through ACPI). Thanks to the iBFT
table, Winload knows the location, path, and authentication information for
the remote disk. If the table is present, Winload opens and loads the network
interface driver provided by the manufacturer, which is marked with the
CM_SERVICE_NETWORK_BOOT_LOAD (0x1) boot flag.
Figure 12-9 iSCSI boot architecture.
Additionally, Windows Setup also has the capability of reading this table
to determine bootable iSCSI devices and allow direct installation on such a
device, such that no imaging is required. In combination with the Microsoft
iSCSI Initiator, this is all that’s required for Windows to boot from iSCSI.
The hypervisor loader
The hypervisor loader is the boot module (its file name is Hvloader.dll) used
to properly load and start the Hyper-V hypervisor and the Secure Kernel. For
a complete description of Hyper-V and the Secure Kernal, refer to Chapter 9.
The hypervisor loader module is deeply integrated in the Windows Loader
and has two main goals:
■    Detect the hardware platform; load and start the proper version of the
Windows Hypervisor (Hvix64.exe for Intel Systems, Hvax64.exe for
AMD systems and Hvaa64.exe for ARM64 systems).
■    Parse the Virtual Secure Mode (VSM) policy; load and start the
Secure Kernel.
In Windows 8, this module was an external executable loaded by Winload
on demand. At that time the only duty of the hypervisor loader was to load
and start Hyper-V. With the introduction of the VSM and Trusted Boot, the
architecture has been redesigned for a better integration of each component.
As previously mentioned, the hypervisor setup has two different phases.
The first phase begins in Winload, just after the initialization of the NT
Loader Block. The HvLoader detects the target platform through some
CPUID instructions, copies the UEFI physical memory map, and discovers
the IOAPICs and IOMMUs. Then HvLoader loads the correct hypervisor
image (and all the dependencies, like the Debugger transport) in memory and
checks whether the hypervisor version information matches the one expected.
(This explains why the HvLoader couldn’t start a different version of Hyper-
V.) HvLoader at this stage allocates the hypervisor loader block, an
important data structure used for passing system parameters between
HvLoader and the hypervisor itself (similar to the Windows loader block).
The most important step of phase 1 is the construction of the hypervisor page
tables hierarchy. The just-born page tables include only the mapping of the
hypervisor image (and its dependencies) and the system physical pages
below the first megabyte. The latter are identity-mapped and are used by the
startup transitional code (this concept is explained later in this section).
The second phase is initiated in the final stages of Winload: the UEFI
firmware boot services have been discarded, so the HvLoader code copies the
physical address ranges of the UEFI Runtime Services into the hypervisor
loader block; captures the processor state; disables the interrupts, the
debugger, and paging; and calls
HvlpTransferToHypervisorViaTransitionSpace to transfer the code execution
to the below 1 MB physical page. The code located here (the transitional
code) can switch the page tables, re-enable paging, and move to the
hypervisor code (which actually creates the two different address spaces).
After the hypervisor starts, it uses the saved processor context to properly
yield back the code execution to Winload in the context of a new virtual
machine, called root partition (more details available in Chapter 9).
The launch of the virtual secure mode is divided in three different phases
because some steps are required to be done after the hypervisor has started.
1. 
The first phase is very similar to the first phase in the hypervisor
setup. Data is copied from the Windows loader block to the just-
allocated VSM loader block; the master key, IDK key, and
Crashdump key are generated; and the SecureKernel.exe module is
loaded into memory.
2. 
The second phase is initiated by Winload in the late stages of
OslPrepareTarget, where the hypervisor has been already initialized
but not launched. Similar to the second phase of the hypervisor setup,
the UEFI runtime services physical address ranges are copied into the
VSM loader block, along with ACPI tables, code integrity data, the
complete system physical memory map, and the hypercall code page.
Finally, the second phase constructs the protected page tables
hierarchy used for the protected VTL1 memory space (using the
OslpVsmBuildPageTables function) and builds the needed GDT.
3. 
The third phase is the final “launch” phase. The hypervisor has
already been launched. The third phase performs the final checks.
(Checks such as whether an IOMMU is present, and whether the root
partition has VSM privileges. The IOMMU is very important for
VSM. Refer to Chapter 9 for more information.) This phase also sets
the encrypted hypervisor crash dump area, copies the VSM
encryption keys, and transfers execution to the Secure Kernel entry
point (SkiSystemStartup). The Secure Kernel entry point code runs in
VTL 0. VTL 1 is started by the Secure Kernel code in later stages
through the HvCallEnablePartitionVtl hypercall. (Read Chapter 9 for
more details.)
VSM startup policy
At startup time, the Windows loader needs to determine whether it has to
launch the Virtual Secure Mode (VSM). To defeat all the malware attempts
to disable this new layer of protection, the system uses a specific policy to
seal the VSM startup settings. In the default configurations, at the first boot
(after the Windows Setup application has finished to copy the Windows
files), the Windows Loader uses the OslSetVsmPolicy routine to read and seal
the VSM configuration, which is stored in the VSM root registry key
HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard.
VSM can be enabled by different sources:
■    Device Guard Scenarios Each scenario is stored as a subkey in the
VSM root key. The Enabled DWORD registry value controls whether
a scenario is enabled. If one or more scenarios are active, the VSM is
enabled.
■    Global Settings Stored in the EnableVirtualizationBasedSecurity
registry value.
■    HVCI Code Integrity policies Stored in the code integrity policy file
(Policy.p7b).
Also, by default, VSM is automatically enabled when the hypervisor is
enabled (except if the HyperVVirtualizationBasedSecurityOptOut registry
value exists).
Every VSM activation source specifies a locking policy. If the locking
mode is enabled, the Windows loader builds a Secure Boot variable, called
VbsPolicy, and stores in it the VSM activation mode and the platform
configuration. Part of the VSM platform configuration is dynamically
generated based on the detected system hardware, whereas another part is
read from the RequirePlatformSecurityFeatures registry value stored in the
VSM root key. The Secure Boot variable is read at every subsequent boot;
the configuration stored in the variable always replaces the configuration
located in the Windows registry.
In this way, even if malware can modify the Windows Registry to disable
VSM, Windows will simply ignore the change and keep the user
environment secure. Malware won’t be able to modify the VSM Secure Boot
variable because, per Secure Boot specification, only a new variable signed
by a trusted digital signature can modify or delete the original one. Microsoft
provides a special signed tool that could disable the VSM protection. The
tool is a special EFI boot application, which sets another signed Secure Boot
variable called VbsPolicyDisabled. This variable is recognized at startup time
by the Windows Loader. If it exists, Winload deletes the VbsPolicy secure
variable and modifies the registry to disable VSM (modifying both the global
settings and each Scenario activation).
EXPERIMENT: Understanding the VSM policy
In this experiment, you examine how the Secure Kernel startup is
resistant to external tampering. First, enable Virtualization Based
Security (VBS) in a compatible edition of Windows (usually the
Pro and Business editions work well). On these SKUs, you can
quickly verify whether VBS is enabled using Task Manager; if
VBS is enabled, you should see a process named Secure System on
the Details tab. Even if it’s already enabled, check that the UEFI
lock is enabled. Type Edit Group policy (or gpedit.msc) in the
Start menu search box, and start the Local Policy Group Editor
snap-in. Navigate to Computer Configuration, Administrative
Templates, System, Device Guard, and double-click Turn On
Virtualization Based Security. Make sure that the policy is set to
Enabled and that the options are set as in the following figure:
Make sure that Secure Boot is enabled (you can use the System
Information utility or your system BIOS configuration tool to
confirm the Secure Boot activation), and restart the system. The
Enabled With UEFI Lock option provides antitampering even in an
Administrator context. After your system is restarted, disable VBS
through the same Group policy editor (make sure that all the
settings are disabled) and by deleting all the registry keys and
values located in
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control
\DeviceGuard (setting them to 0 produces the same effect). Use the
registry editor to properly delete all the values:
Disable the hypervisor by running bcdedit /set {current}
hypervisorlaunchtype off from an elevated command prompt.
Then restart your computer again. After the system is restarted,
even if VBS and hypervisor are expected to be turned off, you
should see that the Secure System and LsaIso process are still
present in the Task Manager. This is because the UEFI secure
variable VbsPolicy still contains the original policy, so a malicious
program or a user could not easily disable the additional layer of
protection. To properly confirm this, open the system event viewer
by typing eventvwr and navigate to Windows Logs, System. If you
scroll between the events, you should see the event that describes
the VBS activation type (the event has Kernel-Boot source).
VbsPolicy is a Boot Services–authenticated UEFI variable, so
this means it’s not visible after the OS switches to Runtime mode.
The UefiTool utility, used in the previous experiment, is not able to
show these kinds of variables. To properly examine the VBSpolicy
variable content, restart your computer again, disable Secure Boot,
and use the Efi Shell. The Efi Shell (found in this book’s
downloadable resources, or downloadable from
https://github.com/tianocore/edk2/tree/UDK2018/ShellBinPkg/Uefi
Shell/X64) must be copied into a FAT32 USB stick in a file named
bootx64.efi and located into the efi\boot path. At this point, you
will be able to boot from the USB stick, which will launch the Efi
Shell. Run the following command:
Click here to view code image
dmpstore VbsPolicy -guid 77FA9ABD-0359-4D32-BD60-
28F4E78F784B
(77FA9ABD-0359-4D32-BD60-28F4E78F784B is the GUID of the
Secure Boot private namespace.)
The Secure Launch
If Trusted Execution is enabled (through a specific feature value in the VSM
policy) and the system is compatible, Winload enables a new boot path that’s
a bit different compared to the normal one. This new boot path is called
Secure Launch. Secure Launch implements the Intel Trusted Boot (TXT)
technology (or SKINIT in AMD64 machines). Trusted Boot is implemented
in two components: boot library and the TcbLaunch.exe file. The Boot
library, at initialization time, detects that Trusted Boot is enabled and
registers a boot callback that intercepts different events: Boot application
starting, hash calculation, and Boot application ending. The Windows loader,
in the early stages, executes to the three stages of Secure Launch Setup (from
now on we call the Secure Launch setup the TCB setup) instead of loading
the hypervisor.
As previously discussed, the final goal of Secure Launch is to start a
secure boot sequence, where the CPU is the only root of trust. To do so, the
system needs to get rid of all the firmware dependencies. Windows achieves
this by creating a RAM disk formatted with the FAT file system, which
includes Winload, the hypervisor, the VSM module, and all the boot OS
components needed to start the system. The windows loader (Winload) reads
TcbLaunch.exe from the system boot disk into memory, using the
BlImgLoadBootApplication routine. The latter triggers the three events that
the TCB boot callback manages. The callback first prepares the Measured
Launch Environment (MLE) for launch, checking the ACM modules, ACPI
table, and mapping the required TXT regions; then it replaces the boot
application entry point with a special TXT MLE routine.
The Windows Loader, in the latest stages of the OslExecuteTransition
routine, doesn’t start the hypervisor launch sequence. Instead, it transfers the
execution to the TCB launch sequence, which is quite simple. The TCB boot
application is started with the same BlImgStartBootApplication routine
described in the previous paragraph. The modified boot application entry
point calls the TXT MLE launch routine, which executes the
GETSEC(SENTER) TXT instruction. This instruction measures the
TcbLaunch.exe executable in memory (TBOOT module) and if the
measurement succeeds, the MLE launch routine transfers the code execution
to the real boot application entry point (TcbMain).
TcbMain function is the first code executed in the Secure Launch
environment. The implementation is simple: reinitialize the Boot Library,
register an event to receive virtualization launch/resume notification, and call
TcbLoadEntry from the Tcbloader.dll module located in the secure RAM
disk. The Tcbloader.dll module is a mini version of the trusted Windows
loader. Its goal is to load, verify, and start the hypervisor; set up the
Hypercall page; and launch the Secure Kernel. The Secure Launch at this
stage ends because the hypervisor and Secure Kernel take care of the
verification of the NT kernel and other modules, providing the chain of trust.
Execution then returns to the Windows loader, which moves to the Windows
kernel through the standard OslArchTransferToKernel routine.
Figure 12-10 shows a scheme of Secure Launch and all its involved
components. The user can enable the Secure Launch by using the Local
Group policy editor (by tweaking the Turn On Virtualization Based Security
setting, which is under Computer Configuration, Administrative Templates,
System, Device Guard).
Figure 12-10 The Secure Launch scheme. Note that the hypervisor and
Secure Kernel start from the RAM disk.
 Note
The ACM modules of Trusted Boot are provided by Intel and are chipset-
dependent. Most of the TXT interface is memory mapped in physical
memory. This means that the Hv Loader can access even the SINIT
region, verify the SINIT ACM version, and update it if needed. Windows
achieves this by using a special compressed WIM file (called Tcbres.wim)
that contains all the known SINIT ACM modules for each chipset. If
needed, the MLE preparation phase opens the compressed file, extracts
the right binary module, and replaces the contents of the original SINIT
firmware in the TXT region. When the Secure Launch procedure is
invoked, the CPU loads the SINIT ACM into secure memory, verifies the
integrity of the digital signature, and compares the hash of its public key
with the one hardcoded into the chipset.
Secure Launch on AMD platforms
Although Secure Launch is supported on Intel machines thanks to TXT, the
Windows 10 Spring 2020 update also supports SKINIT, which is a similar
technology designed by AMD for the verifiable startup of trusted software,
starting with an initially untrusted operating mode.
SKINIT has the same goal as Intel TXT and is used for the Secure Launch
boot flow. It’s different from the latter, though: The base of SKINIT is a
small type of software called secure loader (SL), which in Windows is
implemented in the amdsl.bin binary included in the resource section of the
Amddrtm.dll library provided by AMD. The SKINIT instruction reinitializes
the processor to establish a secure execution environment and starts the
execution of the SL in a way that can’t be tampered with. The secure loader
lives in the Secure Loader Block, a 64-Kbyte structure that is transferred to
the TPM by the SKINIT instruction. The TPM measures the integrity of the
SL and transfers execution to its entry point.
The SL validates the system state, extends measurements into the PCR,
and transfers the execution to the AMD MLE launch routine, which is
located in a separate binary included in the TcbLaunch.exe module. The
MLE routine initializes the IDT and GDT and builds the page table for
switching the processor to long mode. (The MLE in AMD machines are
executed in 32-bit protected mode, with a goal of keeping the code in the
TCB as small as possible.) It finally jumps back in the TcbLaunch, which, as
for Intel systems, reinitializes the Boot Library, registers an event to receive
virtualization launch/resume notification, and calls TcbLoadEntry from the
tcbloader.dll module. From now on, the boot flow is identical to the Secure
Launch implementation for the Intel systems.
Initializing the kernel and executive subsystems
When Winload calls Ntoskrnl, it passes a data structure called the Loader
Parameter block. The Loader Parameter block contains the system and boot
partition paths, a pointer to the memory tables Winload generated to describe
the system physical memory, a physical hardware tree that is later used to
build the volatile HARDWARE registry hive, an in-memory copy of the
SYSTEM registry hive, and a pointer to the list of boot drivers Winload
loaded. It also includes various other information related to the boot
processing performed until this point.
EXPERIMENT: Loader Parameter block
While booting, the kernel keeps a pointer to the Loader Parameter
block in the KeLoaderBlock variable. The kernel discards the
parameter block after the first boot phase, so the only way to see
the contents of the structure is to attach a kernel debugger before
booting and break at the initial kernel debugger breakpoint. If
you’re able to do so, you can use the dt command to dump the
block, as shown:
Click here to view code image
kd> dt poi(nt!KeLoaderBlock) nt!LOADER_PARAMETER_BLOCK
   +0x000 OsMajorVersion   : 0xa
   +0x004 OsMinorVersion   : 0
   +0x008 Size             : 0x160
   +0x00c OsLoaderSecurityVersion : 1
   +0x010 LoadOrderListHead : _LIST_ENTRY [ 
0xfffff800`2278a230 - 0xfffff800`2288c150 ]
   +0x020 MemoryDescriptorListHead : _LIST_ENTRY [ 
0xfffff800`22949000 - 0xfffff800`22949de8 ]
   +0x030 BootDriverListHead : _LIST_ENTRY [ 
0xfffff800`22840f50 - 0xfffff800`2283f3e0 ]
   +0x040 EarlyLaunchListHead : _LIST_ENTRY [ 
0xfffff800`228427f0 - 0xfffff800`228427f0 ]
   +0x050 CoreDriverListHead : _LIST_ENTRY [ 
0xfffff800`228429a0 - 0xfffff800`228405a0 ]
   +0x060 CoreExtensionsDriverListHead : _LIST_ENTRY [ 
0xfffff800`2283ff20 - 0xfffff800`22843090 ]
   +0x070 TpmCoreDriverListHead : _LIST_ENTRY [ 
0xfffff800`22831ad0 - 0xfffff800`22831ad0 ]
   +0x080 KernelStack      : 0xfffff800`25f5e000
   +0x088 Prcb             : 0xfffff800`22acf180
   +0x090 Process          : 0xfffff800`23c819c0
   +0x098 Thread           : 0xfffff800`23c843c0
   +0x0a0 KernelStackSize  : 0x6000
   +0x0a4 RegistryLength   : 0xb80000
   +0x0a8 RegistryBase     : 0xfffff800`22b49000 Void
   +0x0b0 ConfigurationRoot : 0xfffff800`22783090 
_CONFIGURATION_COMPONENT_DATA
   +0x0b8 ArcBootDeviceName : 0xfffff800`22785290  
"multi(0)disk(0)rdisk(0)partition(4)"
   +0x0c0 ArcHalDeviceName : 0xfffff800`22785190  
"multi(0)disk(0)rdisk(0)partition(2)"
   +0x0c8 NtBootPathName   : 0xfffff800`22785250  
"\WINDOWS\"
   +0x0d0 NtHalPathName    : 0xfffff800`22782bd0  "\"
   +0x0d8 LoadOptions      : 0xfffff800`22772c80  
"KERNEL=NTKRNLMP.EXE  NOEXECUTE=OPTIN
                                 HYPERVISORLAUNCHTYPE=AUTO 
DEBUG ENCRYPTION_KEY=**** DEBUGPORT=NET
                                 HOST_IP=192.168.18.48  
HOST_PORT=50000  NOVGA"
   +0x0e0 NlsData          : 0xfffff800`2277a450 
_NLS_DATA_BLOCK
   +0x0e8 ArcDiskInformation : 0xfffff800`22785e30 
_ARC_DISK_INFORMATION
   +0x0f0 Extension        : 0xfffff800`2275cf90 
_LOADER_PARAMETER_EXTENSION
   +0x0f8 u                : 
   +0x108 FirmwareInformation : 
_FIRMWARE_INFORMATION_LOADER_BLOCK
   +0x148 OsBootstatPathName : (null)
   +0x150 ArcOSDataDeviceName : (null)
   +0x158 ArcWindowsSysPartName : (null)
Additionally, you can use the !loadermemorylist command on
the MemoryDescriptorListHead field to dump the physical memory
ranges:
Click here to view code image
kd> !loadermemorylist 0xfffff800`22949000
Base        Length      Type
0000000001  0000000005  (26) HALCachedMemory      ( 20 Kb )
0000000006  000000009a  ( 5) FirmwareTemporary    ( 616 Kb )
...
0000001304  0000000001  ( 7) OsloaderHeap         ( 4 Kb )