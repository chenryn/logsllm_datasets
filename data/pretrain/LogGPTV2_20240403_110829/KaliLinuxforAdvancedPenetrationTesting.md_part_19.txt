the vulnerabilities that can be exploited.
[ 235 ]
Reconnaissance and Exploitation of Web-based Applications
Vulnerability scanners
Scanning for vulnerabilities using automated tools can be problematic. Web
vulnerability scanners suffer the common shortcomings of all scanners (a scanner
can only detect the signature of a known vulnerability; they cannot determine if
the vulnerability can actually be exploited; there is a high incidence of false-positive
reports). Furthermore, web vulnerability scanners cannot identify complex errors in
business logic, and they do not accurately simulate the complex chained attacks used
by hackers.
In an effort to increase reliability, most penetration testers use multiple tools to scan
web services; when multiple tools report that a particular vulnerability may exist, this
consensus will direct the tester to areas that may require manually verify the findings.
Kali comes with an extensive number of vulnerability scanners for web services,
and provides a stable platform for installing new scanners and extending their
capabilities. This allows penetration testers to increase the effectiveness of testing by
selecting scanning tools that:
• Maximize the completeness (the total number of vulnerabilities that
are identified) and accuracy (the vulnerabilities that are real and not
false-positive results) of testing.
• Minimize the time required to obtain usable results.
• Minimize the negative impacts on the web services being tested. This can
include slowing down the system due to an increase of traffic throughput.
For example, one of the most common negative effects is a result of testing
forms that input data to a database and then e-mail an individual providing
an update of the change that has been made—uncontrolled testing of such
forms can result in more than 30,000 e-mails being sent!
There is significant complexity in choosing the most effective tool. In addition to the
factors already listed, some vulnerability scanners will also launch the appropriate
exploit and support the post-exploit activities. For our purposes, we will consider
all tools that scan for exploitable weaknesses to be "vulnerability scanners." Kali
provides access to several different vulnerability scanners, including the following:
• Scanners that extend the functionality of traditional vulnerability
scanners to include websites and associated services (Metasploit
Framework and Websploit)
[ 236 ]
Chapter 9
• Scanners that extend the functionality of non-traditional applications, such as
web browsers, to support web service vulnerability scanning (OWASP Mantra)
• Scanners that are specifically developed to support reconnaissance and
exploit detection in websites and web services (Arachnid, Nikto, Skipfish,
Vega, w3af, and so on)
Extending the functionality of traditional
vulnerability scanners
The best example of this type of vulnerability scanner is the wmap module that is
packaged with the Metasploit Framework of Rapid7. To use this module, you
must first ensure that the postgresql database service has been started; use the
following command:
root@kali:~# service postgresql start
Next, launch msfconsole from a command prompt and enter the load wmap
command. Like most of the framework applications, typing help or -h in the
command prompt will display the commands that are available for use.
To manage the target sites, use the wmap_sites command. The –a option will add
the target's IP address to the application's database. The –l option provides a list of
the available sites to target for testing, as shown in the following screenshot:
With the target selected, the tester is now able to run the wmap modules using the
following command:
msf> wmap_run –e
[ 237 ]
Reconnaissance and Exploitation of Web-based Applications
The execution of the previous command is shown in the following screenshot:
Executing this command may take some time to reach completion (it depends on the
number of pages in the website, as well as the site's structural complexity, as well as
how the selected modules operate to detect vulnerabilities).
The Metasploit Framework was not designed for the complexities of websites and
web services; this is visible in the limited amount of findings that result from using
this product versus using vulnerability scanners that were specifically designed for
websites and web services. Nevertheless, because it is always undergoing updates, it
is worth monitoring the changes in its scanning abilities.
The Websploit application also uses the wmap modules.
Extending the functionality of web browsers
Web browsers are designed to interact with web services. As a result, it is natural
that they are selected as vulnerability assessment and exploit tools.
The best example of this type of toolset is OWASP's Mantra—a collection of third-
party security utilities built on the Firefox web browser. OWASP's Mantra supports
Windows, Linux, and Macintosh test systems, and provides access to utilities that
support the following activities:
• Information gathering: These utilities provide passive reconnaissance,
reporting on the target's physical location, uncovering the underlying site
technologies, and searching and testing of the site's hyperlinks
[ 238 ]
Chapter 9
• Editors: A collection of utilities that edit, debug, and monitor HTML, CSS,
and JavaScript
• Proxy: Utilities that provide proxy management tools, including FoxyProxy,
a tool that facilitates switching back and forth among proxies
• Network utilities: These utilities provide clients for FTP and SSH
communications, and simplify DNS cache management
• Application auditing: These switch between various user agents, access to
web developer tools, control what gets sent as the HTTP referrer on a per-site
basis, find SQL injection and XSS vulnerabilities, allow testers to tamper with
the data, and access to the Websecurify tools
• Miscellaneous: Generate scripts, manage sessions and downloads, and
access encryption, decryption, and hashtag functions
The Mantra framework can be used to facilitate a semi-automated reconnaissance of
a website.
In the example shown in the following screenshot, the Mutillidae login page has
been opened in the Mantra browser. Using the drop-down menu (activated from the
blue logo in the upper-right corner), the SQL Inject Me application has been selected
from among the available tools, and is displayed in the left-hand panel.
[ 239 ]
Reconnaissance and Exploitation of Web-based Applications
Web-service-specific vulnerability scanners
Vulnerability scanners are automated tools that crawl an application to identify the
signatures of known vulnerabilities.
Kali comes with several different preinstalled vulnerability scanners; they can be
accessed by navigating to Kali Linux | Web Applications | Web Vulnerability
Scanners. Penetration testers will typically use two or three comprehensive scanners
against the same target to ensure valid results. Note that some of the vulnerability
scanners also include an attack functionality.
Vulnerability scanners are quite "noisy", and are usually detected by the victim.
However, scans frequently get ignored as part of regular background probing across
the Internet. In fact, some attackers have been known to launch large-scale scans
against a target to camouflage the real attack or to induce the defenders to disable
detection systems to reduce the influx of reports that they have to manage.
A quick survey of the most important vulnerability scanners include the following:
Application Description
Arachnid An open-source Ruby framework that analyzes HTTP responses
received during scanning to validate responses and eliminate
false-positives.
GoLismero It maps web applications and detects common vulnerabilities. The
results are saved in TXT, CVS, HTML, and RAW formats.
Nikto A Perl-based open-source scanner that allows IDS evasion and user
changes to scan modules; however, this "original" web scanner is
beginning to show its age, and is not as accurate as some of the more
modern scanners.
Skipfish This scanner completes a recursive crawl and dictionary-based crawl
to generate an interactive sitemap of the targeted website that is
annotated with the output from additional vulnerability scans.
Vega It is a GUI-based open-source vulnerability scanner. As it is written
in Java, it is a cross-platform (Linux, OS X, and Windows) and can be
customized by the user.
w3af This scanner provides both a graphical and command-line interface to
a comprehensive Python-testing platform. It maps a target website
and scans for vulnerabilities. This project is acquired by Rapid7, so
there will be a closer integration with the Metasploit Framework in
the future.
[ 240 ]
Chapter 9
Application Description
Wapiti It is a Python-based open source vulnerability scanner.
Webscarab This is OWASP's Java-based framework for analyzing HTTP and
HTTPS protocols. It can act as an intercepting proxy, a fuzzer, and a
simple vulnerability scanner.
Webshag This is a Python-based website crawler and scanner that can utilize
complex IDS evasion.
Websploit This is a framework for wired and wireless network attacks.
Most testers start testing a website by using Nikto, a simple scanner (particularly
with regards to reporting) that generally provides accurate but limited results; a
sample output of this scan is shown in the following screenshot:
The next step is to use more advanced scanners that scan a larger number of
vulnerabilities; in turn, they can take significantly longer to run to completion. It is
not uncommon for complex vulnerability scans (as determined by the number of pages
to be scanned as well as the site's complexity, which can include multiple pages that
permit user input such as search functions or forms that gather data from the user for a
back-end database) to take several days to be completed.
[ 241 ]
Reconnaissance and Exploitation of Web-based Applications
One of the most effective scanners based on the number of verified vulnerabilities
discovered is Subgraph's Vega. As shown in the following screenshot, it scans a target
and classifies the vulnerabilities as high, medium, low, or information. The tester is
able to click on the identified results to "drill down" to specific findings. The tester
can also modify the search modules, which are written in Java, to focus on particular
vulnerabilities or identify new vulnerabilities.
Another scanner worth using is the Web Application Attack and Audit Framework
(w3af), a Python-based open-source web application security scanner. It provides
preconfigured vulnerability scans in support of standards such as OWASP. The
breadth of the scanner's options comes at a price—it takes significantly longer than
other scanners to review a target, and it is prone to failure over long testing periods.
A w3af instance configured for a full audit of a sample website is shown in the
following screenshot:
[ 242 ]
Chapter 9
Kali also includes some application-specific vulnerability scanners. For example,
WPScan is used specifically against WordPress CMS applications.
Testing security with client-side proxies
Unlike automated vulnerability scanners, client-side proxies require extensive
human interaction in order to be effective. A client-side proxy intercepts HTTP and
HTTPS traffic, allowing a penetration tester to examine communications between the
user and the application. It allows the tester to copy the data or interact with requests
that are sent to the application.
Kali comes with several client-side proxies, including Burp Suite, OWASP ZAP,
Paros, ProxyStrike, the vulnerability scanner Vega, and WebScarab. After extensive
testing, we have come to rely on Burp Proxy, with ZAP as a back-up tool.
[ 243 ]
Reconnaissance and Exploitation of Web-based Applications
Burp is primarily used to intercept HTTP(S) traffic; however, it is part of a larger
suite of tools that has several additional functions, including:
• An application-aware spider that crawls the site
• A vulnerability scanner, including a sequencer to test the randomness of
session tokens, and a repeater to manipulate and resend requests between
the client and the website (the vulnerability scanner is not included with the
free version of Burp proxy that is packaged in Kali)
• An intruder tool that can be used to launch customized attacks (there are
speed limitations in the free version of the tool included with Kali; these are
removed if you purchase the commercial version of the software)
• The ability to edit existing plugins or write new ones in order to extend the
number and type of attacks that can be used
To use Burp, ensure that your web browser is configured to use a local proxy;
usually, you will have to adjust the network settings to specify that HTTP and
HTTPS traffic must use the localhost (127.0.0.1) at port 8080.
After setting up the browser and the proxy to work together, manually map the
application. This is accomplished by turning off the proxy interception and then
browsing the entire application. Follow every link, submit the forms, and log in to
as many areas of the site as possible. Additional content will be inferred from various
responses. The site map will populate an area under the Target tab (automated
crawling can also be used by right-clicking on the site and selecting Spider This
Host; however, the manual technique gives the tester the opportunity to become
deeply familiar with the target, and it may identify areas to be avoided).
Once the target is mapped, define the Target – Scope by selecting branches within
the site map and using the Add to Scope command. Once this is completed, you
can hide items that are not of interest on the site map using display filters. A site map
created of a target website is shown in the following screenshot:
[ 244 ]
Chapter 9
Once spidering has been completed, manually review the directory and file list for
any structures that do not appear to be part of the public website, or that appear
to be unintentionally disclosed. For example, directories titled admin, backup,
documentation, or notes should be manually reviewed.
Manual testing of the login page using a single quote as the input produced an error
code suggesting that it may be vulnerable to a SQL injection attack; a sample return
of the error code is shown in the following screenshot:
[ 245 ]
Reconnaissance and Exploitation of Web-based Applications
The real strength of a proxy is its ability to intercept and modify commands. For this
particular example, we'll use the Mutillidae website—a "broken" site that is installed
as part of the Metasploitable testing framework to perform an attack to bypass SQL
injection authentication.
To launch this attack, ensure that the Burp proxy is configured to intercept
communications by going to the Proxy tab and selecting the Intercept subtab.
Click on the Intercept is on button, as shown in the next screenshot. When this
is completed, open a browser window and access the Mutillidae logon page by
entering /mutillidae/index.php?page=login.php. Enter variables
in the name and password fields, and then click on the login button.
If you return to the Burp proxy, you will see that the information that the user
entered into the form on the webpage was intercepted.
[ 246 ]
Chapter 9
Click on the Action button and select the option Send to Intruder. Open the main
Intruder tab, and you will see four subtabs—Target, Positions, Payloads, and
Options, as shown in the following screenshot. If you select Positions, you will
see that five payload positions were identified from the intercepted information.
This attack will use the sniper mode of the Burp proxy, which takes a single input
from a list provided by the tester and sends this input to a single payload position
at a time. For this example, we will target the username field, which we suspect is
vulnerable based on the returned error message.
[ 247 ]
Reconnaissance and Exploitation of Web-based Applications
To define the payload position, we select the subtab Payloads.
To launch the attack, select Intruder from the top menu, and then select Start
Attack. The proxy will iterate the wordlist against the selected payload positions
as legitimate HTTP requests, and it will return the server's status codes. As you can
see in the following screenshot, most options produce a status code of 200 (request
succeeded); however, some of the data return a status code of 302 (request found;
indicates that the requested resource is presently located under a different URI).
[ 248 ]
Chapter 9
The 302 status indicates successful attacks, and the data obtained can be used to
successfully log on to the target site.
Unfortunately, this is too brief of an overview of Burp proxy and its capabilities.
The free version included with Kali will suffice for many testing tasks; however,
serious testers (and attackers) should consider purchasing the commercial version.
[ 249 ]
Reconnaissance and Exploitation of Web-based Applications
Server exploits
As they have an extensive "attack surface" (communication channels, client software,
server operating systems, applications, middleware, and backend databases), web
services are vulnerable to multiple attack types. The range of possible attacks would
require their own book; therefore, we will only show a couple of types to highlight
the capabilities of Kali.
For this example, we will demonstrate how Kali can be used to launch a
denial-of-service (DoS) attack against a network server.
In general, attacking the operating system of a host system that provides web
services follows the methodology previously described; however, their architecture
is particularly vulnerable to DoS attacks.
Kali includes several tools that are described as stress-testing applications because
they simulate high activity loads against a server in order to assess how well it
will cope with the additional stress. If the server or its applications fail, then it has
suffered a DoS.
Many of the tools rely on an IPv4 system's inability to handle the newer IPv6
protocol (denail6, dos-new-ip6, flood_advertise6, and so on).
However, the most successful DoS attack tool—Low Orbit Ion Cannon
(LOIC)—must be manually added to Kali using the following steps:
1. Using the apt-get install command, install the following packages and
their dependencies: mono-gmcs, mono-mcs, monodevelop, and liblog4net-
cil-dev.
2. Download the LOIC from GitHub (https://github.com/NewEraCracker/
LOIC/downloads) into a separate folder. Extract the compressed files into the
folder using the unzip command.
3. Navigate to the folder and compile the application using the
following command:
mdtool build
4. The compiled build of the application will be in the / bin/Debug/
LOIC.exe directory.
[ 250 ]
Chapter 9
Once the attack parameters have been entered, LOIC can be launched against the
target website. The attack is launched using the intuitive GUI interface, as shown in
the following screenshot:
Application-specific attacks
Application-specific attacks outnumber the attacks against specific operating
systems; when one considers the misconfigurations, vulnerabilities, and logic errors
that can affect each online application, it is surprising that any application can be
considered "secure." We will highlight some of the more important attacks against
web services.
Brute-forcing access credentials
One of the most common initial attacks against a website or its services is a
brute-force attack against the access authentication—guessing the username
and password. This attack has a high success rate because users tend to select
easy-to-remember credentials or reuse credentials, and also because system
administrators frequently don't control multiple access attempts.
[ 251 ]
Reconnaissance and Exploitation of Web-based Applications
Kali comes with hydra, a command-line tool, and hydra-gtk, which has a GUI
interface. Both tools allow a tester to brute force or iterate possible usernames
and passwords against a specified service. Multiple communication protocols are
supported, including FTP, FTPS, HTTP, HTTPS, ICQ, IRC, LDAP, MySQL, Oracle,
POP3, pcAnywhere, SNMP, SSH, VNC, and others. The following screenshot shows