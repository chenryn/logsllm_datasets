# Forensic Tea Party
* Category: Forensics, Reverse Engineering
* 400 Points
* Solved by the JCTF Team
## Description
> Analyze the memory dump to find any suspicious processes and find the flag.
A memory dump was attached.
## Solution
Let's start analyzing our memory dump using `volatility`. We start by extracting the process tree:
```console
┌──(user@kali)-[~/CTFs/intent/FTP]
└─$ alias vol="python3 ~/utils/forensics/volatility3/vol.py"
┌──(user@kali)-[~/CTFs/intent/FTP]
└─$ export memdump=/media/sf_CTFs/intent/Forensic_Tea_Party/Windows10x64_AliceInWonderland-b4365e16.vmem/Windows10x64_AliceInWonderland-b4365e16.vmem
┌──(user@kali)-[~/CTFs/intent/FTP]
└─$ vol -f $memdump windows.pstree
Volatility 3 Framework 2.4.1
Progress:  100.00               PDB scanning finished
PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime
4       0       System  0xa08ce048c440  123     -       N/A     False   2022-09-02 22:01:11.000000      N/A
* 280   4       smss.exe        0xa08ce1772040  3       -       N/A     False   2022-09-02 22:01:11.000000      N/A
** 476  280     smss.exe        0xa08ce1bb4580  0       -       1       False   2022-09-02 22:01:12.000000      2022-09-02 22:01:12.000000
*** 576 476     winlogon.exe    0xa08ce1ae6480  6       -       1       False   2022-09-02 22:01:12.000000      N/A
**** 760        576     fontdrvhost.ex  0xa08ce1a46080  5       -       1       False   2022-09-02 22:01:13.000000      N/A
**** 2460       576     userinit.exe    0xa08ce284b340  0       -       1       False   2022-09-02 22:01:15.000000      2022-09-02 22:01:37.000000
***** 2700      2460    explorer.exe    0xa08ce2853580  77      -       1       False   2022-09-02 22:01:15.000000      N/A
****** 3232     2700    MSASCuiL.exe    0xa08ce2db8580  4       -       1       False   2022-09-02 22:01:29.000000      N/A
****** 5912     2700    vmtoolsd.exe    0xa08ce304e080  8       -       1       False   2022-09-02 22:01:29.000000      N/A
****** 4484     2700    TeaParty.exe    0xa08ce26aa080  9       -       1       True    2022-09-02 22:26:18.000000      N/A
****** 6100     2700    OneDrive.exe    0xa08ce2eb1080  23      -       1       False   2022-09-02 22:01:31.000000      N/A
******* 6164    6100    Microsoft.Shar  0xa08ce30c1580  0       -       1       False   2022-09-02 22:01:32.000000      2022-09-02 22:01:43.000000
**** 960        576     dwm.exe 0xa08ce20d4080  11      -       1       False   2022-09-02 22:01:13.000000      N/A
*** 492 476     csrss.exe       0xa08ce1fbb080  12      -       1       False   2022-09-02 22:01:12.000000      N/A
* 1356  4       MemCompression  0xa08ce23e9280  18      -       N/A     False   2022-09-02 22:01:13.000000      N/A
```
We can see an interesting process labeled `TeaParty`, let's dump it:
```console
┌──(user@kali)-[~/CTFs/intent/FTP]
└─$ vol -f $memdump windows.pslist --pid 4484 --dump
Volatility 3 Framework 2.4.1
Progress:  100.00               PDB scanning finished
PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output
4484    2700    TeaParty.exe    0xa08ce26aa080  9       -       1       True    2022-09-02 22:26:18.000000      N/A     pid.4484.0x420000.dmp
┌──(user@kali)-[~/CTFs/intent/FTP]
└─$ file pid.4484.0x420000.dmp
pid.4484.0x420000.dmp: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows
```
It's a .NET executable, we can decompile it with dotPeek. 
  Full source code
  ```csharp
// Decompiled with JetBrains decompiler
// Type: TeaParty.TeaParty
// Assembly: TeaParty, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C5228E40-9DB9-4613-9B66-CF1FA1BC1DA7
// Assembly location: E:\CTFs\intent\FTP\pid.4484.0x420000.exe
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
namespace TeaParty
{
  public class TeaParty : Form
  {
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 256;
    private static TeaParty.TeaParty.HookProc hookProc = new TeaParty.TeaParty.HookProc(TeaParty.TeaParty.HookCallback);
    private static IntPtr hookId = IntPtr.Zero;
    private static int passcodeLength = 17;
    private static List buffers = new List();
    private const uint SERVICE_NO_CHANGE = 4294967295;
    private const uint SC_MANAGER_ALL_ACCESS = 983103;
    private const uint SERVICE_ALL_ACCESS = 983551;
    private IContainer components = (IContainer) null;
    private PictureBox pictureBox1;
    [DllImport("user32.dll")]
    private static extern IntPtr SetWindowsHookEx(
      int idHook,
      TeaParty.TeaParty.HookProc lpfn,
      IntPtr hMod,
      uint dwThreadId);
    [DllImport("user32.dll")]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);
    [DllImport("user32.dll")]
    private static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);
    [DllImport("kernel32.dll")]
    private static extern IntPtr GetModuleHandle(string lpModuleName);
    [DllImport("kernel32.dll")]
    private static extern bool DeviceIoControl(
      IntPtr hDevice,
      uint dwIoControlCode,
      IntPtr lpInBuffer,
      uint nInBufferSize,
      IntPtr lpOutBuffer,
      uint nOutBufferSize,
      out int lpBytesReturned,
      IntPtr lpOverlapped);
    [DllImport("kernel32.dll")]
    private static extern IntPtr CreateFileA(
      string lpFileName,
      uint dwDesiredAccess,
      uint dwSharedMode,
      IntPtr lpSecurityAttributes,
      uint dwCreationDisposition,
      uint dwFlagsAndAttributes,
      IntPtr hTemplate);
    [DllImport("kernel32.dll")]
    private static extern bool CloseHandle(IntPtr hHandle);
    [DllImport("kernel32.dll")]
    private static extern bool IsDebuggerPresent();
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr OpenSCManager(
      string lpMachineName,
      string lpDatabaseName,
      uint dwDesiredAccess);
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr OpenService(
      IntPtr hSCManager,
      string lpServiceName,
      uint dwDesiredAccess);
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CreateServiceW(
      IntPtr hSCManager,
      string lpServiceName,
      string lpDisplayName,
      uint dwDesiredAccess,
      uint dwServiceType,
      uint dwStartType,
      uint dwErrorControl,
      string lpBinaryPathName,
      string lpLoadOrderGroup,
      IntPtr lpdwTagId,
      string lpDependencies,
      string lpServiceStartName,
      string lpPassword);
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool QueryServiceConfig(
      IntPtr hService,
      IntPtr lpServiceConfig,
      uint cbBufSize,
      out uint pcbBytesNeeded);
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool ChangeServiceConfig(
      IntPtr hService,
      uint dwServiceType,
      uint dwStartType,
      uint dwErrorControl,
      string lpBinaryPathName,
      string lpLoadOrderGroup,
      IntPtr lpdwTagId,
      string lpDependencies,
      string lpServiceStartName,
      string lpPassword,
      string lpDisplayName);
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool CloseServiceHandle(IntPtr hSCObject);
    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool StartServiceW(
      IntPtr hService,
      uint dwNumServiceArgs,
      IntPtr lpServiceArgVectors);
    [DllImport("kernel32.dll")]
    private static extern uint GetLastError();
    private static string GetHash1()
    {
      IntPtr fileA = TeaParty.TeaParty.CreateFileA("\\\\.\\TeaParty", 1073741824U, 2U, IntPtr.Zero, 3U, 0U, IntPtr.Zero);
      IntPtr num = Marshal.AllocHGlobal(32);
      int lpBytesReturned = 0;
      TeaParty.TeaParty.DeviceIoControl(fileA, 2236424U, IntPtr.Zero, 0U, num, 32U, out lpBytesReturned, IntPtr.Zero);
      byte[] numArray = new byte[32];
      Marshal.Copy(num, numArray, 0, 32);
      Marshal.FreeHGlobal(num);
      TeaParty.TeaParty.CloseHandle(fileA);
      return Encoding.ASCII.GetString(numArray);
    }
    private static bool CheckDebugging() => Environment.ProcessorCount = 0 && wParam == (IntPtr) 256)
      {
        int num1 = Marshal.ReadInt32(lParam);
        for (int index = 0; index ()) == TeaParty.TeaParty.GetHash1() || TeaParty.TeaParty.CalculateMd5HexDigest(TeaParty.TeaParty.buffers.Last()) == TeaParty.TeaParty.GetHash2())