ED A0 BD 对应的⼆进制为 11101101 10100000 10111101 ，由于是三字节，因此去掉第
⼀字节的 1110 、第⼆字节的 10 ，第三字节的 10 ，剩下的是 1101100000111101 ，换算
成⼗六进制为： 0xD83D
同理， ED B8 82 经过相同的运算可以得到 0xDE02 ，采⽤代理对即表⽰
为： \ud83d\ude02
值得⼀提的是，我查阅资料的时候发现 Java序列化机制使⽤的也是 MUTF-8 编
码。 java.io.DataInput 和 java.io.DataOutput 接⼜分别定义了 readUTF() 和
writeUTF() ⽅法，可以⽤于读写 MUTF-8编码的字符串。
② CONSTANT_Integer_info：
表⽰ int 类型的常量。但是 boolean、byte、short 以及 char 类型的变量，在常量池中也会被当
成 Int 来处理。
③ CONSTANT_Float_info：
表⽰ float 类型的常量。
④ CONSTANT_Long_info：
表⽰ long 类型的常量
⑤ CONSTANT_Double_info：
表⽰ double 类型的常量
⑥ CONSTANT_Class_info：
表⽰类或者接⼜。
⑦ CONSTANT_String_info：
表⽰ java.lang.String 类型的常量对象，其与 CONSTANT_Utf8_info 的区别
是 CONSTANT_Utf8_info 存储了字符串真正的内容，⽽ CONSTANT_String_info 不包含字
符串的内容，仅仅包含⼀个常量池中 CONSTANT_Utf8_info 常量类型的索引。
⑧ CONSTANT_Fieldref_info：
指向 CONSTANT_Class_info 常量池索引值，表⽰⽅法所在的类信息。
⑨ CONSTANT_Methodref_info：
⽤来描述⼀个⽅法。
⑩ CONSTANT_InterfaceMethodref_info：
指向 CONSTANT_NameAndType_info 常量池索引值，表⽰⽅法的⽅法名、参数和返回类型。
⑪ CONSTANT_NameAndType_info：
表⽰字段或者⽅法。
⑫ CONSTANT_MethodHandle_info、CONSTANT_MethodType_info、
CONSTANT_InvokeDynamic_info：
CONSTANT_MethodHandle_info 表⽰⽅法句柄，⽐如获取⼀个类静态字段，实例字段，调
⽤⼀个⽅法，构造器等都会转化成⼀个句柄引⽤。
CONSTANT_MethodType_info 表⽰⼀个⽅法类型。
CONSTANT_InvokeDynamic_info 表⽰动态调⽤指令引⽤信息。
作者在书中提到，这三个是从 JDK1.7开始为了更好地⽀持动态语⾔调⽤⽽新增的常量池类
型，经过我的搜索也没发现有什么特别有⽤的信息，有的博主提到，这新增的三个常量池项
只会在极其特别的情况能⽤到它，在class⽂件中⼏乎不会⽣成；也有博主详细介绍了该类型
的结构及值，可以参考：https://juejin.cn/post/6844903950777319432#heading-17
作者在书中主要提到了 CONSTANT_InvokeDynamic_info ，该类型主要作⽤是为
invokedynamic 指令提供启动引导⽅法。结构如下：
第⼀部分 tag 为固定值 18；第⼆部分 bootstrap_method_attr_index 是指向引导⽅法
表 bootstrap_method[] 数组的索引；第三部分 name_and_type_index 为指向索引类常
量池⾥的 CONSTANT_NameAndType_info d的索引，表⽰⽅法描述符。
CONSTANT_InvokeDynmic_info{
  u1 tag;
  u2 bootstrap_method_attr_index;
  u2 name_and_type_index;
}
标志名
标志值
标志含义
针对的对像
ACC_PUBLIC
0x0001
public类型
所有类型
ACC_FINAL
0x0010
final类型
类
ACC_SUPER
0x0020
使⽤新的invokespecial语义
类和接⼜
ACC_INTERFACE
0x0200
接⼜类型
接⼜
ACC_ABSTRACT
0x0400
抽象类型
类和接⼜
ACC_SYNTHETIC
0x1000
该类不由⽤户代码⽣成
所有类型
ACC_ANNOTATION
0x2000
注解类型
注解
ACC_ENUM
0x4000
枚举类型
枚举
可以看实际例⼦来了解这个，参考：https://blog.csdn.net/zxhoo/article/details/38387141
4、访问标记（access flag）  
访问标记主要⽤来标识⼀个类为 final、abstract、public 等。其由两个字节表⽰，16 个标记为
可供使⽤，⽬前使⽤了其中 8 个标识位，如下图所⽰。
完整的访问标记含义如下表：
值得注意的是，类访问标记是可以组合的，如⼀个类的访问标记
为 0x0021(ACC_SUPER|ACC_PUBLIC) ，表⽰的是⼀个 public 类。但组合也是有条件的，像
ACC_PUBLIC 就不能和 ACC_PRIVATE 同时设置， ACC_FINAL 和 ACC_ABSTRACT 也不能同时
设置，否则就违背了 java 的基本语义。
这⽅⾯的源码可以在 javac 源码中的 com.sun.tools.javac.comp.Check.java 中找到。
5、类索引（this class）&& 超类索引（super class）&& 接⼜表索引
（interface）
这三部分是⽤来确定类继承关系的⽂件结构，其中 this class 表⽰类索引， super
class 表⽰直接⽗类的索引， interfaces ⽤来描述这个类实现了哪些接⼜。通常这三部分
都是指向常量池的索引，各⾃代表不同的表⽰，如类、接⼜、超类等
6、字段表（field）  
字段表（ field ）⽤于存储类中定义的字段，包括静态和⾮静态类。 其结构伪代码表⽰如
下：
在上述的结构中， fields_count  ⽤于表⽰ field  的数量， fields  表⽰字段集合，共
有 fileds_count  个，每⼀个字段⽤ field_info 结构表⽰。所以就来看看 filed_info
的结构：
{
  u2      fields_count;
  field_info    fields[fileds_count];
}
filed_info{
    u2      access_flags;
    u2      name_index;
    u2      descriptor_index;
    u2      attributes_count;
    attribute_info    attributes[attributes_count];
}
标志名
标志值
标志含义
ACC_PUBLIC
0x0001
public类型
ACC_PRIVATE
0x0002
private 类型
ACC_PROTECTED
0x0004
protected 类型
ACC_STATIC
0x0008
static 类型
ACC_FINAL
0x0010
final类型
ACC_VOLATILE
0x0040
volatile 类型，⽤于解决内存可见性问题
ACC_TRANSIENT
0x0080
transient 类型，被其修饰的字段默认不会序列化
ACC_SYNTHETIC
0x1000
该类由编译器⾃动⽣成，不由⽤户代码⽣成
ACC_ENUM
0x4000
枚举类型
如上，可以看到 filed_info  的结构分为四个部分，第⼀部分是 access_flags ，表⽰字
段的访问标记，如可以⽤该字段去区别某⼀个字段是否
是 public 、 private 、 protected 、 static 等类型；第⼆部分是 name_index ⽤来表
⽰字段名，指向常量池中的字符串常量；第三部分 descriptor_index 表⽰字段描述符的索
引，同样指向常量池中的字符串常量；最后⼀部分由 attributes_count 和
attribute_info 组成，分别表⽰属性的个数和属性的集合。
第⼀部分的访问标记和类⼀样，不过与类那块的内容相⽐，字段的访问标记更加丰富，共有
九种
⽐如在类中定义了字段
编译后 DEFAULT_SIZE 字段在雷⽂杰中存储的访问标记值为 0x0019
这个值是由 ACC_PUBLIC | ACC_STATIC | ACC_FINAL 组成，表明其是⼀个 public static
final 类型的变量。
public static final int DEFAULT_SIZE = 128
⼀个字段在内存中默认如下：
则 public static final 类型为：
所以 ⼆进制的 0001 1001 转换为 ⼗六进制为 0x0019 ，也正是该标记值的由来
和类访问标记⼀样，字段的标记也不是随意组合的，⽐如 ACC_FINAL 和