    image: '{{ .Values.image.repository }}:{{ .Chart.AppVersion }}'
    ```
2.  `required`函数采用以下两个参数:
    *   显示是否提供值的错误消息必须提供的值
给定这两个参数，修改`deployment.yaml`文件，以便需要`image.repository`值。
要添加此验证，您可以从以下 [ng 代码片段中复制或参考 Packt 存储库:](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/deployment.yaml)
![](img/Figure_5.14.jpg)
图 5.14:使用第 28 行所需函数的 deployment.yaml 片段
1.  尝试通过提供空的`image.repository`值来升级您的`my-guestbook`版本，如下所示:
    ```
    $ helm upgrade my-guestbook . -n chapter5 --set image.repository=''
    ```
如果您的更改成功，您应该会看到类似以下内容的错误消息:
```
Error: UPGRADE FAILED: execution error at (guestbook/templates/deployment.yaml:28:21): value 'image.repository' is required
```
至此，您已经成功编写了第一个 Helm 图表，完成了生命周期挂钩和输入验证！
在下一节中，您将学习如何使用 GitHub Pages 创建一个简单的图表存储库，该存储库可用于向世界提供您的`guestbook`图表。
# 将留言簿图表发布到图表存储库中
现在您已经完成了留言簿图表的开发，该图表可以发布到存储库中，以便其他用户可以轻松访问。让我们首先创建图表存储库。
## 创建图表存储库
图表存储库是包含两个不同组件的服务器，如下所示:
*   舵角图，打包为`tgz`档案
*   一个`index.yaml`文件，包含关于存储库中包含的图表的元数据
基本的图表存储库要求维护者生成自己的`index.yaml`文件，而更复杂的解决方案，如 Helm 社区的`ChartMuseum`工具，在新图表被推送到存储库中时会动态生成`index.yaml`文件。在这个例子中，我们将使用 GitHub Pages 创建一个简单的图表存储库。GitHub Pages 允许维护人员从 GitHub 存储库中创建一个简单的静态托管站点，该站点可用于创建一个基本的图表存储库，为 Helm 图表提供服务。
您需要有一个 GitHub 帐户来创建 GitHub 页面图表存储库。[如果你已经有一个 Gi](https://github.com/login) tHub 账号，你可以登录 https://githu[b.com/login.，否则](https://github.com/join)你可以在 https://github.com/join.新建一个账号
登录 GitHub 后，按照[的步骤创建](https://github.com/new)图表库:
1.  按照 https://github.com/new 链接进入**创建新的存储库**页面。
2.  为图表存储库提供一个名称。我们建议命名`Learn-Helm-Chart-Repository`。
3.  选择**旁边的复选框，用自述文件**初始化该存储库。这是必需的，因为 GitHub 不允许您创建不包含任何内容的静态网站。
4.  您可以将其余设置保留为默认值。请注意，为了利用 GitHub Pages，您必须将隐私设置设置为**公共**，除非您有付费的 GitHub Pro 帐户。
5.  点击**创建存储库**按钮，完成存储库创建过程。
6.  虽然您的存储库已经创建，但在 GitHub Pages 启用之前，它还不能提供 Helm 图表。单击存储库中的**设置**选项卡，访问您的存储库设置。
7.  找到**设置**页面的 **GitHub 页面**部分(和**选项**选项卡)。它出现在页面底部。
8.  在**来源**下，选择下拉列表中名为**主分支**的选项。这将允许 GitHub 创建一个静态站点，为您的主分支的内容提供服务。
9.  如果您已经成功配置了 GitHub Pages，您将在屏幕顶部收到一条消息，显示 **GitHub Pages 源已保存**。您还将能够看到静态站点的网址，如以下示例屏幕截图所示:
![](img/Figure_5.15.jpg)
图 5.15:GitHub 页面设置和示例网址
一旦您配置了您的 GitHub 存储库，您应该将其克隆到您的本地机器上。按照以下步骤克隆您的存储库:
1.  通过选择页面顶部的**代码**选项卡，导航至存储库的根目录。
2.  Select the green **Clone or download** button. This will reveal the URL to your GitHub repository. Note that this URL is not the same as your GitHub Pages static site.
    如有必要，您可以使用以下示例截图作为参考来查找您的 GitHub 存储库 URL:
    ![Figure 5.16: Your GitHub repository URL can be found by clicking the Clone or download button ](img/Figure_5.16.jpg)
    图 5.16:您的 GitHub 存储库 URL 可以通过点击克隆或下载按钮找到
3.  一旦您获得了存储库的`git`引用，将存储库克隆到您的本地机器上。运行以下命令时，请确保您不在`guestbook`目录中，因为我们希望此存储库与`guestbook`图表
    ```
    $ git clone $REPOSITORY_URL
    ```
    分开
克隆存储库后，继续下一部分，将`guestbook`图表发布到图表存储库中。
## 发布留言簿 Helm 图表
Helm 提供了两个不同的命令，使发布 Helm 图表成为一项简单的任务。但是，在运行这些命令之前，您可能会发现有必要在`Chart.yaml`文件中增加图表的`version`字段。和其他类型的软件一样，对图表进行版本控制是发布过程的一个重要部分。
将图表`Chart.yaml`文件中的版本字段修改为 1.0.0，如下所示:
```
version: 1.0.0
```
一旦你的`guestbook`图表版本已经增加，你可以通过将你的图表打包到一个`tgz`档案中来继续。这可以使用`helm package`命令来完成。从本地`guestbook`目录的上一级运行该命令，如下所示:
```
$ helm package guestbook
```
如果成功，这将创建一个名为`guestbook-1.0.0.tgz`的文件。
重要说明
使用包含依赖关系的图表时，`helm package`命令要求将这些依赖关系下载到`charts/`目录，以便成功打包图表。如果您的`helm package`命令失败，请检查您的 Redis 依赖项是否已经下载到`charts/`目录。如果没有，你可以在`helm package`中添加`--dependency-update`标志，它将下载依赖项并在同一个命令中打包你的 Helm 图表。
一旦您的图表打包完毕，应通过运行以下命令将生成的`tgz`文件复制到 GitHub 图表存储库的克隆中:
```
$ cp guestbook-1.0.0.tgz $GITHUB_CHART_REPO_CLONE
```
复制此文件时，您可以使用`helm repo index`命令为您的 Helm 存储库生成`index.yaml`文件。此命令将图表存储库克隆的位置作为参数。运行以下命令生成您的`index.yaml`文件:
```
$ helm repo index $GITHUB_CHART_REPO_CLONE
```
这个命令会悄无声息的成功，但是你会在`Learn-Helm-Chart-Repository`文件夹里面看到新的`index.yaml`文件。该文件的内容提供了`guestbook`图表元数据。如果此存储库中包含其他图表，它们的元数据也会出现在此文件中。
你的 Helm 图表储存库现在应该包含`tgz`档案和`index.yaml`文件。使用以下`git`命令将这些文件推送到 GitHub:
```
$ git add --all
$ git commit -m 'feat: adding the guestbook helm chart'
$ git push origin master
```
系统可能会提示您输入 GitHub 凭据。一旦提供，您的本地内容将被推送到远程存储库，您的`guestbook` Helm 图表将从 GitHub Pages 静态站点提供。
接下来，让我们将您的图表存储库添加到您的本地 Helm 客户端。
## 添加图表存储库
类似于其他图表存储库的过程，您必须首先知道您的 GitHub Pages 图表存储库的 URL，以便将其添加到本地。该网址显示在**设置**选项卡中，如*创建图表库*部分所述。
知道图表存储库的网址后，可以使用`helm repo add`命令在本地添加该存储库，如下所示:
```
$ helm repo add learnhelm $GITHUB_PAGES_URL
```
该命令将允许您的本地 Helm 客户端与名为`learnhelm`的存储库进行交互。您可以通过根据本地配置的回购搜索`guestbook`图表来验证您的图表是否已发布。这可以通过运行以下命令来完成:
```
$ helm search repo guestbook
```
您应该会在搜索输出中找到返回的`learnhelm/guestbook`图表。
随着您的`guestbook`图表成功发布，让我们通过清理您的 minikube 环境来结束。
# 清理
您可以通过删除`chapter5`命名空间来清理您的环境，如下所示:
```
$ kubectl delete namespace chapter5
```
如果您已经完成工作，您也可以使用`minikube stop`命令停止您的 minikube 集群。
# 总结
在本章中，您学习了如何通过编写图表来部署留言簿应用，从而从头开始构建 Helm 图表。您首先创建了一个部署留言簿前端的图表和一个 Redis 依赖关系图表，然后通过编写生命周期挂钩和添加输入验证来改进这个图表。本章结束时，您使用 GitHub Pages 构建了自己的图表存储库，并将您的`guestbook`图表发布到该位置。
在下一章中，您将学习关于测试和调试 Helm 图表的策略，以使您能够进一步加强图表开发技能。
# 进一步阅读
有关留言簿应用的更多信息，请参考 Kubernetes 文档中的*使用 Redis 部署 PHP 留言簿应用* [*教程，网址为 https:*](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)//Kubernetes . io/docs/教程/无状态-应用/留言簿/。
要了解更多关于开发 Helm 图表模板的信息，请参考以下链接:
*   [*来自 Helm documentat 的图表开发指南*](https://helm.sh/docs/chart_template_guide/getting_started/)*ion*:https://helm.sh/docs/chart_template_guide/gettin[g _ started/](https://helm.sh/docs/topics/chart_best_practices/conventions/)
*   [*Helm 文档中的最佳实践列表*](https://helm.sh/docs/topics/chart_best_practices/conventions/):https://helm.sh/docs/topics/chart_best[_ 实践/惯例/](https://helm.sh/docs/topics/charts_hooks/)
*   [图表挂钩上的附加信息:https://helm . s](https://helm.sh/docs/topics/charts_hooks/)[h/docs/topics/charts _ hooks/](https://helm.sh/docs/topics/chart_repository/)
*   关于 ch 艺术资料库的信息:https://helm.sh/docs/topics/chart_repository/
# 问题
1.  哪个命令可以用来构建新的 Helm 图表？
2.  在开发`guestbook` 图表时，声明 Redis 图表依赖关系提供了哪些关键优势？
3.  什么注释可以用来为给定的生命周期阶段设置钩子的执行顺序？
4.  使用`fail`功能的常见用例有哪些？`required`功能怎么样？
5.  为了将 Helm 图表发布到 GitHub Pages 图表存储库中，需要哪些 Helm 命令？
6.  图表库中`index.yaml`文件的目的是什么？*