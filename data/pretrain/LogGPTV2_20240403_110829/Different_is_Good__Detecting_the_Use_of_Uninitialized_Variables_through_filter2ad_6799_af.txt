### System Optimization and Parallel Replay

To enhance the efficiency of our system, we have implemented an optimization technique using parallel replay. This involves splitting the execution traces into multiple segments and replaying them concurrently, based on the number of available CPU cores. Our experimental results, as shown in Table 6, demonstrate a significant speedup. However, this optimization may introduce false negatives if the use of uninitialized variables spans across different parallel replay instances, as these instances might not detect such usage.

### Related Work

#### Detection of Uninitialized Variables
Modern compilers like GCC [37], Clang [32], and Visual Studio [39] provide features to detect uninitialized variables. However, their capabilities are often limited to single functions and struggle with arrays, pointers, and loops [53]. Commercial tools such as CoBOT [2], Coverity [4], and Code Sonar [3] also offer detection but suffer from high false positives, especially when analyzing arrays. R. Jiresal et al. [27] propose a method to reduce false positives by combining summary-based function analysis and control flow analysis for COBOL, but its applicability to languages like C or C++ remains uncertain. These tools primarily analyze source code, whereas TimePlayer can analyze binaries without the need for source code.

#### Dynamic and Hybrid Analysis Tools
Some tools employ dynamic or hybrid analysis to detect vulnerabilities. For example, Memcheck [58] uses the Valgrind [45] binary translation system to detect the use of uninitialized memory through shadow memory. MemorySanitizer [62] relies on compile-time instrumentation and bit-precise shadow memory. However, these systems are either designed for user-level applications or require compiler-aided instrumentation, making them unsuitable for privileged and closed-source Windows kernels.

Digtool [48] fills memory regions with a specific byte pattern during stack and heap/pool allocations and searches for this pattern in data transferred from the kernel to user space. While it can detect kernel information leaks, it fails to identify cases where the leaked data is modified during transfer. In contrast, differential replay, as used in our system, is robust against such modifications. DieHard [9] performs differential syscall fuzzing to discover the use of uninitialized variables in system calls, but it focuses only on system calls, whereas TimePlayer aims to detect such vulnerabilities throughout the entire system.

#### Compiler-Based Solutions
UniSan [34] and SafeInit [40] use compiler-based approaches to detect and fix uninitialized data leaks. UniSan employs static data-flow analysis to check if uninitialized data reaches predefined sinks (e.g., `copy_to_user` and `sock_sendmsg`) and fixes the vulnerable code with LLVM. SafeInit adds an initialization pass to the LLVM compiler to initialize variables that are not properly initialized. Unlike these tools, TimePlayer operates directly on the binary code of Windows kernels, addressing different challenges such as leveraging differential replay without source code.

#### Multi-Variant Execution
kMVX [70] uses multi-variant execution (MVE) to detect kernel information leaks in Linux. However, kMVX requires extensive changes to the source code of target systems, making it inapplicable to Windows kernels. In contrast, TimePlayer is a non-intrusive system that can work with closed-source systems and has demonstrated its effectiveness by detecting zero-day vulnerabilities in both Windows 7 and Windows 10 kernels.

#### Differential Testing
Our system uses differential replay to detect kernel information leaks, a concept also applied in differential testing. For instance, differential testing has been used to test C language compilers [38, 52, 65], SSL/TLS implementations [10, 13, 49, 60], and complex software systems [5, 12, 26, 29, 61]. These systems typically rely on source code, while TimePlayer does not require it.

#### Record and Replay
Record-replay techniques aim to provide deterministic replay of programs despite non-deterministic events, useful for debugging and security [19, 54, 55]. Non-deterministic events are a major challenge, and some systems use customized hardware [22, 43, 44, 50, 64] or modified OS kernels [6, 8, 31] to handle them. SMP-ReVirt [20] records and replays the execution of unmodified systems on commodity multiprocessor hardware, using hardware page protection to detect interactions between CPU cores. RR [47] is a lightweight, practical user-space tool for record-replay, running one thread at a time to avoid non-deterministic events. TimePlayer uses PANDA [18] for whole-system deterministic record and replay, enabling the analysis of Windows kernels with easy-to-use APIs to extend PANDA's functionalities.

#### Dynamic Taint Analysis
Dynamic taint analysis has been widely used in computer security for data leakage tracking and vulnerability discovery. Tools like TaintCheck [46], Taintgrind [30], TaintPipe [42], and TaintTrace [14] use binary instrumentation for taint propagation, typically focusing on single binaries rather than whole-system data flow analysis.

Other tools, such as TEMU [67], Panorama [68], TaintDroid [21], and OFFDTAN [63], use virtual machines for whole-system taint tracking. However, the resource-intensive nature of taint tagging and tracking limits their efficiency. FlowWalker [15] improves taint analysis efficiency by separating recording and analysis, achieving good results in in-memory fuzzing [16] and gray-box file format analysis [17]. However, FlowWalker is limited to x86 assembly and struggles with taint elimination due to bit shifts, logic, and arithmetic operations. StraightTaint [41] uses symbolic taint tagging and offline analysis, similar to TimePlayer, but leverages user-level instrumentation, making it unsuitable for operating system kernels.

### Conclusion
In this paper, we present TimePlayer, a system designed to detect kernel information leaks caused by the use of uninitialized variables. We propose two key techniques: differential replay and symbolic taint analysis. Our evaluation on Windows 7 and Windows 10 kernels demonstrates the system's effectiveness, with the discovery of 34 new issues, 17 of which have been confirmed as vulnerabilities.

### Acknowledgements
The authors thank the anonymous reviewers for their insightful comments. This work was partially supported by the Alibaba-Zhejiang University Joint Research Institute of Frontier Technologies, the National Natural Science Foundation of China under Grant 61872438, and the Fundamental Research Funds for the Central Universities.

### References
[References listed as provided in the original text.]

This revised version aims to improve clarity, coherence, and professionalism, ensuring a more structured and reader-friendly presentation.