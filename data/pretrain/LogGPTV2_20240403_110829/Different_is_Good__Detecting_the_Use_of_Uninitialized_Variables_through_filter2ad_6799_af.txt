our system. Also this overhead could be optimized by the parallel
replay. Specifically, we split traces into multiple ones, and replay
them in parallel according to the number of available CPU cores.
Our experiment showed an obvious speedup (Table 6). However,
the potential issue of the optimization is that it may cause false neg-
atives. If the use of uninitialized variables is across parallel replay
instances, then it will be missed by our system after applying this
optimization.
8 RELATED WORK
Uninitialized variables detection Modern compilers such as
GCC [37], Clang [32] and Visual Studio [39] usually provide the
feature to detect uninitialized variables. However, most of them are
limited to a single function and fail to deal with arrays, pointers
and loops [53]. Some commercial products, such as CoBOT [2],
Coverity [4] and Code Sonar [3], also show their abilities to detect
the use of uninitialized variables. But they suffer from high false
positives, especially when analyzing arrays. R. Jiresal et al. [27] try
to reduce false positives by leveraging a summary based function
analysis and control flow analysis on COBOL. However, whether
its method is suitable for other languages like C or C++ is unknown.
These tools are mainly for analyzing source code, while TimePlayer
can analyze binaries without source code.
Some other tools [11, 58] employ dynamic analysis or hybrid
analysis [24, 25, 62, 66] to detect such vulnerabilities. For instance,
Memcheck [58] uses the Valgrind [45] binary translation system to
detect the use of uninitialized memory based on the shadow mem-
ory. MemorySanitizer [62] relies on compile time instrumentation
and bit-precise shadow memory. However, these systems are either
for user-level applications, or require the compiler-aided instrumen-
tation, which cannot be applied to privileged and closed-sourced
Windows kernels.
Digtool[48] uses a specific byte pattern to fill memory regions
during stack and heap/pool allocations, and searches for the pattern
in the transferred data from kernel to user space. It can detect
kernel information leaks, however, it cannot detect the case that
the leaked data has been modified during the transfer. Compared
to simple pattern matching used in Digtool, differential replay is
immune to data change during the transfer (since it could still cause
program state differences.) DieHard [9] performs differential syscall
fuzzing to discover the use of uninitialized variables in system
calls. The idea is close to our system. However, it only focuses on
system calls, while TimePlayer aims to detect uninitialized variable
vulnerabilities in the entire system.
Both UniSan [34] and SafeInit [40] intend to detect and fix unini-
tialized data leaks, using a compiler-based solution. Specifically,
UniSan uses static data-flow analysis to check whether the unini-
tialized data can reach some predefined sinks, e.g., copy_to_usr
and sock_sendmsg. If so, it fixes the vulnerable code with the help
of the LLVM compiler. SafeInit adds an initialization pass to the
LLVM compiler to initialize variables if they are not properly ini-
tialized. The main difference between our system and these two
is that they require the source and leverage a compiler to perform
the analysis, while our system works towards the binary code of
Windows kernels directly. Due to this difference, our system faces
different challenges, e.g., how to leverage differential replay to find
uninitialized variables (without the availability of the source code).
A recent system kMVX [70] uses the concept of multi-variant
execution (MVE) to detect the kernel information leaks in Linux.
However, kMVX needs to extensively change the source code of
target systems, thus it cannot be applied to Windows kernels. On
the contrast, TimePlayer is a non-intrusive system that can work to-
wards closed source systems, and its effectiveness has been demon-
strated by detecting zero-day vulnerabilities in both Windows 7
and Windows 10 kernels.
Differential testing Our system leverages the differential replay
to detect kernel information leaks. The idea of observing differences
in program states is also used in the area of differential testing. For
instance, differential testing was used to test the compiler of C
language [38, 52, 65], SSL/TLS implementations [10, 13, 49, 60] and
complex software systems [5, 12, 26, 29, 61]. These systems usually
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1895leverage the source code to do the test. On the contrast, our system
does not rely on the source code to be effective.
Record and replay Record-replay technique aims at providing
deterministic replay of programs in the presence of non-deterministic
events, which can be applied to fields like debugging and secu-
rity [19, 54, 55]. Usually non-deterministic events are the major
challenges in record and replay systems. Some of them rely on
customized hardware to handle non-deterministic events [22, 43,
44, 50, 64], while some others require a modified OS kernel [6, 8, 31].
SMP-ReVirt [20] is the first system that records and replays exe-
cution of the entire unmodified system within commodity multi-
processor hardware. It uses hardware page protection to detect the
interactions between different CPU cores. RR [47] is a lightweight,
practical user-space tool for record-replay. It runs only one thread
at a time to avoid non-deterministic events caused by interaction
between different cores. Our system uses PANDA [18] for a whole-
system deterministic record and replay. By doing so, we are able
to analyze Windows kernels with easy-to-use APIs to extend the
functionalities of PANDA.
In the past decade, taint analysis has
Dynamic taint analysis
been extensively used in the field of computer security, such as data
leakage tracking, vulnerability discovery, and etc. Some systems,
e.g., TaintCheck [46], Taintgrind [30], TaintPipe[42], TaintTrace[14],
are based on binary instrumentation to perform taint propagation.
These tools are usually designed to track data flow in a single binary,
not for the whole system data flow analysis.
Some other tools, such as TEMU [67], Panorama [68], Taint-
Droid [21], and OFFDTAN [63], use virtual machines to perform
the whole system taint tracking. Since taint tagging and tracking
consume huge amounts of resources, the efficiency of these tools
become their major weakness.
FlowWalker[15] is an offline dynamic taint analysis tool, sepa-
rating recording with analysis procedure. Such an architecture im-
proves the efficiency of taint analysis. Based on FlowWalker, other
techniques like in-memory fuzzing[16] and gray-box file formats
analysis[17], also achieved good experiment results. FlowWalker
builds taint analysis logic directly on the x86 assembly language,
makes it hard to extend to other architectures (like x86-64). In ad-
dition, it is difficult for FlowWalker to handle taint elimination
caused by bit shifts, logic operations, and arithmetic operations,
while symbolic taint analysis in TimePlayer can handle these is-
sues easily. StraightTaint[41] employs symbolic taint tagging and
offline analysis, which is similar to the symbolic taint analysis of
TimePlayer. However, StraightTaint leverages the user-level instru-
mentation tool PIN, which makes it unable to analyze operating
system kernels.
9 CONCLUSION
In this paper, we aim to detect kernel information leaks due to
the use of uninitialized variables. To this end, we propose two key
techniques, i.e., differential replay and symbolic taint analysis to
quickly find the use of uninitialized variables and locations where
variables were allocated. We developed a prototype system called
TimePlayer. The evaluation of applying our system on both Win-
dows 7 and Windows 10 kernels demonstrated its effectiveness,
[2] 2018. CoBOT Homepage. http://www.cobot.net.cn/
[3] 2018. Code Sonar Static Analysis Tool. http://www.grammatech.com/products/
[4] 2018. Coverity Static Analysis Data Sheet. http://www.coverity.com/library/
codesonar/overview.html
pdf/CoverityStaticAnalysis.pdf
with the discovery of 34 new issues (17 of which have been con-
firmed as vulnerabilities.)
Acknowledgements The authors would like to thank the anony-
mous reviewers for their insightful comments that helped improve
the presentation of this paper. This work was partially supported
by Alibaba-Zhejiang University Joint Research Institute of Frontier
Technologies, the National Natural Science Foundation of China
under Grant 61872438 and the Fundamental Research Funds for the
Central Universities. Any opinions, findings, and conclusions or rec-
ommendations expressed in this material are those of the authors
and do not necessarily reflect the views of funding agencies.
REFERENCES
[1] 2015. Revisiting an Info Leak. https://blog.rapid7.com/2015/08/14/revisiting-an-
info-leak/.
[5] George Argyros, Ioannis Stais, Suman Jana, Angelos D Keromytis, and Aggelos
Kiayias. 2016. SFADiff: Automated Evasion Attacks and Fingerprinting Using
Black-box Differential Automata Learning. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security.
[6] Amittai Aviram, Shu-Chun Weng, Sen Hu, and Bryan Ford. 2012. Efficient
System-enforced Deterministic Parallelism. Commun. ACM (2012).
[7] Fabrice Bellard. 2005. QEMU, a Fast and Portable Dynamic Translator. In Pro-
ceedings of the 2005 USENIX Conference on Usenix Annual Technical Conference.
[8] Tom Bergan, Nicholas Hunt, Luis Ceze, and Steven D Gribble. 2010. Deterministic
Process Groups in dOS. In Proceedings of the 9th USENIX conference on Operating
systems design and implementation.
[9] Emery D Berger and Benjamin G Zorn. 2006. DieHard: Probabilistic Memory
Safety for Unsafe Languages. In Proceedings of the 27th ACM SIGPLAN Conference
on Programming Language Design and Implementation.
[10] Chad Brubaker, Suman Jana, Baishakhi Ray, Sarfraz Khurshid, and Vitaly
Shmatikov. 2014. Using Frankencerts for Automated Adversarial Testing of
Certificate Validation in SSL/TLS Implementations. In Proceedings of the 2014
IEEE Symposium on Security and Privacy.
[11] Derek Bruening and Qin Zhao. 2011. Practical Memory Checking with Dr.
Memory. In Proceedings of the 9th Annual IEEE/ACM International Symposium on
Code Generation and Optimization.
[12] Yuting Chen, Ting Su, Chengnian Sun, Zhendong Su, and Jianjun Zhao. 2016.
Coverage-directed Differential Testing of JVM Implementations. In Proceedings
of the 37th ACM SIGPLAN Conference on Programming Language Design and
Implementation.
[13] Yuting Chen and Zhendong Su. 2015. Guided Differential Testing of Certificate
Validation in SSL/TLS Implementations. In Proceedings of the 2015 10th Joint
Meeting on Foundations of Software Engineering.
[14] Winnie Cheng, Qin Zhao, Bei Yu, and Scott Hiroshige. 2006. Tainttrace: Efficient
Flow Tracing with Dynamic Binary Rewriting. In Proceedings of the 11th IEEE
Symposium on Computers and Communications.
[15] Baojiang Cui, Fuwei Wang, Tao Guo, Guowei Dong, and Bing Zhao. 2013.
FlowWalker: A Fast and Precise Off-Line Taint Analysis Framework. In Pro-
ceedings of the 2013 Fourth International Conference on Emerging Intelligent Data
and Web Technologies.
[16] Baojiang Cui, Fuwei Wang, Yongle Hao, and Xiaofeng Chen. 2017. WhirlingFuz-
zwork: a Taint-analysis-based API in-memory Fuzzing Framework. In Joural of
Soft Computing.
[17] Baojiang Cui, Fuwei Wang, Yongle Hao, and Lingyu Wang. 2016. A Taint Based
Approach for Automatic Reverse Engineering of Gray-box File Formats. In Joural
of Soft Computing.
[18] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim Leek, and Ryan Whelan.
2015. Repeatable Reverse Engineering with PANDA. In Proceedings of the 5th
Program Protection and Reverse Engineering Workshop.
[19] George W Dunlap, Samuel T King, Sukru Cinar, Murtaza A Basrai, and Peter M
Chen. 2002. ReVirt: Enabling Intrusion Analysis through Virtual-machine Log-
ging and Replay. ACM SIGOPS Operating Systems Review (2002).
[20] George W Dunlap, Dominic G Lucchetti, Michael A Fetterman, and Peter M
Chen. 2008. Execution Replay of Multiprocessor Virtual Machines. In Proceedings
of the 4th ACM SIGPLAN/SIGOPS international conference on Virtual execution
environments.
[21] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar, Byung-Gon
Chun, Landon P Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N Sheth.
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom18962014. TaintDroid: an Information-flow Tracking System for Realtime Privacy
Monitoring on Smartphones. In ACM Transactions on Computer Systems (TOCS).
[22] Derek R Hower and Mark D Hill. 2008. Rerun: Exploiting Episodes for Lightweight
Memory Race Recording. In ACM SIGARCH computer architecture news.
[23] Intel. 2018. Intel XED. https://intelxed.github.io
[24] François Irigoin, Pierre Jouvelot, and Rémi Triolet. 2014. Semantical Interpro-
cedural Parallelization: An overview of the PIPS project. In ACM International
Conference on Supercomputing 25th Anniversary Volume.
[25] Anushri Jana and Ravindra Naik. 2012. Precise Detection of Uninitialized Vari-
ables Using Dynamic Analysis-Extending to Aggregate and Vector Types. In
Proceedings of the 19th Working Conference on Reverse Engineering.
[26] Suman Jana and Vitaly Shmatikov. 2012. Abusing File Processing in Malware
Detectors for Fun and Profit. In Proceedings of the 2012 IEEE Symposium on Security
and Privacy.
[27] Rahul Jiresal, Adnan Contractor, and Ravindra Naik. 2011. Precise Detection
of Un-initialized Variables in Large, Real-life COBOL Programs in Presence of
Unrealizable Paths. (2011).
[28] Mateusz Jurczyk. 2017. Detecting Kernel Memory Disclosure with x86 Emulation
and Taint Tracking. (2017).
[29] Timotej Kapus and Cristian Cadar. 2017. Automatic Testing of Symbolic Execution
Engines via Program Generation and Differential Testing. In Proceedings of the
32nd IEEE/ACM International Conference on Automated Software Engineering.
[30] Wei Ming Khoo. 2018. Taintgrind: a Valgrind Taint Analysis Tool.
[31] Oren Laadan, Nicolas Viennot, and Jason Nieh. 2010. Transparent, Lightweight
Application Execution Replay on Commodity Multiprocessor Operating Systems.
In ACM SIGMETRICS performance evaluation review.
[32] Chris Lattner. 2018. Clang: a C language Family Frontend for LLVM.
http:
//clang.llvm.org/index.html
[33] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and Yubin Xia. 2015. Thwarting
Memory Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications
Security.
[34] Kangjie Lu, Chengyu Song, Taesoo Kim, and Wenke Lee. 2016. UniSan: Proactive
Kernel Memory Initialization to Eliminate Data Leakages. In Proceedings of the
2016 ACM SIGSAC Conference on Computer and Communications Security.
[35] Kangjie Lu, Marie-Therese Walter, David Pfaff, Stefan Nürnberger, Wenke Lee,
and Michael Backes. 2017. Unleashing Use-before-initialization Vulnerabilities
in the Linux Kernel Using Targeted Stack Spraying. In Proceedings of the 2017
Annual Network and Distributed System Security Symposium (NDSS).
[36] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
Building Customized Program Analysis Tools with Dynamic Instrumentation.
In Proceedings of the 2005 ACM SIGPLAN conference on Programming language
design and implementation.
[37] Manuel López-Ibáñez. 2007. Better Uninitialized Warnings. http://gcc.gnu.org/
wiki/BetterUninitializedWarnings
[38] William M McKeeman. 1998. Differential Testing for Software. Digital Technical
[39] Microsoft. 2018. Visual Studio.
[40] Alyssa Milburn, Herbert Bos, and Cristiano Giuffrida. 2017. Safeinit: Comprehen-
sive and Practical Mitigation of Uninitialized Read Vulnerabilities. In Proceedings
of the 2017 Annual Network and Distributed System Security Symposium.
[41] Jiang Ming, Dinghao Wu, Jun Wang, Gaoyao Xiao, and Peng Liu. 2016. Straight-
Taint: Decoupled Offline Symbolic Taint Analysis. In Proceedings of the 31st
IEEE/ACM International Conference on Automated Software Engineering.
[42] Jiang Ming, Dinghao Wu, Gaoyao Xiao, Jun Wang, and Peng Liu. 2015. TaintPipe:
Pipelined Symbolic Taint Analysis. In Proceedings of the 24th USENIX Security
Symposium.
[43] Pablo Montesinos, Luis Ceze, and Josep Torrellas. 2008. Delorean: Recording
and Deterministically Replaying Shared-memory Multiprocessor Execution Effi-
ciently. In ACM SIGARCH Computer Architecture News.
[44] Satish Narayanasamy, Cristiano Pereira, and Brad Calder. 2006. Recording Shared
Memory Dependencies using Strata. ACM SIGARCH Computer Architecture News
(2006).
[45] Nicholas Nethercote and Julian Seward. 2007. Valgrind: a Framework for Heavy-
weight Dynamic Binary Instrumentation. In Proceedings of the 28th ACM SIGPLAN
Conference on Programming Language Design and Implementation.
[46] James Newsome and Dawn Song. 2005. Dynamic Taint Analysis: Automatic
Detection, Analysis, and Signature Generation of Exploit Attacks on Commodity
Software. In Proceedings of the 12th Network and Distributed Systems Security
Symposium.
[47] Robert O’Callahan, Chris Jones, Nathan Froyd, Kyle Huey, Albert Noll, and
Nimrod Partush. 2017. Engineering Record and Replay for Deployability. In
Proceedings of the 2017 USENIX Conference on Usenix Annual Technical Conference.
[48] Jianfeng Pan, Guanglu Yan, and Xiaocao Fan. 2017. Digtool: A virtualization-
based Framework for Detecting Kernel Vulnerabilities. In Proceedings of the 26th
USENIX Security Symposium.
Journal (1998).
519
[49] Theofilos Petsios, Adrian Tang, Salvatore Stolfo, Angelos D Keromytis, and
Suman Jana. 2017. Nezha: Efficient Domain-independent Differential Testing. In
Proceedings of the 2017 IEEE Symposium on Security and Privacy.
[50] Gilles Pokam, Klaus Danne, Cristiano Pereira, Rolf Kassa, Tim Kranich, Shiliang
Hu, Justin Gottschlich, Nima Honarmand, Nathan Dautenhahn, Samuel T King,
et al. 2013. QuickRec: Prototyping an Intel Architecture Extension for Record
and Replay of Multithreaded Programs. ACM SIGARCH Computer Architecture
News (2013).
[51] Nguyen Anh Quynh. 2014. Capstone: The Ultimate Disassembler.
[52] John Regehr, Yang Chen, Pascal Cuoq, Eric Eide, Chucky Ellison, and Xuejun
Yang. 2012. Test-case Reduction for C Compiler Bugs. In Proceedings of the 33rd
ACM SIGPLAN Conference on Programming Language Design and Implementation.
[53] Prof. John Regehr. 2011. Uninitialized Variables. http://blog.regehr.org/archives/
[54] Michiel Ronsse and Koen De Bosschere. 1999. RecPlay: a Fully Integrated Practical
Record/replay System. ACM Transactions on Computer Systems (TOCS) (1999).
[55] Yasushi Saito. 2005. Jockey: a User-space Library for Record-replay Debugging.
In Proceedings of the 6th international symposium on Automated analysis-driven
debugging.
[56] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. KAFL: Hardware-assisted Feedback Fuzzing for OS Kernels.
In Proceedings of the 26th USENIX Security Symposium.
[57] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. 2010. All You
Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic
Execution (but might have been afraid to ask). In Proceedings of the 2010 IEEE
Symposium on Security and Privacy.
[58] Julian Seward and Nicholas Nethercote. 2005. Using Valgrind to Detect Undefined
Value Errors with Bit-Precision.. In Proceedings of the annual conference on USENIX
Annual Technical Conference.
[59] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and
Giovanni Vigna. 2015. Firmalice - Automatic Detection of Authentication Bypass
Vulnerabilities in Binary Firmware. In Proceedings of the 22nd Annual Network
and Distributed System Security Symposium.
[60] Suphannee Sivakorn, George Argyros, Kexin Pei, Angelos D Keromytis, and
Suman Jana. 2017. HVLearn: Automated Black-box Analysis of Hostname Verifi-
cation in SSL/TLS Implementations. In Proceedings of the 2017 IEEE Symposium
on Security and Privacy.
[61] Varun Srivastava, Michael D Bond, Kathryn S McKinley, and Vitaly Shmatikov.
2011. A Security Policy Oracle: Detecting Security Holes Using Multiple API
Implementations. In Proceedings of the 32nd ACM SIGPLAN Conference on Pro-
gramming Language Design and Implementation.
[62] Evgeniy Stepanov and Konstantin Serebryany. 2015. MemorySanitizer: Fast
Detector of Uninitialized Memory Use in C++. In Proceedings of the 13th Annual
IEEE/ACM International Symposium on Code Generation and Optimization.
[63] Xiajing Wang, Rui Ma, Bowen Dou, Zefeng Jian, and Hongzhou Chen. 2018.
OFFDTAN: A New Approach of Offline Dynamic Taint Analysis for Binaries. In
Joural of Security and Communication Networks.
[64] Min Xu, Rastislav Bodik, and Mark D Hill. 2003. A Flight Data Recorder for
Enabling Full-system Multiprocessor Deterministic Replay. In ACM SIGARCH
Computer Architecture News.
[65] Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and Un-
derstanding Bugs in C Compilers. In Proceedings of the 32nd ACM SIGPLAN
Conference on Programming Language Design and Implementation.
[66] Ding Ye, Yulei Sui, and Jingling Xue. 2014. Accelerating Dynamic Detection
of Uses of Undefined Values with Static Value-flow Analysis. In Proceedings of
Annual IEEE/ACM International Symposium on Code Generation and Optimization.
[67] Heng Yin and Dawn Song. 2010. Temu: Binary Code Analysis via Whole-system
Layered Annotative Execution. EECS Department, University of California, Berke-
ley, Tech. Rep. UCB/EECS-2010-3 (2010).
[68] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda.
2007. Panorama: Capturing System-wide Information Flow for Malware Detec-
tion and Analysis. In Proceedings of the 14th ACM conference on Computer and
communications security.
[69] Michal Zalewski. 2018. American Fuzzy Lop: a Security-oriented Fuzzer. http:
//lcamtuf.coredump.cx/afl/
[70] Sebastian Österlund, Koen Koning, Pierre Olivier, Antonio Barbalace, Herbert Bos,
and Cristiano Giuffrida. 2019. kMVX: Detecting Kernel Information Leaks with
Multi-variant Execution. In Proceedings of the 24th ACM International Conference
on Architectural Support for Programming Languages and Operating Systems.
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1897