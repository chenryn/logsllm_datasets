corruption attacks have varying amounts of risk in causing crashes
due to invalid memory accesses. Simply modifying variables has
very little risk, to cause a crash the overwritten value would need
to be used as an index to a pointer and then cause the pointer to
point to an invalid page of memory. Similarly, if an attacker does
not know where valid memory pages are, then overwriting a data
pointer can cause crashes. However, if valid memory pages are
predictable, then overwriting a data pointer has no risk in causing
crashes. Modifying code pointers has the highest risk of causing
crashes, since the pointer needs to not only point to valid pages,
but it also needs to point to a valid instruction sequence and those
instructions need to use the stack in a safe manner. Side channel
attacks that use these different vulnerabilities also carry with them
the same levels of risk.
In the rest of this section, we discuss fault analysis and timing
side channel attacks. For both types of side channel attacks, we
present multiple classes of attacks, that take advantage of memory
corruption bugs in different ways. For each attack, we give a high
level overview and a simple example of some vulnerable code that
could be exploited to conduct the attack. We then describe what
kind of information can be learned from the described attack and
the limitations of the attack.
3.1 Fault Analysis Attacks
To speciﬁcally conduct a fault analysis attack, the attacker needs
to be able to send some payload, receive the result of the execution,
and then interpret the result to learn what was executed.
Overwrite Data. An attacker can overwrite some data that is
used as an index to a data pointer, causing the pointer to go out-of-
bounds. This can cause some computation to be done on a location
of his choosing, rather than the intended data. If the data pointer
is then pointing to the stack and incorporates a return address, the
result of the computation could reveal where the code is located. If
the pointer points to the code, and that is computed on, the result
could reveal what changes have been made to the code.
1 recv(socket, buf, input);
2 if (ptr[index])
3
rv = SUCCESS;
4 else
5
7 send(socket, &rv, length);
rv = ERROR;
The exact computation that is being done on the data and what
can be learned from it will depend on the vulnerable piece of code.
The above example represents a simple piece of code that can be
abused to learn low level details of how code has been diversiﬁed.
In the example, the attacker can use a buffer overﬂow to overwrite
an index to a pointer, the dereferenced pointer’s value is checked
and if it is zero an error is sent, otherwise a value indicating suc-
cess is sent. The attacker can cause the data pointer to point back
to somewhere in the code segment, and then learn where the byte
0x00 is located. If the pattern of 0x00 located in the code is dis-
tinct, the attacker can learn how code has been diversiﬁed.
Limitations to this attack are largely dependent on how reversible
the computation being done is and thus how much does the output
reveal about the input. This attack is most effective when the com-
putation being done has a one-to-one mapping between input and
output. However, if the computation is reversible, then both where
code is located and what code is there can potentially be leaked.
Overwrite Data Pointer. An attacker could overwrite a data
pointer directly, which is similar to the previous attack, and can
cause some computation to be done on a location of his choosing,
rather than the intended data. However, unlike the previous attack,
an absolute location in memory is chosen, this will directly reveal
where code is and what changes have been made to the code.
1 recv(socket, buf, input);
2 sum = i = 0;
3 while (sum value)
3
i++;
In the above example there is a vulnerability that allows an at-
tacker to overwrite the data pointer. If the attacker overwrites it
with an address in the code segment, the loop will execute that
many number of times. For example, if the attacker is looking for
a return instruction in x86 code, the loop will execute 0xc3 times
when found.
If the attacker knows how long it takes to execute
the loop once, he can compare that to when it is executed multiple
times and ﬁgure how how many iterations actually took place. This
attack essentially allows one to ﬁnd the value of arbitrary memory
locations through timing.
The limitation of this attack is that it requires code that makes
control ﬂow decisions using an overwritten pointer. However, as
we will show later, an attacker can use other attacks to bootstrap
and ﬁnd enough gadgets to create a control ﬂow mechanism.
Overwrite Code Pointer. In this attack, control ﬂow is directly
hijacked by overwriting code pointers, such as return addresses and
function pointers. While the attacker may not know what code he
is actually executing, the attacker can time how long it takes to
execute and discern some information about where code is located.
In the example below, there are three functions whose locations
have been randomized, where f unc1 has a memory corruption vul-
nerability allowing a function pointer to be overwritten. Each func-
tion f unc1, f unc2, f unc3, takes a different, distinct time to ex-
ecute, t1, t2, t3, respectively. The attacker can hijack control ﬂow
to location 1, and when he ﬁnds that it takes t2 time to execute, he
knows that that location is the beginning of f unc2. Similarly, if he
executes at location 4, he will ﬁnd it takes t3 time to execute and
will know he is executing f unc3. Note that this attack works even
if ﬁne-grained ASLR is deployed on the system.
- func2 (int z)
1 x = 3;
2 z = x + z;
3 return z;
- func3 (int x, int z)
4 z = z * x;
5 return z;
- func1 ()
6 recv(sock, buf, input);
7 (*funcptr)();
8 send(sock, data, len);
9 return;
Similarly, the attacker can also try to ﬁnd return instructions di-
rectly by executing at different locations, thus also determining the
size of pieces of code. For example, if the attacker hijacks control
ﬂow four different times and points execution to locations 1, 2, 3,
and 4, he will ﬁnd it takes the smallest amount of time to execute
location 3, where the return statement is. As the return instruction
is the fastest piece of code that can possibly be executed, he will
know he has found the return instruction by the timing being the
shortest. The attacker then knows that location 1 is f unc2, as that
is the only function with size 3.
Limitations to this attack are similar to Crafted Input, but at a
coarser level. If functions, or basic blocks of code, have distinct
timing or size characteristics, then functions can be discerned with
this attack. If many pieces of code, on the other hand, have the same
size and timing, then it can be difﬁcult to differentiate what is being
executed. In RISC architectures size and timing characteristics are
correlated, thus knowing one reveals information about the other.
4. SIDE CHANNEL EFFECTIVENESS
We demonstrated in the previous section that, depending on the
vulnerability, different information can be leaked about the code.
In this section, we ask the question: If we can only leak certain
information about the code, how useful is that information? Ef-
fective side channels require that the phenomena being measured
(e.g., power, acoustic signals, time, output) be distinct, thus reveal-
ing information about what is being executed. For example, some
of the attacks previously described require that the size of func-
tions, particular sequence of bytes in code, or execution time to be
revealing of what code is actually being executed. Thus, how dis-
tinct these measurements are determines how precisely an attacker
can identify what piece of code he is actually measuring. As libc
is almost always linked as a library in real code, we analyze how
distinct certain aspects of it are.
4.1 Metrics
To measure how distinct a function is, we deﬁne the uncertainty
set size (USS) metric. The USS of a function is the cardinality of the
set of other functions that have the same measurement associated
with it. Thus a totally distinct function’s USS would be zero. If two
functions had the same measurement, each function’s USS would
be one, indicating that there is one other function that could be
confused with it.
In other words, the USS metric indicates how
many functions have the same side-channel characteristic. If the
set is small enough, then an attacker can do brute-forcing or use
the intersection of USS for different attacks to reduce the overall
uncertainty. We also measure how much information needs to be
leaked by the attacker to learn the actual USS.
Note that in this section, all of our evaluations assume a function-
level randomization, known also as ”medium-grained” ASLR, where
the location of functions are randomized, but the internals of the
functions remain the same. This is done to evaluate how useful dif-
ferent types of side channels are in general. In Sec 6, we evaluate
actual attacks against different code diversiﬁcation techniques (i.e.,
NOP insertion and coarse-,medium-, and ﬁne-grained ASLR).
Identifying how distinct a piece of code is does not necessarily
answer what an attacker can accomplish once information is leaked.
We also evaluate how many total gadgets an attacker can discover
once he leaks information about the diversiﬁed code. However, if
the same gadget is located in many pieces of code, an attacker only
needs to know one of those locations to use that gadget. Therefore,
we also evaluate how many distinct gadgets are available.
As discussed by Skowyra et al. [35], when building a practical
code reuse payload, the most important property a gadget set must
have is access to system calls, not Turing completeness. Malicious
payloads such as uploaders, downloaders, backdoors, and root in-
serters all require access to system calls. Although system calls
are widely available in libc, they are much less common in exe-
cutables or other libraries. In fact, we analyzed all libraries linked
to the Ubuntu Top 500 packages. This amounted to 3989 unique
libraries. Of those, only three libraries outside of libc have ac-
cess to system call gadgets: libgomp, libxul, and libjvm.
As a result, even though the executable may contain many gadgets,
an attacker still needs to ﬁnd gadgets with access to system calls in
linked libraries, primarily libc. Thus, we also measure how many
system call gadgets can be found, to determine their prevalence in
the code, but we note that an attacker only needs one system call
gadget to write an exploit.
based on the value of the code. However, an attacker might have
some other way to leak information. Since different vulnerabilities
will leak information in different ways, we explore how distinct
code is and how a side channel attack could take advantage of this.
We begin by evaluating the probability distribution function of
bytes in the code. Considering code is highly compressible, we
expect that bytes in code do not follow a uniform distribution. Fig-
ure 1 conﬁrms this, which shows a large skew towards certain bytes,
while many bytes are used very infrequently. We ﬁnd that the most
common values are 0x00 and 0xff, as these values are often used
in constants. This suggests that since code is distinct, computing
something on the code itself can reveal what the code is.
If an attacker can ﬁnd the locations of speciﬁc bytes, we eval-
uate if the pattern of such locations are distinct to functions. For
example, perhaps through the use of a vulnerability similar to those
presented earlier, an attacker can learn where 0x00 bytes are lo-
cated. We also evaluate how many locations need to be leaked to
uniquely identify functions. Figure 2 shows a CDF of the frac-
tion of functions that have a particular USS or less. We ﬁnd that
when only one location is leaked, very few functions have an USS
of zero. However, as the number of locations leaked increases, the
USS decreases. For example, with four locations leaked, 38% of
functions are uniquely identiﬁable. Finally, if all the locations are
leaked, we ﬁnd that 62% of functions have distinct patterns, while
71% of functions have an USS of one or less.
Table 1: Gadgets Leaked
Information Leaked
All functions
Zero bytes
Return instructions
Crashes