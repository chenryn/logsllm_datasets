New Techniques for 
Discovering Smart Device 
Vulnerabilities
小灰灰 / Xiaohuihui
Baidu Security Lab Senior Security Researcher
30-May2019
2
Who am I
Senior Security Researcher at Baidu 
Security Lab
Research areas: IoT security / AI security 
/ autopilot vehicle security
Experienced hardware cracker
Previously Responsible For:
• BSRC, incident response, 0-day analysis
• Baidu product security assessment
• Baidu security monitoring system construction
Traditional IoT Device Cracking
Router？
Firmware download
Binwalk unpacking
Finding problematic bin(why?)
IDA analysis, WEB script file analysis
Vulnerability verification (real machine or QEMU test)
Most of them seem to be Vulnerability Analysis
Now ？
We have a lot more different IoT 
devices, not just routers
Large manufacturers won’t let 
you easily crack the devices:
•
Firmware is not available for 
download
•
Telnet, serial port, ADB are all closed
•
There’s no way to get started
What do we do? ? ?
The Structures Are Similar
OS and 
Hardware
Full Android and Linux 
versions, ARMv5/6/7/x86 
processors, 
EMMC/EMCP/NAND 
memory
Openwrt Linux with 
microkernel, ARM, MIPS 
processor, NAND/SPI Flash 
memory
RTOS Linux that has real-time 
operating systems with 
microkernel, ESP Lexin, 
Arduino system-on-chip, AVR, 
STM32 series, SPI Flash 
memory
Application 
Scenarios
Smart Speakers, Smart 
Watches, Vending 
Machines, TV boxes,
Smart TVs, Smart 
Billboards, Vehicle 
System
Router, Mini Smart Speaker,
Smart Camera
Smart Lock, Smart Rice Coker, 
Smart Socket, Smart Lamp, 
Smart Bracelet
Features
More features, more 
memory space, great 
platform for developing 
apps, most of them carry 
a large screen
Simple but have advanced 
features, large screen is not 
necessary/only small screen 
is needed
Function is simple but can be 
controlled via network, 
analogue electronics are not 
feasible.
Step 0: Teardown!
Be clear about what to do and where to go
• What are the chip solutions? What we can do?
• What to do when we get stuck?
Look for chip model information and datasheet
Pay attention to：
• Storage type and specifications
• SPI Flash 8/16/Wide&Narrow
• EMMC/EMCP 100/153/162/169/186/221/254
• NandFlash TSOP32/40/48
• TTL and JTAG interface (how to find)
• Communications module (Ethernet, Bluetooth, wifi, 234G)
图片来自：https://www.crowdsupply.com/teardown/portland-2018
Online Teardown -- A good Way to Find Targets
Search for xxx teardown
Forum (teardown forum)
Ifixit.com
• Contains hardware devices from well-known manufacturers
• Clear picture, label
Fccid.io
• All devices with wireless capabilities and released internationally
• You can find many different devices
• Tips: Search site:fccid.io internal photos xxx
Tesla Motors, Car Key Fob - Found on fccid.io
Kindle Fire’s Logic Board – found on ifixit
Step 1 Premise：Control and Acquire as You Like
Control & Acquire
• Acquire file system
• Getshell (easy for analysis and viewing network/files/processes)
• Acquire and control network data
Eventually we can use the acquired information to conduct a comprehensive 
analysis and find valid vulnerabilities. 
Tips: it is not necessary to follow a specific order here, these steps can be mixed
• For example, you can get the firmware directly after running getshell, or dump the firmware, 
make modifications, and then run getshell.
• For example, to acquire interactive data, you can have connection upgrades to get the firmware 
download address directly.
Preparation - Acquire Firmware
Purpose：
• Understand the OS and file system structure, focus on the key directory (/etc /home /usr/bin ..., 
if it is Android, /system/priv-app)
• Analyze the startup script (/etc/inittab /etc/init.d), loaded binary and configuration file
• Analyze web directory files (CGI, PHP, Lua.....)
• Easy for restoring the old system version (e.g. activate telnet), and easy for analysis 
• Make reverse engineering easy as it’s possible that the firmware is a new version of APK
• Chroot to the corresponding processor’s QEMU for analyzing the binary & web
Preparation - Acquire Firmware
Methods：
• Download from the official website
• Self-upgrade, monitor the packets (if you query the version, you need to intercept the modified 
older version. Special channel.)
• Reverse engineer the App update and the update process (ftp access)
• Get help from forum and friends (industry maintenance forum)
• Contact customer service (help device recovery)
• Get the shell (telnet, ssh, adb...) and dump firmware (dd, tar, nc out)
• Enter BootLoader to read memory
• Special access to master console (such as the MTK, NXP series - you can read/write file system 
via data line port)
But, sometimes none of these works.
Physical Dump
When it’s impossible to acquire firmware through normal channels
• Large manufacture's firmware is encrypted and cannot be decrypted by using binwalk
• There is no firmware upgrade process so the firmware remains unchanged
• The firmware is upgraded via GPRS and cannot be intervened (actually we can intervene ☺)
• TTL off, telnet off, unable to stop BootLoader and enter
Then tear it apart, physical dump
• Different read/write methods for different models
• Steps:
• Choose a device and the read/write method (online or offline)
• Hack the firmware
Physical Dump-SPI Flash
SPI Flash (for simple devices/routing devices)
• Serial read/write device, common capacity is 4/8/16MB, 8-pin SPI interface
• Structure:
• Full operating system: Bootloader+kernel+file system, mostly compressed
• Only for storing data, configuration files, etc.
• Read and write methods:
• Arduino+EEPROM library
• Raspberry SPI interface + flashrom
• Programmer can R/W faster (RT809H)
• Soldering is not required (hook and clip is enough). However, sometimes it 
doesn't work (when the CPU is powered), so it’s better to take it out
• Can directly modify the firmware and run getshell. Need to pay attention to 
the file structure.
• File system, offset: acquire start information and binwalk
• Soldering->Unpack->Modify->Repackage->dd offset, merge->brush write 
back->Soldering
Physical Dump-SPI Flash- Acquire the File System Structure
Subtitle (if needed)
Obtained through console information output
Obtained by shell command
Obtained through binwalk
Physical Dump-NandFlash
NandFlash (for more complex devices such as 
advanced routing, smart speakers)
• 16MB-2GB capacity, TSOP48/BGA package, read and write by block
• People new to drag soldering often run into issues. It is recommended 
to use a heat gun for de-soldering (be careful about the surrounding 
components)
• Structure: most of the full Linux/Android system do not require 
compression and decompression
• Read and write methods:
• 17+ valid pins require programmer for read/write (e.g. RT809H)
• Bad block management exists but is not very advanced. Write is more 
complicated here.
Warning: usually binwalk cannot decrypt the acquired bin firmware. 
Modifying binwalk or removing ECC check digit data is needed. 
Handling this type of device is more challenging than SPI Flash and 
EMMC. Also the file system format is always different. 
Physical Dump-EMMC/EMCP
The relationship between EMMC and Nand Flash
EMMC=NAND Flash+Flash Control 
Chip+Standard Interface Package
Nand Flash
EMMC
Physical Dump-EMMC/EMCP
EMMC/EMCP (for complex devices such as smart TVs, 
mobile phones)
Similar to an SD card
All in BGA package, specification 100/153/162/169/186/221 (account for 95%)
Offline read and write:
•
Use hot air gun for arc blow (be careful about the surrounding components), special 
reader + programmer OR read directly from the chip 
•
The tinning method could be challenging so it requires more practice.
Online read and write (soldering is not needed):
•
Need to find or understand key solder joints, which are tiny/. Soldering can be challenging 
here (identify a good method?)
•
Jump wire DAT0, CMD, CLK, GND, (VCC, VCCQ) to the SD card reader. De-soldering is not 
necessary but will need to pay attention not to to short the crystal oscillator
The acquired firmware can be recognized by the file system and is easy 
for read and write. 
Physical Dump – Video of the Tinning Process
Offline Read and Write
Protect Chip
Use the programmer
Use a dedicated reader stand
Direct soldering to 
the SD card
Jump wire on the memory chip 
to connect the SD card reader
Online Read and Write
Online read and write of a car system
Preparation-Getshell
Purpose：
• tar extract files (firmware) after running Getshell and analyze bin & web script
• Easy to review the data, including ports, processes, networks, and files
• Build a test environment and compile test tools
• Convenient online debugging (sometimes it’s hard to run QEMU offline due to the lib library 
and hardware limitations)
In short, the ideal environment for cracking is to enable getshell
•
If you are able to remove getshell, it means you have cracked the device
Preparation-Getshell
Method：
Scan the port for telnet, ssh, adb services, etc.
• Use fast scan, masscan, nmap -sS
• Password & hash can be found in the firmware, offline cracking 
(how to speed up the crack?)
lsusb, check whether the usb adb is enabled
Look for web upload vulnerabilities, command injection 
vulnerabilities, etc.
Online or offline memory modificaiton
• For example, add busybox telnetd -l /bin/sh & to init startup items
• Easy to modify for EMMC memory structure
Look for TTL pins on the board
• Obviously labeled
• Use CPU datasheet
Use hashcat to crack ssh, telnet password
Quick scan with nmap
Quick scan with masscan
Preparation-Getshell
Method：
Modify the Bootloader startup 
parameters
• Force the uboot configuration mode and 
modify the kernel parameters. For example, 
add  1 to enter single-user mode.
• Modify kernel parameters using the JTAG 
interface
Preparation-Getshell
Method：
Modify kernel parameters using JTAG to get shell
• The device needs a JTAG port, and a corresponding JTAG device and CPU configuration file.
• OpenOCD is a good software option, which can support a variety of CPUs. As to hardware, jlink
is a good option.
• Modify startup parameters
• Find the location of the boot parameters in the firmware
• Add a breakpoint
• Modify the startup parameters, such as adding  1 to enter single-user mode.
• Boot the kernel, the console serial port gets the shell
Preparation - Get Communication Data
Purpose：
• Understand the workflow logic (to support analysis, such as looking for encrypted code based 
on http request)
• Get cookie, token and other authentication information, and sensitive private data
• Get the server interface to infiltrate the server (authorization penetration)
• Intercept and modify packet or construct a replay based on the known packet
• Finally, issue legal instructions, construct a poc, get critical keys, etc.
Usually uses Wifi/234G/Bluetooth/Low Power Bluetooth/Infrared/Wired/Other 
Band Radio
Preparation - Get Communication Data
Method: IP data (TCP, UDP, HTTP, MQTT, etc.)
WiFi：
• Real-time wireshark:
• Turn on the wireless hotspot and connect. Wireshark will sniff this network card directly.
• Android adb forward + tcpdump + pipe to PC wireshark
• Capture packets on the routing device
• If it is an Android APP, run directly in the native emulator, sniff this network card
• If it is HTTP, HTTPS, set proxy
• Cross compile tcpdump (arm, mips), -A option or –w
• If it is a remote device, try arp middleman
• If it is a remote device and nd need subtle action: try WiFi real-time decryption (strong network 
card support, such as RTL8812U)）
Set WPA/WPA2 Real-Time Decryption
If Commutation Data is Encrypted
SSL/TLS encryption
• HTTPS agent
• If you verify the certificate, import the burp 
root certificate
• Android:
• Xposed bypass forces certificate verification 
bypass
• Hook (okhttp)
Symmetric encryption such as 
AES\DES, using TCP transmission
• Reverse analysis APP, binary, get the key
• Android: Hook (Crypto)
Hook the commonly used http operation library okhttp
Hook the java encryption and decryption library crypto
About Hook (for Android)
Framework
• Xposed:
• Hook is supported at Java level only
• Good for batch deployment
• CydiaSubstrate:
• Support java/native
• Not open source and there’s no update to 
support new Android system
• Frida:
• Good for cracking
• Support java/native, support multi platforms, 
and can adapt to the latest system
Tools
Integrated http, encryption and decryption, 
SQL query, file operation, IPC, and custom 
hook function
• Xposed based：
• Inspeckage
• https://github.com/ac-pm/Inspeckage
• Frida based：
• appmon
• https://github.com/dpnishant/appmon
What to Hook？
Sensitive operation hook
• Symmetric encryption key, plaintext ciphertext
• Sqlite query (determine whether there is injection and help understand the logic)
• HTTP, HTTPS request content
• Hash call status
• Other (webView, serialization, file system operations, SharedPreference, IPC, etc.)
Target function custom hook
• Get the return value
• Modify the return value
• How to determine the class, method(trace) of a hook
Subtitle (if needed)
Use Inspeckage Hook http request
Customize hooks with Inspeckage
Subtitle (if needed)
Encrypted with Inspeckage hook AES
Get Communication Data - Other Channels
234G：
• Devices that require remote communication, such as vending, shared bicycle locks, etc.
• Developers often think that this channel is very secure and rarely take hardening into consideration.
• Through the fake base station GPRS hijacking, the network traffic connected to the base station can be 
completely controlled.
• Remote access triggering vulnerability can also be performed according to carrier network interoperability 
issues
Bluetooth：
• At this stage, mainly based on low-power Bluetooth, such as sports bracelets, smart thermometers, 
Bluetooth unlocking, etc.
• Developers generally think that this channel is very secure, and there are few hard-to-reinforce reinforced, 
and there are many key leaks.
• Traditional Bluetooth analysis can only track broadcast packets, and cottage devices can track frequency 
hopping.
• Mobile phone debugging mode to enable Bluetooth log, simple and stable
Traffic Access, Sniffing, MITM for 234G Devices
• Fake base stations can be a risk for 2G networks as the mobile phone 
is unable to authenticate the base stations
• Build a GSM base station system (tested legally)
• Hardware: Bladerf (higher accuracy in comparison with other SDR devices)
• Software: YateBTS (graphical interface / easy to install)
• How to auto connect a smart device to a fake base station
• Same thought process as sending text message to a cellphone from fake 
base station: increase cell reselection parameters C1, C2
• Modify the YateBTS source code
• For details, please refer to my Defcon China talk
• Attack: Get traffic, MiTM, access port trigger....
• Other simple methods:
• The intranet of carrier is interconnected (10 or 172 network segments). 
Simply purchase two sim cards to trigger port-based vulnerabilities.
Step 2 - Analysis
Combine existing files, web requests, shells
• Use Netstat –tunlp to monitor and analyze the corresponding process
• Command injection, such as the contents of fopen() can be controlled
• Dangerous functions may cause overflows, such as strcpy()
• If shell is not an option, use port scan or stateless scanning
• If web is available:
• Determine configuration files and web source files
• Try web page vulnerability mining (php, cgi, lua scripts, etc.)
• Locate critical code locations (Reverse compilation, keyword, trace) based on network access to 
obtain the encryption logic and interface parameter format
Finally get key data, or issue instructions
Example: Core Logic Problem of A Vending Machine 
The FTP upgrade server password is leaked in the Bin file.
Payment service not verified, resulting in 0 CNY payment
Can control other vending machines to 
update firmware arbitrarily
Information Disclosure and Configuration Modification for Two Smart Watches 
Subtitle (if needed)
Key was disclosed during the cloud login process
Configuration was modified by MiTM during interaction in the cloud
Information Leakage and Decryption in A Lock for Shared Bicycle
Subtitle (if needed)
Encrypted cloud transmission
Analyze firmware, get keys and upgrade agreements
FTP Server Protocol Command Injection in a 
Communications Module
Some Essential Skills and Tips
• Soldering skills
• Soldering, de-soldering, drag soldering, tinning, board washing, non-welding & de-soldering
• Use hot air gun for de-soldering, ball planting tin (low temperature tin paste)
• Jump Wire
• Buy genuine white soldering iron with adjustable temperature, which takes 8 seconds to heat up 
without aging
• APK decompile, hook, dynamic debugging, Java code reading
• Web attack and defense and source code auditing capabilities
• Ability to code Python/Java 
• Simple binary reverse analysis
• TCP, HTTP packet analysis by using Wireshark
• Familiar with cross-platform cross compilation
Some Essential Skills and Tips
• Common tools:
• Prepare gdb, tcpdmp, telnetd, nmap, masscan...
• Busybox in multiple platforms
• Common commands:
• busybox netstat -tunlp
• busybox telnetd -l /bin/sh &
• tcpdump -i xxx not tcp port xxxx -A
• nmap -sS -PN -T5
Q&A