Wi-Fi-Direct channel we analyzed one of these apps as a case study
(Section 6.2). However, the core of our analysis is orthogonal to
any communication channel. The only part that can change among
different channels is the identification of the entry points. For Blue-
tooth communication based on BluetoothSocket, we found two
possible entry points (i.e., where a BluetoothSocket stream starts
receiving data): BluetoothSocket.getInputStream and Input-
Stream.read. A typical Bluetooth communication flow involves
the former function, called to obtain an InputStream object, fol-
lowed by an invocation to the latter function. In the DDG of an
application containing this type of communication, the instructions
operating on data read from the channel are linked to both func-
tions. It would appear that InputStream.read is the best choice
for an entry point: semantically, it actually represents the point in
which the data from the stream enters the control flow of the app.
However, given the general use of class InputStream outside the
context of Bluetooth communication, this choice led to many false
positives in practical experiments. For this reason, the choice of
BluetoothSocket.getInputStream worked much better as defini-
tion for our entry point for Bluetooth. Although it is an instruction
preceding the actual read operation of data from the Bluetooth
stream, it uniquely identifies our protocol of interest. Moreover in
all the communication flows that we observed in Bluetooth apps
operating on BluetoothSockets, the functions are always used in
pairs.
5 EXPERIMENTAL EVALUATION
In this section we present and discuss the results about the experi-
ments we performed to validate our system.
5.1 Preliminary considerations
In order to test the efficacy of our algorithm we need to collect a
balanced dataset that contains both positive (i.e. apps with authen-
tication at application level) and negative samples (i.e. apps without
authentication). In our analysis we noticed that the security prob-
lem of CATCH afflicts all the Android apps using Bluetooth in our
dataset. For this reason the dataset is unbalanced. To test our system
under such conditions, we divided the experiments into two main
categories: (1) a dataset analysis on APKs retrieved from a research
repository [5], aiming at confirming the efficacy of the algorithm
on negative samples; (2) a targeted analysis on custom apps built
by applying code transformation techniques (e.g. obfuscation) for
proving that the authentication scheme is correctly detected by our
algorithm.
5.2 Dataset analysis of Android apps
To evaluate the efficacy of our system, we ran tests on a large
number of APKs collected from the Androzoo repository [5]. The
Androzoo dataset contains more than three million unique Android
apps, crawled from several Android markets: Google Play, Anzhi
and AppChina. In our experiments we pre-filtered APKs from the
dataset and selected non-obfuscated apps that use Bluetooth. We
decided to focus only on Bluetooth apps considering the amount of
manual analysis we performed during the design of our algorithm,
which could help us as a ground truth for validating our results. We
started analyzing a total of 210,425 APKs, randomly chosen from the
Androzoo repository. In order to select the appropriate Bluetooth
APKs we applied the following filter: check if an app (1) requires
the Bluetooth permissions in the manifest file; (2) contains certain
libraries and classes related to Bluetooth (e.g., BluetoothSocket).
The filter produced a total of 2,739 APKs.
We then applied a second filter where we exclude the obfuscated
apps since it is quite hard validate them at this first step. For this
filtering we focus on the ProGuard obfuscation tool, which is the
free software most commonly used by developers, and it is referred
in the Android Documentation [3]. In particular, we implemented
some heuristics for recognition based on the typical class names
(e.g. a.class) produced by ProGuard in obfuscated APKs. This
filter selected a total of 942 APKs from the initial set of 2,793, which
means that the majority of the apps in our dataset, almost 70%, use
ProGuard for code obfuscation. After running our algorithm, we
discovered that 704 of the selected apps do not have any entry point
for Bluetooth communication in the CFG. This happens in cases
where Bluetooth functionality is imported in some library/classes,
but never used in the code, so the instructions that we would mark
as entry points for our analysis never appear in the CFG/DDG. We
also excluded such APKs from our dataset. Finally, we obtained a
number of 238 APKs, suitable for our analysis and evaluation.
Detecting (Absent) App-to-app Authentication on Cross-device Short-distance Channels
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
We then performed our first experiment. We ran our system
on the 238 APKs without constant propagation enabled. This ex-
periment shows the important role of the constant propagation
technique on reducing false positives. It shows that 26 APKs out of
238 are found positive (i.e., about 11% of the APKs are potentially
performing authentication on data read from Bluetooth sockets)
and the rest are found negative (i.e., not performing authentication).
they never applied any checks on data received form the Bluetooth
channel.
In our second experiment, we enabled the constant propagation
technique and we ran our system on the same set of 238 APKs. In
this case we observed that all of the positive samples found pre-
viously were actually false positives (i.e., they used one constant
value in the parameter of the if statement marked as possible au-
thentication). This result shows that no app in the dataset performs
app-to-app authentication when using Bluetooth.
At this point, we manually investigated the negative cases to check
for any false negatives. To this end, for validating our results we
chose a sample of 20 random APKs from our dataset of 238 APKs
and we manually analyzed them. We observed that all of them
receive data from the Bluetooth channel, but they never apply any
checks on such data before using it. Our manual analysis found 0
false negatives. Our experiments show that 100% of the analyzed
APKs in our dataset which perform Bluetooth communication using
Bluetooth sockets are potentially vulnerable to the CATCH attack
model.
5.3 Dataset composition
We analyzed the composition of our dataset to make sure that we
did not run tests on sample/unused/abandoned apps. We sampled
300 APKs (containing permissions/classes for Bluetooth) from our
dataset, and performed a manual analysis by searching them on
Google Play. We found that about 30% of the apps were present on
this market. We classified the apps by category, depending on their
description. The vast majority of apps belongs in the following
categories:
• Game apps, where Bluetooth is used for playing peer-to-peer
• IoT apps for specific devices, where Bluetooth is used to send
• Business apps, using Bluetooth to send data from smartphone
and receive data from the controlled device or sensors
to computer, or again smartphone to device
Other categories with less APKs included health apps, used for
communicating with medical devices, cryptocurrency-related apps,
and smart home management apps.
5.4 Targeted analysis
For our second analysis, we built a custom app using Bluetooth. It
only performs these basic operations: it reads from a Bluetooth-
Socket when the user triggers an action, and it displays any re-
ceived content on screen. We then patched the app to include a
basic authentication scheme fitting our model: upon starting, the
app generates a random secret PIN of 4 digits, and shows it on the
screen. This secret needs to be communicated out-of-band to other
apps interacting with ours (e.g., verbally to another user wanting
to send data). When reading from the BluetoothSocket, the app
first expects to receive the PIN in plaintext, in the first four bytes
the system returns NO AUTH FOUND.
• Sample app without authentication and ProGuard disabled,
• Sample app without authentication and ProGuard enabled,
• Sample app with authentication and ProGuard disabled, the
• Sample app with authentication and ProGuard enabled, the
system returns POSSIBLE AUTH FOUND.
the system returns NO AUTH FOUND.
read from the socket’s InputStream. If the PIN matches the one
generated by the app, the communication is accepted; otherwise it
is rejected and the user is informed of the event. We found that our
algorithm correctly predicts the possible presence of authentication.
We ran another test to check if changes introduced by common
optimization and obfuscation tools would impact our algorithm. In
this case we validate the obfuscation transformation since we can
check the ground-truth provided by our application. In particular,
we used the ProGuard tool [2] on our sample app, since it is the
most commonly used by developers and it is recommended in
the Android documentation [3]. ProGuard performs a series of
transformations aiming to remove unnecessary code, and renames
types and variables to hinder reverse engineering. We ran ProGuard
on both versions of our test app (with and without authentication).
We found that the transformations introduced by this tool do not
impact the detection capabilities of our algorithm, which correctly
discriminates the apps’ behavior. In particular, we observed the
following results:
system returns POSSIBLE AUTH FOUND.
5.5 Analysis of obfuscated APKs
Our results from the targeted tests indicate that ProGuard trans-
formations do not affect the precision of our tool in the detection
of authentication. For this reason, we decided to run our tool on
ProGuard-obfuscated APKs from our dataset. We selected the 1797
obfuscated APKs that were initially discarded, and filtered them
for Bluetooth use and appearance of entry points in the CFG/DDG
as we did for non-obfuscated ones. This process yielded a total of
424 APKs, which we analyzed (combined with the previous exper-
iments, we have a total of 662 APKs analyzed that use Bluetooth
technology). 100% of the APKs were identified as negative (i.e., not
containing authentication) by our tool, with constant propagation
enabled. To validate this result, we manually analyzed 15 APKs,
randomly chosen from the obfuscated APKs dataset. Since our tool
indicates where the entry points are located in the CFG, and what
the possible authentication paths have been analyzed, we were able
to manually validate the absence of authentication checks, confirm-
ing that our heuristic approach is not only powerful enough for
detection, but also that it is resilient to the obfuscation techniques.
5.6 Performance Analysis
In this section we report the time needed for each phases of our
analysis.
Time Threshold. One of the main critical point for our analysis
is how to set a time threshold for building the CFG and DDG in
Argus-SAF, since the computational complexity explodes for large
applications, and the system is not able to construct the entire
graphs within reasonable time. After this threshold is hit while
analyzing a single component in an APK, Argus-SAF will stop its
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Stefano Cristalli, Long Lu, Danilo Bruschi, and Andrea Lanzi
analysis and move to the next component. In order to set up a
correct time threshold we need to be sure that the constructed CFG
and DDG include the Bluetooth entry points and the authentication
checks (if present). To this end, we performed some experiments on
APKs collected in our dataset. In particular, for each analyzed app
we first built the graphs by setting a certain time threshold T, and
we then search for Bluetooth entry points inside the computed CFG.
Afterwards, we compute the number of nodes that are dominated
by the entry point node in the graph that represents the number of
instructions that can potentially include the authentication scheme.
We start with a threshold of T = 30 sec., and then increase the value
to T = 60 sec. and T = 120 sec. By comparing the different results,
we notice two important things: (1) for any entry point, both the
number of reachable nodes in the CFG and the number of data
dependency nodes in the DDG are sufficient to contain a potential
authentication scheme. More in details we found on average more
than 10,000 instructions that are dominated by the entry point and
the CFG reachability from a single entry point to any node in the
graph is always above 99%, an expected result given by the inter-
component connections in Android code. (2) The variation of the
results between the three runs is minimal, that it means that we
generally do not miss any important information that would have
been considered adding more time of analysis. For this reason we
chose a threshold of 30sec. for our experiments.
Time of Analysis. For our tool a use case would be code validation
where the detector could serve as a pre-release tool to check for
unauthenticated communication. In such a context the tool should
perform its analysis in a short-time. In this direction we perform
several experiments that show the overhead of the analysis. In
particular the experiments were performed on a laptop running
Ubuntu Linux 17.10, with a Intel Core i7-6700HQ CPU (2.60GHz)
and 16 GB of RAM. We specifically measured the time taken to
analyze the 26 apps that were found positive by the first version of
our system (without constant propagation). The average time spent
for modeling the APK in Argus-SAF is 5 minutes, while the average
running time of our algorithm on the generated graphs is 2 minutes,
giving a total average time of 7 minutes. Although the variance is
high, we think that even the worst-case execution time is suitable
for the use cases we designed, considering that the release of an app
is not an instantaneous process, and that an average of 10 minutes
is a feasible testing time for an automated developing pipeline of
Android apps. Moreover we can decrease the time threshold for
building graphs from 2 minutes to 30 sec. and gain more efficiency
by reducing the average time from 7 to 5 minutes in total.
6 CASE STUDIES
In this section, we present two real attacks case studies that we
select from our dataset in which our analyzer gave negative results.
Such applications are representative of the common type of applica-
tions that can be used in peer-to-peer communication environment:
(1) chat app, (2) data sharing app. We will now discuss the attack
implementation, and the engineering effort required for its setup
and execution along with its own limitations.
6.1 Data injection on BluetoothChat
We target the Android BluetoothChat app [1]. This app is a working
example of peer-to-peer chat that is affected by CATCH problem,
since it does not implement any app-level authentication scheme.
The BluetoothChat app gives the user the possibility to scan for
nearby devices, connect to one of them by using RFCOMM identifier,
and then send text messages via Bluetooth. In this attack scenario
we will describe a data injection attack to a remote device.
Attack Preparation. To accomplish a successful attack we need
to satisfy two preliminaries requirements: (1) the malicious app
needs to recognize the presence (i.e., installation) of the target
application on the device. (2) the malicious app needs to detect
when the target application is opened and run on the device. These
two states, installed and opened, allow the malicious app to identify
a potential active connection between BluetoothChat applications
on different devices.
In order to detect the presence of the target app, the malicious
app can retrieve a list of installed apps by querying the PackageMan-
ager object. Such operation is not privileged and it can be executed
by any app installed on the device. For the Bluetooth Chat sample,
the malicious app can detect the installation of it just looking at
the package name. Once the presence of the vulnerable app has
been identified, the next step for the malicious app is to exploit
a legitimate communication for spoofing content and deliver the
attack payload. However, this may happen at unpredictable time
since the malicious app does not know when a remote commu-
nication will be activated. While it is possible for the malicious
app to continuously try to exploit the communication by using
polling technique, this is not desirable from the attacker’s perspec-
tive since it creates suspicious events that can be detected. The
best result would be achieved if the malicious app could monitor
the vulnerable app, and perform the attack only at the appropriate
time. While it is very difficult to fully monitor the behavior of other
apps from another app [30], a possible way to partially achieve the
result is to monitor the list of open apps, obtainable via the Activ-
ityManager class, specifically with the getRunningAppProcesses
method. Again, this information can be requested to the Android
system by any app without any specific privilege; the malicious
app can continuously poll this list, and try the attack when the
communication is open and running in foreground.
Payload Running. If the attacker has satisfied the previous two
requirements the attack can be performed successfully. In particular
for the BluetoothChat case, the attacker needs to install a malicious
app on one of the two devices that performs the communication.
The communication protocol over Bluetooth is implemented with
BluetoothSocket, with a RFCOMM identifier for the chat service.
If the attacker knows the identifier, his malicious app can send
messages to the app on the other device, which will be indistin-
guishable from benign ones. In this case, the app is open source, so
the RFCOMM identifier is embedded inside the application, and a
simple manual investigation can reveal it. Once the attacker knows
the identifier he can perform data injection on the remote device,
and send a message to a remote application. The impact of this
data injection is potentially high especially if the receiver trusts the
sender and for instance she is opening any forwarded links, which
Detecting (Absent) App-to-app Authentication on Cross-device Short-distance Channels
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
in this case could lead to phishing pages controlled by the attacker.
The following figure shows an example of hijacked communication
in BluetoothChat. The first two messages are written by the user
on the device Huawei P9 Lite, while the third is sent by our mali-
cious app; the receiving user on device Nexus 6 will be unable to
distinguish the malicious messages.
6.2 Data injection on Wi-Fi Direct +