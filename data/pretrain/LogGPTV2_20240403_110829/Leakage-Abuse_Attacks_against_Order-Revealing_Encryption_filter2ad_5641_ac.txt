### Proportion of the US Population and ZIP Code Distribution

The proportion of the total US population living in a given area was computed. Intuitively, one might expect that the distribution of ZIP codes in a nationwide database, such as the FOP (Fraternal Order of Police) dump, would mirror the distribution of people into ZIP codes. This is because more populous areas are likely to have more police officers, and therefore more FOP members. However, we observed that the two distributions are not particularly well-correlated. Consequently, our attacks below would be more effective with better auxiliary data.

### Data Recoverability in Large, Sparse Domains

In large, sparse domains, it is possible for a target datum to be "unrecoverable" according to our accuracy metrics, meaning its underlying plaintext does not exist in the auxiliary data. For birth dates and ZIP codes, this is not an issue, but it is for first and last names. On average, over 99% of first name records are recoverable, but only 91% of unique first names are. For last names, 89% of records and 71% of unique values are recoverable on average. We will not adjust our results to account for this artificial cap on attack accuracy, as a real adversary would face the same problem. This aligns with our conservative approach to auxiliary data. In Section V, we will evaluate an attack that does not require auxiliary data, thus this limitation does not apply there.

### The Non-Crossing Attack

#### NKW Cumulative Attack

In this section, we recall the NKW cumulative attack, which can work against OPE (Order-Preserving Encryption) and ORE (Order-Revealing Encryption) schemes that leak both frequency and order information. This includes all deterministic OPE schemes, such as those in references [5, 12, 26, 31, 37].

We discuss some limitations of the NKW attack in terms of efficiency and accuracy and propose a new attack called the non-crossing attack. This attack performs significantly better and works for any scheme where the original NKW cumulative attack is applicable. It also serves as a foundation for later sections when we leverage more leakage and stronger adversarial models.

#### Attack Setting

Following NKW, we consider known-ciphertext attacks with auxiliary information but no knowledge of any plaintexts. An attacker obtains a sequence of ciphertexts \( C = (c_1, \ldots, c_n) \) where \( c_i = E_K(m_i) \). Plaintexts may repeat and are drawn according to some (typically unknown) distribution \( p_m \) over a message space \( M \). The attacker has auxiliary information about \( p_m \), typically a sequence \( Z = (z_1, \ldots, z_\psi) \) of plaintexts believed to be drawn from \( M \) using a distribution close to \( p_m \).

For our datasets, it is always the case that \( n < \psi \). The NKW attack violated ordering constraints in every one of our experiments on real datasets. One can avoid such crossings by labeling edges with just the square distance of CDFs, but this approach performs poorly. Therefore, we seek a way to avoid violating ordering constraints while still utilizing available frequency information.

#### The Non-Crossing Attack

We introduce the non-crossing attack, which avoids crossings by solving a max-weight non-crossing bipartite matching problem on the graph \( G \). Since ordering constraints are encoded into the matching algorithm, we do not include any ordering information in our edge labels. Instead, we use the L1 distance of frequencies. For ciphertext \( i \) and auxiliary datum \( j \), the labeling function is:

\[ w(i, j) = \alpha - |H_C(i) - H_Z(j)| \]

where \( \alpha \) is a fixed constant parameter that converts a min-cost problem into a max-weight problem. In our context, any choice of \( \alpha > 1 \) will not change which matchings are maximum-weight, so the solution to the inference problem will be the same for any \( \alpha > 1 \). Different choices of \( \alpha \) will change the maximum weight, but this is inconsequential for our purposes.

This approach significantly improves computational performance over NKW: there is a well-known dynamic-programming approach that runs in time \( O(n\psi) \) to find the optimal non-crossing matching [32].

#### Results

We compare the non-crossing and cumulative attacks for our customer record datasets detailed in Section III. We could not scale the NKW's use of the Hungarian algorithm to complete in reasonable time for last name, birthdate, or ZIP code datasets. For the largest last name dataset, we estimated the NKW attack would take roughly one hundred days to complete a single experiment on the well-provisioned compute cluster used for the first name experiments. The Hungarian algorithm is highly nontrivial to parallelize, compounding its scalability issues.

For last names, birthdates, and ZIP codes, we compare our non-crossing attack to the NKW greedy attack. For first names, we compare the non-crossing attack with the exact Hungarian algorithm.

Figure 3 compares the success of the two attacks for first names (left bars) and last names (right bars), showing raw recovery rates for each dataset. The non-crossing attack always performs strictly better than NKW’s cumulative attack, sometimes substantially so, nearly doubling the average recovery rate (44% vs. 83%) for first names and septupling (5% vs. 38%) the average recovery rate for last names. When taken as a percentage of the "recoverable" names (those plaintexts that also appear in the auxiliary data), on average, we recover 84% of first names and 42% of last names.

The unusually low performance on the Illinois dataset is due to its small size—it is only about one-third the size of the next smallest dataset. Its small size impacts the statistical quality of the sample. For example, the most frequent first name only occurs 34 times, and the most frequent last name only occurs 10 times.

Figure 4 shows the average unique recovery rate for high-frequency first and last names. It is cumulative, so the x-axis labels refer to the recovery rate for that number of top names. For example, the point (40, 95) means the attack recovered 38 of the top 40 most frequent names, on average. Our attack is especially accurate for these values, leading us to conclude that for almost all datasets, no real security guarantee can be made for high-frequency names.

Inference on birthdates and ZIP codes is much less accurate for both attacks, with exact recovery rates less than 2% across the board. This occurred for two reasons. First, the auxiliary information available for attackers is not as accurate a reflection of the target data distribution compared to the names data. For example, our ZIP code data is not really a sample from the same distribution as our auxiliary data—the ZIP code frequencies in our auxiliary data are proportional to the number of people living there, but the frequencies in our target dataset are proportional to FOP membership, which varies state-to-state. Second, the distributions themselves are flatter and do not have frequency "peaks" that can be easily recovered by inference attacks.

We note that partial information is often leaked. The non-crossing attack’s prefix recovery rate was 34% for birthdates and 23% for ZIP codes. The corresponding prefix recovery rates for the NKW attack are similar. The non-crossing attack outperforms the baseline by about ten percent in overall prefix recovery for birth dates: we recovered the decade of birth for 75% of the unique birth dates in the database (16,847 out of 22,485). The non-crossing attack also recovered, on average, the first digit of a target ZIP code, giving the adversary the region of residence of the record (e.g., eastern seaboard, midwest, southwest). In all cases, the NKW with greedy heuristic attack performs worse than non-crossing.

In terms of runtime performance, both the NKW with greedy heuristic and the non-crossing attack are reasonably fast. They require at most ten and twelve hours, respectively, to run to completion on the FOP last name dataset, the largest of any we examined. It includes \( n \approx 116,000 \) unique ciphertexts and \( \psi \approx 151,000 \) unique values in the auxiliary data. The induced bipartite graph has around 17.4 billion edges. The non-crossing attack is slower than the greedy heuristic due to the need for a backtracking step (similar to the one used in the classical edit distance algorithm) to recover the edges of the max-weight matching. It also writes to two large data structures at each iteration of the inner loop, which can be slow if the memory layout is not tuned. We optimized our implementation by exploiting the fact that the algorithm only needs to examine two rows of the dynamic programming table at a time: the one currently being written to, and the previous one. We reuse two fixed-width buffers for these rows rather than allocating an entire \( n \times \psi \) matrix in memory. These two buffers are small enough to fit in the CPU’s cache, effectively halving the number of slow operations on DRAM and reducing the overall memory footprint by about 90%.

### Attacking the BCLO Scheme

The attacks discussed in the previous section only take advantage of frequency and order information. While there exist schemes that leak only this information (or even less), they are not the focus here.