### Display the Status of the Filesystem Using the `-f` Option

To display the status of the filesystem, use the `stat` command with the `-f` option. For example:

```bash
$ stat -f /
File: "/"
ID: 0
Namelen: 255
Type: ext2/ext3
Blocks: Total: 2579457, Free: 2008027, Available: 1876998
Size: 4096
Inodes: Total: 1310720, Free: 1215892
```

### Hack 27: The `diff` Command

The `diff` command compares two files and reports the differences. The output can be cryptic and difficult to read.

#### Syntax:
```bash
diff [options] file1 file2
```

#### Example:
To see what was modified in a new file compared to an old file, you can use the `-w` option to ignore whitespace:

```bash
# diff -w name_list.txt name_list_new.txt
2c2,3
< John M Doe
---
> Jason Bourne
```

- Lines above `---` indicate changes in the first file (`name_list.txt`).
- Lines below `---` indicate changes in the second file (`name_list_new.txt`).

### Hack 28: Display Total Connect Time of Users

The `ac` command displays statistics about user connect times.

#### Connect Time for the Current Logged-in User
Use the `-d` option to break down the output by individual days:

```bash
$ ac -d
Dec 1 total 1.08
Dec 2 total 0.99
Dec 3 total 3.39
Dec 4 total 4.50
Today total 6.10
```

#### Connect Time for All Users
Use the `-p` option to display the cumulative connect time for all users:

```bash
$ ac -p
john 3.64
madison 0.06
sanjay 88.17
nisha 105.92
ramesh 111.42
total 309.21
```

#### Connect Time for a Specific User
To get a connect time report for a specific user, use:

```bash
$ ac -d sanjay
Jul 2 total 12.85
Aug 25 total 5.05
Sep 3 total 1.03
Sep 4 total 5.37
Dec 24 total 8.15
Dec 29 total 1.42
Today total 2.95
```

### Chapter 5: PS1, PS2, PS3, PS4, and PROMPT_COMMAND

#### Hack 29: PS1 - Default Interaction Prompt

You can modify the default interactive prompt on your Linux system to be more informative. For example, change the default `PS1` from `\s-\v\$` to display the username, hostname, and current working directory:

```bash
-bash-3.2$ export PS1="\u@\h \w> "
ramesh@dev-db ~> cd /etc/mail
ramesh@dev-db /etc/mail>
```

- `\u`: Username
- `\h`: Hostname
- `\w`: Full pathname of the current directory (displays `~` when in the home directory)

To make this setting permanent, add the following line to either `.bash_profile` or `.bashrc`:

```bash
export PS1="\u@\h \w> "
```

#### Hack 30: PS2 - Continuation Interactive Prompt

For long commands that span multiple lines, you can change the default continuation prompt from `>` to something more descriptive, such as `continue->`:

```bash
ramesh@dev-db ~> myisamchk --silent --force --fast --update-state \
> --key_buffer_size=512M --sort_buffer_size=512M \
> --read_buffer_size=4M --write_buffer_size=4M \
> /var/lib/mysql/bugs/*.MYI

ramesh@dev-db ~> export PS2="continue-> "
ramesh@dev-db ~> myisamchk --silent --force --fast --update-state \
continue-> --key_buffer_size=512M --sort_buffer_size=512M \
continue-> --read_buffer_size=4M --write_buffer_size=4M \
continue-> /var/lib/mysql/bugs/*.MYI
```

#### Hack 31: PS3 - Prompt Used by `select` Inside Shell Script

You can define a custom prompt for the `select` loop inside a shell script using the `PS3` environment variable:

**Without PS3:**
```bash
ramesh@dev-db ~> cat ps3.sh
select i in mon tue wed exit
do
case $i in
mon) echo "Monday";;
tue) echo "Tuesday";;
wed) echo "Wednesday";;
exit) exit;;
esac
done

ramesh@dev-db ~> ./ps3.sh
1) mon
2) tue
3) wed
4) exit
#? 1
Monday
#? 4
```

**With PS3:**
```bash
ramesh@dev-db ~> cat ps3.sh
PS3="Select a day (1-4): "
select i in mon tue wed exit
do
case $i in
mon) echo "Monday";;
tue) echo "Tuesday";;
wed) echo "Wednesday";;
exit) exit;;
esac
done

ramesh@dev-db ~> ./ps3.sh
1) mon
2) tue
3) wed
4) exit
Select a day (1-4): 1
Monday
Select a day (1-4): 4
```

#### Hack 32: PS4 - Used by `set -x` to Prefix Tracing Output

The `PS4` shell variable defines the prompt displayed when executing a shell script in debug mode.

**Without PS4:**
```bash
ramesh@dev-db ~> cat ps4.sh
set -x
echo "PS4 demo script"
ls -l /etc/ | wc -l
du -sh ~

ramesh@dev-db ~> ./ps4.sh
++ echo 'PS4 demo script'
PS4 demo script
++ ls -l /etc/
++ wc -l
243
++ du -sh /home/ramesh
48K /home/ramesh
```

**With PS4:**
```bash
ramesh@dev-db ~> cat ps4.sh
export PS4='$0.$LINENO+ '
set -x
echo "PS4 demo script"
ls -l /etc/ | wc -l
du -sh ~

ramesh@dev-db ~> ./ps4.sh
../ps4.sh.3+ echo 'PS4 demo script'
PS4 demo script
../ps4.sh.4+ ls -l /etc/
../ps4.sh.4+ wc -l
243
../ps4.sh.5+ du -sh /home/ramesh
48K /home/ramesh
```

#### Hack 33: PROMPT_COMMAND

The `PROMPT_COMMAND` is executed just before displaying the `PS1` variable.

**Displaying on Different Lines:**
```bash
ramesh@dev-db ~> export PROMPT_COMMAND="date +%k:%m:%S"
22:08:42
ramesh@dev-db ~>
```

**Displaying on the Same Line:**
```bash
ramesh@dev-db ~> export PROMPT_COMMAND="echo -n [$(date +%k:%m:%S)]"
[22:08:51]ramesh@dev-db ~>
```

### Chapter 6: Colorful and Functional Shell Prompt Using PS1

#### Hack 34: Display Username, Hostname, and Basename of Directory in the Prompt

```bash
-bash-3.2$ export PS1="\u@\h \W> "
ramesh@dev-db ~> cd /etc/mail
ramesh@dev-db mail>
```

- `\u`: Username
- `\h`: Hostname
- `\W`: Base name of the current working directory

#### Hack 35: Display Current Time in the Prompt

You can display the current time in the prompt using the `$(date)` command or special sequences like `\t` and `\@`.

**Using `$(date)`:**
```bash
ramesh@dev-db ~> export PS1="\u@\h [\$(date +%k:%m:%S)]> "
ramesh@dev-db [11:09:56]>
```

**Using `\t` (hh:mm:ss format):**
```bash
ramesh@dev-db ~> export PS1="\u@\h [\t]> "
ramesh@dev-db [12:42:55]>
```

**Using `\@` (12-hour am/pm format):**
```bash
ramesh@dev-db ~> export PS1="[\@] \u@\h> "
[04:12 PM] ramesh@dev-db>
```

#### Hack 36: Display Output of Any Command in the Prompt

You can display the output of any command in the prompt. For example, to display the history number, hostname, kernel version, and status of the last command:

```bash
ramesh@dev-db ~> kernel_version=$(uname -r)
ramesh@dev-db ~> export PS1="\!|\h|$kernel_version|\$?> "
473|dev-db|2.6.25-14.fc9.i686|0>
```

- `\!`: History number of the command
- `\h`: Hostname
- `$kernel_version`: Output of the `uname -r` command
- `\$?`: Status of the last command

#### Hack 37: Change Foreground Color of the Prompt

To change the foreground color of the prompt, use escape sequences. For example, to display the prompt in blue:

**Light Blue:**
```bash
$ export PS1="\e[0;34m\u@\h \w> \e[m "
```

**Dark Blue:**
```bash
$ export PS1="\e[1;34m\u@\h \w> \e[m "
```

- `\e[`: Indicates the beginning of a color prompt
- `x;ym`: Indicates the color code (e.g., `0;34` for light blue, `1;34` for dark blue)
- `\e[m`: Indicates the end of the color prompt

**Color Code Table:**
- Black: `0;30`
- Blue: `0;34`
- Green: `0;32`
- Cyan: `0;36`
- Red: `0;31`
- Purple: `0;35`
- Brown: `0;33`

To make the color change permanent, add the following lines to `~/.bash_profile` or `~/.bashrc`:

```bash
STARTCOLOR='\e[0;34m';
ENDCOLOR="\e[0m"
export PS1="$STARTCOLOR\u@\h \w> $ENDCOLOR"
```

#### Hack 38: Change Background Color of the Prompt

To change the background color, use the appropriate escape sequence. For example, to set a light gray background:

```bash
$ export PS1="\e[47m\u@\h \w> \e[m "
```

To combine foreground and background colors:

```bash
$ export PS1="\e[0;34m\e[47m\u@\h \w> \e[m "
```

To make the background and foreground color changes permanent, add the following to `~/.bash_profile` or `~/.bashrc`:

```bash
STARTFGCOLOR='\e[0;34m';
STARTBGCOLOR="\e[47m"
ENDCOLOR="\e[0m"
export PS1="$STARTFGCOLOR$STARTBGCOLOR\u@\h \w> $ENDCOLOR"
```

**Background Color Codes:**
- `\e[40m`
- `\e[41m`
- `\e[42m`
- `\e[43m`
- `\e[44m`
- `\e[45m`
- `\e[46m`
- `\e[47m`

#### Hack 39: Display Multiple Colors in the Prompt

You can display multiple colors in the same prompt by defining a function in `~/.bash_profile`:

```bash
function prompt {
    local BLUE="\[\033[0;34m\]"
    local DARK_BLUE="\[\033[1;34m\]"
    local RED="\[\033[0;31m\]"
    local DARK_RED="\[\033[1;31m\]"
    local NO_COLOR="\[\033[0m\]"

    case $TERM in
        xterm*|rxvt*)
            TITLEBAR='\[\033]0;\u@\h:\w\007\]'
            ;;
        *)
            TITLEBAR=""
            ;;
    esac

    PS1="\u@\h [\t]> "
    PS1="${TITLEBAR}${BLUE}\u@\h ${RED}[\t]>$NO_COLOR "
    PS2='continue-> '
    PS4='$0.$LINENO+ '
}
```

This function sets up a colorful and functional prompt with multiple colors and additional features.