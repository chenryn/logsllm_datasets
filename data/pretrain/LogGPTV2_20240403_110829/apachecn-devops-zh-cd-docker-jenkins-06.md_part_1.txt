# 六、将 Ansible 用于配置管理
我们已经介绍了持续交付过程中最关键的两个阶段:提交阶段和自动化验收测试。在本章中，我们将重点介绍配置管理，它将虚拟容器化环境连接到真实的服务器基础架构。
本章包括以下几点:
*   介绍配置管理的概念
*   解释最流行的配置管理工具
*   讨论可能的要求和安装过程
*   对特定命令使用 Ansible
*   用行动手册展示 Ansible 自动化的力量
*   解释可转换的角色和可转换的星系
*   实现部署过程的用例
*   将 Ansible 与 Docker 和 Docker Compose 一起使用
# 引入配置管理
配置管理是一个控制配置更改的过程，其方式是系统随着时间的推移保持完整性。尽管该术语并非源于信息技术行业，但目前它被广泛用于指软件和硬件。在这方面，它涉及以下方面:
*   **应用配置**:这涉及决定系统如何工作的软件属性，通常以传递给应用的标志或属性文件的形式表示，例如数据库地址、文件处理的最大块大小或日志记录级别。它们可以在不同的开发阶段应用:构建、打包、部署或运行。
*   **基础设施配置**:这涉及到服务器基础设施和环境配置，负责部署流程。它定义了应该在每台服务器上安装哪些依赖项，并指定了编排应用的方式(哪个应用在哪个服务器上运行，在多少个实例中运行)。
举个例子，我们可以想到计算器 web 服务，它使用 Redis 服务器。让我们看一下展示配置管理工具如何工作的图表。
![](img/886430b5-6e25-4fba-925d-5e18c53eea0d.png)
配置管理工具分别读取配置文件和准备环境(安装相关工具和库，将应用部署到多个实例)。
在上例中，**基础设施配置**规定了**计算器**服务应该在两个实例中部署在**服务器 1** 和**服务器 2** 上，并且 **Redis** 服务应该安装在**服务器 3** 上。**计算器应用配置**指定 **Redis** 服务器的端口和地址，以便服务可以通信。
Configuration can differ depending on the type of the environment (QA, staging, production), for example, server addresses can be different.
配置管理有许多方法，但是在我们研究具体的解决方案之前，让我们先来评论一下一个好的配置管理工具应该具有哪些特征。
# 良好配置管理的特征
现代配置管理解决方案应该是什么样的？让我们来看看最重要的因素:
*   **自动化**:每个环境都应该是可自动复制的，包括操作系统、网络配置、安装的软件和部署的应用。在这种方法中，修复生产问题只意味着自动重建环境。此外，这简化了服务器复制，并确保转移和生产环境完全相同。
*   **版本控制**:配置的每一个变化都要跟踪，这样我们就知道是谁做的，为什么做，什么时候做。通常，这意味着将配置与代码一起保存在源代码库中，或者保存在单独的位置。建议使用前一种解决方案，因为配置属性的生命周期不同于应用本身。版本控制还有助于解决生产问题—配置总是可以回滚到以前的版本，并且环境会自动重建。基于版本控制的解决方案的唯一例外是存储凭据和其他敏感信息-这些永远不应该签入。
*   **增量更改**:应用配置更改不需要重建整个环境。相反，配置中的一个小变化应该只改变基础架构的相关部分。
*   **服务器配置**:得益于自动化，添加新的服务器应该和将其地址添加到配置中(并执行一个命令)一样快。
*   **安全性**:对配置管理工具及其控制下的机器的访问应该得到很好的保护。当使用 SSH 协议进行通信时，需要很好地保护对密钥或凭证的访问。
*   **简单性**:团队中的每个成员都应该能够阅读配置，进行更改，并将其应用到环境中。属性本身也应该尽可能地保持简单，那些不会改变的属性最好保持硬编码。
在创建配置时，甚至在选择正确的配置管理工具之前，记住这些要点是很重要的。
# 配置管理工具概述
最流行的配置管理工具是 Ansible、Puppet 和 Chef。他们每个人都是不错的选择；它们都是开源产品，有免费的基础版和付费的企业版。它们之间最重要的区别是:
*   **配置语言**:大厨用 Ruby，傀儡用自己的 DSL(基于 Ruby)，Ansible 用 YAML。
*   **基于代理的** : Puppet 和 Chef 使用代理进行通信，这意味着每个被管理的服务器都需要安装一个专门的工具。相反，Ansible 是无代理的，使用标准 SSH 协议进行通信。
无代理功能是一个显著的优势，因为它意味着不需要在服务器上安装任何东西。更重要的是，Ansible 很快就呈上升趋势，这也是它被选入本书的原因。然而，其他工具也可以成功地用于持续交付流程。
# 安装 Ansible
Ansible 是一个开源的无代理自动化引擎，用于软件配置、配置管理和应用部署。它的第一次发布是在 2012 年，它的基本版本对个人和商业用户都是免费的。企业版名为 Ansible Tower，提供了图形用户界面管理和仪表板、REST 应用编程接口、基于角色的访问控制以及其他一些功能。
我们介绍了安装过程，并描述了如何与 Docker 一起单独使用。
# 可理解的服务器要求
Ansible 使用 SSH 协议进行通信，对其管理的机器没有特殊要求。也没有中央主服务器，所以在任何地方安装 Ansible 客户端工具就足够了，我们已经可以使用它来管理整个基础设施。
The only requirement for the machines being managed is to have the Python tool and, obviously, the SSH server installed. These tools are, however, almost always available by default on any server.
# 可拆卸安装
安装说明因操作系统而异。就 Ubuntu 而言，运行以下命令就足够了:
```
$ sudo apt-get install software-properties-common
$ sudo apt-add-repository ppa:ansible/ansible
$ sudo apt-get update
$ sudo apt-get install ansible
```
You can find the installation guides for all operating systems on the official Ansible page at: [http://docs.ansible.com/ansible/intro_installation.html](http://docs.ansible.com/ansible/intro_installation.html).
安装过程完成后，我们可以执行 Ansible 命令来检查一切是否安装成功。
```
$ ansible --version
ansible 2.3.2.0
    config file = /etc/ansible/ansible.cfg
    configured module search path = Default w/o overrides
```
# 基于 Docker 的可移植客户端
也可以将 Ansible 用作 Docker 容器。我们可以通过运行以下命令来实现:
```
$ docker run williamyeh/ansible:ubuntu14.04
ansible-playbook 2.3.2.0
 config file = /etc/ansible/ansible.cfg
 configured module search path = Default w/o overrides
```
The Ansible Docker image is no longer officially supported, so the only solution is to use the community-driven version. You can read more on its usage on the Docker Hub page.
# 使用 Ansible
为了使用 Ansible，首先我们需要定义库存，它代表了可用的资源。然后，我们将能够使用 Ansible 行动手册执行单个命令或定义一组任务。
# 创建库存
清单是由 Ansible 管理的所有服务器的列表。每台服务器只需要安装 Python 解释器和 SSH 服务器。默认情况下，Ansible 假设 SSH 密钥用于身份验证；但是，也可以通过在 Ansible 命令中添加`--ask-pass`选项来使用用户名和密码。
SSH keys can be generated with the `ssh-keygen` tool and are usually stored in the `~/.ssh` directory.
库存在`/etc/ansible/hosts`文件中定义，其结构如下:
```
[group_name]
...
```
The inventory syntax also accepts ranges of servers, for example, `www[01-22].company.com`. The SSH port should also be specified if it's anything other than 22 (the default one). You can read more on the official Ansible page at: [http://docs.ansible.com/ansible/intro_inventory.html](http://docs.ansible.com/ansible/intro_inventory.html).
清单文件中可能有 0 个或多个组。例如，让我们在一组服务器中定义两台机器。
```
[webservers]
192.168.0.241
192.168.0.242
```
我们还可以使用服务器别名创建配置，并指定远程用户:
```
[webservers]
web1 ansible_host=192.168.0.241 ansible_user=admin
web2 ansible_host=192.168.0.242 ansible_user=admin
```
前面的文件定义了一个名为`webservers`的组，它由两个服务器组成。Ansible 客户端将作为用户`admin`登录到两者。创建清单后，让我们看看如何使用它在许多服务器上执行相同的命令。
Ansible offers a possibility to dynamically pull the inventory from the cloud provider (for example, Amazon EC2/Eucalyptus), LDAP, or Cobbler. Read more about dynamic inventories at: [http://docs.ansible.com/ansible/intro_dynamic_inventory.html](http://docs.ansible.com/ansible/intro_dynamic_inventory.html).
# 临时命令
我们能运行的最简单的命令是对所有服务器进行 ping。
```
$ ansible all -m ping
web1 | SUCCESS => {
 "changed": false,
 "ping": "pong"
}
web2 | SUCCESS => {
 "changed": false,
 "ping": "pong"
}
```
我们使用了`-m `选项，它允许指定应该在远程主机上执行的模块。结果是成功的，这意味着服务器是可访问的，并且身份验证配置正确。
A full list of modules available in Ansible can be found on the page: [http://docs.ansible.com/ansible/modules.htm](http://docs.ansible.com/ansible/modules.htm)l.
请注意，我们使用了`all`，因此所有服务器都将被寻址，但是我们也可以通过组名`webservers`或单个主机别名来调用它们。作为第二个例子，让我们只在其中一个服务器上执行一个 shell 命令。
```
$ ansible web1 -a "/bin/echo hello"
web1 | SUCCESS | rc=0 >>
hello
```
`-a `选项指定传递给 Ansible 模块的参数。在这种情况下，我们没有指定模块，所以参数作为 shell Unix 命令执行。结果成功，打印`hello`。
If the `ansible` command is connecting to the server for the first time (or the server is reinstalled), then we are prompted with the key confirmation message (SSH message when the host is not present in `known_hosts`). Since it may interrupt an automated script, we can disable the prompt message by uncommenting `host_key_checking = False` in the `/etc/ansible/ansible.cfg` file or by setting the environment variable `ANSIBLE_HOST_KEY_CHECKING=False`.
在其简单的形式中，Ansible 即席命令语法如下:
```
ansible  -m  -a 
```
临时命令的目的是在不需要重复的情况下快速完成某件事。例如，我们可能想要检查服务器是否处于活动状态，或者在圣诞节期间关闭所有机器的电源。这种机制可以看作是在一组机器上执行命令，并由模块提供额外的语法简化。然而，Ansible 自动化的真正力量在于行动手册。
# 剧本
Ansible 行动手册是一个配置文件，它描述了应该如何配置服务器。它提供了一种方法来定义应该在每台机器上执行的任务序列。剧本是用 YAML 配置语言表达的，这使得它易于阅读和理解。让我们从一个示例剧本开始，然后看看我们如何使用它。
# 定义行动手册
剧本由一部或多部戏剧组成。每个游戏都包含主机组名称、要执行的任务和配置详细信息(例如，远程用户名或访问权限)。示例行动手册可能如下所示:
```
---
- hosts: web1
  become: yes
  become_method: sudo
  tasks:
  - name: ensure apache is at the latest version
    apt: name=apache2 state=latest
  - name: ensure apache is running
    service: name=apache2 state=started enabled=yes
```
该配置包含一个播放:
*   仅在主机上执行`web1`
*   使用`sudo`命令获得根访问权限
*   执行两项任务:
    *   安装最新版本的`apache2`:ansi ble 模块`apt`(用两个参数`name=apache2`和`state=latest`调用)检查服务器上是否安装了`apache2`包，如果没有，则使用`apt-get`工具安装`apache2`
    *   运行`apache2`服务:Ansible 模块`service`(用三个参数`name=apache2`、`state=started`、`enabled=yes`调用)检查 Unix 服务`apache2`是否启动，如果没有，则使用`service`命令启动
While addressing the hosts, you can also use patterns, for example, we could use `web*` to address both `web1` and `web2`. You can read more about Ansible patterns at: [http://docs.ansible.com/ansible/intro_patterns.html](http://docs.ansible.com/ansible/intro_patterns.html).
请注意，每个任务都有一个人类可读的名称，该名称在控制台输出中使用，例如`apt`和`service`是可翻译的模块，`name=apache2`、`state=latest`和`state=started`是模块参数。我们已经在使用临时命令时看到了 Ansible 模块和参数。在前面的剧本中，我们只定义了一个剧本，但是可以有很多个剧本，每个剧本可以与不同的主持人组相关联。
例如，我们可以在清单中定义两组服务器:`database`和`webservers`。然后，在剧本中，我们可以指定应该在所有数据库主机上执行的任务，以及应该在所有 web 服务器上执行的一些不同的任务。通过使用一个命令，我们可以设置整个环境。
# 执行行动手册
定义 playbook.yml 后，我们可以使用`ansible-playbook`命令执行。
```
$ ansible-playbook playbook.yml
PLAY [web1] ***************************************************************
TASK [setup] **************************************************************
ok: [web1]
TASK [ensure apache is at the latest version] *****************************
changed: [web1]
TASK [ensure apache is running] *******************************************
ok: [web1]
PLAY RECAP ****************************************************************
web1: ok=3 changed=1 unreachable=0 failed=0   
```
If the server requires entering the password for the `sudo` command, then we need to add the `--ask-sudo-pass` option to the `ansible-playbook` command. It's also possible to pass the `sudo` password (if required) by setting the extra variable `-e ansible_become_pass=`.
剧本配置已执行，因此`apache2`工具已安装并启动。请注意，如果任务改变了服务器上的某些东西，它将被标记为`changed`。相反，如果没有变化，则标记为`ok`。
It is possible to run tasks in parallel using the `-f ` option.
# 剧本的幂等性
我们可以再次执行命令。
```
$ ansible-playbook playbook.yml
PLAY [web1] ***************************************************************
TASK [setup] **************************************************************