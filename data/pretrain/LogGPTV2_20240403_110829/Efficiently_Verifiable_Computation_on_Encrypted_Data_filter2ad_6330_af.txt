To see the amortized closed-form eﬃciency, note that
W = gρb = gb(cid:80)t
(cid:80)t
t(cid:89)
t(cid:89)
=
i=1 fivi = g
i=1 fi(bvi) =
(gbvi)fi
FK(∆, i)fi mod N = ˆf (FK(∆, 1), . . . , FK(∆, t))
i=1
i=1
(cid:117)(cid:116)
5 Computing Multi-Variate Polynomials of Degree 2
In this section we propose an eﬃcient VC scheme for computations that can be expressed as multi-
variate polynomials of degree 2. The basic idea of the construction is to apply the homomorphic
MAC scheme of [7] on top of the (slight variation) of the BV homomorphic encryption scheme
described in section 4.1, where (in this section) q is chosen to be prime. The homomorphic MAC of
[7] indeed allows to authenticate degree-2 arithmetic computations over Zq and achieves amortized
eﬃcient veriﬁcation, i.e., after a pre-computation phase whose cost is the same as running f , every
output of f can be veriﬁed in constant time. However, a straightforward application of the scheme
[7] on top of BV ciphertexts would require to: (1) authenticate each of the 2n Zq-components
of a BV ciphertext, and (2) authenticate the BV evaluation circuit ˆf : Z2nt
instead of
q → Zq. Essentially, this would incur into a O(n) blowup in all algorithms.
f : Zt
In contrast, we signiﬁcantly improve over this approach in two main ways. First, we apply
our collision-resistant homomorphic hash function ˆH which allows to compress a BV ciphertext
into a pair of group elements (T, U ), yet ˆH is a ring homomorphism for Zq[X][Y ]. Second, we
modify the homomorphic MAC scheme of [7] so that it can authenticate group elements of the
form (T, U ) ∈ G1 × G2 (instead of Zq values). Combining these two ideas allows us to avoid the
O(n) blow-up (see section 10 for a concrete comparison).
q → Z3n
q
Our scheme VCquad is speciﬁed as follows:
23
KeyGen(f, λ) → (P K, SK):
– Run bgpp $← G(1λ) to generate the description of asymmetric bilinear groups bgpp = (q,
G1, G2, GT , e, g, h), where G1, G2 and GT are groups of the same prime order q, g ∈ G1 and
h ∈ G2 are two generators, and e : G1 × G2 is a non-degenerate bilinear map.
– Run HE.ParamGen(λ) to get the description of the parameters for the somewhat homo-
morphic encryption scheme using the same q chosen in the previous step; run (pk, dk) $←
HE.KeyGen(). Let Rp := Zp[X]/Φm(X) be the polynomial ring where Φm(X) is the mth
cyclotomic polynomial of degree n = ϕ(m). The message space M is the ring Rp. Also, let
D = {µ ∈ Zq[X, Y ] : degX (µ) ≤ 2(n − 1), degY (µ) ≤ 2}.
– Choose a random member of the hash function family ˆH : D → G1 × G2 by running
(κ, ˆK) $← ˆH.KeyGen. For the convenience of our scheme we do not use the public key of ˆH.
– Choose a random value a $← Zq, and run (K, pp) $← PRF.KeyGen(1λ) to obtain the seed
K of a function FK : {0, 1}∗ × {0, 1}∗ → G1 × G2. In particular, FK is supposed to be
computationally indistinguishable from a function that outputs (R, S) ∈ G1 × G2 such that
DLogg(R) = DLogh(S) is uniform over Zq (i.e., e(R, h) = e(g, S)).
algorithm of F, i.e., ωf←CFEvaloﬀ
– Compute a concise veriﬁcation information for f by using the oﬄine closed-form eﬃcient
τ (K, f ).
– Output the secret key SK = (pk, dk, κ, a, K, ωf ), and the public evaluation key P K =
(pk, pp, f ).
ProbGenSK(x = (x1, . . . , xt)) → σx, τx:
– Choose an arbitrary string ∆ ∈ {0, 1}λ as an identiﬁer for the input vector x.
– For i = 1 to t: ﬁrst run µi
$← HE.Encpk(xi) to obtain a ciphertext µi ∈ Rq[Y ], and compute
its hash value (Ti, Ui)← ˆHκ(µi). Next, run (Ri, Si)←FK(∆, i), compute
Xi ← (Ri · T −1
i
)1/a ∈ G1, Yi ← (Si · U−1
i
)1/a ∈ G2,
and set σi = (Ti, Ui, Xi, Yi, Λi = 1) ∈ (G1 × G2)2 × GT .
– Output σx = (∆, µ1, σ1, . . . , µt, σt), and τx = ⊥.
Note that ProbGen can work in the streaming model in which every input item xi can be
processed separately.
ComputeP K(σx) → σy:
– Let f be an admissible circuit and σx = (∆, µ1, σ1, . . . , µt, σt).
– First, run µ←HE.Evalpk(f, µ1, . . . , µt) to homomorphically evaluate f over the ciphertexts
(µi).
– Next, homomorphically evaluate f over the authentication tags (σ1, . . . , σt)). To do so,
proceed gate-by-gate over f as described below.
GateEval(fg, σ(1), σ(2)) → σ . Parse σ(i) = (T (i), U (i), X (i), Y (i), Λ(i)) ∈ (G1 × G2)2 × GT for
i = 1, 2, where fg equals + or ×. Compute σ = (T, U, X, Y, Λ) as:
Addition. If fg = +:
T ← T (1) · T (2), U ← U (1) · U (2), X ← X (1) · X (2), Y ← Y (1) · Y (2), Λ ← Λ(1) · Λ(2).
Multiplication by constant. If fg = × and one of the two inputs, say σ(2), is a
constant c ∈ Zq:
T ← (T (1))c, U ← (U (1))c, X ← (X (1))c,
Y ← (Y (1))c, Λ ← (Λ(1))c.
24
Multiplication. If fg = ×: if deg(µ(1)) > 1 or deg(µ(2)) > 1, reject; else:
T ← e(T (1), U (2)), U ← e(T (2), U (1)), Λ ← e(X (1), Y (2)),
Y ← e(T (1), Y (2))e(T (2), Y (1)).
X ← e(X (1), U (2))e(X (2), U (1)),
Note that after a multiplication, it is not necessary to keep U and Y , as (for honestly
computed tags) T = U and X = Y . We keep them only for ease of description.
– Let σ be the authentication tag obtained after evaluating the last gate of f .
Output σy = (∆, µ, σ).
VerifySK(σy = (∆, µ, σ), τx) → (acc, x(cid:48)):
– Parse SK = (pk, dk, κ, a, K, ωf ) as the secret key where ωf is the concise veriﬁcation in-
formation for f . Let σ = (T, U, X, Y, Λ) be the purported authentication tag for ciphertext
µ.
– Run the online closed-form eﬃcient algorithm of F on ∆, to compute W←CFEvalon
– If deg(f ) = 2, compute ˆν ← ˆHκ(µ) and check the following equalities over GT :
∆ (K, ωf ).
T = U = ˆν
X = Y
W = T · (X)a · (Λ)a2
(7)
(8)
(9)
If deg(f ) = 1, compute (νT , νU ) = ˆHκ(µ) and check the following equations
(T, U ) = (νT , νU )
e(X, h) = e(g, Y )
W = e(T · (X)a, h)
If all equations are satisﬁed set acc = 1 (accept). Otherwise, set acc = 0 (reject).
– If acc = 1, then set x(cid:48) ← BV.Decdk(µ). Otherwise set x(cid:48) = ⊥. Finally, return (acc, x(cid:48)).
Theorem 6. If F is a pseudorandom function, ˆH is a collision-resistant homomorphic hash func-
tion and HE is a semantically secure homomorphic encryption scheme, then VCquad is correct,
adaptively secure and input private.
Proof. For correctness, if both the client and the server are honest, then we show that all three
veriﬁcation equations are satisﬁed.
and let f : Zt
Let σx = (∆, µ,σ1, . . . , µt, σt) be an input encoding as generated by ProbGen on x = (x1, . . . , xt).
q → Zq be an arithmetic circuit of degree-2. Without loss of generality, parse
f (Z1, . . . , Zt) =
ηi,j · Zi · Zj +
ηk · Zk,
(10)
i,j=1
k=1
for some ηi,j, ηk ∈ Zq. Deﬁne ˆf : (G1 × G2)t → GT as the compilation of f on group elements as:
t(cid:88)
t(cid:89)
t(cid:88)
t(cid:89)
i,j=1
k=1
25
ˆf (A1, B1, . . . , At, Bt) =
e(Ai, Bj)ηi,j ·
e(Ak, h)ηk ,
(11)
Correctness of veriﬁcation equation (7) is as follows
ˆHκ(µ) = e(g, h)Hκ(HE.Eval(ek,f,µ1,...,µt)) = e(g, h)f (Hκ(µ1),...,Hκ(µt)) = ˆf (T1, U1, . . . , Tt, Ut) = T,
where the second equality holds by the fact that ˆH is homomorphic; the third equality holds by
equation (11), by construction of Ti and Ui in ProbGen (i.e., from that e(Ti, h) = e(g, Ui)), and
by the fact that Zq is isomorphic to the bilinear groups G1, G2, GT ; the last equality holds by the
deﬁnition of GateEval over the (Ti, Ui) pairs. Also, the equality T = U (over GT ) holds in equation
(7) by construction of Ti and Ui in ProbGen.
To see correctness of equation (8) we ﬁrst observe that by construction of ProbGen we have
that DLogg(Xi) = DLogh(Yi) and DLogg(Ti) = DLogh(Ui). Second, we observe that such invariant
is preserved after every execution of GateEval.
To see correctness of equation (9) we proceed in an inductive way. Observe that one can see the
function f (z1, . . . , zt) as the composition of two functions fg(f1(z1, . . . , zt), f2(z1, . . . , zt)) in the last
gate fg of f . More generally, one can see every gate fg of f as computing the function fg (addition
or multiplication) of the two input functions.
So, we ﬁrst note that by construction every σi = (Ti, Ui, Xi, Yi, Λi) satisﬁes equation (9) with
respect to the projection function πi(z1, . . . , zt) = zi:
Wi = ˆπi(R1, S1, . . . , Rt, St) = e(Ri, h) = e(Ti · X a
i , h)
Next, assume that for i = 1, 2 σi = (Ti, Ui, Xi, Yi, Λi) satisﬁes equation (9) with respect to
fi(z1, . . . , zt). We show below that σ = GateEval(fg, σ1, σ2) satisﬁes equation (9) with respect to
f = fg(f1, f2). For i = 1, 2 let Wi = ˆfi(R1, S1, . . . , Rt, St) and let ˆW = ˆfg(W1, W2).
In the case where fg is an addition or a multiplication by constant, it is easy to verify that
T · (X)a · (Λ)a2
= ˆfg(T1, T2) · ( ˆfg(X1, X2))a · ( ˆfg(Λ1, Λ2))a2
= ˆfg(W1, W2)
If fg is a multiplication, the inductive assumption essentially says that X a
i = ˜WiU−1
Y a
and
, where Wi ∈ G1 and ˜Wi ∈ G2 are such that e(Wi, h) = e(g, ˜Wi). Therefore, we have:
T · (X)a · (Λ)a2
i
i
i = WiT −1
= e(T1, U2) · [e(X1, U2)e(X2, U1)]a · [e(X1, Y2)]a2
= e(T1, U2) · [e(W1T −1
= e(W1, ˜W2) = W
, U2)e(W2T −1
, U1)]e(W1T −1
1
2
, ˜W2U−1
2 )
1
To prove security we show the following sequence of games.
A
[VCquad, λ].
Game 0: this is the experiment ExpAdap−V erif
Game 1: this is like Game 0, except that, when answering veriﬁcation queries, the value W is
computed as ˆf (R1, S1, . . . , Rt, St), instead of using the closed-form eﬃcient algorithm. By the
correctness of the closed-form eﬃcient PRF Game 1 is identically distributed to Game 0.
Game 2: this game is the same as Game 1, except that the PRF is replaced by the function
R(∆, i) = (gr, hr) in which r is the output of a truly random function R(cid:48) : {0, 1}∗ × [1, t] → Zq.
Via a simple reduction to the security of the PRF it is possible to show that Game 2 is compu-
tationally indistinguishable from Game 1.
26
Game 3: this is like Game 2 except that the challenger answers with 0 (reject) every veriﬁcation
query σy = (∆, µ, σ) in which ∆ was never chosen in a ProbGen query during the experiment.
It is possible to show that Game 3 is statistically close to Game 2 information theoretically.
To see this, observe that when verifying such a query the value W is = ˆf (R1, S1, . . . , Rt, St)
which can also be written as W = e(g, h)f (r1,...,rt). Since ∆ was never queried before, every
ri = R(cid:48)(∆, i) is freshly random. Hence, by Schwartz-Zippel Lemma we have that the probability
of f (r1, . . . , rt) hitting any given value of Zq is bounded by 2/q.
Game 4: this game is the same as Game 3 except for the following changes. First, on every
veriﬁcation query σy = (∆, µ, σ) the challenger immediately rejects if equations (7) or (8)
are not satisﬁed. Otherwise, assume that ∆ was previously generated in a ProbGen query
(otherwise the query is rejected as well by the modiﬁcation in game 3), and let ˜µ1, ˜σ1, . . . , ˜µt, ˜σt
be the corresponding values obtained in that ProbGen query. From such values compute
˜σ = ( ˜T , ˜U , ˜X, ˜Y , ˜Λ) and ˜µ = HE.Eval(ek, ˜µ1, . . . , ˜µt) as in the Compute algorithm. Next, if
σ = ˜σ (component-wise) the challenger accepts. Otherwise, if σ (cid:54)= ˜σ it checks if
T · (X)a · Λa2
= ˜T · ( ˜X)a · ( ˜Λ)a2
(12)
and accepts if this equation is satisﬁed. Otherwise, it rejects.
By carefully analyzing the changes introduced in Game 3, we note that these are only syntactic
modiﬁcations. In particular, by the correctness of Compute replacing the check of equation (9)
with the equation (12) above leads to identically distributed answers: by correctness ˜T · ( ˜X)a ·
( ˜Λ)a2 is equal to the same W used to verify σy. Therefore, Game 4 is identically distributed as
Game 3.
Game 5: this game is like Game 4, except that if σ (cid:54)= ˜σ and equation (12) is satisﬁed, then Game
5 answers the query with 0 (reject), and sets an (initially false) ﬂag bad to true.
It is easy to see that Game 5 is identical to Game 4 up to the event that the ﬂag bad is set
to true. Let Bad5 be such event. We show in Claim 1 that Pr[Bad5] is negligible (information-
theoretically).
Game 6: this game is the same as Game 5 except for a change in answering the following ver-
iﬁcation queries. Let σy = (∆, µ, σ) be a query such that: ∆ was previously obtained from
ProbGen, σ = ˜σ (as described in Game 4), and bad was not true. Let T, U be the values in σ,
and without loss of generality, assume T = U ∈ GT . Since σ is veriﬁed correctly, by equation
(7) we have T = ˆHκ(µ).
Let ˜σ and ˜µ be the values computed as in Game 4. Since bad (cid:54)= true, we have that ˜T = T
and by correctness we have that ˜T = ˆHκ(˜µ). At this point, if the ciphertext µ provided by the
adversary is such that µ (cid:54)= ˜µ, then the challenger answers 0 (reject) and sets an initially false
ﬂag bad(cid:48)←true.
It is easy to see that Game 6 is identical to Game 5 up to the event that the ﬂag bad(cid:48) is set