0.2
0
1,792
1,536
1,280
1,024
768
512
256
0
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
1.2
1
0.8
0.6
0.4
0.2
0
Linpack(cid:3) 3Dmark(cid:3) Quadrant(cid:3) WiFi(cid:3) Bluetooth
(cid:39)(cid:87)(cid:94)(cid:3)
(cid:100)(cid:286)(cid:400)(cid:410)
1.2
1
0.8
0.6
0.4
0.2
0
Linpack(cid:3) 3Dmark(cid:3) Quadrant(cid:3) WiFi(cid:3) Bluetooth
(cid:39)(cid:87)(cid:94)(cid:3)
(cid:100)(cid:286)(cid:400)(cid:410)
Linpack(cid:3) 3Dmark(cid:3) Quadrant(cid:3) WiFi(cid:3)
(cid:3)Bluetooth
(cid:39)(cid:87)(cid:94)(cid:3)
(cid:100)(cid:286)(cid:400)(cid:410)
(a) Normalized Nexus 6P results
(b) Normalized Pixel results
(c) Normalized Nexus 6P + music results
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
1,792
1,536
1,280
1,024
768
512
256
0
No APPs
Browser
Browser
+Email
Browser
+Email
+(cid:18)alend(cid:258)r
1792
1536
1280
1024
768
512
256
0
No APPs
Browser
Browser
+Email
Browser
+Email
+(cid:18)alend(cid:258)r
Linpack(cid:3) 3Dmark(cid:3) Quadrant(cid:3) WiFi(cid:3) Bluetooth
(cid:39)(cid:87)(cid:94)(cid:3)
(cid:100)(cid:286)(cid:400)(cid:410)
(d) Normalized Pixel + music results
(e) Nexus 6P memory usage in MB
(f) Pixel memory usage in MB
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
Native Phone
1-VP
2-VP
3-VP
4-VP
5-VP
1792
1536
1280
1024
768
512
256
0
No APPs
Browser
Browser
+Email
Browser
+Email
+(cid:18)alend(cid:258)r
No APPs
Browser
Browser
+Email
Browser
+Email
+(cid:18)alend(cid:258)r
1.2
1
0.8
0.6
0.4
0.2
Native phone
1-VP
2-VP
3-VP
4-VP
5-VP
Nexus6p
(4h+Music)
Nexus6p
(12(cid:346)+Idle)
Pixel
(4h+Music)
Pixel
(12h+Idle)
(g) Nexus 6P memory usage after optimization
(h) Pixel memory usage after optimization
(i) Normalized battery consumption
Figure 6: VPBox’s performance measurements on Google Nexus 6P and Pixel 3a XL phones.
run one VP using VMOS [71] on Android 5.1, but VMOS’s 1-VP and
VPBox’s performance data on multi-VPs are not comparable.
8.1 Performance Measurements
We measure runtime overhead, memory usage, and power con-
sumption using two different Google Phones: Nexus 6P (1.55 GHz
Cortex-A53, Adreno 430 GPU, 3G RAM, and 32G ROM) and Pixel 3a
XL (2.15 GHz Kryo, Adreno 530 GPU, 4G RAM, and 32G ROM). We
follow similar experimental settings as Cells’s paper in SOSP’11 [10].
We measured the performance of VPBox when running 1VP, 2VPs,
3VPs, 4VPs, and 5VPs, each with a fully booted Android environ-
ment. Our runtime overhead measurement contains two scenarios.
The first one is running a set of benchmark apps on VPBox’s VPs
and a native phone, respectively. The second one is running the
same benchmark apps on VPs and the native phone, but simultane-
ously with an additional background music player workload. The
benchmark application is always run in the foreground VP; if the
background workload is used, it runs in a single background VP
when multiple VPs are started. The results of runtime overhead are
normalized against the performance of running the same bench-
mark apps on the latest manufacturer stock image available for two
Google phones, but without the background workload.
Benchmark Apps. Each benchmark app is designed to stress
some aspect of the system performance: Linpack (v1.1) for CPU;
3DMark (v2.0.4646) for 3D graphics; Quadrant advanced edition
(v2.1.1) for 2D graphics and file I/O; WiFi using BusyBox wget
(v1.21.1) to download a 409M video file through a PC’s WiFi hotspot;
Bluetooth measurement is the time that the Bluetooth module takes
to transfer a 1M file between two paired Bluetooth devices; and
GPS performance is measured by the time that the GPS Test app
(v1.6.3) takes to acquire the GPS location.
Runtime Overhead. Figure 6(a) & 6(b) show the normalized
runtime overhead on two Google phones with no background work-
load running. The deviations between “n-VP” and “Native Phone”
represent the additional overhead caused by VPBox’s device vir-
tualization. The negligible deviations in most cases indicate no
user-noticeable performance difference between running in VPBox
and running natively on a real phone, even with up to five VPs
running simultaneously. The WiFi benchmark shows the largest
overhead—it introduces about 3%∼6% additional slowdowns on
two phones. In addition to VPBox’s virtualization, we argue that
WiFi variability levels could also affect network performance. Fig-
ure 6(c) & 6(d) show the normalized runtime overhead when run-
ning the background music player. As would be expected, running
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2867the background workload causes additional overheads relative to
our baseline. Among all of our benchmarks, 3DMark shows the
least overhead because playing music does not involve 3D render-
ing. Compared to Cells’s performance data [10], VPBox reveals the
same level of variability in runtime overhead.
Memory Usage. Figure 6(e) & 6(f) show the default memory us-
age (without memory optimization) on two phones. The “No Apps”
measures the memory usage after booting each VP but running
no apps. Then, we measure the memory usage after starting an
instance of Chrome browser, Gmail client, and Google Calendar in
each running VP. Apparently, after starting multiple VPs, memory
usage becomes the scalability bottleneck. Note that VPBox requires
incrementally less memory when starting more VPs. The reason
is Android low memory killer; even without specific memory opti-
mization methods, it automatically takes effect to kill background
processes and free memory for new applications. Figure 6(g) & 6(h)
show results after we apply kernel same-page merging, file system
unioning, and “screen off” for background VPs. With these mem-
ory optimization methods enabled, we can further reduce memory
consumption by 100MB to 600MB.
Power Consumption. Figure 6(i) shows the normalized power
consumption on two Google phones; the larger value means more
power consumption. The “4h + Music” measures the power con-
sumption after playing the music repeatedly for 4 hours. When
multiple VPs exist, we run the music player in the foreground VP.
Compared with the native phone, the power consumption results
from 1-VP to 3-VP increase by less than 5%, and the power con-
sumption results from 4-VP to 5-VP increase by less than 10%. The
Pixel 3a XL phone’s power measurement is better than the Nexus 6p
phone, because Pixel 3a XL phone’s power management has been
improved. The “12h + Idle” measures the power consumption after
12 hours in an idle state. Compared to the native phone, VPBox’s
numbers in “12h + Idle” show no measurable increase.
Conclusion. VPBox’s superior performance data indicate that
it is immune to the evasions that measure the performance gap
between virtual machines and real devices.
8.2 Security Analysis
Our second experiment evaluates the resilience against virtual en-
vironment detection heuristics proposed by the previous work [16,
34, 50, 55, 56, 69, 78]. The superset of them covers the mainstream
Android virtual environment detection heuristics. Table 3 presents
the results under Android emulators, app-level virtualization, and
Android container environments. Row 2 to 10 are nine types of
Android virtual environment detection heuristics, and their descrip-
tions are presented in Table 2. We first run these detection heuristics
in a physical device and save their results as Output 1. Then, we
install seven different virtualization environments listed in Row
1 on this device and then rerun these detection methods in seven
virtual environments, respectively. After that, we compare their
outputs with Output 1. A transparent virtual environment should
show no appreciable difference with its underlying device.
VPBox meets this goal from two aspects: 1) the virtualized de-
vice exhibits the same hardware effects as the underlying physical
device; 2) VPBox’s virtualization supports all devices and services
listed in Table 1. Besides, to achieve the goal of stealthiness, we
Table 2: Android virtual environment detection heuristic
types and their descriptions.
Type
Description
Emulated Network [69]
CPU & Graphical
Performance [69]
The emulated network environment is typically
different from that of physical devices, such as
IP address, virtual router, and host loopback.
1) Calculate 1, 048, 576 digits of Pi;
2) measure video frame rate
Hardware Components [69] E.g., Bluetooth, Radio, and Power management.
Sensor Events [16]
Detect accelerometer API return values.
Hypervisor Heuristics [50]
1) Virtual program counter update;
2) cache consistency
Instruction-level
Profiles [55]
Software-based emulators reveal different
instruction-level behaviors from real ARM
CPUs when processing undefined instructions.
Android APIs [34, 69]
Many APIs return unique device identifiers.
System Properties [34]
Android system configurations and status.
Shared UID &
Hooking [56, 78]
In app-level virtualization, the host app shares
the same UID with all guest apps and relies
on hooking to hide guest apps’ API requests.
enable our device virtualization and the customization of device
specific attributes to be executed outside of VPs. It ensures a dedi-
cated adversary in the VP is diffcult to fingerprint the presence of