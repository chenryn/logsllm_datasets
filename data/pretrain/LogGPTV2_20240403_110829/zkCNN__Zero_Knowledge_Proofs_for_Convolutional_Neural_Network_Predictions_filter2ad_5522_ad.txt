𝑧∈{0,1}log 𝑀
𝑧∈{0,1}log 𝑀
˜𝛽(𝑢, 𝑧)𝜔XZ
˜𝛽(𝑢, 𝑧)𝜔X(𝑧0·2log 𝑀−1+𝑧1·2log 𝑀−2+···+𝑧log 𝑀−1) ,
(6)


=
=
Algorithm 1 Sumcheck( ˜𝑐, A𝑐, ˜𝐹, A𝐹 , 𝑟1, . . . , 𝑟log 𝑁)
Input: Arrays A𝑐 and A𝐹 storing ˜𝑐(𝑥) and ˜𝐹(𝑢, 𝑥) on all
𝑥 ∈ {0, 1}log 𝑁 , random 𝑟1, . . . , 𝑟log 𝑁 ;
Output: log 𝑁 sumcheck messages for𝑥∈{0,1}log 𝑀 ˜𝑐(𝑥) ˜𝐹(𝑢, 𝑥).
Each message consists of 3 elements;
1: for 𝑖 = 1, . . . , log 𝑁 do
for 𝑏 ∈ {0, 1}ℓ−𝑖 do
2:
for 𝑡 = 0, 1, 2 do
3:
4:
5:
6:
7:
// 𝐵 is the number represented by 𝑏.
˜𝑐(𝑟1, . . . , 𝑟𝑖−1, 𝑡, 𝑏) = A𝑐[𝐵] ·(1−𝑡)+A𝑐[𝐵+2ℓ−𝑖] ·𝑡
˜𝐹(𝑟1, . . . , 𝑟𝑖−1, 𝑡, 𝑏) = A𝐹 [𝐵]·(1−𝑡)+A𝐹 [𝐵+2ℓ−𝑖]·𝑡
// Aggregate messages in round 𝑖.
Send𝑏∈{0,1}ℓ−𝑖 ˜𝑐(𝑟1, . . . , 𝑟𝑖−1, 𝑡, 𝑏) · ˜𝐹(𝑟1, . . . , 𝑟𝑖−1, 𝑡, 𝑏)
for 𝑡 ∈ {0, 1, 2} do
for 𝑏 ∈ {0, 1}ℓ−𝑖 do
// Update the arrays.
A𝑐[𝐵] = A𝑐[𝐵] · (1 − 𝑟𝑖) + A𝑐[𝐵 + 2ℓ−𝑖] · 𝑟𝑖
A𝐹 [𝐵] = A𝐹 [𝐵] · (1 − 𝑟𝑖) + A𝐹 [𝐵 + 2ℓ−𝑖] · 𝑟𝑖
8:
9:
10:
where Z = 𝑧0 · 2log 𝑀−1 +𝑧1 · 2log 𝑀−2 +· · ·+𝑧log 𝑀−1 is the number
represented by the binary string 𝑧 with 𝑧0 being the most significant
bit. By the closed-form of ˜𝛽 given in Section 2.2.1, the equation
𝑧∈{0,1}log 𝑀
above is equal to


=
=
𝑧∈{0,1}log 𝑀
𝑧∈{0,1}log 𝑀
𝑖=0
log 𝑀−1
· 𝜔X·log 𝑀−1
log 𝑀−1
log 𝑀−1
log 𝑀−1
·log 𝑀−1
· 𝜔
𝑖=0
𝑖=0
𝑗=0
𝑗=0
((1 − 𝑢𝑖)(1 − 𝑧𝑖) + 𝑢𝑖𝑧𝑖)
2log 𝑀−1−𝑗 𝑧 𝑗
𝑗=0
((1 − 𝑢𝑖)(1 − 𝑧𝑖) + 𝑢𝑖𝑧𝑖)
2log 𝑀−1−𝑗 ·(X·𝑧 𝑗)
((1 − 𝑢𝑖)(1 − 𝑧𝑖) + 𝑢𝑖𝑧𝑖)
(𝜔2log 𝑀−1−𝑗)X·𝑧 𝑗 .
(7)
𝜔X·𝑧 𝑗
2𝑗+1
2𝑗+1 above is the 2𝑗+1-th root of unity. We
Note that 𝜔2log 𝑀−1−𝑗
use the same notation as in [19] to denote it as 𝜔2𝑗+1. Then the
equation above is
= 𝜔
𝑀
𝑧∈{0,1}log 𝑀


log 𝑀−1
log 𝑀−1
𝑖=0
𝑖=0
log 𝑀−1
((1 − 𝑢𝑖)(1 − 𝑧𝑖) + 𝑢𝑖𝑧𝑖) ·
log 𝑀−1
log 𝑀−1

(cid:16)(1 − 𝑢𝑖) + 𝑢𝑖 · 𝜔X
𝑧𝑖 ∈{0,1} ((1 − 𝑢𝑖)(1 − 𝑧𝑖) + 𝑢𝑖𝑧𝑖) · 𝜔X·𝑧𝑖
((1 − 𝑢𝑖)(1 − 𝑧𝑖) + 𝑢𝑖𝑧𝑖) · 𝜔X·𝑧𝑖
2𝑖+1
(cid:17) .
2𝑖+1
𝑗=0
𝑖=0
𝑧∈{0,1}log 𝑀
=
=
=
=
𝑖=0
2𝑖+1
(8)
An easy way to check the correctness of the equation above is that
both ˜𝐹(𝑢, 𝑥) and Equation 8 are multilinear extensions of matrix 𝐹.
By the uniqueness of multilinear extensions, they must be equal as
long as they agree on all binary inputs. Therefore, by substituting 𝑢
with any binary string, it is not hard to see that they are the same,
because 𝑢𝑖 is a selector to choose the right 𝜔X
2𝑖+1 to multiply together
in Equation 8. Moreover, if we take a closer look at each parenthesis,
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2973Algorithm 2 A𝐹 ← Initialize(𝜔, 𝑢, 𝑁)
Input: 𝑀-th root of unity 𝜔, random point 𝑢 ∈ Flog 𝑀 and the
degree 𝑁 ;
Output: A𝐹 storing ˜𝐹(𝑢, 𝑥) for all 𝑥 ∈ {0, 1}log 𝑁 .
1: A𝐹 [0] = 1;
2: for 𝑖 = 0, . . . , log 𝑁 − 1 do
3:
4:
A𝐹 [ 𝑗] = A𝐹 [ 𝑗 mod 2𝑖] ·(cid:16)(1 − 𝑢𝑖) + 𝑢𝑖 · 𝜔 𝑗
for 𝑗 = 2𝑖+1 − 1, . . . , 0 do
(cid:17)
2𝑖+1
// In round 𝑖, (𝜔2𝑖+1)X has 2𝑖+1 possible values ∀X ∈ [𝑁 ], indexed by
𝑗 = X mod 2𝑖+1.
5: return A𝐹 ;
𝜔2𝑖+1 is the 2𝑖+1-th root of unity, and 𝜔X
2𝑖+1 only has 2𝑖+1 distinct
values for all X ∈ [𝑁], which is exactly the property used in the
standard FFT algorithm. Therefore, instead of computing ˜𝐹(𝑢, 𝑥)
for every 𝑥 ∈ {0, 1}log 𝑁 one by one, we divide the computation in
log 𝑀 iterations. In each iteration 𝑖, the prover computes a running
product for each 𝑥 with the first 𝑖-th parenthesis in Equation 8 from
the last iteration. Specifically, the prover precomputes all 𝑀 distinct
2𝑖+1 for 0 ≤ 𝑖 < log 𝑁 − 1, 0 ≤ 𝑗 < 2𝑖+1 (which are the
values of 𝜔 𝑗
points to evaluate anyway), calculates all 2𝑖+1 different values of
((1 − 𝑢𝑖) + 𝑢𝑖𝜔 𝑗
2𝑖+1) in iteration 𝑖 and multiplies them to 2𝑖 distinct
running products in iteration 𝑖−1. In the last iteration, the algorithm
outputs 𝑁 values for ˜𝐹(𝑢, 𝑥) ∀𝑥 ∈ {0, 1}log 𝑁 , and the total running
time is 𝑂(𝑀 + 𝑁). The algorithm is presented in Algorithm 2.
Together with Algorithm 1, we are able to construct an algorithm
for the prover to generate all proofs in the sumcheck protocol on
Equation 5 in time 𝑂(𝑀 + 𝑁). The proof size is 𝑂(log 𝑁) and the
verifier time is 𝑂(log 𝑁), given oracle accesses of ˜𝑐(·) and ˜𝐹(·).
Reducing the verifier time. Though our new protocol has op-
timal prover time and good proof size, it introduces an overhead
on the verifier time. In particular, the oracle accesses of ˜𝑐(·) and
˜𝑎(·) are usually provided by the prover or computed on verifier’s
input as in existing approaches mentioned above, but our proto-
col requires an additional evaluation of ˜𝐹(·) at a random point. It
takes linear time if the verifier evaluates it on her own using a
similar algorithm as the prover in Algorithm 2. We further show
an approach to delegate this computation through a sequence of
sumcheck protocols.
Our approach follows exactly the same algorithm to compute
A𝐹 , the bookkeeping table, in Algorithm 2. Recall that A𝐹 stores
˜𝐹(𝑢, 𝑥) ∀𝑥 ∈ {0, 1}log 𝑁 , thus ˜𝐹(𝑢, 𝑣) is the multilinear extension of
A𝐹 evaluated at 𝑣. Moreover, in Algorithm 2, the values in A𝐹 in
the 𝑖-th round are computed from the values in the (𝑖 − 1)-th round
by the equation in Step 4. Therefore, we abuse the notation and use
𝐴(𝑖)
𝐹 (·) : {0, 1}𝑖+1 → F to denote the array A𝐹 in the 𝑖-th round for
𝑖 = 0, . . . , log 𝑁 −1, and ˜𝐴(𝑖)
𝐹 (·) : F𝑖+1 → F to denote its multilinear
extension. Then ˜𝐹(𝑢, 𝑣) = ˜𝐴(log 𝑁−1)
𝐹 (·)
as an equation of 𝐴(𝑖−1)
(𝑣), and we can write 𝐴(𝑖)
𝐹
𝐹
(·):
𝐴(𝑖)
𝐹 (𝑥, 𝑏) = 𝐴(𝑖−1)
𝐹
(𝑥)((1 − 𝑢𝑖) + 𝑢𝑖 · 𝜔𝑖+1(𝑥, 𝑏)),
(9)
¯𝑈 𝑗 =
¯𝑋 𝑗−𝑖 ¯𝑊𝑖
𝑖=0
𝑖
for all 𝑥 ∈ {0, 1}𝑖, 𝑏 ∈ {0, 1}, where 𝜔𝑖+1(𝑥, 𝑏) = 𝜔 𝑗
2𝑖+1 for 𝑗 =
𝑘=0 𝑥𝑘2𝑘+1 + 𝑏, the number in F represented by (𝑥, 𝑏) in binary.
Equation 9 is exactly the same as Step 4 in Algorithm 2 with binary
indices. Then by Definition 2.3,
˜𝐴(𝑖)
𝐹 (𝑥, 𝑏) =
(𝑧)((1−𝑢𝑖)+𝑢𝑖· ˜𝜔𝑖+1(𝑧, 𝑏)), (10)
˜𝛽(𝑥, 𝑧) ˜𝐴(𝑖−1)

𝐹
𝑧∈{0,1}𝑖
𝐹
for all 𝑥 ∈ F𝑖, 𝑏 ∈ F, as both sides agree on the Boolean hypercube
by Equation 9, and are both multilinear in 𝑥 and 𝑏.
Starting from ˜𝐹(𝑢, 𝑣) = ˜𝐴(log 𝑁−1)
(𝑣), the verifier and the prover
can reduce its correctness to the evaluation of ˜𝐴(𝑖)
𝐹 (·) at a random
point through a sumcheck protocol on Equation 10 for 𝑖 = log 𝑁 −
1, . . . , 0. In the last round, as defined in Step 1 of Algorithm 2, ˜𝐴(0)
𝐹 (·)
is simply the constant 1. As the size of ˜𝛽(·), ˜𝐴(𝑖)
𝐹 (·) and ˜𝜔𝑖+1· in
the 𝑖-th sumcheck are 𝑂(2𝑖), the prover time is 𝑂(2𝑖) using the
dynamic programming technique in Algorithm 1. The proof size in
the 𝑖-th sumcheck is 𝑂(𝑖). It remains to show that the verifier time is
also logarithmic. The verifier time during the 𝑖-th sumcheck is 𝑂(𝑖).