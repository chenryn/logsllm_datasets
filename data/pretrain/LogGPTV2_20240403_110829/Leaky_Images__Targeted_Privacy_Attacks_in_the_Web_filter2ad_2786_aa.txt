title:Leaky Images: Targeted Privacy Attacks in the Web
author:Cristian-Alexandru Staicu and
Michael Pradel
Leaky Images: Targeted Privacy Attacks in the Web
Cristian-Alexandru Staicu and Michael Pradel, TU Darmstadt
https://www.usenix.org/conference/usenixsecurity19/presentation/staicu
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Leaky Images: Targeted Privacy Attacks in the Web
Cristian-Alexandru Staicu
Department of Computer Science
TU Darmstadt
Department of Computer Science
Michael Pradel
TU Darmstadt
Abstract
Sharing ﬁles with speciﬁc users is a popular service pro-
vided by various widely used websites, e.g., Facebook, Twit-
ter, Google, and Dropbox. A common way to ensure that a
shared ﬁle can only be accessed by a speciﬁc user is to au-
thenticate the user upon a request for the ﬁle. This paper
shows a novel way of abusing shared image ﬁles for targeted
privacy attacks. In our attack, called leaky images, an im-
age shared with a particular user reveals whether the user is
visiting a speciﬁc website. The basic idea is simple yet ef-
fective: an attacker-controlled website requests a privately
shared image, which will succeed only for the targeted user
whose browser is logged into the website through which the
image was shared.
In addition to targeted privacy attacks
aimed at single users, we discuss variants of the attack that
allow an attacker to track a group of users and to link user
identities across different sites. Leaky images require nei-
ther JavaScript nor CSS, exposing even privacy-aware users,
who disable scripts in their browser, to the leak. Studying the
most popular websites shows that the privacy leak affects at
least eight of the 30 most popular websites that allow sharing
of images between users, including the three most popular of
all sites. We disclosed the problem to the affected sites, and
most of them have been ﬁxing the privacy leak in reaction
to our reports. In particular, the two most popular affected
sites, Facebook and Twitter, have already ﬁxed the leaky im-
ages problem. To avoid leaky images, we discuss potential
mitigation techniques that address the problem at the level of
the browser and of the image sharing website.
1 Introduction
Many popular websites allow users to privately share images
with each other. For example, email services allow attach-
ments to emails, most social networks support photo sharing,
and instant messaging systems allow ﬁles to be sent as part
of a conversation. We call websites that allow users to share
images with each other image sharing services.
This paper presents a targeted privacy attack that abuses a
vulnerability we ﬁnd to be common in popular image shar-
ing services. The basic idea is simple yet effective: An at-
tacker can determine whether a speciﬁc person is visiting an
attacker-controlled website by checking whether the browser
can access an image shared with this person. We call this
attack leaky images, because a shared image leaks the pri-
vate information about the victim’s identity, which otherwise
would not be available to the attacker. To launch a leaky im-
ages attack, the attacker privately shares an image with the
victim through an image sharing service where both the at-
tacker and the victim are registered as users. Then, the at-
tacker includes a request for the image into the website for
which the attacker wants to determine whether the victim is
visiting it. Since only the victim, but no other user, is al-
lowed to successfully request the image, the attacker knows
with 100% certainty whether the victim has visited the site.
Beyond the basic idea of leaky images, we describe three
further attacks. First, we describe a targeted attack against
groups of users, which addresses the scalability issues of
the single-victim attack. Second, we show a pseudonym
linking attack that exploits leaky images shared via differ-
ent image sharing services to determine which user accounts
across these services belong to the same individual. Third,
we present a scriptless version of the attack, which uses
only HTML, and hence, works even for users who disable
JavaScript in their browsers.
Leaky images can be (ab)used for targeted attacks in var-
ious privacy-sensitive scenarios. For example, law enforce-
ment could use the attack to gather evidence that a suspect is
visiting particular websites. Similarly but perhaps less noble,
a governmental agency might use the attack to deanonymize
a political dissident. As an example of an attack against a
group, consider deanonymizing reviewers of a conference.
In this scenario, the attacker would gather the email ad-
dresses of all committee members and then share leaky im-
ages with each reviewer through some of the various web-
sites providing that service. Next, the attacker would embed
a link to an external website into a paper under review, e.g.,
USENIX Association
28th USENIX Security Symposium    923
Table 1: Leaky images vs. related web attacks. All techniques assume that the victim visits an attacker-controlled website.
Threat
Who can attack?
What does the attacker achieve?
Usage scenario
Tracking pixels Widely used ad providers and web
Social media
ﬁngerprinting
Cross-site
request forgery
Leaky images
tracking services
Arbitrary website provider
Arbitrary website provider
Arbitrary website provider
Learn that user visiting site A is the
same as user visiting site B
Learn into which sites the victim is
logged in
Perform side effects on a target site
into which the victim is logged in
Precisely identify the victim
Large-scale creation of low-entropy user
proﬁles
Large-scale creation of low-entropy user
proﬁles
Abuse the victim’s authorization by act-
ing on her behalf
Targeted, ﬁne-grained deanonymization
a link to a website with additional material.
If and when
a reviewer visits that page, while being logged into one of
the image sharing services, the leaky image will reveal to
the attacker who is reviewing the paper. The prerequisite
for all these attacks is that the victim has an account at a
vulnerable image sharing service and that the attacker is al-
lowed to share an image with the victim. We found at least
three highly popular services (Google, Microsoft Live, and
Dropbox) that allow sharing images with any registered user,
making it straightforward to implement the above scenarios.
The leak is possible because images are exempted from
the same-origin policy, and because image sharing services
authenticate users through cookies. When the browser makes
a third-party image request, it attaches the user’s cookie of
the image sharing website to it. If the decision of whether
to authorize the image request is cookie-dependent, then the
attacker can infer the user’s identity by observing the success
of the image request. Related work discusses the dangers of
exempting JavaScript from the same-origin policy [24], but
to the best of our knowledge, there is no work discussing the
privacy implications of observing the result of cross-origin
requests to privately shared images.
Leaky images differ from previously known threats by
enabling arbitrary website providers to precisely identify a
victim (Table 1). One related technique are tracking pix-
els, which enable tracking services to determine whether
two visitors of different sites are the same user. Most third-
party tracking is done by a few major players [13], allowing
for regulating the way these trackers handle sensitive data.
In contrast, our attack enables arbitrary attackers and small
websites to perform targeted privacy attacks. Another related
technique is social media ﬁngerprinting, where the attacker
learns whether a user is currently logged into a speciﬁc web-
site.1 In contrast, leaky images reveal not only whether a user
is logged in, but precisely which user is logged in. Leaky im-
ages resemble cross-site request forgery (CSRF) [33], where
a malicious website performs a request to a target site on be-
half of the user. CSRF attacks typically cause side effects
on the server, whereas our attack simply retrieves an image.
1See
socialmedia-leak/
social.
https://robinlinus.github.io/
or
https://browserleaks.com/
We discuss in Section 5 under what conditions defenses pro-
posed against CSRF, as well as other mitigation techniques,
can reduce the risk of privacy leaks due to leaky images.
To understand how widespread the leaky images problem
is, we study 30 out of the 250 most popular websites. We
create multiple user accounts on these websites and check
whether one user can share a leaky image with another user.
The attack is possible if the shared image can be accessed
through a link known to all users sharing the image, and if
access to the image is granted only to certain users. We ﬁnd
that at least eight of the 30 studied sites are affected by the
leaky images privacy leak, including some of the most pop-
ular sites, such as Facebook, Google, Twitter, and Dropbox.
We carefully documented the steps for creating leaky images
and reported them as privacy violations to the security teams
of the vulnerable websites. In total, we informed eight web-
sites about the problem, and so far, six of the reports have
been conﬁrmed, and for three of them we have been awarded
bug bounties. Most of the affected websites are in the pro-
cess of ﬁxing the leaky images problem, and some of them,
e.g., Facebook and Twitter, have already deployed a ﬁx.
In summary, this paper makes the following contributions:
• We present leaky images, a novel targeted privacy at-
tack that abuses image sharing services to determine
whether a victim visits an attacker-controlled website.
• We discuss variants of the attack that aim at individual
users, groups of users, that allow an attacker to link user
identities across image sharing services, and that do not
require any JavaScript.
• We show that eight popular websites, including Face-
book, Twitter, Google, and Microsoft Live are affected
by leaky images, exposing their users to be identiﬁed on
third-party websites.
• We propose several ways to mitigate the problem and
discuss their beneﬁts and weaknesses.
2
Image Sharing in the Web
Many popular websites, including Dropbox, Google Drive,
Twitter, and Facebook, enable users to upload images and to
924    28th USENIX Security Symposium
USENIX Association
share these images with a well-deﬁned set of other users of
the same site. Let i be an image, U be the set of users of an
owner ∈ U be the owner of i.
image sharing service, and let ui
By default, i is not accessible to any other users than ui
owner.
However, an owner of an image can share the image with a
shared ⊆ U, which we deﬁne
selected subset of other users U i
to include the owner itself. As a result, all users u ∈ U i
shared,
but no other users of the service and no other web users, have
read access to i, i.e., can download the image via a browser.
any cross-domain access control checks. A drawback of se-
cret URLs is that they should not be used over non-secret
channels, such as HTTP, since these channels are unable to
protect the secrecy of requested URLs. The main advantage
of authentication is to not require links to be secret, enabling
them to be sent over insecure channels. On the downside,
authentication-based access control makes using third-party
content delivery networks harder, because cookie-based au-
thentication does not work across domains.
Secret URLs To control which users can access an image,
there are several implementation strategies. One strategy is
to create a secret URL for each shared image, and to provide
this URL only to users allowed to download the image. In
this scenario, there is a set of URLs Li (L stands for “links”)
that point to a shared image i. Any user who knows a URL
li ∈ Li can download i through it. To share an image i with
multiple users, i.e., |U i
shared| > 1, there are two variants of
implementing secret URLs. On the one hand, each user u
may obtain a personal secret URL li
u for the shared image,
which is known only to u and not supposed to be shared with
anyone. On the other hand, all users may share the same
secret URL, i.e., Li = {li
shared}. A variant of secret URLs
are URLs that expire after a given amount of time or after a
given number of uses. We call these URLs session URLs.
Authentication Another strategy to control who accesses
an image is to authenticate users. In this scenario, the image
sharing service checks for each request to i whether the re-
quest comes from a user in U i
shared. Authentication may be
used in combination with secret URLs. In this case, a user
u may access an image i only if she knows a secret URL li
and if she is authenticated as u ∈ U i
shared. The most common
way to implement authentication in image sharing services
are cookies. Once a user logs into the website of an im-
age sharing service, the website stores a cookie in the user’s
browser. When the browser requests an image, the cookie
is sent along with the request to the image sharing service,
enabling the server-side of the website to identify the user.
Image Sharing in Practice Different real-world image
sharing services implement different strategies for control-
ling who may access which image. For example, Facebook
mostly uses secret URLs, which initially created confusion
among users due to the apparent lack of access control2.
Gmail relies on a combination of secret URLs and authen-
tication to access images attached to emails. Deciding how
to implement image sharing is a tradeoff between several
design goals, including security, usability, and performance.
The main advantage of using secret URLs only is that third-
party content delivery networks may deliver images, without
2https://news.ycombinator.com/item?id=13204283
Same-Origin Policy The same-origin policy regulates to
what extent client-side scripts of a website can access the
document object model (DOM) of the website. As a default
policy, any script loaded from one origin is not allowed to
access parts of the DOM loaded from another origin. Ori-
gin here means the URI scheme (e.g., http), the host name
(e.g., facebook.com), and the port number (e.g., 80). For ex-
ample, the default policy implies that a website evil.com that
embeds an iframe from facebook.com cannot access those
parts of the DOM that have been loaded from facebook.com.
There are some exceptions to the default policy described
above. One of them, which is crucial for the leaky images
attack, are images loaded from third parties. In contrast to
other DOM elements, a script loaded from one origin can ac-
cess images loaded from another origin, including whether
the image has been loaded at all. For the above example,
evil.com is allowed to check whether an image requested
from facebook.com has been successfully downloaded.
3 Privacy Attacks via Leaky Images
This section presents a series of attacks that can be mounted
using leaky images. At ﬁrst, we describe the conditions
under which the attack is possible (Section 3.1). Then,
we present a basic attack that targets individual users (Sec-
tion 3.2), a variant of the attack that targets groups of users
(Section 3.3), and an attack that links identities of an indi-
vidual registered at different websites (Section 3.4). Next,
we show that the attack relies neither on JavaScript nor CSS,
but can be performed by a purely HTML-based website (Sec-
tion 3.5). Finally, we discuss how leaky images compare to
previous privacy-related issues, such as web tracking (Sec-
tion 3.6).
3.1 Attack Surface
Our attack model is that an attacker wants to determine
whether a speciﬁc victim is visiting an attacker-controlled
website. This information is important from a privacy point
of view and usually not available to operators of a web-
site. An operator of a website may be able to obtain some
information about clients visiting the website, e.g., the IP
and the browser version of the client. However, this in-
formation is limited, e.g., due to multiple clients sharing
USENIX Association
28th USENIX Security Symposium    925
Table 2: Conditions that enable leaky image attacks.