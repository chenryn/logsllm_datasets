# Leaky Images: Targeted Privacy Attacks in the Web

## Authors
Cristian-Alexandru Staicu and Michael Pradel, TU Darmstadt

## Publication Details
- **Conference**: 28th USENIX Security Symposium
- **Date**: August 14â€“16, 2019
- **Location**: Santa Clara, CA, USA
- **Proceedings ISBN**: 978-1-939133-06-9
- **Access**: Open access sponsored by USENIX
- **Link**: [https://www.usenix.org/conference/usenixsecurity19/presentation/staicu](https://www.usenix.org/conference/usenixsecurity19/presentation/staicu)

## Abstract
File sharing with specific users is a common service provided by popular websites such as Facebook, Twitter, Google, and Dropbox. Typically, user authentication is used to ensure that shared files are accessible only to the intended recipients. This paper introduces a novel privacy attack, called "leaky images," which exploits shared image files to determine if a specific user is visiting a particular website. The attack leverages the fact that an attacker-controlled website can request a privately shared image, which will succeed only for the targeted user who is logged into the image-sharing service.

In addition to targeting individual users, we discuss variants of the attack that allow tracking groups of users and linking user identities across different sites. Notably, leaky images do not require JavaScript or CSS, making even privacy-conscious users who disable scripts vulnerable. Our study of popular websites reveals that at least eight of the top 30 most popular image-sharing services, including Facebook and Twitter, were affected by this vulnerability. We have disclosed these issues to the affected sites, and most have implemented fixes. We also propose potential mitigation techniques to address the problem at both the browser and the image-sharing service level.

## 1. Introduction
Many popular websites, such as email services, social networks, and instant messaging systems, allow users to privately share images. These platforms, which we refer to as image-sharing services, often have vulnerabilities that can be exploited for targeted privacy attacks. This paper presents a new type of attack, "leaky images," which abuses a common vulnerability in these services.

The basic idea of the leaky images attack is straightforward: an attacker can determine whether a specific person is visiting an attacker-controlled website by checking if the browser can access an image shared with that person. To execute the attack, the attacker shares an image with the victim through an image-sharing service where both are registered. The attacker then embeds a request for the image on the target website. Since only the victim can successfully request the image, the attacker can confirm with certainty whether the victim has visited the site.

Beyond the basic attack, we describe three additional variants:
1. **Group Attack**: A scalable version of the attack that targets multiple users.
2. **Pseudonym Linking Attack**: An attack that uses leaky images shared via different services to link user accounts across platforms.
3. **Scriptless Attack**: A variant that uses only HTML, making it effective even for users who disable JavaScript.

Leaky images can be used in various privacy-sensitive scenarios, such as law enforcement gathering evidence or a government agency deanonymizing a political dissident. For example, an attacker could use this method to deanonymize conference reviewers by sharing leaky images with each reviewer and embedding a link in a paper under review.

The prerequisite for these attacks is that the victim has an account on a vulnerable image-sharing service and that the attacker can share an image with the victim. We found that at least three highly popular services (Google, Microsoft Live, and Dropbox) allow sharing images with any registered user, facilitating these attacks.

The leak occurs because images are exempt from the same-origin policy, and image-sharing services authenticate users via cookies. When a browser makes a third-party image request, it includes the user's cookie from the image-sharing service. If the image request's success depends on the cookie, the attacker can infer the user's identity by observing the request's outcome. While related work discusses the risks of exempting JavaScript from the same-origin policy, there is no prior research on the privacy implications of cross-origin requests to privately shared images.

Compared to other web threats, leaky images enable arbitrary website providers to precisely identify a victim (Table 1). Tracking pixels and social media fingerprinting, for instance, do not provide the same level of precision. Cross-site request forgery (CSRF) attacks, while similar, typically cause side effects on the server, whereas our attack simply retrieves an image.

To assess the prevalence of the leaky images problem, we studied 30 of the 250 most popular websites. We created multiple user accounts and tested whether one user could share a leaky image with another. We found that at least eight of the 30 sites, including Facebook, Google, Twitter, and Dropbox, were vulnerable. We reported these issues to the security teams of the affected websites, and most have either fixed or are in the process of fixing the problem.

In summary, this paper contributes the following:
- **Introduction of Leaky Images**: A novel targeted privacy attack that abuses image-sharing services to determine if a victim visits an attacker-controlled website.
- **Attack Variants**: Variants that target individual users, groups of users, and link user identities across services, without requiring JavaScript.
- **Vulnerable Websites**: Identification of eight popular websites, including Facebook, Twitter, Google, and Microsoft Live, that are affected by leaky images.
- **Mitigation Techniques**: Proposed methods to mitigate the problem, along with their benefits and limitations.

## 2. Image Sharing in the Web
Popular websites like Dropbox, Google Drive, Twitter, and Facebook allow users to upload and share images with a defined set of other users. By default, an image is accessible only to its owner. However, the owner can share the image with a selected subset of users, giving them read access.

### Access Control Strategies
There are two main strategies for controlling image access:
- **Secret URLs**: Each shared image has a secret URL that is provided only to authorized users. There are two variants: personal secret URLs for each user or a single shared secret URL for all users. Session URLs, which expire after a certain time or number of uses, are a variant of secret URLs.
- **Authentication**: Users are authenticated using cookies. Once a user logs into the image-sharing service, a cookie is stored in their browser. When the browser requests an image, the cookie is sent along with the request, allowing the server to identify the user.

### Real-World Implementations
Different image-sharing services use different strategies. For example, Facebook primarily uses secret URLs, while Gmail combines secret URLs with authentication. The choice of strategy involves trade-offs between security, usability, and performance.

### Same-Origin Policy
The same-origin policy restricts client-side scripts from accessing the DOM of a website loaded from a different origin. However, images are exempt from this policy. A script from one origin can check if an image from another origin has been successfully loaded, which is critical for the leaky images attack.

## 3. Privacy Attacks via Leaky Images
This section details the series of attacks that can be mounted using leaky images.

### 3.1 Attack Surface
The attack model assumes an attacker wants to determine if a specific victim is visiting an attacker-controlled website. This information is usually not available to website operators, who can only gather limited information like the IP address and browser version of the visitor.

### 3.2 Basic Attack
The basic leaky images attack targets individual users. The attacker shares an image with the victim and embeds a request for the image on the target website. If the image loads, the attacker knows the victim has visited the site.

### 3.3 Group Attack
A variant of the attack targets groups of users. The attacker shares images with multiple victims and embeds requests for these images on the target website. This allows the attacker to track multiple users simultaneously.

### 3.4 Pseudonym Linking Attack
This attack links user identities across different websites. The attacker shares images via different services and observes which images load, thereby linking user accounts across platforms.

### 3.5 Scriptless Attack
A variant of the attack that uses only HTML, making it effective even for users who disable JavaScript. The attacker embeds image requests in HTML, and the browser's behavior indicates whether the image was successfully loaded.

### 3.6 Comparison to Other Threats
Leaky images differ from other web threats like tracking pixels, social media fingerprinting, and CSRF. Unlike these, leaky images enable precise identification of users, and they do not rely on JavaScript or CSS.

## Table 2: Conditions Enabling Leaky Image Attacks
[Insert table here]

---

This revised version aims to make the text more clear, coherent, and professional, while maintaining the original content and structure.