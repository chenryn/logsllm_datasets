# Stack Overflow Vulnerability and Protection

This section discusses a stack overflow vulnerability and the protection mechanisms available in Mac OS X to mitigate such vulnerabilities.

## Stack Overflow Vulnerability

The provided code contains an obvious stack overflow vulnerability. Normal execution of the program with a large input causes an exploitable crash.

### GDB Debugging Session

```bash
$ gdb ./stack_police
GNU gdb 6.3.50-20050815 (Apple version gdb-768) (Tue Oct 2 04:07:49 UTC 2007)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are welcome to change it and/or distribute copies of it under certain conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for details.
This GDB was configured as “i386-apple-darwin”…
No symbol table is loaded. Use the “file” command.
Reading symbols for shared libraries … done
(gdb) set args AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
(gdb) r
Starting program: /Users/cmiller/book/macosx-book/stack_police
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Reading symbols for shared libraries ++. done
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41414141
0x41414141 in ?? ()
(gdb)
```

In this session, the program crashes due to a bad memory access, indicating a stack overflow.

## Stack Protector

Compiling the code with the `-fstack-protector` option prevents exploitation of the stack overflow.

```bash
$ gcc -g -fstack-protector -o stack_police stack_police.c
$ ./stack_police AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Abort trap
```

In this case, a `SIGABRT` signal is sent by the function that checks the canary's value, preventing the exploit.

### Checking for Stack Protection

To check if a binary uses stack protection, the `nm` tool can be used:

```bash
$ nm QuickTime\ Player | grep stack
U ___stack_chk_fail
U ___stack_chk_guard
$ nm /Applications/Safari.app/Contents/MacOS/Safari | grep stack
```

Here, `QuickTime Player` contains the symbols used to validate the stack, whereas `Safari` does not, indicating that `Safari` does not have this protection enabled.

### Partial Protection

It is important to note that stack protection is only effective when the specific source file is compiled with the `-fstack-protector` option. Therefore, within a single application or library, some functions may have this protection enabled while others do not.

### Confusing Propolice

It is possible to confuse `propolice` by completely smashing the stack. For example, using 5,000 characters as the first argument:

```bash
(gdb) set args `perl -e 'print "A"x5000'`
(gdb) r
Starting program: /Users/cmiller/book/macosx-book/stack_police `perl -e 'print "A"x5000'`
Reading symbols for shared libraries ++. done
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41414140
0x920df690 in strlen ()
(gdb) bt
#0 0x920df690 in strlen ()
#1 0x92101927 in strdup ()
#2 0x92103947 in asl_set_query ()
#3 0x9211703e in asl_set ()
#4 0x92130511 in vsyslog ()
#5 0x921303e8 in syslog ()
#6 0x921b3ef1 in __stack_chk_fail ()
#7 0x00001ff7 in main (argc=1094795585, argv=0xbfffcfcc) at stack_police.c:4
```

The stack-check failure handler, `__stack_chk_fail()`, calls `syslog("error %s", argv[0]);`. Overwriting the `argv[0]` pointer with a custom value can lead to unexpected behavior, though it may not be directly exploitable.

## Firewall

Leopard offers security improvements through its firewall, but several issues prevent it from being a significant obstacle to attacks. The firewall is application-based and controlled by `/usr/libexec/ApplicationFirewall/socketfilterfw` and the `com.apple.nke.applicationfirewall` driver.

### Issues with Leopard's Firewall

1. **Not Enabled by Default**: If the firewall is not enabled, it does not provide any protection.
2. **Blocks Only Incoming Connections**: It only blocks incoming connections, which means services running and listening on the machine are still vulnerable.
3. **User-Enabled Services**: Enabling services like file sharing allows connections through the firewall.
4. **Exploit Payloads**: Writing a payload that connects out from the compromised host is no more difficult than waiting for incoming connections.

### Sandboxing (Seatbelt)

Leopard introduces the concept of sandboxing applications using the `Seatbelt` kernel extension. This mechanism restricts what an application can do, limiting the impact of exploiting a vulnerability in the application.

#### Sandbox Profiles

Available profiles include:
- `kSBXProfileNoInternet`: TCP/IP networking is prohibited.
- `kSBXProfileNoNetwork`: All sockets-based networking is prohibited.
- `kSBXProfileNoWrite`: File-system writes are prohibited.
- `kSBXProfileNoWriteExceptTemporary`: File-system writes are restricted to temporary folders.
- `kSBXProfilePureComputation`: All operating-system services are prohibited.

These profiles can be tested using the `sandbox-exec` command.

#### Custom Sandbox Profiles

Custom profiles can be written using Scheme syntax. Examples of sandboxed applications include `krb5kdc`, `mDNSResponder`, `mdworker`, `named`, `ntpd`, `portmap`, `quicklookd`, `syslogd`, `update`, `xgridagentd`, `xgridcontrollerd`.

### Example Sandbox Profile

```scheme
;;
;; quicklookd - sandbox profile
;; Copyright (c) 2006-2007 Apple Inc. All Rights reserved.
;;
;; WARNING: The sandbox rules in this file currently constitute
;; Apple System Private Interface and are subject to change at any time
and
;; without notice. The contents of this file are also auto-generated and
not
;; user editable; it may be overwritten at any time.
;;
(version 1)
(allow default)
(deny network-outbound)
(allow network-outbound (to unix-socket))
(deny network*)
(debug deny)
```

This policy denies network communication, making it harder for an attacker to establish a remote connection.

### Limitations of Sandboxing

Sandboxing is not a cure-all. For example, an attacker could write a script to the filesystem and configure `launchd` to execute it, bypassing the sandbox. Additionally, sandboxing complex applications like Safari is challenging due to their extensive functionality.

### References

- [Matasano Security Blog](http://www.matasano.com/log/986/what-weve-since-learned-about-leopard-security-features/)
- [Useful Security Blog](http://www.usefulsecurity.com/2007/11/apple-sandboxes-part-2/)
- [Apple Developer Open Source](http://developer.apple.com/opensource/index.html)
- [Mac OS Internals Book](http://www.amazon.com/Mac-OS-Internals-Systems-Approach/dp/0321278542)
- [Uninformed Journal](http://uninformed.org/index.cgi?v=4&a=3&p=17)
- [CVE-2006-4392](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4392)
- [CVE-2007-3749](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3749)
- [Objective-C Programming](http://www.otierney.net/objective-c.html)
- [Nearband Blog](http://blog.nearband.com/2007/11/12/first-impressions-of-leopard)

---

# Chapter 2: Mac OS X Parlance

Computers running Mac OS X use a variety of protocols to communicate with other machines. Many of these are common protocols used by all computers, such as HTTP, FTP, or SMTP. However, Apple has designed some protocols that, while often available to other operating systems, are used almost exclusively by Macs. An example of such a protocol is Bonjour. Additionally, some important Mac OS X applications rely on rather obscure protocols such as Real Time Streaming Protocol (RTSP). While many applications in the world may support RTSP, Mac OS X is the only major operating system that processes this protocol by default, out of the box, with both QuickTime Player and Safari. In this chapter, we will dissect these particular formats and protocols to better understand the types of data consumed by Mac OS X applications.