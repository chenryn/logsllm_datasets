}
This contains an obvious stack-overfl ow vulnerability. Normal execution
causes an exploitable crash.
$ gdb ./stack_police
GNU gdb 6.3.50-20050815 (Apple version gdb-768) (Tue Oct 2 04:07:49 UTC
2007)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you
are
welcome to change it and/or distribute copies of it under certain
conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for
details.
This GDB was configured as “i386-apple-darwin”…
No symbol table is loaded. Use the “file” command.
Reading symbols for shared libraries … done
(gdb) set args
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
(gdb) r
Starting program: /Users/cmiller/book/macosx-book/stack_police
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Reading symbols for shared libraries ++. done
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41414141
0x41414141 in ?? ()
(gdb)
9955336633cc0011..iinndddd 2277 11//2255//0099 44::3399::2288 PPMM
28 Part I ■ Mac OS X Basics
Compiling with the propolice option, however, prevents exploitation.
$ gcc -g -fstack-protector -o stack_police stack_police.c
$ ./stack_police AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Abort trap
In this case, a SIGABRT signal was sent by the function that checks the
canary’s value.
This is a good protection against stack-overfl ow exploitation, but it helps
only if it is used. Leopard binaries sometimes use it and sometimes don’t.
Observe.
$ nm QuickTime\ Player | grep stack
U ___stack_chk_fail
U ___stack_chk_guard
$ nm /Applications/Safari.app/Contents/MacOS/Safari | grep stack
Here, the nm tool (along with grep) is used to fi nd the symbols utilized in two
applications: QuickTime Player and Safari. QuickTime Player contains the sym-
bols that are used to validate the stack, whereas Safari does not. Therefore, the
code within the main Safari executable does not have this protection enabled.
It is important to note that when compiling, this stack protection will be used
only when the option is used while compiling the specifi c source fi le in which
the code is located. In other words, within a single application or library, there
may be some functions with this protection enabled but others without the
protection enabled.
One fi nal note: It is possible to confuse propolice by smashing the stack com-
pletely. Consider the previous sample program with 5,000 characters entered
as the fi rst argument.
(gdb) set args `perl -e ‘print “A”x5000’`
(gdb) r
Starting program: /Users/cmiller/book/macosx-book/stack_police `perl -e
‘print “A”x5000’`
Reading symbols for shared libraries ++. done
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41414140
0x920df690 in strlen ()
(gdb) bt
#0 0x920df690 in strlen ()
#1 0x92101927 in strdup ()
#2 0x92103947 in asl_set_query ()
#3 0x9211703e in asl_set ()
#4 0x92130511 in vsyslog ()
#5 0x921303e8 in syslog ()
#6 0x921b3ef1 in __stack_chk_fail ()
#7 0x00001ff7 in main (argc=1094795585, argv=0xbfffcfcc) at
stack_police.c:4
9955336633cc0011..iinndddd 2288 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 29
The stack-check failure handler, __stack_chk_fail(), calls syslog syslog(“error
%s”, argv[0]);. We have overwritten the argv[0] pointer with our own value. This
does not appear to be exploitable, but unexpected behavior in the stack-check
failure handler is not a good sign.
Firewall
Theoretically, Leopard offers important security improvements in the form
of its fi rewall. In Tiger the fi rewall was based on ipfw (IP fi rewall), the BSD
fi rewall. The ports that are open were controlled by the application’s plist fi les.
In Leopard, ipfw is still there but always has a single rule.
$ sudo ipfw list
65535 allow ip from any to any
Instead the fi rewall is truly application based and is controlled by /usr/
libexec/ApplicationFirewall/socketfi lterfw and the associated com.apple.nke
.applicationfi rewall driver.
Many issues with Leopard’s firewall prevent it from being a significant
obstacle to attack. The fi rst is that it is not enabled by default. Obviously, if it is
not on, it isn’t an issue for an attacker. The next is that it blocks only incoming
connections. This means any Leopard box that had some services running and
listening might be protected; however, out-of-the-box Macs don’t have many
listening processes running, so this isn’t really an issue. If users were to turn
on something extra, like fi le sharing, they would obviously allow connections
through the fi rewall, too. As far as exploit payload goes, it is no more diffi cult
to write a payload that connects out from the compromised host (allowed by
the fi rewall) than to sit and wait for incoming connections (not allowed by the
fi rewall). Regardless, it is hard to imagine a scenario in which the Leopard
fi rewall would actually prevent an otherwise-successful attack from working.
Instead, it is basically designed to prevent errant third-party applications from
opening listening ports.
Sandboxing (Seatbelt)
Another security feature introduced in Leopard is the idea of sandboxing appli-
cations with the kernel extension Seatbelt. This mechanism is based on the prin-
ciple that your Web browser probably doesn’t need to access your address book
and your media player probably doesn’t need to bind to a port. Seatbelt allows
an application developer to explicitly allow or deny an application to perform
particular actions. In this way, exploitation of a vulnerability in a particular
application doesn’t necessarily provide complete access to the system.
9955336633cc0011..iinndddd 2299 11//2255//0099 44::3399::2288 PPMM
30 Part I ■ Mac OS X Basics
Currently the source code for this mechanism is not available, but by looking
at and playing around with the XNU source code, it becomes clear how applica-
tion sandboxing works. The documentation for it is scarce to nonexistent. At this
point, this feature is not intended to be used by anyone but Apple engineers, as
the following warning indicates.
WARNING: The sandbox rule capabilities and syntax used in this fi le are currently
an Apple SPI (System Private Interface) and are subject to change at any time
without notice. Apple may in [the] future announce an offi cial public supported
sandbox API, but until then Developers are cautioned not to build products that
use or depend on the sandbox facilities illustrated here.
With one exception, applications that are to be sandboxed need to explicitly
call the function sandbox_init() to execute within a sandbox. All child processes
of a sandboxed function also operate within the sandbox. This allows you to
sandbox applications that do not explicitly call sandbox_init() by executing them
from within an application in an existing sandbox. One of the parameters to the
sandbox_init() function is the name of a profi le in which to execute. Available
profi les include the following.
■ kSBXProfi leNoInternet: TCP/IP networking is prohibited.
■ kSBXProfi leNoNetwork: All sockets-based networking is prohibited.
■ kSBXProfi leNoWrite: File-system writes are prohibited.
■ kSBXProfi leNoWriteExceptTemporary: File-system writes are restricted
to the temporary folder /var/tmp and the folder specified by the
confstr(3) confi guration variable _CS_DARWIN_USER_TEMP_DIR.
■ kSBXProfilePureComputation: All operating-system services are
prohibited.
These profi les are statically compiled into the kernel. We will test some of
these profi les in the following code by using the sandbox-exec command. For
this command, these profi les are summoned by the terms nointernet, nonet,
nowrite, write-tmp-only, and pure-computation.
$ sandbox-exec -n nonet /bin/bash
bash-3.2$ ping www.google.com
bash: /sbin/ping: Operation not permitted
bash-3.2$ exit
$ sandbox-exec –n nowrite /bin/bash
bash-3.2$ cat > foo
bash: foo: Operation not permitted
Here we demonstrate starting the bash shell with no networking allowed. We
omit showing that all the local commands still work and jump straight to try-
ing to use ping, which fails. Exiting out of that sandbox, we try out the nowrite
9955336633cc0011..iinndddd 3300 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 31
sandbox and demonstrate that we cannot write fi les even though normally it
would be allowed.
Additionally, it is possible to use a custom-written profi le. Although there is
no documentation on how to write one of these profi les, there are quite a few
well-documented examples in the /usr/share/sandbox directory from which
to start. These fi les are written using syntax from the Scheme programming
language and describe all the applications currently sandboxed. These applica-
tions include
■ krb5kdc
■ mDNSResponder
■ mdworker
■ named
■ ntpd
■ portmap
■ quicklookd
■ syslogd
■ update
■ xgridagentd
■ xgridagentd_task_nobody
■ xgridagentd_task_somebody
■ xgridcontrollerd
Take a look at a couple of these fi les. The fi rst is quicklookd.
;;
;; quicklookd - sandbox profile
;; Copyright (c) 2006-2007 Apple Inc. All Rights reserved.
;;
;; WARNING: The sandbox rules in this file currently constitute
;; Apple System Private Interface and are subject to change at any time
and
;; without notice. The contents of this file are also auto-generated and
not
;; user editable; it may be overwritten at any time.
;;
(version 1)
(allow default)
(deny network-outbound)
(allow network-outbound (to unix-socket))
(deny network*)
(debug deny)
9955336633cc0011..iinndddd 3311 11//2255//0099 44::3399::2288 PPMM
32 Part I ■ Mac OS X Basics
This policy says that, by default, all actions are allowed except those that
are specifi cally denied. In this case, network communication is denied, as the
application doesn’t need it. Therefore, if this process were taken over by a remote
attacker (say, by providing the victim with a malicious fi le), the process would
not be able to open a remote socket back to the attacker. We’ll discuss a way
around this in a moment.
Another example is update.sb.
(version 1)
(debug deny)
(allow process-exec (regex #”^/usr/sbin/update$”))
(allow sysctl-read)
(allow file-read-data file-read-metadata
(regex #”^/usr/lib/.*\.dylib$”
#”^/var”
#”^/private/var/db/dyld/”
#”^/dev/urandom$”
#”^/dev/dtracehelper$”))
(deny default)
This policy denies all actions by default and allows only those explicitly
needed. This is generally a safer approach. In this case, update can read fi les
only from select directories.
Now take a moment to see how this works on a test program. This program
takes the name of a fi le from the command line and attempts to open it, read it,
and print the results to the screen; i.e., it is a custom version of the cat utility.
#include 
#include 
int main(int argc, char *argv[]){
int n;
if(argc != 2){
printf(“./openfile filename\n”);
exit(-1);
}
char buf[64];
FILE *f = fopen(argv[1], “r”);
if(f==NULL){
perror(“Error opening file:”);
exit(-1);
}
while(n = fread(buf, 1, 64, f)){
write(1, buf, n);
}
fclose(f);
}
9955336633cc0011..iinndddd 3322 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 33
Consider the simple policy fi le. This fi le allows reading fi les only from /tmp.
(version 1)
(debug deny)
(allow process-exec (regex #”openfile”))
(allow file-read-data file-read-metadata
(regex #”^/usr/lib/.*\.dylib$”
#”^/private/tmp” ))
(deny default)
We can see this policy being enforced by trying to read a fi le named hi, which
contains only the single word “hi.”
$ ./openfile hi
hi
$ sandbox-exec -f openfile.sb ./openfile hi
Error opening file:: Permission denied
$ sandbox-exec -f openfile.sb ./openfile /private/tmp/hi
hi
Here, the sandbox-exec binary is simply a wrapper that sets the sandbox and
then executes the other program within the sandbox as a child. As you can see,
the sandbox prevents reading from arbitrary directories, but still allows the
application to read from the /tmp directory.
It should be noted that sandboxes are not a cure-all. For instance, in the
quicklookd example, network connections are denied but anything else is per-
mitted. One way to achieve network access is to write a fi le to be executed to
the fi lesystem—perhaps a script that sets up a reverse shell—then confi gure
launchd to start it for you. As launchd is not in the sandbox, there will be no
restrictions on this new application. This is one example of circumventing the
sandbox.
Additionally, it is diffi cult to effectively sandbox an application like Safari.
This application makes arbitrary connections to the Internet, reads and writes
to a variety of fi les (consider the fi le:// URI handler as well as the fact a user
can use the Save As option from the pull down menu) and executes a vari-
ety of applications (through various URI handlers such as ssh://, vnc://, etc).
Therefore, it will be hard to write a policy that signifi cantly hinders an attacker
who gains control of the Safari process.
One fi nal note is that the Apple-authored software that runs on Windows
doesn’t have additional security precautions, such as application sandboxing.
When you download iTunes for Windows so that you can sync your iPhone,
you open yourself up to a remote attack against the mDNSResponder running
on your system without its protective sandbox.
9955336633cc0011..iinndddd 3333 11//2255//0099 44::3399::2288 PPMM
34 Part I ■ Mac OS X Basics
References
http://www.matasano.com/log/986/what-weve-since-learned-about-
leopard-security-features/
http://www.usefulsecurity.com/2007/11/apple-sandboxes-part-2/
http://developer.apple.com/opensource/index.html
http://www.amazon.com/Mac-OS-Internals-Systems-Approach/
dp/0321278542
http://uninformed.org/index.cgi?v=4&a=3&p=17
http://cve.mitre/org/cgi-bin/cvema,e.cgi?name=2006-4392
http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3749
http://www.otierney.net/objective-c.html
blog.nearband.com/2007/11/12/first-impressions-of-leopard#
9955336633cc0011..iinndddd 3344 11//2255//0099 44::3399::2288 PPMM
CHAPTER
2
Mac OS X Parlance
Computers running Mac OS X use a variety of protocols to communicate with
other machines. Many of these are common protocols used by all computers—
for example HTTP, FTP, or SMTP. Through the years, Apple has designed some
protocols that, while often available to other operating systems, are used almost
exclusively by Macs. An example of such a program is Bonjour. Also, some
important Mac OS X applications rely on rather obscure protocols such as Real
Time Streaming Protocol (RTSP). While many applications in the world may
speak RTSP, Mac OS X is the only major operating system that processes this pro-
tocol by default, out of the box, with both QuickTime Player and Safari. In this
chapter we take some time to dissect these particular formats and protocols to
better understand the types of data consumed by the Mac OS X applications.