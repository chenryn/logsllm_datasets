    |_ comment: a comment?
    |_ text: wig
`lxml`并没有读取第一个`text`节点结束后的`text`节点。而没有添加注释的节点如下所示：
    element: NameID
    |_ text: kludwig
这种情况下，程序解析完第一个`text`节点后就不再处理也非常合理。
表现出类似行为的另一个XML解析库为Ruby的`REXML`库。根据`get_text`方法的[文档](https://ruby-doc.org/stdlib-2.2.3/libdoc/rexml/rdoc/REXML/Element.html#method-i-get_text)描述，我们就能理解为何这些XML API会表现出这种行为：
    [get_text] 会返回第一个子Text节点，如果不存在则返回nil。该方法会返回实际的Text节点，而非String字符串内容。
如果所有的XML
API都遵循这种处理方式，那么在第一个子节点后就停止提取文本虽然看起来并不直观，但可能不会造成任何问题。不幸的是情况并非如此，某些XML库虽然包含几乎相同的API，但提取文本的方式却并不相同：
    import xml.etree.ElementTree as et
    doc = "kludwig"
    data = et.fromstring(payload)
    return data.text # returns 'kludwig'
我也碰到过一些实现方法，这些方法并没有利用XML
API来实现这一功能，而是自己进行文本提取，简单地提取出第一个子节点中的文本，这也是子字符串文本提取的另一种方法。
## 五、漏洞说明
现在已经有3个因素能够触发该漏洞：
1、SAML Response中包含用来标识认证用户的字符串；
2、（大多数情况下）XML规范化处理会删除注释信息，不用于签名验证中，因此往SAML Response中添加注释并不会破坏签名有效性。
3、当包含注释信息时，XML文本提取过程可能只会返回XML元素中文本字符串的子串。
因此，当攻击者具备`[PI:EMAIL](mailto:PI:EMAIL).com`账户的访问权限时，就可以修改自己的SAML断言，在SP处理时将NameID修改为`[PI:EMAIL](mailto:PI:EMAIL)`。现在，只要在之前的SAML
Response中添加7个字符，我们就能构造出攻击载荷，如下所示：
        https://idp.com/
                PI:EMAIL
                some base64 data that represents the signature of the assertion
## 六、如何影响
现在说一下具体影响。
出现这种行为并不是一件好事，但也并非总是能被成功利用。SAML IdP以及SP有各种配置选项，因此这一漏洞所能造成的实际影响范围也因人而异。
比如，如果某些SAML SP使用email地址并且验证域名是否位于白名单中，那么这种SP与那些使用任意字符串作为用户标识符的SP相比就更加安全一些。
对于IdP而言，向用户开放账户注册功能可能会使问题变得更加严重。手动管理用户账户注册会多一层安全屏障，使漏洞利用起来更加困难。
## 七、缓解措施
如何缓解这个漏洞在某种程度上取决于用户与SAML的具体关系。
###  Duo软件的用户
Duo已经发布了1.2.10版[Duo Network
Gateway](https://duo.com/docs/dng)的安全更新。如果你将DNG用作SAML服务提供商，尚未更新到1.2.10或者更新版本（目前1.2.10是最新版本），我们建议您及时升级。
大家可以参考Duo的[产品安全公告（PSA）](https://duo.com/labs/psa/duo-psa-2017-003)了解此漏洞的更多细节。
###  运行或维护IdP或者SP的用户
最好的缓解措施就是确保处理SAML的库不受到此问题影响。我们发现了多个SAML库要么利用了不甚直观的XML
API，要么自己错误实现了文本提取功能，但我相信还有更多的库没有很好地处理XML节点中的注释。
另一种可能的缓解措施就是默认采用不会忽略注释的规范化算法，比如`http://www.w3.org/2001/10/xml-exc-c14n#WithComments`。使用这种规范化算法后，攻击者添加的注释会破坏签名的有效性，但我们无法修改具体使用的规范化算法标识，想修改的话需要IdP以及SP的支持，这可能不是一种通用的缓解措施。
此外，如果你的SAML SP强制使用了[双因素身份认证](https://duo.com/resources/glossary/two-factor-authentication)机制，这种情况就比较安全，因为该漏洞只能让攻击者绕过用户的第一层身份认证机制。请注意，如果你的IdP同时负责第一层以及第二层身份认证，那么该漏洞很有可能会同时绕过这两层保护。
###  维护SAML处理库的用户
此时最显而易见的缓解措施是确保所使用的SAML库在处理带有注释的XML元素时，可以成功提取出该元素的全部文本。我发现大多数SAML库都具备某种形式的单元测试功能，并且想要更新测试也是非常方便的一件事情（比如提取像`NameIDS`之类的属性，在文档签名之前添加注释）。如果测试能够继续通过，那么一切顺利。否则，你可能就受到此漏洞影响。
另一种可能的缓解措施就是更新所使用的库，对于任何处理过程（如文本提取）都要在签名验证之后使用规范化的XML文档，这样就能防护此漏洞以及XML规范化过程所带来的其他漏洞。
###  维护XML解析库的用户
从我个人角度来看，这么多程序库受到此漏洞影响表明许多用户认为XML内部文本API能够正常处理注释数据，而这种现象也敦促我们去修改那些API的处理机制。然而，我并不认为XML库开发者需要因此做出太大改动，他们可以采取比较合理措施，比如保持API现状，然后在文档中做出相应说明。
另一种缓解措施就是改进XML的标准。经过研究后，我并没有发现能够规范正确行为的任何标准，我们可能需要指定相关的这些标准如何协同工作。
## 八、时间线
大家可以参考[此处链接](https://www.duo.com/labs/disclosure)了解我们的漏洞披露策略。对于这个漏洞，由于影响多个厂商，我们决定与CERT/CC一起协商披露时间，具体时间线如下：
2017-12-18：联系CERT/CC，提供漏洞信息。
2017-12-20：CERT/CC及时跟进，询问了一些细节。
2017-12-22：回答CERT/CC提出的问题。
2018-01-02至2018-01：通过邮件与CERT/CC进一步讨论该问题。
2018-01-24：CERT/CC完成内部分析流程，通知受影响的厂商。
2018-01-25：厂商确认CERT/CC的报告。我们与CERT/CC以及相关厂商进一步沟通，进一步解释该问题以及其他攻击方法。
2018-01-29：CERT/CC确认了可能受此漏洞影响的其他厂商并与之联系。
2018-02-01：Duo Labs为每个受影响的厂商保留了CVE编号。
2018-02-06：Duo检查并确认了CERT/CC的漏洞技术备注草案。
2018-02-20：最后确认所有受影响的厂商已经做好漏洞披露准备。
2018-02-27：漏洞披露。
感谢CERT/CC帮助我们披露次漏洞，感谢CERT/CC联系的所有相关组织及人员能够快速响应此漏洞。