### Monarch: A Tool for Inferring Network Path Properties

Monarch is a powerful tool that can infer properties of network paths, particularly those that have received limited attention from the research community, such as paths to end hosts in commercial cable and DSL networks. For this study, we analyzed the Broadband trace described in Section 4.1, which includes Monarch flows to 4,805 broadband hosts across 11 major cable and DSL networks in North America and Europe. Our analysis inferred several path properties, including throughput, round-trip times, queuing delays, loss, and reordering.

While a detailed characterization of these properties is beyond the scope of this paper, we present some initial results on the overall throughput of these flows and discuss their potential implications.

#### Throughput Analysis

Figure 13 illustrates the distribution of throughput for flows to different cable and DSL ISPs. The throughput plots for DSL ISPs show sharp increases at 256 Kbps, 384 Kbps, 512 Kbps, and 1 Mbps. These data rates correspond to the link speeds advertised by these ISPs (see Table 4), indicating that our transfers were able to saturate the access link, which is likely the bottleneck. However, the throughput for cable flows does not exhibit similar jumps, even though cable ISPs also advertise discrete link speeds. This suggests that DSL and cable flows may be limited by different factors, with access link capacities having a more significant impact on DSL flows compared to cable flows.

Overall, our experiment demonstrates how Monarch can be used to infer properties of network paths that have been difficult to measure in the past. Previous studies of broadband hosts [20] required control over both endpoints, limiting them to a small number of broadband paths.

### Testing Complex Protocol Implementations

Modern transport protocols, such as TCP NewReno with fast retransmit and recovery, are so complex that implementing them correctly can be challenging. While program analysis techniques [28] can help debug functionally incorrect implementations, it is crucial to test the performance of these protocols in real-world conditions to identify performance issues. Monarch is particularly useful for testing protocols because it can run complete and unmodified protocol implementations.

We used Monarch to emulate TCP flows to various types of hosts, including broadband and academic hosts. During this process, we discovered bugs in the Linux TCP stack that frequently manifest over certain types of Internet paths. For example, we found that the Linux 2.6.11 implementation of Fast Recovery [12] can cause the congestion window to collapse almost entirely instead of halving it. This problem can severely reduce throughput and occurs repeatedly over paths to DSL or cable hosts.

The purpose of Fast Recovery is to allow the TCP sender to continue transmitting while waiting for a retransmitted segment to be acknowledged. Linux uses a variant known as rate halving [43], which transmits one new segment for every other ACK received. Under normal conditions, this gradually decreases the number of packets in flight by half. Linux 2.6.11 implements rate halving by estimating the number of packets in flight and capping the congestion window at that number.

However, we found that this approach fails when the congestion window approaches the send buffer size. Figure 14 shows an example where the first loss occurred after 0.6 seconds, with the congestion window at 36 packets. Initially, Linux sent 8 additional segments for every other ACK as expected. But once it reached the default send buffer size of 64 kB (44 packets), it could not transmit more new segments. After this point, with no new segments being transmitted, the number of packets in flight, and consequently the congestion window, decreased rapidly. Every incoming ACK reduced the congestion window by one packet, causing it to fall far below the slow start threshold of 18 packets. Thus, after leaving Fast Recovery, Linux fell back into slow start for over half a second. Note that a second loss at 2.0 seconds was handled correctly because the congestion window was still fairly small.

Monarch helped us discover this problem because it allowed us to test the complete and unmodified protocol implementation (in this case, the NewReno code in the Linux kernel) over a wide range of real links with different characteristics.

### Related Work

Monarch leverages existing protocols in innovative ways to perform measurements that were previously intractable. This approach is similar to several other measurement tools. Sting [44] manipulates the TCP protocol to measure packet loss. T-BIT [25, 32] exploits the TCP protocol to characterize Web servers' TCP behavior. King [14] uses DNS queries to measure latencies between two arbitrary DNS servers. SProbe [42] sends packet pairs of TCP SYN packets to measure bottleneck bandwidth to uncooperative Internet hosts. Like Monarch, these tools send carefully crafted packet probes to remote Internet hosts to measure network properties.

There is a substantial body of literature on evaluating transport protocol designs and implementations. Much of the previous work relies on one of the following three approaches to characterize protocol behavior:

1. **Synthetic Network Simulators and Emulators**: Tools like ns-2 [30], NetPath [1], dummynet [40], NIST [9], and ModelNet [46] use controlled environments to simulate and model protocol behavior.
2. **Active Measurement**: Studies by Bolot [7] and Paxson [33] were among the first to investigate network packet dynamics along fixed Internet paths. Padhye and Floyd [32] characterized the TCP behavior of popular Web servers. Medina et al. [25, 26] investigated the behavior of TCP implementations and the effect of network middleboxes on transport protocols. Recent studies have used PlanetLab [36] to examine various aspects of TCP network traffic.
3. **Passive Measurements**: Balakrishnan et al. [5] analyzed the performance of individual TCP flows carrying Web traffic based on traces from a busy Web server. Jaiswal et al. [16] used traffic traces from a Tier-1 ISP to investigate the evolution of TCP connection variables. Arlitt et al. [4] used Web traces to study the impact of latency on short transfer durations.

### Conclusions

In this paper, we presented Monarch, a tool that emulates transport protocol flows over live Internet paths. Monarch enables the evaluation of transport protocols in realistic environments, complementing the controlled environments provided by state-of-the-art network simulators, emulators, or testbeds. Monarch is highly accurate, with its emulated flows closely resembling TCP flows in terms of throughput, loss rate, queuing delay, and other characteristics.

Monarch uses generic TCP, UDP, or ICMP probes to emulate transport protocol flows to any remote host that responds to such probes. By relying on minimal support from the remote host, Monarch enables protocols to be evaluated on an unprecedented scale, over millions of Internet paths.

We used Monarch for three novel experiments:
1. A preliminary study on the performance of different congestion control algorithms (TCP Reno, TCP Vegas, and TCP BIC) showed that much remains to be understood about the behavior of even widely adopted protocols over the Internet at large.
2. We demonstrated that Monarch measurements can be used to infer network properties of less-studied Internet paths, such as paths to cable and DSL hosts.
3. We used Monarch to test complete and unmodified TCP protocol implementations in the Linux kernel over a variety of Internet paths, discovering nontrivial bugs.

Based on our experience, we believe that Monarch can help the research community conduct large-scale experiments leading to new insights and findings in the design and evolution of Internet transport protocols.

### Acknowledgments

We would like to thank Steve Gribble, Dan Sandler, and Emil Sit for generously hosting Monarch servers for our experiments. Peter Druschel and our anonymous reviewers provided detailed and helpful feedback on the earlier versions of this draft. The ns-2 interface for Monarch was developed by Prateek Singhal.

### References

[References listed here as per the original text]

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and engaging for the reader.