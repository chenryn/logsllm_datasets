distributed over a number of devices: the application may need to
“know” where all the pieces are, so it can put all the jigsaw puz-
zle pieces together, without physically copying all the pieces to one
place, if possible.
3.4 Other Issues
In addition to resolving transport-level issues, we also need to
provide easy-to-use APIs. Programming models similar to exist-
ing asynchronous communication models [23] and the program-
ming languages built on top of them [3] may be desirable. Under
these models, handler codes associated with messages are asyn-
chronously executed upon arrival of the messages to incorporate
the newly arriving data into ongoing computations. Applications
can be granted direct access to the data contained on the movable
storage media to make data copying out of the mobile storage de-
vice potentially unnecessary. For read-only storage media, copy-
on-write techniques may be necessary.
Security is another issue. The sender may need to compute ﬁn-
gerprints and/or encrypt data on outgoing mobile storage devices.
The receiver may desire to ensure that (1) the incoming mobile stor-
age device is from a sender whom it is willing to receive data from;
(2) the sender identity is not forged; and (3) the data has not been
tampered with.
4. ROUTING
We have considered support at the communication end points in
the last section. We now consider how data is routed from a sender
to a receiver. Routing in the Postmanet has some unique aspects.
First, the routing metrics are different from that of traditional net-
works. For example, an important consideration is minimizing the
number of movable storage media received or sent per site per post-
man visit. The amount of data transmitted with each storage device
is less of a concern due to the abundant capacity of the storage de-
vices. This is in contrast to traditional networks where one tends to
pay more attention to the total amount of data trafﬁc than the num-
ber of distinct paths used for conveying them. Second, if the LLLB
Internet connection is available, a Postmanet routing algorithm can
perform sophisticated optimizations that are not feasible in a tradi-
tional network. The LLLB channel could be used to disseminate
trafﬁc information (in terms of who desires to send bulk data to
whom), and this information could be processed by one or more
coordinators to compute the best routes, with multiple coordina-
tors improving reliability and performance. Furthermore, as much
as 24 hours, for example, may elapse between successive postman
visits, so the coordinator can employ computationally intensive al-
gorithms to compute good routes. Given these considerations, we
now examine the various options for routing in the Postmanet.
4.1 Three Simple Routing Strategies
Let us consider the ﬁrst three examples illustrated in Figure 2.
Figure (a) is the centralized alternative. The server copies data
from incoming storage devices to outgoing devices. The obvious
disadvantages are unnecessary routing delays to and from a central
server that can be located far away from the communicating parties,
potential bottleneck effects developing at the central server, the ex-
tra cost incurred by the postal system, and the infrastructure cost of
setting up and running the central server. This approach, however,
has an important advantage. For example, even though A needs
to send data to two receivers, A only needs to send a single mo-
bile storage device to the central server, which acts as a “switch.”
Similarly, even though B needs to receive data from two senders,
B only needs to receive a single mobile storage device from the
central server. The mailing labels used by all the end communicat-
ing parties are identical: the labels contain the postal address of the
server. Each site at most receives one storage device and sends one
for each postman visit. In effect, data routing occurs both digitally
and mechanically: digitally when data is copied from one storage
device to another at the central server, and mechanically when a
storage device is carried to and from the server by the postal sys-
tem. Some of the end-to-end functionalities described earlier may
also execute in the server. For example, the server may also en-
force security policies so only data that originates from authorized
senders and is untampered with is forwarded.
X 
Y
Z
X
Y
Z
A
X
A
B
(a)
Y
C
Z
A
X
B
(b)
Y
C
Z
C
A
B
(c)
C
B
(d)
Figure 2: Routing strategies. A solid arrow denotes data communi-
cation carried by the Postmanet. A dash curve in (b) or (c) denotes
routing information carried by the Internet. A dashed line between a
pair of nodes in (d) denotes that it is permissible for these two nodes
to receive movable storage media directly from each other. In all four
panes, A sends different data items to X and Y , Y sends some other
data to B, and Z sends different data items to B and C. (a) Central-
ized data routing via a single data distribution center. (b) Direct peer-
to-peer data routing.
(c) Data routing via multiple data distribution
centers. (d) Indirect peer-to-peer routing.
Figure 2(b) illustrates an “opposite” approach. The role of the
central server is limited to the coordination of routing decisions:
it does not participate in data forwarding. In this ﬁgure, A con-
sults the central server to obtain information such as the mailing
labels of X and Y . A sends two separate mobile storage devices
directly to the intended recipients.
(It is interesting to speculate
how a peer-to-peer version of Netﬂix may operate based on this
approach.) Data routing is potentially more efﬁcient than that in
Figure (a). On the other hand, a disadvantage of this approach is
that a site could receive or send a large number of storage devices
per postman visit, which could become an administrative and cost
burden. For a modest-sized system, however, this approach can be
an attractive approach as it demands the least from a shared infras-
tructure.
In Figure 2(c), we employ multiple data distribution centers that
are geographically distributed. As is the case in Figure (a), each site
needs to send at most one storage device toward the closest data dis-
tribution center per postman visit. Each site may receive multiple
devices per postman visit, as many as the number of distribution
centers. (Or alternatively, a site may send multiple outgoing de-
vices but receive only one incoming device per postman visit, if we
insist that a mobile storage device must be sent to the distribution
center closest to the receiver, not the sender. Or alternatively, a site
may employ a mixture of these approaches and send and receive
multiple devices per postman visit. In all cases though, the num-
ber of devices involved per postman visit is limited by the number
of distribution centers.) The geographically distributed distribution
centers allow some degree of geographical awareness in routing
decisions. Ideally, the distribution centers should be integrated into
the existing postal system (or its rough equivalent, such as UPS or
FedEx) so that some or all of the post ofﬁces themselves serve as
distribution centers, further minimizing delivery latency. The dis-
tribution centers do not exchange data with each other, but they
may communicate among themselves to coordinate routing deci-
sions. The latency achieved under this alternative is likely to be
worse than that is possible under the alternative illustrated in Fig-
ure (b) due to the extra hops through the distribution centers. It is
possible to allow the coexistence of the alternatives illustrated in
Figures (b) and (c), so occasional latency-sensitive packages can
be routed directly to their destination without passing through data
distribution centers.
4.2 Desired Routing Characteristics
The routing strategies that we have examined above have disad-
vantages. The approaches illustrated in Figures 2(a) and (c) utilize
data distribution centers, which can be a substantial infrastructure
investment if these servers need to copy a large amount of data for
many Postmanet end users. Under the direct peer-to-peer routing
strategy shown in Figure 2 (b), if there are many Postmanet users,
each site may need to send and receive many mobile storage de-
vices per day.
An ideal Postmanet routing mechanism should possess the fol-
lowing characteristics: (1) it can accommodate a large number of
simultaneous Postmanet communicators without requiring a site to
handle many mobile storage devices per postman visit; (2) it has
end-to-end message propagation latencies that are close to those
provided by the postal system; (3) it does not require an expensive
infrastructure other than the existing postal system; (4) it does not
burden Postmanet nodes in an unbalanced manner with data copy-
ing tasks that are beyond their own communication needs; and (5) it
is robust when faced with misbehaving Postmanet end users. Some
of these goals are unique to the Postmanet; these goals often con-
ﬂict with each other; and we need to strike a proper balance among
them.
4.3 Static Indirect Peer-to-Peer Routing
As illustrated in Figure 2(d), by requiring Postmanet nodes to
forward data destined for others, we may be able to, in some sense,
distribute the data copying tasks of a data distribution center among
the participating sites. This approach can eliminate the need for
such an infrastructure, thus combining some of the advantages of
the different strategies shown in Figures (a)-(c). In Figure (d), for
example, Y sends to B a single disk, which contains both data
from Z and data originating from Y . After B receives this disk
and extracts data destined for B, it forwards a disk onto C, so C
ﬁnally receives the data sent originally by Z.
Suppose the number of Postmanet nodes is N. In the following
discussion, when we say a site “handles” k disks, we mean that the
site may receive up to k storage devices and send up to k storage
devices per postman visit; and when we refer to a “latency” metric,
it is in terms of the number of postal system forwarding hops visible
to Postmanet participants. In graph theoretic terms, the problem of
simultaneously limiting the number of disks handled per node and
maximum latency can be seen as that of constructing a directed
graph with a large number of nodes while keeping the diameter
and the maximum node degree small. The diameter corresponds
to the maximum latency, and the degree of a node corresponds to
the number of disks it handles. For example, in a simple case, if
N Postmanet nodes are organized into a k-dimensional directed
mesh (or more precisely, a k-dimensional directed torus), so that
each Postmanet node can only receive movable media from k of
√
its immediate mesh neighbors and send to k of the remaining mesh
neighbors, the worst latency is k k
N.
For a better solution, it is well known that with a constant node
degree (or a constant number of disks handled per site) the best di-
ameter (which bounds the maximum latency) that one can achieve
is O(log N ). (This bound follows from Moore’s bound that pro-
vides an upper limit on the number of nodes in a regular graph
with a given diameter and degree.) There are graph topologies,
such as de Bruijn graphs [4, 6], that can indeed achieve this bound
on worst-case latency. Distributed Hash Table (DHT) topologies
based on de Bruijn graphs can also probabilistically achieve the
same latency with constant number of disks handled per node [13].
These DHT-based systems employ implicit routing wherein routing
decisions are made locally without requiring elaborate knowledge
of the global topology. We do however note that implicit rout-
ing may be of limited value in Postmanet, where the control and
data trafﬁc can be conveyed on different networks—the LLLB In-
ternet could be used for dispersing topology information or topol-
ogy repairs, while bulk data is communicated over the HLHB chan-
nels. Randomized constructions with constant degree for each node
and O(log N ) diameter are also well known. A problem with the
randomized approach is that it may be challenging to construct
geography-aware routing topologies that can minimize unnecessary
extra postal system delays and costs.
A potential complication facing any peer-to-peer system is cop-
ing with misbehaving participants.
In a peer-to-peer Postmanet
routing mechanism, where a node may fail to promptly forward
data, replicating data on multiple outgoing devices along differ-
ent routes can increase robustness. Protocols dealing with routing
faults [2] may also be applied to such a Postmanet to isolate and
penalize misbehaving nodes.
4.4 Dynamic Peer-to-Peer Routing
The possible routes described in Section 4.3 are static: a Post-
manet node may communicate directly only with a small number
of pre-determined “neighbors.” These static constraints may be un-
necessarily restrictive. For example, in the routing strategy shown
in Figure 2(d), if C desires to send data to A, its data would nor-
mally be routed through B. But, there is no reason why C should
not be allowed to send a disk directly to A if, on a given day, it