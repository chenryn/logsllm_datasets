### 最佳实践
- **《记录动态格式化输出(ToB日志转换业务) - 阿里云RDS PostgreSQL, HybridDB for PostgreSQL最佳实践》**
- **《基于位置GIS的新零售商户网格化运营 - 阿里云RDS PostgreSQL、HybridDB for PostgreSQL最佳实践》**
- **《强制数据分布与导出prefix - 阅读阿里云pg, hdb pg oss快速数据规整外部表导出实践案例》**
- **《日增量万亿+级 实时分析与数据规整 - 阿里云HybridDB for PostgreSQL最佳实践》**
- **《ApsaraDB的左右互搏(PgSQL+HybridDB+OSS) - 解决OLTP+OLAP混合需求》**
- **《Greenplum roaring bitmap在业务场景中的应用 (类阿里云RDS PG varbitx, 应用于海量用户实时画像和圈选、透视)》**

### 数据同步通道
1. **[GitHub上的RDS DB Sync](https://github.com/aliyun/rds_dbsync)**
2. **OSS外部表优化：**
   - 文件数 = 计算节点数
   - 开启压缩
   - 允许错误条数
   - 超时参数
   - [详细文档](https://help.aliyun.com/document_detail/35457.html)
3. **目标数据源选择PostgreSQL**
   - [相关文档1](https://help.aliyun.com/document_detail/47677.html)
   - [相关文档2](https://help.aliyun.com/document_detail/30269.html)

### 数据写入实践
- 批量 vs 单步写入
- 为什么AO表写入会有IO放大？
  - [参考链接](https://github.com/digoal/blog/blob/master/201711/20171116_01.md)
- 如何提升写入速度

### 分布键选择建议
- HDB PG
  - 支持随机分布
  - 分布键允许多列
  - 如果有唯一或主键约束，必须与分布键一致
  - 选择分布键以确保不出现倾斜
  - 大表及常用于JOIN的列
  - [参考链接](https://github.com/digoal/blog/blob/master/201607/20160719_02.md)

### 行存与列存的选择
- [行存与列存的选择（阿里云扩展）](https://github.com/digoal/blog/blob/master/201708/20170825_02.md)
- [更多参考](https://github.com/digoal/blog/blob/master/201708/20170818_02.md)
- [更多参考](https://github.com/digoal/blog/blob/master/201608/20160815_01.md)
- **Append Only Table**：
  - 适合批量写入，少量DML操作
  - 行存：适用于查询较多字段、输出较多记录
  - 列存：适用于统计、JOIN、少量列查询
- **Heap Row Table**：
  - 适合单步写入，部分DML操作

### 非分布键与GROUP BY DISTINCT
- [参考链接](https://github.com/digoal/blog/blob/master/201711/20171123_01.md)
- 对于非分布键的分组聚合请求，Greenplum采用了多阶段聚合：
  1. 第一阶段：在SEGMENT本地聚合
  2. 第二阶段：根据分组字段，将结果数据重分布
  3. 第三阶段：再次在SEGMENT本地聚合
  4. 第四阶段：返回结果给master，必要时调用聚合函数的final func

### 非分布键内部多阶段JOIN
- HDB PG全自动，无任何JOIN限制
  - 数据节点本地JOIN：解决网络开销问题
  - 数据节点间自动重分布：小表自动广播，大表按JOIN字段自动重分布
  - 数据节点本地JOIN
  - 返回JOIN结果

### 分区表分区字段选择建议
- HDB PG
  - 支持范围、枚举分区
  - 不建议与分布键一致
  - 建议经常用于过滤的列（如时间、枚举）

### 分级存储功能
- [参考链接](https://help.aliyun.com/document_detail/35457.html)
- 热数据：实例本地存储
- 冷数据：OSS外部表存储
  - 使用继承与分区约束
  - 每个OSS外部表负责一部分数据
  - 使用约束建立OSS外部表继承关系

### 索引选择
- 自动索引选择
  - [参考链接](https://github.com/digoal/blog/blob/master/201706/20170617_01.md)
- GiST：空间数据
- B-Tree：等值、区间、排序
- Bitmap：类似倒排
  - 适用于含100到1万个唯一值的列
  - [参考链接](https://github.com/digoal/blog/blob/master/201705/20170512_01.md)

### 统计信息采集调度
- 专治SQL执行计划不准
- `gp_autostats_mode`：
  - `none`：不收集
  - `on_no_stats`：没有统计信息时收集
  - `on_change`：当写入、更新量超过阈值后自动收集
- [参考链接](https://github.com/digoal/blog/blob/master/201712/20171211_03.md)

### 队列管理
- `CREATE RESOURCE QUEUE name WITH (queue_attribute=value [, ... ])`
- 队列属性包括：
  - `ACTIVE_STATEMENTS=integer`
  - `MAX_COST=float [COST_OVERCOMMIT={TRUE|FALSE}]`
  - `MIN_COST=float`
  - `PRIORITY={MIN|LOW|MEDIUM|HIGH|MAX}`
  - `MEMORY_LIMIT='memory_units'`
- [参考链接](https://github.com/digoal/blog/blob/master/201708/20170821_01.md)

### 执行计划示例
- 示例查询及其执行计划
  - [参考链接](https://github.com/digoal/blog/blob/master/201712/20171204_02.md)

### 实践案例
- **Metascan + Sort Key + Index**
  - 工单ID、用户ID、订单ID及其他字段
  - 分布键、SortKey、索引
  - 分区（list, range）
  - [详细说明](https://help.aliyun.com/knowledge_detail/59195.html)

### 大吞吐输出场景开发实践
- 大数据并行计算，高吞吐并行写OSS
- 30MB/s/数据节点
- [参考链接](https://github.com/digoal/blog/blob/master/201707/20170726_01.md)

### 估值计算
- 求UV（唯一值）
- 求UV增量（唯一值增量）
- HLL估值插件
- [参考链接](https://github.com/digoal/blog/blob/master/201608/20160825_02.md)

### 滑窗分析
- 估值滑窗（最近7天UV）
  - `SELECT date, #hll_union_agg(users) OVER seven_days FROM daily_uniques WINDOW seven_days AS (ORDER BY date ASC ROWS 6 PRECEDING)`
- 统计滑窗（最近7天精确UV，SUM，AVG...）
  - `SELECT date, count(distinct users) OVER seven_days, sum(x) OVER seven_days, avg(x) OVER seven_days FROM daily_uniques WINDOW seven_days AS (ORDER BY date ASC ROWS 6 PRECEDING)`
- [参考链接](https://github.com/digoal/blog/blob/master/201711/20171129_01.md)

### 查看数据倾斜
- 数据分布不均匀导致性能差、存储空间受限、木桶效应
- [参考链接](https://github.com/digoal/blog/blob/master/201708/20170821_02.md)

### 查看锁等待
- [参考链接](https://github.com/digoal/blog/blob/master/201705/20170521_01.md)

### 查看数据膨胀、清理膨胀
- 堆表膨胀检测
  - [参考链接](https://github.com/digoal/blog/blob/master/201708/20170817_01.md)
- AO表膨胀检测
  - [参考链接](https://github.com/digoal/blog/blob/master/201708/20170817_03.md)
- 清理垃圾，行存、列存切换
  - [参考链接](https://github.com/digoal/blog/blob/master/201712/20171208_04.md)
  - [参考链接](https://github.com/digoal/blog/blob/master/201708/20170817_03.md)
  - [参考链接](https://github.com/digoal/blog/blob/master/201708/20170817_01.md)
  - [参考链接](https://github.com/digoal/blog/blob/master/201608/20160815_01.md)

### 数值类型的选择
- 如果需要确保精度，建议使用`float8`或`numeric`
- 海量数据处理建议采用`float8`或`int8`
- 数值类型性能比较：
  - `numeric`性能较低（内部实现的数据类型，有大量的`memcpy`）
  - `float4`, `float8`, `int`, `int8`性能较高

### 连接池
- **pgbouncer**
  - [参考链接1](https://github.com/digoal/blog/blob/master/201801/20180128_04.md)
  - [参考链接2](https://www.linkedin.com/pulse/scaling-greenplum-pgbouncer-sandeep-katta-/?articleId=6128769027482402816)
  - [官方网站](https://pgbouncer.github.io/)
- **pgpool-II**
  - [官方网站](http://pgpool.net/mediawiki/index.php/Main_Page)

### 常见热门问题
1. **HybridDB for PostgreSQL表的分布键是否支持设置4个列？**
   - 可以任意个列，类型不受限制。
2. **HybridDB for PostgreSQL分区表中分区个数的最佳范围是多少？**
   - 列存单个分区在单个节点上的记录数建议不要超过1千万条记录。
   - 行存单个分区在单个节点上的记录数建议不要超过200万行。
   - [参考链接](https://github.com/digoal/blog/blob/master/201803/20180328_01.md)
3. **HybridDB for PostgreSQL按列存储的表达到什么数量级时需要进行表压缩？**
   - 建议开启压缩。
4. **行存表和列存表JOIN是否可行？是否有性能影响？**
   - 可以，不影响性能。如果经常访问少量列，建议使用列存。
5. **HybridDB for PostgreSQL按列存储表压缩时，是选择全表压缩还是选择只对某些列进行压缩？**
   - 对于不经常访问的列，建议压缩，节约存储。
   - 对于经常访问的列，如果CPU不是瓶颈但IO是瓶颈，可以选择压缩。
   - 默认的块大小和压缩比就可以了。如果对性能不关心，只关心压缩比，可以调整配置。