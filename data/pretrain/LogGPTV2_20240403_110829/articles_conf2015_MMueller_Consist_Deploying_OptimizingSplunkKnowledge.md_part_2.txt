### Lookup-ul = user_location to OUTPUT location as sourcetype_location

- **Objective**: Map `user_location` to `location` and output it as `sourcetype_location`.
- **Issues**:
  - **Deduplication**: Removes per-sourcetype duplication.
  - **Transparency**: Not transparent at all.
  - **Maintenance**: Requires more effort to write and maintain knowledge objects.
  - **Viability**: Only viable if hidden behind event types and/or tags.
  - **Alias Duplication**: Retains per-alias duplication.

### Migration Strategies (4)

- **Replace per-sourcetype lookups with broader `props.conf` stanzas**:
  - Use wildcards on `source` or `host`:
    ```ini
    [source::*access.log*]
    ```
  - Unofficial: Wildcards on `sourcetype`:
    ```ini
    [(?::){0}splunk*]
    ```
- **Benefits**:
  - **Deduplication**: Removes per-sourcetype duplication.
  - **Transparency**: Transparent to the search and user.
- **Drawbacks**:
  - **Documentation and Support**: Sourcetype wildcards are neither documented nor supported.
  - **Alias Duplication**: Retains per-alias duplication.

### Indexed Tokens Footnote

- **Efficiency**:
  - The normalized search generated by reverse lookups can be efficient:
    ```spl
    index=_internal location="Las Vegas"
    ```
  - Normalized search:
    ```spl
    index=_internal
    (((sourcetype=splunk_web_access) AND
    ((user=Martin) OR (user=Tom))
    )) OR (location="Las Vegas")
    ```
- **Caveats**:
  - **Literal Matching**: Splunk looks for a literal `location="Las Vegas"`.
  - **Non-Unique Values**: Watch out for values like `location=0` that aren't unique, as they can increase `scanCount` and search duration.
  - **Further Reading**: More on dealing with indexed tokens after the end of the deck.

### Event Types

- **How Event Types Work**:
  - Store a search filter or fragments in a reusable box.
  - No pipes, no subsearches.
  - Run search and check `searchCanBeEventType` in Job Inspector.
  - `eventtype=foo` expands to the stored search fragment.
  - `eventtype=f*` expands to an OR'd list of matching event types.
  - Events that match an event type have their `eventtype` field set, regardless of whether the event type was used in the search or not.

- **Advantages**:
  - **Simplification**: Configured knowledge simplifies searches.
  - **Complexity Hiding**: Great way to hide complexity from the searcher.
  - **Scalability**: Add systems to existing searches without touching searches.
  - **Quick Understanding**: Looking at the `eventtype` field helps quickly understand results.

### Splunk Login Example

- **Configuration**:
  - `TA-splunk`, `eventtypes.conf`:
    ```ini
    [splunk_access]
    search = index=_audit "action=login attempt" NOT "action=search"
    normalizedSearch: ((index=_audit "action=login attempt" NOT "action=search"))
    ```
- **Notes**:
  - Avoids the wrath of calculated fields and aliases in the search.
  - Relies on the structure of raw events instead of field extractions.
  - Results contain the CIM-compatible `action` regardless.

### Tags

- **How Tags Work**:
  - Give a set of `field=value` pairs a common name.
  - `tag=foo` expands to the list of `field=value` pairs individually.
  - `tag=f*` expands to an OR'd list of matching tags.
  - Events that match a tag have their `tag` field set accordingly.
  - For each tagged field, additionally set `tag::field` field.

- **Advantages**:
  - **Homogenization**: Homogenize system-specific values to allow unified searches.
  - **Combination with Event Types**: Event types define system-specific searches, while tags provide a common interface.
  - **Unified Searches**: Unified searches find events over many systems and return homogeneous data.
  - **Splunk Common Information Model (CIM)**: This is the essence of CIM.
  - **Further Reading**: [Splunk Documentation](http://docs.splunk.com/Documentation/CIM)

### Splunk Login Example (Tags)

- **Configuration**:
  - `TA-splunk`, `tags.conf`:
    ```ini
    [eventtype=splunk_access]
    application = enabled
    authentication = enabled
    ```
- **Search**:
  - `tag=application tag=authentication` yields:
    ```spl
    (((index=_audit "action=login attempt" NOT "action=search"))) (((index=_audit "action=login attempt" NOT "action=search")))
    ```
- **Note**: The event type is included twice.

### How Tags Really Work

- **Search Expansion**:
  - Search for `tag=application tag=authentication`:
    - Splunk treats the search as `(tag=application) (tag=authentication)`.
    - Each tag is expanded individually.
    - `field=value` pairs will be included once per matching tag.
    - This can lead to larger `normalizedSearch` strings.

### Real-World Example

- **Splunk_TA_Oracle**:
  - Defines a handful of tagged event types.
  - Four match `tag=database tag=instance tag=stats`.
  - Expanding each tag on its own yields sixteen event types.
  - Every TA is influenced by every other TA: "Tag Expansion Explosion".

### Migration Strategies

- **Avoid Long Lists of Tags**:
  - Especially with event types and reverse lookups.
- **Use Distributive Properties**:
  - Tag `sourcetype`, `host`, etc., with `application` instead of tagging every Splunk event type.
  - Tag users or a reverse lookup field identifying them instead of special event types for admin users.
- **Real-World Definition**:
  - Look for what actually defines the tag in the real world.
- **Optimization**:
  - Charm Splunk into optimizing how tags are expanded.

### Wrapping Up

- **Dos and Don'ts**:
  - **Don't** stop using field aliases, calculated fields, reverse lookups, etc.
  - **Don't** compromise maintainability for small gains.
  - **Do** take a good look at your environment.
  - **Do** identify and improve real performance hogs.
  - **Do** scope knowledge object sharing as narrowly as possible.
  - **Do** clean up unused knowledge objects and TAs.
  - **Do** keep monitoring as your knowledge object world grows.

### Q&A

- **Related Breakout Sessions and Activities**:
  - Access to your Splunk at .conf? Talk to me for a quick look!
  - Grab the app: [Splunkbase](https://splunkbase.splunk.com/app/2871)
  - Duane & George: Beyond the Lookup Glass (Tuesday)
  - Amrit & Jag: How splunkd Works (Tuesday)
  - Duncan & Julian: Search Efficiency Optimization (Tuesday)
  - Niklas: How to use CIM to Gain Security Awareness (Wednesday)
  - Dritan: Notes on Optimizing Splunk Performance (later today!)

### THANK YOU

### Fields: Optimization
### Beyond Litsearch

### Fields

- **Indexed Tokens**:
  - "Let all values be indexed tokens, for indexed tokens power fast searches."
  - *Splunk, late 2000s*

### Job Inspector Continued

- **Base Lispy**: How did Splunk crawl its index for events?
- **Efficiency**: `eventCount / scanCount`: How efficient was the lispy-induced crawl?
- **Configuration**:
  - `limits.conf`:
    ```ini
    [search_info]
    infocsv_log_level=DEBUG
    ```

### How Splunk Searches for Field Values (1)

- **Example**:
  - `index=_internal group=tpool`
  - Assume a field value is present as indexed tokens.
  - Load events containing those indexed tokens anywhere:
    ```spl
    [ AND index::_internal tpool ]
    ```
  - Apply field extractions and filter again.
  - **Job Inspector**: `scanCount â‰ˆ eventCount`

### How Splunk Searches for Field Values (2)

- **Example**:
  - `index=_internal qsize=0`
  - `Splunk returns the same event, but takes ages!`
  - Default assumption works great if field values are unique-ish.

### Key-Value Tricks (1)

- **Example**:
  - `index=_internal qsize qsize=0`
  - Take advantage of default key-value field extractions.
  - **Flexible, zero-config speed-up that requires smart searchers!**

### Key-Value Tricks (2)

- **Configuration**:
  - `fields.conf`:
    ```ini
    [qsize]
    INDEXED_VALUE=[AND qsize ]
    ```
  - Adds the extra token `qsize`, whether the searcher likes it or not.
  - Applies to all fields of that name, regardless of `sourcetype`.
  - Can break for multi-token values!

### Key-Value Tricks (3)

- **Configuration**:
  - `fields.conf`:
    ```ini
    [qsize]
    INDEXED_VALUE=qsize=
    ```
  - Rule out events with `qsize!=0` that contain a `0` elsewhere.
  - Can break for events with `qsize="0"` (major breaker).
  - Be sure you know your data before fiddling with `fields.conf`!

### Wildcards (1)

- **Prefixes**:
  - `index=_internal component=BucketMove*`
  - `Splunk will only use indexed tokens for prefixes of wildcarded values`:
    ```spl
    [ AND index::_internal bucketmove* ]
    ```
  - `index=_internal component=*ucketMover`
  - `Oops!`:
    ```spl
    [ AND index::_internal ]
    ```

### Wildcards (2)

- **Force Indexed Tokens**:
  - `index=_internal component=TERM(*ucketMover)`
  - `Much faster than loading all events, but there's a penalty for crawling the index without a prefix!`
  - `fields.conf` to remove the `TERM()` from all searches:
    ```ini
    [component]
    INDEXED_VALUE=
    ```

### Fields Recap (Part 2)

- **Indexed Tokens**:
  - Are king.
- **Performance Hit**:
  - When indexed tokens can't be used.
- **Fields.conf Optimizations**:
  - Can fix performance but can break results.