0
10
20
30
40
50
Seconds
Figure 3: Initial propagation phases of a Code Red II-like 
worm in a 1,280,000-node network.  Interestingly,
exponential increase in infections is observed to start in as 
early as 35 seconds since initial infection.  Experiment
uses GTNetS at packet-level on a 128-CPU Linux cluster. 
Figure 5: Propagation of Slammer-like UDP worm
through 307,200 nodes of a complex network topology.
Entire simulation is performed at packet-level in PDNS
on a 128-CPU Linux cluster. 
Using  TCP-based worm  models mimicking  the
Code  Red II worm,  we  ran  experiments to  test  the
feasibility  of  large-scale  high-fidelity  worm modeling.
Using packet-level  models  of  a  UDP  worm  similar
to  the  SQL  Slammer,  we  have  simulated  the  worm
propagation  on  a  large-scale  network  containing over
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:04 UTC from IEEE Xplore.  Restrictions apply. 
300,000  end-hosts.    Results  from  a  sample  worm
propagation  experiment  on  the  300,000  node  network
are shown in
.  The network topology consists
of  several  “university  campus-like”  subnets connected
via a network of gateway routers.  Each campus subnet
consists of roughly 30 routers and 508 end-hosts.
Figure 5
This  experiment  represents  results  from  among  the
largest packet-level  worm  simulations  to date  that  we 
are  aware  of.    It  is  presented  to  illustrate the  scale  at 
which  all  packet-level  models  can  be  simulated  using
simulation
current  day’s  computation platforms  and simulation
tools.
It  captures  all  network  details,  such as  queuing
tools.
It  captures  all  network  details,  such as  queuing
and  congestion  at  routers,  etc.    The  worm  is  seen  to
and  congestion  at  routers,  etc.    The  worm  is  seen  to
follow  the  expected  well-behaved  trajectory  of  an
follow  the  expected  well-behaved  trajectory  of  an
epidemic model.    More  importantly,  the  additional
epidemic model.    More  importantly,  the  additional
power of packet-level model lies in its ability to easily 
power of packet-level model lies in its ability to easily 
accommodate  complex  variations 
the  worm
accommodate  complex  variations 
the  worm
behavior  (e.g.,  intelligent  hit  list  scanning),  and
behavior  (e.g.,  intelligent  hit  list  scanning),  and
dynamics  of  network  topologies,  background  traffic
dynamics  of  network  topologies,  background  traffic
intensities, etc. 
intensities, etc. 
to 
to 
4 Constructive Emulation 
4 Constructive Emulation 
Armed  with  the  ability  to  perform high-fidelity
Armed  with  the  ability  to  perform high-fidelity
simulation of worm models, we were ready to face our 
simulation of worm models, we were ready to face our 
next challenge.  In our projects related to modeling and
next challenge.  In our projects related to modeling and
simulation of military networks[20], we were tasked to
simulation of military networks[20], we were tasked to
explore exercising actual network security installations
explore exercising actual network security installations
against  simulated  scenarios  of 
large-scale  worm 
against  simulated  scenarios  of 
large-scale  worm 
attacks.  Testing the security systems against simulated
attacks.  Testing the security systems against simulated
attacks  provides  the benefits  of  flexible,  controllable
attacks  provides  the benefits  of  flexible,  controllable
and  repeatable  experiments,  in  contrast  to  using  live
and  repeatable  experiments,  in  contrast  to  using  live
testbeds.  The initial candidate installation to be tested 
testbeds.  The initial candidate installation to be tested 
was  that  of  a  honeypot  system.    While  at  first  it 
was  that  of  a  honeypot  system.    While  at  first  it 
appeared 
to be  a  straightforward  application of
to be  a  straightforward  application of
appeared 
traditional  network  emulation 
techniques,  closer
traditional  network  emulation 
techniques,  closer
analysis  revealed  that  such  a  scenario  represented a
analysis  revealed  that  such  a  scenario  represented a
higher-fidelity  experiment 
requires  a  new
higher-fidelity  experiment 
requires  a  new
emulation capability, as described next.
emulation capability, as described next.
4.1
4.1
Emulation Architectures
Emulation Architectures
that 
that 
Real
Virtual
Real
E.g. Honeypot
installation
Router/link models
in PDNS
End-hosts
(worms)
Figure 6: Traditional emulation architecture.
Figure 6: Traditional emulation architecture.
Real
Virtual
Virtual
E.g. Honeypot
 installation
Router/link models
 End-host models
 in PDNS
 (worms) in PDNS
Figure 7: Constructive emulation architecture.
Figure 7: Constructive emulation architecture.
A  drawback  of  existing  emulation  systems  is  that
A  drawback  of  existing  emulation  systems  is  that
they  require  end-hosts  to  be  realized  as real  end-host
they  require  end-hosts  to  be  realized  as real  end-host
systems.    The  traditional  emulation  architecture  is
systems.    The  traditional  emulation  architecture  is
shown in Figure 6.  For example, worm infections will
shown in Figure 6.  For example, worm infections will
need to originate and terminate in real hosts.  However,
need to originate and terminate in real hosts.  However,
this  makes  it  difficult  to  experiment  with  very  large
this  makes  it  difficult  to  experiment  with  very  large
number  of  vulnerable  end-hosts  in  worm  propagation
number  of  vulnerable  end-hosts  in  worm  propagation
experiments.
experiments.
A majority of existing emulation systems, including
A majority of existing emulation systems, including
the most scalable ones, such as Netbed[2] of University 
the most scalable ones, such as Netbed[2] of University 
of Utah and MAYA[21] of UCLA, allow the simulated
of Utah and MAYA[21] of UCLA, allow the simulated
portion  of  the  emulation  to  only  act  as  a  transport
portion  of  the  emulation  to  only  act  as  a  transport
plane, without  network  endpoints.   The LARIAT[3]
plane, without  network  endpoints.   The LARIAT[3]
system  of  MIT  supports  virtual  end-host applications,
system  of  MIT  supports  virtual  end-host applications,
but is limited by very low-fidelity network models.  In 
but is limited by very low-fidelity network models.  In 
our  worm emulation  scenarios 
(e.g.,  honeypot
our  worm emulation  scenarios 
(e.g.,  honeypot
emulation,  as  described  next), however,  we  need
emulation,  as  described  next), however,  we  need
simulated vulnerable/infected nodes to interact directly
simulated vulnerable/infected nodes to interact directly
as  endpoints  of  worm  infections with  actual  honeypot
as  endpoints  of  worm  infections with  actual  honeypot
installations.
  The  virtual portion of  the  emulation
installations.
  The  virtual portion of  the  emulation
system  is  thus  required  to  maintain  all  the  state 
system  is  thus  required  to  maintain  all  the  state 
associated  with  every  interaction  endpoint  that  can
associated  with  every  interaction  endpoint  that  can
interact  with  real  endpoint  system.    For  example,  full
interact  with  real  endpoint  system.    For  example,  full
TCP  state  machine  needs 
to  be  modeled  and 
TCP  state  machine  needs 
to  be  modeled  and 
maintained  at  each  simulated  end  point.    Traditional
maintained  at  each  simulated  end  point.    Traditional
emulation  systems  are  neither  equipped  to  maintain
emulation  systems  are  neither  equipped  to  maintain
such  state,  nor  possess the  necessary translation
such  state,  nor  possess the  necessary translation
mechanisms to  bridge  the  semantic/representational
mechanisms to  bridge  the  semantic/representational
gap between  modeled  endpoints  and  real  systems.    In
gap between  modeled  endpoints  and  real  systems.    In
traditional  emulation  systems,  this  would  require
traditional  emulation  systems,  this  would  require
thousands of real hosts to be configured and integrated
thousands of real hosts to be configured and integrated
into the emulation setup, to be able to experiment with
into the emulation setup, to be able to experiment with
large-scale worm propagation at high-fidelity.  Instead, 
large-scale worm propagation at high-fidelity.  Instead, 
it is desirable to have only a small subset of end-hosts
it is desirable to have only a small subset of end-hosts
realized  as  real  hosts,  while  the  rest  of  the  end-hosts
realized  as  real  hosts,  while  the  rest  of  the  end-hosts
are instantiated virtually inside simulation, as depicted
are instantiated virtually inside simulation, as depicted
in
. For example, it is sufficient to realize the 
in
. For example, it is sufficient to realize the 
honeypot  installation(s)  on real  hosts  (say,  configured
honeypot  installation(s)  on real  hosts  (say,  configured
and  run  on  Linux),  while  the  worms  themselves
and  run  on  Linux),  while  the  worms  themselves
originate  from  end-hosts  simulated  inside  the  network
originate  from  end-hosts  simulated  inside  the  network
simulator.   This  makes  it  possible  to  achieve  scalable
simulator.   This  makes  it  possible  to  achieve  scalable
execution  of  worm  propagation (inside  the  simulator),
execution  of  worm  propagation (inside  the  simulator),
while  still  retaining  the  ability  to  test  honeypot
while  still  retaining  the  ability  to  test  honeypot
installations against large-scale worm attacks.
installations against large-scale worm attacks.
Figure 7
Figure 7
Our
Our
constructive  emulation  approach 
constructive  emulation  approach 
solves
solves
precisely this problem, with its ability to interface real
precisely this problem, with its ability to interface real
operational  systems  directly  with  simulated  end-host
operational  systems  directly  with  simulated  end-host
applications.  The objective of this approach is a setup
applications.  The objective of this approach is a setup
which  essentially  bridges  simulated  network  and real
which  essentially  bridges  simulated  network  and real
network  in  a  “head-to-head” fashion.    This  setup  can
network  in  a  “head-to-head” fashion.    This  setup  can
then  be  used to  plug-in real  network applications into
then  be  used to  plug-in real  network applications into
simulated networks to measure effectiveness and other
simulated networks to measure effectiveness and other
metrics. 
the  capability  of  our
metrics. 
the  capability  of  our
emulation interface, we have integrated honeyd, which
emulation interface, we have integrated honeyd, which
is  a  popular  real  honeypot  implementation,  with  our
is  a  popular  real  honeypot  implementation,  with  our
worm  simulation  models. Honeyd[22, 23]  is  a  low-
worm  simulation  models. Honeyd[22, 23]  is  a  low-
interaction,  but highly scalable,  honeypot  framework.
interaction,  but highly scalable,  honeypot  framework.
  To  demonstrate 
  To  demonstrate 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:04 UTC from IEEE Xplore.  Restrictions apply. 
Other  equivalent  systems  are  also  well-documented  in
the network security literature (e.g., see [24]).
4.2
Example: Honeypot Emulation
Honeypots are introduced into the simulation using
the following scheme.  The entire network of interest is 
configured with end-hosts and routers, as usual, in the
simulator. However,  the  end-hosts where  honeypots
need  to  be  inserted  are  marked  as  “emulated  nodes”.
In  these  nodes,  special  “Emulated  TCP”  agents  are
used  instead of  the  usual simulation  models  of  TCP. 
The  emulated  TCP  agents  do  not  have  any  TCP  end-
point  behavior  by  themselves, but  simply  act  as
conduits to the TCP stacks inside the actual honeypots.
For  example,  when  a  SYN  packet  event  is received  at
an  emulated  node,  the  emulated  TCP  agent  performs
some  simple  conversions  to format  it  into  a  bonafide
network packet, and forwards it to the honeypot (via a
proxy server, as will be described later). The emulated
TCP  agent maintains minimal  state  required  for 
translating simulation events into network packets and
vice  versa  (e.g.,  translating  sequence numbers).    Each
virtual 
is
represented  and  associated  with  a  corresponding
emulated node in the simulator.
IP  address  hosted  by 
the  honeypot 
to  emulation). 
Since  our  network  is  simulated  in  parallel,  the
network is partitioned across multiple processors. We
need  to  distinguish  among the  processors  based  on
whether  they hold  any  emulated  nodes  or  not.    If  a
processor does  not  house  any  emulated  nodes,  it
simulates  in  an  as-fast-as-possible  (AFAP)  mode  (i.e., 
oblivious 
that  house
emulated  nodes  need  to perform  special  initialization,
to set up conduits to the honeypot installation.  This is 
done via  socket-based  communication between  the
emulator processor and proxy server.  Additionally, the
simulation loop is modified to accept incoming packets