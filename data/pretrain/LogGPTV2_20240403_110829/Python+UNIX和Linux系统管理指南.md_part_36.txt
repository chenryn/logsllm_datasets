query = ChangeModel.all().order('-date')
#collection
path = os.path.join(os.path.dirname(_file_), 'index.html')
template_values={
else:
url_linktext': url_linktext,
url':url,
 collection.append(decimal.Decimal(change.input)/100)
url = users.create_login_url(self.request.uri)
url_linktext=
url
_(self):
：collection,
'Logout'
ssuuad, it siaxotu, s ‘saurp. sot ‘srarenb
www.TopSage.com
操作系统什锦丨251
---
## Page 266
252
的颜色以及层次都是Django模板与CSS合成的结果。Django模板可以在主目录中找到,
话框，在左侧是一个表格让你输入变化，在右侧有一个导航对话框。这些或漂亮或难看
你本地的开发版本开始。这是一个南瓜色（punpkin-colored）的主题，有两个浮动的对
作为一个相反的示例，让我们从查看运行在http://greedycoin.appspot.com/的版本，或者
def main():
class Change(webapp.RequestHandler):
if
wsgiref.handlers.CGIHandler().run(application)
application = webapp.WSGIApplication([('/', MainPage),
def post(self):
except decimal.Invalidoperation:
model = ChangeModel()
template_values ={
while rem > 0:
if num:
#select the latest input from the datastore
第8章
try:
#render template
'collection': collection,
num,
for
..ureu, ==
_collection[self.coin_lookup[coin]] = num
n, rem = divmod(change_input, coin)
change_input = decimal.Decimal(self.request.get('content'))
coin = self.coins.pop()
change_input = c.input
self.redirect('/result')
model.input =int(change_input*100)
num,rem = divmod(rem, coin)
cin change:
model.put()
collection[self.coin_lookup[coin]]= num
www.TopSage.com
debug=True)
'/result'
/submit_fqzm',Change),
, template_values))
'result.html')
'submit_error.html')
PDG
---
## Page 267
有一个继承自webapp.ReguestHandler的类，如果定义了一个get方法，可以创建一个页
现的。以下是具体的代码：
效果。或许你已经注意到了在右侧导航框的Login连接，通过用户认证API，它是可以实
现在我们已经介绍了GoogleApp Engine，接下来让我们实际上感受Google App Engine的
API允许你保存持久数据，并且在整个应用过程中都可以获取。为了实现这一目标，需
甚至不需要理解事情是怎样处理的，你可以仅使用现存的条件语句来完成一些事情。
在这一点上，我们建议不要太专注于这些代码，尽量添加仅为认证用户显示的代码。你
面认证非常简单，且强大得令人难以置信。如果你查看了之前的代码，这可以简单地等
系统，之后获得Django模板文件index.html。平衡Google User Accounts数据库以创建页
面，检查某个用户是否登录。如果你注意到底部的一些行，会看到用户信息被送入模板
djangoproject.com/documentation/templates/。.
此我们在这里仅告诉你若想查看更多内容，可以查阅Django模板参考资源：http://www.
也可以在我们使用的CSS在风格页中找到。这确实与Google App Engine关系不多，因
要加载数据存储（就像之前代码中所显示的那样），然后定义模块，如下所示：
现在我们对认证只有一个含糊不清的理解，让我们进一步介绍它强大的功能。数据存储
同于：
class MainPage(webapp.RequestHandler):
class ChangeModel(db.Model):
if users.get_current_user():
user = users.get_current_user()
user =db.UserProperty()
path = os.path.join(os.path.dirname(_file_), *index.html')
template_values = {
if users.get_current_user():
user = users.get_current_user()
url_linktext': url_linktext,
else:
url': url,
url_linktext =
url = users.create_login_url(self.request.uri)
url
users.create_logout_url(self.request.uri)
'Login
www.TopSage.com
操作系统什锦丨253
---
## Page 268
到这里，Google App Engine的反向教程就已经结束了。它给予一些启发，告诉你如何
称，这会给你对事情如何处理有所了解。
类进行猜测。在这一点上，我们建议通过部分修改依赖于URL的应用，来调整URL的名
最后，如果我们仔细查看下面的代码，或许能够对change.py文件中每一个URL对应的
个简单而有意义的事情是对这一代码进行测试验，努力取回更多的记录，或是以不同的
这一示例从数据存储中将结果取出，然后在一次查询中取回10个记录。在这一点上，一
两行最为重要的代码为：
PythonAPI，以获取数据库的最近十次变化，然后进行显示：
使用这一简单的类，可以创建并使用持久数据。以下是一个类，其中对数据存储使用了
254
方式进行存储。这会给你一些即时而有趣的反馈结果。
def main():
query = ChangeModel.all().order('-date')
 application = webapp.WSGIApplication([('/', MainPage),
第8章
wsgiref.handlers.CGIHandler().run(application)
def get(self):
input = db.IntegerProperty()
debug=True)
('/recent'
('/submit_form'
#formats decimal correctly
records = query.fetch(limit=10)
query= ChangeModel.all().order('-date')
#grab last 10 records from datastore
#collection
records':records,
collection.append(decimal.Decimal(change.input)/100)
Recent)],
Change),
www.TopSage.com
'query.html')
PDG
---
## Page 269
以下是运行该命令的部分结果：
以下是administrator连接到服务器，IP地址是192.168.1.3并进行事件查询的示例：
备输出。使用这一工具的语法类似这样：
参数，根据给定的密钥连接到合适的服务器，向服务器发送请求，将结果从标准输出设
是一个简单的命令行工具，可以将用户名、密码、服务器地址以及WMI请求作为命令行
介绍一个Linux系统中用于WMI与Windows服务器进行通信的非Python工具wmic。wmic
是，这里将要介绍的示例应该能够为你在其上进行开发奠定一个好的基础。首先，我们
目前，Zenoss的文档在介绍如何在Linux上使用Python的WMI功能方面略显不足。但
注意：对WMI的语法及特点的讨论超出了这本书的范围。
部分（至少对于这本书的读者）就是你可以将WMI与Python的连接脚本化。
（现在可能是CIFS）服务器上，然后将其发送到Windows服务器。可能其中最有意义的
十分愉悦。通过与一些擅长Zenoss的人的讨论，他们将WMI信息上传到Linux上的Samba
与Windows服务器通过WMI进行会话的工具。当想到它的现实意义与可行性，我们不禁
7章介绍了Zenoss，SNMP。除了业界领先的SNMP工具之外，Zenoss也提供了从Linux上
人不太愉快。Zenoss是一个可以让人大吃一惊的工具，它完全可以帮助我们。我们在第
如果你不幸有一个或多个Windows服务器的管理任务，
使用Zenoss从Linux上管理Windows服务器
com/plrietveld/source/browse.
兴趣，你可以查看一下Guido为Google App Engine应用编写的源码：http://code.google.
根据自己的需要来实现一个更好的系统管理工具。如果你还对编写更多的应用抱有浓厚
wmic -U username%password //SERVER_IP_ADDRESS_OR_HOSTNAME “some WMI query"
2,Uniprocessor Free)ISystem|Microsoft (R) Windows (R) 5.02. 379o Service Pack 2
[2|EventLog|20080320034341.000000+000|20080320034341.000000+000|Information|(nu11)
Category|CategoryString|ComputerName |Data/EventCode/EventIdentifier|
CLASS: Win32_NTLogEvent
TimeGenerated|TimeWritten|Type|User
EventType|InsertionStrings|Logfile|Message|RecordNumber SourceNamel
www.TopSage.com
，任务可能会变得复杂，会有点令
操作系统什锦丨255
X
PDG
---
## Page 270
256丨第8章
以下是运行该脚本的输出结果：
常简单了。
'SELECT*FROM Win32_NTLogEvent'。之后选代查询结果并输出时间戳和日志。这是非
Administrator身份，使用密码foo，连接到服务器192.168.1.3。然后，执行WMI查询
不同于wmic示例中输出所有的字段，这个脚本仅输出时间戳和日志信息。该脚本以
一旦我们可以使用Python中需要的库，我们可以像下面这样执行脚本：
录到已经存在的PYTHONPATH中，就像下面这样：
中。其中的最重要的部分是添加wmiclient.Py模块的目录到PYTHONPATH中。我们添加目
VMware应用程序。在这个应用程序中，一些Zenoss代码保存在zenoss用户的主目录
为了写一个类似的Python脚本，首先建立环境。在接下来的示例中，使用Zenoss v2.1.3
Free.
l.timewritten::20080320034341.000000+000
l.message:: While validating that \Device\Serial1 was really a serial port, a
1.timewritten:: 20080320034359.000000+000
#!/usr/bin/env python
l.message::Microsoft (R) Windows (R) 5.02.3790 Service Pack 2 Uniprocessor
1.timewritten::20080320034341.000000+000
key: HKLM\Software\Microsoft\Ole\EventLog.
1.timewritten::20080320034359.000000+000
if
from wmiclient import WMI
exportPYTHONPATH=~/Products/ZenWin:$PYTHONPATH
l.timewritten::20080320034341.000000+000
Uniprocessor Free.
_name_
b
w.connect()
print
"l.timewritten::",
'192.168.1.3', 'Administrator', passwd='foo')
1.timewritten
www.TopSage.com
PDG
---
## Page 271
易在工具箱中找到合适的位置。
行WMI查询是非常有用的。如果你不得不与Windows多次打交道，那么Zenoss可以很容
掌握的技术提出了要求。这个来自Zenoss的工具使得任务轻松了许多。能够从Linux中运
虽然我们对Windows不是特别感兴趣，但是我们意识到有时需要完成的任务对我们需要
列表中。
我们选择从第一个WMI脚本取得的两个属性'message'和'timewritten'都在这个关键字
记录应该有一整套属性，这些属性与这些keys相对应。以下是我们刚刚介绍过的脚本的
在第一个结果输出后，脚本停止执行。我们在其上调用keys()的set对象实质上是-个
间存在两个差异：不是输出时间戳和日志信息，而是输出l.Properties_·set.keys()；
你或许注意到这个脚本看起来与其他WMI脚本十分相似。在这个脚本与其他WMI脚本之
的专业技术就可以找到这些信息。以下执行的脚本可以帮助我们找到所需的属性；
但是，我们如何知道可以为这些记录使用timewritten和message属性？只需要一点黑客
运行结果：
字典。
from wmiclient importWMI
#!/usr/bin/envpython
'eventidentifier',
，（这非常有意义，因为keys()是一个字典方法）。从WMI查询返回的每一个结果
w.connect()
break
print
"result set fields:->", l.Properties_.set.keys()
'sourcename',
'timewritten'
main
"192.168.1.3', 'Administrator', passwd-'foo')
'insertionstrings',
www.TopSage.com
'recordnumber'
'computername',
'categorystring',
'eventcode'
操作系统什锦丨257
'message'
PDG
---
## Page 272
统管理员通常会是包管理责无旁贷的负责人。如果你掌握了对Python和其他操作系统包
包管理不仅对软件开发者有好处，对于系统管理员也是非常重要的。事实上，一名系
NetBSD、OpenBSD、RedHat、Slackware、Solaris和Tru64Unix产生本地平台的软件包。
EPM的源码工具，可以为AIX、Debian/Ubuntu、FreeBSD、HP-UX、IRIX、MacOSX、
另一个部署情况包括创建操作系统特定的软件包，部署软件包到终端用户主机。有时
Python以与操作系统无关的方式来部署Python代码（注意，我们这里只是说大部分情况
操作系统级的包管理系统。我们会在这一章对包管理作进一步讨论，但主要焦点是在对
果操作系统或一门语言没有一个功能完善且简单健壮的包管理系统，那么它在一定程度
务中的物流公司，就像Amazon一样，如果没有物流公司，Amazon不会存在。同样，如
软件包管理在决定软件开发项目是否成功中起着重要作用。包管理可以被理解为电子商
引言
包管理
会出现两个完全不同的问题，尽管有一定程度的重叠性。我们将介绍一个开源的名为
如此）。
与开发平台、开发库相关，并且需要处理开发环境参数。但是实际上，他们经常使用
这些项目包括setuptools、Buildout和virtualenv。Buildout、setuptools和virtualenv通常
统访问。最近在一些项目中，进一步改进和增强了打包、管理和部署Python代码的灵活
Python代码和Python环境进行打包及管理。Python能够使Python代码可以普遍被整个系
第9章
258
pycon2008_tutorial.
有一个非常有价值的参考，可以在以下地址找到：http://wiki.python.org/moin/buildout/
管理的最新技术，你的身价会无限增加。本章会在这方面帮助你。这一章中涉及主题
性和实用性。
提到“包管理”，
上是不完整的。
，你的第一感觉或许是.rpm文件和yum，或是.deb文件和apt，或是其他
www.TopSage.com
---
## Page 273
二进制文件相同的目录中。让我们看一下这一操作是多么容易。参见例9-1。
ea_setup·py获取setuptools的最新版本，并且自动安装easy_install。它将
工具easy_install可以通过运行（使用希望easy_install协同工作的Python版本）一个
类似的工作，但是easy_install是专门为Python包服务的。
为该命令行工具的名称，可以用来实现与Red Hat系统中yum和Debian系统中的apt-get相
rpm、yum、apt-get、fink或是类似的包管理工具。短语“Easy Install”（简易安装）即
理解和使用基本的easy_install非常容易。阅读本书的大多数人可能非常喜欢使用
使用easy_install
setuptools、 easy_install和Python egg。
速开始的指南，之后还会涉及手册中的内容，作为用户或是开发者，你应该能够掌握
很难掌握，正是因为它能直接对一些复杂事务进行处理。这一节的介绍仅作为一个快
那些能够完成极其复杂事务的工具，通常是很难彻底理解的。setuptools的部分内容
setuptools和http://peak.telecommunity.com/DevCenter/EasyInstall
获得它们的全部相关文档，你可以另行访问：http:/lpeak.telecommunity.com/DevCenter/
在这一章中，将会概述我们认为是setuptools和easy_install最有意义的内容。如果希望
easy_instal1和eggs，并且澄清每一个容易混淆的问题。
工具，并且以命令行工具的方式进行交互。在这一节中，我们介绍并解析setptools、
创建，安装和管理Python包”。
文件。它们通常以zip格式发布，能以zip格式进行安装或是使用unzip对包的内容进行浏
直到setuptools的出现，distutils一直是创建和安装Python包的主要方式。setuptools是-
数平台，但64位平台需要Python2.4的最小化版本），允许你非常容易地建立和发布包,