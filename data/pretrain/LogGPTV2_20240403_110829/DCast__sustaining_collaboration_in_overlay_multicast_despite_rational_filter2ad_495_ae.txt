explained in Section 4.4, message losses will not disrupt the incen-
tives in DCast as long as the loss probability is not excessive. If
B and B’s predecessor C are both non-deviators, then B’s timer’s
duration will be at least 2d longer than C’s. Thus if C receives
the Denial in time, B is guaranteed to receive the Denial in time
as well, if the message is not lost. The following simple lemma,
whose proof is trivial and thus omitted, formalizes the properties of
this design when no messages are lost:
LEMMA 1. Consider any consecutive sequence of non-deviators
A1A2...Ak that a doin traverses. With our above design, if A1 re-
ceives (or generates, when A1 is the doin issuer) a Denial before
its local timer expires, then the Denial will reach every peer Ai
(1 ≤ i ≤ k) before Ai’s timer expires.
With deviators on the propagation chain, the chain will be di-
vided into multiple consecutive sequences of non-deviators. Rea-
soning about each such sequence individually (as in Lemma 1) will
be sufﬁcient for our formal proof later.
Simultaneous exchange. The full DCast protocol further has the
following optional but useful optimization. Imagine two peers A
and B, each with a multicast block needed by the other party. These
two blocks can be propagated using two doins, which will occupy a
debt-link from A to B and a debt-link from B to A. As an optimiza-
tion, DCast permits A and B to exchange these two blocks without
eventually occupying any debt-links, if they both would like to do
so. Speciﬁcally, when B pulls from A, A will propagate the block
together with a doin as usual. If A is interested in performing si-
multaneous exchange, A sets a ﬂag in the message and indicates
which multicast block that A wants (based on B’s summary). The
ﬂag tells B that if B returns the requested block by the next round,
A will consider the doin as never having been propagated to B, and
will free the debt-link from A to B immediately. If B does not re-
turn that block, this interaction will just be considered as a normal
pull, and B will hold the doin.
Dealing with clock errors. Finally, our discussion in Section 5
so far has been assuming zero clock error. Non-zero clock errors
will introduce two issues. First, when a peer A propagates a doin
(issued during interval i) to another peer B, A may consider the
current time to be in interval i, while B’s current time is in interval
i + 1 or i − 1. This problem is trivial to address — A will simply
avoid propagating doins issued during interval i (and start issuing
doins for interval i + 1) when it is rather close to the end of interval
i. A peer should accept doins whose issuing interval is either the
current interval or some future interval. A second and similar issue
arises for subintervals: When A relays a doin with an r-stamp of
x in the (x + 1)th subinterval (according to A’s local clock) to B,
B may believe that the current time is still in the xth subinterval.
This is easily addressed by having A avoid relaying doins with an r-
stamp of x during the ﬁrst few seconds of subinterval x+1. Finally,
clock errors will not affect our timeout design for waiting for a
potential Denial, since there we rely on timer duration instead of
clock readings.
6. FORMALLY ACHIEVING SAFETY-NET
GUARANTEE
This section presents the main theorem on DCast’s safety-net
guarantee. The formalization is non-trivial, and we start from the
notion of a reference execution.
Reference execution. We want to avoid deﬁning any speciﬁc util-
ity functions, since it is hard to predict the exact form of the peers’
utility functions. Without a concrete utility function, however, we
will not be able to assign a numerical value to the safety-net util-
ity. Rather, we will use a reference execution as the reference point,
where all peers follow a certain simple multicast protocol. Because
there are no deviating peers in this reference execution, the utility
achieved by each peer here is easy to understand, and one can read-
ily plug in various utility functions to obtain instantiated utility val-
ues. We will then show that DCast’s safety-net utility for a speciﬁc
peer is the same as that peer’s utility in the reference execution.
For our formal arguments next, we will assume a static setting
where no peers join or leave on the ﬂy. Our reference execution is
the execution of a simple multicast protocol using pull-based gos-
siping. There are m users in the system, and user i has xi ≥ 1
identities (peers). The multicast proceeds in rounds, where in each
round the root sends erasure-coded multicast blocks to some set of
peers chosen arbitrarily. Also in each round, a peer selects a uni-
formly random peer out of the Pm
i=1 xi peers from whom to pull
multicast blocks. All messages are reliable. Because all peers are
cooperative, there are no concepts such as debt-links or doins. The
575execution has a single parameter Ψ: For each multicast bit received,
a peer sends Ψ cost bits to some special virtual sink peer.
The main theorem. Now we can present our main theorem. For
clarity, here we will simplify away the issues discussed in Sec-
tion 4.4, since Section 4.4 already explained how they can be prop-
erly taken into account. Speciﬁcally, for our main theorem, we will
assume inﬁnite number of rounds, no message losses, no peer fail-
ures, no control message overhead, and no malicious peers. With
inﬁnite number of rounds, we further assume that if the two peers
incidental to a debt-link are willing to use the debt-link whenever
opportunities arise, then that debt-link will be reused inﬁnite num-
ber of times during the multicast session. This assumption is mainly
for simplicity and is not necessary for the theorem to hold (see Sec-
tion 7 for more discussion).
THEOREM 2. Assume that:
• When pulling multicast blocks from another peer, a non-
deviator establishes enough new debt-links, if needed, to pull
all the blocks that it needs from that peer.
• During doin payment,
the payer always eventually ﬁnds
enough blocks that the payee does not have, so that the pay-
ment can be completed.
• At any point of time, a deviator gets at least those multicast
blocks that it would get if it did not deviate.
If we set the parameters in DCast such that:
max(1, σ)  2 is needed in practical scenarios, and thus
those settings mainly serve as stress tests. In each round, the root
sends 100 erasure-coded multicast blocks to 100 randomly chosen
peers.7 Any 50 out of these 100 blocks are sufﬁcient to decode the
video frames. The deadline of the multicast blocks is 20 rounds
after they are sent from the root.
In the next, we ﬁrst elaborate our large-scale simulation results,
and then present the validation results of the simulator using our
prototype. The end-to-end metric for video streaming is usually
delivery_rate, which is the fraction of rounds that an average peer
receives the corresponding multicast blocks by the deadline and
thus can render the video frames for those rounds. In all our sim-
ulation experiments (even with colluding deviators), we observe a
delivery rate for the non-deviators of at least 99.95% and thus we
will not discuss delivery_rate further. The following presents re-
sults that help us to gain further insights into the social cost and the
safety-net guarantee of DCast.
No deviators: Social cost. We ﬁrst investigate the social cost
(i.e., where junk blocks are involved) of DCast when no peer de-
viates. This social cost has two components: debt-link establish-
ment costs and the cost incurred by sending junk blocks to the root.
The ﬁrst component by far dominates the second one. Figure 3
plots the average number of debt-links established by each peer, de-
noted as links_established. The ﬁgure shows that for the ﬁrst few
rounds, there is a sharp jump since all peers are establishing new
7We intentionally keep the load on the root light. This not only
reserves enough bandwidth for the root to receive junk blocks, but
also stress tests our design. Under the given streaming rate, the total
load on our root (including the load incurred by the junk blocks) is
less than half of the load in similar prior experiments with gossip-
based multicast [14].
576 1200
 1000
 800
 600
 400
 200
d
e
h
s
i
l
b
a
t
s
e
s
k
n
i
l
f
o
#
g
v
a
D
D
D
pay=2
pay=3
pay=4
0
300 600 900 120015001800
# of rounds
D
D
D
pay=2
pay=3
pay=4
d
e
s
u
s
e
m
i
t
f
o
#
g
v
a
 25
 20
 15
 10
 5
 0