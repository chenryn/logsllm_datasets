of tickets in the system is η · µ · ρ in expectation.
Since the spending and exchange intervals overlap, the
bank will exchange and produce signatures for η·µ·ρ
tickets
every spending interval. If we assume a spending interval is
24 hours following our interval strategy from above, η = 432,
µ = 100,000, and ρ = 20, then the bank must sustain band-
width loads of 20 Mbps and perform 5,000 signatures per
second, within reason of a multi-core CPU with a crypto-
graphic accelerator.
4.2 Security Analysis
2
To measure the impact of BRAIDS on sender anonymity,
we analyze information leakage in terms of an anonymity
probability distribution [13, 44]. This analysis technique uses
information-theoretic entropy [45] as a measure of informa-
tion contained in a probability distribution. We deﬁne a
discrete random variable I as a circuit initiator and com-
324pute a distribution of all potential initiators as a probability
mass function P r(I = i) = pi where pi is the probability
that a user i is the circuit initiator given the observations
on the system. The entropy H of our distribution is:
entropy = H(I) = − NX
pi log2(pi)
i=1
where pi is the probability for user i taken from the distri-
bution and N is the size of the anonymity set (the set of
potential circuit initiators). The maximum entropy in the
system HM is computed as HM = log2(N ). The degree of
anonymity [13] quantiﬁes information leakage and can then
be deﬁned as the fraction of total entropy obtained from the
given distribution I:
degree of anonymity =
H(I)
HM
Distinguishability To determine the eﬀects of distinguish-
ing clients from relays, we ﬁrst assume that clients will ﬁll
one of two roles: a liberal client who spends tickets immedi-
ately by downloading web pages, and a conservative client
who stores tickets until they can download a large ﬁle. Our
liberal-conservative client model captures potential BRAIDS
spending habits – in practice some clients will consistently
spend most of their tickets while others will consistently un-
derspend. We further assume that each relay in the system
always has the desired number of tickets for any circuit it
initiates to simplify analysis. We note that this is a coarse
model as it is diﬃcult to estimate users’ spending habits.
While the tax rate ρ allows the bank to remove tickets
from the system to keep ticket exchanges within manageable
bandwidth bounds, it also potentially reduces anonymity for
large downloads. If a user spends more tickets than is possi-
ble to collect only from free distribution (η· ρ), an adversary
can determine with high conﬁdence that the circuit initiated
from a relay by observing θ > η · ρ tickets spent in a cir-
cuit. An adversary may additionally determine which relays
can aﬀord a given circuit by performing bandwidth mea-
surements, since a relay’s ticket income corresponds with
the bandwidth it provides. However, in Section 4.1 we have
suggested distributing enough free tickets to pay for general
web browsing so that the majority of users will not spend
over η · ρ tickets.
Discussion To analyze our system, we obtain the growth
rate of Tor relays from [50]. We estimate the client growth
rate by analyzing how the number of client connections to a
relay changes over a two month experiment [55]. We apply
these rates and the estimated network size of 100,000 clients
and 1,500 relays to ﬁnd the total network size over time.
From Section 4.1, each ticket is worth 128 KB of data trans-
fer and we distribute η = 432 tickets per day. Tickets are
taxed such that the system’s ticket capacity is ρ = 20 cumu-
lative days of tickets. The fraction of conservative clients is
1
10 , except where noted.
Figure 1 shows how the circuit throughput and fraction
of conservative clients may aﬀect the set of potential initia-
tors (if an adversary can guess this fraction) and therefore
the degree of anonymity BRAIDS provides. By observing
θ  η · ρ tickets means the circuit must
have been initiated from a relay. For other observations, the
degree of anonymity depends on the number of clients the
adversary can eliminate from the potential initiator set.
(a)
(b)
Figure 1: Anonymity is highest when the adversary ob-
serves fewer than θ = η tickets per circuit and lowest
when more than θ = η · ρ are observed. (a) In the shaded
area, only 1
10 of clients are conservative, collecting tick-
ets longer than one spending interval. (b) Anonymity
increases with conservative clients that contribute to ad-
versarial uncertainty.
The shaded area in Figure 1(a) represents anonymity when
1
10 of clients are conservative. This fraction is an estimate: it
is diﬃcult to determine how users will spend in practice. We
explore the eﬀects of varying the conservative client fraction
in Figure 1(b). Since conservative clients represent adversar-
ial uncertainty, we ﬁnd that having more conservative clients
has a positive eﬀect on anonymity. In all cases, anonymity
is higher in BRAIDS than the gold star scheme where only
the fastest 7
8 of relays are potential prioritized-traﬃc initia-
tors. For highest anonymity, clients should spend less than
η tickets for prioritized traﬃc in each spending interval.
5. SIMULATION AND RESULTS
We simulate BRAIDS and Tor to compare performance
and illustrate how eﬀective our system is at encouraging
users to run relays. Below we describe our simulator, exper-
iments, and results.
5.1 Simulator
We built a discrete-event-based simulator that models the
Tor network. Within the ﬁrst ten minutes of an experiment,
all Tor clients start one of the applications described below
and begin generating data. Each client builds circuits fol-
lowing Tor’s path selection protocol [52], and refreshes each
circuit after ten minutes, building a new one when the next
request is made. We now describe our client applications.
Web Clients Each web client (WC) generates traﬃc by
making a top-level page request and waiting for a response
from the server. After receiving a response, the WC makes
several additional parallel requests for objects embedded in
the page (e.g.
images). After receiving all embedded ob-
ject responses, the WC waits for a period of time before
downloading another page. We record the time required to
download the entire page, including all embedded objects.
The period between the initiation of the top level request un-
til the reception of the ﬁnal embedded object simulates the
time required to render an entire page in a user’s browser.
Distributions for all request and response sizes, the number
of embedded objects per page, and the time between page
requests are taken from the web traﬃc study conducted by
Hernandez-Campos et al.
File Sharing Clients Each ﬁle sharing client (FSC) simu-
lates a BitTorrent-like protocol by continuously generating
data to ﬁve random peers through the Tor network. Every
thirty seconds the FSC will replace its slowest connection
with a new peer and a new circuit, simulating BitTorrent’s
[27].
325(a)
(b)
Figure 2: BRAIDS and Tor simulated performance with a varying percentage of File Sharing Clients converting to File
Sharing Relays. Webpage download time for (a) paid, low-latency service, and (b) unpaid, normal service. Bandwidth
utilization for (c) ﬁle-sharing relays, and (d) ﬁle-sharing clients.
(c)
(d)
“optimistic unchoke” algorithm [6]. Each FSC exchanges
blocks by sending a 32 KB request for a 32 KB reply and
immediately sending another request upon receiving a reply.
We measure the time to exchange each block.
File Sharing Relays A ﬁle sharing relay (FSR) implements
the same algorithm as a FSC with the following deviation:
FSRs contribute a fraction of their total upstream band-
width to Tor while using the remaining bandwidth for their
own ﬁle transfers. The bandwidth contributed by FSRs sup-
plies them with additional income not received by FSCs.
We simulate every cell generated by each client and sent
through the Tor network. Tor nodes schedule outgoing cells
using an exponential weighted moving average (EWMA)
scheduler [47], while BRAIDS nodes use the HPD scheduler
(see Section 3.4). To bootstrap the economy, tickets are dis-
tributed to clients and relays at the start of each simulation.
5.2 Experimental Parameters
Our simulated network consists of 19,400 web clients, 300
Tor relays, 2,000 servers, and 600 ﬁle sharing nodes. Our
web and ﬁle sharing nodes are given consumer-class con-
nections of 12 Mbps downstream 1.3 Mbps upstream band-
width, and 24 Mbps downstream 3.5 Mbps upstream band-
width, respectively.3 File sharing relays draw contributed
bandwidth amounts from the Tor network consensus [49]
repeatedly until obtaining a value below their upstream ca-
pacity.4 Altruistic relays are given symmetric upstream and
downstream capacities drawn from the bandwidth distribu-
tion reported in the consensus, clipped at 20 MB following
standard Tor procedure [52]. Servers are given unlimited
bandwidth and we impose no processing delay on any node.
Network latency between every hop is set to 100 ms, and we
do not account for membership churn or congestion control
in our simulator since it will have a similar eﬀect on both
Tor and BRAIDS performance. We simulate 60 minutes.
We run BRAIDS and Tor experiments with the above
parameters. We run multiple BRAIDS experiments using
1 : 64 : 4096 as the HPD scheduler’s delay parameters cor-
responding to the service class ratio low-latency : high-
throughput : normal, and HPD fraction f = 0.875 (see
Section 3.4). Since we are interested in the incentives our
system provides for running a relay, we vary only the fraction
of 600 nodes that are FSCs as opposed to FSRs. This will
allow us to determine how a user’s performance changes by
serving as a relay. The load on the network is unchanged be-
3ADSL Standard ITU G.992.1 Annex A, ADSL2+ ITU
G.992.5 Annex M.
4The consensus document was obtained on January 12, 2010
between 18-19:00:00 CST.
tween all experiments. Our simulator closely approximates
empirical Tor traﬃc loads gathered by McCoy et al.
5.3 Results
[32].
In BRAIDS, the low-latency service class achieves a sig-
niﬁcant reduction in download time compared with Tor, and
download times improve as more FSCs convert to FSRs (Fig-
ure 2(a)). Since web browsers transfer small amounts of data
in most cases, improvements in download times are noticed
even with few new relays. The similarity in download time
when 50% and 80% of FSCs change to relays suggests that
these nodes have reached a lower bound. We note that the
best possible download time is 1.6 seconds, since all web
clients must make at least one top-level and one embed-
ded object request, resulting in sixteen 100 ms hops. The
normal service class webpage download time is longer than
in Tor, and performance slightly declines as more ﬁle shar-
ing users move to the high-throughput class since normal
data is proportionally delayed sixty-four times as long as
high-throughput data (Figure 2(b)). Unpaid traﬃc perfor-
mance is best when 80% of the FSCs convert to relays since
clients can take advantage of a signiﬁcant increase in avail-
able bandwidth. These results are outstanding – download
time for normal web traﬃc does not unusably degrade from
performance achieved in Tor, and running a relay will pro-
vide a deﬁnite performance boost over those who choose to
remain client-only.
BRAIDS FSRs not only receive an improvement in band-
width utilization over Tor, but can also achieve up to approx-
imately 90% better utilization of their bandwidth compared
with BRAIDS FSCs that do not run a relay, even while con-
tributing a fraction of their bandwidth to Tor. Figure 2(c)
shows that FSRs performance increases as more nodes con-
vert to relays. However, since the newly available bandwidth
is also consumed by WCs, relays realize only incremental
improvements as the fraction of converting relays increases.
Figure 2(d) shows that as more ﬁlesharers convert to relays,
performance for FSCs degrades. This happens mostly be-
cause a large amount of data from FSRs is receiving priority
over data from FSCs, and the newly available bandwidth is
being consumed by the low-latency and high-priority service
classes. For all conversion rates, FSRs achieve considerably
better performance than FSCs.
Overall, our results strongly indicate that BRAIDS users
can increase the performance of both interactive and non-
interactive traﬃc by starting a relay and contributing band-
width to Tor. Therefore, if users want to run BitTorrent
or similar ﬁle sharing protocols using BRAIDS, they should
run a relay to achieve maximum performance. This, in turn,
will have a positive impact on the entire network since there
will be more bandwidth available for other Tor clients.
3266. RELATED WORK
Tor Incentives Research from the community has provided
few ideas to produce incentives to run Tor relays [3, 10, 38]
in order to utilize recent scalability [34] and performance im-
provements for Tor [40, 46, 56]. Ngan et al.
[38] previously
proposed a system in which Tor directory servers actively
measure the performance of relays and note the “best” relays
in the directory with a “gold star”. This scheme introduces
security vulnerabilities: the anonymity set of relays is signif-
icantly reduced since gold star relays can be distinguished
from regular relays and the changing membership of the gold
star set leads to an intersection attack [20, 28, 33, 35].
PAR [3] is another scheme exploring incentive mechanisms
for relays. In PAR, a centralized bank issues coins to clients
while handling deposits from relays. Relays frequently de-
posit and verify coins at the bank to limit client double-
spending. The need for the bank to frequently verify coins
introduces a fundamental design problem – a trade-oﬀ be-
tween double spending detection and anonymity: the bank
may use coins to launch an intersection attack.
Incentives in Other Networks Incentives have been pre-
viously proposed for several anonymous and peer-to-peer
systems. Both Anonymizer.com [4] and the Freedom net-
work [7] introduced commercial anonymity systems based