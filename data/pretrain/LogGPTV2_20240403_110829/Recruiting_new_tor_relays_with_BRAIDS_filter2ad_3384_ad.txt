### Ticket System and Bandwidth Load

The expected number of tickets in the system is given by \( \eta \cdot \mu \cdot \rho \). Since the spending and exchange intervals overlap, the bank will exchange and produce signatures for \( \eta \cdot \mu \cdot \rho \) tickets every spending interval. Assuming a spending interval of 24 hours, with \( \eta = 432 \), \( \mu = 100,000 \), and \( \rho = 20 \), the bank must sustain bandwidth loads of 20 Mbps and perform 5,000 signatures per second. This is within the capabilities of a multi-core CPU with a cryptographic accelerator.

### Security Analysis

To measure the impact of BRAIDS on sender anonymity, we analyze information leakage using an anonymity probability distribution [13, 44]. This technique uses information-theoretic entropy [45] to quantify the information contained in a probability distribution. We define a discrete random variable \( I \) as the circuit initiator and compute the distribution of all potential initiators as a probability mass function \( P(I = i) = p_i \), where \( p_i \) is the probability that user \( i \) is the circuit initiator given the observations on the system. The entropy \( H \) of our distribution is:

\[
H(I) = - \sum_{i=1}^{N} p_i \log_2(p_i)
\]

where \( p_i \) is the probability for user \( i \) taken from the distribution, and \( N \) is the size of the anonymity set (the set of potential circuit initiators). The maximum entropy \( H_M \) in the system is computed as \( H_M = \log_2(N) \). The degree of anonymity [13] quantifies information leakage and is defined as the fraction of total entropy obtained from the given distribution \( I \):

\[
\text{Degree of Anonymity} = \frac{H(I)}{H_M}
\]

#### Distinguishability

To determine the effects of distinguishing clients from relays, we assume two types of clients: liberal clients who spend tickets immediately by downloading web pages, and conservative clients who store tickets until they can download large files. This model captures potential BRAIDS spending habits, where some clients consistently spend most of their tickets while others underspend. We further assume that each relay always has the desired number of tickets for any circuit it initiates, simplifying the analysis. However, this is a coarse model as it is difficult to estimate users' spending habits.

The tax rate \( \rho \) allows the bank to remove tickets from the system to keep ticket exchanges within manageable bandwidth bounds but may also reduce anonymity for large downloads. If a user spends more tickets than possible to collect only from free distribution (\( \eta \cdot \rho \)), an adversary can determine with high confidence that the circuit was initiated from a relay by observing \( \theta > \eta \cdot \rho \) tickets spent in a circuit. Additionally, an adversary may determine which relays can afford a given circuit by performing bandwidth measurements, as a relay's ticket income corresponds with the bandwidth it provides. In Section 4.1, we suggested distributing enough free tickets to pay for general web browsing so that the majority of users will not spend over \( \eta \cdot \rho \) tickets.

#### Discussion

To analyze our system, we use the growth rate of Tor relays from [50] and estimate the client growth rate by analyzing how the number of client connections to a relay changes over a two-month experiment [55]. Applying these rates and the estimated network size of 100,000 clients and 1,500 relays, we find the total network size over time. From Section 4.1, each ticket is worth 128 KB of data transfer, and we distribute \( \eta = 432 \) tickets per day. Tickets are taxed such that the system’s ticket capacity is \( \rho = 20 \) cumulative days of tickets. The fraction of conservative clients is \( \frac{1}{10} \), except where noted.

Figure 1 shows how the circuit throughput and the fraction of conservative clients may affect the set of potential initiators (if an adversary can guess this fraction) and therefore the degree of anonymity BRAIDS provides. By observing \( \theta < \eta \cdot \rho \) tickets, the circuit must have been initiated from a relay. For other observations, the degree of anonymity depends on the number of clients the adversary can eliminate from the potential initiator set.

- **Figure 1(a)**: Anonymity is highest when the adversary observes fewer than \( \theta = \eta \) tickets per circuit and lowest when more than \( \theta = \eta \cdot \rho \) are observed. In the shaded area, only \( \frac{1}{10} \) of clients are conservative, collecting tickets longer than one spending interval.
- **Figure 1(b)**: Anonymity increases with conservative clients that contribute to adversarial uncertainty. Since conservative clients represent adversarial uncertainty, having more conservative clients has a positive effect on anonymity. In all cases, anonymity is higher in BRAIDS than in the gold star scheme, where only the fastest \( \frac{7}{8} \) of relays are potential prioritized-traffic initiators. For highest anonymity, clients should spend less than \( \eta \) tickets for prioritized traffic in each spending interval.

### Simulation and Results

We simulate BRAIDS and Tor to compare performance and illustrate how effective our system is at encouraging users to run relays. Below, we describe our simulator, experiments, and results.

#### Simulator

We built a discrete-event-based simulator that models the Tor network. Within the first ten minutes of an experiment, all Tor clients start one of the applications described below and begin generating data. Each client builds circuits following Tor’s path selection protocol [52], and refreshes each circuit after ten minutes, building a new one when the next request is made.

- **Web Clients (WC)**: Each WC generates traffic by making a top-level page request and waiting for a response from the server. After receiving a response, the WC makes several additional parallel requests for objects embedded in the page (e.g., images). After receiving all embedded object responses, the WC waits for a period of time before downloading another page. We record the time required to download the entire page, including all embedded objects. The period between the initiation of the top-level request until the reception of the final embedded object simulates the time required to render an entire page in a user’s browser. Distributions for all request and response sizes, the number of embedded objects per page, and the time between page requests are taken from the web traffic study conducted by Hernandez-Campos et al.

- **File Sharing Clients (FSC)**: Each FSC simulates a BitTorrent-like protocol by continuously generating data to five random peers through the Tor network. Every thirty seconds, the FSC will replace its slowest connection with a new peer and a new circuit, simulating BitTorrent’s “optimistic unchoke” algorithm [6]. Each FSC exchanges blocks by sending a 32 KB request for a 32 KB reply and immediately sending another request upon receiving a reply. We measure the time to exchange each block.

- **File Sharing Relays (FSR)**: FSRs implement the same algorithm as FSCs but contribute a fraction of their total upstream bandwidth to Tor while using the remaining bandwidth for their own file transfers. The bandwidth contributed by FSRs supplies them with additional income not received by FSCs.

We simulate every cell generated by each client and sent through the Tor network. Tor nodes schedule outgoing cells using an exponential weighted moving average (EWMA) scheduler [47], while BRAIDS nodes use the HPD scheduler (see Section 3.4). To bootstrap the economy, tickets are distributed to clients and relays at the start of each simulation.

#### Experimental Parameters

Our simulated network consists of 19,400 web clients, 300 Tor relays, 2,000 servers, and 600 file sharing nodes. Web and file sharing nodes are given consumer-class connections of 12 Mbps downstream and 1.3 Mbps upstream bandwidth, and 24 Mbps downstream and 3.5 Mbps upstream bandwidth, respectively. File sharing relays draw contributed bandwidth amounts from the Tor network consensus [49] repeatedly until obtaining a value below their upstream capacity. Altruistic relays are given symmetric upstream and downstream capacities drawn from the bandwidth distribution reported in the consensus, clipped at 20 MB following standard Tor procedure [52]. Servers are given unlimited bandwidth, and we impose no processing delay on any node. Network latency between every hop is set to 100 ms, and we do not account for membership churn or congestion control in our simulator since it will have a similar effect on both Tor and BRAIDS performance. We simulate 60 minutes.

We run BRAIDS and Tor experiments with the above parameters. We run multiple BRAIDS experiments using 1:64:4096 as the HPD scheduler’s delay parameters corresponding to the service class ratio low-latency:high-throughput:normal, and HPD fraction \( f = 0.875 \) (see Section 3.4). Since we are interested in the incentives our system provides for running a relay, we vary only the fraction of 600 nodes that are FSCs as opposed to FSRs. This will allow us to determine how a user’s performance changes by serving as a relay. The load on the network is unchanged between all experiments. Our simulator closely approximates empirical Tor traffic loads gathered by McCoy et al. [32].

#### Results

In BRAIDS, the low-latency service class achieves a significant reduction in download time compared with Tor, and download times improve as more FSCs convert to FSRs (Figure 2(a)). Since web browsers transfer small amounts of data in most cases, improvements in download times are noticed even with few new relays. The similarity in download time when 50% and 80% of FSCs change to relays suggests that these nodes have reached a lower bound. We note that the best possible download time is 1.6 seconds, since all web clients must make at least one top-level and one embedded object request, resulting in sixteen 100 ms hops. The normal service class webpage download time is longer than in Tor, and performance slightly declines as more file-sharing users move to the high-throughput class since normal data is proportionally delayed sixty-four times as long as high-throughput data (Figure 2(b)). Unpaid traffic performance is best when 80% of the FSCs convert to relays since clients can take advantage of a significant increase in available bandwidth. These results are outstanding—download time for normal web traffic does not unusably degrade from performance achieved in Tor, and running a relay will provide a definite performance boost over those who choose to remain client-only.

BRAIDS FSRs not only receive an improvement in bandwidth utilization over Tor but can also achieve up to approximately 90% better utilization of their bandwidth compared with BRAIDS FSCs that do not run a relay, even while contributing a fraction of their bandwidth to Tor. Figure 2(c) shows that FSRs' performance increases as more nodes convert to relays. However, since the newly available bandwidth is also consumed by WCs, relays realize only incremental improvements as the fraction of converting relays increases. Figure 2(d) shows that as more file sharers convert to relays, performance for FSCs degrades. This happens mostly because a large amount of data from FSRs is receiving priority over data from FSCs, and the newly available bandwidth is being consumed by the low-latency and high-priority service classes. For all conversion rates, FSRs achieve considerably better performance than FSCs.

Overall, our results strongly indicate that BRAIDS users can increase the performance of both interactive and non-interactive traffic by starting a relay and contributing bandwidth to Tor. Therefore, if users want to run BitTorrent or similar file-sharing protocols using BRAIDS, they should run a relay to achieve maximum performance. This, in turn, will have a positive impact on the entire network since there will be more bandwidth available for other Tor clients.

### Related Work

#### Tor Incentives Research

Research from the community has provided few ideas to produce incentives to run Tor relays [3, 10, 38] in order to utilize recent scalability [34] and performance improvements for Tor [40, 46, 56]. Ngan et al. [38] previously proposed a system in which Tor directory servers actively measure the performance of relays and note the “best” relays in the directory with a “gold star”. This scheme introduces security vulnerabilities: the anonymity set of relays is significantly reduced since gold star relays can be distinguished from regular relays, and the changing membership of the gold star set leads to an intersection attack [20, 28, 33, 35].

PAR [3] is another scheme exploring incentive mechanisms for relays. In PAR, a centralized bank issues coins to clients while handling deposits from relays. Relays frequently deposit and verify coins at the bank to limit client double-spending. The need for the bank to frequently verify coins introduces a fundamental design problem—a trade-off between double-spending detection and anonymity: the bank may use coins to launch an intersection attack.

#### Incentives in Other Networks

Incentives have been previously proposed for several anonymous and peer-to-peer systems. Both Anonymizer.com [4] and the Freedom network [7] introduced commercial anonymity systems based on micropayments.