set up by the routing protocol. The base station (controller)
(cid:1)
initiates the process by sending k
g to each of its children in
the spanning tree using its cluster key for encryption. Note
(cid:1)
that a node v that receives k
g can verify the authenticity
(0) is the same as the veriﬁcation
of k
key it received earlier in the node revocation message. The
algorithm continues recursively down the spanning tree, i.e.,
(cid:1)
each node v that has received k
g to its children
in the spanning tree, using its own cluster key for encryption.
Note that although we pointed out that the hop-by-hop
encryption and decryption overhead for translating broad-
cast messages is non-trivial for sensor nodes, we believe it
is still aﬀordable for distributing a new group key. This
is because the distributed message contains only one key.
Moreover, group rekeying events in most sensor networks
can be expected to be relatively infrequent.
(cid:1)
g transmits k
g
Finally, we note that it is desirable that the group key
be updated more frequently even when no revocation event
occurs. This is important to defend against cryptanalysis
and to prevent the adversary from decrypting all the previ-
ously distributed messages by compromising a sensor node.
In our scheme, the controller can periodically broadcast an
authenticated key updating instruction. Alternatively, ev-
ery node can update the group key periodically. Every node
(cid:1)
g = fKg (0) and then erases the
generates a new group key K
old key Kg.
3.3
Inter-node Trafﬁc Authentication
We now consider the issue of inter-node traﬃc authenti-
cation that is critical in defending against various attacks
such as DoS. A mandatory requirement for a secure sen-
sor network is every message in the network must be au-
thenticated before it is forwarded or processed. Otherwise,
an adversary can simply deplete the energy of the sensor
nodes by injecting spurious packets into the network, even
without compromising a single node. Moreover, the authen-
tication scheme must be computationally very lightweight,
otherwise, a sensor node may be engaged in verifying a large
number of packets from the adversary leading to its energy
being depleted.
We have discussed the issue of authentic node revocation
in Section 3.2.5. We employ µTESLA for broadcast authen-
tication for the controller. Given the loose time synchro-
nization condition, µTESLA assures the authenticity of a
broadcast message by using one-way key chain and delayed
key disclosure. Unfortunately, µTESLA is not suitable for
inter-node traﬃc authentication because it does not provide
immediate authentication. This is because a node receiving
a packet has to wait for one µTESLA interval to receive the
delayed disclosed MAC key; as a result, a message travers-
ing l hops will take at least l µTESLA intervals to arrive
at the destination. Moreover, a sensor node has to buﬀer
all the unveriﬁed packets. Both the latency and the storage
requirements of this scheme make it unsuitable for authen-
ticating all traﬃc, although it suﬃces when authenticating
infrequent messages (e.g., rekeying messages) broadcast by a
base station. Therefore, we need authentication mechanisms
other than µTESLA for immediate traﬃc authentication.
One solution to this problem is to use pairwise keys for
authentication. Using pairwise keys provide source authen-
tication, but it precludes passive participation. To enable
passive participation, it is necessary to use cluster keys for
authentication. The basic scheme is as follows. Every node
authenticates a packet it transmits using its own cluster key
as the MAC key. A receiving node ﬁrst veriﬁes the packet
using the same cluster key it obtained from the sending node
in the cluster key establishment phase, then authenticates
the packet to its own neighbors with its own cluster key.
Thus, a message gets authenticated repeatedly in a hop-by-
hop fashion if it traverses multiple hops.
The above approach provides immediate authentication,
and its communication overhead is small because a node
only adds one MAC to each packet. However, although this
approach defends against outsider attacks in which the ad-
versary does not hold any keys, insider attacks are possible
after the adversary compromises a sensor node. The ad-
versary could inject spurious packets into the network, au-
thenticated with the cluster key of the compromised node or
with the cluster keys of the neighbors of the compromised
node. The former attack exists in both pairwise key based
and cluster key based authentication schemes, and it is very
hard to prevent and detect. We do not address this attack in
this work. However, the latter impersonation attack only ex-
ists in the cluster key based authentication scheme because
a cluster key is shared between a node and all its neighbors.
x
v
u
|uv| < |ux| + |xv|
Figure 1: Triangular Inequality
Below we propose a scheme to thwart this impersonation
attack.
3.3.1 One-way Key Chain Based Authentication
To address the impersonation attack described above, we
propose to use one-way hash key chain [18] for one-hop
broadcast authentication. Unlike µTESLA, this technique
does not use delayed key disclosure and does not require time
synchronization between neighboring nodes. Basically, ev-
ery node generates a one-way key chain of a certain length,
then transmits the commitment (i.e., the ﬁrst key) of the
key chain to each neighbor, encrypted with their pairwise
shared key. We refer to a key in a node’s one-way key chain
as its AUTH key. Whenever a node has a message to send,
it attaches to the message the next AUTH key in the key
chain. The AUTH keys are disclosed in an order reverse to
their generation. A neighbor receiving the message can ver-
ify its authenticity based on the commitment or a recently
disclosed AUTH key of the sending node.
Our authentication scheme is motivated by two observa-
tions. First, since packets are authenticated hop-by-hop, a
node only needs to authenticate a packet to its immediate
neighbors. Second, when a node sends a packet, a neighbor
will normally receive the packet before it receives a copy
forwarded by any other nodes. This is true due to the trian-
gular inequality among the distances of the involved nodes,
which is demonstrated in Fig. 1. When node u sends a
packet that contains the content M and an AUTH key K,
node v will receive the packet before it receives a forwarded
copy from node x because |uv| < |ux| + |xv|. This means,
the adversary x cannot reuse node u’s AUTH keys to im-
personate node u.
The above authentication scheme provides source authen-
tication (like an authentication scheme based on pairwise
shared keys) while not precluding passive participation (un-
like an authentication scheme based on pairwise shared keys).
However, we note that there is a possible impersonation at-
tack on this scheme. For example, an adversary can shield
node v or jam node v by letting another node w transmitting
to v at the same time when node u is transmitting. Later
the adversary sends a modiﬁed packet to node v imperson-
ating node u. Because node v has not received a packet with
the same AUTH key, it will accept the modiﬁed packet.
If this attack is launched by an outsider adversary, we
can simply prevent it as follows. Node u combines its AUTH
keys with its cluster key (e.g., XORing them together), then
authenticates the packets it sends using the combined keys
as the MAC keys. The outsider adversary does not know
node u’s cluster key thus is unable to launch this attack.
Unfortunately, we do not have a lightweight countermea-
sure to prevent the attack by an insider adversary. However,
we note that (i) The maximum number of erroneous pack-
ets that a compromised node x can inject into the network,
while impersonating node u, is bounded by the number of
packets node u has transmitted, due to the one-wayness
property of hash functions (ii) The compromise of a sen-
sor node only allows the adversary to launch such attack in
a two-hop zone of the compromised node x, because node x
only has the cluster keys of its one-hop direct neighbors. To
further deter this attack, we present below a probabilistic
scheme for detecting it.
3.3.2 Probabilistic Challenge Scheme
In this scheme, a node challenges the authenticity of a
received packet with a certain probability. More speciﬁcally,
when node v receives a packet P (we assume every packet
includes a count C for message freshness [22]) with AUTH
key K from (claimed) node u, it challenges node u for the
authenticity of packet P with probability pc, using their
pairwise key Kuv as the MAC key. The process is as follows.
pc−→ u :
v
u −→ v :
C, Nv, M AC(Kuv, C|Nv)
Nu, M AC(Kuv, C|Nv|Nu)
(1)
Here Nu and Nv are the nonces generated by node u and
node v respectively. The compromised node x cannot forge
the response impersonating node u because it does not have
the pairwise key Kuv. Thus, the insider adversary takes
the risk of being detected when it launches the above im-
personation attack, subject to the challenge probability pc.
We note the choice of pc should make a tradeoﬀ between
security and performance, because a larger pc leads to a
stronger security, but incurs a larger overhead for exchang-
ing the challenges and responses.
In our scheme, it is desirable to control the probability
pr that a node receives a challenge. This can be achieved if
every node broadcasts its degree of connection d to its neigh-
bors after the neighbor discovery phase and every neighbor
then sets its probability to challenge this node as pc = pr/d.
After a node detects an impersonation attack, it knows
one of its neighbors is compromised, although it does not
know which one.
it increases its challenge
probability pc.
It can also send a notice encrypted with
its pairwise keys to each neighbor, so that every node will
be aware of the compromise. Finally, it sends a notice to the
controller, encrypted with its individual key. The controller
can then take any necessary actions to detect and recover
from the compromise.
In this case,
4. PERFORMANCE EVALUATION
In this section we analyze the computational and com-
munication cost of our key establishment and key updating
schemes. We note that the individual key of a node and
the pairwise shared keys are usually not updated after the
neighbor discovery phase, whereas the cluster key is updated
if this node is a neighbor of the node being revoked and the
group key is updated in every group rekeying. Therefore,
we only consider the cost involved in updating the cluster
keys and the group key.
Our rekeying protocol does not require the use of a spe-
ciﬁc routing protocol; however, its communication costs will
depend upon the routing protocol. In our analysis below,
we assume that the rekeying protocol uses a spanning tree
constructed as discussed in Section 3.2.5 for delivering the
new group key to the nodes in the system.
4.1 Computational Cost
(cid:1)
While updating a cluster key, a node that is a neighbor of
the node being revoked needs to encrypt its new cluster key
using the pairwise key shared with each neighbor. There-
fore, the number of such encryptions is determined by the
number of neighbors, which depends on the density of the
sensor network. Let d0 be the number of neighbors of the
node being revoked, and di, i = 1, 2, ..., d0 the number of le-
gitimate neighbors of each of these d0 neighbors. The total
d0
i=1 di. The total
number of encryptions is simply Se =
number of decryptions is the same, although the number of
decryptions for an individual node that is a neighbor to any
of these d0 nodes depends on its location. In the worse case
where a node is a neighbor to all these d0 nodes, it needs
to decrypt d0 keys. For an individual node, the total num-
ber of symmetric key operations it performs is bounded by
(max(di) + d0 − 1). For a network of size N , the average
number of symmetric key operations a node performs while
updating a cluster key is 2Se
N .
The number of decryption operations in the secure distri-
bution of a group key is equal to the network size N because
every node needs to decrypt once. Recall that we are using
cluster keys for secure forwarding of the group key, which
means a parent node only needs to encrypt once for all its
children. Thus the total number of encryptions depends on
the network topology and is at most N . Therefore, the to-
tal number of symmetric key operations is at most 2N and
the average cost is at most 2 symmetric key operations per
node.
From the above analysis, we know that the computational
cost in a cluster and group rekeying is determined by the
network density. In a network of size N where every node
has a connection degree d, the average number of symmetric
key operations for every node is about 2(d− 1)2/(N − 1) + 2.
For a network of reasonable density, we believe that compu-
tational overhead will not become a performance bottleneck
in our schemes. For example, for a network of size N = 1000
and connection degree 20, the average computational cost is
2.7 symmetric key operations per node per revocation. A
larger N will further reduce this cost.
4.2 Communication Cost
The analysis of communication cost for a group rekeying
event is similar to that of computational cost. For updating
a cluster key, the average number of keys a node transmits
and receives is equal to (d−1)2/(N −1) for a network of con-
nection degree d and size N . For the secure distribution of a
group key, the average number of keys a node transmits and
receives is equal to one. For example, for a network of size
N = 1000 and connection degree d = 20, the average trans-
mission and receiving costs are both 1.4 keys per node per
revocation. The average communication cost increases with
the connection degree of a sensor network, but decrease with
the network size N . Note that in a group rekeying scheme
based on logical key tree such as LKH [26], the communica-
tion cost of a group rekeying is O(logN ). Thus, our scheme
is more scalable than LKH if LKH is used for group rekeying
in sensor networks.
4.3 Storage Requirement
In our schemes, a node needs to keep four types of keys.
If a node has d neighbors, it needs to store one individual
key, d pairwise keys, d cluster keys and one group key.
In addition, for our inter-node authentication scheme, a
node also keeps the commitment or the most recent AUTH
key of each neighbor and its own one-way key chain.
In
a sensor network the packet transmission rate is usually
very small. For example, the readings may be generated
and forwarded periodically, and the routing control infor-
mation may be exchanged less often. Thus, a node could
store a reasonable length of key chain. After the keys in
the key chain are used up, it can generate and bootstrap a
new key chain. To avoid storing the entire key chain, we
can deploy the optimization algorithm by Coppersmith and
Jakobsson [4] to trade storage and computation cost. Their
n) hashes per output element,
algorithm performs O(log2
and uses O(log2 n) memory cells, where the size of each cell
is slightly larger than that of a key and n is the length of the
key chain. Let L be the number of keys a node stores for its
key chain. Thus, the total number of keys a node stores is
3d + 2 + L.
√
Although memory space is a very scarce resource for the
current generation of sensor nodes (4 KB SRAM in a Berke-
ley Mica Mote), for a reasonable degree d, storage is not an
issue in our scheme. For example, when d = 20 and L = 20,
a node stores 82 keys (totally 656 bytes when the key size is
8 bytes).
Overall, we conclude our scheme is scalable and eﬃcient
in computation, communication and storage.
5. SECURITY ANALYSIS
In this section, we analyze the security of the keying mech-
anisms in LEAP. We ﬁrst discuss the survivability of the net-
work when undetected compromises occur, and then study
the robustness of our scheme in defending against various
attacks on routing protocols.
5.1 Survivability
When a sensor node u is compromised, the adversary can
launch attacks by utilizing node u’s keying materials.
If
the compromise event is detected somehow, our scheme can
revoke node u from the group eﬃciently. Basically, every
neighbor of node u deletes its pairwise key shared with u and
updates its cluster key. The group key is also updated eﬃ-
ciently. After the revocation, the adversary cannot launch
further attacks.
However, compromise detection in sensor systems is more
diﬃcult than in other systems because sensor systems are
often deployed in unattended environments. Thus, we be-
lieve survivability under undetected node compromises is one
of the most critical security requirements for any sensor net-