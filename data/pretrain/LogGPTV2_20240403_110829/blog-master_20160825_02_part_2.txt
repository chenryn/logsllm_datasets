Time: 0.330 ms  
```
调整默认精度  
需要重新编译, 在hll.c中 :   
```
// Defaults if type modifier values are not specified.  
//  
#define DEFAULT_LOG2M           15        
#define DEFAULT_REGWIDTH        5  
#define DEFAULT_EXPTHRESH       -1  
#define DEFAULT_SPARSEON        1  
static int32 g_default_log2m = DEFAULT_LOG2M;  
static int32 g_default_regwidth = DEFAULT_REGWIDTH;  
static int64 g_default_expthresh = DEFAULT_EXPTHRESH;  
static int32 g_default_sparseon = DEFAULT_SPARSEON;  
```
## 优化  
我们前面讲了GP的聚合分两种使用，一种是全部收到MASTER节点执行，另一种是两阶段聚合。    
如果记录数少，其实没有必要使用两阶段聚合。  
以hll_union_agg聚合为例  
临时结果保存为stype: internal类型.   
每次调用hll_union_trans函数，输入一条hll值以及临时结果internal，输出internal。   
最后调用hll_pack，将internal转换为hll输出  
```
-- Union aggregate function, returns hll.  
--  
CREATE AGGREGATE hll_union_agg (hll) (  
       SFUNC = hll_union_trans,  
       STYPE = internal,  
       FINALFUNC = hll_pack  
);  
-- Union aggregate transition function, first arg internal data  
-- structure, second arg is a packed multiset.  
--  
CREATE FUNCTION hll_union_trans(internal, hll)  
     RETURNS internal  
     AS '$libdir/hll'  
     LANGUAGE C;  
-- Converts internal data structure into packed multiset.  
--  
CREATE FUNCTION hll_pack(internal)  
     RETURNS hll  
     AS '$libdir/hll'  
     LANGUAGE C;  
```
**优化方法如下**  
在节点调用sfunc聚合，输入参数为(input_type数据 , 临时结果stype)，输出为stype  
```
sfunc( internal-state, next-data-values ) ---> next-internal-state  
```
segment第一阶段收集结果传输到master调用prefunc，输入(stype , stype)，得到的结果为stype  
```
prefunc( internal-state, internal-state ) ---> next-internal-state  
```
最后再将stype转换为聚合的输出类型即可(可选使用finalfunc)。    
## hll_union_agg 优化例子
```
CREATE AGGREGATE gp_hll_union_agg (hll) ( 
  SFUNC = hll_union, 
  prefunc = hll_union, -- 第二阶段函数
  STYPE = hll 
); 
```
## hll_add_agg 优化例子
```
# select hll_empty();
  hll_empty   
--------------
 \021\213\177
(1 row)
CREATE AGGREGATE gp_hll_add_agg (hll_hashval) (
  SFUNC = hll_add, 
  STYPE = hll, 
  prefunc = hll_union, -- 第二阶段函数
  initcond='\021\213\177'  -- 初始值
); 
```
gp_hll_add_agg建议使用原始的sfunc=hll_add_trans0函数，同时新增C的prefunc，达到最好的效率。  
使用hll_add实在是比较慢。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")