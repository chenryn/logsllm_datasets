against HTTP authentication. Check the tools sections at www.securityfocus.com and 
www.packetstormsecurity.org. 
To enable HTTP-supported authentication, you must configure your Web server to 
protect certain content in your Web tree. When a Web browser attempts to request 
protected content for the first time, the server returns a 401 message, which 
indicates the access request was unauthorized. This 401 response includes a 
WWW-Authenticate header field that informs the client which authentication methods 
are supported. This header field also contains challenges for any supported 
authentication mechanisms that use a challenge/response protocol. 
The Web browser then presents the user with an authentication dialog. It resubmits 
the original request to the Web server, but this time it includes an Authorization 
header containing a response appropriate for the selected authentication method. If 
the authentication information is invalid, the server again responds with a 401 
message, and the WWW-Authenticate header field has new challenges. The behavior 
that makes this system come together is that if a browser is successfully 
authenticated to a protected resource, it continues to send the Authorization header 
with every subsequent request to that resource and anything below that resource in 
the Web hierarchy. 
Note that the server is still stateless, and the client Web browser is what makes the 
user experience seem fluid. The server always responds to an incorrect or missing 
Authorization header with a 401 message. It's up to the client to attempt to provide 
a correct Authorization header by querying the user and retrying the request. If the 
client does authenticate successfully, protected dynamic applications are able to 
retrieve the username from the Web server, which they can use for tracking state if 
necessary. 
If you want to modify the sample application so that it's protected by HTTP 
authentication, first you need to configure the Web server to guard the application's 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1043 
Web pages. For example, with Apache, you place an .htaccess file in the same 
directory as the Web application code: 
AuthUserFile /scan/apache/htdocs/text/.htpasswd 
AuthGroupFile /dev/null 
AuthName HappyTown 
AuthType Basic 
require user jim 
You should get rid of the login page, as the Web server and Web browser would work 
together to manage collection of usernames and passwords and perform 
authentication. You could simply rewrite the main and secret pages so that they check 
for the server variable REMOTE_USER, which is set to the client's username if the client 
authenticates successfully. 
Auditing Hidden Fields 
In the early days of Web development, authentication was usually handled 
by HTTP and the Web server, and state maintenance was primarily done 
through hidden form fields and query string parameters. Many programmers 
who are developing today's n-tier distributed enterprise Web applications are 
the same developers who were cranking out Perl and CGI Web applications 
back then. In many large Web applications, you can find an occasional 
throwback to the simpler days of Web coding, probably in places where the 
developer felt rushed or didn't have time to go back and refactor the code. 
A reasonable rule of thumb these days is that state maintenance done with 
hidden form fields is appropriate only for information that's temporarily 
collected before it's validated and processed. For example, if a survey 
requires users to fill out three pages of forms, you might expect to see values 
from the first page as hidden parameters on the second and third pages. 
As a code reviewer, you should watch for data that's propagated via hidden 
fields after it has been validated or data that's placed into hidden fields to 
facilitate the Web server's future processing. In both cases, developers often 
don't consider the impact of users changing the data after the initial 
submission. 
Cookies 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1044 
Cookies are a generic HTTP mechanism for storing small pieces of information on a 
client's Web browser. After you store a cookie on a Web browser, every subsequent 
request the browser makes to your Web application includes that cookie. Therefore, 
cookies are ideal for tracking clients and maintaining state across requests. Most 
enterprise Web applications and Web-oriented programming frameworks build state 
management entirely around cookies. 
To set a cookie, the Web application instructs the Web server to send a HTTP response 
header named Set-Cookie. It looks like this: 
Set-Cookie: NAME=VALUE; expires=DATE; path=PATH; domain=DOMAIN; secure 
The first part of the Set-Cookie header is the actual content of the cookie, which 
consists of a single cookie name and a single cookie value. They are encoded with the 
same style of hexadecimal encoding used for GET and POST parameters. If you want to 
set multiple variables, you actually set multiple cookies instead of using something 
like the & character. All relevant cookies are sent to the Web server, as explained later 
in this section. 
The expires tag lets the server specify an expiration date/time for the cookie. After 
the specified time, the browser stops sending the cookie and deletes it. This tag is 
optional. A cookie with the expires tag is known as a persistent cookie, and a cookie 
without the tag is a nonpersistent cookie. Nonpersistent cookies are temporary in 
nature; they exist only in the browser's memory and are discarded when the browser 
is closed. Persistent cookies have more permanence, as they are stored on the client's 
file system by the Web browser and persist when the browser is closed. 
The path and domain tags help the browser know when to send the cookie. Every time 
a browser makes a Web request, it searches through its list of cookies to see whether 
any that need to be sent. First, it checks the domain name of the Web server against 
the domains specified in its list of cookies. This check is a substring search based on 
the tail of the domain name, so a cookie set with a domain of .test.com is sent to the 
servers www.test.com, www2.test.com, and this.is.a.test.com, for example. 
If the browser finds any cookies matching the specified domain, it then checks the 
path parameter. The path of the Web request is checked against the path specified 
when the cookie was set. This check is also a substring search, but it works from the 
head of the path. So a path= tag in the Set-Cookie header causes the cookie to match 
every request, as every Web request starts with a / character. A tag such as path= 
causes the cookie to be sent to every Web request starting with /test, such as /test/, 
/test/index.html, or /test/test2/test.php. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1045 
Cookies can also be marked secure or nonsecure with the optional secure tag. A 
secure cookie is sent only over HTTPS, whereas a nonsecure cookie is sent over both 
HTTP and HTTPS. 
For each Web request, the browser selects all cookies that seem appropriate by 
evaluating the Web request against the domain and path attributes of the cookies in its 
internal store. It then concatenates all matching cookies into a single request header 
field, which looks like this: 
Cookie: NAME1=VALUE1; NAME2=VALUE2; NAME3= 
In your sample Web application, you could make use of cookies to handle tracking 
user state. To do this, you add code to set a cookie if the user logs in successfully, and 
then you add code to check for the cookie and pull the username in the main and 
secret pages. If you compare this approach to the solution of rewriting every page 
request to contain a hidden field, you can see that the cookie solution is much simpler 
and saves you a lot of trouble. Now imagine a typical Web site with at least 30 
different pages and a few hundred potential page traversals, and you can see that the 
cookie approach is an order of magnitude simpler than other state-tracking schemes. 
Auditing Tip 
When you review a Web site, you should pay attention to how it uses cookies. They 
can be easy to ignore because they are in the HTTP request and response headers, 
not in the HTML (usually), but they should be reviewed with the same intensity you 
devote to GET and POST parameters. 
You can get access to cookies with certain browser extensions or by using an 
intercepting Web proxy tool, such as Paros (www.parosproxy.org) or SPIKE Proxy 
(www.immunitysec.com). Make sure cookies are marked secure for sites that use SSL. 
This helps mitigate the risk of the cookie ever being transmitted in clear text because 
of deliberate attacks, such as cross-site scripting, or unintentional configuration and 
programming mistakes and browser bugs. 
Sessions 
You have surveyed all the technology building blocks a Web application can use to 
track state. You can pay attention to inherent attributes of the HTTP request, such as 
the client IP address or the Referer tag. You can embed information the application 
needs in dynamically created HTML, in hidden form fields, or in URIs by using path 
information and query strings. You can rely on HTTP authentication mechanisms to 
have the Web server determine who the authenticated user is for every request. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1046 
Finally, you can use cookies to store information on the Web browser that are 
transmitted by the browser with every subsequent request. 
In the early days of dynamic Web programming, Web developers created a useful 
abstraction for tracking state known as a session. A session is basically a data 
structure that serves as a container for data associated with a Web client. Sessions 
are data stores that are maintained on the server in memory, on disk, in a database, 
or as component objects in an application server. A Web application stores data and 
objects in a session and retrieves them later through a simple API. 
The session is tied to a user through the use of a session token, which is a unique 
identifier that the server can use as a unique key for accessing the session data 
structure. Session tokens are usually large random numbers created for users when 
they log in or make their first request to the Web site. Ideally, this token should be 
known only by the client, making it a secure mechanism for uniquely identifying a 
user. 
The session system is supported by using one of the state-tracking mechanisms you 
examined earlier. The only information users need to send with every request is the 
session token, so it works well with multiple schemes. The most common 
implementation, however, is with cookies. When a user accesses a site, the Web 
server creates a session and sets a cookie containing the session token. Every 
subsequent request from that user includes the cookie containing the session token. 
Even though cookies are the most popular mechanism for session identification, 
session tokens may be passed in hidden form fields, in query string parameters, or in 
rare cases, as URI path components. 
The beauty of the session abstraction is that after a session is established, the Web 
application code has a universal and simple mechanism for associating data with a 
specific user. Sessions are typically used in two different ways. First, they are used as 
a secure mechanism for storing state information that's globally useful to all pages in 
a Web application. For example, in your sample Web site, the login page could store 
the username of the user in the session after a successful login. The main and secret 
pages then only need to check the session to see whether that username has been set. 
There's no way a remote user could alter the session and add or change the username 
unless a vulnerability existed in the session management code or the Web application. 
In general, the session can be used as a safe place to store information you don't 
want the client to have direct access to. 
Second, sessions are used to temporarily store information, in much the same way 
developers use hidden form fields. One page might take data from the user and 
validate it, and then instead of writing it to the HTML as hidden fields, the page stores 
it in the session. That way, developers could be sure the user couldn't tamper with the 
session contents, and the data in the session could be trusted for use in a subsequent 
page. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1047 
Sessions are usually provided by a Web framework or Web-oriented language, 
although they can be implemented by application developers. The details vary across 
different frameworks, but sessions are often created automatically the first time a 
client connects to a Web site. Languages such as PHP and frameworks such as ASP 
automatically include session support that's backed by cookies. 
Note 
Sessions are an important component of Web applications. You learn how to review 
them from a security perspective in "Problem Areas(? [????.])" later in this chapter. 
8.4.5 Architecture 
Now that you understand the fundamentals of HTTP and the basic techniques for 
addressing the problems of state and authentication, you can examine the problem 
domain of enterprise Web applications. There are several technology constraints as 
well as some high-level design concepts that drive modern Web application design. 
Enterprise Web applications can be quite complex, and it's worthwhile to explore 
some reasons these systems tend toward complicated designs. The following sections 
discuss some common drivers toward abstraction in the Web problem domain, and 
you learn about common architecture decisions for Web applications. 
Redundancy 
As programmers perfect their skills, naturally they try to make their jobs easier by 
writing reusable code and creating tools and frameworks. Web programming has a lot 
of redundant code, so Web programmers tend to create frameworks to abstract out 
the redundancy. 
For example, say a Web site has 20 different actions users can perform, such as 
checking a balance, paying a bill, and reporting a fraudulent charge. A 
straightforward implementation might have 20 different servlets, one for each user 
action, and a considerable amount of overlapping code. All the servlets need to check 
that users are authenticated and authorized for various resources; they all need to 
access the database and the session; and they all need to present HTML results to 
users. One simple refactoring would be moving common functions into objects that all 
the servlets use. This would get rid of a lot of redundant code for tasks such as 
authentication and make the application easier to maintain, as changes need to be 
made in only one place. There are plenty of other opportunities for refactoring out 
redundant code. For example, the programmer might observe that some servlets 
behave similarly and decide to merge them into one servlet that behaves differently 
based on a configuration file. 
What does abstraction mean from a security perspective? These kinds of 
modifications are usually beneficial because they increase an application's 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1048 
consistency, readability, and simplicity, all of which are usually good for security. That 
said, it's possible to overdo it. There's something to be said for having highly related 
sections of code located close to each other. It's easy to abstract out functionality so 
that security-critical logic is spread out over multiple files. When this is done in a way 
that makes it difficult to remember the application's entire control flow, developers 
increase the risk of a flaw caused by incorrect logic across multiple modules. 
Presentation Logic 
Presentation logic is code that's primarily concerned with displaying and formatting 
data, as opposed to business- or application-oriented logic that's responsible for tasks 
such as communicating with databases or authenticating users. Web application 
development is often a collaborative effort between graphical designers and 
application programmers, so this division can make sense from a logistical 
perspective. If the presentation code can be cleanly divorced from the rest of the code, 
Web application programmers can be responsible for performing the correct actions 
on the back end and getting the correct data to the presentation logic, and the more 
graphically oriented designers can be responsible for laying out the presentation of 
the data and making sure it looks appealing. 
In a Web application, this separation between presentation and application logic can 
generally be accomplished by having each page first call into other code to perform 
the necessary processing and gather the required data. The application programmer 
creates this first part of the code, which is responsible for performing actions users 
request and then filling out a data structure. The second part of the code, the 
presentation logic, is responsible for rendering the contents of the data structure into 
HTML. 
XML can be used for this purpose, too; application developers can write code that 
presents an XML document to the presentation logic. This presentation logic could be 
an XSLT stylesheet written by a designer that instructs the server how to render the 
data into HTML. 
Business Logic 
The programs that make up a Web application have to deal with the vagaries of a 
HTTP/HTML-based user interface as well as the actual business logic that drives the 
site. Business logic is a somewhat nebulous term, but it generally refers to procedures 
and algorithms an application performs that directly relate to business items and 
processes. For example, in a banking Web site, business logic includes tasks such as 
looking up bank accounts, enforcing rules for money transfers, and verifying a 
request for a credit limit increase. Business logic doesn't include tasks related to the 
Web site infrastructure or interface, such as expiring a user's token, making sure a 
user is authenticated to the Web site, formatting HTML output, and handling missing 
form input in a user request. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1049 
Another related concept is business objects, which encapsulate business logic in an 
object-oriented framework. For example, a banking site might define business 
objects such as Customer, Account, and TRansfer, and define methods that carry out 
business logic, such as Account.getStatement() and TRansfer.Validate(). 
N-Tier Architectures 
Many enterprise Web applications are constructed with multiple tiers, in which Web 
site functionality is divided into separate components and distributed across multiple 
servers, as shown in Figure 17-3. 
Figure 17-3. N-tier architecture 
The client tier is usually a client's Web browser, although some Web applications 
might have Java applets or other client-side code that performs user interface 
functions. Mobile phones are also included in this tier. For Web services, the client tier 
can include normal client applications that talk to the Web server via Simple Object 
Access Protocol (SOAP). (Web services and SOAP are discussed more in Chapter 18(? 
[????.]).) 
The Web tier is essentially the Web server. This tier is typically responsible for 
handling user requests, dispatching requests to the business logic, handling the 
results from the business logic, and rendering results into HTML for end users. The 
Web tier is composed of Web server software; application code such as ASP, PHP, or 
Java servlets; and HTML and any accompanying presentation logic. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1050 
The business tier handles the business logic of a Web application. This tier handles 
requests from the Web tier to perform business functions. It's often implemented by 
using an application server that hosts business objects. These objects are 
implemented as software components, such as COM objects, Web services, or 
JavaBeans. Java, .NET, and Visual Basic are popular choices for this functionality. 
The data tier handles storing and retrieving data for the Web application. It typically 
includes machines that run a relational database management system (RDBMS) and 
legacy machines containing enterprise data. The business tier talks to the data tier to 
retrieve the data needed to carry out the business logic. The Web tier might also talk 
to the data tier if it needs to handle user authentication and session management. 
Client tiers are usually nothing more than users with Web browsers on the Internet. 
Many Web applications combine the Web tier and the business tier into one tier and 
implement all Web site functionality in programs that run on the Web server. This 
approach is usually a solid choice for small to medium applications. The data tier is 
usually a database server running on its own machine or a mainframe with some sort 
of middleware bridge, such as Open Database Connectivity (ODBC); however, some 
smaller sites place the database server directly on the Web server. 
Applications with multiple business and data tiers aren't uncommon, especially in the 
financial sector. An extreme, real-world example of this multitiered architecture is a 
Web system composed of a Java servlet Web tier talking to a Web Services business 
tier written in Visual Basic, talking to a COM object business tier written in Visual Basic, 
talking to a COM object business tier written in C++, talking to a proprietary business 
tier server written in C++, talking to a back-end business tier running on a legacy 
system. The security logic for a lot of the system is located on the legacy system, 
which effectively relegated an audit of several hundred thousand lines of source code 
to a black box test. 
Business Tier 
The business tier is typically an application server containing object-oriented software 
components that encapsulate the Web application's business logic. For example, if a 
user logs in to a banking Web site, the Web tier would probably handle authentication 
and setting up the user session. It would then tell the business tier that a user logged 
in via an RPC-style message or object invocation. This notification could cause the 
business tier to create a User object, which would contact the back-end database to 
retrieve information about that user, such as the user's account numbers. The User 
object could in turn create Account objects for all that user's accounts. Those Account 
objects could contact the database to retrieve account information about the user's 
accounts. These objects stay alive in the business tier and keep the account 
information in memory, anticipating a request from the Web tier. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1051 
If the user later clicks a link for a checking account balance inquiry, the Web tier 
brokers the request and then requests an account overview from the business tier. 
The business tier then retrieves that information from the appropriate Account object 
and hands it directly to the Web tier. 
The business tier is responsible for maintaining its own state across requests from the 