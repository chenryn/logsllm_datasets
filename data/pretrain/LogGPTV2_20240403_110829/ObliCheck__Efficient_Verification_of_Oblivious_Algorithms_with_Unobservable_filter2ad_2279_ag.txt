obliviousness using ObliCheck. Although it has some quirks
such as the unusual semantics of equality, ObliCheck utilizes
a clean subset of Javascript as modeling language and thus
clear enough for modeling algorithms. However, we found
it unnatural to model the low-level behavior of an algorithm
in Javascript. A user has to write assembly-like code using
Javascript to verify the machine code-level obliviousness. In-
stead of using Javascript, it is natural to devise a Domain
Speciﬁc Language for writing an algorithm in this case. Then
a compiler translates it to an intermediate representation such
as LLVM IR for veriﬁcation, rather than a user manually de-
scribes the low-level behavior of an algorithm.
9 Related Work
Checking Side Channel Leakage Using Taint Analysis.
Several past works detect or mitigate side-channel leakage
of an algorithm using taint analysis. Vale [15] provides a
DSL and tools for writing high-performance assembly code
for cryptographic primitives. Vale checks the written code
is free from digital side-channels of memory and timing us-
ing taint analysis. As described in §2.4, this approach can
result in a large number of false positives in the presence of
unobservable state.
Raccoon [59] uses taint analysis to identify secret depen-
dent branches which can potentially leak information and
obfuscate the behaviors of these branches. Since Raccoon is
a compiler but not a checker, using taint analysis in this way
may result in unnecessary obfuscation but not the rejection
of a program. Sidebuster [77] uses taint analysis in the same
way to check and mitigate side-channels in web applications.
Overall, taint analysis is an efﬁcient technique to detect and
mitigate side-channels under a limited time budget. However,
it keeps a coarse-grained state regarding information ﬂow and
only tracks which variables are affected by a source input.
Symbolic Execution and State Merging Techniques for
Preventing Side Channel Attacks. Symbolic execution has
widely deployed to check certain properties of a program and
generate high-coverage test cases [16–18,28,38,61,62]. Prac-
tical symbolic execution frameworks normally limit the depth
of exploration or drive the execution to parts of a code to ﬁnd
buggy code with a limited time budget. Our checker rather
checks the whole input space of a program to eliminate false-
negative cases to make our checker useful for checking the
security property.
State merging techniques are used to resolve the path ex-
plosion problem of symbolic execution at the expense of
more complicated path conditions [10, 27, 30]. MultiSE [63]
merge states incrementally at every assignment of symbolic
variables without introducing auxiliary variables. MultiSE
supports merging values not supported by constraint solver
such as functions and makes it unnecessary to identify the join
points of branches to merge state. OSM of ObliCheck is fun-
damentally different from existing state merging techniques.
Existing state merging techniques are sound and complete
with regard to symbolic execution. The merged symbolic state
explores the same set of program behaviors as regular sym-
bolic execution. Therefore, existing techniques do not report
false positives. In contrast, OSM leverages domain-speciﬁc
knowledge from oblivious programs and over-approximates
program behavior to merge two states even if they cannot be
merged in original state merging, which signiﬁcantly speeds
up the checking process. However, OSM might report false
positives, and that’s where ISU kicks in to repair them.
One of the most widely exploited and studied side-channels
is the cache side-channel. CaSym [45] uses symbolic execu-
tion to detect a part of a given program that incurs cache side-
channel leakage. CaSym runs the LLVM IR of a program
symbolically and ﬁnds inputs which let an attacker distin-
guish observable cache state. CaSym merges paths by intro-
ducing an auxiliary logical variable. CaSym and ObliCheck
differs in how they merge state—CaSym merges at join points
by introducing auxiliary variables, while ObliCheck merges
at each assignment statement. Moreover, CaSym does not
use domain-speciﬁc knowledge to merge state aggressively.
CaSym speciﬁcally focuses on checking cache side-channel
leakage with a comprehensive cache model but ObliCheck is
for more general oblivious algorithms. CacheD [69] also uses
symbolic execution but only checks the traces explored in a
dynamic execution of a program, which may miss potential
vulnerabilities. CacheAudit [21] uses abstract interpretation
to detect cache side-channel leakage.
Ensuring Noninterference Policy. Noninterference is a se-
curity policy model which strictly enforces information with
a ‘high’ label does not interfere with information with a ‘low’
label [20]. Some existing approaches for enforcing nonin-
terference are type checking [53, 54, 68] and abstract in-
terpretation [25, 39]. Barthe et al. deﬁned a way to prove
noninterference by a sequential composition of a given al-
gorithm [12]. Terauchi and Aiken proposed a term 2-safety
to distinguish safety property like noninterference which re-
quires observing two ﬁnite sets of traces [67]. Also, they
devised a type-based transformation of a given algorithm
for self-composition which has better efﬁciency than a sim-
ple sequential-composition suggested by Barthe et al. for
removing redundant and duplicated execution. Milushev et
2234    30th USENIX Security Symposium
USENIX Association
al. suggested a way to use symbolic execution to prove the
noninterference property of a given algorithm [50]. They
used type-directed transformation suggested by Terauchi and
Aiken to interleave two sets of algorithms. The type-directed
transformation can be orthogonally applied and potentially
improve the performance of ObliCheck.
10 Conclusion
Access pattern based side-channels have gained attraction due
to a large amount of information they leak. Although oblivious
algorithms have been devised to close these side-channels, the
algorithms must be manually checked. We showed that sym-
bolic execution can be utilized to automatically check a given
algorithm is oblivious. With our optimistic state merging
and iterative state unmerging techniques, ObliCheck achieves
more accurate results than existing taint analysis based tech-
niques and runs faster than traditional symbolic execution.
Acknowledgments
We thank the anonymous reviewers and our shepherd,
Vasileios P. Kemerlis, for their feedback. This work was
supported in part by the NSF CISE Expeditions CCF-
1730628, NSF Career 1943347, NSF grants CCF-1900968,
CCF-1908870, CNS-1817122, and gifts/awards from the
Sloan Foundation, Bakar Program, Alibaba, Amazon Web
Services, Ant Group, Capital One, Ericsson, Facebook, Fu-
jitsu, Futurewei, Google, Intel, Microsoft, Nvidia, Scotiabank,
Splunk, and VMware.
References
[1] Aes-js: A pure javascript implementation of the aes block cipher algo-
rithm and all common modes of operation. https://github.com/
ricmoo/aes-js. Accessed: 2020-08-12.
[2] Apache spark: Lightning-fast uniﬁed analytics engine. https://
spark.apache.org/. Accessed: 2020-08-10.
[3] Github: Opaue.
https://github.com/ucbrise/opaque. Ac-
cessed: 2020-02-10.
[4] A javascript implementation of a textsecure server.
https://
github.com/joebandenburg/textsecure-server-node. Ac-
cessed: 2020-08-12.
[5] neurojs: Neural network library.
https://github.com/
pieteradejong/neuroJS. Accessed: 2020-08-12.
[6] Private contact discovery service (beta). https://github.com/
signalapp/contactdiscoveryservice. Accessed: 2020-08-31.
[7] Technology preview: Private contact discovery for signal. https:
//signal.org/blog/private-contact-discovery/. Accessed:
2019-05-06.
[8] Mohsen Ahmadvand, Anahit Hayrapetyan, Sebastian Banescu, and
Alexander Pretschner. Practical integrity protection with oblivious
hashing. In ACSAC, 2018.
[9] Aws Albarghouthi and Justin Hsu. Synthesizing coupling proofs of
differential privacy. In POPL, 2017.
[10] Saswat Anand, Patrice Godefroid, and Nikolai Tillmann. Demand-
driven compositional symbolic execution. In TACAS/ETAPS, 2008.
[11] Arvind Arasu, Spyros Blanas, Ken Eguro, Manas Joglekar, Raghav
Kaushik, Donald Kossmann, Ravi Ramamurthy, Prasang Upadhyaya,
and Ramarathnam Venkatesan. Secure database-as-a-service with
cipherbase. In SIGMOD, 2013.
[12] G. Barthe, P. R. D’Argenio, and T. Rezk. Secure information ﬂow by
self-composition. In CSF, 2004.
[13] Gilles Barthe, Noémie Fong, Marco Gaboardi, Benjamin Grégoire,
Justin Hsu, and Pierre-Yves Strub. Advanced probabilistic couplings
for differential privacy. In CCS, 2016.
[14] Andrea Bittau, Úlfar Erlingsson, Petros Maniatis, Ilya Mironov, Ananth
Raghunathan, David Lie, Mitch Rudominer, Ushasree Kode, Julien
Tinnes, and Bernhard Seefeld. Prochlo: Strong privacy for analytics in
the crowd. In SOSP, 2017.
[15] Barry Bond, Chris Hawblitzel, Manos Kapritsos, K. Rustan M. Leino,
Jacob R. Lorch, Bryan Parno, Ashay Rane, Srinath Setty, and Laure
Thompson. Vale: Verifying high-performance cryptographic assembly
code. In USENIX Security, 2017.
[16] Cristian Cadar, Daniel Dunbar, and Dawson Engler. Klee: Unassisted
and automatic generation of high-coverage tests for complex systems
programs. In OSDI, 2008.
[17] Cristian Cadar and Koushik Sen. Symbolic execution for software
testing: Three decades later. CACM, 2013.
[18] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. S2e:
A platform for in-vivo multi-path analysis of software systems. In
ASPLOS, 2011.
[19] Hung Dang, Tien Tuan Anh Dinh, Ee-Chien Chang, and Beng Chin Ooi.
Privacy-preserving computation with trusted computing via scramble-
then-compute. In PET, 2017.
[20] Dorothy E. Denning and Peter J. Denning. Certiﬁcation of programs
for secure information ﬂow. CACM, 1977.
[21] Goran Doychev, Dominik Feld, Boris Kopf, Laurent Mauborgne, and
Jan Reineke. Cacheaudit: A tool for the static analysis of cache side
channels. In USENIX Security, 2013.
[22] David Eppstein, Michael T. Goodrich, and Roberto Tamassia. Privacy-
preserving data-oblivious geometric algorithms for geographic data. In
GIS, 2010.
[23] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, ECE, and
Dmitry Ponomarev. Branchscope: A new side-channel attack on direc-
tional branch predictor. In ASPLOS, 2018.
[24] Robert W Floyd. Assigning meanings to programs.
Veriﬁcation, pages 65–81. Springer, 1993.
In Program
[25] Roberto Giacobazzi and Isabella Mastroeni. Abstract non-interference:
Parameterizing non-interference by abstract interpretation. In POPL,
2004.
[26] Daniel B. Gifﬁn, Amit Levy, Deian Stefan, David Terei, David Mazières,
John C. Mitchell, and Alejandro Russo. Hails: Protecting data privacy
in untrusted web applications. In OSDI, 2012.
[27] Patrice Godefroid. Compositional dynamic test generation. In POPL,
2007.
[28] Patrice Godefroid, Nils Klarlund, and Koushik Sen. Dart: Directed
automated random testing. In PLDI, 2005.
[29] Patrice Godefroid and Daniel Luchaup. Automatic partial loop summa-
rization in dynamic test generation. In ISSTA, 2011.
[30] Patrice Godefroid, Aditya Nori, Sriram Rajamani, and Sai Deep Tetali.
Compositional may-must program analysis: Unleashing the power of
alternation. In POPL, 2010.
[31] Oded Goldreich and Rafail Ostrovsky. Software protection and simula-
tion on oblivious rams. J. ACM, 43(3):431–473, May 1996.
[32] Michael T. Goodrich, Olga Ohrimenko, and Roberto Tamassia. Data-
oblivious graph drawing model and algorithms. CoRR, abs/1209.0756,
2012.
[33] Mariem Graa, Nora Cuppens-Boulahia, Frédéric Cuppens, Jean-Louis
Lanet, and Routa Moussaileb. Detection of side channel attacks based
on data tainting in android systems. In IFIP International Conference
on ICT Systems Security and Privacy Protection, 2017.
USENIX Association
30th USENIX Security Symposium    2235
[34] Charles Antony Richard Hoare. An axiomatic basis for computer
programming. Communications of the ACM, 12(10):576–580, 1969.
[35] Sebastian Hunt and David Sands. On ﬂow-sensitive security types. In
POPL, 2006.
[36] Tyler Hunt, Congzheng Song, Reza Shokri, Vitaly Shmatikov, and Em-
mett Witchel. Chiron: Privacy-preserving machine learning as a service.
CoRR, abs/1803.05961, 2018.
[37] S. Kadloor, X. Gong, N. Kiyavash, T. Tezcan, and N. Borisov. Low-
cost side channel remote trafﬁc analysis attack in packet networks. In
IEEE International Conference on Communications, 2010.
[38] James C. King. Symbolic execution and program testing. Commun.
ACM, 19(7):385–394, July 1976.
[39] Máté Kovács, Helmut Seidl, and Bernd Finkbeiner. Relational abstract
interpretation for the veriﬁcation of 2-hypersafety properties. In CCS,
2013.
[40] Maxwell Krohn, Alexander Yip, Micah Brodsky, Natan Cliffer,
M. Frans Kaashoek, Eddie Kohler, and Robert Morris. Information
ﬂow control for standard os abstractions. In SOSP, 2007.
[41] Volodymyr Kuznetsov, Johannes Kinder, Stefan Bucur, and George
Candea. Efﬁcient state merging in symbolic execution. In PLDI, 2012.
[42] Dayeol Lee, Dongha Jung, Ian Fang, Chia-Che Tsai, and Raluca Ada
Popa. An off-chip attack on hardware enclaves via the memory bus. In
USENIX Security, 2020.
[43] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim,
and Marcus Peinado. Inferring ﬁne-grained control ﬂow inside SGX
enclaves with branch shadowing. In USENIX Security, 2017.
[44] K. Rustan M. Leino. Dafny: An automatic program veriﬁer for func-
tional correctness. In LPAR, 2010.
[45] X. Ling, S. Ji, J. Zou, J. Wang, C. Wu, B. Li, and T. Wang. Deepsec:
A uniform platform for security analysis of deep learning model. In
IEEE S&P, 2019.
[46] Chang Liu, Austin Harris, Martin Maas, Michael Hicks, Mohit Tiwari,
and Elaine Shi. Ghostrider: A hardware-software system for memory
trace oblivious computation. In ASPLOS, 2015.
[47] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee. Last-level cache
side-channel attacks are practical. In IEE S&P, 2015.
[48] Jian Liu, Mika Juuti, Yao Lu, and N. Asokan. Oblivious neural network
predictions via minionn transformations. In CCS, 2017.
[49] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos Rozas,
Hisham Shaﬁ, Vedvyas Shanbhogue, and Uday Savagaonkar. Innova-
tive Instructions and Software Model for Isolated Execution. In HASP,
2013.
[50] Dimiter Milushev, Wim Beck, and Dave Clarke. Noninterference via
symbolic execution. In FMOODS/FORTE, 2012.
[51] P. Mishra, R. Poddar, J. Chen, A. Chiesa, and R. A. Popa. Oblix: An
efﬁcient oblivious search index. In IEEE S&P, 2018.
[52] Mark Mossberg, Felipe Manzano, Eric Hennenfent, Alex Groce, Gus-
tavo Grieco, Josselin Feist, Trent Brunson, and Artem Dinaburg. Man-
ticore: A user-friendly symbolic execution framework for binaries and
smart contracts. In ASE, 2019.
[53] Andrew C. Myers and Andrew C. Myers. Jﬂow: Practical mostly-static
information ﬂow control. In POPL, 1999.
[54] Andrew C. Myers, Andrew C. Myers, and Barbara Liskov. A decen-
tralized model for information ﬂow control. In SOSP, 1997.
[55] Aleksandar Nanevski, Anindya Banerjee, and Deepak Garg. Veriﬁca-
tion of information ﬂow and access control policies with dependent
types. In IEEE S&P, 2011.
[56] Valeria Nikolaenko, Stratis Ioannidis, Udi Weinsberg, Marc Joye, Nina
Taft, and Dan Boneh. Privacy-preserving matrix factorization. In CCS,
2013.
[57] Olga Ohrimenko, Manuel Costa, Cédric Fournet, Christos Gkantsidis,
Markulf Kohlweiss, and Divya Sharma. Observing and preventing
leakage in mapreduce. In CCS, 2015.
[58] Olga Ohrimenko, Felix Schuster, Cedric Fournet, Aastha Mehta, Sebas-
tian Nowozin, Kapil Vaswani, and Manuel Costa. Oblivious multi-party
machine learning on trusted processors. In USENIX Security, 2016.
[59] Ashay Rane, Calvin Lin, and Mohit Tiwari. Raccoon: Closing digital
In USENIX Security,
side-channels through obfuscated execution.
2015.
[60] Sajin Sasy, Sergey Gorbunov, and Christopher W Fletcher. Zerotrace:
Oblivious memory primitives from intel sgx. IACR Cryptology ePrint
Archive, 2017:549, 2017.
[61] Koushik Sen, Swaroop Kalasapur, Tasneem Brutch, and Simon Gibbs.
Jalangi: A selective record-replay and dynamic analysis framework for
javascript. In ESEC/FSE 2013, 2013.
[62] Koushik Sen, Darko Marinov, and Gul Agha. Cute: A concolic unit
testing engine for c. In ESEC/FSE-13, 2005.
[63] Koushik Sen, George Necula, Liang Gong, and Wontae Choi. Multise:
Multi-path symbolic execution using value summaries. In ESEC/FSE
2015, 2015.
[64] Fahad Shaon, Murat Kantarcioglu, Zhiqiang Lin, and Latifur Khan.
Sgx-bigmatrix: A practical encrypted data analytic framework with
trusted processors. In CCS, 2017.
[65] Jan Smans, Bart Jacobs, Frank Piessens, and Wolfram Schulte. An
automatic veriﬁer for java-like programs based on dynamic frames.
In International Conference on Fundamental Approaches to Software
Engineering, 2008.
[66] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher Fletcher, Ling
Ren, Xiangyao Yu, and Srinivas Devadas. Path oram: An extremely
simple oblivious ram protocol. In CCS, 2013.
[67] Tachio Terauchi and Alex Aiken. Secure information ﬂow as a safety
problem. In SAS, 2005.
[68] Dennis Volpano, Cynthia Irvine, and Geoffrey Smith. A sound type
system for secure ﬂow analysis. J. Comput. Secur., 4(2-3):167–187,
January 1996.
[69] Shuai Wang, Pei Wang, Xiao Liu, Danfeng Zhang, and Dinghao Wu.
Cached: Identifying cache-based timing channels in production soft-
ware. In USENIX Security, 2017.
[70] Xiao Shaun Wang, Kartik Nayak, Chang Liu, T-H. Hubert Chan, Elaine
Shi, Emil Stefanov, and Yan Huang. Oblivious data structures. In CCS,
2014.
[71] Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks: Deter-
ministic side channels for untrusted operating systems. In IEEE S&P,
2015.
[72] Jean Yang, Travis Hance, Thomas H. Austin, Armando Solar-Lezama,
Cormac Flanagan, and Stephen Chong. Precise, dynamic information
ﬂow for database-backed applications. In PLDI, 2016.
[73] Jean Yang, Kuat Yessenov, and Armando Solar-Lezama. A language
for automatically enforcing privacy policies. In POPL, 2012.
[74] Alexander Yip, Xi Wang, Nickolai Zeldovich, and M. Frans Kaashoek.
Improving application security with data ﬂow assertions. In SOSP,
2009.
[75] Jiyong Yu, Lucas Hsiung, Mohamad El’Hajj, and Christopher W
Fletcher. Data oblivious isa extensions for side channel-resistant and
high performance computing. In NDSS, 2019.
[76] Danfeng Zhang and Daniel Kifer. Lightdp: Towards automating differ-
ential privacy proofs. In POPL, 2017.
[77] Kehuan Zhang, Zhou Li, Rui Wang, XiaoFeng Wang, and Shuo Chen.
Sidebuster: Automated detection and quantiﬁcation of side-channel
leaks in web application development. In CCS, 2010.
[78] Wenting Zheng, Ankur Dave, Jethro G. Beekman, Raluca Ada Popa,
Joseph E. Gonzalez, and Ion Stoica. Opaque: An oblivious and en-
crypted distributed analytics platform. In NSDI, 2017.
2236    30th USENIX Security Symposium
USENIX Association