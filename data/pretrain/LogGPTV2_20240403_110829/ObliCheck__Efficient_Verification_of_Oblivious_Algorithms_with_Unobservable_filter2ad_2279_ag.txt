### Obliviousness Verification with ObliCheck

ObliCheck is a tool designed to verify obliviousness, though it has some unique characteristics, such as the unusual semantics of equality. It uses a clean subset of JavaScript as its modeling language, making it suitable for algorithm modeling. However, we found that using JavaScript to model the low-level behavior of an algorithm feels unnatural. Users must write assembly-like code in JavaScript to verify machine code-level obliviousness. A more natural approach would be to develop a Domain-Specific Language (DSL) for this purpose. This DSL could then be compiled into an intermediate representation, such as LLVM IR, for verification, rather than requiring users to manually describe the low-level behavior.

### Related Work

#### Taint Analysis for Side-Channel Leakage

Several past works have used taint analysis to detect or mitigate side-channel leakage in algorithms. For example, Vale [15] provides a DSL and tools for writing high-performance assembly code for cryptographic primitives. It checks the written code for digital side-channels related to memory and timing using taint analysis. As discussed in §2.4, this approach can result in a large number of false positives due to unobservable state.

Raccoon [59] employs taint analysis to identify secret-dependent branches that can potentially leak information and obfuscate their behavior. Since Raccoon is a compiler and not a checker, using taint analysis in this way may lead to unnecessary obfuscation without rejecting the program. Similarly, Sidebuster [77] uses taint analysis to check and mitigate side-channels in web applications.

Overall, taint analysis is an efficient technique for detecting and mitigating side-channels under a limited time budget. However, it maintains a coarse-grained state regarding information flow and only tracks which variables are affected by source inputs.

#### Symbolic Execution and State Merging Techniques

Symbolic execution is widely used to check certain properties of a program and generate high-coverage test cases [16–18, 28, 38, 61, 62]. Practical symbolic execution frameworks often limit the depth of exploration or drive the execution to specific parts of the code to find buggy code within a limited time budget. In contrast, our checker examines the entire input space of a program to eliminate false-negative cases, making it more useful for security property verification.

State merging techniques are employed to address the path explosion problem in symbolic execution, albeit at the cost of more complex path conditions [10, 27, 30]. MultiSE [63] incrementally merges states at every assignment of symbolic variables without introducing auxiliary variables. It supports merging values not supported by constraint solvers, such as functions, and eliminates the need to identify join points for merging states. ObliCheck's Optimistic State Merging (OSM) is fundamentally different from existing state merging techniques. While existing techniques are sound and complete with respect to symbolic execution, OSM leverages domain-specific knowledge from oblivious programs to over-approximate program behavior and merge states even when they cannot be merged in traditional methods. This significantly speeds up the checking process but may introduce false positives, which are addressed by Iterative State Unmerging (ISU).

One of the most widely exploited and studied side-channels is the cache side-channel. CaSym [45] uses symbolic execution to detect parts of a program that incur cache side-channel leakage. It runs the LLVM IR of a program symbolically and finds inputs that allow an attacker to distinguish observable cache states. CaSym merges paths by introducing auxiliary logical variables. The main differences between CaSym and ObliCheck are in how they merge states: CaSym merges at join points by introducing auxiliary variables, while ObliCheck merges at each assignment statement. Additionally, CaSym does not use domain-specific knowledge to aggressively merge states and focuses specifically on cache side-channel leakage with a comprehensive cache model. In contrast, ObliCheck is designed for more general oblivious algorithms. CacheD [69] also uses symbolic execution but only checks traces explored in a dynamic execution, which may miss potential vulnerabilities. CacheAudit [21] uses abstract interpretation to detect cache side-channel leakage.

#### Ensuring Noninterference Policy

Noninterference is a security policy model that strictly enforces that information with a 'high' label does not interfere with information with a 'low' label [20]. Some existing approaches for enforcing noninterference include type checking [53, 54, 68] and abstract interpretation [25, 39]. Barthe et al. [12] defined a way to prove noninterference through sequential composition of a given algorithm. Terauchi and Aiken [67] proposed the term 2-safety to distinguish safety properties like noninterference, which require observing two finite sets of traces. They also devised a type-based transformation for self-composition, which is more efficient than the simple sequential composition suggested by Barthe et al. for removing redundant and duplicated execution. Milushev et al. [50] suggested using symbolic execution to prove the noninterference property of a given algorithm. They applied the type-directed transformation suggested by Terauchi and Aiken to interleave two sets of algorithms. This type-directed transformation can be orthogonally applied and potentially improve the performance of ObliCheck.

### Conclusion

Access pattern-based side-channels have gained attention due to the significant amount of information they can leak. Although oblivious algorithms have been developed to close these side-channels, they must be manually checked. We demonstrated that symbolic execution can be used to automatically verify the obliviousness of a given algorithm. With our optimistic state merging and iterative state unmerging techniques, ObliCheck achieves more accurate results than existing taint analysis-based techniques and runs faster than traditional symbolic execution.

### Acknowledgments

We thank the anonymous reviewers and our shepherd, Vasileios P. Kemerlis, for their feedback. This work was supported in part by the NSF CISE Expeditions CCF-1730628, NSF Career 1943347, NSF grants CCF-1900968, CCF-1908870, CNS-1817122, and gifts/awards from the Sloan Foundation, Bakar Program, Alibaba, Amazon Web Services, Ant Group, Capital One, Ericsson, Facebook, Fujitsu, Futurewei, Google, Intel, Microsoft, Nvidia, Scotiabank, Splunk, and VMware.

### References

[References remain unchanged]

---

This optimized version aims to enhance clarity, coherence, and professionalism, making the text more accessible and informative.