ﬁnd preﬁx eventsk+1 of eventsMo
return (ck, ck+1, eventsk+1, πk+1)
j, πj) ← QAu[eventj] for j = k, k + 1
First, we observe that if the preﬁx eventsk+1 exists (which it does, assuming Epreﬁx and E(cid:96)-preﬁx for all (cid:96),
k + 1 ≤ (cid:96) ≤ n), it can be computed eﬃciently given eventsMo, so B2,k does run in polynomial time. Similarly,
if these events hold then CheckCom(ck+1, eventsk+1) = 1, so the ﬁrst winning condition of Gappend
(λ) is met.
Furthermore, by our conditions above, we know that CheckAppend(ck, ck+1, πk+1) = 1, so the second winning
condition is met as well. Finally, if ¬Ek-preﬁx, then the third winning condition is met, so Pr[¬Ek-preﬁx] ≤
Advappend
(λ).
dlc,B2,k
Finally, suppose now that Ei-preﬁx does hold; i.e., that there exists a preﬁx eventsi of eventsAu (which is
itself a preﬁx of eventsMo) such that CheckCom(ci, eventsi) = 1. Then we can construct an adversary B3 to
break the soundness of the DLC as follows:
(λ). Putting all the hybrids together, we get that Pr[Epreﬁx ∧ ¬Ei-preﬁx] ≤Pn
k=i Advappend
dlc,B2,k
B2,k
B3(1λ)
r←− AMsgAu,MsgMo(1λ)
pk LS
i, πi) ← QAu[eventi]
(ci, snapi, π(cid:48)
return (ci, eventsi, eventi, π(cid:48)
i)
Because Ei-preﬁx holds, CheckCom(ci, eventsi) = 1, so the ﬁrst winning condition of Gsound
(λ) is met. By
our conditions for event ∈ eventspass, we also know the second winning condition is met. Finally, because
eventi /∈ eventsMo (which is implied by E), it must also be the case that eventi /∈ eventsi, so we get that
Pr[Epreﬁx ∧ Ei-preﬁx] ≤ Advsound
dlc,B3
B3
(λ).
What we have now shown is that
E = ¬Epreﬁx ∨ (Epreﬁx ∧ ¬Ei-preﬁx) ∨ (Epreﬁx ∧ Ei-preﬁx),
and that
Pr[¬Epreﬁx] ≤ Advp-cons
dlc,B1
Pr[Epreﬁx ∧ ¬Ei-preﬁx] ≤ nX
(λ)
Advappend
dlc,B2,k
(λ)
Pr[Epreﬁx ∧ Ei-preﬁx] ≤ Advsound
dlc,B3
k=i
(λ)
Putting everything together, we get that
Pr[E] = Pr[¬Epreﬁx] + Pr[Epreﬁx ∧ ¬Ei-preﬁx] + Pr[Epreﬁx ∧ Ei-preﬁx]
≤ Advp-cons
dlc,B1
(λ) +
Advappend
dlc,B2,i
(λ) + Advsound
dlc,B3
(λ),
nX
i=1
26
which establishes the equation.
Non-frameability. We break the Msg oracle in Deﬁnition 4.2 down into four oracles: one for the execution
of the log server during the Log protocol (lines 1-6 in Figure 2), two for its executions during the CheckEntry
protocol (lines 5-6 and 12-14 of Figure 3 respectively), and one for its execution during the Inspect protocol
(lines 1-4 of Figure 4). We also alter the protocols slightly to add sets Mrcpt and Msnap to keep track of,
respectively, the receipts formed in the Log protocol and the snapshots formed in UpdateLog (during the Log
protocol).
Deﬁne
Egd-snap-1 = (CheckSnap(snap) ∧ (snap[c], snap[t]) ∈ Msnap),
Egd-snap-2 analogously for snap2, and
Egd-rcpt = (CheckRcpt(event, rcpt) ∧ (event, rcpt[t]) ∈ Mrcpt)).
We then deﬁne the following four events:
E1 : Egd-snap-1 ∧ Egd-snap-2 ∧ (event, rcpt = ⊥) ∧ CheckInconsistent(c1, t1, c2, π)) ∧ (t1 ≤ t2)
E2 : ¬Egd-snap-1 ∨ ¬Egd-snap-2
E3 : ¬Egd-rcpt
E4 : Egd-snap-1 ∧ Egd-snap-2 ∧ Egd-rcpt ∧ CheckNotIncl(c2, event, π)) ∧ (rcpt[t] ≤ t2)
Now, let A be a PT adversary playing GframeA
(λ). We build adversaries Bi for all i, 1 ≤ i ≤ 4, such that
(λ)
Pr[E1] ≤ Advuf-cons
dlc,B1
Pr[E2] ≤ Adveuf-cma
sig,B2
Pr[E3] ≤ Adveuf-cma
sig,B3
Pr[E4] ≤ Advuf-incl
dlc,B4
(λ)
(λ)
(λ)
(3)
(4)
(5)
(6)
We then have that
Advframe
trans,A(λ) = Pr[GframeA
(λ)]
≤ 4X
Pr[Ei]
≤ Advuf-cons
dlc,B1
i=1
(λ) + Adveuf-cma
sig,B2
(λ) + Adveuf-cma
sig,B3
(λ) + Advuf-incl
dlc,B4
(λ),
from which the theorem follows.
Equation 3: faking a proof of inconsistency
B1 behaves as follows, using a map Q such that c (cid:55)→ events (and omitting the descriptions of all algorithms
in which B1 honestly follows the protocol speciﬁcation):
B1(1λ)
Q ← ∅; (pk LS, sk LS) r←− KeyGen(1λ)
(snap1, snap2, (event, rcpt), π) r←− AMsg(1λ, pk LS)
return (snap1[c], snap1[t], snap2[c], Q[c2], π)
CheckEntry[LS, 1, j](1λ, stateLS, m)
π ← ProveAppend(m[c], cLS, eventsLS)
Q[cLS] = eventsLS
return (stateLS, (snapLS, π), Auditor, ε)
Inspect[LS, 1, j](1λ, stateLS, m)
(cid:104)execute lines 2-3 of Figure 4(cid:105)
Q[cLS] = eventsLS
return (stateLS, (snap, events∆), Monitor, ε)
27
It is clear that the interaction with B1 is identical to the interaction that A expects, as B1 executes all
of the protocols honestly. Intuitively, B1 keeps track of the log list every time it returns a snapshot to the
adversary. Because (c2, t2) ∈ Msnap, c2 ∈ Q, so Q[c2] is well deﬁned. It also holds that isConsistent(c1, t, Q[c2])
(again, by the honest behavior of B1), so the second winning condition of Guf-cons
Furthermore, the honest behavior of B1 and the correctness of the DLC imply that c2 = Com(Q[c2]), so the
ﬁrst winning condition is met. Finally, because E1 holds, it is the case that CheckInconsistent(c1, t1, c2, π) = 1,
so the last winning condition is met as well and B1 wins whenever E1 holds.
(λ) is met.
B1
Equation 4: forging a snapshot
B2 behaves as follows (omitting the description of all algorithms, in which B2 honestly follows the protocol
speciﬁcation):
2
(1λ, pk )
BSign
Q ← ∅
(snap1, snap2, (event, rcpt), π) r←− AMsg(1λ, pk )
if (c1, t1) /∈ Q return ((c1, t1), σ1)
return ((c2, t2), σ2)
Log[LS, 1, j](1λ, stateLS, m)
(cid:104)execute lines 2-3 of Figure 2(cid:105)
rcpt ← (pk , t, Sign((t, event))) for all event ∈ m[events]
events(cid:48) ← log[events](cid:107)events
c(cid:48) ← Append(events, log[snap][c])
snap(cid:48) ← (c(cid:48), t, Sign((c(cid:48), t)))
Q ← Q ∪ {(c(cid:48), t)}
return (stateLS,
−−→
rcpt, Sys, ε)
It is clear that the interaction with B2 is identical to the interaction that A expects, as B2 executes all the
algorithms honestly and forms the signatures using its signing oracle. Equally, if E2 holds then it must be the
case that (c1, t1) /∈ Msnap or (c2, t2) /∈ Msnap (because the signature included in a receipt is on (t, event) rather
than (c, t), so will not pass the snapshot veriﬁcation), as if veriﬁcation does not pass then CheckEvidence out-
puts 0. If (c1, t1) /∈ Msnap then (c1, t1) was not queried to the Sign oracle, and analogously if (c2, t2) /∈ Msnap
then (c2, t2) was not queried to the Sign oracle. Thus, B2 succeeds whenever E2 holds.
Equation 5: forging a receipt
B3 behaves nearly identically to B2, with the following two diﬀerences: (1) it maintains a set Q for the mes-
sage/signature pairs related to receipt rather than to snapshots, and (2) at the end of the game, it outputs
((t, event), σ) (where these values are pulled from rcpt). Again, it clear that the interaction with B3 is iden-
tical to the one that A expects. Furthermore, if E3 holds then it must be the case that event /∈ Mrcpt, as if
rcpt[pk ] (cid:54)= pk then CheckEvidence outputs 0. If event /∈ Mrcpt then (rcpt[t], event) was not queried to the Sign
oracle, so B3 succeeds whenever E3 holds.
Equation 6: faking a proof of non-inclusion
Finally, B4 behaves as follows, using a map Q such that c (cid:55)→ events (and omitting the descriptions of Msg,
Log[LS, 1, j], CheckEntry[LS, 1, j], and Inspect[LS, 1, j], in which B4 honestly follows the protocol speciﬁca-
tion):
B4(1λ)
Q ← ∅; (pk LS, sk LS) r←− KeyGen(1λ)
(snap1, snap2, (event, rcpt), π) r←− AMsg(1λ, pk LS)
return (snap2[c], Q[c2], event, π)
CheckEntry[LS, 2, j](1λ, stateLS, m)
(event, snapAu) ← m
π(cid:48) ← ProveIncl(cAu, event, events)
Q[cLS] = events
return (stateLS, π(cid:48), Auditor, ε)
28
It is clear that the interaction with B4 is identical to the interaction that A expects, as B4 executes all
If E4 holds, then it must be the case that CheckNotIncl(c2, event, π) = 1. Be-
the algorithms honestly.
cause (c2, t2) ∈ Msnap, c2 ∈ Q, so a similar argument to that in the proof of Equation 3 shows that
CheckCom(c2, Q[c2]) = 1. Furthermore, because B4 behaves honestly we know that Q[c2] is ordered and
that if Egd-event holds and if time(event) ≤ t2 then event ∈ events. Thus B4 wins whenever E4 occurs.
Accountability. Let A be an adversary playing GtraceA (λ). We build an adversary B such that
Advtrace
trans,A(λ) ≤ Advp-cons
dlc,B (λ),
from which the theorem follows.
To establish this, suppose there exists an event event ∈ (eventspledged∩eventsfail)\eventsMo. By the deﬁnition
of the honest auditor and monitor, they output valid evidence evidence = (sthAu, sthMo, (event, rcpt), π =
DemoNotIncl(cMo, certsMo, event)) only if CheckNotIncl(cMo, event, π) = 1.
Thus, if CheckEvidence(pk LS, evidence) = 0, it must be the case that
CheckNotIncl(cMo, event, DemoNotIncl(certsMo, event)) = 0,
in which case we can construct an adversary B against the provable non-inclusion of the DLC as follows (we
omit the descriptions of the oracles, in which B executes the honest algorithm):
B(1λ)
events ← ∅; a ← ∅
r←− AMsg(1λ)
pk LS
ﬁnd event ∈ (eventspledged ∩ eventsfail)
return (stateMo[events], event)
By the honest behavior of the monitor, isOrdered(certsMo) = 1, so the ﬁnal winning condition of Gp-cons
(λ)
is satisﬁed, and by assumption so is the ﬁrst winning condition. It therefore remains to show that event /∈
eventsMo; this, however, follows by assumption as well. Thus, B succeeds whenever A does.
B
29