使用这种直接方法。如果要传递方法，就必须把方法的细节封装在一种新的对象类型中，
即委托。委托只是一种特殊类型的对象，其特殊之处在于，我们以前定义的所有对象都包
含数据，而委托包含的只是一个或多个方法的地址。
9.2.1 声明委托
在C#中使用一个类时，分两个阶段操作。首先，需要定义这个类，即告诉编译器这
个类由什么字段和方法组成。然后（除非只使用静态方法），实例化该类的一个对象。使
用委托时，也需要经过这两个步骤。首先必须定义要使用的委托，对于委托，定义它就是
告诉编译器这种类型的委托表示哪种类型的方法。然后，必须创建该委托的一个或多个实
例。编译器在后台将创建表示该委托的一个类。声明委托的语法如下：
    delegate void IntMethodInvoker(int x);
在这个示例中，声明了一个委托IntMethodInvoker，并指定该委托的每个实例都可以
包含一个方法的引用，该方法带有一个int参数，并返回void。理解委托的一个要点是它们
的类型安全性非常高。在定义委托时，必须给出它所表示的方法的签名和返回类型等全部
细节。
  注意： 理解委托的一种好方式是把委托视为给方法的签名和返回类型指定名
称。
假定要定义一个委托TwoLongsOp，该委托表示的方法有两个long型参数，返回类型
为double。可以编写如下代码：
    delegate double TwoLongsOp(long first, long second);
或者要定义一个委托，它表示的方法不带参数，返回一个string型的值，可以编写如
下代码：
    delegate string GetAString();
其语法类似于方法的定义，但没有方法主体，且定义的前面要加上关键字delegate。
因为定义委托基本上是定义一个新类，所以可以在定义类的任何相同地方定义委托。也就
是说，可以在另一个类的内部定义委托，也可以在任何类的外部定义，还可以在名称空间
中把委托定义为顶层对象。根据定义的可见性和委托的作用域，可以在委托的定义上应用
任意常见的访问修饰符：public、private、protected等：
    public delegate string GetAString();
  注意： 实际上，“定义一个委托”是指“定义一个新类”。委托实现为派生自基
类System. 
MulticastDelegate的类，System.MulticastDelegate又派生自基类
System.Delegate。C#编译器能识别这个类，会使用其委托语法，因此我们不需要了解
这个类的具体执行情况。这是C#与基类共同合作以使编程更易完成的另一个范例。
定义好委托后，就可以创建它的一个实例，从而用该实例存储特定方法的细节。
  注意： 但是，此处在术语方面有一个问题。类有两个不同的术语：“类”表示
较广义的定义，“对象”表示类的实例。但委托只有一个术语。在创建委托的实例时，所
创建的委托的实例仍称为委托。必须从上下文中确定所使用委托的确切含义。
9.2.2 使用委托
下面的代码段说明了如何使用委托。这是在int值上调用ToString（）方法的一种相当
冗长的方式（代码文件GetAStringDemo/Program.cs）：
    private delegate string GetAString();
    public static void Main()
    {
      int x = 40;
      GetAString firstStringMethod = new GetAString(x.ToString);
      WriteLine($"String is {firstStringMethod()}");
      // With firstStringMethod initialized to x.ToString(),
      // the above statement is equivalent to saying
      // Console.WriteLine($"String is {x.ToString()}");
    }
在这段代码中，实例化类型为GetAString的委托，并对它进行初始化，使其引用整型
变量x的ToString（）方法。在C#中，委托在语法上总是接受一个参数的构造函数，这个
参数就是委托引用的方法。这个方法必须匹配最初定义委托时的签名。所以在这个示例
中，如果用不带参数并返回一个字符串的方法来初始化firstStringMethod变量，就会产生
一个编译错误。注意，因为int.ToString（）是一个实例方法（不是静态方法），所以需要
指定实例（x）和方法名来正确地初始化委托。
下一行代码使用这个委托来显示字符串。在任何代码中，都应提供委托实例的名称，
后面的圆括号中应包含调用该委托中的方法时使用的任何等效参数。所以在上面的代码
中，Console.WriteLine（）语句完全等价于注释掉的代码行。
实际上，给委托实例提供圆括号与调用委托类的Invoke（）方法完全相同。因为
firstStringMethod是委托类型的一个变量，所以C#编译器会用firstStringMethod.Invoke（）
代替firstStringMethod（）。
    firstStringMethod();
    firstStringMethod.Invoke();
为了减少输入量，在需要委托实例的每个位置可以只传送地址的名称。这称为委托推
断。只要编译器可以把委托实例解析为特定的类型，这个C#特性就是有效的。下面的示
例用GetAString委托的一个新实例初始化GetAString类型的firstStringMethod变量：
    GetAString firstStringMethod = new GetAString(x.ToString);
只要用变量x把方法名传送给变量firstStringMethod，就可以编写出作用相同的代码：
    GetAString firstStringMethod = x.ToString;
C#编译器创建的代码是一样的。由于编译器会用firstStringMethod检测需要的委托类
型，因此它创建GetAString委托类型的一个实例，用对象x把方法的地址传送给构造函
数。
  注意： 调用上述方法名时，输入形式不能为x.ToString（）（不要输入圆括
号），也不能把它传送给委托变量。输入圆括号会调用一个方法，而调用
x.ToString（）方法会返回一个不能赋予委托变量的字符串对象。只能把方法的地址赋
予委托变量。
委托推断可以在需要委托实例的任何地方使用。委托推断也可以用于事件，因为事件
基于委托（参见本章后面的内容）。
委托的一个特征是它们的类型是安全的，可以确保被调用的方法的签名是正确的。但
有趣的是，它们不关心在什么类型的对象上调用该方法，甚至不考虑该方法是静态方法还
是实例方法。
  注意： 给定委托的实例可以引用任何类型的任何对象上的实例方法或静态方
法——只要方法的签名匹配委托的签名即可。
为了说明这一点，扩展上面的代码段，让它使用firstStringMethod委托在另一个对象
上调用其他两个方法，其中一个是实例方法，另一个是静态方法。为此，使用本章前面定
义的Currency结构。Currency结构有自己的ToString（）重载方法和一个与
GetCurrencyUnit（）签名相同的静态方法。这样，就可以用同一个委托变量调用这些方法
了（代码文件GetAStringDemo/Currency.cs）：
    struct Currency
    {
      public uint Dollars;
      public ushort Cents;
      public Currency(uint dollars, ushort cents)
      {
        this.Dollars = dollars;
        this.Cents = cents;
      }
      public override string ToString() => $"${Dollars}.{Cents,2:00}";
      public static string GetCurrencyUnit() => "Dollar";
      public static explicit operator Currency (float value)
      {
        checked
        {
        uint dollars = (uint)value;
        ushort cents = (ushort)((value-dollars) ＊ 100);
        return new Currency(dollars, cents);
        }
      }
      public static implicit operator float (Currency value) =>
        value.Dollars + (value.Cents / 100.0f);
      public static implicit operator Currency (uint value) =>
        new Currency(value, 0);
      public static implicit operator uint (Currency value) =>
        value.Dollars;
    }
下面就可以使用GetAString实例，代码如下所示（代码文件
GetAStringDemo/Program.cs）：
    private delegate string GetAString();
    public static void Main()
    {
      int x = 40;
      GetAString firstStringMethod = x.ToString;
      WriteLine($"String is {firstStringMethod()}");
      var balance = new Currency(34, 50);
      // firstStringMethod references an instance method
      firstStringMethod = balance.ToString;
      WriteLine($"String is {firstStringMethod()}");
      // firstStringMethod references a static method
      firstStringMethod = new GetAString(Currency.GetCurrencyUnit);
      WriteLine($"String is {firstStringMethod()}");
    }
这段代码说明了如何通过委托来调用方法，然后重新给委托指定在类的不同实例上引
用的不同方法，甚至可以指定静态方法，或者指定在类的不同类型实例上引用的方法，只
要每个方法的签名匹配委托定义即可。
运行此应用程序，会得到委托引用的不同方法的输出结果：
    String is 40
    String is $34.50
    String is Dollar
但是，我们实际上还没有说明把一个委托传递给另一个方法的具体过程，也没有得到
任何特别有用的结果。调用int和Currency对象的ToString（）方法要比使用委托直观得
多！但是，需要用一个相当复杂的示例来说明委托的本质，才能真正领会到委托的用处。
下一节会给出两个委托的示例。第一个示例仅使用委托来调用两个不同的操作。它说明了
如何把委托传递给方法，如何使用委托数组，但这仍没有很好地说明：没有委托，就不能
完成很多工作。第二个示例就复杂得多了，它有一个类BubbleSorter，该类实现一个方法
来按照升序排列一个对象数组。没有委托，就很难编写出这个类。
9.2.3 简单的委托示例
在这个示例中，定义一个类MathOperations，它有两个静态方法，对double类型的值
执行两种操作。然后使用该委托调用这些方法。MathOperations类如下所示：
    class MathOperations
    {
      public static double MultiplyByTwo(double value) => value ＊ 2;
      public static double Square(double value) => value ＊ value;
    }
下面调用这些方法（代码文件SimpleDelegate/Program.cs）：
    using static System.Console;
    namespace Wrox.ProCSharp.Delegates
    {
      delegate double DoubleOp(double x);
      class Program
      {
        static void Main()
        {
          DoubleOp[] operations =
          {
          MathOperations.MultiplyByTwo,
          MathOperations.Square
          };
          for (int i=0; i 和Func委托
除了为每个参数和返回类型定义一个新委托类型之外，还可以使用Action和
Func委托。泛型Action委托表示引用一个void返回类型的方法。这个委托类存在不
同的变体，可以传递至多16种不同的参数类型。没有泛型参数的Action类可调用没有参数
的方法。Action调用带一个参数的方法，Action调用带两个参数的方
法，Action调用带8个参数的方法。
Func委托可以以类似的方式使用。Func允许调用带返回类型的方法。与
Action类似，Func也定义了不同的变体，至多也可以传递16个参数类型和一个返
回类型。Func委托类型可以调用带返回类型且无参数的方法，Func调用带一个参数的方法，Func调用带4个参
数的方法。
9.2.3节中的示例声明了一个委托，其参数是double类型，返回类型是double：
    delegate double DoubleOp(double x);
除了声明自定义委托DoubleOp之外，还可以使用Func委托。可以
声明一个该委托类型的变量，或者声明该委托类型的数组，如下所示：
    [] operations =
    {
      MathOperations.MultiplyByTwo,
      MathOperations.Square
    };
使用该委托，并将ProcessAndDisplayNumber（）方法作为参数：
    static void ProcessAndDisplayNumber(Func action,
                                  double value)
    {
      double result = action(value);
      WriteLine($"Value is {value}, result of operation is {result}");
    }
9.2.5 BubbleSorter示例
下面的示例将说明委托的真正用途。我们要编写一个类BubbleSorter，它实现一个静
态方法Sort（），这个方法的第一个参数是一个对象数组，把该数组按照升序重新排列。
例如，假定传递给该委托的是int数组：{0, 5, 6, 2, 1}，则返回的结果应是{0, 1, 2, 5, 6}。
冒泡排序算法非常著名，是一种简单的数字排序方法。它适合于一小组数字，因为对
于大量的数字（超过10个），还有更高效的算法。冒泡排序算法重复遍历数组，比较每一
对数字，按照需要交换它们的位置，从而把最大的数字逐步移动到数组的末尾。对于给
int型数字排序，进行冒泡排序的方法如下所示：
    bool swapped = true;
    do
    {
      swapped = false;
      for (int i = 0; i  sortArray[i+1])) // problem with this test
      {
        int temp = sortArray[i];
        sortArray[i] = sortArray[i + 1];
        sortArray[i + 1] = temp;
        swapped = true;
        }
      }
    } while (swapped);
它非常适合于int型，但我们希望Sort（）方法能给任何对象排序。换言之，如果某段
客户端代码包含Currency结构或自定义的其他类和结构的数组，就需要对该数组排序。这
样，上面代码中的if（sortArray[i] （），需要一个比较方法，其两个参数的类型是T,
if比较的返回类型是布尔类型。这个方法可以从Func委托中引用，其中
T1和T2的类型相同：Func。
给Sort方法指定下述签名：
    static public void Sort(IList sortArray, Func comparison)
这个方法的文档声明，comparison必须引用一个方法，该方法带有两个参数，如果第
一个参数的值“小于”第二个参数，就返回true。
设置完毕后，下面定义BubbleSorter类（代码文件BubbleSorter/BubbleSorter.cs）：
    class BubbleSorter
    {
      static public void Sort(IList sortArray, Func comparison)
      {
        bool swapped = true;
        do
        {
        swapped = false;
        for (int i = 0; i < sortArray.Count-1; i++)
        {
          if (comparison(sortArray[i+1], sortArray[i]))
          {