# 【技术分享】Linux堆溢出之Fastbin Attack实例详解
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
v
作者：[Elph](http://bobao.360.cn/member/contribute?uid=404360756)
预估稿费：400RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**1\. 摘要**
在近几年各大CTF比赛中，看到有很多次pwn类别题中出现 **fastbin攻击** 的情况，例如今年的defcon，RCTF，胖哈勃杯，0CTF
final等等 ，fastbin
attack是堆漏洞利用中十分常用、易用且有效的一种攻击方式，在网上的中文资料中，对其原理上进行讲述的文章有一些，但详细讲述如何实际利用的完整例子较少，本文将对该利用方式进行简要原理性阐述，并结合今年Defcon预选赛中的一个实例演示一下具体利用过程，以及一些需要注意的地方。
**2\. Linux 堆管理策略**
glibc中对堆的管理使用的是ptmalloc，这种方式以chunk为单位管理堆内存，在物理上使用隐式堆管理结构对堆块进行管理，在逻辑结构上采用显式的双向链表结构对已free的堆块进行管理。关于此部分内容如有不清晰之处推荐阅读《Linux堆内存管理深入分析（上/下）》，在此不再赘述。
本文的重点在于libc对fastbin的管理与操作，其策略具有以下几个特点：首先它并不采用双向链接，而采用单向链表结构，也即chunk结构中fd，bk两个指针只用到的fd指针；在进行堆分配时，采用FILO的顺序从fastbin链表中取下堆块，因此其unlink操作没有unsorted
bins那么复杂；如果malloc与free的size未超过某个阈值，则不会触发malloc_consolidate，即free后的fastbin堆块不与相邻堆块进行融合。
由于Linux为了效率而对fastbin管理的验证稍加放松，就导致它拥有一些相对简单的攻击方式。如果我们可以覆盖某个fastbin的堆头，将其fd指向任意地址，下次再申请两次，就可以将这个地址申请回来，这便是最基本的fastbin
attack。除此之外对于fastbin还存在double free，house of spirit等攻击方式。
**3\. Defcon Qualifier 之 Badint**
**3.1 简介**
此题是Defcon预选赛的一道pwn题，最后解出的队伍不算太多，算是比赛时一道分值比较高的题。前几天legitbs将Defcon预选赛的源码与二进制文件公开在了github上，需者可以自取[https://github.com/legitbs/quals-2017/tree/master/babyint](https://github.com/legitbs/quals-2017/tree/master/babyint)。
以下我们先从其功能开始分析、而后分析它的漏洞点、并一步一步拿到此服务的shell。
**3.2 程序功能逆向分析**
拿到二进制之后首先需要对其进行简单的功能性的分析。包括动态跑一下以及使用IDA静态分析弄清楚程序是干什么的。
此题程序功能可看成是模拟协议数据单元（PDU）的传输与重组，每轮循环需要我们输入seq_num , offset ,
pdu_data，这三者可组成一个segment，然后提示输入yes/no以选择是否进行segment的重组。示例输入与运行如下图：
对于data部分数据只能输入[a-fA-F0-9]，程序在接收到data之后，将它们保存在栈上的一段缓冲区上，然后对将其进行一处unhex操作，将我们输入的12345678变成0x12
0x34 0x56 0x78并保存在从堆上分配的内存中，因而在这个操作中从堆上分配的空间大小为我们输入的字符串长度的1/2。
对于相同seq_num的Data，该程序会将它们保存在一个segmentData结构体中，并通过一个双向链表将其链起来。在选择Assemble之后，按照输入的offset将每一个seg中的data使用memncpy进行组合，然后将之打印输出。
以上即为程序所大概实现的功能。当然现在逆向的过程可以结合上面链接中的github源代码进行分析，这样可相互印证。
**3.3 漏洞点**
本程序可以说一共有三个漏洞点。第一个是一个Memory Leak（不是info
leak）。通常做pwn题的时候我们需要关注程序明显不太正常的逻辑，因为这些有可能是出题人觉得不好做特意提供便利的地方或是设置漏洞的地方。
在程序将输入的data
unhex之后，先将其保存到了堆上size为len/2大小的堆块上，而在创建segment的时候，又将此数据重新使用memncpy拷贝到了另一个新malloc出来的堆块之中。在选择重组该sequence之时，并未对新malloc的这块地址进行free，导致留下一个memory
Leak，因而在多进行几个之后，堆块上将留下很多坑。而实际上并没有必要进行第二次malloc操作，这部分是完全多余的。
实际上这是为了方便fastbin在free之后不与top chunk融合而故意设置的，当然该操作也增加了堆布局的复杂度。
第二个漏洞发生在重组之时，对于seq_num相同的segments，程序会通过遍历将它们的data_ptr进行一一取出，并按照offset的值进行组合。在这个过程中程序未对offset的合法性进行校验,如下图：
以我们刚才的输入为例，假如在第二次输入deadbeaf之时，将offset设为了8，或者更大的数值，就会造成越界写，将后面的内容覆盖掉。在我们完全掌握了堆的分配之后，便可以指定算好的offset，利用这个漏洞向指定的堆块写入想要写入的值了。
第三个漏洞点同样在这段代码中，程序没有对这块存放重组后数据的堆块进行初始化，而后面会将这段缓冲区的内容经过printf输出出来，如果其中有些敏感数据，就可以被用来做信息泄露。后文的漏洞利用过程中也正用到了这个漏洞点。
**3.4 程序的堆操作**
以输入seq_num=0, Offset=0, Data=deadbeaf为例，堆的malloc与free操作应当如下：
1\. data1 = malloc(4)# len("deadbeaf")=8, 在unhex函数中为data1分配内存
2\. segment_ptr = malloc(0x28) # 创建segment结构体
3\. data2 = malloc(4+1)#
为data2分配内存，然后将data1使用memcpy拷贝过去，再在segment结构体中保存data2的位置
4\. free(data1)
5\. total_data = malloc(4) # 确认重组，为总的数据分配足够容纳所有data的堆块，在这个例子中就是4
6\. free(segment_ptr)
7\. free(total_data)