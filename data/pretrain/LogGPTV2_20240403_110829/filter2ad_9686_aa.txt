作者: **启明星辰ADLab**
#### 1、概述
随着移动互联网的快速普及，移动支付在人们生活中扮演的角色越来越重要。从支付宝、微信、各类支付钱包以及各大银行的支付应用都在挖空心思抢占用户移动支付入口就可见一斑。特别是近两年，零现金支付在很多用户身上尤其是年轻用户身上早已成为现实，这极大的丰富和方便了人们的生活。然而，随着移动支付的不断普及和涉及的金钱数额越来越大，移动支付这块肥肉也吸引了越来越多的攻击者。
近日，启明星辰ADLab就发现了一款银行类 Android APP 钓鱼木马。经过我们对该钓鱼木马的深入分析发现，与大部分采用 java
层代码加密和方法混淆技术的 Android 恶意代码不同的是，该 Android
银行钓鱼木马采用了类似于加固(加壳)保护的技术，将真正的恶意实体进行加密并隐藏起来，在恶意软件运行时通过 SO
动态解密并加载以执行真实的恶意软件实体。这样不仅可以绕过杀毒软件的查杀，还增加了安全研究人员的逆向分析难度。此外，该钓鱼木马不仅通过伪造银行图标和登录界面来实施钓鱼攻击，它还会在后台实时监视感染系统中的活动界面，一旦发现用户启动合法的银行
APP，便对其进行劫持并替换成自己伪造的银行登录页面。该钓鱼木马的劫持目标为招商银行、交通银行和中国邮政储蓄银行，当用户在伪造的界面上输入银行账号密码等登录信息后便会被上传到黑客预先配置好的
C&C
服务器上，同时银行钓鱼木马会弹出输入错误等信息来迷惑用户。此时，拥有受害者银行登录账号密码的黑客就可以利用该银行钓鱼木马的短信劫持功能来获取验证码，登录到受害者银行账户进行恶意转账或者透支信用卡等等操作（示意图如下）。本文后续将对该银行钓鱼木马进行深入的剖析，并对黑客身份信息进行追踪分析。
#### 2、银行类钓鱼木马行为简介
该银行类钓鱼木马的劫持目标为招商银行、交通银行和中国邮政储蓄银行，并且采用了类似于加固（加壳）的技术。（“壳”指的是一个程序外面再包裹上另外一段代码，目的是保护里面的代码不被非法的修改或者反编译。被加壳程序执行的时候,首先得到执行的是壳的代码，然后由壳代码来实现被保护实体的解密和加载执行。）该钓鱼木马运行后，先执行壳的代码，在壳的
SO 代码中解密被保护的恶意实体 jar 文件，再通过自定义的 DexClassLoader 动态加载解释执行该恶意实体。
恶意实体首先利用注册短信广播接收器的方式来接收短信控制指令。在完成伪装和自我保护之后，恶意实体会实时监视感染系统中的活动界面，一旦发现用户启动合法的银行
APP，便对其进行劫持并替换成自己伪造的银行登录页面。用户很难发现新的窗口被打开了，当用户在伪造的界面上输入银行账号密码等登录信息后便会被上传到黑客预先配置好的
C&C
服务器上，同时银行钓鱼木马会弹出输入错误等信息来迷惑用户。此时，拥有受害者银行登录账号密码的黑客可利用该银行钓鱼木马的短信劫持功能来获取验证码登录到受害者银行账户以进行恶意转账或者透支信用卡等等操作。
然后，恶意实体通过拦截系统默认的短信应用，拿到对系统短信数据库的读写权限。更通过使用观察者模式，实时监视用户短信，以实现对用户的持续侵害。当攻击者发起一笔交易，银行的验证码和消费回执信息就会被拦截，窃取后再行删除。这样等于破解了银行的双重验证机制，并在用户没有丝毫察觉的情况下完成交易，对用户的财产安全构成严重威胁。该钓鱼木马运行流程图如下：
#### 3、脱壳解密分析
为了使得壳程序先行执行，该银行类钓鱼木马自定义了 MyApplication 类继承自 Application 类（Application
是Android程序的入口，Application 和 Activity、Service 一样是 Android 框架的一个系统组件。当 Android
程序启动时，系统会创建一个 Application 对象且仅创建一个，用来存储系统的一些信息。通常我们是不需要指定一个 Application
的，系统会自动帮我们创建。如果需要创建自己的 Application ，需要创建一个类继承 Application 并在 manifest 的
application 标签中进行注册，给 application 标签增加一个 name 属性，把自己的 application
的名字指定给它即可。application 对象的生命周期是整个程序中最长的，它的生命周期就等于这个应用程序的生命周期。因为它是全局的单例的，所以在不同的
Activity、Service 中获得的对象都是同一个对象。可以通过 Application 来进行一些数据传递、数据共享和数据缓存等操作。）并在
mainifest 中的  标签中进行了注册，见下图：
我们从上图可以看到 MyApplication 类加载了 native 库 libload.so，并在 attachBaseContext 方法中调用了
native 函数 run。解密真实恶意实体的处理流程即在run函数中进行。 钓鱼木马运行后，在 `data/data/t8/ool/lib`
目录下有3个SO文件，其中 libload.so 负责解密和加载真实的恶意实体。
libload.so 首先利用反射机制调用 javax.crypto 包中的加解密函数对 asset 目录下的加密文件 mycode.so 进行 AES
解密操作。解密后的文件保存在 `data/data/t8/ool/app_cathe` 目录下并被命名为 mycode.jar 。再利用自定义的
DexClassLoader 加载解释执行 mycode.jar ，最后删除之。我们通过动态调试 libload.so ，在 libload.so 删除
mycode.jar 之前拿到解密文件，最后修复、重新打包、安装分析。相关细节如下。
Base64解密AES key：`xo3Kiw9jekmadw/SUtJwiA==`
初始化cipher：
解密逻辑（执行到断点处，解密完成）：
此时，在`data/data/t8/ool/app_cathe`目录下生成了解密文件 mycode.jar，见下图：
我们将 mycode.jar 复制到pc端，用 winrar 打开，里面的 classes.dex
即为该钓鱼木马的真实恶意实体（如下图所示），接下来我们就对该 dex 文件进行深入的分析。
#### 4、真实攻击逻辑分析
该钓鱼木马申请的权限如下图所示，其中，涉及到的敏感权限包括短信的读写权限、打电话权限、读取或写入系统设置权限、自启动权限和获取最近运行应用权限等。
###### 4.1、注册广播接收器，接收控制指令
该钓鱼木马注册了短信广播接收器，用来接收控制指令。当短信内容是`000#`，设置配置文件`inter`的值为1，截断广播；当短信内容是`0#`，设置配置文件`inter`的值为0，截断广播；当短信内容是`555#`，收集用户本机所有短信，企图邮件回传，截断广播。并且，如果短信内容为控制命令`000#`，就以
json 格式 post 用户手机 sim 卡序列号、手机号码、短信内容，发送者、发送时间到 C&C
服务器：http://103.55.26.147/servlet/SendMassage2 , 如下图。
###### 4.2、创建配置文件，完善配置信息
接下来，钓鱼木马开始初始化本地 SharedPreferences 对象，用于保存配置信息。其中包括攻击者邮箱地址、邮箱密码、C&C 服务器、钓鱼 APP
首页地址、攻击者手机号码、钓鱼木马运行时间等重要信息。
钓鱼木马运行后，我们在本地打开 mybank.xml 文件。
我们提取出比较重要的攻击者配置信息，见下表。
###### 4.3、启动钓鱼服务
**4.3.1、提示肉鸡上线**  
接着，钓鱼木马会收集用户sim卡序列号、手机号码、手机型号、系统版本、手机运营商等信息，以 json 格式 post 到 C&C
服务器：http://103.55.26.147/servlet/OnLine ，用于提示肉鸡上线。
**4.3.2、伪装和自我保护**  
钓鱼木马还会启动设备管理器，引导用户激活自己为设备管理器，伪装成系统应用避免被轻易卸载。并且后台每隔10s检测用户手机是否是感染设备，如果是，就不断提示用户激活。