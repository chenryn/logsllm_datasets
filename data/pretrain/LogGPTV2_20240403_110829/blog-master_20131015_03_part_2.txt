      spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)  
    }  
    if (c == "W") {  
      var4 = @count(io_stat4[c,d])  // 请求次数  
      var5 = @sum(io_stat4[c,d]) / 1024  // 请求K字节数  
      var6 = @sum(io_stat44[c,d])  // 请求时间  
      spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0)  // 请求次数每秒  
      spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)  
    }  
  }  
// 结束后清除所有的全局变量的值.  
  delete io_stat1  
  delete io_stat11  
  delete io_stat2  
  delete io_stat22  
  delete io_stat3  
  delete io_stat33  
  delete io_stat4  
  delete io_stat44  
  delete del  
}  
catch(msg) {  
  printdln("---", pn(), msg)  
}  
}  
跟踪举例 :   
[root@db-172-16-3-150 ~]# /opt/systemtap/bin/stap test.stp   
SQL :   
digoal=# drop table t;  
DROP TABLE  
digoal=# create table t(id int, info text, crt_time timestamp);  
CREATE TABLE  
digoal=# insert into t select generate_series(1,1000000), md5(random()::text), clock_timestamp();  
INSERT 0 1000000  
digoal=# create index idx_t_1 on t(id);  
CREATE INDEX  
digoal=# explain (analyze,verbose,costs,buffers,timing) select count(*) from t;  
                                                        QUERY PLAN                                                          
--------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=21846.00..21846.01 rows=1 width=0) (actual time=467.932..467.932 rows=1 loops=1)  
   Output: count(*)  
   Buffers: shared hit=9346  
   ->  Seq Scan on public.t  (cost=0.00..19346.00 rows=1000000 width=0) (actual time=0.011..253.487 rows=1000000 loops=1)  
         Output: id, info, crt_time  
         Buffers: shared hit=9346  
 Total runtime: 467.978 ms  
(7 rows)  
digoal=# explain (analyze,verbose,costs,buffers,timing) select count(*) from t where id  Index Only Scan using idx_t_1 on public.t  (cost=0.42..16094.75 rows=333333 width=0) (actual time=0.146..6.010 rows=9999 loop  
s=1)  
         Output: id  
         Index Cond: (t.id   Function Scan on pg_catalog.generate_series  (cost=0.00..10.00 rows=1000 width=0) (actual time=320.753..684.423 rows=1000000   
loops=1)  
         Output: generate_series  
         Function Call: generate_series(1, 1000000)  
         Buffers: temp read=1710 written=1709  
 Total runtime: 925.695 ms  
(8 rows)  
输出, 包含IO请求的设备名, 如果数据在shared buffer中命中的话, 就没有os cache的io请求操作也没有块设备额的io请求操作 :   
query: drop table t;  
非cache输出  
cache输出  
query: create table t(id int, info text, crt_time timestamp);  
非cache输出  
cache输出  
query: insert into t select generate_series(1,1000000), md5(random()::text), clock_timestamp();  
非cache输出  
-R-devname:sdc1, reqs:4, reqKbytes:32, reqs/s:76923, reqKbytes/s:615384  
-W-devname:sdc1, reqs:4, reqKbytes:32, reqs/s:37735, reqKbytes/s:301886  
cache输出  
query: create index idx_t_1 on t(id);  
非cache输出  
-R-devname:sdc1, reqs:2, reqKbytes:16, reqs/s:105263, reqKbytes/s:842105  
-W-devname:sdc1, reqs:2, reqKbytes:16, reqs/s:51282, reqKbytes/s:410256  
cache输出  
query: explain (analyze,verbose,costs,buffers,timing) select count(*) from t;  
非cache输出  
-R-devname:sdc1, reqs:3, reqKbytes:24, reqs/s:90909, reqKbytes/s:727272  
-W-devname:sdc1, reqs:3, reqKbytes:24, reqs/s:46153, reqKbytes/s:369230  
cache输出  
query: explain (analyze,verbose,costs,buffers,timing) select count(*) from t where id<10000;  
非cache输出  
-R-devname:sdc1, reqs:32, reqKbytes:256, reqs/s:101265, reqKbytes/s:810126  
-W-devname:sdc1, reqs:32, reqKbytes:256, reqs/s:64128, reqKbytes/s:513026  
cache输出  
query: explain (analyze,verbose,costs,buffers,timing) select count(*) from generate_series(1,1000000);  
非cache输出  
-R-devname:sdc1, reqs:1711, reqKbytes:13687, reqs/s:104969, reqKbytes/s:839693  
-W-devname:sdc1, reqs:1711, reqKbytes:13687, reqs/s:69103, reqKbytes/s:552786  
cache输出  
^C----------END----------  
非cache输出  
-R-devname:sdc1, reqs:1836, reqKbytes:14238, reqs/s:106477, reqKbytes/s:825726  
-W-devname:sdc1, reqs:1836, reqKbytes:14238, reqs/s:69445, reqKbytes/s:538543  
cache输出  
-W-devname:N/A, reqs:8, reqKbytes:0, reqs/s:5242, reqKbytes/s:0  
-R-devname:N/A, reqs:7, reqKbytes:0, reqs/s:20771, reqKbytes/s:0  
```  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/1638770402013915115254543/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")