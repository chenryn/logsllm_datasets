the service was temporarily unavailable; try again later.
for nss backends in glibc this indicates a temporary error talking to the backend.
the error may correct itself, retrying later is suggested.
.tp
.b eintr
a signal was caught; see
.br signal (7).
.tp
.b eio
i/o error.
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached.
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.\" not in posix
.b enoent
a necessary input file cannot be found.
for nss backends in glibc this indicates the backend is not correctly configured.
.tp
.b enomem
.\" not in posix
insufficient memory to allocate
.i group
structure.
.tp
.b erange
insufficient buffer space supplied.
.sh files
.tp
.i /etc/group
local group database file
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br getgrent ()
t}	thread safety	t{
mt-unsafe race:grent
race:grentbuf locale
t}
t{
.br setgrent (),
.br endgrent ()
t}	thread safety	t{
mt-unsafe race:grent locale
t}
.te
.hy
.ad
.sp 1
.pp
in the above table,
.i grent
in
.i race:grent
signifies that if any of the functions
.br setgrent (),
.br getgrent (),
or
.br endgrent ()
are used in parallel in different threads of a program,
then data races could occur.
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
.sh see also
.br fgetgrent (3),
.br getgrent_r (3),
.br getgrgid (3),
.br getgrnam (3),
.br getgrouplist (3),
.br putgrent (3),
.br group (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2001 andries brouwer (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th getcontext 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
getcontext, setcontext \- get or set the user context
.sh synopsis
.nf
.b #include 
.pp
.bi "int getcontext(ucontext_t *" ucp );
.bi "int setcontext(const ucontext_t *" ucp );
.fi
.sh description
in a system v-like environment, one has the two types
.i mcontext_t
and
.i ucontext_t
defined in
.i 
and the four functions
.br getcontext (),
.br setcontext (),
.br makecontext (3),
and
.br swapcontext (3)
that allow user-level context switching between multiple
threads of control within a process.
.pp
the
.i mcontext_t
type is machine-dependent and opaque.
the
.i ucontext_t
type is a structure that has at least
the following fields:
.pp
.in +4n
.ex
typedef struct ucontext_t {
    struct ucontext_t *uc_link;
    sigset_t          uc_sigmask;
    stack_t           uc_stack;
    mcontext_t        uc_mcontext;
    ...
} ucontext_t;
.ee
.in
.pp
with
.ir sigset_t
and
.i stack_t
defined in
.ir  .
here
.i uc_link
points to the context that will be resumed
when the current context terminates (in case the current context
was created using
.br makecontext (3)),
.i uc_sigmask
is the
set of signals blocked in this context (see
.br sigprocmask (2)),
.i uc_stack
is the stack used by this context (see
.br sigaltstack (2)),
and
.i uc_mcontext
is the
machine-specific representation of the saved context,
that includes the calling thread's machine registers.
.pp
the function
.br getcontext ()
initializes the structure
pointed to by
.i ucp
to the currently active context.
.pp
the function
.br setcontext ()
restores the user context
pointed to by
.ir ucp .
a successful call does not return.
the context should have been obtained by a call of
.br getcontext (),
or
.br makecontext (3),
or received as the third argument to a signal
handler (see the discussion of the
.br sa_siginfo
flag in
.br sigaction (2)).
.pp
if the context was obtained by a call of
.br getcontext (),
program execution continues as if this call just returned.
.pp
if the context was obtained by a call of
.br makecontext (3),
program execution continues by a call to the function
.i func
specified as the second argument of that call to
.br makecontext (3).
when the function
.i func
returns, we continue with the
.i uc_link
member of the structure
.i ucp
specified as the
first argument of that call to
.br makecontext (3).
when this member is null, the thread exits.
.pp
if the context was obtained by a call to a signal handler,
then old standard text says that "program execution continues with the
program instruction following the instruction interrupted
by the signal".
however, this sentence was removed in susv2,
and the present verdict is "the result is unspecified".
.sh return value
when successful,
.br getcontext ()
returns 0 and
.br setcontext ()
does not return.
on error, both return \-1 and set
.i errno
to indicate the error.
.sh errors
none defined.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br getcontext (),
.br setcontext ()
t}	thread safety	mt-safe race:ucp
.te
.hy
.ad
.sp 1
.sh conforming to
susv2, posix.1-2001.
posix.1-2008 removes the specification of
.br getcontext (),
citing portability issues, and
recommending that applications be rewritten to use posix threads instead.
.sh notes
the earliest incarnation of this mechanism was the
.br setjmp (3)/ longjmp (3)
mechanism.
since that does not define
the handling of the signal context, the next stage was the
.br sigsetjmp (3)/ siglongjmp (3)
pair.
the present mechanism gives much more control.
on the other hand,
there is no easy way to detect whether a return from
.br getcontext ()
is from the first call, or via a
.br setcontext ()
call.
the user has to invent their own bookkeeping device, and a register
variable won't do since registers are restored.
.pp
when a signal occurs, the current user context is saved and
a new context is created by the kernel for the signal handler.
do not leave the handler using
.br longjmp (3):
it is undefined what would happen with contexts.
use
.br siglongjmp (3)
or
.br setcontext ()
instead.
.sh see also
.br sigaction (2),
.br sigaltstack (2),
.br sigprocmask (2),
.br longjmp (3),
.br makecontext (3),
.br sigsetjmp (3),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getmntent.3
.\" copyright (c) 2012 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th malloc_usable_size 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
malloc_usable_size \- obtain size of block of memory allocated from heap
.sh synopsis
.nf
.b #include 
.pp
.bi "size_t malloc_usable_size(void *" ptr );
.fi
.sh description
the
.br malloc_usable_size ()
function returns the number of usable bytes in the block pointed to by
.ir ptr ,
a pointer to a block of memory allocated by
.br malloc (3)
or a related function.
.sh return value
.br malloc_usable_size ()
returns the number of usable bytes in
the block of allocated memory pointed to by
.ir ptr .
if
.i ptr
is null, 0 is returned.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br malloc_usable_size ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
this function is a gnu extension.
.sh notes
the value returned by
.br malloc_usable_size ()
may be greater than the requested size of the allocation because
of alignment and minimum size constraints.
although the excess bytes can be overwritten by the application
without ill effects,
this is not good programming practice:
the number of excess bytes in an allocation depends on
the underlying implementation.
.pp
the main use of this function is for debugging and introspection.
.sh see also
.br malloc (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man4/random.4
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\" and (c) copyright 2015 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified 1993-07-25 by rik faith (PI:EMAIL)
.\" modified 2004-10-31 by aeb
.\"
.th resolver 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
res_ninit, res_nclose, res_nquery, res_nsearch, res_nquerydomain, res_nmkquery, res_nsend,
res_init, res_query, res_search, res_querydomain, res_mkquery, res_send,
dn_comp, dn_expand \- resolver routines
.sh synopsis
.nf
.b #include 
.b #include 
.b #include 
.pp
.b struct __res_state;
.b typedef struct __res_state *res_state;
.pp
.bi "int res_ninit(res_state " statep );
.pp
.bi "void res_nclose(res_state " statep );
.pp
.bi "int res_nquery(res_state " statep ,
.bi "           const char *" dname ", int " class ", int " type ,
.bi "           unsigned char *" answer ", int " anslen );
.pp
.bi "int res_nsearch(res_state " statep ,
.bi "           const char *" dname ", int " class ", int " type ,
.bi "           unsigned char *" answer ", int " anslen );
.pp
.bi "int res_nquerydomain(res_state " statep ,
.bi "           const char *" name ", const char *" domain ,
.bi "           int " class ", int " type ", unsigned char *" answer ,
.bi "           int " anslen );
.pp
.bi "int res_nmkquery(res_state " statep ,
.bi "           int " op ", const char *" dname ", int " class ,
.bi "           int " type ", const unsigned char *" data ", int " datalen ,
.bi "           const unsigned char *" newrr ,
.bi "           unsigned char *" buf ", int " buflen );
.pp
.bi "int res_nsend(res_state " statep ,
.bi "           const unsigned char *" msg ", int " msglen ,
.bi "           unsigned char *" answer ", int " anslen );
.pp
.bi "int dn_comp(const char *" exp_dn ", unsigned char *" comp_dn ,
.bi "           int " length ", unsigned char **" dnptrs ,
.bi "           unsigned char **" lastdnptr );
.pp
.bi "int dn_expand(const unsigned char *" msg ,
.bi "           const unsigned char *" eomorig ,
.bi "           const unsigned char *" comp_dn ", char *" exp_dn ,
.bi "           int " length );
.fi
.\"
.ss deprecated
.nf
.b extern struct __res_state _res;
.pp
.b int res_init(void);
.pp
.bi "int res_query(const char *" dname ", int " class ", int " type ,
.bi "           unsigned char *" answer ", int " anslen );
.pp
.bi "int res_search(const char *" dname ", int " class ", int " type ,
.bi "           unsigned char *" answer ", int " anslen );
.pp
.bi "int res_querydomain(const char *" name ", const char *" domain ,
.bi "           int " class ", int " type ", unsigned char *" answer ,
.bi "           int " anslen );
.pp
.bi "int res_mkquery(int " op ", const char *" dname ", int " class ,
.bi "           int " type ", const unsigned char *" data ", int " datalen ,
.bi "           const unsigned char *" newrr ,
.bi "           unsigned char *" buf ", int " buflen );
.pp
.bi "int res_send(const unsigned char *" msg ", int " msglen ,
.bi "           unsigned char *" answer ", int " anslen );
.fi
.pp
link with \fi\-lresolv\fp.
.sh description
.b note:
this page is incomplete (various resolver functions provided by glibc
are not described) and likely out of date.
.pp
the functions described below make queries to and interpret
the responses from internet domain name servers.
.pp
the api consists of a set of more modern, reentrant functions
and an older set of nonreentrant functions that have been superseded.
the traditional resolver interfaces such as
.br res_init ()
and
.br res_query ()
use some static (global) state stored in the
.i _res
structure, rendering these functions non-thread-safe.
bind 8.2 introduced a set of new interfaces
.br res_ninit (),
.br res_nquery (),
and so on, which take a
.i res_state
as their first argument, so you can use a per-thread resolver state.
.pp
the
.br res_ninit ()
and
.br res_init ()
functions read the configuration files (see
.br resolv.conf (5))
to get the default domain name and name
server address(es).