p1 − p0
(11)
n
∑
For i ∈ {1,2, ...,n}, the probability pi∗ is constant and
pi j depends only on the set Tn. Based on the discussion
j=1, j(cid:54)=i
in Section 3.3, we considered using (1− fii) as an approxi-
pi j, as it is the
mate estimation of pi∗. However, for
reason for probability attenuation, the earlier the seed is dis-
covered, the more its reward probability attenuates. Hence,
the index of the seed was used to illustrate the probability
attenuation qualitatively. Following is the estimation method:
j=1, j(cid:54)=i
n
∑
PRi,n ≈ 1− fii√
i
(10)
According to Equation (10), our method prefers to select the
seeds with lower self-transition frequency and larger index.
However, the estimation method is only used to qualitatively
estimate the magnitude relationship of the reward probability
between the seeds. Thus, we could not calculate the minimum
energy of the selected seed. For this, an adaptive average-cost-
based power scheduling algorithm was proposed.
4.3 Adaptive Average-Cost-based
Schedule
Power
As the lowest energy to ﬁnd a new path can not be calcu-
lated, a scheduling algorithm was developed to approximate
it monotonically. Compared to AFL, which allocated redun-
dant and constant energy each time, our algorithm aims to be
economical and ﬂexible, particularly in the exploration stage.
This represents the average number of executions required for
discovering a new path when the CGF has executed e1 test
cases, which is the reciprocal of the slope of Line L3 in Fig.
5. Notice that, the average-cost decreases with an increase in
the executions. Therefore, the next point (e2, p1 + 1) is likely
to appear in Area S4 in Fig. 5. However, if the CGF generates
test cases less than C(p1,e1, p0) to ﬁnd a new path, the next
point will appear in Area S1 ∪ S2 ∪ S3, above Line L3.
It was expected that CGF could ﬁnd as many new paths
within the average-cost of energy as possible. Thus, we consid-
ered using the average-cost C as the basic line for allocating
energy, which is economical for the CGF, to design the AAPS
algorithm, as shown in Algorithm 2.
For the seed s, we allocate energy no more than average-
cost to s in the exploration stage. In addition, less energy allo-
cation was considered for the seeds exercising high-frequency
paths than those exercising low-frequency path, which is re-
alized by the function CalculateCoefﬁcient(). In detail, we
calculate the ratio r of the total number of test cases exercising
the same path with s (i.e., s.exec_num) and average_cost. For
the ratio r in (0,0.5], (0.5,1] and (1, +∞), we set the coefﬁ-
cient k as the empirical values: 1, 0.5 and 0.25, respectively,
allocated energy k×C corresponding to the reciprocal of the
slope of Line L3, L2 and L1 in Fig. 5.
Algorithm 2 The AAPS algorithm
Require: s, state, rate, average_cost
Energy = 0
if state == Exploration then
k = CalculateCoefﬁcient(s.exec_num, average_cost)
Energy = average_cost × k × rate
else if state == Exploitation then
if s.last_ f ound > 0 then
Energy = Min(s.last_energy, M) × rate
Energy = Min(s.last_energy × 2, M) × rate
else
else
end if
Energy = 1024 × rate
end if
Ensure: Energy
Figure 5: A relationship between the number of paths and the
number of total executions during the fuzzing process.
Furthermore, the regret concept in certain solutions of
the classic MAB problem were combined for establishing
USENIX Association
29th USENIX Security Symposium    2313
total executions111112233400total pathsa context-adaptive energy allocation mechanism [1]. This
mechanism aims to improve the coefﬁcient of energy utiliza-
tion. If more energy is allocated than the seed need to ﬁnd a
path, this mechanism reduces energy assigned the next time.
Moreover, the regret is calculated according to the energy
assigned to the seed and the energy it uses if it ﬁnds new
paths. Based on a previous assessment of energy allocations,
the coefﬁcient rate was updated to adjust the next allocation.
Particularly, to avoid wasting too much energy on a seed
in the exploitation stage, we set M as the upper bound for
one turn of energy allocation and assign the empirical value
16× average_cost to M.
5 Evaluation
5.1 Conﬁguration of Evaluation
Real-World Programs. We evaluated EcoFuzz as per 14 real-
world utility programs. These programs were selected from
those evaluated by other AFL-type tools [17,21]. All the eval-
uation was conducted without dictionaries. The conﬁguration
of all programs is listed in Table 1. For each case, we ran the
fuzzing with one seed provided by AFL.
Table 1: The conﬁguration of target programs
Subjects
Version
Format
nm -C @@
objdump -d @@
readelf -a @@
size @@
c++ﬁlt @@
djpeg @@
xmllint @@
gif2png @@
readpng @@
tcpdump -nr @@
infotocap @@
jhead @@
elf
elf
elf
elf
elf
jpeg
xml
gif
png
pcap
text
jpeg
png
tar
libjpeg-turbo-1.5.3
Binutils-2.32
Binutils-2.32
Binutils-2.32
Binutils-2.32
Binutils-2.32
libxml2-2.9.9
gif2png-2.5.13
libpng-1.6.37
tcpdump-4.9.2
ncurses-6.1
jhead-3.03
magick convert @@ /dev/null
bsdtar -xf @@ /dev/null
ImageMagick-7.0.8-65
libarchive-3.4.0
Baseline. We compared EcoFuzz against other six
AFL-type fuzzers, including AFL, FidgetyAFL, AFLFast,
AFLFast.new, FairFuzz and MOPT-AFL [6, 17, 21, 41].
We executed the AFLFast and AFLFast.new with the fast
model, which is the fastest schedule strategy of AFLFast [6],
and ran MOPT-AFL with the parameter “-L 30” to launch the
MOPT scheme.
Platform. We fuzzed each case for 24 hours (on a single
core) and repeated each experiment 5 times to reduce the
effects of randomness according to [16]. The experiments
were conducted on a 64-bit machine with 40 cores (2.8 GHz
Intel R Xeon R E5-2680 v2), 64GB of RAM, and Ubuntu
16.04 as server OS. The experiments ran for 490 CPU days.
5.2 Evaluation of Path Exploration and
Energy-Saving
Evaluation Metrics. We choose the total number of paths
discovered by different techniques, the total number of test
cases generated, and the average-cost as the measurements.
The reason is derived from the model design. The VAMAB
model aims to maximize the number of paths in the least
number of test cases generated. According to the deﬁnition
of average-cost, our scheduling algorithm uses the average-
cost as the basic line for allocating energy and measuring
the efﬁciency of each allocation. Thus, EcoFuzz intended to
achieve the same number of paths with other tools in the least
number of fuzz, namely, the least average-cost.
Path Coverage. For each subject and technique, Fig. 6
plots the average number of paths discovered throughout ﬁve
runs at each average number of executions point in 24 hours.
Fig. 6 shows that EcoFuzz outperforms other six AFL-type
fuzzers on most programs while achieving the upper bound
on the number of paths on nm, objdump, size , gif2png,
readpng, tcpdump, jhead, magick and bsdtar in the least
executions. The path coverage achieved by EcoFuzz on the
other ﬁve programs is approximately the same as that of Fid-
getyAFL or AFLFast.new, and is more than that of FairFuzz
and MOPT-AFL. Particularly, except readelf and djpeg,
EcoFuzz ﬁnds the most paths with the same executions than
other tools. More analysis is detailed in Appendix 8.1.
Average-Cost. As FidgetyAFL, AFLFast.new, and Fair-
Fuzz outperform the other three tools in path exploration, we
focused on comparing their efﬁciency with that of EcoFuzz.
Table 2 presents the number of total paths, total executions,
and the average-cost of these techniques on each subject.
From Table 2, EcoFuzz generates fewer test cases than
the other three state-of-the-art tools on eight subjects, and
ﬁnds more paths than others on nine programs. Moreover,
EcoFuzz’s average-cost is observed to be signiﬁcantly lower
than that of others on most programs. On size, djpeg and
gif2png, though FairFuzz has the lowest average-cost, the
number of paths it found is also the least. In contrast, EcoFuzz
ﬁnds more paths than others on size and gif2png, with a
lower average-cost than that of AFLFast.new and FidgetyAFL.
Particularly, on jhead, EcoFuzz attained more paths upper
bound than other techniques in the early stage with fewer
executions. Therefore, EcoFuzz outperforms other tools in
energy-saving. More analysis is detailed in Appendix 8.1.
Statistical Analysis. Following the guidance of [16], we
conducted statistical analyses to ensure that the evaluation
is comprehensive. We used p value and extremum to eval-
uate the performance of these tools. For p value, p1 repre-
sents the difference between the performances of EcoFuzz
and AFL. Further, p2, p3, p4, p5, and p6 denote the differ-
ences between the performances of EcoFuzz and FidgetyAFL,
AFLFast, AFLFast.new, FairFuzz, and MOPT-AFL, respec-
tively. The number of paths and average-cost were considered
for calculating the p value. All the results and more analysis
are shown in Table 6 and 7 in Appendix 8.1.
From these results, EcoFuzz and AFLFast.new outperform
the other ﬁve tools signiﬁcantly in the extremum of discov-
ered paths. On the path coverage, p1 is smaller than 10−4 in
2314    29th USENIX Security Symposium
USENIX Association
Subjects
nm
objdump
readelf
size
cxxﬁlt
djeg
xmllint
gif2png
readpng
tcpdump
infotocap
8,127 / 60.95M
7,241 / 62.45M
14,048 / 60.90M
3,601 / 85.31M
8,192 / 64.90M
3,706 / 50.29M
7,214 / 52.12M
4,226 / 112.38M
1,952 / 44.39M
4,975 / 80.34M
8,266 / 42.88M
7,186 / 65.03M
7,474 / 42.78M
13,063 / 51.73M
12,649 / 53.90M
3,352 / 87.12M
3,939 / 76.45M
7,715 / 72.37M
7,119 / 26.19M
3,587 / 57.77M
2,996 / 36.78M
6,269 / 55.69M
6,803 / 33.11M
4,004 / 107.46M
4,292 / 59.53M
1,884 / 61.36M
2,023 / 22.66M
10,432 / 93.37M 12,993 / 126.74M 11,489 / 137.89M 13,059 / 74.27M
5,840 / 12.36M
6,125 / 36.23M
594 / 164.86M
538 / 120.60M
5,483 / 5.97M
4,903 / 6.70M
6,685 / 54.84M
7,209 / 45.17M
3,890 / 51.42M
5,287 / 43.34M
8,813 / 47.47M
2,782 / 48.90M
5,054 / 67.59M
1,902 / 10.45M
5,322 / 43.21M
2,952 / 25.88M
1,753 / 35.48M
6,389 / 33.47M
539 / 32.16M
5,375 / 9.63M
7,143 / 51.15M
3,921 / 25.23M
506 / 49.69M
3,419 / 6.56M
3,981 / 39.55M
16,152
9,051
3,960
25,998
9,381
16,109
8,884
26,844
32,585
8,951
5,917
224,575
1,367
8,204
7,500
8,626
4,335
23,698
7,923
13,572
7,225
26,600
22,755
9,755
5,239
59,775
1,793
7,162
13,222
8,200
5,387
17,581
13,377
5,498