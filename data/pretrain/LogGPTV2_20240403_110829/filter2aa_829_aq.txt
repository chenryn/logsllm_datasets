### Evading Minifilters

Most strategies for evading an EDR’s minifilters rely on one of three techniques: unloading, prevention, or interference. Let's explore each technique with examples to demonstrate how they can be used to our advantage.

#### Unloading

The first technique is to completely unload the minifilter. This requires administrator access, specifically the `SeLoadDriverPrivilege` token privilege. Unloading the minifilter is the most reliable way to evade it, as a driver that is not loaded cannot capture events.

Unloading the minifilter can be as simple as using `fltmc.exe unload`, but if the vendor has taken steps to hide the presence of their minifilter, more complex custom tooling may be required. For example, let's target Sysmon, whose minifilter, `SysmonDrv`, is configured in the registry, as shown in Listing 6-9.

```powershell
PS > Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\SysmonDrv" | Select * -Exclude PS* | fl
Type  : 1
Start  : 0
ErrorControl : 1
ImagePath : SysmonDrv.sys
DisplayName : SysmonDrv
Description : System Monitor driver
PS > Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\SysmonDrv\Instances\Sysmon Instance\" | Select * -Exclude PS* | fl
Altitude : 385201
Flags : 0
```

By default, `SysmonDrv` has an altitude of 385201 and can be unloaded via `fltmc.exe unload SysmonDrv`, assuming the caller has the required privileges. This action generates a FilterManager event ID of 1, indicating that a filesystem filter was unloaded, and a Sysmon event ID of 255, indicating a driver communication failure. However, Sysmon will no longer receive events.

To complicate this process for attackers, the minifilter sometimes uses a random service name to conceal its presence. In the case of Sysmon, an administrator can implement this approach during installation by passing the `-d` flag to the installer and specifying a new name. This prevents an attacker from using the built-in `fltmc.exe` utility unless they can identify the service name.

However, an attacker can abuse another feature of production minifilters to locate the driver and unload it: their altitudes. Because Microsoft reserves specific altitudes for certain vendors, an attacker can learn these values and then use `fltlib!FilterFindNext()` to locate any driver with the altitude in question. While `fltmc.exe` cannot unload minifilters based on altitude, the attacker can resolve the driver's name in the registry or pass the minifilter's name to `fltlib!FilterUnload()` for custom tooling. This is how the `Shhmon` tool, which hunts and unloads `SysmonDrv`, works under the hood.

Defenders could further thwart attackers by modifying the minifilter's altitude. However, this is not recommended in production applications because another application might already be using the chosen value. EDR agents sometimes operate across millions of devices, increasing the risk of an altitude collision. To mitigate this risk, a vendor might compile a list of active minifilter allocations from Microsoft and choose one not already in use, although this strategy is not foolproof.

In the case of Sysmon, defenders could either patch the installer to set the altitude value in the registry to a different value upon installation or manually change the altitude after installation by directly modifying the registry value. Since Windows does not place any technical controls on altitudes, the engineer could move `SysmonDrv` to any altitude they wish. However, the altitude affects the minifilter's position in the stack, so choosing too low a value could have unintended implications for the efficacy of the tool.

Even with all these obfuscation methods, an attacker could still unload a minifilter. Starting in Windows 10, both the vendor and Microsoft must sign a production driver before it can be loaded onto the system. These signatures include information about the vendor, which can tip off an adversary to the presence of the target minifilter. The attacker could walk the registry or use `fltlib!FilterFindNext()` to enumerate minifilters, extract the path to the driver on disk, and parse the digital signatures of all enumerated files until they identify a file signed by an EDR. At that point, they can unload the minifilter using one of the previously covered methods.

While there are no particularly great ways to hide a minifilter on the system, these obfuscations can still be worthwhile. An attacker might lack the tooling or knowledge to counter the obfuscations, providing time for the EDR's sensors to detect their activity without interference.

#### Prevention

To prevent filesystem operations from ever passing through an EDR’s minifilter, attackers can register their own minifilter and use it to force the completion of I/O operations. As an example, let's register a malicious pre-operation callback for `IRP_MJ_WRITE` requests, as shown in Listing 6-10.

```c
PFLT_PRE_OPERATION_CALLBACK EvilPreWriteCallback;
FLT_PREOP_CALLBACK_STATUS EvilPreWriteCallback(
 [in, out] PFLT_CALLBACK_DATA Data,
 [in] PCFLT_RELATED_OBJECTS FltObjects,
 [out] PVOID *CompletionContext
)
{
}
```

When the filter manager invokes this callback routine, it must return an `FLT_PREOP_CALLBACK_STATUS` value. One of the possible values, `FLT_PREOP_COMPLETE`, tells the filter manager that the current minifilter is in the process of completing the request, so the request should not be passed to any minifilters below the current altitude. If a minifilter returns this value, it must set the `NTSTATUS` value in the `Status` member of the I/O status block to the operation’s final status. Antivirus engines commonly use this functionality to determine whether malicious content is being written to a file. If the scanner indicates to the minifilter that the content is malicious, the minifilter completes the request and returns a failure status, such as `STATUS_VIRUS_INFECTED`, to the caller.

Attackers can abuse this feature of minifilters to prevent the security agent from intercepting their filesystem operations. Using the earlier callback we registered, this would look something like what's shown in Listing 6-11.

```c
FLT_PREOP_CALLBACK_STATUS EvilPreWriteCallback(
 [in, out] PFLT_CALLBACK_DATA Data,
 [in] PCFLT_RELATED_OBJECTS FltObjects,
 [out] PVOID *CompletionContext
)
{
 --snip--
 if (IsThisMyEvilProcess(PsGetCurrentProcessId()))
 {
--snip--
    Data->IoStatus.Status = STATUS_SUCCESS;
    return FLT_PREOP_COMPLETE;
 }
   --snip--
}
```

The attacker first inserts their malicious minifilter at an altitude higher than the minifilter belonging to the EDR. Inside the malicious minifilter’s pre-operation callback, logic exists to complete the I/O requests coming from the adversary’s processes in user mode, preventing them from being passed down the stack to the EDR.

#### Interference

A final evasion technique, interference, is built around the fact that a minifilter can alter members of the `FLT_CALLBACK_DATA` structure passed to its callbacks on a request. An attacker can modify any members of this structure except the `RequestorMode` and `Thread` members. This includes the file pointer in the `FLT_IO_PARAMETER_BLOCK` structure’s `TargetFileObject` member. The only requirement of the malicious minifilter is that it calls `fltmgr!FltSetCallbackDataDirty()`, which indicates that the callback data structure has been modified when it is passing the request to minifilters lower in the stack.

An adversary can abuse this behavior to pass bogus data to the minifilter associated with an EDR by inserting itself anywhere above it in the stack, modifying the data tied to the request, and passing control back to the filter manager. A minifilter that receives the modified request may evaluate whether `FLTFL_CALLBACK_DATA_DIRTY` is present and act accordingly, but the data will still be modified.

### Conclusion

Minifilters are the de facto standard for monitoring filesystem activity on Windows, whether it be for NTFS, named pipes, or even mailslots. Their implementation is somewhat more complex than the drivers discussed earlier in this book, but the way they work is very similar; they sit inline of some system operation and receive data about the activity. Attackers can evade minifilters by abusing some logical issue in the sensor or even unloading the driver entirely, but most adversaries have adapted their tradecraft to drastically limit creating new artifacts on disk to reduce the chances of a minifilter picking up their activity.