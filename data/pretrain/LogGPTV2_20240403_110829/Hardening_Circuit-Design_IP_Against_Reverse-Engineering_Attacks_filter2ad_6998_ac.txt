output that is assigned to x. (In this case, the distribution
on output values is determined by A, and is not necessarily
uniform.)
We write AO1,O2,... to denote that algorithm A has oracle
access to the superscripted oracles. For randomized algorithms
X that may return a distinguished symbol ⊥, the support of
the algorithm Sup(X) is deﬁned only over non-⊥ outputs. An
adversary is a randomized algorithm.
Functions and their representations. When D,R are non-
empty sets, we write Func(D,R) for the set of all func-
tions F : D → R. We write Func(n, m) as shorthand for
functions with D = {0, 1}n and R = {0, 1}m. When m = 1,
Func(n, 1) is the set of all Boolean functions. We will use
three representations of functions in this work: circuits, chips
and lookup tables. While circuits and chips will be used to
describe the design phase of the IC supply chain and are
important to denote the type of access (oracle or unrestricted)
to a circuit that an adversary gets as part of the threat model,
lookup tables will be used primarily for functional analyses.
Formally, a circuit CF is a directed acyclic graph that
implements some mapping F ∈ Func(D,R). Access to
circuits will always be unrestricted. This captures a reality of
our setting, in which the foundry is handed a description of a
circuit to be fabricated. Once a circuit CF is fabricated, we will
refer to it as a chip and use the heavy typeface CF to make this
distinction clear. Crucially, access to CF is not unrestricted;
rather an adversary can only use CF to make oracle queries.
This syntactic choice is to make invasive attacks [40] on chips
(to leak secrets) out of scope as they are orthogonal to the
(algorithmic) development of design-hiding schemes — the
central primitive in our work.
The lookup-table representation of a function F with do-
main D and range R is a table TF = (cid:104)(X1, Y1), (X2, Y2), . . .(cid:105),
where Xi ∈ D and Yi = F (Xi).
In all representations of functions, when the underlying
mapping is implicit/understood, we will omit the subscript.
When F, G are two n-bit to m-bit functions, the ham-
ming distance between F and G is the number of inputs
Xi on which the value of the functions differ. We use
I(cid:54)=(F, G) to denote the set of such distinguishing inputs, i.e.,
I(cid:54)=(F, G) = I(cid:54)=(G, F ) = {x ∈ {0, 1}n | F (x) (cid:54)= G(x)}.
Formally, hd(F, G) = |I(cid:54)=(F, G)|. We write F ≡ G whenever
hd(F, G) = 0.
We will also ﬁnd it useful to deﬁne the hamming weight
of Boolean functions. When F ∈ Func(n, 1), the hamming
weight of F is deﬁned as the number of inputs that map to
one, i.e., hw(F ) = |{X ∈ {0, 1}n | F (X) = 1}|. Also, for
Boolean functions, we will use sets Xi(F ) = {X|F (X) = i},
where i = 0 or 1, to denote the set of inputs for which F map
to 1 or 0. Notice that these two sets fully deﬁne F as we can
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
1676
construct the truth table of F using X0(F ) and X1(F ).
of F as N∆(F ) = {H ∈ Func(n, m) | hd(F, H) = ∆}.
For any F ∈ Func(n, m), we deﬁne the ∆-neighborhood
IV. DH SCHEMES
We begin by deﬁning design-hiding scheme as a syntactic
object. Loosely speaking, the syntax describes the inputs and
outputs of the core algorithms that any DH scheme must
realize, as well as what it means for a DH scheme to operate
correctly.
Deﬁnition 1. Fix integers n, m > 0. A design-hiding (DH)
scheme Π = (Hide, Restore) for Func(n, m), with key length
ko : {0, 1}∗ → N is a tuple of algorithms with the following
syntax.
• The randomized design-hiding algorithm Hide:
Inputs: a circuit CF implementing F ∈ Func(n, m), and
a string of design parameters θ.
Outputs: the distinguished symbol ⊥ (“error”), or a tuple
consisting of (1) a secret key KO ∈ {0, 1}ko(θ), (2) and an
opaque circuit CL, where L ∈ Func(n + ko(θ), m).
(F, θ),
Requirements:
either
Pr[ Hide(CF , θ) = ⊥ ] = 1 or Pr[ Hide(CF , θ) = ⊥ ] = 0.
• The deterministic design-restoring algorithm Restore:
Inputs: a key K ∈ {0, 1}ko(θ), a string of design parame-
ters θ, and a chip CL.
Outputs: a restored chip CF or ⊥. When KO — the key
that is used by Hide to produce CL — is the key input to
Restore, we refer to the resulting chip CF as an honestly-
restored chip.
Requirements: for every input (K, θ, CL), it must be that
CF ← Restore(K, θ, CL)
(cid:54)= ⊥ implies that F ∈
Func(n, m).
every
input
for
We assume that if an algorithm is called on a point outside of
its domain, in particular if any of its inputs are ⊥, then the
algorithm returns ⊥.
3
The syntax that we have just established is fashioned to
capture the techniques — logic locking, IC camouﬂaging, and
split manufacturing — that an IP author uses to (a) protect the
“privacy” of its high-value circuit-design CF from adversarial
entities in the post-design phase of the IC supply chain, and
(b) make functionally-correct chips available to the end user.
Let us elaborate using the logic-locking setting.
The IP author often outsources the fabrication of CF into
physical chips CF to third-party foundries. (We will formalize
this transformation in the next section.) The foundries are
potentially malicious entities. Hence, the IP author cannot give
the foundries the circuit design CF (in plaintext). The design-
hiding algorithm Hide abstracts the mechanism by which the
IP author turns CF into an opaque circuit CL that “hides” the
functionality F using a secret key KO. The circuit CL takes
ko(θ) + n bits of input, where n is the length of the input to
F . Here, the additional ko(θ) bits encode the key KO, which
will be used to restore the functionality of the chips (that the
foundry produces) to the original, intended functionality F .
Speciﬁc instantiations of Hide include the locking process in
logic-locking schemes like random logic-locking (RLL) [6]
and its variants [44]–[47], SAT-attack-resistant schemes [15],
[27]–[29], [32], etc. We insist that for a given pair (F, θ), either
Hide works always (returns valid KO and L) or it always fails
(returns ⊥).
The meaning of the parameter string θ depends heavily
on the particular instantiation of the design-hiding scheme.
For example, it may encode the number of “key gates” to
be inserted in an RLL scheme [6], or the target hamming
distance in SFLL-HD [15]. It may also encode other design
constraints, such as the maximum size and depth of a locked
circuit, restrictions on gate types, and so on.
We envision that the IP author will securely store the key
KO, and send the opaque circuit CL to the foundry, instead
of the (plaintext) circuit CF . The foundry will fabricate and
package one or more opaque chips; if the foundry is honest,
then each chip will implement L. We formalize this in a
moment.
Intuitively, the design-restoring algorithm Restore abstracts
the mechanism by which a fabricated and packaged chip CL
is restored to its original, intended functionality F . Loosely,
this entails ﬁxing the ko(θ) “key bits” in the input to CL to
KO. In logic locking, the opaque chips are restored by (at
least) having a key installed in some tamper-proof, one-time
writable memory unit within the chip.
Fabrication and DH-scheme correctness. In order to deﬁne
the correctness for a DH scheme, we need some mechanism
for turning an opaque circuit into a chip. This is exactly
the role of the fabrication process that the foundry is meant
to provide. Thus, let Fab be a randomized chip-fabrication
algorithm: it takes as inputs a circuit CL and a string of design
parameters θ, and it outputs either a chip CL, or the error
symbol ⊥.
Deﬁnition 2. A DH scheme Π = (Hide, Restore) is correct
with respect to chip fabrication Fab if, for any (F, θ) and any
(KO, CL) ∈ Supp(Hide(CF , θ)), we have
Pr[CG ←$ Restore(KO, θ, Fab(CL, θ)) : (CG (cid:54)= ⊥) ⇒
(G ≡ F )] = 1,
where, the probability is over the coins of Fab.
3
In words, this requirement asserts that whenever (F, θ) is
a pair that results in an opaque circuit CL with associated
key KO, it must be the case that an honestly-restored chip
computes F exactly.
(cid:104) C ˆL ←$ Fab(CL, θ) : (cid:0)C ˆL (cid:54)= ⊥(cid:1) ⇒ ( ˆL ≡ L)
We will ﬁnd it useful to deﬁne an honest chip-fabrication
algorithm. Loosely, we say that a chip-fabrication algo-
rithm Fab is honest if the chip that it produces computes
exactly what it is supposed to compute. Formally, this re-
quires that for any circuit CL, and design-parameters θ,
= 1, where
Pr
the probability is over the coins of Fab. We note that the
correctness of a DH scheme does not require honest Fab;
indeed, Fab(CL, θ) may produce a chip C ˆL such that for
(cid:105)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
1677
some Y ∈ Dom(F ), ˆL(K, Y ) (cid:54)= L(K, Y ) for (say) a small
set of keys K (cid:54)= KO. For example, a hardware trojan [48]
can be embedded in the description of Fab such that a
fabricated opaque chip C ˆL implements L(KO,·) honestly; on
keys ˆK (cid:54)= KO, ˆL may leak information about KO.
V. SECURITY NOTIONS
We consider two notions of security for DH schemes. Both
notions deal with an adversarial foundry that attempts to
recover the original functionality that the opaque circuit hides.
The adversary gets unrestricted access to the opaque circuit,
as this is something that a real foundry would receive in order
to carry out fabrication. It is also given oracles that capture
various capabilities that a foundry is likely to have.
Function recovery. We begin with a notion of function
recovery for a design-hiding scheme Π = (Hide, Restore).
The pseudocode for the FR experiment is given in Fig. 2.
The experiment
is parameterized by the DH scheme Π,
some design parameters θ that Π uses, and an honest chip-
fabrication algorithm Fab. It takes as inputs: an adversary’s
attack algorithm A, and a set F ⊆ Func(n, m). Intuitively,
the set F captures the a priori uncertainty/knowledge that the
adversary has about the function F that the DH scheme Π is
used to protect. Clearly, there must be some uncertainty, since
otherwise, the adversary already knows the functionality of the
IP author’s circuit design. Note that the design of Π does not
depend on F.
The experiment begins by sampling F uniformly from F.
A circuit CF (that implements F ) and the design parameters θ
are inputs to the hiding algorithm Hide, which returns the key
KO, and the opaque circuit CL. The adversary is given CL and
θ as inputs, and it is provided oracles named FAB, RESTORE,
and RUN. These oracles model processes that an adversarial
foundry can employ while trying to recover F .
When the foundry is honest-but-curious, it will only produce
chips that are fabricated from the opaque circuit that the IP
author generates using the DH scheme Π, and the design
parameters θ. In the fully-malicious setting,
the adversary
can produce any arbitrary chip using arbitrary circuits and
arbitrary design parameters.
For our security experiments, we deﬁne an honest-but-
curious adversary as one that always queries FAB with zero
arguments, i.e., Z = ε. On the other hand, a fully-malicious
adversary can call FAB with any circuit CN , and any design
parameters γ of its choice, i.e., Z = (CN , γ).
When Z = ε, the FAB oracle runs Fab with CL (generated
in the FR experiment) and θ as inputs to get an honest chip
CL. Otherwise, FAB parses Z to get (CN , γ) and runs the
Fab algorithm on (CN , γ) to get an arbitrary chip CN of the
adversary’s choice. We use the sets H and N to keep track of
the honest and arbitrary chips, respectively.
The RESTORE oracle models the adversary’s ability to obtain
honestly-restored chips, i.e., chips that are restored with the
secret key KO. We allow the adversary to query RESTORE
on any chip that it obtained from FAB, i.e., chips in set H ∪
N . We use U to keep track of honestly-restored chips. The
RESTORE oracle does not return the restored chips in order
to prevent the adversary from reading the secret key from the
description of the chip. Instead, we return the index of the
restored chip in U. Notice that we do not restrict the adversary
to run the deterministic Restore algorithm locally on any triple
(K, γ, CN ) of its choice.
The RUN oracle captures the foundry’s ability to see the
output of any honestly-restored chip CP (that is stored in U)
on any input of its choice. The oracle takes as input the index
j of CP in U and X ∈ {0, 1}n, and returns the value P (X).
(By notation, CP implements function P .)
The goal of the adversary in the FR experiment is to output
a chip CG as its guess for F . The adversary is said to win the
FR experiment if F ≡ G. Notice that we prevent trivial wins
— by returning honestly-restored (honestly-fabricated) chips
— by not allowing the adversary direct access to chips that
are restored by the RESTORE oracle.
We deﬁne the FR advantage of the pair (F, A) against
DH scheme Π, design parameters θ, and honest-fabrication
algorithm Fab to be
(cid:104)
(cid:105)
,
AdvFR
(Π,θ),Fab(F, A) = Pr
ExpFR
(Π,θ),Fab(F, A) = 1
where the probability is over the indicated experiment. We
say A is (t, qf , qs, qr)-resource when its time complexity is
t, and it makes qf queries to the FAB oracle, qs queries to
the RESTORE oracle, and qr queries to the RUN oracle. By
convention, an FR adversary does not make pointless queries
to any oracle, i.e. queries that cannot increase its advantage.
Key recovery. The notion of key recovery (KR) is similar
to the FR notion, except the adversary’s goal is to recover a
key K, and the key is then used to get an honestly restored chip
CG that is obtained by running the honest Fab algorithm on
(CL, θ). In the ﬁnal step of the KR notion, we check whether
the function G that the chip CG implements is functionally
equivalent to F . We deﬁne the KR advantage of A as
(Π,θ),Fab(F, A) = 1
(Π,θ),Fab(F, A) = Pr
AdvKR
ExpKR
(cid:105)
,
(cid:104)
where the probability is over the indicated experiment. The
resources are the same as those for the FR advantage.
Note that one might think it more natural to deﬁne key
recovery as determining the secret key KO. We deﬁne it as we
do because some of the existing DH schemes, including RLL
[6] and strong logic obfuscation (SLO) [44], admit multiple
keys K ∈ {0, 1}ko(θ) that map to the hidden function F ,
i.e., F ≡ Restore(KO, θ, CL) ≡ Restore(K, θ, CL). (These
keys are said to constitute an equivalence class of the hidden
function.) Thus, our KR notion captures (for example) the
SAT attack of Subramanyan et. al [17], which recovers some
key in the equivalence class of the hidden function. It also
captures other key-recovery attacks [16], [18], [21] that exploit
structural and functional characteristics of the opaque circuit.
It is intuitively clear that FR security implies KR security
for any design-hiding scheme. We formalize this relation in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
1678
(Π,θ),Fab(F, A)
Experiment ExpFR
F ←$ F; i ← 0
(KO, CL) ←$ Hide(CF , θ)
CG ←$ AFAB,RESTORE,RUN(CL, θ)
Ret [G ≡ F ]
oracle FAB(Z):
if Z = ε then //make intended chip
CL ←$ Fab(CL, θ)
H ← H ∪ {CL}
Ret CL
else //make arbitary chip
(cid:104)CN , γ(cid:105) ← Z
CN ←$ Fab(CN , γ)