do not overlap. The security of the bounded vector signa-
tures ensures that the full signature output by the combine
procedure cannot be altered to sign a value not found within
the intersection or union of the individual partially signed
intervals.
Distributed Systems Applications.
Like signatures on sets and multisets, our bounded vector
signature representations of intervals can be used to accom-
plish data sharing tasks within distributed systems for values
that have natural ordering properties. One example is a time
interval. For example, an approach to the management of
public-key certiﬁcates (e.g., [29]) employs an online revoca-
tion authority ORA to countersign, for short intervals, long-
term certiﬁcates created by a more trusted oﬄine certiﬁcate
authority CA. In a traditional implementation of this idea,
both the signature by CA and the countersignature by ORA
would be implemented using separate signatures, resulting
in two signature veriﬁcations per use of the certiﬁcate. Our
bounded vector signatures support the consolidation of these
two signatures into one: the CA provides to ORA a signed
certiﬁcate with a large validity period, which ORA can par-
cel out in small portions by “sliding” the ends of the validity
interval accordingly (rather than separately countersigning
each short validity interval).
A second area for using bounded vector signatures to rep-
resent intervals is sensor applications. Marzullo [31], for
example, considered a setting in which multiple sensors pro-
duce an interval in which it senses a value (e.g., temperature,
time) to lie, and where a sensor is correct if the interval it
returns contains the actual value (and is faulty otherwise).
His algorithm uses intervals from n sensors to produce the
tightest interval possible in which the actual value lies, pro-
vided that fewer than f sensors are faulty. A direct use
of our bounded vector signatures would permit each sensor
to sign its interval and subsequently combine these signed
intervals using this fault-tolerant intersection algorithm to
produce a signature on the tightest interval possible in which
the actual value lies. Others can be disallowed from tight-
ening the interval further using the rank-order techniques of
Section 4.1.
A third interesting application of signatures on intervals
is their use to represent a broad class of access-control struc-
tures used in key management tasks, like hierarchical access
controls [2, 4] and group key management [34, 41]. In these
settings, attributes that determine access can often be en-
coded within a d-dimensional space. For instance, in some
location-based access control schemes [3, 42], the dimensions
encode the location of the entity in 3-dimensional space, plus
an extra dimension for time. A service provider can sign
subranges describing the allowable access attributes for the
entities in the distributed system and provide them with
their respective subranges as a non-interactive access token.
These entities can then derive a “key” 2 for any subspace of
their allowable attributes using the Stretch operation on the
signature given to them. Such a scheme can derive several
beneﬁts from our bounded vector signatures, such as secu-
rity against key recovery [2], which roughly states that it
is infeasible for the adversary to derive a key for an access
attribute for which she does not have a token.
6. CONCLUSION
In this paper, we described a new malleable signature
scheme for signing vectors of natural numbers, which we
call bounded vector signatures. The primary contribution
of our scheme is a malleability property that allows arbi-
trary parties to increase the value embedded in any com-
ponent of the signed vector without access to the signing
key, while making it computationally infeasible to decrease
values. In the multiparty setting, this malleability property
allows each signer to sign a potentially diﬀerent vector of
values and yet still produce a valid full signature represent-
ing the component-wise maximum of any t vectors. We de-
scribed an eﬃcient construction for our scheme and proved
it secure under the strong RSA and decisional Diﬃe-Hellman
assumptions in the random oracle model. Finally, we showed
that bounded vector signatures could be used to sign inter-
esting data structures, such as sets and intervals, and that
2Depending on the scheme in use, additional key derivation
steps may be necessary. For simplicity we just denote the
signature as a “key”.
the malleability of those signatures enabled eﬃcient imple-
mentations of standard operations on the signed structures.
Moreover, we illustrated the unique beneﬁts of these mal-
leable signatures in providing compact and non-interactive
solutions to several problems in the area of distributed sys-
tems security.
Acknowledgements
This work was supported in part by NSF grants 0756998,
0910483, and by a grant from Intel. Support was also pro-
vided by NSF grant 0937060 that was awarded to the Com-
puting Research Association for the CIFellows Project.
7. REFERENCES
[1] S. Agrawal, D. Boneh, X. Boyen, and
D. Mandell-Freeman. Preventing pollution attacks in
multi-source network coding. Cryptology ePrint
Archive, Report 2010/183, 2010.
http://eprint.iacr.org/.
[2] M.J. Atallah, M. Blanton, N. Fazio, and K.B. Frikken.
Dynamic and eﬃcient key management for access
hierarchies. ACM Transactions on Information and
System Security, 12(3):1–43, 2009.
[3] M.J. Atallah, M. Blanton, and K.B. Frikken. Eﬃcient
techniques for realizing geo-spatial access control. In
2nd ACM Symposium on Information, Computer and
Communications Security, pages 82–92, 2007.
[4] G. Ateniese, A. De Santis, A.L. Ferrara, and
B. Masucci. Provably-secure time-bound hierarchical
key assignment schemes. In 13th ACM Conference on
Computer and Communications Security, pages
288–297, 2006.
[5] N. Baric and B. Pﬁtzmann. Collision-free
accumulators and fail-stop signature schemes without
trees. In Advances in Cryptology—Eurocrypt ’97,
pages 480–494, 1997.
[6] M. Bellare and Neven G. Transitive signatures: new
schemes and proofs. IEEE Transactions on
Information Theory, 51(6):2133–2151, 2005.
[7] B.H. Bloom. Space/time trade-oﬀs in hash coding
with allowable errors. Communications of the ACM,
13(7):422–426, 1970.
[8] D. Boneh, D. Freeman, J. Katz, and B. Waters.
Signing a linear subspace: Signature schemes for
network coding. In 12th International Conference on
Practice and Theory in Public Key Cryptography,
pages 68–87, 2009.
[9] J.W. Byers, J. Considine, M. Mitzenmacher, and
S. Rost. Informed content delivery across adaptive
overlay networks. IEEE/ACM Transactions on
Networking, 12(5):767–780, 2004.
[10] J. Camenisch and A. Lysyanskaya. Dynamic
accumulators and application to eﬃcient revocation of
anonymous credentials. In Advances in Cryptology –
CRYPTO 2002, volume 2442 of Lecture Notes in
Computer Science, pages 101–120, 2002.
[11] J. Camenisch and M. Michels. Separability and
eﬃciency for generic group signature schemes. In
Advances in Cryptology—Crypto ’99, volume 1666,
pages 413–430, 1999.
[12] D. Chaum and T. P. Pedersen. Wallet databases with
observers. In Advances in Cryptology—Crypto ’92,
pages 89–105, 1992.
[13] R. Cramer and V. Shoup. Signature schemes based on
the strong RSA assumption. ACM Transactions on
Information and System Security, 3(3):161–185, 2000.
[14] F.M. Cuenca-Acuna, C. Peery, R.P. Martin, and T.D.
Nguyen. Planetp: Using gossiping to build content
addressable peer-to-peer information sharing
communities. In 12th IEEE Symposium on High
Performance Distributed Computing, pages 236–246,
2003.
[15] I. Damg˚ard and M. Koprowski. Practical threshold
RSA signatures without a trusted dealer. In Advances
in Cryptology—Eurocrypt ’01, pages 152–165, 2001.
Authentication in distributed systems: Theory and
practice. ACM Transactions on Computer Systems,
10(4):265–310, November 1992.
[30] J. Ledlie, J.M. Taylor, L. Serban, and M. Seltzer.
Self-organization in peer-to-peer systems. In 10th
ACM SIGOPS Workshop, pages 125–132, 2002.
[31] K. Marzullo. Tolerating failures of continuous-valued
sensors. ACM Transactions on Computer Systems,
8(4):284–304, 1990.
[32] S. Micali and R. L. Rivest. Transitive signature
schemes. In The Cryptographer’s Track at the RSA
Conference on Topics in Cryptology, pages 236–243,
2002.
[16] W. de Jonge and D. Chaum. Some variations on RSA
[33] G. Neven. A simple transitive signature scheme for
signatures and their security. In Advances in
Cryptology—Crypto ’86, pages 49–59, 1986.
[17] DNS-based blacklist, 2010. http://www.dnsbl.info.
[18] C. Estan and G. Varghese. New directions in traﬃc
measurement and accounting: Focusing on the
elephants, ignoring the mice. ACM Transactions on
Computer Systems, 21(3):270–313, 2003.
[19] L. Fan, P. Cao, J. Almeida, and A.Z. Broder.
Summary cache: a scalable wide-area web cache
sharing protocol. IEEE/ACM Transactions on
Networking, 8(3):281–293, 2000.
[20] A. Fiat and A. Shamir. How to prove yourself:
Practical solutions to identiﬁcation and signature
problems. In Advances in Cryptology—Crypto ’86,
volume 263 of LNCS, pages 186–194, 1986.
directed trees. Theoretical Computer Science,
396(1-3):277 – 282, 2008.
[34] A. Perrig, D. Song, and D. Tygar. ELK: a new
protocol for eﬃcient large-group key distribution. In
2001 IEEE Symposium on Security and Privacy, pages
247–262, 2002.
[35] P. Reynolds and A. Vahdat. Eﬃcient peer-to-peer
keyword searching. In 2003 ACM/IFIP/USENIX
International Conference on Middleware, pages 21–40,
2003.
[36] S.C. Rhea and J. Kubiatowicz. Probabilistic location
and routing. In 21st Joint Conference of the IEEE
Computer and Communication Societies, pages
1248–1257, 2002.
[37] A. Shamir. How to share a secret. Communications of
[21] R. Gennaro, S. Halevi, and T. Rabin. Secure
the ACM, 22(11):612–613, 1979.
hash-and-sign signatures without the random oracle.
In Advances in Cryptology—Eurocrypt ’99, pages
123–139, 1999.
[38] V. Shoup. Practical threshold signatures. In Advances
in Cryptology—Eurocrypt ’00, pages 207–220, 2000.
[39] Spam and open relay blocking system, 2010.
[22] R. Gennaro, J. Katz, H. Krawczyk, and T. Rabin.
http://www.sorbs.net.
Secure network coding over the integers. Cryptology
ePrint Archive, Report 2009/569, 2010.
http://eprint.iacr.org/.
[23] A. Hevia and D. Micciancio. The provable security of
graph-based one-time signatures and extensions to
algebraic signature schemes. In Advances in
Cryptology—Asiacrypt ’02, pages 379–396, 2002.
[24] T.D. Hodes, S.E. Czerwinski, B.Y. Zhao, A.D. Joseph,
and R.H. Katz. An architecture for secure wide-area
service discovery. Wireless Networks, 8(2/3):213–230,
2002.
[25] S. Hohenberger and B. Waters. Short and stateless
signatures from the RSA assumption. In Advances in
Cryptology—Crypto ’09, pages 654–670, 2009.
[26] R. Johnson, D. Molnar, D. Song, and D. Wagner.
Homomorphic signature schemes. In The
Cryptographer’s Track at the RSA Conference on
Topics in Cryptology, pages 244–262, 2002.
[27] A. Kiayias and M. Yung. Group signatures: provable
security, eﬃcient constructions and anonymity from
trapdoor-holders. Cryptology ePrint Archive, Report
2004/076, 2004. http://eprint.iacr.org/.
[28] E. Kiltz, A. Mityagin, S. Panjwani, and B. Raghavan.
Append-only signatures. In 32th International
Colloquium on Automata, Languages and
Programming, 2005.
[29] B. Lampson, M. Abadi, M. Burrows, and E. Wobber.
[40] The spamhaus project, 2010.
http://www.spamhaus.org.
[41] C. K. Wong, M. Gouda, and S. S. Lam. Secure group
communications using key graphs. IEEE/ACM
Transactions on Networking, 8(1):16–30, 2000.
[42] H. Yuan and M.J. Atallah. Eﬃcient and secure
distribution of massive geo-spatial data. In 17th ACM
SIGSPATIAL International Conference on Advances
in Geographic Information Systems, pages 440–443,
2009.
APPENDIX
A. PROOF OF THEOREM
In this appendix, we provide the proof for Theorem 1 from
Section 3.1.
Proof. Given an adversary A capable of breaking shrink
unforgeability in time T , we construct an adversary B for
the Strong RSA problem. A is provided with a hash ora-
cle modeled as a random oracle and n signing oracles, and
is capable of breaking shrink unforgeability with advantage
AdvBVS (A). B is given a RSA modulus N and y ∈ Z∗
N as
input. His goal is to ﬁnd a x ∈ Z∗
N and e > 1, such that
xe = y mod N .
Initialization:
1. B chooses d distinct primes e1, . . . , ed such that ei > n,
i = 1, . . . , d. He then initializes A with pk = (N , e1,
. . ., ed).
2. B randomly selects t − 1 random values (sk i1 , . . . ,
sk it−1 ) $← {0, . . . ,(cid:98)N/4(cid:99) − 1}. These values act as the
signing keys known to B (i.e., referred to as corrupted
signers in the threshold literature). Note that the val-
ues are supposed to be chosen from the subgroup Zm,
however, the statistical diﬀerence between these two
uniform distributions is O(N−1/2) and they are there-
fore statistically indistinguishable. We use KEYED to
denote the set of signing oracles for which B knows the
secret signing key and use KEYLESS to denote the rest
of them, for which B does not know the signing key.
3. B also chooses a random value h∗ $← {1, . . . , qh} that
acts as her guess for the hash query containing the con-
text that A will produce a forgery on. From now on,
we refer to this h∗th context as c∗.
4. Finally, B chooses a random value b
$← {0, 1} and
guesses which type of forger he is facing.
If b = 0,
then he guesses that A is a Type 1 forger that will only
query up to t − 1 signing oracles on vectors with the
context for which he forges. Otherwise, B guess that
A is a Type 2 forger that will query at least t signing
oracles on the context for which he forges.
At a high-level, B’s strategy against a forger A is to guess
on which hash query A is going to make the forgery on.
Remember that a signature on a vector context pair (v, c)