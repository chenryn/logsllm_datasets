### Security of Bounded Vector Signatures

The security of bounded vector signatures ensures that the full signature output by the combine procedure cannot be altered to sign a value not found within the intersection or union of the individual partially signed intervals.

### Distributed Systems Applications

Similar to signatures on sets and multisets, our bounded vector signature representations of intervals can be used to accomplish data sharing tasks within distributed systems for values that have natural ordering properties. One example is a time interval. For instance, an approach to the management of public-key certificates (e.g., [29]) employs an online revocation authority (ORA) to countersign, for short intervals, long-term certificates created by a more trusted offline certificate authority (CA). In a traditional implementation, both the signature by CA and the countersignature by ORA would be implemented using separate signatures, resulting in two signature verifications per use of the certificate. Our bounded vector signatures support the consolidation of these two signatures into one: the CA provides to ORA a signed certificate with a large validity period, which ORA can parcel out in small portions by "sliding" the ends of the validity interval accordingly (rather than separately countersigning each short validity interval).

### Sensor Applications

A second area for using bounded vector signatures to represent intervals is in sensor applications. Marzullo [31], for example, considered a setting where multiple sensors produce an interval in which they sense a value (e.g., temperature, time) to lie, and a sensor is correct if the interval it returns contains the actual value (and is faulty otherwise). His algorithm uses intervals from \( n \) sensors to produce the tightest interval possible in which the actual value lies, provided that fewer than \( f \) sensors are faulty. A direct use of our bounded vector signatures would permit each sensor to sign its interval and subsequently combine these signed intervals using this fault-tolerant intersection algorithm to produce a signature on the tightest interval possible in which the actual value lies. Others can be disallowed from tightening the interval further using the rank-order techniques of Section 4.1.

### Access-Control Structures

A third interesting application of signatures on intervals is their use to represent a broad class of access-control structures used in key management tasks, such as hierarchical access controls [2, 4] and group key management [34, 41]. In these settings, attributes that determine access can often be encoded within a \( d \)-dimensional space. For instance, in some location-based access control schemes [3, 42], the dimensions encode the location of the entity in 3-dimensional space, plus an extra dimension for time. A service provider can sign subranges describing the allowable access attributes for the entities in the distributed system and provide them with their respective subranges as a non-interactive access token. These entities can then derive a "key" for any subspace of their allowable attributes using the Stretch operation on the signature given to them. Such a scheme can derive several benefits from our bounded vector signatures, such as security against key recovery [2], which roughly states that it is infeasible for the adversary to derive a key for an access attribute for which she does not have a token.

### Conclusion

In this paper, we described a new malleable signature scheme for signing vectors of natural numbers, which we call bounded vector signatures. The primary contribution of our scheme is a malleability property that allows arbitrary parties to increase the value embedded in any component of the signed vector without access to the signing key, while making it computationally infeasible to decrease values. In the multiparty setting, this malleability property allows each signer to sign a potentially different vector of values and yet still produce a valid full signature representing the component-wise maximum of any \( t \) vectors. We described an efficient construction for our scheme and proved it secure under the strong RSA and decisional Diffie-Hellman assumptions in the random oracle model. Finally, we showed that bounded vector signatures could be used to sign interesting data structures, such as sets and intervals, and that the malleability of those signatures enabled efficient implementations of standard operations on the signed structures. Moreover, we illustrated the unique benefits of these malleable signatures in providing compact and non-interactive solutions to several problems in the area of distributed systems security.

### Acknowledgements

This work was supported in part by NSF grants 0756998, 0910483, and by a grant from Intel. Support was also provided by NSF grant 0937060 that was awarded to the Computing Research Association for the CIFellows Project.

### References

[References listed here as in the original text]

### Appendix

#### Proof of Theorem

In this appendix, we provide the proof for Theorem 1 from Section 3.1.

**Proof.** Given an adversary \( A \) capable of breaking shrink unforgeability in time \( T \), we construct an adversary \( B \) for the Strong RSA problem. \( A \) is provided with a hash oracle modeled as a random oracle and \( n \) signing oracles, and is capable of breaking shrink unforgeability with advantage \( \text{Adv}_{\text{BVS}}(A) \). \( B \) is given a RSA modulus \( N \) and \( y \in \mathbb{Z}_N^* \) as input. His goal is to find an \( x \in \mathbb{Z}_N^* \) and \( e > 1 \), such that \( x^e \equiv y \pmod{N} \).

**Initialization:**

1. \( B \) chooses \( d \) distinct primes \( e_1, \ldots, e_d \) such that \( e_i > n \) for \( i = 1, \ldots, d \). He then initializes \( A \) with \( \text{pk} = (N, e_1, \ldots, e_d) \).
2. \( B \) randomly selects \( t - 1 \) random values \( (\text{sk}_{i1}, \ldots, \text{sk}_{it-1}) \xleftarrow{\$} \{0, \ldots, \lfloor N/4 \rfloor - 1\} \). These values act as the signing keys known to \( B \) (i.e., referred to as corrupted signers in the threshold literature). Note that the values are supposed to be chosen from the subgroup \( \mathbb{Z}_m \), however, the statistical difference between these two uniform distributions is \( O(N^{-1/2}) \) and they are therefore statistically indistinguishable. We use KEYED to denote the set of signing oracles for which \( B \) knows the secret signing key and use KEYLESS to denote the rest of them, for which \( B \) does not know the signing key.
3. \( B \) also chooses a random value \( h^* \xleftarrow{\$} \{1, \ldots, q_h\} \) that acts as her guess for the hash query containing the context that \( A \) will produce a forgery on. From now on, we refer to this \( h^* \)-th context as \( c^* \).
4. Finally, \( B \) chooses a random value \( b \xleftarrow{\$} \{0, 1\} \) and guesses which type of forger he is facing. If \( b = 0 \), then he guesses that \( A \) is a Type 1 forger that will only query up to \( t - 1 \) signing oracles on vectors with the context for which he forges. Otherwise, \( B \) guesses that \( A \) is a Type 2 forger that will query at least \( t \) signing oracles on the context for which he forges.

At a high level, \( B \)'s strategy against a forger \( A \) is to guess on which hash query \( A \) is going to make the forgery on. Remember that a signature on a vector-context pair \( (v, c) \) must satisfy certain conditions.