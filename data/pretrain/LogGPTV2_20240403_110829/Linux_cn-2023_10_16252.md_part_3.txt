sudo make modules_install -j$(nproc)
```
> 
> **给开发者的提示：** 你可以通过设定 `INSTALL_MOD_PATH` 变量来指定一个不同的路径存放 Linux 模块，而不用默认的 `/lib/modules/-`，具体如下：
> 
> 
> 
> ```
>    sudo make modules_install INSTALL_MOD_PATH=
> 
> ```
> 
> 
> 
> **另一个给开发者的提示：** 你可以使用 `INSTALL_MOD_STRIP` 变量来决定是否需要剥离模块的调试符号。如果未设定该变量，调试符号**不会被剥离**。当设为 `1` 时，符号信息将会被使用 `--strip-debug` 选项剥离，随后该选项会传递给 `strip`（或者在使用 Clang 的时候传递给 `llvm-strip`）工具。
> 
> 
> 
#### （可选）安装 Linux 内核头文件
如果你打算使用这个内核来支持树外模块，比如 ZFS 或英伟达 DKMS，或者打算尝试自行编写模块，你可能会需要 Linux 内核提供的头文件。
可以通过以下方式使用 `headers_install` 目标来安装 Linux 内核头文件：
```
sudo make headers_install
```
**应使用 `sudo` 命令**，因为这些头文件会被安装到 `/usr` 目录。同时还会在 `/usr` 目录内创建子目录 `include/linux`，然后将头文件安装到 `/usr/include/linux` 内。
> 
> **给开发者的提示：** 通过设定 `INSTALL_HDR_PATH` 变量，你可以修改 Linux 内核头文件的安装路径。
> 
> 
> 
#### 安装 DTB（只针对 ARM 和 RISC-V）
**如果你使用的是 x86\_64 架构，那么你可以跳过此步骤！**
如果你针对 ARM 或者 RISC-V 构建了内核，那么在运行 `make` 的过程中，设备树的二进制文件可能已经被编译出来了。你可以通过在 `arch//boot/dts` 目录查找 `.dtb` 文件来确认这一点。
这里提供了一个快速检查的技巧：
```
### 对于 AArch32
$ find arch/arm/boot/dts -name "*.dtb" -type f | head -n 1 > /dev/null && echo "DTBs for ARM32 were built"
### 对于 AArch64
$ find arch/arm64/boot/dts -name "*.dtb" -type f | head -n 1 > /dev/null && echo "DTBs for ARM64 were built"
### 对于 RISC-V
$ find arch/riscv/boot/dts -name "*.dtb" -type f | head -n 1 > /dev/null && echo "DTBs for RISC-V were built"
```
如果你看到出现 `DTBs for  were built` 的消息，那么你可以开始安装 DTB。这可以通过 `dtbs_install` 目标来实现。
**需要使用 `sudo`**，因为它们会被安装在 `/boot/dtb--` 中，而这个目录是由 `root` 所拥有的。
```
sudo make dtbs_install
```
> 
> **给开发者的提示：** 就像安装模块一样，你可以使用 `INSTALL_DTBS_PATH` 变量指定一个自定义的路径来安装设备树二进制文件。
> 
> 
> 
#### 安装 Linux 内核
最后，我们来安装 Linux 内核本身！这可以通过 `install` 目标来完成，就像这样：
```
sudo make install
```
**在这里必须使用 `sudo`**，因为 Linux 内核将被安装在 `/boot` 目录，而这个目录不允许普通用户写入。
> 
> ? 一般来讲，`install` 目标也会更新引导加载程序，但是如果它没有成功，那可能是不支持你使用的引导加载程序。如果你没有使用 GRUB 作为你的引导加载程序，请一定要阅读你引导加载程序的使用手册 ?
> 
> 
> 
> 
> **给开发者的提示：** 并不奇怪，`INSTALL_PATH` 变量被用来设定 Linux 内核的安装位置，而非默认的 `/boot` 目录。
> 
> 
> 
#### 针对 Arch Linux 用户的说明
如果你尝试执行了 `make install` 命令，可能已经注意到产生了错误。错误如下：
```
$ sudo make install
    INSTALL /boot
Cannot find LILO.
```
要在 Arch Linux 上实际完成 Linux 内核的安装，我们需要手动复制 Linux 内核镜像文件。别担心，如果你使用的是 Arch Linux，手动操作应该是家常便饭了。( ͡° ͜ʖ ͡°)
可以使用以下命令完成这个步骤：
```
sudo install -Dm644 "$(make -s image_name)" /boot/vmlinuz--
```
因为我编译的是 6.5.5 版本的内核，所以我将会执行下面这条命令，你可以根据你的实际情况进行适当调整：
```
sudo install -Dm644 "$(make -s image_name)" /boot/vmlinuz-6.5.5-pratham
```
虽然不是必须的，但最好复制一份名为 `System.map` 的文件。既然你已经在操作了，一并也复制了 `.config` 文件吧 ?
```
sudo cp -vf System.map /boot/System.map--
sudo cp -vf .config /boot/config--
```
##### 生成初始 RAM 磁盘
当你安装 Arch Linux 时，可能已经了解过 `mkinitcpio` 这个工具。现在，我们将使用它来创建初始的 RAM 磁盘。
首先，我们需要创建一个预设文件。向 `/etc/mkinitcpio.d/linux-.preset` 文件中添加以下内容，根据实际需要来替换 `` 和 ``。
```
ALL_config="/etc/mkinitcpio.conf"
ALL_kver="/boot/vmlinuz--"
PRESETS=('default' 'fallback')
default_image="/boot/initramfs--.img"
fallback_options="-S autodetect"
```
配置完成后，执行下面的命令来生成初始 RAM 磁盘：
```
sudo mkinitcpio -p linux-
```
我自己的电脑上得到的输出如下，你的结果应该会类似！
```
$ sudo mkinitcpio -p linux-pratham
==> Building image from preset: /etc/mkinitcpio.d/linux-pratham.preset: 'default'
==> Using configuration file: '/etc/mkinitcpio.conf'
    -> -k /boot/vmlinuz-6.5.5-pratham -c /etc/mkinitcpio.conf -g /boot/initramfs-6.5.5-pratham.img
==> Starting build: '6.5.5-pratham'
    -> Running build hook: [base]
    -> Running build hook: [udev]
    -> Running build hook: [autodetect]
    -> Running build hook: [modconf]
    -> Running build hook: [kms]
    -> Running build hook: [keyboard]
==> WARNING: Possibly missing firmware for module: 'xhci_pci'
    -> Running build hook: [keymap]
    -> Running build hook: [consolefont]
==> WARNING: consolefont: no font found in configuration
    -> Running build hook: [block]
    -> Running build hook: [filesystems]
    -> Running build hook: [fsck]
==> Generating module dependencies
==> Creating zstd-compressed initcpio image: '/boot/initramfs-6.5.5-pratham.img'
==> Image generation successful
==> Building image from preset: /etc/mkinitcpio.d/linux-pratham.preset: 'fallback'
==> Using configuration file: '/etc/mkinitcpio.conf'
==> WARNING: No image or UKI specified. Skipping image 'fallback'
```
初始 RAM 磁盘已成功生成，现在我们可以进入下一步，更新引导加载器！
##### 更新 GRUB
一旦所有必要的文件已成功复制到其对应的位置，接下来，我们将进行 GRUB 的更新。
使用以下命令对 GRUB 引导加载器进行更新：
```
sudo grub-mkconfig -o /boot/grub/grub.cfg
```
> 
> ? 如果你使用的引导加载器不是 GRUB，请参看 Arch Wiki 中相关的引导加载器文档。
> 
> 
> 
**注意，更新 GRUB 并不会直接使新的内核版本设为默认启动选项。在引导时，请在启动菜单中手动选择新的内核版本。**
你可以通过选择 `Advanced options for Arch Linux` 菜单，并在随后的菜单中选择 `Arch Linux, with Linux -` 来启用新版的 Linux 内核。
### 重启电脑
恭喜你！你已经完成了获取 Linux 内核源代码、进行配置、构建以及安装等所有步骤。现在只需要通过重启电脑并进入新构建和安装的 Linux 内核，就可以开始享受你的努力成果了。
启动时，请确保从引导加载器中选择正确的 Linux 内核版本。系统启动后，运行 `uname -r` 命令来确认你正在使用预期的 Linux 内核。
以下是我自己的电脑输出的内容：
```
$ uname -r
6.5.5-pratham
```
**是时候开始庆祝了！** ?
### 卸载操作
> 
> ? 提示：在删除当前正在使用的内核版本之前，你应该首先切换至较旧的内核版本。
> 
> 
> 
可能你的 Linux 发行版所使用的 Linux 内核版本就是你手动编译的版本，或者你自行编译了新的内核并注意到应卸载旧的内核以节省空间，于是你开始想如何才能卸载。当然，虽然我们无法简单地运行 `make uninstall` 命令，但这并不代表没有其他的方法！
我们清楚各个文件的安装位置，因此删除它们相对简单。
```
### 删除内核模块
$ rm -rf /lib/modules/-
### 删除设备树二进制文件
$ rm -rf /boot/dtb--
### 删除 Linux 内核本身
$ rm -vf /boot/{config,System,vmlinuz}--
```
### 总结
这个过程不是一次简单的旅程，是吧？但是现在，我们终于抵达了终点。我们一起学习了手动编译 Linux 内核的全过程，包括安装依赖、获取和验证源码、解压源码、配置 Linux 内核、构建内核以及安装内核。
如果你喜欢这个详细的步骤指南，请给我留言反馈。如果在操作过程中遇到问题，也欢迎提出，让我知道！
*（题图：MJ/853481c5-87e3-42aa-8ace-e9ddfa232f75）*
---
via: 
作者：[Pratham Patel](https://itsfoss.com/author/pratham/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[ChatGPT](https://linux.cn/lctt/ChatGPT) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出