      [r15] == NULL || r15 == NULL
      [r12] == NULL || r12 == NULL
    0xe3b01 execve("/bin/sh", r15, rdx)
    constraints:
      [r15] == NULL || r15 == NULL
      [rdx] == NULL || rdx == NULL
    0xe3b04 execve("/bin/sh", rsi, rdx)
    constraints:
      [rsi] == NULL || rsi == NULL
      [rdx] == NULL || rdx == NULL
    '''
# 简单的栈迁移
## 栈迁移原理
参考链接[PWN！栈迁移原理](https://cloud.tencent.com/developer/article/1601192
"PWN！栈迁移原理")  
将ebp转移到bss或data段，在bss段或data段构造gadget然后在这里执行
  * leave相当于mov esp,ebp pop ebp;
  * ret相当于pop eip;
  * mov esp,ebp 让esp指向ebp的地址
  * pop ebp 把栈顶的值弹到ebp寄存器里，此时ebp就指向了fake ebp1
  * 如果在fake ebp1处写入fake ebp2的地址，然后再来一步leave就可以让ebp指向fake ebp2  
## 沙盒机制  
就是限制系统调用，pwn题一般限制execve的系统调用  
## 开启沙盒的两种方式  
##### prctl函数调用
        int sub_1269()
    {
    __int16 v1; // [rsp+0h] [rbp-70h] BYREF
    __int16 *v2; // [rsp+8h] [rbp-68h]
    __int16 v3; // [rsp+10h] [rbp-60h] BYREF
    char v4; // [rsp+12h] [rbp-5Eh]
    char v5; // [rsp+13h] [rbp-5Dh]
    int v6; // [rsp+14h] [rbp-5Ch]
    __int16 v7; // [rsp+18h] [rbp-58h]
    char v8; // [rsp+1Ah] [rbp-56h]
    char v9; // [rsp+1Bh] [rbp-55h]
    int v10; // [rsp+1Ch] [rbp-54h]
    __int16 v11; // [rsp+20h] [rbp-50h]
    char v12; // [rsp+22h] [rbp-4Eh]
    char v13; // [rsp+23h] [rbp-4Dh]
    int v14; // [rsp+24h] [rbp-4Ch]
    __int16 v15; // [rsp+28h] [rbp-48h]
    char v16; // [rsp+2Ah] [rbp-46h]
    char v17; // [rsp+2Bh] [rbp-45h]
    int v18; // [rsp+2Ch] [rbp-44h]
    __int16 v19; // [rsp+30h] [rbp-40h]
    char v20; // [rsp+32h] [rbp-3Eh]
    char v21; // [rsp+33h] [rbp-3Dh]
    int v22; // [rsp+34h] [rbp-3Ch]
    __int16 v23; // [rsp+38h] [rbp-38h]
    char v24; // [rsp+3Ah] [rbp-36h]
    char v25; // [rsp+3Bh] [rbp-35h]
    int v26; // [rsp+3Ch] [rbp-34h]
    __int16 v27; // [rsp+40h] [rbp-30h]
    char v28; // [rsp+42h] [rbp-2Eh]
    char v29; // [rsp+43h] [rbp-2Dh]
    int v30; // [rsp+44h] [rbp-2Ch]
    __int16 v31; // [rsp+48h] [rbp-28h]
    char v32; // [rsp+4Ah] [rbp-26h]
    char v33; // [rsp+4Bh] [rbp-25h]
    int v34; // [rsp+4Ch] [rbp-24h]
    __int16 v35; // [rsp+50h] [rbp-20h]
    char v36; // [rsp+52h] [rbp-1Eh]
    char v37; // [rsp+53h] [rbp-1Dh]
    int v38; // [rsp+54h] [rbp-1Ch]
    __int16 v39; // [rsp+58h] [rbp-18h]
    char v40; // [rsp+5Ah] [rbp-16h]
    char v41; // [rsp+5Bh] [rbp-15h]
    int v42; // [rsp+5Ch] [rbp-14h]
    __int16 v43; // [rsp+60h] [rbp-10h]
    char v44; // [rsp+62h] [rbp-Eh]
    char v45; // [rsp+63h] [rbp-Dh]
    int v46; // [rsp+64h] [rbp-Ch]
    __int16 v47; // [rsp+68h] [rbp-8h]
    char v48; // [rsp+6Ah] [rbp-6h]
    char v49; // [rsp+6Bh] [rbp-5h]
    int v50; // [rsp+6Ch] [rbp-4h]
    prctl(38, 1LL, 0LL, 0LL, 0LL);
    v3 = 32;
    v4 = 0;
    v5 = 0;
    v6 = 4;
    v7 = 21;
    v8 = 0;
    v9 = 9;
    v10 = -1073741762;
    v11 = 32;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 53;
    v16 = 7;
    v17 = 0;
    v18 = 0x40000000;
    v19 = 21;
    v20 = 6;
    v21 = 0;
    v22 = 59;
    v23 = 21;
    v24 = 0;
    v25 = 4;
    v26 = 1;
    v27 = 32;
    v28 = 0;
    v29 = 0;
    v30 = 36;
    v31 = 21;
    v32 = 0;
    v33 = 2;
    v34 = 0;
    v35 = 32;
    v36 = 0;
    v37 = 0;
    v38 = 32;
    v39 = 21;
    v40 = 1;
    v41 = 0;
    v42 = 16;
    v43 = 6;
    v44 = 0;
    v45 = 0;
    v46 = 2147418112;
    v47 = 6;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v1 = 12;
    v2 = &v3;
    return prctl(22, 2LL, &v1);
    }
##### seccomp库函数
        __int64 sandbox()
    {
    __int64 v1; // [rsp+8h] [rbp-8h]
    // 两个重要的宏，SCMP_ACT_ALLOW(0x7fff0000U) SCMP_ACT_KILL( 0x00000000U)
    // seccomp初始化，参数为0表示白名单模式，参数为0x7fff0000U则为黑名单模式
    v1 = seccomp_init(0LL);
    if ( !v1 )
    {
      puts("seccomp error");
      exit(0);
    }
    // seccomp_rule_add添加规则
    // v1对应上面初始化的返回值
    // 0x7fff0000即对应宏SCMP_ACT_ALLOW
    // 第三个参数代表对应的系统调用号，0-->read/1-->write/2-->open/60-->exit
    // 第四个参数表示是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，传0不做任何限制
    seccomp_rule_add(v1, 0x7FFF0000LL, 2LL, 0LL);
    seccomp_rule_add(v1, 0x7FFF0000LL, 0LL, 0LL);
    seccomp_rule_add(v1, 0x7FFF0000LL, 1LL, 0LL);
    seccomp_rule_add(v1, 0x7FFF0000LL, 60LL, 0LL);
    seccomp_rule_add(v1, 0x7FFF0000LL, 231LL, 0LL);
    // seccomp_load - Load the current seccomp filter into the kernel
    if ( seccomp_load(v1) < 0 )
    {
      // seccomp_release - Release the seccomp filter state
      // 但对已经load的过滤规则不影响
      seccomp_release(v1);
      puts("seccomp error");
      exit(0);
    }
    return seccomp_release(v1);
    }
##### seccomp-tools识别沙盒  
seccomp-tools识别沙盒  
#### hgame2023 week1 orw  
##### checksec
##### ida
可以看文字提示有沙盒  
或者点进去看看
    int sandbox()
    {
      __int16 v1; // [rsp+0h] [rbp-40h] BYREF
      __int16 *v2; // [rsp+8h] [rbp-38h]
      __int16 v3; // [rsp+10h] [rbp-30h] BYREF
      char v4; // [rsp+12h] [rbp-2Eh]
      char v5; // [rsp+13h] [rbp-2Dh]
      int v6; // [rsp+14h] [rbp-2Ch]
      __int16 v7; // [rsp+18h] [rbp-28h]
      char v8; // [rsp+1Ah] [rbp-26h]
      char v9; // [rsp+1Bh] [rbp-25h]
      int v10; // [rsp+1Ch] [rbp-24h]
      __int16 v11; // [rsp+20h] [rbp-20h]
      char v12; // [rsp+22h] [rbp-1Eh]
      char v13; // [rsp+23h] [rbp-1Dh]
      int v14; // [rsp+24h] [rbp-1Ch]
      __int16 v15; // [rsp+28h] [rbp-18h]
      char v16; // [rsp+2Ah] [rbp-16h]
      char v17; // [rsp+2Bh] [rbp-15h]
      int v18; // [rsp+2Ch] [rbp-14h]
      __int16 v19; // [rsp+30h] [rbp-10h]
      char v20; // [rsp+32h] [rbp-Eh]
      char v21; // [rsp+33h] [rbp-Dh]
      int v22; // [rsp+34h] [rbp-Ch]
      v3 = 32;
      v4 = 0;