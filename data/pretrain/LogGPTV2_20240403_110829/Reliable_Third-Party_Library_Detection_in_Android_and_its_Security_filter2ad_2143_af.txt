ﬁles into malformed shapes while preserving the functionality
of the apps. Packers are similar to code obfuscators in many
aspects, but a packer is not limited to work on program code.
According to the recent literature [27], there are various ways
for a packer to render an APK ﬁle unanalyzable, including
injecting false metadata into APK manifests,
intentionally
setting the encryption ﬂag in the APK header without actually
encrypting the ﬁle, tampering with the magic numbers of the
DEX ﬁles, and inserting corrupted DEX objects into the APK
ﬁles.
Many tools have been developed to nullify the mischievous
effects brought by packers [27]–[29]. With some engineering
effort, these tools can be integrated into LibD as preprocessors
to handle packed samples. Indeed, this can increase the pro-
cessing time of LibD; however, based on our observation, only
a small portion of the apps in our dataset are indeed packed. It
is possible that the ratio of packed apps is higher in malware
samples, but detecting third-party libraries in malware is not
yet a prevalent application.
2) Native Code: Many Android developers, including li-
brary developers, choose to publish part of their products
in the form of native ARM machine code instead of DEX
bytecode. The native code part of the app interacts with the
rest of components through the Java Native Interface (JNI).
There are several beneﬁts of developing Android apps in native
code. In the early age of Android, performance is possibly
the primary motivation, since native code is typically more
efﬁcient
than managed DEX bytecode. In recent Android
versions, however, the performance problem has become much
less of a concern due to the signiﬁcantly improved Android
runtime environment and app compilation model. Starting in
Android 7.0, a hybrid combination of ahead-of-time, just-in-
time, and proﬁle-guided compilation strategies are employed
to improve the performance of code written in Java and Kotlin.
This makes publishing apps in native code for execution
speed not as attractive as before. Nevertheless, it is still a
common practice among mobile app vendors since many of
them develop apps for different platforms and C/C++ is the
currently the only portable choice available to all mainstream
mobile OSes. Security can be yet another advantage of native
code, since it is considered to be more difﬁcult to reverse
engineer than bytecode.
Conceptually, the key steps in our method is also applicable
to native code, while the technical details make analyzing
native code a problem vastly different from what we have
tackled in this paper. It is known that slicing machine code
into functions and constructing the control ﬂow graphs is
extremely challenging [30]–[32]. Also, there are no or little
package structures or inheritance information in native code,
making our signature generation less rigorous. Most impor-
tantly, it is unclear whether the hash of opcode sequences is
a suitable feature at the native code level, since the number
of machine instructions can be much larger and the hash may
be too sensitive to perturbations caused by compilers. We are
currently unaware of a solution that is directly applicable to
our problem.
B. Specialist Limitations
1) Package-Based Detection: Similar to most existing li-
brary methods, LibD considers packages as the minimal units
of a library. In case a package of a library is cloned into the
main package of application, LibD will not be able to distin-
guish the library code from the application’s own code inside
that package. As such, LibD still need improvements if it is
to be employed to analyze apps in adversarial settings, where
the package structures of libraries are no longer authentic.
One way to address this problem is to reﬁne the granu-
larity of our current app dissection algorithm. For example,
we can identify library candidates as a group of classes
instead of packages. Indeed, an adversary can counterattack
this improved method by further reorganizing the classes
structures [33], but that will signiﬁcantly increase their cost
of operation. On the hand, performing large-scale library
detection at the class level will be much more costly than the
current package-based scheme. Intensive research and novel
methods are required to make the idea practical.
2) Advanced Obfuscation: Obfuscation has been widely
adopted in Android development. While LibD is able to
counter common obfuscation algorithms like package and
symbol renaming,
there exist more advanced obfuscations
that LibD cannot handle. Indeed, the signature we build for
Android apps captures some of the semantic features of the
code, yet it is mostly syntactic. If the obfuscation alters code
syntactic structures intensively, it is likely that the performance
of LibD will decline.
ProGuard [23],
the ofﬁcial obfuscation toolkit provided
by the Android SDK, is considered one of the most popu-
lar obfuscators. As mentioned in §IV-G2, ProGuard mostly
provided renaming-related obfuscations. Typical objects that
are renamed include package, class, and even methods. By
applying ProGuard to the compiled DEX code, sensible names
of the programming elements in the app are turned into ran-
domly generated meaningless strings. As previously discussed
(§III-D2), by hashing the underlying opcodes, LibD is resilient
to the renaming obfuscations. Our evaluation also presents
promising results in detecting obfuscated third-party libraries
(§IV-G2). However, the latest version of ProGuard (published
after the majority of our research was accomplished) started
to provide unprecedented obfuscation techniques, e.g., package
structure ﬂattening4. We speculate that LibD is not capable of
handling the new obfuscation at this point.
We also noticed that some third-party obfuscation tools
can perform even more advanced obfuscation techniques, e.g.,
code encryption, control ﬂow ﬂattening, and code virtualiza-
tion [34]–[36]. Handling these obfuscations is far beyond the
capability of syntax-based similarity detection, namely they
can very likely impede LibD. One way to accurately analyze
deeply obfuscation apps is to employ dedicated deobfuscation
techniques. Nevertheless, deobfuscation is still an open prob-
lem and has been actively researched [37], [38]. We do not
discuss the details of this line of work in this paper.
3) Functionality-Oriented Analysis: We have presented two
applications for which LibD is adequate. However, some
4https://www.guardsquare.com/en/proguard
analyses put more emphasis on tracing the functionality of
the libraries. In such cases, our method may be too sensitive
to divergences between different implementations of the same
program functionality, leading to clustering results that do not
meet client demands well.
Although this is indeed a limitation of our method, we
consider it inevitable since there is unlikely a “silver bullet”
effective against all scenarios with respect
to the library
detection problem. One potential method to improve the
current design is to make the sensitivity of the signature
conﬁgurable through user-provided parameters and let clients
set the appropriate settings based on their needs.
VIII. OTHER DISCUSSIONS
A. Setting Thresholds
As explained earlier (§III-E), LibD identiﬁes libraries ac-
cording to a predeﬁned threshold, and we set the threshold by
validating a broad set of candidates regarding an existing work
(§IV-B). Although our experiments report promising results
given the threshold as 10, conceptually, a “module” shared by
only two Android apps can be considered as a library. In other
words, determining a foolproof threshold regarding real-world
Android applications may need further investigation and study.
The current implementation of LibD can be easily con-
ﬁgured with different
thresholds. Besides, we consider a
rigorous training step regarding the ground truth should also
be applicable in our research. On the other hand, since there
is no systematic approach to acquiring the ground truth, our
current ground truth set constructed by manual efforts may
not be sufﬁcient for training (§IV-D1). In sum, we leave it as
further work to extend the size of our ground truth set and
launch a rigorous training procedure to decide the threshold.
B. Semantics-Based Similarity Analysis.
LibD detects instances of potential libraries (§III-C2); in-
stances with identical features are clustered into one group
(i.e., a third-party library). Conceptually, we are indeed search-
ing for the hidden “similarity” among different code compo-
nents (e.g., Java packages).
Note that features extracted by LibD (e.g., opcode se-
quences) are essentially from the program syntax. Syntactic
features are straightforward representations of the target pro-
grams, and they have been widely used by many existing
work for program similarity comparison and code clone detec-
tion [39]–[41]. Our experimental result has also demonstrated
efﬁcient and precise detection of Android third-party libraries
(§IV-D1) using syntactic features.
On the other hand, we have also observed some program
semantics-based similarity analysis work [42]–[54]. Ideally,
similarity analysis work in this category retrieves features by
modeling the functionality of the program, and it can usually
reveal the underlying similarities of code snippets in a more
accurate way. However, some of the existing semantics-based
similarity work may not scale well [48], [49], [52]. Given
the high scalability as a requirement for Android third-party
library detection, we consider it may not be feasible to directly
adopt previous techniques in our context. We leave it as future
18
work to integrate more scalable semantics-based methods into
our research.
IX. RELATED WORK
A. Third-Party Library Identiﬁcation
Early work on third-party mobile library identiﬁcation
mostly focuses on advertising libraries. Book et al. [55] and
Grace et al. [56] use the whitelist-based method for detecting
advertising libraries. After collecting the names of well-known
advertising libraries, they examine the existence of such li-
braries in a mobile app by package name matching. Later
techniques like AdDetect [57] and PEDAL [5] start to em-
ploy machine learning methods to provide more accurate and
comprehensive results, but they still target advertising libraries
only. AdRob [58] analyzes the network trafﬁc generated by the
advertising services in Android apps to identify which libraries
are bundled, with both static and dynamic analysis.
Identiﬁcation techniques specialized for advertising libraries
are not suitable for many security analysis on mobile apps.
Recent research has proposed more general methods that do
not rely on a priori knowledge about what types of libraries are
to be identiﬁed. WuKong [7] is an Android app clone detector
which ﬁlters out third-party libraries before computing app
similarity. WuKong adopts the assumption that a library con-
sists of only one package. For each package, WuKong assigns
the set of invoked Android API functions as its signature.
Given a large set of apps, WuKong clusters all packages by
this signature and reports clusters that are large enough to be
recognized as a third-party libraries. LibRadar [8] is an online
service that implements the identiﬁcation method of WuKong,
with a better-performing package clustering algorithm.
To distinguish app-speciﬁc classes from third-party-library
classes, V´asquez et al. [59], [60] extracted the package name
(i.e., main package) from AndroidManifest.xml for an
app. Then, they considered all the classes inside the main
package and its sub-packages as app-speciﬁc classes; classes
outside the main package were considered as classes from
third-party libraries. An empirical study conducted by Li et
al. [9] investigated the usage patterns of third-party Android
libraries. Another study by Chen et al. [10] tried to ﬁnd
potentially harmful libraries in iOS as well as Android apps.
Both studies need to identify Android third-party libraries ﬁrst,
but they adopt an approach different from the one employed
by WuKong. Instead of matching packages by signature, the
two studies cluster library candidates by computing a distance
metric between each pair of them. The distance is based
on binary similarity and computed through binary difﬁng
algorithms. With the distances computed, candidates close to
each other are clustered and considered to belong to the same
library. Since binary difﬁng is usually very costly, both studies
have to perform pre-clustering based on package names to
narrow the scope of pair-wise library candidate comparison,
which could be impeded by obfuscation.
B. Code Clone Detection
The problem of library detection is closely related to the
more generalized clone detection problem. Many techniques
have been proposed to ﬁnd pairs of code fragments that share
the same provenance. Different from library detection, general
code detection typically searches for similarity matches at a
pre-deﬁned level of code structures, e.g., functions, ﬁles, and
whole programs. In contrast, library detection needs to identify
the boundary of similarity comparison without much prior
knowledge.
Code clone detection techniques work on various syntactic
and semantic features of programs. The similarity can be
computed based on tokens [40], [61]–[64], parsing trees [41],
[65], [66], and dependence graphs [4], [67], [68]. In addition
to traditional structure levels, recent methods have started
working on more semantics-related abstractions. For example,
McMillan et al. [69] proposed to model software functionality
with the patterns of standard library API invocations. In their
method, Java APIs are grouped by their afﬁliations with classes
and packages and assigned different weights based on their
likelihood of occurrence in code repositories. Additionally,
APIs correlated to each other in terms of functionality (i.e.,
compression and IO) are particularly considered as subgroups.
These factors are coalesced to form a similarity measure
called Latent Semantic Indexing (LSI). Compared to our
method, LSI is more semantics-centric, thus more suitable
for identifying applications that implement similar function-
ality but not necessarily with the same provenance. Another
recently proposed clone detection method takes one more
step further and inspects code semantics similarity at an even
ﬁner granularity. Luo et al. [48] used symbolic execution to
abstract code semantics with logic formulas. The semantics
equivalence of different code segments is then proved by as-
serting the equivalence of the resulting formulas. This method
is very resilient to various software obfuscation algorithms.
However, since the method is designed for pairwise similarity
comparison, the cost of applying to millions of applications
all together is unlikely to be affordable.
It is known that different clone detection methods engi-
neered different features and similarity measures to capture
software relevance, while each feature has its own strengths
and weaknesses. For improved generality of code detection,
researchers have considered combining multiple features and
measures together to build more rigorous portraits for code
segments. For example Davies et al. [70] developed the
Software Bertillonage framework which utilized count-based
(e.g., number of API calls), set-based (e.g., the set of classes
in a package and the set of methods in a class), and sequence-
based (e.g., sequence of method deﬁnition in a class) features
simultaneously. Although the multi-dimensional features can
boost the performance of clone detection in many cases, the
method is not very resilient to obfuscations and thus does
not work well in adversarial settings. Simple obfuscations like
global symbol and package renaming could thwart Bertillon-
age.
Latest progress in code clone detection [71] employs deep
learning techniques, which shifts the part of the burden of
feature engineering from detector designers to automated
probabilistic learners, i.e., recurrent neural networks.
19
C. Applications
Third-party library identiﬁcation has been used to imple-
ment many security applications targeting the Android ecosys-
tem, one of which is Android app clone and repackaging
detection [4], [7], [16], [72]–[75]. In this application, third-
party libraries are considered noises, so they need to be
detected and ﬁltered out before app plagiarism is checked.
Another important application of library identiﬁcation is
mobile vulnerability analysis. Paturi et al. [76] and Stevens et
al. [77] extracted advertising libraries from popular Android
apps and studied the privacy leakage problems residing in
these libraries. Jin et al. [78] discovered that some third-party
libraries providing HTML5 support for mobile developers
can be easily exploited by code injection attacks. SMV-
HUNTER [25] analyzed the man-in-the-middle SSL/TSL vul-
nerabilities in Android apps and third-party libraries. Li et
al. [79] found a vulnerability in a speciﬁc version of the
Google cloud messaging library that leads to private data
leakage. Since these vulnerabilities are sometimes closely
coupled with speciﬁc libraries, identifying those libraries can
be very helpful to searching for certain kinds of security
threats. LibD can in general assist with these applications.
X. CONCLUSION
In this paper, we present a novel technique for identifying
third-party libraries in Android apps. Our method overcomes
some long existing limitations in previous work that affect
library identiﬁcation accuracy. We have implemented our
method in a tool called LibD. From a dataset of 1,427,395 An-
droid apps recently collected from 45 markets, LibD identiﬁed
60,729 different third-party libraries with a manually validated
accuracy rate that clearly surpasses similar tools. In particular,
our tool possesses certain degrees of obfuscation resilience.
Our experimental results show that LibD can ﬁnd 19,540
libraries whose package names are obfuscated. We exploit
LibD on SmartDroid, a real vulnerability detection system to
detect the vulnerable library versions. The evaluation result
shows that LibD can ﬁnd 10,801 vulnerable library instances
and accelerate the analysis speed by 5.5 times.
ACKNOWLEDGMENTS
This research was supported in part by the National Natu-
ral Science Foundation of China (No. 61572481, 61402471,
61472414 and 61602470), the Program of Beijing Municipal
Science & Technology Commission (No. Y6C0021116), the
US National Science Foundation (Grant No. CCF-1320605),
and Ofﬁce of Naval Research (Grant No. N00014-13-1-0175,
N00014-16-1-2265, and N00014-16-1-2912).
REFERENCES
[1] M. Li, W. Wang, P. Wang, S. Wang, D. Wu, J. Liu, R. Xue, and
W. Huo, “LibD: Scalable and precise third-party library detection
in Android markets,” in Proceedings of
the 39th International
Conference on Software Engineering, ser. ICSE ’17.
Piscataway,
NJ, USA:
[Online]. Available:
https://doi.org/10.1109/ICSE.2017.38
IEEE Press, 2017, pp. 335–346.
[2] “Number of apps available in leading app stores as of July 2015,”
http://www.statista.com/statistics/276623/number-of-apps-available-in-
leading-app-stores/.
[3] J. Lin, B. Liu, N. Sadeh, and J. I. Hong, “Modeling users mobile app
privacy preferences: Restoring usability in a sea of permission settings,”
in Proceedings of the 2014 Symposium On Usable Privacy and Security,
ser. SOUPS ’14, 2014, pp. 199–212.
[4] K. Chen, P. Liu, and Y. Zhang, “Achieving accuracy and scalability
simultaneously in detecting application clones on Android markets,” in
Proceedings of the 36th International Conference on Software Engineer-
ing, ser. ICSE ’14, 2014, pp. 175–186.
[5] B. Liu, B. Liu, H. Jin, and R. Govindan, “Efﬁcient privilege de-
escalation for ad libraries in mobile apps,” in Proceedings of the 13th
Annual International Conference on Mobile Systems, Applications, and
Services, ser. MobiSys ’15, 2015, pp. 89–103.
[6] J. Crussell, C. Gibler, and H. Chen, “Scalable semantics-based detection
of similar Android applications,” in Proc. of Esorics, 2013.
[7] H. Wang, Y. Guo, Z. Ma, and X. Chen, “WuKong: A scalable and accu-