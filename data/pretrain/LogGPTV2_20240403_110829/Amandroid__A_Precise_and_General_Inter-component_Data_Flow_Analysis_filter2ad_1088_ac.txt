### 4. Experimentation and Evaluation

We conducted extensive experiments with Amandroid across various security analyses. Our datasets included 753 popular applications from Google Play (the same dataset used in the Epicc study [25] and made available by the authors), a sample of 100 malware apps from Arbor Networks, and two benchmarks (hand-crafted apps by other researchers and us). For brevity, we refer to the first two datasets as GPlay and MAL, respectively.

#### 4.1 Performance and Scalability

Our experiments were conducted on a machine with 2 × 2.26 GHz Quad-Core Xeon processors and 32 GB of RAM. Amandroid offers multiple precision levels, with the context length \( k \) serving as a parameter to balance precision and performance. In our experimentation, we set \( k = 1 \), meaning the static analyzer tracks up to one calling context. Amandroid also allows users to define the scope of the analysis by excluding certain third-party libraries. We excluded a few popular third-party libraries due to their large size, which could be separately analyzed, summarized, and reused for all apps that include them. The modeling techniques for these excluded libraries are the same as those explained in Section 3.3.2.

The most computationally intensive step in Amandroid is building the IDFG. Once the IDFG is built, the running times of subsequent analyses, such as building the DDG and running specialized analyses using IDFG and DDG, are negligible in comparison. Figure 4 shows the time taken by Amandroid to construct the IDFG for 853 apps, measured on the GPlay and MAL datasets, which consist of real-world apps. During the experiment, we limited the processing time of each app component to 10 minutes; Amandroid exceeded this timeout for 86 out of 853 apps. The median time per app was 29 seconds, with a minimum of 2 seconds and a maximum of 113 minutes and 29 seconds. The scatter plot in Figure 4 illustrates both the running time and the size of the app (in terms of bytecode instructions).

#### 4.2 Application to Security Analysis

We report the results of our experiments addressing data leaks, data injection, and misuse of APIs, as discussed in Section 3.5. All experiments were conducted using the GPlay and MAL datasets (real-world apps).

##### 4.2.1 Data Leak

**Password Leaks:**
We vetted apps for proper handling of user passwords using the policy: "passwords should not be saved on the device (even when encrypted) and should be transferred to a remote server only via HTTPS." Amandroid can verify whether an app adheres to this policy. The task involves identifying variables corresponding to password objects (sources) and defining potential leaking sinks.

To find the TextView item corresponding to a password (where the `inputType` attribute's value is `textPassword`), we identified its unique ID in the app’s layout file. Amandroid then searched for the usage of this ID in the method call `Context.getViewbyId(x)`, performed through a standard reaching-definition analysis on the intra-procedural control-flow graph. This method returns an `EditText` object `y`, and `y.getText()` provides the password object. We defined this object as the source. The list of sink APIs includes relevant I/O operations (e.g., `Log.i(key, value)` and `URL.openConnection()`). The rest of the analysis follows the straightforward application of DDG, as explained in Section 3.5.

We found several instances of password leakage. Table 1 summarizes some of the results:
- **Case 1:** Password logged in clear text.
- **Case 2:** Password sent over HTTP.
- **Case 3:** Password saved in `SharedPreference`.

**OAuth Token Leaks:**
OAuth 2.0 is a popular authentication protocol frequently used for single-sign-on (SSO) and social sharing. If an OAuth token is stolen, the user’s corresponding Identity Provider (IdP) account can be compromised. Amandroid can check if an app adheres to the OAuth token protection policy. The source of potential leaks is determined by tracking the string literal "access-token" and marking related object creation statements as sources. The sinks are the same as in password leak detection. We found several potential OAuth token leakage cases, as shown in Table 2:
- **Case 1:** Implicit intent carrying the token possibly reaching a malicious app.
- **Case 2:** Malicious app with Log-read permission grabbing the OAuth token.

##### 4.2.2 Data Injection

We identified various intent injection problems in our experiments, as shown in Table 3:
- **Case 1:** Attacker controls the "url" string in `TwitterLoginActivity`.
- **Case 2:** Destination of an ICC depends on an incoming intent controlled by the attacker.

##### 4.2.3 API Misuse

We found several apps violating the rule against using ECB mode for encryption. Table 4 shows some of the results:
- **Case 1:** Encrypting OAuth token using AES ECB mode and storing it in `SharedPreference`.
- **Case 2:** Encrypting the password using AES ECB mode.

##### 4.2.4 Building New Analyses

Amandroid’s framework provides a means for building a variety of further security analyses in a straightforward and easy way. Each special analysis involves developing a “plugin” that leverages the IDFG and DDG from Amandroid’s core analysis. Once the core analysis produces the IDFG and DDG for an app, they can be stored and reused in multiple security analyses. Table 5 summarizes the plugins used in the above applications, showing the sizes of the plugin in Scala LOC and the average running time of each plugin, compared to the core engine.

#### 4.3 Comparison with Existing Tools

We used three benchmark test suites to compare Amandroid with FlowDroid [6, 17] and Epicc [25]. The benchmark test suites consist of hand-crafted apps designed to test specific analysis features. Since the ground truth is known for these apps, we can compute metrics such as precision and recall. However, these metrics may not represent the real-world performance of the tools.

**ICC Test:**
Table 6 summarizes the results of ICC testing using Part A of ICC-Bench. Amandroid successfully passed all tests for the three steps required to handle ICC. Epicc only addresses Step 1 and did not pass the tests for Steps 2 and 3. FlowDroid does not address ICC and did not pass any of the tests. Amandroid can handle all types of intents: explicit, implicit, and mixed. Epicc failed tests involving the `mData` or `mType` fields of an intent.

**Data Leak:**
We compared the effectiveness of Amandroid’s data leak detection with FlowDroid and Epicc on DroidBench and ICC-Bench. The results are shown in terms of True Positive (O), False Positive (*), and False Negative (X). Only FlowDroid and Amandroid can perform static taint analysis to find leak paths; Epicc only outputs information.

Table 7: DroidBench Test Results
| App Name | FlowDroid | Amandroid | Epicc |
|----------|-----------|-----------|-------|
| ArrayAccess1 | O | O | X |
| ArrayAccess2 | O | O | X |
| ListAccess1 | O | O | X |
| AnonymousClass1 | O | O | X |
| Button1 | O | O | X |
| Button2 | O | O | X |
| LocationLeak1 | O | O | X |
| LocationLeak2 | O | O | X |
| MethodOverride1 | O | O | X |

This table shows the results for each app, indicating the ability of each tool to correctly identify data leak paths.