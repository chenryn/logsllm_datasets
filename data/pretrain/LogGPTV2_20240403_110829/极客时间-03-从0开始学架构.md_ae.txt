## 架构设计的真正目的那架构设计的真正目的究竟是什么？``{=html}从周二与你分享的架构设计的历史背景，可以看到，整个软件技术发展的历史，其实就是一部与"复杂度"斗争的历史，架构的出现也不例外。简而言之，架构也是为了应对软件系统复杂度而提出的一个解决方案，通过回顾架构产生的历史背景和原因，我们可以基本推导出答案：**架构设计的主要目的是为了解决软件系统复杂度带来的问题**。这个结论虽然很简洁，但却是架构设计过程中需要时刻铭记在心的一条准则，为什么这样说呢？首先，遵循这条准则能够让"新手"架构师**心中有数，而不是一头雾水**。新手架构师开始做架构设计的时候，心情都很激动，希望大显身手，甚至恨不得一出手就设计出世界上最牛的XX架构，从此走上人生巅峰，但真的面对具体的需求时，往往都会陷入一头雾水的状态："这么多需求，从哪里开始下手进行架构设计呢？"。"架构设计要考虑高性能、高可用、高扩展......这么多高XX，全部设计完成估计要 1 个月，但老大只给了 1 周时间"。"业界 A 公司的架构是 X，B 公司的方案是Y，两个差别比较大，该参考哪一个呢？"。以上类似问题，如果明确了"架构设计是为了解决软件复杂度"原则后，就很好回答。-   "这么多需求，从哪里开始下手进行架构设计呢？"------通过熟悉和理解需求，识别系统复杂性所在的地方，然后针对这些复杂点进行架构设计。-   "架构设计要考虑高性能、高可用、高扩展......这么多高    XX，全部设计完成估计要 1 个月，但老大只给了 1 周时间"------架构设计并不是要面面俱到，不需要每个架构都具备高性能、高可用、高扩展等特点，而是要识别出复杂点然后有针对性地解决问题。-   "业界 A 公司的架构是 X，B 公司的方案是    Y，两个差别比较大，该参考哪一个呢？"------理解每个架构方案背后所需要解决的复杂点，然后才能对比自己的业务复杂点，参考复杂点相似的方案。其次，遵循这条准则能够让"老鸟"架构师**有的放矢，而不是贪大求全**。技术人员往往都希望自己能够做出最牛的东西，架构师也不例外，尤其是一些"老鸟"架构师，为了证明自己的技术牛，可能会陷入贪大求全的焦油坑而无法自拔。例如："我们的系统一定要做到每秒 TPS 10 万"。"淘宝的架构是这么做的，我们也要这么做"。"Docker 现在很流行，我们的架构应该将 Docker 应用进来"。以上这些想法，如果拿"架构设计是为了解决软件复杂度"这个原则来衡量，就很容易判断。-   "我们的系统一定要做到每秒 TPS 10 万"------如果系统的复杂度不是在性能这部分，TPS 做到 10 万并没有什么用。-   "淘宝的架构是这么做的，我们也要这么做"------淘宝的架构是为了解决淘宝业务的复杂度而设计的，淘宝的业务复杂度并不就是我们的业务复杂度，绝大多数业务的用户量都不可能有淘宝那么大。-   "Docker 现在很流行，我们的架构应该将 Docker 应用进来"------Docker不是万能的，只是为了解决资源重用和动态分配而设计的，如果我们的系统复杂度根本不是在这方面，引入Docker 没有什么意义。
## 简单的复杂度分析案例我来分析一个简单的案例，一起来看看如何将"架构设计的真正目的是为了解决软件系统复杂度带来的问题"这个指导思想应用到实践中。假设我们需要设计一个大学的学生管理系统，其基本功能包括登录、注册、成绩管理、课程管理等。当我们对这样一个系统进行架构设计的时候，首先应识别其复杂度到底体现在哪里。性能：一个学校的学生大约 1 \~ 2万人，学生管理系统的访问频率并不高，平均每天单个学生的访问次数平均不到 1次，因此性能这部分并不复杂，存储用 MySQL完全能够胜任，缓存都可以不用，Web 服务器用 Nginx 绰绰有余。可扩展性：学生管理系统的功能比较稳定，可扩展的空间并不大，因此可扩展性也不复杂。高可用：学生管理系统即使宕机 2小时，对学生管理工作影响并不大，因此可以不做负载均衡，更不用考虑异地多活这类复杂的方案了。但是，如果学生的数据全部丢失，修复是非常麻烦的，只能靠人工逐条修复，这个很难接受，因此需要考虑存储高可靠，这里就有点复杂了。我们需要考虑多种异常情况：机器故障、机房故障，针对机器故障，我们需要设计MySQL 同机房主备方案；针对机房故障，我们需要设计 MySQL 跨机房同步方案。安全性：学生管理系统存储的信息有一定的隐私性，例如学生的家庭情况，但并不是和金融相关的，也不包含强隐私（例如玉照、情感）的信息，因此安全性方面只要做3 个事情就基本满足要求了：Nginx 提供 ACL控制、用户账号密码管理、数据库访问权限控制。成本：由于系统很简单，基本上几台服务器就能够搞定，对于一所大学来说完全不是问题，可以无需太多关注。还有其他方面，如果有兴趣，你可以自行尝试去分析。通过我上面的分析，可以看到这个方案的主要复杂性体现在存储可靠性上，需要保证异常的时候，不要丢失所有数据即可（丢失几个或者几十个学生的信息问题不大），对应的架构如下：![](Images/8a3ad8d104ebb70a40867268bf19014a.png){savepage-src="https://static001.geekbang.org/resource/image/97/d4/970f83d548b6b4a5c7903b3fc1f3b8d4.jpg"}学生管理系统虽然简单，但麻雀虽小五脏俱全，基本上能涵盖软件系统复杂度分析的各个方面，而且绝大部分技术人员都曾经自己设计或者接触过类似的系统，如果将这个案例和自己的经验对比，相信会有更多的收获。
## 小结今天我为你分析了架构设计的误区，结合周二讲的架构设计的历史背景，给出架构设计的主要目的是为了解决软件系统复杂度带来的问题，并分析了一个简单复杂度的案例，希望对你有所帮助。这就是今天的全部内容，留一道思考题给你吧。请按照"架构设计的主要目的是为了解决软件复杂度带来的问题"这个指导思想来分析一下你目前的业务系统架构，看看是否和你当时分析的结果一样？欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）最后给你推荐一个课程，极客时间新上线了《Java 核心技术 36 讲》，由 Oracle首席工程师杨晓峰老师给你精讲大厂 Java 面试题，帮你构建 Java知识体系，[你可以点击下方图片进入课程。]{.orange}![](Images/5e65e6dd1291db9f4a15600dd5b07126.png){savepage-src="https://static001.geekbang.org/resource/image/89/6c/891e4be4057f6b3ab7e43979a0b1286c.jpg"}](http://time.geekbang.org/column/intro/82?utm_source=app&utm_medium=81&utm_campaign=82-presell&utm_content=article)
# 04 \| 复杂度来源：高性能周四，我为你讲了架构设计的主要目的是为了解决软件系统复杂度带来的问题。那么从今天开始，我将为你深入分析复杂度的6 个来源，先来聊聊[复杂度的来源之一高性能]{.orange}。对性能孜孜不倦的追求是整个人类技术不断发展的根本驱动力。例如计算机，从电子管计算机到晶体管计算机再到集成电路计算机，运算性能从每秒几次提升到每秒几亿次。但伴随性能越来越高，相应的方法和系统复杂度也是越来越高。现代的计算机CPU集成了几亿颗晶体管，逻辑复杂度和制造复杂度相比最初的晶体管计算机，根本不可同日而语。软件系统也存在同样的现象。最近几十年软件系统性能飞速发展，从最初的计算机只能进行简单的科学计算，到现在Google能够支撑每秒几万次的搜索。与此同时，软件系统规模也从单台计算机扩展到上万台计算机；从最初的单用户单工的字符界面Dos 操作系统，到现在的多用户多工的 Windows 10 图形操作系统。当然，技术发展带来了性能上的提升，不一定带来复杂度的提升。例如，硬件存储从纸带→磁带→磁盘→SSD，并没有显著带来系统复杂度的增加。因为新技术会逐步淘汰旧技术，这种情况下我们直接用新技术即可，不用担心系统复杂度会随之提升。只有那些并不是用来取代旧技术，而是开辟了一个全新领域的技术，才会给软件系统带来复杂度，因为软件系统在设计的时候就需要在这些技术之间进行判断选择或者组合。就像汽车的发明无法取代火车，飞机的出现也并不能完全取代火车，所以我们在出行的时候，需要考虑选择汽车、火车还是飞机，这个选择的过程就比较复杂了，要考虑价格、时间、速度、舒适度等各种因素。软件系统中高性能带来的复杂度主要体现在两方面，一方面是**单台计算机内部为了高性能带来的复杂度**；另一方面是**多台计算机集群为了高性能带来的复杂度**。
## 单机复杂度 {#05.html#-}计算机内部复杂度最关键的地方就是操作系统。计算机性能的发展本质上是由硬件发展驱动的，尤其是CPU 的性能发展。著名的"摩尔定律"表明了 CPU 的处理能力每隔 18个月就翻一番；而将硬件性能充分发挥出来的关键就是操作系统，所以操作系统本身其实也是跟随硬件的发展而发展的，操作系统是软件系统的运行环境，操作系统的复杂度直接决定了软件系统的复杂度。操作系统和性能最相关的就是**进程**和**线程**。最早的计算机其实是没有操作系统的，只有输入、计算和输出功能，用户输入一个指令，计算机完成操作，大部分时候计算机都在等待用户输入指令，这样的处理性能很显然是很低效的，因为人的输入速度是远远比不上计算机的运算速度的。为了解决手工操作带来的低效，批处理操作系统应运而生。批处理简单来说就是先把要执行的指令预先写下来（写到纸带、磁带、磁盘等），形成一个指令清单，这个指令清单就是我们常说的"任务"，然后将任务交给计算机去执行，批处理操作系统负责读取"任务"中的指令清单并进行处理，计算机执行的过程中无须等待人工手工操作，这样性能就有了很大的提升。批处理程序大大提升了处理性能，但有一个很明显的缺点：计算机一次只能执行一个任务，如果某个任务需要从I/O 设备（例如磁带）读取大量的数据，在 I/O 操作的过程中，CPU其实是空闲的，而这个空闲时间本来是可以进行其他计算的。``{=html}为了进一步提升性能，人们发明了"进程"，用进程来对应一个任务，每个任务都有自己独立的内存空间，进程间互不相关，由操作系统来进行调度。此时的CPU还没有多核和多线程的概念，为了达到多进程并行运行的目的，采取了分时的方式，即把CPU的时间分成很多片段，每个片段只能执行某个进程中的指令。虽然从操作系统和CPU 的角度来说还是串行处理的，但是由于 CPU的处理速度很快，从用户的角度来看，感觉是多进程在并行处理。多进程虽然要求每个任务都有独立的内存空间，进程间互不相关，但从用户的角度来看，两个任务之间能够在运行过程中就进行通信，会让任务设计变得更加灵活高效。否则如果两个任务运行过程中不能通信，只能是A 任务将结果写到存储，B任务再从存储读取进行处理，不仅效率低，而且任务设计更加复杂。为了解决这个问题，进程间通信的各种方式被设计出来了，包括管道、消息队列、信号量、共享存储等。多进程让多任务能够并行处理任务，但本身还有缺点，单个进程内部只能串行处理，而实际上很多进程内部的子任务并不要求是严格按照时间顺序来执行的，也需要并行处理。例如，一个餐馆管理进程，排位、点菜、买单、服务员调度等子任务必须能够并行处理，否则就会出现某个客人买单时间比较长（比如说信用卡刷不出来），其他客人都不能点菜的情况。为了解决这个问题，人们又发明了线程，线程是进程内部的子任务，但这些子任务都共享同一份进程数据。为了保证数据的正确性，又发明了互斥锁机制。有了多线程后，操作系统调度的最小单位就变成了线程，而进程变成了操作系统分配资源的最小单位。多进程多线程虽然让多任务并行处理的性能大大提升，但本质上还是分时系统，并不能做到时间上真正的并行。解决这个问题的方式显而易见，就是让多个CPU能够同时执行计算任务，从而实现真正意义上的多任务并行。目前这样的解决方案有3 种：SMP（SymmetricMulti-Processor，对称多处理器结构）、NUMA（Non-Uniform MemoryAccess，非一致存储访问结构）、MPP（Massive ParallelProcessing，海量并行处理结构）。其中 SMP是我们最常见的，目前流行的多核处理器就是 SMP 方案。操作系统发展到现在，如果我们要完成一个高性能的软件系统，需要考虑如多进程、多线程、进程间通信、多线程并发等技术点，而且这些技术**并不是最新的就是最好的，也不是非此即彼的选择**。在做架构设计的时候，需要花费很大的精力来结合业务进行分析、判断、选择、组合，这个过程同样很复杂。举一个最简单的例子：Nginx可以用多进程也可以用多线程，JBoss 采用的是多线程；Redis采用的是单进程，Memcache采用的是多线程，这些系统都实现了高性能，但内部实现差异却很大。