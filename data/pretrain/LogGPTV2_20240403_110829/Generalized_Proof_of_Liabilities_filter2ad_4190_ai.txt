on lottery frauds all the time [29, 70, 71].
PoL can be applied to lottery audit for ensuring the consistency
between the reported total pot and participants’ contributions with-
out involving a third party auditor. The lottery organizer is the
prover and since the pot depends on the total bet, he has not in-
centive to increase the amount. Players can check whether their
contributions are included individually while actual values can be
concealed from the public.
Referral schemes. Referral websites (referrers) are intermediate
domains that contain links directing visitors to other sites (referees).
Referrals increase the traffic to the referred websites, and can be
beneficial because they may invoke business activities by visitors,
e.g., purchasing products or depositing money.
negatively and repetitively against some item either, so there is need
in preventing this and sybil attacks with additional mechanisms.
Moreover, PoL cannot be applied to rating systems that report
average scores because a malicious prover can insert high ratings
to increase the average as much as desired.
Official liability reports. During pandemics there is always
an urgent need to monitor and track the numbers of infections
and deaths because they help epidemiologists learn more about the
disease, stop the spread and find a cure. For instance, authorities
globally collect COVID-19 data and publish daily reports [28].
Referred websites may need to pay referral websites for referrals
based on visitors’ activities. Many websites though pay referrals
by sign ups (not visits) or amount deposited by the final client (i.e.,
gambling websites). Thus, it is hard to verify whether the referee
intentionally reports a smaller amount of liabilities.
PoL could be a complementary tool for solving the above issue in
a distributed way. Briefly, the referee generates a PoL proof for all
visiting activities. If visitors are incentivized to verify the inclusion
or if there is an automatic scheme, e.g., by the browser to request
PoL proofs, the referee won’t be able to claim lower traffic/action
numbers. Note that PoL on itself doesn’t solve the whole problem,
however. The issue of how to distinguish between human behaviors
and automatic bots when measuring traffic is also concerning and
challenging [76].
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3480B VULNERABILITIES IN EXISTING SCHEMES
B.1 Maxwell-Todd
(a) The prover is honest.
(b) The prover is malicious.
Figure 6: An example of the vulnerability in the Maxwell-
Todd scheme with 4 users.
Maxwell-Todd breaks non-equivocation [43]. Because there’s no
binding between the hash in a node and the values in its child nodes,
provers can cheat even when every user verifies their inclusion
proofs.
An example of the vulnerability is shown in fig. 6. When the
prover is honest, the sum in the root node should be 10, as demon-
strated in fig. 6a. When the prover is adversarial, however, the sum
in the root node could be maliciously committed to 4, as shown
in fig. 6b. Note that when a user asks for the inclusion proof, the
malicious prover is able to serve a proof that passes the verification
successfully. For example, for user 𝑢3, the prover generates a Merkle
path containing two nodes, 𝑁𝑜𝑑𝑒4 = (1, ℎ4) and 𝑁𝑜𝑑𝑒5 = (0, ℎ′
5).
Then 𝑢3 computes 𝑁𝑜𝑑𝑒6 = (3 + 1 = 4, ℎ′
6 = H(4||ℎ3||ℎ4)) and
𝑁𝑜𝑑𝑒7 = (0 + 4 = 4, ℎ′
6)), which matches the pub-
lished root node.
7 = H(4||ℎ′
5||ℎ′
B.2 DAPOL
DAPOL may leak information about the number of users because
padding nodes are distinguishable from nodes of other types. A
semi-honest user can infer which nodes in the Merkle proof are
padding nodes by checking if the node hash equals toH(“𝑝𝑎𝑑”||𝑖𝑑𝑥).
As discussed in section 2, assuming an inclusion proof consists of
padding nodes at heights {𝑥1, · · · , 𝑥𝑚} (root at height 0), the user
can bound the number of users within the range [𝐻 − 𝑚 + 1, 2𝐻 −
𝑖=1 2𝐻−𝑥𝑖].
𝑚
Figure 7: An example of the DAPOL SMT with 1 single user.
We demonstrate the leakage by an example. Suppose there is
only 1 user as depicted in fig. 7. User 𝑢1 receives an inclusion proof
consisting of two padding node at heights {1, 2}. Thus 𝑢1 can infer
that he/she is the single user the prover is liable to.
C TOOLS FOR PROOF OF LIABILITIES
We briefly introduce tools that are potential building blocks when
implementing PoL schemes in this section.
C.1 Public Bulletin Board
A bulletin board is a public append-only memory to which anyone
has access. People interacting with a PBB are guaranteed to have
consistent views of the contents on it. A secure PoL protocol needs
a PBB to enable users to have the same view of the prover’s claims
about the total liabilities and to make sure if their own individual
amounts are included. Without a PBB, a malicious prover can al-
ways show different total liabilities to different users, excluding
some other users’ amounts without being detected. To implement
a PBB, we either have to place all trust on a single entity for being
honest and available all the time, e.g., a trusted hardware which
doesn’t need to be trusted for confidentiality but only integrity, or
use a decentralized scheme [33, 41], such as a blockchain which is
believed to be the most practical and promising implementation of
a PBB. Note that a forkless blockchain is preferable, otherwise the
blockchain need to be resistant to long range attacks [34] to func-
tion as a PBB. Due to its low throughput of transactions, committing
data on a blockchain is expensive. Therefore a minimized size of
commitments on the PBB is desired in a practical PoL protocol.
C.2 Accumulators
Cryptographic accumulators [5] are one-way functions allowing
space/time efficient membership and/or non-membership proofs,
i.e., whether an element is a member of a set can be proved effi-
ciently. To enable users to check if their amounts are included in
the prover’s total liabilities while minimizing the public commit-
ment size on a PBB, we can use accumulators for PoL protocols.
RSA accumulators [2, 15] are a class of accumulators but don’t
support summation, thus cannot be used for PoL to prove each
user’s contribution to the total liabilities. Besides, RSA accumu-
lators are index-free, i.e., the members of a set are not ordered.
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3481In section 4.4.5, we discuss an additional property of PoL protocols
- random sampling, which requires indexes of set elements, and
RSA accumulators cannot provide this property. In contrast, Merkle
trees [14, 53] are a class of tree-based accumulators that can support
summation and membership proofs in an ordered set. Therefore,
Merkle tree is an ideal accumulator for PoL.
Summation Merkle Trees. Summation Merkle trees are a type
of Merkle trees supporting summation of elements in a set, i.e., not
only proving the inclusion of an element as a leaf node in the tree,
but also that the value of the leaf node is summed in the root node.
It was first proposed in [73] followed with a security patch [43],
by adding a value field 𝑐 to each tree node along with the original
hash field ℎ. The merging function of each node from its two child
nodes 𝑙𝑐ℎ and 𝑟𝑐ℎ is 𝑐 = 𝑐𝑙𝑐ℎ + 𝑐𝑟𝑐ℎ, ℎ = H(𝑐𝑙𝑐ℎ ||𝑐𝑟𝑐ℎ ||ℎ𝑙𝑐ℎ ||ℎ𝑟𝑐ℎ),
where H(·) is a collision-free hash function. The value field of the
root node should equal to the sum of that of all leaf nodes.
Sparse Merkle Trees. Sparse Merkle trees (SMT) can be used to
conceal the population while neither a Patricia Merkle tree used in
SEEMless [21] nor a full Merkle tree is suitable. In a Patricia Merkle
tree of height 𝐻 with the root at height 0, each user is mapped to
a node indexed at height 𝐻, but might not reside in that mapped
node. Instead, each user moves up along its path to the root as long
as the subtree rooted at the current node contains no other users’
mapped nodes. Eventually users stop moving and reside in the
highest nodes that satisfy the condition above. Although the tree
is compact, a PoL based on Patricia Merkle trees leaks the number
of users. For example, a user residing in a leaf node at height 𝑖 can
derive partial knowledge 𝑛 ≤ 2𝐻 − 2𝐻−𝑖 + 1. In the worst case,
all users colluding together can have a good estimate of 𝑛. A full
Merkle tree having all users reside in leaf nodes can conceal 𝑛 as
long as the tree height is large enough, i.e., 𝐻 ≥ ⌈log 𝑁⌉, 𝑁 being
the maximum potential population. However, this is inefficient
because there are 2𝐻+1 − 1 nodes in total thus the tree generation
complexity is 𝑂(2𝐻), independent of 𝑛. Sparse Merkle trees, instead,
provide an efficient and practical solution to privacy of population.
In an SMT, users are mapped to and reside in nodes at height 𝐻.
Instead of constructing a full binary tree, only tree nodes that are
necessary for Merkle proofs exist, thus the generation complexity
is 𝑂(𝑛 · 𝐻). We present this construction in detail in section 4.
C.3 Pedersen Commitments
Pedersen commitments [60] can be used to conceal the prover’s
liabilities to individual users in PoL. Given a cyclic group 𝐺 of
order 𝑞, two public random generators of the group 𝑔1, 𝑔2 whose
relative discrete logarithm is unknown to everyone, a Pedersen
commitment to a value 𝑙 ∈ Z𝑞 is Com(𝑙, 𝑏) = 𝑔𝑙
2 , where 𝑏,
the blinding factor, is a randomly selected element in Z𝑞. Pedersen
commitments are perfectly hiding (i.e., an unbounded adversary
cannot learn anything about a value from its commitment) and
computationally binding (i.e., a bounded adversary cannot open
a commitment for two different values). Additionally, Pedersen
commitments are addition-homomorphic, i.e., a commitment to the
sum of two values 𝑙1, 𝑙2 can be derived from the commitments to
them directly: Com(𝑙1, 𝑏1)·Com(𝑙2, 𝑏2) = 𝑔𝑙1+𝑙2
= Com(𝑙1+
𝑙2, 𝑏1+𝑏2). Therefore, users can audit the total liabilities in Pedersen
commitments instead of the plain values.
·𝑔𝑏1+𝑏2
2
1 · 𝑔𝑏
1
C.4 Zero-Knowledge Range Proofs
Zero-knowledge range proofs (ZKRFs) allow a prover to prove to
a verifier that a number 𝑥 is within a certain range [𝑎, 𝑏] and the
verifier is not able to learn 𝑥 from the proof. ZKRFs are utilized for
two purposes in DAPOL+. First, for the security of PoL, the prover
proves that each value committed is within a certain range to pre-
vent overflow when summing them up, e.g., if there are at most 𝑁
users, and in the worst case all users can have the same maximum
amount, the prover needs to prove that for each user’s committed
value 𝑣, it holds that 𝑣 ∈ [0, 𝑝/𝑁], where 𝑝 is the group order. Sec-
ond, depending on the particular application, a prover may prove
zero-knowledge claims regarding the total liabilities with its com-
mitment. For example, in the solvency case, the prover can prove
solvency by showing the total liabilities is no more than the total
assets he/she owns with a zero-knowledge range proof. Generic
zero-knowledge proofs constructions (e.g., Gro16 [40], Halo [10],
Ligero [1], Plonk [31]) offer ZKRFs but we choose Bulletproofs [11]
for DAPOL+ due to its aggregation property and no need of a
trusted setup.
C.5 Key Derivation Functions
Key derivation functions (KDF) are used to derive one or more secret
keys from a low-entropy secret value such as a password or stretch
keys to a desired length [46]. In PoL, this allows the prover and the
users to generate blinding factors in Pedersen commitments, user
masks and mapped tree node indexes in an SMT deterministically
from users’ unique IDs. Thus, in response to users’ verification
queries, the prover can send inclusion proofs without including any
sensitive information such as the blinding factors. With this feature,
the sparse Merkle tree of commitments can be outsourced to a third
party without leaking liabilities and users can interact with the third
party directly. In this way, the prover has no knowledge of which
users verify or not, and prevents the prover from manipulating
liabilities to users who seldom check based on the verification
patterns he/she learns.
C.6 Private Information Retrieval
Private information retrieval (PIR) protocols allow users storing
their data on a database to retrieve data without revealing which
piece of data is accessed [23]. It is proven that with a single server to
achieve information theoretic privacy, the communication complex-
ity is at least 𝑂(𝑛), i.e., the server returns the whole dataset to the
user. To get around this lower bound, we can distribute the database
to multiple entities assuming they don’t collude [3], or use a single
server assuming the adversary is computationally bounded [49], or
use trusted hardware [68]. To hide verifiers’ identities, PIR seems
to be a candidate solution.
C.7 Oblivious RAM
An oblivious RAM (ORAM) protocol enables users storing their data
on a database to safely read and write data without leaking their
access patterns [37, 38]. This can be used in PoL to support updates
of the prover’s liabilities to users while preserving privacy of update
patterns. Viewing the aggregated inclusion proofs from colluding
users as the dataset, the users play the role of the adversarial server
in ORAM attempting to infer information, while the prover acts as
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3482the data owner in ORAM aiming to conceal update patterns. Circuit
ORAM [69] is the first tree-based ORAM protocol that achieves
asymptotically optimal circuit size and bandwidth cost. Combining
it with zero-knowledge proofs, a new primitive called Publicly-