representable numbers between a and r [79], [106]. We show
an example in Figure 2.
r
Intel’s SVML [4] has ULP error below 4 and MKL [111]
guarantees ULP error below 1. It is important for the ULP
error to be low for reusability of the library implementations
as a low error gives the developers an assurance that the
library is producing precise results inasmuch as the underlying
representation permits.
B. Threat Model
We consider 2-party computation secure against a static
semi-honest adversary running in probabilistic polynomial
time. That is, we consider a computationally bounded adver-
sary A that corrupts one of the parties at the beginning of the
protocol execution, follows the protocol speciﬁcation, but tries
to learn additional information about the honest party’s input.
4Depth optimized GMW [49] has higher communication than GC for our
functionalities.
5See [48] for the formal deﬁnition of ULPs.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:57 UTC from IEEE Xplore.  Restrictions apply. 
1006
We argue security using the simulation paradigm [26], [49],
[81]. For any function f to be computed, consider following
two interactions: a real interaction where P0 and P1 interact
using the protocol speciﬁcation in the presence of A and the
environment Z and the ideal interaction where P0, P1 send
their inputs to the trusted functionality F that computes f
and sends the outputs to the parties. We argue that for every
real adversary A, there is an ideal adversary S such that no
environment Z interacting externally with the adversaries can
distinguish between real and ideal interactions. Our protocols
invoke several sub-protocols and for ease of exposition we
describe them using the hybrid model, which is the same as
a real interaction except that the sub-protocol executions are
replaced with calls to the corresponding trusted functionalities
– protocol invoking F is said to be in the F-hybrid model.
C. Notation
Let λ be computational security parameter. Uppercase
L, M, N denote 2(cid:96), 2m, 2n, respectively. [k] refers to the set
{0, . . . , k − 1}. 1{b} denotes the indicator function that is
1 when b is true, and 0 otherwise. We use the natural one-
to-one correspondence between {0, 1}(cid:96) and ZL. Consider the
lossless lifting operators ζ(cid:96) that maps an element of ring ZL
to Z and ζ(cid:96),m for m (cid:62) (cid:96) that maps an element of ring
ZL to ZM . For brevity, we suppress these operations when
their unambiguous use can be deduced from the context. For
an element x ∈ ZL, int(x) and uint(x) refer to the signed
and unsigned values in Z respectively, where the signed case
corresponds to the 2’s complement representation. uint(x) is
deﬁned as ζ(cid:96)(x) and int(x) = uint(x) − MSB(x) · L, where
MSB(x) = 1{x (cid:62) 2(cid:96)−1} is the most signiﬁcant bit. For
x, y ∈ ZL, wrap(x, y, L) is 1 if x + y (cid:62) L over Z and 0
otherwise. Finally, consider the operator ∗m : Z × Z → ZM
where x ∗m y = x · y mod M. When one or both inputs are
from some integer ring ZL, we use uint() and int() to map
the element to Z.
Fixed-Point Representation. We encode real numbers as
elements in ZL using their ﬁxed-point representation. Fixed-
point representation in ZL deﬁnes 2 variables, (cid:96) and s, where (cid:96)
is the bitwidth, s is the resolution (or, fractional part bitwidth)
referred to as the scale and (cid:96) − s is the bitwidth for the
integer part. A real number x ∈ R is encoded into its ﬁxed-
point representation ˆx ∈ ZL with bitwidth (cid:96) and scale s as
ˆx = Fix (x, (cid:96), s) = (cid:98)x·2s(cid:99) mod L. The reverse mappings from
ﬁxed-point representation to reals are urt((cid:96),s)(a) = uint(a)/2s
for unsigned numbers and srt((cid:96),s)(a) = int(a)/2s for signed
numbers, where division is over R.
D. Cryptographic Primitives
Secret Sharing. We use 2-out-of-2 additive secret sharing
schemes over different power-of-2 rings [16], [107]. For
x ∈ ZL, we denote its shares by (cid:104)x(cid:105)(cid:96) = ((cid:104)x(cid:105)(cid:96)
1) such
that x = (cid:104)x(cid:105)(cid:96)
b for b ∈ {0, 1}.
When (cid:96) = 1, i.e., over Z2, we use (cid:104)x(cid:105)B to denote boolean
shares. In our protocols, we write “P0 & P1 hold (cid:104)x(cid:105)(cid:96).” to
denote that Pb holds (cid:104)x(cid:105)(cid:96)
1 mod L and Pb holds (cid:104)x(cid:105)(cid:96)
b for b ∈ {0, 1}.
0 +(cid:104)x(cid:105)(cid:96)
0,(cid:104)x(cid:105)(cid:96)
1
(cid:1)-OT(cid:96), where one party
oblivious transfer (OT) denoted by(cid:0)k
Oblivious Transfer. Consider 2-party functionality 1-out-of-k
is the sender with k (cid:96)-bit messages x0, . . . , xk−1 ∈ {0, 1}(cid:96)
and the other party is the receiver with an index j ∈ [k]. The
receiver learns xj as the output, and the sender learns nothing.
We realize this functionality using the OT extension protocol
from [70], which optimizes and generalizes the protocol from
[62]. Additionally, we use the 1-out-of-2 correlated OT (COT)
inputs a correlation x ∈ ZL, receiver inputs a choice bit
j ∈ {0, 1}, and the functionality outputs a random element
r ∈ ZL to the sender and −r + j · x to the receiver. We
instantiate this functionality with the COT protocol from [11].
functionality (cid:0)2
Excluding the one-time setup cost for the base OTs,(cid:0)k
and(cid:0)2
k = 2,(cid:0)2
(cid:1)-COT(cid:96), which is deﬁned as follows: sender
(cid:1)-OT(cid:96)
(cid:1)-COT(cid:96) require 2λ+k(cid:96) and λ+(cid:96) bits of communication,
(cid:1)-OT(cid:96) requires λ + 2(cid:96) bits of communication [11].
respectively, and execute in 2 rounds6. For the special case of
1
1
1
1
E. 2PC Functionalities
For a 2-party functionality F, we say that “P0 & P1 invoke
F(x, y) to learn (cid:104)z(cid:105)(cid:96)” to mean that P0 with input x and P1
with input y invoke F and learn arithmetic shares of z over
ZL, i.e., P0 gets (cid:104)z(cid:105)(cid:96)
1. We write “F((cid:104)x(cid:105)(cid:96))”
to mean that F takes (cid:104)x(cid:105)(cid:96)
1 from P1. In our
protocols, we use the following 2-party functionalities.
0 from P0 and (cid:104)x(cid:105)(cid:96)
0 and P1 gets (cid:104)z(cid:105)(cid:96)
Millionaires’/Wrap: The (cid:96)-bit Millionaires’ functionality,
F (cid:96)
Mill takes as input x ∈ {0, 1}(cid:96) from P0 and y ∈ {0, 1}(cid:96)
from P1 and returns (cid:104)z(cid:105)B such that z = 1{x  m) by
y = ZExt(x, m, n) ∈ ZN (resp. y = SExt(x, m, n) ∈ ZN ),
such that uint(y) = uint(x) (resp. int(y) = int(x)) holds. In
Algorithm 1, we describe our protocol for F m,n
ZExt that takes as
input (cid:104)x(cid:105)m and outputs (cid:104)y(cid:105)n, where y = ZExt(x, m, n). This
protocol requires log m + 2 rounds and less than λ(m + 1) +
13m + n bits of communication.
lows: By correctness of F m
w = wrap((cid:104)x(cid:105)m
(cid:104)w(cid:105)n−m
wrap((cid:104)w(cid:105)n−m
((cid:104)w(cid:105)n−m
Hence, x mod N = y.
fol-
it holds that
b − M ·
− 2n−m ·
, 2n−m). Thus, M ∗n w = M ∗n
1 −w·M.
Wrap and F n−m
B2A ,
b=0((cid:104)x(cid:105)m
+(cid:104)w(cid:105)n−m
0 +(cid:104)x(cid:105)m
i.e., F m,n
) mod N. Over Z, w = (cid:104)w(cid:105)n−m
+(cid:104)w(cid:105)n−m
1 , M ) and y = (cid:80)1
Correctness of our protocol can be argued as
). Also, over Z, x = (cid:104)x(cid:105)m
Our protocol for signed extension,
0 ,(cid:104)x(cid:105)m
,(cid:104)w(cid:105)n−m
SExt, uses the
0
1
0
1
b
0
1
following equation over Z:
int(x) = x(cid:48) − 2m−1, for x(cid:48) = x + 2m−1 mod M .
(1)
This gives9 SExt(x, m, n) = ZExt(x(cid:48), m, n) − 2m−1.
As a baseline, one can use garbled circuits (GC) to real-
ize zero and signed-extensions with communication cost of
λ(4m+2n−4) bits, i.e., roughly 6× the cost of our protocols.
B. Truncation
We consider four types of truncation operations for ring
ZL as follows: We denote the logical and arithmetic right-
shift operators by (cid:29)L and (cid:29)A, respectively, whose inputs
are outputs are in ZL. Next, we deﬁne TR(x, s) (Truncate &
9A similar relation was used in [44] for truncation.
Algorithm 1 Zero Extension, Πm,n
ZExt:
Input: P0 & P1 hold (cid:104)x(cid:105)m.
Output: P0 & P1 get (cid:104)y(cid:105)n for y = ZExt(x, m, n).
1: P0 & P1 invoke F m
2: P0 & P1 invoke F n−m
3: For b ∈ {0, 1}, Pb outputs (cid:104)y(cid:105)n
Wrap((cid:104)x(cid:105)m
1 ) and learn (cid:104)w(cid:105)B.
B2A ((cid:104)w(cid:105)B) and learn (cid:104)w(cid:105)n−m.
0 ,(cid:104)x(cid:105)m
b = (cid:104)x(cid:105)m
b − M ∗n (cid:104)w(cid:105)n−m
.
b
Reduce x by s-bits) that takes inputs in ZL, drops the lower s-
bits from the bit-representation of x and outputs the truncated
value in smaller ring, Z2(cid:96)−s. Additionally, our benchmarks also
require the C-style division (quotients are rounded towards 0)
where the divisor is a power-of-2.
b as an (cid:96)-bit string ub||vb, where
ub ∈ {0, 1}(cid:96)−s and vb ∈ {0, 1}s.
Algorithm 2 Logical Right Shift, Π(cid:96),s
LRS:
Input: P0 & P1 hold (cid:104)x(cid:105)(cid:96).
Output: P0 & P1 get (cid:104)x(cid:29)Ls(cid:105)(cid:96).
1: For b ∈ {0, 1}, Pb parses (cid:104)x(cid:105)(cid:96)
2: P0 & P1 invoke F s
3: P0 & P1 invoke F (cid:96)−s
4: P0 & P1 invoke FAND((cid:104)c(cid:105)B,(cid:104)e(cid:105)B) and learn (cid:104)t(cid:105)B.
b ⊕ (cid:104)t(cid:105)B
5: For b ∈ {0, 1}, Pb sets (cid:104)w(cid:105)B
b .
B2A((cid:104)c(cid:105)B) and learn (cid:104)c(cid:105)(cid:96).
6: P0 & P1 invoke F (cid:96)
B2A((cid:104)w(cid:105)B) and learn (cid:104)w(cid:105)s.
7: P0 & P1 invoke F s
8: For b ∈ {0, 1}, Pb outputs ub − 2(cid:96)−s ∗(cid:96) (cid:104)w(cid:105)s
b = (cid:104)d(cid:105)B
Wrap(v0, v1) and learn (cid:104)c(cid:105)B.
Wrap&All1s(u0, u1) and learn (cid:104)d(cid:105)B||(cid:104)e(cid:105)B.