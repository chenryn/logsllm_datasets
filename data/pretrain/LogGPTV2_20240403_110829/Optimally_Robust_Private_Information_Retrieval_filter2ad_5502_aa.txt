title:Optimally Robust Private Information Retrieval
author:Casey Devet and
Ian Goldberg and
Nadia Heninger
Optimally Robust Private Information Retrieval∗
Casey Devet
Ian Goldberg
University of Waterloo
{cjdevet,iang}@cs.uwaterloo.ca
Nadia Heninger
University of California, San Diego
PI:EMAIL
Abstract
We give a protocol for multi-server information-theoretic
private information retrieval which achieves the theoret-
ical limit for Byzantine robustness. That is, the protocol
can allow a client to successfully complete queries and
identify server misbehavior in the presence of the max-
imum possible number of malicious servers. We have
implemented our scheme and it is extremely fast in prac-
tice: up to thousands of times faster than previous work.
We achieve these improvements by using decoding al-
gorithms for error-correcting codes that take advantage
of the practical scenario where the client is interested in
multiple blocks of the database.
1
Introduction and related work
Private information retrieval (PIR) is a way for a client
to look up information in an online database without let-
ting the database servers learn the query terms or re-
sponses. A simple if inefﬁcient way to do this is for the
database server to send a copy of the entire database to
the client, and let the client look up the information for
herself. This is called trivial download. The goal of PIR
is to transmit less data while still protecting the privacy
of the query. PIR is a fundamental building block for
many proposed privacy-sensitive applications in the liter-
ature, including patent databases [2], domain name reg-
istration [28], anonymous email [33], and improving the
scalability of anonymous communication networks [26].
The simplest kind of query one can make with PIR
is to consider the database to be composed of a number
of blocks of equal size, and to retrieve a particular block
from the database by its absolute position [10]. Although
this simple type of query does not appear to be very use-
ful in practice, it turns out that it can be used as a black-
box building block to construct more complex and use-
∗An extended version of this paper is available. [13]
ful queries, such as searching for keywords [9] or private
SQL queries [28].
PIR protocols can be grouped into two classes corre-
sponding to the security guarantees they provide. One
class is computational PIR [8], in which the database
servers can learn the client’s query if they can ap-
ply sufﬁcient computational power to break a particular
cryptographic system. The other class of protocols —
those we will consider in this work — is information-
theoretic PIR [10, 11], in which no amount of com-
putation will allow the reconstruction of the client’s
In these protocols, the query is protected by
query.
splitting it among multiple database servers.
(Chor et
al. [10] show that information-theoretic PIR with less
data transfer than the trivial download scheme is im-
possible with only one server.) As is common in many
distributed privacy-enhancing technologies, such as mix
networks [7], Tor [14], or some forms of electronic vot-
ing [6], we must assume that some fraction of the servers
above some threshold are not colluding against the client.
While much of the theoretical work on PIR focuses
strictly on minimizing the amount of data transferred [15,
38], in a practical setting we must take other aspects, par-
ticularly the computational performance, into account. In
2007, Sion and Carbunar [36] opined that, given trends
in computational power and network speeds, it would al-
ways be faster to send the whole database to the client
than to use PIR to process it. However, they only consid-
ered one kind of computational PIR [23] in their analysis.
In fact, recent work by Olumoﬁn and Goldberg [29]
demonstrates that a more recent computational PIR
scheme by Aguilar Melchor and Gaborit [1] is an or-
der of magnitude faster than trivial download, while
information-theoretic (IT) PIR can be two to three or-
ders of magnitude faster. These PIR protocols are well
matched to deployment on mobile clients as they require
low data transfer, low client-side computation, and mod-
erate server-side computation [30]. For example, to re-
trieve one 32 KiB block from a 1 GiB database, an IT-
PIR client would send one block of data to, and receive
one block of data from, each server. The servers each
perform about 1.4 CPU seconds of computation, and the
client performs about 140 ms of computation.
1.1 Byzantine robustness
An important practical consideration with multi-server
PIR is how to deal with servers that do not respond
to a client’s queries, or that respond incorrectly, either
through malice or error. These are respectively termed
the robustness and Byzantine robustness problems.
The main result of this paper is to improve the Byzan-
tine robustness of information-theoretic PIR. In order to
guarantee information-theoretic PIR, one must have mul-
tiple servers in the protocol; Byzantine robustness guar-
antees that the protocol still functions correctly even if
some of the servers fail to respond or give incorrect or
malicious responses. Byzantine robustness makes no
assumptions on the type of errors that can appear—the
model covers spurious or random errors as well as ma-
licious interference—and the bounds are given in terms
of the number of servers which ever give incorrect re-
sponses. The client must still be able to determine the an-
swer to her query, even when some number of the servers
fail to respond, or give incorrect answers; further, in the
latter case, the client would like to learn which servers
misbehaved so that they can be avoided in the future. (In
the single-server case, the owner of the database can pro-
vide a cryptographic signature on each block in order to
ensure integrity, as PIR-Tor [26] does. Without computa-
tional assumptions or some kind of shared secret, it does
not make much sense to consider robustness or Byzan-
tine robustness in a single-server PIR setting.)
Beimel and Stahl [3, 4] were the ﬁrst to consider ro-
bustness and Byzantine robustness for PIR. Consider an
(cid:96)-server information-theoretic PIR setting, where only k
of the servers respond, v of the servers respond incor-
rectly, and the system can withstand up to t colluding
servers without revealing the client’s query (t is called
the privacy level). (This is termed “t-private v-Byzantine
robust k-out-of-(cid:96) PIR”.) Then the protocol of Beimel and
Stahl works when v ≤ t < k/3. Under those conditions,
the protocol will always output to the client a unique
block, which will be the correct one; this is called unique
decoding.
In 2007, Goldberg [19] observed that by allowing for
the possibility of list decoding — that is, that the protocol
may sometimes output a small number of blocks instead
of just one — the privacy level and the number of misbe-
having servers can be substantially increased, up to t < k
kt(cid:99). He also showed that in many scenar-
ios, the probability of more than one block being output
by the protocol is vanishingly small, while in others, one
and v < k−(cid:98)√
can employ standard techniques to convert list decoding
to unique decoding [25] at the cost of slightly increasing
the size of the database. The communication overhead
of Goldberg’s protocol is k + (cid:96); that is, to retrieve one
block of data (say b bits), the protocol transfers a total of
(k + (cid:96))b bits, for the optimal choice of block size b.
1.2 Our contributions
• We change only the client side of Goldberg’s 2007
v < k−(cid:98)√
protocol to improve its Byzantine robustness from
kt(cid:99) to v < k−t − 1, which is the theoret-
ically maximum possible value. Depending on the
deployment scenario, the communication overhead
of our protocol ranges from a factor of k + (cid:96) to a
maximum of v(k + (cid:96)).
• Our protocol is considerably faster than Goldberg’s
protocol for many reasonable parameter choices.
We implemented our protocol on top of Goldberg’s
open-source Percy++ [18] distribution and ﬁnd that
our new protocol can be up to 3–4 orders of magni-
tude (thousands of times) faster than the original in
reconstructing the correct response to a query in the
presence of Byzantine servers.
The robustness and efﬁciency improvements to the
PIR protocol given in this paper mean that recovering
from Byzantine errors even in an extremely adversarial
or noisy setting is not just academically feasible, but is
completely reasonable for user-facing applications.
Goldberg’s protocol uses Shamir secret sharing to hide
the query; since Shamir secret sharing is based off of
polynomial interpolation, the problem of recovering the
response in the case of Byzantine failures corresponds
to noisy polynomial reconstruction, which is exactly the
problem of decoding Reed-Solomon codes. The theo-
retical contribution of this work is to observe that the
practical setting of clients performing multiple queries
allows us to use sophisticated decoding algorithms that
can decode multiple queries simultaneously and achieve
an enormous improvement in both performance and the
level of robustness.
1.3 Organization
The remainder of the paper is organized as follows.
In Section 2 we will introduce the tools that we need
to present our protocol: Shamir secret sharing, Reed-
Solomon codes, and decoding algorithms for multipoly-
nomial extensions of these codes. In Section 3 we review
the PIR protocols that form the foundation for our work.
We present our protocol and algorithms in Section 4, and
give experimental results in Section 5. We conclude the
paper in Section 6.
2 Preliminaries
2.3 Error-correcting codes
2.1 Notation
We will use the following variables throughout the paper:
• (cid:96) denotes the total number of servers
• t is the privacy level: no coalition of t or fewer
servers can learn the client’s query
• k is the number of servers that respond
• v is the number of Byzantine servers that respond
and h is the number of honest servers that respond
(so h + v = k). Byzantine servers may respond with
any maliciously chosen value.
• D is the database
• r is the number of blocks in the database
• s is the number of words in each database block
• w is the number of bits per word
e j
the
denote
by
We
vector
(cid:104)0, . . . ,0,1,0, . . . ,0(cid:105) where the 1 is in the jth place.
x ∈R X means selecting the element x uniformly at
random from the space X.
standard
basis
The scheme works as follows:
2.2 Shamir secret sharing
The classic Shamir secret sharing scheme [34] allows a
dealer to choose a secret value σ, and distribute shares
of that secret to (cid:96) players. If t or fewer of the players
come together, they learn no information about σ, but if
more than t pool their shares, they can easily recover the
secret. (t and (cid:96) are parameters of the scheme, with t < (cid:96).)
let σ be an arbi-
trary element of some ﬁnite ﬁeld F (not necessary uni-
formly distributed). The dealer selects (cid:96) arbitrary distinct
non-zero indices α1, . . . ,α(cid:96) ∈ F, and selects t elements
a1, . . . ,at ∈R F uniformly at random. The dealer con-
structs the polynomial f (x) = σ +a1x +a2x2 +··· +atxt,
and gives to player i the share (αi, f (αi)) ∈ F × F for
1 ≤ i ≤ (cid:96). Note that the secret σ is just f (0). Now any
t + 1 or more players can use Lagrange interpolation to
reconstruct the polynomial f , and evaluate f (0) to yield
σ. However, t or fewer players learn absolutely no infor-
mation about σ.
Complications arise during reconstruction, however,
when some of the shares being brought together to re-
construct f are incorrect. Dealing with this case involves
working with error-correcting codes, and will be dis-
cussed in Section 2.3, next.
Sharing a vector of elements in Fr rather than a single
ﬁeld element is done in the straightforward way: each
coordinate of the vector is secret shared separately, using
r independent random polynomials.
We will use error-correcting codes to handle Byzantine
robustness.
In the case of servers that merely fail to
respond, we could try to use an erasure code — an
error-correcting code which can be decoded when some
symbols are erased by the channel. In order to handle
Byzantine failures, we will use error-correcting codes
that can handle both corrupted and missing symbols. Our
scheme will transform malicious errors into random er-
rors, which will allow us to achieve much higher robust-
ness (with high probability) than was efﬁciently possi-
ble before. In addition, the use of these error-correcting
codes allows us to identify servers that cheat during the
protocol, and not use them in the future.
The error-correcting codes that we will use in our pro-
tocol are based off of Reed-Solomon codes. [32] This is
a natural choice to use with Shamir secret sharing, as
they both use polynomial interpolation.
If a message
of length t + 1 consists of elements {a0,a1, . . . ,at} in
some ﬁeld F then we can deﬁne the degree-t polynomial
f (x) = a0 + a1x +··· + atxt. Fix k distinct ﬁeld elements
α1, . . . ,αk. A Reed-Solomon codeword consists of the
evaluations of f at each point: { f (α1), . . . , f (αk)}.
The Berlekamp-Welch [5] algorithm can efﬁciently
decode a Reed-Solomon codeword with up to v < (k −
t)/2 errors, which is the theoretical maximum for unique
decoding. However, if one is willing to accept the pos-
sibility of decoding to multiple valid codewords, the