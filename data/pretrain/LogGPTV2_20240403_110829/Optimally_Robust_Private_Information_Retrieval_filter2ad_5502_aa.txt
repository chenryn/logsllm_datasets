# Optimally Robust Private Information Retrieval

**Authors:**
- Casey Devet
- Ian Goldberg
- Nadia Heninger

**Affiliations:**
- Casey Devet, Ian Goldberg: University of Waterloo, {cjdevet, iang}@cs.uwaterloo.ca
- Nadia Heninger: University:// California, San Diego, [PI:EMAIL]

## Abstract
We present a multi-server information-theoretic private information retrieval (PIR) protocol that achieves the theoretical limit for Byzantine robustness. This protocol allows a client to successfully complete queries and identify server misbehavior even in the presence of the maximum possible number of malicious servers. Our implementation is highly efficient, performing up to thousands of times faster than previous work. We achieve these improvements by leveraging advanced decoding algorithms for error-correcting codes, particularly in scenarios where the client is interested in multiple blocks of the database.

## 1. Introduction and Related Work
Private Information Retrieval (PIR) enables a client to query an online database without revealing the query terms or responses to the database servers. A simple but inefficient method is for the server to send the entire database to the client, known as trivial download. PIR aims to reduce data transmission while maintaining query privacy. PIR is a fundamental component in many privacy-sensitive applications, such as patent databases, domain name registration, anonymous email, and enhancing the scalability of anonymous communication networks.

The simplest PIR query involves retrieving a specific block from a database divided into equal-sized blocks. Although this basic query may not be practical on its own, it can be used as a building block for more complex queries, such as keyword searches or private SQL queries.

PIR protocols can be categorized into two classes based on their security guarantees:
1. **Computational PIR**: The client's query is protected by cryptographic means, but could be revealed if the servers have sufficient computational power.
2. **Information-theoretic PIR**: No amount of computation can reveal the client's query. This is achieved by distributing the query among multiple servers.

Chor et al. [10] demonstrated that information-theoretic PIR with less data transfer than trivial download is impossible with only one server. In distributed systems, we assume that some fraction of the servers are not colluding against the client.

While much theoretical work focuses on minimizing data transfer, practical considerations, such as computational performance, are also important. Sion and Carbunar [36] suggested that trivial download might always be faster, but recent work by Olumoﬁn and Goldberg [29] shows that modern PIR schemes can be significantly faster, especially for mobile clients.

### 1.1 Byzantine Robustness
In multi-server PIR, handling non-responsive or incorrectly responding servers (Byzantine robustness) is crucial. Beimel and Stahl [3, 4] first addressed robustness and Byzantine robustness in PIR. In an (cid:96)-server setting with k responsive servers, v incorrect responses, and t colluding servers, the protocol works when v ≤ t < k/3, ensuring unique decoding. Goldberg [19] improved this by allowing list decoding, increasing the privacy level and the number of misbehaving servers up to t < k and v < k−(cid:98)√kt(cid:99).

### 1.2 Our Contributions
- **Improved Byzantine Robustness**: We modify the client side of Goldberg’s 2007 protocol to enhance Byzantine robustness from v < k−(cid:98)√kt(cid:99) to v < k−t − 1, the theoretical maximum. The communication overhead ranges from k + (cid:96) to v(k + (cid:96)).
- **Performance Improvement**: Our protocol is significantly faster, up to 3–4 orders of magnitude, compared to Goldberg’s original protocol, especially in the presence of Byzantine servers.
- **Practical Feasibility**: These improvements make it feasible for user-facing applications to recover from Byzantine errors even in highly adversarial or noisy environments.

### 1.3 Organization
- **Section 2**: Introduces the necessary tools, including Shamir secret sharing and Reed-Solomon codes.
- **Section 3**: Reviews the PIR protocols that form the foundation of our work.
- **Section 4**: Presents our protocol and algorithms.
- **Section 5**: Provides experimental results.
- **Section 6**: Concludes the paper.

## 2. Preliminaries
### 2.1 Notation
- (cid:96): Total number of servers
- t: Privacy level (no coalition of t or fewer servers can learn the client’s query)
- k: Number of servers that respond
- v: Number of Byzantine servers that respond
- h: Number of honest servers that respond (h + v = k)
- D: Database
- r: Number of blocks in the database
- s: Number of words in each database block
- w: Number of bits per word
- e_j: Standard basis vector (0, ..., 0, 1, 0, ..., 0) with 1 in the jth place
- x ∈R X: Selecting x uniformly at random from the space X

### 2.2 Shamir Secret Sharing
Shamir secret sharing [34] allows a dealer to distribute shares of a secret σ to (cid:96) players. If t or fewer players collude, they learn no information about σ, but if more than t players pool their shares, they can reconstruct the secret. The dealer constructs a polynomial f(x) = σ + a1x + a2x^2 + ... + atx^t, and gives each player i the share (αi, f(αi)) for 1 ≤ i ≤ (cid:96). Any t + 1 or more players can use Lagrange interpolation to reconstruct f and evaluate f(0) to yield σ. Complications arise if some shares are incorrect, which is handled using error-correcting codes.

### 2.3 Error-Correcting Codes
We use error-correcting codes to handle Byzantine robustness. For servers that fail to respond, erasure codes can be used. For Byzantine failures, we use codes that can handle both corrupted and missing symbols, transforming malicious errors into random errors. Our scheme uses Reed-Solomon codes, which are based on polynomial interpolation. The Berlekamp-Welch algorithm can decode Reed-Solomon codewords with up to v < (k − t)/2 errors, the theoretical maximum for unique decoding. List decoding allows for decoding to multiple valid codewords, increasing robustness.