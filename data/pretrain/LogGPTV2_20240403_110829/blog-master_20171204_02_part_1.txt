## Greenplum explain analyze 解读 + 深度明细开关 - 珍藏级 
### 作者                          
digoal                          
### 日期                          
2017-12-04                   
### 标签                          
PostgreSQL , Greenplum , explain analyze , 解读 , 深度明细 , explain_memory_verbosity , gp_enable_explain_allstat     
----                          
## 背景           
解读Greenplum 的explain analyze输出。同时介绍两个深度明细开关explain_memory_verbosity , gp_enable_explain_allstat   。  
例如，我们的一个QUERY是什么地方有瓶颈，是网络瓶颈还是CPU瓶颈，都可以从里面打印的时间观之一二。  
## 例子  
如果不打开详细开关，那么统计信息中，rows out后面的明细，实际上输出的是返回行数最多的SEGMENT，并不一定是最慢的segment（请务必注意）。因此我们看到上面的offset甚至有一些比下面的offset更小的，原因就在此。  
解释请参考如下：  
其中，start offset 表示从query dispatcher(QD)发起，到返回这个NODE的第一条有效tuple的时间。  
可以说明几个问题：  
1、query dispatch下发执行计划到segment，启动segment 的worker process。这之间有一定的时间差，体现在start offset层面。  
开始时间是qd下发分布式执行计划，如果有一些offset比较大，可能是worker process fork较慢引起。  
2、结束时间是获取到当前NODE的第一条有效记录是结束点，如果有一些offset比较大，也可能是当前worker处理较慢，获得第一条有效记录时间较久。  
3、又或者，数据较倾斜，得到第一条有效记录，需要过滤很多无效记录。  
```  
postgres=# explain analyze select count(*),c1 from a group by c1 limit 1;  
                                                                            QUERY PLAN                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=1561155.53..1561155.57 rows=1 width=12)  
   Rows out:  1 rows with 0.003 ms to first row, 0.031 ms to end, start offset by 522 ms.  
   ->  Gather Motion 48:1  (slice2; segments: 48)  (cost=1561155.53..1561155.57 rows=1 width=12)  
         Rows out:  1 rows at destination with 3994 ms to end, start offset by 522 ms.  
         ->  Limit  (cost=1561155.53..1561155.55 rows=1 width=12)  
               Rows out:  Avg 1.0 rows x 41 workers.  Max 1 rows (seg0) with 0.006 ms to end, start offset by 538 ms.  
               ->  HashAggregate  (cost=1561155.53..1561156.80 rows=3 width=12)  
                     Group By: a.c1  
                     Rows out:  Avg 1.0 rows x 41 workers.  Max 1 rows (seg0) with 0.003 ms to first row, 1252 ms to end, start offset by 538 ms.  
                     ->  Redistribute Motion 48:48  (slice1; segments: 48)  (cost=1561152.00..1561154.02 rows=3 width=12)  
                           Hash Key: a.c1  
                           -- 平均返回多少行，返回最多行的节点，Rows out:  Avg 118.2 rows x 41 workers at destination.  Max 192 rows  
			   -- 从这个worker第一次Entry to this plan node时间到返回这个NODE的第一条有效tuple，with xxx ms to first row   
			   -- 从这个worker第一次Entry to this plan node时间到返回这个NODE的最后一条有效tuple，(seg9) with 2669 ms to end  
			   -- 从query dispatcher(QD)发起，到返回这个NODE的第一条有效tuple，start offset by 595 ms.  
			   Rows out:  Avg 118.2 rows x 41 workers at destination.  Max 192 rows (seg9) with 2669 ms to end, start offset by 595 ms.  
                           ->  HashAggregate  (cost=1561152.00..1561152.00 rows=3 width=12)  
                                 Group By: a.c1  
                                -- appendStringInfo(str,  
                                --                               "Rows in:  Avg %.1f rows x %d workers."  
                                --                               "  Max %.0f rows%s",  
                                --                               ntuples_avg,  
                                --                               ns->ntuples.vcnt,  
                                --                               ns->ntuples.vmax,  
                                --                               segbuf);  
			        -- Rows out:  {noRowRequested} rows{ns->ntuples.vmax}    
			        -- with {Time from this worker's first InstrStartNode() to its first result row} to first row  
				-- {Time from this worker's first InstrStartNode() to end of its results} to end  
				-- start offset by {Time from start of query on qDisp to this worker's first result row}   
				 Rows out:  Avg 101.0 rows x 48 workers.  Max 101 rows (seg0) with 0.005 ms to first row, 2706 ms to end, start offset by 572 ms.  
                                 ->  Append-only Columnar Scan on a  (cost=0.00..1061152.00 rows=2083334 width=4)  
                                       -- 不同的planstate->type，输出的内容可能不一样，参考 cdbexplain_showExecStats   
				       -- Rows out:  {noRowRequested} rows{ns->ntuples.vmax}    
				       -- with {Time from this worker's first InstrStartNode() to end of its results} to end  
				       -- start offset by {Time from start of query on qDisp to this worker's first result row}  
				       Rows out:  0 rows (seg0) with 34 ms to end, start offset by 568 ms.  
 -- 每一个分片的内存使用情况, 一个分片指在整个执行计划中，在segment内可以独立运行的连续的步骤集，后面有术语介绍  
 Slice statistics:  
   (slice0)    Executor memory: 327K bytes.  
   (slice1)    Executor memory: 828K bytes avg x 48 workers, 828K bytes max (seg0).  
   (slice2)    Executor memory: 353K bytes avg x 48 workers, 356K bytes max (seg0).  
 -- 当gp_resqueue_memory_policy != RESQUEUE_MEMORY_POLICY_NONE时，打印内存统计信息  
 Statement statistics:  
   --   /* What is the memory reserved for this query's execution? */  
   --    uint64          query_mem;  
   --   PlannedStmt @ pgsql/src/include/nodes/plannodes.h   
   Memory used: 128000K bytes  
 -- 设置了哪些影响执行计划的非默认参数  
 Settings:  enable_bitmapscan=off; enable_seqscan=off; optimizer=off  
 Optimizer status: legacy query optimizer  
 -- 总执行时长  
 Total runtime: 4518.864 ms  
(26 rows)  
```  
以上解释，详见代码 cdbexplain_showExecStats  
```  
        switch (planstate->type)  
        {  
                case T_BitmapAndState:  
                case T_BitmapOrState:  
                case T_BitmapIndexScanState:  
                        s_row = "";  
                        if (ns->ntuples.vcnt > 1)  
                                appendStringInfo(str,  
                                                                 "Bitmaps out:  Avg %.1f x %d workers."  
                                                                 "  Max %.0f%s",  
                                                                 ntuples_avg,  
                                                                 ns->ntuples.vcnt,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
                        else  
                                appendStringInfo(str,  
                                                                 "Bitmaps out:  %s%.0f%s",  
                                                                 noRowRequested,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
                        break;  
                case T_HashState:  
                        if (ns->ntuples.vcnt > 1)  
                                appendStringInfo(str,  
                                                                 "Rows in:  Avg %.1f rows x %d workers."  
                                                                 "  Max %.0f rows%s",  
                                                                 ntuples_avg,  
                                                                 ns->ntuples.vcnt,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
                        else  
                                appendStringInfo(str,  
                                                                 "Rows in:  %s%.0f rows%s",  
                                                                 noRowRequested,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
                        break;  
                case T_MotionState:  
                        if (ns->ntuples.vcnt > 1)  
                                appendStringInfo(str,  
                                                                 "Rows out:  Avg %.1f rows x %d workers"  
                                                                 " at destination.  Max %.0f rows%s",  
                                                                 ntuples_avg,  
                                                                 ns->ntuples.vcnt,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
                        else  
                                appendStringInfo(str,  
                                                                 "Rows out:  %s%.0f rows at destination%s",  
                                                                 noRowRequested,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
                        break;  
                default:  
                        if (ns->ntuples.vcnt > 1)  
                                appendStringInfo(str,  
                                                                 "Rows out:  Avg %.1f rows x %d workers."  
                                                                 "  Max %.0f rows%s",  
                                                                 ntuples_avg,  
                                                                 ns->ntuples.vcnt,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
                        else  
                                appendStringInfo(str,  
                                                                 "Rows out:  %s%.0f rows%s",  
                                                                 noRowRequested,  
                                                                 ns->ntuples.vmax,  
                                                                 segbuf);  
        }  
        /*  
         * Show elapsed time just once if they are the same or if we don't have  
         * any valid elapsed time for first tuple.  
         */  
        if ((instr->ntuples > 0) && (strcmp(firstbuf, totalbuf) != 0))  
                appendStringInfo(str,  
                                                 " with %s to first%s, %s to end",  
                                                 firstbuf,  
                                                 s_row,  
                                                 totalbuf);  
        else  
                appendStringInfo(str,  
                                                 " with %s to end",  
                                                 totalbuf);  
        /* Number of rescans */  
        if (instr->nloops > 1)  
                appendStringInfo(str, " of %.0f scans", instr->nloops);  
        /* Time from start of query on qDisp to this worker's first result row */  
        if (!(INSTR_TIME_IS_ZERO(instr->firststart)))  
        {  
                INSTR_TIME_SET_ZERO(timediff);  
                INSTR_TIME_ACCUM_DIFF(timediff, instr->firststart, ctx->querystarttime);  
                cdbexplain_formatSeconds(startbuf, sizeof(startbuf), INSTR_TIME_GET_DOUBLE(timediff));  
                appendStringInfo(str, ", start offset by %s", startbuf);  
        }  
```  
## Greenplum Query Plans 术语  
取自《greenplum administrator guide》 Understanding Greenplum Query Plans 章节。  
![pic](20171204_02_pic_001.jpg)  
1、tree  
Plans are read and executed from bottom to top.  
2、node  
Each node or step in the plan represents a database operation such as a table scan, join, aggregation, or  
sort.  
3、slice  
To achieve maximum parallelism during query execution, Greenplum divides the work of the query plan  
into slices. A slice is a portion of the plan that segments can work on independently. A query plan is sliced  
wherever a motion operation occurs in the plan, with one slice on each side of the motion.  
4、motion  