# 请参见
SELinux 着色书可在[https://people . RedHat . com/Duffy/SELinux/SELinux-着色书 _A4-Stapled.pdf.](https://people.redhat.com/duffy/selinux/selinux-coloring-book_A4-Stapled.pdf) 获得
# 允许在 SELinux 打开的情况下写入从主机装载的卷
正如我们在前面的方法中看到的，当配置 SELinux 时，非特权容器不能访问从主机系统装载目录后创建的卷上的文件。但是，有时需要允许从容器访问主机文件。在这个食谱中，我们将看到如何在这种情况下允许访问。
# 准备好
您将需要安装了最新版本 Docker 的 Fedora/RHEL/CentOS 主机，可以通过 Docker 客户端访问该主机。此外，SELinux 应该设置为强制执行，Docker 守护程序配置为使用 SELinux。
# 怎么做...
使用`z`或`Z`选项安装卷，如下所示:
```
$ docker container run -it -v /tmp:/tmp/host:z alpine ash
```
```
$ docker container run -it -v /tmp:/tmp/host:Z alpine ash
```
![](img/09d1022d-6da9-49f2-b12a-4f82d7184edf.png)
# 它是如何工作的…
安装卷时，Docker 将重新标记卷以允许访问。
The `z` option tells Docker that the volume content will be shared between containers. Docker will label the content with a shared content label. The shared volume label allows all containers to read/write content. The `Z` option tells Docker to label the content with a private unshared label. Private volumes can only be used by the current container.
# 请参见
[http://opensource.com/business/14/9/security-for-docker.](http://opensource.com/business/14/9/security-for-docker)的体积安装部分
# 移除分解容器内根用户的能力
简单来说，有了能力，我们就可以分解一个根用户的力量。请注意主功能页面中的以下内容:
For the purpose of performing permission checks, traditional UNIX implementations distinguish two categories of processes: privileged processes (whose effective user ID is 0, referred to as superuser or root), and unprivileged processes (whose effective UID is non-zero). Privileged processes bypass all kernel permission checks, while unprivileged processes are subject  to  full  permission checking based on the process's credentials (usually: effective UID, effective GID, and supplementary group list).
从内核 2.2 开始，Linux 将传统上与超级用户相关的特权划分为不同的单元，称为功能，可以独立启用和禁用。功能是每个线程的属性。
一些功能示例如下:
*   `CAP_SYSLOG`:这修改了内核 printk 行为
*   `CAP_NET_ADMIN`:这将配置网络
*   `CAP_SYS_ADMIN`:这有助于你抓住所有的能力
内核中只有 32 个插槽可用于功能。有一种能力，`CAP_SYS_ADMIN`，抓住了所有的能力；这在有疑问的时候使用。
Docker 能够添加或删除容器的功能。它默认使用`chown`、`dac_override`、`fowner`、`kill`、`setgid`、`setuid`、`setpcap`、`net_bind_service`、`net_raw`、`sys_chroot`、`mknod`、`setfcap`和`audit_write`功能，并默认删除容器的以下功能:
*   `CAP_SETPCAP`:这修改了过程能力
*   `CAP_SYS_MODULE`:这将插入/移除内核模块
*   `CAP_SYS_RAWIO`:这会修改内核内存
*   `CAP_SYS_PACCT`:这配置了流程核算
*   `CAP_SYS_NICE`:这修改了进程的优先级
*   `CAP_SYS_RESOURCE`:这将覆盖资源限制
*   `CAP_SYS_TIME`:这会修改系统时钟
*   `CAP_SYS_TTY_CONFIG`:这将配置`tty`设备
*   `CAP_AUDIT_WRITE`:这将写入审核日志
*   `CAP_AUDIT_CONTROL`:配置审计子系统
*   `CAP_MAC_OVERRIDE`:这将忽略内核 MAC 策略
*   `CAP_MAC_ADMIN`:这将配置媒体访问控制配置
*   `CAP_SYSLOG`:这修改了内核 printk 行为
*   `CAP_NET_ADMIN`:这配置网络
*   `CAP_SYS_ADMIN`:这有助于你抓住所有的容器
我们需要非常小心我们删除了哪些功能，因为如果应用没有足够的功能来运行，它们可能会崩溃。要添加和删除容器的功能，可以分别使用`--cap-add`和`--cap-drop`选项。
# 准备好
您将需要一个安装了最新版本 Docker 的主机，可以通过 Docker 客户端进行访问。
# 怎么做...
如果您想使用添加和删除功能，您需要知道如何使用它。以下是一些常见的用例示例:
1.  要删除功能，请运行类似以下的命令:
```
 $ docker container run --cap-drop   
```
2.  同样，要添加功能，请运行类似以下内容的命令:
```
 $ docker container run --cap-add   
```
3.  要从容器中删除`setuid`和`setgid`功能，使其无法运行设置了这些位的二进制文件，请运行以下命令:
```
 $ docker container run -it --cap-drop  setuid --cap-drop setgid    alpine ash
```
4.  要添加所有功能并直接删除`sys_admin`，运行以下命令:
```
 $ docker container run -it --cap-add all --cap-drop sys_admin alpine ash
```
# 它是如何工作的...
在启动容器之前，Docker 在容器内部为根用户设置功能，这会影响容器进程的命令执行。
# 还有更多...
让我们重温一下我们在本章开头看到的例子，我们看到主机系统通过一个容器关闭。让 SELinux 在主机系统上被禁用；但是，在启动容器时，放下`sys_choot`功能:
```
 $ docker container run -it --cap-drop sys_chroot -v /:/host alpine ash
 $ chroot /host
```
![](img/7c6c2796-3a4d-4e6f-b012-c45d0fcf8e3f.png)
# 请参见
*   丹·沃什在 http://opensource.com/business/14/9/security-for-docker 和 T2 的文章。
*   有选择地禁止来自容器进程的系统调用，以提供更严格的安全性。访问 http://opensource.com/business/15/3/docker-security-future 的赛科普区。
*   与自定义名称空间和功能类似，Docker run 支持`--cgroup-parent`标志来传递特定的 Cgroup 来运行容器。尝试访问[https://docs . docker . com/engine/reference/command line/run/# options。](https://docs.docker.com/engine/reference/commandline/run/#options)
# 在主机和容器之间共享命名空间
我们知道，在启动容器时，默认情况下，Docker 为一个容器创建六个不同的名称空间:进程、网络、装载、主机名、共享内存和用户。在某些情况下，我们可能希望在两个或多个容器之间共享一个命名空间。例如，在 Kubernetes 中，pod 中的所有容器共享同一个网络命名空间。
在某些情况下，我们可能希望与容器共享主机系统的名称空间。例如，我们在主机和容器之间共享相同的网络名称空间，以在容器内获得接近线速的速度。在这个食谱中，我们将看到如何在主机和容器之间共享名称空间。
# 准备好
您将需要一个安装了最新版本 Docker 的主机，可以通过 Docker 客户端进行访问。
# 怎么做...
请执行以下步骤:
1.  要与容器共享主机网络命名空间，请运行以下命令:
```
 $ docker container run -it --net=host alpine ash
```
如果您看到容器中的网络详细信息，请运行以下命令:
```
 $ ip a
```
![](img/c4fa1d4c-1962-4a39-a028-26198d842034.png)
您将看到与主机相同的结果:
![](img/dc1f6aee-9112-4a55-a4e9-b5a44f0dae40.png)
2.  要与容器共享主机网络、PID 和 IPC 命名空间，请运行以下命令:
```
 $ docker container run -it --net=host --pid=host --ipc=host alpine ash
```
![](img/f2575136-9ad4-49ad-bd56-374956079e86.png)
# 它是如何工作的...
当这样的参数被传递给容器时，Docker 不会为容器创建单独的名称空间。