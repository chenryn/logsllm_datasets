### Figure 11: Comparison of Prediction Performance
Figure 11 compares the prediction performance of metric-based and classification-based prediction algorithms.

### Figure 12: Relationship Between Top Similarity Metrics and SVM Features
Figure 12 illustrates the relationship between top similarity metrics and top SVM features, represented by the total normalized SVM coefficient of the top N similarity metrics, where N = 1, 2, ..., 14. The results show that the top similarity metrics are also the top features in SVM. For YouTube, the order is less consistent, with Rescal consistently ranking first.

### Contribution of Top Similarity Metrics to SVM
We further investigate how the top similarity metrics contribute to SVM by comparing their feature coefficients. Specifically, for each graph, we select the top N similarity metrics and calculate their total normalized SVM coefficients, where N = 1, 2, ..., 14. The results, shown in Figure 12, are based on the large data instance listed in Table 6 with the largest θ. Results for smaller data instances and other values of θ are consistent and omitted for brevity.

For Renren and Facebook, the top 6 similarity metrics have a slightly higher weight than the rest. For YouTube, the top similarity metric (Rescal) and a lower-ranked metric (Katz) are the key contributors, while the rest make similar contributions. These results suggest that metric-based and classifier-based methods generally share similar preferences for similarity metrics. However, classifier-based methods can combine the predictive power of multiple metrics to achieve higher accuracy and robustness across different datasets. The difference between Renren/Facebook and YouTube aligns with our earlier observation that YouTube, as a subscription network, has a different link prediction pattern compared to Renren and Facebook.

### Improving Link Prediction
While current prediction algorithms significantly outperform random prediction, they still have limitations in prediction accuracy. A fundamental factor is that these algorithms take a purely static approach to network analysis and do not account for temporal patterns in evolving networks. Recent studies have attempted to extend link prediction to support dynamic networks, but they either do not scale [36] or are restricted to single models or metrics [40], leading to varying performance across datasets.

In this section, we improve existing link prediction algorithms by integrating them with dynamic network analysis. We identify key patterns in network dynamics and use them to build temporal filters that reduce the search space for link prediction. Our proposed filters effectively augment existing link prediction algorithms, providing a significant boost in prediction accuracy, even for algorithms designed to capture network dynamics, such as [10].

### Temporal Properties on Edge Creation
Using our dynamic OSN datasets, we investigate how different properties of network dynamics affect edge creation. These include node activeness, neighborhood structure evolution, neighborhood activeness, and the arrival of common neighbors. We find that node activity and the arrival of common neighbors are the key factors for all three networks. Due to space limitations, we only show figures for the Renren snapshot at 55M edges in this subsection and summarize observations for other networks in the next subsection.

#### Node Activeness
A node that has recently been active in creating edges is more likely to create edges in the near future. We validate this by measuring node activity on both positive and negative node pairs (i.e., those with and without edges). For each node pair, we mark the node with the longer idle time (defined in §4.4) as the inactive node and the other as the active node. We measure activity by the idle time of the active node, the idle time of the inactive node, and the number of edges created by the active node in the past d days.

For positive node pairs, the idle times of both active and inactive nodes are significantly smaller. Figure 13 shows the CDF of the active node's idle time for the Renren snapshot at 55M edges. More than 90% of positive node pairs have an idle time of <3 days, while only 40% of negative pairs do so. This 3-day threshold effectively distinguishes positive and negative node pairs. Similar patterns are observed when comparing the inactive nodes' idle times, with a 20-day idle threshold.

Furthermore, active nodes in positive node pairs tend to create more edges in recent times. Figure 14 shows the CDF of new edges in the past week for both positive and negative sets. For more than 60% of positive node pairs, the active node creates more than 3 edges, while only 20% of negative node pairs do so. This "3-edge in past 7 days" criterion can help identify potential new links.

#### Arrival of Common Neighbors
Most similarity metrics focus on predicting edge formation between 2-hop neighbors. The recent arrival of common neighbors often triggers the completion of a triad [46] and is critical in predicting edges. We test this hypothesis by measuring the gap between the most recent time when a node pair connects to a common neighbor and the current snapshot time, referred to as the CN time gap. Our results show that the CN time gap of positive sets is much smaller than that of negative sets. Figure 15 shows the result for the same Renren snapshot, where more than 60% of positive pairs create their last common neighbors in the last 10 days, while only 20% of negative pairs do so.

### Temporal Filtering
We propose using these consistent observations across networks to develop "temporal filters" to reduce the search space of new links by filtering out node pairs unlikely to create edges. Specifically, we remove any potential node pair from the candidate list if it fails to meet any of the following criteria:
- Idle time of active nodes < dact days.
- Idle time of inactive nodes < dinact days.
- d-day new edges ≥ Enew.
- CN time gap < dCN.

Our threshold values are listed in Table 7, which hold across different snapshots for each corresponding network. While each parameter is network-specific, the methodology to discover them is general.

| Graph   | Facebook | YouTube | Renren |
|---------|----------|---------|--------|
| dinact  | 15       | 3       | 3      |
| dact    | 40       | 30      | 20     |
| Enew    | 21       | 7       | 7      |
| d       | 2        | 3       | 3      |
| dCN     | 40       | 20      | 10     |

### Prediction Accuracy after Filtering
We present the improvement in link prediction accuracy (in terms of accuracy ratio) after adding temporal filtering. We experiment with the same data instances used to evaluate classification-based algorithms (see Table 6) and present the results for the large instance. Results from the smaller instance show even more significant benefits and are omitted for brevity.

Table 8 lists the normalized improvement from applying the filter, i.e., the accuracy ratio of prediction with filtering divided by the accuracy ratio of prediction without filters. The improvement is significant for many cases, and somewhat incremental for others. For classification-based algorithms, our filtering raises the accuracy by 10% to 120%. For metric-based algorithms, the gain can be as much as a factor of 15.7.

We observe that filtering affects certain algorithms more than others. For metric-based algorithms, applying temporal filters changes the "best" prediction algorithm. For example, in Facebook, JC was the weakest metric before the filters but becomes the best metric after filtering. This is because temporal filters effectively identify and remove the unlikely-to-connect node pairs, i.e., inactive, low-degree nodes that JC is unable to identify.

### Comparison to Other Temporal Methods
Recent works have exploited temporal information to improve prediction accuracy [8, 10, 40]. We compare our filtering design with the time series-based prediction [10], a popular method that can also scale to our network datasets. For each potential node pair, this method computes its similarity metrics at multiple past time points and aggregates these scores to produce a final score. We implement two aggregation approaches, Moving Average (MA) and Linear Regression (LR), shown by [10] as the two best approaches, and perform aggregation on equally spaced past time points.

| Network | Renren | Facebook | YouTube |
|---------|--------|----------|---------|
| JC      | 2.2    | 5.7      | -       |
| BCN     | 9.7    | 5.8      | 1.2     |
| BAA     | 1.3    | 1.2      | 4.1     |
| BRA     | 1.2    | 1.2      | 2.3     |
| LP      | 1.4    | 1.2      | 1.2     |
| LRW     | 1.7    | 3.2      | 1.3     |
| PPR     | 5.3    | 3.1      | 1.1     |
| SP      | 14.9   | 4.4      | 15.7    |
| Katz    | 1.5    | 1.3      | 1.5     |
| Rescal  | 2.4    | 1.2      | 1.1     |
| PA      | -      | 2.1      | 1.2     |
| 1:1     | 1.9    | 1.3      | 2.2     |
| 1:10    | 1.9    | 1.4      | 2.2     |
| 1:100   | 1.8    | 1.5      | 2.0     |
| 1:1000  | 1.8*   | 1.3      | 1.2     |
| 1:10000 | 1.8*   | 1.2      | 1.1     |

*Ratio in Renren is 1:5000.

### Summary
Temporal filters significantly improve the accuracy of link prediction algorithms by reducing the search space and focusing on the most likely node pairs to form edges. This approach is particularly effective for both metric-based and classification-based methods, providing a substantial boost in prediction accuracy.