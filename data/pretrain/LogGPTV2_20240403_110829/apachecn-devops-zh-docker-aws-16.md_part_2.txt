现在，您已经使用 Docker for AWS 安装了 Docker Swarm，并建立了与 Swarm 集群的管理连接，我们准备开始部署应用。将应用部署到 Docker Swarm 需要使用`docker service`和`docker stack`命令，我们到目前为止还没有在本书中涉及到这两个命令，所以在着手部署 todobackend 应用之前，我们将通过部署几个示例应用来熟悉这些命令。
# Docker 服务
虽然从技术上讲，您可以将单个容器部署到 Swarm 集群，但是您应该避免这样做，并且始终使用 Docker *服务*作为部署到 Swarm 集群的标准单元。我们实际上已经使用了 Docker Compose 与 Docker 服务一起工作，但是当与 Docker Swarm 一起使用时，它们被提升到了一个新的水平。
要创建 Docker 服务，您可以使用`docker service create`命令，下面的示例演示了使用流行的 Nginx web 服务器建立一个非常简单的 web 应用:
```
> docker service create --name nginx --publish published=80,target=80 --replicas 2 nginx ez24df69qb2yq1zhyxma38dzo
overall progress: 2 out of 2 tasks
1/2: running [==================================================>]
2/2: running [==================================================>]
verify: Service converged
> docker service ps --format "{{ .ID }} ({{ .Name }}): {{ .Node }} {{ .CurrentState }}" nginx 
```
```
wcq6jfazrums (nginx.1): ip-172-31-27-91.ec2.internal  Running 2 minutes ago
i0vj5jftf6cb (nginx.2): ip-172-31-40-246.ec2.internal Running 2 minutes ago
```
`--name`标志为服务提供了一个友好的名称，而`--publish`标志允许您发布服务可以访问的外部端口(在本例中为端口`80`)。`--replicas`标志现在定义了应该为服务部署多少容器，最后您为要运行的服务指定映像的名称(在本例中是 nginx)。请注意，您可以使用`docker service ps`命令列出为服务运行的单个容器和节点。
如果您现在尝试浏览外部负载平衡器的网址，您应该会收到默认的**欢迎使用 nginx！**网页:
![](img/13d5f811-507a-4314-8724-213ed904269e.png)
Nginx welcome page To remove a service, you can simply use the `docker service rm` command:
```
> docker service rm nginx
nginx
```
# Docker 栈
一个 **Docker 栈**被定义为由多个服务、网络和/或卷组成的复杂、独立的环境，并且被定义在一个 Docker Compose 文件中。
Docker 栈的一个很好的例子是一个名为 **swarmpit** 的开源 Swarm 管理工具，你可以在[https://swarmpit.io/](https://swarmpit.io/)阅读更多关于它的信息。要开始使用群坑，将[https://github.com/swarmpit/swarmpit](https://github.com/swarmpit/swarmpit)存储库克隆到本地文件夹，然后打开存储库根目录下的`docker-compose.yml`文件。
```
version: '3.6'
services:
  app:
    image: swarmpit/swarmpit:latest
    environment:
      - SWARMPIT_DB=http://db:5984
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
 - target: 8080
 published: 8888
 mode: ingress
    networks:
      - net
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
  db:
    image: klaemo/couchdb:2.0.0
    volumes:
      - db-data:/opt/couchdb/data
    networks:
      - net
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.15'
          memory: 256M
 placement:
 constraints:
 - node.role == manager
  agent:
    ...
    ...
networks:
  net:
    driver: overlay
volumes:
  db-data:
    driver: local
```
我已经强调了我对文件的修改，即将 Docker Compose 文件规范版本更新为 3.6，修改 app 服务的 ports 属性以在端口 8888 上对外发布管理 UI，并确保数据库仅部署到您集群中的 Swarm 管理器。锁定数据库的原因是为了确保在数据库容器因任何原因出现故障的情况下，Docker Swarm 会尝试将数据库容器重新部署到存储本地数据库卷的同一节点。
In the event that you inadvertently wipe the swarmpit database, be warned that the admin password will be reset to the default value of admin, representing a significant security risk if you have published the swarmpit management interface to the public internet.
有了这些更改，您现在可以运行`docker stack deploy`命令来部署群坑管理应用:
```
> docker stack deploy -c docker-compose.yml swarmpit
Creating network swarmpit_net
Creating service swarmpit_agent
Creating service swarmpit_app
Creating service swarmpit_db
> docker stack services swarmpit
ID            NAME            MODE        REPLICAS  IMAGE                     PORTS
8g5smxmqfc6a  swarmpit_app    replicated  1/1       swarmpit/swarmpit:latest  *:8888->8080/tcp
omc7ewvqjecj  swarmpit_db     replicated  1/1
klaemo/couchdb:2.0.0
u88gzgeg8rym  swarmpit_agent  global      2/2       swarmpit/agent:latest
```
您可以看到`docker stack deploy`命令比`docker service create`命令简单得多，因为 Docker Compose 文件包含了所有的服务配置细节。在端口 8888 上浏览到您的外部网址，并使用`admin` / `admin`的默认用户名和密码登录，您应该立即通过选择右上角的管理下拉菜单并选择**更改密码**来更改管理密码。一旦您更改了管理员密码，您就可以查看 swarmpit 管理用户界面，它提供了大量关于您的 Swarm 集群的信息。下面的截图展示了**基础设施** | **节点**页面，该页面列出了集群中的节点，并显示了每个节点的详细信息:
![](img/77a22746-4832-40ca-b63a-1eefeb5c58d6.png)
The swarmkit management interface
# 将示例应用部署到 Docker Swarm
我们现在进入这一章的业务结尾，即将我们的示例 todobackend 应用部署到我们新创建的 Docker swarm 集群。正如您所料，我们将会遇到一些挑战，需要执行以下配置任务:
*   将 Docker Swarm 与弹性容器注册表集成
*   定义栈
*   创建用于托管静态内容的共享存储
*   创建集合静态服务
*   创建用于存储 todobackend 数据库的持久存储
*   使用 Docker Swarm 进行机密管理
*   运行数据库迁移
# 将 Docker Swarm 与弹性容器注册表集成
todobackend 应用已经发布在现有的弹性容器注册(ECR)存储库中，理想情况下，我们希望能够集成我们的 Docker 群集群，以便我们可以从 ECR 中提取私有映像。截至撰写本书时，ECR 集成的支持方式有些有限，因为您可以在部署时将注册表凭据传递给 Docker swarm 管理器，这些凭据将在集群中的所有节点之间共享。但是，这些凭据会在 12 小时后过期，目前没有自动刷新这些凭据的本机机制。
为了定期刷新 ECR 凭据，以便您的 Swarm 群集始终可以从 ECR 中提取映像，您需要执行以下操作:
*   确保您的经理和员工实例具有从 ECR 中提取的权限。默认情况下，AWS 云信息模板的 Docker 配置了这种访问，因此您不必担心配置这种访问。
*   将`docker-swarm-aws-ecr-auth`自动登录系统容器部署为服务，在[https://github.com/mRoca/docker-swarm-aws-ecr-auth](https://github.com/mRoca/docker-swarm-aws-ecr-auth)发布。安装后，该服务会自动刷新集群中所有节点上的 ECR 凭据。
要部署`docker-swarm-aws-ecr-auth`服务，您可以使用如下`docker service create`命令:
```
> docker service create \
    --name aws_ecr_auth \
    --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
    --constraint 'node.role == manager' \
    --restart-condition 'none' \
    --detach=false \
    mroca/swarm-aws-ecr-auth
lmf37a9pbzc3nzhe88s1nzqto
overall progress: 1 out of 1 tasks
1/1: running [==================================================>]
verify: Service converged
```
请注意，一旦该服务启动并运行，您必须为使用 ECR 映像部署的任何服务添加`--with-registry-auth`标志。
下面的代码演示了使用`docker service create`命令和`--with-registry-auth`标志部署 todobackend 应用:
```
> export AWS_PROFILE=docker-in-aws
> $(aws ecr get-login --no-include-email)
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
Login Succeeded
> docker service create --name todobackend --with-registry-auth \
 --publish published=80,target=8000 --env DJANGO_SETTINGS_MODULE=todobackend.settings_release\
 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend \
 uwsgi --http=0.0.0.0:8000 --module=todobackend.wsgi p71rje93a6pqvipqf2a14v6cc
overall progress: 1 out of 1 tasks
1/1: running [==================================================>]
verify: Service converged
```
您可以通过浏览到外部负载平衡器网址来验证 todobackend 服务是否确实已部署:
![](img/c4dd84d5-c966-4f0d-adcc-8539b3ca7ff6.png)
Deploying the todobackend service
请注意，因为我们没有生成任何静态文件，所以 todobackend 服务缺少静态内容。我们将在稍后创建 Docker Compose 文件并为 todobackend 应用部署栈时解决这个问题。
# 定义栈
虽然您可以使用类似`docker service create`的命令来部署服务，但是您可以非常快速地部署一个完整的多服务环境，正如我们之前使用`docker stack deploy`命令所看到的，该命令引用了一个 Docker Compose 文件，该文件捕获了组成栈的各种服务、网络和卷的配置。将栈部署到 Docker Swarm 需要 Docker Compose 文件规范的第 3 版，因此我们不能使用 todobackend 存储库根目录下的现有`docker-compose.yml`文件来定义我们的 Docker Swarm 环境，我建议将您的开发和测试工作流分开，因为 Docker Compose 第 2 版规范专门支持对连续交付工作流工作良好的特性。
现在，让我们开始为 todobackend 应用定义一个栈，通过在`todobackend`存储库的根目录下创建一个名为`stack.yml`的文件，我们可以将其部署到 AWS 中的 Docker Swarm 集群中:
```
version: '3.6'
networks:
  net:
    driver: overlay
services:
  app:
    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
    ports:
      - target: 8000
        published: 80
    networks:
      - net