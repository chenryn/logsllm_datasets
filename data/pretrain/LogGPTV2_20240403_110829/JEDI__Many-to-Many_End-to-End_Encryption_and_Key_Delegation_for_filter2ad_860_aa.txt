title:JEDI: Many-to-Many End-to-End Encryption and Key Delegation for
IoT
author:Sam Kumar and
Yuncong Hu and
Michael P. Andersen and
Raluca Ada Popa and
David E. Culler
JEDI: Many-to-Many End-to-End Encryption and 
Key Delegation for IoT
Sam Kumar, Yuncong Hu, Michael P Andersen, Raluca Ada Popa, and David E. Culler, 
University of California, Berkeley
https://www.usenix.org/conference/usenixsecurity19/presentation/kumar-sam
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.JEDI: Many-to-Many End-to-End Encryption and Key Delegation for IoT
Sam Kumar, Yuncong Hu, Michael P Andersen, Raluca Ada Popa, and David E. Culler
University of California, Berkeley
Abstract
As the Internet of Things (IoT) emerges over the next decade,
developing secure communication for IoT devices is of
paramount importance. Achieving end-to-end encryption for
large-scale IoT systems, like smart buildings or smart cities,
is challenging because multiple principals typically interact
indirectly via intermediaries, meaning that the recipient of a
message is not known in advance. This paper proposes JEDI
(Joining Encryption and Delegation for IoT), a many-to-many
end-to-end encryption protocol for IoT. JEDI encrypts and
signs messages end-to-end, while conforming to the decou-
pled communication model typical of IoT systems. JEDI’s
keys support expiry and ﬁne-grained access to data, common
in IoT. Furthermore, JEDI allows principals to delegate their
keys, restricted in expiry or scope, to other principals, thereby
granting access to data and managing access control in a scal-
able, distributed way. Through careful protocol design and
implementation, JEDI can run across the spectrum of IoT
devices, including ultra low-power deeply embedded sensors
severely constrained in CPU, memory, and energy consump-
tion. We apply JEDI to an existing IoT messaging system and
demonstrate that its overhead is modest.
1 Introduction
As the Internet of Things (IoT) has emerged over the past
decade, smart devices have become increasingly common.
This trend is only expected to continue, with tens of billions
of new IoT devices deployed over the next few years [30].
The IoT vision requires these devices to communicate to dis-
cover and use the resources and data provided by one another.
Yet, these devices collect privacy-sensitive information about
users. A natural step to secure privacy-sensitive data is to use
end-to-end encryption to protect it during transit.
Existing protocols for end-to-end encryption, such as
SSL/TLS and TextSecure [44], focus on one-to-one commu-
nication between two principals: for example, Alice sends
a message to Bob over an insecure channel. Such protocols,
however, appear not to be a good ﬁt for large-scale indus-
trial IoT systems. Such IoT systems demand many-to-many
communication among decoupled senders and receivers, and
require decentralized delegation of access to enforce which
devices can communicate with which others.
We investigate existing IoT systems, which currently do not
encrypt data end-to-end, to understand the requirements on an
end-to-end encryption protocol like JEDI. We use smart cities
as an example application area, and data-collecting sensors in
a large organization as a concrete use case. We identify three
central requirements, which we treat in turn below:
Figure 1: IoT comprises a diverse set of devices, which span
more than four orders of magnitude of computing power (es-
timated in Dhrystone MIPS).1
(cid:46) Decoupled senders and receivers. IoT-scale systems could
consist of thousands of principals, making it infeasible for
consumers of data (e.g., applications) to maintain a separate
session with each producer of data (e.g., sensors). Instead,
senders are typically decoupled from receivers. Such decou-
pling is common in publish-subscribe systems for IoT, such as
MQTT, AMQP, XMPP, and Solace [76]. In particular, many-
to-many communication based on publish-subscribe is the
de-facto standard in smart buildings, used in systems like
BOSS [36], VOLTTRON [82], Brume [66] and bw2 [5], and
adopted commercially in AllJoyn and IoTivity. Senders pub-
lish messages by addressing them to resources and sending
them to a router. Recipients subscribe to a resource by asking
the router to send them messages addressed to that resource.
Many systems for smart buildings/cities, like sMAP [35],
SensorAct [7], bw2 [5], VOLTTRON [82], and BAS [56],
organize resources as a hierarchy. A resource hierarchy
matches the organization of IoT devices: for instance, smart
cities contain buildings, which contain ﬂoors, which con-
tain rooms, which contain sensors, which produce streams
of readings. We represent each resource—a leaf in the
hierarchy—as a Uniform Resource Indicator (URI), which
is like a ﬁle path. For example, a sensor that measures
temperature and humidity might send its readings to the
two URIs buildingA/floor2/roomLHall/sensor0/temp
and buildingA/floor2/roomLHall/sensor0/hum. A user
can subscribe to a URI preﬁx, such as buildingA/floor2/
roomLHall/*, which represents a subtree of the hierarchy.
He would then receive all sensor readings in room “LHall.”
(cid:46) Decentralized delegation. Access control in IoT needs to
be ﬁne-grained. For example, if Bob has an app that needs
1Image credits: https://tweakers.net/pricewatch/1275475/asus-
f540la-dm1201t.html,
https://www.lg.com/uk/mobile-phones/lg-
H791, https://www.bestbuy.com/site/nest-learning-thermostat-
3rd-generation-stainless-steel/4346501.p?skuId=4346501,
https://www.macys.com/shop/product/fitbit-charge-2-heart-
rate-fitness-wristband?ID=2999458
USENIX Association
28th USENIX Security Symposium    1519
Laptop, Server,WorkstationIntel Core i7100,000 DMIPS10 GiB RAMSmartphone,Raspberry PiARM Cortex-A5310,000 DMIPS1 GiB RAMSmart HomeApplianceARM Cortex-A81,000 DMIPS100 MiB RAMWearable Device,Embedded ApplianceARM Cortex-M3/M4100 DMIPS100 KiB - 1 MiB RAMUltra Low-Power DeeplyEmbedded SensorARM Cortex-M0/M0+50 DMIPS32 KiB RAMMorePowerfulLessPowerfulJEDI is capable of running on all of these IoT devicesaccess to temperature readings from a single sensor, that app
should receive the decryption key for only that one URI, even
if Bob has keys for the entire room. In an IoT-scale system, it
is not scalable for a central authority to individually give ﬁne-
grained decryption keys to each person’s devices. Moreover,
as we discuss in §2, such an approach would pose increased
security and privacy risks. Instead, Bob, who himself has ac-
cess to readings for the entire room, should be able to delegate
temperature-readings access to the app. Generally, a principal
with access to a set of resources can give another principal
access to a subset of those resources.
Vanadium [77] and bw2 [5] introduced decentralized del-
egation (SPKI/SDSI [31] and Macaroons [13]) in the smart
buildings space. Since then, decentralized delegation has be-
come the state-of-the-art for access control in smart buildings,
especially those geared toward large-scale commercial build-
ings or organizations [42,52]. In these systems, a principal can
access a resource if there exists a chain of delegations, from
the owner of the resource to that principal, granting access. At
each link in the chain, the extent of access may be qualiﬁed
by caveats, which add restrictions to which resources can be
accessed and when. While these systems provide delegation
of permissions, they do not provide protocols for encrypting
and decrypting messages end-to-end.
(cid:46) Resource constraints. IoT devices vary greatly in their
capabilities, as shown in Fig. 1. This includes devices con-
strained in CPU, memory, and energy, such as wearable de-
vices and low-cost environmental sensors.
In smart buildings/cities, one application of interest is in-
door environmental sensing. Sensors that measure tempera-
ture, humidity, or occupancy may be deployed in a building;
such sensors are battery-powered and transmit readings using
a low-power wireless network. To see ubiquitous deployment,
they must cost only tens of dollars per unit and have several
years of battery life. To achieve this price/power point, sensor
platforms are heavily resource-constrained, with mere kilo-
bytes of memory (farthest right in Fig. 1) [3,4,26,41,49,59,69].
The power consumption of encryption is a serious challenge,
even more so than its latency on a slower CPU; the CPU and
radio must be used sparingly to avoid consuming energy too
quickly [55, 89]. For example, on the sensor platform used
in our evaluation, an average CPU utilization of merely 5%
would result in less than a year of battery life, even if the
power cost of using the transducers and network were zero.
1.1 Overview of JEDI
This paper presents JEDI, a many-to-many end-to-end en-
cryption protocol compatible with the above three require-
ments of IoT systems. JEDI encrypts messages end-to-end
for conﬁdentiality, signs them for integrity while preserving
anonymity, and supports delegation with caveats, all while
allowing senders and receivers to be decoupled via a resource
hierarchy. JEDI differs from existing encryption protocols like
SSL/TLS, requiring us to overcome a number of challenges:
Figure 2: JEDI keys can be qualiﬁed and delegated, supporting
decentralized, cryptographically-enforced access control via
key delegation. Each person has a decryption key for the
indicated resource subtree that is valid until the indicated
expiry time. Black arrows denote delegation.
1. Formulating a new system model for end-to-end encryp-
tion to support decoupled senders and receivers and de-
centralized delegation typical of IoT systems (§1.1.1)
2. Realizing this expressive model while working within the
resource constraints of IoT devices (§1.1.2)
3. Allowing receivers to verify the integrity of messages,
while preserving the anonymity of senders (§1.1.3)
JEDI’s System Model (§2)
4. Extending JEDI’s model to support revocation (§1.1.4)
Below, we explain how we address each of these challenges.
1.1.1
Participants in JEDI are called principals. Any principal can
create a resource hierarchy to represent some resources that
it owns. Because that principal owns all of the resources in
the hierarchy, it is called the authority of that hierarchy.
Due to the setting of decoupled senders and receivers,
the sender can no longer encrypt messages with the receiver’s
public key, as in traditional end-to-end encryption. Instead,
JEDI models principals as interacting with resources, rather
than with other principals. Herein lies the key difference be-
tween JEDI’s model and other end-to-end encryption proto-
cols: the publisher of a message encrypts it according to the
URI to which it is published, not the recipients subscribed to
that URI. Only principals permitted to subscribe to a URI are
given keys that can decrypt messages published to that URI.
IoT systems that support decentralized delegation (Vana-
dium, bw2), as well as related non-IoT authorization systems
(e.g., SPKI/SDSI [31] and Macaroons [13]) provide principals
with tokens (e.g., certiﬁcate chains) that they can present to
prove they have access to a certain resource. Providing to-
kens, however, is not enough for end-to-end encryption; unlike
these systems, JEDI allows decryption keys to be distributed
via chains of delegations. Furthermore, the URI preﬁx and
expiry time associated with each JEDI key can be restricted
at each delegation. For example, as shown in Fig. 2, suppose
Alice, who works in a research lab, needs access to sensor
readings in her ofﬁce. In the past, the campus facilities man-
ager, who is the authority for the hierarchy, granted a key for
buildingA/* to the building manager, who granted a key
1520    28th USENIX Security Symposium
USENIX Association
Building ManagerCampusManagerLabDirectorAlice(Root)buildingBfloor1lecture_hallbuildingAfloor1lobbyfloor2roomLHallalice_officeNever ExpiresExpires Jun 2020Expires Jun 2020Expires Aug 2019for buildingA/floor2/* to the lab director. Now, Alice can
obtain the key for buildingA/floor2/alice_office/* di-
rectly from her local authority (the lab director).
1.1.2 Encryption with URIs and Expiry (§3)
JEDI supports decoupled communication. The resource to
which a message is published acts as a rendezvous point be-
tween the senders and receivers, used by the underlying sys-
tem to route messages. Central to JEDI is the challenge of
ﬁnding an analogous cryptographic rendezvous point that
senders can use to encrypt messages without knowledge of
receivers. A number of IoT systems [70, 74] use only simple
cryptography like AES, SHA2, and ECDSA, but these primi-
tives are not expressive enough to encode JEDI’s rendezvous
point, which must support hierarchically-structured resources,
non-interactive expiry, and decentralized delegation.
Existing systems [83–85] with similar expressivity to JEDI
use Attribute-Based Encryption (ABE) [12, 48]. Unfortu-
nately, ABE is not suitable for JEDI because it is too ex-
pensive, especially in the context of resource constraints
of IoT devices. Some IoT systems rule it out due to its la-
tency alone [74]. In the context of low-power devices, encryp-
tion with ABE would also consume too much power. JEDI
circumvents the problem of using ABE or basic cryptogra-
phy with two insights: (1) Even though ABE is too heavy
for low-power devices, this does not mean that we must re-
sort to only symmetric-key techniques. We show that certain
IBE schemes [1] can be made practical for such devices. (2)
Time is another resource hierarchy: a timestamp can be ex-
pressed as year/month/day/hour, and in this hierarchical
representation, any time range can be represented efﬁciently
as a logarithmic number of subtrees. With this insight, we
can simultaneously support URIs and expiry via a nonstan-
dard use of a certain type of IBE scheme: WKD-IBE [1].
Like ABE, WKD-IBE is based on bilinear groups (pairings),
but it is an order-of-magnitude less expensive than ABE as
used in JEDI. To make JEDI practical on low-power devices,
we design it to invoke WKD-IBE rarely, while relying on
AES most of the time, much like session keys. Thus, JEDI
achieves expressivity commensurate to IoT systems that do
not encrypt data—signiﬁcantly more expressive than AES-
only solutions—while allowing several years of battery life
for low-power low-cost IoT devices.
1.1.3 Integrity and Anonymity (§4)
In addition to being encrypted, messages should be signed
so that the recipient of a message can be sure it was not sent
by an attacker. This can be achieved via a certiﬁcate chain,
as in SPKI/SDSI or bw2. Certiﬁcates can be distributed in a
decentralized manner, just like encryption keys in Fig. 2.
Certiﬁcate chains, however, are insufﬁcient if anonymity
is required. For example, consider an ofﬁce space with an
occupancy sensor in each ofﬁce, each publishing to the same
URI buildingA/occupancy. In aggregate, the occupancy
sensors could be useful to inform, e.g., heating/cooling in the
building, but individually, the readings for each room could be
considered privacy-sensitive. The occupancy sensors in differ-
ent rooms could use different certiﬁcate chains, if they were
authorized/installed by different people. This could be used to
deanonymize occupancy readings. To address this challenge,
we adapt the WKD-IBE scheme that we use for end-to-end
encryption to achieve an anonymous signature scheme that
can encode the URI and expiry and support decentralized
delegation. Using this technique, anonymous signatures are
practical even on low-power embedded IoT devices.
1.1.4 Revocation (§5)
As stated above, JEDI keys support expiry. Therefore, it is
possible to achieve a lightweight revocation scheme by dele-
gating each key with short expiry and periodically renewing
it to extend the expiry. To revoke a key, one simply does not
renew it. We expect this expiry-based revocation to be suf-
ﬁcient for most use cases, especially for low-power devices,
which typically just “sense and send.”
Enforcing revocation cryptographically, without relying
on expiration, is challenging. As we discuss in §5, any
cryptographically-enforced scheme that provides immediate
revocation (i.e., keys can be revoked without waiting for them
to expire) is subject to the fundamental limitation that the
sender of a message must know which recipients are revoked
when it encrypts the message. JEDI provides a form of imme-
diate revocation, subject to this constraint. We use techniques