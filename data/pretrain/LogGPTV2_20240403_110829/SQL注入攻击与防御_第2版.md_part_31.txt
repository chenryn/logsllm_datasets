---
## Page 153
第4章利用SQL注入
ORA-06512: at "CTXSYS.DRITHSX*, 1ine 538
ORA-06512: at 1ine 1
4.6枚举数据库模式
前面介绍了多种不同的从远程数据库提取数据的技术。为说明这些技术，我们只检索了少
量信息。现在我们要进一步拓宽视野，学习如何使用这些技术来获取大量数据。毕竞数据库是
可以包含几太字节（万亿字节）数据的庞然大物。要想实施成功的攻击并正确评估SQL注入漏洞
所带来的风险，只执行跟踪并提取一些信息位是不够的：老练且足智多谋的攻击者完全能够枚
举数据库中的所有表并且能快速提取出想要的内容。本节将给出几个例子，讲解怎样获取安装
在远程服务器上的所有数据库、数据库中的所有表以及每张表中的所有列—简言之，就是讲
解怎样枚举数据库模式。我们可以通过提取一些元数据（mctadata）来实施攻击。数据库使用元
数据来组织并管理它们存储的数据库。在这些例子中，我们主要使用UNION查询，也可以将
这些概念扩展到其他SQL注入技术。
提示：
要想枚举远程数据库中的表/列，您需要访问专门保存描述各种数据库结构的表。通常将
这些结构描述信息称为元数据（即“描述其他数据”的数据），要想成功访问这些信息，最明显
的先决条件是：执行查询的用户必须已获取访问这些元数据的授权，但事实并非始终如此，如
果枚举阶段失败，就必须对用户权限进行提升，我们将在本章后面介绍一些权限提升技术。
4.6.1SQL Server
回到前面的电子商务应用，它包含一个易受攻击的ASP页面，能够返回指定商品的详细
信息。提示一下，我们当时是使用下列URL调用该页面：
http1 / /vww, victim, com/product.s.asp?id=12
该URL返回一个类似于图4-1所示的页面，其中包含一张带4个字段的表格，字段中既有
字符串也有数字值。通常我们希望提取的第一条信息是安装在远程数据库上的数据库列表。这
些信息保存在master.sysdatabases表中，可通过使用下列查询来检索出名称列表：
select name from master..sysdatabases
我们首先请求下列URL：
http: / /www.victim, com/products asp?id=12+union+select+nul1, name, nu11,
null+from+master..sysdatabases
返回的页面如图4-11所示。
开头还不错！远程应用忠实地向我们提供了数据库列表。很明显，master数据库是最有趣的
数据库之一，它包含了描述其他数据库的元数据（包括我们刚刚查询的 sysdatabases表！）。e-shop
数据库看起来也不错，它包含了电子商务应用使用的所有数据（包括所有顾客数据）。列表中的
其他数据库是SQLServer默认自带的，没有太多趣味。如果上述查询返回了大量数据库，那么
这时需要仔细区分正在测试的应用使用的是哪一个，可借助下列查询：
139
---
## Page 154
SQL注入攻击与防御（第2版）
SELECT DB_NAME ()
victim.comvery secure applic
Ex
FleEdiVewFavories
Tool
Hel
FMe
hfipc//w
GLiks
VICTIM.COM
ID
Type
Descripion
Price
Z1
Book
SQL Injection Attacks
50
master
tempdb
model
msdb
e-shop
]Done
eet
图4-11使用UNION枚举安装在远程数据库服务器上的所有数据库
有了数据库的名称后，现在我们枚举它所包含的表，表中包含了我们想要的数据。每个数
据库都有一张名为sysobjects 的表，其中刚好包含了我们想要的信息。当然，其中也包含了很
多我们不需要的数据，所以我们需要通过指定自已感兴趣的行（类型为U）来关注用户定义的对
象。假设我们想进一步探究e-shop数据库的内容，则需注入下列查询：
SELECT name FROM e-shop.-sysobjects WHERE xtype=*U*
很明显，对应的URL如下所示：
http:/ /www, victim,com/products.aspid=12+union+select+nu11, name, nu11, nu1
1+ from+e-shop. sysobjects+xhere+xtype$3D*U*-=
返回的页面将与图4-12展示的截图类似。
不难发现，图中存在一些有趣的表，customers和transactions可能包含非常吸引人的内容！
为提取这些数据，接下来需要枚举这些表包含的列。我们介绍两种不同的提取给定表（例如，
customers)列名的方法。下面是第一种方法：
SELECT name FROM e-shop..syscolumns WHERE id = (SELECT id FROMe-shop.,
140
---
## Page 155
第4章利用SQL注入
wictin.coavery stowe apglicalion-K
d
-lack
red
Mp:
VICTIM.COM
Type
Price
Book
170S
50
raler
mtsagti
图4-12枚举指定数据库中的所有表
本例中，我们在一个SELECT查询中嵌套了另一个SELECT查询。我们首先选取e-shop..
yscolumns 表的name字段，其中包含e-shop 数据库的所有列。由于只对customers 表中的列感
兴趣，因面我们使用id字段添加一条WHERE子句，该子句作用于syscolumns表以便能唯一
识别每一列所属的表。哪些是正确的 id 呢？因为 sysobjccts 中列出的所有表都是由相同的 id
来标识，所以我们需要选择表名为customers的id值，这就是第二条SELECT语句的作用。如
果不喜欢嵌套查询而喜欢使用连接表(joiningtable)，可以使用下列查询来提取相同的数据：
SELECT a.name FROK e-shop..syscolumms a, e-shop. ,sysobjects b WHERE
b.name ='customers' AND a,id = b.id
不管采用哪一种方法，最终的页面都将与图4-13展示的截图类似。
ictin.con vety 
Taok
H
J-la
26
VICTIM.COM
Type
Price
12Book
Amaclos
50
d
pacassed
addrers
图4-13成功枚举指定表中的列
141
---
## Page 156
SQL注入攻击与防御（第2版）
不难发现，我们现在已经知道了customers表中的列名。我们可以假设登录名和口令均是
字符串类型，这样便可以使用另一个UNIONSELECT返回它们。这次我们使用原始查询中的
Type和Description字段，通过下列URL实现该目标：
http:/ /www,victim,com/products ,asp?id=12+union+select+nu11, 1ogin, password,
null+from+e-shop.. Customers=*
不难发现，我们这次在注入查询中使用了两个列名。结果（包含了我们想要的数据）如图414
所示。
成功了！不过结果不仅仅只是一个很长的用户列表。看起来该应用程序喜欢使用明文（clear
text)而非哈希算法存储用户口令。还可以使用该攻击技术枚举和检索用户访问过的其他表。不
过到目前为止，您完全可以打电话告诉客户他们的程序存在一个重大间题（实际上不止一个问
题）。我们的讨论到此为止。
viticcealiciMicetE
FleEarVew
Fda
Fook
Hep
VICTIM.COM
DTy
Descriptie
Price
12 Book
SQL Injectics Attacks
50
charlessmifh
dorgants
lydiaclaytos
s3kr3tl
raooip.erwaq
patrw0rd123
chaln3
clardiablair
apolo11
adrianwhite
abc123
图4-14最终获取的数据：用户名和口令
你被攻击了么？
使用哈希函数存储数据库中的口令
刚才展示的场景（只使用儿个查询就检索出了非加密（明文）的用户名和口令列表）要
比您想象中的复杂，在渗透测试和安全评估中，我们（本书作者）遇到过很多这样的情形。
这些易受攻击的应用均使用明文存储口令和敏感数据。
使用明文存储用户口令还会引入其他危险：人们领向于在不同的在线服务中重用相
同的口令，所以一次成功的攻击（比如刚才介绍的攻击）不仅会为victim.com上的用户账
户带来成胁，还会影响到其他在线识别领域（比如在线银行和私人c-mail).根据victim.
com所处国家法律的不同，它可能要对这些附加的入侵行为负责。
142
---
## Page 157
第4章利用SQL注入
所以，如果您负责的Web应用或数据库需要处理用户认证，那么请确保使用加密
哈希函数存储这些认证信息，加密哈希函数将任意值（在本例中为用户口令）转换为固定
长度的字符事（称为哈希值），该函数存在多种数学属性，我们只关注其中的两种：
·给定一个哈希值后，要想构造一个能产生它的值极其围难。
·两个不同的值产生同一哈希值的概率极低，
存储口令的哈希值而非口令本身仍然允许进行用户验证，这期间足以计算出用户
提供的口令的哈希值并与存储的哈希值进行比较，它还提供了一种安全优势：即便攻
击者捕获到了哈希值列表，要想将它们转换成原始口令，也只能使用暴力攻击，在哈
希输入中添加一个随机值（称为“salt”，即“加盐”），还可以保护密码不受基于预先计
算（precomputation-based)的攻击
遗憾的是，近几年来，攻击者在计算能力上已经获得了巨大的增长，这主要归功
于图形处理器（Graphical ProcessingUnit，GPU）的发展，GPU支持大规模的并行计算。
由于现代通用目的的加密哈希函数就是为计算速度设计的，因此它们天然地容易受到
现代基于GPU的暴力破解攻击。解决这一问题的办法，就是使用一种专门设计的、计
算很慢并且代价很高的算法，比如bcrypt或scrypt.bcrypt是一种具有适应性的密码哈
希算法，它具有一个参数（workfactor)，用户可以使用该参数来决定哈希计算具有多高
的代价。通过适当地调整该参数，可以使任何针对bcrypt的暴力破解攻击比针对MD5
或SHA256的暴力破解攻击在速度上慢几个数量级。
密集型（CPU intensive)算法，而且也是内存密集型（memory intensive）算法。因此，即便
是自制硬件发起的攻击，也很难破解scrypt算法。在这种自制硬件发起的攻击中，攻
击者使用专门设计用于暴力破解攻击的集成电路进行攻击。
当然，使用bcrypt或scrypt并不能避免SQL注入攻击（请不要担心，第8章和第9章
将介绍防御措施），但是万一数据落入攻击者之手，这些算法可以极大地保护你的客户。
关于bcrypt的更多信息，可以参考网址www.usenix.org/events/usenix99/provos.html
和http://codahale.com/how-to-safely-store-a-password/，关于 scrypt 的详细信息可以参考
网址www.tarsnap.com/scrypt.html.scrypt提供了比bcrypt更高的安全级别，然而截止
本书写作之时，scrypt还是独立执行的，而bcrypt则具有一组API，它支持所有Web
开发的现代技术直接使用，因此，bcrypt要比scrypt更加有用，无论你决定使用哪一
种算法，二者都比可靠的MD5或SHA更加安全，因此没有理由不使用它们：请停止
使用通用的哈希算法来存储密码！
4.6.2MySQL
在MySQL中，枚举数据库并提取数据也遵循一种层次化的方法：首先提取数据库名称，
然后转向表、列，最后是数据本身。
通常最先想知道的是执行查询的用户名，可使用下列查询之一检索该信息：
f () 1esn 103T39
143
---
## Page 158