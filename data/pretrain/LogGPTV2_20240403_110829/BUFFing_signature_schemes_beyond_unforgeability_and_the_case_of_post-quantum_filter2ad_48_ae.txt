15 :
tr ← CRH(ρ, t1)
16 :
sk ← (K, tr, s1, s2, t0, ρ), pk ← (ρ, t1)
17 :
return (sk, pk)
18 :
Sig(sk, m)
21 : A ← ExpandA(ρ)
22 : µ ← CRH(tr, m), ρ
23 : κ ← 0, z ← ⊥
24 : while z = ⊥
25 :
26 :
27 :
28 :
29 :
30 :
31 :
32 :
33 :
34 :
35 : σ ← (z, h, ˜c)
36 :
Vf(pk, m, σ)
41 : A ← ExpandA(ρ)
42 : µ ← CRH(CRH(ρ, t1), m)
43 : c ← SampleInBall(˜c)
44 : w
h ← MakeHint(Ay, sk)
1 ← UseHint(h, Az − ct)
(cid:48)
return (cid:2)z short ∧ ˜c = H(µ, w1
κ ← κ + dim(y)
z ← ⊥
else
return σ
, κ)
y ←$ ExpandMask(ρ
(cid:48)
w1 ← HighBits(Ay)
˜c ← H(µ, w1)
c ← SampleInBall(˜c)
z ← y + cs1
if z not short ∨ w1 (cid:54)= HighBits(Az − ct) then
45 :
) ∧ h well-formed(cid:3)
(cid:48)
Figure 7: Algorithmic description of Dilithium based on
Figure 4 in [23].
malleability here where the hash input contains a part w1 of
the signature at the end, which the adversary can modify as
part of the new signature via function ψ. Our theorem still
applies in this case, and in terms of constructions iterated
hash functions with idealized round function obey this form
of non-malleability, too.
Proof. By inspecting the details of Dilithium in Figure 7, we
observe that the signature contains a hash digest that was
generated from the public key and the message by evaluating
H(cid:48). Note that H(cid:48) is actually a composition of several hash
functions, namely H(cid:48) = H ◦ CRH ◦ CRH where both H and
CRH are collision resistant hash functions and in more detail the
challenge seed is computed as ˜c ← H(CRH(CRH(pk), m), w1).
We further observe that this digest is explicitly checked by
Figure 6: Provably achieving security properties beyond un-
forgeability for the NIST round 3 candidates: for candidates
that do not provably offer these properties yet, our BUFF
transformation slightly increases signature size. Since the
additional size is constant (64 bytes), the largest relative
increase occurs for the smallest signature size (e.g. GeMSS256
goes from 72 to 136 bytes); however, this not even impacts
the relative ordering of candidates based on signature size.
Since the BUFF transformation involves only a single hash,
the additional computational cost is in all cases negligible
compared to the signature generation and veriﬁcation.
and a matrix A is derived from ExpandA(ρ). It computes
t = As1 + s2 and splits it into its high bits t1 and low
bits t0 with the functions HighBits and LowBits, respectively.
Furthermore, it evaluates a collision-resistant hash function on
the public key outputting a string tr. Finally, the algorithm
outputs the keys pk = (ρ, t1) and sk = (K, tr, t0, s1, s2, ρ).
To sign a message m, the signing algorithm generates a
short vector y from intermediate values. It then computes
the challenge seed ˜c ← H(cid:48)(pk, m, HighBits(Ay)) where
H(cid:48) = H ◦ CRH ◦ CRH with both H and CRH being collision
resistant, a challenge c ← SampleInBall(˜c), and z ← y + cs1,
where SampleInBall produces a short vector. If the resulting
z is not short or HighBits(Ay) (cid:54)= HighBits(Az − ct) then
the algorithm continues with sampling a fresh random y and
proceeds as before. Otherwise, the algorithm creates a short hint
h (a dense presentation of high bits) and the signature then con-
sists of σ ← (z, h, ˜c). The veriﬁcation algorithm ﬁrst parses the
signature and recomputes the challenge c ← SampleInBall(˜c).
It reconstructs the high bits of Ay with the help of the hint and
uses this value to recompute the challenge seed. The signature
is accepted if z is short, the recomputed challenge seed matches
the challenge seed in the signature, and the hint is well-formed.
Proposition V.1. The signature scheme Dilithium as described
in Figure 7 provides M-S-UEO, MBS, and NR if the hash
function H is collision resistant and Φ-non-malleable for Φ =
{φpk,ψ} and φpk(cid:48),ψ(pk, m, w1) = (pk
(cid:48)
, m, ψ(w1)) for any
function ψ.
As remarked earlier, compared to our Transformation
Theorem IV.5, we need a slightly different version of non-
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
101705
the veriﬁcation algorithm. Hence, Dilithium implements our
BUFF transformation as speciﬁed in Figure 5 and there-
fore Theorem IV.5 applies to Dilithium. From this we can
conclude that Dilithium provides M-S-UEO and message-
bound signatures by assuming H(cid:48) to be collision resistant.
Non re-signability directly follows by assuming H(cid:48)
to be
collision resistant and Φ-non-malleable for Φ = {φpk(cid:48),ψ} where
(cid:48)
φpk(cid:48),ψ(pk, m, w1) = (pk
, m, ψ(w1)) for any function ψ.
Note that the hash function CRH in Dilithium is SHAKE-
256 truncated to 384 bits output, with (injective) bit-packing
encoding tuples into bit strings. This means that any bit string
inserted into the hash function CRH allows to recover the
individual input components. The hash function H squeezes
SHAKE-256 on its input and uses the outputs to generate
a 256-bit element c in the ball B60 of vectors with exactly
60 entries from ±1. The overall hash function is conceivably
non-malleable for the aforementioned function class. The only
way to create a valid hash value of a related key and the
same (unknown) message for the adversary seems to require
(cid:48)
to compute µ(cid:48) = CRH(CRH(pk
), m), else ˜c(cid:48) = H(µ(cid:48), w1
(cid:48))
would not most likely not hold in the ﬁnal veriﬁcation step for
the adversary’s signature. Indeed if we assume that ﬁnding ˜c(cid:48)
without knowing µ(cid:48) is infeasible and model the round function
of CRH = SHAKE-256 as a random permutation, then the
(cid:48) and m to succeed with
adversary must iterate CRH on pk
non-negligible probability, in which case the adversary must
already know m, contradicting its super-logarithmic entropy.
B. FALCON
The FALCON [24] scheme is a hash-and-sign lattice-based
signature scheme based on the GPV framework. The proposed
scheme uses the class of NTRU lattices and a new trapdoor
sampler called Fast Fourier Sampler. The security of FALCON
is based on the shortest integer solution (SIS) problem.
In Figure 8 we provide an algorithmic description of
FALCON. The key generation algorithm samples an NTRU
lattice, obtains f, g, F, G solving it, and sets the matrix B
based on the solution to the NTRU problem. Next, it computes
the Fast Fourier Transform (FFT) representation of f, g, F, G
obtaining a matrix ˆB and FALCON takes advantage of a new
data structure called FALCON Tree from which one can sample
the short vector s more efﬁciently. This tree T is computed
based on ˆB and the secret key is set to ( ˆB, T ) while the public
key is set to h ← gf−1. Here, the modulus φ (and hence h) is
a polynomial of maximal degree n = 512 (for FALCON-512)
or n = 1024 (for FALCON-1024) over Zq, where q = 12289.
The signing algorithm samples a random salt r and hashes
the salt and the message to the polynomial c. It computes
a preimage t of c under ˆB. Next, the algorithm uses Fast
Fourier sampling to sample a short polynomial s followed by
computing (s1, s2) ← FFT
−1(s) which satisﬁes c = s1 + s2h
based on the preimage t and the FALCON Tree T for some
bound β. The signature consists of the salt r and a compressed
representation s of s2.
The veriﬁcation algorithm hashes the message and the salt r
to c and decompresses s to s2. Next, it computes s1 ← c− s2h
KGen(1λ)
11 :
(f, g, F, G) ←$
NTRUGen(φ, q)
(cid:20) g − f
(cid:21)
12 : B ←
G − F
ˆB ← FFT(B)
sk ← ( ˆB, T )
13 :
14 : T ← FalconTree( ˆB)
15 :
16 : h ← gf
17 : pk ← h
18 :
return (sk, pk)
−1
Sig(sk, m)
21 :
22 :
23 :
24 :
r ←${0, 1}320
c ← H(r, m)
t ← (FFT(c), FFT(0)) · ˆB
−1
s ←$ FFSampling(t, T,(cid:98)β2(cid:99))
(s1, s2) ← FFT
s ← Compress(s2)
−1(s)
25 :
26 :
27 : σ ← (r, s)
28 :
return σ
Vf(pk, m, σ)
31 :
32 :
33 :
34 :
35 :
(r, s) ← σ
c ← H(r, m)
s2 ← Decompress(s)
s1 ← c − s2h
return (cid:2)(cid:107)(s1, s2)(cid:107)2 ≤ (cid:98)β2(cid:99)(cid:3)
Figure 8: Algorithmic description of FALCON.
and accepts the signature if (cid:107)(s1, s2)(cid:107)2 ≤ (cid:98)β2(cid:99), i.e., if (s1, s2)
is shorter than some bound β2. The scheme only gives the
square of β. The value β is approximately 5400 for FALCON-
512 and 8400 for FALCON-1024.
We start by showing that FALCON has message-bound
signatures, followed by the proof that it does not provide non
re-signability, conservative exclusive ownership, and destructive
exclusive ownership. For the proof of message-bound security
we need the assumption that the hash function H is near-
collision resistant, meaning that it is infeasible to ﬁnd hash
values which are close (but not necessarily equal):
Assumption V.2 (Near-Collision Resistance of H). Find-
ing near collisions (r, m1) (cid:54)= (r, m2) with (cid:107)H(r, m1) −
H(r, m2)(cid:107) ≤ 2β for FALCON’s hash function H and parameter
β is infeasible, i.e., for any PPT algorithm the probability of
outputting such (r, m1, m2) is negligible.
FALCON uses an iterated version of SHAKE-256 to hash
inputs (r, m) to degree-n polynomials c with coefﬁcients from
Zq. Since q = 12289 ≥ 213 and n = 512 resp. n = 1024
the range of the hash function can thus be assumed to be of
size at least qn ≥ 26600, and SHAKE-256 should distribute
well in this range. Hence, ﬁnding close-by hash values within
the 2β-bound for the moderate values of β (below 9000) in
FALCON should indeed be hard.
Proposition V.3. The signature scheme FALCON as described
in Figure 8 provides MBS under the near-collision resistance
assumption V.2.
Proof. Suppose an attacker against MBS is able to ﬁnd distinct
messages m1 and m2, a public key h and a signature (s2, r)
such that m1 and m2 are accepted under the given public key
and signature. Let c1 ← H(r, m1) and c2 ← H(r, m2). Then
using triangle inequality and monotony of the norm under
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
111706
appending a vector, we get (cid:107)c1 − c2(cid:107) ≤ (cid:107)c1 − s2h(cid:107) + (cid:107)c2 −
s2h(cid:107) ≤ (cid:107)(c1 − s2h, s2)(cid:107) + (cid:107)(c2 − s2h, s2)(cid:107) ≤ 2β. In other
words, the adversary has found a near collision for H with
small distance 2β.
To break S-DEO and NR we make an assumption about the
distribution of the value s2:
Assumption V.4 ((Non-)Invertibility Assumption for s2). We
assume that s2 ∈ Zn
q in the FALCON signature generation has
a non-negligible probability of being invertible, as well as a
non-negligible probability of being non-invertible.
Invertibility is given iff all components of the NTT represen-
tation of s2 are non-zero. If we assume that each component
of s2 ∈ Zn
q is uniformly distributed then the probability of
s2 being invertible is ( q−1
q )n for dimension n. Recall that
FALCON instantiates these values as q = 12289 and n = 1024
(or n = 512). This yields a probability of 92% (or 96%) for s2
to be invertible. Correspondingly, we have a probability of 8%
q )n ≈ e−n/q
(or 4%) that s2 is not invertible. Note that ( q−1
such that, asymptotically, if q = Θ(n) the probabilities for
random s2 being invertible and being non-invertible are roughly
constant.
Proposition V.5. The signature scheme FALCON as described
in Figure 8 does not provide S-CEO and therefore not
M-S-UEO. Under the (non-)invertibility assumption for s2 is
does not provide S-DEO either.
Proof. An attacker against S-CEO of FALCON is given a
public key pk ← h, queries the signature oracle on a message
m, and gets a signature σ ← (r, s) that veriﬁes for m under
this public key pk. We make a case distinction on whether
s2 ← Decompress(s) is invertible or not. Let us ﬁrst assume
that s2 is invertible. Note that computing the inverse of s2
can be done efﬁciently. The attacker sets h(cid:48) ← s−1
2 c and
(cid:48) ← h(cid:48). The signature σ veriﬁes for
(cid:48)
outputs (pk
, m, σ) for pk
(cid:48) since σ = (r, s) reconstructs the same c and s2 ←
m under pk
Decompress(s) as in the original signature. In consequence,
1 ← c − s2h(cid:48) = c − s2s−1
2 c = c − c = 0 and therefore
s(cid:48)
(cid:107)(s(cid:48)
1, s2)(cid:107)2 ≤ (cid:107)(s1, s2)(cid:107)2 ≤ (cid:98)β2(cid:99).
Let us now assume that s2 is not invertible. Hence, there
exists a non-zero α ∈ Zq[x]/(φ) s.t. s2α = 0. Computing α
can be done efﬁciently in the FFT domain. The attacker sets
, m, σ). The signature σ veriﬁes
pk
(cid:48) since σ = (r, s) reconstructs the same c and
for m under pk
s2 ← Decompress(s) as in the original signature. Therefore,
1 ← c − s2h(cid:48) = c − s2(h + α) = c − s2h − s2α = c − s2h.
s(cid:48)
Thus, s(cid:48)
(cid:48) ← h + α and outputs (pk
(cid:48)
1 = s1 and the bound is satisﬁed trivially.
An attacker against S-DEO of FALCON can proceed in
a similar fashion if s2 is invertible, which it is with non-
negligible probability according to our Assumption V.4. The
adversary in this case chooses a new message m(cid:48) (cid:54)= m and
computes c(cid:48) ← H(r, m(cid:48)). It sets h(cid:48) ← s−1
(cid:48) ← h(cid:48), and
(cid:48)
(cid:48)
, m(cid:48), σ). The signature σ veriﬁes m(cid:48) under pk
outputs (pk
2 c(cid:48)) = c(cid:48) − c(cid:48) = 0 and
since s(cid:48)
1, s2)(cid:107)2 ≤ (cid:107)(s1, s2)(cid:107)2 ≤ (cid:98)β2(cid:99).
therefore (cid:107)(s(cid:48)
1 ← c(cid:48) − s2h(cid:48) = c(cid:48) − s2(s−1
2 c(cid:48), pk
Proposition V.6. The signature scheme FALCON as described
in Figure 8 does not provide NR under the (non-)invertibility
assumption for s2.
Proof. An attacker against NR of FALCON is given a public