37
TeslaCrypt
29
Virlock
43
SilentCrypt
504
Total Samples
Score Median
-
File Recovery Median -
0.41
0.36
0.4
0.49
0.38
0.53
0.42
0.52
0.52
0.43
0.51
0.31
-
0.43
-
0.73
0.77
0.79
0.71
0.75
0.73
0.69
0.66
0.76
0.79
0.72
0.59
-
0.73
-
Recovery
5
4
6
3
7
3
4
5
2
4
3
9
-
-
4
rate of the system did not change by adding unknown ransomware families which
do not necessarily follow the same attack techniques (i.e., using diﬀerent cryp-
tosystems). The results of this experiment also shows that the number of exposed
ﬁles to ransomware does not change signiﬁcantly if Redemption is not trained
with unseen ransomware families. This result clearly implies that the system can
detect a signiﬁcant number of unseen ransomware attacks.
Family
Almalocker
Androm
Cerber
Chimera
CoinVault
Critroni
Crowti
CryptoDefense
CryptoLocker(copycat)
Cryptolocker
CryptoFortess
CryptoWall
CrypWall
CrypVault
CryptXXX
CryptMIC
CTB-Locker
DirtyDecrypt
DXXD
Filecoder
GpCode
HDDCryptor
Jigsaw
Locky
MarsJokes
MBL Advisory
Petya
PayCrypt
PokemonGo
PoshCoder
TeslaCrypt
Thor Locky
TorrentLocker
Tox
Troldesh
Virlock
Razy
SamSam
SilentCrypt
Xorist
Ransom-FUE
WannaCry
ZeroLocker
Total Samples (Families)
-
-
30/6
-
19/5
16/6
22/8
42/7
-
29/4
12/7
29/5
-
26/3
45/3
7/3
33/6
8/3
-
34/5
45/3
13/5
12/4
21/2
-
12/4
32/5
-
-
17/4
39/6
-
21/6
15/7
-
29/7
-
-
43/8
14/7
-
7/5
5/8
677(29)
-
-
-
-
-
-
-
18/6.5
2/20
31/10
2/14
8/10
-
-
-
-
122/29
-
-
72/10
13/22
-
-
-
-
1/9
-
-
-
1/10
149/10
-
1/3
-
-
20/8
-
-
-
51/3
1/19
-
-
492(15)
10/0
-
-
-
-
-
17
-
6
-
20
-
8
-
-
-
-
-
3
-
-
-
-
-
154
-
-
-
3
-
-
73
-
12
-
-
-
-
-
-
-
-
-
1
305(11)
-
1
2
1
1
-
-
-
-
-
33
2
7
4
-
-
-
-
-
2
-
2
-
-
7
1
-
-
-
1
-
4
1
-
9
5
4
3
4
-
-
-
-
-
107(20)
-
112
A. Kharraz and E. Kirda
Table 3. The list of ransomware families used to test Redemption, CryptoDrop [31],
ShieldFS [15], and PayBreak [23]. The numbers shown for [15, 23, 31] are extracted from
the corresponding papers.
Redemption
Samples/FA
CryptoDrop [31]
Samples/FA
ShieldFS [15]
Samples
PayBreak [23]
Samples
File Attacked/Recovered(FA/FR) Median 5/5
7.3 Disk I/O and File System Benchmarks
In order to evaluate the disk I/O and ﬁle system performance of Redemption,
we used IOzone [6], a well-known ﬁle system benchmark tool for Windows. To
this end, we ﬁrst generated 100 × 512 MB ﬁles to test the throughput of block
write, rewrite, and read operations. Next, we tested the standard ﬁle system
Redemption: Real-Time Protection Against Ransomware at End-Hosts
113
operations by creating and accessing 50,200 ﬁles, each containing 1 MB of data
in multiple directories. We ran IOzone as a normal process. Then, for having a
comparison, we repeated all the experiments 10 times, and calculated the average
scores to get the ﬁnal results. We wrote a script in AutoIt [5] to automate the
tasks.The results of our ﬁndings are summarized in Table 4.
The experiments show that Redemption performs well when issuing heavy
reads and writes, and imposes an overhead of 2.8% and 3.4%, respectively. How-
ever, rewrite and create operations can experience slowdowns ranging from 7% to
9% when dealing with a large number of small ﬁles. In fact, creating the reﬂected
ﬁles and redirecting the write requests to the protected area are the main rea-
sons of this performance hit under high workloads. These results also suggest
that Redemption might not be suitable for workloads involving many small
ﬁles such as compiling large software projects. However, note that such heavy
workloads do not represent the deployment cases Redemption is designed to
target (i.e., protecting the end host of a typical user that surfs the web and
engages in productivity activities such as writing text and sending emails).
Another important question that arises here is that how many ﬁles should
be maintained in the protected area when Redemption is active. In fact, as
the protected area is suﬃciently large, the system can maintain several ﬁles
without committing them to the disk and updating the original ﬁles. However,
this approach may not be desirable in scenarios where several read operations
may occur immediately after write operations (i.e., database). More speciﬁcally,
in these scenarios, Redemption, in addition to write requests, Redemption
should also redirect read operations to the protected area which is not ideal
from usability perspective. To this end, we also performed an I/O benchmark-
ing on the protected area by requesting write access to ﬁles, updating the ﬁles,
and committing the changes to the protected area without updating the orig-
inal ﬁles. We created a script to immediately generate read requests to access
updated ﬁles. The I/O benchmark on the protected area shows that the perfor-
mance overhead for read operations is less than 3.1% when 100 ﬁles with median
ﬁle size of 17.4 MB are maintained in the protected area. This number of ﬁles
is signiﬁcantly larger than the maximum number of ﬁles Redemption needs
to observe to identify the suspicious process. Note that we consider the scenar-