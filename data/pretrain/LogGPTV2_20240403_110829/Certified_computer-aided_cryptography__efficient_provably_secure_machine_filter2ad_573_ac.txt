s = (m(cid:107)0x00hLen ) ⊕ G(r );
t = r ⊕ H(s);
return RSA(pk , s(cid:107)t);
Figure 5: Fujisaki et al.’s OAEP encryption
Security theorem. Following Fujisaki et al., we reduce our
PKCS#1 implementation’s leakage-aware IND-CCA security
to a variant of the set partial-domain one-way assumption
(s-PDOW) on RSA. This variant takes into account the fact
that the ﬁrst byte of the random input is set to 0, and also
lets the adversary observe the leakage produced when eval-
uating the one-way permutation and its inverse. More pre-
cisely, Figure 6 shows the assumption in game form, parame-
terized by a one-way permutation f, a leakage function leakf ,
and an adversary B. The leakage function leakf takes a se-
cret key sk, and outputs a secret key sk(cid:96) such that, for any
challenge c, the computations of f−1
(c) produce
the same execution trace. This key is used in the proof to
simulate the trace produced by computing the decryption
algorithm.
sk (c) and f−1
sk(cid:96)
Given a one-way permutation f and a leakage function
leakf for it, we deﬁne, the s-PDOW advantage of an adver-
sary B against f relative to G as
Advs-pdow
f,leakf ,G,B(λ) := 2 · Pr [s-PDOWf,leakf ,G,B(λ) ⇒ T] − 1 .
Game s-PDOWf,leakf ,G,B(1λ)
(pk, sk) ←$ G
s ←$ {0, 1}hLen
t ←$ {0, 1}dbLen
c ← fpk(0x00(cid:107)s(cid:107)t) ; τ
sk(cid:96) ← leakf (sk)
−1
sk (·)(c, τ, sk(cid:96))
T ←$ Bf
return t ∈ T
Figure 6: Leakage-aware s-PDOW assumption
The validity of assuming that this advantage is negligi-
ble depends greatly on the leakage function leakf and the
trace produced when evaluating the permutation f. In par-
ticular, when the leakage function is constant (that is, when
the trace produced when evaluating the inverse permutation
does not depend on the secret key), and evaluating the per-
mutation does not leak information about the plaintext, our
s-PDOW game only diﬀers from the one used by Fujisaki et
al. [21] by the ﬁxed ﬁrst byte of the challenge plaintext. This
only introduces an additional factor 256 in the bound.
We can now state our security theorem for PKCS#1 v2.1
as we implement it.
Theorem 1
(Security of PKCS#1 v2.1). Let Π be
our implementation of the standard. For all key generation
algorithm G, and IND-CCA adversary A making at most qD
queries to the decryption oracle and qG queries to the random
oracle with (cid:96)i = hLen and (cid:96)o = dbLen, we build a s-PDOW
adversary B against RSA such that:
Advind-cca
Π,G,A(λ) ≤ Advs-pdow
RSA,leakRSA,G,B(λ) +
2qDqG + qG − qD
28hLen
The proof is formalized in EasyCrypt, and relies on several
assumptions on the leakage produced by the library and en-
vironment functions. The assumption on modular exponen-
tiation is formalized using the leakRSA function. All other
arithmetic functions are implicitly assumed to produce con-
stant leakage traces. The random oracle and random sam-
pling operations are assumed to produce leakage traces that
depend only on their length parameters.
4. SECURITY-AWARE COMPILATION
Our goal is to take a C implementation such as that de-
scribed in the previous section and compile it to an assem-
bly implementation that retains the security properties that
were established (or are simply assumed to hold) for the
source code. A natural question that arises is then: what
properties must the C compiler guarantee to ensure that the
assembly implementation is secure based on the assumption
that the C implementation is secure?
The classical notion of correctness for any compiler is
known as semantic preservation. Intuitively, this property
guarantees that, for any given source program S, the com-
piler will produce a compiled program T that operates con-
sistently with the semantics of S. Consistency is deﬁned
based on the observable behaviour of a program, which can
be a simple relation on input states and output states, or it
can be a more complex notion including observable events
occurring during program evaluation. A bit more formally,
let us denote the evaluation of a program P over inputs
(cid:126)p, resulting in outputs (cid:126)o and observable behaviour B as
1222P ((cid:126)p) ⇓ ((cid:126)o, B). Then, semantic preservation could be written
as
∀B, (cid:126)p, (cid:126)o, T ((cid:126)p) ⇓ ((cid:126)o, B) =⇒ S((cid:126)p) ⇓ ((cid:126)o, B)
This means essentially that any observable behaviour of the
target program is observable in the source program. Fur-
thermore, if the source language is deterministic (i.e., it has
no intrinsic non-determinism when it interacts with a deter-
ministic environment) then this also gives an implication in
the reverse direction [25].
Here we introduce a notion of security-aware semantic
preservation that reﬁnes the previous high-level notion. We
also prove that, when enforced by a C compiler, this new
notion is suﬃcient to guarantee that, not only the function-
ality of the source program is preserved, but also its security.
We call C compilers that are proven to enforce this type of
semantic preservation security-aware.
In the next section
we will show how we have extended CompCert to enable the
security-aware compilation of C implementations.
Observable behaviour of an implementation. The ob-
servable behaviours that we will consider for security-aware
compilation will include, not only the leakage that is pro-
vided to the adversary, but also all the interactions of the
implementation with the environment via Rand and RO.
Formally, we see behaviours B as sequences of observable
events ν, B ::=  | ν.B , where we consider events of the
following types:
ν ::= const(id)
| Rand(v, (cid:96))
| RO(v, i, (cid:96)i, (cid:96)o) .
Intuitively, const(id) will correspond to a leakage event. In
the case of C implementations, the identiﬁer id will be either
T or F, signalling the evaluation of a branching condition
similarly to what was described in the previous section. In
the case of assembly implementations, the identiﬁer id will
contain the unique identiﬁer (PC address) of the instruction
being executed, according to the program counter model.
Rand events signal a call to an external random sampling
function, including the length and output of the random
octet string that was obtained from the environment. Simi-
larly, RO events reveal the full details of an interaction with
an external function representing the idealised MGF func-
tion.
We will refer to the projection of a behaviour that retains
only the const events as const(B). Similarly, we will refer
to the projection that excludes the const events as coins(B).
We can now present our notion of security-aware semantic
preservation.
Deﬁnition 4. (Security-aware semantic preservation) Take
PKE implementation Π = (C, Enc, Dec, (cid:96)(·)) in C. We say
that assembly implementation π = (asm, Enc(cid:48), Dec(cid:48), (cid:96)(·)) se-
curely preserves the semantics of Π if there exists an eﬃcient
deterministic simulator S such that the following two con-
ditions hold
∀λ, BΠ, Bπ, m, pk, c, rc.
coins(BΠ) = coins(Bπ) ∧ Enc(cid:48)Rand,RO
(m, pk) ⇓ (rc, c, BΠ) ∧
EncRand,RO
const(Bπ) = S(Enc, Enc(cid:48), const(BΠ)) .
λ
(m, pk) ⇓ (rc, c, Bπ) ⇒
λ
∀λ, BΠ, Bπ, c, sk, m, rc.
coins(BΠ) = coins(Bπ) ∧ Dec(cid:48)RO
λ (c, sk) ⇓ (rc, m, Bπ) ⇒
λ (c, sk) ⇓ (rc, m, BΠ) ∧
DecRO
const(Bπ) = S(Dec, Dec(cid:48), const(BΠ)) .
The intuition is the following. Consider behaviours BΠ and
Bπ where the randomness taken by the C implementation
from the environment matches that taken by the assembly
implementation. Then, for all possible parameter inputs,
the assembly implementation must produce an output that
is consistent with that of the C implementation. Further-
more, it must be possible to simulate the PC trace of the
assembly implementation, given only the leakage of the C
implementation.
The next theorem establishes that security-aware seman-
tic preservation implies that PKE correctness is preserved in
compilation. The proof is a direct reduction and is presented
in the full version.
Theorem 2. Let Π = (C, Enc, Dec, (cid:96)(·)) be a correct PKE
implementation. If π = (asm, Enc(cid:48), Dec(cid:48), (cid:96)(·)) is a PKE im-
plementation that securely preserves the semantics of Π, then
π is also correct.
The next theorem shows that security-aware semantic preser-
vation guarantees that security is preserved by compilation,
i.e., that the assembly implementation will be secure against
adversaries that get program counter leakage, assuming that
the C implementation is secure in the leakage model de-
scribed in the previous section.
Theorem 3. Let Π = (C, Enc, Dec, (cid:96)(·)) be an IND-CCA
secure PKE implementation. If π = (asm, Enc(cid:48), Dec(cid:48), (cid:96)(·)) is
a PKE implementation that securely preserves the semantics
of Π, then π is also IND-CCA secure.
The proof is presented in the full version, and it hinges on
the following observation on security-aware semantic preser-
vation. Conceptually, what we are doing in Deﬁnition 4
when we quantify over behaviours BΠ and Bπ is to quantify
over all random coins taken by the implementations, and to
ensure that the same coins are provided to both Π and π.
This can also be seen as quantifying over a set of determin-
istic environments, each of them providing a possible value
of the random coins. Interestingly, in this case, and given
that our source implementation language is a deterministic
subset of C, we get that security-aware semantic preserva-
tion also gives an implication in the reverse direction [25].
In other words, in addition to the implication shown in Def-
inition 4, we also get the following: for each deterministic
environment and for each input (cid:126)p, the source program has
a single observable behaviour which maps to the single ob-
servable behaviour in the compiled assembly code (which is
also deterministic). In a nutshell, this means that one can
directly reduce the security of the assembly implementation
to the security of the C implementation, provided that leak-
age can be simulated.
5. MAKING CompCert SECURITY-AWARE
In this section we show how we extended the CompCert
certiﬁed compiler [25] and used it to perform this type of
security aware compilation.
Background on CompCert. CompCert is a formally veriﬁed
optimizing C compiler [25].
It produces target code with
strong correctness guarantees and reasonable eﬃciency when
1223compared to general purpose compilers. CompCert supports
the C language (with almost complete coverage of the ISO
C 90 / ANSI C standard) and produces assembly code for
the PowerPC, ARM, and IA32 (x86 32-bits) architectures.
CompCert is mostly implemented in Coq, and its develop-
ment is subdivided into 19 compiler phases, each of which
builds a semantic preservation proof between semantically
deﬁned intermediate languages.
Formally, CompCert’s correctness theorem establishes the
strong notion of semantic preservation that was introduced
in the beginning of Section 4, referred in CompCert termi-
nology as a backward simulation. This guarantees that, if a
source program P C is successfully compiled into P asm, then
the observable behaviour of this last program is an admis-
sible behaviour of the original program. The proof of this
result is based on a formalization of the semantics of both
the compiler’s source and target languages (C and assem-
bly), as well as of all the compiler passes. Behaviours are
captured by a possibly inﬁnite sequence of events that model
interactions of the program with the outside world, such as
accesses to volatile variables, calls to system libraries, or
user deﬁned events (so called annotations).
The need for CompCert extensions. There are various as-
pects in which we needed to enhance both the functional-
ity of CompCert and the formal correctness guarantees that
it provides in order to guarantee security-aware semantic
preservation. In the remainder of this section we will begin
by identifying precisely what CompCert does and does not
provide in this direction, and then explain in detail how we
have implemented the necessary extensions.
CompCert’s semantic preservation result establishes guar-
antees very close to Deﬁnition 4: conditioning on similar in-
teractions with the environment, the observable behaviour
for the compiled assembly program matches the observable
behaviour of the source C program. However, the following
caveats need to be addressed before applying the results of
Section 4:
• Expressiveness of CompCert behaviours. The no-
tion of observable behaviour of a C program and an
assembly program in CompCert is conceptually more
general than the one we adopted in the previous sec-
tion.
It considers, for example, the possibility that
programs go wrong or do not terminate. However, it is
more restrictive in the sense that, on one hand it con-
siders only programs with a well-deﬁned entry point
(the main function) and does not include support for
the Rand and RO events that we require (as these imply
exposing or updating the values of memory regions).
• Absence of a leakage model. CompCert behaviours
do not have an associated intrinsic notion of side-channel
leakage (neither at the C nor at the assembly levels).
Although it is possible to emulate such leakage using
annotations directly placed over the source code, there
is no way to guarantee that the target code would have
an observable behaviour that follows the instrumented
semantics conventions of the PC model that we have
described in the previous sections. This means that
there is no straightforward way to capture the simu-
lation of PC traces that we require for security-aware
compilation.
• Complex data types. The common practice in the
implementation of cryptographic software is to split
the development in two parts:
i. a trusted number
theory library that extends the high-level language of
choice with the complex data types required for public-
key cryptography; and ii.
code that implements a
speciﬁc scheme by relying on the functionality of the
trusted library. As described in Section 3, we also
adopt this approach at the EasyCrypt level, by writing
C code that relies on operators that carry out multi-
precision integer calculations. A set of axioms de-
scribes important properties for these operators, sim-
ilarly to what happens to other C native data types
such as octet strings. Conceptually, we see this as an
extension to C that adds support for an additional data
type, which means that the semantics of C as formal-
ized in CompCert need to be extended for our purposes.
In the remainder of this section we will explain how we have
extended CompCert to eliminate the previous caveats.
Adding support for additional external operations. A
diﬃculty that arises when we try to base our results on Com-
pCert’s semantic preservation guarantee is how to handle the
environment that was setup in the EasyCrypt formalization.
This includes primitives for sampling values, the choice of
appropriate hash functions to instantiate the oracles, and
other support functionality. This is an important issue, since
we do not want to impose an a-priori commitment on these
choices — this would, not only weaken (specialize) the guar-
antees oﬀered by the implementation, but also it would not
match what is the common practice in the implementation of
cryptographic software. The semantics formalized in Com-
pCert support calls to system libraries, but these calls are
assumed to leave the memory state unaltered. This makes
them inappropriate to model the environment we require.
Consequently, our ﬁrst extension to CompCert is a mecha-
nism for declaring external functions that may impact the
memory.
Our solution is an extension of the treatment adopted by
CompCert for system-calls. A call to a system library trig-
gers an observable event that registers the name of the called
function, its arguments, and an additional value that repre-