# Vim 101 Hacks

**Buyer:** xiujuan lu (PI:EMAIL)  
**Transaction ID:** 85W16630AD8515549  
**Source:** [www.thegeekstuff.com](http://www.thegeekstuff.com)

---

## Table of Contents
- **Introduction** ...................................................... 8
- **About the Author** ................................................... 9
- **Copyright & Disclaimer** ............................................ 10
- **Foreword** .......................................................... 11
- **Version** ........................................................... 12
- **Chapter 1: Vim Basics** ............................................ 13
- **Chapter 2: Basic Navigation** ................................. 23
- **Chapter 3: Advanced Navigation** ............................. 27
- **Chapter 4: Expert Navigation** ............................... 32
- **Chapter 5: Basic Text Manipulation** ........................ 49
- **Chapter 6: Advanced Text Manipulation** .................... 54
- **Chapter 7: Expert Text Manipulation** ...................... 65
- **Chapter 8: Vim as a Programmers Editor** ................... 81
- **Chapter 9: Vim Command Line Hacks** ........................ 94
- **Chapter 10: gVim Hacks** ...................................... 99
- **Chapter 11: Vim Look and Feel, Tabs, and Windows** .... 103
- **Chapter 12: Additional Features in Vim Editor** ........... 109
- **Chapter 13: Power of Search** ............................... 127
- **Chapter 14: Automatic Completion** ........................ 142
- **Chapter 15: Bonus Hacks** ................................. 155
- **Your Feedback and Support** ................................. 167

---

## Introduction
"Productivity is being able to do things that you were never able to do before."
--Franz Kafka--

If you spend a significant amount of time in a Unix or Linux environment, you will likely need to use the Vi or Vim editor frequently. Mastering the fundamentals of Vim and knowing how to use it effectively can significantly boost your productivity.

This book contains 101 Vim hacks (examples) that will help you become fast and productive with the Vim editor. Each hack is explained with clear and concise examples of Vim commands.

The book is organized into 15 chapters:
- **Chapter 1** introduces the basics of Vim for beginners.
- **Chapters 2-14** cover the 101 hacks.
- **Chapter 15** includes additional bonus hacks, which will be expanded in future editions.

### Conventions Used in This Book:
- **CTRL-A**: Press the CTRL key and the A key simultaneously.
- **10j**: Enter these characters in sequence in normal mode.
- **:set nu**: Enter this command in command line mode.

---

## About the Author
I am Ramesh Natarajan, the author of The Geek Stuff blog ([thegeekstuff.com](http://www.thegeekstuff.com)) and this eBook.

I have extensive programming experience in several languages, with C being my favorite. I have worked on infrastructure, including Linux system administration, database administration, networking, hardware, and storage (EMC).

I also developed [passworddragon.com](http://www.passworddragon.com), a free, easy, and secure password manager for Windows, Linux, and Mac.

Additionally, I authored the free "Linux 101 Hacks" eBook, available at [http://www.thegeekstuff.com/linux-101-hacks-free-ebook/](http://www.thegeekstuff.com/linux-101-hacks-free-ebook/).

For feedback about this eBook, please use the contact form at [http://www.thegeekstuff.com/contact](http://www.thegeekstuff.com/contact).

---

## Copyright & Disclaimer
**Copyright © 2009 – Ramesh Natarajan. All rights reserved.**

No part of this book may be reproduced, translated, posted, or shared in any form, by any means.

The information provided in this book is provided "as is" with no implied warranties or guarantees.

---

## Foreword
There are many text editors, but most offer only modest functionality and little comfort. However, professional users need professional tools, and Vim is an excellent choice.

Vim was created during a time when system resources were limited, resulting in a highly stable editor that runs on virtually any platform and has an exceptional command concept. It is one of the best editors available for programmers. If you master it, you can achieve incredible levels of productivity. Vim offers almost everything you could want from an editor, and what it doesn't provide can be handled with macros, plugins, and command-line utilities.

Mastering an advanced editor is a significant investment, but after years of experience, I can assure you that the effort pays off richly. Learning to use Vim well can also be a lot of fun.

The best way to learn is with guidance from an experienced user. This book provides that guidance, taking you step-by-step through more advanced techniques. To become a master, you need three things: practice, practice, and more practice. This book will guide you for weeks or months.

Now, there is much to do, but you will have a very interesting time and gain a lot from it. Enjoy using Vim effectively. Start immediately.

--Prof. Dr. Fritz Mehner, FH Südwestfalen, Germany  
(Author of several Vim plugins, including the bash-support vim plugin)

---

## Version
**Version 1.0 - 21-Oct-2009**  
First Edition

---

## Chapter 1: Vim Basics
Before we dive into the 101 hacks, let's cover some basics of the Vim editor.

### Opening a File
There are two methods to open a file. For example, to open the `/etc/passwd` file:

**Method 1: Open from the command line**
```sh
$ vim /etc/passwd
```

**Method 2: Open from within the Vim editor**
```sh
$ vim
:e /etc/passwd
```

### Saving a File
Here are the methods to save a file:

- `:w` (or `:write`): Save the working file.
- `:up` (or `:update`): Save the working file.
- `:w newfile.txt`: Save as `newfile.txt`.
- `:up newfile.txt`: Save as `newfile.txt`.
- `:w! newfile.txt`: Save as `newfile.txt` (with overwrite option).
- `:up! newfile.txt`: Save as `newfile.txt` (with overwrite option).

### Closing a File
Here are the methods to close a file and exit the Vim editor:

- `:x`: Save the working file and exit.
- `:wq`: Save the working file and exit.
- `ZZ`: Save the working file and exit.
- `:q!`: Exit without saving the working file.
- `:qa`: Exit all open files in the current Vim session.

### Types of Vim Modes
Vim has several modes. For simplicity, we can categorize them into basic and advanced modes.

#### Basic Vim Modes
Understanding these three basic modes is essential for effective use of the Vim editor:

- **Normal Mode**: The Vim editor starts in this mode, where you can execute all editor commands.
- **Insert Mode**: This mode is for inserting text.
- **Command Line Mode**: This mode is for executing ex commands at the bottom of the editor. For example, `:wq`.

**Example: Creating a `helloworld.txt` file with the text "Hello World!"**

1. **Normal Mode**: Open the new file in Normal mode.
   ```sh
   $ vim helloworld.txt
   ```

2. **Insert Mode**: Go to Insert mode and type `Hello World!`.
   ```sh
   i
   Hello World!
   ```

3. **Command Line Mode**: Go to Command Line mode and type `:wq` to save the file and exit the editor.
   ```sh
   :wq
   ```

#### Advanced Modes
While not essential for typical usage, understanding these modes can be beneficial:

- **Visual Mode**: You can select text (using `v`, `V`, or `CTRL-V`) and execute Vim commands. For example, you can select a column of text and delete it in Visual mode.
- **Select Mode**: From `:help vim-modes-intro`: "Typing a printable character deletes the selection and starts Insert mode. In this mode, '-- SELECT --' is shown at the bottom of the window."
- **Ex Mode**: From `:help vim-modes-intro`: "Like Command-line mode, but after entering a command, you remain in Ex mode."

### Moving around a File
In most applications, you might use the up, down, left, and right arrow keys for navigation. In Vim, the basic navigation keys are:

- `h`: Move left
- `j`: Move down
- `k`: Move up
- `l`: Move right

These keys are used in Normal mode to navigate through the file.

---

This revised version maintains the original content while improving clarity, coherence, and professionalism.