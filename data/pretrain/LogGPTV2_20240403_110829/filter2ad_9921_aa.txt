_本篇翻译自[这里](https://jdow.io/blog/2018/03/18/web-application-penetration-testing-methodology/)_
_译者注：文章对Web渗透测试全貌进行了描述，介绍了许多实用的想法与方法，仔细阅读会有收获~_
## 0x00 序言
这篇笔记是对Web应用程序渗透中的经典步骤的总结。我会将这些步骤分解为一个个的子任务并在各个子任务中推荐并介绍一些工具。
本文展示的许多技巧来自[这里](https://lanmaster53.com/)，作者已允许转载。
请记住我介绍的这些步骤都是迭代的，所以在一次渗透过程中，你可能会使用他们多次。举个栗子，当你设法获取一个应用程序的不同等级的权限时，比如从普通用户提升到管理员用户，可能就需要迭代利用。
序言最后需要说明的是，这篇笔记的很多地方使用了收费的PortSwigger的[Burp Suite
Professional](https://portswigger.net/burp)。对此我表示抱歉，但我认为这个工具还是物超所值的。
## 0x01 信息收集
> 在一次Web渗透过程中，信息收集的目的是站在旁观者的角度，去了解整个Web应用的全貌。
### 1\. 目标确认
工具 | 简介  
---|---  
Whois | 基于RFC 3912，用于查询域名相关信息的协议。  
Dig | 域名信息获取工具(Domain information groper)简称，是一个命令行的用于查询DNS服务器的网络管理工具。  
DNSRecon |
自动化DNS枚举脚本，由[darkoperator](https://github.com/darkoperator/dnsrecon)维护。  
#### 1.1 域名注册信息
通过如下步骤确认目标所有者信息：
  1. Whois 目标域名/主机名 
        whois example.com
  2. 解析目标域名/主机名的IP地址 
        dig +short example.com
  3. Whois IP地址 
        whois 104.27.178.12
  4. 分析输出结果
如果目标开启了whois隐私保护，那么返回的结果可能是经过混淆的。
>
> ！！不要攻击未经授权的站点。作为渗透测试人员，有责任在测试之前明确自己有没有获得目标所有者赋予的权限对目标进行测试。这也是为什么目标确认是开始渗透测试的第一步。
#### 1.2 DNS信息查询
我喜欢去  查询目标站点的DNS信息，这是一款很不错的在线DNS信息查询工具。
  * 正向查询
    dig +nocmd example.com A +noall +answer
    dig +nocmd example.com NS +noall +answer
    dig +nocmd example.com MX +noall +answer
    dig +nocmd example.com TXT +noall +answer
    dig +nocmd example.com SOA +noall +answer
    ...
    dig +nocmd example.com ANY +noall +answer (This rarely works)
  * 反向查询
    dig -x 104.27.179.12
    dig -x 104.27.178.12
#### 1.3 测试域传送漏洞
域传送是一种DNS事务，用于在主从服务器间复制DNS记录。(译者注：可以看[这个](https://www.waitalone.cn/dns-domain-transfer-exploits.html))虽然如今已经很少见主机会开启，但是还是应该确认一下。一旦存在域传送漏洞，就意味着你获取了整个域下面所有的记录。
> 域传送漏洞很容易避免。至少管理员可以设置只允许白名单内的IP列表可以进行域传送请求。
  * 使用示例
    dig -t NS zonetransfer.me +short
    dig -t AXFR zonetransfer.me @nsztm1.digi.ninja 
    dig -t AXFR zonetransfer.me @nsztm2.digi.ninja
  * DNSRecon 可以自动化进行，而且往往会返回更多额外的信息。
    dnsrecon -d example.com
### 2\. OSINT 公开情报收集
工具 | 描述  
---|---  
Recon-NG | Tim 'Lanmaster53' Tomes写的公开情报工具框架，由社区维护。  
Maltego | Maltego 是一款交互式的数据挖掘工具，它可以渲染出图用于关联分析。  
theharvester | theHarvester 可以从不同的公开资源中收集邮箱、子域名、虚拟主机、开放的端口/主机指纹和员工姓名等信息  
我本想在这份笔记中包含详细的OSINT的介绍，但是想了想决定不这样做。因为我觉得这个部分可以单独写一篇（可能在之后的几篇中）。
在这篇笔记中我就介绍一些非常棒的关于OSINT的干货，我想渗透测试者们对于这些干货应该非常熟悉：
  * Michael Bazzell
    * 
    * [Open Source Intelligence Techniques](https://www.amazon.com/dp/1984201573/ref=as_li_ss_tl?ie=UTF8&qid=1516984461&sr=8-10&keywords=open+source+intelligence+techniques&linkCode=sl1&tag=hookaround-20&linkId=1fc9d5a9d120f07b7ba934120ef485a2)
  * Google Dorking
    * 
## 0x02 Mapping
> 在一次渗透测试过程中，Mapping的目的是站在一个普通用户的角度去了解整个应用的全貌。
### 1\. 工具
工具 | 介绍  
---|---  
Nmap | 带服务识别和操作系统指纹识别的TCP/IP主机和端口扫描工具  
#### 1.1 端口扫描，服务识别，OS识别
  * 扫描前1000号TCP端口 
        nmap 192.168.100.2
  * Ping扫描8个本地主机(按ARP、ICMP、TCP 80的顺序) 
        nmap –sP 192.168.100.0-7
  * 扫描80,443端口 
        nmap -p 80,443 192.168.100.2
  * 扫描前1000号TCP端口，OS指纹，服务，然后运行一个NSE脚本 
        sudo nmap -A 192.168.100.2
  * 扫描全部65535个TCP端口，OS指纹，服务，然后运行一个NSE脚本 
        sudo nmap –A –p- 192.168.100.2
  * 扫描前1000号UDP端口 
        sudo nmap -sU 192.168.100.2
  * 扫描所有65535个UDP端口 
        sudo nmap -sU –p- 192.168.100.2
  * 扫描所有65535个UDP端口，并获取服务、OS指纹，之后运行一些NSE脚本 
        sudo nmap –sU -p- -A 192.168.100.2
> ! 端口扫描通常是渗透过程中第一步和第二步的过渡部分。要非常注意暴露的端口、服务版本和OS/s！
### 2\. 浏览器代理设置
#### 2.1 Firefox
工具 | 描述  
---|---  
Firefox | 跨平台的一款现代浏览器，有很多有用的插件  
`Firefox`通常是Web渗透测试过程中的首选浏览器，这是因为它有很多有用的插件以及它的代理设置不会影响到全局代理。
#### 2.2 Firefox插件
工具 | 描述  
---|---  
User Agent Switcher | 一款可以快速切换用户代理的Firefox插件  
Wappalyzer | 可以检测各种各样的网站所用的技术和软件组件的插件  
FoxyProxy | 代理切换插件  
这些插件在每次渗透测试过程中我总能用得到，我推荐你在第二步(Mapping)之前安装好它们。
#### 2.3 配置Firefox和Burpsuit
在你进行Mapping之前你一定要配置要浏览器的代理，让流量经过`Burp`。
  * 在`Firefox`
    * 配置插件`FoxyProxy`
      * IP: 127.0.0.1
      * Port: 8080
    * 配置`Firefox`信任Burp的SSL证书
      * 打开`http://burp/`
      * 保存证书
      * 将证书导入`Firefox`
#### 2.4 Burp配置
工具 | 描述  
---|---  
Burp Suit Pro | Web安全测试套件  
你应该配置Burp让他适合自己的喜好。但是至少我推荐你设置`Scan
Speed`为`thorough`，这样你在使用扫描器时就会发出更多地请求从而扫描出更多的漏洞。
#### 2.5 Burp扩展
工具 | 描述  
---|---  
Burp Extender | 用于扩展Burp suite功能的API，可以在BApp商店获取  
Retire.js (BApp) | 用于检测版本落后的Javascript组件漏洞的Burp suite扩展  
Wsdler (BApp) | 可以解析WSDL文件，然后测试所有的允许的方法的请求  
Python Scripter (BApp) | 可以在每个HTTP请求和响应时执行一段用户定义的Python脚本  
这些`Burp`扩展是我在渗透测试过程中经常使用的。和`Firefox`扩展一样，我建议你们在Mapping之前安装好它们。
它们可以使用`Burp Suite Pro`的`Burp Extender`模块来安装。
### 3\. 人工浏览
人工浏览可能是Mapping过程中最重要的部分。你有必要去浏览每个页面，点击页面上每一个跳转，这样在Burp的sitemap里面就可以出现这些请求和响应。
> ！！！手工浏览对于单页应用非常非常重要。自动化的网页爬虫不能够爬到单页应用因为单页应用的HTTP请求都是用异步的AJAX来进行的。
### 4\. 自动化爬取
自动化爬取是使用`Burp Spider`来进行的，这个过程可以发现你手工浏览没有发现的一些页面。通常来说Burp
Spider会在传统的Web应用中发现更多的页面。
> ！！！自动化爬虫非常危险。通常我会手工浏览80%~95%的页面，只用爬虫爬取很少的部分。因为在特定情况下爬虫很容易失效。
### 5\. 后续分析
这个时候你应该使用`Burp`完成了Mapping这一步第一次的迭代，你应该注意目前掌握的所有信息。
#### 5.1 需要特别注意
  * Web 服务器
  * Web 软件体系结构(技术栈)
  * 编程语言
  * 框架