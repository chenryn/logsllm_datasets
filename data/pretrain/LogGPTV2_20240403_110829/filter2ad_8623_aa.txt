# 概述：
UPack（Ultimate
Pack）是一种运行时压缩器，经过UPack压缩后的PE文件的文件头会出现非常奇怪的变形，这种变形会导致许多PE装载器和PE模板浏览器都无法正确的解析它的结构。后来UPack被广泛用于压缩病毒，木马，恶意代码等，由于许多情况下无法被作为PE文件进行解析，所以在当时可以绕过许多杀毒软件，现在基本上所有的杀毒软件都将UPack压缩的文件识别为恶意文件。
在调试一个UPack压缩的PE文件时要注意在杀毒软件中设置信任或者先暂时关闭杀毒软件，本篇文章的调试使用Windows
XP下的notepad.exe进行分析。
# 运行时压缩器：
概述中讲到UPack是一种运行时压缩器，那么什么是运行时压缩器？这里简单讲一下：
我们平时用到的诸如7z、WinRAR等都属于是普通压缩器，这种压缩器压缩后的文件是无法执行的而且基本上都有自己独特的后缀，但是运行时压缩器压缩后的PE文件是可以直接运行的，被压缩的程序在进入内存的瞬间会被程序中自带的解压代码解压出来放入内存并正常执行。
所以运行时压缩器和普通压缩器的最大区别就在于被压缩后的文件是否可以直接执行。
# 分析UPack压缩后的文件头：
对于一个PE文件来说最重要的部分就是文件头，那么我们先使用UPack压缩器将notepad.exe进行压缩处理，得到一个notepad_packed.exe，之后使用十六进制文件编辑器将这个压缩后的PE文件打开（这里使用的是010Editor）：
我的010editor使用了PE的模块化工具，再打开PE时会按照PE的标准格式进行解析，但是在打开压缩后的notepad.exe时发现它解析失败了，010editor的模块工具是无法正常识别这个压缩后的PE文件的，所以我们需要一个功能更强大的PE解析器：Stud_PE（下载链接放在文末）。下面使用Stud_PE来看一下这个变形的PE头
## 正常PE头与变形PE头的比较：
Stud_PE初步解析出了这个变形的PE文件头，可以看见一些非常奇怪的信息：
File Header的可选头大小变成了0x148。
节区头数量变为了0xA，这些都与正常的PE头相去甚远，下面来看看正常的notepad.exe的文件头：
可以看见在变形的PE头中，PE的文件头表示位置非常靠前，并且在文件头中设置出现了函数名称，这些看似非常离谱的操作其实都非常巧妙，下面逐步分析。
## 重叠文件头：
在UPack压缩后的PE文件头中， _IMAGE_DOS_HEADER与 _IMAGE_NT_HEADERS其实是重叠的，先来复习一下
_IMAGE_DOS_HEADER结构体的成员：（代码来源为winnt.h）
    typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header
        WORD   e_magic;                     // Magic number
        WORD   e_cblp;                      // Bytes on last page of file
        WORD   e_cp;                        // Pages in file
        WORD   e_crlc;                      // Relocations
        WORD   e_cparhdr;                   // Size of header in paragraphs
        WORD   e_minalloc;                  // Minimum extra paragraphs needed
        WORD   e_maxalloc;                  // Maximum extra paragraphs needed
        WORD   e_ss;                        // Initial (relative) SS value
        WORD   e_sp;                        // Initial SP value
        WORD   e_csum;                      // Checksum
        WORD   e_ip;                        // Initial IP value
        WORD   e_cs;                        // Initial (relative) CS value
        WORD   e_lfarlc;                    // File address of relocation table
        WORD   e_ovno;                      // Overlay number
        WORD   e_res[4];                    // Reserved words
        WORD   e_oemid;                     // OEM identifier (for e_oeminfo)
        WORD   e_oeminfo;                   // OEM information; e_oemid specific
        WORD   e_res2[10];                  // Reserved words
        LONG   e_lfanew;                    // File address of new exe header
      } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
其中最重要的成员就只有两个：
    e_magic
    e_lfanew
分别是魔数和NT文件头的起始位置，在压缩后的文件头中来找一下这两个信息：
开头是固定的4D 5A（MZ的ASCII码值）， **e_lfanew的值为0x10**
由于_IMAGE_NT_HEADERS的开始位置其实是由e_lfanew这个值决定的，将 _IMAGE_NT_HEADERS的位置置于
_IMAGE_DOS_HEADER之中，利用了DOS头中没有用的部分，这样就节约了空间也使PE装载器的反调试变得更困难。
## _IMAGE_FILE_HEADER.SizeOfOptionalHeader:
为了确定OptionalHeader的位置，首先看一下FILE_HEADER结构体：
    typedef struct _IMAGE_FILE_HEADER {
        WORD    Machine;
        WORD    NumberOfSections;
        DWORD   TimeDateStamp;
        DWORD   PointerToSymbolTable;
        DWORD   NumberOfSymbols;
        WORD    SizeOfOptionalHeader;
        WORD    Characteristics;
    } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
在在大多数PE文件头中，OptionalHeader的大小看起来是固定的，32位下是0xE0，在64位下是0xF0。
其实这是一个误区，OptionalHeader的具体大小其实是由FILE_HEADER中的SizeOfOptionalHeader来决定的，这样的设计就为这种超越常理的PE头提供了条件，，回到Stud_PE中看一下这个值：
这个值是0x148，比正常的32位OptionalHeader的大小要大一点，那么为什么要改变这个值呢？这是由于压缩器将PE头扭曲后，为了让其能够正常运行就需要进行解码，而进行解码的代码就放在额外的区域之中。
首先来计算一下SECTION_HEADER的起始位置，前面得到OptionalHeader的大小为0x148，OptionalHeader的起始位置是0x28，所以SECTION_HEADER的起始位置应该是：0x28+0x148
= 0x170，而OptionalHeader结束的位置的地方是0xD7，所以从0xD7到0x170这段空间中存储的就是程序的解码代码，也就是下面这个区域：
进入OD中看下这部分代码的操作：
中间出现了rep和stos这两个非常明显的循环以及传送指令，这其实就是程序再将解码出的代码传送到相应区域，后面的调试中会再次接触到解码代码。
## _IMAGE_OPTIONAL_HEADER.NumberOfRvaAndSizes:
按照常规的PE头，处于OptionalHeader末尾的数据目录数组的个数应该是0x10，其实这个数目是由OptionalHeader中的NumberOfRvaAndSizes来决定的，回头看一下前面找到的这个信息：
然后再来看一下数据目录的完整结构：
    typedef struct _IMAGE_DATA_DIRECTORY {
        DWORD   VirtualAddress;
        DWORD   Size;
    } IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
以及数据目录的0x10个完整成员：
    #define IMAGE_DIRECTORY_ENTRY_EXPORT          0   // Export Directory  导出表:动态链接库导出的函数会显示在这里
    #define IMAGE_DIRECTORY_ENTRY_IMPORT          1   // Import Directory  导入表:写程序时调用的动态链接库会显示在这里
    #define IMAGE_DIRECTORY_ENTRY_RESOURCE        2   // Resource Directory  资源表:图片,图标,字符串,嵌入的程序都在这里
    #define IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   // Exception Directory  异常目录表:保存文件中异常处理相关的数据
    #define IMAGE_DIRECTORY_ENTRY_SECURITY        4   // Security Directory  安全目录:存放数字签名和安全证书之类的东西
    #define IMAGE_DIRECTORY_ENTRY_BASERELOC       5   // Base Relocation Table  基础重定位表:保存需要执行重定位的代码偏移
    #define IMAGE_DIRECTORY_ENTRY_DEBUG           6   // Debug Directory  调试表
    //      IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // (X86 usage)
    #define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    7   // Architecture Specific Data  缓存信息表:有一些保留字段必须是0
    #define IMAGE_DIRECTORY_ENTRY_GLOBALPTR       8   // RVA of GP  全局指针偏移目录
    #define IMAGE_DIRECTORY_ENTRY_TLS             9   // TLS Directory  线程局部存储(暂时未知)
    #define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10   // Load Configuration Directory  载入配置
    #define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11   // Bound Import Directory in headers 存储一些API的绑定输入信息
    #define IMAGE_DIRECTORY_ENTRY_IAT            12   // Import Address Table 导入地址表：导入函数的地址
    #define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13   // Delay Load Import Descriptors
    #define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   // COM Runtime descriptor com运行时的目录
这里的数字是0xA，而省略的那一部分被填充进了程序的解码代码，也就是说从LAOD_CONFIG开始，后面的6个数据目录被忽略的，也就是上一个部分提到的，在0xD8开始的那一部分。
## _IMAGE_SECTION_HEADER：
前面结束了FILE_HEADER和OPTIONAL_HEADER的分析，那么紧接着的就是节区头，根据前面的分析，节区头的起始位置应该在0x170，然后来看一下节区头（SECTION_HEADER）结构体的构成：
    typedef struct _IMAGE_SECTION_HEADER {
        BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];
        union {
                DWORD   PhysicalAddress;
                DWORD   VirtualSize;
        } Misc;
        DWORD   VirtualAddress;