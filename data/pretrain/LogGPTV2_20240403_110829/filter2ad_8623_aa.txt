# 概述

UPack（Ultimate Pack）是一种运行时压缩器，经其压缩后的PE文件头部会出现异常变形。这种变形使得许多PE装载器和模板浏览器无法正确解析文件结构。UPack后来被广泛应用于病毒、木马及恶意代码的压缩，由于在多数情况下这些文件无法被识别为PE格式，因此能绕过早期的杀毒软件检测。目前，几乎所有主流杀毒软件都将由UPack压缩过的文件标记为潜在威胁。

在调试一个经过UPack处理的PE文件前，请确保已在杀毒软件中设置信任或暂时禁用杀毒软件功能。本文将使用Windows XP系统下的notepad.exe作为示例进行分析。

# 运行时压缩器简介

与7z、WinRAR等普通压缩工具不同，运行时压缩器生成的输出文件仍然可以直接执行。这类压缩器会将解压逻辑嵌入到压缩包内，当程序加载到内存时，内部的解压代码会自动运行并恢复原始数据，随后正常执行程序。因此，运行时压缩器的最大特点是它允许被压缩的可执行文件保持自启动能力。

# UPack压缩后PE文件头的分析

对于任何PE文件而言，文件头至关重要。接下来我们将使用UPack对notepad.exe进行压缩，并通过十六进制编辑器（如010 Editor）查看结果。然而，标准PE模块化工具可能无法准确解析该压缩文件，故推荐采用更强大的PE解析器Stud_PE来进行进一步研究（下载链接见文末）。下面展示的是通过Stud_PE观察到的变形PE头信息对比。

## 正常与变形PE头比较

- **File Header** 的OptionalHeader大小变为0x148。
- 节区数量增加至0xA。
  
以上特征显著偏离了常规PE结构。值得注意的是，在变形版本中，某些函数名称直接出现在了文件头部分，虽然看似不合逻辑但实则巧妙地隐藏了真实内容。

### 重叠文件头

UPack压缩后的PE文件呈现出_DOS_HEADER与_NT_HEADERS部分重叠的现象。回顾_DOS_HEADER结构体定义：

```c
typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic; // Magic number
    ...
    LONG e_lfanew; // File address of new exe header
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
```

其中`e_magic`和`e_lfanew`最为关键。对于我们的样本文件，`e_lfanew`值设为0x10，这意味着_NT_HEADERS实际上位于_DOS_HEADER内部未使用的空间中，从而节省了体积同时也增加了反向工程难度。

### OptionalHeader尺寸调整

通常情况下，32位PE文件的OptionalHeader长度固定为0xE0字节；但对于本例，则扩展到了0x148。这一变化主要是为了容纳额外的解码逻辑代码，以便于后续能够顺利展开压缩数据。

### 数据目录表项数变更

标准PE文件的数据目录数组包含16个条目，但在当前场景下，实际数量减少到了10个(`NumberOfRvaAndSizes`=0xA)。这表明从第11项开始的所有项目均被移除，并替换成了必要的解码算法实现细节。

### 节区头布局

根据先前计算得出的偏移量，我们可以确定节区头(_IMAGE_SECTION_HEADER)起始于0x170地址处。以下是该结构的基本形式：

```c
typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[IMAGE_SIZEOF_SHORT_NAME];
    union {
        DWORD PhysicalAddress;
        DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    ...
}
```

综上所述，通过对UPack压缩技术及其对PE文件结构影响的深入探讨，我们不仅能够更好地理解此类压缩机制的工作原理，同时也能学习到如何有效地对其进行逆向分析。