以太坊上的智能合约几乎都是开源的，没有开源的智能合约就无从信任。但有些智能合约没有开源，反编译是研究的重要方式，可通过直接研究EVM的ByteCode。  
如何对合约进行逆向分析，下面结合ctf实例介绍区块链合约逆向如何开展，希望区块链入门者能从中学到知识。
* * *
# ctf实例1
给了bytecode字节码及交互记录
ByteCode:
    0x60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304618359146100725780631cbeae5e1461009f578063890eba68146100cc578063a2da82ab146100f7578063f0fdf83414610127575b600080fd5b34801561007e57600080fd5b5061009d60048036038101908080359060200190929190505050610154565b005b3480156100ab57600080fd5b506100ca6004803603810190808035906020019092919050505061015e565b005b3480156100d857600080fd5b506100e1610171565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b50610125600480360381019080803560ff169060200190929190505050610177565b005b34801561013357600080fd5b50610152600480360381019080803590602001909291905050506101bb565b005b8060008190555050565b6000548114151561016e57600080fd5b50565b60005481565b60008060009150600090505b60108110156101ab576008829060020a0291508260ff16821891508080600101915050610183565b8160005418600081905550505050565b8060036000540201600081905550505600a165627a7a7230582012c9c1368a7902a818e339b8db79b7130db8795bd2a793898b509dc020d960d20029
交互日志：
    log1:func_0177
    0xa2da82ab0000000000000000000000000000000000000000000000000000000000000009
    log2: #a()
    0xf0fdf83400000000000000000000000000000000000000000000000000000000deadbeaf
    log3: #func_0177
    0xa2da82ab0000000000000000000000000000000000000000000000000000000000000007
    log4: #flag()
    secret.flag
    {
        "0": "uint256: 36269314025157789027829875601337027084"
    }
## 在线反编译
 反编译bytecode  
直接输入bytecode（不要加0x，输入十六进制值即可）
反编译得到
    contract Contract {
        function main() {
            memory[0x40:0x60] = 0x80;
            if (msg.data.length = 0x10) {
            label_01AB:
                storage[0x00] = storage[0x00] ~ var0; //这里~符号应为异或 xor
                return;
            } else {
            label_018D:
                var0 = var0 * 0x02 ** 0x08 ~ (arg0 & 0xff); 
                var1 = var1 + 0x01;
                if (var1 >= 0x10) { goto label_01AB; }
                else { goto label_018D; }
            }
        }
        function a(var arg0) {
            storage[0x00] = storage[0x00] * 0x03 + arg0;
        }
    }
ethervm.io也给出了函数的调用情况
    --Public Methods
    Method names cached from 4byte.directory.
    0x04618359 Unknown #func_0154
    0x1cbeae5e winner(uint256)
    0x890eba68 flag()
    0xa2da82ab Unknown #func_0177
    0xf0fdf834 a(uint256)
    --Internal Methods
    func_0154(arg0) 
    winner(arg0) 
    flag(arg0) returns (r0)
    func_0177(arg0) 
    a(arg0)
可以看到，总共有5个公用(public)函数调用接口。第一个 `0x04618359`
和第四个`0xa2da82ab`没有查到历史函数名称，说明是合约开发者自己定义的，这里反编译器把它命名为 `func_0154`和`func_0177`
。其他函数还有`winner`,`flag`,`a`
观察日志交互记录  
`0xa2da82ab0000000000000000000000000000000000000000000000000000000000000009`前面的8位为函数的地址`0xa2da82ab`,对应func_0177函数，传参为0x09。  
`0xf0fdf83400000000000000000000000000000000000000000000000000000000deadbeaf`对应调用函数`a()`,传参为`0xdeadbeaf`。  
日志最后返回的secret.flag应为执行flag()返回的值`36269314025157789027829875601337027084`
程序调用逻辑即为分别执行`func_0177(0x9)`,`a(0xdeadbeaf)`,`func_0177(0x7)`,`flag()`
需要求解的为输入的值，那么进行逆向即可
观察三个函数，都是比较简单的运算，等价于下面大马
    #输入参数x
    def func_0177(var=0x9):
      var=9
      a=0
      b=0
      for i in range(0x10):
         a=a*(2**8)^(var&0xff)
    x=x^a
    def a(y=0xdeadbeaf)
       x=x*3+0xdeadbeaf
    def func_0177(var=0x7)
      var=7
      a=0
      b=0
      for i in range(0x10):
         a=a*(2**8)^(var&0xff)
    x=x^a
    def flag():
      return x
    #返回结果为:
    secret.flag
    {
        "0": "uint256: 36269314025157789027829875601337027084"
    }
那简单逆向即可，func_0177计算的异或参数确定，直接异或即得到原值，逆向代码如下
    x=36269314025157789027829875601337027084
    var=7
    a=0
    b=0
    for i in range(0x10):
        a=a*(2**8)^(var&0xff)
    x=x^a
    x=(x-0xdeadbeaf)/3
    var=9
    a=0
    b=0
    for i in range(0x10):
        a=a*(2**8)^(var&0xff)
    x=x^a
    print hex(x)[2].strip('L').decode('hex')
    #flag{hello_ctf}
## jeb反编译
如果是线下ctf比赛，无法在线反编译，可以准备jeb，尽管是demo版，也基本够用
[jeb3.7](https://www.pnfsoftware.com/blog/ethereum-smart-contract-decompiler/
"jeb3.7")
直接将bytecode保存到文件，jeb选择菜单文件中的`Open smart contract`， 选择本地文件即可, 反编译代码如下
    function start() {
        *0x40 = 0x80;
        var1 = msg.data.length;
        if(var1 >= 0x4) {
            uint256 var0 = (uint256)$msg.sig;