title:LAZARUS: Practical Side-Channel Resilient Kernel-Space Randomization
author:David Gens and
Orlando Arias and
Dean Sullivan and
Christopher Liebchen and
Yier Jin and
Ahmad-Reza Sadeghi
LAZARUS: Practical Side-Channel Resilient
Kernel-Space Randomization
David Gens1(B), Orlando Arias2, Dean Sullivan2, Christopher Liebchen1,
Yier Jin2, and Ahmad-Reza Sadeghi1
1 CYSEC/Technische Universit¨at Darmstadt, Darmstadt, Germany
{david.gens,christopher.liebchen,ahmad.sadeghi}@trust.tu-darmstadt.de
2 University of Central Florida, Orlando, FL, USA
{oarias,dean.sullivan}@knights.ucf.edu, PI:EMAIL
Abstract. Kernel exploits are commonly used for privilege escalation
to take full control over a system, e.g., by means of code-reuse attacks.
For this reason modern kernels are hardened with kernel Address Space
Layout Randomization (KASLR), which randomizes the start address
of the kernel code section at boot time. Hence, the attacker ﬁrst has to
bypass the randomization, to conduct the attack using an adjusted pay-
load in a second step. Recently, researchers demonstrated that attack-
ers can exploit unprivileged instructions to collect timing information
through side channels in the paging subsystem of the processor. This
can be exploited to reveal the randomization secret, even in the absence
of any information-disclosure vulnerabilities in the software.
In this paper we present LAZARUS , a novel technique to harden
KASLR against paging-based side-channel attacks. In particular, our
scheme allows for ﬁne-grained protection of the virtual memory mappings
that implement the randomization. We demonstrate the eﬀectiveness of
our approach by hardening a recent Linux kernel with LAZARUS, mit-
igating all of the previously presented side-channel attacks on KASLR.
Our extensive evaluation shows that LAZARUS incurs only 0.943% over-
head for standard benchmarks, and therefore, is highly practical.
Keywords: KASLR · Code-reuse
attacks
· Randomization ·
Side channels
1 Introduction
For more than three decades memory-corruption vulnerabilities have challenged
computer security. This class of vulnerabilities enables the attacker to over-
write memory in a way that was not intended by the developer, resulting in a
malicious control or data ﬂow. In the recent past, kernel vulnerabilities became
more prevalent in exploits due to advances in hardening user-mode applications.
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 11) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 238–258, 2017.
DOI: 10.1007/978-3-319-66332-6 11
LAZARUS: Practical Side-Channel Resilient
239
For example, browsers and other popular targets are isolated by executing them
in a sandboxed environment. Consequently, the attacker needs to execute a
privilege-escalation attack in addition to the initial exploit to take full con-
trol over the system [4,17–19]. Operating system kernels are a natural target for
attackers because the kernel is comprised of a large and complex code base, and
exposes a rich set of functionality, even to low privileged processes. Molinyawe et
al. [20] summarized the techniques used in the Pwn2Own exploiting contest, and
concluded that a kernel exploit is required for most privilege-escalation attacks.
In the past, kernels were hardened using diﬀerent mitigation techniques to
minimize the risk of memory-corruption vulnerabilities. For instance, enforcing
the address space to be writable or executable (W⊕X), but never both, prevents
the attacker from injecting new code. Additionally, enabling new CPU features
like Supervisor Mode Access Prevention (SMAP) and Supervisor Mode Exe-
cution Protection (SMEP) prevents certain classes of user-mode-aided attacks.
To mitigate code-reuse attacks, modern kernels are further fortiﬁed with kernel
Address Space Layout Randomization (KASLR) [2]. KASLR randomizes the
base address of the code section of the kernel at boot time, which forces attack-
ers to customize their exploit for each targeted kernel. Speciﬁcally, the attack
needs to disclose the randomization secret ﬁrst, before launching a code-reuse
attack.
In general, there are two ways to bypass randomization: (1) brute-force
attacks, and (2) information-disclosure attacks. While KASLR aims to make
brute-force attacks infeasible, attackers can still leverage information-disclosure
attacks, e.g., to leak the randomization secret. The attacker can achieve this by
exploiting a memory-corruption vulnerability, or through side channels. Recent
research demonstrated that side-channel attacks are more powerful, since they do
not require any kernel vulnerabilities [6,8,10,13,23]. These attacks exploit prop-
erties of the underlying micro architecture to infer the randomization secret of
KASLR. In particular, modern processors share resources such as caches between
user mode and kernel mode, and hence, leak timing information between privi-
leged and unprivileged execution. The general idea of these attacks is to probe
diﬀerent kernel addresses and measure the execution time of the probe. Since the
timing signature for valid and invalid kernel addresses is diﬀerent, the attacker
can compute the randomization secret by comparing the extracted signal against
a reference signal.
The majority of side-channel attacks against KASLR is based on paging [8,
10,13,23]. Here, the attacker exploits the timing diﬀerence between an aborted
memory access to an unmapped kernel address and an aborted memory access
to a mapped kernel address. As we eloberate in the related work Sect. 7 the focus
of the existing work is on attacks, and only include theoretical discussions on
possible defenses. For instance, Gruss et al. [8] brieﬂy discuss an idea similar to
our implemented defense by suggesting to completely un-map the kernel address
space when executing the user mode as it is done in iOS on ARM [16]. However,
as stated by the authors [8] they did not implement or evaluate the security
of their approach but only provided a simulation of this technique to provide
240
D. Gens et al.
a rough estimation of the expected run-time overhead which is around 5% for
system call intensive applications.
Goal and Contributions. The goal of this paper is to prevent kernel-space ran-
domization approaches from leaking side-channel information through the pag-
ing subsystem of the processor. To this end, we propose LAZARUS , as a novel
real-world defense against paging-based side-channel attacks on KASLR. Our
software-only defense is based on the observation that all of the presented attacks
have a common source of leakage: information about randomized kernel addresses
is stored in the paging caches of the processor while execution continues in user
mode. More speciﬁcally, the processor keeps paging entries for recently used
addresses in the cache, regardless of their associated privilege level. This results
in a timing side channel, because accesses for cached entries are faster than
cache misses. Our defense separates paging entries according to their privilege
level in caches, and provides a mechanism for the kernel to achieve this eﬃciently
in software. LAZARUS only separates those parts of the address space which
might reveal the randomization secret while leaving entries for non-randomized
memory shared. Our benchmarks show that this signiﬁcantly reduces the per-
formance overhead. We provide a prototype implementation of our side-channel
defense, and conduct an extensive evaluation of the security and performance
of our prototype for a recent kernel under the popular Debian Linux and Arch
Linux distributions.
To summarize, our contributions are as follows:
– Novel side-channel defense. We present the design of LAZARUS , a soft-
ware-only protection scheme to thwart side-channel attacks against KASLR
based on paging.
– Protoype Implementation. We provide a fully working and practical pro-
totype implementation of our defense for a recent Linux kernel version 4.8.
– Extensive Evaluation. We extensively evaluate our prototype against all
previously presented side-channel attacks and demonstrate that the random-
ization secret can no longer be disclosed. We re-implemented all previously
proposed attacks on KASLR for the Linux kernel. We additionally present an
extensive performance evaluation and demonstrate high practicality with an
average overhead of only 0.943% for common benchmarks.
2 Background
In this section, we ﬁrst explain the details of modern processor architectures nec-
essary to understand the remainder of this paper. We then explain the diﬀerent
attacks on KASLR presented by related work.
2.1 Virtual Memory
Virtual memory is a key building block to separate privileged system memory
from unprivileged user memory, and to isolate processes from each other. Virtual
LAZARUS: Practical Side-Channel Resilient
241
Fig. 1. When virtual memory is active, all memory accesses of the processor are medi-
ated by the MMU 1 : it loads the associated page-table entry 2 into the TLB from
memory, checks the required privilege level 3 , and translates the virtual memory
address into the corresponding physical memory address if and only if the current
privilege level of the processor matches the required privilege level 4 .
memory is implemented by enforcing an indirection between the address space
of the processor and the physical memory, i.e., every memory access initiated by
the processor is mediated by a piece of hardware called the Memory Management
Unit (MMU). The MMU translates the virtual address to a physical address, and
enforces access control based on permissions deﬁned for the requested address.
The translation information as well as the access permissions are stored in a
hierarchical data structure, which is maintained by the kernel, called the page
table. The kernel isolates processes from each other by maintaining separate page
tables for each process, and hence, diﬀerent permissions. In contrast to processes,
the kernel is not isolated using a separate page table but by setting the supervisor
bit in page-table entries that translate kernel memory. In fact, each process page
table contains entries that map the kernel (typically in the top part of the virtual
address space). This increases the performance of context switches between the
kernel and user applications because replacing the active page table forces the
MMU to evict entries from its internal cache, called Translation Lookaside Buﬀer
(TLB). The TLB caches the most recent or prominent page table entries, which is
a sensible strategy since software usually exhibits (spatial or temporal) locality.
Hence, all subsequent virtual-memory accesses, which are translated using a
cached page-table entry, will be handled much faster.
Figure 1 shows the major components of virtual memory and their interac-
tion. In the following we describe the MMU and the TLB in detail and explain
their role in paging-based side-channel attacks.
The Central Processing Unit (CPU) contains one or more execution units
(cores), which decode, schedule, and eventually execute individual machine
242
D. Gens et al.
instructions, also called operations. If an operation requires a memory access,
e.g., load and store operations, and the virtual memory subsystem of the proces-
sor is enabled, this access is mediated by the MMU (Step 1 ). If the page-table
entry for the requested virtual address is not cached in the TLB, the MMU loads
the entry into the TLB by traversing the page tables (often called a page walk)
which reside in physical memory (Step 2 ). The MMU then loads the respective
page-table entry into the TLBs (Step 3 ). It then uses the TLB entries to look
up the physical address and the required privilege level associated with a virtual
address (Step 4 ).
2.2 Paging-Based Side-Channel Attacks on KASLR
All modern operating systems leverage kernel-space randomization by means of
kernel code randomization (KASLR) [2,11,14]. However, kernel-space random-
ization has been shown to be vulnerable to a variety of side-channel attacks.
These attacks leverage micro-architectural implementation details of the under-
lying hardware. More speciﬁcally, modern processors share virtual memory
resources between privileged and unprivileged execution modes through caches,
which was shown to be exploitable by an user space adversary.
In the following we brieﬂy describe recent paging-based side-channel attacks
that aim to disclose the KASLR randomization secret. All these attacks exploit
the fact that the TLB is shared between user applications and the kernel (cf.,
Fig. 1). As a consequence, the TLB will contain page-table entries of the kernel
after switching the execution from kernel to a user mode application. Henceforth,
the attacker uses special instructions (depending on the concrete side-channel
attack implementation) to access kernel addresses. Since the attacker executes
the attack with user privileges, the access will be aborted. However, the time
diﬀerence between access attempt and abort depends on whether the guessed
address is cached in the TLB or not. Further, the attacker can also measure the
diﬀerence in timing between existing (requiring a page walk) and non-existing
mappings (immediate abort). The resulting timing diﬀerences can be exploited
by the attacker as a side channel to disclose the randomization secret as shown
recently [8,10,13,23].
Page Fault Handler (PFH). Hund, et al. [10] published the ﬁrst side-channel
attack to defeat KASLR. They trigger a page fault in the kernel from a user
process by accessing an address in kernel space. Although this unprivileged
access is correctly denied by the page fault handler, the TLBs are queried during
processing of the memory request. They show that the timing diﬀerence between
exceptions for unmapped and mapped pages can be exploited to disclose the ran-
dom oﬀset.
Prefetch Instruction. Furthermore, even individual instructions may leak tim-