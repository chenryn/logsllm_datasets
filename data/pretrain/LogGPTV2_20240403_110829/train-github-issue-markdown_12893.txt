I want to use `sklearn.compose.ColumnTransformer` consistently (not parallel,
so, the second transformer should be executed only after the first) for
intersecting lists of columns in this way:
    log_transformer = p.FunctionTransformer(lambda x: np.log(x))
    df = pd.DataFrame({'a': [1,2, np.NaN, 4], 'b': [1,np.NaN, 3, 4], 'c': [1 ,2, 3, 4]})
    compose.ColumnTransformer(n_jobs=1,
                             transformers=[
                                 ('num', impute.SimpleImputer() , ['a', 'b']),
                                 ('log', log_transformer, ['b', 'c']),
                                 ('scale', p.StandardScaler(), ['a', 'b', 'c'])
                             ]).fit_transform(df)
So, I want to use `SimpleImputer` for `'a'`, `'b'`, then `log` for `'b'`,
`'c'`, and then `StandardScaler` for `'a'`, `'b'`, `'c'`.
But:
  1. I get array of `(4, 7)` shape.
  2. I still get `Nan` in `a` and `b` columns.
So, how can I use `ColumnTransformer` for different columns in the manner of
`Pipeline`?
P.S. please note that I already asked a question on SO.