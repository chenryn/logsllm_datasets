在 main 函数里，代码清单 5-38 的第 30 行，创建了一个 user 实体类型的值，并将其赋值给变
量 u。之后在第 32 行将 u 的值传入 sendNotification 函数。不过，调用 sendNotification
的结果是产生了一个编译错误，如代码清单 5-39 所示。 
代码清单 5-39 将 user 类型的值存入接口值时产生的编译错误
./listing36.go:32: 不能将 u（类型是 user）作为 sendNotification 的参数类型 notifier： 
 user 类型并没有实现 notifier（notify 方法使用指针接收者声明） 
既然 user 类型已经在第 21 行实现了 notify 方法，为什么这里还是产生了编译错误呢？
让我们再来看一下那段代码，如代码清单 5-40 所示。 
代码清单 5-40 listing36.go：第 08 行到第 12 行，第 21 行到第 25 行 
08 // notifier 是一个定义了 
09 // 通知类行为的接口 
10 type notifier interface { 
11 
 notify() 
12 } 
21 func (u *user) notify() { 
22 
 fmt.Printf("Sending user email to %s\n", 
23 
 u.name, 
24 
 u.email) 
25 } 
代码清单 5-40 展示了接口是如何实现的，而编译器告诉我们 user 类型的值并没有实现这
个接口。如果仔细看一下编译器输出的消息，其实编译器已经说明了原因，如代码清单 5-41
所示。 
代码清单 5-41 进一步查看编译器错误 
(notify method has pointer receiver) 
要了解用指针接收者来实现接口时为什么 user 类型的值无法实现该接口，需要先了解方法
集。方法集定义了一组关联到给定类型的值或者指针的方法。定义方法时使用的接收者的类型决
定了这个方法是关联到值，还是关联到指针，还是两个都关联。 
让我们先解释一下 Go 语言规范里定义的方法集的规则，如代码清单 5-42 所示。 
代码清单 5-42 规范里描述的方法集 
Values 
 Methods Receivers 
----------------------------------------------- 
 T 
 (t T) 
*T
 (t T) and (t *T) 
代码清单 5-42 展示了规范里对方法集的描述。描述中说到，T 类型的值的方法集只包含值
接收者声明的方法。而指向 T 类型的指针的方法集既包含值接收者声明的方法，也包含指针接收
者声明的方法。从值的角度看这些规则，会显得很复杂。让我们从接收者的角度来看一下这些规
则，如代码清单 5-43 所示。 
代码清单 5-43 从接收者类型的角度来看方法集 
Methods Receivers 
 Values 
----------------------------------------------- 
 (t T) 
 T and *T 
 (t *T) 
*T
代码清单 5-43 展示了同样的规则，只不过换成了接收者的视角。这个规则说，如果使用指
针接收者来实现一个接口，那么只有指向那个类型的指针才能够实现对应的接口。如果使用值
接收者来实现一个接口，那么那个类型的值和指针都能够实现对应的接口。现在再看一下代码
清单 5-36 所示的代码，就能理解出现编译错误的原因了，如代码清单 5-44 所示。 
代码清单 5-44 listing36.go：第 28 行到第 38 行 
28 func main() { 
29 
 // 使用 user 类型创建一个值，并发送通知 
30 
 u := user{"Bill", "PI:EMAIL"} 
31 
32 
 sendNotification(u) 
33 
34 
 // ./listing36.go:32: 不能将 u（类型是 user）作为 
35 
 //      
 sendNotification 的参数类型 notifier： 
36 
 //   user 类型并没有实现 notifier 
37 
 //     
 （notify 方法使用指针接收者声明） 
38 } 
我们使用指针接收者实现了接口，但是试图将 user 类型的值传给 sendNotification 方
法。代码清单 5-44 的第 30 行和第 32 行清晰地展示了这个问题。但是，如果传递的是 user 值
的地址，整个程序就能通过编译，并且能够工作了，如代码清单 5-45 所示。 
代码清单 5-45 listing36.go：第 28 行到第 35 行 
28 func main() { 
29 
 // 使用 user 类型创建一个值，并发送通知 
30 
 u := user{"Bill", "PI:EMAIL"} 
31 
32 
 sendNotification(&u) 
33 
34 
 // 传入地址，不再有错误 
35 } 
在代码清单 5-45 里，这个程序终于可以编译并且运行。因为使用指针接收者实现的接口，
只有 user 类型的指针可以传给 sendNotification 函数。
现在的问题是，为什么会有这种限制？事实上，编译器并不是总能自动获得一个值的地址，
如代码清单 5-46 所示。 
代码清单 5-46 listing46.go 
01 // 这个示例程序展示不是总能 
02 // 获取值的地址 
03 package main 
04 
05 import "fmt" 
06 
07 // duration 是一个基于 int 类型的类型 
08 type duration int 
09 
10 // 使用更可读的方式格式化 duration 值 
11 func (d *duration) pretty() string { 
12 
 return fmt.Sprintf("Duration: %d", *d) 
13 } 
14 
15 // main 是应用程序的入口 
16 func main() { 
17 
 duration(42).pretty() 
18 
19 
 // ./listing46.go:17: 不能通过指针调用 duration(42)的方法 
20 
 // ./listing46.go:17: 不能获取 duration(42)的地址 
21 } 
代码清单 5-46 所示的代码试图获取 duration 类型的值的地址，但是获取不到。这展示了不能
总是获得值的地址的一种情况。让我们再看一下方法集的规则，如代码清单 5-47 所示。 
代码清单 5-47 再看一下方法集的规则 
Values 
 Methods Receivers 
----------------------------------------------- 
 T 
 (t T) 
*T
 (t T) and (t *T) 
  Methods Receivers     Values 
----------------------------------------------- 
 (t T)                 T and *T 
 (t *T) 
*T
因为不是总能获取一个值的地址，所以值的方法集只包括了使用值接收者实现的方法。 
5.4.4  多态 
现在了解了接口和方法集背后的机制，最后来看一个展示接口的多态行为的例子，如代码清
单 5-48 所示。 
代码清单 5-48 listing48.go 
01 // 这个示例程序使用接口展示多态行为 
02 package main 
03 
04 import ( 
05 
 "fmt" 
06 ) 
07 
08 // notifier 是一个定义了 
09 // 通知类行为的接口 
10 type notifier interface { 
11 
 notify() 
12 } 
13 
14 // user 在程序里定义一个用户类型 
15 type user struct { 
16 
 name  string 
17 
 email string 
18 } 
19 
20 // notify 使用指针接收者实现了 notifier 接口 
21 func (u *user) notify() { 
22 
 fmt.Printf("Sending user email to %s\n", 
23 
 u.name, 
24 
 u.email) 
25 } 
26 
27 // admin 定义了程序里的管理员 
28 type admin struct { 
29 
 name  string 
30 
 email string 
31 } 
32 
33 // notify 使用指针接收者实现了 notifier 接口 
34 func (a *admin) notify() { 
35 
 fmt.Printf("Sending admin email to %s\n", 
36 
 a.name, 
37 
 a.email) 
38 } 
39 
40 // main 是应用程序的入口 
41 func main() { 
42 
 // 创建一个 user 值并传给 sendNotification 
43 
 bill := user{"Bill", "PI:EMAIL"} 
44 
 sendNotification(&bill) 
45 
46 
 // 创建一个 admin 值并传给 sendNotification 
47 
 lisa := admin{"Lisa", "PI:EMAIL"} 
48 
 sendNotification(&lisa) 
49 } 
50 
51 // sendNotification 接受一个实现了 notifier 接口的值 
52 // 并发送通知 
53 func sendNotification(n notifier) { 
54 
 n.notify() 
55 } 
在代码清单 5-48 中，我们有了一个展示接口的多态行为的例子。在第 10 行，我们声明了和
之前代码清单中一样的 notifier 接口。之后第 15 行到第 25 行，我们声明了一个名为 user
的结构，并使用指针接收者实现了 notifier 接口。在第 28 行到第 38 行，我们声明了一个名
为 admin 的结构，用同样的形式实现了 notifier 接口。现在，有两个实体类型实现了
notifier 接口。
在第 53 行中，我们再次声明了多态函数 sendNotification，这个函数接受一个实现了
notifier 接口的值作为参数。既然任意一个实体类型都能实现该接口，那么这个函数可以针
对任意实体类型的值来执行 notifier 方法。因此，这个函数就能提供多态的行为，如代码清
单 5-49 所示。 
代码清单 5-49 listing48.go：第 40 行到第 49 行 
40 // main 是应用程序的入口 
41 func main() { 
42 
 // 创建一个 user 值并传给 sendNotification 
43 
 bill := user{"Bill", "PI:EMAIL"} 
44 
 sendNotification(&bill) 
45 
46 
 // 创建一个 admin 值并传给 sendNotification 
47 
 lisa := admin{"Lisa", "PI:EMAIL"} 
48 
 sendNotification(&lisa) 
49 } 
最后，可以在代码清单 5-49 中看到这种多态的行为。main 函数的第 43 行创建了一个 user
类型的值，并在第 44 行将该值的地址传给了 sendNotification 函数。这最终会导致执行 user
类型声明的 notify 方法。之后，在第 47 行和第 48 行，我们对 admin 类型的值做了同样的事
情。最终，因为 sendNotification 接受 notifier 类型的接口值，所以这个函数可以同时
执行 user 和 admin 实现的行为。
5.5  嵌入类型 
Go 语言允许用户扩展或者修改已有类型的行为。这个功能对代码复用很重要，在修改已有
类型以符合新类型的时候也很重要。这个功能是通过嵌入类型（type embedding）完成的。嵌入类
型是将已有的类型直接声明在新的结构类型里。被嵌入的类型被称为新的外部类型的内部类型。 
通过嵌入类型，与内部类型相关的标识符会提升到外部类型上。这些被提升的标识符就像直
接声明在外部类型里的标识符一样，也是外部类型的一部分。这样外部类型就组合了内部类型包
含的所有属性，并且可以添加新的字段和方法。外部类型也可以通过声明与内部类型标识符同名
的标识符来覆盖内部标识符的字段或者方法。这就是扩展或者修改已有类型的方法。 
让我们通过一个示例程序来演示嵌入类型的基本用法，如代码清单 5-50 所示。 
代码清单 5-50 listing50.go 
01 // 这个示例程序展示如何将一个类型嵌入另一个类型，以及 
02 // 内部类型和外部类型之间的关系 
03 package main 
04 
05 import ( 
06 
 "fmt" 
07 ) 
08 
09 // user 在程序里定义一个用户类型 
10 type user struct { 
11 
 name  string 
12 
 email string 
13 } 
14 
15 // notify 实现了一个可以通过 user 类型值的指针 
16 // 调用的方法 
17 func (u *user) notify() { 
18 
 fmt.Printf("Sending user email to %s\n", 
19 
 u.name, 
20 
 u.email) 