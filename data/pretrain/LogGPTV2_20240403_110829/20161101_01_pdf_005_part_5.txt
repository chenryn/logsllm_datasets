 | 12186 | SIReadLock | t | f
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | SIReadLock | t | f
 (6 rows)
事务隔离级别5
 会话 B :
 digoal=# commit;
 ERROR: could not serialize access due to read/write dependencies among transactions
 DETAIL: Reason code: Canceled on identification as a pivot, during commit attempt.
 HINT: The transaction might succeed if retried.
 会话 C :
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtransac
 tion | pid | mode | granted | fastpath
 ----------+----------+----------+----------+------+-------+------------+---------------+---------+-------+----------+---------------
 -----+-----+------+---------+----------
 (0 rows)
事务隔离级别测试6
 同样的场景, 加索引测试 :
 digoal=# create index idx_iso_test_1 on iso_test (id);
 CREATE INDEX
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=100;
 -[ RECORD 1 ]
 sum | 100
事务隔离级别测试6
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtua
 ltransaction | pid | mode | granted | fastpath
 ----------------+------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+-------
 -------------+-------+-----------------+---------+----------
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 1/1579
 96 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1579
 96 | 12186 | AccessShareLock | t | t
 | virtualxid | | | | | 1/157996 | | | | | 1/1579
 96 | 12186 | ExclusiveLock | t | t
 iso_test | tuple | 16384 | 92992 | 0 | 100 | | | | | | 1/1579
 96 | 12186 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 1/1579
 96 | 12186 | SIReadLock | t | f
 (5 rows)
 这里变成了行锁和页锁
事务隔离级别测试6
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtua
 ltransaction | pid | mode | granted | fastpath
 ----------------+------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+-------
 -------------+-------+-----------------+---------+----------
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 1/1579
 96 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1579
 96 | 12186 | AccessShareLock | t | t
 | virtualxid | | | | | 1/157996 | | | | | 1/1579
 96 | 12186 | ExclusiveLock | t | t
 iso_test | tuple | 16384 | 92992 | 0 | 100 | | | | | | 1/1579
 96 | 12186 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 1/1579
 96 | 12186 | SIReadLock | t | f
 (5 rows)
 这里变成了行锁和页锁
事务隔离级别测试6
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=10;
 -[ RECORD 1 ]
 sum | 10
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtua
 ltransaction | pid | mode | granted | fastpath
 ----------------+------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+-------
 -------------+-------+-----------------+---------+----------
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 1/1579
 96 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1579
 96 | 12186 | AccessShareLock | t | t
 | virtualxid | | | | | 1/157996 | | | | | 1/1579
 96 | 12186 | ExclusiveLock | t | t
事务隔离级别测试6
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 2/6433
 314 | 12222 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433
 314 | 12222 | AccessShareLock | t | t
 | virtualxid | | | | | 2/6433314 | | | | | 2/6433
 314 | 12222 | ExclusiveLock | t | t
 iso_test | tuple | 16384 | 92992 | 0 | 100 | | | | | | 1/1579
 96 | 12186 | SIReadLock | t | f
 iso_test | tuple | 16384 | 92992 | 0 | 10 | | | | | | 2/6433
 314 | 12222 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 1/1579
 96 | 12186 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 2/6433
 314 | 12222 | SIReadLock | t | f
 (10 rows)
事务隔离级别测试6
 digoal=# insert into iso_test values (1,'test');
 INSERT 0 1
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | vir
 tualtransaction | pid | mode | granted | fastpath
 ----------------+---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+----
 ----------------+-------+------------------+---------+----------
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 1/1
 57996 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1
 57996 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1
 57996 | 12186 | RowExclusiveLock | t | t
 | virtualxid | | | | | 1/157996 | | | | | 1/1
事务隔离级别测试6
 57996 | 12186 | ExclusiveLock | t | t
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 2/6
 433314 | 12222 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6
 433314 | 12222 | AccessShareLock | t | t
 | virtualxid | | | | | 2/6433314 | | | | | 2/6
 433314 | 12222 | ExclusiveLock | t | t
 | transactionid | | | | | | 316732567 | | | | 1/1
 57996 | 12186 | ExclusiveLock | t | f
 iso_test | tuple | 16384 | 92992 | 0 | 100 | | | | | | 1/1
 57996 | 12186 | SIReadLock | t | f
 iso_test | tuple | 16384 | 92992 | 0 | 10 | | | | | | 2/6
 433314 | 12222 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 1/1
 57996 | 12186 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 2/6
 433314 | 12222 | SIReadLock | t | f
 (12 rows)
事务隔离级别测试6
 digoal=# insert into iso_test values (2,'test');
 INSERT 0 1
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | vir
 tualtransaction | pid | mode | granted | fastpath
 ----------------+---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+----
 ----------------+-------+------------------+---------+----------
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 1/1
 57996 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1
 57996 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1
 57996 | 12186 | RowExclusiveLock | t | t
 | virtualxid | | | | | 1/157996 | | | | | 1/1
 57996 | 12186 | ExclusiveLock | t | t
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 2/6
 433314 | 12222 | AccessShareLock | t | t
事务隔离级别测试6
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6
 433314 | 12222 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6
 433314 | 12222 | RowExclusiveLock | t | t
 | virtualxid | | | | | 2/6433314 | | | | | 2/6
 433314 | 12222 | ExclusiveLock | t | t
 | transactionid | | | | | | 316732567 | | | | 1/1
 57996 | 12186 | ExclusiveLock | t | f
 | transactionid | | | | | | 316732568 | | | | 2/6
 433314 | 12222 | ExclusiveLock | t | f
 iso_test | tuple | 16384 | 92992 | 0 | 100 | | | | | | 1/1
 57996 | 12186 | SIReadLock | t | f
 iso_test | tuple | 16384 | 92992 | 0 | 10 | | | | | | 2/6
 433314 | 12222 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 1/1
 57996 | 12186 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 2/6
 433314 | 12222 | SIReadLock | t | f
 (14 rows)
事务隔离级别测试6
 digoal=# commit;
 COMMIT
 digoal=# commit;
 ERROR: could not serialize access due to read/write dependencies among transactions
 DETAIL: Reason code: Canceled on identification as a pivot, during commit attempt.
 HINT: The transaction might succeed if retried.
 索引页用了同一个, 并且被插入语句更新了. 所以发生了冲突
 如果其中一个插入的值不在1号索引页则没有问题, 例如
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=100;
 -[ RECORD 1 ]
 sum | 100
事务隔离级别测试6
 digoal=# insert into iso_test values (1,'test');
 INSERT 0 1
 digoal=# commit;
 COMMIT
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=10;
 -[ RECORD 1 ]
 sum | 10
 digoal=# insert into iso_test values (200000,'test');
 INSERT 0 1
 digoal=# commit;
 COMMIT
 (200000,'test') 这个索引页不在1号
 idx_iso_test_1 | page | 16384 | 93017 | 275 | | | | | | | 2/6433
 316 | 12222 | SIReadLock | t | f
事务隔离级别测试6
 注意事项
 PostgreSQL 的 hot_standby节点不支持串行事务隔离级别, 只能支持read committed和repeatable read隔离级别.
PostgreSQL锁的介绍
 锁对象的类型
 relation, extend, page, tuple, transactionid, virtualxid, object, userlock, or advisory
 src/include/storage/lock.h
 /*
 * LOCKTAG is the key information needed to look up a LOCK item in the
 * lock hashtable. A LOCKTAG value uniquely identifies a lockable object.
 *
 * The LockTagType enum defines the different kinds of objects we can lock.
 * We can handle up to 256 different LockTagTypes.
 */
 typedef enum LockTagType
 {
 LOCKTAG_RELATION, /* whole relation */
 /* ID info for a relation is DB OID + REL OID; DB OID = 0 if shared */
 LOCKTAG_RELATION_EXTEND, /* the right to extend a relation */
 /* same ID info as RELATION */
 LOCKTAG_PAGE, /* one page of a relation */
 /* ID info for a page is RELATION info + BlockNumber */
PostgreSQL锁的介绍
 LOCKTAG_TUPLE, /* one physical tuple */
 /* ID info for a tuple is PAGE info + OffsetNumber */
 LOCKTAG_TRANSACTION, /* transaction (for waiting for xact done) */
 /* ID info for a transaction is its TransactionId */