            ctx.beginPath();
            ctx.arc(Point.X, Point.Y, R, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();
            ctx.fillStyle = "#ffffff";
            ctx.beginPath();
            ctx.arc(Point.X, Point.Y, R - 3, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();
            // alert(Point.X+','+Point.Y)
            // var img = new Image();
            // img.src = "http://taqini.space/img/"+i+".png"; 
            // ctx.drawImage(img,Point.X-20,Point.Y-20,40,40);
            // if(pwdArr.indexOf(i)>=0){
            //   ctx.fillStyle = "#713fdf";
            //   ctx.beginPath();
            //   ctx.arc(Point.X, Point.Y, R -16, 0, Math.PI * 2, true);
            //   ctx.closePath();
            //   ctx.fill();
            // }
            ctx.font = '36px "微软雅黑"';
            ctx.textBaseline = "bottom";
            ctx.fillStyle = "#000000";
            ctx.fillText(eight[i],Point.X-18,Point.Y+20);
          }
        }
        /**
         * 计算选中的密码 
         */
        function getSelectPwd(touches,pwdArr){
          for (var i = 0; i  R || pwdArr.indexOf(i) >= 0)
             continue;
             pwdArr.push(i);
             break;
          }
        }
        /**
         * 给画布绑定事件
         */
        function bindEvent(canvas, ctx) {
          var pwdArr = [];
          var res;
          canvas.addEventListener("touchstart", function (e) {
            getSelectPwd(e.touches[0],pwdArr);
          }, false);
          canvas.addEventListener("touchmove", function (e) {
            e.preventDefault();
            var touches = e.touches[0];
            getSelectPwd(touches,pwdArr);
            ctx.clearRect(0,0,canvasWidth,canvasHeight);
            Draw(ctx,circleArr,pwdArr,{X:touches.pageX,Y:touches.pageY});
          }, false);
          canvas.addEventListener("touchend", function (e) {
            ctx.clearRect(0,0,canvasWidth,canvasHeight);
            Draw(ctx,circleArr,pwdArr,null);
            // alert("密码结果是："+pwdArr.join(""));
            res = pwdArr.join("")
            if(res=="723048561"){
              alert("flag{c967db67a5e32fef9049499daadc19e8}");
            }else{
              location.reload();
            }
            res = ""
            pwdArr=[];
          }, false);
        };
得到flag
## Crypto
###  bbcrypto
    # -*- coding:utf-8 -*-    import A,SALT
    from itertools import *
    def encrypt(m, a, si):
        c=""
        for i in range(len(m)):
            c+=hex(((ord(m[i])) * a + ord(next(si))) % 128)[2:].zfill(2)
        return c
    if __name__ == "__main__":
        m = 'flag{********************************}'
        a = A
        salt = SALT
        assert(len(salt)==3)
        assert(salt.isalpha())
        si = cycle(salt.lower())
        print("明文内容为：")
        print(m)
        print("加密后的密文为：")
        c=encrypt(m, a, si)
        print(c)
        #加密后的密文为：
        #177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d
是一个简单的仿射密码，c = ax+salt（mod 128）
其中a固定未知，salt是变化的，但是周期只有3
我们知道flag的格式，开头为flag
所以我们拿‘f’和‘g’来解方程，此时两个未知数，两条方程，完全可解。
解出a后，再用flag的‘l’和‘a’来解salt的另外两个值
最终解出a = 57, salt = ‘ahh’
exp:
    from Crypto.Util.number import *
    c = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d'.decode('hex')
    m = 'flag'
    #c[0] = ord('f')*a + b
    #c[3] = ord('g')*a + b
    a=57
    b1 = (0x17-ord('f')*a)%128
    b2 = (0x74-ord('l')*a)%128
    b3 = (0x01-ord('a')*a)%128
    salt='ahh'
    flag=''
    index=0
    for i in c:
        b = ord(salt[index%3])
        index+=1
        flag+=chr((ord(i)-b)*inverse(a,128)%128)
###  Encrypt_Img
    from numpy import array
    from PIL import Image
    from secret import Key
    Plaintext1 = "RC4IsInteresting"
    Plaintext2 = "ThisIsAEasyGame"
    cnt = 0
    class RC4():
        def __init__(self, Key):
            self.S = [i for i in range(256)]
            self.K = [ord(Key[i % len(Key)])*2 for i in range(256)]
            self.I, self.J = 0, 0
            self.KSA()
        def KSA(self):
            for i in range(256):
                j = (i+self.K[i]+self.S[i]) % 256
                self.S[i], self.S[j] = self.S[j], self.S[i]
        def next(self):
            self.I = (self.I+1) % 256
            self.J = (self.J+self.S[self.I]) % 256
            self.S[self.J], self.S[self.I] = self.S[self.I], self.S[self.J]
            tmp = (self.S[self.J] + self.S[self.I]) % 256
            return self.S[tmp]
    class Encrypt():
        def __init__(self, plain):
            global cnt
            cnt += 1
            self.rc4 = RC4(Key)
            self.testRC4(plain)
            flag_file = Image.open(r"flag.png")
            img = array(flag_file)
            self.enc(img)
        def testRC4(self, plain):
            ciphertext = 0
            for i in plain:
                ciphertext = (ciphertext > 16
        def output(self):
            print("a = {}nb = {}nm = {}".format(self.a, self.b, self.m))
            print("state1 = {}".format(self.next()))
            print("state2 = {}".format(self.next()))
    class DH:
        def __init__(self):
            self.lcg = LCG()
            self.lcg.output()
            self.g = getRandomNBitInteger(128)
            self.m = getPrime(256)
            self.A, self.a = self.gen_AB()
            self.B, self.b = self.gen_AB()
            self.key = pow(self.A, self.b, self.m)
        def gen_AB(self):
            x = ''
            for _ in range(64):
                x += '1' if self.lcg.next() % 2 else '0'
            return pow(self.g, int(x, 2), self.m), int(x, 2)
    DH = DH()
    flag = bytes_to_long(flag)
    print("g = {}nA = {}nB = {}nM = {}".format(DH.g, DH.A, DH.B, DH.m))
    print("Cipher = {}".format(flag ^ DH.key))
    '''
    a = 3844066521
    b = 3316005024
    m = 2249804527
    state1 = 16269
    state2 = 4249
    g = 183096451267674849541594370111199688704
    A = 102248652770540219619953045171664636108622486775480799200725530949685509093530
    B = 74913924633988481450801262607456437193056607965094613549273335198280176291445
    M = 102752586316294557951738800745394456033378966059875498971396396583576430992701
    Cipher = 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703
    '''
这一道题两个知识点，一个是LCG，一个是DHP，其中，DHP用于加密flag，我们要得到flag就要获得协商密钥。而获得协商密钥的方法就是知道一方的私钥。而双方的私钥使用LCG生成的。
LCG中的三个参数a,b,m我们都知道。然后给出了s1 和 s2 的高位。低16位未知。这里完全可以爆破。
爆破s1，然后生成s2，看高位是否与给出的s2高位一致来确定。最终爆出四个符合的值。
然后就利用四个可能的s2和a, b, m，根据题目生成密钥的方式来生成A的四个可能私钥。再利用B的公钥获得四个协商密钥。然后看解密结果，找出flag。
exp:
    from Crypto.Util.number import *
    a = 3844066521
    b = 3316005024
    m = 2249804527
    state1 = 16269
    state2 = 4249
    M = 102752586316294557951738800745394456033378966059875498971396396583576430992701
    B = 74913924633988481450801262607456437193056607965094613549273335198280176291445
    A = 102248652770540219619953045171664636108622486775480799200725530949685509093530
    c = 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703
    for i in range(2**16):
        s = state1>16 == 4249:
            s2 = (a*s+b)%m
            print s2
            x=''
            for _ in range(64):
                s2 = (a*s2+b)%m
                x += '1' if (s2>>16) % 2 else '0'
            x = int(x,2)
            key = pow(B,x,M)
            flag = key^c
            print long_to_bytes(flag)
###  knapsack
    from Crypto.Util.number import *
    from functools import reduce
    def genKey(length):