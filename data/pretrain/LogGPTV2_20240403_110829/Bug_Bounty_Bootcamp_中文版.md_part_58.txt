structure by examining how long the server is taking to respond to your
request. If it takes much longer to respond for some addresses, those
network addresses might be unrouted or hidden behind a firewall.
*Unrouted addresses* cannot be reached from the current machine. On the
other hand, unusually short response times may also indicate an unrouted
address, because the router might have dropped the request immediately.
如果服务器没有以状态码的形式返回任何有用的信息，您仍然可以通过检查服务器响应您的请求所需的时间来确定网络结构。如果对某些地址响应时间超长，这些网络地址可能没有路由，或被隐藏在防火墙后面。从当前机器无法访问未路由的地址。另一方面，异常短的响应时间也可能表明存在未路由的地址，因为路由器可能立即丢弃了该请求。
When performing any kind of network or port scanning, it is important to
remember that machines behave differently. The key is to look for
differences in behavior from the machines on the same network, instead
of the specific signatures like response times or response codes
described previously.
执行任何类型的网络或端口扫描时，重要的是要记住不同的机器表现不同。关键是要查找在同一网络上的机器的行为差异，而不是先前描述的特定签名，比如响应时间或响应代码。
The target machine might also leak sensitive information in outbound
requests, such as internal IPs, headers, and version numbers of the
software used. If you can't access an internal address, you can always
try to provide the vulnerable endpoint with the address of a server you
own and see what you can extract from the incoming request.
目标机器在出站请求中可能会泄露敏感信息，例如内部IP、标头和所使用软件的版本号。如果您无法访问内部地址，可以尝试向易受攻击的端点提供您拥有的服务器地址，并查看您可以从传入请求中提取什么。
### Attack the Network {#c13.xhtml#h2-123456c13-0009}
Use what you've found by scanning the network, identifying services, and
pulling instance metadata to execute attacks that have impact. Notably,
you may be able to bypass access controls, leak confidential
information, and execute code.
使用通过扫描网络、识别服务和提取实例元数据所获得的信息执行具有影响的攻击。值得注意的是，您可能能够绕过访问控制、泄露机密信息并执行代码。
First, try to bypass access control. Some internal services might
control access based on IP addresses or internal headers only, so it
might be possible to bypass controls to sensitive functionalities by
simply sending the request from a trusted machine. For example, you
might be able to access internal websites by proxying through a web
server:
首先，请尝试绕过访问控制。一些内部服务可能仅基于 IP
地址或内部头来控制访问，因此通过从受信任的机器发送请求，可能可以绕过对敏感功能的控制。例如，您可能可以通过代理服务器访问内部网站：
    https://public.example.com/proxy?url=https://admin.example.com
[ ]{#c13.xhtml#Page_229 .pagebreak title="229"} You can also try to
execute internal API calls through the SSRF endpoint. This type of
attack requires knowledge about the internal system and API syntax,
which you can obtain by conducting recon and via other information leaks
from the system. For example, let's say the API endpoint
*admin.example.com/delete_user* deletes a user and can only be requested
by an internal address. You could trigger the request if you find an
SSRF that lets you send a request from a machine in the trusted network:
您还可以尝试通过SSRF端点执行内部API调用。这种类型的攻击需要对内部系统和API语法有所了解，您可以通过查阅信息并通过系统中的其他信息泄漏来获得这些知识。例如，假设API端点admin.example.com/delete_user删除用户，并且只能由内部地址请求。如果您找到了一个允许您从可信网络中的计算机发送请求的SSRF，您就可以触发该请求。
    https://public.example.com/send_request?url=https://admin.example.com/delete_user?user=1
Second, if you were able to find credentials using the SSRF by leaking
info via headers or by querying instance metadata, use those credentials
to access confidential information stored on the network. For example,
if you were able to find Amazon S3 keys, enumerate the company's private
S3 buckets and see if you can access them with the credentials you
found.
其次，如果你能够通过 SSRF
泄露标头或查询实例元数据找到凭据，请使用这些凭据访问存储在网络上的机密信息。例如，如果你能够找到
Amazon S3 密钥，请列举公司的私有 S3
存储桶，看看是否可以使用你找到的凭据访问它们。
Third, use the info you gathered to turn SSRF into remote code execution
(which you'll learn more about in [ Chapter 18 ]{.xref
itemid="xref_target_Chapter 18"} ). For example, if you found admin
credentials that give you write privileges, try uploading a shell to the
web server. Or, if you found an unsecured admin panel, see if any
features allow the execution of scripts. You can also use either classic
or blind SSRF to test for other vulnerabilities on the target's network
by sending payloads designed to detect well-known vulnerabilities to
reachable machines.
第三步，利用收集到的信息将SSRF转换为远程代码执行（这将在第18章中详细介绍）。例如，如果您找到了可以让您拥有写权限的管理员凭据，请尝试将shell上传到Web服务器。或者，如果您发现了一个不安全的管理员面板，请查看是否有任何功能允许执行脚本。您还可以使用经典或盲目的SSRF来测试目标网络上的其他漏洞，通过向可到达的机器发送旨在检测众所周知的漏洞的有效载荷来测试。
## Finding Your First SSRF! {#c13.xhtml#h1-123456c13-0006}
Let's review the steps you can take to find your first SSRF:
让我们回顾一下你可以采取的步骤来找到你的第一个SSRF：
1.  Spot the features prone to SSRFs and take notes for future
    reference.
2.  Set up a callback listener to detect blind SSRFs by using an online
    service, Netcat, or Burp's Collaborator feature.
3.  Provide the potentially vulnerable endpoints with common internal
    addresses or the address of your callback listener.
4.  Check if the server responds with information that confirms the
    SSRF. Or, in the case of a blind SSRF, check your server logs for
    requests from the target server.
5.  In the case of a blind SSRF, check if the server behavior differs
    when you request different hosts or ports.
6.  If SSRF protection is implemented, try to bypass it by using the
    strategies discussed in this chapter.
7.  Pick a tactic to escalate the SSRF.
8.  Draft your first SSRF report!
:::
[]{#c14.xhtml}
::: section
# [ [ ]{#c14.xhtml#Page_231 .pagebreak title="231"} 14 ]{.ChapterNumber} [ Insecure Deserialization ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
*Insecure deserialization* vulnerabilities happen when applications
deserialize program objects without proper precaution. An attacker can
then manipulate serialized objects to change the program's behavior.
应用程序在未采取适当预防措施的情况下对程序对象进行反序列化时，会发生不安全的反序列化漏洞。攻击者随后可以操纵序列化对象以更改程序行为。
Insecure deserialization bugs have always fascinated me. They're hard to
find and exploit, because they tend to look different depending on the
programming language and libraries used to build the application. These
bugs also require deep technical understanding and ingenuity to exploit.
Although they can be a challenge to find, they are worth the effort.
Countless write-ups describe how researchers used these bugs to achieve
RCE on critical assets from companies such as Google and Facebook.
不安全的反序列化漏洞一直吸引着我。由于构建应用程序使用的编程语言和库不同，它们很难被找到和利用，因为它们通常具有不同的外观。这些漏洞还需要深入的技术理解和独创性的利用。尽管它们很难被找到，但它们是值得努力寻找的。无数的文献描述了研究人员如何利用这些漏洞来实现RCE，从Google和Facebook等公司的关键资产。
In this chapter, I'll talk about what insecure deserialization is, how
insecure deserialization bugs happen in PHP and Java applications, and
how you can exploit them.
在这一章中，我将谈论什么是不安全的反序列化，以及在PHP和Java应用程序中如何发生不安全的反序列化漏洞，以及如何利用它们。
## [ ]{#c14.xhtml#Page_232 .pagebreak title="232"} Mechanisms {#c14.xhtml#h1-123456c14-0001}
*Serialization* is the process by which some bit of data in a
programming language gets converted into a format that allows it to be
saved in a database or transferred over a network. *Deserialization*
refers to the opposite process, whereby the program reads the serialized
object from a file or the network and converts it back into an object.
序列化是将编程语言中的某些数据转换为一种格式的过程，使其可以保存在数据库中或通过网络传输。反序列化指的是相反的过程，即程序从文件或网络中读取序列化对象并将其转换回对象。
This is useful because some objects in programming languages are
difficult to transfer through a network or to store in a database
without corruption. Serialization and deserialization allow programming
languages to reconstruct identical program objects in different
computing environments. Many programming languages support the
serialization and deserialization of objects, including Java, PHP,
Python, and Ruby.
这是有用的，因为一些编程语言中的对象很难在网络中传输或存储在数据库中而不破坏。序列化和反序列化允许编程语言在不同的计算环境中重构相同的程序对象。许多编程语言支持对象的序列化和反序列化，包括Java，PHP，Python和Ruby。
Developers often trust user-supplied serialized data because it is
difficult to read or unreadable to users. This trust assumption is what
attackers can abuse. *Insecure deserialization* is a type of
vulnerability that arises when an attacker can manipulate the serialized
object to cause unintended consequences in the program. This can lead to
authentication bypasses or even RCE. For example, if an application
takes a serialized object from the user and uses the data contained in
it to determine who is logged in, a malicious user might be able to
tamper with that object and authenticate as someone else. If the
application uses an unsafe deserialization operation, the malicious user
might even be able to embed code snippets in the object and get it
executed during deserialization.
开发者经常信任用户提供的序列化数据，因为对于用户来说很难读取或者不可读。然而这种信任假设恰恰是攻击者可以利用的弱点。不安全的反序列化就是一种类型的漏洞，攻击者可以通过操纵序列化对象来在程序中引起意料之外的后果。这可能导致绕过认证甚至RCE。例如，如果一个应用程序接受用户提供的序列化对象并使用其中的数据来确定谁已登录，那么恶意用户可能能够篡改该对象并作为其他人进行认证。如果应用程序使用不安全的反序列化操作，那么恶意用户甚至可能能够在对象中嵌入代码片段并在反序列化期间执行它。
The best way to understand insecure deserialization is to learn how
different programming languages implement serialization and
deserialization. Since these processes look different in every language,
we'll explore how this vulnerability presents itself in PHP and Java.
Before we continue, you'll need to install PHP and Java if you want to
test out the example code in this chapter.
理解不安全反序列化的最佳方法是学习不同编程语言如何实现序列化和反序列化。由于这些过程在每种语言中看起来不同，因此我们将探讨此漏洞在PHP和Java中的表现方式。在继续之前，如果您想测试本章节中的示例代码，您需要安装PHP和Java。
You can install PHP by following the instructions for your system on the
PHP manual page (
[https://www.php.net/manual/en/install.php](https://www.php.net/manual/en/install.php){.LinkURL}
). You can then run PHP scripts by running `      php     `
`      YOUR_PHP_SCRIPT.php     `{.variable} using the command line.
Alternatively, you can use an online PHP tester like ExtendsClass (
[https://extendsclass.com/php.html](https://extendsclass.com/php.html){.LinkURL}
) to test the example scripts. Search *online PHP tester* for more
options. Note that not all online PHP testers support serialization and
deserialization, so make sure to choose one that does.
您可以按照PHP手册页面上针对您所用系统的说明进行安装（https://www.php.net/manual/zh/install.php）。您随后可以使用命令行通过运行"php
YOUR_PHP_SCRIPT.php"来运行PHP脚本。或者，您可以使用在线的PHP测试器（例如ExtendsClass（https://extendsclass.com/php.html））来测试示例脚本。搜索在线PHP测试器以了解更多选项。请注意，并非所有在线PHP测试器都支持序列化和反序列化，请确保选择支持此功能的测试器。
Most computers should already have Java installed. If you run
`      java -version     ` at the command line and see a Java version
number returned, you don't have to install Java again. Otherwise, you
can find the instructions to install Java at
[https://java.com/en/download/help/download_options.html](https://java.com/en/download/help/download_options.html){.LinkURL}
. You can also use an online Java compiler to test your code; Tutorials
Point has one at
[https://www.tutorialspoint.com/compile_java_online.php](https://www.tutorialspoint.com/compile_java_online.php){.LinkURL}
.
大多数计算机应该已经安装了Java。如果您在命令行上运行java
-version并看到返回的Java版本号，则无需再次安装Java。否则，您可以在https://java.com/en/download/help/download_options.html找到安装Java的说明。您也可以使用在线Java编译器测试您的代码；Tutorials
Point在https://www.tutorialspoint.com/compile_java_online.php上有一个。
### PHP {#c14.xhtml#h2-123456c14-0001}
Although most deserialization bugs in the wild are caused by insecure
deserialization in Java, I've also found PHP deserialization
vulnerabilities to be extremely common. In my research project that
studied publicly disclosed [ ]{#c14.xhtml#Page_233 .pagebreak
title="233"} deserialization vulnerabilities on HackerOne, I discovered
that half of all disclosed deserialization vulnerabilities were caused
by insecure deserialization in PHP. I also found that most
deserialization vulnerabilities are resolved as high-impact or
critical-impact vulnerabilities; incredibly, most can be used to cause
the execution of arbitrary code on the target server.
尽管在实际环境中，大多数反序列化错误是由 Java
中的不安全反序列化引起的，我发现 PHP
反序列化漏洞也非常普遍。在我研究公开披露的 HackerOne
反序列化漏洞的研究项目中，我发现一半以上的披露的反序列化漏洞是由 PHP
不安全反序列化引起的。我还发现，大多数反序列化漏洞都被解决为高影响力或危急影响力漏洞；令人惊讶的是，这些漏洞大多可用于在目标服务器上执行任意代码。
When insecure deserialization vulnerabilities occur in PHP, we sometimes
call them *PHP object injection vulnerabilities* . To understand PHP
object injections, you first need to understand how PHP serializes and
deserializes objects.
当PHP发生不安全的反序列化漏洞时，我们有时称之为PHP对象注入漏洞。要理解PHP对象注入，首先需要了解PHP如何对对象进行序列化和反序列化。
When an application needs to store a PHP object or transfer it over the
network, it calls the PHP function `      serialize()     ` to pack it
up. When the application needs to use that data, it calls
`      unserialize()     ` to unpack and get the underlying object.
当应用程序需要存储一个 PHP 对象或在网络上传输它时，它会调用 PHP 函数
serialize() 来打包它。当应用程序需要使用该数据时，调用 unserialize()
来解包并获取基础对象。
For example, this code snippet will serialize the object called
`      user     ` :
例如，这段代码片段将序列化名为用户（user）的对象：
    username = 'vickie';
    4 $user->status = 'not admin';
    5 echo serialize($user);
    ?>
This piece of PHP code declares a class called `      User     ` . Each
`      User     ` object will contain a `      $username     ` and a
`      $status     ` attribute [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . It then creates a new `      User     `