title:Cryptographic Methods for Storing Ballots on a Voting Machine
author:John Bethencourt and
Dan Boneh and
Brent Waters
Cryptographic Methods for Storing Ballots on a Voting Machine
John Bethencourt
Dan Boneh
Carnegie Mellon University
Stanford University
Brent Waters
SRI International
Abstract
A direct recording electronic (DRE) voting machine must
satisfy several requirements to ensure voter privacy and the
integrity of the election. A recent proposal for a vote stor-
age system due to Molnar et al. provides tamper-evidence
properties while maintaining voter privacy by storing bal-
lots on a programmable, read-only memory (PROM). We
achieve the same properties and protect against additional
threats of memory replacement through cryptographic tech-
niques, without the use of special hardware. Our approach
is based on a new cryptographic primitive called History-
Hiding Append-Only Signatures.
1
Introduction
The deployment of electronic voting terminals intro-
duces the problem of adequately storing votes in digital
form. A vote storage system must store votes on the voting
terminal during the election and possibly in archive form
long after the end of the election. While there is some de-
bate as to the precise requirements of a vote storage system,
some deployed systems [12] have been shown to be clearly
inadequate.
Molnar et al. [15] recently identiﬁed seven requirements
that a vote storage system must satisfy. The four primary
requirements are: (1) durable — the storage system must
not lose stored votes if the terminal crashes, (2) tamper-
evident — an audit will detect if stored votes were modiﬁed
or deleted, (3) history-hiding — the layout of ballots on
the storage medium should reveal no information about the
order in which ballots were cast, and (4) subliminal-free
— a malicious implementation or user should not be able to
embed covert information in the voting record.
The history-hiding property is necessary for voter pri-
vacy. The concern is that during the election a coercer
might keep track of the order in which voters visited a par-
ticular voting terminal. If the history-hiding property does
not hold, the coercer could inspect the voting record post-
election and learn how each voter voted. Thus, history-
hiding is necessary to prevent coercion and vote buying.
The subliminal-free property ensures that malicious soft-
ware loaded on the terminal cannot leak covert information
exposing how voters voted. Note that we must assume the
user of the voting machine is actively trying to leak infor-
mation about their vote, since they may be under coercion
or trying to sell their vote.
Molnar et al. [15] propose a vote storage system based
on PROM storage, a form of write-once memory. The
data structures used to store the ballots ensure that any il-
licit writes to the memory will be detected, thus providing
tamper-evidence. Properties (3) and (4) are also maintained
by the data structures used. However, the PROM approach
does not address the additional threat of one PROM being
replaced with another. Since the PROM’s must be trans-
ported from the voting machines to the canvassing facility
at the end of the polling period, this threat must not be un-
derestimated.
Our contributions.
In this paper, we propose a new vote
storage system which builds on the Molnar et al. proposal
by providing additional tamper-evidence properties. Specif-
ically, it protects against the threat of physical replacement
of the memory storing the ballots while maintaining the
tamper-evidence, voter privacy, and durability provided by
the previous system. The new proposal incurs no additional
cost in the hardware requirements of the voting machines
and furthermore removes the need for disposable PROM
memories (which must be purchased for each election) by
employing cryptographic techniques implemented in soft-
ware.
The proposed vote storage system is based on a new
cryptographic primitive we call History-Hiding Append-
Only Signatures (HHAOS), which is of independent inter-
est. We provide two HHAOS schemes and prove them se-
cure. The ﬁrst is based on any existing digital signature sys-
tem in a straightforward manner, but requires the voting ter-
minal to store large state and does not satisfy the subliminal-
free property. The second system is space efﬁcient and can
be made subliminal-free at election close time. This second
system makes use of aggregate signatures in groups with a
bilinear map.
The HHAOS primitive builds on an earlier primi-
tive called append-only signatures, introduced by Kiltz et
al. [11]. The basic idea is as follows (we give precise deﬁ-
nitions in Section 2).
• An HHAOS is initialized by generating a public key
PK and an “empty” signature Φ1. The voting terminal
performs this initialization prior to election start. PK
is printed on paper and stored in a trusted facility. It
can be replicated for higher assurance. Φ1 is stored in
non-volatile memory in the voting machine.
• Let Φi be the value in non-volatile memory when voter
number i walks up to the terminal. After the voter
casts his vote vi, the terminal runs an append algo-
rithm Append(Φi, vi). This algorithm outputs a new
Φi+1 which contains the ballot vi. This new Φi+1 is
written to non-volatile memory and replaces Φi.
• At election close the terminal runs algorithm Finalize
to update the last Φ and prevent any further appends.
This ﬁnalized Φ is published or stored in an archive.
At any time post-election, anyone can validate authen-
ticity of the set of ballots X = {v1, . . . , vn} using PK
and the ﬁnal Φ.
To satisfy the tamper-evidence and history-hiding require-
ments, an HHAOS must satisfy two security properties:
• Append-only: given a signature Φ on a set of messages
X it is difﬁcult to remove messages from X. That is,
it is difﬁcult to create a valid Φ′ for a set X ′ satisfying
X 6⊆ X ′.
• History-hiding: given a signature Φ on a set of mes-
sages X, an adversary cannot determine the order in
which messages were added to X.
Note that when a new Φ is computed and stored within
the voting machine, the previous value is deleted. While
securely deleting data on a commodity system takes some
care, it is certainly possible [7, 5].
Relation to append-only signatures (AOS). Kiltz et
al. [11] recently introduced the concept of an append-only
signature (AOS) for the purpose of securing routing pro-
tocols. They give several elegant constructions and prove
that AOS is equivalent to hierarchical identity-based signa-
tures. An AOS is closely related to HHAOS — it satisﬁes
the same append-only property, but need not be history-
hiding or subliminal-free. Not surprisingly, the construc-
tions in [11] are not history-hiding.
Relation to forward secure signatures. Forward secure
signatures [1] enable one to periodically update the sign-
ing key so that a key compromise at day n does not in-
validate signatures issued prior to day n. One may be
tempted to use forward-secure signatures for vote storage:
after signing a vote v the terminal discards the signing key
and moves on to the signing key for the next time period.
Unfortunately, most forward secure signatures are inher-
ently history-preserving. One exception is a forward-secure
system due to Itkis and Reyzin [9] which could be made
history-independent. The resulting HHAOS, however, is
less efﬁcient than our second construction.
2 History-Hiding, Append Only Signatures
We start by precisely deﬁning a history hiding append
only signature system. We then explain how this deﬁnition
implies the properties discussed in the introduction. For-
mally, an HHAOS scheme consists of three algorithms:
KeyGen(1κ) → PK, Φ
Given a security parameter κ, produce a public key PK
and an initial signature Φ, which corresponds to the
empty set.
Append(Φ, x) → Φ′
Given a signature Φ for some set X and a new string
x ∈ {0, 1}∗, produce a new signature Φ′ for the set
X ′ = X ∪ {x}.
Verify(PK, X, Φ) → {True, False}
Given a the public key PK and a set X, determine
whether Φ is a correct signature for X.
The system must satisfy the following correctness property:
Deﬁnition 1 (Correctness). Let X = {x1, . . . xn} ⊆
{0, 1}∗. Compute PK, Φ0 ← KeyGen(1κ) and Φi ←
Append(Φi−1, xi) for i = 1, . . . , n. We require that
Verify(PK, X, Φn) = True.
If this holds for all ﬁnite
X ⊆ {0, 1}∗, then the scheme (KeyGen, Append, Verify)
is correct.
We deﬁne security for an HHAOS system using two
games. The ﬁrst game captures the append-only property.
Game 1:
Corrupt The
Setup The challenger computes PK, Φ0 ←
KeyGen(1κ) and gives PK to the adversary.
chal-
strings
lenger
X = {x1, x2, . . . xn}.
The challenger
computes Φi ← Append(Φi−1, xi) for
each i ∈ {1, . . . n}, then returns Φn to the
adversary.
sends
set
the
of
adversary
an
ordered
Forge The adversary returns a set Y and a signa-
ture ΦY .
If Verify(PK, Y, ΦY ) = True and X 6⊆ Y , then the adver-
sary has won Game 1.
Deﬁnition 2 (Append Only Unforgeability). An HHAOS
scheme (KeyGen, Append, Verify) is (t, ǫ)-append only un-
forgeable if every probabilistic algorithm with running time
at most t wins Game 1 with probability at most ǫ. We
say the scheme is append only unforgeable if the scheme
is (t, ǫ)-append only unforgeable where t is a polynomial in
the security parameter κ and ǫ is negligible in κ.
Note that in Game 1 we only give the adversary the
power to issue a single query X. This captures the vot-
ing terminal settings where every append-only chain is used
only once, namely for one machine in one election. One can
extend Game 1 to allow the adversary to adaptively issue
queries for multiple sets X, as in [11]. Since here we focus
on the application to voting, the deﬁnition using Game 1
is sufﬁcient. The second game captures the history-hiding
property.
Game 2:
Setup The challenger computes PK, Φ0 ←
KeyGen(1κ) and gives PK to the adversary.
Challenge The adversary returns an ordered set
X = {x1, x2, . . . xn} and two permutations
λ0 and λ1 on X. The challenger ﬂips a
coin b ∈ {0, 1} and then computes Φi ←
Append(Φi−1, λb(xi)) for i ∈ {1, . . . n}.
The challenger returns Φn to the adversary.
Guess The adversary outputs a guess b′.
We deﬁne the advantage of the adversary in Game 2 to be
|Pr [ b′ = b ] − 1
2 |.
Deﬁnition 3 (History-Hiding). An HHAOS scheme
(KeyGen, Append, Verify) is (t, ǫ)-history-hiding if every
probabilistic algorithm with running time at most t has ad-
vantage at most ǫ in Game 2. We say that the scheme is
history-hiding if it is (t, ǫ)-history-hiding where t is a poly-
nomial in the security parameter κ and ǫ is negligible in κ.
Much related work refers to data structures which are
history-independent, i.e., independent of the sequence of
operations used to construct them in an information the-
oretic sense [15, 14, 16, 4, 8]. Our deﬁnition of history-
hiding is based on a weaker notion of computational
indistinguishability. While history-hiding is all that is
needed in practice, both our constructions satisfy history-
independence in the information theoretic sense.
2.1 Extensions
We describe two simple methods of adapting an HHAOS
scheme. We ﬁrst show how one can disallow further ap-
pends to a signature. Second, we describe a method for
handling multisets, that is, producing signatures that verify
that certain messages were added multiple times.
Set ﬁnalization. For the voting application we need to “ﬁ-
nalize” the ballots and prevent any further appends. We
implement this Finalize operation as follows. Let Φ be a
signature for a set X. Deﬁne
Finalize(Φ) def= Append( Φ,
“ ﬁnalize ” k |X| )
where |X| is the number of elements in the set X.1 We
modify the Verify(PK, X, Φ) algorithm to return False if a
string “ ﬁnalize ” k ℓ is included in X and ℓ 6= |X| − 1.
Note that without embedding the size of X in the ﬁnal-
ize message there is nothing to prevent additional messages
from being appended.
Now if Φ is a signature for some set X and Φ′ =
Finalize(Φ), then Φ′ may be given to Verify but may not be
used with Append to produce further signatures. This ﬁnal-
ization operation may optionally be performed after every
append, thus producing two signatures — one signature ΦA
which may be used for further appends and one signature
ΦV which may only be used to verify the current set.
Multiset semantics. Multisets may be supported by sim-
ply appending a nonce to each string added, thus maintain-
ing the uniqueness of each element in the set. Alterna-
tively, a serial number ℓ may be appended to each element,
where ℓ is the number of instances of that element that are
already present. Using such a serial number has the ad-
vantage of avoiding the additional subliminal channel that
nonces would provide, but requires the append algorithm to
be aware of which messages the signature validates.
3 A Simple Construction
We now turn to constructing history-hiding append-only
signatures. We start with a simple construction that builds
an HHAOS from any digital signature system. This con-
struction stores large state on the voting terminal and also
assumes that an upper bound on the total number of ballots
cast is known ahead of time.
The system works as follows. Let L be an upper bound
on the number of messages to be signed. At setup time we
prepare L signature key pairs. Then to sign the ith message
xi, we pick at random an available key pair, sign xi with
it, and delete the private signing key. The signature con-
tains the list of message-signature pairs plus all the unused
signing keys.
More precisely, let (G, S, V ) be a digital signature sys-
tem. Here G generates signature key pairs, S signs mes-
sages, and V veriﬁes signatures. We also need a collision
resistant hash function H (such as SHA-256). The generic
1We assume “ ﬁnalize ” k n is a special message that cannot appear in
X for any n ∈ Z. We also assume the number of elements in X is stored
in Φ.
HHAOS, denoted HHAOSS, for signing up to L messages
works as follows:
KeyGen(κ) → PK, Φ
Run G(κ) L times to generate L signature key pairs
(PK1, SK1), . . . , (PKL, SKL). Output:
PK ← H(PK1, . . . , PKL)
and
Φ ←(cid:8) (PK1, SK1, null), . . . , (PKL, SKL, null)(cid:9)
Append(Φ, x) → Φ′
Let Φ = {(PK1, Y1, Z1), . . . , (PKL, YL, ZL) } and
let x ∈ {0, 1}∗ be a string. To generate the new signa-
ture Φ′ do:
• Pick a random r ∈ {1, . . . , L} for which Yr 6=
null. This Yr is a signing key for the public key
PKr.
• Generate a signature σ ← S(Yr, x) and output:
. . .
Φ′ ←(cid:8)(PK1, Y1, Z1),
(cid:0)PKr, null, (x, σ)(cid:1),
(PKL, YL, ZL)(cid:9)
. . .
The net effect on Φ is that the secret key SKr is deleted
from tuple r and replaced by a message-signature pair
(x, σ).
Verify(PK, X, Φ) → {True, False}
key PK,
a public
Given
strings
X = {ˆx1, ˆx2, . . . ˆxn}, and a signature Φ =
{ (PK1, Y1, Z1), . . . , (PKL, YL, ZL) } do the fol-
lowing:
set of
a
• If PK 6= H(PK1, . . . , PKL), output False and
stop.
• For all i = 1, 2 . . . , L do:
• If Yi 6= null and Yi is not a valid signing key
for PKi, output False and stop. (∗)
• If Yi = null then Zi is a message-signature
pair Zi = (x, σ).
• If V (PKi, x, σ) = False, output False
and stop.
• If X = { x | ∃i, σ : Zi = (x, σ) } output True,
otherwise output False.
Theorem 1. If (G, S, V ) is existentially unforgeable under
a chosen message attack and H is collision resistant then
HHAOSS is append only unforgeable and history-hiding.
The proof is only outlined as the next construction is
our focus. First, the history-hiding property is trivial since
the ﬁnal content of Φ is independent of the order in which
messages were inserted. The append only property follows