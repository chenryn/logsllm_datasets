# Man-In-The-Disk: A Security Vulnerability in Android Applications

## Presenter
- **Slava Makkaveev**
  - Security Researcher, Check Point Software Technologies Ltd.
  - PhD in Computer Science
  - Expertise in reverse engineering and vulnerability research

## Presentation Overview
- **Event**: DEF CON 2018
- **Topic**: Man-In-The-Disk (MITD) attack on Android applications

## Android Application Security Basics
### App’s Sandbox Model
- Each application is assigned a unique User ID (UID).
- Example:
  - **Application**: `untrusted_app`
  - **UID**: 10045
  - **Android Framework**: Manages the app's interaction with the system.
  - **Storage**: Managed by the Android OS.

### App’s Permissions
- **Normal/Dangerous**:
  - SMS
  - CONTACTS
  - STORAGE
  - WRITE_SETTINGS
  - INSTALL_PACKAGES
- **Preinstalled/Privileged**:
  - ACCOUNT_MANAGER
  - OEM_UNLOCK_STATE

### ROM Signature/SharedUserId
- Special permissions and capabilities are granted based on the app's signature or shared user ID.

## Application Storage
### Internal Storage
- **Characteristics**:
  - Built-in non-volatile memory.
  - Always available.
  - Private to the application.

### External Storage
- **Characteristics**:
  - Partition in permanent memory.
  - Public and accessible by other apps.
  - Removable and not always available.
  - World-readable.

### Why Use External Storage?
- **Use Cases**:
  - Share media files between apps.
  - Transfer files between smartphone and PC.
  - Compatibility with devices having limited internal storage.
  - Hide the current size of the application.

### External Storage Protection
- **Global Storage Access**:
  - `READ_EXTERNAL_STORAGE` permission.
  - `WRITE_EXTERNAL_STORAGE` permission.
- **Private Directory per Application**:
  - Files are not accessible by the MediaStore content provider.
  - Prevents observation by other apps.

## Man-In-The-Disk (MITD) Attack
### External Storage Usage Scenarios
- **Downloading to external storage**.
- **Maintaining working data on external storage**.

### MITD Attack Vectors
- **Downloading to external storage**.
- **Maintaining working data on external storage**.

### External Storage Observing
- **Java**:
  ```java
  FileObserver observer = new FileObserver("/storage/emulated/0/path/to/folder") {
    @Override
    public void onEvent(int event, String file) {
      // Handle events
    }
  };
  observer.startWatching();
  ```

- **Native**:
  ```c
  int fd, wd;
  char buffer[EVENT_BUF_LEN];
  fd = inotify_init();
  wd = inotify_add_watch(fd, "/tmp", IN_CREATE);
  read(fd, buffer, EVENT_BUF_LEN);
  inotify_rm_watch(fd, wd);
  close(fd);
  ```

### Private Directory Observing
- **Polling Method**:
  ```java
  File watchDir = new File(Environment.getExternalStorageDirectory().toString() + "/path/to/folder");
  Timer timer = new Timer();
  final int FPS = 100;
  timer.scheduleAtFixedRate(new ObserverTask(), 0, 1000 / FPS);

  class ObserverTask extends TimerTask {
    @Override
    public void run() {
      File[] files = watchDir.listFiles();
      for (int i = 0; i < files.length; i++) {
        // Process files
      }
    }
  }
  ```

## Real-World Examples
- **Google Translate (com.google.android.apps.translate)**:
  - Stores offline translation packages in external storage.
  - Compromised library: `libtranslate.so`.

- **Yandex Translate (ru.yandex.translate)**:
  - Stores offline translation packages in external storage.
  - Compromised library: `libmobile-android.so`.

- **Google Voice Typing (com.google.android.googlequicksearchbox)**:
  - Downloads offline speech recognition languages through external storage.
  - Compromised library: `libgoogle_speech_jni.so`.

- **LG Application Manager (com.lge.appbox.client)**:
  - Installs/Updates LG related apps through external storage.
  - Compromised library: `libtts_android.so`.

- **Xiaomi Browser (com.android.browser package)**:
  - Updates itself through external storage.
  - Compromised library: `libtts_android.so`.

## Summary
- **External Storage**:
  - Public area that can be observed/modified by third-party apps and users.
  - Lacks adequate protection from Android.
  - Many pre-installed and popular apps store sensitive data here.
  - MITD attacks can break the sandbox protection of fortified Android apps.

## Hunting for Man-In-The-Disk
### Research Approach
- **Target**:
  - Application's native library (*.so).
  - Code flow handling controllable data files.
  - Implement a Java to Native adapter to reproduce the flow.
  - Fuzz the native library by permuting the data in the controllable file.

### Example
- **Java to Native Adapter**:
  ```java
  public static void load() {
    System.load("/path/to/libgnustl_shared.so");
    System.load("/path/to/libhwrword.so");
  }

  public static void main(String[] args) {
    FileInputStream st1 = new FileInputStream(args[0]);
    FileInputStream st2 = new FileInputStream("/path/to/hwr_prodlm.4DE9C666");
    WordRecognizerJNI rec = new WordRecognizerJNI();
    rec.initJNIFromFileInputStream(st1, 0, st1.getChannel().size(), st2, 0, st2.getChannel().size(), null, 0, 0, null, 0);
  }
  ```

- **Fuzzing Setup**:
  - **Target .so Library**.
  - **Adapter .dex**.
  - **Android Runtime**.
  - **Dalvikvm Tool**.
  - **QEMU ARM CPU Emulator**.
  - **AFL Fuzz Engine**.
  - **Android Device/Emulator**.

### Execution Flow
- Load the target library.
- Reproduce the target flow.
- Track code coverage.
- Generate the next test case based on coverage metrics.

## Conclusion
- **External Storage** is a vulnerable area in Android applications.
- **Man-In-The-Disk** attacks can compromise the security of sensitive data.
- **Best Practices**:
  - Do not store executables or class files on external storage.
  - Sign and cryptographically verify external storage files before dynamic loading.

## Resources
- **GitHub Repository**: [github.com/CheckPointSW/android_appfuzz](https://github.com/CheckPointSW/android_appfuzz)
- **Contact**: PI:EMAIL

Thank you!