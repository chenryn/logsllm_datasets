# 摘要
我一直有写一篇关于组策略对象（Group Policy Objects, GPO）的文章的想法，现在我很高兴终于实现了这一目标。如果您对GPO还不太熟悉，我强烈建议您阅读由Andy Robbins撰写的《红队人员的GPO和OU指南》（[A Red Teamer’s Guide to GPOs and OUs](https://posts.specterops.io/a-red-teamers-guide-to-gpos-and-ous-f0d03976a31e)）。该文章详细介绍了GPO的工作原理，并展示了如何使用BloodHound工具来查找基于GPO控制的攻击路径，以及执行这些攻击的方法。

在利用GPO进行攻击方面，Will Schroeder也取得了显著进展。他在一篇文章中探讨了滥用GPO权限的问题，并在PowerView工具中实现了`New-GPO ImmediateTask`功能。然而，这个功能后来由于一些原因变得不可用（详情请见[此处](https://www.harmj0y.net/blog/powershell/make-powerview-great-again/)）。

本系列博客文章旨在展示如何枚举和利用GPO的各种滥用方式，以实现权限提升和持久化的目的。

# 枚举

我们需要关注以下几种关键权限：

- 谁可以在域中创建新的GPO。
- 谁可以将GPO链接到特定的组织单位（OU）。
- 谁可以修改现有的GPO（无论其是否已链接）。

每个权限都是单独委派的。例如，委派创建GPO的权限并不会自动赋予将其链接到OU的权限。用户可能可以修改现有GPO，但无法将其链接到OU；或者他们可能只能将GPO链接到另一个OU，而不能修改它。因此，具体的滥用方法取决于所拥有的权限组合。

# 创建GPO

在组策略管理控制台（GPMC）中，委派在域中创建GPO的权限如下所示。我们可以使用PowerView轻松枚举这些权限：

```powershell
PS > Get-DomainObjectAcl -SearchBase "CN=Policies,CN=System,DC=testlab,DC=local" -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "Group-Policy-Container" }
```

示例输出：
```
AceQualifier: AccessAllowed
ObjectDN: CN=Policies,CN=System,DC=testlab,DC=local
ActiveDirectoryRights: CreateChild
SecurityIdentifier: S-1-5-21-407754292-3742881058-3910138598-1106
LAB\Desktop Admins
```

# GPO链接

使用`Get-DomainOU`命令可以显示AD中的所有组织单位（OU）。在此示例中，我们只有默认的域控制器OU和自定义工作站OU：

```powershell
PS > Get-DomainOU
usncreated: 6031
systemflags: -1946157056
iscriticalsystemobject: True
gplink: [LDAP://CN={6AC1786C-016F-11D2-945F-00C04fB984F9},CN=Policies,CN=System,DC=testlab,DC=local;0]
```

通过以下命令，我们可以枚举具有GP-Link权限的对象：

```powershell
PS > Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "GP-Link" }
AceQualifier: AccessAllowed
ObjectDN: OU=Workstations,DC=testlab,DC=local
SecurityIdentifier: S-1-5-21-407754292-3742881058-3910138598-1105
```

# 修改GPO

以下是查询具有修改GPO权限的对象的示例：

```powershell
PS > Get-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ActiveDirectoryRights -match "WriteProperty|WriteDacl|WriteOwner" -and $_.SecurityIdentifier -match "S-1-5-21-407754292-3742881058-3910138598-[\d]{4,10}" }
AceType: AccessAllowed
ObjectDN: CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local
ActiveDirectoryRights: CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner
SecurityIdentifier: S-1-5-21-407754292-3742881058-3910138598-1105
```

进一步查询显示名称为“Workstation Policy”的GPO：

```powershell
PS > Get-DomainGPO | Where-Object { $_.DistinguishedName -eq "CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local" } | Select-Object DisplayName
DisplayName: Workstation Policy
```

如GPMC的详细信息选项卡所示，`lab\bwall`是此名为“Workstation Policy”的GPO的所有者。GPO的创建者会自动获得编辑设置、删除和修改安全权限，具体包括CreateChild、DeleteChild、Self、WriteProperty、DeleteTree、Delete、GenericRead、WriteDacl、WriteOwner。在此示例中，`lab\tlockhart`获得了编辑设置权限，即CreateChild、DeleteChild、ReadProperty、WriteProperty、GenericExecute。

# 映射GPO和OU

这可以从多个角度进行。您可能有一个有趣的GPO，并想知道单个GPO适用于哪些OU和/或计算机；您可能希望列出应用于特定OU的每个GPO；或者您可能希望列出适用于特定计算机的每个GPO。

## 按计算机

在这里，我们列出了应用于`ws-1.testlab.local`的每个GPO，仅显示名称和GUID名称：

```powershell
PS > Get-DomainGPO -ComputerIdentity ws-1 -Properties Name, DisplayName
DisplayName: Demo GPO
Name: {ECB75201-82D7-49F3-A0E0-86788EE7DC36}
DisplayName: Workstation Policy
Name: {7DD7A136-334C-47C1-8890-D9766D449EFA}
DisplayName: Default Domain Policy
Name: {31B2F340-016D-11D2-945F-00C04FB984F9}
```

GPO有些滑稽，因为它们有一个显示名称、一个GUID名称和一个对象GUID。后两者容易混淆。

## 按GPO

在这里，我们列出“Demo GPO”适用的每个OU。我们在GPLink搜索过滤器中使用GUID名称：

```powershell
PS > Get-DomainOU -GPLink "{ECB75201-82D7-49F3-A0E0-86788EE7DC36}" -Properties DistinguishedName
DistinguishedName: OU=Domain Controllers,DC=testlab,DC=local
DistinguishedName: OU=Workstations,DC=testlab,DC=local
```

如果您随后需要知道这些OU中有哪些计算机，您可以使用以下命令：

```powershell
PS > Get-DomainComputer -SearchBase "LDAP://OU=Workstations,DC=testlab,DC=local" -Properties DistinguishedName
```

通过这些步骤，您可以全面了解GPO及其与OU和计算机的关系，从而更好地理解和利用这些权限。