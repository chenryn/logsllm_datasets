链接：
# 摘要
我很早就萌生出了写一篇关于组策略对象(GroupPolicyObjects，GPO)的文章的想法，我现在很开心终于把这个想法写了出来。  
如果你对GPO还不太熟悉，我强烈建议您去阅读[ Andy Robbins](https://twitter.com/_wald0 " Andy
Robbins")写的 [A Red Teamer’s Guide to GPOs and
OUs](https://posts.specterops.io/a-red-teamers-guide-to-gpos-and-ous-f0d03976a31e "A Red Teamer’s Guide to GPOs and
OUs")。他概述了GPO的工作原理以及如何使用BloodHound查找基于GPO控制的攻击路径，并解释了执行这些攻击的几种方法。  
在利用GPO进行攻击方面，Will Schroeder取得了一些进展，他发表了一篇[Abusing GPO Permissions
](http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/ "Abusing GPO
Permissions ")文章并并在Powerview中实现New-GPO
ImmediateTask，然而，这个功能后来随着以下措施而变得[不可用](https://www.harmj0y.net/blog/powershell/make-powerview-great-again/ "不可用")：  
|inconsistent and better done manually  
这一系列博客文章的目的是展示如何将滥用GPO的方式一一枚举出来; 并将其用于权限提升和持久性目的。
# 枚举
我们可能需要关注一些特别的权限。首先在我脑海中浮现的是：  
谁可以在域中创建新GPO。  
谁可以将GPO链接到哪些OU。  
谁可以修改现有GPO（当前可能存在链接也可能不存在链接）。  
我之所以能想到这些是因为每个权限都是被单独委派的。  
委派创建GPOs的权限并不会委派将它们链接到OU的权限。  
用户可能可以修改现有的GPO，但它可能是未链接的，他们自己也不能链接它。  
或者用户可能无法修改GPO，但可以将其链接到另一个OU。  
因此，您所拥有的权限组合将取决于您如何实现这种滥用。
# 创建GPO
在组策略管理控制台(GPMC)中，在域中创建GPO的委派权限如下所示：  
可以通过以下方法轻松枚举PowerView：
    PS > Get-DomainObjectAcl -SearchBase "CN=Policies,CN=System,DC=testlab,DC=local" -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "Group-Policy-Container" }
    AceQualifier           : AccessAllowed
    ObjectDN               : CN=Policies,CN=System,DC=testlab,DC=local
    ActiveDirectoryRights  : CreateChild                                        Convert-SidToName S-1-5-21-407754292-3742881058-3910138598-1106
    LAB\Desktop Admins
# GP-链接
Get-DomainOU显示AD中的所有Organizational Units。在这里，我们只有默认域控制器(Domain
Controllers)OU和自定义工作站(Workstations)OU。
    PS > Get-DomainOU
    usncreated             : 6031
    systemflags            : -1946157056
    iscriticalsystemobject : True
    gplink                 : [LDAP://CN={6AC1786C-016F-11D2-945F-00C04fB984F9},CN=Policies,CN=System,DC=testlab,DC=local;0]      Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "GP-Link" }
    AceQualifier           : AccessAllowed
    ObjectDN               : OU=Workstations,DC=testlab,DC=local               1000，以避免在每个GPO中看到Domain
Admins和Enterprise Admins。
    PS > Get-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ActiveDirectoryRights -match "WriteProperty|WriteDacl|WriteOwner" -and $_.SecurityIdentifier -match "S-1-5-21-407754292-3742881058-3910138598-[\d]{4,10}" }
    AceType               : AccessAllowed
    ObjectDN              : CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local
    ActiveDirectoryRights : CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner
    OpaqueLength          : 0
    ObjectSID             :
    InheritanceFlags      : None
    BinaryLength          : 36
    IsInherited           : False
    IsCallback            : False
    PropagationFlags      : None
    SecurityIdentifier    : S-1-5-21-407754292-3742881058-3910138598-1105      Get-DomainGPO | Where-Object { $_.DistinguishedName -eq "CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local" } | Select-Object DisplayName
    displayname
    -----------    Workstation Policy
如GPMC的Details选项卡中所示，lab\bwall ace是此名为Workstation Policy的GPO的owner。
GPO的创建者会自动获得Edit settings, delete, modify
security权限，具体包括CreateChild、DeleteChild、Self、WriteProperty、DeleteTree、Delete、GenericRead、WriteDacl、WriteOwner。
在此示例中，lab\tlockhart获得了Edit
settings权限，即CreateChild、DeleteChild、ReadProperty、WriteProperty、GenericExecute。
# 映射GPO和OU
这可以从几个不同的角度进行。您可能有一个有趣的GPO，并想知道单个GPO适用于哪些OU和/或计算机；您可能希望列出应用于特定OU的每个GPO；或者您可能希望列出适用于特定计算机的每个GPO。
# By computer
在这里，我们列出了应用于ws-1.testlab.local的每个GPO-仅显示名称和GUID名称。
    PS > Get-DomainGPO -ComputerIdentity ws-1 -Properties Name, DisplayName
    displayname           name
    -----------           ----    Demo GPO              {ECB75201-82D7-49F3-A0E0-86788EE7DC36}
    Workstation Policy    {7DD7A136-334C-47C1-8890-D9766D449EFA}
    Default Domain Policy {31B2F340-016D-11D2-945F-00C04FB984F9}
GPO有点滑稽，因为它们有一个显示名称、GUID名称和一个对象GUID。后两者特别容易混淆。
# By GPO
在这里，我们列出Demo GPO适用的每个OU 。我们在GPLink搜索过滤器中使用GUID名称。
    PS > Get-DomainOU -GPLink "{ECB75201-82D7-49F3-A0E0-86788EE7DC36}" -Properties DistinguishedName
    distinguishedname
    -----------------    OU=Domain Controllers,DC=testlab,DC=local
    OU=Workstations,DC=testlab,DC=local
如果您随后需要知道这些OU中有哪些计算机，您可以使用执行此操作：
    PS > Get-DomainComputer -SearchBase "LDAP://OU=Workstations,DC=testlab,DC=local" -Properties DistinguishedName