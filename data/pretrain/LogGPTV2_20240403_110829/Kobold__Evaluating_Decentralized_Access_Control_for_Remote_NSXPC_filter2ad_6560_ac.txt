entitlement which is used by jailbreak applications to build
payment-pass-provisioning,15
14com.apple.developer.passkit.pass-presentation-suppression
15com.apple.developer.payment-pass-provisioning
16https://developer.apple.com/library/content/technotes/tn2319/ index.html
17com.apple.developer.networking.HotspotHelper
18com.apple.private.allow-explicit-graphics-priority
7
SEMI-PRIVATE ENTITLEMENTS USED BY THIRD-PARTY APPS
Table I
Entitlement Key
com.apple.accounts.ﬂickr.defaultaccess
com.apple.accounts.twitter.defaultaccess
com.apple.accounts.vimeo.defaultaccess
com.apple.coremedia.allow-mpeg4streaming
com.apple.private.allow-explicit-graphics-priority
com.apple.developer.healthkit.nikefuel-source
com.apple.developer.legacyvoip
com.apple.developer.passkit.pass-presentation-suppression
com.apple.networking.vpn.conﬁguration
com.apple.payment.pass-access
com.apple.accounts.facebook.defaultaccess
com.apple.developer.payment-pass-provisioning
previous-application-identiﬁers
com.apple.developer.playable-content
com.apple.developer.networking.HotspotHelper
com.apple.developer.video-subscriber-single-sign-on
com.apple.smoot.subscriptionservice
Value Type
bool
bool
bool
bool
bool
bool
bool
bool
arrayOfStrings
bool
bool
bool
arrayOfStrings
bool
bool
bool
bool
Apps
1
1
1
1
1
3
3
3
4
4
7
7
8
23
28
39
50
screen recording applications.19 This correlation implies that
Uber could have recorded the user’s screen while the appli-
cation ran in the background. Uber quickly removed the enti-
tlement after its existence was made public, thus highlighting
the importance of transparency for entitlements. Further,
Netﬂix has an entitlement with allow-mpeg4streaming.20
This entitlement is also possessed by system applications
built into iOS, but the best of our knowledge the entitle-
ment is undocumented. While Netﬂix is not the only video
streaming application in our sample (e.g., Hulu and Amazon
Prime Video), it is the only third party application in our
sample with this entitlement.
VI. EMPIRICAL STUDY OF NSXPC ATTACK SURFACE
In addition to searching for confused deputy attacks, we
also use Kobold to perform a quantitative analysis of NSXPC
methods. This analysis enumerates accessible methods and
measures characteristics such as the number and type of ar-
guments required for each method. Entitlement requirements
for NSXPC methods are also investigated.
Hierarchical Results: Figure 4 illustrates the number of in-
vocations, unique methods, completion handlers, completion
conﬁrmations, and entitlement free methods dynamically
tested with Kobold, on an iOS 11.3.2 device, using an
application with only default entitlements. Default entitle-
ments (e.g., an app identiﬁer) are embedded into every
application’s signature and do not require toggles in Xcode.
Kobold’s static analysis phase extracted 276 sandbox acces-
sible mach-ports and 3048 candidate remote methods to in-
voke. 1517 unique methods were tested with the mach-ports
associated with the daemons each method was extracted
from. Note that due to mach-port to protocol mapping ambi-
guity, many of those methods could be assigned to incorrect
19https://stackoverﬂow.com/questions/32239969/
iomobileframebuffergetlayerdefaultsurface-not-working-on-ios-9
20com.apple.coremedia.allow-mpeg4streaming
3048 Total Invocations
1517 Unique Methods
677 Methods with
Completion Handlers
224 Completion
Conﬁrmations
139 Completions
Without Ent.
Requirements
Figure 4. NSXPC Method Invocation Quantitative Results
ports. 677 of the methods tested contained completion han-
dlers, and 224 of those methods returned completion handler
conﬁrmations when invoked. As shown by Table II, of the
224 remote methods with successful completion messages,
139 did not require entitlements, 8 required unspeciﬁed
entitlements, and 77 required speciﬁc entitlements.
Completion Handlers: Completion handlers are blocks of
code with arguments that can be passed to a remote method
as one of the method’s arguments. If the remote method
completes, the code block assigned to the completion han-
dler is executed. The completion handler’s arguments (e.g.,
NSError or NSString values) can be initialized with data
from the daemon, and used in the scope of the completion
handler’s code block. Kobold uses this code block to output
a completion conﬁrmation that can be detected when in-
specting the output of our application. This output allows us
to determine whether a remote method with a completion
handler has run or not. However, as shown in Figure 4
approximately half of the unique methods tested did not have
completion handlers and could not be labeled as accessible
or inaccessible without further analysis.
Impact of Entitlements on NSXPC Services: We identiﬁed
8
PER METHOD ENTITLEMENT REQUIREMENTS BASED ON ERROR MESSAGES
Table II
Entitlement Key Requirements Based on Error Message
No Entitlement Required
Unspeciﬁed Entitlement Required
com.apple.managedconﬁguration.proﬁled-access
com.apple.managedconﬁguration.proﬁled.shutdown
com.apple.managedconﬁguration.mdmd.push
com.apple.managedconﬁguration.proﬁled.migration
com.apple.managedconﬁguration.proﬁled.usercompliance
com.apple.managedconﬁguration.proﬁled.get
com.apple.managedconﬁguration.proﬁled.provisioningproﬁles
com.apple.managedconﬁguration.mdmd-access
com.apple.managedconﬁguration.proﬁled.conﬁgurationproﬁles
com.apple.private.mobileinstall.allowedSPI
com.apple.managedconﬁguration.proﬁled.set
Number of Methods
139
8
1
1
2
2
4
5
5
7
10
18
22
MACH PORT ENTITLEMENT REQUIREMENTS ENFORCED IN SANDBOX
Table III
Entitlement Key
com.apple.smoot.subscriptionservice
com.apple.developer.siri
Entitlement Value Mach Port
bool(”true”)
bool(”true”)
com.apple.VideoSubscriberAccount.videosubscriptionsd
com.apple.siri.vocabularyupdates
Entitlement Availability
Semi-Private
Public
METHODS BY NUMBER OF ARGUMENTS
Table IV
Number of Arguments Methods With That
0
1
2
3
4
5
6
7
8
9
10
Number of Arguments
331
1078
924
442
167
75
16
8
1
5
1
two conditional sandbox rules allowing access to mach-ports
based on public or semi-private entitlements. These results
are represented by Table III. One mach-port was accessible
through a public entitlement, and one mach-port was acces-
sible through a semi-private entitlement. The methods with
error messages that speciﬁed entitlement requirements only
speciﬁed private entitlements (those not accessible to third
party applications on the App Store). The port associated
with the semi-private entitlement did not map to any NSXPC
methods (perhaps it uses another type of IPC interface). The
port associated with the Siri entitlement did map to 221
potential remote method invocations. However, our dynamic
tests did not cause any of these method invocations to trigger
completion handler responses even if the calling application
had the Siri entitlement.
Number of Arguments: The number of arguments in a
method’s declaration plays a signiﬁcant role in determining
the difﬁculty of invoking a remote method successfully and
whether or not that method can be exploited. For example, a
9
method with zero arguments is trivial to invoke correctly, but
unlikely to be exploitable. At the other extreme, A method
containing 10 arguments has a larger attack surface but
it may be difﬁcult to ﬁnd valid values for all arguments.
Table IV shows the number of methods with various amounts
of arguments (i.e., 0 to 10 arguments). Note that a comple-
tion handler is treated as a single argument with respect to
a remote method, but the completion handler may have its
own arguments. Note that these values are inferred using all
1517 extracted potential NSXPC methods. Therefore, there
may be methods included that were not accessible or were
false positives (i.e., methods that are not remotely exposed).
Types of Arguments: Table V lists the data types that ap-
pear most frequently in declarations of the methods invoked
by Kobold. We categorize these data types into three groups,
primitives, documented, and undocumented. Primitive types
consist of those low level types that appear in the C program-
ming language (e.g., int, long, double). Documented types
(e.g., NSString) are abstractions constructed upon primitive
types, and they are documented ofﬁcially by Apple [11].
Undocumented types (e.g., AFSpeechRequestOptions) are
abstractions built upon primitive types, but these data types
are not ofﬁcially documented by Apple. While primitive
values can be fuzzed using random values, it is difﬁcult
to ﬁnd acceptable values for more complex types. Apple’s
documentation may provide hints regarding initialization of
documented types, but a thorough analysis of the values
expected by NSXPC remote methods may require dynamic
analysis, symbolic analysis, or extensive reverse engineering
of the remote method.
Intra-Port Entitlement Consistency: Table VI lists the
number of methods with successful completion handlers
with their respective mach-ports. The methods are also
TOP 40 DATA TYPES IN EXTRACTED METHODS
Table V
VII. FINDINGS
Data Type
void
NSString *
NSError *
Bool
oneway void
NSDictionary *
NSArray *
NSData *
NSUUID *
unsigned long long
long long
NSURL *
UIApplication *
double
int
NSNumber *
unsigned int
NSSet *
IDSService *
NSFileManager *
NSURLSession *
NSXPCListenerEndpoint *
id
NSDate *
IDSAccount *
DRDragSession *
CSSpeechController *
NSURLRequest *
AFSpeechRequestOptions *
unsigned char
APSConnection *
NSURLSessionTask *
NSFileHandle *
NDApplication *
MCProﬁleConnection *
AFAudioPlaybackRequest *
PBItemCollection *
IDSMessageContext *
GKGameSession *
GKCloudPlayer *
Occurrences in
Method
Declarations
1866
488
426
334
234
185
150
98
95
75
66
66
47
39
38
24
21
18
18
16
15
14
12
11
11
11
11
10
9
8
8
7
7
7
7
7
6
6
6
6
Classiﬁcation
primitive
documented
documented
primitive
primitive
documented
documented
documented
documented
primitive
primitive
documented
documented
primitive
primitive
documented
primitive
documented
undocumented
documented
documented
documented
undocumented
documented
undocumented
undocumented
undocumented
documented
undocumented
undocumented
undocumented
documented
documented