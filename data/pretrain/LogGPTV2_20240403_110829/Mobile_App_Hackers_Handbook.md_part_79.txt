risk exists of cross-site script and content injection or modification using man-in-the-middle attacks. As a result
you need to be extremely careful about which namespaces you allow to be callable from your BlackBerry
WebWorks application.
Securing BlackBerry 10 Native Applications
BlackBerry 10 native applications are POSIX-compatible applications written in C or C++ running under the
QNX microkernel, and as such, potentially suffer from a class of vulnerabilities commonly referred to as
memory corruption. Give special attention to defensive coding and to leveraging the available platform defenses
in addition to any logic security considerations. In this section you look at how to write applications in a secure
manner.
BlackBerry does provide a number of base considerations for BlackBerry 10 native applications that primarily
cover some C language primitives such as structures, enums, and macros
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.native_sdk.security/topic/security_overview.html
The exception is compiler and linker defenses, which we also discuss in this section.
General C/C++ Secure Development Principals
Before we address the BlackBerry OS 10.x–specific API and platform considerations, reading through the
general principals outlined in the CERT C Coding Standard
(https://www.securecoding.cert.org/confluence/display/seccode/CERT+C+Coding+Standard) and the
underdevelopment CERT C++ Secure Coding Standard
(https://www.securecoding.cert.org/confluence/pages/viewpage .action?pageId=637) is worth your time. If
terms such as stack overflow, heap overflow, integer wrap, format string, race condition, uninitialized
memory, and similar are all alien to you, then these readings are strongly recommended.
After you have reviewed these references you’re ready for the BlackBerry OS 10.x–specific isms.
Compiler and Linker Defenses
BlackBerry 10 native applications are standard ELF format binaries compiled with GCC, which are loaded via a
loader as on Linux and BSD and so on. A number of compiler and linker defenses should be used to maximize
the use of platform-provided, defense-in-depth security features. BlackBerry provides an overview of these
features in their development documentation (http://developer
.blackberry.com/native/documentation/core/com.qnx.doc.native_sdk
.security/topic/using_compiler_linker_defenses.html#dho1384790657335). In the spirit of full disclosure, this
guide was in part written by the author while at BlackBerry in 2011.
Here is a summary of these compiler and linker defenses and their high-level process:
Stack Cookies—Protect against stack-based overflows.
Relocations Read Only—Protects against overwrites of the relocation section, which contains, among
other things, function pointers.
Bind Now—Loads all library dependencies at load time and resolves them allowing the Global Offset Table
(GOT) to be set to read-only and thus protect against direct overwriting.
Position Independent Code/Executables—Allows libraries and program executables to benefit from
address space layout randomization by not assuming it will load at a particular memory address.
Source Fortification—Provides compiler time–added source fortification to protect against certain
memory corruption vulnerabilities.
Format String Warnings as Errors—Stops the compilation process with an error if a dangerous printf
family function is observed.
Using all of these defenses in every native application is recommended. Although certain options such as
Relocations, Read Only, and Bind Now will incur a load time performance impact, the defense in depth they
contribute is in most cases worth the tradeoff.
Remember that the use of these options, with the exception of the last two, do not stop vulnerabilities from
being present in the code. Instead they frustrate the exploitation of memory corruption vulnerabilities. An
unsuccessfully exploited memory corruption vulnerability, while not yielding a compromise, may result in your
application crashing and lead to a denial of service, requiring the user to restart.
Memory Cleaning
In regard to memory cleaning on BlackBerry 10, the only important thing to keep in mind is the default heap
does not zero freed memory by default. As a result if you are a developer working with sensitive data then it is
likely best to explicitly zero the memory using memset and verify that it was been zeroed correctly to ensure
compiler optimizations do not override the intended functionality. For this reason, avoiding the use of functions
such as realloc (http://www.qnx
.com/developers/docs/660/topic/com.qnx.doc.neutrino.lib_ref/topic/r/realloc.html), which may in
certain circumstances free memory and provide a fresh pointer without the old memory being zeroed, is also
advisable.
Taking the same cautious approach when dealing with local and global stack variables and C++ objects in the
most sensitive situations is likely also wise. Where the stack is being used for sensitive information again you
should explicitly memset the contents prior to return from the function and verifying that it is indeed zeroed via
memcmp. This memcmp will also help stop the memset being optimized out by the compiler.
File Access Control
The key question to answer when developing BlackBerry 10 native applications in regard to data storage is
whether the files that your app will create need to be accessible to other apps on a permanent basis, on an
invocation basis, or not at all (http://developer.blackberry.com/native/documentation/core/com
.qnx.doc.native_sdk.devguide/topic/accessible_folders.html).
If your app’s files don’t need to be accessible to other applications on a permanent basis you should default to
the application’s private data or temporary directories as appropriate. By doing so you ensure your application’s
data is accessible to only it and not to other apps on the device, thus providing protection from information
disclosure and manipulation. You can obtain the location of the app’s data directory by calling the
homePath()API. Likewise you can obtain the location of the app’s temporary directory by calling the
tempPath()API.
If your app’s files will be shared on an as-needed basis using the Invocation Framework
(http://developer.blackberry.com/native/documentation/core/invocation_framework.html) then you can
benefit from its secure file transfer mechanism. You can use the Invocation Framework’s file transfer feature
(http://developer.blackberry.com/native/documentation/cascades/device_platform/invocation/data_transfer.html
to privately transfer files on an as-needed basis whereas general storage will be within the app’s private data
directly.
BlackBerry provides a good overview of the invocation framework and its purpose.
When the framework receives an invocation request with a file:// URI, it inspects the URI to determine
whether the request refers to a shared area. If the file is already shared, the invocation request passes the
URI to the file in the shared area, as specified by the sender. However, if the Invocation Framework detects
that the file is not shared, then by default it creates a read/write copy of the file in a private inbox for the
target application. The client application can specify the file transfer mode attribute to override this behavior.
http://www.blackberry.com/developers/docs/7.0.0api/ net/rim/device/api/system/RuntimeStore.html
When you use this feature the file doesn’t have to be read/write; instead it can be read only. When files are
shared using this mechanism, they actually end up residing under the Sandbox//sharewith directory.
If your application needs to create files that will be shared with other apps on a permanent basis, you will need
the access_shared permission in your application bar-descriptor.xml file
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.native_sdk.devguide/topic/c_appfund_accessing_restricted_functionality.html
However this should be used with caution as this is the most insecure way of storing files due to the frequency
with which apps are given access to shared files.
File Encryption
Data encryption in BlackBerry 10 is transparent, so unlike with BlackBerry OS 7.x legacy apps, developers need
to do nothing to protect their data at rest if the user or the administrator enables it
(http://docs.blackberry.com/en/admin/deliverables/63505/BES10_v10.2.2_BDS_Security_Technical_Overview_en.pdf
Implementing your own encryption is left as an exercise for the reader. For key material, however, we
recommend using a password-based key derivation function such as PBKDF2 with a high iteration count (in the
tens of thousands) and then a strong cipher and mode such as XTS-AES.
Randomness Sources
On BlackBerry 10 there are two possible sources of randomness. The traditional POSIX sources such as rand()
and srand() and the Security Builder API functions
(http://developer.blackberry.com/native/reference/core/com
.qnx.doc.crypto.lib_ref/topic/manual/about_rng_and_seeding.html). The Security Builder APIs stem from
the Certicom acquisition.
BlackBerry provides a documented Security Builder example that is ANSI and FIPS compliant for Random
Number Generator (RNGs) (http://developer
.blackberry.com/native/reference/core/com.qnx.doc.crypto.lib_ref/topic/manual/about_rng_and_seeding.html
and shows how to correctly initialize the RNG.
When you need a strong RNG, use the FIPS-compliant RNG.
SSL, TLS Certificate, and Public Key Pinning in Blackberry 10 Native Applications
Because BlackBerry 10.x uses OpenSSL for its SSL/TLS transport implementation you can use the readily
available examples. In this case we recommend looking at the OWASP implementation
(https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning). It provides a heavily commented
example of SSL/TLS public key pinning, which is trivial to integrate. However, ensuring that the public key file
you are using is not stored in the shared directory is important because this might be updatable by other third-
party applications. As discussed earlier in the “File Access Control” discussion, in this subsection use the
homePath()API to retrieve the path of the app’s private data directory and load it from there.
Security Builder Encryption API
The Security Builder Encryption API
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.crypto/topic/c_sb_ug_overview
.html) is provided by the base BlackBerry platform. Suffice it to say, using this API for your cryptographic
requirements is the recommended approach and will not be covered here due to the wealth of documentation.
Heap Robustness Against Corruption
QNX and thus BlackBerry 10 provide a number of standard library functions that you can use to influence the
robustness of the heap. Although using these functions will in most cases come with a performance penalty,
their use can further frustrate exploitation of certain heap memory corruption scenarios.
The function malopt()
(http://www.qnx.com/developers/docs/660/topic/com.qnx.doc.neutrino.lib_ref/topic/m/mallopt.html)
provides a couple of options that can be useful:
MALLOC_VERIFY_ON to turn on additional verification when using allocator routines. If a problem is found, an
assert will be raised.
MALLOC_FREE_CHECK to protect against double frees.
Additionally, you can use the function mcheck() (http://www.qnx.com/developers/docs/660/index.jsp?
topic=%2Fcom.qnx.doc.neutrino.lib_ref%2Ftopic%2Fm%2Fmcheck.html) to turn on consistency checks within
allocators with an abort handler callback specified by the developer. This may be preferable to using malopt and
MALLOC_VERIFY_ON, which will result in an assert. However, the level of integrity checking that will be performed
is highly dependent on the version of the allocator that your app is linked against.
The following list covers the allocator version and depth of mitigations against memory corruption:
C library—Minimal consistency checking (although engineering has occurred to provide mitigation against
some exploitation techniques).
Nondebug version of the malloc library—A slightly greater level of consistency checking.
Debug version of the malloc library—Extensive consistency checking, with tuning available through the
use of the mallopt() function.
As a result of these varying degrees of protection, avoiding heap corruption vulnerabilities that rely on the heap
manager to provide a significant degree of protection against a determined attacker is a better practice.
QNX Native IPC Mechanism Security Considerations
Because BlackBerry 10 is built on top of QNX a range of QNX isms that exist with regards to IPC
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.neutrino.sys_arch/topic/ipc.html
which if used need some thought around security.
Following is a list of IPC security considerations and recommendations:
IPC channels
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.neutrino.sys_arch/topic/ipc_channels.html
using IPC channels and specifically the ChannelCreate API
(http://developer.blackberry.com/native/reference/core/com
.qnx.doc.neutrino.lib_ref/topic/c/channelcreate.html), set _NTO_CHF_PRIVATE explicitly.
Shared memory
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.neutrino.sys_arch/topic/ipc_shared_memory.html
it is initialized to zero (http://developer
.blackberry.com/native/documentation/core/com.qnx.doc.neutrino
.sys_arch/topic/ipc_init_mmap_memory.html).
Most developers will likely stick to high-level constructs and also benefit from user/group separation within the
operating system; as such, you may not have to be overly concerned with these.
Headless App Interprocess Communication
In BlackBerry 10.2.1 BlackBerry introduced the concept of headless apps (that is, background tasks) and a new
API (http://developer.blackberry.com/native/documentation/cascades/device_platform/headless_apps/).
From a security point of view the biggest consideration for developers is the Interprocess Communication (IPC)
mechanism that will be used between the headless portion and user interface (UI).
BlackBerry offers this advice on the topic of IPC:
You can use any IPC technique you want to communicate between the parts of your headless app; it’s
completely up to you. You should determine the communication needs of your app and choose a solution (or
a combination of solutions) that makes the most sense for you.
http://developer.blackberry.com/native/documentation/ cascades/device_platform/headless_apps/
BlackBerry then goes on to suggest a number of options, which we’ve summarized and commented on from a
security perspective:
Invocation Framework—This is only for UI-to-headless invocation. It cannot be used for headless-to-UI
communication.
Local sockets—BlackBerry provides the option of using the QTcpSocket class
(http://developer.blackberry.com/native/reference/cascades/qtcpsocket.html). Care must be taken
when using TCP or UDP sockets for IPC mechanisms to ensure only legitimate local apps can communicate
with your UI or headless portion. We recommend using this option as a last resort due to the risk of
accidental exposure of interfaces to potential unauthorized access.
QSettings and file monitoring—BlackBerry provides another method of using the QSettings class
(http://developer.blackberry.com/native/reference/cascades/qsettings.html). If using QSettings be
sure to set the file in the app’s private data directory and not the shared files directory. This can be achieved
with code similar to this:
QSettings setting(QDir::currentPath() + "/data/Settings/NCCGroup/NCCGroup .conf",
QSettings::NativeFormat);
Aside from those explicitly mentioned in the headless API, BlackBerry 10 also provides a number of lower-level
options
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.neutrino.sys_arch/topic/ipc
.html) that are inherited from the QNX base.
The biggest question to ask yourself—whatever IPC mechanism you choose—is whether it can be misused by a
local app or remote attacker and if so what the consequences would be. By considering this threat up front, you
can select the most appropriate for your data transfer versus security requirements.
Securing BlackBerry 10 Cascades Applications
BlackBerry 10 Cascades applications are native applications built using the Qt framework
(http://developer.blackberry.com/native/documentation/cascades/dev/fundamentals/) and as a result have a
number of unique security considerations. BlackBerry, as with the development of native applications, has been
proactive in providing security advice to developers who are using Cascades to avoid some of the pitfalls
(http://developer.blackberry.com/native/documentation/cascades/best_practices/security/index.html) in
addition to issues inherited from using C and C++.
The biggest risk over and above memory corruption and arguably easier to exploit is content injection attacks.
The content injection attack risks arise from the fact that under the hood Cascades is JavaScript and HTML
technology.
BlackBerry provides advice around the following topics with regards to secure Cascades based applications:
Strings—To protect against memory corruption.
Password fields—To ensure you don’t show the user’s password.
File paths—To mitigate against directory traversal.
Script injection—By way of malicious QScript or JavaScript with the following big warning:
When the QScriptEngine class is used to execute scripts, it is important that untrusted values are never
appended to the string of the script that’s being executed. All scripts that are executed by a QScriptEngine
should be predefined when developing the application and should never be altered dynamically when the
application is running.
Furthermore, you should never use import, Loader, or XMLHttpRequest to load JavaScript code that you don’t
control into QML. Running untrusted JavaScript code in QML can be equivalent to downloading and running
a malicious application. Unlike a desktop browser, the JavaScript execution environment doesn’t restrict
certain activities, such as accessing the local file system. For more information about QML and security, see
QML Security.
http://developer.blackberry.com/native/documentation/ cascades/best_practices/security/index.html
HTML text formatting—Highlighting the risk of UI manipulation.
The QT project also provides specific further advice and examples around QML (http://qt-
project.org/doc/qt-4.8/qdeclarativesecurity.html) that demonstrate the content injection attacks but also
highlight what is safe. They aptly summarize the risk as follows:
The only reason this page is necessary at all is that JavaScript, when run in a web browser, has quite many
restrictions. With QML, you should neither rely on similar restrictions, nor worry about working around
them.
http://qt-project.org/doc/qt-4.8/ qdeclarativesecurity.html
Securing BlackBerry 10 HTML5 and JavaScript (WebWorks) Applications
BlackBerry 10 WebWorks applications as with their BlackBerry 7 cousins (see “BlackBerry WebWorks Security
on BlackBerry OS 7 and earlier”) are HTML5 and JavaScript and so suffer the risk of a variety of content
injection attacks such as cross-site-scripting and similar.
App Invocation Parameters
WebWorks applications by default do not allow parameters to be passed to them when being invoked. If you
specify in the applications config.xml the  element with a rim:allowInvokeParams parameter this is no
longer the case. Take care if you specify this parameter to then validate and sanitize as appropriate any supplied
parameters due to the risk of content injection or redirection-style attacks.
For further information, we suggest going to this link: http://developer
.blackberry.com/html5/documentation/v2_1/content_element.html.
Access App Configuration Option
WebWorks applications by default cannot access network resources or local file resources outside of the
applications package. If you specify in the applications config.xml the  element this is no longer the
case. Care should be taken on two fronts. The first is for network resources to avoid wildcards wherever possible
and only specify fully qualified domains and indicate if subdomains as allowed. However, the ability to use
wildcards comes with the following caveat for AJAX requests (this is covered in the next section):
The wildcard character (*) cannot be used for data accessed by XMLHttpRequest. To access data using the
XMLHttpRequest, you must explicitly specify each domain.
https://developer.blackberry.com/html5/documentation/
v2_1/accessing_external_resources_webworks.html
The second point to consider is to always use HTTPS (that is, an SSL/TLS protected connection) wherever
possible to mitigate against man-in-the-middle type attacks.
You can find further reading at
http://developer.blackberry.com/html5/documentation/v2_1/access_element.html
http://developer.blackberry.com/html5/documentation/v2_1/accessing_
external_resources_webworks.html#kba1393537416024
Websecurity App Configuration Option
WebWorks applications cannot by default specify wildcards for AJAX requests. However, a dangerous option
exists that allows you to override this. Specifying this in the config.xml,
…then in the words of BlackBerry, it does the following:
… will turn off the security measures that protect your application from untrusted content.
Traditionally, a browser’s security model prevents content from different domains from interacting with each
other, allowing developers to more easily include untrusted content without worrying about its effects.
Content from a different domain (included via iframes, XHR, scripts or anything else) is limited from
interacting with your content, reducing the risk posed by malicious code.
http://devblog.blackberry.com/2013/08/accessing- external-resources-in-a-blackberry-10-webworks-
app-enterprise-dev-2/