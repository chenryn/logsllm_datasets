# Title: A General Approach for Efficiently Accelerating Software-based Dynamic Data Flow Tracking on Commodity Hardware

## Authors:
- Kangkook Jee, Columbia University
- Georgios Portokalidis, Columbia University
- Vasileios P. Kemerlis, Columbia University
- Soumyadeep Ghosh, Princeton University
- David I. August, Princeton University
- Angelos D. Keromytis, Columbia University

## Abstract
This paper presents a new optimization approach for software-based dynamic data flow tracking (DFT) on commodity hardware. The proposed method significantly improves the performance of binary-only DFT, achieving up to 2.23x speedup (on average 1.77x) in real-world applications such as Firefox and Chrome. The key innovation is the segregation of tracking logic from execution through the use of Taint Flow Algebra (TFA), an intermediate representation tailored for DFT. This approach leverages both compiler optimizations and DFT-specific optimizations to enhance performance.

## Introduction
Data Flow Tracking (DFT) is a powerful security tool with numerous applications, including detecting software exploits, information misuse, and malware analysis. DFT can be implemented using various approaches, including hardware-assisted, source code-based, and binary-only methods. Among these, binary-only DFT is the most promising but has historically been too slow for practical use.

## Overview of DFT
### Basic Aspects of DFT
DFT is characterized by three main aspects:
1. **Data Sources**: Program or memory locations where data of interest enter the system and are subsequently tagged.
2. **Data Tracking**: The process of propagating data tags.
3. **Data Sinks**: Program or memory locations where checks for "tagged" data can be made according to the program's semantics.

### DFT Operation
- **Real Memory**: Consists of the address space and register context.
- **Shadow Memory**: Used to track metadata updates.

For example, consider the following memory copy statement:
```c
dst[idx1] = src[idx0];
```
In the original execution, this translates to:
```assembly
mov reg0, [src+idx0]
mov [dst+idx1], reg0
```
To implement shadow updates, the corresponding operations are:
```assembly
mov reg0, [src+idx0]
mov reg0, [t(src+idx0)]
mov [t(reg0)], reg0
mov [dst+idx1], reg0
mov reg0, [t(reg0)]
mov [t(dst+idx1)], reg0
```
This results in 2 original instructions + 4 tracking instructions, requiring 2 instrumentation units.

## Why Binary-Only DFT is Slow
- **Framework Cost**: Dynamic Binary Instrumentation (DBI) and hypervisor instrumentation.
- **DFT Cost**: Frequent accesses to shadow storage.
- **Naive Implementation**: Lack of understanding of global context and DFT semantics.

## Our Approach
- **Application-Specific Analysis**: Tailored to the specific application being analyzed.
- **DFT-Specific Analysis**: Optimized for the unique requirements of DFT.
- **Integration with libdft**: A high-performance DFT tool designed for use with the Pin DBI framework. Libdft is open-source and available at [http://www.cs.columbia.edu/~vpk/research/libdft](http://www.cs.columbia.edu/~vpk/research/libdft).

### Performance Improvements
- **Speedup**: Achieves a 1.46x to 8x slowdown over naive execution, compared to the 2.23x speedup (on average 1.77x) in real-world applications like Firefox and Chrome.

## Optimizing DFT
### Example Optimization
Consider the following optimized sequence:
```assembly
mov reg0, [src+idx0]
mov [dst+idx1], reg0
mov reg0, [t(src+idx0)]
mov [t(reg0)], reg0
mov reg0, [t(reg0)]
mov [t(dst+idx1)], reg0
```
- **Relocatable**: The tracking instructions can be rearranged to reduce the number of instrumentation units.
- **Reduced Instructions**: Fewer tracking instructions (4 instead of 6) and fewer instrumentation units (2 instead of 4).

## Execution Model
The execution model consists of three components:
- **Feedback Loop**: Integrates static and dynamic analysis.
- **Profiler**: Collects control flow and basic block information.
- **Analyzer**: Performs taint flow algebra (TFA) and optimizations.
- **DFT Runtime**: Executes the optimized DFT.

### Analyzer
- **Taint Flow Algebra (TFA)**: An IR tailored to capture DFT semantics.
- **Compiler Optimizations**: Intra and inter-basic block optimizations, including dead code elimination and algebraic simplification.
- **DFT-Specific Considerations**: Ensures valid locations for each instrumentation unit and optimizes the number of units.

### TFA Optimization
- **DAG Representation**: Expresses root nodes and dependencies.
- **Example**:
  ```plaintext
  (a) x86 instruction
  |
  esi2
  &
  eax2
  &
  eax1
  &
  esi1
  [edx0+esi2]
  0x1
  eax0
  0x1
  esi0
  ecx1
  ```

By leveraging these techniques, our approach significantly accelerates software-based dynamic data flow tracking, making it more practical for real-world applications.