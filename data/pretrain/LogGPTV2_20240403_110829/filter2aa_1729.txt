# BLE Security: You'd Better Secure Your Devices or We'll Kick Your Butts!

**@virtualabs | DEFCON 26**

## Who Am I?
- Head of R&D at Econocom Digital Security
- Studying Bluetooth Low Energy (BLE) for 3 years
- Developer and maintainer of BtleJuice
- Having fun with Nordic's nRF51822 ðŸ˜Š

## Agenda
1. BLE Sniffing 101
2. Improving the BLE Arsenal
3. Sniffing BLE Connections in 2018
4. Introducing BtleJack: A Flexible Sniffing Tool
5. BtleJacking: A Brand New Attack
6. How It Works
7. Vulnerable Devices & Demos
8. Recommendations

## BLE Sniffing 101
### Current Tools and Their Limitations
- **Ubertooth One**
  - Sniffs existing and new connections
  - Does not support channel map updates
  - Costs $120
  - Up-to-date software (Nov. 2017)
  
- **Adafruit's Bluefruit LE Sniffer**
  - Sniffs only new connections
  - Proprietary firmware from Nordic Semiconductor
  - Costs $30 - $40
  
- **Software Defined Radio (SDR)**
  - Sniffs only BLE advertisements
  - Unable to follow existing/new connections
  - Requires a 2.4GHz compatible SDR device
  - Latency issues

### Challenges in BLE Sniffing
- BLE is designed to make sniffing difficult:
  - 3 separate advertising channels
  - Uses Frequency Hopping Spread Spectrum (FHSS)
  - Master or slave can renegotiate parameters at any time
- Sniffing BLE connections is either hard or expensive.

## Man-in-the-Middle (MitM) Attacks
### How BLE MitM Works
1. Discover the target device (advertisement data, services, and characteristics)
2. Connect to the target device, which stops advertising (connected state)
3. Advertise the same device, await connections, and forward data

### Existing MitM Tools
- **BtleJuice**
  - [GitHub](https://github.com/DigitalSecurity/btlejuice)
- **GAttacker**
  - [GitHub](https://github.com/securing/gattacker)

#### Pros:
- Overcomes the 3 advertising channels issue
- Captures all BLE operations
- Allows on-the-fly data tampering

#### Cons:
- Complex setup: requires 1 VM and 1 host computer
- Only captures HCI events, not BLE Link Layer
- Limited pairing support
- Compatible only with 4.0 adapters

### Why Current Approaches Are Inadequate
- Ubertooth-btle is outdated and incompatible with recent BLE stacks.
- Nordic Semiconductor's sniffer is closed-source and does not allow active connection sniffing.
- The MitM approach is too complex and does not intercept link-layer packets.

## Building Our Own Solution
### The Ideal Tool
- Capable of sniffing existing and new connections
- Utilizes cheap hardware
- Open-source

### Improving Mike Ryan's Sniffing Technique
- **Mike's Technique (2013)**
  1. Identify Access Address (32 bits)
  2. Recover CRCInit value for packet CRC computation
  3. Recover hop interval (time spent on each channel)
  4. Recover hop increment (channel hopping increment)

- **Assumption (2013)**
  - All 37 data channels are used

- **Data Channels in 2018**
  - Not all channels are used to improve reliability
  - Some channels are remapped to maintain a 37-channel hopping sequence
  - Example sequence: 0, 4, 8, 12, 16, 20, 24, 0, 4, 8, 3, 7, 11, 15, 19, 23, 27, 3, 7, 2, 6, 10, 14, 18, 22, 26, 2, 6, 1, 5, 9, 13, 17, 21, 25, 1, 5

- **Deducing Channel Map and Hop Interval**
  - Listen for packets on every possible channel (up to 4 x 37 seconds)
  - Measure time between two packets and divide by 37 to find hop interval

- **Deducing Hop Increment**
  - Pick two unique channels
  - Generate a lookup table
  - Measure time between packets on these channels
  - Determine increment value

- **"Instant" Matters**
  - Defines when a parameter update is effective
  - Used for channel map and hop interval updates

- **Multiple Sniffers for the Ultimate Sniffing Tool**
  - Based on a Micro:Bit

### BtleJack: A New Tool
- [GitHub](https://github.com/virtualabs/btlejack)

#### Features
- Sniffing established and new BLE connections
- Selective BLE jamming
- BLE connection take-over (btlejacking)
- PCAP export for Wireshark analysis
- Multiple sniffers support

### BtleJacking: A New Attack
- **Selective Precise Jamming**
- **Supervision Timeout**
  - Defined in CONNECT_REQ PDU
  - Time after which a connection is considered lost if no valid packets
  - Enforced by both Central and Peripheral devices

- **Abuse BLE Supervision Timeout to Take Over a Connection**
  - Works with BLE v4.x and v5 (if using legacy CSA and 1 Mbps)
  - Requires proximity (2 to 10 meters from target)

### Example of a Vulnerable Device
- [LovenSense Hack](https://fr.lovense.com/sex-toy-blog/lovense-hack)

### Counter-Measures
- Use BLE Secure Connections to avoid injection
- Authenticate data at the application layer for detection
- Use BLE version 5 with CSA #2

## Conclusion
- BLE hijacking is possible and should be considered
- It might get worse with future versions of BLE
- Secure your BLE connections!

## Contact
- @virtualabs
- damien.cauquil@digital.security

## Questions?