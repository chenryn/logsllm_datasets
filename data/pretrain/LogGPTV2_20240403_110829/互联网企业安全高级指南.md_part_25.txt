Int
Ppath
父进程可执行文件绝对路径
TEXT
pcmdline
父进程命令行
TEXT
Owner_uid
可执行文件属主uid
Int
Owner_gid
可执行文件属主gid
Int
Create_time
可执行文件创建时间
bigint
Modify_time
可执行文件修改时间
bigint
time
进程启动时间
bigint
数据使用中有几个技巧如下：
口mode字段，在规则检测（数据分析）过程，会发现一个无法解释的情况，某些root
权限执行的进程的父进程是低权限，不符合系统进程派生原则。那么这里可能有几
种情况：
a）有人利用系统漏洞提升了进程权限，可直接告警。
b）sudo执行，可通过父进程pcmdlineppath辨别。
c）设置了S位的可执行文件，mode字段的意义就在于可将S位可执行文件运行事
件与漏洞提权行为区别开。
ENV字段，接上条“sudo提权行为可通过父进程为sudo来辨别”，可是在很多发行
版里sudo运行可执行文件，在进程记录里父进程不是sudo，面是父进程的父进程，
原因在于execve调用的进程派生方式，它是将子进程的ELF文件映像加载到内存里
并执行，也就是sudo和被执行的进程“共用一个进程空间”，但在我们记录的进程
信息这个时间切片这里已经是新进程了。那么难道没有办法了鸣？这里就用得到环
境变量里的信息了，sudo执行的进程，进程的环境变量信息会新增3个环境变量信
息SUDO_COMMANDISUDO_USER\SUDO_UID，通过这三个变量就能判断当前进
程是否是被sudo启动的。
4）网络连接信息一网络连接信息分三类需求：连通性数据采集，用于分析违规ACL
和可疑网络连接；用于恶意行为检测的数据需求，用于检测木马等场景；监控探测扫描行为。
获取网络连接信息，是一个较为消耗性能的工作，无漏是通过解析/proc中网络连接信
息，还是内核消息。毕竞在一个业务繁忙的系统里，网络连接事件相对超出进程信息事件
多个数量级，设计和使用时必须谨慎。一般通过周期性解析以下三个文件信息获取：
---
## Page 153
第8章入侵感知体系141
/proc/net/raw—RAW套接字信息。
/proc/net/tcp—TCP套接字信息。
/proc/net/udpUDP套接字信息。
如果仅为获取网络连接信息，那么五元组就能满足需求，但为了安全场景检测的数据
分析需要可能还需关联进程信息，相当于一个定制版netstat。建议字段如表8-2所示。
表8-2建议字段
字段
描述
数据类型
Pid
进程 ID
Int
Path
可执行文件绝对路径
TEXT
Direction
网络连接方向（监听\外连\无状态）
Int
Local_ip
本地IP
Int
Remote_ip
远程IP
Int
Local_port
本地端口
Int
Remote_port
远程端口
Int
Protocol
协议
int
time
记录时间
biglnt
关于字段的几个提示：
口ip字段，这里数据类型是Int，相比text来说int存储空间节省很多，且方便计算
口为减少“无意义数据”的产生，周期性的数据提取但仅上报增量数据。
口很多业务繁忙的系统里，业务进程的网络连接请求非常多，所以监听端口的被动连
接信息可考虑裁剪。
5）webshell——在常规的互联网攻防里Web攻防基本是一个最常见的场景，面Web攻
击的整个流程里最常见的是GETSHELL，也就是生成一个webshell。当然在人侵检测里
webshell检测也成了一个很重要的环节。技术方案选择如下：
口inotify文件监控，Linux系统里的webshell检测，最重要也是儿乎公认的技术就
是inotify，在BSD和macOS里类似的是kqueue。从Linux内核从2.6.13开始引人
inotify，inotify是一种文件变化通知机制，几乎所有Linux发行版都支持，可以通过
以下命令看你的系统是否支持：
& grep INOTIFY_USER /boot/config=S (uname -r)
CONFIG_INOTIFY_USER=y
如果显示CONFIG_INOTIFY_USER=y则说明支持。
---
## Page 154
142技术篇
口如果不支持inotify，那么很遗憾，不得不周期性遍历Web目录来做检测。
6）DB审计一企业的核心资产通常是数据，用户数据、销售数据、产品数据、财务数据
等等，那么DB的安全保护就成为了重中之重。安全厂商不乏大量的DB安全产品，根据产品
的不同形态，DB安全（审计）产品可以是一个独立的系统，也可以作为HIDS的一个模块存在
当作为HIDS的一个模块存在的时候，产品方案必定是部署于主机的，这样带来的好处
最重要是复用了HIDS系统的控制管理指令通道以及数据传输通道，同时更贴近DB服务端
避免了攻击流旁路绕过的可能。但是缺点也较为明显，会消耗掉服务器自身部分系统资源。
3.数据传输
与传统HIDS以及PC版HIDS不同的是，企业版HIDS通常需要通过后端数据分析来
实现安全能力，特别是互联网企业中，为了降低前端计算带来的系统资源消耗基本以后端
数据分析为主。那么数据传输就是必要且重要的功能模块。同时在“大数据时代”，数据质
量、数据运营可靠性成了支撑安全能力指标的关键性要素，必须认真对待。技术方案如下。
口syslog转发一当数据分析架构在初级阶段，借用Linux系统自带的 syslog转发基
本能满足数据传输统一管理的需求。只需修改syslog服务的配置文件即可实现转发，
不需要额外开发数据接收Server。
此轻量解决方案易于实现，但缺点也很明显，syslog数据传输默认采用UDP514
端口，假如数据量较大或者数据量波动可能会丢数据。另外敏感数据也可能因明文
传输血泄露。
口数据直传—在数据量较少的阶段，警如agent部署量在儿千台服务器的阶段，前端
agent采集的数据可以直接发送到HIDS后端Server，典型的如OSSEC。
口数据接收Server—当HIDS系统部署运营到BAT这类公司的量级，数据通道的建
设就必须更为谨慎。
在BAT这类公司，通常运营（包括安全）监控都有成熟的数据通道，那么在安全系统
建设过程中，也可以复用它，既避免重复造轮子带来的开发资源浪费，也能快速的获得数
据质量和可靠性的保障，从公司运营体系角度来看也是有益的。
那么如果没有合适的可用的现成系统的时候，新建这类数据通道需要注意什么呢？如
下所示：
---
## Page 155
第8章入侵感知体系143
1）避免数据传输波峰“雪崩效应”，例如当某个机房网络不通时，数据可能挤压在缓
存里，在网络通畅之后集中传输占用网络通道以及对接受Server带来类似DDoS的效果。
可对数据传输队列做随机性的主动延迟，避免拥塞；另外可使用Server端下发“数据上报”
任务的方式来触发上传，而非agent主动无序上报。
2）敏感数据脱敏及加密，很多数据中包含敏感信息，如htp请求里的cookie、命令行
里的密码。配合业务部门或数据安全部门制定数据采集规范，在agent端隐去敏感信息，传
输环节做好加密，存储系统做好权限控制。
3）做好每个数据传输环节的前后链对账，当出现安全事件漏报时能及时追查到可能导
致数据丢失的环节，便于后续的优化与debug。
4.控制管理
企业级HIDS系统部署量非常大，且安全防守体系任何一点的故障都可能导致整体防守
的失效。合理的管理手段，能让整套系统更为健壮，确保可用性
口健康度监控一与传统安全系统基于端的检测方式不同，新型的企业级HIDS系统
往往采用后端数据分析的方式实现人侵场景检测，从行为数据采集到数据传输存储、
分析，是一个较长链条的流程，必须逐一对每个环节做好数据对账、异常监控。常
见的检测点如表8-3所示。
表8-3常见的检测点
检测点
监控内容
心跳
Agent 是否存活，有无coredump、掉线等
Agemt数据采集
Agent功能模块是否可正常获取数据
本地数据上传
Agent采集的数据是否上传成功，内存是否超限
数据接收Server
接收 Server是否有丢包，是否达到性能瓶颈
存储
Agent上报数据是否全量写入磁盘，数据对账
分析引擎
上报数据是否全量进入分析引擎，是否有丢包和性能
压力
漏报时间
漏报事件追测
口”自杀”机制—互联网企业里，业务会极度榨取系统性能，那么安全系统的部署也
同样会受到严格挑战。毕竞业务系统的稳定运行才是第一目标，安全在极端情况，
以及出现故障的时候必须为业务稳定牺牲。在产品设计中会设定一些系统资源耗用
指标，超出指标则暂停功能模块甚至会“自杀”。常见指标如下：
CPU占用 <10%~20%
内存占用<100M
---
## Page 156
144技术篇
数据上传<200/s（根据环境可配）
口部署与更新—日常运营中必然会碰到部署和更新的需求，在HIDS架构里必须有
推送更新的功能。单从功能和技术角度来说“更新”功能与大多数软件系统一样没
有什么特别需要讲的，在大型互联网企业中重点关注两个方面：
1）海量环境影响一大型网络中，动辑上万甚至几十万的部署量，对于每次的更新
必须谨慎。这里需要设定以下原则：
·发布前必须通知业务方，必须有应急预案和回滚手段。
·遵循灰度发布原则，未经一个可靠的时间周期（通常一个月）稳定运营验证，
不得批量部署。不同业务环境分别灰度。
·节假日前不部署。
·agent更新行为由 Server端推送任务完成。
2）安全性一曾经有人开玩笑说，部署的这么多Agent就相当于一个大型的分布式
僵尸网络。确实，假设恶意攻击者能操纵任何的HIDS集群系统的控制指令和平
台，那么真的是“一损俱损”。为确保管理控制系统的安全性，必须设定儿个安
全原则：
·控制（更新）指令仅允许选择固化的指令，严禁在Agent端预留执行系统命令
的接口；
·更新包必须经过第三方安全工程师审核之后上传至更新Server保存，更新仅允
许选择更新Server上已有的安装包；
·控制指令下发时必须由第三方审核批准才可执行。
8.2检测webshell
互联网公司Web类的应用服务占较大比例，那么在此攻击面上的攻防入侵场景中占比
非常高，几乎Web安全成了攻防对抗的代名词。而在Web入侵中最重要的一个环节就是
“getshell"，也就是放置Web后门webshell。那么Web安全能力中一个最重要的指标就是
webshell检测能力。以至于很多中小型安全产品，从诞生之初就以webshell检测能力作为核
心任务。
webshell通常是一个文件，那么静态文件的扫描检测是常见做法，但由于攻防技术的对
抗发展，静态文件的变形越来越多，已不足以满足检出率要求，于是出现了流量检测、运
行时检测等方案。
---
## Page 157
第8章入侵感知体系145
1.静态检测
静态文件检测是常规做法，在Linux系统里，一个webshell检测模块运作流程如
图8-8所示。