# A Framework for Detecting Network-based Code Injection Attacks Targeting Windows and UNIX

**Authors:**
- Stig Andersson
- Andrew J. Clark
- George M. Mohay
- Bradley L. Schatz
- Jacob Zimmermann

**Affiliation:**
Information Security Institute, Queensland University of Technology, GPO Box 2434, Brisbane 4000, Australia

**Contact:**
- {sa.andersson, a.clark, g.mohay, b.schatz, j.zimmermann}@qut.edu.au

## Abstract

Code injection vulnerabilities remain a significant security concern, accounting for approximately half of the vulnerabilities discovered in software annually. This paper extends previous research on code injection attack detection in UNIX environments by presenting a framework for detecting both new and previously unseen code injection attacks in heterogeneous networking environments. The framework is capable of detecting both obfuscated and clear text attacks and is suitable for implementation in the Windows environment. We also present a prototype intrusion detection system (IDS) that can detect code injection attacks targeting Windows systems.

## 1. Introduction

Despite increased efforts to secure applications through methods such as secure programming practices and patch distribution, code injection vulnerabilities continue to be prevalent. It is estimated that roughly half of the vulnerabilities discovered in software each year are code injection vulnerabilities. These attacks involve injecting executable code (often referred to as shellcode) into a vulnerable process, potentially allowing an attacker to run arbitrary code with the privileges of the targeted process.

A code injection attack typically exploits vulnerabilities such as stack buffer overflows, heap buffer overflows, or format string bugs. The goal is to inject the attacker's executable code and gain control of the instruction pointer, redirecting execution to the injected code.

In this paper, we present a new network-based intrusion detection system (NIDS) approach for detecting new or previously unseen code injection attacks. Our research builds on earlier work in the area of obfuscated code injection attack detection for the UNIX environment, extending it to a heterogeneous environment. We compare the requirements for detecting attacks targeting the Windows platform (collectively referring to Windows 2000, XP, and 2003) with those for the UNIX environment.

## 2. Related Work

This section reviews existing approaches for detecting code injection attacks and discusses their accuracy and completeness properties based on a taxonomy of intrusion detection systems.

### 2.1 Taxonomy of Intrusion Detection Systems

An intrusion detection system (IDS) aims to detect attacks against computer systems and networks. Debar et al. [6] have created a taxonomy of IDSs, identifying several measures of IDS efficiency, including accuracy and completeness. Accuracy refers to the ability of an IDS to correctly identify malicious activity, while completeness refers to the proportion of all attacks that an IDS can detect.

### 2.2 Existing Approaches to Detecting Code Injection Attacks

- **Signature-Based IDSes:** These systems compare network traffic to a database of known attack signatures. They can have good accuracy but are limited in completeness because they can only detect known attacks. Recent research [9] has shown that producing exploits that avoid detection is relatively easy if the signature describes the exploit rather than the vulnerability.

- **NOP Detection Approach:** This approach identifies sequences of NOP, POP, INC, DEC, and JMP instructions in network traffic. It provides excellent completeness for UNIX environments but performs poorly in Windows due to the more deterministic nature of memory layout in Windows.

- **Abstract Payload Execution Detection Approach:** This method searches for consecutive valid machine instructions in network traffic. It has been implemented with good completeness and accuracy for DNS and HTTP requests but may not be as effective for protocols that transmit binary data.

- **Specification-Based Systems:** These systems model all aspects of the protocols and application I/O used on the network, providing excellent accuracy and completeness. However, they require detailed analysis of all protected applications and protocols, which may be impractical, especially for closed-source applications.

- **System Call Detection Approach:** This approach analyzes network traffic for evidence of system call usage. It works well for UNIX attacks but is vulnerable to obfuscated payloads and is not suitable for Windows, where most exploits call functions in Dynamic Link Libraries (DLLs).

## 3. Code Injection Attack Strategies

### 3.1 Seizing Control of the Instruction Pointer

Code injection attacks aim to break the execution path of a process by seizing control of the instruction pointer. This is achieved by inserting executable code through an injection vector such as a stack overflow, heap overflow, or format string bug. The injected code can be machine instructions or addresses of instructions on the system.

#### 3.1.1 Stack Overflow

The simplest code injection vector is the stack overflow, where the attacker's code is injected into a buffer on the stack, and the return address of the vulnerable function is overwritten to execute the payload. Two solutions to this problem are:

- **NOP Sledge:** This increases the address space of the entry point of the executable code.
- **Exact Address:** Using the exact location of an instruction that returns execution to the injected code.

In the Windows environment, the exact address approach is favored as it minimizes the size of the injected code. In UNIX, the NOP sledge approach is more common due to the variability in binary layouts across different distributions and versions.

## 4. Monitoring Executable Code in the Windows Environment

This section examines the specific challenges and strategies for monitoring executable code in the Windows environment, contrasting them with the UNIX environment.

## 5. Framework for Detecting Code Injection Attacks in a Heterogeneous Environment

We present a framework for detecting code injection attacks in a heterogeneous environment, capable of handling both obfuscated and clear text attacks. The framework is designed to be adaptable to both Windows and UNIX environments.

## 6. Implementation of the Windows Monitoring Environment

This section details the implementation of the monitoring environment for detecting code injection attacks targeting Windows systems.

## 7. Test Results for Detecting Attacks Targeting Windows

We present the test results for our prototype IDS, demonstrating its effectiveness in detecting code injection attacks targeting Windows systems.

## 8. Conclusions and Future Work

Finally, we summarize our findings and discuss future directions for improving the detection of code injection attacks in heterogeneous environments.

---

**Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005)**
1063-9527/05 $20.00 Â© 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 12:07:54 UTC from IEEE Xplore. Restrictions apply.