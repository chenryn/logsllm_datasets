a different boundary every time the process is started. By
restarting the victim application we can obtain arbitrary
disalignments of T-tables. Disaligned T-tables allow to
reduce the key space to 20 bits on average and for spe-
cific disalignments even full-key recovery without a sin-
gle brute-force computation is possible [51, 53]. We ob-
served not a single case where the T-tables were aligned.
Based on the first-round attack matrix in Figure 11, the
expected number of encryptions until a key byte is iden-
tified is 1.81 · 128. Thus, full key recovery is possible
after 1.81· 128· 16 = 3707 encryptions by monitoring a
single address during each encryption.
Real-world cross-core attack on Bouncy Castle.
If
the attacker has no way to share a targeted mem-
ory region with the victim, Prime+Probe instead of
Evict+Reload or Flush+Reload can be used. This is the
case for dynamically generated data or private memory
of another process. Figure 12 shows the Prime+Probe
histogram for cache hits and cache misses. We observe a
higher execution time if the victim accesses a congruent
memory location. Thus, Prime+Probe can be used for
a real-world cross-core attack on Bouncy Castle and also
allows to exploit disaligned T-tables as mentioned above.
t
e
s
f
f
O
0x240
0x280
0x2C0
0x300
0x340
0x380
0x3C0
0
0
x
0
0
1
x
0
0
2
x
0
0
3
x
0
0
4
x
0
0
5
x
0
0
6
x
0
0
7
x
0
0
8
x
0
0
9
x
0
0
A
x
0
0
B
x
0
0
C
x
0
Plaintext byte values
0
D
x
0
0
E
x
0
0
F
x
0
Figure 13: Excerpt of the attack on Bouncy Castle’s AES
using Prime+Probe.
In a preprocessing step,
the attacker identifies the
cache sets to be attacked by performing random encryp-
tions and searching for active cache sets. Recall that the
cache set (index) is derived directly from the physical ad-
dress on ARM, i.e., the lowest n bits determine the offset
within a 2n-byte cache line and the next s bits determine
one of the 2s cache sets. Thus, we only have to find a
few cache sets where a T-table maps to in order to iden-
tify all cache sets required for the attack. On x86 the
replacement policy facilitates this attack and allows even
to deduce the number of ways that have been replaced in
a specific cache set [43]. On ARM the random replace-
ment policy makes Prime+Probe more difficult as cache
lines are replaced in a less predictable way. To launch a
Prime+Probe attack, we apply the eviction strategy and
the crafted reaccess patterns we described in Section 3.2.
Figure 13 shows an excerpt of the cache template ma-
trix resulting from a Prime+Probe attack on one T-table.
For each combination of plaintext byte and offset we per-
formed 100000 encryptions for illustration purposes. We
only need to monitor a single address to obtain the upper
4 bits of si and, thus, the upper 4 bits of ki = si ⊕ pi.
Compared to the Evict+Reload attack from the previous
section, Prime+Probe requires 3 times as many measure-
ments to achieve the same accuracy. Nevertheless, our
results show that an attacker can run Prime+Probe at-
tacks on ARM CPUs just as on Intel CPUs.
560  25th USENIX Security Symposium 
USENIX Association
12
6.2 Spy on TrustZone Code Execution
The ARM TrustZone is a hardware-based security tech-
nology built into ARM CPUs to provide a secure exe-
cution environment [4]. This trusted execution environ-
ment is isolated from the normal world using hardware
support. The TrustZone is used, e.g., as a hardware-
backed credential store, to emulate secure elements for
payment applications, digital rights management as well
as verified boot and kernel integrity measurements. The
services are provided by so-called trustlets, i.e., applica-
tions that run in the secure world.
Since the secure monitor can only be called from the
supervisor context, the kernel provides an interface for
the userspace to interact with the TrustZone. On the
Alcatel One Touch Pop 2, the TrustZone is accessible
through a device driver called QSEECOM (Qualcomm
Secure Execution Environment Communication) and a
library libQSEEComAPI.so. The key master trustlet on
the Alcatel One Touch Pop 2 provides an interface to
generate hardware-backed RSA keys, which can then be
used inside the TrustZone to sign and verify signatures.
Our observations showed that a Prime+Probe at-
tack on the TrustZone is not much different from a
Prime+Probe attack on any application in the normal
world. However, as we do not have access to the source
code of the TrustZone OS or any trustlet, we only con-
duct simple attacks.4 We show that Prime+Probe can be
used to distinguish whether a provided key is valid or not.
While this might also be observable through the overall
execution time, we demonstrate that the TrustZone isola-
tion does not protect against cache attacks from the nor-
mal world and any trustlet can be attacked.
We evaluated cache profiles for multiple valid as well
as invalid keys. Figure 14 shows the mean squared er-
ror over two runs for different valid keys and one in-
valid key compared to the average of valid keys. We
performed Prime+Probe before and after the invocation
of the corresponding trustlet, i.e., prime before the invo-
cation and probe afterwards. We clearly see a difference
in some sets (cache sets 250–320) that are used during
the signature generation using a valid key. These cache
profiles are reproducible and can be used to distinguish
whether a valid or an invalid key has been used in the
TrustZone. Thus, the secure world leaks information to
the non-secure world.
On the Samsung Galaxy S6, the TrustZone flushes the
cache when entering or leaving the trusted world. How-
ever, by performing a Prime+Probe attack in parallel,
i.e., multiple times while the trustlet performs the corre-
sponding computations, the same attack can be mounted.
4More sophisticated attacks would be possible by reverse engineer-
ing these trustlets.
s
e
l
c
y
c
U
P
C
n
i
e
m
i
t
g
n
i
b
o
r
P
1.5 ·106
1
0.5
0
Valid key 1
Valid key 2
Valid key 3
Invalid key
260
280
300
320
340
Set number
Figure 14: Mean squared error between the average
Prime+Probe timings of valid keys and invalid keys on
the Alcatel One Touch Pop 2.
7 Countermeasures
Although our attacks exploit hardware weaknesses,
software-based countermeasures could impede such at-
tacks. Indeed, we use unprotected access to system in-
formation that is available on all Android versions.
As we have shown, the operating system cannot pre-
vent access to timing information. However, other in-
formation supplied by the operating system that facil-
itates these attacks could be restricted. For instance,
we use /proc/pid/ to retrieve information about any
other process on the device, e.g., /proc/pid/pagemap
is used to resolve virtual addresses to physical ad-
dresses. Even though access to /proc/pid/pagemap
and /proc/self/pagemap has been restricted in Linux
in early 2015, the Android kernel still allows access to
these resources. Given the immediately applicable at-
tacks we presented, we stress the urgency to merge the
corresponding patches into the Android kernel. Further-
more, we use /proc/pid/maps to determine shared ob-
jects that are mapped into the address space of a victim.
Restricting access to procfs to specific privileges or per-
missions would make attacks harder. We recommend this
for both the Linux kernel as well as Android.
We also exploit the fact that access to shared li-
braries as well as dex and art optimized program bi-
naries is only partially restricted on the file system
level. While we cannot retrieve a directory listing of
/data/dalvik-cache/, all files are readable for any
process or Android application. We recommend to allow
read access to these files to their respective owner ex-
clusively to prevent Evict+Reload, Flush+Reload, and
Flush+Flush attacks through these shared files.
In order to prevent cache attacks against AES T-tables,
hardware instructions should be used. If this is not an op-
tion, a software-only bit-sliced implementation must be
employed, especially when disalignment is possible, as it
is the case in Java. Since OpenSSL 1.0.2 a bit-sliced im-
plementation is available for devices capable of the ARM
USENIX Association  
25th USENIX Security Symposium  561
13
562  25th USENIX Security Symposium 
USENIX Association
NEONinstructionsetanddedicatedAESinstructionsareusedonARMv8-Adevices.Cryptographicalgorithmscanalsobeprotectedusingcachepartitioning[34].How-ever,cachepartitioningcomeswithaperformanceim-pactanditcannotpreventallattacks,asthenumberofcachepartitionsislimited.Weresponsiblydisclosedourattacksandthepro-posedcountermeasurestoGoogleandotherdevelopmentgroupspriortothepublicationofourattacks.Googlehasappliedupstreampatchespreventingaccessto/proc/pid/pagemapinearly2016andrecommendedinstallingthesecurityupdateinMarch2016[15].8ConclusionInthisworkwedemonstratedthemostpowerfulcross-corecacheattacksPrime+Probe,Flush+Reload,Evict+Reload,andFlush+FlushondefaultconfiguredunmodifiedAndroidsmartphones.Furthermore,theseattacksdonotrequireanypermissionorprivileges.Inordertoenabletheseattacksinreal-worldscenarios,wehavesystematicallysolvedallchallengesthatpre-ventedhighlyaccuratecacheattacksonARMsofar.Ourattacksarethefirstcross-coreandcross-CPUat-tacksonARMCPUs.Furthermore,ourattacktech-niquesprovideahighresolutionandahighaccuracy,whichallowsmonitoringsingulareventssuchastouchandswipeactionsonthescreen,touchactionsonthesoft-keyboard,andinter-keystroketimings.Inaddition,weshowthatefficientstate-of-the-artkey-recoveryat-tackscanbemountedagainstthedefaultAESimple-mentationthatispartoftheJavaBouncyCastlecryptoproviderandthatcacheactivityintheARMTrustZonecanbemonitoredfromthenormalworld.Thepresentedexampleattacksarebynomeansex-haustiveandlaunchingourproposedattackagainstotherlibrariesandappswillrevealnumerousfurtherex-ploitableinformationleaks.Ourattacksareapplicabletohundredsofmillionsoftoday’soff-the-shelfsmart-phonesastheyallhaveverysimilarifnotidenticalhard-ware.Thisisespeciallydauntingsincesmartphoneshavebecomethemostimportantpersonalcomputingdevicesandourtechniquessignificantlybroadenthescopeandimpactofcacheattacks.AcknowledgmentWewouldliketothankouranonymousreviewersfortheirvaluablecommentsandsuggestions.SupportedbytheEUHorizon2020pro-grammeunderGANo.644052(HEC-TOR),theEUFP7programmeunderGANo.610436(MATTHEW),andtheAus-trianResearchPromotionAgency(FFG)undergrantnumber845579(MEMSEC).References[1]ANDROIDOPENSOURCEPROJECT.ConfiguringART.https://source.android.com/devices/tech/dalvik/configure.html,Nov.2015.RetrievedonNovember10,2015.[2]APPTORNADO.AppBrain-Androidlibrarystatistics-SpongyCastle-BouncyCastleforAndroid.http://www.appbrain.com/stats/libraries/details/spongycastle/spongy-castle-bouncy-castle-for-android,June2016.Re-trievedonJune6,2016.[3]ARMLIMITED.ARMArchitectureReferenceManual.ARMv7-AandARMv7-Redition.ARMLimited,2012.[4]ARMLIMITED.ARMArchitectureReferenceManualARMv8.ARMLimited,2013.[5]ARMLIMITED.ARMCortex-A57MPCoreProcessorTechnicalReferenceManualr1p0.ARMLimited,2013.[6]ARMLIMITED.ARMCortex-A53MPCoreProcessorTechnicalReferenceManualr0p3.ARMLimited,2014.[7]AVIV,A.J.,SAPP,B.,BLAZE,M.,ANDSMITH,J.M.Prac-ticalityofAccelerometerSideChannelsonSmartphones.InAnnualComputerSecurityApplicationsConference–ACSAC(2012),ACM,pp.41–50.[8]BENGER,N.,VANDEPOL,J.,SMART,N.P.,ANDYAROM,Y.”OohAah...JustaLittleBit”:ASmallAmountofSideChannelCanGoaLongWay.InCryptographicHardwareandEmbeddedSystems–CHES(2014),vol.8731ofLNCS,Springer,pp.75–92.[9]BERNSTEIN,D.J.Cache-TimingAttacksonAES,2004.URL:http://cr.yp.to/papers.html#cachetiming.[10]BOGDANOV,A.,EISENBARTH,T.,PAAR,C.,ANDWIENECKE,M.DifferentialCache-CollisionTimingAttacksonAESwithApplicationstoEmbeddedCPUs.InTopicsinCryptology–CT-RSA(2010),vol.5985ofLNCS,Springer,pp.235–251.[11]CAI,L.,ANDCHEN,H.TouchLogger:InferringKeystrokesonTouchScreenfromSmartphoneMotion.InUSENIXWorkshoponHotTopicsinSecurity–HotSec(2011),USENIXAssociation.[12]CAI,L.,ANDCHEN,H.OnthePracticalityofMotionBasedKeystrokeInferenceAttack.InTrustandTrustworthyComputing–TRUST(2012),vol.7344ofLNCS,Springer,pp.273–290.[13]GALLAIS,J.,KIZHVATOV,I.,ANDTUNSTALL,M.ImprovedTrace-DrivenCache-CollisionAttacksagainstEmbeddedAESImplementations.InWorkshoponInformationSecurityApplica-tions–WISA(2010),vol.6513ofLNCS,Springer,pp.243–257.[14]GALLAIS,J.-F.,ANDKIZHVATOV,I.Error-ToleranceinTrace-DrivenCacheCollisionAttacks.InCOSADE(2011),pp.222–232.[15]GOOGLEINC.NexusSecurityBulletin-March2016.https://source.android.com/security/bulletin/2016-03-01.html,Mar.2016.RetrievedonJune6,2016.[16]GRUSS,D.,BIDNER,D.,ANDMANGARD,S.PracticalMem-oryDeduplicationAttacksinSandboxedJavascript.InEuropeanSymposiumonResearch–ESORICS(2015),vol.9326ofLNCS,Springer,pp.108–122.14[17] GRUSS, D., MAURICE, C., AND MANGARD, S. Rowham-
mer.js: A Remote Software-Induced Fault Attack in JavaScript.
In DIMVA’16 (2016).
[18] GRUSS, D., MAURICE, C., WAGNER, K., AND MANGARD, S.
Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA’16
(2016).
[19] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache
Template Attacks: Automating Attacks on Inclusive Last-Level
Caches. In USENIX Security Symposium (2015), USENIX Asso-
ciation, pp. 897–912.
[20] GUERON, S. White Paper: Intel Advanced Encryption Stan-
dard (AES) Instructions Set, 2010. URL: https://software.
intel.com/file/24917.
[21] GULLASCH, D., BANGERTER, E., AND KRENN, S. Cache
Games – Bringing Access-Based Cache Attacks on AES to Prac-
tice. In IEEE Symposium on Security and Privacy – S&P (2011),
IEEE Computer Society, pp. 490–505.
[22] G ¨ULMEZOGLU, B., INCI, M. S., APECECHEA, G. I., EISEN-
BARTH, T., AND SUNAR, B. A Faster and More Realistic
Flush+Reload Attack on AES.
In Constructive Side-Channel
Analysis and Secure Design – COSADE (2015), vol. 9064 of
LNCS, Springer, pp. 111–126.
[23] HUND, R., WILLEMS, C., AND HOLZ, T. Practical Timing Side
Channel Attacks against Kernel Space ASLR. In IEEE Sympo-
sium on Security and Privacy – S&P (2013), IEEE, pp. 191–205.
[24] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. S$A: A
Shared Cache Attack that Works Across Cores and Defies VM
Sandboxing – and its Application to AES. In IEEE Symposium
on Security and Privacy – S&P (2015), IEEE Computer Society.
[25] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. Cross Pro-
cessor Cache Attacks. In ACM Computer and Communications
Security – ASIACCS (2016), ACM, pp. 353–364.
[26] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B.
Wait a Minute! A fast, Cross-VM Attack on AES. In Research
in Attacks, Intrusions and Defenses Symposium – RAID (2014),
vol. 8688 of LNCS, Springer, pp. 299–319.
[27] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR,
B. Know Thy Neighbor: Crypto Library Detection in Cloud.
Privacy Enhancing Technologies 1, 1 (2015), 25–40.
[28] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B.
Lucky 13 Strikes Back. In ACM Computer and Communications
Security – ASIACCS (2015), ACM, pp. 85–96.
[29] K ¨ASPER, E., AND SCHWABE, P. Faster and Timing-Attack Re-
sistant AES-GCM. In Cryptographic Hardware and Embedded
Systems – CHES (2009), vol. 5747 of LNCS, Springer, pp. 1–17.
[30] KELSEY, J., SCHNEIER, B., WAGNER, D., AND HALL, C. Side
Channel Cryptanalysis of Product Ciphers. Journal of Computer
Security 8, 2/3 (2000), 141–158.
[31] KOCHER, P. C. Timing Attacks on Implementations of Diffie-
Hellman, RSA, DSS, and Other Systems. In Advances in Cryp-
tology – CRYPTO (1996), vol. 1109 of LNCS, Springer, pp. 104–
113.
[32] K ¨ONIGHOFER, R. A Fast and Cache-Timing Resistant Imple-
mentation of the AES. In Topics in Cryptology – CT-RSA (2008),
vol. 4964 of LNCS, Springer, pp. 187–202.
[33] LAL SHIMPI, ANANDTECH.
Answered by the Experts:
ARM’s Cortex A53 Lead Architect, Peter Greenhalgh.
http://www.anandtech.com/show/7591/answered-
by-the-experts-arms-cortex-a53-lead-architect-
peter-greenhalgh, Dec. 2013. Retrieved on November 10,
2015.
[34] LIU, F., GE, Q., YAROM, Y., MCKEEN, F., ROZAS, C. V.,
HEISER, G., AND LEE, R. B. CATalyst: Defeating Last-Level
Cache Side Channel Attacks in Cloud Computing. In IEEE In-
ternational Symposium on High Performance Computer Archi-
tecture – HPCA (2016), IEEE Computer Society, pp. 406–418.
[35] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.
Last-Level Cache Side-Channel Attacks are Practical. In IEEE
Symposium on Security and Privacy – SP (2015), IEEE Computer
Society, pp. 605–622.
[36] MARFORIO, C., RITZDORF, H., FRANCILLON, A., AND CAP-
KUN, S. Analysis of the Communication Between Colluding Ap-
plications on Modern Smartphones. In Annual Computer Security
Applications Conference – ACSAC (2012), ACM, pp. 51–60.
[37] MAURICE, C., NEUMANN, C., HEEN, O., AND FRANCILLON,
A. C5: Cross-Cores Cache Covert Channel.
In Detection of
Intrusions and Malware, and Vulnerability Assessment – DIMVA
(2015), vol. 9148 of LNCS, Springer, pp. 46–64.
[38] MAURICE, C., SCOUARNEC, N. L., NEUMANN, C., HEEN, O.,
AND FRANCILLON, A. Reverse Engineering Intel Last-Level
Cache Complex Addressing Using Performance Counters.
In
Research in Attacks, Intrusions, and Defenses – RAID (2015),
vol. 9404 of LNCS, Springer, pp. 48–65.
[39] MILUZZO, E., VARSHAVSKY, A., BALAKRISHNAN, S., AND
CHOUDHURY, R. R. Tapprints: Your Finger Taps Have Finger-
prints. In Mobile Systems, Applications, and Services – MobiSys
(2012), ACM, pp. 323–336.
[40] NEVE, M. Cache-based Vulnerabilities and SPAM Analysis. PhD
thesis, UCL, 2006.
[41] NEVE, M., SEIFERT, J., AND WANG, Z. A Refined Look at
Bernstein’s AES Side-Channel Analysis. In ACM Computer and
Communications Security – ASIACCS (2006), ACM, p. 369.
[42] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND
KEROMYTIS, A. D. The Spy in the Sandbox: Practical Cache
Attacks in JavaScript and their Implications. In Conference on
Computer and Communications Security – CCS (2015), ACM,
pp. 1406–1418.
[43] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache Attacks
and Countermeasures: The Case of AES. In Topics in Cryptology
– CT-RSA (2006), vol. 3860 of LNCS, Springer, pp. 1–20.
[44] PAGE, D. Theoretical Use of Cache Memory as a Cryptanalytic
Side-Channel. IACR Cryptology ePrint Archive 2002/169.
[45] PERCIVAL, C.
Cache Missing for Fun and Profit,
2005. URL: http://daemonology.net/hyperthreading-
considered-harmful/.
[46] REBEIRO, C., SELVAKUMAR, A. D., AND DEVI, A. S. L. Bit-
slice Implementation of AES. In Cryptology and Network Secu-
rity – CANS (2006), vol. 4301 of LNCS, Springer, pp. 203–212.
[47] SAVAS, E., AND YILMAZ, C. A Generic Method for the Analysis
of a Class of Cache Attacks: A Case Study for AES. Comput. J.
58, 10 (2015), 2716–2737.
[48] SCHLEGEL, R., ZHANG, K., ZHOU, X., INTWALA, M., KA-
PADIA, A., AND WANG, X. Soundcomber: A Stealthy and
Context-Aware Sound Trojan for Smartphones. In Network and
Distributed System Security Symposium – NDSS (2011), The In-
ternet Society.
[49] SPREITZER, R. PIN Skimming: Exploiting the Ambient-Light
Sensor in Mobile Devices.
In Security and Privacy in Smart-
phones & Mobile Devices – SPSM@CCS (2014), ACM, pp. 51–
62.
[50] SPREITZER, R., AND G ´ERARD, B. Towards More Practical
Time-Driven Cache Attacks. In Information Security Theory and
Practice – WISTP (2014), vol. 8501 of LNCS, Springer, pp. 24–
39.
USENIX Association  
25th USENIX Security Symposium  563
15
[51] SPREITZER, R., AND PLOS, T. Cache-Access Pattern Attack on
Disaligned AES T-Tables.
In Constructive Side-Channel Anal-
ysis and Secure Design – COSADE (2013), vol. 7864 of LNCS,
Springer, pp. 200–214.
[57] WEISS, M., HEINZ, B., AND STUMPF, F. A Cache Timing At-
tack on AES in Virtualization Environments. In Financial Cryp-
tography and Data Security – FC (2012), vol. 7397 of LNCS,
Springer, pp. 314–328.
[52] SPREITZER, R., AND PLOS, T. On the Applicability of Time-
Driven Cache Attacks on Mobile Devices. In Network and System
Security – NSS (2013), vol. 7873 of LNCS, Springer, pp. 656–662.
[53] TAKAHASHI, J., FUKUNAGA, T., AOKI, K., AND FUJI, H.
Highly Accurate Key Extraction Method for Access-Driven
Cache Attacks Using Correlation Coefficient.
In Australasian
Conference Information Security and Privacy – ACISP (2013),
vol. 7959 of LNCS, Springer, pp. 286–301.
[54] TROMER, E., OSVIK, D. A., AND SHAMIR, A. Efficient Cache
Attacks on AES, and Countermeasures. Journal Cryptology 23,
1 (2010), 37–71.
[55] TSUNOO, Y., SAITO, T., SUZAKI, T., SHIGERI, M., AND
MIYAUCHI, H. Cryptanalysis of DES Implemented on Com-
puters with Cache. In Cryptographic Hardware and Embedded
Systems – CHES (2003), vol. 2779 of LNCS, Springer, pp. 62–76.
[56] VAN DE POL, J., SMART, N. P., AND YAROM, Y. Just a Little
Bit More. In Topics in Cryptology – CT-RSA (2015), vol. 9048 of
LNCS, Springer, pp. 3–21.
[58] WEISS, M., WEGGENMANN, B., AUGUST, M., AND SIGL, G.
On Cache Timing Attacks Considering Multi-core Aspects in Vir-
tualized Embedded Systems.
In Trusted Systems – INTRUST
(2014), vol. 9473 of LNCS, Springer, pp. 151–167.
[59] XU, Z., BAI, K., AND ZHU, S. TapLogger: Inferring User In-
puts on Smartphone Touchscreens Using On-board Motion Sen-
sors. In Security and Privacy in Wireless and Mobile Networks –
WISEC (2012), ACM, pp. 113–124.
[60] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A High
Resolution, Low Noise, L3 Cache Side-Channel Attack.
In
USENIX Security Symposium (2014), USENIX Association,
pp. 719–732.
[61] ZHANG, K., AND WANG, X. Peeping Tom in the Neighborhood:
In USENIX
Keystroke Eavesdropping on Multi-User Systems.
Security Symposium (2009), USENIX Association, pp. 17–32.
564  25th USENIX Security Symposium 
USENIX Association
16