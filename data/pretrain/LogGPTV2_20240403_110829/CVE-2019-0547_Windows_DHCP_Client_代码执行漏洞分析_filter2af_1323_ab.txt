    6ffcb0fd 8907 mov dword ptr [edi],eax 
    6ffcb0ff 833f00 cmp dword ptr [edi],0 ; 第二次迭代, HeapFree and HeapAlloc都发生了.
    6ffcb102 0f8498010000 je dhcpcore!DecodeDomainSearchListData+0x1d4 
    6ffcb108 42 inc edx 
    6ffcb109 8955f4 mov dword ptr [ebp-0Ch],edx 
    6ffcb10c 83fa02 cmp edx,2 
    6ffcb10f 7533 jne dhcpcore!DecodeDomainSearchListData+0x78 
    6ffcb111 8b7508 mov esi,dword ptr [ebp+8] 
    6ffcb114 833e00 cmp dword ptr [esi],0 
    6ffcb117 7413 je dhcpcore!DecodeDomainSearchListData+0x60 
    6ffcb119 ff36 push dword ptr [esi] 
    6ffcb11b 6a00 push 0 
    6ffcb11d ff35580dff6f push dword ptr [dhcpcore!DhcpGlobalHeap] 
    6ffcb123 ff155c21ff6f call dword ptr [dhcpcore!_imp__HeapFree] 
    6ffcb129 832600 and dword ptr [esi],0 ; [ebx]是该函数的参数。 DNS名称的累积长度; 排除终止空字节.
    6ffcb12c ff33 push dword ptr [ebx] ; dwBytes (size) In malicious case ebx = 0 6ffcb12e 6a08 push 8 ; dwFlags 
    6ffcb130 ff35580dff6f push dword ptr [dhcpcore!DhcpGlobalHeap] ; hHeap 
    6ffcb136 ff155021ff6f call dword ptr [dhcpcore!_imp__HeapAlloc] ; HeapAlloc 0 bytes 6ffcb13c 8b55f4 mov edx,dword ptr [ebp-0Ch] 
    6ffcb13f 8bf0 mov esi,eax ; esi = buffer allocated.size不能为0
    6ffcb141 8b4df0 mov ecx,dword ptr [ebp-10h] 
    6ffcb144 8b4510 mov eax,dword ptr [ebp+10h] 
    6ffcb147 832300 and dword ptr [ebx],0 
    6ffcb14a 8365f800 and dword ptr [ebp-8],0 
    6ffcb14e 832000 and dword ptr [eax],0 
    6ffcb151 33c0 xor eax,eax 
    6ffcb153 8945ec mov dword ptr [ebp-14h],eax 
    6ffcb156 8845ff mov byte ptr [ebp-1],al 
    6ffcb159 85c9 test ecx,ecx 
    6ffcb15b 0f8419010000 je dhcpcore!DecodeDomainSearchListData+0x1ae ;内层循环开始
    6ffcb161 8b07 mov eax,dword ptr [edi] 
    6ffcb163 85c0 test eax,eax 
    6ffcb165 0f840c010000 je dhcpcore!DecodeDomainSearchListData+0x1ab 
    6ffcb16b 8365e800 and dword ptr [ebp-18h],0 
    6ffcb16f 8b4dec mov ecx,dword ptr [ebp-14h] 
    6ffcb172 8b5de4 mov ebx,dword ptr [ebp-1Ch] 
    6ffcb175 03d9 add ebx,ecx 
    6ffcb177 895de0 mov dword ptr [ebp-20h],ebx 
    6ffcb17a 8a1b mov bl,byte ptr [ebx] 
    6ffcb17c 885dfe mov byte ptr [ebp-2],bl 
    6ffcb17f 84db test bl,bl 
    6ffcb181 8b5d0c mov ebx,dword ptr [ebp+0Ch] ; 第一次迭代时跳转.
    6ffcb184 0f8492000000 je dhcpcore!DecodeDomainSearchListData+0x150
        6ffcb21c 807dff00 cmp byte ptr [ebp-1],0 
        6ffcb220 7605 jbe dhcpcore!DecodeDomainSearchListData+0x15b 
        6ffcb222 8b4510 mov eax,dword ptr [ebp+10h] 
        ..........
        6ffcb267 8b45ec mov eax,dword ptr [ebp-14h] 
        6ffcb26a 8b55f4 mov edx,dword ptr [ebp-0Ch] 
        6ffcb26d 3bc1 cmp eax,ecx ; 跳转到第一次迭代的内层循环的开始位置
        6ffcb26f 0f82ecfeffff jb dhcpcore!DecodeDomainSearchListData+0x95 
        ; 继续第二次迭代
        6ffcb275 eb03 jmp dhcpcore!DecodeDomainSearchListData+0x1ae 
        6ffcb277 8b45ec mov eax,dword ptr [ebp-14h] 
        6ffcb27a 8b55f4 mov edx,dword ptr [ebp-0Ch] 
        6ffcb27d 3bc1 cmp eax,ecx 
        6ffcb27f 7405 je dhcpcore!DecodeDomainSearchListData+0x1ba 
        6ffcb281 832700 and dword ptr [edi],0 
        6ffcb284 eb0c jmp dhcpcore!DecodeDomainSearchListData+0x1c6 
        6ffcb286 83fa02 cmp edx,2 
        6ffcb289 750a jne dhcpcore!DecodeDomainSearchListData+0x1c9 
        6ffcb28b 8b03 mov eax,dword ptr [ebx] ;发生越界写，程序可能不会在这里崩溃，因为单个字节被写入esi-1，这可能是一个有效的地址。
        6ffcb28d c64430ff00 mov byte ptr [eax+esi-1],0 
    6ffcb18a 8a55fe mov dl,byte ptr [ebp-2] 
    6ffcb18d 80fac0 cmp dl,0C0h
    ; dhcpcore!ClearDomainSearchOption:
    6ffcb025 8bff mov edi,edi 
    6ffcb027 55 push ebp 
    6ffcb028 8bec mov ebp,esp 
    6ffcb02a 51 push ecx 
    6ffcb02b 56 push esi 
    6ffcb02c 8bf1 mov esi,ecx 
    6ffcb02e 57 push edi 
    6ffcb02f 33ff xor edi,edi ;来自上述HeapAlloc的无效地址（esi） 
    6ffcb031 8b8624070000 mov eax,dword ptr [esi+724h] 
    6ffcb037 85c0 test eax,eax 
    6ffcb039 7414 je dhcpcore!ClearDomainSearchOption+0x2a 
    6ffcb03b 50 push eax 
    6ffcb03c 57 push edi 
    6ffcb03d ff35580dff6f push dword ptr [dhcpcore!DhcpGlobalHeap] ;在无效堆上释放导致svchost.exe进程崩溃
    6ffcb043 ff155c21ff6f call dword ptr [dhcpcore!_imp__HeapFree] 
    6ffcb049 89be24070000 mov dword ptr [esi+724h],edi
###  攻击场景分析
攻击者可以构造一个恶意的DHCP服务器，充分发挥该漏洞的作用需要进入到某一个网段内，然后监听网段内的DHCP请求，接收到请求之后就响应一个特制的恶意的DHCP响应数据，这样就可以造成存在漏洞的系统执行代码。
###  流量分析
首先client发起一个request：
然后，攻击者构建的恶意DHCP服务器响应一个恶意的ACK消息：
在响应包中可以明显看到触发漏洞的恶意数据。
## 检测思路
首先要监听UDP的67/68端口的流量。检测设备可以根据DHCP Magic Cookie值x63x82x53x63来判断是否为DHCP消息。
如果操作码为2，则检测设备必须解析每个DHCP选项，并检查option
tag设置为0x77的所有选项的选项数据。如果发现任何此类选项的选项数据以“x00x00”开头，则应将流量视为可疑的攻击流量。
## 总结
这个分析思路很清楚，基本上是一个漏洞响应的微缩过程，到最后给出解决方案，个人感觉比较成熟。最后的流量检测现在很多的防火墙都可以实现，从流量侧拦截攻击好过主机防御。
## 参考文献
[1] RFC 2131, Dynamic Host Configuration Protocol
[2] P. Mockapetris, RFC 1035: DOMAIN NAMES – IMPLEMENTATION AND SPECIFICATION,
[3] IANA, Dynamic Host Configuration Protocol (DHCP)and Bootstrap Protocol
(BOOTP) Parameters, 