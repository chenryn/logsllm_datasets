    exp += (p(0x310))
    exp += (p(0x25E ))
    exp += (p(0x327 ))
    exp += (p(0x346 ))
    exp += (p(0x3DC))
    exp += (p(0x34D ))
    exp += (p(0x364 ))
    exp += (p(0x373 ))
    exp += (p(0x38F))
    exp += (p(0x3A6))
    exp += (p(0x3B3))
    exp += (p(0x3BF))
    exp += (p(0x3D0))
    exp += (p(0x3DF))
    exp += (p(0x3EF))
    exp += (p(0x400))
    exp += (p(0x44B ))
    exp += (p(0x413))
    exp += (p(0x42C ))
    exp += (p(0x43B ))
    exp += (p(0x44F ))
    exp += (p(0x452 ))
    exp += (p(0x490))
    exp += (p(0x45F ))
    exp += (p(0x46C ))
    exp += (p(0x47D ))
    exp += (p(0x48E))
    exp += (p(0x497))
    exp += (p(0x49E))
    exp += (p(0x4B5))
    exp += (p(0x4CB))
    exp += (p(0x445 ))
    exp += (p(0x445 ))
    exp += (p(0x4D6))
    exp += (p(0x44D ))
    exp += (p(0x44D ))
    exp += (p(0x494))
    exp += (p(0x4E5))
    exp += (p(0x44f))
    print(exp)
    print(bytes.fromhex(hex(eval(exp))[2:]))
    ## print(table[0x110])
## Crypto
### xor
flag当key复用，首先3字符测试出长度为21，然后找到每个位置能够使得密文解密后全部可见并且e最多的可能字符，然后人工修正即可获得flag：
    a="ciMbOQxffx0GHQtSBB0QSQIORihXVQAUOUkHNgQLVAQcAVMAAAMCASFEGQYcVS8BNh8BGAoHFlMAABwCTSVQC2UdMQx5FkkGEQQAAVMAAQtHRCNLF0NSORscMkkaHABSExIYBQseUmBCFgtSKwEWfwELFRcGbzwEDABHVS8DDAcXfwUcMQwCDUUBCgYYSQEBATNKGwQeOkkbPhsYERYGDB0TYzwCUSVCDE8dKh0BNg4GAAkLSVMWHBpHQCxQF08AOhkWPh1OAA0XRQQRBQJKQyVKFghSMA95Gh8LGhEHBB8YEE4UViFaEQEVfwAdfx0GEUUWAAARGxpHTiFQERx4FkkROgUHERMXRTpUCANtYy9RFk8TLEkHNwxOFhcbAhsASR0STC1GCk8UMwYEOhsdfiEdRR0bHU4QSDRLHR0XO0kGMQ0LEgATERYQSQgORDJaWAsXMgYdfxsbGAB4LRYVGxpHUyFXHU8TMQ1TPRsLFREaDB0TSRoIASJGGR1SKwEWfwUBFQFSChVUHQYCASNWFQ0XLRocMgxkNgoAABd+PRkIKwkDEAoTLQ1TKwELVAgHFhoXRU4BUy9OWBsaOkkeMAYAVAQcAVMXCBwEQDNQci4HJwAfNggcDUUXHQcGDAMCASFGCxsaOh0aPAAdGUUQBBoASRoIASNCCBsHLQxTMgAdABx4IxoYBQcJRmBXEApSNgcHOgcdEUUeDBURRU4FVDQDGQMBMEkVNgUCHQsVRQccDE4XVDJGcjsaOhsWfwgcEUUTCQQVEB1HTCVOFx0bOhpTKwEcGxAVDRwBHU4TSSUDHQ4AKwF5FkkMEQkbAAURSSdHQC0pPAYXO0kSLEkaHABSFAYdDBpHQyVCDRsLfwYVfwgbABAfC1MYDA8RRDMpKwcXMQ5TNhpOGgoGRRAcCAEUDWBQFQAZOkkUOhoaARcXbzYCDABHVilPDE8TMxocfxsLAAQbCxYQSQwITyUDCB0dKg0fJkk/HQsVRTURBwlHTDVQGwMXVSYQPBwCAG8mDQERDGQuAShGGR1SMwYFOkVOPUUQAB8dDBgCASlNWAMdKQx5EwYYEUUbFlMVSR4ITiwDFwlSLB0BKg4JGAwcAlMWBRsCDCdRHQocfwgfOAgLfiQBRRcRGgELQDRGWAIbPBsccgsbBhYGRRwSSRkOTyQpOgMXOg0aMQ5OAA0ACgYTAU4KWGBVHQYcLGMqOggcB0UBERIAAAEJRCQDEQFSKwEWfwsLGAwXA3kyBhsVKwkDGgoeNgwFOkkaHAQGRRIYBU4EQC4DEAoTLWM2KQwAVAQcERoXAB4GVSUDHAYBPBsWKwxCVCxSCBYASRoPRGBMDAcXLUkHNwwHBkUdEh1+OgEKRGBAGQFSMQYHfw4cFRYCRQccDE4KTi1GFht4EwwVK0kaG0UGDRZULA8UVWBXF08VMEkkOhoaWEUGDRZUDQsGRWBODRwGfwccK0kcEREHFx1UHQFHTy9UEAoAOmMgOgxCVCxSEhYVG049QC4DPgMdKAwBLEkBGkUfHFMcDA8DDWBKFk8UKgUffwsCGwofRRIYBgAAATRLHU8FPhBTPgUCVBEaAFMDCBdtZzJGCRoXMR0fJkkDHRYBABdUGgEKRGwDGhoGfwgfLAZOEAAXFR8NSQMIVyVHWA0Lfx4aMQ1CVAMACgAARU4UTy9UWAAAfxsSNgdkMgwEAHkkGw8NTyEDKA4APgQaKwhCVBYdCh1UCB1HUi9MFk8TLGMfNg8LVAcXRRERCBsTSCZWFE8eNgIWfxobGQgXF1MSBQEQRDJQWA4cO0kXOggaHEUeDBgRSQ8SVTVOFk8eOggFOhpkNQkBClMXCBwCASFBFxoGfx4bPh1OHAQB"
    js=[0]*32
    c=a.decode("base64")
    for i in range(len(c)-4):
        try3=c[i:i+3]
        for j in range(i+1,len(c)-3):
            if c[j:j+3]==try3:
                print j-i
                for x in range(10,32):
                    if (j-i) % x==0:
                        js[x]+=1
    print js
    for i in range(32):
        print i,js[i]
    ###21
    already=[]
    for i in c:
        if i not in already:
            already.append(i)
    print len(already)
    import string
    from Crypto.Util.strxor import strxor
    def guess(position):
        possible=[]
        calc_e=[]
        for i in string.printable:
            js = 0
            all = 0
            tmp=""
            for j in range(position,len(c),21):
                if strxor(i,c[j]) in string.printable:
                    js+=1
                all+=1
                tmp+=strxor(i, c[j])
            if js==all:
                possible.append(i)
                jj=0
                for x in tmp:
                    if x =='e':
                        jj+=1
                calc_e.append(jj)
        return possible,calc_e
    for i in range(21):
        possible, calc_e = guess(i)
        for i in range(len(possible)):
            if calc_e[i]>=5:
                print possible[i],
        print
### xor?rsa
公钥长度为2048bit，随机生成消息m1，m1与一个40bit的随机数异或生成m2。这里m2和m1可以考虑为m1的高2008个bit经过填充获得，所以考虑使用`Coppersmith’s
Short Pad Attack`和 `Franklin-Reiter Related Message Attack`来恢复m1和m2。
​ 使用[脚本](http://inaz2.hatenablog.com/entry/2016/01/20/022936)
    # coppersmiths_short_pad_attack.sage
    def short_pad_attack(c1, c2, e, n):
        PRxy. = PolynomialRing(Zmod(n))
        PRx. = PolynomialRing(Zmod(n))
        PRZZ. = PolynomialRing(Zmod(n))
        g1 = x^e - c1
        g2 = (x+y)^e - c2
        q1 = g1.change_ring(PRZZ)
        q2 = g2.change_ring(PRZZ)
        h = q2.resultant(q1)
        h = h.univariate_polynomial()
        h = h.change_ring(PRx).subs(y=xn)
        h = h.monic()
        kbits = n.nbits()//(2*e*e)
        diff = h.small_roots(X=2^kbits, beta=0.5)[0]  # find root = n^0.5
        return diff
    def related_message_attack(c1, c2, diff, e, n):
        PRx. = PolynomialRing(Zmod(n))
        g1 = x^e - c1
        g2 = (x+diff)^e - c2
        def gcd(g1, g2):
            while g2:
                g1, g2 = g2, g1 % g2
            return g1.monic()
        return -gcd(g1, g2)[0]
    if __name__ == '__main__':
        print "aaa"
        n =
        c1 =
        c2 = 
        e = 5
        nbits = n.nbits()
        kbits = nbits//(2*e*e)
        print "upper %d bits (of %d bits) is same" % (nbits-kbits, nbits)
        # ^^ = bit-wise XOR
        # http://doc.sagemath.org/html/en/faq/faq-usage.html#how-do-i-use-the-bitwise-xor-operator-in-sage
        diff = short_pad_attack(c1, c2, e, n)
        print "difference of two messages is %d" % diff
        m1 = related_message_attack(c1, c2, diff, e, n)
        print 'hhhha'
        print m1
        print m1 + diff
## Misc
### Freq game
利用FFT求频域分量
    import numpy as np
    from pwn import *
    import json
    Fs=1500
    T=1.0/Fs
    L=1500
    t = np.linspace(0,1,L)
    p = remote('150.109.119.46',6775)
    log.info(p.recvuntil('this is a sample game'))
    log.info(p.recvuntil('hint:'))
    p.sendline('y')
    log.info(p.recvuntil('input your token:'))
    p.sendline('Ooh0jQajnHvoGq2lTlMt9tkT0EkellEa')
    for i in range(8):
        data=p.recvuntil(']')
        S=json.loads(data)
        Y=np.fft.fft(S)
        P2=np.abs(Y/L)
        P1=P2[0:(L/2+1)]
        res=[]
        for i in range(len(P1)):
            if P1[i]>3:
                res.append(str(i))
        print(res)
        p.send(' '.join(res))
    print(p.recv(1024))
### difficult programming language
获取 usb 数据:  
tshark -r difficult_programming_language.pcap -T fields -e usb.capdata -Y
'usb.capdata && usb.transfer_type == 0x01 && frame.len == 35 && !(usb.capdata
== 00:00:00:00:00:00:00:00)' >cap.txt
然后用如下脚本跑一下即可:
    #! /usr/bin/env python3
    #! -*- coding:utf-8 -*-    
    alphamap = {hex(i)[2:].zfill(2).upper() : [chr(i - 4 + ord('a')), chr(i - 4 + ord('A'))] for i in range(0x4, 0x4 + 26)}
    nummap = { "1E":["1", "!"], "1F":["2", "@"], "20":["3", "#"], "21":["4", "$"], "22":["5", "%"],
            "23":["6", "^"], "24":["7", "&"], "25":["8", "*"], "26":["9", "("], "27":["0", ")"]}
    othermap = { "1E":["1", "!"], "1F":["2", "@"], "20":["3", "#"], "21":["4", "$"], "22":["5", "%"],
            "23":["6", "^"], "24":["7", "&"], "25":["8", "*"], "26":["9", "("], "27":["0", ")"],
            "28":"", "29":"", "2A":"", "2B":"",
            "2C":" ",
            "2D":["-", "_ "], "2E":["=", "+"], "2F":["[","{"], "30":["]","}"], "31":["\\","|"],
            "32":"",
            "33":[";",":"], "34":["'",'"'], "35":["`","~"], "36":[",",""],
            "38":["/","?"] }
    usbmap = {**alphaidx, **numidx, **otheridx}
    rst = list()
    with open("cap.txt", "r") as _:
        for line in _.readlines():
            vals = line.split(":")
            ctrl, key = vals[0], vals[2].upper()
            if key == "00": continue
            if key in usbmap.keys():
                if int(ctrl) == 2 :
                    presskey = usbmap[key][1] if len(usbmap[key]) > 1 else ""
                else:
                    presskey = usbmap[key][0]
                rst.append(presskey)
            else:
                print(" => {:s}".format(key))
    print(''.join(rst[:-1]))
主要是控制字符也需要正确处理. 然后到  跑一下就行了
## blockchain
### ez2win
开始说要逆向，我连看都没看，后来给了源码，就是2分钟的事情了==  
审计，发现存在如下函数
    function _transfer(address from, address to, uint256 value) {
        require(value <= _balances[from]);
        require(to != address(0));
        require(value <= 10000000);
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
      }
可以未授权直接运行，而合约创建者有：
    uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals));
这么多的token，直接trasfer到我的账户上，然后payforflag就行了