expressions are JITed. Scalar value accesses, function calls, boolean  
expressions, aggregate references.  
This can be enabled using the new jit_expressions GUC.  
Even for the supported expression types I've taken some shortcuts  
(e.g. strict functions aren't actually strict).  
The performance benefits are quite noticeable. For TPCH ExecEvalExpr()  
(which is where 0008 moved all of expression evaluation/projection) goes  
from being the top profile entry, to barely noticeable, with the JITed  
function usually not showing up in the top five entries anymore.  
After the patch it becomes very clear that our function call  
infrastructure is a serious bottlenecks. Passing all the arguments via  
memory, and, even worse, forcing isnull/values to be on separate  
cachelines, has significant performance implications.  It also becomes  
quite noticeable that nodeAgg's transition function invocation doesn't  
go through ExecEvalExpr() but does that itself - which leads to constant  
mispredictions if several transition values exist.  
While the JIT code is relatively verbose, it turns out to not actually  
be that hard to write after some startup pains. All the JITing of  
expressions that exists so far was basically written in ~10 hours.  
This also needs some heuristics about when JITing is  
appropriate. Compiling an expression that's only executed once is never  
going to be faster than doing the interpretation (it at least needs a  
writable allocation for the code, and then a remap to make that code  
read-only and executable).  A trace based approach (everything executed  
at least a thousand times) or cost based (all queries costing more than  
100000 should be JITed) could make sense.  
It's worthwhile to note that at the moment this is a per-query-execution  
JIT, not something that can trivially be cached for prepared  
statements. That'll need further infrastructure.  
0015  Super-Heavily-WIP: LLVM perf integration.  
This very very very preliminary patch (including some copy-pasted GPL  
code!) creates /proc/perf-.map files, which allows perf to show  
useful symbols for profile hits to JIT expressions.  I plan to push this  
towards LLVM, so this isn't something PG will have to do, but it's  
helpful for evaluation.  
I eventually plan to start separate threads about some of the parts in  
here, but I think the overal picture needs some discussion first.  
Q: Why LLVM and not a hand-rolled JIT?  
A: Because hand-rolling a JIT is probably hard to scale to multiple  
   maintainers, and multiple platforms. I started down the path of doing  
   a hand-rolled x86 JIT, and that'd also be doable (faster compilation,  
   slower execution basically); but I doubt we'd end up having that on  
   different architectures on platforms. Not to speak of things like  
   proper debugger and profiler integration.  I'm not entirely convinced  
   that that's the right path. It might also be a transitional step,  
   towards doing our completely own JIT. But I think it's a sensible  
   step.  
Q: Why LLVM and not $jit-toolkit  
A: Because all the other JIT stuff I looked at was either really  
   unportable (mostly x86 linux only), inconveniently licensed (like  
   e.g. gcc's jit library) or nearly unmaintained (luajit's stuff for  
   example).  I might have missed something, but ISTM that atm the  
   choice is between hand-rolling and using LLVM.  
Q: Does this actually inline functions from the backend?  
A: No. That probably is something desirable in the future, but to me  
   that seems like it should be a separate step. The current one's big  
   enough. It's also further increases compilation times, so quite  
   possibly we only want to do so based on another set of heuristics.  
Q: ?  
Comments? Questions?  
Regards,  
Andres  
[1] https://archives.postgresql.org/message-id/20161030073655.rfa6nvbyk4w2kkpk%40alap3.anarazel.de  
[2] https://www.postgresql.org/message-id/PI:EMAIL  
```            
这个patch的讨论，详见邮件组，本文末尾URL。  
PostgreSQL社区的作风非常严谨，一个patch可能在邮件组中讨论几个月甚至几年，根据大家的意见反复的修正，patch合并到master已经非常成熟，所以PostgreSQL的稳定性也是远近闻名的。  
## 参考            
https://commitfest.postgresql.org/13/1061/  
https://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=b8d7f053c5c2bf2a7e8734fe3327f6a8bc711755  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=2f0903ea196503fc8af373a9de46b1e01a23508c  
[《分析加速引擎黑科技 - LLVM、列存、多核并行、算子复用 大联姻 - 一起来开启PostgreSQL的百宝箱》](../201612/20161216_01.md)  
[《PostgreSQL 向量化执行插件(瓦片式实现) 10x提速OLAP》](../201702/20170225_01.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")