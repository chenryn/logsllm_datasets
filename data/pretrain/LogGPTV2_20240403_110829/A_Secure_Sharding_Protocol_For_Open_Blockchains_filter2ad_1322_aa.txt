title:A Secure Sharding Protocol For Open Blockchains
author:Loi Luu and
Viswesh Narayanan and
Chaodong Zheng and
Kunal Baweja and
Seth Gilbert and
Prateek Saxena
A Secure Sharding Protocol For Open Blockchains
Loi Luu
National University of Singapore
PI:EMAIL
Viswesh Narayanan
National University of Singapore
PI:EMAIL
Chaodong Zheng
National University of Singapore
PI:EMAIL
Kunal Baweja
National University of Singapore
PI:EMAIL
Seth Gilbert
National University of Singapore
PI:EMAIL
Prateek Saxena
National University of Singapore
PI:EMAIL
ABSTRACT
Cryptocurrencies, such as Bitcoin and 250 similar alt-coins, em-
body at their core a blockchain protocol — a mechanism for a dis-
tributed network of computational nodes to periodically agree on
a set of new transactions. Designing a secure blockchain protocol
relies on an open challenge in security, that of designing a highly-
scalable agreement protocol open to manipulation by byzantine or
arbitrarily malicious nodes. Bitcoin’s blockchain agreement proto-
col exhibits security, but does not scale: it processes 3–7 transac-
tions per second at present, irrespective of the available computa-
tion capacity at hand.
In this paper, we propose a new distributed agreement proto-
col for permission-less blockchains called ELASTICO. ELASTICO
scales transaction rates almost linearly with available computation
for mining: the more the computation power in the network, the
higher the number of transaction blocks selected per unit time.
ELASTICO is efﬁcient in its network messages and tolerates byzan-
tine adversaries of up to one-fourth of the total computational power.
Technically, ELASTICO uniformly partitions or parallelizes the min-
ing network (securely) into smaller committees, each of which pro-
cesses a disjoint set of transactions (or “shards”). While sharding
is common in non-byzantine settings, ELASTICO is the ﬁrst candi-
date for a secure sharding protocol with presence of byzantine ad-
versaries. Our scalability experiments on Amazon EC2 with up to
1, 600 nodes conﬁrm ELASTICO’s theoretical scaling properties.
1.
INTRODUCTION
A blockchain is an append-only distributed database that stores
a time-ordered set of facts, also known as transactions. Trans-
actions are grouped into batches or “blocks” and form a crypto-
graphic hash-chain, hence the name blockchain. In 2009, Bitcoin
introduced the ﬁrst blockchain protocol called Nakamoto consen-
sus which underlies over 250 cryptocurrencies [1]. The blockchain
protocol maintains the distributed database in a decentralized net-
work, thus aiming to solve what we call as the blockchain agree-
ment problem. Conceptually, the problem is to allow an arbitrary
large network of several processors to agree on the blockchain state
(identiﬁed by its cryptographic digest), under the assumption that
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
© 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978389
the fraction of malicious processors is bounded by f (0 ≤ f < 1).
Processors have no inherent identities, nor is there any trusted PKI
infrastructure to establish identities for processors. Each processor
can choose a set (e.g., block) of transactions it wishes to commit to
the blockchain; the goal of the protocol is to ensure that all honest
processors agree on one set of transactions at the end of the proto-
col. The commit set is appended as a new block to the blockchain.
At a high level, the blockchain protocol in Bitcoin randomly
selects one processor per epoch (say 10 minutes) which issues a
proposal that everyone adopts, thus requiring only a single broad-
cast to reach agreement [1]. There may be temporary disagree-
ment if two proposals occur at the same time; eventually, with very
high probability, one proposal will be established by picking the
longest blockchain. Nakamoto consensus uses a proof-of-work
(PoW) mechanism to probabilistically elect the leader, ensuring
a fair choice of leaders.
In terms of scale, Bitcoin employs bil-
lions of CPUs worth of computational power today (by observable
hashrates [2]), and is one of the largest completely decentralized
systems of such scale.
Unfortunately, Bitcoin’s transaction throughput does not scale
well. The Bitcoin network consumes massive computational power
and presently processes up to 7 transactions per second [3]. Other
centralized ﬁat payment processing systems, like MasterCard or
Visa are reported to processing 1, 200 to 56, 000 transactions per
second [4, 5]. The demand from practical applications is 3 to 4
orders of magnitude higher. Modiﬁcation to scale up existing pro-
tocol is a raging debate in the Bitcoin community [6–9]. Recent
work shows that these proposals have fundamental scalability lim-
its [10].
On the other hand, solutions which use classical Byzantine con-
sensus protocols [11–14] do not work in an open environment like
cryptocurrencies because of two fundamental challenges. First,
many of these papers assume that the network nodes have pre-
established identities or public-key infrastructure in place, which
does not exist in open environments like Bitcoin. Second, prac-
tical byzantine consensus protocols such as PBFT [13] require at
least a quadratic number of messages in the number of participants,
thus they are bandwidth-limited — more network identities leads
to worse performance. Network bandwidth limits the transaction
throughputs for a network of even a few hundred nodes severely.
This raises a fundamental question — are there any blockchain pro-
tocols that scale throughput linearly with the increase in the size of
the network?
Problem & Approach. Our goal is to seek a protocol for the
open, permissionless network wherein participating processors have
no pre-established identities, and where the transaction throughput
scales. We provide a new blockchain protocol called ELASTICO,
which achieves a sweet spot between classical byzantine consensus
and Nakamoto consensus protocols. The key idea in our approach
is to partition the network into smaller committees, each of which
processes a disjoint set of transactions (or a “shard"). Speciﬁcally,
the number of committees grows near linearly in the total com-
putational power of the network. Each committee has a reasonably
small number of members so they can run a classical byzantine con-
sensus protocol to decide their agreed set of transactions in paral-
lel. Sharding protocols are commonly used in distributed databases
and in cloud infrastructure, wherein certain network infrastructure
can be trusted (e.g., see the commonly used two-phase commit
protocol) or where the goal is to tolerate crash (non-byzantine)
failures [15–17]. Note that several commercial and open-source
blockchains do not target the permissionless (open) setting, and as a
result, promise to scale by relying on trusted infrastructure [18–20]
or by using federated identities [21, 22] (see Section 6). To our
knowledge, we provide the ﬁrst sharding protocol for permission-
less blockchains tolerating a constant fraction of byzantine network
nodes. This is a well-recognized open problem [10]. Our protocol
makes the same assumptions as those implied in Bitcoin and other
cryptocurrencies, and we provide security proofs for key invariants
in our protocol.
Results. Without loss of generality, we assume that the net-
work contains n processors which have equivalent computational
power. ELASTICO exhibits almost linear scalability with computa-
tion capacity and does not require quadratic number of messages
as the network grows. ELASTICO tolerates up to f < n/4 adaptive
byzantine adversaries, where f and n are bounds on the adversar-
ial and total computational power respectively. 1 The protocol can
support the same blockchain data structure format (a hash-chain) as
Bitcoin; but, for further scalability, we propose a modiﬁcation that
permits better efﬁciency parameters.
From an efﬁciency perspective, our protocol shards the network
into an almost linear number of committees that scales with com-
putation capacity. Within each committee of size c (a few hundred)
identities, we run a secure consensus protocol which has message
complexity of O(c2) (best case) to O(c3) (worst case). Overall,
this yields a message complexity of at most O(nc3), where mes-
sages are of constant size.
We implement ELASTICO based on the most popular client for
Bitcoin [23]. Our implementation adds roughly 5, 000 C++ LoCs
on top of Bitcoin. The throughput of our prototype scales near lin-
early with respect to available computation i.e., O(n/ log log(n)),
when runs on our network simulation. With the same network im-
plementation as in Bitcoin, the scale up (blocks per epoch) for 100,
200, 400, 800 and 1, 600 nodes with equal computational power 2
are as theoretical expectation, namely 1, 1.89, 3.61, 6.98 and 13.5
times respectively. Finally, ELASTICO’s clean-slate design decou-
ples the consensus from block-data broadcasts, hence the band-
width spent by each node remains almost constant, regardless of the
size of the network. Our simulations are necessarily on a smaller
scale than Bitcoin; however, if we project our results to a full de-
ployment to a network of Bitcoin’s scale, we can expect a scale up
of 10, 000 in the number of agreed values per epoch. This agree-
ment throughput is 4 orders of magnitude larger than Bitcoin’s.
Contributions. We claim the following contributions.
• To our knowledge, ELASTICO is the ﬁrst secure candidate
for a sharding protocol for open blockchains that tolerates
byzantine adversaries. ELASTICO increases the blockchain’s
1Here, 1/4 is an arbitrary constant bounded away from 1/3, se-
lected as such to yield reasonable constant parameters.
2each node is one Amazon EC2 vCPU
transaction throughput almost linearly with the computational
power of the network.
• Our experiments on an idealized network simulation on Ama-
zon EC2, ranging up to 1, 600 network nodes, conﬁrm a near
linear scalability for ELASTICO.
2. PROBLEM & CHALLENGES
2.1 Problem Deﬁnition
We formalize the problem of designing a secure sharding proto-
col for blockchains as follows. Let there be n identity-less proces-
sors having the same computational power, a fraction f of which
are controlled by a byzantine adversary. The network accepts trans-
actions per block, a transaction i in block j is represented by an
i ∈ ZN . All processors have access to an externally-
integer xj
speciﬁed constraint function C : ZN (cid:55)→ {0, 1} to determine the
validity of each transaction. We seek a protocol Π run between
the processors which outputs a set X which contains k separate
“shards” or subsets Xi = {xj
i} (1 ≤ j ≤ |Xi|) such that the
following conditions hold:
• Agreement. Honest processors agree on X with a probability
of at least 1 − 2−λ, for a given security parameter λ.
• Validity. The agreed shard X satisﬁes the speciﬁed constraint
function C, i.e., ∀i ∈ {1..k},∀xj
i ∈ Xi,C(xj
i ) = 1.
• Scalability. The value of k grows near linearly with the size
of the network (or n).
• Efﬁciency. The computation and bandwidth used per proces-
sor stays constant regardless of n and k.
Our goal is to split the network into multiple committees, each
processes a separate set of transactions (e.g., Xi) called a shard.
The number of shards (k) grows near linearly on the size of the
network. The efﬁciency property represents the sharding advantage,
where the cost is localized within a committee. Once the network
agrees on the set X, it can create a cryptographic digest of X and
form a hash-chain with previous agreed sets in the previous runs of
Π. This serves as a distributed ledger of facts or transactions.
We point out that the agreement property in our problem is a re-
laxation of the original byzantine consensus problem [11, 12]. The
ﬁrst signiﬁcant distinction is the deﬁnition of “agreement.” Here,
we allow the honest processors to be in “probabilistic agreement”
such that processors agree on a value with some high probability,
rather than be in exact agreement. The second distinction is that the
agreed value can be the input of any processor, honest or byzantine.
The classical deﬁnition requires that the agreed value also be the
inputs of honest processors. In the blockchain problem, validity
can be checked externally — each honest processor can check if
the agreed value satisﬁes an externally-speciﬁed constraint C, and
accept a solution only if so.
Remark. Notice that this problem does not directly guarantee a
double spending check (a problem in cryptocurrency [1]), but im-
plementing such a check is possible given the agreement on the
transaction set which satisﬁes the constraints speciﬁed in C. In Ap-
pendix 10.2, we describe how one might build a new cryptocur-
rency like Bitcoin based on ELASTICO with all validity checks.
Threat Model. We consider the threat model of a static, round-
adaptive adversary. Processors controlled by the byzantine adver-
sary can be arbitrarily malicious, e.g., deviate from the protocol,
and/or drop messages from other processors. All malicious proces-
sors can collude together. Further, we consider a round-adaptive
adversary, which can select which processors to corrupt at the start
of each run Π. The adversary has complete access to the outputs of
all previous i−1 runs to make its choices. However, once a protocol
run begins, the choices of compromised processors are ﬁxed. The
processors can setup point-to-point communication links between
them, and the adversary has full information about the messages
transmitted on all links.
Security Assumptions. We make two assumptions about the
underlying network overlay layer as in Bitcoin. Explicitly, (a) the
network graph between honest processors is connected and (b) the
communication channel between honest processors is synchronous,
i.e., once an honest user broadcasts any message, other honest pro-
cessors will receive it within a known bounded delay of δt seconds.
Note that such timing and connectivity assumptions are implicit
and necessary even in Bitcoin; otherwise, byzantine nodes can de-
lay blocks signiﬁcantly (simulating a gain in computation power)
or worse — a fraction of the network can be “eclipsed” by the ad-
versary. Attacks targeting our assumptions will apply to Bitcoin
too. However, such assumptions can be achieved with the right de-
sign of the underlying network topology [24, 25] — an orthogonal
problem of active research. On the other hand, we do not make any
assumption about a secure broadcast channel or a PKI system or
access to external source of randomness. That means, in our threat
model, the malicious processors can drop or modify messages, send
different messages to honest processors. We show in Section 4 that
the most that an adversary can do is to delay our consensus process.
Further, we assume that we know the upper bounds on the true
computation power n (say in Gigahash/sec), and that f is less than
1/4. Estimating such a bound is feasible from observing network
hashrates, as in Bitcoin, with the caveat that adversaries can pre-
tend to control f much lower than they actually do (just as in Bit-
coin today). For this work, we assume such information is exter-
nally available. We further assume that nodes are reliable during
protocol runs, and failed nodes are counted in the f malicious frac-
tion. Second, we assume that the total computation power of the
byzantine adversaries is still conﬁned to standard cryptographic as-
sumptions of probabilistic polynomial-time adversaries. Lastly, we
assume there exists a random oracle H : {0, 1}∗ (cid:55)→ {0, 1}γ which
outputs γ random bits given any input string.
2.2 Challenges
Sharding in a permission-less blockchain with the presence of
byzantine adversary is a well-recognized open problem [10] due
to many challenges. First, processors have no inherent identities
or external PKI to trust. A malicious processor can thus simulate
many virtual processors, thereby creating a large set of sybils [26,
27]. Thus, the protocol must prescribe some mechanism to allow
processors to establish their identities, yet limiting the number of
sybil identities created by malicious processors.
Once identities are established, the next challenge is to run a
sharding protocol among the identities with a fraction f of them
are byzantine. Our goal is to uniformly split all identities into sev-
eral committees with a condition that each committee has the ma-
jority as honest with high probability. Such a protocol becomes
straight-forward if one assumes a shared random coin to do the
sharding properly [15–17]. However, achieving a good random-
ness in a distributed network is a known hard problem. The best
solution to date can only tolerate up to 1/6 fraction of malicious,
with excessive message complexity [28]. Our protocol makes no
such assumption.