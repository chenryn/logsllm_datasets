tect their communication, such as TLS in AirDrop or the
custom encryption described in Section 4.1.4, which all re-
quire one or more secret inputs, such as private keys, certiﬁ-
cates, or tokens. Our toolkit provides a way to automatically
identify and extract these inputs to facilitate building custom
prototypes and, thus, automating the method described in Sec-
tion 3.5.3. The tool is based on the FRIDA framework [38]
to inject code into the Security framework to log secrets any
time a speciﬁc process accesses the keychain.
3922    30th USENIX Security Symposium
USENIX Association
4 Continuity Protocols
In this section, we present the protocols involved in offering
three Continuity services, i. e., Handoff (HO) and Universal
Clipboard (UC) in Section 4.1, and Wi-Fi Password Sharing
(PWS) in Section 4.2. In particular, we present the oper-
ational details of the protocols that we gathered using the
methodology in Section 3.
4.1 Handoff and Universal Clipboard
We analyze the protocols involved in the HO and UC ser-
vices. HO allows a user to continue their current activity in
an application on another of their Apple devices. UC allows a
user to copy clipboard content (e. g., text) on one device and
(seamlessly) paste it on another. For HO or UC, all involved
devices have to be logged into the same iCloud account and
have Bluetooth and Wi-Fi turned on. We have found that
HO’s and UC’s protocols are identical. In the following, we
present the service requirements and the protocols involved
in the different phases: (1) the discovery phase using BLE
advertisements (Section 4.1.2) and mDNS-over-AWDL (Sec-
tion 4.1.3), (2) the authentication phase for deriving a session
key (Section 4.1.4), and (3) the payload transfer phase that
transports the application data (Section 4.1.5). We provide an
overview of the entire protocol stack in Fig. 4. In this paper,
we discuss the core components of the protocols. The full
speciﬁcation is included in [22].
4.1.1 Requirements
Apple designed HO and UC to work between devices of the
same user, i. e., devices that are signed in to the same Apple
account. We have found that the iCloud keychain synchro-
nizes the long-term device-speciﬁc public keys PL that can be
found under the name RPIdentity-SameAccountDevice. These
keys are used for an authenticated session key exchange, as
shown in Section 4.1.4.
4.1.2 Discovery with BLE
Both HO and UC announce user activities, such as a clip-
board copy event, on the host system via BLE advertisements.
Receiving devices use the embedded information to, for ex-
ample, display the icon of the active HO-enabled app in the
Figure 2: iPad dock showing a Handoff icon on the right.
0
1
2
3
4
5
TLV type
0x0c
TLV length
0x0e
Status A
IV
Auth tag
0x00
Activity type (hash)
Status B Unused
Figure 3: Handoff and Universal Clipboard BLE advertise-
ment payload. Encrypted content is shown in grey.
LSB Meaning
1
2
3
4
5
6
Activity has URL option key
Activity contains ﬁle provider URL key
Activity contains Cloud Docs key
Clipboard data available
Clipboard version bit
Activity auto pull on receivers key
In A In B







Table 2: Deﬁnition of individual status ﬂag bits and whether
they are included in status byte A or B (Fig. 3).
system dock, as shown in Fig. 2. A click on the icon (HO) or
a paste event (UC) triggers the rest of the protocol stack.
The BLE advertisement uses Apple’s custom frame struc-
ture that has already been described [34] and makes use of
manufacturer data to add custom ﬁelds. The ﬁelds are en-
coded as TLV8 structures7 such that a single frame can in-
clude multiple ﬁelds. Apple uses different ﬁeld types for its
Continuity services. Figure 3 shows the payload of an HO
and UC advertisement with type 0x0c. It contains a plaintext
status ﬂag, an IV, an authentication tag, followed by an en-
crypted payload (shown in grey). Apple uses AES-GCM for
encryption and authentication with dedicated BLE encryption
key KBLE. For every new advertisement, i. e., new HO or
UC activity, the initialization vector (IV) is incremented by
one. Upon depleting its IV space (216), a device triggers a re-
keying protocol via the companion link service (Section 4.1.4)
to re-new KBLE. The re-keying protocol uses the long-term
key PL for authentication.
The encrypted payload primarily contains an activity type
and other status ﬂags. The activity type indicates the appli-
cation or activity that was triggered and is encoded as a trun-
cated SHA-512 hash of an application-speciﬁc string, such
as com . apple . notes . activity . edit - note for Apple’s
Note app. Unsupported application activities are ignored.
The status B ﬂags are similar to the cleartext status A. Martin
et al. [34] discovered that status A is set to 0x08 after the
user has copied data on their device. Apparently, Apple has
deprecated status A in favor of status B. We found that status
B can encode more information, as shown in Table 2. We
assume that status A was part of an earlier protocol version,
and Apple has kept it for backward compatibility but started
7TLV8 is a type-length-value (TLV) structure where the length ﬁeld has a
length of 8 bits (1 byte).
USENIX Association
30th USENIX Security Symposium    3923
to encrypt new ﬁelds that include more sensitive information
(activity type).
To facilitate dynamic analysis of the advertisements, we
implemented a macOS application that decrypts and parses
all advertisements sent by devices linked to the user’s iCloud
account (see “Availability” section).
4.1.3 Discovery with mDNS-over-AWDL
The device that broadcasts BLE advertisements can be de-
picted as a server that can respond to requests from a client
device. Upon engaging in an activity, the client device that
received the server’s BLE advertisement enables its AWDL to
start service discovery via mDNS and DNS service discovery
(DNS-SD), also known as Bonjour.
is
The
queried
called
type
service
_companion-link._tcp.local.
The DNS responses
from the server device include an instance name in the pointer
(PTR) record, its hostname in the service (SRV) record, IPv6
address (AAAA), and a text (TXT) record. It is noteworthy
that Apple implements hostname randomization (similar to
medium access control (MAC) address randomization) for
the SRV records transmitted via AWDL.
The TXT record is typically used to transfer additional
information about the service. The HO TXT record contains
the information shown in the following example:
rpBA=2 E :6 D: C1 : B7 :08:1 F ,
rpFl=0 x800 ,
rpAD=88 d428438a3b ,
rpVr=192.1
We found that the values rpBA and rpAD are used to identify
if both devices are linked to the same iCloud account and
ﬁlter out potentially other devices that might respond via the
open AWDL interface. In particular, we found that rpBA (en-
coded as a MAC address string) is chosen at random and
changes at least every 17 minutes. rpAD is an authentication
tag generated from the random rpBA and the device’s Blue-
tooth Identity Resolving Key (IRK) (used to resolve random
BLE addresses [15]) as arguments for a SipHash function [10].
Since the IRKs are synced via the iCloud keychain, devices
logged into the same iCloud account can try all available IRK
in the keychain to ﬁnd other devices.
4.1.4 Authentication via Pair–Verify
The companion link service, used for HO and UC, implements
an authenticated Elliptic-curve Difﬁe–Hellman (ECDH) key
exchange using the long-term keys PL for mutual authenti-
cation. The new session key is used to encrypt follow-up
messages. The so-called Pair–Verify protocol is based on
Apple’s Homekit Accessory Protocol (HAP) protocol [6].
The handshake is depicted in Fig. 4. It mainly performs
ECDH [28] to exchange a session key K with the ephemeral
key pairs (Ps,Ss) and (Pc,Sc). The public keys Ps and Pc are
Client
Server
Handoff BLE advertisement
see Fig. 3
AWDL synchronization
DNS-SD query over mDNS
companion-link
DNS-SD query answer
PTR, SRV, TXT, AAAA
Sending BLE adver-
tisements
Announce companion-
link service over local
network
Pair–Verify Start Request (M1)
Public key (Pc)
Pair–Verify Start Response (M2)
Public key (Ps), encrypted signature (es),
Pair–Verify Start Finish Request (M3)
encrypted signature (es)
Pair–Verify Start Finish Response (M4)
(Ps,Ss) ← Curve25519
K = ECDH(Pc,Ss)
σs = sign(Ps + Pc,SL
s )
es = enc(σs,K)
σc = dec(ec,K)
veri f y(σc,PL
c )
1. DISCOVERY
Receive ad-
vertisement
Search for server de-
vice in local network
2. AUTHEN-
TICATION
(Pc,Sc) ← Curve25519
K = ECDH(Ps,Sc)
σs = dec(es,K)
veri f y(σs,PL
s )
σc = sign(Pc + Ps)
ec = enc(σc,K)
3. PAYLOAD
TRANSFER
System Info Request (P1)
Own system info
System Info Response (P2)
Payload Request (P3)
Payload Response (P4)
System information
is requested at ﬁrst
HO data depending
on application
Application gets
direct socket access
4. (OPTIONAL)
LONG PAYLOAD
TRANSFER
TLS Handshake
Application-dependent payload
Figure 4: Handoff and Universal Clipboard protocol overview.
s ,SL
authenticated using Ed25519 [14] signatures that use the long-
c ,SL
term server (s) and client (c) key pairs (PL
s ) and (PL
c )
for generation and veriﬁcation. The veriﬁcation keys PL
s and
PL
c are synchronized using the iCloud keychain. Then, both
devices derive the server and client keys Ks and Kc from the
new session key K by using HKDF [27]. The keys are used
to protect the follow-up payload transfer with the ChaCha20-
Poly1305 cipher [37]. In Section 4.2, we elaborate on the
protocol, including an extension that allows authentication
between devices that do not have a pre-shared key PL.
The message format consists of a TLV248 encoding that, in
turn, contains an OPACK dictionary with a single value under
the key _pd. The value contains TLV8 structures that encode
the individual ﬁelds used for the key exchange. OPACK is a
proprietary undocumented serialization format, and we pub-
lish its speciﬁcation together with a sample implementation
in Python (see “Availability” section).
4.1.5 Payload Transfer
To transfer the actual application payload, i. e., clipboard
content (UC) or user activity (HO), the companion link service
implements another four-way communication protocol that is
protected by ChaCha20-Poly1305 [37] using the Ks and Kc
keys from the authentication protocol.
The protocol ﬁrst exchanges the devices’ system informa-
tion (P1 and P2 in Fig. 4) that includes the device model,
e. g., MacBook11,5, the device name, and several ﬂags. After-
8TLV structure with a 24-bit (3-byte) length ﬁeld.
3924    30th USENIX Security Symposium
USENIX Association
Grantor
Client
Requestor
Server
1. DISCOVERY
Compares hashes
to own SSIDs and
contacts.
2. INIT
Exchange 4 byte ses-
sion ID and version
string, both, currently,
not used.
3. AUTHEN-
TICATION
A shared secret is de-
rived with Curve25519.
The secret is used