### Simplification and Trade-Offs in Security Models

The simplification of security models often involves a trade-off with other aspects, such as flexibility and granularity in policy specification and enforcement. Our work focuses on mitigating the adverse effects of these simplifications.

### J2ME vs. J2SE Execution Environments

In J2SE, code runs within the Java Virtual Machine (JVM). In contrast, J2ME applications, which are designed for constrained mobile devices, run within the KVMâ€”a scaled-down version of the JVM. The KVM operates on top of the Connected Limited Device Configuration (CLDC) and Mobile Information Device Profile (MIDP), as illustrated in Figure 1(a).

The sandbox model in KVM is significantly different from that in JVM:
- It restricts the exposed API to those predefined by CLDC.
- Application management occurs at the native code level.
- Users are not allowed to interact with the classloader or download any native libraries.

### MIDP Security Model

MIDP retains the domain-based security model of J2SE, but with some key differences:
- Permissions in MIDP protection domains are classified into two groups:
  - **ALLOWed permissions** are granted automatically without user confirmation.
  - **USER permissions** require explicit user approval and can have varying validity periods: single permission request (one-shot), application session-wide (session), or until explicit revocation (blanket).

### Trust Model in J2ME

The trust model in J2ME is based on verifying the origin and integrity of a MIDlet using an associated certificate. If the certificate is known and verifiable against a trusted authority, the MIDlet is considered trusted. Otherwise, it is untrusted, and the user must explicitly confirm every sensitive operation. Figure 2(a) illustrates the process of signing and assigning a MIDlet to a protection domain based on the trusted certificate.

Typically, the default (unmodifiable) policy in MIDP includes:
- **Trusted protection domain**: For trusted MIDlets.
- **Untrusted protection domain**: For untrusted MIDlets.

Figure 2(b) shows the mapping of specific applications to their assigned protection domains and associated security permissions. For example, untrusted MIDlets like "Stock App" and "Automotive" are allowed to execute, while a trusted MIDlet like "Game" is granted additional permissions such as HTTP access, sending SMSs, and accessing the contact list.

### Limitations of J2ME

The main limitations of J2ME compared to J2SE, which motivate our work, include:
- **Fixed security policy**: Users cannot modify the security policy, leading to predetermined permission and domain sets.
- **No per-application policy**: There is no ability to specify policies for individual applications.
- **Fixed SecurityManager**: The SecurityManager is fixed and cannot be replaced by the user.

Despite different implementations by various vendors (e.g., Sun, IBM) and for different operating systems (e.g., Symbian, Palm, Windows, WinCE, Linux, Solaris), all J2ME implementations follow the security architecture specifications defined in JSR118 [15]. JSR 248, the Mobile Service Architecture Specification [16], defines the set of permissions supported and enforced in Java, categorized into different function groups (e.g., Phone Call, Call Control, Net Access, Messaging, Local Connectivity).

### Operational Aspects of J2ME Security Model

The original J2ME security architecture involves several modules in the process of making resource access decisions, as shown in Figure 3(a):
- **Access requests**: Triggered when applications invoke resource-related library calls.
- **Security architecture**: Ensures that applications cannot bypass JVM/KVM libraries and directly access native calls.
- **SecurityToken module**: Checks if the requesting MIDlet's domain (as specified in the `policy.txt` file) includes the required permission. If the permission is ALLOWed, access is granted. If it is USER, the user is prompted. If nothing is specified, access is denied, and a `SecurityException` is thrown.

### Extended J2ME Architecture

To address the constraints of the J2ME security model, we propose extensions to the architecture that enable fine-grained, history-aware, user-definable, per-application policy specification and enforcement. These modifications include:
- **Run-time Monitor**: Manages resource access decisions.
- **Policy Manager**: Identifies and manages both system-wide and MIDlet-specific policies.
- **History Keeper**: Maintains a secure history of relevant system and application behavior.

Figure 3(b) depicts the new J2ME architecture incorporating these modifications. The Run-time Monitor evaluates policy conditions in conjunction with historical data to grant or deny access. Each MIDlet is associated with a specific policy, and users can set desired policies through a graphical interface.

### Policy Specification Using SPL

To express the policies in our model, we use the Security Policy Language (SPL) [17], which is event-driven, constraint-based, and declarative. SPL supports access-control, history-based, and obligation-based policies and allows for policy prioritization.

#### Basic SPL Rules

SPL policies consist of individual rules, each representing a three-valued logic expression (allow, deny, or not apply). The basic form of an SPL rule is:
```spl
[label:] domain-expression :: decide-expression
```
- **Label**: Optional identifier for the rule.
- **Domain-expression**: Determines the domain of applicability.
- **Decide-expression**: Determines the acceptability of the event.

Examples of SPL rules:
```spl
sms_number_limit: ce.target.permission = "SMS" :: global_state.total_sms_sent < sms_number_limit;
sms_black_list: ce.target.permission = "SMS" :: ce.target.number = "+396427334";
sms_cost_limit: ce.target.permission = "SMS" :: global_state.total_sms_cost < sms_cost_limit + sms_cost;
```

#### SPL Policies and Rule Restriction

An SPL policy is a group of rules governing a particular domain of events. For example, a policy for a MIDlet might look like this:
```spl
policy GameApp {
    gprs_limit: ce.target.permission = "GPRS" :: local_state.gprs_consumed < (local_grps_limit + ce.target.amount);
    sms_number_limit: ce.target.permission = "SMS" :: local_state.total_sms_sent < local_sms_number_limit;
    ?GameApp: gprs_limit AND sms_number_limit;
}
```

#### Local and Global State Update

We use the concept of obligation in SPL to ensure verifiable state updates. An example based on the previously defined global policy:
```spl
policy PlatformPolicy {
    gprs_limit: ce.target.permission = "GPRS" :: global_state.gprs_consumed < (global_grps_limit + ce.target.amount);
    gprs_state_update: EXISTS fe in FutureEvents { fe.action.target = "GPRS_STATE_UPDATE" & fe.action.value = ce.target.quantity :: true };
    gprs: gprs_limit AND gprs_state_update;

    sms_number_limit: ce.target.permission = "SMS" :: global_state.total_sms_sent < global_sms_number_limit;
    sms_state_update: EXISTS fe in FutureEvents { fe.action.target = "SMS_STATE_UPDATE" & fe.action.value = ce.target.quantity :: true };
    sms: sms_limit AND sms_state_update;

    ?PlatformPolicy: gprs AND sms AND GameApp_Policy AND BrowserApp_Policy;
}
```

In this example, the `EXISTS` operator ensures that future events will update the state by the specified value, maintaining the integrity of the policy evaluation and state update within the same atomic transaction.

By leveraging these enhancements, we aim to provide a more flexible, granular, and user-centric security model for J2ME applications.