.br getrusage ()
returns resource usage measures for
.ir who ,
which can be one of the following:
.tp
.b rusage_self
return resource usage statistics for the calling process,
which is the sum of resources used by all threads in the process.
.tp
.b rusage_children
return resource usage statistics for all children of the
calling process that have terminated and been waited for.
these statistics will include the resources used by grandchildren,
and further removed descendants,
if all of the intervening descendants waited on their terminated children.
.tp
.br rusage_thread " (since linux 2.6.26)"
return resource usage statistics for the calling thread.
the
.b _gnu_source
feature test macro must be defined (before including
.i any
header file)
in order to obtain the definition of this constant from
.ir  .
.pp
the resource usages are returned in the structure pointed to by
.ir usage ,
which has the following form:
.pp
.in +4n
.ex
struct rusage {
    struct timeval ru_utime; /* user cpu time used */
    struct timeval ru_stime; /* system cpu time used */
    long   ru_maxrss;        /* maximum resident set size */
    long   ru_ixrss;         /* integral shared memory size */
    long   ru_idrss;         /* integral unshared data size */
    long   ru_isrss;         /* integral unshared stack size */
    long   ru_minflt;        /* page reclaims (soft page faults) */
    long   ru_majflt;        /* page faults (hard page faults) */
    long   ru_nswap;         /* swaps */
    long   ru_inblock;       /* block input operations */
    long   ru_oublock;       /* block output operations */
    long   ru_msgsnd;        /* ipc messages sent */
    long   ru_msgrcv;        /* ipc messages received */
    long   ru_nsignals;      /* signals received */
    long   ru_nvcsw;         /* voluntary context switches */
    long   ru_nivcsw;        /* involuntary context switches */
};
.ee
.in
.pp
not all fields are completed;
unmaintained fields are set to zero by the kernel.
(the unmaintained fields are provided for compatibility with other systems,
and because they may one day be supported on linux.)
the fields are interpreted as follows:
.tp
.i ru_utime
this is the total amount of time spent executing in user mode,
expressed in a
.i timeval
structure (seconds plus microseconds).
.tp
.i ru_stime
this is the total amount of time spent executing in kernel mode,
expressed in a
.i timeval
structure (seconds plus microseconds).
.tp
.ir ru_maxrss " (since linux 2.6.32)"
this is the maximum resident set size used (in kilobytes).
for
.br rusage_children ,
this is the resident set size of the largest child, not the maximum
resident set size of the process tree.
.tp
.ir ru_ixrss " (unmaintained)"
this field is currently unused on linux.
.\" on some systems,
.\" this is the integral of the text segment memory consumption,
.\" expressed in kilobyte-seconds.
.tp
.ir ru_idrss " (unmaintained)"
this field is currently unused on linux.
.\" on some systems, this is the integral of the data segment memory consumption,
.\" expressed in kilobyte-seconds.
.tp
.ir ru_isrss " (unmaintained)"
this field is currently unused on linux.
.\" on some systems, this is the integral of the stack memory consumption,
.\" expressed in kilobyte-seconds.
.tp
.i ru_minflt
the number of page faults serviced without any i/o activity; here
i/o activity is avoided by \*(lqreclaiming\*(rq a page frame from
the list of pages awaiting reallocation.
.tp
.i ru_majflt
the number of page faults serviced that required i/o activity.
.tp
.ir ru_nswap  " (unmaintained)"
this field is currently unused on linux.
.\" on some systems, this is the number of swaps out of physical memory.
.tp
.ir ru_inblock " (since linux 2.6.22)"
the number of times the filesystem had to perform input.
.tp
.ir ru_oublock " (since linux 2.6.22)"
the number of times the filesystem had to perform output.
.tp
.ir ru_msgsnd " (unmaintained)"
this field is currently unused on linux.
.\" on freebsd 6.2, this appears to measure messages sent over sockets
.\" on some systems,
.\" this field records the number of messages sent over sockets.
.tp
.ir ru_msgrcv " (unmaintained)"
this field is currently unused on linux.
.\" on freebsd 6.2, this appears to measure messages received over sockets
.\" on some systems,
.\" this field records the number of messages received over sockets.
.tp
.ir ru_nsignals " (unmaintained)"
this field is currently unused on linux.
.\" on some systems, this field records the number of signals received.
.tp
.ir ru_nvcsw " (since linux 2.6)"
the number of times a context switch resulted due to a process
voluntarily giving up the processor before its time slice was
completed (usually to await availability of a resource).
.tp
.ir ru_nivcsw " (since linux 2.6)"
the number of times a context switch resulted due to a higher
priority process becoming runnable or because the current process
exceeded its time slice.
.sh return value
on success, zero is returned.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b efault
.i usage
points outside the accessible address space.
.tp
.b einval
.i who
is invalid.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br getrusage ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
posix.1 specifies
.br getrusage (),
but specifies only the fields
.i ru_utime
and
.ir ru_stime .
.pp
.b rusage_thread
is linux-specific.
.sh notes
resource usage metrics are preserved across an
.br execve (2).
.pp
in linux kernel versions before 2.6.9, if the disposition of
.b sigchld
is set to
.b sig_ign
then the resource usages of child processes
are automatically included in the value returned by
.br rusage_children ,
although posix.1-2001 explicitly prohibits this.
this nonconformance is rectified in linux 2.6.9 and later.
.\" see the description of getrusage() in xsh.
.\" a similar statement was also in susv2.
.pp
the structure definition shown at the start of this page
was taken from 4.3bsd reno.
.pp
ancient systems provided a
.br vtimes ()
function with a similar purpose to
.br getrusage ().
for backward compatibility, glibc (up until version 2.32) also provides
.br vtimes ().
all new applications should be written using
.br getrusage ().
(since version 2.33, glibc no longer provides an
.br vtimes ()
implementation.)
.pp
see also the description of
.ir /proc/[pid]/stat
in
.br proc (5).
.sh see also
.br clock_gettime (2),
.br getrlimit (2),
.br times (2),
.br wait (2),
.br wait4 (2),
.br clock (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/list.3
.\" copyright (c) 2001 andries brouwer .
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" 2007-07-05 mtk: added details on underlying system call interfaces
.\"
.th uname 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
uname \- get name and information about current kernel
.sh synopsis
.nf
.b #include 
.pp
.bi "int uname(struct utsname *" buf );
.fi
.sh description
.br uname ()
returns system information in the structure pointed to by
.ir buf .
the
.i utsname
struct is defined in
.ir  :
.pp
.in +4n
.ex
struct utsname {
    char sysname[];    /* operating system name (e.g., "linux") */
    char nodename[];   /* name within "some implementation\-defined
                          network" */
    char release[];    /* operating system release
                          (e.g., "2.6.28") */
    char version[];    /* operating system version */
    char machine[];    /* hardware identifier */
#ifdef _gnu_source
    char domainname[]; /* nis or yp domain name */
#endif
};
.ee
.in
.pp
the length of the arrays in a
.i struct utsname
is unspecified (see notes);
the fields are terminated by a null byte (\(aq\e0\(aq).
.sh return value
on success, zero is returned.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b efault
.i buf
is not valid.
.sh conforming to
posix.1-2001, posix.1-2008, svr4.
there is no
.br uname ()
call in 4.3bsd.
.pp
the
.i domainname
member (the nis or yp domain name) is a gnu extension.
.sh notes
this is a system call, and the operating system presumably knows
its name, release, and version.
it also knows what hardware it runs on.
so, four of the fields of the struct are meaningful.
on the other hand, the field
.i nodename
is meaningless:
it gives the name of the present machine in some undefined
network, but typically machines are in more than one network
and have several names.
moreover, the kernel has no way of knowing
about such things, so it has to be told what to answer here.
the same holds for the additional
.i domainname
field.
.pp
to this end, linux uses the system calls
.br sethostname (2)
and
.br setdomainname (2).
note that there is no standard that says that the hostname set by
.br sethostname (2)
is the same string as the
.i nodename
field of the struct returned by
.br uname ()
(indeed, some systems allow a 256-byte hostname and an 8-byte nodename),
but this is true on linux.
the same holds for
.br setdomainname (2)
and the
.i domainname
field.
.pp
the length of the fields in the struct varies.
some operating systems
or libraries use a hardcoded 9 or 33 or 65 or 257.
other systems use
.b sys_nmln
or
.b _sys_nmln
or
.b utslen
or
.br _utsname_length .
clearly, it is a bad
idea to use any of these constants; just use sizeof(...).
often 257 is chosen in order to have room for an internet hostname.
.pp
part of the utsname information is also accessible via
.ir /proc/sys/kernel/ { ostype ,
.ir hostname ,
.ir osrelease ,
.ir version ,
.ir domainname }.
.ss c library/kernel differences
over time, increases in the size of the
.i utsname
structure have led to three successive versions of
.br uname ():
.ir sys_olduname ()
(slot
.ir __nr_oldolduname ),
.ir sys_uname ()
(slot
.ir __nr_olduname ),
and
.ir sys_newuname ()
(slot
.ir __nr_uname) .
the first one
.\" that was back before linux 1.0
used length 9 for all fields;
the second
.\" that was also back before linux 1.0
used 65;
the third also uses 65 but adds the
.i domainname
field.
the glibc
.br uname ()
wrapper function hides these details from applications,
invoking the most recent version of the system call provided by the kernel.
.sh see also
.br uname (1),
.br getdomainname (2),
.br gethostname (2),
.br uts_namespaces (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified mon apr 12 12:51:24 1993, david metcalfe
.\" 2006-05-19, justin pryzby 
.\"	document strchrnul(3).
.\"
.th strchr 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
strchr, strrchr, strchrnul \- locate character in string
.sh synopsis
.nf
.b #include 
.pp
.bi "char *strchr(const char *" s ", int " c );
.bi "char *strrchr(const char *" s ", int " c );
.pp
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "char *strchrnul(const char *" s ", int " c );
.fi
.sh description
the
.br strchr ()
function returns a pointer to the first occurrence
of the character
.i c
in the string
.ir s .
.pp
the
.br strrchr ()
function returns a pointer to the last occurrence
of the character
.i c
in the string
.ir s .
.pp
the
.br strchrnul ()
function is like
.br strchr ()
except that if
.i c
is not found in
.ir s ,
then it returns a pointer to the null byte
at the end of
.ir s ,
rather than null.
.pp
here "character" means "byte"; these functions do not work with
wide or multibyte characters.
.sh return value
the
.br strchr ()
and
.br strrchr ()
functions return a pointer to
the matched character or null if the character is not found.
the terminating null byte is considered part of the string,
so that if
.i c
is specified as \(aq\e0\(aq,
these functions return a pointer to the terminator.
.pp
the
.br strchrnul ()
function returns a pointer to the matched character,
or a pointer to the null byte at the end of
.i s
(i.e.,
.ir "s+strlen(s)" )
if the character is not found.
.sh versions
.br strchrnul ()
first appeared in glibc in version 2.1.1.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br strchr (),
.br strrchr (),
.br strchrnul ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
.br strchr (),
.br strrchr ():
posix.1-2001, posix.1-2008, c89, c99, svr4, 4.3bsd.
.pp
.br strchrnul ()
is a gnu extension.
.sh see also
.br index (3),
.br memchr (3),
.br rindex (3),
.br string (3),
.br strlen (3),
.br strpbrk (3),
.br strsep (3),
.br strspn (3),
.br strstr (3),