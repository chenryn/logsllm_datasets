作者: heeeeen@MS509Team
### 0x00 简介
最近几个月，Android安全公告公布了一系列系统框架层的高危提权漏洞，如下表所示。
CVE | Parcelable对象 | 公布时间  
---|---|---  
[CVE-2017-0806](https://android.googlesource.com/platform/frameworks/base/+/b87c968e5a41a1a09166199bf54eee12608f3900)
| GateKeeperResponse | 2017.10  
[CVE-2017-13286](https://android.googlesource.com/platform/frameworks/base/+/47ebfaa2196aaf4fbeeec34f1a1c5be415cf041b%5E%21/#F0)
| OutputConfiguration | 2018.04  
[CVE-2017-13287](https://android.googlesource.com/platform/frameworks/base/+/09ba8fdffd9c8d74fdc6bfb51bcebc27fc43884a)
| VerifyCredentialResponse | 2018.04  
[CVE-2017-13288](https://android.googlesource.com/platform/frameworks/base/+/b796cd32a45bcc0763c50cc1a0cc8236153dcea3)
| PeriodicAdvertisingReport | 2018.04  
[CVE-2017-13289](https://android.googlesource.com/platform/frameworks/base/+/5a3d2708cd2289a4882927c0e2cb0d3c21a99c02)
| ParcelableRttResults | 2018.04  
[CVE-2017-13311](https://android.googlesource.com/platform/frameworks/base/+/2950276f61220e00749f8e24e0c773928fefaed8)
| SparseMappingTable | 2018.05  
[CVE-2017-13315](https://android.googlesource.com/platform/frameworks/base/+/35bb911d4493ea94d4896cc42690cab0d4dbb78f)
| DcParamObject | 2018.05  
这批漏洞很有新意，似乎以前没有看到过类似的，其共同特点在于框架中Parcelable对象的写入（序列化）和读出（反序列化）不一致，比如将一个成员变量写入时为long，而读入时为int。这种错误显而易见，但是能够造成何种危害，如何证明是一个安全漏洞，却难以从补丁直观地得出结论。
由于漏洞原作者也没有给出Writeup，这批漏洞披上了神秘面纱。好在[漏洞预警 |
Android系统序列化、反序列化不匹配漏洞](https://www.anquanke.com/post/id/103570)[1]一文给出了漏洞利用的线索——绕过launchAnywhere的补丁。根据这个线索，我们能够利用有漏洞的Parcelable对象，实现以Settings系统应用发送任意Intent启动Activity的能力。
### 0x01 背景知识
#### Android Parcelable 序列化
Android提供了独有的Parcelable接口来实现序列化的方法，只要实现这个接口，一个类的对象就可以实现序列化并可以通过Intent或Binder传输，见下面示例中的典型用法。
    public class MyParcelable implements Parcelable {
         private int mData;
         public int describeContents() {
             return 0;
         }
         public void writeToParcel(Parcel out, int flags) {
             out.writeInt(mData);
         }
         public void readFromParcel(Parcel reply) {
             mData = in.readInt();
         }
         public static final Parcelable.Creator CREATOR
                 = new Parcelable.Creator() {
             public MyParcelable createFromParcel(Parcel in) {
                 return new MyParcelable(in);
             }
             public MyParcelable[] newArray(int size) {
                 return new MyParcelable[size];
             }
         };
         private MyParcelable(Parcel in) {
             mData = in.readInt();
         }
     }
其中，关键的writeToParcel和readFromParcel方法，分别调用Parcel类中的一系列write方法和read方法实现序列化和反序列化。
#### Bundle
可序列化的Parcelable对象一般不单独进行序列化传输，需要通过Bundle对象携带。 Bundle的内部实现实际是Hashmap，以Key-Value键值对的形式存储数据。例如， Android中进程间通信频繁使用的Intent对象中可携带一个Bundle对象，利用`putExtra(key,
value)`方法，可以往Intent的Bundle对象中添加键值对(Key
Value)。Key为String类型，而Value则可以为各种数据类型，包括int、Boolean、String和Parcelable对象等等，Parcel类中维护着这些类型信息。
见/frameworks/base/core/java/android/os/Parcel.java
    // Keep in sync with frameworks/native/include/private/binder/ParcelValTypes.h.
        private static final int VAL_NULL = -1;
        private static final int VAL_STRING = 0;
        private static final int VAL_INTEGER = 1;
        private static final int VAL_MAP = 2;
        private static final int VAL_BUNDLE = 3;
        private static final int VAL_PARCELABLE = 4;
        private static final int VAL_SHORT = 5;
        private static final int VAL_LONG = 6;
        private static final int VAL_FLOAT = 7;
对Bundle进行序列化时，依次写入携带所有数据的长度、Bundle魔数(0x4C444E42)和键值对。见BaseBundle.writeToParcelInner方法
    int lengthPos = parcel.dataPosition();
            parcel.writeInt(-1); // dummy, will hold length
            parcel.writeInt(BUNDLE_MAGIC);
            int startPos = parcel.dataPosition();
            parcel.writeArrayMapInternal(map);
            int endPos = parcel.dataPosition();
            // Backpatch length
            parcel.setDataPosition(lengthPos);
            int length = endPos - startPos;
            parcel.writeInt(length);
            parcel.setDataPosition(endPos);
pacel.writeArrayMapInternal方法写入键值对，先写入Hashmap的个数，然后依次写入键和值
    /**
         * Flatten an ArrayMap into the parcel at the current dataPosition(),
         * growing dataCapacity() if needed.  The Map keys must be String objects.
         */
        /* package */ void writeArrayMapInternal(ArrayMap val) {
            ...
            final int N = val.size();
            writeInt(N);
           ... 
            int startPos;
            for (int i=0; i<N; i++) {
                if (DEBUG_ARRAY_MAP) startPos = dataPosition();
                writeString(val.keyAt(i));
                writeValue(val.valueAt(i));
            ...
接着，调用writeValue时依次写入Value类型和Value本身，如果是Parcelable对象，则调用writeParcelable方法，后者会调用Parcelable对象的writeToParcel方法。
    public final void writeValue(Object v) {
            if (v == null) {
                writeInt(VAL_NULL);
            } else if (v instanceof String) {
                writeInt(VAL_STRING);
                writeString((String) v);
            } else if (v instanceof Integer) {
                writeInt(VAL_INTEGER);
                writeInt((Integer) v);
            } else if (v instanceof Map) {
                writeInt(VAL_MAP);
                writeMap((Map) v);
            } else if (v instanceof Bundle) {
                // Must be before Parcelable
                writeInt(VAL_BUNDLE);
                writeBundle((Bundle) v);
            } else if (v instanceof PersistableBundle) {
                writeInt(VAL_PERSISTABLEBUNDLE);
                writePersistableBundle((PersistableBundle) v);
            } else if (v instanceof Parcelable) {
                // IMPOTANT: cases for classes that implement Parcelable must
                // come before the Parcelable case, so that their specific VAL_*
                // types will be written.
                writeInt(VAL_PARCELABLE);
                writeParcelable((Parcelable) v, 0);
反序列化过程则完全是一个对称的逆过程，依次读入Bundle携带所有数据的长度、Bundle魔数(0x4C444E42)、键和值，如果值为Parcelable对象，则调用对象的readFromParcel方法，重新构建这个对象。
通过下面的代码，我们还可以把序列化后的Bundle对象存为文件进行研究。
    Bundle bundle = new Bundle();
    bundle.putParcelable(AccountManager.KEY_INTENT, makeEvilIntent());
    byte[] bs = {'a', 'a','a', 'a'};
    bundle.putByteArray("AAA", bs);
    Parcel testData = Parcel.obtain();
    bundle.writeToParcel(testData, 0);
    byte[] raw = testData.marshall();
            try {
                FileOutputStream fos = new FileOutputStream("/sdcard/obj.pcl");
                fos.write(raw);
                fos.close();
            } catch (FileNotFoundException e){
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
查看序列化后的Bundle数据如图  
#### LaunchAnyWhere漏洞
Retme的[这篇文章](http://retme.net/index.php/2014/08/20/launchAnyWhere.html)[2]对LaunchAnyWhere漏洞进行了详细解析，这里我们借用文中的图，对漏洞简单进行回顾。
普通AppB作为Authenticator，通过Binder传递一个Bundle对象到system_server中的AccountManagerService，这个Bundle对象中包含的一个键值对`{KEY_INTENT:intent}`最终会传递到Settings系统应用，由后者调用startActivity(intent)。漏洞的关键在于，intent可以由普通AppB任意指定，那么由于Settings应用为高权限system用户（uid=1000)，因此最后的startActivity(intent)就可以启动手机上的任意Activity，包括未导出的Activity。例如，intent中指定Settings中的`com.android.settings.password.ChooseLockPassword`为目标Activity,则可以在不需要原锁屏密码的情况下重设锁屏密码。
Google对于这个漏洞的修补是在AccountManagerService中对AppB指定的intent进行检查，确保intent中目标Activity所属包的签名与调用AppB一致。
    protected void checkKeyIntent(
    4704                int authUid,
    4705                Intent intent) throws SecurityException {
    4706            long bid = Binder.clearCallingIdentity();
    4707            try {
    4708                PackageManager pm = mContext.getPackageManager();
    4709                ResolveInfo resolveInfo = pm.resolveActivityAsUser(intent, 0, mAccounts.userId);
    4710                ActivityInfo targetActivityInfo = resolveInfo.activityInfo;
    4711                int targetUid = targetActivityInfo.applicationInfo.uid;
    4712                if (!isExportedSystemActivity(targetActivityInfo)
    4713                        && (PackageManager.SIGNATURE_MATCH != pm.checkSignatures(authUid,
    4714                                targetUid))) {
    4715                    String pkgName = targetActivityInfo.packageName;
    4716                    String activityName = targetActivityInfo.name;
    4717                    String tmpl = "KEY_INTENT resolved to an Activity (%s) in a package (%s) that "
    4718                            + "does not share a signature with the supplying authenticator (%s).";
    4719                    throw new SecurityException(
    4720                            String.format(tmpl, activityName, pkgName, mAccountType));
    4721                }
上次过程涉及到两次跨进程的序列化数据传输。第一次，普通AppB将Bundle序列化后通过Binder传递给`system_server`，然后`system_server`通过Bundle的一系列getXXX（如getBoolean、getParcelable)函数触发反序列化，获得KEY_INTENT这个键的值——一个intent对象，进行安全检查。  
若检查通过，调用writeBundle进行第二次序列化，然后Settings中反序列化后重新获得`{KEY_INTENT:intent}`，调用startActivity。
如果第二次序列化和反序列化过程不匹配，那么就有可能在`system_server`检查时Bundle中恶意的`{KEY_INTENT:intent}`不出现，而在`Settings`中出现，那么就完美地绕过了`checkKeyIntent`检查！下面我们就结合两个案例来说明其中的玄机。
### 0x02 案例1：CVE-2017-13288
四月份公布的CVE-2017-13288漏洞出现在PeriodicAdvertisingReport类中，对比writeToParcel和readFromParcel函数
    @Override
        public void writeToParcel(Parcel dest, int flags) {
            dest.writeInt(syncHandle);
            dest.writeLong(txPower);
            dest.writeInt(rssi);
            dest.writeInt(dataStatus);
            if (data != null) {
                dest.writeInt(1);
                dest.writeByteArray(data.getBytes());
            } else {
                dest.writeInt(0);
            }
        }
        private void readFromParcel(Parcel in) {
            syncHandle = in.readInt();
            txPower = in.readInt();
            rssi = in.readInt();