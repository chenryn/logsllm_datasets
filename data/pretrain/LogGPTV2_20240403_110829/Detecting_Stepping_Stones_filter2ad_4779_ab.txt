First, it may be that the upstream connection termi-
nates slightly sooner than the downstream connec-
tion, because of details of how the different TCP
shutdown handshakes occur. Second, this Ô¨Åltering
may open up the monitor to evasion by an attacker
who can force their upstream connection to termi-
nate while leaving the downstream connection run-
ning.
3.8 TrafÔ¨Åc patterns
We can coarsely classify network trafÔ¨Åc as either ex-
hibiting ON/OFF activity, or running fairly continu-
ously. For the former, we can potentially exploit the
trafÔ¨Åc‚Äôs timing structure (whether the ON/OFF patterns
of two connections are similar). For the latter, we can
potentially exploit trafÔ¨Åc volume information (whether
two connections Ô¨Çow at similar rates). In addition, even
for continuous trafÔ¨Åc, if the communication is reliable,
any delays resulting from waiting to detect loss and re-
transmit may impose enough of an ON/OFF pattern on
the trafÔ¨Åc that we can again look for timing similarities
between connections.
In this paper, we focus on trafÔ¨Åc exhibiting ON/OFF
patterns, as that is characteristic of interactive trafÔ¨Åc,
which arguably constitutes the most interesting class of
stepping-stone activity.
3.9 Accuracy
As with intrusion detection in general, we face the prob-
lem of false positives (non-stepping-stone connections
erroneously Ô¨Çagged as stepping stones) and false nega-
tives (stepping stones the monitor fails to detect). The
former can make the detection algorithm unusable, be-
cause it becomes impossible (or at least too tedious) to
examine all of the alerts manually, and attackers can ex-
ploit the latter to evade the monitor.
In practice, the problem of comparing connections look-
ing for similarities can be complicated by clock synchro-
nization (if comparing measurements made by different
monitors), propagation delays (the lag between trafÔ¨Åc
showing up on one connection and then appearing on the
other), packet loss and retransmission, and packetization
variations. Moreover, an intruder can intentionally in-
ject noise in an attempt to evade the monitor. Therefore,
the detection mechanism must be highly robust if it is to
avoid excessive false negatives.
3.10 Responsiveness
Another important design parameter is the responsive-
ness of the detection algorithm. That is, after a stepping-
stone connection starts, how long does it take for the
monitor to detect it? Clearly, it is desirable to detect
stepping stones as quickly as possible, to enable tak-
ing additional actions such as recording related trafÔ¨Åc or
shutting down the connection. However, in many cases
waiting longer allows the monitor to gather more infor-
mation and consequently it can detect stepping stones
more accurately, resulting in a tradeoff of responsiveness
versus accuracy.
Another consideration related to responsiveness con-
cerns the system resources consumed by the detection
algorithm. If we want to detect stepping stones quickly,
then we must take care not to require more resources
than the monitor can devote to detection over a short
time period. On the other hand, if off-line analysis is
sufÔ¨Åcient, then we can use potentially more resource-
intensive algorithms.
3.11 Open vs. evasive attackers
In general, intrusion detection becomes much more dif-
Ô¨Åcult when the attacker actively attempts to evade detec-
tion by the monitor [PN98, Pa98]. The difference be-
tween the two can come down to the utility of relying
on heuristics rather than airtight algorithms: heuristics
might work well for ‚Äúopen‚Äù (non-evasive) attackers, but
completely fail in the face of an actively evasive attacker.
While ideally any detection algorithms we develop
would be resistant to evasive attackers, ensuring such ro-
bustness can sometimes be exceedingly difÔ¨Åcult, and we
proceed here on the assumption that there is utility in
‚Äúraising the bar‚Äù even when a detection algorithm can
be defeated by a sufÔ¨Åciently aggressive attacker. In par-
ticular, for timing-based algorithms such as those we de-
velop, we would like it to be the case that the only way
to defeat the algorithm is for an attacker to have to in-
troduce large delays in their interactive sessions, so that
their inconvenience is maximized. We assess our algo-
rithm‚Äôs resistance to evasion in  4.4.
4 A Timing-Based Algorithm
In this section we develop a stepping-stone detection al-
gorithm that works by correlating different connections
based solely on timing information. As discussed in the
previous section, our design is motivated in high-level
terms by the basic approach of identifying invariants.
Moreover, the algorithm leverages the particulars of how
interactive trafÔ¨Åc behaves. This leads to an algorithm
that is very effective for detecting interactive trafÔ¨Åc (see
evaluation in  5), and should work well for detecting
other forms of trafÔ¨Åc that exhibit clear ON/OFF patterns.
4.1 ON/OFF periods
is no data trafÔ¨Åc on a Ô¨Çow for more than =
We begin by deÔ¨Åning ON and OFF periods. When there
idle seconds,
the connection is considered to be in an OFF period.
We consider a packet as containing data only if it carries
new (non-retransmitted, non-keepalive) data in its TCP
payload. When a packet with non-empty payload then
appears, the Ô¨Çow ends its OFF period and begins an ON
period, which lasts until the Ô¨Çow again goes data-idle for
idle seconds.
The motivation for considering trafÔ¨Åc as structured into
ON and OFF periods comes from the strikingly dis-
tinct distribution of the spacing between user keystrokes.
Studies of Internet trafÔ¨Åc have found that keystroke in-
terarrivals are very well described by a Pareto distri-
bution with Ô¨Åxed parameters [DJCME92, PF95]. The
parameters are such that the distribution exhibits inÔ¨Å-
nite variance, which in practical terms means a very
wide range of values.
In particular, large values are
not uncommon: about 25% of keystroke packets come
500 msec or more apart, and 15% come 1 sec or more
apart (1.6% come 10 sec or more apart). Thus, inter-
active trafÔ¨Åc will often have signiÔ¨Åcant OFF times. We
can then exploit the tendency of machine-driven, non-
interactive trafÔ¨Åc to send packets back-to-back, with a
very short interval between them, to discriminate non-
interactive trafÔ¨Åc from interactive.
4.2 Timing correlation when OFF periods end
The strategy underlying the algorithm is to correlate con-
nections based on coincidences in when connection OFF
periods end, or, equivalently, when ON periods begin.
Intuitively, given two connections 
if
and 
 ,
=

 and 
!"#$ 
ten leave OFF periods at similar times‚Äîthe user presses
 , it is very likely that 
ning and produces output or they receive a new shell
to
 of-
 and then shortly
 , or a program they have executed Ô¨Ånishes run-
a keystroke and it is sent along Ô¨Årst 
along 
prompt (in which case the activity ripples from 
 ).
 and 
The inverse is also likely to be true. That is, if 
 , because there are not many other
that 
cuss two such mechanisms in  5.7: periodic trafÔ¨Åc with
often leave OFF periods at similar times, then it is likely
mechanisms that can lead to such coincidences. (We dis-
slightly different periods, and broadcast messages.)
"#>?
By quantifying similar and often, we transform the
above strategy into the following detection criteria:
parameter.
1. We consider two OFF periods correlated if their
is a control
ending times differ by @BA , where A
 , let OFF and OFF
 and
2. For two connections
be the number of OFF periods in each, and OFFDC
 and 
 a stepping stone connec-
then consider 
OFF#C
EGFHJI OFF - OFF9KMLON
be the number of these which are correlated. We
is a control parameter, which we set to 0.3.
tion pair if:
where
A beneÔ¨Åt of this approach is that the work is done only
after signiÔ¨Åcant idle periods. For busy, non-idle connec-
tions (far and away the bulk of trafÔ¨Åc), we do nothing
other than note that they are still not idle. Related to
this, we need consider only a small number of possible
connection pairs at any given time, because we can ig-
nore both those that are active and those that are idle;
we need only look at those that have transitioned from
idle to active, and that can‚Äôt happen very often because
it Ô¨Årst requires the connection to be inactive for a signif-
icant period of time. Consequently, the algorithm does
not require much state to track stepping-stone pair can-
didates.
Because of the very wide range of keystroke interarrival
times, the algorithm is not very sensitive to the choice
of =
idle. In our current implementation, we set =
idle P
1SR sec. In  5.6 we brieÔ¨Çy discuss the effects of using
other values.
Finally, because we only consider correlations of when
ON periods begin, rather than when they end, we are
more robust to differences in throughput capacities. For
"#> 
 , if 
two connections 
capacity is signiÔ¨Åcantly smaller than 
 may end sooner than on 
period on 
(where the
echo of the same data takes longer to Ô¨Ånish transfer-
ring); but regardless of this effect, ON periods will start
at nearly the same time.
 ‚Äôs throughput
 ‚Äôs, then an ON
4.3 ReÔ¨Ånements
The scheme outlined above is appealing because of its
simplicity, but it requires some reÔ¨Ånements to improve
its accuracy. The Ô¨Årst of these is to exploit timing casu-
ality, based on the following observation: if two Ô¨Çows
ing correlation should have a consistent ordering. If we
 and T
once observe thatT
it should be true that T
fore T
 are on the same Ô¨Çow chain, then their tim-
 , then
 always ends its OFF period be-
 . ConÔ¨Åning our analysis in this way weeds out
 ends its OFF period beforeT
many false pairs.
#C
To further improve the accuracy of the algorithm, we
use the number of consecutive coincidences in deter-
mining the frequency of coincidences, because we ex-
pect consecutive coincidences to be more likely for true
stepping stones than for accidentally coinciding connec-
mincsc and
connection pair we require:
is the number of consecutive coinci-
 and 
OFFU
EMF>HVI OFF.- OFF2KMLNW
tions. More speciÔ¨Åcally, in addition to the test in  4.2,
 a stepping stone
to consider two connections 
DC
OFFU
where OFFU
dences, OFF and OFF are as before, and EMFH csc and
Ô¨Årst of these reÔ¨Ånements, requiring either EMF>H csc
PYX
or EMFH csc
consecutive coincidences, for direct or
indirect stepping stones, respectively. This in general
works very well, but we added the second requirement
when we found that very long-lived connections could
sometimes eventually generate consecutive coincidences
just by chance. These can be eliminated by very low
thresholds; we use
indirect stepping stones, respectively.
are new control parameters. We initially used only the
for direct and
and
DC
P[Z
P\X^]
P_Z`]
4.4 Resistance to evasion
Since the heart of the timing algorithm is correlating idle
periods in two different connections, an attacker can at-
tempt to thwart the algorithm by avoiding introducing


-
N
Q


T
L
-
N
W
N
W
N
W
N
W
any idle times to correlate; introducing spurious idle
times on one of the connections not reÔ¨Çected in the other
connection; or stretching out the latency lag between the
two connections to exceed A .
To avoid connection idle times, it will likely not suf-
Ô¨Åce for the attacker to simply resolve to type quickly.
R sec ( 5.6), it just takes a slight pause
to think, or delay by the server in generating responses
to commands, to introduce an idle time.
Given =
idle P
A mechanical means such as establishing a steady
stream of trafÔ¨Åc on one of the connections but not on
the other seems like a better tactic.
If the intermedi-
ary and either upstream or downstream hosts run cus-
tom software, then doing so is easy, though this some-
what complicates the attacker‚Äôs use of the intermediary,
as now they must install a custom server on it. Another
approach would be to use a mechanism already existing
in the protocol between the upstream host and the inter-
mediary to exchange trafÔ¨Åc that the intermediary won‚Äôt
propagate to the downstream host; for example, an on-
going series of Telnet option negotiations. However, as
particular instances of such techniques become known,
they may serve as easily-recognized signatures for step-
ping stone connections instead.
Even given the transmission of a steady stream of trafÔ¨Åc,
idle times might still appear, either accidentally, due to
packet loss and retransmission lulls, or purposefully, by
a site introducing occasional 500 msec delays into its
interactive trafÔ¨Åc to see whether a delay shows up in a
connection besides the one deliberately perturbed. Such
delays might prove difÔ¨Åcult for an attacker to mask.
The attacker might instead attempt to introduce a large
number of idle times on one connection but not on the
other, so as to push the ratio of idle time coincidences
below
. This will also require running custom software
on the intermediary, and, indeed, this approach and the
previous one are in some sense the same, aiming to un-
dermine the basis of the timing analysis. The natural
counter to this evasion tactic is to lower
, though this of
course will require steps to limit or tolerate the ensuing
additional false positives. It might also be possible to
detect unusually large numbers of idle periods, though
we have not characterized the patterns of multiple idle
periods to assess the feasibility of doing so.
Another approach an attacker might take is to pick an
intermediary for which the latency lag between the two
connections is larger than A , which we set to 80 msec
in  5.6. Doing so simply by exploiting the latency be-
tween the monitoring point and the intermediary is not
likely to work well, as for most sites the latency between
an internal host and a monitoring point will generally be
well below 40 msec; however, if an internal host con-
nected via a very slow link (such as a modem) is avail-
able, then that may serve. Another approach would be
to run a customized server or client on the intermediary
that explicitly inserts the lag of 80 msec. This approach
appears a signiÔ¨Åcant concern for the algorithm, and may
require use of much larger values of A , so as to render
the delay highly inconvenient for the attacker (80 msec
is hardly noticeable, much less inconvenient). This is a
natural area for future work.
5 Performance Evaluation
In  4 we developed a timing-based algorithm for step-
ping stone detection. We have implemented the al-
gorithm in Bro, a real-time intrusion detection system
[Pa98]. In this section, we evaluate its performance (in
terms of false positives and false negatives) on traces
of wide-area Internet trafÔ¨Åc recorded at the DMZ ac-
cess link between the global Internet and two large in-
stitutions, the Lawrence Berkeley National Laboratory
(LBNL) and the University of California at Berkeley
(UCB).
5.1 Traces used
We ran the timing-based algorithm on numerous Internet
traces to evaluate its performance. Due to space limita-
tions, here we conÔ¨Åne our discussion to the results for
two traces:
 lbnl-telnet.trace (120 MB, 1.5M packets,
3,831 connections): one day‚Äôs worth of Telnet and
Rlogin trafÔ¨Åc collected at LBNL. (The trafÔ¨Åc is
more than 90% Telnet.)
 ucb-telnet.trace (390 MB, 5M packets,
7,319 connections): 5.5 hours‚Äô worth of Telnet and
Rlogin trafÔ¨Åc collected at UCB during the after-
noon busy period.
The performance of the algorithm on other traces is com-
parable.
Q
1
N
N
5.2 Brute force content-based algorithm
To accurately evaluate the algorithms, we Ô¨Årst devised an
off-line algorithm using brute-force content matching.