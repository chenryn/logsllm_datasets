1564
(a) APT
(b) VT Balanced
(c) Ember
(d) Georgia Tech
(e) MalShare
(f) VirusShare
(g) VX Underground
(h) Yara
Fig. 3: Comparative execution purposes for each dataset by percentage.
ﬁgure given its different nature. In this particular case, 47%
of the ﬁles retrieved by our Yara rules were later assessed to
have used some kind of LotL technique. This result is also
interesting, as it means that half of the times that a malicious
sample accessed a system binary, it did so to leverage it as a
LotL technique, instead of for other purposes.
Another notable ﬁnding is that in the Ember benign dataset,
2.05% of the samples show executions of LotL techniques.
This number is signiﬁcantly lower than the 9.41% average
prevalence of LotL techniques across regular commodity
malware datasets. We provide additional evidence for this
observation in Section V-B.
Most Frequently Used LotL Binaries. Table V shows the
most commonly executed LotL binaries in our commodity
malware datasets. We can observe that commodity malware
executes some system binaries more frequently than others.
These numbers also show a signiﬁcant variability depending
on the speciﬁc dataset distribution, as each of the datasets
might have been collected in a different way and at a different
time. If we look at the VT balanced dataset, the most com-
monly used binaries were Reg.exe, Nslookup.exe, Re-
gasm.exe, Runas.exe, Schtasks.exe, and Sc.exe.
Some of these binaries were used for system administration
tasks such as editing the registry or creating scheduled tasks.
Others were used to change or elevate privileges, or to enable
network activities. It is notable that certain binaries show dif-
ferent distributions across datasets. This means that although
LotL techniques are a widespread approach among malware
writers, they are used in an heterogeneous way among malware
families or malware types.
Parameters and Execution Purpose. We also identiﬁed the
execution purpose for the occurrences of the most commonly
used LotL binaries by parsing their parameters. Figure 3
shows the resulting distribution of execution purposes. The
most frequent purposes are proxied execution, reconnaissance,
task stopping and modiﬁcation of the registry. We can also
observe that there is a signiﬁcant variability between datasets,
as expected from the results shown in Table V. Nevertheless,
these results show that malware uses LotL binaries not only
to surreptitiously execute other code, but also to modify
the underlying operating system via registry modiﬁcation, to
enable lateral movement via reconnaissance, or to avoid other
software running in the system (e.g., many malware families
try to stop security software applications when they start
running on a system).
Malware Families. We identiﬁed a number of malware fam-
ilies that are notably proliﬁc (i.e., those for which nearly all
of their samples used one or more LotL techniques), while
others had a very low LotL binary adoption. We limited this
classiﬁcation to families that contained at least 100 samples, to
prevent bias caused by potentially under-represented families
with a small number of samples.
Figure 4 shows the number of families, as reported by AV-
Class, for which a given percentage of their samples leveraged
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1565
Fig. 4: Distribution of families using LotL techniques.
a LotL technique. We can observe that a high number of
families did not use LotL binaries, while a small number of
families presented high prevalence of these techniques. This
means that while there is a signiﬁcant adoption of LotL overall,
the usage of these techniques is concentrated in a limited
number of families.
B. Comparison of Benign and Malicious Samples
We have observed that LotL techniques are a widespread
phenomenon both in commodity malware and APT campaigns,
and although there might be some differences across malware
types or families, it is clear that the security industry should
not overlook this threat. With this in mind, we raise another
question: Why do some security products have difﬁculties
detecting these techniques? At the beginning of this paper we
conﬁrm that many AV products cannot effectively detect the
usage of these binaries, and some responses to our responsible
disclosure messages suggest that detection mechanisms could
be very prone to false positives. In this section, we compare the
usage of LotL binaries in legitimate software. To this end, we
leveraged the benign software dataset from Ember described in
more detail in Section B, and our VT balanced dataset.
Table VI shows the most commonly executed binaries
in the benign dataset. Regsvr32.exe, Sc.exe and
Rundll32.exe are among the most commonly executed
binaries, all of which are used for the purpose of executing
code. We can notice that the most commonly executed bi-
naries for malware (see Table V) and benign software differ
signiﬁcantly.
Figure 5 shows samples that
leverage a LotL technique,
grouped by execution purpose. We observe that while some
execution purposes are more prevalent in malicious binaries
than in benign binaries (e.g. reconnaissance, persistence and
registry modiﬁcation), there is an opposite trend for others.
For instance, we can notice that the most frequent purpose in
both malware and benign software is proxied execution. This
ﬁnding correlates with our observations in Section III, where
Fig. 5: Execution purpose of benign and malicious samples
from Ember and Ember Benign datasets.
System Binary
Explorer
Regsvr32
Sc
Rundll32
Taskkill
Ping
Net
Mstsc
Attrib
Regedit
Samples
230
190
148
128
99
71
66
58
58
40
Percentage
12.62%
10.43%
8.12%
7.03%
5.43%
3.90%
3.62%
3.18%
3.18%
2.20%
TABLE VI: Top 10 most frequently used binaries in benign
dataset (number of samples and percentage of the number of
distinct sample-binary executions observed).
we tested several AV solutions to ﬁnd out if they detected
the proxied execution of a reverse shell. The results show
that these behavioural patterns pose a signiﬁcant challenge for
creators of heuristic AV algorithms. This is also reﬂected by
the response of some vendors to our responsible disclosure
process, where one of the claims suggested that the false
positive risk was signiﬁcantly high. The ﬁnding also simul-
taneously illustrates that not all LotL binaries or purposes
are equally prevalent in benign and malicious software, and
therefore AV vendors still have the opportunity to create
heuristic rules to identify the types of techniques that are not
as prevalent in benign software.
C. Prevalence of LotL techniques in APT Malware
In the previous section, we observed how LotL techniques are
signiﬁcantly more frequent in APT malware than commodity
malware (see Figure 2). For this reason, in this section we
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1566
System Binary
Ping
Rundll32
Reg
Wscript
Xcopy
Net
Tasklist
Ipconﬁg
Expand
Systeminfo
Samples
493
228
212
194
122
77
48
47
44
41
Percentage
25.96%
12.01%
11.16%
10.22%
6.42%
4.05%
2.53%
2.47%
2.32%
2.16%
TABLE VII: Top 10 most frequently used binaries in APT
dataset (number of samples and percentage of the number of
distinct sample-binary executions observed).
APT Campaign
Havex
Hurricane Panda
El Machete
Regin
Lazarus
Keyboy
Keyboy
Black Vine
Roaming Tiger
WIRTE Group
APT28 Zebrocy
Magic Hound
Hangover
APT28 Zebrocy
Lotus Blossom
APT27
Subaat
Dimnie
Percentage LotL Binaries
100.00% Rundll32
100.00% Msiexec
100.00% Schtasks
100.00% Dllhost
100.00% Net, Netstat, Ping, Reg
100.00% Net, Rundll32
100.00% Rundll32
94.39% Net, Ping, Reg,
Regsvr32, Rundll32
89.47% Expand, Powershell
80.00% Rundll32, Schtasks, Wmic
77.78% Reg, Tasklist
75.00% Attrib, Taskkill, Wscript
71.86% Attrib, Cscript, Findstr,
Net, Reg, Wscript
66.67% Mshta, Wscript
66.67% Net, Rundll32
63.64% Msiexec
60.42% Attrib, Ping, Reg, Regasm
54.36% Ping, Rundll2
TABLE VIII: APT campaigns (from threat intelligence cam-
paign reports) with over 50% of samples using LotL binaries.
focus on APT malware and measure several aspects. First, we
show the particular APT campaigns with the highest percent-
age of samples that use LotL binaries, and we group them
based on threat intelligence reports. We also enumerate the
LotL binaries that APT malware leverages most often.
Table VII lists the most common LotL binaries that we
observed in the APT dataset. We can observe that that APT
malware uses many of the same binaries as commodity
malware, with Ping.exe as the most frequent one. This
binary is often used for subtly delaying execution, with ‘local-
host’ as the most frequent destination. Rundll32.exe and
Wscript.exe, tools for proxying the execution of malicious
code, are used by many samples; substantially more than they
are within commodity malware datasets. The reconnaissance
tools Ipconfig.exe, Net.exe and Tasklist.exe are
also used by a number of different samples. Reg.exe is
commonly executed by APT malware, but more infrequently
than in commodity malware. We observe that APT malware
mainly uses LotL techniques for delayed and proxied execu-
tion, as well as reconnaissance. This may in part reﬂect that
APT malware aims to enable stealthy lateral movement and
exﬁltrate data.
APT Campaigns. Table VIII displays some of the APT cam-
paigns we identiﬁed as using LotL techniques most proliﬁcally,
based on threat intelligence reports where behavioural data
was available. It is notable that several APT groups, such as
APT28 and Keyboy, have multiple campaigns and samples.
This indicates that APT groups that use LotL techniques use
them across multiple campaigns.
VI. CASE STUDIES
In this section we investigate and describe two recent ran-
somware families from our dataset: Gandcrab and Cerber.
Ransomware is one of the most prevalent threats nowadays
due to how proﬁtable it is for malicious actors [23]. We chose
these families because they heavily rely on LotL techniques
of different types and execution purposes and illustrate how
a malware sample can chain different LotL techniques to
achieve its goals. We executed samples from these families
to observe and document their behaviour at different phases
of the intrusion killchain.
We also describe two APT malware groups, Turla and
GreyEnergy. APT group Turla shows an evolution in the
adoption of LotL techniques over time, while GreyEnergy [53]
was involved in highly disruptive attacks to the Ukranian
power grid. We manually analysed the use of LotL binaries
in these samples.
a) Gandcrab: Gandcrab is a ransomware family that operated
from late 2018 to early 2019, in several different variants. We
executed Gandcrab ransomware samples in a local sandboxed
environment and recorded the executed commands. We ob-
served the following LotL binaries being used by Gandcrab
samples:
C:\ Windows\ System32\cmd . exe / c vssadmin d e l e t e
C:\ Windows\ System32\cmd . exe / c wmic shadowcopy
shadows
/ q u i e t
/ a l l
d e l e t e
Many other ransomware families, such as Petya use the LotL
binary Vssadmin.exe, with the parameters delete shadows
/all /quiet, to silently delete backups. Functionally shadowcopy
delete provided as parameters to Wmic.exe accomplishes the
same effect.
passing
a
samples
binary,
a
in the family using the
We observed other
of
Nslookup.exe
‘gandcrab.bit’ or
similar domain, with no further
functionality. This subroutine is repetitively executed in
attempts
for
Gandcrab [28] that were no longer online and responding to
the query.
to contact command and control
parameter
servers
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1567
Dropper .exe
Loader .dll
Orchestrator .dll
Backdoor .dll
Project 
Cobra 
(2014)
Installs
Loads
Injects
Rundll32
Dropper .exe
Loader .tlb
Backdoor .pdb
Mosquito 
(2018)
Installs
Loads
Rundll32
Ipconfig
Powershell
Rundll32
Tasklist
Set
Ipconfig
Netsh
Rundll32
Tasklist
Arp
Set
Fig. 6: Increasing adoption of LotL techniques by APT group
Turla. Shown in two successive modular highly evasive trojans,
Cobra (2014) [16] and Mosquito (2018) [14].
b) Cerber: Cerber, like Gandcrab, is a notably successful
ransomware that has several variants. Apart from proxied exe-
cution via LotL binaries, we observed other evasive techniques
in use by Cerber, such as process injection.
Unlike other ransomware families, Cerber does not delete
shadow copies. However, we noticed an especially complex
proxied execution chain. We observed that Wscript.exe
and Rundll32.exe execute a malicious .vbs and .dll ﬁle,
sequentially:
C:\ Windows\ System32\ WScript . exe C:\ Users\ admin
C:\ Windows\ System32\ Rundll32 . exe 8 i v q . d l l
\enYXval36C\38 oDr5 . vbs
a r z y 9 4 9
We also observed that Cerber delays the execution via
Ping.exe and modiﬁes the registry to achieve persis-
tence. The addition of a malicious .vbs ﬁle to the HKEY_-
CURRENT_USER\Software\Microsoft\Windows reg-
istry key means this malicious script is run every time a user
logs on.
C:\ Windows\ System32\cmd . exe / c p i n g 1 2 7 . 0 . 0 . 1
&& r e g add HKEY CURRENT USER\ S o f t w a r e \
M i c r o s o f t \Windows\ C u r r e n t V e r s i o n \RunOnce /
v enYXval36C / t REG SZ / d C:\
enYXval36CenYXval36C\enYXval36C . vbs
/ f
We also note that some Cerber samples invoke Mshta.exe
to open the ransom note.
C:\ Windows\ System32\ mshta . exe ransom . h t a
c) Turla and GreyEnergy: We executed the GreyEnergy [53]
dropper malware locally (used for attack campaigns on the
Ukranian power grid) and recorded the following shell com-
mands executed using Process Monitor [40]:
C:\ Windows\SysWOW64\ Rundll32 . exe {64F97CDC . . .
C:\ Windows\ System32\cmd . exe / c ( p i n g l o c a l h o s t
FAB40CA\} . db #1 #1}
>> n u l & d e l $ p a t h\ grey3 . exe >> n u l )
The execution of Rundll32.exe by GreyEnergy with the
parameter of a .db ﬁle causes the proxied execution of a
malicious .dll ﬁle, given a .db sufﬁx to appear more innocuous.
This technique is also used by the Mosquito malware visible in
Figure 6, however Mosquito masks malicious .dlls with the use
of .tlb and .pdb extensions to the ﬁles. Figure 6 also illustrates
how the Turla APT group has adopted more LotL techniques
in its recent malware campaigns, and exempliﬁes how some
malicious actors are evolving to conceal their actions.
Rundll32.exe execution by GreyEnergy is also made
persistent by having its location stored in a startup folder that
executes every time the system starts. The execution purpose
of Ping.exe by the second command of the GreyEnergy
dropper is to delay the deletion of the initial dropper ﬁle. The
dropper deletes itself to remove forensic evidence.
VII. MAIN TAKEAWAYS AND DISCUSSION
Our results conﬁrmed that LotL techniques are not a negligible
phenomenon. While several technical articles cover this topic,
our systematic measurement went one step further in facil-
itating the understanding of the adoption of this technique
by commodity malware. In this paper, we examined several
different malware datasets and conducted an AV evaluation
experiment, wherein we conﬁrmed low detection rates for
several documented LotL techniques. Given these results, we
can distill the following conclusions and takeaways:
• Almost every popular AV product we tested had difﬁ-
culties detecting malicious usage of LotL binaries. Even
after responsibly disclosing these issues to each vendor,
only a fraction of them implemented successful detec-
tion mechanisms. Some of these vendors implemented
detection mechanisms for the speciﬁc malicious payloads
we implemented, but not the delivery mechanism itself.
Others reported that it is challenging to implement such
countermeasures due to a prohibitive false positive risk.
• To correct
this detection gap, we worked with AV
vendors directly to implement detection capabilities.
For