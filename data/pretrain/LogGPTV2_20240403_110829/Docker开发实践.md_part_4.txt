# Docker 安装与容器管理

## 1.4 Docker 的安装

### 1.4.1 在红帽企业版 Linux 6 (RHEL6) 上安装 Docker

首先，确保你的 RHEL 版本为 6.5 或更高，并且内核版本至少为 2.6.32-431。

在 RHEL 6 和 CentOS 6 中，你需要先安装 EPEL 包库。EPEL 是一个由 Fedora 社区维护的第三方软件包仓库，适用于基于 Red Hat 的系统。

#### 安装 EPEL
```bash
$ sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
```

然后，你可以通过以下命令来安装 Docker：
```bash
$ sudo yum -y install docker-io
```

### 1.4.2 在 Fedora 上安装 Docker

对于 Fedora 19 和 20，安装 Docker 的命令如下：

**Fedora 19:**
```bash
$ sudo yum -y install docker-io
```

**Fedora 20:**
```bash
$ sudo yum -y install docker
```

### 1.4.3 启动 Docker 服务

安装完成后，启动 Docker 服务并设置开机自启。

**RHEL 6/CentOS 6:**
```bash
$ sudo service docker start
$ sudo chkconfig docker on
```

**RHEL 7/Fedora:**
```bash
$ sudo systemctl start docker
$ sudo systemctl enable docker
```

确认 Docker 是否成功安装：
```bash
$ sudo docker info
```
这将显示关于 Docker 的详细信息，包括运行中的容器数量、镜像数量等。

### 1.4.4 在 OS X 上安装 Docker

由于 Docker 引擎依赖于 Linux 内核特性，因此在 OS X 上运行 Docker 需要使用虚拟机。Docker 提供了 Boot2Docker 工具，它是一个轻量级的解决方案，用于在 OS X 上安装和配置 Docker 服务。

1. 下载最新版本的 Boot2Docker（当前版本为 v1.3.2）。
2. 双击下载的安装包进行安装。
3. 打开 Boot2Docker 应用程序或通过终端执行以下命令初始化并启动虚拟机：
   ```bash
   $ boot2docker init
   $ boot2docker start
   $ $(boot2docker shellinit)
   ```
4. 验证 Docker 是否成功安装：
   ```bash
   $ docker info
   ```

### 1.4.5 在 Windows 上安装 Docker

Windows 系统同样需要借助虚拟机来运行 Docker。你可以使用 Boot2Docker 的 Windows 版本来实现这一点。

1. 下载最新版本的 Windows 版 Boot2Docker（当前版本为 v1.3.2）。
2. 双击安装包完成安装。
3. 运行 Boot2Docker 脚本，根据提示操作。如果遇到 SSH 密钥密码提示，直接按回车键跳过即可。

### 第 2 章 容器

#### 2.1 容器的管理操作

容器是一种轻量级的虚拟化技术，每个容器包含特定的应用及其所需的依赖库。这一章我们将介绍容器的基本操作，包括创建、查看、启动、停止和删除容器。

##### 2.1.1 创建容器

创建容器有两种方法：`docker create` 和 `docker run`。前者创建的容器处于停止状态，后者则会立即启动容器。

- **创建并启动容器**:
  ```bash
  $ docker run -i -t --name=inspect_shell ubuntu /bin/bash
  ```

- **后台运行容器**:
  ```bash
  $ docker run --name daemon_while -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"
  ```

##### 2.1.2 查看容器

使用 `docker ps` 命令可以查看正在运行的容器。加上 `-a` 参数可以列出所有容器，无论其是否正在运行；而 `-l` 参数仅显示最近创建的一个容器；`-n=x` 则显示最后创建的 x 个容器。

示例：
```bash
$ sudo docker ps
$ sudo docker ps -a
$ sudo docker ps -l
$ sudo docker ps -n=2
```

以上是关于 Docker 安装及基本容器管理操作的简要指南。希望对你有所帮助！