$ sudo yum install docker
15
2. 红帽企业版Linux 6（RHEL6）
首先，你要保证自己的红帽是6.5以上的，内核版本在2.6.32-431以上。
16
在红帽企业版Linux 6和CentOS 6中，我们首先需要安装EPEL包库，而在Fedora上却不用。
对于不同的平台，一些包的命名和版本也不尽相同。 17
安装EPEL的命令：
18
$ sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386 ↩
14 第1章 Docker简介
/epel-release-6-8.noarch.rpm
然后安装Docker：
$ sudo yum -y install docker-io
3. Fedora上的安装
在Fedora 19上安装Docker的命令如下：
$ sudo yum -y install docker-io
在Fedora 20上安装Docker的命令如下：
$ sudo yum -y install docker
4. 在红帽系列中启动Docker后台
安装好之后，我们就可以启动Docker的后台服务了。
在RHEL 6和CentOS 6中，可以通过如下命令来启动：
$ sudo service docker start
我们还可以让Docker服务开机启动：
$ sudo service docker enable
在RHEL 7和Fedora系统中，则是：
$ sudo systemctl start docker
开机启动是：
$ sudo systemctl enable docker
我们可以通过如下命令来确认Docker是否已经安装成功：
$ sudo docker info
Containers: 13
Images: 22
Storage Driver: aufs
Root Dir: /var/lib/docker/aufs
Dirs: 48
Execution Driver: native-0.2
Kernel Version: 3.13.0-24-generic
Operating System: Ubuntu 14.04 LTS
WARNING: No swap limit support
1.4.3 OS X下的安装
因为Docker引擎采用的是Linux的内核和内核特性，如果需要在OS X上运行它，则需要一个
1.4 Docker的安装 15
虚拟机。Docker已经给我们提供了一种简洁方法，那就是利用Boot2Docker工具来安装虚拟机和
1
配置Docker服务。这里的虚拟机指的是VirtualBox。
首先，可以去GitHub上下载最新的Boot2Docker。在编写这本书的时候，其最新版本是v1.3.2。 2
双击下载完的安装包，将会自动安装，如图1-9所示。安装的内容包含VirtualBox虚拟机、
3
Docker和Boot2Docker管理工具。
4
5
6
7
9
8
10
图1-9 OS X系统下Boot2Docker的安装
10
安装完成之后，你可以在OS X的“应用”文件夹中找到Boot2Docker。直接双击来启动它，
或者采用如下命令行的方式： 11
$ boot2docker init
$ boot2docker start 13
$ $(boot2docker shellinit)
然后在终端可以验证Docker是否成功安装：
14
$ docker info
Containers: 13
15
Images: 22
Storage Driver: aufs
...
16
至此，OS X下的Docker就安装好了。
17
1.4.4 Windows下的安装
18
在Windows系统下运行Docker也需要虚拟机，我们也一样借助Windows版本的Boot2Docker
16 第1章 Docker简介
来安装。
首先，下载最新版本的Windows版的Boot2Docker，当前的最新版本为1.3.2，然后双击安装
包安装即可，如图1-10所示。
图1-10 Windows下的Boot2Docker安装
如图1-11所示，运行该脚本，会提示你输入ssh密钥密码，最简单的处理办法是暂时不管它，
直接按回车[Enter]即可。
图1-11 Windows下的Docker运行
2.1 容器的管理操作 17
1
第 2 章 2
容 器
3
4
5
容器是一个打包了应用和服务的环境。它是一个轻量级的虚拟机，每一个容器都由一组特定
的应用和必要的依赖库组成。容器作为一个软件应用的标准集装箱，它必然需要定义一组跟具体 6
应用无关的标准接口。在这一章中，我们主要说明容器的常用标准操作，主要包含以下内容。
7
 容器的管理操作。包含容器的创建、查看、启动、终止、删除。
 容器内的信息获取和指令执行。包含附加终端到后台容器，查看容器日志和详细信息以
9
及容器内执行指定的指令。
 容器的导入和导出。
8
2.1 容器的管理操作
10
对于容器的常见命令（包括查看、创建、启动、终止和删除等），我们按照由浅到深、由必
须到可选的顺序介绍。 10
要查看某条指令的详细帮助信息，可以访问http://docs.docker.com/reference/，或者通过docker
11
help命令。此外，我们也可以通过man pages查看（例如：man docker-run）。
2.1.1 创建容器 13
创建容器有两个命令，一个是docker create，另一个是docker run。二者的区别在于前者创 14
建的容器处于停止状态，而后者不仅创建了容器，而且启动了容器。
采用docker create创建一个停止壮态的容器，具体如下： 15
$ docker create ubuntu:14.04
adedeb41185ad9ac096b8f1a7a3c2d3c2f0cf759643685d320ff656bd49b9d48 16
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
$ docker ps -a 17
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
adedeb41185a ubuntu:14.04 "/bin/bash" 27 seconds ago stupefied_brown
18
创建容器后，Docker会立刻返回容器的ID，例如adedeb…就是我们刚刚所创建容器的ID。ID
18 第2章 容器
可以唯一标识一个容器，每一个容器的ID都是独一无二的。docker ps命令用于查看正在运行的
容器，我们没有看到任何运行的容器，docker ps –a则是查看所有容器，包含未启动的容器。可
以看到，我们创建的容器已经存在。
想要让创建的容器立马进入运行态，可以使用docker run命令，该命令等同于用docker create
创建容器后再使用docker start启动容器。使用docker run命令，可以创建两种类型的容器——
后台型容器和交互型容器。
 交互型容器：运行在前台，通常会指定有交互的控制台，可以给容器输入，也可以得到
容器的输出。创建该容器的终端被关闭，在容器内部使用exit命令或者调用了docker stop、
docker kill命令后，容器会变成停止状态。
 后台型容器：运行在后台，创建启动之后就与终端无关。即便终端关闭了，该后台容器
也依然存在，只有调用docker stop或docker kill命令时才能够使容器变成停止状态。
下面我们创建一个交互型容器，相关代码如下：
$ sudo docker run -i -t --name=inspect_shell ubuntu /bin/bash
Unable to find image 'ubuntu' locally
Pulling repository ubuntu
86ce37374f40: Download complete
511136ea3c5a: Download complete
5bc37dc2dfba: Download complete
61cb619d86bc: Download complete
3f45ca85fedc: Download complete
78e82ee876a2: Download complete
dc07507cef42: Download complete
root@761ef6d4b28f:/#
首先，告诉Docker要运行docker run命令。这个命令后面是命令行标志-i和-t，前者用于打
开容器的标准输入（STDIN），后者告诉Docker为容器建立一个命令行终端。这两个标志为我们
和容器提供了交互shell，是创建交互型容器的基本设置。后面的--name标志为容器指定了一个名
字，这是一个可选项。当没有这个选项时，Docker会为我们取一个随机的名字。接下来，我们告
诉Docker使用哪个镜像去创建容器，这里使用的是ubuntu。ubuntu镜像是一个基础镜像，我们可
以使用基础镜像（例如ubuntu、fedora、debian、centos等）作为创建自己镜像的基础。这里我
们只是用基础镜像来启动容器，没有添加任何东西。最后，告诉Docker要在容器里面执行命令
/bin/bash。
命令本身我们理解了，那么在后台会发生些什么呢？创建容器的流程如图2-1所示，当我们
运行docker run命令后，Docker在本地搜索我们指定的ubuntu镜像，如果没有找到，就会到公有
仓库Docker Hub中继续搜索。如果在服务器上找到了需要的镜像，Docker就会下载这个镜像，并
将其保存到本地。然后，Docker使用这个镜像创建一个新的容器并将其启动；容器的文件系统是
在只读的镜像文件上增加一层可读写的文件层，这样可以保证镜像不变而只记录改变的数据，这
对容器的共享和传输都非常有利。接着会配置容器的网络，Docker会为容器分配一个虚拟网络接
2.1 容器的管理操作 19
口，并通过网桥的方式将该网络接口桥接到宿主主机上去，然后该虚拟网络接口分配一个IP地址。
1
最后，Docker在新容器中运行指定的命令，例如我们的例子中是/bin/bash。容器创建成功后，
会出现类似下面的提示符： 2
root@761ef6d4b28f:/#
3
4
5
6
7
9
8
10
10
图2-1 docker run命令的内部流程 11
@前面的是我们在容器的登录用户root，后面的761ef6d4b28f是容器的主机名。可以使用ctrl+D
13
或者exit命令退出该容器。容器停止并不代表容器销毁，其实容器还在，只是不再是运行态，可
以通过docker ps –a命令查看到已存在的容器。
14
接下来，我们创建一个后台型容器。在实际的应用中，大多数容器都是后台型容器，因为服
务器程序不可能因为创建容器的终端退出而退出。创建后台型容器需要使用-d参数，其创建命令
15
如下：
$ sudo docker run --name daemon_while -d ubuntu /bin/sh -c "while true; do echo hello 16
world; sleep 1; done"
f40f1463221f6fdcd5ae26d223df10273b0a4831d8bf1db16d461f583ac0cfb6
17
你可能注意到了，上面的命令没有像前面的容器那样关联到一个shell，而是返回了一个容器
ID后直接返回到了宿主主机的命令提示符。我们可以通过运行docker ps命令，查看新建的容器
18
是否正在运行：
20 第2章 容器
$ sudo docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
f40f1463221f ubuntu:latest /bin/sh -c 'while tr 2 minutes ago Up 2 minutes daemon_while
761ef6d4b28f ubuntu:latest /bin/bash 49 minutes ago Up 49 minutes inspect_shell
可以看到，有两个容器在运行，交互型的容器inspect_shell和后台型容器daemon_while。
2.1.2 查看容器
在上一节中，我们经常使用docker ps命令来查看正在运行的容器。在这一节中，我们详细
说明该命令的参数及输出结果的含义。
使用docker ps命令，可以查看当前运行的容器：
$ sudo docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS
NAMES
f40f1463221f ubuntu:latest /bin/sh -c 'while tr 16 minutes ago Up 16 minutes
daemon_while
761ef6d4b28f ubuntu:latest /bin/bash About an hour ago Up About an hour
inspect_shell
下面简要介绍一下该命令的输出中各列的含义。
 CONTAINER ID：唯一标识容器的ID。它是一个64位的十六进制数，对某个容器的操作可以
通过它来标识操作目标。在不会混淆的前提下，可以采用ID的前几位来标识该容器，而
在显示的时候一般会显示12位。
 IMAGE：创建容器时使用的镜像。
 COMMAND：容器最后运行的命令。
 CREATED：创建容器的时间。
 STATUS：容器的状态。如果容器是运行状态，则类似UP 49 minutes的形式，其中49分钟
是容器已经运行的时间；如果容器是停止状态，则是类似Exited(0)的形式，其中数字0
是容器退出的错误码，0为正常退出，其他数字则表示容器内部出现错误。
 PORTS：对外开放的端口。
 NAMES：容器名。和容器ID一样都可以唯一标识一个容器，所以同一台宿主主机上不允许
有同名的容器存在，否则会提示冲突。
使用docker ps命令，只会列出当前正在运行的容器。当要查看所有的容器时，可以使用-a
选项，它会告诉Docker列出所有容器，包括运行的和停止的容器。示例代码如下：
$ sudo docker ps -a
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS
NAMES
dbc5bafd5805 ubuntu:latest echo hello 7 seconds ago Exited (0) 6 seconds ago
hopeful_bartik
f40f1463221f ubuntu:latest /bin/sh -c 'while tr 16 minutes ago Up 16 minutes
daemon_while
2.1 容器的管理操作 21
761ef6d4b28f ubuntu:latest /bin/bash About an hour ago Up About an hour
1
inspect_shell
可以发现，使用-a选项多出了一个名称是hopeful_bartik的容器，其状态是Exited(0)，表示容
2
器已经退出了，退出码是0。
当要查看最新创建的容器时，还可以使用-l选项，该选项告诉Docker只列出最后创建的容器： 3
$ sudo docker ps -l
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4
dbc5bafd5805 ubuntu:latest echo hello 7 seconds ago Exited (0) 6 seconds ago
可以看到，这里只列出了最近创建的一个容器的运行状况。 5
此外，还可以使用-n=x选项，此时会列出最后创建的x个容器：
6
$ sudo docker ps –n=2