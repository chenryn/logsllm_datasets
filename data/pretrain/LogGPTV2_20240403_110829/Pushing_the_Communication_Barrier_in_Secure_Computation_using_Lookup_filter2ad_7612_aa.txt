title:Pushing the Communication Barrier in Secure Computation using Lookup
Tables
author:Ghada Dessouky and
Farinaz Koushanfar and
Ahmad-Reza Sadeghi and
Thomas Schneider and
Shaza Zeitouni and
Michael Zohner
Pushing the Communication Barrier in Secure
Computation using Lookup Tables
Ghada Dessouky∗, Farinaz Koushanfar†, Ahmad-Reza Sadeghi∗, Thomas Schneider‡,
∗TU Darmstadt, System Security Lab, Email: PI:EMAIL
Shaza Zeitouni∗, Michael Zohner‡
†University of California, Adaptive Computing and Embedded Systems Lab, Email: PI:EMAIL
‡TU Darmstadt, Engineering Cryptographic Protocols Group, Email: PI:EMAIL
Abstract—Secure two-party computation has witnessed sig-
niﬁcant efﬁciency improvements in the recent years. Current
implementations of protocols with security against passive ad-
versaries generate and process data much faster than it can be
sent over the network, even with a single thread. This paper
introduces novel methods to further reduce the communication
bottleneck and round complexity of semi-honest secure two-party
computation. Our new methodology creates a trade-off between
communication and computation, and we show that the added
computing cost for each party is still feasible and practicable in
light of the new communication savings. We ﬁrst improve com-
munication for Boolean circuits with 2-input gates by factor 1.9x
when evaluated with the protocol of Goldreich-Micali-Wigderson
(GMW). As a further step, we change the conventional Boolean
circuit representation from 2-input gates to multi-input/multi-
output lookup tables (LUTs) which can be programmed to realize
arbitrary functions. We construct two protocols for evaluating
LUTs offering a trade-off between online communication and
total communication. Our most efﬁcient LUT-based protocol
reduces the communication and round complexity by a factor
2-4x for several basic and complex operations. Our proposed
scheme results in a signiﬁcant overall runtime decrease of up to
a factor of 3x on several benchmark functions.
I.
INTRODUCTION
Secure computation allows two or more parties to evaluate
a public function on their private inputs without revealing any
information except what can be inferred from the output. In the
context of secure two-party computation with security against
passive (semi-honest, honest but curious) adversaries, the most
prominent protocols are Yao’s garbled circuits [Yao86] and the
protocol by Goldreich-Micali-Wigderson (GMW) [GMW87].
Yao’s garbled circuits protocol securely evaluates a function,
represented as Boolean circuit, in a constant number of rounds.
The Boolean circuit consists of XOR gates, which can be eval-
uated for free [KS08], and AND gates, for which the parties
have to send data. The GMW protocol also works on Boolean
circuits where XOR gates can be evaluated locally without any
communication and is divided in two phases: a setup phase and
an online phase. The setup phase is executed prior to the actual
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page.  Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23097
function evaluation and is independent of the pertinent function
and the parties’ private inputs. It allows to pre-compute all
communication-intensive symmetric cryptographic operations
and oblivious transfers (OTs, cf. §II-C) to generate helper
data. The online phase begins when the parties secret-share
their private inputs and lasts throughout the evaluation of the
function circuit using the pre-computed helper data until the
ﬁnal output is computed. The main difference of both protocols
is that the round complexity of the online phase is constant for
Yao’s protocol, but linear in the depth of the circuit in GMW.
In recent years,
the practical efﬁciency of secure two-
party computation schemes has been dramatically improved by
orders of magnitudes, making solutions ready for deployment
in practice [BCD+09], [BJSV15], [Sec15], [SHS+15]. One of
the key enablers for these improvements has been the efﬁcient
instantiation of underlying cryptographic primitives, which
decreased the computational cost per cryptographic operation
close to negligible [BHKR13], [GLNP15]. While the com-
putation has been dramatically reduced, the communication
improvements have been smaller, shifting the bottleneck in
current protocol implementations towards communication. In
particular, the work of [BHKR13] computes at the speed of
nearly 2 Gbit/second per thread. It has been shown in [ZRE15]
that today’s best instantiation of Yao’s protocol of [ZRE15] has
hit a lower bound of two κ-bit ciphertexts per AND gate in the
Boolean circuit, where κ is the symmetric security parameter.
In contrast, for the GMW protocol, it has been shown that
it is still possible to achieve communication less than two κ-bit
ciphertexts per AND gate [KK13]. The GMW protocol allows
that all symmetric cryptographic operations are pre-computed
in the setup phase without knowing the function beforehand,
unlike Yao’s protocol, and thus offers the possibility of a very
efﬁcient online phase. Therefore, GMW is the candidate of
choice in our work and the basis of our improved protocols.
However, the multi-round online phase of GMW greatly re-
duces its practicality for many real-world secure computation
applications. In order to speed up this online phase, recent
work of [IKM+13], [DZ16] has introduced protocols that
use multi-input tables rather than traditional 2-input Boolean
gates to reduce the number of communication rounds. To pre-
compute these tables, the communication complexity in the
setup phase was extremely increased, which is a common
approach for improving the online phase. However, the large
communication overhead introduced by these protocols is
particularly intolerable for most practical purposes and real-
world applications and would scale very poorly as the function
size grows. Furthermore, the protocols are mostly theoretical
with no evaluation of applicability besides AES in [DZ16].
In summary, the main bottlenecks in passively secure two-
party computation today are the setup communication (which
dominates the total communication) and the online round com-
plexity, both of which are often at a trade-off. Existing general
purpose schemes achieve either low setup communication or
low online round complexity, but not both.
A. Our Contributions
In this paper, we present a more holistic end-to-end solution
that signiﬁcantly reduces the communication complexity in
semi-honest secure two-party computation, while simultane-
ously maintaining a low number of communication rounds.
LUT-based Secure Computation. We replace the function
representation as 2-input Boolean gate circuit by a more
compact multi-input lookup table (LUT)-based representation.
This enables the evaluation of more complex functions by
representing the entire functionality as a compact graph of
interconnected LUTs. We propose protocols to evaluate LUT-
based circuits which reduce the communication overhead sig-
niﬁcantly by a factor 4x compared to state-of-the-art Yao’s
protocol [ZRE15] and the round complexity by factor 4x
compared to the GMW protocol. Using multi-input gates in
secure computation has been investigated before, but previous
works incurred a drastic communication overhead even for
a small number of inputs and only considered this approach
for special functions such as the AES S-box, rendering their
protocols unpractical, non-generic, and unscalable for real-
world applications [HEKM11], [KK12], [IKM+13], [MPS15],
[DZ16]. In contrast, we generalize our protocols to enable
computation of any functionality making them more practical
and scalable for real-world applications.
LUT Protocols. We construct two protocol variants for eval-
uating LUT-based circuits, called OP-LUT and SP-LUT, that
offer a trade-off between improved online communication (OP-
LUT) and improved setup/total communication (SP-LUT).
Our LUT protocols can also be used to evaluate 2-input
Boolean gates using the GMW protocol at no additional cost,
since all use XOR-based secret sharing. This allows that we
can effectively and seamlessly combine the beneﬁts of both
representations with our protocols. Further details on their
construction can be found in §IV.
communication-efﬁcient OT of [KK13] as a starting point and
introduce further optimizations to reduce both its computation
and communication overhead. We propose a protocol called
More Efﬁcient(cid:0)N
sion protocol, denoted as(cid:0)N
N-MT (multiplication-triple generation based on (cid:0)N
generation based on (cid:0)2
(cid:1) OT Extension. A key building block for
(cid:1) OT extension. We use the most
(cid:1) OT),
(cid:1) OT) of [ALSZ13] and a reduction
which leverages our optimizations to achieve a communication
reduction per AND gate by a factor of 1.9x from 256 bits to
134 bits in the GMW protocol, for security parameter κ = 128,
in comparison to the traditional 2-MT (multiplication-triple
our LUT protocols is the 1-out-of-N oblivious transfer exten-
by a factor of 1.2x compared to the protocol of [KK13]. We
describe our optimization techniques in detail in §III.
1
1
1
1
Compiler for LUT-based Secure Computation. Since we
move away from 2-input Boolean gates, we require new op-
timized LUT-based circuit representations of functions. How-
ever, building such circuits by hand is tedious, challenging,
and error-prone. Instead, we construct an automated toolchain
that transforms high level function descriptions into a LUT
representation. More speciﬁcally, we re-purpose hardware syn-
thesis tools for secure computation as ﬁrst shown in [SHS+15],
[DDK+15], but for LUT-based synthesis tools, which we
customize and manipulate to automatically and efﬁciently
generate multi-input multi-output LUT representations. An in-
depth description of the hardware synthesis tool leveraged and
how we re-purpose it can be found in §V.
Evaluation on Basic Operations and Applications. We
demonstrate the improved efﬁciency and practicality of our
LUT protocols by evaluating a wide range of functionalities.
Our protocols are shown to improve on the communication
of ﬂoating point operations by factor 2-4x and the round
complexity by factor 3-4x. We report and discuss our ex-
tensive evaluation results for basic operations in §VI and
more complex applications in §VII. For some operations, our
most efﬁcient LUT protocol achieves as little as half a κ-bit
ciphertext communication per AND gate. In terms of actual
runtime, our protocols achieve up to 3x faster runtime for AES
and private set intersection.
B. High-Level Idea of Our Scheme
We construct a toolchain, presented in Fig. 1, that com-
piles functions described in a high-level hardware descrip-
tion language into a mixed representation of LUTs and 2-
input Boolean gates using a hardware synthesis tool
that
we customize and re-purpose for our setting. These circuit
representations can then be evaluated in a communication-
efﬁcient manner using our OP-LUT or SP-LUT protocols for
LUT gates and using GMW with our N-MT pre-computation
method for 2-input Boolean gates. Note that the LUT pro-
tocols can be freely combined with GMW at no additional
cost, since all schemes are based on XOR secret sharing.
Our protocols are based on the (cid:0)N
(cid:1) OT extension protocol
of [KK13] which runs in the setup phase that we further
optimize in terms of both communication and computation.
We evaluate our protocols on various basic operations and
applications in secure computation and show that our LUT
protocols often achieve signiﬁcantly better communication and
round complexity than traditional 2-input Boolean gate repre-
sentations. Our synthesized LUT representations and imple-
mentations are available within the ABY framework [DSZ15]
at http://github.com/encryptogroup/ABY.
1
C. Outline
(cid:1) OT extension
we describe in more detail our improved (cid:0)N
We provide preliminaries and background in §II. Next,
in §III, followed by a description of our LUT-
protocol
based representation and protocols in §IV. Our customized
hardware synthesis approach is given in §V. Finally, we show
an extensive evaluation of our toolchain for basic operations
in §VI and applications in §VII. We give related works in §VIII
before we conclude and give future works in §IX.
1
2
HW Synthesis
Functionality
in HDL
Representation
LUT
LUT
Input P0
Input P1
SP-LUT OP-LUT N-MT
(cid:0)N
1
(cid:1) OT Extension
our communication-efﬁcient SP-LUT, OP-LUT, and N-MT protocols, which build on our improved(cid:0)N
(cid:1) OT extension protocol.
Fig. 1. Our toolchain for compiling a high-level hardware description language into a network of 2-input Boolean gates and LUTs and evaluating them using
1
Output
II. PRELIMINARIES
A. Notation
We denote the two parties as P0 and P1 or sender PS and
receiver PR and the symmetric security parameter as κ, which
we ﬁx to κ = 128 throughout this paper.
B. LUT-based Boolean Circuits
In our context, a Lookup Table (LUT) is the set of all func-
tions that map δ ≥ 2 input bits to σ output bits (cf. Fig. 2 for
an example). Using this representation, complex functionalities
can be built as a compact graph of interconnected LUTs.
Boolean Circuit
Lookup Table
a
b
c
a b c
∧
⊕
∧
d
LUT
d
a
0
0
0
0
1
1
1
1
b
0
0
1
1
0
0
1
1
c
0
1
0
1
0
1
0
1
d
0
0
0
0
0
0
1
0
Fig. 2. A function with δ = 3 input and σ = 1 output bits represented as
Boolean circuit with 2-input gates (left) and lookup table (right).
1
(cid:0)N
C. Oblivious Transfer
In 1-out-of-N oblivious transfer, denoted (cid:0)N
(cid:1) OTm
n we denote m invocations of (cid:0)N
sender PS inputs N messages (x1, ..., xN ) from which a re-
ceiver PR with selection input r ∈ [1...N ] obtains message xr
obliviously such that PS does not learn PR’s choice r and PR
does not learn any information about xi with i (cid:54)= r. By
(cid:1) OT, a
(cid:1) OT, where each
of the N messages has length n bits. OT is a fundamental
primitive in cryptography and heavily used in secure compu-
tation. In [IR89] it was shown that OTs cannot be based on
one-way functions, i.e., OT requires at least some public-key
cryptography. Today’s fastest public-key based OT protocol of
[CO15] is able to compute 10,000 OTs per second.
1
1
OT Extension. In [IKNP03] it was shown that it is pos-
sible to “extend” a few (around κ) public-key base-OTs to
an arbitrary number of OTs using symmetric cryptography
3
efﬁcient 1-out-of-2 OT extension protocol is C((cid:0)2
these protocols are called OT
only. Due to their nature,