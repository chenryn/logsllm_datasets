::: titlepage
# []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts}第 18 章 使用 CLI 在 IdM 中管理基于角色的访问控制 {.title}
:::
本章介绍了身份管理(IdM)中的基于角色的访问控制，并描述了命令行界面(CLI)中的以下操作：
::: itemizedlist
-   [管理权限](#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#managing-idm-permissions-in-the-cli_managing-role-based-access-controls-in-idm-using-the-cli "在 CLI 中管理 IdM 权限"){.link}
-   [管理权限](#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#managing-idm-privileges-in-the-cli_managing-role-based-access-controls-in-idm-using-the-cli "在 CLI 中管理 IdM 权限"){.link}
-   [管理角色](#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#managing-idm-roles-in-the-cli_managing-role-based-access-controls-in-idm-using-the-cli "在 CLI 中管理 IdM 角色"){.link}
:::
::: section
::: titlepage
# []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#role-based-access-control-in-idm-cli_managing-role-based-access-controls-in-idm-using-the-cli}IdM 中的基于角色的访问控制 {.title}
:::
与自助服务和委派访问控制相比，IdM
中的基于角色的访问控制(RBAC)向用户授予完全不同的授权。
基于角色的访问控制由三个部分组成：
::: itemizedlist
-   [**权限授予执行特定任务的权利**]{.strong}，如添加或删除用户、修改组、启用读取访问等。
-   [**权限结合权限**]{.strong}，例如添加新用户所需的所有权限。
-   [**角色向用户**]{.strong}、用户组、主机或主机组授予一组特权。
:::
::: section
::: titlepage
## []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#permissions-in-idm_role-based-access-control-in-idm-cli}IdM 中的权限 {.title}
:::
权限是基于角色的访问控制的最低级别单元，它们定义这些操作所应用到的 LDAP
条目。与构建块类似，可以根据需要对尽可能多的权限分配权限。\
[**一个或多个权利定义了允许的操作**]{.strong} ：
::: itemizedlist
-   `写入`{.literal}
-   `读取`{.literal}
-   `search`{.literal}
-   `compare`{.literal}
-   `add`{.literal}
-   `delete`{.literal}
-   `all`{.literal}
:::
[**这些操作适用于三个基本目标**]{.strong} ：
::: itemizedlist
-   `子树`{.literal} ：域名(DN)；此 DN 下的子树
-   `目标过滤器`{.literal} ：LDAP 过滤器
-   `目标`{.literal} ：带有可能通配符的 DN 指定条目
:::
此外，以下方便选项可设置对应的属性：
::: itemizedlist
-   `类型`{.literal} ：对象类型（用户、组等）；设置 `子树`{.literal}
    `和目标过滤器`{.literal}
-   `member`{.literal} Of：组成员；设置 `目标过滤器`{.literal}
-   `TargetGroup：`{.literal}
    授予修改特定组的权限（如授予管理组成员资格的权限）；设置
    `目标`{.literal}
:::
使用 IdM
权限，您可以控制哪些用户有权访问哪些对象，甚至控制这些对象的属性。IdM
允许您允许或阻止单个属性，或更改特定 IdM 功能（如用户、组或
sudo）的所有可见性，适用于所有匿名用户、所有经过身份验证的用户，或者只更改一组特定的特权用户。\
例如，如果管理员只想将用户或组的访问权限限制到这些用户或组需要访问的特定部分，并且使其他部分完全隐藏于他们，此方法的灵活性对管理员很有用。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
权限不能包含其他权限。
:::
:::
::: section
::: titlepage
## []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#default-managed-permissions_role-based-access-control-in-idm-cli}默认管理权限 {.title}
:::
管理的权限是 IdM
默认附带的权限。它们的行为与用户创建的其他权限类似，但有以下区别：
::: itemizedlist
-   您无法删除它们或修改其名称、位置和目标属性。
-   它们有三组属性：
    ::: itemizedlist
    -   [**默认属性**]{.strong}，用户无法修改它们，因为它们由 IdM 管理
    -   [**包含的属性**]{.strong}，它们是用户添加的额外属性
    -   [**排除的属性**]{.strong}，这些属性由用户删除
    :::
:::
管理的权限适用于 default 和 included
属性集中显示的所有属性，但不应用到排除集中的所有属性。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
虽然您无法删除受管权限，但将其绑定类型设置为权限并从所有特权中删除托管权限会有效地禁用该权限。
:::
所有受管权限的名称都以 `System:`{.literal} 开头，例如
`System: 添加 Sudo 规则或`{.literal}
`System: Modify Services`{.literal}。IdM
的早期版本将不同的方案用于默认权限。例如，用户无法删除它们，而只能将它们分配到特权。这些默认权限大部分已转换为受管权限，但以下权限仍使用以前的方案：
::: itemizedlist
-   添加 Automember Rebuild Membership 任务
-   添加配置子条目
-   添加复制协议
-   证书删除冻结
-   从 CA 获取证书状态
-   读取 DNA 范围
-   修改 DNA 范围
-   读取 PassSync Manager 配置
-   修改 PassSync Manager 配置
-   阅读复制协议
-   修改复制协议
-   删除复制协议
-   读取 LDBM 数据库配置
-   请求证书
-   请求证书忽略 CA ACL
-   从不同主机请求证书
-   从 CA 检索证书
-   撤销证书
-   写入 IPA 配置
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果您试图通过命令行修改受管权限，系统不允许更改您无法修改的属性，命令会失败。如果您试图从
Web UI 修改受管权限，则无法修改的属性将被禁用。
:::
:::
::: section
::: titlepage
## []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#privileges-in-idm_role-based-access-control-in-idm-cli}IdM 中的权限 {.title}
:::
特权是一组适用于角色的权限。\
虽然权限提供了执行单个操作的权限，但某些 IdM
任务需要多个权限才能成功。因此，特权组合了执行特定任务所需的不同权限。\
例如，为新 IdM 用户设置帐户需要以下权限：
::: itemizedlist
-   创建新用户条目
-   重置用户密码
-   将新用户添加到默认 IPA 用户组
:::
以名为
[**的自定义特权的形式将这三个低级别任务合并到更高级别的任务中，例如，添加用户可使系统管理员更加轻松地管理角色**]{.strong}。IdM
已包含几个默认权限。除了用户和用户组外，还将特权分配到主机和主机组，以及网络服务。这种方法允许精细控制一组主机上使用特定网络服务的操作。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
特权可能不包含其他特权。
:::
:::
::: section
::: titlepage
## []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#roles-in-idm_role-based-access-control-in-idm-cli}IdM 中的角色 {.title}
:::
角色是用户为角色指定的特权列表。\
实际上，权限授予执行给定低级别任务（创建用户条目、向组添加条目等）的权限，权限组合了更高级别任务（如在给定组中创建新用户）所需的一个或多个这些权限。角色根据需要收集权限：例如，用户管理员角色能够添加、修改和删除用户。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
角色用于对允许的操作进行分类。它们不用作实施特权升级或防止特权升级的工具。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
角色不能包含其他角色。
:::
:::
::: section
::: titlepage
## []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#predefined-roles-in-identity-management_role-based-access-control-in-idm-cli}Identity Management 中的预定义角色 {.title}
:::
Red Hat Identity Management 提供以下预定义角色范围：
::: table
[]{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#idm140355334866544}
**表 18.1. Identity Management 中的预定义角色**
::: table-contents
  角色          权限                                                    描述
  ------------- ------------------------------------------------------- ---------------------------------------------------
  helpdesk      修改用户和重置密码，修改组成员资格                      负责执行简单的用户管理任务
  IT 安全专家   Netgroups 管理员, HBAC 管理员, Sudo Administrator       负责管理安全策略，如基于主机的访问控制、sudo 规则
  IT 专家       主机管理员、主机组管理员、服务管理员、自动挂载管理员    负责管理主机
  安全架构师    委派管理员、复制管理员、写入 IPA 配置、密码策略管理员   负责管理身份管理环境、创建信任、创建复制协议
  用户管理员    用户管理员, 组管理员, Stage User Administrators         负责创建用户和组
:::
:::
:::
:::
::: section
::: titlepage
# []{#managing-role-based-access-controls-in-idm-using-the-cli_managing-users-groups-hosts.html#managing-idm-permissions-in-the-cli_managing-role-based-access-controls-in-idm-using-the-cli}在 CLI 中管理 IdM 权限 {.title}
:::
本节论述了如何使用命令行界面(CLI)管理身份管理(IdM)权限。
::: itemizedlist
**先决条件**
-   管理 IdM 或 [**User Administrator**]{.strong} 角色的管理员特权。
-   一个活跃的 Kerberos 票据。[详情请参阅使用 kinit 手动登录到
    IdM。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_identity_management/index#using-kinit-to-log-in-to-ipa_logging-in-to-ipa-from-the-command-line){.link}
:::
::: orderedlist
**流程**
1.  使用 `ipa permission-add`{.literal} 命令创建新的权限条目。\
    例如，添加名为 [*dns admin*]{.emphasis} 的权限：
    ``` literallayout
    $ ipa permission-add "dns admin"
    ```
2.  使用以下选项指定权限属性：\
    ::: itemizedlist
    -   `--bindtype`{.literal} 指定 bind 规则类型。此选项接受
        `all`{.literal}、`匿名`{.literal} `和权限`{.literal}
        参数。`权限`{.literal}
        绑定类型表示只有通过角色授予此权限的用户才能执行该权限。\
        例如：
        ``` literallayout
        $ ipa permission-add "dns admin" --bindtype=all
        ```
        如果没有指定 `--bindtype`{.literal}，则 `权限`{.literal}
        是默认值。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        无法通过非默认绑定规则类型向
        权限添加权限。您也不能将特权中已存在的权限设置为非默认绑定规则类型。
        :::
    -   `--right`{.literal} 列出权限授予的权限，它替换了已弃用的
        `--permissions`{.literal} 选项。可用的值有
        `add`{.literal}、`delete`{.literal}、`读取`{.literal}、`搜索`{.literal}、`比较`{.literal}、`写入`{.literal}、`全部`{.literal}。
        您可以使用多个 `--right`{.literal}
        选项或使用大括号内以逗号分隔的列表来设置多个属性。例如：
        ``` literallayout
        $ ipa permission-add "dns admin" --right=read --right=write
        ```
        ``` literallayout
        $ ipa permission-add "dns admin" --right={read,write}
        ```
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        `添加`{.literal} 和删除 `是`{.literal}
        入门级操作（例如删除用户、添加组等），而
        `读取`{.literal}、`搜索`{.literal}、`比较`{.literal} 和
        `写入`{.literal} 则是更多属性级别：您可以写入
        `userCertificate`{.literal}，但不能读取
        `userPassword`{.literal}。
        :::
    -   `--attrs`{.literal} 提供授予权限的属性列表。\
        您可以使用多个 `--attrs`{.literal}
        选项或通过在大括号内以逗号分隔的列表列出选项，从而设置多个属性。例如：
        ``` literallayout
        $ ipa permission-add "dns admin" --attrs=description --attrs=automountKey
        ```
        ``` literallayout
        $ ipa permission-add "dns admin" --attrs={description,automountKey}
        ```
        通过 `--attrs`{.literal}
        提供的属性必须存在，并且是给定对象类型的允许属性，否则
        命令会失败并显示架构语法错误。
    -   `--type`{.literal}
        定义权限应用到的条目对象类型，如用户、主机或服务。每种类型都有自己的一组允许的属性。\
        例如：
        ``` literallayout
        $ ipa permission-add "manage service" --right=all --type=service --attrs=krbprincipalkey --attrs=krbprincipalname --attrs=managedby
        ```
    -   `--subtree`{.literal}