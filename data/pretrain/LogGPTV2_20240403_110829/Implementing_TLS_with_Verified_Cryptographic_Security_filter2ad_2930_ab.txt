that has been read, or some event, for instance
an alert, a certiﬁcate authorization request, or a notiﬁcation
that the current handshake is complete. At any point, the
application can read the properties of its connection endpoints,
which provide detailed local information about the current
ciphersuites, certiﬁcates, and security parameters, bundled in
a datatype named an epoch. A given connection may go
through a sequence of different epochs, separated by complete
handshakes, each with their own security parameters, so the
application would typically inspect the new connection epoch
when notiﬁed that
the handshake is complete, and before
issuing a write command for sending any secret data.
B. Modules and Interfaces
Our implementation is written in F#, a variant of ML for
the .NET platform, and speciﬁed in F7 [9]. It is structured
into 45 modules (similar to classes or components in other
languages) each with an interface and an implementation. Each
interface declares the types and functions exported by the
module, copiously annotated with their logical speciﬁcation.
We informally present the veriﬁcation approach developed
in the next sections. We use interfaces to specify the security
properties of our modules and to control their composition.
In particular, §III explains how we use interfaces to express
various cryptographic properties.
The F7 typechecker can verify each module independently,
given as additional
input a list of interfaces the module
depends on. Assuming the speciﬁcation in these interfaces,
F7 veriﬁes the module implementation and checks that
it
meets the speciﬁcation declared in its own interface. Both
tasks entail logical proof obligations, which are automatically
discharged by calling Z3 [19], an SMT solver. Our ‘makeﬁle’
automates the process of verifying modules while managing
their dependencies, with a target .tc7 (representing
a typing lemma) for typechecking each .
After veriﬁcation, all F7 types and speciﬁcations are erased,
and the module can be compiled by F#.
Our type-based cryptographic veriﬁcation consists of a
series of idealization steps, one module at a time. The numbers
in Fig. 1(a) indicate the order of idealization. Each step is con-
ditioned by cryptographic assumptions and typing conditions,
to ensure its computational soundness; it enables us to replace
a concrete module implementation by a variant with stronger
security properties; this variant can then be re-typechecked,
to show that it implements a stronger ideal interface, which
in turn enables further steps. Finally, we conclude that the
idealized variant of our TLS implementation is both perfectly
secure (by typing) and computationally indistinguishable from
our concrete TLS implementation.
447
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:05 UTC from IEEE Xplore.  Restrictions apply. 
Base 
CoreCrypto 
Bytes 
TCP 
TLSConstants 
TLSInfo 
Error 
Range 
Sig 
2 
Cert 
Nonce 
1 
Extensions 
Handshake/CCS 
RSAKey 
DHGroup 
Alert 
Protocol 
AppData 
Protocol 
PRF 
6 
CRE 
5 
RSA 
3 
DH 
4 
SessionDB 
Handshake (and CCS) 
Alert 
Datastream 
AppData 
TLS API 
Dispatch 
TLS 
MAC 
9 
Encode 
Enc 
8 
LHAEPlain 
LHAE 
7 
StPlain 
StAE 
TLSFragment 
Record 
TLS 
Record 
AuthPlain 
Auth 
Application 
RPCPlain 
RPC 
Adversary 
Untyped API 
Untyped Adversary 
Versions
Key Exchange RSA; DHE; DH anon
Cipher
SSL 3.0; TLS 1.0; TLS 1.1; TLS 1.2
NULL; RC4 128; 3DES EDE CBC;
AES 128 CBC; AES 256 CBC
NULL; MD5; SHA; SHA256
Renegotiation Indication
MAC
Extensions
Component
Base
TLS Record
Handshake/CCS
Alert Protocol
AppData Protocol
TLS API
Total
(b)
F# (LOC)
945
826
2 400
184
139
640
5 134
(c)
F7 (LOC)
581
511
777
119
113
426
2 527
F7 (S)
11
77
413
105
34
309
949
Figure 1.
(a) Modular implementation of TLS, (b) Implemented features and algorithms, (c) Code size and veriﬁcation time.
C. Modular Architecture for TLS
Fig. 1(a) gives our software architecture for TLS. Each box
is an F# module, speciﬁed by a typed interface. These modules
are (informally) grouped into components.
In the Base component, Bytes wraps low-level, trusted .NET
primitive operations on byte arrays, such as concatenation;
TCP handles network sockets, and it need not be trusted;
CoreCrypto is our interface to trusted core algorithms, such
as the SHA1 hash function and the AES block cipher; it can
use different cryptographic providers such as .NET or Bouncy
Castle. Other modules deﬁne constants, ciphersuite identiﬁers
and binary formats; these modules are fully speciﬁed and
veriﬁed. TLSInfo deﬁnes public data structures for sessions,
connections and epochs (see §V) giving access for instance to
the negotiated session parameters.
The TLS protocol is composed of two layers. The record
layer is responsible for the secrecy and authenticity of in-
dividual data fragments, using the authenticated encryption
mechanisms described in §IV. It consists of several modules:
Record is TLS-speciﬁc and deals with headers and content
types, whereas StAE, LHAE and ENC provide agile encryption
functionalities, each parameterized by a plaintext module, as
explained in §III. Finally, MAC provides various agile MAC
functions on top of CoreCrypto and implements the ad hoc
keyed hash algorithms of SSL 3.
The upper layer consists of four sub-protocols, respectively
dealing with the handshake, change-cipher-spec signals (CCS),
alerts, and application data. The Dispatch module interleaves
the outgoing messages sent by these sub-protocols into a
single stream of fragments, tagged with their content type,
possibly splitting large messages into multiple fragments, and
conversely dispatches incoming fragments to these protocols,
depending on their content type. Not all possible message in-
terleavings are valid; for instance application data should never
be sent or accepted before the ﬁrst handshake successfully
completes (establishing a secure channel), and no data should
448
be delivered after receiving a fatal alert. Except for these
basic rules, the RFC does not specify valid interleavings; this
complicates our veriﬁcation and, as illustrated below, enables
subtle attacks when combined with fragmentation. Dispatch
relies on a state machine to enforce the safe multiplexing
of sub-protocols; to this end, each sub-protocol signals any
signiﬁcant change in its own internal state. For instance, the
handshake protocol signals the availability of new keys, the
sending of its Finished message, and its successful completion.
To our knowledge, our model is the ﬁrst to account for this
important aspect of TLS implementations.
The handshake protocol, detailed in §V, negotiates the
connection parameters (such as protocol versions, ciphersuites,
and extensions) and establishes the shared keys for the record
layer. To this end, it relies on generic PRF modules and
key exchange algorithms (e.g. RSA-based encryption and
Difﬁe-Hellman exchange). In the TLS terminology, a session
identiﬁes a set of security parameters, the peers, and a shared
master secret. Each full handshake yields a new session,
with its own master secret. Instead, an abbreviated handshake
resumes an existing session, retrieving its master secret from a
local database. In both cases (full or abbreviated), a new epoch
begins, with keys derived from the master secret together with
some fresh random values. The same connection may rely
on several successive epochs to refresh keys, or to achieve
stronger peer authentication, possibly with different security
properties. Conversely, several connections may resume from
the same session.
The alert protocol handles warnings and fatal errors; it tells
the dispatcher when to close a connection.
The application-data protocol handles messages on behalf
of the TLS application; it is parameterized by a DataStream
module provided by the application.
At the toplevel, TLS implements our main API, described
in §VI. Before evaluating our implementation, we discuss two
attacks involving fragmentation and multiple epochs.
Renegotiating Peer Identities (an existing attack) Ray [52]
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:05 UTC from IEEE Xplore.  Restrictions apply. 
presents an attack exploiting the mis-attribution of application
data to epochs. Until a a recent protocol extension [53], TLS
did not cryptographically link successive epochs on the same
connection: as each handshake completes,
the two parties
agree on the new epoch, but not necessarily on prior epochs.
Their man-in-the-middle attack proceeds as follows: when a
target client tries to connect to a server, the attacker holds the
client connection, performs a handshake with the server, sends
some (partial) message to the server, then forwards all client-
server trafﬁc. As the client completes its ﬁrst handshake, the
server instead enters its second epoch. If the server ignores
the change of epoch, then it will treat the message injected by
the attacker concatenated with the ﬁrst message of the client
as a genuine message of the client.
Surprisingly, existing TLS APIs have no reliable mechanism
to notify epoch changes, even when the peer identity changes.
Instead, the extension implicitly authenticates prior epochs in
Finished messages [53]. We implement this extension, and in
addition, our API immediately notiﬁes any epoch change, and
separately tracks application data from different epochs.
Alert fragmentation (a new attack) We discovered another,
similar interleaving attack, against all versions of TLS, this
time involving the alert protocol. Unlike application data, alert
messages can be sent and received before completing the ﬁrst
handshake. Unlike handshake messages, alert messages are not
included in the Finished message computation. Alert messages
are two bytes long, hence they can also be fragmented by the
attacker. Our attack proceeds as follows: when a client-server
connection begins, the attacker injects a one-byte alert frag-
ment x during the ﬁrst handshake; according to the standard,
this byte is silently buffered; any time later, after completion
of the handshake, as the ﬁrst genuine 2-byte alert message yz
is sent on the secure connection, the alert xy is received and
processed instead. This clearly breaks alerts authentication.
Experimentally, we conﬁrmed that at
least OpenSSL is
subject to this attack, transforming for instance a fatal error
or a connection closure into an ignored warning, while other
implementations reject fragmented alerts—a simple ﬁx, albeit
against the spirit of the standard. Our implementation simply
checks that
the alert buffer is empty when a handshake
completes, and otherwise returns a fatal error.
D. Experimental Evaluation
Our implementation currently supports the protocol ver-
sions, algorithms, and extensions listed in Fig. 1(b), and hence
all the ciphersuites obtained by combining these algorithms.
Conversely, our implementation does not yet support elliptic
curve algorithms, AEAD ciphers such as AES-GCM, most
TLS extensions, or TLS variants such as DTLS.
Interoperability We tested interoperability against the com-
mand line interface of OpenSSL 1.0.1e and GnuTLS 3.1.4,