title:A Probabilistic Population Study of the Conficker-C Botnet
author:Rhiannon Weaver
A Probabilistic Population Study of the
Conﬁcker-C Botnet
Rhiannon Weaver
CERT, Software Engineering Institute
PI:EMAIL
Abstract. We estimate the number of active machines per hour infected
with the Conﬁcker-C worm, using a probability model of Conﬁcker-C’s
UDP P2P scanning behavior. For an observer with access to a propor-
tion δ of monitored IPv4 space, we derive the distribution of the number
of times a single infected host is observed scanning the monitored space,
based on a study of the P2P protocol, and on network and behavioral
variability by relative hour of the day. We use these distributional re-
sults in conjunction with the L´evy form of the Central Limit Theorem
to estimate the total number of active hosts in a single hour. We apply
the model to observed data from Conﬁcker-C scans sent over a 51-day
period (March 5th through April 24th, 2009) to a large private network.
Keywords: Botnets, Conﬁcker, Population Estimation, Probability
Models, Central Limit Theorem.
1 Introduction
When new botnets emerge, the classic question is, ”How big is it?” In the sta-
tistical literature, population estimation is based on mark-recapture models and
their extensions to a wide class of generalized linear models [6]. In network anal-
ysis, simple mark-recapture techniques, which reduce to counting intersections
among overlapping sets, have been applied to study botnet populations [3,8,9],
as well as to other phenomena such as peer-to-peer ﬁle sharing networks [10,16].
But the “overlapping sets” method is valid only for closed populations with di-
rect observation of individuals of interest, and equal probability of capture for
all individuals. Internet phenomena often violate these assumptions, resulting in
the need for more sophisticated modeling techniques.
Extending mark-recapture models to open populations is widely addressed in
the literature (eg. [17]), but network phenomena often admit a speciﬁc compli-
cation of direct observation: we would like to express population sizes in terms
of the number of infected machines, but we view botnets through a ﬁlter of IP
space. The existence of NAT, proxies and DHCP leases complicates the ”one IP
address, one host” model.
Applying mark-recapture models to machines, as opposed to IP addresses,
requires averaging aggregations and distributions of activity across possible con-
ﬁgurations of disambiguated hosts. On the other hand, applying mark-recapture
A. Krishnamurthy and B. Plattner (Eds.): PAM 2010, LNCS 6032, pp. 181–190, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
182
R. Weaver
models directly to IP addresses introduces heterogeneity among individuals; for
example, a NAT is observed if at least one of its underlying hosts is observed,
whereas a DHCP address is observed only if the single host to which it is allo-
cated is observed. [4] present a solution for the case when heterogeneity can be
modeled as a series of observable, nominal classes. But heterogeneity in botnet
behavior often arises from variations in underlying rates of observed counts.
This leads us to consider a method for measuring the active size of a botnet,
based on the observable behavior of a single infected host. Our dynamic mea-
surement of active machines per hour cannot be used to track a botnet’s overall
“footprint” size [1] across days or weeks. But it is simpler to implement than
a fully speciﬁed heterogeneous mark-recapture model. A single-host behavioral
model is also a necessary component of the generalized mark-recapture method-
ology, so this work provides a stepping stone toward applying more complicated
models.
As an example, the Conﬁcker-C variant that emerged within the Conﬁcker
botnet in March 2009 introduced a speciﬁc pattern of peer-to-peer (P2P) activ-
ity. When a host infected with Conﬁcker-C comes online, it searches for peers
by randomly generating a set of destination IP addresses across most of IPv4
space, and attempting UDP connections to these hosts. Connection ports use an
algorithm based on the source IP address and date, which was cracked by sev-
eral independent researchers [5,13]. As a result, Conﬁcker-C P2P traﬃc can be
observed with high reliability in the large-scale summary information contained
in network ﬂow data, making it a good candidate for behavioral modeling.
We model the hourly number of UDP P2P connection attempts that an ob-
server monitoring a proportion δ of IP space would see from a single infected
host. Rather than inferring a time series of UDP scan activity for each machine,
disambiguated from NAT or DHCP addresses, our model represents the “typical
host” by averaging across reasonable probability distributions for many unob-
servable parameters. This marginal model is used in conjunction with the Central
Limit Theorem to estimate the total number of active hosts per hour, with con-
ﬁdence intervals that account for measurement uncertainty, stochastic elements
in the Conﬁcker-C protocol, and random variation across network activity.
Section 2 discusses the stochastic components of the Conﬁcker-C P2P protocol
and network behavior that inform the marginal model, and formalizes this in-
formation into a probability model. Section 3 introduces a version of the Central
Limit Theorem that lets us describe the distribution of aggregate scan attempts
of all active hosts per hour. Section 4 presents results of applying the method to
data collected over a 51-day period from a large network. Section 5 summarizes.
2 Modeling Conﬁcker-C
We develop our model in two steps. First, we use information from published
reports and studies of the Conﬁcker-C P2P protocol to specify the distribution
of the number Mh of hourly UDP connection attempts made by an infected host.
Next, we specify the conditional distribution of the number yh of observed hits
A Probabilistic Population Study of the Conﬁcker-C Botnet
183
in the monitored space given Mh. We use π(a) to denote the prior distribution
of quantity a, and π(a | b) to denote the conditional distribution of a given b.
We use μa or E(a) to denote the mean of quantity a, and σ2
a or Var(a) to denote
the variance of a.
Protocol and Network Behavior. In September 2009, [15] provided a de-obfuscated
reverse engineering of the image of the Conﬁcker-C P2P binary image as it ap-
peared on March 5, 2009. We use this information to determine the protocol-
speciﬁc variations in the distribution of UDP scan attempts per hour for an active,
infected host.
When initiated, the P2P module spawns a global UDP scanning thread for
each valid network connection discovered, in order to bootstrap a peer list of up
to 2048 peers. Up to 32 threads can run simultaneously. Each thread alternates
between a 5-second sleep cycle and a scan phase where it randomly generates a
list of up to 100 IP addresses to contact. At each selection, the host chooses an
IP address from its list of n peers with probability equal to
(cid:3)
(cid:2)
1000 −
γn =
(cid:4)(cid:5)−1
950n
2048
.
(1)
This expression is taken directly from the C code in Conﬁcker-C’s P2P module.
If the choice is not to select a peer, the host pseudo-randomly generates an IP
address, which is added to the list only if it satisﬁes the following connection
criteria:
1. the IP address is not a DHCP or broadcast address;
2. the IP address is not a private (RFC1918) subnet address;
3. the IP address is not on a Conﬁcker-C ﬁltered address range.
When a generated IP address fails to meet these criteria, the value for the contact
list is not updated. The host will try to ﬁll its list slots in order, using up to 100
attempts.
The speed at which UDP packets are sent out over the wire depends on the
hardware and network capabilities of the infected host, as well as the amount of
bandwidth, drop percentage, etc. of the network. The P2P protocol has a max-
imum of 1200 scanning connection attempts per minute, but observed accounts
of Conﬁcker-C P2P scan activity cite lower numbers. McAfee [11] reported seeing
“roughly 2-3 UDP queries per second” (≈ 130 per minute) during the 24 hours
leading up to April 1, 2009. A Sophos technical report [7] notes that batches of
100 probes are generated on the wire, and that “probes in each batch are sepa-
rated by small ﬁxed intervals (2-5 seconds)”. [14] performed a sandbox test of an
infected Conﬁcker-C host with a single network interface and observed scanning
rates that start at approximately 1000 to 2000 IP addresses per 5 minute interval,
and decrease over the ﬁrst two hours of activity to a steady rate of approximately
200 IP addresses per 5 minutes. We base our model roughly on the SRI results, as
they most thoroughly explain the time-dependence in scanning rate.
184
R. Weaver
UDP connections. We model Mh as a Poisson process, which is a reasonable
model for small-packet scanning activity programmed at regular intervals. [12]
note that self-similarity is more common in packet inter-arrival times once con-
nections have been established. Also, in their sandbox experiment, [14] show
relatively smooth scanning rates, within both 30-minute and 6-hour time frames.
The marginal model is constructed to minimize dependencies between pa-
rameters from hour to hour, so that each population estimate can be calculated
using an aggregated count from that hour alone. The goal for this model is not
to track individual hosts, but to average over a wide range of possible behaviors
in each hour. To that end, we take a simpliﬁed approach to the time-dependency
of the UDP scanning rate, by deﬁning a latent class ηh as one of three states
that an active, infected host can be in for a particular hour h:
1. ηh =“Start-up” (S): The host comes online and initiates P2P scanning in
this hour. This state is characterized by a high scan rate per minute and a
small peer list, with activity commencing at some point t within the hour.
2. ηh =“Running” (R): The host has initiated start-up and is actively scanning
for the entire hour. This state is characterized by a low scan rate per minute,
a middle-sized to large peer list, and scans occurring throughout the hour.
3. ηh =“Shut-down” (D): The host has been actively scanning and goes oﬄine
during this hour. This state is characterized by a low scan rate per minute,
a large peer list, and scans terminating at some point t within the hour.
Each of these states depends on three quantities: scan rate (φ), active minutes
(t), and number of peers (n), that vary from hour to hour. We describe this
variability mathematically using the prior distributions in Table 1. We suppress
the index h for ease of notation.
Table 1. Prior distributions by active state
s
π(φ)
π(t)
π(n)
Start-Up
Running
Shut-Down
Γ (μφS = 130, σφS = 20)
Γ (μφR = 40, σφR = 15)
Γ (μφD = 40, σφD = 10)
Unif(1, 60)
t = 60 w.p. 1
∗
Unif(1, 60) TrGeo
TrGeo(2048, αS = 0.950)
TrGeo(2048, αR = 0.999)
(2048, αD = 0.999)
(∗) this prior is deﬁned as π(2048 − n)
Figure 2 shows the Gamma prior π(φ) for each state. Gamma distributions
are often used to model the mean of a Poisson process, as they have strictly
positive ranges. The mean rates μφs decrease from Start-Up through Shut-Down,
and the standard deviations σφs decrease to account for less stable behavior in
Start-Up that gradually settles down to the more stable Running and Shut-
Down states. Discrete Uniform priors on t represent the total number of active
minutes in the Start-Up or Shut-Down states. Truncated Geometric distributions
(geometric distribution restricted to a minimum and maximum value) are used
for peer list counts. For the shut-down state, the (∗) indicates that the truncated
geometric distribution is deﬁned on the range 2048 − n. The hyperparameters
A Probabilistic Population Study of the Conﬁcker-C Botnet
185
Fig. 1. Prior distributions for UDP
scan rates by active state
Fig. 2. Prior probabilities πks by rela-
tive hour of the day
π(n) correspond to mean peer list sizes of approximately 20, 700, and 1350 for
Start-Up, Running, and Shut-Down states.
We assume that the number of network connections (w) for an infected host
does not change between states; based on elicitation from experts we choose a
truncated geometric distribution between 1 and 32 connections, with a mean
value μw = 1.67 network connections per active host. When these quantities are
ﬁxed or known, it follows that M has a Poisson distribution with conditional
mean μM equal to φtw.
Again to minimize dependencies between hours, temporal trends in the scan
rates are not instituted by a time series component in the single-host model, but
by the prior probability of the active state, πks = π(ηk = s), s ∈ {S, R, D}, k ∈
[0, 1,··· , 23], which varies with the time-zone corrected hour of the day. Intu-
itively, πks is an estimate of the proportion of active hosts in the population that
are in each state at each time-zone corrected hour. There are 48 free parame-
ters in this distribution, arising from two free parameters per relative hour to
estimate the probability of {S, R, D} under its sum-to-one constraint. Figure 2
summarizes the values used for πks. We describe the empirical method used to
set these values in Section 4.
Observed Connections. Each of the M connection attempts either hits the mon-
itored proportion δ of IP space, or it does not. Since scan connections are inde-
pendent, identical events, the distribution π(y | M) is Binomial with parameters
Mand p, where p is the probability a connection attempt falls within the moni-
tored space.
To determine p, we assume that the monitored space resides completely within
the connection criteria from Section 2, and that it does not contain any infected
peers listening on Conﬁcker-C’s designated ports. The monitored space must be
free of infected machines to ensure that the only way of reaching the monitored
space is through a completely random selection of an IP from all of IPv4 space;
infected hosts may also reside on peer lists, which we do not choose to model.
186
R. Weaver
With a set of n existing peers, the probability that each connection attempt is
generated randomly is 1 − γn. If the connection attempt is generated randomly,
the probability that it falls in the monitored region is equal to δ/C, where
C = 0.995 is the approximate proportion of IP space covered by Conﬁcker-
C’s connection criteria, under the assumption of 1 broadcast address per 256
addresses in the space outside of Conﬁcker-C’s internal blacklist and ignored
space. From these calculations p is equal to:
(1 − γn)δ
(2)
pnδ =