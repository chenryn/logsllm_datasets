Therefore, our recursive disassembler cannot continue
at the address following a call or an unconditional jump.
Note, however, that we do continue to disassemble after
a conditional jump (i.e., branch). This can be seen at La-
bel 5 of Algorithm 1 where the disassembler recursively
continues after conditional branch instructions.
The second difference is due to the fact that it is possible
to have instructions in the initial call graph that overlap.
In this case, two different basic blocks in the call graph
can contain overlapping instructions starting at slightly
different addresses. When following a sequence of in-
structions, the disassembler can arrive at an instruction
that is already part of a previously found basic block. In
the regular case, this instruction is the ﬁrst instruction of
the existing block. The disassembler can complete the
instruction sequence of the current block and create a
link to the existing basic block in the control ﬂow graph.
Algorithm 1: disassemble()
Returns: BasicBlock
Input: MemoryAddress addr, ControlFlowGraph cfg
LocalVar: MemoryAddress target; Instruction inst;
BasicBlock current, block
current = make basic block starting at(addr);
while addr = FunctionStart &&
target < FunctionEnd then
block = disassemble(target, cfg);
connect to(cfg, current, block);
if inst.type == ConditionalBranch then
block = disassemble(addr + len(inst),
cfg);
connect to(cfg, current, block);
L1:
L2:
L3:
L4:
L5:
return current;
else
addr = addr + len(inst);
return current;
When instructions can overlap, it is possible that the cur-
rent instruction sequence starts to overlap with another
sequence in an existing basic block for some instructions
before the two sequences eventually merge. At the point
where the two sequences merge, the disassembler ﬁnds
an instruction that is in the middle (or at the end) of
a sequence associated with an existing basic block. In
this case, the existing basic block is split into two new
blocks. One block refers to the overlapping sequence up
to the instruction where the two sequences merge, the
other refers to the instruction sequence that both have in
common. All edges in the control ﬂow graph that point
to the original basic block are changed to point to the
ﬁrst block, while all outgoing edges of the original block
are assigned to the second. In addition, the ﬁrst block is
connected to the second one. The reason for splitting
the existing block is the fact that a basic block is de-
ﬁned as a continuous sequence of instructions without
a jump or jump target in the middle. When two differ-
ent overlapping sequences merge at a certain instruction,
this instruction has two predecessor instructions (one in
each of the two overlapping sequences). Therefore, it
becomes the ﬁrst instruction of a new basic block. As an
additional desirable side effect, each instruction appears
at most once in a basic block of the call graph.
The functionality of splitting an existing basic block is
implemented by the split procedure referenced at La-
bel 3 of Algorithm 1. Whenever an instruction is found
that is already associated with a basic block (check per-
formed at Label 1), the instruction sequence of the cur-
rent basic block is completed. When the instruction is
in the middle of the existing block (check performed at
Label 2), it is necessary to split the block. The current
block is then connected either to the existing basic block
or, after a split, to the newly created block that contains
the common instruction sequence. The check performed
at Label 4 takes care of the special case where the recur-
sive disassembler starts with an instruction that is part of
an existing basic block. In this case, the current block
contains no instructions and a reference to the old block
is returned instead.
The situation of two merging instruction sequences is
a common phenomenon when disassembling x86 bina-
ries. The reason is called self-repairing disassembly and
relates to the fact that two instruction sequences that
start at slightly different addresses (that is, shifted by
a few bytes) synchronize quickly, often after a few in-
structions. Therefore, when the disassembler starts at an
address that does not correspond to a valid instruction, it
can be expected to re-synchronize with the sequence of
valid instructions after a few steps [13].
The initial control ﬂow graph that is created by Algo-
rithm 1 for our example function is shown in Figure 4.
In this example, the algorithm is invoked for the function
start at address 0x8048000 and the four jump candi-
dates (0x8048006, 0x804800c, 0x8048010, and
0x8048017). The nodes in this ﬁgure represent basic
blocks and are labeled with the start address of the ﬁrst
instruction and the end address of the last instruction in
the corresponding instruction sequence. Note that the
end address denotes the ﬁrst byte after the last instruc-
tion and is not part of the basic block itself. Solid, di-
rected edges between nodes represent the targets of con-
trol transfer instructions. A dashed line between two
nodes signiﬁes a conﬂict between the two correspond-
ing blocks. Two basic blocks are in conﬂict when they
A
C
8048000
8048008
8048008
804800e
B
8048006
8048008
D
E
804800e
8048010
8048010
8048012
F
G
8048019
804801b
804801b
804801e
804800c
804800e
H
8048014
8048019
I
8048017
8048019
J
804801a
804801b
K
Figure 4: Initial control ﬂow graph.
contain at least one pair of instructions that overlap.
As discussed previously, our algorithm guarantees that
a certain instruction is assigned to at most one basic
block (otherwise, blocks are split appropriately). There-
fore, whenever the address ranges of two blocks overlap,
they must also contain different, overlapping instruc-
tions. Otherwise, both blocks would contain the same in-
struction, which is not possible. This is apparent in Fig-
ure 4, where the address ranges of all pairs of conﬂicting
basic blocks overlap. To simplify the following discus-
sion of the techniques used to resolve conﬂicts, nodes
that belong to the real control ﬂow graph are shaded. In
addition, each node is denoted with an uppercase letter.
4.2.2 Block Conﬂict Resolution
The task of the block conﬂict resolution phase is to re-
move basic blocks from the initial CFG until no con-
ﬂicts are present anymore. Conﬂict resolution proceeds
in ﬁve steps. The ﬁrst two steps remove blocks that are
deﬁnitely invalid, given our assumptions. The last three
steps are heuristics that choose likely invalid blocks. The
conﬂict resolution phase terminates immediately after
the last conﬂicting block is removed; it is not necessary
to carry out all steps. The ﬁnal step brings about a de-
cision for any basic block conﬂict and the control ﬂow
graph is guaranteed to be free of any conﬂicts when the
conﬂict resolution phase completes.
The ﬁve steps are detailed in the following paragraphs.
Step 1: We assume that the start address of the analyzed
function contains a valid instruction. Therefore, the ba-
sic block that contains this instruction is valid. In ad-
dition, whenever a basic block is known to be valid, all
blocks that are reachable from this block are also valid.
A basic block v is reachable from basic block u if there
exists a path p from u to v. A path p from u to v is
deﬁned as a sequence of edges that begins at u and ter-
minates at v. An edge is inserted into the control ﬂow
graph only when its target can be statically determined
and a possible program execution trace exists that trans-
fers control over this edge. Therefore, whenever a con-
trol transfer instruction is valid, its targets have to be
valid as well.
We tag the node that contains the instruction at the func-
tion’s start address and all nodes that are reachable from
this node as valid. Note that this set of valid nodes con-
tains exactly the nodes that a traditional recursive dis-
assembler would identify when invoked with the func-
tion’s start address. When the valid nodes are identiﬁed,
any node that is in conﬂict with at least one of the valid
nodes can be removed.
In the initial control ﬂow graph for the example function
in Figure 4, only node A (0x8048000) is marked as
valid. That node is drawn with a stronger border in Fig-
ure 4. The reason is that the corresponding basic block
ends with a call instruction at 0x8048003 whose target
is not local. In addition, we do not assume that control
ﬂow resumes at the address after a call and thus the anal-
ysis cannot directly continue after the call instruction. In
Figure 4, node B (the basic block at 0x8048006) is in
conﬂict with the valid node and can be removed.
Step 2: Because of the assumption that valid instruc-
tions do not overlap, it is not possible to start from a
valid block and reach two different nodes in the control
ﬂow graph that are in conﬂict. That is, whenever two
conﬂicting nodes are both reachable from a third node,
this third node cannot be valid and is removed from the
CFG. The situation can be restated using the notion of
a common ancestor node. A common ancestor node of
two nodes u and v is deﬁned as a node n such that both
u and v are reachable from n.
In Step 2, all common ancestor nodes of conﬂicting
nodes are removed from the control ﬂow graph. In our
A
C
8048000
8048008
8048008
804800e
D
E
804800e
8048010
8048010
8048012
F
G
8048019
804801b
804801b
804801e
804800c
804800e
H
8048014
8048019
I
804801a
804801b
K
Figure 5: CFG after two steps of conﬂict resolution.
example in Figure 4, it can be seen that the conﬂicting
node F and node K share a common ancestor, namely
node J. This node is removed from the CFG, resolving
a conﬂict with node I. The resulting control ﬂow graph
after the ﬁrst two steps is shown in Figure 5.
The situation of having a common ancestor node of two
conﬂicting blocks is frequent when dealing with invalid
conditional branches. In such cases, the branch target
and the continuation after the branch instruction are of-
ten directly in conﬂict, allowing one to remove the in-
valid basic block from the control ﬂow graph.
Step 3: When two basic blocks are in conﬂict, it is rea-
sonable to expect that a valid block is more tightly inte-
grated into the control ﬂow graph than a block that was
created because of a misinterpreted argument value of a
program instruction. That means that a valid block is of-
ten reachable from a substantial number of other blocks
throughout the function, while an invalid block usually
has only a few ancestors.
The degree of integration of a certain basic block into
the control ﬂow graph is approximated by the number of
its predecessor nodes. A node u is deﬁned as a prede-
cessor node of v when v is reachable by u. In Step 3,
the predecessor nodes for pairs of conﬂicting nodes are
determined and the node with the smaller number is re-
moved from the CFG.
In Figure 5, node K has no predecessor nodes while
node F has ﬁve. Note that the algorithm cannot distin-
guish between real and spurious nodes and thus includes
node C in the set of predecessor nodes for node F. As
a result, node K is removed. The number of predeces-
sor nodes for node C and node H are both zero and no
decision is made in the current step.
Step 4:
In this step, the number of direct successor
nodes of two conﬂicting nodes are compared. A node
v is a direct successor node of node u when v can be
directly reached through an outgoing edge from u. The
node with less direct successor nodes is then removed.
The rationale behind preferring the node with more out-
going edges is the fact that each edge represents a jump
target within the function and it is more likely that a valid
control transfer instruction has a target within the func-
tion than any random CTI.
In Figure 5, node C has only one direct successor node
while node H has two. Therefore, node C is removed
from the control ﬂow graph. In our example, all conﬂicts
are resolved at this point.
Step 5: In this step, all conﬂicts between basic blocks
must be resolved. For each pair of conﬂicting blocks,
one is chosen at random and then removed from the
graph. No human intervention is required at this step, but
it would be possible to create different alternative disas-
sembly outputs (one output for each block that needs to
be removed) that can be all presented to a human analyst.
It might also be possible to use statistical methods during
Step 5 to improve the chances that the “correct” block is
selected. However, this technique is not implemented
and is left for future work.
The result of the conﬂict resolution step is a control ﬂow
graph that contains no overlapping basic blocks. The in-
structions in these blocks are considered valid and could
serve as the output of the static analysis process. How-
ever, most control ﬂow graphs do not cover the func-
tion’s complete address range and gaps exist between
some basic blocks.
4.3 Gap Completion
The task of the gap completion phase is to improve the
results of our analysis by ﬁlling the gaps between basic
blocks in the control ﬂow graph with instructions that
are likely to be valid. A gap from basic block b 1 to basic
block b2 is the sequence of addresses that starts at the
ﬁrst address after the end of basic block b 1 and ends at
the last address before the start of block b 2, given that
there is no other basic block in the control ﬂow graph
that covers any of these addresses. In other words, a gap
contains bytes that are not used by any instruction in the
control ﬂow graph.
Gaps are often the result of junk bytes that are inserted
by the obfuscator. Because junk bytes are not reach-
able at run-time, the control ﬂow graph does not cover
such bytes. It is apparent that the attempt to disassem-
ble gaps ﬁlled with junk bytes does not improve the re-
sults of the analysis. However, there are also gaps that
do contain valid instructions. These gaps can be the re-
sult of an incomplete control ﬂow graph, for example,
stemming from a region of code that is only reachable
through an indirect jump whose target cannot be deter-
mined statically. Another frequent cause for gaps that
contain valid instructions are call instructions. Because
the disassembler cannot continue after a call instruc-
tion, the following valid instructions are not immediately
reachable. Some of these instructions might be included
into the control ﬂow graph because they are the target
of other control transfer instructions. Those regions that
are not reachable, however, cause gaps that must be an-
alyzed in the gap completion phase.
The algorithm to identify the most probable instruction
sequence in a gap from basic block b 1 to basic block
b2 works as follows. First, all possibly valid sequences
in the gap are identiﬁed. A necessary condition for a
valid instruction sequence is that its last instruction ei-
ther (i) ends with the last byte of the gap or (ii) its last
instruction is a non intra-procedural control transfer in-
struction. The ﬁrst condition states that the last instruc-
tion of a valid sequence has to be directly adjacent to the
ﬁrst instruction of the second basic block b 2. This be-
comes evident when considering a valid instruction se-
quence in the gap that is executed at run-time. After
the last instruction of the sequence is executed, the con-
trol ﬂow has to continue at the ﬁrst instruction of basic
block b2. The second condition states that a sequence
does not need to end directly adjacent to block b 2 if the
last instruction is a non intra-procedural control transfer.
The restriction to non intra-procedural CTIs is necessary
because all intra-procedural CTIs are included into the
initial control ﬂow graph. When an intra-procedural in-
struction appears in a gap, it must have been removed
during the conﬂict resolution phase and should not be
included again.
Instruction sequences are found by considering each
byte between the start and the end of the gap as a po-
tential start of a valid instruction sequence. Subsequent
instructions are then decoded until the instruction se-
quence either meets or violates one of the necessary con-
ditions deﬁned above. When an instruction sequence
meets a necessary condition, it is considered possibly
valid and a sequence score is calculated for it. The se-
quence score is a measure of the likelihood that this in-
struction sequence appears in an executable. It is calcu-
lated as the sum of the instruction scores of all instruc-
tions in the sequence. The instruction score is similar to
the sequence score and reﬂects the likelihood of an indi-
vidual instruction. Instruction scores are always greater
or equal than zero. Therefore, the score of a sequence
cannot decrease when more instructions are added. We
calculate instruction scores using statistical techniques
and heuristics to identify improbable instructions.
The statistical techniques are based on instruction pro-
babilities and digraphs. Our approach utilizes tables that
denote both the likelihood of individual instructions ap-