### Participant Demographics

**Age Distribution:**
- 18 - 23: 11
- 24 - 30: 61
- 31 - 40: 67
- 41 - 50: 30
- 51 or over: 31

**Participants by Age Group:**
- 18 - 23: 19
- 24 - 30: 40
- 31 - 40: 18
- 41 - 50: 1
- 51 or over: 96
- Total: 26

**Education Level:**
- Up to high school
- Some college (1-4 years, no degree)
- Associate’s degree
- Professional school degree
- Bachelor’s degree
- Graduate Degree

**Employment Status:**
- Arts & Entertainment: 11
- Business & Finance: 23
- Education: 9
- Engineering: 18
- Health Care: 11
- Human Resources: 4
- Information Technology: 37
- Management: 12
- Miscellaneous: 17
- Religion: 1
- Retail & Sales: 17
- Retired: 4
- Self-Employed: 24
- Student: 2
- Unemployed: 10

### User Studies: Analyze, Design, Evaluate

Since our attack is fundamentally a phishing attack, it is crucial that it is persuasive to users. We hypothesize that users' comprehension of runtime permissions and their expectations from apps in this context will significantly influence how they perceive our attack and its success. To this end, we conducted a survey-based user study to quantify user behavior and used these findings to guide the design of the attack and estimate its chances of success.

Our findings suggest that Android users generally have a good understanding of the basics of the runtime permission model but are often confused about its intricate details. Specifically, users demonstrate a significant lack of appreciation for the critical security guarantees provided by runtime permissions. This gap in user understanding provides an opportunity for an effective attack.

In addition to the survey, we conducted an in-lab user study with fewer participants but in a more realistic setting using real devices and common daily tasks. None of the participants detected our attack. We obtained Institutional Review Board (IRB) approval from our institution before commencing the user studies.

### 6.1 Susceptibility and Design

#### Survey Goals
Our survey had two primary goals:
1. Estimate the susceptibility of users to false transparency attacks.
2. Verify the validity of our conjectures on what makes users suspicious, so the design of the phishing attack can reflect the best options for deception.

Previous research has shown that permission requests not deploying our attack are likely to be denied by users if the app is not highly reputable or does not provide any utility that requires the requested permission [2]. We use this as a baseline control compared to our technique. For a more detailed discussion, see Appendix A.

#### Recruitment and Incentives
We recruited 200 participants from Amazon Mechanical Turk (mTurk) to complete our online survey. The inclusion criteria were:
1. Using Android as a primary device.
2. Having at least 100 approved Human Intelligence Tasks (HITs).
3. Having a HIT approval rate of at least 70%.

Each participant was paid $0.50 for their effort. The median time to complete the survey was 7.08 minutes.

#### Methodology
At the beginning of the survey, we informed participants that they would be asked questions about their experience with Android permissions. However, to avoid unnecessarily priming them, we did not reveal that we were testing the feasibility of our attacks. We asked questions to assess their knowledge of runtime permissions to understand if there was any underlying vulnerability due to a lack of domain knowledge. Additionally, we asked questions to verify the design decisions discussed in Section 4.

#### Results
Here are the key findings from the survey. The percentages quoted below have a ±7% margin of error for a 95% confidence level. Appendix B presents our survey questions in quiz format.

- **Understanding of the Runtime Permission Model:**
  - 8% of users identified themselves as experts, 41% as knowledgeable, 37% as average, 13% as somewhat familiar, and 1% as not familiar (Q1).
  - 71% of users were aware that Android used to have an install-time permission model (Q2).
  - 91% of users have used the new runtime permissions (Q4), and 98% are aware that the runtime permission model allows them to review and update their previous permission-related decisions through the Settings app (Q21).

  These results indicate that participants are generally familiar with the basics of runtime permissions. However, when asked more intricate questions about the inner workings of runtime permissions, users' answers were often incorrect. For example:
  - An app needs to be in the foreground during a permission request, but only 47% of users agreed with this, while 25% disagreed and 28% said they did not know (Q24).
  - When asked whether an app could prompt the user again for a permission that was previously granted, 41% agreed, 36% disagreed, and 23% said they did not know (Q10). This statement is false; Android does not allow apps to re-prompt users for granted permissions.

  These misunderstandings can be exploited, as shown in our attacks in Section 4.

- **Awareness of Identity Security Guarantee:**
  - We presented a storyboard of our attacks where we described a scenario involving a popular app requesting permissions. For this, we used Viber, a popular messaging app. Participants were asked to role-play based on screenshots of the permission requests.
  - 77% of participants granted the permission for the benign request (Q6), and 74% subsequently decided to allow the second (malicious) permission request (Q15).
  - In another example, we presented a scenario where Google Maps prompted for location permission. 89% of users decided to give the app the permission. When asked which app they granted or denied the permission to, 84% reported that they granted or denied it to Google Maps, while the rest had varying answers.

  These results demonstrate that users are generally unaware of the identity guarantee provided in permission dialogs and are more focused on the context they are presented with at the time of the request.

- **Verifying Design Decisions:**
  - We verified that it is suboptimal to request a permission when there is no app in the foreground. 53% of users selected deny, 27% selected allow, and 20% expressed that their decision would depend on additional factors (Q7, Q8).
  - We also verified that users would be alarmed if an app requested the same permission multiple times within the same session. Only 17% of participants said they would ignore and proceed normally, while 43% said they would be suspicious of the requesting app, 23% of other apps, and 15% of the operating system itself (Q22).
  - The grant rate for a secondary permission request by an attacker is as successful as a first-time request for the same permission by a victim, indicating that the attacker is not compromising the success of their attacks by requesting granted permissions.

### 6.2 Feasibility of the Attacks

To evaluate the feasibility of our attacks, we conducted an in-lab study with 20 subjects recruited on a voluntary basis. Participants were undergraduate and graduate students majoring in computer science or other engineering fields, some with graduate-level background in security and privacy. We advertised the study via word-of-mouth at the research institution and ensured that all participants had used Android.

#### Methodology
In our experiments, we used three popular Android apps as victims:
1. Google Maps
2. Shazam
3. Messenger

For each app, we assigned participants a simple yet realistic task to complete and asked a question about the task upon completion. We had three separate attack apps installed on the device, each targeting one of the victim apps. At the end of the experiments, we conducted an exit survey to ask participants about their overall experience, including any slowdowns or unusual occurrences during the tasks.

#### Conclusion
The in-lab study confirmed that none of the participants detected our attack, even among a group that was relatively security-conscious. This suggests that the attack is feasible and can be effectively executed in a real-world setting.