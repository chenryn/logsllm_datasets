# PAM
---
## 关于PAM
PAM 基础知识见 [认证](../笔记/认证.md#pam)
**安装 PAM**
CentOS、Fedora、EulerOS 系统默认安装了 PAM 并默认启动。
```bash
apt-get install libpam-cracklib
```
**判断程序是否使用了 PAM**
```
ldd /usr/bin/passwd | grep libpam
```
**PAM 身份验证配置文件**
`/etc/pam.d/` 目录包含应用程序的 PAM 配置文件。例如，login 程序将其程序/服务名称定义为 login，与之对应的 PAM 配置文件为 `/etc/pam.d/login`。
**PAM 配置文件语法格式**
每个PAM配置文件都包含一组指令，用于定义模块以及控制标志和参数。每条指令都有一个简单的语法，用于标识模块的目的（接口）和模块的配置设置，语法格式如下：
```
module_interface      control_flag      module_name  module_arguments
```
**PAM 模块接口(模块管理组)**
PAM为认证任务提供四种类型可用的模块接口，它们分别提供不同的认证服务：
* auth      - 认证模块接口，如验证用户身份、检查密码是否可以通过，并设置用户凭据
* account   - 账户模块接口，检查指定账户是否满足当前验证条件，如用户是否有权访问所请求的服务，检查账户是否到期
* password  - 密码模块接口，用于更改用户密码，以及强制使用强密码配置
* session   - 会话模块接口，用于管理和配置用户会话。会话在用户成功认证之后启动生效
**PAM 控制标志**
所有的 PAM 模块被调用时都会返回成功或者失败的结果，每个 PAM 模块中由多个对应的控制标志决定结果是否通过或失败。每一个控制标志对应一个处理结果，PAM 库将这些通过/失败的结果整合为一个整体的通过/失败结果，然后将结果返回给应用程序。模块可以按特定的顺序堆叠。控制标志是实现用户在对某一个特定的应用程序或服务身份验证的具体实现细节。该控制标志是 PAM 配置文件中的第二个字段，PAM 控制标志如下：
* required      - 模块结果必须成功才能继续认证，如果在此处测试失败，则继续测试引用在该模块接口的下一个模块，直到所有的模块测试完成，才将结果通知给用户。
* requisite     - 模块结果必须成功才能继续认证，如果在此处测试失败，则会立即将失败结果通知给用户。
* sufficient    - 模块结果如果测试失败，将被忽略。如果 sufficient 模块测试成功，并且之前的 required 模块没有发生故障，PAM 会向应用程序返回通过的结果，不会再调用堆栈中其他模块。
* optional      - 该模块返回的通过 / 失败结果被忽略。当没有其他模块被引用时，标记为 optional 模块并且成功验证时该模块才是必须的。该模块被调用来执行一些操作，并不影响模块堆栈的结果。
* include       - 与其他控制标志不同，include 与模块结果的处理方式无关。该标志用于直接引用其他 PAM 模块的配置参数
---
## PAM模式使用说明
### pam_access.so
pam_access.so 模块主要的功能和作用是根据主机名（包括普通主机名或者 FQDN）、IP 地址和用户实现全面的访问控制。pam_access.so 模块的具体工作行为根据配置文件 `/etc/security/access.conf` 来决定。该配置文件的主体包含了三个字段——权限、用户和访问发起方。格式上是一个用 "" 隔开的表。
* 第一个字段：权限（permission），使用 "+" 表示授予权限，用 "-" 表示禁止权限。
* 第二个字段：用户（user），定义了用户、组以及用 "@" 表示的在不同主机上的同名用户和同一主机上不同名用户。
* 第三个字段：访问发起方（origins），定义了发起访问的主机名称、域名称、终端名称。
而且 `/etc/security/access.conf` 文件提供了很多范例供修改时参考，并且都给出了具体的说明，例如：
```bash
#禁止非root用户通过tty1访问相关服务
#-:ALL EXCEPT root:tty1
#禁止除了wheel、shutdown以及sync之外的所有用户访问相关服务
#-:ALL EXCEPT wheel shutdown sync:LOCAL
#禁止wheel用户通过.win.tue.nl之外的其它它终端访问相关服务
#-:wheel:ALL EXCEPT LOCAL .win.tue.nl
# 禁止下面的用户从任何主机登录。其它用户可以从任意地方访问相关服务
#-:wsbscaro wsbsecr wsbspac wsbsym wscosor wstaiwde:ALL
# root用户允许通过cron来使用tty1到tty6终端访问相关服务
#+ : root : cron crond :0 tty1 tty2 tty3 tty4 tty5 tty6
# 用户root允许从下面的地址访问相关服务
#+ : root : 192.168.200.1 192.168.200.4 192.168.200.9
#+ : root : 127.0.0.1
# 用户root可以从192.168.201.网段访问相关服务
#+ : root : 192.168.201.
# 用户root可以从.foo.bar.org中任何主机访问相关服务
#+ : root : .foo.bar.org
# 用户root不允许从任何主机访问相关服务
#- : root : ALL
# 用户@nis_group和foo可以从任何主机访问相关服务
#+ : @nis_group foo : ALL
# 用户john只能从127.0.0.0/24来对本机相关服务进行访问
#+ : john : 127.0.0.0/24
# 用户john可以通过ipv4和ipv6的地址对本机相关服务进行访问
#+ : john : ::ffff:127.0.0.0/127
# 用户john可以通过ipv6的地址访问本机相关服务
#+ : john : 2001:4ca0:0:101::1
# 用户john可以通过ipv6的主机IP地址来访问本机
#+ : john : 2001:4ca0:0:101:0:0:0:1
# 用户john可以通过ipv6的IP地址和掩码来访问相关服务
#+ : john : 2001:4ca0:0:101::/64
# 开放所有用户对本机所有相关服务的访问
#- : ALL : ALL
```
**示例 : 如果要在网络内架设一个 FTP 服务器，而且在该 FTP 服务器上需要强制地指定某个用户只能通过某个 IP 地址登录**
```diff
vim /etc/pam.d/vsftpd
#%PAM-1.0
session    optional     pam_keyinit.so    force revoke
auth       required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed
auth       required pam_shells.so
auth       include  password-auth
account    include  password-auth
++ account    required     pam_access.so                 // 添加这一行内容
session    required     pam_loginuid.so
session    include  password-auth
```
修改 `/etc/security/access.conf` 配置文件, 在文件底部添加下面的两行
```diff
vim /etc/security/access.conf
++ - : kevin : ALL EXCEPT 192.168.10.101
++ - : grace : ALL EXCEPT 192.168.10.101
```
kevin 和 grace 用户不能从 192.168.10.101 之外的任何客户端访问 FTP 服务器；
修改 `/etc/vsftpd/vsftpd.conf` 文件，禁用匿名登录
```diff
++ Anonymous_enable = NO
```
重启 vsftpd 服务
针对这种需求而且不想使用防火墙以及应用程序自带的认证机制的时候，通过 pam_access.so 可以实现所需的效果
### pam_listfile.so
pam_listfile.so 模块的功能和 pam_access.so 模块类似，目标也是实现基于用户/组，主机名/IP，终端的访问控制。不过它实现的方式和 pam_access.so 会稍微有些不同，因为它没有专门的默认配置文件。访问控制是靠 pam 配置文件中的控制选项和一个自定义的配置文件来实现的。而且除了针对上述访问源的控制之外，还能够控制到 ruser，rhost，所属用户组和登录 shell。所以有些用户认为它的功能似乎比 pam_access.so 更加灵活和强大一些。
使用 pam_listfile.so 模块配置的格式分为五个部分：分别是 item、onerr、sense、file 以及 apply。 其中：
* item=[tty|user|rhost|ruser|group|shell]：定义了对哪些列出的目标或者条件采用规则，显然，这里可以指定多种不同的条件。
* onerr=succeed|fail：定义了当出现错误（比如无法打开配置文件）时的缺省返回值。
* sense=allow|deny：定义了当在配置文件中找到符合条件的项目时的控制方式。如果没有找到符合条件的项目，则一般验证都会通过。
* file=filename：用于指定配置文件的全路径名称。
* apply=user|@group：定义规则适用的用户类型（用户或者组）。
**示例 : 不允许 bobo 账号通过 ssh 方式登录**
针对这种需求只需要更改 `/etc/pam.d/sshd` 文件，并在该文件中添加一行（一定要添加到第一行）
```diff
vim /etc/pam.d/sshd
++ auth required pam_listfile.so  item=user sense=deny file=/etc/pam.d/denyusers onerr=succeed
```
建立文件/etc/pam.d/denyusers，并在文件中写入用户信息
```
echo "bobo" > /etc/pam.d/denyusers
```
表示用户以 ssh 登录必须要通过 pam_listfile.so 模块进行认证，认证的对象类型是用户，采用的动作是禁止，禁止的目标是 `/etc/pam.d/denyuser` 文件中所定义的用户。
这样在该条目添加到该文件之后，使用 bobo 账号从其它主机远程 ssh 访问服务器会出现密码错误的提示，但是使用 root 或者其它用户则访问能够成功！