#
'5o, Aq pamo eudo _, yten
#0r:
ok(?:ay)?
_Ae Aq pamoto Aeutdo ‘xo, uen
# End the noncapturing gxoup-
$
# Assert position at the end of the string.
Regex options: Case insensitive, free-spacing
Regexflavur: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
This regex is essentially a simple test for one of seven literal, case-insensitive values. It
could be written in a number of ways. For example,  would also work fine, although for performance reasons it’s
generally better to reduce the amount of altermation via the pipe | operator in favor
of character classes and optional suffixes (using the ?> quantifier). In this case, the
performance difference is probably no more than a few microseconds, but it's a good
idea to keep regex performance issues in the back of your mind. Sometimes the differ-
ence between these approaches can surprise you.
All of these examples surround the potential match values with a noncapruring group
to limit the reach of the alternation operators. If we omit the grouping and instead use
something like  and $) tokens that assert position at the begining and end of the
string, this regex can be broken into three sets of digits separated by hyphens. The first
set allows any number from 000 to 899, but uses the preceding negative lookahead
(?!ooo|666)> to rule out the specific values 000 and 666. This kind of restriction can
be pulled off without lookahead, but having this tool in our arsenal dramatically sim-
plifies the regex. 1f you wanted to remove 000 and 666 from the range of valid area
numbers without using any sort of lookaround, you’d need to restructure  and $) anchors with word boundaries. Regular expression engines con-
sider all alphanumeric characters and the underscore to be word characters.
b(?!000|666) [0-8][0-9]{2}- (?!00)[0-9]{2}-(?!0000)[0-9]{4}\b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
See Also
The Social Security Number Verification Service (SSNVS) at lhzrp://www.socialsecurity
gov/employer/sn.tr offers two ways to verify over the Interet that names and Social
Security numbers match the Social Security Administration’s records.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains
word boundaries. Recipe 2.8 explains altemation. Recipe 2.9 explains grouping.
Recipe 2.12 explains repetition. Recipe 2.16 explains lookaround.
4.12 Validate Social Security Numbers | 291
---
## Page 308
4.13ValidateISBNs
Problem
You need to check the validity of an International Standard Book Number (ISBN),
which can be in either the older ISBN-10 or the current ISBN-13 format. You want to
allow a leading *ISBN" identifier, and ISBN parts can optionally be separated by hy-
phens or spaces. All of the following are examples of valid input:
*ISBN 978-0-596-52068-7
•ISBN-13: 978-0-596-52068-7
*978 0 596 52068 7
*9780596520687
•ISBN-10 0-596-52068-9
0-596-52068-9
Solution
You cannot validate an ISBN using a regex alone, because the last digit is computed
of an ISBN, whereas the subsequent code examples include a validity check for the final
using a checksum algorithm. The regular expressions in this section validate the format
digit.
Regular expressions
Three regex solutions follow that allow you to match ISBN-10s and ISBN-13s, either
exclusively or together. Each of the solutions is shown with and without free-spacing
and comments. JavaScript doesn’t suppor free-spacing, but with other programming
languages you can choose whichever suits you best.
In the free-spaced regexes, literal space characters have been escaped with backslashes.
Java’s free-spacing mode requires that even spaces within character classes be escaped.
ISBN-10:
(?:ISBN(?:-10)?:?=)？(?=[0-9x]{10}$|(?=(?: [0-9]+[-]){3})[-*0-9x]{13}$) 
[0-9]{1,5][-]?[0-9]+[-]?[0-9]+[-][0-9x]$
Regexoptions: None
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(? :ISBN(?: -10)?:?\ )?
# Optional ISBN/ISBN-10 identif1er ,
=)
# Basic format pre-checks (lookahead) :
[0-9x]{10}s
#
Require 10 digits/Xs (no separators)
x0#
[-\0-9x]{13}$
(?=(?:[0-9]+[-\]){3})
#
Require 3 separators
#
out of 13 characters total.
292 | Chapter 4: Validation and Formatting
---
## Page 309
# End format pre-checks.
[0-9]{1,5}[-\]}
# 1-5 digit group identifier.
[0-9]+[- ]?[o-9]+[-\ ]? # Publisher and title identifiers.
[0-9X]
# Check digit.
Regex options: Free-spacing
Regexflarer: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
ISBN-13:
^(?:ISBN(?:-13)?:?=)>(?=[0-9]{13}$|(?=(?:[0-9]+[-]){4})[-*0-9]{17}$)
97[89][-*]?[0-9]{1,5][-]?[0-9]+[-]?[0-9]+[-*]?[0-9]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(? :ISBN(?: -13)?:?\ )?
# Optional ISBN/ISBN-13 1identifier,
(?=
# Basic format pre-checks (lookahead):
[0-9]{13}$
#Require 13 digits (no separators).
:10#
（²=(?:[0-9]+[-\])(4}） #
Require 4 separators
[-\0-9]{17)$
out of 17 characters total.
# End format pre-checks.
97[89][-1]}
# ISBN-13 prefix.
[0-9]{1,5}[-\ ]}
# 1-5 digit group identifier.
[0-9]+[- ]?[0-9]+[-\ ]? # Publisher and title identifiers.
[6-0]
# Check digit.
Regex options: Free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
ISBN-10 or ISBN-13:
(?:ISBN(?:-1[03])?:?=)?(?=[0-9x]{10}$|(?=(?:[0-9]+[-]){3})
[-*0-9x]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[-]){4})[-*0-9]{17}$)
(?:97[89][-*]?)?[0-9]{1,5}[-*]?[0-9]+[-*]?[0-9]+[-*]?[0-9x]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(?:ISBN(?: -1[03])?:?\ )? # Optional ISBN/IS8N-10/ISBN-13 identif1er.
(?=
# Basic format pre-checks (lookahead) :
[0-9x](10)s
:x0#
#Require 10 digits/Xs (no separators).
(?=(?:[0-9]+[-\]){3})
#
Require 3 separators
[-\ 0-9x]{13}$
#
out of 13 characters total.
10#
${0t}[6-0][68]6
Or:
#
978/979 plus 10 digits (13 total).
（?=(?:[0-9]+[-\])(4}）#
Require 4 separators
4.13 Validate1S8Ns I 293
---
## Page 310
[-\0-9]{17)$
out of 17 characters total.
# End format pre-checks.
(?:97[89][- ]?]?
# Optional ISBN-13 prefix.
[0-9]{1,5}[-\]}
# 1-5 digit group identifier.
[0-9]+[- ]?[0-9]+[- ]?
?# Publisher and title identifiers.
[x6-0]
# Check digit.
Regexoptions: Free-spacing
Regexflarer: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
JavaScript example, with checksum validation
var subject = document.getElenentById(*isbn") value;
// Checks for ISBN-10 or ISBN-13 format
var regex = /~(?:ISBN(?:-1[03])?:? )?(?=[0-9x]{10}$∣
(?=(?:[0-9]+[- ]){3})[- 0-9x]{13}$|97[89][0-9]{10}$|
?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ])[0-9]{1,5)[- ]}
[0-9]+[- ]?[0-9]+[- ]?[0-9x]$/;
if (regex.test(subject)){
// Remove non IsBN digits, then split into an array
（)ds(/=([o]-)sI[ -]/)edxqns = sxeu xeA
4se、 01 4T u8tsse pue ^ sxeup . wox 4r8sp N81 teut au aoug //
var last = chars.pop();
var sun = 0;
var check, 1;
1f (chars.length == 9) {
// Compute the ISBN-10 check digit
chars.reverse();
for (1 = 0; 1 < chars.length; 1++) {
sum += (1 + 2) * parseInt(chars[1], 10);
check = 11 - (sum % 11);
1
if (check == 10) {
check = *x";
} else if (check
== 11) {
o, = x
}else {
// Compute the ISBN-13 check digit
for (1 = 0; 1 < chars.length; 1++) {
sum += (1 % 2 * 2 + 1) * parseInt(chars[i], 10);
check = 10 - (sum % 10);
if (check = 10){
0, = x
294 I Chapter 4: Validation and Formatting
---
## Page 311
1f (check = last) {
alert("valid Is8N");
}else {
alert("Invalid ISBN check digit");
}else {
alert("Invalid ISBN");
Python example, with checksum validation
inport re
inport sys
subject = sys-argv[1]
# Checks for ISBN-10 or ISBN-13 format
regex = re.compile("(?:IsBN(?:-1[03])?:?)?(?=[0-9x]{10}$|
(?=(?:[0-9]+[- ]){3})[- 0-9x]{13}$|97[89][0-9]{10}$|
（?=（?:[0-9]+[-]){4}）[-0-9]{17}s)(?:97[89][-])[0-9]{1,5}[- ]?
[0-9]+[- ]?[0-9]+[- ]?[0-9x]s"]
if regex.search(subject) :
# Remove non ISBN digits, then split into a list
chars = list(re.sub("[- ]|IsBN(?:-1[03])?:?", "*, subject))
last = chars,pop()
1f len(chars) == 9:
# Compute the ISBN-10 check digit
(((sxeup)pasxanax)apexaunua uT Kx xog (K)uT → (z + x))uns = [eA
If check = 10:
check = 11 - (val % 11)
check = *x*
elif check == 11:
check = *o"
else:
# Compute the ISBN-13 check digit
val = sum((x % 2 * 2 + 1) * int(y) for ×,y in enumerate(chars))