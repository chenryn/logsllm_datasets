Are you sure you want to proceed? [y/n] y
Device:
/dev/csmb_vg/csmb_lv
Blocksize:		4096
Device Size		100.00 GB (26214400 blocks)
Filesystem Size:	100.00 GB (26214398 blocks)
Journals:		3
Resource Groups: 	400
Locking Protocol:  	"lock_dlm"
Lock Table: 		"csmb:gfs2"
UUID:
  94297529-ABG3-7285-4B19-182F4F2DF2D7
```
::: para
在这个示例中，会在所有节点的 `/mnt/gfs2`{.filename} 中挂载
`/dev/csmb_vg/csmb_lv`{.filename} 文件系统。这个挂载点必须与您在
`/etc/samba/smb.conf`{.filename} 文件 `path =`{.literal} 选项中指定的
`share`{.filename} 目录位置值匹配，如 [第 11.5 节 "Samba
配置"](#ch-clustered-samba-CA.html#s1-samba-configuration-CA){.xref}
所述。
:::
::: para
要在逻辑卷 `/dev/csmb_vg/ctdb_lv`{.literal} 中生成托管 CTDB
状态信息的文件系统，请执行以下命令：
:::
``` screen
[root@clusmb-01 ~]# mkfs.gfs2 -j3 -p lock_dlm -t csmb:ctdb_state /dev/csmb_vg/ctdb_lv
```
::: para
注：这个命令指定的锁定表名称与在 `/dev/csmb_vg/csmb_lv`{.literal}
中生成文件系统示例中指定的锁定表名称不同。这样可区别在该文件系统中不同设备使用的锁定表名称。
:::
::: para
`mkfs.gfs2`{.command} 命令输出结果如下：
:::
``` screen
This will destroy any data on /dev/csmb_vg/ctdb_lv.
  It appears to contain a gfs2 filesystem.
Are you sure you want to proceed? [y/n] y
Device:
/dev/csmb_vg/ctdb_lv
Blocksize:  		4096
Device Size 		1.00 GB (262144 blocks)
Filesystem Size: 	1.00 GB (262142 blocks)
Journals:		3
Resource Groups: 	4
Locking Protocol: 	"lock_dlm"
Lock Table: 		"csmb:ctdb_state"
UUID:
  BCDA8025-CAF3-85BB-B062-CC0AB8849A03
```
::: para
在这个示例中，会在所有节点的 `/mnt/gfs2`{.filename} 中挂载
`/dev/csmb_vg/ctdb_lv`{.filename} 文件系统。这个挂载点必须与您在
`/etc/sysconfig/ctdb`{.filename} 文件 `CTDB_RECOVERY_LOCK`{.literal}
选项中指定的 `.ctdb.lock`{.filename} 文件位置匹配，如 [第 11.4 节 "CTDB
配置"](#ch-clustered-samba-CA.html#s1-CTDB-Configuration-CA){.xref}
所述。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-clustered-samba-CA.html#s1-CTDB-Configuration-CA}11.4. CTDB 配置 {.title}
:::
::: para
CTDB 配置文件位于 `/etc/sysconfig/ctdb`{.filename}。以下是必须为 CTDB
操作配置的字段：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `CTDB_NODES`{.literal}
    :::
-   ::: para
    `CTDB_PUBLIC_ADDRESSES`{.literal}
    :::
-   ::: para
    `CTDB_RECOVERY_LOCK`{.literal}
    :::
-   ::: para
    `CTDB_MANAGES_SAMBA`{.literal}（必须启用）
    :::
-   ::: para
    `CTDB_MANAGES_WINBIND`{.literal}（如果在成员服务器中云系则必须启用）
    :::
:::
::: para
以下示例演示了使用示例参数为 CTDB 操作设置强制字段的配置文件：
:::
``` screen
CTDB_NODES=/etc/ctdb/nodes
CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses
CTDB_RECOVERY_LOCK="/mnt/ctdb/.ctdb.lock"
CTDB_MANAGES_SAMBA=yes
CTDB_MANAGES_WINBIND=yes
```
::: para
这些参数的含义如下：
:::
::: variablelist
[`CTDB_NODES`{.literal}]{.term}
:   ::: para
    指定包含该集群节点列表文件的位置。
    :::
    ::: para
    `CTDB_NODES`{.literal} 参考只列出该集群节点 IP 地址的
    `/etc/ctdb/nodes`{.filename} 文件，例如：
    :::
    ``` screen
    192.168.1.151
    192.168.1.152
    192.168.1.153
    ```
    ::: para
    在这个示例中，每个节点中只有一个接口/IP 可用于集群/CTDB
    沟通并为客户端提供服务。但强烈建议每个集群节点都有两个网络接口，这样一个接口设置可专门用于集群/CTDB
    沟通，而另一个接口设置可专门用于公用客户端访问。在此使用正确的集群网络
    IP 地址，并保证在 `cluster.conf`{.filename} 文件中使用同一主机名/IP
    地址。同样，在 `public_addresses`{.filename}
    文件中为客户端访问使用正确的公共网络接口。
    :::
    ::: para
    `/etc/ctdb/nodes`{.filename}
    文件在所有节点中的一致性至关重要，因为顺序很重要，同时如果 CTDB
    在不同节点中找到的信息不同就会失败。
    :::
[`CTDB_PUBLIC_ADDRESSES`{.literal}]{.term}
:   ::: para
    指定列出用来访问由这个集群导出的 Samba 共享的 IP
    地址的文件位置。这些是您要在 DNS 中为集群的 Samba 服务器名称配置的
    IP 地址，也是 CIFS 客户端将要连接的地址。将集群 Samba
    服务器名称配置为有多个 IP 地址的 DNS 类型 A
    记录，并在该集群的客户端中发布轮询 DNS 。
    :::
    ::: para
    在这个示例中，我们在所有 `/etc/ctdb/public_addresses`{.filename}
    文件列出的地址中配置轮询 DNS 条目 `csmb-server`{.literal}。DNS
    将发布那些在集群中以轮询方式使用这个条目的客户端。
    :::
    ::: para
    每个节点中 `/etc/ctdb/public_addresses`{.filename} 文件的内容如下：
    :::
    ``` screen
    192.168.1.201/0 eth0
    192.168.1.202/0 eth0
    192.168.1.203/0 eth0
    ```
    ::: para
    这个示例使用目前在该网络中使用的三个地址。在您自己的配置中，请选择预期客户端可访问的地址。
    :::
    ::: para
    另外，这个示例显示了集群中 `/etc/ctdb/public_addresses`{.filename}
    文件的内容，其中三个节点，但却有四个公共地址。在这个示例中，IP 地址
    198.162.2.1 可由节点 0 和节点 1
    托管，只要有一个节点可用，客户端就可以访问这个地址。只有节点 0
    和节点 1
    都失败的时候，客户端才不能访问这个公共地址。所有其他公共地址只能分别由一个节点提供，因此如果只有在相应的节点可用时该公共地址方可用。
    :::
    ::: para
    节点 0 中的 `/etc/ctdb/public_addresses`{.filename}
    文件包含以下内容：
    :::
    ``` screen
    198.162.1.1/24 eth0
    198.162.2.1/24 eth1
    ```
    ::: para
    节点 1 中的 `/etc/ctdb/public_addresses`{.filename}
    文件包含以下内容：
    :::
    ``` screen
    198.162.2.1/24 eth1
    198.162.3.1/24 eth2
    ```
    ::: para
    节点 2 中的 `/etc/ctdb/public_addresses`{.filename}
    文件包含以下内容：
    :::
    ``` screen
    198.162.3.2/24 eth2
    ```
[`CTDB_RECOVERY_LOCK`{.literal}]{.term}
:   ::: para
    指定 CTDB
    内部用来恢复的锁定文件。这个文件必须位于共享存储中，这样所有集群节点都可访问。本小节中的示例使用
    GFS2 文件系统，该文件系统会挂载于所有节点的
    `/mnt/ctdb`{.filename}。这与将要导出 Samba 共享的 GFS2
    文件系统不同。这个恢复锁定文件的目的是防止出现裂脑（split-brain）。使用
    CTDB 较新的版本（1.0.112
    及之后的版本）时，可自选是否指定这个文件，只要有防止裂脑的机制即可。
    :::
[`CTDB_MANAGES_SAMBA`{.literal}]{.term}
:   ::: para
    当将其设定为 `yes`{.literal}
    启用它时，如果需要提供服务迁移/故障切换，则指定允许 CTDB 启动和停止
    Samba 服务。
    :::
    ::: para
    启用 `CTDB_MANAGES_SAMBA`{.literal} 时，应禁用 `smb`{.command} 和
    `nmb`{.command} 守护进程的自动 `init`{.command}
    启动，方法为执行以下命令：
    :::
    ``` screen
    [root@clusmb-01 ~]# chkconfig snb off
    [root@clusmb-01 ~]# chkconfig nmb off
    ```
[`CTDB_MANAGES_WINBIND`{.literal}]{.term}
:   ::: para
    当将其设定为 `yes`{.literal} 启用它时，则指定 CTDB
    可根据需要启动和停止 `winbind`{.command} 守护进程。当您在 Windows
    域或在 active directory 安全模式中使用 CTDB 时应该启用它。
    :::
    ::: para
    启用 `CTDB_MANAGES_WINBIND`{.literal} 时，应禁用 `winbind`{.command}
    守护进程的自动 `init`{.command} 启动，方法为执行以下命令：
    :::
    ``` screen
    [root@clusmb-01 ~]# chkconfig windinbd off
    ```
:::
:::
::: section
::: titlepage
# [⁠]{#ch-clustered-samba-CA.html#s1-samba-configuration-CA}11.5. Samba 配置 {.title}
:::
::: para
在这个示例中，Samba 配置文件 `smb.conf`{.filename} 位于
`/etc/samba/smb.conf`{.filename}。它包含以下参数：
:::
``` screen
[global]
	guest ok = yes
	clustering = yes
	netbios name = csmb-server
[csmb]
	comment = Clustered Samba
 	public = yes
	path = /mnt/gfs2/share
	writeable = yes
	ea support = yes
```
::: para
这个示例使用名称 `csmb`{.literal} 导出位于 `/mnt/gfs2/share`{.filename}
的共享。这与 `/mnt/ctdb/.ctdb.lock`{.filename} 中的 GFS2
共享文件系统不同，我们将后者在 `/etc/sysconfig/ctdb`{.filename} CTDB
配置文件中指定为 `CTDB_RECOVERY_LOCK`{.literal} 参数。
:::
::: para
在这个示例中，我们在首次挂载它时在 `/mnt/gfs2`{.filename} 中生成
`share`{.literal} 目录中。`clustering = yes`{.literal} 条目让 Samba 使用
CTDB。`netbios name = csmb-server`{.literal}
条目明确设置所有节点有通用的 NetBIOS
名称。如果您计划使用扩展属性，则允许要 `ea support`{.literal} 参数。
:::
::: para
`smb.conf`{.filename} 配置文件必须在所有集群节点中是一致的。
:::
::: para
Samba 还可使用 `net conf`{.command}
命令提供基于注册的配置，自动在集群成员间同步，而无需在集群节点间手动复制配置文件。有关
`net conf`{.command} 命令的详情请参考 `net`{.command}(8) man page。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-clustered-samba-CA.html#s1-starting-samba-CA}11.6. 启动 CTDB 和 Samba 服务 {.title}
:::
::: para
启动该集群后，必须挂载您生成的 GFS2 文件系统，如 [第 11.3 节 "GFS2
配置"](#ch-clustered-samba-CA.html#s1-GFS2-Configuration-CA){.xref}
所述。应为客户端访问设置 Samba `share`{.literal}
目录权限和集群节点中的用户帐户。
:::
::: para
在所有节点中执行以下命令启动 `ctdbd`{.command}
守护进程。因为这个示例是使用 `CTDB_MANAGES_SAMBA=yes`{.literal} 配置
CTDB，所以 CTDB 还在所有节点中启动 Samba 服务，并导出所有配置的 Samba
共享。
:::
``` screen
[root@clusmb-01 ~]# service ctdb start
```
::: para
CTDB 启动 Samba 、导出共享并稳定需要几分钟。执行 `ctdb status`{.command}
可显示 CTDB 状态，如以下示例所示：
:::
``` screen
[root@clusmb-01 ~]# ctdb status
Number of nodes:3
pnn:0 192.168.1.151     OK (THIS NODE)
pnn:1 192.168.1.152     OK
pnn:2 192.168.1.153     OK
Generation:1410259202
Size:3
hash:0 lmaster:0
hash:1 lmaster:1
hash:2 lmaster:2
Recovery mode:NORMAL (0)
Recovery master:0
```
::: para
当您看到所有节点都"OK"后，就可以安全使用集群的 Samba 服务器，如
[第 11.7 节 "使用集群的 Samba