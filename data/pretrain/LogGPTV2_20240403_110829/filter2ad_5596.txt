title:FSR: formal analysis and implementation toolkit for safe inter-domain
routing
author:Yiqing Ren and
Wenchao Zhou and
Anduo Wang and
Limin Jia and
Alexander J. T. Gurney and
Boon Thau Loo and
Jennifer Rexford
FSR: Formal Analysis and Implementation Toolkit for
Safe Inter-domain Routing
∗University of Pennsylvania
†Carnegie-Mellon University
‡Princeton University
Yiqing Ren∗ Wenchao Zhou∗ Anduo Wang∗
Alexander J.T. Gurney∗ Boon Thau Loo∗
Limin Jia†
Jennifer Rexford‡
{yiqingr, wenchaoz, anduo, agurney, boonloo}@cis.upenn.edu,
PI:EMAIL, PI:EMAIL
ABSTRACT
We present the demonstration of a comprehensive toolkit for
analyzing and implementing routing policies, ranging from
high-level guidelines to speciﬁc router conﬁgurations. Our
Formally Safe Routing (FSR) toolkit performs all of these
functions from the same algebraic representation of routing
policy. We show that routing algebra has a very natural
translation to both integer constraints (to perform safety
analysis using SMT solvers) and declarative programs (to
generate distributed implementations). Our demonstration
with realistic topologies and policies shows how FSR can
detect problems in an AS’s iBGP conﬁguration, prove suf-
ﬁcient conditions for BGP safety, and empirically evaluate
convergence time.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network
Architecture and Design
General Terms
Design, Languages, Experimentation
1. OVERVIEW
The Internet’s global routing system does not necessarily
converge, depending on how individual networks conﬁgure
their Border Gateway Protocol (BGP) policies. Since pro-
tocol oscillations cause serious performance disruptions and
router overhead, researchers devote signiﬁcant attention to
BGP stability (or “safety”).
To aid the design, analysis, and evaluation of safe interdo-
main routing, we propose the Formally Safe Routing (FSR)
analysis and implementation toolkit. FSR serves two im-
portant communities. For researchers, FSR automates im-
portant parts of the design process and provides a common
framework for describing, evaluating, and comparing new
safety guidelines. For network operators, FSR automates
the analysis of internal router (iBGP) and border gateway
(eBGP) conﬁgurations for safety violations. For both com-
munities, FSR automatically generates realistic protocol im-
plementations to evaluate real network conﬁgurations (e.g.,
to study convergence time) prior to actual deployment.
Copyright is held by the author/owner(s).
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
ACM 978-1-4503-0797-0/11/08.
FSR bridges analysis and implementation, by combining
routing algebras [3, 7] with recent advances in declarative
networking [4] to produce provably-correct implementations
of safe interdomain routing. Given policy conﬁgurations as
input, FSR produces an analysis of safety properties and a
distributed protocol implementation, as shown in Figure 1.
In this section, we brieﬂy summarize its main underlying
technologies. Our technical report [8] provides details of the
toolkit, including several examples and use cases.
Figure 1: FSR Architecture.
Policy Conﬁguration as Routing Algebra. FSR uses
routing algebra [3, 7] to allow researchers and network opera-
tors to express policy conﬁgurations in an abstract algebraic
form. A routing algebra is an abstract structure that de-
scribes how network nodes calculate routes, and the prefer-
ence for one route over another. FSR uses our extensions to
routing algebra for distinguishing import and export ﬁlter-
ing policies, to enable automated translation from a policy
conﬁguration to a distributed protocol implementation. We
support a wide range of policy conﬁgurations, ranging from
high-level guidelines (e.g., the Gao-Rexford guideline [1]) to
speciﬁc network conﬁgurations expressed as an instance of
the Stable Paths Problem (SPP) [2].
Safety Analysis. Given any algebra, FSR fully automates
the process of safety analysis, relieving users from the man-
ual and error-prone process of proving safety for each new
guideline or router conﬁguration. The key insight is that
the safety analysis can be translated automatically into inte-
ger constraints checkable by a standard SMT (Satisﬁability
Modulo Theories) solver. In a nutshell, a SMT solver de-
termines whether a set of constraints (i.e., ﬁrst-order logic
formulas) are satisﬁable with respect to a given background
theory (e.g., integer theory).
Given a policy conﬁguration written in routing algebra,
FSR automatically generates integer constraints for safety
analysis recognizable by the Yices SMT solver [9]. The
Declarative Networking EngineSMT Solver(Yices)Policy ConfigurationsRouting Mechanism(Path-vector)Safety Requirement(Strict Montonicity)Distributed ImplementationSafety Analysis Result440solver determines whether it is possible to jointly satisfy the
policy conﬁguration and the safety requirement of “strict
monotonicity” (the rightmost input in Figure 1, drawn from
previous work [7] on suﬃcient conditions for safety). If all
constraints can be satisﬁed, the routing system is provably
safe; otherwise, the solver outputs the minimal subset of the
constraints that are not satisﬁable to aid in identifying the
problem and ﬁne-tuning the conﬁguration.
Provably Safe Implementations. To enable an evalua-
tion of protocol dynamics and convergence time, FSR uses
our extended routing algebra to automatically generate a
distributed routing-protocol implementation that matches
the policy conﬁguration—avoiding the time-consuming and
error-prone task of manually creating an implementation.
Given the policy conﬁguration and a formal description of
the path-vector mechanism (the leftmost input in Figure 1),
FSR generates a correct translation to a Network Data-
log (NDlog) speciﬁcation, which is then executed using the
RapidNet declarative networking engine [5].
In practice,
FSR’s safe implementation can be used as an emulation plat-
form for studying BGP performance. (By changing the left
input in Figure 1, researchers can also experiment with al-
ternative routing mechanisms, as in Scenario Set D below.)
Our choice of NDlog is motivated by the following. First,
the declarative features of NDlog allow for straightforward
translation from the algebra to NDlog programs. Second,
NDlog results in compact speciﬁcations that have orders of
magnitude less code than imperative implementations. This
makes possible a clean and concise proof (via logical induc-
tions) of the correctness of the generated NDlog programs
with regard to the algebra. The compact speciﬁcations also
make it easy to incorporate alternative routing mechanisms
to the basic path-vector protocol. Third, NDlog’s roots in
logic and Datalog makes it amenable to the use of theo-
rem provers to verify correctness properties. Finally, prior
work [4] has shown that these declarative networks perform
eﬃciently relative to imperative implementations.
2. DEMONSTRATION PLAN
FSR provides a graphical user-interface for users to spec-
ify policy conﬁgurations using algebraic speciﬁcations, which
are compiled into NDlog programs and executed on Rapid-
Net. This engine allows for a simulation mode in ns-3 [6],
enabling comprehensive examination under various network
topologies and conditions, as well as a deployment mode
where diﬀerent hosts in a testbed environment execute the
deployed system over a real network.
In our demonstration, network traces obtained from ac-
tual NDlog execution runs are directed to the RapidNet
visualizer. The visualizer displays the network topology,
routing state, alongside actual performance statistics such
as bandwidth utilization. Our demonstration showcases the
following four scenario sets:
Scenario Set A: Provably Safe Guidelines. Our ﬁrst
case study presents scenarios where a researcher empiri-
cally evaluates policy guidelines using the distributed NDlog
implementation automatically generated from the algebraic
speciﬁcations. The researcher uses the FSR tool to analyze
policy guidelines for safety properties using Yices.
In ad-
dition, the researcher can use the declarative NDlog imple-
mentation generated by FSR to study the actual behavior of
the protocol when executed under the guideline constraints,
for instance, to measure the convergence time with respect
to the depth of the AS hierarchy.
Scenario Set B: Pinpoint iBGP Conﬁguration Er-
rors. We also emulate scenarios where a network operator
uses our FSR toolkit to study the safety properties of exist-
ing iBGP network conﬁgurations. We use the intradomain
topology from the Rocketfuel dataset as a basis. To exper-
iment with FSR’s ability to detect conﬁguration errors in
large network instances, we embed gadgets that are known
to cause oscillation in an iBGP setting. FSR detects the
errors in both its analysis and actual execution runs. In our
demonstration, we ﬁx these conﬁguration errors pointed out
by Yices, and demonstrate that the resulting iBGP conﬁg-
uration is safe, both in analysis and implementation.
Scenario Set C: eBGP Gadget Analysis. FSR’s appli-
cability extends beyond high-level guidelines and iBGP con-
ﬁgurations. Our third scenario is to use FSR to analyze well-
known eBGP gadgets, such as GoodGadget, BadGadget
and Disagree [2] when embedded into large network in-
stances. We execute these embedded gadgets using the
automatically-generated NDlog implementation, to visually
study their behavior in actual execution.
Scenario Set D: Alternative Routing Mechanisms. In
our ﬁnal scenario set, we demonstrate the ﬂexibility of the
FSR toolkit to support alternative routing mechanisms be-
yond the basic path-vector protocol, for instance, the Hybrid
Link-State and Path-Vector Protocol (HLP).
IIS-0812270,
Acknowledgments. This research was supported by NSF
grants
CNS-0830949,
CNS-0845552, CNS-1040672, AFOSR Grant No: FA9550-
08-1-0352, ONR Grant No: N00014-09-1-0770, and a gift
from Cisco Systems.
CCF-0820208,
3. REFERENCES
[1] Gao, L., and Rexford, J. Stable Internet routing
without global coordination. In ACM SIGMETRICS
(2000).
[2] Griffin, T. G., Shepherd, F. B., and Wilfong, G.
The stable paths problem and interdomain routing.
IEEE/ACM Trans. on Networking 10 (2002).
[3] Griffin, T. G., and Sobrinho, J. L. Metarouting. In
ACM SIGCOMM (2005).
[4] Loo, B. T., Condie, T., Garofalakis, M., Gay,
D. E., Hellerstein, J. M., Maniatis, P.,
Ramakrishnan, R., Roscoe, T., and Stoica, I.
Declarative networking. In Communications of the
ACM 52 (2009).
[5] Muthukumar, S. C., Li, X., Liu, C., Kopena, J. B.,
Oprea, M., and Loo, B. T. Declarative toolkit for
rapid network protocol simulation and experimentation.
In ACM SIGCOMM (demo) (2009).
[6] Network Simulator 3. http://www.nsnam.org/.
[7] Sobrinho, J. An algebraic theory of dynamic network
routing. IEEE/ACM Trans. on Networking 13 (2005).
[8] Wang, A., Jia, L., Zhou, W., Ren, Y., Loo, B. T.,
Rexford, J., Nigam, V., Scedrov, A., and
Talcott, C. FSR: Formal analysis and
implementation toolkit for safe inter-domain routing.
University of Pennsylvania Tech. Report MS-CIS-11-10
(2011), http://repository.upenn.edu/cis_reports/954/.
[9] Yices. http://yices.csl.sri.com/.
441