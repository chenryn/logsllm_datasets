for security comes when SRAM goes from un-powered to powered.
When SRAM is un-powered, both inverters output 0, because they
are off. When power is applied, the supply voltage rises quickly—
but not instantaneously—due to power supply current limits and
parasitic capacitance. Thus, during supply voltage rise, there is
a point where one inverter is active (i.e., begins to output a 1),
while the other remains off. The inverter that activates first is
determined largely by manufacturing-time variation [46]. In cases
where, due to random chance, inverters have very similar activation
voltages, the inverter that wins the hardware race is, at least partly,
determined by operational chaos.5 Because of this, the power-on
value of SRAM cells captures both manufacturing and operational
chaos. As discussed in §8, SRAM is better suited as a PUF than a
TRNG due to its increased sensitivity to manufacturing chaos; this
sensitivity and their dual-use nature makes SRAM vulnerable to
aging attacks.
We combine ROs and SRAM into a new unified hard-
ware security primitive RingRAM. RingRAM has a designer
controlled balance between operational and manufacturing
chaos that balances PUF and TRNG utility, while being im-
mune to environmental and aging attacks.
3 DESIGN
While Ring Oscillator (RO) and Static Random-Access Memory
(SRAM) security primitives seem different, we posit that they are
fundamentally similar and representative of opposite extremes on
a continuum of hardware security primitive designs. At the core of
both ROs and SRAM is a simple combinational delay loop: ROs have
5The compact and differential design of a SRAM cell naturally eliminates the effects of
systematic operational variation.
662ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Michael Moukarzel and Matthew Hicks
Previous State Current State O1 O2
EN1
1
-
-
O1
-
1
0
0
1
1
EN2
-
-
-
0
1
0
1
EN1
0
0
1
1
1
1
1
EN2
0
1
0
1
1
1
1
1
1
O2
O2 O1 Race Condition
O1
1
O2
1
O1 O2
Stable 1
Stable 0
Table 1: RingRAM logical operation
Comment
No Feeback
Stable 1
Stable 0
Hold output
Figure 1: RingRAM design evolution.
long, self-inverting loops and SRAMs have short, self-reinforcing
loops. ROs’ long loops enhance operational variation at the expense
of chaotic manufacturing variation, so ROs represent the True-
Random Number Generator (TRNG) extreme of the continuum.
SRAM’s compact loops enhance chaotic manufacturing variation
at the expense of operational and systematic manufacturing varia-
tion, so SRAM represents the Physical Unclonable Function (PUF)
extreme of the continuum. The problem is that ROs and PUFs are
extreme design points, hence ill-suited for the unified hardware
security primitive required by modern IoT systems. Even worse,
both suffer critical security weaknesses.
We design a unified hardware security primitive RingRAM that
is based on the same fundamentals as ROs and SRAM, but sys-
tematically designed from the ground-up to avoid the drawbacks
of both ROs and SRAM. RingRAM exposes and exploits the
region of the hardware security primitive design space be-
tween the two extremes. RingRAM combines the best design
aspects of ROs and SRAM to create a single, simple, primitive that
has low area overhead, provides an unbounded supply of high-
rate entropy, provides a robust device fingerprint, while addressing
their security weaknesses. While we develop RingRAM from the
ground-up, based on first principles, for clarity here, we describe its
construction starting from a RO and iteratively modify the design
to eliminate negatives. Figure 1 shows RingRAM’s evolution.
Step 1 - Base RO: ROs provide an unbounded amount of chaos-
influenced values, controlled by an AN D gate. Unfortunately, be-
cause ROs are sensitive to both systematic and chaotic operational
variation, the rate of entropy is low as the TRNG must wait for
sufficient chaotic operational variation to accumulate such that it
surpasses systematic variation. Additionally, the long chains of ROs
tend to average out chaos-induced manufacturing variation.
Step 2 - Entropy Source: In comparison to ROs, the entropy
source of SRAM is based on stabilization as opposed to noise accu-
mulation. The hardware-level race condition created by SRAM’s
cross-coupled inverters is sensitive to both manufacturing and op-
erational chaos, albeit much more sensitive to manufacturing chaos.
By switching to SRAM’s entropy source, there is no need to wait for
noise accumulation, increasing throughput, and because it is sensi-
tive to both sources of chaotic variation, area overhead decreases
because only one ring is required per PUF response bit.
Step 3 - Reduce Complexity and Overhead: An even number
of inverters in a feedback loop produces a stable response that
is dictated by the inverter that first drives the others at power-
on: a race condition. However, a race condition requires only two
inverter gates—there is no longer a need for the 100+ inverters
required by a RO. Thus, to minimize area overhead and complexity
of our primitive, we reduce the feedback loop to two inverters.
Eliminating long inverter loops reduces area overhead, but biases
the sensitivity of our primitive toward manufacturing chaos and
away from operational chaos, due to the loss of the averaging effect.
In §4, we systematically increase the number of inverters in a loop to
show how hardware designers can tune RingRAM’s bias—choosing
a point along the hardware security primitive design space.
Step 4 - Unbounded Entropy Even though the result of step
three is a more efficient structure, it is inherently bounded by re-
quiring a power cycle to produce a new response. ROs produce
unbounded responses by splicing an AN D gate into their feedback
path; this acts an an enable. While it may seem that this is a differ-
ent effect than a power cycle, we observe the practical effect of a
power cycle is to set all wires in the loop to 0. By splicing an AN D
gate into the start of each leg of the cross-coupled feedback path
(i.e., before each inverter input in this case) the wires in the loop
will be forced to 0—without a power cycle. Table 1 provides a truth
table of our primitives behavior. The key is that going from disabled
to enabled activates a race condition between the inverters, like a
power cycle in SRAM—yielding unbounded entropy.
Step 5 - Optimize Implementing AN D gates and inverters re-
quires the use of redundant inverters, as a AN D gate consists of
a N AN D gate and an inverter at the transistor level. By replacing
each AN D and inverter pair with a N AN D gate, we reduce the
required number of transistors from 16 to 8 per cell. We further
minimize complexity by utilizing a single enable signal for both
N AN D gates, as this does not change the premise of the race con-
dition. The final result of our design is a simple unified hardware
security primitive that provides unbounded entropy at a higher rate
RingRAMO1OutputOdd number of InvertersStep 1: Original ROOutputEven number of InvertersStep 2: Entropy SourceOutputStep 3: Reduce Complexity and OverheadO2EN1EN2Step 4: Unbounded EntropyOutputEN O1O2ENStep 5: OptimizeOutput663RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better with Age
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 3: The active learning circuit dynamically classifies cells as either
stable or unstable based on a brief, recent, history of cell responses.
Figure 2: Increasing the number of gates per cross-coupled chain increases
the proportion of unstable cells usable by TRNGs and the resulting entropy.
than ROs, is nearly as small and compact as SRAM, and is resistant
to known attacks.
4 CONTROLLING COMPOSITION
Manufacturing variation tends to produce inverters with different
turn-on voltages for a given SRAM cell. This means that the base
design of RingRAM heavily favors producing cells where one in-
verter reliably wins the hardware race over the other. While this is
great for PUFs, it severely limits the entropy provided by a set of
RingRAM cells, which require more random race outcomes. A sim-
ple solution is to add more cells, thereby increasing the entropy—at
least probabilistically. Unfortunately, this simple solution is inad-
equate, because it requires adding roughly 32 RingRAM cells for
every unstable cell required to meet TRNG entropy requirements.
A superior solution is to expose a knob that designers use to
modulate the proportion of unstable cells for a given set of cells.
This way, designers can tune the composition of cells to match
their specific needs, without the hardware overhead of the naïve
solution. Unstable cells are those with relatively similar gate delays;
hence, the goal is to create chains (i.e., half of the cross-coupled
feedback loop) with similar propagation delays. To accomplish this,
we leverage the law of large numbers [12]: "the average of the
results obtained from a large number of trials should be close to the
expected value and will tend to become closer to the expected value
as more trials are performed." In RingRAM’s case, you can view
each gate in a chain as a trial from a distribution of manufacturing-
time variation; longer chains equate to more trials, hence more
uniform total delay. Thus, as chain length increases,6 it becomes
more likely that a cell has chains with similar propagation delays,
i.e., is unstable.
To evaluate our ability to control RingRAM composition, we
implement 64 RingRAM cells on the FPGA platform from §8 and
collect 320K responses from each cell, repeating this for 2, 4, and 6
additional gates. We augment RingRAM’s layout to ensure longer
chains are strict extensions of shorter chains. The results in Figure 2
6Note that each chain must have an odd number of gates to produce a bi-stable circuit
when cross-coupled with the opposing chain.
Figure 4: Active learning increases entropy in the TRNG response across
configurations, with a 4-bit shift register ±1-bit bias being optimal in terms
of entropy and hardware overhead.
show that increasing the number of gates per chain averages-out
manufacturing-time variation, increasing the proportion of unsta-
ble cells. This, in turn, increases both min-entropy and Shannon’s
Entropy (see §8.2), with diminishing returns. We observe that this
is the result of more slightly unstable cells being added than per-
fectly (i.e., 50%) unstable cells. The net effect is a reduction in
the number of transistors required to produce an unstable
cell by between 44% and 60%, compared to adding more cells.
Thus, this is an effective approach to control where a RingRAM
implementation lies on the PUF/TRNG continuum.
5 ON-CHIP PROCESSING
While increasing the number of gates per chain does increase the
proportion of unstable cells (i.e., total entropy), it does not alleviate
the burden on software to distill-out randomness (i.e., entropy
throughput). As explained in §8.2, software must take many more
RingRAM responses than it needs bits-of-randomness, because
each RingRAM output is only partially influenced by chaos. In
the case of the base RingRAM design on our FPGA, this influence
ranges between .02 and .06 random-bits per RingRAM response bit,
depending on entropy metric. Even with controlled composition,
entropy is still below 1.0. A second source of concern is the noise
in the PUF response, which increases as chains lengthen. Thus, the
current RingRAM interface still requires extreme software post-
processing to separate and refine concerns.
The root cause of these issues is the mixing of PUF response
and TRNG response. The ideal unified hardware security prim-
itive provides separate PUF and TRNG interfaces, where the
1357Gates per chain0.00.20.40.60.81.0Proportion of RingRAM cellsStable cellsUnstable cellsmin-entropyShannon's EntropyReliability0.00.20.40.60.81.0Entropy0.00.20.40.60.81.0ReliabilityActive Learning CircuitRingRAM CellENResponseClassiﬁcationShift Reg(N-bit)ThresholdCheck12345678Bias (+/-)12345678910111213141516Shift register sizeShannon's Entropy12345678Bias (+/-)12345678910111213141516Shift register sizemin-entropy0.00.50.60.70.80.91.0Entropy664ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Michael Moukarzel and Matthew Hicks
Figure 5: RingRAM’s single-interface re-
sponses.
Figure 6: Statically-classified RingRAM re-
sponses using enrollment data.
Figure 7: Active learning’s dynamic classifica-
tion response with a 4-bit shift register and ±1
bias.
PUF response is low noise and the TRNG response is high en-
tropy. To achieve this ideal, we enhance RingRAM’s design with
the ability to dynamically partition cells into stable and unstable
and send the cell responses to their respective, software accessible,
interfaces. This increases the entropy throughput to software, but
the total entropy provided by a set of RingRAM cells stays the same.
Active learning classifies each RingRAM cell by first collecting
several of its responses. If the number of 1’s in the response is within
a threshold (determined experimentally later) of the 50% count, then
the cell is marked at unstable; otherwise, the cell is marked as stable.
The TRNG register collects only unstable cell responses, increasing
throughput to software, while the PUF register replaces unstable
cell responses based on bias, reducing noise. Figure 3 depicts how
the active learning circuit integrates with a RingRAM cell.
This design presents two knobs to designers: shift register size
and classification threshold. Shift register size dictates how many
bits are available for the classification decision. Increasing shift
register size reduces misclassification at the cost of increased area.
On the other hand, the classification threshold (i.e., bias) dictates
the allowable number of bits opposing the majority for a cell to
be classified as unstable. A high bias, relative to shift register size,
produces more unstable cells, increasing total entropy and TRNG
throughput, while reducing PUF noise. A low bias results in more
stable cells, increasing average entropy and the number of PUF bits.
To determine the optimal parameter settings, we sweep through
both parameters with an emphasis on entropy (because RingRAM
is PUF-dominant). For this exploration, we use the 5-gate-per-chain
64-cell FPGA implementation from §4. For each parameter com-
bination, we capture 320K TRNG responses. Figure 4 shows the
results for both entropy metrics in a two-dimensional heat map.
In all cases, active learning increases entropy compared to the
original design (the white boxes on the upward diagonal). We ob-
serve that, across shift register sizes, the optimal bias is ±1; even
cells with low entropy are helpful to the overall TRNG perfor-
mance. A 4-bit shift register maximizes entropy, while mini-
mizing hardware overhead. The resulting 4-bit±1-bit configura-
tion yields a Shannon’s Entropy >0.9999 (+16x) and a min-entropy
of 0.981 (+35x), meaning software has to waste up to 35x less time
acquiring and processing RingRAM data.
Besides reducing software’s burden, it turns out that active learn-
ing’s dynamic classification has another advantage: dynamic clas-
sification better leverages bursts of randomness, while avoid-
ing bursts of uniformity than static classification.7 The progression
of TRNG responses from the base, single interface design shown in
Figure 5, to software classification shown in Figure 6, to the active
learning’s output shown in Figure 7 makes clear the advantage of
dynamic, on-chip classification.
6 GETTING BETTER WITH AGE
Unlike software, electronic devices change over time due to oper-
ational and utilization effects in a process called aging. There are
four main contributors to device aging: Hot-Carrier Injection (HCI),
Time-Dependant Dielectric Breakdown (TDDB), Electro-Migration
(EM), and Negative-Bias Temperature Instability (NBTI) [27]; the
most significant for modern transistors being NBTI [34]. NBTI
increases a gate’s threshold voltage (roughly, the voltage that it
requires at its input to start outputting a logic 1). This makes it
slower to switch from a 0 to a 1. NBTI is due to the accumula-
tion of contamination in the dielectric of a transistor (specifically a
PMOS) [23].8 Because contamination only occurs when a transistor
is conducting charge between the source and the drain (i.e., on),
NBTI in cross-coupled stable circuits like RingRAM and SRAM is
data dependent.9
While data-dependent aging is a serious security risk for SRAM-
based hardware security primitives [27, 30, 32, 35], we leverage