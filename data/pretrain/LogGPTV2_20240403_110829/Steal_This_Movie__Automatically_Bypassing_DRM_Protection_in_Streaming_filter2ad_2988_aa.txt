title:Steal This Movie: Automatically Bypassing DRM Protection in Streaming
Media Services
author:Ruoyu Wang and
Yan Shoshitaishvili and
Christopher Kruegel and
Giovanni Vigna
Steal This Movie: Automatically Bypassing DRM 
Protection in Streaming Media Services
Ruoyu Wang, University of California, Santa Barbara and Tsinghua University;  
Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna,  
University of California, Santa Barbara
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Steal This Movie - Automatically Bypassing DRM Protection in Streaming
Media Services
Ruoyu Wang1,2, Yan Shoshitaishvili1, Christopher Kruegel1, and Giovanni Vigna1
1University of California, Santa Barbara, CA, USA
{fish,yans,chris,vigna}@cs.ucsb.edu
2Network Sciences and Cyberspace, Tsinghua University, Beijing, China
Abstract
Streaming movies online is quickly becoming the way in
which users access video entertainment. This has been
powered by the ubiquitous presence of the Internet and the
availability of a number of hardware platforms that make
access to movies convenient. Often, video-on-demand
services use a digital rights management system to prevent
the user from duplicating videos because much of the
economic model of video stream services relies on the
fact that the videos cannot easily be saved to permanent
storage and (illegally) shared with other customers. In this
paper, we introduce a general memory-based approach that
circumvents the protections deployed by popular video-on-
demand providers. We apply our approach to four different
examples of streaming services: Amazon Instant Video,
Hulu, Spotify, and Netﬂix and we demonstrate that, by
using our technique, it is possible to break DRM protection
in a semi-automated way.
1
Introduction
Digital Rights Management (DRM) is used by content
distributors to restrict the way in which content may be
used, transferred, and stored by users. This is done for sev-
eral reasons. To begin with, content creators try to prevent
content from reaching non-paying users through pirated
copies of the content. While estimates of the cost impact of
piracy are considered to be hugely inaccurate and research
on this issue is inconclusive [41], they vary from $446
million [14] to $250 billion [8] for the movie and music
industries in the US alone, and are far from insigniﬁcant in
other parts of the world [12, 27]. Consequently, DRM is
used to protect the media distributed through subscription-
based services. In these services, such as Netﬂix, Spotify,
Hulu, and Amazon Prime Instant Video, a user pays a re-
curring fee for access to a large database of media. This
media can be played as much and as often as the user
wishes, but becomes unavailable when a user stops paying
for the service. The need to protect content in this scenario
is obvious: if users can save the content for playback later
and simply cancel their account, the streaming service will
lose substantial amounts of money.
DRM protection of media, especially passive media such
as movies and music, has a fundamental difﬁculty. In or-
der to enable the viewing of content, such content must at
some point be decrypted. Different DRM schemes put this
decryption at various stages of the media playback pipeline.
Schemes such as High-bandwidth Digital Copy Protection
(HDCP) [9] attempt to put this decryption outside of the
reach of software and into the media playback hardware
itself. However, use of these schemes are not always feasi-
ble. Speciﬁcally, many mobile devices, virtual machines,
and lower-end computers do not support schemes such as
HDCP. To function on such devices, DRM schemes must
carry out decryption in software. On top of this limita-
tion, hardware DRM schemes suffer from a problem of
being too brittle against attacks. This was demonstrated,
in the case of HDCP, with the compromise of the HDCP
master keys [30], which rendered that DRM scheme use-
less. DRM schemes that do not rely on special hardware
support are much more ﬂexible in recovering from such
compromises.
In order for an effective DRM scheme to be imple-
mented, the possible attacks that it could succumb to must
be well understood. In this paper, our goal is to examine
one such attack: the identiﬁcation of the transition between
encrypted and decrypted data in the media player software.
To this end, we introduce MovieStealer, an approach
for the automatic defeating of DRM in media playing pro-
grams. This approach takes advantage of several central
intuitions. Our ﬁrst intuition is that most data-processing
operations, and speciﬁcally decryption operations, are car-
ried out on buffers of data. This allows us to concentrate
our analysis on the ﬂow of data between buffers, making
the analysis task considerably more tractable. Secondly,
we observe that all popular media services of which we are
aware utilize existing media codecs. We believe that this is
because coming up with new codecs is a very complicated
task, and many of the technologies behind efﬁcient codecs
USENIX Association  
22nd USENIX Security Symposium  687
1
are patented. Additionally, high-deﬁnition codecs are ex-
tremely performance-intensive, and many media player
devices rely on hardware support to decode them. This
reliance on hardware support makes changing these codecs
extremely difﬁcult, making it far easier to license an ex-
isting codec than to create a new one. Utilizing this ob-
servation, we are able to identify buffers that contain data
similar to what we would expect to be present in popular
codecs. Our ﬁnal observation is that we can distinguish
three distinct classes of data by carrying out a statistical
analysis: encrypted data (which will possess high random-
ness and high entropy), encoded media data (which will
possess low randomness and high entropy), and other data
(which will possess lower randomness and entropy).
We utilize these observations and develop an approach
that tracks the ﬂow of data from buffer to buffer within
a program and identiﬁes, using information theoretical
techniques, the point in the program at which the data
is decrypted. After automatically identifying this loca-
tion in the program, MovieStealer dumps the decrypted
stream. This stream can then be reconstructed into an un-
protected media ﬁle and played back in an unauthorized
media player.
Furthermore, we design optimizations that allow this
online approach to be carried out on a running media player.
Such optimizations are necessary due to the performance-
demanding nature of the services that we target.
We implemented this approach and evaluated it on sev-
eral streaming services, namely Netﬂix, Amazon Instant
Video, Hulu, and Spotify. The latter is a music streaming
service, while the others are video streaming services. All
of these services are real-time, high-performance products
which must be analyzed with low overhead in order to
function. In all cases, MovieStealer is able to successfully
pinpoint the decryption location and dump the decrypted
stream. After this point, we consider the DRM protec-
tion to be broken. We have also implemented media ﬁle
reconstructors to recover a playable media ﬁle.
To showcase our optimizations, we have also evaluated
our approach against GPG, an open-source cryptographic
suite.
The task of dumping the decrypted stream is completely
automated. MovieStealer dynamically analyzes a program
while it is used to play media, and dumps the decrypted
streams. However, the ﬁnal step of reconstruction requires
a component to be developed for each protocol. We have
implemented three such components to cover our four
target streaming services. Since we consider the DRM
to be bypassed as soon as we recover the decrypted data,
automating this last step is out of the scope of our DRM
analysis.
MovieStealer was developed in order to gain insight
into the weaknesses of cryptographic DRM schemes. The
implementation and utilization of such an approach for
piracy purposes is, of course, illegal. Our intention is not
to aid illegal activity, and we present a discussion on ethics
and legality in Section 7.
In summary, we make the following contributions:
1. We present an approach capable of automatically identi-
fying and exploiting weaknesses in DRM scheme imple-
mentations by identifying cryptographic functionality
in real-time, with no ofﬂine analysis, and duplicating
the decrypted data.
2. To make such an approach work on performance-
demanding applications and to reduce the amount of
time the approach requires to locate the decrypted data,
we utilize a set of optimizations that would be useful
for any similar dynamic analysis approaches.
3. We show the effectiveness of this approach on four pop-
ular streaming services (Amazon Instant Video, Hulu,
Netﬂix, and Spotify) and a general-purpose encryption
tool (GPG).
4. To the best of our knowledge, we demonstrate the ﬁrst
publicly-described approach to duplicate PlayReady-
protected content (such as modern versions of Netﬂix)
without the use of a screen scraper. While we have
been informed that there have been other attacks on
PlayReady, we have been unable to ﬁnd any public
evidence of this fact.
5. Finally, we suggest several countermeasures that ven-
dors of content protection schemes could employ to
resist an attack such as MovieStealer. These range from
technical solutions, attacking the technical details of
our approach, to social solutions, such as increased use
of watermarking to make piracy more prosecutable.
2 Background and Related Work
Over the last several decades, there has been an arms
race between content owners, wishing to restrict the use
of their content, and content consumers, who wish to use
such content in an unrestricted way. New Digital Rights
Management techniques are created on a regular basis, and
new workarounds are quickly found to counter them. In
this section, we survey several popular DRM techniques to
better frame the research presented in this paper.
DRM schemes can generally be split into two classes:
non-cryptographic DRM schemes and cryptographic DRM
schemes. The former relies on verifying that the user is au-
thorized to use the protected content by somehow utilizing
a physical aspect of this content. Of course, this requires
that the content ships with something like a manual, disk,
or hardware dongle to use for veriﬁcation. With the ad-
vent of digital distribution for software and multimedia,
non-cryptographic DRM schemes have fallen in popularity.
On the other hand, cryptographic DRM schemes work
by cryptographically verifying that the user attempting
to access the content is authorized to do so. This ap-
proach is usable for digital distribution of content, and
688  22nd USENIX Security Symposium 
USENIX Association
2
is the paradigm according to which modern DRM schemes
are developed.
In this paper, we include link-protection schemes, such
as HDCP, which protect content in transit from being in-
tercepted, with true Digital Rights Management systems,
which ensure that only an authorized user is accessing
the content in question. From the viewpoint of removing
the protection, these two categories of content protection
schemes are quite similar, and our system is general enough
to handle both.
2.1 Cryptographic DRM Techniques
One of the early examples of cryptographic DRM tech-
niques was the DVD Content Scramble System [44]. CSS
is an encryption scheme to prevent DVDs from being
played on unauthorized devices. It functioned by assigning
a limited number of keys to manufacturers of DVD playing
devices. These keys would then be used to decrypt the key
chain of a given DVD and play back the video. CSS was
broken in 1999 through cryptanalysis by a group of secu-
rity researchers including Jon Lech Johansen (afterwards
known as DVD Jon) [48]. This was done by reverse engi-
neering a software DVD player to identify the encryption
algorithm.
CSS was a forerunner of the type of copy protection that
MovieStealer was created to analyze. While DRM schemes
have since evolved to be more ﬂexible, the basic premise
remains the same: content is shipped in an encrypted form
(whether through physical media or as a download), and is
decrypted by an authorized player.
2.2 Hardware-based DRM
Hardware-based DRM has been around since the early
days of copy protection. Early examples of this class of
approaches are copy-protection dongles shipped with soft-
ware [49]. Software protected by such dongles does not
run without the presence of the dongle, and duplication of
the dongle is infeasible. While early dongles simply con-
tained static information that would be checked in software,
modern dongles are complex cryptographic co-processors
that actually carry out operations, such as decrypting the
program code, on behalf of the protected program.
A speciﬁc adaptation of this into the realm of multime-
dia is HDCP [9], a link protection scheme which moves
the decryption of media content outside of the computer.
In a perfect implementation of this scheme, all content
handled by the computer is always encrypted [11], and
the decryption occurs in the media playback hardware
(such as the monitor) itself. This would be problematic
for our approach, but is not a problem in practice for sev-
eral reasons. To begin with, all of our surveyed streaming
services allow playback without HDCP. This is necessary
because systems such as netbooks and virtual machines
lack support for HDCP, and these services attempt to re-
Encryption type
DRM Platform Connection
PlayReady
RTMPE
Spotify
No
Yes
Yes
File
No
No
Yes
Stream
Yes
No
No
Table 1: The present encryption locations for our analyzed
platforms.
main compatible with them. Additionally, HDCP does not
integrate seamlessly with the encryption used in the media
streaming services of which we are aware. Encrypted con-
tent streamed from these services must ﬁrst be decrypted,
usually in memory, before being re-encrypted with HDCP.
While some media devices exist that can handle this step
in dedicated hardware, thus disallowing any access to the
unencrypted stream, general purpose consumer devices are
not among them. This means that on such devices, even
in the presence of HDCP, MovieStealer can intercept the
protected content on such devices while it is unencrypted.
Finally, HDCP has been irrevocably broken with the leak of
the HDCP master key. Hardware-based DRM schemes like
HDCP are very hard to patch because they need to work
on many devices that are not easily upgradeable. While
the upgradeability of these devices might be improved in
the future, there is currently no clear solution to this issue.
2.3 Streaming DRM Platforms
We analyze three different DRM schemes used by four
platforms in this paper: Microsoft PlayReady (used by Net-
ﬂix) [10], RTMPE (a link protection mechanism used by
Adobe’s Flash streaming platforms such as Amazon Instant
Video and Hulu) [3], and Spotify’s content protection [15].
We stress that our approach, as implemented by Movi-
eStealer, does not exploit any particular vulnerability inher-
ent to any single platform. Instead, these DRM schemes
are vulnerable due to their inherent design, and not the
inadequacies of any speciﬁc vendor or organization.
In this section, we provide some details about how these
schemes function, in order to better frame our approach.
2.3.1 PlayReady
Microsoft’s PlayReady DRM, as implemented in its
Silverlight streaming platform, which is used most promi-
nently by Netﬂix, is a cross-platform content protection
mechanism. PlayReady supports individualization, mean-
ing that the media is encrypted with a content key, which
is then encrypted with different keys for every user. Ev-
ery time a user streams content on Silverlight, PlayReady
provides an individualized license, ensuring that the con-
tent key can be decrypted and protected content viewed
only by the intended recipient. The process to play back
PlayReady-protected media using Silverlight comprises
USENIX Association  
22nd USENIX Security Symposium  689
3
several steps. To improve understanding, we present a
high-level overview of these steps.
Metadata. To initialize playback, the Silverlight client
requests metadata from the media server provider (such as
Netﬂix). This metadata is a ﬁle that contains available res-
olutions and bit rates for the content, whether the payload
is encrypted or not, the domain name of the license server,
and the expiration time of the request.
License. If the metadata speciﬁes that the payload is en-
crypted, the Silverlight client must acquire the license (con-
taining the decryption key) from the license server, which
is speciﬁed in the metadata. When a client sends the license
request to the license server, the license server responds
with the Individualized Black Box (IBX). The IBX is a cus-
tom, easily-upgradeable, and highly-obfuscated DLL that
can be customized by individual content providers. Using
the IBX, the client generates an individualized request to
the license server.
The license server veriﬁes this request and responds with
a license. The client uses the IBX to decrypt the license
and extract the content key, which is a 128-bit AES key.
Data. Having acquired the license, the client can now
play back the protected content. This content takes the
form of a fragmented MPEG-4 ﬁle transferred from the
service provider. The protection works by encrypting the
media stream data, while leaving the headers and stream
metadata unencrypted. The data is encrypted using AES
and is decrypted using the key acquired from the license
server.
Performance. PlayReady has several performance re-
quirements. To begin with, as with any network service,
the client must be able to communicate with the server
without letting the connection time out. Additionally, as a
security measure against piracy, the IBX and correspond-
ing license request have an expiration time, and the license
will stop working after this timeout has elapsed. Finally,
the media player (Netﬂix) itself has a minimum perfor-
mance threshold, below which it will stop processing the
stream and display an error. A successful online analy-
sis of a PlayReady-protected media player must have a
low-enough overhead to allow the player to meet these
performance obligations.
2.3.2 RTMPE
RTMPE is a lightweight link protection mechanism de-
veloped by Adobe on top of the Real Time Messaging
Protocol (RTMP) [2]. The addition to RTMP is a simple
encryption layer.