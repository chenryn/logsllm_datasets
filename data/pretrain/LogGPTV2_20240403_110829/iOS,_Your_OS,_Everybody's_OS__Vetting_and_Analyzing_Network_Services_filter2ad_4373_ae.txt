[25] Writing a TCP-based server. https://developer.apple.com/libr
ary/archive/documentation/NetworkingInternet/Conceptua
l/NetworkingTopics/Articles/UsingSocketsandSocketStrea
ms.html#//apple_ref/doc/uid/CH73-SW8.
[26] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise con-
text, ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for
Android apps. In ACM Sigplan Notices, 2014.
[27] M. Backes, S. Bugiel, and E. Derr. Reliable third-party library detection
in android and its security applications. In ACM CCS, 2016.
[28] X. Bai, L. Xing, N. Zhang, X. Wang, X. Liao, T. Li, and S.-M. Hu.
Discovering and exploiting novel security vulnerabilities in Apple
zeroconf. In Black Hat USA, 2016.
[29] B. S. Baker. On ﬁnding duplication and near-duplication in large soft-
ware systems. In IEEE Working Conference on Reverse Engineering,
1995.
2430    29th USENIX Security Symposium
USENIX Association
[30] I. D. Baxter, A. Yahin, L. Moura, M. Sant’Anna, and L. Bier. Clone
detection using abstract syntax trees. In IEEE ICSM, 1998.
[31] R. Bonett, K. Kaﬂe, K. Moran, A. Nadkarni, and D. Poshyvanyk. Dis-
covering ﬂaws in security-focused static analysis tools for Android
using systematic mutation. In USENIX Security Symposium, 2018.
[32] W. Bu, M. Xue, L. Xu, Y. Zhou, Z. Tang, and T. Xie. When program
analysis meets mobile security: An industrial study of misusing An-
droid Internet sockets. In ACM FSE, 2017.
[33] K. Chen, X. Wang, Y. Chen, P. Wang, Y. Lee, X. Wang, B. Ma, A. Wang,
Y. Zhang, and W. Zou. Following devil’s footprints: Cross-platform
analysis of potentially harmful libraries on Android and iOS. In IEEE
S&P, 2016.
[34] S. Chen, M. Xue, Z. Tang, L. Xu, and H. Zhu. Stormdroid: A streamin-
glized machine learning-based system for detecting Android malware.
In ACM ASIACCS, 2016.
[35] S. Chen, T. Su, L. Fan, G. Meng, M. Xue, Y. Liu, and L. Xu. Are mobile
banking apps secure? What can be improved? In ACM ESEC/FSE,
2018.
[36] S. Chen, M. Xue, L. Fan, S. Hao, L. Xu, H. Zhu, and B. Li. Automated
poisoning attacks and defenses in malware detection systems: An
adversarial machine learning approach.
In Elsevier Computers &
Security, 2018.
[37] S. Chen, L. Fan, C. Chen, M. Xue, Y. Liu, and L. Xu. GUI-Squatting
In IEEE
Attack: Automated generation of Android phishing apps.
TDSC, 2019.
[38] S. Chen, L. Fan, G. Meng, T. Su, M. Xue, Y. Xue, Y. Liu, and L. Xu.
An empirical assessment of security risks of global Android banking
apps. In ACM/IEEE ICSE, 2020.
[39] Y. Dang, R. Wu, H. Zhang, D. Zhang, and P. Nobel. ReBucket: A
method for clustering duplicate crash reports based on call stack simi-
larity. In IEEE ICSE, 2012.
[40] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund, S. Nürn-
berger, and A.-R. Sadeghi. MoCFI: A framework to mitigate control-
ﬂow attacks on smartphones. In NDSS, 2012.
[41] Z. Deng, B. Saltaformaggio, X. Zhang, and D. Xu. iris: Vetting private
API abuse in iOS applications. In ACM CCS, 2015.
[42] L. Deshotels, R. Deaconescu, M. Chiroiu, L. Davi, W. Enck, and A.-R.
Sadeghi. SandScout: Automatic detection of ﬂaws in iOS sandbox
proﬁles. In ACM CCS, 2016.
[43] L. Deshotels, R. Deaconescu, C. Carabas, I. Manda, W. Enck, M. Chi-
roiu, N. Li, and A.-R. Sadeghi. iOracle: Automated evaluation of access
control policies in iOS. In ACM AsiaCCS, 2018.
[44] L. Deshotels, C. Carabas,, J. Beichler, R. Deaconescu, and W. Enck.
Kobold: Evaluating decentralized access control for remote NSXPC
methods on iOS. In IEEE S&P, 2020.
[45] Androguard. code.google.com/p/androguard.
[46] Y. Duan, M. Zhang, A. V. Bhaskar, H. Yin, X. Pan, T. Li, X. Wang, and
X. Wang. Things you may not know about Android (un) packers: A
systematic study based on whole-system emulation. In NDSS, 2018.
[47] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting privacy
leaks in iOS applications. In NDSS, 2011.
[48] J. Feichtner and C. Rabensteiner. Obfuscation-resilient code recogni-
tion in Android apps. In IEEE ARES, 2019.
[49] J. Feichtner, D. Missmann, and R. Spreitzer. Automated binary analysis
on iOS-a case study on cryptographic misuse in iOS applications. In
ACM Conference on Security and Privacy in Wireless and Mobile
Networks, 2018.
[50] C. Gormley and Z. Tong. Elasticsearch: The Deﬁnitive Guide: A
Distributed Real-Time Search and Analytics Engine. " O’Reilly Media,
Inc.", 2015.
[51] B. Guangdong and Q. Zhang. 3G/4G Intranet scanning and its applica-
tion on the wormhole vulnerability. 2017.
[52] J. Han, J. Pei, and Y. Yin. Mining frequent patterns without candidate
generation. In ACM Sigmod, 2000.
[53] IDA Pro Disassembler and Debugger.
[54] M. Ikram and M. A. Kaafar. A ﬁrst look at mobile ad-blocking apps.
In IEEE International Symposium on Network Computing and Applica-
tions, 2017.
[55] Y. J. Jia, Q. A. Chen, Y. Lin, C. Kong, and Z. M. Mao. Open doors
for Bob and Mallory: Open port usage in Android apps and security
implications. In IEEE EuroS&P, 2017.
[56] M. E. Joorabchi and A. Mesbah. Reverse engineering iOS mobile
applications. In IEEE Working Conference on Reverse Engineering,
2012.
[57] T. Kamiya, S. Kusumoto, and K. Inoue. CCFinder: A multilinguistic
token-based code clone detection system for large scale source code.
2002.
[58] D. Kennedy, J. O’gorman, D. Kearns, and M. Aharoni. Metasploit: The
penetration tester’s guide. No Starch Press, 2011.
[59] J. T. Kent. Information gain and a general measure of correlation. 1983.
[60] R. Komondoor and S. Horwitz. Using slicing to identify duplication
in source code. In International Static Analysis Symposium. Springer,
2001.
[61] A. Kurtz, A. Weinlein, C. Settgast, and F. Freiling. Dios: Dynamic
privacy analysis of iOS applications. 2014.
[62] Y. Lee, X. Wang, K. Lee, X. Liao, X. Wang, T. Li, and X. Mi. Un-
derstanding iOS-based crowdturﬁng through hidden UI analysis. In
USENIX Security Symposium, 2019.
[63] V. I. Levenshtein. Binary codes capable of correcting deletions, inser-
tions, and reversals. In Soviet Physics Doklady, 1966.
[64] H. Moore. Security ﬂaws in universal plug and play: Unplug. don’t
play. 2013.
[65] K. Moran, M. Linares-Vásquez, C. Bernal-Cárdenas, C. Vendome, and
D. Poshyvanyk. Automatically discovering, reporting and reproducing
Android application crashes. In IEEE ICST, 2016.
[66] N. Nethercote and J. Seward. Valgrind: a framework for heavyweight
dynamic binary instrumentation. In ACM Sigplan Notices, 2007.
[67] D. Orikogbo, M. Büchler, and M. Egele. CRiOS: Toward large-scale
iOS application analysis. In ACM SPSM, 2016.
[68] X. OS. Mach-O ﬁle format reference. 2009.
[69] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna. Ex-
ecute this! Analyzing unsafe and malicious dynamic code loading in
Android applications. In NDSS, 2014.
[70] S. Rahaman, Y. Xiao, S. Afrose, F. Shaon, K. Tian, M. Frantz,
M. Kantarcioglu, and D. D. Yao. Cryptoguard: High precision de-
tection of cryptographic vulnerabilities in massive-sized Java projects.
In ACM CCS, 2019.
[71] R. Rehurek and P. Sojka. Gensim–Python framework for vector space
modelling. 2011.
[72] L. SaurikIT. Cydia substrate, the powerful code modiﬁcation platform
behind Cydia. 2016.
[73] D. H. Steinberg and S. Cheshire. Zero Conﬁguration Networking: The
Deﬁnitive Guide. " O’Reilly Media, Inc.", 2005.
[74] M. Stute, S. Narain, A. Mariotto, A. Heinrich, D. Kreitschmann,
G. Noubir, and M. Hollick. A billion open interfaces for Eve and
Mallory: MitM, DoS, and tracking attacks on iOS and macOS through
Apple wireless direct link. In USENIX Security Symposium, 2019.
[75] M. Szydlowski, M. Egele, C. Kruegel, and G. Vigna. Challenges for
dynamic analysis of iOS applications. In Open Problems in Network
Security. Springer, 2012.
[76] Z. Tang, M. Xue, G. Meng, C. Ying, Y. Liu, J. He, H. Zhu, and Y. Liu.
Securing Android applications via edge assistant third-party library
detection. 2018.
[77] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan.
Soot: A Java bytecode optimization framework. In CASCON First
Decade High Impact Papers. IBM Corp., 2010.
[78] T. Wang, Y. Jang, Y. Chen, S. P. Chung, B. Lau, and W. Lee. On the
feasibility of large-scale infections of iOS devices. In USENIX Security
Symposium, 2014.
[79] M. Y. Wong and D. Lie. Tackling runtime-based obfuscation in Android
with TIRO. In USENIX Security Symposium, 2018.
[80] D. Wu, D. Gao, R. K. Chang, E. He, E. K. Cheng, and R. H. Deng. Un-
derstanding open ports in Android applications: Discovery, diagnosis,
and security assessment. In NDSS, 2019.
Appendix
USENIX Association
29th USENIX Security Symposium    2431
Table 6: Ofﬁcial network service APIs across app categories (see Section 6).
5349
3017
Categories
_bind Game Kit (2) Game Kit (1) _CFSocketSetAddress
Business
1425
Education
1659
Entainment
1525
Finance
1311
Food & Drink
2022
Games
40375
Health & Fitness
909
Kids
2811
Lifestyle
1415
Magazines & Newspapers 1081
Medical
1329
Music
1168
Navigation
1129
News
1286
Photo & Video
818
Productivity
1073
Reference
745
Social Networking
1838
Sports
1290
Travel
708
Utilities
1405
Weather
1915
Total
69237
671
256
498
652
781
2166
342
41
608
322
409
567
329
398
331
549
254
721
390
291
673
716
11965
5
112
5
2
9
13
5
3
3
2
1
3
8
1
4
1
4
13
23
0
2
2
140
5
1
5
7
1
4
5
1
1
2
7
3
4
1
0
23
21
0
2
5580
3240
_res_9_nquery Multipeer Connectivity
56
56
40
39
171
60
65
0
126
23
84
37
35
89
42
27
21
238
69
26
33
144
1481
11
7
23
9
11
279
11
17
23
6
6
20
8
5
28
30
11
18
17
9
39
16
604
Table 7: Third-party network service libraries across app categories (see Section 6).
s
s
e
n
i
s
u
B
n
o
i
t
a
c
u
d
E
t
n
e
m
n
i
a
t
r
e
t
n
E
e
c
n
a
n
i
F
d
o
o
F
s
e
m
a
G
h
t
l
a
e
H
s
d
i
K
e
l
y
t
s
e
f
i
L
s
e
n
i
z
a
g
a
M
l
a
c
i
d
e
M
c
i
s
u
M
n
o
i
t
a
g
i
v
a
N
s
w
e
N
o
e
d
i
V
y
t
i
v
i
t
c
u
d
o
r
P