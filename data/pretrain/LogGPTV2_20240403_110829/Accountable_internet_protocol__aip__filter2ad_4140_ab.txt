which a host can create a large number of distinct (unused) addresses
for itself.
One approach to coping with spooﬁng is to use ingress ﬁlters,
but the success of this approach has been rather limited in prac-
tice [6, 10]. We believe that this lack of success has less to do with
the mechanism itself (routers implement it at line rates), but reﬂects
our more general thesis that schemes that depend on correct operator
action are often only marginally effective. AIP’s source account-
ability, in contrast, uses self-certifying addresses to develop simple
mechanisms that verify the source of packets, dropping the packets
if the source addresses are spoofed. Our mechanism requires no
conﬁguration or interaction by operators or end-users. Its goal is to
prevent spooﬁng by entities not on the direct path from the source
to the destination—a router on-path from A to B could still spoof
packets from A, though it could not sign them to prove authenticity.
AIP’s source accountability mechanism extends (and renders more
widely useful) “unicast reverse path forwarding” (uRPF) [11]. uRPF
is an automatic ﬁltering mechanism that accepts packets only if the
route to the packet’s source address points to the same interface
on which the packet arrived. uRPF is currently useful in an edge
network to prevent spooﬁng by single-homed clients, but it cannot
cope with multi-homed customers and, because of route asymmetry,
it does not work in the core. AIP’s source accountability mechanism
essentially combines uRPF with a second mechanism to automati-
cally verify if packets are valid even if they arrived on an interface
other than the reverse route to the destination.
Recall that the AD and EID components of an address are hashes
of public keys. We use these public keys to validate the source
address of a packet in two places. First, each ﬁrst-hop router2
veriﬁes that its directly-connected hosts are not spooﬁng. Next, each
AD through which a packet passes veriﬁes that the previous hop is a
“valid” previous-hop for the speciﬁed source address. The process
for verifying a packet’s source address, AD:EID, summarized in
Figure 3, is as follows:
EID veriﬁcation: If the ﬁrst-hop router or switch, R, has not re-
cently veriﬁed the source host, it drops the packet and sends a
veriﬁcation packet, V , to the source. R avoids maintaining state for
2By ﬁrst-hop router, we mean the ﬁrst router trusted by the network operator of the
stub network to which the host in question belongs.
whether the packet arrived on the same interface that the return
route to its source would take. If uRPF succeeds, A forwards
the packet.
3. If these tests fail (e.g., in the case of route asymmetry), A drops
the packet and sends a veriﬁcation packet to AD:EID using
the same protocol used for EID veriﬁcation in Figure 4. If
EID replies afﬁrmatively, the router adds an entry permitting
subsequent packets from AD:EID to pass when they arrive on
the veriﬁed interface.
Below, we discuss the properties this mechanism provides and
how routers can scalably handle large numbers of ﬂows.
Accept cache management: When a router receives a signed re-
sponse to a veriﬁcation packet, it adds an entry to its accept cache
that permits the passage of subsequent packets from AD:EID arriv-
ing on interface iface. To bound the size of the accept cache, a router
with more than a threshold number of entries T for a single AD will
upgrade the accept cache entry to an AD-wildcard accept: AD:* and
will remove the individual AD:EID entries.
This state required by this mechanism scales well with the number
of hosts because of the division of ﬁltering responsibility in the
network. Routers need not maintain accept cache entries for any
ADs that pass uRPF checks, or for sources coming from trusted
domains. As a result, we view the tasks of routers in a network as
follows:
Border routers must verify the source addresses of packets ar-
riving from customers whose return path does not go directly to the
customer. Such customers are primarily those who use an ISP or
link for backup routing.
Interior routers can trust the veriﬁcation decisions made by
border routers and need not perform any further actions.
Peering routers to large peers will likely be conﬁgured to trust
the peer’s veriﬁcation based upon a bilateral contractual agreement.
Such agreements beneﬁt both parties, reducing their ﬁltering load.
An attacker, then, can only increase the number of accept cache
entries by T for each AD he controls. Below, we discuss how ISPs
can limit the number of ADs that a malicious customer can create.
Protecting those who protect themselves: The anti-spooﬁng pro-
tocol and accept cache management provides defenses for ADs that
protect themselves. The protocol as described admits the following
insider attack against a source AD:
1. An attacker outside of AD sends a spoofed message:
AD : EIDinsider → Dst
2. A router along the path replies with the veriﬁcation packet and
sends it to the colluding insider, AD : EIDinsider.
3. The insider creates a veriﬁcation packet, and tunnels it to the
spoofer.
Figure 3: Process for verifying a packet’s source address.
Let:
rs = Per-router secret, rotated once per minute
HMACkeyhMi = Message authentication code of M
H hPi = Hash of P
iface = Interface on which packet arrived
Source SAD : SEID → Dest DAD : DEID
Packet P.
Router R1 → Source:
Veriﬁcation packet V =
{accept,KSEID ,V}K−1
SEID
HMACrshSAD : SEID → DAD : DEID,H hPi ,ifacei
Source → R1:
Figure 4: Source address veriﬁcation protocol.
each V using the protocol in Figure 4. V contains the source and
destination AIP addresses of the original packet, the packet’s hash,
and an encoded representation of the interface on which the packet
arrived. R signs V with a message authentication code (HMAC)
using a secret, rs, known only to R, which it rotates periodically
(e.g., once per minute). The sender must prove that it has identity
EID by signing V with the private key associated with EID. If the
host produces the correct signature, then R caches this information
and forwards subsequent packets as well. The host must re-send the
packet that generated the veriﬁcation packet, because R drops all
unveriﬁed packets. For complete protection, this mechanism might
need to be implemented in network switches, or would need to be
linked to some switch-level ARP security mechanism.
The veriﬁcation packet includes the hash of the packet that trig-
gered the exchange. Hosts must not respond afﬁrmatively to veriﬁca-
tion requests for packets they did not originate. Therefore, each host
maintains a small cache of the hashes of very recently sent packets.
The random packet ID in the AIP header ensures that each of these
hashes is highly likely to be unique.
AD veriﬁcation: When a packet crosses an AD boundary, the in-
coming AD must decide if the source address is valid. For a packet
entering AD A from AD B, AD A performs the following checks:
1. If A trusts B to have performed the appropriate checks on the
packet’s source address (as might be the case between pairs of
tier-1 or mutually trusted ISPs), then A forwards the packet.
2. If A does not trust B, then A performs uRPF checks to determine
Send VpacketAcceptpacketDropYcache?In acceptTrustNLocal AD?NYYYNverify?Yaccept cachesource AD:XNIgnoreAdd toReceive Packet AD?neighboringPass uRPF?Receive VDestADSpooferR1) SpoofedPacket2) Nonce4) VerifyInsider3) Verify    (tunneled to      spoofer)4. The spoofer sends the response to the veriﬁcation packet to R,
instructing the router to permit the communication.
If there are enough compromised hosts inside AD, they can create
enough veriﬁcation packets to cause a target router to upgrade to a
wildcard entry allowing AD:* from the spooﬁng domain, and the
spoofer will then be able to spoof arbitrary EIDs within AD. This
number must exceed the upgrade threshold T . We discuss below
how ADs can prevent arbitrary address minting by their nodes.
The effect of this mechanism is that an AD that has few com-
promised nodes and that does not permit its nodes to spoof a large
number of EIDs cannot be spoofed, encouraging good Internet hy-
giene. An AD with many misbehaving hosts could be spoofed by a
sophisticated attacker. It is noteworthy that this mechanism ensures,
e.g., that an attacker can only mount a DoS reﬂector attack against a
victim that he has already extensively compromised. Note that such
spooﬁng does not affect security-critical trafﬁc; such trafﬁc can still
be unforgeably signed and encrypted using the EID’s key.
A remedy to this attack is to also require an AD domain signature
on the veriﬁcation packet responses from AD and to have the router
verify that the interface on which the veriﬁcation arrived matches
the interface of the packet that initially triggered the veriﬁcation
packet. The veriﬁcation packets would then be sent from the insider
to a designated domain signer inside AD, which would forward the
response to R. The cost of this mechanism is that it requires that the
path from the source node to the destination match the path from the
domain signing node to the router. Whether the increased security is
worth the increased complexity is an open question.
Limiting address minting: AIP detects address spooﬁng, but noth-
ing in the design prohibits a malicious host from creating an arbi-
trary set of EIDs, or a malicious domain from making up routing
announcements for an arbitrary number of fake ADs. Minting could
be used for DoS purposes or to circumvent ﬁlters that blocked a
particular host or domain.
We do not propose an architectural solution to this problem, but
rather note that AIP admits a straightforward engineering solution:
Because an attacker cannot claim the identity of another, an AD can
simply limit the number of new EIDs or ADs that each of its hosts
and customers are allowed to announce. The solution is similar in
both cases:
EID limiting: The ﬁrst-hop router or switch places a unique
EIDs/second limit on each port. This mechanism already exists in
many switches as “Port Security” to guard against MAC spooﬁng.
AD limiting: Today, operators may or may not conﬁgure limits
on the set of preﬁxes and ASes their customers announce, either
manually or from databases such as the RADB. Using AIP, operators
instead merely limit the number of unique ADs that their customer
may announce. Using such a limit gives the customer ﬂexibility
about how they run their network (and does not require them to
contact their ISP to add a few new ADs), but prevents gross abuse.
3.2 Shut-off Protocol
Although AIP’s source accountability directly eliminates some
classes of DoS attacks that rely on source address spooﬁng, other
attacks remain unaffected, such as ﬂooding a victim with trafﬁc
from compromised hosts. AIP’s self-verifying addressing enables a
natural way to throttle unwanted trafﬁc, in which a victim host sends
an explicit “shut-off” message to a host sending such trafﬁc. This
method uses an idea ﬁrst suggested by Shaw to throttle DoS trafﬁc
from “well-intentioned” hosts [35], but AIP enables a considerably
simpler and more general solution than the current IP architecture
does. The approach is also similar to the AITF mechanism [4],
except that we rely on network interface cards (NICs), not gate-
way ﬁlters, and again beneﬁt from the properties of the addressing
scheme, to develop a new shut-off protocol.
Although the vulnerabilities caused by the complexity of mod-
ern software make it difﬁcult for the owners to prevent compro-
mises, they are typically well-intentioned and do not launch attacks
of their own volition. We envision having these well-intentioned
owners equipping their hosts with a smart network interface card
(“smart-NIC”) that helps control the network behavior of the host
by selectively suppressing or rate-limiting packet transmission.3
Protocol: The smart-NIC records the hashes of recently sent packets
and accepts a special class of packets called shut-off packets (SOPs).
A SOP sent from host X to host Y includes a hash of a recent packet
sent to X from Y and a time-to-live (TTL), all signed by X:
Zombie → Victim:
Victim → Zombie:
(cid:8)key = Kvictim EID,TTL,hash = H(cid:10)Pi}K−1
Packet P.
victim EID
Upon receiving an SOP, the smart-NIC ﬁrst checks to see if it
had sent a packet whose hash matches that in the SOP (discussed
below). If not, it disregards the SOP; if so, it installs a ﬁlter suppress-
ing further packets from Y to X for the duration of the TTL. The
mechanism is designed to “fail-open”: the TTL prevents permanent
shut-off and the ﬁlters are stored as soft state.
AIP’s combination of self-certifying addresses and spoof preven-
tion makes this approach feasible. X’s signature and its key assure Y
that X (or at least someone with X’s private key) has sent the request.
The hash of a recent packet proves that Y has recently sent a packet
to X. This proof is necessary to prevent replay attacks, to prevent
an attacker from exhausting the ﬁlter state in the NIC to allow them
to continue attacking a chosen victim, and to ensure that even if an
attacker circumvents AIP’s anti-spooﬁng, it cannot cause a remote
machine to block communication with the victim.
It is important that the shut-off process not require a three-way
handshake because a host under attack may not receive the return
packets.
We note that this mechanism will not stop particularly determined
attackers. Out-of-band mechanisms will undoubtedly still be needed
to cope with them. In Section 5, we discuss how AIP enables self-
certifying registry entries about domain ownership, etc., that can
facilitate out of band remediation.
Preventing bypassing: The smart-NIC must protect its ﬁrmware
and conﬁguration by requiring physical access to modify it, e.g.,
by plugging it into a USB or serial interface. As a result, the shut-
off mechanism is unmodiﬁable from the host. Attackers cannot
circumvent the mechanism, as every packet goes through the NIC to
reach the host.
Preventing preemptive shut-off: An attacker might begin an
attack by sending a shut-off packet to the victim, to prevent the
victim from stopping the attack. To prevent this attack, the smart-
NIC permits the victim to send a low rate (e.g., 1 packet per 30
seconds) of shut-off packets to an already-blocked host.
Replay prevention: An attacker might try to spoof SOPs to a
victim to prevent it from communicating with a legitimate host. Our
3Note that we assume well-intentioned owners only for preventing botnet-style DoS
attacks; other protocols built using AIP, such as the anti-spooﬁng protocol, protect
against malicious host owners as well.
mechanism safeguards against this attack in two ways. (1) All pack-
ets must be signed by the victim’s private EID key. The legitimate
host would therefore have had to previously send a shut-off packet
to the victim. Spooﬁng a SOP is difﬁcult under AIP because of
its address spooﬁng prevention, but it could happen if the attacker
subverted the address spooﬁng prevention at the victim or at the
legitimate host. (2) The SOP must include the hash of a previously
sent packet from the victim to the legitimate host. In addition to
whatever changing content is in packets (sequence numbers, nonces,
etc.), AIP uses its 32-bit random packet ID to ensure that previously
sent packets cannot be used as the basis of a SOP replay attack.
A replay attack can only be mounted when the attacker has al-
ready sniffed a legitimate shut-off packet between the two hosts in
question. This requirement already sets a high bar for attempting to
abuse SOP packets, and so we are willing to accept a very small false
positive rate for replay prevention to reduce memory requirements.
The smart-NIC therefore records the transmitted packet hashes using
a Bloom Filter, sized as follows:
Packets per second: The majority of current hosts transmit far
fewer than 50,000 packets per second. Because the shut-off protocol
targets the common case of well-intentioned end-hosts, servers that
generate an unusually high volume can simply disable the shut-
off protocol on their NICs with little impact: these machines are
comparatively few and are typically professionally managed.
False positive rate: The maximum shut-off duration is 5 minutes.
We size the false positive rate such that an attacker would have to
ﬂood a victim with a high volume of packets for roughly this duration
before ﬁnding a ﬁlter collision. Each shut-off packet is roughly 550
bytes (most of which is a 2048-bit public key and signature). For
recency, we require the victim to send a packet received within 30