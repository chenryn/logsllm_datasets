         value: '0x1111d67bb1bb0000',
         data: '0x',
         v: 41,
         r: '0x69a726edfb4b802cbf267d5fd1dabcea39d3d7b4bf62b9eeaeba387606167166',
         s: '0x7724cedeb923f374bef4e05c97426a918123cc4fec7b07903839f12517e1b3c8'
    }
    var rawTx2 =
        { nonce: 1,
         gasPrice: '0x3b9aca00',
         gasLimit: '0x5208',
         to: '0x92b28647ae1f3264661f72fb2eb9625a89d88a31',
         value: '0x1922e95bca330e00',
         data: '0x',
         v: 41,
         r: '0x69a726edfb4b802cbf267d5fd1dabcea39d3d7b4bf62b9eeaeba387606167166',
         s: '0x2bbd9c2a6285c2b43e728b17bda36a81653dd5f4612a2e0aefdb48043c5108de'
    }
    tx1 = new EthereumTx(rawTx1);
    tx2 = new EthereumTx(rawTx2);
    z1=tx1.hash(false).toString("hex");
    z2=tx2.hash(false).toString("hex");
    console.log(z1);
    console.log(z2);
这里要注意使用该库中的hash函数时要选择参数false，因为参数为false时进行hash的对象是不加入签名信息的，也就是我们需要的z值，否则默认的参数为true得到的就是添加了签名信息的hash值，得到的其实就是我们的交易hash
然后我们恢复私钥，这里的步骤也就是我们上面反推私钥的式子，要注意的是需要实现一个取模反的运算，这一部分来自于[python-ecdsa](https://github.com/warner/python-ecdsa/)
    def inverse_mod( a, m ):
        """Inverse of a mod m."""
        if a  0: return ud
        else: return ud + m
    def derivate_privkey(p, r, s1, s2, z1, z2):
        z = z1 - z2
        s = s1 - s2
        r_inv = inverse_mod(r, p)
        s_inv = inverse_mod(s, p)
        k = (z * s_inv) % p
        d = (r_inv * (s1 * k - z1)) % p
        return d, k
    z1 = 0x4f6a8370a435a27724bbc163419042d71b6dcbeb61c060cc6816cda93f57860c
    s1 = 0x2bbd9c2a6285c2b43e728b17bda36a81653dd5f4612a2e0aefdb48043c5108de
    r = 0x69a726edfb4b802cbf267d5fd1dabcea39d3d7b4bf62b9eeaeba387606167166
    z2 = 0x350f3ee8007d817fbd7349c477507f923c4682b3e69bd1df5fbb93b39beb1e04
    s2 = 0x7724cedeb923f374bef4e05c97426a918123cc4fec7b07903839f12517e1b3c8
    p  = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 
    print "privatekey:%x\n k:%x" % derivate_privkey(p,r,s1,s2,z1,z2)
然后我们就取得了私钥
> 614f5e36cd55ddab0947d1723693fef5456e5bee24738ba90bd33c0c6e68e269
将其导入我们的钱包即可调用挑战合约完成该题目
# 写在最后
这次的学习过程让我收获了很多，ECC算法确实是挺有趣的，之前对它的了解不是很充分，我自己现在应该也只算是初学，文章中如有错误也希望师傅们能够指正  
顺带一提感觉capture the ether的题目质量着实是很高，很多题目让我学到了新东西，如有兴趣可参考我写的write
up，[part1](https://www.anquanke.com/post/id/153375) and
[part2](https://www.anquanke.com/post/id/154104)
# 参考