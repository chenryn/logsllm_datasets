### References

1. **Malware - Keylogger, Ransomware, and Trojan**  
   URL: [malware-thats-keylogger-ransomware-and-trojan/](malware-thats-keylogger-ransomware-and-trojan/)  
   Accessed: January 8, 2021.

2. **Duy Phuc Pham, Croese Niels, and Han Sahin Cengiz. Exobot - Android Banking Trojan on the Rise**  
   URL: [Exobot - Android Banking Trojan on the Rise](https://www.threatfabric.com/blogs/exobot-android-banking-trojan-on-the-rise.html)  
   Accessed: January 8, 2021.

3. **Chuangang Ren, Peng Liu, and Sencun Zhu. WindowGuard: Systematic Protection of GUI Security in Android**  
   In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2017.

4. **Chuangang Ren, Yulong Zhang, Hui Xue, Tao Wei, and Peng Liu. Towards Discovering and Understanding Task Hijacking in Android**  
   In Proceedings of the 24th USENIX Conference on Security Symposium, pages 945–959, Berkeley, CA, USA, 2015. USENIX Association.

5. **Hossain Shahriar, Tulin Klintic, and Victor Clincy. Mobile Phishing Attacks and Mitigation Techniques**  
   In Journal of Information Security, Volume 6, Pages 206–212, June 2015.

6. **Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason M Ott, and Zhiyun Qian. Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework**  
   In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2016.

7. **Raphael Spreitzer, Felix Kirchengast, Daniel Gruss, and Stefan Mangard. Procharvester: Fully Automated Analysis of procfs Side-Channel Leaks on Android**  
   In Proceedings of the 2018 Asia Conference on Computer and Communications Security (ASIACCS), pages 749–763, New York, NY, USA, 2018. ACM.

8. **Raphael Spreitzer, Gerald Palfinger, and Stefan Mangard. SCAnDroid: Automated Side-Channel Analysis of Android APIs**  
   In Proceedings of the 11th ACM Conference on Security & Privacy in Wireless and Mobile Networks (WiSec), pages 224–235, New York, NY, USA, 2018. ACM.

9. **ThreatFabric. Anubis and Afterlife**  
   URL: [Anubis 2 Malware and Afterlife](https://www.threatfabric.com/blogs/anubis-2-malware-and-afterlife.html)  
   Accessed: January 8, 2021.

10. **ThreatFabric. BianLian - From Rags to Riches, the Malware Dropper that Had a Dream**  
    URL: [BianLian - From Rags to Riches](https://www.threatfabric.com/blogs/bianlian-from-rags-to-riches-the-malware-dropper-that-had-a-dream.html)  
    Accessed: January 8, 2021.

11. **Federico Tomassetti. JavaParser - Parser and Abstract Syntax Tree for Java**  
    URL: [JavaParser GitHub Repository](https://github.com/javaparser/javaparser)  
    Accessed: January 8, 2021.

12. **Ventura Vitor. Gustuff Banking Botnet Targets Australia**  
    URL: [Gustuff Targets Australia](https://blog.talosintelligence.com/2019/04/gustuff-targets-australia.html)  
    Accessed: January 8, 2021.

13. **Gahr Wesley, Duy Phuc Pham, and Croese Niels. LokiBot - The First Hybrid Android Malware**  
    URL: [LokiBot - The First Hybrid Android Malware](https://www.threatfabric.com/blogs/lokibot-the-first-hybrid-android-malware.html)  
    Accessed: January 8, 2021.

14. **L. Wu, X. Du, and J. Wu. MobiFish: A Lightweight Anti-Phishing Scheme for Mobile Phones**  
    In Proceedings of the 23rd International Conference on Computer Communication and Networks (ICCCN), pages 1–8, August 2014.

15. **Zhi Xu and Sencun Zhu. Abusing Notification Services on Smartphones for Phishing and Spamming**  
    In Proceedings of the 6th USENIX Conference on Offensive Technologies (WOOT), pages 1–1, Berkeley, CA, USA, 2012. USENIX Association.

16. **Yuxuan Yan, Zhenhua Li, Qi Alfred Chen, Christo Wilson, Tianyin Xu, Ennan Zhai, Yan-Ping Li, and Yunhao Liu. Understanding and Detecting Overlay-Based Android Malware at Market Scales**  
    2019.

17. **Guangliang Yang, Jeff Huang, and Guofei Gu. Iframes/Popups Are Dangerous in Mobile WebView: Studying and Mitigating Differential Context Vulnerabilities**  
    In Proceedings of the 28th USENIX Conference on Security Symposium, 2019.

18. **Lei Zhang, Zhemin Yang, Yuyu He, Zhenyu Zhang, Zhiyun Qian, Geng Hong, Yuan Zhang, and Min Yang. Invetter: Locating Insecure Input Validations in Android Services**  
    In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS), 2018.

19. **N. Zhang, K. Yuan, M. Naveed, X. Zhou, and X. Wang. Leave Me Alone: App-Level Protection against Runtime Information Gathering on Android**  
    In Proceedings of the IEEE Symposium on Security and Privacy (S&P), pages 915–930, May 2015.

### Appendix A: Case Study

#### Pseudo-code to Exploit `isAppForeground` API
```java
public void attack(int uid) {
    final Handler handler = new Handler();
    handler.postDelayed(new Runnable() {
        public void run() {
            if (iam.isAppForeground(uid)) {
                // Hijack the original activity
            }
            handler.postDelayed(this, 1000);
        }
    }, 1000);
}
```
This code can be used to exploit the `isAppForeground` API by providing the target UID. This API does not require permission to be invoked.

#### Pseudo-code to Exploit `getDataLayerSnapshotForUid` API
```java
public long prevTxPackets;
public void attack(int uid) {
    final Handler handler = new Handler();
    handler.postDelayed(new Runnable() {
        public void run() {
            try {
                NetworkStats ns = inss.getDataLayerSnapshotForUid(uid);
                if (ns.set == 1 && ns.txPackets > prevTxPackets) {
                    // Hijack the original activity
                }
                prevTxPackets = ns.txPackets;
            } catch (Exception e) {
                // Handle the exception
            }
            handler.postDelayed(this, 1000);
        }
    }, 1000);
}
```

#### Pseudo-code to Exploit `queryEvents` API
```java
public long prevTime = System.currentTimeMillis();
public String TARGET_APP_PACKAGE_NAME = "com.bank";
public void attack() {
    final Handler handler = new Handler();
    handler.postDelayed(new Runnable() {
        public void run() {
            try {
                UsageStatsManager usm = (UsageStatsManager) getSystemService(Context.USAGE_STATS_SERVICE);
                UsageEvents ue = usm.queryEvents(prevTime, System.currentTimeMillis());
                prevTime = System.currentTimeMillis();
                while (ue.hasNextEvent()) {
                    UsageEvents.Event e = new UsageEvents.Event();
                    ue.getNextEvent(e);
                    if (e.getPackageName().equalsIgnoreCase(TARGET_APP_PACKAGE_NAME)) {
                        if (e.getEventType() == 1) {
                            // Hijack the original activity
                        }
                    }
                }
            } catch (Exception e) {
                // Handle the exception
            }
            handler.postDelayed(this, 1000);
        }
    }, 1000);
}
```

### Appendix B: API Whitelisting

| Category | Classes/Services/APIs | Description |
|----------|-----------------------|-------------|
| **Graphical User Interface (GUI)** | <ul><li>`android.ui.ISurfaceComposer`</li><li>`android.gui.DisplayEventConnection`</li><li>`android.gui.IGraphicBufferProducer`</li><li>`android.gui.SensorEventConnection`</li><li>`android.view.IWindowSession`</li><li>`android.hardware.display.IDisplayManager`</li></ul> | The GUI system handles all operations that allow the system to display and render the UI of a given app. The application declares supported screen sizes and pixel densities, but the GUI framework handles rendering and rescaling. |
| **Audio and Video** | <ul><li>`android.media.IMediaAnalyticsService`</li><li>`android.media.IMediaCodecService`</li><li>`android.media.IMediaExtractorService`</li><li>`android.media.IMediaMetadataRetriever`</li><li>`android.media.IMediaRouterService`</li><li>`android.media.IMediaPlayerService`</li><li>`android.media.IAudioService`</li><li>`android.media.IAudioPolicyService`</li></ul> | The Audio and Video services on Android are a complex ecosystem. When an application wants to play audio, it relies on the `MediaPlayer` component, which handles audio using the correct decoder and coder, forwards it to the hardware interface, and refreshes the audio buffer. |
| **Digital Rights Management (DRM)** | <ul><li>`android.drm` package</li></ul> | DRM is a complex framework that relies on plugins and is connected with the Media system. It handles loading DRM plugins, setting up connections with MediaPlayer, and decoding and forwarding content. |
| **System Services Internals** | <ul><li>`ContentProvider`</li><li>`PowerManager`</li><li>`PermissionManager`</li><li>`AlarmManager`</li></ul> | These APIs handle various system operations behind the scenes, such as synchronization for shared structures and reference counting for Content Providers. For example, when an application uses a shared system service, it does not have to handle acquiring and releasing locks, as these operations are handled by the service. |

**Table V:** Summary of different categories of APIs whitelisted in our on-device defense system. For each category, we describe the classes, services, APIs, or packages we whitelist and provide detailed descriptions with concrete examples. We manually investigated each API in our whitelist and confirmed that none of these APIs can be abused by malicious apps to mount state inference attacks.