that works across cores and deﬁes vm sandboxing–and its application to
aes,” in 2015 IEEE Symposium on Security and Privacy.
IEEE, 2015,
pp. 591–604.
[26] Q. Ge, Y. Yarom, D. Cock, and G. Heiser, “A survey of microarchitec-
tural timing attacks and countermeasures on contemporary hardware,”
Journal of Cryptographic Engineering, vol. 8, no. 1, pp. 1–27, 2018.
[27] D. Wang, A. Neupane, Z. Qian, N. B. Abu-Ghazaleh, S. V. Krishna-
murthy, E. J. Colbert, and P. Yu, “Unveiling your keystrokes: A cache-
based side-channel attack on graphics libraries.” in NDSS, 2019.
[28] D. Gruss, C. Maurice, K. Wagner, and S. Mangard, “Flush+ ﬂush: a fast
and stealthy cache attack,” in International Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment. Springer, 2016,
pp. 279–299.
[29] mseaborn, “Security: Disallow the x86 ”clﬂush” instruction due to
DRAM ”rowhammer” problem,” https://bugs.chromium.org/p/nativeclie
nt/issues/detail?id=3944, 2020, [Online; accessed 18-August-2020].
[30] D. Gruss, R. Spreitzer, and S. Mangard, “Cache template attacks:
Automating attacks on inclusive last-level caches,” in 24th {USENIX}
Security Symposium ({USENIX} Security 15), 2015, pp. 897–912.
[31] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and countermea-
sures: the case of aes,” in Cryptographers’ track at the RSA conference.
Springer, 2006, pp. 1–20.
[32] N. Lawson, “Side-channel attacks on cryptographic software,” IEEE
Security & Privacy, vol. 7, no. 6, pp. 65–68, 2009.
[33] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “Aslr on the
line: Practical cache attacks on the mmu.” in NDSS, vol. 17, 2017, p. 26.
[34] B. Gras, K. Razavi, H. Bos, and C. Giuffrida, “Translation leak-aside
buffer: Defeating cache side-channel protections with {TLB} attacks,”
in 27th {USENIX} Security Symposium ({USENIX} Security 18), 2018,
pp. 955–972.
[35] S.-Y. Tsai, M. Payer, and Y. Zhang, “Pythia: remote oracles for the
masses,” in 28th {USENIX} Security Symposium ({USENIX} Security
19), 2019, pp. 693–710.
[36] M. Kurth, B. Gras, D. Andriesse, C. Giuffrida, H. Bos, and K. Razavi,
“Netcat: Practical cache attacks from the network,” in 41st IEEE
Symposium on Security and Privacy (S&P), 2020.
[37] C. Canella, J. Van Bulck, M. Schwarz, M. Lipp, B. Von Berg, P. Ortner,
F. Piessens, D. Evtyushkin, and D. Gruss, “A systematic evaluation of
transient execution attacks and defenses,” in 28th {USENIX} Security
Symposium ({USENIX} Security 19), 2019, pp. 249–266.
[38] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher et al., “Spectre attacks: Exploit-
ing speculative execution,” in 2019 IEEE Symposium on Security and
Privacy (SP).
IEEE, 2019, pp. 1–19.
[39] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn,
S. Mangard, P. Kocher, D. Genkin et al., “Meltdown: Reading kernel
memory from user space,” in 27th {USENIX} Security Symposium
({USENIX} Security 18), 2018, pp. 973–990.
[40] J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx, “Foreshadow:
Extracting the keys to the intel {SGX} kingdom with transient out-of-
order execution,” in 27th {USENIX} Security Symposium ({USENIX}
Security 18), 2018, pp. 991–1008.
[41] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, “Understanding
and mitigating covert channels through branch predictors,” ACM Trans-
actions on Architecture and Code Optimization (TACO), vol. 13, no. 1,
pp. 1–23, 2016.
[42] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard,
“{DRAMA}: Exploiting {DRAM} addressing for cross-cpu attacks,”
in 25th {USENIX} Security Symposium ({USENIX} Security 16), 2016,
pp. 565–581.
15
[43] J. W. Gray, “On introducing noise into the bus-contention channel,” in
Proceedings 1993 IEEE Computer Society Symposium on Research in
Security and Privacy.
IEEE, 1993, pp. 90–98.
[44] J. W. Gray III, “Countermeasures and tradeoffs for a class of covert
timing channels,” Tech. Rep., 1994.
[45] W.-M. Hu, “Reducing timing channels with fuzzy time,” Journal of
computer security, vol. 1, no. 3-4, pp. 233–254, 1992.
[46] ——, “Lattice scheduling and covert channels,” in Proceedings 1992
IEEE Computer Society Symposium on Research in Security and Pri-
vacy.
IEEE Computer Society, 1992, pp. 52–52.
[47] A. C. Aldaya, B. B. Brumley, S. ul Hassan, C. P. Garc´ıa, and N. Tuveri,
“Port contention for fun and proﬁt,” in 2019 IEEE Symposium on
Security and Privacy (SP).
IEEE, 2019, pp. 870–887.
[48] A. Bhattacharyya, A. Sandulescu, M. Neugschwandtner, A. Sorniotti,
B. Falsaﬁ, M. Payer, and A. Kurmus, “Smotherspectre: exploiting
speculative execution through port contention,” in Proceedings of the
2019 ACM SIGSAC Conference on Computer and Communications
Security, 2019, pp. 785–800.
[49] B. Gras, C. Giuffrida, M. Kurth, H. Bos, and K. Razavi, “Absynthe:
Automatic blackbox side-channel synthesis on commodity microarchi-
tectures.” in NDSS, 2020.
[50] Y. Yarom, D. Genkin, and N. Heninger, “Cachebleed: a timing attack
on openssl constant-time rsa,” Journal of Cryptographic Engineering,
vol. 7, no. 2, pp. 99–112, 2017.
[51] Z. Wu, Z. Xu, and H. Wang, “Whispers in the hyper-space: high-
bandwidth and reliable covert channel attacks inside the cloud,”
IEEE/ACM Transactions on Networking, vol. 23, no. 2, pp. 603–615,
2014.
[52] Y. Wang and G. E. Suh, “Efﬁcient timing channel protection for on-
chip networks,” in 2012 IEEE/ACM Sixth International Symposium on
Networks-on-Chip.
IEEE, 2012, pp. 142–151.
[53] M. Yan, J.-Y. Wen, C. W. Fletcher, and J. Torrellas, “Secdir: a secure
directory to defeat directory side-channel attacks,” in Proceedings of
the 46th International Symposium on Computer Architecture, 2019, pp.
332–345.
[54] V. Varadarajan, Y. Zhang, T. Ristenpart, and M. Swift, “A placement
vulnerability study in multi-tenant public clouds,” in 24th {USENIX}
Security Symposium ({USENIX} Security 15), 2015, pp. 913–928.
[55] T. Kim, M. Peinado, and G. Mainar-Ruiz, “{STEALTHMEM}: System-
level protection against cache-based side channel attacks in the cloud,”
the 21st {USENIX} Security Symposium
in Presented as part of
({USENIX} Security 12), 2012, pp. 189–204.
[56] Z. Zhou, M. K. Reiter, and Y. Zhang, “A software approach to defeating
side channels in last-level caches,” in Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications Security, 2016,
pp. 871–882.
[57] O. M. Michael Papamichael, “Interconnection Networks,” http://www.
cs.cmu.edu/∼418/lectures/15 interconnects.pdf, 2020, [Online; accessed
18-August-2020].
[58] R. Coker, “Hugepages,” https://wiki.debian.org/Hugepages, 2017, [On-
line; accessed 18-August-2020].
[59] P. Vila, B. K¨opf, and J. F. Morales, “Theory and practice of ﬁnding
eviction sets,” in 2019 IEEE Symposium on Security and Privacy (SP).
IEEE, 2019, pp. 39–54.
[60] G. Irazoqui, T. Eisenbarth, and B. Sunar, “Cross processor cache at-
tacks,” in Proceedings of the 11th ACM on Asia conference on computer
and communications security, 2016, pp. 353–364.
[61] Unknown,
“Maximizing
multicore
processor
performance,”
https://www.intel.com/content/www/us/en/io/quickpath-technology/
quickpath-technology-general.html, 2021, [Online; accessed 13-April-
2021].
[62] ——, “Skylake (server) - Microarchitectures - Intel,” https://en.wik
ichip.org/wiki/intel/microarchitectures/skylake (server), 2020, [Online;
accessed 10-August-2020].
[63] Intel, “Intel Xeon Processor Scalable Memory Family Uncore
Performance Monitoring Reference Manual,” https://software.intel.com
/content/www/us/en/develop/download/intel-xeon-processor-scalable-m
emory-family-uncore-performance-monitoring-reference-manual.html,
2020, [Online; accessed 5-August-2020].
[64] J. D. McCalpin, “Topology and Cache Coherence in Knights Landing
and Skylake Xeon Processors,” https://www.ixpug.org/documents/1524
216121knl skx topology coherence 2018-03-23.pptx, 2018, [Online;
accessed 10-August-2020].
[65] Intel, “Core and L3 numbering vs physical layout on Xeon Platinum
8160 (and KNL),” https://community.intel.com/t5/Software-Tuning-Per
formance/Core-and-L3-numbering-vs-physical-layout-on-Xeon-Platinu
m-8160/td-p/1178596, 2018, [Online; accessed 10-August-2020].
[66] Linux manual page, “pthread setafﬁnity np(3),” https://man7.org/lin
ux/man-pages//man3/pthread setafﬁnity np.3.html, 2020, [Online; ac-
cessed 10-August-2020].
[67] A. Purnal, F. Turan, and I. Verbauwhede, “Prime+ scope: Overcoming
the observer effect for high-precision cache contention attacks,” in
Proceedings of the 2021 ACM SIGSAC Conference on Computer and
Communications Security, 2021, pp. 2906–2920.
[68] Unknown,
“What
is
the data width of
the mesh in skx,”
https://community.intel.com/t5/Software-Tuning-Performance/Wha
t-is-the-data-width-of-the-mesh-in-SKX/td-p/1181487, 2020, [Online;
accessed 13-April-2021].
[69] debian, “pqos(8) intel-cmt-cat,” https://manpages.debian.org/testing/inte
l-cmt-cat/pqos.8.en.html, 2020, [Online; accessed 18-August-2020].
[70] B. Gulmezoglu, T. Eisenbarth, and B. Sunar, “Cache-based application
detection in the cloud using machine learning,” in Proceedings of the
2017 ACM on Asia Conference on Computer and Communications
Security, 2017, pp. 288–300.
[71] K. Oonishi, X. Huang, and N. Kunihiro, “Improved crt-rsa secret key
recovery method from sliding window leakage,” in Information Security
and Cryptology – ICISC 2019, J. H. Seo, Ed.
Cham: Springer
International Publishing, 2020, pp. 278–296.
[72] C. S. Bae, L. Xia, P. Dinda, and J. Lange, “Dynamic adaptive virtual
core mapping to improve power, energy, and performance in multi-
socket multicores,” in Proceedings of the 21st international symposium
on High-Performance Parallel and Distributed Computing, 2012, pp.
247–258.
[73] Y. Mirsky, T. Doitshman, Y. Elovici, and A. Shabtai, “Kitsune: an
ensemble of autoencoders for online network intrusion detection,” in
NDSS, 2018.
[74] P. Zhou, W. Shi, J. Tian, Z. Qi, B. Li, H. Hao, and B. Xu, “Attention-
based bidirectional long short-term memory networks for relation clas-
siﬁcation,” in Proceedings of the 54th annual meeting of the association
for computational linguistics (volume 2: Short papers), 2016, pp. 207–
212.
[75] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer,
“Dawg: A defense against cache timing attacks in speculative execution
processors,” in 2018 51st Annual IEEE/ACM International Symposium
on Microarchitecture (MICRO).
IEEE, 2018, pp. 974–987.
[76] Intel,
“Introduction
to Memory
Bandwidth
Allocation,”
https://software.intel.com/content/www/us/en/develop/articles/introd
uction-to-memory-bandwidth-allocation.html, 2019, [Online; accessed
13-January-2021].
[77] W. Song, B. Li, Z. Xue, Z. Li, W. Wang, and P. Liu, “Randomized last-
level caches are still vulnerable to cache side-channel attacks! but we
can ﬁx it,” 2020.
[78] T. Bourgeat, J. Drean, Y. Yang, L. Tsai, J. Emer, and M. Yan, “Casa:
End-to-end quantitative security analysis of randomly mapped caches,”
in 2020 53rd Annual IEEE/ACM International Symposium on Microar-
chitecture (MICRO).
IEEE, 2020, pp. 1110–1123.
[79] A. Purnal, L. Giner, D. Gruss, and I. Verbauwhede, “Systematic analysis
of randomization-based protected cache architectures,” in 42th IEEE
Symposium on Security and Privacy, vol. 5, 2021.
[80] M. K. Qureshi, “New attacks and defense for encrypted-address cache,”
in 2019 ACM/IEEE 46th Annual International Symposium on Computer
Architecture (ISCA).
IEEE, 2019, pp. 360–371.
[81] M. Werner, T. Unterluggauer, L. Giner, M. Schwarz, D. Gruss, and
S. Mangard, “Scattercache: Thwarting cache attacks via cache set
randomization,” in 28th {USENIX} Security Symposium ({USENIX}
Security 19), 2019, pp. 675–692.
[82] G. Saileshwar and M. Qureshi, “{MIRAGE}: Mitigating conﬂict-
based cache attacks with a practical fully-associative design,” in 30th
{USENIX} Security Symposium ({USENIX} Security 21), 2021.
[83] J. D. McCalpin, “Mapping addresses to l3/cha slices in intel processors,”
Tech. Rep., 2021.
[84] B. N. Bershad, D. Lee, T. H. Romer, and J. B. Chen, “Avoiding conﬂict
misses dynamically in large direct-mapped caches,” in Proceedings of
the sixth international conference on Architectural support for program-
ming languages and operating systems, 1994, pp. 158–170.
16
[85] R. E. Kessler and M. D. Hill, “Page placement algorithms for large
real-indexed caches,” ACM Transactions on Computer Systems (TOCS),
vol. 10, no. 4, pp. 338–359, 1992.
[86] Y. Ye, R. West, Z. Cheng, and Y. Li, “Coloris: a dynamic cache partition-
ing system using page coloring,” in 2014 23rd International Conference
on Parallel Architecture and Compilation Techniques (PACT).
IEEE,
2014, pp. 381–392.
[87] ARM, “ARM Architecture Reference Manual ARMv7-A and ARMv7-
https://developer.arm.com/documentation/ddi0406/latest/,
R edition,”
2008, [Online; accessed 13-January-2021].
[88] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa,
“Strong and efﬁcient cache side-channel protection using hardware trans-
actional memory,” in 26th {USENIX} Security Symposium ({USENIX}
Security 17), 2017, pp. 217–233.
[89] G. Bouffard, “A generic approach for protecting java card™ smart card
against software attacks,” Ph.D. dissertation, Limoges, 2014.
[90] Y. Lin, J. Yuan, M. Kolmogorov, M. W. Shen, M. Chaisson, and P. A.
Pevzner, “Assembly of long error-prone reads using de bruijn graphs,”
Proceedings of the National Academy of Sciences, vol. 113, no. 52, pp.
E8396–E8405, 2016.
[91] S. Chen, R. Wang, X. Wang, and K. Zhang, “Side-channel leaks in
web applications: A reality today, a challenge tomorrow,” in 2010 IEEE
Symposium on Security and Privacy.
IEEE, 2010, pp. 191–206.
[92] Unknown, “Top sites in china,” https://www.alexa.com/topsites/countri
es/CN, 2021, [Online; accessed 13-April-2021].
A. Intel Skylake-SP cache Spec
APPENDIX
We describe the cache speciﬁcation of Intel Skylake-SP
processors, which we used as the evaluation platform.
Address Mapping. The lowest 6 bits reﬂect the block offset
within a cache line. The bits in the middle indicate the index
of the cache set containing the line (bits 15:6 for L2 and 16:6
for LLC). The upper bits form a cache tag, which indicates
whether the data is in the cache.
As LLC requests are all managed by CHA inside a core,
for LLC access, the CPU has to decide which CHA to talk
to. The decision is based on a proprietary hash function that
is not fully reverse-engineered yet [22], [83].
Cache Structure. For Skylake-SP processors, LLC is de-
signed as non-inclusive to the private caches. Before Skylake-
SP processors, LLC is inclusive, meaning that a cache line
in L2 cache has a replicate in LLC. For non-inclusive LLC,
an L2 cache line may or may not have a replicate in LLC,
which is determined by the cache eviction policy. As a result,
Skylake-SP has a much larger effective cache size (the sum
of L2 and LLC) compared to the previous generations (LLC
only).
63:17
L2 Tag
LLC Tag
Hash to LLC slice ID
16
15:6
L2 set index
LLC set index
5:0
Offset
Fig. 9: Mapping between memory address (physical) and
cache.
B. Defenses against Cache Side-channels
Software Defenses. Since OS controls the allocation of mem-
ory to programs, the access to the physically-indexed caches
can be isolated along with memory. Page colouring takes the
17
L1-I
L1-D
L2
LLC slice
Size
32KB
32KB
1 MB
1.375MB
Associative
8-way