 让我们看看个性问题和组织需要是如何使运营团队（特别是
SRE）处于危险境地的。
#### 我们喜欢被打断，也喜欢海量的信息
   人类天生不擅长多任务处理。试图同时做多件事的话，要么把完成任务所花费的时间加倍，要么会导致错误加倍。保罗·阿奇利，["你不能多任务，所以不要再尝试了"](https://hbr.org/2010/12/you-cant-multi-task-so-stop-tr)，"哈佛商业评论"。
一个预计将在项目工作中取得进展，同时还要随时被任务中断工作（比如支持、轮值、走访客户）的团队注定会失败。然而，运维吸引了那些喜欢被新事件打扰的人。一次做一件事。"时间盒"入站通信以及中断时间。
预计运营团队将管理其组织的风险和不确定性。我们建立了关于风险推理的哲学；应对不良后果的策略；深度防御，剧本，事件管理，升级政策等。当人类面临不确定性时，由此产生的"信息差距"导致对信息的渴望，往往被夸大到超出效用点。George
Loewsenstein，["好奇心理学"](https://www.cmu.edu/dietrich/sds/docs/loewenstein/PsychofCuriosity.pdf)，心理学公报。这可能导致信息过载，具体形式为对夸张华丽的图形的热爱，以及难以理解的仪表板、电子邮件、警报和自动提交的错误。我们都知道工程师有数百个错误分配给他们，他们也不可能一一修复，但仍然拒绝标记他们"不会修复"。另一种病态是订阅开发人员邮件列表，以了解对系统所做的每一项更改。我们对新奇的热爱使我们忽视了我们无法采取行动的信息缺乏兴趣。
承认大多数信息是不可操作的；对你的错误、邮件筛选器和打开的聊天应用进行残酷处理。告诉你的团队，可以假设任何紧急意愿页面；任何其他工作在完成任务后都可以选取。
#### 轮值和运维
轮值工作的压力促使人们远离运营角色。奇怪的是，24x7的班次不是问题。真正的问题是人员不足，工作时间长，频繁轮班。人们在轮值上的投入的时间越多，患抑郁症和焦虑症的可能性就越大。Anne-Marie
Nicol 和 Jackie
Botterill，["轮值工作和健康的关系：评论"](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC539298/)，Environ
Health。 克服（不得不采取行动的）压力比采取行动本身还困难。J. Dettmers
et.
al.，["扩展工作可用性及其与开始日常情绪和皮质醇的关系"](https://www.ncbi.nlm.nih.gov/pubmed/26236956)。接受轮值是工作的一部分是一回事；告诉你五岁的女儿，你不能带她出去玩又是另一回事。
我们可以通过不少于六人的轮值来减轻这种压力，为紧急情况联系人（或个人生活常被打扰的人）提供补偿休息时间。根据期望工作的时间而不是工作时间对团队进行补偿。每班轮值的报酬（或给予补偿时间），而不是在基本薪酬中计算轮值补贴，这意味着雇主重视牺牲员工的个人时间。事故管理培训或频繁的"不幸转轮"演习也可以通过增加人们的信心来减轻压力。确保轮值工程师在同时发生多起事件时能优先找到人来解决问题。戴夫·奥康纳，["坏机器"](https://www.usenix.org/conference/srecon15europe/program/presentation/oconnor)，SREcon15
欧洲大会。
#### 认知过载
  运营团队支持由更大的团队编写的软件。我认识一支由 65 个 SRE
组成的团队，支持由 3500
名软件工程师编写的软件。面对使用多种语言编写的支持软件，具有不同底层技术和框架的团队，花费大量时间尝试理解系统，因此没有多少时间来改进它。
为了降低复杂性，软件工程师部署了越来越多的抽象。 抽象可以像流沙。对象/关系映射层（ORM）是一种非常有效的工具，它可以通过减少对数据库架构的思考时间来使开发人员的生活变得简单。通过帮助开发人员了解底层架构，开发人员不再考虑
ORM 更改如何影响生产性能。运维人员现在需要了解 ORM
层*及其*对数据库的影响。
与微服务相比，单体设计通常更易于开发和扩展。可能是为了业务的需要来设计成单体代码，避免敏感代码（或复杂代码）的重复，并且它们具有更简单的业务流程配置。但是，由于单一体系结构吸引了异构流量类别和成本，因此对于运营团队来说，故障排除或容量规划是一场噩梦。
我们大多数人都明白，加入的新人、不断改变的软件会使运营团队紧张。我们忽略了成熟的"稳定"服务的负担。这类的服务维护人员很难有任何轻松的工作，而且团队仍然需要理解它。在时间和精力估计过程中，必须考虑到在迭代较新的服务时，不要损害成熟服务所需的额外护理。
团队应该记录认知负荷对开发效率的影响。它对软件的可靠性、运营团队的士气和帮助以及组织的长期成功有着直接和严重的影响。
#### 想象的期望
   优秀的运营团队为他们的工作感到自豪。如果对服务的期望存在歧义，我们会谨慎行事并面对更多的工作（而不是必需的）。我们是否认为我们所有的服务都相互重要？是否有一些我们可以放弃"尽力而为"？我们是否真的需要修复针对我们团队记录的所有错误，或者我们可以说，"抱歉，这不是我们团队的重点"？我们的服务水平协议（SLA）是否编写得足够清晰，让整个团队知道他们的努力在哪一天最适合？我们是否开始与团队最重要的主题进行团队会议，还是我们盲目地遵循流程？
检查警报和 SLA
中有没有模糊不清的地方。如果你的团队被追究责任，请验证是否有一个很好的理由让每个人都同意并理解。
#### 运营团队在估计其心理安全水平方面表现不佳
 最后，我会留下一个想法：擅长运维的人不善于识别心理上不安全的情况。我们偶尔会认为紧张的轮值是"正常"的，并且在我们感到疲累之前也并不会感到有啥不对。在工作中过分强调牺牲行为会使个人牺牲正常化，并将牺牲转化为期望。Emily
Gorcenski，["力量的崇拜（Ure）"](https://www.usenix.org/conference/srecon17europe/program/presentation/gorcenski)，SRECON。让我们富有创造力的好奇心驱使我们信息过载。尽管对于一切都保持敬畏才是切合实际的，但我们仍然非常乐观地认为我们合作的系统，软件和人员会变得更好。
我调查了深陷困境的团队，每一个反应似乎都表明一切都是美好的。我很乐意听到那些有发现工程师存在认知不和谐。而且哪怕经过这么多年，我仍然常常会感到惊讶。      
# 延伸阅读
-   Kim Scott, [*Radical
    Candor*](https://www.radicalcandor.com/the-book/).
-   Kerry Patterson, Joseph Grenny, Ron McMillan, and Al Switzler,
    [*Crucial
    Conversations*](https://www.vitalsmarts.com/resource/crucial-conversations-book/).
# 编者介绍
John Looney 是 Facebook
的生产工程师，负责管理数据中心资源调配团队。在此之前，他帮助为全球增长最快的技术公司之一的
Intercom 构建了基于 SaaS 的现代基础设施平台。在此之前，他是谷歌的全栈
SRE，他做过从机架设计、数据中心自动化直到广告服务、GFS、Borg 和 Colossus
等等。他写了一本关于自动化的 SRE 书，是 USENIX SRECon
的指导委员会的成员。