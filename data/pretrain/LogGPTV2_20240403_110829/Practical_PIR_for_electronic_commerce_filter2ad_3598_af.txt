### References

[24] R. Cramer, I. Damgård, and B. Schoenmakers. Proofs of Partial Knowledge and Simplified Design of Witness Hiding Protocols. In *Proceedings of CRYPTO 1994*, Santa Barbara, CA, August 1994.

[25] I. Damgård, M. Fitzi, E. Kiltz, J. B. Nielsen, and T. Toft. Unconditionally Secure Constant-Rounds Multi-party Computation for Equality, Comparison, Bits, and Exponentiation. In *Proceedings of TCC 2006*, New York, NY, March 2006.

[26] B. Doe. The Kindle in Australia, October 2009.

[27] P. Feldman. A Practical Scheme for Non-interactive Verifiable Secret Sharing. In *Proceedings of FOCS 1987*, Los Angeles, CA, October 1987.

[28] A. Fiat and A. Shamir. How to Prove Yourself: Practical Solutions to Identification and Signature Problems. In *Proceedings of CRYPTO 1986*, Santa Barbara, CA, 1986.

[29] Free Software Foundation. The GNU Multiple Precision (GMP) Arithmetic Library. Version 5.0.1.

[30] Y. Gertner, S. Goldwasser, and T. Malkin. A Random Server Model for Private Information Retrieval. In *Proceedings of RANDOM 1998*, Barcelona, Spain, October 1998.

[31] Y. Gertner, Y. Ishai, E. Kushilevitz, and T. Malkin. Protecting Data Privacy in Private Information Retrieval Schemes. In *Proceedings of STOC 1998*, Dallas, TX, May 1998.

[32] I. Goldberg. Percy++ / PIR in C++. Version 0.7.1.

[33] I. Goldberg. Improving the Robustness of Private Information Retrieval. In *Proceedings of IEEE S&P 2007*, Oakland, CA, May 2007.

[34] S. Guha, B. Cheng, and P. Francis. Privad: Practical Privacy in Online Advertising. In *Proceedings of NSDI 2011*, Boston, MA, March 2011.

[35] V. Guruswami and M. Sudan. Improved Decoding of Reed-Solomon and Algebraic-Geometric Codes. In *Proceedings of FOCS 1998*, Palo Alto, CA, November 1998.

[36] R. Henry, F. Olumofin, and I. Goldberg. Practical PIR for Electronic Commerce. Tech. Report CACR 2011-04, University of Waterloo, 2011.

[37] Y. Ishai, E. Kushilevitz, R. Ostrovsky, and A. Sahai. Batch Codes and Their Applications. In *Proceedings of STOC 2004*, Chicago, IL, June 2004.

[38] A. Juels. Targeted Advertising... And Privacy Too. In *CT-RSA*, San Francisco, CA, April 2001.

[39] A. Kate. PBCWrapper: C++ Wrapper Classes for the Pairing-Based Cryptography Library. Version 0.8.0.

[40] A. Kate, G. M. Zaverucha, and I. Goldberg. Constant-Size Commitments to Polynomials and Their Applications. In *Proceedings of ASIACRYPT 2010*, Singapore, December 2010.

[41] A. Kate, G. M. Zaverucha, and I. Goldberg. Polynomial Commitments. Tech. Report CACR 2010-10, University of Waterloo, 2010.

[42] E. Kushilevitz and R. Ostrovsky. Replication Is Not Needed: Single Database, Computationally-Private Information Retrieval. In *Proceedings of FOCS 1997*, Miami Beach, FL, October 1997.

[43] B. Lynn. PBC Library: The Pairing-Based Cryptography Library. Version 0.5.11.

[44] D. McCullagh. Amazon Fights Demand for Customer Records. In *CNET News*. April 2010. [Online]. Available: http://news.cnet.com/8301-13578_3-20002870-38.html.

[45] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone. Handbook of Applied Cryptography. CRC Press, 2001.

[46] T. Nishide and K. Ohta. Constant-Round Multiparty Computation for Interval Test, Equality Test, and Comparison. *IEICE Transactions*, 90-A(5):960–968, 2007.

[47] F. Olumofin and I. Goldberg. Preserving Access Privacy Over Large Databases. Tech. Report CACR 2010-33, University of Waterloo, 2010.

[48] F. G. Olumofin and I. Goldberg. Privacy-Preserving Queries over Relational Databases. In *Privacy Enhancing Technologies*, Berlin, Germany, July 2010.

[49] Ookla Net Metrics. Canada and US Source Data. [Online]. Available: http://www.netindex.com/source-data/.

[50] OpenSSL Project. OpenSSL: The Open Source Toolkit for SSL/TLS. Version 1.0.0.

[51] R. Ostrovsky and W. E. Skeith III. A Survey of Single-Database Private Information Retrieval: Techniques and Applications. In *Proceedings of PKC 2007*, Beijing, China, April 2007.

[52] T. P. Pedersen. Non-Interactive and Information-Theoretic Secure Verifiable Secret Sharing. In *Proceedings of CRYPTO 1991*, Santa Barbara, CA, August 1991.

[53] C.-P. Schnorr. Efficient Identification and Signatures for Smart Cards. In *Proceedings of CRYPTO 1989*, Santa Barbara, CA, August 1989.

[54] A. Shamir. How to Share a Secret. *Communications of the ACM*, 22(11):612–613, November 1979.

[55] V. Shoup. NTL: A Library for Doing Number Theory. Version 5.5.2.

[56] V. Toubiana, H. Nissenbaum, A. Narayanan, S. Barocas, and D. Boneh. Adnostic: Privacy-Preserving Targeted Advertising. In *Proceedings of NDSS 2010*, San Diego, CA, February 2010.

[57] Y. Zhang, M. H. Au, D. S. Wong, Q. Huang, N. Mamoulis, D. W. Cheung, and S.-M. Yiu. Oblivious Transfer with Access Control: Realizing Disjunction without Duplication. In *Proceedings of Pairing 2010*, Yamanaka Hot Spring, Japan, December 2010.

### Appendix

#### A. Proving Equality of 1-out-of-r Discrete Logarithms

Let \( g \) and \( h \) be known generators of a group \( G \) (of order \( q \)) with \( \log_g(h) \) unknown to the verifier. Let \( g_1, g_2, \ldots, g_r \) and \( h_1, h_2, \ldots, h_r \) be given. The proof works as follows:

1. **Prover knows**: \( x = \log_g(g_j) = \log_h(h_j) \) and index \( j \).
2. **Verifier learns**: That \( \log_g(g_{j'}) = \log_h(h_{j'}) \) for at least one \( j' \).

**Steps**:
1. The prover chooses \( \gamma_1, \ldots, \gamma_r \in_R \mathbb{Z}_q \) and \( c'_1, \ldots, c'_r \in \mathbb{Z}_{2\kappa} \), then computes and sends the commitments \( \eta_i = g^{\gamma_i} g^{c'_i} \) and \( \zeta_i = h^{\gamma_i} h^{c'_i} \) to the verifier, for \( 1 \leq i \leq r \).
2. The verifier chooses and sends \( c \in_R \mathbb{Z}_{2\kappa} \) to the prover.
3. The prover sets \( c_i = c'_i \) and \( \upsilon_i = \gamma_i \) for \( i \in [1, r] - \{j\} \), and computes \( c_j = c - \sum_{i=1}^r \bar{\delta}_{ij} c'_i \mod 2\kappa \) and \( \upsilon_j = \gamma_j - c_j x \mod q \). Then, the prover sends the pair \( (\vec{c}, \vec{\upsilon}) \) to the verifier, where \( \vec{c} = (c_1, \ldots, c_r) \) and \( \vec{\upsilon} = (\upsilon_1, \ldots, \upsilon_r) \).
4. The verifier chooses \( \vec{b} = (b_1, \ldots, b_r) \in_R (\mathbb{Z}_{2\kappa})^r \) and computes \( \upsilon = \vec{\upsilon} \cdot \vec{b} \). The verifier accepts if and only if:
   \[
   \prod_{i=1}^r \eta_i^{b_i} \stackrel{?}{=} g^\upsilon \left( \prod_{i=1}^r g_i^{c_i b_i} \right) \quad \text{and} \quad \prod_{i=1}^r \zeta_i^{b_i} \stackrel{?}{=} h^\upsilon \left( \prod_{i=1}^r h_i^{c_i b_i} \right) \quad \text{and} \quad c \equiv \sum_{i=1}^r c_i \mod 2\kappa
   \]

Note that the above batch verification equation is more efficient than checking each of the \( r \) verification equations independently, since both \( b_i \) and \( c_i \) are short exponents. In our application (see §3.5.2), we take advantage of some properties of the special case we are proving to further reduce verification costs.

#### B. Proving That a Vector of Commitments Opens to a Standard Basis Vector

**Prover knows**: A length-\( r \) vector of polynomials \( \vec{f} \in (\mathbb{Z}_q[x])^r \).

**Verifier learns**: A length-\( r \) vector \( \vec{C} \) of component-wise commitments to polynomials in \( \vec{f} \) and that \( \vec{f} \) evaluates component-wise to a standard basis vector at \( x = 0 \).

**Steps**:
1. The prover computes and sends \( \vec{C} \) to the verifier.
2. The verifier chooses a vector of challenges \( \vec{a} \in_R (\mathbb{Z}_{2\kappa})^r \) and sends it to the prover; meanwhile, the verifier computes \( C_a = \prod_{i=1}^r C_i^{a_i} \), where \( C_i \) and \( a_i \) are the \( i \)-th components of \( \vec{C} \) and \( \vec{a} \), respectively. Note that \( C_a \) is a commitment to the dot product \( f_a = \vec{f} \cdot \vec{a} \).
3. The prover computes the dot product \( f_a = \vec{f} \cdot \vec{a} \) and engages in a zero-knowledge proof of knowledge of the evaluation of \( f_a \) at \( x = 0 \) with the verifier, such as by using the technique described in [41, Appendix D].
4. Let \( Y = g^{\gamma y} \) be the (blinded) commitment to \( y = f_a(0) \) from this last proof of knowledge. The prover sends \( \nu = h^\gamma \) together with proof that \( \gamma \) is the same randomness used to blind \( Y \), and engages in a batch proof of equality of 1-out-of-\( r \) discrete logarithms to prove:
   \[
   \sum_{i=1}^r \left( \log_g(T^Y) = \log_h(\nu^{a_i}) \right)
   \]

**Remark 2**: Because we are dealing with the special case of the batch proof of equality of 1-out-of-\( r \) discrete logarithms in which \( g_1 = g_2 = \cdots = g_r = Y \) and \( \log_\nu(h_i) = a_i \) is known to the verifier, the following optimizations apply: instead of checking:
   \[
   \prod_{i=1}^r \eta_i^{d_i} \stackrel{?}{=} g^\upsilon \left( \prod_{i=1}^r g_i^{c_i d_i} \right) \quad \text{and} \quad \prod_{i=1}^r \zeta_i^{d_i} \stackrel{?}{=} h^\upsilon \left( \prod_{i=1}^r h_i^{c_i d_i} \right)
   \]
   in the verification equation, the verifier computes \( w_1 = \vec{c} \cdot \vec{d} \mod q \) and \( w_2 = \sum_{i=1}^r a_i c_i d_i \mod q \) and checks if:
   \[
   \prod_{i=1}^r \eta_i^{d_i} \stackrel{?}{=} g^\upsilon Y^{w_1} \quad \text{and} \quad \prod_{i=1}^r \zeta_i^{d_i} \stackrel{?}{=} h^\upsilon \nu^{w_2}
   \]
   This reduces the cost of verification from 2 full-length exponentiations and \( 6r \) short exponentiations to 4 full-length exponentiations and \( 2r \) short exponentiations.

#### C. Verifying Evaluations of Polynomial Commitments at a Common Point

**Prover knows**: A length-\( r \) vector of polynomials \( \vec{f} \in (\mathbb{Z}_q[x])^r \).

**Verifier learns**: A length-\( r \) vector \( \vec{C} \) of component-wise commitments to polynomials in \( \vec{f} \), a component-wise evaluation \( \vec{\rho} \) of \( \vec{f} \) at \( x = x_0 \), and the evaluation point \( x_0 \).

**Steps**:
1. The prover computes and sends \( \vec{C} \) and \( \vec{\rho} \) to the verifier.
2. The verifier chooses \( \vec{a} = (a_1, \ldots, a_r) \in_R (\mathbb{Z}_{2\kappa})^r \) and sends it to the prover; meanwhile, the verifier computes the dot product \( \rho_a = \vec{\rho} \cdot \vec{a} \) and the commitment \( C_a = \prod_{i=1}^r C_i^{a_i} \).
3. The prover computes the dot product \( f_a = \vec{f} \cdot \vec{a} \) and the witness \( w_a = \text{CreateWitness}(f_a, x_0) \), then sends \( w_a \) to the verifier.
4. The verifier checks if \( \text{Ver}(C_a, x_0, \rho_a, w_a) \stackrel{?}{=} \text{true} \).

The non-interactive form of batch verification works similarly, except the prover computes and sends a vector of witnesses to the verifier (one for each polynomial commitment), and the verifier combines the witnesses locally by computing \( w_a = \prod_{i=1}^r w_{a_i} \); in particular, the vector \( \vec{a} \) is local to the verifier and the prover never sees it.