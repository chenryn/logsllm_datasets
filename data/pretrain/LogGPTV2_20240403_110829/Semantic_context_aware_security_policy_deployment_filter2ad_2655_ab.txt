In order to ease the definition of discovery policies 
exploiting  context,  context  handling  and  reasoning 
relies  on  the  use  of  a  context  ontology.  This  section 
describes  this  ontology  and  how  it  can  be  combined 
with service discovery. 
4.2.1.  Context Information Representation 
Ontologies aim at classifying, characterizing and at last 
at establishing relationship between concept in a given 
domain.  Therefore,  they  provide  a  strong  support  for 
reasoning about concept. Regarding context ontology, 
we decide to use the Context OntoLogy (CoOL[11]). It 
is  expressed  with 
the  Web  Ontology  Language 
(OWL[12]). For sake of efficiency, we use the OWL-
DL version of  OWL. 
two  complementary  approaches 
4.2.2.  Reasoning about Context Information 
For  reasoning  about  context 
information,  we 
distinguish 
for 
reasoning  about  context  information:  ontology  and 
inference  rule  based  reasoning.  As  described  in  the 
previous  section,  ontology  supports 
relationship 
definition between context information. Based on those 
relationships, ontology  eases reasoning about context. 
In  Figure  2,  we  express  in  OWL-DL  the  following 
reasoning: “if patient pulse is below 10 and his body 
temperature is below 10, then he is unconscious”. We 
establish  a  relationship  between  patient’s  pulse  and 
body  temperature  in  order  to  infer  on  his  health 
condition. 
Figure 2: OWL-based reasoning sample 
Moreover, ontology enables us to express similarity 
relationship between context. Thus, we can express a 
similiraty between pulse and heart rate. If heart rate is 
not available, then pulse can be used in order to reason 
about patient’s health condition. 
Nevertheless the expressiveness power of OWL can 
be quickly restrictive as soon as we try to target more 
complex reasoning about context. Due to the restriction 
of  OWL-DL,  ontology  based  reasoning  is  limited  to 
binary  relationship  between  two  context  notions.  For 
this reason, we can not quantify relationship in OWL-
DL.  For  example,  proximity  relationship  can  be 
established in context ontology, but it can be quantify 
with respect to the distance between the users. 
identified 
relationships 
to  ontology-based 
For those reasons, we propose to use inference rule-
in 
based  reasoning  engine  such  as  Jess  [13], 
reasoning.  Once 
combination 
ontology-based 
between 
context,  inference  rule  tends  to  cope  with  ontology-
based  reasoning  by  evaluating  and  quantifying  those 
relationships.  In  our  use  case,  proximity  between 
doctor and patient has to be evaluated. In Figure 3, we 
provide an example of inference rule about proximity 
between a physician and a patient. This rule is defined 
for  Jess.  We  intentionally  skip  the  acquisition  of 
physician and patient’s location in the rule definition.   
;; ACQUIRE PHYSICIAN AND PATIENT LOCATION 
;; TEST IF THEY ARE NO FAR THAN 2000 METERS 
=> 
(assert 
    (triple 
 (p "isCloseTo") 
 (s ?PatientLocation) 
 (o ?PhysicianLocation)  )   ) 
Figure 3: Inference rule sample with Jess [13] 
4
4.3.  Security Policy Module 
In  [17],  we  propose  a  framework  for  exploiting 
reasoning  about  context  at  access  control  policy 
enforcement  based  on  XACML.  XACML  request 
consists  of  a  triple  {Subject,  Resource,  Action}.  A 
Subject  tends  to  gain  access  to  a  Resource  (e.g.  file, 
web  service)  in  order  to  perform  an  Action  (e.g. 
read/write, 
is 
characterized by a set of attributes (e.g role, location). 
Based  on  this  triple  {Subject,  Resource,  Action},  a 
rule-based  access  control  policy  is  enforced.  After 
decision making, a XACML response is sent back to 
the requestor  (e.g.  Permit,  Deny,  Intermediate  or  Not 
Applicable).  
invoke  a  method).  The  Subject 
Using the XACML policy language, we can easily 
restrict  the  discovery  to  some  authorized  clients  as 
illustrated  in  Figure  4.  In  this  example,  we  restrict 
access to getPatientMedical action of any resource to a 
user characterized with a physician role. (For sake of 
clarity, we skip namespaces.) 
initiated by the server in order to register its services 
by sending a Hello message containing the description 
of  its  capabilities,  its  profile  (Also  credentials)  and 
some  specific  contextual  information. The  step  (2)  is 
the  Client’s  service  lookup  by  sending  a  Probe 
message containing the service request and a credential 
(to  be  authenticated).  The  step  (3)  performed  by  the 
registry consists in a request matching with the existing 
service profiles. If needed the client (and services are 
authenticated  in  (4),  then  a  reasoning  about  the 
eventual  contextual  information  is  performed  in  (5), 
Policy  enforcement  is  done  in  the  step  (6).  If  the 
request is  accepted, the registry  returns  a response  to 
the client by sending a ProbeMatch message (7).  
      Physician    
Figure 4: XACML Policy Definition 
We can extend this security policy definition with the 
following condition. 
2000 meters  
Figure 5: CloseTo Conditon in XACML 
Figure 5 describes how to infer the proximity between 
patient and physician. If the distance between their two 
personal  devices  is  below  2000  meters,  than  we 
consider them as close to each other.  
4.4.  Architecture 
In this section we detail how our implementation is 
working and how  the  different  entities  represented  in 
the Figure 6 can interact with each others. Step (1) is 
Figure 6: Global Architecture Design 
4.5.  Performance and results 
In  order  to  evaluate  the  efficiency  of  our  solution 
we developed a Java prototype and we performed some 
measurements  about  time  execution  and  memory 
consumption.  For these experiments we used: 
o  OS: Fedora Core 5 with a Linux 2.6.x kernel 
o  CPU: Mobile Intel Pentium 4 CPU 1.70 GH 
o  Physical Memory 512 MB 
In this table we provide all the measurement values 
related to each step described in section 4.4. 
i686  
Actions 
Sending Hello 
Sending Probe 
Service matching 
Time (ms)  Size (byte) 
31 
(1) 
67 
(2) 
370 
(3) 
1572 
(4)  Authentication 
4005 
(5)  Context Reasoning  
Policy enforcement 
(6) 
862 
(7) 
Sending ProbeMatch  15 
5.  Related Work 
3963 
862 
- 
- 
76000 
- 
1622 
To  our  knowledge,  the  notion  of  context-aware 
security policy for the service discovery has not been 
investigated  in  the  literature,  while  context  aware 
service  discovery  or  secure  discovery  is not new  any 
more.  This  section  gives  an  overview  of  some 
interesting work regarding these two topics. 
5
One  of  the  first  approaches  dealing  with  secure 
service  discovery  was  proposed  by 
[14].  This 
architecture relies on an additional component, called 
Service Discovery Service (SDS), which plays the role 
of a secure information repository (secure registry). It 
provides  authentication,  access  control,  encryption, 
signature  verification,  and  privacy  protection  using  a 
PKI. Contrary to our solution, clients and services do 
not  have  any  possibility  to  define  their  own  security 
preferences regarding discovery. 
In  a  precedent  work  [15]  we  proposed  a  specific 
solution 
to  secure  peer-to-peer  service  discovery 
mechanisms.  This  solution  is  based  on  the  use  of  an 
Identity  Based  Encryption  scheme  to  protect  the 
requests  and 
the  announcement  messages.  This 
solution needs  not  relying  on  a  trusted  third  party  in 
order to perform a secure service matchmaking. 
in  order 
to  authenticate 
[16]  addresses  privacy  protection  aspects  of  the 
discovery  process.  The  authors  propose  the  use  of 
Bloom filters to protect the client and server personal 
information. Membership tests are performed between 
the  directory  and  the  client  using  generated  Bloom 
filters 
themselves.  The 
participating entities must agree beforehand on specific 
hash functions in order to use these Bloom filters, yet 
this 
through  a  static 
agreement. The  scope  of  the restrictions  is  very  poor 
compared  to  our  policy  solution  that  provides  an 
efficient  semantic  expressiveness  used  to  define  the 
security preferences of each entity. 
6.  Conclusion 
is  not  resolved  but 
In  this  paper  we  propose  a  context  aware  policy 
based  solution  to  secure  service  discovery  in  Service 
Oriented  Architecture.  First  we  established  a  threat 
analysis related to discovery mechanisms by providing 
a  non  exhaustive  list  of  possible  attacks  that  can  be 
built  against 
the  data  and  resources  of  service 
discovery actors. We tend to cope with these identified 
threats by defining a secure registry solution relying on 
context-aware  policy.  We  motivate  the  use  of  secure 
and  trusted  context-information  in  order  to  adapt  the 
security 
dynamic 
environment. 
enforcement  with 
Our  approach  solves  user’s  privacy  and  service 
access  control  by  introducing  context-aware  access 
control  for  discovery  service  and  efficiently  supports 
trust  establishment  between  different  actors  of  the 
system. We are currently investigating about trust and 
security  management  for  context  acquisition  and 
reasoning. 
policy 
issue 
in  MobiSYS 
[3]  S.  Trabelsi,  J.C.  Pazzaglia  and  Y.  Roudier  “Enabling 
Secure  Discovery 
in  a  Pervasive  Environment”  3rd 
International Conference on Security in Pervasive Computing 
(SPC 2006) – York – UK – April 2006 
[4] A. K. Dey, “Understanding and using context,” Personal 
and Ubiquitous Computing Journal, vol. 5(1), pp. 4–7, 2001. 
[5]  R.  Liscano  and  A.  Ghavam,  “Context  Awareness  and 
Service Discovery for Spontaneous Networking”, School of 
Information  and  Technology  and  Engineering  (SITE), 
University of Ottawa, 2003 
[6]  S.E.  Czerwinski  et  al,  “An  Architecture  for  a  Secure 
Service  Discovery  Service”  ,  In  Proceedings  of  MobiCom 
'99, Seattle, WA, August 1999  
[7]  Kay  Römer,  Oliver  Kasten,  Friedemann  Mattern, 
“Middleware  Challenges  for  Wireless  Sensor  Networks”, 
ACM Mobile Computing and Communication Review, Vol. 
6, No. 4, pp. 59-61, October 2002 
[8] J. I. Hong and J. A. Landay, “An architecture for privacy-
sensitive  ubiquitous  computing,” 
’04: 
Proceedings  of  the  2nd  international  conference  on  Mobile 
systems,  applications,  and  services.  ACM  Press,  2004,  pp. 
177–189. 
[9]  N.  Shankar  and  D.  Bafanz,  “Enabling  secure  ad-hoc 
communication  using  context-aware  security  services,”  in 
UBICOMP  02:  Workshop  on  Security 
in  Ubiquitous 
Computing, 2002. 
[10]  L.  Bussard  L.,  Roudier  Y.,  “Untraceable  secret 
credentials:  Trust 
in 
PERCOMMW’04.  Second  IEEE  Annual  Conference  on 
Pervasive  Computing  and  Communications  Workshops, 
2004. 
[11] J. Van den Bergh and K. Coninx. “Towards integrated 
design of context-sensitive interactive systems”, Mar. 2005. 
[12]  W3C  OWL 
http://www.w3.org/2004/OWL/. 
[13]  Jess,  the  Rule  Engine  for  the  JavaTM  Platform, 
http://herzberg.ca.sandia.gov/jess/. 
[14]  S.E.  Czerwinski  et  al,  “An  Architecture  for  a  Secure 
Service  Discovery  Service”  ,  In  Proceedings  of  MobiCom 
'99, Seattle, WA, August 1999 
[15]  S.  Trabelsi,  J.C  Pazzaglia,  Y.  Roudier  "Secure  Web 
service  discovery:  overcoming  challenges  of  ubiquitous 
computing"  ECOWS  2006,  4th  IEEE  European  Conference 
on Web Services, Zurich - Switzerland, December, 2006  
[16] F. Zhu, M. Mutka, L. Ni “Prudent exposure: A private 
and user centric service discovery protocol” Proceedings of 
the  2nd  IEEE  International  Conference  on  Pervasive 
Computing  and  Communications  (PerCom’04)  Orlando, 
USA, 2004  
[17]  L.  Gomez,  L.  Moraru,  D.  Simplot-Ryl  and  K. 
Wrona,  and.  Using  Sensor  and  Location  Information 
In  Proc. 
for  Context-Aware  Access  Control. 
International  Conference  on  "Computer  as  a  tool" 
(EUROCON 2005). 
establishment  with  privacy,” 
“Web  Ontology  Language”. 
, 
7.   References  
[1] OASIS, “UDDI”, http://www.uddi.org 
[2] 
http://msdn.microsoft.com/ws/2005/04/ws-discovery/ 
WS-Discovery 
Specifications 
6