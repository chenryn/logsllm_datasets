### 4.2. Context Handling and Reasoning

To facilitate the definition of discovery policies that leverage context, we rely on a context ontology. This section outlines this ontology and how it can be integrated with service discovery.

#### 4.2.1. Context Information Representation

Ontologies are designed to classify, characterize, and establish relationships between concepts within a specific domain. They provide a robust framework for reasoning about these concepts. For our context ontology, we have chosen to use the Context OntoLogy (CoOL [11]), which is expressed using the Web Ontology Language (OWL [12]). To ensure efficiency, we use the OWL-DL version of OWL.

#### 4.2.2. Reasoning about Context Information

For reasoning about context information, we employ two complementary approaches: ontology-based reasoning and inference rule-based reasoning. As described in the previous section, ontologies support the definition of relationships between context information, which facilitates reasoning about context. 

In Figure 2, we illustrate an example of OWL-DL-based reasoning: "If a patient's pulse is below 10 and their body temperature is below 10, then the patient is unconscious." We establish a relationship between the patient's pulse and body temperature to infer their health condition.

**Figure 2: Example of OWL-based reasoning**

Additionally, ontologies allow us to express similarity relationships between context elements. For instance, we can define a similarity between pulse and heart rate. If heart rate data is unavailable, pulse data can be used to reason about the patient's health condition.

However, the expressive power of OWL can be restrictive when dealing with more complex reasoning. Due to the limitations of OWL-DL, ontology-based reasoning is limited to binary relationships between two context notions, and quantifying these relationships is not possible. For example, while proximity relationships can be established in a context ontology, they cannot be quantified based on the distance between users.

To address these limitations, we propose using an inference rule-based reasoning engine such as Jess [13] in combination with ontology-based reasoning. Inference rules can evaluate and quantify the relationships identified by the ontology. In our use case, the proximity between a doctor and a patient must be evaluated. Figure 3 provides an example of an inference rule for proximity, defined for Jess. The acquisition of the physician and patient's location is intentionally omitted from the rule definition for clarity.

**Figure 3: Example of an inference rule with Jess [13]**

```
;; ACQUIRE PHYSICIAN AND PATIENT LOCATION
;; TEST IF THEY ARE NO FARTHER THAN 2000 METERS
=> 
(assert 
    (triple 
        (p "isCloseTo") 
        (s ?PatientLocation) 
        (o ?PhysicianLocation)  
    )   
)
```

### 4.3. Security Policy Module

In [17], we propose a framework for leveraging context-based reasoning in access control policy enforcement using XACML. An XACML request consists of a triple {Subject, Resource, Action}. A Subject attempts to gain access to a Resource (e.g., file, web service) to perform an Action (e.g., read/write, invoke a method). The Subject is characterized by a set of attributes (e.g., role, location). Based on this triple, a rule-based access control policy is enforced. After decision-making, a XACML response (e.g., Permit, Deny, Indeterminate, or Not Applicable) is sent back to the requester.

Using the XACML policy language, we can easily restrict discovery to authorized clients. For example, in Figure 4, we restrict access to the `getPatientMedical` action of any resource to a user with a physician role. (Namespaces are omitted for clarity.)

**Figure 4: XACML Policy Definition**

We can extend this security policy definition with additional conditions, such as the proximity condition shown in Figure 5. This condition infers the proximity between a patient and a physician. If the distance between their personal devices is less than 2000 meters, they are considered close to each other.

**Figure 5: Proximity Condition in XACML**

### 4.4. Architecture

This section details the implementation and interaction of the different entities in our system, as illustrated in Figure 6. The steps are as follows:

1. **Service Registration**: The server initiates the process by sending a `Hello` message containing the description of its capabilities, profile (including credentials), and contextual information.
2. **Client Service Lookup**: The client sends a `Probe` message with the service request and a credential for authentication.
3. **Request Matching**: The registry matches the request with existing service profiles.
4. **Authentication**: If needed, the client and services are authenticated.
5. **Contextual Reasoning**: Reasoning about the contextual information is performed.
6. **Policy Enforcement**: Access control policies are enforced.
7. **Response**: If the request is accepted, the registry returns a `ProbeMatch` message to the client.

**Figure 6: Global Architecture Design**

### 4.5. Performance and Results

To evaluate the efficiency of our solution, we developed a Java prototype and conducted measurements of execution time and memory consumption. The experiments were performed on the following hardware and software configuration:

- **OS**: Fedora Core 5 with a Linux 2.6.x kernel
- **CPU**: Mobile Intel Pentium 4 CPU 1.70 GHz
- **Physical Memory**: 512 MB

The table below provides the measurement values for each step described in Section 4.4.

| Actions                      | Time (ms) | Size (byte) |
|------------------------------|-----------|-------------|
| Sending Hello                | 31        | 1572        |
| Sending Probe                | 67        | 76000       |
| Service matching             | 370       | -           |
| Authentication               | 4005      | -           |
| Context Reasoning            | 862       | -           |
| Policy enforcement           | 862       | -           |
| Sending ProbeMatch           | 15        | 1622        |

### 5. Related Work

To our knowledge, the concept of context-aware security policies for service discovery has not been extensively explored in the literature, although context-aware service discovery and secure discovery are well-established topics. This section provides an overview of relevant work in these areas.

One of the early approaches to secure service discovery was proposed by [14]. Their architecture includes an additional component, the Service Discovery Service (SDS), which acts as a secure information repository. It provides authentication, access control, encryption, signature verification, and privacy protection using a PKI. Unlike our solution, clients and services in this approach do not have the flexibility to define their own security preferences.

In a previous work [15], we proposed a specific solution for securing peer-to-peer service discovery mechanisms. This solution uses Identity-Based Encryption to protect requests and announcement messages, eliminating the need for a trusted third party.

[16] addresses privacy protection in the discovery process by using Bloom filters to protect personal information. Membership tests are performed using generated Bloom filters, but this requires a static agreement on specific hash functions. The scope of restrictions in this approach is limited compared to our policy solution, which offers efficient semantic expressiveness for defining security preferences.

### 6. Conclusion

In this paper, we propose a context-aware policy-based solution for securing service discovery in Service-Oriented Architectures. We first conduct a threat analysis related to discovery mechanisms, identifying potential attacks. Our solution involves a secure registry that leverages context-aware policies. We emphasize the importance of secure and trusted context information to adapt security enforcement in dynamic environments.

Our approach effectively addresses user privacy and service access control by introducing context-aware access control for discovery services and supports trust establishment between system actors. We are currently investigating trust and security management for context acquisition and reasoning.

### 7. References

[1] OASIS, “UDDI”, http://www.uddi.org

[2] WS-Discovery Specifications, http://msdn.microsoft.com/ws/2005/04/ws-discovery/

[3] S. Trabelsi, J.C. Pazzaglia, and Y. Roudier, “Enabling Secure Discovery in a Pervasive Environment,” 3rd International Conference on Security in Pervasive Computing (SPC 2006), York, UK, April 2006.

[4] A. K. Dey, “Understanding and using context,” Personal and Ubiquitous Computing Journal, vol. 5(1), pp. 4–7, 2001.

[5] R. Liscano and A. Ghavam, “Context Awareness and Service Discovery for Spontaneous Networking,” School of Information and Technology and Engineering (SITE), University of Ottawa, 2003.

[6] S.E. Czerwinski et al., “An Architecture for a Secure Service Discovery Service,” Proceedings of MobiCom '99, Seattle, WA, August 1999.

[7] K. Römer, O. Kasten, and F. Mattern, “Middleware Challenges for Wireless Sensor Networks,” ACM Mobile Computing and Communication Review, Vol. 6, No. 4, pp. 59-61, October 2002.

[8] J. I. Hong and J. A. Landay, “An architecture for privacy-sensitive ubiquitous computing,” MobiSys '04: Proceedings of the 2nd international conference on Mobile systems, applications, and services. ACM Press, 2004, pp. 177–189.

[9] N. Shankar and D. Balfanz, “Enabling secure ad-hoc communication using context-aware security services,” UBICOMP 02: Workshop on Security in Ubiquitous Computing, 2002.

[10] L. Bussard, Y. Roudier, “Untraceable secret credentials: Trust establishment with privacy,” PERCOMMW’04. Second IEEE Annual Conference on Pervasive Computing and Communications Workshops, 2004.

[11] J. Van den Bergh and K. Coninx, “Towards integrated design of context-sensitive interactive systems,” Mar. 2005.

[12] W3C OWL, “Web Ontology Language,” http://www.w3.org/2004/OWL/.

[13] Jess, “The Rule Engine for the JavaTM Platform,” http://herzberg.ca.sandia.gov/jess/.

[14] S.E. Czerwinski et al., “An Architecture for a Secure Service Discovery Service,” Proceedings of MobiCom '99, Seattle, WA, August 1999.

[15] S. Trabelsi, J.C. Pazzaglia, Y. Roudier, “Secure Web service discovery: overcoming challenges of ubiquitous computing,” ECOWS 2006, 4th IEEE European Conference on Web Services, Zurich, Switzerland, December 2006.

[16] F. Zhu, M. Mutka, L. Ni, “Prudent exposure: A private and user-centric service discovery protocol,” Proceedings of the 2nd IEEE International Conference on Pervasive Computing and Communications (PerCom’04), Orlando, USA, 2004.

[17] L. Gomez, L. Moraru, D. Simplot-Ryl, and K. Wrona, “Using Sensor and Location Information for Context-Aware Access Control,” Proc. International Conference on "Computer as a tool" (EUROCON 2005).