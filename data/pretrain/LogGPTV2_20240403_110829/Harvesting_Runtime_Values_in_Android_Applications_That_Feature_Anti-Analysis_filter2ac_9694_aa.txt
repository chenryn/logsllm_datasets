title:Harvesting Runtime Values in Android Applications That Feature Anti-Analysis
Techniques
author:Siegfried Rasthofer and
Steven Arzt and
Marc Miltenberger and
Eric Bodden
Harvesting Runtime Values in Android Applications
That Feature Anti-Analysis Techniques
Siegfried Rasthofer, Steven Arzt, Marc Miltenberger
Secure Software Engineering Group
Technische Universit¨at Darmstadt &
Fraunhofer SIT, Darmstadt, Germany
{siegfried.rasthofer, steven.arzt, marc.miltenberger}@cased.de
Eric Bodden⇤
Software Engineering Group
University of Paderborn &
Fraunhofer IEM, Paderborn, Germany
PI:EMAIL
Abstract—It is generally challenging to tell apart malware
from benign applications. To make this decision, human analysts
are frequently interested in runtime values: targets of reﬂective
method calls, URLs to which data is sent, target telephone
numbers of SMS messages, and many more. However, obfuscation
and string encryption, used by malware as well as goodware, often
not only render human inspections, but also static analyses inef-
fective. In addition, malware frequently tricks dynamic analyses
by detecting the execution environment emulated by the analysis
tool and then refraining from malicious behavior.
In this work we therefore present HARVESTER, an approach
to fully automatically extract runtime values from Android
applications. HARVESTER is designed to extract values even from
highly obfuscated state-of-the-art malware samples that obfuscate
method calls using reﬂection, hide sensitive values in native code,
load code dynamically and apply anti-analysis techniques. The
approach combines program slicing with code generation and
dynamic execution.
Experiments on 16,799 current malware samples show that
HARVESTER fully automatically extracts many sensitive values,
with perfect precision. The process usually takes less than three
minutes and does not require human interaction. In particular,
it goes without simulating UI inputs. Two case studies further
show that by integrating the extracted values back into the app,
HARVESTER can increase the recall of existing static and dynamic
analysis tools such as FlowDroid and TaintDroid.
I.
INTRODUCTION
To assess the quality or security of a mobile application,
experts are frequently interested in its runtime values. For
instance, the analyst often needs to know which method a
reﬂective method call is invoking, which URL a piece of data
is transmitted to, which phone numbers SMS messages are
sent to, what the contents of these messages are, and which
databases the app reads from the phone (contacts, e-mail, SMS
⇤At the time this research was conducted, Eric Bodden was employed at
Fraunhofer SIT & TU Darmstadt.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23066
1 if(Build.FINGERPRINT.startsWith("generic"))
2
return; //we are running in an emulator
3 String messageText = simCountryIso().equals("US") ? US
: INTERN;
4 String clazz = decrypt("fri$ds\&S");
5 String method = decrypt("dvdf4$DCS");
6 Class.forName(clazz).
7
getMethod(method).invoke(
"+01234",null,messageText,null,null);
Listing 1: Simpliﬁed Example
messages, etc.). Even in benign applications runtime values
are hard to extract precisely, but modern malware such as
Pincer, Obad [1] or FakeInstaller [2] creates an even greater
challenge by obfuscating runtime values deliberately. The
malware stores such values (e.g., reﬂective call targets, the
target telephone numbers of SMS scams, or the addresses
of remote command&control servers) in an encrypted format
inside the application code, to be decrypted only at runtime.
Listing 1 shows a simpliﬁed example, inspired by the Pincer
malware [3]. In lines 6–7, it sends an SMS message to a phone
number. Manually deducing the target of this obfuscated call
is time-consuming and tedious as the analyst needs to ﬁrst
understand and reconstruct the decryption routine decrypt to
obtain the actual runtime arguments of the call. Only then, the
analyst knows that the reﬂective call references the SmsManager
class (line 4) and its sendTextMessage method (line 5).
This obfuscation technique not only raises the bar for human
analysts, it also effectively hinders all current static analysis
approaches. Many current static analyses either do not handle
reﬂection at all or only support constant target strings [4]–[6].
Therefore, they would be unable to detect that the example
sends an SMS message at all. Other approaches model the
String API to ﬁnd reﬂective call targets [7]. In the example,
however, these approaches will likely not be able to correctly
interpret the decrypt function, especially if implemented in
native code. Consequently, those approaches would miss the
SMS message as well. In general, static analyses will always
have an incomplete picture of the code’s behavior, because their
handling of runtime values can never be complete—ultimately
due to the halting problem.
If static analysis fails one might think that maybe dynamic
analysis can come to the rescue. Current malware, however,
also fools dynamic analyses. This is because many malicious
applications nowadays contain so-called time bombs or logic
bombs [8]–[10]. Logic bombs cause an app to suppress any
malicious activity if the app itself detects that it is executing
within an analysis environment [11]. Time bombs cause an app
to suppress the malicious behavior in any case for a longer
period of time, or until after a reboot of the phone, etc. This
also includes botnet malware that only acts in response to
a command received from a command-and-control server—
a command that dynamic analysis tools will ﬁnd virtually
impossible to guess correctly. Moreover, for all applications,
including benign ones, a dynamic analysis can only reason
about code paths that the analysis actually executes. However,
neither an automatic event-generation or UI-testing tool, nor a
human analyst can generally cover all possible execution paths
in a ﬁnite amount of time, causing most dynamic analyses to
be incomplete. Even current approaches [12] do not yet scale
very well and can take hours even for medium-sized apps.
In this work we present HARVESTER, a novel approach
that seeks to effectively address all of the above problems
for current malware samples. Even for the most sophisticated
malware families such as Obad, Pincer, or FakeInstaller,
HARVESTER is able to extract virtually all runtime values
of interest within minutes, without any user intervention, and
in our experiments with perfect accuracy. The tool, soon to be
integrated into a commercial product, works fully automatically.
The analyst only needs to provide an Android app’s binary code
and a conﬁguration ﬁle naming the code locations at which
HARVESTER should extract values. HARVESTER works through
a particular variation of traditional static-analysis algorithms
known from program slicing combined with code generation
and concrete dynamic code execution.
Our evaluation on 16,799 current malware samples shows
that HARVESTER discovers values for 86,6% of all requests. In
particular, for the current malware samples tested, HARVESTER
can completely resolve the targets of encoded reﬂective method
calls in almost every single case. For a representative subset
of samples, we manually veriﬁed that HARVESTER shows a
precision and recall of 100% for extracting SMS messages,
SMS numbers and shell commands. Furthermore, on average
HARVESTER takes less than three minutes per app to extract
concrete telephone numbers and text messages from a large
number of potential SMS trojans. During our experiments,
HARVESTER reported many interesting runtime values, such as
command-and-control messages and addresses, and successfully
deobfuscated malware which hides sensitive API calls through
reﬂection. Moreover, HARVESTER successfully extracts the
obfuscated key used by the well-known benign WhatsApp
messaging app [13] to encrypt its message store.
In addition to the above evaluation, in this paper we
also present two case studies that showcase further important
example applications of HARVESTER’s results. We explain
how HARVESTER can improve the coverage of existing off-the-
shelf static as well as dynamic analysis tools. As the ﬁrst case
study shows, static-analysis tools such as FlowDroid [4] can
greatly improve their recall, i.e., ﬁnd more data leaks, when
incorporating reﬂection information computed by HARVESTER.
The second case study reveals that even dynamic analysis tools
such as TaintDroid [14] can beneﬁt greatly from HARVESTER,
as an integration with HARVESTER allows the dynamic analysis
to effectively circumvent time and logic bombs and thus to
ﬁnd otherwise dormant malware.
HARVESTER does not require any manipulations of the
underlying Android framework. It works purely on the bytecode
level of the target application, through a bytecode-to-bytecode
transformation.
In summary, this paper presents a novel hybrid information-
extraction approach for Android applications, and provides the
following original contributions:
•
•
•
•
a variation of traditional slicing algorithms ﬁne-tuned
to support the hybrid extraction of runtime values in
Android applications,
a dynamic execution system for running the computed
code slices and extracting the values of interest without
user interaction,
an evaluation of the approach’s feasibility for a mass-
analysis on real-world malware applications, and
two case studies assessing how HARVESTER can
improve the coverage of existing off-the-shelf static
and dynamic analysis tools.
The remainder of this paper is structured as follows:
Section II gives a more detailed example of current, obfuscated
Android malware, Section III explains how HARVESTER is con-
ﬁgured and Section IV gives a high-level overview. In Section V,
we explain HARVESTER’s architecture and the algorithms used
to compute the runtime values in detail. Section VI reports on
our experimental evaluation, and Section VII reports on two
case studies. Further use cases of HARVESTER are discussed in
Section VIII and potential future attacks on HARVESTER are
discussed in Section IX, while Section X gives an overview of
related work and Section XI concludes the paper.
II. MOTIVATING EXAMPLE
Listing 2 shows a real-world code snippet taken from FakeIn-
staller [2]1, one of the most widespread malware families [15].
To ease understanding, we decompiled the sample to Java
source code and added comments to the code. The malware
authors obfuscated their app with random class and method
names, eliminating most semantic information. Furthermore,
FakeInstaller heavily relies on obfuscation to hide its behavior
from both analysis tools and manual investigators. At runtime,
instead of calling methods directly, FakeInstaller takes a string
previously encrypted and decrypts it using a lookup table. It
then uses reﬂection to ﬁnd the class and method that bear the
decrypted name and to ﬁnally invoke the retrieved method.
Many current malware applications are obfuscated in a
similar way, either manually or by using commercial tools
such as DexGuard [16]. For a human analyst to understand
the runtime behavior of such obfuscated code, she must know
the target methods of the reﬂective calls. In the example, these
values are the decoded class name in line 6 and the decoded
method name in line 9. To ﬁnd these values manually, she
would have to carefully inspect the decompiled bytecode, ﬁnd
the lookup table, and manually decrypt all strings to detect
the malicious behavior. Strings decrypted for one application
once cannot usually be reused, as different malware variants
use different lookup tables.
Static code-analysis approaches such as SAAF [17] apply
techniques such as backward slicing in order to extract
1Sample MD5: dd40531493f53456c3b22ed0bf3e20ef
2
1 public static boolean gdadbjrj(String paramString1,
String paramString2){ [...]
// Emulator check: Evade dynamic analysis
if (zhfdghfdgd()) return;
// Get class instance
Class clz = Class.forName(gdadbjrj.gdadbjrj
("VRIf3+In9a.aTA3RYnD1BcVRV]af"));
Object localObject = clz.getMethod(
gdadbjrj.gdadbjrj("]a9maFVM.9"), new
Class[0]).invoke(null, new Object[0]);
// Get method name
String s = gdadbjrj.gdadbjrj("BaRIta*9caBBV]a");
// Build parameter list
Class c =
Class.forName(gdadbjrj.gdadbjrj
2
3
4
5
6
7
8
9
10
11
12
13
14
15
("VRIf3+InVTTnSaRI+R]KR9aR9"));
Class[] arr = new Class[] {
nglpsq.cbhgc, nglpsq.cbhgc, nglpsq.cbhgc, c, c };
// Get method and invoke it
clz.getMethod(s, arr).invoke(localObject, new
Object[] { paramString1, null, paramString2, null,
null });
16 }
Listing 2: Highly obfuscated code sending a text message
(FakeInstaller [2] malware family)
constant string information. These tools, however, have well-
known limitations that make them fail on highly obfuscated
applications, e.g., ones with dynamically-computed values
as shown in Listing 2. Even those static-analysis tools that
model the full string API still have limitations that can easily
be exploited by malware developers. For example, one can
implement the string-decoding method in a custom library
written in native code. To the best of our knowledge, no static
analysis tool for Android supports such native code.
The code in the example challenges dynamic analysis
approaches as well. The analyses ﬁrst have to ﬁnd an execution
path actually triggering the gdadbjrj method. If, for instance,
method gdadbjrj is only executed after a delay or after a speciﬁc
environment trigger, then this is a non-trivial undertaking. In
such situations, the analysis never knows when it is safe to
stop the dynamic test execution and cannot easily speed up
analysis either. Other malware might call the malicious code
only when the user clicks on a certain button. The analysis tool
must then ﬁrst perform all user actions required to reach the
user-interface state displaying the button. Afterwards, it must
be able to emulate this button click.
Additionally, various anti-analysis techniques for dynamic
approaches, such as emulator-detection mechanisms [9], [10],
[18] complicate this analysis even further. The check in line 3,
for instance, prevents the malicious code from being executed if
the execution environment shows characteristics of an emulator
such as the presence of certain ﬁles or a speciﬁc timing behavior.
It also aborts if a debugger is attached to the application.
Dynamic analysis environments can never fully hide all of
these characteristics [8] and thus fail on sophisticated malware.
HARVESTER, on the other hand, fully automatically retrieves
all relevant runtime values of the example in Listing 2. The
security analyst simply speciﬁes the variables for which runtime
values should be retrieved. For the example, we assume
that the security analyst knows that she is interested in the
parameters given to any calls to SmsManager.sendTextMessage
that the application may make. As one can easily see, the code
in Listing 2 contains no direct call to this API. Instead, the
calls to this API are issued through reﬂection. But HARVESTER
comes pre-conﬁgured with a setting that further extracts the
parameters to such reﬂective calls, and inlines calls accordingly,
once discovered.
3
In a ﬁrst step, HARVESTER would hence attempt to extract
parameters to the forName (line 11) and the getMethod calls
(line 15). HARVESTER’s static slicer automatically extracts
all code computing those values, while crucially, however,
discarding certain conditional control-ﬂow constructs that do
not impact the computed value. (We give details later.) In
the example, this will discard the emulator-detection check at
line 3. All code outside of gdadbjrj is removed as it is not
necessary for computing the values in question. HARVESTER’s
dynamic component then runs only the reduced code. Since all
emulator-detection checks are eliminated, the dynamic analysis
immediately executes all those parts of gdadbjrj relevant to the
computation of the selected values. At runtime, the analysis
discovers the name SmsManager.sendTextMessage of the method
called through reﬂection. In result, it replaces the original
reﬂective method call by a direct call to that very API, and
re-iterates the extraction process.
Assuming that the security analyst conﬁgured HARVESTER
to extract the arguments given to such calls, HARVESTER
performs a slicing for paramString1 and paramString2. Once
again, the emulator check is removed, but this time, the caller
of method gdadbjrj must also be analyzed. In this caller,
HARVESTER keeps exactly the code that computes the input