于这条命令的详细用法，请参照WinDbg自带的帮助文件（displayType）
e[地址][数据]
修改任意内存地址的值
以字节形式写入
数据编辑
(Edit)
ed[地址][数据]
以双字形式写入
ea[地址][数据]
以ASCHI字符形式写入，注意，ASCII字符串需要加双引号
eu[地址[数据]
以Unicode字符形式写入，注意，Unicode字符串需要加双引号
17
---
## Page 43
0
day
续表
安
功
能
命
说
全
k[x]
由栈顶开始列出当前线程中的栈帧，x为需要回溯的栈领数
栈帧的显示
kb [x]
栈帧回溯命令带上‘b’后，可以额外显示3个传递给函数的参数
软
寄存器的显示
r命令显示当前所有寄存器值，也可以用来显示指定寄存器的值，例如
件
r[寄存器名]
(Register)
reax就只显示EAX的值
漏
洞
模块显示
Im
列出当前已经读入的所有模块，如动态链接库（listmodule）等
分
(List Module)
析
u
反汇编当前指令后的几条指令并显示
技
反汇编功能
u[起始地址]
从指定的地址开始反汇编
术
u[始址][终址]
反汇编指定的地址范围区间的机器代码
第
本书在讲解第4篇中关于内核安全及调试的部分将主要以WinDbg调试为主，更多的
2
WinDbg调试技巧请参阅第4篇相关内容。
版
1.3.4IDAPro简介
IDAPro无疑是当今最强大的反汇编软件，其工作界面如图1.3.6所示。虽然目前的IDA
版本也可以做一些简单的动态调试工作，但大多数情况下我们主要使用它的静态反汇编功能。
很多工具都能把二进制的机器代码翻译成汇编指令，但为什么提起反汇编工具，IDA永远
都是首届一指的强者呢？这是因为IDA拥有强大的标注功能。
X
-+xoBmP#
名/6
DAV
SrA Su
.text:00401005
.text:0040100
push
nou
[ebp*uar_2].1
offset aRB
："rb
.text:0040108
push
_Ffopen
:char 
.text:00401014
pep
3
自动识别出
.text:084D101D
test
[ebp*uar_8].
eax,eax
的系统调用
text:004D101F
pop
.text:084e1620
short loc_aa1ge
.text:004D1027
.text:08401822
push
-text:0840102C
call
_printf
.text:08401820
pep
eax, eax
PCH
..text:004e182F
leave
-text:0ese1800
aa
00001005
LeASC
Rg_ype
图1.3.6IDA工作界面
18
---
## Page 44
第
即使是对汇编语言非常精通的程序员，也无法直接阅读成千上万行汇编指令。我们需要把
1
庞大的汇编指令序列分割成不同层次的单元、模块、函数，对其逐个研究，最终摸清楚整个二
章
进制文件的功能。
基
所谓逆向的过程，在很大程度上就是对这些代码单元的标注。每当我们弄清楚一个函数的
础
功能时，我们就会给这个函数起一个名字。使用IDA对函数进行标注和注解可以做到全文交叉
知
引用，也就是说，标注一个常用函数后，整个程序对这个函数的调用都会被替换成我们所标注
识
的名字，这可比直接对内存地址的调用形式好理解多了（通常情况下，反汇编得到的函数调用
往往都是对内存地址的调用）。
对汇编代码的标注可以自上而下进行，也可以自下而上进行。自上而下是指从main函数
开始标注，相当于对函数调用图从树根开始遍历；自下而上逆向是指从比较底层的经常被调用
的子函数开始标注，每标注一个这样的底层函数，代码单元的可读性就会增加许多，当最终标
注到main函数时，整个程序的功能和流程就基本上可以掌握了。大多数情况下，我们会从两
个方向同时并始逆向。
除了在人工标注时IDA提供了交义引用、快速链接等功能外，IDA的自动识别和标注功能
也是最优秀的。目前的IDA版本能够自动标注VC、BorlandC、Delphi、TurboC等常见编译
器中的标准库函数。试想一下，在反汇编的结果中发现所有的memcpy、printf函数都已经被自
动标注好的时候是什么感觉。
IDA好像是一张二进制的地图，通过它的标注功能可以迅速掌握大量汇编代码的架构，不
至于在繁杂的二进制迷宫中迷失方向。自前版本的IDA甚至可以用图形方式显示出一个函数内
部的执行流程。在反汇编界面中按空格键就可以在汇编代码和图形显示间切换，如图1.3.7所示。
A-+XOBDP
Gagh
(-363,1842)(304,4)
00081000
DonD:12
图1.3.7IDA的图形显示界面
19
---
## Page 45
0
day
IDA的扩展性非常好，除了可以用IDA提供的API接口和IDC脚本扩展它自身外，IDA
安全
还可以把标注好的函数名、注释等导入OllyDbg，让我们在动态调试的时候也不会晕。如果把
IDA自身的标注比做纸质地图，那么这个功能就相当于车载GPS的电子地图了。
：
这里给出几个IDA中常用的快捷键命令，如表1-3-7所示。
软
件
表1-3-7常用的快捷键命令
漏
快捷键
功能
洞
分
为当前指令添加全文交义引用的注释
析
n
定义或修改名称，通常用来标注函数名
技
g
跳转到任意地方观察代码
术
Esc
返回到跳转前的位置
（第
D
分别按字节、字（双字节）、双字（四字节）的形式显示数据
2
A
按照ASCHI形式显示数据
版
知道这几个快捷键，您就可以自行去标注汇编代码了。彻底掌握IDA不是一两天就能做到的，
由于在漏洞利用中我们主要使用的是动态调试工具，所以IDA的许多高级特性（如编写IDC脚本
等）本书暂不介绍。如果在漏洞分析时需要进行静态反汇编，本书会结合案例给予适当补充。
1.3.5二进制编辑器
漏洞调试总是需要和二进制打交道。一款方使易用的十六进制编辑软件可以让您打开任意
的二进制文件，方使地跳到某处偏移，查看或修改那里的机器代码。
比较著名的十六进制编辑器包括UltraEdit、HexWorkshop和WinHex和Oi0editor。
UltraEdit的功能如图1.3.8所示，这是9.0版本的界面。您可以用它以二进制形式轻易地打
开任何文件并进行编辑、查找、替换等操作。用它可以方使地完成机器代码的修改或者shellcode
的编辑。
3CSee
eESchBoedFCmHeooedndob
00 00 00 00 00
0000 00 00 0000 00 000000 00 00 00 0
00
0000
.
00
OE 1F BA
M4
20
20
70
45
20
72
75
20
6·1
69
20
6E2044
6361
64
00 00 00
1 00 00 00 :
4F 53 20 : t be rus in D05
F2
72A4
A4740F;
q绿优7其德
SA T
nr EG
a4 F4 07 90 88 [7 87 77
14
F4O7
5269
63
6072
A4740F：.7ich加龄
00
00
45
00 4C
01 0300
01..
...PE..b...
0
229C99
OB 01
06
00 00
70
 00 00 00 40 00 00 00 00 00 00
49.00.03.00.0000.00.00
7.
6E 27 (
DO
00 00
10
1 00 00 00
c：n..............
04 00 00 00 00 00 00 00 00 C0 00 00 00 10 00 00 ; ..**
....？...
orH.prsP1Poe:DO,Cw
图1.3.8UltraEdit编辑界面
20
---
## Page 46
第
二进制编辑只是UltraEdit的一项功能。正如它的名字，这是一个超级编辑器，它还可以作
1
为几乎所有常见编程语言的编辑器。例如，在打开扩展名为C的文件时，它将提供C语言中
章
的关键字、语法标注、函数识别等功能，有些功能甚至比微软SDK中的文本编辑器还方便。
基
HexWorkshop是一款和UltraEdit类似的十六进制编辑软件，只是它更关注于二进制本身，
础
其编辑界面如图1.3.9所示。它可以方便地进行十六进制编辑、插入、填充、删除、剪切、复
知
制和粘贴工作，配合查找、替换、比较、计算校验和等命令使工作更加快捷，并附带计算器和
识
转换器工具。
CHex Werkahp[crack me.]
口X
《x
Z0000000000800000000000000000000000065000000000
00000016
0000
4000
0000
0000
0000
0000
0000
0000
0000
0000
0000002C
00000
00000
0000
0000
0000
0000
0000
0000
C8000000
00000042
BAOE
0064
090D
21B8
014C
CD21
5468
6973
2070
726F
UEIF
6772
....!..L.IThis pre
616D 2063 616E6E6F 7420
6265 2072
756E 2069
6E20 444F
00000065
5320
6D6F
6465
ZE0D
ODOA
2400
0000
0000
0000
BA37
FF1F
FE56
9F4C
FE56
914C
FE56
914C
1649
9A4C FF56
356
16
FE56
904C
9C49
824C
FD56914C