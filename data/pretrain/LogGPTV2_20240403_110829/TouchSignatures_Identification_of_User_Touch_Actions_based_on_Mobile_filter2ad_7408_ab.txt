### Table 4: Mobile Browser Access to Orientation and Motion Sensor Data on Android and iOS

**Table 4** summarizes the results of our tests to determine whether each mobile browser provides access to device motion and orientation sensor data under different conditions. The columns list the combinations of device, mobile OS (mOS), and browser under which the tests were conducted. For browsers with multiple versions, such as Opera and Opera Mini, we grouped them together as a family since they behaved similarly in terms of granting access to sensor data.

- **Active/Same Tab**: All browsers provide access to sensor data if the browser is active and the user is working on the same tab where the code listening to the sensor data resides.
- **Active/Iframe**: Tests were conducted to see if an embedded JavaScript listener in an iframe (loaded from a different web origin) could access sensor data when the user interacted with content in the same tab but a different segment of the browser window. All tested browsers provided this access.
- **Active/Different Tab**: Tests were conducted to see if a JavaScript listener in one tab could access sensor data when the user interacted with another tab. Most browsers, including Google Chrome on iOS, provided this access.
- **Background**: Tests were conducted to see if a JavaScript listener could access sensor data when the browser was running in the background and the user interacted with another app or tried to unlock the screen. A few browsers on both Android and iOS provided this access.
- **Screen-Locked**: Tests were conducted to see if a JavaScript listener could access sensor data when the screen was locked. Some browsers, including Safari, provided this access.

None of the tested browsers (on Android or iOS) asked for any user permissions to access sensor data during installation or while performing the experiments.

### Security Implications

These findings suggest possible security vulnerabilities through which malicious web content can gather information about user activities. Specifically:
- **Browser-Active Iframe Access**: Allows active web content embedded in HTML frames (e.g., an advertisement banner) to record sensor data and determine how the user interacts with other segments of the host page.
- **Browser-Active Different-Tab Access**: Allows active web content in an inactive tab to eavesdrop on sensor data and monitor the user's interactions with other tabs.
- **Browser-in-Background and Screen-Locked Access**: Allows active web content in a minimized browser to eavesdrop on sensor data and monitor the user's interactions with other apps and their actions while carrying the device.

### TouchSignatures: Identifying User Touch Actions and PINs

#### 3.1 Overview

**TouchSignatures** is designed to distinguish user touch actions (e.g., clicking, scrolling, holding) and PINs by analyzing device orientation and motion traces. These traces can reveal user activities on webpages and apps, and even identify specific touch actions and PINs. The system operates in two phases:
1. **Phase One**: Identifies the type of touch action (click, hold, scroll, zoom).
2. **Phase Two**: Identifies the digits of a PIN (0 to 9).

This is the first known attack that compromises user security through JavaScript access to sensor data. The input to the TouchSignatures system is a feature vector, and the output is the type of touch action or PIN digit.

#### 3.2 In-Browser Sensor Data Detail

The attack model involves malicious web content spying on a user via JavaScript. The web content can be opened as a web page or embedded as an HTML frame. The user may be interacting with the browser or any other app, with the browser still running in the background. The client-side malicious web content collects and reports sensor data to a server, which processes the data to identify touch actions.

**Available Sensor Data Streams** (as per W3C specifications):
- **Device Orientation**: Provides physical orientation (alpha, beta, gamma angles).
- **Device Acceleration**: Provides physical acceleration (x, y, z coordinates).
- **Device Acceleration-Including-Gravity**: Similar to acceleration but includes gravity.
- **Device Rotation Rate**: Provides rotation rate (alpha, beta, gamma angles).
- **Interval**: Provides the constant rate of motion-related sensor readings in milliseconds.

#### 3.3 Application Implementation

**Client Side**:
- **Listener**: Records sensor data streams and establishes a socket connection using Socket.IO.
- **User Interface**: Collects labeled data from users. The interface is an HTML5 page with JavaScript and Bootstrap. Data collection occurs in two rounds (touch actions and PINs) and multiple steps. The GUI provides instructions for each step.

**Server Side**:
- **Server**: Hosts the data and handles communications using Node.js and Socket.IO.
- **Database**: Stores captured sensor data continuously using a NoSQL database (MongoLab).

#### 3.4 Feature Extraction

**Time Domain Features**:
- **Raw Sequences**: Includes sequences for acceleration, acceleration-including-gravity, orientation, and rotation rate.
- **Derivative Sequences**: First-order derivatives of the raw sequences.
- **Euclidean Distance**: Represents the change in device acceleration between consecutive readings.

**Frequency Domain Features**:
- Additional features are extracted to complement the time domain features.

### Conclusion

The findings and the implementation of TouchSignatures highlight significant security risks associated with JavaScript access to sensor data on mobile devices. Further research and development are needed to address these vulnerabilities and enhance user security.