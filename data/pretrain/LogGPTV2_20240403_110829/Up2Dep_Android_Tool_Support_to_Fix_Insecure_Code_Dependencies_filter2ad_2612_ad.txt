compatible at the method signature level with the new library ver-
sion. Further detecting semantic changes is an open problem that
requires effort from different domains, especially software engineer-
ing, and is not in the scope of our work. Yet in this work, we show
that relying on API changes to derive compatibility among library
versions does help developers to keep their project’s dependencies
up-to-date, yet it needs further improvement to cover more cases.
While Cognicrypt provides the flexibility to create new rules to
detect cryptographic misuse, it is not free of false positives. We
found cases where calls to cryptographic APIs are wrapped in
custom Java utility classes by the library developer. Cognicrypt can
not completely link the control flow graph of those custom classes
to detect if a cryptographic misuse occurs in those cases. This
results in Cognicrypt over-approximating the misuse and reporting
false positives. In particular, misuse of MessageDigest depends on
call sequences and this shortcoming of Cognicrypt in classifying
misuse of that class when being wrapped in custom classes might
be a contributing factor to the high number of misuses detected for
MessageDigest (see Figure 2). However, it is not easily possible to
verify such misuse using static analysis and exclude false positives
from our results. Once Cognicrypt addresses this limitation, also
Up2Dep will provide more accurate warnings to app developers.
Additionally, we currently manually look for publicly disclosed
vulnerabilities, which is a tedious task. In future, this could be gener-
ally done with a central library repository, e.g., when a vulnerability
of a library is disclosed, central library repositories can incorporate
and mark the vulnerable versions in their database so that tools
like Up2Dep or Lint can automatically retrieve and provide devel-
opers feedback in their IDE. However, for the cryptographic API
misuse, Up2Dep’s pre-analyzer component automatically crawls
newer versions of third-party libraries and runs Cognicrypt to ob-
tain up-to-date results.
Further, the population size of the developers in our evaluation
might be perceived as small since we only have 56 developers, of
which 23 shared with us their experience in our online survey, and
22 developers provided us feedback in their Android Studio. Our
demographic data shows that our evaluation indeed has a popula-
tion of experienced developers (e.g., 18 of them have developed at
least 2 Android apps). However, developer studies [9, 26, 39] had in
the past notoriously a low number of participants as it is not easy
to recruit real developers. Besides, most of them were conducted
with students as proxies using handcrafted, toy projects which do
not necessarily represent the day-to-day real situation that devel-
opers often face. In our work, on the other hand, we tried to avoid
students as proxies and toy projects as much as possible and gain
insights from developing real app projects (external validity). We
think the fact that we could recruit this number of developers and
keep them using Up2Dep is in part due to the interest and need
for such a tool by the developer community. Furthermore, with
our feedback in-context option, we obtain valuable feedback from
developers on whether Up2Dep works. Given the only small per-
centage of false positives reported (6.7%) and 80% of the suggested
quick-fixes working as expected, we believe that we have delivered
a novel and expedient tool, and can show the impact of such tooling
support on real world situations.
Lastly, we abstained from collecting telemetric information on
whether developers ignored the quick-fix, since this might be con-
sidered too intrusive. Unfortunately, this also precludes us from
modeling whether a known security vulnerability or cryptographic
misuse warning is a significant predictor for applying quick-fixes
and library updates in our evaluation.
271ACSAC 2020, December 7–11, 2020, Austin, USA
Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel
6.2 Transitive Dependencies and App Security
While during our evaluation, we did not consider transitive depen-
dencies, we also have seen that the problems of transitive depen-
dency with regards to library updatability is a corner case, e.g., only
2 instances of the false positives. Also existing research [28] on the
updatability of third-party libraries shows that only 1.7% of the li-
brary API could be affected by this problem (referred to as entangled
dependencies). Still we see a potential threat to the security of An-
droid apps due to transitive dependencies. We found that (known)
security problems of a library could be hidden from developers
when the library is included as a transitive dependency of another
dependency and this transitive dependency is not communicated as
obvious to app developers as needed. While the community is try-
ing its best to find security related problems of third-party libraries,
it is also important to keep developers informed on all potential
risks associated with a (declared) dependency. We are to the best of
our knowledge the first to study the security problems of transitive
dependencies and subsequently developed a solution to tackle this
problem by alerting developers when they include libraries that
have transitive dependencies with security problems.
6.3 Impact of Fixing Insecure Dependencies
Among the 116 applied fixes, 6.89% had security vulnerabilities
(4 known security vulnerabilities, 4 cryptographic API misuse).
We consider these numbers non-negligible and this has tangible
impact on the security and privacy of the Android apps that devel-
opers are working on. Previous work has identified the security &
privacy impact of outdated third-party libraries in general and of
outdated insecure third-party libraries in particular (see Section 2).
By updating the insecure code dependencies to secure versions,
we are removing the factors that could amplify security & privacy
problems in apps and expose end users to multiple types of at-
tacks. While market stores such as Google Play have been scanning
apps for security & privacy problems, they are dealing with mono-
lithic byteblobs where there is no separation between app code
and library code. Hence, such solutions need exact, reliable library
detection mechanisms which is a challenging task and no satis-
factory solution exists yet. This becomes even more challenging
when the apps’ byte-code is obfuscated, something that Google
itself is promoting to app developers [12]. Our results show that
by integrating support to suggest secure code dependencies within
developers’ IDEs, we can eliminate many security problems that
arise from including insecure third-party libraries without having
to deal with monolithic apks where app code and library code have
been merged together. Especially, developers do not need to learn
new tools or adjust their daily work-flow to be able to use Up2Dep.
Our results call for action from IDE developers to merge tools like
Up2Dep into IDEs, like Android Studio, so that developers imme-
diately and by default benefit from such support. Based on our
results, the experiences in other software ecosystems [8, 24] or for
native Android libs [11, 25], and the movement toward integrating
security into software development life cycle namely SevDevOps
[36, 37], we argue that this would have a tangible impact on the
security & privacy of the Android ecosystem especially.
6.4 Fear of Incompatibility vs. Will to Update
In our evaluation, we learned that, the majority of the outdated li-
braries can be updated all the way to the latest version (see Figure 4)
without having to change the app code (i.e., 68.97% quick-fixes are
update to the latest version). Developers are afraid of updating be-
cause they fear that the new version of the libraries would break
the app’s existing functionality [19]. Without the information on
the compatibility of the new update, developers either have to man-
ually verify the release notes (if available) of the libraries to make
sure that the functions their apps are using are still available in the
update, or simply keep using the outdated versions. One developer
shared such experience via email with us after trying out Up2Dep:
"Thank you for sharing your project with me. It’s re-
ally exciting, we’re normally manually reviewing the
change logs to see if we should update our dependen-
cies right away or what we should test."
Compatible check was rated the most useful feature (see Figure 6)
by developers in our study. Had Up2Dep not provided the compati-
bility information on the outdated dependencies, developers would
probably not be willing to perform the updates on these 68.98%
outdated dependencies (80 of 116 outdated dependencies).
7 CONCLUSION
Since security patches of libraries are often rolled out as updates,
app developers (not market stores, not the end users) need to keep
their project’s third-party libraries up-to-date to avoid security
problems of outdated libraries. In this paper, we present Up2Dep,
an Android Studio extension that facilitates the task of keeping an
Android app project third-party libraries up-to-date while taking
into account the security and the compatibility of the newer ver-
sions of such dependencies. Up2Dep suggests alternative library
APIs to developers in case a newer library version is incompatible.
It further helps developers in avoiding insecure libraries by alerting
them to publicly disclosed vulnerabilities and cryptographic API
misuse in third-party libraries. We tested Up2Dep with 56 Android
developers. Up2Dep has helped developers in fixing 116 outdated
third-party libraries, of which 6.89% had security vulnerabilities (4
known security vulnerabilities, 4 cryptographic API misuse). The
majority (80.0%) of the suggested quick-fixes worked as expected
with only 4 cases of failed quick-fixes. In further investigation, we
discovered the hidden security problems of transitive dependencies
of 13.51% of the libraries in our dataset. We are the first to dis-
cover the hidden problem of insecure transitive dependencies and
subsequently developed the corresponding solution to tackle this
problem. Our results call for action to (1) merge tool support, like
Up2Dep, into developers’ integrated development environments, as
this would create a tangible impact on the security and privacy of
the Android ecosystem when developers benefit from tool support
for upgrading used third-party libraries, and (2) study developer’s
behavior to best provide them the right tool support.
ACKNOWLEDGMENTS
We like to thank our anonymous reviewers for their valuable feed-
back. We also thank our shepherd — Sébastien Bardin for his feed-
back and for being a supportive point of contact for the revision of
this paper.
272Up2Dep: Android Tool Support to Fix Insecure Code Dependencies
ACSAC 2020, December 7–11, 2020, Austin, USA
REFERENCES
[1] Accessed 2016. 2016 State of the Software Supply Chain. https://www.sonatype.
com/software-supply-chain.
[2] Accessed 2018. Gradle Build Tool. https://gradle.org/.
[3] Accessed 2018. Lint Tool. http://tools.android.com/tips/lint.
[4] Accessed 2018. Top most popular libraries on Maven. https://mvnrepository.
com/popular.
Crypto-API-Rules.
[5] Accessed 2019. Cognicrypt Crypto API rules. https://github.com/CROSSINGTUD/
[6] Accessed 2019. F-Droid App Repository. https://f-droid.org/en/.
[7] Accessed 2019. LibScout. https://github.com/reddr/LibScout.
[8] Accessed 2019. Snyk: A developer-first solution that automates finding & fixing
vulnerabilities in your dependencies. https://snyk.io.
[9] Yasemin Acar, Michael Backes, Sascha Fahl, Simson Garfinkel, Doowon Kim,
Michelle L Mazurek, and Christian Stransky. 2017. Comparing the usability of
cryptographic apis. In Security and Privacy (SP), 2017 IEEE Symposium on. IEEE,
154–171.
[10] Devdatta Akhawe and Adrienne Porter Felt. 2013. Alice in Warningland: A
Large-Scale Field Study of Browser Security Warning Effectiveness.. In USENIX
security symposium 2013, Vol. 13.
[11] Android Developer Documentation. Accessed 2019. App security improvement
program. https://developer.android.com/google/play/asi.
[12] Android Developer Documentation. Accessed 2019. Shrink, obfuscate, and opti-
mize your app. https://developer.android.com/studio/build/shrink-code.
[13] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bar-
tel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014.
Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint
analysis for android apps. Acm Sigplan Notices 49, 6 (2014), 259–269.
[14] Michael Backes, Sven Bugiel, and Erik Derr. 2016. Reliable Third-Party Library
Detection in Android and Its Security Applications. In Proc. 23rd ACM Conference
on Computer and Communication Security (CCS’16). ACM.
[15] Aaron Bangor, Philip Kortum, and James Miller. 2009. Determining what indi-
vidual SUS scores mean: Adding an adjective rating scale. Journal of usability
studies 4, 3 (2009), 114–123.
[16] Theodore Book, Adam Pridgen, and Dan S. Wallach. 2013. Longitudinal Analysis
of Android Ad Library Permissions. CoRR abs/1303.0857 (2013).
[17] John Brooke et al. 1996. SUS-A quick and dirty usability scale. Usability evaluation
in industry 189, 194 (1996), 4–7.
[18] Alexia Chatzikonstantinou, Mezza Group, Christoforos Ntantogian, Christos
Xenakis, and Georgios Karopoulos. 2015. Evaluation of Cryptography Usage in
Android Applications. https://doi.org/10.4108/eai.3-12-2015.2262471
[19] Erik Derr, Sven Bugiel, Sascha Fahl, Yasemin Acar, and Michael Backes. 2017.
Keep Me Updated: An Empirical Study of Third-Party Library Updatability on
Android. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security (Dallas, Texas, USA) (CCS ’17). ACM, 2187–2200. https:
//doi.org/10.1145/3133956.3134059
[20] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel.
2013. An empirical study of cryptographic misuse in android applications. In
Proceedings of the 2013 ACM SIGSAC conference on Computer & communications
security. ACM, 73–84.
[21] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar, Byung-Gon
Chun, Landon P Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N Sheth. 2014.
TaintDroid: an information-flow tracking system for realtime privacy monitoring
on smartphones. ACM Transactions on Computer Systems (TOCS) 32, 2 (2014), 5.
[22] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011.
A Study of Android Application Security. In Proceedings of the 20th USENIX Con-
ference on Security (San Francisco, CA) (SEC’11). USENIX Association, Berkeley,
CA, USA, 21–21. http://dl.acm.org/citation.cfm?id=2028067.2028088
[23] Adrienne Porter Felt, Alex Ainslie, Robert W. Reeder, Sunny Consolvo, Somas
Thyagaraja, Alan Bettes, Helen Harris, and Jeff Grimes. 2015. Improving SSL
Warnings: Comprehension and Adherence. In Proceedings of the 33rd Annual
ACM Conference on Human Factors in Computing Systems (Seoul, Republic of
Korea) (CHI ’15). ACM, New York, NY, USA, 2893–2902. https://doi.org/10.1145/
2702123.2702442
[24] GitHub Help. Accessed 2019. Viewing and updating vulnerable dependen-
cies in your repository. https://help.github.com/articles/viewing-and-updating-
vulnerable-dependencies-in-your-repository/.
[25] Google Help. Accessed 2019. How to fix apps containing Libpng Vulnerability.
https://support.google.com/faqs/answer/7011127?hl=en.
[26] Peter Leo Gorski, Luigi Lo Iacono, Dominik Wermke, Christian Stransky, Sebas-
tian Möller, Yasemin Acar, and Sascha Fahl. 2018. Developers Deserve Security
Warnings, Too: On the Effect of Integrated Security Advice on Cryptographic
API Misuse. In Fourteenth Symposium on Usable Privacy and Security ({SOUPS}
2018). 265–281.
[27] Gradle. Accessed 2019. Gradle Transitive Dependency. https://docs.gradle.org/5.
6.2/userguide/managing_transitive_dependencies.html.
[28] Jie Huang, Nataniel Pereira Borges Jr., Sven Bugiel, and Michael Backes. 2019.
Up-To-Crash: Evaluating Third-Party Library Updatability on Android. In 4th
IEEE European Symposium on Security and Privacy. https://publications.cispa.
saarland/2885/
[29] Stefan Krüger, Sarah Nadi, Michael Reif, Karim Ali, Mira Mezini, Eric Bodden,
Florian Göpfert, Felix Günther, Christian Weinert, Daniel Demmler, and Ram
Kamath. 2017. CogniCrypt: Supporting Developers in Using Cryptography. In
Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software
Engineering (Urbana-Champaign, IL, USA) (ASE 2017). IEEE Press, Piscataway,
NJ, USA, 931–936. http://dl.acm.org/citation.cfm?id=3155562.3155681
[30] Stefan Krüger, Johannes Späth, Karim Ali, Eric Bodden, and Mira Mezini. 2018.
CrySL: An Extensible Approach to Validating the Correct Usage of Cryptographic
APIs. In 32nd European Conference on Object-Oriented Programming (ECOOP 2018).
Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[31] Patrick Lam, Eric Bodden, Ondrej Lhoták, and Laurie Hendren. 2011. The Soot
framework for Java program analysis: a retrospective. In Cetus Users and Compiler
Infastructure Workshop (CETUS 2011), Vol. 15. 35.
[32] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo
Wilson, and Engin Kirda. 2017. Thou Shalt Not Depend on Me: Analysing the
Use of Outdated JavaScript Libraries on the Web. In 24th Annual Network and
Distributed System Security Symposium, NDSS 2017, San Diego, California, USA,
February 26 - March 1, 2017.
[33] Cheng-Lun Li, Ayse G. Buyuktur, David K. Hutchful, Natasha B. Sant, and Satyen-
dra K. Nainwal. 2008. Portalis: using competitive online interactions to support
aid initiatives for the homeless. In CHI ’08 extended abstracts on Human factors
in computing systems (Florence, Italy). ACM, New York, NY, USA, 3873–3878.
https://doi.org/10.1145/1358628.1358946
[34] Tianshi Li, Yuvraj Agarwal, and Jason I Hong. 2018. Coconut: An IDE plugin for
developing privacy-friendly apps. Proceedings of the ACM on Interactive, Mobile,
Wearable and Ubiquitous Technologies 2, 4 (2018), 178.
[35] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. CHEX:
Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In
Proceedings of the 2012 ACM Conference on Computer and Communications Security
(Raleigh, North Carolina, USA) (CCS ’12). ACM, New York, NY, USA, 229–240.
https://doi.org/10.1145/2382196.2382223
[36] Vaishnavi Mohan, Lotfi ben Othmane, and Andre Kres. 2018. BP: security con-
cerns and best practices for automation of software deployment processes: an
industrial case study. In 2018 IEEE Cybersecurity Development (SecDev). IEEE,
21–28.
[37] Vaishnavi Mohan and Lotfi Ben Othmane. 2016. Secdevops: Is it a marketing