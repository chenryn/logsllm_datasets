### 优化后的文本

编译器的某些优化可能会对我们分析系统软件背后的机制带来诸多障碍，导致许多问题变得不那么直观。本书将尽量避开这些优化过程，以还原机制和原理本身。

#### 3.3.4 其他段
除了最常用的 `.text`、`.data` 和 `.bss` 段之外，ELF 文件还可能包含其他段，用于存储与程序相关的附加信息。表 3-2 列举了一些常见的 ELF 段。

**表 3-2 常用的段名**

| 段名       | 说明                                                                 |
|------------|----------------------------------------------------------------------|
| `.rodata`  | 只读数据段，存放字符串常量、全局 `const` 变量等。                     |
| `.comment` | 存储编译器版本信息，例如 `"GCC: (GNU) 4.2.0"`。                      |
| `.debug`   | 调试信息。                                                           |
| `.dynamic` | 动态链接信息，详见本书第二部分。                                     |
| `.hash`    | 符号哈希表。                                                         |
| `.line`    | 调试时的行号表，即源代码行号与编译后指令的对应表。                   |
| `.note`    | 额外的编译器信息，如公司名、发布版本号等。                           |
| `.strtab`  | 字符串表，存储 ELF 文件中使用的各种字符串。                           |
| `.symtab`  | 符号表。                                                             |
| `.shstrtab`| 段名表。                                                             |
| `.plt`     | 动态链接的跳转表和全局入口表，详见本书第二部分。                       |
| `.init`    | 程序初始化代码段，见“C++全局构造与析构”一节。                         |
| `.fini`    | 程序终结代码段。                                                     |

这些段的名字通常以点号（`.`）作为前缀，表示它们是系统保留的。应用程序也可以自定义段。例如，一个段可以存放一首 MP3 音乐，当 ELF 文件运行时，可以从该段读取并播放这首音乐。

一个 ELF 文件还可以拥有多个同名段。有些段如 `.sdata`、`.ldesc`、`.sbss`、`.lit4`、`.lit8`、`.reginfo`、`.gptab`、`.liblist`、`.confict` 已被弃用，可以忽略它们。

---

### Q&A
**Q：如果我们要将一个二进制文件（如图片、MP3 音乐、词典等）作为目标文件中的一个段，该怎么做？**

**A：** 可以使用 `objcopy` 工具。例如，我们有一个图片文件 `image.jpg`，大小为 0x82100 字节：

```sh
$objdump -ht image.o
```

输出如下：

```plaintext
image.o: file format elf32-i386
Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00081200  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
SYMBOL TABLE:
00000000 g     O .data  00000000 .data
00081200 g     O .data  00000000 _binary_image_jpg_start
00081200 g     O .data  00000000 _binary_image_jpg_size
00000000 g     O .data  00000000 _binary_image_jpg_end
*ABS*  00000000 g     O *ABS*  00000000 _binary_image_jpg_end
```

这些符号分别表示该图片文件在内存中的起始地址、结束地址和大小。我们可以在程序中直接声明并使用这些符号。

### 自定义段
通常情况下，GCC 编译出的目标文件中，代码会被放入 `.text` 段，全局变量和静态变量会被放入 `.data` 和 `.bss` 段。但有时你可能希望将变量或某些代码放到特定的段中，以实现某些特定功能。例如，为了满足某些硬件的内存和 I/O 地址布局，或者像 Linux 内核中的一些初始化和用户空间复制时出现页错误异常处理等。GCC 提供了一个扩展机制，允许程序员指定变量所处的段：

```c
__attribute__((section(".roo"))) int global = 42;
__attribute__((section(".BAR"))) void foo() {
    // 函数体
}
```

通过在全局变量或函数前加上 `__attribute__((section("name")))` 属性，可以将相应的变量或函数放入名为 `name` 的段中。

---

### 3.4 ELF 文件结构描述
我们已经通过 `SimpleSection.o` 的结构大致了解了 ELF 文件的轮廓。接下来，我们将详细探讨 ELF 文件的结构格式。图 3-4 描述了 ELF 目标文件的总体结构，省去了繁琐的部分，提取出最重要的结构，形成了基本结构图。

**图 3-4 ELF 结构**

```plaintext
ELF Header
.text
.data
.bss
other sections
Section header table
Symbol Tables
String Tables
```

ELF 目标文件格式的最前部是 ELF 文件头（ELF Header），它包含了描述整个文件的基本属性，如 ELF 文件版本、目标机器型号、程序入口地址等。紧接着是各个段。其中，段表（Section Header Table）描述了 ELF 文件包含的所有段的信息，包括每个段的段名、长度、在文件中的偏移、读写权限及其他属性。接下来将详细分析 ELF 文件头、段表等关键结构，并介绍一些辅助结构，如字符串表、符号表等。

#### 3.4.1 文件头
我们可以使用 `readelf` 命令来查看 ELF 文件头，代码如清单 3-2 所示。

**清单 3-2 查看 ELF 文件头**

```sh
$ readelf -h SimpleSection.o
```

输出如下：

```plaintext
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          280 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           40 (bytes)
  Number of section headers:         11
  Section header string table index: 8
```

从上面的输出可以看到，ELF 文件头中定义了 ELF 魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI 版本、ELF 重定位类型、硬件平台、硬件平台版本、入口地址、程序头入口和长度、段表的位置和长度及段的数量等。这些数值中有关描述 ELF 目标平台的部分，与常见的 32 位 Intel 硬件平台基本一致。

ELF 文件头结构及相关常数定义在 `/usr/include/elf.h` 中。由于 ELF 文件在不同平台上通用，有 32 位和 64 位版本。其文件头结构也分为两种版本，分别为 `Elf32_Ehdr` 和 `Elf64_Ehdr`。32 位和 64 位版本的 ELF 文件头内容相同，只是某些成员的大小不同。为了确保在不同编译环境下字段长度一致，`elf.h` 使用 `typedef` 定义了一套自己的变量体系，如表 3-3 所示。

**表 3-3 自定义类型**

| 自定义类型     | 描述                        | 原始类型  | 长度（字节） |
|----------------|----------------------------|-----------|--------------|
| `Elf32_Addr`   | 32 位版本程序地址          | `uint32_t`| 4            |
| `Elf32_Half`   | 32 位版本无符号短整型      | `uint16_t`| 2            |
| `Elf32_Off`    | 32 位版本偏移地址          | `uint32_t`| 4            |
| `Elf32_Sword`  | 32 位版本有符号整型        | `int32_t` | 4            |
| `Elf32_Word`   | 32 位版本无符号整型        | `uint32_t`| 4            |
| `Elf64_Addr`   | 64 位版本程序地址          | `uint64_t`| 8            |
| `Elf64_Half`   | 64 位版本无符号短整型      | `uint16_t`| 2            |
| `Elf64_Off`    | 64 位版本偏移地址          | `uint64_t`| 8            |
| `Elf64_Sword`  | 64 位版本有符号整型        | `int32_t` | 4            |
| `Elf64_Word`   | 64 位版本无符号整型        | `uint32_t`| 4            |

这里以 32 位版本的文件头结构 `Elf32_Ehdr` 为例，其定义如下：

```c
typedef struct {
    unsigned char e_ident[16];
    Elf32_Half e_type;
    Elf32_Word e_version;
    Elf32_Half e_machine;
    Elf32_Addr e_entry;
    Elf32_Off e_phoff;
    Elf32_Word e_flags;
    Elf32_Off e_shoff;
    Elf32_Half e_ehsize;
    Elf32_Half e_phentsize;
    Elf32_Half e_phnum;
    Elf32_Half e_shentsize;
    Elf32_Half e_shnum;
    Elf32_Half e_shstrndx;
} Elf32_Ehdr;
```

这个结构体定义了 ELF 文件头的各个字段及其类型。