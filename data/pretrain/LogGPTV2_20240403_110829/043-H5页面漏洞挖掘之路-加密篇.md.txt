2020/7/27 H5页⾯漏洞挖掘之路-加密篇
H5⻚⾯漏洞挖掘之路-加密篇
原创 队员编号043 酒仙桥六号部队 6天前
这是 酒仙桥六号部队 的第 43 篇⽂章。
全⽂共计1653个字，预计阅读时⻓6分钟。
前前前前前前前前前前前前前前前⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔
H5移动应⽤作为个⼈⽣活、办公和业务⽀撑的重要部分，也⾯临着来⾃移动平台的安全
⻛险，不仅仅来⾃于病毒，更多的是恶意的攻击⾏为、篡改⾏为和钓⻥攻击。关于H5⻚
⾯的安全测试，业务逻辑功能测试基本和WEB渗透测试是通⽤的。
从业务安全⻆度考虑，⼀般客户端与服务端通信会进⾏加密，防⽌被刷单、薅⽺⽑等攻
击，需要对数据加密加密处理。所以我们必须了解各种加密⽅式。开发者常会⽤到
AES(Advanced Encryption Standard)加密算法，在此对H5⻚⾯的漏洞挖掘案例分
享给⼤家。
前前前前前前前前前前前前前前前置置置置置置置置置置置置置置置知知知知知知知知知知知知知知知识识识识识识识识识识识识识识识
AES加密模式介绍
AES加密的模式主要有五种：ECB (电⼦密码本模式)、CBC（密码分组连接模式）、
CTR（计算器模式）、CFB（密码反馈模式）、OFB (输出反馈模式)。这五种⼯作模式
主要是在加密器的使⽤上有所区别。在这⾥主要介绍下ECB和CBC这两种开发者最常⽤
的两种加密⽅式。
ECB模式
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 1/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
其使⽤⽅式是⼀个明⽂分组加密成⼀个密⽂分组，相同的明⽂分组永远被加密成相同的
密⽂分组。直接利⽤加密算法分别对每个64位明⽂分组使⽤相同的64位密钥进⾏加密。
每个明⽂分组的处理是相互独⽴的。
优点：
简单。
有利于并⾏计算。
缺点：
相同的明⽂块会加密成相同的密⽂块，安全性低。
CBC模式
引⼊⼀个初始向量IV，它的作⽤跟MD5加盐有些类似，可以防⽌相同的明⽂块加密成同
样的密⽂块。IV是初始向量，参与第⼀个明⽂块的异或，后续的每⼀个明⽂块，都与它
前⼀个密⽂块相异或。这样就能保证相同的明⽂块不会被加密为相同的密⽂块。
优点：能隐蔽明⽂的数据模式，在某种程度上能防⽌数据篡改, 诸如明⽂组的重放,嵌⼊
和删除等，安全性⾼。
缺点：⽆法并⾏计算，性能相对ECB低，会出现错误传播(errorpropagation)。
案案案案案案案案案案案案案案案例例例例例例例例例例例例例例例
在⼀次⾦融⾏业的漏洞挖掘过程中，从发现请求和返回数据包全程加密。我们该如何
突破数据包加密，并⾃动化暴⼒破解登陆。继续深度挖掘发现存在越权漏洞，最终获
取⼤量账户敏感信息。
发现加密
浏览器访问H5⻚⾯登录接⼝。
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 2/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 3/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
随意输⼊⼀个⼿机号和密码，点击登陆。利⽤Burp抓包查看，发现请求和响应数据
包全过程加密。
破解加密算法
右键查看登陆⽹⻚源代码寻找加密⽅法。
点击登录调⽤前端onLoginBtnClick⽅法，获取⽤户请求数据requestData，在
调⽤ajax请求中发送未加密的数据内容。
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 4/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
ajax请求函数postData：全局搜索postData函数，最终在common.js找到。在
发送请求中发现加解密函数：加密函数encrypt和解码函数decrypt。
因为⼀般插件的js⽂件都是⾮格式化存储的，调试时⾮格式化⽂件不能直观显示，我
们格式化代码后再调试查看。发现使⽤AES加密ECB模式PKCS7Padding填充，密
钥key硬编码在js代码中。
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 5/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
我们编写python脚本解密登录请求数据包，成功拿到明⽂请求数据包。
由于登录没有验证码机制。我们可以利⽤登陆接⼝和服务端返回的提示信息，可以批
量枚举平台⽤户⼿机号，⽽且发现登陆密码是纯6位数字，⾸选密码是123456，进
⾏尝试⾃动化暴⼒破解。
在执⾏Python脚本的时候，发现不允许重放请求数据包，那肯定是存在签名校验，
⽤于防⽌攻击者重放请求数据包。
通 过 diff 请 求 数 据 包 ， 确 认 是 校 验 请 求 头 中 的 replayId 值 。 我 们 去 代 码 中 定 位
replayId值是如何⽣成的。
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 6/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
在JS⽂件中搜索replayId，发现replayId变量是调⽤guid函数赋值的。
继续定位guid函数，到这⾥我们已经成功拿到请求和响应数据包的加解密过程，和
guid⽣成的过程。
编写Python的execjs执⾏js代码，伪造guid值。
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 7/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
⾃动化脚本
继续编写python代码，完成⾃动化暴⼒破解登陆。万事具备，那离成功就差⼀个⼿
机号字典了。
通过前期的信息收集，整理出⼀份⾼质量的⼿机号字典，幸福来的太突然，成功爆破
出⼀个⼿机号和密码。
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 8/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
成功登陆⽤户账户：
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 9/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
继续深度挖掘，发现通过修改请求数据包中的mobilephone参数，还可以越权查看
他⼈银⾏卡额度信息，包括卡ID、可⽤额度、已使⽤额度等。
总总总总总总总总总总总总总总总结结结结结结结结结结结结结结结
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 10/11
2020/7/27 H5页⾯漏洞挖掘之路-加密篇
遇到全程加密数据包，我们⾸先分析前端JS⽂件，发现使⽤AES加密ECB模式
PKCS7Padding填充，密钥key硬编码在js代码中，编写脚本破解加密算法。⼜发
现利⽤请求头中的replayId值，防⽌攻击者重放请求数据包。通过全局搜索发现
replayId变量是调⽤guid函数赋值的，继续编写Python脚本完成⾃动化的暴⼒破
解，成功登陆，深⼊漏洞挖掘。
后续我们可以写⼀个Burp插件，更便捷我们后续的漏洞挖掘。可以参考如下：
https://github.com/Ebryx/AES-Killer
https://mp.weixin.qq.com/s/QRxMQFgAPlJsUwuw8Sv0JQ 11/11