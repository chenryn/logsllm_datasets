                                    object jsval (typed array) [E]
        09e10a40  48494948 ffffff81 12634520 ffffff88
                                    double jsval [F]
        09e10a50  50515150 ffffff81 bab61ee0 3ff6a0bd
                                    string jsval [G]
        09e10a60  52535352 ffffff81 0eef9730 ffffff85
在内存转储开始时（在0x09e10960），我们可以看到arr ArrayObject的元数据; shape，type，slots和elements指针。
slot指针是NULL，因为我们的 jsobject 没有命名属性。 元素指针指向0x09e10a00处数组的jsval内容。
这些实际上是数组的重定位内容。
在地址0x09e10970，我们可以看到元素的原始元数据（未指定时数组的默认长度始终为6），以及指向原始内容的地址0x09e10980。
在我们向arr数组添加内容时，元素（及其元数据）被重新定位。  
重定位后的元素指针指向jsval内容开始的0x09e10a00。之前有四个dword，在0x09e109f0，存放的是元数据:
flags，initializedLength（或initlen）,capacity
和length。正如所预料的，initlen，capacity和length都是0xe。  
在 0x09e10a00 处有我们的整数标记值 0x40414140 ，在0x09e10a04处，其32位标记 0xffffff81 表示为整数jsval
[A]。
    注：在59.0版的firefox浏览中，元素的标志位如下：
    dword    dword+4
    对象      0xffffff8C
    字符串    0xffffff86 
    数值      0xffffff81
    boolean   0xffffff83
    //dword+4 处的标志位，表明dword处存放的是什么类型的数据。
    // 文中字符串的标记是： 0xffffff85
    // 对象的标记是： 0xffffff88
在 0x09e10a08，我们可以看到[B]的字符串jsval。 基于:
a）底层平台是x86还是x86-64;b）jsval字符串的长度;c）无论是纯ASCII还是unicode，字符串的内容字节是内联还是非内联。
在x86上，内联ASCII字符串的最大长度为7，对于unicode为3; 在x86-64上，ASCII为15，unicode为7。
我们的[B]字符串长度为15（0xf）因此它是内联的。让我们看一下[B]字符串jsval指向的地址的内容：
    0:000> dd 0f352880
                  flags    length   string's contents
        0f352880  0000005d 0000000f 6c6c6548 46202c6f
        0f352890  66657269 0021786f 00737365 00000004
        0:000> db 0f352880
        0f352880  5d 00 00 00 0f 00 00 00-48 65 6c 6c 6f 2c 20 46  ]..Hello, F
        0f352890  69 72 65 66 6f 78 21 00-65 73 73 00 04 00 00 00  irefox!.ess
在 0x0f352880，它是我们的内联[B]字符串的元数据的开始; 标志（0x5d），长度（0xf == 15(十进制)），然后是 0x0f352888
的字符串[B]的内容。  
相反，0x09e10a68 [G]处的字符串jsval不是内联的。同样，[G]的标记值是 0xffffff85，表示为字符串，它的值指向
0x0eef9730：
    0:000> dd 0eef9730
                  flags    length   pointer to string's contents
        0eef9730  00000049 0000001f 0bcba840 00000000
        0:000> dd 0bcba840
        0bcba840  6c6c6548 46202c6f 66657269 202c786f
        0bcba850  20646e61 6c6c6568 6761206f 006e6961
        0:000> db 0bcba840
        0bcba840 \
        48 65 6c 6c 6f 2c 20 46-69 72 65 66 6f 78 2c 20  Hello, Firefox,
        0bcba850 \
        61 6e 64 20 68 65 6c 6c-6f 20 61 67 61 69 6e 00  and hello again.
在 0x0eef9730，有flags（0x49），长度（0x1f == 31十进制），并在 0x0eef9738
指向字符串的实际字节内容（0x0bcba840）。
在 0x09e10a28，我们已经实例化了[D] ArrayObject，容量为666（或十六进制为0x29a）; 它的标签是
0xffffff88，表示它是一个对象，它的值是地址 0x09e109b0，在那里我们可以看到ArrayObject元数据：
    0:000> dd 09e109b0
                  shape_   type_    slots    elements
        09e109b0  0eed89a0 0f3709e8 00000000 0c94e010
                  flags    initlen  capacity length
        09e109c0  00000000 00000000 00000000 0000029a
        0:000> dd 0c94e010-10
                  flags    initlen  capacity length
        0c94e000  00000000 00000005 0000029a 0000029a
                  arr[5][0] = 666;  arr[5][1] = "sixsixsix";
        0c94e010  0000029a ffffff81 0eed78a0 ffffff85
        0c94e020  3b645a1d 3fe54fdf 00000000 ffffff83
        0c94e030  09e109d0 ffffff88 5a5a5a5a 5a5a5a5a
[D] ArrayObject的元素指针指向 0x0c94e010，我们可以看到这个数组的第一个元素，即 arr [5] [0]，即整数jsval
0x29a（或十进制的666）。 在 0x0c94e000 处，存在与这些元素相关联的元数据。
在这里，我们可以清楚地看到initializedLength，capacity 和 length 之间的差异。
initializedLength和capacity来自 0x09e109b0 的元数据都是零，而它的 length 是 0x29a ;
这是因为在[D]我们只是声明了一个长度为 0x29a 的 ArrayObject 而没有实际添加任何元素。 然后我们添加了五个元素（arr [5]
[0]到arr [5] [4]），新的initializedLength变为5，而 capacity 变得等于length，即0x29a（所有这些来自元数据
0x0c94e000）。
在继续之前，先看看SpiderMonkey类型的数组，因为稍后会在我们的攻击方法中使用它们。类型化数组是一个非常有用的JavaScript特性，因为它们允许我们在堆上构造任意大小的受控内容。之前的Firefox攻击，如[P2O]和[REN]，依赖于SpiderMonkey用于在内存中连续定位实际内容（数据）和类型化数组的相应元数据。  
不幸的是，情况不再如此;即使我们试图强制进行这样的布局，GC tenured heap和jemalloc heap
将会让这些分离。但是，类型化数组仍然非常有用。
在[E]中，我们实例化一个Uint32Array对象，即一个包含无符号32位整数的类型数组jsobject，初始长度为128，我们可以在地址
0x09e10a48找到它的对象类型jsval; 它的地址是
0x12634520。在那里我们看到Uint32Array对象，从其元数据开始（例如，在0x12634538，其长度为0x80，或十进制为128），在0x12634548，指向数组的实际缓冲区内容（0x0dd73600）。
    0:000> dd 12634520
        12634520  0af6c5c8 0f370e80 00000000 7475a930
        12634530  126344f0 ffffff88 00000080 ffffff81
        12634540  00000000 ffffff81 0dd73600 ffffff81
        12634550  00000000 00000000 00000000 00000000
        0:000> dd 0dd73600
        0dd73600  61636361 71737371 61636361 71737371
        0dd73610  61636361 71737371 61636361 71737371
        0dd73620  61636361 71737371 61636361 71737371
        0dd73630  61636361 71737371 61636361 71737371
        0dd73640  61636361 71737371 61636361 71737371
        0dd73650  61636361 71737371 61636361 71737371
        0dd73660  61636361 71737371 61636361 71737371
        0dd73670  61636361 71737371 61636361 71737371
正如所料，0x0dd73600
处的类型化数组的内容正是我们在代码中指定的内容。保存这些内容的缓冲区在堆上分配，其大小是我们分配给类型化数组的uint32元素数的四倍（因为每个元素长度为四个字节）。
因此，对于我们的[E]类型数组，其在 0x0dd73600 处的内容缓冲区长度为512字节（4 * 128 == 512）。
## 2.2 分代垃圾收集（GGC）
从版本32.0
[F32]开始，Firefox默认启用了一个新的垃圾收集（GC）实现（在所有支持的操作系统上），称为“分代垃圾收集”（GGC）。在GGC中有两个独立的堆;
a）分配了大多数SpiderMonkey对象的nursery heap；b）或多或少旧版（在版本32.0之前）普通SpiderMonkey GC的
tenured heap 或者 major heap。当nursery heap变满（或其他事件发生）时，会进行minor GC
pass。在此过程中，nursery
heap上的所有临时短期JavaScript对象都将被收集，并且它们占用的内存将再次可用于nursery。另一方面，nursery上可以在堆图中访问的JavaScript对象（即还存在的对象）被移动到tenured
heap（这也使得他们占用的内存可用于nursery）。将对象移动到tenured heap后，在minor GC pass期间，将检查nursery
heap上其他对象的传出指针。这些对象也从nursery移到tenured
heap。这个迭代过程一直持续到所有可到达的对象从nursery移动到tenured
heap，并且他们占用的内存被设置为可用于nursery。这种分代（也称为“移动”）垃圾收集方法为SpiderMonkey带来了令人印象深刻的性能提升，因为大多数JavaScript分配确实是短暂的。
为了清楚说明如何在Firefox浏览器的上下文中使用，应该谈谈JSRuntime [JSR]。 实例化的JSRuntime对象（参见类的js / src /
vm /
Runtime.cpp）包含所有JavaScript变量，对象，脚本等。默认情况下，为Firefox编译的SpiderMonkey是单线程的，因此Firefox通常只有一个JSRuntime。
但是，可以启动/创建（web）worker，并且每个worker都有自己的JSRuntime。
每个不同的JSRuntime都有一个单独的GGC堆（nursery 和 tenured），它们不共享堆内存。 此外，它们彼此隔离;
一个JSRuntime无法访问由不同JSRuntime分配的对象。  
nursery 的硬编码大小为16mb，使用VirtualAlloc（）（或Linux上的mmap（））分配。 它作为标准的碰撞分配器运行; 保持指针指向
nursery 内存区域中的第一个未分配字节。 要分配X字节，首先检查nursery中是否有可用的X字节。
如果有，则将X添加到指针（“bump”）并返回其先前的值以服务分配请求。 如果没有可用的X字节，则会触发minor GC。 在 GC
pass期间，新对象将移动到tenured堆，如果其slots或elements（请参阅第2.1节）高于某个数字，则会将它们移动到jemalloc管理的堆中。
tenured
heap（您可能还会在Firefox的代码库中看到它被称为'major'或简称'GC'堆）具有自己的元数据和算法来管理内存。这些nursery和jemalloc堆不同。除了作为在nursery
GC传递中剩下的JavaScript对象的堆之外，一些分配直接绕过nursery。这种情况的示例是已知的长期对象（例如全局对象），函数对象（由于JIT要求）和具有finalizers的对象（即，大多数DOM对象）。这里不会详细介绍
tenured heap ，因为它们与exploitation 开发无关。
## 2.3 jemalloc（和GGC）
在本节中，将仅讨论遵循第5节中的分析所需的必要的jemalloc知识。有关更详细的论文，推荐另一篇仍适用于当前jemalloc
[PSJ]状态的Phrack论文。  
jemalloc是一个位图分配器，专为性能而设计，不是针对内存利用率。 其主要设计目标之一是在内存中连续分配。
最新版本的jemalloc目前是4.0.0，但Firefox包含一个从主要版本2分叉的版本.Firefox的fork在源代码树中称为mozjemalloc，但它不包含来自jemalloc
2的任何重大更改。它被使用在Firefox中分配变得很大的tenured heap。 但是，有一些例外;
从JavaScript可触发的某些分配可以绕过nursery 和tenured heap，并直接转到jemalloc管理的堆。 这里不会进一步讨论这个问题。
在jemalloc中，内存被分成根据其大小分类的区域。具体来说，Firefox中的大小类别（称为“bins”）为2,4,8,16,32,48，...，512,1024，最高为2048.大于2048字节的malloc（）请求的处理方式不同。
每个bin 与几个'run'相关联; 这些是regions的实际容器。
run可以跨越一个或多个虚拟内存页面，这些虚拟内存页面被划分为run所属的bin大小的Region。 Bins 具有runs
的元数据，通过它们可以找到free regions 。 下图是[PSJ]原始版本的简化版本，并总结了上述说明。  
分配请求（即malloc（）调用）被四舍五入并分配给一个bin。 然后，通过bin的 free regions 元数据，找到具有free
region的run。 如果未找到，则分配新的run并将其分配给特定的bin。
因此，这意味着在jemalloc堆中，不同类型但具有相似大小的对象被分配到相同的bin中是连续的。
jemalloc的另一个有趣特性是它以后进先出（LIFO）方式运行（参见[PSJ] the free algorithm）;  
在这一点上，让我们用一个例子来看看如何在Firefox中使用jemalloc堆以及GGC堆，即nursery 和tenured。 在下图中，nursery
heap 几乎已满，我们有一个具有N个slots的JSObject的分配请求：  
JSObject本身能存在（不影响其余事件）nursery 的空闲空间中，但它的slots不能。 因此，JSObject被放置在nursery
上，并且由于它变满了，因此触发了一个 minor GC。 如果它不适合nursery ，也会触发minor GC。
在此GC期间，假设JSObject是还存在的对象，即不是临时对象，它将从nursery移动到tenured heap（或者它首先就不适合nursery
，那会被直接放在那里）。 如果其slots的数量N大于某个数字，则它们不会与对象本身一起放置在tenured heap上。
相反，在jemalloc堆上进行N个slots大小的新分配，并将slots放在那里。
然后jsobject的slots指针存储包含slots的jemalloc堆区域的地址。
# 3.Firefox的强化功能
Firefox具有一些安全加固功能，可用于了解您是否正在执行或计划对其进行任何漏洞利用开发。
这里将尝试在此列出所有内容，以便为大家提供开始挖掘的参考，但只会扩展那些影响我们本文目标的内容。
## 3.1 PresArena
PresArena是Gecko专门用于CSS盒子对象的堆（Gecko是Firefox的布局引擎）。
当释放CSS框对象时，空闲的PresArena堆'slot'将根据其类型添加到空闲列表中。
这意味着PresArena为每个不同的CSS框对象类型维护单独的空闲堆'slot'列表。 分配请求从它尝试分配的对象类型的空闲列表中提供服务。  
这基本上意味着对于CSS框对象，PresArena实现了类型安全的内存重用，主要是杀死大多数use-after-free的利用。
我说'大多数'是因为在某些情况下，use-after-free的bug仍然可以通过相同对象类型的技巧来利用，例如使用属性值。  
PresArena还给与CSS box 对象相关但不支持的对象类型提供服务。 这些对象的空闲列表是按大小而不是每种类型。这当然意味着这些对象类型的use-after-free bug可以像往常一样被利用。PresArena的代码位于layout / base / nsPresArena.{h，cpp}。
## 3.2 jemalloc堆清理
由于jemalloc将分配请求舍入到最接近的大小类别（bin），因此可能会将一个小对象分配给更大的对象占用之前占用的相同区域（两个对象都小于或等于当前的大小类别））。
因此，在这种情况下，我们可以使用小对象来读回较大对象留下的内存。 这可能会泄漏DLL指针，并可能有助于绕过ASLR。
为了避免这种情况，jemalloc在regions 被释放后对其进行清理。 目前的Firefox版本使用值0xe5e5e5e5进行清理;
旧版本使用0xa5a5a5a5。在Firefox59.0版本中，依然使用0xe5e5e5e5进行处理。  
这种强化功能还会使一些未初始化的内存错误无法使用。 在任何情况下，如果你在fuzzing Firefox，这些都是在崩溃日志中能获得有价值的地方。
## 3.3 垃圾回收
在尝试在堆上创建特定对象布局时，能够按需触发垃圾回收机制是基础的操作。 Firefox没有提供无特权的JavaScript API来执行此操作。
虽然没有按需GC API来调用，但很明显Firefox开发人员会主动尝试从非特权的JavaScript函数中删除直接执行路径来触发GC。
出于各种情况都可以触发GC;  
Firefox将这些分为两大类，一类与JavaScript引擎相关，另一类与JavaScript引擎无关。
第二类包括与布局引擎相关的原因（例如帧刷新），以及对浏览器更加通用的原因（例如，当主进程退出时）。 您可以在js / public /
GCAPI.h找到所有原因的名称。  
这些是寻找从非特权JavaScript代码按需触发GC的方法的开始。  
从 TOO_MUCH_MALLOC 开始。如果您在Firefox的代码中搜索它并使用您喜欢的代码阅读工具回溯它，您将得出以下执行路径：  
在读取文件dom / canvas / CanvasRenderingContext2D.cpp中的dom ::
CanvasRenderingContext2D :: EnsureTarget（）之后，我们可以很容易地找出如何到达它：
    var my_canvas = document.createElement("canvas");
        my_canvas.id = "my_canvas";