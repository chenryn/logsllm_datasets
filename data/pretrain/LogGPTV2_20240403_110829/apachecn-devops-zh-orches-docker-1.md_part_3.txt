$ nova boot --image "docker-busybox:latest" --flavor m1.tiny test
```
### 类型
使用的命令将是映像中配置的命令。每个容器映像可以有一个为运行配置的命令。驱动程序不会覆盖此命令。
实例一旦启动，就会在`nova` `list`中列出:
```
$ nova list
```
您还可以在 Docker 中看到相应的容器:
```
$ docker ps
```
# 初始:在 Docker 中构建 Docker
虽然从标准存储库安装更容易，但它们通常包含旧版本，这意味着您可能会错过重要的更新或功能。保持更新的最好方法是定期从公共`GitHub`存储库中获取最新版本。传统上，从一个来源构建软件是痛苦的，并且只能由真正在项目中工作的人来完成。Docker 的情况并非如此。从 Docker 0.6 开始，在 Docker 中构建 Docker 已经成为可能。这意味着升级 Docker 就像在 Docker 本身构建一个新版本并替换二进制文件一样简单。让我们看看这是如何做到的。
## 依赖关系
您需要在 64 位 Linux 机器(虚拟机或裸机)中安装以下工具来构建 Docker:
*   **去**
*   **制作**
**Git** 是一个免费的和开源的分布式版本控制系统，旨在以速度和效率处理从小型到超大型的所有项目。这里使用它来克隆 Docker 公共源代码存储库。查看出[git-scm.org](http://git-scm.org)了解更多详情。
`make`实用程序是一个软件工程工具，用于管理和维护计算机程序。当程序由许多组件文件组成时， **Make** 提供了最大的帮助。这里使用一个`Makefile`文件来以可重复和一致的方式启动 Docker 容器。
## 从源头建造 Docker
为了在 Docker 中构建 Docker，我们将首先获取源代码，然后运行几个`make`命令，最终创建一个`docker`二进制文件，该文件将替换 Docker 安装路径中的当前二进制文件。
在您的终端中运行以下命令:
```
$ git clone https://PI:EMAIL/dotcloud/docker
```
该命令将官方 Docker 源代码存储库从`Github`存储库克隆到名为`docker`的目录中:
```
$ cd docker
$ sudo make build
```
这将准备开发环境并安装创建二进制文件所需的所有依赖项。第一次跑步可能需要一些时间，所以你可以去喝杯咖啡。
### 类型
如果遇到自己觉得难以调试的错误，可以随时去 freenode IRC 上的`#docker`。开发人员和 Docker 社区非常有帮助。
现在，我们准备编译该二进制文件:
```
$ sudo make binary
```
这将编译一个二进制文件并将其放入`./bundles/-dev/binary/`目录。瞧啊。你已经准备好了一个新版本的 Docker。
不过，在替换现有的二进制文件之前，请运行以下测试:
```
$ sudo make test
```
如果测试通过，那么用您刚刚编译的二进制文件替换您当前的二进制文件是安全的。停止`docker`服务，创建现有二进制文件的备份，然后将新烘焙的二进制文件复制到它的位置:
```
$ sudo service docker stop
$ alias wd='which docker'
$ sudo cp $(wd) $(wd)_
$ sudo cp $(pwd)/bundles/-dev/binary/docker--dev $(wd)
$ sudo service docker start
```
恭喜你！您现在已经运行了最新版本的 Docker。
### 类型
OSX 和 Windows 用户可以遵循与 boot2Docker 虚拟机中 SSH 相同的过程。
# 验证安装
要验证安装是否成功，请在终端控制台中运行以下命令:
```
$ docker run -i -t ubuntu echo Hello World!
```
`docker` `run`命令启动一个带有`ubuntu`基本映像的容器。由于这是您第一次启动`ubuntu`容器，容器的输出将如下所示:
```
Unable to find image 'ubuntu' locally
Pulling repository ubuntu
e54ca5efa2e9: Download complete
511136ea3c5a: Download complete
d7ac5e4f1812: Download complete
2f4b4d6a4a06: Download complete
83ff768040a0: Download complete
6c37f792ddac: Download complete
Hello World!
```
当您发出`docker` `run` `ubuntu`命令时，Docker 会在本地查找`ubuntu`映像，如果没有找到，它会从公共`docker`注册表下载`ubuntu`映像。你还会看到它说**拉** **从属层**。
这意味着它正在下载文件系统层。默认情况下，Docker 使用 AUFS，一个分层的写时复制文件系统，这意味着容器映像的文件系统是多个只读文件系统层的顶点。这些层在运行的容器之间共享。如果您启动一个将写入该文件系统的操作，它将创建一个新的层，这将是底层层和新数据的区别。共享公共层意味着只有第一个容器将占用大量内存，而后续容器将占用少量内存，因为它们将共享只读层。这意味着，即使在一台功率相对较低的笔记本电脑上，您也可以运行数百个容器。
![Verifying Installation](img/4787_01_03.jpg)
一旦映像被完全下载，它将启动容器，并在您的控制台中呼应`Hello` `World!`。这是 Docker 容器的另一个显著特征。每个容器都与一个命令相关联，它应该运行该命令。请记住，Docker 容器不同于虚拟机，因为它们不会虚拟化整个操作系统。每个`docker`容器只接受一个命令，并在隔离环境中的沙盒进程中运行它。
# 有用的提示
以下是两个有用的提示，可能会为你以后省去很多麻烦。第一个展示了如何给 docker 客户端非根访问权限，第二个展示了如何配置 Ubuntu 防火墙规则来启用转发网络流量。
### 注
如果您使用的是 Boot2Docker，则不需要遵循这些步骤。
## 给予非根用户访问权限
创建一个名为`docker`的组，并将您的用户添加到该组中，以避免必须为每个`docker`命令添加`sudo`前缀。默认情况下，您需要运行带有`sudo`前缀的`docker`命令的原因是`docker`守护程序需要以`root`权限运行，但是 docker 客户端(您运行的命令)不需要。因此，通过创建一个`docker`组，您可以在不使用`sudo`前缀的情况下运行所有客户端命令，而守护程序则以`root`权限运行:
```
$ sudo groupadd docker # Adds the docker group
$ sudo gpasswd -a $(whoami) docker # Adds the current user to the group
$ sudo service docker restart
```
为了使更改生效，您可能需要注销并再次登录。
## UFW 设置
Docker 使用桥来管理容器中的网络。**不复杂** **防火墙** ( **UFW** )是 Ubuntu 中默认的防火墙工具。它会丢弃所有转发流量。您需要像这样启用转发:
```
$ sudo vim /etc/default/ufw
# Change:
# DEFAULT_FORWARD_POLICY="DROP"
# to
DEFAULT_FORWARD_POLICY="ACCEPT"
```
通过运行以下命令重新加载防火墙:
```
$ sudo ufw reload
```
或者，如果您希望能够从其他主机到达您的容器，那么您应该在 docker 端口(`default` `2375`)上启用传入连接:
```
$ sudo ufw allow 2375/tcp
```
### 类型
**下载示例代码**
您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有 Packt Publishing 书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您
# 总结
我希望这一章能让你迷上 Docker。接下来的章节将带你进入 Docker 的世界，并试图用它的惊人之处让你眼花缭乱。
在本章中，您学习了 Docker 的一些历史和一些基础知识，以及它是如何工作的。我们看到了它与虚拟机的区别和优势。
然后我们开始在我们的开发环境中安装 Docker，无论是 Ubuntu、Mac 还是 Windows。然后我们看到了如何用 Docker 替换 OpenStack 的虚拟机管理程序。后来，我们从源代码中构建了 Docker，在 Docker 内！说说吃自己的狗粮吧！
最后，我们下载了第一个映像，运行了第一个容器。现在，您可以拍拍自己的背，进入下一章，我们将深入介绍主要的 Docker 命令，并了解如何创建自己的映像。