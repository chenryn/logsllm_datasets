This is another regression we noticed at switching `v5.5.8`.
With a child visitor, we'd like to replace nested calls with strings:
    foo(bar('x'));
To:
    foo('{x}');
With a (simplified here) transform:
    module.exports = new Transformer('foo', {
      CallExpression: function(node, parent, scope) {
        scope.traverse(node, childCallVisitor, {});
      }
    });
    var childCallVisitor = {
      CallExpression: {
        enter: function(node) {
          return t.literal('{' + node['arguments'][0].value + '}');
        }
      }
    };
The stack-trace:
    TypeError: /Users/dmitrys/test.js: Cannot set property '0' of null
        at NodePath.replaceWith (.../babel/node_modules/babel-core/lib/babel/traversal/path/replacement.js:170:40)
        at NodePath.call (.../babel/node_modules/babel-core/lib/babel/traversal/path/context.js:125:12)
        at NodePath.visit (.../babel/node_modules/babel-core/lib/babel/traversal/path/context.js:146:8)
        at TraversalContext.visitMultiple (.../babel/node_modules/babel-core/lib/babel/traversal/context.js:85:16)
        at TraversalContext.visit (.../babel/node_modules/babel-core/lib/babel/traversal/context.js:115:19)
        at Function.traverse.node (.../babel/node_modules/babel-core/lib/babel/traversal/index.js:67:17)
        at traverse (.../babel/node_modules/babel-core/lib/babel/traversal/index.js:50:14)
        at Scope.traverse (.../babel/node_modules/babel-core/lib/babel/traversal/scope/index.js:219:28)
        at NodePath.module.exports.Transformer.CallExpression (...fb-transforms/babel-plugin-fbt/index.js:12:11)
        at NodePath.call (.../babel/node_modules/babel-core/lib/babel/traversal/path/context.js:122:26)
If we have more complex expression, it works:
    foo(bar('x') + ' y');
Normally transforms to:
    foo('{x}' + 'y');