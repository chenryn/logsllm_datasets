---
author: Julia Evans
category: 技术
comments_data:
- date: '2023-09-17 00:22:58'
  message: 我更喜欢SVN
  postip: 114.224.35.129
  username: 来自江苏无锡的 Firefox 117.0|Ubuntu 用户
- date: '2023-09-17 08:44:10'
  message: 我更喜欢开源[坏笑]
  postip: 221.197.252.113
  username: 来自天津的 Chrome Mobile 116.0|Android 10 用户
count:
  commentnum: 2
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 2133
date: '2023-09-16 23:02:30'
editorchoice: false
excerpt: 我们知道它存储在 .git 目录中，但具体到 .git 中的哪个位置，各个版本的历史文件又被存储在哪里呢？
fromurl: https://jvns.ca/blog/2023/09/14/in-a-git-repository--where-do-your-files-live-/
id: 16198
islctt: true
largepic: /data/attachment/album/202309/16/230138n1j44qiabgplgbw4.jpg
permalink: /article-16198-1.html
pic: /data/attachment/album/202309/16/230138n1j44qiabgplgbw4.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 我们知道它存储在 .git 目录中，但具体到 .git 中的哪个位置，各个版本的历史文件又被存储在哪里呢？
tags:
- Git
thumb: false
title: 在 Git 仓库中，文件究竟被存储在哪里？
titlepic: true
translator: ChatGPT
updated: '2023-09-16 23:02:30'
---
![](/data/attachment/album/202309/16/230138n1j44qiabgplgbw4.jpg)
大家好！今天我和一个朋友讨论 Git 的工作原理，我们感到奇怪，Git 是如何存储你的文件的？我们知道它存储在 `.git` 目录中，但具体到 `.git` 中的哪个位置，各个版本的历史文件又被存储在哪里呢？
以这个博客为例，其文件存储在一个 Git 仓库中，其中有一个文件名为 `content/post/2019-06-28-brag-doc.markdown`。这个文件在我的 `.git` 文件夹中具体的位置在哪里？过去的文件版本又被存储在哪里？那么，就让我们通过编写一些简短的 Python 代码来探寻答案吧。
### Git 把文件存储在 .git/objects 之中
你的仓库中，每一个文件的历史版本都被储存在 `.git/objects` 中。比如，对于这个博客，`.git/objects` 包含了 2700 多个文件。
```
$ find .git/objects/ -type f | wc -l
2761
```
> 
> 注意：`.git/objects` 包含的信息，不仅仅是 “仓库中每一个文件的所有先前版本”，但我们暂不详细讨论这一内容。
> 
> 
> 
这里是一个简短的 Python 程序（[find-git-object.py](https://gist.github.com/jvns/ff884dceef7660402fe1eca697cfbf51)），它可以帮助我们定位在 `.git/objects` 中的特定文件的具体位置。
```
import hashlib
import sys
def object_path(content):
    header = f"blob {len(content)}\0"
    data = header.encode() + content
    sha1 = hashlib.sha1()
    sha1.update(data)
    digest = sha1.hexdigest()
    return f".git/objects/{digest[:2]}/{digest[2:]}"
with open(sys.argv[1], "rb") as f:
    print(object_path(f.read()))
```
此程序的主要操作如下：
* 读取文件内容
* 计算一个头部（`blob 16673\0`），并将其与文件内容合并
* 计算出文件的 sha1 校验和（此处为 `e33121a9af82dd99d6d706d037204251d41d54`）
* 将这个 sha1 校验和转换为路径（如 `.git/objects/e3/3121a9af82dd99d6d706d037204251d41d54`）
运行的方法如下：
```
$ python3 find-git-object.py content/post/2019-06-28-brag-doc.markdown
.git/objects/8a/e33121a9af82dd99d6d706d037204251d41d54
```
### 术语解释：“内容寻址存储”
这种存储策略的术语为“ 内容寻址存储   content addressed storage ”，它指的是对象在数据库中的文件名与文件内容的哈希值相同。
内容寻址存储的有趣之处就是，假设我有两份或许多份内容完全相同的文件，在 Git 的数据库中，并不会因此占用额外空间。如果内容的哈希值是 `aabbbbbbbbbbbbbbbbbbbbbbbbb`，它们都会被存储在 `.git/objects/aa/bbbbbbbbbbbbbbbbbbbbb` 中。
### 这些对象是如何进行编码的？
如果我尝试在 `.git/objects` 目录下查看这个文件，显示的内容似乎有一些奇怪：
```
$ cat .git/objects/8a/e33121a9af82dd99d6d706d037204251d41d54
x^A}sƑo|^Qju*j^...
```
这是怎么回事呢？让我们来运行 `file` 命令检查一下：
```
$ file .git/objects/8a/e33121a9af82dd99d6d706d037204251d41d54
.git/objects/8a/e33121a9af82dd99d6d706d037204251d41d54: zlib compressed data
```
原来，它是压缩的！我们可以编写一个小巧的 Python 程序—— `decompress.py`，然后用 `zlib` 模块去解压这些数据：
```
import zlib
import sys
with open(sys.argv[1], "rb") as f:
    content = f.read()
    print(zlib.decompress(content).decode())
```
让我们来解压一下看看结果：
```
$ python3 decompress.py .git/objects/8a/e33121a9af82dd99d6d706d037204251d41d54
blob 16673---
title: "Get your work recognized: write a brag document"
date: 2019-06-28T18:46:02Z
url: /blog/brag-documents/
categories: []
---
... the entire blog post ...
```
结果显示，这些数据的编码方式非常简单：首先有 `blob 16673\0` 标识，其后就是文件的全部内容。
### 这里并没有差异性数据（diff）
这里有一件我第一次知道时让我感到惊讶的事：这里并没有任何差异性数据！那个文件是该篇博客文章的第 9 个版本，但 Git 在 `.git/objects` 目录中存储的版本是完整文件内容，而并非与前一版本的差异。
尽管 Git 实际上有时候会以差异性数据存储文件（例如，当你运行 `git gc` 时，为了提升效率，它可能会将多个不同的文件封装成 “打包文件”），但在我个人经验中，我从未需要关注这个细节，所以我们不在此深入讨论。然而，关于这种格式如何工作，Aditya Mukerjee 有篇优秀的文章 《[拆解 Git 的打包文件](https://codewords.recurse.com/issues/three/unpacking-git-packfiles)》。
### 博客文章的旧版本在哪？
你可能会好奇：如果在我修复了一些错别字之前，这篇博文已经存在了 8 个版本，那它们在 `.git/objects` 目录中的位置是哪里？我们如何找到它们呢？
首先，我们来使用 `git log` 命令来查找改动过这个文件的每一个提交：
```
$ git log --oneline  content/post/2019-06-28-brag-doc.markdown
c6d4db2d
423cd76a
7e91d7d0
f105905a
b6d23643
998a46dd
67a26b04
d9999f17
026c0f52
72442b67
```
然后，我们选择一个之前的提交，比如 `026c0f52`。提交也被存储在 `.git/objects` 中，我们可以尝试在那里找到它。但是失败了！因为 `ls .git/objects/02/6c*` 没有显示任何内容！如果有人告诉你，“我们知道有时 Git 会打包对象来节省空间，我们并不需过多关心它”，但现在，我们需要去面对这个问题了。
那就让我们去解决它吧。
### 让我们开始解包一些对象
现在我们需要从打包文件中解包出一些对象。我在 Stack Overflow 上查找了一下，看起来我们可以这样进行操作：
```
$ mv .git/objects/pack/pack-adeb3c14576443e593a3161e7e1b202faba73f54.pack .
$ git unpack-objects < pack-adeb3c14576443e593a3161e7e1b202faba73f54.pack
```
这种直接对库进行手术式的做法让人有些紧张，但如果我误操作了，我还可以从 Github 上重新克隆这个库，所以我并不太担心。
解包所有的对象文件后，我们得到了更多的对象：大约有 20000 个，而不是原来的大约 2700 个。看起来很酷。