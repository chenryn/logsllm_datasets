x
a
M
A
f
n
o
i
t
c
a
r
f
Fraction 1 − signedWeight
totalWeight of
attestations missing or not agreeing
2 fA
31
43
58
81
128
309
—
—
—
0
5% 138
10% 149
15% 161
20% 174
25% 189
30% 206
35% 226
40% 249
45% 276
l
a
i
r
a
s
r
e
v
d
a
m
u
m
i
x
a
M
A
f
n
o
i
t
c
a
r
f
with the majority
fA/2
144
163
187
219
264
331
443 —
665 —
1331 —
2 fA
1.5 fA
fA
165
157
150
237
204
181
298
452
227
576 —
309
—
—
487
—
1198 —
—
—
—
—
—
—
Fig. 2. numReveals values for proving at least one honest attestation
(Section VI-A). ‘—’ means that no such value is possible.
The two scenarios we consider are:
• Proving that at
least one honest attestor provided an
attestation (this is useful when we can safely assume that
there can be no disagreement among honest attestors):
parameters worked out in Section VI-A.
• Providing an incontrovertible certiﬁcate—that is, proving
that a majority of honest attestors provided an attestation
(this is useful to establish consensus): parameters worked
out in Section VI-B.
A. Parameters for Proving At Least One Honest Attestation
Suppose we can be assured that there is no disagreement
among honest attestors. For example, in a blockchain that
guarantees no forks (e.g., [38, 56]), honest participants will
always agree on the block at a particular height. In that case,
the truth can be established by any single honest attestor.
If we let fA denote an upper bound on the fraction of the
weight controlled by the adversary, then it suﬃces to prove
that the total weight of signers is at least provenWeight =
fA · totalWeight, where
totalWeight =
attestors[i].weight ,
i
since this guarantees that at least one of the signers is honest.
The actual signedWeight value can vary, depending on
the number of attestors who do not submit attestations due
to adversarial corruption, lost network connectivity, or other
faults. Figure 2 shows numReveals computed according to
Equation (1) (Section IV-A) for a number of scenarios ranging
from more optimistic to more pessimistic.
B. Incontrovertible Certiﬁcates: Parameters for Proving Ma-
jority Agreement
In contrast to the previous section, suppose now that there
is no guarantee of agreement even among honest attestors. If
we wish to ensure that no two compact certiﬁcates attesting
to the same event can contradict each other, then we need to
verify that a majority of honest attestors attest to the same
version of an event.
Fig. 3. numReveals values for proving that a majority of honest weight
signed M (Section VI-B). ‘—’ means that no such value is possible.
If the corrupted fraction is x, then half of honest weight is
(1 − x)/2, and thus it suﬃces to prove that the total weight
of valid attestations is more than (1 − x)/2 + x = (1 + x)/2.
Thus, if x < fA, then it suﬃces to prove that total weight of
valid attestations is at least provenWeight = (1 + fA)/2. The
value numReveals, as explained above, depends not only on
provenWeight, but also on the actual weight signedWeight
of attestations that certiﬁcate creator collected. As in the
previous section, the actual signedWeight value can vary.
Figure 3 gives examples of numReveals computed according
to Equation (1) (Section IV-A) for diﬀerent values of fA and
signedWeight.
VII. Performance evaluation
This section empirically answers the following questions
about the compact certiﬁcate scheme Pcompcert from Sec-
tion IV.
• How much CPU time is required to create a compact
• How much CPU time is required to verify a compact
certiﬁcate?
certiﬁcate?
• What is the size of a compact certiﬁcate?
A. Implementation
To evaluate the performance of compact certiﬁcates, we
implemented a prototype of the compact certiﬁcate scheme
described Section IV. The implementation consists of about
1,200 lines of Go code, including 400 lines of code for a
Merkle commitment library and 200 lines of code for a
deterministic ﬂoating-point library that eﬃciently computes
numReveals (see Section IV-C and Appendix B). The Merkle
tree library aggregates proofs for multiple elements together,
by eliding common paths to the root (see Section IV-C). To
make this optimization more eﬀective, we sort the elements of
the attestors array by weight. This ensures that high-weight
elements, which appear more often, are clustered together and
share more common elements in their path to the root of
the tree. We used ed25519 [14, 15] signatures and SHA-
512/256 [86] hash implementations from libsodium [69],
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
633
and we used msgpack [46] to encode compact certiﬁcates into
a byte sequence.
B. Experimental results
We ran our evaluation on an Intel Xeon Silver 4215R CPU
(3.2 GHz) running Linux 5.11 and Go 1.16. Unless otherwise
mentioned, we simulated 1 million attestors, each with equal
weight, and set the target provenWeight to half of the total
weight of all attestors. We set the security parameter k + q =
128 (Section VI). We ran each experiment 3 times, reporting
the median outcome; there was little variance in the results.
To provide a baseline comparison, we also evaluated a naïve
scheme where the certiﬁcate consists of a set of signatures that
add up to provenWeight. Verifying this certiﬁcate requires
verifying each of the signatures in the certiﬁcate.
To measure the time required to create and verify certiﬁcates,
we performed the following steps:
Signing messages: We signed messages on behalf of all
attestors. This involves a standard ed25519 signature. This
took 21.6 seconds (21.6 µsec per signature); we expect that in
a real deployment, this cost would be distributed across many
nodes. This time was the same for both compact certiﬁcates
and naïve certiﬁcates.
Building the certiﬁcate: We built a compact certiﬁcate using
the resulting signatures, which took 56 seconds. This was
dominated by the time to verify all of the signatures (55.4 sec-
onds, or 55.4 µsec per signature, for signedWeight =
totalWeight).3 The rest of the time (400 msec) was mostly
spent constructing the Merkle tree over the signatures. Notably,
the time to generate the certiﬁcate is largely independent of
signedWeight.
We also measured the time to generate a naïve certiﬁcate,
which entails checking signatures until
the total weight
of the checked signatures is at least provenWeight. For
provenWeight = totalWeight/2, this took 28 seconds
(twice as fast as building the compact certiﬁcate, since it
involves verifying half the number of signatures).
Figure 4 shows the size of the resulting compact certiﬁcate,
as a function of signedWeight, for varying numbers of
attestors. The size is dominated by the size of the Merkle proof
for each reveal; a larger number of attestors translates into
larger Merkle proofs. The certiﬁcate size shrinks with higher
signedWeight because the certiﬁcate includes fewer reveals.
The number of reveals ranges from 930 (for signedWeight
at 55% of totalWeight) down to 129 (signedWeight =
totalWeight) with 1 million attestors, yielding compact
certiﬁcates ranging from 650 kBytes to 120 kBytes. In contrast,
the size of the naïve certiﬁcate for 1 million attestors was
54.9 MBytes (corresponding to 500,000 signatures and public
keys), which is roughly 80–450× larger than the compact
certiﬁcates.
For 10K attestors, the naïve certiﬁcate is 540 KBytes (100×
fewer signatures), and the compact certiﬁcate is 2-3× smaller
(shorter Merkle proofs), making the naïve certiﬁcate 2–8×
3subsection VIII-A discusses the trade-oﬀ involved in lazy veriﬁcation of
signatures when building a compact certiﬁcate.
Fig. 4. Size of compact certiﬁcate (bytes), as a function of the percentage of
signatures present (signedWeight), for provenWeight = totalWeight/2.
larger than the compact certiﬁcate. With 100 attestors, the
naïve certiﬁcate is 5 KBytes, and the compact certiﬁcate
is 7.5–12 KBytes (1.5–2.2× larger); compact certiﬁcates do
not provide any savings when the number of attestors is
comparable to the number of reveals.
Finally, Figure 5 shows the size of the compact certiﬁcate
for diﬀerent values of provenWeight. As provenWeight
goes up, the number of reveals in a certiﬁcate increases.
For example, with signedWeight at 80% of totalWeight,
compact certiﬁcates have 43, 91, 189, and 457 reveals for
provenWeight at 10%, 30%, 50%, and 70% of totalWeight
respectively.
Fig. 5. Size of compact certiﬁcate (bytes), as a function of the percentage of
signatures present (signedWeight), for a range of values of provenWeight.
Verifying the certiﬁcate: We veriﬁed the resulting compact
certiﬁcate. Figure 6 shows the time required for veriﬁca-
tion, ranging from 67 msec (for signedWeight at 55%
of totalWeight, with 931 reveals) down to 8.6 msec (for
signedWeight = totalWeight, with 129 reveals). The time
is dominated by the cost of checking the revealed ed25519
signatures, as seen from the fact that the veriﬁcation time for
1M attestors is about the same as that for 10K attestors (which
has nearly the same number of reveals but shorter Merkle
proofs). The veriﬁcation time for 100 attestors is much lower,
because of the lower total number of reveals in the certiﬁcate.
In the naïve certiﬁcate scheme, the veriﬁcation time was
far higher—28 seconds, the same as the time to build the
naïve certiﬁcate—corresponding to the time required to verify
634
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
60708090100Percentageofsignaturespresent0200000400000600000Compactcertsize(bytes)1Mattestors10Kattestors100attestors20406080100Percentageofsignaturespresent0200000400000600000800000Compactcertsize(bytes)provenWeight=70%provenWeight=50%provenWeight=30%provenWeight=10%is signiﬁcantly smaller than the unskewed case because the
Merkle proofs elide common paths to the root for high-weight
attestors, which are clustered together (as a result of sorting
by weight). For instance, with s = 4, there are 129 distinct
reveals, but the certiﬁcate size is 76 kBytes, versus 124 kBytes
for an unskewed distribution. A naïve approach would not
fare well at this level of skew: s = 4 would require signatures
from the top 6932 attestors to account for provenWeight =
totalWeight/2.
VIII. Implementing Certificate Formation In A
Decentralized Setting
In this section, we address the problem of constructing a
compact certiﬁcate in a setting without a single trusted prover
and with a somewhat unreliable network. This setting arises
naturally in a permissionless blockchain system (e.g., [26, 38,
56, 78, 84]). Speciﬁcally, we use the Algorand blockchain4 as
an example. We added compact certiﬁcates to the Algorand
system in order to provide succinct proofs of block validity
for parties that are not verifying the blocks in real time. As
described in Section I, this approach saves these parties from
having to verify the entire blockchain in order to verify a
particular block.
In Algorand’s protocol, every block header contains a hash
of the previous block header (much like every block chain,
so that a block transitively commits to all prior blocks), and
a “real-time” consensus protocol is used to agree on each
next block. Compact certiﬁcates in Algorand certify every
Nth block header, providing an eﬃcient way of authenticating
future blocks by jumping forward N blocks at a time. The
N parameter is on the order of 128 or more, to amortize
the cost of collecting signatures for the compact certiﬁcate.
Validating a compact certiﬁcate for a block header requires
a commitment to the participants that are expected to sign
that block header. To provide this commitment, every Nth
block header contains a Merkle commitment to the public keys
and weights of participants eligible to form the next compact
certiﬁcate.5
Algorand’s use of compact certiﬁcates allows anyone to
start from a known valid block header and eﬃciently validate
a future block. To do so requires using previous-block hashes
to validate the most recent block header that’s a multiple of N
(which will contain a Merkle commitment to the participants),
then use compact certiﬁcates to jump forward by N block
headers at a time, and then use previous-block hashes again
to step back to the exact block that needs to be validated. One
limitation of this approach is that compact certiﬁcates alone
cannot be used to validate the most recent N blocks or so.
Validating the most recent N blocks would require verifying
messages from the “real-time” consensus protocol, which in
Algorand’s case requires having access to the account state.
We wish for the construction of a compact certiﬁcate to
be both reliable and eﬃcient, even if no single certiﬁcate
creator or attestor can be relied upon. The honest and
4https://algorand.foundation/
5Participants are weighted by their account balance, which provides a similar
stake-weighted guarantee as the “real-time” Algorand consensus protocol.
635
Fig. 6. Time taken to verify a compact certiﬁcate, as a function of the
percentage of signatures present (signedWeight), for provenWeight =
totalWeight/2.
500,000 signatures. This is roughly 400–3000× slower than
checking a compact certiﬁcate.