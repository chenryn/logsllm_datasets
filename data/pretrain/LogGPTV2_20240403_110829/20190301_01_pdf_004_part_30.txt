### 3.8.6.2 %FOUND
The `%FOUND` attribute is used to determine whether a row has been retrieved from the result set of a specified cursor after a `FETCH` operation.

**Syntax:**
```sql
cursor_name%FOUND
```

- **cursor_name**: The name of the cursor. If a row is successfully fetched, `%FOUND` returns `TRUE`. Otherwise, it returns `FALSE`.

**Behavior:**
- After the last row in the result set has been fetched, the next `FETCH` will cause `%FOUND` to return `FALSE`.
- If there are no rows in the result set, the first `FETCH` will also return `FALSE`.
- Referencing `%FOUND` on a cursor before it is opened or after it is closed will raise an `INVALID_CURSOR` exception.
- `%FOUND` returns `NULL` if it is referenced when the cursor is open but before the first `FETCH`.

**Example:**
```sql
CREATE OR REPLACE PROCEDURE cursor_example
IS
    v_emp_rec emp%ROWTYPE;
    CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
    OPEN emp_cur_1;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    FETCH emp_cur_1 INTO v_emp_rec;
    WHILE emp_cur_1%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
        FETCH emp_cur_1 INTO v_emp_rec;
    END LOOP;
    CLOSE emp_cur_1;
END;
```

**Output:**
```
EXEC cursor_example;
EMPNO ENAME
----- ------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
```

### 3.8.6.3 %NOTFOUND
The `%NOTFOUND` attribute is the logical opposite of `%FOUND`.

**Syntax:**
```sql
cursor_name%NOTFOUND
```

- **cursor_name**: The name of the cursor. If a row is not fetched, `%NOTFOUND` returns `TRUE`. Otherwise, it returns `FALSE`.

**Behavior:**
- After the last row in the result set has been fetched, the next `FETCH` will cause `%NOTFOUND` to return `TRUE`.
- If there are no rows in the result set, the first `FETCH` will also return `TRUE`.
- Referencing `%NOTFOUND` on a cursor before it is opened or after it is closed will raise an `INVALID_CURSOR` exception.
- `%NOTFOUND` returns `NULL` if it is referenced when the cursor is open but before the first `FETCH`.

**Example:**
```sql
CREATE OR REPLACE PROCEDURE cursor_example
IS
    v_emp_rec emp%ROWTYPE;
    CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
    OPEN emp_cur_1;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    LOOP
        FETCH emp_cur_1 INTO v_emp_rec;
        EXIT WHEN emp_cur_1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
    END LOOP;
    CLOSE emp_cur_1;
END;
```

**Output:**
```
EXEC cursor_example;
EMPNO ENAME
----- ------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
```

### 3.8.6.4 %ROWCOUNT
The `%ROWCOUNT` attribute returns an integer indicating the number of rows fetched so far from the specified cursor.

**Syntax:**
```sql
cursor_name%ROWCOUNT
```

- **cursor_name**: The name of the cursor. `%ROWCOUNT` returns the number of rows fetched thus far. After the last row has been fetched, `%ROWCOUNT` remains set to the total number of rows until the cursor is closed. Referencing `%ROWCOUNT` on a closed cursor will raise an `INVALID_CURSOR` exception.

**Behavior:**
- `%ROWCOUNT` returns `0` if it is referenced when the cursor is open but before the first `FETCH`.
- `%ROWCOUNT` also returns `0` after the first `FETCH` if there are no rows in the result set.

**Example:**
```sql
CREATE OR REPLACE PROCEDURE cursor_example
IS
    v_emp_rec emp%ROWTYPE;
    CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
    OPEN emp_cur_1;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    LOOP
        FETCH emp_cur_1 INTO v_emp_rec;
        EXIT WHEN emp_cur_1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('**********************');
    DBMS_OUTPUT.PUT_LINE(emp_cur_1%ROWCOUNT || ' rows were retrieved');
    CLOSE emp_cur_1;
END;
```

**Output:**
```
EXEC cursor_example;
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
**********************
14 rows were retrieved
```

### 3.8.6.5 Summary of Cursor States and Attributes
The following table summarizes the possible cursor states and the values returned by the cursor attributes.

| Cursor State          | %ISOPEN | %FOUND | %NOTFOUND | %ROWCOUNT |
|-----------------------|---------|--------|-----------|-----------|
| INVALID_CURSOR        | Exception | Exception | Exception | Exception |
| Before OPEN           | False   | Null   | Null      | 0         |
| After OPEN & Before 1st FETCH | True  | Null   | Null      | 0         |
| After 1st Successful FETCH | True  | True   | False     | 1         |
| After nth Successful FETCH (last row) | True  | True   | False     | n         |
| After n+1st FETCH (after last row) | True  | False  | True      | n         |
| After CLOSE           | False   | Exception | Exception | Exception |

### 3.8.7 Cursor FOR Loop
In the previous cursor examples, the programming logic required to process the result set included opening the cursor, fetching each row, testing for the end of the result set, and closing the cursor. The cursor FOR loop simplifies this by automatically handling these steps.

**Syntax:**
```sql
FOR record IN cursor
LOOP
    statements
END LOOP;
```

- **record**: An identifier assigned to an implicitly declared record with the definition `cursor%ROWTYPE`.
- **cursor**: The name of a previously declared cursor.
- **statements**: One or more SPL statements. There must be at least one statement.

**Example:**
```sql
CREATE OR REPLACE PROCEDURE cursor_example
IS
    CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    FOR v_emp_rec IN emp_cur_1 LOOP
        DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
    END LOOP;
END;
```

**Output:**
```
EXEC cursor_example;
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
```

### 3.8.8 Parameterized Cursors
A user can declare a static cursor that accepts parameters, allowing values to be passed when opening the cursor. In the following example, a parameterized cursor is created to display the name and salary of all employees from the `emp` table who have a salary less than a specified value.

**Example:**
```sql
DECLARE
    my_record emp%ROWTYPE;
    CURSOR c1 (max_wage NUMBER) IS
        SELECT * FROM emp WHERE sal < max_wage;
BEGIN
    OPEN c1(2000);
    LOOP
        FETCH c1 INTO my_record;
        EXIT WHEN c1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Name = ' || my_record.ename || ', salary = ' || my_record.sal);
    END LOOP;
    CLOSE c1;
END;
```

**Output:**
```
Name = SMITH, salary = 800.00
Name = ALLEN, salary = 1600.00
Name = WARD, salary = 1250.00
Name = MARTIN, salary = 1250.00
Name = TURNER, salary = 1500.00
Name = ADAMS, salary = 1100.00
Name = JAMES, salary = 950.00
Name = MILLER, salary = 1300.00
```

### 3.9 REF CURSORs and Cursor Variables
This section discusses another type of cursor that provides greater flexibility than the previously discussed static cursors.

#### 3.9.1 REF CURSOR Overview
A cursor variable is a cursor that contains a pointer to a query result set. The result set is determined by the execution of the `OPEN FOR` statement using the cursor variable. Unlike a static cursor, a cursor variable can be opened multiple times with different queries, creating new result sets each time.

REF CURSOR types can be passed as parameters to or from stored procedures and functions. The return type of a function can also be a REF CURSOR type, providing the capability to modularize operations on a cursor into separate programs by passing a cursor variable between them.

#### 3.9.2 Declaring a Cursor Variable
SPL supports the declaration of a cursor variable using both the `SYS_REFCURSOR` built-in data type and user-defined REF CURSOR types. `SYS_REFCURSOR` is a weakly-typed REF CURSOR that allows any result set to be associated with it.

**Declaring a SYS_REFCURSOR Cursor Variable:**
```sql
name SYS_REFCURSOR;
```

- **name**: An identifier assigned to the cursor variable.

**Example:**
```sql
DECLARE
    emp_refcur SYS_REFCURSOR;
...
```

**Declaring a User-Defined REF CURSOR Type Variable:**
You must perform two distinct declaration steps to use a user-defined REF CURSOR variable:
1. Create a referenced cursor TYPE.
2. Declare the actual cursor variable based on that TYPE.

**Syntax:**
```sql
TYPE cursor_type_name IS REF CURSOR [RETURN return_type];
```

- **cursor_type_name**: The name of the REF CURSOR type.
- **return_type**: The data type of the result set (optional).

**Example:**
```sql
DECLARE
    TYPE emp_cur_type IS REF CURSOR RETURN emp%ROWTYPE;
    my_rec emp_cur_type;
...
```

#### 3.9.3 Opening a Cursor Variable
Once a cursor variable is declared, it must be opened with an associated `SELECT` command. The `OPEN FOR` statement specifies the `SELECT` command to create the result set.

**Syntax:**
```sql
OPEN name FOR query;
```

- **name**: The identifier of a previously declared cursor variable.
- **query**: A `SELECT` command that determines the result set.

**Example:**
```sql
CREATE OR REPLACE PROCEDURE emp_by_dept (
    p_deptno emp.deptno%TYPE
)
IS
    emp_refcur SYS_REFCURSOR;
BEGIN
    OPEN emp_refcur FOR SELECT empno, ename FROM emp WHERE deptno = p_deptno;
...
```

#### 3.9.4 Fetching Rows From a Cursor Variable
After a cursor variable is opened, rows may be retrieved from the result set using the `FETCH` statement. For details on using the `FETCH` statement, see Section 3.8.3.

**Example:**
```sql
CREATE OR REPLACE PROCEDURE emp_by_dept (
    p_deptno emp.deptno%TYPE
)
IS
    emp_refcur SYS_REFCURSOR;
    v_emp_rec emp%ROWTYPE;
BEGIN
    OPEN emp_refcur FOR SELECT empno, ename FROM emp WHERE deptno = p_deptno;
    LOOP
        FETCH emp_refcur INTO v_emp_rec;
        EXIT WHEN emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
    END LOOP;
    CLOSE emp_refcur;
END;
```

This completes the optimized and structured version of the provided text.