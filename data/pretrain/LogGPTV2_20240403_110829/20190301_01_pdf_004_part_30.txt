BEGIN
...
IF emp_cur_1%ISOPEN THEN
NULL;
ELSE
OPEN emp_cur_1;
END IF;
FETCH emp_cur_1 INTO ...
...
END;
3.8.6.2 %FOUND
The %FOUND attribute is used to test whether or not a row is retrieved from the result set
of the specified cursor after a FETCH on the cursor.
cursor_name%FOUND
cursor_name is the name of the cursor for which a BOOLEAN data type of TRUE will be
returned if a row is retrieved from the result set of the cursor after a FETCH.
After the last row of the result set has been FETCHed the next FETCH results in %FOUND
returning FALSE. FALSE is also returned after the first FETCH if there are no rows in the
result set to begin with.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 257
Database Compatibility for Oracle® Developers Guide
Referencing %FOUND on a cursor before it is opened or after it is closed results in an
INVALID_CURSOR exception being thrown.
%FOUND returns null if it is referenced when the cursor is open, but before the first
FETCH.
The following example uses %FOUND.
CREATE OR REPLACE PROCEDURE cursor_example
IS
v_emp_rec emp%ROWTYPE;
CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
OPEN emp_cur_1;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
FETCH emp_cur_1 INTO v_emp_rec;
WHILE emp_cur_1%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
FETCH emp_cur_1 INTO v_emp_rec;
END LOOP;
CLOSE emp_cur_1;
END;
When the previous procedure is invoked, the output appears as follows:
EXEC cursor_example;
EMPNO ENAME
----- ------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
3.8.6.3 %NOTFOUND
The %NOTFOUND attribute is the logical opposite of %FOUND.
cursor_name%NOTFOUND
cursor_name is the name of the cursor for which a BOOLEAN data type of FALSE will
be returned if a row is retrieved from the result set of the cursor after a FETCH.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 258
Database Compatibility for Oracle® Developers Guide
After the last row of the result set has been FETCHed the next FETCH results in
%NOTFOUND returning TRUE. TRUE is also returned after the first FETCH if there are no
rows in the result set to begin with.
Referencing %NOTFOUND on a cursor before it is opened or after it is closed, results in an
INVALID_CURSOR exception being thrown.
%NOTFOUND returns null if it is referenced when the cursor is open, but before the first
FETCH.
The following example uses %NOTFOUND.
CREATE OR REPLACE PROCEDURE cursor_example
IS
v_emp_rec emp%ROWTYPE;
CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
OPEN emp_cur_1;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH emp_cur_1 INTO v_emp_rec;
EXIT WHEN emp_cur_1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
END LOOP;
CLOSE emp_cur_1;
END;
Similar to the prior example, this procedure produces the same output when invoked.
EXEC cursor_example;
EMPNO ENAME
----- ------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 259
Database Compatibility for Oracle® Developers Guide
3.8.6.4 %ROWCOUNT
The %ROWCOUNT attribute returns an integer showing the number of rows FETCHed so far
from the specified cursor.
cursor_name%ROWCOUNT
cursor_name is the name of the cursor for which %ROWCOUNT returns the number of
rows retrieved thus far. After the last row has been retrieved, %ROWCOUNT remains set to
the total number of rows returned until the cursor is closed at which point %ROWCOUNT
will throw an INVALID_CURSOR exception if referenced.
Referencing %ROWCOUNT on a cursor before it is opened or after it is closed, results in an
INVALID_CURSOR exception being thrown.
%ROWCOUNT returns 0 if it is referenced when the cursor is open, but before the first
FETCH. %ROWCOUNT also returns 0 after the first FETCH when there are no rows in the
result set to begin with.
The following example uses %ROWCOUNT.
CREATE OR REPLACE PROCEDURE cursor_example
IS
v_emp_rec emp%ROWTYPE;
CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
OPEN emp_cur_1;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH emp_cur_1 INTO v_emp_rec;
EXIT WHEN emp_cur_1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
END LOOP;
DBMS_OUTPUT.PUT_LINE('**********************');
DBMS_OUTPUT.PUT_LINE(emp_cur_1%ROWCOUNT || ' rows were retrieved');
CLOSE emp_cur_1;
END;
This procedure prints the total number of rows retrieved at the end of the employee list as
follows:
EXEC cursor_example;
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 260
Database Compatibility for Oracle® Developers Guide
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
**********************
14 rows were retrieved
3.8.6.5 Summary of Cursor States and Attributes
The following table summarizes the possible cursor states and the values returned by the
cursor attributes.
Table 3-3 Cursor Attributes
Cursor State %ISOPEN %FOUND %NOTFOUND %ROWCOUNT
INVALID_CURSOR INVALID_CURSOR INVALID_CURSOR
Before OPEN False
Exception Exception Exception
After OPEN & Before
True Null Null 0
1st FETCH
After 1st Successful
True True False 1
FETCH
After nth Successful
True True False n
FETCH (last row)
After n+1st FETCH
True False True n
(after last row)
INVALID_CURSOR INVALID_CURSOR INVALID_CURSOR
After CLOSE False
Exception Exception Exception
3.8.7 Cursor FOR Loop
In the cursor examples presented so far, the programming logic required to process the
result set of a cursor included a statement to open the cursor, a loop construct to retrieve
each row of the result set, a test for the end of the result set, and finally a statement to
close the cursor. The cursor FOR loop is a loop construct that eliminates the need to
individually code the statements just listed.
The cursor FOR loop opens a previously declared cursor, fetches all rows in the cursor
result set, and then closes the cursor.
The syntax for creating a cursor FOR loop is as follows.
FOR record IN cursor
LOOP
statements
END LOOP;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 261
Database Compatibility for Oracle® Developers Guide
record is an identifier assigned to an implicitly declared record with definition,
cursor%ROWTYPE. cursor is the name of a previously declared cursor. statements
are one or more SPL statements. There must be at least one statement.
The following example shows the example from Section 3.8.6.3, modified to use a cursor
FOR loop.
CREATE OR REPLACE PROCEDURE cursor_example
IS
CURSOR emp_cur_1 IS SELECT * FROM emp;
BEGIN
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
FOR v_emp_rec IN emp_cur_1 LOOP
DBMS_OUTPUT.PUT_LINE(v_emp_rec.empno || ' ' || v_emp_rec.ename);
END LOOP;
END;
The same results are achieved as shown in the output below.
EXEC cursor_example;
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
3.8.8 Parameterized Cursors
A user can also declare a static cursor that accepts parameters, and can pass values for
those parameters when opening that cursor. In the following example we have created a
parameterized cursor which will display the name and salary of all employees from the
emp table that have a salary less than a specified value which is passed as a parameter.
DECLARE
my_record emp%ROWTYPE;
CURSOR c1 (max_wage NUMBER) IS
SELECT * FROM emp WHERE sal < max_wage;
BEGIN
OPEN c1(2000);
LOOP
FETCH c1 INTO my_record;
EXIT WHEN c1%NOTFOUND;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 262
Database Compatibility for Oracle® Developers Guide
DBMS_OUTPUT.PUT_LINE('Name = ' || my_record.ename || ', salary = '
|| my_record.sal);
END LOOP;
CLOSE c1;
END;
So for example if we pass the value 2000 as max_wage, then we will only be shown the
name and salary of all employees that have a salary less than 2000. The result of the
above query is the following:
Name = SMITH, salary = 800.00
Name = ALLEN, salary = 1600.00
Name = WARD, salary = 1250.00
Name = MARTIN, salary = 1250.00
Name = TURNER, salary = 1500.00
Name = ADAMS, salary = 1100.00
Name = JAMES, salary = 950.00
Name = MILLER, salary = 1300.00
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 263
Database Compatibility for Oracle® Developers Guide
3.9 REF CURSORs and Cursor Variables
This section discusses another type of cursor that provides far greater flexibility than the
previously discussed static cursors.
3.9.1 REF CURSOR Overview
A cursor variable is a cursor that actually contains a pointer to a query result set. The
result set is determined by the execution of the OPEN FOR statement using the cursor
variable.
A cursor variable is not tied to a single particular query like a static cursor. The same
cursor variable may be opened a number of times with OPEN FOR statements containing
different queries. Each time, a new result set is created from that query and made
available via the cursor variable.
REF CURSOR types may be passed as parameters to or from stored procedures and
functions. The return type of a function may also be a REF CURSOR type. This provides
the capability to modularize the operations on a cursor into separate programs by passing
a cursor variable between programs.
3.9.2 Declaring a Cursor Variable
SPL supports the declaration of a cursor variable using both the SYS_REFCURSOR built-
in data type as well as creating a type of REF CURSOR and then declaring a variable of
that type. SYS_REFCURSOR is a REF CURSOR type that allows any result set to be
associated with it. This is known as a weakly-typed REF CURSOR.
Only the declaration of SYS_REFCURSOR and user-defined REF CURSOR variables are
different. The remaining usage like opening the cursor, selecting into the cursor and
closing the cursor is the same across both the cursor types. For the rest of this chapter our
examples will primarily be making use of the SYS_REFCURSOR cursors. All you need to
change in the examples to make them work for user defined REF CURSORs is the
declaration section.
Note: Strongly-typed REF CURSORs require the result set to conform to a declared
number and order of fields with compatible data types and can also optionally return a
result set.
3.9.2.1 Declaring a SYS_REFCURSOR Cursor Variable
The following is the syntax for declaring a SYS_REFCURSOR cursor variable:
name SYS_REFCURSOR;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 264
Database Compatibility for Oracle® Developers Guide
name is an identifier assigned to the cursor variable.
The following is an example of a SYS_REFCURSOR variable declaration.
DECLARE
emp_refcur SYS_REFCURSOR;
...
3.9.2.2 Declaring a User Defined REF CURSOR Type Variable
You must perform two distinct declaration steps in order to use a user defined REF
CURSOR variable:
 Create a referenced cursor TYPE
 Declare the actual cursor variable based on that TYPE
The syntax for creating a user defined REF CURSOR type is as follows:
TYPE cursor_type_name IS REF CURSOR [RETURN return_type];
The following is an example of a cursor variable declaration.
DECLARE
TYPE emp_cur_type IS REF CURSOR RETURN emp%ROWTYPE;
my_rec emp_cur_type;
...
3.9.3 Opening a Cursor Variable
Once a cursor variable is declared, it must be opened with an associated SELECT
command. The OPEN FOR statement specifies the SELECT command to be used to create
the result set.
OPEN name FOR query;
name is the identifier of a previously declared cursor variable. query is a SELECT
command that determines the result set when the statement is executed. The value of the
cursor variable after the OPEN FOR statement is executed identifies the result set.
In the following example, the result set is a list of employee numbers and names from a
selected department. Note that a variable or parameter can be used in the SELECT
command anywhere an expression can normally appear. In this case a parameter is used
in the equality test for department number.
CREATE OR REPLACE PROCEDURE emp_by_dept (
p_deptno emp.deptno%TYPE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 265
Database Compatibility for Oracle® Developers Guide
)
IS
emp_refcur SYS_REFCURSOR;
BEGIN
OPEN emp_refcur FOR SELECT empno, ename FROM emp WHERE deptno = p_deptno;
...
3.9.4 Fetching Rows From a Cursor Variable
After a cursor variable is opened, rows may be retrieved from the result set using the
FETCH statement. See Section 3.8.3 for details on using the FETCH statement to retrieve
rows from a result set.
In the example below, a FETCH statement has been added to the previous example so now
the result set is returned into two variables and then displayed. Note that the cursor