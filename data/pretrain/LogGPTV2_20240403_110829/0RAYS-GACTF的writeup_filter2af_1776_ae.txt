    a1[1]^=a1[9]
    if(a[1]!=0x12d):
        exit(0)
    a1[1]=flag[9]
    a1[9]=change[0]
    a1[1]^=a1[9]
    if(a[1]!=0x12f):
        exit(0)
    a1[1]=flag[10]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x139):
        exit(0)
    a1[1]=flag[11]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x10d):
        exit(0)
    a1[1]=flag[12]
    a1[9]=change[3]
    a1[1]^=a1[9]
    if(a[1]!=0xbb):
        exit(0)
    a1[1]=flag[13]
    a1[9]=change[1]
    a1[1]^=a1[9]
    if(a[1]!=0x8):
        exit(0)
    a1[1]=flag[14]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x10d):
        exit(0)
    a1[1]=flag[15]
    a1[9]=change[0]
    a1[1]^=a1[9]
    if(a[1]!=0x13f):
        exit(0)
    a1[1]=flag[16]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x13a):
        exit(0)
    a1[1]=flag[17]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x161):
        exit(0)
    a1[1]=flag[18]
    a1[9]=change[1]
    a1[1]^=a1[9]
    if(a[1]!=0x57):
        exit(0)
    a1[1]=flag[19]
    a1[9]=change[0]
    a1[1]^=a1[9]
    if(a[1]!=0x120):
        exit(0)
    a1[1]=flag[20]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x10d):
        exit(0)
    a1[1]=flag[21]
    a1[9]=change[0]
    a1[1]^=a1[9]
    if(a[1]!=0x13f):
        exit(0)
    a1[1]=flag[22]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x13f):
        exit(0)
    a1[1]=flag[23]
    a1[9]=change[3]
    a1[1]^=a1[9]
    if(a[1]!=0xb5):
        exit(0)
    a1[1]=flag[24]
    a1[9]=change[0]
    a1[1]^=a1[9]
    if(a[1]!=0x113):
        exit(0)
    a1[1]=flag[25]
    a1[9]=change[3]
    a1[1]^=a1[9]
    if(a[1]!=0xa0):
        exit(0)
    a1[1]=flag[26]
    a1[9]=change[0]
    a1[1]^=a1[9]
    if(a[1]!=0x121):
        exit(0)
    a1[1]=flag[27]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x10d):
        exit(0)
    a1[1]=flag[28]
    a1[9]=change[1]
    a1[1]^=a1[9]
    if(a[1]!=0x0b):
        exit(0)
    a1[1]=flag[29]
    a1[9]=change[2]
    a1[1]^=a1[9]
    if(a[1]!=0x139):
        exit(0)
    a1[1]=flag[30]
    a1[9]=change[0]
    a1[1]^=a1[9]
    if(a[1]!=0x173):
        exit(0)
    a1[1]=flag[31]
    a1[9]=change[1]
    a1[1]^=a1[9]
    if(a[1]!=0x46):
        exit(0)
    a1[1]=flag[32]
    a1[9]=change[3]
    a1[1]^=a1[9]
    if(a[1]!=0xad):
        exit(0)
    a1[1]=flag[33]
    a1[9]=change[3]
    a1[1]^=a1[9]
    if(a[1]!=0xad):
        exit(0)
加密的大概思路是先输入一个数，然后经过运算变化为四个用于加密的数字，第二次输入的flag和这四个数异或。第一个数字的输入有一个比较但是没办法逆出来，只能通过爆破的方法  
脚本如下：
    a1=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    for i in range(0,0xffffffffffff):
            a1[1]=i
            a1[9]=a1[1]
            a1[2]=0x0000000d
            a1[1]>>=0xd
            a1[1]^=a1[9]
            a1[9]=a1[1]
            a1[2]=0x00000009
            a1[1]>=0x13
            a1[1]^=a1[9]
            print(hex(i)+'-------------'+hex(a1[1]))
            if(a1[1]==0x26f8d100):
                    print("_______________________________________")
                    exit(0)
输入的数字经过动态调试可以看到，直接给出解密脚本：
    Change=[0x14c,0x3b,0x152,0xd6]
    Dst=[0x10b,0x7a,0x95,0x106,0x7d,0xad,0x12f,0x165,0x12d,0x12f,0x139,0x10d,0xbb,0x8,0x10d,0x13f,0x13a,0x161,0x57,0x120,0x10d,0x13f,0x13f,0xb5,0x113,0xa0,0x121,0x10d,0xb,0x139,0x173,0x46]
    Num=[0,1,3,2,1,3,0,2,0,0,2,2,3,1,2,0,2,2,1,0,2,0,2,3,0,3,0,2,1,2,0,1]
    flag=''
    for i in range(32):
        flag+=chr(Change[Num[i]]^Dst[i])
    print(flag)
###  wannaflag
找到与key判断相关的函数，过了判断他就会自己解密flag了。
照着顺序逆回去就是了，然后由于不知道最初SLOBYTE(Paint.fErase)%7的值，所以解密的最后就爆了。
exp:
    def ROR(i,index):
        tmp = bin(i)[2:].rjust(8,"0")
        for _ in range(index):
            tmp = tmp[-1]+tmp[:-1]
        return int(tmp,2)
    target = "4e ae 61 ba e4 2b 55 aa 59 fc 4d 2 17 6b 13 a1 41 fe 35 b b4 b 52 2f 46 cc 35 82 e5 88 50".split(" ")
    tmp1=[]
    for i in range(len(target)):
        tmp1.append(ROR(int(target[i],16),i))
    tmp2=""
    fxxk='\x41NNAWGALFYBKVIAHMXTFCAACLAAAAYK'
    for i in range(len(tmp1)):
        tmp2+=chr(tmp1[i]^ord(fxxk[i]))
    print tmp2
    for i in range(256):
        key=""
        for e in tmp2:
            key+=chr(ord(e)^i)
        print key
###  simulator：
一个查不出哪里来的.obj文件，看了计算机系统概论才知道是lc3模拟系统编译出来的obj，没有伪代码的逆向，让一个本来就很菜的re手在心里雪上加霜，一行一行逆出来伪代码后发现是从最后一位和倒数第二位进行了个可以看作异或的操作，然后依次类推倒数第二个和倒数第三个….伪代码就不贴了，最后的cipher是这里：
用爆破直接求就好了：
    a=[0x18,0x6C,0x0F,0x50,0x6C,0x6E,0x42,0x2C,0x2C,0x1E,0x0C,0x0D,0x00,0x33,0x3D,0x17,0x01,0x2B,0x3C,0x0C,0x02,0x1D,0x1C,0x09,0x11,0x11]
    flag=""
    for i in range(256):
        flag=chr(i)
        for each in a:
            flag+=chr(ord(flag[-1])^each)
        print(flag)
flag跑出来