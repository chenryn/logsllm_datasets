    using System.Runtime.InteropServices;
    using System.Windows;
    using WPFSyntaxTree.ViewModels;
    using static System.Console;
18.4 语义分析
语法API是非常强大的，可以获取源文件的结构信息。然而，它没有提供源文件是否
编译、变量的类型等信息。要得到这个信息，需要编译程序，这需要程序集引用的信息、
编译器选项和一组源文件。使用这些信息称为语义分析。在这里，可以使用符号和绑定
API。这些API提供了引用符号的名称和表达式信息（类型、名称空间、成员、变量）。
控制台应用程序示例提供了以下Hello, 
World！程序的语义，它不只定义了方法
Hello，还有一个变量hello（代码文件SemanticsCompilation /HelloWorld.cs）：
    using static System.Console;
    namespace SemanticsCompilation
    {
      // Hello World! Sample Program
      class Program
      {
        // Hello World! Sample Method with a variable
        public void Hello()
        {
        string hello = "Hello, World! ";
        WriteLine(hello);
        }
        static void Main()
        {
        var p = new Program();
        p.Hello();
        }
      }
    }
首先，使用语法API从树中检索Hello（）方法和hello变量的节点。使用LINQ查询，
从树中检索Hello方法的MethodDeclarationSyntax和hello变量的
VariableDeclarationSyntax（代码文件SemanticsCompilation/Program.cs）：
    string source = File.ReadAllText("HelloWorld.cs");
    SyntaxTree tree = CSharpSyntaxTree.ParseText(source);
    var root = (await tree.GetRootAsync()) as CompilationUnitSyntax;
    // get Hello method
    MethodDeclarationSyntax helloMethod = root.DescendantNodes()
        .OfType()
        .Where(m => m.Identifier.ValueText == "Hello")
        .FirstOrDefault();
    // get hello variable
    VariableDeclaratorSyntax helloVariable = root.DescendantNodes()
        .OfType()
        .Where(v => v.Identifier.ValueText == "hello")
        .FirstOrDefault();
18.4.1 编译
为了获得语义信息，需要编译代码。可以创建一个编译，调用CSharpCompilation类的
静态Create（）方法。这个方法返回一个CSharpCompilation实例，表示编译后的代码。需
要的参数是生成的程序集的名称。可选参数是语法树、程序集引用和编译器选项。也可以
通过调用方法来添加这些信息。示例代码通过调用AddReferences（）方法添加了一个程
序集引用，通过调用AddSyntaxTrees方法添加了语法树。通过调用WithOptions（）方法并
传递CompilationOptions类型的对象，可以配置编译器选项，但这里只使用默认选项（代
码文件SemanticsCompilation / Program. cs）：
    var compilation = CSharpCompilation.Create("HelloWorld")
      .AddReferences(
        MetadataReference.CreateFromFile(
        typeof(object).Assembly.Location))
      .AddSyntaxTrees(tree);
实际的编译器和数年前大学讲授的编译器构造是有区别的：程序不是在执行前只编译
一次，而需要编译多次。在代码编辑器中添加一些字符，如果编译出错，就需要给错误的
代码加上波浪线。出现这种行为，是因为执行了新的编译过程。使用CSharpCompilation对
象，进行小的修改，以使用前面编译中的缓存信息。编译器利用此功能高效地构建这个过
程。
使用AddReferences和AddSyntaxTrees可以添加语法树和引用；使用RemoveReferences
和RemoveSyntaxTrees删除它们。要产生编译的二进制文件，可以调用Emit方法：
    EmitResult result = compilation.Emit("HelloWorld.exe");
使用编译，可以检索编译过程的诊断信息。编译对象也给出一些符号的信息。例如，
可以检索Hello方法的符号：
    ISymbol helloVariableSymbol1 =
        compilation.GetSymbolsWithName(name => name == "Hello").FirstOrDefault();
18.4.2 语义模型
为了分析程序，访问与树中节点绑定的符号，可以创建一个SemanticModel对象，来
调用CSharpCompilation对象的GetSemanticModel（）方法（代码文件SemanticsCompilation
/ Program. cs）:
    SemanticModel model = compilation.GetSemanticModel(tree);
使用语义模型，现在可以把SyntaxNode节点传递给SemanticModel类的方法
AnalyzeControlFlow和AnalyzeDataFlow，来分析控制流和数据流。SemanticModel类还允
许获取表达式的信息。将树上的节点与符号关联起来，是示例程序中的下一个任务。这就
是所谓的绑定。GetSymbol和GetDeclaredSymbol（）方法返回节点的符号。在下面的代码
片段中，从节点helloVariable和helloMethod中检索符号：
    ISymbol helloVariableSymbol = model.GetDeclaredSymbol(helloVariable);
    IMethodSymbol helloMethodSymbol = model.GetDeclaredSymbol(helloMethod);
    ShowSymbol(helloVariableSymbol);
    ShowSymbol(helloMethodSymbol);
要查看可以从符号中访问的信息，定义了方法ShowSymbol，来访问Name、Kind、
ContainingSymbol和ContainingType属性。在IMethodSymbol中，也显示了MethodKind属
性：
    private static void ShowSymbol(ISymbol symbol)
    {
      WriteLine(symbol.Name);
      WriteLine(symbol.Kind);
      WriteLine(symbol.ContainingSymbol);
      WriteLine(symbol.ContainingType);
      WriteLine((symbol as IMethodSymbol)? .MethodKind);
      WriteLine();
    }
运行这个程序时，可以看到hello是局部变量，Hello方法是一个Method。其他的一些
符号类型是Field、Event、Namespace和Parameter。包含hello变量的符号是Hello（）方
法，在Hello（）方法中是Program类。两个检查符号的包含类型是Program。Hello（）方
法的符号也表明这是一个Ordinary方法。MethodKind枚举的其他值是Constructor、
Conversion、EventAdd、EventRemove、PropertyGet和PropertySet：
    hello
    Local
    SemanticsCompilation.Program.Hello()
    SemanticsCompilation.Program
    Hello
    Method
    SemanticsCompilation.Program
    SemanticsCompilation.Program
    Ordinary
18.5 代码转换
在遍历代码树，获取语义分析后，就该对代码进行一些修改了。代码树的一个重要方
面是，它是不可变的，因此不能被改变。相反，可以使用方法改变树中的节点，它总是返
回新节点和未改变的原始节点的叶子节点。
  注意： 代码树存储在不变的集合类中。这些集合参见第12章。
18.5.1 创建新树
下面的代码片段定义了一个Sample类，其方法使用小写的名字。这个类的公共方法应
该改为以大写字符开头（代码文件TransformMethods / Sample. cs）：
    namespace TransformMethods
    {
      class Sample
      {
        public void foo()
        {
        }
        public void bar()
        {
        }
        private void fooBar()
        {
        }
      }
    }
控制台应用程序的Main（）方法读取这个文件，并调用
TransformMethodToUppercaseAsync（代码文件TransformMethods / Program. cs）：
    static void Main()
    {
      string code = File.ReadAllText("Sample.cs");
      TransformMethodToUppercaseAsync(code).Wait();
    }
TransformMethodToUppercaseAsync首先从类型为MethodDeclarationSyntax的树中获取
第一个字母小写的所有公共节点。所有节点都添加到methods集合中。（这个查询在前面
的“查询节点”一节中讨论过）
    static async Task TransformMethodToUppercaseAsync(string code)
    {
      SyntaxTree tree = CSharpSyntaxTree.ParseText(code);
      SyntaxNode root = await tree.GetRootAsync();
      var methods = root.DescendantNodes()
        .OfType()
        .Where(m => char.IsLower(m.Identifier.ValueText.First()))
        .Where(m => m.Modifiers.Select(t => t.Value).Contains("public")).ToList()
;
      // etc.
    }
下面是有趣的部分。ReplaceNode是SyntaxNode的一个方法，调用它，替换存储在
methods集合中的所有MethodDeclarationSyntax节点。要替换一个节点，SyntaxNode类定义
了ReplaceNode（）方法。对于多个节点（在本例中），可以使用ReplaceNodes（）方
法。它的第一个参数接收应该更换的所有原始节点。在示例代码中，这是
MethodDeclarationSyntax节点的列表。第二个参数定义一个委托Func 。在示例代码中，TNode是MethodDeclarationSyntax类型，因为通过第一个
参数传递的集合是这种类型。委托实现为一个lambda表达式，把原始节点接收为第一个参
数，把新节点接收为第二个参数。在lambda表达式的实现代码中，通过
oldMethod.Identifier.ValueText访问原来的方法名称。对于这个名字，第一个字符改为大
写，写入变量newName。
为了创建新节点和令牌，可以使用类SyntaxFactory。SyntaxFactory是一个静态类，它
定义了成员，来创建不同类型的节点、令牌和trivia。在这里需要一个新的方法名——标
识符。要创建标识符，使用静态方法Identifier。传递新的方法名时，返回一个
SyntaxToken。现在可以给WithIdentifier（）方法使用该标识符。WithIdentifier是
MethodDeclarationSyntax的一个方法，给它传递变更，就返回一个新
MethodDeclarationSyntax。最后，从lambda表达式中返回这个新的
MethodDeclarationSyntax节点。接着，用根对象调用的ReplaceNodes（）方法返回一个新
的不可变集合，其中包含所有的变更：
    static async Task TransformMethodToUppercaseAsync(string code)
    {
      // etc.
      root = root.ReplaceNodes(methods, (oldMethod, newMethod) =>
      {
        string newName = char.ToUpperInvariant(oldMethod.Identifier.ValueText[0])
 +
        oldMethod.Identifier.ValueText.Substring(1);
        return newMethod.WithIdentifier(SyntaxFactory.Identifier(newName));
      });
      WriteLine();
      WriteLine(root.ToString());
    }
运行应用程序时，可以看到公共方法改变了，但私有方法不变：
    namespace TransformMethods
    {
      class Sample
      {
        public void Foo()
        {
        }
        public void Bar()
        {
        }
        private void fooBar()
        {
        }
      }
    }
为了转换源代码，最重要的部分是SyntaxFactory、WithXX和ReplaceXX方法。
因为节点是不可变的，所以不能更改节点的属性，此时需要SyntaxFactory类。这个类
允许创建节点、令牌或trivia。例如：
● MethodDeclaration（）方法创建一个新的MethodDeclarationSyntax。
● Argument（）方法创建一个新的ArgumentSyntax。
● ForEachStatement（）方法创建一个ForEachStatementSyntax。
可以使用从SyntaxFactory中创建的对象和方法来转换语法节点。例如，WithIdentifier
基于标识符变化的现有节点，创建一个新节点。在示例应用程序中，用
MethodDeclarationSyntax对象调用WithIdentifier。其他WithXX（）方法的几个示例如下：
● WithModifiers改变访问修饰符
● WithParameterList改变方法的参数
● WithReturnType改变返回类型
● WithBody改变方法的实现代码
所有的WithXX（）方法都只能改变节点的直接子节点。ReplaceXX（）方法可以改
变所有的后代节点。ReplaceNode取代单个节点；ReplaceNode（如示例应用程序所示）取
代一个节点列表。其他ReplaceXX（）方法有ReplaceSyntax、ReplaceToken和
ReplaceTrivia。
18.5.2 使用语法重写器
遍历语法节点时，CSharpSyntaxWalker是读取特定节点的一个有效方法。改变节点
时，有一个类似的选项：派生自CSharpSyntaxRewriter的类。以这种方式重写，是通过改
变节点，基于现有语法树建立新语法树的有效方式。
下面的代码片段用于转换。类Sample定义了完整的Text和X属性，它们应该转换为自
动实现的属性。类的其他成员不应该改变（代码文件SyntaxRewriter / Sample. cs）：
    namespace SyntaxRewriter
    {
      class Sample
      {
        // these properties can be converted to auto-implmenented properties
        private int _x;
        public int X
        {
        get { return _x; }
        set { _x = value; }
        }
        private string _text;
        public string Text
        {
        get { return _text; }
        set { _text = value; }
        }
        // this is already a auto-implemented property
        public int Y { get; set; }
        // this shouldn't be converted
        private int _z = 3;
        public int Z
        {
        get { return _z; }
        }
      }
    }
要改变语法节点，类AutoPropertyRewriter派生于基类CSharpSyntaxRewriter。在重写
器中访问符号和绑定信息时，SemanticModel需要传递给重写器的构造函数（代码文件
SyntaxRewriter/AutoPropertyRewriter.cs）：
    class AutoPropertyRewriter: CSharpSyntaxRewriter
    {
      private readonly SemanticModel _semanticModel;
      public AutoPropertyRewriter(SemanticModel semanticModel)
      {
        _semanticModel = semanticModel;
      }
      // etc.
基类CSharpSyntaxRewriter为不同的语法节点类型定义了多个虚拟VisitXX方法。在这
里重写了方法VisitPropertyDeclaration（）。重写器在树中发现一个属性时，调用该方
法。在这样一个方法中，可以通过改变这个节点（包括其子节点），来影响重写的结果。
该方法的实现代码首先检查是否应该调用HasBothAccessors辅助方法来改变属性。如果这
个方法返回true，就通过调用ConvertToAutoProperty来转换属性，并返回转换后的属性和
方法。如果属性不匹配，就返回它，保留它在树中的状态：
    public override SyntaxNode VisitPropertyDeclaration(
        PropertyDeclarationSyntax node)
      {
        if (HasBothAccessors(node))
        {
        // etc.
        PropertyDeclarationSyntax property = ConvertToAutoProperty(node)
          .WithAdditionalAnnotations(Formatter.Annotation);
        return property;
        }
        return node;
      }
另一个类CSharpSyntaxRewriter提供了近200个可以重写的方法。例如
VisitClassDeclaration改变类的声明，VisitTryStatement、VisitCatchClause和
VisitCatchDeclaration、VisitCatchFilterClause处理异常。在示例代码中，现在只对改变属
性感兴趣；因此重写方法VisitPropertyDeclaration（）。