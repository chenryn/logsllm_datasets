for each node θ ∈ P ath(BT, η), C can retrieve Hθ if it was deﬁned.
Otherwise, it chooses Hθ = (H1,θ, H2,θ) R←− G2 and stores Hθ in the
node θ. C chooses rθ randomly from Zp, and computes the private
key according to θ:
1. If θ∈ P ath(BT, η∗):
2 )rθ , K2,θ = H2,θ · (gw2
K1,θ = H1,θ · (gw1
K3,θ = grθ
K5,θ = ((gw2
2 )ktag · gu1,1
/(gu2,0
2. If θ /∈ P ath(BT, η∗): K1,θ = K1·(gw1
2 , K4,θ = ((gw1
2 )ktag · gu2,1
2 )rθ ,
/(gu1,0
2
2 )rθ ·H1,θ, K2,θ = K2·(gw2
)ID)rθ , ktag := ktag.
)ID)rθ ,
2
2
2
2 )rθ ·
H2,θ,
K3,θ = K3 · grθ
K5,θ = K5·((gw2
2 , K4,θ = K4·((gw1
2 )ktag · gu2,1
/(gu2,0
2
2
2 )ktag · gu1,1
2
/(gu1,0
2
)ID)rθ ,
)ID)rθ , ktag := ktag.
.
2
2
2 (g ˆz1
2 (g ˆz2
2 )T )s(gw2
2 )T )s(gw1
2 )r, DK3 = gr
∗ Decryption key query: If this is a decryption key query for an identity
ID and time T , C selects random exponents s, r R←− Zp and creates
the decryption DKID,T as: DK1 = K1 · (gz1
2 )r, DK2 =
K2 · (gz2
3 = gs
2,
DK4 = gr(u1,1−(ID)·u1,0+ktag·w1)
2, DK(cid:48)
, DK5 = gr(u2,1−(ID)·u2,0+ktag·w2)
• Case i = i∗: C identiﬁes this identity ID as the target identity ID∗ and
stores ID∗ in the leaf node η∗, which is pre-assigned in the Setup phase.
C also assigns ID to a random tag: ktag ∈ Zp.
∗ Private key query: If this is a private key query for an identity ID,
for each node θ ∈ P ath(BT, η∗), C can retrieve Hθ if it was deﬁned.
Otherwise, it chooses Hθ = (H1,θ, H2,θ) R←− G2 and stores Hθ in the
node θ. C further chooses rθ randomly from Zp, and computes:
K1,θ = H1,θ · (gw1
2 , ktag := ktag,
/(gu2,0
K4,θ = ((gw1
∗ Decryption key query: If this is a decryption key query for the i-
dentity ID = ID∗ and time T (cid:54)= T ∗, C selects random exponents
s, r R←− Zp and creates the decryption DKID,T as:
DK1 = (gz1
2 )rθ , K2,θ = H2,θ · (gw2
2 )ktag · gu1,1
2 )ktag · gu2,1
)ID)rθ , K5,θ = ((gw2
2 )rθ , K3,θ = grθ
/(gu1,0
2
2
2
2
1
β
2 )
1
β
DK2 = (gz2
2 )
DK4 = gr(u1,1−(ID)·u1,0+ktag·w1)
2 )T )s(gw1
2 )T )s(gw2
2 (g ˆz1
2 (g ˆz2
2 )r(g
1
1+T ˆz(cid:48)
− z(cid:48)
T−T ∗ ,
− z(cid:48)
2+T ˆz(cid:48)
T−T ∗ , DK3 = gr
3 = gs
2,
, DK5 = gr(u2,1−(ID)·u2,0+ktag·w2)
2 )r(g
2, DK(cid:48)
• Case i > i∗: C does the same process as in the case of i  i∗: C does the same process as in the case of i < i∗.
2 )T )s(gw1
2 )T )s(gw2
2 (g ˆz1
2 (g ˆz2
2, DK(cid:48)
2 )r(g
2 )r(g
2
2
1
2
.
24
– If this is an update key query from a type-a-0 adversary A, C ﬁrst run-
s KUNode(BT, RL, T ) algorithm with the current revocation list RL and
time T . For each node θ ∈ KUNode(BT, RL, T ), C can retrieve Hθ if it
was deﬁned. Otherwise, it chooses Hθ = (H1,θ, H2,θ) R←− G2 and stores
R←− Zp, and computes: KU1,θ =
Hθ in the node θ. Then it chooses sθ
2,θ , KU3,θ = gsθ
2 (g ˆz1
(gz1
2 .
Finally, C stores and outputs the update key KUT to A with:
KUT = {KU1,θ, KU2,θ, KU3,θ}θ∈KUNode(BT,RL,T ).
– If this is a revocation key query for an identity to be revoked ID and
a revocation time T , then C updates the revocation list RL by running
Revoke(ID, T, RL, ST ) algorithm.
1,θ , KU2,θ = (gz2
2 )T )sθ H−1
2 )T )sθ H−1
2 (g ˆz2
ID∗ to the challenger in the IND-CPA game of the IBE scheme(cid:81)
from the challenger of (cid:81)
1 is a random element from the key space K of(cid:81)
Key Extraction Phase 1 for Type-b adversary: In this case, i∗ = q1 + 1.
For a Type-b adversary A, there is no need for C to keep an integer i to count
the number of queries from A, as the target identity ID∗ that A issues is only
after the challenge phase, which is already known by C. Similarly as the proof
above, we have to classify Type-b adversary into Type-b-1 adversary and Type-
b-0 adversary, depending on the private key of the challenge identity ID∗ has
been queried or not. A is said to be a type-b-1 adversary if the private key of
ID∗ has been queried (in key extraction phase 2). Otherwise, A is a type-b-0
adversary if A has never queried the private key SKID∗ . For all the of queries
from a Type-b adversary, including the privacy key, update key query, decryption
key query and revocation key query, C acts almost identical to those in the key
extraction phase 1 for a Type-a adversary, so they are omitted here.
Challenge: Now A sends the challenge identity ID∗ and time T ∗ to C. We
assume that C’s guess is right. If the guess is wrong, C terminates the simula-
tion and outputs a random bit β(cid:48) ∈ {0, 1}. C then sends the challenge identity
IBE and gets
(Hdr∗, K∗) with Hdr∗ = (C∗
0 ) is obtained
0 ) =
IBE. C sets
Encap(S∗), and K∗
C1 = C∗
3 , ctag = ctag∗ and sends
(Hdr = (C1,C2,C3,C4,ctag),K∗) to A as the challenge header and session key pair.
Key Extraction Phase 2: Same as Key Extraction Phase 1.
Guess: Finally, A outputs a guess β(cid:48) ∈ {0, 1}, and C will transfer it to the
We note that during the simulation, C can access to the secret key generation
oracle KeyGenIBE(·) only for identities that ID (cid:54)= ID∗. A can query the private
key for ID∗ or the decryption key related to ID∗ related to time T (cid:54)= T ∗. In
this case, C can also simulate the correct private key SKID∗ or decryption key
DKID∗,T , the distribution of which is identical to those in the real experiment.
Furthermore, we can prove that the distribution of all transcriptions between A
and C is same as those generated by real algorithm. The analysis is very similar
to the proof of Theorem 3, and is omitted here.
(cid:117)(cid:116)
challenger in the IND-CPA game of the IBE scheme(cid:81)
IBE by running Encap algorithm with (Hdr∗, K∗
1 )z(cid:48)
3 , ctag∗). Note that (Hdr∗, K∗
This completes the proof of Theorem 4.
1 , C2 = C∗
2 , C3 = (C∗
2, C4 = C∗
1 , C∗
2 , C∗
IBE.
1+T ∗ ˆz(cid:48)
1 ·(C∗
2 )z(cid:48)
2+T ∗ ˆz(cid:48)
25
6 Experimental and Evaluation
To demonstrate its practicality, we implement the proposed revocable IBBE
scheme in Python 3.3.1 using the Charm 0.43 framework [3], a programming
framework for cryptographic primitives. For the Type-3 pairings, we choose the
default Miyaji-Nakabayashi-Takano elliptic curve group [26] with base ﬁeld size
224 bits (MNT224) to establish our scheme, which can provide 96-bit security
CoreTM i3-4010U
level [39]. All programs are running on a laptop with Intel
PI:EMAIL and 4.0GB RAM using operating system 32-bit Ubuntu 13.04.
(cid:114)
Fig. 2. Average time cost of all algorithms for diﬀerent choices of m and d
Figure 2 and Figure 3 demonstrates the average time costs of all kinds of