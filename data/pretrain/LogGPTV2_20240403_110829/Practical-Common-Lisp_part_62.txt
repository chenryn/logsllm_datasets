www.TopSage.com
---
## Page 310
这个新版本的unsigned-integer和旧版本非常像。如下所示：
类型id3-tag-size。除了bits-per-byte被用在旧版本的所有硬编码了数字8的位置上之外，
一个参数bits-per-byte，那么你就可以用短形式的define-binary-type直接定义出一个新
integer那样进行读写。这种相似性表明，假如你为已有的unsigned-integer二进制类型添加
但如果你将标签大小编码成一个正规的unsigned-integer的话，就有可能会出问题了。为了避
对于MP3解码器来说有另外的特殊含义。ID3头部的其他字段也都不允许含有这样的字节序列，
8的倍数来编码，因为一个ID3标签中不能含有在字节#xff后跟一个前三位为1的字节的模式，这
的整数分别定义一个类型：
define-binary-type来定义特定的类型。通用的unsigned-integer类型如下所示：
免这种可能性，这个大小被编码成只使用每个字节的底下7位，并让最上面一位总是零。
①ID3头部后跟的帧数据也可能潜在地含有这一不合法的序列。可以使用一种不同的模式来避免其出现，即通过打
这样，除了你传给LDB的字节说明符的大小应当是7而不是8之外，它可以像unsigned-
(define-binary-type id3-tag-size() （unsigned-integer :bytes 4:bits-per-byte 7))
那么id3-tag-size的定义就很简单了。
(define-binary-type unsigned-integer (bytes bits-per-byte)
另一个你需要用来读写的类型是用在头部中的28位值。这个值使用28位而非诸如32位这样的
(define-binary-typeu1
现在，你可以使用短形式的define-binary-type像下面这样为ID3格式里用到的每种大小
(define-binary-type unsigned-integer (bytes)
ID3用到了编码在一到四个字节中的无符号整数。如果你第一次编写一个通用的unsigned-
开标签头上的某个标记位来控制。本章中的代码并不考虑该标记位被设定的可能性，它在实际上也很少被用到。
(define-binary-type u3
(define-binary-type
（:writer(out
(:reader
(:writer (out value)
(:reader（in)
(1oop
do (write-byte (ldb (bytebits-per-byte low-bit)value)out))))
finally
for 1ow-bit downfrom（*bits-per-byte （1-bytes）)
do（write-byte (ldb （byte8low-bit)value)out))))
finally（return value)))
(setf（1db（byte8low-bit）value)
(in)
(return value)))
value)
E
downfrom（*8（1-bytes））to0by8
()(unsigned-integer:bytes
(unsigned-integer:bytes 3))
(unsigned-integer
www.TopSage.com
(read-byte in))
:bytes
2）
1）
(read-bytein))
toObybits-per-byte do
25.3整数类型
---
## Page 311
字符串数据分界方式排列组合而成。
串中字符的数量相同。
字符串处在一个总长度已知的符合结构的结尾处。不过需要注意的是，字节的数量不一定与字符
定读取多少个字节的位置上，要么是因为那个位置上的字符串总是具有相同的长度，要么是因为
了前一章提到的两种策略一
的Lisp或者你不会处理任何含有超出ISO 8859-1范围的字符的文件。
在试图把代码点转化成一个Lisp字符时会遇到错误。目前，先假设你正在使用一个基于Unicode
如果你试图处理一个用到Unicode字符串并且其中含有代码点超出255的字符的ID3标签，那么你
8859-1，那么你只能把前255个Unicode字符表示成Lisp字符。换句话说，在这样的Lisp实现里，
CODE-CHAR和CHAR-CODE函数来转化两个编码中的这些值。不过，如果你的Lisp仅支持ISO
255之间的所有值在ISO 8859-1和Unicode中都映射到相同的字符上，所以你可以使用Lisp的
做这件事的代码。难点在于如何将这些数值转化成Lisp字符对象。
标记。
字符串来说，ID3使用带有前导字符序标记的UCS-2编码方式。?我将很快讨论什么是一个字节序
中都映射到相同的字符上。（因此，Unicode也是ASCII的一-个超集。）
8859-1的超集，正如ISO8859-1是ASCII的超集那样。从0到255的代码点在ISO8859-1和Unicode
Unicode是设计用于为世界上所有语言的几乎每一个字符提供代码点的字符编码。Unicode是ISO
到127之间的代码点映射到相同的字符上,但ISO8859-1还提供了最大到255的其余代码点的映射，
字符编码，它用西欧语言中用到的字符扩展了ASCII。换句话说，在ASCII和ISO 8859-1中，从0
须考虑的一些问题，例如字符编码和字符编码方式之间的区别。
25.4
考虑了所有这些特征，ID3格式使用四种方式来读写字符串一
你所使用的Lisp实现很可能使用了Unicode或ISO 8859-1作为其内部字符编码。而由于从0到
ID3使用两种不同的字符编码ISO8859-1和Unicode。ISO 8859-1也称为Latin-1，是一种八位
294
① 在ID3v2.4中，UCS-2被替换成几乎等价的UTF-16，并且UTF-16BE和UTF-8被增加为附加的编码方式。
读写这两种编码方式不是问题，不过是以不同的格式读写无符号整数罢了，而你已经写好了
由于ISO 8859-1是一个8位字符编码，它使用每字符一个字节的方式进行编码。对于Unicode
ID3格式中另一个常用的基本类型是字符串。前一章讨论了处理二进制文件中的字符串时必
你还需要改变u1到u4的定义，像下面这样明确指定每个字节里读取8位：
(define-binary-type
(define-binary-type u3
(define-binary-type u1 
字符串类型
第25章
实践：ID3 解析器
u4
一一些字符串是采用空字符结尾的，而另一些字符串出现在你可以决
（）
()(unsigned-integer :bytes 1 :bits-per-byte
(unsigned-integer :bytes 4 :bits-per-byte 8))
www.TopSage.com
(unsigned-integer :bytes 3 :bits-per-byte 8)
一由两种字符编码方式和两种
8)
---
## Page 312
的代码，检查你所读写字符的代码点。
所示：
一个iso-8859-1-char二进制类型。这也给了你一个很好的机会用来放置一些用于一致性检查
来读取一个关于其类型的参数。这种技术你在本章里还会多次看到。
类型利用的read-value和write-value的类型参数是由另外的代码提供的，你可以让字符类型
始，一种用于读取指定（字符）长度的字符串，而另一种用来读取带有终止符的字符串。这两种
现在，使用define-binary-type的短形式来定义ISO 8859-1字符串类型就很简单了，如下
(define-binary-type iso-8859-1-char ()
有了这些类型，读取ISO 8859-1字符串就很容易了。由于传递给generic-string的read-
(define-binary-type generic-string (length character-type)
很明显，读写字符串的很多业务逻辑将会非常相似。因此，你可以从定义两种二进制类型开
(define-binary-type iso-8859-1-terminated-string (terminator)
(ad<-raaoe1euo rozeutuan) 6utras-pazeuturaa-otrauan ad-areuta-autsap)
(generic-terminated-string :terminator terminator
(:writer (out char)
(:reader (in)
(let ((code (char-code char)))
{loop for char across string
(with-output-to-string (s)
(let ((string (make-string length)))
(loop for char 
(write-value character-type out (char string i)))))
string))
(or
(dotimes (i
(setf (char string i) (read-value character-type in)))
((((apoo "paroddns nou p apoo xaaoexeuo: xotxa) 
((code
(code-char code)
char code))))）
(write-byte code out)
finally (write-value character-type out terminator))))
error
do
"Illegal character for iso-8859-1 encoding: character: ^c with code: ^d"
(write-value character-type out char)
intil
(read-byte in)/)
length)
(char= char terminator) do (write-char char s))))
length)
(read-value character-type in)
:character-type 'iso-8859-1-char))
www.TopSage.com
25.4字符串类型
295
---
## Page 313
数转化成需要读取的字符数。
哪个UCS-2字符变体。其余唯一的亮点是，你需要根据字节序标记将代表字节个数的1ength参
序标记，并用这个标记来决定究竟向read-value和write-value的character-type参数传递
然后你需要一个函数，它基于字节序标记的值来返回具体所使用的字符类型。
其中的swap-bytes函数可以像下面这样来定义，它利用了LDB函数可被SETF和ROTATEF的特点：
版本的一致性检查代码，因此你可以像下面这样来定义一个参数化的二进制类型：
big-endian或little-endian的字符。这样，你将需要两个不同的UCS-2字符类型。但是你只需要一个
#xfeff构成。当读取一个UCS-2字符串时，你需要读取这个字节序标记，然后根据其值来读取
--）-）
296
现在，你可以定义UCS-2编码字符串的长度和终止符定界的字符串类型了。它们将读取字节
读取UCS-2字符串只是稍微复杂一些。其复杂性源自你可以用两种方式来编码一个UCS-2代
(define-binary-type ucs-2-string (length)
-a-) ---s )
(define-binary-type ucs-2-char-little-endian () (ucs-2-char :swap t))
(define-binary-type ucs-2-char-big-endian () (ucs-2-char :swap nil))
使用ucs-2-char，你可以定义两个用作通用字符串函数的character-type参数的字符类型。
(defun swap-bytes (code)
(define-binary-type ucs-2-char (swap)
(:reader (in)
(ecase byte-order-
code)
(rotatef (ldb (byte 8 0) code) (ldb (byte 8 8) code))
(assert (<= code #xffff))
(:writer (out char)
(let ((byte-order-mark (read-value 'u2 in))
(#xfffe 'ucs-2-char-little-endian)))
(let ((code (char-code char)))
第 25章
(read-value
(write-value 'u2 out code))))
(when swap (setf code (swap-bytes code)))
(when swap (setf code
((((xrew-rapio-aq ad-reuo-2-son) aaa-rasoexeuo:
:length characters
'generic-string in
(error
'ucs-2-char-big-endian)
 char
实践：ID3解析器
code))
www.TopSage.com
(/ length 2))))
 (swap-bytes code)))
---
## Page 314
为了在一个文件的其他位置上找到ID3标签，你可以在文件中搜索字节序列73、68、51（也即字
id3-tag。不过，请注意ID3标签不一定出现在一个文件的开始处，尽管目前它们总是这样的。
含有哪些版本的ID3标签。首先你编写一个函数，从一个文件的开始处读取刚刚定义的这个
签的整个头部的类只是将已有的成果合并在一起罢了。
其后跟帧数据和补白。由于你已经定义了读写头部所有字段的二进制类型，定义读取一个ID3标
整体和单独的顿了。
25.5
① ID3格式的2.4版也支持在一个标签的结尾处放置一个脚标，这使得一个附加在文件结尾处的标签可以更容易地被
如果你手头有一些MP3文件的话，那么你可以测试目前的这些代码，同时也看看你的MP3都
基本类型定义完成以后，就可以切换到更高层次的视角并开始定义二进制类来表示ID3标签
(define-binary-class id3-tag {)
ID3 size
ID3  flags
ID3/file identifier
如果你是首次接触ID3v2.2规范，那么你将看到标签的基本结构是如下所示的头部：
D3
(define-binary-type ucs-2-terminated-string (terminator)
找到。