# APK File Infection on Android Systems

**Author: Bob Pan**  
**Title: Mobile Security Research Engineer**  
**Date: July 27, 2012**

## About the Author
Who is Bob?  
Bob Pan is a seasoned professional in mobile security, specializing in research and engineering.

## Industry Trends in Mobile Security
### Malware on App Stores
- **Increasing Threats**: There has been a noticeable rise in malware found on app stores.
- **Google's Perspective**: Chris Di Bona from Google, in November 2011, stated that antivirus companies are exploiting user fears to sell unnecessary protection software for Android, RIM, and iOS. He emphasized that the barriers to spreading malware from one device to another are significant and that a virus working on one device will not automatically spread to others.
- **Vendor Response**: Major vendors have app markets, and they regularly identify and remove malicious apps.

### Google's Bouncer
- **Effectiveness**: Googleâ€™s Bouncer is a system designed to detect and remove malicious apps from the Google Play Store. Its effectiveness is a topic of ongoing debate.
- **Malware Threat**: According to Trend Micro, the threat of Android malware is expected to grow significantly in 2012.

## The Anatomy of an APK File
### Components of an APK File
- **AndroidManifest.xml**: Contains metadata such as package name, version, activities, and services.
- **classes.dex**: Contains all the code for the Dalvik Virtual Machine (DVM).
- **META-INF/**: Contains the certificate and signature. APK files are essentially signed ZIP files.

### The AndroidManifest File
- **Format**: Google's binary XML format, which is not well-documented.
- **Tools**: Tools for reading binary XML files are readily available, but tools for writing them are limited.

### The Dex File
- **Dalvik Executable Format**: Well-documented with many modification tools available, such as asmdex, smali/baksmali, and Dexmaker.
- **Memory Limitation**: APKs can only use 16 to 32 MB of memory, so a separate Dalvik VM should be started.

### The META-INF/ Folder
- **Certificate & Signature**: Well-documented with many creation tools available, such as jarsigner from JDK and signapk from the Android source.
- **Modifications**: Minor modifications are necessary to run on an Android device.

## Infection Demonstration
### Architecture of the Virus
- **Payload**: The core malicious code.
- **Loader**: The component responsible for injecting and executing the payload.

### Infection Process
1. **Locate Uninfected APK File**: The loader identifies an uninfected APK file.
2. **Inject Part A**: Injects the first part of the payload into classes.dex and AndroidManifest.xml.
3. **Copy Itself**: Copies itself into the APK file.
4. **Sign the APK File**: Signs the modified APK file.
5. **Prompt User Installation**: Prompts the user to install the modified APK file.
6. **Extract & Load Part B**: Extracts and loads the second part of the payload.
7. **Initiate Part B**: Executes the second part of the payload.

### Infection Cycle
1. **Virus Begins**: The infection process starts.
2. **Part A Begins**: The first part of the payload is executed.
3. **Part B Begins**: The second part of the payload is executed.
4. **APK Infected**: The APK file is now infected and can potentially infect other devices.

## Conclusion
Thank you for your attention!  
Feel free to contact me anytime at [Your Email Address].

---

This revised version aims to provide a more structured, clear, and professional presentation of the content.