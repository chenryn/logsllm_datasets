When converting `numpy.datetime64` with nanosecond (ns) or attosecond (as) precision to `datetime.datetime`, the result is an integer rather than a `datetime` object. This occurs because `datetime.datetime` does not support nanoseconds or finer resolutions (see related issue).

Numpy should either round the value to the nearest supported precision or raise an error, but instead, it silently returns an integer. Here are some examples:

```python
import numpy
import datetime

# Microsecond precision: conversion works as expected
In [186]: numpy.datetime64("1985-08-13", "us").astype(datetime.datetime)
Out[186]: datetime.datetime(1985, 8, 13, 0, 0)

# Nanosecond precision: conversion results in an integer
In [187]: numpy.datetime64("1985-08-13", "ns").astype(datetime.datetime)
Out[187]: 492739200000000000

# Attosecond precision: conversion also results in an integer
In [189]: numpy.datetime64("1985-08-13", "as").astype(datetime.datetime)
Out[189]: -8200712707674996736
```

This behavior can lead to unexpected results and should be handled carefully when working with high-precision time data.