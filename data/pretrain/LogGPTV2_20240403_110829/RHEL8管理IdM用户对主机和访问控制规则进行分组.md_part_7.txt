:::
::: orderedlist
**验证步骤**
1.  以 `idm_user`{.literal} 帐户登录主机，并使用智能卡进行身份验证。
    ``` literallayout
    [root@idmclient ~]# ssh -l PI:EMAIL localhost
    PIN for smart_card
    ```
2.  以智能卡用户身份验证您有一个票据授予票据。
    ``` literallayout
    [idm_user@idmclient ~]$ klist
    Ticket cache: KEYRING:persistent:1358900015:krb_cache_TObtNMd
    Default principal: PI:EMAIL
    Valid starting       Expires              Service principal
    02/15/2021 16:29:48  02/16/2021 02:29:48  krbtgt/PI:EMAIL
    	renew until 02/22/2021 16:29:44
    ```
3.  显示允许 `idm_user`{.literal} 帐户执行的 `sudo`{.literal} 规则。
    ``` literallayout
    [idm_user@idmclient ~]$ sudo -l
    Matching Defaults entries for idmuser on idmclient:
        !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin,
        env_reset, env_keep="COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS",
        env_keep+="MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE",
        env_keep+="LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES",
        env_keep+="LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE",
        env_keep+="LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY KRB5CCNAME",
        secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin
    User idm_user may run the following commands on idmclient:
        (root) /usr/sbin/reboot
    ```
4.  使用 `sudo`{.literal} 重新启动计算机，而不指定密码。
    ``` literallayout
    [idm_user@idmclient ~]$ sudo /usr/sbin/reboot
    ```
:::
::: itemizedlist
**其它资源**
-   [为智能卡验证配置身份管理](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_smart_card_authentication/index#configuring-idm-for-smart-card-auth_managing-smart-card-authentication){.link}
-   [Kerberos
    认证指示符](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/managing-kerberos-ticket-policies_configuring-and-managing-idm#kerberos-authentication-indicators_managing-kerberos-ticket-policies){.link}
-   [使用 IdM Web UI 向 IdM 客户端上的 IdM 用户授予 sudo
    访问权限](#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#using-IdM-Web-UI-to-grant-sudo-access-to-an-IdM-user-on-an-IdM-client_granting-sudo-access-to-an-IdM-user-on-an-IdM-client "使用 IdM Web UI 向 IdM 客户端上的 IdM 用户授予 sudo 访问权限"){.link}
-   [使用 CLI 向 IdM 客户端上的 IdM 用户授予 sudo
    访问权限](#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#proc_granting-sudo-access-to-an-idm-user-on-an-idm-client-using-the-cli_granting-sudo-access-to-an-IdM-user-on-an-IdM-client "使用 CLI 向 IdM 客户端上的 IdM 用户授予 sudo 访问权限"){.link}。
-   `pam_sss_gss(8)`{.literal} man page
-   `sssd.conf(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#ref_sssd-options-controlling-gssapi-authentication-for-pam-services_granting-sudo-access-to-an-IdM-user-on-an-IdM-client}SSSD 选项控制 PAM 服务的 GSSAPI 身份验证 {.title}
:::
您可以在 `/etc/sssd/sssd.conf`{.literal} 配置文件中使用以下选项来调整
SSSD 服务中的 GSSAPI 配置。
::: variablelist
[pam_gssapi_services]{.term}
:   默认情况下，禁用带有 SSSD 的 GSSAPI
    身份验证。您可以使用此选项指定允许使用
    `pam_sss_gss.gss.so`{.literal} PAM 模块尝试 GSSAPI 身份验证的 PAM
    服务逗号分隔列表。要明确禁用 GSSAPI 身份验证，将这个选项设置为
    `-`{.literal}。
[pam_gssapi_indicators_map]{.term}
:   这个选项只适用于 Identity
    Management(IdM)域。使用这个选项列出授予服务 PAM 访问权限所需的
    Kerberos 身份验证指示符。对的格式必须是
    `: __`{.literal}。
    有效的验证指示符为：
    ::: itemizedlist
    -   `OTP`{.literal} 用于双因素验证
    -   `用于`{.literal} RADIUS 身份验证的 radius
    -   `用于`{.literal} PKINIT、智能卡或证书身份验证的 PKINIT
    -   `强化强化`{.literal} 的密码
    :::
[pam_gssapi_check_upn]{.term}
:   默认启用这个选项，并将其设置为
    `true`{.literal}。如果启用这个选项，SSSD 服务要求用户名与 Kerberos
    凭证匹配。如果为 `false`{.literal}，`pam_ss_gss.so`{.literal} PAM
    模块将验证能够获取所需服务票据的每个用户。
:::
::: title
**示例**
:::
以下选项为 `sudo 和 sudo`{.literal} `-i`{.literal} 服务启用 Kerberos
身份验证，要求 `sudo`{.literal}
用户通过一次性密码进行身份验证，并且用户名必须与 Kerberos
主体匹配。由于这些设置位于 `[pam]`{.literal} 部分中，因此适用于所有域：
``` literallayout
[pam]
pam_gssapi_services = sudo, sudo-i
pam_gssapi_indicators_map = sudo:otp
pam_gssapi_check_upn = true
```
您还可以在单独的 `[domain]`{.literal} 部分中设置这些选项，以覆盖
`[pam]`{.literal} 部分中的任何全局值。以下选项在每个域中应用不同的
GSSAPI 设置：
::: variablelist
[`idm.example.com`{.literal} 域]{.term}
:   ::: itemizedlist
    -   为 `sudo 和 sudo`{.literal} `-i`{.literal} 服务启用 GSSAPI
        身份验证。
    -   需要为 `sudo`{.literal} 命令验证证书或智能卡验证器。
    -   需要 `sudo -i`{.literal} 命令的一次性密码身份验证器.
    -   强制实施匹配的用户名和 Kerberos 主体.
    :::
[对于 `ad.example.com`{.literal} 域]{.term}
:   ::: itemizedlist
    -   仅为 `sudo`{.literal} 服务启用 GSSAPI 身份验证。
    -   不要强制匹配用户名和主体。
    :::
:::
``` literallayout
[domain/idm.example.com]
pam_gssapi_services = sudo, sudo-i
pam_gssapi_indicators_map = sudo:pkinit, sudo-i:otp
pam_gssapi_check_upn = true
...
[domain/ad.example.com]
pam_gssapi_services = sudo
pam_gssapi_check_upn = false
...
```
::: itemizedlist
**其它资源**
-   [Kerberos
    认证指示符](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/managing-kerberos-ticket-policies_configuring-and-managing-idm#kerberos-authentication-indicators_managing-kerberos-ticket-policies){.link}
:::
:::
::: section
::: titlepage
# []{#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#proc_troubleshooting-gssapi-authentication-for-sudo_granting-sudo-access-to-an-IdM-user-on-an-IdM-client}sudo 的 GSSAPI 身份验证故障排除 {.title}
:::
如果您无法使用 IdM 的 Kerberos ticket 对 `sudo`{.literal}
服务进行身份验证，请使用以下情况对您的配置进行故障排除。
::: itemizedlist
**先决条件**
-   您已为 `sudo`{.literal} 服务启用了 GSSAPI 身份验证。[请参阅在 IdM
    客户端中为 sudo 启用 GSSAPI
    身份验证](#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#proc_enabling-gssapi-authentication-for-sudo-on-an-idm-client_granting-sudo-access-to-an-IdM-user-on-an-IdM-client "在 IdM 客户端中为 sudo 启用 GSSAPI 身份验证"){.link}。
-   您需要 `root`{.literal} 权限来修改 `/etc/sssd/sssd.conf`{.literal}
    文件和 `/etc/pam.d/`{.literal} 目录中的 PAM 文件。
:::
::: itemizedlist
**流程**
-   如果您看到以下错误，Kerberos
    服务可能无法根据主机名为服务票据解析正确的域：
    ``` literallayout
    Server not found in Kerberos database
    ```
    在这种情况下，将主机名直接添加到 `/etc/krb5.conf`{.literal} Kerberos
    配置文件中的 `[domain_realm]`{.literal} 部分：
    ``` literallayout
    [idm-user@idm-client ~]$ cat /etc/krb5.conf
    ...
    [domain_realm]
     .example.com = EXAMPLE.COM
     example.com = EXAMPLE.COM
     server.example.com = EXAMPLE.COM
    ```
-   如果您看到以下错误，则没有任何 Kerberos 凭证：
    ``` literallayout
    No Kerberos credentials available
    ```
    在这种情况下，使用 `kinit`{.literal} 工具检索 Kerberos
    凭证，或者通过 SSSD 验证：
    ``` literallayout
    [idm-user@idm-client ~]$ kinit PI:EMAIL
    Password for PI:EMAIL:
    ```
-   如果您在 `/var/log/sssd/sssd_pam.log`{.literal}
    日志文件中看到以下错误之一，Kerberos
    凭证与当前登录的用户的用户名不匹配：
    ``` literallayout
    User with UPN [] was not found.
    UPN [] does not match target user [].
    ```
    在这种情况下，验证您使用 SSSD 进行身份验证，或考虑禁用
    `/etc/sssd/sssd.conf`{.literal} 文件中的
    `pam_gssapi_check_upn`{.literal} 选项：
    ``` literallayout
    [idm-user@idm-client ~]$ cat /etc/sssd/sssd.conf
    ...
    pam_gssapi_check_upn = false
    ```
-   若要进行额外的故障排除，您可以为 `pam_sss_gss.so`{.literal} PAM
    模块启用调试输出。
    ::: itemizedlist
    -   在 PAM 文件中所有 `pam_sss_gss.so`{.literal} 条目的末尾添加
        `debug`{.literal} 选项，如 `/etc/pam.d/sudo`{.literal} 和
        `/etc/pam.d/sudo-i`{.literal} ：
        ``` literallayout
        [root@idm-client ~]# cat /etc/pam.d/sudo
        #%PAM-1.0
        auth       sufficient   pam_sss_gss.so   debug
        auth       include      system-auth
        account    include      system-auth
        password   include      system-auth
        session    include      system-auth
        ```
        ``` literallayout
        [root@idm-client ~]# cat /etc/pam.d/sudo-i
        #%PAM-1.0
        auth       sufficient   pam_sss_gss.so   debug
        auth       include      sudo
        account    include      sudo
        password   include      sudo
        session    optional     pam_keyinit.so force revoke
        session    include      sudo
        ```
    -   尝试使用 `pam_sss_gss.so`{.literal}
        模块进行身份验证，并查看控制台输出。在本例中，用户没有任何
        Kerberos 凭据。
        ``` literallayout
        [idm-user@idm-client ~]$ sudo ls -l /etc/sssd/sssd.conf
        pam_sss_gss: Initializing GSSAPI authentication with SSSD
        pam_sss_gss: Switching euid from 0 to 1366201107
        pam_sss_gss: Trying to establish security context
        pam_sss_gss: SSSD User name: PI:EMAIL
        pam_sss_gss: User domain: idm.example.com
        pam_sss_gss: User principal:
        pam_sss_gss: Target name: PI:EMAIL
        pam_sss_gss: Using ccache: KCM:
        pam_sss_gss: Acquiring credentials, principal name will be derived
        pam_sss_gss: Unable to read credentials from [KCM:] [maj:0xd0000, min:0x96c73ac3]
        pam_sss_gss: GSSAPI: Unspecified GSS failure.  Minor code may provide more information
        pam_sss_gss: GSSAPI: No credentials cache found
        pam_sss_gss: Switching euid from 1366200907 to 0
        pam_sss_gss: System error [5]: Input/output error
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#using-an-Ansible-playbook-to-ensure-sudo-access-for-an-IdM-user-on-an-IdM-client_granting-sudo-access-to-an-IdM-user-on-an-IdM-client}使用 Ansible playbook 确保 IdM 客户端上的 IdM 用户具有 sudo 访问权限 {.title}
:::
在 Identity Management(IdM)中，您可以确保为特定 IdM 主机上的 IdM
用户帐户授予对特定命令的 `sudo`{.literal} 访问权限。
完成此步骤以确保存在名为 [**idm_user_reboot**]{.strong} 的
`sudo`{.literal} 规则。该规则授予 [**idm_user**]{.strong} 在
[**idmclient**]{.strong} 计算机上运行 `/usr/sbin/reboot`{.literal}
命令的权限。
::: itemizedlist
**先决条件**
-   您已在 Ansible 控制器上安装了
    [ansible-freeipa](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_identity_management/index#installing-the-ansible-freeipa-package_server-ansible){.link}
    软件包。
-   您知道 IdM 管理员密码。
-   [您已确保 IdM 中存在 [**idm_user**]{.strong}
    的用户帐户，并通过为用户创建密码来解锁帐户。](#managing-user-accounts-using-Ansible-playbooks_managing-users-groups-hosts.html#ensuring-the-presence-of-an-IdM-user-using-an-Ansible-playbook_managing-idm-users-using-Ansible-playbooks "使用 Ansible playbook 确保存在 IdM 用户"){.link}有关使用命令行界面添加新
    IdM
    [用户的详情，请参阅使用命令行添加用户。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_identity_management/index#adding-users-using-the-command-line_managing-idm-users-using-the-command-line){.link}
-   [**idmclient**]{.strong} 中没有本地 [**idm_user**]{.strong}
    帐户。[**idm_user**]{.strong} 用户未列在 [**idmclient**]{.strong}
    上的 `/etc/passwd`{.literal} 文件中。
:::
::: orderedlist
**流程**
1.  创建一个清单文件，如 `inventory.file`{.literal}，并在其中定义
    `ipaservers`{.literal} ：
    ``` literallayout
    [ipaservers]
    server.idm.example.com
    ```
2.  添加一个或多个 `sudo`{.literal} 命令：
    ::: orderedlist
    1.  创建一个 `ensure-reboot-sudocmd-is-present.yml`{.literal}
        Ansible playbook，以确保 `sudo`{.literal} 命令的 IdM
        数据库中存在 `/usr/sbin/reboot`{.literal}
        命令。要简化此步骤，您可以复制并修改 `/usr/share/doc/ansible-freeipa/playbooks/sudocmd/ensure-sudocmd-is-present.yml`{.literal}
        文件中的示例：
        ``` literallayout
        ---
        - name: Playbook to manage sudo command
          hosts: ipaserver
          become: true
          tasks:
          # Ensure sudo command is present
          - ipasudocmd:
              ipaadmin_password: MySecret123
              name: /usr/sbin/reboot
              state: present