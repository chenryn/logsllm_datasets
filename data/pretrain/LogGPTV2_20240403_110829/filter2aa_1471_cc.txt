X87 
floating 
point state
XMM 
registers
AVX 
registers
HV_X64_MSR_TSC_FREQUENCY
HV_X64_MSR_VP_INDEX
HV_X64_MSR_VP_RUNTIME
HV_X64_MSR_RESET
HV_X64_MSR_TIME_REF_COUNT
HV_X64_MSR_GUEST_IDLE
HV_X64_MSR_DEBUG_DEVICE_OPTIONS
HV_X64_MSR_BELOW_1MB_PAGE
HV_X64_MSR_STATS_PARTITION_RETAIL_PA
GE
HV_X64_MSR_STATS_VP_RETAIL_PAGE
XCR0 
(XFEM)
DR6 
(processor-
dependent)
MTRR’s and PAT
MCG_CAP
MCG_STATUS
P
ri
v
a
t
e
RIP, RSP
RFLAGS
CR0, CR3, 
CR4
DR7
IDTR, 
GDTR
CS, DS, 
ES, FS, GS, 
SS, TR, 
LDTR
TSC
DR6 
(processor-
dependent)
SYSENTER_CS, SYSENTER_ESP, 
SYSENTER_EIP, STAR, LSTAR, CSTAR, 
SFMASK, EFER, KERNEL_GSBASE, FS.BASE, 
GS.BASE
HV_X64_MSR_HYPERCALL
HV_X64_MSR_GUEST_OS_ID
HV_X64_MSR_REFERENCE_TSC
HV_X64_MSR_APIC_FREQUENCY
HV_X64_MSR_EOI
HV_X64_MSR_ICR
HV_X64_MSR_TPR
HV_X64_MSR_APIC_ASSIST_PAGE
HV_X64_MSR_NPIEP_CONFIG
HV_X64_MSR_SIRBP
HV_X64_MSR_SCONTROL
HV_X64_MSR_SVERSION
HV_X64_MSR_SIEFP
HV_X64_MSR_SIMP
HV_X64_MSR_EOM
HV_X64_MSR_SINT0 – HV_X64_MSR_SINT15
HV_X64_MSR_STIMER0_CONFIG – 
HV_X64_MSR_STIMER3_CONFIG
HV_X64_MSR_STIMER0_COUNT -
HV_X64_MSR_STIMER3_COUNT
Local APIC registers (including CR8/TPR)
Secure calls
When the NT kernel needs services provided by the Secure Kernel, it uses a
special function, VslpEnterIumSecureMode. The routine accepts a 104-byte
data structure (called SKCALL), which is used to describe the kind of
operation (invoke service, flush TB, resume thread, or call enclave), the
secure call number, and a maximum of twelve 8-byte parameters. The
function raises the processor’s IRQL, if necessary, and determines the value
of the Secure Thread cookie. This value communicates to the Secure Kernel
which secure thread will process the request. It then (re)starts the secure calls
dispatch loop. The executability state of each VTL is a state machine that
depends on the other VTL.
The loop described by the VslpEnterIumSecureMode function manages all
the operations shown on the left side of Figure 9-33 in VTL 0 (except the
case of Secure Interrupts). The NT kernel can decide to enter the Secure
Kernel, and the Secure Kernel can decide to enter the normal NT kernel. The
loop starts by entering the Secure Kernel through the HvlSwitchToVsmVtl1
routine (specifying the operation requested by the caller). The latter function,
which returns only if the Secure Kernel requests a VTL switch, saves all the
shared registers and copies the entire SKCALL data structure in some well-
defined CPU registers: RBX and the SSE registers XMM10 through
XMM15. Finally, it emits an HvVtlCall hypercall to the hypervisor. The
hypervisor switches to the target VTL (by loading the saved per-VTL
VMCS) and writes a VTL secure call entry reason to the VTL control page.
Indeed, to be able to determine why a secure VTL was entered, the
hypervisor maintains an informational memory page that is shared by each
secure VTL. This page is used for bidirectional communication between the
hypervisor and the code running in a secure VTL on a virtual processor.
Figure 9-33 The VSM dispatch loop.
The virtual processor restarts the execution in VTL 1 context, in the
SkCallNormalMode function of the Secure Kernel. The code reads the VTL
entry reason; if it’s not a Secure Interrupt, it loads the current processor
SKPRCB (Secure Kernel processor control block), selects a thread on which
to run (starting from the secure thread cookie), and copies the content of the
SKCALL data structure from the CPU shared registers to a memory buffer.
Finally, it calls the IumInvokeSecureService dispatcher routine, which will
process the requested secure call, by dispatching the call to the correct
function (and implements part of the dispatch loop in VTL 1).
An important concept to understand is that the Secure Kernel can map and
access VTL 0 memory, so there’s no need to marshal and copy any eventual
data structure, pointed by one or more parameters, to the VTL 1 memory.
This concept won’t apply to a normal call, as we will discuss in the next
section.
As we have seen in the previous section, Secure Interrupts (and intercepts)
are dispatched by the hypervisor, which preempts any code executing in VTL
0. In this case, when the VTL 1 code starts the execution, it dispatches the
interrupt to the right ISR. After the ISR finishes, the Secure Kernel
immediately emits a HvVtlReturn hypercall. As a result, the code in VTL 0
restarts the execution at the point in which it has been previously interrupted,
which is not located in the secure calls dispatch loop. Therefore, Secure
Interrupts are not part of the dispatch loop even if they still produce a VTL
switch.
Normal calls
Normal calls are managed similarly to the secure calls (with an analogous
dispatch loop located in VTL 1, called normal calls loop), but with some
important differences:
■    All the shared VTL registers are securely cleaned up by the Secure
Kernel before emitting the HvVtlReturn to the hypervisor for
switching the VTL. This prevents leaking any kind of secure data to
normal mode.
■    The normal NT kernel can’t read secure VTL 1 memory. For
correctly passing the syscall parameters and data structures needed for
the normal call, a memory buffer that both the Secure Kernel and the
normal kernel can share is required. The Secure Kernel allocates this
shared buffer using the ALLOCATE_VM normal call (which does not
require passing any pointer as a parameter). The latter is dispatched to
the MmAllocateVirtualMemory function in the NT normal kernel. The
allocated memory is remapped in the Secure Kernel at the same
virtual address and has become part of the Secure process’s shared
memory pool.
■    As we will discuss later in the chapter, the Isolated User Mode (IUM)
was originally designed to be able to execute special Win32
executables, which should have been capable of running indifferently
in the normal world or in the secure world. The standard unmodified
Ntdll.dll and KernelBase.dll libraries are mapped even in IUM. This
fact has the important consequence of requiring almost all the native
NT APIs (which Kernel32.dll and many other user mode libraries
depend on) to be proxied by the Secure Kernel.
To correctly deal with the described problems, the Secure Kernel includes
a marshaler, which identifies and correctly copies the data structures pointed
by the parameters of an NT API in the shared buffer. The marshaler is also
able to determine the size of the shared buffer, which will be allocated from
the secure process memory pool. The Secure Kernel defines three types of
normal calls:
■    A disabled normal call is not implemented in the Secure Kernel and,
if called from IUM, it simply fails with a
STATUS_INVALID_SYSTEM_SERVICE exit code. This kind of call
can’t be called directly by the Secure Kernel itself.
■    An enabled normal call is implemented only in the NT kernel and is
callable from IUM in its original Nt or Zw version (through Ntdll.dll).
Even the Secure Kernel can request an enabled normal call—but only
through a little stub code that loads the normal call number—set the
highest bit in the number, and call the normal call dispatcher
(IumGenericSyscall routine). The highest bit identifies the normal call
as required by the Secure Kernel itself and not by the Ntdll.dll module
loaded in IUM.
■    A special normal call is implemented partially or completely in
Secure Kernel (VTL 1), which can filter the original function’s results
or entirely redesign its code.
Enabled and special normal calls can be marked as KernelOnly. In the
latter case, the normal call can be requested only from the Secure Kernel
itself (and not from secure processes). We’ve already provided the list of
enabled and special normal calls (which are callable from software running
in VSM) in Chapter 3 of Part 1, in the section named “Trustlet-accessible
system calls.”
Figure 9-34 shows an example of a special normal call. In the example, the
LsaIso trustlet has called the NtQueryInformationProcess native API to
request information of a particular process. The Ntdll.dll mapped in IUM
prepares the syscall number and executes a SYSCALL instruction, which
transfers the execution flow to the KiSystemServiceStart global system call
dispatcher, residing in the Secure Kernel (VTL 1). The global system call
dispatcher recognizes that the system call number belongs to a normal call
and uses the number to access the IumSyscallDispatchTable array, which
represents the normal calls dispatch table.
Figure 9-34 A trustlet performing a special normal call to the
NtQueryInformationProcess API.
The normal calls dispatch table contains an array of compacted entries,
which are generated in phase 0 of the Secure Kernel startup (discussed later
in this chapter). Each entry contains an offset to a target function (calculated
relative to the table itself) and the number of its arguments (with some flags).
All the offsets in the table are initially calculated to point to the normal call
dispatcher routine (IumGenericSyscall). After the first initialization cycle, the
Secure Kernel startup routine patches each entry that represents a special call.
The new offset is pointed to the part of code that implements the normal call
in the Secure Kernel.
As a result, in Figure 9-34, the global system calls dispatcher transfers
execution to the NtQueryInformationProcess function’s part implemented in
the Secure Kernel. The latter checks whether the requested information class
is one of the small subsets exposed to the Secure Kernel and, if so, uses a
small stub code to call the normal call dispatcher routine
(IumGenericSyscall).
Figure 9-35 shows the syscall selector number for the
NtQueryInformationProcess API. Note that the stub sets the highest bit (N
bit) of the syscall number to indicate that the normal call is requested by the
Secure Kernel. The normal call dispatcher checks the parameters and calls
the marshaler, which is able to marshal each argument and copy it in the right
offset of the shared buffer. There is another bit in the selector that further
differentiates between a normal call or a secure system call, which is
discussed later in this chapter.
Figure 9-35 The Syscall selector number of the Secure Kernel.
The marshaler works thanks to two important arrays that describe each
normal call: the descriptors array (shown in the right side of Figure 9-34) and
the arguments descriptors array. From these arrays, the marshaler can fetch
all the information that it needs: normal call type, marshalling function index,
argument type, size, and type of data pointed to (if the argument is a pointer).
After the shared buffer has been correctly filled by the marshaler, the
Secure Kernel compiles the SKCALL data structure and enters the normal call
dispatcher loop (SkCallNormalMode). This part of the loop saves and clears
all the shared virtual CPU registers, disables interrupts, and moves the thread
context to the PRCB thread (more about thread scheduling later in the
chapter). It then copies the content of the SKCALL data structure in some
shared register. As a final stage, it calls the hypervisor through the
HvVtlReturn hypercall.
Then the code execution resumes in the secure call dispatch loop in VTL
0. If there are some pending interrupts in the queue, they are processed as
normal (only if the IRQL allows it). The loop recognizes the normal call
operation request and calls the NtQueryInformationProcess function
implemented in VTL 0. After the latter function finished its processing, the
loop restarts and reenters the Secure Kernel again (as for Secure Calls), still
through the HvlSwitchToVsmVtl1 routine, but with a different operation
request: Resume thread. This, as the name implies, allows the Secure Kernel
to switch to the original secure thread and to continue the execution that has
been preempted for executing the normal call.
The implementation of enabled normal calls is the same except for the fact
that those calls have their entries in the normal calls dispatch table, which
point directly to the normal call dispatcher routine, IumGenericSyscall. In
this way, the code will transfer directly to the handler, skipping any API
implementation code in the Secure Kernel.
Secure system calls
The last type of system calls available in the Secure Kernel is similar to
standard system calls provided by the NT kernel to VTL 0 user mode
software. The secure system calls are used for providing services only to the
secure processes (trustlets). VTL 0 software can’t emit secure system calls in
any way. As we will discuss in the “Isolated User Mode” section later in this
chapter, every trustlet maps the IUM Native Layer Dll (Iumdll.dll) in its
address space. Iumdll.dll has the same job as its counterpart in VTL 0,
Ntdll.dll: implement the native syscall stub functions for user mode
application. The stub copies the syscall number in a register and emits the
SYSCALL instruction (the instruction uses different opcodes depending on
the platform).
Secure system calls numbers always have the twenty-eighth bit set to 1 (on
AMD64 architectures, whereas ARM64 uses the sixteenth bit). In this way,
the global system call dispatcher (KiSystemServiceStart) recognizes that the
syscall number belongs to a secure system call (and not a normal call) and
switches to the SkiSecureServiceTable, which represents the secure system
calls dispatch table. As in the case of normal calls, the global dispatcher
verifies that the call number is in the limit, allocates stack space for the
arguments (if needed), calculates the system call final address, and transfers
the code execution to it.
Overall, the code execution remains in VTL 1, but the current privilege
level of the virtual processor raises from 3 (user mode) to 0 (kernel mode).
The dispatch table for secure system calls is compacted—similarly to the
normal calls dispatch table—at phase 0 of the Secure Kernel startup.
However, entries in this table are all valid and point to functions
implemented in the Secure Kernel.
Secure threads and scheduling
As we will describe in the “Isolated User Mode” section, the execution units
in VSM are the secure threads, which live in the address space described by a
secure process. Secure threads can be kernel mode or user mode threads.
VSM maintains a strict correspondence between each user mode secure
thread and normal thread living in VTL 0.
Indeed, the Secure Kernel thread scheduling depends completely on the
normal NT kernel; the Secure Kernel doesn’t include a proprietary scheduler
(by design, the Secure Kernel attack surface needs to be small). In Chapter 3
of Part 1, we described how the NT kernel creates a process and the relative
initial thread. In the section that describes Stage 4, “Creating the initial thread
and its stack and context,” we explain that a thread creation is performed in
two parts:
■    The executive thread object is created; its kernel and user stack are
allocated. The KeInitThread routine is called for setting up the initial
thread context for user mode threads. KiStartUserThread is the first
routine that will be executed in the context of the new thread, which
will lower the thread’s IRQL and call PspUserThreadStartup.
■    The execution control is then returned to NtCreateUserProcess,
which, at a later stage, calls PspInsertThread to complete the
initialization of the thread and insert it into the object manager
namespace.
As a part of its work, when PspInsertThread detects that the thread
belongs to a secure process, it calls VslCreateSecureThread, which, as the
name implies, uses the Create Thread secure service call to ask to the Secure
Kernel to create an associated secure thread. The Secure Kernel verifies the
parameters and gets the process’s secure image data structure (more details
about this later in this chapter). It then allocates the secure thread object and
its TEB, creates the initial thread context (the first routine that will run is
SkpUserThreadStartup), and finally makes the thread schedulable.
Furthermore, the secure service handler in VTL 1, after marking the thread as
ready to run, returns a specific thread cookie, which is stored in the
ETHREAD data structure.
The new secure thread still starts in VTL 0. As described in the “Stage 7”
section of Chapter 3 of Part 1, PspUserThreadStartup performs the final
initialization of the user thread in the new context. In case it determines that
the thread’s owning process is a trustlet, PspUserThreadStartup calls the
VslStartSecureThread function, which invokes the secure calls dispatch loop
through the VslpEnterIumSecureMode routine in VTL 0 (passing the secure
thread cookie returned by the Create Thread secure service handler). The first
operation that the dispatch loop requests to the Secure Kernel is to resume
the execution of the secure thread (still through the HvVtlCall hypercall).
The Secure Kernel, before the switch to VTL 0, was executing code in the
normal call dispatcher loop (SkCallNormalMode). The hypercall executed by
the normal kernel restarts the execution in the same loop routine. The VTL 1
dispatcher loop recognizes the new thread resume request; it switches its
execution context to the new secure thread, attaches to its address spaces, and
makes it runnable. As part of the context switching, a new stack is selected
(which has been previously initialized by the Create Thread secure call). The
latter contains the address of the first secure thread system function,
SkpUserThreadStartup, which, similarly to the case of normal NT threads,
sets up the initial thunk context to run the image-loader initialization routine
(LdrInitializeThunk in Ntdll.dll).
After it has started, the new secure thread can return to normal mode for
two main reasons: it emits a normal call, which needs to be processed in VTL
0, or the VINA interrupts preempt the code execution. Even though the two
cases are processed in a slightly different way, they both result in executing
the normal call dispatcher loop (SkCallNormalMode).
As previously discussed in Part 1, Chapter 4, “Threads,” the NT scheduler
works thanks to the processor clock, which generates an interrupt every time
the system clock fires (usually every 15.6 milliseconds). The clock interrupt
service routine updates the processor times and calculates whether the thread
quantum expires. The interrupt is targeted to VTL 0, so, when the virtual
processor is executing code in VTL 1, the hypervisor injects a VINA
interrupt to the Secure Kernel, as shown in Figure 9-36. The VINA interrupt
preempts the current executing code, lowers the IRQL to the previous
preempted code’s IRQL value, and emits the VINA normal call for entering
VTL 0.
Figure 9-36 Secure threads scheduling scheme.
As the standard process of normal call dispatching, before the Secure
Kernel emits the HvVtlReturn hypercall, it deselects the current execution
thread from the virtual processor’s PRCB. This is important: The VP in VTL
1 is not tied to any thread context anymore and, on the next loop cycle, the
Secure Kernel can switch to a different thread or decide to reschedule the
execution of the current one.
After the VTL switch, the NT kernel resumes the execution in the secure
calls dispatch loop and still in the context of the new thread. Before it has any
chance to execute any code, the code is preempted by the clock interrupt
service routine, which can calculate the new quantum value and, if the latter
has expired, switch the execution of another thread. When a context switch
occurs, and another thread enters VTL 1, the normal call dispatch loop
schedules a different secure thread depending on the value of the secure
thread cookie:
■    A secure thread from the secure thread pool if the normal NT kernel
has entered VTL 1 for dispatching a secure call (in this case, the
secure thread cookie is 0).
■    The newly created secure thread if the thread has been rescheduled for
execution (the secure thread cookie is a valid value). As shown in
Figure 9-36, the new thread can be also rescheduled by another virtual
processor (VP 3 in the example).
With the described schema, all the scheduling decisions are performed
only in VTL 0. The secure call loop and normal call loops cooperate to
correctly switch the secure thread context in VTL 1. All the secure threads
have an associated a thread in the normal kernel. The opposite is not true,
though; if a normal thread in VTL 0 decides to emit a secure call, the Secure
Kernel dispatches the request by using an arbitrary thread context from a