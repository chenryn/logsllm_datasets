## 如何提升开发效率？从开发人员的角度看，提升效率最好的方法就是 2个字：解耦。落到技术实现上来说，就是通过组件化形成合理的开发框架。组件化是指，解耦复杂系统时将多个功能模块拆分、重组的过程。对于移动 App来说可以横向地按功能模块进行组件化；也可以纵向地按照架构层次进行组件化。当然目前移动App 的架构往往都已经比较复杂了，所以通常都是两者混合的模式。组件化带来的好处包括：1.  **方便拆分代码仓库，降低分支管理难度，提高开发并行度。**\    在上一篇文章《细谈移动 App    的交付流水线（pipeline）》中，我给出了一种适应发布快车模式的代码分支管理模型。试想一下，如果一个巨大的    App    的所有代码都集中在同一个代码仓库中，而所有的并行开发功能又都会形成一个个的功能分支的话，它们之间相互的影响将是难以想象的。\    其实，任何一个代码仓库，当需要管理的并行分支超过 10    个时，都会让人头痛。所以，组件化的好处就是，对整个项目进行解耦，把不相干的功能组件从代码仓库这个层面进行隔离，以免互相影响。2.  **组件可以多版本存在，通过依赖快速选取所需版本。**\    所有的组件都可以同时发布多个版本，发布的形式可以是代码包、二进制组件等等。这样做的好处是，对于组件的提供方和依赖方来说，只需要通过版本控制就能管理或者选取自己需要的组件功能，这种方式更符合编程习惯，也降低了减少沟通成本。3.  **专业分工，形成更优的组织结构。**\    一旦实施组件化，各种更专业的通用组建会慢慢形成（比如网络处理、图片处理、语音处理等等），而这些更专业的组件，也会渐渐地由更专业的人或团队进行开发和维护，专业的分工使得研发效率得到进一步提升。\    所以，组件化其实就是通过专业分工，提升了整个组织的开发效率。当然，组件化并非完美无瑕，它同时也会引起一些问题，比如：1.  **组件间的依赖问题**。由于多组件、多版本的存在，加之它们之间的传递依赖，所以组件化之后的依赖管理问题不容小觑。2.  **组件间的兼容问题**。兼容性问题，是由组件间的依赖问题引发的，由此组件的发布管理也会成为瓶颈：组件间到底要不要兼容？出现了不兼容的情况，应该怎么办？其实，组件化带来的这些负面影响，在开发人员的维度是看不到的，往往会发生在构建阶段。还好，这些问题并不是无解的。接下来，我们就一起看看构建阶段如何解决这些问题，并提高效率吧。
## 如何提升构建效率？从目前业界流行的处理方法来看，提升构建阶段的效率，可以从扁平化依赖管理和二进制交付两个维度解决。**第一，扁平化依赖管理**组件的依赖问题，到底有多让人头痛。我们一起来看看图 1中的组件依赖示例吧。一个 App 中的两个组件 B 和 C 都依赖了组件 G，但依赖的却是组件 G的不同版本。所以，这个组件 G 的 2 个版本间就发生了冲突。由此可见，由传递依赖带来的不确定性，是我们经常会遇见并非常讨厌的组件依赖形式。因为发现和处理的成本都很高。![](Images/9a9dcdd69fcff055f8275a66c9a91a9d.png){savepage-src="https://static001.geekbang.org/resource/image/24/87/24a6ebb48588b8a3660d0e357b2db187.png"}```{=html}```图 1 组件依赖冲突```{=html}```通常情况下，一个移动 App 可以拆分出十几到几十个组件。大型的移动App，如淘宝、美团，甚至可以拆分出几百个组件。要保证这么多组件间依赖传递的准确性，其难度非常大。所以，为了解决这个问题，业界现在普遍直接采用扁平化的依赖管理方式，减少甚至去除传递依赖，以此避免组件、版本冲突的问题。![](Images/5a93a6536f64a78fa6e8787f3edb7bdd.png){savepage-src="https://static001.geekbang.org/resource/image/d7/bc/d7892bb8128b939b28117fa5e05bfbbc.png"}```{=html}```图 2 扁平化依赖```{=html}```而且，这样的扁平化管理方式，对于一个 App 版本来说，更清晰、直观。那么，实现这种扁平化的管理方式，需要具备什么前提吗。答案，当然是需要。这个前提就是：不同组件之间，以及不同版本之间要保证可兼容。但是，你我都清楚，要想保证全部版本的完全可兼容性，其成本是巨大的。所以，在实践中，我们不会去保证所有版本的绝对兼容，而是去实现所有版本、组件间的相对兼容性。相对兼容性是指，每个组件在发布新版本时，对于其所依赖的其他组件，都选择组件仓库中的最新版本。这样就保证了这个组件在发布之后的兼容性。如果所有组件都可以这么做，就能保证其各自都兼容。但是这个方法不是绝对的，比如我们会遇到并发发布，或者多个组件间引起的功能逻辑的冲突等问题，所以还是需要对移动App 进行集成测试。**第二，二进制交付**解决了组件的依赖问题之后，我们需要再考虑的问题是，如何才能提高编译速度。传统的移动 App 组件集成及编译的方式如图 3所示。组件先以源码的方式集成到目标项目，然后对整个项目进行编译。如果组件比较多的话，采用这种方式的编译时间会非常长。有时，甚至要编译1 个多小时。显然，我们不会接受这种低效的集成与编译方式。![](Images/12e2a02af662a033713fce2547e12761.png){savepage-src="https://static001.geekbang.org/resource/image/1f/6d/1f35512e72205887d48021e0ab3e1b6d.png"}```{=html}```图 3 组件源码集成```{=html}```所以，为了加快编译速度，业界通常会采用二进制交付和集成的方案。如图 4所示，二进制交付，会优先把组件编译成二进制包，再形成版本，并通过组件仓库进行版本管理，正如图中的组件A Lib包。在真正编译时，我们只要直接链接二进制包就可以了，无需再进行一次编译。![](Images/aa0ed51a62084fed418d2b4ccf56ef18.png){savepage-src="https://static001.geekbang.org/resource/image/42/4b/42ac7ab34eacf9eaea01c8db4affa84b.png"}```{=html}```图 4 二进制交付及集成```{=html}```使用二进制包的方式，可以帮我们大幅提升移动 App的编译速度。而且，因为有了中间交付物，我们可以采用与后端服务一样的方式，在本地缓存需要依赖的组件，进一步加速编译过程。**通过对开发、构建过程的优化，我们已经将原来的交付效率至少提高了 1倍。**接下来，我们再一起看看，如何优化测试和发布流程，以求移动 App的持续交付体系更高效。
## 如何提升测试效率？提高移动 App 测试效率的方法，主要的思路有三个：1.  **代码静态扫描工具**。\    移动 App    的测试，同样可以使用与后端服务一样的代码静态扫描工具。但相比之下，后端服务通常使用的那些工具虽然普适性强，但太重且定制的门槛也很高；所以针对移动    App    的代码静态扫描，目前多数大厂都采用自研的方式，定制静态代码扫描工具。另外，针对移动    App 开源的静态代码扫描工具，如 Lint 等，已经可以满足小团队的使用了。2.  **UI 自动化测试**。\    这部分的关注点是成本和收益比，你我都清楚，UI    自动化测试的脚本维护成本高，导致其难以被大规模使用。所以，针对重要的模块和组件，有计划地使用    UI 自动化测试是重中之重。3.  **自动 Monkey 测试**。\    Monkey    是一款非常好用的探索性测试工具，可以大幅提升测试效率，有效解决手工测试的盲点。iOS    系统的测试，由于系统限制比较多，所以可以在模拟器上执行 Monkey    的方式。合理地利用这些测试工具和方法，就可以有效提升客户端的测试效率。当然在测试过程中，合理地搭配监控工具，如性能监控、白屏检测等，可以起到更好的作用。
## 如何提升发布效率？在前面两篇文章中，我提到过，移动 App的发布流程与后端服务相比差别较大，根本原因在于移动 App天生具备的分批发布特性。所以，提升移动 App的发布效率，我们也要采用与后端服务不一样的方式。在这里，我总结了提升移动App 发布效率，需要注意的两个问题：1.  **要注意分发的精准性**。精准性指的是，分发的目标、数量、时长，以及渠道一定要合理、有效，否则就会消耗无谓的分发成本。\    这里，我和你分享一个关于分发精准性的技巧。其实，说是技巧，更不如说是大家在发布过程中容易疏忽的内容。为了进行小批量的测试，通常我们都会准备一个针对性的测试用户名单。但是，你有没有想过这份名单的更新周期呢？我看到很多组织都极少更新这份名单，其实这样既对用户体验不好，也会影响测试结果。小白鼠也要时常替换的，否则就会失去实验价值。\    关于这份名单的更新周期，我的建议是：结合业务实际情况，尽量避免一个用户连续多次成为小白鼠。2.  **要注意分发的稳定性**。稳定性指的是，在分发的过程中，一定要做好监控数据的收集和分析，并且要考虑好风险的处理以及必要的回滚和热修复手段。\    这里，我也和你分享一个关于稳定性的技巧。提高分发稳定性的一个方法就是，减少分发时更新的内容，并同时减少更新的时间。而对于移动    App 来说，静态资源包的差分发布就是一个优化方案。\    比如，携程在选择静态资源包的差分发布时，就经历了这样一个优化过程：从全量包发布，到文件二进制差分，再到预差分。前两个方案都是在更新时，进行差分；而预差分则是在版本发布时，就已经做好了差分计算。与前两种方案相比，预差分的目的就是减少更新时间。但预差分的缺点是，可能要对所有要发布的版本进行差分处理，这将是一个巨大的笛卡尔积。\    所以，携程在经历几次尝试后，最终选择的方案是：结合全量包发布、文件二进制差分，以及预差分三种方案的特点，形成了按需差分的方案。即，先收集用户正在使用的版本，然后只做这些版本与最新版本的差分，从而减少差分处理的成本。在我看来，确保每次分发的有效性，以及每次分发都能达到预期，就是提高移动App 发布效率的一种最有效的手段。
## 总结在了解了移动 App持续交付体系的内容后，你就可以自己去动手搭建一套持续交付体系了。持续交付体系搭建起来后，我们需要考虑的问题就成了，如何优化这个体系的流程，提升这个体系的效率。为此，我从开发、构建、测试和发布这四个核心流程的角度，和你分享了一些实践经验：1.  利用组件化的思想提升开发效率，但同时也会带来组件依赖及发布的问题；2.  利用扁平化依赖管理的方法解决组件依赖和发布的问题，同时采用二进制交付的方式，进一步提高构建效率；3.  合理利用静态代码扫描、UI 自动化、自动 Monkey    等测试工具和方法，进一步提升测试效率；4.  确保分发的精准性和稳定性，是提升发布效率的有效手段。至此，通过持续交付移动 App的三篇文章，再结合着以前我分享的后端服务的持续交付体系的内容，你完全可以自己厘清构建移动App 持续交付体系的流程了，也知道了如何去优化这个流程。希望这些内容，可以开拓你的思路，能够帮助你解决实际项目中遇到的问题。如果你还有哪些不清楚的内容，欢迎你留言和我一起讨论。
## 思考题在今天的分享中，我介绍了一种扁平化依赖管理的方法。在实际工作中，你是如何管理依赖和bundle 的呢？感谢你的收听，欢迎你给我留言。![](Images/69e5b7a8ed8eecd006aa3ce5f76f78af.png){savepage-src="https://static001.geekbang.org/resource/image/55/0a/55b7b7cb930ca733523be64e3a720d0a.jpg"}
# 34 \| 快速构建持续交付系统（一）：需求分析从今天这一篇文章开始，我们就进入这个专栏的最后一个系列：实践案例系列了。在这个系列里，我将通过4 篇文章，以实际操作为主，带你快速构建一套持续交付系统。当然，首先我们要做的是，一起整理一下思路，看看我们的系统具体要满足哪些实际的需求，需要具备什么功能。然后，建立需求的锚点，根据这些锚点，展开具体的搭建工作。因此，在这篇文章中，我会以先介绍模拟团队和项目，再提出具体持续交付需求的思路，罗列一些要模拟的背景，并为你解说这些场景。这样做，可以帮助你在后面的三篇实践文章中找到对应的需求点，也可以让你与现在团队的持续交付体系作一番比较，找到相通之处，从而加深你对持续交付体系的理解。
## 模拟团队介绍我在第 7篇文章[《"两个披萨"团队的代码管理实际案例》](https://time.geekbang.org/column/article/11323)中，和你分享了"两个披萨"团队的代码管理实践。基本上，我们可以把一个这样的团队看作是一个微型研发团队。虽然这样规模的一个团队也可以很好地运用我们即将搭建的持续交付系统，但是因为过于理想化而缺乏了典型性。所以，为了更全面地介绍持续交付系统的搭建过程，我将要模拟的团队规模扩大至3 个"两个披萨"团队的大小。即，整个产品的研发，需要由这 3个团队合作完成。这 3 个团队的分工，如下图所示：``{=html}![](Images/e4b019418a909d0ec5990276f789aa7b.png){savepage-src="https://static001.geekbang.org/resource/image/b3/36/b30d7ed155a514fee323b18924d1e836.png"}由这样 3 个团队组成的中小型研发组织架构，也是目前互联网公司比较流行的。