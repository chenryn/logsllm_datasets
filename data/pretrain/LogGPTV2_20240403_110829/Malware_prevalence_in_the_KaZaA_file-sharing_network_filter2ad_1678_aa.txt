title:Malware prevalence in the KaZaA file-sharing network
author:Seungwon Shin and
Jaeyeon Jung and
Hari Balakrishnan
Malware Prevalence in the KaZaA File-Sharing Network
Seungwon Shin
ETRI
Daejeon, Korea
Jaeyeon Jung
Mazu Networks
Cambridge, MA USA
PI:EMAIL
PI:EMAIL
Hari Balakrishnan
MIT CSAIL
Cambridge, MA USA
PI:EMAIL
ABSTRACT
In recent years, more than 200 viruses have been reported to use
a peer-to-peer (P2P) ﬁle-sharing network as a propagation vector.
Disguised as ﬁles that are frequently exchanged over P2P networks,
these malicious programs infect the user’s host if downloaded and
opened, leaving their copies in the user’s sharing folder for fur-
ther propagation. Using a light-weight crawler built for the KaZaA
ﬁle-sharing network, we study the prevalence of malware in this
popular P2P network, the malware’s propagation behavior in the
P2P network environment and the characteristics of infected hosts.
We gathered information about more than 500,000 ﬁles returned
by the KaZaA network in response to 24 common query strings.
With 364 signatures of known malicious programs, we found that
over 15% of the crawled ﬁles were infected by 52 different viruses.
Many of the malicious programs that we ﬁnd active in the KaZaA
P2P network open a backdoor through which an attacker can re-
motely control the compromised machine, send spam, or steal a
user’s conﬁdential information. The assertion that these hosts were
used to send spam was supported by the fact that over 70% of in-
fected hosts were listed on DNS-based spam black-lists. Our mea-
surement method is efﬁcient: it enables us to investigate more than
30,000 ﬁles in an hour, identifying infected hosts without directly
accessing their ﬁle system.
Categories and Subject Descriptors
C.2.0 [COMPUTER-COMMUNICATION NETWORKS]: Gen-
eral
Keywords
Peer-to-peer, KaZaA, Virus Prevalence
General Terms
Measurement, Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
1.
INTRODUCTION
With few defense mechanisms in place, peer-to-peer (P2P) ﬁle-
sharing networks have been known to be vulnerable to many secu-
rity attacks. Recent papers discuss the threat of malware spread in
P2P networks [30, 26]. One experimental study reports that 44%
of the 4,778 executable ﬁles downloaded through a KaZaA client
application contain malicious code [28]. In this study, we perform
a large scale measurement study on the prevalence of malicious
programs in the KaZaA ﬁle-sharing network.
In recent years, KaZaA has been one of most popular P2P net-
works and the number of active users far outnumbers that of Over-
net and Gnutella. Despite a number of lawsuits [6], KaZaA still
attracted more than 2.5 millions users in May 2006 [16]. How-
ever, little has been known about details the operation of the KaZaA
network and the characteristics of the shared ﬁles in the network.
Liang et al. present the dynamics of KaZaA overlay structure by
analyzing KaZaA network trafﬁc and the behavior of a KaZaA
client application running on their machine [10]. They also ex-
amined the impact of corrupted ﬁles intentionally injected by a few
hosts (“pollution servers”) to hinder ﬁle sharing practices [11, 7].
Because of the distributed nature of peer-to-peer clients, a
crawler-based measurement approach is commonly used to study
the characteristics of client hosts and the ﬁles that are shared among
them. Using a crawler, Liang et al.
[11, 7] collected data from
KaZaA, Stutzbach et al. [17, 18, 29] from Gnutella, and Fessant et
al. [3] from eDonkey. However, since there is no publicly available
crawling software for KaZaA, we develop our own crawling soft-
ware that quickly visits distributed “indexing” hosts in the KaZaA
network and gathers information about active client hosts and the
ﬁles they share. The architecture of our KaZaA crawler, Krawler,
is similar to that of the KaZaA Crawling Platform by Liang et al.
[11]. However, Krawler is optimized for processing a large number
of query strings, whereas the KaZaA Crawling Platform is used for
visiting a large number of indexing hosts with a small set of query
strings.
Using 71 different malicious programs (e.g., viruses, Trojan
horses), we construct 364 different signatures, with which we can
identify infected ﬁles only using the information that KaZaA ap-
plication provides. In analyzing the crawled data in combination
with the signature-based detection method, we make the following
contributions:
• We ﬁnd that over 12% of KaZaA client hosts are infected by
over 40 different viruses both in February and in May, 2006.
The number of viral ﬁles that these infected client hosts bring
into the KaZaA P2P network is signiﬁcant. Viral ﬁles ac-
count for more than 22% and 15% of the toal crawled data in
February and May 2006, respectively.
• We ﬁnd that prevailing viruses in a P2P network exhibit two
characteristics: (1) a virus multiplies itself into many copies
with different names corresponding to popular executable
ﬁles. As a result, certain query strings such as “ICQ” and
“Trillian” elicit more infected ﬁles than legitimate ones in
the KaZaA P2P ﬁle-sharing network. (2) a virus generates
many binary variants to avoid detection. We ﬁnd that both
factors appear necessary for wide spreading.
• We observe that 4.8% of infected client hosts seen in Febru-
ary returned still infected in May 2006. Moreover, 70% of
infected client hosts are listed in one or more of six DNS-
based blacklists that we tested. We believe that this is a
strong indicator that these infected client hosts are used for
relaying spam email. More importantly, some client hosts
are infected with viruses that steal a user’s conﬁdential in-
formation (Darby) and turn the victim machine into a bot
(IRCBot).
The paper is organized as follows: §2 presents an overview of
KaZaA, our crawling software and the malware propagation in the
KaZaA ﬁle-sharing network. §3 presents our data collection meth-
ods. §4 analyzes two datasets collected in February and May, 2006.
§5 summarizes the paper with a discussion of future work.
2. BACKGROUND
The KaZaA network uses the proprietary FastTrack protocol [25]
whose technical details are not publicly available. As such, this
overview comes from the examination of related documents as well
as our experience in reverse engineering its operation1 and analyz-
ing the giFT source code [5], giFT is an open source project that at-
tempts to support multiple peer-to-peer networks including KaZaA.
We then describe our crawling software that quickly visits “index-
ing” hosts in the KaZaA network and collects information about
ﬁles that KaZaA hosts offer to share.
2.1 A Basic KaZaA Operation
When a user runs a KaZaA client application, the client estab-
lishes a connection with an “indexing” hosts, called supernodes [9].
The client has a hard-coded list of possible supernodes. These su-
pernodes form an overlay network with other supernodes and prop-
agate queries received from their client hosts. Any client host may
server as a supernode if it is accessible from the Internet (i.e., not
behind a ﬁrewall or a NAT box) and is connected with a fast enough
link [10, 9].
When a client connects to a supernode, it sends two types of
information to the supernode [10]. The ﬁrst is the list of ﬁles that
the peering client host has in the sharing folder 2 [4]. A supernode
creates and updates a search index using the information received
from client hosts. Second, the client informs the peering supernode
of the host’s information, such as a client nickname, a (download)
port number, and an IP address at which other clients can request a
ﬁle download.
A user can locate a ﬁle by issuing a query that contain a sub-
string of the name of the ﬁle of interest. Each query is sent to
a directly connected supernode, which is called a parent supern-
ode [10]. Figure 1 illustrates an example. A user who is looking
for an ICQ chatting client sends a query “ICQ” to the parent supern-
ode. If the parent supernode is unable to ﬁnd a match for the query,
1We ran various KaZaA clients, such as KaZaA [8], Poisoned [14],
and KaZaA Lite [27], and analyzed packets generated from these
clients using Ethereal [1].
2A KaZaA client also scans the sharing folders every 6 minutes to
check for added or deleted ﬁles [21].
it forwards the query to other peering supernodes and the search
continues until the TTL reaches zero [12]. If the parent supernode
receives an answer from a peer, it forwards the answer back to the
original client. Typically, an answer is a list of the IP addresses
and source ports of the hosts offering a matching ﬁle, as well as the
information about the ﬁles themselves. Finally, the client directly
connects to one of the hosts listed in the answer and downloads the
“ICQ.exe” ﬁle. This signaling trafﬁc between a client and a parent
supernode is encrypted with a key that is exchanged in the begin-
ning of a session.
Figure 1: Example of a KaZaA search sequence
2.2 Krawler: A KaZaA Crawler
This section describes the operation of our KaZaA crawling soft-
ware, Krawler, that queries tens of thousands of active supern-
odes in the KaZaA network. The Krawler has two main compo-
nents; The dispatcher maintains a list of supernodes. The fetcher
communicates with the dispatcher, updates a set of supernodes to
crawl, sends query strings to individual supernodes and processes
responses as follows:
• Krawler starts with a set of the IP addresses of 200 known
supernodes in the KaZaA network and a set of query strings
associated with the ﬁles that we seek.
• Krawler attempts to make a TCP connection to each supern-
ode in the list. If it fails to establish a TCP connection, then
it waits until the next round to get a new IP address. If it suc-
ceeds, it exchanges handshake messages with the supernode.
• Krawler receives from the supernode a supernode refresh list,
consisting of up to 200 super node IP addresses. This list is
stored in the dispatcher.
• A fetcher sends out a set of query strings to each supernode
and waits for responses. A response includes the metadata
and content hash for the ﬁles that match the query string and
the peer hosts’ IP address and download port number. If there
is no response from a particular supernode for 60 seconds,
the fetcher drops the corresponding query session.3 All these
responses are logged for further analysis.
2.3 Virus Propagation in P2P Networks
3We polled a set of 100 randomly selected supernodes at every 5
seconds for their availability. 100% of supernodes that did not re-
spond for the ﬁrst 30 seconds never responded for the entire polling