---
author: Simon Brand
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 4565
date: '2017-10-04 16:59:47'
editorchoice: false
excerpt: 有一个 backtrace 命令，它给你提供了程序当前的函数调用链。这篇文章将向你展示如何在 x86_64 上实现堆栈展开以生成这样的回溯。
fromurl: https://blog.tartanllama.xyz/c++/2017/06/24/writing-a-linux-debugger-unwinding/
id: 8930
islctt: true
largepic: /data/attachment/album/201710/04/165839gmb9iqdiee2bh3m5.jpg
permalink: /article-8930-1.html
pic: /data/attachment/album/201710/04/165839gmb9iqdiee2bh3m5.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 8890
- displayorder: 0
  raid: 8936
reviewer: ''
selector: ''
summary: 有一个 backtrace 命令，它给你提供了程序当前的函数调用链。这篇文章将向你展示如何在 x86_64 上实现堆栈展开以生成这样的回溯。
tags:
- 调试
thumb: false
title: 开发一个 Linux 调试器（八）：堆栈展开
titlepic: true
translator: geekpi
updated: '2017-10-04 16:59:47'
---
![](/data/attachment/album/201710/04/165839gmb9iqdiee2bh3m5.jpg)
有时你需要知道的最重要的信息是什么，你当前的程序状态是如何到达那里的。有一个 `backtrace` 命令，它给你提供了程序当前的函数调用链。这篇文章将向你展示如何在 x86\_64 上实现堆栈展开以生成这样的回溯。
### 系列索引
这些链接将会随着其他帖子的发布而上线。
1. [准备环境](/article-8626-1.html)
2. [断点](/article-8645-1.html)
3. [寄存器和内存](/article-8663-1.html)
4. [ELF 和 DWARF](/article-8719-1.html)
5. [源码和信号](/article-8812-1.html)
6. [源码级逐步执行](/article-8813-1.html)
7. [源码级断点](/article-8890-1.html)
8. [堆栈展开](https://blog.tartanllama.xyz/c++/2017/06/24/writing-a-linux-debugger-unwinding/)
9. 读取变量
10. 之后步骤
用下面的程序作为例子：
```
void a() {
    //stopped here
}
void b() {
     a();
}
void c() {
     a();
}
int main() {
    b();
    c();
}
```
如果调试器停在 `//stopped here' 这行，那么有两种方法可以达到：`main->b->a`或`main->c->a`。如果我们用 LLDB 设置一个断点，继续执行并请求一个回溯，那么我们将得到以下内容：
```
* frame #0: 0x00000000004004da a.out`a() + 4 at bt.cpp:3
  frame #1: 0x00000000004004e6 a.out`b() + 9 at bt.cpp:6
  frame #2: 0x00000000004004fe a.out`main + 9 at bt.cpp:14
  frame #3: 0x00007ffff7a2e830 libc.so.6`__libc_start_main + 240 at libc-start.c:291
  frame #4: 0x0000000000400409 a.out`_start + 41
```
这说明我们目前在函数 `a` 中，`a` 从函数 `b` 中跳转，`b` 从 `main` 中跳转等等。最后两个帧是编译器如何引导 `main` 函数的。
现在的问题是我们如何在 x86\_64 上实现。最稳健的方法是解析 ELF 文件的 `.eh_frame` 部分，并解决如何从那里展开堆栈，但这会很痛苦。你可以使用 `libunwind` 或类似的来做，但这很无聊。相反，我们假设编译器以某种方式设置了堆栈，我们将手动遍历它。为了做到这一点，我们首先需要了解堆栈的布局。
```
            High
        |   ...   |
        +---------+
     +24|  Arg 1  |
        +---------+
     +16|  Arg 2  |
        +---------+
     + 8| Return  |
        +---------+
EBP+--> |Saved EBP|
        +---------+
     - 8|  Var 1  |
        +---------+
ESP+--> |  Var 2  |
        +---------+
        |   ...   |
            Low
```
如你所见，最后一个堆栈帧的帧指针存储在当前堆栈帧的开始处，创建一个链接的指针列表。堆栈依据这个链表解开。我们可以通过查找 DWARF 信息中的返回地址来找出列表中下一帧的函数。一些编译器将忽略跟踪 `EBP` 的帧基址，因为这可以表示为 `ESP` 的偏移量，并可以释放一个额外的寄存器。即使启用了优化，传递 `-fno-omit-frame-pointer` 到 GCC 或 Clang 会强制它遵循我们依赖的约定。
我们将在 `print_backtrace` 函数中完成所有的工作：
```
void debugger::print_backtrace() {
```
首先要决定的是使用什么格式打印出帧信息。我用了一个 lambda 来推出这个方法：
```
    auto output_frame = [frame_number = 0] (auto&& func) mutable {
        std::cout 
作者：[Simon Brand](https://twitter.com/TartanLlama) 译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出