# 特别放送：成为DevOps工程师的必备技能（下）你好，我是石雪峰。在上一讲，我介绍了 DevOps 工程师的具体职责以及 DevOps工程师必备的 3项软实力，分别是沟通能力、同理心和学习能力。有了这些认知之后，我们今天来看看"重头戏"：DevOps工程师必备的硬实力以及学习路径。
## DevOps 工程师必备的硬实力所谓硬实力，说白了就是指一个人的技术能力。软实力通常是"只可意会不可言传"的，但技术本身就具体多了，重要的是，技术水平的高低相对来说也更好衡量。在公司里面，技术人员要想获得晋升，重点就是依靠技术能力。IT行业覆盖的技术领域非常广，而且近些年的新技术也是层出不穷的，从入门到精通任何一门技术，都需要大量时间和精力的投入。那么，在面对这么多技术的时候，究竟要选择从哪个开始入手，真是一个难题。对于希望成为DevOps 工程师，甚至是 DevOps专家的你来说，究竟有哪些必须掌握的核心技术呢？**1. 代码能力**现在这个时代，代码能力可以说是最重要的硬实力了。IT行业自然不用说，像运维有运维开发，测试也有测试开发，就连产品经理都要懂代码，不然可能都没办法跟开发同学顺畅交流。对于工具平台自身的建设而言，代码能力自然是重中之重。这不仅仅在于通过写代码来实现工具平台本身，还在于你能了解开发的完整过程。这些平台的用户每天跟代码打交道的时间可能比跟人打交道的时间还多，如果你不能理解他们的日常工作方式，那么你做出来的工具平台，又怎么能真正解决团队的问题呢？``{=html}这里提到的**代码能力包含两个方面，分别是脚本语言能力和高级语言编程能力**。-   **脚本语言能力**。这对于运维工程师来说自然是驾轻就熟，各种    VIM、Emacs 手到擒来，Shell 和 Python    也是轻车熟路。而对于开发人员来说，难点不在于语法本身，而在于对关联操作系统和命令的理解上。毕竟，脚本语言是一种快速的自动化手段，追求的是高效开发，简单易用。-   **高级语言编程能力**。你需要至少掌握一门高级语言，无论是    Java、Python 还是 Ruby 和    PHP。**其实语言只是工具，你不用过度纠结于选择哪门语言，要求只有一个，就是你能用它来解决实际问题**，比如能够支持你实现面向移动端或者    Web    端的工具平台开发。**为了写出好代码，而不仅仅是写出能用的代码，你也需要对于一些常见的开发框架和开发模式有所了解**。这是一个相对漫长的过程，绝对不是什么"21    天精通 XX 语言"就够了。因为看得懂和写得好，完全是两码事。好的代码是需要不断打磨和推敲的。**与其说写好代码是一门技术，不如说是一种信仰**。我们团队的内部沟通群名叫作"WBC团队"，"WBC"也就是"Write BetterCode"的缩写，这其实也是我们团队对自己的一种激励。在日常的开发过程中，我们会不断发现和总结更好的实现方式，在内部分享，互相学习，从而持续提升代码能力。我截取了一部分我们最近优化流水线脚本的经验总结，你可以参考一下。其实，每个人都能总结出自己的代码心经。![](Images/8f47674c6873685f600e0319f9ea9008.png){savepage-src="https://static001.geekbang.org/resource/image/91/0b/9124fd4c7ef664ba04af700faca06e0b.jpg"}**2. 自动化能力**在自动化方面，你首先需要对CI/CD，也就是持续集成和持续交付，建立起比较全面的认知。因为 CI/CD可以说是 DevOps工程领域的核心实践，目前大部分公司都在集中建设软件的持续交付能力，尤其是以流水线为代表的持续交付平台，很多时候就同DevOps 平台划上了等号。接下来，为了实现全流程的自动化，你需要能够熟练使用 CI/CD各个关键节点上的典型工具，并且了解它们的设计思路。一方面，目前很多公司都在拥抱开源，参与开源，开源工具自身的成熟度也非常高，并且逐渐取代商业工具，成为了主流方案。通过直接使用开源工具，或者基于开源工具进行二次开发，也是自动化领域投入产出比最高的方式。所以，像版本控制工具Git、代码托管平台 Gitlab、CI 工具 Jenkins、代码扫描工具Sonar、自动化配置管理 Ansible、容器领域的 Docker、K8S等等，这些高频使用的工具都是你优先学习的目标。另一方面，**无论是开源工具，还是自研工具，工具与工具之间的链路打通也是自动化的重要因素**。所以，在理解开源工具的实现方式的基础上，就要能做到进可攻，退可守。无论是封装，还是自研，有了工具的加持，CI/CD也会更加游刃有余。关于 DevOps 的工具图谱，我跟你分享一个信通院的 DevOps能力成熟度模型版本，供你参考。值得注意的是，**工具不在多，而在精**。其实，工具的设计思路和理念有共通之处，只要精通单个节点上的工具，就可以做到以点带面。![](Images/98f1a27a146cc00d6230337d0ef2f393.png){savepage-src="https://static001.geekbang.org/resource/image/91/bd/91b7d3327892002d68029c7817fe06bd.png"}**3.IT 基础能力**我始终认为，运维是个特别值得尊敬的工种，也是 DevOps诞生的原点。如果你不是运维出身，那你要重点掌握运维的基础概念，最起码要了解**Linux操作系统方面的基础知识**，包括一些**常用的系统命令使用**，以及**网络基础和路由协议**等。毕竟，对于开发者来说，他们通常习惯基于IDE（集成开发环境）图形界面工作。比如，如果问一个 iOS开发同学怎么通过命令行的方式进行构建调试，或者如何用代码的方式实现工程的自动化配置，他可能就答不上来了。另外，随着基础设施即代码的技术不断成熟，你还要能看懂环境的配置信息，应用自动化构建、运行和部署的方式等，甚至可以自行修改环境和应用配置，这样才能实现所谓的开发自运维。虽然在大多数公司，运维的专业能力一般都会通过运维平台对外提供服务，但对于基础概念，还是需要既知其然，也知其所以然。**4. 容器云能力**云计算对于软件开发和部署所带来的变化是革命性的。未来企业上云，或者基于云平台的软件开发会慢慢成为主流。而容器技术又天生适合DevOps，Kubernetes 可以说是云时代的Linux，基于它所建立的一整套生态环境，为应用云化带来了极大的便利。所以，无论是容器技术的代表 Docker，还是实际上的容器编排标准Kubernetes，你也同样需要熟悉和掌握。尤其是在云时代，基于容器技术的应用开发和部署方式，都是DevOps 工程师必须了解的。**5. 业务和流程能力**在任何时候，DevOps 的目标都是服务于业务目标，DevOps本身也从来不是墨守成规的方式，而是代表了一种变革的力量。所以，加强对业务的理解，有助于识别出DevOps 改进的重点方向，而流程化的思维建设，有助于突破单点，放眼全局。很多时候，**企业需要的不仅仅是一个工具，而是工具所关联的一整套解决方案，其中最重要的就是业务流程**。对于 DevOps工程师来说，**要有能力发现当前流程中的瓶颈点，并且知道一个更加优化的流程应该是怎样的**，这一点也是制约工程师进一步拓展能力的瓶颈之一。举个例子，对于开发 DevOps平台工具来说，你可能认为最合适承担的团队就是开发团队，因为他们的代码能力最强。但是实际上，DevOps平台的设计，很多时候都是由最熟悉企业内部研发流程的团队来主导的。正因为DevOps工程师的工作应该同业务紧密联系，更加关注于全局交付视角，所以很多时候，配置管理、质量管理、项目管理和技术运维团队更多地在承担相近的角色。**毕竟，只有方向正确，所做的一切才是加法。**![](Images/06d7f3ac9537da0b3aa3c2aa508fba79.png){savepage-src="https://static001.geekbang.org/resource/image/df/d2/df7819fcd4372b837317754a4c72c9d2.png"}