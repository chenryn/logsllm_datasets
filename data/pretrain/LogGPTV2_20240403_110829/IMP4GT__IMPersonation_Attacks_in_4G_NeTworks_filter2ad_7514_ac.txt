The network encrypts the packet for the radio transmission to
the UE. On the radio layer, the malicious relay intercepts the
packet based on the known size and alters the IP protocol ﬁeld
(2) to forward it to the UE. The UE decrypts the packet and
forwards it to the operating system. Due to the usage of an
unsupported protocol, the packet is reﬂected with an ICMP
message including the received IP packet. In the next step,
the relay receives the reﬂected packet. From this point, we
differentiate between the information retrieval step A(cid:13) and the
connection establishment to the plaintext generation server B(cid:13).
A(cid:13) Retrieve Internal Information. In the information retrieval
step, we derive three pieces of information that we later need
in the attack: (i) the internal IP address and (ii) the TCP port
behind the NAT, and (iii) the Time To Live (TTL) of the
TCP proxy. While the internal IP address is required in each
attack step, i. e., set as the source or destination address, the
TCP port and the TTL are just used in the connection setup
with the plaintext generation server that conducts the plaintext
prediction.
We can derive this information from the ﬁrst
injected
TCP packet at the end of the original TCP connection. As
described above, the injected TCP packet gets reﬂected by the
UE’s IP stack including the original downlink IP packet. The
reﬂected original IP packet provides the required information
and is routed to the decryption server where we can access the
information. During our experiments in a commercial network,
we found that the provider’s ﬁrewall does not allow ICMP
packets with the type “destination unreachable/protocol not
supported”. This problem can be easily addressed: the relay
changes the ICMP type to echo reply to pass the ﬁrewall.
B(cid:13) Plaintext Server Connection Establishment. For estab-
lishing a connection to the plaintext generation server, we send
a crafted packet towards our plaintext generation server. This
packet creates a new NAT/ﬁrewall rule and thus opens it for the
plaintext connection. We use this connection for the generation
of new plaintext and thus the encryption of packets. In our
case, the plaintext generation server is a simple UDP server.
Again, we make use of the reﬂection mechanism and inject
another TCP packet with a known plaintext and a known
length, as described above. This time, when the packet is
reﬂected and sent back, the malicious relay can predict the
payload and the exact keystream. This is possible, as we
now know all internal parameters from step A(cid:13), i. e., the IP
address, TCP port, and TTL. The relay can transform the
incoming packet by extracting the keystream through xor-ing
the predicted plaintext to then encrypt it with its own content
by xor-ing the keystream again. Consequently, the relay can
send its own encrypted UDP packet in uplink direction. Finally,
the ﬁrewall/NAT establishes a rule allowing all
incoming
packets from this UDP tuple. The plaintext generation server
receives the incoming packet and can send packets in downlink
direction to the UE.
C. Attack Phase: Uplink IMP4GT
The uplink IMP4GT allows a full impersonation of a user
towards an arbitrary IP service (cf. Fig. 3), e. g., HTTP server.
To this end, the attacker must be able to encrypt packets in
uplink direction for establishing the connection and requesting
the content. Furthermore, the attacker must decrypt packets in
downlink direction to access the content sent from the server.
For both cases, we construct an oracle that exploits the IP
reﬂection mechanism and the missing integrity protection. In
the following, we describe the detailed attack phase for the
uplink encryption and downlink decryption.
1) Uplink Encryption: The uplink encryption enables the
attacker to create and encrypt legitimate IP packets for sending
them to the target HTTP server (cf. Figure 7). To do so, the
attacker must learn the valid keystream for a PDCP frame
6
UERelayLTE NetworkDNS ServerTCP ProxyHTTP ServerDecryptionServerPlaintextGeneration Server4. Derive information from reﬂected packetRetrieve Internal InformationPlaintext Server Connection Establishment1. Inject TCP PacketEstablishing TCP ProxyUnreachable ReﬂectionAB2. Protocol = CBT3. Protocol Unreachable4. Transform reﬂected packet into UDP for connection establishment2b. TCPConnectionEncrypted for the radio layer transmission1. DNS Spooﬁng2a. Redirect TCP ConnectionFig. 7. The uplink IMP4GT attack consists of uplink encryption exploiting the ping reﬂection and the downlink decryption based on the unreachable reﬂection.
and apply this to a packet sent in uplink direction. The core
idea for an oracle with these abilities is to inject a packet in
downlink direction, let the ICMP stack of the UE reﬂect this
packet, and then use the uplink packet as keystream. For the
uplink encryption, we can exploit the unlimited ping reﬂection,
as the plaintext
is known to the attacker and the correct
ICMP checksum can be calculated. In the following, we ﬁrst
describe the general procedure of the uplink encryption and
the ping reﬂection. Then, we go into more detail and discuss
the technical challenges of predicting the uplink plaintext.
In the ﬁrst step, the relay requests the plaintext generation
server to generate a UDP packet of a certain length n. The
plaintext generation server sends the UDP packet via the es-
tablished plaintext connection to the network, which performs
all necessary steps, including the radio layer encryption, and
forwards it to the UE (1). The relay intercepts the packet and
alters the IP protocol ﬁeld to ICMP. Further, it changes the
ICMP ﬁeld to echo request and sets the correct checksum
for the foreknown payload (2). When the baseband of the
UE receives the LTE frame, it decrypts it and forwards the
contained IP packet to the OS. The ICMP echo request triggers
the echo mechanism of the ICMP stack and the payload is
reﬂected due to the ping reﬂection mechanism. The resulting
IP/ICMP packet is encrypted and sent on layer two to the
adversarial relay (3), where it can predict the whole plaintext.
By that, the relay can derive the complete keystream by xor-ing
the predicted plaintext on the received PDCP frame. The relay
then uses the keystream to encrypt the target uplink packet,
also by xor-ing the keystream on the target uplink packet. The
relay sends the frame towards the commercial network, which
then decrypts the frame and forwards it to the Internet (4). In
this way, we can build an encryption oracle for uplink packets,
which can be used for sending arbitrary packets to the Internet
on behalf of the victim.
Plaintext Prediction. One important feature for the encryption
of a crafted packet
is the ability of predicting the exact
plaintext, as otherwise the relay cannot encrypt the packet with
a valid keystream. While the sent plaintext is known when it is
sent by the plaintext generation server, the header information,
Fig. 8. Overview of changes of the reﬂected packet for uplink encryption.
e. g., IP address or port, change until the relay receives the
packet. The general idea behind the plaintext prediction is to
keep track of all changes until they arrive at the relay.
Figure 8 depicts an overview of these changes to the
downlink packet until the relay receives it as a reﬂected uplink
packet. The payload generated by the plaintext generation
server itself remains unchanged. However, the IP header and
the UDP header underlie constant changes when passing
through the network. First, the NAT/ﬁrewall maps the ex-
ternal connection to the internal addresses by changing the
destination IP and port. Those changes need to be taken into
account when the relay transforms the packet into an ICMP
echo request. Therefore, the relay changes the protocol type
to ICMP and sets the ICMP header accordingly, including the
correct ICMP checksum (2.). The UE reﬂects the ICMP packet
and creates, therefore, a new IP header, i. e., by swapping
the source with destination IP and by changing the ICMP
type (3.). When this packet arrives at the relay, the relay can
deterministically replicate all changes from above, thus can
predict the exact plaintext, and subsequently extract the exact
keystream. The relay possesses now a valid keystream and can
encrypt its crafted packet.
2) Downlink Decryption: A bi-directional IP connection
also requires an attacker to decrypt the packet sent by the
7
UERelayLTE NetworkPlaintextGeneration ServerDecryptionServerHTTP Server1) Uplink Encryption: Ping Reﬂection1 IP / TCP / Payload2) Downlink Decryption: Unreachable ReﬂectionEncrypted for the radio layer transmission1 IP / UDP / Payload2 IP (proto=ICMP) / ICMP Echo Request / Payload3 IP / ICMP Echo Reply / Payload4 IP (dst=target) / TCP4 IP / ICMP (echo request) / Reﬂection2 IP (proto=CBT) / TCP / Payload3 IP / ICMP (Unreachable) / ReﬂectionKeystream Generation Server (1)UE Uplink (3): Predicted PlaintextNAT / FirewallRelay Downlink (2)Payload...ip.dstip.srcicmp.typeicmp.checkPayload...IPUDPPayload...ip.dstudp.dportPayload...ip.protoicmp.*target server to either maintain the connection or to access
information sent in response. For the downlink decryption, we
make use of the unreachable reﬂection, as the attacker has no
knowledge about the plaintext.
When the targeted HTTP server sends a downlink IP packet
to the alleged UE (cf. Figure 7), this packet is encrypted by
the commercial eNodeB and sent to the relay (1). The relay
intercepts the frame, alters the IP protocol header ﬁeld, and
forwards the frame to the UE (2). Again, the UE reﬂects
the packet and sets the destination IP address to the targeted
HTTP server (3). In the uplink direction, the relay modiﬁes
the destination address to the attacker’s decryption server.
Additionally, the relay changes the ICMP type to an echo
request (4), and forwards the frame to the commercial eNodeB.
The ICMP packet (containing the original TCP/IP downlink
packet) is decrypted and routed to the attacker’s decryption
server. In this way, the attacker is able to learn the content of
the downlink IP packet.
3) Recovering the Downlink Plaintext: Triggering the un-
reachable reﬂection requires to modify the content of the
packet, which in turn requires the attacker to recover the
exact downlink plaintext. When the relay receives the downlink
packet (1), it needs to change the protocol ﬁeld for triggering
the unreachable reﬂection. To compensate for this change, i. e.,
to not invalidate IP checksum, the relay can modify the total
length ﬁeld. Unfortunately, this leads to a situation in which
one byte of the payload is missing. However, this information
can be recovered based on the TCP checksum as follows: the
original TCP checksum was calculated by the HTTP server
and was not changed after the NAT, therefore, it still contains
information about the missing byte. The decryption server
recovers the byte by calculating the TCP checksum over the
received TCP data. In a second step, it subtracts the calculated
checksum from the original TCP checksum and obtains the
missing byte. Finally, the attacker can reconstruct the full
downlink TCP/IP packet.
To summarize, we explained how sequently combining the
uplink encryption with downlink decryption allows an attacker
to establish a fully-functional TCP/IP connection to any server
on the Internet with the victim’s identity.
D. Attack Phase: Downlink IMP4GT
The downlink impersonation allows an attacker to establish
a TCP/IP connection to the phone and thus to bypass any
ﬁrewall mechanism implemented in a given LTE network. This
attack can be compared with an attacker that is located in
the same local network: usually, local networks allow direct
IP access to all link-local devices. For a bi-directional TCP
communication, we must consider two cases: First, the attacker
must be able to encrypt TCP packets towards the UE and,
second, she must decrypt uplink trafﬁc sent by the UE. Figure 9
depicts both cases. Note that the downlink variant by itself does
not exploit the IP stack’s reﬂection mechanism.
1) Downlink Encryption: For encrypting a downlink
packet, the relay requests the plaintext generation server to
generate a UDP packet of a certain length, which is sent to the
UE via LTE (1). The relay intercepts the packet based on the
length and xors the known plaintext to the intercepted packet
to extract the keystream. The relay reuses the keystream to
Fig. 9. The downlink IMP4GT attack that combines downlink encryption and
uplink decryption.
encrypt its injected TCP packet by simply xor-ing the packet
to the keystream (2). For this, the relay needs to consider the
modiﬁcations made by the NAT or the routing process, similar
to those described in the ﬁrst step of the Section III-C1. In
particular, the NAT changes the destination address and port,
and the routers change the TTL.
2) Uplink Decryption: The UE responds to the downlink
TCP packet and sends an uplink TCP packet (1), which needs
to be decrypted. The relay cannot forward the packet as it is,
as the provider’s ﬁrewall is not aware of the TCP connection
and would drop the packet. Therefore, the relay changes the IP
protocol ﬁeld to ICMP and sets the ICMP type to echo request.
Changing the protocol ﬁeld again requires compensation, as
otherwise the IP checksum is invalid and the packet would
be dropped. The relay can compensate the protocol change by
modifying the type of service, as this can be predicted for TCP
connections. By changing the IP protocol to ICMP, the packet
passes the ﬁrewall (2) and is routed to the decryption server.
To summarize, we showed how an attacker can establish
a fully-functional TCP/IP connection to the UE by combining
the downlink encryption followed by the uplink decryption.
IV. PRELIMINARY EXPERIMENTS
We conduct several experiments to verify the IP stack’s
reﬂection mechanism and to investigate the openness of the
providers’ ﬁrewall for ICMP messages. These preliminary
experiments inﬂuence parameters of the real-world IMP4GT
attack that we discuss in Section V.
A. Reﬂection Mechanism
The full impersonation depends on the ability to encrypt
and decrypt packets, which we achieve by exploiting the
reﬂection mechanism of the UE. While the RFCs [2], [20]
specify the reﬂection mechanisms, it is unclear how operating
systems implement them within their IP stack. We investigate
how the reﬂection is implemented by Android and iOS, as
those two operating systems have the most signiﬁcant market
share. We explore the behavior for the ping and unreachable
reﬂection mechanisms and both IP versions (IPv4 and IPv6).
We determine two parameters: (a) reﬂected packet size and (b)
the reﬂection rate that is the ratio between the packets sent to
the device and the packets sent as a response. Both parameters
may inﬂuence the performance, i. e., data-rate of the attack.
Table I gives an overview of the resulting parameters for both
reﬂection mechanisms.
8
UERelayLTE NetworkPlaintextGeneration ServerDecryptionServer1) Downlink Encryption2) Uplink DecryptionEncrypted for the radio layer transmission1. IP / UDP / Payload2. IP / TCP Packet2. IP / ICMP1, IP / TCP PacketTABLE I.
OVERVIEW OF THE ICMP REFLECTION ON ANDROID AND
IOS
Method
Feature
Android
iOS
Ping
Unreachable
Size IPv4
Size IPv6
Response Rate IPv4
Response Rate IPv6
Size IPv4
Size IPv6
Response Rate IPv4
Response Rate IPv6
1452 byte (MTU)
1452 byte (MTU)
100 %
100 %
1452 byte (MTU)
1452 byte (MTU)
100 %
100 %
548 byte
1236 byte
rate limiting
rate limiting
0 byte
1236 byte
0 %
100 %