conditions must hold:
, sk
(cid:1)
(cid:1)
(cid:1)
(cid:1)
sk
(cid:1)
Verify(pk , m, σ) = 1
, m, ReSign(rk , σ)) = 1.
and
Verify(pk
That is, all signatures validly formed by either the signing
or re-signing algorithms will pass veriﬁcation.
Internal and External Security. Our security model pro-
tects users from two types of attacks: those launched from
parties outside the system (External Security), and those
launched from parties inside the system, such as the proxy,
another delegation partner, or some collusion between them
(Internal Security). We now provide both intuition and a
formalization of these security notions.
I. External Security: Our ﬁrst security notion protects
a user from adversaries outside the system (i.e., excluding
the proxy and any delegation partners). This is the proxy
equivalent of strong existential unforgeability under adaptive
chosen-message attack (where an adversary cannot create
a new signature even for a previously signed message) [1].
For some applications, it may also make sense to require
only the standard notion of existential unforgeability (where
a forgery must be on a new message) [15], although our
constructions are able to satisfy this stronger notion.
Formally, for any non-zero n ∈ poly(k) and all PPT algo-
rithms A,
Pr[{(pk i, sk i) ← KeyGen(1k)}i∈[1,n],
(t, m, σ) ← AOsign(·,·),Oresign(·,·,·,·)
({pk i
Verify(pk t, m, σ) = 1 ∧ (1 ≤ t ≤ n)∧
}i∈[1,n]) :
(t, m, σ) (cid:13)∈ Q] < 1/poly(k)
where the oracle Osign takes as input an index 1 ≤ j ≤ n and
a message m ∈ M , and produces the output of Sign(sk j, m);
the oracle Oresign takes as input two distinct indices 1 ≤
i, j ≤ n, a message m, and a signature σ, and produces the
output of ReSign(ReKey(pk i, sk i, pk j, sk j), pk i, σ, m); and Q
denotes the set of (index, message, signature) tuples (t, m, σ)
where A obtained a signature σ on m under public key pk t
by querying Osign on (t, m) or Oresign(·, t, m, ·).
In the above security notion, the proxy is required to keep
the re-signature keys private (or it is easy for an adversary
to “win”.). For some unidirectional schemes, however, one
might want these values to be public (i.e., making all users
proxies). When this is the case, there are no “external ad-
versaries” to the system, and thus we look instead to the
internal security guarantee below.
II. Internal Security: Our second security notion protects
a user, as much as possible, when they are fooled into trust-
ing a rogue proxy and/or delegation partner (who may be
colluding). Intuitively, there are three guarantees to make.
1. Limited Proxy: If the delegator and the delegatee
are both honest, then: (1) the proxy cannot produce signa-
tures for the delegator unless the message was ﬁrst signed
by one of her delegatees, and (2) the proxy cannot create
any signatures for the delegatee. This is identical to the
external security game, except that instead of a re-signing
oracle Osign, A may directly obtain the re-signature keys
via Orekey.
Unidirectional: For any non-zero n ∈ poly(k) and all PPT
algorithms A,
Pr[{(pk i, sk i) ← KeyGen(1k)}i∈[1,n],
(·,·)
(t, m, σ) ← AOsign(·,·),O
({pk i
Verify(pk t, m, σ) = 1 ∧ (1 ≤ t ≤ n)∧
rekey
}i∈[1,n]) :
(t, m) (cid:13)∈ Q] < 1/poly(k)
where the oracle Orekey takes as input two distinct indices
1 ≤ i, j ≤ n and returns the output of ReKey(pk i, sk i, pk j, sk j);
and Q denotes the set of pairs (t, m) where A obtained a
signature on m under public key pk t or one of its delegatee
key’s by querying Osign.
Q includes all messages associated with any Osign query.
Bidirectional: Since both parties mutually delegate, the set
2. Delegatee Security: If the delegatee is honest, then
he is “safe” from a colluding delegator and proxy. That
is, they cannot produce any signatures on his behalf. We
associate the index 0 to the delegatee.
Undirectional: For any non-zero n ∈ poly(k) and all PPT
algorithms A,
Pr[{(pk i, sk i) ← KeyGen(1k)}i∈[0,n],
(m, σ) ← AOsign(0,·),O
(pk 0,{pk i, sk i}i∈[1,n]) :
Verify(pk 0, m, σ) = 1 ∧ (m, σ) (cid:13)∈ Q] < 1/poly(k)
(·,(cid:18))
rekey
where (cid:30) (cid:13)= 0 and Q is the set of pairs (m, σ) such that A
queried Osign(0, m) and obtained σ.
Bidirectional: Since both parties are delegators, this prop-
erty does not apply.
3. Delegator Security: If the delegator is honest, then
she is “safe” from a colluding delegatee and proxy. That
is, there are distinguishable signatures for a user based on
whether she used her strong secret key or her weak secret
key. The colluding delegatee and proxy cannot produce
strong (a.k.a., ﬁrst-level) signatures on her behalf. We asso-
ciate the index 0 to the delegator.
Unidirectional: For any non-zero n ∈ poly(k) and all PPT
algorithms A,
Pr[{(pk i, sk i) ← KeyGen(1k)}i∈[1,n],
(m, σ) ← AOsign(0,·),O
(pk 0,{pk i, sk i}i∈[1,n]) :
Verify(pk 0, m, σ) = 1 ∧ (m, σ) (cid:13)∈ Q] < 1/poly(k)
(·,·)
rekey
where σ is a ﬁrst-level signature, and Q is the set of pairs
(m, σ) where A queried Osign(0, m) to obtain σ.
Bidirectional: This property is not required. (Although this
property would be interesting, it does not seem likely to be
achievable.)
3. PROXY RE-SIGNATURE SCHEMES
We begin our discussion of proxy re-signature schemes by
discussing the properties of these schemes that are either
necessary or simply desirable for our applications in Sec-
tion 4. Next, we motivate the need for improved schemes by
detailing certain inherent limitations of the original BBS [5]
scheme. We then present two secure proxy re-signature
schemes: bidirectional and unidirectional. The bidirectional
scheme Sbi is based on the short signatures of Boneh et
al. [10, 9]. The unidirectional scheme Suni is a novel El
Gamal-type algorithm over bilinear maps. We also suggest
an extension to the unidirectional scheme S
3.1 Properties We Need and Want
∗
uni.
Let us ﬁrst understand what properties we expect out of
a proxy re-signature scheme in addition to correctness and
security from Section 2. We now informally list what are,
in our opinion, the most desirable properties of a proxy re-
signature scheme. In Table 1, we show which properties we
are currently able to realize.
1. Unidirectional: The re-signature key rk A→B allows the
proxy to turn Alice’s signatures into Bob’s, but not Bob’s
into Alice’s. This property allows for applications where
the trust relationship between two parties is not necessarily
mutual. Schemes that do not have this property are called
bidirectional.
2. Multi-use: A message can be re-signed a polynomial num-
ber of times. That is, signatures generated by either the
Sign or ReSign algorithms can be taken as input to ReSign.
In constrast, one might imagine weaker, single-use schemes
where only signatures generated by Sign can be inputs to
ReSign.
3. Private Proxy: In a private proxy scheme, the re-signature
keys rk ’s can be kept secret by an honest proxy. Thus, a sin-
gle proxy may control which signatures get translated. In
public proxy schemes, the re-signature keys can be recom-
puted by an adversary passively observing the proxy.
Property
BBS [5] Sbi (3.3) Suni (3.4)
1. Unidirectional
2. Multi-use
3. Private Proxy
4. Transparent
5. Key Optimal
6. Non-interactive
7. Non-transitive
8. Temporary
No
Yes
No
Yes
Yes
No
No
No
No
Yes
Yes
Yes
Yes
No
No
No
Yes
No
No(cid:20)
∗
Yes
Yes
Yes
Yes
∗
Yes
∗
Table 1: We compare the properties of several proxy
re-signature schemes discussed in this work. The
symbol
denotes that the property can be provably
partially obtained or obtained by adding additional
overhead. For  , we provide some insight on how
this might be achieved.
3. Transparent: The proxy is transparent in the scheme,
meaning that a user may not even know that a proxy exists.
More formally, we mean that the signatures generated by
Alice on a message m using the Sign algorithm are compu-
tationally indistinguishable from her signatures on m gener-
ated by the proxy as the output of ReSign. Notice that this
implies that the input and the corresponding output of the
ReSign algorithm cannot be linked to each other.
5. Key Optimal: Alice is only required to protect and store
a small constant amount of secret data (i.e., secret keys)
regardless of how many signature delegations she gives or
accepts. Here, we want to minimize the safe storage cost
for each user. One might also wish to consider the size and
number of keys that a proxy is required to safeguard.
6. Non-interactive: Bob (the delegator) can create the re-
signature key rk A→B from his secret key sk B and Alice’s
public key pk A, i.e., the delegatee does not act in the dele-
gation process.
7. Non-transitive: The proxy alone cannot re-delegate sign-
ing rights. For example, from rk A→B and rk B→C , he cannot
produce rk A→C .
8. Temporary: Whenever a party delegates some of her
rights to another party, there is always the chance that she
will either need or want to revoke those rights later on.
Since it may not always be feasible for a delegator to change
her public key after every revocation, we are interested in
schemes that minimize revocation overhead. For example,
in the case of temporary proxy re-encryption schemes, it
is possible to revoke all delegations by changing a single
global parameter at each time step [2]. Of course, if the
re-signature proxy is trusted, then we can realize temporary
delegations for any proxy re-signature scheme by issuing the
appropriate instructions to the proxy.
3.2 Remarks on the BBS Scheme
In the BBS scheme, the re-signature key is necessarily
public since it is not possible to store it safely at the proxy.
Indeed, it would be enough to just observe a valid signature
and its transformation to be able to retrieve the re-signature
key and impersonate the proxy itself. Moreover, both parties
are forced to mutually share their secret keys as these can be
easily computed from the (public or exposed) re-signature
key. Let’s have a look, next, at the details of the BBS scheme
so that it is easier to argue about its limitations.
BBS Re-Signatures. Recall the BBS proxy re-signature
scheme [5] with global parameters (g, p, q, H), where g is a
∗
p of order q = Θ(2k) and H is a
generator of a subgroup of Z
hash function mapping strings in {0, 1}∗
to elements in Zq.
• Key Generation (KeyGen): On input the security
parameter 1k, select a random a ∈ Zq, and output the
key pair pk = ga and sk = a.
• Re-Signature Key Generation (ReKey): On input
two secret keys sk A = a, sk B = b (the public keys are
not required for this algorithm), output the resignature
key rk A→B = a/b (mod q).
• Sign (Sign): On input a secret key sk = a and a mes-
sage m, select random elements x1, . . . , xk ∈ Zq. Then,
compute r = (gx1 , . . . , gxk ) (mod p) and extract k
pseudorandom bits b1, . . . , bk from the output of H(r).
Finally, output the signature σ = (r, s), where s =
(s1, . . . , sk) and each si = (xi − mbi)/a (mod q).
• Re-Sign (ReSign): On input a re-signature key rk A→B,
a public key pk A, a signature σ, and a message m,
check that Verify(pk A, m, σ) = 1.
If σ veriﬁes, set
(cid:1)
(cid:1)
i = sirk A→B (mod q), and output the
r
= r and s
(cid:1)
(cid:1)
(cid:1)
signature σB = (r
k); other-
1, . . . , s
= (s
), where s
wise, output the error message ⊥.
• Verify (Verify): On input a public key pk A, a mes-
, s
(cid:1)
(cid:1)
sage m, and a purported signature σ = (r, s), com-
pute H(r) and extract pseudorandom bits b1, . . . , bk.
For each gxi ∈ r and si ∈ s, check that (pk A)si =
gxi /gmbi (mod p). If all check pass, output 1; other-
wise output 0.
Given any pair of signatures (σA, σB), where σA was cre-
ated by the Sign algorithm and σB is the result of the ReSign
algorithm on σA, anyone can compute the re-signature key
rk A→B as follows: Let σA = (r, s) and σB = (r, s
) be
signatures as described above, where s = (s1, . . . , sk) and
(cid:1)
(cid:1)
(cid:1)
k). Anyone can compute rk A→B = s
s
1/s1 =
a/b (mod q) and become a rogue proxy. Moreover, from
rk A→B, Alice (resp., Bob) can compute Bob’s (resp., Al-
ice’s) secret key.
(cid:1)
1, . . . , s
= (s
(cid:1)
Although the BBS scheme satisﬁes their security deﬁni-
tion (the scheme is called symmetric in [5]), it is clearly inad-
equate and cannot be used for many interesting applications,
including those suggested in the original BBS paper [5].
Alternatives? Finding suitable and secure proxy re-
signature schemes required a substantial eﬀort. Natural ex-
tensions of several standard signatures were susceptible to
the sort of problems above. To illustrate the intuition be-
hind this, consider a naive proxy re-signature construction
based on the popular Schnorr [23] signature. Let || denote
concatenation. Recall Schnorr signatures with key pairs of
the form (pk A, sk A) = (ga, a) and signatures of the form
(r, s) = (gk, aH(m||r) + k). One might think to give the
proxy rk A→B = (b − a), so that it can re-sign messages as
) = (r, s + rk A→BH(m||r)). However, as in the BBS
(cid:1)
(cid:1) − s)/H(m||r) =
) on
(r
scheme, anyone can compute rk A→B = (s
(b − a) from a signature (r, s) and its re-signature (r, s
a message m.
, s
(cid:1)
(cid:1)
We also considered a few new schemes (e.g. [11]), but it
was not obvious how to turn them into proxy re-signatures