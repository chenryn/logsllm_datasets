Currently, TypeScript requires that the `get` and the `set` types of
properties match. However, there are scenarios where, I think, it would be
very useful to have a `set` that is more accepting than the get.
For example: imagine you have a property of `Array>` type.
Today, this means that both the get and set would have to be of the same type,
and so setting the property would always be done via the array notation.
It seems reasonable, however, to allow the "setter" to be more forgiving and
let it coalesce a single string value into an array automatically. That way,
when setting the property, you could either do `cell.values = [[1]]` or just
`cell.values = 1`, and the class would accept either syntax. But for return
values, it would always return an array type, and so the `get` of the values
property should still be marked as `Array>` (that way you would
get all the good IntelliSense of having `.filter`, `.forEach`, etc., on the
return type).
    class Cell {
        private _values: Array>;
        get values():Array>{
            return this._values;
        }
        set values(values: Array>|string) {
            if (values instanceof Array) {
                this._values = >>values;
            } else {
                this._values = [[values]];
            }
        }
    }
Today, this code would trigger an error that "get and set accessors must have
the same type".  
The only workarounds available today are both less than ideal:
  1. Set the property of values -- both "set" and "get" -- to `any`. But in doing so, you lose all IntelliSense.
  2. Mark the property -- both "set" and "get" -- as `Array>|string`. However, while this solves the "set" problem, the "get" property loses a lot of the IntelliSense (`.filter`, `.forEach`), and is actually no longer true to reality (the return value _is_ always an array, not an "array or a string")
![image](https://cloud.githubusercontent.com/assets/2230453/8991826/f78d1cd2-36af-11e5-8acb-7f3619108997.png)
Would be great if the scenario of a "more inclusive `set` property" could be
supported.