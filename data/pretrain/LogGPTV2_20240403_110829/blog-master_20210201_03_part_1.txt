## PostgreSQL 14 preview - SQL标准增强, 递归(CTE)图式搜索增加广度优先、深度优先语法, 循环语法 - breadth- or depth-first search orders and detect cycles  
### 作者  
digoal  
### 日期  
2021-02-01   
### 标签  
PostgreSQL , 递归 , 图 , 图谱 , 深度 , 广度 , 循环  
----  
## 背景  
PostgreSQL 14 SQL标准增强, 图式搜索增加:  广度优先、深度优先语法, 循环语法 - breadth- or depth-first search orders and detect cycles.  
with recursive 支持 SEARCH and CYCLE 语法, 增强了PG在图中的使用.  
一些相关场景:  
[《PostgreSQL 家族图谱、社交图谱、树状关系、藤状分佣、溯源、等场景实践 - 递归,with recursive query (有向无环 , 有向有环)》](../202003/20200329_01.md)  
[《PostgreSQL 图式搜索(graph search)实践 - 百亿级图谱，毫秒响应》](../201801/20180102_04.md)  
[《小微贷款、天使投资(风控助手)业务数据库设计(图式搜索\图谱分析) - 阿里云RDS PostgreSQL, HybridDB for PostgreSQL最佳实践》](../201708/20170801_01.md)    
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=3696a600e2292d43c00949ddf0352e4ebb487e5b  
```  
SEARCH and CYCLE clauses master github/master  
author	Peter Eisentraut 	  
Mon, 1 Feb 2021 12:54:59 +0000 (13:54 +0100)  
committer	Peter Eisentraut 	  
Mon, 1 Feb 2021 13:32:51 +0000 (14:32 +0100)  
commit	3696a600e2292d43c00949ddf0352e4ebb487e5b  
tree	11f19c8c9e5757c44b8da02d0e1f7b41f8ec5f13	tree | snapshot  
parent	bb513b364b4fe31574574c8d0afbb2255268b321	commit | diff  
SEARCH and CYCLE clauses  
This adds the SQL standard feature that adds the SEARCH and CYCLE  
clauses to recursive queries to be able to do produce breadth- or  
depth-first search orders and detect cycles.  These clauses can be  
rewritten into queries using existing syntax, and that is what this  
patch does in the rewriter.  
Reviewed-by: Vik Fearing   
Reviewed-by: Pavel Stehule   
Discussion: https://www.postgresql.org/message-id/flat/PI:EMAIL  
```  
另外需要注意的是， cycly默认已经使用了深度优先， 所以如果使用了cycle就不要重复使用深度优先语法了。   
The cycle path column is computed in the same way as the depth-first ordering column show in the previous section. A query can have both a SEARCH and a CYCLE clause, but a depth-first search specification and a cycle detection specification would create redundant computations, so it's more efficient to just use the CYCLE clause and order by the path column. If breadth-first ordering is wanted, then specifying both SEARCH and CYCLE can be useful.   
https://www.postgresql.org/docs/devel/queries-with.html#QUERIES-WITH-RECURSIVE  
```  
+        [ SEARCH { BREADTH | DEPTH } FIRST BY column_name [, ...] SET search_seq_col_name ]  
+        [ CYCLE column_name [, ...] SET cycle_mark_col_name TO cycle_mark_value DEFAULT cycle_mark_default USING cycle_path_col_name ]  
 TABLE [ ONLY ] table_name [ * ]  
@@ -276,6 +278,48 @@ TABLE [ ONLY ] table_name [ * ]  
     queries that do not use recursion or forward references.  
+     
+    The optional SEARCH clause computes a search  
+    sequence column that can be used for ordering the results of a  
+    recursive query in either breadth-first or depth-first order.  The  
+    supplied column name list specifies the row key that is to be used for  
+    keeping track of visited rows.  A column named  
+    search_seq_col_name will be added to the result  
+    column list of the WITH query.  This column can be  
+    ordered by in the outer query to achieve the respective ordering.  See  
+     for examples.  
+     
+  
+     
+    The optional CYCLE clause is used to detect cycles in  
+    recursive queries.  The supplied column name list specifies the row key  
+    that is to be used for keeping track of visited rows.  A column named  
+    cycle_mark_col_name will be added to the result  
+    column list of the WITH query.  This column will be set  
+    to cycle_mark_value when a cycle has been  
+    detected, else to cycle_mark_default.  
+    Furthermore, processing of the recursive union will stop when a cycle has  
+    been detected.  cycle_mark_value and  
+    cycle_mark_default must be constants and they  
+    must be coercible to a common data type, and the data type must have an  
+    inequality operator.  (The SQL standard requires that they be character  
+    strings, but PostgreSQL does not require that.)  Furthermore, a column  
+    named cycle_path_col_name will be added to the  
+    result column list of the WITH query.  This column is  
+    used internally for tracking visited rows.  See  for examples.  
+     
+  
+     
+    Both the SEARCH and the CYCLE clause  
+    are only valid for recursive WITH queries.  The  
+    with_query must be a UNION  
+    (or UNION ALL) of two SELECT (or  
+    equivalent) commands (no nested UNIONs).  If both  
+    clauses are used, the column added by the SEARCH clause  
+    appears before the columns added by the CYCLE clause.  
+     
```  
```  
+  
+     
+    There is built-in syntax to compute a depth- or breadth-first sort column.  
+    For example:  
+  
+  
+WITH RECURSIVE search_tree(id, link, data) AS (  
+    SELECT t.id, t.link, t.data  
+    FROM tree t  
+  UNION ALL  
+    SELECT t.id, t.link, t.data  
+    FROM tree t, search_tree st  
+    WHERE t.id = st.link  
+) SEARCH DEPTH FIRST BY id SET ordercol  
+SELECT * FROM search_tree ORDER BY ordercol;  
+  
+WITH RECURSIVE search_tree(id, link, data) AS (  
+    SELECT t.id, t.link, t.data  
+    FROM tree t  
+  UNION ALL  
+    SELECT t.id, t.link, t.data  
+    FROM tree t, search_tree st  
+    WHERE t.id = st.link  
+) SEARCH BREADTH FIRST BY id SET ordercol  
+SELECT * FROM search_tree ORDER BY ordercol;  
+  
+    This syntax is internally expanded to something similar to the above  
+    hand-written forms.  The SEARCH clause specifies whether  
+    depth- or breadth first search is wanted, the list of columns to track for  
+    sorting, and a column name that will contain the result data that can be  
+    used for sorting.  That column will implicitly be added to the output rows  
+    of the CTE.  
+     
@@ -2305,10 +2338,39 @@ SELECT * FROM search_graph;  
+    
+   There is built-in syntax to simplify cycle detection.  The above query can  
+   also be written like this:  
+  
+WITH RECURSIVE search_graph(id, link, data, depth) AS (  
+    SELECT g.id, g.link, g.data, 1  
+    FROM graph g  
+  UNION ALL  
+    SELECT g.id, g.link, g.data, sg.depth + 1  
+    FROM graph g, search_graph sg  
+    WHERE g.id = sg.link  
+) CYCLE id SET is_cycle TO true DEFAULT false USING path  
+SELECT * FROM search_graph;  
+  
+   and it will be internally rewritten to the above form.  The  
+   CYCLE clause specifies first the list of columns to  
+   track for cycle detection, then a column name that will show whether a  
+   cycle has been detected, then two values to use in that column for the yes  
+   and no cases, and finally the name of another column that will track the  
+   path.  The cycle and path columns will implicitly be added to the output  
+   rows of the CTE.  
+    
+  
     The cycle path column is computed in the same way as the depth-first  
-    ordering column show in the previous section.  
+    ordering column show in the previous section.  A query can have both a  
+    SEARCH and a CYCLE clause, but a  
+    depth-first search specification and a cycle detection specification would  
+    create redundant computations, so it's more efficient to just use the  
+    CYCLE clause and order by the path column.  If  
+    breadth-first ordering is wanted, then specifying both  
+    SEARCH and CYCLE can be useful.  
```  
例子  
```  
+-- SEARCH clause  
+create temp table graph0( f int, t int, label text );  
+insert into graph0 values  
+       (1, 2, 'arc 1 -> 2'),  
+       (1, 3, 'arc 1 -> 3'),  
+       (2, 3, 'arc 2 -> 3'),  
+       (1, 4, 'arc 1 -> 4'),  
+       (4, 5, 'arc 4 -> 5');  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set seq  
+select * from search_graph order by seq;  
+ f | t |   label    |        seq          
+---+---+------------+-------------------  
+ 1 | 2 | arc 1 -> 2 | {"(1,2)"}  
+ 2 | 3 | arc 2 -> 3 | {"(1,2)","(2,3)"}  
+ 1 | 3 | arc 1 -> 3 | {"(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | {"(1,4)"}  
+ 4 | 5 | arc 4 -> 5 | {"(1,4)","(4,5)"}  
+ 2 | 3 | arc 2 -> 3 | {"(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | {"(4,5)"}  
+(7 rows)  
+  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union distinct  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set seq  
+select * from search_graph order by seq;  
+ f | t |   label    |        seq          
+---+---+------------+-------------------  
+ 1 | 2 | arc 1 -> 2 | {"(1,2)"}  
+ 2 | 3 | arc 2 -> 3 | {"(1,2)","(2,3)"}  
+ 1 | 3 | arc 1 -> 3 | {"(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | {"(1,4)"}  
+ 4 | 5 | arc 4 -> 5 | {"(1,4)","(4,5)"}  
+ 2 | 3 | arc 2 -> 3 | {"(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | {"(4,5)"}  
+(7 rows)  
+  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search breadth first by f, t set seq  
+select * from search_graph order by seq;  
+ f | t |   label    |   seq     
+---+---+------------+---------  
+ 1 | 2 | arc 1 -> 2 | (0,1,2)  
+ 1 | 3 | arc 1 -> 3 | (0,1,3)  
+ 1 | 4 | arc 1 -> 4 | (0,1,4)  
+ 2 | 3 | arc 2 -> 3 | (0,2,3)  
+ 4 | 5 | arc 4 -> 5 | (0,4,5)  
+ 2 | 3 | arc 2 -> 3 | (1,2,3)  
+ 4 | 5 | arc 4 -> 5 | (1,4,5)  
+(7 rows)  
+  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union distinct  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  