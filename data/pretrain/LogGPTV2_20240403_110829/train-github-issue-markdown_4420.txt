I've recently experimenting with `llvm.expect` to see if I can squeeze the
last bit of performance for error throwing (rather the non-error path). I
would like to use `llvmcall` but the simplest implementation gives me an error
that `@llvm.expect.i1` is not defined. Would it be possible to add another
parameter for `llvmcall` so that declaration is allowed?
I'm asking because
  1. It seems that `CUDA.jl` is using a form that allows it although when I tried that it didn't work.
  2. After reading the codegen for `llvmcall` I came up with a hack to do what I want (see below). So I think it would be nice to add explicit support for sth useful that is possible to do with a hack.
It seems pretty straightforward to implement such function but I don't want to
go ahead and do it myself now because IIRC @Keno has a more complete
implementation of it that is not in the `Base` yet (and that `CUDA.jl` seems
to be using sth similar). Is there any plan to get it in?
The hacky implementation is like this. The llvm code correctly contains the
`expect` call. This doesn't seems to affect the assembly but similar code in c
compiled with `clang` or `gcc` emit identical assembly as well so that's
probably normal.
    function likely(x::Bool)
        Base.llvmcall("""
                      %2 = tail call i1 @llvm.expect.i1(i1 %0, i1 true)
                      ret i1 %2
                      }
                      declare i1 @llvm.expect.i1(i1, i1)
                      define void @likely_dummy() {
                      ret void
                      """, Bool, Tuple{Bool}, x)
    end
    function unlikely(x::Bool)
        Base.llvmcall("""
                      %2 = tail call i1 @llvm.expect.i1(i1 %0, i1 false)
                      ret i1 %2
                      }
                      declare i1 @llvm.expect.i1(i1, i1)
                      define void @unlikely_dummy() {
                      ret void
                      """, Bool, Tuple{Bool}, x)
    end
    function f1(x::Int)
        if x > 0
            x
        else
            2
        end
    end
    function f2(x::Int)
        if likely(x > 0)
            x
        else
            2
        end
    end
    function f3(x::Int)
        if unlikely(x > 0)
            x
        else
            2
        end
    end
    @code_llvm f1(1)
    @code_llvm f2(1)
    @code_llvm f3(1)
    # @code_native f1(1)
    # @code_native f2(1)
    # @code_native f3(1)
The script prints
    define i64 @julia_f1_20826(i64) {
    top:
      %1 = icmp slt i64 %0, 1
      br i1 %1, label %L, label %if
    if:                                               ; preds = %top
      ret i64 %0
    L:                                                ; preds = %top
      ret i64 2
    }
    define i64 @julia_f2_20829(i64) {
    top:
      %1 = icmp sgt i64 %0, 0
      %2 = call i1 @llvm.expect.i1(i1 %1, i1 true)
      br i1 %2, label %if, label %L
    if:                                               ; preds = %top
      ret i64 %0
    L:                                                ; preds = %top
      ret i64 2
    }
    define i64 @julia_f3_20830(i64) {
    top:
      %1 = icmp sgt i64 %0, 0
      %2 = call i1 @llvm.expect.i1(i1 %1, i1 false)
      br i1 %2, label %if, label %L
    if:                                               ; preds = %top
      ret i64 %0
    L:                                                ; preds = %top
      ret i64 2
    }