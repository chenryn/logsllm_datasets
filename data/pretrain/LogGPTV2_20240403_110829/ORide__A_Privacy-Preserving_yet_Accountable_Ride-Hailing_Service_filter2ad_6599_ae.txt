### Table 3: Per-ride Bandwidth Requirements of ORide
**Parameters:** \( d = 4096 \), \( \log_2(q) = 124 \), and 4096 drivers available for a ride request (\( n = 4096 \)).

Compared to the naive SHE approach (S1), optimized approaches (S2 and S3) significantly reduce the bandwidth requirements for the riders.

### Section 9.2: Cryptographic Operations in ORide

Our ORide prototype includes the main cryptographic operations required for ride matching during the ride setup procedure (Section 5.4). Additional cryptographic operations, such as AC operations and blind signatures, needed for requesting a ride and setting up the proximity channel between the rider's app and the driver's app, are detailed in the evaluation of PrivateRide [39].

To measure the cryptographic overhead of ride-matching operations, we implemented a proof-of-concept ORide in C++ using the NFLlib library [30]. In our experiments, the service provider (SP), the rider, and the driver were all located on the same computer, eliminating network delays. However, the network delay would not impose a significant overhead because a ride-matching operation requires only one round-trip message between the rider and the SP, and one round-trip message between the SP and each driver. Additionally, the amount of data exchanged between the rider and the SP, and the SP and the drivers, is small (as discussed in Section 9.4). The SP can implement a timeout for responses from the drivers to ensure reasonable latency for the service.

Due to the dependency requirements of the NFLlib, porting the implementation to mobile platforms is non-trivial. To make our experiments more representative of smartphone performance, we did not use SSE or AVX optimizations for Intel processors in our evaluations. The source code is available at [36], and the ORide proof-of-concept implementation on smartphones is currently in progress.

### Section 9.3: Per-Ride Overhead

In this section, we describe our experimental setup and present the bandwidth and computational overhead per ride request for both the rider and the driver.

We used ORide’s prototype to estimate the overhead added for ride-matching operations in three settings:
- **S1:** The naive SHE approach (Section 4.2) without re-linearizations at the SP.
- **S2:** Ciphertext-packing optimizations with honest-but-curious drivers (i.e., drivers who follow the protocols correctly) (Section 5.4).
- **S3:** Ciphertext-packing optimizations with malicious drivers (Section 7.1).

#### Experimental Setup
To measure the performance of our system, we used a computer with an Intel i5-4200U CPU (2.6 GHz, 6 GB RAM) running Debian Jessie (Linux kernel 3.16). The security parameters were tuned to achieve an equivalent bit-security of more than 112 bits, exceeding current NIST standards for 2016-2030 [5]. With these parameters, the polynomial dimension is \( d = 4096 \), with coefficients of size 124 bits (each polynomial has a size of 62 KB). These parameters ensure 112-bits of security and correct operations for homomorphically adding up to 4096 encrypted locations in the same ciphertext and calculating the corresponding Euclidean distances. For more details, see Appendix A.2.

#### Bandwidth Overhead
- **For a Driver:**
  - **Downlink:** The SP forwards to each driver a public key and 2 polynomials of size 124 KB.
  - **Uplink:** Each driver sends back to the SP her encrypted planar coordinates, totaling 4 polynomials of size 248 KB.
  - If 4096 drivers respond to a ride request, setting S1 would require the SP to send 4096 distance ciphertexts (744 MB) to the rider, whereas S2 would require only one distance ciphertext (186 KB).

- **For a Rider:**
  - In all three settings, for each ride request, a rider sends to the SP a public key and two ciphertexts for her encrypted planar coordinates, totaling 6 polynomials (372 KB).
  - In setting S1, the number of distance ciphertexts a rider receives from the SP is equal to \( n \) (the number of responding drivers). In settings S2 and S3, it is significantly reduced to \( \lceil n/d \rceil \) due to ciphertext packing. A ciphertext distance, when avoiding re-linearizations, consists of 3 polynomials, thus having a total size of 186 KB.

#### Computational Overhead
As shown in Table 4, for both riders and drivers, the computational overhead introduced by key generation and encryption operations is small, i.e., 1.5 ms and 2.6 ms, respectively. Due to masking, setting S3 introduces a small computational overhead for the SP in homomorphic squared-Euclidean-distance computation compared to setting S2 (745 ms vs. 208.9 ms). However, settings S2 and S3 significantly reduce the computational cost for the SP (208.9 ms and 745 ms compared to 113868.8 ms required by S1). This also significantly reduces the decryption overhead for the rider, from 7823 ms in setting S1 to 2.2 ms in settings S2 and S3.

The results for the rider and driver are optimistic, as we used a laptop instead of a smartphone. However, assuming a performance difference of less than an order of magnitude between top multicore CPUs in smartphones and desktops, the computational overheads for key generation, encryption, and decryption are still acceptable in smartphones, around 15 ms, 26 ms, and 22 ms, respectively. Even if we consider a two-orders-of-magnitude difference, the overhead remains acceptable, as the total time to hail a ride is in the order of minutes [19].

### Table 4: Per-ride Computational Overhead of ORide
**Parameters:** \( d = 4096 \), \( \log_2(q) = 124 \), and 4096 drivers available for a request. Statistics (avg ± std.dev.) were computed from 1000 experiments.

| Setting | Algorithm | Gen. keys (ms) | Rider Encrypt (ms) | Driver Decrypt (ms) | Load key (ms) | Encrypt (ms) | Compute Dist. (ms) |
|---------|-----------|----------------|--------------------|---------------------|---------------|--------------|--------------------|
| S1      | Naive     | 1.51±0.06      | 2.6±0.2            | 7823.4±573.4        | 0.53±0.01     | 2.6±0.2      | 113868.8±6553       |
| S2      | Optimized | 1.51±0.06      | 2.6±0.2            | 2.2±0.1             | 0.53±0.01     | 2.6±0.2      | 208.9±4            |
| S3      | Optimized | 1.51±0.06      | 2.6±0.2            | 2.2±0.1             | 0.53±0.01     | 2.6±0.2      | 745.5±24.5         |

### Section 9.4: Riders' Anonymity and Drivers' Bandwidth Requirements

#### Anonymity Set Size
- **Manhattan (CTs):** 81.7% of rides have an anonymity set of at least 50.
- **Queens and Bronx:** All rides have an anonymity set of at least approximately 26,000.

#### Bandwidth Requirements for Drivers
- **Upload Speed:** For Manhattan with the zone granularity of census tracts, the required upload speed is less than 0.5 Mbps. For other zones, the required upload speed is less than 2 Mbps, which is provided by 3G or 3.5G networks.
- **Monthly Data Plan:** With zone setting Z1, a driver needs at most 10 GB of data per month. With zone setting Z2, 60% of drivers need less than 25 GB of data per month. This requirement is reasonable, as an unlimited data plan typically offers 20-26 GB of high-speed data for less than $100 [32].

#### Bandwidth Requirements for Riders
- The bandwidth requirements for a rider, per ride request, depend on the number of available drivers. Our experiments show that for both zone settings, the number of available drivers is less than 3,500. This means that with the chosen security parameters and proposed optimized packing approaches, the bandwidth requirements are manageable.

### Conclusion

In this paper, we proposed ORide, a practical solution that efficiently matches riders and drivers in a privacy-preserving way while offering key RHS features such as easy payment, reputation scores, accountability, and retrieval of lost items. ORide enables the SP to balance the trade-off between anonymity sets for riders and bandwidth requirements for drivers. For example, for a lower-bound anonymity-set size of 26,000 for rides from the boroughs of Queens and Bronx, drivers only need an Internet connection of at most 2 Mbps. This trade-off ensures large anonymity sets even in sparsely populated residential areas. We also demonstrated that ORide guarantees location privacy for the rider's destination, even in the case of targeted attacks.

For future work, we plan to implement a full prototype of the system on mobile platforms and design more advanced distance estimation algorithms.

### Acknowledgements

The authors are grateful to Chris Soghoian, Zhicong Huang, and Christian Mouchet for their insightful discussions and comments about the work.

### References
[1] http://www.theverge.com/2015/6/14/8778111/uber-threatens-to-fire-drivers-attending-protests-in-china. Last visited: Jan. 2017.
[2] http://mathworld.wolfram.com/VoronoiDiagram.html.
[3] http://browser.primatelabs.com/android-benchmarks. Last visited: Jan. 2017.
[4] http://browser.primatelabs.com/processor-benchmarks. Last visited: Jan. 2017.