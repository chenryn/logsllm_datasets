Table 3: Per-ride bandwidth requirements of ORide, with
d = 4096, log2(q) = 124, and there are 4096 drivers
available for a ride request (n = 4096). Compared to the
naive SHE approach S1, optimized approaches (S2 and
S3) signiﬁcantly reduce the bandwidth requirements for
the riders
9.2
Our ORide prototype features the main cryptographic op-
erations for the ride matching in the ride set-up procedure
(Section 5.4). Other cryptographic operations needed for
requesting a ride, i.e., AC operations and blind signa-
tures, and for setting up the proximity channel between
the rider’s app and the driver’s app, can be found in the
evaluation of PrivateRide [39].
To measure the cryptographic overhead of
ride-
matching operations, we implemented a proof-of-
concept ORide in C++, by relying on the NFLlib li-
brary [30]. In our experiments, the SP, the rider, and the
driver are located on the same computer, hence network
delays are not considered. However, the network de-
lay would not impose a considerable overhead, because
a ride-matching operation requires only one round-trip
message between the rider and the SP, and one round-
trip message between the SP and each driver. Also,
the amount of data exchanged between the rider and the
SP, and the SP and the drivers, is small (as discussed
in Section 9.4). Note that, similarly to current RHSs,
the SP can implement a timeout for responses from the
drivers such that the latency is reasonable for the service.
Due to the dependency requirements of the NFLlib, it
is not trivial to port the implementation to mobile plat-
forms. However, to make our experiments close to the
performance of smartphones, in all of our evaluations,
we did not use SSE or AVX optimizations for Intel pro-
cessors. The source code is made available at [36]. The
ORide proof-of-concept implementation on smartphones
is work in progress.
9.3 Per-Ride Overhead
In this section, we describe our experimental setup, and
presents the bandwidth and computational overhead per
ride request for a rider and a driver.
We used ORide’s prototype to estimate the overhead
added for ride-matching operations in three settings: (S1)
the naive SHE approach (Section 4.2) without using
re-linearizations at the SP, (S2) ciphertext-packing op-
timizations and honest-but-curious drivers (i.e., drivers
1246    26th USENIX Security Symposium
USENIX Association
Setting
Algorithm
S1
S2
S3
(ms)
Gen. keys
1.51±0.06
1.51±0.06
1.51±0.06
Rider
Encrypt
(ms)
2.6±0.2
2.6±0.2
2.6±0.2
Driver
Decrypt
(ms)
7823.4±573.4
2.2±0.1
2.2±0.1
(ms)
Load key
0.53±0.01
0.53±0.01
0.53±0.01
Encrypt
(ms)
2.6±0.2
2.6±0.2
2.6±0.2
(ms)
Load key
0.53±0.01
0.53±0.01
0.53±0.01
SP
(ms)
Compute Dist.
113868.8±6553
208.9±4
745.5±24.5
Table 4: Per-ride computational overhead of ORide (without AVX/SSE optimizations), for d = 4096, log2(q) = 124,
and there are 4096 drivers available for a request. Statistics (avg ± std.dev.) were computed from 1000 experiments.
Compared to the naive SHE approach (S1), optimized approaches (S2 and S3) signiﬁcantly reduces the computation
time for the SP and the decryption time for the riders.
follow the protocols correctly) (Section 5.4), and (S3)
ciphertext-packing optimizations and malicious drivers
(Section 7.1).
Experimental Setup. To measure the performance of
our system, we used a computer (Intel i5-4200U CPU,
2.6 GHz, 6 GB RAM) with Debian Jessie (Linux ker-
nel 3.16). The security parameters used in our experi-
ments are tuned to achieve an equivalent bit-security of
more than 112 bits, therefore exceeding current NIST
standards for 2016-2030 [5]. With this security target,
and a plaintext size of 20 bits the needed polynomial di-
mension is d = 4096, with coefﬁcients of size 124 bits
(each polynomial has a size of 62 KB). These parame-
ters guarantee both 112-bits of security and correct oper-
ations for homomorphically adding up to 4096 encrypted
locations in the same ciphertext and calculating the cor-
responding Euclidean distances.2 We refer the reader to
Appendix A.2 for more details about the possible granu-
larity a geographical area can have.
• Bandwidth overhead for a driver: In all three settings,
for each request:
(1) on the downlink, the SP for-
wards to each driver a public key, 2 polynomials of size
124 KB, and (2) on the uplink, each driver sends back
to the SP her encrypted planar coordinates, totaling 4
polynomials of size 248 KB.
ing 4096 drivers respond to a ride request, setting S1
would require the SP to send 4096 distance ciphertexts
(744 MB) to the rider, whereas S2 would require only
one distance ciphertext (186 KB).
• Computational overhead: As shown in Table 4, for
both riders and drivers, in all three settings, the com-
putational overhead introduced by key generation and
encryption operations are small, i.e., 1.5 ms and 2.6 ms,
respectively. Due to masking, setting S3 introduces
a small computational overhead for the SP in ho-
momorphic squared-Euclidean-distance computation,
compared to setting S2 (745 ms vs. 208.9 ms). How-
ever, noticeably, due to ciphertext packing, settings S2
and S3 signiﬁcantly reduce the computational cost for
the SP (208.9 and 745 ms compared to 113868.8 ms
required by S1).
It also signiﬁcantly reduces the de-
cryption overhead for the rider, from 7823 ms in setting
S1 to 2.2 ms in settings S2 and S3.
Note that the results for the rider and driver are opti-
mistic, as we used a laptop instead of a smartphone
(however, as stated before, CPU optimizations were not
used to reduce the difference). While such comparisons
are not straightforward, we can do a rough estimation
of the expected performance of ORide in smartphones.
For instance, comparing the performance scores of top
multicore CPUs in smartphones [3] with top multicore
CPUs in desktops [4], we can see that the difference is
less than an order of magnitude. Assuming such differ-
ence, then we can see that the computational overheads
for key generation, encryption and decryption are still
acceptable in smartphones, around 15 ms, 26 ms, and
22 ms, respectively. The overhead is still acceptable
even if we consider two orders of magnitude difference,
as the total time to hail a ride is in the order of min-
utes [19].
Assuming that a rider makes a ride request to the SP
and that there are 4096 drivers available for the request
(n = 4096), with the aforementioned security parameters,
the bandwidth requirements and computational overhead
per ride request, for a rider and a driver, are shown in
Table 3 and Table 4, and explained below.
• Bandwidth overhead for a rider: In all three settings,
for each ride request, a rider sends to the SP a public
key and two ciphertexts for her encrypted planar coor-
dinates. This totals 6 polynomials, a payload size of
372 KB.
Regarding the number of distance ciphertexts a rider
receives from the SP, in setting S1, it is equal to n,
i.e., the number of responding drivers. In settings S2
and S3, it is signiﬁcantly reduced to (cid:100)n/d(cid:101), due to ci-
phertext packing. A ciphertext distance, when avoiding
relinearizations (see Section 5.4), consists of 3 poly-
nomials, thus having a total size of 186 KB. Assum-
2We refer the reader to Section 6 in [16] for more details on the
choice of cryptographic parameters for FV. It is worth noting that we
have considered pessimistic bounds in order to cope with recently pub-
lished attacks that reevaluate the security of lattice-based cryptosys-
tems [7].
USENIX Association
26th USENIX Security Symposium    1247
Figure 3: System performance. (a) Anonymity-set size, (b) Upload speed requirement for the drivers, (c) Monthly-
data plan requirement for the drivers. Our results show that ORide is scalable while providing good anonymity-set for
riders.
9.4 Riders’ Anonymity and Drivers’ Band-
proaches are used, a rider needs to download only one
ciphertext distance, i.e., 186 KB, which is negligible.
Bandwidth requirements for drivers. Fig. 3b shows
the CDF of the upload speed required for the drivers; the
upload speed is computed by multiplying the number of
requests a driver receives per second with the size of the
ciphertexts she has to upload per request. Note that the
required downlink speed is half of the uplink speed, be-
cause the downlink payload is half the size of the up-
link payload (Section 9.3). It shows that for Manhattan
with the zone granularity of census tracts, the required
upload speed is less than 0.5 Mbps, and for other zones,
the required upload speed is less than 2 Mbps, which is
provided by 3G or 3.5G networks.
Monthly-data plan required for the drivers. Fig. 3c
shows the CDF of a data plan required for the drivers for
two aforementioned zone settings; this is calculated by
multiplying the total number of requests a driver would
receive during her waiting time with the uplink- and
downlink-payloads per request. The result shows that
with the zone setting Z1, a driver needs at most 10 GB
of data per month, and with the zone setting Z2, 60% of
drivers need less than 25 GB of data per month. This re-
quirement is reasonable: For example, in the U. S. , an
unlimited data plan typically offers 20-26 GB of high-
speed data for less than $100 [32]. In addition, the drivers
can reduce their data-plan consumption by using free
WiFi networks, such as LinkNYC [28]. Also, note that
the results presented also show that ORide can scale, be-
cause current RHSs (e.g., Uber) accounts for only 15%
of the ride pick-up requests in NYC [43].
The requirements on bandwidth for the drivers and
the anonymity-set sizes for riders enables the SP to de-
ﬁne the zones that balance the trade-off between the two
aforementioned requirements. For example, for areas
that have a high density of ride activities such as Man-
hattan, the SP could discretize the borough into zones
of CTs or NTAs, or combinations of CTs and NTAs.
Note that, as shown earlier, at the granularity level of
CTs (Z1), the anonymity set provided by ORide for the
width Requirements
In this section, we present the trade-off between the ride-
anonymity set vs. bandwidth requirements for the riders
and drivers, by using the real data-set presented in Sec-
tion 9.1.
Due to the high demand of taxi rides in Manhattan
w.r.t. lower activity in other boroughs in NYC (from our
data-set, Manhattan accounts for 90% of ride requests),
we deﬁne two zone settings as follows.
• Setting one (Z1): Manhattan is divided into census
tracts (CTs). Each CT is one zone. The boroughs of
Queens and Bronx are merged into one zone, and the
boroughs of Brooklyn and Staten Island are merged into
one zone.
• Setting two (Z2): Manhattan is divided into neighbor-
hood tabulation areas (NTAs). Each NTA is one zone.
Similarly to setting one, the boroughs of Queens and
Bronx are merged into one zone, and the boroughs of
Brooklyn and Staten Island are merged into one zone.
Estimation of the anonymity set. As explained in Sec-
tion 8, the number of rides in a day from a zone is a
lower-bound estimation of the anonymity set for a ride.
Fig. 3a shows the experimental cumulative distribution
function (CDF) of the lower-bound anonymity-set size.
It can be observed that, for Manhattan with the zone
granularity of census tracts, 81.7% of the rides have an
anonymity set of size at least 50, and for a zone con-
sisting of Queens and Bronx, all of the rides have an
anonymity-set size of at least approximately 26,000.
Bandwidth requirements for riders. The bandwidth
requirements for a rider, per ride request, depends on
the number of available drivers. Our experiments show
that for both zone settings, for all ride requests, the num-
ber of available drivers is less than 3,500. This means
that with the security parameter chosen (as presented in
Section 9.3) and when proposed optimized packing ap-
1248    26th USENIX Security Symposium
USENIX Association
 0 20 40 60 80 100100101102103104105Proportion of rides [%](a) Anonymity-set size 0 20 40 60 80 100 0 0.5 1 1.5 2Proportion of the time [%](b) Upload speed [Mbps]Zones: Manhattan CTsManhattan NTAsQueens + BronxBrooklyn + Staten 0 20 40 60 80 100 0 10 20 30 40 50Proportion of drivers [%](c) Data plan [GB]Zone settings: Z1Z2small: when Z1 is used, in more than 45% of the cases,
the driver selected by ORide and the ideal solution is the
same, and, in nearly 80% of the cases, the extra driv-
ing distance is less than 0.5 km. In addition, the size of
the zone has only negligible effects on the optimality of
the matching algorithm: If the set of all the drivers avail-
able in NYC was used for the ORide matching algorithm,
compared to the ideal solution, 78.7% of the cases would
have an extra distance of less than 0.5 km, compared to
76.2 % and 76.8 % of the cases when Z1 and Z2 were
used, respectively.
10 Conclusion
In this paper, we have proposed ORide, a practical so-
lution that efﬁciently matches riders and drivers in a
privacy-preserving way while still offering key RHS fea-
tures such as easy payment, reputation scores, account-
ability, and retrieval of lost items. ORide enables the
SP to choose a balanced trade-off between anonymity
sets for riders vs. bandwidth requirements for the drivers.
For example, for a lower-bound anonymity-set size of
26,000 for rides from the boroughs of Queens and Bronx,
drivers only need to have an Internet connection of at
most 2 Mbps. The trade-off enables the SP to deﬁne the
zones such that all users in the system are guaranteed
large anonymity sets, even if they are in sparsely popu-
lated residential areas with sparse ride activities (by ex-
panding the zones). We have also shown that, even in the
extreme case of targeted attacks, i.e., a curious SP wants
to know the destination of a rider given the time and lo-
cation of a rider’s pick-up event, the location privacy of
the rider’s destination is still guaranteed.
For part of our future work, we plan to implement
a full prototype of the system on mobile platforms and
to design more advanced distance estimation algorithms,
instead of the Euclidean distance.
Acknowledgements
The authors are grateful to Chris Soghoian, Zhicong
Huang and Christian Mouchet for their insightful discus-
sions and comments about the work.
References
[1] http://www.theverge.com/2015/6/14/8778111/uber-
threatens-to-fire-drivers-attending-protests-in-
china. Last visited: Jan. 2017.
[2] http://mathworld.wolfram.com/VoronoiDiagram.html.
[3] http://browser.primatelabs.com/android-
benchmarks. Last visited: Jan. 2017.
[4] http://browser.primatelabs.com/processor-
benchmarks. Last visited: Jan. 2017.