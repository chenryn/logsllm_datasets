### 图7. PostMark与ClamAV反病毒即时扫描性能

在文件打开时，使用非缓冲I/O并设置文件系统事务数量为100,000次的情况下，PostMark与ClamAV反病毒即时扫描的性能如下：

- 1800
- 1600
- 1400
- 1200
- 1
- 2
- 3
- 4

线程数

对于PostMark测试，我们使用多线程策略管理器（图7）。随着线程数的增加，TXBOX的性能显著提升，而Linux+Dazuko的性能则基本保持不变。当线程数为4时，TXBOX的性能比Linux+Dazuko高出2.3倍。

### 七、局限性

基于内核的安全监控容易受到内核攻击。与其他基于操作系统的安全强制机制一样，TXBOX旨在防止恶意用户级代码。如果操作系统内核被攻破，恶意代码可能会禁用TXBOX或干扰其运行。针对内核恶意软件的防御不在本文讨论范围内，但一般来说，要在内核攻击面前保持安全强制机制的完整性，需要一个外部的信任源，例如可信硬件（如[43, 50]）或虚拟机（如[44, 57]）。

事务语义可能改变沙箱进程的行为。将每个不受信任的进程放在TXBOX沙箱中运行的一个可能副作用是，良性沙箱进程对共享资源的访问可能会由于与其他沙箱进程的事务冲突而失败（见第四章）。这通常表明存在竞态条件，本身也可能是一个问题。此外，我们预期在正常执行过程中，只有不受信任的应用程序会被沙箱化，因此主机上的沙箱化进程数量相对较少。TxOS具有自动重试机制，如果设置该机制，它会透明地尝试重新执行失败的事务。重试次数是一个可配置参数。如果事务因安全违规而被中止，则不会自动重新启动（见第五章A节）。

自动将应用程序包装在系统事务中的次要问题是，当应用程序本身使用系统事务进行内部同步时。当前TXBOX只提供扁平嵌套；嵌套事务与其父事务使用相同的工作集。TXBOX可以通过对系统事务机制进行一些简单的扩展来隔离嵌套的兄弟事务，这留待未来工作解决。

事务状态不共享。我们的并行化实验使用了ClamAV [9]，这是一个相对简单的扫描器，用于查找已知病毒的位模式。更复杂的反病毒工具可能需要观察程序的执行以决定其是否为恶意。为了与沙箱进程并行运行这些工具，TXBOX必须与工具共享进程的事务状态。这在我们的当前原型中不支持，但在概念上没有困难。

共谋恶意软件可能绕过安全策略。任何涉及多个系统调用的非平凡策略都可能被在同一主机上独立执行的两个或更多共谋恶意程序违反。考虑一个非常简单的策略：“如果一个程序先调用系统调用A，再调用系统调用B，则该程序是恶意的。”第一个恶意程序调用A并将其内部状态保存在本地文件中。第二个程序读取第一个程序的状态并调用B，从而达到与单个违规程序相同的效果。显然，更复杂的策略也可以通过类似的攻击绕过。没有任何沙箱机制可以可靠地防止这种情况。

生成非常大的工作集的进程会被终止。沙箱进程可能通过执行无关操作来膨胀其事务工作集。如果TXBOX内存不足，无法存储任何进程的工作集，该进程将被终止，事务将回滚。TXBOX目前不支持交换出进程的工作集，因为这可能会导致拒绝服务攻击的机会。这种方法也阻止了对长寿命应用程序的沙箱化，因为TXBOX无法区分长时间运行且合法累积了大量工作集的程序和故意膨胀工作集的恶意程序。

另一种方法是进行中间提交。当沙箱进程的工作集变得太大时，TXBOX检查该进程是否已经违反了沙箱策略。如果是，则终止该进程并回滚事务。如果策略尚未被违反，则提交事务并开始一个新的事务，但TXBOX会保留旧事务的跟踪信息，并将其合并到新事务的跟踪中。

这种方法保留了TXBOX检测跨越提交点的违规行为的能力，但在检测到违规时牺牲了完全恢复能力，因为进程只能回滚到最后一个提交点。这是标准系统调用监控的严格泛化，后者在每次系统调用时提交。

### 八、结论

多核架构的日益流行推动了新的软件并发管理机制的发展。其中一个机制是系统事务，它允许一个进程对系统状态的一系列更新原子性地执行，并与其他进程隔离。我们展示了系统事务为实现安全高效的沙箱提供了强大的原语。

TXBOX是我们基于修改后的Linux构建的原型沙箱系统，它能够对不受信任的程序进行推测性执行，并从其有害影响中自动恢复。通过检查程序的系统调用及其对系统资源的访问，TXBOX安全监控器可以确定程序是否符合所需的安全策略。支持的策略包括系统调用自动机以及跨多个系统调用的数据流和访问控制策略。如果检测到安全违规，TXBOX将中止包含恶意程序的事务，并恢复系统，就好像该进程从未执行过一样。

与许多基于系统调用插入的工具和基于推测性执行的监控器不同，TXBOX不能被TOCTTOU（时间检查到使用时间）和其他并发攻击绕过，也不能被利用内核或文件系统状态镜像不正确或行为随是否启用安全检查而变化的分裂人格恶意软件绕过。

TXBOX结合了基于内核的强制执行和用户级策略。这带来了较低的性能开销，使TXBOX能够在生产系统中使用，尤其是在那些已经需要系统事务来管理系统资源并发访问的系统中。TXBOX还通过在一个核心上执行不受信任的应用程序并在另一个核心上并行进行扫描，提高了多核处理器上的即时反病毒扫描性能。

随着系统事务的普及和商品操作系统对其的支持，安全强制机制应充分利用它们。我们认为TXBOX是朝这个方向迈出的一步。

### 致谢

我们感谢David Wagner为我们提供的许多宝贵意见，以及Emmett Witchel的深刻建议和他对TxOS开发的指导。本研究部分得到了NSF拨款CNS-0746888和CNS-0905602、Google研究奖以及AFOSR拨款FA9550-08-1-0352的支持。

### 参考文献

[略]

希望这些改进能使文本更加清晰、连贯和专业。如果有任何进一步的需求，请告诉我！