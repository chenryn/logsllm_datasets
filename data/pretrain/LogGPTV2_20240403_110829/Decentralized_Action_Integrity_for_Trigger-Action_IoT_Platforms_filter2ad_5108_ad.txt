### Supported Functions and Token Scoping

In our example, an external party needs to call the `OnNewItem` function with a string value of `"https://DTAP-cloud.com/new item"`. Consequently, the client can obtain a rule-specific token that is scoped to execute only `OnNewItem('https://DTAP-cloud.com/new item')`. In DTAP, a scope is equivalent to the name of a function in an online service.

### Overcoming the Challenge of Increased Prompts

Our design addresses the challenge of increased prompts when using fine-grained tokens through two key principles. 

### DTAP Authorization Phases

**Figure 4:** The DTAP authorization process consists of four phases:
1. **Channel Signup Phase**: Clients obtain scope-to-function mappings for each online service.
2. **Channel Connection Phase**: Clients gain XTokens for the online services they wish to use.
3. **Trigger Setup Phase**: Tokens are used to request rule-specific tokens.
4. **Action Setup Phase**: Similar to the trigger setup, but for action functions.

### Action and Trigger Setup

During the trigger setup, the following information is transmitted to the action service:
- Action XToken
- Trigger service’s X509 certificate
- Name of the trigger function (e.g., `OnNewItem`)
- Name of the action function (e.g., `send_email`)
- User ID of the current user
- Any action function parameters

The action service then returns a rule-specific token and associates all this information with the token, effectively binding it to a specific trigger function, action function, and user.

At this stage, the DTAP-Client has obtained two rule-specific tokens required to execute the rule. It transmits these tokens along with a rule description to the DTAP-Cloud, which sets up a callback to itself whenever the trigger condition (e.g., a new item added to a shopping list) occurs.

### Rule Setup and Client Availability

Rule setup involves the trusted client, making it dependent on the client's availability. Unlike traditional trigger-action platforms that host the rule setup interface as a highly available cloud service, our design allows rule programming only when a user client (such as a phone app or desktop app) is available. We do not consider this a significant limitation given the infrequent nature of rule setup and the overall security improvement. The critical function of executing rules at scale remains independent of the trusted client, leveraging the benefits of cloud computing for high reliability and availability.

### Channel Signup

In traditional trigger-action platforms, the platform knows which scopes to request for various trigger and action functions because channels store these mappings in the platform’s cloud infrastructure. In DTAP, this infrastructure is untrusted. To address this, online services create signed scope-to-function mappings and host them at a well-known location. These mappings are signed using the private key corresponding to the service’s X509 certificate, and clients retrieve these signed mappings during the channel signup phase (Figure 4).

### Rule Execution

At runtime, when a new item is added to the shopping list, the trigger service generates a trigger blob:

```
TriggerBlob = [Time, TTL, TriggerScope, b64(TriggerData), UserID, SIG]
SIG = Sign with SHA256(TriggerServicePrivateKey, Time|TTL|TriggerScope|b64(TriggerData)|UserID)
```

- `Time` is the timestamp when the blob was created.
- `TTL` specifies the period for which the blob is valid.

The trigger service transmits this blob to the DTAP-Cloud, which looks up the appropriate rule and invokes the action function using the rule-specific token. During this invocation, the DTAP-Cloud makes an HTTP request including the trigger blob, the rule-specific action token, and parameters.

### End-to-End Rule Verification

The DTAP-Cloud executes the rule by transmitting the trigger blob and the action token to the action service (Figure 6). The action service performs the following verifications:
1. **V1**: Verify the existence of the passed rule-specific token.
2. **V2**: Verify the signature on the trigger blob using the X509 certificate of the triggering service.
   - **V2.1**: Ensure that `Time > PreviousTime` to prevent replay attacks.
   - **V2.2**: Verify that `TTL > CurrentTime - Time` to ensure the blob is still valid.

### Handling Conditions with Predicates

To handle conditions, the DTAP-Client allows associating a predicate with the action token. This predicate is expressed over fields of the trigger data part of the signed trigger blob. The DTAP-Client maps the user's rule condition to a predicate and instructs the action service to associate it with the rule-specific token. At runtime, the action service verifies that the predicate is true.

### Deployability of DTAP

Our goal is to provide a foundation for improving the security of trigger-action platforms. DTAP is a clean-slate design, but several components are readily deployable:

- **OAuth 2.0 Protocol**: DTAP additions are fully backward-compatible. No changes are required to existing software implementing the protocol.
- **Online Services**: Online services need to understand rule-specific tokens and XTokens. We have implemented a library for developers to easily add support.
- **Trigger-Action Platforms**: The cloud component of trigger-action platforms does not require changes. We have prototyped a version of DTAP that uses existing platforms.

We also outline a proxy-based approach to incrementally introduce DTAP support in online services.