approaches 
for 
problems. 
PeerPres­
of multiple 
systems to find 
a working configuration. 
configuration 
analysis 
dealing with software 
sure [35] uses statistical 
and suggest 
a configuration 
whether the system is working correctly. 
to detect configuration 
tions based on causality 
problems 
analysis. 
problem by using predicates 
Chronus [36] pinpoints 
that determine 
AutoBash [32] aims 
and suggest 
corrective 
ac­
3 Our Approach 
This section 
describes 
the design of our recovery 
system. 
the persistent 
by a bug or a misconfiguration 
in  a web ap­
identify 
Our aim is to help the administrator 
data corrupted 
recover 
plication, 
the rest of the application. 
First, 
model assumed by our recovery 
an overview 
and the rest describes 
and selectively 
system. 
this data without 
we present 
Section 
3.2 provides 
our system in more detail. 
the application 
affecting 
3.1 Application 
Model 
designed 
of the presentation, 
is typically 
A web application 
consisting 
tiers. 
by issuing 
at the presentation 
architecture, 
and database 
the web application 
actions 
plication 
quest makes database 
cation data and configuration 
(or client) 
logic. The application 
queries 
layer that invoke the ap­
by each re­
logic executed 
or transactions 
information. 
to access appli­
requests, 
which are external 
Our recovery 
system takes advantage 
of several 
activities 
features 
and data 
to track bug-related 
most web applications 
for concurrency 
control 
store their persistent 
and easy search ca­
which allows reusing 
modifications 
First, 
of web applications 
corruption. 
data in databases 
pabilities, 
the persistent 
web applications 
safe languages 
itoring 
application 
preter, 
modifications 
the database 
logs for tracking 
are generally 
made by the application. 
Second, 
in high-level 
or type­
written 
such as PHP or Java, allowing 
easier mon­
an unmodified 
PHP 
of the application. 
For example, 
Our system consists 
of a monitoring  component 
phase), 
and data recovery 
(on-line 
ing during run-time 
perform analysis 
tected (post-corruption 
is relatively 
using a three tier 
(or administrator) 
application-logic 
cation, 
database 
Monitoring 
tiers gives our system the ability 
phase). 
lightweight, 
and broadly 
the application 
interacts 
allowing 
requests 
tiers, 
with 
operat­
and two components 
that 
after corruption 
is de­
The monitoring 
component 
it tracks user 
across the three tiers of the appli­
speaking, 
data recovery 
at request 
and tracking 
requests 
to perform generic 
recovery. 
granularity. 
at all these 
A user or an administrator 
namely at the presentation, 
application-logic 
and the 
The analysis 
and recovery 
components 
are used after cor­
such as an administrator 
determining 
that 
as expected. 
These components 
logs, to guide the administrator 
during the monitoring 
phase, includ­
through the re­
is detected, 
ruption 
a web page does not display 
use the data collected 
ing database 
covery process. 
across the application 
mine corruption 
recovery. 
transactions 
ations that caused data corruption. 
related 
The recovery 
events, 
component 
to selectively 
revert 
component 
helping 
The analysis 
tiers, 
tracks dependencies 
the administrator 
for effective 
deter­
and is crucial 
generates 
compensating 
the effects 
of database 
oper­
can be monitored 
rather than requiring 
by instrumenting 
binary rewriting 
the PHP inter­
or source-code 
3.3 Monitoring 
for instrumentation. 
Third, web servers 
often creating 
lation, 
process 
and any interaction 
a separate 
between requests 
treat each user request 
per request 
independently, 
to ensure iso­
occurs using 
tiers of the application, 
We chose requests 
because they are the smallest 
allowing 
The monitors 
track and correlate 
requests 
request-level 
across all the 
data recovery. 
for recovery, 
as the minimal granularity 
logical 
unit of application 
in-
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
83 
DSN 2010: Akku & Goel 
2010 IEEE/IFIP International 
Conference 
on Dependable Systems 
& Networks (DSN) 
Client 
Dependencies: 
Application 
Dependencies: 
1. User-level 
2. Session-level 
1. Request-level 
2. Program-level 
Database 
Dependencies: 
1. Row-level 
2. Field-level 
R1 
Figure 1. Dependencies across layers. 
applications execute 
and they are relatively 
a request 
into a transaction 
during recovery, 
thus 
code at the granularity 
independent. 
In essence, 
of 
application-level 
as shown later in Section 
4.2. 
inconsistencies 
after the recovery 
teraction 
(i.e., 
requests), 
we convert 
reducing 
operation 
The monitors 
log sufficient 
information 
transactions, 
to database 
each request 
cific tables and rows that were modified. 
transaction 
allow selectively 
modifications 
by a request. 
mappings, 
performed 
reverting 
together 
with the database 
undo log, 
data 
the effects of all persistent 
to allow mapping 
and transactions 
to spe­
These request 
and 
The transaction 
mapping is an index into the database 
in transaction 
ex­
ID is ordered 
number (LSN) of the 
The transaction 
order, since we assume that the database 
isolation. 
undo log. The key of the index, which we call a transac­
tion ID, is the commit log sequence 
transaction. 
ecution 
alizable 
requests, 
transaction 
It also logs the queries 
application-specific 
mentation 
code, and it does not depend on application 
The request 
ID of all the transactions 
issued by each transaction 
does not require 
information 
This ordering 
as described 
is important 
mapping logs the 
described 
This instru­
uses seri­
and some 
later. 
later. 
correctness. 
issued by each request. 
for replaying 
any changes to the application 
3.4 Analysis 
R2 
R3 
Figure 2.  A request dependency graph. 
databases 
The analysis 
component 
needs to know the read and write 
a dependency. 
overheads. 
previously 
write sets, because 
the database 
at the row level. However, 
The monitor 
cap­
already 
main­
set of each query to generate 
tures row-level 
tains undo information 
because they do not need it 
do not log read set information, 
and this logging imposes significant 
This prob­
in two ways, other than 
lem has been addressed 
simply logging 
template 
the query based on the parameters 
However, 
for each query issued by the application. 
is instrumenting 
dencies 
ates dependencies 
during normal operation. 
The second method 
and store the depen­
gener­
for each query, and then materialize 
phase [23]. This approach 
this method requires 
more accurately, 
during the on-line 
the database 
manual creation 
to generate 
but affects 
the rows read by 
passed to the query [19]. 
the read sets. The first is to create a read-set 
of a template 
performance 
After corruption 
is detected, 
uses our 
the administrator 
that trigger 
the 
one or more initial 
requests 
in the application. 
dependent 
requests 
Then the analysis 
using a method sim­
manual cre­
but without 
requiring 
an approximate, 
of the query read set by parsing 
the tables 
accessed. 
but conserva­
the query and 
This simple method for gen­
graph com­
in  a larger dependency 
read-set 
generates 
templates, 
It derives 
tools to identify 
bug or vulnerability 
component 
ilar  to 
ation of templates. 
tive estimate 
determining 
erating 
pared to the previous 
pendency 
accuracy 
but not the overall 
application-level 
read sets results 
tainting 
graph only affects the time to perform recovery, 
approaches. 
However, 
this larger de­
of our solution, 
because we use 
as described 
below. 
The analysis 
component 
helps determine 
data corruption 
recovery. 
for effective 
state of the application 
(i.e., 
tables) 
and is crucial 
The analysis 
After the analysis, 
the current 
activities, 
or loss related 
Before the analysis, 
database 
is saved. 
box environment. 
be performed 
tion. The analysis 
the monitoring 
cies, at the database, 
Figure I. These dependencies 
across the multiple 
on the previously 
saved state of the applica­
during 
phase to derive three types of data dependen­
uses the data collected 
component 
program and the client 
level as shown in 
is performed 
in a sand­
actions 
can 
the recovery 
tiers of the application. 
help track contaminated 
data 
3.4.1 Database 
Dependencies 
at the row 
or field gran­
by the 
rows or fields accessed 
help correlate 
performed 
operations 
by the 
[19,27]. As shown 
approaches 
different 
These dependencies 
are generated 
dependencies 
based on the database 
based on the database 
similar 
Database 
ularity 
application 
logic. 
requests 
requests, 
in Figure 2, a query Q2 is dependent 
when Q2 reads data written 
dependent 
tains Ql. These dependencies 
graph with requests 
to existing 
on request 
on another 
by Ql. Similarly, 
query QI 
a request 
R2 is 
Q2 and RI con­
RI, when R2 contains 
help generate 
a dependency 
as nodes and edges as data dependencies. 
3.4.2 Application 
Dependencies 
First, 
generate 
described 
transitively. 
occur for two reasons. 
above apply to entire requests 
approach 
This coarse-grained 
many false dependencies. 
Such de­
compo­
the analysis 
as described 
above. 
that may have no 
R2 
The dependencies 
and are tracked 
can potentially 
pendencies 
nent tracks query read sets conservatively, 
Second, 
dependencies. 
Figure 2 shows that request 
depends on R I, and R3 depends on R2, and thus R3 is also 
assumed to depend on R I. However, 
this dependency 
not exist if, for example, 
discards 
it read from R I using Q2, while R3 only depends on Q4. 
R2 immediately 
can issue multiple 
For example, 
a request 
queries 
the value 
may 
We use dynamic tainting 
to track application-logic 
depen­
within a request 
(shown as program-level 
dencies 
dependen­
cies in Figure I) to prune both these types of false dependen­
cies from the dependency 
validates 
nent starts 
a cross-request 
by tainting 
graph. This approach 
dependency. 
The analysis 
request(s) 
the initial 
compo­
in the dependency 
essentially 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
84 
DSN 2010: Akku & Goel 
20lO IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks (DSN) 
them. It then replays 
requests 
that have 
edges in the dependency 
edges that are created 
graph and replaying 
incoming 
prune outgoing 
scheduler 
orders all the requests 
replay them in the transaction 
play requests 
ing the monitoring 
terministic, 
paring the queries 
logged by the monitor. 
currently 
our system detects 
generated 
ensure safety by aborting 
by capturing 
graph and uses tainting 
queries. 
to 
A 
in the dependency 
by untainted 
all HTTP request 
graph to 
ID or serialization 
order. We re­
dur­
are mostly de­
by com­
any non-determinism 
during replay with the queries 
parameters 
If an inconsistency 
is detected, 
we 
phase. While web requests 
the analysis 
process. 
database 
that reads a tainted 
uses a taint-based 
Our implementation 
application 
row-level 
PHP inter­
to taint an appli­
row or field, and 
rows or fields that are modified by queries 
work that im­
preter [33]. We have modified the interpreter 
cation variable 
taint database 
tainted 
plemented 
us to implement 
thermore, 
these dependencies 
blind writes (a query overwrites 
breaking 
write requires 
Unlike previous 
dependencies, 
field-level 
allow us to take advantage 
tainting 
Fur­
of 
reading 
With row-level 
row to be overwritten. 
it) for 
dependency, 
database 
more accurate 
dependencies. 
a field without 
variables. 
the entire 
a blind 
allows 
using 
dependencies. 
Table 1 Modifications 
to existing software. 
Component  Existing Software Changed Lines 
DB Monitor 
MySQL 
287 
219 
Application-logic 
PHP  interpreter 
Monitor 
Application-logic 
PHP  interpreter 
519 
Analysis with taint support 
Query Rewriter JSQLParser  1850 
4757 
Component  -
Recovery 
that writes the previous 
and transaction 
mappings to 
For each update oper­
transactions. 
an operation 
log and our request 
compensating 
database 
generate 
ation in  a transaction, 
value of the updated row(s) is appended 
the program of the compensating 
transactions 
current 
effects of the database 
quests. 
does not replay application  requests, 
and thus does not re­
quire any application-specific 
of 
our approach 
in reverse 
[19]. These 
transaction 
order on the 
serialization 
and they selectively 
revert the 
issued by the tainted 
re­
Unlike redo recovery 
state of the database 
[21], our recovery 
information. 
are available 
operations 
elsewhere 
are applied 
in reverse 
[18]. 
order to 
More details 
component 
3.4.3 Client Dependencies 
3.6 Implementation 
component 
uses client-side 
dependen­
such as login sessions 
and user accounts. 
cookies identify 
These types of dependencies 
all requests 
associated 
provide 
different 
because they can help provide 
We have implemented 
a prototype 
system 
engine and the MySQL database. 
of our recovery 
Ta­
for the PHP scripting 
ble 1 shows the number of lines of code we added or changed 
our system. 
to implement 
the recovery 
component. 
MySQL are relatively 
easy to port our system to other languages 
Note the majority 
of the code lies in 
Our changes to the PHP engine and 
small, and thus, it should be relatively 
and databases. 
session 
Finally, 
the analysis 
cies across requests, 
For example, 
with a login session. 
a useful abstraction, 
starting 
that the data corruption 
the dependency 
analysis 
user. This abstraction 
instance, 
caused by a session, 
for the data corruption 
points for the analysis: 
an administrator 
with a specific 
might know 
user and start 
started 
by tainting 
all modifications 
by this 
may also be useful for recovery. 
For 
an administrator 
may wish to revert all the effects 
if she knows that session 
is responsible 
and there are no other dependencies. 
by modifying the database 
changes to MySQL to sup­
we implemented 
tainting 
modifying 
JSQLParser 
[10]. 
database 
tainting 
Implementing 
would have required 
significant 
port all SQL functionality. 
with query rewriting 
We modify the database 
taint bit and rewrite 
simpler 
implement 
to implement 
dependency 
by slightly 
different 
queries 
and provides 
Instead, 
tables to store a per-row or per-field 
during replay. 
This approach 
significant 
flexibility 
policies 
described 
is 
to 
later. 
or database 
are not directly 
available 
at the 
level. We derive these depen­
Client dependencies 
application-logic 
dencies by using application-specific 
component, 
cations 
ically 
any changes to the appli­
session 
information 