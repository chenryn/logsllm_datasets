Setup
and gives the public parameters to the adversary.
Phase 1
The adversary is allowed to issue queries for
private keys for many access structures Aj, where γ /∈ Aj
for all j.
Challenge The adversary submits two equal-length mes-
sages M0 and M1. The challenger ﬂips a random coin b,
and encrypts Mb with γ. The ciphertext is passed to the
adversary.
Phase 2 Phase 1 is repeated.
Guess The adversary outputs a guess b0 of b.
The advantage of an adversary A in this game is deﬁned
as Pr[b0 = b] − 1
2 .
We note that the model can easily be extended to handle
chosen-ciphertext attacks by allowing for decryption queries
in Phase 1 and Phase 2.
Definition 2. An attribute-based encryption scheme is
secure in the selective-set model of security if all polynomial
time adversaries have at most a negligible advantage in the
selective-set game.
2.2 Bilinear Maps
We present a few facts related to groups with eﬃciently
computable bilinear maps.
Let G and GT be two multiplicative cyclic groups of prime
order p. Let g be a generator of G and e be a bilinear map,
e : G × G → GT . The bilinear map e has the following
properties:
1. Bilinearity: for all u, v ∈ G and a, b ∈ Zp, we have
e(ua, vb) = e(u, v)ab.
2. Non degeneracy: e(g, g) 6= 1.
We say that G is a bilinear group if the group operation
in G and the bilinear map e : G × G → GT are both ef-
ﬁciently computable. Notice that the map e is symmetric
since e(ga, gb) = e(g, g)ab = e(gb, ga).
2.3 The Decisional Bilinear Difﬁe-Hellman
(BDH) Assumption
Let a, b, c, z ∈ Zp be chosen at random and g be a genera-
tor of G. The decisional BDH assumption [6, 21] is that no
probabilistic polynomial-time algorithm B can distinguish
the tuple (g, A = ga, B = gb, C = gc, e(g, g)abc) from the
tuple (g, A = ga, B = gb, C = gc, e(g, g)z) with more than a
negligible advantage. The advantage of B is
˛˛˛
˛˛˛Pr[B(A, B, C, e(g, g)abc) = 0] − Pr[B(A, B, C, e(g, g)z)] = 0
where the probability is taken over the random choice of the
generator g, the random choice of a, b, c, z in Zp, and the
random bits consumed by B.
2.4 Linear Secret-Sharing Schemes
We will make essential use of linear secret-sharing schemes.
We adapt our deﬁnitions from those given in [2]:
Definition 3
(Linear Secret-Sharing Schemes ).
A secret-sharing scheme Π over a set of parties P is called
linear (over Zp) if
1. The shares for each party form a vector over Zp.
2. There exists a matrix M called the share-generating
matrix for Π. The matrix M has ‘ rows and n + 1
columns. For all i = 1, . . . , ‘, the i’th row of M is
labeled with a party named ˘xi ∈ P. When we consider
the column vector v = (s, r1, r2, . . . , rn), where s ∈
Zp is the secret to be shared, and r1, . . . , rn ∈ Zp are
randomly chosen, then M v is the vector of ‘ shares of
the secret s according to Π. The share (M v)i belongs
to party ˘xi.
It is shown in [2] that every linear secret sharing-scheme
according to the above deﬁnition also enjoys the linear re-
construction property, deﬁned as follows: Suppose that Π
is an Linear Secret-Sharing Scheme (LSSS) for the access
structure A. Let S ∈ A be any authorized set, and let
I ⊂ {1, 2, . . . , ‘} be deﬁned as I = {i : ˘xi ∈ S}. Then,
there exist constants {ω ∈ Zp}i∈I such that, if {λi} are valid
i∈I ωiλi = s.
Furthermore, it is shown in [2] that these constants {ωi}
can be found in time polynomial in the size of the share-
generating matrix M .
shares of any secret s according to Π, thenP
3. OUR CONSTRUCTION
In showing how to construct an Attribute-Based Encryp-
tion system with non-monotone access formulas, we begin by
describing a “core” construction, in which the we assume that
every ciphertext is annotated with exactly d attributes. We
then show how to remove that restriction and still achieve
systems parameters that compare favorably with the less-
expressive ABE system of Goyal et al. [16].
We choose to ﬁrst describe our construction in generality;
we describe our access policies in terms of monotonic access
structures with negative attributes. (This will actually al-
low for more general policies than non-monotone formulas.)
Later, we show how to instantiate our constructions to yield
ABE schemes for any (monotone or non-monotone) boolean
formula.
Moving from monotonic access structures to
non-monotonic access structures.
As alluded to in the introduction we can think about ABE
non-monotonic access structures in terms of ABE monotonic
access structures with negative attributes. The challenge in
designing our construction will be how to realize this concept
without requiring a ciphertext to explicitly include negative
attributes for each attribute not present. Before we describe
our construction we develop some notation for describing
how non-monotonic access structures can be described in
terms of monotonic access structures with negative shares,
without blowing up the share sizes.
schemes {ΠA}A∈A for a set of possible monotone access struc-
tures A. Note that, of course, all access structures in A
Assume we are given a family of linear secret-sharing
must necessarily be monotonic because these access struc-
tures correspond to secret-sharing schemes. However, we as-
sume that for each access structure A ∈ A, the set of parties
P underlying the access structure has the following proper-
ties: The names of the parties in P may be of two types:
either the name is normal (like x) or it is primed (like x0),
and if x ∈ P then x0 ∈ P and vice versa. We will concep-
tually associate primed parties as representing the negation
of unprimed parties. We will sometimes write ˘x to refer to
a party in P that may be primed or unprimed.
Then, we can deﬁne the following family ˜A of possibly
non-monotonic access structures. For each access structure
A ∈ A over a set of parties P, we deﬁne a possibly non-
monotonic access structure N M (A) over the set of parties
˜P, where ˜P is the set of all unprimed parties in P. First,
for every set ˜S ⊂ ˜P we deﬁne N ( ˜S) ⊂ P as follows: First,
all parties in ˜S are in N ( ˜S), so ˜S ⊂ N ( ˜S). Second, for each
party x ∈ ˜P such that x /∈ ˜S, we have that x0 ∈ N ( ˜S).
Essentially, N ( ˜S) consists of all the parties in S plus the
primes (or negation) of all the parties in the universe that
are not included in S.
Finally, we deﬁne N M (A) by specifying that ˜S is autho-
rized in N M (A) iﬀ N ( ˜S) is authorized in A. The set of
these N M (A) access structures is ˜A. Therefore, the non-
monotonic access structure N M (A) will have only unprimed
parties in its access sets. For each access set X in N M (A)
there will be a set in A that has the elements in X plus
primed elements for each party not in X.
We will show how to use a linear secret sharing scheme Π
for the monotonic access structure A to yield an ABE key
for the (possibly non-monotonic) access structure N M (A).
Again, we stress that the share sizes of Π only depend on the
size of the non-monotonic access structure N M (A).
Mathematical Background.
Let G be a bilinear group of prime order p, and let g be
a generator of G. In addition, let e : G × G → GT denote
the bilinear map. A security parameter, κ, will determine
the size of the groups. We will also implicitly make use
for any i ∈ Zp and a set, S, of
of Lagrange coeﬃcients:
x−j
i−j . We will
associate each attribute with a unique element in Z∗
p. (This
could be accomplished by means of a collision-resistant hash
function H : {0, 1}∗ → Z∗
p.)
elements in Zp: deﬁne ∆i,S(x) = Q
j∈S,j6=i
Our main construction follows.
3.1 Main Construction
Setup(d). In the basic construction, a parameter d spec-
iﬁes how many attributes every ciphertext has.
(We will
show later how this constraint can be removed with only a
small loss in eﬃciency.) Two secrets α, β are chosen uni-
formly at random from Zp, and we denote g1 = gα and
g2 = gβ. In addition, two polynomials h(x) and q(x) of de-
gree d are chosen at random subject to the constraint that
q(0) = β.
(There is no constraint on h(x).) The public
parameters PK are (g, g1; g2 = gq(0), gq(1), gq(2), . . . , gq(d);
gh(0), gh(1), . . . , gh(d)). The master key MK is α.
These public parameters deﬁne two publicly computable
·
functions T, V : Zp → G. The function T (x) maps to gxd
gh(x), and the function V (x) maps to gq(x). Note that both
gh(x) and gq(x) can be evaluated from the public parameters
2
by interpolation in the exponent. (For further details on how
to do this using Lagrange coeﬃcients, see, e.g., [21, 16].)
Encryption (M, γ, PK). To encrypt a message M ∈ GT
under a set of d attributes γ ⊂ Z∗
p, choose a random value
s ∈ Zp and output the ciphertext as
E = (γ, E(1) = M e(g1, g2)s, E(2) = gs,{E(3)
{E(4)
x = T (x)s}x∈γ,
x = V (x)s}x∈γ)
Key Generation ( ˜A, MK, PK). This algorithm outputs
a key that enables the user to decrypt an encrypted mes-
sage only if the attributes of that ciphertext satisfy the ac-
cess structure ˜A. We require that the access structure ˜A
is N M (A) for some monotonic access structure A, over a
set P of attributes, associated with a linear secret-sharing
scheme Π. First, we apply the linear secret-sharing mech-
anism Π to obtain shares {λi} of the secret α. We denote
the party corresponding to the share λi as ˘xi ∈ P, where xi
is the attribute underlying ˘xi. Note that ˘xi can be primed
(negated) or unprimed (non negated). For each i, we also
choose a random value ri ∈ Zp.
The private key D will consist of the following group el-
ements: For every i such that ˘xi is not primed (i.e., is a
non-negated attribute), we have
Di = (D(1)
i = gλi
2 · T (xi)ri , D(2)
i = gri )
For every i such that ˘xi is primed (i.e., is a negated at-
tribute), we have
Di = (D(3)
i = gλi+ri
2
, D(4)
i = V (xi)ri , D(5)
i = gri )
The key D consists of Di for all shares i.
Decryption (E, D). Given a ciphertext E and a decryp-
tion key D, the following procedure is executed: (All no-
tation here is taken from the above descriptions of E and
D, unless the notation is introduced below.) First, the key
holder checks if γ ∈ ˜A (we assume that this can be checked
eﬃciently). If not, the output is ⊥. If γ ∈ ˜A, then we recall
that ˜A = N M (A), where A is an access structure, over a
set of parties P, for a linear secret sharing-scheme Π. De-
note γ0 = N (γ) ∈ A, and let I = {i : ˘xi ∈ γ0}. Since γ0 is
authorized, an eﬃcient procedure associated with the linear
secret-sharing scheme yields a set of coeﬃcients Ω = {ωi}i∈I
i∈I ωiλi = α. (Note, however, that these λi are
not known to the decryption procedure, so neither is α.)
For every positive (non negated) attribute ˘xi ∈ γ0 (so
xi ∈ γ), the decryption procedure computes the following:
such thatP
“
“
“
, E(2)”
2 · T (xi)ri , gs”
/e
i
D(1)
gλi
Zi = e
= e
D(2)
i
, E(3)
i
/e (gri , T (x)s)
”
= e (g2, g)sλi
For every negated attribute ˘xi ∈ γ0 (so xi /∈ γ), the de-
cryption procedure computes the following: We consider the
set γi = γ ∪ {xi}. Note that |γi| = d + 1 and recall that
the degree of the polynomial q underlying the function V is
d. Using the points in γi as an interpolation set, compute
σxq(x) =
Lagrangian coeﬃcients {σx}x∈γi such thatP
x∈γi
q(0) = β. Now, perform the following computation:
i
i
i
e
e
e
x∈γ
“
E(4)
x
, E(2)
D(5)
D(4)
D(3)
“
, E(2)”
“
“
”σx” · e
”σxi
,Q
, gs”
“
x∈γ (V (x)s)σx” · e (V (xi)ri , gs)σxi
“
gri ,Q
2 , gs” · e (gri
“
“
x∈γ σxq(x)” · e`griσxi q(xi), gs´
gri , gsP
e
e (g2, g)sλi · e (g, g)risβ
e(g, g)risP
x∈γ0 σxq(x)
gλi+ri
2
2 , gs)
gλi
e
e
Zi =