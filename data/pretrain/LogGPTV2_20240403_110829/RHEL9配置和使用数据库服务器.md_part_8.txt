[**PostgreSQL**]{.strong} 配置由以下文件组成：
::: itemizedlist
-   `PostgreSQL.conf`{.literal} - 用于设置数据库集群参数。
-   `PostgreSQL.auto.conf`{.literal} - 包含与
    `postgresql.conf`{.literal} 类似的基本 [**PostgreSQL**]{.strong}
    设置。但是这个文件由服务器控制。它由 `ALTER SYSTEM`{.literal}
    查询来编辑，无法手动编辑。
-   `pg_ident.conf`{.literal} -
    用于将来自外部身份验证机制的用户身份映射到 [**PostgreSQL**]{.strong}
    用户身份。
-   `pg_hba.conf`{.literal} - 用于为 [**PostgreSQL**]{.strong}
    数据库配置客户端身份验证。
:::
要修改 [**PostgreSQL**]{.strong} 配置，请使用以下流程：
::: orderedlist
**流程**
1.  编辑相应的配置文件，如
    `/var/lib/pgsql/data/postgresql.conf`{.literal}。
2.  重启 `postgresql`{.literal} 服务，以使修改生效：
    ``` literallayout
    # systemctl restart postgresql.service
    ```
:::
::: example
[]{#using-postgresql_configuring-and-using-database-servers.html#idm140063685085568}
**例 4.1. 配置 PostgreSQL 数据库集群参数**
::: example-contents
本例展示了 `/var/lib/pgsql/data/postgresql.conf`{.literal}
文件中数据库集群参数的基本设置。
``` literallayout
# This is a comment
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
```
:::
:::
::: example
[]{#using-postgresql_configuring-and-using-database-servers.html#idm140063685082384}
**例 4.2. 在 PostgreSQL 中设置客户端身份验证**
::: example-contents
本例演示了如何在 `/var/lib/pgsql/data/pg_hba.conf`{.literal}
文件中设置客户端身份验证。
``` literallayout
# TYPE    DATABASE       USER        ADDRESS              METHOD
local     all            all                              trust
host      postgres       all         192.168.93.0/24      ident
host      all            all         .example.com         scram-sha-256
```
:::
:::
:::
::: section
::: titlepage
# []{#using-postgresql_configuring-and-using-database-servers.html#backing-up-postgresql-data_using-postgresql}备份 PostgreSQL 数据 {.title}
:::
要备份 [**PostgreSQL**]{.strong} 数据，请使用以下方法之一：
::: itemizedlist
-   SQL dump - 请查看 ["使用 SQL 转储备份 PostgreSQL
    数据"一节](#using-postgresql_configuring-and-using-database-servers.html#backuping-postgresql-sql-dump_backing-up-postgresql-data "使用 SQL 转储备份 PostgreSQL 数据"){.xref}
-   文件系统级备份 - 请查看 ["使用文件系统级别备份来备份 PostgreSQL
    数据"一节](#using-postgresql_configuring-and-using-database-servers.html#backuping-postgresql-system-level-backup_backing-up-postgresql-data "使用文件系统级别备份来备份 PostgreSQL 数据"){.xref}
-   持续归档 - 请查看 ["通过持续存档来备份 PostgreSQL
    数据"一节](#using-postgresql_configuring-and-using-database-servers.html#backuping-postgresql-continuous-archiving_backing-up-postgresql-data "通过持续存档来备份 PostgreSQL 数据"){.xref}
:::
::: section
::: titlepage
## []{#using-postgresql_configuring-and-using-database-servers.html#backuping-postgresql-sql-dump_backing-up-postgresql-data}使用 SQL 转储备份 PostgreSQL 数据 {.title}
:::
SQL 转储方法基于使用 SQL
命令生成转储文件。当转储上传回数据库服务器时，它会按与转储时相同的状态重新创建数据库。
以下 [**PostgreSQL**]{.strong} 客户端应用程序为 SQL 转储提供了保证：
::: itemizedlist
-   [**[pg_dump]{.application}**]{.strong}
    转储单个数据库，而无需有关角色或表空间的集群范围的信息
-   [**[pg_dumpall]{.application}**]{.strong}
    转储给定集群中的每个数据库，并保留集群范围的数据，如角色和表空间定义。
:::
默认情况下，`pg_dump`{.literal} 和 `pg_dumpall`{.literal}
命令将它的们结果写入标准输出。要将转储保存到文件中，请将输出重定向到 SQL
文件。生成的 SQL
文件可以是文本格式，也可以是允许并行且可以更详细地控制对象恢复的其他格式。
您可以在任何可访问数据库的远程主机中执行 SQL 转储。
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#advantages-sql-dump_backing-up-postgresql-data}SQL 转储的优点和缺陷 {.title}
:::
与其它 [**PostgreSQL**]{.strong} 备份方法相比，SQL 转储具有以下优点：
::: itemizedlist
-   SQL 转储是唯一的、不针对特定服务器版本的 [**PostgreSQL**]{.strong}
    备份方法。[**[pg_dump]{.application}**]{.strong}
    工具的输出可以重新加载到 [**PostgreSQL**]{.strong}
    的后续版本中，这不适用于文件系统级备份或持续归档。
-   SQL 转储是将数据库传输到不同计算机架构（比如从 32 位服务器传输到 64
    位服务器）的唯一方法。
-   SQL
    转储提供内部一致的转储。转储表示在[**[pg_dump]{.application}**]{.strong}
    开始运行时的数据库快照。
-   [**[pg_dump]{.application}**]{.strong}
    程序不会阻止数据库中的其他操作。
:::
SQL 转储的一个缺点是，与文件系统级备份相比，它需要更长的时间。
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#perforing-sql-dump_backing-up-postgresql-data}使用 pg_dump 执行 SQL 转储 {.title}
:::
要转储一个没有集群范围信息的单个数据库，请使用
[**[pg_dump]{.application}**]{.strong} 工具。
::: itemizedlist
**先决条件**
-   您必须对要转储的所有表具有读的权限。若要转储整个数据库，您必须以
    `postgres`{.literal}
    超级用户或具有数据库管理员特权的用户身份运行命令。
:::
::: itemizedlist
**流程**
-   转储没有集群范围信息的数据库：
    ``` literallayout
    $ pg_dump dbname > dumpfile
    ```
:::
要指定 [**[pg_dump]{.application}**]{.strong}
会联系哪个数据库服务器，请使用以下命令行选项：
::: itemizedlist
-   `-h`{.literal} 选项用来定义主机 。
    默认主机要么是本地主机，要么是 `PGHOST`{.literal}
    环境变量所指定的主机。
-   `-p`{.literal} 选项用来定义端口 。
    默认端口是由 `PGPORT`{.literal} 环境变量或编译后的默认值指明的。
:::
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#perforing-sql-dump_pg_dumpall_backing-up-postgresql-data}使用 pg_dumpall 执行 SQL 转储 {.title}
:::
要转储给定数据库集群中的每个数据库，并保留集群范围的数据，请使用
[**[pg_dumpall]{.application}**]{.strong} 工具。
::: itemizedlist
**先决条件**
-   您必须以 `postgres`{.literal}
    超级用户或具有数据库管理员特权的用户身份运行命令。
:::
::: itemizedlist
**流程**
-   转储数据库集群中的所有数据库，并保留集群范围的数据：
    ``` literallayout
    $ pg_dumpall > dumpfile
    ```
:::
要指定[**[pg_dumpall]{.application}**]{.strong}与哪个数据库服务器联系，请使用以下命令行选项：
::: itemizedlist
-   `-h`{.literal} 选项用来定义主机 。
    默认主机要么是本地主机，要么是 `PGHOST`{.literal}
    环境变量所指定的主机。
-   `-p`{.literal} 选项用来定义端口 。
    默认端口是由 `PGPORT`{.literal} 环境变量或编译后的默认值指明的。
-   `-l`{.literal} 选项用来定义默认数据库。
    这个选项使您能够选择一个与初始化过程中自动创建的
    `postgres`{.literal} 数据库不同的默认数据库。
:::
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#restoring-from-sql-dump_backing-up-postgresql-data}恢复使用 pg_dump 转储的数据库 {.title}
:::
要从使用 [**[pg_dump]{.application}**]{.strong} 工具转储的 SQL
转储恢复数据库，请按照以下流程。
::: itemizedlist
**先决条件**
-   您必须以 `postgres`{.literal}
    超级用户或具有数据库管理员特权的用户身份运行命令。
:::
::: orderedlist
**流程**
1.  创建新数据库：
    ``` literallayout
    $ createdb dbname
    ```
2.  确保所有拥有对象的用户或对转储数据库中的对象赋予了权限的用户都已存在。如果这样的用户不存在，恢复将无法重新创建具有原始所有权和权限的对象。
3.  运行 [**[psql]{.application}**]{.strong} 工具来恢复
    [**[pg_dump]{.application}**]{.strong} 程序创建的文本文件转储：
    ``` literallayout
    $ psql dbname 
### []{#using-postgresql_configuring-and-using-database-servers.html#restoring-from-sql-dump-pg_dumpall_backing-up-postgresql-data}恢复使用 pg_dumpall 转储的数据库 {.title}
:::
要从使用 [**[pg_dumpall]{.application}**]{.strong}
工具转储的数据库集群中恢复数据，请按照以下步骤。
::: itemizedlist
**先决条件**
-   您必须以 `postgres`{.literal}
    超级用户或具有数据库管理员特权的用户身份运行命令。
:::
::: orderedlist
**流程**
1.  确保所有拥有对象的用户或对转储数据库中的对象赋予了权限的用户都已存在。如果这样的用户不存在，恢复将无法重新创建具有原始所有权和权限的对象。
2.  运行 [**[psql]{.application}**]{.strong} 工具来恢复由
    [**[pg_dumpall]{.application}**]{.strong} 工具创建的文本文件转储：
    ``` literallayout
    $ psql 
### []{#using-postgresql_configuring-and-using-database-servers.html#dumping-a-database-on-another-server_backing-up-postgresql-data}在另一服务器上执行数据库的 SQL 转储 {.title}
:::
将数据库从一台服务器直接转储到另一台服务器是可能的，因为
[**[pg_dump]{.application}**]{.strong} 和
[**[psql]{.application}**]{.strong} 可以写入管道并从管道读取。
::: itemizedlist
**流程**
-   要从一个服务器到另一个服务器转储数据库，请运行：
    ``` literallayout
    $ pg_dump -h host1 dbname | psql -h host2 dbname
    ```
:::
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#handling-sql-errors-during-restore_backing-up-postgresql-data}在恢复过程中处理 SQL 错误 {.title}
:::
默认情况下，如果出现 SQL 错误，[**[psql]{.application}**]{.strong}
会继续执行，从而导致数据库只部分恢复。
要修改默认行为，在恢复转储时使用以下任一方法：
::: itemizedlist
**先决条件**
-   您必须以 `postgres`{.literal}
    超级用户或具有数据库管理员特权的用户身份运行命令。
:::
::: itemizedlist
**流程**