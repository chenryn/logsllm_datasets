Basically, every time `setState` is called and a rerender happens, I get this
error:
    Invariant Violation: dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. 
    Make sure `window` and `document` are available globally before requiring React 
    when unit testing or use React.renderToString for server rendering.
I've created a very bare repo where you can recreate the issue:  
https://github.com/dmatteo/setStateBoom
The component + test suite is so small that I can copy/paste it here:
    import React, {Component} from 'react/addons';
    import jsdomify from 'jsdomify';
    import expect from 'unexpected';
    class MyComponent extends Component {
      constructor(props) {
        super(props);
        this.displayName = 'MyComponent';
        this.state = {
          bananas: 'bananas'
        };
      }
      render() {
        return {this.state.bananas}
      }
    }
    describe('setState test', () => {
      before(() => {
        // this leaks document and window to global
        jsdomify.create();
      });
      it('should render', () => {
        let instance = React.addons.TestUtils.renderIntoDocument();
        expect(instance, 'to be defined');
      });
      it('should not throw', () => {
        let instance = React.addons.TestUtils.renderIntoDocument();
        let foo = () => {
          instance.setState({bananas: 'apples'});
        };
        expect(foo, 'not to throw');
      })
    });
Do you have any idea what is happening and what can I do about it? (if
anything)