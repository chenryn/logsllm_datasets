.tp
.ir st_name
this member holds an index into the object file's symbol string table,
which holds character representations of the symbol names.
if the value
is nonzero, it represents a string table index that gives the symbol
name.
otherwise, the symbol has no name.
.tp
.ir st_value
this member gives the value of the associated symbol.
.tp
.ir st_size
many symbols have associated sizes.
this member holds zero if the symbol
has no size or an unknown size.
.tp
.ir st_info
this member specifies the symbol's type and binding attributes:
.rs
.tp
.br stt_notype
the symbol's type is not defined.
.tp
.br stt_object
the symbol is associated with a data object.
.tp
.br stt_func
the symbol is associated with a function or other executable code.
.tp
.br stt_section
the symbol is associated with a section.
symbol table entries of
this type exist primarily for relocation and normally have
.br stb_local
bindings.
.tp
.br stt_file
by convention, the symbol's name gives the name of the source file
associated with the object file.
a file symbol has
.br stb_local
bindings, its section index is
.br shn_abs ,
and it precedes the other
.br stb_local
symbols of the file, if it is present.
.tp
.br stt_loproc ", " stt_hiproc
values in the inclusive range
.rb [ stt_loproc ", " stt_hiproc ]
are reserved for processor-specific semantics.
.tp
.br stb_local
local symbols are not visible outside the object file containing their
definition.
local symbols of the same name may exist in multiple files
without interfering with each other.
.tp
.br stb_global
global symbols are visible to all object files being combined.
one file's
definition of a global symbol will satisfy another file's undefined
reference to the same symbol.
.tp
.br stb_weak
weak symbols resemble global symbols, but their definitions have lower
precedence.
.tp
.br stb_loproc ", " stb_hiproc
values in the inclusive range
.rb [ stb_loproc ", " stb_hiproc ]
are reserved for processor-specific semantics.
.re
.ip
there are macros for packing and unpacking the binding and type fields:
.rs
.tp
.br elf32_st_bind( \fiinfo\fp ) ", " elf64_st_bind( \fiinfo\fp )
extract a binding from an
.i st_info
value.
.tp
.br elf32_st_type( \fiinfo ) ", " elf64_st_type( \fiinfo\fp )
extract a type from an
.i st_info
value.
.tp
.br elf32_st_info( \fibind\fp ", " \fitype\fp ) ", " \
elf64_st_info( \fibind\fp ", " \fitype\fp )
convert a binding and a type into an
.i st_info
value.
.re
.tp
.ir st_other
this member defines the symbol visibility.
.rs
.tp
.pd 0
.br stv_default
default symbol visibility rules.
global and weak symbols are available to other modules;
references in the local module can be interposed
by definitions in other modules.
.tp
.br stv_internal
processor-specific hidden class.
.tp
.br stv_hidden
symbol is unavailable to other modules;
references in the local module always resolve to the local symbol
(i.e., the symbol can't be interposed by definitions in other modules).
.tp
.br stv_protected
symbol is available to other modules,
but references in the local module always resolve to the local symbol.
.pd
.pp
there are macros for extracting the visibility type:
.pp
.br elf32_st_visibility (other)
or
.br elf64_st_visibility (other)
.re
.tp
.ir st_shndx
every symbol table entry is
"defined"
in relation to some section.
this member holds the relevant section
header table index.
.\"
.ss relocation entries (rel & rela)
relocation is the process of connecting symbolic references with
symbolic definitions.
relocatable files must have information that
describes how to modify their section contents, thus allowing executable
and shared object files to hold the right information for a process's
program image.
relocation entries are these data.
.pp
relocation structures that do not need an addend:
.pp
.in +4n
.ex
typedef struct {
    elf32_addr r_offset;
    uint32_t   r_info;
} elf32_rel;
.ee
.in
.pp
.in +4n
.ex
typedef struct {
    elf64_addr r_offset;
    uint64_t   r_info;
} elf64_rel;
.ee
.in
.pp
relocation structures that need an addend:
.pp
.in +4n
.ex
typedef struct {
    elf32_addr r_offset;
    uint32_t   r_info;
    int32_t    r_addend;
} elf32_rela;
.ee
.in
.pp
.in +4n
.ex
typedef struct {
    elf64_addr r_offset;
    uint64_t   r_info;
    int64_t    r_addend;
} elf64_rela;
.ee
.in
.tp
.ir r_offset
this member gives the location at which to apply the relocation action.
for a relocatable file, the value is the byte offset from the beginning
of the section to the storage unit affected by the relocation.
for an
executable file or shared object, the value is the virtual address of
the storage unit affected by the relocation.
.tp
.ir r_info
this member gives both the symbol table index with respect to which the
relocation must be made and the type of relocation to apply.
relocation
types are processor-specific.
when the text refers to a relocation
entry's relocation type or symbol table index, it means the result of
applying
.br elf[32|64]_r_type
or
.br elf[32|64]_r_sym ,
respectively, to the entry's
.ir r_info
member.
.tp
.ir r_addend
this member specifies a constant addend used to compute the value to be
stored into the relocatable field.
.\"
.ss dynamic tags (dyn)
the
.i .dynamic
section contains a series of structures that hold relevant
dynamic linking information.
the
.i d_tag
member controls the interpretation
of
.ir d_un .
.pp
.in +4n
.ex
typedef struct {
    elf32_sword    d_tag;
    union {
        elf32_word d_val;
        elf32_addr d_ptr;
    } d_un;
} elf32_dyn;
extern elf32_dyn _dynamic[];
.ee
.in
.pp
.in +4n
.ex
typedef struct {
    elf64_sxword    d_tag;
    union {
        elf64_xword d_val;
        elf64_addr  d_ptr;
    } d_un;
} elf64_dyn;
extern elf64_dyn _dynamic[];
.ee
.in
.tp
.ir d_tag
this member may have any of the following values:
.rs
.tp 12
.br dt_null
marks end of dynamic section
.tp
.br dt_needed
string table offset to name of a needed library
.tp
.br dt_pltrelsz
size in bytes of plt relocation entries
.tp
.br dt_pltgot
address of plt and/or got
.tp
.br dt_hash
address of symbol hash table
.tp
.br dt_strtab
address of string table
.tp
.br dt_symtab
address of symbol table
.tp
.br dt_rela
address of rela relocation table
.tp
.br dt_relasz
size in bytes of the rela relocation table
.tp
.br dt_relaent
size in bytes of a rela relocation table entry
.tp
.br dt_strsz
size in bytes of string table
.tp
.br dt_syment
size in bytes of a symbol table entry
.tp
.br dt_init
address of the initialization function
.tp
.br dt_fini
address of the termination function
.tp
.br dt_soname
string table offset to name of shared object
.tp
.br dt_rpath
string table offset to library search path (deprecated)
.tp
.br dt_symbolic
alert linker to search this shared object before the executable for symbols
.tp
.br dt_rel
address of rel relocation table
.tp
.br dt_relsz
size in bytes of rel relocation table
.tp
.br dt_relent
size in bytes of a rel table entry
.tp
.br dt_pltrel
type of relocation entry to which the plt refers (rela or rel)
.tp
.br dt_debug
undefined use for debugging
.tp
.br dt_textrel
absence of this entry indicates that no relocation entries should
apply to a nonwritable segment
.tp
.br dt_jmprel
address of relocation entries associated solely with the plt
.tp
.br dt_bind_now
instruct dynamic linker to process all relocations before
transferring control to the executable
.tp
.br dt_runpath
string table offset to library search path
.tp
.br dt_loproc ", " dt_hiproc
values in the inclusive range
.rb [ dt_loproc ", " dt_hiproc ]
are reserved for processor-specific semantics
.re
.tp
.ir d_val
this member represents integer values with various interpretations.
.tp
.ir d_ptr
this member represents program virtual addresses.
when interpreting
these addresses, the actual address should be computed based on the
original file value and memory base address.
files do not contain
relocation entries to fixup these addresses.
.tp
.i _dynamic
array containing all the dynamic structures in the
.i .dynamic
section.
this is automatically populated by the linker.
.\" gabi elf reference for note sections:
.\" http://www.sco.com/developers/gabi/latest/ch5.pheader.html#note_section
.\"
.\" note that it implies the sizes and alignments of notes depend on the elf
.\" size (e.g. 32-bit elfs have three 4-byte words and use 4-byte alignment
.\" while 64-bit elfs use 8-byte words & alignment), but that is not the case
.\" in the real world.  notes always have three 4-byte words as can be seen
.\" in the source links below (remember that elf64_word is a 32-bit quantity).
.\" glibc:    https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h;h=9e59b3275917549af0cebe1f2de9ded3b7b10bf2#l1173
.\" binutils: https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=binutils/readelf.c;h=274ddd17266aef6e4ad1f67af8a13a21500ff2af#l15943
.\" linux:    https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/elf.h?h=v4.8#n422
.\" solaris:  https://docs.oracle.com/cd/e23824_01/html/819-0690/chapter6-18048.html
.\" freebsd:  https://svnweb.freebsd.org/base/head/sys/sys/elf_common.h?revision=303677&view=markup#l33
.\" netbsd:   https://www.netbsd.org/docs/kernel/elf-notes.html
.\" openbsd:  https://github.com/openbsd/src/blob/master/sys/sys/exec_elf.h#l533
.\"
.ss notes (nhdr)
elf notes allow for appending arbitrary information for the system to use.
they are largely used by core files
.ri ( e_type
of
.br et_core ),
but many projects define their own set of extensions.
for example,
the gnu tool chain uses elf notes to pass information from
the linker to the c library.
.pp
note sections contain a series of notes (see the
.i struct
definitions below).
each note is followed by the name field (whose length is defined in
\fin_namesz\fr) and then by the descriptor field (whose length is defined in
\fin_descsz\fr) and whose starting address has a 4 byte alignment.
neither field is defined in the note struct due to their arbitrary lengths.
.pp
an example for parsing out two consecutive notes should clarify their layout
in memory:
.pp
.in +4n
.ex
void *memory, *name, *desc;
elf64_nhdr *note, *next_note;
/* the buffer is pointing to the start of the section/segment. */
note = memory;
/* if the name is defined, it follows the note. */
name = note\->n_namesz == 0 ? null : memory + sizeof(*note);
/* if the descriptor is defined, it follows the name
   (with alignment). */
desc = note\->n_descsz == 0 ? null :
       memory + sizeof(*note) + align_up(note\->n_namesz, 4);
/* the next note follows both (with alignment). */
next_note = memory + sizeof(*note) +
                     align_up(note\->n_namesz, 4) +
                     align_up(note\->n_descsz, 4);
.ee
.in
.pp
keep in mind that the interpretation of
.i n_type
depends on the namespace defined by the
.i n_namesz
field.
if the
.i n_namesz
field is not set (e.g., is 0), then there are two sets of notes:
one for core files and one for all other elf types.
if the namespace is unknown, then tools will usually fallback to these sets
of notes as well.
.pp
.in +4n
.ex
typedef struct {
    elf32_word n_namesz;
    elf32_word n_descsz;
    elf32_word n_type;
} elf32_nhdr;
.ee
.in
.pp
.in +4n
.ex
typedef struct {
    elf64_word n_namesz;
    elf64_word n_descsz;
    elf64_word n_type;
} elf64_nhdr;
.ee
.in
.tp
.ir n_namesz
the length of the name field in bytes.
the contents will immediately follow this note in memory.
the name is null terminated.
for example, if the name is "gnu", then
.i n_namesz
will be set to 4.
.tp
.ir n_descsz
the length of the descriptor field in bytes.
the contents will immediately follow the name field in memory.
.tp
.ir n_type
depending on the value of the name field, this member may have any of the
following values:
.rs
.tp 5
.b core files (e_type = et_core)
notes used by all core files.
these are highly operating system or architecture specific and often require
close coordination with kernels, c libraries, and debuggers.
these are used when the namespace is the default (i.e.,
.i n_namesz
will be set to 0), or a fallback when the namespace is unknown.
.rs
.tp 21
.pd 0
.b nt_prstatus
prstatus struct
.tp
.b nt_fpregset
fpregset struct
.tp
.b nt_prpsinfo
prpsinfo struct
.tp
.b nt_prxreg
prxregset struct
.tp
.b nt_taskstruct
task structure
.tp
.b nt_platform
string from sysinfo(si_platform)
.tp
.b nt_auxv
auxv array
.tp
.b nt_gwindows
gwindows struct
.tp
.b nt_asrs
asrset struct
.tp
.b nt_pstatus
pstatus struct
.tp
.b nt_psinfo
psinfo struct
.tp
.b nt_prcred
prcred struct
.tp
.b nt_utsname
utsname struct
.tp
.b nt_lwpstatus
lwpstatus struct
.tp
.b nt_lwpsinfo
lwpinfo struct
.tp
.b nt_prfpxreg
fprxregset struct
.tp
.b nt_siginfo
siginfo_t (size might increase over time)
.tp
.b nt_file
contains information about mapped files
.tp
.b nt_prxfpreg
user_fxsr_struct
.tp
.b nt_ppc_vmx
powerpc altivec/vmx registers
.tp
.b nt_ppc_spe
powerpc spe/evr registers
.tp
.b nt_ppc_vsx
powerpc vsx registers
.tp
.b nt_386_tls
i386 tls slots (struct user_desc)
.tp
.b nt_386_ioperm
x86 io permission bitmap (1=deny)
.tp
.b nt_x86_xstate
x86 extended state using xsave
.tp
.b nt_s390_high_gprs
s390 upper register halves
.tp
.b nt_s390_timer
s390 timer register