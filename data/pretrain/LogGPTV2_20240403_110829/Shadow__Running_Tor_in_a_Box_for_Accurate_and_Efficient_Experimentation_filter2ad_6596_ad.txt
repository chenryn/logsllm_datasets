### Seven-Node Bottleneck Experiment

Figure 6 illustrates a seven-node bottleneck experiment, similar to the one conducted by Tang and Goldberg [42]. The experiment shows that the number of cells processed (a) and queued (b) increases at Time=10 when the measurement clients begin downloading. The Exponentially Weighted Moving Average (EWMA) scheduler improves responsiveness for bursty traffic (c), (d), and (e). However, contrary to the authors' claims, it decreases performance for bulk downloads (f).

#### Scheduler Performance Analysis

Our results in Figure 6f indicate that the EWMA scheduler significantly degrades bulk download times, with a notable increase around the 40th percentile. This degradation occurs when the "measurement" bulk client loses priority over the "congestion" bulk clients, suggesting that a deeper analysis of the EWMA scheduling algorithm is warranted.

### Network-Wide Deployment of EWMA Scheduler

Tang and Goldberg's experiments have a major limitation in scale: they were conducted on three-node PlanetLab topologies or in the live Tor network with only a single relay using the EWMA algorithm. While these experiments provide insights into the performance of a single relay, they do not account for the network-wide effects of a full deployment.

To explore the potential performance gains of the EWMA scheduler in a network-wide deployment, we used Shadow, a large-scale discrete-event simulator. We tested the EWMA circuit scheduler with various half-life configurations and compared its performance to the round-robin scheduler used in vanilla Tor. Our experimental setup included 200 servers, 50 relays, and 950 web clients. To analyze the impact of different network loads, we ran separate experiments with 25, 50, and 100 bulk clients. Each experiment was run five times to reduce random variances, and the results were aggregated.

#### Experimental Results

- **25 Bulk Clients (Figures 7a–7c):** The EWMA circuit scheduler reduces performance for all clients, regardless of the configured half-life. Bulk download times are most affected (7c), but there is also a significant reduction in responsiveness for web clients (7a).
- **50 Bulk Clients (Figures 7d–7f):** Some half-life configurations still reduce performance compared to vanilla Tor. The 30 and 90-second EWMA half-life configurations improve performance for web clients (7d, 7e), but bulk client performance is either reduced or shows little improvement (7f). A 3-second half-life reduces performance for all clients.
- **100 Bulk Clients (Figures 7g–7i):** Under heavy load, the EWMA scheduler performs best for web clients (7g, 7h) while bulk clients see no improvements over vanilla Tor and the round-robin scheduler (7i).

We also tested the schedulers under lighter loads, but the performance differences were negligible.

### Conclusion

Our results suggest that the EWMA scheduler should not be used under all network conditions, as it does not always improve performance. When improvements are possible, they may be insignificant or dependent on a correctly configured half-life. Tang and Goldberg found that low and high half-life values (close to 0 and 100, respectively) result in little improvement compared to unprioritized, vanilla Tor. Our findings support this under lighter loads, but Figure 7 shows that larger half-life values can improve performance in more heavily loaded networks.

Performance benefits are highly dependent on network traffic patterns, and we emphasize the importance of frequently assessing the network to determine appropriate half-life values. Further analysis is needed to determine if the EWMA scheduler actually improves performance in the live Tor network and whether it should be enabled by default.

### Related Work

This section reviews several experimentation techniques used to test Tor's performance and resistance to various attacks. Accurate test environments are crucial for meaningful results. We briefly explore simulation and emulation techniques:

- **Simulation:** Involves creating abstract models of system processes and running multiple nodes in a unified framework. Simulators can run efficiently but may lack accuracy due to abstraction. Generic simulators exist, but they cannot run unmodified Tor software. Examples include Murdoch and Watson's path selection strategies [25], O’Gorman and Blott's packet counting and stream correlation attacks [33], and Jansen et al.'s queuing models [15].
- **Emulation:** Emulators virtualize an entire system, providing more accuracy but less scalability. Examples include PlanetLab [7] and DETER [5], which have been used for traffic analysis attacks [3, 6, 13] and relay circuit scheduling [42].

Shadow, our discrete-event simulator, offers several advantages over other platforms like ExperimenTor, including usability, efficiency, and customization.

### Future Work

Future research with Shadow could explore UDP transport mechanisms, alternative scheduling approaches, and validate previous work. More robust modeling techniques would help reduce potential systematic biases introduced by the simulation.