pression functions with the help of the Qualcomm Hexagon SDK
[27]. We converted the regular expression functions from Javascript
into direct C-language calls and ported the functions to the aDSP
processor of the Google Pixel 2 phone (which has the Snapdragon
835 Application processor). The communication between the CPU
and DSP was performed using FastRPC remote procedure calls.
We used Node.js to measure the runtime performance of the
offloaded functions and analyzed their impact on Web page load
times. To do this, we extracted the page dependency graphs with
Figure 6: Impact of clock frequency on the network.
similar to video streaming. This discrepancy is due to two reasons:
first, unlike video streaming, there is no prefetching. Therefore,
packet processing in the kernel stack becomes a bottleneck. Second,
video telephony is interactive in that it requires both sending and
receiving live video. During this, it requires encoding, decoding,
muxing, and demuxing of the audio and video (recall that video
streaming has only decoding and demuxing). Although most of the
coding is offloaded, the post-processing is limited by poor CPUs.
Apart from the clock, Skype has similar trends as YouTube with
other parameters — memory, number of cores, and governors.
Interestingly, the Skype adaptive bitrate (ABR) algorithm is more
aggressive than YouTube. Skype’s ABR algorithm [30] changes the
call video quality for slow CPUs (as it does for poor network condi-
tions) when the software perceives poor throughput. In effect, the
client requests low-resolution videos under slower clock frequen-
cies.
Takeaway3: The key takeaway is that video telephony is linearly
affected by slower CPU speeds mainly because of the packet pro-
cessing overhead. This is different from video streaming, where the
effect of the network processing is masked by prefetching.
4 DISCUSSIONS
In this section, we discuss (a) the implications of clock frequency
on network throughput and (b) a possible Web page optimization
for low-end devices based on our results in §3.
4.1 Impact of Clock Frequency on Network
We find that clock frequency not only affects application processing
but also has a second-order effect on network throughput because of
slow packet processing, which in turn impacts application perfor-
mance. While packet processing overheads in the transport layer
are known to cause performance bottlenecks and have been investi-
gated in the data center context, including the use of kernel bypass
384486594702810918102611341242135014581512ClockFrequency(MHz)051015202530CallSetupDelay(Seconds)010203040FrameRateCallSetupDelayFrameRate0.511.52Memory(GB)051015202530CallSetupDelay(Seconds)010203040FrameRateCallSetupDelayFrameRate0.511.52NumberofCores051015202530CallSetupDelay(Seconds)010203040FrameRateCallSetupDelayFrameRatePFINUSODPWGovernors051015202530CallSetupDelay(Seconds)010203040FrameRateCallSetupDelayFrameRate384486594702810918102611341242135014581512ClockFrequency(Mhz)1020304050NetworkThroughput(Mbps)IMC ’18, October 31-November 2, 2018, Boston, MA, USA
M. Dasari et al.
(a) Javascript execution (left axis) and emulated
page load times (right axis)
(b) CDF of power consumption during Javascript
execution
(c) Emulated page load times with and without
DSP offloading at low clock frequencies
Figure 7: Evaluations for DSP offloading of Javascript functions
WProf [36], which preserves the dependency and computation
timing information of the entire Web page load process. We then
derived the emulated page load time (ePLT) by re-evaluating the
WProf dependency graphs after replacing the execution time of all
functions that contain the offloaded regular expressions with their
measured run times on the DSP.
Fig. 7 shows the impact of offloading regular expressions for
the top 20 sports Web pages. Offloading just these functions to the
DSP provides a noticeable improvement in the Web page load times
when the mobile device is run with the default frequency governors,
where the CPU frequency is set by the OS (Fig. 7a). Moreover, we
observe an even greater improvement—an almost 4× reduction—in
median power consumption (Fig. 7b). As expected, the page load
time improvements caused by offloading are largest (up to 25%)
when the Web page is loaded at slower CPU frequencies (Fig. 7c).
The potential improvement with this new approach depends on
the code patterns that are suitable for DSPs. Note that DSPs can
be inexpensive (≈$10 [13]), so adding them does not significantly
increase the cost of mobile devices. In fact, even current low-end
phones have many domain-specific hardware accelerators. Our
approach can be employed on either server side or client side in web
browsers if the browsers allow low-level code execution. However,
there is a trade-off. Allowing low-level code on the browser side
introduces security vulnerabilities. Situating the DSP optimization
on the server side may introduce larger binaries than the original
Javascript code, which may adversely affect page load time.
Takeaway5: Our results suggest that offloading the computation-
ally intensive parts of Web browsing to coprocessors has potential,
especially for low-end phones, and should be further explored.
5 RELATED WORK
Web Performance: Extensive literature on characterizing and im-
proving Web performance exists. WProf [36] and WProf-M [23]
characterize the bottleneck of desktop and mobile browsing using
page-load dependencies. The key observation in these works is
that the network is the bottleneck in desktop browsing, whereas
computation is the bottleneck in mobile browsing. Polaris [25] and
Vroom [29] are designed to improve Web performance by prioritiz-
ing network object loads taking into account dependencies. Shan-
dian [37] and Prophecy [26] use a Web proxy to improve page-load
performance. Though these methods optimize network activities
to improve page loads, recent works including Webcore [40] and
GreenDroid [11] optimize the mobile hardware architecture to im-
prove PLT and minimize energy consumption. A preliminary anal-
ysis of the device hardware on Web browsing is shown in [8][20].
Video Performance: Similar to Web browsing, considerable work
has addressed improving video QoE focusing on network resource
provisioning [14, 39]. Pytheas [18] and CS2P [32] propose data-
driven approaches to study the impact of different parameters that
impact QoE. They show that the QoE can be largely improved
by adapting the bitrate using data-driven throughput prediction.
Huang et.al. [15] consider client playback buffer occupancy rate
adaptation, unlike network-only solutions [6, 17, 35].
Different from these works, our studies focus on understanding
the impact of device parameters on Web and video applications.
6 CONCLUSIONS AND FUTURE WORK
In this work, we analyze the impact of device hardware on key
mobile Internet applications – Web browsing (Google Chrome),
video streaming (YouTube), and video telephony (Skype). Our study
uses seven different smartphone devices with a range of capabilities
and widely different costs – from $60 to $800. We observe that Web
applications are adversely affected by low-end device hardware, but
video applications, especially streaming, are only modestly affected
by low-end hardware. This is largely because video applications
offload video decoding to a hardware accelerator and do not rely
on the CPU. The needed hardware accelerators are available even
on low-end phones. Video applications also parallelize their tasks
across multiple cores available in low-end phones, and they are
not significantly affected under slow clock speeds. Based on the
lessons learned from studying video QoE, we explore the usefulness
of offloading Web browsing tasks to a coprocessor. Our preliminary
analysis after offloading regular expression evaluations in Javascript
to a low-power DSP shows an improvement of 18% in Web page
load time along with a 4× reduction in energy consumption.
Our study highlights the impact of device-side performance on
mobile applications. While we have studied only hardware param-
eters, a comprehensive future study should also include software
parameters such as OS and browser versions and TCP and TLS
overheads in the network stack. Also, studying the joint impact of
network conditions and device-side parameters will be useful.
ACKNOWLEDGEMENTS
We thank our shepherd Narseo Vallina-Rodriguez and the reviewers
for their feedback, which greatly improved the presentation of this
paper. This work is partially supported by NSF grants CNS-1718014
and CNS-1566260, a grant from MSIT, Korea under the ICTCCP
Program, and a Google Research Award.
CPUDSP0.00.20.40.6ScriptingTime(Seconds)012345ePLT(Seconds)0.20.40.60.81.01.21.4Power(Watt)0.00.20.40.60.81.0CDFCPUDSP300441595748883ClockFrequency(MHz)02468101214ePLTCPUDSPImpact of Device Performance on Mobile Internet QoE
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
REFERENCES
[1] Smartphone Stats 2017. [n. d.]. https://www.apple.com/iphone-xs/.
[2] ADB. [n. d.]. developer.android.com/tools/help/adb.html.
[3] YouTube Player API. [n. d.]. https://developers.google.com/youtube/android/.
[4] Http Archive. [n. d.]. https://httparchive.org/reports.
[5] Android View Cient (AVC). [n. d.]. github.com/dtmilano/AndroidViewClient.
[6] Athula Balachandran, Vyas Sekar, Aditya Akella, Srinivasan Seshan, Ion Stoica,
and Hui Zhang. 2013. Developing a predictive model of quality of experience
for internet video. In ACM SIGCOMM Computer Communication Review, Vol. 43.
ACM, 339–350.
[7] Jorge L Contreras and Rohini Lakshané. 2017. Patents and Mobile Devices in
India: An Empirical Survey. Vand. J. Transnat’l L. 50 (2017), 1.
[8] Mallesham Dasari, Conor Kelton, Javad Nejati, Aruna Balasubramanian, and
Samir R Das. 2017. Demystifying Hardware Bottlenecks in Mobile Web Quality
of Experience. In Proceedings of the SIGCOMM Posters and Demos. ACM, 43–45.
[9] Mallesham Dasari, Shruti Sanadya, Christina Vlachou, Kyu-Han Kim, and Samir R.
Das. 2018. Scalable Ground-Truth Annotation for Video QoE Modeling in En-
terprise WiFi. In Quality of Service (IWQoS), 2018 IEEE/ACM 26th International
Symposium on. ACM/IEEE, 1–6.
[10] HBO Go. [n. d.]. https://play.hbogo.com/.
[11] Nathan Goulding-Hotta, Jack Sampson, Ganesh Venkatesh, Saturnino Garcia,
Joe Auricchio, Po-Chao Huang, Manish Arora, Siddhartha Nath, Vikram Bhatt,
Jonathan Babb, et al. 2011. The greendroid mobile application processor: An
architecture for silicon’s dark future. IEEE Micro 31, 2 (2011), 86–95.
[12] https://android.googlesource.com/kernel/common/+/android
4.4/Documentation/cpu-freq/governors.txt. [n. d.]. Android Governors.
[13] http://www.ti.com/processors/dsp/overview.html. [n. d.]. DSPs.
[14] Te-Yuan Huang, Nikhil Handigol, Brandon Heller, Nick McKeown, and Ramesh
Johari. 2012. Confused, timid, and unstable: picking a video streaming rate is
hard. In Proceedings of IMC. ACM, 225–238.
[15] Te-Yuan Huang, Ramesh Johari, Nick McKeown, Matthew Trunnell, and Mark
Watson. 2015. A buffer-based approach to rate adaptation: Evidence from a large
video streaming service. ACM SIGCOMM Computer Communication Review 44, 4
(2015), 187–198.
[16] IPerf. [n. d.]. https://iperf.fr/.
[17] Junchen Jiang, Rajdeep Das, Ganesh Ananthanarayanan, Philip A Chou, Venkata
Padmanabhan, Vyas Sekar, Esbjorn Dominique, Marcin Goliszewski, Dalibor
Kukoleca, Renat Vafin, et al. 2016. Via: Improving internet telephony call qual-
ity using predictive relay selection. In Proceedings of the 2016 ACM SIGCOMM
Conference. ACM, 286–299.
[18] Junchen Jiang, Shijie Sun, Vyas Sekar, and Hui Zhang. 2017. Pytheas: Enabling
Data-Driven Quality of Experience Optimization Using Group-Based Exploration-
Exploitation.. In NSDI, Vol. 1. 3.
[19] RAM Disks. Linux. [n. d.]. https://kerneltalks.com/linux/how-to-create-ram-disk-
[20] Sumit Maheshwari, Dipankar Raychaudhuri, Ivan Seskar, and Francesco Bronzino.
2018. Scalability and Performance Evaluation of Edge Cloud Systems for Latency
Constrained Applications. In Proceedings of the Third ACM/IEEE Symposium on
in-linux/.
Edge Computing. ACM/IEEE.
[21] Manycam. [n. d.]. https://manycam.com/.
[22] Akshay Narayan, Frank Cangialosi, Prateesh Goyal, Srinivas Narayana, Moham-
mad Alizadeh, and Hari Balakrishnan. 2017. The Case for Moving Congestion
Control Out of the Datapath. In Proceedings of Hotnets. ACM, 101–107.
[23] Javad Nejati and Aruna Balasubramanian. 2016. An in-depth study of mobile
browser performance. In Proc. WWW 2016. 1305–1315.
[24] Netflix. [n. d.]. https://www.netflix.com/.
[25] Ravi Netravali, Ameesh Goyal, James Mickens, and Hari Balakrishnan. 2016.
Polaris: Faster Page Loads Using Fine-grained Dependency Tracking.. In NSDI.
123–136.
[26] Ravi Netravali and James Mickens. 2018. Prophecy: Accelerating Mobile Page
Loads Using Final-state Write Logs. In 15th USENIX NSDI 18. USENIX Association.
d.].
[n.
https://developer.qualcomm.com/software/hexagon-dsp-sdk/tools.
[27] Qualcomm
Development
Network.
[28] Az
Screen
[n.
recorder.en.uptodown.com/android.
Recorder.
d.].
https://az-screen-
protocol/.
[29] Vaspol Ruamviboonsuk, Ravi Netravali, Muhammed Uluyol, and Harsha V Mad-
hyastha. 2017. Vroom: Accelerating the Mobile Web with Server-Aided Depen-
dency Resolution. In Proceedings of SIGCOMM. ACM, 390–403.
[30] Iraj Sodagar. 2011. The mpeg-dash standard for multimedia streaming over the
internet. IEEE MultiMedia 18, 4 (2011), 62–67.
[31] Moritz Steiner and Ruomei Gao. 2016. What slows you down? Your network or
your device? arXiv preprint arXiv:1603.02293 (2016).
[32] Yi Sun, Xiaoqi Yin, Junchen Jiang, Vyas Sekar, Fuyuan Lin, Nanshu Wang, Tao Liu,
and Bruno Sinopoli. 2016. Cs2p: Improving video bitrate selection and adaptation
with data-driven throughput prediction. In Proceedings of the 2016 conference on
ACM SIGCOMM 2016 Conference. ACM, 272–285.
[33] Tesseract. [n. d.]. https://www.pyimagesearch.com/2017/07/10/using-tesseract-
ocr-python/.
[34] Chrome Developer Tools. [n. d.]. https://chromedevtools.github.io/devtools-
[35] Naresh Vattikuti, Mallesham Dasari, Himanshu Sindhwal, and Bheemar-
juna Reddy Tamma. 2015. Towards bandwidth efficient TDMA frame struc-
ture for voice traffic in MANETs. In Electronics, Computing and Communication
Technologies (CONECCT), 2015 IEEE International Conference on. IEEE, 1–6.
[36] Xiao Sophia Wang, Aruna Balasubramanian, Arvind Krishnamurthy, and David
Wetherall. 2013. Demystifying Page Load Performance with WProf.. In NSDI.
473–485.
[37] Xiao Sophia Wang, Arvind Krishnamurthy, and David Wetherall. 2016. Speeding
up Web Page Loads with Shandian.. In NSDI. 109–122.
[38] Alexa Websites. [n. d.]. https://www.alexa.com/topsites.
[39] Fatima Zarinni, Ayon Chakraborty, Vyas Sekar, Samir R Das, and Phillipa Gill.
2014. A first look at performance in mobile virtual network operators. In Pro-
ceedings of IMC. ACM, 165–172.
[40] Yuhao Zhu and Vijay Janapa Reddi. 2017. Optimizing General-Purpose CPUs
for Energy-Efficient Mobile Web Computing. ACM Transactions on Computer
Systems (TOCS) 35, 1 (2017), 1.