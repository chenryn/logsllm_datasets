### Offloading Regular Expression Functions with the Qualcomm Hexagon SDK

We utilized the Qualcomm Hexagon SDK [27] to offload regular expression functions. These functions were initially written in JavaScript and were converted into direct C-language calls, which were then ported to the aDSP (always-on DSP) processor of the Google Pixel 2 phone, equipped with the Snapdragon 835 Application Processor. Communication between the CPU and the DSP was facilitated using FastRPC remote procedure calls. Node.js was employed to measure the runtime performance of the offloaded functions and to analyze their impact on web page load times. To achieve this, we extracted the page dependency graphs using WProf [36], which preserves the dependency and computation timing information of the entire web page load process. The emulated page load time (ePLT) was derived by re-evaluating the WProf dependency graphs, replacing the execution time of all functions containing the offloaded regular expressions with their measured run times on the DSP.

### Impact of Clock Frequency on Network Performance

Figure 6 illustrates the impact of clock frequency on the network, showing that video telephony is more sensitive to clock frequency than video streaming. This discrepancy can be attributed to two main reasons: first, unlike video streaming, there is no prefetching in video telephony, making packet processing in the kernel stack a bottleneck. Second, video telephony is interactive, requiring both sending and receiving live video, which involves encoding, decoding, muxing, and demuxing. Although most of the coding is offloaded, post-processing is still limited by the CPU's performance. Apart from the clock, Skype exhibits similar trends to YouTube in terms of memory, number of cores, and governors. Interestingly, Skype's adaptive bitrate (ABR) algorithm [30] is more aggressive than YouTube's, adjusting the call video quality for slow CPUs, similar to its response to poor network conditions. In effect, the client requests low-resolution videos under slower clock frequencies.

**Key Takeaway:** Video telephony is linearly affected by slower CPU speeds primarily due to packet processing overhead, which is different from video streaming, where the effect of network processing is mitigated by prefetching.

### Discussions

#### 4.1 Impact of Clock Frequency on Network Throughput

Our findings indicate that clock frequency not only affects application processing but also has a second-order effect on network throughput due to slow packet processing, which in turn impacts application performance. While packet processing overheads in the transport layer are known to cause performance bottlenecks, they have been investigated in the context of data centers, including the use of kernel bypass techniques.

### Evaluations for DSP Offloading of JavaScript Functions

Figure 7 presents the results of offloading regular expression functions for the top 20 sports web pages. Offloading these functions to the DSP provides a noticeable improvement in web page load times, especially when the mobile device is running with the default frequency governors set by the OS (Fig. 7a). Additionally, we observed a significant reduction in median power consumption (Fig. 7b). The improvements in page load times are most pronounced (up to 25%) when the web page is loaded at slower CPU frequencies (Fig. 7c).

**Key Takeaway:** Offloading computationally intensive parts of web browsing to coprocessors, such as DSPs, shows potential, especially for low-end phones, and should be further explored.

### Related Work

#### Web Performance

There is extensive literature on characterizing and improving web performance. Tools like WProf [36] and WProf-M [23] characterize the bottlenecks in desktop and mobile browsing using page-load dependencies. Polaris [25] and Vroom [29] improve web performance by prioritizing network object loads based on dependencies. Shandian [37] and Prophecy [26] use web proxies to enhance page-load performance. Recent works, such as Webcore [40] and GreenDroid [11], focus on optimizing mobile hardware architecture to improve page load times and minimize energy consumption.

#### Video Performance

Similar to web browsing, considerable work has been done to improve video Quality of Experience (QoE), focusing on network resource provisioning [14, 39]. Pytheas [18] and CS2P [32] propose data-driven approaches to study the impact of different parameters on QoE, showing that QoE can be significantly improved by adapting the bitrate using data-driven throughput prediction. Huang et al. [15] consider client playback buffer occupancy rate adaptation, unlike network-only solutions [6, 17, 35].

### Conclusions and Future Work

In this work, we analyzed the impact of device hardware on key mobile internet applications, including web browsing (Google Chrome), video streaming (YouTube), and video telephony (Skype). Our study used seven different smartphone devices with varying capabilities and costs, ranging from $60 to $800. We found that web applications are adversely affected by low-end device hardware, while video applications, especially streaming, are only modestly affected. This is largely because video applications offload video decoding to hardware accelerators and do not rely heavily on the CPU. Based on our findings, we explored the usefulness of offloading web browsing tasks to a coprocessor. Our preliminary analysis after offloading regular expression evaluations in JavaScript to a low-power DSP showed an 18% improvement in web page load time and a 4Ã— reduction in energy consumption.

**Future Work:** A comprehensive future study should include software parameters such as OS and browser versions, as well as TCP and TLS overheads in the network stack. Additionally, studying the joint impact of network conditions and device-side parameters will be beneficial.

### Acknowledgements

We thank our shepherd Narseo Vallina-Rodriguez and the reviewers for their feedback, which greatly improved the presentation of this paper. This work is partially supported by NSF grants CNS-1718014 and CNS-1566260, a grant from MSIT, Korea under the ICTCCP Program, and a Google Research Award.

### References

[References remain unchanged and are included as provided in the original text.]

This optimized version of the text aims to be more coherent, concise, and professional, with clear headings and structured content.