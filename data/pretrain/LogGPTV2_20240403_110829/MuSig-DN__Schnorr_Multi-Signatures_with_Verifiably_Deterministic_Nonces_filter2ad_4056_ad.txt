Two-Round Scheme. In practice, the nonce/host key pair (u1, U1) can be computed at key
generation time and U1 transmitted only once to other cosigners alongside the veriﬁcation key
X1. The cosigners can then store the pair (X1, U1) as a long-term key. Then a signing session
of our protocol needs eﬀectively only two rounds.
The security of this optimization is justiﬁed by our security proof, which in fact considers
a security game that passes U1 as an additional input to the adversary in the beginning of the
game (see Game0 in Appendix B).
Public Keys. On the other hand, one cannot let the host key U be formally part of the
veriﬁcation key vk of a signer. This would allow an adversary to run the signing protocol
on input ({(X1, U1), (X2, U2)}, m), thus getting a valid signature σ, and return as forgery a
tuple ({(X1, U1), (X2, U0
2)}, m)
but the protocol was never executed on input ({(X1, U1), (X2, U0
2)}, m), this would be a win
according to Deﬁnition 4. This artiﬁcial problem could be solved by adapting the syntax and
the security deﬁnition for multi-signature schemes; however, we preferred to abide by the
standard deﬁnition.
2 6= U2: since σ is valid for ({(X1, U1), (X2, U0
2)}, m, σ) where U0
On the Inputs to the Hash. Signers are supposed to compute their signature/veriﬁcation
key pair and their nonce/host key pair from the same secret key sk, so that when all signers are
honest the multiset of veriﬁcation keys X uniquely determines the multiset of veriﬁcation/host
key pairs K. Hence, one could wonder whether it is indeed necessary to hash K instead of X
in Hnon. However, assuming V is computed as V ··= Hnon(X, m), a dishonest signer could use
two diﬀerent host keys Ui and U0
in two executions of the protocol with the same common
the same nonce r1 for diﬀerent aggregate nonces eR and eR0, hence leaking its signature key.
input (X, m). This would result in the honest signer computing two partial signatures with
i
Correctness and Robustness. Correctness of the scheme follows from the completeness
of the NIZK proof system and correctness of standard MuSig [MPSW19]. The only cases in
which the signing protocol outputs ⊥ are that the NIZK prover algorithm outputs ⊥ or that
some cosigner i sends an invalid NIZK proof πi. Given a complete NIZK proof system, these
cases correspond to the exceptional cases V ∈ F or Ui ∈ F. Since the set F is negligibly small
in E, this happens with negligible probability when signers abide by the protocol.
Moreover, a useful property of the interactive signing protocol is that it is robust in the
following sense: if a signing session fails (by returning either ⊥ or an invalid signature) due to
some of the participants sending messages that do not adhere to the protocol speciﬁcation, it
16
can be determined who is responsible for the failure (assuming that the network is reliable).
By completeness of the NIZK proof system, a cosigner i sending an invalid NIZK proof πi
is disruptive except with negligible probability (in case V or Ui falls in F). If the signing
protocol outputs an invalid signature, the disruptive cosigners can be identiﬁed by checking
the equalities siG = Ri + cXi individually for every 2 ≤ i ≤ n as already possible in MuSig.
Reducing the Number of Keys. In practice, it may be desirable to reuse a single nonce key
across diﬀerent signature keys in order to reduce the number of public host keys that signers
need to store or retransmit if they are involved in many signing setups. Using a single nonce
key for multiple signature keys is particularly natural when the host key and the signature
keys are derived using a hierarchical deterministic Bitcoin wallet [Wui13, DFL19]. Similarly, it
may be desirable to use multiple nonce keys with the same signature key, e.g., if the same
signature key is stored on multiple devices. We believe that these usage modes do not aﬀect
the security of MuSig-DN, but we leave a formal treatment for future work.
Security. We state the security of MuSig-DN in the following theorem whose proof can be
found in Appendix B.
Theorem 1. Let GrGen be a group generation algorithm for which the DL problem is hard and
GrGen0 be a (t, ε)-companion group generation algorithm for which the DDH problem is hard.
Let KeyDer be a PRNG, RandDer a PRF, and Π be a zero-knowledge and simulation-sound
NIZK proof system for relation R as deﬁned in Eq. (2) for some set F. Then the multi-signature
scheme MS ··= MuSig-DN[GrGen, GrGen0, KeyDer, RandDer, Π,F] is EUF-CMA-secure in the
random oracle model.
Precisely, for any p.p.t. adversary A making at most qh random oracle queries and initiating
at most qs instances of the signature protocol with the honest signer, there exist p.p.t. adversaries
Bprng, Bprf, Bsnd, Bzk, Bss, Bdl, and Bddh with
MS,A (λ) ≤ (qh + qs + 1)3/4(cid:16)Advdl
Adveuf-cma
+ Advprng
KeyDer,Bprng
GrGen,Bdl
(λ) + Advprf
(λ)(cid:17)1/4
+ Advddh
GrGen0,Bddh
(λ) + Advss
Π,Bss
5 Purify: A Pure Elliptic Curve PRF
RandDer,Bprf
(λ) + Advsnd
Π,Bsnd
(λ) + qsε + (qh + qs + 1)2
2λ−2
(λ)
Π,Bzk
(λ) + Advzk
+ 2
2λ/4 .
In this section, we describe a suitable companion group generation algorithm GrGen0 (see
Section 2) which, given a λ-bit prime p, returns a tuple (q, E, P, f) where (q, E, P) is a group
description and f : E → Fp is an ε(λ)-regular function for some ε ∈ negl(λ). We call our
construction Purify because the consonants spell PRF and the secret parts of the computation
are purely based on elliptic curves.
The construction makes use of randomness extractors that rely on the DDH problem over
elliptic curves [Gür05, FP07]. Let p > 3 be prime. An elliptic curve in short Weierstrass form
is a set of points
E = {(x, y) ∈ (Fp)2 : y2 = x3 + ax + b} ∪ {0E}
17
where a and b are elements of Fp such that 4a3 + 27b2 6= 0 and 0E is the point at inﬁnity. It
is well-known that E can be equipped with a group law with neutral element 0E. Given an
integer n, we let E[n] denote the subgroup of n-torsion points, i.e., E[n] ··= {P ∈ E : nP = 0E}.
Let d 6= 0 be a quadratic non-residue in Fp. The curve
˜E = {(x, y) ∈ (Fp)2 : y2 = x3 + ad2x + bd3} ∪ {0˜E}
is a quadratic twist of E. Curves E and ˜E are not isomorphic over Fp (unless b = 0 and −1 is a
quadratic non-residue in Fp, in which case E is supersingular) but they become isomorphic over
the quadratic extension ﬁeld Fp2 ∼= Fp[X]/(X2− d) ∼= Fp(√
d : (u0, u1) ∈ (Fp)2},
√
the isomorphism being (x, y) 7→ (dx, d
The basic construction of GrGen0 is as follows: given p, select an elliptic curve E over
Fp2 ∼= Fp(√
d) whose group of points is cyclic of order q together with a generator P and such
that DDH is assumed to be hard over E and deﬁne
d) = {u0 + u1
dy).
√
f : E → Fp
Q 7→
(0
x0
if Q = 0E
if Q = (x0 + x1
√
d, y0 + y1
√
d).
Let Up be the uniform distribution on Fp and UE be the uniform distribution on E. Farashahi
and Pellikaan [FP07], improving on a result by Gürel [Gür05, Lemma 1], showed that Up and
f(UE) are statistically close. More precisely, Corollary 3 by Farashahi and Pellikaan [FP07]
states for p > 18 the bound
∆(Up, f(UE)) ≤ 3√
≤ 3√2
2λ/2 .
p
In other words, f is ε-regular for ε = 3√2/2λ/2.
Our goal is to construct a PRF onto Fp of the form
Fu(z) = f(uHnon(z)),
(3)
where u ∈ Zq is the key and Hnon : {0, 1}∗ → E is a hash function. In order for this function to
be both computable and veriﬁable against a public key U = uP by an arithmetic circuit with
low multiplicative complexity, we restrict ourselves to speciﬁc curves constructed as follows:
– Fix a quadratic non-residue d ∈ F∗
– Find a, b ∈ Fp such that:
• the equation y2 = x3 + ax + b deﬁnes an elliptic curve E1 over Fp of prime order q1 in
• the equation y2 = x3 + ad2x + bd3 deﬁnes an elliptic curve E2 over Fp (a quadratic
which DDH is assumed to be hard;9
twist of E1) of prime order q2 6= q1, in which DDH is assumed to be hard.
.
p
Lemma 2. Consider the elliptic curve E = E1(Fp2), deﬁned by equation y2 = x3 + ax + b
over Fp2. Then
(i) E is isomorphic to the direct product E1 × E2 of E1 and E2; in particular, it is cyclic and
has order q = q1q2;
9 This means in particular that E1 must have a large embedding degree.
18
(ii) there is an eﬃciently computable and invertible isomorphism φ: E → E1 × E2.
Proof. Let E0 be the curve deﬁned by y2 = x3 + ad2x + bd3 over Fp2 and let τ : E → E0 be the
√
dy). Let q1 = p + 1 − t be the number of
twisting isomorphism deﬁned by τ(x, y) = (dx, d
points of E1. Then E2 has q2 = p+1+ t points and E has p2 +1−(t2−2q) = (p+1)2− t2 = q1q2
points.
Since q1 and q2 are coprime, let m1 and m2 be such that m1q1 + m2q2 = 1. Consider
ψ: E → E[q1] × E[q2]
Q 7→ (m2q2Q, m1q1Q).
Note that E[q1] = E1 (as E1 is a subgroup of E[q1] and E[q1] is a proper subgroup of E) and
E[q2] = τ−1(E2) (as τ−1(E2) is a subgroup of E[q2] and E[q2] is a proper subgroup of E), which
implies in particular that #E[q1] = q1 and #E[q2] = q2. Hence, ψ is an eﬃciently computable
isomorphism whose inverse, given by (R, S) 7→ R + S, is also eﬃciently computable. Hence,
φ ··= τ0 ◦ ψ where τ0 : E[q1]× E[q2] → E1 × E2 is deﬁned by τ0(R, S) = (R, τ(S)) is an eﬃciently
computable and invertible isomorphism from E to E1 × E2. This proves (i) and (ii) (the fact
that E is cyclic follows from the Chinese Remainder Theorem).
Hnon(z) ··= φ−1(H1(z), H2(z)).
Moreover, assuming DDH is hard in E1 and E2, DDH is also hard in E1 × E2 with a tight
reduction [GKR04a, Lemma 4], and since φ is eﬃciently invertible, DDH is also hard in E.
As a consequence, instead of working over E, one can project the computation onto E1 and
E2, where the arithmetic is simpler, and then combine the two to obtain the ﬁnal result. Let
H1 and H2 be hash functions onto E1 and E2 respectively.10 Deﬁne a hash function Hnon onto
E as
(4)
Using the deﬁnition of φ given in the proof of Lemma 2, one can easily see that Hnon(z) =
H1(z) + τ−1(H2(z)), where τ−1(x, y) = (d−1x, d−3/2y). Using the indiﬀerentiability notion by
Maurer et al. [MRH04], one can show that Hnon “behaves” like a random oracle assuming H1
and H2 are random oracles. As the EUF-CMA security notion is a single-stage game [RSS11],
this ensures that the proof of Theorem 1 (see Appendix B) carries over to MuSig-DN used
with this construction (in the random oracle model for H1 and H2).
Claim. Hnon as deﬁned in (4) is indiﬀerentiable [MRH04] from a random oracle onto E.
Proof. This follows from the results of Brier et al. [BCI+10, Th. 1] by noting that z 7→
(H1(z), H2(z)) is a random oracle onto E1×E2 and that an eﬃciently computable and invertible
isomorphism is an admissible encoding [BCI+10, Def. 4].
We can now work out an explicit formula for Fu(z) in terms of multiplications in E1 and
E2, with F as deﬁned in Eq. (3), and Hnon as deﬁned in Eq. (4):
Fu(z) = f (uHnon(z))
= f
(cid:16)
uφ−1(H1(z), H2(z))(cid:17)
.
10 For example, the functions H1 and H2 can be instantiated with the help of a counter and a hash function
from {0, 1}∗ to Fp. The counter is concatenated to the hash input and the hash output is interpreted as the
x-coordinate of E1 or E2 respectively. If there is no corresponding y-coordinate, the counter is incremented
and the process is repeated until a valid point is found. Since H1 and H2 only operate on public data there is
no risk of leaking information through timing.
19
Letting u1H1(z) = (x1, y1) and u2H2(z) = (x2, y2),
For u ∈ Zq, let u1 = u mod q1 and u2 = u mod q2. Then
Fu(z) = f
= f
Fu(z) = f
= f
.
φ−1(u1H1(z), u2H2(z))(cid:17)
(cid:16)
u1H1(z) + τ−1(u2H2(z))(cid:17)
(cid:16)
(cid:16)(x1, y1) + τ−1 ((x2, y2))(cid:17)
(cid:16)(x1, y1) + (d−1x2, d−3/2y2)(cid:17)
!2
2 − 2d−2√
(d−1x2 − x1)2
d−3/2y2 − y1
d−1x2 − x1
1 + d−3y2
y2
.
Using the group law in E to write the x-coordinate explicitly (see the ﬁnal paragraph in
Section 6.1 for an explicit formula),
Fu(z) = f
− x1 − d−1x2, . . .
!!
− x1 − d−1x2, . . .
Evaluating f, which corresponds to dropping the y-coordinate and the √
x-coordinate, we have
dy1y2
= f
.
Fu(z) = y2
1 + d−3y2
(x1 − d−1x2)2 − x1 − d−1x2,
2
By the E1 and E2 curve equations to substitute y2
1 and y2
2,
Fu(z) = x3