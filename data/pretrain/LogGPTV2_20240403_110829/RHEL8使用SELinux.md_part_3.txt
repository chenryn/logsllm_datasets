另外，如果安装了 `setroubleshoot-server`{.literal} 软件包，请输入：
``` screen
# grep "SELinux is preventing" /var/log/messages
```
如果 SELinux 是活跃的，且 Audit
守护进程（`auditd`{.literal}）没有在您的系统中运行，在 `dmesg`{.literal}
命令输出中搜索特定的 SELinux 信息：
``` screen
# dmesg | grep -i -e type=1300 -e type=1400
```
如需更多信息，请参阅 [SELinux
故障排除](#troubleshooting-problems-related-to-selinux_using-selinux.html "第 5 章 故障排除与 SELinux 相关的问题"){.link}。
:::
:::
::: section
::: titlepage
# []{#changing-selinux-states-and-modes_using-selinux.html#enabling-selinux-on-systems-that-previously-had-it-disabled_changing-selinux-states-and-modes}在之前禁用的系统中启用 SELinux[]{#changing-selinux-states-and-modes_using-selinux.html#enabling-selinux_changing-selinux-states-and-modes} {.title}
:::
当您在之前禁用的系统中启用 SELinux
时，为了避免出现问题（如系统无法引导或进程失败），请按照以下步骤执行：
::: orderedlist
**流程**
1.  以 permissive 模式启用 SELinux。如需更多信息，请参阅[切换到
    permissive
    模式](#changing-selinux-states-and-modes_using-selinux.html#changing-to-permissive-mode_changing-selinux-states-and-modes "切换到 permissive 模式"){.link}。
2.  重启您的系统：
    ``` screen
    # reboot
    ```
3.  检查 SELinux 拒绝信息。如需更多信息，请参阅 [识别 SELinux
    拒绝操作信息](#troubleshooting-problems-related-to-selinux_using-selinux.html#identifying-selinux-denials_troubleshooting-problems-related-to-selinux "识别 SELinux 拒绝"){.link}。
4.  如果没有拒绝的操作，切换到 enforcing
    模式。如需更多信息，请参阅[在引导时进入 SELinux
    模式](#changing-selinux-states-and-modes_using-selinux.html#changing-selinux-modes-at-boot-time_changing-selinux-states-and-modes "在引导时更改 SELinux 模式"){.link}。
:::
::: orderedlist
**验证**
1.  系统重启后，确认 `getenforce`{.literal} 命令返回
    `Enforcing`{.literal}:
    ``` screen
    $ getenforce
    Enforcing
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要在 enforcing 模式下使用 SELinux 运行自定义应用程序，请选择以下之一：
::: itemizedlist
-   在 `unconfined_service_t`{.literal} 域中运行应用程序。
-   为应用程序编写新策略。[如需更多信息，请参阅编写自定义 SELinux
    策略部分](#writing-a-custom-selinux-policy_using-selinux.html "第 7 章 编写自定义 SELinux 策略"){.link}。
:::
:::
::: itemizedlist
**其它资源**
-   [SELinux
    状态和模式部分涵盖了模式的临时更改](#getting-started-with-selinux_using-selinux.html#selinux-states-and-modes_getting-started-with-selinux "SELinux 状态和模式"){.link}。
:::
:::
::: section
::: titlepage
# []{#changing-selinux-states-and-modes_using-selinux.html#Enabling_and_Disabling_SELinux-Disabling_SELinux_changing-selinux-states-and-modes}禁用 SELinux {.title}
:::
使用以下步骤永久禁用 SELinux。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
禁用 SELinux 时，SELinux 策略不被加载 ; 它不会被强制执行，也不会记录 AVC
信息。因此，[运行 SELinux
的好处](#getting-started-with-selinux_using-selinux.html#benefits-of-selinux_getting-started-with-selinux "运行 SELinux 的好处"){.link}中介绍的好处都将没有。
红帽强烈建议您使用 permissive 模式，而不是永久禁用 SELinux。如需有关
permissive 模式的更多信息，请参阅[切换为 permissive
模式](#changing-selinux-states-and-modes_using-selinux.html#changing-to-permissive-mode_changing-selinux-states-and-modes "切换到 permissive 模式"){.link}。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
在 `/etc/selinux/config`{.literal} 中使用 `SELINUX=disabled`{.literal}
选项禁用 SELinux 的结果是，内核在引导时首先启用
SELinux，并在后续的引导过程后切换到禁用模式。因为内存泄漏和竞争条件会导致内核
panics，如果您的情况确实需要完全禁用
SELinux，则首选的方法是，在内核命令行中添加 `selinux=0`{.literal}
参数（如 [引导时更改 SELinux
模式](#changing-selinux-states-and-modes_using-selinux.html#changing-selinux-modes-at-boot-time_changing-selinux-states-and-modes "在引导时更改 SELinux 模式"){.link}）所述。
:::
::: orderedlist
**流程**
1.  在您选择的文本编辑器中打开 `/etc/selinux/config`{.literal}
    文件，例如：
    ``` screen
    # vi /etc/selinux/config
    ```
2.  配置 `SELINUX=disabled`{.literal} 选项：
    ``` screen
    # This file controls the state of SELinux on the system.
    # SELINUX= can take one of these three values:
    #       enforcing - SELinux security policy is enforced.
    #       permissive - SELinux prints warnings instead of enforcing.
    #       disabled - No SELinux policy is loaded.
    SELINUX=disabled
    # SELINUXTYPE= can take one of these two values:
    #       targeted - Targeted processes are protected,
    #       mls - Multi Level Security protection.
    SELINUXTYPE=targeted
    ```
3.  保存更改并重启您的系统：
    ``` screen
    # reboot
    ```
:::
::: orderedlist
**验证**
1.  重启后，确认 `getenforce`{.literal} 命令返回 `Disabled`{.literal}:
    ``` screen
    $ getenforce
    Disabled
    ```
:::
:::
::: section
::: titlepage
# []{#changing-selinux-states-and-modes_using-selinux.html#changing-selinux-modes-at-boot-time_changing-selinux-states-and-modes}在引导时更改 SELinux 模式 {.title}
:::
在引导时，您可以设置几个内核参数来更改 SELinux 的运行方式：
::: variablelist
[enforcing=0]{.term}
:   设置此参数可让系统以 permissive
    模式启动，这在进行故障排除时非常有用。如果您的文件系统被破坏，使用
    permissive 模式可能是唯一的选择。在 permissive
    模式中，系统将继续正确创建标签。在这个模式中产生的 AVC 信息可能与
    enforcing 模式不同。
    在 permissive
    模式中，只报告来自于同一拒绝的一系列操作的第一个拒绝信息。然而，在
    enforcing
    模式中，您可能会得到一个与读取目录相关的拒绝信息，应用程序将停止。在
    permissive 模式中，您会得到相同的 AVC
    信息，但应用程序将继续读取目录中的文件，并为因为每个拒绝额外获得一个
    AVC。
[selinux=0]{.term}
:   这个参数会导致内核不载入 SELinux
    构架的任意部分。初始化脚本会注意到系统使用 `selinux=0`{.literal}
    参数引导，并创建 `/.autorelabel`{.literal}
    文件。这会导致系统在下次使用 SELinux enabled
    模式引导时自动重新标记。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    红帽不推荐使用 `selinux=0`{.literal} 参数。要调试您的系统，首选使用
    permissive 模式。
    :::
[autorelabel=1]{.term}
:   这个参数强制系统使用类似以下命令的重新标记：
    ``` screen
    # touch /.autorelabel
    # reboot
    ```
    如果文件系统中包含大量错误标记的对象，以 permissive 模式启动系统，使
    autorelabel 进程成功。
:::
::: itemizedlist
**其它资源**
-   有关 SELinux 的其他内核引导参数，如
    `checkreqprot`{.literal}，请查看在安装 `kernel-doc`{.literal}
    软件包时安装的
    `/usr/share/doc/kernel-doc-/Documentation/admin-guide/kernel-parameters.txt`{.literal}
    文件。使用安装的内核的版本号替换 [*\*]{.emphasis}
    字符串，例如：
    ``` screen
    # yum install kernel-doc
    $ less /usr/share/doc/kernel-doc-4.18.0/Documentation/admin-guide/kernel-parameters.txt
    ```
:::
:::
:::
[]{#managing-confined-and-unconfined-users_using-selinux.html}
::: chapter
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#managing-confined-and-unconfined-users_using-selinux}第 3 章 管理限制和未限制的用户 {.title}
:::
下面的部分解释了 Linux 用户与 SELinux
用户的映射，描述了基本限制的用户域，并演示了将新用户映射到 SELinux
用户。
::: section
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#confined-and-unconfined-users_managing-confined-and-unconfined-users}限制和未限制的用户 {.title}
:::
每个 Linux 用户都使用 SELinux 策略映射到 SELinux 用户。这可允许 Linux
用户继承对 SELinux 用户的限制。
要在您的系统中查看 SELinux 用户映射，以 root 用户身份使用
`semanage login -l`{.literal} 命令：
``` screen
# semanage login -l
Login Name           SELinux User         MLS/MCS Range        Service
__default__          unconfined_u         s0-s0:c0.c1023       *
root                 unconfined_u         s0-s0:c0.c1023       *
```
在 Red Hat Enterprise Linux 中，Linux 用户默认映射到 SELinux
`default`{.literal} 登录，这与 SELinux `unconfined_u`{.literal}
用户映射。下面一行定义了默认映射：
``` screen
__default__          unconfined_u         s0-s0:c0.c1023       *
```
受限制和不受限制的 Linux 用户会受到可执行和可写入的内存检查，也受到 MCS
或 MLS 的限制。
要列出可用的 SELinux 用户，请输入以下命令：
``` screen
$ seinfo -u
Users: 8
   guest_u
   root
   staff_u
   sysadm_u
   system_u
   unconfined_u
   user_u
   xguest_u
```
请注意，`seinfo`{.literal} 命令由 `setools-console`{.literal}
软件包提供，默认不会安装。
如果一个未限制的 Linux 用户执行一个应用程序，这个应用程序被 SELinux
策略定义为可以从 `unconfined_t`{.literal}
域转换到其自身限制域的应用程序，则未限制的 Linux
用户仍会受到那个受限制域的限制。这样做的安全优点是，即使 Linux
用户的运行没有限制，但应用程序仍受限制。因此，对应用程序中漏洞的利用会被策略限制。
同样，我们可以将这些检查应用到受限制的用户。每个受限制的用户都受到受限用户域的限制。SELinux
策略还可定义从受限制的用户域转换到自己受限制的目标域转换。在这种情况下，受限制的用户会受到那个目标限制的域的限制。重点是，根据用户的角色，把特定的权限与受限制的用户相关联。
:::
::: section
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#selinux-user-capabilities_managing-confined-and-unconfined-users}SELinux 用户功能 {.title}
:::
下表提供了 Red Hat Enterprise Linux 中 Linux 用户的基本受限制域示例：
::: table
[]{#managing-confined-and-unconfined-users_using-selinux.html#idm140024639516928}
**表 3.1. SELinux 用户功能**
::: table-contents
  用户       角色       域         X 窗口系统   su 或 sudo   在主目录和 /tmp 中执行（默认）   网络
  ---------- ---------- ---------- ------------ ------------ -------------------------------- ------------
  sysadm_u   sysadm_r   sysadm_t   是           su 和 sudo   是                               是
  staff_u    staff_r    staff_t    是           仅 sudo      是                               是
  user_u     user_r     user_t     是           否           是                               是
  guest_u    guest_r    guest_t    否           否           是                               否
  xguest_u   xguest_r   xguest_t   是           否           是                               仅 Firefox