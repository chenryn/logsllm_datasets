*   一切都是基于命令行的
借助 Docker Hub，您将:
*   获得一个基于图形用户界面的界面，您可以使用它来管理您的映像
*   在云中设置一个可以处理公共和/或私有映像的位置
*   不必管理托管所有映像的服务器，让您高枕无忧
# 部署您自己的注册表
您可能已经猜到，Docker 注册表是作为 Docker Hub 的映像分发的，这使得部署它就像运行以下命令一样简单:
```
$ docker image pull registry:2
$ docker container run -d -p 5000:5000 --name registry registry:2
```
这些命令将为您提供最基本的 Docker 注册表安装。让我们快速了解一下如何将映像拖放到它上面。首先，我们需要一个映像，所以让我们抓住阿尔卑斯山的映像(再次):
```
$ docker image pull alpine
```
现在我们已经有了 Alpine Linux 映像的副本，我们需要将它推送到我们本地的 Docker 注册表中，该注册表可在`localhost:5000`获得。为此，我们需要用本地 Docker 注册表的 URL 标记 Alpine Linux 映像，并使用不同的映像名称:
```
$ docker image tag alpine localhost:5000/localalpine
```
现在我们已经标记了映像，我们可以通过运行以下命令将其推送到本地托管的 Docker 注册表中:
```
$ docker image push localhost:5000/localalpine
```
下面的屏幕截图显示了前面命令的输出:
![](img/e0fd1833-1710-4430-9a66-fed096319f3b.png)
尝试运行以下命令:
```
$ docker image ls
```
输出应该显示您有两幅相同的映像`IMAGE ID`:
![](img/35e7db0c-7e62-43ab-b156-cb532d6c26ba.png)
在我们从本地 Docker 注册表中将映像拉回来之前，我们应该删除映像的两个本地副本。我们需要使用`REPOSITORY`名称来完成这个操作，而不是`IMAGE ID`，因为我们有来自两个位置的两个具有相同 ID 的映像，Docker 会抛出一个错误:
```
$ docker image rm alpine localhost:5000/localalpine
```
现在，原始映像和标记映像已被删除，我们可以通过运行以下命令从本地 Docker 注册表中提取映像:
```
$ docker image pull localhost:5000/localalpine
$ docker image ls
```
如您所见，我们现在有一个从 Docker 注册表中提取的映像副本，运行于`localhost:5000`:
![](img/e0902ec1-c71c-4565-8cd7-a57665834ee0.png)
您可以通过运行以下命令来停止和删除 Docker 注册表:
```
$ docker container stop registry
$ docker container rm -v registry
```
现在，在启动 Docker 注册表时，有很多选项和注意事项。可以想象，最重要的是围绕存储。
鉴于注册表的唯一目的是存储和分发映像，因此使用某种级别的持久操作系统存储非常重要。Docker 注册表目前支持以下存储选项:
*   文件系统:这正是它所说的；所有映像都存储在文件系统中您定义的路径上。默认为`/var/lib/registry`。
*   Azure:这使用微软 Azure Blob 存储。
*   GCS:这使用谷歌云存储。
*   S3:这使用亚马逊简单存储服务(亚马逊 S3)。
*   Swift:这个用的是 OpenStack Swift。
如您所见，除了文件系统之外，所有支持的存储引擎都是高可用性的分布式对象级存储。我们将在后面的章节中研究这些云服务。
# 可信注册表 Docker
商用 **Docker 企业版** ( **Docker EE** )附带的组件之一是 **Docker 可信注册中心** ( **DTR** )。可以把它看作是 Docker Hub 的一个版本，您可以在自己的基础架构中托管它。DTR 在免费 Docker 中心和 Docker 登记处提供的功能上增加了以下功能:
*   集成到您的认证服务中，如活动目录或 LDAP
*   在防火墙后自己的基础设施(或云)上部署
*   映像签名，确保您的映像可信
*   内置安全扫描
*   直接从 Docker 获得优先支持
# 第三方注册中心
提供映像注册服务的不仅仅是 Docker 像红帽这样的公司提供自己的注册中心，在那里你可以找到红帽容器目录，它托管着红帽所有产品的容器化版本，以及支持其 OpenShift 产品的容器。
JFrog 的 Artifactory 等服务提供了一个私有的 Docker 注册中心，作为其构建服务的一部分。还有其他注册即服务产品，如 CoreOS 的 Quay，现在归红帽所有，还有亚马逊网络服务和微软 Azure 的服务。当我们继续关注云中的 Docker 时，我们将了解这些服务。
# 微博客
**当你看着你的容器或映像四处运输时，微博客**是一个很好的工具。它将考虑特定 Docker 映像的每一层中正在发生的一切，并根据实际大小或占用的磁盘空间量向您输出它的权重。
当您导航到微博客网站[https://microbadger.com/](https://microbadger.com/):时，您将看到此页面
![](img/748cf6b5-1cb4-4cea-a32f-033fefa47af3.png)
您可以搜索 Docker Hub 上的映像，让 Microbadger 向您提供关于该映像的信息，或者如果您希望提供一些样本集，或者希望查看一些更复杂的设置，您可以加载一个样本映像集。
在本例中，我们将搜索我们在本章前面推送的`masteringdockerthirdedition/dockerfiles-example`映像，并选择最新的标签。从下面的截图中可以看到，Docker Hub 会在您键入时自动搜索并实时返回结果。
默认情况下，它将始终加载最新的标签，但您也可以通过从**版本**下拉菜单中选择您想要的标签来更改您正在查看的标签。例如，如果您有一个分段标记，并且正在考虑将新映像推进到最新的标记中，但是想看看它对映像的大小有什么影响，这可能会很有用。
从下面的截图中可以看到，Microbadger 提供了映像包含多少层的信息:
![](img/b3fb9585-9fd9-4bbb-9043-d262220d59d6.png)
通过显示每个层的大小和在映像构建过程中执行的 Dockerfile 命令，您可以看到在映像构建的哪个阶段添加了膨胀，这在缩小映像大小时非常有用。
另一个很棒的特性是，Microbadger 为您提供了在 Git 存储库或 Docker Hub 中嵌入映像基本统计数据的选项；例如，下面的屏幕显示了我自己的一个映像的 Docker Hub 页面:
![](img/e6cfb3e3-e198-4527-a92e-98a92be2e939.png)
如您所见，Microbadger 正在显示映像的整体大小，在本例中为 5.9MB，以及映像的总层数，即 7 层。微博客服务仍处于测试阶段，新功能一直在增加。我建议你留意一下。
# 摘要
在本章中，我们研究了几种使用 Docker Hub 手动和自动构建容器映像的方法。我们讨论了除了 Docker Hub 之外，您还可以使用的各种注册中心，例如 Docker Store 和 Red Hat 的容器目录。
我们还研究了部署我们自己的本地 Docker 注册表，并讨论了在部署存储时需要考虑的事项。最后，我们看了微博客，这是一种允许您显示远程托管的容器映像信息的服务。
在下一章中，我们将了解如何从命令行管理容器。
# 问题
1.  对或错:Docker Hub 是唯一可以下载 Docker 官方图片的来源。
2.  描述为什么要将自动构建链接到正式的 Docker Hub 映像。
3.  Docker Hub 支持多阶段构建吗？
4.  对还是错:在命令上登录 Docker 也会让你登录桌面应用？
5.  如何删除两个共享相同映像标识的映像？
6.  默认情况下，Docker 注册表在哪个端口上运行？
# 进一步阅读
有关 Docker 存储、可信注册表和注册表的更多信息，请访问:
*   Docker 商店出版商注册:[https://store.docker.com/publisher/signup/](https://store.docker.com/publisher/signup/)
*   Docker 可信注册表(DTR):[https://docs . docker . com/ee/DTR/](https://docs.docker.com/ee/dtr/)
*   Docker 注册文档:https://docs . docker . com/registry/
您可以在以下位置找到更多关于可用于 Docker 注册表的不同类型的基于云的存储的详细信息:
*   天蓝色斑点存储:[https://azure.microsoft.com/en-gb/services/storage/blobs/](https://azure.microsoft.com/en-gb/services/storage/blobs/)
*   谷歌云存储:[https://cloud.google.com/storage/](https://cloud.google.com/storage/)
*   亚马逊简单存储服务(亚马逊 S3):[https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)
*   Swift:这个使用 OpenStack Swift:[https://wiki.openstack.org/wiki/Swift](https://wiki.openstack.org/wiki/Swift)
这里可以找到一些第三方注册服务:
*   红帽容器目录:[https://access.redhat.com/containers/](https://access.redhat.com/containers/)
*   open shift:[https://www.openshift.com/](https://www.openshift.com/)
*   JFrog 手工制作:[https://www.jfrog.com/artifactory/](https://www.jfrog.com/artifactory/)
*   Docker:[https://quay.io/](https://quay.io/)
最后，您可以在这里找到我的 Apache Bench 映像的 Docker Hub 和 Microbadger 的链接:
*   Apache Bench 映像(Docker 中心):[https://hub . docker . com/r/russmckendrick/ab/](https://hub.docker.com/r/russmckendrick/ab/)
*   阿帕奇长凳映像(微摄):[https://microbadger.com/img/russmckendrick/ab](https://microbadger.com/img/russmckendrick/ab)