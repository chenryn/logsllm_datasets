### Heidelberg, February 2007

[26] E. Rescorla. Subject: [MLS] TreeKEM: An Alternative to ART. MLS Mailing List, 2018. [Online]. Available: https://mailarchive.ietf.org/arch/msg/mls/WRdXVr8iUwibaQu0tH6sDnqU1no.

[27] D. G. Steer, L. Strawczynski, W. Diffie, and M. J. Wiener. A Secure Audio Teleconference System. In S. Goldwasser, editor, CRYPTO '88, 1988.

[28] D. Wallner, E. Hardner, and R. Agee. Key Management for Multicast: Issues and Architectures. IETF RFC2676, 1999. [Online]. Available: https://tools.ietf.org/html/rfc2627.

[29] M. Weidner. Group Messaging for Secure Asynchronous Collaboration. MPhil Thesis, Session 5C: Messaging and Privacy CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea.

### A Continuous Group Key Agreement (CGKA)

#### A.1 Syntax

This section introduces the formal syntax of a CGKA scheme. Parties are identified by unique party IDs, chosen from an arbitrary fixed set. Let \(\gamma\) and \(\gamma'\) denote the internal state of the CGKA scheme before and after an operation, respectively. A CGKA scheme consists of eight algorithms:

- **For PKI:**
  - \((ipk, isk) \leftarrow \text{Gen-IK}\): Generates and outputs a new initial key pair.
  
- **For group creation:**
  - \(\gamma' \leftarrow \text{Create}(ID, isk)\): Initializes the state and creates a group with self, using the initial secret key \(isk\).

- **For proposals:**
  - \((\gamma', P) \leftarrow \text{Add}(\gamma, ID', ipk')\): Generates a proposal to add a party \(ID'\) using the initial public key \(ipk'\).
  - \((\gamma', P) \leftarrow \text{Remove}(\gamma, ID')\): Generates a proposal to remove a party \(ID'\).
  - \((\gamma', P) \leftarrow \text{Update}(\gamma)\): Generates a proposal for self to update.

- **For commits:**
  - \((\gamma', I, W_{pub}, W_{priv}, T) \leftarrow \text{Commit}(\gamma, P)\): Creates a commit corresponding to a vector \(P\) of proposals and outputs the resulting commit secret \(I\), a public welcome message \(W_{pub}\), a vector \(W_{priv}\) of private welcome messages (for newly added parties), and a control message \(T\) (for existing group members).
  - \((\gamma', GI, I) \leftarrow \text{Proc-Com}(\gamma, T, P)\): Used by existing group members to process the control message \(T\) with respect to the vector of proposals \(P\), and reach a new epoch; outputs updated group information \(GI\) (where \(GI = \bot\) if \(T\) is considered invalid) and a commit secret \(I\).
  - \((\gamma, GI, I) \leftarrow \text{Join}(\gamma, orig, W_{pub}, W_{priv}, isk)\): Used by newly added group members to process the welcome messages \(W_{pub}\) and \(W_{priv}\), generated via a commit operation by \(orig\), and join the group using the initial secret key \(isk\); outputs group information \(GI\) (where \(GI = \bot\) if \(W_{pub}\) or \(W_{priv}\) are considered invalid) and a commit secret \(I\).

#### A.2 Security

CGKA schemes must satisfy correctness, i.e., all group members output the same keys in every epoch. Furthermore, the keys must be private, and the CGKA scheme must satisfy post-compromise forward secrecy (PCFS).

The CGKA game allows an adversary \(A\) to control the execution and attack a single group. Specifically, \(A\) controls who creates the group, who is added and removed, who updates, who commits, etc. The attacker is also allowed to leak the state of any party (whether currently part of the group or not) at any time. The privacy of keys is captured by considering a challenge that outputs either the actual key output by the CGKA scheme or a truly random one, determined by an internal random bit \(b\), which \(A\) must guess at the end of the game.

##### A.2.1 Bookkeeping

Similar to SGM schemes, the CGKA security game keeps track of all relevant execution data using a history graph, and the recorded data informs a safety predicate (pertaining to privacy) evaluated at the end of the game. The following paragraphs outline the differences in bookkeeping between the CGKA game and the SGM game.

- **History graphs**: A history graph is a directed tree whose nodes correspond to the group state in various epochs of an execution. There are three types of nodes: \(v_{root}\), \(v_{create}\) nodes, and commit nodes \(v\). A node consists of the following values:
  - \(v = (vid, orig, pid)\), where
    - \(vid\) is the node’s unique ID,
    - \(orig\) is the party that caused the node’s creation (either the group creator or the committer),
    - \(pid\) is the vector of (IDs of) proposals included in the commit.

- **Proposals**: The object \(Props\) keeps track of proposals. The information recorded about each proposal is a vector:
  - \(p = (pid, vid, op, orig, data)\), where
    - \(pid\) is the proposal’s unique ID,
    - \(vid\) is the ID of the HG node corresponding to the epoch in which the proposal was created,
    - \(op \in \{\text{add, rem, upd}\}\) is the type of proposal,
    - \(orig\) is the party that issued the proposal,
    - \(data\) is additional data.

- **PKI bookkeeping**: The PKI in the CGKA game only handles so-called init keys (IKs), each of which has an ID \(ikid\). Arrays are maintained to map \(ikids\) to the corresponding public init key (IK-PK) and secret init key (IK-SK). Moreover, \(IK-St\) records the IKs stored by each party, and \(IK-Tr\) and \(IK-Lk\) keep track of "trash" IKs (old secret init keys not deleted) and leaked IKs.

- **Keys and Challenges**: The array \(Key[vid]\) stores the corresponding key for each \(vid\), and the Boolean arrays \(Reveal[vid]\) and \(Chall[vid]\) store whether the key was revealed and challenged, respectively.

- **Initialization**: The initialization of the CGKA game proceeds similarly to that of the SGM game, as depicted in Figure 9.

```plaintext
// General
b ← {0, 1}
idCtr++
∀ID : γ[ID] ← Init(ID)

// Communication
CM[·, ·] ← ∅
PM[·, ·] ← ∅
WMpub[·, ·] ← ∅
WMpriv[·, ·] ← ∅
WM-Lk ← ∅

// History Graph
vidroot ← HG.init
V-Pt[·] ← vidroot
V-Tr[·] ← ∅

// Miscellaneous
Key[·] ← ∅
Reveal[·] ← ∅
Chall[·] ← ∅
Del[·] ← true
BR[·] ← false

// PKI
IK-PK[·] ← ∅
IK-SK[·] ← ∅
IK-St[·] ← ∅
IK-Tr ← ∅
IK-Lk ← ∅
```

##### A.2.3 Oracles

All adversary oracles described below proceed according to the same pattern: (a) verifying the validity of the oracle call, (b) retrieving values needed for (c), (c) running the corresponding SGM algorithm, and (d) updating the bookkeeping. Validity checks (a) are described informally in the text below; a formal description is provided in Figure 14. Note that, most of the time, (b) and (c) are straightforward and are not mentioned in the descriptions. To improve readability, lines (c) are highlighted.

- **PKI**: The spirit of the PKI (Figure 10) in the CGKA game differs somewhat from the SGM case. Init keys (IKs) are either honestly generated by a party, via the oracle `gen-new-ik`, or registered by the attacker \(A\), via the oracle `reg-ik`. Note that the CGKA game will allow the attacker to pick which IK a new group member is added with; hence, there is no association between IKs and identities.
  - **Oracle `gen-new-ik(ID)`**: Runs the IK-generation algorithm `Gen-IK` and stores the resulting key pair with a new \(ikid\). The oracle also records in \(IK-St\) that \(ID\) now stores the IK with ID \(ikid\).
  - **Oracle `reg-ik(ipk)`**: Allows \(A\) to register an IK public key \(ipk\) with the game (and get an \(ikid\) for it).

- **Main oracles**: The main oracles of the CGKA game are split into two figures: oracles related to (i) group creation, proposals, and commits (Figure 11), and (ii) message processing, corruption, and challenges (Figure 13). The validity of all oracle calls is checked by the corresponding compatibility functions (Figure 14).

  - **Group creation**: The attacker can instruct a party \(ID\) to create a new group by calling the group-creation oracle (Figure 3), which works analogously to the corresponding oracle in the SGM game. The bookkeeping is updated as follows: A call is made to the `HG.create(ID, skid)` method, which causes HG to create a node \(v\) as a child of \(v_{root}\) and return \(vid = v.vid\). Note that the CGKA group-creation oracle also stores the key \(I\) output by `Create` in the array `Key`.

  - **Proposal oracles**: The oracles `prop-{add, rem, up}-user` (Figure 11) allow the attacker to instruct a party \(ID\) to issue add/remove/update proposals. These oracles work much like their counterparts in the SGM game. Bookkeeping is updated by calling `Props.new(op, ID, data)`, which records proposal data:
    - \(p = (pid, vid, op, orig, data)\), where
      - \(pid\) is the proposal’s unique ID,
      - \(vid\) is the ID of the HG node corresponding to the epoch in which the proposal was created,
      - \(op \in \{\text{add, rem, upd}\}\) is the proposal type,
      - \(orig\) is the party that issued the proposal,
      - \(data\) is additional data.
    - For add proposals, \(data = (ID', ikid')\), where \(ikid'\) is the ID of the init key \(ID'\) is to be added with.
    - For remove proposals, \(data = ID'\).
    - For update proposals, \(data = \bot\).

  - **Creating commits**: The commit oracle (Figure 11) allows \(A\) to instruct a party \(ID\) to execute a commit operation. It works analogously to its SGM-game counterpart. Bookkeeping calls `HG.commit(ID, pid)`, which creates a new HG node \(v\).

```plaintext
// ID creates new group
create-group(ID, ikid, r)
req *compat-create(ID, ikid)
isk ← IK-SK[ikid]
(γ[ID], I) ← Create(γ[ID], isk; r)
vid ← HG.create(ID, r)
Key[vid] ← I
BR[vid] ← (r ≠ ⊥)
V-Pt[ID] ← vid
return vid

// ID proposes to add ID'
prop-add-user(ID, ID', ikid')
req *compat-prop(add, ID, ID', ikid')
ipk' ← IK-PK[ikid']
(γ[ID], P) ← Add(γ[ID], ID', ipk')
pid ← Props.new(add, ID, (ID', ikid'))
PM[pid] ← P
return (pid, P)

// ID proposes to remove ID'
prop-rem-user(ID, ID')
req *compat-prop(rem, ID, ID', ⊥)
(γ[ID], P) ← Remove(γ[ID], ID')
pid ← Props.new(rem, ID, ID')
PM[pid] ← P
return (pid, P)

// ID proposes to update
prop-up-user(ID, r)
req *compat-prop(upd, ID, ⊥, ⊥)
(γ[ID], P) ← Update(γ[ID]; r)
pid ← Props.new(upd, ID, ⊥)
BR[vid] ← (r ≠ ⊥)
PM[pid] ← P
return (pid, P)

// ID commits proposals pid
commit(ID, pid, r)
```

This optimized version of the text provides a clearer and more structured presentation, making it easier to understand the CGKA scheme and its components.