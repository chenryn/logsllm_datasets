### Certificate Revocation
ACME (Automated Certificate Management Environment) provides a mechanism for certificate revocation, which can be requested by any of the following parties:
1. The account that initiated the issuance of the certificate.
2. Any other account that can demonstrate control over the identifiers in the certificate.
3. Any individual who can prove control of the private key corresponding to the public key in the certificate.

**Figure 2: ACME Protocol**
This diagram illustrates how an ACME client can obtain a certificate without human intervention. In the dashed region, the client demonstrates ownership of the domain using an HTTP-based challenge.

The third case is a significant innovation compared to previous protocols, as it allows a good Samaritan who discovers a leaked key to request the automated revocation of the corresponding certificates.

### 4.2 Validation Methods
The ACME challenge mechanism for identifier validation is designed to be extensible, allowing new validation methods to be added over time and enabling CAs (Certificate Authorities) to implement their own mechanisms. (Acceptable methods for the Web PKI are defined in the CA/Browser Forum’s Baseline Requirements [28].) Currently, there are three specified challenge types, all of which are supported by Let's Encrypt:

1. **HTTP Challenge**: The applicant must serve an object containing a CA-provided random value at a specific HTTP URL on the domain. The CA makes GET requests to this URL and verifies that the correct object is returned.
2. **DNS Challenge**: The applicant must provision a DNS record at `_acme-challenge.<domain>` containing a CA-provided random value. The CA fetches this record and verifies its content.
3. **TLS-ALPN Challenge**: The applicant must configure a TLS server to respond to a TLS ClientHello message with a specific ALPN value and an ACME-specific TLS extension [42, 87]. The TLS server must then present a self-signed certificate containing a CA-provided random value and correctly complete the TLS handshake.

These three mechanisms allow ACME to be integrated into various operational environments. For example, the HTTP challenge is easy to deploy on domains with a single web server but requires the response to be provisioned across all servers in load-balanced configurations. The TLS-ALPN challenge allows certificate management to be handled by a TLS entity with no HTTP logic, such as a TLS-terminating load balancer.

The different challenge types offer varying levels of assurance, and it is up to CAs to determine which are appropriate in a given situation. For instance, Let's Encrypt only issues wildcard certificates if the applicant has proven control via the DNS challenge, as this method demonstrates direct control over the DNS zone (which could be used to provision arbitrary subdomains and obtain certificates for them).

In the 90 days leading up to September 22, 2019, Let's Encrypt completed 266 million successful challenges with ACME clients. Of these, 86% used HTTP, 13% used DNS, and 0.3% used TLS-ALPN.

### 4.3 Security Improvements
While ACMEv1 and ACMEv2 share many attributes, several significant changes were made in ACMEv2 in response to security analyses during the IETF standardization process. Bhargavan et al. formally verified the security of ACME [24], modeling the protocol in the applied pi calculus and demonstrating its security in a more robust threat model than traditional CA issuance processes. However, their work also uncovered weaknesses in some subtle authentication properties, leading to improvements in ACMEv2 based on their recommendations.

The IETF security review highlighted areas for privacy improvements. Notably, all GET requests (which lacked any authentication) were replaced with authenticated POST requests, allowing CAs to apply appropriate authorization policies.

ACME validation methods have also evolved in response to security findings. All validation methods that rely on empirical validation of control (as all of the above do) are vulnerable to network-layer attacks, such as BGP hijacking to reroute validation requests [25, 26, 84]. The ACME RFC discusses these risks in detail and suggests mitigations [20]. However, validation methods face a range of other, often subtle threats due to the diversity of server and hosting-provider behavior.

During ACME's development, two additional challenge types were proposed (one of which was deployed by Let's Encrypt), but they were found to be insecure in common shared-hosting environments:

1. **HTTPS-based HTTP Challenge**: Initially, HTTP challenges were allowed to be completed on port 80 (HTTP) or port 443 (HTTPS). In 2015, Kasten and Eckersley noted that Apache would serve the first HTTPS site defined in its configuration file if the requested domain did not have HTTPS enabled. This behavior could allow an attacker to acquire certificates for domains they did not control. In response, the HTTP challenge type was changed to prohibit HTTPS requests.
2. **TLS-SNI Challenge**: In early 2018, Franz Rosén found that the TLS-SNI challenge supported by Let's Encrypt did not provide sufficient authentication in many shared-hosting environments [5, 81]. This challenge validated domain control by requiring the applicant to configure a TLS server at the domain to host a specific challenge certificate. After Rosén demonstrated that this was often not the case, Let's Encrypt disabled the challenge, re-enabled it for a small set of non-vulnerable providers, and eventually phased it out, replacing it with the TLS-ALPN challenge described above.

### 5. CA Software and Operations
When Let's Encrypt began, available CA software was designed around manual processes. ACME, with its focus on automation, required a different approach, leading to the creation of Boulder, a new, open-source CA software stack that forms the core of Let's Encrypt's operations.

#### 5.1 Security Principles
Let's Encrypt must achieve high security and availability to remain trustworthy and fulfill its role as Internet infrastructure. Both Boulder and the CA's operations reflect a set of design principles that support these goals:

- **Minimal Logic**: Boulder implements the minimal logic necessary to instantiate an ACME-based CA, making it easier for developers and auditors to verify the correctness of the code. It is implemented in Go with structured intercomponent communications (gRPC), enhancing code comprehensibility.
- **Minimal Data**: To reduce the potential harm from data breaches, Let's Encrypt collects only the minimum subscriber data necessary to deliver the service in compliance with ACME and WebTrust requirements: a public key, an optional contact email address, and various access logs [64].
- **Full Automation**: The system has a single issuance path based on ACME, with no facility for human operators to manually create certificates or make one-off policy exceptions. This prevents errors that have led to misissuance by other CAs [80].
- **Functional Isolation**: Boulder is composed of limited-purpose components that communicate only through well-defined APIs. Components with different risk levels are physically isolated, reducing the risk that compromise of more exposed components (e.g., the Internet-facing front end) will lead to compromise of more critical components (e.g., CA signing keys).
- **Operational Isolation**: Access to Let's Encrypt data centers is strictly limited, even for staff. Most administration is performed remotely, with engineers only entering the data centers for tasks requiring physical access to hardware. Remote administration tasks are protected by multifactor authentication and strong monitoring. Staff with administrative access can only access administration functions via dedicated, restricted virtual machine environments within a security-focused operating system running on specific laptops.
- **Continuous Availability**: Boulder's componentized architecture allows multiple redundant instances of each function to be run in parallel. Let's Encrypt operates Boulder instances in physically secure, geographically distributed facilities, with production traffic divided between datacenters and load balancing handled by a CDN. Regular security audits by outside firms are commissioned, and physical access to core CA equipment, HSM administrative operations, and certain other functions require multiple staff members to present authentication. Logging and monitoring systems provide strong accountability for most administrative operations, helping to ensure that a rogue engineer would have difficulty stealing a signing key and would likely be caught after the fact.

To reduce the chances that bugs in Boulder could lead to misissuance or other problems, new versions are tested in a public staging environment before entering production. Boulder also applies ZLint [58] to perform automated conformance tests on every certificate, and any ZLint notices, warnings, or errors block issuance.

#### 5.2 System Architecture
Boulder implements the three main functions required of a CA in the modern Web PKI:

1. **Issuance of Certificates (via ACME)**: ACME clients communicate with Let's Encrypt exclusively via the ACME API component, which validates client requests and relays them to the Registration Authority (RA). The RA orchestrates the authorization and issuance process. When a client responds to an ACME challenge, the RA instructs the Validation Authority to validate that the client has completed the challenge. Once the RA has verified that the client has sufficient authorization, it instructs the Certificate Authority to issue a precertificate, which is submitted to CT logs by the Publisher.
2. **Submission of Precertificates and Certificates to Certificate Transparency (CT) Logs [62]**: When a CT log provides a Signed Certificate Timestamp (SCT), the RA instructs the Certificate Authority to issue the certificate and makes it available to the client.
3. **Publication of Certificate Revocation Status via OCSP**: Each Certificate Authority has access to a hardware security module (HSM) that stores the private key corresponding to one of the Let's Encrypt intermediate certificates. The private key corresponding to the ISRG root certificate is held in a separate, offline HSM. The online HSMs also hold a private key corresponding to an OCSP signer certificate, used to sign OCSP responses. As of September 2019, Let's Encrypt HSMs perform approximately 450 signatures per second, with the bulk of this work going towards OCSP responses and the remainder towards signing certificates.

OCSP responses are computed proactively, asynchronously from OCSP requests. The OCSP Updater monitors for new certificates or newly revoked certificates and instructs the Certificate Authority to sign appropriate OCSP responses. As these responses expire, the OCSP Updater issues fresh ones until the certificate expires. All OCSP responses are stored in a database, from which the OCSP Responder answers OCSP requests. OCSP responses are served and cached via Akamai, allowing Let's Encrypt to keep up with OCSP traffic even for very popular sites.

This architecture has allowed Let's Encrypt to scale up to issuing more than a million certificates per day at peak, running on modest infrastructure. The biggest scalability challenge has not been compute power or signing capacity but rather the growth of the primary CA database and log data. As of September 2019, Let's Encrypt produces about 150 GB of CA log data per day. All log data is kept online and searchable for 90 days (the lifetime of certificates) and, in compliance with WebTrust audit requirements, a subset is archived offline for a minimum of seven years.

### 6. Client Ecosystem
There is no official client for Let's Encrypt. Instead, by standardizing ACME, the project has fostered an ecosystem of third-party clients that support a wide range of platforms and use cases [65]. ACME client libraries are available in various languages, including C, Go, and Java. There are several command-line clients, such as acme.sh and Certbot, as well as server software with built-in provisioning, such as Caddy, Apache, and cPanel. Shared hosting providers, including Squarespace, Google, and OVH, also use Let's Encrypt to transparently provision HTTPS. In this section, we survey some of the noteworthy clients and gauge their popularity.

#### 6.1 Certbot
In conjunction with Let's Encrypt's launch, the Electronic Frontier Foundation (EFF) created an ACME client, now named Certbot [40]. Unlike most other clients, Certbot aims to fully automate secure HTTPS deployment, rather than simply procuring a certificate. Certbot currently is the most popular client in terms of unique IP addresses. During the time period studied, 50% of clients (by unique IP address) used Certbot, and about 16% of certificates were requested using it, as shown in Table 2. This suggests that Certbot is particularly popular with operators of individual servers.

Certbot automatically parses and modifies configuration files for popular web servers, including Apache and Nginx, automating complicated HTTPS configuration steps that have historically confused administrators [36, 107] and contributed to TLS vulnerabilities (e.g., [11, 17, 23]). Furthermore, Certbot updates can automatically patch server configurations to apply new security configuration recommendations or mitigate newfound attacks.

Certbot's extensible Python-based framework supports a variety of web servers and validation types. Authenticator plugins allow Certbot to integrate with different server environments, while installer plugins handle the configuration of web servers.