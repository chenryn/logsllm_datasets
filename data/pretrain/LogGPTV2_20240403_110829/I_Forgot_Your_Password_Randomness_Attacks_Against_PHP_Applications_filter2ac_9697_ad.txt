m· ei,0 < i ≤ k. The cryptanalytic framework exploits
properties of the lattice L that is deﬁned as the linear
span of these vectors. Observe that the dimension of L
is k and in addition for every vector v ∈ L we have that
∑k
i=1 vixi = 0 mod m.
Given the above the attack works as follows: ﬁrst a
lattice is deﬁned using the recurrence that deﬁnes the
linear generator; then, a lattice basis reduction algo-
rithm is employed to create a set of linearly indepen-
dent equations modulo m with small coefﬁcients; ﬁ-
nally, using the partially known values for each vari-
able, we convert this set of equations to equations over
the integers which can be solved uniquely. Speciﬁ-
cally, we use the LLL [13] algorithm in order to obtain
a reduced basis B for the lattice L. Now because B =
{w j} is a basis, the vectors of B are linearly indepen-
dent. The key observation is that the lattice deﬁnition
implies that w j·x = w j·(xunknown +xknown) = d j·m for
some unknown d j. Now as long as xunknown·w j < m/2
(this is the critical condition for solvability) we can
solve for d j and hence recover k equations for xunknown
which will uniquely determine it.
The original paper provided a relation between the
size of xknown and the number of leaks required from
the generator so that the upper bound of m/2 is ensured
given the level of basis reduction achieved by LLL. In
the case of LCGs the paper demanded the modulo m to
be squarefree. However, as shown above, in the gen-
erators used it holds that m = 232 and thus their argu-
ments do not apply. In addition, the lattice of the addi-
tive generator of glibc is different than the one gener-
ated by an LCG and thus needs a different analysis.
We conducted a thorough experimental analysis of
the framework focusing on the two types of generators
above. In each case we tested the maximum possible
value of xknown to see if the m/2 bound holds for the
reduced LLL basis.
In the following paragraphs we
will brieﬂy discuss the results of these experiments for
these types of generators.
In Figure 6 we show the relationship between the
number of leaks required for recovering the state with
the lattice-attack and the number of leaks that are trun-
cated for four LCGs:
the Windows LCG, the glibc
LCG (which are both 32 bits), the Visual Basic LCG
(which is 24 bits) and an LCG used in the MMIX of
Knuth (which is 64 bits). It is seen that the number
of leaks required is very small but increases sharply as
more bits are truncated. In all cases the attack stops
being useful once the number of truncated bits leaves
none but the logw− 1 most signiﬁcant bits where w is
the size of the LCG state. The logarithm barrier seems
to be uniformly present and hints that the MSB’s of
a truncated LCG sequence may be hard to predict (at
least using the techniques considered here). A similar
logarithmic barrier was also found in the experimental
analysis that was conducted by Contini and Shparlin-
ski [3] when they were investigating Stern’s attack [17]
against truncated LCG’s with secret parameters.
Applying the attack in the glibc additive feedback
generator we found that the LLL algorithm became a
bottleneck in the algorithm running time; due to its
large state the algorithm required a large number of
leaks to recover even small truncation levels there-
fore increasing the lattice dimension that was given
to the LLL algorithm. Our testing system (a 3.2GHz
cpu with 2GB memory) ran out of memory when 7
bits were truncated. The version of LLL we em-
ployed (SageMath 4.8) has time complexity O(k5)
where k is the dimension of the lattice (which repre-
sents roughly the number of leaks). The best time-
complexity known is O(k3 logk) derived from [12];
this may enable much higher truncation levels to be re-
covered for the glibc generator, however we were not
able to test this experimentally as no implementation
of this algorithm is publicly available.
We conclude that truncated LCG type of generators
can be broken (in the sense of entirely recovering their
internal state) for all but extremely high levels of trun-
cation (e.g.
in the case of 32-bit state LCG’s mod-
ulo 232 when they are truncated to 16 buckets or less).
For additive feedback type of generators, such as the
one in glibc, the situation is similar, however higher
recursion depths require more leaks (with a linear re-
lationship) that in turn affect the lattice dimension re-
sulting in longer running times. Comparing the results
between the LCGs and the additive feedback genera-
tors one may ﬁnd some justiﬁcation for the adoption
of the latter in recent versions of glibc : it appears that
- at least as far as lattice-based attacks are concerned -
it is harder to predict truncated glibc sequences (com-
pared to say, Windows LCG’s) due to the higher run-
ning times of LLL reduction (note though that this does
not mean that these are cryptographically secure).
6 Experimental results and Case studies
In order to evaluate the impact of our attacks on real
applications we conducted an audit to the password
reset function implementations of popular PHP appli-
cations. Figure 7 shows the results from our audit.
In each case succesfully exploiting the application re-
sulted in takeover of arbitrary user accounts5 and in
some cases, when the administrator interface was af-
fected, of the entire application. In addition to iden-
tiﬁying these vulnerabilities we wrote sample exploits
for some types of attack we presented, each on one af-
fected application.
5The only exception to that is the HotCRP application where
passwords were stored in cleartext thus there was no password reset
functionality. However, in this case we were able to spoof registra-
tions for arbitrary email accounts.
11
Figure 6: Solving LCGs with LLL; y-axis:number of leaks; x-axis: number of bits truncated.
Application
mediawiki
Open eClass
taskfreak
zen-cart
4.2
4.2
4.2
ATS
osCommerce 2.x ATS
4.2
osCommerce 3.x
ATSc
RTc
elgg
Gallery
Attack
4.3
4.3
4.3
RT
RT
4.3
4.2
4.1c
5.3
5.4
5.3
5.4
4.3
4.2c
•
•
•
•
•
•
•
•
Application
Attack
Joomla
MyBB
IpBoard
phorum
HotCRP
gazelle
tikiWiki
SMF
4.3
ATSc
ATSc
4.2
4.2
4.3
4.2
ATSc
5.3c
4.2c
5.3
5.3
5.4
4.1c
4.1c
4.3
4.3
5.3
4.3
4.3c
•
◦
•
•
•
•
•
◦
Figure 7: Summary of audit results. The c superscript denotes that the attack need to be used in combination with
other attacks with the same superscript. The • denotes a full attack while ◦ denotes a weakness for which the
practical exploitation is either unveriﬁed or requires very speciﬁc conﬁgurations. The number denotes the section
in which the applied attack is described in the paper.
6.1 Selected Audit Results
Many applications we audited where trivially vulnera-
ble to our attacks since they used the affected PRNG
functions in a straightforward manner, thus making it
pretty easy for an attacker to apply our techniques and
exploit them. However some applications attempted
to defend against randomness attacks by creating cus-
tom token generators. We will describe some attacks
that resulted from using our framework against custom
generators.
Gallery. PHP Gallery is a very popular web based
photo album organizer. In order for a user to reset his
password he has to click to a link, which contains the
security token. The function that generates the token is
the following:
namely a time measurement from uniqid(), an out-
put from the MT generator and an output from the
php combined lcg() through the extra argument in
the uniqid() function.
In addition the output is
passed through the MD5 hash function so its infeasi-
ble to recover the initial values given the output of this
function. Since we do not have access to the output
of the function, the state reconstruction attack seems
an appropriate choice for attacking this token gener-
ation algorithm. Indeed, the Gallery application uses
PHP sessions thus an attacker can use them to predict
the php combined lcg() and mt rand() outputs. In
addition by utilizing the request twins technique from
section 3 the attacker can further reduce the search
space he has to cover to a few thousand requests.
function hash($entropy="") {
return md5($entropy . uniqid(mt_rand(), true));
}
The token is generated using three entropy sources,
Joomla.
Joomla is one of the most popular CMS ap-
plications, and it also have a long history of weak-
nesses in its generation of password reset tokens [4,
11]. Until recently, the code for the random token gen-
eration was the following:
12
function genRandomPassword( $length=8 ) {
$salt = abc...xyzABC...XYZ0123456789 ;
$len = strlen ( $salt );
$makepass = ‘‘’’;
- $stat = @stat ( FILE ) ;
- if (empty($stat) || !isarray($stat))
-
- mt_srand(crc32(microtime().implode(|,$stat)));
$stat=array(phpuname());
for($i=0;$i<$length;$i++){
$makepass .= $salt[mt_rand(0,$len1)];
}
return $makepass;
}
this
In addition the output of
function is
hashed using MD5 along a secret, 16 bytes, key
(config.secret) which is created at
installation
using the function above. The config.secret value
was also used to create a “remember me” cookie in the
following way:
cookie = md5(config.secret+’JLOGIN REMEMBER’)
Since the second part of the string is constant
and the conﬁg.secret is generated through the gen-
RandomPassword function which has only 232 possi-
ble values for each length, one could bruteforce all
possible values and recover config.secret. All
that was left was the prediction of the output of the
genRandomPassword() function in order to predict
the security token used to reset a password. One then
observes that although the contents of the $stat vari-
able in the genRandomPassword() function are suf-
ﬁciently random, the fact that crc is used to convert
this value to a 4 byte seed allows one to predict the
seed generated and thus the token. This attack was
reported in 2010 in [11] and a year after, Joomla re-
leased a patch for this vulnerability which removed the
custom seeding (dashed lines) from the token gener-
ation function. The idea was that because the gener-
ator is rolling constantly without reseeding one will
be unable to recover the config.secret and thus the
generator will be secure due to its secret state. Un-
fortunately, this may not be the case. If at the instal-
lation time the process handling the installation script
is fresh, a fact quite probable if we consider dedicated
servers that do not run other PHP applications, then
the search space of the config.secret will be again
232 and thus an attacker can use the same technique
as before to recover it. After the config.secret is
recovered, exploitation of the password reset imple-
mentation is straightforward using our seed recovery
attack from section 4.3. A similar attack also holds
when mod cgi is used for script execution as each re-
quest will be handled by a fresh process again reducing
the search space for config.secret in 232 values.
However, the low entropy of the config.secret
key is not the only problem of this implementation.
Even if the key had enough entropy to be totally unpre-
dictable, the generator would still be vulnerable. No-
tice that in case the genRandomPassword() is called
13
with a newly initialized MT generator then there at
most 232 possible tokens, independently of the entropy
of config.secret. This gives an interesting attack
vector: We generate two tokens from a fresh process
sequentially for a user account that we control. Then
we start to connect to a fresh process and request a to-
ken for our account.
If the token matches the token
generated before then we can submit a second request
for the target user’s account which, since the ﬁrst to-
ken matched the token we own, will match the second
token that we requested before (recall that the tokens
are not bound to users). Observe that if we gener-
ate only one pair of tokens this attack is expected to
succeed after 232 requests, assuming that the seed is
random. Nevertheless, we can request more than one
pair of tokens thus increasing our success probability.
Speciﬁcally, if we have n pairs of tokens then at the
second phase the attack is expected to succeed after
232/n requests. Therefore, if we denote by r(n) the ex-
pected requests that the attack needs to hit a “good”
token given n initial token pairs, then we have that
r(n) = 2n + 232/n. Our goal is to minimize the func-
tion r(n); this function obtains a positive minimum at
n = 231/2, for which we have that r(231/2) ≈ 185000.
A simple bruteforcing framework that we wrote was
able to achieve around 2500 requests per minute, a rate
at which an attacker can compromise the application
in a little more than one hour. To be fair, we have to
add the requests that are required to spawn new pro-
cesses but even if we go as far as to double the needed
requests (and this is grossly overestimating) we still
have a higly practical attack.
Gazelle. Gazelle is a torrent
tracker application,
which includes a frontend for building torrent shar-
ing communities. It’s been under active development
for the last couple of years and its gaining increasing
popularity. The interesting characteristic of the appli-
cation’s password reset implementation is that it uses
two generators of the PHP system (namely rand() and
mt rand(). The code that generates a token is this:
function make_secret($Length = 32) {
$Secret = ’’;
$Chars=’abcdefghijklmnopqrstuvwxyz0123456789’;
for($i=0; $i<$Length; $i++) {
Rand = mt_rand(0, strlen($Chars)-1);
$Secret .= substr($Chars, $Rand, 1);
}
return str_shuffle($Secret);
}
The
a
code generates
random string using
mt rand() and then shufﬂes the string using the
str shuffle() function which internally uses the
rand() function. If we try to apply directly the seed
recovery attack, i.e. try to ask a question of the form
“which seed produces this token” then we will run