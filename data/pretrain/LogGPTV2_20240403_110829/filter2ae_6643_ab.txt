            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = arg0 + storage[temp0];
        }
        function sell(var arg0) {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
            var temp0 = msg.sender;
            memory[0x00:0x20] = temp0;
            memory[0x20:0x40] = 0x00;
            var temp1 = keccak256(memory[0x00:0x40]);
            var temp2 = arg0;
            storage[temp1] = storage[temp1] - temp2;
            var temp3 = memory[0x40:0x60];
            var temp4 = temp2 * 0x0de0b6b3a7640000;
            memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);
            var var0 = !address(temp0).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);
            if (!var0) { return; }
            var temp5 = returndata.length;
            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];
            revert(memory[0x00:0x00 + returndata.length]);
        }
    }
首先看`balanceOf(address)`,这里需要知道映射的储存方式，映射mapping 中的键 `k` 所对应的值会位于
`keccak256(k.p)`， 其中 `.` 是连接符。
通过var2在定义的时候`&
0xffffffffffffffffffffffffffffffffffffffff`可以确定var2是`address`类型(160位),传入balanceOf()后可以发现返回`storage[keccak256(address+0x00)]`，从`+0x00`可以看出来这就是最开始就定义的从地址到某个类型(分析其他地方可得出)的映射。  
isComplete()非常明了了，直接跳过。  
buy(arg0)第一行明显要我们传入 arg0 数量的 ether 进去，这里可以还原成`require()`  
下面的代码把arg0加到上面的映射中。再结合函数名(这次运气好函数名都有)可以猜出这个合约到底要干啥了。
sell()里要注意的是 `memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!temp4 *
0x08fc).value(temp4)(memory[temp3:temp3 +
0x00]);`这一行包括下面的代码都是代表一个transfer()，因为transfer要处理返回值，所以分开写看起来比较多。这里我们可以看到安全的transfer也是通过.call.value来实现的，只不过对gas做了严格控制，杜绝重入漏洞。  
试着写一下:
    contract gogogo{
        function balanceOf(address add)public returns (){
            return storage[keccak256(add+0x00)];
            //映射的储存方法
            //也就是 mapping(address => uint256) public balanceOf;
        }
        function isComplete(){
            return address(this).balance =arg0)
            mapping[msg.sender] -=arg0;        
            msg.sender.transfer(arg0 * 1 ehter);
        }
    }
最后说一下，这段代码是`require(msg.value==arg0*1 ether);`有溢出点，可以绕过。
# 实战
实战的是今年PHDays安全会议的比赛里的一道逆向题The Lock。这道题没有源码(废话)。  
做这个题的时候我们要再加上IDA-EVM，更方便分析。  
已知信息:解锁这个合约就胜利，函数签名unlock(bytes4 pincode)，每次尝试支付0.5 ehter  
直接上反编译后的:
    contract Contract {
        function main() {
            memory[0x40:0x60] = 0x60;
            if (msg.data.length = 0x04) {
            label_01A4:
                if (var2 != var1) { return 0x00; }
                storage[0x00] = (storage[0x00] & ~0xff) | 0x01;
                return 0x01;
            } else {
            label_0111:
                var var6 = arg0;
                var var7 = var3 & 0xff;//0x00
                if (var7 >= 0x04) { assert(); }
                var4 = (byte(var6, var7) * 0x0100000000000000000000000000000000000000000000000000000000000000) / 0x0100000000000000000000000000000000000000000000000000000000000000;
                var6 = var4 >= 0x30;
                if (!var6) {
                    if (!var6) {
                    label_0197:
                        var3 = var3 + 0x01;
                    label_0104:
                        if (var3 & 0xff >= 0x04) { goto label_01A4; }
                        else { goto label_0111; }
                    } else {
                    label_0181:
                        var temp0 = var4 - 0x30;
                        var5 = temp0;
                        var2 = var2 + var5 ** 0x04;
                        var1 = var1 * 0x0a + var5;
                        var3 = var3 + 0x01;
                        goto label_0104;
                    }
                } else if (var4 > 0x39) { goto label_0197; }
                else { goto label_0181; }
            }
        }
    }
先修正一个错误！反编译后的`byte(var6, var7)`里两个参数的位置是错误的，`byte(var7,
var6)`应该是这样.这个地方搞了我好久，但是人家也标注了工具是"experimental"性质的嘛。byte()的作用是把栈顶替换成栈顶下面一个元素的第栈顶值个字节的值。[byte()的图解](https://ethervm.io/#1A
"图解")
整体看下来目的比较明确，就是要通过`func_00DF(var
arg0)`函数把`storage[0x00]`改为1，使`unlocked()`返回1即可。我们先在IDA里看看，发现进入`label_104`代码段后会进入一个大循环。  
开门先判断 `var7>=4` ，下面又使`var4`为输入的第 **var7**
个字节。var6判断这个字节是不是大于`0x30`，可以猜出来出来0x30是0的ASCII码，应该有点关系。发现当var6为1时，会判断var4是否大于`0x39`，这不就是9的ascii码么.然后我们从`label_0197`开始看，发现如果不符合要求var3自加一后会继续循环，直到它为4时进入可以改变`storage[0x00]`的代码段。再看一下`label_0181`代码段,这里就是把提取出的单字节字符转换成数字后，`var2`加上它的4次方，`var1`加上它的10倍。  
分析到这里，就可以试着写一下大致逻辑了:
    contract gogogo{
        uint8 isunLocke;
        function unlocked() public {
            return isunLocke;
        }
        function unlock(arg0) payable public{
                require(msg.sender.value>=0.5 ether);
                for(i = 0; i  0x39  ){
                        continue;
                    }
                    number = chr - 0x30 //字符转数字
                    var2 = var2 + number**4
                    var1 = var1 + number*10
                }
            if(var2 != var1){
                return
            }
            isunLocke = 1;
            //(0 & ~0xff) | 0x01
            //1
        }
    }
可以看出，我们要提供各位4次方之和为它本身的数字。稍稍爆破一下就有1634可以满足
# 结尾与总结
从逆向的过程来看，要熟知EVM的各种原理，比如各种不同的变量的储存方式等等。看逆向的代码也能帮我们更深入的了解solidity的一些漏洞，比如变量覆盖,很明显我们写的`storage`变量在编译后全都变成对`storage`位的操作了，运用不当肯定会造成变量覆盖漏洞嘛。
其他工具:  
作者水平有限，如有错误和欠妥之处，恳请各位师傅指正！