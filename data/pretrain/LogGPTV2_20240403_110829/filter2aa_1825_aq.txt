Here is the important part of a revised IRP_MJ_WRITE handler using an exception handler:
Chapter 6: Kernel Mechanisms
143
do {
if (irpSp->Parameters.Write.Length UserBuffer;
if (data == nullptr) {
status = STATUS_INVALID_PARAMETER;
break;
}
__try {
if (data->Priority Priority > 31) {
status = STATUS_INVALID_PARAMETER;
break;
}
PETHREAD Thread;
status = PsLookupThreadByThreadId(
ULongToHandle(data->ThreadId), &Thread);
if (!NT_SUCCESS(status))
break;
KeSetPriorityThread((PKTHREAD)Thread, data->Priority);
ObDereferenceObject(Thread);
KdPrint(("Thread Priority change for %d to %d succeeded!\n",
data->ThreadId, data->Priority));
break;
}
__except (EXCEPTION_EXECUTE_HANDLER) {
// probably something wrong with the buffer
status = STATUS_ACCESS_VIOLATION;
}
} while(false);
Placing EXCEPTION_EXECUTE_HANDLER in __except says that any exception is to be handled. We can
be more selective by calling GetExceptionCode and looking at the actual exception. If we don’t expect
this, we can tell the kernel to continue looking for handlers up the call stack:
__except (GetExceptionCode() == STATUS_ACCESS_VIOLATION
? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) {
// handle exception
}
Does all this mean that the driver can catch any and all exceptions? If so, the driver will never cause a
system crash. Fortunately (or unfortunately, depending on your perspective), this is not the case. Access
Chapter 6: Kernel Mechanisms
144
violation, for example, is something that can only be caught if the violated address is in user space. If it’s
in kernel space, it cannot be caught and still cause a system crash. This makes sense, since something bad
has happened and the kernel will not let the driver get away with it. User mode addresses, on the other
hand, are not at the control of the driver, so such exceptions can be caught and handled.
The SEH mechanism can also be used by drivers (and user-mode code) to raise custom exceptions. The
kernel provides the generic function ExRaiseStatus to raise any exception and some specific functions
like ExRaiseAccessViolation:
void ExRaiseStatus(NTSTATUS Status);
A driver can also crash the system explicitly if it concludes that something really bad going on, such as data
being corrupted from underneath the driver. The kernel provides the KeBugCheckEx for this purpose:
VOID KeBugCheckEx(
_In_ ULONG BugCheckCode,
_In_ ULONG_PTR BugCheckParameter1,
_In_ ULONG_PTR BugCheckParameter2,
_In_ ULONG_PTR BugCheckParameter3,
_In_ ULONG_PTR BugCheckParameter4);
KeBugCheckEx is the normal kernel function that generates a crash. BugCheckCode is the crash code to
be reported, and the other 4 numbers can provide more details about the crash. If the bugcheck code is one
of those documented by Microsoft, the meaning of the other 4 numbers must be provided as documented.
(See the next section System Crash for more details).
Using __try/__finally
Using a block of __try and __finally is not directly related to exceptions. This is about making sure
some piece of code executes no matter what - whether the code exits cleanly or mid-way because of an
exception. This is similar in concept to the finally keyword popular in some high level languages (e.g.
Java, C#). Here is a simple example to show the problem:
void foo() {
void* p = ExAllocatePoolWithTag(PagedPool, 1024, DRIVER_TAG);
if(p == nullptr)
return;
// do something with p
ExFreePool(p);
}
The above code seems harmless enough. However, there are several issues with it:
Chapter 6: Kernel Mechanisms
145
• If an exception is thrown between the allocation and the release, a handler in the caller will be
searched, but the memory will not be freed.
• If a return statement is used in some conditional between the allocation and release, the buffer
will not be freed. This requires the code to be careful to make sure all exit points from the function
pass through the code freeing the buffer.
The second bullet can be implemented with careful coding, but is a burden best avoided. The first bullet
cannot be handled with standard coding techniques. This is where __try/__finally come in. Using
this combination, we can make sure the buffer is freed no matter what happens in the __try block:
void foo() {
void* p = ExAllocatePoolWithTag(PagedPool, 1024, DRIVER_TAG);
if(p == nullptr)
return;
__try {
// do something with p
}
__finally {
// called no matter what
ExFreePool(p);
}
}
With the above code in place, even if return statements appear within the __try body, the __finally
code will be called before actually returning from the function. If some exception occurs, the __finally
block runs first before the kernel searches up the call stack for possible handlers.
__try/__finally is useful not just with memory allocations, but also with other resources, where some
acquisition and release need to take place. One common example is when synchronizing threads accessing
some shared data. Here is an example of acquiring and releasing a fast mutex (fast mutex and other
synchronization primitives are described later in this chapter):
FAST_MUTEX MyMutex;
void foo() {
ExAcquireFastMutex(&MyMutex);
__try {
// do work while the fast mutex is held
}
__finally {
ExReleaseFastMutex(&MyMutex);
}
}
Chapter 6: Kernel Mechanisms
146
Using C++ RAII Instead of __try / __finally
Although the preceding examples with __try/__finally work, they are not terribly convenient. Using
C++ we can build RAII wrappers that do the right thing without the need to use __try/__finally. C++
does not have a finally keyword like C# or Java, but it doesn’t need one - it has destructors.
Here is a very simple, bare minimum, example that manages a buffer allocation with a RAII class:
template
struct kunique_ptr {
explicit kunique_ptr(T* p = nullptr) : _p(p) {}
~kunique_ptr() {
if (_p)
ExFreePool(_p);
}
T* operator->() const {
return _p;
}
T& operator*() const {
return *_p;
}
private:
T* _p;
};
The class uses templates to allow working easily with any type of data. An example usage follows:
struct MyData {
ULONG Data1;
HANDLE Data2;
};
void foo() {
// take charge of the allocation
kunique_ptr data((MyData*)ExAllocatePool(PagedPool, sizeof(MyData))\
);
// use the pointer
data->Data1 = 10;
// when the object goes out of scope, the destructor frees the buffer
}
Chapter 6: Kernel Mechanisms
147
If you don’t normally use C++ as your primary programming language, you may find the above code
confusing. You can continue working with __try/__finally, but I recommend getting acquainted
with this type of code. In any case, even if you struggle with the implementation of kunique_ptr
above, you can still use it without needing to understand every little detail.
The kunique_ptr type presented above is a bare minimum. You should also remove the copy constructor
and copy assignment, and allow move copy and assignment (C++ 11 and later, for ownership transfer). Here
is a more complete implementation:
template
struct kunique_ptr {
explicit kunique_ptr(T* p = nullptr) : _p(p) {}
// remove copy ctor and copy = (single owner)
kunique_ptr(const kunique_ptr&) = delete;
kunique_ptr& operator=(const kunique_ptr&) = delete;
// allow ownership transfer
kunique_ptr(kunique_ptr&& other) : _p(other._p) {
other._p = nullptr;
}
kunique_ptr& operator=(kunique_ptr&& other) {
if (&other != this) {
Release();
_p = other._p;
other._p = nullptr;
}
return *this;
}
~kunique_ptr() {
Release();
}
operator bool() const {
return _p != nullptr;
}
T* operator->() const {
Chapter 6: Kernel Mechanisms
148
return _p;
}
T& operator*() const {
return *_p;
}
void Release() {
if (_p)
ExFreePool(_p);
}
private:
T* _p;
};
We’ll build other RAII wrappers for synchronization primitives later in this chapter.
Using C++ RAII wrappers has one missing piece - if an exception occurs, the destructor will not
be called, so a leak of some sort occurs. The reason this does not work (as it does in user-mode),
is the lack of a C++ runtime and the current inability of the compiler to set up elaborate code
with __try/__finally to mimic this effect. Even so, it’s still very useful, as in many cases
exceptions are not expected, and even if they are, no handler exists in the driver for that and
the system should probably crash anyway.
System Crash
As we already know, if an unhandled exception occurs in kernel mode, the system crashes, typically with
the “Blue Screen of Death” (BSOD) showing its face (on Windows 8+, that’s literally a face - saddy or
frowny - the inverse of smiley). In this section, we’ll discuss what happens when the system crashes and
how to deal with it.
The system crash has many names, all meaning the same thing - “Blue screen of Death”, “System failure”,
“Bugcheck”, “Stop error”. The BSOD is not some punishment, as may seem at first, but a protection
mechanism. If kernel code, which is supposed to be trusted, did something bad, stopping everything
is probably the safest approach, as perhaps letting the code continue roaming around may result in an
unbootable system if some important files or Registry data is corrupted.
Recent versions of Windows 10 have some alternate colors for when the system crashes. Green is used
for insider preview builds, and I actually encountered a pink as well (power-related errors).
Chapter 6: Kernel Mechanisms
149
If the crashed system is connected to a kernel debugger, the debugger will break. This allows examining
the state of the system before other actions take place.
The system can be configured to perform some operations if the system crashes. This can be done with the
System Properties UI on the Advanced tab. Clicking Settings… at the Startup and Recovery section brings
the Startup and Recovery dialog where the System Failure section shows the available options. Figure 6-7
shows these two dialogs.
Figure 6-7: Startup and recovery settings
If the system crashes, an event entry can be written to the event log. It’s checked by default, and there is
no good reason to change it. The system is configured to automatically restart; this has been the default
since Windows 2000.
The most important setting is the generation of a dump file. The dump file captures the system state at the
time of the crash, so it can later be analyzed by loading the dump file into the debugger. The type of the
dump file is important since it determines what information will be present in the dump. The dump is not
written to the target file at crash time, but instead written to the first page file.
Only when the system restarts, the kernel notices there is dump information in the page file, and it copies
the data to the target file. The reason has to do with the fact that at system crash time it may be too
dangerous to write something to a new file (or overwrite an existing file); the I/O system may not be stable
enough. The best bet is to write the data to a page file, which is already open anyway. The downside is that
the page file must be large enough to contain the dump, otherwise the dump file will not be generated.
The dump file contains physical memory only.
Chapter 6: Kernel Mechanisms
150
The dump type determines what data would be written and hints at the page file size that may be required.
Here are the options:
• Small memory dump (256 KB on Windows 8 and later, 64 KB on older systems) - a very minimal
dump, containing basic system information and information on the thread that caused the crash.
Usually this is too little to determine what happened in all but the most trivial cases. The upside is
that the file is small, so it can be easily moved.
• Kernel memory dump - this is the default on Windows 7 and earlier versions. This setting captures
all kernel memory but no user memory. This is usually good enough, since a system crash can only
be caused by kernel code misbehaving. It’s extremely unlikely that user-mode had anything to do
with it.
• Complete memory dump - this provides a dump of all physical memory, user memory and kernel
memory. This is the most complete information available. The downside is the size of the dump,
which could be gigantic depending on the size of RAM (the total size of the final file). The obvious
optimization is not to include unused pages, but Complete Memory Dump does not do that.
• Automatic memory dump (Windows 8+) - this is the default on Windows 8 and later. This is the
same as kernel memory dump, but the kernel resizes the page file on boot to a size that guarantees
with high probability that the page file size would be large enough to contain a kernel dump. This
is only done if the page file size is specified as “System managed” (the default).
• Active memory dump (Windows 10+) - this is similar to a complete memory dump, with two
exceptions. First, unused pages re not written. Second, if the crashed system is hosting guest virtual
machines, the memory they were using at the time is not captured (as it’s unlikely these have
anything to do with the host crashing). These optimizations help in reducing the dump file size.
Crash Dump Information
Once you have a crash dump in hand, you can open it in WinDbg by selecting File/Open Dump File and
navigating to the file. The debugger will spew some basic information similar to the following:
Microsoft (R) Windows Debugger Version 10.0.18317.1001 AMD64
Copyright (c) Microsoft Corporation. All rights reserved.
Loading Dump File [C:\Windows\MEMORY.DMP]
Kernel Bitmap Dump File: Kernel address space is available, User address space \
may not be available.
************* Path validation summary **************
Response
Time (ms)
Location
Deferred
SRV*c:\Symbols*http://msdl.micro\
soft.com/download/symbols
Symbol search path is: SRV*c:\Symbols*http://msdl.microsoft.com/download/symbols
Executable search path is:
Windows 10 Kernel Version 18362 MP (4 procs) Free x64
Product: WinNt, suite: TerminalServer SingleUserTS
Chapter 6: Kernel Mechanisms
151
Built by: 18362.1.amd64fre.19h1_release.190318-1202
Machine Name:
Kernel base = 0xfffff803`70abc000 PsLoadedModuleList = 0xfffff803`70eff2d0
Debug session time: Wed Apr 24 15:36:55.613 2019 (UTC + 3:00)
System Uptime: 0 days 0:05:38.923
Loading Kernel Symbols
....................................Page 2001b5efc too large to be in the dump \
file.
Page 20001ebfb too large to be in the dump file.
...............................
Loading User Symbols
PEB is paged out (Peb.Ldr = 00000054`34256018).
Type ".hh dbgerr001" for detai\
ls
Loading unloaded module list
.............
For analysis of this file, run !analyze -v
nt!KeBugCheckEx:
fffff803`70c78810 48894c2408
mov
qword ptr [rsp+8],rcx ss:fffff988`53b\
0f6b0=000000000000000a
The debugger suggests running !analyze -v and it’s the most common thing to do at the start of dump
analysis. Notice the call stack is at KeBugCheckEx, which is the function generating the bugcheck.
The default logic behind !analyze -v performs basic analysis on the thread that caused the crash and
shows a few pieces of information related to the crash dump code:
2: kd> !analyze -v
*******************************************************************************
*
*