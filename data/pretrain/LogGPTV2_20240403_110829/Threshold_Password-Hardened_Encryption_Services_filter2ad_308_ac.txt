uses a private-key encryption scheme and exploits the linearity of
the Shamir secret sharing [18] and the ElGamal encryption [6].
3A multi-challenge version of the definition is implied by the single-challenge one
using standard hybrid argument.
4For simplicity, we assume that passwords are distributed uniformly in the pass-
word space. The definition can be easily generalized to cover arbitrary password
distributions.
3.1 Construction Overview
Let G be a cyclic group of prime order 𝑝 with generator 𝐺, and
let 𝐻0, 𝐻1 : {0, 1}∗ → G be two independent hash functions. A
ciphertext 𝐶 = SKE.Enc(𝑠0, (𝐶0, 𝐶1)) consists of a symmetric-key
ciphertext of two group elements 𝐶0 and 𝐶1 under the server secret
key component 𝑠0, and is accompanied by a nonce 𝑛. The elements
𝐶0 and 𝐶1 are computed as follows
𝐶0 = 𝐻0(pw, 𝑛) · 𝐻0(𝑛)¯𝑠0
𝐶1 = 𝐻1(pw, 𝑛) · 𝐻1(𝑛)¯𝑠0 · 𝑀
where ¯𝑠0 is part of the conceptual rate-limiter secret key, and 𝑀
is the encrypted message. The conceptual key ¯𝑠0 is secret-shared
among 𝑚 rate-limiters using the well-known Shamir secret sharing
scheme with reconstruction threshold 𝑡. In contrast to [12], we
do not distinguish between server and rate-limiter nonces. In our
scheme, the nonce 𝑛 is obtained via a coin-flipping protocol between
the server and 𝑡 rate-limiters. The server key is now used in a secret-
key encryption scheme to allow for stronger security properties.
An important feature of the Shamir secret sharing scheme is that
the reconstruction function is linear. That is, given a set of 𝑡 shares
and their indices {(𝑖 𝑗 , 𝑠𝑖 𝑗)}𝑡
𝑗=1, there exists a public linear combina-
𝑗=1 𝜆𝑗𝑠𝑖 𝑗 .
This feature is crucial for the decryption protocol, as we will see.
tion with some coefficients (𝜆1, . . . , 𝜆𝑡) such that ¯𝑠0 =𝑡
polynomial ℓ𝑃,𝑖(𝑥) :=𝑗 ∈𝑃\{𝑖} 𝑥−𝑗
3.2 Formal Description
Ingredients. Given a finite set P of size |P| ≥ 𝑡, let Subset𝑡 (P)
be an algorithm which returns an arbitrary size-𝑡 subset 𝑃 of P.
Let GGen : 1𝜆 ↦→ (G, 𝑝, 𝐺) be a group generation algorithm which
maps the security parameter 1𝜆 to the description (G, 𝑝, 𝐺) of a
cyclic group G of prime order 𝑝 with generator 𝐺. Let 𝑡, 𝑚 ∈ N with
𝑡 ≤ 𝑚 ≤ 𝑝. For any subset 𝑃 ⊆ [𝑚] and 𝑖 ∈ 𝑃, recall the Lagrange
𝑖−𝑗 . Let 𝜆𝑃,𝑖 := ℓ𝑃,𝑖(0). For the ease
of notation, we define 𝜆𝑃,0 := 1 for all 𝑃. Let 𝐻0, 𝐻1 : {0, 1}∗ → G
and 𝐻 : {0, 1}∗ → {0, 1}𝜆 be independent hash functions to be mod-
eled as random oracles. Let SKE.(KGen, Enc, Dec) be a symmetric-
key encryption scheme. Let (GGen, Prove, Vf) be a non-interactive
zero-knowledge proof of knowledge (NIZKPoK) scheme for the
relation
𝑅GDL :=
(cid:169)(cid:173)(cid:173)(cid:171)
𝐴1,1
...
𝐴𝑚,1
(cid:170)(cid:174)(cid:174)(cid:172) ∈ G𝑚×(𝑛+1),
(G, 𝐺, 𝑝),
𝐵1
...
𝐵𝑚
. . . 𝐴1,𝑛
...
. . .
. . . 𝐴𝑚,𝑛
(𝑥1, . . . , 𝑥𝑛) ∈ Z𝑛
𝑝 :
𝑗=1𝐴𝑥 𝑗
∀𝑖 ∈ [𝑚], 𝐵𝑖 =𝑛
𝑖,𝑗
as described in Appendix A.2. Here, the tuple (G, 𝐺, 𝑝) is a com-
mon reference string, the matrix in G𝑚×(𝑛+1) is the statement, and
(𝑥1, . . . , 𝑥𝑛) ∈ Z𝑛
𝑝 is a witness satisfying the statement.
Setup (Figure 3). The setup algorithm runs GGen to generate
the description of the group. It then generates the secret keys
sk0, . . . , sk𝑚,where sk𝑖 has the format (𝑠𝑖, 𝑘𝑖, 𝐾0, { ¯𝑆 𝑗 , ¯𝐾𝑗}𝑡−1
𝑗=0) where
5
(𝑖, 𝑗) ← AO(1𝜆)
(sk0, 𝑛, 𝐶, pw, 𝑀) := Queries[𝑖]
(sk′
SoundnessΠ,A(1𝜆)
1 : Queries := ∅
2 : O := {EncO, DecO }
3 :
4 :
5 :
6 : 𝑏0 := ((sk0, 𝐶) = (sk′
0, 𝐶′))
7 : 𝑏1 := (𝑀 ≠ ⊥ ∧ 𝑀′ ≠ ⊥)
8 : 𝑏2 := (((𝑛, pw) = (𝑛′, pw′)) ∧ (𝑀 ≠ 𝑀′))
9 : 𝑏3 := (((𝑛, pw) ≠ (𝑛′, pw′)) ∧ (𝑀, 𝑀′ ∈ M))
10 :
0, 𝑛′, 𝐶′, pw′, 𝑀′) := Queries[ 𝑗]
return 𝑏0 ∧ 𝑏1 ∧ (𝑏2 ∨ 𝑏3)
EncO(sk0, pw, 𝑀, 𝑟, 𝑚, ˜R1, . . . , ˜R𝑚)
1 :
2 : Queries := Queries ∪(cid:8)(sk0, 𝑛, 𝐶, pw, 𝑀)(cid:9)
((𝑛, 𝐶),∗, . . . ,∗) ← ⟨S(“enc”, sk0, pw, 𝑀; 𝑟), ˜RO
𝑚⟩
1 , . . . , ˜RO
3 :
return 𝜖
DecO(sk0, pw, 𝑛, 𝐶, 𝑟, 𝑚, ˜R1, . . . , ˜R𝑚)
1 :
2 : Queries := Queries ∪(cid:8)(sk0, 𝑛, 𝐶, pw, 𝑀)(cid:9)
(𝑀,∗, . . . ,∗) ← ⟨S(“dec”, sk0, pw, 𝑛, 𝐶; 𝑟), ˜RO
1 , . . . , ˜RO
𝑚⟩
3 :
return 𝜖
Figure 2: Soundness Experiment
𝑠0 is a secret key for a symmetric key encryption scheme SKE and
𝐺𝑠𝑖 =𝑡−1
(cid:40)𝐾0
𝑡−1
𝐺𝑘𝑖 =
𝑗=0 ¯𝑆𝑖 𝑗
𝑗=0
𝑗 , 𝑖 ∈ [𝑚]
𝑖 = 0
𝑖 ∈ [𝑚].
¯𝐾𝑖 𝑗
𝑗
Each party can verify the validity of their keys using the subroutine
KVf defined in Figure 5.
Encryption (Figure 3). The encryption protocol begins with a
coin-flipping procedure. Each party samples some randomness 𝑛𝑖
and exchanges their randomness with each other. They then hash
all randomness using the hash function 𝐻 to create a nonce 𝑛.
With the help of the rate-limiters, the server computes the tuple
(𝐶0, 𝐶1) := (𝐻0(pw, 𝑛) · 𝐻0(𝑛)¯𝑠0, 𝐻1(pw, 𝑛) · 𝐻1(𝑛)¯𝑠0 · 𝑀). It then
compute 𝐶 ← SKE.Enc(𝑠0, (𝐶0, 𝐶1)).
Let 𝑃 be any 𝑡-subset of [𝑚]. The ciphertext components 𝐻0(𝑛)¯𝑠0
and 𝐻1(𝑛)¯𝑠0 can be expressed as 𝐻0(𝑛)¯𝑠0 = 𝐻0(𝑛)𝑖∈𝑃 𝜆𝑃,𝑖𝑠𝑖 and
𝐻1(𝑛)¯𝑠0 = 𝐻1(𝑛)𝑖∈𝑃 𝜆𝑃,𝑖𝑠𝑖 respectively.
𝑖,0
𝑖∈𝑃𝑌 𝜆𝑃,𝑖
Decryption (Figure 4). The decryption protocol begins with the
server informing the rate-limiters of the nonce 𝑛, and decrypting the
ciphertext 𝐶 to obtain (𝐶0, 𝐶1). The server then computes the value
𝑌0,0 := 𝐶0 · 𝐻0(pw, 𝑛)−1, while the 𝑖-th rate-limiter computes 𝑌𝑖,0 :=
𝐻0(𝑛)𝑠𝑖 . Conceptually, the parties would like to check if 𝑌0,0 =
for some 𝑡-subset 𝑃 of [𝑚]. If the relation is satisfied,
meaning that the password is likely correct, the rate-limiters would
jointly help the server to compute 𝐻1(𝑛)¯𝑠0, which allows the latter
to recover the message 𝑀. However, naively performing the joint
computation of 𝐻1(𝑛)¯𝑠0 would cost one extra round of computation.
In the following, we outline a three-phase protocol where the round
for computing the value 𝐻1(𝑛)¯𝑠0 is merged with one of the rounds
in the checking procedure.
First, the parties jointly compute an encryption of the value
𝑍 := 𝑌−1
𝑖,0 under the public key 𝐾 = 𝐾0 · ¯𝐾0, where the
corresponding secret key is secret-shared among the participants.
This can be done by having the parties encrypt their respective in-
puts using the linearly-homomorphic ElGamal encryption scheme,
0,0𝑖∈𝑃𝑌 𝜆𝑃,𝑖
6
exchange the ciphertexts with each other (via the server), and ho-
momorphically compute an encryption of 𝑍 locally. This costs 2
rounds of communication.
Recall that the goal of the protocol is to allow the server to obtain
𝐻1(𝑛)¯𝑠0 in the case 𝑍 = 𝐼 (the identity element). We observe that
for a randomly sampled ˜𝑟 and for an arbitrary group element 𝐴,
𝑍 ˜𝑟 · 𝐴 = 𝐴 when 𝑍 = 𝐼, and uniformly random otherwise. With
this observation, in the second phase the parties jointly compute
the encryption of 𝑍 ˜𝑟 and 𝑍 ˜𝑟′ · 𝐻1(𝑛)¯𝑠0 respectively for random ˜𝑟
and ˜𝑟′. Similar to the first phase, this costs another 2 rounds of
communication.
In the last phase, the parties jointly help the server to decrypt
the ciphertexts, so that the latter can check whether 𝑍 ˜𝑟 = 𝐼 (and
hence 𝑍 = 𝐼), and if so obtain 𝐻1(𝑛)¯𝑠0. This costs 1 round of com-
munication. Together with the first round where the server sends
the nonce 𝑛, we obtain a 6-round protocol.
At this point, the decryption functionality is already achieved
and the protocol can already be terminated. However, the rate-
limiters have no knowledge about whether the decryption was
successful or not, i.e., whether 𝑍 = 𝐼, and thus can only perform
“coarse-grained” rate-limiting. That is, the rate-limiters would count
both successful and failed decryption attempts, since they cannot
distinguish between the two. This is often sufficient in applications,
since typically a user would not login (successfully) too frequently.
To support “fine-grained” rate-limiting, the server would send an
extra message to the rate-limiters to allow them to decrypt the
encryption of 𝑍 ˜𝑟 . These additional steps are highlighted in dashed
boxes in Figure 8. This costs an extra round of communication and
results in a 7-round protocol.
Key Rotation and Ciphertext Update (Figure 5). The goal of key-
rotation is to update the secret keys from sk𝑖 to sk′
𝑖, where
sk𝑖 = (𝑠𝑖, 𝑘𝑖, 𝐾0, { ¯𝑆 𝑗 , ¯𝐾𝑗}𝑡−1
𝑗=0)
sk′
𝑖 = (𝑠′
𝑗}𝑡−1
𝑗=0)
0, { ¯𝑆′
𝑖 , 𝐾′
𝑗 , ¯𝐾′
𝑖 , 𝑘′
Setup(1𝜆, 1𝑚, 1𝑡)
// 𝑠 and 𝑆 keys are used for encrypting password records
// 𝑘 and 𝐾 keys are used in the decryption protocol
crs := (G, 𝑝, 𝐺) ← GGen(1𝜆)
𝑠0 ← SKE.KGen(1𝜆), 𝑘0 ←$ Z𝑝 // Server key
𝐾0 := 𝐺𝑘0
// Rate-limiter keys (to be shared)
¯𝑠 𝑗 , ¯𝑘 𝑗 ←$ Z𝑝, ∀𝑗 ∈ [0, 𝑡 − 1]
¯𝑠(𝑥) :=
¯𝑠 𝑗 𝑥 𝑗 , ¯𝑘(𝑥) :=
𝑡−1∑︁
𝑡−1∑︁
¯𝑘 𝑗 𝑥 𝑗
𝑗=0
𝑗=0
¯𝑘 𝑗 , ∀𝑗 ∈ [0, 𝑡 − 1]
¯𝑆 𝑗 := 𝐺 ¯𝑠 𝑗 , ¯𝐾𝑗 := 𝐺
𝑠𝑖 := ¯𝑠(𝑖), 𝑘𝑖 := ¯𝑘(𝑖), ∀𝑖 ∈ [𝑚]
sk𝑖 := (𝑠𝑖, 𝑘𝑖, 𝐾0, { ¯𝑆 𝑗 , ¯𝐾𝑗 }𝑡−1
return (crs, sk0, . . . , sk𝑚)
𝑗=0) ∀𝑖 ∈ [0, 𝑚]
Enc⟨S(“enc”, sk0, pw, 𝑀), · · ·⟩
ensure KVf(0, sk0)
𝑛0 ←$ {0, 1}𝜆
receive 𝑛𝑖 from R𝑖 ∀𝑖 ∈ [𝑚]
P := {𝑖 : 𝑛𝑖 ≠ ⊥}
ensure |P| ≥ 𝑡
𝑃 ← Subset𝑡 (P)
send { 𝑗, 𝑛 𝑗 } 𝑗∈𝑃∪{0} to R𝑖 ∀𝑖 ∈ 𝑃
𝑛 := 𝐻 ({𝑖, 𝑛𝑖 }𝑖∈𝑃∪{0})
𝑋0 ← 𝐻0(𝑛), 𝑋1 ← 𝐻1(𝑛)
𝑌0,0 ← 𝐻0(pw, 𝑛), 𝑌0,1 ← 𝐻1(pw, 𝑛)
receive (𝑌𝑖,0, 𝑌𝑖,1, 𝜋𝑖) from R𝑖 ∀𝑖 ∈ 𝑃
𝑗=0 ¯𝑆𝑖 𝑗
𝑗 , ∀𝑖 ∈ 𝑃
𝑆𝑖 :=𝑡−1
ensure ∀𝑖 ∈ 𝑃 : Vf(cid:169)(cid:173)(cid:171)crs,(cid:169)(cid:173)(cid:171) 𝐺
𝐶0 :=𝑖∈𝑃∪{0}𝑌 𝜆𝑃,𝑖
𝐶 := SKE.Enc(𝑠0, (𝐶0, 𝐶1))
return (𝑛, 𝐶)
𝑖,0
(cid:170)(cid:174)(cid:172) , 𝜋𝑖(cid:170)(cid:174)(cid:172)
, 𝐶1 :=𝑖∈𝑃∪{0}𝑌 𝜆𝑃,𝑖
𝑆𝑖
𝑌𝑖,0
𝑌𝑖,1
𝑋0
𝑋1
𝑖,1
Enc⟨· · · , R𝑖(“enc”, sk𝑖), · · ·⟩, ∀𝑖 ∈ [𝑚]
ensure KVf(𝑖, sk𝑖)
𝑛𝑖 ←$ {0, 1}𝜆
send 𝑛𝑖 to S
receive { 𝑗, 𝑛′
ensure 𝑛𝑖 = 𝑛′
𝑛 := 𝐻 ({𝑖, 𝑛𝑖 }𝑖∈𝑃∪{0})
𝑋0 ← 𝐻0(𝑛), 𝑋1 ← 𝐻1(𝑛)
𝑌𝑖,0 ← 𝑋 𝑠𝑖0 , 𝑌𝑖,1 ← 𝑋 𝑠𝑖1
𝑆𝑖 := 𝐺𝑠𝑖
𝑗 } 𝑗∈𝑃∪{0} from S
𝑖
𝜋𝑖 ← Prove(cid:169)(cid:173)(cid:171)crs,(cid:169)(cid:173)(cid:171) 𝐺
𝑋0
𝑋1
send (𝑌𝑖,0, 𝑌𝑖,1, 𝜋𝑖) to S
return 𝜖
(cid:170)(cid:174)(cid:172) , 𝑠𝑖(cid:170)(cid:174)(cid:172)
𝑆𝑖
𝑌𝑖,0
𝑌𝑖,1
· 𝑀
Figure 3: Setup Algorithm and Encryption Protocol of TPHE
where 𝑠′
0 is a fresh SKE secret key, and the following hold:
0
Hid
(cid:12)(cid:12)(cid:12) Pr(cid:104)
Pr(cid:104)
and a uniform password distribution PW with |PW| ≥ 𝑄Dec,