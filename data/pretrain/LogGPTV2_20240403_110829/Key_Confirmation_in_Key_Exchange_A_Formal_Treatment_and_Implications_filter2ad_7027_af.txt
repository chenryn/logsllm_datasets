identiﬁer pid
· · ·
s
c
τ
τ
Figure 4: Transformed protocol ΠMAC.
(cid:2) = sid
(cid:2)
, key
set
kcid
c
(key
MAC, key
s ← MAC(key
s
MAC, sid)
τ
s
MAC) = KDF(key)
abort if τ
c invalid
(cid:2)
output
key key
identiﬁer sid
identiﬁer pid
(cid:2) = sid
(cid:2) = pid
(cid:2) = sid
(cid:2)
, key
set
kcid
c
(key
MAC, key
c ← MAC(key
c
MAC, sid)
τ
s
MAC) = KDF(key)
abort if τ
s invalid
(cid:2)
output
key key
identiﬁer sid
identiﬁer pid
(cid:2) = sid
(cid:2) = pid
Since the simulation is perfect we can view any simulated
run of A as a concrete execution of its experiment against
ΠMAC. Furthermore, since for the predicates we consider here
the RevealKey queries of A(cid:3) are irrelevant to the outcome, it
follows that any concrete simulated execution of A satisfying
the predicate in the corresponding experiment against ΠMAC
also yields the result true in the experiment of A(cid:3) against Π.
Match SECURITY. To show Match security of ΠMAC consider
an arbitrary ﬁxed execution of A, simulated through A(cid:3). For
that particular execution, note that partnering in ΠMAC implies
partnering in Π, because if two sessions in ΠMAC have accepted
(cid:3) = sid, then this is also
and hold the same session identiﬁer sid
true for Π. Then violation of any of the four Match-security
properties in ΠMAC entails a corresponding violation for Π:
1) Partnered sessions cannot hold distinct keys: As explained
above, if two sessions are partnered for ΠMAC then they
are also partnered for Π. If they hold distinct keys in
ΠMAC, then they also must so in Π, because key derivation
is deterministic and they would otherwise also obtain the
same key in ΠMAC.
2) Three or more sessions share the same session identiﬁer:
Since identiﬁers are identical in both settings, this follows
straightforwardly.
3) Two partnered sessions do not adopt the client-server
relationship: Again, since this does not change in ΠMAC
this again follows easily.
4) A partnered session assumes to talk to a different party:
Since partnering carries over and (cid:2).id and (cid:2).pid coincide
in Π and ΠMAC for all sessions (cid:2), this cannot happen.
Hence, Match security of ΠMAC follows from the Match
465465
security of Π.
(cid:3)
(cid:3)
AUTHENTICATION. Violation of the authentication property
(cid:7)= ∗
in ΠMAC means that an honest session (cid:2) outputs (cid:2).pid
but such that the partnered session (cid:2)(cid:3) has a different identiﬁer
(cid:2)(cid:3).id
. Such a violation must occur for both unilateral and
(cid:3) = pid is
mutual authentication. Since the value of pid
identical in Π and ΠMAC it follows that the mismatch must
already appear in Π. Hence, we can construct an adversary A(cid:3)
for Π using an adversary A against ΠMAC like in the previous
case.
KEY SECRECY. Next we show key secrecy of the derived
protocol ΠMAC. To this end we ﬁrst “normalize” any attacker
AMAC against ΠMAC. The ﬁrst modiﬁcation refers to the fact
that we let AMAC lose if there are sessions with identical ses-
sion identiﬁers but different keys. It follows from the Match-
security that we only decrease AMAC’s success probability
negligibly, but from now on we can assume consistent keys in
the sense that, if the public session identiﬁers match, then so
do the session keys.
The next step is to assume that AMAC “is fresh” in the sense
that it never violates the freshness predicate Fresh. This can be
accomplished by letting AMAC stop and return 0 immediately
before it would violate the freshness condition, e.g., revealing a
session key of a partner of the tested session. Such cases can be
easily checked with the help of the public session identiﬁers.
Since the adversary would lose when refuting freshness this
modiﬁcation cannot decrease the adversary’s success probabil-
(cid:3)
ity. The freshness condition ensures that we can conveniently
re-write the secrecy condition that Pr
(n) = 1
Expscrcy
(cid:2)
ΠMAC,AMAC
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
(cid:3)(cid:6)(cid:6)(cid:6)
(n) = 1
Expscrcy-lr,1
ΠMAC,AMAC
2 as demanding that
(cid:2)
Expscrcy-lr,0
is negligibly close to 1
(cid:3)
(n) = 1
(cid:6)(cid:6)(cid:6)Pr
is negligible, where Expscrcy-lr,b
Expscrcy
ΠMAC,AMAC
− Pr
(cid:2)
ΠMAC,AMAC
2) by a factor 1
(n) with the Test oracle’s bit b ﬁxed.
(n) is the experiment
ΠMAC,AMAC
The third change is to assume that AMAC, before the actual
experiment begins, outputs an index t such that it will test
the t-th completed session with label (cid:2)t, and that there will
be no partnered session accepting before the tested session.
If (cid:2)t would not satisfy this we can assume that AMAC loses
the game. This modiﬁcation can only decrease the adversary’s
advantage (over 1
ns for the maximal number ns
of sessions. To see this deﬁne another adversary which initially
picks t at random from {1, 2, . . . , ns} and the runs a black-box
simulation of AMAC, checking via the public session identiﬁers
that the choice satisﬁes the required properties. Note that this
new adversary still “is fresh” if AMAC is.
Now assume that there exists a normalized PPT adversary
AMAC for the protocol ΠMAC such that
the distinguishing
probability above is non-negligible. Then we can deﬁne the
following adversary A against the original protocol Π. Ini-
tially, AMAC outputs its test session number t. Then A runs
a black-box simulation of AMAC, using its external oracles to
simulate the Send interaction of AMAC with the core part Π of
the protocol ΠMAC. Once this core part is completed, adversary
A ﬁrst fetches the session key key of Π. There are three cases
for that:
key,
such
a
c
MAC, key
• For sessions accepting before the t-th session, as well as
for sessions accepting later, but which are not partnered
with session (cid:2)t adversary A makes Reveal request to get
the session key.
• For the t-th session adversary A calls the Test oracle to
get the key.
• For any session partnered with (cid:2)t, which completes after
the test session, adversary A uses the key it has obtained
through the Test query.
adversary A computes
Given
MAC) ← KDF(key) and continues the
(cid:3), key
(key
execution internally in the simulation, with the help of
these keys. For the other queries, Test and Reveal of AMAC,
adversary A proceeds correspondingly, fetching the key key
with the corresponding query (if A does not hold it already),
MAC) ← KDF(key) and returning
computing (key
. Any Corrupt query is simply relayed. Eventually, A
key
outputs AMAC’s guess b(cid:3).
Consider for the moment the case that the Test oracle’s
bit in A’s attack is b = 0, such that the oracle returns the
actual session key key to A in the Test query. In this case the
above simulation for the normalized adversary AMAC perfectly
mimics an attack on ΠMAC of this adversary. The reason is that
identical session identiﬁers guarantee identical keys, such that
A consistently uses the right keys when identifying partners
of the tested session via session identiﬁers. Furthermore, A
only makes additional Reveal queries (on top of the ones that
AMAC makes) to sessions unpartnered to the test session, since
c
MAC, key
(cid:3), key
key
(cid:3)
s
s
(cid:3)
(cid:3), key
c
MAC, key
c
MAC, key
s
MAC) as input.
by assumption about AMAC there are no partnered sessions to
the t-th one before that session has completed. It follows that
A never violates freshness with the extra queries, and thus “is
fresh”, too.
The more challenging case is that A’s Test oracle uses
b = 1 and returns an independent key key. Then A as above
derived via the key derivation function KDF
returns a key key
from key, whereas the original experiment would return a
(cid:3)
instead. We next show that, given b = 1,
random key key
the difference is negligible by the pseudorandomness of KDF.
Suppose that, instead of using KDF(key) for independent and
random key key—recall that we ﬁx b = 1—our adversary
A would use a random tuple (key
s
MAC) and
run the identical experiment as above, only using this tuple
now. Then the output of A cannot change signiﬁcantly, or
else we straightforwardly obtain a distinguisher against KDF
which receives either KDF(key) for random key, or a random
(cid:3), key
(key
Next, change A’s simulation by letting it pick an indepen-
(cid:3)(cid:3)
dent key
. This does not change the
output distribution, but it enables us to revert to the pseudo-
MAC) ← KDF(key) again, by
random values (key
having A replace key
in the ﬁrst com-
MAC) ←
c
ponent. If the pseudorandomness of (key
MAC, key
KDF(key) would change the output distribution signiﬁcantly,
then we would again obtain a successful distinguisher against
the pseudorandomness of KDF. The ﬁnal hop is to use the
actual session key key of protocol Π, instead of a random
MAC) ← KDF(key). The
key key to derive (key
closeness here follows from the security of the original pro-
tocol Π, implying that this cannot alter A’s output behavior
signiﬁcantly, or else we easily obtain a successful adversary
against the key secrecy of Π. In this ﬁnal game, however, the
simulation (for ﬁxed bit b = 1) is perfectly indistinguishable
from AMAC’s attack on ΠMAC for b = 1, since AMAC now
obtains an independent random key key
for the Test query
session, and genuine keys are used elsewhere, also in the
additional conﬁrmation steps of ΠMAC in the tested session.
(cid:3)
(cid:3)(cid:3)
by a random value key
(cid:3), key
(cid:3)
In summary, we obtain that
instead of the random key
(cid:3), key
(cid:3)
c
MAC, key
c
MAC, key
(cid:3), key
(cid:2)
(cid:2)
(cid:3)(cid:3)
(cid:3)
s
s
s
Pr
Expscrcy-lr,0
Π,A
(n) = 1
= Pr
Expscrcy-lr,0
ΠMAC,AMAC
(cid:2)
(cid:3)
for the case b = 0, and that
(n) = 1
Expscrcy-lr,1
(cid:6)(cid:6)(cid:6)Pr
Π,A
(cid:2)
− Pr
Expscrcy-lr,1
ΠMAC,AMAC
(n) = 1
(cid:3)(cid:6)(cid:6)(cid:6)
(n) = 1
is negligible for b = 1, by the key secrecy of Π and
the pseudorandomness of KDF. Using the freshness of our
adversaries we conclude that AMAC’s advantage (over 1
2) must
be negligible by the key secrecy of Π.
KEY CONFIRMATION. We ﬁrst show that
the transformed
protocol achieves full (S,C)-key conﬁrmation. Note that this
time we cannot assume that the original protocol Π has this