The rapid increase in the number of malware has made manual methods of
disassembly or reverse engineering can’t aﬀord. So security experts focus on the
eﬃcient and robust run-time malware detection strategies, by analyzing API calls
of real malware and benign processes running on operating system. However,
some researchers [2] use the API call capture tool run in user mode, which only
can capture API calls in user mode, but not work with API calls in kernel
mode. So they can’t detect malware which run in kernel mode. Regardless of the
program to run in user mode or kernel mode, as long as it exists I/O request
will generate the IRP, so we can analyze IRP sequences to distinguish malware
and benign.
2 Our Method
We developed an IRP capture tool MBMAS [1] based on kernel driver technology.
It can capture processes information created by running programs and the IRPs
of each running processes. The statistical analysis of IRPs reveals a total of 30
diﬀerent types of IRP.
We use 4-gram as detector. As long as there is a sequence has the 4-gram
as subsequence, they are match. In the beginning, all permutation of 4-grams
are generated as candidate detectors. The ﬁrst method is, using only NSA to
ﬁlter out detectors which match self, the rest are mature detectors. The second
method is, ﬁrst using NSA to ﬁlter out detectors which match self, then using
PSA to select detectors which match nonself. The ﬁnal detectors are only exist
in nonself sequences. Figure 1 is the statistics of unique 4-gram sequences with
the total number of IRP growing.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 514–515, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Using IRP for Malware Detection
515
Fig. 1. Unique 4-gram sequences with the total number of IRP growing
3 Experiment
We have collected 600 malware and 300 benign Windows executables. 300 mal-
ware come from VX Heaven [3], another 300 are collected from Internet. All 900
ﬁles are divided into 2 groups, grpup1 has 200 benign, 200 malware from VX
Heaven and 200 malware from Internet, and group2 has 100 benign, 100 malware
from VX Heaven and 100 malware from Internet. Group1 will serve as training
data and group2 will serve as testing data. In the test, we divide group2 into
two groups, benign + VX Heaven malware and benign + Internet malware.
We use 200 benign ﬁles in group1 to do self-tolerance and get 807368 mature
detectors. Using group2 as testing data, we get 96% true positive rate for benign
+ VX Heaven malware, 99% true positive rate for benign + Internet malware,
and 9% false positive rate. Using the 807368 detectors as candidate detectors,
we selected 311 detectors which match at least one of 400 malware in group1 by
PSA. Using group2 as testing data, we get exactly the same true positive rate
as before, and the false positive rate is 0%.
References
1. Zhang, F.Y., Qi, D.Y., Hu, J.L.: MBMAS: A System for Malware Behavior Monitor
and Analysis. In: International Symposium on Computer Network and Multimedia
Technology (CNMT 2009), pp. 1–4 (2009)
2. Manzoor, S., Shaﬁq, M.Z., Tabish, S.M., Farooq, M.: A sense of ‘danger’ for windows
processes. In: Andrews, P.S., Timmis, J., Owens, N.D.L., Aickelin, U., Hart, E.,
Hone, A., Tyrrell, A.M. (eds.) Artiﬁcial Immune Systems. LNAI, LNBI, vol. 5666,
pp. 220–233. Springer, Heidelberg (2009)
3. VX Heaven, http://vx.netlux.org
Author Index
510
Giuﬀrida, Cristiano
Giura, Paul
Guo, Li
498
277
198
500
1
500
Hadˇziosmanovi´c, Dina
Haq, Irfan Ul
Hartel, Pieter
Holz, Thorsten
Hsu, Ching-Hsiang
Huang, Chun-Ying
Hu, JingLin
514
422
464
464
Ioannidis, Sotiris
79
Jahanian, Farnam 138
Jiang, Jianchun
Jiang, Xuxian
178
502
486
Ahaniha, Mohammad Mahdi
Ahmed, Ezzat
360
Aiken, Alex
1
Ali, Sardar
AlShaikh, Raed
Antonakakis, Manos
Asplund, Mikael
339
486
18
138
422
422
Bailey, Michael
Balduzzi, Marco
Balzarotti, Davide
Bellmor, Justin
Bertino, Elisa
Bolzoni, Damiano
Bowen, Brian M.
Braje, Timothy
18
402
500
118
218
490
297
488
Callegari, Christian
Cavallaro, Lorenzo
ˇCeleda, Pavel
464
Chen, Kuan-Ta
484
Chen, Shenlong
Chen, Weifeng
502
Connelly, Christopher
Cova, Marco
Crispo, Bruno
Cucurull, Jordi
Cunningham, Robert K.
198
339
442
218
218
442
18
Dacier, Marc
Dagon, David
Debbabi, Mourad
Ding, Liping
Draˇsar, Martin
Dreo Rodosek, Gabi
502
488
508
505
Fattori, Aristide
297
Ganapathy, Vinod
Gao, Debin
238
Gazzarrini, Loris
Ghosh, Anup
Giﬃn, Jonathon
Giordano, Stefano
158
58
490
97
490
512
Kaeli, David
402
Kamra, Ashish
Karim, Rezwana
58
Kemerlis, Vasileios P.
Keromytis, Angelos D.
Khan, Hassan
1
Khayam, Syed Ali
Killourhy, Kevin
Kirda, Engin
Koch, Robert
Kong, Ying
Krejˇc´ı, Radek
488
Kruegel, Christopher
Kulkarni, Ashutosh V.
422
505
494
1
256
18
442
38
Lee, Wenke
Leita, Corrado
Li, Jun
Li, Peng
Liu, Limin
Liu, Qixu
Luo, Xiapu
238
238
494
18
492
Ma, Qiang
Martignoni, Lorenze
Mathew, Sunu
382
Matsuura, Kanta
496
118
118, 442
422
360
297
518
Author Index
256
Maxion, Roy
Memon, Nasir
Miller, Barton P.
Mokhov, Serguei A.
277
317
508
Nadjm-Tehrani, Simin
Ngo, Hung Q.
Niksefat, Salman
382
510
Oliner, Adam J.
Ortolani, Stefano
360
198
490
297
508
490
Pagano, Michele
Paleari, Roberto
Paquet, Joey
Pepe, Teresa
Perdisci, Roberto
Petropoulos, Michalis
Platzer, Christian
Prabhu, Pratap
118
18
422
339
382
Qi, DeYu
514
218
238
178
Rabek, Jesse C.
Reiter, Michael K.
Rhee, Junghwan
Riley, Ryan
Rossey, Lee M.
Roundy, Kevin A.
178
218
317
510
Sadeghiyan, Babak
Shajari, Mehdi
Sidiroglou, Stelios
510
118
Smith, Randy
58
Sqalli, Mohammed
Srivastava, Abhinav
Staﬀord, Shad
38
Stavrou, Angelos
Stolfo, Salvatore J.
486
97
158
118
Takurou, Hosoi
Thonnard, Olivier
496
442
Upadhyaya, Shambhu
382
Vander Weele, Eric
Vasiliadis, Giorgos
Vykopal, Jan
488
138
79
158
Wang, Jiang
Wang, Yipeng
Whelan, Ryan
Wright, Charles V.
498
512
218
484
178
Xing, Luyi
Xu, Dongyan
Xu, Kui
Xu, Yunjing
492
138
Yang, Liu
Yao, Danfeng (Daphne)
58
492
Zhang, FuYong
Zhang, Yuqing
Zhang, Zhibin
514
484, 494
498