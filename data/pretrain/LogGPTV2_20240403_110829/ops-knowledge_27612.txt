To clarify and improve the text, here is a more structured and professional version:

---

I have a Python program that utilizes LTTng (Linux Trace Toolkit Next Generation) to read Linux kernel system calls. With this program, I can capture all kernel calls. After performing some operations, including I/O tasks, I need to analyze the system calls to determine how many bytes were read from the cache and how many were read from the disk.

Which specific system calls should I monitor to get this information?

**Response:**

To achieve this, you should focus on handling the following system calls: `read`, `write`, `pread`, `pwrite`, `readv`, and `writev`. 

The key step is to determine whether the file descriptor (FD) associated with these system calls refers to the cache or the disk. This distinction can be challenging to make in userspace. It might be more straightforward to implement this functionality in kernelspace by writing a kernel module. However, if you prefer to stick with userspace, you may need to use additional tools or libraries to trace and analyze the I/O paths.

---

This version provides a clear and concise description of the problem and the proposed solution, making it easier to understand and follow.