  0eadc0db	
  41410011	
  41410021	
  41410031 
0d1e0030	
  41410041	
  41410051	
  41410061	
  3d0d619d 
0d1e0040	
  41410081	
  1dﬀ5e91	
  4141000d	
  1dﬀ19b1 
0d1e0050	
  0d0d610d	
  414100d1	
  414100e1	
  414100f1 
0d1e0060	
  41410101	
  41410111	
  41410121	
  41410131 
0d1e0070	
  41410141	
  41410151	
  41410161	
  41410171	
array	
  capacity 
0:007>	
  dd	
  0d21f000	
0d21f000	
  6734b238	
  082d56e0	
  00000000	
  00000000 
0d21f010	
  00000004	
  00000000	
  00000000	
  00000000 
A^er	
  write:	
  00000004	
  00000000	
  ﬀﬀﬀﬀ	
  00000000 
0d21f020	
  0425d740	
  00000000	
  00000000	
  00000000	
0d21f030	
  6734b238	
  082d56e0	
  00000000	
  00000000 
0d21f040	
  00000004	
  00000000	
  00000000	
  00000000 
0d21f050	
  0425d740	
  00000000	
  00000000	
  00000000	
0d21f060	
  6734b238	
  082d56e0	
  00000000	
  00000000 
0d21f070	
  00000004	
  00000000	
  00000000	
  00000000 
Demo 
IE	
  11	
  MiTgaTon 
•  New	
  exploit	
  miTgaTon	
  improvements	
– June	
  2014	
•  UAF	
  objects	
  -­‐>	
  Isolated	
  heap 
BOOL	
  __stdcall	
  _DllMainStartup(HINSTANCE	
  hinstDLL,	
DWORD	
  fdwReason,	
  LPVOID	
  lpReserved)	
  { 
… 
  if	
  (	
  fdwReason	
  ==	
  1	
  )	
  { 
  ++trirt_proc_arached; 
  IniLalizeCriLcalSecLon(&g_csHeap); 
  g_hProcessHeap	
  =	
  GetProcessHeap(); 
HeapSetInformaLon_LowFragmentaLon_Downlevel(g
_hProcessHeap); 
  //	
  If	
  dwMaximumSize	
  is	
  0,	
  the	
  heap	
  can	
  grow	
  in	
  size	
  g_hIsolatedHeap	
  =	
  HeapCreate(0,	
  0,	
  0);	
…	
signed	
  int	
  __userpurge	
  CInput::CreateElement(int	
a1,	
  int	
  a2,	
  struct	
  CHtmTag	
  *a3,	
  struct	
  CDoc	
  *a4,	
struct	
  CElement	
  **a5,	
  enum	
  _htmlInput	
  a6)	
  { 
  … 
  v8	
  =	
  _MemIsolatedAllocClear(0xC0u); 
  if	
  (	
  v8	
  ) 
  v9	
  =	
  CInput::CInput(v8,	
  *(_DWORD	
  *)(v6	
  +	
  4),	
  v7); 
  … 
}	
LPVOID	
  __thiscall	
  _MemIsolatedAllocClear(	
    SIZE_T	
  dwBytes)	
  { 
  return	
  HeapAlloc(g_hIsolatedHeap,	
  HEAP_ZERO_MEMORY,	
  dwBytes); 
} 
Isolated	
  Heap 
g_hIsolatedHeap 
g_hProcessHeap 
CTreeNode 
CTreePos 
CXXXElement	
  (DOM	
Element) 
CXXXPointer 
CSVGXXXElement	
  (SVG	
Element) 
XXXBox 
CUnknownElement 
CMarkup 
Cwindow	
  … 
CHtmXXXCtx 
CStr 
CDocument 
CImplAry 
CArrArray 
DrawData 
XXXBulider 
Layout 
XXXCache 
... 
Isolated	
  Heap 
IE	
  11	
  MiTgaTon 
•  How	
  to	
  defeat? 
– Occupy	
  objects	
  in	
  isolated	
  heap 
– UAF	
  objects	
  not	
  in	
  isolated	
  heap	
– Other	
  kinds	
  of	
  vulnerabiliTes 
Google	
  Chrome	
  MiTgaTon 
•  ParTTonAlloc	
– DOM	
  Node 
– RenderObject 
– ArrayBuﬀerData 
– Others 
ParTTonAlloc 
class	
  PLATFORM_EXPORT	
  ParLLons	
  {	
…	
staLc	
  SizeSpeciﬁcParLLonAllocator	
  m_objectModelAllocator;	
staLc	
  SizeSpeciﬁcParLLonAllocator	
  m_renderingAllocator;	
};	
class	
  WTF_EXPORT	
  ParLLons	
  {	
…	
staLc	
  bool	
  s_iniLalized;	
staLc	
  ParLLonAllocatorGeneric	
  m_buﬀerAllocator;	
};	
staLc	
  ParLLonAllocatorGeneric	
  gParLLon;	
Google	
  Chrome	
  MiTgaTon 
•  How	
  to	
  defeat? 
– Corresponding	
  occupy	
  objects	
– Pinkie	
  Pie	
  Legend	
  2: 
•  ExploiTng	
  64-­‐bit	
  Linux	
  like	
  a	
  boss	
•  MiTgated	
Javascript	
  Binding	
  Integrity 
How	
  to	
  Exploit? 
•  ROI	
  exploit	
•  Liebig's	
  law	
•  Unprotected	
  objects	
•  Unprotected	
  vulnerabiliTes 
Summary 
•  Popular	
  vulnerabiliTes	
  -­‐>	
  MiTgate	
•  Universal	
  techniques	
  -­‐>	
  MiTgate	
•  Individual	
  exploitaTon	
  techniques	
– Browser	
  implementaTon 
Caught	
  a	
  Read	
  Access	
  ViolaLon	
  in	
  process	
  5356	
  at	
  2014-­‐06-­‐17	
  10:29:08	
  with	
  a	
  crash	
hash	
  of	
  814D8BA5.9114650A	
Registers:	
  eax	
  =	
  0x7D8A4B38	
Code:	
  0x6A091F74	
  -­‐	
  mov	
  ecx,	
  [eax]	
  0x6A091F76	
  -­‐	
  push	
  69fecaf0h	
  0x6A091F7B	
  -­‐	
  push	
  eax	
  0x6A091F7C	
  -­‐	
  call	
  dword	
  ptr	
  [ecx]	
Call	
  Stack:	
  0x6A091F74	
  -­‐	
  mf!oﬀset_000D1F74	
  0x64D7B32F	
  -­‐	
  mshtml!CMediaElement::CMediaEngineExtension::EndCreateObject	
  0x70FDE997	
  -­‐	
  mshtmlmedia!CAsyncCreateObject::Invoke	
  0x73241F7B	
  -­‐	
  mfplat!CCompleLonPort::InvokeCallback	
  0x73241B3C	
  -­‐	
  mfplat!CWorkQueue::CThread::ThreadMain	
  0x73248CAB	
  -­‐	
  mfplat!CWorkQueue::CThread::ThreadFunc	
  0x764D1287	
  -­‐	
  msvcrt!_endthreadex	
  0x764D1328	
  -­‐	
  msvcrt!_endthreadex	
  0x7768EE1C	
  -­‐	
  kernel32!BaseThreadInitThunk	
  0x778537EB	
  -­‐	
  ntdll!__RtlUserThreadStart	
  0x778537BE	
  -­‐	
  ntdll!_RtlUserThreadStart 
(220c.13b0):	
  Access	
  violaLon	
  -­‐	
  code	
  c0000005	
  (ﬁrst	
  chance)	
First	
  chance	
  excepLons	
  are	
  reported	
  before	
  any	
  excepLon	
  handling.	
This	
  excepLon	
  may	
  be	
  expected	
  and	
  handled.	
eax=00000000	
  ebx=10761ab0	
  ecx=643c1890	
  edx=1c49bc00	
  esi=00000000	
edi=0b41cb1c	
eip=6669555b	
  esp=0b41c9ec	
  ebp=0b41c9f8	
  iopl=0	
  nv	
  up	
  ei	
  pl	
  zr	
  na	
  pe	
  nc	
cs=001b	
  ss=0023	
  ds=0023	
  es=0023	
  fs=003b	
  gs=0000	
  eﬂ=00010246	
IEFRAME!CProxyAcLveObject::TranslateAcceleratorW+0x6d:	
6669555b	
  8b4b04	
  mov	
  ecx,dword	
  ptr	
  [ebx+4]	
  ds:0023:10761ab4=????????	
0:019>	
  kb	
ChildEBP	
  RetAddr	
  Args	
  to	
  Child	
IEFRAME!CProxyAcLveObject::TranslateAcceleratorW+0x6d	
IEFRAME!CDocObjectView::TranslateAcceleratorW+0x6d	
IEFRAME!CWebBrowserSB::_TranslateAccelerator+0x42	
IEFRAME!CWebBrowserOC::TranslateAcceleratorW+0x1e	
IEFRAME!CProxyAcLveObject::TranslateAcceleratorW+0x2e	
IEFRAME!CDocObjectView::TranslateAcceleratorW+0x6d	
IEFRAME!CShellBrowser2::_MayTranslateAccelerator_CCommonBrowser+0x9a	
IEFRAME!CShellBrowser2::_MayTranslateAccelerator+0x3b	
IEFRAME!CTabWindow::_TabWindowThreadProc+0x587	
IEFRAME!LCIETab_ThreadProc+0x31c	
iertuLl!_IsoThreadProc_WrapperToReleaseScope+0xe	
IEShims!NS_CreateThread::DesktopIE_ThreadProc+0x71	
(1a94.12e0):	
  Access	
  violaLon	
  -­‐	
  code	
  c0000005	
  (ﬁrst	
  chance)	
First	
  chance	
  excepLons	
  are	
  reported	
  before	
  any	
  excepLon	
  handling.	
This	
  excepLon	
  may	
  be	
  expected	
  and	
  handled.	
eax=00000000	
  ebx=003b6cc8	
  ecx=08c4e100	
  edx=08c4e0d8	
  esi=003b6ccc	
  edi=00000000	
eip=651310dc	
  esp=07baf6f8	
  ebp=07baf718	
  iopl=0	
  nv	
  up	
  ei	
  pl	
  nz	
  na	
  po	
  nc	
cs=001b	
  ss=0023	
  ds=0023	
  es=0023	
  fs=003b	
  gs=0000	
  eﬂ=00010202	
MSHTML!CMediaElement::CMediaEngineExtension::OnByteStreamHandlerResolve+0x6a:	
651310dc	
  8b08	
  mov	
  ecx,dword	
  ptr	
  [eax]	
  ds:0023:00000000=????????	
0:030>	
  kb	
ChildEBP	
  RetAddr	
  Args	
  to	
  Child	
MSHTML!CMediaElement::CMediaEngineExtension::OnByteStreamHandlerResolve+0x6a	
MSHTML!
CMediaElement::CMediaEngineExtension::CByteStreamHandlerCallback::Invoke+0x16	
MFPlat!CCompleLonPort::InvokeCallback+0x12	
MFPlat!CWorkQueue::CThread::ThreadMain+0xa5	
MFPlat!CWorkQueue::CThread::ThreadFunc+0xd	
msvcrt!_endthreadex+0x44	
msvcrt!_endthreadex+0xce	
kernel32!BaseThreadInitThunk+0xe	
ntdll!__RtlUserThreadStart+0x70	
ntdll!_RtlUserThreadStart+0x1b 
Acknowledgements 
@ga1ois	
@bluerust	
@exp-­‐sky	
@Backend	
@tombkeeper	
Yongjun	
  Liu	
@ztz	
@coolq1981	
@丅eLeMan	
@陈良-­‐Keen	
@guhe120	
Chengyun	
  Chu	
Bibliography 
1. 
Fuzzing:	
  Brute	
  Force	
  Vulnerability	
  Discovery 
2. 
IntroducTon	
  to	
  Browser	
  Fuzzing 
3. 
Browser	
  Bug	
  HunTng	
  -­‐	
  Memoirs	
  of	
  a	
  last	
  man	
  standing 
4. 
h>p://www.chromium.org/developers/tesTng/addresssaniTzer 
5. 
Taking	
  Browsers	
  Fuzzing	
  To	
  The	
  Next	
  (DOM)	
  Level 
6. 
BROWSER	
  FUZZING	
  IN	
  2014:	
  David	
  vs	
  Goliath 
7. 
h>p://researchcenter.paloaltonetworks.com/2014/07/beginning-­‐end-­‐use-­‐free-­‐exploitaTon/ 
8. 
Safari	
  Security	
  Mechanism	
  IntroducTon	
  (Liang	
  Chen	
  @	
  KeenTeam) 
9. 
Windows	
  8	
  Heap	
  Internals 
10. 
Understanding	
  the	
  Low	
  FragmentaTon	
  Heap 
11. 
h>p://msdn.microso~.com/ 
12. 
h>p://jayconrod.com/ 
13. 
h>p://blog.chromium.org/ 
14. 
h>p://scarybeastsecurity.blogspot.com/ 
15. 
Gödel,	
  Escher,	
  Bach:	
  An	
  Eternal	
  Golden	
  Braid 
16. 
Mobile	
  Pwn2Own	
  Autumn	
  2013	
  -­‐	
  Chrome	
  on	
  Android	
  -­‐	
  Exploit	
  Writeup 
17. 
The	
  Art	
  of	
  Leaks:	
  The	
  Return	
  of	
  Heap	
  Feng	
  Shui 
18. 
h>p://hi.baidu.com/bluerust/item/8ﬀfe0e5e60a623c86d9deﬀ 
19. 
h>p://www.exp-­‐sky.org/windows-­‐81-­‐ie-­‐11-­‐exploit.html 
20. 
h>p://ifsec.blogspot.com/2013/11/exploiTng-­‐internet-­‐explorer-­‐11-­‐64-­‐bit.html 
21. 
h>p://blogs.msdn.com/b/ie/archive/2014/08/06/internet-­‐explorer-­‐begins-­‐blocking-­‐out-­‐of-­‐date-­‐acTvex-­‐controls.aspx 
22. 
h>ps://net-­‐ninja.net/arTcle/2012/Mar/1/heap-­‐overﬂows-­‐for-­‐humans-­‐104/ 
23. 
h>p://www.chromium.org/Home/chromium-­‐security/binding-­‐integrity 
24. 
The	
  Browser	
  Hacker’s	
  Handbook