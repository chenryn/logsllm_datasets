### Security and Privacy Implications of MQTT in IoT Systems

#### A. General Problem with ClientId Management

Our analysis of various IoT platforms, including IBM, Microsoft, and Tuya (as summarized in Table I), reveals that the issue of ClientId management is widespread. As discussed in Section III-C, this problem likely stems from the misinterpretation of the MQTT specification and the lack of secure, standardized practices for managing ClientIds in IoT systems.

In an unguided development environment, each platform implements its own version of IoT communication. Interestingly, some platforms' implementations make the problem more challenging to exploit. For example, on IBM's IoT cloud, each device must use a pre-assigned ClientId in the format `d:orgId:deviceType:deviceId`, where the `deviceId` field must match the recorded ID on the cloud. This prevents an attacker from using their device’s MQTT connection to claim a victim’s ClientId. In contrast, user clients on the same cloud follow the format `a:orgId:appId`, where the `appId` can be set arbitrarily by the user. This allows an attacker to exploit their user connection to claim a victim's ClientId, leading to our ClientId hijacking attack. Since the two types of MQTT clients (device and user) on IBM's cloud have different security implications, we evaluated them separately (see the two sub-columns under the IBM column in Table I).

Although IBM's device connections are difficult to exploit, this is likely due to the specific ClientId deployment choice for devices, rather than an intentional security design. If it were a deliberate security measure, IBM would have applied the same restriction to protect user clients as well.

Another notable observation is that Alibaba, the fourth largest cloud provider globally, did not adhere to the MQTT specification: two MQTT clients on its IoT platform could claim the same ClientId without conflicts, rendering our exploit ineffective. Additionally, AWS IoT allows device manufacturers to specify customized security policies, which can restrict what ClientId a client can claim. However, such restrictions were not suggested to device manufacturers, and the recommended policy in AWS developer documentation is still vulnerable to our attack. Our further study of insecure AWS IoT security policies created by developers on GitHub highlights the challenges in eliminating these threats and building a secure IoT ecosystem.

#### B. Message Authorization and Session Management

- **Message Authorization**: All IoT cloud platforms, such as AWS, Microsoft, and Tuya, suffered from issues related to message authorization, except for a few that did not support utility-oriented messages (Will Message and Retained Message) at the time of our study.
- **Session Management**: Most IoT clouds had insecure session management (subscription and lifecycle states). AWS, for instance, added its own permission policy to govern subscription state changes, a feature missed in the MQTT specification and by other IoT platforms. Despite this, AWS was still subject to session lifecycle attacks, indicating the need for consistent and standardized security guidelines.

- **Topic Authorization**: Leading IoT platforms like AWS and Suning were vulnerable to topic authorization attacks. Other platforms were not, as they did not extensively use the wildcard feature in MQTT topics, which enables users to easily subscribe to multiple topics or devices. Given the usability-oriented trend in system design, we expect this feature to become more common, but it introduces significant security pitfalls, as evidenced by the mistakes made by AWS, Suning, and device manufacturers like iRobot.

#### C. Conclusion

We reported all identified security issues to the relevant vendors, who acknowledged the problems. Our findings show that each IoT cloud builds its own MQTT communication and ad-hoc security protections, which are often ineffective. This underscores the challenges in securely adopting MQTT, a general messaging protocol designed for a more trusted environment, into the adversarial and complex IoT environment. The absence of systematic analysis, well-thought-out design principles, and security guidelines exacerbates these challenges.

#### D. Privacy Implications of Leaked MQTT Messages

The weaknesses in Sections III-B and III-D enable an attacker to stealthily gather MQTT messages published by victims’ IoT devices. To understand the real-world consequences of message leakage, we conducted an IRB-approved experiment on Suning's cloud platform, which improperly handles wildcards in MQTT topic subscriptions. We collected 800 million real-world MQTT messages over three weeks, revealing rich information about device IDs, types, status, timestamps, locations, and captured data. Some messages included personally identifiable information (PII) such as email addresses and phone numbers.

When combined for longitudinal analysis, this information could reveal private habits, routine behaviors, and cohabitant relationships of identifiable individuals. For example, the three-week status of a door lock showed that the user typically stayed at home on weekdays and left on Fridays. Similarly, the status of an air conditioner revealed when the user was usually not at home. Such information could help a potential burglar determine the best time to break into a home.

Given the millions of consumer and medical IoT devices on the market and their sensitive functionalities, the potential privacy leakage demonstrated in our study deserves serious attention and calls for urgent protection.

#### E. Mitigation

From our security analysis, we conclude that today’s IoT clouds fail to bridge the gap between the usability-oriented design of MQTT and the security demands of complex user-device interactions. Mitigating these risks requires enhancing the protection of entities within the protocol to ensure that an IoT device can only be accessed by authorized parties. Key to this protection is adding a missing security model and design principles that govern critical protocol entities.

**1. Managing Protocol Identities and Sessions**

A key design principle is that protocol-layer identities (e.g., ClientId) should be authenticated, and if used as a security token, their confidentiality should be guaranteed. Our study shows that IoT cloud platforms generally authenticate MQTT connections through platform-layer identities (e.g., Amazon accounts). A lightweight and effective protection is to restrict an MQTT client’s ClientId to match the client’s platform identity. For example, a user’s ClientId should start with their platform identity. This design respects the concurrency property of IoT applications, allowing a user to have multiple clients with different ClientIds, each restricted by its prefix. For hard-coded ClientIds, a more general approach is to maintain a mapping between the platform identity and its allowed ClientIds, denying any unauthorized attempts.

Additionally, sessions in a messaging protocol should be updated in response to privilege changes, ensuring that both protocol-agnostic and protocol-specific states (e.g., subscription states) are kept current.

**2. Message-Oriented Access Control Model**

Securing a messaging protocol on IoT systems requires protecting message communication. The system should govern the subjects' rights to send/receive messages and manage security implications for recipients. We propose the Message-Oriented Usage Control Model (MOUCON), an enhanced access model based on UCON. MOUCON takes the message as the resource and checks access rights based on the attributes of subjects and objects.

- **Subject (S)**: The set of clients in the communication, such as devices and users, defined by their attributes.
- **Subject Attributes (ATT(S))**: Include identity information (id), URIs permitted to send messages to (URIw), and URIs permitted to receive messages from (URIr).
- **Object (O)**: The set of messages that subjects hold rights on.
- **Object Attributes (ATT(O))**: Include content (application-layer information), URI (channel of the message), and source (the subject that created the message).
- **Rights (R)**: Privileges that a subject can hold and exercise on an object, such as Read (receive a message) and Write (publish a message).
- **Authorizations**: Functions that evaluate ATT(S), ATT(O), and requested rights with a set of authorization rules for access decisions.

By implementing these design principles and the MOUCON model, we aim to enhance the security of MQTT in IoT systems.