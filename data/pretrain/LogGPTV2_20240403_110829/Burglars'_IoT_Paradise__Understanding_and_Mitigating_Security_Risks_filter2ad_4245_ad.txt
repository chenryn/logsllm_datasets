IBM, Microsoft, Tuya, etc. (Table I), which demonstrates
the problem is general. As discussed in Section III-C, very
likely the problem is due to the misguidance of MQTT
speciﬁcation and the lack of secure and standardized practices
in managing MQTT ClientId in the IoT systems. In such un-
guided development environment, each platform implements
its own version of IoT communication, and interestingly,
some platforms’ implementation renders the problem harder
to exploit. In particular, each device under IBM IoT cloud has
to use the ClientId pre-assigned under its factory setting, in
the format d:orgId:deviceType:deviceId), in which
the deviceId ﬁeld must match the recorded ID of the
device on the cloud. Hence, the attacker cannot exploit his/her
device’s MQTT connection to claim a victim’s ClientId. In
contrast, on the same cloud, the user client follows another
format a:orgId:appId, in which the appId ﬁeld can be
arbitrarily set by the user. Hence, the attacker can exploit
his/her user connection to claim a victim user’s ClientId –
our ClientId hijacking attack. Since the two types of MQTT
clients (device and user) on IBM cloud have different security
implications, we assessed them separately in our study (see
the two sub-columns under the IBM column in Table I).
Although IBM’s device connection is hard to exploit, this is
likely attributed to its ClientId deployment choice for devices
– not an intentional security design that restricts the ClientId
per MQTT client. Otherwise, IBM may have applied the same
restriction to protect its user client.
Also interestingly, we observed that Alibaba (the fourth
largest cloud provider in the world) did not follow MQTT
speciﬁcation: two MQTT clients on its IoT platform could
claim the same ClientId without conﬂicts which rendered
our exploit ineffective. Also on our mentionable list is that
AWS IoT allows device manufacturers to specify customized
security policy that is highly ﬂexible [47] and supports to
restrict what ClientId a client can claim. However, such
a restriction was never suggested to device manufacturers
and the exemplary policy recommended on AWS developer
documentation is even subject to our attack. Appendix Section
B reports our further study of insecure AWS IoT security
policies created in the wild: the majority created by developers
on Github was insecure, which further highlights the hard
challenges in eliminating the threat and building a secure IoT
ecosystem.
Our study shows that ClientId management is a general
problem, and more importantly, each cloud adds their cus-
tomized yet ineffective security protection to MQTT commu-
nication – such an ecosystem is highly insecure, alarming and
in urgent need of standardized security guideline and practices.
• Message authorization. All IoT cloud platforms, e.g., AWS,
Microsoft, Tuya, suffered from the problems except a few,
of which the implementation did not support the two types
of utility-oriented messages (Will Message and Retained Mes-
sage) at the time of our study.
• Session management. Most IoT clouds suffered from the in-
secure session management (subscription and lifecycle states,
see Section III-B), found in our study. Interestingly, to securely
govern subscription state changes, AWS added their own
permission policy, which is missed to consider in MQTT
speciﬁcation and by other IoT platforms. Still, AWS was
subject to the session lifecycle attack. Again, this observa-
tion indicates the urgent need of consistent and standardized
security guideline for protecting the many IoT platforms in
their MQTT communication.
• Topic authorization. Leading IoT platforms AWS and Suning
were subject to this class of attack. Others that we studied are
not, because their current implementation has not aggressively
taken advantage of the wildcard in MQTT topics, a convenient
feature that enables the user to easily subscribe to multiple
topics of her device or multiple devices of hers at a time.
Given today’s usability-oriented trend in system design [48],
we envision that such a feature is appealing to these platforms.
Once it is adopted, the security pitfalls can be non-trivial to
avoid in practice, evidenced by the mistakes made by AWS,
Suning, as well as device manufacturers (e.g., iRobot, see
Section III-C).
Conclusion. We reported all security issues we found to
related vendors which all acknowledged the problems. Our
measurement shows that IoT clouds each builds their own
MQTT communication and ad-hoc security protections, which
are not effective and secure. This highlights the challenges
in practice in securely adopting MQTT, a general messaging
protocol designed in a more trusted environment, into the
adversarial and complicated IoT environment, in the absence
of a systematic analysis, well-thought design principles and
security guidelines.
B. Privacy Implications of Leaked MQTT Messages
The weaknesses in Section III-B and III-D enable an
attacker to stealthily gather MQTT messages published by
victims’ IoT devices . To understand whether message leakage
in the real world indeed incurs serious consequences and
10
TABLE I
SUMMARY OF MEASUREMENT RESULTS
Security Weaknesses
ClientId Management
Message Authorization
Topic Authorization
Session Management
Will Message
Retained Message
Subscription state
Lifecycle state
Alibaba

N/A
N/A



AWS


N/A



Baidu






Google

N/A
N/A

N/A

IBM1


N/A




N/A
N/A

N/A

Microsoft


N/A



Suning

N/A
N/A



Tuya


N/A



means the weakness was successfully exploited on the platform. means we were not able to exploit the weakness on the platform.
N/A means the platform did not fully support the MQTT feature; or its security policy was too coarse-grained for us to test the ﬁne-grained aspect, e.g.,
the platform did not support to revoke a client’s capability to subscribe, so we could not adequately test its management of “subscription state”.
1 The left and right columns under IBM show the results of testing using the device client and user client respectively.
privacy implications, we performed an experiment carefully
approved by the IRB ofﬁce of our university.
Speciﬁcally, due to the improper wildcard handling in
MQTT topic subscriptions on Suning’s cloud platform (Sec-
tion III-D), any real-world attacker can easily subscribe
(through wildcard /#) to messages from all devices under the
cloud. In our experiment, we ran a simple script to subscribe
to Suning’s broker endpoint (a URI easily obtained through
reverse engineering the trafﬁc of our own device) and collected
MQTT messages for three weeks (see IRB approval below).
In total, we successfully gathered 800 million real-world
MQTT messages from the cloud. From such easily gathered
messages, our ﬁndings are highly astonishing. Particularly,
the messages published by individual IoT device include
rich information, including device IDs and types (e.g., door
lock, air conditioner, camera, etc.), device status (“on”, “off”,
“heating”, “washing”), timestamp, device location (“home”,
“ofﬁce”, “living room”, etc.) and information captured by the
device (e.g. indoor temperature, air quality, whether a person
is passing by a camera, etc.). Some of the gathered messages
include users’ PII (e.g., email, phone number, nicknames, and
names, etc., which were conﬁgured by the user on his/her
device). Also interestingly, from the device ID and user ID,
the potential attacker is able to infer the number of active users
and devices during the three week period, a likely business
secret of the platform which we decide not disclose in the
paper.
More importantly, when the information is combined for
a longitudinal analysis (three weeks in our study), a potential
attacker likely could infer the private habits, routine behaviors,
cohabitant relation, etc., of identiﬁable people (through their
email addresses, phone numbers). For example, Fig. 4 shows
the three-week status of a door lock: the user usually stays
at home on weekdays since the door frequently opens from
9:40 to 19:10, and tends to leave home by Fridays since
the door was not operated at all on two weekends during
our study. Also, Fig. 5 in Appendix shows three-week sta-
tus of an air conditioner that also leaks information about
when the user is usually not at home. Hence, we envision
such routine information (from door locks, air conditioner,
fridge, bulb, coffer maker, oven) of a victim could help a
potential burglar ﬁgure out
time to break into a
home. Further, we found the message from home locks like
the best
"[Person Name set by user] opened the door
via fingerprint", which possibly leaks the user’s pri-
vate cohabitants relation (e.g., who lives with a movie star).
Fig. 4. “Open” Status of a Smart Lock Mediated Under Suning’s Cloud
Consider the millions of consumers and medical IoT devices
on the market and their sensitive functionalities, such as
those for testing and monitoring pregnancy/blood pressure,
depression, blood glucose, heartbeat, Parkinson disease, and
user location, the potential privacy leakage demonstrated in our
study deserves serious attention and calls for urgent protection.
IRB approval. To avoid the potential privacy infringement on
real-world users, the design of our experiment was approved
by our university’s IRB. In particular, all data we collected
was encrypted in transit (through TLS-enabled port 1885 of
Suning broker server); any personally identiﬁable information
(PII) in the message, e.g., email, phone number, was hashed
through SHA-512 at rest.
V. MITIGATION
From our security analysis, we conclude that today’s IoT
clouds fail to bridge the gap between the usability-oriented
design of MQTT and the security demands of complicated
user-device interactions. Mitigating the risks introduced by
the ﬂaws requires enhancing protection of entities within the
protocol to ensure that an IoT device can only be accessed by
the party during the period that she/he is authorized. However,
our ﬁndings show that such protection, though urgently needed
is out of the current security model
in IoT environment,
of MQTT protocol, e.g.,
identities, messages and session
states are generally unprotected or not suggested to protect.
11
00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:0000:00ThuSatMonWedFriSunTueThuSatMonWedTime (hh:mm)Date (ddd)The lock is in status: OPENHence, key to the protection is to add the missing security
model and design principles that govern the critical protocol
entities. Hence, in this section, we present design principles for
protecting the protocol entities and an enhanced access control
model. We also report our implementation of the protection on
Mosquitto and evaluation of its efﬁcacy.
A. Managing Protocol Identities and Sessions
A key design principle in the adoption of a messaging
protocol to the complicated and adversarial IoT systems is,
protocol-layer identity (e.g., ClientId), if any, should be au-
thenticated; additionally, if the identity is used as a security
token (e.g., session token), its conﬁdentiality should be guar-
anteed.
Our study shows that IoT cloud platforms generally soundly
authenticate the MQTT connection through platform-layer
identities (such as Amazon accounts, see Section III-C).
Hence, a lightweight and effective protection for a typical
IoT platform is, restrict an MQTT client’s ClientId to literally
match the client’s platform identity p user id (or alternatively
the message digest of the client’s platform-layer authenti-
cation token, e.g., an OAuth [49] token or certiﬁcate). For
example, a user’s ClientId should start with her platform
identity p user id. Such a design also respects the concur-
rency property of IoT applications: a user can have multiple
clients of different ClientIds, and each is restricted through
its preﬁx. This design, however, may not work under certain
circumstances, e.g., a device client may have hard-coded
ClientId. To address such cases, a more general approach
is to maintain a mapping between the platform identity and
its allowed.Any attempts to claim an unauthorized ClientId
should be denied. We will leave the full design and evaluation
of such a mapping to our future research.
Additionally, sessions in a messaging protocol should be
guarded following the principle: in the presence of an ad-
versarial environment where subjects (e.g., a user) are ex-
pected to have privilege changes, session states, including
protocol-agnostic states (e.g., lifecycle states) and protocol-
speciﬁc states (e.g., subscription states), should accordingly
keep updated in response.
B. Message-Oriented Access Control Model
Key to securing a messaging protocol on IoT systems is to
protect its message communication: the system should govern
the subjects’ rights to send/receive messages, and additionally
manage security implications in receiving a message with
respect to the recipients’ security requirement.
As found in our study,
the former is generally known
to enforce, but the latter, especially protecting message re-
cipients in the face of device sharing and privilege re-
vocation (Section II-C),
the cur-
rent consideration of MQTT. To bridge this gap, we
propose Message-Oriented Usage Control Model
(MOUCON), an enhanced access model for IoT communi-
cation based on UCON [50]. The core idea of MOUCON
model is simple, and builds on familiar concepts: it takes the
is completely out of
12
message as the resource (object), and checks access rights
of the subject with respect to attributes of the subjects and
objects. Its deﬁnition is as follows:
Subject (S). The set of the clients in the communication,
such as devices and users. A subject is deﬁned and represented
by its attributes.
Subject Attributes (ATT(S)). A subject’s attributes are
speciﬁed as AT T (S) = {id, U RIw, U RIr}, and include
identity information (id), the set of URIs [51] (e.g., topics)
permitted to send messages to (U RIw), and URIs that are
permitted to receive messages from (U RIr).
Object (O). The set of messages that subjects hold rights
on.
Object Attributes (ATT(O)). An object’s attributes are
speciﬁed as AT T (O) = {content, U RI, source}, and in-
cludes content which is the application-layer information
(e.g., message content), U RI which represents the channel
of the message (e.g. which MQTT topic the messages is
published to or from), source which represents the source
of the object, i.e., the subject that created the message.
Rights (R). Rights are privileges that a subject can hold
and exercise on an object. There are two general classes of
rights, Read (R) (e.g., receive a message) and Write (W) (e.g.,
publish a message).
Authorizations. Authorization functions evaluate AT T (S),
AT T (O), and requested rights together with a set of authoriza-
tion rules for access decisions. For example, an authorization
rule against message receiving by checking the attributes of