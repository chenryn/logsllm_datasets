## hash join, 结果集太大, 耗费大内存, 导致oom 怎么办?   
### 作者      
digoal      
### 日期      
2021-01-28       
### 标签      
PostgreSQL , oom , hash join   
----      
## 背景      
hash连接, 结果集太大, 可能耗费很大内存, 导致oom  .   
```
               ->  Hash  (cost=1442478.32..1442478.32 rows=100000032 width=8) (actual time=33108.759..33108.761 rows=100000000 loops=1)
                     Output: h2.id, h2.c1
                     Buckets: 67108864  Batches: 1  Memory Usage: 4430538kB
                     Buffers: shared hit=442478
                     ->  Seq Scan on public.h2  (cost=0.00..1442478.32 rows=100000032 width=8) (actual time=0.020..7907.127 rows=100000000 loops=1)
                           Output: h2.id, h2.c1
                           Buffers: shared hit=442478
```
可以调小work_mem 和 hash_mem_multiplier(PG 13), 或者关闭 enable_hashagg, 使用groupagg.   
## 测试  
```  
postgres=# create table h1 (id int, c1 int);  
CREATE TABLE  
postgres=# create table h2 (id int, c1 int);  
CREATE TABLE  
postgres=# insert into h1 select generate_series(1,100000000), 1;  
INSERT 0 100000000  
postgres=# insert into h2 select generate_series(1,100000000), 1;  
INSERT 0 100000000  
postgres=# \dt+ h1  
                           List of relations  
 Schema | Name | Type  |  Owner   | Persistence |  Size   | Description   
--------+------+-------+----------+-------------+---------+-------------  
 public | h1   | table | postgres | permanent   | 3458 MB |   
(1 row)  
postgres=# \dt+ h2  
                           List of relations  
 Schema | Name | Type  |  Owner   | Persistence |  Size   | Description   
--------+------+-------+----------+-------------+---------+-------------  
 public | h2   | table | postgres | permanent   | 3458 MB |   
(1 row)  
```  
```  
postgres=# show work_mem ;  
 work_mem   
----------  
 4MB  
(1 row)  
postgres=# show hash_mem_multiplier ;  
 hash_mem_multiplier   
---------------------  
 4  
(1 row)  
```  
```  
postgres=# explain (analyze,verbose,costs,settings,buffers,wal,timing,summary) select h1.*,h2.* from h1 join h2 using (id) order by h1.c1 limit 10;  
                                                                                 QUERY PLAN                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=21608355.83..21608355.85 rows=10 width=16) (actual time=102122.842..102122.858 rows=10 loops=1)  
   Output: h1.id, h1.c1, h2.id, h2.c1  
   Buffers: shared hit=884959, temp read=682766 written=682766  
   ->  Sort  (cost=21608355.83..21858354.87 rows=99999616 width=16) (actual time=102065.801..102065.814 rows=10 loops=1)  
         Output: h1.id, h1.c1, h2.id, h2.c1  
         Sort Key: h1.c1  
         Sort Method: top-N heapsort  Memory: 25kB  
         Buffers: shared hit=884959, temp read=682766 written=682766  
         ->  Hash Join  (cost=3083104.72..19447400.08 rows=99999616 width=16) (actual time=25710.859..89166.654 rows=100000000 loops=1)  
               Output: h1.id, h1.c1, h2.id, h2.c1  
               Hash Cond: (h1.id = h2.id)  
               Buffers: shared hit=884956, temp read=682766 written=682766  
               ->  Seq Scan on public.h1  (cost=0.00..1442474.16 rows=99999616 width=8) (actual time=0.014..8682.389 rows=100000000 loops=1)  
                     Output: h1.id, h1.c1  
                     Buffers: shared hit=442478  
               ->  Hash  (cost=1442478.32..1442478.32 rows=100000032 width=8) (actual time=25701.859..25701.860 rows=100000000 loops=1)  
                     Output: h2.id, h2.c1  
                     Buckets: 524288  Batches: 512  Memory Usage: 11720kB  -- 低于hash_mem_multiplier * work_mem  
                     Buffers: shared hit=442478, temp written=340872  
                     ->  Seq Scan on public.h2  (cost=0.00..1442478.32 rows=100000032 width=8) (actual time=0.012..8484.205 rows=100000000 loops=1)  
                           Output: h2.id, h2.c1  
                           Buffers: shared hit=442478  
 Settings: effective_io_concurrency = '0', hash_mem_multiplier = '4', max_parallel_workers_per_gather = '0', parallel_leader_participation = 'off', random_page_cost = '1.1'  
 Planning Time: 0.169 ms  
 JIT:  
   Functions: 11  
   Options: Inlining true, Optimization true, Expressions true, Deforming true  
   Timing: Generation 1.081 ms, Inlining 2.120 ms, Optimization 36.405 ms, Emission 18.400 ms, Total 58.006 ms  
 Execution Time: 102124.041 ms  
(29 rows)  
```  
```  
postgres=# set enable_hashjoin =off;  
SET  
postgres=# explain (analyze,verbose,costs,settings,buffers,wal,timing,summary) select h1.*,h2.* from h1 join h2 using (id) order by h1.c1 limit 10;  
                                                                                              QUERY PLAN                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=38675964.62..38675964.64 rows=10 width=16) (actual time=176816.873..176816.878 rows=10 loops=1)  
   Output: h1.id, h1.c1, h2.id, h2.c1  
   Buffers: shared hit=884956, temp read=2007222 written=2010822  
   ->  Sort  (cost=38675964.62..38925963.66 rows=99999616 width=16) (actual time=176775.106..176775.109 rows=10 loops=1)  
         Output: h1.id, h1.c1, h2.id, h2.c1  
         Sort Key: h1.c1  
         Sort Method: top-N heapsort  Memory: 25kB  
         Buffers: shared hit=884956, temp read=2007222 written=2010822  
         ->  Merge Join  (cost=34265015.43..36515008.87 rows=99999616 width=16) (actual time=97048.062..163553.273 rows=100000000 loops=1)  
               Output: h1.id, h1.c1, h2.id, h2.c1  
               Merge Cond: (h2.id = h1.id)  
               Buffers: shared hit=884956, temp read=2007222 written=2010822  
               ->  Sort  (cost=17132545.08..17382545.16 rows=100000032 width=8) (actual time=48814.198..60362.753 rows=100000000 loops=1)  
                     Output: h2.id, h2.c1  
                     Sort Key: h2.id  
                     Sort Method: external merge  Disk: 1761296kB  
                     Buffers: shared hit=442478, temp read=1003611 written=1005411  
                     ->  Seq Scan on public.h2  (cost=0.00..1442478.32 rows=100000032 width=8) (actual time=0.019..7808.593 rows=100000000 loops=1)  
                           Output: h2.id, h2.c1  
                           Buffers: shared hit=442478  
               ->  Materialize  (cost=17132470.34..17632468.42 rows=99999616 width=8) (actual time=48233.807..73224.749 rows=100000000 loops=1)  
                     Output: h1.id, h1.c1  
                     Buffers: shared hit=442478, temp read=1003611 written=1005411  