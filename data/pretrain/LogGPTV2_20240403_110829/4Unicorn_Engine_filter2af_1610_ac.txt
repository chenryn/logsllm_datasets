    FIBONACCI_ENTRY = 0x0000000000400670
    FIBONACCI_END = [0x00000000004006F1, 0x0000000000400709]
    stack = []                                          # Stack for storing the arguments
    d = {}                                              # Dictionary that holds return values for given function arguments 
    def hook_code(mu, address, size, user_data):  
        #print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
        if address in instructions_skip_list:
            mu.reg_write(UC_X86_REG_RIP, address+size)
        elif address == 0x400560:                       # That instruction writes a byte of the flag
            c = mu.reg_read(UC_X86_REG_RDI)
            print(chr(c))
            mu.reg_write(UC_X86_REG_RIP, address+size)
        elif address == FIBONACCI_ENTRY:                # Are we at the beginning of fibonacci function?
            arg0 = mu.reg_read(UC_X86_REG_RDI)          # Read the first argument. Tt is passed via RDI
            r_rsi = mu.reg_read(UC_X86_REG_RSI)         # Read the second argument which is a reference
            arg1 = u32(mu.mem_read(r_rsi, 4))           # Read the second argument from reference
            if (arg0,arg1) in d:                        # Check whether return values for this function are already saved.
                (ret_rax, ret_ref) = d[(arg0,arg1)]
                mu.reg_write(UC_X86_REG_RAX, ret_rax)   # Set return value in RAX register
                mu.mem_write(r_rsi, p32(ret_ref))       # Set retun value through reference
                mu.reg_write(UC_X86_REG_RIP, 0x400582)  # Set RIP to point at RET instruction. We want to return from fibonacci function
            else:
                stack.append((arg0,arg1,r_rsi))         # If return values are not saved for these arguments, add them to stack.
        elif address in FIBONACCI_END:
            (arg0, arg1, r_rsi) = stack.pop()           # We know arguments when exiting the function
            ret_rax = mu.reg_read(UC_X86_REG_RAX)       # Read the return value that is stored in RAX
            ret_ref = u32(mu.mem_read(r_rsi,4))         # Read the return value that is passed reference
            d[(arg0, arg1)]=(ret_rax, ret_ref)          # Remember the return values for this argument pair
完整脚本请参考solve3.py： 。  
至此，我们已经成功地使用Unicorn Engine来优化程序。  
接下来，我推荐大家完成下面三个任务的练习。针对每个任务，都有提示和解决方案，并且在解决任务的过程中，可以查看后文的参考内容。  
我认为，其中一个很重要的问题就是要知道Constant的名称。处理这个问题的最好方法是借助IPython的自动补全（Tab
Completion）来完成。在你安装IPython之后，可以输入from unicorn import UC _ARCH_
，并按TAB键，所有以这个前缀开头的Constant都将被打印出来。
##
## 任务2
分析下列Shellcode：
    shellcode = "xe8xffxffxffxffxc0x5dx6ax05x5bx29xddx83xc5x4ex89xe9x6ax02x03x0cx24x5bx31xd2x66xbax12x00x8bx39xc1xe7x10xc1xefx10x81xe9xfexffxffxffx8bx45x00xc1xe0x10xc1xe8x10x89xc3x09xfbx21xf8xf7xd0x21xd8x66x89x45x00x83xc5x02x4ax85xd2x0fx85xcfxffxffxffxecx37x75x5dx7ax05x28xedx24xedx24xedx0bx88x7fxebx50x98x38xf9x5cx96x2bx96x70xfexc6xffxc6xffx9fx32x1fx58x1ex00xd3x80"
如你所见，该程序集被混淆了（命令disarm是pwntools的一个功能）：
    a@x:~/Desktop/unicorn_engine_lessons$ disasm e8ffffffffc05d6a055b29dd83c54e89e96a02030c245b31d266ba12008b39c1e710c1ef1081e9feffffff8b4500c1e010c1e81089c309fb21f8f7d021d86689450083c5024a85d20f85cfffffffec37755d7a0528ed24ed24ed0b887feb509838f95c962b9670fec6ffc6ff9f321f581e00d380
       0:    e8 ff ff ff ff           call   0x4
       5:    c0 5d 6a 05              rcr    BYTE PTR [ebp+0x6a], 0x5
       9:    5b                       pop    ebx
       a:    29 dd                    sub    ebp, ebx
       c:    83 c5 4e                 add    ebp, 0x4e
       f:    89 e9                    mov    ecx, ebp
      11:    6a 02                    push   0x2
      13:    03 0c 24                 add    ecx, DWORD PTR [esp]
      16:    5b                       pop    ebx
      17:    31 d2                    xor    edx, edx
      19:    66 ba 12 00              mov    dx, 0x12
      1d:    8b 39                    mov    edi, DWORD PTR [ecx]
      1f:    c1 e7 10                 shl    edi, 0x10
      22:    c1 ef 10                 shr    edi, 0x10
      25:    81 e9 fe ff ff ff        sub    ecx, 0xfffffffe
      2b:    8b 45 00                 mov    eax, DWORD PTR [ebp+0x0]
      2e:    c1 e0 10                 shl    eax, 0x10
      31:    c1 e8 10                 shr    eax, 0x10
      34:    89 c3                    mov    ebx, eax
      36:    09 fb                    or     ebx, edi
      38:    21 f8                    and    eax, edi
      3a:    f7 d0                    not    eax
      3c:    21 d8                    and    eax, ebx
      3e:    66 89 45 00              mov    WORD PTR [ebp+0x0], ax
      42:    83 c5 02                 add    ebp, 0x2
      45:    4a                       dec    edx
      46:    85 d2                    test   edx, edx
      48:    0f 85 cf ff ff ff        jne    0x1d
      4e:    ec                       in     al, dx
      4f:    37                       aaa
      50:    75 5d                    jne    0xaf
      52:    7a 05                    jp     0x59
      54:    28 ed                    sub    ch, ch
      56:    24 ed                    and    al, 0xed
      58:    24 ed                    and    al, 0xed
      5a:    0b 88 7f eb 50 98        or     ecx, DWORD PTR [eax-0x67af1481]
      60:    38 f9                    cmp    cl, bh
      62:    5c                       pop    esp
      63:    96                       xchg   esi, eax
      64:    2b 96 70 fe c6 ff        sub    edx, DWORD PTR [esi-0x390190]
      6a:    c6                       (bad)
      6b:    ff 9f 32 1f 58 1e        call   FWORD PTR [edi+0x1e581f32]
      71:    00 d3                    add    bl, dl
      73:    80                       .byte 0x80
请注意，目前的架构是x86-32。系统调用的列表可以在这里查看： 。
###  提示
您可以Hook一个int 80h指令，它由cd
80表示。接下来，您可以读取寄存器和内存。需要记住的是，Shellcode是一个可以在任何地址加载的代码，绝大多数Shellcode都使用了栈。
###  解决方案
下面的代码是通过几个步骤创建而成的。通过UE错误信息，我们获得了一些线索，并想到了最终的解决方案。
    from unicorn import *
    from unicorn.x86_const import *
    shellcode = "xe8xffxffxffxffxc0x5dx6ax05x5bx29xddx83xc5x4ex89xe9x6ax02x03x0cx24x5bx31xd2x66xbax12x00x8bx39xc1xe7x10xc1xefx10x81xe9xfexffxffxffx8bx45x00xc1xe0x10xc1xe8x10x89xc3x09xfbx21xf8xf7xd0x21xd8x66x89x45x00x83xc5x02x4ax85xd2x0fx85xcfxffxffxffxecx37x75x5dx7ax05x28xedx24xedx24xedx0bx88x7fxebx50x98x38xf9x5cx96x2bx96x70xfexc6xffxc6xffx9fx32x1fx58x1ex00xd3x80" 
    BASE = 0x400000
    STACK_ADDR = 0x0
    STACK_SIZE = 1024*1024
    mu = Uc (UC_ARCH_X86, UC_MODE_32)
    mu.mem_map(BASE, 1024*1024)
    mu.mem_map(STACK_ADDR, STACK_SIZE)
    mu.mem_write(BASE, shellcode)
    mu.reg_write(UC_X86_REG_ESP, STACK_ADDR + STACK_SIZE/2)
    def syscall_num_to_name(num):
        syscalls = {1: "sys_exit", 15: "sys_chmod"}
        return syscalls[num]
    def hook_code(mu, address, size, user_data):
        #print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))  
        machine_code = mu.mem_read(address, size)
        if machine_code == "xcdx80":
            r_eax = mu.reg_read(UC_X86_REG_EAX)
            r_ebx = mu.reg_read(UC_X86_REG_EBX)
            r_ecx = mu.reg_read(UC_X86_REG_ECX)
            r_edx = mu.reg_read(UC_X86_REG_EDX)
            syscall_name = syscall_num_to_name(r_eax)
            print "--------------"
            print "We intercepted system call: "+syscall_name
            if syscall_name == "sys_chmod":
                s = mu.mem_read(r_ebx, 20).split("x00")[0]
                print "arg0 = 0x%x -> %s" % (r_ebx, s)
                print "arg1 = " + oct(r_ecx)
            elif syscall_name == "sys_exit":
                print "arg0 = " + hex(r_ebx)
                exit()
            mu.reg_write(UC_X86_REG_EIP, address + size)
    mu.hook_add(UC_HOOK_CODE, hook_code)
    mu.emu_start(BASE, BASE-1)
最终代码如下：
    a@x:~/Desktop/unicorn_engine_lessons$ python solve_task2.py
    --------------    We intercepted system call: sys_chmod
    arg0 = 0x400058 -> /etc/shadow
    arg1 = 0666L
    --------------    We intercepted system call: sys_exit
    arg0 = 0x400058L
##
## 任务3
下载二进制文件（  ），该文件是用以下命令编译的：  
`gcc function.c -m32 -o function`  
这个二进制代码如下所示：
    int strcmp(char *a, char *b)
    {
        //get length
        int len = 0;
        char *ptr = a;
        while(*ptr)
        {
            ptr++;
            len++;
        }
        //comparestrings
        for(int i=0; i<=len; i++)
        {
            if (a[i]!=b[i])
                return 1;
        }
        return 0;
    }
    __attribute__((stdcall))
    int  super_function(int a, char *b)
    {
        if (a==5 && !strcmp(b, "batman"))
        {
            return 1;
        }
        return 0;
    }
    int main()
    {
        super_function(1, "spiderman");
    }
任务是调用super_function，使其返回1。  
其汇编代码如下：
    .text:0x8048464 super_function  proc near               ; CODE XREF: main+16p
    .text:0x8048464
    .text:0x8048464 arg_0           = dword ptr  8
    .text:0x8048464 arg_4           = dword ptr  0Ch
    .text:0x8048464
    .text:0x8048464                 push    ebp
    .text:0x8048465                 mov     ebp, esp
    .text:0x8048467                 call    __x86_get_pc_thunk_ax