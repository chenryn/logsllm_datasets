y(t) = [1 + sin(2πf1t) + sin(2πf2t)] sin(2πfct).
(3)
cos[2π(fc+f1)t]− 1
2
By expanding (3) and using trigonometric identities, we get
ﬁve different frequency components: fc, (fc − f1), (fc − f2),
(fc + f1) and (fc + f2). To keep the signal wave beyond
frequency fc for inaudibility, we ﬁlter out (fc − f1) and (fc −
f2). The modulated signal is then sent via the speaker.
ys(t) = sin(2πfct)− 1
2
cos[2π(fc+f2)t].
(4)
After recording by the microphones, which means applying
(1) to (4), we will get f1, (f1 − f2) and f2, but also other
unwanted frequencies such as 2fc, 2(fc + f1), (2fc + f1), etc.
All these high frequencies are automatically ﬁltered out while
the recording is sent through the phone call channel with a
frequency upper bound of 3400 Hz. We only have f1, (f1−f2)
and f2 components remaining, with coefﬁcients 1, 1/2 and
1, respectively. However, in our experiments, we found that
only Amazon Echo Plus has signiﬁcant nonlinearity, which
was imperceptible in Google Home (called Nest Home now).
In Figure 4, we use a carrier frequency fc = 15 kHz. The
appearance of f1, (f1−f2) and f2 shows that the microphones
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:17 UTC from IEEE Xplore.  Restrictions apply. 
523
on Amazon Echo Plus do have nonlinearity. We exploit this for
decoding data from the audio that is recorded at the receiving
end of the phone channel.
V. METHODOLOGY
Based on our characterization of the data transmission
channel, we explore how an attacker who has control of a
computer can exﬁltrate data stored on it to a remote system
under its control. Since data is encoded in audio, the attacker
wants to achieve high accuracy even in the presence of some
noise and wants the transfer to complete as quickly as possible.
Although several techniques exist for encoding digital data
into audio, we focus on Dual-Tone Multi-Frequency Signaling
(DTMF) because the audio must be transmitted over a phone
channel. Also, to increase data transmission accuracy in the
presence of noise and packet loss, we need to use encoding
that could help correct certain class of errors. Finally, to make
the transfer stealthy, we modulate the audio that encodes data
using a very high frequency carrier so the audio transmission
from a computer speaker to the VA is less likely to be noticed
by humans. We utilize previously investigated techniques for
encoding data into audio, error handling and high-frequency
modulation to demonstrate the feasibility of a stealthy data
exﬁltration channel
to a remote host via a VA. We ﬁrst
introduce DTMF, which we use for transmitting voice encoded
data through a phone call channel, and explain how we choose
the DTMF frequency groups in our method to increase data
transfer rate. We then discuss modulation with a very high
frequency carrier in order to make the sound unnoticeable to
most humans.
A. Dual-Tone Multi-Frequency Signaling
DTMF was introduced in [2] over 50 years ago and is also
called “Touch Tone”. Since it is difﬁcult to protect single-
frequency tones from perturbation of speech and background
noise, DTMF uses a set of 16 dual-frequency tones, repre-
senting 10 decimal digits and other buttons on a phone. The
16 tones are formed by a so-called “four-by-four” code: each
tone is made up of one high frequency from high group and
one low frequency from low group as shown in Table I.
Since speech often involves lower harmonics,
in order to
distinguish DTMF tone frequencies from speech, Battista et
al. [2] carefully chose them to avoid frequencies in one
group harmonically relating to those in the other group. Also,
frequencies used in DTMF totally fall within the voiceband
range, 300 Hz to 3400 Hz, as we discussed in Section IV-A, to
conﬁne them to the transmission band of the telephony chan-
nel. DTMF is still widely used for customer services, remote
guest door controlling, etc. It is natural and reliable to leverage
DTMF for data transmission in our setting that includes a VA
making a phone call. To recover the frequencies used in a tone
on receiver side, we make use of the Goertzel algorithm. It is
an efﬁcient algorithm that can calculate the signal strength at
chosen frequencies, unlike fast Fourier transform (FFT), which
calculates all frequency components [28].
HIGH GROUP AND LOW GROUP OF TONE FREQUENCIES.
TABLE I
High Group (Hz)
Low Group (Hz)
1209
697
1336
770
1477
852
1633
941
Commonly used DTMF only makes use of 4 low fre-
quencies and 4 high frequencies, to form 16 tones. Adjacent
frequencies in each group have a ratio of 21/19. Although
these frequency groups are sufﬁcient to transmit 16 symbols
on a phone, more tones can increase data transfer rate. Another
problem we found is that background noise includes frequen-
cies that are close to the low frequencies shown in Table I. We
choose different DTMF frequencies to address both of these
problems. To increase the number of bits that can be sent in
a single tone, we use two expanded frequency groups with 8
frequencies in each group to form 64 tones. A straightforward
way to form these groups is to expand the original frequency
groups in Table I. However, since the high-frequency modula-
tion we plan to use produces an additional difference frequency
(f1 − f2), a simple expansion while maintaining the desired
ratio between consecutive frequencies will produce a lot of
collisions between the DTMF and difference frequencies. A
collision occurs when two frequencies are very close and the
energy level of one could exceed the other one due to noise and
frequency leakage. This will result in the Goertzel algorithm
returning an incorrect tone frequency since it chooses the two
frequencies in a tone that have the highest energy levels in
each group. For example, if we choose f1 = fA from Group A,
and f2 = fB from Group B, the resulting difference frequency
(f1− f2) will still be in the voiceband range and could collide
with one of the other DTMF frequencies.
We reduce the likelihood of collisions between tone and
difference frequencies by choosing tone frequencies f1 and
f2 as follows. We set f1 = fA + fB and f2 = fA, which
results in audio in a tone with frequencies (fA + fB) and fA.
This tone audio is modulated with a carrier and transmitted
via a speaker. The voice assistant microphone will reintroduce
frequencies (fA + fB), fA and difference frequency fB due
to its nonlinearity prior to transmission of this audio over the
phone channel. A positive side effect of this is that collisions
due to the additional higher frequency (fA + fB) in the
recording at the destination will be minimized because in most
cases, it will be outside of the voiceband and get ﬁltered out
by the phone channel which acts as a low pass ﬁlter. Based on
these insights, we decided to use two groups of frequencies
that satisfy the following constraints: (i) all frequencies are
within 300 Hz to 3400 Hz range, (ii) in each group, two
adjacent frequencies have a ratio of 21/19, and (iii) any two
frequencies chosen from the two groups, fA from one group
and fB from the other group, are separated by a threshold.
Also, their sum, (fA + fB), is also separated by that threshold
from any chosen frequencies. The smallest gap between any
pair of frequencies in the original DTMF groups is 73 Hz.
However, setting the threshold to 73 Hz, 72 Hz and 71 Hz
gives no results that satisfy the above constraints. When we
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:17 UTC from IEEE Xplore.  Restrictions apply. 
524
set the threshold to 70 Hz, we obtain the frequencies shown
in Table II that satisfy these constraints. These 16 frequencies
form the two groups that allow us to produce 8×8 = 64 tones,
and each tone can thus encode 6 bits.
)
B
d
(
l
e
v
e
L
-30
-40
-50
-60
-70
-80
-90
 50
Lab
Home
 100
 200
 400
 1000  2000  4000
Frequency (Hz)
Fig. 5. Noise Spectrum at Home and a Lab.
Although the new DTMF frequencies are a good ﬁt for
data exﬁltration in our channel, we show in Section V-C that
noise is the main source of errors when we transfer data with
DTMF tones. We recorded background noise sounds in typical
laboratory ofﬁce and home settings and the audio spectrums
are shown in Figure 5. We can see that in the lab, the noise
energy mostly distributes at lower frequencies below 600 Hz,
while at home, the noise tends to distribute more randomly
across the voiceband. Also, while high frequencies (above 500
Hz) tend to be very directional, lower frequencies can more
easily spread and reﬂect in a room, resulting in increased
low frequency noise in our recorded audios [29]. Based on
these observations, the lowest frequencies chosen by us can
avoid most of the interference coming from noise. Although
the ranges of the two groups have considerable overlap, this
does not inﬂuence our decoding for DTMF tones, since the
frequencies in the two groups are separated by at least 70 Hz,
and the two groups are detected separately by the Goertzel
algorithm. The two new frequency groups also satisfy the
criteria for avoiding harmonics lower than sixth as in [2].
Furthermore, it will avoid most collisions when we use high-
frequency modulation to the tone audio before transmitting it
over the computer speaker.
The groups of new DTMF frequencies are shown in Table II.
With expanded groups, we have 8 × 8 = 64 DTMF tones.
Thus, each tone can now represent 6 binary bits, increasing
the transfer bandwidth by 50% compared with the commonly
used DTMF tones.
TABLE II
EXPANDED DTMF FREQUENCIES.
Group A (Hz)
Group B (Hz)
1624
2420
1402
2091
1794
2674
1549
2311
1982
2955
1712
2554
2190
3266
1892
2822
B. Data to Audio Encoding/Decoding
We now describe the process that starts from a data ﬁle
that stores arbitrary data and outputs an audio ﬁle that can
be played through the computer speaker. Binary values can be
mapped to DTMF tone sequences in a straightforward manner.
The 64 DTMF tones allow us to represent 6 binary bits with
one tone. As discussed in Section IV, characteristics of the
data transfer channel used by VAs require the handling of
transmission errors that could arise due to noise or other fac-
tors like packet losses. As shown in Figure 6, we ﬁrst convert
the characters in a ﬁle we are sending to their corresponding
ASCII binary codes. Thus, one character can be represented
with 8 bits. For error correction, we ﬁrst use the Golay code
for encoding these bits before generating tones from them. The
choice of this code is motivated by our desire to correct certain
errors that can occur during transmission (see Section V-C).
Fig. 6. Encoding Process. One 24-bit Golay code word is represented by 4
DTMF tones.
C. Error Correction
In our experimental setting, there are two main sources
of errors: Noise and the unwanted frequencies introduced by
demodulation. We empirically studied how such errors arise
and found that the main reason is the background noise. In
Figure 7, the original tone consists of two frequencies, 1549
Hz and 3266 Hz. However in its recorded audio, a number of
new frequencies appear due to background noise. In particular,
the frequency 1402 Hz with higher energy level takes the place
of original 1549 Hz, resulting in a bit ﬂip in decoding. We did
ﬁnd that the rate of such errors can be reduced by using a lower
carrier frequency or by using longer tones, which is a tradeoff
between stealthiness and speed.
We also noticed that the impact of noise is such that errors
that lead to bit ﬂips are due to increased energy level of DTMF
frequencies in adjacent tones (an adjacent tone encodes a bit
string that differs in a single bit) caused by spectral leakage
after Fourier transform. This can be seen from Figure 7 where
we see that both in the transmitted and received audios, the
energy of each DTMF frequency is distributed around this
frequency. Thus, when the tone audio suffers additive noise,
there is a higher probability that
the adjacent frequencies
energy exceeds the energy level of the tone frequency. Since
decoding is based on energy levels of the tone frequencies,
this will lead to a bit ﬂip because an adjacent but incorrect
frequency is detected.
We employ mitigation methods for each source of error by
using an error correction code, Golay Code, which allows us
to correct a certain set of errors. We use a two dimensional
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:17 UTC from IEEE Xplore.  Restrictions apply. 
525
 0
-20
-40
-60
-80
-100
-120
)
B
d
(
l
e
v
e
L
1402 Hz
1549 Hz
3266 Hz
Original
Recorded
 1000  1500  2000  2500  3000  3500  4000
Frequency (Hz)
Fig. 7. Spectrum of Original Audio and Recorded Audio. We take a 0.05s
tone from our experiment when the distance is 50 inch and carrier frequency
is 18 kHz. Frequency 1549 Hz was decoded as 1402 Hz, due to frequency
leakage and noise.
GRAY CODE ENCODING FOR EACH DTMF GROUP
TABLE III
Group A (Hz)
Group B (Hz)
Gray Code
1624
1402
000
1794
1549
001
1982
1712
011
2190
1892
010
2420
2091
110
2674
2311
111
2955
2554
101
3266
2822
100
Gray code to encode data to DTMF frequencies. Gray code is
a well-known binary code in which codes for two successive
values differ only in one bit. We can form a two dimensional
matrix from two frequency groups of DTMF tones. Since each
tone T can have four different adjacent tones, each of which
has one frequency different from T , we can apply the idea
of Gray code to this matrix. First, with 8 frequencies in each
group, each frequency can be represented with a 3-bit Gray
code as shown in Table III. We can then combine two 3-
bit codes together, with the Group A frequency bits at left
and Group B frequency bits at right. This results in a DTMF
tone binary code matrix that satisﬁes the property that adjacent
tones differ only in one bit. For example, if we are sending
binary string B1 = 001010, corresponding DTMF tone T1 =
(1794, 1892) will be sent through the phone call channel. If
noise is added to the tone audio, adjacent tone frequencies
(cid:2)
1 =
could have higher energy levels. If the received tone is T
(1624, 1712), the decoding function will produce the binary
(cid:2)
string B
1 have only 2
bits difference when noise impacts both tone frequencies.
(cid:2)
1 = 000011. We can see that B1 and B
Errors can also arise due to the nonlinearity of voice
assistant microphones. The modulated signal will get naturally
demodulated before it goes to the phone channel. Because of
the voiceband range (300–3400 Hz) of the phone channel,
the high frequency components that are close to the carrier
frequency will be removed, which gives us the original signal.
In Section IV-C, we discover that the modulated sound will
generate f1, f2 and an unwanted frequency, (f1−f2). Since we