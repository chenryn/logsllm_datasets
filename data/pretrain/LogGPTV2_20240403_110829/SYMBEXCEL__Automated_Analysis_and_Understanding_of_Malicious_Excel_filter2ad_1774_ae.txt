### Table II: Distribution of Malware Families for Each Behavioral Cluster

| Cluster | IcedID | Qbot | TrickBot | Zloader | Other (O) | Generic (GEN) | Unlabeled (UL) |
|---------|--------|------|----------|---------|------------|---------------|-----------------|
| 1       | 32%    | 11%  | -        | 99%     | -          | -             | -               |
| 2       | -      | -    | -        | 58%     | -          | -             | -               |
| 3       | -      | -    | -        | 89%     | -          | -             | -               |
| 4       | -      | -    | -        | 29%     | -          | 1%            | -               |
| 5       | -      | -    | 5%       | -       | -          | -             | -               |
| 6       | -      | -    | 1%       | -       | -          | -             | -               |
| 7       | -      | -    | -        | -       | -          | 25%           | 18%             |
| 8       | -      | -    | 2%       | -       | -          | -             | -               |
| 9       | -      | -    | -        | -       | 16%        | 55%           | 11%             |

**Note:** O: Other, GEN: Generic, UL: Unlabeled.

### Analysis of Malware Family Distribution

The observed malicious behaviors in the XL4 macros do not always correlate with the secondary infection payload (i.e., the malware family). Therefore, we expect our clusters to loosely match the VirusTotal (VT) labels, and different families may share similar XL4 payloads.

#### Correlation Between Assigned Family Names and Behavioral Clusters

1. **Clusters Primarily Belonging to One Family:**
   - **Clusters 1, 2, and 3** are predominantly associated with the Zloader family. The complexity of the behavior in these clusters suggests that they were likely deployed exclusively by Zloader threat actors.

2. **Clusters Belonging to Multiple Families:**
   - **Clusters 5, 6, and 8** contain samples from different families. The simplicity of the observed behaviors in these clusters indicates that they could be used by multiple and diverse threat actors.

3. **Clusters with Mostly Unlabeled or Generically Labeled Samples:**
   - **Clusters 4, 7, and 9** primarily consist of unlabeled or generically labeled samples. Manual investigation revealed that many of these samples are labeled with generic names such as "kryptik" (in cluster 4) and "abracadabra" (in clusters 7 and 9).

### Variants in the Dataset

Our dataset includes samples submitted during 2013 and 2014, which trace back to different variants: Poppy, NetSnake, Laroux, and Yagnuul. Notably, NetSnake exhibits more advanced behavior than some of the newest samples, including extracting VBA script content from a hidden macro sheet column, writing a Cabinet (.cab) file, unpacking it, and gaining persistence by overriding registry keys.

### Malicious Behavior Study

This section provides an overview of the techniques malware authors use to infect target systems. Most samples in our dataset are droppers, which download and execute executable files or DLLs. Despite this common behavior, various techniques are employed to download and execute the secondary infection payload:

1. **Download Techniques:**
   - PowerShell scripts
   - ExtExport.exe from Internet Explorer
   - Visual Basic scripts executed using explorer.exe
   - JavaScript scripts executed using explorer.exe

2. **Execution Techniques:**
   - Via the explorer.exe binary
   - Using the WinAPI function ShellExecuteA
   - Invoking rundll32
   - Executing regsvr32

Additionally, some samples combine the download and execution steps using a custom configuration file for WsatConfig.exe, a tool typically used to manage transactions between distributed applications. This technique involves loading and executing a remotely hosted DLL, representing an example of DLL injection.

### Environmental Behaviors

Some samples exhibit different behaviors based on the execution environment:
- Detection of 32-bit or 64-bit architecture and execution of a corresponding payload.
- Use of backup strategies for downloading secondary infection payloads, such as trying multiple servers and methods if the initial connection fails.

SYMBEXCEL effectively captures these different behaviors by using multiple states to track different execution paths. In our dataset, 47% of structurally distinct samples show two or more behaviors, while 38% show three or more behaviors.

### IoC Study

Traditional Indicators of Compromise (IoCs) such as URLs, filenames, domain names, and IP addresses are crucial for security incident response and forensics. We extracted these IoCs from SYMBEXCEL and XLMMacroDeobfuscator.

#### Table III: Breakdown of IoCs Observed in Our Experiments

| Tool                     | URLs | Filenames | Domains | IPs  |
|--------------------------|------|-----------|---------|------|
| XLMMacroDeobfuscator     | 1,087 | 758       | 451     | 133  |
| SYMBEXCEL                | 1,806 | 3,231     | 635     | 215  |
| Total                    | 2,202 | 3,346     | 635     | 215  |

**Note:** There is no overlap between the domain names and IP addresses. VT intelligence API queries reveal that 403 out of 635 domains and 212 out of 215 IP addresses are reported as malicious by at least one antivirus engine.

### Discussion

#### Loader

The loader is a critical component of our system. While SYMBEXCEL uses both a static parser and a COM loader to handle Excel files, neither method is perfect. Malware authors continuously devise new ways to evade parsing logic, and even the COM functionality can be insufficient. This is a known problem in malware analysis, as highlighted by Nisi et al. [55] in their study of the Windows Portable Executable (PE) file format.

#### Formula Parsing

Correctly parsing XL4 formulas is essential for analyzing malicious documents. Although several attempts have been made to address this, a complete Excel 4.0 formula parser is still lacking. A more precise grammar, ideally matching the one implemented in Excel, is needed to handle complex Excel 4.0 malware.

#### VBA vs. Excel 4

In recent samples, malware authors have started distributing documents containing both Excel 4.0 macros and VBA code to hinder available tools. Initially, the VBA code was used as a "trampoline" to Excel formulas, but this behavior has evolved, requiring a VBA engine in SYMBEXCEL, such as ViperMonkey [38].

#### Microsoft Policy Change

Microsoft plans to disable Excel 4.0 Macros by default, though users can still enable this feature. This change applies only to Microsoft 365 customers and does not cover all Excel users. Despite this, malware authors continue to leverage Excel 4.0, as seen in campaigns like SquirrelWaffle, WIRTE, Dridex, and Emotet.

### Related Work

#### Malware Analysis

Both industry and academia have extensively studied malware, focusing on Windows, Android, Linux, and IoT devices. However, to the best of our knowledge, this is the first extensive study of Excel 4.0 malware.

#### Symbolic Execution

Symbolic execution is a powerful analysis technique applied to various problems, including malware analysis. Tools like angr, Symbion, and Rambo have been developed to analyze and unpack malware, track C&C communication, and bypass evasion techniques. Sebastio et al. [10], [64] transform symbolic execution traces into system call dependency graphs (SCDGs) for malware classification. Evasive behavior detection and analysis have also been widely studied, as demonstrated by Kirat et al. [35].