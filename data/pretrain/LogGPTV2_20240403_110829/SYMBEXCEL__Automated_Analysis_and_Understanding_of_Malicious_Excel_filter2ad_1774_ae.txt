1
2
3
4
5
6
7
8
9
IcedID
Qbot
·
·
·
·
·
·
·
·
32% 11%
·
3%
·
·
25% 27%
·
·
TrickBot
·
·
·
·
5%
1%
·
2%
·
Zloader
99%
58%
89%
29%
·
25%
·
·
·
O
UL
GEN
·
·
1%
·
25% 18%
·
·
11%
·
16% 55%
·
40% 11%
2% 57% 13%
2% 50% 48%
2% 32% 13%
·
68% 32%
TABLE II: Distribution of malware families for each behavioral
cluster. O: other, GEN: generic, UL: unlabeled.
malicious behaviors observed in the XL4 macro, this does not
always correlate with the observed secondary infection payload (i.e.,
the malware family). As a result, we expect our clusters to loosely
match with the VT labels, and we also expect different families to
share similar XL4 payloads.
Nonetheless, we still observe some correlation between the
assigned family names and the behavioral clusters presented in
Figure 7. We present our results in Table II and distinguish three
cases: clusters that belong primarily to one family, clusters that
belong to multiple families, and clusters where most samples are
unlabeled or have generic labels. In the first case, we observe that
clusters 1, 2, and 3 mostly belong to the Zloader family. Since the
samples in these clusters show a complex behavior, we speculate
that they were exclusively deployed by Zloader threat actors. In the
second case, we observe that clusters 5, 6, and 8 contain samples
from different families. We speculate that the simplicity of the
behavior observed in such samples justifies its use by multiple and
different threat actors. Finally, clusters 4, 7, and 9 mostly contain
unlabeled or generically labeled samples. We manually investigate
such samples and observe that many are labeled with the generic
labels kryptik (in cluster 4) and abracadabra (in clusters 7 and 9).
Other Variants. The previous discussion focused on the most recent
samples in our dataset, but, as shown in Figure 5, our dataset also
contains samples submitted during 2013 and 2014. We trace these
five structurally distinct samples back to different variants: Poppy,
NetSnake, Laroux, and Yagnuul. Interestingly enough, NetSnake
shows a more advanced behavior than some of the newest samples in
our dataset: it extracts from a hidden macro sheet column the content
of a VBA script, and executes such script. In turn, the VBA script
writes a Cabinet (.cab) file on disk, unpacks it, and gains persistence
by overriding several registry keys to point to the unpacked files.
E. Malicious Behavior Study
This section presents an overview of the different techniques that
malware authors use to infect the target system. In Section V-C and
Section V-D, we observe that the vast majority of the samples in
our datasets are droppers—i.e., a type of malware that downloads
and executes an executable file or a DLL [37]. Despite this shared
behavior, malware authors use different techniques to download
a secondary infection payload from remote hosts. In particular,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1076
the samples in our dataset either use: (1) powershell scripts, (2)
the ExtExport.exe executable from Internet Explorer, (3) a
Visual Basic script that is executed using explorer.exe, or (4)
a JavaScript script that is executed using explorer.exe.
On the other hand, the most common ways to start the
downloaded executable are: (1) via the explorer.exe binary,
(2) by calling the WinAPI function ShellExecuteA, (3) by invoking
rundll32, or (4) by executing regsvr32. Moreover, we noticed
a peculiar technique in some samples which combines both the
download and the execution in a single step, and utilizes a custom
configuration file for WsatConfig.exe, a tool normally used
to manage transactions between distributed applications [46]. In
this configuration file, the malware authors include a reference
to a remotely hosted DLL, which is loaded and executed when
WsatConfig.exe starts. This technique is particularly interest-
ing since it is significantly different from most observed malicious
behaviors, and represents an example of DLL injection [31].
During our analysis, we found that some samples reveal different
behaviors when executed in different environments. For example,
some samples detect whether the architecture is 32-bit or 64-bit, and
execute a different payload accordingly. Other samples use a backup
strategy when downloading a secondary infection payload: when
the connection to a remote server fails, the sample tries to connect to
other servers, one after the other, and sometimes even using different
methods (e.g., WinAPI, VBScript, JavaScript). Since SYMBEXCEL
uses multiple states to keep track of different execution paths, it can
effectively capture all of these different behaviors. In our dataset,
we observe that samples with multiple behaviors are common: 47%
of the structurally distinct samples show two or more behaviors,
while 38% show three or more behaviors.
F. IoC Study
While security-relevant formulas can suggest malicious behavior,
IoCs are the de-facto standard when responding to security incidents
or conducting forensics investigations. For this reason, in this section,
we focus on traditional IoCs—i.e., URLs, filenames, domain
names, and IP addresses. Our knowledge and control over the SRFs
logging format make it straightforward to extract such IoCs from
SYMBEXCEL. Similarly, in the case of XLMMacroDeobufuscator,
we extract these IoCs by analyzing its execution logs.
The result of this process is presented in Table III. The number
of URLs extracted from the output of XLMMacroDeobufuscator
and SYMBEXCEL is, respectively, 1,087 and 1,806. We also extract,
respectively, 758 and 3,231 filenames, and the most common file
extensions are .vbs, .txt, .html, .reg, and .exe.
We observe that XLMMacroDeobufuscator appears to extracts
some IoCs that are not extracted by SYMBEXCEL. The only source
of difference between the two tools is their different concretization
strategy for timestamps and random numbers. For instance, while
SYMBEXCEL uses a fixed value when concretizing a timestamp,
XLMMacroDeobufuscator always uses the current timestamp,
resulting in different IoC values over time. Considering this
difference, we confirmed that SYMBEXCEL’s IoCs are a super-set
of the IoCs extracted by XLMMacroDeobfuscator.
Finally, we further break down the observed URLs by extracting
the unique domain names (451 and 635, respectively) and the unique
Tool
XLMMacroDeobufuscator
SYMBEXCEL
Total
URLs
1,087
1,806
2,202
Filenames Domains
758
3,231
3,346
451
635
635
IPs
133
215
215
TABLE III: Breakdown of the IoCs observed in our experiments.
IP addresses (133 and 215, respectively). After resolving the domain
names using historical DNS records from VT, we found that there is
no overlap between the domain names and the IPs. We also query the
VT intelligence API to verify the reputation of the extracted domains
and IP addresses. The results of these queries reveal that 403 out
of 635 domains and 212 out of the 215 observed IPs are reported as
malicious by at least one antivirus engine. The median detection rate
of the public samples is 28 out of 75 engines. However, the median
detection rate for the domains and IPs extracted from such samples
is 2 out of 90 engines and 5 out of 90 engines, respectively. This
result suggests that antivirus engines aggressively label XL4 samples
as malicious, but do not properly extract and label the relevant IoCs.
To analyze the remaining 232 domains that are classified as benign
by VT, we use a combination of two services: urlhaus [2] and
AlienVault OTX [6]. The first service flags 141 of such domains
as malicious, and the second reports that 39 domains are blocked
by Akamai, 22 are not resolved, 12 are automatically generated
(DGA), five are generic malicious domains, two are whitelisted,
and one is sinkholed. We speculate that the remaining ten domains
could be legitimage websites that were likely compromised.
VI. DISCUSSION
Loader. The loader represents a crucial component of our system.
Although SYMBEXCEL uses two different strategies—i.e., the
static parser and the COM loader—to load Excel files, neither of
them is perfect. As discussed in Section V-B, malware authors are
continuously devising new ways to break the parsing logic, and
sometimes even using the COM functionality is not enough to
handle these evasion techniques. This is a known problem in the
malware analysis world, and it is not limited to Excel malware.
For instance, Nisi et al. [55] recently described the intricacies of
the Windows Portable Executable file format, with a focus on the
PE loader. The authors found evidence that malware samples can
bypass analysis tools by leveraging discrepancies between a tool’s
loader and the Windows loader, which clearly mimics the evasion
techniques we highlighted in this paper. The authors also argue that
a de facto reference implementation of a loader does not exist, and
how different versions of the Windows loader behave in different
ways when dealing with the same binary file.
Formula Parsing. Being able to parse the XL4 formulas correctly
is crucial to analyze these malicious documents. This process could
seem straightforward at first, but the syntactical features of Excel
formulas are quite complex. To date, although several attempts have
been made to solve this problem [4], [5], [8], we still lack a complete
Excel 4.0 formula parser. These attempts have been tailored to
benign formulas, but, as discussed in Section V-B, malware authors
were able to find limitations in the manually reproduced grammar
that we use in SYMBEXCEL. A more precise grammar—ideally,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1077
a grammar that matches completely the one implemented in
Excel—is therefore needed to handle complex Excel 4.0 malware.
VBA vs. Excel 4. In the latest batches of samples that we analyzed
during this research, we noticed that malware authors have started
distributing documents containing both Excel 4.0 macros and VBA
code in a clear attempt to hinder available tools. The first samples
were quite straightforward to analyze and support in SYMBEXCEL,
since the VBA code was only used as a “trampoline” to Excel
formulas. Unfortunately, this behavior quickly evolved, and the
malicious payload started to be laid out over both representations.
In particular, we manually analyzed samples where the control flow
jumps back-and-forth from Excel 4.0 formulas to VBA procedures.
Supporting these samples would require including a VBA engine
in SYMBEXCEL, such as ViperMonkey [38].
Microsoft Policy Change. Microsoft has taken note from the
security advisories related to this threat ecosystem and has recently
announced that it plans to disable Excel 4.0 Macros by default,
although users can still decide to enable this feature. While this
change certainly represents a move in the right direction, it is only
limited to Microsoft 365 customers and does not apply to all Excel
users. Moreover, despite this announcement, malware authors are
still leveraging Excel 4.0 to infect users and systems, as seen in
several samples found in the wild related to the SquirrelWaffle
campaign [13] (October 2021), to the WIRTE campaign [73]
(November 2021), to the Dridex malware family [54] (December
2021), and to Emotet [75], [76] (January 2022).
VII. RELATED WORK
Malware Analysis. In the past few decades, in a joint effort, both
industry and academia have extensively studied malware and the
surrounding ecosystems. The main focus of this research has been
targeted towards malware affecting Microsoft Windows, from
studying the behavior of such malware [11], [36], [40], [62], to
packing mechanisms [3], [19], [30], [42] and detection of ongoing
threats [17], [20], [61], [74]. Moreover, mobile platforms, such as
Android, were also studied in the context of malware analysis [16],
[60], [71]. Finally, the focus has more recently been targeted at
Linux [18], [22] and IoT devices [12], [23], [69], [70], since they
became a target for malicious actors. Despite the amount of research
on this topic, to the best of our knowledge, we are the first to
extensively study Excel 4.0 malware.
Symbolic Execution. Symbolic execution is a powerful analysis
technique, and it has been applied to a variety of problems: from
automatically revealing the security impact of fuzzer-generated
crashes in the Linux kernel [77], to finding vulnerabilities in
embedded devices [25] and vetting USB device firmware [29].
In recent years, symbolic execution has also been used in the
context of malware analysis [14], [15]. For example, Baldoni
et al. [9] developed a tool based on angr [65] to automatically
analyze a remote access trojan (RAT) and extract its Command
and Control (C&C) communication protocol. In a similar vein,
Gritti et al. [27] proposed Symbion, a tool based on interleaved
execution that is able to study specific malware behaviors. The idea
behind interleaved execution is to concretely execute a malware
sample until the target behavior is reached, and only then switch the
analysis to symbolic reasoning. This approach, amongst other things,
allows Symbion to track the routines responsible for the generation
of C&C domains, and to bypass malware evasion techniques.
Symbolic execution has also been applied to the problem of
automatically unpacking malware binaries. Ugarte-Pedrero et
al. [68] presented Rambo, a tool based on multi-path exploration
that can be used to unpack shifting-decode-frames packers— i.e.,
a strategy where a piece of code is unpacked on-demand. Similarly,
others [15], [21], [24] have researched the problem of identifying
dormant malicious behavior. In particular, Comparetti et al. [21]
records specific behaviors observed while dynamically executing a
malware sample to identify similar functionality in other programs.
Furthermore, Alrawi et al. [7] presented Forecast, a tool that
combines memory forensics of an infected system with symbolic
execution, to predict future malware behaviors.
Sebastio et al. [10], [64] transform symbolic execution traces into
a system call dependency graph (SCDG), which summarizes the
behavior of the software under analysis, and then uses supervised ma-
chine learning to classify the sample into a specific malware family.
The detection and analysis of evasive behavior in malware has
been vastly studied [32], [33], [35]. In particular, Kirat et al. [35]