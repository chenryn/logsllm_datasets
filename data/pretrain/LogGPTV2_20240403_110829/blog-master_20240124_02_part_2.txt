需要注意的是：尽管是动态分配，尽量维护 buffer 的亲和性；另外，每个算子的上下文存储在 worker 的私有内存中，Coordinator 不存储具体表的信息；  
下面表格中，当出现大对象时，静态切分出现数据倾斜，而动态扫描仍然能够线性提升。  
![pic](20240124_02_pic_019.png)   
4\.3、Parallel DML / Parallel CREATE INDEX  
4\.3\.1、Parallel DML  
基于 PolarDB 读写分离架构和 HTAP serverless 弹性扩展的设计， PolarDB Parallel DML 支持一写多读、多写多读两种特性。  
- 一写多读：在 RO 节点上有多个读 Worker，在 RW 节点上只有一个写 Worker；  
- 多写多读：在 RO 节点上有多个读 Worker，在 RW 节点上也有多个写 Worker。多写多读场景下，读写的并发度完全解耦。  
不同的特性适用不同的场景，用户可以根据自己的业务特点来选择不同的 PDML 功能特性。  
4\.3\.2、Parallel CREATE INDEX (分布式执行加速索引创建)   
OLTP 业务中会建大量的索引，经分析建索引过程中：80%是在排序和构建索引页，20%在写索引页。通过使用分布式并行来加速排序过程，同时流水化批量写入。  
![pic](20240124_02_pic_020.png)   
上述优化能够使得创建索引有 4~5 倍的提升。  
![pic](20240124_02_pic_021.png)   
4\.4、使用说明  
PolarDB HTAP 适用于日常业务中的 轻分析类业务，例如：对账业务，报表业务。  
4\.4\.1、使用 MPP 进行分析型查询  
PolarDB PG 引擎默认不开启 MPP 功能。若您需要使用此功能，请使用如下参数：  
- `polar_enable_px`：指定是否开启 MPP 功能。默认为 `OFF`，即不开启。  
- `polar_px_max_workers_number`：设置单个节点上的最大 MPP Worker 进程数，默认为 `30`。该参数限制了单个节点上的最大并行度，节点上所有会话的 MPP workers 进程数不能超过该参数大小。  
- `polar_px_dop_per_node`：设置当前会话并行查询的并行度，默认为 `1`，推荐值为当前 CPU 总核数。若设置该参数为 `N`，则一个会话在每个节点上将会启用 `N` 个 MPP Worker 进程，用于处理当前的 MPP 逻辑  
- `polar_px_nodes`：指定参与 MPP 的只读节点。默认为空，表示所有只读节点都参与。可配置为指定节点参与 MPP，以逗号分隔  
- `px_worker`：指定 MPP 是否对特定表生效。默认不生效。MPP 功能比较消耗集群计算节点的资源，因此只有对设置了 `px_workers` 的表才使用该功能。例如：  
    - `ALTER TABLE t1 SET(px_workers=1)` 表示 t1 表允许 MPP  
    - `ALTER TABLE t1 SET(px_workers=-1)` 表示 t1 表禁止 MPP  
    - `ALTER TABLE t1 SET(px_workers=0)` 表示 t1 表忽略 MPP（默认状态）  
本示例以简单的单表查询操作，来描述 MPP 的功能是否有效。  
```  
-- 创建 test 表并插入基础数据。  
CREATE TABLE test(id int);  
INSERT INTO test SELECT generate_series(1,1000000);  
-- 默认情况下 MPP 功能不开启，单表查询执行计划为 PG 原生的 Seq Scan  
EXPLAIN SELECT * FROM test;  
                       QUERY PLAN  
--------------------------------------------------------  
 Seq Scan on test  (cost=0.00..35.50 rows=2550 width=4)  
(1 row)  
```  
开启并使用 MPP 功能：  
```  
-- 对 test 表启用 MPP 功能  
ALTER TABLE test SET (px_workers=1);  
-- 开启 MPP 功能  
SET polar_enable_px = on;  
EXPLAIN SELECT * FROM test;  
                                  QUERY PLAN  
-------------------------------------------------------------------------------  
 PX Coordinator 2:1  (slice1; segments: 2)  (cost=0.00..431.00 rows=1 width=4)  
   ->  Seq Scan on test (scan partial)  (cost=0.00..431.00 rows=1 width=4)  
 Optimizer: PolarDB PX Optimizer  
(3 rows)  
```  
配置参与 MPP 的计算节点范围：  
```  
-- 查询当前所有只读节点的名称  
CREATE EXTENSION polar_monitor;  
SELECT name,host,port FROM polar_cluster_info WHERE px_node='t';  
 name  |   host    | port  
-------+-----------+------  
 node1 | 127.0.0.1 | 5433  
 node2 | 127.0.0.1 | 5434  
(2 rows)  
-- 当前集群有 2 个只读节点，名称分别为：node1，node2  
-- 指定 node1 只读节点参与 MPP  
SET polar_px_nodes = 'node1';  
-- 查询参与并行查询的节点  
SHOW polar_px_nodes;  
 polar_px_nodes  
----------------  
 node1  
(1 row)  
EXPLAIN SELECT * FROM test;  
                                  QUERY PLAN  
-------------------------------------------------------------------------------  
 PX Coordinator 1:1  (slice1; segments: 1)  (cost=0.00..431.00 rows=1 width=4)  
   ->  Partial Seq Scan on test  (cost=0.00..431.00 rows=1 width=4)  
 Optimizer: PolarDB PX Optimizer  
(3 rows)  
```  
4\.4\.2、使用 MPP 进行分区表查询  
- 当前 MPP 对分区表支持的功能如下所示：  
- 支持 Range 分区的并行查询  
- 支持 List 分区的并行查询  
- 支持单列 Hash 分区的并行查询  
- 支持分区裁剪  
- 支持带有索引的分区表并行查询  
- 支持分区表连接查询  
- 支持多级分区的并行查询  
```  
--分区表 MPP 功能默认关闭，需要先开启 MPP 功能  
SET polar_enable_px = ON;  
-- 执行以下语句，开启分区表 MPP 功能  
SET polar_px_enable_partition = true;  
-- 执行以下语句，开启多级分区表 MPP 功能  
SET polar_px_optimizer_multilevel_partitioning = true;  
```  
4\.4\.3、使用 MPP 加速索引创建  
当前仅支持对 B-Tree 索引的构建，且暂不支持 `INCLUDE` 等索引构建语法，暂不支持表达式等索引列类型。  
如果需要使用 MPP 功能加速创建索引，请使用如下参数：  
- `polar_px_dop_per_node`：指定通过 MPP 加速构建索引的并行度。默认为 `1`。  
- `polar_px_enable_replay_wait`：当使用 MPP 加速索引构建时，当前会话内无需手动开启该参数，该参数将自动生效，以保证最近更新的数据表项可以被创建到索引中，保证索引表的完整性。索引创建完成后，该参数将会被重置为数据库默认值。  
- `polar_px_enable_btbuild`：是否开启使用 MPP 加速创建索引。取值为 `OFF` 时不开启（默认），取值为 `ON` 时开启。  
- `polar_bt_write_page_buffer_size`：指定索引构建过程中的写 `I/O` 策略。该参数默认值为 `0`（不开启），单位为块，最大值可设置为 `8192`。推荐设置为 `4096`。  
    - 当该参数设置为不开启时，在索引创建的过程中，对于索引页写满后的写盘方式是 block-by-block 的单个块写盘。  
    - 当该参数设置为开启时，内核中将缓存一个 `polar_bt_write_page_buffer_size` 大小的 buffer，对于需要写盘的索引页，会通过该 buffer 进行 `I/O` 合并再统一写盘，避免了频繁调度 `I/O` 带来的性能开销。该参数会额外提升 20% 的索引创建性能。  
```  
-- 开启使用 MPP 加速创建索引功能。  
SET polar_px_enable_btbuild = on;  
-- 使用如下语法创建索引  
CREATE INDEX t ON test(id) WITH(px_build = ON);  
-- 查询表结构  
\d test  
               Table "public.test"  
 Column |  Type   | Collation | Nullable | Default  
--------+---------+-----------+----------+---------  
 id     | integer |           |          |  
 id2    | integer |           |          |  
Indexes:  
    "t" btree (id) WITH (px_build=finish)  
```  
4\.5、TPC-H 性能：加速比  
![pic](20240124_02_pic_022.png)   
我们使用 1TB 的 TPC-H 进行了测试，首先对比了 PolarDB 新的分布式并行和单机并行的性能：有 3 个 SQL 提速 60 倍，19 个 SQL 提速 10 倍以上；  
![pic](20240124_02_pic_023.png)   
![pic](20240124_02_pic_024.png)   
另外，使用分布式执行引擎测，试增加 CPU 时的性能，可以看到，从 16 核和 128 核时性能线性提升；单看 22 条 SQL，通过该增加 CPU，每个条 SQL 性能线性提升。  
4\.6、TPC-H 性能：和传统 MPP 数据库的对比  
与传统 MPP 数据库相比，同样使用 16 个节点，PolarDB 的性能是传统 MPP 数据库的 90%。  
![pic](20240124_02_pic_025.png)   
![pic](20240124_02_pic_026.png)   
前面讲到我们给 PolarDB 的分布式引擎做到了弹性扩展，数据不需要充分重分布，当 dop = 8 时，性能是传统 MPP 数据库的 5.6 倍。  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 开源数据库](https://openpolardb.com/home "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's Github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")