User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
Windows_AD数据，编写查询语句实现如下分析场景当天新建且删除的帐户

## SPL 语句
starttime="now/d" appname:windows   json.event_id:4720 NOT (json.username:*$ OR json.username:SYSTEM)
|eval time1=formatdate(timestamp,"MM-dd HH:mm")
|join json.username [[
	starttime="now/d"  appname:windows   json.event_id:4726 NOT (json.username:*$ OR json.username:SYSTEM)
	|eval time2=formatdate(timestamp,"MM-dd HH:mm")
]]
|eval desc="用户"+json.username+"在"+time1+"创建后，又在"+time2+"删除，属于异常行为"

## 具体解释

Assistant: 为了满足分析需求，即查询当天新建且删除的帐户，我们逐步分析提供的 SPL（Search Processing Language）语句。

### 分析需求

需求是查询Windows活动目录（Windows_AD数据）中，当天新建且删除的帐户。这通常涉及到两个事件：创建帐户的事件和删除帐户的事件。这两个事件通常会有不同的日志事件ID，比如创建帐户的事件ID可能是4720，而删除帐户的事件ID可能是4726。

### SPL 语句分析

1. **起始部分**


```spl
starttime="now/d" appname:windows   json.event_id:4720 NOT (json.username:*$ OR json.username:SYSTEM)
```
这部分的查询过滤条件如下：


	* `starttime="now/d"`：限制时间范围为当天。
	* `appname:windows`：仅考虑Windows应用程序的日志。
	* `json.event_id:4720`：仅考虑事件ID为4720的日志条目，这通常是与帐户创建相关的事件。
	* `NOT (json.username:*$ OR json.username:SYSTEM)`：排除那些用户名包含“*$”（可能表示特殊或模板帐户）或系统帐户（如“SYSTEM”）的条目。
2. **时间格式化**


```spl
|eval time1=formatdate(timestamp,"MM-dd HH:mm")
```
这里使用 `eval` 命令来格式化时间戳，将其转换为“MM-dd HH:mm”的格式，便于后续的显示和比较。
3. **联接部分**


```spl
|join json.username [[
    starttime="now/d"  appname:windows   json.event_id:4726 NOT (json.username:*$ OR json.username:SYSTEM)
    |eval time2=formatdate(timestamp,"MM-dd HH:mm")
]]
```
这部分使用 `join` 命令来联接两个数据流。一个数据流是创建帐户的事件（事件ID 4720），另一个数据流是删除帐户的事件（事件ID 4726）。联接的条件是用户名相同。同时，对删除帐户的事件也进行了时间戳的格式化。
4. **描述生成**


```spl
|eval desc="用户"+json.username+"在"+time1+"创建后，又在"+time2+"删除，属于异常行为"
```
最后，使用 `eval` 命令来生成一个描述字段，该字段包含了用户名、创建时间和删除时间，并标记这是一个异常行为。

### 总结

整个SPL语句的逻辑是：首先找到当天创建帐户的事件（事件ID 4720，且用户名不是特殊或系统帐户），然后联接找到当天删除同一帐户的事件（事件ID 4726），最后生成一个描述字段，记录这个新建且删除的异常行为。这样可以有效地找出当天新建且删除的帐户，满足分析需求。