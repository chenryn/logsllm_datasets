if found then  
return next 'sar_swap: ';  
return query select s1.ip||', '||s1.info from server s1 left outer join  
(select * from (select server_id,row_number() over (partition by server_id order by s_date desc) from sar_swap where s_date=current_date-1) t1   
where row_number=1) t2 on (s1.id=t2.server_id) where t2.server_id is null;  
end if;  
return;  
end  
$BODY$ language plpgsql;  
```  
sar信息存放表 :   
```  
create table sar_io  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
tps numeric,  
rtps numeric,  
wtps numeric,  
bread_p_s numeric,  
bwrtn_p_s numeric,  
unique(server_id,s_date,s_time));  
create table sar_page  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
pgpgin_p_s numeric,  
pgpgout_p_s numeric,  
fault_p_s numeric,  
majflt_p_s numeric,  
unique(server_id,s_date,s_time));  
create table sar_proc  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
proc_p_s numeric,  
unique(server_id,s_date,s_time));  
create table sar_load  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
runq_sz numeric,  
plist_sz numeric,  
ldavg_1 numeric,  
ldavg_5 numeric,  
ldavg_15 numeric,  
unique(server_id,s_date,s_time));  
create table sar_mem_swap  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
kbmemfree numeric,  
kbmemused numeric,  
percnt_memused numeric,  
kbbuffers numeric,  
kbcached numeric,  
kbswpfree numeric,  
kbswpused numeric,  
percnt_swpused numeric,  
kbswpcad numeric,  
unique(server_id,s_date,s_time));  
create table sar_mem  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
frmpg_p_s numeric,  
bufpg_p_s numeric,  
campg_p_s numeric,  
unique(server_id,s_date,s_time));  
create table sar_cpu  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
percnt_user numeric,  
percnt_nice numeric,  
percnt_system numeric,  
percnt_iowait numeric,  
percnt_steal numeric,  
percnt_idle numeric,  
unique(server_id,s_date,s_time));  
create table sar_inode  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
dentunusd numeric,  
file_sz numeric,  
inode_sz numeric,  
super_sz numeric,  
percnt_super_sz numeric,  
dquot_sz numeric,  
percnt_dquot_sz numeric,  
rtsig_sz numeric,  
percnt_rtsig_sz numeric,  
unique(server_id,s_date,s_time));  
create table sar_context  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
cswch_p_s numeric,  
unique(server_id,s_date,s_time));  
create table sar_swap  
(server_id int not null,  
s_date date not null,  
s_time time not null,  
pswpin_p_s numeric,  
pswpout_p_s numeric,  
unique(server_id,s_date,s_time));  
```  
## 三、在需要收集sar报告的操作系统中配置如下程序用来收集sar信息 :   
收集用到了PostgreSQL的psql程序, 所以需要在系统中安装PostgreSQL客户端. 安装过程略.  
假设PostgreSQL数据库的连接信息如下, IP 10.10.10.1 , Port 1931 , DBNAME sar , USER sar , PASSWORD DIGOAL  
配置 ~/.pgpass文件  
```  
10.10.10.1:1931:sar:sar:DIGOAL  
chmod 400 ~/.pgpass  
```  
编写sar_collect.sh脚本, 用于收集昨天的SAR报告  
```  
vi /home/postgres/sar_collect.sh  
#!/bin/bash  
# 环境变量, 数据库连接, 避免风暴随机等待60秒内  
. /home/postgres/.bash_profile  
DB_URL="-h 10.10.10.1 -p 1931 -U sar -d sar"  
sleep $(($RANDOM%60))  
NET_DEV="`/sbin/route -n|grep UG|awk '{print $8}'|head -n 1`"  
IP_ADDR="'`/sbin/ip addr show $NET_DEV|grep inet|grep "global $NET_DEV$"|awk '{print $2}'`'"  
SAR_FILE="/var/log/sa/sa`date -d -1day +%d`"  
SAR_DATE="'`date -d -1day +%Y-%m-%d`'"  
SERVER_ID="`psql -A -t $DB_URL -c "select * from get_server_id($IP_ADDR)"`"  
# sar -b, sar_io tps      rtps      wtps   bread/s   bwrtn/s  
SQL=`sar -b -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_io(server_id, s_date, s_time, tps, rtps, wtps, bread_p_s, bwrtn_p_s) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3",",$4",",$5",",$6",",$7");"}'`  
psql $DB_URL -c "$SQL"  
# sar -B, sar_page pgpgin/s pgpgout/s   fault/s  majflt/s  
SQL=`sar -B -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_page(server_id, s_date, s_time, pgpgin_p_s, pgpgout_p_s, fault_p_s, majflt_p_s) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3",",$4",",$5",",$6");"}'`  
psql $DB_URL -c "$SQL"  
# sar -c, sar_proc proc/s  
SQL=`sar -c -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_proc(server_id, s_date, s_time, proc_p_s) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3");"}'`  
psql $DB_URL -c "$SQL"  
# sar -q, sar_load runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15  
SQL=`sar -q -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_load(server_id, s_date, s_time, runq_sz, plist_sz, ldavg_1, ldavg_5, ldavg_15) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3",",$4",",$5",",$6",",$7");"}'`  
psql $DB_URL -c "$SQL"  
# sar -r, sar_mem_swap kbmemfree kbmemused  %memused kbbuffers  kbcached kbswpfree kbswpused  %swpused  kbswpcad  
SQL=`sar -r -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_mem_swap(server_id, s_date, s_time, kbmemfree, kbmemused, percnt_memused, kbbuffers, kbcached, kbswpfree, kbswpused, percnt_swpused, kbswpcad) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3",",$4",",$5",",$6",",$7",",$8",",$9",",$10",",$11");"}'`  
psql $DB_URL -c "$SQL"  
# sar -R, sar_mem frmpg/s   bufpg/s   campg/s  
SQL=`sar -R -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_mem(server_id, s_date, s_time, frmpg_p_s, bufpg_p_s, campg_p_s) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3",",$4",",$5");"}'`  
psql $DB_URL -c "$SQL"  
# sar -u, sar_cpu %user     %nice   %system   %iowait    %steal     %idle  
SQL=`sar -u -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_cpu(server_id, s_date, s_time, percnt_user, percnt_nice, percnt_system, percnt_iowait, percnt_steal, percnt_idle) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$4",",$5",",$6",",$7",",$8",",$9");"}'`  
psql $DB_URL -c "$SQL"  
# sar -v, sar_inode dentunusd   file-sz  inode-sz  super-sz %super-sz  dquot-sz %dquot-sz  rtsig-sz %rtsig-sz  
SQL=`sar -v -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_inode(server_id, s_date, s_time, dentunusd, file_sz, inode_sz, super_sz, percnt_super_sz, dquot_sz, percnt_dquot_sz, rtsig_sz, percnt_rtsig_sz) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3",",$4",",$5",",$6",",$7",",$8",",$9",",$10",",$11");"}'`  
psql $DB_URL -c "$SQL"  
# sar -w, sar_context cswch/s  
SQL=`sar -w -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_context(server_id, s_date, s_time, cswch_p_s) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3");"}'`  
psql $DB_URL -c "$SQL"  
# sar -W, sar_swap pswpin/s pswpout/s  
SQL=`sar -W -f $SAR_FILE|grep -E 'AM[ ]+([0-9]+|\.+|all|-)|PM[ ]+([0-9]+|\.+|all|-)'|awk '{print "insert into sar_swap(server_id, s_date, s_time, pswpin_p_s, pswpout_p_s) values('$SERVER_ID', '$SAR_DATE',","\47"$1$2"\47,",$3",",$4");"}'`  
psql $DB_URL -c "$SQL"  
# Author : Digoal.Zhou  
# THE END  
```  
修改权限 :   
```  
chmod 500 sar_collect.sh  
```  
新建执行计划,   
```  
crontab -e  
1 2 * * * /home/postgres/sar_collect.sh  
```  
## 四、然后看看几条简单的报告SQL, 使用row_number窗口函数  :   
```  
# 昨天15分钟最大负载排名前10,后一条为平均值排行  
# 负载过高需要关注这些服务器上运行的数据库和业务是否健康, 例如是否需要建索引, 是否需要使用绑定变量等.  
select get_ip(server_id),* from (select *,row_number() over (partition by server_id order by ldavg_15 desc) from sar_load where s_date=current_date-1) t where row_number=1 order by ldavg_15 desc limit 10;  
select get_info(server_id),get_ip(server_id),round(avg(ldavg_15),2) ldavg_15 from sar_load where s_date=current_date-1 group by server_id,s_date order by ldavg_15 desc limit 10;  
# 昨天最大读请求数排名前10,后一条为平均值排行  
# 读请求过高需要关注这些服务器上运行的数据库和业务是否健康, 例如是否需要建索引, 是否需要加内存, 是否需要对存储性能扩容等.   
select get_ip(server_id),* from (select *,row_number() over (partition by server_id order by rtps desc) from sar_io where s_date=current_date-1) t where row_number=1 order by rtps desc limit 10;  
select get_info(server_id),get_ip(server_id),round(avg(rtps),2) rtps from sar_io where s_date=current_date-1 group by server_id,s_date order by rtps desc limit 10;  
# 昨天最大写请求数排名前10,后一条为平均值排行  
# 写请求过高需要关注这些服务器上运行的数据库和业务是否健康, 例如是否需要减少索引, 是否需要使用异步IO, 是否需要对存储性能进行扩容等.   
select get_ip(server_id),* from (select *,row_number() over (partition by server_id order by wtps desc) from sar_io where s_date=current_date-1) t where row_number=1 order by wtps desc limit 10;  
select get_info(server_id),get_ip(server_id),round(avg(wtps),2) wtps from sar_io where s_date=current_date-1 group by server_id,s_date order by wtps desc limit 10;  
# 昨天最大iowait排名前10,后一条为平均值排行  
# iowait过高需要关注这些服务器上运行的数据库和业务是否健康, 例如是否需要加内存, 是否需要将常用数据放入内存, 是否需要对存储性能进行扩容等.  