S. Ortolani, C. Giuﬀrida, and B. Crispo
Table 1. Detection results for the keyloggers used in the evaluation. PCC’s threshold
set to 0.80.
Keylogger
Refog Keylogger Free 5.4.1
Best Free Keylogger (BFK) 1.1
Iwantsoft Free Keylogger 3.0
Actual Keylogger 2.3
Revealer Keylogger Free 1.4
Virtuoza Free Keylogger 2.0
Quick Keylogger 3.0.031
Tesline KidLogger 1.4
Detection
Notes
uses focus-based buﬀering
uses focus-based buﬀering
uses focus-based buﬀering
uses time-based buﬀering
unable to test it properly
unable to test it properly
N/A
N/A
tune parameters and threshold in the general case are given in Sec. 4.2 and
Sec. 4.3. Table 1 shows the keyloggers used in the evaluation and summarizes
the detection results. All the keyloggers were detected without generating any
false positives. For the last two keyloggers in the list, we were not able to pro-
vide any detection result since no consistent log ﬁle was ever generated in the
two cases even after repeated experiments1. In every other case, our detection
system was able to detect the keylogger correctly within a few seconds.
Virtuoza Free Keylogger required a longer window of observation to be de-
tected. The Virtuoza Free Keylogger was indeed the only keylogger to use some
form of aggressive buﬀering, with keystrokes stored in memory and ﬂushed out
to disk at regular time intervals. Nevertheless, we were still able to collect con-
sistent samples from buﬀer ﬂush events and report high values of PCC with the
normalized version of the input pattern.
In a few other cases, keystrokes were kept in memory but ﬂushed out to disk
as soon as the keylogger detected a change of focus. This was the case for Actual
Keylogger, Revealer Keylogger Free, and Refog Keylogger Free. To deal with this
common buﬀering strategy eﬃciently, our detection system enforces a change of
focus every time a sample is injected into the system. Other buﬀering strategies
and possible evasion techniques are discussed in detail in Sec. 5.
Furthermore, some of the keyloggers examined included support for encryp-
tion and most of them used variable-length encoding to store special keys. As
Sec. 4.2 demonstrates with experimental results, our algorithm can deal with
these nuisances transparently with no eﬀect on the resulting PCC measured.
Another potential issue arises from most keyloggers dumping a ﬁxed-format
header on the disk every time a change of focus is detected. The header typically
contains the date and the name of the target application. Nonetheless, as we
designed our detection system to change focus at every sample, the header is
ﬂushed out to disk at each time interval along with all the keystrokes injected.
As a result, the output pattern monitored is simply a location transformation
of the original, with a shift given by size of the header itself. Thanks to the
location invariance property, our detection algorithm is naturally resilient to
this transformation, regardless of the particular header size used.
1 Both keyloggers were installed on Windows XP SP3 and instructed to output their
log in a speciﬁc directory. However, since no logs have been subsequently produced,
we assumed they were not fully compatible with the underlying environment.
✔
✔
✔
✔
✔
✔
Bait Your Hook: A Novel Detection Technique for Keyloggers
211
4.2 False Negatives
In our approach, false negatives may occur when the output pattern of a key-
logger scores an unexpectedly low PCC value. To test the robustness of our
approach with respect to false negatives, we made several experiments with our
own artiﬁcial keylogger. In its basic version, our prototype keylogger merely logs
each keystroke on a text ﬁle on the disk.
Our evaluation starts with the impact of the maximum number of keystrokes
per time interval Kmax. High Kmax values are expected to increase the level
of variability, reduce the amount of noise, and reproduce a more distinct distri-
bution in the output stream of a keylogger. Nevertheless, the keystroke rate is
clearly bound by the size of the time interval T . Figure 2(a) depicts this sce-
nario with N = 50 and T = 1000 ms. For each pattern generation algorithm, we
plot the PCC measured with our prototype keylogger. This graph shows very
high values of PCC for Kmax  50, regardless of the pattern
generation algorithm, the PCC linearly decreases. The eﬀect observed is due to
the inability of the system to absorb more than Kmax ≈ 50 in the given time
interval. We observe analogous results whether we plot the PCC against diﬀer-
ent values of T . Our results (hereby not reported) shows that the PCC value
becomes steady for T ≥ 150.
We conducted further experiments to analyze the impact of the number of
samples N. As expected, the PCC is steady regardless of the value of N. This
behavior should not suggest, however, that N has no eﬀect on the production
of false negatives. When noise in the output stream is to be expected, higher
values of N are indeed desirable to produce more accurate measures of the PCC
and avoid potential false negatives.
We have also simulated the eﬀect of several possible input-output transforma-
tions. First, we experimented with a keylogger using a non-trivial ﬁxed-length
encoding for keystrokes. Figure 2(b) depicts the results for diﬀerent values of
padding 100 < p < 10000000. A value of p = 100 simulates a keylogger writing
100 bytes on the disk for each eavesdropped keystroke. As discussed in Sec. 3.4,
the PCC should be unaﬀected in this case and presumably exhibit a constant
behavior. The graph conﬁrms this basic intuition, but shows the PCC dropping
linearly after around p = 100000 bytes. This behavior is due to the limited
I/O throughput that can be achieved within a single time interval. Let us now
  RND
  RFR
  IMP
  SIN
C
C
P
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
Kmax
C
C
P
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
  RND
  RFR
  IMP
  SIN
C
C
P
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
  RND
  RFR
  IMP
  SIN
 100
 1000
 10000
 100000
 1e+06
 1e+07
 100
 1000
 10000
 100000
 1e+06
 1e+07
Padding p
Padding randomly distributed in [0,p]
(a) PCC in function of Kmax.
(b) Eﬀect of constant padding.
(c) Eﬀect of random padding.
Fig. 2. The eﬀect of the parameters on the PCC measured with our keylogger
212
S. Ortolani, C. Giuﬀrida, and B. Crispo
consider a scenario where the keylogger writes a random amount of characters
r, with 0 ≤ r ≤ p, for each eavesdropped keystroke. This is interesting to eval-
uate the impact of several diﬀerent conditions. First, the experiment simulates
a keylogger randomly dropping keystrokes with a certain probability. Second,
the experiment simulates a keylogger encoding a number of keystrokes with spe-
cial sequences, e.g. CTRL logged as [Ctrl]. Finally, this scenario investigates the
impact of a keylogger performing variable-length encryption or other variable-
length transformations. Results for diﬀerent values of p are depicted in Fig. 2(c).
As observed in Fig. 2(b), the PCC only drops at saturation. The graph still
reveals a steady behavior with the stable value of the PCC only slightly af-
fected (PCC ≈ 0.95), despite the extreme level of noise introduced. Experiments
with non-uniform distributions of r in the same interval yield similar results. We
believe these results are very encouraging to demonstrate the strength of our
detection technique with to respect to false negatives, even in presence of severe
data transformations.
4.3 False Positives
In our approach, false positives may occur when the output pattern of some
benign process accidentally scores a signiﬁcant PCC value. If the value happens
to be greater than the particular threshold selected, a false detection is triggered.
In this section, we evaluate our prototype system to understand how often such
circumstances may occur in practice.
To generate representative synthetic workloads for the PC user, we relied on
the widely-used SYSmark 2004 SE suite [4]. The suite leverages common Win-
dows interactive applications2 to generate realistic workloads that mimic com-
mon user scenarios with input and think time. In its 2004 SE version, SYSmark
supports two individual workload scenarios: Internet Content Creation (Internet
workload from now on), and Oﬃce Productivity (Oﬃce workload from now on).
In addition to the workload scenarios supported by SYSmark, we have also ex-
perimented with another workload that simulates an idle Windows system with
common user applications3 running in the background. In the Idle workload sce-
nario, we allow no user input and focus on the I/O behavior of a number of
typical background processes.
For each scenario, we repeatedly reproduced the synthetic workload on a num-
ber of machines and collected I/O traces of all the running processes for several
possible sampling intervals T . Each trace was stored as a set of output patterns
and broken down into k consecutive chunks with N samples. Every experiment
was repeated over k/2 rounds, once for each pair of consecutive chunks. At each
round, the output patterns from the ﬁrst chunk were used to train our workload-
aware pattern generation algorithm, while the second chunk was used for testing.
2 The set of user programs is available at the following web site
http://www.bapco.com/products/sysmark2004se/applications.php.
3 Skype 4.1, Pidgin 2.6.3, Dropbox 0.6.556, Firefox 3.5.7, Google Chrome 5.0.307,
Avira Antivir Personal 9.0, Comodo Firewall 3.13, and VideoLAN 1.0.5.
Bait Your Hook: A Novel Detection Technique for Keyloggers
213
In the testing phase, we measured the maximum absolute PCC between every
generated input pattern of length N and every output pattern in the testing set.
At the end of each experiment, we averaged all the results. We tested all the
workload-agnostic and workload-aware pattern generation algorithms introduced
earlier.
We start with an analysis of the pattern length N, evaluating its eﬀect while
ﬁxing T to 1000 ms. Similar results can be obtained with other values of T .
Figures 3(a), 3(b), 3(c) depict the results of the experiments for the Idle, Internet,
and Oﬃce workload. As aforementioned, the behavior observed is very similar
in all the workload scenarios examined. The only noticeable diﬀerence is that
the Oﬃce workload presents a slightly more unstable PCC distribution. This is
probably due to the more irregular I/O workload monitored.
C
C
P
x
a
M
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
  RND
  RFR
  IMP
  SIN
  WLD
C
C
P
x
a
M
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
  RND
  RFR
  IMP
  SIN
  WLD
C
C
P
x
a
M
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
  RND
  RFR
  IMP
  SIN
  WLD
 0
 10  20  30  40  50  60  70  80  90  100  110  120  130  140  150
 0
 10  20  30  40  50  60  70  80  90  100  110  120  130  140  150
 0
 10  20  30  40  50  60  70  80  90  100  110  120  130  140  150
N
N
N
(a) Effect of N for the Idle wld.
(b) Effect of N for the Internet wld.
(c) Effect of N for the Office wld.
C
C
P
x
a
M
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
  RND
  RFR
  IMP
  SIN
  WLD
C
C
P