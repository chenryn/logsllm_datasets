### 8.6 Comparison between POD-Recovery and Other Cloud Recovery Methods

In this section, we present the results of a comparison between POD-Recovery and other existing recovery strategies for cloud operations, focusing on their ability to meet eight specific recovery requirements. The other cloud operational recovery strategies used for this comparison are:
1. Recovery methods for cloud operations as transactions.
2. Exception handling mechanisms for cloud operations.
3. Test-driven scripts in cloud operations.
4. The undo framework for cloud operations.

The eight recovery requirements are:
1. Runtime recovery (R1).
2. Recovery satisfying RTO (R2).
3. Reducing negative impact on the cloud system (R3).
4. Reducing monetary cost of recovery (R4).
5. Recovery from errors without known causes (R5).
6. Dealing with false positives of error detection (R6).
7. Recovery for recovery itself (R7).
8. Generalizability of recovery (R8).

To compare these five operational recovery strategies, each method was evaluated against the eight recovery requirements using different sporadic operations on the cloud. In previous sections (8.1 to 8.5), POD-Recovery was already evaluated against all eight recovery requirements using five types of sporadic operations on the cloud. For the "recovery for cloud operations as transactions" method, we also tested its fulfillment of the eight recovery requirements using the same five cloud sporadic operations. Specifically, we ran these sporadic operations, injected faults, performed backward and forward recovery, and observed the performance of these two recovery strategies.

For the "exception handling for cloud operations" method, we implemented exception handlers inside the five sporadic operations and assessed how they handled failures resulting from the injected faults. For the "test-driven scripts in cloud operations" method, we prepared Chef scripts for all five sporadic operations and implemented blocks of test-driven scripts for the operational steps. We then injected faults and observed how the failures were handled. For the "cloud undo framework" method, we injected faults into the five sporadic operations, used the undo tool to revert to a previous consistent state, and analyzed its performance and fulfillment of the recovery requirements.

The results of the comparison are shown in Table 54 below. The comparison is made among the operational recovery methods of POD-Recovery, Recovery for Cloud Operations as Transactions, Exception Handling in Cloud Operations, Test-Driven Scripts in Cloud Operations, and Cloud Operations Undo Framework. As seen in the table, POD-Recovery satisfies all eight recovery requirements, which is validated in the previous sections (8.1 to 8.5). However, the other recovery strategies only partially meet the requirements:
- Recovery for Cloud Operations as Transactions: Satisfies R1.
- Exception Handling in Cloud Operations: Satisfies R1 and R2.
- Test-Driven Scripts in Cloud Operations: Satisfies R1 and R2.
- Cloud Operations Undo Framework: Satisfies R1, R5, and R8.

Thus, POD-Recovery outperforms the other existing recovery strategies in terms of meeting the recovery requirements.

**Table 54. Comparison between POD-Recovery and Other Existing Cloud Recovery Methods**

| Recovery Method | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 |
|-----------------|----|----|----|----|----|----|----|----|
| POD-Recovery    | √  | √  | √  | √  | √  | √  | √  | √  |
| Recovery for Cloud Operations as Transactions | √  | -  | -  | -  | -  | -  | -  | -  |
| Exception Handling in Cloud Operations | √  | √  | -  | -  | -  | -  | -  | -  |
| Test-Driven Scripts in Cloud Operations | √  | √  | -  | -  | -  | -  | -  | -  |
| Cloud Operations Undo Framework | √  | -  | -  | -  | √  | -  | -  | √  |

### 8.7 Summary and Discussion

POD-Recovery has been evaluated using five different types of sporadic operations on the cloud. These operations are representative of various possible sporadic operations and have been used to assess three main aspects:
1. The workload of generating the resource space.
2. The workload of generating expected resource state templates.
3. The recovery method’s capability of satisfying all eight recovery requirements.

The applicability of POD-Recovery across these five sporadic operations demonstrates its generalizability. A comparison with four other existing recovery methods for cloud operations shows that POD-Recovery outperforms them in terms of fulfilling all recovery requirements.

POD-Recovery was tested on the AWS EC2 cloud platform, but it is argued that it can be applied to other cloud platforms such as Windows Azure or Rackspace, given their similar service models, cloud resource provisioning, cloud API utilization, and cloud log generation. The fact that our proposed method can recover from different types of sporadic operations validates its generalizability, even though it has not been explicitly tested on multiple cloud platforms.

### 8.8 Threats to Validity

From the experimental results, we conclude that POD-Recovery can perform recovery while satisfying all recovery requirements, thus improving upon existing cloud operational recovery methods. However, there are circumstances where POD-Recovery may not be the preferred solution. For example, when fixed types of sporadic operations are performed within an industry or when the contextual information of the operations is well known to the operators, other recovery methods like exception handling or test-driven scripts can be more suitable. Additionally, the undo method can be effective when business stakeholders set relatively high values for recovery objectives (e.g., RTO).

The experimental results also indicate that POD-Recovery requires additional effort in executing several procedures, such as determining the process model, identifying recovery points, and managing cloud resource states. Some of these procedures are not fully automated and require human assistance, such as log pre-processing for mining process models and recovery points determination. While human involvement may be necessary for a generalizable recovery methodology, efforts should be made to automate as many components as possible.

### Chapter 9. Conclusion

#### 9.1 Contributions of Thesis

Due to the DevOps practice, consumer-initiated sporadic operations on cloud applications, such as deployment, upgrade, and reconfiguration, are increasingly frequent and error-prone. This is due to factors like cloud API uncertainty and concurrent controls by different teams. Several existing recovery mechanisms aim to recover from errors during these operations, but they do not provide fine-grained recovery. For instance, exception handling typically recovers by gracefully exiting the operation or providing a waiting time, and it faces the challenge of catering to exceptions from different systems and platforms.

We propose a novel and innovative recovery methodology called POD-Recovery, which is generalizable and can cater to different types of sporadic operations on the cloud. It is non-intrusive and does not require changes to the source code of the operations. Instead, it relies on runtime logs to detect and recover from errors. To develop POD-Recovery, we formulated eight recovery requirements for non-intrusive recovery for sporadic operations on the cloud:
1. Recovery should be performed at runtime.
2. Recovery should satisfy RTO (Recovery Time Objective).
3. Recovery should reduce negative impact on the cloud system.
4. Recovery should reduce monetary cost.
5. Recovery should be able to recover from errors without known causes.
6. Recovery should be able to deal with false positives of error detection.
7. Recovery should be able to recover for recovery itself.
8. Recovery should be generalizable to different sporadic operations on the cloud.

POD-Recovery works as follows:
1. **Modeling and Analysis**: By analyzing and modeling a sporadic operation on the cloud as a process, it determines the unified resource space (the resource types required and manipulated) and generates expected resource state templates for all operational steps.
2. **Recovery Points Determination**: Recovery points are manually determined based on specific criteria. These points are positions within an operation where failure detection and recovery should be performed.
3. **Error Detection and Recovery Trigger**: If errors are detected after a recovery point using an existing error detection service (POD-Diagnosis), recovery is triggered.
4. **Recovery Patterns**: POD-Recovery supports eight recovery patterns: Compensated Undo & Redo, Compensated Undo & Alternative, Rewind & Replay, Rewind & Alternative, Reparation, Direct Redo, Direct Alternative, and Farther Undo & Redo.
5. **Pattern Selection and Action Generation**: Applicable recovery patterns are determined using state reachability, alternative existence, and idempotence checking. An AI planning technique is then used to generate recovery actions.
6. **Action Evaluation and Selection**: Generated recovery actions are evaluated using metrics such as Recovery Time, Recovery Cost, and Recovery Impact. Acceptable recovery actions are selected based on user-constraints and Pareto set search optimization mechanisms.
7. **Execution**: Selected recovery actions are mapped into relevant cloud APIs for execution.

POD-Recovery was evaluated using five representative sporadic operations on the cloud: Rolling Upgrade, Installation, Scale-up, Scale-down, and Migration. The experimental results show that POD-Recovery can recover from operational failures while satisfying all recovery requirements, outperforming existing recovery methods.

The research contributions of this thesis are:
1. **Proposed and Evaluated Methodology**: A novel, generalizable, and non-intrusive recovery method for sporadic operations on the cloud, with a full discussion of recovery requirements and how they are met.
2. **State Management Framework**: A framework for operational recovery on the cloud, consisting of resource space determination and expected resource states generation.
3. **AI-Planning for Recovery Actions**: Demonstrated the feasibility of using AI-Planning techniques to generate recovery actions for sporadic operations on the cloud.
4. **Selection and Optimization Mechanisms**: Proposed two mechanisms for selecting acceptable recovery actions based on three evaluation metrics.
5. **Experimental Evaluation Design**: Showed how to design a systematic experimental evaluation to properly assess the recovery methodology.

#### 9.2 Implications of Proposed Recovery Method

POD-Recovery is designed to ensure the dependability of frequently performed deployment and maintenance operations on the cloud. The primary beneficiaries are various cloud consumers, including IT industries with systems hosted on the cloud. End users of these systems will also benefit from a better user experience due to more reliable maintenance. When applied in IT industries, some customization may be needed, such as adjusting the operational process model mining mechanism and refining the log information extraction algorithm.

POD-Recovery has the potential to apply to a broader scope of failure scenarios, including recovery for security breaches on cloud systems. This is because it can recover from failures without knowing the error causes, relying on system state transitions. Thus, it can handle various error causes, including security breaches.

Additionally, POD-Recovery can supplement the efforts of cloud providers to promote cloud reliability. While cloud providers focus on maintaining the dependability and security of their platforms, efforts can also be made from the cloud consumers' perspective.

#### 9.3 Limitations of Recovery Framework

1. **Log Quality**: Our experiments assume high-quality logs, such as those provided by Netflix Asgard. If the tools used for sporadic operations generate poor-quality logs or no logs, the proposed recovery method faces challenges related to failure detection and process model generation.
2. **Model Generation Effort**: The initial effort to generate the needed models can be high. However, this effort can be focused on frequently executed operations, and the data must be representative of the operations and systems for which POD-Recovery is set up.
3. **Generalizability Testing**: We tested the generalizability of our method using five representative sporadic operations. More tests would be desirable to further validate its generalizability.
4. **Applicability to Other Clouds**: While we argue that our recovery framework can be applied to other cloud platforms, full tests have not been conducted to confirm its applicability.
5. **Benchmarking**: The TPC-W benchmark, while highly representative, does not capture all modern cloud computing workload types. Future work will aim to use newer and potentially more appropriate benchmarks to calculate recovery impact.

#### 9.4 Directions for Future Research

Given the limitations, future work can explore:
1. **Extension for Poor-Quality Logs**: Develop methods to handle poor-quality logs generated by operation automation tools, addressing challenges in log processing and error detection.
2. **Reducing Model Generation Effort**: As more sporadic operations are performed, reducing the initial effort involved in generating the needed models is a key area for future research.