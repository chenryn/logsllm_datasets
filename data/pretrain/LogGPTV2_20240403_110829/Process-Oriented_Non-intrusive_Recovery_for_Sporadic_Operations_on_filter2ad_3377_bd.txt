to the new 
database 
instance; 
 (Direct Redo) 
Terninate the 
old database 
instance; 
(Direct Redo) 
169.99 s 
78.66 s 
36.56 s 
3)  Satisfying Recovery Requirement R7 
We  can  see  that  the  maximum  recovery  time  of  “recovery  for  recovery”  is  177.44  seconds. 
Hence, the time for the original recovery and the “recovery for recovery” in total is much less 
than  the  specified  time  gap  between  two  adjacent  recovery  points.  Thus,  the  requirement  of 
“recovery for recovery” is achieved by POD-Recovery. 
8.6  Comparison between POD-Recovery and Other Cloud Recovery Methods 
In  this  section,  we  present  the  results  of  the  comparison  between  POD-Recovery  and  other 
existing  recovery  strategies  for  cloud  operations  in  terms  of  their  capability  of  fulfilling  the 
eight  recovery  requirements.  The  other  cloud  operational  recovery  strategies  used  for  this 
comparison are: 1) recovery methods for cloud operations as transactions; 2) exception handling 
148 
mechanisms  for  cloud  operations;  3)  test  driven  scripts  in  cloud  operations;  4)  the  undo 
framework for cloud operations.  The eight recovery requirements are: 1) runtime recovery (R1); 
2)  recovery  satisfying  RTO  (R2);  3)  reducing  negative  impact  on  cloud  system  (R3);  4) 
reducing monetary cost of recovery (R4); 5) recovery from errors without known causes (R5); 6) 
dealing  with  false  positives  of  error  detection  (R6);  7)  recovery  for  recovery  itself  (R7);  8) 
generalizability of recovery (R8).  
In order to make comparison among these five operational recovery strategies on cloud, each of 
these  recovery  methods  should  be  evaluated  against  the  eight  recovery  requirements  by  using 
different sporadic operations on cloud. In previous sections 8.1 to 8.5, the recovery method of 
POD-Recovery is already evaluated against all of the eight recovery requirements by using five 
types  of  sporadic  operations  on  cloud.  For  the  recovery  method  of  “recovery  for  cloud 
operations  as  transactions”,  we  also  tested  it  against  its  fulfilment  of  the  eight  recovery 
requirements by using these five cloud sporadic operations. Specifically, we ran these sporadic 
operations  and  injected  faults  into  them,  performed  the  backward  recovery  and  the  forward 
recovery on these faults, and observed the performance of these two recovery strategies. For the 
recovery  method  of  “exception  handling  for  cloud  operations”,  we  implemented  exception 
handlers inside the five sporadic operations and assessed how they handled the failures resulting 
from the faults injected. For the recovery method of “test driven scripts in cloud operations”, we 
prepared the Chef scripts for all of the five sporadic operations and implemented the blocks of 
test  driven  scripts  for  the  operational  steps  inside  the  sporadic  operations.  Then  we  injected 
faults  into  the  sporadic  operations  and  observed  how  the  failures  could  be  handled.  For  the 
recovery  method  of  “cloud  undo  framework”,  we  injected  faults  into  the  five  sporadic 
operations and employed the undo tool to revert from the erroneous state back to the previous 
consistent state for the recovery, and we observed its performance and analysed its fulfilment of 
the recovery requirements. 
The results of the comparison among these recovery methods are shown in below Table 54. The 
comparison is made among the operational recovery methods of POD-Recovery, Recovery for 
Cloud  Operations  as  Transactions,  Exception  Handling  in  Cloud  Operations,  Test  Driven 
Scripts  in  Cloud  Operations  and  Cloud  Operations  Undo  Framework.  We  can  see  that  POD-
Recovery  is  able  to  satisfy  all  the  eight  recovery  requirements,  which  is  validated  in  the 
previous sections 8.1 to 8.5. However, for all the other recovery strategies, only part of the eight 
recovery requirements can be satisfied. Recovery for Cloud Operations as Transactions can only 
satisfy  recovery  requirement  R1;  Exception  Handling  in  Cloud  Operations  can  only  satisfy 
recovery  requirements  R1  and  R2;  Test  Driven  Scripts  in  Cloud  Operations  can  only  satisfy 
recovery  requirements  R1  and  R2;  Cloud  Operations  Undo  Framework  can  only  satisfy 
149 
recovery requirements R1, R5 and R8. As such, POD-Recovery improves on the other existing 
recovery  strategies  for  cloud  operations  in  terms  of  the  capability  of  fulfilling  the  recovery 
requirements. 
Table 54.  Comparison between POD-Recovery and Other Existing Cloud Recovery Methods 
Recovery Requirements Fulfillment 
R1 
R2 
R3 
R4 
R5 
R6 
R7 
R8 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
√ 
Recovery Method 
POD-Recovery 
Recovery 
Cloud 
Operations as Transactions 
for 
Exception  Handling 
Cloud Operations 
Test  Driven  Scripts 
Cloud Operations 
in 
in 
Cloud  Operations  Undo 
Framework 
8.7  Summary and Discussion 
POD-Recovery is evaluated with five different types of sporadic operations on cloud. These five 
sporadic operations are a good cross of all possible sporadic operations on cloud and there are 
representative. For each sporadic operation, we have evaluated three main aspects: the workload 
of generating the resource space, the workload of generating expected resource state templates, 
and  the  recovery  method’s  capability  of  satisfying  all  the  eight  recovery  requirements.  In 
particular, the applicability of POD-Recovery across five sporadic operations on cloud justifies 
its generalizability for recovery. The comparison among POD-Recovery and other four existing 
recovery  methods  for  cloud  operations  shows  that  POD-Recovery  improves  on  the  other 
existing cloud operational recovery methods in terms of the ability of satisfying all the recovery 
requirements. 
POD-Recovery is tested only on AWS EC2 cloud platform, because the other cloud platforms 
such  as  Windows  Azure  or  Rackspace  are  similar  to  AWS  cloud  in  terms  of  service  models, 
cloud resources provisioning, cloud APIs utilization, and cloud logs generation. Multiple types 
of  cloud  platform  are  able  to  meet  all  the  assumptions  which  are  required  by  our  recovery 
method. The fact that our proposed method for cloud operational recovery is able to recover for 
different types of sporadic operations validates the generalizability of the recovery method, and 
we  argue  that  our  recovery  method  is  applicable  for  these  sporadic  operations  performed  on 
150 
multiple  clouds,  even  though  we  haven’t  explicitly  tested  it  with  different  types  of  cloud 
platforms.    
8.8  Threats to Validity 
From the experimental results, we can draw a conclusion that POD-Recovery is able to perform 
recovery while satisfying all the recovery requirements and  hence it improves on all the other 
existing  cloud  operational  recovery  methods.  However,  under  certain  circumstances  POD-
Recovery  may  not  necessarily  be  chosen  as  the  recovery  solution.  For  example,  when  fixed 
types  of  sporadic  operations  are  being  performed  within  an  industry  or  when  the  contextual 
information of the operations are well known to the operators, other recovery methods such as 
the  exception  handling  mechanism  or  the  test  driven  scripts  mechanism  can  be  employed  for 
performing recovery. Another example is that the recovery method of undo can be utilized for 
recovery  when  business  stakeholders  set  relatively  big  values for  the  recovery  objectives  (e.g. 
RTO).  The  experimental  results  also  indicate  that  POD-Recovery  requires  additional  effort  in 
executing several procedures, such as figuring out the process model, determining the recovery 
points and managing cloud resource states. Among these procedures, some of them are not fully 
automated and require human assistance, e.g. log pre-processing for mining process models and 
recovery points determination. While human involvement may be inevitable in a generalizable 
recovery  methodology  which  can  cater  for  complex  situations,  we  should  still  try  our  best  to 
make every component of the recovery method as automated as possible.  
151 
Chapter 9.  Conclusion 
In  this  chapter,  we  present  the  contributions  of  the  thesis,  the  implications  of  the  proposed 
recovery  method,  the  limitations  with  the  proposed  recovery  method  and  the  directions  for 
future research. 
9.1  Contributions of Thesis 
Due  to  the  DevOps  practice  nowadays,  consumer-initiated  sporadic  operations  on  cloud 
applications,  such  as  deployment,  upgrade  and  reconfiguration,  are  more  and  more  frequently 
performed  and  are  error-prone.  This  is  because  of  several  reasons  such  as  cloud  APIs 
uncertainty  and  concurrent  controls  on  the  operations  by  different  teams.  There  are  several 
existing recovery mechanisms to recover from those errors during sporadic operations on cloud. 
However,  those  existing  methods  do  not  recover  from  errors  in  a  fine-grained  manner.  For 
instance,  the  exception  handling  mechanism  usually  perform  recovery  by  gracefully  exiting 
from the operation or by providing a waiting time, and it is faced with the challenge of needing 
to  cater  for  exceptions  from  different  systems  and  platforms.  We  have  proposed  a  novel  and 
innovative  recovery  methodology,  called  POD-Recovery,  to  recover  from  failures  in  sporadic 
operations  on  cloud.  POD-Recovery  is  generalizable  and  can  cater  for  different  types  of 
sporadic operations on cloud. It is non-intrusive and does not need to change any of the source 
code of the sporadic operations. It relies on runtime logs generated to detect errors and recover 
from them. In order to propose POD-Recovery, we have formulated eight recovery requirements 
for  non-intrusive  recovery  for  sporadic  operations  on  cloud.  The  eight  recovery  requirements 
are:  1)  recovery  should  be  performed  at  runtime;  2)  recovery  should  satisfy  RTO  (Recovery 
Time Objective); 3) recovery should reduce negative impact on the cloud system; 4)  recovery 
should reduce monetary cost; 5) recovery should be able to recover from errors without known 
causes;  6)  recovery  should  be  able  to  deal  with  false  positives  of  error  detection;  7)  recovery 
should  be  able  to  recover  for  recovery  itself;  8)  recovery  should  be  generalizable  to  different 
sporadic operations on cloud.  
POD-Recovery  works  in  the  following  way:  first,  by  analysing  and  modelling  a  sporadic 
operation  on  cloud  as  a  process  which  provides  the  information  of  the  workflow,  the  purpose 
and  the  functionalities  of  the  sporadic  operation  and  the  contextual  information  of  each 
operational  step,  it  determines  the  unified  resource  space  which  means  the  resource  types 
required  and  manipulated  by  the  sporadic  operation  on  cloud,  and  for  all  operational  steps  it 
generates the expected resource state templates which are the abstraction level of cloud resource 
states.  Then  POD-Recovery  manually  determines  the  recovery  points  inside  the  operational 
process based on recovery points determination criteria.  Recovery points refer to the positions 
inside  an  operation  where  failure  detection  and  recovery  should  be  performed.  The  whole 
152 
operational  process  is  divided  into  several  sections,  and  each  section  contains  one  or  more 
operational steps. Second, recovery will be triggered if there are errors detected after a recovery 
point  by  using  an  existing  error  detection  service  called  POD-Diagnosis.  POD-Recovery 
supports  eight  recovery  patterns:  1)  Compensated  Undo  &  Redo;  2)  Compensated  Undo  & 
Alternative; 3)  Rewind  & Replay;  4)  Rewind  &Alternative;  5)  Reparation; 6)  Direct  Redo; 7) 
Direct  Alternative;  8)  Farther  Undo  &  Redo.  For  the  eight  recovery  patterns,  the  applicable 
recovery patterns are  first determined by using  the  state reachability checking mechanism,  the 
alternative existence checking mechanism and  the Idempotence checking mechanism. Then an 
existing  AI  planning  technique  is  employed  to  automatically  generate  recovery  actions  for  all 
the  applicable  recovery  patterns.  Next,  the  applicable  recovery  actions  generated  will  be 
evaluated  by  using  the  recovery  actions  evaluation  metrics  of  Recovery  Time,  Recovery  Cost 
and  Recovery  Impact.  Finally,  the  acceptable  recovery  actions  will  be  selected  based  on  our 
selection  and  optimization  mechanisms  and  they  will  be  mapped  into  relevant  cloud  APIs  for 
execution.  POD-Recovery  supports  two  types  of  selection  optimization  mechanisms:  user-
constraints  based  selection  mechanism  and  Pareto  set  search  based  selection  mechanism.  To 
evaluate POD-Recovery,  we used five types of representative sporadic operations on cloud: 1) 
Rolling  upgrade  operation;  2)  Installation  operation;  3)  Scale-up  operation;  4)  Scale-down 
operation; 5) Migration operation. The experimental results show that POD-Recovery is able to 
recover from operational failures while satisfying all the recovery requirements and it improves 
on  all  the  other  existing  recovery  methods  for  cloud  operations  in  terms  of  the  capability  of 
fulfilling recovery requirements. 
The  research  contributions  of  this  thesis  are  as  follows:  1)  we  have  proposed  and  evaluated  a 
novel  and  generalizable  non-intrusive  recovery  method  for  sporadic  operations  on  cloud.  We 
provided a full discussion of the requirements of recovery and demonstrated how our recovery 
method  is  able  to  fulfil  all  the  recovery  requirements.  Essential  to  our  methodology  are 
applicable  recovery  patterns  filtering,  automation  of  recovery  actions  generation  and  selection 
of acceptable recovery actions using the three recovery evaluation metrics. 2) We have proposed 
a state management framework for operational recovery on cloud consisting of two components: 
resource space determination and expected resource states generation for each operational step. 
3)  We  have  demonstrated  the  feasibility  of  applying  AI-Planning  techniques  on  generating 
recovery  actions  for  sporadic  operations  on  cloud.  4)  We  have  proposed  two recovery  actions 
selection  and  optimization  mechanisms  to  solve  the  problem  of  acceptable  recovery  actions 
selection  based  on  three  recovery  actions  evaluation  metrics,  and  we  have  illustrated  how  to 
calculate these metrics. 5) We have shown how to make a systematic experimental evaluation 
design to evaluate our recovery methodology properly. 
153 
9.2  Implications of Proposed Recovery Method 
The  proposed  recovery  method  for  cloud  sporadic  operations,  POD-Recovery,  is  designed  for 
the purpose of ensuring the dependability of increasingly frequently performed deployment and 
maintenance  operations  on  cloud.  Therefore,  the  major  parties  that  can  benefit  from  POD-
Recovery are various cloud consumers consisting of a large number of IT industries which have 
their  systems  hosted  by  cloud.  Meanwhile,  the  end  users  of  their  systems  are  able  to  have  a 
better user experience because the maintenance on these systems is made to be more reliable. As 
such, POD-Recovery is also beneficial for system end users. In particular, when POD-Recovery 
is  to  be  applied  in  IT  industries,  some  of  its  functionalities  may  need  certain  level  of 
customization according to specific business needs, such as readjusting the operational process 
model  mining  mechanism  and  refining  the  log  information  extraction  algorithm.  Moreover,  it 
can  be  indicated  that  POD-Recovery  has  the  potential  to  apply  to  a  broader  scope  of  failure 
scenarios, e.g. recovery for security breaches on cloud systems. The reason for this is that POD-
Recovery can recover from failures without knowing the error causes and the recovery is largely 
based  on  system  state  transition.  Hence,  no  matter  what  the  error  cause  is,  as  long  as  the 
correspondent  failure  is  associated  with  a  system  state  change,  it  can  be  recovered  from  by 
POD-Recovery.  Such  error  causes  definitely  include  security  breaches  on  cloud  systems. 
Another  implication  derived  from  POD-Recovery  is  that it  can  also  work  as  a  supplement  for 
the  effort  of  promoting  cloud  reliability  made  by  cloud  providers.  While  cloud  providers  try 
their best to maintain the dependability and security of their cloud platforms, some efforts can 
absolutely be made not only from cloud providers’ perspective but also from cloud consumers’ 
perspective.   
9.3  Limitations of Recovery Framework 
First,  we  address  the  arguably  favourable  conditions  for  our  experiments.  All  major  public 
clouds offer management APIs and respective call logs that can be used for our purposes, so the 
related assumptions apply to a lot of circumstances. However, Netflix Asgard provides logs of 
reasonably  good  quality,  which  contain  all  information  needed  by  our  approach.  If  the  tools 
used for performing the sporadic operations on cloud are unable to generate good quality logs or 
even generate no logs, the proposed recovery method is faced with some challenges related to 
failure detection and process model generation, and the recovery method may not be applicable 
under such a circumstance. 
Second, the once-off effort of generating the needed models may be considered high in a given 
context. However, typically not many different operations are executed very frequently, so the 
effort can be focused on those. For a particular operation and context, a relatively large amount 
154 
of work is needed to generate the resource space and expected states from historical data of past 
operation runs. The data must be representative of the operations and systems for which POD-
Recovery is set up.  
Third,  we  tested  the  generalizability  of  our  method  by  using  five  representative  sporadic 
operations. Since sporadic operations on cloud involve more than these five types of operations, 
more test towards the generalizability of our recovery methodology would be desirable.  
Fourth, we argue that our recovery framework can also be applied on other cloud platforms such 
as  Windows  Azure,  as  long  as  the  cloud  resources,  cloud  logs,  operation  logs,  and  cloud 
management APIs are available. Also, if a suitable domain model is provided to the AI planner, 
it  can  generate  recovery  plans  for  other  clouds  as  well.  While  we  have  created  a  partial  AI 
planning  domain  model  for  OpenStack,  we  have  not  conducted  full  tests  regarding  the 
applicability of POD-Recovery to other clouds. 
Fifth,  while  the  TPC-W  benchmark  is  highly  representative  of  a  broad  class  of  web  based 
applications,  it  does  not  capture  all  modern  cloud  computing  workload  types.  There  is  an 
emerging body of research work being conducted in the area of developing better cloud specific 
benchmarks,  and  we  will  aim  to  supplement  the  calculation  of  recovery  impact  with  some  of 
these newer and potentially more appropriate benchmarks. 
9.4  Directions for Future Research 
In light of the above-mentioned limitations with our recovery methodology, the following items 
of future work can be explored: 
1)  Extension  of  the  recovery  method  under  the  circumstances  where  the  logs  generated  by 
operation automation tools are of poor quality. Unlike those automation tools like Asgard, some 
other operation automation tools can only provide relatively low quality logs which may contain 
insufficient  information  about  the  operation  and  even  have  much  noise  information.  When 
sporadic  operations  on  cloud  are  performed  using  such  automation  tools,  the  activities  in  our 
recovery methodology such as log  mining based process determination and log analysis based 
error detection are faced with challenges related to log processing, and how to overcome these 
challenges is a future research question. 
2) Refinement of the way  of generating the needed models in POD-Recovery  by reducing the 
once-off  effort.  When  it  comes  to  a  trend  that  more  and  more  sporadic  operations  will  be 
performed frequently in the future, the once-off effort involved in generating the needed models 
needs to be reduced, and how to achieve this is also a future research area. 