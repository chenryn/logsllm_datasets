**作者：scz@绿盟科技  
来源：[绿盟科技博客](http://blog.nsfocus.net/unconventional-means-uploading-downloading-binary-files/?from=timeline&isappinstalled=0 "绿盟科技博客")**
文中演示了3种数据映射方案，有更多其他编解码方案，这3种够用了。前面介绍的都是bin与txt的相互转换，各种编码、解码。假设数据传输通道只有一个弱shell，有回显，可以通过copy/paste无损传输可打印字符。为了将不可打印字节传输过去，只能通过编解码进行数据映射。
## od+xxd
2000年时我和tt在一台远程主机上想把其中一个ELF弄回本地来逆向工程，目标只在23/TCP上开了服务，其他端口不可达。远程主机上可用命令少得可怜，xxd、base64、uuencode之类的都没有，但意外发现有个od。后来靠od把这个ELF从远程弄回了本地。
为了便于演示说明，生造一个二进制文件:
    $ printf -v escseq \\%o {0..255}
    $ printf "$escseq" > some
这是bash语法，ash不支持。
    $ xxd -g 1 some
    00000000: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f ................
    00000010: 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f ................
    00000020: 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f !"#$%&'()*+,-./
    00000030: 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 0123456789:;?
    00000040: 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f @ABCDEFGHIJKLMNO
    00000050: 50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f PQRSTUVWXYZ[\]^_
    00000060: 60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f `abcdefghijklmno
    00000070: 70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f pqrstuvwxyz{|}~.
    00000080: 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f ................
    00000090: 90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f ................
    000000a0: a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af ................
    000000b0: b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf ................
    000000c0: c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf ................
    000000d0: d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df ................
    000000e0: e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef ................
    000000f0: f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff ................
    $ xxd -p some
    000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
    1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b
    3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556575859
    5a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071727374757677
    78797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495
    969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3
    b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1
    d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeef
    f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
xxd在Linux上很常见，但在其他非Linux的`*nix`环境中，od可能更常见。
    $ od -An -tx1 -v --width=30 some &> some.txt
some.txt形如:
    00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d
    1e 1f 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37 38 39 3a 3b
    3c 3d 3e 3f 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59
在远程主机上显示some.txt，设法把其中的内容原封不动地弄回本地来，比如录屏、开启终端日志等等。然后在本地处理some.txt，恢复出some。
    $ sed "s/ //g" some.txt &> some.tmp
如果远程主机上有sed，上面这步可以在远程主机进行，减少通过网络传输的文本数据量。
some.tmp内容形如:
    000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
    1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b
    3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556575859
some.tmp的格式就是“xxx -p”的输出格式。
    $ xxd -r -p some.tmp some
od本身只有数据转储功能，没有数据恢复功能。上面用“xxd -r”恢复出binary。
有人Ctrl-U断在U-Boot中，进行hexdump，然后恢复binary，本质是一样的。
## xxd
如果远程主机有xxd，整个过程类似。
### 1) 方案1
    $ xxd -p some &> some.txt
some.txt形如:
    000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
    1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b
    3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556575859
xxd生成的some.txt已经是最精简形式，不需要sed再处理。
    $ xxd -r -p some.txt some
### 2) 方案2
方案2演示xxd的其他参数，性价比不如方案1。
    $ xxd -g 1 some some.txt
some.txt形如:
    00000000: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f ................
    00000010: 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f ................
    00000020: 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f !"#$%&'()*+,-./
`$ xxd -r -s 0 some.txt some`
## base64
原始数据
    01 02 03
二进制表示
    00000001 00000010 00000011
从8-bits一组变成6-bits一组
    000000 010000 001000 000011
16进制表示
    00 10 08 03
查表后转成:
    A Q I D
上面是base64编码基本原理，没有考虑需要填充的情形。
如果远程主机可以对binary进行base64编码，就没什么好说的了。
    $ base64 some > some.txt
some.txt形如:
    AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4
    OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx
    cnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq
    q6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj
    5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==
    $ base64 -d some.txt > some
本文假设针对`*nix`环境，不考虑vbscript、jscript这些存在。
base64编码比“xxd -p”省空间，前者一个字符代表6-bits，后者一个字符代表4-bits。
## uuencode/uudecode
    begin
    ...
    `
    end
> is a character indicating the number of data bytes which have been encoded
> on that line. This is an ASCII character determined by adding 32 to the
> actual byte count, with the sole exception of a grave accent “`” (ASCII code
> 96) signifying zero bytes. All data lines except the last (if the data was
> not divisible by 45), have 45 bytes of encoded data (60 characters after
> encoding). Therefore, the vast majority of length values is ‘M’, (32 + 45 =
> ASCII code 77 or “M”).
>
> If the source is not divisible by 3 then the last 4-byte section will
> contain padding bytes to make it cleanly divisible. These bytes are
> subtracted from the line’s so that the decoder does not append unwanted
> characters to the file.
uu编码如今已不多见。
### 1) uu编码
    $ uuencode some some > some.txt
some.txt形如:
    begin 644 some
    M``$"`P0%!@WQ]?G^`@8*#A(6&
    MAXB)BHN,C8Z/D)&2DY25EI>8F9J;G)V>GZ"AHJ.DI::GJ*FJJZRMKJ^PL;*S
    MM+6VM[BYNKN\O;Z_P,'"P\3%QL?(R+CY.7FY^CIZNOL[>[O\/'R\_3U]O?X^?K[_/W^_P``
    `
    end
这是传统的uuencode编码
    $ uudecode -o some some.txt
### 2) base64编码
某些uuencode命令支持base64
    $ uuencode -m some some > some.txt
some.txt形如:
    begin-base64 644 some
    AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKiss
    LS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZ
    WltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWG
    h4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKz
    tLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g
    4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==
====
    $ uudecode -o some some.txt
解码时不需要额外参数，靠第一行识别base64编码。“uuencode -m”产生的内容相比base64产生的内容，多了第一行及最后一行:
    begin-base64 644 some
====
把这两行删除后，就可以用”base64 -d”解码。
## awk
我们并不只考虑从远程主机下载binary，也考虑向远程主机上传binary。
如果目标环境有gcc，就弄个C代码实现base64编解码。本文不考虑宽松环境，像perl、python、gcc之类的都不考虑。考虑目标环境存在awk。
### 1) base64decode.awk
    # base64decode.awk
    #
    # Introduction
    # ============
    # Decode Base64-encoded strings.
    #
    # Invocation
    # ==========
    # Typically you run the script like this:
    #
    #     $ awk -f base64decode.awk [file1 [file2 [...]]] > output
    # The script implements Base64 decoding, based on RFC 3548:
    #
    # https://tools.ietf.org/html/rfc3548
    # create our lookup table
    BEGIN {
        # load symbols based on the alphabet
        for (i=0; i> "/dev/stderr"
                exit 1
            }
            if (g1 == "") {
                printf("Unrecognized character %c in Base 64 encoded string\n",
                       g1) >> "/dev/stderr"
                exit 1
            }
            if (g2 == "") {
                printf("Unrecognized character %c in Base 64 encoded string\n",
                       g2) >> "/dev/stderr"
                exit 1
            }
            if (g3 == "") {
                printf("Unrecognized character %c in Base 64 encoded string\n",
                       g3) >> "/dev/stderr"
                exit 1
            }
            # we don't have bit shifting in AWK, but we can achieve the same
            # results with multiplication, division, and modulo arithmetic
            result[n++] = (g0 * 4) + int(g1 / 16)
            if (g2 != -1) {
                result[n++] = ((g1 * 16) % 256) + int(g2 / 4)
                if (g3 != -1) {
                    result[n++] = ((g2 * 64) % 256) + g3
                }
            }
            encoded = substr(encoded, 5)
        }
        if (length(encoded) != 0) {
            printf("Extra characters at end of Base 64 encoded string: \"%s\"\n",
                   encoded) >> "/dev/stderr"
            exit 1
        }
    }
    # our main text processing
    {
        # Decode what we have read.
        base64decode($0, result)
        # Output the decoded string.
        #
        # We cannot output a NUL character using BusyBox AWK. See:
        # https://stackoverflow.com/a/32302711
        #
        # So we collect our result into an octal string and use the
        # shell "printf" command to create the actual output.
        #
        # This also helps with gawk, which gets confused about the
        # non-ASCII output if localization is used unless this is
        # set via LC_ALL=C or via "--characters-as-bytes".
        printf_str = ""
        for (i=1; i in result; i++) {
            printf_str = printf_str sprintf("\\%03o", result[i])
            if (length(printf_str) >= 1024) {
                system("printf '" printf_str "'")
                printf_str = ""
            }
            delete result[i]
        }
        system("printf '" printf_str "'")
    }
    $ base64 some > some.txt
    $ awk -f base64decode.awk some.txt > some
    $ busybox awk -f base64decode.awk some.txt > some
busybox不一定有nc，如果有awk就可以用前面这招。awk脚本执行效率很低，极端情况下聊胜于无。base64decode.awk在一个很弱的busybox环境下成功解码。
### 2) base64.awk
Danny Chouinard的原实现在做base64编码时没有正确处理结尾的=，他固定添加“==”。
这个问题不大，原脚本产生的编码输出可以被原脚本有效解码，但用其他工具解码原脚本产生的编码输出时可能容错度不够。比如“scz@nsfocus”经原脚本编码产生`“c2N6QG5zZm9jdXM==”`，结尾多了一个=。
如果上下文都只用Danny Chouinard的原脚本，它的实现是最精简的。
下面是改过的版本，确保base64编码输出符合规范，以便与其他工具混合使用。其base64编码功能无法直接处理binary，只能处理“xxd
-p”这类输入，允许出现空格。
暂时没有找到用awk直接处理binary的办法。
    #!/usr/bin/awk -f
    #
    # Author : Danny Chouinard
    # Modify : scz@nsfocus
    #
    function base64encode ()
    {
        o       = 0;
        bits    = 0;
        n       = 0;
        count   = 0;
        while ( getline )
        {
            for ( c = 0; c = maxn )
                            {
                                printf( "\n" );
                                n   = 0;
                            }
                            o       = 0;
                            bits    = 0;
                        }
                    }
                }
            }
        }
        if ( bits )
        {
            while ( bits++ = maxn )
            {
                printf( "\n" );
                n   = 0;
            }
        }
        count   = int( count / 2 ) % 3;
        if ( count )
        {
            for ( i = 0; i = maxn )
                {
                    printf( "\n" );
                    n   = 0;