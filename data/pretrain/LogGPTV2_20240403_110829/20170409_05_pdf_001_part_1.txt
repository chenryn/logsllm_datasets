TimescaleDB: SQL made scalable for time-series data
PI:EMAIL
1 Background KeyChallenges. Acentralgoalforatime-seriesdatabase
istosupportthehighwriteratestypicalofmanyofthese
Time-seriesdataiscroppingupinmoreandmoreplaces: applications,whichspanacrossindustries. Forexample,
monitoring and DevOps, sensor data and IoT, financial inInternetofThings(IoT)settings—whetherindustrial,
data,logisticsdata,appusagedata,andmore. Oftenthis agricultural,urban,orconsumer—highwriteratesresult
dataishighinvolumeandcomplexinnature(e.g.,mul- from large numbers of devices coupled with modest to
tiple measurements and labels associated with a single high write rates per device. In logistics settings, both
time). Thismeansthatstoringtime-seriesdatademands planning data and actuals comprise time series that can
both scale and efficient complex queries. Yet achiev- be associated with each tracked object. Monitoring ap-
ingbothofthesepropertieshasremainedelusive. Users plications, such as in DevOps, may track many metrics
havetypicallybeenfacedwiththetrade-offbetweenthe per system component. Many forms of financial appli-
horizontal scalability of NoSQL vs. the query power of cations, such as those based on tick data, also rely on
relationaldatabases. time-seriesdata. Allrequireadatabasethatcanscaleto
TimescaleDBisanewopen-sourcedatabasedesigned ahighingestrate.
to make SQL scalable for time-series data. In a world
Further, these applications often want to query their
typically split between RDBMS and NoSQL databases,
data in complex and arbitrary (yet performant) ways,
TimescaleDB provides a third option that combines the
beyond simply fetching or aggregating a single metric
best of both: a clustered scale-out architecture and rich
acrossaparticulartimeperiod. Suchquerypatternsmay
supportforcomplexqueries. Itscalesouthorizontallyto
involve rich predicates (e.g., complex conjunctions in a
supporthighingestratesbytransparentlyperformingau-
WHEREclause),aggregations,statisticalfunctions,win-
tomaticspace-timepartitioningandqueryoptimizations,
dowed operations, JOINs against relational data, and so
yet allows users to interact with their data as if it were
forth. Ratherthancreateanewquerylanguage—which
in a single, continuous table. It supports fast queries would require both new training by developers and an-
by performing efficient indexing and optimizations for
alysts, as well as new customer interfaces or connectors
selecting and aggregating non-primary keys. Data is
to integrate with other systems—a time-series database
available for querying in real-time, avoiding the need
shouldideallysupportstandardSQLandexposetheab-
to delay writes in order to bulk load data. In addition,
stractionofasingleglobaltable,eventhoughtheunderly-
becauseTimescaleDBisengineeredupfromPostgresas
ingstoragemaybepartitionedorshardedbetweenservers
anextension,itprovidesafullSQLinterface(including
and/or disks. Such a design allows one to interact with
supportforsecondaryindexesandjoins),whileinheriting
dataasifitwerewithinastandardtable,hidingthecom-
Postgres’sreliability,matureecosystem,andoperational
plexity of any data partitioning and query optimization
easeofuse.
fromtheuser.
As time becomes a more critical dimension along
whichdataismeasured,TimescaleDBenablesdevelopers How do we scale SQL? At first glance, this claim of a
andorganizationstoharnessmoreofitspower: analyz- scale-out,efficientSQLdatabasemayseemincredulous;
ingthepast,understandingthepresent,andpredictingthe afterall,didn’ttheentireNoSQLmovementemergedue
future. Unifying time-series data and relational data at to the limitations of SQL databases for precisely these
thequerylevelremovesdatasilos,andmakesdemosand properties? Yet this movement came in response to the
prototypeseasiertogetofftheground. Thecombination useofSQLdatabasesfortraditionaltransactional(OLTP)
ofscalabilityandafullSQLinterfaceempowersabroad workloads. In OLTP, writes are typically transactional
varietyofpeopleacrossanorganization(e.g.,developers, updates of multiple rows of existing data (e.g., debiting
productmanagers,businessanalysts,etc.) todirectlyask money from one bank account and crediting another in
questions of the data. In other words, by supporting a anatomicfashion). Time-seriesworkloadsaredifferent
query language already in wide use, TimescaleDB en- intwokeyways.
suresthatyourquestionsarelimitedbyyourimagination, (1)Time-seriesdataislargelyimmutable. Newdata
notthedatabase. continuallyarrives, typicallycorrespondingtothelatest
1
time periods. In other words, writes primarily occur as tom query language includes a numerical column (e.g.,
new inserts, not as updates to existing rows. Further, cpu > 0.7). String columns pose other challenges for
while the database needs to be able to support backfill most NoSQL time-series databases. For example, one
fordelayeddata,writesaremadeprimarilytorecenttime approach for indexing string columns (e.g., ip_address,
intervals. uuid, event_name) is to use a concatenated string of all
(2)Workloadshaveanaturalpartitioningacrossboth indexedvaluesasakey. Thiscreatesatradeoffbetween
time and space. Writes typically are made to the lat- thenumberofindexedfieldsandperformance: searching
est time interval(s) and across the “partitioning key” in foronefieldrequiresascanacrossallotherindexedfields.
the space dimension (e.g., data sources, devices, users, Theseproblemsmakemulti-fieldqueries(e.g.,“allmet-
etc.). Queries typically ask questions about a specific rics from devices of a certain type with low battery”)
time series or data source, or across many data sources less efficient. Such queries are quite common in dash-
constrainedtosometimeinterval. Yetthequeriesmight boards,reports,anddataexploration. Further,theylack
not be limited to a particular metric, but may regularly the reliability, tooling, and ecosystem of more widely-
selectmultiplemetricsatonce(orusepredicatesthatrely usedtraditionalRDBMSsystems.
onmultiplemetrics). Data lakes (e.g., SQL / Hadoop / Spark on HDFS).
Such workloads open up a new space of database ar- Distributedblock/filesystemslikeHDFSavoidtheneed
chitecture possibilities, of which TimescaleDB heavily to predefine data models or schemas, and easily scale
takesadvantage. Notably,notonlyarethesecharacteris- by adding more servers. They also can handle high
ticsdifferentfromtraditionalOLTPworkloads, butalso write rates by large, immutable batches of data. How-
from analytical (OLAP) workloads that focus on read- ever, they pay the cost at query time, lacking the highly
heavyrollupsandaggregationsofsinglemetrics. structured indexes needed for fast and resource-efficient
queries. Further, data backfill and updates are difficult
2 Limitations of existing solutions andveryexpensive,giventheirunderlyingstorageinlarge
immutableblocks.
Existingsolutionsrequireuserstochoosebetweeneither
So, while query engines on top of HDFS can expose
scalabilityorrichquerysupport.
a SQL or rich programming interface (e.g., Presto, Pig,
Vanilla RDBMS (e.g., PostgreSQL, MySQL). Tradi- SparkSQL,etc.) manytypesofqueriesthatcanbehan-
tionalSQLdatabaseshavetwokeyproblemsinhandling dled efficiently by RDBMS with appropriate index sup-
high ingest rates: They have poor write performance portturnintofulltablescansintheirunderlyingstorage
for large tables, and this problem only becomes worse interface. While HDFS allows such scans to be eas-
over time as data volume grows linearly in time. These ilyparallelized,querylatencyandthroughputstillsuffer
problems emerge when table indexes can no longer fit significantly. This relegates such architectures more for
in memory, as each insert will translate to many disk single-tenant data exploration or report generation, not
fetchestoswapinportionsoftheindexes’B-Trees. Fur- dashboardingorreal-timeoperationalmonitoring.
ther, any data deletion (to save space or to implement
dataretentionpolicies)willrequireexpensive“vacuum-
3 TimescaleDB architecture
ing”operationstodefragmentthediskstorageassociated
with such tables. Also, out-of-the-box open-source so- TimescaleDBisanopen-sourcedatabasefortime-series
lutionsforscaling-outRDBMSacrossmanyserversare data. Its goal is to enable both the scale-out nature of
stilllacking. NoSQLdatabases, andthereliabilityandquerysupport
NoSQL and time-series DBs. In response, devel- ofatraditionalrelationalDB.We’vedesignedanewclus-
opers sometimes adopt NoSQL databases (e.g., Cas- tered DB in this manner, built around a Postgres core
sandra, Mongo) or modern time-series databases (e.g., runningoneachserver.
OpenTSDB, InfluxDB) for their needs. These are typi- TimescaleDB supports the key features of a modern
cally column-oriented databases for fast ingest and fast time-seriesdatabase,assummarizedinFigure1.
analytical queries over one column, often exposing a Hypertablesandchunks. Atahigh-level,thedatabase
simpler key-value interface. Depending on data model exposes the abstraction of a single continuous table—a
choices, this works well for visualizing either a single hypertable—acrossallspaceandtimeintervals,suchthat
metric(e.g.,theCPUutilizationofadevice)orsomeag- onecanqueryitviavanillaSQL.Ahypertableisdefined
gregatemetric(e.g.,averageCPUoveralldevices). But, with a standard schema with column names and types,
theyoftenlackarichquerylanguageorsecondaryindex withatleastonecolumnspecifyingatimevalue,and—in
support,andsufferhighlatencyoncomplexqueries. clustereddeployments—onecolumnspecifyinga“parti-
For example, databases like InfluxDB will fall back tioning key” over which the dataset can be additionally
to full table scans if the WHERE clause of their cus- partitioned.
2
• Time-seriesdataoptimized • Optimizationsforcomplexqueries
• FullSQLinterface −Intelligentchunkselectionforqueries
• Scalingupandout −Minimizescanningfordistinctitems
−Transparenttime/spacepartitioning −Limitpushdowns
−Parallelizedopsacrosschunksandservers −Parallelizedaggregation
−Right-sizedchunksforsinglenodes • Leverageexistingqueryplanner
• Highdatawriterates −Joinagainstrelationaldata
−Batchedcommits −Geo-spatialqueries
−In-memoryindexes • Flexiblemanagement
−Transactionalsupport −LeverageexistingDBecosystemandtooling
−Supportfordatabackfill −Highlyreliable(streamingreplication,backups)
−Automateddataretentionpolicies
Figure1: KeyfeaturesofTimescaleDB.
Internally, TimescaleDB automatically splits the hy- • Simple read requirements: When most of your
pertable into chunks, where a chunk corresponds to a querypatternsaresimpleinnature(e.g.,key-based
“two-dimensional” split according to a specific time in- lookups,oronedimensionalrollupsovertime).
tervalandaregionofthepartitionkey’sspace(e.g.,using • Lowavailablestorage: Whenresourceconstraints
hashing). Each chunk is implemented using a standard placestorageatapremium,andheavycompression
databasetablethatisautomaticallyplacedononeofthe isrequired. (Althoughthisisanareaofactivedevel-
database nodes (or replicated between multiple nodes), opment,andweexpectTimescaleDBtoimprove.)
althoughthisdetailislargelyhiddenfromusers. Asingle • Sparse and/or unstructured data: When your
TimescaleDBdeploymentcanstoremultiplehypertables, time-series data is especially sparse and/or gener-
eachwithdifferentschemas. allyunstructured. (Butevenifyourdataispartially
structured, TimescaleDB includes a JSONB field
Engineered up from PostgreSQL. By choosing to en- type for the unstructured part(s). This allows you
gineer up from PostgreSQL, rather than building from to maintain indexes on the structured parts of your
scratch,TimescaleDBgainsfourimmediatebenefits. data combined with the flexibility of unstructured
storage.)
1. Rock-solidreliability. Atitscore,TimescaleDB’s
reliability manifests from Postgres’ 20-year open-
sourcerecordandstrongdevelopercommunity. 4 Technical details
2. Mature ecosystem. TimescaleDB users can con-
nect via standard ODBC, JDBC, or Postgres for Ideallydatabaseusersshouldbeabletointeractwithtime-
third-party visualization tools, BI tools, manage- seriesdataasifitwereinasimplecontinuousdatabase
mentinterfaces,webplatformsandORMs. table. However,forreasonsdiscussedabove,usingasin-
3. Standard interface. TimescaleDB users do not gletabledoesnotscale. Yetrequiringuserstomanually
needtolearnanewquerylanguageandmanagement partition their data exposes a host of complexities, e.g.,
framework, andcanleveragetheirexistingcomfort forcing users to constantly specify which partitions to
withSQLandPostgres. query, how to compute JOINs between them, or how to
4. OperationalEaseofUse. Userscanreuseknown properlysizethesetablesasworkloadschange.
and trusted methods for backups, snapshots, active
Toavoidthismanagementcomplexitywhilestillscal-
replication,andotheroperationaltasks.
ingandsupportingefficientqueries,TimescaleDBhides
Infact,allofTimescaleDBisimplementedasaPost- its automated data partitioning and query optimizations
gresextension,ratherthanafork,socanbeinstalledon behinditshypertableabstraction. Creatingahypertable
astandarddistributionofPostgres. anditscorrespondingschemaisasimple,standardSQL
command(seeFigure2),andthishypertablecanthenbe
When you might want to consider alternatives. accessedasifitwereasingletableusingstandardSQL
Database design typically requires making deliberate commands (see Figure 3). Further, just like a normal
trade-offs, and we would be remiss not to mention the database table, this schema can be altered via standard
scenarioswheretheremaybebetteralternatives: SQLcommands;transparentlytotheuser,TimescaleDB
3
# Create a schema for a new hypertable # Metrics about resource-constrained devices
CREATE TABLE sensor_data ( SELECT time, cpu, freemem, battery FROM devops
"time" timestamp with time zone NOT NULL, WHERE device_id=’foo’
device_id TEXT NOT NULL, AND cpu > 0.7 AND freemem  50
(’sensor_data’, ’time’, ’device_id’, 16); AND time > now() - interval ’7 day’
GROUP BY hour, firmware
# Migrate data from existing Postgres table into ORDER BY hour DESC, errno DESC;
# a TimescaleDB hypertable
INSERT INTO sensor_data (SELECT * FROM old_data); # Find average bus speed in last hour
# for each NYC borough
# Query hypertable like any SQL table SELECT loc.region, AVG(bus.speed) FROM bus
SELECT device_id, AVG(temperature) from sensor_data INNER JOIN loc ON (bus.bus_id = loc.bus_id)
WHERE temperature IS NOT NULL AND humidity > 0.5 WHERE loc.city = ’nyc’
AND time > now() - interval ’7 day’ AND bus.time > now() - interval ’1 hour’
GROUP BY device_id; GROUP BY loc.region;
Figure2:CreatinganewhypertableisasimpleSQLcommand. Figure3: QueryexamplesusingstandardSQLandtheabstrac-
Subsequently, users can interact with a hypertable as if it’s tionofasingleglobaltable. Notethatthecomplexitiesofdata
a standard, single database table, including issuing full SQL partitioningforscalabilityishiddenfromtheuser.
queriesonit.
discusslater,informationaboutchunks’rangesallowsthe
isatomicallymodifyingtheschemasofalltheunderlying queryplannertodeterminewhichchunkstoquerywhen
chunksthatcompriseahypertable. resolvingaquery,particularlywhenWHEREorGROUP
TimescaleDB provides this functionality by hooking BY clauses include the time or space (partitioning key)
into the query planner of Postgres, so that it receives dimension (this is commonly referred to as constraint
the native SQL parse tree. It then can use this tree to exclusionanalysis).
determine which servers and hypertable chunks (native Local indexes can be built on any database column,
databasetables)toaccess,howtoperformdistributedand notonlyonthemainpartitioningkey,andaredefinedas
paralleloptimizations,etc. the conjunction of both time and the column being in-
Manyofthesesameoptimizationsevenapplytosingle- dexed. Forexample,inthehypertableshowninFigure2,
node deployments, where automatically splitting hyper- ifthepartitioningkeyisdeviceid,secondaryindexesalso
tables into chunks and related query optimizations still canbedefinedonlocationandanyofthenumericalsen-
providesanumberofperformancebenefits. sorreadings(temperature,humidity,particulatematter).
WehighlightandexplainTimescaleDB’sarchitecture By defining the local index on both these columns and