.br ferror (3),
.br unlocked_stdio (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2016, michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th nextup 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
nextup, nextupf, nextupl, nextdown, nextdownf, nextdownl \-
return next floating-point number toward positive/negative infinity
.sh synopsis
.nf
.br "#define _gnu_source" "     /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "double nextup(double " x );
.bi "float nextupf(float " x );
.bi "long double nextupl(long double " x );
.pp
.bi "double nextdown(double " x );
.bi "float nextdownf(float " x );
.bi "long double nextdownl(long double " x );
.fi
.pp
link with \fi\-lm\fp.
.sh description
the
.br nextup (),
.br nextupf (),
and
.br nextupl ()
functions return the next representable floating-point number greater than
.ir x .
.pp
if
.i x
is the smallest representable negative number in the corresponding type,
these functions return \-0.
if
.i x
is 0, the returned value is the smallest representable positive number
of the corresponding type.
.pp
if
.i x
is positive infinity, the returned value is positive infinity.
if
.i x
is negative infinity,
the returned value is the largest representable finite negative number
of the corresponding type.
.pp
if
.i x
is nan,
the returned value is nan.
.pp
the value returned by
.ir nextdown(x)
is
.ir \-nextup(\-x) ,
and similarly for the other types.
.sh return value
see description.
.\" .sh errors
.sh versions
these functions first appeared in glibc in version 2.24.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br nextup (),
.br nextupf (),
.br nextupl (),
.br nextdown (),
.br nextdownf (),
.br nextdownl ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
these functions are described in
.ir "ieee std 754-2008 - standard for floating-point arithmetic"
and
.ir "iso/iec ts 18661".
.sh see also
.br nearbyint (3),
.br nextafter (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 rickard e. faith (PI:EMAIL) and
.\" and copyright 2006 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified 21 aug 1994 by michael chastain :
.\"   removed note about old libc (pre-4.5.26) translating to 'sync'.
.\" modified 15 apr 1995 by michael chastain :
.\"   added `see also' section.
.\" modified 13 apr 1996 by markus kuhn 
.\"   added remarks about fdatasync.
.\" modified 31 jan 1997 by eric s. raymond 
.\" modified 18 apr 2001 by andi kleen
.\"   fix description to describe what it really does; add a few caveats.
.\" 2006-04-28, mtk, substantial rewrite of various parts.
.\" 2012-02-27 various changes by christoph hellwig 
.\"
.th fsync 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
fsync, fdatasync \- synchronize a file's in-core state with storage device
.sh synopsis
.nf
.b #include 
.pp
.bi "int fsync(int " fd );
.pp
.bi "int fdatasync(int " fd );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.nf
.br fsync ():
    glibc 2.16 and later:
        no feature test macros need be defined
    glibc up to and including 2.15:
        _bsd_source || _xopen_source
            || /* since glibc 2.8: */ _posix_c_source >= 200112l
.fi
.pp
.br fdatasync ():
.nf
    _posix_c_source >= 199309l || _xopen_source >= 500
.fi
.sh description
.br fsync ()
transfers ("flushes") all modified in-core data of
(i.e., modified buffer cache pages for) the
file referred to by the file descriptor
.i fd
to the disk device (or other permanent storage device) so that all
changed information can be retrieved even if the system crashes or
is rebooted.
this includes writing through or flushing a disk cache if present.
the call blocks until the device reports that the transfer has completed.
.pp
as well as flushing the file data,
.br fsync ()
also flushes the metadata information associated with the file (see
.br inode (7)).
.pp
calling
.br fsync ()
does not necessarily ensure
that the entry in the directory containing the file has also reached disk.
for that an explicit
.br fsync ()
on a file descriptor for the directory is also needed.
.pp
.br fdatasync ()
is similar to
.br fsync (),
but does not flush modified metadata unless that metadata
is needed in order to allow a subsequent data retrieval to be
correctly handled.
for example, changes to
.i st_atime
or
.i st_mtime
(respectively, time of last access and
time of last modification; see
.br inode (7))
do not require flushing because they are not necessary for
a subsequent data read to be handled correctly.
on the other hand, a change to the file size
.ri ( st_size ,
as made by say
.br ftruncate (2)),
would require a metadata flush.
.pp
the aim of
.br fdatasync ()
is to reduce disk activity for applications that do not
require all metadata to be synchronized with the disk.
.sh return value
on success, these system calls return zero.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
.i fd
is not a valid open file descriptor.
.tp
.b eio
an error occurred during synchronization.
this error may relate to data written to some other file descriptor
on the same file.
since linux 4.13,
.\" commit 088737f44bbf6378745f5b57b035e57ee3dc4750
errors from write-back will be reported to
all file descriptors that might have written the data which triggered
the error.
some filesystems (e.g., nfs) keep close track of which data
came through which file descriptor, and give more precise reporting.
other filesystems (e.g., most local filesystems) will report errors to
all file descriptors that were open on the file when the error was recorded.
.tp
.b enospc
disk space was exhausted while synchronizing.
.tp
.br erofs ", " einval
.i fd
is bound to a special file (e.g., a pipe, fifo, or socket)
which does not support synchronization.
.tp
.br enospc ", " edquot
.i fd
is bound to a file on nfs or another filesystem which does not allocate
space at the time of a
.br write (2)
system call, and some previous write failed due to insufficient
storage space.
.sh conforming to
posix.1-2001, posix.1-2008, 4.3bsd.
.pp
on posix systems on which
.br fdatasync ()
is available,
.b _posix_synchronized_io
is defined in
.i 
to a value greater than 0.
(see also
.br sysconf (3).)
.\" posix.1-2001: it shall be defined to -1 or 0 or 200112l.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines them to 1.
.sh notes
on some unix systems (but not linux),
.i fd
must be a
.i writable
file descriptor.
.pp
in linux 2.2 and earlier,
.br fdatasync ()
is equivalent to
.br fsync (),
and so has no performance advantage.
.pp
the
.br fsync ()
implementations in older kernels and lesser used filesystems
do not know how to flush disk caches.
in these cases disk caches need to be disabled using
.br hdparm (8)
or
.br sdparm (8)
to guarantee safe operation.
.sh see also
.br sync (1),
.br bdflush (2),
.br open (2),
.br posix_fadvise (2),
.br pwritev (2),
.br sync (2),
.br sync_file_range (2),
.br fflush (3),
.br fileno (3),
.br hdparm (8),
.br mount (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/scalbln.3
.so man4/mem.4
.so man3/rpc.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\" and copyright (c) 2008 linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\"     libc.info (from glibc distribution)
.\" modified sat jul 24 19:12:00 1993 by rik faith 
.\" modified sun sep  3 20:29:36 1995 by jim van zandt 
.\" changed network into host byte order (for inet_network),
.\"     andreas jaeger , 980130.
.\" 2008-06-19, mtk
.\"     describe the various address forms supported by inet_aton().
.\"     clarify discussion of inet_lnaof(), inet_netof(), and inet_makeaddr().
.\"     add discussion of classful addressing, noting that it is obsolete.
.\"     added an example program.
.\"
.th inet 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
inet_aton, inet_addr, inet_network, inet_ntoa, inet_makeaddr, inet_lnaof,
inet_netof \- internet address manipulation routines
.sh synopsis
.nf
.b #include 
.b #include 
.b #include 
.pp
.bi "int inet_aton(const char *" cp ", struct in_addr *" inp );
.pp
.bi "in_addr_t inet_addr(const char *" cp );
.bi "in_addr_t inet_network(const char *" cp );
.pp
.bi "char *inet_ntoa(struct in_addr " in );
.pp
.bi "struct in_addr inet_makeaddr(in_addr_t " net ", in_addr_t " host );
.pp
.bi "in_addr_t inet_lnaof(struct in_addr " in );
.bi "in_addr_t inet_netof(struct in_addr " in );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br inet_aton (),
.br inet_ntoa ():
.nf
    since glibc 2.19:
        _default_source
    in glibc up to and including 2.19:
        _bsd_source || _bsd_source
.fi
.sh description
.br inet_aton ()
converts the internet host address \ficp\fp from the
ipv4 numbers-and-dots notation into binary form (in network byte order)
and stores it in the structure that \fiinp\fp points to.
.br inet_aton ()
returns nonzero if the address is valid, zero if not.
the address supplied in
.i cp
can have one of the following forms:
.tp 10
.i a.b.c.d
each of the four numeric parts specifies a byte of the address;
the bytes are assigned in left-to-right order to produce the binary address.
.tp
.i a.b.c
parts
.i a
and
.i b
specify the first two bytes of the binary address.
part
.i c
is interpreted as a 16-bit value that defines the rightmost two bytes
of the binary address.
this notation is suitable for specifying (outmoded) class b
network addresses.
.tp
.i a.b
part
.i a
specifies the first byte of the binary address.
part
.i b
is interpreted as a 24-bit value that defines the rightmost three bytes
of the binary address.
this notation is suitable for specifying (outmoded) class a
network addresses.
.tp
.i a
the value
.i a
is interpreted as a 32-bit value that is stored directly
into the binary address without any byte rearrangement.
.pp
in all of the above forms,
components of the dotted address can be specified in decimal,
octal (with a leading
.ir 0 ),
or hexadecimal, with a leading
.ir 0x ).
addresses in any of these forms are collectively termed
.ir "ipv4 numbers-and-dots notation" .
the form that uses exactly four decimal numbers is referred to as
.ir "ipv4 dotted-decimal notation"
(or sometimes:
.ir "ipv4 dotted-quad notation" ).
.pp
.br inet_aton ()
returns 1 if the supplied string was successfully interpreted,
or 0 if the string is invalid
.rb ( errno
is
.i not
set on error).
.pp
the
.br inet_addr ()
function converts the internet host address
\ficp\fp from ipv4 numbers-and-dots notation into binary data in network
byte order.
if the input is invalid,
.b inaddr_none
(usually \-1) is returned.
use of this function is problematic because \-1 is a valid address
(255.255.255.255).
avoid its use in favor of
.br inet_aton (),
.br inet_pton (3),
or
.br getaddrinfo (3),
which provide a cleaner way to indicate error return.
.pp
the
.br inet_network ()
function converts
.ir cp ,
a string in ipv4 numbers-and-dots notation,
into a number in host byte order suitable for use as an
internet network address.
on success, the converted address is returned.
if the input is invalid, \-1 is returned.
.pp
the
.br inet_ntoa ()
function converts the internet host address
\fiin\fp, given in network byte order, to a string in ipv4
dotted-decimal notation.
the string is returned in a statically
allocated buffer, which subsequent calls will overwrite.
.pp
the
.br inet_lnaof ()
function returns the local network address part
of the internet address \fiin\fp.
the returned value is in host byte order.
.pp
the
.br inet_netof ()
function returns the network number part of
the internet address \fiin\fp.
the returned value is in host byte order.
.pp
the
.br inet_makeaddr ()
function is the converse of
.br inet_netof ()
and
.br inet_lnaof ().