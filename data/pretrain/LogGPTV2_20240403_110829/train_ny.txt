### ferror (3), unlocked_stdio (3)

**COLophon**

This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).

**Copyright and License**

- **Copyright (c) 2016, Michael Kerrisk**
- **License:**
  - Permission is granted to make and distribute verbatim copies of this manual, provided the copyright notice and this permission notice are preserved on all copies.
  - Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.
  - Since the Linux kernel and libraries are constantly changing, this manual page may be incorrect or out-of-date. The author(s) assume no responsibility for errors or omissions, or for damages resulting from the use of the information contained herein. The author(s) may not have taken the same level of care in the production of this manual, which is licensed free of charge, as they might when working professionally.
  - Formatted or processed versions of this manual, if unaccompanied by the source, must acknowledge the copyright and authors of this work.

**nextup (3) - Linux Programmer's Manual**

**Name**

`nextup`, `nextupf`, `nextupl`, `nextdown`, `nextdownf`, `nextdownl` - Return next floating-point number toward positive/negative infinity

**Synopsis**

```c
#define _GNU_SOURCE         /* See feature_test_macros(7) */
#include <math.h>

double nextup(double x);
float nextupf(float x);
long double nextupl(long double x);

double nextdown(double x);
float nextdownf(float x);
long double nextdownl(long double x);

/* Link with -lm */
```

**Description**

The `nextup()`, `nextupf()`, and `nextupl()` functions return the next representable floating-point number greater than `x`.

- If `x` is the smallest representable negative number in the corresponding type, these functions return `-0`.
- If `x` is `0`, the returned value is the smallest representable positive number of the corresponding type.
- If `x` is positive infinity, the returned value is positive infinity.
- If `x` is negative infinity, the returned value is the largest representable finite negative number of the corresponding type.
- If `x` is NaN, the returned value is NaN.

The value returned by `nextdown(x)` is `-nextup(-x)`, and similarly for the other types.

**Return Value**

See the description above.

**Versions**

These functions first appeared in glibc in version 2.24.

**Attributes**

For an explanation of the terms used in this section, see `attributes(7)`.

| Interface            | Attribute   | Value  |
|----------------------|-------------|--------|
| `nextup()`, `nextupf()`, `nextupl()`, `nextdown()`, `nextdownf()`, `nextdownl()` | Thread safety | MT-Safe |

**Conforming to**

These functions are described in IEEE Std 754-2008 - Standard for Floating-Point Arithmetic and ISO/IEC TS 18661.

**See Also**

- `nearbyint(3)`
- `nextafter(3)`

---

### fsync (2) - Linux Programmer's Manual

**Name**

`fsync`, `fdatasync` - Synchronize a file's in-core state with storage device

**Synopsis**

```c
#include <unistd.h>

int fsync(int fd);
int fdatasync(int fd);
```

**Feature Test Macro Requirements for glibc (see `feature_test_macros(7)`):**

- `fsync()`:
  - Glibc 2.16 and later: No feature test macros need to be defined.
  - Glibc up to and including 2.15: `_BSD_SOURCE || _XOPEN_SOURCE || /* since glibc 2.8: */ _POSIX_C_SOURCE >= 200112L`
- `fdatasync()`:
  - `_POSIX_C_SOURCE >= 199309L || _XOPEN_SOURCE >= 500`

**Description**

- `fsync()` transfers ("flushes") all modified in-core data of the file referred to by the file descriptor `fd` to the disk device (or other permanent storage device) so that all changed information can be retrieved even if the system crashes or is rebooted. This includes writing through or flushing a disk cache if present. The call blocks until the device reports that the transfer has completed.
- `fsync()` also flushes the metadata information associated with the file (see `inode(7)`).
- Calling `fsync()` does not necessarily ensure that the entry in the directory containing the file has also reached disk. For that, an explicit `fsync()` on a file descriptor for the directory is also needed.
- `fdatasync()` is similar to `fsync()`, but does not flush modified metadata unless that metadata is needed in order to allow a subsequent data retrieval to be correctly handled. For example, changes to `st_atime` or `st_mtime` (respectively, time of last access and time of last modification; see `inode(7)`) do not require flushing because they are not necessary for a subsequent data read to be handled correctly. On the other hand, a change to the file size (`st_size`, as made by `ftruncate(2)`) would require a metadata flush.
- The aim of `fdatasync()` is to reduce disk activity for applications that do not require all metadata to be synchronized with the disk.

**Return Value**

On success, these system calls return zero. On error, `-1` is returned, and `errno` is set to indicate the error.

**Errors**

- `EBADF`: `fd` is not a valid open file descriptor.
- `EIO`: An error occurred during synchronization. This error may relate to data written to some other file descriptor on the same file. Since Linux 4.13, errors from write-back will be reported to all file descriptors that might have written the data which triggered the error.
- `ENOSPC`: Disk space was exhausted while synchronizing.
- `EROFS`, `EINVAL`: `fd` is bound to a special file (e.g., a pipe, FIFO, or socket) which does not support synchronization.
- `ENOSPC`, `EDQUOT`: `fd` is bound to a file on NFS or another filesystem which does not allocate space at the time of a `write(2)` system call, and some previous write failed due to insufficient storage space.

**Conforming to**

POSIX.1-2001, POSIX.1-2008, 4.3BSD.

- On POSIX systems on which `fdatasync()` is available, `_POSIX_SYNCHRONIZED_IO` is defined in `<unistd.h>` to a value greater than 0. (See also `sysconf(3)`.)

**Notes**

- On some Unix systems (but not Linux), `fd` must be a writable file descriptor.
- In Linux 2.2 and earlier, `fdatasync()` is equivalent to `fsync()`, and so has no performance advantage.
- The `fsync()` implementations in older kernels and lesser-used filesystems do not know how to flush disk caches. In these cases, disk caches need to be disabled using `hdparm(8)` or `sdparm(8)` to guarantee safe operation.

**See Also**

- `sync(1)`
- `bdflush(2)`
- `open(2)`
- `posix_fadvise(2)`
- `pwritev(2)`
- `sync(2)`
- `sync_file_range(2)`
- `fflush(3)`
- `fileno(3)`
- `hdparm(8)`
- `mount(8)`

**COLophon**

This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).

---

### inet (3) - Linux Programmer's Manual

**Name**

`inet_aton`, `inet_addr`, `inet_network`, `inet_ntoa`, `inet_makeaddr`, `inet_lnaof`, `inet_netof` - Internet address manipulation routines

**Synopsis**

```c
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>

int inet_aton(const char *cp, struct in_addr *inp);
in_addr_t inet_addr(const char *cp);
in_addr_t inet_network(const char *cp);
char *inet_ntoa(struct in_addr in);
struct in_addr inet_makeaddr(in_addr_t net, in_addr_t host);
in_addr_t inet_lnaof(struct in_addr in);
in_addr_t inet_netof(struct in_addr in);
```

**Feature Test Macro Requirements for glibc (see `feature_test_macros(7)`):**

- `inet_aton()`, `inet_ntoa()`:
  - Since glibc 2.19: `_DEFAULT_SOURCE`
  - In glibc up to and including 2.19: `_BSD_SOURCE || _SVID_SOURCE`

**Description**

- `inet_aton()` converts the Internet host address `cp` from the IPv4 numbers-and-dots notation into binary form (in network byte order) and stores it in the structure that `inp` points to. `inet_aton()` returns nonzero if the address is valid, zero if not. The address supplied in `cp` can have one of the following forms:
  - `a.b.c.d`: Each of the four numeric parts specifies a byte of the address; the bytes are assigned in left-to-right order to produce the binary address.
  - `a.b.c`: Parts `a` and `b` specify the first two bytes of the binary address. Part `c` is interpreted as a 16-bit value that defines the rightmost two bytes of the binary address. This notation is suitable for specifying (outmoded) class B network addresses.
  - `a.b`: Part `a` specifies the first byte of the binary address. Part `b` is interpreted as a 24-bit value that defines the rightmost three bytes of the binary address. This notation is suitable for specifying (outmoded) class A network addresses.
  - `a`: The value `a` is interpreted as a 32-bit value that is stored directly into the binary address without any byte rearrangement.
- In all of the above forms, components of the dotted address can be specified in decimal, octal (with a leading `0`), or hexadecimal (with a leading `0x`). Addresses in any of these forms are collectively termed "IPv4 numbers-and-dots notation." The form that uses exactly four decimal numbers is referred to as "IPv4 dotted-decimal notation" (or sometimes: "IPv4 dotted-quad notation").
- `inet_aton()` returns 1 if the supplied string was successfully interpreted, or 0 if the string is invalid (errno is not set on error).
- The `inet_addr()` function converts the Internet host address `cp` from IPv4 numbers-and-dots notation into binary data in network byte order. If the input is invalid, `INADDR_NONE` (usually -1) is returned. Use of this function is problematic because -1 is a valid address (255.255.255.255). Avoid its use in favor of `inet_aton()`, `inet_pton(3)`, or `getaddrinfo(3)`, which provide a cleaner way to indicate error return.
- The `inet_network()` function converts `cp`, a string in IPv4 numbers-and-dots notation, into a number in host byte order suitable for use as an Internet network address. On success, the converted address is returned. If the input is invalid, -1 is returned.
- The `inet_ntoa()` function converts the Internet host address `in`, given in network byte order, to a string in IPv4 dotted-decimal notation. The string is returned in a statically allocated buffer, which subsequent calls will overwrite.
- The `inet_lnaof()` function returns the local network address part of the Internet address `in`. The returned value is in host byte order.
- The `inet_netof()` function returns the network number part of the Internet address `in`. The returned value is in host byte order.
- The `inet_makeaddr()` function is the converse of `inet_netof()` and `inet_lnaof()`.

**COLophon**

This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).