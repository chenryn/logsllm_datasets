the application. In response, they wrote an application 
version-checking harness that checks database version 
upon  user  login  and  automatically  runs  scripts  to 
update  the  database  (if  needed)  to  align  with  the 
current version of the application. Application changes 
to enable this capability were made to the presentation 
layer  and  business/data  layers,  such  as  the  ability  to 
detect  database  state  upon  login.  This  self-initiating 
update approach also supports availability because the 
upgrade  approach  did  not  require  taking  down  the 
application server. 
Initial  Tactic  Assessment:  Login-initiated  version 
monitoring 
tactic 
Condition Monitoring; however, the usage focuses on 
updating  an  element  in  the  application  (the  database) 
rather  than  handling  fault  or  failure.  The  ability  to 
bring the database to the correct version is a variation 
of the Availability tactic State Resynchronization. 
the  Availability 
is  similar 
to 
x  PB-D5:  Monitoring 
and 
they 
added 
auto-scaling.  Load 
balancing  and  monitoring  capabilities  were  used  to 
monitor  and  manage  average  load  cycles.  To  support 
scalability, 
for  worker 
components to grab jobs as they become free or start 
more  workers  if  needed.  This  approach  supports  the 
ability to scale up and down in an automated manner. 
Initial  Tactic  Assessment:  Load  balancing  is  an 
example of the Performance tactics Maintain Multiple 
Copies and Increase Available Resources. 
capability 
Project  C  is  a  financial  application  sales  portal.  The 
architecture is a distributed set of services with a front end built 
using Java Server Faces and a backend Microsoft SQL server 
database.  Project  C  was  originally  built  with  a  middle  tier 
leveraging  web  services  but  was  later  re-architected  to  use 
Enterprise  Java  Beans  instead  of  web  services.  Examples  of 
Project  C  design  decisions  gathered  in  response  to  IQ2  are 
summarized below: 
x  PC-D1:  Removing  web  services  and  collapsing  the 
middle 
tier.  Project  C  struggled  with  version 
synchronization between application and web services, 
latency  issues,  and  an  overly  complex  deployment 
configuration. They made the decision to remove web 
services  used  for  data  access  from  architecture  and 
rewrite these as Enterprise JavaBeans—essentially, the 
collapsing  of  the  entire  middle  tier.  This  change 
immediately 
eliminating 
marshaling and un-marshaling of XML and middle-tier 
transformation. With this change they could deploy the 
entire  application  as  one  file  (one  version)  to  the 
primary and replicated server environments. They also 
eliminated  a  configuration  in  which  the  application 
servers  had  to  be  updated  and  managed  separately 
from  the  middle-tier  servers.  After  the  change,  the 
servers  were  exactly  the  same,  which  eliminated 
synchronization  of  the  web-tier  and  the  middle-tier 
deployment.  Finally,  this  change  also  made  testing 
easier, because developers could test without having to 
set up and utilize web services. 
improved  performance, 
in 
is  an 
instance  of 
this  example 
Initial  Tactic  Assessment:  The  removal  of  web 
services 
the 
Performance tactic Reduce Overhead. 
It is also important to note the trade-off being made in 
this  example.  This  removal  of  the  web  services  layer 
promotes  performance  and  reduces  deployment  time 
and complexity, which may influence modifiability. 
x  PC-D2:  Parameterization.  Parameterization  is  used 
to  allow  for  changing  content  such  as  branding  or 
messages and marketing text. Project C also suggested 
avoiding use of static variables for ease of testing. 
Initial  Tactic  Assessment:  Use  of  Parameterization 
and use of Configuration Files are subtactics/variations 
of the Modifiability tactic Defer Binding Time. 
x  PC-D3:  Load  balancer.  Project  C  uses  a  load 
balancer  to  provide  active  and  passive  redundancy. 
This  also  allowed  them  to  roll  out  a  change  by 
switching  from  one  application  server  to  another 
(described  as  “blue-green  switching”  in  Continuous 
Delivery  [1]).  If  there  are  problems  with  the  release, 
the  other  version  is  still  running  and  users  can  be 
redirected to the other server. 
Initial  Tactic  Assessment:  The 
load  balancing 
capability  leverages  the  Performance  tactic  Maintain 
Multiple  Copies  and  the  Availability  tactic  Active 
Redundancy. 
x  PC-D4: Bundle and rollback feature and data layer 
change.  The  team  used  a  tool  called  RedGate  to 
deploy database SQL changes with a feature. With this 
approach,  the database  scripts  are  checked  in  and  the 
SQL  is  automatically  run  against  the  database  by  the 
build  tool.  This  approach  allows  application  feature 
and database changes to be rolled back simultaneously. 
Initial Tactic Assessment: The bundling and rollback 
capability leverages the Availability tactic Rollback. 
C.  Deployability Tactics Strawman Tree 
Fig. 1 is a straw-man deployability tactics tree derived from 
raw  data  in  Section  III.B  intended  to  summarize  the  tactics 
collected  from  the  three  case  study  interviews.  Most  of  the 
tactics  captured  in  the  interview  data  crosscut  existing  tactic 
trees.  It  is  premature  to  try  to  say  with  absolutely  certainty 
whether these are existing “as is”, new or variations of existing 
tactics.  However,  based  on  the  interview  data  we  have 
collected  to  date  we  felt  comfortable  making  an  initial 
assessment which we hope to validate through follow on work. 
In  the  Fig  1  we  also  point  out  that  the  modifiability-related 
tactics shown under Enable Continuous Integration also enable 
Test Automation. The crosscutting tactics shown in Fig 1 are 
primarily from the performance, modifiability, testability, and 
availability tactics trees. 
IV.  DISCUSSION 
In  addition  to  employing  software  application-related 
architectural decisions and tactics, all three projects described 
using several other enablers that were critical to their success. 
These were generally a mix of practices and tool/environment 
support. For example, Project A created an automated database 
script to minimize update time during database release. Project 
B  leveraged  automated  deployment  scripting,  deployment-
focused  configuration  management  tools  (e.g.,  Chef),  and 
virtualized  environment  generation 
tools  (e.g.,  Vagrant). 
Project C used a tool called RedGate so they could bundle and 
deploy  database  SQL  changes  with  a  feature.  On  Project  B, 
while software architecture was not impacted by adopting these 
approaches and tools, other related architectural elements, such 
as  network  and  deployment  architecture,  were  impacted.  For 
example,  automated  deployment 
to  be 
reconfigured  to  communicate  with  staging  and  production 
networks, and all  necessary automation  client  tools  had  to be 
installed on virtual machines housing the application. 
systems  had 
The examples in the previous paragraph raise an interesting 
topic that our team spent some time discussing. Traditionally, 
there has been a fairly strict line drawn between the application 
and  supporting  infrastructure  and  tool  environment  (e.g., 
testing  tools,  configuration  management  tools,  deployment 
scripts, and other components). The later have been considered 
external  to  the  system.  Examples  such  as  those  described  by 
Project  B,  where  decisions  related  to  deployment  support 
significantly impact the infrastructure or network on which the 
applications 
even  production 
environments), beg the question of whether these components 
and  tools  traditionally  considered  external  to  the  application 
should continue to be thought of as external or whether we are 
entering an era  when  the  lines  are blurred and,  perhaps these 
should be reconsidered as a combined ecosystem. 
cases, 
some 
run 
(in 
V.  CONCLUSION 
This  work  is  intended  to  explore  the  hypothesis  that 
architecture  contributes  to  achieving  continuous  delivery  and 
deployability goals. The concrete tactics captured in this paper 
provide a start toward validating our hypothesis. Our hope is to 
continue  to  investigate  this  research  area  through  additional 
empirical research activities. Takeaways from our exploration  
include the following: 
x  As  we  analyzed  the  data  collected  in  our  interviews, 
we found that many of the key decisions made by the 
projects were architectural.  
FIG. 1. 
DEPLOYABILITY TACTICS TREE 
706
DevOps,” Proc. 2nd Annual Conf. Research in Information Technology, 
pp. 61-62, 2013. 
[4]  P. Kruchten, R. L. Nord, and I. Ozkaya, “Technical debt: from metaphor 
to theory and practice,” IEEE Software, vol. 29, no. 6, pp. 18-21, 2012. 
[5]  F.  Bachmann,  R.  L.  Nord,  and  I.  Ozkaya,  “Architectural  tactics  to 
support  rapid  and  agile  stability,”  CrossTalk:  The  Journal  of  Defense 
Software Engineering, vol. 25, no. 3, pp. 20-25, 2012. 
[6]  L. Bass, P. Clements, and R. Kazman, Software Architecture in Practice, 
3rd ed. Boston, MA: Addison-Wesley, 2012. 
[7]  M. Mäntyla, F. Khomh, B. Adams, E. Engström, and K. Petersen, “On 
rapid  releases  and  software  testing,”  Proc.  29th  IEEE  Intl.  Conf. 
Software Maintenance (ICSM), pp. 20-22, 2013. 
[8]  F.  Khomh,  T.  Dhaliwal,  Y.  Zou,  and  B.  Adams,  “Do  faster  releases 
improve software quality? An empirical case study of Mozilla Firefox,” 
Proc.  Working  Conf.  Mining  Software  Repositories  (MSR),  pp.  179-
188, 2012. 
[9]  L.  Bass,  R.  Jeffery,  H.  Wada,  I.  Weber,  and  L.  Zhu,  “Eliciting 
operations requirements for applications.” Presented at the International 
Workshop on Release Engineering, 2013.  
[10]  D.  Cukier,  “DevOps  patterns  to  scale  web  applications  using  cloud 
services,”  Proc.  2013  Companion  Publication  for  Conf.  Systems, 
Programming,  and  Applications:  Software  for  Humanity,  pp.  143-152, 
2013. 
[11]  D. Spinellis, “Don’t install software by hand,” IEEE Software, vol. 29, 
no. 4, pp. 86-87, 2012. 
no. 2, pp. 84-86, 2012. 
[12]  D. Spinellis, “Package management systems,”  IEEE Software, vol. 29, 
[13]  S.  Hosono,  J.  He,  X.  Liu,  L.  Li,  H.  Huang,  and  S.  Yoshino,  “Fast 
development platforms and methods for cloud applications,” Proc. 2011 
IEEE  Asia-Pacific  Services  Computing  Conf.,  APSCC  2011,  pp.  94-
101, 2011. 
[14]  A. Schaefer, M. Reichenbach, and D. Fey, “Continuous integration and 
automation for DevOps,” Lecture Notes in Electrical Engineering, vol. 
170 LNEE, pp. 345-358, 2013. 
[15]  K.  Gohil,  N.  Alapati,  and  S.  Joglekar,  “Towards  behavior  driven 
operations  (BDOps),”  IET  Seminar  Digest,  Proc.  3rd  Intl.  Conf. 
Advances  in  Recent  Technologies  in  Communication  and  Computing, 
pp. 262-264, 2011. 
x 
In  the examples that  we  collected  in response to  IQ1 
and IQ2, we found an initial set of embedded goals that 
we can use to form the top layer of a tactics tree. 
x  We  found  that  several  tactics  were  employed,  and 
while  there  are  some  new  variants  of  tactics,  the 
Deployability  tactics  crosscut  many  of  the  existing 
Quality Attribute tactics described in [6]. 
x  We found examples of important trade-offs the teams 
made  to  reduce  deployment  time,  complexity,  and 
overhead. We suggest that, just like with other quality 
attributes, it is important to have a clear understanding 
of  stakeholder  priorities  and  visibility  of  tradeoffs  to 
make  the  right  decisions  for  short  and  long  term 
deployability. 
ACKNOWLEDGMENTS 
We  acknowledge  Salient  Federal  Solutions  for  their 
technical contribution to this paper. 
Copyright  2014  Carnegie  Mellon  University  and  IEEE. 
This material is based upon work funded and supported by the 
Department  of  Defense  under  Contract  No.  FA8721-05-C-
0003 with Carnegie Mellon University for the operation of the 
Software Engineering Institute, a federally funded research and 
development center. 
This  material  has  been  approved  for  public  release  and 
unlimited distribution. DM-0001103 
REFERENCES 
[1] 
J.  Humble  and  D.  Farley,  Continuous  Delivery.  Boston, MA:  Addison 
Wesley, 2010. 
[2]  D.  Feitelson,  E.  Frachtenberg,  and  K.  Beck,  “Development  and 
deployment at Facebook,” IEEE Internet Computing, vol. 17, no. 4, pp. 
8-17, 2013. 
[3]  S.  Bang,  S.  Chung,  Y.  Choh,  and  M.  Dupuis,  “A  grounded  theory 
analysis of modern web applications: knowledge, skills, and abilities for 
707