本章也讨论了在Task类的辅助下，创建异步方法是非常容易的。同时，学会了如何使
用async和await关键字等待这些方法，而不会阻塞线程。最后，介绍了异步方法的错误处
理。
若想了解更多关于并行编程、线程和任务的详细信息，参考第21章。
第16章将继续关注C#和.NET的核心功能，详细介绍了反射、元数据和动态编程。
第16章
反射、元数据和动态编程
本章要点
● 使用自定义特性
● 在运行期间使用反射检查元数据
● 从支持反射的类中构建访问点
● 理解动态语言运行库
● 使用动态类型
● 托管DLR ScriptRuntime
● 用DynamicObject和ExpandoObject创建动态对象
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● LookupWhatsNew
● TypeView
● VectorClass
● WhatsNewAttributes
● DLRHost
● Dynamic
● DynamicFileReader
● ErrorExample
16.1 在运行期间检查代码和动态编程
本章讨论自定义特性、反射和动态编程。自定义特性允许把自定义元数据与程序元素
关联起来。这些元数据是在编译过程中创建的，并嵌入到程序集中。反射是一个普通术
语，它描述了在运行过程中检查和处理程序元素的功能。例如，反射允许完成以下任务：
● 枚举类型的成员
● 实例化新对象
● 执行对象的成员
● 查找类型的信息
● 查找程序集的信息
● 检查应用于某种类型的自定义特性
● 创建和编译新程序集
这个列表列出了许多功能，包括.NET 
Framework类库提供的一些最强大、最复杂的
功能。但本章不可能介绍反射的所有功能，仅讨论最常用的功能。
为了说明自定义特性和反射，我们将开发一个示例，说明公司如何定期升级软件，自
动记录升级的信息。在这个示例中，要定义几个自定义特性，表示程序元素最后修改的日
期，以及发生了什么变化。然后使用反射开发一个应用程序，它在程序集中查找这些特
性，自动显示软件自某个给定日期以来升级的所有信息。
本章要讨论的另一个示例是一个应用程序，该程序从数据库中读取信息或把信息写入
数据库，并使用自定义特性，把类和属性标记为对应的数据库表和列。然后在运行期间从
程序集中读取这些特性，使程序可以自动从数据库的相应位置检索或写入数据，无须为每
个表或每一列编写特定的逻辑。
本章的第二部分是动态编程，C#自从第4版添加了dynamic类型后，动态编程就成为
C#的一部分。随着Ruby、Python等语言的成长，以及JavaScript的使用更加广泛，动态编
程引起了人们越来越多的兴趣。尽管C#仍是一种静态的类型化语言，但这些新增内容给
它提供了一些开发人员期望的动态功能。使用动态语言功能，允许在C#中调用脚本函
数，简化COM交互操作。
本章介绍dynamic类型及其使用规则，并讨论DynamicObject的实现方式和使用方式。
另外，还将介绍DynamicObject的框架实现方式，即ExpandoObject。
16.2 自定义特性
前面介绍了如何在程序的各个数据项上定义特性。这些特性都是Microsoft定义好的，
作为.NET Framework类库的一部分，许多特性都得到了C#编译器的支持。对于这些特殊
的特性，编译器可以以特殊的方式定制编译过程，例如，可以根据StructLayout特性中的
信息在内存中布置结构。
.NET 
Framework也允许用户定义自己的特性。显然，这些特性不会影响编译过程，
因为编译器不能识别它们，但这些特性在应用于程序元素时，可以在编译好的程序集中用
作元数据。
这些元数据在文档说明中非常有用。但是，使自定义特性非常强大的因素是使用反
射，代码可以读取这些元数据，使用它们在运行期间做出决策。也就是说，自定义特性可
以直接影响代码运行的方式。例如，自定义特性可以用于支持对自定义许可类进行声明性
的代码访问安全检查，把信息与程序元素关联起来，程序元素由测试工具使用，或者在开
发可扩展的架构时，允许加载插件或模块。
16.2.1 编写自定义特性
为了理解编写自定义特性的方式，应了解一下在编译器遇到代码中某个应用了自定义
特性的元素时，该如何处理。以数据库为例，假定有一个C#属性声明，如下所示。
    [FieldName("SocialSecurityNumber")]
    public string SocialSecurityNumber
    {
      get {
          // etc.
当C#编译器发现这个属性（property）应用了一个FieldName特性时，首先会把字符串
Attribute追加到这个名称的后面，形成一个组合名称FieldNameAttribute，然后在其搜索路
径的所有名称空间（即在using语句中提及的名称空间）中搜索有指定名称的类。但要注
意，如果用一个特性标记数据项，而该特性的名称以字符串Attribute结尾，编译器就不会
把该字符串加到组合名称中，而是不修改该特性名。因此，上面的代码等价于：
    [FieldNameAttribute("SocialSecurityNumber")]
    public string SocialSecurityNumber
    {
      get {
        // etc.
编译器会找到含有该名称的类，且这个类直接或间接派生自System.Attribute。编译器
还认为这个类包含控制特性用法的信息。特别是属性类需要指定：
● 特性可以应用到哪些类型的程序元素上（类、结构、属性和方法等）
● 它是否可以多次应用到同一个程序元素上
● 特性在应用到类或接口上时，是否由派生类和接口继承
● 这个特性有哪些必选和可选参数
如果编译器找不到对应的特性类，或者找到一个特性类，但使用特性的方式与特性类
中的信息不匹配，编译器就会产生一个编译错误。例如，如果特性类指定该特性只能应用
于类，但我们把它应用到结构定义上，就会产生一个编译错误。
继续上面的示例，假定定义了一个FieldName特性：
    [AttributeUsage(AttributeTargets.Property,
      AllowMultiple=false,
      Inherited=false)]
    public class FieldNameAttribute: Attribute
    {
      private string _name;
      public FieldNameAttribute(string name)
      {
        _name = name;
      }
    }
下面几节讨论这个定义中的每个元素。
1．指定AttributeUsage特性
要注意的第一个问题是特性（attribute）类本身用一个特性——System.AttributeUsage
特性来标记。这是Microsoft定义的一个特性，C#编译器为它提供了特殊的支持（你可能
认为AttributeUsage根本不是一个特性，它更像一个元特性，因为它只能应用到其他特性
上，不能应用到类上）。AttributeUsage主要用于标识自定义特性可以应用到哪些类型的
程序元素上。这些信息由它的第一个参数给出，该参数是必选的，其类型是枚举类型
AttributeTargets。在上面的示例中，指定FieldName特性只能应用到属性（property）上
——这是因为我们在前面的代码段中把它应用到属性上。AttributeTargets枚举的成员如
下：
● All
● Assembly
● Class
● Constructor
● Delegate
● Enum
● Event
● Field
● GenericParameter
● Interface
● Method
● Module
● Parameter
● Property
● ReturnValue
● Struct
这个列表列出了可以应用该特性的所有程序元素。注意在把特性应用到程序元素上
时，应把特性放在元素前面的方括号中。但是，在上面的列表中，有两个值不对应于任何
程序元素：Assembly和Module。特性可以应用到整个程序集或模块中，而不是应用到代
码中的一个元素上，在这种情况下，这个特性可以放在源代码的任何地方，但需要用关键
字Assembly或Module作为前缀：
    [assembly:SomeAssemblyAttribute(Parameters)]
    [module:SomeAssemblyAttribute(Parameters)]
在指定自定义特性的有效目标元素时，可以使用按位OR运算符把这些值组合起来。
例如，如果指定FieldName特性可以同时应用到属性和字段上，可以编写下面的代码：
    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field,
      AllowMultiple=false, Inherited=false)]
    public class FieldNameAttribute: Attribute
也可以使用AttributeTargets.All指定自定义特性可以应用到所有类型的程序元素上。
AttributeUsage特性还包含另外两个参数：AllowMultiple和Inherited。它们用不同的语法来
指定：=，而不是只给出这些参数的值。这些参数是可
选的，根据需要，可以忽略它们。
AllowMultiple参数表示一个特性是否可以多次应用到同一项上，这里把它设置为
false，表示如果编译器遇到下述代码，就会产生一个错误：
    [FieldName("SocialSecurityNumber")]
    [FieldName("NationalInsuranceNumber")]
    public string SocialSecurityNumber
    {
      // etc.
如果把Inherited参数设置为true，就表示应用到类或接口上的特性也可以自动应用到
所有派生的类或接口上。如果特性应用到方法或属性上，它就可以自动应用到该方法或属
性等的重写版本上。
2．指定特性参数
下面介绍如何指定自定义特性接受的参数。在编译器遇到下述语句时：
    [FieldName("SocialSecurityNumber")]
    public string SocialSecurityNumber
    {
      // etc.
编译器会检查传递给特性的参数（在本例中，是一个字符串），并查找该特性中带这些参
数的构造函数。如果编译器找到一个这样的构造函数，编译器就会把指定的元数据传递给
程序集。如果编译器找不到，就生成一个编译错误。如后面所述，反射会从程序集中读取
元数据（特性），并实例化它们表示的特性类。因此，编译器需要确保存在这样的构造函
数，才能在运行期间实例化指定的特性。
在本例中，仅为FieldNameAttribute类提供一个构造函数，而这个构造函数有一个字
符串参数。因此，在把FieldName特性应用到一个属性上时，必须为它提供一个字符串作
为参数，如上面的代码所示。
如果可以选择特性提供的参数类型，就可以提供构造函数的不同重载方法，尽管一般
是仅提供一个构造函数，使用属性来定义任何其他可选参数，下面将介绍可选参数。
3．指定特性的可选参数
在AttributeUsage特性中，可以使用另一种语法，把可选参数添加到特性中。这种语
法指定可选参数的名称和值，它通过特性类中的公共属性或字段起作用。例如，假定修改
SocialSecurityNumber属性的定义，如下所示：
    [FieldName("SocialSecurityNumber", Comment="This is the primary key field")]
    public string SocialSecurityNumber { get; set; }
    {
      // etc.
在本例中，编译器识别第二个参数的语法=，并且
不会把这个参数传递给FieldNameAttribute类的构造函数，而是查找一个有该名称的公共
属性或字段（最好不要使用公共字段，所以一般情况下要使用特性），编译器可以用这个
属性设置第二个参数的值。如果希望上面的代码工作，就必须给FieldNameAttribute类添
加一些代码：
    [AttributeUsage(AttributeTargets.Property,
      AllowMultiple=false, Inherited=false)]
    public class FieldNameAttribute : Attribute
    {
      public string Comment { get; set; }
      private string _fieldName;
      public FieldNameAttribute(string fieldName)
      {
        _fieldName = fieldname;
      }
      // etc
    }
16.2.2 自定义特性示例：WhatsNewAttributes
本节开始编写前面描述过的示例WhatsNewAttributes，该示例提供了一个特性，表示
最后一次修改程序元素的时间。这个示例比前面所有的示例都复杂，因为它包含3个不同
的程序集：
● WhatsNewAttributes程序集，它包含特性的定义。
● VectorClass程序集，它包含所应用的特性的代码。
● LookUpWhatsNew程序集，它包含显示已改变的数据项详细信息的项目。
其中，只有LookUpWhatsNew程序集是目前为止使用的一个控制台应用程序，其余两
个程序集都是库，它们都包含类的定义，但都没有程序的入口点。对于VectorClass程序
集，我们使用了VectorAsCollection示例，但从中删除了入口点和测试代码类，只剩下
Vector类。这些类详见本章后面的内容。
1. WhatsNewAttributes库程序集
首先从核心的WhatsNewAttributes程序集开始。其源代码包含在WhatsNewAttributes.cs
文件中，该文件位于本章示例代码中WhatsNewAttributes解决方案的WhatsNewAttributes项
目中。
WhatsNewAttributes的示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
WhatsNewAttributes.cs文件定义了两个特性类LastModifiedAttribute和
SupportsWhatsNew-Attribute。LastModifiedAttribute特性可以用于标记最后一次修改数据项
的时间，它有两个必选参数（这两个参数传递给构造函数）；修改的日期和包含描述修改
信息的字符串。它还有一个可选参数issues （表示存在一个公共属性），它可以用来描述
该数据项的任何重要问题。
在现实生活中，或许想把特性应用到任何对象上。为了使代码比较简单，这里仅允许
将它应用于类和方法，并允许它多次应用到同一项上（AllowMultiple=true），因为可以
多次修改某一项，每次修改都需要用一个不同的特性实例来标记。
SupportsWhatsNew是一个较小的类，它表示不带任何参数的特性。这个特性是一个程
序集的特性，它用于把程序集标记为通过LastModifiedAttribute维护的文档。这样，以后
查看这个程序集的程序会知道，它读取的程序集是我们使用自动文档过程生成的那个程序
集。这部分示例的完整源代码如下所示（代码文件WhatsNewAttributes.cs）：
    using System;
    namespace WhatsNewAttributes
    {
      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method,
        AllowMultiple=true, Inherited=false)]
      public class LastModifiedAttribute: Attribute
      {
        private readonly DateTime _dateModified;
        private readonly string _changes;
        public LastModifiedAttribute(string dateModified, string changes)
        {
          _dateModified = DateTime.Parse(dateModified);
          _changes = changes;
        }
        public DateTime DateModified => _dateModified;
        public string Changes => _changes;
        public string Issues { get; set; }
      }
      [AttributeUsage(AttributeTargets.Assembly)]
      public class SupportsWhatsNewAttribute: Attribute
      {
      }
    }
根据前面的讨论，这段代码应该相当清楚。不过请注意，属性DateModified和
Changes是只读的。使用表达式语法，编译器会创建get访问器。不需要set访问器，因为必
须在构造函数中把这些参数设置为必选参数。需要get访问器，以便可以读取这些特性的
值。
2. VectorClass程序集
本节就使用这些特性，我们用前面的VectorAsCollection示例的修订版本来说明。注
意，这里需要引用刚才创建的WhatsNewAttributes库，还需要使用using语句指定相应的名
称空间，这样编译器才能识别这些特性（代码文件VectorClass/Vector.cs）：
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Text;
    using WhatsNewAttributes;
    [assembly: SupportsWhatsNew]
在这段代码中，添加了一行用SupportsWhatsNew特性标记程序集本身的代码。
VectorClass的示例代码使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    WhatsNewAttributes
名称空间：
    System
    System.Collections
    System.Collections.Generic
    System.Text
    WhatsNewAttributes
下面考虑Vector类的代码。我们并不是真的要修改这个类中的某些主要内容，只是添
加两个LastModified特性，以标记出本章对Vector类进行的操作。
    namespace VectorClass
    {
      [LastModified("6 Jun 2015", "updated for C# 6 and .NET Core")]
      [LastModified("14 Deb 2010", "IEnumerable interface implemented: " +