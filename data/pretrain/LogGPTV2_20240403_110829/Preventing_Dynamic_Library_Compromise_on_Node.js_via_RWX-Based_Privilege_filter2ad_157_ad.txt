linter—a lightweight static analysis pass flagging common human
errors. We use eslint (v5.0.1) [82] and each library’s default linting
configuration, falling back to Google’s style rules when no such
configuration exists. eslint ranges between 0.94 and 6.017 sec-
onds per package, with an average of 1.34 seconds. These results
show that the static inference scales well to real-world packages
and that its efficiency is comparable to other tools that developers
use regularly. The resulting permissions of this large-scale analysis,
averaging one permission per 10 LoC, are shown in Fig 6. Most per-
missions are R and X permissions (50.33% and 22.97%, respectively),
showing that client packages rarely write to references outside of
their boundaries, e.g., to global variables or the API of the packages
they use.
Take away: The static analysis scales to millions of lines of
code, analyzing 1,036 of the most depended upon packages in 2.5
seconds, on average.
Dynamic Enforcement: We compare the performance of run-
ning the tests suite of the 81 libraries from Q2 and Q3 with Mir
enforcement against that of the unmodified libraries. Mir’s adds be-
tween 0.13–4.14ms of slowdown to executions that range between
324ms and 2.77s. Slowdowns average about 3.3ms per library, in-
creasing the execution time by 1.93% on average. Based on these
results, we do not anticipate a need for users to trade in runtime
security to gain performance. The figure on the right shows results
for the first 10 libraries (alphabetically, same sample as Q2 plot).
Mir applies an average of 346 wrappers per library, applying a
total of 25,609 wrappers. The distribution of accesses at runtime
is bimodal: on average, only 21 (6.06%) of all wrapped values are
accessed per library, but those that do get accessed are accessed
multiple times—on average, 795 times each.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1831Take away: The runtime enforcement imposes a runtime per-
formance overhead of 3.3ms (1.93%), on average.
8.5 Comparison with Debloating (Q5)
We now compare against a possible alternative to Mir targeting a
similar domain: Mininode [34] is a state-of-the-art static-analysis de-
bloating tool for Node.js. We apply the latest Mininode (v.f604d9e)
in its --soft (coarse-grained) and --hard (fine-grained) mode on
a total of 88 libraries: 81 libraries from Q2 and Q3, and the seven
from Q1 for which Mir crashes on tests (§8.2).
Mininode runs to completion for 81/88 libraries, which we check
for compatibility using tests, as in Q2. Both soft and hard fail
tests on three libraries: soft fails due to changes in whitespace
(in safe-eval), hard eliminates a function (hypenToCamel in ejs),
and both fail due to white-space differences (in js-yaml) and the
removal of a critical file (compile-dots.js in mol-proto). White-
space incompatibilities are due to Mininode’s back-end, which uses
escodegen to generate JavaScript from the debloated AST, affecting
the resulting white-spaces and indentation. Mininode crashes on
7/88 libraries, failing to find the entry point (5 libs.), exiting due
to dynamic imports (1 lib.), and running out of memory (1 lib.).
Mininode’s analysis takes 0.82–4.013 seconds, comparable to Mir,
and incurs no overhead during library execution. All 63/63 PoC
attacks succeed because (i) the debloated libraries still have access
to functionality built into Node.js (e.g., Object, Array.of, Math,
String), and (ii) JavaScript’s dynamic behavior, such runtime code
evaluation, falls outside Mininode’s focus.
Take away: Mininode’s debloating achieves better compatibility
than Mir and adds no runtime overhead, but does not protect
against the specific dynamic threats that are the focus of Mir.
9 RELATED WORK
Mir’s techniques touch upon a great deal of previous work in
several distinct domains.
Privilege Reduction: A number of works have addressed priv-
ilege reduction [4, 10, 15, 16, 20, 27, 32, 42, 57, 59, 60, 81], often
offering significant automation. This automation often comes at
the cost of lightweight annotations on program objects—e.g., config-
urations in Privman [32], priv directives in Privtrans [16], tags in
Wedge [15], and compartmentalization hypotheses in SOAAP [27].
TRON [12] introduced a permission model similar to Mir, but at
the level of processes rather than libraries.
Wedge and SOAAP stand out as offering some automation via
dynamic and static analysis, respectively. However, Wedge still
requires altering programs manually to use its API, and SOAAP
mostly checks rather than suggests policies. In comparison to these
works, Mir (1) leverages existing boundaries, and (2) offers signifi-
cantly more automation.
To ameliorate manual annotations on individual objects, more
recent library-level compartmentalization [37, 43, 77] leverages run-
time information about module boundaries to guide compartment
boundaries. These systems automate the creation and management
of compartments, but do not automate the specification of policies
through some form of inference. Mir (1) focuses on benign-but-
buggy libraries, rather than actively malicious ones, and (2) offers
a simplified RWX permission model rather than more expressive
(often Turing-complete) policies—both in exchange for significant
automation in terms of the permissions.
Pyxis [18] and PM [41] reduce the problem of boundary infer-
ence to an integer programming problem by defining several per-
formance and security metrics. These systems are complementary
to Mir, as they focus on separating the application code into a
sensitive and insensitive compartment to minimize these metrics,
while Mir tries to automatically infer and restrict the permissions
between different libraries.
Program Analysis: The static permission inference of Mir re-
lates to work on statically inferring permissions that an application
requires in the Java permission model [36]. Jamrozik et al. [31] de-
scribe a dynamic analysis to infer pairs of Android permissions and
UI events that trigger the need for a permission. We rely on static in-
ference instead, to avoid the problem of automatically exercising the
analyzed code. An important difference to both above approaches
is that Mir focuses on RWX permissions for specific access paths,
instead of the more coarse-grained permissions supported by Java
and Android. Pailoor et al. [54] also propose static inference of priv-
ilege reduction policies, but they focus on system calls accessible to
C/C++ programs and describe a more heavyweight static analysis
than this paper. By employing more sophisticated static analysis
techniques for JavaScript one can reduce some of the compatibility
issues of Mir, e.g., by adopting the approach of Santos et al. [61]
for handling dynamically computed field names.
Chen [17] is an analyzer for privilege escalation attacks on
browser extensions written in JavaScript. Chen’s constraint-based
analysis aims at detecting vulnerabilities, whereas Mir aims at
preventing their exploitation.
JavaScript Protection: There is prior work on JavaScript protec-
tion [5, 29, 47, 48, 62, 67, 69, 74] motivated by multi-party mashups
on the web. Mir is unusual in its model and inference: it only al-
lows first-order RWX permissions rather than more powerful and
expressive policies [47, 69], and offers automation via static and
import-time analysis. ZigZag [80] proposes hardening client-side
JavaScript code by dynamically inferring invariants that capture
benign program use. The invariants are then introduced in the an-
alyzed code through program instrumentation to detect runtime
deviations from the benign behavior. In contrast, Mir infers RWX
permissions statically and uses load-time interposition to insert
runtime checks. NodeSentry [75] proposes powerful server-side
JavaScript protection—but its policies are Turing-complete and
written manually. Akhawe et al. [7] describe a mechanism to en-
force privilege reduction in HTML5 applications by building on the
same-origin policy. Instead, Mir focuses on Node.js and proposes
an instrumentation-based enforcement mechanism.
Realms [28] specify a way for executing scripts in different global
environments to avoid cross-contamination, while SES [72] advo-
cates for a shared immutable global realm. These proposals dras-
tically reduce privileges for JavaScript code, but aggressively pre-
vent all accesses to powerful APIs such as require. Once access
is granted to this API, there are no further restrictions on how it
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1832can be used. Mir’s permission model can be used to refine these
coarse-grained mechanisms.
Following the separation between mechanism and policy [39],
we also note that much of the aforementioned work focuses on
providing powerful security mechanisms [5, 28, 48, 69, 74], whereas
Mir focuses on the language and analysis for expressing and in-
ferring an effective security policy—which could be synergistically
enforced using the security mechanisms provided by these systems.
Software Debloating: Functionality elimination [58] and, more
recently, software debloating [11, 30, 34, 35] have similar goals to
Mir, but approach the problem differently. Rather than locking
what functionality a piece of code can access at runtime, these
techniques completely eliminate unused functionality altogether. A
benefit of these techniques is that an attacker circumventing Mir’s
runtime enforcement would still not be able to call non-existent
functionality in a de-bloated application. A case where Mir offers
benefits over these techniques is when two program fragments use
disjoint halves of functionality: while no half can be eliminated,
Mir still restricts each fragment to half the permissions.
Language- & Capability-Based Isolation: Software fault isola-
tion [79] modifies object code of modules written in unsafe lan-
guages to prevent them from writing or jumping to addresses out-
side their domains. Singularity’s software-isolated processes [6]
ensure isolation through verification. Leveraging memory safety,
Mir supports environments with runtime code evaluation, for which
verification and static transformation might not be an option. Ca-
pability systems [40, 64] and object-capability systems [22, 50] re-
strict the ability to name a resource. Joe-E for Java [46] and Caja for
JavaScript [50] restrict languages to object-capability-safe subsets.
Similar to capability systems, Mir augments a program’s ability to
name a resource with a permission check. Mir does not focus on a
language subset, and its static analysis offers significant automation.
Prior work has developed formal frameworks for stating and prov-
ing strong isolation properties in the context of new languages or
subsets of existing languages [1, 21, 23, 44, 45]. Mir instead targets
the full JavaScript language and quantifies privilege reduction.
Ecosystem Approaches: The challenges of third-party libraries [53,
63, 65] can be addressed by checking for known vulnerabilities in
a program’s dependency chain or by freezing dependencies [52].
These approaches may cause users to forego valuable bug and vul-
nerability fixes, whereas Mir allows the permissions to evolve with
the codebase. The Deno runtime offers a coarse-grained allow-deny
permission model focusing on the file-system and the network [19],
but it lacks Mir’s automation and fine granularity.
10 CONCLUSION
Dynamic library compromise due to problems in benign libraries
poses a serious security threat. Mir is a system for Node.js that
addresses this problem by augmenting the module system with a
fine-grained read-write-execute (RWX) permission model for spec-
ifying privilege at the boundaries of libraries. It infers these per-
missions automatically using static and import-time analysis, and
introduces privilege reduction, a metric capturing Mir’s effects on
prevented permissions. Mir’s evaluation shows that it prevents
tens of attacks on real-world vulnerable modules without major
functionality disruptions and while imposing modest performance
overhead. We envision Mir’s automation and performance charac-
teristics to make it an important addition to a developer’s toolbox,
similar to a minifier or a linter—in many circumstances working in
tandem with defenses that focus on other threats, such as command-
injection or sanitization attacks. Mir is available for installation via
npm and its source code is available on GitHub:
http://github.com/andromeda/mir
ACKNOWLEDGMENTS
We would like to thank Jürgen Cito, Sage Gerard, Cătălin Hrit,cu, Sotiris
Ioannidis, Dimitris Karnikis, Mary McDavitt, Jeff Perkins, MIT CSAIL’s
PAC group, and Mir’s open-source contributors. We are indebted to our
shepherd, Peter Snyder. Much of Mir’s design was informed by interac-
tions with the broader community; we are particularly thankful to Isaac
Z. Schlueter and CJ Silverio from npm, and Petros Efstathopoulos, Daniel
Katz, Daniel Marino, and Kevin Roundy from Symantec/NortonLifeLock
Research Group. This research was funded in part by DARPA contracts
HR00112020013, HR001120C0191, and HR001120C0155. NSF awards CNS-
1513687 and CCF-1763514, by the European Research Council (ERC, grant
agreement 851895), and by the German Research Foundation within the
ConcSys and Perf4JS projects. Any opinions, findings, conclusions, or rec-
ommendations expressed in this material are those of the authors and do
not necessarily reflect those of DARPA or other agencies.
REFERENCES
[1] Carmine Abate, Arthur Azevedo de Amorim, Roberto Blanco, Ana Nora Evans,
Guglielmo Fachini, Catalin Hritcu, Théo Laurent, Benjamin C. Pierce, Marco
Stronati, and Andrew Tolmach. 2018. When Good Components Go Bad: Formally
Secure Compilation Despite Dynamic Compromise. In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security (CCS ’18).
ACM, New York, NY, USA, 1351–1368. https://doi.org/10.1145/3243734.3243745
[2] Ajin Abraham. 2017. Snyk: Arbitrary Code Execution in node-serialize. https:
//snyk.io/vuln/npm:node-serialize:20170208. https://snyk.io/vuln/npm:node-
serialize:20170208 Accessed: 2020-03-19.
[3] Ajin Abraham. 2017. Snyk: Arbitrary Code Execution in serialize-to-js. https:
//snyk.io/vuln/npm:serialize-to-js:20170208. https://snyk.io/vuln/npm:serialize-
to-js:20170208 Accessed: 2020-03-19.
[4] Mike Accetta, Robert Baron, William Bolosky, David Golub, Richard Rashid,
Avadis Tevanian, and Michael Young. 1986. Mach: A New Kernel Foundation for
UNIX Development. In USENIX Technical Conference.
[5] Pieter Agten, Steven Van Acker, Yoran Brondsema, Phu H. Phung, Lieven Desmet,
and Frank Piessens. 2012. JSand: Complete Client-side Sandboxing of Third-party
JavaScript Without Browser Modifications. In Proceedings of the 28th Annual
Computer Security Applications Conference (ACSAC ’12). ACM, New York, NY,
USA, 1–10. https://doi.org/10.1145/2420950.2420952
[6] Mark Aiken, Manuel Fähndrich, Chris Hawblitzel, Galen Hunt, and James Larus.
2006. Deconstructing Process Isolation. In Proceedings of the 2006 Workshop on
Memory System Performance and Correctness (MSPC ’06). ACM, New York, NY,
USA, 1–10. https://doi.org/10.1145/1178597.1178599
[7] Devdatta Akhawe, Prateek Saxena, and Dawn Song. 2012. Privilege Separation
in HTML5 Applications. In Proceedings of the 21th USENIX Security Symposium,
Bellevue, WA, USA, August 8-10, 2012, Tadayoshi Kohno (Ed.). USENIX Associa-
tion, 429–444. https://www.usenix.org/conference/usenixsecurity12/technical-
sessions/presentation/akhawe
[8] Esben Andreasen, Liang Gong, Anders Møller, Michael Pradel, Marija Selakovic,
Koushik Sen, and Cristian-Alexandru Staicu. 2017. A Survey of Dynamic Analysis
and Test Generation for JavaScript. Comput. Surveys (2017).
[9] Unknown Author. 2020. Snyk: Arbitrary Code Injection in serialize-javascript.
https://snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-570062. https://snyk.io/
vuln/SNYK-JS-SERIALIZEJAVASCRIPT-570062 Accessed: 2020-03-19.
[10] Niels Avonds, Raoul Strackx, Pieter Agten, and Frank Piessens. 2013. Salus:
Non-hierarchical memory access rights to enforce the principle of least privilege.
In International Conference on Security and Privacy in Communication Systems.
Springer, 252–269.
Less is
[11] Babak Amin Azad, Pierre Laperdrix, and Nick Nikiforakis. 2019.
more: quantifying the security benefits of debloating web applications. In 28th
{USENIX} Security Symposium ({USENIX} Security 19). 1697–1714.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1833[12] Andrew Berman, Virgil Bourassa, and Erik Selberg. 1995. TRON: Process-specific
File Protection for the UNIX Operating System. In Proceedings of the USENIX
1995 Technical Conference Proceedings (TCON’95). USENIX Association, Berkeley,
CA, USA, 14–14. http://dl.acm.org/citation.cfm?id=1267411.1267425
[13] Nataliia Bielova and Tamara Rezk. 2016. A taxonomy of information flow mon-
itors. In International Conference on Principles of Security and Trust. Springer,
46–67.
[14] Prithvi Bisht and V. N. Venkatakrishnan. 2008. XSS-GUARD: Precise Dynamic
Prevention of Cross-Site Scripting Attacks. In Detection of Intrusions and Malware,
and Vulnerability Assessment, 5th International Conference, DIMVA 2008, Paris,
France, July 10-11, 2008. Proceedings. 23–43.
[15] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge:
Splitting Applications into Reduced-privilege Compartments. In Proceedings of
the 5th USENIX Symposium on Networked Systems Design and Implementation
(NSDI’08). USENIX Association, Berkeley, CA, USA, 309–322. http://dl.acm.org/
citation.cfm?id=1387589.1387611
[16] David Brumley and Dawn Song. 2004. Privtrans: Automatically Partitioning
Programs for Privilege Separation. In Proceedings of the 13th Conference on USENIX
Security Symposium - Volume 13 (SSYM’04). USENIX Association, Berkeley, CA,
USA, 5–5. http://dl.acm.org/citation.cfm?id=1251375.1251380
[17] Stefano Calzavara, Michele Bugliesi, Silvia Crafa, and Enrico Steffinlongo. 2015.
Fine-Grained Detection of Privilege Escalation Attacks on Browser Extensions. In
Programming Languages and Systems - 24th European Symposium on Programming,
ESOP 2015, Held as Part of the European Joint Conferences on Theory and Practice
of Software, ETAPS 2015, London, UK, April 11-18, 2015. Proceedings (Lecture Notes
in Computer Science), Jan Vitek (Ed.), Vol. 9032. Springer, 510–534. https://doi.
org/10.1007/978-3-662-46669-8_21
[18] Alvin Cheung, Owen Arden, Samuel Madden, and Andrew C Myers. 2012. Au-
tomatic partitioning of database applications. arXiv preprint arXiv:1208.0271
(2012).
https://deno.land/
manual/getting_started/permissions. https://deno.land/manual/getting_started/
permissions Accessed: 2020-06-11.
[19] Ryan Dahl and the Deno Contributors. 2019. Deno.
[20] Willem De Groef, Fabio Massacci, and Frank Piessens. 2014. NodeSentry: Least-
privilege Library Integration for Server-side JavaScript. In Proceedings of the 30th
Annual Computer Security Applications Conference (ACSAC ’14). ACM, New York,
NY, USA, 446–455. https://doi.org/10.1145/2664243.2664276
[21] Christos Dimoulas, Scott Moore, Aslan Askarov, and Stephen Chong. 2014. Declar-
ative policies for capability control. In 2014 IEEE 27th Computer Security Founda-
tions Symposium. IEEE, 3–17.
[22] Sophia Drossopoulou and James Noble. 2013. The Need for Capability Policies.
In Proceedings of the 15th Workshop on Formal Techniques for Java-like Programs
(FTfJP ’13). ACM, New York, NY, USA, Article 6, 7 pages. https://doi.org/10.
1145/2489804.2489811
[23] Sophia Drossopoulou, James Noble, Mark S. Miller, and Toby Murray. 2016.
Permission and Authority Revisited, Towards a Formalisation. In Proceedings
of the 18th Workshop on Formal Techniques for Java-like Programs (FTfJP’16).
Association for Computing Machinery, New York, NY, USA, Article 10, 6 pages.
https://doi.org/10.1145/2955811.2955821
[24] Asger Feldthaus, Max Schäfer, Manu Sridharan, Julian Dolby, and Frank Tip. 2013.
Efficient construction of approximate call graphs for JavaScript IDE services. In
35th International Conference on Software Engineering, ICSE ’13, San Francisco,
CA, USA, May 18-26, 2013.
[25] Robert Bruce Findler and Matthias Felleisen. 2002. Contracts for Higher-order
Functions. In Proceedings of the Seventh ACM SIGPLAN International Conference
on Functional Programming (ICFP ’02). ACM, New York, NY, USA, 48–59. https:
//doi.org/10.1145/581478.581484
[26] Inc Google. 2009. Closure. https://developers.google.com/closure/. https://
developers.google.com/closure/ Accessed: 2019-06-11.
[27] Khilan Gudka, Robert NM Watson, Jonathan Anderson, David Chisnall, Brooks
Davis, Ben Laurie, Ilias Marinos, Peter G Neumann, and Alex Richardson. 2015.
Clean application compartmentalization with SOAAP. In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security. ACM, 1016–
1031.
[28] Jordan Harband and Kevin Smith. 2021. ECMAScript® 2020 Language Spec-
https:
ification. https://262.ecma-international.org/11.0/#sec-code-realms.
//262.ecma-international.org/11.0/#sec-code-realms Accessed: 2021-04-14.
[29] Daniel Hedin, Arnar Birgisson, Luciano Bello, and Andrei Sabelfeld. 2014. JSFlow:
Tracking information flow in JavaScript and its APIs. In Proceedings of the 29th
Annual ACM Symposium on Applied Computing. 1663–1671.
[30] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. 2018. Effective
program debloating via reinforcement learning. In Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications Security. 380–394.
[31] Konrad Jamrozik, Philipp von Styp-Rekowsky, and Andreas Zeller. 2016. Mining
sandboxes. In Proceedings of the 38th International Conference on Software Engi-
neering, ICSE 2016, Austin, TX, USA, May 14-22, 2016, Laura K. Dillon, Willem
Visser, and Laurie A. Williams (Eds.). ACM, 37–48. https://doi.org/10.1145/
2884781.2884782
[32] Douglas Kilpatrick. 2003. Privman: A Library for Partitioning Applications. In
USENIX Annual Technical Conference, FREENIX Track. 273–284.
[33] Yoonseok Ko, Tamara Rezk, and Manuel Serrano. [n. d.]. SecureJS Compiler:
Portable Memory Isolation in JavaScript. In SAC 2021-The 36th ACM/SIGAPP
Symposium On Applied Computing.
[34] Igibek Koishybayev and Alexandros Kapravelos. 2020. Mininode: Reducing
the Attack Surface of Node.js Applications. In 23rd International Symposium on
Research in Attacks, Intrusions and Defenses ({RAID} 2020).
[35] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis Polychronakis. 2019.
Configuration-Driven Software Debloating. In Proceedings of the 12th European
Workshop on Systems Security. 1–6.
[36] Larry Koved, Marco Pistoia, and Aaron Kershenbaum. 2002. Access rights analysis
for Java. In Proceedings of the 2002 ACM SIGPLAN Conference on Object-Oriented
Programming Systems, Languages and Applications, OOPSLA 2002, Seattle, Wash-
ington, USA, November 4-8, 2002, Mamdouh Ibrahim and Satoshi Matsuoka (Eds.).
ACM, 359–372. https://doi.org/10.1145/582419.582452
[37] Benjamin Lamowski, Carsten Weinhold, Adam Lackorzynski, and Hermann
Härtig. 2017. Sandcrust: Automatic Sandboxing of Unsafe Components in Rust.
In Proceedings of the 9th Workshop on Programming Languages and Operating
Systems (PLOS’17). ACM, New York, NY, USA, 51–57. https://doi.org/10.1145/
3144555.3144562
[38] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo
Wilson, and Engin Kirda. 2017. Thou Shalt Not Depend on Me: Analysing the
Use of Outdated JavaScript Libraries on the Web. (2017).
[39] R. Levin, E. Cohen, W. Corwin, F. Pollack, and W. Wulf. 1975. Policy/Mechanism
Separation in Hydra. In Proceedings of the Fifth ACM Symposium on Operating
Systems Principles (SOSP ’75). ACM, New York, NY, USA, 132–140. https://doi.
org/10.1145/800213.806531
[40] H. M. Levy. 1984. Capability Based Computer Systems. Digital Press. http:
[41] Shen Liu, Dongrui Zeng, Yongzhe Huang, Frank Capobianco, Stephen McCamant,
Trent Jaeger, and Gang Tan. 2019. Program-mandering: Quantitative Privilege
Separation. (2019).
//www.cs.washington.edu/homes/levy/capabook/
[42] Marcela S Melara, Michael J Freedman, and Mic Bowman. 2019. EnclaveDom:
Privilege separation for large-TCB applications in trusted execution environ-
ments. arXiv preprint arXiv:1907.13245 (2019).
[43] Marcela S Melara, David H Liu, and Michael J Freedman. 2019. Pyronia: Redesign-
ing Least Privilege and Isolation for the Age of IoT. arXiv preprint arXiv:1903.01950
(2019).
[44] Darya Melicher. [n. d.]. Controlling Module Authority Using Programming Lan-
guage Design. Ph.D. Dissertation. Carnegie Mellon University.
[45] Darya Melicher, Yangqingwei Shi, Valerie Zhao, Alex Potanin, and Jonathan
Aldrich. 2018. Using Object Capabilities and Effects to Build an Authority-safe
Module System: Poster. In Proceedings of the 5th Annual Symposium and Bootcamp
on Hot Topics in the Science of Security (HoTSoS ’18). ACM, New York, NY, USA,
Article 29, 1 pages. https://doi.org/10.1145/3190619.3191691
[46] Adrian Mettler, David Wagner, and Tyler Close. 2010. Joe-E: A Security-Oriented
Subset of Java.. In Networked and Distributed Systems Security (NDSS’10), Vol. 10.
357–374.
[47] Leo A Meyerovich and Benjamin Livshits. 2010. ConScript: Specifying and
enforcing fine-grained security policies for Javascript in the browser. In 2010
IEEE Symposium on Security and Privacy. IEEE, 481–496.
[48] James Mickens. 2014. Pivot: Fast, synchronous mashup isolation using generator
chains. In 2014 IEEE Symposium on Security and Privacy. IEEE, 261–275.
[49] Mark Samuel Miller. 2006. Robust Composition: Towards a Unified Approach to
Access Control and Concurrency Control. Ph.D. Dissertation. Baltimore, MD, USA.
Advisor(s) Shapiro, Jonathan S. AAI3245526.
[50] Mark S Miller, Mike Samuel, Ben Laurie, Ihab Awad, and Mike Stay. 2009. Caja:
Safe active content in sanitized JavaScript, 2008. Google white paper (2009).
[51] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker,
Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. 2012.
You are what you include: large-scale evaluation of remote javascript inclusions.
In Proceedings of the 2012 ACM conference on Computer and communications
security. 736–747.
[52] npm, Inc. 2012. npm-shrinkwrap: Lock down dependency versions. https://docs.
npmjs.com/cli/shrinkwrap. https://docs.npmjs.com/cli/shrinkwrap
[53] Erlend Oftedal et al. 2016. RetireJS. http://retirejs.github.io/retire.js/
[54] Shankara Pailoor, Xinyu Wang, Hovav Shacham, and Isil Dillig. 2020. Automated
policy synthesis for system call sandboxing. Proc. ACM Program. Lang. 4, OOPSLA
(2020), 135:1–135:26. https://doi.org/10.1145/3428203
[55] Andrea Parodi. 2009. Awesome Micro npm Packages (latest commit: Oct 5, 2020;
a302e14). https://git.io/JUpA4. https://git.io/JUpA4 Accessed: 2020-10-07.
[56] Open Web Application Security Project. 2018. OWASP Top Ten Project’17.