# 【技术分享】反侦测的艺术Part 3：Shellcode炼金术

#### 译文声明
本文为翻译文章，原文来源：pentest.blog  
原文地址：[请提供具体链接]  
译文仅供参考，具体内容及含义以原文为准。

**翻译者**：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)  
**预估稿费**：200 RMB  
**投稿方式**：发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

**相关文章**：
- **【技术分享】反侦测的艺术Part 1：介绍AV和检测的技术**  
  [阅读原文](http://bobao.360.cn/learning/detail/3420.html)
- **【技术分享】反侦测的艺术Part 2：精心打造PE后门（含演示视频）**  
  [阅读原文](http://bobao.360.cn/learning/detail/3407.html)

## 0x00 前言
本文将探讨基础的shellcode概念、汇编级编码器/解码器的设计以及一些绕过反利用解决方案（如微软的EMET）的方法。为了理解本文内容，读者应具备良好的x86汇编知识，并熟悉COFF及PE文件格式。建议先阅读《反侦测的艺术 Part 1》和《反侦测的艺术 Part 2》，以便更好地理解本文中的术语和技术细节。

## 0x01 术语定义
- **进程环境块（PEB）**：Windows NT操作系统家族中的一个数据结构，用于存储全局上下文、启动参数、程序映像加载器的数据结构等。PEB的具体字段可能会随操作系统版本变化。
- **导入地址表（IAT）**：应用程序在不同模块中调用函数时使用的查询表。IAT包含两种导入形式（序号和名称）。动态链接器加载模块并将其连接在一起，将实际地址写入IAT，指向相应库函数的内存位置。
- **数据执行保护（DEP）**：一组硬件和软件技术，用于检查内存以阻止恶意代码执行。DEP防止代码从数据页执行，通常默认堆和栈中不允许执行代码。
- **地址空间布局随机化（ASLR）**：一种安全机制，通过随机分配关键区域的地址来防止缓冲区溢出攻击。
- **stdcall调用约定**：由pascal约定演变而来，被调用者负责清理栈，参数从右向左压栈。寄存器EAX、ECX、EDX在函数中使用，返回结果保存在EAX中。stdcall是微软Win32 API和Open Watcom C++的标准调用约定。

## 0x02 介绍
Shellcode在安全领域扮演了重要角色，广泛应用于各种恶意软件和漏洞利用中。Shellcode是一系列字节组成的CPU指令，其主要目的是利用漏洞（如溢出漏洞）执行任意代码。由于shellcode可以直接在内存中运行，因此被大量恶意软件使用。本文旨在介绍基本的shellcode概念，降低shellcode被检测的概率，并绕过一些反利用缓解措施。

## 0x03 基本的shellcode编程
编写适用于不同操作系统的shellcode需要不同的方法。基于Unix的操作系统通过`int 0x80`接口与内核通信，而Windows没有直接调用内核的接口，必须使用精确的函数指针。硬编码函数地址在Windows上不可行，因为每个函数地址在不同版本中会变化。解决这个问题的方法是在运行时动态获取地址。

## 0x04 解决地址问题
随着时间的推移，shellcode编写者找到了在运行时查找Windows API函数地址的方法。本文重点介绍一种称为解析PEB的方法，该方法使用PEB数据结构定位加载的动态库地址，并解析导出地址表以获取函数地址。以下是具体步骤：

1. 使用FS段寄存器指向线程环境块（TEB）地址。
2. 从TEB块向前偏移48字节，获取PEB结构。
3. 在PEB块中向前偏移12字节，获取ldr数据结构的地址。
4. 在ldr结构中向前偏移20字节，获取InMemoryOrderModuleList的第一个模块。
5. 遍历InMemoryOrderModuleList，找到目标DLL。
6. 从DLL基址向前偏移60字节，获取PE头的内存地址。
7. 计算导出地址表（EAT）的地址，遍历EAT以获取所需函数地址。

## 0x05 Hash API
Metasploit项目中的大多数shellcode都使用了Stephen Fewer编写的Hash API代码片段。该代码片段简化了PEB解析逻辑，并使用ROR13哈希计算法快速查找所需函数。虽然这种方法非常优雅，但由于其广泛应用，一些反病毒产品和反利用缓解措施已对其进行了专门检测。因此，Hash API的有效性正在减弱。

## 0x06 编码器/解码器设计
编码器/解码器的设计目的是使shellcode更难被检测。以下是一个简单的解码器示例：

```assembly
; #===============================#
; |ESI -> Pointer to shellcode   |
; |EDI -> Pointer to key         |
; |ECX -> Shellcode index counter|
; |EDX -> Key index counter      |
; |AL -> Shellcode byte holder   |
; |BL -> Key byte holder         |
; #===============================#

[BITS 32]
[ORG 0]

JMP GetShellcode ; Jump to shellcode label
Stub: 
POP ESI ; Pop out the address of shellcode to ESI register 
PUSH ESI ; Save the shellcode address to stack
```

需要注意的是，仅使用编码器并不能完全避开检测。在执行shellcode后，解码器将直接运行并解码整段shellcode为其原始格式，这不能绕过反病毒产品的动态分析机制。

希望本文能帮助你更好地理解和应用shellcode技术。