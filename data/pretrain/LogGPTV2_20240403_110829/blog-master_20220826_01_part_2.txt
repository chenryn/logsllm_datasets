         Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
         Sort Key: tbl.crt_time  
         Sort Method: top-N heapsort  Memory: 26kB  
         Buffers: shared hit=3048  
         ->  Nested Loop  (cost=0.42..7030357.95 rows=12750000 width=56) (actual time=0.090..67.554 rows=200000 loops=1)  
               Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
               Buffers: shared hit=3048  
               ->  Seq Scan on public.tbl_gid  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.030..0.031 rows=2 loops=1)  
                     Output: tbl_gid.gid  
                     Buffers: shared hit=1  
               ->  Index Scan using idx_tbl_1 on public.tbl  (cost=0.42..1756.99 rows=100000 width=56) (actual time=0.032..17.225 rows=100000 loops=2)  
                     Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
                     Index Cond: (tbl.gid = tbl_gid.gid)  
                     Buffers: shared hit=3047  
 Planning Time: 0.219 ms  
 Execution Time: 96.072 ms  
(20 rows)  
```  
以上数据搜索方法是从tbl_gid获得gid, 然后在tbl搜索gid的所有记录, 然后  
你也许会说, 为什么不直接从gid的crT_time自动按索引顺序扫描, 然后找到匹配的gid, limit返回呢?   
前面已经说了, 数据是线性分布的, 按着crt_time的顺序, 等你找到gid=9,10的数据需要过滤80万行没用的记录.   
真正的优化是: 完全消除过滤. 所以可以采用union all代替join, 使用merge sort返回.   
如果优化器未来能支持skip scan, 可能就不需要这种写法了.    
- 优化器的一小步, 可能就解决了某个行业某些场景的大问题. 这就是开源的魅力, 有需求就有动力改造. 不断按用户需求的方向发展.   
生成SQL:  
```  
do language plpgsql $$  
declare  
  sql text := '';  
  i int;  
  u text := ' union all ';  
begin  
  sql := 'select * from ';  
  for i in select tbl_gid.gid from tbl_gid loop  
    sql := sql || format (' (select * from tbl where gid=%s order by crt_time) ', i);  
    sql := sql || u;  
  end loop;  
  sql := rtrim(sql, u) || ' order by crt_time limit 10;';  
  raise notice '%', sql;  
end;  
$$;  
```  
执行时间, 100毫秒降低到0.几毫秒:   
```  
select * from   
(select * from tbl where gid=9 order by crt_time )   -- 里面不需要limit, 因为PG支持merge append  
union all  
(select * from tbl where gid=10 order by crt_time )  -- 里面不需要limit, 因为PG支持merge append  
order by crt_time limit 10;   
                                                                      QUERY PLAN                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.86..1.80 rows=10 width=56) (actual time=0.036..0.045 rows=10 loops=1)  
   Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
   Buffers: shared hit=9  
   ->  Merge Append  (cost=0.86..18461.52 rows=197233 width=56) (actual time=0.035..0.042 rows=10 loops=1)  
         Sort Key: tbl.crt_time  
         Buffers: shared hit=9  
         ->  Index Scan using idx_tbl_1 on public.tbl  (cost=0.42..8257.79 rows=99100 width=56) (actual time=0.022..0.026 rows=10 loops=1)  
               Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
               Index Cond: (tbl.gid = 9)  
               Buffers: shared hit=5  
         ->  Index Scan using idx_tbl_1 on public.tbl tbl_1  (cost=0.42..8231.38 rows=98133 width=56) (actual time=0.011..0.011 rows=1 loops=1)  
               Output: tbl_1.gid, tbl_1.crt_time, tbl_1.info, tbl_1.v  
               Index Cond: (tbl_1.gid = 10)  
               Buffers: shared hit=4  
 Planning Time: 0.165 ms  
 Execution Time: 0.069 ms  
(16 rows)  
```  
改成函数调用可以方便使用:  
```  
create or replace function get_tbl_from_tbl_gid() returns TABLE(gid int,crt_time timestamp, info text, v numeric) as $$  
declare  
  sql text := '';  
  i int;  
  u text := ' union all ';  
begin  
  sql := 'select * from ';  
  for i in select tbl_gid.gid from tbl_gid loop  
    sql := sql || format (' (select * from tbl where gid=%s order by crt_time) ', i);  
    sql := sql || u;  
  end loop;  
  sql := rtrim(sql, u) || ' order by crt_time limit 10;';  
  return query execute sql ;   
end;   
$$ language plpgsql strict;   
postgres=# select * from get_tbl_from_tbl_gid();  
 gid |          crt_time          |               info               |        v           
-----+----------------------------+----------------------------------+------------------  
   9 | 2022-08-26 10:33:41.986023 | 9ae6e7501235704db4a06a2583fa3869 | 934.268270867721  
   9 | 2022-08-26 10:33:41.986025 | 2f7b856bf6118a2f705550e50046db1a | 444.519415857999  
   9 | 2022-08-26 10:33:41.986027 | 7bbfcba972224fbd1feaedae7f468391 | 224.418366498535  
   9 | 2022-08-26 10:33:41.986028 | ac93a0fdd1e753bec5d102b92a829510 |  977.99573846894  
   9 | 2022-08-26 10:33:41.98603  | 1fa1c6aac66c12b80c8c35a6032be0e7 | 741.469261203189  
   9 | 2022-08-26 10:33:41.986032 | 65c4e99b0fd2d818159f504cc3238e1b | 434.032166357292  
   9 | 2022-08-26 10:33:41.986033 | c3a0e0f437145b2c0ccbf569e713d457 | 107.788739293836  
   9 | 2022-08-26 10:33:41.986035 | d0a9af284773e7b3516ea2d3753afb0d | 718.387729379674  
   9 | 2022-08-26 10:33:41.986037 | 2c8a1ae7d26b896563b5bcd89f0d0782 |  254.24026094129  
   9 | 2022-08-26 10:33:41.986058 | 551224cd6c0359c6076f2ea78e01576f | 80.4301336515814  
(10 rows)  
Time: 0.724 ms  
```  
现实中会不会遇到这样的数据分布场景?   
传感器、feed数据、监控数据、流数据、时序数据.    
当数据是离散的, 例如只有报警时才有数据, 时间分为报警时间, 数据写入时间两个字段.   
如果某些传感器的数据到达和报警时间的差异非常大, 我们按报警时间搜索, 就可能出现这样的问题.     
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")