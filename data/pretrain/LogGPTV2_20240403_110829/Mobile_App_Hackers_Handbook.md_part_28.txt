E: manifest (line=2)
A: android:versionCode(0x0101021b)=(type 0x10)0x5
A: android:versionName(0x0101021c)="2.3.4" (Raw: "2.3.4")
A: package="com.mwr.dz" (Raw: "com.mwr.dz")
E: uses-sdk (line=7)
A: android:minSdkVersion(0x0101020c)=(type 0x10)0x7
A: android:targetSdkVersion(0x01010270)=(type 0x10)0x12
E: uses-permission (line=11)
A: android:name(0x01010003)="android.permission.INTERNET" (Raw:
"android.permission.INTERNET")
E: application (line=13)
A: android:theme(0x01010000)=@0x7f070001
A: android:label(0x01010001)=@0x7f060000
A: android:icon(0x01010002)=@0x7f020009
A: android:debuggable(0x0101000f)=(type 0x12)0xffffffff
...
Another shorter way to dump resources in addition to the manifest is:
$ aapt l -a /path/to/agent.apk
You will notice that aapt does not produce XML output, which makes it hard to use inside XML viewing
applications. Instead, it produces text that specifies E: for an XML entity and A: for an attribute. Using aapt can
be useful when you have limited tools available.
AXMLPrinter2
This tool parses the Android binary XML format directly. Therefore, APK files need to be unzipped first in order
to obtain the AndroidManifest.xml to pass as an argument to this tool. You can download it from
https://code.google.com/p/android4me/downloads/list. Here is an example of using it to parse and display the
drozer agent manifest:
$ unzip agent.apk
Archive: agent.apk
inflating: res/drawable/ic_stat_connecting.xml
inflating: res/layout/activity_about.xml
inflating: res/layout/activity_endpoint.xml
inflating: res/layout/activity_endpoint_settings.xml
inflating: AndroidManifest.xml
...
$ java -jar AXMLPrinter2.jar AndroidManifest.xml
) and then view it in an application that displays XML files in a
user-friendly manner. Popular web browsers such as Google Chrome and Mozilla Firefox make excellent
XML viewers. They allow you to expand and collapse entities for easy navigation of the manifest.
drozer
A module in drozer named app.package.manifest can parse manifest files and display them to screen. Using
drozer to retrieve a manifest differs from other tools in that it can only parse the manifests of installed
applications. The argument that is passed to this module is the package’s name whose manifest you would like
displayed. An example of this is shown here:
dz> run app.package.manifest com.mwr.dz
 /path/to/save/file to the command.
Disassembling DEX Bytecode
Like all other compiled and interpreted code, the Dalvik bytecode contained within DEX files can be
disassembled into low-level human-readable assembly.
Dexdump
Dexdump is a tool that comes with the Android SDK, and you can find it in any of the subdirectories in the
build-tools folder of the SDK directory. To disassemble DEX files into Dalvik instructions, use the following
command:
$ ./dexdump -d /path/to/classes.dex
...
#3 : (in Landroid/support/v4/app/FragmentState$1;)
name : 'newArray'
type : '(I)[Ljava/lang/Object;'
access : 0x1041 (PUBLIC BRIDGE SYNTHETIC)
code -
registers : 3
ins : 2
outs : 2
insns size : 5 16-bit code units
057050: |[057050]
android.support.v4.app.FragmentState.1.newArray:(I)[Ljava/lang/Object;
057060: 6e20 ea03 2100 |0000: invoke-virtual {v1,
v2},
Landroid/support/v4/app/FragmentState$1;.newArray:(I)[Landroid/support/v4/a
pp/FragmentState; // method@03ea
057066: 0c00 |0003: move-result-object v0
057068: 1100 |0004: return-object v0
catches : (none)
positions :
0x0000 line=137
locals :
0x0000 - 0x0005 reg=1 this Landroid/support/v4/app/FragmentState$1;
0x0000 - 0x0005 reg=2 x0 I
source_file_idx : 1152 (Fragment.java)
...
The output produced by this tool is quite hard to read and almost in the most rudimentary state possible.
Smali and Baksmali
Baksmali is a disassembler that makes use of Jasmin syntax (see http://jasmin.sourceforge.net/). It accepts
DEX and APK files as arguments and disassembles each class in the DEX file to its own file, which is in a much
more readable format. This, in turn, makes analysis of this code much more manageable. To disassemble the
DEX file inside an APK, perform the following command:
$ java -jar baksmali-x.x.x.jar /path/to/app.apk
If no output directory is specified via the -o flag then by default all class files will be put in a directory named
out.
Combined with the tool named smali, this toolkit is very powerful. Smali is an assembler that compiles a
directory filled with classes in disassembled format back to a single DEX file. You can use the following
command:
$ java -jar smali-x.x.x.jar -o classes.dex out/
Go to https://code.google.com/p/smali/ to download both of these tools.
IDA
IDA is a very popular disassembler used by reverse engineers all around the world. The power of IDA is its rich
user interface and vast support for many different CPU architectures and interpreters. It is a commercial tool
sold by Hex-Rays and is available at https://www.hex-rays.com/.
IDA is able to understand the DEX format and provides a user interface with a “graph-view” for understanding
the flow of application logic in an intuitive way. Figure 6.12 shows an example of the graph view provided when
disassembling a DEX file with IDA.
Figure 6.12 Graph view showing the disassembly of a DEX file in IDA.
Decompiling DEX Bytecode
Reading and understanding disassembled code is hard work. The more natural way to review an application
would be to obtain the source code. Dalvik bytecode contained within a DEX file is an interpreted language that
can be translated back to something that resembles the original source code. This can be performed by tools
natively on the DEX file or by first converting the DEX file to standard Java CLASS files.
Dex2jar and JD-GUI
Dex2jar converts Android DEX files to Java Class files. This is useful because many tools are already available
that can decompile Java bytecode back to source code. It is open source and you can download it from
https://code.google.com/p/dex2jar/. It has grown from just a decompiler into a tool suite that performs many
different tasks. However, the focus in this section is on converting Android DEX files to Java files. Here is an
example of performing this operation with the d2j-dex2jar utility:
$ ./d2j-dex2jar.sh /path/to/agent.apk -o /output/to/agent.jar
dex2jar /path/to/agent.apk -> /output/to/agent.jar
The produced JAR file can now be decompiled back into Java source code using a number of available tools. The
most popular choice for decompilation and viewing is JD-GUI. Figure 6.13 shows the converted JAR file open in
JD-GUI.
Figure 6.13 Viewing decompiled application code in JD-GUI
JD-GUI can be downloaded from http://jd.benow.ca/ for all major platforms.
JEB
JEB is a dedicated Android application decompiler that is sold by PNF Software. It comes in two flavors:
JEB Automation—This command-line decompiler enables you to write scripts and perform bulk analysis
of multiple files quicker.
JEB Full—This includes the command-line decompiler as well as a GUI that allows for easy navigation of
the decompiled application. The look and feel of the user interface is very similar to IDA by Hex-Rays.
Figure 6.14 shows an example of decompiling an application in the JEB interface.
Figure 6.14 Viewing decompiled application code in JEB
JEB works directly on the Android package’s DEX file and does not use any intermediate steps that convert the
DEX to a JAR file like other tools. Subtle differences in the Dalvik and Java bytecode sometimes cause other
tools to fail to decompile the code. This is what JEB overcomes by performing this decompilation natively on the
DEX file. For the casual Android application hacker, this failure may not be a problem. However, if accuracy and
quality decompilation is what you are after, JEB offers it at a price. Go to http://www.android-decompiler.com/
for more information about JEB.
Decompiling Optimized DEX Bytecode
DEX files for system applications aren’t usually stored inside their APK. Rather, the code is pre-optimized and
stored as an ODEX file. This file is the result of many optimizations that cause it to become reliant on the exact
version of the Dalvik VM in use and other framework dependencies. This means that ODEX files cannot be
decompiled in the same way as DEX files. In fact, they first need to be converted back to DEX files that have
those optimizations and framework dependencies removed.
To perform this conversion from ODEX to DEX you can use smali and baksmali. You download the entire
/system/frameworks directory of the device on which the optimization took place, which you can do using ADB:
$ mkdir framework
$ adb pull /system/framework framework/
pull: building file list...
...
pull: /system/framework/framework2.odex -> framework/framework2.odex
pull: /system/framework/framework2.jar -> framework/framework2.jar
pull: /system/framework/framework.odex -> framework/framework.odex
pull: /system/framework/framework.jar -> framework/framework.jar
pull: /system/framework/framework-res.apk -> framework/framework-res.apk
pull: /system/framework/ext.odex -> framework/ext.odex
pull: /system/framework/ext.jar -> framework/ext.jar
pull: /system/framework/core.odex -> framework/core.odex
pull: /system/framework/core.jar -> framework/core.jar
pull: /system/framework/core-libart.odex -> framework/core-libart.odex
pull: /system/framework/core-libart.jar -> framework/core-libart.jar
pull: /system/framework/core-junit.odex -> framework/core-junit.odex
pull: /system/framework/core-junit.jar -> framework/core-junit.jar
...
123 files pulled. 0 files skipped.
1470 KB/s (56841549 bytes in 37.738s)
The target ODEX file can then be disassembled into an assembly-like format that uses the provided framework
dependencies and then compiled back into a normal DEX file. For instance, try this on the Settings.odex file
that belongs to the settings application.
$ adb pull /system/priv-app/Settings.odex
2079 KB/s (1557496 bytes in 0.731s)
NOTE
Remember that system applications in Android 4.4 (KitKat) onward have to be placed in /system/priv-app.
This is why we pulled it from this directory and not the /system/app folder where system applications were
stored on older versions of Android.
You can use the following command to convert the ODEX to smali. By default, it stores the disassembled code in
the out/ directory.
$ java -jar baksmali-x.x.x.jar -a 19 -x Settings.odex -d framework/
Now the disassembled code can be assembled again into a DEX file.
$ java -jar smali-x.x.x.jar -a 19 -o Settings.dex out/
The -a parameter given to smali and baksmali is the API version used by the applications. After you have
generated a DEX file you can use your favorite decompilation and viewing tools to analyze the source code.
You can find the API version in use programmatically or by observing which Android version is running on your
device and then finding the corresponding API version number. Table 6.5 shows this mapping for all versions
available at the time of writing.
Table 6.5 Mapping Android Versions to Corresponding API Levels
PLATFORM VERSION API LEVEL VERSION CODE
Android 5.0 21 LOLLIPOP
Android 4.4W 20 KITKAT_WATCH
Android 4.4 19 KITKAT
Android 4.3 18 JELLY_BEAN_MR2
Android 4.2, 4.2.2 17 JELLY_BEAN_MR1
Android 4.1, 4.1.1 16 JELLY_BEAN
Android 4.0.3, 4.0.4 15 ICE_CREAM_SANDWICH_MR1
Android 4.0, 4.0.1, 4.0.2 14 ICE_CREAM_SANDWICH
Android 3.2 13 HONEYCOMB_MR2
Android 3.1.x 12 HONEYCOMB_MR1
Android 3.0.x 11 HONEYCOMB
Android 2.3.3, 2.3.4 10 GINGERBREAD_MR1
Android 2.3, 2.3.1, 2.3.2 9 GINGERBREAD
Android 2.2.x 8 FROYO
Android 2.1.x 7 ECLAIR_MR1
Android 2.0.1 6 ECLAIR_0_1
Android 2.0 5 ECLAIR
Android 1.6 4 DONUT
Android 1.5 3 CUPCAKE
Android 1.1 2 BASE_1_1
Android 1.0 1 BASE
http://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels
This table is going to be useful as a reference for future chapters that will discuss vulnerabilities that were fixed
in certain API versions.
Reversing Native Code
The Linux shared object (.so) files that can be included as part of an Android application may also require
reverse engineering. This may be a scenario where source code is not available and the code being executed by
the native component needs to be understood. Typically, native components run compiled machine code for the
ARM architecture; however, Android now runs on multiple other architectures as well. At the time of writing,
the supported architectures also included x86 and MIPS.
Disassembly and the understanding of native code in this way is a topic that is beyond the scope of this book. A
number of tools are available to disassemble native code, and IDA is one of the most popular choices for this
task.
In addition to just disassembling native code, it is possible to decompile it with the Hex-Rays Decompiler. Hex-
Rays provides a full decompiler from ARM machine code to pseudo-C output; it is at https://www.hex-
rays.com/products/decompiler/ with a hefty price tag attached to it. Multiple open-source attempts have been
made at creating a decompiler for ARM machine code, but to date they have not been as successful as
commercial counterparts.
Additional Tools
This section lists other tools that may be of interest to an Android reverse engineer.
Apktool
You can use Apktool to reverse-engineer an entire Android package back to a workable form for modification.
This includes converting all resources, including AndroidManifest.xml, back to (nearly) their original source as
well as disassembling the DEX file back to smali code. To do this, perform the following command:
$ java -jar apktool.jar d /path/to/app.apk output
I: Baksmaling...
I: Loading resource table...
I: Loaded.
I: Decoding AndroidManifest.xml with resources...