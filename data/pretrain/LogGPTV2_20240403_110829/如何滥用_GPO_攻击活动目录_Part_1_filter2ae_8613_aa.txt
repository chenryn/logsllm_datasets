# 如何滥用 GPO 攻击活动目录 Part 1
|
##### 译文声明
本文是翻译文章，文章原作者 rastamouse，文章来源：rastamouse.me
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
很久以来我一直想写关于组策略对象(GPO, Group Policy Objects)的内容，很高兴终于可以开始了。
如果你对GPO不太熟悉，我强烈建议你阅读[Andy
Robbins](https://twitter.com/_wald0)的“[红队GPO和OU指南](https://posts.specterops.io/a-red-teamers-guide-to-gpos-and-ous-f0d03976a31e)”。他介绍了GPO如何执行，如何使用BloodHound找到基于GPO控制的攻击路径，并解释了执行这些攻击的几种方法。
在武器化方面，[Will
Schroeder](https://twitter.com/harmj0y)发表了文章：[滥用GPO权限](http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/)，并在Powerview中实现了New-GPOImmediateTask。但是这个功能后来[被删除](https://www.harmj0y.net/blog/powershell/make-powerview-great-again/)了，并带有以下解释：
> 不一致，手工操作更好
本系列文章的目的是演示如何枚举这些滥用机会，并将其用于权限提升和实现持久化。
## 枚举
有一些我们可能感兴趣的权限，例如：
  * 在域（domain）中创建新的GPO。
  * 将GPO链接到某个OU（组织单元, organizational unit）。
  * 修改现有的GPO(这可能是/不是当前链接的)。
我之所以这样认为，是因为它们是单独授权的权限。例如：
  * 授权创建GPO并不一定授权其链接到OU。
  * 用户可能修改现有的GPO，但它可能是未链接的，不能链接自己本身。
  * 或者用户可能无法修改GPO，但可以将其链接到另一个OU。
因此，拥有的权限组合将取决于如何实现这种滥用。
## 创建GPO
在组策略管理控制台(GPMC)中授权在域中创建GPO，如下：
可以用下面的方法在PowerView中进行枚举：
    PS > Get-DomainObjectAcl -SearchBase "CN=Policies,CN=System,DC=testlab,DC=local" -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "Group-Policy-Container" }
    AceQualifier           : AccessAllowed
    ObjectDN               : CN=Policies,CN=System,DC=testlab,DC=local
    ActiveDirectoryRights  : CreateChild                                        Convert-SidToName S-1-5-21-407754292-3742881058-3910138598-1106
    LABDesktop Admins
## GP-Link
Get-DomainOU向我们展示了活动目录（Active Directory）中所有的组织单元。在这个例子中，我们只有默认的Domain
Controllers和自定义的Workstations组织单元。
    PS > Get-DomainOU
    usncreated             : 6031
    systemflags            : -1946157056
    iscriticalsystemobject : True
    gplink                 : [LDAP://CN={6AC1786C-016F-11D2-945F-00C04fB984F9},CN=Policies,CN=System,DC=testlab,DC=local;0]      Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "GP-Link" }
    AceQualifier           : AccessAllowed
    ObjectDN               : OU=Workstations,DC=testlab,DC=local                1000的，避免列出每个GPO的Domain
Admins和Enterprise Admins等等。
    PS > Get-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ActiveDirectoryRights -match "WriteProperty|WriteDacl|WriteOwner" -and $_.SecurityIdentifier -match "S-1-5-21-407754292-3742881058-3910138598-[d]{4,10}" }
    AceType               : AccessAllowed
    ObjectDN              : CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local
    ActiveDirectoryRights : CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner
    OpaqueLength          : 0
    ObjectSID             :
    InheritanceFlags      : None
    BinaryLength          : 36
    IsInherited           : False
    IsCallback            : False
    PropagationFlags      : None
    SecurityIdentifier    : S-1-5-21-407754292-3742881058-3910138598-1105      Get-DomainGPO | Where-Object { $_.DistinguishedName -eq "CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local" } | Select-Object DisplayName
    displayname
    -----------    Workstation Policy
如GPMC的Details中所示，LABbwallace是这个名为WorkStation Policy的GPO的所有者。
GPO的创建者被自动显式授权Edit settings（编辑设置）、delete（删除）、modify
security（修改安全性），这些安全性表现为Createchild、Deletechild、Self、WriteProperty、DeleteTree、Delete、GenericRead、WriteDacl、WriteOwner。
在本例中，LABtlockhart还被授予了编辑设置权限，即Createchild、Deletechild、ReadProperty、WriteProperty、GenericExecute。
## 映射GPO和OUs
这可以从几个不同的角度来完成。你可能有一个有趣的GPO，并且希望知道单个GPO对应的是哪个组织单元和/或计算机；你可能希望列出适用于特定组织单元的每个GPO；或者你可能希望列出适用于特定计算机的每个GPO。
###  通过计算机
我们列出对应于ws-1.testlab.local的每个GPO，只显示名称和GUID。
    PS > Get-DomainGPO -ComputerIdentity ws-1 -Properties Name, DisplayName
    displayname           name
    -----------           ----    Demo GPO              {ECB75201-82D7-49F3-A0E0-86788EE7DC36}
    Workstation Policy    {7DD7A136-334C-47C1-8890-D9766D449EFA}
    Default Domain Policy {31B2F340-016D-11D2-945F-00C04FB984F9}
在这里，GPO有一个Display Name、GUID和一个对象GUID，后两者很容易混淆。
###  通过GPO
这里，我们列出了Demo GPO映射的每个组织单元。我们使用GUID在GPLink中搜索过滤器。
    PS > Get-DomainOU -GPLink "{ECB75201-82D7-49F3-A0E0-86788EE7DC36}" -Properties DistinguishedName
    distinguishedname
    -----------------    OU=Domain Controllers,DC=testlab,DC=local
    OU=Workstations,DC=testlab,DC=local
如果你需要知道这些组织单元中有哪些计算机，可以这样做：