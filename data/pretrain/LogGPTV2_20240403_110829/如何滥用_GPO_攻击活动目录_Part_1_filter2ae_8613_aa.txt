# 如何滥用 GPO 攻击活动目录 Part 1

## 译文声明
本文是翻译文章，原文作者为 rastamouse，来源于 rastamouse.me。译文仅供参考，具体内容及含义以原文为准。

## 前言
我一直想撰写关于组策略对象（GPO, Group Policy Objects）的文章，现在终于可以开始了。如果你对 GPO 不太熟悉，我强烈建议你阅读 Andy Robbins 的《红队 GPO 和 OU 指南》，该指南详细介绍了 GPO 的执行方式、如何使用 BloodHound 找到基于 GPO 控制的攻击路径，以及执行这些攻击的几种方法。

在武器化方面，Will Schroeder 发表了关于滥用 GPO 权限的文章，并在 PowerView 中实现了 New-GPOImmediateTask 功能。不过，这一功能后来被删除，理由是“不一致，手工操作更好”。

本系列文章旨在演示如何枚举这些滥用机会，并将其用于权限提升和持久化攻击。

## 枚举
以下是我们可能感兴趣的几项权限：
- 在域中创建新的 GPO。
- 将 GPO 链接到某个组织单元（OU, Organizational Unit）。
- 修改现有的 GPO（可能是或不是当前链接的）。

之所以关注这些权限，是因为它们是单独授权的。例如：
- 被授权创建 GPO 并不一定意味着可以将其链接到 OU。
- 用户可能能够修改现有的 GPO，但它可能是未链接的，或者用户没有权限将其链接到其他 OU。
- 或者用户无法修改 GPO，但可以将其链接到另一个 OU。

因此，具体的权限组合将决定如何实施这种滥用。

## 创建 GPO
在组策略管理控制台（GPMC）中，授权在域中创建 GPO 可以通过以下命令在 PowerView 中进行枚举：

```powershell
PS > Get-DomainObjectAcl -SearchBase "CN=Policies,CN=System,DC=testlab,DC=local" -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "Group-Policy-Container" }
```

输出示例：
```
AceQualifier: AccessAllowed
ObjectDN: CN=Policies,CN=System,DC=testlab,DC=local
ActiveDirectoryRights: CreateChild
SecurityIdentifier: S-1-5-21-407754292-3742881058-3910138598-1106
IdentityReference: LABDesktop Admins
```

## GP-Link
`Get-DomainOU` 命令显示活动目录中的所有组织单元。在这个例子中，我们只有默认的 Domain Controllers 和自定义的 Workstations 组织单元。

```powershell
PS > Get-DomainOU
usncreated: 6031
systemflags: -1946157056
iscriticalsystemobject: True
gplink: [LDAP://CN={6AC1786C-016F-11D2-945F-00C04fB984F9},CN=Policies,CN=System,DC=testlab,DC=local;0]
```

要查找具有 GP-Link 权限的对象，可以使用以下命令：

```powershell
PS > Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ObjectAceType -eq "GP-Link" }
AceQualifier: AccessAllowed
ObjectDN: OU=Workstations,DC=testlab,DC=local
```

为了避免列出每个 GPO 的 Domain Admins 和 Enterprise Admins 等，我们可以过滤出特定的安全标识符（SID）：

```powershell
PS > Get-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { $_.ActiveDirectoryRights -match "WriteProperty|WriteDacl|WriteOwner" -and $_.SecurityIdentifier -match "S-1-5-21-407754292-3742881058-3910138598-[d]{4,10}" }
AceType: AccessAllowed
ObjectDN: CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local
ActiveDirectoryRights: CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner
SecurityIdentifier: S-1-5-21-407754292-3742881058-3910138598-1105
```

获取 GPO 的显示名称：

```powershell
PS > Get-DomainGPO | Where-Object { $_.DistinguishedName -eq "CN={7DD7A136-334C-47C1-8890-D9766D449EFA},CN=Policies,CN=System,DC=testlab,DC=local" } | Select-Object DisplayName
DisplayName: Workstation Policy
```

如 GPMC 的详细信息所示，LABbwallace 是名为 WorkStation Policy 的 GPO 的所有者。GPO 的创建者自动获得编辑设置、删除和修改安全性的权限，这些权限表现为 Createchild、Deletechild、Self、WriteProperty、DeleteTree、Delete、GenericRead、WriteDacl 和 WriteOwner。在此例中，LABtlockhart 还被授予了编辑设置的权限，即 Createchild、Deletechild、ReadProperty、WriteProperty 和 GenericExecute。

## 映射 GPO 和 OUs
这可以从几个不同的角度来完成。你可能有一个有趣的 GPO，并希望知道它对应的是哪个组织单元和/或计算机；你可能希望列出适用于特定组织单元的每个 GPO；或者你可能希望列出适用于特定计算机的每个 GPO。

### 通过计算机
我们列出对应于 `ws-1.testlab.local` 的每个 GPO，只显示名称和 GUID。

```powershell
PS > Get-DomainGPO -ComputerIdentity ws-1 -Properties Name, DisplayName
DisplayName: Demo GPO
Name: {ECB75201-82D7-49F3-A0E0-86788EE7DC36}
DisplayName: Workstation Policy
Name: {7DD7A136-334C-47C1-8890-D9766D449EFA}
DisplayName: Default Domain Policy
Name: {31B2F340-016D-11D2-945F-00C04FB984F9}
```

在这里，GPO 有一个显示名称、GUID 和一个对象 GUID，后两者容易混淆。

### 通过 GPO
这里，我们列出了 `Demo GPO` 映射的每个组织单元。我们使用 GUID 在 GPLink 中搜索过滤器。

```powershell
PS > Get-DomainOU -GPLink "{ECB75201-82D7-49F3-A0E0-86788EE7DC36}" -Properties DistinguishedName
DistinguishedName: OU=Domain Controllers,DC=testlab,DC=local
DistinguishedName: OU=Workstations,DC=testlab,DC=local
```

如果你需要知道这些组织单元中有哪些计算机，可以这样做：