ities. This Seq2Seq model allows it to focus on the specific parts
of the power signals to output one activity in the target sequence
every time. To achieve a better prediction performance, DeepPower
utilizes the convolutional layer to capture high-level features from
the processed suspicious signals and feeds these high-level features
into the Seq2Seq model. Second, to infer activities from suspicious
signals, we need to build the training dataset and testing dataset to
train and test this Seq2Seq model. However, given a power signal,
it is unclear that how many activities it contains, and which part
of power signal should each activity correspond to. It is difficult to
build the dataset of time-aligned pairs of activities sequence (output)
and power signals (input). We address this dataset issue through
two main steps. First, we concatenate the power signal of individual
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan38state ¯hs, and the result is normalized to derive a variable-length
alignment weight vector αt :
l
αt(s) =
exp(score(ht , ¯hs)))
i =1 exp(score(ht , ¯hi)))
(5)
where the alignment weight αt indicates that the parts in the input
are the most likely to help in predicting the output in the target
sequence.
4.5 Infection Process Modeling & Correlation
Analysis
To detect IoT malware via the infection process, this phase (Phase 4
in Figure 4) first models the infection process and then performs a
correlation analysis of the inferred activities based on the infection
process model. The malware analysis (Section 3) shows that IoT
malware usually use the following different approaches to infect
devices: (1) downloading scripts and execution; (2) creating new files
and execution; (3) direct injection of commands; and (4) running
different commands interactively. We also find that even given the
sequence of the same commands, some attackers run the entire
sequence multiple times to meet different architecture requirements,
while others tend to repeatedly run parts of the command sequence
to achieve the same goal. In addition, there are multiple activities
that can achieve the same purpose. For instance, both of the wget
command and the tftp command can be used to download the
malware to the device for execution. To handle such complexity
and diversity, we map all these activities in target sequence to
corresponding infection states according to Table 2, which enables
us to better understand the semantics of the entire target sequence.
Then, we correlate these states from inferred activities against our
infection model (Figure 3) to identify whether an IoT device is
infected. According to Table 2, there are different combinations
of states that are required for the infection of an IoT malware. To
transform these combinations into a scoring system, we employ
a regression model to estimate the state weights and a threshold
value.
5 IMPLEMENTATION AND EVALUATION
In this section, we implement a prototype of DeepPower and eval-
uate our method on real-world settings. We perform a number of
experiments to answer the following questions:
• Can we implement DeepPower in a plug-and-play manner
• Can DeepPower detect the power signals of suspicious activ-
• Can the power signals associated with different activities be
distinguishable and what is the classification performance
of the individual activity (Section 5.3) ?
• What is the DeepPower performance on identifying multi-
ple activities based on power signals during cross-device
prediction (Section 5.4) ?
• What is the DeepPower performance in detecting infection
activities of real-world IoT malware based on fine-grained
power signals analysis (Section 5.5) ?
• Can DeepPower be resistant to potential evasion attacks dur-
using low-cost sensor and devices (Section 5.1) ?
ities by the autoencoder model (Section 5.2) ?
ing the detection of infection activities (Section 5.6) ?
Figure 5: The wavelet denoising of wget command on D-Link
IP Camera: (a) the signal after SMA; (b) background noise;
and (c) the signal after denoising. (a), (b) and (c) share the
same x coordinate.
activity to create the power signals of multiple activities. Second,
this Seq2Seq task requires to further process the training dataset
by labeling a power signal multiple times. The power signal of one
activity can usually be converted to dozens of frames for feature
extractions, which means that dozens of frame inputs correspond to
one output. This extreme imbalance between the input and output
lengths makes it difficult for the Seq2Seq model to accurately align
the short target sequence to the long power frame sequence. There-
fore, instead of setting one label per activity in target sequence,
we set each activity with multiple repeated labels according to the
power signal length of this activity. This labeling method enables
the model to predict each activity of the target sequence and the
boundaries of each activity. In addition, it also makes our model
focus more on the activities that the corresponding signals have
longer lengths, which are more energy-consuming and sensitive.
For a given power waveform sample X = {x1, ..., xn}, we map it
to a target sequence y = {y1, ..., ym}. The variable n is the length
of the power waveform of one or more activities. The m means
the number of activities contained in the power waveform. The
target sentence y is generated one target yt at a time based on the
probability:
P(yt |y<t , ct) = so f tmax(Ws ˜ht)
(2)
where the attentional hidden state ˜ht is computed as:
˜ht = tanh(Wc[ct ; ht])
(3)
ht is the hidden state of the Decoder, ct is the input context vec-
tor, and [;] indicates the concatenation operation. Ws and Wc are
trainable parameters.
αt(s)¯hs
(4)
ct =
s
Here, the context vector ct is derived from all the hidden states
of the Encoder. At each time step t, the score function is used to
compare the target hidden state ht and all the encoder hidden
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan39We choose IP cameras to evaluate the detection solution based
on the fact that the most known attacks, i.e., Mirai botnet, targeted
such devices [3, 4]. IP cameras contain representative hardware
modules and complex software applications, such as image sensor
and light sensor, which require special software for remote viewing,
motion detection and day/night mode shift. In other words, the
power signals of these devices are complex and dynamic, and not
as fixed and repeated as SCADA [9], PLC [60] or MCU [33]. Table 3
lists the detailed information of three real-world IP cameras used
in this work. Without loss of generality, we install the OpenWrt
15.05.1 firmware, the mjpg_streamer driver and light sensor daemon
on D-Link DCS-934L (D-934L) to ensure that it works normally.
This firmware allows us to test the default password attack. The
camera of ESCAM G02 (E-G02) has a vulnerability that allows us
to test on the original firmware. Xiaofang 1S (X-1S) allows us to
run a modified firmware on it through SD-card hacks [18]. In our
experiments, these IoT devices represent three different noise levels
of power signals: strong, medium and weak, which ensure broad
coverage of our evaluation.
Based on hardware configuration discussed above, we collect the
power signals of these IoT devices in a real-world environment. The
power signals generated by all relevant software are reflected in the
background of power signals. For each time window of the power
signals, we first perform a fast detection of the suspicious activities
to identify potential anomalies. Then, these suspicious signals are
further processed to obtain the waveform of suspicious activities
through smoothed z-score algorithm and the Run Length Encoding
(RLE) approach. To identify what type of activities are included in
a suspicious signal waveform, we need to perform a fine-grained
analysis. Since the signals are noisy, we first reduce the noise by
the Wavelet method. Our experiments show that the Wavelet con-
figuration of db2 type and 7 level can achieve the satisfactory noise
reduction results. Then, to perform the spectral feature extraction,
we adopt the following parameters: the length of FFT window is
2048, the number of samples between successive frames is 512 and
n_mels is 32. All experiments are conducted on a server with 2
NVIDIA K40 GPUs with the CUDA 9.0 toolkit installed.
The main problem that DeepPower is expected to address is the
fine-grained detection of malware infections on resource-constrained
devices. We do not assume that DeepPower is only for less complex
devices. Considering that IoT devices are becoming increasingly
complicated, with more functionalities equipped, this may diversify
the background information of power signals. In this case, we can
add more relevant signals to the training data set to ensure that
DeepPower can still predict reasonable results.
5.2 Detection of Suspicious Activities
To detect the suspicious activities, we implement the autoencoder
model using TensorFlow. For the Encoder Eθ and Decoder Dθ , we
follow multi-layer neural network Eθ(LD) = Z(LD) = loдit(W LD +
bE) and Eθ(LD) = LD = loдit(W T Z(LD) + bD) [31], where W
projects the input dimension to a lower dimensional space, W T
indicates a projection from the low-dimensional space back to the
original input dimension, bE and bD are the bias terms. We use one
hidden layer that projects the input signals from 1000 dimensions
to 256 dimensions. The hyperparameter λ is set to 20 to isolate a
Figure 6: The wiring diagram (a) and experimental setup (b)
for DeepPower system (AD2: Analog Discovery2), the green
lines represent the sensor wires, the red lines denote the
power supply, the black lines are the ground wires, and the
blue wires connect the AD2 with the sensors. The power sup-
ply, shunt, and AD2 board need to be properly grounded.
5.1 Experimental Setup
Most IoT devices have separate alternative current to direct cur-
rent (AC-DC) converters, which can serve as the power monitoring
point without any hardware or software modification. In this work,
we measure the power consumption of the entire IoT device, by
inserting a precision resistor (0.3 Ω) between the load and the
power supply. We choose the Analog AD8210 current sensor and
the USB oscilloscope Analog Discovery2 to monitor power usage
with 1-MHz sampling rate. Figure 6 shows the wiring diagram and
experimental setup for our system. The entire system has its own
separate power supply and does not interfere with the power con-
sumption of the monitored device. There are two main reasons
for choosing such configuration. First, this plug-and-play setting
ensures that it can be easily deployed to monitor the critical and
sensitive IoT devices. Second, choosing a low sampling rate (1 MHz),
which is three orders of magnitude lower than other work [33], can
reduce the cost of the entire implementation, making our approach
more practical.
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan40Table 3: The summary of real-world IoT devices being tested in our experiments.
CPU Arch
IoT Device
D-Link (D-934L) MIPS
ESCAM (E-G02) ARM
Xiaofang (X-1S) MIPS
Firmware
OpenWRT rt305x
Original version
Modified version
Figure 7: The detection of suspicious activities by autoen-
coder model on DCS-934L.
small portion of power signals as the noise or outliers. To train this
model, we sample the power signals with 1-second window size,
and collect 100 normal power signal samples for each device. Then
these 1-second samples are downsampled to 100 kHz from 1 MHz.
After normalizing the signals of each device, we mix all the signals
together as the training data to train an autoencoder model that can
be applied on different devices. Figure 7 demonstrates the detection
results on DCS-934L. The outliers detected by the model are caused
by the suspicious activities. The following experiments will map
these suspicious power signals to their corresponding activities.
5.3 Discriminative Analysis of Activities
To infer activities from power signals, we first perform signal clas-
sification task to evaluate the distinguishability of the individual
command’s power signal after data preprocessing. This task is
conducted by ResNet-50 Convolutional Neural Networks (CNN)
model [22] in PyTorch. This experiment is implemented on the
DCS-834L IP Camera. We should notice that the signal length of
each activity is different, and if the entire signals of the activities are
fed into the neural networks, the model will learn to identify these
activities mainly by their signal lengths rather than the patterns of
their signals. Therefore, we split the power signal of each activity
to multiple 10 ms chunks without overlap, where the chunks from
the same activity have the same label. After this step, our training
data set and testing data set have 78,220 and 7,309 fix-length power
signal samples, respectively. In our experiments, we set the batch
size to 128, weight decay to 1e-2, learning rate to 1e-4, and the max
epoch to 70. To train the model, we use the stochastic gradient
descent (SGD) optimizer and reduce the learning rate by a factor
of 10 when the validation loss is not improved for five consecutive
epochs.
Power Usage Noise Level
5V, 1A
5V, 1.6A
5V, 1A
Attack Type
Noise-dominant
Default password
Medium-intensity CGI vulnerabilities
Low-noise
SD-card hacks
Table 4 shows the confusion matrix of 11 different activities for
the classification task. Compared with the commands in Table 2, we
group the chmod, rm, mkdir and cp command into the METADATA
operation. On the monitored device, there exists an intrusion type
to obtain a root shell by remote attackers, which is labeled as login
activity. If there is a non-existent or unrecognized command, the
corresponding power signal is labeled as UNKNOWN activity. As
shown in the table, most of the power signal chunks are classified
correctly as their true activity labels. The model achieves the highest
prediction accuracy on UNKNOWN activity. For the signals with
longer activities, e.g., grep and wget, the prediction results are not
as good as other activities. A possible reason is that some CPU and
IO operations involved in one activity are similar to other activities.
Because we split the power signal of each activity into equal-length
chunks, some signal chunks from different activities have highly
similar characteristics. Still, these different patterns of the same
activity can be used to identify the corresponding activity label. The
classification results show that the power signals of the different
individual activities are indeed distinguishable.
However, this classification model with the fix-length chunks
cannot be used to directly predict multiple activities from power
signals for the following reasons. First, the main reason is that
power signals are very complicated in real-world. Given a suspi-
cious power signal, it is difficult to determine how many activities
it contains and the location of each activity. Thus the fix-length
model can result in poor classification performance since it divides
the power activities into one chunk. Second, even though it can
utilize the sliding windows to avoid the problem of inappropri-
ate segmentation, this solution has high overhead and introduces
new problems, such as how to combine the results of each chunk
into a sequence. Third, this model outputs the result of each chuck
independently, which will result in the loss of the dependency in-
formation of the neighboring chunks and the global information
of the entire sequence. Therefore, we apply the Seq2Seq model to
directly map the power signals to the executed activities sequence
according to the order in which they are executed. This model
can not only overcome the above challenges, but also be trained
end-to-end.
5.4 Multiple Activities Prediction
To predict multiple activities based on power signals, we imple-
ment the Seq2Seq model using TensorFlow. The Encoder employs
3 convolutional layers with 16-length filter and 2 strides to extract
high-level features, and a one-layer Bidirectional LSTM neural net-
works with 256-dim hidden units to capture contextual information
in the input. The Decoder employs a one-layer LSTM neural net-
work with 256-dim hidden units to output the target sequence in
an autoregressive manner. To train the model, we use the SGD
optimizer and a learning rate of 1e-06. The dropout scheme with a
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan41Table 4: The confusion matrix (%) of the individual activity’s classification on DCS-934L.
cat
73.86
2.27
3.26
1.31
1.00
2.50
0.
2.47
3.29
4.21
1.59
cd
0.59
85.45
0.65
3.93
0.
0.40
0.
2.06
0.09
0.34
0.
exe
4.55
3.18
76.02
6.11
0.50
3.10
2.00
6.58
1.46
8.08
0.40
echo
1.19
5.45
1.14
72.93
0.10
0.90
0.40
12.76
0.
0.46