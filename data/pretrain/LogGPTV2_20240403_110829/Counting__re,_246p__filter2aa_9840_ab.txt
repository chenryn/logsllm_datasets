14: if (rA!=0){ rA--; jmp 119;} else 
15: fork @ 20; copy up to rB; jmp 16;
16: rC=0; 
17: if (rA!=0){ rA--; } else jmp 19
18: rC++; jmp 17;
19: fork @ 64; copy up to rB; jmp 119;
20: rC=0; 
21: fork @ 29; copy up to rB; jmp 22;
22: if (rA!=0){ rA--; } else jmp 24
23: rC++; jmp 22;
24: if (rB!=0){ rB--; } else jmp 26
25: if (rZ!=0){ rZ--; jmp 00;} else jmp 21
26: rA=0; 
27: if (rC!=0){ rC--; } else jmp 119
28: rA++; jmp 27;
29: rC=0; 
30: fork @ 84; copy up to rB; jmp 31;
31: rD=0; 
32: if (rA!=0){ rA--; } else jmp 34
33: rD++; jmp 32;
34: if (rD!=0){ rD--; } else jmp 42
35: if (rD!=0){ rD--; } else jmp 42
36: fork @ 45; copy up to rB; jmp 37;
37: rC++; 
38: rB=0; 
39: if (rA!=0){ rA--; } else jmp 41
40: rB++; jmp 39;
41: if (rZ!=0){ rZ--; jmp 00;} else jmp 30
42: rA=0; 
43: if (rC!=0){ rC--; } else jmp 119
44: rA++; jmp 43;
45: rC=0; 
46: fork @ 84; copy up to rB; jmp 47;
47: if (rA!=0){ rA--; } else jmp 49
48: rC++; jmp 47;
49: fork @ 92; copy up to rC; jmp 50;
50: if (rB!=0){ rB--; } else jmp 119
51: rA=0; 
52: rB=0; 
53: if (rC!=0){ rC--; } else jmp 55
54: rB++; jmp 53;
55: fork @ 84; copy up to rB; jmp 56;
56: if (rA!=0){ rA--; } else jmp 58
57: rC++; jmp 56;
58: fork @ 84; copy up to rB; jmp 59;
59: if (rB!=0){ rB--; } else jmp 61
60: rA++; jmp 59;
61: if (rC!=0){ rC--; } else jmp 63
62: rA++; jmp 61;
63: rA++; jmp 119;
64: fork @ 84; copy up to rB; jmp 65;
65: rD=0; 
66: if (rA!=0){ rA--; } else jmp 68
67: rD++; jmp 66;
68: if (rD!=0){ rD--; } else jmp 119
69: rA++; 
70: if (rD!=0){ rD--; } else jmp 119
71: if (rB!=0){ rB--; } else jmp 119
72: fork @ 64; copy up to rB; jmp 73;
73: rE=0; 
74: if (rA!=0){ rA--; } else jmp 76
75: rE++; jmp 74;
76: if (rB!=0){ rB--; } else jmp 119
77: fork @ 64; copy up to rB; jmp 78;
78: if (rA!=0){ rA--; } else jmp 80
79: rE++; jmp 78;
80: rB=0; 
81: if (rE!=0){ rE--; } else jmp 83
82: rB++; jmp 81;
83: fork @ 99; copy up to rB; jmp 119;
84: rA=0; 
85: if (rB!=0){ rB--; } else jmp 119
86: rA++; jmp 85;
87: rA=0; 
88: if (rB!=0){ rB--; } else jmp 90
89: rA++; jmp 88;
90: if (rC!=0){ rC--; } else jmp 119
91: rA++; jmp 90;
92: rA=0; 
93: rB=0; 
94: if (rC!=0){ rC--; } else jmp 119
95: if (rC!=0){ rC--; } else jmp 98
96: rA++; 
97: if (rZ!=0){ rZ--; jmp 00;} else jmp 94
98: rB++; jmp 119;
99: fork @ 108; copy up to rB; jmp 100;
100: if (rA!=0){ rA--; } else jmp 103
101: if (rB!=0){ rB--; } else jmp 119
102: rA++; jmp 101;
103: fork @ 113; copy up to rB; jmp 104;
104: rB=0; 
105: if (rA!=0){ rA--; } else jmp 107
106: rB++; jmp 105;
107: if (rZ!=0){ rZ--; jmp 00;} else jmp 99
108: rA=0; 
109: if (rC!=0){ rC--; } else jmp 119
110: if (rB!=0){ rB--; } else jmp 112
111: if (rZ!=0){ rZ--; jmp 00;} else jmp 108
112: rA++; jmp 119;
113: if (rC!=0){ rC--; } else jmp 116
114: if (rB!=0){ rB--; } else jmp 119
115: if (rZ!=0){ rZ--; jmp 00;} else jmp 113
116: rA=0; 
117: if (rB!=0){ rB--; } else jmp 119
118: rA++; jmp 117;
```
Now, we needed to slowly analyze what each function does. We can either do this black
box style (using a lot of inputs and analyzing output to guess a function), or white box
(just analyze each instruction properly). We ended up doing it the latter way, as functions
are short enough not to be painful to analyze.
We started at leaf functions, i.e. ones without forks in themselves. For example function
at 113:
```
113: if (rC!=0){ rC--; } else jmp 116
114: if (rB!=0){ rB--; } else jmp 119
115: if (rZ!=0){ rZ--; jmp 00;} else jmp 113
116: rA=0; 
117: if (rB!=0){ rB--; } else jmp 119
118: rA++; jmp 117;
```
It can be literally transcribed to:
```
while true:
  if rC != 0:   # 113
    rC--
    if rB != 0: # 114
      rB--
    else:
      return
    continue
  else:
    break
rA = 0       # 116
while true:
  if rB != 0:
    rB--
    rA++
  else:
    break
```
It's pretty weird code, but putting loop-ending conditions in the `while` condition 
and ignoring useless assignments makes it better:
```
while rC != 0:
  rC--
  rB--
rA = 0
while rB != 0:
  rA++
  rB--
```
With code written as such, we can recognize the function as subtraction - `rA = rB-rC`.
The `rA` register is then copied to the main, non-forked function as a return value.
Now that we know what this function does, we can patch our interpreter to make it run 
faster by adding a special case to its main loop:
```python
if pc == 113:
    regs[0] = regs[1]-regs[2]
    break
```
This has somewhat sped up calculations. Without reversing all the functions though,
the calculation is still way too slow.
I won't write up how to reverse all the functions - I'll just summarize what each of them does
(roughly in the order I reversed them):
```
113: return rB-rC;
108: return rC>rB;
99: return rB mod rC;  (this was calculated by repeated subtraction of rC from rB)
84: return rB;         (this might seem unnecessary, but it's used as a means 
                        of copying a register)
92: return rC/2, rC%2; (this function is unique in that it returns two values in rA and rB)
45: if rB%2 == 0:
      return rB/2;
    else:
      return rB*3+1;   (a.k.a. Collatz sequence)
29: return total_stopping_time(rB); (a.k.a. number of iterations we need to apply
                                     Collatz function, until we get a 1)
20: return sum(total_stopping_time(i) for i in 1..n)
64: return fibonacci(rB) % rC (originally calculated in exponential time - recursively)
0: return fibmod(arg, sumcollatz(arg))
```
We implemented all of these shortcuts in our interpreter, but it was still very slow.
We were able to calculate an answer up to maybe a couple millions, but after that it was 
too much waiting. Instead, we rewrote the final function to C++ code. We also memoized
all the Collatz stopping times for all integers up to a billion - it took 2GB of RAM, but
sped up calculations significantly. In the end, the C++ code printed the flag after just
a couple of minutes.
The disassembler and sped up interpreter is in `parse.py` file, while the final C++
solver is in `fast.cpp` file. Python code gets its argument as command line argument,
while C++ one reads it from stdin.