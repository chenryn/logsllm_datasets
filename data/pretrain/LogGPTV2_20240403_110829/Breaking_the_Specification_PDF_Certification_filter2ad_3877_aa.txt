# Title: Breaking the Specification: PDF Certification
# Authors: Simon Rohlmann, Vladislav Mladenov, Christian Mainka, and Jörg Schwenk

## Abstract
The Portable Document Format (PDF) is the de facto standard for document exchange. The PDF specification defines two types of digital signatures to ensure the authenticity and integrity of documents: approval signatures and certification signatures. Approval signatures validate a specific state of the PDF document, and their security has been previously investigated at CCS'19. Certification signatures are more powerful and flexible, allowing for complex workflows such as multi-party contract signing. They permit specific changes to a signed document without invalidating the signature. This paper presents the first comprehensive security evaluation of certification signatures in PDFs. We describe two novel attack classes—Evil Annotation and Sneaky Signature attacks—that exploit flaws in the current PDF specification. Both attack classes allow an attacker to significantly alter a certified document’s visible content without raising any warnings. Our practical evaluation shows that 15 out of 26 viewer applications are vulnerable to Evil Annotation attacks, and 8 are vulnerable to Sneaky Signature attacks. We also demonstrate how to gain high-privileged JavaScript execution in Adobe products. We responsibly disclosed these issues to vendors and propose concrete countermeasures and improvements to the PDF specification.

## 1. Introduction
PDF signatures are a well-established mechanism to ensure the integrity, authenticity, and non-repudiation of PDF documents. Introduced in 1999, they are used to protect important documents such as contracts, certifications, and invoices. According to Adobe, 250 billion PDF documents were opened by their applications in 2018, with 8 billion being signed. The legal basis for digitally signed documents is provided by regulations like the eIDAS Regulation in the European Union and the ESIGN and UETA acts in the United States.

### Example Attack Scenario
In an exemplary attack scenario, a certifier creates a certified contract with sensitive information. The certifier allows specific changes, such as additional signatures. An attacker can then alter the amount from $100 to $100,000 and change the IBAN to their own account. The victim, using a vulnerable PDF viewer, cannot detect the manipulation and thus accepts the modified contract.

### Types of PDF Signatures
The PDF specification defines two types of digital signatures:
1. **Approval Signatures**: These validate a specific state of the document. Any other change invalidates the signature or triggers warnings in most PDF viewers.
2. **Certification Signatures**: These provide a more powerful and flexible mechanism, allowing for specific permitted changes without invalidating the signature. Only one certification signature is allowed per document, and it must be the first signature.

### Use Case: Certified Document
Consider two companies agreeing on a contract but unable to meet in person. The contract is converted to a PDF, and both CEOs sign it to make it legally binding. The sales departments are allowed to add parameters and annotations. The CEO of Company 1 uses a certification signature, allowing some alterations after certification. Company 2 fills in form fields, adds annotations, and signs the document. However, Company 2 should not be able to modify the original text, and all changes should be visible to a judge.

### Security of PDF Certification
We investigate the question: "How dangerous are permitted changes in certified documents?" We systematically analyze the allowed modifications and reveal two new vulnerabilities: the Evil Annotation Attack (EAA) and the Sneaky Signature Attack (SSA). These vulnerabilities allow an attacker to change the visible content of a PDF document while keeping the certification valid and showing no warnings.

### PDF Applications Vulnerability
We evaluated 26 PDF applications and found that 15 are vulnerable to EAA, and 8 are vulnerable to SSA. In total, 24 applications are vulnerable to at least one specification flaw. Additionally, we found that 11 out of 26 applications have permission mismatches.

### Code Injection Attack on Adobe
Certified documents in Adobe products can execute high-privileged JavaScript code. We show that this behavior allows attackers to embed malicious code into a certified document. Adobe, Foxit, and LibreOffice have provided patches for these vulnerabilities.

### Responsible Disclosure
We reported all issues to the respective vendors and cooperated with CERT-Bund (BSI). Adobe, Foxit, and LibreOffice have released patches. We are also participating in the standardization process via DIN and ISO to address these attacks in the next PDF specification.

### Contributions
- **Attacker Model**: We define an attacker model based on real-world usage of certified documents and consider the attack success on three different PDF application UI layers.
- **Security Analysis**: We provide an in-depth security analysis of certified documents by analyzing the 994-page PDF 2.0 specification.
- **Vulnerabilities**: We discovered the EAA and SSA, which allow arbitrary modification of the displayed content in a certified document.
- **Tools**: We developed two tools—PDF Tester and PDF Detector. PDF Tester evaluates the security of multiple PDF applications, and PDF Detector is an online service that recognizes the described attacks.
- **Evaluation**: We evaluated 26 popular PDF applications on Windows, macOS, and Linux. Only 2 applications were secure; 15 were vulnerable to EAA, and 8 to SSA.
- **Proposed Fixes**: We propose fixes for the EAA and SSA.
- **JavaScript Execution**: We extend the impact of EAA and SSA by showing how to use them for executing high-privileged JavaScript.

## 2. Basics
### PDF Structure
A PDF document consists of four main building blocks: header, body, xref table, and trailer. The header defines the document version, the body contains the content, the xref table provides the byte positions of objects, and the trailer defines the byte position of the xref table and the root object (Catalog).

### Interactive Elements
The PDF specification defines interactive elements such as forms and annotations. Forms allow user input in predefined fields, while annotations provide additional comments or notes.