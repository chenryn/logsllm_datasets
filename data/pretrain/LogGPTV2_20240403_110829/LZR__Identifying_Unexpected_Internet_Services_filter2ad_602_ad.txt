46%
81%
87%
68%
54%
79%
85%
79%
-16%
5%
58%
84%
-9%
7%
68%
87%
75%
98%
99%
Table 4: LZR Performance—Filtering for IPs that acknowledge data increases service ﬁngerprinting speed by up to 55 times
while ﬁnding up to 30% more unexpected services. All relative performance numbers are compared to ZGrab and measured at a
1 Gb/s scanning rate.
expensive operations (e.g., cryptographic functions in TLS).
At minimum, LZR is 1.9 times faster than ZGrab when scan-
ning 5672/AMQP and, at maximum, 6.3 times faster when
scanning 443/TLS+HTTP—equivalent to a 40 CPU hour
speed-up of a 100% scan of IPv4 when using ZGrab’s default
number of senders (1,000) and scanning at ZMap’s calculated
sending rate that minimizes ZGrab’s packet loss (50K pps).
The performance of LZR as ZGrab’s shim (i.e., ZMap/LZR +
ZGrab) varies based on a port’s service makeup. When a port
contains a large raw number of hosts that do not consistently
establish a TCP connection (e.g., zero window), there is sub-
stantial performance improvement: ZMap/LZR + ZGrab is
2.6 times faster than ZGrab when scanning 62220/HTTP. On
the contrary, since the relative number of hosts that do not
consistently establish a TCP connection on port 443 is small,
there is little improvement (1.1 times).
When a signiﬁcant fraction of candidate services do not
acknowledge data, there is signiﬁcant improvement when us-
ing LZR to ﬁlter hosts ofﬂine (i.e., when ZGrab can run at
full speed). On a 100% IPv4 scan of 27017/MongoDB, only
21% of hosts that SYN-ACK acknowledge data and an addi-
tional 30% of hosts send a zero window, which allows LZR
to increase ZGrab performance by 7 times and a LZR scan
by 55 times. Unpopular ports are expected to have the same
performance improvement as 62220/HTTP (e.g., a 25 times
speed-up) because IPs on the majority of ports are more likely
to not acknowledge data when sending a SYN-ACK.
How much bandwidth does LZR save? Using LZR alone
to ﬁngerprint services always saves bandwidth (up to 87%
on 47808/HTTP+TLS) when the reasonably-expected data
is sent during the initial handshake, as (1) LZR does not
attempt to re-transmit ACKs to zero-window hosts to check
for an increase in window size, and (2) LZR does not need
to complete full L7 handshakes. However, when using LZR
alongside ZGrab when scanning a port where the majority
of TCP-responsive hosts serve the expected protocol, there
exists an overhead in the number of total packets sent—even
when there is a speed-up in time—due to LZR sending at
least one extra ACK to ﬁngerprint before re-attempting the
actual handshake (e.g., LZR + ZGrab together send 28% more
packets than ZMap+ZGrab for 80/HTTP even though LZR +
ZGrab run 1.2 times faster than ZMap+ZGrab).
6 Related Work
Fast Internet-wide scanning has been used in hundreds of
academic papers in the past seven years. While we cannot
enumerate every paper that has used the technique, we empha-
size that scanning is now common in the security, network-
ing, and Internet measurement communities. Data collected
3124    30th USENIX Security Symposium
USENIX Association
through Internet-wide scans has been used to understand cen-
sorship [42, 52, 53], botnet behavior [10, 46], patching be-
havior [23, 25, 47] as well as to uncover vulnerabilities in
IoT and SCADA devices [19, 51, 67], cryptographic proto-
cols like TLS [9, 11, 13, 17, 37], SSH [6, 36], and SMTP [22],
and the Web PKI [25]. Multiple tools have emerged in the
space, most notably ZMap [26] and Masscan [29]. As of 2020,
more than 300 papers used ZMap and in 2014, Durumeric
et al. found that a signiﬁcant fraction of all Internet scanning
uses ZMap [23]. Prior to the development of these tools in
2013, groups performed smaller-scale studies to measure a
multitude of Internet dynamics (e.g., [35]).
Despite the growing popularity of the technique, there has
been relatively little work speciﬁcally investigating the dy-
namics of Internet-wide scanning. Several works have noted
the large discrepancy between L4 and L7 responses [21, 24,
26, 36, 51, 67]. Clayton et al. [18] ﬁnd evidence of dynamic
blocking within the Great Firewall of China —but do not for-
mally quantify how wide-spread the behavior is —and Wan
et al. [69] ﬁnd evidence of dynamic blocking within SSH.
Alt et al. introduced degreaser [8] to locate “tarpits” —fake
services that attempt to trick network scanners; tarpits may
use some of the same techniques we see middleboxes use at
the start of a connection. In a similar vein to our work, in 2018,
Bano et al. [12] studied the notion of host liveness. As part
of their taxonomy, they considered the relationship between
live services on different points, showing that the responses
on popular ports are correlated with one another. In 2014,
Durumeric et al. investigated server blacklisting and how
operators respond to Internet-wide scanning; at the time they
found that blacklisting behavior was negligible [12]. Rüth et
al. considered the ICMP responses received in response to
ZMap IPv4 SYN scans [61].
One contribution of our work is the introduction of LZR,
which reduces the time needed to scan less populous ports.
Prior work has similarly attempted to reduce the time required
to complete Internet-wide scans, though through starkly dif-
ferent approaches. Klick et al. [43] show that much of the
IP address space does not need to be continually scanned by
services like Censys [21]. Adrian et al. introduce a faster
version of ZMap that operates at 10gbE [7]. LZR solves
a different problem and can be used in coordination with
these other performance improvements. Similar to how we
use a single packet to identify services, several works have
focused on single-packet ﬁngerprinting to identify operator
systems [64, 65].
7 Recommendations and Conclusion
We began our analysis by investigating the troubling obser-
vation that a signiﬁcant fraction of hosts on the Internet that
respond to a SYN scan never complete an application-layer
handshake [21, 24, 26, 36, 51, 67]. We found that middleboxes
are responsible for the majority of responses with no real ser-
vices. We also showed that a signiﬁcant fraction of services
are also located on unexpected ports. For example, 97% of
HTTP and 93% of TLS services are not located on ports 80
and 443, respectively. Worryingly, unexpected services often
have weaker security postures than those on standard ports.
Building on these observations, we introduced LZR, a scan-
ner that dramatically reduces the time required to perform an
application-layer scan on ports with few expected services
(e.g., 5500% speedup on 27017/MongoDB) while simultane-
ously identifying many unexpected services running on the
port. LZR can identify 16 protocols and 88% of identiﬁable
services with one packet and 99% of identiﬁable unexpected
services with 5 handshakes. Nonetheless, there are two addi-
tional challenges to scanning unassigned ports: (1) scanning
100% of all 65,535 ports is not feasible, and (2) it is not clear
which subset of ports is worth scanning (e.g., contain a sig-
niﬁcant fraction of the particular behavior being studied). We
therefore recommend that researchers conduct lightweight
sub-sampled (e.g., 0.1%) application-layer scans across all
ports to detect the prevalence of targeted protocols. We em-
phasize that merely using the top n most popular ports is not
sufﬁcient to evaluate which ports are most likely to host par-
ticular services, as most protocols are drowned out by the
overwhelming popularity of HTTP and TLS. We hope that
researchers ﬁnd LZR helpful in accurately and efﬁciently
identifying services in Internet-wide scans.
Acknowledgements
The authors thank Tatyana Izhikevich, Katherine Izhikevich,
Kimberly Ruth, Deepak Kumar, David Adrian, Deepti Ragha-
van, Jeff Cody, members of the Stanford University and UC
San Diego security and networking groups, and the anony-
mous reviewers for providing insightful discussion and com-
ments on various versions of this work. We further thank
Sadjad Fouladi and Katherine Izhikevich for using their artis-
tic talent to greatly improve the visual graphics in this work.
This work was supported in part by the National Science
Foundation under award CNS-1823192, Cisco Systems, Inc.,
Google., Inc., the NSF Graduate Fellowship DGE-1656518
and a Stanford Graduate Fellowship.
References
[1] External HTTP(S) load balancing overview. https://cloud.google.
com/load-balancing/docs/https/#firewall_rules.
[2] Is there any way to block ports of a loadbalancer on GKE?
https://stackoverflow.com/questions/54757395/is-there-
any-way-to-block-ports-of-a-loadbalancer-on-gke.
[3] TCP RST from remote system error in F5.
https://
devcentral.f5.com/s/question/0D51T00006i7iWK/
tcp-rst-from-remote-system-error-in-f5.
[4] Vulnerability scan lists all IP’s and port as open.
https://
devcentral.f5.com/s/question/0D51T00006i7iKu/
vulnerability-scan-lists-all-ips-and-port-as-open.
USENIX Association
30th USENIX Security Symposium    3125
[5] ZGrab 2.0. https://github.com/zmap/zgrab2.
[6] D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green, J. A.
Halderman, N. Heninger, D. Springall, E. Thomé, L. Valenta, et al.
Imperfect forward secrecy: How Difﬁe-Hellman fails in practice. In
22nd ACM Conf. on Computer and Communications Security, 2015.
[7] D. Adrian, Z. Durumeric, G. Singh, and J. A. Halderman. Zippier
ZMap: Internet-wide scanning at 10 gbps. In USENIX Workshop on
Offensive Technologies, 2014.
[8] L. Alt, R. Beverly, and A. Dainotti. Uncovering network tarpits with
degreaser. In 30th Annual Computer Security Applications Conf., 2014.
[9] J. Amann, O. Gasser, Q. Scheitle, L. Brent, G. Carle, and R. Holz.
In ACM
Mission accomplished? HTTPS security after DigiNotar.
Internet Measurement Conference, 2017.
[10] M. Antonakakis, T. April, M. Bailey, M. Bernhard, E. Bursztein,
J. Cochran, Z. Durumeric, et al. Understanding the Mirai botnet. In
26th USENIX Security Symposium, 2017.
[11] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger, M. Dankel,
J. Steube, L. Valenta, D. Adrian, J. A. Halderman, V. Dukhovni, et al.
In 25th USENIX Security
DROWN: Breaking TLS using SSLv2.
Symposium, 2016.
[12] S. Bano, P. Richter, M. Javed, S. Sundaresan, Z. Durumeric, S. J. Mur-
doch, R. Mortier, and V. Paxson. Scanning the Internet for liveness.
ACM SIGCOMM Computer Communication Review, 2018.
[13] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K. Zinzindohoue. A
messy state of the union: Taming the composite state machines of TLS.
In IEEE Symposium on Security and Privacy, 2015.
[14] R. Bhagwan, T. Das, S. Eswaran, V. N. Padmanabhan, and G. M.
Voelker. Netprints: Diagnosing home network misconﬁgurations using
shared knowledge. 2009.
[15] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov. Using
frankencerts for automated adversarial testing of certiﬁcate validation
in SSL/TLS implementations. In 2014 IEEE Symposium on Security
and Privacy.
[16] S. Checkoway, J. Maskiewicz, C. Garman, J. Fried, S. Cohney,
M. Green, N. Heninger, R.-P. Weinmann, E. Rescorla, and H. Shacham.
A systematic analysis of the Juniper dual EC incident. In ACM Confer-
ence on Computer and Communications Security, 2016.
[17] S. Checkoway, R. Niederhagen, A. Everspaugh, M. Green, T. Lange,
T. Ristenpart, D. J. Bernstein, J. Maskiewicz, H. Shacham, and
M. Fredrikson. On the practical exploitability of dual EC in TLS
implementations. In 23rd USENIX Security Symposium, 2014.
[18] R. Clayton, S. J. Murdoch, and R. N. M. Watson. Ignoring the great
ﬁrewall of China. In Conf. on Privacy Enhancing Technologies, 2006.
[19] A. Costin, J. Zaddach, A. Francillon, and D. Balzarotti. A large-scale
In 23rd USENIX
analysis of the security of embedded ﬁrmwares.
Security Symposium, 2014.
[20] A. Cui and S. J. Stolfo. A quantitative analysis of the insecurity of
embedded network devices: results of a wide-area scan. In Proceedings
of the 26th Annual Computer Security Applications Conference, 2010.
[21] Z. Durumeric, D. Adrian, A. Mirian, M. Bailey, and J. A. Halderman. A
search engine backed by Internet-wide scanning. In ACM Conference
on Computer and Communications Security, 2015.
[22] Z. Durumeric, D. Adrian, A. Mirian, J. Kasten, E. Bursztein,
N. Lidzborski, K. Thomas, V. Eranti, M. Bailey, and J. A. Halder-
man. Neither snow nor rain nor MITM... an empirical analysis of email
delivery security. In ACM Internet Measurement Conference, 2015.
[23] Z. Durumeric, M. Bailey, and J. A. Halderman. An Internet-wide view
of Internet-wide scanning. In 23rd USENIX Security Symposium, 2014.
[24] Z. Durumeric, J. Kasten, M. Bailey, and J. A. Halderman. Analysis
of the HTTPS certiﬁcate ecosystem. In ACM Internet Measurement
Conference, 2013.
[25] Z. Durumeric, F. Li, J. Kasten, J. Amann, J. Beekman, M. Payer,
N. Weaver, D. Adrian, V. Paxson, M. Bailey, et al. The matter of
heartbleed. In ACM Internet Measurement Conference, 2014.
[26] Z. Durumeric, E. Wustrow, and J. A. Halderman. ZMap: Fast Internet-
wide scanning and its security applications. In 22nd USENIX Security
Symposium, 2013.
[27] X. Feng, Q. Li, H. Wang, and L. Sun. Acquisitional rule-based engine
for discovering Internet-of-Things devices. In 27th USENIX Security
Symposium, 2018.
[28] M. Frustaci, P. Pace, G. Aloi, and G. Fortino. Evaluating critical security
issues of the IoT world: Present and future challenges. IEEE Internet
of Things, 2018.
[29] R. D. Graham. Masscan: Mass IP port scanner, 2014. https://
github.com/robertdavidgraham/masscan.
[30] F. E. Grubbs et al. Sample criteria for testing outlying observations.
The Annals of Mathematical Statistics, 21(1):27–58, 1950.
[31] Hamzeh et al. RFC 2637: Point-to-point tunneling protocol, 1999.
[32] M. Hastings, J. Fried, and N. Heninger. Weak keys remain widespread
in network devices. In ACM Internet Measurement Conference, 2016.
[33] C. Headquarters. Cisco IOS login enhancements-login block.
[34] C. Headquarters. Security conﬁguration guide: Zone-based policy
ﬁrewall Cisco IOS release 15.0. 2012.
[35] J. Heidemann, Y. Pradkin, R. Govindan, C. Papadopoulos, G. Bartlett,
and J. Bannister. Census and survey of the visible Internet. In ACM
Internet Measurement Conference, 2008.
[36] N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman. Mining
your Ps and Qs: Detection of widespread weak keys in network devices.
In 21st USENIX Security Symposium, 2012.
[37] R. Holz, J. Amann, O. Mehani, M. Wachs, and M. A. Kaafar. TLS in the
wild: An Internet-wide analysis of TLS-based protocols for electronic
communication. arXiv preprint arXiv:1511.00341, 2015.
[38] R. Holz, L. Braun, N. Kammenhuber, and G. Carle. The SSL land-
scape: a thorough analysis of the X.509 PKI using active and passive
measurements. In ACM Internet Measurement Conference, 2011.
[39] IANA. Protocol numbers. https://www.iana.org/assignments/
protocol-numbers/protocol-numbers.xhtml.
[40] F. J. M. Jr. The kolmogorov-smirnov test for goodness of ﬁt. Journal
of the American Statistical Association, 46(253), 1951.
[41] Juniper Networks.
TCP proxy behavior for three-way hand-
https://kb.juniper.net/InfoCenter/index?page=
shake.
content&id=KB21780&actp=METADATA.
[42] S. Khattak, D. Fiﬁeld, S. Afroz, M. Javed, S. Sundaresan, V. Paxson,
S. J. Murdoch, and D. McCoy. Do you see what I see? Differential
treatment of anonymous users. In Network and Distributed System
Security Symposium, 2016.
[43] J. Klick, S. Lau, M. Wählisch, and V. Roth. Towards better Internet
citizenship: Reducing the footprint of Internet-wide scans by topology
aware preﬁx selection. In ACM Internet Measurement Conf., 2016.
[44] A. Kumar and T. J. Lim. Early detection of Mirai-like IoT bots in
large-scale networks through sub-sampled packet trafﬁc analysis. In
Future of Information and Communication Conference, 2019.
[45] D. Kumar, K. Shen, B. Case, D. Garg, G. Alperovich, D. Kuznetsov,
R. Gupta, and Z. Durumeric. All things considered: An analysis of IoT
devices on home networks. In USENIX Security Symposium, 2019.
[46] R. Lawshae.
Hunting botnets with ZMap.
http://
h30499.www3.hp.com/t5/HP-Security-Research-Blog/
Hunting-Botnets-with-ZMap/ba-p/6320865#.UvzzgkJdXw1.
3126    30th USENIX Security Symposium
USENIX Association
[47] F. Li, Z. Durumeric, J. Czyz, M. Karami, M. Bailey, D. McCoy, S. Sav-
age, and V. Paxson. You’ve got vulnerability: Exploring effective
vulnerability notiﬁcations. In 25th USENIX Security Symposium, 2016.
[48] J. Lin, W. Yu, N. Zhang, X. Yang, H. Zhang, and W. Zhao. A survey
on Internet of things: Architecture, enabling technologies, security and
privacy, and applications. IEEE Internet of Things, 2017.
[49] Linux School Online. SSH reverse port forwarding or how ﬁre-
walls can be bypassed. https://www.linuxschoolonline.com/
ssh-reverse-port-forwarding-or-how-firewalls-can-be-
bypassed/.
[50] W. R. Marczak, J. Scott-Railton, M. Marquis-Boire, and V. Paxson.
When governments hack opponents: A look at actors and technology.
In 23rd USENIX Security Symposium, 2014.
[51] A. Mirian, Z. Ma, D. Adrian, M. Tischer, T. Chuenchujit, T. Yard-
ley, R. Berthier, J. Mason, Z. Durumeric, J. A. Halderman, et al. An
Internet-wide view of ICS devices. In 14th IEEE Conference on Pri-
vacy, Security and Trust, 2016.
[52] P. Pearce, R. Ensaﬁ, F. Li, N. Feamster, and V. Paxson. Augur: Internet-
wide detection of connectivity disruptions. In IEEE Symposium on
Security and Privacy, 2017.
[53] P. Pearce, B. Jones, F. Li, R. Ensaﬁ, N. Feamster, N. Weaver, and V. Pax-
son. Global measurement of DNS manipulation. In 26th USENIX
Security Symposium, 2017.
[54] J. Postel et al. RFC 793: Transmission control protocol, 1981.
[55] M. S. Pour, A. Mangino, K. Friday, M. Rathbun, E. Bou-Harb, F. Iqbal,
S. Samtani, J. Crichigno, and N. Ghani. On data-driven curation,
learning, and analysis for inferring evolving Internet-of-Things (IoT)
botnets in the wild. Computers & Security, 2020.
[56] Qurium Media Foundation. What is hosted at the suniway net-
https://www.qurium.org/alerts/philippines/what-
work?
is-hosted-at-suniway-network/.
[57] E. Rescorla. RFC 8446: The transport layer security (tls) protocol
version 1.3. Internet Engineering Task Force (IETF), 2018.
[58] M. Robertson. ASA threat detection functionality and conﬁgura-
tion. 2015. https://www.cisco.com/c/en/us/support/docs/
security/asa-5500-x-series-next-generation-firewalls/
113685-asa-threat-detection.html.
[59] M. Roesch and C. Green. Snort users manual snort release: 1.9. 0, 2002.
http://www.snort.org/docs/writing_rules.
[60] C. Rossow. Ampliﬁcation hell: Revisiting network protocols for DDoS
abuse. In NDSS, 2014.
[61] J. Rüth, T. Zimmermann, and O. Hohlfeld. Hidden treasures–recycling
large-scale Internet measurements to study the internet’s control plane.
In Conference on Passive and Active Network Measurement, 2019.
[62] N. Samarasinghe and M. Mannan. Another look at TLS ecosystems in
networked devices vs. web servers. Computers & Security, 80, 2019.
[63] P. Schwartz. Denyhosts. https://github.com/denyhosts.
[64] Z. Shamsi, D. B. Cline, and D. Loguinov. Faulds: A non-parametric
iterative classiﬁer for Internet-wide OS ﬁngerprinting. In ACM SIGSAC
Conference on Computer and Communications Security, 2017.
[65] Z. Shamsi, A. Nandwani, D. Leonard, and D. Loguinov. Hershel:
single-packet OS ﬁngerprinting. ACM SIGMETRICS, 2014.
[66] N. G. Shetty, C. K. Ojha, R. Katsuri, V. S. Rajaram, G. Krishna, and
V. B. Ramachandra. TCP proxying of network sessions mid-ﬂow, U.S.
Patent 9 438 699 B1, Sept. 2016.
[67] D. Springall, Z. Durumeric, and J. A. Halderman. FTP: The forgotten
cloud. In 46th Conf. on Dependable Systems and Networks, 2016.
[68] The Tcpdump Group. Man page of PCAP. https://www.tcpdump.
org/manpages/pcap.3pcap.html/.
[69] G. Wan, L. Izhikevich, D. Adrian, K. Yoshioka, R. Holz, C. Rossow,
and Z. Durumeric. On the origin of scanning: The impact of location
on Internet-wide scans. In ACM Internet Measurement Conference,
2020.
[70] Y. Yang, L. Wu, G. Yin, L. Li, and H. Zhao. A survey on security and
privacy issues in Internet-of-Things. IEEE Internet of Things, 2017.
[71] T. Yu, V. Sekar, S. Seshan, Y. Agarwal, and C. Xu. Handling a trillion
(unﬁxable) ﬂaws on a billion devices: Rethinking network security for
the Internet-of-Things. In 14th ACM HOTNETS Workshop, 2015.
[72] J. Zhang, Z. Durumeric, M. Bailey, M. Liu, and M. Karir. On the
mismanagement and maliciousness of networks. In NDSS, 2014.
USENIX Association
30th USENIX Security Symposium    3127
P
T
M
S
t
e
n
l
e
T
P
T
P
P
S
L
T
s
e
r
g
t
s
o
P
T
T
Q
M
P
Q
M
A
t
t
q
m
B
D
e
l
c
a
r
O
s
i
d
e
r
C
N
V
3
P
N
D
l
q
s
s
m
B
M
S