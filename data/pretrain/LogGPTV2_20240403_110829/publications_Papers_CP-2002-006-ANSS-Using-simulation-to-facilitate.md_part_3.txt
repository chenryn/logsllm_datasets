### 3.2 Labeling and Edge Handling in METEOR and JSIM

In the context of JSIM (Java Simulation), edges should not be labeled because all outgoing edges will correspond to a single edge in the digraph. Conversely, in METEOR, selected edges are labeled with the data type of the objects flowing along the edge. For XOR nodes, the first Boolean expression that evaluates to true determines which edge is selected. In the case of AND nodes, edges are also labeled with Boolean expressions, where the first one that evaluates to true will be the selected edge.

### 3.3 Simulation of Workflows using JSIM

To simulate METEOR workflows, the current version of JSIM requires custom handling through the JSIM Web-Based Simulation System (Nair et al., 1996; Miller et al., 1997, 2000). In JSIM, simulation entities flow through a directed graph (digraph) consisting of the following types of nodes:

- **Source**: Produces entities at random times.
- **Server**: Provides service to entities.
- **Failure**: Inherits from Server and adds a waiting queue.
- **Signal**: Alters the number of service units in a server.
- **Sink**: Consumes entities and records statistics.

These nodes are connected by **Transports**, which move entities from one node to the next, providing smooth motion when the simulation model is animated. The edges are labeled with branching probabilities.

### 3.4 Change Evaluation

After a task finishes executing, its time, cost, and quality metrics are computed. These values are sent to the monitor (and saved in the monitor's log). Each of these three metrics is compared to dual threshold values. If the value is below the bottom threshold, an appropriate exception is thrown. If it is above the bottom threshold but below the top threshold, a warning is sent to the monitor. If the value is above the top threshold, the execution is considered satisfactory.

If an exception is thrown, it is handled by METEOR's exception handling facility. Several options exist for handling exceptions, such as retrying the task, using an alternative task, or adapting the workflow. As warnings accumulate, a pattern may emerge that indicates an adaptive change would be helpful. Such a pattern can be detected by a human observer or by a data mining agent examining the monitor's log. The detection process involves identifying and classifying patterns of substandard quality. Possible corrective actions are determined by matching the top template matches. Details of pattern detection and template matching are provided in (Cardoso, 2002).

Simulation is useful for setting thresholds and creating templates that suggest corrective actions (i.e., workflow adaptations). Simulation allows "what-if" questions to be considered safely (e.g., what happens if this change is made to the workflow?).

### 4. System Integration

The integration of METEOR with JSIM is depicted as follows:

- A METEOR **START** or **STOP** task is mapped to a JSIM **Source** or **Sink** node, respectively.
- A METEOR **human task** is mapped to a JSIM **Failure** node, with the number of service units equal to the number of human participants carrying out the task and feeding off the same work list.
- A METEOR **transactional/non-transactional task** is mapped to a JSIM **Failure** node, with the number of service units equal to the number of participants.

This integration ensures that METEOR workflows can be effectively simulated and analyzed using the JSIM framework.