 **I'm submitting a ...** (check one with "x")
    [x] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
I'm testing a service that we're connecting with HTTP. I wanted to make sure
that not-ok responses (non 200 status), are dealt with correctly.  
So I've setup a test with a MockBackend. In this tests, I've setup the
response to respond with an error Response:
    const response = new Response(new ResponseOptions({
      url: 'url',
      status: 500,
      body: {
       error: 'Shit hit the fan'
      }
    }));
    backend.connections.subscribe((connection: MockConnection) => {
      connection.mockRespond(response);
    });
Unfortunately, the MockBackend seems to behave different from the actual Http
implementation. The actual Http implementation will throw an error when
receiving an non-200 response while the MockBackend simply passes the Response
along.  
This is demonstrated by:
    http.get('url').subscribe((response) => {
      console.log('incorrectly passed the response in a subscribe');
    }, (error) => {
      console.log('correctly subscribed to', error);
    });
This always logs "incorrectly passed the response in a then".
I could change the configuration of the backend to respond with an error
`connection.mockError(response);` but this function expects an `Error` rather
than a `Response`
**Expected behaviour**  
I would expect the response to be passed to the error callback.
Note that I'm using angular 4.1.0 with typescript 2.2.0.