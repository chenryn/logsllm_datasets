∀dj∈Di
Pmal(di)
(5)
where K, a normalization constant which is solely employed
to allow the probabilities to sum to 1, could be deﬁned as
K =
|D|!
n!(|D| − n)!
× 1
|D|n .
(6)
Please note that K is a typical normalization constant
that is often employed in Bayesian probability [74]. Further,
n represents all the sources in the data set, while |D|, as
previously mentioned, represents the darknet IP space.
The likelihood that a source will target a certain number
of darknet destinations (i.e., the second term of equation (3))
depends on whether the source is malicious or misconﬁgured.
Characteristically, misconﬁgured sources access one or few
destinations while malicious sources access a larger pool of
destinations. We have modeled such distributions as
Pmisc(|Di|) =
1
(e − 1)|Di|!
Pmal(|Di|) =
1
|D|
(7)
(8)
where the term (e − 1) in equation (7) guarantees that
the distribution will sum to 1. It is noteworthy to mention
that equation (7) ensures that the probability will signiﬁcantly
decrease as the number of targeted destinations increases. In
contrast, equation (8) captures a malicious darknet source
accessing a random number of darknet addresses.
By combining the above equations, we can model
the
probability of a source being misconﬁgured or malicious, given
a set of darknet destination addresses, as
(cid:89)
∀dj∈Di
(cid:89)
∀dj∈Di
Pmisc(Di) =
1
K(e − 1)|Di|!
Pmisc(di)
(9)
Pmal(Di) =
1
K|D|
Pmal(di).
(10)
It is imperative to note that equations (9) and (10) provide
two distinct likelihood models to distinguish between miscon-
ﬁguration and other malicious darknet trafﬁc. This permits
the simpliﬁed and systematic post-processing of the latter two
types of darknet trafﬁc. Moreover, as the model generalizes
and formalizes the concepts of misconﬁguration and other
malicious darknet trafﬁc, the proposed model does not make
any assumptions related to the nature of the sources of those
types of trafﬁc. For example, the model is agnostic to whether
the malicious (or unsolicited) trafﬁc is generated by a worm
or a probing tool, or whether the misconﬁguration is caused
by a malfunctioning Internet router or an invalid connection
request.
6
Algorithm 1 Inferring misconﬁguration ﬂows using the prob-
abilistic model
1: Input: Darknet Flows, DarkFlows
2: Output: Flag, MiscFlag, indicating that the DarkFlow is originating from
a misconﬁgured source
3:
4: for DarkF lows do
5:
6:
7:
8:
9:
10:
11:
12:
13: end for
MiscFlag ← 1
end if
MiscFlag ← 0
i ← DarkFlows.getUniqueSources()
Amalgamate DarkF lowsi originating from a speciﬁc source si
Update si(Di)
Compute Pmisc(Di), Pmal(Di)
if Pmisc(Di) > Pmal(Di) then
To effectively employ the proposed darknet preprocessing
model, we present Algorithm 1, which provides a simplistic
yet effective mechanism to infer misconﬁgured sources by
employing the model. It is worthy to note that step 9 of the
algorithm (i.e., the computation of Pmisc(Di) and Pmal(Di))
is easily accomplished in practice by computing the negative
log-likelihoods,
Lmisc(Di) = −lnPmisc(Di)
Lmal(Di) = −lnPmal(Di).
(11)
Thus, Algorithm 1 deems a source and its corresponding
ﬂows as misconﬁguration trafﬁc if Lmal(Di) − Lmisc(Di) >
0.
B. CPS Probing Inference & Characterization
To infer CPS probing activities after preprocessing darknet
data by exploiting the previously proposed model, we present
Algorithm 2, which exploits both packet header information
and ﬂow-based parameters.
Algorithm 2 operates on darknet ﬂows, which are deﬁned
by a series of consecutive packets sharing the same source
IP address. First, each ﬂow is scrutinized to verify if its
corresponding packets contain any service ports that can
effectively pinpoint to CPS darknet activities. The algorithm
monitors trafﬁc to a comprehensive list of most prominent and
widely-deployed CPS communication and control protocols as
summarized in Table III2. Such table includes, both, private
(i.e., Siemens, GENe, etc.) and well-known CPS services (i.e.,
Modbus, ICCP, etc.).
If no CPS ports were found, the algorithm deems that
speciﬁc ﬂow as not related to CPS activities. On the contrary,
if a service port was found, Algorithm 2 deems that ﬂow as
suspicious, and consequently moves forward in an attempt
to assert that suspicion. Subsequently, the algorithm counts
the number of packets per ﬂow to measure the rate of the
suspicious activities within a certain time window (Tw). If the
ﬂow packet count (pkt cnt) is beyond a speciﬁc threshold, the
ﬂow is deemed as a CPS probe. To this end, we borrow the
packet count threshold from [75], deﬁned by 64 probed darknet
addresses on the same port on any given day. Please note,
2Obtained through discussions with state and federal CPS operators in the
power, water, aviation and critical manufacturing sectors.
Algorithm 2 CPS Scanning Inference Algorithm
1: Input: A set (F) of unique darknet ﬂows (f ),
2: Each ﬂow f contains packet count (pkt cnt) and rate (rate)
SP: CPS Service Port
Tw: Time window
Pth: Packet threshold
Rth: Rate threshold,
Tn: Time of packet number n in a ﬂow
pkt: Packet
Output: CPS ﬂag, CPS ﬂag
if pkt.contains() ! = SP then
CPS ﬂag() ← 0
end if
if pkt.contains() = SP then
CPS ﬂag() ← 1
while pkt in f do
end if
end while
pkt cnt ← 0
T1 ← pkt gettime()
Tf ← T1 + Tw
while pkt in f do
3:
4: for Each f in F do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27: end for
CPS ﬂag() ← 0
end if
Tn= pkt gettime()
if Tn < Tf then
pkt cnt ← pkt cnt + 1
end if
end while
rate ← pkt cnt
if pkt cnt < Pth || rate < Rth then
T w
CPS Communication
& Control Protocols
ABB Ranger 2003
BACnet/IP
DNP/DNP3
Emerson/Fisher ROC Plus
EtherCAT
EtherNet/IP
FL-net Reception/Transmission
Foundation Fieldbus HSE
Foxboor/Invensys Foxboro DCS
Iconic Genesis32 GenBroker
ICCP
IEC-104
Johnson Controls Metasys N1
Modbus
MQ Telemetry Transport
Niagara Fox
OPC UA Discovery Server
OSIsoft PI Server
PROFINET
Project/SCADA Node Primary Port
Red Lion
ROC Plus
SCADA Node Ports
Siemens Spectrum Power TG
SNC GENe
Telvent OASyS DNA
Port Number
Type
10307/10311/10364, etc.
47808
19999/20000
4000
34980
2222/44818
55000-55003
1089/1090/1091
55550
18000
102
2404
11001
502
1883
1911/4911
3480
5450
34962/24963/34964
4592
789
4000
4592/14592
50001/50018/50020, etc.
62900/62911/62924, etc.
5050/5052/5065, etc.
Registered
Registered
Registered
Registered
Registered
Registered
Dynamic/Private
Registered
Dynamic/Private
Registered
Well-known
Registered
Registered
Well-known
Registered
Registered
Registered
Registered
Registered
Registered
Well-known
Registered
Registered
Dynamic/Private
Dynamic/Private
Registered
TABLE III: List of CPS protocols and corresponding ports
that typically, the probing engine would have also required
and established a rate threshold (Rth). Nevertheless, we do not
enforce one here, to enable the algorithm to infer very low rate,
possible stealthy activities. Indeed, coupled with the analysis
of the packet features, the approach embedded in Algorithm
2 would ﬁngerprint Internet-scale CPS probing traces. From a
7
performance perspective, when implemented “on the ﬂy” on
the darknet data stream, the algorithm can successfully process
and reason about a signiﬁcant 10,000 ﬂows in 55 seconds, on
average.
After inferring CPS probing activities, we characterize and
proﬁle their inferred ﬂows to investigate their signiﬁcance and
prevalence, recent trends and orchestration behavior. We gen-
erate amalgamated statistics related to the categories of probes,
the distribution of different types of scans within each category,
the distribution of transport protocols used in the scans and the
time series of various types of probes. Furthermore, we attempt
to understand the behavior of these probes by studying and
analyzing the similarity and co-occurrence patterns of their
sources. To this end, we execute the following procedure. In
order to investigate whether the same CPS scanning sources
are prevalent on different time periods, we formalize the probes
as a set of unordered collection of IP addresses that represent
scanners observed on a daily basis. Subsequently, we deﬁne
the sets, Ai, (where i = 1, 2..., n), where each set is indexed
by the day number. We compute the similarity between two
sets, Ai and Aj, represented by S(Ai, Aj). The similarity has
the following properties: (1) It is in the range [0, 1]; (2) the
higher the value is, the more source probing IP addresses are
shared among the sets, and thus the largest is the similarity,
and vice versa; (3) it is equal to 1, if the sets are the same;
and (4) it is equal to 0, if the sets do not share IP addresses or
one (or both) of the sets is empty. To compute such similarity,
we leverage the Jaccard index, a statistical technique used in
comparing similarities and diversities among sample sets [76].
This index is deﬁned by:
S(Ai, Aj) =
(cid:84) Aj| denotes the cardinality of the intersection
(cid:83) Aj| denotes the cardinality of the
(12)
where |Ai
between the sets and |Ai
union between the sets.
(cid:84) Aj|
(cid:83) Aj|
|Ai