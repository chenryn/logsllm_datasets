## PostgreSQL 并行计算解说 之24 - parallel CTE (Common Table Express)    
### 作者                                                                                          
digoal                                                                                          
### 日期                                                                                          
2019-03-17                                                                                          
### 标签                                                                                          
PostgreSQL , cpu 并行 , smp 并行 , 并行计算 , gpu 并行 , 并行过程支持                                                 
----                                                                                    
## 背景                                                    
PostgreSQL 11 优化器已经支持了非常多场合的并行。简单估计，已支持27余种场景的并行计算。                                                
```                                                
parallel seq scan                                                
parallel index scan                                                
parallel index only scan                                                
parallel bitmap scan                                                
parallel filter                                                
parallel hash agg                                            
parallel group agg                                            
parallel cte                                                
parallel subquery                                                
parallel create table                                                
parallel create index                                                
parallel select into                                                
parallel CREATE MATERIALIZED VIEW                                                
parallel 排序 : gather merge                                                 
parallel nestloop join                                                
parallel hash join                                                
parallel merge join                                                
parallel 自定义并行聚合                                                
parallel 自定义并行UDF                                                
parallel append               
parallel append merge           
parallel union all        
parallel fdw table scan                                                
parallel partition join                                                
parallel partition agg                                                
parallel gather                                        
parallel gather merge                                
parallel rc 并行                                                
parallel rr 并行                                                
parallel GPU 并行                                                
parallel unlogged table              
lead parallel          
```                                                
接下来进行一一介绍。                                                
关键知识请先自行了解：                                                
1、优化器自动并行度算法 CBO                                                 
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                                  
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                                  
## parallel cte                  
CTE是PG支持的复杂SQL模型。优化器已支持CTE的并行执行   
数据量：10亿                
场景 | 数据量 | 关闭并行 | 开启并行 | 并行度 | 开启并行性能提升倍数                                              
---|---|---|---|---|---                                                          
parallel CTE | 10亿 | 65.65 秒 | 3.33 秒 | 24 | 19.7 倍                
```          
postgres=# show max_worker_processes ;          
 max_worker_processes           
----------------------          
 128          
(1 row)          
postgres=# set min_parallel_table_scan_size =0;          
postgres=# set min_parallel_index_scan_size =0;          
postgres=# set parallel_tuple_cost =0;          
postgres=# set parallel_setup_cost =0;          
postgres=# set max_parallel_workers=128;          
postgres=# set max_parallel_workers_per_gather =24;          
postgres=# set enable_parallel_hash =on;          
postgres=# set enable_parallel_append =off;          
postgres=# set enable_partitionwise_aggregate =off;          
postgres=# set work_mem ='128MB';          
```          
### 1、关闭并行，耗时： 65.65 秒。                                              
```             
postgres=# set max_parallel_workers_per_gather =0;          
explain 	  
with   
a0 as (select count(*) from ccc0) ,   
a1 as (select count(*) from ccc1) ,  
a2 as (select count(*) from ccc2) ,  
a3 as (select count(*) from ccc3) ,  
a4 as (select count(*) from ccc4) ,  
a5 as (select count(*) from ccc5) ,  
a6 as (select count(*) from ccc6) ,  
a7 as (select count(*) from ccc7) ,  
a8 as (select count(*) from ccc8) ,  
a9 as (select count(*) from ccc9) ,  
a10 as (select count(*) from ccc10) ,   
a11 as (select count(*) from ccc11) ,  
a12 as (select count(*) from ccc12) ,  
a13 as (select count(*) from ccc13) ,  
a14 as (select count(*) from ccc14) ,  
a15 as (select count(*) from ccc15) ,  
a16 as (select count(*) from ccc16) ,  
a17 as (select count(*) from ccc17) ,  
a18 as (select count(*) from ccc18) ,  
a19 as (select count(*) from ccc19) ,  
a20 as (select count(*) from ccc20) ,   
a21 as (select count(*) from ccc21) ,  
a22 as (select count(*) from ccc22) ,  
a23 as (select count(*) from ccc23)   
select * from a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23;  
                                                                                      QUERY PLAN                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Nested Loop  (cost=17159423.46..17159424.14 rows=1 width=184)  
   CTE a1  
     ->  Aggregate  (cost=727405.10..727405.11 rows=1 width=8)  
           ->  Seq Scan on ccc1  (cost=0.00..625842.88 rows=40624888 width=0)  
   CTE a2  
     ->  Aggregate  (cost=839291.45..839291.46 rows=1 width=8)  
           ->  Seq Scan on ccc2  (cost=0.00..722107.36 rows=46873636 width=0)  
   CTE a3  
     ->  Aggregate  (cost=634111.15..634111.16 rows=1 width=8)  
           ->  Seq Scan on ccc3  (cost=0.00..545575.32 rows=35414332 width=0)  
   CTE a4  
     ->  Aggregate  (cost=764438.90..764438.91 rows=1 width=8)  
           ->  Seq Scan on ccc4  (cost=0.00..657705.92 rows=42693192 width=0)  
   CTE a5  
     ->  Aggregate  (cost=708800.20..708800.21 rows=1 width=8)  
           ->  Seq Scan on ccc5  (cost=0.00..609836.16 rows=39585616 width=0)  
   CTE a6  
     ->  Aggregate  (cost=727511.15..727511.16 rows=1 width=8)  
           ->  Seq Scan on ccc6  (cost=0.00..625934.32 rows=40630732 width=0)  
   CTE a7  
     ->  Aggregate  (cost=783234.00..783234.01 rows=1 width=8)  
           ->  Seq Scan on ccc7  (cost=0.00..673876.80 rows=43742880 width=0)  
   CTE a8  
     ->  Aggregate  (cost=699378.05..699378.06 rows=1 width=8)  
           ->  Seq Scan on ccc8  (cost=0.00..601729.04 rows=39059604 width=0)  
   CTE a9  
     ->  Aggregate  (cost=708898.20..708898.21 rows=1 width=8)  
           ->  Seq Scan on ccc9  (cost=0.00..609919.96 rows=39591296 width=0)  
   CTE a10  
     ->  Aggregate  (cost=783522.20..783522.21 rows=1 width=8)  
           ->  Seq Scan on ccc10  (cost=0.00..674124.76 rows=43758976 width=0)  
   CTE a11  
     ->  Aggregate  (cost=615479.05..615479.06 rows=1 width=8)  
           ->  Seq Scan on ccc11  (cost=0.00..529544.24 rows=34373924 width=0)  
   CTE a12  
     ->  Aggregate  (cost=951260.55..951260.56 rows=1 width=8)  
           ->  Seq Scan on ccc12  (cost=0.00..818443.04 rows=53127004 width=0)  
   CTE a13  
     ->  Aggregate  (cost=783499.00..783499.01 rows=1 width=8)  
           ->  Seq Scan on ccc13  (cost=0.00..674104.80 rows=43757680 width=0)  
   CTE a14  
     ->  Aggregate  (cost=913779.60..913779.61 rows=1 width=8)  
           ->  Seq Scan on ccc14  (cost=0.00..786195.28 rows=51033728 width=0)  
   CTE a15  
     ->  Aggregate  (cost=708653.05..708653.06 rows=1 width=8)  
           ->  Seq Scan on ccc15  (cost=0.00..609709.04 rows=39577604 width=0)  
   CTE a16  
     ->  Aggregate  (cost=736590.70..736590.71 rows=1 width=8)  
           ->  Seq Scan on ccc16  (cost=0.00..633745.96 rows=41137896 width=0)  
   CTE a17  
     ->  Aggregate  (cost=783320.20..783320.21 rows=1 width=8)  
           ->  Seq Scan on ccc17  (cost=0.00..673951.76 rows=43747376 width=0)  
   CTE a18  
     ->  Aggregate  (cost=932607.90..932607.91 rows=1 width=8)  
           ->  Seq Scan on ccc18  (cost=0.00..802394.72 rows=52085272 width=0)  
   CTE a19  
     ->  Aggregate  (cost=615568.50..615568.51 rows=1 width=8)  
           ->  Seq Scan on ccc19  (cost=0.00..529621.20 rows=34378920 width=0)  
   CTE a20  
     ->  Aggregate  (cost=746233.40..746233.41 rows=1 width=8)  
           ->  Seq Scan on ccc20  (cost=0.00..642042.32 rows=41676432 width=0)  
   CTE a21  
     ->  Aggregate  (cost=466366.88..466366.89 rows=1 width=8)  
           ->  Seq Scan on ccc21  (cost=0.00..401251.50 rows=26046150 width=0)  
   CTE a22  
     ->  Aggregate  (cost=783250.55..783250.56 rows=1 width=8)  
           ->  Seq Scan on ccc22  (cost=0.00..673891.04 rows=43743804 width=0)  
   CTE a23  
     ->  Aggregate  (cost=746223.45..746223.46 rows=1 width=8)  
           ->  Seq Scan on ccc23  (cost=0.00..642033.76 rows=41675876 width=0)  
   ->  Nested Loop  (cost=0.00..0.65 rows=1 width=176)  
         ->  Nested Loop  (cost=0.00..0.62 rows=1 width=168)  
               ->  Nested Loop  (cost=0.00..0.59 rows=1 width=160)  
                     ->  Nested Loop  (cost=0.00..0.56 rows=1 width=152)  
                           ->  Nested Loop  (cost=0.00..0.53 rows=1 width=144)  
                                 ->  Nested Loop  (cost=0.00..0.50 rows=1 width=136)  
                                       ->  Nested Loop  (cost=0.00..0.47 rows=1 width=128)  
                                             ->  Nested Loop  (cost=0.00..0.44 rows=1 width=120)  
                                                   ->  Nested Loop  (cost=0.00..0.41 rows=1 width=112)  
                                                         ->  Nested Loop  (cost=0.00..0.38 rows=1 width=104)  
                                                               ->  Nested Loop  (cost=0.00..0.35 rows=1 width=96)  
                                                                     ->  Nested Loop  (cost=0.00..0.32 rows=1 width=88)  
                                                                           ->  Nested Loop  (cost=0.00..0.29 rows=1 width=80)  
                                                                                 ->  Nested Loop  (cost=0.00..0.26 rows=1 width=72)  
                                                                                       ->  Nested Loop  (cost=0.00..0.23 rows=1 width=64)  
                                                                                             ->  Nested Loop  (cost=0.00..0.20 rows=1 width=56)  
                                                                                                   ->  Nested Loop  (cost=0.00..0.17 rows=1 width=48)  
                                                                                                         ->  Nested Loop  (cost=0.00..0.14 rows=1 width=40)  
                                                                                                               ->  Nested Loop  (cost=0.00..0.11 rows=1 width=32)  
                                                                                                                     ->  Nested Loop  (cost=0.00..0.08 rows=1 width=24)  
                                                                                                                           ->  Nested Loop  (cost=0.00..0.05 rows=1 width=16)  
                                                                                                                                 ->  CTE Scan on a9  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                                                 ->  CTE Scan on a13  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                                           ->  CTE Scan on a3  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                                     ->  CTE Scan on a23  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                               ->  CTE Scan on a18  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                         ->  CTE Scan on a14  (cost=0.00..0.02 rows=1 width=8)  