esti ← vi; ri ← 0;
Task T 1:
(1)
(2) while true do
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12)
(13)
(14)
(15)
% Sequence of rounds %
ri ← ri + 1;
=============================================================
% PHASE 1 of round ri: Select phase (Determine a “new” estimate value) %
——————————————————————————————————-
esti ← comp est(ri); % some value according to (RO + LO + COND)+ %
=============================================================
% PHASE 2 of round ri: Commit phase (Decision and value locking) %
——————————————————————————————————-
% Step 1: Filtering (from several to 1 estimate plus possibly ⊥) %
∀j : send PHASE2 STEP1(ri, esti) to pj;
wait until (PHASE2 STEP1(ri, est) received from ≥ (n − f ) processes);
if (the same value v has been received from a majority of processes)
then esti ← v else esti ← ⊥ endif;
% Let EST (ri) = {estk}1≤k≤n at the beginning of phase 2 of ri %
% (esti = v (cid:9)= ⊥) ⇒ v is majority value in EST (ri) %
% Hence, ((esti (cid:9)= ⊥) ∧ (estj (cid:9)= ⊥)) ⇒ (esti = estj = v) %
% Step 2: Decision and locking %
——————————————————————————————————-
∀j : send PHASE2 STEP2(ri, esti) to pj;
wait until (PHASE2 STEP2(ri, est) messages received from ≥ (n − f ) processes);
let reci = { est | PHASE2 STEP2(ri, est) has been received };
case (reci = {v})
then R Broadcast DECIDE(v); return(v)
(reci = {v, ⊥})then esti ← v
then esti ← ⊥
(reci = {⊥})
endcase;
=============================================================
(16) enddo
Task T 2: upon R Delivery of DECIDE(v): return(v) % terminates the consensus %
Figure 1. Framework of a General Consensus Protocol (f < n/2)
• Eventual convergence. If, in presence of at most f
process crashes, comp est() is repeatedly invoked by
the processes, there is a round r such that comp est(r)
provides the same (non-⊥) value to all processes.
Any module (or any combination of modules) whose se-
quences of invocations satisfy these properties correctly im-
plements the comp est() function and can be used by the
protocol described in Figure 1 (see Section 5).
It is relatively easy to see that the LO module satisﬁes
these four properties. The RO and COND modules satisfy
the ﬁrst three properties. As far as the last property is con-
cerned, RO satisﬁes it only with probability 1, while COND
satisﬁes it only if the input vector belongs to the condition.
It is also easy to see that the combined use of RO or COND
with the LO module does not alter the properties provided
by LO.
4.5 The Reliable Broadcast Subroutine
The protocol uses a Reliable Broadcast primitive as a
subroutine (line 12 and task T 2). This primitive allows
a message to be reliably sent to the processes.
“Reli-
has R-broadcast m. (No spurious messages.)
ably” means here that if the message is delivered by a pro-
cess, then it is delivered by all correct processes. For-
mally, Reliable Broadcast is deﬁned by two primitives [5]:
R Broadcastand R Delivery, the semantics of which is ex-
pressed by three properties, namely, Validity, Integrity and
Termination6:
• Validity: If a process R-delivers m, then some process
• Integrity: A process R-delivers a message m at most
• Termination: If (1) a correct process R-broadcasts m,
or if (2) a process R-delivers m, then all correct pro-
cesses R-deliver m.
This property states that any message R-broadcast by
a correct process or R-delivered by a process cannot
be missed by a correct process. This property deﬁnes
the situations in which the reliable broadcast must ter-
minate (i.e., when a message m must eventually be R-
delivered).
once. (No duplication.)
6When a process p executes R Broadcast(m) (resp. R Delivery(m))
we say that it R-broadcasts m (resp. R-delivers m). We assume that all the
messages are different.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:08:23 UTC from IEEE Xplore.  Restrictions apply. 
LO
if (esti = ⊥) then esti ← vi endif;
(201)
(202) ∀j : send PHASE1 LO(ri, esti) to pj;
(203) wait until (∃ (cid:21):
(204)
esti ← v(cid:5)
leader=(cid:21) ∧ PHASE1 LO(ri, v(cid:5)) received from p(cid:5));
Figure 3. Leader Oracle-Based Module
if (esti = ⊥) then esti ← vi endif;
COND
(301)
(302) ∀j : send PHASE1 COND(ri, esti) to pj;
(303) wait until (PHASE1 COND(ri, est) messages received from ≥ (n − f ) processes);
(304) ∀j : if (PHASE1 COND(ri, v) received from pj) then Vi[j] ← v
(305)
(306)
if P (Vi) then esti ← S(Vi) else esti ← vi endif
else Vi[j] ← ⊥ endif;
Figure 4. Condition-Based Module
The reliable broadcast (line 12) has the following mo-
tivation. As a deciding process stops participating in the
sequence of rounds, and all processes do not necessarily
decide during the same round, it is possible that processes
that proceed to the round r + 1 wait forever messages from
the the processes that have terminated at r. By disseminat-
ing the decided value, the reliable broadcast prevents such
deadlock occurrences. (Reliable broadcast protocols are de-
scribed in [8, 20].)
4.6 Enriching RO for Multivalued Consensus
In contrast to the LO and COND modules which do not
put restriction on the set of proposed values, the previous
RO module assumes the consensus is binary. To make it
work for multivalued consensus, several solutions are pos-
sible. One is to use the systematic transformation presented
in [18] that combines binary consensus and reliable broad-
cast to solve multivalued consensus.
Another solution consists in explicitly integrating the
broadcast of proposed values into the protocol. This can
be done as follows:
- Each process pi is provided with an array VALi[1..n] ini-
tialized to [⊥, . . . ,⊥].
- Statement R Broadcast VAL(vi, i) is added to line 1.
- Statement upon R Deliveryof VAL(vj, j): VALi[j] ← vj
is added to task T 2.
- The random function used at line 101 of RO now outputs
a randomly chosen non-⊥ value of VALi.
5 Proof
The proof of the consensus Validity property (a decid-
ed value is a value initially proposed) is left to the reader.
Let us remind that the aim of the sequence of ﬁrst phases
(namely, the sequence comp est(1); comp est(2); . . . ) is to
ensure convergence on a single value, while the aim of the
sequence of second phases is to ensure agreement is not vi-
olated. The proof assumes f < n/2.
This section ﬁrst assumes that the implementation of
comp est() satisﬁes the properties stated in Section 4.4. The
proof clearly shows that (1) the agreement property is pro-
vided by the second phase of the protocol assuming the
Fixed point property of comp est(); (2) the termination
property results directly from the Eventual convergence
property of comp est(), hence it depends on the protocol
ﬁrst phase.
Theorem 2 (Uniform Agreement) No two processes de-
cide different values.
Proof Let r be the ﬁrst round during which a process de-
cides (“decide v during r” means “during r, execute line 12
with reci = v”). Let v be the value it decides. We ﬁrst
show that (1) the processes that decide during r decide v,
and (2) all estimates are equal to v at the end of r. We then
show from (2) that no other value can be decided in a next
round.
First of all, let us observe that at the end of the ﬁrst step
of the second phase of r (line 8), any esti variable is equal
either to ⊥ or to the value v that was the majority estimate
value (if any) at the end of the ﬁrst phase of r. This means
that we have ((esti (cid:13)= ⊥) ∧ (estj (cid:13)= ⊥)) ⇒ (esti =
estj = v), just before line 9. As ⊥ cannot be decided, it
follows that, if two processes decide during r, they decide
the same non-⊥ value at line 12.
Assuming that processes decide v during r, we now
prove that the estimate values of the processes that progress
to r + 1 are equal to v at the end of r. Let pi be a process
that decides v, and let pj be a process that proceeds to r +1.
As there are more than n/2 PHASE2 STEP2 messages car-
rying the same v (they are the messages that allowed pi to
decide v during r), it follows that pj received at least one
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:08:23 UTC from IEEE Xplore.  Restrictions apply. 
PHASE2 STEP2(r, v). Consequently, pj executed line 13,
and updated estj to v. Hence, all the processes that start
r + 1 have their estimate variables equal to v.
Let us consider the round r+1. The estimates of the pro-
cesses that start r + 1 are equal to the same non-⊥ value v.
It then follows from the Fixed point property of comp est()
that all processes that start the second phase of r + 1 have v
as estimate value.
It follows that the estimate values will never change in
the future, hence a value different from v cannot be decided
in a future round.
✷T heorem 2
Lemma 1 Let us assume that at most f processes crash.
No correct process blocks forever in a round.
Proof If a process decides, then due to the reliable broad-
cast of the DECISION message, all correct processes decide.
Hence, they do not block forever during a round. Hence,
let us assume that no process decides. The proof is by con-
tradiction. Let r be the smallest round number in which a
correct process pi blocks forever. So, pi blocks at line 6 or
10. We show this is impossible.
First of all, due to the Termination property of com-
p est(), no correct process blocks forever in comp est(r).
Let us now consider the case of the lines 6 and 10. The fact
that pi cannot block at any of these lines follows directly
from the assumption that there are at most f faulty process-
es, from which we conclude that at least (n − f) processes
that send the corresponding messages.
✷Lemma 1
Theorem 3 (Termination) Let us assume that at most f
processes crash and comp est() satisﬁes the Eventual con-
vergence property. Each correct process eventually de-
cides.
Proof The proof is by contradiction. Let us assume that no
process decides. Due do the Lemma 1, the correct processes
progress from round to round. Hence, due to the Eventual
convergence property of the comp est() function, there is
a round r during which all processes get the same value
v. Moreover, as f < n/2, v is majority value.
It then
follows from the second phase that v is decided by each
correct process by the end of the round.
✷T heorem 3
Let us now focus on the consensus Termination prop-
I(comp est(r)) ∈
erty in the particular case where ∀r:
(RO+LO+COND)+. As indicated in Section 4.4, while the
LO module (considered alone) satisﬁes the Eventual con-
vergence property, the RO and COND modules satisfy on-
ly weakened versions of it. Let us also note that, as both the
RO and COND modules satisfy the Termination property
stated in Section 4.4, Lemma 1 is still satisﬁed when RO or
COND appears in the implementation of comp est(). (The
proof of the next theorem is left to the reader.)
Theorem 4 Let us assume that at most f processes crash.
(i) If the implementation of comp est(1) is the module
COND and the input vector belongs to the condition, then
each correct process decides. (ii) If the implementation of
comp est() uses LO inﬁnitely often, then each correct pro-
cess decides. (iii) If the implementation of comp est() uses
RO inﬁnitely often, then each correct process decides with
probability 1.
6 The Case f < n/3
As we have seen, the versatility dimension of the proto-
col related to the use of oracles is encapsulated in the com-
p est() function used in the ﬁrst phase of a round. This
section shows a second versatility dimension. Related to
the maximum number of failures, it appears in the second
phase.
Although failures do occur, they are rare in practice. This