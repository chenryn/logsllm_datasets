           |     },                                                     +
           |     "Plans": [                                             +
           |       {                                                    +
           |         "Node Type": "Aggregate",                          +
           |         "Strategy": "Plain",                               +
           |         "Parent Relationship": "InitPlan",                 +
           |         "Subplan Name": "InitPlan 1 (returns $0)",         +
           |         "Current loop": {                                  +
           |           "Actual Loop Number": 1,                         +
           |           "Actual Rows": 0                                 +
           |         },                                                 +
           |         "Plans": [                                         +
           |           {                                                +
           |             "Node Type": "Hash Join",                      +
           |             "Parent Relationship": "Outer",                +
           |             "Join Type": "Inner",                          +
           |             "Current loop": {                              +
           |               "Actual Loop Number": 1,                     +
           |               "Actual Rows": 124911                        +
           |             },                                             +
           |             "Hash Cond": "(foo.c1 = bar.c1)",              +
           |             "Plans": [                                     +
           |               {                                            +
           |                 "Node Type": "Seq Scan",                   +
           |                 "Parent Relationship": "Outer",            +
           |                 "Relation Name": "foo",                    +
           |                 "Alias": "foo",                            +
           |                 "Current loop": {                          +
           |                   "Actual Loop Number": 1,                 +
           |                   "Actual Rows": 1000004                   +
           |                 }                                          +
           |               },                                           +
           |               {                                            +
           |                 "Node Type": "Hash",                       +
           |                 "Parent Relationship": "Inner",            +
           |                 "Current loop": {                          +
           |                   "Actual Loop Number": 1,                 +
           |                   "Actual Rows": 500000                    +
           |                 },                                         +
           |                 "Hash Buckets": 131072,                    +
           |                 "Original Hash Buckets": 131072,           +
           |                 "Hash Batches": 8,                         +
           |                 "Original Hash Batches": 8,                +
           |                 "Peak Memory Usage": 3221,                 +
           |                 "Plans": [                                 +
           |                   {                                        +
           |                     "Node Type": "Seq Scan",               +
           |                     "Parent Relationship": "Outer",        +
           |                     "Relation Name": "bar",                +
           |                     "Alias": "bar",                        +
           |                     "Current loop": {                      +
           |                       "Actual Loop Number": 1,             +
           |                       "Actual Rows": 500000                +
           |                     }                                      +
           |                   }                                        +
           |                 ]                                          +
           |               }                                            +
           |             ]                                              +
           |           }                                                +
           |         ]                                                  +
           |       }                                                    +
           |     ]                                                      +
           |   }                                                        +
           | }
```
## Functions for tracing query execution
For the purpose to achieve a slightly deterministic result from `pg_query_state` function under regression tests this module introduces specific functions for query tracing running on external backend process. In this case query is suspended after any node has worked off one step in pipeline structure of plan tree execution. Thus we can execute query specific number of steps and get its state which will be deterministic at least on number of emitted rows of each node.
Function `executor_step` which takes `pid` of traceable backend provides facility to perform single step of query execution. Function `executor_continue` which also takes `pid` completes query without trace interrupts.
Trace mode is set through GUC parameter `pg_query_state.executor_trace` which default is `off`. **_Warning_**: after setting this parameter any following queries (even specified implicitly, e.g., autocompletion of input in _psql_) will be interrupted and to resume their `executor_continue` must be accomplished on external backend. Only after that user can turn off trace mode.
### Examples with trace mode
Assume one backend with pid = 20102 sets trace mode and executes a simple query:
```
postgres=# set pg_query_state.executor_trace to on;
SET
postgres=# select count(*) from foo join bar on foo.c1=bar.c1;
```
This query is suspended. Then other backend can extract its state:
```
postgres=# select * from pg_query_state(pid := 20102);
-[ RECORD 1 ]------------------------------------------------------------------------------
query_text | select count(*) from foo join bar on foo.c1=bar.c1;
plan       | Aggregate (Current loop: actual rows=0, loop number=1)                        +
           |   ->  Hash Join (Current loop: actual rows=0, loop number=1)                  +
           |         Hash Cond: (foo.c1 = bar.c1)                                          +
           |         ->  Seq Scan on foo (Current loop: actual rows=0, loop number=1)      +
           |         ->  Hash (Current loop: actual rows=0, loop number=1)                 +
           |               ->  Seq Scan on bar (Current loop: actual rows=0, loop number=1)
```
As you can see none of nodes is executed. We can make one step of execution and see renewed state of query:
```
postgres=# select executor_step(20102);
-[ RECORD 1 ]-+-
executor_step | 
postgres=# select * from pg_query_state(pid := 20102);
-[ RECORD 1 ]------------------------------------------------------------------------------
query_text | select count(*) from foo join bar on foo.c1=bar.c1;
plan       | Aggregate (Current loop: actual rows=0, loop number=1)                        +
           |   ->  Hash Join (Current loop: actual rows=0, loop number=1)                  +
           |         Hash Cond: (foo.c1 = bar.c1)                                          +
           |         ->  Seq Scan on foo (Current loop: actual rows=1, loop number=1)      +
           |         ->  Hash (Current loop: actual rows=0, loop number=1)                 +
           |               ->  Seq Scan on bar (Current loop: actual rows=0, loop number=1)
```
Node `Seq Scan on foo` has emitted first row to `Hash Join`. Completion of traceable query is performed as follows:
```
postgres=# select executor_continue(pid := 20102);
-[ RECORD 1 ]-----+-
executor_continue | 
```
At the same time first backend prints result of query execution:
```
postgres=# select count(*) from foo join bar on foo.c1=bar.c1;
-[ RECORD 1 ]-
count | 500000
```
## Feedback
Do not hesitate to post your issues, questions and new ideas at the [issues](https://github.com/postgrespro/pg_query_state/issues) page.
## Authors
Maksim Milyutin  Postgres Professional Ltd., Russia
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")