proc Decrypt[π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2m k tag := C // |Ci| = n and |tag| = τ
X := 02n; v := 1
for i = 1 to m do
T := (N, A, v); π ←$ S
(Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
v := v + Cost(Π); X := Y
T := (N, A, 1 − v); π ←$ S; V := Tagπ(T, X)
if tag 6= V [1, τ] then return false
return true
// Experiments P3+j, for 0 ≤ j ≤ m − r + 1
proc Decrypt[π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2m k tag := C // |Ci| = n and |tag| = τ
X := 02n; v := 1
for i = 1 to m do
T := (N, A, v); π ←$ S
(Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
if r ≤ i ≤ r + j then Y ←$ {0, 1}n
v := v + Cost(Π); X := Y
π ←$ S; V := Tagπ(T, X)
if j = m − r + 1 then V ←$ {0, 1}n
if tag 6= V [1, τ] then return false
return true
Figure 3.11: Experiments P1, . . . , P4+m−r in the proof of Theorem 3.4. Experiment P2 includes the corresponding
boxed statement, but P1 does not. Each experiment also has a procedure Encrypt[π], implementing the encryption
algorithm of Π[π], that is not shown for simplicity. Here S is the set of f ∈ Perm(T , n) such that for any query
(T, X) that Encrypt[π](N, A, M0) makes to π, it holds that f(T, X) = π(T, X).
Our system has two modules: an analysis module that, given graphs corresponding to an AE scheme, veriﬁes
whether the scheme is secure, and a synthesis module that synthesizes AE schemes by enumerating candidate
AE schemes and using the analysis module to see if they are secure. We describe these components below,
where throughout this section, the term graph denotes an unlabeled graph.
Analyzer. The analysis module takes as input a representation (in a stack-based language) of the Dec and
Tag graphs; the stack-based language makes it easy to both convert the inputs into their respective graphs
as well as to synthesize schemes. We ﬁrst derive a graph for the Enc algorithm given the graph for the Dec
algorithm, as described below. Given graphs for the Enc, Dec, and Tag algorithms, we can then run the
privacy and authenticity checks described in Figure 3.6 to check security of the scheme. Our analyzer is able
to verify simpliﬁed variants of OCB [22], XCBC [12], COPA [3], OTR [20], and CCM [10], among others.
Deriving the Enc graph. We implement an algorithm Reverse that, given a Dec graph, computes a
corresponding Enc graph if one exists. The basic idea is to swap the IN and OUT nodes of the input graph
(recall that IN and OUT nodes in the Dec graph denote ciphertext blocks and plaintext blocks, respectively,
whereas IN and OUT nodes in the Enc graph are ﬂipped), and then selectively reverse the edges to ensure that
each node has correct ingoing/outgoing degrees. Deriving the Enc graph is thus simple if there is at most
one path from an IN node to an OUT node and these paths do not cross, as in the case of OCB. However, in
other schemes, such as OTR, each IN node may have multiple paths to each OUT node. We handle this as
described next.
1 . In G1, rename IN nodes as OUT nodes, and OUT nodes
On input G−
1 , let G1 be the undirected graph of G−
14
Figure 4.1: Illustration of the ﬁrst few steps of running Reverse on the Dec graph of OTR. The ﬁrst picture is the
Dec graph of OTR.
as IN nodes; let G2 be the resulting graph. Reverse then assigns direction to the edges of G2 such that each
node has correct ingoing/outgoing degrees; the resulting graph G−
2 is output. (If no assignment is possible,
then the output is ⊥.)
To implement this idea eﬃciently, we color each node either “red” or “blue”, where red nodes denote
nodes that have already been processed, and blue nodes denote unprocessed nodes. Starting from G2, we
initially color IN and INI nodes red and all other nodes blue. We repeatedly iterate over the blue nodes until
we reach a ﬁxed point, where in each iteration we assign direction to some edges and re-color some nodes
red. If a ﬁxed point is reached before all nodes have been colored red, we return ⊥; otherwise, we return G2,
which represents the reversed graph. If the graph G2 has r nodes then we have at most r iterations with
each iteration taking O(r) time.
In each iteration, we process each blue node x as follows. Let ord(x) = 2 if x is an XOR node, and let
ord(x) = 1 otherwise. If there are exactly ord(x) red neighbors of x then (1) for each such neighbor y, assign
the direction y → x, and (2) color x red. Note that in each step we ensure that the current node x has the
correct ingoing degree if we color it red. We never assign an ingoing edge to x in any other step. Hence
when there are no blue nodes, each node in the directed graph has the correct ingoing/outgoing degrees. See
Figure 4.1 for an illustration of Reverse on OTR.
We prove in Appendix A that Reverse is sound; namely, that if running Reverse on a Dec graph produces
an Enc graph, then Dec is a correct decryption algorithm for Enc.
As a side note, the Reverse algorithm allows us to easily check if a scheme is inverse-free (i.e., the scheme
only uses the forward direction of the TBC), which is important when constructing hardware realizations of
AE schemes due to the potential savings in chip space, among other beneﬁts [14, 20]. After running Reverse,
we can check if the parent nodes for all the TBC nodes in the Enc and Dec graph are the same; if so, the
scheme is inverse-free.
Synthesizer. We synthesize schemes as follows. Fixing a Tag graph, we enumerate all possible Dec graphs
of a given size, pruning out “uninteresting” schemes such as ones with two (or more) TBC nodes chained
together, and feed each pair of (Dec, Tag) graphs to our analysis module. To generate the Dec graph, we
start from a graph containing just the IN and INI nodes, and add nodes and their corresponding edges until
the given size bound is reached. If the resulting graph is “well-formed” (i.e., there are no “dangling” edges
and no loops), we derive the corresponding Enc graph as discussed above and run the analysis module on
the result. Unfortunately, this approach is prohibitively expensive as described, especially as the size bound
increases. Thus, we use several optimizations to speed up the process.
Firstly, instead of synthesizing graphs with FIN and OUT nodes, we replace these with “terminal” nodes.
15
OUTTBCOUTDUPXORXORDUPDUPINTBCINIXORFINOUTTBCOUTDUPXORXORDUPDUPINTBCINIXORFINOUTTBCOUTDUPXORXORDUPDUPINTBCINIXORFINOUTTBCOUTDUPXORXORDUPDUPINTBCINIXORFININTBCINDUPXORXORDUPDUPOUTTBCINIXORFINOUTTBCOUTDUPXORXORDUPDUPINTBCINIXORFINOUTTBCOUTDUPXORXORDUPDUPINTBCINIXORFINOUTTBCOUTDUPXORXORDUPDUPINTBCINIXORFIN12345678OUTINININININININ#Nodes Unique
13 (0)
142 (0)
582 (2)
2826 (54)
3090 (—)
12
13
14
15
16
Total
6653
“Optimal” WP
13
0
171
40
66
290
7
0
48 (4)
18
25 (4)
98 (8)
Time
47 sec
4.3 min
24.2 min
2.8 hours
3 hours∗
SP
5
0
5
6
1
17
Figure 4.2: Synthesis results. The ﬁrst column shows the number of instructions in the Dec graph of the given
scheme; the second column the number of secure (and unique) schemes, with the number in parentheses denoting the
number of schemes in which the security check fails but we cannot automatically ﬁnd a concrete attack; the third
column the number of (secure) schemes that are “optimal”, i.e., having two TBC nodes per Dec graph; the fourth
column the number of “optimal” weakly parallelizable schemes, with the number in parentheses denoting the weakly
parallelizable schemes which only use the forward direction of the TBC; the ﬁfth column the number of “optimal”
strongly parallelizable schemes; and the ﬁnal column the total synthesis time, where an asterisk indicates that we
halted execution after the given time.
Upon deriving a well-formed graph, we replace the “terminal” nodes with all possible permutations of FIN
and OUT nodes and check security of each. Thus we no longer need to explore the search space for each
FIN and OUT node; instead, we explore the search space once using a “terminal” node, and later replace the
“terminal” node with all possible combinations of FIN and OUT nodes. Likewise, we can apply this same idea
to INI and IN nodes by introducing a “start” node.
Secondly, we observe that AE schemes like OCB, COPA, and OTR do not utilize one of the INI nodes
in the sense that they simply output the input value directly. Thus, we can remove two nodes from the
synthesis by only synthesizing schemes containing one INI and FIN node. The drawback of this optimization
is that it misses schemes such as XCBC and CCM which do in fact use both INI nodes; however, it greatly
speeds up synthesis. All the results that follow use this optimization. (It would, of course, be possible to
synthesize schemes without using this optimization.)
Results. Using the optimizations described above, we ran our synthesizer to ﬁnd AE schemes with Dec and
Enc graphs of sizes between twelve and sixteen (we found no AE schemes with size less than twelve). Note
that our synthesizer does not remove duplicate schemes. In addition, there are many “equivalent” schemes in
the sense that one is the same as another except with the outputs and/or inputs ﬂipped. We thus developed
a heuristic to remove duplicate and “equivalent” schemes as follows. Let F(·,·,·) be the encrypt operation
of a given scheme, where the ﬁrst argument is the INI input (recall we consider the simpliﬁed variant where
we only use one INI node) and the other arguments are the IN inputs. Choosing arbitrary but ﬁxed inputs
X, M1, and M2, we compute Y kC1kC2 := F(X, M1, M2) and Y 0kC0
2 := F(X, M2, M1). We maintain a
table of existing ciphertexts; if any of Y C1C2, Y C2C1, Y 0C0
2C0
1 exists in the table, we discard
the scheme as a “duplicate”; otherwise, we add each of these to the table and continue.
Figure 4.2 shows the results. The experiments were run on a commodity laptop; because of the long
running time for synthesizing schemes of size sixteen, we stopped the synthesis after three hours for this size.
Due to the large number of discovered schemes, we developed two algorithms to prune the result space. The
ﬁrst simply ﬁlters out all schemes Π such that Cost(Π) > c for some integer c. In Figure 4.2 we set c = 2,
thus pruning out all non-“rate-1” schemes; this removes 95% of the found schemes.
Our second algorithm checks whether a scheme is parallelizable, an important criterion for AE schemes.
Note that we can view the encryption of a message M = M1 ··· M2m as a single graph constructed from m
Enc graphs G1, . . . , Gm, where the FIN nodes of Gi coincide with the INI nodes of Gi+1. We can then assign
a “depth” to each node in this graph as follows:
1kC0
2, or Y 0C0
1C0
• The INI nodes in G1 and the IN nodes in {Gi} get a depth of 0.
• For each node x, let t be the maximum depth of x’s parent(s). If x is a TBC node then depth(x) = t+1;
otherwise depth(x) = t.
16
Figure 4.3: Three of our synthesized schemes of size twelve, illustrated for a four-block message M1, . . . , M4. In the
second scheme, Σ is the checksum of the even blocks, i.e., Σ = M2 ⊕ M4.
Scheme Enc (cycles/byte) Dec (cycles/byte)
OCB
1
2
3
0.7122 ± 0.0072
0.7253 ± 0.0055
0.7116 ± 0.0025
0.8139 ± 0.0121
0.7650 ± 0.0025
0.7485 ± 0.0047
0.7643 ± 0.0023
2.7566 ± 0.0010
Figure 4.4: Performance results of OCB and the three synthesized schemes in Figure 4.3 (Scheme 1 denotes the
left scheme, Scheme 2 the middle scheme, and Scheme 3 the right scheme). We report the time for encryption and