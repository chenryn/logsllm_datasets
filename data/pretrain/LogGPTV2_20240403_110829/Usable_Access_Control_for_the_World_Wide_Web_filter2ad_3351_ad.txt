plained before how we can detect if a malicious client asso-
ciates its public key with the wrong Outlook contact entry.
If the client does have a certiﬁcate, normal SSL protection
applies. We note again that a malicious user could gain ac-
cess by obtaining a certiﬁcate before the legitimate user can,
but that this access can easily be revoked.
9 At least this is true on Windows XP. On Windows 2000, administra-
tors seem to be able to decrypt items encrypted under the Data Protec-
tion API.
In this section, we will look at some of the remaining us-
ability issues in ESCAPE, as well as shed some light on why
other possible system designs seem less suitable in terms of
usability. This will reveal that designing an easy-to-use se-
cure system with off-the-shelf components is harder than
one would expect.
CERTIFICATE DELIVERY One of the problems, in terms of
security, with the system presented above is the way it de-
livers certiﬁcates. A more secure way would be to email cer-
tiﬁcates to the email address presented at certiﬁcate request
time by the client’s Web browser (as part of the URL). This
would raise the bar signiﬁcantly for an attacker who wanted
to impersonate other principals to an ESCAPE server. We
believe, however, that this would signiﬁcantly affect the us-
ability of the system. First of all, there would be no im-
mediate access to the content when a client ﬁrst receives
the email announcing the content’s existence. Upon con-
necting to the server, the client would have to wait for a
second email delivering the certiﬁcate. Furthermore, the in-
stallation of a certiﬁcate that’s sent per email is consider-
ably more involved than installation of a certiﬁcate from a
Web page. Scripting is switched off by default in most email
clients, so one couldn’t send an HTML page similar to the
one presented to Internet Explorer for certiﬁcate pickup. In-
stead, one would have to send the certiﬁcate as an attach-
ment in the email. Opening the attachment on the client side
results in the dialog boxes shown in Figure 3. Some of the
choices the user has to make are not obvious, and we be-
lieve that many non-expert users would fail to install the
certiﬁcate successfully. Given that the window of opportu-
nity for an attacker in our scheme lasts only until the legiti-
mate user ﬁrst contacts the ESCAPE server, we feel that the
usability gained by our system offsets the security lost.
OUTLOOK SCRIPTING It turns out that simple things like
accessing the Outlook address book already raise security
issues that the user is asked to deal with. When starting the
ESCAPE server (see Figure 1), Outlook pops up a dialog
warning the user that “some application” is trying to access
the email addresses of contacts in the Outlook database.
The user has the choice of denying this access, or allow-
ing it for up to 10 minutes. This caution is motivated by
email worms, but a legitimately installed application such
as the ESCAPE server should not trigger this warning dia-
log, which is quite confusing (the user is not even told which
application is requesting the access). It would be interesting
to see how other scriptable contact databases (e.g., the Mac-
intosh address book) handle this kind of situation.
CLIENT AUTHENTICATION We noted above that the ES-
CAPE server relies on the fact that a successful SSL hand-
shake can be completed with a client that doesn’t have a
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
nt
e
m
h
c
a
t
at
ail
m
e
s
n
e
p
o
r
e
s
u
Figure 3. Installing a certiﬁcate delivered as an email attachment
certiﬁcate, even though client authentication is requested by
the server. The SSL master secret doesn’t need data from the
client certiﬁcate, so theoretically, there is no need to abort a
handshake if the client cannot present a certiﬁcate. Here is
what the TLS RFC [7] says about this subject:
7.4.6. Client certiﬁcate
When this message will be sent: This is the
ﬁrst message the client can send after receiving a
server hello done message. This message is only
sent if the server requests a certiﬁcate. If no suit-
able certiﬁcate is available, the client should send
a certiﬁcate message containing no certiﬁcates. If
client authentication is required by the server for
the handshake to continue, it may respond with a
fatal handshake failure alert. [...]
(The “it” in the last sentence refers to the server, not
the client.) SSL v3.0, on the other hand, speciﬁed that a
client, “if no suitable certiﬁcate is available,” “should send
a no certiﬁcate alert instead” (see [9]). It turns out that In-
ternet Explorer by default uses SSL v3.0, and implements
it according to spec. Even though the no certiﬁcate alert
is meant to be only a warning, the PureTLS implemen-
tation we use aborts the handshake on receipt of such an
alert. Once IE is set to set to use TLS, it also implements
it according to spec, and the handshakes succeed in accor-
dance with Figure 2. Mozilla appears to use TLS by default,
and implements it correctly (i.e., our handshakes succeed).
Opera uses TLS by default, but appears to implement it in-
correctly – we never successfully ﬁnished a handshake with
Opera.
OTHER PLATFORMS We mentioned a few times above that
the Data Protection System on Microsoft Windows removes
the need for users to type passwords when Internet Ex-
plorer unlocks their private keys. Other browsers do not
use this feature on Windows. This means that users have to
type passwords every time they want to access an ESCAPE
server. Likewise, other operating systems such as Linux do
not provide a data protection service, so browsers have to
use passwords to store private keys securely.
TRANSFERRING CERTIFICATES In our system, there can
only be one public key per Outlook contact entry. This pre-
vents illegitimate users from acquiring certiﬁcates for an
identity once the legitimate user has received her certiﬁ-
cate (see discussion of “Error 1” in Section 4.3). Unfortu-
nately, the same mechanism prevents legitimate users from
receiving a second certiﬁcate, say, for a second computer
they own. Instead, they have to copy their keypair (and cer-
tiﬁcate) to each machine they want to use. Exporting and
importing keypairs is an involved process. We are currently
still investigating whether there can be a system that has
similar usability and security properties as ESCAPE, yet al-
lows users to easily set up multiple credentials on multiple
machines they own.
MANAGING ACCESS CONTROL LISTS It is very easy to
remove clients from an access control list. Using the ES-
CAPE graphical user interface, the content provider simply
has to navigate to the published folder in question, and re-
move unwanted clients from the access control list. While
this is certainly an easy task, it doesn’t follow our mantra of
“implicit security”, i.e., the only reason a content provider
would want to do this is for security purposes.
It is unclear whether each and every security mechanism
can be hidden underneath a non-security-related action, nor
is it clear that this is desirable. After all, hiding security is
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
not our ultimate goal – encouraging people to use security
is, and hiding it in appropriate places is one way to achieve
this goal. Where security cannot be hidden (as seems to be
the case here), exposing it in a user-friendly way is the right
thing to do.
6. Conclusions
In this paper, we set out to design a system that would
allow controlling access to content published on the World
Wide Web. While this is a well-studied problem, our some-
what unusual goal was to achieve a high level of usability
with off-the-shelf client software, while at the same time
providing a reasonably secure system. Ideally, both con-
tent providers and content consumers would not have to do
anything “extra” in a secure system (compared to an inse-
cure one). Assuming a create-publish-announce cycle, we
achieved this goal on the content provider’s side. On the
content consumer’s side, we don’t incur any extra cost ex-
cept for a one-time setup process.
A truly user-friendly system relies on certain features
found in off-the-shelf applications, some less surprising
than others. For example, not only is the Data Protection
system on Microsoft Windows (and the way IE uses it) use-
ful for our goal, it also turns out that the correct implemen-
tation of a seemingly insigniﬁcant feature in TLS 1.0 is re-
quired to minimize the overhead imposed on users.
We implemented a content publishing server (ESCAPE)
in Java that enables content consumers to access published
content with common off-the-shelf client applications such
as Internet Explorer. We strove to minimize the overhead to
users (both on the publisher’s and consumer’s sides), bring-
ing it as close as possible to that of a publishing system that
doesn’t have any built-in access control. Interesting future
work would include a survey of client software not consid-
ered in this paper, and perhaps ﬁnd even more opportunities
to remove overhead imposed by security mechanisms.
ESCAPE is a publishing engine for small-time publish-
ers because it doesn’t scale to large numbers of content con-
sumers. We don’t believe this is a big disadvantage, since
the content publishers that address small audiences will
beneﬁt most likely from usable security (i.e., they are more
likely to be non-expert users who can’t afford to hire secu-
rity IT personnel).
We encourage the community to design secure systems
from ground up for usability, since unusable security mech-
anisms will not, as the adjective suggests, be used at all.
While our system addresses a very speciﬁc need (i.e., it
allows small-time publishers to protect access to their pub-
lished online content), we believe that it can serve as a case
study in usable security design. The design of our Easy and
Secure Content Authorization and Publishing Engine also
gives some insight into the caveats encountered when de-
signing secure systems for usability, and into the kinds of
trade-offs between usability and security that are likely to
be encountered when building usable secure systems.
References
[1] M. Abadi, M. Burrows, B. Lampson, and G. D. Plotkin.
A calculus for access control in distributed systems. ACM
Transactions on Programming Languages and Systems,
15(4):706–734, September 1993.
[2] A. Adams and M. A. Sasse. Users are not the enemy: Why
users compromise computer computer security mechanisms
and how to take remedial measures. Communications of the
ACM, 42:40–46, December 1999.
[3] L. Bauer, M. A. Schneider, and E. W. Felten. A general and
ﬂexible access-control system for the web. In Proceedings of
the 11th USENIX Security Symposium, San Francisco, CA,
August 2002.
[4] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. Keromytis.
The KeyNote Trust-Management System Version 2. IETF -
Network Working Group, The Internet Society, September
1999. RFC 2704.
[5] Claymore Systems. PureTLS.
[6] J. DeTreville. Binder, a logic-based security language.
In
2002 IEEE Symposium on Security and Privacy, Oakland,
CA, May 2002.
[7] T. Dierks and C. Allen. The TLS Protocol Version 1.0. IETF
- Network Working Group, The Internet Society, January
1999. RFC 2246.
[8] W. K. Edwards, M. W. Newman, J. Z. Sedivy, T. F. Smith,
D. Balfanz, D. K. Smetters, H. C. Wong, and S. Izadi. Us-
ing speakeasy for ad hoc peer-to-peer collaboration. In Pro-
ceedings of ACM 2002 Conference on Computer Supported
Cooperative Work (CSCW 2002), New Orleans, LA, Novem-
ber 2002.
[9] A. O. Freier, P. Karlton, and P. C. Kocher. The SSL Proto-
col Version 3.0. IETF - Transport Layer Security Working
Group, The Internet Society, November 1996. Internet Draft
(work in progress).
[10] W. Grifﬁn, M. Heyman, D. Balenson, and D. Carman. Mi-
crosoft data protection. MSDN Online, October 2001.
[11] R. Housley, W. Ford, W. Polk, and D. Solo. Internet X.509
Public Key Infrastructure Certiﬁcate and CRL Proﬁle. IETF
- Network Working Group, The Internet Society, January
1999. RFC 2459.
[12] IBM. bridge2java. http://www.alphaworks.ibm.
com/tech/bridge2java/.
[13] D. K. Smetters and R. E. Grinter. Moving from the design
of usable security technologies to the design of useful se-
cure applications. In New Security Paradigms Workshop ’02.
ACM, 2002.
[14] A. Whitten and J. D. Tygar. Why Johnny can’t encrypt:
A usability evaluation of PGP 5.0.
In Proceedings of the
8th USENIX Security Symposium, Washington, DC, August
1999.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply.