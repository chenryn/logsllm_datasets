tecting parts of an application, SEV protects full VMs. The runtime
protection of VMs is achieved by transparently encrypting a VM’s
memory. The remote attestation feature of SEV allows cloud cus-
tomers to validate the correct deployment of the VM. Since its intro-
duction in 2016, AMD has introduced two extensions to SEV that
add additional protection features to SEV. While SEV-ES adds en-
cryption for guest VM registers [29], SEV-SNP introduces, amongst
others, software-based integrity protection and an enhanced Trusted
Computing Base (TCB) versioning feature for the Chip Endorse-
ment Key (CEK) [3]. The CEK cryptographically links the target
platform to the AMD root of trust.
Both the runtime protection and the remote attestation feature
require the hypervisor to use an interface provided by a dedicated
firmware running on the AMD-SP. The API for SEV and SEV-ES
is specified in [2], whereas SEV-SNP uses a dedicated API spec-
ified in [8]. The SEV firmware is responsible for managing the
memory encryption keys of the VMs and implementing the remote
attestation feature of SEV.
Our approach re-enables the previously presented attacks by
Buhren et al. by allowing the execution of custom code on the
AMD-SP. Therefore, for details on SEV and SEV-ES protected sys-
tems, we refer to their paper [15], while the remainder of this
section focuses on the SEV-SNP technology.
SNP Runtime Protection. In addition to the memory encryp-
3.1.1
tion introduced by SEV and the register encryption introduced by
SEV-ES, SEV-SNP adds software-based memory integrity protec-
tion. For SEV-SNP enabled VMs, the CPU will track ownership of
memory pages using the Reverse Mapping (RMP) table. Memory
accesses are subject to an RMP check to ensure that, e.g., the hy-
pervisor cannot access encrypted guest memory or manipulate
the mapping between guest-physical and host-physical. The RMP
access check mitigates previously presented attacks that rely on
the hypervisor’s ability to write or remap a VM’s memory.
SNP Remote Attestation. With SEV-SNP, a VM can request
3.1.2
an attestation report at an arbitrary point in time. To that end,
the VM communicates with the AMD-SP via an encrypted and
integrity-protected channel. The SEV firmware will generate an
attestation report that includes a measurement of the initial VM
state and additional information about the host platform. A VM
can also include 512 bits of arbitrary data in the report, e.g., a hash
of a public key generated in the VM. The VM can then provide this
attestation report to a third party, such as the guest owner. The
attestation report is signed with platform specific endorsement key,
the VCEK. Using an ID provided by the AMD-SP, a guest owner can
retrieve a signed VCEK for a specific AMD SoC from an AMD key
server [6]. The VCEK is signed by the AMD Root Key (ARK) which
can be retrieved from an AMD website [5]. For each AMD Zen
microarchitecture, there exists a different ARK. Using the obtained
VCEK and the ARK, the guest owner can validate that an authentic
AMD-SP has issued the report. The signed attestation report links
the data in the report provided by the guest to the respective VM.
If the VM provided the hash of a public key within the attestation
report, a genuine report proves that the VM owns the corresponding
key pair.
SNP Versioned Chip Endorsement Key. SEV and SEV-ES rely
3.1.3
on a static, non-revocable ECDSA key (the CEK), to authenticate a
remote AMD SoC. Firmware issues that enable CEK extraction, as
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2877presented in [15], have severe implications for SEV. An extracted
CEK allows an attacker to fake attestation reports or pose a valid tar-
get for VM migration. As it is impossible to revoke a CEK, firmware
updates are not sufficient to mitigate these attacks.
SEV-SNP, therefore, introduces the Versioned Chip Endorsement
Key (VCEK). A VCEK is derived on the AMD-SP from chip-unique
fused secrets and bound to firmware security versions of compo-
nents which are part of SEV’s TCB. These security version num-
bers (SVNs) are combined in a single TCB version string as shown
in Table 1. In case of a known firmware issue, an update of a single
Byte(s)
Field
0
BOOT_LOADER TEE RSVD SNP MICROCODE
2-5
1
6
7
Table 1: SEV-SNP’s TCB version string [8, Chapter 2.2.].
TCB component will result in a different VCEK. To retrieve the
signed VCEK, the user has to provide the ID of the target platform,
as well as the SVNs for which the signed VCEK should be retrieved.
SEV-SNP allows to downgrade the SVN of the TCB components
to provide backward compability. To that end, SEV-SNP provides
the SNP_SET_REPORTED_TCB API call. The firmware ensures that
the call can only be used to set a lower TCB version. Providing
higher SVNs than the current counter values results in an error.
In contrast to the CEK, the VCEK is cryptographically bound to
specific firmware versions. Hence, previously extracted VCEKs are
no longer valid after a firmware upgrade. Any party involved in
the attestation process can now enforce minimum TCB component
versions.
SNP Migration. Migration of SEV-protected VMs requires a
3.1.4
dedicated mechanism, as the VM memory encryption key is solely
accessible by the AMD-SP. For SEV and SEV-ES, the AMD-SP is
involved in the migration processes and policy enforcement. Using a
Diffie-Hellman key exchange, the involved AMD-SPs on the source
and target of the migration derive shared transport keys to migrate
the memory.
To allow more complex migration schemes, SEV-SNP introduces
Migration Agents (MAs). A MA is a dedicated VM associated with
one or multiple VMs and is responsible for migrating a VM. In the
first step, the hypervisor uses the SNP_PAGE_SWAP_OUT SEV-SNP
API command to export a VM’s memory. The AMD-SP will re-
encrypt the memory using a dedicated key, the Offline Encryp-
tion Key (OEK). The AMD-SP generates the OEK during the initial
launch of a VM.
Then the hypervisor calls the MA, which will retrieve the guest
context of the respective VM using the VM Export AMD-SP API
command. The context represents the internal VM state for SEV-SNP
and contains, amongst others, the OEK used to re-encrypt a VM’s
memory pages during migration. The AMD-SP ensures that the
context is only exported to MAs that are associated with the re-
spective VM. The MA can now enforce arbitrary policies for the
migration process, as only the MA can decrypt the memory pages.
To re-import a VM, a MA on the target host can re-create the VM
using the guest context and the encrypted guest memory.
The MA associated with a VM is part of a VM’s TCB, as it can re-
trieve the guest context including the OEK. To enable guest owners
Figure 1: Overview of the AMD-SP’s firmware components
relevant to the TCB of SEV protected VMs.
to validate the MA associated with their VM, the AMD-SP remote
attestation reports include the measurement of the MA.
Alternatively, SEV-SNP supports a guest-assisted migration mode
where the memory pages are transferred by trusted component
within the guest itself.
3.2 AMD Secure Processor
Initially introduced in 2013 under the name Platform Security Pro-
cessor (PSP) [32], the AMD-SP is a dedicated security processor
and contained within AMD CPUs. The AMD-SP is an ARMv7 core
with dedicated SRAM executing a firmware provided by AMD and
is the root-of-trust for the AMD SoC. The AMD-SP executes a
firmware that implements the SEV-related functions defined in the
SEV-API [2], respectively the SEV-SNP-API [8]. The firmware is
loaded from an SPI-attached flash chip and is stored alongside the
UEFI firmware [14].
AMD-SP Boot Procedure. [15] analyzes the AMD-SP’s boot pro-
cedure on AMD Epyc Zen 1 CPUs. Figure 1 depicts AMD-SP’s
firmware components relevant for SEV. On these systems, the
AMD-SP initially starts executing from a non-updatable ROM boot-
loader, see Figure 1 Step 1. The ROM bootloader is responsible for
loading and verifying an RSA public key from a modifiable SPI flash.
This public key is used to validate the integrity of files loaded from
the SPI flash. The public key itself is verified using hashes stored
within the bootloader ROM, Step 2 of Figure 1.
In the following steps, the ROM bootloader loads another boot
stage, called the PSP OS by Buhren et al. [15], from the SPI attached
flash. This boot stage contains a proprietary operating system and
will later load and verify the SEV firmware from flash. Both this
second boot stage and the SEV firmware are validated using the
public key loaded by the ROM bootloader. The public key used to
authenticate the PSP OS and the SEV firmware is identical to the
ARK of the corresponding microarchitecture.
We confirmed that the described boot procedure is present in all
CPUs we analyzed. However, on AMD Epyc Zen 3 systems, both
the PSP OS, as well as the SEV firmware component are encrypted
and the SEV firmware is validated using a public key embedded in
 SEV FWAMD-SP OSAMD-SP ROM  bootloaderSPI flash    AMD Root KeySignedEncrypted# # Hash-protectedSession 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2878the PSP OS instead of the ARK. In Section 6, we describe how we
decrypt these components to enable further analysis.
3.3 Fault Injection by Voltage Glitching
Integrated circuits (ICs) need to be operated under the specified
conditions to function as intended, e.g., within rated supply voltage,
clock stability, temperature, and electromagnetic field ranges [11].
This dependency can be misused to force faulty behavior during the
chip’s operation. Glitches on the supply voltage line, i.e., short sup-
ply voltage variations, can be used to produce computational errors
on CMOS circuits at low cost [19]. Unintended bit flips, corrupted
instructions, and skipping of instructions in a microprocessor are
examples of such errors. If these errors are forced during the exe-
cution of cryptographic algorithms, information about the secret
key or plaintext might be leaked [11]. On the other hand, faults can
be used to skip security checks, enter protected code paths, or gain
code execution [35, 51].
Depending on the design of the target, different approaches can
be used to inject faults into the supply voltage rail. In case the
voltage is supplied externally to the printed circuit board (PCB), an
external power supply can introduce glitches through that interface.
If the voltage is generated directly on the PCB using a voltage
regulator (VR), the injection of glitches becomes more complex. On
the one hand, glitches can be injected using a so-called crowbar
circuit, which creates a short circuit between the voltage line and
GND, effectively enforcing a voltage drop [41]. On the other hand,
on more advanced systems, such as SoCs, the VRs typically offer
communication interfaces to adjust the voltage on demand. These
interfaces, if not adequately protected, can also be leveraged to
inject voltage glitches [17, 40, 43].
3.4 SVI2 Protocol
The demand for processors trimmed for high performance which
at the same time show deterministic behavior, has put increased
requirements on the power management of x86 processors [1]. The
power consumption of a processor is directly linked with its current
consumption and supply voltage. To maximize performance gain,
the power consumption in modern processors is managed by dedi-
cated on-chip µControllers, which measure voltage/current in real
time. Recent AMD processors dynamically monitor and adjust their
primary (Core and SOC) voltage rails, which is also known as dy-
namic voltage scaling [1]. Through the serial voltage identification
interface 2.0 (SVI2), the processor can directly communicate with a
VR to monitor and alter the supply voltages. The AMD SVI2 is a
three-wire interface with clock (SVC), data (SVD), and telemetry
(SVT) lines. Although the corresponding specification by AMD is
not publicly available, all the necessary information on SVI2 can
be gathered from datasheets of different VRs implementing the
interface, e.g., from [26, 27, 46, 47].
The SVI2 protocol is similar to the I2C bus concept. The CPU acts
as master and sends control packets via the SVC and SVD lines to the
VR. SVI2 control packets consist of 3 bytes transmitted conforming
to the SMBus send byte protocol: 1 byte for selecting the voltage
domain (Core or SOC) followed by an acknowledgement (ACK) bit,
and then 2 bytes containing the voltage to be applied and other
configuration parameters, each byte followed by an ACK bit [46].
Due to the configuration encoding, the voltage can be configured
with a step size of 6.25 mV. Through the telemetry function (TFN)
configuration bits, periodic voltage (and current) reports from the
VR to the CPU via the SVC and SVT lines can be enabled. Details
about the telemetry package format can be found in [47].
4 ATTACK SCENARIO
One of the most prominent use cases for the SEV technology,
are cloud environments. In cloud environments, the physical sys-
tems hosting the VMs are under full control of a cloud service
provider (CSP). In our attack scenarios, the attacker aims to access
a SEV-protected VM’s memory content by attacking the AMD-SP.
We make no assumptions on whether SEV-ES, SEV-SNP, or just
SEV is active. We consider an attacker who has either access to the
physical hosts that execute the targeted VM or access the CSP’s
maintenance interfaces that allow to, e.g., migrating a VM to an-
other physical system. Examples for attackers with these capabili-
ties are maintenance or security personnel or system administrators
of the CSP. We do not assume the presence of firmware or software
bugs in the targeted host or VM for our attack scenarios. Based
on these capabilities, we showcase two different approaches to ac-
cess a SEV-protected VM’s data. The attack scenarios are inspired
by the attacks presented in [15], but are adapted to SEV-SNP. We
want to emphasize that these scenarios are merely two examples
of possible attacks. Due to the AMD-SP’s critical role for the SEV
technology, targeting the AMD-SP potentially enables several other
attack scenarios.
Scenario 1: Debug Override. As previously presented in [15], the
SEV API provides debug features that allow the de- and encryp-
tion of a VM’s memory [2, Chapter 7]. A similar feature exists for
SEV-SNP [8, Section 8.23]. Both SEV’s and SEV-SNP’s debug fea-
tures are subject to a policy check enforced by the SEV firmware.
Only if a guest owner explicitly enabled debugging during the initial
deployment, the SEV firmware will allow the debug API commands.
By altering the SEV firmware, an attacker could override this
policy enforcement to allow the debug commands regardless of a
guest owner’s policy. To that end, the attacker must replace the
SEV firmware on the physical machine that hosts the target VM.
Alternatively, the attacker could first migrate the targeted VM to
a previously prepared system. The attacker can then use the pre-
viously mentioned debug API calls to decrypt a VM’s memory
regardless of the policy specified by the guest owner.
Scenario 2: Forge Attestation. In this second scenario, the attacker
has access to the control interface of the hypervisor to initiate the
migration of SEV-protected VMs. However, in contrast to the first
scenario, the attacker does not need to alter the firmware of the tar-
geted host; hence no physical access to the targeted host is required.
Instead, the attacker needs to extract CPU-specific endorsement
keys of an SEV-capable CPU to sign arbitrary SEV attestation re-
ports. These endorsement keys play a central role in the remote
attestation feature of the SEV technology, see Section 3.1.1. To de-
crypt a VM’s memory of an SEV-SNP-protected VM, the attacker