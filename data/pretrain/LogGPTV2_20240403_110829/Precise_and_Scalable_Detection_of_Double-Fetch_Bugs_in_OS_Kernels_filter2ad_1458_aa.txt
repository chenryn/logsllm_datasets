title:Precise and Scalable Detection of Double-Fetch Bugs in OS Kernels
author:Meng Xu and
Chenxiong Qian and
Kangjie Lu and
Michael Backes and
Taesoo Kim
2018 IEEE Symposium on Security and Privacy
Precise and Scalable Detection of
Double-Fetch Bugs in OS Kernels
Meng Xu∗, Chenxiong Qian∗, Kangjie Lu†, Michael Backes‡, Taesoo Kim∗,
∗
‡
†
Georgia Institute of Technology
University of Minnesota
CISPA Helmholtz Center i.G.
Abstract—During system call execution,
it is common for
operating system kernels to read userspace memory multiple
times (multi-reads). A critical bug may exist if the fetched
userspace memory is subject to change across these reads, i.e.,
a race condition, which is known as a double-fetch bug. Prior
works have attempted to detect these bugs both statically and
dynamically. However, due to their improper assumptions and
imprecise deﬁnitions regarding double-fetch bugs, their multi-
read detection is inherently limited and suffers from signiﬁcant
false positives and false negatives. For example, their approach
is unable to support device emulation, inter-procedural analysis,
loop handling, etc. More importantly, they completely leave the
task of ﬁnding real double-fetch bugs from the haystack of multi-
reads to manual veriﬁcation, which is expensive if possible at all.
In this paper, we ﬁrst present a formal and precise deﬁnition of
double-fetch bugs and then implement a static analysis system—
DEADLINE—to automatically detect double-fetch bugs in OS
kernels. DEADLINE uses static program analysis techniques
to systematically ﬁnd multi-reads throughout the kernel and
employs specialized symbolic checking to vet each multi-read for
double-fetch bugs. We apply DEADLINE to Linux and FreeBSD
kernels and ﬁnd 23 new bugs in Linux and one new bug in
FreeBSD. We further propose four generic strategies to patch and
prevent double-fetch bugs based on our study and the discussion
with kernel maintainers.
I. INTRODUCTION
Bugs in operating system kernels can be particularly prob-
lematic. In practice, they often lead to vulnerabilities that can
be exploited to compromise the entire system and cause all
kinds of severe attacks, such as privilege escalation [1], [2],
information leaks [3], and denial of service [4]. This fact has
drawn serious attention from the security community, and the
kernel has been increasingly hardened against various types of
memory errors, e.g., kASLR [5], kCFI [6], [7], and UniSan [8].
Unfortunately, these mitigations have limited success in taming
attacks that exploit logic bugs.
One class of logic bugs that has recently drawn attention is
double-fetch bugs, which the Bochspwn project [9] introduced
for the Windows kernel. Wang et al. also studied double-fetch
bugs for the Linux kernel [10]. A double-fetch bug is a special
type of race condition bug in which (typically during syscall
execution) the kernel reads a particular userspace memory
region more than once with the assumption that the content
in the accessed region does not change across reads. However,
this assumption is not valid. A concurrently running user thread
can “scramble” the same memory region in between kernel
reads, leading to data inconsistencies in the execution path,
which can lead to exploitable vulnerabilities such as sanity
check bypassing, buffer overﬂow, and confused deputy. In
reality, researchers have exploited double-fetch bugs to escalate
privileges on Windows OS [11], [12].
What makes double-fetch bug detection an important problem
is that, in kernel, it is common to intentionally read data
multiple times from the userspace for performance reasons. We
call this situation a multi-read. To illustrate, consider fetching
a variable-length message with a potentially maximum size
of 4 KB from the userspace. One approach is to always pre-
allocate a 4 KB buffer and copy 4 KB from the userspace in
one shot. However, in most cases, this wastes memory and
CPU cycles if the effective message payload is 64 bytes or
less. Hence, the kernel handles this scenario by ﬁrst fetching a
4-byte size variable and later allocating the buffer and fetching
the size-byte message. A quick scan over the Linux kernel
reveals that there are over 1,000 multi-reads. Then, a follow-up
question would be: How many of them are real double-fetch
bugs? Until now, the only way to answer this question was to
manually vet the complicated source code of all multi-reads.
However, this is certainly a scale beyond manual vetting. It
therefore becomes a pressing problem that we have to both 1)
formally deﬁne and distinguish double-fetch bugs and multi-
reads and 2) automatically verify each multi-read to check
whether it is a bug.
Unfortunately, neither aspect has been addressed perfectly in
prior works. Bochspwn [9] deﬁnes multi-reads as at least two
memory reads from the same userspace address within a short
time frame, while Wang et al. [10] deﬁnes multi-reads based
on a few empirical static code patterns. Due to the imprecise
deﬁnitions, both works result in many false positives (i.e.,
incorrectly identiﬁed bugs) and false negatives (i.e., missing
bugs). More importantly, neither of them can systematically
distinguish double-fetch bugs from multi-reads in deﬁnition
and they completely leave it to manual veriﬁcation.
In this paper, we propose DEADLINE, an automatic tool to
statically detect multi-reads and double-fetch bugs with both
high precision and coverage. In particular, DEADLINE covers
all drivers, ﬁle systems, and other peripheral modules that can
be compiled under the x86 architecture for both Linux and
the FreeBSD kernels. DEADLINE re-discovered all x86-related
double-fetch bugs reported in [10] and further found 23 new
© 2018, Meng Xu. Under license to IEEE.
DOI 10.1109/SP.2018.00017
661
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:58 UTC from IEEE Xplore.  Restrictions apply. 
bugs in the Linux kernel as well as a new bug in the FreeBSD
kernel, which signiﬁcantly outperforms prior work.
To guide DEADLINE to detect double-fetch bugs, we ﬁrst
formally model and mathematically distinguish double-fetch
bugs from multi-reads. In essence, a multi-read becomes
a double-fetch bug when 1) two fetches are guaranteed to
read from an overlapped userspace memory region, 2) a
relation between the two fetches is established based on the
values in the overlap, which 3) can be destroyed by a race
condition that changes the value in the overlap. With these
deﬁnitions, DEADLINE detects double-fetch bugs in two steps.
In the ﬁrst step, DEADLINE tries to ﬁnd as many multi-reads
as possible and also builds execution paths for each multi-
read by compiling the kernel source to LLVM intermediate
representation (IR) followed by a static code analysis. In the
second step, DEADLINE follows the execution paths to vet
whether a multi-read turns into a double-fetch bug. To do
this, DEADLINE ﬁrst transforms the LLVM IR into a symbolic
representation (SR) in which each variable is represented by a
symbolic expression. After this procedure, DEADLINE detects
a double-fetch bug by solving symbolic constraints on the
SR in accordance with the double-fetch bug deﬁnitions. A
satisﬁable result indicates that a double-fetch bug exists, while
an unsatisﬁable result means a bug does not exist.
Although the process sounds intuitive, applying it to kernel
code imposes several practical challenges. For example, to
detect multi-reads, DEADLINE needs to systematically explore
paths to collect multi-reads, and further trim irrelevant instruc-
tions and linearize these execution paths. For double-fetch
bug vetting, DEADLINE needs to symbolize memory reads
and writes, and emulate common library functions. DEADLINE
embodies various techniques to address these challenges. In
particular, instead of using empirical lexical matching [10], it
relies on program analysis to collect multi-reads and further
applies backward slicing and loop unrolling to prune the
execution path. For symbolic checking, we propose our own
memory model in extension to the model used by traditional
symbolic executors [13], [14], [15] to encode access sequence
and memory object information. We also write manual symbolic
rules to emulate library functions, which alleviate DEADLINE
from having to handle the intricacies in these functions.
Besides detection, we complete the analysis cycle of double-
fetch bugs by discussing how to exploit double-fetch bugs as
well as four generic ways to ﬁx double-fetch bugs based on
our experience in patching these bugs as well as the discussion
with kernel maintainers.
Contribution.
contributions:
In summary, this paper makes the following
• We propose a formal and precise deﬁnition of double-fetch
bugs that eliminates the need to manually verify whether
a multi-read is a double-fetch bug.
• We present the design and implementation of DEADLINE,
an end-to-end system to automatically vet kernel code with
a tailored symbolic execution model speciﬁcally designed
for double-fetch bug detection.
• With DEADLINE, we ﬁnd and report 23 new bugs in the
Linux kernel and a new bug in the FreeBSD kernel.
• We further propose four generic strategies to patch and
prevent double-fetch bugs based on our study and the
discussion with kernel maintainers.
The rest of the paper provides background on multi-reads
and double-fetch bugs (§II), formally deﬁnes double-fetch bugs
(§III), presents an overview of DEADLINE (§IV) and the design
of each component (§V, §VI), reveals implementation details
(§VII), reports the double-fetch bugs found (§VIII), explores
double-fetch bug exploitation (§IX) proposes several methods to
mitigate double-fetch bugs (§X), discusses future works (§XI),
compares with related works (§XII), and concludes (§XIII).
II. BACKGROUND
A. Address space separation
In modern operating systems, virtual memory is divided
into userspace and kernel-space regions. Most notably, the
userspace region is separated for each process running in the
system, creating an illusion of exclusive address space for each
program. Userspace memory can be accessed from all threads
running in that address space as well as from kernel. On the
other hand, the kernel memory is system-wide and is accessible
from the kernel only.
Furthermore, although userspace memory is accessible to the
kernel, in practice, the kernel almost never directly dereferences
an address supplied by user processes, as any corrupted address,
be it by mistake or by intention, will crash the whole system.
Instead, if the kernel requires userspace data for execution (as
in the case of many driver IOCTL routines), it ﬁrst duplicates
the data into kernel memory and then works on its internal copy.
Special schemes, termed transfer functions, are provided for
this purpose, such as copy_from_user, get_user in Linux, and
copyin, fuword in FreeBSD. These schemes not only perform
data transfer, but also actively validate userspace accesses
and handle illegal addresses or page faults. In fact, extensive
manual instrumentations (e.g., the __user mark) are placed to
ensure that userspace memory can be accessed only through
transfer functions. Therefore, in this paper, we assume that
any multi-read must be done through one or more transfer
functions.
B. Multi-read as a common practice
Given the limited number of arguments a user process can
directly pass to the kernel for a syscall (e.g., maximum six
arguments on x86_64), pointers pointing to block structures in
userspace memory are often passed to handle large or complex
requests. In this case, the kernel often needs to refer back to
userspace memory during the syscall. Theoretically, any multi-
read can be re-designed to a single-read, as illustrated in §I, by
pre-deﬁning the shape of the buffer (e.g., the maximum size)
and always copying the whole buffer in one shot. However, in
practice, this pattern is rarely used due to the waste of memory
and CPU cycles, especially when the effective payload is often
much smaller than the maximum allowed. Instead, what is
typically done in kernel is to ﬁrst fetch a request header, often
662
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:58 UTC from IEEE Xplore.  Restrictions apply. 
return -EFAULT;
return -EFAULT;
// first fetch
if (copy_from_user(&khdr, uhdr, sizeof(khdr)))
mpt_ioctl_header khdr, __user *uhdr = (void __user *) arg;
MPT_ADAPTER *iocp = NULL;
// dependency lookup
if (mpt_verify_adapter(khdr.iocnum, &iocp) ioctl_cmds.mutex);
struct mpt_fw_xfer kfwdl, __user *ufwdl = (void __user *) arg;
// BUG: kfwdl.iocnum might not equal to khdr.iocnum
mptctl_do_fw_download(kfwdl.iocnum, ......);
mutex_unlock(&iocp->ioctl_cmds.mutex);
// second fetch
if (copy_from_user(&kfwdl, ufwdl, sizeof(struct mpt_fw_xfer)))
return -EFAULT;
return -EFAULT;
return -ENOTSUPP;
struct tls_crypto_info header, *full = /* allocated before */;
// protocol check
if (header.version != TLS_1_2_VERSION)
// first fetch
if (copy_from_user(&header, arg, sizeof(struct tls_crypto_info)))
1 void tls_setsockopt_simplified(char __user *arg) {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 }
Fig. 2: A protocol checking double-fetch bug, adapted from
do_tls_setsockopt_txZ in ﬁle net/tls/tls_main.c
// BUG: full->version might not be TLS_1_2_VERSION
do_sth_with(full);
// second fetch
if (copy_from_user(full, arg,
sizeof(struct tls12_crypto_info_aes_gcm_128)))
return -EFAULT;
if (tmp)
goto nonzero;
}
return -EFAULT;
return -EINVAL;
struct console_font font;
for (i = 0; i charcount; i++) {
if (!op->height) { /* Need to guess font height [compat] */
// first batch of fetches
if (get_user(tmp, &charmap[32*i+h-1]))
u8 tmp, __user *charmap = op->data;
int h, i;
for (h = 32; h > 0; h--)
1 void con_font_set_simplified(struct console_font_op *op) {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16 nonzero:
17
18
19
20
21
22
23
24
25
26
27
28 }
Fig. 3: An information guessing double-fetch bug, adapted from
con_font_set in ﬁle drivers/tty/vt/vt.c
font.height = op->height;
// second fetch
font.data = memdup_user(op->data, size);
if (IS_ERR(font.data))
// BUG: the derived font.height might not match with font.data
do_sth_with(&font);
return -EINVAL;
op->height = h;
}
a few bytes only, and then construct the whole request based
on the information in the header. Wang et al. [10] identiﬁed
three scenarios of this pattern, namely, size checking, where the
actual length of the request depends on a size variable; type
selection, where the actual length of the request depends on
the opcode of the action performed; and shallow copy, where
the request header contains a pointer to the second buffer in
userspace.
Our analysis conﬁrms these common scenarios but also
discovers more interesting reasons and patterns for multi-reads.
Dependency lookup. As shown in Figure 1, in the case where
there could be multiple handlers for a request, a lookup, based
on the request header, is ﬁrst performed to ﬁnd the intended
handler, and later the whole request is copied in.
Protocol/signature checking. As shown in Figure 2, the
request header is ﬁrst checked against a pre-deﬁned protocol
number. The kernel rejects the request early if the protocol is
not honored.
Information guessing. As shown in Figure 3, when certain
information is missing, the kernel might ﬁrst guess this piece of
information via a sequence of selective reads from the userspace