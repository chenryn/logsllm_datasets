好吧。现在，您已经非常了解如何建立 Docker 集群，以及它的节点如何从单引擎模式进入集群模式。您还知道，这一点的意义在于将您从直接管理单个运行容器中解放出来。所以，你可能开始怀疑，如果我现在不直接单独管理我的容器，我该如何管理它们？你来对地方了！这就是集群服务发挥作用的地方。swarm 服务允许您根据容器应该有多少个并发运行的副本来定义容器应用的期望状态。让我们快速了解一下在 swarm 服务的管理组中有哪些命令可供我们使用，然后我们将讨论这些命令:
![](img/430b9977-6481-4879-916d-7a80e747488a.png)
您可能想做的第一件事是创建一个新的服务，因此我们将使用`service create`命令开始我们的集群服务讨论。以下是`service create`命令的语法和基本示例:
```
# Syntax for the service create command
# Usage: docker service create [OPTIONS] IMAGE [COMMAND] [ARG...]
# Create a service
docker service create --replicas 1 --name submarine alpine ping google.com
```
好的。让我们分解这里显示的示例`service create`命令。首先，您有管理组服务，后跟`create`命令。然后，我们开始进入参数；第一个是`--replicas`。这定义了应该同时运行的容器副本的数量。接下来，我们有`--name`参数。这个非常明显，是我们正在创建的服务的名称，在本例中为`submarine`。我们将能够在其他服务命令中使用指定的名称。在 name 参数之后，我们有完全限定的 Docker 映像名称。在这种情况下，只是`alpine`。它可能是像`alpine:3.8`或`alpine:latest`这样的东西，或者是像`tenstartups/alpine:latest`这样更合格的东西。在用于服务的映像名称之后是运行容器时要使用的命令以及传递给该命令的参数——分别是`ping`和`google.com`。因此，前面的示例`service create`命令将从`alpine`映像启动单个容器，该容器将运行带有 google.com 参数的`ping`命令，然后命名服务`submarine`。这是它的样子:
![](img/3701eca6-03c6-412d-8dfd-49676e2fb619.png)
现在，您已经了解了创建 docker 服务的基本知识。但是，在你变得过于兴奋之前，仍然有很多理由来掩盖`service create`命令。事实上，这个命令有如此多的选项，在这本书里把它们全部列出来需要两页。因此，与其这样做，我希望您现在使用`--help`功能并输入以下命令:
```
# Get help with the service create command
docker service create --help
```
我知道，对吧？有很多*可选参数可以使用。别担心。我不会把你留在这里晾干的。我会给你一些指导，帮助你为创建服务打下坚实的基础，然后你可以扩展并尝试一些你在`--help`中看到的其他参数。*
 *正如你所知，我们到目前为止使用的两个参数`--replicas`和`--name`，都是可选的。如果您不提供要使用的副本数量，该服务将以默认值 1 创建。此外，如果您不为服务提供一个名称，一个奇特的名称将被编造出来并提供给服务。这与我们在[第 2 章](2.html)、*学习 Docker 命令*中使用`docker container run`命令时看到的默认命名类型相同。对于发出的每个`service create`命令，通常最好同时提供这两个选项。
另外，请注意，一般来说，前面示例中提供的映像的命令和命令参数也是可选的。在这种特定的情况下，它们是必要的，因为从 alpine 映像运行的没有其他命令或参数提供的容器将会退出。在示例中，这将显示为聚合服务失败，Docker 将永远尝试重新启动服务。换句话说，如果正在使用的映像内置了命令及其参数(例如 Dockerfile 的`CMD`或`ENTRYPOINT`指令)，则可以省略它们。
现在让我们继续更多的创建参数。您应该还记得[第 2 章](2.html)、*学习 Docker 命令*中有一个`--publish`参数，您可以在`docker container run`命令中使用，该参数定义 Docker 主机上公开的端口和主机端口映射到的容器中的端口。它看起来像这样:
```
# Create a nginx web-server that redirects host traffic from port 8080 to port 80 in the container docker container run --detach --name web-server1 --publish 8080:80 nginx
```
嗯，集群服务需要相同的功能，在他们看来，Docker 使用于`container run`命令和`service create`命令的参数相同:`--publish`。您可以使用我们之前看到的相同的缩写格式，`--publish 8080:80`，或者您可以使用更详细的格式:`--publish published=8080`，`target=80`。这仍然转化为将主机流量从端口`8080`重定向到容器中的端口 80。让我们尝试另一个例子，这次使用`--publish`参数。我们将再次运行`nginx`映像:
```
# Create a nginx web-server service using the publish parameter
docker service create --name web-service --replicas 3 --publish published=8080,target=80 nginx
```
这个例子将创建一个新的服务，运行三个容器副本，使用`nginx`映像并暴露容器上的端口`80`和主机上的端口`8080`。看一看:
![](img/d43881b1-4d53-443c-916e-bb51f16581d8.png)
现在，你正在到达那里。让我们快速讨论另外三个参数，您将准备好接受这个世界(至少是 swarm 服务)。首先，`--restart-window`。此参数用于告诉 Docker 守护程序，在测试容器是否健康之前，需要等待多长时间来启动它的应用。默认值为五秒。如果你在你的容器中创建了一个应用，需要超过 5 秒的时间来启动并报告为健康，你将希望在你的`service create`中包含一个`--restart-window`参数。接下来，`--restart-max-attempts`。此参数告诉 Docker 守护程序在放弃之前，要尝试启动一个报告不健康的容器副本多少次。默认为*永不放弃*。*永不投降*！最后，我们来谈谈`--mode`参数。群组服务的默认模式是*复制*。这意味着 Docker 守护程序将继续为您的服务建立容器，直到并发运行的容器数量等于您在`--replicas`参数中提供的值(如果您不提供参数，则为 1)。例如，使用`--replicas 3`参数，您将获得三个为您的服务在群中运行的容器。还有一种模式，叫做**全局**。如果在创建服务时提供`--mode global`参数，Docker 守护程序将在集群中的每个节点上只支持一个容器。如果您有一个六节点集群，那么最终将运行六个容器，每个节点一个。对于 12 节点集群，您将获得 12 个容器，依此类推。当您拥有为每个主机提供功能的服务时，这是一个非常方便的选择，例如监控应用或日志转发器。
让我们回顾一下您想要了解和使用的其他一些服务命令。一旦您创建了一些服务，您可能需要这些服务的列表。这可以通过`service list`命令来实现。看起来是这样的:
```
# List services in the swarm
# Usage: docker service ls [OPTIONS]
docker service list
```
一旦您查看了正在运行的服务列表，您可能会想要更多关于这些服务的详细信息。为此，您可以使用`service ps`命令。看一看:
```
# List the tasks associated with a service
# Usage: docker service ps [OPTIONS] SERVICE [SERVICE...]
docker service ps
```
一旦服务不再有用，您可能想要终止它。这样做的命令是`service remove`命令。这是它的样子:
```
# Remove one or more services from the swarm
# Usage: docker service rm SERVICE [SERVICE...]
docker service remove sleepy_snyder
```
如果您想删除群集中运行的所有服务，您可以组合这些命令并执行如下操作:
```
# Remove ALL the services from the swarm
docker service remove $(docker service list -q)
```
最后，如果您意识到当前配置的副本数量没有设置为所需数量，可以使用`service scale`命令进行调整。以下是您的操作方法:
```
# Adjust the configured number of replicas for a service
# Usage: docker service scale SERVICE=REPLICAS [SERVICE=REPLICAS...]
docker service scale web-service=4
```
![](img/354cacd5-2139-4ad7-acb7-abb6cc0f00fa.png)
这应该足以让你忙碌一段时间。在我们进入第 6 章*Docker 网络*之前，让我们在这一章再讨论一个话题:访问你的在集群中运行的容器应用。
# 参考
在[https://docs . Docker . com/engine/reference/command line/service _ create/](https://docs.docker.com/engine/reference/commandline/service_create/)阅读更多关于 Docker 服务创建引用的信息。
# 访问群中的容器应用
所以，现在你有一个群运行着奇数个管理节点和工人节点。您已经部署了一些集群服务来运行您最喜欢的容器化应用。下一步是什么？嗯，你可能只是想访问一个或多个在你的群中运行的应用。也许您已经部署了一个 web 服务器应用。如果能访问那个网络服务器共享的网页就好了，对吗？让我们快速浏览一下，看看这样做有多容易。
群管理器为我们处理的特性之一是将流量导向我们的服务。在前面的例子中，我们设置了一个 web 服务，该服务在群中运行三个副本。我目前使用的群恰好有三个管理节点和三个工作节点。所有六个节点都有资格运行工作负载，因此当服务启动时，六个节点中的三个将最终运行一个容器。如果我们使用`service ps`命令查看服务任务的细节，您可以看到六个节点中的哪一个正在运行 web 服务容器:
![](img/f42332f8-0d66-4aab-a195-d99bd73fc86a.png)
在本例中，您可以看到 web 服务容器正在节点 01、02 和 04 上运行。奇妙的是，您不需要知道哪些节点正在运行您的服务容器。您可以通过群中的任何节点访问该服务。当然，您可能希望能够访问节点 01、02 或 04 上的容器，但是请看一下:
![](img/63e01e66-7ca6-4121-9a4c-b653f2b773cb.png)
拥有从群中任何节点访问服务的能力有一个不幸的副作用。你能想到它可能是什么吗？我不会让你悬念太久。副作用是您只能为群中的一个服务分配一个(主机)端口。在我们的例子中，我们将端口`8080`用于我们的网络服务。这意味着我们不能将端口`8080`用于我们希望在该群集中运行的任何其他服务的主机端口:
![](img/71ca5156-7db9-4eb0-ad77-00a558c82bdc.png)
# 参考
有关更多信息，请查看以下链接:
*   Wiki 文档包含了在集群上部署服务的非常详细的概述:[https://docs.docker.com/v17.09/engine/swarm/services/](https://docs.docker.com/v17.09/engine/swarm/services/)
*   服务如何工作:[https://docs . docker . com/engine/swarm/how-swarm-mode-works/services/](https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/)
*   Docker 开始进行群体模式训练:[https://docs.docker.com/v17.09/engine/swarm/swarm-tutorial/](https://docs.docker.com/v17.09/engine/swarm/swarm-tutorial/)
# 摘要
在这一章中，我们终于开始把一些片段组合在一起，让一些有趣的事情发生。我们了解了通过启用集群模式和创建集群集群可以获得多少功能。而且，我们发现使用一个`swarm init`命令设置一切是多么容易。然后，我们学习了如何增长和管理我们的群集群，最后，我们学习了如何在新的群集群中运行容器作为服务。很有趣，对吧？！
现在，让我们把事情推进到下一个层次。在[第 6 章](6.html)*Docker Networking*中，我们将了解 Docker Networking。如果你准备好了更多的好东西，请翻开新的一页。*