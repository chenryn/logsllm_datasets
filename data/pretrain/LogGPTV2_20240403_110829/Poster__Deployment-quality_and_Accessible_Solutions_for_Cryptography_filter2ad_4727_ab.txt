from our benchmark effort to improve its performance [3].
New security findings. Using our research prototype Cryp-
toGuard, we have successfully screened 46 large open source
projects on Apache Software Foundation and 6,181 Android apps
from Google Play Market. We discovered a wide range of security
issues in real-world coding practices. In Apache projects, there is
a widespread insecure practice of storing plaintext passwords in
code or in configuration files. Insecure uses of SSL/TLS APIs are
set as the default configuration in some cases. For some of them,
end-users are susceptible to use insecure default configurations
due to lack of proper warning or documentations. In Android apps,
95% of the vulnerabilities come from the libraries that are packaged
2Available at https://github.com/CryptoGuardOSS/cryptoapi-bench
12345678910Depth0.940.950.960.970.98F1 Score100110120130140150160170180190Total ConstantsF1 ScoreDiscovered ConstantsTrue positives12345678910Depth020406080100120Runtime (s)SparkHadoopTomee12345678910Depth2004006008001000CountTotal Orthogonal InvocationsTotal Inter-procedural SlicesAverage Length of SlicesPosterCCS ’19, November 11–15, 2019, London, United Kingdom2546Table 1: CryptoApi-Bench comparison of CrySL, Coverity, SpotBugs and CryptoGuard on six common threat models with
CryptoApi-Bench’s common 20 basic and 84 advanced cases. GT, TP, FP, FN, FPR, FNR stand for ground truth, true positive,
false positive and false negative, false positive rate, false negative rate, respectively. Detailed comparison can be found in [6].
Tools
CrySL
Coverity
SpotBugs
CryptoGuard
Basic Benchmark
Advanced Benchmark
GT:14
TP FP FN FPR(%)
10
13
13
13
50
0
0
0
6
0
0
0
4
1
1
1
GT: 68
Result Summary
FNR(%) Prec.(%) Rec.(%) TP FP FN FPR(%)
66.67
28.57
7.14
42.86
57.89
7.14
7.14
44.83
62.5
100.00
100.00
100.00
71.43
92.86
92.86
92.86
32
12
22
13
28
55
68
3
40
13
0
65
Result Summary
FNR(%) Prec.(%) Rec.(%)
58.82
41.18
80.88
19.12
0.00
100.00
4.41
95.59
55.56
52.00
0.00
83.33
REFERENCES
[1] Coverity Static Application Security Testing (SAST). https://www.synopsys.com/
software-integrity/security-testing/static-analysis-sast.html. Accessed: January
28, 2019.
[2] SpotBugs: Find Bugs in Java Programs. https://spotbugs.github.io/. Accessed:
January 15, 2019.
[3] Headless test cases for CryptoGuard Crypto-API Benchmark. "https://github.
com/CROSSINGTUD/CryptoAnalysis/issues/134", 2019. [Online; accessed Aug
25, 2019].
[4] Y. Acar, M. Backes, S. Fahl, S. Garfinkel, D. Kim, M. L. Mazurek, and C. Stransky.
Comparing the Usability of Cryptographic APIs. In IEEE S&P’17, pages 154–171,
2017.
[5] Y. Acar, M. Backes, S. Fahl, D. Kim, M. L. Mazurek, and C. Stransky. You Get
Where You’re Looking for: The Impact of Information Sources on Code Security.
In IEEE S&P’16, 2016.
[6] S. Afrose, S. Rahaman, and D. Yao. CryptoAPI-Bench: A Comprehensive Bench-
mark on Java Cryptographic API Misuses. In IEEE Secure Development Conference
(SecDev), September 2019.
[7] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An Empirical Study of
Cryptographic Misuse in Android Applications. In ACM CCS’13, 2013.
[8] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgärtner, and B. Freisleben.
Why Eve and Mallory Love Android: An Analysis of Android SSL (in) Security.
In ACM CCS’12, pages 50–61, 2012.
[9] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The
Most Dangerous Code in the World: Validating SSL Certificates in Non-browser
Software. In ACM CCS’12, 2012.
[10] S. Krüger, S. Nadi, M. Reif, K. Ali, M. Mezini, E. Bodden, F. Göpfert, F. Günther,
C. Weinert, D. Demmler, and R. Kamath. CogniCrypt: Supporting Developers in
Using Cryptography. In IEEE/ACM ASE’17, pages 931–936, 2017.
of Cryptographic APIs. In ECOOP’18, 2018.
Practices in Java: Challenges and Vulnerabilities. In ACM ICSE’18, 2018.
[13] S. Rahaman, Y. Xiao, S. Afrose, F. Shaon, K. Tian, M. Frantz, M. Kantarcioglu, and
D. Yao. CryptoGuard: High Precision Detection of Cryptographic Vulnerabilities
in Massive-sized Java Projects. In ACM CCS’19, 2019.
[14] S. Rahaman and D. Yao. Program Analysis of Cryptographic Implementations
for Security. In IEEE Secure Development Conference (SecDev), pages 61–68, 2017.
[11] S. Krüger et al. CrySL: An Extensible Approach to Validating the Correct Usage
[12] N. Meng, S. Nagy, D. Yao, W. Zhuang, and G. Arango-Argoty. Secure Coding
with the applications. Some libraries are from renowned software
firms.
However, these security issues are the tip of the insecure coding
iceberg. Through our disclosure interactions with developers and
observations from StackOverflow forum [4, 5, 12], we found that a
substantial number of developers did not appear to understand the
concepts or implications of security API usage. The unfortunate
reality is that most developers, with tight project deadlines and
short product turnaround time, are not willing to spend effort on
hardening their code for long-term benefits. Thus, it is unrealistic to
assume that developers will better themselves on their own without
any external help.
Ongoing and future work. We aim to transition secure cryp-
tographic coding research solutions to practice. Our ongoing effort
is to make code screening convenient and accessible to mass devel-
opers. We are integrating CryptoGuard with Software Assurance
Marketplace (SWAMP), one of the most popular free-of-cost ser-
vices for continuous software assurance and static code analysis.
In SWAMP, programmers can access over 30 scanning tools for
a wide variety of languages and platforms. Typically, developers
upload their codes or binaries to SWAMP for analysis. There is also
a locally installable version of the SWAMP, called SWAMP-in-a-
Box, for users that cannot upload their code to an external facility.
Each week, the SWAMP performs thousands of assessments, and
hundreds of copies of SWAMP-in-a-Box have been downloaded.
After successful integration, SWAMP will be able to offer a com-
prehensive cryptographic misuse detection service to thousands
of its users. We plan to create CryptoGuard plugins for popular
Java IDE environments, namely IntelliJ IDEA and Eclipse. The only
cryptography-related IDE is Eclipse’s CogniCrypt plugin, which is
for a code assistant tool (i.e., auto-complete of crypto APIs) [10], not
for vulnerability detection. We also plan to create CryptoGuard
plugins for Apache Maven and Gradle. Enabling crypto code screen-
ing in the early stages of the software development cycle will be
more effective. Orthogonally, we plan to upgrade relevant Java
static analysis tools (namely, Soot) to newer versions of Java, which
will generate impact beyond the specific crypto problem 3.
2 ACKNOWLEDGMENT
This project was supported in part by NSF grant CNS-1929701 and
ONR Grant N00014-17-1-2498.
3The current Soot does not support Java 9 or above.
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2547