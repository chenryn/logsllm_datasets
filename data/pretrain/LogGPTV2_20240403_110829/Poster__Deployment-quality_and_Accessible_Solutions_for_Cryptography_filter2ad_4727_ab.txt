### Improving Performance and Security through Benchmarking

**New Security Findings:**
Using our research prototype, CryptoGuard, we have successfully screened 46 large open-source projects from the Apache Software Foundation and 6,181 Android apps from the Google Play Market. Our analysis uncovered a wide range of security issues in real-world coding practices.

In Apache projects, a common insecure practice is storing plaintext passwords in code or configuration files. Additionally, some projects use insecure SSL/TLS API configurations by default. This often leads to end-users adopting these insecure configurations due to a lack of proper warnings or documentation.

For Android apps, 95% of the vulnerabilities stem from packaged libraries, many of which come from well-known software firms. These security issues are just the tip of the iceberg. Through our interactions with developers and observations on Stack Overflow [4, 5, 12], we found that a significant number of developers do not fully understand the concepts or implications of security API usage. Given tight project deadlines and short product turnaround times, most developers are unwilling to invest the necessary effort to harden their code for long-term benefits. Therefore, it is unrealistic to expect developers to improve their security practices without external assistance.

### Ongoing and Future Work

Our goal is to transition secure cryptographic coding research into practical solutions. We are currently working to make code screening more convenient and accessible to a broader audience of developers. To achieve this, we are integrating CryptoGuard with the Software Assurance Marketplace (SWAMP), a popular free service for continuous software assurance and static code analysis. SWAMP offers over 30 scanning tools for various languages and platforms. Developers can upload their code or binaries to SWAMP for analysis, or use the locally installable version, SWAMP-in-a-Box, if they cannot upload their code to an external facility. Each week, SWAMP performs thousands of assessments, and hundreds of copies of SWAMP-in-a-Box have been downloaded. After successful integration, SWAMP will be able to provide comprehensive cryptographic misuse detection services to its users.

We also plan to create CryptoGuard plugins for popular Java IDEs, such as IntelliJ IDEA and Eclipse. Currently, the only cryptography-related IDE plugin is CogniCrypt for Eclipse, which serves as a code assistant tool (e.g., auto-completion for crypto APIs) rather than a vulnerability detector. Additionally, we aim to develop CryptoGuard plugins for Apache Maven and Gradle. Enabling crypto code screening in the early stages of the software development cycle will be more effective.

Furthermore, we plan to upgrade relevant Java static analysis tools, such as Soot, to support newer versions of Java. This will have a broader impact beyond the specific crypto problem. The current version of Soot does not support Java 9 or above.

### Acknowledgment

This project was supported in part by NSF grant CNS-1929701 and ONR Grant N00014-17-1-2498.

---

**Table 1: Comparison of CrySL, Coverity, SpotBugs, and CryptoGuard on Six Common Threat Models with CryptoApi-Bench's 20 Basic and 84 Advanced Cases**

| Tools | CrySL | Coverity | SpotBugs | CryptoGuard |
|-------|-------|----------|----------|-------------|
| **Basic Benchmark** | | | | |
| GT: 14 | 10 | 13 | 13 | 13 |
| TP | 50 | 0 | 0 | 0 |
| FP | 0 | 0 | 0 | 1 |
| FN | 6 | 0 | 0 | 1 |
| FPR (%) | 0 | 0 | 0 | 7.14 |
| FNR (%) | 66.67 | 28.57 | 7.14 | 42.86 |
| Prec. (%) | 100.00 | 100.00 | 100.00 | 92.86 |
| Rec. (%) | 71.43 | 92.86 | 92.86 | 92.86 |
| **Advanced Benchmark** | | | | |
| GT: 68 | 32 | 12 | 22 | 13 |
| TP | 28 | 55 | 68 | 3 |
| FP | 40 | 13 | 0 | 65 |
| FN | 40 | 13 | 0 | 65 |
| FPR (%) | 58.82 | 41.18 | 80.88 | 19.12 |
| FNR (%) | 0.00 | 100.00 | 4.41 | 95.59 |
| Prec. (%) | 55.56 | 52.00 | 0.00 | 83.33 |
| Rec. (%) | 71.43 | 92.86 | 92.86 | 92.86 |

**References:**

[1] Coverity Static Application Security Testing (SAST). https://www.synopsys.com/software-integrity/security-testing/static-analysis-sast.html. Accessed: January 28, 2019.

[2] SpotBugs: Find Bugs in Java Programs. https://spotbugs.github.io/. Accessed: January 15, 2019.

[3] Headless test cases for CryptoGuard Crypto-API Benchmark. "https://github.com/CROSSINGTUD/CryptoAnalysis/issues/134", 2019. [Online; accessed Aug 25, 2019].

[4] Y. Acar, M. Backes, S. Fahl, S. Garfinkel, D. Kim, M. L. Mazurek, and C. Stransky. Comparing the Usability of Cryptographic APIs. In IEEE S&P’17, pages 154–171, 2017.

[5] Y. Acar, M. Backes, S. Fahl, D. Kim, M. L. Mazurek, and C. Stransky. You Get Where You’re Looking for: The Impact of Information Sources on Code Security. In IEEE S&P’16, 2016.

[6] S. Afrose, S. Rahaman, and D. Yao. CryptoAPI-Bench: A Comprehensive Benchmark on Java Cryptographic API Misuses. In IEEE Secure Development Conference (SecDev), September 2019.

[7] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An Empirical Study of Cryptographic Misuse in Android Applications. In ACM CCS’13, 2013.

[8] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgärtner, and B. Freisleben. Why Eve and Mallory Love Android: An Analysis of Android SSL (in) Security. In ACM CCS’12, pages 50–61, 2012.

[9] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The Most Dangerous Code in the World: Validating SSL Certificates in Non-browser Software. In ACM CCS’12, 2012.

[10] S. Krüger, S. Nadi, M. Reif, K. Ali, M. Mezini, E. Bodden, F. Göpfert, F. Günther, C. Weinert, D. Demmler, and R. Kamath. CogniCrypt: Supporting Developers in Using Cryptography. In IEEE/ACM ASE’17, pages 931–936, 2017.

[11] S. Krüger et al. CrySL: An Extensible Approach to Validating the Correct Usage of Cryptographic APIs. In ECOOP’18, 2018.

[12] N. Meng, S. Nagy, D. Yao, W. Zhuang, and G. Arango-Argoty. Secure Coding Practices in Java: Challenges and Vulnerabilities. In ACM ICSE’18, 2018.

[13] S. Rahaman, Y. Xiao, S. Afrose, F. Shaon, K. Tian, M. Frantz, M. Kantarcioglu, and D. Yao. CryptoGuard: High Precision Detection of Cryptographic Vulnerabilities in Massive-sized Java Projects. In ACM CCS’19, 2019.

[14] S. Rahaman and D. Yao. Program Analysis of Cryptographic Implementations for Security. In IEEE Secure Development Conference (SecDev), pages 61–68, 2017.