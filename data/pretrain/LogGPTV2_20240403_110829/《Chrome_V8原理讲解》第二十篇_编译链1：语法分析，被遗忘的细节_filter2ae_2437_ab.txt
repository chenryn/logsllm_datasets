    19.      parse_info.set_extension(extension);
    20.      parse_info.set_eager(compile_options == ScriptCompiler::kEagerCompile);
    21.      parse_info.set_language_mode(
    22.          stricter_language_mode(parse_info.language_mode(), language_mode));
    23.      maybe_result = CompileToplevel(&parse_info, isolate, &is_compiled_scope);
    24.      Handle result;
    25.      if (extension == nullptr && maybe_result.ToHandle(&result)) {
    26.        DCHECK(is_compiled_scope.is_compiled());
    27.        compilation_cache->PutScript(source, isolate->native_context(),
    28.                                     language_mode, result);
    29.      } else if (maybe_result.is_null() && natives != EXTENSION_CODE) {
    30.        isolate->ReportPendingMessages();
    31.      }
    32.    }
    33.    return maybe_result;
    34.  }
代码7行查询`compilation_cache`上篇文章讲过，初次查询结果为空。代码13行创建ParseInfo实例，为语法分析器（Parser）做准备工作。代码15行初始化Parser_info,源码如下：
    1.  Handle NewScript(Isolate* isolate, ParseInfo* parse_info,
    2.                           Handle source,
    3.                           Compiler::ScriptDetails script_details,
    4.                           ScriptOriginOptions origin_options,
    5.                           NativesFlag natives) {
    6.    Handle script =
    7.        parse_info->CreateScript(isolate, source, origin_options, natives);
    8.    Handle script_name;
    9.    if (script_details.name_obj.ToHandle(&script_name)) {
    10.      script->set_name(*script_name);
    11.      script->set_line_offset(script_details.line_offset);
    12.      script->set_column_offset(script_details.column_offset);
    13.    }
    14.    Handle source_map_url;
    15.    if (script_details.source_map_url.ToHandle(&source_map_url)) {
    16.      script->set_source_mapping_url(*source_map_url);
    17.    }
    18.    Handle host_defined_options;
    19.    if (script_details.host_defined_options.ToHandle(&host_defined_options)) {
    20.      script->set_host_defined_options(*host_defined_options);
    21.    }
    22.    return script;
    23.  }
代码6~12行，把源码封装到Parser_info中，设置行、例偏移量信息。  
回到`Compiler::GetSharedFunctionInfoForScript()`，代码23行，进入`CompileToplevel()`，源码如下：
    1.  MaybeHandle CompileToplevel(
    2.      ParseInfo* parse_info, Isolate* isolate,
    3.      IsCompiledScope* is_compiled_scope) {
    4.  //省略很多.........................
    5.    if (parse_info->literal() == nullptr &&
    6.        !parsing::ParseProgram(parse_info, isolate)) {
    7.      return MaybeHandle();
    8.    }
    9.  //省略很多.........................
    10.    MaybeHandle shared_info =
    11.        GenerateUnoptimizedCodeForToplevel(
    12.            isolate, parse_info, isolate->allocator(), is_compiled_scope);
    13.    if (shared_info.is_null()) {
    14.      FailWithPendingException(isolate, parse_info,
    15.                               Compiler::ClearExceptionFlag::KEEP_EXCEPTION);
    16.      return MaybeHandle();
    17.    }
    18.    FinalizeScriptCompilation(isolate, parse_info);
    19.    return shared_info;
    20.  }
代码5行`literal()`判断抽象语法树是否存在，首次执行时为空，所以进入代码6行，开始语法分析，源码如下：
    1.  bool ParseProgram(ParseInfo* info, Isolate* isolate,
    2.                    ReportErrorsAndStatisticsMode mode) {
    3.  //省略代码..............................
    4.    Parser parser(info);
    5.    FunctionLiteral* result = nullptr;
    6.    result = parser.ParseProgram(isolate, info);
    7.    info->set_literal(result);
    8.    if (result) {
    9.      info->set_language_mode(info->literal()->language_mode());
    10.      if (info->is_eval()) {
    11.        info->set_allow_eval_cache(parser.allow_eval_cache());
    12.      }
    13.    }
    14.    if (mode == ReportErrorsAndStatisticsMode::kYes) {
    15.  //省略代码..............................
    16.    }
    17.    return (result != nullptr);
    18.  }
代码4行，使用Parse_info信息创建Parser实例，源码如下：
    1.  Parser::Parser(ParseInfo* info)
    2.      : ParserBase(info->zone(), &scanner_, info->stack_limit(),
    3.                           info->extension(), info->GetOrCreateAstValueFactory(),
    4.                           info->pending_error_handler(),
    5.                           info->runtime_call_stats(), info->logger(),
    6.                           info->script().is_null() ? -1 : info->script()->id(),
    7.                           info->is_module(), true),
    8.        info_(info),
    9.        scanner_(info->character_stream(), info->is_module()),
    10.        preparser_zone_(info->zone()->allocator(), ZONE_NAME),
    11.        reusable_preparser_(nullptr),
    12.        mode_(PARSE_EAGERLY),  // Lazy mode must be set explicitly.
    13.        source_range_map_(info->source_range_map()),
    14.        target_stack_(nullptr),
    15.        total_preparse_skipped_(0),
    16.        consumed_preparse_data_(info->consumed_preparse_data()),
    17.        preparse_data_buffer_(),
    18.        parameters_end_pos_(info->parameters_end_pos()) {
    19.    bool can_compile_lazily = info->allow_lazy_compile() && !info->is_eager();
    20.    set_default_eager_compile_hint(can_compile_lazily
    21.                                       ? FunctionLiteral::kShouldLazyCompile
    22.                                       : FunctionLiteral::kShouldEagerCompile);
    23.    allow_lazy_ = info->allow_lazy_compile() && info->allow_lazy_parsing() &&
    24.                  info->extension() == nullptr && can_compile_lazily;
    25.    set_allow_natives(info->allow_natives_syntax());
    26.    set_allow_harmony_dynamic_import(info->allow_harmony_dynamic_import());
    27.    set_allow_harmony_import_meta(info->allow_harmony_import_meta());
    28.    set_allow_harmony_nullish(info->allow_harmony_nullish());
    29.    set_allow_harmony_optional_chaining(info->allow_harmony_optional_chaining());
    30.    set_allow_harmony_private_methods(info->allow_harmony_private_methods());
    31.    for (int feature = 0; feature < v8::Isolate::kUseCounterFeatureCount;
    32.         ++feature) {
    33.      use_counts_[feature] = 0;
    34.    }
    35.  }
代码8~18行，从Parser _Info中获取信息；代码19~23行是lazy compile开关，allow_lazy_
表示最终结果；代码25是否支持natives语法，也就是Javascript源码中是否允许使用以`%`开头的命令；代码26~30行是否支持私有方法等等。至此，语法分析器初始化工作完毕。  
创建`Paser`实例后，返回`bool ParseProgram()`，代码6行，进行语法分析，期间还需要创建扫描器，下次讲解。  
 **技术总结**  
 **（1）** Javascript源码进入V8后需要转码；  
 **（2）** Javascript源码在V8内的表示是`Source`类,全称是`v8::internal::source`；  
 **（3）** 先查编译缓存，缓存缺失时启动编译；  
 **（4）** 语法分析器先启动，Token缺失时启动词法分析器。  
好了，今天到这里，下次见。
**恳请读者批评指正、提出宝贵意见**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**