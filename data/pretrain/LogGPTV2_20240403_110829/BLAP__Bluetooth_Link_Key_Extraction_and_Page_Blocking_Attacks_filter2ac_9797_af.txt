### Figure 11: Link Keys in HCI Data from USB Sniff and HCI Dump
- **(b) HCI dump for pairing under page blocking attack**

### Figure 12: HCI Dump Logs for Normal Pairing and Pairing Under Page Blocking Attack

In addition to Windows OS, we also examined the implementation of the link key extraction attack on Linux Ubuntu 20.04. We found that Bluetooth bonding information is stored in the `/var/lib/bluetooth/[MAC Address of device]` folder in Linux. Upon investigating this folder, we confirmed that the information file includes the link key of the corresponding device. Implementing the link key extraction attack in Linux is straightforward using both USB sniffing and HCI dump logs, as there are USB sniffing solutions and the `bluez-hcidump` package available. However, running USB sniffing, `bluez-hcidump`, and accessing the bonding information file in Linux require superuser privileges. Therefore, the practicality of link key extraction in Linux depends on the attacker's level of privilege.

### 2. Page Blocking Attack
Unlike the link key extraction attack, demonstrating the feasibility of a page blocking attack cannot be achieved solely by examining user interface information, as it is difficult to confirm whether a subsequent Just Works pairing is caused by the attack or initiated by the mobile device (M) accidentally. Thus, we analyze the HCI dump log generated during our experiment.

**Figures 12a and 12b** show examples of HCI dump logs captured from M during an ordinary pairing and a pairing under a page blocking attack, respectively. 

- **During normal pairing (Figure 12a):**
  - The host of M attempts to establish a connection with C via the `HCI Create Connection` command.
  - The pairing is initiated by the `HCI Authentication Requested` command, which is the first HCI message for pairing.
  - The controller of M requests a stored link key by sending an `HCI Link Key Request` event to the host.
  - Since M does not have a bonded link key with C yet, the host replies with an `HCI Link Key Request Negative Reply`, indicating the absence of the link key.
  - The controller then initiates the pairing procedure.

- **Under the page blocking attack (Figure 12b):**
  - There should be a preceding connection request event on M, `HCI Connection Request`, which is an upstream event from the controller to notify the host that a page request has been received from A.
  - The host accepts the connection request (`HCI Accept Connection Request` command), establishing a Bluetooth connection between A and M.
  - After the connection is established, a pairing procedure is initiated with the `HCI Authentication Requested` command, similar to the normal pairing.
  - In this scenario, M should be both the pairing initiator (`HCI Authentication Requested` command) and the connection responder (`HCI Connection Request` event) simultaneously.
  - By checking if the HCI dump log follows the same flow as shown in Figure 12b, we can confirm the successful deployment of our attack.

For the attack validation, we used two Nexus 5x devices running Android 6 as A and C, and tested the attack against various mobile systems M, including:
- Nexus 5x running Android 8
- LG V50 and Galaxy S8 running Android 9
- Pixel 2 XL, LG VELVET, and Galaxy s21 running Android 11
- iPhone Xs running iOS 14.4.2

To launch the attack, we made A establish a PLOC (Persistent Low Energy Connection) with M. To keep them connected without processing the host layer connection, we postponed the handling of the HCI event sent from the controller in A, so A does not process the next steps for the host layer connection. The update of the Bluetooth connection state begins when the host receives an `HCI Connection Complete` event from the controller. In Nexus 5x, the `btu hcif process event()` function processes `HCI Connection Complete` events. We implemented the PLOC condition in A by making the host postpone the handling of the event in `btu hcif process event()`.

In a page blocking attack, the PLOC state should be maintained until a pairing procedure is initiated by M. In practice, this may require complex code implementation due to timing synchronization and exception handling issues. For example, the host should stop postponement when a pairing procedure is initiated by M and handle other HCI commands and events that occur during the PLOC state. It also requires preventing link drop, which can be caused by connection timeouts. This can be addressed by exchanging dummy data, such as SDP queries. Our experiment assumed that M initiates a pairing procedure within 10 seconds after establishing the PLOC connection for simplicity. Figure 13 shows our proof-of-concept (PoC) implementation that keeps the host in a PLOC state for a fixed duration (10 seconds) before calling `btu hcif connection comp evt()`. After the duration, C exits the PLOC state; if M initiates a pairing as assumed, it carries out the pairing procedure.

Using the PoC code, we evaluated our page blocking attack against the mobile devices M and checked if the HCI dump log recorded during the test matched Figure 12b.

### Evaluation Results
#### 1. Results for Link Key Extraction Attack
The experiments on Android devices with versions 8, 9, and 11 confirmed that the extracted link keys are the same as the existing keys shared between C and M, and the LMP authentication succeeded, demonstrating their vulnerability to the link key extraction attack. Additionally, USB sniffing experiments confirmed that the tested PC systems (one with CSR harmony and QSENN CSR V4.0, and the other with Microsoft Bluetooth Driver host stack and QSENN CSR V4.0) are also vulnerable to the link key extraction attack. The complete list of tested devices vulnerable to the link key extraction attack is given in Table I, where the rightmost column indicates whether the attacker requires superuser privileges.

| Device | OS | Host Stack | Device | SU Privilege |
|--------|----|------------|--------|--------------|
| Nexus 5x | Android 8 | Bluedroid | Nexus 5x | N |
| LG V50 | Android 9 | Bluedroid | LG V50 | N |
| Galaxy S8 | Android 9 | Bluedroid | Galaxy S8 | N |
| Pixel 2 XL | Android 11 | Bluedroid | Pixel 2 XL | N |
| LG VELVET | Android 11 | Bluedroid | LG VELVET | N |
| Galaxy s21 | Android 11 | Bluedroid | Galaxy s21 | N |
| QSENN CSR V4.0 | Windows 10 | Microsoft Bluetooth Driver | QSENN CSR V4.0 | N |
| QSENN CSR V4.0 | Windows 10 | CSR harmony | QSENN CSR V4.0 | N |
| QSENN CSR V4.0 | Ubuntu 20.04 | BlueZ | QSENN CSR V4.0 | Y |

#### 2. Results for Page Blocking Attack
Our experiments with each mobile device showed that all HCI dump logs captured in M matched Figure 12b (for iPhone, we analyzed the dump log from A instead of M, as it does not provide HCI dump). This implies that the pairing was conducted between M and A (rather than C), confirming the success of our attack. All tested mobile devices are vulnerable to our page blocking attack. Table II provides detailed results showing the comparative success rates of establishing MITM connections with and without the page blocking attack.

| Device | OS | Success Rate Without Page Blocking | Success Rate With Page Blocking |
|--------|----|-----------------------------------|---------------------------------|
| iPhone Xs | iOS 14.4.2 | 52% | 100% |
| Nexus 5x | Android 8 | 52% | 100% |
| LG V50 | Android 9 | 57% | 100% |
| Galaxy S8 | Android 9 | 42% | 100% |
| Pixel 2 XL | Android 11 | 60% | 100% |
| LG VELVET | Android 11 | 60% | 100% |
| Galaxy s21 | Android 11 | 51% | 100% |

For the normal case without page blocking, we established connections for each device 100 times and calculated the success rate, observing a 42-60% success rate, indicating the establishment of MITM connections is quite random. Under our page blocking attack, where A becomes the connection initiator, we observed a 100% success rate, indicating that the page blocking attack allows the establishment of MITM connections entirely as the attacker's intention.

### Mitigations
#### A. Link Key Extraction Attack
The root cause of vulnerability to the link key extraction attack...