Fig. 11: Link keys in HCI data from USB sniff and HCI dump
(b) HCI dump for pairing under page blocking attack
Fig. 12: HCI dump logs for normal pairing and pairing under
page blocking attack
Additionally, we also examine Linux ubuntu 20.04 to im-
plement the link key extraction attack other than Windows
OS. As a result, we ﬁnd that Bluetooth bonding information
is installed in ‘/var/lib/bluetooth/[MAC Address of device]’
folder in Linux. After investigating the folder, we conﬁrm the
information ﬁle includes the link key of the corresponding
device. Moreover, it is also straightforward to implement the
link key extraction attack in Linux OS by leveraging both USB
sniff and HCI dump log, because there are USB snifﬁng solu-
tions as well as the bluez-hcidump package. However, running
USB snifﬁng and bluez-hcidump, and accessing the bonding
information ﬁle in Linux require the superuser privilege. Thus,
the practicality of link key extraction in Linux depends on the
attacker’s affordable privilege.
2) Page Blocking Attack: Unlike the link key extraction
attack, it is no longer possible to demonstrate the feasibility of
page blocking attack only by investigating the user interface
information because we cannot conﬁrm whether the subse-
quent Just Works pairing is caused by our attack, or initiated
by M by accident. Thus, we now analyze the HCI dump log
generated in our experiment.
Fig. 12a and Fig. 12b show examples of HCI dump logs
captured from M during an ordinary pairing and a pairing
under page blocking attack, respectively. During the normal
pairing (Fig. 12a), the host of M ﬁrst attempts to establish a
connection with C via HCI Create Connection, and executes
pairing by HCI Authentication Requested, which is the ﬁrst
HCI message for pairing. Then, the controller of M requests a
stored link key by delivering HCI Link Key Request event to
the host. However, as M does not have bonded link key with C
yet, the host replies HCI Link Key Request Negative Reply,
which implies the absence of the link key. On receipt of it,
the controller ﬁnally initiates a pairing procedure.
On the other hand, under the page blocking attack, there
should be a preceding connection request event on M,
HCI Connection Request, which is an upstream event from
the controller to notify the host that a page request has been
[.(cid:18)(cid:86)(cid:87)(cid:68)(cid:70)(cid:78)(cid:18)(cid:69)(cid:87)(cid:88)(cid:18)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:17)(cid:70)(cid:64)(cid:3)
(cid:35)(cid:35)(cid:3)(cid:16)(cid:20)(cid:25)(cid:24)(cid:15)(cid:25)(cid:3)(cid:14)(cid:20)(cid:25)(cid:24)(cid:15)(cid:26)(cid:3)(cid:35)(cid:35)(cid:3)(cid:89)(cid:82)(cid:76)(cid:71)(cid:3)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:66)(cid:83)(cid:85)(cid:82)(cid:70)(cid:72)(cid:86)(cid:86)(cid:66)(cid:72)(cid:89)(cid:72)(cid:81)(cid:87)(cid:3)(cid:11)(cid:273)(cid:12)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:66)(cid:72)(cid:91)(cid:87)(cid:72)(cid:81)(cid:71)(cid:72)(cid:71)(cid:66)(cid:76)(cid:81)(cid:84)(cid:88)(cid:76)(cid:85)(cid:92)(cid:66)(cid:85)(cid:72)(cid:86)(cid:88)(cid:79)(cid:87)(cid:66)(cid:72)(cid:89)(cid:87)(cid:3)(cid:11)(cid:83)(cid:12)(cid:30)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:85)(cid:72)(cid:68)(cid:78)(cid:30)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:70)(cid:68)(cid:86)(cid:72)(cid:3)(cid:43)(cid:38)(cid:44)(cid:66)(cid:38)(cid:50)(cid:49)(cid:49)(cid:40)(cid:38)(cid:55)(cid:44)(cid:50)(cid:49)(cid:66)(cid:38)(cid:50)(cid:48)(cid:51)(cid:66)(cid:40)(cid:57)(cid:55)(cid:29)(cid:3)
+(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:88)(cid:86)(cid:79)(cid:72)(cid:72)(cid:83)(cid:11)(cid:20)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:12)(cid:30)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:66)(cid:70)(cid:82)(cid:81)(cid:81)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:66)(cid:70)(cid:82)(cid:80)(cid:83)(cid:66)(cid:72)(cid:89)(cid:87)(cid:3)(cid:11)(cid:83)(cid:12)(cid:30)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:85)(cid:72)(cid:68)(cid:78)(cid:30)(cid:3)
Fig. 13: Proof of concept code for PLOC
received from A. Then, the host accepts the connection re-
quest (HCI Accept Connection Request command), thereby
a Bluetooth connection between A and M is established.
After the connection establishment, a pairing procedure is
initiated with HCI Authentication Requested command in
the same manner as the normal pairing. When it is under
page blocking attack, M should be the pairing initiator
(HCI Authentication Requested command) and the connec-
tion responder (HCI Connection Request event) simultane-
ously. Therefore, we can conﬁrm whether our attack is cor-
rectly deployed by checking if the HCI dump log is recorded
in the same ﬂow as shown in Fig. 12b during the experiment.
For the attack validation, we utilize two Nexus 5x devices
running Android 6 as A and C, and mount the attack against
diverse mobile systems M such as Nexus 5x running Android
8, LG V50 and Galaxy S8 running Android 9, Pixel 2 XL, LG
VELVET and Galaxy s21 running Android 11, and iPhone Xs
running iOS 14.4.2.
let A establish a PLOC
connection with M. To make both of them stay connected
without processing the host layer connection, we make A
postpone the handling of the HCI event sent from the con-
troller, thus A does not process the next steps for the host
layer connection. Update of Bluetooth connection state begins
when the host receives an HCI Connection Complete event
from the controller. In Nexus 5x, ‘btu hcif process event()’,
a callback function for HCI events in bluedroid, processes
HCI Connection Complete events. Thus, we implement the
PLOC condition in A by making the host postpone the
To launch the attack, we ﬁrst
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
235
OS
Android 8
Android 9
Android 9
Android 11
Android 11
Android 11
Windows 10
Windows 10
Ubuntu 20.04
Host stack
Bluedroid
Bluedroid
Bluedroid
Bluedroid
Bluedroid
Bluedroid
Microsoft
Bluetooth Driver
CSR harmony
BlueZ
Device
Nexus 5x
LG V50
Galaxy S8
Pixel 2 XL
LG VELVET
Galaxy s21
QSENN CSR V4.0
QSENN CSR V4.0
QSENN CSR V4.0
SU privilege
N
N
N
N
N
N
N
N
Y
TABLE I: List of tested devices that are vulnerable to link key
extraction attack
handling of the event in btu hcif process event().
In a page blocking attack, the PLOC state shall be held
until a pairing procedure is initiated by M theoretically. In
practice, it may require a bit complex code implementation
in the library because of timing synchronization as well as
exception handling issues. For example, the host should stop
the postponement when a pairing procedure is initiated by
M and handle other HCI commands and events that occur
during its PLOC state. It also requires the prevention of link
drop, which may be caused by connection timed-out. However,
it can be solved by exchanging some dummy data, such
as SDP query. Our experiment assumed that M initiates a
pairing procedure in 10 seconds after establishing the PLOC
connection for simplicity. Thus, we do not have to care the
aforementioned exceptions and simplify the implementation
code in the experiment. Fig. 13 shows our proof of con-
cept (PoC) implementation that makes the host stay in a
PLOC state for a ﬁxed duration (10 seconds) before calling
btu hcif connection comp evt(). After the duration, C will
exit from the PLOC state; and if M initiates a pairing as
we assumed, it carries out a pairing procedure.
With the PoC code, we evaluate our page blocking attack
following the attack procedure in Section V against the mobile
devices M, and after the pairing, we check whether the HCI
dump log recorded during the test is the same as Fig. 12b.
C. Evaluation Results
1) Results for Link Key Extraction Attack: The experiment
of HCI dump on Android devices with versions 8, 9, and
11 conﬁrms that
the extracted link keys are the same as
the existing keys shared between C and M, and the LMP
authentication succeeded, demonstrating they are all vulnera-
ble to our link key extraction attack. Additionally, according
to the experiment of USB sniff, we also conﬁrm that the
tested PC systems (one with CSR harmony and QSENN CSR
V4.0, and the other with Microsoft Bluetooth Driver host
stack and QSENN CSR V4.0), are all vulnerable to link
key extraction attack. The complete list of tested devices
vulnerable to the link extraction attack is given in Table
I, where the rightmost column means whether the attacker
requires a superuser privilege.
Device
iPhone Xs (iOS 14.4.2)
Nexus 5x (Android 8)
LG V50 (Android 9)
Galaxy S8 (Android 9)
Pixel 2 XL (Android 11)
LG VELVET (Android 11)
Galaxy s21 (Android 11)
rate without
Success
page blocking
52%
52%
57%
42%
60%
60%
51%
rate with
Success
page blocking
100%
100%
100%
100%
100%
100%
100%
TABLE II: Success rates of MITM connection establishment
2) Results for Page Blocking Attack: According to our
experiment with each mobile device, we observed that all
of the HCI dump logs captured in M are the same as
Fig. 12b (for iPhone, we analyzed dump log from A instead
of M since it does not provide HCI dump), which implies
the pairing is conducted between M and A (rather than
C). Therefore, we conﬁrm that our attack succeeded, and all
of the mobile devices we tested are vulnerable to our page
blocking attack. The detailed experiment results showing the
comparative success rates of establishing MITM connections
with/without page blocking attack are given in Table II. For the
normal case without page blocking, we establish connections
for each device 100 times, and calculate the success rate. As
a result, we observed 42∼60% of success rate, implying the
establishment of MITM connections with the target devices
is quite random. Whereas, under our page blocking attack
where A becomes a connection initiator, we observed 100%
of success rate, implying page blocking attack allows the
establishment of MITM connections entirely as the attacker’s
intention.
VII. MITIGATIONS
A. Link Key Extraction Attack
The root cause of vulnerability to the link key extraction