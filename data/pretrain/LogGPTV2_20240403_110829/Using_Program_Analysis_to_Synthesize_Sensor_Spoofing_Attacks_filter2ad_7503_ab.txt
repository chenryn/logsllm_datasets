ues (whose number is equal to the number of basic blocks
between lines 6 and 10) and thus end in a program state
that is impossible to reach in real executions.
In addition to the issue of infeasible paths, the inter-
rupt model used by FIE hinders performance due to the
interrupt-related path explosion. Consider the code snippet
in Figure 3 which has an inﬁnite loop in which the ﬁrst 1000
iteration are idle, they simply wait until the peripherals set-
tle down. With interrupts enabled, FIE will produce a new
fork at each iteration which will cause path explosion well
3
7591
2 int foo ()
3 {
4
...
// sleep until woken up by ADC
_ b i s _ S R _ r e g i s t e r ( L P M 3 _ b i t s | GIE ) ;
...
if (x >5) f () else g () ;
// sleep again
_ b i s _ S R _ r e g i s t e r ( L P M 3 _ b i t s | GIE ) ;
...
if ( val > avg )
until woken up by ADC
h ()
13
14 }
15
16 // ADC I n t e r r u p t
17 # pragma vector = A D C 1 0 _ V E C T O R
18 _ _ i n t e r r u p t void A D C 1 0 _ I S R ( void ) {
19
...
val = A D C 1 0 M E M 0 ;
values [ index ++] = val ;
avg = c o m p u t e _ a v g ( values )
...
5
6
7
8
9
10
11
12
20
21
22
23
24 }
Figure 2: If interrupts are ﬁred in every basic block, the
average will contain an incorrect value.
1 while (1)
2 {
3
4
5
6
7
8
9
10 }
if ( tick >= 1000) // Wait for s e t t l i n g down
{
a c c e l e r a t i o n = p r o c e s s _ a d c () ;
if ( a c c e l e r a t i o n == 20)
assert (0) ;
}
tick ++;
Figure 3: Wait loops create too many interrupt forks.
before the analysis of actual code starts. This means that
FIE cannot handle even some simple ﬁrmwares.
To overcome these limitations, we added a new interrupt
model in which timer-based interrupts can be ﬁred each
time the ﬁrmware goes into the low-power interrupt-enabled
mode. While this may miss some paths that would arise in
practice, it is a reasonable starting heuristic since it often
aligns directly with the developer’s intention: put the mi-
crocontroller into sleep mode until an interrupt wakes it up.
This oﬀers signiﬁcant advantages over ﬁring interrupts every
block or instruction as in [10]. Considering again the code
snippet in Figure 2, if we ﬁre a new interrupt only when the
ﬁrmware goes into sleep mode, the average value will con-
tain the correct symbolic expression. In the code snippet in
Figure 3, no unnecessary interrupts will be produced.
MSP430 allows software to enable ADC conversion by set-
ting appropriate bits in the ADC control registers. FIE’s
memory model, however, is stateless in the sense that it
does not preserve previously written values and all subse-
quent reads will return a fresh symbolic value. In our imple-
mentation, we ﬁxed this limitation so that special memory
locations and registers can store symbolic values.
Figure 4: System components
For example, the ﬁrmware code for the AllSee gesture
recognition system [18] includes a function that contains two
loops and is responsible for obtaining amplitude samples of
the ambient wireless signal; one loop iteration corresponds
to one sample. In this concrete example, the simplest ges-
ture requires at least 16 samples. If this code is analyzed
using a basic breadth-ﬁrst state selection strategy, the prob-
ability of reaching the program point responsible for recogni-
tion is 2−16. With two invocations of the function (required
for some gestures in AllSee), the probability becomes 2−32.
DrE, when used in its forward symbolic execution mode, also
does not get beyond the point where the simplest gesture is
recognized. This motivates the modular approach described
in this section.
4.1 System overview
Figure 4 shows the architecture of our system. The ﬁrmware
is compiled into LLVM bytecode. The bytecode is ana-
lyzed by the Dispatcher which ﬁrst performs some basic
static analysis: it searches for possible interprocedural paths
from the program start to the target line using the pro-
gram call graph and control ﬂow graphs of individual func-
tions (similar to the forward mode described in the previous
section). For each function from this path, the Dispatcher
starts collecting execution paths by running an instance of
Summary Executor. Once enough are collected for all func-
tions along the call path (this includes building function
summaries for all inner calls, too) the Dispatcher tries to
stitch them together and the ﬁnal candidate interprocedu-
ral paths are checked by calling Forward Executor. Both
Summary Executors and Forward Executor make use of the
MSP430 memory and interrupt models.
This strategy has several attractive features. First, ex-
ecution paths are collected on demand, starting from the
bottom-most function and going all the way up to the entry
function (including all inner function calls).
Second, when building execution paths for a function,
we propagate path constraints on its arguments and return
value from the execution paths of other functions, thus steer-
ing symbolic execution towards paths that are more likely
to result in a feasible interprocedural path to the target line.
Third, we reuse already collected execution paths.
4.2 Example
4. MODULAR DIRECTED SYMBOLIC EX-
ECUTION
Both FIE and DrE’s forward mode can be used to extract
signal patterns for moderately complicated ﬁrmware, but it
is ineﬃcient when the conditions required to reach the target
line are deeper in the call chain.
Consider a simple example in Figure 5. We set line 5 in
function printGesture() as the target line.
We start by building an interprocedural control ﬂow path
(which may turn out to be infeasible) from main() to the
target line. There is one such path that starts in main(),
then goes twice inside function getGesture(), and then into
function printGesture().
4
7601
2 int p r i n t G e s t u r e ( int g1 , int g2 )
3 {
4
if (( g1 == 1) && ( g2 == 2) )
5
assert (0) ;
...
6
7 }
8
9 int g e t G e s t u r e ()
...
r e a d _ a d c _ v a l u e s () ;
...
// c l a s s i f y gesture
...
return g ;
16
17 }
18
19 int main ()
20 {
21
int g e s t u r e 1 = g e t G e s t u r e () ;
int g e s t u r e 2 = g e t G e s t u r e () ;
if (( g e s t u r e 2 != 3) && ( g e s t u r e 1 != 4) )
p r i n t G e s t u r e ( gesture1 , g e s t u r e 2 ) ;
Figure 5: A simple example program
10 {
11
12
13
14
15
22
23
24
25
26 }
4
5
6
1 int main ()
2 {
3
int g e s t u r e 1 = ;
int g e s t u r e 2 = ;
if (( g e s t u r e 2 != 3) && ( g e s t u r e 1 != 4) )
p r i n t G e s t u r e ( gesture1 , g e s t u r e 2 ) ;
7
8 }
Figure 6: A version of main() (Figure 5) modiﬁed to replace
function calls with symbolic variables.
Next, we collect execution paths for printGesture() with
the goal of ﬁnding those that call assert(). We replace
formal arguments g1 and g2 with new symbolic values γ1
and γ2. One of the execution paths w1 with path constraints
C1 = (γ1 = 1 ∧ γ2 = 2)
goes through the assertion statement, so we save this execu-
tion path along with its constraints.
Next, we collect execution paths for main(). We are in-
terested in paths that call printGesture() and satisfy con-
ditions C1 on its arguments. Note that main() has two calls
to getGesture(). Because of this, we replace these func-
tion calls with new symbolic variables and re-write main()
as shown in Figure 6.
We proceed with collecting execution paths for main()
and ﬁnd execution paths w2 with path constraints
C2 = (Γ1 (cid:54)= 3 ∧ Γ2 (cid:54)= 4).
Our goal is to “glue” together paths w1 and w2. Therefore,
we use the following rewriting rule: (Γ1 = γ1 ∧ Γ2 = γ2)
and check (C := C1 ∧ C2) (which is satisﬁable and thus we
“glue” paths w1 and w2):
C := (Γ1 (cid:54)= 3 ∧ Γ2 (cid:54)= 4 ∧ Γ1 = 1 ∧ Γ2 = 2)
The ﬁnal step is to collect execution paths for getGes-
ture() and ﬁnd those that would not violate C. We denote
the return value of function getGesture() as r and rewrite
C using the following rules: for the ﬁrst call we use (Γ1 = r),
for the second call we use (Γ2 = r). As the result, we are
5
Algorithm 1: Collecting execution paths
1 CollectPaths(f, C);
input : f - function to execute.
input : C - set of constraints.
output: EP f - set of f ’s execution paths.
2 makeArgsSymbolic(sinit);
3 refreshGlobals(sinit);
4 EP f ← ∅;
5 S ← {sinit};
6 while S (cid:54)= ∅ do
s0 ← selectState(S);
if mergeState(s0, S) then continue;
SS ← executeInstruction(s0);
S ← S ∪ SS;
if isTarget(s0) ∨ isRet(s0) then
EP f ← EP f ∪ {path(s0)};
w = path(s0);
C(cid:48) = rewriteConstraints(C, w);
if isSolvable(C(cid:48)) then
pause execution and return EP f
end
end
if isCallIntruction(s0) then ConstructInnerCall(s0);
7
8
9
10
11
12
13
14
15
16
17
18
19
20 end
interested in execution paths that have the following con-
straints on the return value:
C1 := (r (cid:54)= 3 ∧ Γ2 (cid:54)= 4 ∧ r = 1 ∧ Γ2 = 2)
in which Γ2 is a free variable. And
C2 := (Γ1 (cid:54)= 3 ∧ r (cid:54)= 4 ∧ Γ1 = 1 ∧ r = 2)
in which Γ1 is a free variable.
Finally, we follow the execution paths that our analysis
was able to glue together. This resolves the previously un-
deﬁned calling context.
4.3 Collecting execution paths
In DrE, during the ﬁrst phase, each function along the
call chain is executed separately and in isolation. The cor-
responding pseudocode is shown in Algorithm 1. We are
interested in collecting execution paths that satisfy speciﬁc
conditions on the function’s formal arguments and return
value and that end up calling the next function in the cho-
sen call chain.
We start by constructing the initial execution state2 and
adding it to the set of active states S (lines 4–5). Because the
future context in which function f will be called is unknown,
we set function f ’s arguments to symbolic values and assign
fresh symbolic expressions to global variables (lines 2–3).
In the main loop, a state is chosen from S according to
a state selection heuristic. Line 8 checks if the state has
similar memory and constraints conﬁguration to some pre-
viously seen state.3 If a match is found, the current state is
merged with the matching state. This state merging func-
tionality allows us to eliminate redundant states, which arise
frequently in embedded ﬁrmware (e.g., due to waiting loops).
The system then symbolically executes the next instruc-
tion. If the executor encounters a conditional statement, it
queries the underlying STP solver, and if both branches are
2An execution state includes program counter, stack frames,
and global memory (heap, global variables, etc.).
3The executor keeps a list of memory conﬁgurations of all
previously seen states.
761Algorithm 2: Dispatcher main loop
1 DispatcherMainLoop(target line);
input : target line - line of code to reach.
output: O - set of constraints on the ﬁrmware input that would
drive the ﬁrmware to the target line.
2 call chain ← pick call chain();
3 candidates ← ∅;
4 repeat
5
f ← pickLastFunction(call chain);
EP f ← CollectPaths(f ,{target = target line});
foreach w ∈ EP f do
if path w does not end at the target line then
continue
end
stitchInnerCalls(w, ∅);
stitchNextInCallchain(w, ∅);
put(candidates, w);
end
foreach c ∈ candidates do
if (forward check(c)) then
O ← O ∪ {c};
print c;
end
6
7
8
9
10
11
12
13
14
15
16
17
18
19
end
20
21 until call chain switch timeout;
possible the state is forked and the newly produced states
are added to the list S of active states (lines 9–10).
If the state’s instruction is a return instruction or a call
to the next function in the call chain, the current execution
path is stored in EP f (lines 11–17). In lines 14–17, we check
if the execution path satisﬁes the conditions, in which case
the executor pauses, saves its current conﬁguration, and re-
turns the set of collected execution paths to the Dispatcher.
Special semantics for call instructions.
In order to in-
crease scalability of our system, we implemented a special
semantics for call instructions. Line 19 describes this be-
havior. Whenever the executor encounters a call to function
finner, it does not expand this call immediately.
Instead,
we create a new symbolic variable representing the result of
the call and proceed with the next instruction. As global
variables may have changed in that function call, we assign
them new fresh symbolic values (we will resolve this approx-
imation at a later stage). At the same time, we extract con-