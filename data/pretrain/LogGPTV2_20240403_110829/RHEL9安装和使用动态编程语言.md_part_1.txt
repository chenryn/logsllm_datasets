[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname} [9]{.productnumber}
:::
# []{#index.html#idm139856456035184}安装和使用动态编程语言 {.title}
## 在 Red Hat Enterprise Linux 9 中安装和使用动态编程语言的指南 {.subtitle}
::: abstract
**摘要**
本文档论述了安装和使用动态编程语言的基础知识，如 Red Hat Enterprise
Linux 9 上的 Python 和 PHP。
:::
------------------------------------------------------------------------
:::
:::
[]{#making-open-source-more-inclusive.html}
::: preface
::: titlepage
# []{#making-open-source-more-inclusive.html#making-open-source-more-inclusive}让开源更具包容性 {.title}
:::
红帽致力于替换我们的代码、文档和 Web
属性中存在问题的语言。我们从这四个术语开始：master、slave、黑名单和白名单。由于此项工作十分艰巨，这些更改将在即将推出的几个发行版本中逐步实施。详情请查看
[CTO Chris Wright
的信息](https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language){.link}。
:::
[]{#proc_providing-feedback-on-red-hat-documentation_installing-and-using-dynamic-programming-languages.html}
::: preface
::: titlepage
# []{#proc_providing-feedback-on-red-hat-documentation_installing-and-using-dynamic-programming-languages.html#proc_providing-feedback-on-red-hat-documentation_installing-and-using-dynamic-programming-languages}对红帽文档提供反馈 {.title}
:::
我们感谢您对文档提供反馈信息。请让我们了解如何改进文档。
::: itemizedlist
-   关于特定内容的简单评论：
    ::: orderedlist
    1.  请确定您使用 [*Multi-page HTML*]{.emphasis}
        格式查看文档。另外，确定 [**Feedback**]{.strong}
        按钮出现在文档页的右上方。
    2.  用鼠标指针高亮显示您想评论的文本部分。
    3.  点在高亮文本上弹出的 [**Add Feedback**]{.strong}。
    4.  按照显示的步骤操作。
    :::
:::
::: itemizedlist
-   要通过 Bugzilla 提交反馈，请创建一个新的 ticket：
    ::: orderedlist
    1.  进入
        [Bugzilla](https://bugzilla.redhat.com/enter_bug.cgi?product=Red%20Hat%20Enterprise%20Linux%209){.link}
        网站。
    2.  在 Component 中选择 [**Documentation**]{.strong}。
    3.  在 [**Description**]{.strong}
        中输入您要提供的信息。包括文档相关部分的链接。
    4.  点 [**Submit Bug**]{.strong}。
    :::
:::
:::
[]{#assembly_introduction-to-python_installing-and-using-dynamic-programming-languages.html}
::: chapter
::: titlepage
# []{#assembly_introduction-to-python_installing-and-using-dynamic-programming-languages.html#assembly_introduction-to-python_installing-and-using-dynamic-programming-languages}第 1 章 Python 简介 {.title}
:::
Python
是一种高级编程语言，支持多种编程模式，如面向对象、所需功能以及程序式范式。Python
具有动态语义，可用于通用编程。
使用 Red Hat Enterprise Linux
时，系统中安装的许多软件包（如提供系统工具、数据分析工具或 Web
应用程序的软件包）会使用 Python 编写。要使用这些软件包，您必须安装
`python*`{.literal} 软件包。
::: section
::: titlepage
# []{#assembly_introduction-to-python_installing-and-using-dynamic-programming-languages.html#con_python-versions_assembly_introduction-to-python}Python 版本 {.title}
:::
[**Python 3.9**]{.strong} 是 RHEL 9 中的默认 [**Python**]{.strong}
实现。[**Python 3.9**]{.strong} 在 BaseOS 存储库中的非模块化
`python3`{.literal} RPM 软件包中分发，通常默认安装。[**Python
3.9**]{.strong} 将支持 RHEL 9 的整个生命周期。
未来，其它版本的 [**Python 3**]{.strong} 将作为 RPM
软件包发布，且带有较短的生命周期（通过 AppStream
软件仓库）。这些版本将与 Python 3.9 并行安装。
[**Python 2**]{.strong} 不随 RHEL 9 提供。
:::
::: section
::: titlepage
# []{#assembly_introduction-to-python_installing-and-using-dynamic-programming-languages.html#con_major-differences-in-the-python-ecosystem-since-rhel8_installing-and-using-dynamic-programming-languages}自 RHEL 8 开始的 Python 生态系统的主要区别 {.title}
:::
本节总结了 RHEL 9 中 Python 生态系统与 RHEL 8 相比的显著变化。
::: title
**unversioned `python`{.literal} 命令**
:::
`python`{.literal} 命令的未指定版本形式(`/usr/bin/python`{.literal})在
`python-unversioned-command`{.literal}
软件包中提供。在某些系统中，默认情况下不安装此软件包。要手动安装
`python`{.literal} 命令的未指定版本形式，请使用
`dnf install /usr/bin/python`{.literal} 命令。
在 RHEL 9 中，`python`{.literal} 命令的未指定版本形式指向默认的
[**Python 3.9**]{.strong} 版本，它相当于 `python3`{.literal} 和
`python3.9`{.literal} 命令。
`python`{.literal} 命令用于交互式会话。在生产环境中，红帽建议明确使用
`python3`{.literal} 或 `python3.9`{.literal}。
您可以使用 `dnf remove /usr/bin/python`{.literal} 命令卸载未指定版本的
`python`{.literal} 命令。
如果需要不同的 python 命令，您可以在 `/usr/local/bin`{.literal} 或
`~/.local/bin`{.literal} 中创建自定义符号链接。
还有其他未指定版本的命令，如
`python3- pip 软件包中的 /usr/bin/`{.literal} pip``{=html}。在
RHEL 9 中，所有未指定版本的命令都指向默认的 [**Python 3.9**]{.strong}
版本。
::: title
**特定于架构的 Python `wheels`{.literal}**
:::
在 RHEL 9 上 构建的特定于体系结构的 Python `wheel`{.literal}
新建了上游架构命名，允许客户在 RHEL 9 上构建其 Python `wheel`{.literal}
并在非 RHEL 系统中安装它们。在以前的 RHEL 版本构建的 Python
`wheel`{.literal} 是向前兼容的，可以在 RHEL 9
上安装。请注意，这仅影响包含 Python 扩展的
`wheel`{.literal}，这些扩展针对每个架构构建，而不影响包含纯 Python
代码的 Python `wheels`{.literal}，这不是特定于架构的 Python wheel。
:::
:::
[]{#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages.html}
::: chapter
::: titlepage
# []{#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages.html#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages}第 2 章 安装和使用 Python {.title}
:::
在 RHEL 9 中，[**Python 3.9**]{.strong} 是默认的 [**Python**]{.strong}
实施。unversioned `python`{.literal} 命令指向默认的 [**Python
3.9**]{.strong} 版本。
::: section
::: titlepage
# []{#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages.html#proc_installing-python-3_assembly_installing-and-using-python}安装 Python 3 {.title}
:::
默认 Python 实现通常会默认安装。要手动安装它，请使用以下步骤。
::: itemizedlist
**步骤**
-   要安装 Python，请使用：
    ``` literallayout
    # dnf install python3
    ```
:::
::: itemizedlist
**验证步骤**
-   要验证系统中安装的 Python 版本，请使用以下命令：
    ``` literallayout
    $ python3 --version
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages.html#proc_installing-additional-python-3-packages_assembly_installing-and-using-python}安装其他 Python 3 软件包 {.title}
:::
前缀为 `python3`{.literal} 的软件包包含默认 [**Python 3.9**]{.strong}
版本的模块。
::: itemizedlist
**步骤**
-   要为 Python 安装 `Requests`{.literal} 模块，请使用：
    ``` literallayout
    # dnf install python3-requests
    ```
-   要从 Python 安装 `pip`{.literal} 软件包安装程序，请使用：
    ``` literallayout
    # dnf install python3-pip
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages.html#proc_installing-additional-python-3-tools-for-developers_assembly_installing-and-using-python}为开发人员安装其他 Python 3 工具 {.title}
:::
其他面向开发人员的 Python 工具通过 CodeReady Linux Builder 存储库发布。
此存储库包含 `python3-pytest`{.literal}、`python3-Cython`{.literal}
软件包等内容。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
红帽不支持 CodeReady Linux Builder 存储库及其内容。
:::
要从存储库中安装软件包，请使用以下步骤。
::: orderedlist
**步骤**
1.  启用 CodeReady Linux Builder 存储库：
    ``` literallayout
    # subscription-manager repos --enable codeready-builder-for-rhel-9-x86_64-rpms
    ```
2.  安装 `python3-pytest`{.literal} 软件包：
    ``` literallayout
    # dnf install python3-pytest
    ```
:::
::: itemizedlist
**其他资源**
-   [如何在 CodeReady Linux Builder
    中启用和使用内容](https://access.redhat.com/articles/4348511){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages.html#proc_using-python_assembly_installing-and-using-python}使用 Python {.title}
:::
以下流程包含运行 Python 解释器或 Python 相关命令的示例。
::: itemizedlist
**先决条件**
-   确保已安装 Python。
:::
::: itemizedlist
**步骤**
-   要运行 Python 解释器或相关命令，请使用：
    ``` literallayout
    $ python3
    $ python3 -m pip --help
    $ python3 -m pip install package
    ```
:::
:::
:::
[]{#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html}
::: chapter
::: titlepage
# []{#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages}第 3 章 打包 Python 3 RPM {.title}