System.out.printf("[%d] => [%s]%n",
matcher.groupCount(), matcher.group(1));
}
/* Part 2 */
// now use similar pattern but use a named group and reset the
// matcher
matcher.usePattern(Pattern.compile("[^<>]*)>"));
matcher.reset();
while (matcher.find()) {
System.out.printf("[%d] => [%s]%n",
matcher.groupCount(), matcher.group("name"));
}
}
}
[ 85 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
This will output the following:
[1] => [value1]
[1] => [value2]
[1] => [value3]
[1] => [value1]
[1] => [value2]
[1] => [value3]
As you can see in the preceding code, we are extracting all the text that is inside the angular
brackets using a negated character class, [^<>]*, inside a capturing group.
In Part 1 of the code, we use regular captured group and matcher.group(1) to extract
and print the subsequence captured in group number 1. The numbering of the groups starts
each time we execute find() and the previous captures are wiped off. Even though it is in
a loop, it is always group(1) in the example because for each iteration, there can be more
than one group.
In Part 2, we use a named capturing group and an overloaded method call to
matcher.group("name") to extract the subsequence captured by the given group name.
The appendReplacement(StringBuffer sb, String
replacement) method
This method is intended to be used in a loop together with the appendTail and find
methods. Once we get a match using the find() method, we can call the
appendReplacement() method to operate on each match and replace the matched text.
Finally, it appends the replaced text to StringBuffer. It reads characters from the input
sequence, starting at the append position, and appends them to the given string buffer. It
stops after reading the last character preceding the previous match, that is, the character at
index start() - 1.
The replacement string may contain references to subsequences captured during the
previous match. All the rules of replacement reference we String.replaceAll apply to
this method also.
[ 86 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
The appendReplacement() method keeps track of what has been copied into
StringBuffer, so we can keep searching for matches using find() in a loop, until no
more matches are found in the input text. There will be an example following the next
section.
Java 9 has another overloaded signature of this method to start accepting
StringBuilder instead of StringBuffer as the first parameter.
The appendTail(StringBuffer sb) method
This method reads characters from the input sequence, starting at the append position, and
appends them to the given string buffer. It is intended to be invoked after one or more
invocations of the appendReplacement method in order to copy the remainder of the input
sequence.
Just like in the case of the appendReplacement() method, there is also an
overloaded version of the appendTail() method that accepts
StringBuilder, which is not synchronized, instead of StringBuffer,
which is synchronized.
Example of the appendReplacement and
appendTail methods
Let's look at a complete program to the understand use of these methods.
Consider the following input:
 n1=v1 n2=v2 abc=123  v=pq
We need to write code to swap each name-value pair enclosed in angular brackets, ,
while leaving the name-value pairs outside the angular brackets unchanged. After running
our code, it should produce the following output:
 n1=v1 n2=v2 abc=123  v=pq
[ 87 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
To solve this problem, we have to first find each match enclosed in angular brackets using
the find method in a loop. Inside the loop, we will have to replace each name-value pair
using the appendReplacement method. Finally, outside the loop, we will use the
appendTail method to append the remaining characters after our last match.
Here is the full code:
package example.regex;
import java.util.regex.*;
class MatcherAppendExample
{
public static void main (String[] args)
{
final String input = " n1=v1 n2=v2 abc=
123  v=pq";
// pattern1 to find all matches between 
final Pattern pattern = Pattern.compile("]+>");
// pattern1 to find each name=value pair
final Pattern pairPattern = Pattern.compile("(\\w+)=(\\w+)");
Matcher enclosedPairs = pattern.matcher(input);
StringBuilder sbuf = new StringBuilder();
// call find in a loop and call appendReplacement for each match
while (enclosedPairs.find())
{
Matcher pairMatcher = pairPattern.matcher(enclosedPairs.group());
// replace name=value with value=name in each match
enclosedPairs.appendReplacement(sbuf,
pairMatcher.replaceAll("$2=$1"));
}
// appendTail to append remaining character to buffer
enclosedPairs.appendTail(sbuf);
System.out.println(sbuf);
}
}
[ 88 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
Upon compiling and running, the preceding code will produce the following output:
 n1=v1 n2=v2 abc=123  v=pq
As you can see, the final output has all the name=value pairs swapped inside the angular
brackets.
Summary
In this chapter, you learned about the most important regular expression handling Java
classes. The Matcher and Pattern classes are heavy and complex tools that can be used to
get really far when it comes to string manipulation. We have seen an example of a
compound task, transforming name-value pairs inside a string, enclosed between angular
brackets. If you imagine how hard it would have been without regular expressions and
these classes, then you realize the power you now have in your hand after this chapter; it is
almost wizard-level.
In the next chapter, we will move on to advanced topics of regular expressions, such as
zero-width assertions, using the lookahead and lookbehind assertions, atomic groups,
and so on.
[ 89 ]
6
Exploring Zero-Width
Assertions, Lookarounds, and
Atomic Groups
You will learn about zero-width assertions in Java regular expressions. We will cover
various zero-width assertions and their usage patterns. We will then move on to learn the
important topic of lookahead and lookbehind assertions in Java regular expressions and
how to use them to solve some important problems. We will also discuss the use of atomic
groups in Java regular expressions.
We will cover the following topics in this chapter:
Zero-width assertions
Previous match boundary
Atomic groups
Lookahead assertions: positive and negative
Lookbehind assertions: positive and negative
Capturing text from overlapping matches
Capturing groups inside lookahead and lookbehind groups
Lookbehind limitations in Java regular expressions
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
Zero-width assertions
Zero-width or zero-length assertion in regular expressions means that there is a zero-length
match that does not change the current position of the pointer in the input string. These
assertions do not consume characters in the string but only assert whether a match is
possible or not, giving us a binary true or false match result. Although many zero-width
assertions are denoted inside parentheses, like groups, we will soon see that they do not
capture any text. Zero-width assertions have no real meaning in back-references or in
replacements.
We have already discussed a few zero-width assertions in the previous
chapters, such as anchors and boundary assertions.
The Java regular expression engine allows many predefined zero-width assertions,
including the ones we have discussed already, such as start, end anchors, and word
boundaries.
Predefined zero-width assertions
Zero-width Description
Assertion
\b Asserts a word boundary
\B Asserts anywhere except at a word boundary
^ Asserts position only at the beginning of a line
$ Asserts position only at the end of a line
\A Asserts position only at the beginning of a string
\z Asserts position only at the end of a string
\Z Asserts position only at the end of a string or before the line break at
the end of a string (if present)
\G Asserts position at the end of the previous match or at the start of the
string for the very first match
[ 91 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
Regex defined zero-width assertions
Regex defined zero-width assertions use ( and ) and there is a ? after the opening (. There
are two assertions: positive, denoted by the = character, and negative, denoted by the !
character. If the assertion is backward-looking then the ? character is followed by a regex)
Here, the regex may contain alternative patterns. On the other hand, a non-atomic group
will allow backtracking; it will try to find the first match and then if the matching ahead
fails, it will backtrack and try to find the next match in alternation, until a match for the
entire expression is found or all the possibilities are exhausted.
To understand it better, let's take an example of a regular expression using a non-atomic
group:
^foo(d|die|lish)$
The input string here is foodie.
It will match the starting pattern foo and then the first alternative d. It fails at this time
because the end anchor, $, requires that we must be at the end of the input string, but we
still have two characters, i and e, to be matched. Then, the engine attempts to match the
second alternative die. This match operation succeeds, as the $ anchor asserts true since the
input ends there and stops matching further with a successful match returned.
Even if we use a non-capturing group instead of a capturing group here to
make it ^foo(?:d|die|lish)$, it will have the same effect while
matching.
Now, take an example of the same regular expression using an atomic group:
^foo(?>d|die|lish)$
Note the use of ?> after ( to make it an atomic non-capturing group.
Let's see what happens when we apply the preceding regex against the same input string,
that is, foodie.
[ 95 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
It will match the starting pattern, foo, and then its first alternative, d. It fails because the $
anchor asserts false since the input does not end at food. However, because of the use of the
atomic group, the regex engine gives up immediately and doesn't backtrack. Since the regex
engine throws away all the alternative positions remembered inside the atomic group, it
does not attempt to match the second alternative die, which would have been a successful
match for a non-atomic group. Finally, this match operation fails with no match.
You need to remember a simple but important fact that the alternation tries its alternatives
from left to right and always attempts to complete the match using the leftmost alternative.
Therefore, whenever listing all the options in an alternation, it is good practice to place the
longest matches first and then use the other alternatives to place shorter matches.
Using this principle, we can make some small changes to our atomic group to make it work.
Here is the working regex:
^foo(?>lish|die|d)$
We have the same input string, foodie.
Note that we have the same alternatives in this atomic group but with a different order.
Since d is a prefix of die, we are placing the die alternative on the left-hand side of d so
that the regex engine can first attempt to match foodie before attempting food.
Here is the full code listing running these examples:
package example.regex;
class AtomicGroupExample
{
public static void main (String[] args)
{
final String input = "foodie";
// regex with non-atomic group
final String nonAtomicRegex = "foo(d|die|lish)";
// regex with an atomic group
final String atomicRegex = "foo(?>d|die|lish)";
// regex with an alternate atomic group with correct order
final String atomicRegexImproved = "foo(?>lish|die|d)";
// now execute all 3 regex against same input
System.out.printf("%s: %s%n",
nonAtomicRegex, input.matches(nonAtomicRegex));
System.out.printf("%s: %s%n",
atomicRegex, input.matches(atomicRegex));
[ 96 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
System.out.printf("%s: %s%n",
atomicRegexImproved , input.matches(atomicRegexImproved));
}
}
After compiling and running the code, it will generate the following output:
foo(?:d|die|lish): true
foo(?>d|die|lish): false
foo(?>lish|die|d): true
Since the atomic group prevents the regex engine from backtracking by