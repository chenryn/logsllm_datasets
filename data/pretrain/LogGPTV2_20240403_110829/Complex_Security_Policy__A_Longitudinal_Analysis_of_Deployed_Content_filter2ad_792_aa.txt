# Title: Complex Security Policy? A Longitudinal Analysis of Deployed Content Security Policies

## Authors
- Sebastian Roth<sup>∗</sup>
- Timothy Barron<sup>†</sup>
- Stefano Calzavara<sup>‡</sup>
- Nick Nikiforakis<sup>†</sup>
- Ben Stock<sup>∗</sup>

<sup>∗</sup>CISPA Helmholtz Center for Information Security: {sebastian.roth, stock}@cispa.saarland  
<sup>†</sup>Stony Brook University: {tbarron, nick}@cs.stonybrook.edu  
<sup>‡</sup>Università Ca’ Foscari Venezia: PI:EMAIL

## Abstract
The Content Security Policy (CSP) mechanism was introduced in 2010 as a mitigation against script injection attacks. In this paper, we leverage the unique vantage point of the Internet Archive to conduct a historical and longitudinal analysis of CSP deployment across 10,000 highly ranked domains from 2012 to 2018. Our study documents the long-term challenges faced by site operators in rolling out CSP for content restriction and highlights that even seemingly secure whitelists can be bypassed through expired or typo domains. Additionally, we examine the use of CSP for other security scenarios, such as TLS enforcement and framing control. We find that while CSP can be easily deployed for these purposes, they lack widespread adoption. Specifically, the underspecified and inconsistently implemented X-Frame-Options header is increasingly used on the Web, despite CSP's well-specified and secure alternative. To understand the reasons behind this, we conducted a notification campaign and subsequent survey, concluding that operators often find CSP too complex and are unaware of its easy-to-deploy components. This complexity gives CSP a bad reputation, leading to underutilization of its potential to secure sites against non-original attack vectors.

## 1. Introduction
Modern web applications face a myriad of security threats, prompting browser vendors to support various opt-in security mechanisms. These mechanisms aim to protect the confidentiality of cookies, prevent malicious framing, and safeguard against SSL stripping attacks. The Content Security Policy (CSP), introduced in 2010, grants web developers more control over the content loaded by their sites. Unlike other security mechanisms with limited configuration options, CSP allows for the creation of complex, whitelisting-based policies to specify trusted sources for various types of content, including JavaScript, images, plugins, and fonts.

While the (in)effectiveness of CSP has been debated in several research papers, it remains under active development and is increasingly adopted by more websites. However, most studies have focused on CSP as a means to restrict content, with little attention given to its newer features, such as TLS enforcement and framing control. To address this gap, our study leverages the Internet Archive to analyze the evolution of CSP deployment over time, providing a comprehensive understanding of how and why developers use CSP.

## 2. Background on CSP
### 2.1. Overview
Content Security Policy (CSP) is a browser-enforced security mechanism first proposed in 2010 by Stamm et al. [40]. Its primary purpose is to mitigate Cross-Site Scripting (XSS) and other content injection vulnerabilities. Over the years, CSP has evolved to support various use cases, including content restriction, TLS enforcement, and framing control.

### 2.2. CSP for Content Restriction
CSP provides directives to bind content types to sets of source expressions, which are regular-expression-like constructs representing the web origins from which resources of a given type may be included. For example, a policy might whitelist scripts from the origin itself and images from a specific domain. If a policy lacks a directive for a specific content type and a default-src directive, content of that type can be loaded from anywhere.

### 2.3. CSP for TLS Enforcement
CSP can also enforce the use of HTTPS by whitelisting only HTTPS resources. It includes directives like block-all-mixed-content and upgrade-insecure-requests to manage mixed content and facilitate the transition from HTTP to HTTPS.

### 2.4. CSP for Framing Control
CSP introduced the frame-ancestors directive to provide protection against framing-based attacks, such as click-jacking. This directive replaces the traditional X-Frame-Options header with a more flexible and secure mechanism, allowing framing from a list of specified web origins.

## 3. Analysis Methodology
### 3.1. Dataset Construction
To analyze the deployment and usage of CSP from 2012 to 2018, we used the Internet Archive (IA). We constructed a dataset of 10,000 popular sites by extracting the top 50,000 sites from Alexa lists collected over time. We then queried the IA for daily snapshots of these sites, following HTTP redirects to reach the final landing pages. We collected all variants of CSP headers and other relevant security headers, ensuring a balanced dataset for our analysis.

## 4. Evolution of CSP and Use Cases
Our longitudinal analysis reveals that CSP's primary use case is gradually shifting away from content restriction to other security goals. We document the increase in adoption of TLS enforcement and framing control, and highlight the unexpected interactions between CSP and DNS, where many sites whitelisted domains with expired, typos, or private IPs.

## 5. Challenges in CSP Deployment
We discuss the long-term struggles site operators face in deploying CSP, including the complexity of maintaining whitelists and the perceived difficulty of implementing CSP. Our findings suggest that the complexity of CSP gives it a bad reputation, leading to underutilization of its potential.

## 6. Insights and Recommendations
Based on our analysis, we propose three actionable steps to improve the adoption of CSP:
1. Simplify the configuration process.
2. Provide better documentation and support for easy-to-deploy components.
3. Conduct outreach and education campaigns to raise awareness about the benefits of CSP.

## 7. Conclusion
Our study provides a comprehensive analysis of CSP deployment over time, highlighting the challenges and opportunities for improving its adoption. By addressing the complexity and raising awareness, we can help site operators fully leverage CSP to enhance the security of their web applications.

---

This revised version aims to make the text more clear, coherent, and professional, while maintaining the original content and structure.