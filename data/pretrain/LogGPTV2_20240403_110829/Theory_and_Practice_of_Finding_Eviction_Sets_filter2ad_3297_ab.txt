%!

	

Fig. 2: Page walk on a 64-bit system with four levels of
page tables: PageMap Level 4, Page Directory Pointer, Page
Directory, and Page Table for 4KB pages, respectively. 2MB
huge pages can be implemented by using a PD Entry directly
as PT Entry. CPU’s Control Register 3 (CR3) points to the
PML4 of the running process.
store up to 512 entries (of 8 bytes each). To avoid performing
a page walk for each memory access, each CPU core has a
translation lookaside buffer (TLB) that stores the most recent
translations. A page walk only occurs after a TLB miss.
III. EVICTION SETS
In this section we give the ﬁrst formalization of eviction
sets, and present
tests that enable determining whether a
given set of addresses is an eviction set. We then express the
probability that a set of random addresses forms an eviction
set as a function of its size. The development of this section
forms the basis for the algorithms we develop, and for their
evaluation.
A. Deﬁning Eviction Sets
We say that two virtual addresses x and y are congruent,
denoted by x (cid:2) y, if they map to the same cache set. This is
the case if and only if the set index bits set(·) and slice bits
slice(·) of their respective physical addresses pt(x) and pt(y)
coincide. That is, x (cid:2) y if and only if:
set(pt(x)) = set(pt(y)) ∧ slice(pt(x)) = slice(pt(y))
Congruence is an equivalence relation. The equivalence class
[x] of x w.r.t. (cid:2) is the set of virtual addresses that maps to
the same cache set as x. We say that addresses are partially
congruent if they satisfy the ﬁrst term of Equation (1), i.e.,
they coincide on the set index bits but not necessarily on the
slice bits.
(1)
We now give deﬁnitions of eviction sets, where we dis-
tinguish between two goals: In the ﬁrst, we seek to evict a
speciﬁc address from the cache. This is relevant, for example,
to perform precise ﬂushing in rowhammer attacks. In the
second, we seek to evict the content of an arbitrary cache
set. This is relevant, for example, for high bandwidth covert
channels, where one seeks to control a large number of cache
sets, but does not care about which ones.
Deﬁnition 1. We say that a set of virtual addresses S is
• an eviction set for x if x (cid:4)∈ S and at least a addresses in
S map to the same cache set as x:
|[x] ∩ S| ≥ a
• an eviction set (for an arbitrary address) if there exists
x ∈ S such that S \ {x} is an eviction set for x:
∃x : |[x] ∩ S| ≥ a + 1
Implementing Virtual Address Translation: Operating
systems keep track of the virtual-to-physical mapping using
a radix tree structure called page table (PT) that is capable of
storing the required information efﬁciently. Whenever a virtual
address is accessed, the MMU traverses the PT until it ﬁnds the
corresponding physical address. This process, also known as a
page walk, is illustrated in Figure 2. The bits of the VPN are
divided into 9-bit indexes for each level of the PT, which can
1See Appendix A for a discussion of the availability of huge pages on
different operation systems.
The intuition behind Deﬁnition 1 is that sequentially access-
ing all elements of an eviction set for x will ensure that x is
not cached afterwards. Likewise, sequentially accessing a + 1
congruent elements will guarantee that at least one of them is
being evicted.
For this intuition to hold, the cache replacement policy
needs to satisfy a condition, namely that a sequence of
a misses to a cache set evicts all previous content. This
condition is satisﬁed, for example, by all permutation-based
policies [12], which includes LRU, FIFO, and PLRU. How-
ever, the condition is only partially satisﬁed by modern (i.e.
(cid:21)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:36 UTC from IEEE Xplore.  Restrictions apply. 

   

     



Test 1: Eviction test for a speciﬁc address av: (1) Access av.
(2) Access S = {a0, . . . , an−1}. (3) Access av. If the time for
(3) is larger than a threshold, then S is an eviction set for av.
   
Test 2: Eviction test for an arbitrary address: (1) Access S =
{a0, . . . , an−1}. (2) Access S again. If the overall time for (2)
is above a threshold, S is an eviction set.
post Sandy Bridge) Intel CPUs. See Section VI for a more
detailed discussion.
B. Testing Eviction Sets
Identifying eviction sets based on Deﬁnition 1 involves
checking whether (1) holds. This requires access to bits of the
physical addresses and cannot be performed by user programs.
In this section we present tests that rely on a timing side-
channel to determine whether a set of virtual addresses is an
eviction set.
• Test 1 from [4], [5] enables user programs to check
whether S is an eviction set for a speciﬁc virtual address
av. The test relies on the assumption that a program can
determine whether av is cached or not. In practice, this is
possible whenever a program has access to a clock that enables
it to distinguish between a cache hit or a miss.
Test 1 can also be used as a basis for testing whether a set S is
an eviction set for an arbitrary address, by running TEST(S \
{ai}, ai), for all ai ∈ S, and reporting any positive outcome.
However, the number of memory accesses required for this is
quadratic in the size of S.
• Test 2 is a more efﬁcient solution that has been informally
discussed in [5]. The idea is to iterate over all the elements of
S twice, and measure the overall time of the second iteration.
The ﬁrst iteration ensures that all elements are cached. If the
time for the second iteration is above a certain threshold, one
of the elements has been evicted from the cache, showing
that S is an eviction set. The downside of Test 2 is that it
is susceptible to noise, in the sense that any delay introduced
during the second iteration will result in a positive answer.
• We propose Test 3 as a variant of Test 2, drawing
inspiration from Horn’s proof-of-concept implementation of
Spectre [13]. By measuring the individual time of each access
instead of the overall access time one can (1) reduce the time
window in which spurious events can pollute the measure-
ments, and (2) count the exact number of cache misses in the
second iteration. While this improves robustness to noise, it
also comes with a cost in terms of the number of executed
instructions.
C. The Distribution of Eviction Sets
In this section we analyze the distribution of eviction sets.
More speciﬁcally, we compute the probability that a suitably
(cid:21)(cid:19)
Test 3: Robust eviction test for an arbitrary address: (1) Access
S = {a0, . . . , an−1}. (2) Access S again, measuring access
time of each element. If the access times of more than a
elements in (2) is above a threshold, S is an eviction set.
chosen set of random virtual addresses forms an eviction set,
for different degrees of adversary control.
Choosing Candidate Sets: For explaining what “suitably
chosen” means, we need to distinguish between the γ set index
bits of the physical addresses that can be controlled from user
space, and the c− γ bits that cannot. The value of γ depends,
for example, on whether we are considering huge or small
pages.
Controlling set index bits from user space is possible be-
cause the virtual-to-physical translation pt acts as the identity
on the page offset, see Section II-B. When trying to ﬁnd
a minimal eviction set, one only needs to consider virtual
addresses that coincide on those γ bits.
The challenge is to ﬁnd collisions on the c − γ set index
bits that cannot be controlled from user space (the page color
bits in Figure 1), as well as on the unknown s slice bits. In
this section, we assume that the virtual-to-physical translation
pt acts as a random function on those bits. This assumption
corresponds to the worst case from an adversary’s point of
view; in reality, more detailed knowledge about the translation
can reduce the effort for ﬁnding eviction sets [14].
Whenever we speak about “choosing a random set of virtual
addresses” of a given size in this paper, we hence refer to
choosing random virtual addresses that coincide on all γ set
index bits under control. We now determine the probability of
such a set to be an eviction set.
Probability of Colliding Virtual Addresses: We ﬁrst com-
pute the probability that two virtual addresses y and x that
coincide on the γ user-controlled set index bits are actually
congruent. We call this event a collision and denote it by C.
As pt acts as a random function on the remaining c − γ set
index bits and s slice bits, we have:
P (C) = 2γ−c−s
The following example illustrates how removing adversary
control increases the difﬁculty of ﬁnding collisions on com-
mon cache conﬁgurations.
Example 1. Consider the cache from Figure 1 with 8 slices
(i.e. s = 3) of 1024 cache sets each (i.e. c = 10).
−3 is given by the number of slices.
• With huge pages (i.e. p = 21), the attacker controls all
of the set index bits, i.e. γ = c, hence the probability of a
collision P (C) = 2
• With pages of 4KB (i.e. p = 12), the number of bits under
control is γ = p − (cid:2) = 6, hence the probability of ﬁnding a
collision is P (C) = 26−10−3 = 2
• The limit case (i.e. p = (cid:2) = 6) corresponds to an adver-
sary that has no control whatsoever over the mapping of virtual
−7.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:36 UTC from IEEE Xplore.  Restrictions apply. 
addresses to set index bits and slice bits – besides the fact that
a virtual address always maps to the same physical address.
This case corresponds to adding a permutation layer to all
adversary-controlled bits (see, e.g. [7]) and is a candidate for
a countermeasure that makes ﬁnding eviction sets intractable.
For this case we obtain P (C) = 2
−10−3 = 2
−13.
Probability of a Set to be an Eviction Set for x: We analyze
the probability of a set of virtual addresses S to be an eviction
set for a given address x. This probability can be expressed
in terms of a binomially distributed random variable X ∼
B(N, p) with parameters N = |S| and p = P (C). With such
an X, the probability of ﬁnding k collisions, i.e., |S ∩ [x]| = k,
is given by:
P (X = k) =
pk(1 − p)N−k
(cid:2)
(cid:3)
N
k
According to Deﬁnition 1, S is an eviction set if it contains
at least a addresses that are congruent with x, see (1). The
probability of this happening is given by:
P (|S ∩ [x]| ≥ a) = 1 − P (X  a) = 1 − P (N1 ≤ a, ..., NB ≤ a)
The right-hand side is a cumulative multinomial distribution,
whose exact combinatorial analysis is expensive for large
values of N and becomes unpractical for our purpose. Instead,
we rely on a well-known approximation based on Poisson
distributions [15] for calculating the probabilities.
Figure 3 depicts the distribution of sets to be an eviction
set for an arbitrary address, based on the cache from Figure 1.
We observe that the probability of the multinomial grows faster
with the set size than the binomial distribution. This shows that
a set is more likely an eviction set for an arbitrary address than
it is for a speciﬁc address.
1
0.8
0.6
0.4
0.2
0
0
1,000
2,000
Set Size
3,000
4,000
Fig. 3: Probability of random sets to be eviction sets as a
function of their size, based on our theoretical models. We
−7 to represent an attacker with 4KB pages
use P (C) = 2
in the machine from Figure 1. The blue-circle line shows the
multinomial model for an “arbitrary” eviction set. The red-
cross line shows the binomial model for an “speciﬁc” eviction
set.
Cost of Finding Eviction Sets: We conclude this section
by computing the cost (in terms of the expected number
of memory accesses required) of ﬁnding an eviction set of
size N by repeatedly and independently selecting and testing
candidate sets.
To this end, we model the repeated independent choice of
eviction sets as a geometric distribution over the probability
p(N ) that a candidate set of size N is an eviction set. The
expectation 1/p(N ) of this distribution captures the expected
number of candidate sets that must be tested until we ﬁnd an
eviction set. Assuming that a test of a set of size N requires
O(N ) memory accesses, as in Section III-B, this yields an
overall cost in terms of memory accesses for ﬁnding an initial
eviction set of O(N/p(N )).
Fig. 4: Expected number of memory accesses for ﬁnding an
eviction set as a function of its size. The dashed blue line
−3, an attacker with huge pages (i.e.
represents P (C) = 2
controls all γ = 10 set index bits). The plain orange line
−7, an attacker with 4KB pages (i.e.
represents P (C) = 2
controls γ = 6). The dotted green line represents P (C) =
−13, an attacker w/o any control over the set index bits (i.e.
2
γ = 0).
Figure 4 depicts the cost function N/p(N ) for the adver-
saries from Example 1) for ﬁnding eviction sets for a speciﬁc
address, and highlights the most favorable sizes for ﬁnding
eviction sets. Since probability grows with set size, ﬁnding an
eviction set of small size requires, in expectation, large number
of trials. Once the probability stabilizes (i.e. the set is large
enough), we start seeing the linear cost of the test.
(cid:21)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:36 UTC from IEEE Xplore.  Restrictions apply. 
IV. ALGORITHMS FOR COMPUTING MINIMAL EVICTION
SETS
The probability that a set of virtual addresses forms an
eviction set depends on its size, on the cache settings (e.g.,
associativity and number of cache sets), and on the amount
of control an adversary has over the physical addresses. In
particular, a small set of random virtual addresses is unlikely
to be an eviction set. This motivates the two-step approach for
ﬁnding minimal eviction sets in which one (1) ﬁrst identiﬁes a
large eviction set, and (2) then reduces this set to its minimal
core.
Previous proposals in the literature rely on this two-step
approach. In this section we ﬁrst present the baseline reduction
from the literature, which requires O(N 2) memory accesses.
We then show that it is possible to perform the reduction
using only O(N ) memory accesses, which enables dealing