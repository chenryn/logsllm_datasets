title:SYMBEXCEL: Automated Analysis and Understanding of Malicious Excel
4.0 Macros
author:Nicola Ruaro and
Fabio Pagani and
Stefano Ortolani and
Christopher Kruegel and
Giovanni Vigna
2022 IEEE Symposium on Security and Privacy (SP)
SYMBEXCEL: Automated Analysis and Understanding of Malicious Excel 4.0 Macros
Nicola Ruaro†, Fabio Pagani†, Stefano Ortolani‡, Christopher Kruegel†, Giovanni Vigna†
† University of California, Santa Barbara, ‡ VMware
{ruaronicola, pagani, chris, vigna}@ucsb.edu, PI:EMAIL
5
6
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Abstract—Malicious software (malware) poses a significant threat
to the security of our networks and users. In the ever-evolving mal-
ware landscape, Excel 4.0 Office macros (XL4) have recently become
an important attack vector. These macros are often hidden within ap-
parently legitimate documents and under several layers of obfuscation.
As such, they are difficult to analyze using static analysis techniques.
Moreover, the analysis in a dynamic analysis environment (a sandbox)
is challenging because the macros execute correctly only under specific
environmental conditions that are not always easy to create.
This paper presents SYMBEXCEL, a novel solution that leverages
symbolic execution to deobfuscate and analyze Excel 4.0 macros
automatically. Our approach proceeds in three stages: (1) The mali-
cious document is parsed and loaded in memory; (2) Our symbolic
execution engine executes the XL4 formulas; and (3) Our Engine
concretizes any symbolic values encountered during the symbolic
exploration, therefore evaluating the execution of each macro under
a broad range of (meaningful) environment configurations.
SYMBEXCEL significantly outperforms existing deobfuscation
tools, allowing us to reliably extract Indicators of Compromise (IoCs)
and other critical forensics information. Our experiments demon-
strate the effectiveness of our approach, especially in deobfuscating
novel malicious documents that make heavy use of environment vari-
ables and are often not identified by commercial anti-virus software.
I. INTRODUCTION
Despite advances in computer security, cybersecurity threats are
still on the rise. Ransomware attacks, for instance, represent one of
the most devastating threats of the past few years, expected to inflict
more than $20 billion in damages in 2021 alone [51]. Therefore,
the detection and forensics analysis of security threats is critical
for protecting users and organizations from malicious actors.
Attackers leverage different techniques to infect a victim’s
system, ranging from exploiting vulnerabilities in Internet-facing
services to phishing campaigns stealing the victim’s credentials.
A popular approach is to abuse Microsoft Office documents as
carriers for malicious macro code. The attacker usually sends these
malicious documents as email attachments, and deceives the victim
into opening them and executing the malicious payload.
One of the most well-known examples of macros utilized for
malicious purposes are Visual Basic for Applications (VBA)
macros, which security analysts have studied extensively in the
past [34], [48], [49], [50]. However, since security researchers have
contributed numerous open-source tools to analyze and deobfuscate
VBA macros, malware authors have recently shifted their attention
to a lesser-known macro format: Excel 4.0 macros [28], [67]. Excel
4.0 macros, or XL4 macros1, are a 30-year-old feature of Microsoft
Excel that allows one to encode a series of operations into an Excel
file. While this feature originates as a precursor of VBA macros,
it is similarly powerful and still used in corporate settings.
In the past few years, malware campaigns using XL4 malware
have been deployed at scale, and infections related to this threat
1We will use the terms Excel 4.0 macro and XL4 macro interchangeably.
have increased [28], [66], [67]. However, for a series of reasons,
the XL4 malware ecosystem remains largely unexplored, due to
a number of challenges associated with the analysis of XL4 macros.
First, Microsoft Excel supports several macro formats with
complex specifications [56]. Malware authors always seek new
ways of creating spreadsheets that break static parsers (used by
analysis tools) while remaining compliant with the actual parser
shipped with Excel. Second, malware authors have deployed a
series of evasion techniques that hinder both static and dynamic
analysis. In particular, heavy obfuscation techniques have been
recently introduced, effectively preventing every available tool from
correctly analyzing these samples. These techniques use information
about the execution environment both to detect sandboxes and to
deobfuscate the malicious payloads. Third, malware analysts can
only rely on limited tooling when inspecting a potentially malicious
document. When these tools cannot process a sample, the analyst has
to resort back to manual analysis, which consists in opening the file
in Excel and manually stepping through the XL4 formulas. However,
such a manual approach is complicated by the layers of obfuscation
techniques included in XL4 malware, and by the large number of
formulas executed (often in the range of thousands of formulas).
Correctly deobfuscating XL4 malware remains a critical task. On
the one hand, in post-mortem scenarios, it is essential to understand
what malicious actions have been performed. On the other hand,
to prevent future infections, it is essential to extract any indicator
of compromise (IoC).
In this paper, we study the ecosystem surrounding Excel 4.0
malware, and we propose SYMBEXCEL, a novel system to automati-
cally analyze advanced XL4 malware samples. The core component
of our system is a symbolic execution engine for XL4 macros.
Using symbolic execution, we can automatically infer the “correct”
values of any environment variable—i.e., the values that lead to
the deobfuscation of the malicious payload. Overall, our approach
also provides valuable insights into malware’s interactions with and
dependencies on the environment. Moreover, our symbolic engine
follows multiple paths of execution (i.e., states) during the symbolic
exploration, and is, therefore, able to capture every possible behavior
of the malicious samples. For instance, malware samples often try to
connect and download a second-stage payload from multiple servers,
in case one of them becomes unreachable. In these cases, thanks to
symbolic execution, we are able to explore all the possible execution
paths, and therefore extract the address of every infected server.
Another important aspect of our system is that it can handle
symbolic Excel 4.0 formulas. Excel malware often uses information
retrieved from the environment, which is represented as symbolic
values in our system, to decrypt and execute Excel formulas. Given
the combination of two novel techniques presented in this paper,
namely observers and smart concretization, SYMBEXCEL is able
to concretize the decrypted formulas and to efficiently continue
© 2022, Nicola Ruaro. Under license to IEEE.
DOI 10.1109/SP46214.2022.00105
1066
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
the symbolic exploration. Finally, to avoid reimplementing the
entire Excel engine in our system, we propose a technique called
delegations to offload the execution of certain formulas to Excel.
We evaluate SYMBEXCEL on two different datasets of XL4 sam-
ples, one that contains 5,697 publicly available samples, while the
other contains 18,840 private samples. Our datasets cover a period
spanning more than eight years—albeit malicious actors started to
leverage Excel 4.0 macros on a large scale only in the past few years.
SYMBEXCEL performs significantly better than existing tools, deob-
fuscating correctly 23,931 (instead of 12,375) out of 24,537 samples.
Moreover, if we restrict our analysis to the samples that make heavy
use of obfuscation and machine-specific variables, SYMBEXCEL
can deobfuscate correctly 7,239 (instead of 410) malware samples.
In summary, our paper makes the following contributions:
• We present SYMBEXCEL, a symbolic execution engine for
Excel 4.0 macros that can deobfuscate advanced malicious
documents.
• We evaluate our system on a dataset of more than 25,000
malicious samples, covering a period of more than 8 years.
• We present an in-depth overview of the most common evasion
technique adopted by malware authors, and a study of the
malicious behaviors observed.
We believe that our results help to shed light on the XL4 malware
ecosystem, and that SYMBEXCEL will help incident response and
malware analysts to understand XL4 malware successfully. To
foster more research in this field, we make our code available at
https://github.com/ucsb-seclab/symbexcel.
II. BACKGROUND
Excel File Formats. Microsoft Excel supports tens of different file
formats, but only four of them can contain Excel 4.0 macros and
are routinely used to deliver Excel 4.0 malware. For this reason, in
this paper we will only focus on the following file formats: Excel 97
- Excel 2003 Workbook (.xls), Excel Binary Workbook (.xlsb),
Excel Workbook (.xlsx) and Excel Macro-Enabled Workbook
(.xlsm). The first two formats are binary file formats, also known
as Binary Interchange File Format 8 (BIFF8) and Binary Interchange
File Format 12 (BIFF12), respectively. Microsoft released these
format specifications in 2008 [44], [45]. On the other hand, xlsx
and xlsm files are based on XML. Despite the differences between
these formats, from an application standpoint, every Excel file
consists of a workbook and one or more spreadsheets. A workbook
is a collection of spreadsheets, which in turn contain the cells
where formulas and values are stored. A spreadsheet can be
further classified as a macro sheet or as a worksheet, with the only
difference being that macro sheets are the only type of spreadsheet
that can contain Excel 4.0 macros. Finally, a workbook can contain
one or more globally defined variables called defined names, which
have an associated value and are shared across the spreadsheet.
Excel 4.0 Macros. This feature of Microsoft Excel was released
in 1992, and it was soon widely adopted in numerous organizations.
Interestingly, despite the introduction of VBA macros as a replace-
ment for XL4 macros, the latter are still supported by the latest
version of Microsoft Excel. Excel 4.0 macros are a super-set of the
traditional Excel functions [43] and offer a large set of functions to
interact with an Excel workbook and with the external environment.
To avoid any confusion, in the rest of this paper, we will refer
to the distinct Excel 4.0 macro functions (e.g., EXEC, CHAR)
as functions. We will instead use the term formulas to denote
expressions that always start with an equal sign and use one or more
functions (e.g., =EXEC("calc.exe")). Finally, we will refer to
sequences of formulas that are stored in a macro sheet as macros.
In particular, unlike traditional Excel functions (such as SUM)
used in spreadsheets, Excel 4.0 macro functions have access to the
Windows API and can be used to interact with the operating system.
For example, the formula =FILES(directory) lists all the files
in a given directory, and an attacker can use =EXEC(program)
to launch an external program. In practice, Excel 4.0 macros are
nothing less than a sequence of Excel 4.0 macro formulas, just like
binary programs are a sequence of instructions.
XL4 macros cannot reside in regular worksheets. Instead, they
must be stored in specific Excel 4.0 macro sheets, one formula
per cell. The execution of XL4 macros starts from a cell—called
AutoOpen—and continues executing the underlying cells until either
a terminating function is encountered (i.e., =HALT()) or until a
control-flow transferring function is executed (e.g., GOTO(CELL)).
In the latter case, the execution continues with the code stored in the
target cell. Using the functions FORMULA and FORMULA.FILL,
Excel 4.0 malware can also generate formulas on-the-fly, and store
them in a macro sheet for later execution.
Execution Environment. As mentioned previously, Excel 4.0
macros can interact with the operating system. Advanced XL4
malware makes heavy use of this capability and frequently checks