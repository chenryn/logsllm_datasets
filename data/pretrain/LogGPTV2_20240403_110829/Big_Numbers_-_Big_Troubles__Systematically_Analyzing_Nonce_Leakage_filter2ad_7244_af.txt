nonce vulnerability (V1), affecting the same curves listed
in Table 3. It leaks whether the inverse nonce is one limb
smaller than the modulus. Since leakage of the inverse nonce
is equally dangerous as leakage of the nonce itself, an at-
tacker can mount the same key recovery attack as for (V1). In
response to our disclosure, LibreSSL ﬁxed this issue.19
7 Evaluation
Having detailed all vulnerabilities, we now evaluate our anal-
ysis methodology as well as the leakage models.
Analysis Methodology. Investigating the leakage reports of
DATA represents a chicken-and-egg problem. The results of
DATA phase one cover all discovered differences (i.e., po-
tential leaks), but are tedious to analyze. Developing precise
leakage models to ﬁlter those results requires an intuition
about the nature of leakage, which in turn demands some
manual analysis of phase one results. As described in Sec-
tion 6, we concurrently followed both approaches. By manu-
ally analyzing phase one results, we gained an understanding
of the libraries. Although we found vulnerabilities related to
k-padding as well as (V8) that way, this task is tedious. Thus,
we derived the leakage model num_bits which captures the
bit length of k, k + q and k + 2q to detect k-padding leaks au-
tomatically. We used the gained knowledge to search for other
Bignumber-related leaks, and also included inverse nonces
kinv in our models. Our leakage models conﬁrmed initial
results and helped us discover more Bignumber-related vul-
nerabilities such as (V1), (V9) and (V10). Moreover, since
num_bits correlates with the bit length rather than the word
length of the nonce, we also found leakage on a byte granu-
larity (V6) and window granularity (V7).
The choice of library conﬁgurations and algorithm parame-
ters is essential. E.g., we realized that (V2) does not show up
for DSA-160 on a 64-bit system, while 32-bit systems leak for
all parameter sets. Also, the choice of the modulus q is essen-
tial in causing leakage to show up. In order to conﬁrm (V2)
also for ECDSA, we analyzed all ECDSA moduli ofﬂine and
16The patch was introduced in OpenSSL commit 415c335.
17Blinding was introduced via OpenSSL commit 7f9822a.
18See LibreSSL commits 2cd28f9 and 2a937ef.
19See LibreSSL commits 1f6b35b and 159fbd1.
1778    29th USENIX Security Symposium
USENIX Association
Table 6: Evaluation of leakage models. Depending on the triggered vulnerabilities, differences (Diffs) found by DATA
are ﬁltered via our leakage models. The overall reduction is computed when ﬁltering almost non-matching leaks (<1%),
somewhat matching leaks (<50%), or all leaks except for perfect correlation (<100%).
Tested conﬁguration
Vulnerabilities
Diffs
num_bits
hw
Leakage model (max. correlation)
Overall reduction
Diffs vs. Leaks
(V1),(V9),(V10)
LibreSSL sect131r1
OpenSSL DSA-256
OpenSSL secp521r1a
BoringSSL secp521r1
OpenSSL secp521r1
(V2),(V5),(V8),(V9) 663
88
26
535
acompiled with enable-ec_nistp_64_gcc_128
artiﬁcial leak
(V6)
(V7)
k + q
1450 100.0% 0.0%
k
kinv
k + 2q
<1% <50% <100%
0.0% 100.0% 7.4% 18.0% 9.4% 10.0% 90.2% 97.9% 99.0%
100.0% 100.0% 100.0% 79.8% 0.0% 2.7% 17.8% 0.0% 23.7% 26.4% 27.5%
100.0% 0.0%
1.5% 11.4% 20.3% 0.0% 1.8% 84.1% 94.3% 94.3%
100.0% 0.0%
0.0% 0.0% 0.0% 0.0% 0.0% 96.2% 96.2% 96.2%
8.3% 14.0% 100.0% 13.5% 0.0% 98.1% 99.8% 99.8%
32.4% 0.0%
0.0%
0.0%
0.0%
k + 2q
k + q
kinv
k
found that only Brainpool curves are vulnerable. Similarly,
discovering and analyzing leakage of small nonces (V1) de-
manded careful investigations of (V10). Both issues depend
on ECDSA curve parameters that are slightly above a word
boundary, which led us to speciﬁcally testing the sect131r1
curve showing small nonces every fourth signature. Thus, we
were able to ﬁnd numerous instances of (V1) in the code with
the help of our tool. Also, we could generalize these results to
other curves. E.g., for secp521r1, the (V1) vulnerability only
shows up every 512th signature on average, which cannot be
easily discovered by DATA within a reasonable time.
Leakage Models. We evaluate the leakage models on
OpenSSL 1.1.1, BoringSSL chromium-stable commit
2e0d354, and LibreSSL 3.0.0. We used GCC 6.3.0, tested
DATA phase one with 16 and phase three with 200 traces.
Table 6 summarizes our results. We benchmark different
conﬁgurations to trigger all major vulnerabilities and count
all potential leaks (differences, or Diffs) found by the original
DATA phase one. For each implemented leakage model, we
print the maximum correlation, which reveals the strongest
leak found by a leakage model. To capture how often leakage
models match, the last three columns represent the overall
reduction of phase one when ﬁltered by the models. In partic-
ular, we discard leaks with less correlation than the thresholds
1%, 50%, and 100%. For example, the 100% threshold only
preserves leaks that fully match the model.
LibreSSL sect131r1 leaks small nonces via the num_bits
model on k in several places with 100%. Moreover, LibreSSL
uses leaky Euclidean inversion also for ECDSA, resulting
in 100% leakage for num_bits(kinv). Since LibreSSL does
not work with so-called heap tracking of DATA phase one,
it has over 1000 differences, most of which are ﬁltered by
our leakage models. Thus, the overall reduction is over 90%.
Analyzing those leaks by hand would be quite tedious.
For OpenSSL DSA-256, the leaky k-padding addition (List-
ing 2 line 14) is captured by the num_bits models on k +q and
k + 2q, showing 100% correlation. The corresponding leaky
resize operation inﬂuences the heap layout and causes several
subsequent Bignumber operations to leak via data accesses.
Due to the high number of these actual data leaks, which are
all instantiations of (V2) the reduction is “only” around 25%.
To trigger (V6), we compiled OpenSSL to use the opti-
mized secp521r1 implementation. Indeed, num_bits(k) shows
100% correlation during conversion of the nonce buffer and
during scalar multiplication, as this implementation is also
vulnerable to (V7). We also triggered (V7) for BoringSSL,
showing 100% correlation. Other leakage models remain in-
signiﬁcant, and the overall reduction is above 96%.
The Hamming weight model hw did not show high cor-
relation. DSA uses ﬁxed window multiplication rather than
square-and-multiply, for which hw is designed. ECDSA uses
a blinded double-and-add by default, for which hw applies.
However, the actual computation does not leak. To test the
correctness of hw, we artiﬁcially introduced a conditional
code execution during double-and-add, leaking the current
nonce bit. Indeed, hw shows 100% on the padded nonce k + q.
8 Discussion
Proper tool support signiﬁcantly improves side-channel anal-
ysis and facilitates discovery of unknown weaknesses. How-
ever, tools do not fully discharge an analyst from thorough
investigations. Knowledge of the nature of expected leakage
is required to leverage tool support and interpret the results.
Yet, we believe this is a valuable path to follow.
The process of vulnerability patching has been tedious
in the past, as evidenced by numerous issues involving the
BN_FLG_CONSTTIME ﬂag [23, 24, 55]. Also, patching of (V2)
introduced new leakage in OpenSSL (V4) and LibreSSL (an-
other instance of (V2) for ECDSA). We believe this is due
to a lack of practical tools for developers to test their patches
thoroughly. Luckily, our tool uncovered both issues with little
effort. Also, regression testing with respect to already discov-
ered leakage is promising in this regard [25].
While most OpenSSL vulnerabilities were patched or are
in the patching process, the issues (V1) and (V5) related to
minimal Bignumbers (top) remain unpatched. The OpenSSL
team decided to target a ﬁx in version 3.0, as it requires a
major redesign of their Bignumber primitives. According
to [19], reworking Bignumber arithmetic in BoringSSL prior
to this work took between one and two months. While Bor-
ingSSL immediately ﬁxed (V7), LibreSSL only ﬁxed (V10),
USENIX Association
29th USENIX Security Symposium    1779
and (V2) partially. We also were in contact with the vendors
of libgcrypt, ﬁxing (V2), and the ring library, ﬁxing (V7) in
their code, without further in-depth analysis.
Due to a change in their security policy in May 2019,
OpenSSL does not consider Flush+Reload attacks in their
threat model anymore, since they are mounted on the same
physical system [41]. We see this downgrading questionable,
as it not only tempers efforts to analyze OpenSSL’s side-
channel security but also undermines software relying on the
previous threat model. For example, Intel SGX SSL [18] faces
adversarial code on the same physical system by design. Also,
vendors notiﬁed of (V2) by the CVE system were not notiﬁed
of the equally dangerous (V1) due to this policy update.20
In the long term, more compiler support with respect to
side-channels is needed [49]. As of today, compilers might
optimize constant-time code in a way that re-introduces side-
channel leakage. Thus, a notion of side-channel invariants
like constant-time guarantees is needed on a language level.
9 Conclusion
In this work, we showed that nonce leakage is far from be-
ing abandoned and requires attention both from academia
and practitioners. For our systematic study, we extended the
DATA framework to detect nonce leakage and developed
an easy-to-use GUI. We found that having an intuitive GUI
representation of the discovered leakage is imperative for
productive analysis of complex reports. E.g., it helped us to
easily determine whether a leaky function deeply nested in the
call stack is given public or secret input. The visualization of
leakage model results furthermore helped to identify hotspots,
especially if the number of potential leaks is large.
For OpenSSL and LibreSSL, we found numerous side-
channel vulnerabilities leaking secret (EC)DSA nonce bits
that allow full key recovery in many cases. They mostly result
from weaknesses in the underlying Bignumber implementa-
tion. We open-source our tools to help developers embrace
and include them in their development and patching process.
Acknowledgments
We thank our reviewers and our shepherd, Deian Stefan, for
their helpful feedback. This work has been supported by
the Austrian Research Promotion Agency (FFG) via the K-
project DeSSnet, which is funded in the context of COMET –
Competence Centers for Excellent Technologies by BMVIT,
BMWFW, Styria and Carinthia, via the competence center
Know-Center (grant number 844595), which is funded in the
context of COMET – Competence Centers for Excellent Tech-
nologies by BMVIT, BMWFW, and Styria, and via the project
ESPRESSO, which is funded by the province of Styria and
the Business Promotion Agencies of Styria and Carinthia.
20https://www.cvedetails.com/cve/CVE-2018-0734/
References
[1] Alejandro Cabrera Aldaya, Cesar Pereida García, Luis
Manuel Alvarez Tapia, and Billy Bob Brumley. Cache-
Timing Attacks on RSA Key Generation. IACR Trans.
Cryptogr. Hardw. Embed. Syst., 2019:213–242, 2019.
[2] Thomas Allan, Billy Bob Brumley, Katrina E. Falkner,
Joop van de Pol, and Yuval Yarom. Amplifying side
In An-
channels through performance degradation.
nual Computer Security Applications Conference – AC-
SAC’16, pages 422–435. ACM, 2016.
[3] Diego F. Aranha, Pierre-Alain Fouque, Benoît Gérard,
Jean-Gabriel Kammerer, Mehdi Tibouchi, and Jean-
Christophe Zapalowicz. GLV/GLS Decomposition,
Power Analysis, and Attacks on ECDSA Signatures
with Single-Bit Nonce Bias. In Advances in Cryptology –
ASIACRYPT’14, volume 8873 of LNCS, pages 262–281.
Springer, 2014.
[4] László Babai. On lovász’lattice reduction and the near-
est lattice point problem. Combinatorica, 6(1):1–13,
1986.
[5] Mihir Bellare, Shaﬁ Goldwasser, and Daniele Miccian-
"Pseudo-Random" Number Generation Within
cio.
Cryptographic Algorithms: The DDS Case. In Advances
in Cryptology – CRYPTO’97, volume 1294 of LNCS,
pages 277–291. Springer, 1997.
[6] Naomi Benger, Joop van de Pol, Nigel P. Smart, and
Yuval Yarom. "Ooh Aah... Just a Little Bit" : A Small
Amount of Side Channel Can Go a Long Way. In Cryp-
tographic Hardware and Embedded Systems – CHES’14,
volume 8731 of LNCS, pages 75–92. Springer, 2014.
[7] David Benjamin. BIGNUM code is not constant-time
due to bn_correct_top, 2018. OpenSSL issue #6640,
https://github.com/openssl/openssl/issues/
6640.
[8] Daniel J. Bernstein, Joachim Breitner, Daniel Genkin,
Leon Groot Bruinderink, Nadia Heninger, Tanja Lange,
Christine van Vredendaal, and Yuval Yarom. Sliding
Right into Disaster: Left-to-Right Sliding Windows
Leak. In Cryptographic Hardware and Embedded Sys-
tems – CHES’17, volume 10529 of LNCS, pages 555–
576. Springer, 2017.
[9] Daniel Bleichenbacher. On the generation of one-time
keys in DL signature schemes. In Presentation at IEEE
P1363 working group meeting, page 81, 2000.
[10] Dan Boneh and Ramarathnam Venkatesan. Hardness
of Computing the Most Signiﬁcant Bits of Secret Keys
in Difﬁe-Hellman and Related Schemes. In Advances
1780    29th USENIX Security Symposium
USENIX Association
in Cryptology – CRYPTO’96, volume 1109 of LNCS,
pages 129–142. Springer, 1996.
[11] Dan Boneh and Ramarathnam Venkatesan. Rounding
in Lattices and its Cryptographic Applications. In Sym-
posium on Discrete Algorithms – SODA’97, pages 675–
681. ACM/SIAM, 1997.
[12] Jurjen N. Bos and Matthijs J. Coster. Addition Chain
Heuristics. In Advances in Cryptology – CRYPTO’89,
volume 435 of LNCS, pages 400–407. Springer, 1989.
[13] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko,
Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza
Sadeghi. Software Grand Exposure: SGX Cache At-
tacks Are Practical. In Workshop on Offensive Technolo-
gies – WOOT’17. USENIX Association, 2017.
[14] Joachim Breitner and Nadia Heninger. Biased nonce
sense: Lattice attacks against weak ECDSA signa-
tures in cryptocurrencies. In Financial Cryptography –
FC’19, 2019.
[15] Billy Bob Brumley and Risto M. Hakala. Cache-Timing
Template Attacks. In Advances in Cryptology – ASI-
ACRYPT’09, volume 5912 of LNCS, pages 667–684.
Springer, 2009.
[16] Billy Bob Brumley and Nicola Tuveri. Remote Timing
Attacks Are Still Practical. In European Symposium on
Research in Computer Security – ESORICS’11, volume
6879 of LNCS, pages 355–371. Springer, 2011.
[17] Jo Van Bulck, Frank Piessens, and Raoul Strackx. SGX-
Step: A Practical Attack Framework for Precise Enclave
Execution Control. In System Software for Trusted Exe-
cution – SysTEX, pages 4:1–4:6. ACM, 2017.
[18] Intel Corporation. Using the Intel Software Guard Ex-
tensions (Intel SGX) SSL Library. https://software.
intel.com/en-us/sgx/resource-library, 2017.
[19] Paul Dale. Close side channels in DSA and ECDSA,
2019. OpenSSL Pull Request #8906, https://github.
com/openssl/openssl/pull/8906.
[20] Fergus Dall, Gabrielle De Micheli, Thomas Eisenbarth,
Daniel Genkin, Nadia Heninger, Ahmad Moghimi, and
Yuval Yarom. CacheQuote: Efﬁciently Recovering
Long-term Secrets of SGX EPID via Cache Attacks.
IACR Trans. Cryptogr. Hardw. Embed. Syst., 2018:171–
191, 2018.
[21] Shuqin Fan, Wenbo Wang, and Qingfeng Cheng. Attack-
ing OpenSSL Implementation of ECDSA with a Few
Signatures. In Conference on Computer and Commu-
nications Security – CCS’16, pages 1505–1515. ACM,
2016.