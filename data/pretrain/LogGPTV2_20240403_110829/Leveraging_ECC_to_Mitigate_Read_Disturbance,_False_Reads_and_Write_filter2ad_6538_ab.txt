we study low cost read disturbance policies that utilize the
error detection capability of ECC to mitigate read disturbances.
Third, we take advantage of the unique properties of the
Markov chain process to estimate the reliability and overhead
of the policies.
Because of the cumulative effect of the read disturbance,
even relatively low fault probabilities (raw bit error rate or
RBER) can result in a relatively high probability of failure
(unrecoverable bit error rate or UBER). Consequently, as
Monte-Carlo simulation is only feasible for high RBER, it is
inadequate for systems with persistent errors since it requires
prohibitive simulation times to capture the effect of low RBER.
This is the reason for using the proposed Markov Modeling
in our evaluation.
III. USING MARKOV CHAINS TO MODEL READ
DISTURBANCES, FALSE READS AND WRITE FAULTS
To scrutinize the combined effect of persistent and transient
errors on the UBER, we model read disturbances, write faults,
and false reads using a Markov Model [24, 25]. A Markov
chain can be described as a system that, at any time, is in one
of a set of N states denoted by S1,··· , SN . Time is divided
into steps and at any step, t, the system can switch to another
state with a given probability. The probability to go from state
Si to state Sj does not depend on the speciﬁc step t and is
denoted cij. To obey standard stochastic constraints, cij ≥ 0
cij = 1. A Markov chain may have one or more
and
absorbing states. By deﬁnition, the state Si is absorbing when
cii = 1 (and hence cij = 0 for all j (cid:4)= i). Any absorbing chain
can be speciﬁed by a “canonical” form [26, 27] from which
the expected number of steps (state transitions) to absorption
can be estimated [28].
N(cid:4)
j=1
Markov analysis is a suitable option for modeling systems
with read disturbance and calculating the probability of failure
for such systems. To make the idea more concrete, we describe
a Markov model of the process of repeatedly reading an m-bit
data block protected by a single error correcting code (ECC1)
in the presence of both read disturbances (with probability pd)
and false reads (with probability pf ). Speciﬁcally, repeatedly
reading the data with no intervening user write operations can
be described by the four-state Markov model shown in Fig.
3a, where each transition represents a read operation. In this
model, the probability of disturbance is ﬁxed for each read
217
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:18 UTC from IEEE Xplore.  Restrictions apply. 
c11 = P (Rd
0&Rf≤1)
ac11 + bP (W0)
)
Rf≤ 1
S1
c
1
3
=
)
( W 1
S1
a
c
1
3
+
P
(
R
d≥
2
&
c
1
4
start
=
P
R
f
≤
1)
ac12
start
+ bP
)
( W 0
bP
ac23 + bP (W≥ 2)
(
R
f
≥
2
)
c23 = P (Rd≥1&Rf
0 )
c22 = P (Rd
0&Rf
0 )
&
P (R d1
=
c 12
S2
c
2
4
=
P
(
R
f
≥
1)
S4

c44 = 1
b
P
(
b
P
(
W
0)
W
≥
2)
S3
bP (W≥2)
a
S3
S2
bP(W1)
ac22 + bP (W1)
a
c
2
4
1
=
c 34

4
c1
a
S4
1
Fig. 3: Modeling the state of a data block protected by ECC1 assuming (a)
read disturbances and false reads, (b) read disturbances, false reads and write
faults.
and the cumulative effect of read disturbance is captured by
the different Markov states. Speciﬁcally, states S1, S2, or S3
represent the states where zero, one, or at least two cells in
the data block contain wrong data, respectively. Initially, the
system is in S1 and eventually, the system will be absorbed
in the “failure to correctly read” state, S4. Assuming that n
is the size of the block including the ECC bite (n > m), the
probability that x cells are disturbed during the read operation
d(1 − pd)n−x [26].
px
can be computed as P (Rd
Similarly, the probability of y false reads occurring during
f (1 − pf )n−y. In the
py
the read operation is P (Rf
ﬁgure, P (Rd≥x) denotes the probability that at least x cells are
disturbed during the read operation and P (Rf
y) denotes
the probability of x false reads and y read disturbances.
(cid:5)
(cid:6)
x&Rd
x) =
y ) =
(cid:6)
(cid:5)
n
y
n
x
After a read operation, the data block remains in state S1 as
long as no cell is disturbed and at most one read error occurs,
which can be corrected by ECC1. If one cell is disturbed
during the read, the state of the block transitions from S1 to S2.
In the next read operation, the error is detected and corrected
by the ECC but the stored value is not corrected (assuming
no provision is made to deal with read disturbance). Provided
that no new cells are disturbed in consecutive read operations,
the Markov process remains in S2. If more than one cell is
disturbed in the next read operations, the state of the block
changes from S2 to S3. In this case, the process deﬁnitely
(with probability 1) moves to S4 by the next read because the
number of disturbed cells is more than the ECC capability and
the errors cannot be corrected. Note that state S3 is needed
because a read operation that disturbs a cell retrieves the value
stored in that cell correctly but every subsequent read suffers
from an error due to the disturbed cell. Note also that a false
read does not have a cumulative effect and only inﬂuences the
present status of the Markov process. That is, if the number of
false reads lies in the range of the ECC capability, errors are
corrected and do not appear in consequent read operations.
Using standard Markov analysis, we can calculate the ex-
pected number of transitions before absorption. Accordingly,
the inverse of the calculated value over m gives the UBER. As
an example, consider the case of a 64-bit block with the prob-
abilities of read disturbance and false reads being pd = pf =
10−6 and the codeword length being n = 71. Starting at S1,
218
1
the expected number of transitions before absorption into S4
21127×64 = 7.39× 10−07.
is 21127, which leads to U BER =
So far, we have assumed that every transition is due to a
read operation. Normally, however, a data block is subject
to both read and write operations and we can use a Markov
process to model a system in which a% of the operations are
reads and b = (100 − a)% are writes. A write operation will
remove the effect of any previous read disturbance, but may
introduce a “write fault”. The model of Fig. 3a can be extended
to Fig. 3b to include the effect of user write operations and
the probability of write faults. In that extension, the meanings
of the states S1, ... ,S4 are unchanged with the understanding
that a cell may contain a wrong value due to a write fault
as well as a read disturbance. New transitions (edges) are
added to the model to represent user write operations, with
the understanding that writing new data into the block clears
any previously faulty cells (returns the state to S1), unless a
write fault occurs (with some probability, pw), in which case
the process transitions to either S2 or S3, depending on the
number of write faults. Although modeling write operations
complicates the Markov process, the reliability of the process
can be evaluated using the same technique. Assuming that
a = 99.9%, b = 0.1%, and pw = pf = pd = 10−6 in
the previous example of using ECC1, we can compute the
number of transitions before failure to be 120421, which leads
120421×64 = 1.29 × 10−07. This shows that
to U BER =
although errors may happen during writes, the system is more
reliable because write operations store correct data into cells
that were previously affected by read disturbances.
1
IV. REVISITING WRITE BACK AFTER USER READ
One possible solution for mitigating read disturbance in
STT-RAM is for the system to induce a write back of the
data block after every user read (WAR) [7]. In Fig. 4, we
show the Markov model for WAR when used in conjunction
with ECC1. For simplicity of the presentation, we assume no
user write operations (a = 100% and b = 0%) noting that it
can be easily added as was described in the previous section.
In the ﬁgure, black edges represent user read operations and
blue dashed edges represent system write back operations.
We deﬁne S1 as the initial state of the data block. A user
read transitions the state of the block to S5 (the “failure to
read” state) if more than one false reads occur because this ex-
ceeds the correction capabilities of ECC1. If, however, at most
one false read occurs, the block transitions to S2 and a system
write back occurs. Depend-
ing on the errors during the
write back, three scenarios
may occur. (1) If no write
faults occur,
the state of
the block returns to S1. (2)
If one fault occurs during
the write back,
the block
transitions to S3 which in-
dicates that one cell con-
tains the wrong data. Being
in S3,
the next read op-
eration will either fail (if
Fig. 4: Modeling write back after read.
P(Rf≤1)
P
(
W
≥
2
)
2
f≥
R
(
P
P(W0)
start
)
f ≥ 1
P( W
S3
S1
S2
S4
S5
P( R
)
1
P(R
f
)
0
1
1
)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:18 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Comparison of WAR and ECC64
ranges of pw, pf and pd.
1 in terms of UBER for different
Parameter
Scheme
pw = 10pf
= 10pd
pw = pf = pd
pw = 10−5pf
= 10−5pd
W AR
ECC 64
1
W AR
ECC 64
1
W AR
ECC 64
1
RBER(pw)
10−4
2.23 10−05
1.54 10−05
7.74 10−07
1.52 10−06
1.93 10−07
8.58 10−07
10−5
2.34 10−07
1.63 10−07
7.81 10−09
1.56 10−08
1.94 10−09
8.79 10−09
10−6
2.35 10−09
1.64 10−09
7.82 10−11
1.56 10−10
1.94 10−11
8.81 10−11
10−7
2.35 10−11
1.64 10−11
7.82 10−13
1.56 10−12
1.94 10−13
8.81 10−13
one or more false reads occur) or the wrong cell will be
detected/corrected and the block will be written back tran-
sitioning the block to state S1 (through S2). Finally, (3) If
more than one fault occurs during the write back, the block
will have two cells with incorrect data (state S4) and the next
read operation will not be able to correct the errors, causing
a read failure.
Using the Markov models, we compare in Table I the UBER
when repeatedly reading a 64-bit data block protected by
ECC1 with and without WAR. From the results, we observe
that when the write bit error rate increases relative to the read
bit error rate (including false reads and read disturbances), the
UBER exponentially grows and WAR becomes less reliable
than ECC1. This means that although WAR mitigates the read
disturbance for high pw, it generates more errors during the
write back process. Accordingly, WAR decreases reliability
when cells encounter a high write error rate compared to the
read error rate.
Another drawback of WAR is its energy overhead, since it
requires an expensive write operation after every read (in STT-
RAM, writing a cell consumes at least four times the energy
of reading it [29, 30]). Moreover, the write backs consume a
large portion of the memory bandwidth (again, in STT-RAM
a write is much slower than a read). Hence, although the
system write back is not on the critical path of a user read
operation, it may delay subsequent read operations because of
memory bandwidth saturation. These observations motivates
the solutions described in the next section.
V. ON-DEMAND WRITE BACK POLICIES
Depending on the dominant error type in STT-RAM, we
describe three policies to mitigate the effects of read dis-
turbance, write faults and false reads: (1) Write back After