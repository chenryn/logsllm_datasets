40
GBase 8s V8.8开发者手册
表 3-5 索引方式
索引方式 描述
可用于约束索引属性值的唯一性，或者属性组合值的唯一性。如果
一个表声明了唯一约束或者主键，则GBase8s自动在组成主键或唯
唯一索引
一约束的字段上创建唯一索引（可能是多字段索引），以实现这些
约束。目前，GBase8s只有B-Tree可以创建唯一索引。
一个索引可以定义在表中的多个属性上。目前，GBase8s中的B-
多字段索引
Tree支持多字段索引，。
建立在一个表的子集上的索引，这种索引方式只包含满足条件表达
部分索引
式的元组。
索引建立在一个函数或者从表中一个或多个属性计算出来的表达
表达式索引 式上。表达式索引只有在查询时使用与创建时相同的表达式才会起
作用。
步骤6 创建一个普通表
gbase=#CREATETABLEtpcds.customer_address_bakASTABLEtpcds.customer_address;
INSERT 0 0
步骤7 创建普通索引
如果对于tpcds.customer_address_bak表，需要经常进行以下查询。
gbase=# SELECT ca_address_sk FROM tpcds.customer_address_bak WHERE
ca_address_sk=14888;
通常，数据库系统需要逐行扫描整个tpcds.customer_address_bak表以寻找所有匹配的元
组。如果表tpcds.customer_address_bak的规模很大，但满足WHERE条件的只有少数几个（可
能是零个或一个），则这种顺序扫描的性能就比较差。如果让数据库系统在ca_address_sk
属性上维护一个索引，用于快速定位匹配的元组，则数据库系统只需要在搜索树上查找少数
的几层就可以找到匹配的元组，这将会大大提高数据查询的性能。同样，在数据库中进行更
新和删除操作时，索引也可以提升这些操作的性能。
gbase=# CREATE INDEX index_wr_returned_date_sk ON pcds.customer_address_bak
(ca_address_sk);
CREATE INDEX
使用以下命令创建索引。
南大通用数据技术股份有限公司
41
GBase 8s V8.8开发者手册
gbase=# CREATE INDEX index_wr_returned_date_sk ON
tpcds.customer_address_bak(ca_address_sk);
CREATEINDEX
步骤8 创建唯一索引
在表tpcds.ship_mode_t1上的SM_SHIP_MODE_SK字段上创建唯一索引。
gbase=# CREATE UNIQUE INDEX ds_ship_mode_t1_index1 ON
tpcds.ship_mode_t1(SM_SHIP_MODE_SK);
步骤9 创建多字段索引
假如用户需要经常查询表 tpcds.customer_address_bak 中 ca_address_sk 是 5050， 且
ca_street_number小于1000的记录，使用以下命令进行查询。
gbase=# SELECT ca_address_sk,ca_address_id FROM tpcds.customer_address_bak
WHERE ca_address_sk = 5050 AND ca_street_number  10000;
CREATE VIEW
CREATEVIEW中的ORREPLACE可有可无，当存在ORREPLACE时，表示若以前存
在该视图就进行替换。
 查询视图
执行如下命令查询MyView视图。
gbase=# SELECT * FROM MyView;
 查看某视图的具体信息
执行如下命令查询MyView视图的详细信息。
gbase=# \d+ MyView
View "PG_CATALOG.MyView"
Column | Type | Modifiers | Storage | Description
----------+-----------------------+-----------+----------+-------------
USERNAME | CHARACTER VARYING(64) | | extended | View definition:
SELECT PG_AUTHID.ROLNAME::CHARACTER VARYING(64) AS USERNAME FROM PG_AUTHID;
 删除视图
南大通用数据技术股份有限公司
43
GBase 8s V8.8开发者手册
执行如下命令删除MyView视图。
gbase=# DROP VIEW MyView;
DROP VIEW
3.8.5 创建和管理序列
背景信息
序列Sequence是用来产生唯一整数的数据库对象。序列的值是按照一定规则自增的整
数。因为自增所以不重复，因此说Sequence具有唯一标识性。这也是Sequence常被用作主
键的原因。
通过序列使某字段成为唯一标识符的方法有两种：
 一种是声明字段的类型为序列整型，由数据库在后台自动创建一个对应的Sequence。
 另 一 种 是 使 用 CREATE SEQUENCE 自 定 义 一 个 新 的 Sequence ， 然 后 将
nextval('sequence_name')函数读取的序列值，指定为某一字段的默认值，这样该字段就
可以作为唯一标识符。
操作步骤
方法一： 声明字段类型为序列整型来定义标识符字段。例如：
gbase=# CREATE TABLE T1 (id serial, name text);
当结果显示为如下信息，则表示创建成功。
CREATE TABLE
方法二： 创建序列，并通过nextval('sequence_name')函数指定为某一字段的默认值。
1. 创建序列
gbase=# CREATE SEQUENCE seq1 cache 100;
当结果显示为如下信息，则表示创建成功。
CREATE SEQUENCE
2. 指定为某一字段的默认值，使该字段具有唯一标识属性。
gbase=# CREATE TABLE T2 (id int not null default nextval('seq1'), name text);
当结果显示为如下信息，则表示默认值指定成功。
CREATE TABLE
3. 指定序列与列的归属关系。
南大通用数据技术股份有限公司
44
GBase 8s V8.8开发者手册
将序列和一个表的指定字段进行关联。这样，在删除那个字段或其所在表的时候会自动
删除已关联的序列。
gbase=# ALTER SEQUENCE seq1 OWNED BY T2.id;
当结果显示为如下信息，则表示指定成功。
ALTER SEQUENCE
除了为序列指定了cache，方法二所实现的功能基本与方法一类似。但是一旦定义cache，
序列将会产生空洞(序列值为不连贯的数值，如：1.4.5)，并且不能保序。另外为某序列
指定从属列后，该列删除，对应的sequence也会被删除。 虽然数据库并不限制序列只
能为一列产生默认值，但最好不要多列共用同一个序列。
当前版本只支持在定义表的时候指定自增列，或者指定某列的默认值为
nextval('seqname')， 不支持在已有表中增加自增列或者增加默认值为nextval('seqname')
的列。
4 开发设计建议
4.1 开发设计建议概述
本开发设计建议约定数据库建模和数据库应用程序开发过程中，应当遵守的设计规范。
依据这些规范进行建模，能够更好地契合GBase8s处理架构，输出更高效的业务SQL代码。
本开发设计建议中所陈述的“建议”和“关注”含义如下：
 建议：用户应当遵守的设计规则。遵守这些规则，能够保证业务的高效运行；违反这些
规则，将导致业务性能的大幅下降或某些业务逻辑错误。
 关注：在业务开发过程中客户需要注意的细则。用于标识容易导致客户理解错误的知识
点（实际上遵守SQL标准的SQL行为），或者程序中潜在的客户不易感知的默认行为。
4.2 数据库对象命名
数据库对象命名需要满足约束：非时序表长度不超过63个字节，时序表长度不超过53
个字符，以字母或下划线开头，中间字符可以是字母、数字、下划线、$、#。
 【建议】避免使用保留或者非保留关键字命名数据库对象。
南大通用数据技术股份有限公司
45
GBase 8s V8.8开发者手册
可以使用 select * from pg_get_keywords()查询数据库关键字，或者在《GBase 8s
V8.8_SQL手册》关键字章节中查看。
 【建议】避免使用双引号括起来的字符串来定义数据库对象名称，除非需要限制数据库
对象名称的大小写。数据库对象名称大小写敏感会使定位问题难度增加。
 【建议】数据库对象命名风格务必保持统一。
 增量开发的业务系统或进行业务迁移的系统，建议遵守历史的命名风格。
 建议使用多个单词组成，以下划线分割。
 数据库对象名称建议能够望文知意，尽量避免使用自定义缩写（可以使用通用的术
语缩写进行命名）。例如，在命名中可以使用具有实际业务含义的英文词汇或汉语
拼音，但规则应该在数据库实例范围内保持一致。
 变量名的关键是要具有描述性，即变量名称要有一定的意义，变量名要有前缀标明
该变量的类型。
 【建议】表对象的命名应该可以表征该表的重要特征。例如，在表对象命名时区分该表
是普通表、临时表还是非日志表：
 普通表名按照数据集的业务含义命名。
 临时表以“tmp_+后缀”命名。
 非日志表以“ul_+后缀”命名。
 外表以“f_+后缀”命名。
 不创建以redis_为前缀的数据库对象。
 不创建以mlog_和以matviewmap_为前缀的数据库对象。
 【建议】非时序表对象命名建议不要超过63字节。如果过该长度内核会对表名进行截
断，从而造成和设置值不一致的现象。且在不同字符集下，可能造成字符被截断，出现
预期外的字符。
南大通用数据技术股份有限公司
46
GBase 8s V8.8开发者手册
4.3 数据库对象设计
4.3.1 Database 和 Schema 设计
GBase8s中可以使用Database和Schema实现业务的隔离，区别在于Database的隔离更
加彻底，各个Database之间共享资源极少，可实现连接隔离、权限隔离等， Database之间
无法直接互访。Schema隔离的方式共用资源较多，可以通过grant与revoke语法便捷地控
制不同用户对各Schema及其下属对象的权限。
 从便捷性和资源共享效率上考虑，推荐使用Schema进行业务隔离。
 建议系统管理员创建Schema和Database，再赋予相关用户对应的权限。
Database 设计建议
 【规则】在实际业务中，根据需要创建新的Database，不建议直接使用数据库实例默认
的postgres数据库。
 【建议】一个数据库实例内，用户自定义的Database数量建议不超过3个。
 【建议】为了适应全球化的需求，使数据库编码能够存储与表示绝大多数的字符，建议
创建Database的时候使用UTF-8编码。
 【关注】创建 Database 时，需要重点关注字符集编码(ENCODING)和兼容性
(DBCOMPATIBILITY)两个配置项。GBase8s支持A、B、C和PG四种兼容模式，分别
表示兼容O语法、MY语法、TD语法和POSTGRES语法，不同兼容模式下的语法行
为存在一定差异，默认为A兼容模式。
 【关注】Database的owner默认拥有该Database下所有对象的所有权限，包括删除权
限。删除权限影响较大，请谨慎使用。
Schema 设计建议
 【关注】如果该用户不具有sysadmin权限或者不是该Schema的owner，要访问Schema
下的对象，需要同时给用户赋予Schema的usage权限和对象的相应权 限。
 【关注】如果要在Schema下创建对象，需要授予操作用户该Schema的create权限。
 【关注】Schema的owner默认拥有该Schema下对象的所有权限，包括删除权限。删
除权限影响较大，请谨慎使用。
南大通用数据技术股份有限公司
47
GBase 8s V8.8开发者手册
4.3.2 表设计
总体上讲，良好的表设计需要遵循以下原则：
 【关注】减少需要扫描的数据量。通过分区表的剪枝机制可以大幅减少数据的扫描量。
 【关注】尽量减少随机I/O。通过聚簇/局部聚簇可以实现热数据的连续存储，将 随机
I/O转换为连续I/O，从而减少扫描的I/O代价。
选择存储方案
【建议】表的存储类型是表定义设计的第一步，客户业务类型是决定表的存储类型的主
要因素，表存储类型的选择依据请参考表4-1。
表 4-1 表的存储类型及场景
存储类型 适用场景
 点查询（返回记录少，基于索引的简单查询）。
行存
 增、删、改操作较多的场景。
 统计分析类查询 （关联、分组操作较多的场景）。
列存
 即席查询（查询条件不确定，行存表扫描难以使用索引）。
选择分区方案
当表中的数据量很大时，应当对表进行分区，一般需要遵循以下原则：
 【建议】使用具有明显区间性的字段进行分区，比如日期、区域等字段上建立分区。
 【建议】分区名称应当体现分区的数据特征。例如，关键字+区间特征。
 【建议】将分区上边界的分区值定义为MAXVALUE，以防止可能出现的数据溢出。
表 4-2 表的分区方式及使用场景
分区方式 描述
Range 表数据通过范围进行分区。
Interval 表数据通过范围进行分区，超出范围的会自动根据间隔创建新的分区。
List 表数据通过指定列按照具体值进行分区。
南大通用数据技术股份有限公司
48
GBase 8s V8.8开发者手册
Hash 表数据通过Hash散列方式进行分区。
典型的分区表定义如下：
--创建Range分区表
CREATE TABLE staffS_p1 (
staff_ID NUMBER(6) not null, FIRST_NAME VARCHAR2(20), LAST_NAME
VARCHAR2(25), EMAIL VARCHAR2(25), PHONE_NUMBER VARCHAR2(20),
HIRE_DATE DATE,
employment_ID VARCHAR2(10), SALARY NUMBER(8,2), COMMISSION_PCT NUMBER(4,2),
MANAGER_ID NUMBER(6),
section_ID NUMBER(4)
)
PARTITION BY RANGE (HIRE_DATE) (
PARTITION HIRE_19950501 VALUES LESS THAN ('1995-05-01 00:00:00'), PARTITION
HIRE_19950502 VALUES LESS THAN ('1995-05-02 00:00:00'), PARTITION HIRE_maxvalue
VALUES LESS THAN (MAXVALUE)
);
--创建Interval分区表，初始两个分区，插入分区范围外的数据会自动新增分区CREATE
TABLE sales
(prod_id NUMBER(6), cust_id NUMBER, time_id DATE, channel_id CHAR(1), promo_id
NUMBER(6),
quantity_sold NUMBER(3), amount_sold NUMBER(10,2)
)
PARTITION BY RANGE (time_id) INTERVAL('1 day')