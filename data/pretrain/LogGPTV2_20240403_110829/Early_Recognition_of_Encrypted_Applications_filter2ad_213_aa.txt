title:Early Recognition of Encrypted Applications
author:Laurent Bernaille and
Renata Teixeira
Early Recognition of Encrypted Applications
Laurent Bernaille and Renata Teixeira
Universit´e Pierre et Marie Curie - LIP6-CNRS
Paris, France
Abstract. Most tools to recognize the application associated with network con-
nections use well-known signatures as basis for their classiﬁcation. This approach
is very effective in enterprise and campus networks to pinpoint forbidden appli-
cations (peer to peer, for instance) or security threats. However, it is easy to use
encryption to evade these mechanisms. In particular, Secure Sockets Layer (SSL)
libraries such as OpenSSL are widely available and can easily be used to encrypt
any type of trafﬁc. In this paper, we propose a method to detect applications in
SSL encrypted connections. Our method uses only the size of the ﬁrst few packets
of an SSL connection to recognize the application, which enables an early classi-
ﬁcation. We test our method on packet traces collected on two campus networks
and on manually-encrypted traces. Our results show that we are able to recognize
the application in an SSL connection with more than 85% accuracy.
1 Introduction
Accurate classiﬁcation of trafﬁc ﬂows is an essential step for network administrators
to detect security threats or forbidden applications. This detection has to happen as
early as possible, so that administrators can take appropriate actions to block or control
the problem. Given that the simple inspection of IANA-assigned port numbers is no
longer a reliable mechanism for classifying applications [1], many campus or enterprise
networks now use content-based mechanisms. These mechanisms search the content
of packets for well-known application signatures [2,3,4]. Although very effective and
accurate, content-based mechanisms are easy to evade by using encryption. To make
matters worse, Secure Sockets Layer (SSL), which can easily be used to encrypt any
application communication, is widely available. In this paper, we design a classiﬁer able
to detect the underlying application in encrypted SSL connections.
Before constructing a classiﬁer for encrypted trafﬁc, we characterize the use of SSL
on two campus networks by studying packet traces. This characterization sheds light
on the prevalence of SSL in today’s networks, the SSL versions in use, and the types
of application that use encryption. We see an increase in the use of SSL, which coin-
cides with the surge of new applications that use SSL. For instance, Bittorrent clients
(Azureus and uTorrent) now offer SSL encryption as a way to hide from content-based
blocking of peer-to-peer applications. These factors indicate that SSL usage will con-
tinue to increase.
Our classiﬁer for encrypted trafﬁc builds on two observations. First, SSL does not
modify signiﬁcantly the the number of packets, their size, and their inter-arrival time
[5,6]. Second, TCP connections can be classiﬁed based on ﬂow-level information such
S. Uhlig, K. Papagiannaki, and O. Bonaventure (Eds.): PAM 2007, LNCS 4427, pp. 165–175, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
166
L. Bernaille and R. Teixeira
as duration, number of packets and mean inter-arrival time [7,8,9,10,11]. We extend the
classiﬁer presented in [12,13] to identify applications in encrypted SSL connections.
This classiﬁer, which we refer to as early identiﬁcation, identiﬁes the application asso-
ciated with a TCP connection using only the ﬁrst few packets in the connection. Our
method to identify encrypted trafﬁc involves two steps. First, we detect SSL trafﬁc.
Then, we apply early identiﬁcation to the ﬁrst encrypted application packets to recog-
nize the underlying application. With this method, we recognize encrypted applications
with more than 85% accuracy.
After comparing our trafﬁc classiﬁcation method with previous work in Section 2, we
present the packet traces we used to train our classiﬁer and to evaluate our mechanism
in Section 3. Section 4, brieﬂy introduces SSL, describes a content-based approach to
identify SSL connections, and characterizes SSL usage in our traces. Section 5 presents
our classiﬁcation mechanism and Section 6 evaluates it. We conclude in Section 7 with
a summary of our contributions and a discussion of future directions.
2 Related Work
Although any ﬂow-level classiﬁer [7,8,9,10,11,13,14] can potentially identify encrypted
applications, this paper is the ﬁrst to design an application-recognition mechanism for
encrypted trafﬁc and test it on real SSL trafﬁc. We choose to extend the classiﬁer pre-
sented in [12,13], because it can recognize the application associated with a TCP con-
nection early. All of the other classiﬁers rely on statistics on the whole connection,
which prevents them from being used online. An alternative method [15] uses connec-
tivity patterns for each host in the network. This approach could work for encrypted
trafﬁc, but its goal is different from ours: it ﬁnds services associated to hosts, whereas
we classify single TCP connections.
The methods presented in [14,16] are the only ones that share our goal of classi-
fying encrypted trafﬁc. As other ﬂow-level classiﬁers, however, this mechanism also
requires all packets in the connection before classifying it. In addition, we perform a
measurement-based study that ﬁrst characterizes the usage of SSL in two campus net-
works and then evaluates our mechanism against real SSL connections, whereas their
classiﬁer was only evaluated under simulated encrypted trafﬁc.
3 Packet Traces with Encrypted Trafﬁc
Our study relies on two sets of data: packet traces collected at the edge of two campus
networks and manually-generated traces. Packet traces allow us to characterize the us-
age of SSL in operational networks, when manually-generated traces help us validate
our classiﬁcation mechanism.
We used two one-hour traces collected at the edge of the Paris 6 network, in 2004
and in 2006 (referred to as P6-2004 and P6-2006, respectively) and a packet trace col-
lected at the edge of the UMass campus in 2005. Both traces collected on the Paris 6
network contain packet payload, which allows the identiﬁcation of SSL versions and
options. The UMass trace only captures 58 bytes for each packet, because of privacy
and security reasons. Fortunately, many packets do not contain any options (IP or TCP)
Early Recognition of Encrypted Applications
167
and, without options, 58 bytes capture four bytes of TCP payload, which is enough to
accurately identify SSL connections and the versions they use. In the UMass trace, 50%
of connections on SSL standard ports had 4 bytes of TCP payload.
To validate our method, we needed a ground truth, or SSL connections for which the
underlying application is known. We use two methods to obtain this ground truth. First,
we ﬁlter the Paris 6 traces to keep only connections directed to well known HTTPS and
POP3S servers in the university. To extend our validation to other types of trafﬁc, we
also manually encrypted traces consisting of other applications. We replay packet traces
over an encrypted tunnel and capture the resulting connections. We use three machines,
say A, B and a controller. Machine A represents the server of the TCP connection and
machine B the client. First, we establish a tunnel between A and B using stunnel1. Then,
the controller parses an existing packet trace. For each packet in a TCP connection, if
the packet was sent from the TCP server, the controller asks A to send the packet to B
over the encrypted tunnel, otherwise it asks B to send it.
4 Analysis of SSL Trafﬁc
This section presents a brief background on SSL and a content-based method to identify
SSL connections in packet traces. We end with a characterization of SSL in our traces.
4.1 Description of SSL
Secure Sockets Layer (SSL) provides authentication and encryption to TCP connec-
tions. SSL runs between the transport layer (usually TCP) and the application layer.
Three different versions of SSL have been developed: SSLv2 [17], SSLv3.0 [18] and
TLS [19]. As SSL version 2 (SSLv2) presents several security ﬂaws, its use is now
strongly discouraged. Its follow-up version is SSL version 3 (SSLv3.0). The latest ver-
sion, Transport Layer Security (TLS or SSLv3.1), is the standard speciﬁed by the Inter-
net Engineering Task Force (IETF) and is similar to SSLv3.0. The differences between
SSLv3.0 and TLS are minor (for instance, types of ciphers supported, pseudo-random
functions and padding policies) and do not affect the handshake or the packet sizes.
Therefore, we use SSLv3 to refer to both protocols.
Figure 1 presents an SSL handshake for SSLv2. The exact messages exchanged differ
for SSLv3, but the main steps remain the same. First, the client and the server negotiate
the SSL version they are going to use and choose an encryption algorithm. Second, the
server authenticates itself to the client (the client might do likewise if required by the
server) and both peers negotiate an encryption key. Finally, they terminate the hand-
shake, and can start exchanging application data over the encrypted channel.
4.2 Identifying SSL Connections
Many applications can be detected based on a well-known signature (for instance “GET
/index.html HTTP/1.1” for HTTP trafﬁc). Unfortunately, there is no such pattern for
SSL. The server Hello packet sets the conﬁguration of the connection (in particular,
1 http://www.stunnel.org
168
L. Bernaille and R. Teixeira
Client Hello
S e r v e r   H e l
l o
Master Key
S e r v e r   V e r i
f y
Client Finished
S e r v e r   F i n i s h e d
Negotiation of Versions
and Algorithms
Authentication and
Key Negociation
Handshake Conclusion
Client
Server
Fig. 1. Example of SSL handshake (SSLv2)
version and encryption algorithm). Therefore, we can analyze this packet to verify if
a connection is using SSL and determine the version. SSL connections rely on SSL
records transported using TCP. Each SSL record starts with a SSL header that is sent
unencrypted, and is followed by either SSL conﬁguration options (during the SSL hand-
shake) or by the encrypted application payload. The ﬁrst two bits in SSLv2 headers are
always 1 and 0, the following 14 bits contain the size of the SSL record and the third
byte is the message type (1 for “Client Hello” and 4 for “Server Hello”). The ﬁrst byte
of SSLv3.x (i.e. SSLv3.0 or TLS) packets is the message type (22 for conﬁguration
records and 23 for records with encrypted application payload). The second and third
bytes indicate the major and minor versions (3 and 0 for SSLv3.0 or 1 for TLS).
Let biti[x] be the content of bit x in the payload of packet i in the connection, biti[x :
y] the integer represented by the sequence of bits from x to y, Bytei[z] the value of byte
z, and Sizei the payload size of packet i (computed from ﬁelds in IP and TCP headers:
Internet Header Length, Total Length and Data Offset). We summarize the decision
process to determine if a connection is using SSL and the associated version in the
following algorithm:
If bit2[0] = 1 and bit2[1] = 0 and bit2[2 : 15] = Size2 and Byte2[3] = 4
Connection is an SSLv2 connection
Else If Byte2[1] = 22 and Byte2[2] = 3
Connection is an SSLv3.0 connection
If Byte2[3] = 0
Else If Byte2[3] = 1
Connection is a TLS connection
Else Connection is not using SSL
Else Connection is not using SSL
4.3 Description of SSL Trafﬁc
We applied our identiﬁcation mechanism to three traces: P6-2004, P6-2006 and UMass.
Table 1 shows the proportion of the SSL version found in each trace. We see that most
SSL trafﬁc consists of SSLv3.0 and TLS, although there are still a few instances of
SSLv2 in the P6-2006 trace. By comparing the proportion of SSL connections in the P6
traces from 2004 and 2006 (4.6% and 8.6%, respectively), we see a sharp increase in the
usage of SSL. This trend is supported by the SSL surveys achieved by netcraft [20] (in
2005 only, the use of SSL in the web servers they surveyed increased by 30%). On the
UMass trace, this proportion is lower. This difference is because the P6 traces consist
Early Recognition of Encrypted Applications
169
only of academic trafﬁc, whereas the UMass campus also has a dorm and, therefore,
contain many other types of applications (such as online games).
An interesting observation is the proportion of non-SSL trafﬁc in connections using
standard SSL ports (labeled as “SSL Port but not SSL”). We studied this trafﬁc in detail.
In P6-2004, all non-SSL connections on SSL ports were non-encrypted trafﬁc using port
443 (probably misconﬁgured web servers). In P6-2006, we still ﬁnd this non-encrypted
HTTP trafﬁc, but also observe other types of trafﬁc. For instance, the trace contains un-
encrypted SIP trafﬁc (VoIP connections from Instant Message softwares using port 443
to avoid ﬁrewalls), and HTTP connections using the CONNECT method. This method
is used when a web client connects to an SSL web page using a proxy. However, the
contacted servers were not proxies but web servers. It turned out these clients were try-
ing to connect to SMTP servers using the web servers as TCP proxies, probably to send
spam (this method works for misconﬁgured Apache servers with proxy capability). In
the UMass trace, we also found Bittorent connections using port 443 to avoid ﬁrewalls.
Finally, using the detection method presented in Section 4.2, we evaluated the pro-
portion of SSL on ports not usually associated with SSL (“SSL on non-SSL Ports”).
This proportion is not negligible and is even increasing on the P6 network. This indi-
cates that SSL is spreading to applications for which it was not formerly used.
Table 1. SSL versions
Trace Total Connections SSL Connections SSLv2 SSLv3 TLS SSL Port but not SSL SSL on non-SSL Ports
P6-2004
P6-2006
UMass
0.5M
1.0M
1.7M
4.6%
8.6%
1.2%
0.6% 81.0% 18.4%
0.2% 53.2% 46.6%
0 % 48% 52%
1.9%
1.1%
5.0%
1.1%
4.2%
1.5%
5 Classiﬁcation Mechanism
Our characterization in the previous section shows that SSL trafﬁc is increasing. We
now present a methodology to identify the applications in SSL connections. Figure 2
describes our classiﬁcation mechanism. This classiﬁer takes as input a stream of packets
from a TCP connection and outputs the application associated to the connection. It runs
in three steps: recognition of SSL connections, detection of the ﬁrst packet containing
application data, and recognition of the encrypted applications.
Sizes of ﬁrst 3 packets
in the connection
(and server port)
Application Classiﬁer
Application
YES
SSL
?
Detection of ﬁrst packet 
with encrypted payload: N
Sizes of packets
N, N+1 and N+2 
NO
Application
Fig. 2. Classiﬁer Overview
Encrypted
Application Classiﬁer
Encrypted Application
170
L. Bernaille and R. Teixeira
5.1 Recognition of SSL Trafﬁc
We use early classiﬁcation [13] to recognize SSL trafﬁc. We construct this classiﬁer in
two phases: training and online classiﬁcation. The training phase applies a clustering
algorithm to a set of sample TCP connections, which we call the training data. We
represent each connection in this data set in a P -dimensional space using the sizes and
directions of the ﬁrst P data packet ([13] presents a detailed analysis that justiﬁes using
packet sizes instead of other features such as Inter-Arrival Time). Resulting clusters
contain one or more applications. The online classiﬁcation uses a heuristic to assign a
TCP connection to one of the clusters and another heuristic to label it with one of the
applications in the cluster.
For this study, we use a training data set composed of the following applications:
Http, Ftp, Nntp, Pop3, Smtp, Ssh, Msn, Bittorent, Edonkey, SSLv2 and SSLv3. We
apply a signature-based ﬁltering method on the P6-2004 trace to select 500 random
connections for Http, Ftp, Nntp, Pop3, Smtp, Ssh, Msn and Edonkey. Since the amount
of identiﬁable Bittorent trafﬁc in our traces is small, we manually generate a Bittorent
trace from which we select 500 connections. Additionally, we use the method presented
in Section 4 to select 500 SSLv2 and SSLv3 connections from the P6-2006 trace.
We applied our clustering mechanism to this training set. We use a clustering algo-
rithm based on Gaussian Mixture Model [13]. We ﬁnd that using the ﬁrst three packets
and 35 clusters gives good results (the method to choose the number of packets and
clusters is described in [13]). To assign a new connection to a cluster, we compute
the probability that this connection belongs to each cluster and choose the one with
the highest probability. Finally, to label the connection, we test two methods: use the
dominant application in the cluster (Dominant heuristic in [13], or label the connection
according to the composition of the cluster and the server port it is using (Cluster+Port
heuristic in [13]). We evaluate the efﬁciency of this classiﬁer in Section 6.
5.2 Detection of the First Data Packet
After the classiﬁer establishes that the connection is SSL, it analyzes the packets in the
connection to ﬁnd the ﬁrst application packets. For SSLv2, the handshake can take four
or six packets, depending on whether the client and the server share an encryption key
that is still valid. To decide which handshake is used in a given connection, we check if
the second packet sent by the client starts a key negotiation (as in ﬁgure 1).
For SSLv3, this detection is more difﬁcult because the last packet in the SSL hand-
shake may contain an SSL negotiation record as well as records with encrypted applica-
tion payload. Therefore, to detect the ﬁrst application packet in SSLv3 connections we
inspect SSL records until we ﬁnd the ﬁrst record with content type equal to 23, which
indicates an application payload. This inspection is not computationally intensive be-
cause the header of each record contains the size of the record. Figure 3 shows the
distribution of the position of the ﬁrst SSL packet that contains application data across
all SSL connections. This result shows that there is never application data in the ﬁrst two
packets (which is expected from the RFC). This implies that it is safe to start inspecting
TCP payloads after the third packet to identify the ﬁrst application packet. This is con-
venient because that is what we need to detect SSL connections (as described in 5.1).
Early Recognition of Encrypted Applications
171
Figure 3 also shows that application data may start at any packet between 3 and 12,
which justiﬁes the need for the online packet inspection. The number of packets in the
handshake depends on whether the client and the server already share a session key. Be-
sides, a packet can consist of several SSL handshake records and SSL implementations
use different methods to regroup these records.
s
w
o
l
f
L
S
S
f
o