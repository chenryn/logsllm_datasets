---
author: Jim Hall
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5319
date: '2021-10-18 17:41:00'
editorchoice: false
excerpt: 增强 C 语言程序的弹性和可靠性的五种方法。
fromurl: https://opensource.com/article/21/10/programming-bugs
id: 13894
islctt: true
largepic: /data/attachment/album/202110/18/174123p4cz99skp9zz4nf4.jpg
permalink: /article-13894-1.html
pic: /data/attachment/album/202110/18/174123p4cz99skp9zz4nf4.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 增强 C 语言程序的弹性和可靠性的五种方法。
tags:
- C语言
thumb: false
title: C 语言编程中的 5 个常见错误及对应解决方案
titlepic: true
translator: unigeorge
updated: '2021-10-18 17:41:00'
---
> 
> 增强 C 语言程序的弹性和可靠性的五种方法。
> 
> 
> 
![](/data/attachment/album/202110/18/174123p4cz99skp9zz4nf4.jpg "Bug tracking magnifying glass on computer screen")
即使是最好的程序员也无法完全避免错误。这些错误可能会引入安全漏洞、导致程序崩溃或产生意外操作，具体影响要取决于程序的运行逻辑。
C 语言有时名声不太好，因为它不像近期的编程语言（比如 Rust）那样具有内存安全性。但是通过额外的代码，一些最常见和严重的 C 语言错误是可以避免的。下文讲解了可能影响应用程序的五个错误以及避免它们的方法：
### 1、未初始化的变量
程序启动时，系统会为其分配一块内存以供存储数据。这意味着程序启动时，变量将获得内存中的一个随机值。
有些编程环境会在程序启动时特意将内存“清零”，因此每个变量都得以有初始的零值。程序中的变量都以零值作为初始值，听上去是很不错的。但是在 C 编程规范中，系统并不会初始化变量。
看一下这个使用了若干变量和两个数组的示例程序：
```
#include 
#include 
int
main()
{
  int i, j, k;
  int numbers[5];
  int *array;
  puts("These variables are not initialized:");
  printf("  i = %d\n", i);
  printf("  j = %d\n", j);
  printf("  k = %d\n", k);
  puts("This array is not initialized:");
  for (i = 0; i  “大小差一”   off by one 错误。在长度为 5 的数组中，程序员在索引“5”处使用的值，实际上并不是数组的第 5 个元素。相反，它是内存中的一些其他值，根本与此数组无关。
这是一个数组越界的示例程序。该程序使用了一个只含有 5 个元素的数组，但却引用了该范围之外的数组元素：
```
#include 
#include 
int
main()
{
  int i;
  int numbers[5];
  int *array;
  /* test 1 */
  puts("This array has five elements (0 to 4)");
  /* initalize the array */
  for (i = 0; i < 5; i++) {
    numbers[i] = i;
  }
  /* oops, this goes beyond the array bounds: */
  for (i = 0; i < 10; i++) {
    printf("  numbers[%d] = %d\n", i, numbers[i]);
  }
  /* test 2 */
  puts("malloc an array ...");
  array = malloc(sizeof(int) * 5);
  if (array) {
    puts("This malloc'ed array also has five elements (0 to 4)");
    /* initalize the array */
    for (i = 0; i < 5; i++) {
      array[i] = i;
    }
    /* oops, this goes beyond the array bounds: */
    for (i = 0; i < 10; i++) {
      printf("  array[%d] = %d\n", i, array[i]);
    }
    free(array);
  }
  /* done */
  puts("Ok");
  return 0;
}
```
可以看到，程序初始化了数组的所有值（从索引 0 到 4），然后从索引 0 开始读取，结尾是索引 9 而不是索引 4。前五个值是正确的，再后面的值会让你不知所以：
```
This array has five elements (0 to 4)
  numbers[0] = 0
  numbers[1] = 1
  numbers[2] = 2
  numbers[3] = 3