encryption exponent s. For i = 1 to (cid:96), it calculates λi = (cid:126)v· Mi, where Mi is the vector corresponding to the ith row of M. In
addition, the algorithm chooses random r1, . . . ,r(cid:96) ∈ Zp. The ciphertext is published as CT =
C = M · e(g,g)αs, C(cid:48) = gs,
(C1 = gaλ1 · F(ρ(1))−r1 , D1 = gr1), . . . ,(C(cid:96) = gaλ(cid:96) · F(ρ((cid:96)))−r(cid:96) , D(cid:96) = gr(cid:96))
along with a description of (M,ρ).
KeyGenout(MSK,S) The key generation algorithm runs KeyGen(MSK,S) to obtain SK(cid:48) = (PK,K(cid:48) = gα gat(cid:48)
,L(cid:48) = gt(cid:48)
,{K(cid:48)
x =
F(x)t(cid:48)}x∈S). It chooses a random value z ∈ Z∗
p. It sets the transformation key TK as
PK, K = K(cid:48)1/z = g(α/z)ga(t(cid:48)/z) = g(α/z)gat , L = L(cid:48)1/z = g(t(cid:48)/z) = gt ,
{Kx}x∈S = {K(cid:48)1/z
x
}x∈S
and the private key SK as (z,TK).
Transformout(TK,CT) The transformation algorithm takes as input a transformation key TK = (PK,K,L,{Kx}x∈S) for a set S
and a ciphertext CT = (C,C(cid:48),C1, . . . ,C(cid:96)) for access structure (M,ρ). If S does not satisfy the access structure, it outputs ⊥.
Suppose that S satisﬁes the access structure and let I ⊂ {1,2, . . . , (cid:96)} be deﬁned as I = {i : ρ(i) ∈ S}. Then, let {ωi ∈ Zp}i∈I
be a set of constants such that if {λi} are valid shares of any secret s according to M, then ∑i∈I ωiλi = s. The transformation
algorithm computes
(cid:16)
e(C(cid:48),K)/
(cid:17)
(cid:17)
,L)· ∏i∈I e(Dωi
e(∏i∈I Cωi
i
i
∏i∈I e(g,g)taλiωi
(cid:16)
=
,Kρ(i))
= e(g,g)sα/z
e(g,g)sα/ze(g,g)ast /
It outputs the partially decrypted ciphertext CT(cid:48) as (C,e(g,g)sα/z), which can be viewed as the El Gamal ciphertext (M ·
Gzd,Gd) where G = e(g,g)1/z ∈ GT and d = sα ∈ Zp.
Decryptout(SK,CT) The decryption algorithm takes as input a private key SK = (z,TK) and a ciphertext CT. If the ciphertext is
not partially decrypted, then the algorithm ﬁrst executes Transformout(TK,CT). If the output is ⊥, then this algorithm outputs
⊥ as well. Otherwise, it takes the ciphertext (T0,T1) and computes T0/T z
Notice that if the ciphertext is already partially decrypted for the user, then she need only compute one exponentiation and no
pairings to recover the message.
1 = M .
aSee Waters [42] for details on how to implement this hash in the standard model. For our purposes, one can think of F as a random oracle.
Figure 5: A CPA-secure CP-ABE outsourcing scheme based on the large-universe construction of Waters [42, Ap-
pendix C].
Theorem 3.2 Suppose the large universe construction
of Waters [42, Appendix C] is a selectively CPA-secure
CP-ABE scheme. Then the outsourcing scheme above is
selectively RCCA-secure in the random oracle model for
large message spaces.6
We present a proof of Theorem 3.2 in Appendix A.
4 Outsourcing Decryption for Key-Policy
ABE
4.1 A CPA-secure Construction
We now present an outsourcing scheme based on the
large universe KP-ABE construction due to Goyal,
Pandey, Sahai and Waters [24].7 The Setup and Encrypt
algorithms are identical to [24]. We modify KeyGen to
output a transformation key, introduce a Transform algo-
rithm, and then modify the decryption algorithm to han-
dle outputs of Encrypt as well as Transform. The full
construction is presented in Figure 6.
Theorem 4.1 Suppose the GPSW KP-ABE scheme [24]
is selectively CPA-secure. Then the KP-ABE scheme of
Figure 6 is a selectively CPA-secure outsourcing scheme.
Discussion. As in the previous construction, we deﬁned
the transformation key TK as being created by the master
authority. We again note that our outsourcing approach
above is actually backwards compatible with existing de-
ployments of the GPSW system.
Due to restrictions on space, we leave the proof of se-
curity to the full version of this work [26].
4.2 An RCCA-secure construction
We now extend our above results, which only hold for
CPA-security, to the stronger RCCA-security guarantee.
Once again, we accomplish this using the techniques
from Fujisaki and Okamoto [18]. The Setup and Key-
Gen algorithms operate exactly as before, except the pub-
lic key additionally includes the value e(g,h)α (which
was already computable from existing values) and the
description of hash functions H1 : {0,1}∗ → Zp and
H2 : {0,1}∗ → {0,1}k.
6The security of this scheme follows for large message spaces; e.g.,
k-bit spaces where k ≥ λ , the security parameter. To obtain a secure
scheme for smaller message spaces, replace C(cid:48)(cid:48) with any CPA-secure
symmetric encryption of M using key H2(R) and let the range of H2 be
the key space of this symmetric scheme. Since the focus of this work is
on efﬁciency, we’ll typically be assuming large enough message spaces
and therefore opting for the quicker XOR operation.
7This construction was originally described using access trees; here
we generalize it to LSSS access structures.
Encryptrcca(PK, M ∈ {0,1}k,S).
The encryption al-
gorithm chooses a random R ∈ GT .
It then computes
s = H1(R, M ) and r = H2(R). For each x ∈ S it gener-
ates Cx as in the CPA-secure scheme. The ciphertext is
published as CT =
C = R· e(g,h)αs, C(cid:48) = gs, C(cid:48)(cid:48) = r⊕ M , {Cx}x∈S
along with a description of S.
Transformrcca(TK,CT). The transformation algorithm
recovers the value e(g,h)sα/z as before.
It outputs the
partially decrypted ciphertext CT(cid:48) as (C,C(cid:48)(cid:48),e(g,h)sα/z).
Decryptrcca(SK,CT). The decryption algorithm takes
as input a private key SK = (z,TK) and a ciphertext CT.
If the ciphertext is not partially decrypted, then the algo-
rithm ﬁrst executes Transformout(TK,CT). If the output
is ⊥, then this algorithm outputs ⊥ as well. Otherwise, it
takes the ciphertext (T0,T1,T2) and computes R = T0/T z
2 ,
M = T1⊕H2(R), and s = H1(R, M ). If T0 = R·e(g,h)αs
and T2 = e(g,h)αs/z, it outputs M ; otherwise, it outputs
the error symbol ⊥.
Theorem 4.2 Suppose the construction of GPSW [24]
is a selectively CPA-secure KP-ABE scheme. Then the
outsourcing scheme above is selectively RCCA-secure in
the random oracle model for large message spaces.
See the footnote on Theorem 3.2 for a deﬁnition and dis-
cussion of “large message spaces”. We present a proof
of Theorem 4.2 in the full version [26] of this work.
5 Discussion
5.1 Achieving Adaptive Security
The systems we presented were proven secure in the se-
lective model of security. We brieﬂy sketch how we can
adapt our techniques to achieve ABE systems that are
provably secure in the adaptive model.8
Recently, the ﬁrst ABE systems that achieved adap-
tive security were proposed by Lewko et al. [28] using
the techniques of Dual System Encryption [41]. Since
the underlying structure of the KP-ABE and CP-ABE
schemes presented by Lewko et al. is almost respectively
identical to the underlying Goyal et al. [24] and Wa-
ters [42] systems we use, it is possible to adapt our con-
struction techniques to these underlying constructions.9
8We brieﬂy note that it is simple to prove adaptive security of our
schemes in the generic group model like Bethencourt, Sahai, and Wa-
ters [7]. Here we are interested in proofs under non-interactive assump-
tions.
9The main difference in terms of the constructions is that the sys-
tems proposed by Lewko et al. are set in composite order groups where
the “core scheme” sits in one subgroup. The primary novelty of their
work is in developing adaptive proofs of security for ABE systems.
Setup(λ ,U). The setup algorithm takes as input a security parameter and a universe description U. To cover the most general
case, we let U = {0,1}∗. It then chooses a group G of prime order p, a generator g and a hash function F that maps {0,1}∗
to G.a In addition, it chooses random values α ∈ Zp and h ∈ G. The authority sets MSK = (α,PK) as the master secret key.
The public key is published as
PK = g,
gα ,
h, F
Encrypt(PK, M ,S). The encryption algorithm takes as input the public parameters PK, a message M to encrypt, and a set of
attributes S. It chooses a random s ∈ Zp. The ciphertext is published as CT = (S,C) where
C = M · e(g,h)αs, C(cid:48) = gs, {Cx = F(x)s}x∈S.
KeyGenout(MSK,(M,ρ)). Parse MSK = (α,PK). The key generation algorithm runs KeyGen((α, PK),(M,ρ)) to obtain SK(cid:48) =
(cid:96))). Next, it chooses a random value z ∈ Zp, computes the transformation key
(PK,(D(cid:48)
TK as below, and outputs the private key as (z,TK). Denoting r(cid:48)
1 = hλ1 · F(ρ(1))r(cid:48)
1), . . . ,(D(cid:48)
1 = gr(cid:48)
(cid:96),R(cid:48)
1 ,R(cid:48)
PK,
(D1 = D(cid:48)1/z
1 = hλ1/z · F(ρ(1))r1 , R1 = R(cid:48)1/z
i/z as ri, TK is computed as:
1 = gr1), . . . ,(D(cid:96) = D(cid:48)1/z
(cid:96)
, R(cid:96) = R(cid:48)1/z
(cid:96)
)
Transformout(TK,CT). The transformation algorithm takes as input a transformation key TK = (PK,(D1,R1), . . . ,(D(cid:96),R(cid:96))) for
access structure (M,ρ) and a ciphertext CT = (C,C(cid:48),{Cx}x∈S) for set S. If S does not satisfy the access structure, it outputs
⊥. Suppose that S satisﬁes the access structure and let I ⊂ {1,2, . . . , (cid:96)} be deﬁned as I = {i : ρ(i) ∈ S}. Then, let {ωi ∈ Zp}i∈I
be a set of constants such that if {λi} are valid shares of any secret s according to M, then ∑i∈I ωiλi = s. The transformation
algorithm computes
(cid:32)
∏
i∈I
e(C(cid:48),∏
i∈I
Dωi
i )/
e(Ri,Cωi
ρ(i))
(cid:33)
(cid:32)
∏
i∈I
(cid:33)
hλiωi/z · F(ρ(i))riωi)/
e(gri ,F(ρ(i))sωi)
= e(gs,∏
i∈I
(cid:32)
∏
i∈I
(cid:33)
e(gri ,F(ρ(i))sωi)
= e(g,h)sα/z ·∏
i∈I
e(gs,F(ρ(i))riωi)/
= e(g,h)sα/z
It outputs the partially decrypted ciphertext CT(cid:48) as (C,e(g,h)sα/z), which can be viewed as the El Gamal ciphertext (M ·
Gzd,Gd) where G = e(g,h)1/z ∈ GT and d = sα ∈ Zp.
Decryptout(SK,CT). The decryption algorithm takes as input a private key SK = (z,TK) and a ciphertext CT. If the ciphertext is
not partially decrypted, then the algorithm ﬁrst executes Transformout(TK,CT). If the output is ⊥, then this algorithm outputs
⊥ as well. Otherwise, it takes the ciphertext (T0,T1) and computes T0/T z
aGoyal et al. [24] give a standard model instantiation for F using an n-wise independent hash function (in the exponents) with the restriction
1 = M .
that any ciphertext can contain at most n attributes. For our purposes, one can think of F as a random oracle.
Figure 6: A CPA-secure KP-ABE outsourcing scheme based on the large-universe construction of Goyal, Pandey,
Sahai and Waters [24].
Figure 7: Architecture and data ﬂow for our cloud-based outsourcing proxy. An application programmatically instan-
tiates one or more instances of the outsourcing proxy, which is loaded from a public Amazon Machine Image (AMI)
in the S3 storage cloud. Next the application uploads a transform key TK to the proxy, and subsequently instructs
the proxy to obtain ciphertexts from remote web servers or from locations within the S3 storage cloud. The proxy
transforms the ciphertexts and returns the partially-decrypted result to the application, which completes decryption to
obtain a plaintext. We emphasize that the setup step including uploading the transformation key only needs to be done
once; subsequently, many decryption steps can follow. In an alternative conﬁguration (not shown) the application can
also upload ABE ciphertexts to the proxy from its local storage. We note the ﬁrst conﬁguration conﬂates the ciphertext
delivery and partial decryption and thus requires no additional transmissions relative to non outsourcing solutions. The
alternative will require an round trip for each outsourcing operation.
One might hope that the proof of adaptive security
could be a black box reduction to the adaptively secure
schemes of Lewko et al. Unfortunately, this seems in-
feasible. Consider any direct black box reduction to the
security of the underlying scheme. When the attacker
makes a query to some transformation key, the reduction
algorithm has two options. First, it could ask the security
game for the underlying ABE system for a private key.
Yet, it might turn out that the key both is never corrupted
and is capable of decryption for the eventual challenge
ciphertext. In this case the simulator will have to abort.
A second option is for the reduction algorithm not to ask
for such a key, but ﬁll in the transformation key itself.
However, if that user’s key is later corrupted it will be
difﬁcult for the reduction to both ask for such a private
key and match it to the published transformation key.
Accordingly, to prove security one needs to make a
direct Dual-System encryption type proof. The proof
would go along the lines of Lewko et al., with the ex-
ception that in the hybrid stage of the proof all private
keys and transformational keys will be set (one by one)
to be semi-functional including those that could decrypt
In the Lewko et al.
the eventual challenge ciphertext.
proof giving a private key that could decrypt the chal-
lenge ciphertext would undesirably result in the sim-
ulator producing observably incorrect correlations be-
tween the challenge ciphertext and keys. However, if
we only give out the transformation part of such a key
(and keep the whole private key hidden) then this cor-
relation will remain hidden. This part of the argument
is somewhat similar to the work of Lewko, Rouselakis,
and Waters [29], who show that in their leakage resilient
ABE scheme if only part of a private key is leaked such
a correlation will be hidden.
5.2 Checking the Transformation
In the description of our systems a proxy will be able
to transform any ABE ciphertext into a short ciphertext
for the user. While the security deﬁnitions show that an
attacker will not be able to learn an encrypted message,
there is no guarantee on the transformation’s correctness.
In some applications a user might want to request the
transformation of a particular ciphertext and (efﬁciently)
check that the transformation was indeed done correctly
(assuming the original ciphertext was valid). It is easy to
adapt our RCCA systems to such a setting. Since decryp-
tion results in recovery of the ciphertext randomness, one
can simply add a tag to the ciphertext as H(cid:48)(r), where H(cid:48)
is a different hash function modeled as a random oracle
and r is the ciphertext randomness. On recovery of r the
user can compute H(cid:48)(r) and make sure it matches the tag.
6 Performance in Practice
To validate our results, we implemented the CPA-secure
CP-ABE of Section 3 as an extension to the libfenc At-
tribute Based Encryption library [25]. We then used this
as a building block for a platform for accelerating ABE
decryption through cloud-based computing resources.
The core of our solution is a virtualized outsourcing
“proxy” that runs in the Amazon Elastic Compute Cloud
(EC2). Our proxy exists as a machine image that can
be programmatically instantiated by any application that
requires assistance with ABE decryption. As we demon-
strate below, this proxy is particularly useful for accel-
erating decryption on constrained devices such as mo-
bile phones. However, the system can be used in any
application where signiﬁcant numbers of ABE decryp-
tions must be performed, e.g., in large-scale search op-
Outsourcing ProxyAmazon EC2Outsourcing ProxyOutsourcing ProxyApplicationAmazon S3 DatastoreTKABE ciphertext(s)Web serverProxy AMIPartially-decrypted ciphertext(s)erations.10 The use of on-demand computing is particu-
larly well-suited to our outsourcing techniques, since we
do not require trusted remote servers or long-term stor-
age of secrets.
System Architecture.
Figure 7 illustrates the architec-
ture of our outsourcing platform. The proxy is stored in
Amazon’s S3 datastore as a public Amazon Machine Im-