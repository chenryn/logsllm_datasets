### Version
2.6.0
### Reproduction link
https://jsfiddle.net/goblinlord/k64bx8gp/9/
### Steps to reproduce
  1. Create an element with `type` attribute set to either `checkbox` or `radio`.
  2. Call `preventDefault` on the `click` event (or just set `@click.prevent`)
  3. Set the `checked` value synchronously to a different value
### What is expected?
New value that is set should be reflected in the rendered markup.
### What is actually happening?
The result of the value changing is not reflected in the in the rendered state
even though the value is actually changed based on what is shown in Vue dev
tools.
* * *
This worked prior to `2.6.0` and I can not find any documentation indicating
the behavior changed or why it would change. In the reproduction link you can
comment out the `2.6.0` version and uncomment the line above it with `2.5.22`.
On `2.5.22` it works as expected.
I have been using this previously when wrapping an input with a styled
alternative with additional markup/styling. The purpose of having
`preventDefault` is to allow the decision of the value change to be made in a
location other than the checkbox itself. For example, we could easily display
a dialog box when the user clicks this and then when it is closed set the
state based on the response. Removing `preventDefault` causes the checkbox to
toggle. If this happens but we want to wait until a later time to set the
state, the desired state is not reflected properly until that time. Some
cases, no async work is done and it is desirable to change state immediately.
In those cases, a simple `v-model` can be used with the same exact component.
A dialog box is just one example, I also have cases where there is an network
call before the actual state is changed. (one style is a toggle slider for
example but i have other styled inputs as well)