activities. Every time that a request is received and no outgoing edge from
the current state matches with it, an alert can be triggered. Taking advan-
tage of a proxying algorithm to carry on the conversation with the client, it
is possible to build a training set to automatically reﬁne the existing state
machine, thus reacting in a very precise way to 0-days attacks.
4 Dependencies and Proxies
4.1 Intra-protocol Dependencies
Examining the conversation between a source and a server we can identify two
diﬀerent types of dependencies. We can observe dependencies in the content
of a TCP session (intra-protocol dependencies), such as the cookie ﬁeld men-
tioned before, and dependencies between diﬀerent TCP sessions (inter-protocols
dependencies). This ﬁrst section focuses on the former.
In order to carry on a successful conversation with the client, it is impor-
tant to correctly handle cookie ﬁelds, that is protocol ﬁelds of mutating content
whose value must recur in both client requests and server answers. Two diﬀerent
situations can be identiﬁed:
1. The client sets the cookie in its request, and the value must be reused in the
server answer. In this case the emulator must be able to retrieve the value
from the incoming request and copy it, or a derived value from it (e.g. the
value incremented by 1) in the generated answer.
2. The server sets the cookie in its answer, and the client must reuse the same
value for the following requests to be accepted. From the emulator point of
view, this does not generate any issue. The server label will contain a valid
answer extracted from a training ﬁle, using a certain value for the ﬁeld. The
corresponding ﬁeld in the client requests will be classiﬁed as mutating. This
leads only to two approximations: the emulator will always use the same
value, and it will accept as correct any value used by the client without
discarding the wrong ones. These approximations might be exploited by a
malicious user to ﬁngerprint a ScriptGen honeypot, but can still be consid-
ered as acceptable when dealing with attack tools.
We will further focus here on the ﬁrst scenario, that is the most challenging
since it requires the emulator to identify the cookie ﬁelds and establish content
dependencies between the client requests and the following answers.
Automatic Handling of Protocol Dependencies
191
In order to identify these dependencies, it is necessary to correlate the content
of client requests with the content of the following server answers. By using many
training conversations, we are able to reliably identify dependencies by taking
advantage of statistical diversity. Using a reduced number of samples, in fact,
makes it diﬃcult to reliably deduce this kind of relationship. For instance, the
value of a mutating ﬁeld in the client request might incidentally match the
content of the data payload sent back by the server in a following message of the
conversation. Using a large amount of samples drastically reduces the probability
of false deductions.
The algorithm presented in this paper to handle content dependencies is com-
posed of two separate steps: link generation and consolidation.
During link generation, the algorithm takes into consideration each request
contained in the training set, enriched by the output of region analysis, and
correlates it with all the following server answers contained in the corresponding
training conversation. The algorithm takes into consideration all the bytes in
the request that are not covered by a signiﬁcant ﬁxed region. A signiﬁcant ﬁxed
region is deﬁned as a region whose content always has a unique match in the
client request. Many regions are not big enough to be considered as signiﬁcant
when considered alone. Having a single match inside the client request, signiﬁcant
ﬁxed regions can therefore be used as markers to deﬁne relative positions inside
the client request.
For instance, representing a ﬁxed region as F(“content”) and a mutating re-
gion as M(), we consider the following output of the region analysis:
F(“LOGIN:”)+M()+F(“TIME:”)+M()+F(“:”)+M()
that matches, for instance, the following client request:
“LOGIN: bob TIME: 12:13”
The ﬁxed region F(“LOGIN:”) will be considered as signiﬁcant. But the ﬁxed
region F(“:”) will have multiple matches inside the client request and will not
be used as marker.
For all those bytes that are not covered by these markers, the algorithm
correlates each byte with the server answers using a correlation function. In the
most simple case, the correlation function returns 1 if the bytes match, and
returns 0 if the bytes diﬀer. For each encountered match, the algorithm tries to
maximize the number of consecutive correlated bytes starting from a minimum
of two. For instance, we consider these two simple training conversations:
1. R1: “Hi, my ID is 147 what time is it?”
A1: “Welcome 147, time is 14:05 ”
2. R1: “Hi, my ID is 134 what time is it?”
A1: “Welcome 134, time is 14:18 ”
In this case, region analysis will enrich the request generating two signiﬁcant
ﬁxed regions: “Hi, my ID is ” (F1) and “ what time is it?” (F2). For each
192
C. Leita, M. Dacier, and F. Massicotte
training conversation, the link generation algorithm will search for correlations
between the remaining bytes of the request and the following answers, producing
links. A link is a logical object that provides in a dynamic way the content to be
put in a certain position of the server answer. Diﬀerent kinds of links might be
introduced in the future. For the time being, when a content match is found in
a server answer, the matching content is replaced with the output of a matching
link. A matching link is deﬁned by the tuple L = (Rq, S, R, Os, Ot)
– Rq: The client request the link is referring to
– S : The starting marker
– R: The trailing marker
– Os: An oﬀset with respect to the starting marker
– Ot: An oﬀset with respect to the trailing marker
To better understand the meaning of these characteristics, we can refer back
to the previous example. For the ﬁrst training conversation, the link generation
would deﬁne two links in the server answer: “Welcome L1, time is L2:05”. We
will have
L1 = (R1, F 1, F 2, 0, 0)
L2 = (R1, F 1, F 2, 0,−1)
Instead, for the second training conversation the resulting server answer will
be: “Welcome L3, time is 14:18”. L3 will be identiﬁed by the tuple:
L3 = (R1, F 1, F 2, 0, 0)
From this example it is clear that link generation parses each conversation
independently, making optimistic guesses on the dependencies. Link generation
therefore generates many guesses on the content dependencies. Some of them
(links L1and L3) might be correct, others (such as link L2) might be coincidental
matches between the request content and the payload of the answer.
The second step of the analysis consists of taking advantage of the statistical
variability to consolidate these guesses, ﬁltering out the coincidental matches
and taking into consideration only the real content dependencies. This step is
therefore called consolidation.
The input to this step is a set of proposals for a certain server answer generated
by the previous link generation. The algorithm takes into consideration each byte
and compares the content of each proposal for that byte. This content can be
either a link or the value of the answer in the original training ﬁle. The most
recurring content is put in the consolidated answer, while the other ones are
discarded. All the proposals having a content for that byte diﬀering from the
chosen one will not be taken into consideration any more for the remaining bytes.
Referring back to the previous example, the output of the consolidation phase
for answer A1 will be: “Welcome L1=3, time is 14:05”.
Figure 3 represents the consolidation behavior in a very pessimistic case. In
this case, the number of misleading links is as high as the number of proposals.
Automatic Handling of Protocol Dependencies
193
Fig. 3. Consolidation
The algorithm is such that the consolidated answer will always be equal at
least to one of the proposals. Also, increasing the number of training samples
will increase the number of proposals, therefore increasing the robustness to
misleading links. The number of valid proposals at the end of the algorithm can
be considered as the conﬁdence level for the validity of the consolidated answer.
During emulation, the link information is used to transform the referenced
content of the requests and provide the content for the server answers. Using the
signiﬁcant ﬁxed regions as markers, and oﬀsets to specify relative positions, it is
possible to correctly retrieve variable length values.
What has been stated herein with reference to simple equality relations can
be extended to other types of relations, such as incrementing counters, by simply
deﬁning diﬀerent types of links.
4.2 Inter-protocols Dependencies
In order to handle dependencies among, for instance, diﬀerent TCP sessions, it
is necessary to re-deﬁne the notion of state in the ScriptGen model. In [10], we
bound the emulation state to a single TCP session. Each TCP connection was
associated with a diﬀerent state, and any event or side-eﬀect outside that binding
was not taken into consideration. In order to allow dependency handling among
diﬀerent sessions, the deﬁnition of state must be widened. For this reason utilize
the concept of conversation: a conversation is deﬁned as the whole amount of
data that has been exchanged between a single attacking source and the attacked
server in the training data. The attacking source is identiﬁed by its IP address
and a timestamp, in order to take into consideration dynamic IP allocation. The
same IP address, when coming back after a period of time greater than 24 hours,
will be considered as a diﬀerent source. A conversation therefore consists of all
194
C. Leita, M. Dacier, and F. Massicotte
Fig. 4. Inter-protocols dependencies
the activities performed by an attacker towards the vulnerable host, and might
be composed of several TCP sessions and several exchanges of UDP messages.
Considering each conversation as the domain for the inter-protocols analysis,
we identiﬁed two diﬀerent types of session dependency:
– Session interleaving: some protocols spread the interaction between the
client and the server on multiple connections to diﬀerent ports. For instance
FTP separates the control connection from the data connection. Messages
seen on one session initiate activities on the other one: an FTP recv command
on the control connection will cause traﬃc to be generated on the data
connection.
– Exploits: when a vulnerable service is attacked by a malicious client, the
client might succeed in exploiting a buﬀer overﬂow attack on the victim over
a certain port and open a previously closed port. We will see that this kind
of dependency is extremely important: section 5 will show how the incorrect
handling of this kind of dependencies can inﬂuence the conversation with
the client.
From a practical point of view, the two dependencies are illustrated in Figure 4.
It is interesting to notice how, in both cases, a client request in a given TCP ses-
sion modiﬁes the server state triggering events that are outside the scope of the
connection itself. In the case of session interleaving, the request triggers a server
message on a diﬀerent connection; in the case of the exploit dependency, the request
opens a previously closed port. It is important to understand that these are just
two examples of external state modiﬁcations that can be caused by client requests.
Referring to the cause of the exploit, another common behavior observed in buﬀer
overﬂow attacks consists of actively fetching malware from an external location.
This speciﬁc case is extremely interesting and is subject of ongoing research.
A session interleaving dependency is triggered by the following conditions: i)
more than one session is open (e.g. A and B) ii) after a client request in session A,
and eventually an answer from the server for that session, the ﬁrst encountered
packet is an answer from the server in session B. This means in fact that the
request on session A has inﬂuenced the state of session B, triggering a message
from the server.
Automatic Handling of Protocol Dependencies
195
Knowing the list of commonly open ports for the emulated server, the exploit
session dependency is triggered if the following conditions hold: i) session A is
bound to a known open port (e.g. port 139 on a Windows 2000 host) ii) session
B is targeting a closed port (e.g. port 4444 on the same Windows 2000 host) iii)
an outgoing TCP SYN/ACK is sent by the server from session B after having
received a request in session A. The TCP SYN/ACK means in fact that the
port, previously known to be closed, is now open.
Once dependencies are identiﬁed, ScriptGen emulates causality through a sim-
ple signalling method between diﬀerent state machines. During this emulation,
the emulator allocates diﬀerent broadcast buses for signals, one for each source,
as shown in Figure 5. When the emulator reaches a state that the dependency
analysis has identiﬁed as the trigger for a session dependency, a signal is sent on
the bus for that source. The other state machines will be notiﬁed of the signal
and will eventually react to it. With respect to session interleaving, the given
request will generate a signal that will trigger a transition on the state machine
associated with session B. The transition to the new state will therefore generate
a new server message, that will be sent back to the client emulating the correct
behavior. In the case of the exploit session dependency, the state machine asso-
ciated to the closed port will start accepting connections on that port only after
having received the signal corresponding to the client request. This will allow
the correct emulation of the expected server behavior.
4.3 Proxying and Incremental Reﬁnement
One of the main contributions of this paper consists in being able to react to
new activities, triggering new alerts and being able to reﬁne the existing state
machine. To do so, we reﬁne the existing region analysis algorithm in order to