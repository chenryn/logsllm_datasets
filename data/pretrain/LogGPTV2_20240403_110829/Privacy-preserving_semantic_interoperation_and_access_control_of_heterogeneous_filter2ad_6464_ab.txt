because runtime mediation does not need the expert at all.
Compared with the semi-automatic method, totally au-
tomatic ontology-mapping table generation does not need
a trusted human expert, so it achieves more privacy, al-
though sometimes it may not achieve perfect accuracy (of
mapping). Automatic ontology-mapping techniques are well
studied [19]. In particular, in [16] we developed a privacy-
preserving ontology-mapping scheme where two encrypted
ontologies can be automatically matched through a peer-to-
peer protocol without (a) revealing the terms of any ontology
or (b) involvement of any third parties. (The main idea is
to leverage commutative encryption techniques.)
It should be noticed that ontology-mapping is not schema-
mapping. To enhance privacy, we do not map A’s schema to
B’s schema directly. Hence the terms used in the ontology-
mapping table are typically just a synonym of a schema
term. This obfuscation technique will be further addressed
in Section 4.2.
Finally, the role-mapping table, which maps organization
A’s role hierarchy to B’s role hierarchy (and vice versa), can
be generated in a similar way.
Encrypted ontology mapping rules. The ontology-map-
5Note that we use symmetric key cryptography.

SQL query
against
A’s ontology 
and role 
hierarchy
Mediator
SQL Parser
Encrypted Ontology 
and Role
mapping tables
Semantic  
Query Rewriting 
and Translation
Requests
against
B’s ontology
and role
hierarchy
Access
Controller
The filtered 
semantic
requests
B’s schema
Organization
B
Semantic requests 
to syntactic 
requests
translation
SQL query 
against B’s 
schema
Schema
Obfuscation
A query
Attribute Bitmap Showing which 
Attributes are in the returned Data 
A’s 
ontology
B’s 
ontology
Schema mediation 
Organization
A
Translated Data against A’s schema
Online Processing
A’s syntactic
AC policy
Offline
Processing
Syntactic authorizations to 
semantic authorizations
translation
A’s ontology
A’s semantic
AC policy
against
A’s ontology
and role 
hierarchy
DB-B
Results
Data 
Translation
Syntactic authorizations to 
semantic authorizations
translation
B’s syntactic
AC policy
B’s ontology
B’s semantic
AC policy
against
B’s ontology
and role 
hierarchy
Figure 1: Architecture of PACT
ping rules used in our system are of three forms:
(1) Binary Mapping Rules: A binary mapping rule is a triple
listing two concepts from two diﬀerent ontologies and the re-
lationship among them. For example, an entry in the map-
ping table may be the triple:
(O1.EK1 (Vehicle), O2.EK2 (Automobile), OWL.subClassOf)
Here, O1 (O2) denotes the ontology of organization 1 (2),
and K1 (K2) is the master key of organization 1 (2). This
entry indicates that O2.Automobile is a subClassOf (as de-
ﬁned in the namespace OWL [6]) of O1.Vehicle.
(2) Split/Merge Attribute Rules: Consider the example, where
Organization 1 uses an attribute Name and that is split into
two attributes-names FirstName and LastName in the in-
formation system of Organization 2. To capture such rules,
we use the “split/merge attribute” rules, e.g.,
(O1.EK1 (Name),
Merge(O2.Ek2 (FirstName), O2.Ek2 (LastName))).
(3) Mapping Functions: These functions are used to convert
data values. For example, a conversion function between
Dollar and PoundSterling, Metre and Feet, etc.
(4) Complex Mapping Rules: These rules show how a con-
cept in one ontology representing a table can be expressed
as a SQL query using concepts in another ontology. Com-
plex mapping rules have the following components: (i) A
SQL query using the terms in the responding organization’s
ontology: the requesting organization’s query will be trans-
lated into this SQL query or its variant; (ii) A table, T, in
the requestor’s ontology and used in the requestor’s query,
and, (iii) Binary Mapping rules, Split/Merge Attribute rules
or Mapping Functions mapping all the results of the SQL
query (in (i)) to attributes in table T.
Example 1. A complex mapping rule is of the following
form:
Concept in O1:
Mapped to query:
select c.Ek2 (CarID), c.Ek2 (Make),
c.Ek2 (Model), c.Ek2 (Year), p.Ek2 (Price) from Ek2 (Car) c,
Ek2 (Prices) p where c.Ek2 (ID) = p.Ek2 (ID) and p.Ek2 (Price)
> 40,000
Mapping details:
O1.Ek1 (LuxuryCar).Ek1 (VehID) = O2.Ek2 (Car).Ek2 (CarID)
O1.Ek1 (LuxuryCar).Ek1 (Mk) = O2.Ek2 (Car).Ek2 (Make)
O1.Ek1 (LuxuryCar).Ek1 (Md) = O2.Ek2 (Car).Ek2 (Model)
EK1 (LuxuryCar)
O1.Ek1 (LuxuryCar).Ek1 (Yr) = O2.Ek2 (Car).Ek2 (Year)
O1.Ek1 (LuxuryCar).Ek1 (Pr) =
ConvertEuro2Dollar(O2.Ek2 (Prices).Ek2 (Price))
This rule indicates that a table LuxuryCar in a database associ-
ated with organization 1, can be expressed as a join between the
tables car and prices in the database associated with organization
2. Note that the attributes from the tables O2.car and O2.price
may not be the same in the table O1.LuxuryCar. In reality, the
attributes in the table LuxuryCar may be named CarID, Mk,
MD, Yr. The correspondence between the attributes CarID, Mk,
MD, Yr in the table O1.LuxuryCar and the attributes CarID,
Make, Model, Year in the table O2.Car respectively must also be
stated as entries in the mapping table for the rule to be correctly
interpreted. We also show that the attribute O2.Prices.Price
needs currency conversion using a provided function.
Finally, we postpone the discussion on how syntactic to
semantic access control policy translation is done to the next
section.
4.2 Realtime Query Processing
We now show how a query from the requestor organization
is mediated and then answered by the responder organiza-
tion in PACT.
Step 1: Schema Obfuscation and Query Encryption
When a query is issued by an employee of the requestor or-
ganization, the query is written against the employee’s user
ontology instead of the requestor’s schema. In this way, the
requestor’s schema is kept private. We refer to this process
as schema obfuscation. Conceptually, schema obfuscation
replaces a schema term in the query with a randomly chosen
synonym in the user ontology.
Besides enhancing privacy, schema obfuscation has some
side beneﬁts. (1) It increases the extensibility and maintain-
ability of the system, because the database and its schema
may be changed and new terms can be added without re-
quiring a change in the ontology-mapping table used by the
mediator, as long as the newly added database term can be
mapped to a term in the existing ontology. (2) Avoiding
the tasks to update the ontology-mapping table yields more
security because the system is the most vulnerable when the
human expert is involved.
Similar to schema obfuscation, PACT also performs role
obfuscation.
After the query is “obfuscated”, it will be encrypted using
two keys: (a) the requestor’s master key; and (b) a speciﬁc

session key (denoted Ks) negotiated by the requestor and
the responder sometime before 6.
Example 2. Say an user at FBI poses a query:
select name, salary, address from employee where salary
> 70000;
She wants information from the CIA database. This query
is posed using the terms salary, name, address and employee
from FBI’s ontology. Note that the ontologies of both FBI
and CIA are shown in Appendix A.
Query encryption: The FBI-side PACT stub encrypts all
the obfuscated schema terms (e.g., employee and salary) in
the query using FBI’s master key, denoted KF BI , and all the
values (i.e., 70000) in the query using Ks, the session key,
to derive the query below. Note that Ks cannot be used
to encrypt the terms in the query because otherwise the re-
sponder can know the requestor’s terms after he eavesdrops
the query.
select EKF BI (name), EKF BI (salary), EKF BI (address) from
EKF BI (employee) where EKF BI (salary) > EKs (70000).
Step 2: SQL Query Parsing. When an encrypted query
arrives at the mediator, it is parsed and all the table and col-
umn names are extracted. The mediator expands wildcards
(like select *) by replacing the wildcard character using the
encrypted attributes associated with the table in the query.
Step 3: Encrypted Query Rewriting
This “decomposed” query is then sent to the mediator along
with the role of the user, say EKF BI (Agent), posing the
query. Now, the mediation algorithm (shown in Algorithm
1) is used to rewrite the query so that the semantic hetero-
geneity between organization A’s schema and B’s schema
can be resolved. Note that Algorithm 1 calls the function
RewriteTerms in Algorithm 2 to rewrite terms in a query.
Note also that the mediation algorithm does not need any
decryption.
To illustrate, let’s revisit Example 2. First, the mediator
searches for an equivalent table of the table EKF BI (employee).
Let us assume that this search fails. Next, the algorithm
tries to ﬁnd mapping rules with tables in the responder’s
ontology that have been established as subClassOf the ta-
ble EKF BI (employee). Say, the tables EKCIA (manager) and
EKCIA (staﬀ) have been matched to be subClassOf
EKF BI (employee). Furthermore, an attribute merge/split
rule speciﬁes that EKF BI (name) is the merge of the at-
tributes EKCIA (ﬁrstName) and EKCIA (lastName) found in
both tables EKCIA (manager) and EKCIA (staﬀ). Another
binary mapping rule indicates the equivalence of EKF BI (salary)
and the attribute EKCIA (comp) in table EKCIA (manager)
and the attribute EKCIA (pay) in table EKCIA (staﬀ). Fur-
thermore, assume FBI and CIA were agencies from diﬀer-
ent continents and EKCIA (pay) has units in Dollars and
EKF BI (salary) is expressed in Euros and a conversion func-
tion EuroToDollar and its inverse DollarToEuro is provided
by the expert. The attribute EKF BI (address) does not ap-
pear in any of the CIA tables and is thus dropped from the
query and the mediator informs the requestor of this elimi-
nation. The mediator rewrites the input query as the union
of the two queries:
(1) select Merge(EKCIA (ﬁrstName), EKCIA (lastName)),
DollarToEuro(EKCIA (comp)) from EKCIA (manager) where
6A variety of key distribution protocols can be used here.
0
Algorithm 1: The Mediator Algorithm
Func Mediate
Input
D
: Query Q, User Role R, Source S, Destination
Output : Ack A
begin
{Rewrite the Queries }
Ontology Table OT ← lookup the
ontology-mapping table between S and D
{Rewrite the Roles }
MappingRoles R ← retrieve an Equivalent
mapping role for R from the role-mapping table
if retrieval failed then
Retrieve all roles R such that any role r’ in R
is subClassOf R
{Rewrite the Query }
Parse query Q to identify the tables and attributes
in Q
Using mapping rules from OT construct all
possible rewritings of Q by replacing each table
and attribute in Q by calling ReplaceTerms
{Access Control Check }
for each rewritten query Q’ do
for each role R’ in R do
Check access( Q’, R’ )
if access failed then
Reﬁne Q’ by replacing each term in Q’
by its subclasses and check for access
if access succeeded then
Insert reﬁned query into
AcceptedQueryList
{Handle Splitting/Merging of Attributes }
for each attribute a and data value d in a rewritten
query Q’ that needs conversion or split/merge do
annotate the attribute in Q’ with the
conversion function or the split/merge function
{ Error Handling and Return }
Set all bits in MissingAttributesBitMap B to 1
if any table or selected-attribute in Q could not be
rewritten because of lack of mapping rules or access
control then
return “Failure”
else
if any where-clause-attribute in Q could not be
rewritten because of lack of mapping rules or
access control then
Set the corresponding bit in
MissingAttributesBitMap B to 0
send AcceptedQueryList to D
send B to S
return “Success”
end
EKCIA (comp) > EuroToDollar(EKs (70000));
(2) select Merge(EKCIA (ﬁrstName), EKCIA (lastName)),
DollarToEuro(EKCIA (pay)) from EKCIA (staﬀ) where
EKCIA (pay) > EuroToDollar(EKs (70000));
Note that the functions Merge, EuroToDollar and Dollar-
ToEuro are not evaluated at the mediator but just inserted
into the query-text as shown above and the mediator sends
the responder the executables of those functions. As indi-
cated later, these functions are used by the responder to
Algorithm 2: Term Rewriting and Attribute Rewriting
Function Handling a Single Table in the Query and its
Attributes
Func ReplaceTerms
Input
: Table T, OntologyMappingTable OT, Query
Q
Output : Ack A
begin
{Using Binary Mapping Rules }
tableCounter ← 0
tableNames[tableCounter] ← Lookup OT for
table-names T’ equivalent to T
if
lookup fails then
for each table T’ that are SubClassOf T do
tableNames[tableCounter] ← T’
tableCounter ← tableCounter + 1
for each table T’ in tableNames do
Reset attributeNames to null
for each attribute a in T that appears in Q do
Insert into attributeNames the attributes of
T’ that are equivalent to a
if equivalent attributes to a are not