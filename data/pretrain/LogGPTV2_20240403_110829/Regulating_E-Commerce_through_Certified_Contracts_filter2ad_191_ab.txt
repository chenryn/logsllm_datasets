The preamble to this contract has several clauses spec-
ifying:
the name of the contract, the version number, its
validity period, the addresses of the revocation server and
of the repository.
Our discussion of the contract rules is organized as fol-
lows: We start with how a client-agent may issue a purchase
order by presenting a speciﬁed type of certiﬁcate, signed by
the stipulated authority. We will then show how a vendor-
agent may respond to such a purchase order2. First, by
Rule R1, a PO is considered valid only if the sending agent
presents a certiﬁcate, ClientCert, issued by ford CA,
which certiﬁes the bearer to be a purchaseOfficer.
Second, under this contract, a vendor agent may respond
to a purchase order with a responseToOffer message,
which can contain a positive result (an accept), or a decline
of the offer. Such a message is considered valid only if
the vendor has presented a certiﬁcate issued by rca CA,
certifying it to be a saleRepresentative (Rule R2).
Moreover, if the offer is accepted, a copy of the PO is sent
to the designated audit-trail. Finally, by Rule R3, all other
requests are rejected as being invalid under this contract.
3. Deployment of Certiﬁed Contracts
Two components are necessary for deploying certiﬁed-
repositories—to maintain and disseminate
contracts:
certiﬁed-contracts; and severs—to interpret contract terms
1In this example, for the sake of convenience, ford CA stands for the
public key of the certifying authority trusted to sign purchase ofﬁcer cer-
tiﬁcates on behalf of the client enterprise.
2This is only a ﬁnger exercise, meant to illustrate the concept of a
certiﬁed-contract; a full contract should consider other types of requests,
including delivery notices, acknowledgments, etc.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Operations on certiﬁcates
issuer(pk,cert)
role(r,cert)
name(n,cert)
binds pk to the public key of the issuer of certiﬁcate cert;
binds r to the value of attribute role in cert, if one exists;
fails otherwise;
binds n to the value of attribute name in cert, if one exists;
fails otherwise;
bind(attr,val,cert) binds val to the value of attribute attr in cert, if one exists;
fails otherwise;
Miscellaneous
accept
reject
deliver(m,d)
denotes that the request is valid;
denotes that the request is invalid;
delivers message m to destination d.
Figure 1. Some primitive operations
Preamble:
type(contract).
name(ford-rca).
version(1).
validity([1,june,2002],[1,july,2002]).
repository(http://trust.intertrust.com/).
revocationServer(http://trust.intertrust.com/)).
R1. eval(purchaseOffer(Specs,Amount,
PaymentInfo,Vendor),ClientCert) :-
do(issuer(ford CA,ClientCert)),
do(role(purchaseOfficer,
ClientCert)),
do(accept).
A purchaseOffer request is authorized if the sender
is established as a purchaseOfficer by a certiﬁcate
issuedby ford CA.
R2. eval(responseToOffer(Response,Specs,
Client),VendorCert) :-
issuer(rca CA,VendorCert),
role(saleRepresentative,
VendorCert),
if Response==accept then
do(deliver(Specs),auditor),
do(accept).
A responseToOffer message is considered
valid if the sender is an agent established as a
saleRepresentative by rca CA. Moreover, if
thePOisacceptedacopyissenttotheauditor.
R3. eval(M,Cert) :- do(reject).
Allotherrequestsarerejected.
Figure 2. A certiﬁed-contract example.
and bring them to bear. We start by describing their func-
tionality, and follow with a brief discussion about their de-
ployment.
Contracts can be established between two enterprises
(business-to-business, or B2B, commerce) or between an
enterprise and an individual client (business-to-customer, or
B2C, commerce). In either case, an enterprise can code the
contracts it is abiding to as certiﬁcates, and publish them
on repositories from where they can be fetched as needed.
Repositories, are an an integral part of certiﬁcation infras-
tructure, and can be used for certiﬁed-contracts without any
modiﬁcation.
This is not true, however, for servers which need to be
modiﬁed in order to deal with certiﬁed-contracts.
(De-
tails regarding server implementation are presented in Sec-
tion 6.) Such servers may be maintained by organizations
trusted by all parties involved in a contract, like large, trust-
worthy, ﬁnancial institutions (for e.g., Visa and Master-
Card), service providers (like Ebay, and AOL), or software
providers (such as Sun, or Oracle, say). If there is no such
trusted intermediary, any enterprise interested in enforcing
the terms of an agreement can establish its own servers.
In many cases, this is a workable proposition, because an
enterprise values its reputation too much to break contract
terms purposely, by installing rogue servers. We mention
that, since certiﬁed-contracts are signed, repositories may
be maintained by any party involved or by a third party
without creating security breaches.
4. Contract Annulment
Certiﬁcates might become invalid for various reasons
and should be revoked. (For example, the secret key authen-
ticated by a certiﬁcate might be lost or be compromised, or
the owner information, like role or address, might change.)
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Most revocation mechanisms rely on the existence of certiﬁ-
cate revocation lists (CRLs) maintained by trusted revoca-
tion servers. To revoke a certiﬁcate, the owner of the certiﬁ-
cate, or another responsible authority, sends the revocation
server a signed message identifying the certiﬁcate to be re-
voked. Upon receipt of the message, the revocation server
updates its CRL and disseminate the information [16].
Depending on the method used for disseminating revoca-
tion information one distinguishes between pull and push-
based systems. In pull based systems, applications, which
want to check the validity of a certiﬁcate, query the revoca-
tion server, and in response receive all, or part of the latest,
signed CRL. In push based systems, signed CRL updates
are sent out periodically to interested parties.
Similarly, contracts may be annulled before their ex-
piration date, because, for example, one of the parties is
bankrupt. We suggested earlier that contract annulment can
be conveniently modeled by certiﬁcate revocation. Like for
traditional certiﬁcates, both push or pull based mechanisms
may be used to disseminate revocation notices.
However, unlike traditional certiﬁcates, CCs don’t have
an owner, and consequently revocation notices have to be
issued by some designated authority. For now, we consider
that the issuer of a CC is also authorized to send revocation
notices. Since we have assumed that the issuer is a principal
trusted by all parties involved in the contract, this ensures
that a contract cannot be annulled arbitrarily, without the
knowledge or consent of all parties.
5. Contract Update
Generally contracts are not immutable, and in practice,
revisions of a contract may be called for various reasons,
like, for example, to correct omissions, to better accom-
modate the needs of either party, or to reﬂect unplanned
circumstances. To be more speciﬁc, consider again our
contract-example. Here are some possible scenarios that
would require its modiﬁcation:
1. the group of agents allowed to issue a purchase order
is extended to include duly certiﬁed managers.
2. only duly certiﬁed managers may issue purchase offers
in excess of a certain amount, say $1000.
3. the vendor enterprise establishes a new certifying au-
thority, rca CA’ which can issue certiﬁcates enabling
agents to respond to purchase offer.
In traditional control mechanisms, such changes take effect
by manually implementing a revised access control policy
into each server that uses the policy in question—a labori-
ous and error-prone process. If however, contracts are im-
plemented as certiﬁcates, contract revision can be handled
simply by: (a) issuing a new version of the contract whose
rule reﬂect the updates deemed necessary, and (b) revoking
the previous, obsolete version.
To show how contract-update can be supported, we
present now a new version our contract-example that incor-
porates all the revisions mentioned above. This version of
the contract is shown, in its entirety, in Figure 3.
The preamble of this contract speciﬁes that the second
version of ford-rca contract is valid from 06/15/2002
until 07/01/2002. The revisions are materialized into con-
tract rules as follows. Point 1 is brought to bear by Rule R1
which states that agents duly certiﬁed as manager by
clientAuthority may issue purchase orders regard-
less of the amount of the order. However, by Rule R2,
of this contract version, a PO issued by a duly certiﬁed
purchaseOfficer is accepted only if the amount of-
fered is less then $1,000, thus realizing point 2. Finally,
point 3, is implemented by Rule R3, stating that an agent
may respond to a purchase order if it is certiﬁed as a
saleRepresentative by either rca CA or rca CA’.
Outdated Requests We are considering now the case
where a request r has been received under a version of the
contract, which has expired before r could be evaluated.
This situation may occur if, for example, the server has been
back-logged with requests; or the server has incurred delays
verifying credentials.
To handle these case we introduce into the language, a
new type of rule, namely
arbiter(VersionNo, Request, Cre-
dentials),
which takes three parameters: the version of the contract
under which this request was supposed to be handled (now,
invalid); the request itself; and the credentials accompany-
ing the request in question. An arbiter rule speciﬁes
how Request should be treated. Here are some possibili-
ties:
(cid:127) provide for a “grandfather clause”; namely, the request
is validated provided it meets the conditions speciﬁed
by the contract-version under which it was received;
(cid:127) provide for some special treatment;
(cid:127) reject the request, and notify the interested parties of
the outcome.
To illustrate the use of “arbiter”-rule consider again
the contract-example. Under the ﬁrst version of the con-
tract, a purchaseOffer was accepted, regardless of the
amount offered, provided only it was issued by a duly au-
thorized purchaseOfficer. Under its revision, how-
ever, a purchaseOfficer, may issue POs only if the
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Preamble: type(contract).
name(ford-rca)).
version(2).
validity([15,june,2002],[1,july,2002]).
repository(http://trust.intertrust.com/).
revocationServer(http://trust.intertrust.com/).
R1. eval(purchaseOffer(Specs,Amount,
PaymentInfo,Vendor),ClientCert) :-
issuer(ford CA,ClientCert),
role(manager,ClientCert),
do(accept).
A purchaseOffer request issued by anagent certiﬁed
asamanager byford CA isauthorizedregardlessofthe
amountoftheorder.
R2. eval(purchaseOffer(Specs,Amount,
PaymentInfo,Vendor),ClientCert) :-
issuer(ford CA,ClientCert),
role(purchaseOfficer,ClientCert),
Amount <=1000, do(accept).
A purchaseOffer request is authorized if the follow-
ing conditions are met: (1) the sender is established as a
purchaseOfficer byacertiﬁcateissuedbyford CA
and(2)theAmount theagentiswillingtopayforthemer-
chandiseislessthen$1000.
R3. eval(responseToOffer(Response,Specs,
Client),VendorCert) :-
(issuer(rca CA,VendorCert) or
issuer(rca CA’,VendorCert)),
role(saleRepresentative,
VendorCert),
if Response==accept then
do(deliver(Specs),auditor),
do(accept).
A responseToOffer message may be issued only by
anagentcertiﬁedasasaleRepresentative byeither
rca CA or rca CA’.
R4. eval(M,Cert) :- do(reject).
Allotherrequestsarerejected.