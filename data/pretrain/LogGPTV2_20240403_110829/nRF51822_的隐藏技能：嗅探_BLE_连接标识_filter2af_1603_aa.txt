# nRF51822 的隐藏技能：嗅探 BLE 连接标识
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：sourcell @安恒安全研究院海特实验室
## 前言
本文分析了 Damien Cauquil 在 btlejack-firmware 中实现的一个有趣的技术。根据他的描述，该技术应该受到了 Travis
Goodspeed 所写 Promiscuity is the nRF24L01+’s Duty 一文的启发。Damien Cauquil
对于该技术的描述如下：
## 称为隐藏技能的原因
在 nRF51822 中，嗅探 BLE access address 之所以被称为隐藏技能的原因是：无视 nRF51 Series Reference
Manual Version 3.0.1 的限制是使用该技能的条件之一。比如手册将 PCNF1 register 的 BALEN field
的取值范围限制在 “[2..4]”：
但要使用隐藏技能需要将该 field 配置为 1。
    #include 
    #include ​
    NRF_RADIO->PCNF1 |= 1UL PCNF1 = RADIO_PCNF1_WHITEEN_Disabled CRCCNF = 0UL; // Disable CRC
  1. ANT 在接收到完整的 preamble (0x55 or 0xAA) 后，会立即通知 receiver 开始工作。
  2. Receiver 开始工作后，会把空中的 bits 交给 address match 处理。
  3. Address match 在处理空中的 bits 时，可能发现 base address 与 prefix 无法匹配。
  4. Address match 继续处理空中的 bits，直到 base address 与 prefix 匹配成功。
  5. Base address 与 prefix 匹配成功后，将发生 ADDRESS event，NRF_RADIO->EVENTS_ADDRESS 被置 1。
## 站在 Travis Goodspeed 的肩膀上
Travis Goodspeed 发现 nRF24L01+ 在接收 radio packet 时并不从 preamble 字段开始匹配，而是从
address 字段开始匹配。nRF24L01+ 使用的 on-air radio packet 格式如下：
> 参考 reference 1、2。
nRF24L01+ 这样做确实是有道理的。Radio 外设要实现接收 radio packet 就必须做一个决策：何时开始匹配 radio packet
定义的字段。nRF24L01+ 的决定是不断从空中采样，直到交替出现 0 和 1（preamble, hi-low
toggling），就开始将后续的空中数据与 register 中预设的 address 进行匹配。因此 radio packet 发送方发出的
preamble 对于接收方只是一个开始匹配 address 字段的信号，而不是参与匹配的字段。
之后 btlejack 发现 nRF51822 同 nRF24L01+ 一样，也具有上述特性。nRF51822 的 on-air radio packet
格式如下：
### 正常使用 nRF51822 收发 BLE LL Packet
在 nRF51822 上发送 BLE LL packet 时，发送方会把 radio packet 的 address 字段配置为 4 bytes，用于存储
BLE LL packet 定义的 access address：
    // len(ADDRESS) 4 B = len(BASE) 3 B + len(PREFIX) 1 B
    NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_BALEN_Msk; // Clear BALEN
    NRF_RADIO->PCNF1 |= 0x3 CRCCNF = 0x0; // Disable CRC
Radio packet 的 address 字段被划为 payload 后，作为接收方的 nRF51822 就只剩 preamble
可以匹配了。于是我们把 preamble 配置为 address 字段，比如 0x00 0xAA：
    +--------------------+
    | BASE | PREFIX      |
    |------|-------------| nRF51822 radio packet
    | 0x00 | 0xAA        |
    +--------------------+--------------------------------+----------+
                         | S0   | LENGTH | S1   | PAYLOAD | STATIC   |
    Radio packet in RAM  |------|--------|------|---------|----------|
                         | None | None   | None | None    | 10 Bytes |
                         +-------------------------------------------+
代码如下：
    NRF_RADIO->PREFIX0 = 0xAA BASE0 = 0x00000000;
    NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_BALEN_Msk; // Clear BALEN
    NRF_RADIO->PCNF1 |= 0x1  0xAA 是 BLE LL packet 可能的 preamble 之一。后续会分析如何处理另一个可能的 preamble 0x55。
在 BLE preamble 0xAA 前添加一个 0x00 的原因是，当无空中数据时，radio 外设会采样到大量的 0x00 或 0xFF（参考
reference 1，但待亲自观察）。此时 radio 匹配 address 字段的工作不会被触发，因为 0x00 与 0xFF 不是交替出现的 0 或
1。那么可以判断在无 noise 的情况下，preamble 0xAA 之前不是 0x00，就是
0xFF（后面会详细解释有噪声的情况如何处理）。所以这里我们把 0x00 0xAA 配置为待匹配的 address 字段。当然 0xFF 0xAA 作为
address 字段也行，但实际验证发现 0x00 0xAA 效果最好。注意将 address 字段配置成 0x00 0x00 0xAA 等形式均没有
0x00 0xAA 好。因为 0xAA 前有一个 0x00 的可能性肯定比有两个 0x00 的可能性更大，可能性越大就越容易匹配到合适的 address
字段（这里与 access address 等同）。
> 对于接收方而言，空中有无数据取决于信号强度。参考 reference 3 可知 BLE 的 sensitivity level 为 -70 dBm。
一旦 nRF51822 的匹配工作被 noise 触发，并最终与 0x00 0xAA 同步（如果在 0xAA 前出现了一个 0x00
那么我们便幸运的同步了），可能的 access address 就会被存入 RAM。
> Noise 一定会包含可以触发 nRF51822 匹配工作的 0、1 序列。比如若存在 BLE 连接，空中就会出现 0xAA 或
> 0x55（noise）。该序列出现后，radio 外设就开始匹配 0x00 0xAA，最终可能在下一个 BLE LL packet 中匹配到 0x00
> 0xAA，于是后续的 access address 便被存入 RAM。
## 处理 Noise 并从 RAM 中提取 Access Address
### 理想情况：不需要移位
理想情况意味着 radio packet address 字段的 base 与 prefix 间没有噪声，而且空中 BLE LL packet 的
preamble 与我们 radio 使用的 0xAA prefix 相同。此时 RAM 中存 储的数据如下：
    +--------------------+
    | BASE | PREFIX      |
    |------|-------------| nRF51822 radio packet
    | 0x00 | 0xAA        |
    +--------------------+--------------------------------+-----------------------+
                         | S0   | LENGTH | S1   | PAYLOAD | STATIC                |
    Radio packet in RAM  |------|--------|------|---------|-----------------------|
                         | None | None   | None | None    | 10 Bytes              |