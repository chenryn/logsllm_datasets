本文为翻译文章，原文链接：
## 前言
这部分是关于WPS Office的简介，外国人自是要简单了解一下的，至于国人，duck不必吧，因此略去。  
WPS
Office软件中存在一个远程执行代码漏洞，对于特制的Office文件，不正确处理内存中的对象会触发此漏洞。利用此漏洞可以在当前用户的上下文中运行任意代码。但是利用不成功的话，可能会导致拒绝服务。
漏洞产品：WPS Office  
影响版本：11.2.0.9453。
## 漏洞分析
> Qt 类库里大量的类根据功能分为各种模块，这些模块又分为以下几大类：  
>  Qt 基本模块（Qt Essentials)：提供了 Qt 在所有平台上的基本功能。  
>  Qt 附加模块（Qt Add-Ons)：实现一些特定功能的提供附加价值的模块。  
>  增值模块（Value-AddModules)：单独发布的提供额外价值的模块或工具。  
>  技术预览模块（Technology Preview Modules）：一些处于开发阶段，但是可以作为技术预览使用的模块。  
>  Qt 工具（Qt Tools)：帮助应用程序开发的一些工具。  
>  基本模块中，有一个名为Qt Core的模块，主要提供核心的非 GUI
> 功能，所有模块都需要这个模块。这个模块的类包括了动画框架、定时器、各个容器类、时间日期类、事件、IO、JSON、插件机制、智能指针、图形（矩形、路径等）、线程、XML
> 等。所有这些类都可以通过  头文件引入。  
>  (这段是我自己找的资料)
WPS Office的`Qt模块`（用于图像格式解析）中发现堆损坏，嵌入特制的WPS
office图片可能会触发此漏洞。WPS在打开特制的文档文件时，将触发访问冲突：EDX指向数组，而EAX却指向数组的索引。
    0:000> g
    (c50.b4): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=000000c0 ebx=006f1c48 ecx=cd2aefbc edx=cd2c6f80 esi=2ed7ae18 edi=0000001c
    eip=6ba13321 esp=006f1b44 ebp=006f1b44 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210202
    QtCore4!QMatrix::dy+0x48a8:
    6ba13321 8b448210        mov     eax,dword ptr [edx+eax*4+10h] ds:002b:cd2c7290=????????
崩溃是如何触发的？让我们看一下PNG的header格式。
    00029E30  FF 89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44  ÿ‰PNG........IHD
    00029E40  52 00 00 02 80 00 00 01 C6 04 03 00 00 00 16 0A  R...€...Æ.......
    00029E50  27 FC 00 00 00 04 67 41 4D 41 00 00 B1 88 95 98  'ü....gAMA..±ˆ•˜
    00029E60  F4 A6 00 00 00 30 50 4C 54 45 00 00 00 80 00 00  ô¦...0PLTE...€..
    00029E70  00 80 00 80 80 00 00 00 80 80 00 80 00 80 80 80  .€.€€...€€.€.€€€
    00029E80  80 80 C0 C0 C0 FF 00 00 00 FF 00 FF FF 00 00 00  €€ÀÀÀÿ...ÿ.ÿÿ...
    00029E90  FF FF 00 FF 00 FF FF FF FF FF 7B 1F B1 C4 00 00  ÿÿ.ÿ.ÿÿÿÿÿ{.±Ä..
偏移量`0x29E31-0x29E34`是PNG文件格式的签名标头。PNG头文件的结构为：
    PNG签名 --> IHDR --> gAMA --> PLTE --> pHYs --> IDAT --> IEND
当Word文档中存在嵌入式的PNG文件时，WPS Office
Suite会使用`QtCore`库解析该`PLTE`结构，从而触发堆损坏。该漏洞位于偏移量`0x29E82`到`0x29E85`之间，具体为调色板的解析失败，从而触发了堆中的内存损坏。  
崩溃触发之前的堆栈跟踪如下：
    00 00ee1790 6b8143ef QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a71
    01 00ee17f0 6b814259 QtCore4!QBrush::setMatrix+0x234
    02 00ee58d4 6b8249a4 QtCore4!QBrush::setMatrix+0x9e
    03 00ee58ec 6b80cc84 QtCore4!QImage::rect+0x22b
    04 00ee5908 6b857ccc QtCore4!QTransform::inverted+0xec8
    05 00ee629c 6b81c55b QtCore4!QSvgFillStyle::setFillOpacity+0x1b59
    06 00ee6480 6b896844 QtCore4!QPainter::drawPixmap+0x1c98
    07 00ee6574 6d1e0fbd QtCore4!QPainter::drawImage+0x325
    08 00ee6594 6d0dd155 kso!GdiDrawHoriLineIAlt+0x11a1a
在QtCore4解析嵌入式图像之前，KSO模块调用了`kso!GdiDrawHoriLineIAlt`。使用IDA
Pro分析发生异常处的函数，发现最后的崩溃路径如下（来自WinDBG）：
    QtCore4!QMatrix::dy+0x48a8:
    6ba13321 8b448210        mov     eax,dword ptr [edx+eax*4+10h] ds:002b:cd2c7290=????????
IDA Pro反汇编该函数：
    .text:67353315                 push    ebp
    .text:67353316                 mov     ebp, esp
    .text:67353318                 movzx   eax, byte ptr [ecx+edx]  ; **crash here**
    .text:6735331C                 mov     ecx, [ebp+arg_0]
    .text:6735331F                 mov     edx, [ecx]
    .text:67353321                 mov     eax, [edx+eax*4+10h]
    .text:67353325                 mov     ecx, eax
从崩溃点转储的信息得知，应用程序在`0x67353321`处(`mov eax,
[edx+eax*4+10h]`)触发了访问冲突。可以看到，EAX寄存器的值为`0xc0`。因此，从这里可以根据导致异常的指令对寄存器的状态进行一些假设。尤为需要注意的是，在发生异常之前，我们可以看到`ECX（0xc0）`的值被写入到以下指令所定义的任意位置：
    mov     ecx, [ebp+arg_0]
此外，除了故障指令，EBP的偏移量存储在ECX中。我们在前面提到的指令（偏移量为`0x6ba1331c`）上设置了一个断点，以观察内存使用情况。可以看到，断点触发后，第一个值`c45adfbc`指向另一个指针，而它本该指向某个数组。
    Breakpoint 0 hit
    eax=0000000f ebx=004f1b40 ecx=d3544100 edx=0000001c esi=d1200e18 edi=0000001c
    eip=6ba1331c esp=004f1a34 ebp=004f1a34 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
    QtCore4!QMatrix::dy+0x48a3:
    6ba1331c 8b4d08          mov     ecx,dword ptr [ebp+8] ss:002b:004f1a3c=c45adfbc
    0:000> dc ebp+8
    004f1a3c  c45adfbc 00000048 00000000 6f13830f  ..Z.H..........o
    004f1a4c  004f5cc8 00000000 00000000 00000000  .\O.............
    004f1a5c  00000000 004f65a0 004f662c 00000000  .....eO.,fO.....
    004f1a6c  779eae8e 00000000 00000001 3f800000  ...w...........?
    004f1a7c  3f800000 3f31e4f8 3f800000 3f800000  ...?..1?...?...?
    004f1a8c  3f800000 3f31e4f8 3f800000 3de38800  ...?..1?...?...=
    004f1a9c  3de38800 3d9e1c8a 3c834080 004f3c00  ...=...=.@. dc c45adfbc
    c45adfbc  ab69cf80 d3544100 00000003 00000280  ..i..AT.........
    c45adfcc  0000055a 00000012 c0c0c0c0 1c3870e2  Z............p8.
    c45adfdc  40ad870e 1c3870e2 40ad870e 00000000  ...@.p8....@....
    c45adfec  00000000 c0c0c0c1 6c1d12c0 00000000  ...........l....
    c45adffc  c0c0c0c0 ???????? ???????? ????????  ....????????????
    c45ae00c  ???????? ???????? ???????? ????????  ????????????????
    c45ae01c  ???????? ???????? ???????? ????????  ????????????????
    c45ae02c  ???????? ???????? ???????? ????????  ????????????????
    0:000> dc ab69cf80
    ab69cf80  00000001 0000001c 00000010 00000001  ................ // 0000001c is overwritten in the register EDX and EDI before we trigger crash
    //在触发崩溃点之前，寄存器EDX和EDI就被0000001c覆盖
    ab69cf90  ff000000 ff800000 ff008000 ff808000  ................ 
    ab69cfa0  ff000080 ff800080 ff008080 ff808080  ................
    ab69cfb0  ffc0c0c0 ffff0000 ff00ff00 ffffff00  ................ // ffc0c0c0 where it will be stored in EAX after crash, at the moment it only takes 0xf value in EAX
    //ffc0c0c0处的值会被存储在EAX中，目前它的值为0xf.
    ab69cfc0  ff0000ff ffff00ff ff00ffff ffffffff  ................
    ab69cfd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
    ab69cfe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
    ab69cff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
因为知道程序崩溃的路径，所以可以使用下面的命令简单地设置一个断点。该命令将获得`edx+eax*4+10`的指针值，并检查其是否满足0xc0。
    bp 6ba13321 ".if (poi(edx+eax*4+10) == 0xc0) {} .else {gc}"
    0:000> g
    eax=000000c0 ebx=004f1b40 ecx=c45adfbc edx=ab69cf80 esi=d1200e18 edi=0000001c
    eip=6ba13321 esp=004f1a34 ebp=004f1a34 iopl=0         nv up ei pl nz na po nc