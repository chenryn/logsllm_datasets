# curl http://192.168.56.102:8080/node-web-api/msg/find
51421755056144.abc1421755061730.afdgafasfasd1421755075377.这是测试
11421755079585.这是测试21421755084285.测试完毕...(略) 3
返回的内容是我预先加入数据库的数据。
4
7.4 搭建前端 Nginx
5
Nginx是一款支持HTTP、HTTPS、SMTP、POP3、IMAP等协议的反向代理服务器，也常用
作负载均衡、HTTP缓存和Web服务器。由于它开源、配置简单以及拥有高并发、高性能、低内 6
存、稳定性高等诸多优良特性，目前已经成为互联网上应用最广泛的Web服务器之一。
本案例以Nginx作为前端服务器，主要提供两方面的功能： 7
 提供静态页面的访问服务；
9
 node-web-api反向代理服务。
8
7.4.1 构建镜像并运行
接下来，我们将逐步讲解如何开发和部署这样的Nginx容器服务。在Docker Hub上已经托管 10
了Nginx的官方镜像，其地址是https://registry.hub.docker.com/_/nginx/ ，我们直接使用这个镜像来
部署应用。 10
(1) 如果主机3还没有安装Docker服务，先参照第1章的方法在主机3上安装Docker。
11
(2) 搜索并拉取官方的Nginx镜像：
# docker search nginx 13
NAME DESCRIPTION STARS OFFICIAL AUTOMATED
nginx Official build of Nginx. 507 [OK]
jwilder/nginx-proxy Automated Nginx reverse proxy for docker c... 112 [OK] 14
dockerfile/nginx Trusted automated Nginx (http://nginx.org/... 92
...(略)
# docker pull nginx 15
...(略)
# docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE 16
nginx latest 1822529acbbf 2 weeks ago 91.64 MB
...(略)
17
(3) 在主机3上的home目录下创建一个名为nginx-node的文件夹，该文件夹用于存放Web静态
文件和自定义的Nginx配置文件server.conf。
18
94 第7章 综合案例2：DLNNM
(4) 自定义nginx配置。server.conf自定义的内容如下：
server {
listen 80 default_server;
listen [::]:80 default_server ipv6only=on;
root /home/node/www;
#root /usr/share/nginx/html;
index index.html index.htm;
charset utf-8;
server_name localhost;
location /node-web-api/ {
proxy_pass http://192.168.56.102:8080;
}
location / {
try_files $uri $uri/ =404;
}
}
这个自定义配置文件用来替换原生nginx容器里的默认配置，我们会在启动容器时通过-v参
数来设置这种替换。
另外，我们还需要关注两个点。一是我们配置了nginx的root目录为/home/node/www，该目
录是容器里web服务的根目录，在启动容器时需要通过-v参数指定主机目录到该目录的映射。另
一个是我们通过proxy_pass将node-web-api的请求全部反向代理到http://192.168.56.102:8080地址。
不难发现，这个http地址就是7.2节在主机2上面构建Node.js Web服务的地址。
(5) 在nginx-node文件夹下创建www文件夹，这个文件夹用于存放Nginx对外服务的静态文件：
~/nginx-node/www # ls -l
total 92
-rwxrwxrwx 1 xxh xxh 29 1月 15 16:12 index.html
-rwxrwxrwx 1 xxh xxh 84320 12月 18 23:17 jquery-2.1.3.min.js
其中有两个文件，具体如下所示。
 jquery-2.1.3.min.js：jQuery 是一个兼容多浏览器的JavaScript前端框架，其官方网址是
http://jquery.com/。本例使用它来简化对node-web-api的异步调用。
 index.html：本案例应用的主页面，它实现了对node-web-api添加和查询API的调用。源码
如下：
5
6
7
界面预览效果如图7-2所示。
9
8
10
10
11
图7-2 index.html界面
(6) 在主机3以守护模式启动Nginx容器服务，具体为：
13
# docker run -d -v /home/xinhua/nginx/server.conf:/etc/nginx/conf.d/default.conf:ro -v
/home/xinhua/nginx/www:/home/node/www:ro -p 80:80 nginx
14
首先，我们用-v参数将自定义的server.conf替换容器的默认配置default.conf，然后将主机的页
面文件夹映射到server.conf所配置的容器文件夹/home/node/www。这台主机最终是直接提供给外 15
网服务的，所以我们将容器内的80端口直接映射到外网。
16
7.4.2 验证Web应用
17
现在，Web应用已经完整部署好了，我们可以选择在任何一台能连接主机3的机器上通过http
链接http://192.168.56.103/来访问该Web应用了，如图7-3所示。
18
96 第7章 综合案例2：DLNNM
图7-3 Web应用展示
我们可以持续不断地添加内容到数据库中，并且通过“查询”按钮查询所有数据并将其显示出
来。而且下次再访问这个页面时，还仍然能查询到以前添加的数据。
让我们回到主机3，查看Nginx运行日志：
# docker logs 0456798a89c9
192.168.56.102 - - [20/Jan/2015:11:51:25 +0000] "GET / HTTP/1.1" 200 736 "-" "Mozilla/5.0 (X11; Ubuntu;
Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0" "-"
192.168.56.102 - - [20/Jan/2015:11:51:25 +0000] "GET /jquery-2.1.3.min.js HTTP/1.1" 200 84320
"http://192.168.56.103/" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101
Firefox/31.0" "-"
192.168.56.102 - - [20/Jan/2015:11:51:25 +0000] "GET /favicon.ico HTTP/1.1" 404 168 "-" "Mozilla/5.0
(X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0" "-"
192.168.56.102 - - [20/Jan/2015:11:51:25 +0000] "GET /favicon.ico HTTP/1.1" 404 168 "-" "Mozilla/5.0
(X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0" "-"
...(略)
192.168.56.102 - - [20/Jan/2015:11:57:58 +0000] "POST /node-web-api/msg/add HTTP/1.1" 200 1
"http://192.168.56.103/" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101
Firefox/31.0" "-"
192.168.56.102 - - [20/Jan/2015:11:58:03 +0000] "POST /node-web-api/msg/add HTTP/1.1" 200 1
"http://192.168.56.103/" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101
Firefox/31.0" "-"
192.168.56.102 - - [20/Jan/2015:11:58:05 +0000] "GET /node-web-api/msg/find HTTP/1.1" 200 154
"http://192.168.56.103/" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101
Firefox/31.0" "-"
该日志显示了Nginx所处理的静态资源请求和node-web-api的调用过程。
使用同样的方法，我们可以在主机1和主机2上分别查看MongoDB与Node.js的运行日志。这
里就不一一演示了，读者可以自行查看。
8.1 阿里云Docker介绍 97
1
第 8 章 2
阿里云Docker开发实践
3
4
5
作为2014年兴起的技术，Docker技术发展迅猛，国外各大云计算公司及软件公司（如Google、
Amazon、微软等巨头）纷纷加入Docker阵营，而国内的BAT三大云平台也不例外，积极作出响 6
应，开始支持Docker。
7
阿里云作为国内最著名的云平台之一，越来越多的中小企业及创业公司使用它来部署自己的
应用。本章将以阿里云为平台，并结合Docker技术本身的特性，介绍在阿里云上进行Docker开发
8
的一般流程。
图8-1对比了传统的软件开发、测试、部署与使用Docker进行开发的不同。流程大体一致，
8
但项目相关者的关注点从底层项目工程转移到更单一的镜像上来。使用镜像来打包应用，可以减
少运维的工作，并且测试人员和运维人员都不需要关注更多项目的底层细节，只需要将精力集中
10
在镜像本身上即可。当然，前提是开发人员、测试人员和运维人员都需要对Docker原理及操作有
一定的了解。显然，这种付出是值得的。
10
本章所讲的知识不仅仅只是应用在阿里云上，它还能作为一般开发流程的指导。本章主要包
含以下内容：
11
 在ECS上部署Docker服务；
 在ECS上部署存储镜像在OSS上的私有注册服务器； 13
 介绍开发人员、测试人员和运维人员在使用Docker协同工作时需要注意的地方。
14
15
16
17
18
98 第8章 阿里云Docker开发实践
图8-1 Docker流程与传统流程对比（此图摘自阿里云官网）
8.1 阿里云Docker介绍 99
8.1 阿里云 Docker 介绍 1
作为当前最炙手可热的容器技术，阿里云已经支持在ECS上部署Docker容器应用。我们可以
2
在ECS上把应用打包成Docker镜像，运行Docker容器，也可以从阿里云提供的镜像库中快速下载
Docker Hub官方镜像，还可以在上面部署自己的私有镜像库，并和团队成员分享和协作。图8-2
3
展示了阿里云ECS的Docker生态系统。
4
5
6
7
8
8
10
10
11
13
图8-2 阿里云ECS的Docker生态系统（此图摘自阿里云官网）
14
为了方便阿里云的Docker用户使用Docker的官方镜像，阿里云已经将Docker官方镜像库同步
到国内服务器，这些镜像全部来自Docker Hub的用户stackbrew的镜像库，该用户的Docker Hub地
15
址是https://hub.docker.com/u/stackbrew/。这里的镜像一部分由官方维护，一部分由软件官方社区
维护。在ECS机器上使用pull命令可以快速拉取到镜像，从而避免直接去Docker Hub下载消耗的
16
时间。现在支持的镜像的有debian、hello-world、zend-php、wordpress、ubuntu-upstart、
ubuntu-debootstrap、ubuntu、ruby、registry、redis、rails、python、postgres、php、perl、
opensuse、node、mageia、jruby、jenkins、java、hylang、hipache、golang、gcc、fedora、docker-dev、 17
crux、crate、clojure、cirros、centos、busybox、buildpack-deps、nginx、mongo、neurodebian
18
和mysql。使用这些镜像时，需要在镜像名前添加域registry.mirrors.aliyuncs.com。
100 第8章 阿里云Docker开发实践
通过pull命令下载镜像：
# docker pull registry.mirrors.aliyuncs.com/library/ubuntu
在Dockerfile中使用aliyun镜像库中的镜像作为根镜像：
FROM registry.mirrors.aliyuncs.com/library/ubuntu
我们在阿里云官网购买云服务器ECS时，可以在镜像市场为ECS服务器选择原生支持Docker
服务的ECS镜像（此处的镜像不是指Docker的镜像，而是指ECS服务器的操作系统），如图8-3和
图8-4所示。ECS实例启动后，docker daemon将自动运行，无需额外配置 ，这样可以免去手动在
ECS服务器上安装和配置Docker的步骤了。预安装Docker服务的ECS镜像的介绍页面在
http://market.aliyun.com/imageproduct/16-123824001-jxsc000057.html。当然，我们也可以选择公共
镜像，然后再手动安装Docker。
图8-3 从镜像市场选择镜像
图8-4 选择预先安装配置好Docker的ECS实例镜像
8.1 阿里云Docker介绍 101
如果没有使用预安装Docker的镜像，也可以手动安装。我们使用SSH登录到阿里云的ECS主
1
机，然后按照下面的步骤进行安装：
2
root@iZ94nflqok7Z:~# apt-get install curl
root@iZ94nflqok7Z:~# curl -sSL https://get.docker.com/ubuntu/ | sudo sh
Docker安装成功后，接着尝试去从阿里云部署的镜像库拉取ubuntu:latest镜像，此时会出现 3
下面的错误：
4
root@iZ94nflqok7Z:~# docker pull registry.mirrors.aliyuncs.com/library/ubuntu
FATA[0000] Cannot connect to the Docker daemon. Is 'docker -d' running on this host?