参与on-call轮值，这需要SRE动手实际运维系统，观察和调整系统的弱点，以及理解
SRE团队在结构设计上要求工程师将时间平均分配在两种同等重要的工作上。SRE负责
那么，究竟GoogleSRE是靠什么来维持10年以来大规模部署的基础设施的效率与扩展
年我刚加入Google时的近100个工程师发展到今天的近1000人，横跨十几个分公司。
统的。看到SRE这个想法在Google生根发芽是一件非常令人激动的事情。SRE从2006
我是带着极大的自豪感读完本书的。我在1990年左右加入Excite，负责“软件运维团
编辑：BetsyBeyer
作者：Benjamin Lutch注1
可以说，SRE目前负责运维的是整个地球上最前沿的计算基础设施。
队”。
结语
第
34章
算是SRE的祖先。我的整个职业生涯就是围绕着构建一个高可靠、高可用的系
---
## Page 451
由理解复杂系统的人设计的，他们知道如何用一种可扩展的、易于理解的方式给飞行员
飞行员也经过了大量训练，使得他们可以很快、很可靠地应对紧急情况。飞机驾驶舱是
于学习，使得飞行员可以正常操纵飞机飞行。同时，这些界面又提供了足够的灵活性，
杂的系统的方法是一致的。飞机操作系统的人机接口都是精心设计过的，简单易用、易
覆地的变化，而仍然只有两名飞行员呢？这里的答案与Google SRE运维大规模、超复
为什么飞行过程中的所有其他元素一
们再来看一下驾驶舱，仍然只有两名飞行员！
英里以外的大洲降落。严格遵守飞行时间，基本在预计时间前后几分钟内到达。但是我
开车，在空中飞行要更安全！现在的飞机会在某个大洲起飞，轻松地在另外一个6000
余度非常高的系统。这就是不断重视安全与可靠性的后果：事实上，目前比起在路上
客同时从多层进人飞机，数吨重的货物同时进入底下的货舱。飞机上布满了非常可靠的、
经过100年来的变迁，我们来看一下现在停在停机坪上的某架巨型747飞机。数百名旅
简单的，但也是易坏的，基本都没有任何余度的存在。
在飞机过程中爬出驾驶舱修理飞机了！飞机上接入驾驶舱的所有系统都是非常必需的，
市，以此往复。在这个过程中，任何故障的后果都将是灾难性的，更不要说飞行员可以
飞机就会在晴朗的天气中起飞，慢慢爬升高度，最终降落于另外一个几百公里之外的城
行员的位置，最好的情况下还有一个副飞行员或者是导航员的位置。每隔几天，我们的
担当了机械师的角色，甚至可能还要负责货物的装载和卸载。飞行驾驶舱中一般只有飞
特别幸运的话，是双引擎的），飞机上装载了一些货物，以及一个飞行员。飞行员同时也
假设100年前的我们需要在两个城市之间飞行。我们的飞机可能是单引擎的飞机（如果
但是基本的核心理念是一致的。
化来比喻SRE对复杂计算系统的管理。虽然这两个行业中事故所造成的后果相差很远，
对那些不是本行业的人来说，可以用民航行业在过去十年中对飞机飞行过程的管理的变
服务器构建能够自动服务发现、自动生成监控台与报警”这样的任务。
化。例如，最初的“构建一个监控20台服务器的监控台”可能逐渐演化成“为几万台
做好容量规划等。其次，SRE的日常工作随着服务的发展以及SRE团队的成熟在不断变
性能可能提升了1000倍，但是这些系统仍然需要保持灵活，能够应对紧急情况，监控周全，
与主要关注重点在十年内基本保持不变：虽然系统部署规模可能扩大了1000倍，系统
在SRE的发展中，有很多截然不同的、相互作用的因素在相互推进。首先，SRE的职责
不一样了，但是这些职责仍然没变。
年不变的 SRE 根本职责。虽然十年中 Google的基础设施有了长足发展，SRE团队也大
BenTreynor Sloss在本书第一章正是这么介绍SRE的：他制定了一系列灵活的，维持十
一安全性、容量、速度、可靠性一
一都发生了翻天
结语
409
475
---
## Page 452
410
常工作中学到的。
对系统的运作原理、运维方式、故障模式以及应急处理方式非常了解一
而非更具体。SRE团队依赖各种后备系统和精心设计的API来运维。同时，SRE也应该
最终，SRE的目标也是如此。SRE团队应该越精简越好，他们所操作的东西应该更抽象
变更管理、监控与报警、容量规划，以及应急处理。
提供数据。飞机中的系统都具有很多本书中提到的各种特性：高可用性、性能极度优化、
第34章结语
一这些都是在日
---
## Page 453
更详细的计算过程请参见第3章中的公式3-1与公式3-2。
个汇总过的不可用指标（例如，“所有操作中的X%失败了。”）来思考可用性更有意义
对一个可能部分保持可用的服务，或者是每天、每周负载变化很大的系统来说，利用一
水平
表A-1：可用性时间表
停机时间，表A-1描述了每个可用性级别所允许的停机时间。
系统可用性通常是以某段时间内服务不可用的时间比例来计算的。假设没有任何计划内
一点—
99.999%
99.99%
99.95%
99.9%
99.5%
一这些系统可能有多个副本，只有某一个副本不可用。
5.26 minutes
52.6minutes
4.38hours
8.76hours
1.83days
3.65days
18.25days
36.5days
每年
s1.30minutes
12.96minutes
1.08hours
2.16hours
10.8hours
21.6hours
4.5days
9days
每季度
允许的不可用窗口时间
25.9seconds6.05seconds0.87seconds0.04seconds
4.32minutes
21.6minutes5.04minutes43.2 seconds
43.2minutes
3.6hours
7.2hours
1.5days
3days
每月
60.5seconds8.64seconds
10.1minutes1.44minutes
50.4minutes7.20minutes
1.68hours
8.4hours
16.8hours
每周
14.4minutes
1.2hours
2.4hours
每天
系统可用性
0.36seconds
s1.8seconds
53.6seconds
18seconds
s36seconds
3minutes
6minutes
每小时
附录A<
---
## Page 454
412
配置运行，直到某个人来批准采用新数据一
者使用简化逻辑。我们发现，最安全的方式是在服务收到新数据之后，仍然维持之前的
服务应该追求在出现故障时仍能够保持工作，可能会牺牲一定程度的访问控制能力，或
过期的数据
出错误输入的警报。错误的输入数据一般分为以下几类：
接收到不合理的配置文件或者输入数据时，应该继续保持之前的状态正常工作，同时发
配置文件，或者服务的任何输入都应该经过正确性和准确性检查再提供给服务。服务在
可控的故障模式
编辑：BetsyBeyer
作者：BenTreynor Sloss
生产环境运维过程中的最佳实践
附录B
不正确的数据
这些数据可能会影响到目前的数据。应该在数据过期之前发出警报。
在处理数据之前，应该检查数据的语法，甚至在可能的情况下，检查数据语义的正
新数据比之前的数据小N%的时候发出警报）。
确性。同时，服务应该注意空数据、部分数据或者截断数据的可能性（服务应该在
一这些数据可能是无效的。
---
## Page 455
应以最终用户的视角来定义可用性与服务性能的SLO，详细的讨论参见第4章。
从用户的视角来定义SLO
是第一选择，后续再进行详细的分析，这样可以降低平均恢复时间（MTTR）。
或者是一个可靠的监控系统—应该对发布过程进行监控。如果出现了意外情况，回退
整个发布过程应该是有监管的。为了确保发布过程中没有未预料的情况发生，工程师一
可以更快地检测到由于流量峰谷或者不同地理区域的流量带来的问题。
务所能承受的风险来决定。同时，每个部署阶段中包括多个地理位置也是好主意，这样
的容量百分比，以及每个阶段之间等待的时间应该由服务的规模、发布的规模，以及服
都会引人一定的风险，我们通过小规模地应用这些变更来控制这些风险。每次发布部署
非紧急的发布过程应该是按阶段进行的。不管是配置文件改变，还是二进制文件改变
渐进式发布
99.9%
很多改动。这样做的结果是，Gmail在几年的时间内将可用性从99.0%提升到了
Gmail可用性的评估有显著的影响，这直接导致了Gmail客户端与服务器端代码的
在Gmail客户端中度量错误率与延迟，而不是从服务器端度量。这样做使我们对
配，这样可以避免这种事故的发生。
置文件的大幅度改变，检查配置文件是否与某些已知不太可能含有病毒的网站匹
误地替换为只有“”，导致与全部URL都匹配。后续的解决方案中包括：检查配
病毒感染网站（参见文献[May09])。一份含有病毒URL地址的配置文件内容被错
2009年，
配置文件未能通过校验的情况下会一直按之前的配置文件工作。
文件进行一系列安全性检查，包括对google.comIP地址的确认。该系统在收到新
NXDOMAIN结果，故障持续了6分钟。在之后的解决方案中，系统会针对新的配置
到了一份空数据。该服务接受了空配置文件，为全部GoogleDNS请求返回了
2005年，Google全球DNS负载/延迟均衡系统由于文件权限错误的原因，收
一份错误的（但是格式正确的）数据导致Google将整个Web都标记成
示例
示例
从用户的视角来定义SLO
413
481