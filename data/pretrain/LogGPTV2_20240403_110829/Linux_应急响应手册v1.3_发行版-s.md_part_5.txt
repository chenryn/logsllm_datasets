19 Apr 08:46:20.053-Accepted 192.168.43.51:55382
[6652]
19 Apr 08:46:20.054-Accepted 192.168.43.51:55383
[6652]
19 Apr 08:46:20.054-Accepted 192.168.43.51:55384
[6652]
19Apr08:46:20.054-Accepted192.168.43.51:55385
[6652]
19Apr 08:46:20.054-Accepted192.168.43.51:55386
[6652]
19 Apr 08:46:20.055-Accepted 192.168.43.51:55387
[6652]
19Apr08:46:20.055-Accepted192.168.43.51:55388
[6652]
19Apr 08:46:20.055-Accepted 192.168.43.51:55389
[6652]
19 Apr 08:46:20.055-Accepted 192.168.43.51:55390
[6652]19Apr08:46:20.055-Accepted192.168.43.51:55391
ubuntu 16.04 安装 4.0.9 版本的 redis
·配置文件默认/ete/redis/redis.conf
●默认开启protect mode，绑定IP为 127.0.0.1
●默认记录日志/var/log/redis/redis-server.log
---
## Page 37
protected mofe yes.
bind127.0:0.1111
tcp-backlog 511
port6379
tcp-keepalive 380
daemnize yes
supervlsed no
pldfile /var/run/redis/redis-server.pia
egfl3e /var/log/redis/redis=server.lcg
leglevel sotice
saf oao-nigs-sfene
rdbccnpressien yes
dofilenree diep.rdb
ir
/var/lib/redis
repl-dliklesi-syoc
rep1-diskless-sync:delay5
layfree-lazy-evictisn to
rep1-disasle-tcp-noselay no
lazyfree-lazy-server-delno
lazyfree-lezy-espire ro
aperdf1lenae“aoperdonly.of"
apperdonly no
asperdfsync everysec
revrite no
我们关闭protected-mode，设置bind 0.0.0.0，进行正常访问和错误登录尝试，设置requirepass 密码
日志等级verbose -> 错误密码登录尝试 --> 退出 --> 正确密玛登录 --> 执行 info ->执行 set hello world --
R欧错误密码登录尝试 -->退出 --> 正确密玛登录 --> 执行 info --> 执行 set hello world --> 退出
---
## Page 38
rootgelperieliecat/var/1og/cedis/redis-senuerlcg
4969:M 21 Apr 06:29:54.489-DB@:1keys (0vo1ati1e)fn 4 s1ots HT.
4969:M 21Apr 86:29:54.489-@c1fents ccnnected (0s1aves),782669 bytesin use
4969:M 21 Apr 06:29:57.129
4969:M 21 Apr 06:29:59.598
Accepted-192.168.43.235:45e82
DB0:1 keys (e volatile)in 4 slots HT.
4969:M 21Apr 06:29:59.598
1 c1fents connected (0 slaves）,803472 bytes In use
错误登录尝
4969:M 21 Apr 86:38:e4.718
DB θ:1 keys （e volatile)fn 4 s1ots HT.
4969:M 21 Apr 86:38:e4.718
1clfents connected （e slaves),8a3472 bytes 1n use
试
4969:M 21 Apr 06:30:68.902
Client closed connection
4969:M 21 Apr 86:38:09.825
-DB0:1 keys （8volatile) fn 4s1ots HT.
4969:M21 Apr 86:38:89.825
-θc1ients connected (e slaves),7826ea bytes 1n use
4969:M 21 Apr 06:38:14.948-DB 0:1 keys (0vo1at11e)1n 4 s1ots HT.
4969:M 21 Apr 06:30:14.948
9-θc1ients connected (0 slaves),7826e8 bytes In use
4969:M 21 Apr 86:38:20.e44
4-DBθ:1keys（8volatile）1n 4slots HI.
4969:M 21 Apr 86:38:20.044
0clients connected （e slaves),7826ea bytes in use
4969:M 21 Apr 86:30:23.948
4969:M21 Apr 06:30:25.152
Accepted-192.168.43.235:45e84
DBθ:1 keys（e volatile)fn 4 slots HT.
4969:M 21 Apr 86:38:25.152
1 cllents connected (0 slaves),803472 bytes in use
4969:M 21 Apr 06:30:30.262
DB 0: 1 keys (0 volatile)fn 4 slots HT.
4969:M 21 Apr 06:30:30.262
1clients connected (0 slaves),803472 bytes in use
4969:M 21 Apr 06:38:35.292
Client closed connection
4969:M 21 Apr 06:38:35.372
4969:M21Apr 06:30:35.372-0c1ients connected (0slaves),781576 bytesin use
DBd:1keys（θvolatile)in4slotsHl.
rootghelperAee
我擦，放弃放弃，登录成功失败一个样
0x05Mongodb暴力破解
Mongodb 曾经也出现过未授权访问漏洞，具体可以参照Freebuf上的文章https://www.freebuf.com/vuls/212799.html
3.0之前版本的MongoDB，默认监听在0.0.0.0，3.0及之后版本默认监听在127.0.0.1。
3.0之前版本，如未添加用户管理员账号及数据库账号，使用--auth参数启动时，在本地通过127.0.0.1仍可无需账号密码登录
访问数据库，远程访问则提示需认证：
3.0及之后版本，使用--auth参数启动后，无账号则本地和远程均无任何数据库访问权限。
为了分析日志，我们把监听设置为0.0.0.0，使用另一台服务器来进行连接
---
## Page 39
mongodb.conf
#where to store the data.
dbpath=/var/lib/mongodb
#whereto log
1ogpath=/var/1og/mongodb/mongodb.1og
logappend=true
bindip=127.0.0.1
#port=27017
#Enablejournaling,http://ww.mongodb.org/display/Docs/Journaling
journal=true
#Enables periodic logging of cPU utilization and I/O wait
#cpu=true
#Turn on/off security.Off is currently the default
#noauth =true
#auth=true
在Ubuntu上默认无需密码验证（可以添加启动参数来设置密码验证），默认配置文件位置为/etc/mongodb.conf默认
的的日志位置为/var/1og/mongodb/mongodb.1og，3.0以上版本默认band_ip为127.0.0.1，我们修改一下以便实验
#mongodb.conf
#Where to store the data
dbpath=/var/1ib/mongodb
#here tolog
logpath=/var/log/mongodb/mongodb.1og
logappend=true
bind_ip=0.0.0.0
#port=27017
#Enable journaling,http://www.mongodb.org/display/DoCS/Journaling
journal=true
#Enables periodicloggingofCPu utilization andI/O wait
#cpu=true
Turn on/off security.Off is currently the default
这样Centos就可以连接上了
---
## Page 40
cenectirg to1mcrgodb://192.168.43.219:27017/testgssapl5ervlceNeme-megodb
ongoDB shellversion
v4.0.10
Iaplicitsession:sessioni:UUIp（4f7bale6-5402-4f6f-b66e-e3769af0364f)}
KARNING: shel1 ard server versloss do sot match
PongeDB server versien: 3:6.3
Kelccne to the Mergot8 stell.
For Interactive telp,tyre help”.
For more coprehensive decunentatlon,see
Questlons? Try the support group
http://docs.mongedb.crg/
http://groups.gotgle.ccn/group/mingodb-usen
2021-04-20T03:17:42.926e000 I S1CRACE [1n1tand11sten]
Servee has startep warniegs!
2821-84-20183:17:42.926+880 I S10RA6E
2021-04-20T03117:42.9260000IS10RACE
[initadiisten]
See http://dochub.eongodb.org/cere/eeedrotes-filesystem
2021-04-20T03:17:44,106+2000ICCNTROL
2021-04-20T03:17:44,106+4000 ICCNTR0L
[initardlisten]*WakuIxG:Access control is not enabled fon the database
Iinitandiisten
2021-04-20T03:17:44.106+0000 I CCNTROL
2021-04-2003:17:44,106+0000ICCNTROL
[initondlisten]
Read end write eccess to data and configuration is unrestricted
3shcwdbs
[initandlisten]
dain
0.000G
config e.eee6B
1oca1
993888
日志分析
·正常启动，无访问
t-27017d57
p55L 1.1.1 11 5ep2018
ruge
[Epltasdlstes] etected data lles Ln /ver/lib/eongscb created by thevlredliger steroge crgire, 5s setting the actt
[nltasllstes]
de slth the KlredTiger storage erglne
221-64-20103:25:31.638+0000
ISTORALE
]vireotlger_open
ee httg-//dech
es-filesyite
cosfig_bate=false, statistics=( fast), leg-(enakled-true, archivet+ue,path=foursal, ccapresscr=srapay),file_munager=(clote_dle_time-Laeeee) ,statistics_log=(wait
221-4-2g03:25:2.25+e I 510c(nta1ste]ireigerage [1618889152:255924]9028:21960ecece], to-rece: Masnrecr 1op:1startirg
tnitassiistes
[tnitasciistes]
Read and ite access te dta ad cfigrtio is restricted
21-04-20T03:25:32,445+
IEonk [Inltistes]iing fer cenectls en port217
T FTOC
[nitasstes]Entlalling fl1tla diagrot daa catre ith directry/var/ibeng/ctagstc.ata
282104-20703:25:32,44]
otghelpeo
·无密码正常访问->执行show dbs-->exit退出
---
## Page 41
+g t 1/9.74
Tiger eiuge [1i8i56ku]9t96Ect4e], thrce*. Beielng g 4 1hrg 4
s t e e 1h i rtd
pal/a  
(apolicetio
mongodb有一点非常好，它会记录客户端的系统banner信息，上图就可以清晰看到Centos7.8的客户端连接了
mongodb，但是遗憾的是默认并没有记录客户端的具体操作，当然了，遗憾这两个字是针对安全人员来说的，对于应用正
常使用，日志存储，日志可读性，保密性等角度来说，这么做是有道理的。
当然了，mongodb也提供了详细日志的选项，我们尝试打开
#Enables periodic logging of CPu utilization and I/O wait
#cpu=true
#Turn on/offsecurity.Off iscurrently the default
#noauth=true
#auth=true
#Verbose logging output.
verbose=true
#Inspect all client data for validity on receipt （useful for
#developingdrivers)
#objcheck=true
我们看一下开启了verbose之后
无密码正常访问-->执行show dbs-->exit退出
---
## Page 42
godb 64-sit hose-hels
destinatio
Fatod ty taewtreaTigorstorage engire,se settirg the acti
the HiredTiger itorige engin
ast),leg-(er
ph-jesa1ressusrosy),llenga(cese_4te_ademe),staistics_1
guration is usrestelcted
collectlon iefo cache reset
ceztsre alth dinectry Wvar/libeongod/iingrstic.ceta
hsteirt [ hatieyur: 3， Sds: “adtn ] imYelds:e res
Megioe Shell cceaose: ballaiee  bsiiaisfe t.e, Ms: “adatn ]sarields:e rec
tet.Sadlee:
208
 st: 1.9, f: 1.0, 1: (: *
 ca
apjlaae: *Meegi8 Shell* ccesandi reg1Setietitatas  relsetietitatss: 1.e, farihell: t.#, $
systrs.sesslom key: {lasthe: 1 ] rae: 1ssTtLIsdes
---
## Page 43
te 19,  1a [  
[]c119 1]
s  195
Ronee s:ig ytemesfees ey: { 1asthe 1 }rae: set1
 tD11 1ss1.118）
 C0s[0cee3] cord sevt.5cef eea: *Fo 5h11° cxend: IsAeter { 1sketer: 1.0, for5h11: 1a, 5ds: test* ] 
tie14c:e:221ck
Rong08 5he13* cnd: emsslons ( m65loes: 1 [ I: A0|*92:99]73:4
ace) 1 1, sas:
]3
(t1ce 152.168. 41.215/5729e (8 c6sect1ces Ice ofen)
可以看到，即使是设置verbose后还是不会记录具体的操作，但确实是整个过程更详细了
日志未设置verbose
●有密码正常访问->执行show dbs-->退出
logappend=true
bind ip=0.0.0.0
#port=27017
#Enable journaling,http://www.mongodb.org/display/DocS/3
journal=true
#Enables periodic logging of CPu utilization and I/O wait
#cpu= true
#Turn on/off securi
offiscurrently the default
#noauth=true
auth=true
#Verbose logging output.
verbose=true
#Inspect allclient data for validity on receipt （useful
---
## Page 44
rwlrerert
atli eted t n  /var/ige te  e freigr rg giyeeting s
srgdh.srgicorego
1 soksf[1aitam1sites] steats asiage [taess][1ex+rc+aci8ca], tasrei. Nss riy 1p. statshg
r//a/tt.d
nd ( cesl5etCetitatss:3.el fsrShel1: 1/9, Sob: *a(xix~)
连接后尚来认证
 190.168.43.351572s (6 se s mm en)
这里需要注意的是，连接到数据库后，不执行任何操作就会产生下面这条日志
Unauthorized: not authorized on admin to execute command ( replSetGetStatus: 1.0, forShell:
1.0, $db: "admin* )
也就是我标记为连接后尚未认证的这条
●有密码-->使用不存在用户登录-->存在用户错误密码登录尝试-->正确用户名密码登录-->showdbs-->退出
2805:18:19,040+0
[Esitasdlites] Eteitet sta ftle Es /var/l/eusges rwten ty De iveigr stonp rgine, fe sttirg Te acti
ast),teg-
p（aeesstg
  50Ct[sit]ig g [1m971275k7c], twr Re rewr osp: tarig
ring Bog
192.168,43.235
EACCESS
       1s [1
·暴力破解
---
## Page 45
021
021
Ece
821
021-6M
1ient 192:168.43:51:61522
c11est 192.s58.43.51:s1523 Avtheeticationfa11ed
c11ent 192.168.43.51:61535
可以看到，存在大量的failed的日志，这就好办了
日志设置 verbose
直接暴力破解就好
---
## Page 46
可以看到，虽然更加详细了，但是关键字failed还是在的，可以以此来作为筛选依据
日志分析
不同系统以及安装环境日志目录可能不同，这里使用ubuntu默认的目录/var/log/mongodb/mongodb.1og
·存在的账户的登录失败情况
cat /var/log/mongodb/mongodb.1og | grep =v *UserNotFound"|grep failed | awk = " *'(print
$9)' | sort|uniq =c|sort =nr
print）crt|untcor
rootgte1per:/cae/he1gere
·存在的某个账户（以root为例）登录失败的来源IP以及次数
cat /var/log/mongodb/mongodb.log | grep =v *UserNotFound"|grep failed| gzrep root | avk = "
‘(print $14)' | cut =d *:" =f 1 |sort |unig =c |sort =nr
·查看所有存在的账户登录失败的来源以及次数
quad). . ： = xne | patreg daxb|,punogogxasn, A= daxb|bot'qpobuou/qpobuou/bot/xea/ 4eo
$9)*|sort | uniq | while read line;do echo $line;cat /var/log/mongodb/nongodb.1og |grep =v
“UserNotFound" | grep failed | grep $line | avk =F " · '(print $14)' | cut =d ":* =f 1 |sort
|uniq =c | sort =nr; done
dere
192.168.43.51
43.11
52190.
·不存在的账户的登录尝试
.(6s quad).  . d= xxe|patteg doxb| ,punouaogzosn, dax6| 6ot*qpobuou/qpobuou/6ot/xea/ 4eo
sort|unig -c|sort =nr
iprlnt $9]]sort|uniq -c|sort
·不存在账户的登录IP以及次数
.{6s qurad). " . 4= xxe|ptreg doxb|punouaogxosn, dax6| bot*qpobuou/qpobuou/6ot/xea/ 4eo
[sort |unig | while read 1ine;do echo $line;cat /var/log/mongodb/mongodb.log |grep
|uniq =c |sort =nr; done
---
## Page 47
192.168.43.5
0x06smtp暴力破解
邮件服务这块一直是企业突破口的重灾区，主要涉及三个协议SMTP，POP3，IMAP
简单来说，SMTP负责发，POP3、IMAP负责收，POP3协议客户端收到邮件，服务器端就会将其删除，除非有特殊的配
置，可能在一些方面有其用途。IMAP则弥补了这一缺陷，客户端该收收，服务端还给你保存着，同时你在客户端的各种配
置操作都会在服务器上进行同步
按照其用途来说，三种协议都有身份认证的过程，对于这种出现较早的协议，设计之初都不会有双因素认证这种东西，毕竟
是安全人员出现以后，网络才变得不安全了，所以出现了现在各种协议的补充，对于三种协议的具体数据包分析可以看下面
的文章
htps://wooyun.js.org/drops/wireshork%E9%BB%91%E5%AE%A2%E5%8F%91%E7%8E%B0%E4%B9%8B%E6%97%
8.5% EF% BC%884%EF%BC%89%E2%80%94% E2%80%94%E6%9A%B4% E5%8A%9B%E7%A.0% B4%E8%A7%A3.htm
这里直接将文章中的内容引用到这里
▪POP3
+OK Microsoft Exchange Server 2003 P0P3 .......... 6.5.6944.0 (a-ba21a05129e24.test.org)
+ + * + +
//服务器准备就堵
CAPA
//用于取得此服务器的功能选项清单
+OK Capability list follovs
TOP
USER
PIPELINING
EXPIR& NEVER
UIDL
USER PI:EMAIL
//与POP3 Server送出帐户名
+OK
PASS 1qaz@wsx
//与POP3Server送出密码
+oK User successfully logged on.
//认证成功
STAT
+0K 14 21568
QUIT
+OK Microsoft Exchange Server 2003 PoP3
●smtp
---
## Page 48
220 a=ba21a05129e24.test.org Mierosoft ESNrp MAIL Service, Version: 6.0.3790.3959 ready at
Thu, 6Aug201511:10:17+0800//服务航绪
EHLO Mr.RightPC //主机名
250aba21a05129e24.test .org He11o [192.1.14.228]
250 OK
AUTHLOGIN//认证开始
334 vxNlem5hbku6// Usernane1
anVmZW5nHDAxQBR1c3Qub3Jn//输入用户名的base64编码
334 UGFzc3dvcmQ6// Password:
MXFhekBxU1g=//输入密码的base64编码
235 2.7.0 Authentication successful,
//认证成功
▪IMAP
★ OK Microsoft Exchange Server 2003 IMAP4revl .......*.. 6.5.6944.0 (a=ba21a05129e24.test.org)
.. . .....
//IHAP服务航绪
bf8p CAPABILITY
* CAPABILITY IMAP4 IHAP4reV1 IDLE LOGIN=REPERRALS HAILBOXREFERRALS NAMESPACE LITERAL+ UIDPLUS
CHILDREN
bf8p OK CAPABILITY completed.
,XSmgzvbt.coobuagn.NIooT bAgs
//输入用户名：jufeng002，密码：1qaz@wsx
s3yg OK LOGIN completed.
//认证成功
Linux 常用的邮件服务器为Postfix,ubuntu上默认日志位置/var/log/mail.log
SMTP认证失败的IP统计
1|[=0]s|[=0]|{)).o=x|guoudx|bo/o/x/ 
9]d| [19 1) ( . (1\d{2) | 2[0=4 d|25 [05 ]|[1=9 d | \d) ) (3) '|sort |uniq =c|sort =nr
roetgesaepie/
3)rt irt
62 192.168.
3192.168.43.51
Postfix日志能够提取的内容似乎不多，也就这些
0x07善后阶段
直接查看善后阶段即可
---
## Page 49
隧道
为了隐匿流量，攻击者常常使用隧道来进行流量加密与混淆
0xO1SSH隧道
SSH隧道的详细实验过程以及分析可以查看知识点附录0x03