# 三、服务解构
本章将介绍如何从上一章中获取知识，并使用它来创建和构建一个数据库和一个应用服务器容器，因为现实世界的服务通常是以这种方式组成的。一旦我们把它们都建立起来，我们就会看到需要什么，以便把它们组合成一个更有用的服务，甚至覆盖更多的 Docker。
在本章中，我们将涵盖以下主题:
*   快速回顾 Docker 命令
*   用
    写一个真正的服务
    *   网络服务器服务
    *   应用服务
    *   数据库
*   引入卷
*   凭据传递的安全注意事项
# 快速回顾
在开始之前，让我们回顾一下前面在两个列表的单个部分中介绍的 Docker 和 Dockerfile 命令，您可以在以后用作参考。
# Docker 命令
以下是我们为 Docker 介绍的所有命令，还添加了一些其他命令，如果您经常构建容器，您可能会用到这些命令:
For more in-depth information about parameters required for each, or to see commands that we have not covered yet, type `docker help` in the Terminal or the command by itself into the Terminal. You can also visit [https://docs.docker.com/](https://docs.docker.com/) and explore the documentation if the information provided by the CLI output is not good enough, and it may contain more recent data.
```
docker attach - Attach the shell's input/output/error stream to the container
docker build - Build a Docker image based on a provided Dockerfile
docker cp - Copy files between container and host
docker exec - Execute a command in a running container
docker images - List image available to your installation of docker
docker info - Display information about the system
docker inspect - Display information about Docker layers, containers, images, etc
docker kill - Forcefully terminate a container 
docker logs - Display logs from a container since it last started
docker pause - Pause all processes within a container
docker ps - List information about containers and their resource usage
docker pull - Pull an image from a remote repository into the local registry
docker push - Push an image from the local registry into a remote repository
docker rm - Remove a container
docker rmi - Remove an image from the local repository
docker run - Start a new container and run it
docker search - Search DockerHub for images
docker start - Start a stopped container
docker stop - Stop a running container nicely (wait for container to shut down)
docker tag - Create a tag for an image
docker top - Show running processes of a container
docker unpause - Resume all processes in a paused container
docker version - Show the Docker version
```
Recently, Docker commands have begun to be isolated into their own docker CLI sections like `docker container`, to separate them from other cluster management commands. To use this newer syntax, just prepend any command with the container (that is, `docker stop` turns into `docker container stop`). You can feel free to use either version, though keep an eye out as you can probably expect the older style to be deprecated at some point even though the new style is overly verbose for most Docker usage.
# Dockerfile 命令
下面的列表是一个类似的列表，但是这次，我们涵盖了您可以在 Dockerfile 中使用的命令，并且我们按照类似于您在 Dockerfile 中工作时使用的顺序对其进行了排列:
`FROM [:]`:将当前映像基于``
`LABEL = [=value>...]`:将元数据添加到映像
`EXPOSE `:指示应该将哪个端口映射到容器
`WORKDIR `:为以下命令设置当前目录
`RUN  [ && ... ]`:执行一个或多个 shell 命令
`ENV =`:将环境变量设置为特定值
`VOLUME `:指示应该是外部挂载的卷
`COPY  `:复制本地文件， 一组文件，或一个文件夹放入容器
`ADD  `:与`COPY`相同，但可以处理 URIs 和本地档案
`USER `:将运行时上下文设置为``或``，用于此命令之后的命令
`CMD ["", "", ...]`:定义容器启动时要运行的命令
Since almost all containers you would want to build can be constructed with this set, this list is not the whole superset of Docker commands, and a few of them have been intentionally left out. If you get curious about things such as `ENTRYPOINT`, `ARG`, `HEALTHCHECK`, or others, you can check out the complete documentation at [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
# 编写真正的服务
到目前为止，我们已经花时间制作了帮助我们建立 Docker 技能的假或模拟容器服务，但是我们还没有机会开发类似于真实世界服务的东西。一般来说，大多数在那里使用的更简单的服务看起来类似于这个高级图中所示的内容:
![](img/649cb2f4-8505-48c6-b25c-83efbe4dcff1.png)
# 概述
这里我们将详细讨论每项服务。
**网络服务器**:
我们刚刚看到的图片中最右边的部分是一个网络服务器。Web 服务器充当高速 HTTP 请求处理程序，通常在此上下文中使用，如下所示:
*   集群内资源的反向代理端点、**虚拟私有云**(**【VPC】**)和/或**虚拟专用网** ( **VPN** )
*   强化网关守护设备，以限制资源访问和/或防止滥用
*   分析收集点
*   负载平衡器
*   静态内容交付服务器
*   降低应用服务器逻辑利用率
*   SSL 终端端点
*   远程数据缓存
*   数据二极管(允许数据输入或输出，但不能两者都有)
*   本地或联合帐户 AAA 处理程序
如果对安全性的需求极低，服务是内部的，并且处理能力很强，那么我们想象中的服务的这一部分并不总是严格要求的，但是在几乎所有不存在这些条件的其他情况下，添加 web 服务器实际上是强制性的。网络服务器的一个很好的类比是你的家庭路由器。虽然您并不一定非要使用互联网，但专用路由器可以更好地共享您的网络，并充当您和互联网之间的专用安全设备。虽然我们在上一章花了很多时间使用 NGINX，但是也可以使用许多其他的(Apache、微软 IIS、lighttpd 等等)，并且通常在功能上是可以互换的，但是要注意明显不同的配置设置。
**应用服务器**:
那么，如果 web 服务器为我们做了所有这些，那么应用服务器做了什么呢？应用服务器实际上是您的主要服务逻辑，通常包含在一些网络可访问的端点或消耗队列的守护进程中。这件作品可以如下使用:
*   主网站框架
*   数据操作应用编程接口逻辑
*   某种数据转换层
*   数据聚合框架
应用服务器和网络服务器的主要区别在于，网络服务器通常对静态数据进行操作，并在流程中做出严格的决策，而应用服务器几乎以非线性方式进行所有动态数据处理。属于这一类别的东西通常是框架，如 Node.js、Ruby on Rails、JBoss、Tornado 和其他用于运行可以处理请求的特定编程语言应用的框架。尽量不要认为这里需要一个大框架，因为即使是正确的 Bash 脚本或 C 文件也可以完成这项工作，并且仍然可以作为应用服务器。
我们尽可能将大部分工作交给网络服务器而不是应用服务器的原因是，由于框架开销，应用服务器通常非常慢，因此不适合做简单、小型和重复的任务，而网络服务器可以不费吹灰之力完成这些任务。作为参考，一个普通的专用 web 服务器在提供静态页面方面比一个成熟的应用服务器要高效一个数量级，并且，根据推论，比大多数应用服务器要快得多。如前所述，您可能可以独立处理应用服务器上的低负载，或者使用一些中等调优的负载，但任何高于这一水平的负载都值得使用专用的反向代理。
**数据库**:一旦我们把这个逻辑和静态文件处理下来，可悲的是，如果没有实际的数据来转换和传递，它们大多是无用的。与任何使用数据的软件一样，这是通过备份数据库来完成的。因为我们希望能够扩展系统的任何部分并隔离离散的组件，所以数据库有自己的部分。然而，在容器出现之前的世界里，我们依赖于大型的、单一的数据库，这些数据库为我们提供了**原子性**、**一致性**、**隔离**、**和持久性** ( **ACID** )属性，并且它们做得很好。然而，在容器世界中，我们绝对不需要这种类型的架构，因为它既没有可分割的数据库那么有弹性，也没有可水平扩展的数据库那么能集群化。
但是，使用这些新型数据库，您通常无法获得与旧式数据库相同的数据处理方式，这是一个重要的区别。大多数容器友好型数据库而不是 ACID 的结果是**基本可用**、**软状态**、**最终一致性** ( **BASE)** 、**T9】，这基本上意味着数据最终将是正确的，但是在最初发送的更新和最终状态之间，数据可能处于中间值的各种状态。**
# 我们要建造什么
我们想做一个能够作为一个好例子但又不太复杂的服务，来展示一个真实的服务例子可能是什么样子。对于这个用例，我们将创建一个容器分组，它可以在基本的 HTTP 身份验证后面做两件事:
*   将登录页上的表单中输入的字符串保存到数据库中。
*   当我们登陆主页时，显示到目前为止保存的所有字符串列表。
在这里，我们将尝试覆盖尽可能多的东西，同时也构建一个容器支持的 web 服务的一般现实原型。请记住，有了可用的工具，即使让服务变得如此简单也不是很容易，因此我们将尝试尽可能降低复杂性，尽管我们的内容的难度从这里开始增加。
# 实施
由于我们已经讨论了一般服务架构中需要的三个主要部分，我们将把我们的项目分成相同的独立部分，包括 web 服务器、应用服务器和数据库容器，我们将在这里概述构建它们所需的步骤。如前所述，如果您不想重新键入这些示例中的代码，您可以使用 Git 在[https://github.com/sgnn7/deploying_with_docker](https://github.com/sgnn7/deploying_with_docker)从 GitHub 轻松签出所有代码。
# 网络服务器
我们可以在这里选择任何 web 服务器软件，但是因为我们已经在早期使用过 NGINX，所以我们尝试重用这个组件的一些部分是有意义的——这实际上就是容器架构的全部！web 服务器组件将提供一些基本的身份验证、缓存数据，并充当其背后的应用服务器的反向代理。我们之前工作的基本设置可以在这里使用，但是我们将对它进行一些修改，这样它就可以充当代理，然后使用基于我们将在`Dockerfile`中创建的凭证文件的身份验证，而不是直接提供文件。让我们创建一个名为`web_server`的新文件夹，并将这些文件添加到其中:
`nginx_main_site.conf`:
```
server {
  listen  80;
  server_name    _;
  root /srv/www/html;
  location ~/\. {
    deny all;
  }
  location / {
    auth_basic           "Authentication required";
    auth_basic_user_file /srv/www/html/.htpasswd;
    proxy_pass           http://172.17.0.1:8000;
  }
}
```
关于这种配置，这里有三个有趣的部分。第一个是包含`auth_basic_`命令，该命令在该配置提供的所有端点上启用 HTTP 基本身份验证。第二，如果你对新的带`.`前缀的凭证文件足够注意的话，那就是自从我们添加了`.htpasswd`之后，我们现在需要拒绝获取所有以`.`开头的文件。第三个也是最后一个有趣的地方是`proxy_pass`的使用，它允许服务器将所有经过身份验证的流量路由到后端应用服务器。为什么我们使用`http://172.17.0.1:8000`作为目的地开始打开众所周知的 Docker 网络的潘多拉盒子，所以我们将解释为什么我们稍后使用它，因为如果我们现在覆盖它，我们将破坏我们的服务构建。
Warning! In most cases, using basic authentication is a practical joke of security without HTTPS as we use it here since anyone on the network can sniff out your credentials in plaintext with the simplest of tools. In your services, at the very least, mandate the HTTPS protocol is you use basic auth or rely on stronger forms of credentials-passing before deploying services to anything with direct Internet access.
我们现在可以在同一个目录中添加新的`Dockerfile`，如下所示:
```
FROM nginx:latest
# Make sure we are fully up to date
RUN apt-get update -q && \
 apt-get dist-upgrade -y && \
 apt-get install openssl && \
 apt-get clean && \
 apt-get autoclean
# Setup any variables we need
ENV SRV_PATH /srv/www/html
# Get a variable defined for our password
ARG PASSWORD=test
# Remove default configuration
RUN rm /etc/nginx/conf.d/default.conf
# Change ownership of copied files
RUN mkdir -p $SRV_PATH && \
 chown nginx:nginx $SRV_PATH
# Setup authentication file
RUN printf "user:$(openssl passwd -1 $PASSWORD)\n" >> $SRV_PATH/.htpasswd
# Add our own configuration in
COPY nginx_main_site.conf /etc/nginx/conf.d/
```
正如你所看到的，我们已经在前一章的原始工作中做了一些改变。首先应该突出的是书写`RUN apt-get`行的新方法，我们已经在这里简单注释了:
```
RUN apt-get update -q && \         # Update our repository information
 apt-get dist-upgrade -y && \   # Upgrade any packages we already have
 apt-get install openssl && \   # Install dependency (openssl)
 apt-get clean && \             # Remove cached package files