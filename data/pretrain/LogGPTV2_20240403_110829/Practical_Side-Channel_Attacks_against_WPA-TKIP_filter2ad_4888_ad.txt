From Listing 2 we learn that, if the driver drops frames for which
hardware decryption failed, the power management flags are in-
spected only if hardware decryption succeeds. That is, if hardware
decryption is used in combination with Linux kernel 3.12 or above,
and the driver drops frames when hardware decryption fails, frames
with an invalid TKIP ICV do not have their management flags in-
spected. This enables us to perform the same side-channel attack as
in Section 4.3 against new Linux kernels. Summarized, we chop the
last byte from a packet, guess its value, correct the ICV, and detect
a correct guess by seeing if the AP replies to a PS-Poll packet.
However, not all drivers drop the frame if hardware decryption
failed. For example, we inspected the source code of 17 widely-
used Linux drivers, and found that 10 of them do not drop frames
if hardware decryption failed. Instead, these drivers forward the
original encrypted frame to the Wi-Fi subsystem of the operating
system. This is done so the kernel can try to decrypt the frame
itself, which can be useful if the hardware used an outdated or
incorrect key. However, with other Wi-Fi chips the original frame
is lost after decryption, because the chip decrypts the frame in-
place. As a result, the driver has no other option than to drop the
frame when hardware decryption failed. Finally, we remark that the
802.11 standard does not explicitly state whether an implementation
should first decrypt a frame, or first inspect the power management
flags. In other words, this behavior is implementation-dependent.
We evaluated the attack against an Intel AC 8265 that was run-
ning Arch Linux with kernel version 4.20. This confirmed the Intel
driver dropped frames for which hardware decryption failed. Our
experiments also confirmed that under this condition the power-
management side-channel attack remains possible against new
Linux kernels. Inspecting the source code of the Intel driver re-
vealed that the driver is forced to drop the frame because the Wi-Fi
chip decrypts the frame in-place, meaning the original frame is lost
if decryption failed. On average, it took around 4 to 6 minutes to
decrypt the Michael MIC and ICV, and to subsequently recover the
MIC key. The main reason this attack is slower than the original
power-management attack of Section 4.3, is because with the Intel
AC 8265 card, the AP generated a high amount of retransmissions.
This meant that, when guessing the value of the chopped off byte,
we could only verify 10 guesses every second in a reliable manner.
5.3 Linux Retransmission Detection
As shown in step 2 of Listing 2, the Wi-Fi subsystem of Linux also
filters retransmitted (plaintext) frames in case the Wi-Fi chip did not
do so already. This is accomplished by storing the sequence number
of the previously received frame in the variable last_seq_ctrl,
and comparing it to the sequence number of incoming frames. In
case these sequence numbers are equal, a retransmission is detected,
and the incoming frame is dropped. More importantly, this means
that every frame processed by the kernel’s Wi-Fi subsystem influ-
ences the state of the kernel. In particular, each frame causes the
variable last_seq_ctrl to be updated. When combined with hard-
ware decryption, and assuming the driver drops frames for which
decryption failed, this means only TKIP frames with a correct ICV
cause last_seq_ctrl to be modified. Therefore, if we can detect
whether last_seq_ctrl has a specific (modified) value, we obtain
a new side-channel vulnerability that can determine whether the
ICV of a TKIP frame is correct.
To test whether last_seq_ctrl equals x, we inject a Security
Association (SA) query request with a sequence number equal to x,
and with the retry bit set in the MAC header. If last_seq_ctrl
indeed equals x, the frame is treated as a retransmitted one, and
therefore is silently dropped. However, if last_seq_ctrl does not
equal x, the client or AP will reply using a SA query response. Note
that the SA query handshake is part of the Management Frame
Protection (MFP) standard, which has been supported by Linux
since kernel 2.30, and hence we can safely assume it is supported
by all clients and access points. Additionally, Linux replies to SA
query requests even if management frame protection is not used in
the network.
One complication is that on Linux, the user space daemon that
manages AP functionality and replies to SA queries, e.g. hostapd,
may also be filtering retransmitted frames. This might cause com-
plications when the kernel thinks a frame is new, but the user space
daemon still treats it as a retransmitted frame. To avoid this sit-
uation from arising, we first let the adversary inject a SA query
request with a fresh sequence counter different from x. This assures
that, when later on in the attack the kernel’s last_seq_ctrl does
not equal x, the user space daemon will indeed reply to the SA
query request. Otherwise, even if last_seq_ctrl does not equal x,
hostapd may still treat it as a retransmission and hence ignore it.
All combined, to detect whether the ICV of a TKIP frame is
correct, an adversary must perform the following actions:
(1) Inject a SA query response with a fresh sequence number
different than x. This causes the user space daemon to update
its last received sequence number of SA query frames.
(2) Inject a probe response with a sequence number of x. This
sets the kernel’s last_seq_ctrl variable to x, without af-
fecting the user space daemon.
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand422(3) Inject the TKIP frame using a sequence number different
than x. Note that this sequence number is unauthenticated,
and is different from the TKIP Sequence Counter (TSC) that
is used for detecting malicious replays (recall Fig. 1). Hence
an adversary can modify the sequence number of a TKIP
frame without affecting its decryption.
(4) Inject a SA query request with a sequence number of x.
If the adversary receives a SA query response after injecting these
frames, the injected TKIP frame had a correct ICV. This is because
the SA query request is only accepted if the kernel’s last_seq_ctrl
variable differs from x. And this is only the case when the TKIP
frame has a valid ICV, and therefore overwrote the last_seq_ctrl
variable.
A second obstacle we encountered, is that Linux tracks the last
received sequence number for each Quality of Service Traffic Iden-
tifier (QoS TID) separately. In other words, for a frame to be treated
as a retransmission, it must use the same sequence counter as the
previously received frame for the given QoS TID. However, the SA
query frame that we use to detect if last_seq_ctrl was modified,
is a management frame, and therefore does not support separate
QoS TIDs. Instead, a SA query frame only supports a single default
QoS TID. To remedy this problem, we inject the TKIP frame without
a QoS header. This causes both the TKIP frame and the SA query
frame to use the same default QoS TID. Unfortunately, stripping
the QoS header from the TKIP frame introduces another problem.
Namely, the adversary can no longer abuse the QoS TID to bypass
the TKIP replay check (recall that each QoS TID has its own re-
ceive replay counter). Fortunately, we discovered that practically all
Wi-Fi chips that support hardware decryption, do not perform re-
play detection in hardware. Instead, the Wi-Fi chips only performs
decryption and authentication, but replay detection is left to the
driver or operating system. For example, in Listing 2, replays are
detected by the Wi-Fi subsystem of Linux in the h_decrypt handler.
In other words, an adversary can simply inject TKIP frames using
an old replay counter, and Linux will only realize this is a replayed
frame in the h_decrypt handler. As a result, retransmissions are
detected in the h_check_dup handler before TKIP replay detection.
This means a replayed TKIP frame with a correct ICV will influence
the last_seq_ctrl variable, but a TKIP frame with an incorrect
ICV will not affect last_seq_ctrl.
We also remark that the authenticity of a TKIP frame is verified in
the h_michael_mic_verify handler, which is executed only if the
frame passed the TKIP replay detection in h_decrypt. This implies
that usage of an old replay counter also avoids the generation of
MIC failures, meaning we no longer have to rely on fragmented
frames to suppress MIC failures.
We evaluated the attack in practice using an Intel AC 8265 as the
victim, which was running Arch Linux with kernel 4.20. To inject
frames, one must use a Wi-Fi card that allows us to control the
sequence number of injected frames. In our experiments, we used
the AWUS051NH v2 dongle. Note that other Wi-Fi cards may over-
write the sequence number of injected frames, causing the attack
to fail. For the AP we used a TL-WN722N. During our experiments,
we observed that our side-channel sometimes incorrectly reports a
TKIP ICV as being correct. To avoid such false positives, we only
treat a frame as having a correct ICV if the side-channel reports a
positive result twice. Using this setup, we successfully performed
the attack and decrypted the ICV and Michael MIC of a sniffed
TKIP frame, to subsequently recover the MIC key. When testing
10 guesses for the chopped byte every second, the attack took on
average 2 to 4 minutes. Sending more than 10 guesses every second
makes the side-channel unreliable, because too many frames have
to be injected in a small time-frame.
Against Linux kernel 3.6.11.8 and below, our side-channel attack
even works against broadcast and multicast frames (i.e. group-
addressed frames that are encrypted using the group key). This
means that even a client which uses CCMP as the pairwise ciphers,
can still be attacked if the network uses TKIP as the group cipher.
Since nearly half of all protected Wi-Fi networks still use TKIP as the
group cipher, this has a significant practical impact. On newer Linux
kernels however, the sequence number field in group-addressed
frames is not inspected [8]. As a result, these implementations can
only be attacked if they use TKIP as the pairwise cipher, in which
case all Linux versions are vulnerable. Finally, another advantage
of this side-channel is that it works against both clients and APs.
5.4 OpenBSD BlockAck Side-Channel
On OpenBSD, several Wi-Fi drivers utilize the hardware decryption
capabilities of Wi-Fi chips as well. To investigate whether this intro-
duces side-channels, we also audited the OpenBSD source code for
detectable side-effects that indicate whether a frame was forwarded
to its Wi-Fi subsystem. Recall that if a driver only forwards frames
when hardware decryption succeeded, any noticeable side-effect of
forwarding the frame results in an exploitable side-channel.
Surprisingly, we quickly discovered a technique to determine if
a frame was forwarded to the Wi-Fi subsystem of the operating sys-
tem. This technique is based on the Block Acknowledgement (BA)
feature of 802.11e [2], which allows a station (i.e. a client or AP) to
acknowledge multiple QoS data frames at once. To use this feature,
a BA agreement must first be established. Once this is done, the
transmitter can request the receiver to acknowledge multiple QoS
data frames at once. This request is made by setting the Block Ack
flag in each frame’s QoS header. However, if no BA agreement was
negotiated, and the Block Ack flag is set in a frame’s QoS header,
OpenBSD will transmit an action frame instructing the sender to
first establish a BA agreement. Importantly, the QoS flags of data
frames are not authenticated. Therefore, an adversary can modify
the QoS header without affecting the decryption of the frame. As a
result, an adversary can use the following steps to determine if the
ICV of a TKIP frame is correct:
(1) If not already present, include a QoS header in the TKIP
frame, and set a QoS TID having a low replay counter.
(2) Set the Block Ack flag in the QoS header, and mark the frame
as being fragmented. Send the resulting frame to the victim.
(3) If the victim replies with an action frame, the ICV of the
frame was correct. If there is no reply, the ICV was wrong.
Note that the frame will be processed because we are injecting the
frame using a QoS TID that has a lower replay counter than the
original or default QoS TID of the frame. In case the TKIP ICV is
correct, hardware decryption will succeed, and the driver will for-
ward the frame to the Wi-Fi subsystem. As a result, OpenBSD will
inspect the QoS header, and will notice that the Block Ack flag is set,
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand423without there being a BA agreement. This causes OpenBSD to trans-
mit an action frame with an error status code. On the other hand,
if the TKIP ICV is wrong, and the driver drops frames for which
hardware decryption failed, OpenBSD will silently ignore the frame.
Finally, MIC failures during hardware decryption are avoided by
marking the frame as being fragmented. This causes the hardware
to skip Michael authentication. Additionally, the OpenBSD kernel
will also not try to check the Michael MIC, because the frame is
almost immediately dropped due to the invalid Block Ack flag.
We tested the attack against OpenBSD 6.4, where the victim used
an AWUS051NH v2 Wi-Fi dongle. We chose this dongle because
it is often recommended for its high reception [5], and because it
supports hardware decryption on OpenBSD. For the attacker we
used a TL-WN722N Wi-Fi dongle with Arch Linux as the operating
system. To inject frames with a modified QoS Ack Policy field, we
had to patch the Linux kernel so it would not overwrite the QoS
header when injecting frames. With this modification, we were able
to successfully perform the side-channel attack against OpenBSD.
On average, it took about 2 to 4 minutes to decrypt the ICV and
Michael MIC, and subsequently recover the MIC key.
Our side-channel works against both unicast Wi-Fi frames (which
are encrypted with the session key) and against group-addressed
Wi-Fi frames. Similar to the retransmission side-channel against
Linux, this means the attack even works against modern clients
that support CCMP. After all, if the network uses TKIP as the group
cipher, all clients must use TKIP to decrypt group-addressed frames.
5.5 Broadcom Code Inspection
During our analysis, we also inspected the source code of Broadcom-
based routers. In particular, we investigated leaked source code
of the RT-AC86U, which internally uses a Broadcom Wi-Fi chip.
This code inspection indicated that the driver drops frames for
which hardware decryption failed. Since the router uses Linux,
we conjecture that it is affected by both the power management
side-channel of Section 5.2, and the retransmission detection side-
channel of Section 5.3.
5.6 OpenBSD Fragment and Replay Attack
While inspecting the source code of OpenBSD, we noticed that it
did not contain code to handle fragmented Wi-Fi frames. Although
this seems harmless, not handling fragmented frames introduces a
surprising vulnerability when combined with hardware decryption.
When hardware decryption is enabled, the Wi-Fi chip will de-
crypt fragmented TKIP frames. However, because the frame is
fragmented, the authenticity of the frame cannot yet be checked.
This is because the Michael MIC is not calculated over individ-
ual fragments, but only over the full frame. Therefore, the Wi-Fi
chip forwards decrypted fragments to the operating systems. It is
then the responsibility of the operating system to reassemble all
fragments, and subsequently authenticate the reassembled frame.
Instead of reassembling fragmented frames, OpenBSD treats in-
dividual fragments as full frames, and will not verify its authenticity.
An adversary can abuse this to inject arbitrary packets as follows:
(1) Derive some known keystream, by predicting the content of
encrypted packets (e.g. based on unique lengths), and xoring
the captured ciphertext with the predicted plaintext.
(2) Append a CRC to the packet to be injected, and encrypt it
using the derived keystream.
(3) Mark the frame as being fragmented, and inject it towards
the OpenBSD victim.
When an OpenBSD victim receives the injected frame, the Wi-Fi
chip will decrypt the fragment, and verify the ICV. Since the ICV is
correct, it will be stripped from the fragment, and the remaining
content of the frame is forwarded to the OpenBSD operating system.
The Wi-Fi subsystem of OpenBSD will then treat the fragment as a
full frame. Moreover, it will assume the hardware already verified
the authenticity of the frame, while in reality only the ICV was
verified. As a result, the adversary successfully injected the packet.
Rather worryingly, we also discovered a second vulnerability in
how OpenBSD handles hardware-decrypted frames. In particular,
we found that OpenBSD does not perform replay detection when
using hardware encryption. The reason this happens, is because the
Wi-Fi chips only decrypts the frame, but does not check for replays.
Instead, it remains the responsibility of the operating system to
check for replays. Unfortunately, OpenBSD does not perform replay
checks when the frame got decrypted by hardware. Against both
TKIP and CCMP, this enables an adversary to trivially replay frames.
Moreover, by combining this with the TKIP fragmentation bug
explained in the previous paragraph, an adversary can use a single
keystream to inject an infinite amount of packets.