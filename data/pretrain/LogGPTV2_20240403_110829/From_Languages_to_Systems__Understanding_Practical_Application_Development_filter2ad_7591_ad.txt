the protocols for protection against more subtle attacks (a
non-trivial assumption).
There are other caveats to security that must not be over-
looked. Firstly, the security properties of a program are de-
pendent on the correctness of the Jif compiler (and our pol-
icy compiler). Secondly, the security properties may also be
dependent on supporting infrastructures. This includes the
correctness of encryption libraries and the strength of used
cryptographic algorithms, the protection on keystores and
correctness of public-key cryptographic libraries as well as
the security enforced by the local ﬁle system. Moreover, for
the system to be secure, the enforced policy must be consis-
tent across all clients. We defer integrity to future work.
One advantage of Jif is that it forces the programmer to
think in terms of information ﬂows and to consider secu-
rity concerns from the outset. Interestingly, there is a strong
consensus in the software engineering community that per-
forming these kinds of security analysis at design time is
essential to the security of the resulting system [6].
Finally, we observed that the policy tool effectively de-
coupled policy from the programs that they govern. This al-
lowed us to modify policy easily in order to accommodate
different security models. By instrumenting the code dur-
ing development with different options for each ﬁlter, we
could implement distinct security models without altering
the code. Furthermore, by gathering the policy into a single
ﬁle, it was easier to do a security analysis and gauge what
information ﬂows could take place for a given principal, in
contrast to leaving declassify statements in the code.
The difﬁculty of programming in Jif The shortcomings
of Jif are frequently not speciﬁc to Jif, so much as they
are issues that any security-typed compiler must face. Jif
is the most advanced security-typed compiler available and
the Jif team should be commended for their substantial ef-
forts, but it is not yet ready for industrial development. Im-
plementing the JPmail client took hundreds of man-hours
(not including the time necessary to learn Jif) to generate
around 6,000 lines of code. Furthermore, despite the sub-
stantial amount of work involved, our mail client is neither
ﬂashy nor full-featured. It uses text-based I/O and handles a
minimal subset of the MIME standard just enough to allow
communication between various principals. This should be
contrasted with the more modest efforts needed to retroﬁt
composable security properties onto the full-featured, GUI-
based email client, Pooka, by using the Polymer security
policy system [2].
6.1 Needs for improvement
Debugging A serious issue we faced was in the difﬁculty
of debugging Jif applications. No advanced debugging tools
exist for Jif, leaving us only with rudimentary print state-
ments. Furthermore, because Jif is designed to hide infor-
mation, we, in turn, had to overcome its propensity for hid-
ing information in order to reveal it for debugging.
Implicit ﬂows Another source of repeated consternation
in Jif programs involves implicit ﬂows. Jif tracks not only
explicit ﬂows of information as data passes from one vari-
able to another, but also implicit ﬂows, in which data is
leaked through the control path. For example, making a
low conﬁdentiality assignment in the body of a conditional
with a highly conﬁdential guard releases a small amount
of information about the guard through the assignment. To
prevent this, Jif raises the security level of everything in the
body of the conditional to the level of the guard (by assign-
ing this security level to a pc-label and label-joining the pc
with every information source in the body) for the length of
the body. This applies also in the presence of loops and ex-
ceptions. With nested conditionals, loops and exceptions, it
can become quite difﬁcult to determine by inspection what
the security level of the pc is at a given point in the code.
Furthermore, even in knowing the pc-label, it can be chal-
lenging to determine how it got that way.
Reader lists One unexplored area of Jif that holds great
promise in expressing ﬂexible policy is the use of Jif reader
lists. The decentralized label model (DLM) provides for la-
bels such as {alice:bob}, meaning that Bob cannot copy
the value, but only view it on a channel that both Alice and
Bob trust. Using this policy, an email could be sent to Bob
which he could not save on his hard drive or forward to an-
10
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006other user, but could only view on a terminal certiﬁed by
both him and Alice. This would be a very useful policy, al-
lowing Alice to retain control over her data, even on another
user’s machine.
Distributed policy One of the great boasts of security-
typed languages is that noninterfering components are com-
posable. Thus, secure programs can be built in a modular
way, a block at a time, and when composed can still make
end-to-end security guarantees. The problem is that in order
to have security-typed distributed applications, all neces-
sary support structures, including sockets, network stacks,
ﬁle systems, operating systems, etc. would need to be built
in security-typed languages. Since this dream will not be
fulﬁlled in the near future, Jif at least allows incremental
deployment of applications with interfaces to existing sup-
port services. Thus, in the mean time, conventional security
enforcement mechanisms such as certiﬁcates, encryption,
key stores, SSL, etc. must be used. One shortcoming of
Jif is that it does not provide a secure integration of these
conventional security enforcement mechanisms.
Incremental development Future applications will re-
quire many more support libraries be integrated with Jif.
Currently, Jif has a small library of security-typed versions
of Java’s Container classes. Most other support must still
be developed however.
In our case study, we have pro-
vided a subset of the javax.mail library. Hopefully other
projects will continue to ﬁll the gaps, and thus make Jif
more accessible to application developers.
7 Related Work
The concept of information-ﬂow control is well es-
tablished. After the ﬁrst formulation by Bell and La
Padula [3] and the subsequent deﬁnition of noninterfer-
ence [11], Smith, Volpano, and Irvine ﬁrst recast the ques-
tion of information ﬂow into a static type judgment for a
simple imperative language [28].
The notion of information ﬂow has been extended to lan-
guages with many other features, such as programs with
multiple threads of execution [27, 14], functional languages
and their extensions [19, 29] and distributed systems [14].
For a comprehensive survey of the ﬁeld, see the survey by
Sabelfeld and Myers [21].
Two robust security-typed languages have been imple-
mented that statically enforce noninterference. Flow Caml
[24] implements a security-typed version of the Caml lan-
guage that satisﬁes noninterference. JFlow [16] and its suc-
cessor Jif [18] introduce such features as a decentralized
label model and run-time principals in an extension to the
Java language. Jif is actively in development, with the latest
release in June 2006 (v. 3.0) introducing integrity labels [5].
is declassiﬁcation.
Sabelfeld and Sands provide a survey of this ﬁeld [22]. We
add our own, modest work to this collection [12], introduc-
theme in this paper
A central
ing the notions of trusted declassiﬁcation and noninterfer-
ence modulo trusted methods. What sets our work apart is
a demonstration of the practical utility of these tools.
Some of our work uses concepts (PKIs, email encryp-
tion, etc.) explored more extensively in such systems as
OpenPGP. Our purpose in developing the JPmail client,
however, was not to replace the state-of-the-art secure mail
clients (for a survey, see [10]), nor to replace extensive se-
cure email infrastructures such as OpenPGP [4], but rather
to investigate the interaction of security-typed programming
with real-world security tools, such as certiﬁcates, symmet-
ric and asymmetric encryption, etc.
The most closely related work is the paper by Askarov
and Sabelfeld, detailing a mental poker protocol application
in Jif. Our work is a natural successor to theirs, exploring
areas of policy and distributed policy that were not devel-
oped in their work. Our application is also slightly larger
than theirs (about 15%) and an order of magnitude larger
than the other security-typed applications [18, 26].
8 Conclusions
This paper has described the ﬁrst real-world application
built in a type-secure language: the JPmail email client. In
so doing, we have exposed the advantages and limitations
of the state of the art. On the positive side, Jif provides
extensive and usable interfaces for developing information
ﬂow-governed applications. These features provide a basis
from which concrete security guarantees can be built.
Our work in JPmail also uncovered two central deﬁcien-
cies. First, at present, working with Jif is exceedingly difﬁ-
cult. This is because of a dearth of developer tools and the
difﬁculty in determining the source and meaning of errors.
We introduce an IDE and policy design patterns to help ad-
dress these developer tool limitations. Second, there is little
or no infrastructure to formulate policy, communicate that
policy beyond a single application, or map the guarantees
onto surrounding security infrastructure. Here, our policy
compiler and policy store address each of these areas.
Even in the face of the considerable challenges we en-
countered in this project, we are heartened by the experi-
ence. To be sure, the tools and practice of using Jif, and in a
larger sense security-typed languages, must mature before
their promise is met. We see this work as another step in
that maturation.
9 Acknowledgements
We thank Steve Chong for his endless patience with and
prompt responses to our questions about Jif. We thank the
reviewers for their helpful comments. This research was
supported in part by NSF grant CCF-0524132, “Flexible,
Decentralized Information-ﬂow Control for Dynamic Envi-
ronments” and in part by Motorola through the Software
Engineering Research Consortium (SERC).
11
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006[16] A. C. Myers. Mostly-static decentralized information ﬂow
control. Technical Report MIT/LCS/TR-783, Massachus-
setts Institute of Technology, University of Cambridge, Jan-
uary 1999. Ph.D. thesis.
[17] A. C. Myers and B. Liskov. Protecting privacy using the
decentralized label model. ACM Transactions on Software
Engineering and Methodology, 9(4):410–442, 2000.
[18] A. C. Myers, N. Nystrom, L. Zheng, and S. Zdancewic.
Jif: Java + information ﬂow. Software release. Located at
http://www.cs.cornell.edu/jif, July 2001.
[19] F. Pottier and V. Simonet.
Information ﬂow inference for
ML. In POPL, pages 319–330, January 2002.
[20] B. Ross and R. Esposito. Espionage case breaches the white
house. ABC news report, Oct. 5 2005. http://abcnews.
go.com/WNT/story?id=1187030.
[21] A. Sabelfeld and A. C. Myers. Language-based information-
ﬂow security. IEEE Journal on Selected Areas in Communi-
cations, 21(1):5–19, January 2003.
[22] A. Sabelfeld and D. Sands. Dimensions and principles of de-
classiﬁcation. In Proceedings of the IEEE Computer Secu-
rity Foundations Workshop, Aix-en-Provence, France, June
2005.
[23] U. Shankar, T. Jaeger, and R. Sailer. Toward automated
information-ﬂow integrity veriﬁcation for security-critical
applications. In NDSS. The Internet Society, 2006.
[24] V. Simonet. FlowCaml in a nutshell. In G. Hutton, editor,
Proceedings of the ﬁrst APPSEM-II workshop, pages 152–
165, March 2003.
[25] N. Swamy, M. Hicks, S. Tse, and S. Zdancewic. Managing
policy updates in security-typed languages. In CSFW ’06:
Proceedings of the 19th IEEE Computer Security Founda-
tions Workshop, 2006.
[26] S. Tse and G. Washburn. Cryptographic programming in
jif. Project report for CIS-670, Spring 2003, Feb. 11 2004.
http://www.cis.upenn.edu/~stse/bank/main.pdf.
[27] D. Volpano and G. Smith. Probabilistic noninterference in
JCS, 7(2–3):231–253, November
a concurrent language.
1999.
[28] D. Volpano, G. Smith, and C. Irvine. A sound type system
for secure ﬂow analysis. JCS, 4(3):167–187, 1996.
[29] S. Zdancewic. A Type System for Robust Declassiﬁcation.
In Proceedings of the Nineteenth Conference on the Mathe-
matical Foundations of Programming Semantics. Electronic
Notes in Theoretical Computer Science, March 2003.
References
[1] A. Askarov and A. Sabelfeld. Secure implementation of
cryptographic protocols: A case study of mutual distrust. In
Proceedings of the 10th European Symposium on Research
in Computer Security (ESORICS ’05), LNCS, Milan, Italy,
September 2005. Springer-Verlag.
[2] L. Bauer, J. Ligatti, and D. Walker. Composing security
In PLDI ’05: Proceedings of the
policies with polymer.
2005 ACM SIGPLAN conference on Programming language
design and implementation, pages 305–314, New York, NY,
USA, 2005. ACM Press.
[3] D. E. Bell and L. J. LaPadula. Secure computer systems:
Mathematical foundations. Technical Report MTR-2547,
Vol. 1, MITRE Corp., Bedford, MA, 1973.
[4] J. Callas, L. Donnerhacke, H. Finney, and R. Thayer.
IETF RFC 2440, November
Openpgp message format.
1998.
[5] S. Chong and A. C. Myers. Decentralized robustness.
In
Proceedings of the 19th IEEE Computer Security Founda-
tions Workshop (CSFW), Venice, Italy, July 2006. to appear.
[6] P. T. Devanbu and S. Stubblebine. Software engineering for
security: a roadmap. In ICSE ’00: Proceedings of the Con-
ference on The Future of Software Engineering, pages 227–
239, New York, NY, USA, 2000. ACM Press.
[7] Federal Trade Commission. Eli Lilly settles FTC charges
concerning security breach. FTC Press Release, January 18
2002. http://www.ftc.gov/opa/2002/01/elililly.
htm.
[8] Federal Trade Commission. Cardsystems Solutions settles
FTC charges. FTC Press Release, February 23 2006. http:
//www.ftc.gov/opa/2006/02/cardsystems_r.htm.
[9] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed nist standard for role-based
access control. ACM Trans. Inf. Syst. Secur. (TISSEC),
4(3):224–274, 2001.
[10] S. L. Garﬁnkel, E. Nordlander, R. C. Miller, D. Margrave,
and J. I. Schiller. How to make secure email easier to
use. In Proceedings of the Conference on Human Factors
in Computing Systems (CHI), Portland, Oregon, April 2005.
SIGCHI.
[11] J. A. Goguen and J. Meseguer. Security policies and security
models. In IEEE Symposium on Security and Privacy, pages
11–20, April 1982.
[12] B. Hicks, D. King, P. McDaniel, and M. Hicks. Trusted
declassiﬁcation: High-level policy for a security-typed lan-
In Proceedings of the 1st ACM SIGPLAN Work-
guage.
shop on Programming Languages and Analysis for Security
(PLAS ’06), Ottawa, Canada, June 10 2006. ACM Press.
[13] B. Hicks, S. Rueda, T. Jaeger, and P. McDaniel. Breaking
Down the Walls of Mutual Distrust: Security-typed Email
Using Labeled IPsec. Technical Report NAS-TR-0049-
2006, Network and Security Research Center, Department
of Computer Science and Engineering, Pennsylvania State
University, University Park, PA, USA, Sept. 2006.
[14] H. Mantel and A. Sabelfeld. A unifying approach to the se-
curity of distributed and multi-threaded programs. J. Com-
puter Security, 11(4):615–676, 2003.
[15] A. C. Myers.
JFlow: Practical mostly-static information
ﬂow control. In POPL, pages 228–241, January 1999.
12
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006