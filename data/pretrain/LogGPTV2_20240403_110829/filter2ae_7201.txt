# MOSEC议题解读：手机浏览器中的远程代码执行

## 译文声明
本文为翻译文章，具体内容及含义请以原文为准。

## 议题概要
近年来，手机浏览器的安全问题一直是安全研究的重点。尽管大量的漏洞修复和浏览器、操作系统层面的防护措施使得远程代码执行变得更加困难，但本议题将重点讨论浏览器中的远程代码执行漏洞，包括Webkit JIT漏洞、WebKit DOM漏洞以及Chrome的JS引擎漏洞。我们将探讨这些漏洞的原理、挖掘方法以及利用技巧。

作为一种通用的漏洞缓解技术，隔离堆（Isolated Heap）已成功应用于多个主流浏览器，如Chrome、Firefox、Edge和IE。自2017年下半年起，WebKit也开始引入隔离堆机制。该机制对传统Exploit中的Heap Spray、UAF占位和任意地址读写等方面产生了一定影响。本议题将介绍WebKit隔离堆的基本原理及其对未来WebKit漏洞发现和利用的影响，并分享360 Vulcan团队在Mobile Pwn2Own比赛前针对隔离堆机制实现的Exploit预案。

## 作者介绍
- **郝力男** ([@holynop](https://mobile.twitter.com/holynop))：Qihoo 360 Vulcan Team成员，专注于漏洞研究。曾参与Pwn2Own 2015/2016/2017、Pwnfest 2016和Mobile Pwn2Own 2017等竞赛，并在Blackhat、44CON、HITB等多个安全会议上发表论文。
- **刘龙**：360 Vulcan团队的安全研究员，从事漏洞挖掘与利用工作。他参加了Pwn2Own 2017和Mobile Pwn2Own 2017，并成功挑战了相关项目。连续三年入选MSRC Top 20名单。
- **招启汛**：奇虎360 Vulcan Team成员，微博ID是[@老实敦厚的大宝](https://weibo.com/babyboaes)。专注于主流浏览器安全和macOS/iOS系统安全，沙箱逃逸。曾在Pwn2Own 2017和Mobile Pwn2Own 2017中攻破浏览器项目，多次获得微软、谷歌和苹果的CVE致谢。

## 议题解析
在Mobile Pwn2Own 2017比赛中，我们成功攻破了两个iPhone相关的项目：Apple Safari和WiFi。其中，WiFi项目的具体要求如下：
- 利用iPhone连接WiFi时自动弹出的登录界面实现RCE。

该登录界面通过WebCore解析渲染。我们在比赛中利用了一个WebCore DOM UAF漏洞，其POC如下：
- 漏洞成因：设置了form属性的button对象和form对象之间的关系图展示了button的父类FormAssociatedElement包含m_form成员变量和setform函数，而form的m_associatedElements成员变量中包含对button的引用。获取form的elements属性后，form创建了包含button引用的nodeLists成员。释放button时，button的析构函数调用setform(0)，removeFormElement将form的m_associatedElements成员中的button移除，但nodeLists中的button没有被移除，因此释放的button仍可通过form.elements访问。

### 漏洞利用
为了利用此漏洞，我们需要了解HTML*Element对象的结构。一个HTML对象要在JavaScript层面使用，需要一个wrapper，该wrapper指向WeakImpl对象，而WeakImpl对象的m_jsValue指向表示DOM对象的JSValue对象。JSValue表示一个JavaScript可操作的实体，可以表示多种类型，如boolean、array、对象和函数。

具体利用步骤如下：
1. 在JavaScript层面执行`uaf = Collections['id']`后的调用栈。
2. 查看WebCore::namedItems的实现，如果获取到的button对象的m_wrapper非空且满足一定条件，其指向的m_jsValue会被作为结果返回。
3. 利用typed array buffer占位，控制m_wrapper值，使其最终指向伪造的Float64Array。
4. 由于比赛版本的Safari ASLR实现不完善，我们可以通过array和typed array进行精确堆喷。
5. 堆喷后的内存布局中，在typed array的buffer里伪造WeakImpl和Float64Array，其中WeakImpl中的m_jsValue值为伪造的Float64Array地址。
6. 通过typed array buffer占位，所有字段可控，将+8的位置指向spray的typed array buffer处，通过collection['id']获取伪造的Float64Array。
7. 写入fakedFloat64Array，遍历spray的typed array，找到被修改的部分，通过这个typed array改变伪造的Float64Array的pVectors值，实现任意地址读写。
8. 修改pVectors值，使其指向spray的array butterfly，写入fakedFloat64Array，找到被修改的array butterfly，用它来泄露任意对象地址。

接下来，我们将重点讨论JavaScript引擎的JIT编译器。这部分出现漏洞的频率很高，且可利用性和稳定性较好。我们不仅会解读去年MP2O使用的各种浏览器漏洞，还会着重介绍浏览器JIT的概念与机制，以及漏洞挖掘过程。

### Safari的JIT编译器
- 编译器是一个庞大而复杂的模块，通过OSR机制，编译的代码可能在不同层次的优化编译器中切换。这是Safari中JIT的一种机制，兼顾效率和安全性。
- DFG优化部分：在议题中，我们解读了一些JSC中的概念，如structure和OSR机制。OSR机制的存在避免了JIT中的一些type confusion和OOB R/W问题。
- JSC中的OSR机制的优点与缺点，与其他浏览器的比较。
- 根据OSR机制的弱点，我们挖掘出一些在MP2O上使用的漏洞。虽然其中一个漏洞在比赛前被修复，但修复并不完全，我们发现了绕过方法并最终在比赛中使用。

### Safari中的缓解机制 – 隔离堆
- 在去年的比赛中，发行版并未开启隔离堆，但在预览版中已存在。我们对这一机制进行了调研。
- 主要影响：导致一些UAF无法利用，并影响全地址读写。例如，使用Float64Array读写会受影响，因为g_gigacageBasePtrs保留了一个区域留给索引类型的数据结构，如array/typed array。
- 绕过方案：可以从几个大方向考虑，我们也分别找到了对应的绕过方案。会议前几天，_niklasb也公开了一种绕过方案。

最后，我们还介绍了准备在MP2O上使用的Chrome bug，该漏洞在正式版消失后在比赛前重新出现，最终直接报告给了Google。

### 彩蛋
会议最后，我们展示了一个彩蛋demo：最新版iOS 12上通过Safari浏览器远程越狱的视频。