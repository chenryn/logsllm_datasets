    ntdll.RtlRbRemoveNode
    ntdll.RtlAcquireSRWLockExclusive
    ntdll.RtlReleaseSRWLockExclusive
    ntdll.RtlEnterCriticalSection
    ntdll.RtlPcToFileHeader
    ntdll.RtlGetVersion
    ntdll.RtlUpcaseUnicodeChar
    ntdll.RtlAnsiStringToUnicodeString
    ntdll.LdrLockLoaderLock
    ntdll.LdrUnlockLoaderLock
    ntdll.ZwClose
    ntdll.ZwCreateSection
    ntdll.ZwMapViewOfSection
    ntdll.ZwUnmapViewOfSection
所有功能都包含在两个导出功能中，而DllMain不包含任何相关代码。突出的是在整个代码中广泛使用了自定义DWORD大小的状态代码。在结果变量中带有状态代码的反编译代码示例：
    …
    if ( !a1 || !a2 || !(_DWORD)v3 )
    {
         result = 0xA0032B02;
         goto LABEL_45;
    }
    if ( strlen(a1) <= 1 )
         goto LABEL_65;
    result = get_kernel32_path(a1, &v43, &v37, &v41);
    if ( result )
         goto LABEL_45;
    if ( (unsigned int)v3 < 0x1C )
    {
         LABEL_65:
         result = 0xA0032B02;
         goto LABEL_45;
    }
    pBuffer = allocate_buffer(v13, (unsigned int)v3, 0i64, v11, 0, 1);
    buffer = pBuffer;
    if ( !pBuffer )
    {
         LABEL_9:
         result = 0xA0032B04;
         goto LABEL_45;
    }
    if ( memcpy_s(pBuffer, v3, a2, v3) )
    {
         LABEL_11:
         result = 0xA0032B06;
         goto LABEL_45;
    }
    …
主要工作者样品中含有名为有效图标5个图标资源16，256，4097，8193和12289。名称表示不同的图标分辨率，但是图标的区别仅在于附加在其上的加密数据，这可以视为隐写术的一种形式。使用自定义算法对该数据进行加密，并另外压缩zlib。在SSP
DLL中使用相同的方法。可以在附录中找到用于解密和解压缩的Python脚本。解密后，数据Blob具有以下结构：
    struct data_blob {
         DWORD marker;    // Marker bytes (0x9A65659A)
         DWORD crc32;    // CRC32 value of decrypted or zlib uncompressed 
    bytes
         DWORD size;     // Size of decrypted or zlib uncompressed bytes
         DWORD option;    // Information if data is encrypted or zlib 
    compressed; 0x1 = encrypted, 0x2 = zlib compressed
         char data[];    // Encrypted or zlib compressed data
    };
解密后的数据如下。
资源16：
    System\CurrentControlSet\Control\Class\{4D36E97D-E325-11CE-BFC1-08002B
    E10318}\0003\DriverData
资源256：
    System\CurrentControlSet\Control\Class\{4D36E96A-E325-11CE-BFC1-08002B
    E10318}\0000\DriverData
资源16和256是Windows注册表项，其中包含资源8193中嵌入式驱动程序的解密密钥以及其他可能由AcidBox驱动程序注入的有效负载。
资源4097：
    C:\WINDOWS\SYSTEM32\lsass.exe
此资源包含每个样本用来验证是否已将其加载到正确流程中的流程路径。资源8193包含无符号内核模式有效负载驱动程序，该驱动程序也使用RSA加密。该驱动程序被实现为具有两个导出功能InitEntry和InitExit的内核模式DLL
。它包含以下明文字符串：
    ntoskrnl.exe
    ntkrn
    ntkrp
    hal.dll
    ntoskrnl
    ntkrnlpa.exe
    csrss.exe
    PsCreateSystemThread
    \Device\VBoxDrv
    \DosDevices\PCIXA_CFGDEV
    \Windows\ApiPort
    \Sessions\%u\Windows\ApiPort
    \Sessions\xxxxxxxx\Windows\ApiPort
    \Device\PCIXA_CFG
    \DosDevices\PCIXA_CFGDEV
资源12289包含由Sun Microsystems签名的VirtualBox VBoxDrv.sys驱动程序v2.2.0.0
，我们先前描述的该漏洞也很容易受到攻击。
## PE相关特征
在研究样本时，PE标头的特性（一种经常被监督的取证指标）引起了我们的注意。这个鲜为人知的事实可以在导出目录中找到，并有助于归因于恶意软件样本。所有AcidBox示例均在单个导出的函数条目之间包含间隙：
每个AcidBox示例在导出目录中都有一个大于NumberOfNames值的NumberOfFunctions值。这并不稀奇，因为不是每个导出的函数都必须有一个名称。未命名的函数也可以通过其序数值来调用。然而，不常见的是，未命名的函数项也被清零，因此不使用。
这是使用自己的DEF文件而不是declspec（dllexport）来描述DLL文件的属性时的结果。使用DEF文件时，可以选择导出功能的序号（使用`_declspec（dllexport）`无法实现此功能，因为Visual
Studio编译器始终将函数从头计数）。
使用DEF文件代替`_declspec（dllexport）`具有一些优点。可以按常规导出函数，也可以重定向函数。缺点是必须在项目中维护其他文件。
对于AcidBox样本，我们可以得出两点结论。首先，作者使用了DEF文件，尽管他没有利用它的优点。这可能表明使用DEF文件是操作者习惯；其次，函数序数似乎以两个整数为单位进行选择；最后，如果我们假设作者确实选择执行两个整数步骤，那么在用户模式DLL中，一个导出函数被删除。我们可以看到序数3未使用，留下的间隙大于一个整数。所有这些信息对于恶意软件归属都可能很有用。
## 结论
2017年，一个名为AcidBox的新高级恶意软件被一个未知的威胁参与者使用，直到现在才被发现。它使用一种已知的VirtualBox漏洞来禁用Windows中的驱动程序签名强制执行，但有一个新的变化：VirtualBox驱动程序VBoxDrv.sys
v1.6.2易受Turla的攻击并使用，这种新的恶意软件使用相同的漏洞，但VirtualBox版本相比之前有所更新。
在Windows威胁下所有内容都是副本的副本。尽管AcidBox并未使用任何新的方法，但它打破了只有VirtualBox VBoxDrv.sys
1.6.2可以用于Turla的利用这一神话。将敏感数据作为图标资源的覆盖物添加，滥用SSP接口进行持久性注入且Windows注册表中的有效负载存储，将其归为有趣的恶意软件类别。
我们猜测AcidBox的样本只是更大的工具包的一部分，如果您碰巧发现其他样本，甚至被感染，则可以使用提供的Python脚本提取附加到图标资源的敏感数据。
Palo Alto Networks客户受到此恶意软件的保护,AutoFocus客户可以使用标签为AcidBox来调查此活动。
## IOCs
**Files in Windows system32 directory**  
msv1_1.dll  
pku.dll  
windigest.dll
**Mutexes**  
Global\BFE_Event_{xxxxxxxxxxxx–xxxx-xxxxxxxx-xxxxxxxx}  
Global{xxxxxxxxxxxx–xxxx-xxxxxxxx-xxxxxxxx}
The malware takes the MachineGuid stored in the registry and reshuffles the
single characters alternating from the end to the beginning and vice versa in
steps of two. For example, the MachineGuid string
a9982d3e-c859-4702-c761-df7eea468ade gets transferred into
e9a86daeecf5–67c2-07419d87-e34289da and appended to the above templates.
**Windows Registry**
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Class{4D36E97D-E325-11CE-BFC1-08002BE10318}\0003\DriverData (REG_BINARY type)
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Class{4D36E96A-E325-11CE-BFC1-08002BE10318}\0000\DriverData (REG_BINARY type)
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Class{4D36E969-E325-11CE-BFC1-08002BE10318}\0000\DriverData (REG_BINARY type)
**Sample Hashes**
Main worker DLL:
eb30a1822bd6f503f8151cb04bfd315a62fa67dbfe1f573e6fcfd74636ecedd5
Kernelmode driver:
3ef071e0327e7014dd374d96bed023e6c434df6f98cce88a1e7335a667f6749d
SSP DLL modules:
003669761229d3e1db0f5a5b333ef62b3dffcc8e27c821ce9018362e0a2df7e9
b3166c417d49e94f3d9eab9b1e8ab853b58ba59f734f774b5de75ee631a9b66d
3ad20ca49a979e5ea4a5e154962e7caff17e4ca4f00bec7f3ab89275fcc8f58c
Benign VirtualBox VBoxDrv.sys driver v2.2.0 (signed by “Sun Microsystems,
Inc.”):
78827fa00ea48d96ac9af8d1c1e317d02ce11793e7f7f6e4c7aac7b5d7dd490f
* * *