# Understanding New Anonymity Networks from a User's Perspective

**Authors: Erik Archambault and Craig A. Shue**

**Institution: Worcester Polytechnic Institute, Worcester, MA, USA**

**Contact: [PI:EMAIL, PI:EMAIL]**

## Abstract

Anonymity networks have been studied extensively for decades, both theoretically and practically. Popular anonymity systems such as Tor and Java Anon Proxy (JAP) are widely used but often come with performance constraints and complexity issues. SurfEasy, a new commercial service, claims to offer an easy-to-use, high-performance anonymous browsing solution. However, the underlying anonymity system is not well-documented. In this work, we evaluate Tor, JAP, and SurfEasy from a user’s perspective, focusing on performance and usability. Our findings indicate that while SurfEasy does offer better browsing performance in some cases, it may compromise robust anonymity.

## Categories and Subject Descriptors

C.2.0 [General]: Security and Protection

## General Terms

Measurement, Security

## Keywords

Online Privacy, Anonymity Networks

## 1. Introduction

User privacy on the Internet is under constant threat. Organizations, including advertisers and analytics providers, use aggressive tracking techniques to monitor users' online activities and link them to identifying information [10]. While these organizations typically use this data for marketing, less scrupulous entities can exploit it to target individuals. Additionally, repressive governments may track user activities to suppress political opposition or prosecute free speech. This has led the U.S. Department of State to sponsor the development of anti-censorship and anonymity tools [19].

Anonymity is a desirable goal, whether to avoid advertising trackers or to circumvent censorship. Various tools aim to provide anonymity using different techniques. For example, a basic proxy server masks a user's IP address but allows the proxy operator to observe all traffic. The Java Anon Proxy (JAP) [9] uses Web mixes, where multiple proxies are chained to prevent any single proxy from seeing both the origin and destination. Onion routing, as used by Tor [18], employs layers of encryption and redirection to protect against detection.

Each of these systems has its drawbacks. A simple proxy provides better performance but allows the proxy operator to gather all user data. JAP and Tor address this vulnerability but increase latency and decrease available bandwidth. Furthermore, despite efforts to improve usability, some users find JAP and Tor complicated.

SurfEasy [14], a new commercial product, markets itself as an easy-to-use, high-performance anonymity solution. The company claims to use proxy servers in North America and plans to expand globally. However, they provide no detailed technical information about their infrastructure. It is unclear whether SurfEasy uses a simple proxy model, Web mixes, or onion routing, which can significantly affect the level of anonymity, privacy, and performance.

In this study, we evaluate anonymity systems from a user’s perspective, using SurfEasy as a case study and comparing it to Tor and JAP. We analyze bandwidth, latency, and network addressing behavior. Our results show that SurfEasy offers lower latency and higher bandwidth than Tor or JAP but appears to sacrifice robust anonymity. Specifically, SurfEasy seems to use only a single-hop proxy, with just two distinct proxy servers observed. While SurfEasy’s hardware component limits our ability to rigorously test it, our findings suggest potential concerns for users concerned about tracking.

## 2. Related Work

To our knowledge, no previous research has explored the determination of an unknown anonymity system's structure. However, the field of anonymity systems has a rich history. For a comprehensive survey, we refer readers to works by Danezis and Diaz [5], Ren and Wu [12], and Edman and Yener [7].

Recent anonymity systems, such as Tor, build on the concept of onion routing introduced by Reed et al. [11]. Syverson et al. [15] conducted the first quantitative analysis of connection-based anonymity systems, finding that onion routing offered greater resistance to traffic analysis. Dingle et al. refined this approach by creating Tor [6]. Other studies compare different anonymity systems. Rennhard et al. [13] analyzed the trade-offs between usability, overhead, and privacy protection. Back et al. [1] compared the vulnerability to traffic analysis and denial of service attacks in Freedom [8] and PipeNet [4]. Berthold et al. [2] compared various anonymity systems to define their objectives before developing Web MIXes [3].

Our work continues this exploration by examining a new commercial system, SurfEasy, using established systems as a baseline. Unlike prior studies, we do not have access to the technical details of SurfEasy’s infrastructure and must infer its architecture based on observable traits.

## 3. Methodology

We evaluate Tor, JAP, and SurfEasy from a user’s perspective, focusing on properties observable at the source and destination systems. Specifically, we examine latency, throughput, and IP address diversity.

To conduct our tests, we used PlanetLab [17], a global network of systems. We selected 12 PlanetLab nodes in 10 countries, conducting 39 one-hour sessions over six days, resulting in approximately 20 hours of testing per system. Unfortunately, SurfEasy’s implementation, which requires a USB device compatible only with Windows and Mac OS, made it incompatible with PlanetLab. Therefore, we tested SurfEasy on a laptop using two different networks: a residential ISP (3Mbps downstream, 768Kbps upstream) and a university LAN. To ensure a controlled environment, we used a Windows XP virtual machine for SurfEasy.

For Tor, JAP, and SurfEasy, we used packet capture software to record all network traffic at the source system. SurfEasy uses a customized version of Mozilla Firefox, so we also used Firefox for consistency in our experiments with Tor and JAP. Since SurfEasy offers no configuration options, we used default settings for Tor and JAP. We modified Firefox to include the iMacros extension, allowing automated control of each PlanetLab node and systematic results. We also used iMacros for SurfEasy for consistency, even though it was not part of a distributed system.

Our packet capture software recorded the IP addresses interacting with the source machines. We used websites that echo back the connecting client's IP address to gather this data. By recording the output of these sites, we were able to analyze the IP address diversity and other relevant metrics.