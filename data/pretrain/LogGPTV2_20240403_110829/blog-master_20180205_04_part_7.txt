number of transactions actually processed: 4586  
latency average = 2617.628 ms  
latency stddev = 1478.233 ms  
tps = 3.818981 (including connections establishing)  
tps = 3.819014 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.004  \set suffix random(1,1024)  
      2617.625  select stat(:suffix, 12000, '5 min');  
```  
3、10分钟级统计，每秒统计1.71个表，每10分钟统计1126个表。  
超过期望。  
```  
transaction type: ./stat3.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 1200 s  
number of transactions actually processed: 2060  
latency average = 5830.904 ms  
latency stddev = 2480.596 ms  
tps = 1.713737 (including connections establishing)  
tps = 1.713839 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.004  \set suffix random(1,1024)  
      5830.900  select stat(:suffix, 24000, '10 min');  
```  
综合上面三个指标，如果要满足单表600万元素每分钟的写入期望，需要将表的数量调整为256个(换句话说，在本例涉及到的硬件规格下的PG10，可以支持256个表，每个表每分钟600万个元素的写入以及统计。)。   
统计和写入都能达到要求。  
## 压测设计3  
将suffix调整为256，也就是说写入、统计针对的区间为256个表，测试结果：  
```  
top - 19:23:16 up 27 days, 10 min,  3 users,  load average: 33.14, 10.55, 15.39  
Tasks: 565 total,  71 running, 494 sleeping,   0 stopped,   0 zombie  
%Cpu(s): 92.4 us,  6.2 sy,  0.0 ni,  0.9 id,  0.4 wa,  0.0 hi,  0.0 si,  0.0 st  
KiB Mem : 23094336+total,  1028536 free, 11676488 used, 21823833+buff/cache  
KiB Swap:        0 total,        0 free,        0 used. 13886019+avail Mem   
```  
写入  
```  
transaction type: ./test2.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 24  
number of threads: 24  
duration: 1200 s  
number of transactions actually processed: 12113510  
latency average = 2.377 ms  
latency stddev = 1.319 ms  
tps = 10094.572203 (including connections establishing)  
tps = 10094.659895 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.002  \set suffix random(1,256)  
         0.001  \set gv random(1,1500)  
         2.374  select ins_mx(:suffix,:gv,2500,'{12,22,65,18,1,60,69,9,52,28,73,9  
......  
```  
统计  
```  
1分钟统计2520张表  
transaction type: ./stat1.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 1200 s  
number of transactions actually processed: 50733  
latency average = 237.004 ms  
latency stddev = 736.468 ms  
tps = 42.130871 (including connections establishing)  
tps = 42.131272 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.002  \set suffix random(1,256)  
       237.062  select stat(:suffix, 2400, '1 min');  
5分钟统计11100张表  
transaction type: ./stat2.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 1200 s  
number of transactions actually processed: 45781  
latency average = 263.367 ms  
latency stddev = 1712.181 ms  
tps = 37.788541 (including connections establishing)  
tps = 37.788898 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.002  \set suffix random(1,256)  
       263.433  select stat(:suffix, 12000, '5 min');  
10分钟统计19800张表  
transaction type: ./stat3.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 1200 s  
number of transactions actually processed: 41290  
latency average = 292.340 ms  
latency stddev = 2389.384 ms  
tps = 33.831941 (including connections establishing)  
tps = 33.832121 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.002  \set suffix random(1,256)  
       292.436  select stat(:suffix, 24000, '10 min');  
```  
写入、统计均满足了600万每分钟的指标。     
## 数据维护调度  
1、清理明细  
每次TRUNCATE下一个分区。例如0分时，truncate 分区1。10分时，TRUNCATE分区2。... 50分时，TRUNCATE分区0。  
例如：   
```
truncate mx1_1;
```