### 6.6 定位系统环境变量

在Linux中，用户可以编辑特定的隐藏文件以自定义其环境变量。这些文件以点号开头，通常不会出现在常规的`ls`命令输出中。它们位于用户的HOME目录下，使得每个用户都能够独立地配置自己的环境变量，并且这些设置会在每次启动新的bash shell会话时生效。

#### 用户级环境变量文件
不同Linux发行版间，在处理用户环境变量文件方面存在显著差异。常见的几个文件包括但不限于：
- `.bash_profile`
- `.profile`
- `.bash_login`

请注意，`.bashrc`文件虽然没有直接列出，但它通常是通过其他配置文件间接加载的。

shell将按照以下顺序查找并执行第一个找到的文件，其余则被忽略：
1. `$HOME/.bash_profile`
2. `$HOME/.profile`
3. `$HOME/.bash_login`

记住，`$HOME`代表用户的主目录，这与波浪号（`~`）的作用相同。

例如，在CentOS Linux系统上，`.bash_profile`文件的内容可能如下所示：

```bash
# .bash_profile
if [ -f ~/.bashrc ]; then
    # 加载别名和函数
    . ~/.bashrc
fi
# 用户特定的环境变量和启动程序
PATH=$PATH:$HOME/bin
export PATH
```

这里，`.bash_profile`首先检查是否存在一个名为`.bashrc`的文件，如果存在，则执行该文件中的命令。

### 6.6.2 交互式Shell进程

如果你不是通过登录系统而是手动启动一个新的bash shell（如在命令行提示符下键入`bash`），那么你正在使用的是交互式shell。这种类型的shell不运行`/etc/profile`文件，而仅检查用户HOME目录下的`.bashrc`文件。

对于本书所用的CentOS Linux系统，`.bashrc`文件内容如下：

```bash
# .bashrc
# 引入全局定义
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
# 用户特定的别名和函数
```

此文件有两个主要功能：一是引用位于`/etc`目录下的通用`bashrc`文件；二是提供一个地方供用户定义个人的命令别名和私有脚本函数。

### 6.6.3 非交互式Shell

非交互式shell主要用于执行shell脚本，这类shell没有命令行提示符。为了在这种情况下初始化一些必要的设置，bash shell引入了`BASH_ENV`环境变量。当启动一个非交互式shell时，bash会根据这个变量指定的路径来加载相应的启动文件。

若未设置`BASH_ENV`，则子shell继承自父shell的所有导出变量。需要注意的是，局部变量无法被子shell继承。

### 6.6.4 环境变量持久化

理解了各种shell类型及其对应的环境文件后，设置永久性环境变量就变得相对简单。对于需要对所有用户生效的全局变量，建议在`/etc/profile.d`目录下创建一个新的`.sh`结尾的文件来存放相关配置，而不是直接修改`/etc/profile`，以免升级系统时丢失自定义设置。

个人用户的永久性bash shell变量一般存储于`~/.bashrc`文件内，适用于所有类型的shell进程。但如果有设定`BASH_ENV`，则应确保其指向正确的文件位置以确保非交互式shell也能正确读取所需变量。

### 6.7 数组变量

数组是能够在一个变量中存储多个值的数据结构。可以通过索引访问数组中的单个元素或一次性显示整个数组。例如：

```bash
mytest=(one two three four five)
echo ${mytest[2]}  # 输出: three
echo ${mytest[*]}  # 输出: one two three four five
```

尽管数组为管理多值变量提供了便利，但在编写跨平台shell脚本时需谨慎使用，因为并非所有shell都支持数组特性。