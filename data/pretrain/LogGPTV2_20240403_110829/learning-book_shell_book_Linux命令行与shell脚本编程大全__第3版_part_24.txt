6.6定位系统环境变量
611
注意，这四个文件都以点号开头，这说明它们是隐藏文件（不会在通常的1s命令输出列表中
出现）。它们位于用户的HOME目录下，所以每个用户都可以编辑这些文件并添加自己的环境变
量，这些环境变量会在每次启动bash shell会话时生效。
说明Linux发行版在环境文件方面存在的差异非常大。本节中所列出的SHOME下的那些文件并
非每个用户都有。例如有些用户可能只有一个SHOME/bash_profile文件。这很正常。
shell会按照按照下列顺序，运行第一个被找到的文件，余下的则被忽略：
$HOME/ .bash_pzofi1e
HOME/ .profi1e
HOME/ . baah_1og1n
注意，这个列表中并没有SHOME/.bashrc文件。这是因为该文件通常通过其他文件运行的。
跨门记住，SHOME表示的是某个用户的主目录。它和波浪号（～）的作用一样。
CentOS Linux系统中的.bash_profile文件的内容如下：
#-bash_profl1e
S cat $BoME/ .bash_prof11e
1f [ -f -/ ,baahrc 1;then
# Get the allases and functlons
f1
~/ .ba.shrc
 User specific environment and startup prograne
PATH= $PATH : $HONE/bi.n
export PATH
bash_profile启动文件会先去检查HOME目录中是不是还有一个叫.bashrc的启动文件。如果有
的话，会先执行启动文件里面的命令。
6.6.2交互式shell进程
如果你的bashshell不是登录系统时启动的（比如是在命令行提示符下敲人bash时启动），那
么你启动的shell叫作交互式shell。交互式shell不会像登录shell一样运行，但它依然提供了命令行
提示符来输人命令。
如果bash是作为交互式shell启动的，它就不会访问/etc/profile文件，只会检查用户HOME目录
中的.bashrc文件
在本书所用的CentOSLinux系统上，这个文件看起来如下：
---
## Page 135
120
第6章使用Linux环境变量
S cat .bashrc
.bashrc
 Source global definltions
1f [ -f /etc/bashrc 1; ther
f1
./etc/baahrc
 User speclfic aliases and functions
bashrc文件有两个作用：一是查看/etc目录下通用的bashrc文件，二是为用户提供一个定制自
已的命令别名（参见第5章）和私有脚本函数（将在第17章中讲到）的地方。
6.6.3非交互式shell
最后一种shell是非交互式shell。系统执行shell脚本时用的就是这种shell。不同的地方在于它
没有命令行提示符。但是当你在系统上运行脚本时，也许希望能够运行一些特定启动的命令。
窍门脚本能以不同的方式执行。只有其中的某一些方式能够启动子shell。你会在第11章中学习
到shell不同的执行方式。
为了处理这种情况，bash shell提供了BASH_ENV环境变量。当shell启动一个非交互式shell进
程时，它会检查这个环境变量来查看要执行的启动文件。如果有指定的文件，shell会执行该文件
里的命令，这通常包括shell脚本变量设置。
在本书所用的CentOSLimux发行版中，这个环境变量在默认情况下并未设置。如果变量未设
置，printenv命令只会返回CLI提示符：
$ printenv BAS8_BNV
在本书所用的Ubuntu发行版中，变量BASH_ENV也没有被设置。记住，如果变量未设置，echo
命令会显示一个空行，然后返回CLI提示符：
$echo $BASB_ENV
那如果BASH_ENV变量没有设置，shell脚本到哪里去获得它们的环境变量呢？别忘了有些
shell脚本是通过启动一个子shell来执行的（参见第5章）。子shell可以继承父shell导出过的变量。
举例来说，如果父shell是登录shell，在/etc/profile、/etc/profile.d/*.sh和SHOME/.bashrc文件中
设置并导出了变量，用于执行脚本的子shell就能够继承这些变量。
要记住，由父shell设置但并未导出的变量都是局部变量。子shell无法继承局部变量。
对于那些不启动子shell的脚本，变量已经存在于当前shell中了。所以就算没有设置
BASH_ENV，也可以使用当前shell的局部变量和全局变量。
---
## Page 136
6.7数组变量
121
6.6.4环境变量持久化
现在你已经了解了各种shel进程以及对应的环境文件，找出永久性环境变量就容易多了。也
可以利用这些文件创建自已的永久性全局变量或局部变量，
对全局环境变量来说（Linux系统中所有用户都需要使用的变量），可能更倾向于将新的或修
改过的变量设置放在/etc/profile文件中，但这可不是什么好主意。如果你升级了所用的发行版，
这个文件也会跟看更新，那你所有定制过的变量设置可就都没有了。
最好是在/etc/profile.d目录中创建一个以.sh结尾的文件。把所有新的或修改过的全局环境变
量设置故在这个文件中。
在大多数发行版中，存储个人用户永久性bash shell变量的地方是SHOME/bashrc文件。这一
点适用于所有类型的shell进程。但如果设置了BASH_ENV变量，那么记住，除非它指向的是
SHOME/bashrc，否则你应该将非交互式shell的用户变量放在别的地方。
说明图形化界面组成部分（如GUI客户端）的环境变量可能需要在另外一些配置文件中设置，
这和设置bash shell环境变量的地方不一样。
想想第5章中讲过的alias命令设置就是不能持久的。你可以把自已的alias设置放在
SHOME/.bashrc启动文件中，使其效果永久化。
6.7数组变量
环境变量有一个很酷的特性就是，它们可作为数组使用。数组是能够存储多个值的变量。这
些值可以单独引用，也可以作为整个数组来引用。
要给某个环境变量设置多个值，可以把值放在括号里，值与值之间用空格分隔。
S mytest=(one two three four five)
没什么特别的地方。如果你想把数组像普通的环境变量那样显示，你会失望的。
S echo $aytest
one
只有数组的第一个值显示出来了。要引用一个单独的数组元素，就必须用代表它在数组中位
置的数值索引值。索引值要用方括号括起来。
Secho $(mytest [2])
three
跨门环境变量数组的索引值都是从零开始。这通常会带来一些困办
---
## Page 137
122
第6章使用Linux环境变量
要显示整个数组变量，可用星号作为通配符放在索引值的位置。
one tvo three four five
也可以改变某个索引值位置的值。
mytest [2]=seven
one tvo seven four five
甚至能用unset命令删除数组中的某个值，但是要小心，这可能会有点复杂。看下面的例子。
Sunset mytest[2]
one tvo four five
Secho $(mytest[2]}
ecbo $（mytest[3]}
fosf
$
这个例子用unset命令删除在索引值为2的位置上的值。显示整个数组时，看起来像是索引
里面已经没这个索引了。但当专门显示索引值为2的位置上的值时，就能看到这个位置是空的。
最后，可以在unset命令后跟上数组名来删除整个数组。
S unset mytest
（o
有时数组变量会让事情很麻烦，所以在shell脚本编程时并不常用。对其他shell而言，数组变
量的可移植性并不好，如果需要在不同的shel环境下从事大量的脚本编写工作，这会带来很多不
便。有些bash系统环境变量使用了数组（比如BASH_VERSINFO），但总体上不会太额繁用到。
6.8小结
本章介绍了Linux的环境变量。全局环境变量可以在对其作出定义的父进程所创建的子进程
中使用。局部环境变量只能在定义它们的进程中使用。
Linux系统使用全局环境变量和局部环境变量存储系统环境信息。可以通过shell的命令行界
面或者在shell脚本中访间这些信息。bash shell沿用了最初Unix Bourne shell定义的那些系统环境
变量，也支持很多新的环境变量。PATH环境变量定义了bash shell在查找可执行命令时的搜索目
录。可以修改PATH环境变量来添加自己的搜索目录（甚至是当前目录符号），以方便程序的运行。
---
## Page 138
6.8小结
123
也可以创建自用的全局和局部环境变量。一旦创建了环境变量，它在整个shel会话过程中就
都是可用的。
bashshell会在启动时执行几个启动文件。这些启动文件包含了环境变量的定义，可用于为每
个bash会话设置标准环境变量。每次登录Linux系统，bash shell都会访间/etc/profile启动文件以及3
个针对每个用户的本地启动文件：SHOME/.bash_profile、SHOME/.bash_login和SHOME/.profile。
用户可以在这些文件中定制自己想要的环境变量和启动脚本。
最后，我们还讨论了环境变量数组。这些环境变量可在单个变量中包含多个值。你可以通过
指定索引值来访问其中的单个值，或是通过环境变量数组名来引用所有的值。
下章将会深人介绍Linux文件的权限。对Linux新手来说，这可能是最难懂的。然而要写出优
秀的shell脚本，就必须明白文件权限的工作原理以及如何在Linux系统中使用它们。
---
## Page 139
第7章
理解Linux文件权限
本章内容
口理解Linux的安全性
口解读文件权限
口使用Linux组
年五乏安全性的系统不是完整的系统。系统中必须有一套能够保护文件免遭非授权用户浏
击犬览或修改的机制。Linux沿用了Unix文件权限的办法，即允许用户和组根据每个文件
和目录的安全性设置来访问文件。本章将介绍如何在必要时利用Linux文件安全系统保护和共享
数据。
7.1Linux的安全性
Linux安全系统的核心是用户账户。每个能进人Linux系统的用户都会被分配唯一的用户账
户。用户对系统中各种对象的访问权限取决于他们登录系统时用的账户。
用户权限是通过创建用户时分配的用户ID（UserID，通常缩写为UID）来跟踪的。UID是数
值，每个用户都有唯一的UID，但在登录系统时用的不是UID，而是登录名。登录名是用户用来
登录系统的最长八字符的字符串（字符可以是数字或字母），同时会关联一个对应的密码。
Linux系统使用特定的文件和工具来跟踪和管理系统上的用户账户。在我们讨论文件权限之
前，先来看一下Linux是怎样处理用户账户的。本节会介绍管理用户账户需要的文件和工具，这
样在处理文件权限问题时，你就知道如何使用它们了。
7.1.1/etc/passwd文件
Linux系统使用一个专门的文件来将用户的登录名匹配到对应的UID值。这个文件就是
/etc/passwd文件，它包含了一些与用户有关的信息。下面是Linux系统上典型的/etc/passwd文件的
一个例子。
$ cat /etc/passvd
root 1x:010:root1 /root : /bin/bash
---
## Page 140
7.1Linux 的安全性
125
bin:x:1:1 :bin: /bin: /abln/nologin
adn:x:3 :4 :adn: /vax/adn:/abin/no1ogin
daemon:x:2 :2 :daenon: /sb1n : /abin/no1ogLn
1p:x:4:7 : 1p:/var/spoo1/1pd:/abin/no1og1n
sync:x:5:0:aync:/abin:/bin/aync
shutdowm :x :6:0 : shutdowm : /albLn: /abIn/shut dow
halt:x:7:0 :halt : /sbin: /abin/halt
ma11 :×:8 : 12:na11:/var/spoo1/ma11: /abin/no1og1n
neva:x:9 : 13:news: /etc/news :
uucp:x:10 :14 :uucp: /var/apoo1/uucp: /abLn/no1ogin
operatox:x:11:0 :operatoz: /root : /sbin/nolog1.n
ganes :x:12:100 : ganes : /uar/gamea: /abin/no1og1n
ftp:x:14:50:PTP Ueer1/var/ftp1/abin/no1ogin
gopher:x: 13:30 : gopher:/var/gophex : /ab1n/no1og1n
nobody :x:99:99 :1obody 1/ s /ab1n/no1og1n
rpm:x:37 : 37:=/var/11b/xpm: /sbin/no1og1.n
vcsa:x:69:59:virtua1 console menory ouner:/Gev:/abin/nolog1n
ma11nu11:×:47:47:±/var/epoo1/mqueue : /abin/no1og1.n
snmap:x:51:51: : /vaz/apoo1/nqueue: /abin/no1ogin
apache:x:48:48 : Apache:/var/vww: /sbin/no1og1.n
rpc:x:32 :32:Rpcbind Daemon: /var/11b/rpcbind: /abLn/no1ogin
ntp:x:38:38::/etc/ntp:/abin/no1og1n
nscd:x:28 :28:3SCD Daenon: / : /abin/no1og1n
tcpdump :x: 72 :72 : = / : /alb1n/no1og1n
dbus:x:81:B1:Syatem message bus:/ :/abin/nologin
avahi :×:70 :70:Avahl daemon:/1/abLn/nologin
sshd:x:74 : 74 :Priv11ege=separated SSH: /var/empty/ashd:/abin/no1ogin
hsq1db:x: 96 :96 : : /var /11b/hsq1db: /abin/no1og1n
nfsnobody :x:65534 :65534 :Anonymous NFS Uaer : /var/1ib/nfa : /abin/no1og1.n
rpcuser :x: 29 :29 :RPC Service Uaer : /var/1ib/nfa : /sbin/nologln
xEs:x:43:43:x Font Server :/etc/X11/fa:/sbin/nologin
ha1daenon: x: 68 : 68:HAL Gaemon: / : /sbin/nolog1n
gdn:x: 42: 42 : : /var/gdm: /abin/no1og1n
rich:x:500 : 500 :Rich B1um: /home /r1ch: /b1n/baah
mana :x:501 : 501 :Kana : /home /nama : /b1n/baah
Jessica:x: 503 : 503 :Jeaa1ca : /home /jesaica : /bln/bash
katLe:x:502:502 :kat1e: /home/katie: /bin/bash
mysq] :x:27 :27 :MySQL Sexver : /var/11b/nysq1 : /bin/bash
root用户账户是Linux系统的管理员，固定分配给它的UID是o。就像上例中显示的，Linux系
统会为各种各样的功能创建不同的用户账户，面这些账户并不是真的用户。这些账户叫作系统账
户，是系统上运行的各种服务进程访问资源用的特殊账户。所有运行在后台的服务都需要用一个
系统用户账户登录到Linux系统上。
在安全成为一个大问题之前，这些服务经常会用root账户登录。遗的是，如果有非授权的
用户攻陷了这些服务中的一个，他立刻就能作为root用户进入系统。为了防止发生这种情况，现
在运行在Linux服务器后台的几乎所有的服务都是用自己的账户登录。这样的话，即使有人攻人
了某个服务，也无法访问整个系统。
Linux为系统账户预留了500以下的UID值。有些服务甚至要用特定的UID才能正常工作。为
---
## Page 141
126第7章理解Linux文件权限
普通用户创建账户时，大多数Linux系统会从500开始，将第一个可用UID分配给这个账户（并非
所有的Linux发行版都是这样)
你可能已经注意到/etc/passwd文件中还有很多用户登录名和UID之外的信息。/etc/passwd文件
的字段包含了如下信息：
口登录用户名
口用户密码
口用户账户的UID（数字形式）
口用户账户的组ID（GID）（数字形式）
口用户账户的文本描述（称为备注字段）
口用户HOME目录的位置
口用户的默认shell
/etc/passwd文件中的密码字段都被设置成了x，这并不是说所有的用户账户都用相同的密码。
在早期的Linux上，/etc/passwd文件里有加密后的用户密码。但鉴于很多程序都需要访问
/etc/passwd文件获取用户信息，这就成了一个安全隐患。随着用来破解加密密码的工具的不断演
进，用心不良的人开始忙于破解存储在/etc/passwd文件中的密码。Linux开发人员需要重新考虑这
个策略。
现在，绝大多数Linux系统都将用户密码保存在另一个单独的文件中（叫作shadow文件，位置
在/etc/shadow）。只有特定的程序（比如登录程序）才能访问这个文件。
Vetc/passwd是一个标准的文本文件。你可以用任何文本编辑器在/etc/password文件里直接手动
进行用户管理（比如添加、修改或删除用户账户）。但这样做极其危险。如果/etc/passwd文件出现
损坏，系统就无法读取它的内容了，这样会导致用户无法正常登录（即便是root用户）。用标准的
Linux用户管理工具去执行这些用户管理功能就会安全许多。
7.1.2/etc/shadow文件
Vetc/shadow文件对Linux系统密码管理提供了更多的控制。只有root用户才能访间/etc/shadow
文件，这让它比起/etc/passwd安全许多。
/etc/shadow文件为系统上的每个用户账户都保存了一条记录。记录就像下面这样：
rich:$1$ fcK0ns$f10giyHg25wrB/hykCn020:11627:0 : 99999 :7:11
在/etc/shadow文件的每条记录中都有9个字段：
口与/etc/passwd文件中的登录名字段对应的登录名
口加密后的密码
）
口多少天后才能更改密码
口多少天后必须更改密码
口密码过期前提前多少大提解用户更改密码
---
## Page 142
7.1Linux 的安全性
127
口密码过期后多少天禁用用户账户
口用户账户被禁用的日期（用自1970年1月1日到当天的天数表示）
口预留字段给将来使用
使用shadow密码系统后，Linux系统可以更好地控制用户密码。它可以控制用户多久更改一
次密码，以及什么时候禁用该用户账户，如果密码未更新的话。
7.1.3添加新用户
用来向Linux系统添加新用户的主要工具是useradd。这个命令简单快捷，可以一次性创建
新用户账户及设置用户HOME目录结构。userada命令使用系统的默认值以及命令行参数来设置
用户账户。系统默认值被设置在/etc/default/useradd文件中。可以使用加人了-D选项的useradd
命令查看所用Linux系统中的这些默认值。
/usr/sbin/useradd -D
GR0UP=100
INACTIVE= 1
HOME= /home
EXPIRE=
SKEL=/etc/skel
SHELL= /bin/bash