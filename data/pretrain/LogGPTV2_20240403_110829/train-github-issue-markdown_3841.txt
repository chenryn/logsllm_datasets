I noticed that doing the following  
`mul!(C, A, view(B,:,j)) # where A is a SparseMatrixCSC and B is transpose(any
matrix)`,  
falls back to the generic matvecmul.
The thing that breaks it, is the transpose. Without that it works as expected.  
Of course, if I know that B is a transpose of some matrix, the code would just
access the row j of that matrix instead.
BTW: I'm trying to avoid unnecessary copies of the B[:,j] vectors.