：=$（wi1dcard $(SOURCE_DIR)/*.xml)
ALL_XML_OUT
:=$（cal1 source-to-output,S(ALL_XML_SRC))
DEPENDENCY_FILES :=S(ca11 source-to-output,S(subst .xml,.d,S（ALL_XML_SRC)）)
#xm1/htm1/pdf-为本书产生所需要的输出格式
.PHONY:xml html pdf
xml:S(OUTPUT_DIR)/validate
html:S(BOOK_HTML_OUT)
pdf:$（BOOK_PDF_OUT)
show_pdf-—产生一个pdf文件并加以显示
.PHONY:show_pdf show_html print
show_pdf:$(BOOK_PDF_OUT)
$(kill-acroread)
$（PDF_VIEWER)$（BOOK_PDF_OUT)
#show_html-
产生一个html文件并加以显示
show_html:S(BOOK_HTML_OUT)
S（HTML_VIEWER)S（BOOK_HTML_OUT)
#print-输出本书特定的页面
print:$（BOOK_FO_OUT)
s(kill-acroread)
java -Dstart=15-Dend=15$（FOP)S/dev/nu11
---
## Page 222
212
第十一章
S（BOOK_PDF_OUT）-产生pdf文件
$（BOOK_PDF_OUT):$（BOOK_FO_OUT)Makefile
#S（BOOK_HTML_OUT）-产生htm1文件
$(BOOK_HTML_OUT):S（ALL_XML_OUT)$（OUTPUT_DIR)/validate Makefile
#S（BOOK_FO_OUT）--产生fo中间输出文件
.INTERMEDIATE:$(BOOK_FO_OUT)
$（BOOK_FO_OUT):S（ALL_XML_OUT) $(OUTPUT_DIR)/validate Makefile
#S（BOOK_XML_OUT)
一处理所有的xm1输人文件
$(BOOK_XML_OUT):Makefile
#对FOP的支持
#
FOP:=org.apache.fop.apps.Fop
#DEBUG_FOP—如果定义了，则可以看到fop处理器的输出
ifndef DEBUG_FOP
FOP_FLAGS:=-q
FOP_OUTPUT:=1$（SED)-e'/notimplemented/d
-e'/relative-align/d'
-e'/xsl-footnote-separator/d'
endif
CLASSPATH——为fOP定义适当的CLASSPATH
export CLASSPATH
CLASSPATH =S（patsubst$；，$，
S（subst；i
$(addprefixc:/usr/xslt-process-2.2/java/,
$（addsuffix.jar:,
xalan
xercesImpl
batik
fop
jimi-1.0
avalon-framework-cvs-20020315))))
#.pdf一从fo输入产生pdf输出的模式规则
$.pdf：.fo
$（kill-acroread)
java -Xmx128M S(FOP)$(FOP_FLAGS)$<$@ $(FOP_OUTPUT)
8.fo-从xml输人产生fo输出的模式规则
PAPER_SIZE :=letter
8.fo:8.xml
S（XMLTO)$（XMLTO_FLAGS）fO S<
#8.html-从xml输人产生html输出的模式规则
.html:e.xml
S（XMLTO)S（XMLTO_FLAGS）html-nochunks $<
fop_help-显示fop处理器的说明文字
.PHONY:fop_help
---
## Page 223
makefile实例
213
fop_help:
-java org.apache.fop.apps.Fop-help
-java org.apache.fop.apps.Fop -printhelp
#release
为本书产生一个可供发行的tarball
#
RELEASE_TAR
:=mpwm-$（shel1 date+&F).tar.gz
RELEASE_FILES:= README Makefile*.pdf bin examples out text
.PHONY:release
release:S（BOOK_PDF_OUT)
1n -Sf $（BOOK_PDF_OUT)
tar
--create
--gzip
--file=S(RELEASE_TAR)
--exclude=CVS
--exclude=semantic.cache
--exclude=*~
$(RELEASE_FILES)
1
1s -1 S(RELEASE_TAR)
#为各章产生范例的规则
#下面是每个范例所摆放的目录
EXAMPLES:=
ch01-bogus-tab
ch01-cw1
ch01-hello
ch01-cw2
ch01-cw2a
ch02-cw3
ch02-cw4
ch02-cw4a
ch02-cw5
ch02-cw5a
ch02-cw5b
ch02-cw6
ch02-make-clean
cho3-assert-not-null
ch03-debug-trace
ch03-debug-trace-1
ch03-debug-trace-2
ch03-filter-failure
ch03-find-program-1
ch03-find-program-2
ch03-findstring-1
ch03-grep
ch03-include
ch03-invalid-variable
ch03-kill-acroread
ch03-ki11-program
ch03-letters
---
## Page 224
214
第十
ch03-program-variables-1
ch03-program-variables-2
ch03-program-variables-3
ch03-program-variables-5
ch03-scoping-issue
ch03-she1l
1
ch03-trailing-space
ch04-extent
ch04-for-loop-1
ch04-for-1oop-2
ch04-for-1oop-3
ch06-simple
appb-defstruct
appb-arithmetic
实际上，我想使用如下的foreach循环，但是因为make3.80有一个缺陷，
#所以会产生一个无法挽回的错误
#$（foreach e,S（ExAMPLES).S（eval S（call generic-program-example,$e)))
我只好自己手动扩展这个foreach循环
s（eval S(call generic-program-example,ch01-bogus-tab))
$（eval $(call generic-program-example,ch01-cw1))
S（eval $（call
generic-program-example,ch01-hello))
S（eval s（cal1
generic-program-example,ch01-cw2))
$（eval $（cal1
generic-program-example,ch01-cw2a))
S(eval
s（cal1
generic-program-example,ch02-cw3))
s（eval S（cal1
generic-program-example,ch02-cw4))
$（eval s（call
generic-program-example,ch02-cw4a))
$（eval s（call
generic-program-example,ch02-cw5))
$（eval
S（call
generic-program-example,ch02-cw5a))
$(eval
S（call
generic-program-example,ch02-cw5b))
$（eval S（call
generic-program-example,ch02-cw6))
S(eval
S（call
generic-program-example,ch02-make-clean))
$（eval
$（cal1
generic-program-example,ch03-assert-not-nul1))
S(eval
$（call
generic-program-example,ch03-debug-trace))
S（eval $（call
generic-program-example,ch03-debug-trace-1))
S(eval
$（cal1
generic-program-example,ch03-debug-trace-2))
S(eval
$（call
generic-program-example,ch03-filter-failure))
S(eval
S（call
generic-program-example,ch03-find-program-1))
s（eva1 S（cal1generic-program-example,ch03-find-program-2))
$（eval
$（call
generic-program-example,ch03-findstring-1))
$（eval
S（call
generic-program-example,ch03-grep))
$(eval
$（call
generic-program-example,ch03-include))
S（eval
S（call
generic-program-example,ch03-invalid-variable))
$(eval
$（call
generic-program-example,ch03-ki1l-acroread))
S(eval
$（call
generic-program-example,ch03-ki11-program))
S（eval $(call
generic-program-example,ch03-letters))
$(eval
$（call
1generic-program-example,ch03-program-variables-1))
$(eval
S(call
generic-program-example,ch03-program-variables-2))
$（eval S(call generic-program-example,ch03-program-variables-3))
$(eval $(cal1 generic-program-example,ch03-program-variables-5))
$（eval
S(call generic-program-example,ch03-scoping-issue))
$（eval $(cal1 generic-program-example,ch03-shel1))
$（eval $(call generic-program-example,ch03-trailing-space))
---
## Page 225
makefile实例
215
$(eval $(call generic-program-example,ch04-extent))
$(eval S(call generic-program-example,ch04-for-loop-1))
$(eval
1S（call generic-program-example,ch04-for-1oop-2))
s(eval
$（call
generic-program-examp1e,ch04-for-loop-3))
s(eval
1$（ca11 generic-program-example,ch06-simple))
S(eval
1$（cal1 generic-program-example,ch10-echo-bash))
$(eval
$（call
generic-program-example,appb-defstruct))
$（eval $(call generic-program-example,appb-arithmetic))
确认
#检查a）未扩展的m4宏：b）跳格符：c）FIXME注释：d）
#