---
author: Mike Saunders
category: 技术
comments_data:
- date: '2016-01-14 19:57:49'
  message: "ps ax | grep systemd，看到第一行，其中的数字 1 表示它的进程号是1\r\n\r\nps --pid
    1"
  postip: 222.210.219.29
  username: 来自四川成都的 Chrome 47.0|GNU/Linux 用户
- date: '2016-01-15 07:58:41'
  message: Uselessd还活着？
  postip: 110.73.135.12
  username: 来自广西来宾的 Chrome 47.0|Windows XP 用户
- date: '2016-01-15 18:35:16'
  message: 还以为看题图就能看懂……
  postip: 121.15.230.42
  username: 文剑一飞 [Chrome 47.0|Windows 7]
- date: '2016-01-15 19:22:41'
  message: 大势所趋！！！
  postip: 61.150.43.122
  username: qiansen [Chrome 47.0|GNU/Linux]
- date: '2016-01-17 10:24:53'
  message: 学习了~
  postip: 59.172.247.140
  username: ninedoors [Chrome 45.0|Windows 10]
- date: '2016-01-18 09:39:16'
  message: 一直命令行，用旧版centos。关我卵事
  postip: 14.23.110.4
  username: 来自广东广州的 Chrome 49.0|Windows 7 用户
- date: '2016-01-18 16:50:29'
  message: 这些功能的确很好，支持
  postip: 101.81.22.243
  username: Print [Chrome 47.0|Windows 7]
- date: '2016-01-19 12:58:56'
  message: enable--使能?
  postip: 173.254.219.105
  username: 来自美国的 Chrome 47.0|Fedora 用户
- date: '2016-01-19 14:37:22'
  message: 是的，目前并未找到更合适的译法，您有什么建议么？
  postip: 120.12.23.86
  username: linux [Chrome 47.0|Mac 10.11]
- date: '2016-01-19 16:47:09'
  message: "enable&nbsp;&nbsp;启用\r\ndisable 禁用"
  postip: 210.82.30.225
  username: flashbang [Chrome 47.0|GNU/Linux]
- date: '2016-01-19 21:20:32'
  message: 哦，哈哈哈，我脑袋转筋了，原来这么简单的，为啥我就偏偏非“使能”。。。马上修改过来。
  postip: 111.201.14.53
  username: linux [Chrome 47.0|Mac 10.11]
- date: '2016-01-19 21:23:16'
  message: 不过，真的有“使能”这么逼格的词在使用。。。
  postip: 111.201.14.53
  username: linux [Chrome 47.0|Mac 10.11]
- date: '2016-01-21 09:06:07'
  message: 老实说刚开始接触systemd还真是不适应啊！！！but 这个也是要学的！！
  postip: 183.234.125.178
  username: alpha [Firefox 43.0|Windows 7]
- date: '2016-01-24 14:26:40'
  message: systemd 感觉不太好用，一直习惯service [name] start还有chkconfig。不过这样统一了也挺方便的，Debian集成了Systemd，还好。
  postip: 218.204.47.28
  username: 来自广西梧州的 Safari 8.0|Mac 10.10 用户
count:
  commentnum: 14
  favtimes: 20
  likes: 0
  sharetimes: 1
  viewnum: 22424
date: '2016-01-14 10:08:00'
editorchoice: true
excerpt: 这是我所阅读过的最简明扼要的 Systemd 教程，快速而清晰地讲述了 Systemd 的主要内容。无论你讨厌它还是喜欢它 ，只有了解才有正确的认识。
fromurl: http://www.linuxvoice.com/linux-101-get-the-most-out-of-systemd/
id: 6888
islctt: true
largepic: /data/attachment/album/201601/14/100144meleklgv6dpff17q.png
permalink: /article-6888-1.html
pic: /data/attachment/album/201601/14/100144meleklgv6dpff17q.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 这是我所阅读过的最简明扼要的 Systemd 教程，快速而清晰地讲述了 Systemd 的主要内容。无论你讨厌它还是喜欢它 ，只有了解才有正确的认识。
tags:
- systemd
thumb: false
title: 最简明扼要的 Systemd 教程，只需十分钟
titlepic: false
translator: Ricky-Gong
updated: '2016-01-14 10:08:00'
---
![Linux 101：最有效地使用 Systemd](/data/attachment/album/201601/14/100144meleklgv6dpff17q.png)
干嘛要这么做？
* 理解现代 Linux 发行版中的显著变化；
* 看看 Systemd 是如何取代 SysVinit 的；
* 搞定单元（unit）和新的 journal 日志。
吐槽邮件、人身攻击、死亡威胁——Lennart Poettering，Systemd 的作者，对收到这些东西早就习以为常了。这位 Red Hat 公司的员工之前在 Google+ 上怒斥 FOSS 社区()的本质，悲痛且失望地表示：“那真是个令人恶心的地方”。他着重指出 Linus Torvalds 在邮件列表上言辞极其刻薄的帖子，并谴责这位内核的领导者为在线讨论定下基调，并使得人身攻击及贬抑之辞成为常态。
但为何 Poettering 会遭受如此多的憎恨？为何就这么个搞搞开源软件的人要忍受这等愤怒？答案就在于他的软件的重要性。如今大多数发行版中，Systemd 是 Linux 内核发起的第一个程序，并且它还扮演多种角色。它会启动系统服务、处理用户登录，每隔特定的时间执行一些任务，还有很多很多。它在不断地成长，并逐渐成为 Linux 的某种“基础系统”——提供系统启动和发行版维护所需的所有工具。
如今，在以下几点上 Systemd 颇具争议：它逃避了一些已经确立的 Unix 传统，例如纯文本的日志文件；它被看成是个“大一统”的项目，试图接管一切；它还是我们这个操作系统的支柱的重要革新。然而大多数主流发行版已经接受了（或即将接受）它，因此它就活了下来。而且它确实是有好处的：更快地启动，更简单地管理那些有依赖的服务程序，提供强大且安全的日志系统等。
因此在这篇教程中，我们将探索 Systemd 的特性，并向您展示如何最有效地利用这些特性。即便您此刻并不是这款软件的粉丝，读完本文后您至少可以更加了解和适应它。
![](/data/attachment/album/201601/14/100850dnt2utuu2keqhbzr.gif)
*这部没正经的动画片来自，它把 Systemd 塑造成一只狂暴的动物，吞噬它路过的一切。大多数批评者的言辞可不像这只公仔一样柔软。*
### 启动及服务
大多数主流发行版要么已经采用 Systemd，要么即将在下个发布中采用（如 Debian 和 Ubuntu）。在本教程中，我们使用 Fedora 21（该发行版已经是 Systemd 的优秀实验场地）的一个预览版进行演示，但不论您用哪个发行版，要用到的命令和注意事项都应该是一样的。这是 Systemd 的一个加分点：它消除了不同发行版之间许多细微且琐碎的区别。
在终端中输入 `ps ax | grep systemd`，看到第一行，其中的数字 **1** 表示它的进程号是1，也就是说它是 Linux 内核发起的第一个程序。因此，内核一旦检测完硬件并组织好了内存，就会运行 `/usr/lib/systemd/systemd` 可执行程序，这个程序会按顺序依次发起其他程序。（在还没有 Systemd 的日子里，内核会去运行 `/sbin/init`，随后这个程序会在名为 SysVinit 的系统中运行其余的各种启动脚本。）
Systemd 的核心是一个叫 单元   （    unit    ） 的概念，它是一些存有关于 服务   （    service    ） （在运行在后台的程序）、设备、挂载点、和操作系统其他方面信息的配置文件。Systemd 的其中一个目标就是简化这些事物之间的相互作用，因此如果你有程序需要在某个挂载点被创建或某个设备被接入后开始运行，Systemd 可以让这一切正常运作起来变得相当容易。（在没有 Systemd 的日子里，要使用脚本来把这些事情调配好，那可是相当丑陋的。）要列出您 Linux 系统上的所有单元，输入以下命令：
```
systemctl list-unit-files
```
现在，`systemctl` 是与 Systemd 交互的主要工具，它有不少选项。在单元列表中，您会注意到这儿有一些格式化：被 启用   （    enabled    ） 的单元显示为绿色，被 禁用   （    disabled    ） 的显示为红色。标记为“static”的单元不能直接启用，它们是其他单元所依赖的对象。若要限制输出列表只包含服务，使用以下命令：
```
systemctl list-unit-files --type=service
```
注意，一个单元显示为“enabled”，并不等于对应的服务正在运行，而只能说明它可以被开启。要获得某个特定服务的信息，以 GDM (Gnome Display Manager) 为例，输入以下命令：
```
systemctl status gdm.service
```
这条命令提供了许多有用的信息：一段给人看的服务描述、单元配置文件的位置、启动的时间、进程号，以及它所从属的 CGroups（用以限制各组进程的资源开销）。
如果您去查看位于 `/usr/lib/systemd/system/gdm.service` 的单元配置文件，您可以看到各种选项，包括要被运行的二进制文件（“ExecStart”那一行），相冲突的其他单元（即不能同时进入运行的单元），以及需要在本单元执行前进入运行的单元（“After”那一行）。一些单元有附加的依赖选项，例如“Requires”（必要的依赖）和“Wants”（可选的依赖）。
此处另一个有趣的选项是：
```
Alias=display-manager.service
```
当您启动 **gdm.service** 后，您将可以通过 `systemctl status display-manager.service` 来查看它的状态。当您知道有 显示管理程序   （    display manager    ） 在运行并想对它做点什么，但您不关心那究竟是 GDM，KDM，XDM 还是什么别的显示管理程序时，这个选项会非常有用。
![Image](/data/attachment/album/201601/14/100853pnnu3znf14n7yvr3.jpg)
*使用 systemctl status 命令后面跟一个单元名，来查看对应的服务有什么情况。*
### “ 目标   （    target    ） ”锁定
如果您在 `/usr/lib/systemd/system` 目录中输入 `ls` 命令，您将看到各种以 `.target` 结尾的文件。启动* 目标   （    target    ） *是一种将多个单元聚合在一起以致于将它们同时启动的方式。例如，对大多数类 Unix 操作系统而言有一种“ 多用户   （    multi-user    ） ”状态，意思是系统已被成功启动，后台服务正在运行，并且已准备好让一个或多个用户登录并工作——至少在文本模式下。（其他状态包括用于进行管理工作的 单用户   （    single-user    ） 状态，以及用于机器关机的 重启   （    reboot    ） 状态。）
如果您打开 **multi-user.target** 文件一探究竟，您可能期待看到的是一个要被启动的单元列表。但您会发现这个文件内部几乎空空如也——其实，一个服务会通过 **WantedBy** 选项让自己成为启动目标的依赖。因此如果您去打开 **avahi-daemon.service**, **NetworkManager.service** 及其他 **.service** 文件看看，您将在 Install 段看到这一行：
```
WantedBy=multi-user.target