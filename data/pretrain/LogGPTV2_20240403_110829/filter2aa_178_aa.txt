Radio Exploitation 101
Characterizing, Contextualizing, and Applying Wireless Attack Methods
Matt Knight
Bastille Networks
San Francisco, CA
PI:EMAIL
Marc Newlin
Bastille Networks
Atlanta, GA
PI:EMAIL
Abstract—Reverse engineering wireless physical layers has never
been easier, thanks to the commoditization of Software Deﬁned
Radio (SDR) technology and an active open source community.
However, the successful application of SDR to security challenges
requires extensive domain knowledge and insight into radio
frequency fundamentals.
The goal of this paper, and accompanying presentation, is
to highlight how wireless network exploitation is both similar
to, and distinct from wired, network exploitation, and to
offer techniques that will aid security researchers in thinking
creatively
about
wireless
reverse
engineering
and
exploit
development.
Index Terms—wireless, security, reverse engineering, software
deﬁned radio, radio frequency, internet of things, mobile
I. INTRODUCTION
The
growth
of
mobile
and
Internet
of
Things
(IoT)
technologies has reshaped the computing landscape as we
know it. Devices are made to be “smart” (smart[phones
— cars — refridgerators — etc.]) by upgrading them with
embedded computers. By bolting on processing and network
connectivity, they are exposed to other devices on networks,
which can be as small as comprising only two devices or as
broad as the open Internet. This introduces an expansive new
attack surface to a hypothetical security model.
II. THE EVOLUTION OF NETWORK EXPLOITATION
Recent years have seen a ﬂood of novel wireless exploits,
with exploitation moving beyond 802.11 and into more ob-
scure standard and proprietary wireless protocols. This can
be attributed to the proliferation and commoditization of
technologies that provide promiscuous access to the physical
layer of the communication stack. For context, we will brieﬂy
discuss the evolution of network exploitation.
A. Network Abstraction Models
Network abstraction models, such as the Open Systems
Interconnection
(OSI)
model,
separate
communications
functions out into generalized components as a means
of promoting standardization and interoperability. These
abstraction models, however, are arbitrary constructs – that is
to say there is no fundamental difference between electrons
representing data bits at the Data Link Layer vs. data bits at
the Application Layer. However, these abstractions represent
boundaries along which vulnerabilities can exist due to
imperfect or incomplete integration. [1]
Inspecting data at these boundaries, or on lower layers
than manufacturers intended, is a productive means of
discovering vulnerabilities. With wireless systems, the lowest
layer which manufacturers expose is typically the Data Link
Layer (Layer 2) or the Network Layer (Layer 3). Because
the radio-based Physical Layer (Layer 1) is implemented
in purpose-built silicon, it is often either considered to be
out of scope of the security model or taken for granted by
system integrators and vendors. However, advances in radio
technology has made the inspection of radio-based Physical
Layer protocols viable, thus exposing a broad attack surface
to hackers.
B. Commoditization of Early Packet Sniffers
The ﬁrst commercial network sniffer was released by Network
General as the Sniffer Network Analyzer software in 1986.
[1] Through the mid-1990s, the software was commonly sold
preinstalled on expensive Dolch computers the size of large
briefcases. Before long, commodity network cards became
capable of integrating with the Sniffer Network Analyzer and
applications like it, thus lowering the barrier to inspecting
wired network trafﬁc. [2] Today, packet snifﬁng software like
Wireshark and tcpdump makes network analysis easier than
ever.
A similar evolution took place with 802.11 in the late
1990s and early 2000s. Monitoring arbitrary 802.11 channels
used to be the domain of expensive test equipment. However,
with
most
commercial
802.11
network
interfaces
now
supporting monitor mode, inspecting arbitrary 802.11 trafﬁc
can be done with commodity 802.11 chipsets.
C. Commodity Software Deﬁned Radio
Following the adoption of myriad wireless technologies in
support of mobile and IoT, we now observe the commodi-
tization of Software Deﬁned Radio (SDR). Software Deﬁned
Radio pushes the architectural hardware/software boundary out
closer to the radio, such that generic hardware can implement
arbitrary wireless protocols in software. This empowers re-
searchers to interface with any wireless system, as long as they
are able to implement the appropriate software. Throughout
the 2000s early Software Deﬁned Radios could be had on an
academic, government, or military budget; now with commer-
cial products like the USRP ($650), BladeRF ($420), HackRF
($300), and the RTL-SDR (˜$20), Software Deﬁned Radio
is within reach of modestly-funded hackers and independent
researchers.
D. The Internet of Embedded Systems
Setting aside marketing buzzwords for a moment, IoT devices,
and wireless radios themselves, are connected embedded sys-
tems. While adding computers to simple machines can lead
to increased precision and efﬁciency, the design and environ-
mental constraints placed on embedded systems make them
inherently more vulnerable than traditional platforms.
• Hardware limitations: Embedded systems are designed
to be small, low-power, cheap, and inexpensive. They
often use low-power embedded CPUs with limited com-
putational capacity and radio technologies that trade
data rates for endurance. Thus there can be limited
computational and networking bandwidth for encryption
overhead. Finally, embedded systems sometimes use in-
expensive one-time-programmable memory for storing
their images, meaning it is not uncommon for systems to
be unable to receive software updates once manufactured.
• Battery powered: Embedded devices are often battery
powered, meaning they need to aggressively duty-cycle
to save energy.
• Limited connectivity: If connected, embedded systems
are connected often using networking technologies that
have limited bandwidth and scope. This means it can
be difﬁcult to provide sufﬁcient bandwidth for encrypted
communication, or to deliver software updates to devices
in the ﬁeld.
• Complicated deployments: Embedded systems are of-
ten deployed in hard-to-reach places by non-technical
installers. They therefore are often required to be sim-
ple to install and conﬁgure, and either immutable or
hard/expensive to reconﬁgure once deployed. Addition-
ally, embedded systems are often whitelabeled or sold
through distributors, making ownership of the software
stack a nontrivial matter.
• High endurance: Embedded devices are often expected
to last for years before replacement.
Given these traits, embedded vulnerabilities can persist
for years. Thus, security considerations are essential when
weighing the design of embedded systems, and evaluating the
security of the systems that connect them to the broader world.
III. RADIO-BASED PHYSICAL LAYERS
Wireless communication systems are deﬁned by having a
radio-based physical layer (PHY). A radio-based PHY deﬁnes
how data presented by the Data Link Layer (MAC) gets
mapped into electromagnetic phenomena for transmission to
a remote receiver. Overall characteristics of the protocol, such
as bandwidth, promiscuity, and persistence, can vary based on
implementation. All wireless protocols, however, exist within
the radio frequency domain; therefore we invoke the following
concepts:
• Radio Spectrum: Radio waves travel along the electro-
magnetic spectrum. The radio spectrum can be thought of
as a shared communications bus which all radio protocols
use.
• Frequency: Since radio signals are waves, they are
periodic and therefore have a frequency. Within our bus-
based model, the spectrum is MIMO/multi-input multi-
output, with this multiplexing occurring by frequency.
• Channel: All radio protocols have some notional imple-
mentation of a channel. The channel is characterized by
the amount of bandwidth the protocol utilizes, centered
about the center frequency of the signal. There may be
one or several center frequencies depending on whether
the protocol channel hops or not. Channels may overlap,
and transmissions may collide – this is a reality of
working within a shared medium. Traditional electrical
data buses, such as SPI or CAN, are coordinated or
use deconﬂiction techniques to avoid collisions; wireless
protocols use channel monitoring and retransmissions to
mitigate the impact of collisions.
• Signal Power and Noise: Radio waves propagate in
a similar manner to audio waves. Both gradually lose
power as they radiate away from their source, until
they are eventually lost beneath the noise ﬂoor – that
is, they lose power to the point where they become
not discernible from the background noise. The noise
ﬂoor is inﬂuenced by both the radio receiver itself
and environmental conditions, including intentional and
unintentional (interfering) radio emissions.
IV. RADIO EXPLOITATION 101
Here we begin to outline our wireless threat taxonomy,
with particular emphasis on what makes wireless exploita-
tion and defense distinct from the same on wired networks.
To this end, we have consolidated noteworthy techniques
into the following attack models. This non-exhaustive list
includes snifﬁng, wardriving, replay attacks, jamming, MAC-
layer channel reservation abuse, evil twin attacks, ﬁrmware
update exploitation, and physical layer protocol abuse. For
each type of attack we will describe:
• Method of attack: In plain English, how is this attack
performed?
• Potential impact: What are the consequences for the
victims of such an attack?
• Analogous attack on wired networks: Is there an
analogous attack on wired networks? If not, how and why
is this attack scenario unique to RF?
• A recent example of such an attack: To provide context,
what is a real-world example of a system or organization
that has fallen victim to such an attack?
• Limitations and defensive mitigations: What sets of
circumstances have to align to facilitate this attack? How
broadly viable is it? What steps can defenders take to
mitigate their exposure?
• Description of our paired DEF CON demo: If there
is a live demo from the associated ”Radio Exploitation
101” DEF CON talk, it will be explained here.
A. Snifﬁng
We begin with snifﬁng, the passive observation of wireless
network trafﬁc. Snifﬁng is noteworthy because the wireless
domain enables truly promiscuous snifﬁng with no direct
physical access.
• Method of attack: Snifﬁng is performed by using a radio
receiver to passively receive wireless network trafﬁc.
• Potential impact: Data loss, device/network discovery
• Wired analogue: Snifﬁng exists in wired contexts too.
However, wired network snifﬁng requires direct physical
access to a network or bus – in other words, one must be
physically connected to the network in order to observe
its trafﬁc. Since electromagnetic signals by nature radiate
throughout free space, listeners other than the intended
receiver can remotely monitor network trafﬁc without
detection.
• Recent example: Marc Newlin’s 2016 Mousejack vul-
nerability revealed that many wireless keyboards failed
to properly encrypt their keystrokes, with many vendors
forgoing encryption entirely – thus, snifﬁng their trafﬁc
was trivial.
• Limitations and defensive mitigations: While attackers
do not require direct access to a bus, snifﬁng still requires
a degree of physical proximity to the transmitter. Addi-
tionally, attackers must possess a radio that is compatible
with the protocol to be sniffed. Defenders can mitigate
their exposure by encrypting trafﬁc so that sniffed packets
will be of limited utility to attackers.
• DEF CON demo: Live demonstrationSnifﬁng keystrokes
from an unencrypted wireless keyboard.
B. Wardriving
Wardriving is a type of snifﬁng that refers to the act of
searching for wireless networks or devices. Its name origi-
nates from 802.11 wardriving, where 802.11 access points are
sought using equipment within a moving vehicle. With the
growth of mobile and IoT protocols, wardriving now refers to
discovering non-802.11 RF networks as well.
• Method of attack: Wardriving can be passive or active.
Passive scenarios involve the attacker snifﬁng on channels
of interest, looking for wireless trafﬁc that denotes the
presence of a network or device(s). Active scenarios
involve the attacker transmitting messages intended to
induce a response from present devices or infrastructure,
and then snifﬁng for said responses.
• Potential impact: Discovery of devices and networks,
identifying exploitable devices
• Wired analogue: Active wardriving is analogous to port
scanning. Just as port scanning is a way of discovering
potentially exploitable services running on an endpoint,
active wardriving is a means of discovering and enumerat-
ing potentially exploitable devices within an environment.
Additionally, just as the nmap port scanning tool provides
operating system ﬁngerprinting through wired querying,
wardriving enables device ﬁngerprinting through wireless
characteristics.
• Recent example: Wardriving for 802.15.4 networks is
built in to the Killerbee 802.15.4/ZigBee attack frame-
work. The zbstumbler script hops from channel to chan-
nel, sending broadcast beacons and listening for beacon
responses from network coordinators.
• Limitations and defensive mitigations: As with snifﬁng,
attackers must have a degree of physical proximity to
the sought after wireless devices in order to wardrive for
them. This can be overcome through the use of directional
equipment, as was done with the proliferation of jury-
rigged cantennas during the peak of 802.11 wardriving.
Wardriving is a conspicuous process, so defenders can
mitigate exposure by being aware of its signatures – for
instance, seeing an atypical ﬂood of probe or beacon
requests across consecutive channels.
• DEF CON demo: Live demonstration of beaconing for
802.15.4 coordinators.
C. Replay Attack
Replay attacks involve retransmitting a previously captured
transmission, possibly to induce a previously observed state
change or action within the network. The replay attack may
involve retransmitting a captured raw PHY-layer payload or
the synthesis of a new frame based on decoded data.
• Method of attack: An attacker must ﬁrst capture trans-
mission of interest that is correlated with the action on the
target they wish to induce – that is, the transmission they
intend to replay. This can either be a raw IQ spectrum
capture or a decoded packet payload. Software Deﬁned
Radio can produce either as long as it has the appropriate
decoding stack behind it. The captured transmission can
then be replayed to induce the intended action on the
network, either by replaying the raw IQ through the
appropriate Software Deﬁned Radio or by generating a
new transmission from the decoded packet payload.
• Potential impact: Change the state of a network, or
induce a behavior by a device on a network
• Wired analogue: Replay attacks exist in wired contexts.
• Recent example: The April 2017 Dallas tornado emer-
gency alert siren attack is widely believed to be an RF
replay attack. The attacker likely used a Software Deﬁned
Radio to capture the unencrypted, unauthenticated wire-
less signal used to test the sirens and replay said signal
at a later date. [3]
• Limitations and defensive mitigations: Replay attacks
can be defeated by enforcing cryptographic authentica-
tion and freshness. Cryptographic authentication is the
practice of using cryptography to establish trust among
two or more endpoints – essentially using cryptography to
sign messages as a means of validating their authenticity.
Freshness refers to tracking a sequence number within
a message frame – freshness is not a security feature in
and of itself, but when combined with authentication and
encryption can make replay attacks far harder to execute.
• DEF CON demo:
D. Jamming
Jamming is perhaps the most well-known attack on wireless
systems. Since the radio frequency domain can be thought of
as the bus that all wireless systems share, loading it up with
powerful wideband noise or spurious trafﬁc is an effective way
of denying a communications channel.
• Method of attack: Jamming in its simplest form can
be conducted by transmitting noise within the target
network’s RF channel – that is, at the same frequency and
with sufﬁcient bandwidth and power. In lieu of wideband
noise, rapidly sending arbitrary packets while ignoring
channel contention can have the same effect.
• Potential impact: Denies legitimate network trafﬁc, dis-