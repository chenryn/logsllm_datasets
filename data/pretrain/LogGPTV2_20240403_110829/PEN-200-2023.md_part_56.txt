Modules we’ll discuss later in this course.
In this Module, we first attacked network services using basic dictionary attacks. Then, we
discussed the cracking process and rule-based attacks. We used these techniques to crack a
KeePass password manager database and an SSH private key. In the last Learning Unit, we
worked with NTLM and Net-NTLMv2 hashes, cracking them and using them to gain access to
another system by passing the NTLM hash or relaying Net-NTLMv2.
In conclusion, we should remember the prevalence of passwordy attacks from an offensive
perspective. In a majority of real-life penetration tests, we won’t breach a perimeter with technical
exploits but rather with client-side or password attacks. We skhould also be aware that the skills
from this Module are not only useful from an offensive perspective, but also provide insight into
how to build an effective and well-rounded defense.
s
o
n
i
z
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 427
Made in Morocco
Penetration Testing with Kali Linux
14 Fixing Exploits
In this Module, we will cover the following Learning Units:
• Fixing Memory Corruption Exploits
• Fixing Web Exploits
Writing an exploit from scratch can be difficult and time-consuming. But it can be equally difficult
and time-consuming to find a public exploit that fits our exact needs during an engagement. One
great compromise is to modify a public exploit to suit our specific needs.
However, writing exploits from scratch comes with some challenges. In the case of memory
corruption exploits like buffer overflows, we may need to modify basic target parameters such as
y
the socket information, return address, payload, and offsets.
Understanding each of these elements is very important. Fokr example, if our target is running
Windows Server 2022 and we attempt to run an exploit that was written and tested against
Windows 2003 Server, newer protection mechanisms such as Address Space Layout
s
Randomization (ASLR)679 will most likely result in an application crash. These kind of events could
lock down that attack vector for a period of time or even impact the production environment, both
o
situations we should avoid.
n
Before running a penetration test, its scope should be defined upfront and the
client should accept any potential downtime risks associated with attack vectors.
i
Keeping this in mind, as penetration testers we should always strive to minimize
z
the impact of any exploit we plan to run.
D
To avoid potential downtime, instead of firing off a mismatched exploit, we should always read
the exploit code carefully, modify it as needed, and test it against our own sandboxed target
whenever possible.
These target-specific variables explain why online resources like the Exploit
Database680 host multiple exploits for the same vulnerability, each written for
different target operating system versions and architectures.
We may also benefit from porting an exploit to a different language in order to include additional
pre-written libraries and extend the exploit functionality by importing it to an attack framework.
679 (Microsoft, 2022), https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-
randomization?view=msvc-170
680 (OffSec, 2023), https://www.exploit-db.com
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 428
Made in Morocco
Penetration Testing with Kali Linux
Finally, exploits that are coded to run on a particular operating system and architecture may need
to be ported to a different platform. As an example, we often encounter situations where an
exploit needs to be compiled on Windows but we want to run it on Kali.
Among fixing memory corruption exploits, we are going to learn how to adjust exploits related to
web applications, which typically involves modifying the socket option and application-specific
parameters such as URI paths and cookies among others.
In this Module, we will overcome many of these challenges as we walk through the steps required
to modify public memory corruption exploits and web exploit code to fit a specific attack platform
and target.
14.1 Fixing Memory Corruption Exploits
Memory corruption exploits, such as buffer overflows, are relatively ycomplex and can be difficult
to modify.
k
This Learning Unit covers the following Learning Objectives:
• Understand high-level buffer overflow theory s
• Cross-compile binaries
o
• Modify and update memory corruption exploits
Before we jump into an example, we will first discuss the high-level theory behind stack-based
n
buffer overflow vulnerabilities. We’ll then cover the methodology and highlight some of the
considerations and challenges we will face when fixing these kind of exploits.
i
14.1.1 Buffer Overflowz in a Nutshell
In general, a buffer is a memory area intended to hold content that is often sent by the user for
D
later processing. Some buffers have a dynamic size, while others have a fixed, preallocated size.
Buffer overflows are one of the earliest memory corruption vulnerabilities that have been
undermining software since the late 1980s, and although many mitigations have been developed
during the years, they are still relevant today.
From a bird’s-eye view, a buffer overflow vulnerability occurs whenever the user’s provided
content goes beyond the stack limit and overruns into the adjacent memory area. An example is
provided in the following diagram.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 429
Made in Morocco
Penetration Testing with Kali Linux
Figure 222: Stack-Based Buffer Overflow - Exploitation Stages
In this diagram, a buffer has been designed to contain a password that can be a maximum of 8
bytes. If a user provides an input consisting of the characters “password” followed by the
numbers “4” and “3”, the last two digits are going to overflow the buffer by two bytes. If not
handled correctly, this event might lead to unexpected behavior, as we’ll observe shortly.
Although writing buffer overflow exploits is beyond the scope of the course, we’re
learning how they work so that we can understand when and how to adjust them
whenever we encounter these attack vectors during an engagement.
Memory corruption vulnerabilities can occur in different parts of a program such as the heap or
y
the stack.681 The heap is dynamically managed and typically stores large chunks of globally-
accessible data, while the stack’s purpose is to store local functions’ data, and its size is generally
k
fixed.
The stack often contains local variables like integers or buffers. For a practical example of how a
s
buffer overflow can occur, let’s review the following two-liner partial C code.
*buffer[64]* o
...
strcpy(buffer, argv[1]);
n
Listing 310 - Declaring a Buffer and moving user’s data into it
In the above example, a buffer of 64 characters has been declared and a user command line
i
argument is copied into it via the strcpy682 function. This function copies the source string passed
z
as a second parameter into the buffer passed as the first parameter. This function is marked as
unsafe since it does not check if the destination address has enough space to fit the originating
string, which could lead to uDnexpected application behavior.
The stack makes room for the exact space needed by the buffer (64 bytes in our case), along with
function parameters and the return address. The return address is a memory address that stores
the next function to be executed once the one running has completed.
If the user’s input is bigger than the destination buffer’s space, it could overwrite the return
address.
Rewriting the return address has significant implications because when a function ends, it
executes the ret683 instruction, which loads the return address inside EIP/RIP, the instruction
pointer responsible for keeping track of current code instructions.
If an attacker has control over the return address, they may eventually control the program flow
as well. Let’s examine the exploitation stages for a stack-based buffer overflow attack.
681 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Stack-based_memory_allocation
682 (cplusplus, 2022), http://www.cplusplus.com/reference/cstring/strcpy/
683 (Felix Cloutier, 2022), https://www.felixcloutier.com/x86/ret
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 430
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
z
Figure 223: Stack-Based Buffer Overflow - Exploitation Stages
D
This image illustrates three different states of the stack. In the leftmost column, the buffer has
been initialized at runtime and its space reserved in memory. Below this, in red, the return address
holds the correct memory address. In the central panel, the user input contains just 32 characters,
meaning it fills only half of the available buffer. However, in the scenario on the right, the user has
sent 80 “A” characters, thus filling out the entire 64-byte long buffer and overwriting the return
address.
As the letter “A” in hexadecimal converts to “41”, the return address would be overwritten with a
value of “\x41\x41\x41\x41”.
Instead of rewriting the address with four A’s, an attacker usually rewrites the return address with
a valid and mapped memory address containing shellcode that gives the attacker full control of
the target machine.
A typical buffer overflow attack scenario involves overwriting the return address
with a JMP ESP instruction, which instructs the program to jump to the stack
and execute the shellcode that has been injected right after the beginning of the
payload.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 431
Made in Morocco
Penetration Testing with Kali Linux
This kind of attack has been documented since the late 1980s, prompting the development of
various mitigations like ASLR and Executable Space Protection,684 among others. Since exploit
mitigations are not in scope for this Module, we’ll assume our target has none enabled.
The general flow of a standard stack-based buffer overflow is fairly straightforward. The exploit
will:
1. Create a large buffer to trigger the overflow.
2. Take control of EIP by overwriting a return address on the stack, padding the large buffer
with an appropriate offset.
3. Include a chosen payload in the buffer prepended by an optional NOP685 sled.
4. Choose a correct return address instruction such as JMP ESP (or a different register) to
redirect the execution flow to the payload.
y
As we fix the exploit, depending on the nature of the vulnerability, we may need to modify
elements of the deployed buffer to suit our target such as fkile paths, IP addresses and ports,
URLs, and more. If these modifications alter our offset, we must adjust the buffer length to ensure
we overwrite the return address with the desired bytes.
s
Although we could trust that the return address used in the exploit is correct, the more
responsible alternative is to find the return addreoss ourselves, especially if the one used is not
part of the vulnerable application or its libraries. One of the most reliable ways to do this is to
clone the target environment locally in a virtual machine and then use a debugger on the
n
vulnerable software to obtain the memory address of the return address instruction.
We must also consider changing the payload contained in the original exploit code.
i
As mentioned in a previous Modzule, public exploits present an inherent danger because they
often contain hex-encoded payloads that must be reverse-engineered to determine how they
function. Because of this, wDe must always review the payloads used in public exploits or better
yet, insert our own.
When we create a payload, we will obviously include our own IP address and port numbers and
may exclude certain bad characters, which we can determine independently or glean from the
exploit comments.
Bad characters are ASCII or UNICODE characters that break the application when included in the
payload because they might be interpreted as control characters.686 For example, the null-byte
“\x00” is often interpreted as a string terminator and, if inserted in the payload, could prematurely
truncate the attack buffer.
While generating our own payload is advised whenever possible, there are exploits using custom
payloads that are key to successfully compromising the vulnerable application. If this is the case,
our only option is to reverse engineer the payload to determine how it functions and if it is safe to
execute. This is difficult and beyond the scope of this Module, so we will instead focus on
shellcode replacement.
684 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Executable_space_protection
685 (Wikipedia, 2022), https://en.wikipedia.org/wiki/NOP_slide
686 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Control_character
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 432
Made in Morocco
Penetration Testing with Kali Linux
14.1.2 Importing and Examining the Exploit
In this example, we’ll target Sync Breeze Enterprise 10.0.28 and focus on one of the two available
exploits. This will provide us with a working exploit for our target environment and allow us to
walk through the modification process.
Searching by product and version, we’ll notice that one of the available exploits for this particular
vulnerability is coded in C.
kali@kali:~$ searchsploit "Sync Breeze Enterprise 10.0.28"
---------------------------------------------------------------- ---------------------
Exploit Title | Path (/usr/share/exploitdb/)
---------------------------------------------------- ---------------------------------
Sync Breeze Enterprise 10.0.28 - Denial of-Service (PoC) | windows/dos/43200.py
Sync Breeze Enterprise 10.0.28 - Remote Buffer Over | exploits/windows/remote/42928.py
y
Sync Breeze Enterprise 10.0.28 - Remote Buffer Over | exploits/windows/dos/42341.c
---------------------------------------------------------------- ---------------------
Listing 311 - Searching for available exploits for our vulnerablek software using searchsploit
Denial of Service (DoS) exploits result in a simple application crash and no explicit exploitation
path. We should normally avoid DoS exploits whenever wse have better alternatives, as in our case.
Instead, let’s focus on the last two entries.
o
The vulnerability is present in the HTTP server module where a buffer overflow condition is
triggered on a POST request. While we suggest reading the entire Python exploit code, the core
functionality of the exploit script can be sumnmarized using the below code:
offset = "A" * 780
JMP_ESP = "\x83\x0c\x09\x10" i
shellcode = "\x90"*16 + msf_shzellcode
exploit = offset + JMP_ESP + shellcode
Listing 312 - Sync Breeze 10.0.28 Exploit’s Summary
D
At offset 780, we overwrite the instruction pointer with a JMP ESP instruction located at the
memory address 0x10090c83. Next, we append our shellcode with 16 NOPs. Finally, the exploit
buffer is included in the HTTP POST request and sent.
Since we’re now more familiar with how the vulnerability works and how it is exploited, let’s briefly
review the differences between scripting languages such as Python and a compiled language
such as C.
While there are plenty of differences between the two languages, we will focus on two main
differences that will affect us, including memory management and string operations.
The first key difference is that scripting languages are executed through an interpreter and not
compiled to create a stand-alone executable. Because scripting languages require an interpreter,
we cannot run a Python script in an environment where Python is not installed. This could limit us
in the field, especially if we need a stand-alone exploit (like a local privilege escalation) that must
run in an environment that doesn’t have Python pre-installed.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 433
Made in Morocco
Penetration Testing with Kali Linux
As an alternative, we could consider using PyInstaller,687 which packages Python
applications into stand-alone executables for various target operating systems.
However, given the nuances of exploit code, we suggest porting the code by
hand
Another difference between Python and C is that in a scripting language like Python,
concatenating a string is very easy and usually takes the form of an addition between two strings:
kali@kali:~$ python
...
>>> string1 = "This is"
>>> string2 = " a test"
>>> string3 = string1 + string2 y
>>> print(string3)
k
This is a test
Listing 313 - String concatenation example in Python
s
Concatenating strings in this way is not allowed in a programming language such as C.
Fixing C programs requires more precautions, as oopposed to those written using Python. We will
learn how to do this in C, since this will provide us with useful knowledge during a penetration test
engagement.
n
To begin the process of modifying our exploit, we will move the target exploit688 to our current
working directory using SearchSploit’s handy -m mirror (copy) option.
i
z
kali@kali:~$ searchsploit -m 42341
Exploit: Sync Breeze Enterprise 10.0.28 - Remote Buffer Overflow (PoC)
URL: https://www.exDploit-db.com/exploits/42341/
Path: /usr/share/exploitdb/exploits/windows/dos/42341.c
File Type: C source, UTF-8 Unicode text, with CRLF line terminators
Copied to: /home/kali/42341.c
Listing 314 - Using searchsploit to copy the exploit to the current working directory
With the exploit mirrored to our home directory, we can inspect it to determine what
modifications (if any) are required to compile the exploit to work in our target environment.
Before even considering compilation, however, we’ll notice the headers (such as winsock2.h689)
indicating that this code was meant to be compiled on Windows:
#include 
#include 