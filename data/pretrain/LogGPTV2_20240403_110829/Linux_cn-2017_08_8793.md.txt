---
author: Nick Congleton
category: 系统运维
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 8895
date: '2017-08-21 09:34:00'
editorchoice: false
excerpt: 数据包过滤可让你专注于你感兴趣的确定数据集。如你所见，Wireshark 默认会抓取所有数据包。这可能会妨碍你寻找具体的数据。 Wireshark
  提供了两个功能强大的过滤工​​具，让你简单而无痛地获得精确的数据。
fromurl: https://linuxconfig.org/filtering-packets-in-wireshark-on-kali-linux
id: 8793
islctt: true
largepic: /data/attachment/album/201708/19/123750v3fqtsis8v9gc3fs.jpg
permalink: /article-8793-1.html
pic: /data/attachment/album/201708/19/123750v3fqtsis8v9gc3fs.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 数据包过滤可让你专注于你感兴趣的确定数据集。如你所见，Wireshark 默认会抓取所有数据包。这可能会妨碍你寻找具体的数据。 Wireshark
  提供了两个功能强大的过滤工​​具，让你简单而无痛地获得精确的数据。
tags:
- Wireshark
thumb: false
title: 在 Wireshark 中过滤数据包
titlepic: true
translator: geekpi
updated: '2017-08-21 09:34:00'
---
![](/data/attachment/album/201708/19/123750v3fqtsis8v9gc3fs.jpg)
### 介绍
数据包过滤可让你专注于你感兴趣的确定数据集。如你所见，Wireshark 默认会抓取*所有*数据包。这可能会妨碍你寻找具体的数据。 Wireshark 提供了两个功能强大的过滤工​​具，让你简单而无痛地获得精确的数据。
Wireshark 可以通过两种方式过滤数据包。它可以通过只收集某些数据包来过滤，或者在抓取数据包后进行过滤。当然，这些可以彼此结合使用，并且它们各自的用处取决于收集的数据和信息的多少。
### 布尔表达式和比较运算符
Wireshark 有很多很棒的内置过滤器。当开始输入任何一个过滤器字段时，你将看到它们会自动补完。这些过滤器大多数对应于用户对数据包的常见分组方式，比如仅过滤 HTTP 请求就是一个很好的例子。
对于其他的，Wireshark 使用布尔表达式和/或比较运算符。如果你曾经做过任何编程，你应该熟悉布尔表达式。他们是使用 `and`、`or`、`not` 来验证声明或表达式的真假。比较运算符要简单得多，它们只是确定两件或更多件事情是否彼此相等、大于或小于。
### 过滤抓包
在深入自定义抓包过滤器之前，请先查看 Wireshark 已经内置的内容。单击顶部菜单上的 “Capture” 选项卡，然后点击 “Options”。可用接口下面是可以编写抓包过滤器的行。直接移到左边一个标有 “Capture Filter” 的按钮上。点击它，你将看到一个新的对话框，其中包含内置的抓包过滤器列表。看看里面有些什么。
![Wireshark dialog for creating a capture filter](/data/attachment/album/201708/19/123807wy6kt2sq8f8fls8t.jpg)
在对话框的底部，有一个用于创建并保存抓包过滤器的表单。按左边的 “New” 按钮。它将创建一个填充有默认数据的新的抓包过滤器。要保存新的过滤器，只需将实际需要的名称和表达式替换原来的默认值，然后单击“Ok”。过滤器将被保存并应用。使用此工具，你可以编写并保存多个不同的过滤器，以便它们将来可以再次使用。
抓包有自己的过滤语法。对于比较，它不使用等于号，并使用 `>` 和 `` 用于确定一件东西是否大于另一个东西，`=` 和 `
作者：[Nick Congleton](https://linuxconfig.org/filtering-packets-in-wireshark-on-kali-linux) 译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出