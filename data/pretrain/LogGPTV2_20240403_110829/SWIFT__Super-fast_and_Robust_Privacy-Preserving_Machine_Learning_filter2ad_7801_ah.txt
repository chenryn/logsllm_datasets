– If (Pi,Pj) = (P1,P0): Servers execute the preprocessing of
Πsh(P1, v) and then locally set γv = 0.
– If (Pi,Pj) = (P2,P0): Similar to the case above.
– If (Pi,Pj) = (P1,P2): P1,P2 together sample random γv ∈ Z2(cid:96).
Servers locally set [αv]1 = [αv]2 = 0.
Online:
– If (Pi,Pj) = (P1,P0): P0,P1 compute βv = v + [αv]1 + [αv]2.
P0,P1 jmp-send βv to P2.
– If (Pi,Pj) = (P2,P0): Similar to the case above.
– If (Pi,Pj) = (P1,P2): P1,P2 locally set βv = v. P1,P2 jmp-send
βv + γv to P0.
Figure 9: 3PC:(cid:74)·(cid:75)-sharing of a value v ∈ Z2(cid:96) jointly by Pi,Pj
When the value v is available to both Pi,Pj in the prepro-
cessing phase, protocol Πjsh can be made non-interactive in
the following way: P sample a random r ∈ Z2(cid:96) and locally
set their share according to Table 6.
Multiplication: The ideal functionality for ΠmulPre appears
in Fig. 10.
Functionality FMulPre
FMulPre interacts with the servers in P and the adversary S.
FMulPre receives (cid:104)·(cid:105)-shares of d, e from the servers where Ps, for
s ∈ {0,1,2}, holds (cid:104)d(cid:105)s = (ds, d(s+1)%3) and (cid:104)e(cid:105)s = (es, e(s+1)%3)
such that d = d0 + d1 + d2 and e = e0 + e1 + e2. Let Pi denotes
the server corrupted by S. FMulPre receives (cid:104)f(cid:105)i = (fi, f(i+1)%3)
2666    30th USENIX Security Symposium
USENIX Association
from S where f = de. FMulPre proceeds as follows:
– Reconstructs d, e using the shares received from honest servers
and compute f = de.
– Compute f(i+2)%3 = f − fi − f(i+1)%3 and set the output shares
as (cid:104)f(cid:105)0 = (f0, f1),(cid:104)f(cid:105)1 = (f1, f2),(cid:104)f(cid:105)2 = (f2, f0).
– Send (Output,(cid:104)f(cid:105)s) to server Ps ∈ P .
Figure 10: 3PC: Ideal functionality for ΠmulPre protocol
(P1,P2)
[αv]1 = 0, [αv]2 = 0
βv = v, γv = r− v
(0, 0, r
)
(0, v, r− v)
(0, v, r− v)
P0
P1
P2
(P1,P0)
(P2,P0)
[αv]1 = −v, [αv]2 = 0
[αv]1 = 0, [αv]2 = −v
βv = 0, γv = r
(−v, 0, r)
(−v, 0, r)
( 0, 0, r)
βv = 0, γv = r
(0, − v, r)
(0,
0, r)
(0, − v, r)
Table 6: The columns depict the three distinct possibilities of input
contributing pairs. The ﬁrst row shows the assignment to various
components of the sharing. The last row, along with three sub-rows,
specify the shares held by the three servers.
Dot Product: The ideal world functionality for realizing
ΠdotpPre is presented in Fig. 11.
Functionality FDotPPre
FDotPPre interacts with the servers in P and the adversary S.
FDotPPre receives (cid:104)·(cid:105)-shares of vectors (cid:126)d = (d1, . . . , dn),(cid:126)e =
(e1, . . . , en) from the servers. Let v j,s for j ∈ [n],s ∈ {0,1,2}
denote the share of v j such that v j = v j,0 + v j,1 + v j,2. Server
Ps, for s ∈ {0,1,2}, holds (cid:104)d j(cid:105)s = (d j,s, d j,(s+1)%3) and (cid:104)e j(cid:105)s =
(e j,s, e j,(s+1)%3) where j ∈ [n]. Let Pi denotes the server corrupted
by S. FMulPre receives (cid:104)f(cid:105)i = (fi, f(i+1)%3) from S where f =(cid:126)d(cid:12)(cid:126)e.
FDotPPre proceeds as follows:
– Reconstructs d j, e j, for j ∈ [n], using the shares received from
honest servers and compute f = ∑n
– Compute f(i+2)%3 = f − fi − f(i+1)%3 and set the output shares
as (cid:104)f(cid:105)0 = (f0, f1),(cid:104)f(cid:105)1 = (f1, f2),(cid:104)f(cid:105)2 = (f2, f0).
– Send (Output,(cid:104)f(cid:105)s) to server Ps ∈ P .
j=1 d je j.
Figure 11: 3PC: Ideal functionality for ΠdotpPre protocol
([r] ,(cid:74)rd(cid:75)). For this, servers proceed as follows: P0,Pj for
Truncation: We now give details of how to generate
j ∈ {1,2} sample random r j ∈ Z2(cid:96). Recall that the bit at
ith position in r is denoted as r[i]. Deﬁne r[i] = r1[i]⊕ r2[i]
for i ∈ {0, . . . , (cid:96)− 1}. For r deﬁned as above, we have rd[i] =
r1[i + d]⊕ r2[i + d] for i ∈ {0, . . . , (cid:96)− d − 1}. Further,
r =
=
=
(cid:96)−1
∑
i=0
(cid:96)−1
∑
i=0
(cid:96)−1
∑
i=0
(cid:96)−1
∑
2i(r1[i]⊕ r2[i])
2ir[i] =
i=0
2i(cid:16)
(r1[i])R + (r2[i])R − 2(r1[i])R · (r2[i])R(cid:17)
2i(cid:16)
(r1[i])R + (r2[i])R(cid:17)− (cid:96)−1
(cid:16)
2i+1(r1[i])R(cid:17)· (r2[i])R
∑
i=0
(5)
(6)
Similarly, for rd we have the following,
2i−d(cid:16)
(r1[i])R + (r2[i])R(cid:17)− (cid:96)−1
(cid:16)
2i−d+1(r1[i])R(cid:17)· (r2[i])R
rd =
(cid:96)−1
∑
∑
i=d
i=d
The servers non-interactively generate (cid:74)·(cid:75)-shares (arith-
their (cid:74)·(cid:75)-shares, the servers execute Πdotp twice to com-
metic shares) for each bit of r1 and r2 as in Table 6. Given
pute(cid:74)·(cid:75)-share of A = ∑(cid:96)−1
i=d (2i−d+1(r1[i])R)· (r2[i])R, and B =
∑(cid:96)−1
i=0 (2i+1(r1[i])R)· (r2[i])R. Using these values, the servers
can locally compute the(cid:74)·(cid:75)-shares for (r, rd) pair following
Equation 5 and 6, respectively. Note that servers need [·]-
shares of r and not(cid:74)·(cid:75)-shares. The [·]-shares can be computed
from the(cid:74)·(cid:75)-shares locally as follows. Let (αr,βr,γr) be the
values corresponding to the(cid:74)·(cid:75)-shares of r. Since P0 knows
the entire value r in clear, and it knows αr, it can locally com-
pute βr. Now, the servers set [·]-shares as: [r]1 = − [αr]1 and
[r]2 = βr − [αr]2. The protocol appears in Fig. 12.
Protocol Πtrgen(P )
– To generate each bit r[i] of r for i ∈ {0, . . . , (cid:96)− 1}, P0,Pj for
j ∈ {1,2} sample random r j[i] ∈ Z2 and deﬁne r[i] = r1[i]⊕ r2[i].
– Servers generate(cid:74)·(cid:75)-shares of (r j[i])R for i ∈ {0, . . . , (cid:96)−1}, j ∈
{1,2} non-interactively following Table 6.
– Deﬁne(cid:126)x and(cid:126)y such that x = 2i−d+1(r1[i])R and yi = (r2[i])R,
respectively, for i ∈ {d, . . . , (cid:96)− 1}. Deﬁne (cid:126)p and (cid:126)q such that pi =
2i+1(r1[i])R and qi = (r2[i])R, respectively, for i ∈ {0, . . . , (cid:96)− 1}.
Servers execute Πdotp to compute(cid:74)·(cid:75)-shares of A =(cid:126)x(cid:12)(cid:126)y and
B =(cid:126)p(cid:12)(cid:126)q.
i=d 2i−d((cid:74)(r1[i])R(cid:75) +
i=0 2i((cid:74)(r1[i])R(cid:75) +(cid:74)(r2[i])R(cid:75)) −
(cid:74)(r2[i])R(cid:75)) −(cid:74)A(cid:75), and (cid:74)r(cid:75) = ∑(cid:96)−1
– Servers
(cid:74)B(cid:75).
– P0 locally computes βr = r + αr. P0,P1 set [r]1 = − [αr]1 and
P0,P2 set [r]2 = βr − [αr]2.
locally compute (cid:74)rd(cid:75) = ∑(cid:96)−1
Figure 12: 3PC: Generating Random Truncated Pair (r, rd)
C 4PC Protocols
4PC Joint Message Passing Primitive: The ideal function-
ality for jmp4 primitive appears in Fig. 13.
Functionality Fjmp4
Fjmp4 interacts with the servers in P and the adversary S.
Step 1: Fjmp receives (Input, vs) from senders Ps for s ∈ {i, j},
(Input,⊥) from receiver Pk and fourth server Pl, while it receives
(Select, ttp) from S. Here ttp is a boolean value, with a 1 indi-
cating that TTP = Pl should be established.
Step 2: If vi = v j and ttp = 0, or if S has corrupted Pl, set msgi =
msg j = msgl = ⊥, msgk = vi and go to Step 4.
Step 3: Else : Set msgi = msg j = msgk = msgl = Pl.
Step 4: Send (Output, msgs) to Ps for s ∈ {0,1,2,3}.
Figure 13: 4PC: Ideal functionality for jmp4 primitive
USENIX Association
30th USENIX Security Symposium    2667
servers (Pi,Pj) to jointly generate a(cid:74)·(cid:75)-sharing of value v ∈
Joint Sharing: Protocol Πjsh4 (Fig. 14) enables a pair of
Z2(cid:96) known to both of them. In case of an inconsistency, the
server outside the computation serves as a TTP.
Protocol Πjsh4(Pi,Pj, v)
Preprocessing:
– If (Pi,Pj) = (P1,P2) : P1,P2,P3 sample γv ∈ Z2(cid:96). Servers
locally set [αv]1 = [αv]2 = 0.
– If (Pi,Pj) = (Ps,P0), for s ∈ {1,2} : Servers execute the
preprocessing of Πsh4(Ps, v). Servers locally set γv = 0.
– If (Pi,Pj) = (Ps,P3), for s ∈ {0,1,2} : Servers execute the
preprocessing of Πsh4(Ps, v).
Online:
– If (Pi,Pj) = (P1,P2) : P1,P2 set βv = v and jmp4-send βv + γv
to P0.
– If (Pi,Pj) = (Ps,P0), for s ∈ {1,2,3} : Ps,P0 compute βv = v +
[αv]1 + [αv]2 and jmp4-send βv to Pk, where (k ∈ {1,2})∧ (k (cid:54)=
s).
– If (Pi,Pj) = (Ps,P3), for s ∈ {1,2}: P3,Ps compute βv and βv +
γv. Ps,P3 jmp4-send βv to Pk, where (k ∈ {1,2})∧ (k (cid:54)= s). In
parallel, Ps,P3 jmp4-send βv + γv to P0.
Figure 14: 4PC:(cid:74)·(cid:75)-sharing of a value v ∈ Z2(cid:96) jointly by Pi,Pj
When P3,P0 want to jointly share a value v which is avail-
able in the preprocessing phase, protocol Πjsh4 can be per-
formed with a single element of communication (as opposed
to 2 elements in Fig. 14). P0,P3 can jointly share v as fol-
lows. P0,P3,P1 sample a random r ∈ Z2(cid:96) and set [αv]1 = r.
P0,P3 set [αv]2 = −(r + v) and jmp4-send [αv]2 to P2. This
ther observe that servers can generate a (cid:74)·(cid:75)-sharing of v
is followed by servers locally setting γv = βv = 0. We fur-
non-interactively when v is available with P0,P1,P2. For this,
servers set [αv]1 = [αv]2 = γv = 0 and βv = v. We abuse nota-
tion and use Πjsh4(P0,P1,P2, v) to denote this sharing.
Input Sharing and Output Reconstruction in SOC Set-
ting We extend input sharing and reconstruction in the SOC
setting as follows. To generate(cid:74)·(cid:75)-shares for its input v, U
receives each of the shares [αv]1 , [αv]2, and γv from three out
of the four servers as well as a random value r ∈ Z2(cid:96) sampled
together by P0,P1,P2 and accepts the values that form the
majority. U locally computes u = v + [αv]1 + [αv]2 + γv + r
and sends u to all the servers. Servers then execute a two
round byzantine agreement (BA) [49] to agree on u (or ⊥).
We refer the readers to [49] for the formal details of the agree-
ment protocol. On successful completion of BA, P0 computes
βv + γv from u while P1,P2 compute βv from u locally. For
the reconstruction of a value v, servers send their(cid:74)·(cid:75)-shares
the servers proceed as follows. All servers send their(cid:74)·(cid:75)-share
of v to U, who selects the majority value for each share and
reconstructs the output. At any point, if a TTP is identiﬁed,
of the input to the TTP. TTP picks the majority value for
each share and computes the function output. It then sends
this output to U. U also receives the identity of the TTP from
all servers and accepts the output received from the TTP
forming majority.
Dot Product Given (cid:74)·(cid:75)-shares of two n-sized vectors (cid:126)x,(cid:126)y,
Πdotp4 enables servers to compute(cid:74)z(cid:75) with z =(cid:126)x(cid:12)(cid:126)y. The
protocol is essentially similar to n instances of multiplications
of the form zi = xiyi for i ∈ [n]. But instead of communicating
values corresponding to each of the n instances, servers locally
sum up the shares and communicate a single value. This helps
to obtain a communication cost independent of the size of the
vectors. Details are deferred to the full version [36].
the truncated value vd (right shifted value by, say, d positions).
Dot Product with Truncation Protocol Πdotpt4 (Fig. 15)
Truncation Given the (cid:74)·(cid:75)-sharing of a value v, protocol
Πtrgen4(P ) enables the servers to compute the(cid:74)·(cid:75)-sharing of
For this, given(cid:74)v(cid:75) and a random truncation pair ([r] ,(cid:74)rd(cid:75)), the
value (v− r) is opened, truncated and added to(cid:74)rd(cid:75) to obtain
(cid:74)vd(cid:75). To generate the a random truncation pair, P0,P3,Pj, for
j ∈ {1,2} sample random R j ∈ Z2(cid:96). P0,P3 sets r = R1 + R2
rd and execute Πjsh4(P0,P3, rd) to generate(cid:74)rd(cid:75).
while Pj sets [r] j = R j. Then, P0,P3 locally truncate r to obtain
enables servers to generate(cid:74)·(cid:75)-sharing of the truncated value
of z =(cid:126)x(cid:12)(cid:126)y, denoted as zd, given the(cid:74)·(cid:75)-sharing of n-sized
Protocol Πdotpt4(P ,{(cid:74)xi(cid:75),(cid:74)yi(cid:75)}i∈[n])
{(cid:74)xi(cid:75),(cid:74)yi(cid:75)}i∈[n]).
([r] ,(cid:74)rd(cid:75)). P0 obtains the value r in clear.
γxi ) [αyi ] j + (βyi + γyi ) [αxi ] j) − [r] j and sets (cid:2)(z− r)(cid:63)(cid:3)
– P1,P0 jmp4-send (cid:2)(z− r)(cid:63)(cid:3)
(cid:2)(z− r)(cid:63)(cid:3)
1 +(cid:2)(z− r)(cid:63)(cid:3)
– P1,P2 locally compute (z− r)(cid:63) =(cid:2)(z− r)(cid:63)(cid:3)
Πjsh4(P1,P2, (z− r)d) to generate(cid:74)(z− r)d(cid:75).
– Servers locally compute(cid:74)zd(cid:75) =(cid:74)(z− r)d(cid:75) +(cid:74)rd(cid:75) .
2 and
set (z− r) = (z− r)(cid:63) + ∑n
– P1,P2 locally truncate (z− r) to obtain (z− r)d and execute
Preprocessing :
– Servers execute the preprocessing phase of Πdotp4(P ,
– Servers execute Πtrgen4(P ) to generate the truncation pair
1 to P2 and P2,P0 jmp4-send
Online :
– P0,Pj, for
j ∈ {1,2}, compute
[Ψ] j = −∑n
i=1((βxi +
j =
vectors(cid:126)x and(cid:126)y.
[Ψ] j + [χ] j.
2 to P1.
i=1(βxiβyi ) + ψ.
Figure 15: 4PC: Dot Product Protocol with Truncation
Special protocols Similar to 3PC, we consider the following
special protocols for 4PC – i) Bit Extraction, ii) Bit2A, and
iii) Bit Injection. These are elaborated in the full version
of the paper [36]. Protocols for secure comparison, maxpool,
convolution and matrix multiplication, follow a similar outline
as described for the 3PC case, except that the underlying
primitives used will be based on 4PC (deﬁned in §4).
2668    30th USENIX Security Symposium
USENIX Association