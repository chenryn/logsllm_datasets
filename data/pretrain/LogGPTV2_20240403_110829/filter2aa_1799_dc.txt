### Chapter 10: Management, Diagnostics, and Tracing

#### Service Grouping and Svchost Processes

When a service is started, the existing `SvcHost` process reads the `ServiceDll` parameter from the service’s registry key, enables the new service group SID in its token, and loads the DLL into its process to start the service. Table 10-12 lists the default service groupings on Windows and some of the services registered for each.

**Table 10-12: Major Service Groupings**

| **Service Group** | **Services** | **Notes** |
|-------------------|--------------|-----------|
| **LocalService** | Network Store Interface, Windows Diagnostic Host, Windows Time, COM+ Event System, HTTP Auto-Proxy Service, Software Protection Platform UI Notification, Thread Order Service, LLDT Discovery, SSL, FDP Host, WebClient | Services that run in the local service account and make use of the network on various ports or have no network usage at all (and hence no restrictions). |
| **LocalServiceAndNoImpersonation** | UPnP and SSDP, Smart Card, TPM, Font Cache, Function Discovery, AppID, qWAVE, Windows Connect Now, Media Center Extender, Adaptive Brightness | Services that run in the local service account and make use of the network on a fixed set of ports. Services run with a write-restricted token. |
| **LocalServiceNetworkRestricted** | DHCP, Event Logger, Windows Audio, NetBIOS, Security Center, Parental Controls, HomeGroup Provider | Services that run in the local service account and make use of the network on a fixed set of ports. |
| **LocalServiceNoNetwork** | Diagnostic Policy Engine, Base Filtering Engine, Performance Logging and Alerts, Windows Firewall, WWAN AutoConfig | Services that run in the local service account but make no use of the network at all. Services run with a write-restricted token. |
| **LocalSystemNetworkRestricted** | DWM, WDI System Host, Network Connections, Distributed Link Tracking, Windows Audio Endpoint, Wired/WLAN AutoConfig, Pnp-X, HID Access, User-Mode Driver Framework Service, Superfetch, Portable Device Enumerator, HomeGroup Listener, Tablet Input, Program Compatibility, Offline Files | Services that run in the local system account and make use of the network on a fixed set of ports. |
| **NetworkService** | Cryptographic Services, DHCP Client, Terminal Services, WorkStation, Network Access Protection, NLA, DNS Client, Telephony, Windows Event Collector, WinRM | Services that run in the network service account and make use of the network on various ports (or have no enforced network restrictions). |
| **NetworkServiceAndNoImpersonation** | KTM for DTC | Services that run in the network service account and make use of the network on a fixed set of ports. Services run with a write-restricted token. |
| **NetworkServiceNetworkRestricted** | IPSec Policy Agent | Services that run in the network service account and make use of the network on a fixed set of ports. |

#### Svchost Service Splitting

Running a service in a shared host process saves system resources but has the drawback that a single unhandled error in a service can cause all other services in the host process to be terminated. To address this, Windows 10 Creators Update (RS2) introduced the Svchost Service splitting feature.

When the Service Control Manager (SCM) starts, it reads three values from the registry representing the global commit limits for services (divided into low, medium, and hard caps). These values are used to send "low resources" messages if the system runs under low-memory conditions. The SCM then reads the `Svchost Service split threshold value` from the `HKLM\SYSTEM\CurrentControlSet\Control\SvcHostSplitThresholdInKB` registry value. This value specifies the minimum amount of system physical memory (in KB) needed to enable Svchost Service splitting (the default value is 3.5 GB on client systems and around 3.7 GB on server systems).

The SCM obtains the total system physical memory using the `GlobalMemoryStatusEx` API and compares it with the threshold. If the total physical memory exceeds the threshold, Svchost service splitting is enabled (by setting an internal global variable).

When Svchost service splitting is active, the SCM modifies how it starts the host `Svchost` process for shared services. If service splitting is allowed, even though a service is marked as sharable, it is started using its private hosting process, and its type is changed to `SERVICE_WIN32_OWN_PROCESS`.

Service splitting is allowed if the following conditions are met:
- Svchost Service splitting is globally enabled.
- The service is not marked as critical (a service is marked as critical if its next recovery action specifies to reboot the machine).
- The service host process name is `Svchost.exe`.
- Service splitting is not explicitly disabled for the service through the `SvcHostSplitDisable` registry value in the service control key.

Memory management technologies like Memory Compression and Combining help save system working set, ensuring that even with many new processes, the memory manager keeps the physical pages of the hosting processes shared and consumes minimal system resources.

#### Experiment: Playing with Svchost Service Splitting

If you are using a Windows 10 workstation with 4 GB or more of memory, you may notice multiple `Svchost.exe` process instances running when you open Task Manager. To disable Svchost splitting, follow these steps:

1. Open Task Manager and count the number of `svchost` process instances. On a Windows 10 May 2019 Update (19H1) system, you should see around 80 `Svchost` process instances.
2. Open an administrative PowerShell window and run the following command to count the `svchost` processes:
   ```powershell
   (Get-Process -Name "svchost" | Measure-Object).Count
   ```
   On the sample system, this command returned 85.

3. Open the Registry Editor (`regedit.exe`) and navigate to `HKLM\SYSTEM\CurrentControlSet\Control`.
4. Note the current value of the `SvcHostSplitThresholdInKB` DWORD value.
5. To globally disable Svchost service splitting, modify the registry value by setting its data to 0. (You can do this by double-clicking the registry value and entering 0.)
6. Restart the system and repeat the previous step to count the number of `Svchost` process instances. The system should now run with fewer instances:
   ```powershell
   PS C:\> (Get-Process -Name "svchost" | Measure-Object).Count
   26
   ```

To return to the previous behavior, restore the previous content of the `SvcHostSplitThresholdInKB` registry value. You can also fine-tune the amount of physical memory needed for Svchost splitting by modifying the DWORD value.

#### Service Tags

Using service-hosting processes makes it difficult to account for CPU time and resource usage by specific services because they share the memory address space, handle table, and per-process CPU accounting numbers. Windows implements a service attribute called the service tag, which the SCM generates when a service is created or during system boot. The service tag is stored in the `SubProcessTag` field of the thread environment block (TEB) of each thread and is propagated across all threads created by the main service thread (except those created indirectly by thread-pool APIs).

Several Windows utilities, such as `Netstat.exe`, use undocumented APIs to query service tags and map them to service names. Another tool, `ScTagQuery` from Winsider Seminars & Solutions Inc., can query the SCM for the mappings of every service tag and display them either system-wide or per-process. This helps identify the culprit service in case of high CPU usage.

#### User Services

A service can be launched using the account of a local system user, but this can be a limitation in multiuser environments where a service should be executed with the access token of the currently logged-on user. User Services, available from Windows 10 Creators Update (RS2), allow a service to run with the token of the currently logged-on user. User services can run in their own process or share a process with other services running in the same logged-on user account.

The SCM internally supports two additional type flags: `SERVICE_USER_SERVICE` (64) and `SERVICE_USERSERVICE_INSTANCE` (128), which identify a user service template and a user service instance. When an interactive logon is initiated, the Winlogon finite-state machine creates the new user’s logon session, window station, desktop, and environment, maps the `HKEY_CURRENT_USER` registry hive, and notifies the logon subscribers (LogonUI and User Manager). The User Manager service (Usermgr.dll) calls the SCM via RPC to deliver the `WTS_SESSION_LOGON` session event. The SCM processes the message through the `ScCreateUserServicesForUser` function, which obtains the currently logged-on user’s token and generates the new name of the user instance service.

#### Experiment: Witnessing User Services

To witness user services, you need a Windows 10 machine with a kernel debugger enabled and attached to a host. Follow these steps:

1. Open the Services tool by typing its name in the Cortana search box. The application shows standard services and user services instances, which can be identified by a local unique ID (LUID) attached to their displayed names.
2. Double-click the identified service to see the actual name of the user service instance.
3. If the service is hosted in a shared process, use the Registry Editor to navigate to the service root key of the user service template, which has the same name as the instance but without the LUID.
4. Use Process Explorer or Task Manager to find the correct hosting process ID.
5. Break into the kernel debugger and type the following commands, replacing `<PID>` with the PID of the service’s hosting process:
   ```plaintext
   !process <PID> 1
   ```
   The debugger will display several pieces of information, including the address of the associated security token object.
6. To show the security attributes of the token, use the `!token` command followed by the address of the token object:
   ```plaintext
   !token <TOKEN_ADDRESS>
   ```
   You should confirm that the process is hosting a user service by seeing the `WIN://ScmUserService` security attribute.

This experiment helps you understand the security attributes of a user service's hosting process.