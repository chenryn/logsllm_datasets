shared values is computed locally by each party using its shares,
while multiplication involves multiplying shares locally then ap-
plying interactive re-sharing and interpolation operations to reduce
the degree of the resulting polynomial from 2t to t. This places a
restriction on the value of t and we require that t , we can set
the ﬁeld size to be of the minimum value necessary for computing
For integer arithmetic, users can deﬁne private variables to be
of type char, short, int, long, long long, and custom x-bit
int. The bitlength of standard data types is set according to
the platform on which the program is being translated into secure
implementation, but both standard-size and custom-size data types
are implemented as integers with their bitlength recorded in the
translated code.
To realize private ﬂoating point arithmetic, we use representation
(and corresponding operations) from [7]. In particular, each ﬂoat-
ing point number is represented as a 4-tuple (cid:104)v, p, s, z(cid:105), where v is
an (cid:96)-bit signiﬁcand, p is a k-bit exponent, and s and z are sign and
zero bits, respectively. The user can specify standard types float,
double, and long double as well as custom-length float
with x-bit signiﬁcand and y-bit exponent.
Operations on private data types. We provide support for many
operations on private integer and ﬂoating point numbers. In partic-
ular, we implement integer addition +, subtraction -, multiplication
*, division /, left and right shifts « and », bitwise XOR ˆ, AND &
and OR |, comparisons and equality tests. We also support ﬂoating
point addition, subtraction, multiplication, division, and compar-
isons. The set of supported operations can be easily extended with
additional operations and conversions between selected data types.
With the current implementation, users can perform operations
on strings using arrays of one-byte integers char, but in the future
we plan to provide built-in functions for string manipulation.
Built-in I/O functions. The programmer can specify variables that
should be read from the input using special function smcinput.
The function takes two arguments: the name of the variable to read
and the id of the input party from whom the variable (or shares of
the variable) come. For example, specifying smcinput(x,1) for
private integer x will instruct the compiled program to read shares
of an integer number from the transmission of input party 1. For
private ﬂoating point numbers, shares of four elements of the ﬂoat-
ing point representation will be read. Because the input parties sup-
ply their data ofﬂine, smcinput is used for both private and public
variables which during execution are read from the transmitted ﬁle
of the appropriate input party.
Similarly, smcoutput is used to specify output variables and
the output party who is to learn each of them. That is, including
smcoutput(x,1) for private x will instruct the compiled program
to output shares of x into a ﬁle which at the end of the computation
is sent to output party 1. Both smcinput and smcoutput can be
called anywhere in the program.
Conditional statements and loop constructs. All conditions in
conditional statements can be private, which will allow if-statements
to be evaluated obliviously. The only exception is that in loops
programuserSMCsource−to−sourceSMCcompilerprogramSMCnativecompilerexecutableprogramusercompute nodeconfig fileprogramusercompute nodesuserinputoutputruntime config fileruntime config fileprogramshareinputshareoutpututilityprogramutilityprogramexecutableexecutable816the termination condition must either be public or be evaluated pri-
vately, after which its result is revealed to the parties carrying out
the computation. In other words, the function being evaluated must
be known at the run time. To the best of our knowledge, private
conditions are not supported in most secure computation tools and
in particular are not available in any SMC software based on secret
sharing (i.e., Sharemind or VIFF).
Support for concurrent execution. One of the most important de-
sign decisions that determines performance of compiled secure pro-
tocols is how parallelism is achieved. Because latency of interac-
tive operations dominates performance of multi-party protocols in
this setting, recent literature concentrated on techniques that lower
round complexity of operations. For that reason, it is important to
be able to execute several interactive operations in parallel.
A number of existing tools that adopt the same or similar frame-
works have a variable degree of support for parallel execution of
operations. For example, Sharemind executes all instances of an
operation deﬁned for each element of a (one- or two-dimensional)
array in a batch. SEPIA runs a number of operations in a batch in
each time slot (called round in [14]) using an application-speciﬁc
implementation of parallelism. VIFF provides the most ﬂexible
way of parallel execution, in which an interactive operation is ini-
tiated as soon as its inputs are available. Experience with VIFF,
however, shows that the cost of managing a large number of threads
(many of which are often unnecessary) slows down protocol exe-
cution [25].
We believe that to achieve efﬁcient execution of a broad range of
functionalities, the available options for parallelizing the execution
should not be either too narrow or unnecessarily too ﬂexible. That
is, the parallelism offered by Sharemind and SEPIA will allow for
efﬁcient execution of many functionalities, but can be very limiting
for other applications and operations. The callback mechanism of
VIFF, on the other hand, results in large overheads which can often
be avoided. For these reasons, we support parallel execution of
parts of a program in the ways deﬁned next. Our goal is to provide
enough ﬂexibility to achieve very efﬁcient performance for a broad
range of programs while avoiding unnecessary slowdown due to
managing threads for every elementary operation.
contents and thus the number of loop iterations should be known
or computable without executing instructions contained in the loop
iterations. This implies that only for-loops can be speciﬁed to use
simultaneous execution of loop iterations.
Array operations. As an additional mechanism for improving per-
formance of distributed computation, we provide the ability for the
programmer to specify operations on private vectors (arrays). For
example, the user can specify expression A*B on private arrays A
and B of the same size, which will lead to element-wise multipli-
cation of A and B, i.e., multiplication of each element of A to the
corresponding element of B. Besides the operations on private data
types listed above, we support the inner product computation on
two vectors using syntax A@B, which can be particularly efﬁciently
implemented. Also, the I/O functions smcinput and smcoutput
can be used with array variables to input/output a block of values at
a time, using the third argument to specify the number of elements.
For example, smcinput(A,1,100) reads 100 values into array A
from the data of party 1.
We also provide a way of using portions of multi-dimensional
arrays in (one-dimensional) array operations. This is performed by
specifying the index in each dimension except the last one. For
example, if matrix A is declared to be a two-dimensional array, no-
tation A[i] will refer to the ith row of A (or elements A[i][j] for
all j). This can, for instance, lead to an efﬁcient implementation of
matrix multiplications and other operations.
Enforcement of secure data ﬂow. To ensure that no information
about private values is leaked during program execution, we place
certain restrictions on the data ﬂow that involves both private and
public data. In particular, statements that assign an expression that
contains private values to a public variable are not allowed. This
includes the case when the expression consists of function evalua-
tion with a private return data type. The opposite, however, is true:
a private variable can be assigned a public value, which is subse-
quently converted to shares.
In circumstances when the user intentionally wants to reveal cer-
tain information about a private value, we provide a built-in func-
tion smcopen that reveals the content of a private variable. For
example, if the computation requires that the sign of private x is to
be publicly revealed, the user can write
if (x >= 0) a = 1;
b = smcopen(a);
with private a and public b. This provides a mechanism for in-
tentional declassiﬁcation of information about private values and
ensures that information is not accidentally leaked in an incorrectly
written assignment.
Another restriction is related to enforcing secure data ﬂow when
conditional statements with a private condition are used. In par-
ticular, assignments to public variables within the scope of such
statements are not allowed. This is due to the fact that by observing
the value of a public variable after executing a conditional state-
ment with a private condition, the result of the condition evaluation
can be learned, which leaks information about private values. The
same applies to functions called from the inside of a conditional
statement with a private condition: the function must have no pub-