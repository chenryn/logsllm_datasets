### Optimized Text

#### Configuration Process Modification
The compilation process is often guided by numerous `#ifdef` statements. For instance, functions designed to bridge 32-bit applications with 64-bit kernels are only compiled when the `CONFIG_COMPAT` option is enabled. To include these functions in our analysis, we modified the configuration process for both the Linux and FreeBSD kernels.

For the Linux kernel, we used the built-in `allyesconfig` setting, which effectively enables all `CONFIG_*` macros (over 10,000 items). Similarly, for the FreeBSD kernel, we used the `make LINT` command to output all available options and enable them, thus generating the build configuration file.

#### Compiling Source Code to LLVM IR
Since the Linux kernel is not yet fully compatible with the LLVM toolchain, we followed these steps to compile it:
1. We first built the kernel using GCC and collected the build log.
2. We parsed the log to extract compilation flags (e.g., `-I`, `-D`) for each source file and then used Clang to recompile the files to LLVM IR.
3. We utilized the linking information from the build log and used `llvm-link` to merge the generated bitcode files into a single module. Files incompatible with LLVM failed at step 2, but this was rare (only eight out of 15,912 files in Linux 4.13.2).

For the FreeBSD kernel, although it can be successfully compiled with Clang, adding the `-emit-llvm` flag directly would cause the compilation process to abort because it checks if the generated object files are ELF files. Therefore, we followed a similar process as with the Linux kernel: compiling normally, parsing the build log, recompiling the files to IR, and merging them into a single module.

#### Findings
In this section, we present DEADLINE's performance in detecting multi-reads and double-fetch bugs in the Linux and FreeBSD kernels. Table I summarizes the number of multi-reads detected and how many of them are actual double-fetch bugs.

##### Detecting Multi-Reads
This experiment was conducted on version 4.13.3 of the Linux kernel and version 11.1 (July 2017 release) of the FreeBSD kernel. As shown in Table I, DEADLINE reported 1,104 multi-reads in the Linux kernel and 101 multi-reads in the FreeBSD kernel. The smaller codebase of FreeBSD explains the lower number of multi-reads.

Beyond device drivers, which have been studied in previous works [9], [10], many other kernel components, including core modules (e.g., `ipc`, `sched`), may also issue multiple fetches from userspace, some of which can be buggy.

Given the scale of 1,104 multi-reads, manual verification is impractical, especially considering the frequent kernel updates. This finding supports the need for formal definitions to determine when a multi-read becomes a double-fetch bug and the necessity of automated vetting to reduce manual effort. This motivated the development of DEADLINE.

##### Detecting and Reporting Double-Fetch Bugs
**Confirming Previously Reported Bugs:**
We first demonstrate that DEADLINE is at least as effective as prior works in detecting double-fetch bugs. Specifically, DEADLINE was run against Linux kernel 4.5, the same version used by Wang et al. [10]. Out of the five bugs reported in [10], DEADLINE found four: `vop_ioctl`, `audit_log_single_execve_arg`, `ec_device_ioctl_xcmd`, and `ioctl_send_fib`. DEADLINE could not detect `sclp_ctl_ioctl_sccb` because it compiles the kernel for the x86 architecture, while `sclp_ctl.c` is only compilable for the IBM S/390 architecture. Detection on other architectures is left for future work.

**Finding New Bugs:**
A more important task for DEADLINE is to find new bugs. This experiment was conducted on versions 4.12.7 to 4.13.3 of the Linux kernel and version 11.1 (July 2017 release) of the FreeBSD kernel. DEADLINE detected 23 double-fetch bugs in Linux and one bug in FreeBSD. We manually verified all the bugs and reported them to the kernel maintainers. The full list of detected double-fetch bugs is shown in Table II. At the time of writing:
- Nine bugs have been fixed with the patches we provided.
- Four bugs are acknowledged, and we are working with the kernel maintainers to finalize the patches.
- Nine bugs are pending review, with no confirmation received.
- Two bugs are considered "won't fix" because the maintainers do not believe they are exploitable.

In summary, the number of reported bugs is significantly higher than in prior works (six in Linux and zero in FreeBSD). More importantly, while DEADLINE found significantly more multi-reads, it further automatically identifies real double-fetch bugs, which would otherwise be beyond the scope of manual verification. Additionally, we anticipate that 14 out of the 24 bugs DEADLINE found could never be detected by prior works due to the complexity of the bugs, such as falling outside empirical bug patterns, requiring inter-procedural analysis, loop involvement, and being guarded by `#ifdef` macros.

**Bugs Marked as "Won't Fix":**
We pay special attention to the two bugs rejected for fixing by the developers, as they represent potential false alarms by DEADLINE and highlight its limitations.

In the case of `uhid_event_from_user`, the developers acknowledged that a race condition can occur in userspace but do not believe it can cause serious harm. One maintainer stated, "With current code, the worst-case scenario is someone shortcutting the compat-conversion by setting `UHID_CREATE` after `uhid_event_from_user()` copied it. However, this does no harm. If user-space wants to shortcut the conversion, let them do so..."

In the case of `ll_copy_user_md`, DEADLINE falsely reports it due to an assumption about an enclosing function. By constructing execution paths within the enclosing function, DEADLINE implicitly assumes that if there is an overlapped fetch, careful developers should finish checking that doubly-fetched values are either the same or subject to the same constraints. In this case, the checking should be `ll_lov_user_md_size(*kbuf) == lum_size` right after the second fetch. Otherwise, once the function returns, the developers lose the opportunity to re-assert this relation. However, this implicit assumption does not hold in this case, as the derived value of the first fetch, `lum_size`, is passed out of the function as a return value, and the result of the second fetch, `kbuf`, is passed out by pointer. In other words, even outside the enclosing function, the relation between these two fetches can still be re-checked.

**Bug Distribution:**
Consistent with prior research [9], [10], most double-fetch bugs are found in driver code, indicating that drivers remain the most error-prone part of the kernel. This aligns with the distribution of multi-reads, where the majority are located in drivers. However, file systems, networking components, and even the core kernel may also be subject to double-fetch bugs.

**Detection Time:**
On a machine with an Intel Xeon E5-1620 CPU (four cores) and 64GB RAM running 64-bit Ubuntu 16.04.3 LTS, DEADLINE completes detection in four hours for the Linux kernel and one hour for the FreeBSD kernel. Approximately 20% of the execution time is spent on finding multi-reads with static analysis, and 80% is spent on symbolic checking of these multi-reads.

### Exploitation
Exploiting double-fetch bugs can be profitable but also challenging. Prior works [9], [10] have identified several ways to exploit such bugs in the kernel.

**Leaking Information:**
This type of exploitation typically occurs in processes that transfer data both to and from userspace, i.e., in a request-response situation. For example, in the case of CVE-2016-6130, the bug is similar to the one in `perf_copy_attr` (Figure 4), where the first fetch sanity-checks the size value, while the second fetch assumes the size does not change and omits the check. When the response is copied back to userspace based on the unchecked size value, a large chunk of kernel memory is copied, leading to a kernel information leak.

**Bypassing Restrictions:**
This type of exploitation typically occurs when the kernel wants to early reject a request from userspace. 

### Bug Distribution
Table II shows the distribution of detected double-fetch bugs, their status, and any complications involved.

| # | File | Function | Complication | Status |
|---|------|----------|--------------|--------|
| 1 | block/scsi_ioctl.c | sg_scsi_ioctl | Acknowledged | Submitted |
| 2 | drivers/acpi/custom_method.c | cm_write | Macro expansion | Won’t Fix |
| 3 | drivers/hid/uhid.c | uhid_event_from_user | None | Patched |
| 4 | drivers/isdn/i4l/isdn_ppp.c | isdn_ppp_write | None | Patched |
| 5 | drivers/message/fusion/mptctl.c | __mptctl_ioctl | None | Submitted |
| 6 | drivers/nvdimm/bus.c | __nd_ioctl (1) | None | Submitted |
| 7 | drivers/nvdimm/bus.c | __nd_ioctl (2) | None | Submitted |
| 8 | drivers/scsi/aacraid/commctrl.c | aac_send_raw_srb | None | Submitted |
| 9 | drivers/scsi/dpt_i2o.c | adpt_i2o_passthru | None | Submitted |
| 10 | drivers/scsi/megaraid/megaraid.c | mega_m_to_n | None | Submitted |
| 11 | drivers/scsi/megaraid/megaraid_mm.c | mraid_mm_ioctl | None | Submitted |
| 12 | drivers/scsi/mpt3sas/mpt3sas_ctl.c | _ctl_getiocinfo | None | Submitted |
| 13 | drivers/staging/lustre/lustre/llite/llite_lib.c | ll_copy_user_md | None | Won’t Fix |
| 14 | drivers/tty/vt/vt.c | con_font_set | None | Submitted |
| 15 | drivers/vhost/vhost.c | vhost_vring_ioctl | None | Submitted |
| 16 | fs/coda/psdev.c | coda_psdev_write | None | Submitted |
| 17 | fs/nfsd/nfs4recover.c | cld_pipe_downcall | None | Submitted |
| 18 | kernel/events/core.c | perf_copy_attr | None | Submitted |
| 19 | kernel/sched/core.c | sched_copy_attr | None | Submitted |
| 20 | net/compat.c | cmsghdr_from_user_compat_to_kern | None | Submitted |
| 21 | net/tls/tls_main.c | do_tls_setsockopt_tx | None | Submitted |
| 22 | net/wireless/wext-core.c | ioctl_standard_iw_point | None | Submitted |
| 23 | sound/pci/asihpi/hpioctl.c | asihpi_hpi_ioctl | None | Submitted |
| 24 | netsmb/smb_subr.c | smb_strdupin | None | Submitted |

This table provides a detailed overview of the bugs, their locations, and their current status.