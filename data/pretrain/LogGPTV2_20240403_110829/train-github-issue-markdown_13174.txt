### Issue Type
- Bug Report

### Component Name
- `ec2_group`

### Ansible Version
- **Version:** 2.2.1.0
- **Configuration File:** `/etc/ansible/ansible.cfg`
- **Module Search Path:** Default (no overrides)
- **Note:** Code review suggests that later versions are likely also affected.

### Configuration
- Not applicable

### Operating System / Environment
- Not applicable

### Summary
A playbook using the `ec2_group` module with a rule whose `cidr_ip` value has any host bits set will execute successfully at most once, but will fail to execute thereafter.

### Steps to Reproduce
```yaml
- hosts: localhost
  tasks:
    - name: Test case
      ec2_group:
        description: Test SG
        name: Test SG
        region: us-east-1
        rules:
          - proto: all
            cidr_ip: '10.0.0.1/8'
        rules_egress:
          - proto: all
            cidr_ip: '0.0.0.0/0'
        vpc_id: FIXME
      connection: local
      become: false
      gather_facts: false
```
**Note:** Replace `vpc_id` and possibly `region` as needed.

### Expected Results
Ideally, the rule's validation should fail every time. Alternatively, the CIDR could be sanitized by Ansible at runtime before it compares the configured rules with the ones currently active in AWS.

### Actual Results
- **Initial Run:** The rule is created on the security group, but the CIDR is masked so that only the network bits are set (e.g., 10.0.0.0/8). This means what shows up in AWS is slightly different from what the user requested, but it works for the first time.
- **Subsequent Runs:** All subsequent runs will fail with the following error:

  ```plaintext
  Traceback (most recent call last):
    File "/tmp/ansible_y6BGXK/ansible_module_ec2_group.py", line 478, in <module>
      main()
    File "/tmp/ansible_y6BGXK/ansible_module_ec2_group.py", line 373, in main
      group.authorize(rule['proto'], rule['from_port'], rule['to_port'], thisip, grantGroup)
    File "/usr/lib/python2.7/dist-packages/boto/ec2/securitygroup.py", line 203, in authorize
      dry_run=dry_run)
    File "/usr/lib/python2.7/dist-packages/boto/ec2/connection.py", line 3192, in authorize_security_group
      params, verb='POST')
    File "/usr/lib/python2.7/dist-packages/boto/connection.py", line 1223, in get_status
      raise self.ResponseError(response.status, response.reason, body)
  boto.exception.EC2ResponseError: EC2ResponseError: 400 Bad Request
  InvalidPermission.Duplicate - The specified rule "peer: 10.0.0.0/8, ALL, ALLOW" already exists. 963c0e1b-bcdb-4ab3-815a-89c7ce1b2204

  fatal: [localhost]: FAILED! => {
      "changed": false,
      "failed": true,
      "invocation": {
          "module_name": "ec2_group"
      },
      "module_stderr": "Traceback (most recent call last):\n  File \"/tmp/ansible_y6BGXK/ansible_module_ec2_group.py\", line 478, in <module>\n    main()\n  File \"/tmp/ansible_y6BGXK/ansible_module_ec2_group.py\", line 373, in main\n    group.authorize(rule['proto'], rule['from_port'], rule['to_port'], thisip, grantGroup)\n  File \"/usr/lib/python2.7/dist-packages/boto/ec2/securitygroup.py\", line 203, in authorize\n    dry_run=dry_run)\n  File \"/usr/lib/python2.7/dist-packages/boto/ec2/connection.py\", line 3192, in authorize_security_group\n    params, verb='POST')\n  File \"/usr/lib/python2.7/dist-packages/boto/connection.py\", line 1223, in get_status\n    raise self.ResponseError(response.status, response.reason, body)\nboto.exception.EC2ResponseError: EC2ResponseError: 400 Bad Request\n\nInvalidPermission.Duplicate - The specified rule \"peer: 10.0.0.0/8, ALL, ALLOW\" already exists. 963c0e1b-bcdb-4ab3-815a-89c7ce1b2204\n",
      "module_stdout": "",
      "msg": "MODULE FAILURE"
  }
  ```

This issue arises because the `cidr_ip` value with host bits set is not properly handled, leading to a mismatch between the configured and actual rules in AWS.