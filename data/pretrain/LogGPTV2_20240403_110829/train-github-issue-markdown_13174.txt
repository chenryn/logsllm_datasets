##### ISSUE TYPE
  * Bug Report
##### COMPONENT NAME
ec2_group
##### ANSIBLE VERSION
    ansible 2.2.1.0
      config file = /etc/ansible/ansible.cfg
      configured module search path = Default w/o overrides
(but code review suggests that later versions likely also susceptible)
##### CONFIGURATION
n/a
##### OS / ENVIRONMENT
n/a
##### SUMMARY
A playbook using an `ec2_group` module with a rule whose `cidr_ip` value has
any host bits set will execute successfully at most once, but will fail to
execute thereafter.
##### STEPS TO REPRODUCE
    - hosts: localhost
      tasks:
      - name: Test case
        ec2_group:
          description: Test SG
          name: Test SG
          region: us-east-1
          rules: [{proto: all, cidr_ip: '10.0.0.1/8'}]
          rules_egress: [{proto: all, cidr_ip: '0.0.0.0/0'}]
          vpc_id: FIXME
      connection: local
      become: false
      gather_facts: false
(replace `vpc_id`, and maybe `region`, as applicable)
##### EXPECTED RESULTS
_Preferably_ the rule's validation should fail entirely every time.
Alternatively, the CIDR could be sanitized by Ansible at run-time _before_ it
compares the configured rules with the ones currently active in AWS.
##### ACTUAL RESULTS
Initial run executes fine; the rule is created on the security group, however
the CIDR is masked so that only the network bits are set (ie 10.0.0.0/8). Thus
what shows up in AWS is slightly different than what the user requested, but
it works (at least for the first time).
Subsequent runs, however, will all fail with this error:
    Traceback (most recent call last):
      File "/tmp/ansible_y6BGXK/ansible_module_ec2_group.py", line 478, in 
        main()
      File "/tmp/ansible_y6BGXK/ansible_module_ec2_group.py", line 373, in main
        group.authorize(rule['proto'], rule['from_port'], rule['to_port'], thisip, grantGroup)
      File "/usr/lib/python2.7/dist-packages/boto/ec2/securitygroup.py", line 203, in authorize
        dry_run=dry_run)
      File "/usr/lib/python2.7/dist-packages/boto/ec2/connection.py", line 3192, in authorize_security_group
        params, verb='POST')
      File "/usr/lib/python2.7/dist-packages/boto/connection.py", line 1223, in get_status
        raise self.ResponseError(response.status, response.reason, body)
    boto.exception.EC2ResponseError: EC2ResponseError: 400 Bad Request
    InvalidPermission.Duplicatethe specified rule "peer: 10.0.0.0/8, ALL, ALLOW" already exists963c0e1b-bcdb-4ab3-815a-89c7ce1b2204
    fatal: [localhost]: FAILED! => {
        "changed": false, 
        "failed": true, 
        "invocation": {
            "module_name": "ec2_group"
        }, 
        "module_stderr": "Traceback (most recent call last):\n  File \"/tmp/ansible_y6BGXK/ansible_module_ec2_group.py\", line 478, in \n    main()\n  File \"/tmp/ansible_y6BGXK/ansible_module_ec2_group.py\", line 373, in main\n    group.authorize(rule['proto'], rule['from_port'], rule['to_port'], thisip, grantGroup)\n  File \"/usr/lib/python2.7/dist-packages/boto/ec2/securitygroup.py\", line 203, in authorize\n    dry_run=dry_run)\n  File \"/usr/lib/python2.7/dist-packages/boto/ec2/connection.py\", line 3192, in authorize_security_group\n    params, verb='POST')\n  File \"/usr/lib/python2.7/dist-packages/boto/connection.py\", line 1223, in get_status\n    raise self.ResponseError(response.status, response.reason, body)\nboto.exception.EC2ResponseError: EC2ResponseError: 400 Bad Request\n\nInvalidPermission.Duplicatethe specified rule \"peer: 10.0.0.0/8, ALL, ALLOW\" already exists963c0e1b-bcdb-4ab3-815a-89c7ce1b2204\n", 
        "module_stdout": "", 
        "msg": "MODULE FAILURE"
    }