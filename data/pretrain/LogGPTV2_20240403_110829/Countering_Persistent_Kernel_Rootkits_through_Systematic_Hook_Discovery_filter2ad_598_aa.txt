title:Countering Persistent Kernel Rootkits through Systematic Hook Discovery
author:Zhi Wang and
Xuxian Jiang and
Weidong Cui and
Xinyuan Wang
Countering Persistent Kernel Rootkits through
Systematic Hook Discovery
Zhi Wang1, Xuxian Jiang1, Weidong Cui2, and Xinyuan Wang3
1 North Carolina State University
2 Microsoft Research
3 George Mason University
Abstract. Kernel rootkits, as one of the most elusive types of malware, pose
signiﬁcant challenges for investigation and defense. Among the most notable are
persistent kernel rootkits, a special type of kernel rootkits that implant persistent
kernel hooks to tamper with the kernel execution to hide their presence. To defend
against them, an effective approach is to ﬁrst identify those kernel hooks and then
protect them from being manipulated by these rootkits. In this paper, we focus on
the ﬁrst step by proposing a systematic approach to identify those kernel hooks.
Our approach is based on two key observations: First, rootkits by design will
attempt to hide its presence from all running rootkit-detection software includ-
ing various system utility programs (e.g., ps and ls). Second, to manipulate OS
kernel control-ﬂows, persistent kernel rootkits by their nature will implant kernel
hooks on the corresponding kernel-side execution paths invoked by the security
programs. In other words, for any persistent kernel rootkit, either it is detectable
by a security program or it has to tamper with one of the kernel hooks on the
corresponding kernel-side execution path(s) of the security program. As a result,
given an authentic security program, we only need to monitor and analyze its
kernel-side execution paths to identify the related set of kernel hooks that could be
potentially hijacked for evasion. We have built a proof-of-concept system called
HookMap and evaluated it with a number of Linux utility programs such as ls, ps,
and netstat in RedHat Fedora Core 5. Our system found that there exist 35 kernel
hooks in the kernel-side execution path of ls that can be potentially hijacked for
manipulation (e.g., for hiding ﬁles). Similarly, there are 85 kernel hooks for ps
and 51 kernel hooks for netstat, which can be respectively hooked for hiding
processes and network activities. A manual analysis of eight real-world rootkits
shows that our identiﬁed kernel hooks cover all those used in them.
1 Introduction
Rootkits have been increasingly adopted by general malware or intruders to hide their
presence on or prolong their control of compromised machines. In particular, kernel
rootkits, with the unique capability of directly subverting the victim operating system
(OS) kernel, have been frequently leveraged to expand the basic OS functionalities
with additional (illicit) ones, such as providing unauthorized system backdoor access,
gathering personal information (e.g., user keystrokes), escalating the privilege of a
malicious process, as well as neutralizing defense mechanisms on the target system.
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 21–38, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
22
Z. Wang et al
In this paper, we focus on a special type of kernel rootkits called persistent ker-
nel rootkits. Instead of referring to those rootkits that are stored as persistent disk
ﬁles and will survive machine reboots, the notion of persistent kernel rootkits here
(inherited from [14]) represents those rootkits that will make persistent modiﬁcations
to run-time OS kernel control-ﬂow, so that normal kernel execution will be somehow
hijacked to provide illicit rootkit functionality1. For example, many existing rootkits
[1,2] will modify the system call table to hijack the kernel-level control ﬂow. This type
of rootkits is of special interest to us for a number of reasons. First, a recent survey
[14] of both Windows and Linux kernel rootkits shows that 96% of them are persistent
kernel rootkits and they will make persistent control-ﬂow modiﬁcations. Second, by
running inside the OS kernel, these rootkits have the highest privilege on the system,
making them very hard to be detected or removed. In fact, a recent report [3] shows
that, once a system is infected by these rootkits, the best way to recover from them
is to re-install the OS image. Third, by directly making control-ﬂow modiﬁcations,
persistent kernel rootkits provide a convenient way to add a rich set of malicious rootkit
functionalities.
On the defensive side, one essential step to effectively defending against persistent
kernel rootkits is to identify those hooking points (or kernel hooks) that are used by
rootkits to regain kernel execution control and then inﬂict all sorts of manipulations
to cloak their presence. The identiﬁcation of these kernel hooks is useful for not only
understanding the hooking mechanism [23] used by rootkits, but also providing better
protection of kernel integrity [10,14,20]. For example, existing anti-rootkit tools such as
[8,16,17] all can be beneﬁted because they require the prior knowledge of those kernel
hooks to detect the rootkit presence.
To this end, a number of approaches [14,23] have been proposed. For example,
SBCFI [14] analyzes the Linux kernel source code and builds an approximation of
kernel control-ﬂow graph that will be followed at run-time by a legitimate kernel. Un-
fortunately, due to the lack of dynamic run-time information, it is only able to achieve
an approximation of kernel control-ﬂow graph. From another perspective, HookFinder
[23] is developed to automatically analyze a given malware sample and identify those
hooks that are being used by the provided malware. More speciﬁcally, HookFinder
considers any changes made by the malware as tainted and recognizes a speciﬁc change
as a hooking point if it eventually redirects the execution control to the tainted attack
code. Though effective in identifying speciﬁc hooks used by the malware, it cannot
discover other hooks that can be equally hijacked but are not being used by the malware.
In this paper, we present a systematic approach that, given a rootkit-detection pro-
gram, discovers those related kernel hooks that could be potentially used by persistent
kernel rootkits to evade from it. Our approach is motivated by the following observation:
To hide its presence, a persistent kernel rootkit by design will hide from the given
security program and the hiding is achieved by implanting kernel hooks in a number
of strategic locations within the kernel-side execution paths of the security program.
In other words, for any persistent kernel rootkit, either it is detectable by the security
program or it has to tamper with one of the kernel hooks. Therefore, for the purpose of
1 For other types of kernel rootkits that may attack kernel data, they are not the focus of this
paper and we plan to explore them as future work.
Countering Persistent Kernel Rootkits through Systematic Hook Discovery
23
detecting persistent kernel rootkits, it is sufﬁcient to just identify all kernel hooks in the
kernel-side execution paths of a given rootkit-detection program.
To identify hooks in the kernel-side execution of a program, we face three main
challenges: (1) accurately identifying the right kernel-side execution path for monitor-
ing; (2) obtaining the relevant run-time context information (e.g., the ongoing system
call and speciﬁc kernel functions) with respect to the identiﬁed execution path; (3)
uncovering the kernel hooks in the execution path and extracting associated semantic
deﬁnition. To effectively address the ﬁrst two challenges, we developed a context-aware
kernel execution monitor and the details will be described in Section 3.1. For the third
one, we have built a kernel hook identiﬁer (Section 3.2) that will ﬁrst locate the run-
time virtual address of an uncovered kernel hook and then perform OS-aware semantics
resolution to reveal a meaningful deﬁnition of the related kernel object or variable.
We have developed a prototype called HookMap on top of a software-based QEMU
virtual machine implementation [6]. It is appropriate for two main reasons: First,
software-based virtualization allows to conveniently support commodity OSes as guest
virtual machines (VMs). And more importantly, given a selected execution path, the
virtualization layer can be extended to provide the unique capability in instrumenting
and recording its execution without affecting its functionality. Second, since we are
dealing with a legitimate OS kernel in a clean system, not with a rootkit sample that may
detect the VM environment and alter its behavior accordingly, the use of virtualization
software will not affect the results in identifying kernel hooks.
To evaluate the effectiveness of our approach, we ran a default installation of Red-
Hat Fedora Core 5 (with Linux kernel 2.6.15) in our system. Instead of using any
commercial rootkit-detection software, we chose to test with three utility programs,
ls, ps and netstat since they are often attacked by rootkits to hide ﬁles, processes or
network connections. By monitoring their kernel-side executions, our system was able
to accurately identify their execution contexts, discover all encountered kernel hooks,
and then resolve their semantic deﬁnitions. In particular, our system identiﬁed 35, 85,
and 51 kernel hooks, for ls, ps and netstat, respectively. To empirically evaluate the
completeness of identiﬁed kernel hooks, we performed a manual analysis of eight real-
world kernel rootkits and found that the kernel hooks employed by these rootkits are
only a small subset of our identiﬁed hooks.
The rest of the paper is structured as follows: Section 2 introduces the background
on rootkit hooking mechanisms. Section 3 gives an overview of our approach, followed
by the description of HookMap implementation in Section 4. Section 5 presents the
experimental results and Section 6 discusses some limitations of the proposed approach.
Finally, Section 7 surveys related work and Section 8 concludes the paper.
2 Background
In this section, we introduce the hooking mechanisms that are being used by persistent
kernel rootkits and deﬁne a number of terms that will be used throughout the paper.
There exist two main types of kernel hooks: code hooks and data hooks. To implant
a code hook, a kernel rootkit typically modiﬁes the kernel text so that the execution
of the affected text will be directly hijacked. However, since the kernel text section is
24
Z. Wang et al
Applications
#define REPLACE(x) o_##x = sys_call_table[__NR_##x];\
                        sys_call_table[__NR_##x] = n_##x
 int $0x80
Userland
Kernel
ENTRY(system_call)
        pushl %eax                           # eax: syscall number
        SAVE_ALL
        ...
        call *0xc030f960(,%eax,4) # call sys_call_table[eax]
        ...
A HAP instruction
int adore_init(void)
{
        ...
        REPLACE(write);
        REPLACE(getdents);
        REPLACE(kill);
        REPLACE(fork);
        REPLACE(clone);
        REPLACE(close);
        REPLACE(open);
        REPLACE(stat);
        REPLACE(lstat);
        ...
}
module_init(adore_init);
(a) The system call dispatcher on Linux
(b) The Linux adore rootkit
Fig. 1. A HAP instruction example inside the Linux system call dispatcher – the associated kernel
data hooks have been attacked by various rootkits, including the Linux adore rootkit [1]
usually static and can be marked as read-only (or not writable), the way to implant
the code hook can be easily detected. Because of that, rootkit authors are now more
inclined to implant data hooks at a number of strategic memory locations in the kernel
space. Data hooks are usually a part of kernel data that are interpreted as the destination
addresses in control-ﬂow transition instructions such as call and jmp. A typical example
of kernel data hook is the system call table that contains the addresses to a number of
speciﬁc system call service routines (e.g., sys open). In addition, many data hooks may
contain dynamic content as they are mainly used to hold the run-time addresses of
kernel functions and can be later updated because of the loading or unloading of kernel
modules. For ease of presentation, we refer to the control-ﬂow transition instructions
(i.e., call or conditional or un-conditional jumps) whose destination addresses are not
hard-coded constants as hook attach points (HAPs).
In Figure 1, we show an HAP example with associated kernel data hooks, i.e.,
the system call table, which is commonly attacked by kernel rootkits. In particular,
Figure 1(a) shows the normal system call dispatcher on Linux while Figure 1(b) con-
tains the code snippet of a Linux rootkit – adore [1]. From the control-ﬂow transfer
instruction – call *0xc030f960(,%eax,4)2 in Figure 1(a), we can tell the existence of
a hook attach point inside the system call dispatcher. In addition, Figure 1(b) reveals
that the adore rootkit will replace a number of system call table entries (as data hooks)
so that it can intervene and manipulate the execution of those replaced system calls.
For instance, the code statement REPLACE(write) rewrites the system call table en-
try sys call table[4] to intercept the sys write routine before its execution. The corre-
sponding run-time memory location 0xc030f970 and the associated semantic deﬁnition
of sys call table[4] will be identiﬁed as a data hook. More speciﬁcally, the memory
location 0xc030f970 is calculated as 0xc030f960 + %eax × 4 where 0xc030f960
is the base address of system call table and %eax = 4 is the actual number for the
speciﬁc sys write system call. We defer an in-depth analysis of this particular rootkit in
Section 5.2.
2 This instruction is in the standard AT&T assembly syntax, meaning that it will transfer its
execution to another memory location pointed to by 0xc030f 960 + %eax × 4.
Countering Persistent Kernel Rootkits through Systematic Hook Discovery
25
in the system call handler. For
Meanwhile, as mentioned earlier, there are a number of rootkits that will replace spe-
ciﬁc instructions (as code hooks)
instance,
the SucKit [19] rootkit will prepare its own version of the system call table and then
change the dispatcher so that it will invoke system call routines populated in its own
system call table. Using Figure 1(a) as an example, the rootkit will modify the control-
ﬂow transfer instruction or more speciﬁcally the base address of the system call table
0xc030f960 to point to a rootkit-controlled system call table. Considering that (1)
implanting a code hook will inﬂict kernel code modiﬁcations, which can be easily
detected, and (2) every kernel instruction could be potentially overwritten for code hook
purposes, we in this paper focus on the identiﬁcation of kernel data hooks. Without
ambiguity, we use the term kernel hooks to represent kernel data hooks throughout the
paper.
Finally, we point out that kernel hooks are elusive to identify because they can be
widely scattered across the kernel space and rootkit authors keep surprising us in using
new kernel hooks for rootkit purposes [7,18]. In fact, recent research results [23] show
that some stealth rootkits use previously unknown kernel hooks to evade all existing
security programs for rootkit detection. In this paper, our goal is to systematically
discover all kernel hooks that can be used by persistent kernel rootkits to tamper with
and thus hide from a given security program.
3 System Design
The intuition behind our approach is straightforward but effective: a rootkit by nature
is programmed to hide itself especially from various security programs including those
widely-used system utility programs such as ps, ls, and netstat. As such for an infected
OS kernel, the provided kernel service (e.g., handling a particular system call) to any
request from these security software is likely manipulated. The manipulation typically
comes from the installation of kernel hooks at strategic locations somewhere within
the corresponding kernel-side execution path of these security software. Based on this
insight, if we can develop a system to comprehensively monitor the kernel-side exe-
cution of the same set of security programs within a clean system, we can use it to
exhaustively uncover all kernel hooks related to the execution path being monitored.
Figure 2 shows an architectural overview of our system with two main components:
context-aware execution monitor and kernel hook identiﬁer. In the following, we will
describe these two components in detail.
3.1 Context-Aware Execution Monitor
As mentioned earlier, our system is built on top of an open-source virtual machine
implementation, which brings the convenient support of commodity OSes as guest
VMs. In addition, for a running VM, the context-aware execution monitor is further
designed to monitor the internal process events including various system calls made by
running processes. As suggested by the aforementioned insight, we need to only capture
those kernel events related to security software that is running inside the VM. Note that
the main purpose of monitoring these events is to understand the right execution context
inside the kernel (e.g., “which process is making the system call?”). With that, we can
26
Z. Wang et al
anti−rootkit software
system utilities
(ps, ls, netstat)
e
n
i
h
c
a
m
l
a
u
t