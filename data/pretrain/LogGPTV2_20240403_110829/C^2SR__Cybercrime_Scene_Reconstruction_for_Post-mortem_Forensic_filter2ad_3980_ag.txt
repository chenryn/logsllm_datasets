### Implementation of Execution Restrictions During Recording

During the recording process, various restrictions are imposed on the execution to ensure accurate and reproducible results. Firstly, only one thread is executed at a time, which significantly slows down the recording process. More importantly, this restriction can lead to a substantially different runtime execution. For example, with RR's recorder, many concurrency bugs may disappear due to the single-threaded execution. In contrast, C2SR does not impose this restriction but still struggles to reproduce concurrency bugs effectively.

Secondly, RR interferes with context switching by performing preemptive context switching. This means that an execution under RR’s recorder may exhibit different context switches compared to the original execution without the recorder. C2SR, on the other hand, does not interfere with context switching, maintaining the original execution behavior.

Thirdly, RR uses `ptrace` to implement various hooks, while C2SR hooks libraries, which is faster. As reported in Section V, C2SR’s recording overhead is much lower than RR’s, allowing C2SR’s recorder to capture executions that are closer to the original executions.

### Robustness

C2SR’s recording capabilities are entirely implemented as a library, whereas RR leverages more robust infrastructures such as `ptrace`. If program code is corrupted during recording and reconstruction, C2SR may be compromised and fail, while RR would remain robust.

### Comparison with Other Record-and-Replay Techniques

We also compare C2SR with other existing record-and-replay techniques [80], [5], [39], [70], [27], [87], [91], [21], [93], [52], [91], [53], [17], [67], [84], [28], [42], [43], [44], [71], [13], [16], [7], [66], [13].

#### Recording and Replay Overhead

For recording overhead, most techniques, except for fine-grained record-and-replay techniques [80], [5], [39], [70], have low overhead (e.g., less than 10%), similar to C2SR. For replay, C2SR’s execution reconstruction is comparable or faster than existing techniques if it does not need to retry the reconstruction due to timeline projection adjustments (Section IV-E). However, as shown in Table VII, C2SR often requires multiple retrials to reconstruct the execution, leading to higher replay overhead. For instance, C2SR had to repeat 14 times to reconstruct the execution of Firefox in Table VII, resulting in 14 times the replay overhead compared to a typical system call replay technique [27], [87], [91], [21]. Note that replay acceleration techniques [93], [52], [91], [53] and browser-specific approaches [71], [13], [16], [7], [66], [13] can replay faster than C2SR, although they are often not effective in reconstructing attack delivery processes.

#### Interactable Replay of Exploit Delivery Process

Browser-specific approaches [71], [13], [16], [7], [66], [13] can provide interactable replay capabilities. However, most of them [13], [16], [7], [66], [13] aim to replay high-level web application behaviors such as mouse events and keyboard events. Unfortunately, they cannot reproduce exploit delivery processes, which often require replaying low-level system call events. [71] replays lower-level events than others, making it capable of recording and replaying some exploit delivery processes, but it requires significant changes to browser internals.

### Other Related Works

#### Network Provenance Systems

Network provenance techniques [104], [14], [103], [94] track network traffic between hosts in the same network environment to identify causal relationships across multiple hosts. C2SR is complementary to these techniques, as they can be used together to fully understand the details of cyber attacks across multiple hosts.

#### Taint Analysis

Taint analysis techniques [75], [102], [18], [47], [101] track information flow from a source to a sink. Decoupled taint analysis techniques [41], [67], [68], [84] were developed to improve runtime performance by decoupling the target process from expensive taint analysis procedures using spare cores for taint tracking.

#### Additional Forensic Techniques

Graph-based forensics analysis techniques [49], [35], [50], [54], [51], [65], [69], [10], [17], [67], [84], [28], [42], [43] focus on identifying causal relations but do not allow detailed examination of the execution. Efforts to reduce the space overhead of provenance data [99], [38], [55], [64] are orthogonal to C2SR and can be used to further reduce the execution trace. Recently, novel provenance inquiry techniques [59], [33], [36], [81], [98] have been proposed for easier and timely investigations of advanced attacks.

### Conclusion

We propose C2SR, a novel technique for effective cybercrime scene reconstruction by recreating an attack delivery chain from a long execution of a complex application. The core technique is resource-based execution partitioning, which allows reproducing attack-relevant events without wasting time on irrelevant ones. Furthermore, it enables interactive reconstruction of the execution. Our evaluation with 26 real-world applications shows that C2SR has low recording overhead (less than 5.47%) and is highly effective in reconstructing partial executions (less than 1.3% of the entire execution) of long-running applications.

### Acknowledgments

We thank the anonymous referees and our shepherd Adam Bates for their constructive feedback. The authors gratefully acknowledge the support of NSF (1916499, 1908021, 1850392, 1909856, and 1916500). The work was also partially supported by a Mozilla Research Award and a Facebook Research Award. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the sponsor.

### References

[References listed here as provided in the original text]

---

This optimized version aims to make the text more coherent, professional, and easier to read. It also ensures that the content is logically structured and clearly presented.