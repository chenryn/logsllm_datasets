implements various restrictions for executions during record-
ing. First, it only runs one thread at a time. This slows down
the recording execution as discussed above. More importantly,
this will result in a signiﬁcantly different execution at runtime.
For instance, with RR’s recorder, many concurrency bugs may
disappear due to the restriction. C2SR does not have such
restriction. However, C2SR is also ineffective in reproducing
concurrency bugs. Second, RR interferes with the context
switching as well, performing preemptive context switching.
An execution under the RR’s recorder may exhibit different
context switches from the original execution without the RR’s
recorder. C2SR does not interfere with the context switching.
Third, RR uses ptrace to implement various hooks, while
C2SR hooks libraries which is faster than the ptrace. As
reported in § V, C2SR’s recording overhead is much less than
RR’s recording overhead, allowing C2SR’s recorder to capture
executions that are close to the original executions.
Robustness. C2SR’s recording capabilities are entirely im-
plemented as a library while RR leverages more robust in-
frastructures such as ptrace. If program code is corrupted
during recording and reconstruction, C2SR may be affected
(i.e., compromised and fail), while RR would be robust.
In terms of
2) Other Record-and-replay Techniques: We also compare
with other existing record-and-replay techniques [80], [5], [39],
[70], [27], [87], [91], [21], [93], [52], [91], [53], [17], [67],
[84], [28], [42], [43], [44], [71], [13], [16], [7], [66], [13].
Recording and Replay Overhead.
record-
ing overhead, except for ﬁne-grained record-and-replay tech-
niques [80], [5], [39], [70], most techniques have low overhead
(e.g., less than 10%) similar to C2SR. For the replay, C2SR’s
execution reconstruction is comparable or faster than existing
record-and-replay techniques, if C2SR does not need to retry
the reconstruction due to the timeline projection adjustment
(§ IV-E). However, as shown in Table VII, C2SR requires
retrials to reconstruct the execution. For such cases, C2SR
is slower than existing techniques. For instance, C2SR had
to repeat 14 times to reconstruct the execution of Firefox in
Table VII, leading to 14 times replay overhead than a typical
system call replay technique [27], [87], [91], [21]. Note that
replay acceleration [93], [52], [91], [53] and browser-speciﬁc
approaches [71], [13], [16], [7], [66], [13] can replay faster
than C2SR while they are often not effective in reconstructing
attack delivery processes.
Interactable Replay of Exploit Delivery Process. Browser-
speciﬁc approaches [71], [13], [16], [7], [66], [13] can provide
the interactable replay capability. However, most of them [13],
[16], [7], [66], [13] aim to replay high-level web application
behaviors such as mouse-events and keyboard-events. Unfor-
tunately, they cannot reproduce exploit delivery processes that
often have to replay low-level system call events. [71] replays
lower-level events than others. Hence,
it may record and
replay some exploit delivery processes. However, it requires
signiﬁcant changes in browser internals.
B. Other Related Works
Network Provenance Systems. Network provenance tech-
niques [104], [14], [103], [94] track network trafﬁc between
hosts in the same network environment
to identify causal
relationships across multiple hosts. C2SR is complementary
to such techniques such that they can be used with C2SR to
fully understand details of cyber attacks across multiple hosts.
Taint Analysis. Taint analysis techniques [75], [102], [18],
[47], [101] track information ﬂow between a source to a sink.
Decoupled taint analysis techniques [41], [67], [68], [84] were
developed to improve the run-time performance. Their idea
is to decouple a target process from expensive taint analysis
procedures by allocating spare cores to do the taint tracking.
Additional Forensic Techniques. As we discussed earlier,
graph-based forensics analysis techniques have proposed [49],
[35], [50], [54], [51], [65], [69], [10], [17], [67], [84], [28],
[42], [43], however, they focus on identifying causal relations
and do not allow examining details of the execution. There are
efforts to reduce the space overhead of provenance data [99],
[38], [55], [64]. Data reduction techniques are orthogonal to
C2SR such that their idea can be used to further reduce the
execution trace of C2SR. Recently, novel provenance inquiry
techniques [59], [33], [36], [81], [98] were proposed for easier
and timely investigations for advanced attacks.
15
VIII. CONCLUSION
We propose a novel technique, C2SR, to enable effective cy-
bercrime scene reconstruction by recreating an attack delivery
chain from a long execution of a complex application. Its
core technique is the resource based execution partitioning,
that allows reproducing the attack relevant events without
wasting time in reconstructing irrelevant events to the attack.
Furthermore, it enables an important forensic capability, which
is the interactivity of a reconstructed execution. Our evaluation
results with 26 real-world applications show that it has low
recording overhead (less than 5.47%), and is highly effective in
reconstructing partial executions (less than 1.3% of the entire
execution) of long-running applications.
ACKNOWLEDGMENTS
We thank the anonymous referees and our shepherd Adam
Bates for their constructive feedback. The authors grate-
fully acknowledge the support of NSF (1916499, 1908021,
1850392, 1909856, and 1916500). The work was also partially
supported by a Mozilla Research Award and a Facebook
Research Award. Any opinions, ﬁndings, and conclusions or
recommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of the sponsor.
REFERENCES
[1]
ab - Apache HTTP server benchmarking tool. https://httpd.apache.org/
docs/2.4/programs/ab.html.
[2] Advanced Tools
for WebAssembly.
getting-started/advanced-tools/.
https://webassembly.org/
[3] Ashar Ahmad, Muhammad Saad, Mostafa Bassiouni, and Aziz Mo-
haisen. Towards blockchain-driven, secure and transparent audit logs.
In the MobiQuitous ’18.
[4] Ashar Ahmad, Muhammad Saad, and Aziz Mohaisen. Secure and
Journal of Network and
logs with blockaudit.
transparent audit
Computer Applications.
[5] Gautam Altekar and Ion Stoica. ODR: Output-deterministic replay for
multicore debugging. In SOSP ’09.
[6] Athanasios Andreou, Giridhari Venkatadri, Oana Goga, Krishna P.
Gummadi, Patrick Loiseau, and Alan Mislove.
Investigating ad
transparency mechanisms in social media: A case study of facebooks
explanations. In NDSS’18.
[7] Silviu Andrica and George Candea. Warr: A tool for high-ﬁdelity
In the 2011 IEEE/IFIP 41st
web application record and replay.
International Conference on Dependable Systems&Networks, DSN’11.
[8] Apache Web Server, 2019. https://httpd.apache.org/.
[9] Arora. Arora web browser, 2019. https://github.com/Arora/arora.
[10] Adam Bates, Dave Tian, Kevin R. B. Butler, and Thomas Moyer.
In the
Trustworthy whole-system provenance for the linux kernel.
24th USENIX Conference on Security Symposium, SEC’15.
[11] Lujo Bauer, Shaoying Cai, Limin Jia, Timothy Passaro, Michael
Stroucken, and Yuan Tian. Run-time monitoring and formal analysis
of information ﬂows in Chromium. In NDSS’15.
[12] Midori Browser, 2019. https://www.midori-browser.org/.
[13] Brian Burg, Richard Bailey, Andrew J. Ko, and Michael D. Ernst.
Interactive record/replay for web application debugging. In the 26th
Annual ACM Symposium on User Interface Software and Technology.
[14] Ang Chen, Yang Wu, Andreas Haeberlen, Wenchao Zhou, and
Boon Thau Loo. The good, the bad, and the differences: Better network
diagnostics with differential provenance. In SIGCOMM’16.
[15] W.J. Chisum and B.E. Turvey. Crime Reconstruction. Elsevier, 2011.
Jong-Deok Choi and Harini Srinivasan. Deterministic replay of
[16]
java multithreaded applications. In the SIGMETRICS Symposium on
Parallel and Distributed Tools, SPDT ’98.
Jim Chow, Tal Garﬁnkel, and Peter M. Chen. Decoupling dynamic
program analysis from execution in virtual environments. In ATC’08.
[17]
[18]
James Clause, Wanchun Li, and Alessandro Orso. Dytan: A generic
dynamic taint analysis framework. In the 2007 International Sympo-
sium on Software Testing and Analysis, ISSTA ’07.
[19] Scott A. Crosby and Dan S. Wallach. Efﬁcient data structures for
tamper-evident logging. In USENIX Security’09.
Jonathan Crussell, Ryan Stevens, and Hao Chen. Madfraud: Investigat-
ing ad fraud in android applications. In the 12th Annual International
Conference on Mobile Systems, Applications, and Services.
[20]
[21] Heming Cui, Jingyue Wu, John Gallagher, Huayang Guo, and Jun-
feng Yang. Efﬁcient deterministic multithreading through schedule
relaxation. In SOSP’11.
[22] Weidong Cui, Xinyang Ge, Baris Kasikci, Ben Niu, Upamanyu
Sharma, Ruoyu Wang, and Insu Yun. REPT: Reverse debugging of
failures in deployed software. In OSDI’18.
[23] CVE-2016-2087. https://www.cvedetails.com/cve/CVE-2016-2087/.
[24] Cycura/rtaint: Reverse taint tool. https://github.com/Cycura/rtaint.
[25] Debugging Node.js apps, 2018.
https://nodejs.org/en/docs/guides/
[26]
debugging-getting-started/.
derjanb. A Bitcoin miner that supports pure Javscript, WebWorker and
WebGL mining, 2019. https://github.com/derjanb/hamiyoca.
[27] David Devecsery, Michael Chow, Xianzheng Dou, Jason Flinn, and
In 11th USENIX Symposium on
Peter M. Chen. Eidetic systems.
Operating Systems Design and Implementation (OSDI 14), 2014.
[28] George W. Dunlap, Samuel T. King, Sukru Cinar, Murtaza A. Basrai,
and Peter M. Chen. Revirt: Enabling intrusion analysis through virtual-
machine logging and replay. SIGOPS Oper. Syst. Rev., 36(SI).
[29] Eval Villain – Get this Extension for Firefox (en-US), 2020. https:
//addons.mozilla.org/en-US/ﬁrefox/addon/eval-villain/.
[30] Firefox Developer Tools, 2018. https://developer.mozilla.org/en-US/
docs/Tools/.
[31] Firefox Web Browser. https://www.mozilla.org/en-US/ﬁrefox/.
[32] Association for Crime Scene Reconstruction. Crime Scene Recon-
struction, 2019. https://www.acsr.org/.
[33] Peng Gao, Xusheng Xiao, Zhichun Li, Fengyuan Xu, Sanjeev R.
Kulkarni, and Prateek Mittal. AIQL: Enabling efﬁcient attack investi-
gation from system monitoring data. In ATC’18.
[34] GDB: The GNU Project Debugger. https://www.gnu.org/software/gdb/.
[35] Ashvin Goel, Kenneth Po, Kamran Farhadi, Zheng Li, and Eyal
de Lara. The taser intrusion recovery system. In SOSP’05.
[36] Wajih Ul Hassan, Mark Lemay, Nuraini Aguse, Adam M. Bates, and
Thomas Moyer. Towards scalable cluster auditing through grammatical
inference over provenance graphs. In NDSS’18.
[37] N. Honarmand and J. Torrellas. Replay debugging: Leveraging record
and replay for program debugging. In ISCA’14.
[39]
[38] Md Nahid Hossain, Junao Wang, R. Sekar, and Scott D. Stoller.
Dependence-preserving data compaction for scalable forensic analysis.
In USENIX Security’18.
Jeff Huang, Charles Zhang, and Julian Dolby. Clap: Recording local
executions to reproduce concurrency failures. In PLDI’13.
InspIRCd IRC Server. http://www.inspircd.org/.
[40]
[41] Kangkook Jee, Vasileios P. Kemerlis, Angelos D. Keromytis, and
Shadowreplica: Efﬁcient parallelization of
Georgios Portokalidis.
dynamic data ﬂow tracking. In ACM CCS’13.
[42] Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini,
Taesoo Kim, Alessandro Orso, and Wenke Lee. Rain: Reﬁnable attack
investigation with on-demand inter-process information ﬂow tracking.
In ACM CCS’17.
[43] Yang Ji, Sangho Lee, Mattia Fazzini, Joey Allen, Evan Downing,
Taesoo Kim, Alessandro Orso, and Wenke Lee. Enabling reﬁnable
cross-host attack investigation with efﬁcient data ﬂow tagging and
tracking. In USENIX Security’18.
[44] Yang Ji, Sangho Lee, and Wenke Lee. Recprov: Towards provenance-
aware user space record and replay. In the 6th International Workshop
on Provenance and Annotation of Data and Processes - Volume 9672,
IPAW 2016. Springer-Verlag.
[45] Shrinivas Joshi and Alessandro Orso. Scarpe: A technique and tool for
selective capture and replay of program executions. IEEE International
Conference on Software Maintenance, ICSM, 2007.
16
[46] Vishal Karande, Erick Bauman, Zhiqiang Lin, and Latifur Khan. Sgx-
log: Securing system logs with sgx. In ASIACCS’17.
[47] Vasileios P. Kemerlis, Georgios Portokalidis, Kangkook Jee, and
Angelos D. Keromytis. Libdft: Practical dynamic data ﬂow tracking for
commodity systems. In the 8th ACM SIGPLAN/SIGOPS Conference
on Virtual Execution Environments, VEE ’12.
[48] Wei Ming Khoo. A taint-tracking plugin for the Valgrind memory
checking tool, 2020. https://github.com/wmkhoo/taintgrind.
[49] Samuel T. King and Peter M. Chen. Backtracking intrusions.
SOSP’03.
In
[75]
[50] Srinivas Krishnan, Kevin Z. Snow, and Fabian Monrose. Trail of bytes:
Efﬁcient support for forensic analysis. In ACM CCS’10.
[51] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee, Wen-
Chuan Lee, Shiqing Ma, Xiangyu Zhang, Dongyan Xu, Somesh Jha,
Gabriela F. Cretu-Ciocarlie, Ashish Gehani, and Vinod Yegneswaran.
MCI: Modeling-based causality inference in audit logging for attack
investigation. In NDSS’18.
[52] Oren Laadan and Jason Nieh.
Transparent checkpoint-restart of
multiple processes on commodity operating systems. In ATC’07.
[53] Oren Laadan, Nicolas Viennot, and Jason Nieh.
Transparent,
lightweight application execution replay on commodity multiprocessor
operating systems.
In Vishal Misra, Paul Barford, and Mark S.
Squillante, editors, SIGMETRICS’10.
[54] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. High accuracy
attack provenance via binary-based execution partition. In NDSS’13.
[55] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. Loggc: Garbage
collecting audit log. In ACM CCS’13.
[56] Kyu Hyung Lee, Yunhui Zheng, Nick Sumner, and Xiangyu Zhang.
Toward generating reducible replay logs. In PLDI’11.
[57] Bo Li, Phani Vadrevu, Kyu Hyung Lee, and Roberto Perdisci. Jsgraph:
Enabling reconstruction of web attacks via efﬁcient tracking of live
in-browser javascript executions. In NDSS’18.
[58] Lighttpd Web Server, 2019. https://www.lighttpd.net/.
[59] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li, Zhenyu
Wu, Junghwan Rhee, and Prateek Mittal. Towards a timely causality
analysis for enterprise security. In NDSS’18.
[60] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur
Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim
Hazelwood. Pin: Building customized program analysis tools with
dynamic instrumentation. In PLDI’05.
[61] Lynx browser, 2019. https://lynx.browser.org/.
[62] Sadegh M. Milajerdi, Birhanu Eshete, Rigel Gjomemo, and Venkat N.
Venkatakrishnan. Propatrol: Attack investigation via extracted high-
level tasks. In Vinod Ganapathy, Trent Jaeger, and R.K. Shyamasundar,
editors, Information Systems Security. Springer.