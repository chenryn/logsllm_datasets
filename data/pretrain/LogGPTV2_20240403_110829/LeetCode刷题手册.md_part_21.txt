 round++
 round++
 continue
++punou
continue
continue
1
+
2
Y
---
## Page 160
代码
解题思路
下："123"，"132",
按大小顺序列出所有排列情况，并一一标记，当n=3 时,所有排列如
给出集合[1,2,3..,n]，其所有元素共有 n!种排列。
题目大意
Example 2: 
Example 1: 
Note:
Given n and k, return the kth permutation sequence.
By listing and labeling all of the permutations in order, we get the following sequence for n = 3: 
The set [1,2,3,...,*n*] contains a total of n! unique permutations.
·用DFS 暴力枚举，这种做法时间复杂度特别高，想想更优的解法。
● Given k will be between 1 and n! inclusive.
● Given n will be between 1 and 9 inclusive.
package leetcode
Output:"2314"
Input: n = 4, k = 9 
Output: "213"
Input: n = 3, k = 3 
.9
S
?
2
mport
C
"321"
"123"
"312"
"231"
"213""
"132"
，"213"，"231"，"312"，"321"，给定 n 和k，返回第k个排列。
---
## Page 161
Example 1: 
 Given a linked list, rotate the list to the right by k places, where k is non-negative.
题目
61. Rotate List
func findPermutation(n, index int, k *int, p []int, res *string, used *[]bool)
func getPermutation(n int, k int) string {
fmt.Printf("n = %v index = %v k = %v p = %v res = %v user = %v\n", n, index,
return
if index == n { 
findPermutation(n, O, &k, p, &res, &used)
used, p, res := make([]bool, n), []int{},
if k == 0 {
for i := O; i 0->1->NULL
Input: 0->1->2->NULL,k = 4 
rotate 2 steps to the right: 4->5->1->2->3->NULL
rotate 1 steps to the right: 5->1->2->3->4->NULL
Explanation:
Output: 4->5->1->2->3->NULL
Input: 1->2->3->4->5->NULL,k = 2 
if head == nil ll head.Next == nil Il k == 0 { 
 Definition for singly-linked list.
type ListNode struct { 
 return head 
Val int 
Next *ListNode
由于是循环旋转，
to the right: 2->0->1->NULL
to the right: 0->1->2->NULL
递归解法会超时。
to
to the
 the right: 1->2->0->NULL
right:
，最终状态其实是确定的，利用链表的长度取余可以得到链表的最终
 2->0->1->NULL
---
## Page 163
Example 1: 
Note: m and n will be at most 100.
Above is a 7 x 3 grid. How many possible unique paths are there?
How many possible unique paths are there?
The robot can only move either down or right at any point in time. The robot is trying to reach the
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
题目
62. Unique Paths
return res.Next
cur.Next = nil
res := &ListNode{val: O, Next: cur.Next}
for i := len - k%len; i > O; i-- {
cur = newHead 
cur.Next = head
if (k % len) == 0 { 
for cur.Next != nil {
cur := newHead 
len := 0
newHead := &ListNode{val: O, Next: head}
 cur = cur.Next 
return head 
cur = cur.Next
Ten++ 
★
Finish
---
## Page 164
代码
解题思路
路径？
者向右移动一步。机器人试图达到网格的右下角（在下图中标记为"Finish"）。问总共有多少条不同的
一个机器人位于一个 m×n 网格的左上角（起始点在下图中标记为"Start"）。机器人每次只能向下或
题目大意
Example 2: 
package leetcode
●这是一道简单的 DP 题。输出地图上从左上角走到右下角的走法数。
func uniquePaths(m int, n int) int {
Output: 28
Input: m = 7， n = 3 
right corner: 
From the top-left corner, there are a total of 3 ways to reach the bottom-
Explanation:
Output: 3 
Input: m = 3，n = 2 
1.Right -> Right -> Down
for i := l; i  Down -> Right
 dp[i][0]：
 dp[0][i]=
 dp[i] = make([]int,m)
for j := l; j  Down -> Right -> Right
There are two ways to reach the bottom-right corner:
There is one obstacle in the middle of the 3x3 grid above.
1. Right -> Right -> Down -> Down
Explanation:
Output: 2
Input:
return dp[n-1][m-1]
[0,0,0]
[0,1,0],
[0,0,0],
---
## Page 166
64. Minimum Path Sum
题
代码
解题思路
·需要注意的一种情况是，起点就是障碍物，那么这种情况直接输出〇。
·这一题比第 62 题增加的条件是地图中会出现障碍物，障碍物的处理方法是 dp[i][j]=0。
func uniquePathswithobstacles(obstacleGrid [][]int) int {
package leetcode
·这一题是第 62 题的加强版。也是一道考察 DP 的简单题。
 if len(obstacleGrid) == 0 ll obstacleGrid[o][0] == 1 { 
return dp[m-1][n-1]
for i := l; i  9 {
 return []int{}
} else{ 
digits[i] += carry
carry = 1
digits[i] = 0 
carry = 0 
1
，代表一个十进制数，数组的〇下标是十进制数的高位。要求计算这个十进制数加
一
- 1; i >= 0; i--
，逐位进位即可。最高位如果还有进位需要在数组里面第0
，最高位数字存放在数组的首
---
## Page 170
代码
解题思路
给你两个二进制字符串，返回它们的和（用二进制表示）。输入为 非空字符串且只包含数字1和0。
题目大意
Example 2: 
Example 1: 
 The input strings are both non-empty and contains only characters 1 or 0.
 Given two binary strings, return their sum (also a binary string).
题目
67. Add Binary.
·简单题。按照二进制的加法规则做加法即可。
·要求输出2个二进制数的和，结果也用二进制表示。
func addBinary(a string, b string) string {
package leetcode
Output: "10101"
Output: "100"
Input: a = "11", b = "1"
mport （
if len(b) >len(a) {
"strings'
"strconv'
 a, b = b, ａ 
return digits
digits = append([]int{1}, digits...)
---
## Page 171
Example 2: 
Example 1: 
the result is returned.
Since the return type is an integer, the decimal digits are truncated and only the integer part of 
Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
Implement int sqrt(int x).