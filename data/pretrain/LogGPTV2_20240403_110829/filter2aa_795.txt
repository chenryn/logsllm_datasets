Golang中的SSTI
Go的标准库⾥有两个模板引擎, 分别是 text/template 和 html/template , 两者接⼝⼀致, 区别在于 html/template ⼀般⽤于⽣成
HTML 输出, 它会⾃动转义 HTML 标签, ⽤于防范如 XSS 这样的攻击。
0x01 init...
从⼀个题⽬⼊⼿:
先把题⽬的代码敲出来。
package main 
import ( 
"bufio" 
"html/template" 
"log" 
"os" 
"os/exec" 
) 
type Program string 
func (p Program) Secret(test string) string { 
out, _ := exec.Command(test).CombinedOutput() 
return string(out) 
} 
func (p Program) Label(test string) string { 
return "This is " + string(test) 
} 
func main() { 
reader := bufio.NewReader(os.Stdin) 
text, _ := reader.ReadString('\n') 
tmpl, err := template.New("").Parse(text) 
if err != nil { 
log.Fatalf("Parse: %v", err) 
} 
tmpl.Execute(os.Stdin, Program("Intigriti")) 
} 
代码量很少, 很明显的模板注⼊, 问题是怎么构造 payload 去调⽤ Secret ⽅法执⾏命令。
0x02 loading...
快捷键进⼊ html/template 的代码时 vscode ⾃动打开了官⽅⽂档地址, 代码路径也提示了, 两者结合起来看。
https://pkg.go.dev/html/template?utm_source=gopls 
⼀些从⽂档中了解到的常识:
. 模板的占位符为 {{语法}} , 这⾥的 语法 官⽅称之为 Action , 其内部不能有换⾏，但可以写注释,注释⾥可以有换⾏。
. 特殊的 Action : {{.}} ,中间的点表示当前作⽤域的当前对象, 类似 JAVA 中的 this 关键字。
. Action 中⽀持定义变量,命名以 $ 开头,如 $var = "test" ,有⼀个⽐较特殊的变量 $ ,代表全局作⽤域的全局变量,即在调⽤模板引
擎的 Execute() ⽅法时定义的值,如 {{$}} 在上⾯的题⽬中获取到的值就是 Intigriti .
. Action 中内置了⼀些基础语法,如常⻅的语法,如判断 if else ,或且⾮ or and not ,⼆元⽐较 eq ne ,输出 print printf
println 等等,除此之外还有⼀些常⽤的编码函数，如 urlescaper,attrescaper,htmlescaper 。
. Action 中⽀持类似 unix 下的管道符⽤法, | 前⾯的命令会将运算结果(或返回值)传递给后⼀个命令的最后⼀个位置。
有⼀些前置知识后结合代码再看,测试单元⾥⾯能找到很多具体的⽤法。
⽐如内部⽅法调⽤:
查看对应的⽅法
参数名参数类型都对得上,在题⽬中进⾏尝试:
0x03 loaded
Done, 上⾯提到 Action 中是⽀持管道符的, 所以答案可以是:
{{.Secret "whoami"}} 
{{"whoami"| .Secret}} 
0x04 in the end
⼀些思考：
1.假设代码中没有可命令执⾏的函数是否可以通过模板本身⽀持的语法到 rce ?
不可以, 模板本身⽀持的语法很有限, 并不⽀持动态导⼊其他标准库并调⽤( Go 是编译型语⾔...),不过可以关注⼀下其他函数,⽐如
⽂件读写,⽹络请求等等,条条⼤路通 RCE ...
2.⽩盒怎么挖掘?
关注代码是否导⼊ text/template 或 html/template ,解析的⽂本或⽂件内容是否外部可控。值得⼀提的是 gosec 有关注
html/template 的安全问题,但只是检测输出的内容是否在做了转义,没有关注模板注⼊的问题,默认是扫不到这个漏洞的,基于原代
码修改⼀下即可完成⽩盒扫描插件的编写。
3.⿊盒怎么挖掘?
引擎中⽆⽹络请求相关的⽅法,⽆法通过dnslog/httplog的⽅式盲测漏洞,但其本身⽀持⼀些编码函数,有回显的场景可通过表达式判
断是否存在漏洞。 payload 如下,执⾏后回显的值为 95272022
{{println 0B101101011011011110001010110}} 
rcefuzzer在配置 paramPollution.expr 中加⼀条 payload 即可
{{println 0B101101011011011110001010110}}|95272022 
4.对抗相关
该模板引擎的占位符本身和其他语⾔是重叠的, 这个强特征在流量设备中应该有已知规则会拦截; 攻击⽅则可借助内置的⼀些函数
就⾏敏感信息规避,⽐如上述题⽬中的答案还可以写成：
{{/*"}}{{"*/}}{{- printf `%sam%s` `who` `i`| .Secret -}}{{/*"}}{{"*/}} 
多添加 {{ 和 }} ,扰乱正则匹配。
知识⾯覆盖有限, 以上提到的所有内容均可能有误,orz ⽇常被⾃⼰菜哭。