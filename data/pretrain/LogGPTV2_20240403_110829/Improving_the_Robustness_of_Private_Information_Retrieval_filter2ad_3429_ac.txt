equality if and only if (t, k) = (1, 4).
≥ 0, with
3 , we have
t
First note that
k − ⌊
√kt⌋ − 1 − t
t
≥
=
t
k
√kt − 1 − t
k −
t −r k
1
t −
t − 1
t  r k
t − 1! −
= r k
1
t − 1
t ≥ 3 + 1
with equality if and only if kt is a perfect square. Now
k ≥ 3t + 1, so k
t  r k
r k
t − 1!−
t , and
1
t − 1
≥ r3 +
= (cid:18)3 +
= 2 −r3 +
1
1
t
1
t − 1
1
t  r3 +
t(cid:19) −r3 +
1
t − 1! −
1
1
t − 1
t −
with equality if and only if k = 3t + 1. Finally, we have
t ≥ 0, with equality if and only if t = 1,
that 2 −q3 + 1
and the result is proven.
Note that (t, k) = (1, 4) is the minimal conﬁguration of
the system in [2].
Communication cost. This protocol sends r = n/b el-
ements of S to each of ℓ servers, and receives s = b/w
elements of S from each of k servers in reply. If it takes z
bits to encode an arbitrary element of S (so z = ⌈lg(|S|)⌉),
then the total communication cost is nℓz/b + kbz/w. Since
k ≤ ℓ, this is bounded by ℓz(n/b + b/w). By choosing
b = √nw, we get r = s = pn/w and the total com-
munication cost to privately retrieve a block of √nw bits
is bounded by 2ℓzpn/w. Remember that we needed to
choose S such that |S| ≥ 2w; if we make it not much big-
ger, we can have z = w + 1, or even z = w if S is GF (2w).
Then our cost to retrieve √nw bits is O(ℓ√nw)
Note that this is far from the optimal communication cost
of retrieving a single bit, even in the context of Byzantine-
robust PIR protocols; for example, the protocol of [2] has
cost O( k
⌊(k−1)/3t⌋ ℓ log ℓ) to retrieve one bit. However, it
is clearly within a small factor of optimal if indeed we are
interested in the entire √nw-bit block.
3t n
1
4. Robustness against colluding servers
In this section, we consider the problem of more than t
(even up to all ℓ) servers colluding to try to determine the
client’s query.
As mentioned earlier, if all ℓ servers collude, it is impos-
sible to make a protocol with communication cost less than
n which also information-theoretically protects the query.
Therefore, we do the best possible thing:
information-
theoretically protect the query if up to t servers collude, but
still computationally protect the query even if up to all ℓ
servers collude. We call a PIR protocol with this property
t-private ℓ-computationally-private.
We do this with a simple modiﬁcation to the protocol
of Figure 2: instead of sending t-private ℓ-way shares of
eβ to the servers, send encryptions of those shares, under
an additive homomorphic cryptosystem, such as the Paillier
cryptosystem [10] (see section 2.3). The servers then use
the homomorphic property to compute the encryptions of
their results, which they send back to the client. The client
decrypts the replies and proceeds as before.
In detail, the changes to the protocol of Figure 2 are:
• To start, select large random distinct primes p and q.
Set m = pq, choose S to be the ring Zm, and let
I = {1, 2, . . . , min(p, q) − 1}. Compute the Paillier
encryption and decryption keys as in section 2.3.
• In step P3, use Paillier encryption to compute E(ρi) =
[E(f1(αi)), . . . ,E(fr(αi))].
tor of r elements of Zm2 .
• In step P4, send E(ρi) to server i, for 1 ≤ i ≤ ℓ.
• In step S1, E(ρi) = [E(ρi1), . . . ,E(ρir)] will be a vec-
• In step S3, compute E(Ric) = Y1≤j≤r
ements of Zm2 for 1 ≤ c ≤ s.
• In step S4, return [E(Ri1), . . . ,E(Ris)] to the client.
• In step C1, use Paillier decryption to compute Ric =
E(ρij )Wjc as el-
D(E(Ric)), and then proceed as before.
This modiﬁed protocol still allows the client to recover
the desired block Bβ, even when only k of the ℓ servers re-
spond, and v  k+t
2 , as in Fact 2, or if we are using redundancy
to avoid list decoding. If we are using Fact 3 to avoid list
decoding, then we will probably want to choose |S| to be
around 2128.
Once we have selected S, the best choices for w and b
are then ⌊lg(|S|)⌋ and √nw, respectively.
5. Protecting the data from the servers
In this section, we give a small enhancement to the pro-
tocols of the previous sections that allows the contents of
the database itself to be hidden from coalitions of up to τ
servers, for 0 ≤ τ < k − t − v(2 − v
k ). We achieve
τ -independence, as deﬁned in [5]: no coalition of up to
τ servers has any information about the content of the
database (in the information-theoretic sense). Unlike the
result in [5], however, we do not achieve τ -independence at
the expense of an increased number of servers or at the ex-
pense of communication cost: the number of servers and
communication cost of the τ -independent version of our
scheme are identical to those of the regular version.
The major change we make to our protocol in order to
achieve τ -independence is that, in this scheme, the choices
of S, I, and the indices αi need to be made in advance of
storing data in the database. This condition imposes the
following restrictions on the use of the scheme:
• If it is intended that the user storing the information
in the database is different from the client retrieving
the data, or if there is more than one such client, they
cannot rely on the secrecy of the αi to get the bene-
ﬁt of Fact 3. They need to use redundancy techniques
instead, as mentioned in section 3.4, or reduce the al-
lowed number of Byzantine servers to at most k−t−τ
.
2
• If it is intended that there is more than one client re-
trieving data, this scheme cannot be used at the same
time as the scheme from section 4: in the latter scheme,
S was chosen to be Zpq for secret values p and q. Mul-
tiple clients would not use the same S, and so with this
variant, could not use the same database at all.
At system setup time, S and the αi are chosen, and com-
municated to all of the users of the database (either users
storing data, or users retrieving data). S must be communi-
cated to the servers as well, but the αi need not be.
As before, the database is divided into r = n/b b-bit
blocks, and each block is divided into s = b/w w-bit words.
But instead of the server i storing the s words Wj1, . . . , Wjs
of block number j directly, it stores each block as a se-
quence of s elements ω(i)
j1 , . . . , ω(i)
The computation of these ω(i)
jc uses Shamir secret shar-
ing. In particular, a user that wants to store database block j
divides it into s words Wj1, . . . , Wjs, and does the follow-
ing for each 1 ≤ c ≤ s:
js of S.
• Choose a random polynomial gjc of degree τ . The co-
efﬁcients of gjc should be random elements of S, ex-
cept for the constant term, which should be Wjc (en-
coded as a member of S).
• Send gjc(αi) to server i to store as its ω(i)
1 ≤ i ≤ ℓ.
That is, the values of ω(i)
ℓ-way Shamir secret shares of Wjc.
jc for 1 ≤ i ≤ ℓ are just τ -private
The modiﬁcations to the protocol of Figure 2 are now
jc , for each
straightforward:
• Remove step S2, and use ω(i)
S3.
jc instead of Wjc in step
• In step C2, check that k ≤ t + τ instead of k ≤ t.
• In step C3, choose h from the rangepk(t + τ ) < h ≤
k instead of √kt < h ≤ k.
• In steps C5 and C6, pass t + τ instead of t.
We note that our choice of 0 ≤ τ < k − t− v(2− v
k ) en-
sures that the same values of h, v, t, k, and ℓ we used in the
original protocol will continue to work in the τ -independent
version. In particular, choosing τ from this range guaran-