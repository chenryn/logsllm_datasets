# Windows10 Mount Point Mitigation & MS15-090绕过
|
##### 译文声明
本文是翻译文章，文章来源：blogs.360.cn
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**Symbolic Link漏洞简单背景介绍**
Symbolic Link是微软Windows系统上一项关键机制,从Windows NT3.1开始引入对象和注册表Symbolic
Link后,微软从Windows2000开始也引入了NTFS Mount Point和Directory
Juntions,这些机制对于熟悉Windows内部机理的技术人员并不陌生,在著名的Windows
Internals系列中,也有介绍这些机制。在过去,安全人员利用Symbolic Link来攻击系统安全机制或安全软件,也并不少见。
而这项技术重新火起来,要归功于2014年BlackHat上 James Forshaw爆出的大量利用mount
point、注册表的符号链接来绕过IE11的EPM沙箱的事件,在此之后, James Forshaw仍在不断挖掘和通过Google Project
Zero爆出大量利用这些机制的类似逻辑漏洞,通过这些漏洞可以穿透IE11的EPM沙箱,或者利用系统服务提升权限等。在2015年的Syscan上,他则以一篇《A
Link to the Past: Abusing Symbolic Links on Windows》给这些漏洞和攻击方式做了更好地总结。
360Vulcan Team也发现了多个使用Symbolic
Link绕过EPM沙盒的漏洞,在今年的HITCON安全会议上,我们就公开了我们发现的CVE-2014-6322等沙盒绕过漏洞,包括一个未公开的EPM沙盒绕过漏洞。
之所以利用Symbolic
Link进行攻击的漏洞频繁出现,是和低权限程序可以操作全局对象的符号链接,使得高权限程序访问非预期的资源有重要关系的。这类漏洞不仅仅局限在Windows平台上,著名的iOS6/7越狱程序Evasion也是利用了苹果iOS系统内服务对于符号链接的处理问题实现了最初的攻击步骤。
**  
**
**微软的缓和措施**
随着这些漏洞攻击的频繁爆出,微软也在寻找更有效地缓和方式,既然低权限创建符号链接是问题的关键所在,那么封堵低权限程序创建符号链接就成了自然会想到的解决方案。
在今年的五月份,Windows 10推出了内测版本Build
10120,在360安全团队进行分析后就发现,在这个版本微软就加入了针对注册表符号链接的防护,禁止”sandboxed”的低权限进程创建注册表符号链接。在随后的多个内测版本中,微软又持续加入了针对对象的符号链接创建防护和针对Mount
Point(目录挂载点)链接的防护,禁止低权限的程序创建这些链接。
具体来说,这些防护措施修改在Windows内核程序(ntoskrnl.exe)内,在创建注册表、文件和对象的符号链接时,系统会使用RtlIsSandboxedToken来判断当前的token是否在低完整性级别或者以下(例如AppContainer)。如果是的话,针对这三种符号链接,会采取不同的策略:
1\. 针对注册表符号链接: 完全禁止创建,禁止沙盒内的程序创建任何注册表符号连接
2\. 针对对象符号链接:
沙盒内程序可以创建对象符号链接,但是对象符号连接的Object上会增加特别的Flag,当非沙盒的程序遇到沙盒程序创建的符号链接时,符号链接不会生效
3\. 针对文件(Mount
Point)符号链接:沙盒内程序在创建对象符号链接时,系统会检查对于被链接到的目标目录(例如将c:testlow链接到目标c:windows目录),当前进程是否具备写入(包括写入、追加、删除、修改属性等)权限,如果不具备这些权限,或者无法打开目标目录(例如目标目录不存在),则会拒绝。
在Windows10 RTM正式发布后,微软又以不同寻常的速度(用James
Forshaw的话来说,简直就不敢让人相信是微软干的)将这个安全缓和移植到了低版本的Windows操作系统上。
在今年8月11日,微软发布了MS15-090补丁,在Windows
Vista788.1及服务器操作系统上修复了CVE-2015-2428CVE-2015-2429CVE-2015-2430这三个漏洞,而这个补丁的实质,就是将对象、注册表、文件系统这三个符号链接的缓和防护移植到了这些操作系统上。微软这些以相当有执行力的速度,试图将这类漏洞彻底终结,送入历史之中。
那么,是不是对于Windows 10,包括打了8月补丁的Windows7, 8, 8.1等操作系统,这些符号链接的漏洞就和我们永远说拜拜了呢?
答案当然是否定的,就如James Forshaw在44CON的议题标题所说, 2 Steps Forward, 1 Step
Back,在开发这些缓和措施的过程中,水平不到位的安全/开发人员,也会犯这样那样的错误,使得我们在深入研究和分析这些机制后,仍然可能找出突破他们的方式。
**针对缓和的绕过**
在这里,本文就是要介绍一种绕过Windows 10 Mount Point
Mitigation(目录挂载点缓和)的方式,由于这个缓和在Windows7/8/8.1等系统上是通过MS15-090得到修复的,因此这里介绍的方法也是对MS15-090(CVE-2015-2430)的绕过攻击方式。
前面我们说到,针对文件/目录的Mount
Point符号链接,系统并没有彻底禁止沙盒的程序去创建它们,而是会检查对应被链接到的目标目录,当前进程是否具备可写的权限,如果可写(例如我们将同是位于低完整性级别目录下的两个继承目录进行链接),链接是可以被创建的。这就给我们突破这个防护提供了一个攻击面,那么我们来看看这个检查具体是怎么实现的呢?
这个检查的代码是位于IopXxxControlFile中的,内核调用NtDeviceIoControl和NtFsControlFile最终都要调用到这个函数中,这个函数负责为设备调用封装IRP并进行IRP发送工作,FSCTL_SET_REPARSE_POINT这个用于设置NTFS
Mount
Point的设备控制码自然也不例外。在这个函数中,微软增加了针对FSCTL_SET_REPARSE_POINT的特殊检查处理,逻辑并不复杂,这里我列出如下:
    if ( IoControlCode == FSCTL_SET_REPARSE_POINT ) 
    {
         ReparseBuffer = Irp_1->AssociatedIrp.SystemBuffer;
         if ( InputBufferLength >= 4 && ReparseBuffer->ReparseTag == IO_REPARSE_TAG_MOUNT_POINT )
         {
           SubjectSecurityContext.ClientToken = 0;
           SubjectSecurityContext.ImpersonationLevel = 0;
           SubjectSecurityContext.PrimaryToken = 0;
           SubjectSecurityContext.ProcessAuditId = 0;
           bIsSandboxedProcess = CurrentThread;
           CurrentProcess = IoThreadToProcess(CurrentThread);
           SeCaptureSubjectContextEx(bIsSandboxedProcess, CurrentProcess, &SubjectSecurityContext);
           LOBYTE(bIsSandboxedProcess) = RtlIsSandboxedToken(&SubjectSecurityContext, AccessMode[0]);
           status = SeReleaseSubjectContext(&SubjectSecurityContext);
           if ( bIsSandboxedProcess )
           {
              status_1 = FsRtlValidateReparsePointBuffer(InputBufferLength, ReparseBuffer);
              if ( status_1 MountPointReparseBuffer.SubstituteNameLength;
               MaxLen = NameLength;
               NameBuffer = ReparseBuffer->MountPointReparseBuffer.PathBuffer;
               ObjectAttributes.Length = 24;
               ObjectAttributes.RootDirectory = 0;
               ObjectAttributes.Attributes = OBJ_FORCE_ACCESS_CHECK | OBJ_KERNEL_HANDLE
               ObjectAttributes.ObjectName = &NameLength;
               ObjectAttributes.SecurityDescriptor = 0;
               ObjectAttributes.SecurityQualityOfService = 0;
               status_2 = ZwOpenFile(&FileHandle, 
                                      0x120116u,
                                      &ObjectAttributes,
                                      &IoStatusBlock,