Number: 5680
User: eaigner
Title: encoding/json: set key converter on en/decoder
Age: 750 days
----------------------------------------
Number: 6050
User: gopherbot
Title: encoding/json: provide tokenizer
Age: 695 days
----------------------------------------
...
现在让我们转到html/template模板包。它使用和text/template包相同的API和模板语言，但是
增加了一个将字符串自动转义特性，这可以避免输入字符串和HTML、JavaScript、CSS或
URL语法产生冲突的问题。这个特性还可以避免一些长期存在的安全问题，比如通过生成
HTML注入攻击，通过构造一个含有恶意代码的问题标题，这些都可能让模板输出错误的输
出，从而让他们控制页面。
下面的模板以HTML格式输出issue列表。注意import语句的不同：
gopl.io/ch4/issueshtml
import "html/template"
var issueList = template.Must(template.New("issuelist").Parse(`
{{.TotalCount}} issues
#
State
User
Title
{{range .Items}}
{{.Number}}
{{.State}}
{{.User.Login}}
{{.Title}}
{{end}}
`))
文本和HTML模板 161
gopl
下面的命令将在新的模板上执行一个稍微不同的查询：
$ go build gopl.io/ch4/issueshtml
$ ./issueshtml repo:golang/go commenter:gopherbot json encoder >issues.html
图4.4显示了在web浏览器中的效果图。每个issue包含到Github对应页面的链接。
图4.4中issue没有包含会对HTML格式产生冲突的特殊字符，但是我们马上将看到标题中含
有 和 字符的issue。下面的命令选择了两个这样的issue：
& issues2.html
图4.5显示了该查询的结果。注意，html/template包已经自动将特殊字符转义，因此我们依然
可以看到正确的字面值。如果我们使用text/template包的话，这2个issue将会产生错误，其
中“&lt;”四个字符将会被当作小于字符“”字符串将会被当作一个链接元素处
理，它们都会导致HTML文档结构的改变，从而导致有未知的风险。
我们也可以通过对信任的HTML字符串使用template.HTML类型来抑制这种自动转义的行为。
还有很多采用类型命名的字符串类型分别对应信任的JavaScript、CSS和URL。下面的程序演
示了两个使用不同类型的相同字符串产生的不同结果：A是一个普通字符串，B是一个信任的
template.HTML字符串类型。
文本和HTML模板 162
gopl
gopl.io/ch4/autoescape
func main() {
const templ = `A: {{.A}}B: {{.B}}`
t := template.Must(template.New("escape").Parse(templ))
var data struct {
A string // untrusted plain text
B template.HTML // trusted HTML
}
data.A = "Hello!"
data.B = "Hello!"
if err := t.Execute(os.Stdout, data); err != nil {
log.Fatal(err)
}
}
图4.6显示了出现在浏览器中的模板输出。我们看到A的黑体标记被转义失效了，但是B没有。
我们这里只讲述了模板系统中最基本的特性。一如既往，如果想了解更多的信息，请自己查
看包文档：
$ go doc text/template
$ go doc html/template
练习 4.14： 创建一个web服务器，查询一次GitHub，然后生成BUG报告、里程碑和对应的用
户信息。
文本和HTML模板 163
gopl
文本和HTML模板 164
gopl
第五章 函数
函数可以让我们将一个语句序列打包为一个单元，然后可以从程序中其它地方多次调用。函
数的机制可以让我们将一个大的工作分解为小的任务，这样的小任务可以让不同程序员在不
同时间、不同地方独立完成。一个函数同时对用户隐藏了其实现细节。由于这些因素，对于
任何编程语言来说，函数都是一个至关重要的部分。
我们已经见过许多函数了。现在，让我们多花一点时间来彻底地讨论函数特性。本章的运行
示例是一个网络蜘蛛，也就是web搜索引擎中负责抓取网页部分的组件，它们根据抓取网页中
的链接继续抓取链接指向的页面。一个网络蜘蛛的例子给我们足够的机会去探索递归函数、
匿名函数、错误处理和函数其它的很多特性。
函数 165
gopl
5.1. 函数声明
函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。
func name(parameter-list) (result-list) {
body
}
形式参数列表描述了函数的参数名以及参数类型。这些参数作为局部变量，其值由参数调用
者提供。返回值列表描述了函数返回值的变量名以及类型。如果函数返回一个无名变量或者
没有返回值，返回值列表的括号是可以省略的。如果一个函数声明不包括返回值列表，那么
函数体执行完毕后，不会返回任何值。 在hypot函数中,
func hypot(x, y float64) float64 {
return math.Sqrt(x*x + y*y)
}
fmt.Println(hypot(3,4)) // "5"
x和y是形参名,3和4是调用时的传入的实数，函数返回了一个float64类型的值。 返回值也可以
像形式参数一样被命名。在这种情况下，每个返回值被声明成一个局部变量，并根据该返回
值的类型，将其初始化为0。 如果一个函数在声明时，包含返回值列表，该函数必须以 return
语句结尾，除非函数明显无法运行到结尾处。例如函数在结尾时调用了panic异常或函数中存
在无限循环。
正如hypot一样，如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类
型。下面2个声明是等价的：
func f(i, j, k int, s, t string) { /* ... */ }
func f(i int, j int, k int, s string, t string) { /* ... */ }
下面，我们给出4种方法声明拥有2个int型参数和1个int型返回值的函数.blank identifier(译者
注：即下文的_符号)可以强调某个参数未被使用。
func add(x int, y int) int {return x + y}
func sub(x, y int) (z int) { z = x - y; return}
func first(x int, _ int) int { return x }
func zero(int, int) int { return 0 }
fmt.Printf("%T\n", add) // "func(int, int) int"
fmt.Printf("%T\n", sub) // "func(int, int) int"
fmt.Printf("%T\n", first) // "func(int, int) int"
fmt.Printf("%T\n", zero) // "func(int, int) int"
函数声明 166
gopl
函数的类型被称为函数的标识符。如果两个函数形式参数列表和返回值列表中的变量类型一
一对应，那么这两个函数被认为有相同的类型和标识符。形参和返回值的变量名不影响函数
标识符也不影响它们是否可以以省略参数类型的形式表示。
每一次函数调用都必须按照声明顺序为所有参数提供实参（参数值）。在函数调用时，Go语
言没有默认参数值，也没有任何方法可以通过参数名指定形参，因此形参和返回值的变量名
对于函数调用者而言没有意义。
在函数体中，函数的形参作为局部变量，被初始化为调用者提供的值。函数的形参和有名返
回值作为函数最外层的局部变量，被存储在相同的词法块中。
实参通过值的方式传递，因此函数的形参是实参的拷贝。对形参进行修改不会影响实参。但
是，如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可
能会由于函数的间接引用被修改。
你可能会偶尔遇到没有函数体的函数声明，这表示该函数不是以Go实现的。这样的声明定义
了函数标识符。
package math
func Sin(x float64) float //implemented in assembly language
函数声明 167
gopl
5.2. 递归
函数可以是递归的，这意味着函数可以直接或间接的调用自身。对许多问题而言，递归是一
种强有力的技术，例如处理递归的数据结构。在4.4节，我们通过遍历二叉树来实现简单的插
入排序，在本章节，我们再次使用它来处理HTML文件。
下文的示例代码使用了非标准包 golang.org/x/net/html ，解析HTML。golang.org/x/... 目录下
存储了一些由Go团队设计、维护，对网络编程、国际化文件处理、移动平台、图像处理、加
密解密、开发者工具提供支持的扩展包。未将这些扩展包加入到标准库原因有二，一是部分
包仍在开发中，二是对大多数Go语言的开发者而言，扩展包提供的功能很少被使用。
例子中调用golang.org/x/net/html的部分api如下所示。html.Parse函数读入一组bytes.解析
后，返回html.node类型的HTML页面树状结构根节点。HTML拥有很多类型的结点如text（文
本）,commnets（注释）类型，在下面的例子中，我们 只关注形式的结
点。
golang.org/x/net/html
package html
type Node struct {
Type NodeType
Data string
Attr []Attribute
FirstChild, NextSibling *Node
}
type NodeType int32
const (
ErrorNode NodeType = iota
TextNode
DocumentNode
ElementNode
CommentNode
DoctypeNode
)
type Attribute struct {
Key, Val string
}
func Parse(r io.Reader) (*Node, error)
main函数解析HTML标准输入，通过递归函数visit获得links（链接），并打印出这些links：
递归 168
gopl
gopl.io/ch5/findlinks1
// Findlinks1 prints the links in an HTML document read from standard input.
package main
import (
"fmt"
"os"
"golang.org/x/net/html"
)
func main() {
doc, err := html.Parse(os.Stdin)
if err != nil {
fmt.Fprintf(os.Stderr, "findlinks1: %v\n", err)
os.Exit(1)
}
for _, link := range visit(nil, doc) {
fmt.Println(link)
}
}
visit函数遍历HTML的节点树，从每一个anchor元素的href属性获得link,将这些links存入字符
串数组中，并返回这个字符串数组。
// visit appends to links each link found in n and returns the result.
func visit(links []string, n *html.Node) []string {
if n.Type == html.ElementNode && n.Data == "a" {
for _, a := range n.Attr {
if a.Key == "href" {
links = append(links, a.Val)
}
}
}
for c := n.FirstChild; c != nil; c = c.NextSibling {
links = visit(links, c)
}
return links
}
为了遍历结点n的所有后代结点，每次遇到n的孩子结点时，visit递归的调用自身。这些孩子结
点存放在FirstChild链表中。
让我们以Go的主页（golang.org）作为目标，运行findlinks。我们以fetch（1.5章）的输出作
为findlinks的输入。下面的输出做了简化处理。
递归 169
gopl
$ go build gopl.io/ch1/fetch
$ go build gopl.io/ch5/findlinks1
$ ./fetch https://golang.org | ./findlinks1
#
/doc/
/pkg/
/help/
/blog/
http://play.golang.org/
//tour.golang.org/
https://golang.org/dl/
//blog.golang.org/
/LICENSE
/doc/tos.html