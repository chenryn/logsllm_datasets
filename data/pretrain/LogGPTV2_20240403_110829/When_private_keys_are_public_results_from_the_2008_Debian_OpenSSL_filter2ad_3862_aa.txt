title:When private keys are public: results from the 2008 Debian OpenSSL
vulnerability
author:Scott Yilek and
Eric Rescorla and
Hovav Shacham and
Brandon Enright and
Stefan Savage
When Private Keys are Public:
Results from the 2008 Debian OpenSSL Vulnerability
Scott Yilek
UC San Diego
PI:EMAIL
Eric Rescorla
PI:EMAIL
RTFM, Inc.
Hovav Shacham
UC San Diego
PI:EMAIL
Brandon Enright
UC San Diego
PI:EMAIL
ABSTRACT
We report on the aftermath of the discovery of a severe vul-
nerability in the Debian Linux version of OpenSSL. Systems
aﬀected by the bug generated predictable random numbers,
most importantly public/private keypairs. To study user
response to this vulnerability, we collected a novel dataset
of daily remote scans of over 50,000 SSL/TLS-enabled Web
servers, of which 751 displayed vulnerable certiﬁcates. We
report three primary results. First, as expected from pre-
vious work, we ﬁnd an extremely slow rate of ﬁxing, with
30% of the hosts vulnerable when we began our survey on
day 4 after disclosure still vulnerable almost six months
later. However, unlike conventional vulnerabilities, which
typically show a short, fast ﬁxing phase, we observe a much
ﬂatter curve with ﬁxing extending six months after the an-
nouncement. Second, we identify some predictive factors for
the rate of upgrading. Third, we ﬁnd that certiﬁcate author-
ities continued to issue certiﬁcates to servers with weak keys
long after the vulnerability was disclosed.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General
—Security and protection; C.2.2 [Computer-Communi-
cation Networks]: Network Protocols; C.2.3 [Computer-
Communication Networks]: Network Operations
General Terms
Measurement, Security
Keywords
Debian, OpenSSL, PRNG, entropy, attacks, survey
1.
INTRODUCTION
OpenSSL is a commonly-used cryptographic library with
related command-line tools. Beginning in September, 2006,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’09, November 4–6, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-770-7/09/11 ...$10.00.
Stefan Savage
UC San Diego
PI:EMAIL
Figure 1: Overview of certiﬁcate updating
the package for OpenSSL included in the Debian distribu-
tion of Linux was modiﬁed to incorporate a bugﬁx intended
to eliminate uninitialized memory reads ﬂagged by the mem-
ory checking tool Valgrind. The bugﬁx did not just this but
more:
it eviscerated OpenSSL’s entropy gathering. Until
the problem was noticed by Luciano Bello [18] in May of
2008, the entropy available to applications running on De-
bian (and Debian-derived distributions, such as Ubuntu)
was severely constrained. This vulnerability had a major
impact on SSL/TLS and SSH servers. Each server pos-
sesses a public/private keypair, but any keypairs generated
on an aﬀected machine are easily predictable to an attacker.
Knowledge of the private key allows an attacker to imper-
sonate that server even when SSL/TLS or SSH is used and
in many cases to undetectably decrypt traﬃc to and from
the server.
Recovery from this bug was more complicated than for a
typical vulnerability. Patching aﬀected machines, by itself,
provided protection only against a small, less important class
of attacks. Because the server’s long-lived keypair was com-
promised, administrators needed to generate a new keypair
and disseminate it to users. For SSL servers this typically
required obtaining a new certiﬁcate for that keypair, a fairly
heavyweight operation for certiﬁcates that aren’t self-signed.
The goal of this work is to measure recovery from this
type of vulnerability and compare it to what is known about
recovery from other vulnerabilities. While it is infeasible
to measure when servers are ﬁxed, we can easily measure
when they begin to display strong rather than weak public
keys. We performed a daily survey of popular SSL servers,
0501001500.40.50.60.70.80.91.0Days since first measurementFraction of HCs Affected15beginning shortly after the bug was disclosed and continuing
for some six months. Approximately 1.5% of those servers
displayed weak keys and we were able to study the time
course of ﬁxing. As shown in Figure 1, the replacement of
weak keys is a long, slow process, quite diﬀerent from the
fast ﬁxing processes seen with typical vulnerabilities [15, 16].
[Hashmarks on the diagram indicate censored units, which
stopped responding during the survey while still vulnerable.]
Our survey also yields new information about real-world
SSL usage. Due to the bug’s eﬀects, we can determine, for
each aﬀected certiﬁcate, the architecture of the machine used
to generate it and the process ID of the responsible process.
This is the ﬁrst time such data has been available. Even for
the majority of sites unaﬀected by the bug, our data reveals
how certiﬁcates of popular SSL sites are updated over time.
Our collection of a new dataset by diﬀerent methods allows
us to reexamine previous work on SSL server demograph-
ics. We believe our dataset will be useful for other studies.
See the Web page for this paper for information on obtain-
ing a copy: https://www-cse.ucsd.edu/groups/security/
debiankey/.
2. RELATED WORK
We build on two major previous lines of work: demo-
graphic surveys of SSL servers and longitudinal studies of
vulnerability ﬁxing.
SSL Server Surveys. There have been a number of pre-
vious surveys of the properties of SSL servers, mostly fo-
cusing on deployment of new versions of SSL, support for
strong cryptographic algorithms, and valid third-party cer-
tiﬁcates.
In 2000, Murray [12] surveyed 8081 SSL servers
and found that around a third supported “weak” algorithms
only (shockingly weak, in fact, by modern standards). He
also found that around 10% of servers had expired certiﬁ-
cates and around 3% had self-signed certiﬁcates.
In 2005
and 2006 Lee [9] et al. repeated and expanded upon this
work with a sample of 19,429 servers. They found that the
situation had improved signiﬁcantly; less than 5% of servers
were weak by Murray’s deﬁnition, although an uncomfort-
ably high percentage of servers still supported the old “ex-
port” cipher suites (>90%) and SSL version 2 (>80%). They
did not measure certiﬁcate validity.
Netcraft [13] runs a monthly survey attempting to cover
all servers on the Internet. While this survey does not mea-
sure cipher suite support, Netcraft does collect information
on certiﬁcate validity: they ﬁnd that around 25% (estimated
from their ﬁgures; raw numbers were not provided) of sites
have self-signed certiﬁcates and less than half are from a
“valid CA”. Netcraft doesn’t deﬁne this term but presum-
ably it refers to one of the major CAs in the browser root
list. Note that this data is very diﬀerent from that reported
by Murray, who found mostly valid certiﬁcates. We shed
some light on this discrepancy in Section 7.1.
While our work is not speciﬁcally intended as a replica-
tion of either Lee et al.’s or Netcraft’s research, we collect
much of the same data as a side eﬀect of our measurements.
Section 7.1 describes some interesting contrasts.
Studies of Vulnerability Fixing. The topic of upgrad-
ing rate in response to vulnerabilities has been studied by
Rescorla [16] and Ramos et al. [15]. The general pattern for
externally visible “critical vulnerabilities” seems to be of a
fast (half-life on the order of 10–20 days) exponential ﬁxing
phase immediately after the announcement of the vulnera-
bility. The OpenSSL vulnerability studied by Rescorla pro-
vides probably the closest parallel: that study showed two
rounds of patching, one in response to the initial vulnera-
bility and one in response to the release of a worm. Each
wave was relatively fast, with the vast majority of patching
happening within two weeks and almost none after a month.
Ramos reports a similar set of patterns as well as that some
vulnerabilities show only irregular decline or no decline at
all (this may be an artifact of survey methodology). The
vulnerability we study exhibits yet a diﬀerent pattern: a
long, slow, ﬂat, ﬁxing cycle that actually accelerates in the
ﬁrst 30 days with signiﬁcant levels of ﬁxing as far out as six
months. In Section 7.2 we provide some potential explana-
tions for this diﬀerence.
3. BACKGROUND: SSL KEY EXCHANGE
In order to understand the issues discussed in this paper,
it is necessary to have a basic understanding of how SSL
works. In this section, we provide a brief overview of the
relevant aspects of SSL. Although the purpose of SSL is to
protect data, like many other cryptographic protocols such
as SSH [20] and IPsec [4], it starts with a handshake phase
which authenticates the peers and establishes joint keying
material. That keying material is then used to protect the
data ﬂowing between the communicating peers. Figure 2
shows a highly simpliﬁed view of the most common variant
of the full SSL handshake: “static RSA”. [The technical term
for the set of cryptographic algorithms used for a given SSL
connection is cipher suite.]
Client
Server
ClientRandom
ServerRandom, Certiﬁcate
E(Kpub,PreMaster Secret)
Figure 2: SSL static RSA handshake
In the static RSA version of SSL, the server generates a
single, long-term RSA keypair (Kpub, Kpriv) used for each
transaction.
In theory the server operator then acquires
a certiﬁcate from a well-known certiﬁcate authority (CA)
attesting to the binding between the RSA public key and
the server’s domain name (e.g, www.amazon.com). Any client
that trusts the CA can then verify that binding. In some
cases, however, the server acts as its own CA and generates
a “self-signed” certiﬁcate. Such a certiﬁcate is just a key
carrier: clients cannot verify the server’s identity unless they
have some independent channel for verifying the certiﬁcate.
When the client contacts the server, it sends a random
nonce (the ClientRandom value). This is sent in the clear
and is used solely to ensure uniqueness of the keying mate-
rial for each connection. The server responds with its own
ServerRandom value and a copy of its certiﬁcate. All of this
information is also known to any observer. The client can
then verify the server’s certiﬁcate and extract Kpub. It then
generates a random PreMasterSecret (PMS) value; encrypts
that value under Kpub and sends the resulting Encrypted-
PreMasterSecret (EPMS) to the server. Because the server
knows Kpriv it can decrypt the EPMS to recover the PMS.
16/
/
o
o
/
/
At this point, both the client and the server know the PMS,
but any observer who doesn’t know the server’s private key
does not. The PMS is then mixed with the client and server
random values to form the keys which are used to encrypt
traﬃc between client and server.
This exchange uses four random values: the server’s RSA
keypair, the client and server randoms, and the PMS. How-
ever, it’s important to recognize that the client and server
randoms need not be secret (and in fact only really need to
be unique) and that the server’s RSA keypair is not gener-
ated in real-time; only the PMS must be generated securely
during the connection.
The other common full handshake variant, “ephemeral
Diﬃe-Hellman” (DHE), is shown in Figure 3; it has a rather
diﬀerent set of properties. As before, the server has a long-
term RSA key (sometimes this is a DSA key, but so rarely as
to be irrelevant for the purposes of this discussion), but in-
stead of having the client encrypt under that key, the client
and the server do a Diﬃe-Hellman key exchange, with each
side generating a new ephemeral DH key for the handshake.
In order to authenticate the server side (as with static RSA,
the client is not generally authenticated), the server signs
its DH share with Kpriv. Once the client has received and
veriﬁed the server’s share, it generates its own DH share
and sends it to the server. The combined DH shared secret
(often known as ZZ) is used as the PMS.
Client
Server
ClientRandom
ServerRandom, Certiﬁcate,S(Kpriv,Ys)
Yc
Figure 3: SSL ephemeral DH handshake
Unlike the static RSA mode, in DHE mode both sides need
to generate strong random numbers. The security of Diﬃe-
Hellman depends on the randomness of both sides’ private
keys; an attacker who can predict either side’s DH private
key can decrypt the connection. By contrast, an attacker
who knows the server’s RSA private key can impersonate
the server but cannot passively decrypt connections which
use DHE mode. This property is known as Perfect Forward
Secrecy (PFS).
There is one ﬁnal variant of SSL to consider, one in which
neither DH nor RSA is used. Because DH and RSA opera-
tions are fairly computationally expensive, SSL incorporates
a “session resumption” feature. The ﬁrst time that a client
and server pair communicate they establish a PMS which
is then converted into a long-term MasterSecret (MS). The
server provides the client with a “session id” which it can use
to establish a new connection based on the same MS. The
security of this resumed connection of course depends on the
original handshake, but because the client and server ran-
dom values are new, the connection will use diﬀerent traﬃc
keys to encrypt the actual data, thus protecting against a
variety of cryptographic attacks (replay, cut-and-paste, etc.)
4. THE VULNERABILITY
The history of the Debian OpenSSL randomness vulnera-
bility has been well-covered elsewhere [7, 6, 8], and we will
Instead, we explain the technical details of