which were then stored in a sqlite3 database that was keyed
from the process id of the calling function. Keying oﬀ the
pid was important to allowing the database to be shared
between processes, preventing ﬁle descriptor collisions.
Client Application: SSL_connect()CertShim: Disable SSL struct callbacksCertShim: Call libssl SSL_connect()CertShim: Call Veriﬁcation ModuleTerminate connection and return errorFatal connectionerrorClient Application: ExecutedELF preloads CertShimCertShim: Init,Load policies, hooksCertShim: Check veriﬁcation result against policyReturn OK on success or connection error on failure398cmd = " / usr / bin / git " ;
vote = 1.00;
methods : {
c e r t _ a u t h o r i t y = false ;
c o n v e r g e n c e
= true ;
= false ;
c e r t _ p i n n i n g
c e r t _ a u t h o r i t y = true ;
c o n v e r g e n c e
dane
vote
= false ;
= false ;
= 1.00;
1 g l o b a l _ p o l i c y : {
2
3
4
5
6
7 };
8
9 c o m m a n d _ p o l i c i e s : ({
10
11
12
13
14
15
};
16 } , {
17
18
19
20
21
22
23
24 }) ;
25
26 h o s t _ p o l i c i e s : ({
27
28
29
30
31
32
33 }) ;
c e r t _ p i n n i n g
c o n v e r g e n c e
dane
};
};
cmd = " / usr / bin / lynx " ;
vote = 0.50;
methods : {
= true ;
= true ;
= true ;
host = " www . t o r p r o j e c t . org " ;
vote = 1.00;
methods : {
c e r t _ a u t h o r i t y = false ;
dane = true ;
conﬁg.cfg
Figure 4: A sample CertShim policy conﬁguration ﬁle
Figure 4 shows an example conﬁguration ﬁle that illus-
trates the granularity and ﬂexibility of the CertShim policy
conﬁguration engine. Here, the global policy is set to force
traditional CA veriﬁcation on all SSL connections. However,
this user connects to a GitLab versioning server that makes
use of a self-signed certiﬁcate, so they created a command
policy entry for git that uses the Convergence module. The
user also wants stronger assurances than traditional CAs
can provide when browsing with Lynx, so they create an
additional command entry that queries all 4 modules and
requires that at least 2 return true. This entry inherits its
cert_authority value from the global policy. Finally, when
connecting to domains that are known to oﬀer DANE sup-
port such as torproject.org, the user adds a host policy
entry that requires DANE validation. Policies that toler-
ate failure in this fashion are useful when using CertShim
as a platform for testing CA alternatives that may not be
entirely stable.
We envision that various stakeholders will share the re-
sponsibility of CertShim policy creation, alleviating the
burden on end users. While some users may wish to deﬁne
their own certiﬁcate management policies, software devel-
opment communities could also release application-speciﬁc
policies, similar to the manner in which selinux policy mod-
ules are included in software packages. Operating system de-
velopment communities that make use of CertShim could
also include a policy of safe defaults in their distribution.
3.5 Java Instrumentation
In the Java architecture, we cannot interpose on SSL li-
braries such as JSSE and BouncyCastle through Linux’s dy-
namic linking.
Instead, we make use of the java.lang.-
instrumentation interface to achieve similar functionality
inside of the JVM. We successfully used this method to pro-
vide CertShim-like functionality by hooking the checkI-
dentity() function in JDK 6’s JSSE, and the checkIden-
tity() and setEndpointIdentificationAlgorihtm function
of JDK 7. Georgiev et al. point to misuse of the low level
JSSE SSLSocketFactory API, which does not perform host-
name veriﬁcation, as one of the biggest SSL vulnerabilities
in Java [19]. While in control of these functions, CertShim
overrides the applications’ conﬁguration in order to force
hostname veriﬁcation. Like our C-based mechanism, our in-
strumentation object can be injected into all Java calls by
setting an environment variable. Java is not yet fully sup-
ported in CertShim, as we have not re-implemented our
policy engine. However, this mechanism demonstrates how
our approach can be generalized to work with Java.
4. ANALYSIS
We now consider the extent to which CertShim meets our
3 primary system goals: override insecure SSL usage, enable
SSL trust enhancements, and maximize compatibility. We
consider the extent to which we achieve maximal coverage
in Section 5.
4.1 Override Insecure SSL Usage
Recent work has uncovered strong evidence that insecure
certiﬁcate handling practices are often a result of developer
confusion and apathy [16, 17, 19]. Rather than wait on de-
velopers, CertShim automatically ﬁxes these vulnerabilities
without requiring developer intervention. Enforcing safe de-
faults for SSL does not even require policy conﬁguration, as
CertShim installs with a global default policy that enforces
CA veriﬁcation. We also include fail-safe protections to the
policy engine, such as the vote key defaulting to 1.00 if left
accidentally unspeciﬁed by the user.
CertShim supports all applications that dynamically link
to OpenSSL and GnuTLS, two of the most popular open
source SSL libraries. In Section 5, we show that this provides
support for 94% of SSL usage in the most popular Ubuntu
packages. Most excitingly, CertShim ﬁxes certiﬁcate veriﬁ-
cation in data-transport libraries that are broken by design,
including urllib/urllib2, httplib, python’s ssl module,
and perl’s fsockopen call. This aspect of CertShim proves
critical, as the survey in Section 5 ﬁnds that such libraries
represent up to 33% of SSL usage in Ubuntu packages.
4.2 Enable SSL Trust Enhancements
In this work, we implement veriﬁcation modules for 3 ex-
emplar CA alternatives, making them immediate candidates
for system-wide deployment. Switching from CA veriﬁca-
tion to an alternative such as Convergence requires a change
of just 2 lines in the CertShim conﬁguration ﬁle. Due to
incremental deployment or design limitations, some CA al-
ternatives are not universally applicable to the entire SSL
ecosystem. For example, not all HTTPS domains have pub-
lished TLSA certiﬁcates for DANE, and other domains will
be inside closed networks that cannot be veriﬁed with Con-
vergence’s multi-path probing. We have further contributed
399to the adoptability of CA alternatives by introducing a pol-
icy engine that allows for application and domain speciﬁc
certiﬁcate handling. With CertShim, it is possible to force
DANE veriﬁcation only on domains that are known to be
supported. CertShim even helps to support traditional CA
veriﬁcation by providing a multi-path probe module that
can be enabled speciﬁcally for applications and domains that
make use of self-signed certiﬁcates.
4.2.1 Consensus Veriﬁcation
CertShim further improves SSL security by providing the
ﬁrst practical means of reconciling the results of multiple
certiﬁcate veriﬁcation handlers. In so doing, it is possible
to overcome practical problems or trust concerns that are
limitations of diﬀerent architectures. To demonstrate the
power of this approach, we present sample policy entries
that represent unique trust and usage models for SSL. For a
detailed explanation of the security properties of these sys-
tems, please refer to the original works. We believe that
the combining of diﬀerent veriﬁcation primitives through
consensus voting represents a promising new direction for
securing SSL.
Distrust the CAs. Convergence was motivated by the goal
of completely removing certiﬁcate authorities from the SSL
trust model. CAs are replaced with notaries, trusted third
parties that are incentivized to be trustworthy agents due
to trust agility, the ability of the user to change who their
trusted notaries at any time. However, multi-path probing
cannot validate all domains. One option would be to com-
bine Convergence with client-based key pinning:
cert_pinning = true;
convergence = true;
vote = 0.50;
This conﬁguration allows for a CA-free trust model. When
Convergence is unable to validate a domain, CertShim would
default to a trust-on-ﬁrst-use model [5]. In the event that a
certiﬁcate is updated, in most cases Convergence would be
able to re-validate the domain, making up for key pinning’s
inability to oﬀer context in the event of a benign anomaly. In
the event of a discrepancy between a cached certiﬁcate and
the certiﬁcate presented by the host, the key pinning mod-
ule would fail to verify the certiﬁcate, requiring the user to
manually decide whether to trust the presented certiﬁcate.
Server-side MitM Defense. Convergence relies on net-
work path diversity in order to validate certiﬁcates. While
this is adequate for detecting local MitM attacks at rogue
access points, if a powerful adversary such as a nation state
can control all paths between the server and the notaries,
Convergence could yield a false negative during an attack.
To account for this possibility, CertShim could tether its
trust to the DNS architecture:
convergence = true;
dane = true;
vote = 1.00;
This policy increases attack complexity by requiring the
attacker to control the DNSSEC resolvers and a valid certiﬁ-
cate from a trusted CA in addition to all network paths to
the server. We note that this policy only works for domains
that oﬀer DANE support. In environments where DNSSEC
is actively being used, the use of Convergence provides a
hedge against DNSSEC server compromises.
4.3 Maximize Compatibility
As the invasiveness of our function hooks increased, so
too did the likelihood that CertShim would break applica-
tions. Developers could not have anticipated our layering
of additional certiﬁcate veriﬁcation methods on top of their
code. Applications may disable certiﬁcate veriﬁcation in or-
der to support self-signed certiﬁcates [17], contact domains
that are not compatible with certain forms of veriﬁcation, or
even have implemented their own security features such as
key pinning. As a result, CertShim’s actions could trigger
unexpected behavior.
These realities motivated the creation of our policy engine,
which oﬀers the ability to completely eliminate compatibility
issues by performing application and domain speciﬁc cer-
tiﬁcate handling. Regardless of the policy in eﬀect for a
given connection, the CertShim hook return values strictly
adhere to the OpenSSL and GnuTLS APIs. This implies
that existing applications are unable to detect the presence
of CertShim while allowing CertShim to remain entirely
method-agnostic. That is, CertShim does not interfere with
the logic built into existing applications since return values
remain true to the OpenSSL and GnuTLS APIs and Cert-
Shim itself holds no opinion on which veriﬁcation methods it
should or should not use; CertShim can even be conﬁgured
to take no action for a given application or domain. Further-
more, the success or failure of alternate veriﬁcation methods
is translated into return codes consistent with OpenSSL and
GnuTLS.
5. EVALUATION
In this section, we evaluate CertShim for both its ability
to support real world SSL usage and the performance costs
it imposes on SSL connections.
5.1 Coverage
Our investigation of CertShim coverage is comprised of
two parts. We ﬁrst perform a small-scale survey in which
we manually test applications and libraries to conﬁrm sup-
port, followed by a large-scale survey in which we conduct
semi-automated source code inspection to estimate Cert-
Shim coverage for a fuller distribution of software.
5.1.1 Manual Testing
Our evaluation of CertShim coverage began with man-
ual testing of popular SSL applications and middleware.
Presently, CertShim is conﬁrmed to support 12 diﬀerent
SSL implementations or wrappers, shown in Table 2. Al-
though it was apparent that the listed SSL scripting wrap-
pers all used OpenSSL/GnuTLS backends, it was necessary
to manually conﬁrm compatibility because the wrappers oc-
casionally made use of the SSL API in unexpected ways.
For example, we discovered that CertShim does not sup-
port php_curl due to the fact that this library statically
links libcurl. Continuing with manual testing, we selected
a handful of common SSL applications to conﬁrm CertShim
support, shown in Table 3. Of these, CertShim successfully
hooked each application except for Firefox, which is due to
the fact that Mozilla uses LibNSS rather than OpenSSL or
GnuTLS. We discuss the broader implications of these cov-
erage gaps in Section 6.
400Program
Success Conﬁrmed With
libcurl
Yes
gnutls26
Yes
libssl1.0.0
Yes
SSLSocketFactory Yes
Yes
perl socket::ssl
No
php curl
Yes
fsockopen
httplib
Yes
Yes
pycurl
Yes
pyOpenSSL
Yes
python ssl
Yes
urllib, urllib2
gnutls-cli
Yes
C program
C program
C program