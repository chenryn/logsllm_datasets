4
4
12
4
10
4
9
9
3
3
8
3
6
3
5
5
3
Total
‘c’
‘d’
‘g’
‘f’
‘a’
‘b’
‘e’
‘h’
‘q’
#
3
3
2
2
2
‘p’
‘x’
‘j’
‘n’
‘z’
141
or equal to a threshold θ, the two characters are identified
as homoglyphs. In this work, we empirically derived a con-
servative threshold as θ = 4; i.e., a pair of characters are
detected as homoglyphs if ∆ ≤ 4. Figure 6 shows examples
of Unicode characters with various values of ∆. Although
∆ = 4 would not indicate obvious false positives (i.e., those
that should not be detected as homoglyphs), we can observe
several false negatives (i.e., those that could be detected as
homoglyphs) among characters with ∆ ≥ 5. In Section 4, we
consider an evaluation of the validity of the threshold by
presenting a human study.
Step III Finally, from the extracted pairs, we eliminate sparse
characters that contain fewer than 10 black pixels. The thresh-
old was empirically derived as a result of careful manual
effort. In most cases, these characters are used for punctua-
tion, spacing/nonspacing, or combining in various languages.
Figure 7 presents examples of the eliminated characters.
After performing the four processes described above, we ob-
tained a set of 12,636 characters. The set constitutes 13,126 pairs,
which we named SimChar. As shown in Table 1, the size of the
intersection of SimChar and UC is fairly small, indicating that Sim-
Char successfully adds new homoglyphs that have not been covered
by UC. We also note that there are several characters that are not
covered by SimChar, but are covered by UC. Thus, the two char-
acter sets can be used complementary to identify potential IDN
homograph attacks.
3.4 Characteristics of SimChar
Homoglyphs of Latin Letters As the majority of popular web-
sites make use of the 26 Latin letters to construct their primary
domain names, it is essential to study the extent to which our ho-
moglyph database covers the homoglyphs of Latin letters. Table 3
lists the results. We first notice that SimChar successfully extracted
new homoglyphs that have not been contained in UC. For instance,
whereas the intersection of IDNA2008 and UC contains only three
homoglyphs for the Basic Latin lowercase letter ‘e’, SimChar con-
tains 26 homoglyphs of ‘e’ as shown in Figure 6. We also notice
that several characters have many homoglyphs. In total, SimChar
contains 351 homoglyphs of Latin letters, whereas UC contains
141 of these homoglyphs. In the SimChar dataset, the Basic Latin
lowercase letter ‘o’ has 40 characters that are visually similar to it,
indicating that the character is “vulnerable” to an IDN homograph
attack. We note that the intersection of the sets of homoglyphs
for ‘o’ for SimChar and UC contains 5 characters, implying that
they cover different sets of homoglyphs of ‘o’; i.e., the majority of
homoglyphs of ‘o’ listed in SimChar were accented characters of
‘o’, whereas the majority of homoglyphs of ‘o’ listed in UC were
characters of which the appearance resembles a circle.
Unicode Blocks In Unicode, a block is a contiguous range of code
points. A block consists of hundreds to tens of thousands of char-
acters. The characters contained in a block are typically associated
with the writing systems in which the characters are used; e.g., the
Basic Latin block consists of all the characters and control codes of
the ASCII character set. The majority of the blocks are classified
into two planes: the Basic Multilingual Plane (BMP) and Supple-
mentary Multilingual Plane (SMP). In the BMP, the largest block
is the CJK Unified Ideograph, the characters of which are used in
the Chinese, Japanese, and Korean languages, and it contains more
than 20 K of Chinese characters.
Table 4 compares UC and SimChar with respect to their top-
5 blocks. Although the two scripts, CJK Unified Ideographs and
Arabic are commonly found, the breakdown of these scripts differ
from each other, indicating that the coverage of UC and SimChar
is different. Our contribution is to automatically build SimChar,
which can complement the manually compiled list of homoglyphs,
i.e., UC. We note that the .com TLD is allowed to use characters
from either of these blocks for IDN.
4 PERFORMANCE EVALUATION
This section presents our evaluation of the performance of the
ShamFinder framework from the viewpoints of (1) human percep-
tion and (2) computational cost.
4.1 Human Perception
We evaluated the human perception of the homoglyphs listed in
our SimChar database; i.e., to determine whether humans perceive
their homoglyphs as confusing. To this end, we employed a series of
human study experiments using a crowd sourcing platform, Ama-
zon Mechanical Turk (MTurk in short). We designed two types of
experiments. In our first experiment, we studied the effect of the
threshold ∆, which was introduced in Section 3.2, on the extent to
454
ShamFinder
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
∆ = 0 ∆ = 1
∆ = 2
∆ = 3
∆ = 4
∆ = 5
∆ = 6
Figure 6: Basic Latin lowercase letter ‘e’ and characters under different values of the threshold ∆. In this work, characters with
∆ ≤ 4 are detected as homoglyphs.
U+1be7
U+2df5
U+a953
U+abec
Figure 7: Examples of sparse characters.
Figure 8: Screenshot of the MTurk task.
which SimChar homoglyphs could be confused, i.e., their “confus-
ability.” This experiment is intended to demonstrate the validity of
the threshold we determined for detecting homoglyphs, i.e., ∆ = 4.
Next, we compare the confusability of SimChar and UC, with the
baseline of random pairs of characters.
Experimental Setup We created a crowd sourcing task that asks
a participant whether pairs of two characters, which may con-
tain homoglyphs, are confusing or distinct. Before performing the
large-scale experiment, we carefully designed our experiment by
conducting a series of pilot study trials that enabled us to adjust
the wording of questions and answers. Several trials of the pilot
study allowed us to obtain useful feedback from coworkers and
participants, and we ultimately worded the question as “There are
two characters shown in the image. Are they distinct or confusing?.”
In terms of the answer, the following words were selected as the
options for the five-level Likert scale score, “1: very distinct,” “2:
distinct,” “3: neutral,” “4: confusing,” and “5: very confusing.” In this
work, we refer to this score as the “confusability score.”
Figure 8 presents a screenshot of an assignment in the task
presented to participants. The purpose of the assignment was to
judge whether two characters contained in an image are distinct
or confusing. Before conducting crowd sourcing experiments, we
measured the average time to finish an assignment by ourselves
and found an assignment to require approximately 15 seconds to
455
Figure 9: Boxplot of the confusability scores for pairs of
SimChar homoglyphs for different values of the threshold,
∆. The notch in each box represents the median and the
dashed lines represent the mean values. Whiskers represent
1.5 IQR.
complete, including the time to select an answer, submit it via
the web interface, and wait for the page transition to the next
assignment. On the basis of this observation, we set the reward per
assignment as 0.05 USD, implying that the reward is equivalent to
an average hourly compensation of 12 USD. As the minimum wage
in the USA is in the range of 7–12 USD / hour [41] (as of March
2019), we believe our payment configuration was appropriate, i.e.,
it was neither too low nor too high.
To ensure the quality of experiments, we used the following two
criteria when recruiting participants: (1) the number of approved
tasks of a participant should exceed 50 and (2) the participant should
have a task approval rate greater than 97%.
To check whether a participant was careful when completing
the task, we inserted dummy images that contain two completely
distinct random characters. A participant who judged a dummy
image as being either “4: confusing” or “5: very confusing” had
all their responses removed, assuming that the reliability of the
participant was low. We likewise removed all the responses from
participants who answered “1: very distinct” or “2: distinct” to a
homoglyph contained in SimChar with the threshold of ∆ = 0, i.e.,
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Hiroaki Suzuki, Daiki Chiba, Yoshiro Yoneya, Tatsuya Mori, and Shigeki Goto
U+0075
U+118D8
U+0079
U+028F
U+0079
U+118DC
Figure 11: Three pairs of homoglyphs listed in UC. They
were most frequently judged as “very distinct” by the par-
ticipants. They are homoglyphs of ‘u’ (left), ‘y’ (middle), and
‘y’ (right), respectively.
Figure 10: Boxplot of the confusability score for the pairs of
three sets: Random (left), SimChar (middle), and UC (right).
The threshold of SimChar was set to ∆ ≤ 4. The boxplot con-
figuration is the same as in Figure 10.
when the glyphs of the two characters were perfectly identical with
the font we used (GNU Unifont). Although this strategy may have
aggressively removed the useful responses by a participant who
accidentally made a single mistake, we decided to overcome the
drawback by simply increasing the number of responses/samples.
Experiment 1: Threshold of SimChar We first studied the way
in which the threshold, ∆, affects human perception. In this experi-
ment, we used homoglyphs of the Basic Latin letters (lowercase),
the numbers of which are listed in Table 3. For each letter, we
extracted the glyphs with a distance of ∆ ∈ {0, . . . , 8}. For each
∆, we randomly sampled 20 pairs, where a pair consists of a let-
ter and its potential homoglyph detected with the threshold ∆. In
addition, we added 30 of dummy pairs that contain two distinct
letters randomly generated. These 20 × 9 = 180 pairs of potential
homoglyphs and 30 random pairs were judged by 10 participants
(after the removal of unreliable participants). In total, we obtained
900 effective responses for the 180 pairs.
Figure 9 presents the result. As expected, the confusability score
decreases as the threshold increases. When ∆ = 4, the mean and
median of the confusability score were 3.57 and 4, respectively. This
observation implies that the homoglyphs detected with the thresh-
old were mostly perceived as “confusing.” When ∆ = 5, the mean
and median of the confusability score were 2.57 and 2, respectively,
implying that the detected homoglyphs were mostly perceived as
“distinct.” On the basis of these observations, we adopted ∆ = 4 as
the threshold for extracting homoglyphs; i.e., glyphs with ∆ ≤ 4
were detected as homoglyphs. Although several pairs with the
threshold of ∆ = 5 had a high confusability score, we adopted a
conservative decision. Extracting further confusable homoglyphs
from these potential homoglyphs remains as a future task.
Experiment 2: Confusability of UC and SimChar. Next, we
studied the confusability of UC in comparison with SimChar for
which we repeated the same procedure shown above. We sampled
30 of the homoglyphs of the Basic Latin letters (lowercase) listed
in UC. These 30 pairs were judged by 28 participants (after the
removal of unreliable participants). In total, we obtained 513 ef-
fective responses for the 30 pairs sampled from UC. For SimChar,
we compiled 486 effective responses for the 20 × 5 = 100 pairs of
homoglyphs detected with ∆ ≤ 4.
Figure 10 shows the result. For comparison, 513 of the effec-
tive responses for the 30 dummy pairs (Random) are also plotted.
Although the confusable scores of the random pairs were mostly
concentrated near the lowest option (“very distinct”), for both Sim-
Char and UC, the median of the confusable score was 4, i.e., the
homoglyphs of both databases were perceived as “confusing” on
average. Note that the average confusable score for SimChar was
larger than 4, whereas that for UC was smaller than 4, implying
that the homoglyphs contained in SimChar were more confusable
than those contained in UC.
Figure 11 presents three examples of UC pairs that attracted
the lowest confusability score. As these examples imply, several
homoglyphs listed in UC have glyphs that could be perceived as
distinct from the original letter, although some of the pairs could
be semantically close. On the other hand, the homoglyphs listed
in SimChar should have small differences by definition. These re-
sults led us to conclude that the homoglyphs listed in SimChar are
actually perceived as confusable.
4.2 Computation Cost of the ShamFinder
Framework
We first measured the time taken for constructing SimChar. Table 5
summarizes the results. As expected, the time for computing ∆ for
the pairwise combination of 52,457 characters, which is provided in
Table 2, was the most time-consuming step of the computation. For
this computation, we used a multi-processing approach with the
number of concurrent processes set to 15. We used an off-the-shelf
server with an Intel Xeon CPU E5-2620 v2 (2.10 GHz) and 62 GB
memory. In practice, we would need to update SimChar when the
Unicode standard adds a new set of glyphs or we incorporate a
new set of fonts to be analyzed. That is, the frequency of updating
SimChar should be reasonably low; e.g., Unicode version 12.0 was
released one year after the release of version 11.0. The new version
added 553 characters to those in the previous one.
Next, we measured the time to extract IDN homographs using
the ShamFinder framework. To extract IDN homographs of the
Alexa top-10k domains from the 141 M of .com TLD domain names
(see Table 6 for reference) required 743.6 seconds, i.e., on average,
each reference domain name was inspected in 0.07(= 743.6/10, 000)
seconds, which is sufficiently fast to block a suspicious, newly found
IDN homograph attack in real time.
456
ShamFinder
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Table 5: Time taken for constructing SimChar.
Process
Generating images
Computing ∆ for all the pairs
Eliminating sparse characters
Time
79.2 seconds
10.9 hours
18.0 seconds
5 DATA SOURCES
In this section, we describe the data sources used for our analysis
of IDN homographs.
5.1 Reference Domain Names
The aim of an IDN homograph attack is to attract a victim to a
malicious website by using a homograph that is visually identical
to the domain name of a legitimate website. As such, the natural
assumption is that an attacker creates an IDN homograph of a
domain name used for a popular website. In fact, other deception
techniques such as “typosquatting” or “brandjacking” also target
widely recognized domain names [1, 34]. As a reference of well-
known popular domain names, we adopted Alexa Top Sites [2];
namely, we extracted the top-10K of .com domains from the Alexa
ranking list.
5.2 Extracting IDNs
Although many domain name spaces are available in the Internet,
in this study, we focused on domain names under the .com TLD for
the following three reasons. First, the majority of popular websites
are attributed to this TLD. As the word “dot-com bubble” symbol-
izes, .com has become the most popular TLD since the early 2000s.
Although .com was originally intended for commercial usage, it
eventually became available for general purposes. Second, as shown
below, the majority of malicious IDNs are also attributed to this
TLD. Finally, as .com TLD is globally popular, it permits a large
number of Unicode blocks to be used for IDNs. According to IANA’s
IDN tables [28], under the .com TLD, characters across 97 different
Unicode blocks can be used for IDNs as of May 2019. This fact im-
plies that for .com TLD, an attacker can register an IDN homograph
that contains homoglyphs sampled from various Unicode blocks.
To search for IDN homographs, we first needed to extract reg-
istered IDNs. To this end, we used the DNS zone file maintained
by the registries of the .com TLD — Verisign [42]. The DNS zone
file lists all the registered domain names with their NS records. We