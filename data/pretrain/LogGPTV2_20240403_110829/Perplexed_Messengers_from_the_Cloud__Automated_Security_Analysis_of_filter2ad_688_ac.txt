result, it concludes that the CID generation is not secure.
Further, the SDK analyzer goes through the AST to identify all
the occurrences of the CID. From each occurrence, our approach
performs a taint analysis using FlowDroid to ﬁnd out whether the
content of the CID shows up at any IPC call. Once found, the call
1Linking an IPC to its handler has been extensively studied [30].
Our approach is a simple version of these techniques, which is tai-
lored to how push-messaging SDKs work.
2This is done manually in our current implementation.
AtomPush.setAtomPushNotifyCallback(new AtomPushNotifyCallback() {     @Override      public void OnPushNotifyArrive(String messagetTitle, String messageContent, String                                                                subContent, HashMap params) {...}});1264is inspected: if its Intent is broadcasted to an action, our system
reports that a leak has been found.
3.3 Integration-Speciﬁc App Checking
Based upon what it collected from sample code and SDKs, Sem-
inal is ready for scanning apps for integration ﬂaws. Here we
elaborate its unique design for a high-performance analysis, which
avoids going through the whole app, and just focuses on its integra-
tion part.
Receiver checking. The ﬁrst thing that needs to be done on the
app side is to make sure that its anchor has been securely conﬁg-
ured. Here the anchor we are concerned about is a static or dynamic
receiver, as the callback channel cannot be accessed by the adver-
sary outside the app’s process. Speciﬁcally, given an app whose
push-messaging service is identiﬁed by its ﬁngerprint, the integra-
tion scanner ﬁrst locates its anchor based upon the action claimed
by the receiver (recorded in the database). For the static receiver,
an inspection of the app’s manifest ﬁle reveals its protection level.
As to the dynamic receiver, which cannot be conﬁgured as private,
the scanner checks whether a permission is in place to authorize the
sender, and whether it is only given to legitimate apps.
Figure 5: User ID Veriﬁcation Example
User ID ﬁltering. To determine whether an app has properly veri-
ﬁed an inbound message’s user ID, the integration scanner performs
a taint analysis, starting from the anchor (the taint source), to track
how the content of the Intent (the message) is handled by the app.
Such content processing is rather straightforward within an app,
typically involving a format check, sometimes a classiﬁcation (e.g.,
determining whether the message is an advertisement or a private
one), then issue of a notiﬁcation and post of the message’s content.
The security check on User ID is detected from such operations on
“tainted” data (that is, the content propagated from the source), us-
ing a behavior signature. Speciﬁcally, we look at a set of compar-
isons of equality observed early in the processing of the message,
between a tainted string or long integer (that is, the user-related in-
formation from the message) and a variable holding nonconstant
value stored in the app (the ID of the current user), as illustrated by
the example in Figure 5. The idea here is based on the observation
that such a comparison is distinctive during the processing of an
incoming message, because in the case of the format checking and
classiﬁcation, equality comparisons always happen between some
message ﬁelds and a set of constants such as action and message
types (e.g., com.google.android.c2dm.intent.RECEI
VE). In the example, receipientUserId is a string from the
taint source (the Intent) and is found to be compared with the out-
put of getActiveId. Through a simple deﬁne-use analysis, the
scanner ﬁnds that the latter returns the content of a variable stored
in an object. This indicates that a user-ID checking happens. In-
deed, our evaluation (Section 3.4) shows that the behavior signature
is accurate.
Making such a security analysis work on a large number of apps,
however, turns out to be challenging. Although many existing tools
[14, 26, 27] already support a taint analysis on Android, all of them
are designed to analyze the whole program, which is complicated
and slow. The problem comes from the difﬁculty in building an
app’s whole CFG across IPCs: the construction of the CFG from
an entry point has to stop at an IPC call and waits for an analysis
on the call’s parameters to determine which handler within the pro-
gram will be invoked next. Running this on a complicated app is
time consuming and also unnecessary, since all we need is just a
quick analysis on a small portion of the code related to the push-
messaging integration. Here we describe an integration-speciﬁc
technique to improve the performance of the analysis.
Figure 6: Example of Breadth-ﬁrst and Layered Analysis
Speciﬁcally, our integration scanner performs a breadth-ﬁrst, lay-
ered analysis. Starting from the anchor, it ﬁrst builds up a partial
CFG of the app, whose paths all end at the sites of IPC calls, as
illustrated in Figure 6. Over this partial CFG, which is considered
to be the ﬁrst “layer” of the analysis, we run a taint check, using
the function provided by FlowDroid [14]. For all the equality com-
parisons discovered in this way, our scanner evaluates whether any
of them is a security check on user ID, as described above. If none
of them matches the behavior signature, we select a set of paths
on the partial CFG to extend to the next layer, that is, propagat-
ing the taint to their IPC handlers. These paths are selected when
their end points, i.e, the IPC calls, are either startService
or sendBroadcast (or sendOrderedBroadcast), as other
IPC calls like startActivity are unrelated to the message pro-
cessing. Also, these calls should have their Intents tainted, indi-
cating that their handlers work on the message. The corresponding
handlers are discovered using the names of the actions or classes
speciﬁed in the calls.
Over the extension of the CFG on the next layer, our scanner
continues to propagate the taint and evaluate the tainted equality
comparisons against the signature. If none has been found, we do
this again and extend the partial CFG to the third layer. In the case
that the security check is not present even on this layer, the app is
reported to fail to check User ID. This is because the User ID of the
message needs to be evaluated early in the processing: if this has
not been done by the onReceive of the anchor (the ﬁrst layer) as
soon as the message comes in, it must happen right after the format
checking and classiﬁcation either within the onReceive or in a
service the anchor invokes (the second layer); therefore a three-
layer analysis is sufﬁcient for determining whether such a check
indeed exists. In this way, our scanner only needs to go through
a small portion of app code, allowing it to run much faster than a
direct use of existing tools.
3.4 Evaluation
We implemented Seminal on top of FlowDroid [14], and ran it on
the integrations of 30 push-messaging services within 35,173 apps
downloaded from 6 markets. We discovered 17 security-critical
ﬂaws within 30 SDKs, and 26,069 potential problems in 17,668
apps, including high-proﬁle ones such as Facebook, Skype, Yelp,
etc. The detailed ﬁndings are elaborated in Section 4. Here we
report how our system performed.
Effectiveness. In the experiments, our implementation accurately
evaluated all the sample code and related manifests. When it comes
to the 30 SDKs, the prototype reported that 14 of them contain inse-
if (localVineSingleNotification.recipientUserId != this.mAppController.getActiveId())        SLog.e("This message is intended for someone else {}.",                     Long.valueOf(localVineSingleNotification.recipientUserId));BroadcastReceiver AIntentService ABroadcastReceiver BIntentService CIntentService BIntentService DstartServicestartServicestartServicestartServicesendBroadcastLayer 1:Layer 2:Layer 3:Receiver A (Anchor)Service AReceiver BService BService CService DLayer 1:Layer 2:Layer 3:startServicesendBroadcaststartServicestartServicestartServiceIf(msg.UserId != Utils.getUserId()) { }If(msg.UserId != this.mAppController.getUserId()) { }1265cure broadcast channels (unprotected receiver or broadcast without
target package) along the execution paths for message delivery, and
the rest 16 do not have such a problem. We manually veriﬁed these
ﬁndings, which were all conﬁrmed to be correct.
For the CID, we found that 10 out of 30 SDKs do not generate the
secret identiﬁer at all. Instead, some of them only use tag to label
a group of users for broadcasting messages to them, and the others
ask the developer or the user to come up with an alias (e.g., email
address) for identifying the app, which itself has security risks (Sec-
tion 4). Among the rest 20 SDKs, our prototype successfully went
through 15 of them. The rest 5 could not be analyzed because their
code related to CID generation and processing has been obfuscated
or contains extremely complicated data structures. Note that this
does not undermine the utility of Seminal, as the developer who
wants to use it for vulnerability detection will not deliberately ob-
fuscate her code. Among those our prototype can handle, 7 were
found to build their CID either using Android’s UUID generator
or with the input from the connection server, which are likely to
be secure. Also, Appsﬁre was found to directly use the GCM reg-
istration ID. The remaining 7 turned out to be problematic: 5 of
them either solely rely on public resources (e.g., android_id)
for constructing the secret token or inadvertently expose it to unau-
thorized parties; the remaining 2 was found to build their CID par-
tially from public resources but our prototype could not determine
whether non-public data are also involved, due to the complexity
of their program structures. We elaborate these problems in Sec-
tion 4.1. Such ﬁndings were validated through manual inspections.
Using the database generated at the ﬁrst two stages, our sys-
tem scanned over 35,173 apps integrating push-messaging services,
17,616 from Google Play Store and the rest from third-party mar-
kets. Among the apps reported by Seminal as vulnerable, we found
that all the ﬁndings are accurate in the cases of insecure IPC re-
ceivers, PendingIntent and other authentication issues. How-
ever, for User-ID checks, a small set of cases turned out to be false
positives:
that is, the apps actually performed User-ID ﬁltering
while our implementation failed to identify the presence of such an
operation. Speciﬁcally, we inspected 12 most popular apps in the
social category that were found to have the User-ID problem, man-
ually evaluating their code and also performing a dynamic analy-
sis to validate the presence of the vulnerability. 10 of them were
conﬁrmed to have the security ﬂaw and 2 were false positives. A
close look at these false positive cases reveals that one of them was
actually caused by the taint analysis mechanism provided by Flow-
Droid, which missed the equality check present in the code. It is
important to point out that these apps are among the most com-
plicated ones we analyzed and the real false detection rate is much
lower: in another validation attempt, we randomly sampled 20 apps
across all categories and only found one false positive, which was
caused by FlowDroid [17, 27].
Performance. Our implementation of Seminal was found to be
efﬁcient. For the SDK it can handle (particularly the one with-
out deep obfuscation), the prototype always completed the analysis
within 10 minutes. When it comes to the security analysis that hap-
pened on apps, which includes User-ID ﬁltering, protection of an-
chor receivers and exposure of PendingIntent, on average 108
seconds were spent on each app. It is important to note that such
a performance is achieved by our unique design that automatically
identiﬁes and analyzes only part of app code related to service in-
tegration.
4. NEW ATTACKS AND MEASUREMENT
In this section, we report our ﬁndings, focusing on new security
ﬂaws and interesting observations.
SDK and app collection. As mentioned earlier, the services we
studied include popular syndication services and third-party ser-
vices whose SDKs were publicly available. All the syndication
services here are provided in North America, while all the third-
party services are from China, where major manufacturer services
such as GCM are not accessible. Also there are tens of services
we were not able to study, due to the difﬁculty in obtaining their
SDKs, which requires application and approval, e.g., IBM Xtify.
Some new services have not yet publicly released their SDKs (e.g.,
Mono Push). This demonstrates that the market of push messag-
ing is highly vibrant and therefore developing effective means to
ensure security qualities of the services is imperative.
Our implementation also ﬁngerprinted popular manufacturer ser-
vices, including GCM, ADM and Nokia. Those services mainly
rely on their client-side service apps such as android.gms to
deliver messages. In addition, GCM and ADM were manually an-
alyzed by the prior work [28]. Therefore in our research, we just
focused on these services’ integrations on the app side.
Market
No. Of Apps
Google Play
Baidu
Gfan
Appchina
Mumayi
Xiaomi
Overall
17,616
2,315
3,734
4,572
3,612
3,324
35,173
Table 2: Sources of Analyzed Apps
17,616 of the 35,173 apps used in our study come from Google
Play, which include those integrating push-messaging services and
also highly ranked in each category (social, health, ﬁnance, etc.),
and the rest from 5 popular app markets in China, which use third-
party services. Table 2 summarizes the sources of these apps. Am-
ong them are highly popular ones such as Facebook, Skype, Yelp,
Pinterest, etc., with 1682 having over 1 million downloads.
4.1 New Attacks
The new problems discovered mainly come from the confusion
caused by vulnerable service integrations: an app can be confused
by where the message it receives comes from when it integrates
multiple services, by who it is supposed to deliver the message to
and by which service app it should talk to. Also, the CIDs used by
syndicators or third-party services are often not kept secret.
Service confusion. Seminal is designed to check whether an SDK
and its hosting app properly authenticate the senders of the Intents
they receive (Section 3.2). When the receivers of these IPCs are
found to be protected by permissions, it becomes important to know
that such permissions are only given to the right party, which is al-
most always either the hosting app itself or a system app. There-
fore, whenever our implementation scans an app or an SDK, it al-
ways reports the presence of the permissions, asking for the con-
ﬁrmation that they are indeed deﬁned and claimed by authorized
parties. In our study, our implementation discovered that 51 popu-
lar apps, most with over 1 million downloads, and 2 SDKs (Urban
Airship and PushIO) integrate multiple push-messaging services,
including GCM, ADM and Nokia. The outputs of the analysis are a
set of permissions (e.g., com.google.android.c2dm.permi
ssion.SEND for GCM, com.amazon.device.messaging
.permission.SEND for ADM, com.nokia.pushnotifica
tions.permission.SEND for Nokia), which are all required
to be given to system apps only.
1266The problem, however, is that this condition cannot be satis-
ﬁed in practice. Most of Android devices only support one of
such services: that is, only one service app (android.gms on
Nexus or com.amazon.device.messaging on Kindle) ex-
ists on a given device, deﬁning only one of such permissions. As
a result, the other permissions are up for grabs by any parties:
any app can deﬁne such a permission within its manifest to gain
the capability to send messages to the target app’s receiver it pro-
tects. For example, on Kindle Fire, a malicious app can deﬁne
com.google.android.c2dm.permission.SEND, the per-
mission for the GCM service android.gms, which is not run-
ning on the device; as a result, the adversary becomes able to send
any messages to the apps integrating both the ADM and the GCM
services, either directly or through an SDK.
In our study, we found that 51 popular apps have this problem.
Particularly, on Kindle Fire, we built end-to-end attacks in which
an attack app successfully impersonated authorized parties (e.g.,
close friends of the victim user) to inject messages to the victim’s
Facebook and Skype apps. On the Nexus device, the same trick
can also be played: the attack app can deﬁne the ADM permission
com.amazon.device.messaging.permission.SEND to
send messages to the apps. However, the attacks can only cause a
denial of service, crashing both apps. A close look at the problem
reveals that when processing the messages, the integrations within