::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#measuring-the-latency-of-outgoing-tcp-connections_network-tracing-using-the-bpf-compiler-collection}测量出站 TCP 连接的延迟 {.title}
:::
TCP 连接延迟是建立连接所需的时间。这通常涉及内核 TCP/IP
处理和网络往返时间，而不是应用程序运行时。
`tcpconnlat`{.literal} 工具使用 eBPF 功能来测量发送的 `SYN`{.literal}
数据包和接收的响应数据包之间的时间。
::: orderedlist
**流程**
1.  开始测量出站连接的延迟：
    ``` literallayout
    # /usr/share/bcc/tools/tcpconnlat
    PID    COMM         IP SADDR      DADDR          DPORT LAT(ms)
    32151  isc-worker00 4  192.0.2.1  192.0.2.254    53    0.60
    32155  ssh          4  192.0.2.1  203.0.113.190  22    26.34
    32319  curl         4  192.0.2.1  198.51.100.59  443   188.96
    ...
    ```
    每次内核处理传出连接时, `tcpconnlat`{.literal}
    会在内核接收响应数据包后显示连接详情。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcpconnlat(8)`{.literal} man page。
-   有关 `tcpconnlat`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcpconnlat_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcpconnlat(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcpconnlat --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#displaying-details-about-tcp-packets-and-segments-that-were-dropped-by-the-kernel_network-tracing-using-the-bpf-compiler-collection}显示被内核丢弃的 TCP 数据包和片段详情 {.title}
:::
`tcpdrop`{.literal} 工具可让管理员显示内核丢弃的 TCP
数据包和片段详情。使用这个实用程序调试丢弃数据包的高速率，以便远程系统发送基于计时器的重新传输。释放数据包和片段的高速率可能会影响服务器的性能。
`tcpdrop`{.literal} 实用程序使用 eBPF
功能直接从内核检索信息，而不是捕获和过滤数据包。
::: orderedlist
**流程**
1.  输入以下命令来显示丢弃 TCP 数据包和片段详情：
    ``` literallayout
    # /usr/share/bcc/tools/tcpdrop
    TIME     PID    IP SADDR:SPORT       > DADDR:DPORT   STATE (FLAGS)
    13:28:39 32253  4  192.0.2.85:51616  > 192.0.2.1:22  CLOSE_WAIT (FIN|ACK)
    	b'tcp_drop+0x1'
    	b'tcp_data_queue+0x2b9'
    	...
    13:28:39 1      4  192.0.2.85:51616  > 192.0.2.1:22   CLOSE (ACK)
    	b'tcp_drop+0x1'
    	b'tcp_rcv_state_process+0xe2'
    	...
    ```
    每次内核丢弃 TCP 数据包和网段时，`tcpdrop`{.literal}
    会显示连接的详情，包括导致丢弃软件包的内核堆栈追踪。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcpdrop(8)`{.literal} man page。
-   有关 `tcpdrop`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcpdrop_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcpdrop(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcpdrop --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#tracing-tcp-sessions_network-tracing-using-the-bpf-compiler-collection}追踪 TCP 会话 {.title}
:::
`tcplife`{.literal} 实用程序使用 eBPF 跟踪打开和关闭的 TCP
会话，并输出一行总结信息。管理员可以使用 `tcplife`{.literal}
来识别连接以及传输的流量数量。
本节中的示例论述了如何显示连接到端口
`22`{.literal}（SSH)来检索以下信息：
::: itemizedlist
-   本地进程 ID（PID）
-   本地进程名称
-   本地 IP 地址和端口号
-   远程 IP 地址和端口号
-   接收和传输的流量的数量（以 KB 为单位）。
-   连接处于活跃状态的时间（毫秒）
:::
::: orderedlist
**流程**
1.  输入以下命令开始追踪到本地端口 `22`{.literal} 的连接：
    ``` literallayout
    /usr/share/bcc/tools/tcplife -L 22
    PID   COMM    LADDR      LPORT RADDR       RPORT TX_KB  RX_KB      MS
    19392 sshd    192.0.2.1  22    192.0.2.17  43892    53     52 6681.95
    19431 sshd    192.0.2.1  22    192.0.2.245 43902    81 249381 7585.09
    19487 sshd    192.0.2.1  22    192.0.2.121 43970  6998     7 16740.35
    ...
    ```
    每次连接关闭时，`tcplife`{.literal} 会显示连接详情。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcplife(8)`{.literal} man page。
-   有关 `tcplife`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcplife_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcplife(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcplife --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#tracing-tcp-retransmissions_network-tracing-using-the-bpf-compiler-collection}追踪 TCP 重新传输 {.title}
:::
`tcpretrans`{.literal} 工具显示 TCP 重传输的详情，如本地和远程 IP
地址和端口号，以及重新传输时的 TCP 状态。
该工具使用 eBPF 功能，因此开销非常低。
::: orderedlist
**流程**
1.  使用以下命令来显示 TCP 重新传输详情：
    ``` literallayout
    # /usr/share/bcc/tools/tcpretrans
    TIME     PID  IP LADDR:LPORT   T> RADDR:RPORT         STATE
    00:23:02 0    4  192.0.2.1:22  R> 198.51.100.0:26788  ESTABLISHED
    00:23:02 0    4  192.0.2.1:22  R> 198.51.100.0:26788  ESTABLISHED
    00:45:43 0    4  192.0.2.1:22  R> 198.51.100.0:17634  ESTABLISHED
    ...
    ```
    每当内核调用 TCP 重新传输功能时，`tcpretrans`{.literal}
    就会显示连接详情。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcpretrans(8)`{.literal} man page。
-   有关 `tcpretrans`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcpretrans_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcpretrans(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcpretrans --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#displaying-tcp-state-change-information_network-tracing-using-the-bpf-compiler-collection}显示 TCP 状态更改信息 {.title}
:::
在 TCP 会话中，TCP 状态会改变。`tcpstates`{.literal} 工具使用 eBPF
功能跟踪这些状态更改，并打印包括每个状态持续时间的详细信息。例如：使用
`tcpstates`{.literal} 来确定连接是否在初始化状态花费了太多时间。
::: orderedlist
**流程**
1.  使用以下命令开始追踪 TCP 状态更改：
    ``` literallayout
    # /usr/share/bcc/tools/tcpstates
    SKADDR           C-PID C-COMM     LADDR     LPORT RADDR       RPORT OLDSTATE    -> NEWSTATE    MS
    ffff9cd377b3af80 0     swapper/1  0.0.0.0   22    0.0.0.0     0     LISTEN      -> SYN_RECV    0.000
    ffff9cd377b3af80 0     swapper/1  192.0.2.1 22    192.0.2.45  53152 SYN_RECV    -> ESTABLISHED 0.067
    ffff9cd377b3af80 818   sssd_nss   192.0.2.1 22    192.0.2.45  53152 ESTABLISHED -> CLOSE_WAIT  65636.773
    ffff9cd377b3af80 1432  sshd       192.0.2.1 22    192.0.2.45  53152 CLOSE_WAIT  -> LAST_ACK    24.409
    ffff9cd377b3af80 1267  pulseaudio 192.0.2.1 22    192.0.2.45  53152 LAST_ACK    -> CLOSE       0.376
    ...
    ```
    每次连接改变其状态时，`tcpstates`{.literal}
    会显示一个新的行，其中包含更新的连接详情。
    如果多个连接同时更改其状态，使用第一列（`SKADDR`{.literal}）中的套接字地址来确定哪些条目属于同一连接。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcpstates(8)`{.literal} man page。
-   有关 `tcpstates`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcpstates_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcpstates(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcpstates --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#summarizing-and-aggregating-tcp-traffic-sent-to-specific-subnets_network-tracing-using-the-bpf-compiler-collection}聚合发送到特定子网的 TCP 流量 {.title}
:::
`tcpsubnet`{.literal} 工具总结并聚合本地主机发送到子网的 IPv4 TCP
流量，并以固定间隔显示输出结果。该工具使用 eBPF
功能来收集并总结数据，以减少开销。
默认情况下，`tcpsubnet`{.literal} 总结了以下子网的流量：
::: itemizedlist
-   `127.0.0.1/32`{.literal}
-   `10.0.0.0/8`{.literal}
-   `172.16.0.0/12`{.literal}
-   `192.0.2.0/24/16`{.literal}
-   `0.0.0.0/0`{.literal}
:::
请注意，最后一个子网（`0.0.0.0/0`{.literal}）会捕获所有（catch-all）数据。`tcpsubnet`{.literal}
实用程序计算与这个 catch-all 条目中前 4 个不同的子网的所有流量。
按照以下步骤计算 `192.0.2.0/24`{.literal} 和 `198.51.100.0/24`{.literal}
子网的流量。所有子网的流量都会在 `0.0.0.0/0`{.literal} catch-all
子网条目中跟踪。
::: orderedlist
**流程**
1.  开始监控发送到 `192.0.2.0/24`{.literal}、`198.51.100.0/24`{.literal}
    和其他子网的流量数量：
    ``` literallayout
    # /usr/share/bcc/tools/tcpsubnet 192.0.2.0/24,198.51.100.0/24,0.0.0.0/0
    Tracing... Output every 1 secs. Hit Ctrl-C to end
    [02/21/20 10:04:50]
    192.0.2.0/24           856
    198.51.100.0/24       7467
    [02/21/20 10:04:51]
    192.0.2.0/24          1200
    198.51.100.0/24       8763
    0.0.0.0/0              673
    ...
    ```
    这个命令以字节为单位显示指定子网每秒一次的流量。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcpsubnet(8)`{.literal} man page。
-   有关 `tcpsubnet`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcpsubnet.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcpsubnet(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcpsubnet --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#displaying-the-network-throughput-by-ip-address-and-port_network-tracing-using-the-bpf-compiler-collection}通过 IP 地址和端口显示网络吞吐量 {.title}
:::
`tcptop`{.literal} 程序以 KB 为单位显示主机发送并接收的 TCP
流量。这个报告会自动刷新并只包含活跃的 TCP 连接。该工具使用 eBPF
功能，因此开销非常低。
::: orderedlist
**流程**
1.  要监控发送和接收的流量，请输入：
    ``` literallayout
    # /usr/share/bcc/tools/tcptop
    13:46:29 loadavg: 0.10 0.03 0.01 1/215 3875
    PID    COMM         LADDR           RADDR              RX_KB   TX_KB
    3853   3853         192.0.2.1:22    192.0.2.165:41838  32     102626
    1285   sshd         192.0.2.1:22    192.0.2.45:39240   0           0
    ...
    ```
    命令的输出只包括活跃的 TCP
    连接。如果本地或者远程系统关闭了连接，则该连接在输出中不再可见。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcptop(8)`{.literal} man page。
-   有关 `tcptop`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcptop.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcptop(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcptop --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#tracing-established-tcp-connections_network-tracing-using-the-bpf-compiler-collection}追踪已建立的 TCP 连接 {.title}
:::
`tcptracer`{.literal} 工具跟踪连接、接受和关闭 TCP
连接的内核功能。该工具使用 eBPF 功能，因此开销非常低。
::: orderedlist
**流程**