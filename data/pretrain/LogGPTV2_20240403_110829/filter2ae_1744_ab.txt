图11 网络下载文件示意图
文件上传
上传至小程序合法域名下的服务器上，并保存临时文件在SD卡的文件存储区域/sdcard/tencent/MicroMsg/wxafiles/wx
_id/tmp_ [hash_value]。
图12 文件上传示意图
小程序外链url规范
图13 小程序不允许外链url规定说明
小程序在微信的生态下运行，不开放给个人使用（需要企业）。在小程序中不允许调整到外部网站，也不允许放链接。同时微信在小程序发布前会对小程序进行审核。
2.2数据存储安全
以（key，value）形式存放在本地缓存，将小程序需要存储的key/value数据直接存储到Storage
DB缓存，小程序进行数据保护需要自行做加密处理。数据存储在本地DB，微信APP会对DB数据整体做本地加密保护，所以小程序本地存储数据的安全性依赖于微信数据库加密方案的安全，策略与EnMicroMsg.db类似，如下图所示。
图14 本地数据存储示意
2.3 文件存储安全
文件保存在SD卡/sdcard/tencent/MicroMsg/wxafiles/wx_id/目录下，通过wxfile://协议指向SD卡目录下的文件。
存放SD卡的文件有做完整性校验，无法被篡改。首先，最终存储的文件名是：对称加密（文件流内容Alder32校验和|原始文件名）生成的，最终文件名和文件内容会通过自校验判断完整性；其次，本地缓存是通过HASH映射查找文件。所以即使能破解文件名和文件内容，绕过文件自身签名校验，篡改为攻击者的伪造文件，小程序APP也无法映射到该伪造文件进行使用。
2.4 扫码二维码安全
扫码功能（wx.scanCode）依赖微信APP的原生的扫码功能；生成小程序特定页面的直达二维码，依赖于ACCESS_TOKEN，而ACCESS_TOKEN是通过小程序（公众号）私有的APPID和appsecret请求得到，攻击者无法获知到该信息伪造生成二维码。
2.5 微信开放接口安全
用户信息获取，包含以下信息：
接口返回的明文数据会进行签名校验，需要依赖登录session_key；接口返回的敏感数据会通过密文返回，解密算法依赖登录session_key。攻击者无法获知用户的session_key进行破解，窃取用户数据。
此外分享、客服消息、模板消息中输入的内容仅会以文本形式输出；模板消息会将数据通过https传输到服务器，而后推送到客户微信服务通知；微信支付功能继承微信平台原有的功能，安全性较为可靠。
开放平台大部分功能会先通过wx.login获得code；然后使用该code换取openid；以此openid进行既定的微信功能操作，比如发送模板消息推送、发起微信支付等。
图15 开放平台发布模板请求示意图
2.6 小程序钓鱼风险
微信小程序以唯一appid标识身份，不同小程序拥有不同的appid。如果恶意开发者伪造流行的小程序APP，如美团、大众点评，制作一个仿冒的微信小程序，且使用不同的appid，有可能绕过微信的审核流程发布到市场。小白用户如无辨识能力，极可能被钓鱼受骗。但由于小程序无法嵌入url跳转，同时有访问域名的控制，使得钓鱼风险在一定程度上减轻。小程序钓鱼风险依赖于微信平台的发布审核、监管控制。
2.7泄露数据到微信隐患
微信小程序的网络请求通过微信APP实现转发，微信平台可能可以获取到小程序的所有网络请求和存储数据，因此对于小程序业务敏感的数据，建议由小程序再做一层保护；小程序的操作轨迹日志会加密传送到腾讯TBS后台，如下图所示。
图16 操作轨迹日志监控上传
三、小程序账户使用安全
通过目前使用体验，发现当前存在三种账户形式：
方式一：通过wx.getUserInfo获取的微信用户信息，以openid标识一个用户应用到小程序；
方式二：通过公众平台appid+appsecret+code，换取session_key/openid，并生成小程序第三方session，在小程序的服务器维护第三方session和微信session_key/openid的关联；客户端使用第三方session进行请求；
方式三：通过小程序内部自实现的登录模块，如手机号+动态验证码登录
方式一是一种弱账户体系设计，小程序本身无法获得微信用户的标识信息，如手机号、身份证或银行卡，依赖于微信开放平台接口可以提供的用户信息，详见2.5节，一般会在页面上展示微信用户昵称和头像，如下图17所示。
图17 使用微信信息登录
方式二和方式三是强账户体系，方式二类似微信公众号的授权机制，通过小程序获得的code和微信用户基本信息，到第三方服务器获取访问的token（第三方session），第三方服务器维护用户使用的session与微信session_key/openid的关联关系。图18为微信官方提供的登录实现时序图，图19为某餐饮小程序授权登录的请求过程。
图18 官方提供的授权登录实现方案
图19 某餐饮小程序授权登录过程
以上第一个请求通过code和微信基本用户信息到第三方服务器换取token，而后的请求通过token请求用户个人数据，如团购代金券使用历史记录。方式二不能将微信公众平台的appsecret或者session_key（属于敏感信息）传递到客户端，否则可能导致安全攻击。方式三属于小程序自身实现方式，依赖自身实现的安全性，与微信平台无关。
四、总结
说了这么多，大白也该总结一下了，大致如下8点：
1、框架上继承了微信成熟的JSAPI框架和底层的TBS浏览器内核；
2、小程序的关键信息完全由后台控制进行配置，如可访问的域名信息；
3、通用网络传输使用Https，并对访问域名进行校验控制，无法抵御攻击者在本地安装代理证书实施中间人攻击的威胁；
4、本地数据存储采用（KEY，VALUE）形式存放在DB，数据的保护继承了微信的数据库加密防护策略；
5、本地文件存储采用HASH映射机制进行文件定位，文件存储在外部存储，本身通过自定义算法实现完整性校验；
6、存在仿冒钓鱼小程序的可能，依靠于微信平台的审核监管能力；
7、针对特定小程序，由于是在微信平台生态中运行，小程序自身仍需对敏感数据进行安全防护；
8、小程序登录体系可以依赖微信接口和公众号平台，也可以由小程序自行实现。前者需要根据微信平台的安全规范实施，后者则由小程序自行控制安全性。
五、附录
下面大白补充一下上述文中4个附录内容：
附录1：小程序初始化后台配置信息
附录2：更新并提取后台配置信息逻辑
附录3：request网络请求实现
附录4：网络请求域名校验
本次小程序的安全策略解析分享完结，本文由白泽原创，欢迎各位转发分享～