2022/4/29 02:46
Evernote Export
file:///C:/Users/jiushi/Desktop/JavaWeb 内存马技术归纳.html
4/12
冰蝎原理是AES+base64解密出来的class然后字节码动态加载
defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用。
将冰蝎实体马转换成内存马要解决的问题
1. pageContext对象为jsp九大内置对象，在冰蝎作者rebeyond的文章利用动态二进制加密实现新型一句话木马之Java篇中知道，在冰蝎的代码中，服务端需要从pageContext
对象中获取出request/response/session。（而在冰蝎3.0 bata7之后不再依赖pageContext对象，只需给在equal函数中传递的object对象中，有
request/response/session对象即可，所以此时我们可以把pageContext对象换成一个Map，手动添加这三个对象即可）
2. defineClass函数调用
  Method method = Class.forName("java.lang.ClassLoader").getDeclaredMethod("defineClass", byte[].class, int.class, int.class); //getDeclaredMethod方法返回一个
Method对象，它反映此Class对象所表示的类或接口的指定已声明方法。
  method.setAccessible(true); //值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查
  byte[] evilclass_byte = c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()));
  Class evilclass = (Class) method.invoke(this.getClass().getClassLoader(), evilclass_byte,0, evilclass_byte.length); //defineClass反射调用
Filter冰蝎内存马
2022/4/29 02:46
Evernote Export
file:///C:/Users/jiushi/Desktop/JavaWeb 内存马技术归纳.html
6/12
增加ListenerTomcat的Listener
该内存马又分三类:
1. ServletContext，服务器启动和终止时触发
2. Session，有关Session操作时触发
3. Request，访问服务时触发
Request类内存马
Java Agent内存马
这里是两个东西，一个是Agent，一个是ClassFileTransformer。利用Agent+ClassFileTransformer实现在JVM调动某个class之前修改字节码 (addTransformer用于修改字节码，
然后利用retransformClasses重新加载
唯一通用的方法: 通过拦截修改关键类的字节码，只需要寻找到关键类做处理即可，进而最大程度实现一套代码通用
在jdk的rt.jar包中存在一个java.lang.instrument包，该包提供了一些工具帮助开发人员在 Java 程序运行时，动态修改系统中的 Class 类型。其中，使用该软件包的一个关键组件就
是 Javaagent。从名字上看，似乎是个 Java 代理之类的，而实际上，他的功能更像是一个Class 类型的转换器，他可以在运行时接受重新外部请求，对Class类型进行修改。
Javaagent是java命令的一个参数。参数 javaagent 可以用于指定一个 jar 包，并且对该 java 包有2个要求：
Java agent的使用方式有两种：
实现premain方法，在JVM启动前加载。
实现agentmain方法，在JVM启动后加载。
premain和agentmain函数声明如下，拥有Instrumentation inst参数的方法优先级更高：
第一个参数String agentArgs就是Java agent的参数。
第二个参数Instrumentaion inst相当重要。
public static void agentmain(String agentArgs, Instrumentation inst) {
    ...}
public static void agentmain(String agentArgs) {
    ...}
public static void premain(String agentArgs, Instrumentation inst) {
    ...}
public static void premain(String agentArgs) {
    ...}
premain Demo:
这里参考y4er师傅的文章里的测试：https://y4er.com/post/javaagent-tomcat-memshell/
agent的jar包中manifest中可以有的属性：
属性    作用
Premain-Class    指定代理类
Agent-Class    指定代理类
Boot-Class-Path    指定bootstrap类加载器的搜索路径，在平台指定的查找路径失败的时候生效， 可选
Can-Redefine-Classes    是否需要重新定义所有类，默认为false，可选。
Can-Retransform-Classes    是否需要retransform，默认为false,可选
一个代理实现ClassFileTransformer接口用于改变运行时的字节码（class File），这个改变发生在jvm加载这个类之前。对所有的类加载器有效。
class File这个术语定义于虚拟机规范3.1，指的是字节码的byte数组，而不是文件系统中的class文件。
参考链接:https://www.cnblogs.com/wade-luffy/p/6078301.html
byte[]
    transform(  ClassLoader         loader, //类加载器
                String              className, //类名称
                Class            classBeingRedefined, //类接口
                ProtectionDomain    protectionDomain, //类封装
                byte[]              classfileBuffer)
        throws IllegalClassFormatException;
org/chabug/DefineTransformer.java
package org.chabug;
import java.lang.instrument.ClassFileTransformer;