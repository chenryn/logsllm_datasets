### EURASIP Journal on Wireless Communications and Networking

**Figure 8: Comparison of Original and Encoded Video Data**
- (a) Original video data.
- (b) Video data after the improved H.223 encoding method.

**Figure 9: Implementation Diagram of Phosphor**
- (a) Scene depicting the search for content on the content server website.
- (b) Scene showing the customization of rights on the license server.
- (c) Scene where the DRM agent acquires a license after successful registration.
- (d) Process of rendering the media in the compliant player.

In the absence of a license, the user can customize the rights for actions or types. For example, the user can set the right to play a video segment three times or within a specific time period. After customizing the rights, a trigger message is sent to the user. The user can then acquire the license (as shown in Figure 9(c)). Finally, as illustrated in Figure 9(d), the user can watch the streaming media content after acquiring the license and making the necessary payment.

The conclusions drawn from the license service are representative and similar conclusions can be made for the content service. It is important to note that Digital Rights Management (DRM) is a specialized area of security. Our experiments do not use any benchmark because a DRM system involves multiple domains, such as encryption/decryption, network transmission, and the implementation technology of compliant clients and servers. Consequently, there is no public benchmark available at present.

### 7. Experiments

We conducted extensive experiments to evaluate the performance of our proposed CS-DRM scheme and Phosphor. This section describes the experimental setup and presents the results, demonstrating the effectiveness and efficiency of the CS-DRM scheme. For the efficiency aspect, we focus on the license service, as the results for the content service are similar.

#### 7.1. Experimental Setting

Experiments were conducted on both a private cloud (a cluster of local machines) and a public cloud (Google App Engine, GAE). In the private cloud, each machine had 4 single-core processors (2.1 GHz), 4 GB of main memory, and 1.5 TB of hard disk space. Each machine ran Ubuntu 9.04 with Java SE 6.0. The experimental environment utilized Hadoop 0.19.2 and HBase 0.19.3 as the data store, Apache Tomcat 6 as the HTTP server, and Axis2 as the web service tool. To compare with the private cloud, the license service was also deployed on GAE. However, due to the limitations of our free GAE account, the maximum number of simultaneous dynamic requests (users) was 30. This limitation was sufficient to study the performance of application services in both private and public clouds.

#### 7.2. Effectiveness

To illustrate the effectiveness of CS-DRM, we ran our program on the N76 device, following a general process divided into four main steps:
1. **Content Browsing**: The user browses the content portal website and selects their favorite content.
2. **License Check**: The user clicks the "play" button to check for a license and reaches the rights customization webpage.
3. **Rights Customization**: The user customizes the rights and acquires the license.
4. **Media Rendering**: The user watches the media after acquiring the license and paying for it.

As shown in Figure 10, the running time of the entire process, including artificial operations like filling out forms, was measured. The third scenario (rights customization) took the most time, approximately 8 seconds, due to the need for user input. Despite these manual operations, the overall effectiveness of the CS-DRM scheme was excellent.

#### 7.3. Efficiency

As discussed in Section 5.3, low access speed and long latency are major factors limiting the development of mobile Internet. In the CS-DRM scheme, the response time of communication between cloud clients and cloud services is a critical performance indicator. Both the license and content services were deployed in the cloud, and the response time for user requests was a key performance metric.

In this experiment, we simulated simultaneous users sending requests to the license service to acquire licenses and calculated the total and average response times. Total response time is the duration from the first user's request to the last user's response, representing the longest delay. Average response time is calculated as:

\[
\text{Average} = \frac{\sum_{k=1}^{n} \text{Time}_k}{n}
\]

where \( n \) is the number of simultaneous users and \( \text{Time}_k \) is the response time for the \( k \)-th user.

Mobile phone simulators were used to run on computers, as there were not enough physical devices to simulate hundreds of simultaneous users. The number of simultaneous users for the private cloud ranged from 50 to 500 in steps of 50, while for GAE, it ranged from 5 to 30 in steps of 5. If the number of simultaneous users on GAE exceeded 30, the error rate increased rapidly due to the free account limitations. For example, with 100 simultaneous users, the error rate was 78.4%.

Figures 11 and 12 show that both total and average response times increased as the number of simultaneous users scaled up. The total running time was slightly longer than the individual response times, which is reasonable. For GAE, when the number of simultaneous users was below the quota, the license service could handle requests with minimal latency. There were interesting observations:
- The average response time for GAE increased sharply when the number of simultaneous users increased from 5 to 10 but remained relatively stable from 15 to 30.
- We hypothesize a threshold between 5 and 10 simultaneous users, beyond which additional resources are allocated.
- When the number of simultaneous users reached 30, less than 5% of requests received error responses.

**Figure 11: Total Response Time in the Public Cloud**

**Figure 12: Total Response Time in the Private Cloud**

**Figure 13: Response Time of LAP in the Private Cloud with 100 Simultaneous Users**

These results demonstrate the robustness and efficiency of the CS-DRM scheme in both private and public cloud environments.