    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_iscsi
      Pool guest_images_iscsi started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
4.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，通过 `virsh`{.literal} 命令定义的存储池不会设置为每次
    libvirtd 启动时自动启动。使用 `virsh pool-autostart`{.literal}
    命令将存储池配置为自动启动。
    ``` literallayout
    # virsh pool-autostart guest_images_iscsi
      Pool guest_images_iscsi marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_iscsi
      Name:           guest_images_iscsi
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-lvm-based-storage-pools-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}使用 CLI 创建基于 LVM 的存储池 {.title}
:::
如果要有一个属于 LVM 卷组的存储池，您可以使用 `virsh`{.literal}
实用程序创建基于 LVM 的存储池。
::: title
**建议**
:::
在创建基于 LVM 的存储池前请注意以下几点：
::: itemizedlist
-   基于 LVM 的存储池不能为 LVM 提供完整的灵活性。
-   `libvirt`{.literal} 支持精简逻辑卷，但不提供精简存储池的功能。
-   基于 LVM 的存储池是卷组。您可以使用 `virsh`{.literal}
    实用程序创建卷组，但以这种方式在创建的卷组中只能有一个设备。要使用多个设备创建卷组，请使用
    LVM 工具，请参阅 [如何在 LVM 的 Linux
    中创建卷组](https://www.redhat.com/sysadmin/create-volume-group){.link}。
    有关卷组的详情，请参考《 [*红帽企业 Linux
    逻辑卷管理器管理指南*]{.emphasis} 》。
-   基于 LVM 的存储池需要一个完整磁盘分区。如果您使用 `virsh`{.literal}
    命令激活新分区或设备，则分区将被格式化，所有数据将被清除。如果您使用主机的现有卷组，如同在这些步骤中一样，不会删除任何内容。
:::
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于 LVM 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'logical' supported='yes'"
    ```
    如果命令显示任何输出结果，则支持基于 LVM 的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal} 命令定义和创建 LVM
    类型的存储池。例如，以下命令创建名为 `guest_images_lvm`{.literal}
    的存储池，该池使用 `lvm_vg`{.literal} 卷组，并挂载到
    `/dev/lvm_vg`{.literal} 目录：
    ``` literallayout
    # virsh pool-define-as guest_images_lvm logical --source-name lvm_vg --target /dev/lvm_vg
    Pool guest_images_lvm defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看 ["基于 LVM
    的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#lvm-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于 LVM 的存储池参数"){.xref}。
2.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令，验证池是否已创建好。
    ``` literallayout
    # virsh pool-list --all
      Name                   State      Autostart
      -------------------------------------------
      default                active     yes
      guest_images_lvm       inactive   no
    ```
3.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_lvm
      Pool guest_images_lvm started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
4.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，通过 `virsh`{.literal} 命令定义的存储池不会设置为每次
    libvirtd 启动时自动启动。使用 `virsh pool-autostart`{.literal}
    命令将存储池配置为自动启动。
    ``` literallayout
    # virsh pool-autostart guest_images_lvm
      Pool guest_images_lvm marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_lvm
      Name:           guest_images_lvm
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-nfs-based-storage-pools-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}使用 CLI 创建基于 NFS 的存储池 {.title}
:::
如果要在网络文件系统(NFS)服务器上有一个存储池，您可以使用
`virsh`{.literal} 实用程序创建基于 NFS 的存储池。
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于 NFS 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "nfs"
    ```
    如果该命令显示任何输出结果，则代表支持基于 NFS 的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 virsh `pool-define-as`{.literal} 命令定义和创建 NFS
    类型的存储池。例如，使用目标目录
    ` /var/lib/libvirt/ images/nfspool 使用 IP 为 111.222.111`{.literal}.222
    的 NFS 服务器创建名为 guest_images``{=html}
    \_net``{=html} fs``{=html} 的存储池：
    ``` literallayout
    # virsh pool-define-as --name guest_images_netfs --type netfs --source-host='111.222.111.222' source-path='/home/net_mount' --source-format='nfs' --target='/var/lib/libvirt/images/nfspool'
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看 ["基于 NFS
    的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#nfs-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于 NFS 的存储池参数"){.xref}。
2.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令，验证池是否已创建好。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_netfs   inactive   no
    ```
3.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_netfs
      Pool guest_images_netfs started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
4.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，通过 `virsh`{.literal} 命令定义的存储池不会设置为每次
    libvirtd 启动时自动启动。使用 `virsh pool-autostart`{.literal}
    命令将存储池配置为自动启动。
    ``` literallayout
    # virsh pool-autostart guest_images_netfs
      Pool guest_images_netfs marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_netfs
      Name:           guest_images_netfs
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-scsi-based-storage-pools-with-vhba-devices-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}通过 CLI，创建带有 vHBA 设备的基于 SCSI 的存储池 {.title}
:::
如果您希望在小型计算机系统接口(SCSI)设备上有一个存储池，您的主机必须能够使用虚拟主机总线适配器(vHBA)连接到
SCSI 设备。然后，您可以使用 `virsh`{.literal} 实用程序创建基于 SCSI
的存储池。
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于 SCSI 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'scsi' supported='yes'"
    ```
    如果该命令显示任何输出结果，则代表支持基于 SCSI 的池。
-   在使用 vHBA 设备创建基于 SCSI 的存储池前，先创建一个
    vHBA。如需更多信息，请参阅 [创建
    vHBA](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-vhbas_managing-storage-for-virtual-machines "创建 vHBA"){.link}。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal} 命令，使用 vHBA 定义和创建
    SCSI 存储池。例如，以下命令会创建一个名为
    `guest_images_vhba`{.literal} 的存储池，它使用由
    `scsi_host3`{.literal} 父适配器标识的 vHBA、世界范围内的端口号为
    `5001a4ace3ee047d`{.literal}，以及世界范围内的节点编号
    `5001a4a93526d0a1`{.literal}。存储池挂载到 `/dev/disk/`{.literal}
    目录中：
    ``` literallayout
    # virsh pool-define-as guest_images_vhba scsi --adapter-parent scsi_host3 --adapter-wwnn 5001a4a93526d0a1 --adapter-wwpn 5001a4ace3ee047d --target /dev/disk/