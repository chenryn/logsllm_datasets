title:Automatic Reverse Engineering of Data Structures from Binary Execution
author:Zhiqiang Lin and
Xiangyu Zhang and
Dongyan Xu
Automatic Reverse Engineering of Data Structures from Binary Execution
Zhiqiang Lin Xiangyu Zhang Dongyan Xu
Department of Computer Science and CERIAS
Purdue University, West Lafayette, IN
{zlin,xyzhang,dxu}@cs.purdue.edu
Abstract
With only the binary executable of a program,
it is
useful to discover the program’s data structures and infer
their syntactic and semantic deﬁnitions. Such knowledge is
highly valuable in a variety of security and forensic applica-
tions. Although there exist efforts in program data structure
inference, the existing solutions are not suitable for our
targeted application scenarios. In this paper, we propose
a reverse engineering technique to automatically reveal
program data structures from binaries. Our technique,
called REWARDS, is based on dynamic analysis. More
speciﬁcally, each memory location accessed by the program
is tagged with a timestamped type attribute. Following the
program’s runtime data ﬂow, this attribute is propagated
to other memory locations and registers that share the
same type. During the propagation, a variable’s type gets
resolved if it is involved in a type-revealing execution point
or “type sink”. More importantly, besides the forward
type propagation, REWARDS involves a backward type
resolution procedure where the types of some previously
accessed variables get recursively resolved starting from a
type sink. This procedure is constrained by the timestamps
of relevant memory locations to disambiguate variables re-
using the same memory location. In addition, REWARDS is
able to reconstruct in-memory data structure layout based
on the type information derived. We demonstrate that
REWARDS provides unique beneﬁts to two applications:
memory image forensics and binary fuzzing for vulnerabil-
ity discovery.
1
Introduction
A desirable capability in many security and forensics
applications is automatic reverse engineering of data struc-
tures given only the binary. Such capability is expected to
identify a program’s data structures and reveal their syntax
(e.g., size, structure, offset, and layout) and semantics
(e.g., “this integer variable represents a process ID”). Such
knowledge about program data structures is highly valuable.
For example, in memory-based forensics, this knowledge
will help locate speciﬁc information of interest (e.g., IP
addresses) in a memory core dump without symbolic infor-
mation; In binary vulnerability discovery, this knowledge
will help construct a meaningful view of in-memory data
structure layout and identify those semantically associated
with external input for guided fuzz testing.
Despite the usefulness of automatic data structure re-
verse engineering, solutions that suit our targeted applica-
tion scenarios fall short. First, a large body of work on
type inference [29, 3, 13, 33, 32, 24] requires program
source code. Second, in the binary-only scenario, variables
are mapped to low-level entities such as registers and
memory locations with no syntactic information, which
makes static analysis difﬁcult. In particular, alias analysis
is hard at binary level while it is essential to type inference
– especially semantics inference – because precise data
ﬂow cannot be decided without accurate alias information.
Variable discovery [5] is a static, binary level technique
that recovers syntactic characteristics of variables, such as
a variable’s offset in its activation record, size, and hier-
archical structure. This technique relies on alias analysis
and abstract interpretation at binary level and is hence
heavy-weight. Moreover, due to the conservative nature of
binary alias analysis, the technique does not infer variable
semantics. More recently, Laika [16] aims at dynamically
discovering the syntax of observable data structures through
unsupervised machine learning on program execution. The
accuracy of this technique, however, may fall below the
expectation of our applications. It does not consider data
structure semantics either. The limitations of these efforts
motivate us to develop new techniques for our targeted
application scenarios.
In this paper, we propose a reverse engineering scheme
to automatically reveal program data structures from bi-
naries. Our technique, called REWARDS1, is based on
dynamic analysis. Given a binary executable, REWARDS
executes the binary, monitors the execution, aggregates and
analyzes runtime information, and ﬁnally recovers both
the syntax and semantics of data structures observed in
the execution. More speciﬁcally, each memory location
1REWARDS is the acronym for Reverse Engineering Work for Auto-
matic Revelation of Data Structures.
accessed by the program is tagged with a timestamped
type attribute. Following the program’s runtime data ﬂow,
this attribute is propagated to other memory addresses and
registers that share the same type in a forward fashion,
i.e., the execution direction. During the propagation, a
variable’s type gets resolved if it is involved in a type-
revealing execution point or “type sink” (e.g., a system
call, a standard library call, or a type-revealing instruction).
Besides leveraging the forward type propagation technique,
to expand the coverage of program data structures, RE-
WARDS involves the following key techniques:
semantic information from the memory dump of a binary
program.
In binary fuzzing for vulnerability discovery,
REWARDS helps identifying vulnerability “suspects” in a
binary for guided fuzzing and conﬁrmation.
2 REWARDS Overview
REWARDS infers both syntax and semantics of data
structures from binary execution. More precisely, we aim
at reverse engineering the following information:
• An on-line backward type resolution procedure where
the types of some previously accessed variables get
recursively resolved starting from a type sink. Since
many variables are dynamically created and de-
allocated at runtime, and the same memory location
may be re-used by different variables, it is complicated
to track and resolve variable types based on memory
locations alone. Hence, we constraint the resolution
process by the timestamps of relevant memory loca-
tions such that variables sharing the same memory
location in different execution phases can be disam-
biguated.
• An off-line resolution procedure that complements the
on-line procedure. Some variables cannot be resolved
during their lifetime by our on-line algorithm. How-
ever, they may later get resolved when other variables
having the same type are resolved. Hence, we propose
an off-line backward resolution procedure to resolve
the types of some “dead” variables.
• A method for typed variable abstraction that maps
multiple typed variable instances to the same static
abstraction. For example, all N nodes in a linked
list actually share the same type, instead of having N
distinct types.
• A method that reconstructs the structural and semantic
view of in-memory data, driven by the derived type
deﬁnitions. Once a program’s data structures are
identiﬁed, it is still not clear exactly how the data
structures would be laid out in memory – this is a
useful piece of knowledge in many application sce-
narios such as memory forensics. Our method creates
an “organization chart” that illustrates the hierarchical
layout of those data structures.
We have developed a prototype of REWARDS and used
it to analyze a number of binaries. Our evaluation results
show that REWARDS is able to correctly reveal the types
of a high percentage of variables observed during a pro-
gram’s execution. Furthermore, we demonstrate the unique
beneﬁts of REWARDS to a variety of application scenarios:
In memory image forensics, REWARDS helps recovering
• Data types. We ﬁrst aim to infer the primitive data
types of variables, such as char, short, float,
and int.
In a binary, the variables are located in
various segments of the virtual address space, such as
.stack, .heap, .data, .bss, .got, .rodata,
.ctors, and .dtors sections. (Although we focus
on ELF binary on Linux platform, REWARDS can
be easily ported to handle PE binary on Windows.)
Hence, our goal is essentially to annotate memory
locations in these data sections with types and sizes,
following program execution. For our targeted appli-
cations, REWARDS also infers composite types such
as socket address structures and FILE structures.
• Semantics. Moreover, we aim to infer the semantics
(meaning) of program variables, which is critical to
applications such as computer forensics. For example,
in a memory dump, we want to decide if a 4-byte
integer denotes an IP address.
• Abstract representation. Although we type memory
locations, it is undesirable to simply present typed
memory locations to the user. During program ex-
ecution, a memory location may be used by multi-
ple variables at different times; and a variable may
have multiple instances. Hence we derive an abstract
representation for a variable by aggregating the type
information at multiple memory locations instantiated
based on the same variable. For example, we use the
offset of a local variable in its activation record as its
abstract representation. Type information collected in
all activation records of the same function is aggre-
gated to derive the type of the variable.
Given only the binary, what can be observed at runtime
from each instruction includes (1) the addresses accessed
and the width of the accesses, (2) the semantics of the in-
struction, and (3) the execution context such as the program
counter and the call stack. In some cases, data types can be
partially inferred from instructions. For example, a ﬂoating
point instruction (e.g., FADD) implies that the accessed lo-
cations must have ﬂoating point numbers. We also observe
that the parameters and return values of standard library
calls and system calls often have their syntax and semantics
 1 struct {
 2     unsigned int pid;
 3     char data[16];
 4 }test;
 5
 6 void foo(){
 7
 8     test.pid=my_getpid();
 9     strcpy(test.data,p);
10 }
char *p="hello world";
 1 extern foo
 2 section .text
 3     global _start
 4
 5 _start:
 6     call foo
 7     mov eax,1
 8     mov ebx,0
 9     int 80h
(a) Source code of function foo and the _start assembly code
[Nr] Name      Type       Addr     Off    Size   
...
[ 1] .text     PROGBITS   080480a0 0000a0 000078 
[ 2] .rodata   PROGBITS   08048118 000118 00000c 
[ 3] .bss      NOBITS     08049124 000124 000014
...
(c) Section map of the example binary
rodata_0x08048118{
+00:    char[12]
}
bss_0x08049124{
+00:    pid_t,
+04:    char[12],
+16:    unused[4]
}
fun_0x080480b4{
-28:    unused[20],
-08:    char *,
-04:    stack_frame_t,
+00:    ret_addr_t
}
fun_0x08048110{
+00:   ret_addr_t
}
fun_0x080480e0{
-08:   unused[4],
-04:   stack_frame_t,
+00:   ret_addr_t,
+04:   char*,
+08:   char*
}
 1  80480a0:   e8 0f 00 00 00          call   0x80480b4
 2  80480a5:   b8 01 00 00 00          mov    $0x1,%eax
 3  80480aa:   bb 00 00 00 00          mov    $0x0,%ebx
 4  80480af:   cd 80                   int    $0x80
 5  ...
 6  80480b4:   55                      push   %ebp
 7  80480b5:   89 e5                   mov    %esp,%ebp
 8  80480b7:   83 ec 18                sub    $0x18,%esp
 9  80480ba:   c7 45 fc 18 81 04 08    movl   $0x8048118,0xfffffffc(%ebp)
10  80480c1:   e8 4a 00 00 00          call   0x8048110
11  80480c6:   a3 24 91 04 08          mov    %eax,0x8049124
12  80480cb:   8b 45 fc                mov    0xfffffffc(%ebp),%eax
13  80480ce:   89 44 24 04             mov    %eax,0x4(%esp)
14  80480d2:   c7 04 24 28 91 04 08    movl   $0x8049128,(%esp)
15  80480d9:   e8 02 00 00 00          call   0x80480e0
16  80480de:   c9                      leave
17  80480df:   c3                      ret
18  80480e0:   55                      push   %ebp
19  80480e1:   89 e5                   mov    %esp,%ebp
20  80480e3:   53                      push   %ebx
21  80480e4:   8b 5d 08                mov    0x8(%ebp),%ebx
22  80480e7:   8b 55 0c                mov    0xc(%ebp),%edx
23  80480ea:   89 d8                   mov    %ebx,%eax
24  80480ec:   29 d0                   sub    %edx,%eax
25  80480ee:   8d 48 ff                lea    0xffffffff(%eax),%ecx
26  80480f1:   0f b6 02                movzbl (%edx),%eax
27  80480f4:   83 c2 01                add    $0x1,%edx
28  80480f7:   84 c0                   test   %al,%al
29  80480f9:   88 04 0a                mov    %al,(%edx,%ecx,1)
30  80480fc:   75 f3                   jne    0x80480f1
31  80480fe:   89 d8                   mov    %ebx,%eax
32  8048100:   5b                      pop    %ebx
33  8048101:   5d                      pop    %ebp
34  8048102:   c3                      ret
35  ...
36  8048110:   b8 14 00 00 00          mov    $0x14,%eax
37  8048115:   cd 80                   int    $0x80
38  8048117:   c3                      ret
(d) Output of REWARDS
(b) Disassembly code of the example binary
Figure 1. An example showing how REWARDS works
well deﬁned and publicly known. Hence we deﬁne the type
revealing instructions, system calls, and library calls as type
sinks. Furthermore, the execution of an instruction creates a
dependency between the variables involved. For instance, if
a variable with a resolved type (from a type sink) is copied
to another variable, the destination variable should have a
compatible type. As such, we model our problem as a type
information ﬂow problem.
To illustrate how REWARDS works, we use a simple
program compiled from the source code shown in Figure
1(a). According to the code snippet, the program has a
global variable test (line 1-4) which consists of an int
and a char array.
It contains a function foo (line 6-
10) that calls my getpid and strcpy to initialize the
global variable. The full disassembled code of the example
is shown in Figure 1(b) (a dotted line indicates a “NOP”
instruction). The address mapping of code and data is
shown in Figure 1(c).
When foo is called during execution, it ﬁrst saves ebp
and then allocates 0x18 bytes of memory for the local
variables (line 8 in Figure 1(b)), and then initializes one
local variable (at address 0xfffffffc(%ebp)=ebp-4)
with an immediate value 0x8048118 (line 9). Since
0x8048118 is in the address range of the .rodata
section (it is actually the starting address of string “hello
world”), ebp-4 can be typed as a pointer, based on the
heuristics that instruction executions using similar immedi-
ate values within a code or data section are considered type
sinks. Note that the type of the pointer is unknown yet.
At line 10, foo calls 0x8048110. Inside the body of the
function invocation (lines 36-38), our algorithm detects a
getpid system call (a type sink) with eax being 0x14 at
line 36. The return value of the function call is resolved as
pid t type, i.e., register eax at line 11 is typed pid t.
When eax is copied to address 0x8049124 (a global
variable in .bss section as shown in Figure 1(c)), the
algorithm further resolves 0x8049124 as pid t. Before
the function call 0x80480e0 at line 15 (strcpy), the
parameters are initialized in lines 12-14. As ebp-4 has
been typed as a pointer at line 9, the data ﬂow in lines 12
and 13 dictates that location esp+4 at line 13 is a pointer
as well. At line 14, as 0x8049128 is in the global variable
section and of a known type, location esp has an unknown
pointer type. At line 15, upon the call to strcpy (a
type sink), both esp and esp+4 are resolved to char*.
Through a backward transitive resolution, 0x8049128 is
resolved as char, ebp-4 as char*, and 0x8048118 as
char. Also at line 26, inside the function body of strcpy,
the instruction “movzbl (%edx),%eax” can be used as
another type sink as it moves between char variables.
When the program ﬁnishes, we resolve all data types
(including function arguments, and those implicit vari-
ables such as return address and stack frame pointer)
as shown in Figure 1(d). The derived types for vari-
ables in .rodata, .bss and functions are presented
in the ﬁgure.
Each function is denoted by its entry
address. fun 0x080480b4, fun 0x08048110, and
fun 0x080480e0 denote foo(), my getpid(), and
strcpy(), respectively. The number before each de-
rived type denotes the offset. Variables are listed in in-
creasing order of their addresses. Type stack frame t
indicates a frame pointer stored at that location. Type
ret addr t means that the location holds a return ad-
dress. Such semantic information is useful in applica-
tions such as vulnerability fuzz. Locations that are not
accessed during execution are annotated with the unused
the two char* below
type.
the ret addr t represent the two actual arguments of
strcpy(). Although it seems that our example can be
statically resolved due to its simplicity, it is very difﬁcult in
practice to analyze data ﬂows between instructions (espe-
cially those involving heap locations) due to the difﬁculty
of binary points-to analysis.
In fun 0x080480e0,
3 REWARDS Design
In this section, we describe the design of REWARDS.
We ﬁrst identify the type sinks used in REWARDS and
then present the on-line type propagation and resolution
algorithm, which will be enhanced by an off-line procedure
that recovers more variable types not reported by the on-line
algorithm. Finally, we present a method to construct a typed
hierarchical view of memory layout.
3.1 Type Sinks
A type sink is an execution point of a program where
the types (including semantics) of one or more variables
can be directly resolved. In REWARDS, we identify three
categories of type sinks: