# ThinkPHP 3.2.3 漏洞复现
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 $this->show 造成命令执行
在 `Home\Controller\IndexController` 下的index中传入了一个可控参数，跟进调试看一下。
    class IndexController extends Controller
    {
        public function index($n='')
        {
            $this->show(' :)欢迎使用 ThinkPHP！版本 V{$Think.version}Hello '.$n, 'utf-8');
        }
    }
跟进 `display()`
    protected function show($content,$charset='',$contentType='',$prefix='') {
        $this->view->display('',$charset,$contentType,$content,$prefix);
    }
一路跟进到 `fetch()`，然后一路进入 `Hook::listen('view_parse', $params);`
    public function fetch($templateFile='', $content='', $prefix='')
    {
        if (empty($content)) {
            $templateFile   =   $this->parseTemplate($templateFile);
            // 模板文件不存在直接返回
            if (!is_file($templateFile)) {
                E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile);
            }
        } else {
            defined('THEME_PATH') or    define('THEME_PATH', $this->getThemePath());
        }
        // 页面缓存
        ob_start();
        ob_implicit_flush(0);
        if ('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { // 使用PHP原生模板
            $_content   =   $content;
            // 模板阵列变量分解成为独立变量
            extract($this->tVar, EXTR_OVERWRITE);
            // 直接载入PHP模板
            empty($_content)?include $templateFile:eval('?>'.$_content);
        } else {
            // 视图解析标签
            $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix);
            Hook::listen('view_parse', $params);
        }
        // 获取并清空缓存
        $content = ob_get_clean();
        // 内容过滤标签
        Hook::listen('view_filter', $content);
        // 输出模板文件
        return $content;
    }
关键地方在这，我们之前 `index`
里的内容被存入了缓存文件php文件中，连带着我们输入的可控的php代码也在其中，然后包含了该文件，所以造成了命令执行。
    public function load($_filename,$vars=null){
        if(!is_null($vars)){
            extract($vars, EXTR_OVERWRITE);
        }
        include $_filename;
    }
## 0x01 sql注入
`/Application/Home/Controller/IndexController.class.php`
添加一段SQL查询代码。`http://localhost/tp323/index.php/Home/Index/sql?id=1` 查询入口。
    public function sql()
    {
        $id = I('GET.id');
        $user = M('user');
        $data = $user->find($id);
        var_dump($data);
    }
传入 `id=1 and updatexml(1,concat(0x7e,user(),0x7e),1)--+` ，跟进调试。进入 `find()`
函数，先进行一段判断，传入的参数是否是数字或者字符串，满足条件的话 `$options['where']['id']=input`。
    if(is_numeric($options) || is_string($options)) {
        $where[$this->getPk()]  =   $options;
        $options                =   array();
        $options['where']       =   $where;
    }
随后进行一个判断 `if (is_array($options) && (count($options) > 0) &&
is_array($pk))`，`getPk()`函数是查找mysql主键的函数，显然 `$pk` 值是 `id`，不满足条件
    $pk  =  $this->getPk(); // $pk='id'
    if (is_array($options) && (count($options) > 0) && is_array($pk)) {
        //
    }
随后执行 `$options = $this->_parseOptions($options);` ，
    protected function _parseOptions($options=array())
    {
        if (is_array($options)) {
            $options =  array_merge($this->options, $options);
        }
        if (!isset($options['table'])) {
            // 自动获取表名
            $options['table']   =   $this->getTableName();
            $fields             =   $this->fields;
        } else {
            // 指定数据表 则重新获取字段列表 但不支持类型检测
            $fields             =   $this->getDbFields();
        }
        // 数据表别名
        if (!empty($options['alias'])) {
            $options['table']  .=   ' '.$options['alias'];
        }
        // 记录操作的模型名称
        $options['model']       =   $this->name;
        // 字段类型验证
        if (isset($options['where']) && is_array($options['where']) && !empty($fields) && !isset($options['join'])) {
            // 对数组查询条件进行字段类型检查
            foreach ($options['where'] as $key=>$val) {
                $key            =   trim($key);
                if (in_array($key, $fields, true)) {
                    if (is_scalar($val)) {
                        $this->_parseType($options['where'], $key);
                    }
                } elseif (!is_numeric($key) && '_' != substr($key, 0, 1) && false === strpos($key, '.') && false === strpos($key, '(') && false === strpos($key, '|') && false === strpos($key, '&')) {
                    if (!empty($this->options['strict'])) {
                        E(L('_ERROR_QUERY_EXPRESS_').':['.$key.'=>'.$val.']');
                    }
                    unset($options['where'][$key]);
                }
            }
        }
        // 查询过后清空sql表达式组装 避免影响下次查询
        $this->options  =   array();
        // 表达式过滤
        $this->_options_filter($options);
        return $options;
    }
先获取查询的表的字段和字段类型。
    if (!isset($options['table'])) {
        // 自动获取表名
        $options['table']   =   $this->getTableName();
        $fields             =   $this->fields;
    }
关键代码在于下面这个判断里，进入 `$this->_parseType($options['where'], $key)` 。
    if (isset($options['where']) && is_array($options['where']) && !empty($fields) && !isset($options['join'])) {
        // 对数组查询条件进行字段类型检查
        foreach ($options['where'] as $key=>$val) {
            $key            =   trim($key);
            if (in_array($key, $fields, true)) {
                if (is_scalar($val)) {
                    $this->_parseType($options['where'], $key);
                }
            } elseif (!is_numeric($key) && '_' != substr($key, 0, 1) && false === strpos($key, '.') && false === strpos($key, '(') && false === strpos($key, '|') && false === strpos($key, '&')) {
                if (!empty($this->options['strict'])) {
                    E(L('_ERROR_QUERY_EXPRESS_').':['.$key.'=>'.$val.']');
                }
                unset($options['where'][$key]);
            }
        }
    }
这里由于id字段的类型是 `int` ，所以进入第二个分支，将我们的输入转化为十进制，恶意语句就被过滤了，后面就是正常的SQL语句了。
    protected function _parseType(&$data,$key) {
        if(!isset($this->options['bind'][':'.$key]) && isset($this->fields['_type'][$key])){
            $fieldType = strtolower($this->fields['_type'][$key]);
            if(false !== strpos($fieldType,'enum')){
                // 支持ENUM类型优先检测
            }elseif(false === strpos($fieldType,'bigint') && false !== strpos($fieldType,'int')) {
                $data[$key]   =  intval($data[$key]);
            }elseif(false !== strpos($fieldType,'float') || false !== strpos($fieldType,'double')){
                $data[$key]   =  floatval($data[$key]);
            }elseif(false !== strpos($fieldType,'bool')){
                $data[$key]   =  (bool)$data[$key];
            }
        }
    }
如果我们传参是传入一个数组 `id[where]=1 and updatexml(1,concat(0x7e,user(),0x7e),1)--+`
，在`find()` 函数的第一个判断就没有满足条件不会进入这个判断，此时 `$options` 就是 `$options[where]='1 and
updatexml(1,concat(0x7e,user(),0x7e),1)-- '`，而没有上面的键 `id`。
    if(is_numeric($options) || is_string($options)) {
        $where[$this->getPk()]  =   $options;
        $options                =   array();
        $options['where']       =   $where;
    }
然后到下面的关键代码的判断 `if (isset($options['where']) && is_array($options['where']) &&
!empty($fields) && !isset($options['join']))` ，`is_array($options['where'])`
显然是false，因为此时 `$options['where']` 是一个字符串而不是数组，所以不会进入下面的判断，也就是说不会进入函数
`_parseType()` 对我们的输入进行过滤。
之后回到 `find()` 函数中进入 `$resultSet = $this->db->select($options);`，此时的 `$options`
就是我们输入的恶意SQL语句，显然注入成功。
## 0x02 反序列化 & sql注入
`/Application/Home/Controller/IndexController.class.php`
添加一段代码。`http://localhost/tp323/index.php/Home/Index/sql?data=` 查询入口。
    public function sql()
    {
        unserialize(base64_decode($_POST['data']));
    }
全局搜索 `function __destruct`，找一个起点。
在文件：`/ThinkPHP/Library/Think/Image/Driver/Imagick.class.php` 中找到了 `Imagick` 类的
`__destruct` 方法。
    public function __destruct() {
        empty($this->img) || $this->img->destroy();
    }
这里 `$this->img` 是可控的，所以我们接着找一下 `destroy()` 函数。共有三个，选择了
`ThinkPHP/Library/Think/Session/Driver/Memcache.class.php` 中的 `Memcache` 类的
`destroy` 函数。这里有个坑，由于上面调用 `destroy()`
函数时没有参数传入，而我们找到的是有参数的，PHP7下起的ThinkPHP在调用有参函数却没有传入参数的情况下会报错，所以我们要选用PHP5而不选用PHP7.
    public function destroy($sessID) {
        return $this->handle->delete($this->sessionName.$sessID);
    }
这里`handle` 可控，那么就接着找 `delete` 函数。在 `ThinkPHP/Mode/Lite/Model.class.php` 的
`Model` 类中找到了合适的函数，当然选用 `/ThinkPHP/Library/Think/Model.class.php`
中的该函数也是可以的。我们的目的就是进入 `$this->delete($this->data[$pk])`。所以这里只截取了前面部分的代码。
    public function delete($options=array()) {
        $pk   =  $this->getPk();
        if(empty($options) && empty($this->options['where'])) {
            // 如果删除条件为空 则删除当前数据对象所对应的记录
            if(!empty($this->data) && isset($this->data[$pk]))
                return $this->delete($this->data[$pk]);
            else
                return false;
        }
    }
我们想要调用这个if中的 `delete` ，就要使得我们传入的 `$options` 为空，且 `$this->options['where']`
为空，是可控的，所以走到第二个if，`$this->data` 不为空，且 `$this->data[$pk]` 存在，满足条件就可以调用
`delete($this->data[$pk])` 了。而 `$pk` 就是 `$this->pk` ，都是可控的。
之前因为 `destroy()` 调用时没有参数，使得调用 `delete` 函数参数部分可控，而现在我们正常带着参数进入了 `delete`
函数，就可以接着往下走了。直到运行至 `$result =
$this->db->delete($options);`，调用了ThinkPHP数据库模型类中的 `delete()` 方法。
这里的 `$table` 是取自传入的参数，可控，直接拼接到 `$sql` 中，然后传入了 `$this->execute`。
    public function delete($options=array()) {
        $this->model  =   $options['model'];
        $this->parseBind(!empty($options['bind'])?$options['bind']:array());
        $table  =   $this->parseTable($options['table']);
        $sql    =   'DELETE FROM '.$table;
        if(strpos($table,',')){// 多表删除支持USING和JOIN操作
            if(!empty($options['using'])){
                $sql .= ' USING '.$this->parseTable($options['using']).' ';
            }
            $sql .= $this->parseJoin(!empty($options['join'])?$options['join']:'');
        }
        $sql .= $this->parseWhere(!empty($options['where'])?$options['where']:'');
        if(!strpos($table,',')){
            // 单表删除支持order和limit
            $sql .= $this->parseOrder(!empty($options['order'])?$options['order']:'')
                .$this->parseLimit(!empty($options['limit'])?$options['limit']:'');
        }
        $sql .=   $this->parseComment(!empty($options['comment'])?$options['comment']:'');
        return $this->execute($sql,!empty($options['fetch_sql']) ? true : false);
    }
接着调用 `$this->initConnect(true);`，随后是 `$this->connect()` ，这里是用 `$this->config`
来初始化数据库的，然后去执行先前拼接好的SQL语句。
    linkID[$linkNum]) ) {
            if(empty($config))  $config =   $this->config;
            try{
                if(empty($config['dsn'])) {
                    $config['dsn']  =   $this->parseDsn($config);
                }
                if(version_compare(PHP_VERSION,'5.3.6','options[PDO::ATTR_EMULATE_PREPARES]  =   false;
                }
                $this->linkID[$linkNum] = new PDO( $config['dsn'], $config['username'], $config['password'],$this->options);
            }catch (\PDOException $e) {
                if($autoConnection){
                    trace($e->getMessage(),'','ERR');
                    return $this->connect($autoConnection,$linkNum);
                }elseif($config['debug']){
                    E($e->getMessage());
                }
            }
        }
        return $this->linkID[$linkNum];
    }
所以POP链就出来了：
    <?php