mmrnode_a=# SELECT * FROM mmr_seq_child_tbl ORDER BY id;
id | field | parent_id
------------------+---------------------+------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
4503599627370504 | mmrnode_a - Row 4-1 | 4503599627370503
(7 rows)
The following rows are inserted on mmrnode_b:
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_b - Row 1');
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_b - Row 1-
1', 9007199254740993);
mmrnode_b=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
9007199254740993 | mmrnode_b - Row 1
(4 rows)
mmrnode_b=# SELECT * FROM mmr_seq_child_tbl ORDER BY id;
id | field | parent_id
------------------+---------------------+------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
9007199254740994 | mmrnode_b - Row 1-1 | 9007199254740993
(7 rows)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 300
EDB Postgres Replication Server User’s Guide
The following rows are inserted on mmrnode_c:
INSERT INTO mmr_seq_tbl (field) VALUES ('mmrnode_c - Row 1');
INSERT INTO mmr_seq_child_tbl (field, parent_id) VALUES ('mmrnode_c - Row 1-
1', 13510798882111489);
mmrnode_c=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
13510798882111489 | mmrnode_c - Row 1
(4 rows)
mmrnode_c=# SELECT * FROM mmr_seq_child_tbl ORDER BY id;
id | field | parent_id
-------------------+---------------------+-------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
13510798882111490 | mmrnode_c - Row 1-1 | 13510798882111489
(7 rows)
After a synchronization replication is performed, there are no uniqueness conflicts. The
following shows the synchronized, consistent tables in the master nodes:
Content of mmrnode_a after synchronization:
mmrnode_a=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
4503599627370503 | mmrnode_a - Row 4
9007199254740993 | mmrnode_b - Row 1
13510798882111489 | mmrnode_c - Row 1
(6 rows)
mmrnode_a=# SELECT * FROM mmr_seq_child_tbl ORDER BY id;
id | field | parent_id
-------------------+---------------------+-------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
4503599627370504 | mmrnode_a - Row 4-1 | 4503599627370503
9007199254740994 | mmrnode_b - Row 1-1 | 9007199254740993
13510798882111490 | mmrnode_c - Row 1-1 | 13510798882111489
(9 rows)
Content of mmrnode_b after synchronization:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 301
EDB Postgres Replication Server User’s Guide
mmrnode_b=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
4503599627370503 | mmrnode_a - Row 4
9007199254740993 | mmrnode_b - Row 1
13510798882111489 | mmrnode_c - Row 1
(6 rows)
mmrnode_b=# SELECT * FROM mmr_seq_child_tbl ORDER BY id;
id | field | parent_id
-------------------+---------------------+-------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
4503599627370504 | mmrnode_a - Row 4-1 | 4503599627370503
9007199254740994 | mmrnode_b - Row 1-1 | 9007199254740993
13510798882111490 | mmrnode_c - Row 1-1 | 13510798882111489
(9 rows)
Content of mmrnode_c after synchronization:
mmrnode_c=# SELECT * FROM mmr_seq_tbl ORDER BY id;
id | field
-------------------+-------------------
4503599627370497 | mmrnode_a - Row 1
4503599627370498 | mmrnode_a - Row 2
4503599627370499 | mmrnode_a - Row 3
4503599627370503 | mmrnode_a - Row 4
9007199254740993 | mmrnode_b - Row 1
13510798882111489 | mmrnode_c - Row 1
(6 rows)
mmrnode_c=# SELECT * FROM mmr_seq_child_tbl ORDER BY id;
id | field | parent_id
-------------------+---------------------+-------------------
4503599627370497 | mmrnode_a - Row 1-1 | 4503599627370497
4503599627370498 | mmrnode_a - Row 1-2 | 4503599627370497
4503599627370499 | mmrnode_a - Row 2-1 | 4503599627370498
4503599627370500 | mmrnode_a - Row 2-2 | 4503599627370498
4503599627370501 | mmrnode_a - Row 3-1 | 4503599627370499
4503599627370502 | mmrnode_a - Row 3-2 | 4503599627370499
4503599627370504 | mmrnode_a - Row 4-1 | 4503599627370503
9007199254740994 | mmrnode_b - Row 1-1 | 9007199254740993
13510798882111490 | mmrnode_c - Row 1-1 | 13510798882111489
(9 rows)
6.6.7 Automatic Conflict Resolution Example
This example illustrates a scenario where a transaction change originating from the first
master node is successfully applied to the second master node, but conflicts with the third
master node. The conflict is resolved automatically.
The conflict resolution option is set to latest timestamp.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 302
EDB Postgres Replication Server User’s Guide
Table 6-5 – Automatic Conflict Resolution Example
Timestamp Action Master Node A Master Node B Master Node C
id = 2, address = id = 2, address = id = 2, address =
t0
'ADDR' 'ADDR' 'ADDR'
Node A: UPDATE
addrbook SET id = 2, address = id = 2, address = id = 2, address =
t1
address = 'ADDR A' 'ADDR A' 'ADDR' 'ADDR'
WHERE id = 2;
Node C: UPDATE
addrbook SET id = 2, address = id = 2, address = id = 2, address =
t2
address = 'ADDR C' 'ADDR A' 'ADDR' 'ADDR C'
WHERE id = 2;
Synchronization pushes
Node A changes to id = 2, address = id = 2, address = id = 2, address =
t3
Node B. Changes 'ADDR A' 'ADDR A' 'ADDR C'
successfully applied.
Synchronization pushes
Node A changes to
Node C. Current
address on Node C <>
old value on Node A
id = 2, address = id = 2, address = id = 2, address =
t4 ('ADDR C' <>
'ADDR A' 'ADDR A' 'ADDR C'
'ADDR') hence conflict
detected. Latest change
on Node C accepted
and Node A change
discarded.
No changes on Node B.
Node C changes pushed
to Node A that is
successfully applied id = 2, address = id = 2, address = id = 2, address =
t5
(Node A change already 'ADDR C' 'ADDR A' 'ADDR C'
marked as discarded
and hence is
overwritten.)
Node C changes pushed
to Node B that is
successfully applied. id = 2, address = id = 2, address = id = 2, address =
t6
All nodes are in sync 'ADDR C' 'ADDR C' 'ADDR C'
and have consistent
state.
There are a few situations where an update/update conflict may not be properly resolved
according to the selected resolution options. These exceptions are described by the
following.
Update/Update Conflict on Column Where New Value is Identical to Original Value
If there is an update to a publication table where the updated column value happens to be
the same as the original column value, and then an update/update conflict occurs
involving that column, there is the possibility that the final value of this column is not set
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 303
EDB Postgres Replication Server User’s Guide
according to the chosen conflict resolution option in one of the conflicting master nodes.
This is a known limitation.
For example, consider the following row in the dept table:
deptno | dname | loc
--------+------------+--------
40 | OPERATIONS | BOSTON
First, the following UPDATE statement is given in the master definition node:
edb=# UPDATE dept SET dname = 'OPERATIONS', loc = 'BEDFORD' WHERE deptno =
40;
UPDATE 1
edb=# SELECT * FROM dept WHERE deptno = 40;
deptno | dname | loc
--------+------------+---------
40 | OPERATIONS | BEDFORD
(1 row)
Note that the original value, OPERATIONS, of column dname is the same as the value to
which it is changed in the UPDATE statement.
The following UPDATE statement is then given in a second master node:
mmrnode=# UPDATE dept SET dname = 'LOGISTICS', loc = 'CAMBRIDGE' WHERE deptno
= 40;
UPDATE 1
mmrnode=# SELECT * FROM dept WHERE deptno = 40;
deptno | dname | loc
--------+-----------+-----------
40 | LOGISTICS | CAMBRIDGE
(1 row)
After a synchronization replication using the earliest timestamp conflict resolution
option, the row in the master definition node retains the update performed on it as
expected since the update on the master definition node occurred first.
edb=# SELECT * FROM dept WHERE deptno = 40;
deptno | dname | loc
--------+------------+---------
40 | OPERATIONS | BEDFORD
(1 row)
However the value of column dname in the second master node remains set to
LOGISTICS. It was not reverted back to the value OPERATIONS from the master
definition node as would normally be expected on a conflicting column. Note that as
expected, the value in column loc is reverted from CAMBRIDGE back to the master
definition node value of BEDFORD.
mmrnode=# SELECT * FROM dept WHERE deptno = 40;
deptno | dname | loc
--------+-----------+---------
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 304
EDB Postgres Replication Server User’s Guide
40 | LOGISTICS | BEDFORD
(1 row)
Update/Update Conflict on Primary Key Columns
An update/update conflict on the primary key column may not be consistently resolved
according to the selected resolution option. That is, the column values may differ for the
same row across multiple master nodes following the synchronization replication.
In addition, this conflict may not appear under the Conflict History tab in the xDB
Replication Console. Even if a conflict resolution entry does appear under the Conflict
History tab, the actual primary key values may not be consistent across the nodes as
implied by the conflict resolution.
6.6.8 Custom Conflict Handling
For update/update conflicts, custom conflict handling utilizes a PL/pgSQL function to
resolve the conflict. If you are using Advanced Server, a Stored Procedure Language
(SPL) function can be used as well. When an update/update conflict is detected the
function is called. How you set a certain parameter in the function determines the
outcome of the conflict.
You must provide the function and add it to the master definition node using a utility
such as PSQL or pgAdmin (Postgres Enterprise Manager Client in Advanced Server).
6.6.8.1 Custom Conflict Handling Function
An update/update conflict occurs if there is at least one conflicting column in the table.
A column is considered a conflicting column if it is updated on more than one master
node in the same synchronization. Even if the new, updated value for the column is
identical in the conflicting update transactions, the fact that the same column was updated
on more than one master node makes it a conflicting column.
Each publication table must have its own custom conflict handling function to handle
custom resolution for update/update conflicts on that particular publication table.
Custom conflict handling is designed to provide one of the following three outcomes
based upon the setting of the resolution_code parameter, which is described later in
this section.
 Columns are to be set to the source node. When the resolution_code
parameter of the function is set to a value of 1, the resultant setting of all columns
in both conflicting nodes is obtained from the source node of the replication.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 305
EDB Postgres Replication Server User’s Guide
 Columns are to be set to the target node. When the resolution_code
parameter of the function is set to a value of 2, the resultant setting of all columns
in both conflicting nodes is obtained from the target node of the replication.
 The function logic sets the column. When the resolution_code parameter of
the function is set to a value of 3, the resultant setting of the first conflicting
column is obtained from the value returned in the source parameter coded
within the function logic. The resultant setting of all other column values is
obtained from the source node of the replication.
The following is an example of a custom conflict handling function where the conflicting
columns are set to the target node.
CREATE OR REPLACE FUNCTION edb.custom_conflict_dept (
INOUT source _edb_replicator_pub.rrst_edb_dept,
IN target _edb_replicator_pub.rrst_edb_dept,
IN conflict_column VARCHAR(255),
OUT resolution_message VARCHAR(255),
OUT resolution_code INTEGER
)
AS
$$
DECLARE
BEGIN
resolution_code := 2;
resolution_message := 'Custom conflict handling: Target node wins on
edb.dept ';
END;
$$
LANGUAGE plpgsql;
If the multi-master replication system is configured with the log-based method of
synchronization replication the shadow tables of the INOUT source and IN target
parameters are replaced with the actual publication tables as shown by the following:
CREATE OR REPLACE FUNCTION edb.custom_conflict_dept (
INOUT source edb.dept,
IN target edb.dept,
IN conflict_column VARCHAR(255),
OUT resolution_message VARCHAR(255),
OUT resolution_code INTEGER
)
AS
$$
DECLARE
BEGIN
resolution_code := 2;
resolution_message := 'Custom conflict handling: Target node wins on