## Page 239
void PrintProbability(intnumber)
基于这个思路，我们可以写出如下代码：
个数字设为前一个数组对应的第n-1、n-2、n-3、n-4、n-5与 n-6之和。
n-2、n-3、n-4、n-5与n-6 的次数的总和，所以我们把另一个数组的第 n
此时和为n 的般子出现的次数应该等于上一次循环中般子点数和为n-1、
数字表示骰子和为n出现的次数。在下一循环中，我们加上一个新的般子，
子点数的每一个总数出现的次数。
delete[]
delete[]
for（inti
double total =pow((double)g_maxValue,number);
for（intk=2;k numberOfZero) ? false:true;
源代码
特殊输入测试（输入NULL指针）。
大、小王，抽出的牌中有对子)。
功能测试（抽出的牌中有一个或者多个大、小王，抽出的牌中没有
一名企面试官精讲典型编程题（纪念版）
---
## Page 243
int LastRemaining(unsigned int n, unsigned int m)
里遍历了。这种思路的代码如下：
我们要记得把迭代器移到链表的头部，这样就相当于按照顺序在一个圆圈
不是一个环形结构，因此每当迭代器（Iterator）扫描到链表末尾的时候，
我们就可以用模板库中的std:list来模拟一个环形链表。由于std:list本身并
表，我们自己实现一个链表也不是很难的事情。如果面试官没有特殊要求，
图6.2由0-4这5个数字组成的圆圈
结点。
创建一个总共有n个结点的环形链表，然后每次在这个链表中删除第m个
拟这个圆圈。在常用的数据结构中，我们很容易想到环形链表。我们可以
经典的解法，用环形链表模拟圆圈
的数字的规律并直接计算出圆圈中最后剩下的数字。
种方法是用环形链表模拟圆圈的经典解法，第二种方法是分析每次被删除
因此最后剩下的数字是3。
数字0开始每次删除第3个数字，则删除的前四个数字依次是2、0、4、1，
if(n numbers;
unsigned int i= 0;
如果面试官要求我们不能使用标准模板库里的数据容器来模拟环形链
既然题目中有一个数字圆圈，很自然的想法就是用一个数据结构来模
本题就是有名的约瑟夫（Josephuse）环问题。我们介绍两种方法：一
for（i
例如，0、1、2、3、4这5个数字组成一个圆圈（如图6.2所示)，从
return-l;
0：
N
n；
第6章面试中的各项能力229
---
## Page 244
230
▼
剑指Offer-
字之后的序列最后剩下的数字，即 f(n,m)=f(n-1,m)。
函数，记为 f(n-1,m)。最初序列最后剩下的数字 f(n,m)一定是删除一个数
列不一样（最初的序列是从0开始的连续序列)，因此该函数不同于前面的
的数字也应该是关于n和m的函数。由于这个序列的规律和前面最初的序
中，k+1排在最前面，从而形成k+1,..,n-1,0,1,.,k-1。该序列最后剩下
k+l，,n-1，并且下一次删除从数字k+1开始计数。相当于在剩下的序列
们把(m-1)%n记为k，那么删除k之后剩下的n-1个数字为0，1，，k-1,
创新的解法，拿到Offer不在话下
些规律，希望能够找到更加高效的算法。
圆圈，其空间复杂度是O(n)。接下来我们试着找到每次被删除的数字有哪
因此总的时间复杂度是O(mn)。同时这种思路还需要一个辅助链表来模拟
负面的影响。这种方法每删除一个数字需要m步运算，总共有n个数字，
1,,n-1中每次删除第m个数字最后剩下的数字。
实际上需要在环形链表里重复遍历很多遍。重复的遍历当然对时间效率有
接下来我们把剩下的这 n-1个数字的序列k+1,..,n-1,0,1,..,k-1做
在这n个数字中，第一个被删除的数字是(m-1)%n。为了简单起见，我
首先我们定义一个关于n和m的方程f(n,m)，表示每次在n个数字 0,
如果我们用一两个例子仔细分析上述代码的运行过程，就会发现我们
return *(current);
while(numbers.size() >1)
list::iterator current = numbers.begin();
current= next;
numbers.erase(current);
if(next
list::iterator next=++ current;
for（int i=1;i<m;++i）
一名企面试官精讲典型编程题（纪念版）
current;
next=numbers.begin();
current ++;
current
numbers.end())
=numbers.begin()
==numbers.end())
---
## Page 245
int LastRemaining(unsigned int n,unsigned int m)
环实现的代码：
显然最后剩下的数字就是0。我们把这种关系表示为：
数字，并以此类推。当n=1时，也就是序列中开始只有一个数字0，那么很
字的序列中最后剩下的数字，只需要得到n-1个数字的序列中最后剩下的
m)+k+1]%n，把 k=(m-1)%n 代入得到 f(n, m)=f’(n-1,m)=[f(n-1, m)+m]%n。
射规则,映射之前的序列中最后剩下的数字 f(n-1,m)=p[f(n-1,m)]=[f(n-1,
的连续序列，因此仍然可以用函数f来表示，记为f(n-1,m)。根据我们的映
x，那么映射后的数字是(x-k-1)%n。该映射的逆映射是p(x)=(x+k+1)%n。
（-1
k+1
一个映射，映射的结果是形成一个从0到n-2 的序列：
returnlast;
经过上面复杂的分析，我们终于找到了一个递归公式。要得到n个数