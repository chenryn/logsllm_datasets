corresponding “partial” minpath.
B. Mincut search
The mincut search is more complex, since it requires for
each step to explore all the nodes in the current frontier. The
found mincuts are then encoded on a BDD, where each level is
associated with an edge of the graph according to a predeﬁned
order. Each BDD path corresponds to a mincut where only the
variables/edges included in the mincut are false
For instance, this algorithm applied on the directed bridge
network in Fig. 1 returns the mincut BDD in Fig. 3 with edge
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:09 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 2 MinCut search
1: procedure MINCUTSEARCH(BDDC , L, W, c, t)
BDDC = BDD encoding the mincuts
W = set of edges in the current mincut
L = set of nodes in the frontier
c = current node
t = target node
2:
3:
4:
5:
6:
7:
W’=W +c.Edge()-c.EdgeConnecting(L);
BDDC .InsertMinCut(W’);
L’=L + c.FindChildrenNotTarget();
for (i ∈ L’) do
L”=L’-{i}
MinCutSearch(BDDC,L”,W’,i);
end for
8:
9: end procedure
loops introducing a further list storing all the nodes already
visited.
C. Connectivity (disconnectivity) function encoding
Before describing how to derive the BDD encoding the con-
nectivity (disconnectivity) function from the minpath (mincut)
BDD we introduce the following two functions, called Fcom
and Frem, as follows:
Deﬁnition 1: Let Q be a generic set of sets in 2E, then
Fcom(Q) returns the smallest set Q′ that satisﬁes:
• ∀q ∈ Q ⇒ q ∈ Q′
• ∀q ∈ Q, q′ ∈ 2E : q ⊂ q′ ⇒ q′ ∈ Q′
Deﬁnition 2: Let C be a generic set of sets in 2E, then
Frem(C) returns the smallest set C ′ that satisﬁes:
• ∀c ∈ C ⇒ c ∈ C ′
• ∀c ∈ C, c′ ∈ 2E : c′ ⊂ c ⇒ c′ ∈ C ′
It is easy to prove that if Q encodes the whole set of the
minpaths of a network then the function Fcom applied on it
returns a new set encoding the connectivity function; in the
same way if C encodes the whole set of the mincuts of a
network then the function Frem applied on it returns a new
set encoding the disconnectivity function.
These two functions can be easily implemented with an
explicit algorithm that iteratively discovers and inserts all the
correct supersets/subsets; however a symbolic implementation
of such algorithm based on BDD can be much more efﬁcient
in terms of memory and execution time: only in the worst case
it will require to add all the connectivity or disconnectivity
states one by one.
these functions can be implemented on the
Intuitively,
minpath (mincut) BDD, visiting recursively all their nodes
and when the true (false) edge of a node points to the terminal
node 0 redirecting it to the same child node pointed by its
false (true) edge.
This operation must always assure that no duplicate nodes are
inserted in the BDD, so that when a node becomes a duplicate
of another node in the same level then it is discarded and its
Fig. 3. Mincuts BDD of the directed bridge network.
order e2 ≺ e5 ≺ e3 ≺ e1 ≺ e4. The BDD encodes the mincuts
he1, e2i, he4, e5i, he2, e4i and he1, e3, e5i corresponding to the
following BDD paths h0, 1, 1, 0, 1i, h1, 0, 1, 1, 0i, h0, 1, 1, 1, 0i
and h1, 0, 0, 0, 1i using already explained for the minpaths.
The pseudo-code of the mincut search is shown in Algo-
rithm 2, where the sets W and L, initially empty, are used to
maintain the current mincut and the nodes in the frontier, while
the pointer c, initially pointing to the source node, identiﬁes
the current node.
First the algorithm initializes the set W ′ as a copy of W
where all the edges connected to c are inserted (operator
+ and Edge() method) and then all the edges connecting
it with a node in L are removed (operator − and Edge-
Connecting() method). Method EdgeConnecting() returns all
the edges connecting directly c with a node in the current
frontier L. BDDC , the BDD encoding the mincuts, is updated
(InsertMinCut() method) as follows: if the mincut in W ′ or
any subset of it is not already in BDDC then it is inserted
and all its supersets are removed by BDDC.
After that L′ is created as a copy of L where all the children
of c except the target node are inserted (FindChildrenNotTar-
get() method), and this procedure is recursively called on all
the nodes in L′′ = L′ − {i}.
A cache can be used to improve the algorithm efﬁciency
avoiding to re-compute the same mincuts, it can be imple-
mented as a hash table using the node identiﬁer and its W list
as key.
This code, as the minpath one, can be extended to avoid
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:09 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 3 Symbolic implementation of Fcom
Algorithm 4 Symbolic implementation of Frem
1: function Fcom(B)
1: function Frem(B)
B = BDD encoding minpath function
B = BDD encoding mincut function
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
if (B==True)||(B==False)
then
return B
else
R=Cache.search(B);
if (R!=NULL) then
return R;
else
B1=B.PtrTrue();
B0=B.PtrFalse();
E=Fcom(B0)
K=Fcom(B1)
T=Add(K,E)
if (T==E) then return T
R=createBDD(T,E)
Cache.insert(B,R);
return R
end if
end if
19:
20: end function
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
if (B==True)||(B==False)
then
return B
else
R=Cache.search(B);
if (R!=NULL) then
return R;
else
B1=B.PtrTrue();
B0=B.PtrFalse();
T=Frem(B1)
K=Frem(B0)
E=Add(K,T)
if (T==E) then return T
R=createBDD(T,E)
Cache.insert(B,R);
return R
end if
end if
19:
20: end function
input edges redirected to other node.
The pseudocodes of these two methods are shown in Al-
gorithms 3 and 4; where methods PtrTrue() and PtrFalse()
return the nodes pointed by the true and false edges of the
root node; and method createBDD() with input parameter T, E
creates a new node with the true edge pointing to T and the
false one to E. Observe that these algorithms are dual to the
approach proposed by Rauzy in [19] to derive from a boolean
function, encoded on BDD, a new BDD encoding only its
minimal solutions.
In detail, the Algorithm 3 (4) starting from the BDDQ
(BDDC ) root recursively visits the subtrees pointed by the
true and false edges of the current node (called in the rest of
this paper 1-subtree and 0-subtree).
Then the function Add, shown in Algorithm 5 (where RLevel()
returns the level of the BDD root) is applied on the updated
subtrees, for Fcom all the paths in the 0-subtree are recursively
added in the 1-subtree, while viceversa for Frem.
Observe that Algorithm 5 is an instantiation of well-known
“Apply” algorithm proposed by Bryant[7].
Finally, in line 15 we avoid to insert redundant nodes in the
BDD, indeed if the new node is redundant (T==E) then this
node is skipped and its parent is redirected to its unique child.
D. Reliability (unreliability) algorithm
To compute the network reliability (unreliability) ﬁrst we
have to assign to each variable xi a probability pi to be up
(1 − pi to be down), so that we can compute the probability
P r{F } of the function F by applying recursively Eq. 8.
P r{F } = piP r{F1−subtree} + (1 − pi)P r{F0−subtree} =
P r{F0−subtree} + pi(P r{F1−subtree} − P r{F0−subtree})
(8)
In Algorithm. 6 a sketch version of such algorithm is shown.
It takes in input the BDD B encoding the connectivity
(disconnectivity) function and the vector P storing the edges
probabilities and returns the corresponding reliability (unreli-
ability) value. It starts from the B root node and recursively
calls itself on the two branches until the terminal nodes are
reached. Indeed, the probability of a node x depends on the
probability of the 0-subtree multiplied by the probability of x
being down plus the probability of the 1-subtree multiplied by
the probability of x being up.
E. Comparison with previous approach
In [22] Trivedi at al. propose an algorithm that generates
directly the connectivity function BDD, via a recursive visit on
the graph, without explicitly deriving the Boolean expression.
The algorithm starts from the source node s and visits the
graph (according to a given but arbitrary visiting strategy)
until the sink node t is reached. The BDD construction starts
once the sink node t is reached. The BDDs of the nodes
along a path from s to t are combined in AND, while if a
node has more than one outgoing edge the BDDs of the paths
starting from each edge are combined in OR. To derive the
minpaths (mincuts) the list of paths (cuts) obtained from the
BDD must be minimized. An alternative approach, proposed
in [19], consists in transforming the original BDD into a new
graph embedding all and only the minpaths (mincuts). Details
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:09 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 5 Add algorithm
1: function ADD(F ,G)
F, G = BDDs
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
if ((F==G) || (F==True) || (G==False)) then
return F
else
if ((G==True) || (F==False)) then
return G
else
R=Cache.search(F,G);
if (R!=NULL) then
return R;
else
if (F.RLevel()>G.RLevel()) then
T=Add(F,G.PtrTrue());
E=Add(F,G.PtrFalse());
else
if (F.RLevel()==G.RLevel()) then
T=Add(F.PtrTrue(),G.PtrTrue());
E=Add(F.PtrFalse(),G.PtrFalse());
else
T=Add(F.PtrTrue(),G);
E=Add(F.PtrFalse(),G);
end if
if (T==E) then return T
R=createBDD(T,E)
CACHE.insert(F,G,R)
return R
end if
end if
end if
end if
30:
31: end function
of the transformation algorithm are in [19].
With respect to this previous work our approach does not
require to store the connectivity function in order to derive the
minpaths or the mincuts of the net. Instead the connectivity
function can be derived from the minpaths BDD leading to
a lower memory peak during the computation. From these
BDDs, encoding the minpaths (or the mincuts), the network
reliability can be computed using a symbolic approach. Even
if this choice requires to store the whole connectivity function,
thanks to our strategy it is still possible to achieve a reduction
in terms of memory peak as reported by the experiments
(Sec. VI).
V. THE PROPOSED APPROACH:APPROXIMATE METHOD
The exact approach, described above, can be easily extended
to compute an approximate solution, when the network com-
plexity makes it practically impossible to compute the exact
one.
Algorithm 6 Reliability algorithm
1: procedure PROBBDD(B, P )
B = BDD encoding the connectivity function
P = vector storing the edges probabilities
2:
3:
4:
5:
6:
if
(B == True)
return 1;
then
else
if B == False then
return 0;
else
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end procedure
end if
end if
end if
cache[B]=PF;
return PF;
PF=Cache.search(B);// return -1 if B is not in cache.
if (PF!=-1) then
return PF;
else
PF1=ProbBDD(B.PtrTrue(),P);
PF2=ProbBDD(B.PtrFalse(),P);
PF=PF2 + P[Root(B)] * (PF1 - PF2);
proximate value of the network reliability can be generated
considering only a subset of all the minpaths and mincuts. In
this way, as already explained in section II, the reliability value
derived by the subset of minpaths is a lower bound of the exact
reliability value, while the one derived by the subset of mincuts
is an upper bound; so that the gap between these two values
provides an estimation for the accuracy of the approximation.
Practically,
this requires to update the MinPath search
and MinCut search algorithms allowing the user to specify
constraints on their execution times, so that only the minpaths
and the mincuts generated under these constraints are inserted
in the minpath and mincut BDDs.
Moreover, for the minpaths, we allow the user to specify
another constraint on the minpath probability (expressed as
product of the probabilities to be up of all edges involved in
the minpath): only the minpaths with such probability greater
than this threshold are inserted in the minpath BDD. This is a
good heuristics to assure that the more meaningful minpaths
will be involved in the approximation.
Observe that, when all the edges have the same probability to
be up this corresponds to impose a limitation on the minpath
length (we shall call minpath length constraint). Under this
assumption it is possible to deﬁne a more efﬁcient minpath
search algorithm that step by step increases the length of
the minpaths to be searched until this becomes equal to the
minpath length constraint or the time constraint is reached.
In this way this algorithm is able to ﬁnd the most relevant
minpaths thus improving the reliability lower bound.
Observe that all the experiments presented in section VI use
this algorithm to compute the minpaths.
The general
idea behind this extension is that an ap-
For the mincuts, the user can also specify a further constraint
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:09 UTC from IEEE Xplore.  Restrictions apply. 
are located on a regular square grid of N ×N nodes and where
each node is connected with two neighbors (the up-right one
and down-left one) in case of directed network, or with all the
four neighbors (right, left, up and down ones) if the network
is undirected.
Fig.5 shows an example of directed network.
2) Small world network: A small world network is a
network where most nodes are not connected directly, but
where it is possible to connect any two nodes in the network
through few edges.
The average shortest distance between any two nodes increases
logarithmically with the number of nodes (n).
L ∼ log(n)
3) Random Network: Paul Erd˝os and Alfr´ed R´enyi were
the ﬁrst to deﬁne a Random Graph (RG)[10] as N labeled