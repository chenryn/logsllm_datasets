[root@server ~]# date; netstat -s | egrep "listen|LISTEN" 
Fri May  5 15:39:58 CST 2017
1641685 times the listen queue of a socket overflowed
1641685 SYNs to LISTEN sockets ignored
[root@server ~]# date; netstat -s | egrep "listen|LISTEN" 
Fri May  5 15:39:59 CST 2017
1641906 times the listen queue of a socket overflowed
1641906 SYNs to LISTEN sockets ignored
```
如上所示：
overflowed和ignored居然总是一样多，并且都是同步增加，overflowed表示全连接队列溢出次数，socket ignored表示半连接队列溢出次数，没这么巧吧。
翻看内核源代码（http://elixir.free-electrons.com/linux/v3.18/source/net/ipv4/tcp_ipv4.c）：
![image.png](https://cdn.jsdelivr.net/gh/shareImage/image@_md2zhihu_programmer_case_81efef37/就是要你懂TCP--半连接队列和全连接队列/a5616904df3a5055-a5616904df3a505572d99d557b534db2.png)
可以看到overflow的时候一定会drop++（socket ignored），也就是drop一定大于等于overflow。
同时我也查看了另外几台server的这两个值来证明drop一定大于等于overflow：
```
server1
150 SYNs to LISTEN sockets dropped
server2
193 SYNs to LISTEN sockets dropped
server3
16329 times the listen queue of a socket overflowed
16422 SYNs to LISTEN sockets dropped
server4
20 times the listen queue of a socket overflowed
51 SYNs to LISTEN sockets dropped
server5
984932 times the listen queue of a socket overflowed
988003 SYNs to LISTEN sockets dropped
```
## 那么全连接队列满了会影响半连接队列吗？
来看三次握手第一步的源代码（http://elixir.free-electrons.com/linux/v2.6.33/source/net/ipv4/tcp_ipv4.c#L1249）：
![image.png](https://cdn.jsdelivr.net/gh/shareImage/image@_md2zhihu_programmer_case_81efef37/就是要你懂TCP--半连接队列和全连接队列/0c6bbb5d4a10f40c-0c6bbb5d4a10f40c8b3c4ba6cab82292.png)
TCP三次握手第一步的时候如果全连接队列满了会影响第一步drop 半连接的发生。大概流程的如下：
```
tcp_v4_do_rcv->tcp_rcv_state_process->tcp_v4_conn_request
//如果accept backlog队列已满，且未超时的request socket的数量大于1，则丢弃当前请求  
  if(sk_acceptq_is_full(sk) && inet_csk_reqsk_queue_yong(sk)>1)
      goto drop;
```
## 半连接队列的长度
**半连接队列的长度由三个参数指定：**
-   **调用** **listen** **时，传入的 backlog**
-   **/proc/sys/net/core/somaxconn** **默认值为 128**
-   */proc/sys/net/ipv4/tcp_max_syn_backlog** **默认值为 1024**
假设 listen 传入的 backlog = 128，其他配置采用默认值，来计算下半连接队列的最大长度
```
backlog = min(somaxconn, backlog) = min(128, 128) = 128
nr_table_entries = backlog = 128
nr_table_entries = min(backlog, sysctl_max_syn_backlog) = min(128, 1024) = 128
nr_table_entries = max(nr_table_entries, 8) = max(128, 8) = 128
nr_table_entries = roundup_pow_of_two(nr_table_entries + 1) = 256
max_qlen_log = max(3, log2(nr_table_entries)) = max(3, 8) = 8
max_queue_length = 2^max_qlen_log = 2^8 = 256
```
可以得到半队列大小是 256，以上计算方法：
```
backlog = min(somaxconn, backlog)
nr_table_entries = backlog
nr_table_entries = min(backlog, sysctl_max_syn_backlog)
nr_table_entries = max(nr_table_entries, 8)
// roundup_pow_of_two: 将参数向上取整到最小的 2^n，注意这里存在一个 +1
nr_table_entries = roundup_pow_of_two(nr_table_entries + 1)
max_qlen_log = max(3, log2(nr_table_entries))
max_queue_length = 2^max_qlen_log
```
![](https://cdn.jsdelivr.net/gh/shareImage/image@_md2zhihu_programmer_case_81efef37/就是要你懂TCP--半连接队列和全连接队列/2452b0e753f83672-5f63b8e0-952c-47a2-8179-48793034f86b.png)
没开启tcp_syncookies的话，到tcp_max_syn_backlog 75%水位就开始drop syn包了
## 总结
Linux内核就引入半连接队列（用于存放收到SYN，但还没收到ACK的连接）和全连接队列（用于存放已经完成3次握手，但是**应用层代码还没有完成 accept() 的连接**）两个概念，用于存放在握手中的连接。
全连接队列、半连接队列溢出这种问题很容易被忽视，但是又很关键，特别是对于一些短连接应用（比如Nginx、PHP，当然他们也是支持长连接的）更容易爆发。 一旦溢出，从cpu、线程状态看起来都比较正常，但是压力上不去，在client看来rt也比较高（rt=网络+排队+真正服务时间），但是从server日志记录的真正服务时间来看rt又很短。
另外就是jdk、netty等一些框架默认backlog比较小，可能有些情况下导致性能上不去，都是类似原因
希望通过本文能够帮大家理解TCP连接过程中的半连接队列和全连接队列的概念、原理和作用，更关键的是有哪些指标可以明确看到这些问题。
另外每个具体问题都是最好学习的机会，光看书理解肯定是不够深刻的，请珍惜每个具体问题，碰到后能够把来龙去脉弄清楚。
---
## 参考文章
http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html
http://www.cnblogs.com/zengkefu/p/5606696.html
http://www.cnxct.com/something-about-phpfpm-s-backlog/
[http://jaseywang.me/2014/07/20/tcp-queue-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/](http://jaseywang.me/2014/07/20/tcp-queue-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/)
http://jin-yang.github.io/blog/network-synack-queue.html#
http://blog.chinaunix.net/uid-20662820-id-4154399.html
https://www.atatech.org/articles/12919
https://blog.cloudflare.com/syn-packet-handling-in-the-wild/
[How Linux allows TCP introspection The inner workings of bind and listen on Linux.](https://ops.tips/blog/how-linux-tcp-introspection/)
https://www.cnblogs.com/xiaolincoding/p/12995358.html
[从一次线上问题说起，详解 TCP 半连接队列、全连接队列--详细的实验验证各种溢出](https://developer.aliyun.com/article/804896)
[案例三：诡异的幽灵连接，全连接队列满后4.10内核不再回复syn+ack, 但是3.10会回syn+ack](https://mp.weixin.qq.com/s/YWzuKBK3TMclejeN2ziAvQ)
```c
commit 5ea8ea2cb7f1d0db15762c9b0bb9e7330425a071
Author: Eric Dumazet 
Date:   Thu Oct 27 00:27:57 2016
 tcp/dccp: drop SYN packets if accept queue is full
 Per listen(fd, backlog) rules, there is really no point accepting a SYN,
 sending a SYNACK, and dropping the following ACK packet if accept queue
 is full, because application is not draining accept queue fast enough.
 This behavior is fooling TCP clients that believe they established a
 flow, while there is nothing at server side. They might then send about
 10 MSS (if using IW10) that will be dropped anyway while server is under
 stress.
   -       /* Accept backlog is full. If we have already queued enough
   -        * of warm entries in syn queue, drop request. It is better than
   -        * clogging syn queue with openreqs with exponentially increasing
   -        * timeout.
   -        */
   -       if (sk_acceptq_is_full(sk) && inet_csk_reqsk_queue_young(sk) > 1) {
   +       if (sk_acceptq_is_full(sk)) {
                   NET_INC_STATS(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS);
                   goto drop;
           }
```
Reference: