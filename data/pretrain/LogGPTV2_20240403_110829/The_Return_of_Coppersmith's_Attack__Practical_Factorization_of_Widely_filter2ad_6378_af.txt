services, including VAT forms, private companies management (all
types) and voting (esteid). In total, we analyzed the keys of approx-
imately 10% of randomly selected citizens. (cid:140)e results showed a
mix of on-card and out-of-card key generation. More than half of
the analyzed keys were vulnerable for esteid and all keys were vul-
nerable for esteid-digi and esteid-resident. No vulnerable keys were
detected for esteid-mobiil. Extrapolation to the whole population
results in at least hundreds of thousands of vulnerable keys.
Additionally, we analyzed keys from a limited sample of keys
extracted from the physical electronic documents of three other
countries and detected one (Slovakia) issuing documents with (cid:128)n-
gerprinted 2048-bit keys.
(cid:140)ese results also demonstrate the general di(cid:129)culty of analyzing
the impacted domains – large-scale analysis was possible only for
the Estonian eID because of the public directory with more than
half of the documents found to be vulnerable. (cid:140)e small samples
collected for other countries (like Slovakia) give only very limited
insight – are all other documents vulnerable or only a limited
production series given the two vulnerable IDs detected? Or were
only documents from non-vulnerable series for other countries
inspected?
(cid:140)e possibility of factorizing on-card keys would lead to cloning
of legitimate passports or identity cards. (cid:140)e Slovak national ID in
question is also deployed in the wider context of an eGovernment
system, where the on-chip generated digital signatures serve as a
replacement for traditional hand-wri(cid:138)en signatures.
4.3 Code signing
(cid:140)e digital signing of applications, modules, OS distributions or
code is now common. In some cases, application signing is manda-
tory and enforced by the platform (e.g., Android, iOS, OS drivers)
or voluntarily adopted by the developers. GPG signatures can be
also used to authenticate commits or tags submi(cid:138)ed by developers
to a source control system (e.g., GitHub).
4.3.1 GitHub. To access the Git repositories hosted on GitHub,
developers can use SSH authentication as an alternative to a pass-
word for both read and write permissions. Users may also upload
GPG keys for commit signing. (cid:140)e public keys of all users are
accessible via the public GitHub API. We analyzed the pro(cid:128)les of
almost 25 million GitHub users and found 4.7 M SSH keys in a scan
performed in February 2017.
Hundreds of (cid:128)ngerprinted keys were found, including keys with
access to very popular repositories with up to 2,000 stars (users
bookmarking the project) for user-owned repositories and more
than 50,000 stars for organization-owned repositories, including
repositories that are very in(cid:131)uential in the Internet community.
(cid:140)e impact is increased by the fact that some relevant repositories
are libraries used in other projects and are essentially trusted by
third-party developers.
In total, we found 447 (cid:128)ngerprinted keys. More than half (237)
have practically factorizable key length of 2048 bits, with the rest
mostly being 4096-bit RSA keys. However, it is not straightforward
to determine whether a particular account has write access to repos-
itories not explicitly owned by the account. Similarly, membership
in an organization does not guarantee write access to particular
repositories. GitHub does not provide this kind of information
directly, and the APIs that can be used to derive this information
are quite limited. (cid:140)e information can be inferred from an analysis
of previously performed commits by the given user. We veri(cid:128)ed
several instances manually and con(cid:128)rmed access with factorizable
keys.
We view the overall impact as signi(cid:128)cant. Luckily, any potential
changes made to a repository can be traced back to a particular
commit due to the nature of source control systems. Many projects
also use commit reviews (e.g., using pull requests), where increased
caution should be used until the a(cid:130)ected users move to more secure
keys.
4.3.2 Maven. (cid:140)e Maven public repository has required devel-
opers to sign uploaded artifacts since approximately 2009 [54]. Each
developer must be associated with a PGP key that is also publicly
reachable from a PGP keyserver. Each artifact is uniquely identi(cid:128)ed
by a tuple (group ID, artifact ID, version). We downloaded the most
recent versions of each artifact found in the Maven repository index
in April 2017. In total, we downloaded 180,730 artifacts equipped
with the Maven index (cid:128)le (pom.xml) – 161,841 had a signature on
the pom.xml (cid:128)le. (cid:140)ere were 16,959 unique PGP keys found, of
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1641which 5 were (cid:128)ngerprinted, all with 4096-bit moduli (not considered
practically factorizable by our method). (cid:140)e potentially a(cid:130)ected
artifacts appear as dependencies only in a few other artifacts. We
therefore estimate the impact as small.
4.3.3 Android. We downloaded the 540 most popular Android
applications and the 540 top ranking Android games according to
the Google Play top charts. (cid:140)e content of the Android applica-
tion package (APK) is signed with the developer key before being
published to the Google Play system. (cid:140)ere is no simple way for
the developers to change the signing keys; hence, the applications
will most likely have used the same keys since the time of the (cid:128)rst
upload. No (cid:128)ngerprinted keys were detected among the top 540
applications and games in a scan performed in January 2017. (cid:140)e
analysis should be also extended to less popular applications. If
any vulnerable keys are found in other already established applica-
tions, the a(cid:130)ected developers may have complications migrating to
di(cid:130)erent signing keys.
4.4 Trusted Platform Modules
Trusted Platform Module (TPM) is a speci(cid:128)cation created by the
Trusted Computing Group [34, 35]. TPMs are cryptographic hard-
ware (usually in form of a chip a(cid:138)ached to a motherboard) that
provide basic cryptographic functionality. (cid:140)e typical use cases
include: a) secure storage of a user’s private keys or disk decryption
keys; b) maintaining an unspoofable log of applications that were
deployed on a target machine via a hash chain (Platform Con(cid:128)gura-
tion Registers – PCRs); and c) a(cid:138)estation of the state of the platform
to a remote entity by an on-TPM signature of the PCRs. (cid:140)e TPM
speci(cid:128)cation version 1.2 supports only RSA with 2048-bit keys [34].
We analyzed a sample of 41 di(cid:130)erent laptop models equipped
with TPM chips. Six di(cid:130)erent manufacturers were detected, with
chips supplied by Manufacturer (acronym IFX) being the most com-
mon and found in 10 devices. TPM chips from devices produced
before 2013 and with (cid:128)rmware versions5 between 1.02 and 3.19 do
not exhibit a (cid:128)ngerprint and are not factorizable by our method.
All chips found in devices introduced in 2013 or later were vul-
nerable, including both TPM 1.2 and TPM 2.0. In our sample, the
(cid:128)ngerprinted keys from the RSALib appear earliest in the (cid:128)rmware
version 4.32 (however, we had no TPM chip with a version between
3.19 and 4.32 in our sample). All subsequent chip versions, includ-
ing 5.x and 6.x, were also found to produce vulnerable keys. We
hypothesize that the RSALib was (cid:128)rst used with TPM (cid:128)rmware
version 4.x.
(cid:140)ere are two important RSA private keys stored inside a TPM –
the Endorsement key (EK), which is permanently embedded by the
chip manufacturer during its production and cannot be changed,
and the long-term Storage Root Key (SRK), which is generated on-
chip when a user claims the TPM ownership. Additionally, dedi-
cated A(cid:136)estation Identity Keys (AIKs) used for Remote A(cid:138)estation
may be generated.
(cid:140)e factorization of the EK compromises the root of trust for chip
authentication. An a(cid:138)acker can generate a new keypair outside
the TPM and then sign it with the factorized EK; hence, it will be
trusted by the remote system (e.g., the company network).
5(cid:140)e version of the (cid:128)rmware of the TPM chip does not directly relate to the version of
the RSALib.
(cid:140)e TPM can hold only a very limited number of private keys
directly on the chip. All other private keys are generated inside the
TPM but are then wrapped by the SRK and exported outside the
TPM. If required, the keys are imported back, unwrapped and used.
(cid:140)e factorization of the SRK therefore allows an a(cid:138)acker to decrypt
all previously exported wrapped private keys, including the “sealed
storage” packages with sensitive information otherwise readable
only on the particular machine with the associated AIK keys used
for Remote A(cid:138)estation. If AIK is directly factorized or its value
is compromised due to the factorization of the SRK, an a(cid:138)acker is
able to forge an a(cid:138)estation report – allowing the a(cid:138)acker to start
additional or modi(cid:128)ed malicious so(cid:137)ware without being noticed.
(cid:140)e “sealed storage” is also utilized by Microso(cid:137) BitLocker full
disk encryption so(cid:137)ware [58] to store a sensitive value required
to obtain the Volume Master Key [48, 49]. BitLocker is typically
setup together with TPM and an additional secret – either a PIN, a
recovery key on a USB token, or both. (cid:140)e possibility to factorize
TPM’s 2048-bit SRK directly leads to a decryption of an unwrapping
key necessary to decrypt the Volume Master Key, thus bypassing
the need for TPM to validate the correctness of a PIN value via a
dedicated PCR. As a result, an a(cid:138)acker can decrypt a disk from a
stolen laptop with a vulnerable TPM if encrypted by BitLocker in
TPM+PIN mode (but not in a con(cid:128)guration with an additional USB
token). We did not verify the a(cid:138)ack in practice due to BitLocker’s
proprietary storage format and the cost of factorization of a 2048-bit
SRK key.
4.5 PGP with cryptographic tokens
(cid:140)e private key as used in Pre(cid:138)y Good Privacy (PGP) [29] is typi-
cally a very sensitive long-term secret. If compromised, an a(cid:138)acker
can forge new signatures and decrypt all previously captured mes-
sages since PGP does not provide forward secrecy. Many users
choose to use a cryptographic device that stores and performs pri-
vate key operations inside a secure environment using an OpenPGP
compliant application [62].
A large fraction of public keys used for PGP can be easily down-
loaded from PGP keyservers [4]. Since the content of PGP key
servers is publicly available, the vulnerable keys can be easily iden-
ti(cid:128)ed together with the associated user contact information. We
analyzed the state of a PGP keyserver from mid-April 2017 that
contained a total of 4.6 M master keys and 4.4 M sub-keys with
1.9 M and 1.7 M, respectively, being RSA keys. We detected 2,892
(cid:128)ngerprinted keys. Of these, two keys are 1024-bit and 954 keys are
2048-bit – both lengths are practically factorizable. Additionally, 86
and 1846 (cid:128)ngerprinted (but not feasibly factorizable by our method)
keys of 3072 and 4096-bit lengths, respectively, were detected. Fi-
nally, four keys with uncommon lengths of 3008 and 3104-bit were
present.
(cid:140)e earliest creation date of a (cid:128)ngerprinted key as obtained
from a PGP certi(cid:128)cate is 2006, yet only for a single user – we
hypothesize this (cid:128)nding was caused by an incorrect system clock.
(cid:140)e subsequent observed year is 2009, again with a single user only.
2013 is the earliest year with keys from multiple users.
No key is observed originating in the year 2014, with more (cid:128)nger-
printed keys observed from July 2015 onwards. (cid:140)e date coincides
with the o(cid:129)cial launch of a cryptographic token Yubikey 4 (further
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA16422048
1024/2048
Used length (bits) Pub. key availability Misuse
Domain name
TLS/HTTPS
Message security (PGP)
Trusted boot (TPM)
Electronic IDs (eID, ePassport)
Payment cards (EMV)*
Certi(cid:128)cation authorities (root, intermediate)*
Authentication tokens (U2F)
So(cid:137)ware signing
Programmable smartcard (Java Card)
Table 3: (cid:135)e summary of the impact of key factorization in the di(cid:130)erent usage domains. (cid:135)e (cid:128)ngerprinted keys were found
within all listed domains with exceptions marked with an asterisk (*). No (cid:128)ngerprinted keys were found in the very limited
dataset of 13 EMV cards that we collected or for large datasets of browser-trusted root and intermediate CAs.
MitM/eavesdropping
message eavesdropping, forgery
unseal data, forged a(cid:138)estation
clone passport, e-gov document forgery
clone card, fraudulent transaction
forged certi(cid:128)cates, MitM
unauthorized access or operation
malicious application update
depends on use
easy
easy
limited
limited
limited
easy
limited
easy
2048 or higher
2048 or higher
2048 or bigger
768/960/1024/1182
depends on use
1024-4096
2048
2048
0 keys
0 keys
Analyzed datasets
# Vuln. keys/devices % Vulnerable
all browser-trusted roots (173), level (cid:54) 3 intermediates (1,869)
ICAO Document Signing Certi(cid:128)cates, CSCA Master Lists
sample of 130,152 randomly selected citizens