# Optimized Text

## Figure 12: Effect of Varying the Client's Maximum Waiting Time Φ
- **Parameters**: ν = 500, π = 25
- **Data Points**:
  - f = 0.2, l = 15 (n = 10000)
  - f = 0.15, l = 15 (n = 10000)
  - f = 0.1, l = 15 (n = 10000)
  - f = 0.2, l = 14 (n = 5000)
  - f = 0.15, l = 14 (n = 5000)
  - f = 0.1, l = 14 (n = 5000)
- **Phi (seconds)**: 500, 1000, 1500, 2000, 2500, 3000, 3500

## Random Walk and Buddy Selection
Upon encountering an invalid certificate, it is not necessary to terminate the random walk. Instead, the walk can step back one hop and select another random finger as the next hop. If all fingers at a particular hop are malicious, the walk can step back further and explore other branches. This approach makes it infeasible for an attacker to interrupt the random walk, allowing honest nodes to find buddies as expected.

However, even with this mechanism, the querier under a buddy exhaustion attack may still require substantial time to find enough buddies to proceed with flooding lookup requests. For instance, when ν = 1200, l = 15, and π = 25, it will take approximately 5 minutes (2lϕν/π) for the victim node to find sufficient buddies. It is unlikely that a client would wait this long before initiating communication.

To expedite the buddy selection process, cryptographic mechanisms such as Merkle trees can be employed. By forming certificates into Merkle trees, the computational latency at each hop can be reduced. However, the effectiveness of this strategy depends on the attacker's capability to send flood requests. Additionally, using Merkle trees increases maintenance costs, as they need to be reconstructed whenever a node joins or leaves the network, or when a signature expires.

## Network Performance and System Overload
Each bogus lookup request generated during the buddy selection process can create significant traffic, leading to substantial degradation in network performance and potential system overload.

## Figure 13: Simulation Results: Fraction of Compromised Circuits in Reliable Circuits
- **Parameters**: ν = 500, Φ = 5min, π = 225
- **Data Points**:
  - n = 1000 (l = 13)
  - n = 2000 (l = 13)
  - n = 5000 (l = 14)
- **Fraction of Malicious Nodes (f)**: 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2

## Related Work
P2P anonymous communication systems have been extensively researched [17, 24, 9, 29, 19, 25, 16]. AP3 and Salsa were among the first to use DHT lookups for anonymous communication, but their protocols are vulnerable to information leak attacks [18]. NISAN and Torsk, which also use DHT lookups, are designed to mitigate these attacks. We have proposed various passive and active attacks on NISAN and Torsk, significantly reducing user anonymity.

Another approach to building circuits for anonymous communication involves connecting relays into a restricted topology [9, 29, 19]. For example, Tarzan [9] uses a small set of mimics, and all circuits must be created on links between mimics. To verify path construction, Tarzan maintains a global view of the system, limiting its scalability to about 10,000 nodes. MorphMix [29] addresses this by creating a randomized, unstructured overlay, but its collusion detection mechanism can be circumvented by colluding adversaries [32].

In [25], the authors of NISAN considered a random walk construction to complement their DHT-lookup-based design, but it is vulnerable to active attacks. ShadowWalker [19] proposes redundant structured topologies to enable verification while mitigating information leaks.

Danezis and Clayton [5] studied attacks on peer discovery and route setup in P2P networks, showing that if an attacker learns the subset of nodes known to the initiator, routes can be fingerprinted. Danezis and Syverson [7] extended this to show that attackers can also separate traffic going through a relay node.

Reiter and Rubin [28] introduced the predecessor attack, later extended by Wright et al. [34, 35, 36]. In this attack, an attacker tracks an identifiable stream of communication and logs the preceding node on the path to identify the initiator. Similar research includes intersection attacks by Berthold et al. [2] and Raymond [27], and statistical attacks by Danezis [4] and Mathewson and Dingledine [14].

Our paper emphasizes the importance of considering system properties that affect anonymity. Recent research has focused on details often abstracted away by conventional models, such as congestion, clock skew, heterogeneous path latency, and reliability [22, 1, 21, 11, 1, 23, 3].

## Conclusion
We analyzed mechanisms that hide the relationship between a user and selected relays in NISAN and Torsk. Our passive attacks on NISAN and active attacks on Torsk's secret buddy mechanism show that these systems are vulnerable, motivating the search for a secure and anonymous DHT lookup.

## Acknowledgments
We thank Andriy Panchenko and Nicholas Hopper for helpful discussions, Andriy Panchenko for sharing NISAN simulation code, and George Danezis for motivating this work. We also thank the anonymous reviewers for their feedback. This research was supported in part by NSF grants: CNS-0627671 and CNS-0524695.

## References
[References section remains unchanged]

---

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.