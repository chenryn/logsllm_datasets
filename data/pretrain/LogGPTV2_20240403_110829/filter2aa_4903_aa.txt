.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.\" This tutorial sampler invokes every macro in the package several
.\" times and is guaranteed to give a worst case performance
.\" for an already extremely slow package.
.\"
.Dd December 30, 1993
.Os
.Dt MDOC.SAMPLES 7
.Sh NAME (名字)
.Nm mdoc.samples
.Nd 用
.Nm \-mdoc
编写
.Bx
手册 的 示范教程
.Sh SYNOPSIS (总览)
.Nm man mdoc.samples
.Sh DESCRIPTION (描述)
这个 示范教程 用于 编写
.Bx
手册页 (manual page), 它 使用了
.Nm \-mdoc
宏定义包, 这是个
.Em 基于内容
和
.Em 基于宏域 (domain Ns \-base)
的 格式化包, 交由
.Xr troff 1 
处理. 它的 前身
.Xr \-man 7
包, 定义了 页面布局 (page layout), 但是 把 诸如 字体控制 和 其他 排版 细节 
留给了 每一个 作者. 在
.Nm \-mdoc 
包里, 页面布局宏 构成了
.Em "页结构宏域 (page structure domain)"
它 由 标题, 小节首部, 显示 (displays) 和 列表 宏 组成. 这些 基本项目 影响
正文 在 格式化页上 的 物理位置.
作为 页结构宏域 的 补充, 这里 还 定义了 另外 两个 宏域, 手册宏域 和
基本正文宏域. 基本正文宏域 定义了 一些 宏, 执行 例如 引文 或 文字强调 
之类的任务.
手册宏域 定义的宏 是 非正式 日常用语 的 子集, 用于 描述 命令, 例程
和 相关的
.Bx
文件.
手册宏域里 的 宏 用来处理 命令名, 命令行参数和选项, 函数名称, 函数参数,
路径, 变量, 以及 到 其他手册页 的 参照 等.
这些 域项 留有 为 作者 和 手册页的 未来用户 设置的 值.
希望 从 手册集中 获得的 一致性 能够为 将来的 文档工具 提供 更简单的 转换.
.Pp
从 整个的
.Ux
手册页 上 来看, 每个 手册项
可以 简单的 理解为 一个 man page, 不用 注意 它的 实际长度, 
也没有 性别歧视 意图. (译注: 可能是双关语, man page...男人页)
.Sh 开始 GETTING STARTED
因为 人们 通常是 为了 能够 马上 使用 这些材料 的 时候 才 阅读 教程，所以 
我们 假设 此文档的 用户 是 缺乏耐心的．下面 简述一下 这份文档 剩余部分 
的 组织:
.Bl -enum -offset indent
.It
.Tn "TROFF 特性"
.Bl -tag -width flag -compact -offset indent
.It "使用宏" .
.It "参数中传递空白符" .
.It "尾部的空白符" .
.It "转义特殊字符" .
.El
.It
.Tn "手册页的结构分析"
.Bl -tag -width flag -compact -offset indent
.It "手册页的模板" .
.El
.It
.Tn "标题宏" .
.It
.Tn "手册宏域和基本正文宏域的介绍" .
.Bl -tag -width flag -compact -offset indent
.It "名称背后 ..." .
.It "基本语法" .
.El
.It
.Tn "手册宏域"
.Bl -tag -width flag -compact -offset indent
.It "地址" .
.It "作者名字" .
.It "参数" .
.It "配置声明 (仅用于手册第四部分)" .
.It "命令修饰" .
.It "已定义的变量" .
.It "Errno's (仅用于手册第二部分)" .
.It "环境变量" .
.It "函数参数" .
.It "函数声明" .
.It "标志 (Flags)" .
.It "函数 (库例程)" .
.It "函数类型" .
.\" .It "头文件 Header File (源代码嵌入 including source code)" .
.It "交互命令" .
.It "名称" .
.It "选项" .
.It "路径" .
.It "变量" .
.It "参照" .
.El
.It
.Tn "基本正文宏域"
.Bl -tag -width flag -compact -offset indent
.It "AT&T 宏" .
.It "BSD 宏" .
.It "FreeBSD 宏" .
.It "UNIX 宏" .
.It "嵌入/引用宏 (Enclosure/Quoting)"
.Bl -tag -width flag -compact -offset indent
.It "尖括弧引用/嵌入" .
.It "方括弧引用/嵌入" .
.It "双引号引用/嵌入宏" .
.It "圆括弧引用/嵌入" .
.It "单引号引用/嵌入" .
.It "前缀宏" .
.El
.It "No\-Op 或正文宏" .
.It "消除空白宏" .
.It "手册节对照" .
.It "参考和引用" .
.It "返回值 (仅用于手册页第二和第三部分)"
.It "Trade Names (缩略和类型名称)" .
.It "参数扩展" .
.El
.It
.Tn "页结构宏域"
.Bl -tag -width flag -compact -offset indent
.It "小节首部" .
.It "段落和空行" .
.It "保持 (Keeps)" .
.It "显示" .
.It "字体模式 (加重, 原文和 Symbolic)" .
.It "列表和栏" .
.El
.It
.Tn "预定义串"
.It
.Tn "诊断"
.It
.Tn "用 GROFF, TROFF 和 NROFF 格式化"
.It
.Tn "臭虫 BUGS"
.El
.ne 7
.Sh TROFF 特性
使用
.Nm \-mdoc
宏包 的 目的 是 简化 写手册页 的 过程. 理论上讲, 要使用
.Nm \-mdoc
不一定 要 学习
.Xr troff 1
的 隐藏细节; 然而, 有些 限制 无法回避, 最好 把它们 摆平.
而且 你 应该 知道, 这个 宏包 的 速度 比较
.Em 慢.
.Ss 宏的用法 Macro Usage
在
.Xr troff 1 
里, 宏调用的形式 是 在行首 以
.Ql \&\.
(句点符) 起始, 紧随其后 是 作为 宏名 的 两个字符. 参数 跟在 宏名 之后,
用 空格符 隔开. 这个 位于行首的 句点符 使
.Xr troff 1
把 紧随其后 的 两个字符 视作 宏名. 在 某些情况下 要把
.Ql \&\.
(句点符) 放在 行首, 但不希望 被理解成 宏请求, 方法是 在
.Ql \&\.
(句点) 前 使用
.Ql \e&
转义序列.
.Ql \e&
被 解释成 一段 长度为零 的 空白, 所以 不会 在 输出端 显示 出来.
.Pp
一般说来,
.Xr troff 1
宏 最多 接受 九个参数, 忽略掉 其余的. 大多数 在
.Nm \-mdoc
里的 宏 支持 九个参数, 某些场合 可以 续加 参数, 或扩展到 下一行. (见
.Sx 扩展 Extensions ) .
有些宏 能够 处理 引号 引起来的 参数 (见 下面的
.Sx 在参数中传递空格符 ) .
.Pp
大多数
.Nm \-mdoc
的 基本正文宏域 和 手册宏域 的宏 拥有 一种特性, 表现在 把 参数列表 当成
可调用的宏 
.Em 分析 (解释) .
这意味着 如果 参数列表里的参数 是 普通正文宏域 或 手册宏域
里的 宏, 并且 是 可调用宏, 那么 处理的时候 会 执行 或 调用.
这种情况下的 参数, 即 宏名, 不需要 用
.Ql \&\.
(句点符) 引导.
这种风格 使 很多 宏 嵌套 在 一起; 例如 这个 选项宏
.Ql \&.Op ,
可能
.Em 调用
标志和参数宏,
.Ql \&Fl
和
.Ql \&Ar ,
用来 说明 一个 带参数的 选项:
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
.It Op Fl s Ar bytes
来自
.Li \&.Op \&Fl s \&Ar bytes
.El
.Pp
为了 防止 把 两个字符的字符串 解释成 宏名, 在这个 字符串 前面 加上
.Ql \e& 
转义序列:
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
.It Op \&Fl s \&Ar bytes
来自
.Li \&.Op \e&Fl s \e&Ar bytes
.El
.Pp
这里的 字符串
.Ql \&Fl
和
.Ql \&Ar
没有 被解释成 宏.
在 这篇文档 和 相应的 快速参考手册
.Xr mdoc 7
中, 参数列表 按 可调用参数 分析 的 宏 称为 已分析, 可以 从 参数列表
调用 的 宏 称为 可调用.
这里 用的 术语 '分析' 可能是个 技术失误, 几乎 所有的
.Nm \-mdoc
宏 都 被分析, 既 用它 指 可调用宏, 又 指 有 调用 其他宏的 能力, 显得 很笨拙.
.Ss 在参数中传递空格符 Passing Space Characters in an Argument
某些时候 我们 希望 能够 把 含有 一个或多个 空格符 的 字符串 作为 单个参数
传递. 如果 要 突破 九个参数的限制, 或者 传递给 宏 的 参数 需要 一些 特定布置, 
这个 能力 是必须的. 例如, 函数宏
.Ql \&.Fn
的 第一个参数 是 函数名称, 剩下的参数 作为 函数的参数.
.Tn "ANSI C"
规定 函数的参数 在 圆括弧内 声明, 每个 参数 至少 由 两个 标示符 组成.
例如,
.Fa int foo .
.Pp
有 两个方法 传递 嵌有空格符 的 参数.
.Em 补充一点 :
不幸的是, 在
.Tn AT&T
.Xr troff 
中, 那个 最容易的方法, 就是 作为 单个 参数 传递 两个引号之间的 
字符串和空格符, 非常 消耗 时间 和 内存空间.
虽然 它 对
.Xr groff
并不费事, 但是 为了 可移植性, 这种 做法 只限于 下列 有迫切需要 的 宏:
.Pp
.Bl -tag -width 4n -offset indent -compact
.It Li \&Cd
配置声明 (手册第四部分
.Sx 概要 SYNOPSIS )
.It Li \&Bl
列表开始 (指定宽度的)
.It Li \&Em
加重文字
.It Li \&Fn
函数 (手册第二, 四部分)
.It Li \&It
列表项
.It Li \&Li
原文
.It Li \&Sy
Symbolic text
.It Li \&%B
书题
.It Li \&%J
期刊名
.It Li \&%O
参考选注
.It Li \&%R
报告题目(在参考文件中)
.It Li \&%T
在书籍或期刊中的题目
.El
.Pp
一种 传递 含空格符字符串 的 方法 是 用
.Ql \e\  
硬编码 或 不可填充空格符, 也就是 在 空格符 前 加上 转义符
.Ql \e .
这个 方法 适用于 任何宏, 但 有个 副效应, 它 干扰了 对 长行 的 调整.
.Xr Troff
把 这种 硬编码的 空格符 看作 可显示字符, 因此 无法 在需要的时候 把 字符串
分段 或 换行. 这种 方法 适用于 字符串 不会 到达 行边界 时, 例如:
.Bl -tag -width "fetch(char *str)" -offset indent
.It Fn fetch char\ *str
来自
.Ql \&.Fn fetch char\e *str
.It Fn fetch "char *str"
也可以来自
.Ql \&.Fn fetch "\\*qchar *str\\*q"
.El
.Pp
如果 忽略
.Ql \e
或 引号,
.Ql \&.Fn
宏 会认为 有 三个参数, 结果 成为:
.Pp
.Dl Fn fetch char *str
.Pp
如果 想知道 参数列表 到达 行边界 时 出现什么, 参看
.Sx BUGS
小节.
.Ss 尾部的空白符 Trailing Blank Space Characters
.Xr Troff
可能 被 行尾的 空白符 搞乱, 它的防范规则 是 消除 所有 位于行末 的 空白符. 
如果 坚持 在 行末 加上 空白符, 可以 用 硬空格符 和
.Ql \e&
转义字符. 例如,
.Ql string\e\ \e& .
.Ss 转义特殊字符 Escaping Special Characters
特殊字符, 如 换行符
.Ql \en ,
是 通过 用
.Ql \ee
替换
.Ql \e
(e.g.例如