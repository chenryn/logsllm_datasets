the first result.
As with the OS X flashing procedure earlier, the full input and output for the Linux
process in is shown in Figure 4.10. Again, the commands are highlighted for your easier
reference.
FIGURE 4.10 Flashing a Raspbian OS image to an SD card in Ubuntu Linux.
3. Plug in your SD card and wait a couple of minutes for Linux to detect your card. Next,
run the command fdisk -l from a Terminal prompt. This step and the rest of the procedure
is highlighted in Figure 4.10.
In the screenshot note the reference to the device path /dev/sdb1. In Linux, hard drives
and removable media are mounted as file system paths.
Caution: Be Careful!
I can’t stress this enough: The dd command is extremely powerful, and if you don’t
watch which drive path you point it at, you could easily erase your boot drive and
your valuable data!
4. Run the following statement:
Click here to view code image
sudo dd if=image_file_name.img of=/dev/disksdX bs=2M
Here is a breakdown of the syntax:
sudo: Run the dd command under administrative privilege.
dd: This command actually performs the OS flash.
if: Here you specify the full or relative path to the OS image. In Figure 4.10, you see that
the cd command is used to switch to the directory that contains the Wheezy OS image file.
of: This command specifies the path to the output. This is important: Note in Figure 4.10
that /dev/sdb is specified as the target, not /dev/sdb1. You don’t want to flash a specific
partition on the disk—you want to flash the image onto the entire SD card.
bs: This stands for block size, and larger values write more data “chunks” to the SD card
in less time, but you are more likely to have errors. Two megabytes (2MB) is a good
compromise between speed and accuracy. And yes, the syntax specifies M instead of MB
for the block size value.
5. Run fdisk -l again and look at your /dev/sdb entries. You’ll see that Raspbian creates
two partitions on the SD card. One partition is a File Allocation Table (FAT) Windows-
compatible partition. The other is much bigger and is a Linux partition.
An All-in-One Solution
Because the process of installing an operating system to the Raspberry Pi can be so tedious and scary
for computing newcomers, some developers have taken it upon themselves to build tools to lessen
this learning curve.
Take the New Out Of Box Software (NOOBS) project h(ttp://is.gd/0n2yZv), for example. This is a
tiny boot loader that makes installing an OS on your Raspberry Pi a breeze.
As you can see in Figure 4.11, the NOOBS user interface presents a simple menu from which a user
can install any of the following Pi-tailored operating systems:
Arch Linux
OpenELEC
Pidora
RaspBMC
Raspbian
RiscOS
FIGURE 4.11 The NOOBS utility makes it much easier to load an OS on your Raspberry Pi.
After you’ve used NOOBS to install an OS on your Pi, the boot loader remains resident on your SD
card such that you can reinvoke it at any time by holding down the Shift key during bootup.
Task: Installing an OS on Your Raspberry Pi Using NOOBS
The procedure of setting up a NOOBS SD card differs a bit from the process we’ve
used thus far in flashing an OS to the card.
1. Download the SD Card Association’s formatting tool, SD Formatter
(http://is.gd/IFMlmc), install the software, and use it to format your SD card. Remember
to use an SD card of at least 4GB capacity.
The SD Formatter utility formats the SD card such that we can interact with the drive
directly in Windows or OS X.
2. Download NOOBS (http://is.gd/6EJlou) and extract the contents to the root level of your
newly formatted SD card. Note that we aren’t flashing a binary image to SD like we’ve
done previously in this chapter.
To repeat: We are manually copying the NOOBS file contents directly to the SD card.
3. Insert your newly prepared SD card into the Pi and boot it up.
4. When the Pi Recovery window appears, select your desired operating system and click
Install OS.
When the OS installation completes, the Pi reboots and automatically loads the chosen
OS. You’re done!
If nothing else, NOOBS provides a quick, convenient, and easy way to test out a number of different
OSs on the Pi to help you find your “comfort zone.”
Testing Your New Raspbian Image
The best way to verify that your newly created Raspbian image works correctly is to insert it
(carefully) into the SD slot on your Pi’s circuit board and plug the Raspberry Pi into your power
supply. You’ll also want to plug in a keyboard, mouse, and monitor/TV, as discussed in Chapter 2,
“Hardware Components Quick Start.”
If all goes well, you’ll see the Raspi-Config interface as shown in Figure 4.12.
FIGURE 4.12 First-time Raspberry Pi setup is accomplished by using the Raspi-Config script.
If for some reason the Raspberry Pi doesn’t boot directly into Raspi-Config, then simply issue the
command sudo raspi-config from the Terminal prompt.
You learn the details of Raspberry Pi first-time configuration next in Chapter 5, “Debian Linux
Fundamentals—Terminal.”
Chapter 5. Debian Linux Fundamentals—Terminal
In general, people tend to be afraid of the Linux operating system. In my experience, the following
represent the most common complaints:
Linux is at least partially command line, and that is intimidating.
Linux uses all these wacky commands with strange syntax.
Even the Linux graphical environments are nothing like what we are used to with Windows or
OS X.
Certainly there is some truth to these concerns. Until a few years ago, Linux was in fact a seemingly
impenetrable operating system to all but the most propeller-headed of computer geeks. However, the
twenty-first century brought with it Linux distributions like Ubuntu and Raspbian, which are aimed at
the ordinary computer user.
Sure, you need to learn some funky command-line syntax in order to get around Debian Linux on your
Raspberry Pi. Nevertheless, I believe that you’ll be much better off for it. You might even find
yourself turning to the command line in Windows and OS X when you see how much quicker you can
get work done via the keyboard.
Baby Steps
Before you can begin using the Debian Linux command line, you need to arrive at a command prompt
on your Raspberry Pi. If you connect directly to your Pi (that is to say, by using a monitor, keyboard,
and mouse), you should land at a command prompt by default.
You’ll be required to log into your Raspberry Pi: The default username is pi, and the default
password is raspberry. Press Enter after inputting each part of your logon.
Note: On Case Sensitivity
Raspbian, like all Linux distributions, is case-sensitive. You might already be
accustomed to the fact that passwords are case-sensitive, but it may take some getting used
to things like having two files named File.txt and file.txt co-existing in the same directory!
If you connect to your Pi remotely using SSH or VNC (procedures covered fully inC hapter 7,
“Networking Raspberry Pi”), you must establish that remote connection before accessing the Debian
command prompt.
Finally, if you booted your Pi into the LXDE graphical environment, you can open a command prompt
(formally called the Terminal) by double-clicking the LXTerminal icon on the Desktop. This is
shown in Figure 5.1.
FIGURE 5.1 You can start a Terminal session from within the LXDE desktop environment.
Regardless of you how you get to the Raspbian command prompt, the end result is the same; namely,
you see an input area that looks like the following:
pi@raspberrypi ~ $
The command prompt itself actually yields highly valuable system information. Let me break it down
for you element by element:
pi: This is the name of the default Raspbian user account.
@: This denotes the link between the currently logged on user and the computer name.
raspberrypi: This is the default hostname (computer name) for your Raspberry Pi.
~: This denotes your current location in the Debian filesystem. The tilde (~) represents a
shortcut representation of the user’s home directory, which has the full path /users/raspberrypi
in Raspbian.
$: The dollar sign denotes a nonadministrative user account. By contrast, when you switch your
user identity to the root (superuser) account, the prompt changes to the octothorpe (#)
character.
Note: On Naming Conventions
You’ll notice that in this chapter I use the terms Debian and Raspbian interchangeably.
Don’t be confused! Everything you learn in this chapter works 100% in any distribution of
Debian Linux. Therefore, it doesn’t matter whether you are testing these procedures in
Raspbian, Debian, Ubuntu, or another Debian-derived Linux distribution.
Linux provides the operator full control over the environment. To that end, you can customize the
format of the command prompt in myriad ways. If you’d like more information on this, please read
this post from the Lindesk blog: http://is.gd/xFxt2f.
The Linux command-line interface (CLI, pronounced see-ehl-eye) is what is called a command shell,
or simply shell. Specifically, Debian employs the Bourne Again Shell (Bash) by default. As with
anything and everything else in Linux, you can swap out the Bash shell for another more to your liking.
For our purposes in this book, I stick to Bash.
Essential Terminal Commands
When you are logged into a Raspbian Terminal, where can you go from there? Before we go any
further, I want to provide you with the core Terminal commands that you should know in Raspbian
(Debian) Linux.
Having these commands in your tool belt immunizes you against getting “stuck” with your Raspberry
Pi. A good example of this is the common newcomer situation of not knowing how to go from the
Bash shell to the LXDE graphical environment (and vice versa).
startx
Many Raspberry Pi enthusiasts don’t want to mess with the command shell any more than they
absolutely have to, instead preferring to work in the GUI environment. To jump from the command
line to the GUI, simply type startx and press Enter.
When you are in the LXDE GUI environment, you can open the LXTerminal application as previously
mentioned to spawn a new command-line Bash session. If you want to unload the GUI and return to a
fully character-based interface, simply click the Logout button in the bottom-right corner of the LXDE
Desktop. Next, in the message box that appears, click Logout (see Figure 5.2).
FIGURE 5.2 You can easily return to a full-screen Bash prompt by using the Logout command in
LXDE.
pwd
The present working directory (pwd) command answers the question “Exactly where am I in the
Raspbian file system?”
I suppose it would be helpful to provide a brief description of the Linux file system. Your Raspberry
Pi hard drive is represented as a hierarchical tree of directories (folders) and files. The top level of
the file system is denoted with a slash (/) character.
Beneath the root are a bunch of standard directories, some of which are more important to the end
user than others. Here’s a quick breakdown:
bin: Essential programs
boot: Boot loader programs (that is, files necessary to boot the Pi)
dev: Hardware device drivers and information
etc (pronounced etsy or ee-tee-see): System-wide configuration files
home: Users’ home directories (personal settings, data files, and so forth)
lib (pronounced lihb): Code libraries that are used by the system programs in /bin and /sbin
lost+found: File fragments picked up by file system repair tools like fsck
media: Mount points for removable media (DVDs, flash drives, USB portable drives)
mnt: Temporarily mounted file systems
opt: Optional application software packages
proc (pronounced prock): Dynamically changing system status information
root: Home directory for the root user account
run: Supplemental runtime data stored by installed applications
sbin (pronounced ess-bin): Executable program files that are reserved for administrative use
selinux: Working directory for Security Enhanced Linux, a security enhancement toolset
srv: Temporary storage for some services such as File Transfer Protocol (FTP)
sys: Stores Linux operating system files
tmp: Temporary files that are purged during every system reboot
usr (pronounced user or you-ess-arr): Read-only user data; multiuser utilities and applications
var: (pronounced vahr). Variable data whose values change over time (logs, spool files,
temporary files, and so forth)
Note: Watch Your Pronunciation!
The main reasons I offer you pronunciations for many of these Linux-oriented terms is
because (a) The acronyms are often difficult to pronounce at any rate; (b) Some Linux
power users get awfully persnickety about correct pronunciations; and (c) I want to equip
you with all the tools, physical, logical, and verbal, to become a proficient Linux user.
ls
After you’ve figured out where you “live” in the Raspbian file system, you probably want to see the
contents of that present working directory. That’s what the ls command does; it runs a directory
listing.
In my experience, ls will be one of your most frequently used commands. After all, you need some
mechanism of visualizing directory contents from a command prompt.
Terminal commands often employ switches or parameters to customize how the command works. For
instance, try running the following:
ls -la
This changes the output quite a bit, doesn’t it? Take a look at Figure 5.2 to see the command output on
my Pi. The l switch gives you a columnar (or long; hence the l) listing. The a switch shows all files,
even hidden and system files.
You can even run directory listings for other directories on your Linux system (or, for that matter,
attached storage devices). You simply append the relevant directory path to the ls command. For
instance, check out the following example, the output for which is shown in Figure 5.3.
ls -la /usr/bin
FIGURE 5.3 The ls command will be one of your most frequently-run Linux Terminal commands.
The previous command shows you the contents of the /usr/bin directory no matter what your present
working directory might be.
cd
The cd, or change directory, command is used to navigate the Linux file system from a command
prompt.
If you know your destination ahead of time, simply supply the full path:
Click here to view code image
cd /Users/raspberrypi/Downloads
You can also use relative paths, which are partial file/directory paths that are built on the present
working directory location.
For instance, type cd with no additional arguments to quickly return to your home directory. Then try
the following:
cd Downloads
Be sure not to include a leading slash (/) before Downloads and remember that Downloads is case-
sensitive.
Tip: Tab Completion
As you type commands, paths, and file/program names in Raspbian, try hitting TAB to
see if the Linux autocompletion feature is attractive to you. Believe me, tab completion
comes in handy when you need to type in super-long and super-cryptic file names!
From the ~/Downloads folder, type the following to move up one level from your present working
directory:
cd ..
Make sure to put a space between the cd and the two periods. Also, the tilde (~) character is a
shortcut representation of the currently logged-on user’s home directory path. Thus, for the Pi user the
following paths can be used:
Click here to view code image
cd ~/Downloads
cd /Users/raspberrypi/Downloads
Don’t be ashamed to run the pwd command frequently as you cd your way throughout the Raspbian
(Debian) Linux file system. It’s easy to get lost even if you do have an informative command prompt
configured!
sudo
The sudo (pronounced sue-doo) command is one of the most important commands for you to know,
not only for Raspbian, but for any Linux or Unix operating system (and that includes Apple OS X).
It is widely (and correctly) considered to be a security problem to actually run Linux under the
context of the root (superuser) account; therefore, while remaining under standard account privileges,
you can use sudo to temporarily elevate them and run administrative-level commands while remaining
under standard account privilege otherwise.
To use sudo, you simply prepend the word before the command you want to run. The following
example opens the hosts system configuration file in the nano editor as root:
sudo nano /etc/hosts
Historically, sudo as a command name is a portmanteau (word mashup) of two other words:
su: This is a Linux command that means substitute user and is used to change the current user
account associated with the current Terminal session.
do: This is nothing more than a reference to the verb do, which means to perform a particular
action.
passwd
You use the passwd command to change the password for a user account. To change the default pi
account password, issue the following Terminal command:
sudo passwd pi
You’ll be asked to (1) authenticate with the current password; (2) define a new password; and (3)
confirm said password.
If you have root privileges on the computer (which the pi account does by default), you can change the
password for any user on the system as well.
Note: Becoming Root
You can customize which Raspbian user accounts can employ the sudo command by
making or editing entries in the /etc/sudoers system configuration file.
Note: Taking the Next Step(s) with Linux
Although I do my best in this book to give Linux newcomers what they need to become
at least moderately proficient users, there is only so much space to work with. Therefore, I
suggest you pick up a good book on Linux end user fundamentals (such as A Practical
Guide to Linux Commands, Editors, and Shell Programming, 3rd Edition ,by my Pearson
colleague Mark Sobell: http://is.gd/NWMLHz).
nano
Linux distributions generally include several different text editors, although some long-time Linux
users will balk at my suggesting nano (pronounced NAH-noh) instead of vi (pronounced vee-eye or
vie).
Note: Linux Humor
Linux program names often have colorful and/or ironic histories. For our purposes,
nano is a recursive acronym for Nano’s ANOther Editor. Historically, nano is a more user-
friendly successor to an ancient Linux email client application named pico (pronounced
pee-koh).
To open an existing file (such as /etc/hosts), run the following command:
sudo nano /etc/hosts
If you want read/write access to system configuration files like hosts, you should always prepend
your nano command with sudo.
You can create a new, blank text file by running nano with the name of your new, as-yet-uncreated
file. For instance, the following command creates a new file named test.txt in the present working
directory and opens the document for editing in nano:
sudo nano test.txt
One thing I like about nano is that the primary interface commands appear in the footer of the user
interface (see Figure 5.4).
FIGURE 5.4 The nano text editor’s user interface includes onscreen navigation help.
In a nutshell, you use the arrow keys to navigate and the Control key to issue shortcuts. The most
common of these shortcuts are Control+O to write out (save) your file, and Control+X to exit nano.