命令说明
停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以
再次启动这些容器。
选项：
-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。
unpause
格式为 docker-compose unpause [SERVICE...] 。
恢复处于暂停状态中的服务。
up
格式为 docker-compose up [options] [SERVICE...] 。
该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服
务，并关联服务相关容器的一系列操作。
链接的服务都将会被自动启动，除非已经处于运行状态。
可以说，大部分时候都可以直接通过该命令来启动一个项目。
默认情况， docker-compose up 启动的容器都在前台，控制台将会同时打印所
有容器的输出信息，可以很方便进行调试。
当通过 Ctrl-C 停止命令时，所有容器将会停止。
如果使用 docker-compose up -d ，将会在后台启动并运行所有的容器。一般推
荐生产环境下使用该选项。
默认情况，如果服务容器已经存在， docker-compose up 将会尝试停止容器，
然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配
docker-compose.yml 文件的最新内容。如果用户不希望容器被停止并重新创
建，可以使用 docker-compose up --no-recreate 。这样将只会启动处于停止
状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用
docker-compose up --no-deps -d  来重新创建服务并后台停
止旧服务，启动新服务，并不会影响到其所依赖的服务。
选项：
-d 在后台运行服务容器。
211
命令说明
--no-color 不使用颜色来区分不同的服务的控制台输出。
--no-deps 不启动服务所链接的容器。
--force-recreate 强制重新创建容器，不能与 --no-recreate 同时使
用。
--no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-
recreate 同时使用。
--no-build 不自动构建缺失的服务镜像。
-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。
migrate-to-labels
格式为 docker-compose migrate-to-labels 。
重新创建容器，并添加 label。
主要用于升级 1.2 及更早版本中创建的容器，添加缺失的容器标签。
实际上，最彻底的办法当然是删除项目，然后重新创建。
version
格式为 docker-compose version 。
打印版本信息。
212
YAML 模板文件
Compose 模板文件
模板文件是使用 Compose 的核心，涉及到的指令关键字也比较多。但大家不用担
心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。
默认的模板文件名称为 docker-compose.yml ，格式为 YAML 格式。
在旧版本（版本 1）中，其中每个顶级元素为服务名称，次级元素为服务容器的配
置信息，例如
webapp:
image: examples/web
ports:
- "80:80"
volumes:
- "/data"
版本 2 扩展了 Compose 的语法，同时尽量保持跟版本 1 的兼容，除了可以声明网
络和存储信息外，最大的不同一是添加了版本信息，另一个是需要将所有的服务放
到 services 根下面。
例如，上面例子改写为版本 2，内容为
version: "2"
services:
webapp:
image: examples/web
ports:
- "80:80"
volumes:
- "/data"
注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要
Dockerfile）等来自动构建生成镜像。
213
YAML 模板文件
如果使用 build 指令，在 Dockerfile 中设置的选项(例如： CMD , EXPOSE ,
VOLUME , ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设
置。
下面分别介绍各个指令的用法。
build
指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-
compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使
用这个镜像。
build: /path/to/build/dir
cap_add, cap_drop
指定容器的内核能力（capacity）分配。
例如，让容器拥有所有能力可以指定为：
cap_add:
- ALL
去掉 NET_ADMIN 能力可以指定为：
cap_drop:
- NET_ADMIN
command
覆盖容器启动后默认执行的命令。
command: echo "hello world"
cgroup_parent
214
YAML 模板文件
指定父 cgroup 组，意味着将继承该组的资源限制。
例如，创建了一个 cgroup 组名称为 cgroups_1 。
cgroup_parent: cgroups_1
container_name
指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。
例如：
container_name: docker-web-container
需要注意，指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允
许多个容器具有相同的名称。
devices
指定设备映射关系。
例如：
devices:
- "/dev/ttyUSB1:/dev/ttyUSB0"
dns
自定义 DNS 服务器。可以是一个值，也可以是一个列表。
dns: 8.8.8.8
dns:
- 8.8.8.8
- 9.9.9.9
dns_search
215
YAML 模板文件
配置 DNS 搜索域。可以是一个值，也可以是一个列表。
dns_search: example.com
dns_search:
- domain1.example.com
- domain2.example.com
dockerfile
如果需要指定额外的编译镜像的 Dockefile 文件，可以通过该指令来指定。
例如
dockerfile: Dockerfile-alternate
注意，该指令不能跟 image 同时使用，否则 Compose 将不知道根据哪个指令来
生成最终的服务镜像。
env_file
从文件中获取环境变量，可以为单独的文件路径或列表。
如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则
env_file 中变量的路径会基于模板文件路径。
如果有变量名称与 environment 指令冲突，则按照惯例，以后者为准。
env_file: .env
env_file:
- ./common.env
- ./apps/web.env
- /opt/secrets.env
环境变量文件中每一行必须符合格式，支持 # 开头的注释行。
216
YAML 模板文件
# common.env: Set development environment
PROG_ENV=development
environment
设置环境变量。你可以使用数组或字典两种格式。
只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止
泄露不必要的数据。
例如
environment:
RACK_ENV: development
SESSION_SECRET:
或者
environment:
- RACK_ENV=development
- SESSION_SECRET
注意，如果变量名称或者值中用到 true|false，yes|no 等表达布尔含义的词
汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。
http://yaml.org/type/bool.html 中给出了这些特定词汇，包括
y|Y|yes|Yes|YES|n|N|no|No|NO
|true|True|TRUE|false|False|FALSE
|on|On|ON|off|Off|OFF
expose
暴露端口，但不映射到宿主机，只被连接的服务访问。
仅可以指定内部端口为参数
217
YAML 模板文件
expose:
- "3000"
- "8000"
extends
基于其它模板文件进行扩展。
例如我们已经有了一个 webapp 服务，定义一个基础模板文件为 common.yml 。
# common.yml
webapp:
build: ./webapp
environment:
- DEBUG=false
- SEND_EMAILS=false
再编写一个新的 development.yml 文件，使用 common.yml 中的 webapp 服
务进行扩展。
# development.yml
web:
extends:
file: common.yml
service: webapp
ports:
- "8000:8000"
links:
- db
environment:
- DEBUG=true
db:
image: postgres
后者会自动继承 common.yml 中的 webapp 服务及环境变量定义。
使用 extends 需要注意：
218
YAML 模板文件
要避免出现循环依赖，例如 A 依赖 B，B 依赖 C，C 反过来依赖 A 的情况。
extends 不会继承 links 和 volumes_from 中定义的容器和数据卷资源。
一般的，推荐在基础模板中只定义一些可以共享的镜像和环境变量，在扩展模板中
具体指定应用变量、链接、数据卷等信息。
external_links
链接到 docker-compose.yml 外部的容器，甚至 并非 Compose 管理的外部容
器。参数格式跟 links 类似。
external_links:
- redis_1
- project_db_1:mysql
- project_db_1:postgresql
extra_hosts
类似 Docker 中的 --add-host 参数，指定额外的 host 名称映射信息。
例如：
extra_hosts:
- "googledns:8.8.8.8"
- "dockerhub:52.1.157.61"
会在启动后的服务容器中 /etc/hosts 文件中添加如下两条条目。
8.8.8.8 googledns
52.1.157.61 dockerhub
image
指定为镜像名称或镜像 ID。如果镜像在本地不存在， Compose 将会尝试拉去这个
镜像。
例如：
219
YAML 模板文件
image: ubuntu
image: orchardup/postgresql
image: a4bc65fd
labels
为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信
息。
labels:
com.startupteam.description: "webapp for a startup team"
com.startupteam.department: "devops department"
com.startupteam.release: "rc3 for v1.0"
links
链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名
（SERVICE:ALIAS） 格式都可以。
links:
- db
- db:database
- redis
使用的别名将会自动在服务容器中的 /etc/hosts 里创建。例如：
172.17.2.186 db
172.17.2.186 database
172.17.2.187 redis
被链接容器中相应的环境变量也将被创建。
log_driver
类似 Docker 中的 --log-driver 参数，指定日志驱动类型。
220
YAML 模板文件
目前支持三种日志驱动类型。
log_driver: "json-file"
log_driver: "syslog"
log_driver: "none"
log_opt
日志驱动的相关参数。
例如
log_driver: "syslog"
log_opt:
syslog-address: "tcp://192.168.0.42:123"
net
设置网络模式。使用和 docker client 的 --net 参数一样的值。
net: "bridge"
net: "none"
net: "container:[name or id]"
net: "host"
pid