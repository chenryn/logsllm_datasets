### Android Weblogin: Google's Skeleton Key
**Craig Young, Tripwire VERT**

#### About Me
I am a senior researcher at Tripwire VERT, where I focus on identifying and disclosing vulnerabilities. My interests include long bike rides, testing systems for input sanitization failures, and building furniture with my wife on weekends. 

**Disclaimer:** I am not an Android developer.

#### Talk Overview (tl;dr)
1. Android often prioritizes convenience over security.
2. The `weblogin:` mechanism can bypass password prompts.
3. Security tools typically do not detect token egress.
4. A single token can fully compromise Google Apps.

#### Understanding `weblogin:`
- **Android Token Type Example:**
  ```
  weblogin:service=youtube&continue=https://www.youtube.com/
  ```
- **Functionality:**
  - Grants cookies for the desired service.
  - Acts as a substitute for password entry.

#### Abusing `weblogin:`
- **Cookies are not service-limited:**
  - An app requesting a YouTube token can also access Gmail.
  - Android permission prompts can be misleading.
  - For example, a YouTube token can grant access to Gmail.
- **Prompt Frequency:**
  - Only one prompt per app per token type.
- **Token Access:**
  - Root or physical device access can provide token access.

#### How to Hack Google Apps
1. Retrieve a `weblogin:` token for a domain admin.
2. Access the domain control panel at `www.google.com/a/domain.com`.
3. Exploit the power of the token.

#### Using the Skeleton Key
- **Admin `weblogin:` provides extensive control:**
  - Disable 2-Step Verification.
  - Reset passwords.
  - Reveal temporary passwords.
  - Create and modify privileges/roles.
  - Create and control mailing lists.
  - Generate domain reports.

#### Impact on Gmail
- **Personal Google accounts are also vulnerable:**
  - Full access to Google Drive, Calendar, and Gmail.
  - Ability to add recovery addresses and change passwords.
  - Manipulate account settings for espionage.

#### Methods to Obtain `weblogin:`
1. Legitimate Android token request.
2. Direct account database query (requires root access).
3. Physical device access (auto sign-in).
4. Extract the database from device memory.

#### Proof of Concept (PoC) App Iterations
1. **TubeApp:**
   - Advertised as a YouTube downloader.
   - Does not upload credentials.
2. **Stock View:**
   - Advertised as a stock viewer.
   - Uploads `weblogin:` tokens via HTTP/HTTPS.

#### Stock Viewer PoC Objectives
1. **Create a token-stealing app without root:**
   - Request access to Google Finance.
   - Two token requests: one for the device and one for the attacker.
2. **Publish the app on Google Play:**
   - Determine if Bouncer allows the token request.
   - Check if Bouncer detects the app as malicious.
3. **Scan with Android security software:**
   - Assess if privacy advisors recognize the threat.
   - Determine if token theft is blocked.

#### Making the App
- **Core Code:**
  ```java
  TOKEN_TYPE = "weblogin:service=finance&continue=https://finance.google.com/";
  getAuthToken(acct, TOKEN_TYPE, null, this, new TokenCallback(), null);
  ```
- **getAuthToken() generates a generic prompt:**

#### App Revisions
- **TubeApp:**
  - PoC to demonstrate OAuth Consumer Secret retrieval.
  - Not published on Google Play.
- **Stock View V1:**
  - Description indicates it is for testing only.
  - Priced at $150.
  - Uploads the token if permitted.
- **Stock View V2:**
  - Updated description to indicate it is spyware.
  - Added HTTPS support.
  - Uploads all available account details.
  - Uploads the token if permitted.

#### App Permissions
- **On Install:**
- **On Run:**

#### App Results
- **Google Play Publication:**
  - Successfully published.
  - No flags upon submission.
  - No data indicating Bouncer execution.

#### New Questions
- Does Bouncer run all apps?
- Does Bouncer run with Google accounts?
- Does Google perform any manual reviews?

#### Stock Viewer in Google Play
- **Play Store Retrospective:**
  - The app was live for a month.
  - Android Verify now detects it as spyware.

#### End-Point Protection
- **Antivirus/Privacy Advisors:**
  - Scanned with five popular tools:
    - Lookout: Safe
    - Norton: No Risk
    - Sophos: Clean
    - Avast: Zero Problems
    - Trend Micro Mobile Security: No Threats Found
- **Privacy Advisors:**
  - Avast lists it as having account access.
  - Lookout Premium did not report access to tokens.

#### DEMO

#### Don't Be a Victim
- **Best Practices:**
  - Avoid using admin accounts on Android.
  - Be cautious of token requests, including `weblogin:` and LSID/SID.
  - Download apps only from trusted sources like Google Play.
  - Use antivirus to detect root exploits.

#### Incident Response
- **Steps to Take:**
  - Invalidate all sign-in cookies.
  - Reset passwords.
  - Review affected accounts for:
    - New mail forwarding rules.
    - New recovery email addresses.
    - New domain admins.
  - Analyze Google Apps audit trail to identify unauthorized actions and record IP addresses used by the intruder.

#### Further Reading
- [SSO Using Account Manager](http://nelenkov.blogspot.com/2012/11/sso-using-account-manager.html)
- [BrightTalk Webcast](https://www.brighttalk.com/webcast/7651/69283)
- [Bypassing Google's Two-Factor Authentication](https://blog.duosecurity.com/2013/02/bypassing-googles-two-factor-authentication/)

#### Questions?
Follow me on Twitter: [@CraigTweets]