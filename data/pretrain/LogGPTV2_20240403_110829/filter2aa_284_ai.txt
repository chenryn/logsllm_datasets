PHP.INI
References
• https://wwww.owasp.org/index.php/SecureFlag
public class GuidSessionIDManager : SessionIDManager {
   public override string CreateSessionID(HttpContext context){
return Guid.NewGuid().ToString();
   }
   public override bool Validate(string id) {
try{
       Guid testGuid = new Guid(id);
       if (id == testGuid.ToString())
         return true;
     }catch(Exception e) { throw e }
     return false;
   }
 }
Sample 8.7
request.getSession(false).invalidate();
//and then create a new session with
getSession(true) (getSession())
Sample 8.8
session.use_trans_sid = 0
session.use_only_cookies
Sample 8.9
A2 - Broken Authentication and Session Management
70
A3
71
9.1 Overview
What is Cross-Site Scripting (XSS)?
Cross-site scripting (XSS) is a type of coding vulnerability. It is usually found in web applications. XSS enables attack-
ers to inject  malicious into web pages viewed by other users. XSS may allow attackers to bypass access controls such 
as the same-origin policy may. This is one of the most common vulnerabilities found accordingly with OWASP Top 
10. Symantec in its annual threat report found that XSS was the number two vulnerability found on web servers. The 
severity/risk of this vulnerability may range from a nuisance to a major security risk, depending on the sensitivity of 
the data handled by the vulnerable site and the nature of any security mitigation implemented by the site’s organi-
zation.  
Description
There are three types of XSS, Reflected XSS (Non-Persistent), Stored XSS(Persistent), and DOM based XSS.  Each of 
these types has different means to deliver a malicious payload to the server. The important takeaway is the conse-
quences are the same.
What to Review
Cross-site scripting vulnerabilities are difficult to identify and remove from a web application
Cross-site scripting flaws can be difficult to identify and remove from a web application. The best practice to search 
for flaws is to perform an intense code review and search for all places where user input through a HTTP request 
could possibly make its way into the HTML output. 
Code reviewer needs to closely review.
1. That untrusted data is not transmitted in the same HTTP responses as HTML or JavaScript.
2. When data is transmitted from the server to the client, untrusted data must be properly encoded and the HTTP 
response. Do not assume data from the server is safe. Best practice is to always check data.
3. When introduced into the DOM, untrusted data MUST be introduced using one of the following APIs:
a. Node.textContent
b. document.createTextNode
c. Element.setAttribute (second parameter only)
Code reviewer should also be aware of the HTML tags (such as , ,  etc.) can 
be used to transmit malicious JavaScript.
Web application vulnerability automated tools/scanners can help to find Cross-Site scripting flaws. However they 
cannot find all XSS vulnerabilities, hence manual code reviews are important. Manual code reviews wont catch 
all either but a defense in depth approach is always the best approach based on your level of risk.
OWASP Zed Attack Proxy(ZAP) is an easy to use integrated penetration-testing tool for finding vulnerabilities in web 
applications. ZAP provides automated scanners as well as a set of tools that allow you to find security vulnerabilities 
manually. It acts as a web proxy that you point your browser to so it can see the traffic going to a site and allows you 
to spider, scan, fuzz, and attack the application. There are other scanners available both open source and commercial. 
CROSS-SITE SCRIPTING (XSS)
A3
A3 - Cross-Site Scripting (XSS)
72
Use Microsft’s Anti-XSS library
Another level of help to prevent XSS is to use an Anti-XSS library.
Unfortunately, HtmlEncode or validation feature is not enough to deal with XSS, especially if the user input 
needs to be added to JavaScript code, tag attributes, XML or URL. In this case a good option is the Anti-XSS 
libray 
.NET ASPX
1. On ASPX .Net pages code review should check to make sure web config file does not turn off page 
validation. 
2. .Net framework 4.0 does not allow page validation to be turned off. Hence if the programmer wants to turn of 
page validation the developer will need to regress back to 2.0 validation mode. 
3. Code reviewer needs to make sure page validation is never turned off on anywhere and if it is understand 
why and the risks it opens the organization to. 
The HTMLEncode method applies HTML encoding to a specified string. This is useful as a quick method of 
encoding form data and other client request data before using it in your Web application. Encoding data con-
verts potentially unsafe characters to their HTML-encoded equivalent.(MSDN,2013) 
JavaScript and JavaScript Frameworks
Both Javascript and Javascript frameworks are now widely use in web applications today. This hinders the 
code reviewer in knowing what frameworks do a good job on preventing XSS flaws and which ones don’t. 
Code reviewer should check to see what to see if any CVE exists for the framework being used and also check 
that the javascript framework is the latest stable version.
Figure 6: Example .Net XSS Framework Error
73
OWASP References
• OWASP XSS Prevention Cheat Sheet
• OWASP XSS Filter Evasion Cheat Sheet
• OWASP DOM based XSS Prevention Cheat Sheet
• Testing Guide: 1st 3 chapters on Data Validation Testing
• OWASP Zed Attack Proxy Project
External References
• https://www4.symantec.com/mktginfo/whitepaper/ISTR/21347932_GA-internet-security-threat-re-
port-volume-20-2015-social_v2.pdf
• https://cwe.mitre.org/data/definitions/79.html
• http://webblaze.cs.berkeley.edu/papers/scriptgard.pdf
• http://html5sec.org
• https://cve.mitre.org
9.2 HTML Attribute Encoding 
HTML attributes may contain untrusted data. It is important to determine if any ot the HTML attributes on a 
given page contains data from outside the trust boundary. 
Some HTML attributes are considered safer than others such as align, alink, alt, bgcolor, border, cellpadding, 
cellspacing, class, color, cols, colspan, coords, dir, face, height, hspace, ismap, lang, marginheight, marginwidth, 
multiple, nohref, noresize, noshade, nowrap, ref, rel, rev, rows, rowspan, scrolling, shape, span, summary, tabin-
dex, title, usemap, valign, value, vlink, vspace, width.
When reviewing code for XSS we need to look for HTML attributes such as the following reviewing code for 
XSS we need to look for HTML attributes such as the following:
Attacks may take the following format:
“>
What is Attribute encoding?  
HTML attribute encoding replaces a subset of characters that are important to prevent a string of characters 
from breaking the attribute of an HTML element.
This is because the nature of attributes, the data they contain, and how they are parsed and interpreted by 
a browser or HTML parser is different than how an HTML document and its elements are read; OWASP XSS 
Prevention Cheat Sheet. Except for alphanumeric characters, escape all characters with ASCII values less than 
256 with the &#xHH; format (or a named entity if available) to prevent switching out of the attribute. The rea-
son this rule is so broad is that developers frequently leave attributes unquoted. Properly quoted attributes 
can only be escaped with the corresponding quote. Unquoted attributes can be broken out of with many 
characters, including [space] % * + , - / ;  ^ and |. 
Attribute encoding may be performed in a number of ways. Two resources are:
1. HttpUtility.HtmlAttributeEncode  
74
http://msdn.microsoft.com/en-us/library/wdek0zbf.aspx 
2. OWASP Java Encoder Project 
https://www.owasp.org/index.php/OWASP_Java_Encoder_Project 
HTML Entity
HTML elements which contain user controlled data or data from untrusted sourced should be reviewed for 
contextual output encoding. In the case of HTML entities we need to help ensure HTML Entity encoding is 
performed: 
Example HTML Entity containing untrusted data: 
HTML Entity Encoding is required 
It is recommended to review where/if untrusted data is placed within entity objects. Searching the source 
code fro the following encoders may help establish if HTML entity encoding is being done in the application 
and in a consistent manner.
OWASP Java Encoder Project
https://www.owasp.org/index.php/OWASP_Java_Encoder_Project 
OWASP ESAPI 
http://code.google.com/p/owasp-esapi-java/source/browse/trunk/src/main/java/org/owasp/esapi/codecs/
HTMLEntityCodec.java
JavaScript Parameters
Untrusted data, if being placed inside a JavaScript function/code requires validation. Invalidated data may 
break out of the data context and wind up being executed in the code context on a users browser. 
Examples of exploitation points (sinks) that are worth reviewing for: 
HTML Body Context        UNTRUSTED DATA    OR    ...UNTRUSTED DATA     OR    
UNTRUSTED DATA     
   & --> &amp;     &lt;    > --> &gt;    “ --> &quot;    ‘ --> &#x27; 
   ” />
   String safe = ESAPI.encoder().encodeForHTML( request.getParameter( “input” ) ); 
A3 - Cross-Site Scripting (XSS)
75
                attack: ‘);/* BAD STUFF */      
Potential solutions: 
OWASP HTML Sanitizer ProjecT
OWASP JSON Sanitizer Project 
ESAPI JavaScript escaping can be call in this manner: 
Please note there are some JavaScript functions that can never safely use untrusted data as input - even if 
javascript escaped! 
For example (note this is an example of how NOT to use JavaScript): 
eval() 
jquery 
Safe usage (use text, not html)     
    String safe = ESAPI.encoder().encodeForJavaScript( request.getParameter( “input” ) ); 
$(“#userInput”)
 var txtField = “A1”;     var txtUserInput = “’PI:EMAIL’;alert(1);”;     eval(   “document.forms[0].” + txtField + 
“.value =” + A1); 
Sample 9.1
    var txtAlertMsg = “Hello World: “;     var txtUserInput = “testalert(1)”;     $(“#message”).html(   
txtAlertMsg +”” + txtUserInput + “”); 
Sample 9.2
A3 - Cross-Site Scripting (XSS)
76
.text
Nested Contexts
Best to avoid such nested contexts: an element attribute calling a JavaScript function etc. these contexts can 
really mess with your mind. 
When the browser processes this it will first HTML decode the contents of the onclick attribute. It will pass the 
results to the JavaScript Interpreter. So we have 2 contextx here...HTML and Javascript (2 browser parsers). We 
need to apply “layered” encoding in the RIGHT order:
1.  JavaScript encode 
2.  HTML Attribute Encode so it “unwinds” properly and is not vulnerable. 
’)” >An error occurred           
Here we have a HTML attribute(onClick) and within a nested Javascript function call (showError). 
’)))”     >An error occurred ....  
(   “testalert(1)”); 
    Name:   
                    <-- no isAdmin here!
Sample 10.3
A4 - Insecure Direct Object Reference
82
A5