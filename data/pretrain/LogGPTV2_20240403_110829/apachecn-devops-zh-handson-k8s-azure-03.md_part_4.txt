    ![Fetching the external IP value of the front-end deployment](img/B17338_03_17.jpg)
    图 3.17:外部 IP 值
3.  在 Azure 门户中，如果您单击所有资源并在负载平衡器上进行过滤，您将看到一个 kubernetes 负载平衡器。点击显示类似*图 3.18* 的内容。突出显示的部分向您展示了**端口 80** 上有一个接受流量的负载平衡规则，并且您有两个公共 IP 地址:
![Azure load balancer showing the load balancing rule accepting traffic on port 80 ](img/B17338_03_18.jpg)
图 3.18:Azure 门户中的 kubernetes 负载平衡器
如果您点击两个公共 IP 地址，您将看到两个 IP 地址都链接到您的集群。其中之一将是您实际前端服务的 IP 地址；另一个被 AKS 用来建立出站连接。
#### 注意
Azure 有两种类型的负载平衡器:基本的和标准的。
基本负载平衡器后面的虚拟机无需任何特定配置即可建立出站连接。标准负载平衡器后面的虚拟机(现在是 AKS 的默认值)需要负载平衡器上的出站规则来建立出站连接。这就是为什么您会看到配置了第二个 IP 地址。
你终于准备好看你的留言簿应用了！
### 留言簿应用正在运行
在您最喜欢的浏览器中键入服务的公共 IP。你应该得到如图 3.19 所示的输出:
![Using the public IP address to see the Guestbook application in action](img/B17338_03_19.jpg)
图 3.19:留言簿应用正在运行
请记录您的留言。他们会得救的。打开另一个浏览器，键入相同的 IP；您将看到您键入的所有消息。
恭喜–您已经完成了第一个完全部署的多层云原生 Kubernetes 应用！
为了节省免费试用虚拟机上的资源，最好使用以下命令删除创建的部署以运行下一轮部署:
忽必烈删除部署前端 redis master redis 复制
忽必烈删除服务前端 redis master redis 复制
在前面几节中，您已经部署了一个 Redis 集群，并部署了一个可公开访问的 web 应用。您已经了解了部署、复制集和 pod 是如何链接的，并且了解了 Kubernetes 如何使用**服务**对象来路由网络流量。在本章的下一节中，您将使用 Helm 在 Kubernetes 之上部署一个更复杂的应用。
## 使用 Helm 安装复杂的 Kubernetes 应用
在前一节中，您使用了静态 YAML 文件来部署应用。当跨多个环境(如开发/测试/生产)部署更复杂的应用时，手动编辑每个环境的 YAML 文件会变得很麻烦。这就是 Helm 工具的用武之地。
Helm 是 Kubernetes 的包管理器。Helm 帮助您大规模部署、更新和管理 Kubernetes 应用。为此，你写了一些叫做 Helm 图表的东西。
您可以将 Helm Charts 视为参数化的 Kubernetes YAML 文件。如果您考虑一下我们在上一节中编写的 Kubernetes YAML 文件，这些文件是静态的。您需要进入文件并编辑它们以进行更改。
Helm Charts 允许您编写带有某些参数的 YAML 文件，您可以动态设置这些参数。在部署图表时，可以通过值文件或作为命令行变量来设置参数。
最后，有了 Helm，不一定非要自己写 Helm Charts 您还可以使用丰富的预写 Helm Charts 库，并通过简单的命令(如**Helm install-name my-release stable/MySQL**)在集群中安装流行软件。
这正是您在下一部分要做的事情。您将通过只发出两个命令在集群上安装 WordPress。在接下来的章节中，您还将深入到您将编辑的自定义掌舵图。
#### 注意
2019 年 11 月 13 日，Helm v3 第一个稳定版本发布。在下面的例子中，我们将使用 Helm v3。Helm v2 和 Helm v3 最大的区别在于，Helm v3 是一个完全客户端的工具，不再需要名为 **Tiller** 的服务器端工具。
让我们从使用 Helm 在集群上安装 WordPress 开始。在本节中，您还将了解 Kubernetes 中的持久存储。
### 使用 Helm 安装 WordPress
正如在介绍中提到的，Helm 拥有丰富的预写 Helm 图表库。要访问该库，您必须向 Helm 客户端添加一个回购:
1.  Add the repo that contains the stable Helm Charts using the following command:
    头盔 repo 添加 bitnami \
      https://charts.bitnami.com/bitnami
2.  To install WordPress, run the following command:
    头盔安装手电 wp bitnami/wordpress
    此执行将导致 Helm 安装详细位于[https://github . com/bitnami/charts/tree/master/bitnami/WordPress](https://github.com/bitnami/charts/tree/master/bitnami/wordpress)的图表。
Helm 需要一些时间来安装和网站上线。让我们来看一个关键概念，当网站加载时**persistentvolumeclasses**。在介绍完这些之后，我们将回头看看您创建的网站。
### PersistentVolumeClaims
典型的过程需要计算、内存、网络和存储。在留言簿示例中，我们看到了 Kubernetes 如何帮助我们抽象计算、内存和网络。相同的 YAML 文件适用于所有云提供商，包括面向公众的负载平衡器的云特定设置。WordPress 示例展示了最后一部分，即存储，是如何从底层云提供商中抽象出来的。
在这种情况下，WordPress Helm Chart 依赖于 Mariadb Helm Chart([https://github . com/bitnami/charts/tree/master/bitnami/Mariadb](https://github.com/bitnami/charts/tree/master/bitnami/mariadb))进行数据库安装。
与我们的前端等无状态应用不同，MariaDB 需要小心处理存储。为了让 Kubernetes 处理有状态的工作负载，它有一个名为**statefleset**的特定对象。statefolset([https://kubernetes . io/docs/concepts/workloads/controller/statefolset/](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/))就像一个具有额外订购能力的部署，以及 pods 的独特性。这意味着 Kubernetes 将确保 PODS 和它的存储保持在一起。StatefulSet 帮助的另一种方式是对 StatefulSet 中的荚进行一致的命名。PODS 名为 ** -#** ，其中第一个 PODS 的 **#** 从 **0** 开始，第二个 PODS 的 **1** 结束。
运行以下命令，您可以看到 MariaDB 附加了一个可预测的数字，而 WordPress 部署的末尾附加了一个随机数:
忽必烈得到 pods
这将产生如图 3.20 所示的输出:
![Naming of pods using a StatefulSet](img/B17338_03_20.jpg)
图 3.20:马里亚数据库和 WordPress Pod 上的数字
相对于状态集单元，编号强化了部署单元的短暂性。
另一个不同是如何处理 pod 删除。当一个部署容器被删除时，Kubernetes 将在它能启动的任何地方再次启动它，而当一个 StatefulSet 容器被删除时，Kubernetes 将只在它运行的节点上重新启动它。只有当节点从 Kubernetes 集群中移除时，它才会重新定位 pod。
通常，您会希望将存储附加到状态集。为了实现这一点，一个状态集合需要一个**持久卷** ( **PV** )。该卷可以由许多机制支持(包括块，如 Azure Blob、EBS 和 iSCSI，以及网络文件系统，如 AFS、NFS 和 GlusterFS)。状态集需要由**持久卷声明** ( **聚氯乙烯**)处理的预调配卷或动态调配卷。聚氯乙烯允许用户动态请求存储，这将导致光伏被创建。
详情请参考[https://kubernetes . io/docs/concepts/storage/persistent-volumes/](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)。
在这个 WordPress 例子中，你使用的是一个聚氯乙烯。聚氯乙烯提供了对底层存储机制的抽象。让我们通过运行以下内容来看看马里亚数据库掌舵图做了什么:
忽必烈得到 state fulset-o YAML > mariadbss . YAML
mariadbss . yaml 代码
在前面的命令中，您获得了创建的 StatefulSet 的 YAML 定义，并将其存储在名为 **mariadbss.yaml** 的文件中。让我们看看 YAML 文件中最相关的部分。代码已被截断，只显示最相关的部分:
1 堆叠版本:v1
2 个项目:
3-API 版本:apps/v1
4 种:状态集
...
285 卷安装:
286 - mountPath: /bitnami/mariadb
287 名称:数据
...
306 volumeClaimTemplates:
307 - apiVersion: v1
308 子级：持久性卷索赔
309 元数据:
310 创建时间标记:空
311 标签:
312 app.kubernetes.io/component:小学
313 应用 Kubernetes 特. io/instance:handonakswp
314 立方结构应用程式。我/名称:mariadb
315 名称:数据
316 规格:
317 种接入模式:
318 -读写一次
319 资源:
320 项请求:
321 存储:8Gi
322 卷模式:文件系统
...
前面代码的大部分元素已经在前面的部署中介绍过了。在以下几点中，我们将强调关键的区别，来看一下聚氯乙烯:
#### 注意
聚氯乙烯可以被任何 PODS 使用，而不仅仅是州级 PODS。
让我们详细讨论一下前面代码的不同元素:
*   **第 4 行**:此行表示**状态设置**申报。
*   **第 285-287 行**:这些行挂载定义为**数据**的卷，并将其挂载到 **/bitnami/mariadb** 路径下。
*   **第 306-322 行**:这些行申报 PVC。特别注意:
    *   **315 线**:该线命名为**数据**，在*285 线*重复使用。
    *   **第 318 行**:该行给出了访问模式**读写一次**，这将创建块存储，在 Azure 上是一个磁盘。还有其他访问模式，即 **ReadOnlyMany** 和**读写多**。顾名思义，一个**读写一次**卷只能连接到一个 PODS，而一个**读写一次**或**读写多次**卷可以同时连接到多个 PODS。后两种类型需要不同的底层存储机制，如 Azure 文件或 Azure Blob。
    *   **第 321 行**:该行定义了盘的大小。
基于前面的信息，Kubernetes 动态地请求一个 8 GiB 的卷并将其绑定到这个 pod。在这种情况下，将使用 Azure 磁盘支持的默认动态存储资源调配程序。创建群集时，Azure 设置了动态置备程序。要查看集群上可用的存储类，可以运行以下命令:
忽必烈得到 storageclass
这将向您显示类似于图 3.21 的输出:
![List of storage classes available on your cluster](img/B17338_03_21.jpg)
图 3.21:集群中不同的存储类别
通过运行以下命令，我们可以获得有关聚氯乙烯的更多详细信息:
立方结构得到 pvc
生成的输出显示在*图 3.22* 中:
![A list of PVCs in the created cluster](img/B17338_03_22.jpg)
图 3.22:集群中的不同物理卷
当我们在 StatefulSet 描述(*第 128-143 行*)中请求存储时，Kubernetes 执行了特定于 Azure 磁盘的操作，以获得具有 8gb 存储空间的 Azure 磁盘。如果您复制 PVC 的名称并将其粘贴到 Azure 搜索栏中，您应该会找到创建的磁盘:
![Getting the disk linked to a PVC](img/B17338_03_23.jpg)
图 3.23:将磁盘链接到聚氯乙烯
聚氯乙烯的概念抽象了云提供商的存储细节。这允许相同的 Helm 模板在 Azure、AWS 或 GCP 上工作。在 AWS 上，它将由**弹性块存储** ( **EBS** )支持，在 GCP，它将由持久磁盘支持。
此外，请注意，可以在不使用 Helm 的情况下部署 PVC。
在本节中，将介绍使用**PersistentVolumeClaim**(**PVC**)在 Kubernetes 中存储的概念。您看到了它们是如何由 WordPress Helm 部署创建的，以及 Kubernetes 如何创建一个 Azure 磁盘来支持 MariaDB 使用的 PVC。在下一节中，您将更详细地探索 Kubernetes 上的 WordPress 应用。
### 检查 WordPress 部署
在我们分析了 PVC 之后，让我们再次查看 Helm 部署。您可以使用以下命令检查部署状态:
舵手 ls
这将返回图 3.24 所示的输出:
![Checking status of the WordPress application deployment in Helm](img/B17338_03_24.jpg)
图 3.24: WordPress 应用部署状态
我们可以使用以下命令从 Helm 中的部署获得更多信息:
舵手状态
这将返回图 3.25 所示的输出:
![Fetching further details of the WordPress deployment using the helm status command](img/B17338_03_25.jpg)
图 3.25:获取关于部署的更多细节
这表明您的图表已成功部署。它还显示了更多关于如何连接到您的网站的信息。您现在不会使用这些步骤；您将在*第 5 章“处理 AKS* 中的常见故障”中重温这些步骤，在这一节中，我们将介绍如何修复存储安装问题。现在，让我们来看看 Helm 为您创造的一切:
kubectl get all
这将产生类似于图 3.26 的输出:
![List of objects created by Helm](img/B17338_03_26.jpg)
图 3.26:Helm 创建的对象列表
如果您还没有外部 IP，请等待几分钟，然后重试该命令。
然后你可以继续连接到你的外部 IP，访问你的 WordPress 网站。*图 3.27* 是结果输出:
![Connecting to the WordPress site using the external IP](img/B17338_03_27.jpg)
图 3.27:连接外部 IP 时显示的 WordPress 站点
为了确保你不会在接下来的章节中遇到问题，让我们删除 WordPress 网站。这可以通过以下方式实现:
helm delete handsonakswp
根据设计，PVC 不会被删除。这确保了持久数据得以保留。由于没有任何持久数据，您也可以安全地删除 PVC:
kubectl 删除 pvc --所有
#### 注意
执行 **kubectl delete  - all** 时要非常小心，因为它将删除一个名称空间中的所有对象。不建议在生产集群上这样做。
在本节中，您已经使用 Helm 部署了一个完整的 WordPress 站点。您还学习了 Kubernetes 如何使用 PVCs 处理持久存储。
## 总结
在本章中，您部署了两个应用。您通过部署留言簿应用开始了这一章。在部署过程中，探索了 Pod 、复制集和部署的细节。您还使用了使用配置映射的动态配置。最后，您研究了如何使用服务将流量路由到部署的应用。
您部署的第二个应用是 WordPress 应用。您通过 Helm 包管理器部署了它。作为这个部署的一部分，使用了 PVC，您探索了它们在系统中是如何使用的，以及它们是如何链接到 Azure 上的磁盘的。
在*第 4 章，构建可扩展的应用*中，您将研究扩展应用和集群本身。您将首先了解应用的手动和自动扩展，然后了解集群本身的手动和自动扩展。最后，将解释在 Kubernetes 上更新应用的不同方式。