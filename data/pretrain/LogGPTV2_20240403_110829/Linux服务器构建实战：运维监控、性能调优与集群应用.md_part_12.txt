### 优化后的文本

---

## Page 83
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。

#### HTTP响应头示例
```
Server: Apache/2.2.14 (Unix) PHP/5.3.1 mod_perl/2.0.4 Perl/v5.10.1
HTTP/1.1 200 OK
Accept-Encoding: gzip, deflate
X-Cache: HIT from ixdba.net
Via: 1.1 varnish
X-Varnish: 1515651004 1515651001
Date: Fri, 16 Jul 2010 06:34:35 GMT
Vary: Accept-Encoding, User-Agent
Last-Modified: Mon, 28 Jul 2008 00:48:20 GMT
Content-Type: text/html
ETag: "7102d5-819f-4530ae1357d00*"
```

#### 使用curl命令请求压缩内容
首先用curl命令请求未压缩的内容：
```sh
[root@varnish-server ~]# curl -I http://www.ixdba.com/article/3e/1557.html
```

然后用curl命令请求压缩的内容：
```sh
[root@varnish-server ~]# curl -H "Accept-Encoding: gzip, deflate" -I http://www.ixdba.com/article/3e/1557.html
```

#### Varnish配置
在`vcl_hash`函数中进行如下修改以支持压缩：
```vcl
sub vcl_hash {
    if (req.http.Accept-Encoding ~ "gzip") {
        set req.hash += "gzip";
        remove req.http.Accept-Encoding;
    } else if (req.http.Accept-Encoding ~ "deflate") {
        set req.hash += "deflate";
        remove req.http.Accept-Encoding;
    }
}
```

通过上述配置，Varnish会将需要压缩的内容交给后端服务器处理。通过前后两个输出结果可以清楚地看到，压缩已经生效，说明配置成功。

---

## Page 84
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。

### 第2章：Varnish的安装、配置和管理
Varnish是一个开源的反向代理软件和HTTP加速器，与传统的Squid相比，Varnish具有性能更高、速度更快、管理方便等诸多优点。很多大型运营网站都开始尝试用Varnish来替换Squid，这促使了Varnish的迅速发展。

本章通过理论与实践经验相结合的方法，介绍了高性能HTTP加速器Varnish的安装、配置、管理和使用技巧。同时，还介绍了Varnish常用的指令以及调优技巧和经验，并通过两个实例详细讲解了Varnish的常见应用。

通过本章的学习，读者可以对Varnish的结构和特点有一个清晰的认识，并且能够熟练安装、搭建和配置一套Varnish系统。

#### 压缩测试
以下是压缩测试的HTTP响应头示例：
```
X-Cache: HIT from ixdba.net
Connection: keep-alive
Via: 1.1 varnish
Age: 5
X-Varnish: 1515651003 1515651002
Date: Fri, 16 Jul 2010 06:34:35 GMT
Content-Length: 8538
Content-Type: text/html
Content-Encoding: gzip
Vary: Accept-Encoding, User-Agent
ETag: "748b19-8197-48b7acd54cb80"
```

通过前后两个输出结果可以清楚地看到，压缩已经生效，说明配置成功。

---

## Page 85
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。

### 第3章：Memcached基础
Memcached是一个免费开源的、高性能的、具有分布式内存对象的缓存系统，用于在动态系统中减少数据库负载，进而提升系统性能。最初版本由LiveJournal的Brad Fitzpatrick在2003年开发完成。目前全世界很多用户都在使用它来构建自己的大负载网站或提高高访问网站的响应速度。

#### Memcached的工作流程
1. 检查客户端请求的数据是否在Memcache中存在，如果存在，直接把请求的数据返回。
2. 如果请求的数据不在Memcache中，就去查询数据库，把从数据库中获取的数据返回给客户端，同时把数据缓存一份到Memcache中。
3. 每次更新数据库（如更新、删除数据库的数据）的同时更新Memcache中的数据，保证Memcache中的数据和数据库中的数据一致。

#### Memcached的特征
- **协议简单**：使用基于文本行的协议，能直接通过telnet在Memcached服务器上存取数据。
- **基于libevent的事件处理**：利用libevent库进行异步事件处理。
- **内置的内存管理方式**：所有数据保存在Memcached内置的内存中，当存入的数据占满空间时，使用LRU算法自动删除不使用的缓存。
- **互不通信的Memcached之间具有分布特征**：各个Memcached服务器之间互相不通信，都是独立的存取数据，不共享任何信息。

---

## Page 86
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。

### Memcached的安装
Memcached的安装比较简单，这里稍加说明。很多平台支持Memcached，常见的有Linux、FreeBSD、Solaris、Mac OS X等。这里以CentOS为例进行说明。

#### 安装步骤
1. **安装libevent**
   ```sh
   [root@web181 ~]# wget -b http://www.monkey.org/~provos/libevent-1.4.13-stable.tar.gz
   [root@web181 ~]# tar zxf libevent-1.4.13-stable.tar.gz
   [root@web181 libevent-1.4.13-stable]# ./configure
   [root@web181 libevent-1.4.13-stable]# make && make install
   ```

2. **安装Memcached**
   ```sh
   [root@web181 ~]# wget -b http://memcached.googlecode.com/files/memcached-1.4.5.tar.gz
   [root@web181 ~]# tar zxf memcached-1.4.5.tar.gz
   [root@web181 memcached-1.4.5]# ./configure
   [root@web181 memcached-1.4.5]# make && make install
   ```

3. **启动Memcached**
   ```sh
   [root@web181 ~]# /usr/local/bin/memcached -m 32m -p 11211 -d -u root -P /var/run/memcached.pid -c 256
   ```
   如果出现找不到`libevent-1.4.so.2`文件的错误，可以通过以下方法解决：
   ```sh
   [root@web181 ~]# echo "/usr/local/lib" >> /etc/ld.so.conf
   [root@web181 ~]# ldconfig
   ```

4. **关闭Memcached**
   ```sh
   [root@web181 ~]# kill `cat /var/run/memcached.pid`
   ```

5. **安装Memcache的PHP扩展**
   ```sh
   [root@web181 ~]# wget -b http://pecl.php.net/get/memcache-2.2.5.tgz
   [root@web181 ~]# tar zxf memcache-2.2.5.tgz
   [root@web181 memcache-2.2.5]# /usr/local/php/bin/phpize
   [root@web181 memcache-2.2.5]# ./configure --enable-memcache
   [root@web181 memcache-2.2.5]# make && make install
   ```

6. **配置php.ini**
   修改`php.ini`文件，添加以下行：
   ```ini
   extension=memcache.so
   extension_dir="/usr/local/php-cgi/lib/php/extensions/no-debug-zts-20060613/"
   ```

7. **测试Memcache的PHP扩展是否安装成功**
   运行下面的PHP代码，如果输出“Hello world!”，就表示环境搭建成功。
   ```php
   <?php
   $mem = new Memcache();
   $mem->connect('127.0.0.1', 11211);
   $key = "test";
   $value = "Hello World!";
   $expires = 120;
   $mem->set($key, $value, 0, $expires);
   $val = $mem->get($key);
   echo $val;
   ?>
   ```

通过以上步骤，读者可以顺利安装和配置Memcached及其PHP扩展，并进行基本的使用测试。

---

希望这些优化后的文本更加清晰、连贯和专业。如果有任何进一步的需求或修改，请告诉我！