cat 程序的错误处理功能并不完善。问题在于，如果因为某种原因而造成其中的一个文 件无法访问，相应的诊断信息要在该连接的输出的末尾才能打印出来。当输出到屏幕时，这 种处理方法尚可以接受，但如果输出到一个文件或通过管道输出到另一个程序时，就无法接 受了。
为了更好地处理这种情况，另一个输出流以与 stdin 和 stdout 相同的方式分派给程序， 即 stderr。即使对标准输出进行了重定向，写到 stderr 中的输出通常也会显示在屏幕上。
下面我们改写 cat 程序，将其出错信息写到标准错误文件上。
#include 
/* cat:              concatenate files, version 2 */ main(int argc, char *argv[])
{
FILE *fp;
void filecopy(FILE *, FILE *);
char *prog = argv[0];              /* program name for errors */
if (argc == 1 ) /* no args; copy standard input */ filecopy(stdin, stdout);
else
while (••argc > 0)
if ((fp = fopen(*++argv, "r")) == NULL) { fprintf(stderr, "%s: can't open %s\n",
prog, *argv); exit(1);
} else {
filecopy(fp, stdout); fclose(fp);
}
if (ferror(stdout)) {
fprintf(stderr, "%s: error writing stdout\n", prog); exit(2);
}
exit(0);
}
该程序通过两种方式发出出错信息。首先，将 fprintf 函数产生的诊断信息输出到 stderr 上，因此诊断信息将会显示在屏幕上，而不是仅仅输出到管道或输出文件中。诊断信 息中包含 argv[0]中的程序名，因此，当该程序和其它程序一起运行时，可以识别错误的来 源。
其次，程序使用了标准库函数 exit，当该函数被调用时，它将终止调用程序的执行。任 何调用该程序的进程都可以获取 exit 的参数值，因此，可通过另一个将该程序作为子进程的 程序来测试该程序的执行是否成功。按照惯例，返回值 0 表示一切正常，而非 0 返回值通常 表示出现了异常情况。exit 为每个已打开的输出文件调用 fclose 函数，以将缓冲区中的所 有输出写到相应的文件中。
在主程序 main 中，语句 return expr 等价于 exit(expr)。但是，使用函数 exit 有一个优点，它可以从其它函数中调用，并且可以用类似于第 5 章中描述的模式查找程序查 找这些调用。
如果流 fp 中出现错误，则函数 ferror 返回一个非 0 值。
int ferror(FILE *fp)
尽管输出错误很少出现，但还是存在的(例如，当磁盘满时)，因此，成熟的产品程序应该检 查这种类型的错误。
函数 feof(FILE *)与 ferror 类似。如果指定的文件到达文件结尾，它将返回一个非
0 值。
int feof(FILE *fp)
在上面的小程序中，我们的目的是为了说明问题，因此并不太关心程序的退出状态，但 对于任何重要的程序来说，都应该让程序返回有意义且有用的值。
7.7 行输入和行输出
标准库提供了一个输入函数 fgets，它和前面几章中用到的函数 getline 类似。
char *fgets(char *line, int maxline, FILE *fp)
fgets 函数从  fp 指向的文件中读取下一个输入行(包括换行符)，并将它存放在字符数组
line 中，它最多可读取 maxline•1 个字符。读取的行将以'\0'结尾保存到数组中。通常情 况下，fgets 返回 line，但如果遇到了文件结尾或发生了错误，则返回 NULL(我们编写的 getline 函数返回行的长度，这个值更有用，当它为 0 时意味着已经到达了文件的结尾)。
输出函数 fputs 将一个字符串(不需要包含换行符)写入到一个文件中:
int fputs(char *line, FILE *fp)
如果发生错误，该函数将返回 EOF，否则返回一个非负值。
库函数 gets 和 puts 的功能与 fgets 和 fputs 函数类似，但它们是对 stdin 和 stdout 进行操作。有一点我们需要注意，gets 函数在读取字符串时将删除结尾的换行符('\n')， 而 puts 函数在写入字符串时将在结尾添加一个换行符。
下面的代码是标准库中 fgets 和 fputs 函数的代码，从中可以看出，这两个函数并没 有什么特别的地方。代码如下所示:
/* fgets:              get at most n chars from iop */ char *fgets(char *s, int n, FILE *iop)
{
register int c; register char *cs;
cs = s;
while (••n > 0 && (c = getc(iop)) != EOF) if ((*cs++ = c) == '\n')
break;
*cs = '\0';
return (c == EOF && cs == s) ? NULL : s;
}
/* fputs:              put string s on file iop */ int fputs(char *s, FILE *iop)
{
int c;
while (c = *s++) putc(c, iop);
return ferror(iop) ? EOF : 0;
}
ANSI 标准规定，ferror 在发生错误时返回非 0 值，而 fputs 在发生错误时返回 EOF， 其它情况返回一个非负值。
使用 fgets 函数很容易实现 getline 函数:
/* getline:              read a line, return length */ int getline(char *line, int max)
{
if (fgets(line, max, stdin) == NULL) return 0;
else
return strlen(line);
}
练习 7•6             编写一个程序，比较两个文件并打印它们第一个不相同的行。
练习 7•7 修改第 5 章的模式查找程序，使它从一个命名文件的集合中读取输入(有文 件名参数时)，如果没有文件名参数，则从标准输入中读取输入。当发现一个匹配行时，是否 应该将相应的文件名打印出来?
练习 7•8 编写一个程序，以打印一个文件集合，每个文件从新的一页开始打印，并且 打印每个文件相应的标题和页数。
7.8 其它函数
标准库提供了很多功能各异的函数。本节将对其中特别有用的函数做一个简要的概述。 更详细的信息以及其它许多没有介绍的函数请参见附录 B。
7.8.1.             字符串操作函数
前面已经提到过字符串函数 strlen、strcpy、strcat 和 strcmp，它们都在头文件
中定义。在下面的各个函数中，s 与 t 为 char *类型，c 与 n 为 int 类型。
strc
a
t(s
,
t
)            
 将 t 指向的字符串连接到 s 指向的字符串的末尾
strn
c
at(
s
,
t
,
n
)            
 将 t 指向的字符串中前 n 个字符连接到 s 指向的字符串的末尾
strc
m
p(s
,
t
)            
 根据    s 指向的字符串小于(st)t
指向的字符串的不同情况，分别返回负整数、0 或正整数
strn
c
mp(
s
,
t
,
n
)            
 同 strcmp 相同，但只在前 n 个字符中比较
strc
p
y(s
,
t
)            
 将 t 指向的字符串复制到 s 指向的位置
strn
c
py(
s
,
t
,
n
)            
 将 t 指向的字符串中前 n 个字符复制到 s 指向的位置
strl
e
n(s
)            
 返回 s 指向的字符串的长度
strc
h
r(s
,
c