1− DarkSideγ is the conditional probability that (I0, i, J0,i) is not in
the set {(I1, i, J1,i),(I2, i, J2,i), . . . ,(Iqs , i, Jqs ,i)}. There are exactly
γ choices of α ∈ {1, 2, . . . , qs} for which Iα = I0, and each of these
has probability 1 − 1/t of Jα ,i missing J0,i. These probabilities are
independent, so 1 − DarkSideγ = (1 − 1/t)γ .
The conditional probability that S0 ⊂ S1 ∪ · · · ∪ Sqs , again given
that the above number is γ, is the kth power of the DarkSideγ
quantity defined above. Hence the total probability ϵ that S0 ⊂
Iα = I0 is γ with probability(cid:0)qs
(cid:1)(1 − 1/2h)qs−γ /2hγ .
γ
(cid:19)qs−γ
S1 ∪ · · · ∪ Sqs is
(cid:18)

γ
DarkSidek
γ
(cid:18)
1 −
1 − 1
t
=
γ
(cid:18)qs
(cid:19)(cid:18)
(cid:19)γ(cid:19)k(cid:18)qs
γ
(cid:19)(cid:18)
1 − 1
2h
1 − 1
2h
γ
1
2hγ
(cid:19)qs−γ
1
2hγ
.
For example, if t = 214, k = 22, h = 64, and qs = 264, then
ϵ ≈ 2−256.01 (with most of the sum coming from γ between 7 and
13). The set S0 thus has probability 2−256.01 of being covered by
264 sets S1, . . . , Sqs . (In the SPHINCS+ context, a message digest
chosen by the attacker has probability 2−256.01 of selecting positions
covered by 264 previous signatures.)
Hence, for any classical adversary which makes qh queries to
Hmsg the success probability is
1 − 1
(qh + 1)
1 −
(cid:18)
(cid:18)
(cid:19)γ(cid:19)k(cid:18)qs
(cid:19)(cid:18)
t
γ
γ
(cid:19)qs−γ
1 − 1
2h
1
2hγ
.
For random Hmsg the task of finding a message digest that is covered
by the previous signatures is search in unstructured data. Hence,
we can reduce average search as defined in Definition 27 to this
task. This can be shown along the lines of the proofs in Appendix B.
This leads to a success probability for quantum adversaries of
(cid:18)
(cid:19)γ(cid:19)k(cid:18)qs
(cid:19)(cid:18)
1 −
1 − 1
t
1 − 1
2h
γ
(cid:19)qs−γ
(cid:33)
.
1
2hγ
(cid:32)
(qh + 1)2
(cid:18)
O
γ
For computations, note that the O is small, and that (1 − 1/t)γ is
well approximated by 1 − γ/t.
Security Level of a Given Parameter Set. If we take the above
success probabilities for generic attacks and plug them into The-
orem 10, Theorem 15, and Theorem 17 we get a bound on the
success probability of SPHINCS+-robust against generic attacks of
classical and quantum adversaries. The final bounds are the same
for SPHINCS+-simple up to small constant factors, hidden by the
O-notation, given that our conjectures are true. Let qs denote the
number of adversarial signature queries. For classical adversaries
that make no more than qh queries to the cryptographic hash func-
tion used, this leads to
InSeceu-cma(cid:0)SPHINCS+; qh
+ InSecitsr(cid:0)Hmsg; qh
(cid:1) +
(cid:32)
(cid:18)
(cid:18)

= O
qh
2n + qh
γ
1 −
1 − 1
t
(cid:33)
.
qh + 1
2n
1
2hγ
γ
2n +
(cid:1) ≤ qh + 1
qh + 1
2n
(cid:19)qs−γ
(cid:19)γ(cid:19)k(cid:18)qs
(cid:19)(cid:18)
2n + 3 · qh + 1
qh + 1
2n +
1 − 1
2h
(cid:1) ≤ O(qh + 1)2
(cid:19)γ(cid:19)k(cid:18)qs
(cid:19)qs−γ
(cid:19)(cid:18)
+3·O(qh + 1)2
2n
1 − 1
2h
2n
+
+
γ
Similarly, for quantum adversaries that make no more than qh
queries to the cryptographic hash function used, this leads to
O(qh + 1)2
InSecpq-eu-cma(cid:0)SPHINCS+; qh
+InSecpq-itsr(cid:0)Hmsg; qh
(cid:1)+
(cid:32)
(cid:18)
(cid:18)
2
2n
1 − 1
= O
1 −
2
qh
2n + qh
t
γ
O(qh + 1)2
2n
O(qh + 1)2
(cid:33)
.
2n
1
2hγ
To compute the security level also known as bit security one sets
this bound on the success probability to equal 1 and solves for qh.
6 PARAMETER SELECTION AND SPHINCS+
INSTANCES
What is still missing to obtain concrete signature schemes from the
SPHINCS+ framework, is choosing parameters and instantiating
the tweakable hash functions. We explain our approach to address-
ing these two aspects in this section and then give examples of
concrete instantiations in Section 7.
Selecting parameters. Our approach to selecting the hyper-tree
parameters h and d, the FORS parameters b and k, and the Win-
ternitz parameter w is to fix the maximum number of signatures
and the target security level and then search through a large space
of possible parameter sets. For each of those parameter sets we
compute the probability ϵ that an attacker-provided message can
be signed with the information known about FORS secret keys after
the maximum number of messages has been signed (see Section 5).
For each of the parameter sets with a probability ϵ satisfying the
desired security level, we accept the parameter set as a possibly
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2139interesting one and print the parameters together with the resulting
signature size and an estimate of performance based on the total
number of hash calls. In a post-processing step we use standard
command-line tools to sort the output according to size or speed
and pick the parameter set with the most favorable trade-off for the
given application. The complete Python script we use to explore the
parameter space is available at https://sphincs.org/software.html.
Instantiating tweakable hash functions. Finally, we propose a
total of 6 different instantiations of the tweakable hash functions.
Concretely, we are using Construction 6 (in the following referred
to as robust) and Construction 7 (in the following referred to as
simple). For each of those we recommend three different instanti-
ations of the underlying hash functions H1 and H2 (for Construc-
tion 6) and H (for Construction 7): SHA-256 [38], SHAKE256 [39],
and Haraka [34]. Note that the instantiations using Haraka cannot
reach the same security levels that can be reached with SHA-256
or SHAKE256. This is due to a generic meet-in-the-middle attack
computing collisions in the internal state, which has (classical)
complexity 2128. For a full specification of the instantiations of
tweakable hash functions see the full version.
7 PERFORMANCE AND COMPARISON
In order to illustrate the performance of signature schemes de-
rived from the SPHINCS+ framework we now give instantiations
targeting the security level of other symmetric-crypto-based sig-
nature schemes. Specifically, we derive signature schemes to com-
pare to the SPHINCS-256 scheme [9], to the NIST round-1 can-
didate Gravity-SPHINCS [6], and to the NIST round-2 candidate
Picnic [17]. Generally all these stateless signature schemes based
only on symmetric primitives do not reach the performance of, e.g.,
lattice-based signature schemes like Dilithium [22, 23], Falcon [25],
or qTESLA [3, 12]. They are mainly interesting for applications with-
out strong latency requirements, such as offline code signing or
certificate signing. This makes signature size (and only to a smaller
extent public-key size, signing speed, and verification speed) the
most important optimization target. In the comparisons, we thus
primarily focus on finding parameter sets with similar signature
size and then compare computational performance. Note that for
hash-based signatures, a rule of thumb is that a linear decrease in
signature size comes with an exponential decrease in signing speed.
See Table 3 for details on sizes and cycle counts.
Comparison to SPHINCS-256. SPHINCS-256 was the first signa-
ture scheme advertising a post-quantum security level of 128 bits.
This claim is derived from an analysis of the security of individual
building blocks and a theorem stating that the whole scheme is
secure as long as each of the building blocks is secure. The state-
ment ignores a significant tightness gap in the proof. Part of this
tightness gap was later shown to be more than just a proof artifact,
but actually due to attacks that compute a preimage to one out of
many hashes inside the SPHINCS-256 tree [33]. As a consequence,
the actual security of SPHINCS-256 is less than 190 bits classically
and 95 bits post-quantum. SPHINCS+ includes protections against
such multi-target attacks and can thus achieve this security level
with n = 192. The hash functions H and F used in SPHINCS-256 are
built from the 512-bit ChaCha12 permutation [8] in a sponge mode
with capacity 256 bits. This construction is susceptible to the same
kind of meet-in-the-middle collision attacks with complexity 2128
that apply to Haraka. For the comparison to SPHINCS-256, we thus
choose robust tweakable hash functions derived from Haraka. It
should be noted that SPHINCS+ in this case makes slightly stronger
assumptions as Construction 6 requires a proof in the QROM to
achieve compact public parameters (see Section 2.3 for a discussion
of what slightly means in this context). Putting all this together,
with parameters n = 192, h = 51, d = 17, b = 7, k = 45, w = 16
we obtain a signature scheme, which has signatures that are 25%
shorter than SPHINCS-256 signatures, has a signing routine that
is 1.7× faster than SPHINCS-256 signing and, like SPHINCS-256,
guarantees security for up to 250 signatures under the same key.
Comparison to Gravity-SPHINCS. The second natural compar-
ison is with the NIST round-1 candidate Gravity-SPHINCS [6, 7].
Gravity-SPHINCS aims for a simpler scheme and increased speed
at the cost of basing security on collision resistance. Like SPHINCS-
256, it does not build in countermeasures against multi-target at-
tacks. So the best attacks against Gravity-SPHINCS—which rely on
computing a preimage for one out of many targets—are consider-
ably more efficient than computing a preimage in the underlying
hash function. Compared to SPHINCS+ it does not make use of
a ROM assumption which SPHINCS+ needs even for the robust
parameters (again, note that the assumption here is only necessary
to prove the public parameter compression secure). A conservative
instantiation of SPHINCS+, which achieves a higher security level
both in terms of what is proven and against best known attacks
uses parameters n = 192, h = 66, d = 22, b = 8, k = 33, w = 16
with robust tweakable hash functions derived from Haraka (which
is also used in Gravity-SPHINCS). As Table 3 shows, this instan-
tiation has slightly larger signatures and slightly slower signing
speed than Gravity-SPHINCS. However, this is due to a “caching
mechanism” in Gravity-SPHINCS that is orthogonal to all design
decisions discussed in this paper: Gravity-SPHINCS uses a higher
top layer in the tree, computes this layer only once during key
generation and stores it in the secret key. This design choice results
in somewhat smaller signatures and faster signing at the cost of
increased code complexity, much longer key-generation time and
much bigger secret-key size.
More similar in spirit to Gravity-SPHINCS is SPHINCS+ with the
simple instantiation of tweakable hash functions, which are essen-
tially exactly what Gravity-SPHINCS uses plus multi-target protec-
tion. This multi-target protection allows us to choose a smaller value
of n to achieve the same level of security against known attacks
(requiring second preimages) as Gravity-SPHINCS, but a lower level
of security when following the reductions from collision resistance.
With parameters n = 192, h = 64, d = 16, b = 7, k = 49, w = 16 and
the simple construction for tweakable hash functions SPHINCS+
achieves smaller signatures, only slightly slower signing speed, and
(because it does not employ the caching mechanism) much faster
key generation and smaller secret keys. Note that generally Gravity-
SPHINCS has faster verification than SPHINCS+. This is because