:   您可以在蓝图中指定自定义文件系统配置，因此创建带有特定磁盘布局的镜像，而不是使用默认的布局。通过使用蓝图中的非默认布局配置，您可以受益于：
    ::: itemizedlist
    -   安全基准合规性
    -   防止磁盘不足错误
    -   performance
    -   与现有设置的一致性
        在蓝图中自定义文件系统配置：
        ``` screen
        [[customizations.filesystem]]
        mountpoint = "MOUNTPOINT"
        size = MINIMUM-PARTITION-SIZE
        ```
        支持以下 `挂载点`{.literal} 及其子目录：
        ::: itemizedlist
        -   `/`{.literal} - root 挂载点
        -   `/var`{.literal}
        -   `/home`{.literal}
        -   `/opt`{.literal}
        -   `/srv`{.literal}
        -   `/usr`{.literal}
        -   `/app`{.literal}
        -   `/data`{.literal}
            ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
            ### 注意 {.title}
            仅在 RHEL 8.5 和 RHEL 9.0 发行版中使用 CLI
            支持自定义挂载点。在早期发行本中，您只能将 `root`{.literal}
            分区指定为挂载点，并将 `size`{.literal}
            参数指定为镜像大小的别名。
            :::
            如果您有多个分区，您可以在 LVM
            中使用自定义文件系统分区创建镜像，并在运行时重新定义这些分区大小。为此，您可以在蓝图中指定自定义的文件系统配置，然后使用所需的磁盘布局创建镜像。默认文件系统布局保持不变 -
            如果您使用没有文件系统自定义的普通镜像，则
            `cloud-init`{.literal} 会调整 root 分区。
            在蓝图中添加文件系统自定义后，该文件系统将转换为 LVM 分区。
            当您定义 [*MINIMUM-PARTITION-SIZE*]{.emphasis}
            时，没有默认大小格式。支持以下值和单位： kB 到 TB，KiB 到
            TiB。例如，您可以以字节为单位定义挂载点大小：
            ``` screen
            [[customizations.filesystem]]
            mountpoint = "/var"
            size = 1073741824
            ```
            您还可以使用单元定义挂载点大小，例如：
            ``` screen
            [[customizations.filesystem]]
            mountpoint = "/opt"
            size = "20 GiB"
            ```
        :::
    :::
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#packages-installed-by-default_creating-system-images-with-composer-command-line-interface}安装的软件包 {.title}
:::
当使用镜像构建器创建系统镜像时，系统默认安装一组基础软件包。软件包的基础列表是
`comps core`{.literal} 组的成员。默认情况下，Image Builder 使用
`core dnf`{.literal} 组。
::: table
[]{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#idm140643310218816}
**表 4.1. 支持创建镜像类型的默认软件包**
::: table-contents
  镜像类型           默认软件包

  ami                checkpolicy, chrony, cloud-init, cloud-utils-growpart, \@Core, dhcp-client, gdisk, insights-client, kernel, langpacks-en, net-tools, NetworkManager, redhat-release, redhat-release-eula, rng-tools, rsync, selinux-policy-targeted, tar, yum-utils
  openstack          \@Core, langpacks-en
  qcow2              \@Core, chrony, dnf, kernel, dnf, nfs-utils, dnf-utils, cloud-init, python3-jsonschema, qemu-guest-agent, cloud-utils-growpart, dracut-norescue, tar, tcpdump, rsync, dnf-plugin-spacewalk, rhn-client-tools, rhnlib, rhnsd, rhn-setup, NetworkManager, dhcp-client, cockpit-ws, cockpit-system, subscription-manager-cockpit, redhat-release, redhat-release-eula, rng-tools, insights-client
  rhel-edge-commit   glibc, glibc-minimal-langpack, nss-altfiles, kernel, dracut-config-generic, dracut-network, basesystem, bash, platform-python,shadow-utils, chrony, setup, shadow-utils, sudo, systemd, coreutils, util-linux, curl, vim-minimal, rpm, rpm-ostree, polkit, lvm2, cryptsetup, pinentry, e2fsprogs, dosfstools, keyutils, gnupg2, attr, xz, gzip, firewalld, iptables, NetworkManager, NetworkManager-wifi, NetworkManager-wwan, wpa_supplicant, dnsmasq, traceroute, hostname, iproute, iputils, openssh-clients, procps-ng, rootfiles, openssh-server, passwd, policycoreutils, policycoreutils-python-utils, selinux-policy-targeted, setools-console, less, tar, rsync, fwupd, usbguard, bash-completion, tmux, ima-evm-utils, audit, rng-tools, podman, container-selinux, skopeo, criu, slirp4netns, fuse-overlayfs, clevis, clevis-dracut, clevis-luks, greenboot, greenboot-grub2, greenboot-rpm-ostree-grub2, greenboot-reboot, greenboot-status
  tar                policycoreutils, selinux-policy-targeted
  vhd                \@Core, langpacks-en
  vmdk               \@core, chrony, firewalld, kernel, langpacks-en, open-vm-tools, selinux-policy-targeted
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
当您在蓝图中添加其他组件时，您必须确保添加的组件中的软件包不会与任何其他软件包组件冲突，否则系统将无法解决依赖项问题。因此，您无法创建自定义镜像。
:::
::: itemizedlist
**其他资源**
-   [镜像构建器描述](#composer-description_composing-a-customized-rhel-system-image.html#composer-output-formats_composer-description "镜像构建器输出格式"){.link}
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#services-enabled-by-default_creating-system-images-with-composer-command-line-interface}已启用的服务 {.title}
:::
当您配置自定义镜像时，启用的服务是您运行 `osbuild-composer`{.literal} 的
RHEL 版本的默认服务，另外还会为特定镜像类型启用服务。
例如，`.ami`{.literal} 镜像类型启用服务
`sshd`{.literal}、`chronyd`{.literal} 和
`cloud-init`{.literal}，如果没有这些服务，则自定义镜像不会引导。
::: table
[]{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#idm140643319109424}
**表 4.2. 启用服务来支持镜像类型创建**
::: table-contents
  镜像类型           已启用的服务
  ------------------ ---------------------------------------------------------------------------------
  ami                sshd, cloud-init, cloud-init-local, cloud-config, cloud-final
  openstack          sshd, cloud-init, cloud-init-local, cloud-config, cloud-final
  qcow2              cloud-init
  rhel-edge-commit   默认没有启用任何额外服务
  tar                默认没有启用任何额外服务
  vhd                sshd, chronyd, waagent, cloud-init, cloud-init-local, cloud-config, cloud-final
  vmdk               sshd, chronyd, vmtoolsd
:::
:::
备注：您可以自定义在系统引导过程中要启用的服务。但是，对于默认启用了服务的映像类型，自定义不会覆盖此功能。
::: itemizedlist
**其他资源**
-   [支持的镜像自定义](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#image-customizations_creating-system-images-with-composer-command-line-interface "支持的镜像自定义"){.link}
:::
:::
:::
[]{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html}
::: chapter
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image}第 5 章 使用 Image Builder Web 控制台界面创建系统镜像 {.title}
:::
镜像构建器是创建自定义系统镜像的工具。要控制 Image Builder
并创建自定义系统镜像，您可以使用 Web 控制台界面。请注意,
[命令行界面](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html "第 4 章 使用镜像构建器命令行界面创建系统镜像"){.link}
目前为首选，因为它提供了更多的功能。
::: section
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#accessing-composer-gui-in-the-rhel-8-web-console_creating-system-images-with-composer-web-console-interface}在 RHEL web 控制台中访问镜像构建器 GUI {.title}
:::
RHEL web 控制台的 [**cockpit-composer**]{.strong}
插件使用户能够管理镜像构建器蓝图，以及带有图形界面的compose。请注意,控制镜像构建器的首选方法是使用命令行界面。
::: itemizedlist
**先决条件**
-   您必须有对该系统的根权限。
:::
::: orderedlist
**流程**
1.  在安装了镜像构建器的系统上，在 web 浏览器中打开
    `https://localhost:9090/`{.literal}。
    有关如何远程访问镜像构建器的更多信息，请参阅 [[*使用 RHEL web
    控制台管理系统*]{.emphasis}](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_systems_using_the_rhel_8_web_console){.link}
    文档。
2.  使用系统中有足够权限的用户帐户登录到 web 控制台。
3.  要显示镜像构建器控制，请点击位于窗口左上角的
    `Image Builder`{.literal} 图标。
    Image Builder 视图会打开，它会列出现有的蓝图。
:::
::: itemizedlist
**其他资源**
-   [使用镜像构建器命令行界面创建系统镜像](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html "第 4 章 使用镜像构建器命令行界面创建系统镜像"){.link}
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#creating-a-composer-blueprint-in-the-web-console-interface_creating-system-images-with-composer-web-console-interface}在 web 控制台界面中创建 Image Builder 蓝图 {.title}
:::
要描述自定义的系统镜像，请首先创建一个蓝图。
::: itemizedlist
**先决条件**
-   在浏览器中打开了 RHEL web 控制台的镜像构建器界面。
:::
::: orderedlist
**流程**
1.  点击右上角的 [Create Blueprint]{.guibutton}。
    此时会出现一个蓝图名称和描述字段。
2.  填写蓝图名称及其描述，然后点击 [Create]{.guibutton}。
    屏幕更改为蓝图编辑模式。
3.  添加您要包含在系统镜像中的组件：
    ::: informalexample
    ::: orderedlist
    1.  在左侧，在 `Available Components`{.literal}
        字段中输入所有或部分组件的名称，然后按 [Enter]{.guibutton}。
        搜索会被添加到文本条目字段下的过滤器列表中，以下组件列表将缩减为与搜索匹配的组件列表。
        如果组件列表过长，以同样的方式添加进一步的搜索词。
    2.  组件列表会进行分页。要移动到其他结果页面，请使用组件列表上方的箭头和条目字段。
    3.  点击要用来显示其详情的组件名称。右侧窗格中会填充组件的详细信息，如组件的版本和依赖项。
    4.  在 `Component Options`{.literal} 框中，使用
        `Version Release`{.literal} 下拉菜单选择要使用的版本。
    5.  点击左上角的 [Add]{.guibutton}。
    6.  如果您错误地添加了一个组件，删除它，点 [...​]{.guibutton}
        按钮（位于右侧窗格中的条目右侧），然后在菜单中选择
        `Remove`{.literal}。
    :::
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果您不想为某些组件选择版本，您可以通过点击组件列表右侧的
    [+]{.guibutton} 按钮来跳过组件详情屏幕和版本选择。
    :::
    :::
4.  要保存蓝图，请点击右上角的
    [Commit]{.guibutton}。弹出一个包含更改摘要的对话框。点
    [Commit]{.guibutton}。
    右侧的一个小弹窗会告知您保存进度和结果。
5.  要退出编辑屏幕，请单击左上角的 `Back to Blueprints`{.literal}。
    Image Builder 视图会打开，它会列出现有的蓝图。
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#editing-a-composer-blueprint-in-the-web-console-interface_creating-system-images-with-composer-web-console-interface}在 web 控制台界面中编辑 Image Builder 蓝图 {.title}
:::
要更改自定义系统镜像的规范，请编辑对应的蓝图。
::: itemizedlist
**先决条件**
-   在浏览器中打开了 RHEL web 控制台的镜像构建器界面。
-   一个蓝图已存在。
:::
::: orderedlist
**流程**
1.  通过在左上角的搜索框中输入名称或部分名称来找到您要编辑的蓝图，然后按
    [Enter]{.guibutton}。
    搜索会被添加到文本条目字段下的过滤器列表中，以下蓝图列表会缩减成与搜索匹配的列表。
    如果蓝图列表太长，以同样的的方式添加进一步的搜索。
2.  在蓝图的右侧，按属于该蓝图的 [Edit Blueprint]{.guibutton} 按钮。
    蓝图编辑屏幕会显示。
3.  点击右窗格中最右边条目处的 [⫶]{.guibutton} 按钮，并在菜单中选择
    `Remove`{.literal} 来删除不需要的组件。
4.  更改现有组件的版本：
    ::: orderedlist
    1.  在蓝图组件搜索字段中，在标题 `Blueprint Components`{.literal}
        下的字段中输入组件名称或部分名称，然后按 [Enter]{.guibutton}。
        搜索会被添加到文本条目字段下的过滤器列表中，以下组件列表将缩减为与搜索匹配的组件列表。
        如果组件列表过长，以同样的方式添加进一步的搜索词。
    2.  点击组件条目最右侧的 [⫶]{.guibutton} 按钮，并在菜单中选择
        `View`{.literal}。
        在右窗格中打开组件详情屏幕。
    3.  在 `Version Release`{.literal}
        下拉菜单中选择所需的版本，并点击右上角的 [Apply
        Change]{.guibutton}。
        保存更改，右侧窗格返回到列出蓝图组件。
    :::
5.  添加新组件：
    ::: orderedlist
    1.  在左侧，在标题 `Available Components`{.literal}
        下输入组件名称或部分名称，然后按 [Enter ]{.guibutton}。
        搜索会被添加到文本条目字段下的过滤器列表中，以下组件列表将缩减为与搜索匹配的组件列表。
        如果组件列表过长，以同样的方式添加进一步的搜索词。
    2.  组件列表会进行分页。要移动到其他结果页面，请使用组件列表上方的箭头和条目字段。
    3.  点击要用来显示其详情的组件名称。右侧窗格中会填充组件的详细信息，如组件的版本和依赖项。
    4.  通过 `Version Release`{.literal} 下拉菜单，在
        `Component Options`{.literal} 框中选择您要使用的版本。
    5.  点击右上角的 [Add]{.guibutton}。
    6.  如果您错误地添加了一个组件，请点击右侧窗格中最右边条目的
        [⫶]{.guibutton} 按钮，并在菜单中选择
        `Remove`{.literal}来删除它。
        ::: informalexample
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        如果您不想为某些组件选择版本，您可以通过点击组件列表右侧的
        [+]{.guibutton} 按钮来跳过组件详情屏幕和版本选择。
        :::
        :::
    :::
6.  提交带有您的更改的蓝图的新版本：
    ::: orderedlist
    1.  点击右上角的 [Commit]{.guibutton} 按钮。
        此时会出现一个带有您更改小结的弹出窗口。
    2.  点 [Commit]{.guibutton} 检查您的更改并进行确认。
        右侧的一个小弹出会告诉您保存的进程和结果。创建了新版本的蓝图。
    3.  在左上角，单击 [Back to Blueprints]{.guibutton} 退出编辑屏幕。
        Image Builder 视图会打开，它会列出现有的蓝图。
    :::
:::
:::