title:Billion-Gate Secure Computation with Malicious Adversaries
author:Benjamin Kreuter and
Abhi Shelat and
Chih-Hao Shen
Billion-Gate Secure Computation with Malicious Adversaries
Benjamin Kreuter
PI:EMAIL
University of Virginia
abhi shelat
PI:EMAIL
University of Virginia
Chih-hao Shen
PI:EMAIL
University of Virginia
Abstract
The goal of this paper is to assess the feasibility of
two-party secure computation in the presence of a ma-
licious adversary. Prior work has shown the feasibil-
ity of billion-gate circuits in the semi-honest model, but
only the 35k-gate AES circuit in the malicious model,
in part because security in the malicious model is much
harder to achieve. We show that by incorporating the
best known techniques and parallelizing almost all steps
of the resulting protocol, evaluating billion-gate circuits
is feasible in the malicious model. Our results are in
the standard model (i.e., no common reference strings
or PKIs) and, in contrast to prior work, we do not use the
random oracle model which has well-established theoret-
ical shortcomings.
1
Introduction
Protocols for secure computation allow two or more mu-
tually distrustful parties to collaborate and compute some
function on each other’s inputs, with privacy and correct-
ness guarantees. Andrew Yao showed that secure two-
party protocols can be constructed for any computable
function [33]. Yao’s protocol involves representing the
function as a boolean circuit and having one party (called
the generator) encrypt the circuit in such a way that it
can be selectively decrypted by the other party (called
the evaluator) to compute the output, a process called
garbling. In particular, oblivious transfers are used for
the evaluator to obtain a subset of the decryption keys
that are needed to compute the output of the function.
Yao’s protocol is of great practical signiﬁcance.
In
many real-world situations, the inputs to a function may
be too valuable or sensitive to share. Huang et al. ex-
plored the use of secure computation for biometric iden-
tiﬁcation [14] in national security applications, in which
it is desirable for individual genetic data to be kept pri-
vate but still checked against a classiﬁed list. In a similar
security application, Osadchy et al. described how face
recognition could be performed in a privacy-preserving
manner [29]. The more general case of multiparty com-
putation has already seen real-world use in computing
market clearing prices in Denmark [2].
Yao’s original protocol ensures the privacy of each
party’s input and the correctness of the output under the
semi-honest model, in which both parties follow the pro-
tocol honestly. This model has been the basis for sev-
eral scalable secure computation systems [4, 10, 12, 13,
17, 22, 26]. It is conceivable, however, that one of the
parties may deviate from the protocol in an attempt to
violate privacy or correctness. Bidders may attempt to
manipulate the auction output in their favor; spies may
attempt to obtain sensitive information; and a computer
being used for secure computation may be infected with
malware. Securing against malicious participants, who
may deviate arbitrarily from pre-agreed instructions, in
an efﬁcient manner is of more practical importance.
There have been several attempts on practical systems
with security against active, malicious adversaries. Lin-
dell and Pinkas presented an approach based on garbled
circuits that uses the cut-and-choose technique [23], with
an implementation of this system having been given by
Pinkas et al. [30]. Nielsen et al. presented the LEGO+
system [28], which uses efﬁcient oblivious transfers and
authenticated bits to enforce honest behaviors from par-
ticipants. shelat and Shen proposed a hybrid approach
that integrates sigma protocols into the cut-and-choose
technique [32]. The protocol compiler presented by
Ishai, Prabhakaran, and Sahai [16] also uses an approach
based on oblivious transfer, and was implemented by
Lindell, Oxman, and Pinkas [21]. In all these cases, AES
was used as a benchmark for performance tests.
Protocols for general multiparty computation with se-
curity against a malicious majority have also been pre-
sented. Canetti et al. gave a construction of a uni-
versally composable protocol in the common reference
string model [5]. The protocol compiler of Ishai et al.,
mentioned above, can be used to construct a multiparty
protocol with security against a dishonest majority in the
UC model [16]. Bendlin et al. showed a construction
based on homomorphic encryption [1], which was im-
proved upon by Damg˚ard et al. [7]; these protocols were
also proved secure in the UC model, and thus require ad-
ditional setup assumptions. The protocol of Damg˚ard et
al. (dubbed “SPDZ” and pronounced “speedz”) is based
on a preprocessing model, which improves the amortized
performance. Damg˚ard et al. presented an implementa-
tion of their protocol, which could evaluate the function
(x × y) + z in about 3 seconds with a 128 bit security
level, but with an amortized time of a few milliseconds.
This paper presents a scalable two-party secure com-
putation system which guarantees privacy and correct-
ness in the presence of a malicious party. The system
we present can handle circuits with hundreds of millions
or even billions of gates, while requiring relatively mod-
est computing resources. Our system follows the Fair-
play framework, allowing general purpose secure com-
putation starting from a high level description of a func-
tion. We present a system with numerous technical ad-
vantages over the Fairplay system, both in our compiler
and in the secure computation protocol. Unlike previ-
ous work, we do not rely solely on AES circuits as our
benchmark; our goal is to evaluate circuits that are orders
of magnitude larger than AES in the malicious model,
and we use AES only as a comparison with other work.
We prove the security of our protocol assuming circular
2-correlation robust hash functions and the hardness of
the elliptic curve discrete logarithm problem, and require
neither additional setup assumptions nor the random or-
acle model.
2 Contributions
Our principal contribution is to build a high perfor-
mance secure two-party computation system that inte-
grates state-of-the-art techniques for dealing with ma-
licious adversaries efﬁciently. Although some of these
techniques have been reported individually, we are not
aware of any attempt to incorporate them all into one sys-
tem, while ensuring that a security proof can still be writ-
ten for that system. Even though some of the techniques
are claimed to be compatible, it is not until everything is
put together and someone has gone through all the details
can a system as a whole be said to be provably secure.
System Framework We start by using Yao’s garbled
circuit [33] protocol for securely computing functions
in the presence of semi-honest adversaries, and she-
lat and Shen’s cut-and-choose-based transformation [32]
that converts Yao’s garbled circuit protocol into one that
is secure against malicious adversaries.
We then modify the above to use Ishai et al.’s obliv-
ious transfer extension [15] that has efﬁcient amortized
computation time for oblivious transfers secure against
malicious adversaries, and Lindell and Pinkas’ random
combination technique [23] that defends against selec-
tive failure attacks. We implement Kiraz’s randomized
circuit technique [18] that guarantees that the generator
gets either no output or an authentic output, i.e., the gen-
erator cannot be tricked into accepting arbitrary output.
Optimization Techniques For garbled circuit gener-
ation and evaluation, we incorporate Kolesnikov and
Schneider’s free-XOR technique that minimizes the
computation and communication cost for XOR gates in
a circuit [20]. We also adopt Pinkas et al.’s garbled-row-
reduction technique that reduces the communication cost
for k-fan-in non-XOR gates by 1/2k [30], which means
at least a 25% communication saving in our system since
we only have gates of 1-fan-in or 2-fan-in. Finally, we
implement Goyal et al.’s technique for reducing commu-
nication as follows: during the cut-and-choose step, the
check circuits are given to the evaluator by revealing the
random seeds used to produce them rather than the check
circuits themselves [11]. Combined with the 60%-40%
check-evaluation ratio proposed by shelat and Shen [32],
this technique provides a near 60% saving in communi-
cation. As far as we know, although these techniques ex-
ist individually, ours is the ﬁrst system to incorporate all
of these mutually compatible state-of-the-art techniques.
Circuit-Level Parallelism The most important new
technique that we use is to exploit the embarrassingly
parallel nature of shelat and Shen’s protocol for achiev-
ing security in the malicious model. Exploiting this,
however, requires careful engineering in order to achieve
good performance while maintaining security. We paral-
lelize all computation-intensive operations such as obliv-
ious transfers or circuit construction by splitting the
generator-evaluator pair into hundreds of slave pairs.
Each of the pairs works on an independently generated
copy of the circuit in a parallel but synchronized man-
ner as synchronization is required for shelat and Shen’s
protocol [32] to be secure.
Computation Complexity For the computation time
of a secure computation, there are two main contribut-
ing factors: the input processing time I (due to oblivi-
ous transfers) and the circuit processing time C (due to
garbled circuit construction and evaluation). In the semi-
honest model, the system’s computation time is simply
I +C. Security in the malicious model, however, requires
several extra checks. In the ﬁrst instantiation of our sys-
tem, through heavy use of circuit-level parallelism, our
system needs roughly I + 2C to compute hundreds of
copies of the circuit. Thus when the circuit size is suf-
ﬁciently larger than the input size, our system (secure in
the malicious model) needs roughly twice as much com-
putation time as that needed by the original Yao proto-
col (secure in the semi-honest model). This is a tremen-
dous improvement over prior work [30,32] which needed
100x more time than the semi-honest Yao. In the second
instantiation of our scheme, we are able to achieve I +C
computation time, albeit at the cost of moderately more
communication overhead.
Large Circuits
In the Fairplay system, a garbled cir-
cuit is fully constructed before being sent over a net-
work for the other party to evaluate. This approach is
particularly problematic when hundreds of copies of a
garbled circuit are needed against malicious adversaries.
Huang et al. [13] pointed out that keeping the whole gar-
bled circuit in memory is unnecessary, and that instead,
the generation and evaluation of garbled gates could be
conducted in a “pipelined” manner. Consequently, not
only do both parties spend less time idling, only a small
number of garbled gates need to reside in memory at one
time, even when dealing with large circuits. However,
this pipelining idea does not work trivially with other op-
timization techniques for the following two reasons:
• The cut-and-choose technique requires the gener-
ator to ﬁnish constructing circuits before the coin
ﬂipping (which is used to determine check circuits
and evaluation circuits), but the evaluator cannot
start checking or evaluating before the coin ﬂipping.
A naive approach would ask the evaluator to hold
the circuits and wait for the results of the coin ﬂip-
ping before she proceeds to do her jobs. When the
circuit is of large size, keeping hundreds of copies
of such a circuit in memory is undesirable.
• Similarly, the random seed checking technique [11]
requires the generator to send the hash for each gar-
bled circuit, and later on send the random seeds for
check circuits so that the communication for check
circuits is vastly reduced. Note that the hash for an
evaluation circuit is given away before the garbled
circuit itself. However, a hash is calculated only af-
ter the whole circuit is generated. So the generation-
evaluation pipelining cannot be applied directly.
Our system, however, integrates this pipelining idea with
the optimization techniques mentioned above, and is ca-
pable of handling circuits of billions of gates.
AES-NI Besides the improvements by the algorith-
mic means, we also incorporate the Intel Advanced En-
cryption Standard Instructions (AES-NI) in our system.
While the encryption is previously suggested to be
EncX,Y (Z) = H(X||Y )⊕ Z
in the literature [6, 20], where H is a 2-circular correla-
tion robust function instantiated either with SHA-1 [13]
or SHA-256 [30], we propose an alternative that
Enck
X,Y (Z) = AES-256X||Y (k)⊕ Z,
where k is the index of the garbled gate. With the help
of the latest instruction set, an AES-256 operation could
take as little as 30% of the time for SHA-256. Since this
operation is heavily used in circuit operations, with the
help of AES-NI instructions, we are able to reduce the
circuit computation time C by at least 20%.
Performance To get a sense of our improvements, we
list the experimental results of the benchmark function—
AES—from the most recent literature and our system.
The latest reported system in the semi-honest model was
built by Huang et al. [13] and needs 1.3 seconds (where
I = 1.1 and C = 0.2) to complete a block of secure AES
computation. The fastest known system in the malicious
model was proposed by Nielson et al. [28] and has an
amortized performance 1.6 seconds per block (or more
precisely, I = 79 and C = 6 for 54 blocks). Our system
provides security in the malicious model and needs 1.4
(= I +2C, where I = 1.0 and C = 0.2) seconds per block.
Note that both the prior systems require the full power
of a random oracle, while ours requires a weaker crypto-
graphic primitive, 2-circular correlation robust functions,
which was recently shown to be sufﬁcient to prove the
security of the free-XOR technique.
It should also be
noted that our system beneﬁts greatly from parallel com-
putation, which was not tested for LEGO+.
Scalable Circuit Compiler One of the major bottle-
necks that prevents large-scale secure computation is the
need for a scalable compiler that generates a circuit de-
scription from a function written in a high-level program-
ming language. Prior tools could barely handle circuits
with 50,000 gates, requiring signiﬁcant computational
resources to compile such circuits. While this is just
enough for an AES circuit, it is not enough for the large
circuits that we evaluate in this paper.
We present a scalable boolean circuit compiler that
can be used to generate circuits with billions of gates,
with moderate hardware requirements. This compiler
performs some simple but highly effective optimizations,
and tends to favor XOR gates. The toolchain is ﬂexible,
allowing for different levels of optimizations and can be
parameterized to use more memory or more CPU time