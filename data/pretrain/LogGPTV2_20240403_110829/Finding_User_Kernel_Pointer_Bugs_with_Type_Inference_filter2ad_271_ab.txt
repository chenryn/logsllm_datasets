sys setint, all the type qualiﬁers match. For instance,
the user pointer p is passed into the user argument
from of copy from user.
In contrast, the function
sys getint has a type error, since the user pointer p
is passed to memcpy, which expects a kernel pointer
instead.
In this case, this type error indicates an ex-
ploitable user/kernel bug.
In this paper, we use CQUAL, which allows program-
mers to add user-deﬁned qualiﬁers to the C program-
ming language. We create user and kernel type quali-
ﬁers and we use CQUAL to type-check the kernel. We
have analyzed several different versions of the Linux
kernel for user/kernel bugs, ﬁnding a total of 17 different
exploitable user/kernel pointer bugs.
3 Type Qualiﬁer Inference
We begin with a review of type qualiﬁer inference. The
C programming language supports a few basic types,
like int , float , and char . Programmers can construct
types such as pointers, or references, to any type. For ex-
ample, in our notation, ref (int ) denotes a reference to
a memory location of type int , or, in other words, a
pointer of type int *. The C language also contains a
few type qualiﬁers, like const, that can be applied to any
of the basic or constructed types.
CQUAL allows programmers to create new, user-deﬁned
qualiﬁers that modify the standard C types, just like
const. In our case, we use CQUAL to deﬁne qualiﬁers
user and kernel. The intended meaning is as follows: a
user int is an int whose value is possibly under user
control and hence is untrustworthy; if τ is any type, a
user τ is a value of type τ that is possibly under user
control; and likewise, a kernel τ is a value of type τ that
is under kernel control. For instance, a user ref (int )
is a reference to an int that is stored in user space; its
value is an address in the mapped portion of user mem-
ory, and dereferencing it yields an int . In C, a pointer p
of this type would be declared by the code int * user
p;, and the int typically would be stored in user space,
while the pointer to the int is stored in kernel space.
We refer to a C type, together with its qualiﬁers, as a
qualiﬁed type.
Note that qualiﬁers can modify each level of a standard
type. The C type int * user is different from int
user *; in the former case, it is the pointer (i.e., ad-
dress) whose value is under user control, while in the lat-
ter case, it is the integer whose value is under user con-
trol. As another example, the programmer could declare
a variable of C type int * user * kernel, which corre-
sponds in our notation to kernel ref (user ref (int ));
this would refer to a pointer, whose value came from the
kernel, that points to a pointer, whose value originally
came from user space, to an integer.
In general, the invariant we maintain is that every pointer
of type kernel ref (··· ) has a value referring to an ad-
dress in kernel space and cannot be controlled by any
user process. Pointers of type user ref (··· ) may con-
tain any address whatsoever. Normally, when the sys-
tem is not under attack, user pointers refer to mapped
memory within user space, but in the presence of an
adversary, this cannot be relied upon. Thus a pointer
of type kernel ref (··· ) is safe to dereference directly;
user ref (··· ) types are not.
The type qualiﬁer inference approach to program anal-
ysis has several advantages. First, type qualiﬁer infer-
ence requires programmers to add relatively few annota-
tions to their programs. Programmers demand tools with
low overhead, and type qualiﬁer inference tools certainly
meet those demands. Second, type qualiﬁers enable pro-
grammers to ﬁnd bugs at compile time, before an appli-
cation becomes widely distributed and impossible to ﬁx.
Third, type qualiﬁers are sound; if a sound analysis re-
ports no errors in a source program, then it is guaranteed
to be free of the class of bugs being checked. Sound-
ness is critical for verifying security-relevant programs;
a single missed security bug compromises the entire pro-
gram.
Like standard C types and type qualiﬁers, CQUAL is
ﬂow-insensitive. This means that each program expres-
sion must have one qualiﬁed type that will be valid
throughout the entire execution of the program. For
example, just as C doesn’t allow a local variable to
sometimes be used as an int and sometimes as a
struct, CQUAL does not permit a pointer to some-
times have type user ref (int ) and sometimes have
type kernel ref (int ).
Programmers can use these qualiﬁers to express spec-
iﬁcations in their programs. As an example, Figure 2
shows type qualiﬁer annotations for copy from user
and copy to user. With these annotations in place,
if a programmer ever calls one of these functions with,
say, a user pointer where a kernel pointer is expected,
CQUAL will report a type error. Figure 2 also shows
CQUAL’s syntax for annotating built-in C operators.
The op deref annotation prohibits dereferencing user
pointers. This annotation applies to all dereferences,
including the C “*” and “->” operators, array index-
ing, and implicit dereferences of references to local vari-
ables.
In certain cases, Linux allows kernel pointers to be
treated as if they were user pointers. This is analogous
to the standard C rule that a nonconst 2 variable can be
passed to a function expecting a const argument, and is
an example of qualiﬁer subtyping. The notion of sub-
typing should be intuitively familiar from the world of
object-oriented programming. In Java, for instance, if A
is a subclass of B, then an object of class A can be used
wherever an object of class B is expected, hence A can
be thought of as a subtype of B (written A < B).
int copy from user(void user * kernel kto,
void * user ufrom,
int len);
int copy to user(void * user uto,
void * kernel kfrom,
int len);
op deref(α * kernel p);
α
Figure 2: Annotations for the two basic user space ac-
cess functions in the Linux kernel. The ﬁrst argument to
copy from user must be a pointer to kernel space, but
after the copy, its contents will be under user control.
The op deref annotation declares that the C derefer-
ence operator, “*”, takes a kernel pointer to any type, α,
and returns a value of type α.
CQUAL supports subtyping relations on user-deﬁned
qualiﬁers, so we can declare that kernel is a subtype
of user, written as kernel < user. CQUAL then
extends qualiﬁer subtyping relationships to qualiﬁed-
type subtyping rules as follows. First, we declare that
kernel int < user int, because any int under kernel
control can be treated as a int possibly under user con-
trol. The general rule is3
Q ≤ Q0
Q int ≤ Q0 int
This notation states that if qualiﬁer Q is a subtype of
qualiﬁer Q0, then Q int is a subtype of Q0 int, or in
other words, any value of type Q int can be safely used
whereever a Q0 int is expected. For example, if a func-
tion expects a const int, then it may be called with a
nonconst int because nonconst < const, and therefore
nonconst int < const int.
The rule for subtyping of pointers is slightly more com-
plicated.
up the entire Linux kernel in this way would be im-
mense, and so we need some way to reduce the workload
on the programmer.
We reduce the annotation burden using type inference.
The key observation is that the vast majority of type
qualiﬁer annotations would be redundant, and could be
inferred from a few base annotations, like those in Fig-
ure 2. Type qualiﬁer inference provides a way to infer
these redundant annotations: it checks whether there is
any way to extend the source code annotations to make
the result type-check. CQUAL implements type quali-
ﬁer inference. For example, this allows CQUAL to infer
from the code
int bad ioctl(void * user badp)
{
char badbuf[8];
void *badq = badp;
copy to user(badbuf, badq, 8);
}
that badq must be a user pointer (from the assignment
badq = badp), but it is used as a kernel pointer (since
badq is passed to copy from user). This is a type er-
ror. In this case, the type error indicates a bona ﬁde se-
curity hole.
Notice that, in this example, the programmer didn’t have
to write an annotation for the type of badq—instead,
it was inferred from other annotations.
Inference can
dramatically reduce the number of annotations required
from the programmer. In our experiments with Linux,
we needed less than 300 annotations for the whole ker-
nel; everything else was inferred by CQUAL’s type in-
ference algorithm.
Q ≤ Q0
τ = τ0
Q ref (τ) ≤ Q0 ref (τ0)
3.1 Soundness
Notice that this rule requires that the referent types, τ
and τ0, be equal, not just that τ ≤ τ0. This is a well-
known typing rule that is required for soundness. This
rule captures CQUAL’s sound handling of aliasing, a
problem that has plagued other bug-ﬁnding tools.
So far, we have described the basis for a type-checking
analysis. If we were willing to manually insert a user
or kernel qualiﬁer at every level of every type decla-
ration in the Linux kernel, we would be able to detect
user/pointer bugs by running standard type-checking al-
gorithms. However, the annotation burden of marking
As mentioned before, the theoretical underpinnings of
type inference are sound, but C contains several con-
structs that can be used in unsound ways. Here we ex-
plain how CQUAL deals with these constructs.
No memory safety. CQUAL assumes programs are
memory safe, i.e. that they contain no buffer overﬂows.
Type qualiﬁers cannot detect buffer overﬂows, but other
tools, such as BOON[14] or CCured[10], do address
memory safety. In conjunction with these tools, CQUAL
forms a powerful system for verifying security proper-
ties.
Unions. CQUAL assumes programmers use unions
safely, i.e. that the programmer does not write to one
ﬁeld of a union and read from a different one. Like
memory-safety, type qualiﬁers cannot detect invalid uses
of unions, but union-safety could plausibly be checked
by another program analysis tool. Programmers could
use CQUAL together with such a tool if it seems unre-
alistic to assume that programmers always use unions
safely.
qualiﬁer
Separate Compilation. Type
inference
works from a few base annotations, but if the anno-
tations are incomplete or incorrect,
then the results
may not be sound.
In legacy systems like the Linux
kernel, each source module provides one interface and
makes use of many others, but none of these interfaces
are annotated. Thus any analysis of one source ﬁle
in isolation will be unsound. To get sound results, a
whole-program analysis is required.
Type casts. C allows programmers to cast values to
arbitrary types. We had to extend CQUAL slightly to
handle some obscure cases. With these enhancements,
our experience is that CQUAL just “does the right thing”
in all cases we’ve encountered. For example, if the pro-
grammer casts from one type of struct to another, then
CQUAL matches up the corresponding ﬁelds and ﬂows
qualiﬁers appropriately.
Inline assembly. CQUAL ignores inline assembly,
which may cause it to miss some type errors. Analyz-
ing inline assembly would require detailed knowledge of
the instruction set and instruction semantics of a speciﬁc
processor. Inline assembly is rare in most programs, and
programmers can obtain sound analysis results by an-
notating functions containing inline assembly. Alterna-
tively, programmers could provide C implementations of
inline assembly blocks. The C implementations would
not only beneﬁt CQUAL, they would serve to document
the corresponding assembly code.
3.2 Our Analysis Reﬁnements
We made several enhancements to CQUAL to support
our user/kernel analysis. The challenge was to improve
the analysis’ precision and reduce the number of false
positives without sacriﬁcing scalability or soundness.
One of the contributions of this work is that we have
developed a number of reﬁnements to CQUAL that meet
this challenge. These reﬁnements may be generally use-
ful in other applications as well, so our techniques may
be of independent interest. However, because the tech-
nical details require some programming language back-
ground to explain precisely, we leave the details to to the
extended version of this paper and we only summarize
our improvements here.
Context-Sensitivity. Context-sensitivity
enables
CQUAL to match up function calls and returns. With-
out context-sensitivity,
type constraints at one call
site to a function f will “ﬂow” to other call sites.
Context-sensitivity simultaneously reduces the number
of annotations programmers must write and the number
of false positives CQUAL generates.
Experiments
performed with Percent-S, a CQUAL-based tool for de-
tecting format string bugs, found that context-sensitivity
could reduce the false positive rate by over 90%,
depending on the application[11].
Field-sensitivity. Field-sensitivity enables CQUAL to
distinguish different instances of structures. Without
ﬁeld-sensitivity, every variable of type struct foo
shares one qualiﬁed type, so a type constraint on ﬁeld
x of one instance ﬂows to ﬁeld x of every other instance.
Without this enhancement, CQUAL was effectively un-
able to provide any useful results on the Linux kernel be-
cause the kernel uses structures so heavily. In our early
experiments, the ﬁeld-insensitive analysis produced a
false positive for almost every call to copy from user,
copy to user, etc. With our more precise analysis of
structures and ﬁelds, CQUAL produces only a few hun-
dred warnings.
Well-formedness Constraints. Well-formedness con-
straints enable CQUAL to enforce special type rules re-
lated to structures and pointers. We used this feature to
encode rules like, “If a structure was copied from user
space (and hence is under user control), then so were
all its ﬁelds.” Without support for well-formedness con-
straints, CQUAL would miss some user/kernel bugs (see,
e.g., Figure 4). Well-formedness constraints require no
additional annotations; they are optional properties that
are enabled or disabled in the conﬁguration ﬁle that de-
scribes the type system used for an analysis.
Sound and Precise Pointer/Integer Casts. CQUAL
now analyzes casts between pointers and integers
soundly. Our improvement to CQUAL’s cast handling
simultaneously ﬁxes a soundness bug and improves
CQUAL’s precision.
these
reﬁnements
dramatically
Together,
reduce
CQUAL’s false positive rate. Before we made these
improvements, CQUAL reported type errors (almost all
of which were false positives) in almost every kernel
source ﬁle. Now CQUAL ﬁnds type errors in only about
5% of the kernel source ﬁles, a 20-fold reduction in the
number of false positives.
3.3 Error Reporting
In addition to developing new reﬁnements to type qual-
iﬁer inference, we also created a heuristic that dramat-
ically increases the “signal-to-noise” ratio of type in-
ference error reports. We implemented this heuristic in
CQUAL, but it may be applicable to other program anal-
ysis tools as well.
Before explaining our heuristic, we ﬁrst need to explain
how CQUAL detects type errors. When CQUAL ana-
lyzes a source program, it creates a qualiﬁer constraint
graph representing all the type constraints it discovers.
A typing error occurs whenever there is a valid path 4
from qualiﬁer Q to qualiﬁer Q0 where the user-speciﬁed
type system requires that Q 6≤ Q0. In the user/kernel
example, CQUAL looks for valid paths from user to ker-
nel. Since each edge in an error path is derived from a
speciﬁc line of code, given an error path, CQUAL can
walk the user through the sequence of source code state-
ments that gave rise to the error, as is shown in Figure 3.
This allows at least rudimentary error reporting, and it is
what was implemented in CQUAL prior to our work.
Unfortunately, though, such a simple approach is totally
inadequate for a system as large as the Linux kernel. Be-
cause typing errors tend to “leak out” over the rest of the
program, one programming mistake can lead to thou-
sands of error paths. Presenting all these paths to the
user, as CQUAL used to do, is overwhelming: it is un-
likely that any user will have the patience to sort through
thousands of redundant warning messages. Our heuris-
tic enables CQUAL to select a few canonical paths that
capture the fundamental programming errors so the user
can correct them.
Many program analyses reduce ﬁnding errors in the in-
put program to ﬁnding invalid paths through a graph, so
a scheme for selecting error paths for display to the user
could beneﬁt a variety of program analyses.
To understand the idea behind our heuristic, imagine an
ideal error reporting algorithm. This algorithm would
pick out a small set, S, of statements in the original
source code that break the type-correctness of the pro-
gram. These statements may or may not be bugs, so
we refer to them simply as untypable statements. The