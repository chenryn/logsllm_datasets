> 等操作符之外，还能使用 mod, in, not in等。
>  
>     4. 容器、数组、对象
>     OGNL支持对数组和ArrayList等容器的顺序访问：例如：group.users[0]
>     同时，OGNL支持对Map的按键值查找：
>     例如：#session['mySessionPropKey']
>     不仅如此，OGNL还支持容器的构造的表达式：
>     例如：{"green", "red", "blue"}构造一个List，#{"key1" : "value1", "key2" :
> "value2", "key3" : "value3"}构造一个Map
>     你也可以通过任意类对象的构造函数进行对象新建
>     例如：new Java.net.URL("xxxxxx/")
>  
>     5. 对静态方法或变量的访问
>     要引用类的静态方法和字段，他们的表达方式是一样的@class@member或者@class@method(args)：
>  
>     6. 方法调用
>     直接通过类似Java的方法调用方式进行，你甚至可以传递参数：
>     例如：user.getName()，group.users.size()，group.containsUser(#requestUser)
>  
>     7. 投影和选择
>     OGNL支持类似数据库中的投影（projection） 和选择（selection）。
>     投影就是选出集合中每个元素的相同属性组成新的集合，类似于关系数据库的字段操作。投影操作语法为 collection.{XXX}，其中XXX
> 是这个集合中每个元素的公共属性。
>     例如：group.userList.{username}将获得某个group中的所有user的name的列表。
>     选择就是过滤满足selection 条件的集合元素，类似于关系数据库的纪录操作。选择操作的语法为：collection.{X YYY}，其中X
> 是一个选择操作符，后面则是选择用的逻辑表达式。而选择操作符有三种：
>     ? 选择满足条件的所有元素
>     ^ 选择满足条件的第一个元素
>     $ 选择满足条件的最后一个元素
>     例如：group.userList.{? #txxx.xxx != null}将获得某个group中user的name不为空的user的列表。
struts2中大量用到了这种OGNL表达式，正是由于有这种功能强大的表达式，只要当传入解析的表达式我们可以控制的时候，就可以触发漏洞。
# 漏洞分析
可以锁定到最终变量值发生变化的区域是在`xwork-2.0.3.jar!/com/opensymphony/xwork2/util/TextParseUtil.class:30
line`中
    public static Object translateVariables(char open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator) {
        Object result = expression;
        while(true) {
            int start = expression.indexOf(open + "{");
            int length = expression.length();
            int x = start + 2;
            int count = 1;
            while(start != -1 && x  maxLoopCount) {
                // translateVariables prevent infinite loop / expression recursive evaluation
                break;
            }
            int length = expression.length();
            int x = start + 2;
            int end;
            char c;
            int count = 1;
            while (start != -1 && x  0 ? left.length() - 1: 0) +
                      (middle != null && middle.length() > 0 ? middle.length() - 1: 0) +
                      1;
                pos = Math.max(pos, 1);
            } else {
                break;
            }
        }
        return XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);
    }
可以明显看到多了这样的判断
    if (loopCount > maxLoopCount) {
        // translateVariables prevent infinite loop / expression recursive evaluation
        break;
    }
判断了循环的次数，从而在解析到`%{1+1}`的时候不会继续向下递归
# 总结
漏洞的形成确实不算是特别难，但是由于对于java的不熟悉，以及一些搭建配置的问题，导致还是花费了很多精力和时间去完成这个漏洞分析和复现的。万事开头难，暑假还剩下这几天，再多复现几个漏洞把。。
# Reference Links