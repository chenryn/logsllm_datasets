res += findPath437(root.Left, sum-root.va1)
res += findPath437(root.Right, sum-root.Val)
return res
438.FindAllAnagramsinaString
题目
's ul swe,geue s,d jo saopul ejs aun lle puy 'd sus Adwa-uou e pue s aujns e uani
---
## Page 519
larger than 20,100.
The order of output does not matter.
Example 1:
Input:
S:“cbaebabacd" p: "abc"
output:
[0, 6]
Exp1anation:
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:
Input:
S:"abab"p:"ab"
Output:
[0, 1, 2]
Exp1anation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
'e. go webu ue s, uum ,qe. s1  = xapu, aas yam busqns au
题目大意
给定一个字符串s和一个非空字符串p，找出s中的所有是p的Anagrams字符串的子串，返回这些子
串的起始索引l。Anagrams的意思是和一个字符串的所有字符都一样，只是排列组合不同。
解题思路
这道题是一道考“滑动窗口“的题目。和第3题，第76题，第567题类似的。解法也是用freq[256]记
录每个字符的出现的频次次数。滑动窗口左边界往右滑动的时候，划过去的元素释放次数（即次数++)，
滑动窗口右边界往右滑动的时候，划过去的元素消耗次数（即次数-)。右边界和左边界相差len(p)的时
候，需要判断每个元素是否都用过一遍了。具体做法是每经过一个符合规范的元素，count就-，
count初始值是len(p)，当每个元素都符合规范的时候，右边界和左边界相差len(p)的时候，count也
会等于0。当区间内有不符合规范的元素（freq= 1{
count--
freq[s[right]-'a']--
right++
if count == 0{
result = append(result, left)
if right-1eft == len(p){
if freq[s[left]-'a'] >= 0 {
++uno
freq[s[left]-'a′]++
left++
return result
---
## Page 521
441.ArrangingCoins
题目
You have a total of n coins that you want to form in a staircase shape, where every k-th row must
have exactly k coins.
Given n, find the total number of full staircase rows that can be formed.
a pais  e o ae a u s pe aa aao e s u
Example 1:
n = 5
The coins can form the following rows:
Because the 3rd row is incomplete, we return 2.
Example 2:
n = 8
The coins can form the following rows:
X
Because the 4th row is incomplete, we return 3.
题目大意
你总共有n枚硬币，你需要将它们摆成一个阶梯形状，第k行就必须正好有k枚硬币。给定一个数字
n，找出可形成完整阶梯行的总行数。n是一个非负整数，并且在32位有符号整型的范围内。
解题思路
·n个硬币，按照递增的方式排列搭楼梯，第一层一个，第二层二个，..第n层需要n个硬币。问
硬币n能够搭建到第几层？
·这一题有2种解法，第一种解法就是解方程求出X，（1+x）x/2=n，即×=
f1oor（sqrt（2*n+1/4）-1/2），第二种解法是模拟。
---
## Page 522
代码
package leetcode
import "math"
//解法一数学公式
func arrangeCoins(n int) int{
if n = k {
n -= k
k++
return k
445.AddTwoNumbersll
题目
You are given two non-empty linked lists representing two non-negative integers. The most
significant dligit comes first and each of their nodes contain a single dligit. Add the two numbers
and return it as a linked list.
You may assume the two numbers dlo not contain any leading zero, except the number 0 itself.
Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.
Example:
( 9 {
newHeader.Next.Val = newHeader.Next.Val % 10
return newHeader
return newHeader .Next
}
func addNode(11 *ListNode, 12 *ListNode, offset int) *ListNode {
if 11 == nil {
return ni1
var(
res, node *ListNode
---
## Page 524
)
if offset == 0 {
res = &ListNode{Val: 11.Val + 12.val, Next: ni1}
node = addNode (11.Next, 12.Next, 0)
}else{
res = &ListNode{Val: 11.Val, Next: ni1}
node = addNode(11.Next, 12, offset-1)
3
if node 1= nil && node.val > 9 {
res.val++
node.val = node.val % 10
res.Next = node
return res
func getLength(1 *ListNode) int {
count :=0
cur := 1
for cur != nil {
count++
cur = cur.Next
3
return count
447.NumberofBoomerangs
题目
Given n points in the plane that are all pairwise distinct, a *boomerang" is a tuple of points (i,j, k)
such that the distance between i and j equals the distance between i and k (the order of the tuple
matters).
Find the number of boomerangs. You may assume that n will be at most 5o0 and coordinates of
points are all in the range [-10000, 10000] (inclusive).
Example 1:
---
## Page 525
Input:
[[0,0],[1,0],[2,0]]
Output:
2
Exp1anation:
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0], [o,0]]
题目大意
在一个Point的数组中求出（ijk)三元组，要求j和i的距离等于k和i的距离。这样的三元组有多少
种？注意（ijk)和（jik)是不同的解，即元素的顺序是有关系的。
解题思路
这道题考察的是哈希表的问题。
首先依次求出两两点之间的距离，然后把这些距离记录在map中，key是距离，value是这个距离出现
了多少次。求距离一般都需要开根号，但是key如果为浮点数就会有一些误差，所以计算距离的时候最
后一步不需要开根号，保留平方差即可。
最后求结果的时候，遍历map，把里面距离大于2的key都拿出来，value对应的是个数，在这些个数
里面任取2个点就是解，所以利用排列组合，Cn2就可以得到这个距离的结果，最后把这些排列组合
的结果累积起来即可。
代码
package leetcode
func numberofBoomerangs(points [][]int) int {
res := 0
for i:= 0;i [je >  auaum siaaqul jo Aeue ue uani
others appear once.
Find all the elements of [1, n] inclusive that do not appear in this array.
Could you do it without extra space and in O(n) runtime? You may assume the returned list does
not count as extra space.
Example:
Input:
[4, 3,2,7,8,2,3,1]
output:
[5, 6]
题目大意
给定一个范围在1sa[i]sn（n=数组大小）的整型数组，数组中的元素一些出现了两次，另一些只出
现一次。找到所有在[1，n]范围之间没有出现在数组中的数字。你能在不使用额外空间且时间复杂度为
O（n)的情况下完成这个任务吗？你可以假定返回的数组不算在额外空间内。
解题思路
·找出[1,n]范围内没有出现在数组中的数字。要求不使用额外空间，并且时间复杂度为O（n)。
·要求不能使用额外的空间，那么只能想办法在原有数组上进行修改，并且这个修改是可还原的。时
间复杂度也只能允许我们一层循环。只要循环一次能标记出已经出现过的数字，这道题就可以按要
求解答出来。这里笔者的标记方法是把|nums[]|-1索引位置的元素标记为负数。即nums[|
nums[i]1-1]*-1。这里需要注意的是，nums[i]需要加绝对值，因为它可能被之前的数置为负数
了，需要还原一下。最后再遍历一次数组，若当前数组元素nums[]为负数，说明我们在数组中存
在数字+1。把结果输出到最终数组里即可。
代码
package leetcode
---
## Page 527
func findpisappearedNumbers(nums []int) []int {
res := []int{}
for
-,V := range nums {
if v 0 {
nums [v-1] = -nums [v1]
for i, v := range nums {
if v >0{
res = append(res, i+l)
return res
451.SortCharactersByFrequency
题目
Given a string, sort it in decreasing order based on the frequency of characters.
Example 1:
Input:
"tree"
output:
"eert"
Explanation:
'e' appears twice while 'r' and 't' both appear once.
So ‘e′ must appear before both 'r' and 't'. Therefore “eetr" is also a valid
answer.
Example 2:
---
## Page 528
Input:
"cccaaa"
Output:
"cccaaa"
Explanation:
Both 'c′ and 'a' appear three times, so "aaaccc" is also a valid answer.
  e     ,  
Example 3:
Input:
"Aabb"
Output:
"bbAa"
Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A’ and 'a' are treated as two different characters.
题目大意
这道题是Google的面试题。
给定一个字符串，要求根据字符出现的频次从高到低重新排列这个字符串。
解题思路
思路比较简单，首先统计每个字符的频次，然后排序，最后按照频次从高到低进行输出即可。
代码
package leetcode
import（
"sort"
---
## Page 529
func frequencySort(s string) string {
if s == "{
return ""*
sMap := map[byte]int{}
cMap := map[int][]byte{}
sb := []byte(s)
for _, b := range sb {
SMap[b]++
for key, value := range sMap {
cMap[value] = append(cMap[value], key)
var keys []int
for k := range cMap {
keys = append(keys, k)
sort.Sort(sort.Reverse(sort.Intslice(keys)))
res = make([]byte，0)
for _, k := range keys {
for i:= 0; i  v {
A = ULW
return sum -min*1
454.4Sum
题目