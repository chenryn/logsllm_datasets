# 0 前言
log4j漏洞的形成原因已经有很多分析文章了，这里说一说我是如何在了解到有漏洞后，跟进漏洞产生原理的，以及发现的一些绕WAF tips
# 1 跟进漏洞产生原因的思路
## 1.1 如何发现漏洞产生原因的
了解到log4j 
这个commit中，对`org.apache.logging.log4j.core.net.JndiManager.java`进行了大量修改，特别是在lookup方法中，加了很多代码
仔细看了一下，没有修改前，lookup方法直接通过`this.context.lookup(name)`执行JNDI操作，没有任何过滤或者限制，而新增加的代码在限制JNDI服务器、类。当天晚上看到payload后，马上对log4j
2.14.1版本尝试验证一下，并在JndiManager#lookup方法中断点看到如下
很明显，name就是payload中给定的，仔细看一下调用栈就可以发现，log4j会对字符串中的${}自动解析，也就是前面提到的commit备注信息中写到的。
## 1.2 如何绕过2.15.0-rc1版本
看到rc1版本存在绕过的消息，又来看看官方github仓库的commit记录，里面有一条在更新到2.15.0-rc1版本后的[commit记录](https://github.com/apache/logging-log4j2/commit/c2b07e37995004555c211cdf0bb169d6a6a6f96b)，提交的信息是"handle URI
exception"，即处理了URI出错的情况。修改代码情况如下图
JndiManager#lookup方法处给catch语句中添加了两行代码，记录URI解析错误并返回null。而添加这两行代码前，此处只有一行注释，因此catch报错后会继续向下执行this.context.lookup，也就意味着前面try语句中的代码报错后，会继续执行JNDI操作，绕过也就来自于这里。
来看看try语句是什么写的
代码比较长没有完全截进来，关键点是进入lookup方法后，立即将name变量送入URI类的构造函数中，此时只要URI的构造函数对name字符串解析出错，即可跳转到catch语句，进而向下执行到JNDI操作。
那么我们要关注的点就是让`new
URI(name)`处报错，但是name又能被jndi正常识别。好在我们用marshalsec构造ldap服务时，不需要关心uri长什么样，所以可以在uri上做文章。
跟踪源代码可以查看到URI对字符的支持情况
数字、字母大小写这些就不说了，其它可打印字符也不多，从上面的注释中可以看到URI对 **反引号`，空格，尖括号
<>**并不支持，基于这一点，可以做个简单的实验
空格和尖括号同样报错，就不重复截图了。回到前面提到的2.15.0-rc1版本对JndiManager#lookup方法的修复情况，并没有在catch语句中添加返回操作或报错，程序遇到报错后，会继续向下执行，从而造成危险。
由于找了很久都没有找到log4j-core-2.15.0-rc1.jar这个包，所以自己写了个函数模拟一下绕过的场景
# 2 LDAP绕WAF的tips
## 2.1 URI解析
看完rc1版本的绕过后，又想了一下，防御工具可能会有针对性的做一些关键字检测，所以我打算从LDAP更深层的源代码看看有没有对字符串变形的可能性。
跟着this.context.lookup(name)处向下跟进到`com.sun.jndi.url.ldap.LdapURLContextFactory#getUsingURLIgnoreRootDN`方法，代码如下
注意var0也就是输入是完整的"ldap://192.168.34.96:1389:/a"，而后var2可以使用getHost和getPort方法获取host和port，说明var2对象在创建时解析了ldap地址。跟进LdapURL类到达Uri#parse方法
  * com.sun.jndi.toolkit.url.Uri#parse
    private void parse(String var1) throws MalformedURLException {
        int var2 = var1.indexOf(58);
        if (var2  var3) {
                        throw new MalformedURLException("Invalid URI: " + var1);
                    }
                    this.host = var1.substring(var2, var4 + 1);
                    var2 = var4 + 1;
                } else {
                    var4 = var1.indexOf(58, var2);
                    int var5 = var4 >= 0 && var4 =0 且 var4 var4, boolean var5) throws NamingException {
        this.useSsl = this.hasLdapsScheme = var5;
        if (var4 != null) {
            this.envprops = (Hashtable)var4.clone();
            if ("ssl".equals(this.envprops.get("java.naming.security.protocol"))) {
                this.useSsl = true;
            }
            this.trace = (OutputStream)this.envprops.get("com.sun.jndi.ldap.trace.ber");
            if (var4.get("com.sun.jndi.ldap.netscape.schemaBugs") != null || var4.get("com.sun.naming.netscape.schemaBugs") != null) {
                this.netscapeSchemaBug = true;
            }
        }
        this.currentDN = var1 != null ? var1 : "";
        this.currentParsedDN = parser.parse(this.currentDN);
        this.hostname = var2 != null && var2.length() > 0 ? var2 : "localhost";
        if (this.hostname.charAt(0) == '[') {
            this.hostname = this.hostname.substring(1, this.hostname.length() - 1);
        }
        if (var3 > 0) {
            this.port_number = var3;
        } else {
            this.port_number = this.useSsl ? 636 : 389;
            this.useDefaultPortNumber = true;
        }
        this.schemaTrees = new Hashtable(11, 0.75F);
        this.initEnv();
        try {
            this.connect(false);
        } catch (NamingException var9) {
            try {
                this.close();
            } catch (Exception var8) {
            }
            throw var9;
        }
    }
这里主要关注hostname和port_number两个参数，即下面的代码块
    this.hostname = var2 != null && var2.length() > 0 ? var2 : "localhost";
    if (this.hostname.charAt(0) == '[') {
        this.hostname = this.hostname.substring(1, this.hostname.length() - 1);
    }
    if (var3 > 0) {
        this.port_number = var3;
    } else {
        this.port_number = this.useSsl ? 636 : 389;
        this.useDefaultPortNumber = true;
    }
其中var2=LdapURL中解析的host，var3=LdapURL中解析的port
  * 注意到代码逻辑， **如果var2为null，则直接使this.hostname="localhost"** ；
  * 如果hostname的第一个字符为"["，则取出第二个字符至倒数第二个字符的子字符串，即从[ip]，去掉[]，获得ip
  * 如果var3
，
另外可以对log4j解析${}的部分深入了解一下，还能通过其自身特性，避免直接出现jndi:ldap关键字，但不是自己研究出来的就不公开了