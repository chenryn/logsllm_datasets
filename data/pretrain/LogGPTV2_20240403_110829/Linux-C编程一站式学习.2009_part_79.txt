下面我们用ps axj命令查看系统中的进程。
务进程没有控制终端，不能直接和用户交互。
3.守护进程 请点评
用这个函数之前，
该函数调用成功时返回新创建的Session的id（其实也就是当前进程的id）
常采用以a结尾的名字，
设备文件，
通常采用以k开头的名字，
凡
作业控制相关的信息。
户的进程,
有
结束或用户注销时终止,
Linux系统启动时会启动很多系统服务进程，
字表示内核线程，
是TPGID一栏写着-1的都是没有控制终端的进程，
一个名称叫守护进程（Daemon）。
页
pid_t setsid(void);
#include 
/sbin/syslogd -u syslog
/usr/sbin/acpid -c /etc
--daemon
·
 ps axj
，参数x表示不仅列有控制终端的进程，也列出所有无控制终端的进程，参数j表示列出
22
0
4808
4680
2373
当前进程不允许是进程组的Leader，
PID
，这些线程在内核里创建，没有用户空间代码，
表示Daemon。
4808
4680
2373
PGID
，但系统服务进程不受用户登录注销的影响，它们一直在运行着。这种进和
表示Kernel。init进程我们已经很熟悉了，
............................................................................
2373?
4808
4680
SID 
第 34章终端、作业控制与守护进程
0
山山
全国嵌入式人才培训基地
一个进程，
 参数a表示不仅列当前用户的进程，
3.守护进程
，例如第1.3节“网络登录过程"讲的inetd，这些系统服
。其它进程都是在用户登录或运行程序时创建，在运行
TPGID STAT
也就是守护进程。
-1
L
-1 S
pen(
 Attach file descriptors 0, l,&
(chdir("/"）
 Change the (
 Become a session leader to lose controlling
，当前进程成为进程组的Leader，
 pid;
原来的控制终端仍然是打开的，
 current working directory to the
!=0) /*
"fork");
首先fork出一个子进程，
 parent */
当前进程的id就是进程组的id。
当前进程的id就是Session的id。
and 2 to
.........
，成为一个没有控制终端的进
仍然可以读写，但只是一个普
 通常将当前工作目录切换
父进程退出，
......
然后子进
651
---
## Page 652
2.作业控制
的ps命令才能看到。另外还可以看到，用户关闭终端窗口或注销也不会影响守护进程的运行。
运行这个程序，
描述符0、1、2重定向到/dev/nu1l。
们的daemonize函数的功能，
13282
11494
11494 
SS
kill
 ps xj
PID TTY
./a.out
，它变成一个守护进程，
13338
pts/0
13270
13270
 grep.
d.out
00:00:00 bash
，它带两个参数指示要不要切换工作目录到根目录，以及要不要把文件
13270 ?
TIME
CMD
?
全国嵌入式人才培训基地
不再和当前终端关联。用ps命令看不到，
起始页
一级
0:05 ./a.out
0:00 grep a.out
必须运行带x参数
第35章线程
8
---
## Page 653
4.编程练习
3.守护进程
3.线程间同步
2.线程控制
目录
第 35 章 线程 请点评
1.线程的概念
一页
3.4.其它线程间同步机制
3.1. mutex
2.2.终止线程
2.1.创建线程
贝
部分I.Linux系统编程
全国嵌入式人才培训基地
全国嵌入式人才培训基地
第35章线程
起始页
上一级
1.线程的概念
653
---
## Page 654
程函数位于libpthread共享库中，因此在编译时要加上-lpthread选项。
我们将要学习的线程库函数是由POSIX标准定义的，称为POSIX thread或者pthread。在Linux上线
但有些资源是每个线程各有一份的：
个全局变量，在各线程中都可以访问到，除此之外，各线程还共享以下进程资源和环境：
多个进程之间调度和切换一样。由于同一进程的多个线程共享同一地址空间，因此Text
以前我们讲过,
负责与用户交互，
网络主机发来的数据，
行多个控制流程，
制，本节我们学习如何在一
我们知道，
1.线程的概念 请点评
白
上一页
·调度优先级
·线程id
·用户id和组id
·当前工作目录
·每种信号的处理方式（SIG_IGN、SIG_DFL或者自定义的信号处理函数)
·文件描述符表
之后就结束，
交互，
·
 但是比信号处理函数更加灵活,
页
信号屏蔽字
errno变量
栈空间
上下文,
 等待和处理用户的鼠标键盘事件，
 进程在各自独立的地址空间中运行，
，包括各种寄存器的值、程序计数器和栈指针
，而多线程的控制流程可以长期并存，
 main函数和信号处理函数是同一个进程地址空间中的多个控制流程，
 另外几个线程每个线程负责和一个网络主机通信。
这时候线程就派上了用场，
，这些任务都需要一
一个进程的地址空间中执行多个线程。有些情况需要在一个进程中同时执
 信号处理函数的控制流程只是在信号递达时产生,
，如果定义一个函数，在各线程中都可以调用，如果定义一
全国嵌入式人才培训基地
一个“等待-处理"的循环，
第35章线程
1.线程的概念
另-
，比如实现一个图形界面的下载软件，
上一级
一方面又需要同时下载多个文件,
，进程之间共享数据需要用mmap或者进程间通信机
，操作系统会在各线程之间调度和切换，就像不
，可以用多线程实现，
等待和处理从多>
一方面需要和用
，多线程也是如
在处理完
个线程专门
654
下一页
下一页
交
信
---
## Page 655
第35章线程
全国嵌入式人才培训基地
起始页
2.线程控制
---
## Page 656
属性取缺省值，感兴趣的读者可以参考[APUE2e]。首先看一个简单的例子：
attr参数表示线程属性，
地址，所以不能简单地当成整数用printf打印，调用pthread_self(3)可以获得当前线程的id。
的id，是一个正整数值。
进程id的类型是pid_t,
返回值：成功返回0，失败返回错误号。以前学过的系统函数都是成功返回0，
2.1.创建线程 请点评
2.线程控制 请点评
统
错误码更加清晰。
一个errno，但这是为了兼容其它函数接口而提供的，pthread库本身并不使用它，通过返回值返
号保存在全局变量errno中，
上一页
这个指针的含义同样由调用者自己定义。start_routine返回时，
而新的线程所执行的代码由我们传给pthread_create的函数指针start_routine决 
-个线程中调用pthread_create()创建新的线程后，
void printids(const char *s)
pthread_t ntid;
#include
#include
#include
int pthread_create(pthread_t *restrict thread,
#include 
pthread_t
pid_t 
，每个进程的id在整个系统中是唯一的,
，线程id的类型是thread_t，
 本章不深入讨论线程属性，
，新创建的线程的id被填写到thread参数所指向的内存单元。
 而pthread库的函数都是通过返回值返回错误号,
attr
全国嵌入式人才培训基地
第35章线程
2.线程控制
一个整数值，也可能是一个结构体，也可能是一
它只在当前进程中保证是唯一的，在不同的系
，所有代码例子都传NULL给attr参数，表示线程
类似于父进程调用wait(2)得到子进程的退出
，当前线程从pthread_create()返回继续往下执
void' *restrict arg);
attr,
，这个线程就退出了
虽然每个线程也都有
 失败返回-1,
该参数的类
，我们知道
其它线程
，而错误
656
回
---
## Page 657
2.2.终止线程请点评
如果需要只终止某个线程而不终止整个进程，
用pthread_self而是直接打印这个ntid，能不能达到同样的效果?
思考题：主线程在一个全局变量ntia中保存了新创建的线程的id，
节我们会看到更好的办法。
相当于调用exit，
如果任意一个线程调用了exit或_exit,
由于pthread_create的错误码不保存在errno中,
可知在Linux上，
编译运行结果如下:
时1秒，
，线程可以调用pthread_exit终止自己。
一个线程可以调用pthread_cancel终止同一进程中的另一个线程。
这只是-
new thread:
strerror(err));
int main(void)
(6xe* PTOA)uJ Iux PTOA
 gcc main.c -lpthread
/a
out
一种权宜之计，
thread_t类型是一
 为了防止新创建的线程还没有得到执行就终止，
return 0;
int err;
return NULL;
printids(arg);
printf(
(err
pthread_ self();
fprintf(stderr, "can't create thread: %s\n",
(unsigned int)tid,
exit(1);
，即使主线程等待1秒，内核也不一
pid 
一个地址值,
tid
%u
，则整个进程的所有线程都终止,
3084446608
tid %u (0x%x)\n",
，可以有三种方法:
属于同一进程的多个线程调用getpid(2)可以得到相
因此不能直接用perror(3)打印错误信息，可以先
一定会调度新创建的线程执行，
(unsigned int)pid,
如果新创建的线程不调
我们在main函数return之前延
由于从main函数return也
58
---
## Page 658
看下面的例子（省略了出错处理）：
如果对thread线程的终止状态不感兴趣，
过pthread_join得到的终止状态是不同的，总结如下：
调用该函数的线程将挂起等待，直到id为thread的线程终止。thread线程以不同的方法终止，通
返回值：成功返回0，失败返回错误号
配的，不能在线程函数的栈上分配，因为当其它线程得到这个返回指针时线程函数已经退出了。
需要注意,
指针。
value_ptr是void *类型，和线程函数返回值的用法一样，其它线程可以调用pthread_join获得这个
以参考[APUE2e]。
用pthread_cancel终止一个线程分同步和异步两种情况，比较复杂，
·如果thread线程通过return返回，value_ptr 所指向的单元里存放的是thread线程函数的返回
的是常数PTHREAD_CANCELED。
值。
int pthread_join(pthread_t thread, void **value_ptr);
#include 
(6xex pTo△)euy xut* pTOA
void *thr_fnl(void *arg)
#include 
#include 
void pthread_exit(void *value_ptr);
#include 
void *thr_fn2(void *arg)
#include
while(l) {.
下面介绍pthread_exit的和pthread_join的用法。
printf("thread 3 writing\n");
 本章不打算详细介绍，读者可
658
---
## Page 659