  mythinpool  vg001    twi-a-tz 100.00m                         0.00
  thinvolume  vg001    Vwi-a-tz   1.00g mythinpool              0.00
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在使用精简配置时，存储管理员务必要监控存储池，并在其被完全占用时添加更多容量。有关扩展精简卷大小的详情，请参考
[创建精简配置的逻辑卷。](#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#creating-thinly-provisioned-volumes_thinly-provisioned-logical-volumes "创建精简配置的逻辑卷"){.link}
:::
精简快照卷具有与其它精简卷相同的特征。您可以独立激活卷、扩展卷、重新命名卷、删除卷、甚至快照卷。
默认情况下，在正常激活命令中会跳过快照卷。有关控制逻辑卷激活的详情请参考[逻辑卷激活](#assembly_lvm-activation-configuring-and-managing-logical-volumes.html "第 14 章 逻辑卷激活"){.link}。
您还可以为非置备的逻辑卷创建精简配置的快照。因为非置备的逻辑卷不在精简池中，所以它也被称为
[*外部原始卷*]{.emphasis}。外部原始卷可以被很多精简置备的快照卷使用和共享，即使在不同的精简池中也是如此。在创建精简置备快照时，外部原始源必须不活跃且只读。
要为外部来源创建精简配置的快照，您必须指定 `--thinpool`{.literal}
选项。以下命令会创建只读且不活跃卷 `origin_volume`{.literal}
的精简快照卷。精简快照卷名为 `mythinsnap`{.literal}。逻辑卷
`origin_volume`{.literal} 然后会成为卷组 `vg001`{.literal} 中精简快照卷
`mythinsnap`{.literal} 的外部源，它们将使用现有的精简池
`vg001/pool`{.literal}。因为原始卷必须与快照卷位于同一个卷组中，所以您在指定原始逻辑卷时不需要指定卷组。
``` literallayout
# lvcreate -s --thinpool vg001/pool origin_volume --name mythinsnap
```
您可以创建第一个快照卷的第二个精简置备快照卷，如下例所示。
``` literallayout
# lvcreate -s vg001/mythinsnap --name my2ndthinsnap
```
您可以通过指定 `lvs`{.literal} 命令的 `lv_ancestors`{.literal} 和
`lv_descendants`{.literal}
报告字段来显示精简快照逻辑卷的所有"祖先"和"后代"列表。
在以下示例中：
::: itemizedlist
-   `stack1`{.literal} 是卷组 `vg001`{.literal} 中的一个原始卷。
-   `stack2`{.literal} 是 `stack1`{.literal} 的快照
-   `stack3`{.literal} 是 `stack2`{.literal} 的快照
-   `stack4`{.literal} 是 `stack3`{.literal} 的快照
:::
另外：
::: itemizedlist
-   `stack5`{.literal} 也是 `stack2`{.literal} 的快照
-   `stack6`{.literal} 是 `stack5`{.literal} 的快照
:::
``` literallayout
$ lvs -o name,lv_ancestors,lv_descendants vg001
  LV      Ancestors              Descendants
  stack1                         stack2,stack3,stack4,stack5,stack6
  stack2  stack1                 stack3,stack4,stack5,stack6
  stack3  stack2,stack1          stack4
  stack4  stack3,stack2,stack1
  stack5  stack2,stack1          stack6
  stack6  stack5,stack2,stack1
  pool
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`lv_ancestors`{.literal} 和 `lv_descendants`{.literal}
字段显示现有的依赖关系，但没有跟踪删除的条目，如果从链中删除了该条目，则可能会破坏依赖项链。例如：如果您从这个示例配置中删除逻辑卷
`stack3`{.literal}，其显示如下。
``` literallayout
$ lvs -o name,lv_ancestors,lv_descendants vg001
  LV      Ancestors              Descendants
  stack1                         stack2,stack5,stack6
  stack2  stack1                 stack5,stack6
  stack4
  stack5  stack2,stack1          stack6
  stack6  stack5,stack2,stack1
  pool
```
您可以将您的系统配置为跟踪和显示已经删除的逻辑卷，您可以通过指定
`lv_ancestors_full`{.literal} 和 `lv_descendants_full`{.literal}
字段来显示包括那些卷的完整依赖链。
:::
:::
::: section
::: titlepage
# []{#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#_tracking_and_displaying_thin_snapshot_volumes_that_have_been_removed}跟踪并显示已删除的精简快照卷 {.title}
:::
您可以将您的系统配置为跟踪通过在 `lvm.conf`{.literal} 配置文件中启用
`record_lvs_history`{.literal}
元数据选项而删除的精简逻辑卷。这可让您显示完整的精简快照依赖性链，其中包括已经从原始依赖项链中删除的逻辑卷，并成为[*历史*]{.emphasis}逻辑卷。
您可以通过使用 `lvm.conf`{.literal} 配置文件中的
`lvs_history_retention_time`{.literal} metadata
选项指定保留时间（以秒为单位），将您的系统配置为在指定的时间段保留历史卷。
历史逻辑卷保留了已删除的逻辑卷的简化表示，其中包括以下卷报告字段：
::: itemizedlist
-   `lv_time_removed`{.literal}：删除逻辑卷的时间
-   `lv_time`{.literal}：逻辑卷的创建时间
-   `lv_name`{.literal}：逻辑卷的名称
-   `lv_uuid`{.literal}：逻辑卷的 UUID
-   `vg_name`{.literal}：包含逻辑卷的卷组。
:::
当删除卷时，历史逻辑卷名称会有一个 hypen 作为前缀。例如：当您删除逻辑卷
`lvol1`{.literal} 时，历史卷的名称为
`-lvol1`{.literal}。无法重新激活历史逻辑卷。
即使启用 `record_lvs_history`{.literal} 元数据选项，您可以通过指定
`lvremove`{.literal} 命令的 `--nohistory`{.literal}
选项来防止在删除逻辑卷时单独保留历史逻辑卷。
要在卷显示中包含历史逻辑卷，请指定 LVM display 命令的
`-H|--history`{.literal} 选项。您可以通过指定
`lv_full_ancestors`{.literal} 和 `lv_full_descendants`{.literal}
报告字段以及 `-H`{.literal}
选项来显示包括历史卷的完整精简快照依赖关系链。
下面的一系列命令提供了如何显示和管理历史逻辑卷的示例。
::: orderedlist
1.  通过在文件 `lvm.conf`{.literal} 中设置
    `record_lvs_history=1`{.literal}，确保保留了历史逻辑卷。默认不启用这个元数据选项。
2.  输入以下命令以显示精简置备的快照链。
    在本例中：
    ::: itemizedlist
    -   `lvol1`{.literal} 是原始卷，链中的第一个卷。
    -   `lvol2`{.literal} 是 `lvol1`{.literal} 的快照。
    -   `lvol3`{.literal} 是 `lvol2`{.literal} 的快照。
    -   `lvol4`{.literal} 是 `lvol3`{.literal} 的快照。
    -   `lvol5`{.literal} 也是 `lvol3`{.literal}的快照。
        请注意，虽然示例 `lvs`{.literal} display 命令包含 `-H`{.literal}
        选项，但还没有删除精简快照卷，且没有要显示的历史逻辑卷。
        ``` literallayout
        # lvs -H -o name,full_ancestors,full_descendants
          LV    FAncestors        FDescendants
          lvol1                   lvol2,lvol3,lvol4,lvol5
          lvol2 lvol1             lvol3,lvol4,lvol5
          lvol3 lvol2,lvol1       lvol4,lvol5
          lvol4 lvol3,lvol2,lvol1
          lvol5 lvol3,lvol2,lvol1
          pool
        ```
    :::
3.  从快照链中删除逻辑卷 `lvol3`{.literal} ，然后再次运行以下
    `lvs`{.literal} 命令查看如何显示历史逻辑卷，以及它们的祖先和后代。
    ``` literallayout
    # lvremove -f vg/lvol3
      Logical volume "lvol3" successfully removed
    # lvs -H -o name,full_ancestors,full_descendants
      LV     FAncestors         FDescendants
      lvol1                     lvol2,-lvol3,lvol4,lvol5
      lvol2  lvol1              -lvol3,lvol4,lvol5
      -lvol3 lvol2,lvol1        lvol4,lvol5
      lvol4  -lvol3,lvol2,lvol1
      lvol5  -lvol3,lvol2,lvol1
      pool
    ```
4.  您可以使用 `lv_time_removed`{.literal}
    报告字段显示删除历史卷的时间。
    ``` literallayout
    # lvs -H -o name,full_ancestors,full_descendants,time_removed
      LV     FAncestors         FDescendants              RTime
      lvol1                     lvol2,-lvol3,lvol4,lvol5
      lvol2  lvol1              -lvol3,lvol4,lvol5
      -lvol3 lvol2,lvol1        lvol4,lvol5               2016-03-14 14:14:32 +0100
      lvol4  -lvol3,lvol2,lvol1
      lvol5  -lvol3,lvol2,lvol1
      pool
    ```
5.  您可以通过指定 [*vgname/lvname*]{.emphasis} 格式在 display
    命令中单独引用历史逻辑卷，如下例所示。请注意，`lv_attr`{.literal}
    字段中的第五个位被设置为 `h`{.literal} 来表示卷是一个历史卷。
    ``` literallayout
    # lvs -H vg/-lvol3
      LV     VG   Attr       LSize
      -lvol3 vg   ----h-----    0
    ```
6.  如果卷没有实时子卷（后代），LVM
    不会保存历史逻辑卷。就是说，如果您在快照链末尾删除逻辑卷，则不会保留逻辑卷作为历史逻辑卷。
    ``` literallayout
    # lvremove -f vg/lvol5
      Automatically removing historical logical volume vg/-lvol5.
      Logical volume "lvol5" successfully removed
    # lvs -H -o name,full_ancestors,full_descendants
      LV     FAncestors         FDescendants
      lvol1                     lvol2,-lvol3,lvol4
      lvol2  lvol1              -lvol3,lvol4
      -lvol3 lvol2,lvol1        lvol4
      lvol4  -lvol3,lvol2,lvol1
      pool
    ```
7.  运行以下命令删除卷 `lvol1`{.literal} 和 `lvol2`{.literal}，并查看
    `lvs`{.literal} 命令在卷被删除后如何显示它们。
    ``` literallayout
    # lvremove -f vg/lvol1 vg/lvol2
      Logical volume "lvol1" successfully removed
      Logical volume "lvol2" successfully removed
    # lvs -H -o name,full_ancestors,full_descendants
      LV     FAncestors           FDescendants
      -lvol1                      -lvol2,-lvol3,lvol4
      -lvol2 -lvol1               -lvol3,lvol4
      -lvol3 -lvol2,-lvol1        lvol4
      lvol4  -lvol3,-lvol2,-lvol1
      pool
    ```
8.  要完全删除历史逻辑卷，您可以再次运行 `lvremove`{.literal}
    命令，指定包含连字符的历史卷名称，如下例所示。
    ``` literallayout
    # lvremove -f vg/-lvol3
    Historical logical volume "lvol3" successfully removed
    # lvs -H -o name,full_ancestors,full_descendants
      LV     FAncestors    FDescendants
      -lvol1               -lvol2,lvol4
      -lvol2 -lvol1        lvol4
      lvol4  -lvol2,-lvol1
      pool
    ```
9.  只要链中包含实时卷，就可以保留一个历史逻辑卷。这意味着，删除历史逻辑卷时也会删除链中的所有逻辑卷，如以下示例所示。
    ``` literallayout
    # lvremove -f vg/lvol4
      Automatically removing historical logical volume vg/-lvol1.
      Automatically removing historical logical volume vg/-lvol2.
      Automatically removing historical logical volume vg/-lvol4.
      Logical volume "lvol4" successfully removed
    ```
:::
:::
:::
[]{#enabling-caching-to-improve-logical-volume-performance_configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#enabling-caching-to-improve-logical-volume-performance_configuring-and-managing-logical-volumes.html#enabling-caching-to-improve-logical-volume-performance_configuring-and-managing-logical-volumes}第 13 章 启用缓存来提高逻辑卷性能 {.title}
:::
您可以在 LVM 逻辑卷中添加缓存以提高性能。LVM 然后使用快速设备（如
SSD）将 I/O 操作缓存到逻辑卷中。
下面的过程会从快速设备创建一个特殊的 LV，并将这个特殊 LV 附加到原始
LV，以便提高性能。
::: section
::: titlepage
# []{#enabling-caching-to-improve-logical-volume-performance_configuring-and-managing-logical-volumes.html#caching-methods-in-lvm_enabling-caching-to-improve-logical-volume-performance}LVM 中的缓存方法 {.title}
:::
LVM 提供以下缓存类型。每种模式适合逻辑卷中的不同类型的 I/O 模式。
::: variablelist
[`dm-cache`{.literal}]{.term}
:   这个方法可通过在更快的卷上缓存数据来加快频繁使用数据的访问速度。这个方法会缓存读写操作。
    `dm-cache`{.literal} 方法创建了类型为 `cache`{.literal} 的逻辑卷。
[`dm-writecache`{.literal}]{.term}
:   这个方法只缓存写操作。使用快速卷进行写入操作，然后将其迁移到后台较慢的磁盘中。快速卷通常是一个
    SSD 或持久内存（PMEM）磁盘。
    `dm-writecache`{.literal} 方法创建了类型为 `writecache`{.literal}
    的逻辑卷。
:::
::: itemizedlist
**其它资源**
-   有关缓存模式和其他详情的详情，请查看 `lvmcache(7)`{.literal} man
    page。
:::
:::
::: section
::: titlepage
# []{#enabling-caching-to-improve-logical-volume-performance_configuring-and-managing-logical-volumes.html#lvm-caching-components_enabling-caching-to-improve-logical-volume-performance}LVM 缓存组件 {.title}
:::
当您为逻辑卷启用缓存时，LVM
会重新命名并隐藏原始卷，并显示由原始逻辑卷组成的新逻辑卷。新逻辑卷的组成取决于缓存方法以及您是否使用
`cachevol`{.literal} 或者 `cachepool`{.literal} 选项。
`cachevol`{.literal} 和 `cachepool`{.literal}