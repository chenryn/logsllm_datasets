times even entire countries [8]—often employ ﬁlters to
block age-inappropriate content. Such ﬁlters often de-
pend on seeing the full URL being accessed (only 5% of
the entries on the Internet Watch Foundation’s blacklist
CONTEXT RRCONTEXT RWCONTEXT R–ABCCONTEXT WRCONTEXT WWCONTEXT W–CONTEXT –RCONTEXT –WCONTEXT ––RW–M1RW–M2CONTEXT ACONTEXT BCONTEXT CABCM1: RM2: RM1: RM2: WM1: RM2: –206are entire (sub-)domains [26]). With mcTLS, IT staﬀ
could conﬁgure their machines to allow their ﬁlter read-
only access to HTTP request headers, and user-owned
devices connecting to the network could be conﬁgured
to do the same dynamically via DHCP. The ﬁlter drops
non-compliant connections.
Corporate Firewall Most companies funnel all net-
work traﬃc through intrusion detection systems (IDS)/
ﬁrewalls/virus scanners. Currently, these devices either
ignore encrypted traﬃc or install root certiﬁcates on
employees’ devices, transparently giving themselves ac-
cess to all “secure” sessions. With mcTLS, administra-
tors can conﬁgure devices to give the IDS—which users
can now see—read-only access. Security appliances no
longer need to impersonate end servers and users no
longer grow accustomed to installing root certiﬁcates.
Online Banking Though we designed mcTLS to give
users control over their sessions, there are cases in which
the content provider really does know better than the
user and should be able to say “no” to middleboxes. A
prime example is online banking: banks have a respon-
sibility to protect careless or nontechnical users from
sharing their ﬁnancial information with third parties.
The server can easily prevent this by simply not giving
middleboxes its half of the context keys, regardless of
what level of access the client assigns.
HTTP/2 Streams One of the features of HTTP/2
is multiplexing multiple streams over a single transport
connection. mcTLS allows browsers to easily set diﬀer-
ent access controls for each stream.
5. EVALUATION
mcTLS’ ﬁne-grained access control requires gener-
ating and distributing extra keys, computing extra
MACs, and, possibly, sending a larger number of smaller
records than TLS. In this section we evaluate this over-
head.
Experimental Setup We built a prototype of
mcTLS by modifying the OpenSSL2 implementation
of TLSv1.2. The prototype supports all the features
of mcTLS’s default mode, described in §3.4 and §3.5.
We use the DHE-RSA-AES128-SHA256 cipher suite,
though nothing prevents mcTLS from working with any
standard key exchange, encryption, or MAC algorithm.
In addition, though the MiddleboxKeyMaterial mes-
sage should be encrypted using a key generated from
the DHE key exchange between the endpoints and the
middlebox, we use RSA public key cryptography for
simplicity in our implementation. As a result, forward
secrecy is not currently supported by our implementa-
tion. mcTLS requires some additions to the API, e.g.,
deﬁning contexts and their read/write permissions, but
these are similar to the current OpenSSL API.
2OpenSSL v1.0.1j from October 2014
Next we wrote a simple HTTP client, server, and
proxy and support four modes of operation:
(1) mcTLS: Data transferred using mcTLS.
(2) SplitTLS: Split TLS connections between hops;
middleboxes decrypt and re-encrypt data.
(3) E2E-TLS: A single end-to-end TLS connection;
middleboxes blindly forward encrypted data.
(4) NoEncrypt: No encryption; data transferred and
forwarded in the clear over TCP.
We instrumented the mcTLS library and our applica-
tions to measure handshake duration, ﬁle transfer time,
data volume overhead, and connections per second.
We test in two environments. (1) Controlled : Client,
middleboxes, and server all run on a single machine.
We control bandwidth (10 Mbps unless otherwise noted,
chosen from the median of SpeedTest.net samples) and
latency with tc.
(2) Wide Area: We run the client,
middlebox, and server on EC2 instances in Spain, Ire-
land, and California, respectively. The client connects
either over ﬁber or 3G. Unless otherwise speciﬁed, ex-
periments in either environment consist of 50 runs for
which we report the mean; error bars indicate one stan-
dard deviation. Middleboxes are given full read/write
access to each context since this is the worst case for
mcTLS performance.
5.1 Time Overhead
Handshake Time Figure 3 (left) shows the time to
ﬁrst byte as the number of contexts increases. There is
one middlebox and each link has a 20 ms delay (80 ms
total RTT). NoEncrypt serves as a baseline, with a time
to ﬁrst byte of 160 ms, or 2 RTT. Up to 9 contexts,
mcTLS, E2E-TLS, and SplitTLS each take 4 RTTs. At
10 contexts, mcTLS jumps to 5 RTT and at 14 to 7.
The culprit was TCP’s Nagle algorithm, which de-
lays the transmission of data until a full MSS is ready
to be sent. At 10 contexts, the handshake messages
from the proxy to the server exceed 1 MSS and Nagle
holds the extra bytes until the ﬁrst MSS is ACKed. At
14 contexts the same thing happens to the middlebox
key material from the client (+1 RTT) and the server
(+1 RTT). Disabling the Nagle algorithm (not uncom-
mon in practice [23]) solved the problem. We tried E2E-
TLS, SplitTLS, and NoEncrypt without Nagle as well,
but their performance did not improve since their mes-
sages never exceed 1 MSS.
Time to ﬁrst byte scales linearly with the number of
middleboxes, since in our experiments adding a middle-
box also adds a 20 ms link (Figure 3 right). The latency
increase and the extra key material to distribute exac-
erbate the problems caused by Nagle; disabling it once
again brings mcTLS performance in line with E2E-TLS
and SplitTLS. Finally, if middleboxes lie directly on
the data path (which often happens), then the only ad-
ditional overhead is processing time, which is minimal.
Takeaway: mcTLS’s handshake is not discernibly
longer than SplitTLS’s or E2E-TLS’s.
207Figure 3: Time to ﬁrst byte vs. # contexts (left) and # middleboxes (right).
Figure 4: Page load time for diﬀer-
ent numbers of mcTLS contexts.
Figure 5: Load sustainable at the server (left) and middlebox (right).
Figure 6: Page load time.
File Transfer Time
Next we explore the tim-
ing behavior of each full protocol by transferring ﬁles
through a single middlebox. To choose realistic ﬁle
sizes, we loaded the top 500 Alexa pages and picked
the 10th, 50th, and 99th percentile object sizes (0.5 kB,
4.9 kB, and 185 kB, respectively). We also consider
large (10MB) downloads (e.g., larger zip ﬁles or video
chunks).
The ﬁrst four bar groups in Figure 7 show the down-
load time for increasing ﬁle sizes at 1 Mbps; each bar
represents 10 repetitions. As expected, the handshake
overhead dominates for smaller ﬁles (<5 kB); all proto-
cols that use encryption require an additional ∼17 ms
compared to NoEncrypt. mcTLS is comparable to E2E-
TLS and SplitTLS. We see the same behavior when
downloading ﬁles at diﬀerent link rates or in the wide
area (last four bar groups). Handshake and data trans-
fer dominate download time; protocol-speciﬁc process-
ing makes little diﬀerence.
Takeaway: mcTLS transfer times are not substantially
higher than SplitTLS or E2E-TLS irrespective of link
type, bandwidth, or ﬁle size.
Page Load Time
To understand how the micro-
benchmarks above translate to real-world performance,
we examine web page load time. Though we have not
yet ported a full-blown web browser to mcTLS, we ap-
proximate a full page load in our simple client as follows.
First, we load all of the Alexa top 500 pages that sup-
port HTTPS in Chrome. For each page, we extract a
list of the objects loaded, their sizes, and whether or not
an existing connection was re-used to fetch each one (we
cannot tell which connection was used, so we assign the
object to an existing one chosen at random). Next, our
client “plays back” the page load by requesting dummy
objects of the appropriate sizes from the server. We
make the simplifying assumption that each object de-
pends only on the previous object loaded in the same
connection (this might introduce false dependencies and
ignore true ones).
First, we compare three mcTLS strategies: 1-Context
(all data in one context), 4-Context (request headers, re-
quest body, response headers, response body), and Con-
textPerHeader (one context for each HTTP header, one
for request body, and one for response body). Figure 4
shows the CDF of page load times for each strategy.
The plot shows similar performance for each strategy,
indicating that mcTLS is not overly sensitive to the way
data is placed into contexts.
Next we compare mcTLS to SplitTLS, E2E-TLS, and
NoEncrypt (Figure 6). We use the 4-Context strategy
for mcTLS, since we imagine it will be the most com-
mon. SplitTLS, E2E-TLS, and NoEncrypt perform the
same, while mcTLS adds a half second or more. Once
again, Nagle is to blame: sending data in multiple con-
texts causes back-to-back send() calls to TCP. The ﬁrst
record is sent immediately, but the subsequent records
are held because they are smaller than an MSS and
there is unacknowledged data in ﬂight. Repeating the
experiment with Nagle turned oﬀ closed the gap.
Takeaway: mcTLS has no impact on real world Web
page load times.
0246810121416Number of Contexts150200250300350400450500550600Time to First Byte (ms)2 RTT3 RTT4 RTTmcTLSSplitTLSE2E-TLSNoEncryptmcTLS (Nagle off)0246810121416Number of Middleboxes050010001500200025003000350040004500Time to First Byte (ms)2 RTT3 RTT4 RTTmcTLSSplitTLSE2E-TLSNoEncryptmcTLS (Nagle off)05101520253035Load Time (s)0.00.20.40.60.81.0CDFmcTLS (1 Ctx)mcTLS (1 Ctx, Nagle Off)mcTLS (4 Ctx)mcTLS (4 Ctx, Nagle Off)mcTLS (Ctx per Hdr)mcTLS (Ctx per Hdr, Nagle Off)0246810121416Number of Contexts0100200300400500600Connections per SecondmcTLSSplitTLSE2E-TLSmcTLS (2 mbox)mcTLS (4 mbox)0246810121416Number of Contexts0500100015002000250030003500Connections per SecondmcTLSSplitTLSE2E-TLSmcTLS (2 mbox)mcTLS (4 mbox)0510152025Load Time (s)0.00.20.40.60.81.0CDFmcTLS (4 Ctx)SplitTLS (Nagle off)E2E-TLS (Nagle off)NoEncrypt (Nagle off)mcTLS (4 Ctx, Nagle Off)208Figure 7: File download time for various conﬁgurations of link speed and ﬁle size.
TLS; that number drops to 35% fewer as the number of
contexts, and therefore the number of partial context
keys the server must encrypt, increases. We note two
things: (1) key distribution optimizations, which we in-
tend to pursue in future work, can shrink this gap, and
(2) the server can reclaim this lost performance if the
client handles key generation/distribution (§3.6).
The results for the middlebox are more interesting
(Figure 5 right). First, E2E-TLS signiﬁcantly outper-
forms mcTLS and SplitTLS (note the change in Y scale)
because it does not participate in a TLS handshake.
Second, mcTLS performs better than SplitTLS because
in SplitTLS the proxy has to participate in two TLS
handshakes. These results show it is not only feasible,
but practical to use middleboxes in the core network.
Takeaway: mcTLS servers can serve 23%–35% fewer
connections per second than SplitTLS, but mcTLS mid-
dleboxes can serve 45%–75% more.
5.4 Deployment
To begin understanding deployability, we built an
extension to the Ruby SSL library that adds support
for mcTLS with less than 250 lines of C code. Using
the extension, we then built a 17 line Ruby web client
with the same functionality as our C/OpenSSL-based
evaluation client. While a bit more work is needed to
make the extension more Ruby-like, the potential to eas-
ily write mcTLS-enabled mobile apps with developer-
friendly tools like RubyMotion3 is promising.
We also modiﬁed the OpenSSL s_time benchmarking
tool to support mcTLS. Again, minimal changes were
required: less than 30 new lines of C code were added,
and about 10 lines were slightly changed. This means
that relatively minor developer eﬀort is required to gain
the full beneﬁts of mcTLS.
While supporting ﬁne-grained access control requires
the minimal eﬀort of assigning data to a context and
setting middlebox permissions for those contexts, many
of the beneﬁts of mcTLS are immediately available with
just support from the HTTP client library and server.
For example, HTTP libraries could use the 4-Context
strategy by default, requiring no additional program-
3http://www.rubymotion.com/
Figure 8: Handshake sizes.
5.2 Data Volume Overhead
Most of mcTLS’ data overhead comes from the hand-
shake, and it increases with the number of middleboxes
and contexts (due to certiﬁcates and context key distri-
bution). Figure 8 shows the total size of the handshake
for diﬀerent numbers of contexts and middleboxes. For
a base conﬁguration with one context and no middle-
boxes, the mcTLS handshake is 2.1 kB compared to
1.6 kB for SplitTLS and E2E-TLS. Note that the hand-
shake size is independent of the ﬁle size.
Next, each record carries MACs (three in mcTLS,
one in TLS). Their impact depends on the application’s
sending pattern—smaller records mean larger overhead.
For the web browsing experiments in §5.1, the median
MAC overhead for SplitTLS compared to NoEncrypt
was 0.6%; as expected, mcTLS triples that to 2.4%.
Finally, padding and header overhead are negligible.
Takeaway: Apart from the initial handshake overhead,
which is negligible for all but short connections, mcTLS
introduces less than 2% additional overhead for web
browsing compared to SplitTLS or E2E-TLS.
5.3 CPU Overhead
Figure 5 (left) shows the number of connections (only
handshakes) per second the server can sustain. We see
that the extra asymmetric encryption for distributing
middlebox key material takes a toll. The mcTLS server
handles 23% fewer connections than SplitTLS or E2E-
1 Mbps0.5 kBControlled1 Mbps4.9 kBControlled1 Mbps185.6 kBControlled1 Mbps10240.0 kBControlled10 Mbps185.6 kBControlled100 Mbps185.6 kBControlledFiber185.6 kBWide Area3G185.6 kBWide Area0110100Download Time (s)mcTLSSplitTLSE2E-TLSNoEncryptmcTLS (Nagle off)Ctxts: 1Mbox: 0Ctxts: 4Mbox: 0Ctxts: 8Mbox: 0Ctxts: 4Mbox: 1Ctxts: 4Mbox: 2012345678Size (kB)mcTLSSplitTLSE2E-TLS209ming or eﬀort from application developers. Finally, we
note that clients and servers can easily fall back to reg-
ular TLS if an mcTLS connection cannot be negotiated.
Takeaway: Upgrading an application or library to
mcTLS appears to be straightforward and easy.
6. DISCUSSION
6.1 Middlebox Discovery
mcTLS assumes that the client has a list of middle-
boxes prior to initiating a handshake, which it includes
in the ClientHello. Building this list is largely orthog-
onal to mcTLS itself; many existing mechanisms could
be used, depending on who is trying to add a middlebox
to the session. For example:
• Users or system administrators might conﬁg-
ure the client (application or OS) directly (e.g.,
the user might point his browser toward Google’s
SPDY proxy).
If users express interest in, e.g.,
a “nearby” data compression proxy, rather than
a particular one, clients could discover available
proxies using mDNS [10] or DNS-SD [9].
• Content providers could specify middleboxes to
be used in any connection to its servers using DNS.
• Network
use DHCP or
PDP/PDN to inform clients of any required
middleboxes (e.g., virus scanners).
operators
can
If a priori mechanisms like these are not ﬂexible
enough, the handshake could be extended to allow, e.g.,
on-path middleboxes to insert themselves (subject to
subsequent approval by the endpoints, of course) dur-
ing session setup. The costs and beneﬁts of this are not
immediately clear; we leave working out the details of
more complex session negotiation for future work.
6.2 User Interface
The technical solution for adding middleboxes to se-
cure communication sessions means little without suit-
able interfaces through which users can control it. The
primary challenges for such an interface are:
• Indicating to the user that the session is “secure.”
Re-using the well-known lock icon is misleading,
since the semantics of TLS and mcTLS diﬀer.
• Communicating to the user who can do what.
Which middleboxes can read the user’s data?
Which can modify it? What modiﬁcations do they
make? Who owns the middleboxes? Who added
them to the session and why?
• Allowing users to set access controls. Which ses-
sions can a middlebox see? Within those sessions,
which ﬁelds can it read or write? The diﬃculty is
making such controls simple and scalable. For in-