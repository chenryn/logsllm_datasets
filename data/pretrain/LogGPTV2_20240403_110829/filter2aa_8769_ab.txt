        for i in range(8):
	        o = generate(o)
        	k.extend(o)
        	o = string_to_bits([chr(c) for c in o[0:24]])
        self.Kn = []
        for i in range(32):
            self.Kn.append(map(chr, k[i * 8: i * 8 + 8]))
        return
    def encrypt(self, plaintext):
        if (len(plaintext) % 16 != 0 or isinstance(plaintext, bytes) == False):
            raise Exception("plaintext must be a multiple of 16 in length")
        res = ''
        for i in range(len(plaintext) / 16):
            block = plaintext[i * 16:(i + 1) * 16]
            L = block[:8]
            R = block[8:]
            for round_cnt in range(32):
                L, R = R, (round_add(L, self.Kn[round_cnt]))
            L, R = R, L
            res += L + R
        return res
```
显然，我们可以将其视为一个 Feistel 加密的方式，解密函数如下
```python
    def decrypt(self,ciphertext):
        res = ''
        for i in range(len(ciphertext) / 16):
            block = ciphertext[i * 16:(i + 1) * 16]
            L = block[:8]
            R = block[8:]
            for round_cnt in range(32):
                L, R =R, (round_add(L, self.Kn[31-round_cnt]))
            L,R=R,L
            res += L + R
        return res
```
最后结果为
```shell
➜  baby_N1ES cat challenge.py
from N1ES import N1ES
import base64
key = "wxy191iss00000000000cute"
n1es = N1ES(key)
flag = "N1CTF{*****************************************}"
cipher = n1es.encrypt(flag)
#print base64.b64encode(cipher)  # HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx
cipher = 'HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx'
cipher = base64.b64decode(cipher)
print n1es.decrypt(cipher)
➜  baby_N1ES python challenge.py
N1CTF{F3istel_n3tw0rk_c4n_b3_ea5i1y_s0lv3d_/--/}
```
## 2019 CISCN  part_des
题目只给了一个文件：
```
Round n part_encode-> 0x92d915250119e12b
Key map -> 0xe0be661032d5f0b676f82095e4d67623628fe6d376363183aed373a60167af537b46abc2af53d97485591f5bd94b944a3f49d94897ea1f699d1cdc291f2d9d4a5c705f2cad89e938dbacaca15e10d8aeaed90236f0be2e954a8cf0bea6112e84
```
考虑到题目名以及数据特征，`Round n part_encode` 为执行n轮des的中间结果，`Key map` 应为des的子密钥，要还原出明文只需进行n轮des加密的逆过程即可，解密时注意以下三点。
- 子密钥的选取，对于只进行了n轮的加密结果，解密时应依次使用密钥 n, n-1..., 1。
- des 最后一轮后的操作，未完成的 des 没有交换左右两部分和逆初始置换，因此解密时我们应先对密文进行这两步操作。
- n 的选择，在本题中，我们并不知道 n，但这无关紧要，我们可以尝试所有可能的取值（0-15）flag应为ascii字符串。
??? note "解题代码"
    ``` python
    kkk = 16
    def bit_rot_left(lst, pos):
    	return lst[pos:] + lst[:pos]
    class DES:
    	IP = [
    	        58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,
    	        62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,
    	        57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,
    	        61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7
    	    ]
    	IP_re = [
    	        40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,
    	        38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,
    	        36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,
    	        34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25
    	    ]
    	Pbox = [
    	        16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,
    	        2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25
    	    ]
    	E = [
    	        32,1,2,3,4,5,4,5,6,7,8,9,
    	        8,9,10,11,12,13,12,13,14,15,16,17,
    	        16,17,18,19,20,21,20,21,22,23,24,25,
    	        24,25,26,27,28,29,28,29,30,31,32,1
    	    ]
    	PC1 = [
    	            57,49,41,33,25,17,9,1,58,50,42,34,26,18,
    	            10,2,59,51,43,35,27,19,11,3,60,52,44,36,
    	            63,55,47,39,31,23,15,7,62,54,46,38,30,22,
    	            14,6,61,53,45,37,29,21,13,5,28,20,12,4
    	    ]
    	PC2 = [
    	        14,17,11,24,1,5,3,28,15,6,21,10,
    	        23,19,12,4,26,8,16,7,27,20,13,2,
    	        41,52,31,37,47,55,30,40,51,45,33,48,
    	        44,49,39,56,34,53,46,42,50,36,29,32
    	    ]
    	Sbox = [
    	        [