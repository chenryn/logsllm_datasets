        mov  
eax, DWORD PTR _a$[ebp] 
        add  
eax, DWORD PTR _b$[ebp] 
        mov  
DWORD PTR _a$[ebp], eax 
        mov  
ecx, DWORD PTR _a$[ebp] 
        push  
ecx 
        push  
OFFSET $SG2938 ; '%d', 0aH 
        call  
_printf 
        add  
esp, 8 
        pop  
ebp 
        ret  
0 
_f       ENDP 
由此可见，只要这些参数不是 C++的引用指针/references（本书的 51.3 节）也不是数据指针，那么被
调用方函数可以随便操作外部传来的参数。 
理论上讲，在被调用方函数结束以后，调用方函数能够获取被调用方函数修改过的参数，对它们
加以进一步利用。然而实际上我们只能在手写的汇编指令中遇到这种情况，C/C++语言并不支持这种
访问方法。 
 64.8  指针型函数参数 
我们可以给函数参数分配一个指针，把它调配给其他函数： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
650 
逆向工程权威指南（下册） 
#include  
// located in some other file 
void modify_a (int *a); 
void f (int a) 
{ 
        modify_a (&a); 
        printf ("%d\n", a); 
}; 
要不是看了下面的汇编代码，我们一时还很难理解这段程序是如何运行的。 
指令清单 64.10  MSVC 2010 的优化 
$SG2796 DB   
'%d', 0aH, 00H 
_a$ = 8 
_f  
   PROC 
        lea  
eax, DWORD PTR _a$[esp-4] ; just get the address of value in local stack 
        push  
eax   
; and pass it to modify_a() 
        call  
_modify_a 
        mov  
ecx, DWORD PTR _a$[esp]  ; reload it from the local stack 
        push  
ecx   
; and pass it to printf() 
        push  
OFFSET $SG2796 ; '%d' 
        call  
_printf 
        add  
esp, 12 
        ret  
0 
_f       ENDP 
变量 a 的地址通过栈传递给了一个函数，然后这个地址又被传递给了另外一个函数。第一个函数修改
了变量 a 的值，而后 printf()函数获取到了这个修改后的变量值。 
细心的读者可能会问：使用一种直接通过寄存器传递参数的调用约定，又会是什么情况呢？ 
即便真地使用了这种调用约定，还会有阴影空间（Shadow Space）的问题。传递的数值将会从寄存器
保存到了本地栈的阴影空间里，然后以地址的形式传递给其他函数。 
指令清单 64.11  优化的 MSVC 2012（64 位） 
$SG2994 DB   
'%d', 0aH, 00H 
a$ = 48 
f        PROC 
        mov  
DWORD PTR [rsp+8], ecx ; save input value in Shadow Space 
        sub  
rsp, 40 
        lea  
rcx, QWORD PTR a$[rsp] ; get address of value and pass it to modify_a() 
        call  
modify_a 
        mov  
edx, DWORD PTR a$[rsp] ; reload value from Shadow Space and pass it to printf() 
        lea  
rcx, OFFSET FLAT:$SG2994 ; '%d' 
        call  
printf 
        add  
rsp, 40 
        ret  
0 
f         ENDP 
GCC 也将输入的数值保存到本地栈。 
指令清单 64.12  优化的 GCC 4.9.1（64 位） 
.LC0: 
        .string "%d\n" 
f: 
        sub  
rsp, 24 
        mov  
DWORD PTR [rsp+12], edi  ; store input value to the local stack 
        lea  
rdi, [rsp+12]   
; take an address of the value and pass it to modify_a() 
        call  
modify_a 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 64 章  参数的传递方法（调用规范） 
651 
        mov  
edx, DWORD PTR [rsp+12]  ; reload value from the local stack and pass it to printf() 
        mov  
esi, OFFSET FLAT:.LC0  
; '%d' 
        mov  
edi, 1 
        xor  
eax, eax 
        call  
__printf_chk 
        add  
rsp, 24 
        ret 
ARM64 下的 GCC 也已同样的方式传递参数。只是在这个平台上，这个空间被称为“寄存器（内容）
保存区（Register Save Area）”。 
指令清单 64.13  优化的 GCC 4.9.1 ARM64 
f: 
        stp  
x29, x30, [sp, -32]! 
        add  
x29, sp, 0  
    ; setup FP 
        add  
x1, x29, 32  
    ; calculate address of variable in Register Save Area 
        str  
w0, [x1,-4]!  
    ; store input value there 
        mov  
x0, x1  
    ; pass address of variable to the modify_a() 
        bl   
modify_a 
        ldr  
w1, [x29,28]  
    ; load value from the variable and pass it to printf() 
        adrp  
x0, .LC0 ; '%d' 
        add  
x0, x0, :lo12:.LC0 
        bl   
printf  
    ; call printf() 
        ldp  
x29, x30, [sp], 32 
        ret 
.LC0: 
        .string "%d\n" 
另外，与阴影空间（Shadow Space）的有关话题还可以参阅本书的 46.1.2 节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 6655 章
章    线
线程
程本
本地
地存
存储
储 TTLLSS  
线程本地存储（Thread Local Storage，TLS）是一种在线程内部共享数据的数据交换区域。每个线程都
可以在这个区域保存它们要在内部共享的数据。一个比较知名的例子是 C 语言的全局变量 errno。对于 errno
这类的全局变量来说，如果多线程进程的某一个线程对其进行了修改，那么这个变量就会影响到其他所有
的线程。这显然和实际需求相悖，因此全局变量 errno 必须保存在 TLS 中。 
为解决这个矛盾，C++ 11 标准新增了一个限定符 thread_local。它能将指定变量和特定的线程联系起来。
由它限定的变量能被初始化，并且会被保存在 TLS 中。 
指令清单 65.1  C++11 
#include  
#include  
thread_local int tmp=3; 
int main() 
{ 
        std::cout  
 2  #include  
 3  #include  
 4 
 5  // from the Numerical Recipes book: 
 6  #define RNG_a 1664525 
 7  #define RNG_c 1013904223 
 8 
 9  __declspec( thread ) uint32_t rand_state; 
10 
11  void my_srand (uint32_t init) 
12  { 
13  
  rand_state=init; 
14  } 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 65 章  线程本地存储 TLS 
653 
15 
16  int my_rand () 
17  { 
18 
  rand_state=rand_state*RNG_a; 
19 
  rand_state=rand_state+RNG_c; 
20 
  return rand_state & 0x7fff; 
21  } 
22 
23  int main() 
24  { 
25 
  my_srand(0x12345678); 
26 
  printf ("%d\n", my_rand()); 
27  }; 
用 MSVC 2013 编译上述程序，再用 Hiew 打开最后生成的可执行文件。我们可以看到这种文件的 PE
部分出现了全新的 TLS 段：  
指令清单 65.2  优化的 MSVC 2013 x86 
_TLS SEGMENT 
_rand_state DD 01H DUP (?) 
_TLS ENDS 
_DATA SEGMENT 
$SG84851 DB  
'%d', 0aH, 00H 
_DATA ENDS 
_TEXT SEGMENT 
_init$ = 8   
    ; size = 4 
_my_srand PROC 
; FS:0=address of TIB 
        mov  
eax, DWORD PTR fs:__tls_array ; displayed in IDA as FS:2Ch 
; EAX=address of TLS of process 
        mov  
ecx, DWORD PTR __tls_index 
        mov  
ecx, DWORD PTR [eax+ecx*4] 
; ECX=current TLS segment 
        mov  
eax, DWORD PTR _init$[esp-4] 
        mov  
DWORD PTR _rand_state[ecx], eax 
        ret  
0 
_my_srand ENDP 
_my_rand PROC 
; FS:0=address of TIB 
        mov  
eax, DWORD PTR fs:__tls_array ; displayed in IDA as FS:2Ch 
; EAX=address of TLS of process 
        mov  
ecx, DWORD PTR __tls_index 
        mov  
ecx, DWORD PTR [eax+ecx*4] 
; ECX=current TLS segment 
        imul  
eax, DWORD PTR _rand_state[ecx], 1664525 
        add  
eax, 1013904223  
    ; 3c6ef35fH 
        mov  
DWORD PTR _rand_state[ecx], eax 
        and  
eax, 32767  
    ; 00007fffH 
        ret  
0 
_my_rand ENDP 
_TEXT ENDS 
参数 rand_state 现在是位于 TLS 段中。此后每个线程都会拥有各自的 rand_state 。这里表示的是如何
寻址：从 FS:2Ch 调用线程信息块（Thread Information Block，TIB）的地址。如果需要，再增加一个额外
的索引，最后再计算 TLS 段的地址。 
这种程序的线程可以通过 ECX 寄存器访问各自的 rand_state 变量，因为该变量在各个线程的地址不再
相同。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
654 
逆向工程权威指南（下册） 
FS 段选择器并不陌生。它其实就是 TIB 的专用指针，用于提高线程数据的加载速度。 
GS 段选择器是 Win64 程序使用的额外的索引寄存器。 
在下面这个程序里，TLS 的地址是 0x58。 
指令清单 65.3  优化的 MSVC 2013（64 位） 
_TLS    SEGMENT 
rand_state DD  
01H DUP (?) 
_TLS    ENDS 
_DATA    SEGMENT 
$SG85451 DB  
'%d', 0aH, 00H 
_DATA    ENDS 
_TEXT    SEGMENT 
init$ = 8 
my_srand PROC 
        mov  
edx, DWORD PTR _tls_index 
        mov  
rax, QWORD PTR gs:88 ; 58h 
        mov  
r8d, OFFSET FLAT:rand_state 
        mov  
rax, QWORD PTR [rax+rdx*8] 
        mov  
DWORD PTR [r8+rax], ecx 