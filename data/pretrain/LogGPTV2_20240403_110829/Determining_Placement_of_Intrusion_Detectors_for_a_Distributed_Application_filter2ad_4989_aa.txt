title:Determining Placement of Intrusion Detectors for a Distributed Application
through Bayesian Network Modeling
author:Gaspar Modelo-Howard and
Saurabh Bagchi and
Guy Lebanon
Determining Placement of Intrusion Detectors
for a Distributed Application
through Bayesian Network Modeling
Gaspar Modelo-Howard, Saurabh Bagchi, and Guy Lebanon
School of Electrical and Computer Engineering, Purdue University
465 Northwestern Avenue, West Lafayette, IN 47907 USA
{gmodeloh,sbagchi,lebanon}@purdue.edu
Abstract. To secure today’s computer systems, it is critical to have dif-
ferent intrusion detection sensors embedded in them. The complexity of
distributed computer systems makes it diﬃcult to determine the appro-
priate conﬁguration of these detectors, i.e., their choice and placement.
In this paper, we describe a method to evaluate the eﬀect of the detector
conﬁguration on the accuracy and precision of determining security goals
in the system. For this, we develop a Bayesian network model for the
distributed system, from an attack graph representation of multi-stage
attacks in the system. We use Bayesian inference to solve the problem of
determining the likelihood that an attack goal has been achieved, given
a certain set of detector alerts. We quantify the overall detection perfor-
mance in the system for diﬀerent detector settings, namely, choice and
placement of the detectors, their quality, and levels of uncertainty of
adversarial behavior. These observations lead us to a greedy algorithm
for determining the optimal detector settings in a large-scale distributed
system. We present the results of experiments on Bayesian networks rep-
resenting two real distributed systems and real attacks on them.
Keywords: Intrusion detection, detector placement, Bayesian networks,
attack graph.
1 Introduction
It is critical to provide intrusion detection to secure today’s distributed com-
puter systems. The overall intrusion detection strategy involves placing multiple
detectors at diﬀerent points of the system, at network ingress or combination
points, speciﬁc hosts executing parts of the distributed system, or embedded in
speciﬁc applications that form part of the distributed system. At the current
time, the placement of the detectors and the choice of the detectors are more an
art than a science, relying on expert knowledge of the system administrator.
The impact of the choice is signiﬁcant on the accuracy and precision of the
overall detection function in the system. The detectors are of diﬀerent qualities,
in terms of their false positive (FP) and false negative (FN) rates, some may
have overlapping functionalities, and there may be many possible positions for
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 271–290, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
272
G. Modelo-Howard, S. Bagchi, and G. Lebanon
deploying a detector. Therefore the entire space of exploration is large and yet
not much exists today to serve as a scientiﬁc basis for the choices. This paper is
a step in that direction.
In the choice of the number of detectors, more is not always better. There
are several reasons why an extreme design choice of a detector at every possible
network point, host, and application may not be ideal. First, there is the eco-
nomic cost of acquiring, conﬁguring, and maintaining the detectors. Detectors
are well-known to need tuning to achieve their best performance and to meet
the targeted needs of the application (speciﬁcally in terms of the false positive-
false negative performance balance). Second, a large number of detectors would
mean a large number of alert streams under attack as well as benign conditions.
These could overwhelm the manual or automated process in place to respond
to intrusion alerts. Third, detectors impose a performance penalty on the dis-
tributed system that they are meant to protect. The penalty arises because the
detectors typically share the computational cycles and the bandwidth along with
the application. Fourth, a system owner may have speciﬁc security goals, e.g.,
detecting a security goal may be very important and requires high sensitivity,
while another may need to be done with less tolerance for false positives.
The problem that we address in this paper is, given the security goals in a
system and a model for the way multi-stage attacks can spread in the system,
how can we automatically and based on scientiﬁc principles, select the right set
of detectors and their placements. Right is determined by an application-speciﬁc
requirement on the true positive (TP) - true negative (TN) rate of detection in
the system. We explore the space of the conﬁguration of the individual detectors,
their placement on the diﬀerent hosts or network points, and their number.
Our solution approach starts with attack graphs, which are a popular repre-
sentation for multi-stage attacks [9]. Attack graphs are a graphical representation
of the diﬀerent ways multi-stage attacks can be launched against system. The
nodes depict successful intermediate attack goals with the end nodes represent-
ing the ultimate goal of an attack. The edges represent the relation that one
attack goal is a stepping stone to another goal and will thus have to be achieved
before the other. The nodes can be represented at diﬀerent levels of abstraction,
thus the attack graph representation can bypass the criticism that detailed at-
tack methods and steps will need to be known a priori to be represented (which
is almost never the case for reasonably complex systems). Research in the area
of attack graphs has included automation techniques to generate these graphs
[11], [25], to analyze them [14], [21], and to reason about the completeness of
these graphs [14].
We model the probabilistic relation between attack steps and the detectors
using the statistical Bayesian network formalism. Bayesian network is particu-
larly appealing in this setting since it enables computationally eﬃcient inference
for the unobserved nodes—the attack goals—based on the observed nodes—the
detector alerts. The important question that Bayesian inference can answer for
us is, given a set of detector alerts, what is the likelihood that an attack goal
has been achieved. Further the Bayesian network can be relatively easily created
Determining Placement of Intrusion Detectors
273
from an attack graph structure for the system, which we assume is given by
existing methods.
We design an algorithm to systematically perform Bayesian inference and de-
termine the accuracy and precision for determining that attack goals have been
achieved. The algorithm then chooses the number, placement, and choice of de-
tectors that gives the highest value of an application-speciﬁc utility function. We
apply our technique to two speciﬁc systems—a distributed e-commerce system
and a Voice-over-IP (VoIP) system and demonstrate the optimal choice under
diﬀerent conditions. The conditions we explore are diﬀerent qualities of detec-
tors, diﬀerent level of knowledge of attack paths, and diﬀerent threshold settings
by the system administrator for determining if an attack goal is reached. Our
exploration also shows that the value of a detector for determining an attack
step degrades exponentially with distance from the site of the attack.
The rest of this document is organized as follows. Section 2 introduces the
attack graphs model and provides a brief presentation of inference in Bayesian
networks. Section 3 describes the model and algorithm used to determine an
appropriate location for detectors. Section 4 provides a description of the sys-
tems used in our experiments. Section 5 presents a complete description of the
experiments along with their motivations to help determine the location of the
intrusion detectors. Section 6 presents related work and section 7 concludes the
paper and discusses future work.
2 Background
2.1 Attack Graphs
An attack graph is a representation of the diﬀerent methods by which a distrib-
uted system can be compromised. It represents the intermediate attack goals for
a hypothetical adversary leading up to some high level attack goals. The attack
goal may be in terms of violating one or more of conﬁdentiality, integrity, or
availability of a component in the system. It is particularly suitable for repre-
senting multi-stage attacks, in which a successful attack step (or steps) is used
to achieve success in a subsequent attack step. An edge will connect the an-
tecedent (or precondition) stage to the consequent (or postcondition) stage. To
be accurate, this discussion reﬂects the notion of one kind of attack graph, called
the exploit-dependency attack graph [11], [14], [25], but this is by far the most
common type and considering the other subclass will not be discussed further in
this paper.
Recent advances in attack graph generation have been able to create graphs
for systems of up to hundreds and thousands of hosts [11], [25].
For our detector-location framework, exploit-dependency attack graphs are
used as the base graph from which we build the Bayesian network. For the rest
of this paper, the vertex representing an exploit in the distributed system will
be called an attack step.
274
G. Modelo-Howard, S. Bagchi, and G. Lebanon
Fig. 1. Attack graph model for a sample web server. There are three starting vertices,
representing three vulnerabilities found in diﬀerent services of the server, from where
the attacker can elevate the privileges in order to reach the ﬁnal goal of compromising
the password ﬁle.
2.2 Inference in Bayesian Networks
Bayesian networks [13] provide a convenient framework for modeling the re-
lationship between attack steps and detector alerts. Using Bayesian networks
we can infer which unobserved attack steps have been achieved based on the
observed detector alerts.
Formally, a Bayesian network is a joint probabilistic model for n random
variables (x1, . . . , xn) based on a directed acyclic graph G = (V, E) where V is
a set of nodes corresponding to the variables V = (x1, . . . , xn) and E ⊆ V xV
contains directed edges connecting some of these nodes in an acyclic manner.
Instead of weights, the graph edges are described by conditional probabilities of
nodes given their parents that are used to construct a joint distribution P (V )
or P (x1, . . . , xn).
There are three main tasks associated with Bayesian networks. The ﬁrst is in-
ferring values of variables corresponding to nodes that are unobserved given val-
ues of variables corresponding to observed nodes. In our context this corresponds
to predicting whether an attack step has been achieved based on detector alerts.
The second task is learning the conditional probabilities in the model based on
available data which in our context corresponds to estimating the reliability of
the detectors and the probabilistic relations between diﬀerent attack steps. The
third task is learning the structure of the network based on available data. All
three tasks have been extensively studied in the machine learning literature and,
despite their diﬃculty in the general case, may be accomplished relatively easily
in the case of a Bayesian network.
We focus in this paper mainly on the ﬁrst task. For the second task, to es-
timate the conditional probabilities, we can use characterization of the quality
of detectors [20] and the perceived diﬃculty of achieving an attack step, say
through risk assessment. We consider the fact that the estimate is unlikely to
be perfectly accurate and provide experiments to characterize the loss in perfor-
mance due to imperfections. For the third task, we rely on extensive prior work
on attack graph generation and provide a mapping from the attack graph to the
Bayesian network.
(cid:2)
In our Bayesian network, the network contains nodes of two diﬀerent types
Vb. The ﬁrst set of nodes Va corresponds to binary variables in-
V = Va
dicating whether speciﬁc attack steps in the attack graph occurred or not.
The second set of nodes Vb corresponds to binary variables indicating whether
a speciﬁc detector issued an alert. The ﬁrst set of nodes representing attack
Determining Placement of Intrusion Detectors
275
Fig. 2. Simple Bayesian network with two types of nodes: an observed node (u) and
an unobserved node (v). The observed node correspond to the detector alert in our
framework and its conditional probability table includes the true positive (α) and false
positive (β).
steps are typically unobserved while the second set of nodes corresponding to
alerts are observed and constitute the evidence. The Bayesian network deﬁnes
a joint distribution P (V ) = P (Va, Vb) which can be used to compute the mar-
ginal probability of the unobserved values P (Va) and the conditional probability
P (Va|Vb) = P (Va, Vb)/P (Vb) of the unobserved values given the observed val-
ues. The conditional probability P (Va|Vb) can be used to infer the likely values
of the unobserved attack steps given the evidence from the detectors. Compar-
ing the value of the conditional P (Va|Vb) with the marginal P (Va) reﬂects the
gain in information about estimating successful attack steps given the current
set of detectors. Alternatively, we may estimate the suitability of the detectors
by computing classiﬁcation error rate, precision, recall and Receiver Operating
Characteristic (ROC) curve associated with the prediction of Va based on Vb.
Note that the analysis above is based on emulation done prior to deploy-
ment with attacks injected through the vulnerability analysis tools, a plethora
of which exist in the commercial and research domains, including integrated
infrastructures combining multiple tools.
Some attack steps have one or more detectors that speciﬁcally measure whether
an attack step has been achieved while other attack steps do not have such de-
tectors. We create an edge in the Bayesian network between nodes representing
attack steps and nodes representing the corresponding detector alerts. Consider
a speciﬁc pair of nodes v ∈ Va, u ∈ Vb representing an attack step and a corre-
sponding detector alert. The conditional probability P (v|u) determines the val-
ues P (v = 1|u = 0), P (v = 0|u = 1), P (v = 0|u = 0), P (v = 1|u = 1). These
probabilities representing false negative, false positive, and correct behavior (last
two) can be obtained from an evaluation of the detectors quality.
3 System Design
3.1 Framework Description
Our framework uses a Bayesian network to represent the causal relationships be-
tween attack steps and also between attack steps and detectors. Such relation-
ships are expressed quantitatively, using conditional probabilities. To produce
276
G. Modelo-Howard, S. Bagchi, and G. Lebanon
Fig. 3. A block diagram of the framework to determine placement of intrusion detec-
tors. The dotted lines indicate a future component, controller, not included currently
in the framework. It would provide for a feedback mechanism to adjust location of
detectors.
the Bayesian network1, an attack graph is used as input. The structure of the
attack graph maps exactly to the structure of the Bayesian network. Each node
in the Bayesian network can be in one of two states. Each attack stage node
can either be achieved or not by the attacker. Each detector node can be in one
of two states: alarm generated state or not. The leaf nodes correspond to the
starting stages of the attack, which do not need any precondition, and the end
nodes correspond to end goals for an adversary. Typically, there are multiple leaf
nodes and multiple end nodes.
The Bayesian network requires that the sets of vertices and directed edges
form a directed acyclic graph (DAG). This property is also found in attack
graphs. The idea is that the attacker follows a monotonic path, in which an
attack step does not have to be revisited after moving to a subsequent attack
step. This assumption can be considered reasonable in many scenarios according
to experiences from real systems.
A Bayesian network quantiﬁes the causal relation that is implied by an edge
in an attack graph. In the cases when an attack step has a parent, determined
by the existence of an edge coming to this child vertex from another attack
step, a conditional probability table is attached to the child vertex. As such,
the probability values for each state of the child are conditioned by the state(s)
of the parent(s). In these cases, the conditional probability is deﬁned as the
probability of a packet from an attacker that already achieved the parent attack
step, achieving the child attack step. All values associated to the child are in-
cluded in a conditional probability table (CPT). As an example, all values for
node u in Figure 2 are conditioned on the possible states of its parent, node
v. In conclusion, we are assuming that the path taken by the attacker is fully
probabilistic. The attacker is following a strategy to maximize the probability of
success, to reach the security goal. To achieve it, the attacker is well informed
about the vulnerabilities associated to a component of the distributed system
1 Henceforth, when we refer to a node, we mean a node in the Bayesian network, as
opposed to a node in the attack graph. The clarifying phrase is thus implied.
Determining Placement of Intrusion Detectors
277
and how to exploit it. The fact that an attack graph is generated from databases
of vulnerabilities support this assumption.
The CPTs have been estimated for the Bayesian networks created. Input
values are a mixture of estimates based on testing speciﬁc elements of the system,
like using a certain detector such as IPTables [12] or Snort [28], and subjective
estimates, using judgment of a system administrator. From the perspective of the
expert (administrator), the probability values reﬂect the diﬃculty of reaching a
higher level attack goal, having achieved some lower level attack goal.
A potential problem when building the Bayesian network is to obtain a good
source for the values used in the CPTs of all nodes. The question is then how
to deal with possible imperfect knowledge when building Bayesian networks. We
took two approaches to deal with this issue: (1) use data from past work and
industry sources and (2) evaluate and measure in our experiments the impact
such imperfect knowledge might have.
For the purposes of the experiments explained in section 5, we have chosen
the junction tree algorithm to do inference, the task of estimating probabilities
given a Bayesian network and the observations or evidence. There are many
diﬀerent algorithms that could be chosen, making diﬀerent tradeoﬀs between
speed, complexity, and accuracy. Still, the junction tree engine is a general-
purpose inference algorithm well suited for our experiments since it works under
our scenario: allows discrete nodes, as we have deﬁned our two-states nodes, in
direct acyclic graphs such as Bayesian networks, and does exact inference. This
last characteristic refers to the algorithm computing the posterior probability
distribution for all nodes in network, given some evidence.
3.2 Algorithm
We present here an algorithm to achieve an optimal choice and placement of
detectors. It takes as input (i) a Bayesian network with all attack vertices, their
corresponding CPTs and the host impacted by the attack vertex; (ii) a set of
detectors, the possible attack vertices each detector can be associated with, and
the CPTs for each detector with respect to all applicable attack vertices.
Input: (i) Bayesian network BN = (V, CP T (V ), H(V )) where V is the set of
attack vertices, CP T (V ) is the set of conditional probability tables associated
with the attack vertices, and H(V ) is the set of hosts aﬀected if the attack vertex
is achieved.
(ii) Set of detectors D = (di, V (di), CP T [i][j]) where di is the ith detec-
tor, V (di) is the set of attack vertices that the detector di can be attached to
(i.e., the detector can possibly detect those attack goals being achieved), and
CP T [i][j] ∀j ∈ V (di) is the CPT tables associated with detector i and attack
vertex j.
Output: Set of tuples θ = (di, πi) where di is the ith detector selected and πi
is the set of attack vertices that it is attached to.
278
G. Modelo-Howard, S. Bagchi, and G. Lebanon
System-Cost = 0
Sort all (di, aj), aj ∈ V (di),∀i by BENEFIT(di, aj). Sorted list = L
Length(L) = N
for (i = 1toN)
DETECTOR-PLACEMENT (BN, D)
1
2
3
4
5