title:Unresolved Issues: Prevalence, Persistence, and Perils of Lame Delegations
author:Gautam Akiwate and
Mattijs Jonker and
Raffaele Sommese and
Ian D. Foster and
Geoffrey M. Voelker and
Stefan Savage and
kc claffy
Unresolved Issues: Prevalence, Persistence, and Perils
of Lame Delegations
Gautam Akiwate
UC San Diego
PI:EMAIL
Ian Foster
DNS Coffee
PI:EMAIL
Mattijs Jonker
University of Twente
PI:EMAIL
Geoffrey M. Voelker
UC San Diego
PI:EMAIL
Raffaele Sommese
University of Twente
PI:EMAIL
Stefan Savage
UC San Diego
PI:EMAIL
KC Claffy
CAIDA/UC San Diego
PI:EMAIL
ABSTRACT
The modern Internet relies on the Domain Name System (DNS) to
convert between human-readable domain names and IP addresses.
However, the correct and efficient implementation of this func-
tion is jeopardized when the configuration data binding domains,
nameservers and glue records is faulty. In particular lame delega-
tions, which occur when a nameserver responsible for a domain
is unable to provide authoritative information about it, introduce
both performance and security risks. We perform a broad-based
measurement study of lame delegations, using both longitudinal
zone data and active querying. We show that lame delegations
of various kinds are common (affecting roughly 14% of domains
we queried), that they can significantly degrade lookup latency
(when they do not lead to outright failure), and that they expose
hundreds of thousands of domains to adversarial takeover. We also
explore circumstances that give rise to this surprising prevalence
of lame delegations, including unforeseen interactions between the
operational procedures of registrars and registries.
CCS CONCEPTS
• Networks → Naming and addressing; Public Internet.
ACM Reference Format:
Gautam Akiwate, Mattijs Jonker, Raffaele Sommese, Ian Foster, Geoffrey M.
Voelker, Stefan Savage, and KC Claffy. 2020. Unresolved Issues: Prevalence,
Persistence, and Perils of Lame Delegations. In ACM Internet Measurement
Conference (IMC ’20), October 27–29, 2020, Virtual Event, USA. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3419394.3423623
1 INTRODUCTION
The Domain Name System (DNS) plays a critical role in the func-
tioning of the Internet by resolving human-readable domain names
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
IMC ’20, October 27–29, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8138-3/20/10.
https://doi.org/10.1145/3419394.3423623
into routable IP addresses (among other tasks). Because this func-
tion is distributed, its operation implicitly depends on the nature of
the delegations configured across the DNS namespace. In particular,
the ability of a domain to be efficiently resolved is predicated on all
of its nameservers being resolvable and that those nameservers, in
turn, are able to provide authoritative answers. In the common case,
all of these requirements are satisfied, but there are a significant
minority where they are not.
When a nameserver is delegated authority over a domain, but
is unable to provide authoritative answers about that domain, a
lame delegation is created. In the best case, lame delegations can
result in increased resolution latency, as queries must timeout and
be redirected to other hopefully correctly configured nameservers.
However, in other situations, lame delegations can provide sufficient
purchase for attackers to monitor or hijack DNS resolution.
In this paper, we explore the prevalence and causes of such lame
delegations in the DNS name hierarchy. We explore this issue both
longitudinally, using nine years of zone snapshot data comprising
over 499 million domains in both legacy and new generic TLD
(gTLD) namespaces (respectively, e.g., .com and .xyz) as well as in
the current DNS namespace using active measurements covering
over 49 million domains. We find that lame delegations are rela-
tively common, roughly 14% of registered domains actively queried
have at least one lame delegation and the clear majority of those
have no working authoritative nameservers. We identify reasons
why lame delegations persist, including: cross-zone delegations,
which current protocols are unable to validate; and non-working
IP addresses in glue records, which similarly cannot be validated
statically using registry zone data. Moreover, we identify an un-
foreseen interaction between existing registrar practice and the
constraints of registry provisioning systems that has inadvertently
created hundreds of thousands of lame delegations.
Our measurements show that lame delegations can have signifi-
cant impacts even when there are alternative working authoritative
nameservers for a domain. Lame delegations can result in a signifi-
cant increase in average resolution latency (3.7×), unnecessary load
on existing nameservers (roughly 12% of requests to GoDaddy’s
nameservers are for domains for which they are not authorita-
tive [24]) and, most importantly, the potential for malicious parties
to monitor or hijack DNS lookups. We have identified many tens
IMC ’20, October 27–29, 2020, Virtual Event, USA
Akiwate, Jonker, Sommese, Foster, Voelker, Savage, and Claffy
of thousands of domains vulnerable to such hijacking and, in sev-
eral instances, we have identified single domains that, if registered
by an attacker, would have allowed the hijacking of thousands of
domain names. Finally, we describe our efforts working with the
registrar and registry communities to understand the source of
these problems and establish efforts to address them going forward.
2 BACKGROUND
The Domain Name System (DNS) provides a distributed lookup
service mapping a hierarchical namespace to a variety of associ-
ated resource records (RRs). In its most familiar usage, a DNS client
(such as a web browser) will request the address records (either A for
IPv4 or AAAA for IPv6) corresponding to the fully-qualified domain
name (FQDN) found in a URL. However, the basic request-response
protocol used by clients to make requests belies the considerable
complexity in how resolution works, how namespaces are config-
ured and delegated, and in how protocols and operational practices
provision this state. This section sketches the basics of this process
to provide the context necessary to describe the range of problems
we identified in our measurement study.
2.1 DNS Protocol
DNS is fundamentally a lookup service. Clients make requests,
following the protocol first specified in RFC 1035 [20], to resolve in-
dividual RR’s (such as A records) for a given fully-qualified domain
name. Thus, a client seeking to reach www.cs.cmu.edu might re-
quest its A record and obtain the IP address 128.2.42.95 in return.
In typical use, a client’s request is directed to a configured recur-
sive resolver, either a local DNS server usually provisioned to the
operating system via DHCP, or a public resolver such as Google’s
8.8.8.8. Recursive resolvers, if they do not have an appropriate
and fresh answer in their cache, take responsibility for performing
the series of distributed requests needed to complete the resolution,
or to identify that the resolution cannot be satisfied (e.g., resulting
in an NXDOMAIN response).
Recursive resolution. Recursive resolvers use the same protocol as
clients, but parse the domain from left to right, dropping a domain
name’s prefixes until they encounter a portion of the name space
for which they know of an authoritative server to query.
Absent any previously cached information, all recursive resolvers
at least include the hard-coded IP addresses of the global DNS root
servers. These servers will not be able to provide authoritative infor-
mation about the FQDN being queried, but will return authoritative
information about the nameserver (NS) records for the associated
top-level domain (TLD).1 We say that these NS records represent a
delegation of the namespace. For example, nameservers for .edu
are delegated responsibility for the namespace below .edu. Then,
using an appropriate TLD nameserver, the recursive resolver can
issue its query again, each time obtaining answers about name-
servers responsible for a more narrowly delegated portion of the
namespace until a nameserver is reached that can provide an au-
thoritative A record, identifying the IP address for the original query
received from the client.
1These records include legacy gTLDs such as .com and .edu, country-code TLDs
(ccTLDs) such as .uk and .ru, and 1000+ new generic TLDs such as .xyz.
As a concrete example, a query for www.cs.cmu.edu to a newly
started recursive resolver might produce a request to a root server
who, in turn, would reply with NS records for the .edu nameservers
(i.e., [a-m].edu-servers.net). Sending the same request to these
servers would produce a reply pointing to the cmu.edu name-
servers (i.e., nsauth1.net.cmu.edu, among others) who, upon
being queried themselves, would point to the cs.cmu.edu name-
servers (i.e., nsauth-ib1.net.cmu.edu, among others).2 Finally,
the authoritative nameservers for cs.cmu.edu would provide the
resulting A record for www.cs.cmu.edu.3
Glue records. It is important to note that NS records are names
themselves (e.g., nsauth1.net.cmu.edu) and a recursive resolver
must obtain A records for those names to properly contact them.
This resolution can be problematic, however. For instance, if the do-
main example.com is delegated to ns1.example.com (a common
idiom), there is no way to query ns1.example.com to obtain its IP
address. For this reason, the DNS protocol allows nameservers to
provide additional records, called glue records, which are A or AAAA
records for the identified nameservers (ns1.example.com in this
example). To improve latency, nameservers may also provide sibling
glue records, which are glue records for sibling domains in the zone
file. Thus, it is common for nameservers to provide corresponding A
or corresponding AAAA records (i.e., IP addresses) for any NS records
they return authoritative answers for. Critically, a requester will
only accept additional records that are in-bailiwick, i.e., portions of
the namespace for which the server provides authoritative answers.
NS records that are out of bailiwick for a domain will typically not
include glue, since resolvers will not accept them. For example, del-
egating example.com to nameserver ns1.example.org would be
glue-less; the .com TLD nameservers would not provide glue for
ns1.example.org.
2.2 Zone Provisioning and Management
Equally important is the procedure by which domains and name-
server records are provisioned and managed. Each TLD is operated
by a single registry organization (e.g., Verisign is the registry for
.com, PIR for .org, etc.) who is responsible for the TLD namespace
and for ensuring the availability and consistency of its authori-
tative nameservers. Registries typically contract with registrars
(e.g., GoDaddy or Network Solutions) to register domains under
the registry’s namespace on behalf of the registrar’s customers.
The technical mechanism for interfacing between registrars and
registries is the Extensible Provisioning Protocol (EPP) principally
documented in RFC 5731 and RFC 5732 [10, 11]. Registries use EPP
to provide a degree of administrative access to the registry database
and to allow registrars the ability to install newly registered do-
mains into the database and manage the records for those domains.
EPP provides a degree of isolation between registrars and ensures
2Note that there is no requirement that each “.” in the domain name represent a dele-
gated portion of the namespace. Indeed, while it so happens that cs.cmu.edu operates
in a separately delegated “zone” from cmu.edu, that delegation is an administrative
choice. In an alternate implementation, nsauth1.net.cmu.edu could have provided
an authoritative A record for www.cs.cmu.edu directly.
3Note that this complete set of queries is rarely performed in practice because answers,
at each level of the namespace, are cached for the period of time designated in the
time-to-live (TTL) field in each nameserver answer.
Unresolved Issues: Prevalence, Persistence, and Perils of Lame Delegations
IMC ’20, October 27–29, 2020, Virtual Event, USA
Type
Records
foo.com NS ns1.example.com Well Configured
foo.com NS ns2.exmple.com Misconfigured
ns1.bar.com A 132.239.1.1
ns2.bar.com A 13.239.1.1
Well Configured
Misconfigured
Table 1: Example lame delegation due to typos.
the consistency of the overall database. EPP’s consistency con-
straints can have unintuitive consequences. For example, one regis-
trar can create a host object entry in EPP to delegate a nameserver
(ns1.example.com) for a domain that they have registered. If a
different registrar registers a domain that uses ns1.example.com
as its nameserver, then the first registrar will no longer be able to
delete the host object ns1.example.com nor its associated domain
object example.com, so long as the other domain registered by the
second registrar continues to use ns1.example.com. In addition to
the baseline constraints of EPP, registries and registrars can impose
their own restrictions on names registered through them.
Finally, many names in the DNS rely on multiple registries. For
instance, example.com might have two nameservers spanning
two TLDs: ns1.example.com and ns1.example.org. While the
registry for .com (Verisign) is in a position to validate and enforce
policies about ns1.example.com, it is unable to do the same for the
NS records (ns1.example.org in this case) outside its authority.
2.3 Lame delegations
Absent issues like network or server outages, every fully-qualified
domain name should be resolvable by any nameserver delegated to
provide authoritative answers for that portion of the namespace.
However, as this paper documents, there are a significant number
of cases where this is not so. In particular, a range of configuration
errors produce lame delegations — a situation where an NS record
for a given domain does not lead to authoritative answers for that
domain. Lame delegations result in wasted DNS queries, sometimes
to hosts that do not even exist [8, 25].
In some cases all of a registered domain’s delegations are lame.
It is also possible for a domain to be partly lame, i.e., at least one
nameserver is deficient, but not all of them. The former case is likely
to be fixed quickly because the namespace is unusable. Partly lame
domains are more insidious because name resolution continues to
operate, but with increased latency and potential security risks.
The increased latency arises because if a recursive resolver uses the
lame nameserver first, it will need to timeout before it will try a
correctly configured nameserver.
The potential for security risk is more nuanced. Consider the
case in which the misconfiguration is a result of a typo such as
shown in Table 1. Whoever controls exmple.com can control the
resolution for the fraction of requests for foo.com that are resolved
through the ns2.exmple.com nameserver. Similarly, whoever has
control of the mistyped IP address can control the resolution of the
domain names that use ns2.bar.com. Lame delegations create an
attack surface for would-be hijackers of the delegating domains.
3 RELATED WORK
The complexity of DNS configuration, and associated prevalence of
misconfigurations, was recognized decades ago [8, 25]. In 2004, Pap-
pas et al. used active measurements to study ∼52 k domain names
and found that on average about 15% of registered domains under
several TLDs (i.e., .com, .net, .org, .edu and various ccTLDs)
had lame delegations [21].
A TLD may contain glue records for a nameserver, even when
the registered domain name of the nameserver has expired. Such
a nameserver is considered orphaned. Kalafut et al. [16] passively
analyzed six TLDs over a 31-day period in April 2009, and identified
16 k orphan nameservers per day on average. The TLDs under con-
sideration accounted for about 60% of all domains on the Internet at
the time. Kalafut et al. also found that certain TLDs accounted for a
disproportionate number of orphan records, and that some orphans
were evidently used for malicious purposes. In 2019, Sommese et
al. [26] revisited this behavior. They found that some TLDs had
fewer orphan nameservers than 10 years earlier, but other TLD
operators had more orphan records than before, and they were
prevalent among new gTLDs. Notably .com and .net no longer
had any, implying those TLD operators are now automatically pre-
venting them.
Liu et al. investigated the presence of pointers to invalid resources
in the DNS, a type of dangling DNS record [18]. They used ac-
tive measurement to highlight dangling records created by use of
ephemeral IP addresses on cloud services and via expiring domains.
Lame delegations can also occur with reverse delegations. Some
Regional Internet Registries (RIRs) automatically detect lame re-
verse delegations, such as APNIC [6] and LACNIC [17]. ARIN pre-
viously had a similar policy, but retired it in 2014 [7]. In 2016,
Phokeer et al. showed that reverse delegations are frequently lame
in AFRINIC’s 41.in-addr.arpa zone [22]. At the time AFRINIC
did not have automated detection, but later instituted it [2] and
substantially reduced the prevalence of lame reverse delegations [3].
Our study focuses on forward delegations, which determine control
and availability of mappings.
In 2020, Sommese et al. [27] found that∼8% of registered domains
under the largest gTLDs (i.e., .com, .net and .org) have inconsis-
tent parent (delegation) and child zones. They investigated the risk
that such inconsistencies pose to the availability of misconfigured
domain names.
These previous studies used only active measurements to study
delegation-related security risks in the DNS namespace. Ours is the
first to use comprehensive collections of both active and passive
DNS measurements to explore and quantify these risks, allowing us
to not only identify long-term trends in lame delegations, but also
analyze root causes of their surprising prevalence in some cases.
4 DATA SETS
We use two data sets for analysis: a passive collection of TLD zone
files, and a data set of active DNS resolutions.
4.1 DNS Coffee: TLD Zone Data
Our primary data set is a large collection of zone files from the
dns.coffee4 service [9]. This data set contains daily snapshots of
4CAIDA now offers the same collection through CAIDA-DZDB at https://dzdb.caida.org