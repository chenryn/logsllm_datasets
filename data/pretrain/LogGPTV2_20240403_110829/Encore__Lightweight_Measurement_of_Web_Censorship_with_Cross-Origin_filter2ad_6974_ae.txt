### User Control and Knowledge of Web Traffic

It is widely acknowledged that users have limited control over and knowledge of much of the traffic generated by their web browsers and devices. This point, raised by Princeton’s Office of Research Integrity and Assurance, provides a reasonable cover for users. By analogy, the prevalence of malware and third-party trackers lends credibility to the argument that users cannot reasonably control the traffic their devices generate. As measurements like Encore become more widespread, the risks to users diminish.

### Filtering Access to Encore Infrastructure

Clients can only use Encore if they can fetch a measurement task. If the domain or URL hosting these tasks is blocked, clients will be unable to execute measurements. Once a client retrieves a measurement task, subsequent requests appear as ordinary cross-origin requests. Therefore, the primary concern is ensuring that clients can initially retrieve the measurement tasks.

To mitigate the risk of blocking, the server that dispatches tasks could be replicated across multiple domains. This makes it more difficult for censors to block Encore by censoring a single domain. Clients could also contact the coordination server indirectly via an intermediary or create mirrors of the coordination server in shared hosting environments (e.g., Amazon AWS), thereby increasing the collateral damage of blocking a mirror. Additionally, webmasters could contact the coordination server on behalf of clients (e.g., using a WordPress plugin or Django package) by querying the coordination server and including the returned measurement task directly in the page served to the client. To enhance scalability and reduce latency, servers could cache several tasks in advance. Similarly, the collection of results could be distributed across servers hosted in different domains to ensure that collection is not blocked.

### Limitations of Encore's Security

Encore, running entirely within a web browser, cannot leverage stronger security tools like Tor for anonymous reporting of measurements. This limitation is significant, as it restricts the tool's ability to protect user identities and data.

### Detecting and Interfering with Encore Measurements

Blocking Encore based on the contents of measurement tasks (e.g., via deep packet inspection) is challenging because the tasks' code can be easily obfuscated using JavaScript obfuscation or detection evasion techniques. Identifying task behavior is equally difficult, as it appears merely as requests to load a cross-origin object, a common practice on many websites. If a single client performs a sequence of cross-origin requests unrelated to the host site's content, a censor may recognize this as unusual and either block subsequent reports or attempt to distort the results. However, such interference is relatively difficult, as the censor would first need to identify a sequence of requests as a measurement attempt and then interpose on subsequent requests to interfere with the reports. Although such interference is plausible, censors generally do not interfere with measurements today, so this consideration is left for future work.

### Poisoned Measurement Results

Attackers may attempt to submit poisoned measurement results to alter the conclusions drawn by Encore about censorship. Reputation systems could be employed to thwart such attacks, although it would be practically impossible to completely prevent poisoning from untrusted clients.

### Conclusion

Measuring the extent and nature of internet censorship is crucial but challenging due to the need for a large number of geographically diverse vantage points and the difficulty of recruiting volunteers. Encore presents an alternative approach by leveraging the fact that users' web browsers can perform certain types of cross-origin requests. These requests can be harnessed to measure reachability to arbitrary third-party domains. While only a limited amount of information about the success of these requests leaks across domains, even a small amount of leakage is sufficient to infer the reachability of higher-level web resources, including entire domains and specific URLs.

Encore shifts the deployment burden from clients to webmasters, making deployment simple. Many webmasters are already interested in monitoring the reachability of their sites from various client geographies and networks, aligning well with deployment incentives.

Although Encore may draw fewer conclusions about the scope and methods of censorship compared to detailed tools like OONI and Centinel, it can provide a broad-stroke characterization of censorship practices based on a sizeable and continuous set of client measurements. This fills an important gap in our understanding, bridging the gap between diverse yet inconclusive user reports and detailed yet narrow or short-term fine-grained measurements.

The prospect of using Encore to collect measurements from unsuspecting users has stirred controversy and prompted a wider dialogue on the ethics of network measurement. Forthcoming guidelines for ethical measurement will help determine whether wider deployment is appropriate. Regardless, our work highlights the potential for tools like Encore to place users in harm's way and suggests that cross-origin security policy should be strengthened to prevent such attacks.

### Example of a Measurement Task

This is a complete example of JavaScript code that runs in a client's web browser to measure web filtering using cross-origin embedding of a hidden image. It uses jQuery. The coordination server minifies and obfuscates the source code before sending it to a client.

```javascript
var M = Object();

// A measurement ID is a unique identifier linking all submissions of a measurement.
M.measurementId = ... // a UUID.

// This function embeds an image from a remote origin, hides it, and sets up callbacks to detect success or failure to load the image.
M.measure = function() {
    var img = $('<img>');
    img.attr('src', '//target/image.png');
    img.css('display', 'none');
    img.on('load', M.sendSuccess);
    img.on('error', M.sendFailure);
    img.appendTo('html');
}

// This function submits a result using a cross-origin AJAX request. The server must allow such cross-origin submissions.
M.submitToCollector = function(state) {
    $.ajax({
        url: "//collector/submit" +
            "?cmh-id=" + this.measurementId +
            "&cmh-result=" + state,
    });
}

M.sendSuccess = function() {
    M.submitToCollector("success");
}

M.sendFailure = function() {
    M.submitToCollector("failure");
}

// Submit to the server as soon as the client loads the page, regardless of the measurement result. This indicates which clients attempted to run the measurement, even if they don’t submit a final result.
M.submitToCollector("init");

// Run the measurement when the page loads.
$(M.measure);
```

### Acknowledgments

This research was supported by NSF Awards CNS-1409635, CNS-1540066, and a Google Focused Research Award. We thank Joss Wright for an insightful discussion about the ethics of measuring web censorship without informed consent. We also thank the many webmasters who have installed Encore on their websites.

### References

[References listed here, formatted as in the original text.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.