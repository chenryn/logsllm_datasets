proposer blocks are mined in the interval U .
h
Therefore, we have the following bound on AP(J)
′
h)+L
∗)
AP(J)≥(d−d
=d−d
(From Equation (6)) >d−d
′
h
∗−Lh−L
∗−Lh
∗−µ(d−d
∗).
(7)
From the chain growth, we know that d−d∗ ≥ QP(S) and combining
this with Equation (7) gives us
=(1−µ)(d−d
AP(J) >(1−µ)QP(S) =(1−δ +3ε)QP(S),
which contradicts Lemma B.5.
(8)
□
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1718D PSEUDOCODE OF PRISM
Algorithm 1 Prism: Main
1: procedure Main( )
Initialize()
2:
while True do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: procedure Initialize( )
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
votesOnPrpBks(i)←ϕ
▷ Broadcast to peers
▷ All variables are global
▷ Proposer Blocktree
▷ Voter i blocktree
▷ Proposer block to mine on
▷ Voter tree i block to mine on
▷ Tx block content: Txs to add in tx bks
▷ Prop bk content1: Unreferred tx bks
▷ Prop bk content2: Unreferred prp bks
▷ Voter tree i bk content
header ,Ppf ,Cpf = PowMining()
// Block contains header, parent, content and merkle proofs
if header is a tx block then
else if header is a prop block then
else if header is a block in voter blocktree i then
BroadcastMessage(block)
block ← ⟨header ,tx Par ent ,tx Pool ,Ppf ,Cpf ⟩
block ← ⟨header ,prpPar ent ,unRf T x BkPool ,Ppf ,Cpf ⟩
block ← ⟨header ,vt Par ent[i],votesOnPrpBks[i],Ppf ,Cpf ⟩
vtT r ee[i]←дenesisM_i
// Blockchain data structure C =(prpT r ee ,vtT r ee)
prpT r ee ←дenesisP
for i ←1to m do
// Parent blocks to mine on
prpPar ent ←дenesisP
for i ←1to m do
// Block content
tx Pool ←ϕ
unRf T x BkPool ←ϕ
unRf PrpBkPool ←ϕ
for i ←1to m do
vt Par ent[i] ←дenesisM_i
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1719tx Par ent ←prpPar ent
// Assign content for all block types/trees
for i ←1to m do vtContent[i]←votesOnPrpBks[i]
txContent ←tx Pool
prContent ←(unRf T x BkPool ,unRf PrpBkPool)
// Define parents and content Merkle trees
par ent MT ←MerklTree(vt Par ent ,tx Par ent ,prpPar ent)
content MT ←MerklTree(vtContent ,txContent ,prContent)
nonce ← RandomString(1κ )
// Header is similar to Bitcoin
header ← ⟨ par ent MT .root, content MT .root, nonce ⟩
if chainLength(prpPar ent) % e == 0 then
p ← RecalculateTarget(fp)
f new
fv ← (fv ∗f new
ft ← (ft ∗f new
fp ← f new
/fp)
/fp)
p
while True do
Algorithm 2 Prism: Mining
1: procedure PowMining( )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
p
p
// Sortition into different block types/trees
if Hash(header) ≤mfv then
else if mfv vt Par ent[i].chaindiff then
vt Par ent[i]←B and votesOnPrpBks(i).update(B)
else if B is a valid prop block then
if B is a valid transaction block then
Algorithm 3 Prism: Block and Tx handling
1: procedure ReceiveBlock(B)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: procedure ReceiveTx(tx)
22:
if B.diff > prpPar ent.diff then
prpPar ent ←B
for i ←1to m do
votesOnPrpBks(i)[B.level]←B
else if B.level > prpPar ent.level+1 then
// Miner doesnt have block at level prpPar ent.level+1
ReqestNetwork(B.parent)
prpT r ee[B.level].append(B), unRf PrpBkPool.append(B)
unRf T x BkPool.removeTxBkRefsFrom(B)
unRf PrpBkPool.removePrpBkRefsFrom(B)
if tx has valid signature then tx Pool.append(B)
▷ Voter block mined
▷ on tree i
▷ Tx block mined
▷ Prop block mined
▷ Get block from peers
▷ Add vote on level ℓ on all m trees
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1720Algorithm 4 Prism: Vote validation
1: procedure ValidVote(B,i )
2:
3:
4:
5:
6:
7:
8:
9:
10:
// voter block can’t vote for difficulty grater than its proposer parent
if B.vtContent[i].latestBlock.chaindiff > B.prpParent.chaindiff then
if B.vtContent[i] has discontinuous votes then
if B.vtContent[i].earliestBlock.parent.chaindiff > B.vtParent[i].chaindiff then
// include the check where the difficulty ranges of the votes should end at proposal blocks
return True
return False
return False
return False
▷ validate a vote
Π←ϕ
for ℓ←1to prpT r ee .maxLevel do
Algorithm 5 Prism: Tx confirmation
1: procedure IsTxConfirmed(tx)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
votes N depth←ϕ
for i in 1to m do
votes N depth[i]←GetVoteNDepth(i ,ℓ)
if IsPropSetConfirmed(votes N depth) then
Π[ℓ]← GetProposerSet(votes N depth)
else break
// Ledger list decoding: Check if tx is confirmed in all ledgers
prpBksSeqs ← Π[1]×Π[2]×···×Π[ℓ]
for prpBks in prpBksSeqs do
ledдer = BuildLedger(prpBks)
if tx is not confirmed in ledдer then return False
return True
▷ Array of set of proposer blocks
▷ outer product
▷ Return true if tx is confirmed in all ledgers
▷ Input: list of prop blocks
▷ List of valid transactions
▷ Txs are ordered in tx Bk
▷ Ordered list of leader blocks
// Depth is the difficulty of children bks of voter bk on main chain
return (vote .prpBk, voter Bk.depth)
for vote in voter Bk.votes do
if d in vote .r anдe then
ledдer ←[]
for prpBk in propBlocks do
15: // Return the vote of voter blocktree i at level ℓ and depth of the vote
16: procedure GetVoteNDepth(i ,d)
voter MC ←vtT r ee[i].H eaviestChain()
17:
for voter Bk in voter MC do
18:
19:
20:
21:
22:
23: procedure BuildLedger(propBlocks)
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35: // Return ordered list of confirmed transactions
36: procedure GetOrderedConfirmedTxs()
37:
38:
39:
40:
41:
r ef PrpBks ←prpBk .getReferredPrpBks()
// Get all directly and indirectly referred transaction blocks.
tx Bks ←GetOrderedTxBks(prpBk ,r ef PrpBks)
for tx Bk in tx Bks do
txs ←tx Bk.getTxs()
for tx in txs do
L←ϕ
for prpBk in propBlocks do
L←sor t(p,key =д(p))
return BuildLedger(L)
// Check for double spends and duplicate txs
if tx is valid w.r.t to ledдer then ledдer.append(tx)
д(p) =infd(d :GetLeader(d) =p)
return ledдer
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1721