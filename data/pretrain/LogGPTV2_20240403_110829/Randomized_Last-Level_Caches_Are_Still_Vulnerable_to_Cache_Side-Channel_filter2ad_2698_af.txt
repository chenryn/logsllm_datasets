4
4
4
4
4
4
4
1
1
3.g
0.b
6.g
2
9.
3
3.
m
m
4
4
4
4
4
5
3
3
3
6.c
4.z
ilc
e
u
7.le
ctu
4.n
slie
s
a
5.g
0.s
a
o
m
b
d
m
m
s
p
A
3
d
4
4
4
4
4
4
4
4
6
6
7
7
5
5
o
6.h
4.c
ple
alc
5
5
9.
8.sje
m
n
g
m
ulix
e
r
k
x
2.lib
G
e
m
4.h
1.o
3.a
2
6
m
n
q
u
s
a
F
D
4
r
ef
ntu
etp
p
sta
r
D
M
T
m
D
(a) Remaps per billion instructions (RPBI)
EV-10
DT+EV-10:DT
DT+EV-10:EV
4
4
4
4
4
4
4
4
4
0
0.p
0
0
1.b
rlb
zip
e
2
1
1
3.g
0.b
6.g
2
9.
3
3.
c
c
w
a
m
m
cf
ilc
m
3
3
4.z
6.c
e
a
u
s
a
v
7.le
ctu
4.n
slie
5.g
0.s
a
o
m
b
4
4
4
4
3
4
4
5
4
4
4
4
4
5
5
5
o
6.h
4.c
ple
alc
m
5
9.
8.sje
G
e
2.lib
n
g
m
e
e
s
s
s
m
s
p
A
3
d
d
m
k
x
m
ulix
e
r
e
n
c
h
6
4
4
4
6
7
7
4.h
1.o
3.a
2
6
m
n
q
u
s
a
F
D
4
r
ef
ntu
etp
p
sta
r
T
m
D
D
M
(b) Normalized RPBI using ACC-10 as the baseline
Fig. 19.
(a) Remaps per billion instructions (RPBI) of SPEC CPU 2006
benchmark cases running on a CEASER LLC. In (b), DT and EV denote the
remaps triggered by attack detection and reaching remap period respectively.
increased to 10 accesses/evictions per cache block to thwart the
CT attack. The average overhead is 0.61%, 0.077% and 0.19%
for ACC-10 (remapping by accesses), EV-10 (remapping by
evictions) and DT+EV-10 (EV-10 plus attack detection) re-
spectively. Measuring the remap period by evictions rather
than accesses reduces MPKI by 69% with attack detection
or 87% without.
Such signiﬁcant performance boost comes from two rea-
sons: One is the reduced number of remaps as shown in
Fig. 19a. The average reduction is 72% with attack detection
or 74% without. The other one is the reduced impact for each
remap. To explain this effect, Fig. 20 depicts the run-time
MPKI and miss rate curves extracted from a representative
window of the 403.gcc (expr2) benchmark case. Note that for
the LLC remapped by accesses, the remap period is increased
to 100 accesses per cache block to avoid excessive remaps
(a totally pink colored background). Remapping by accesses
inclines to remap when both MPKI and miss rate are low, such
as the time segments of (11–13), (19–20), and (26–30) billion
instructions, while there is nearly no remaps for the same
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
965
I
K
P
M
C
L
L
 300
 250
 200
 150
 100
 50
 0
 10
 12
 14
 16
 18
 20
 22
 24
 26
 28
 30
Billion Instruction Executed
(a) MPKI (remap period: 100 accesses per cache line)
e
t
a
R
s
s
M
C
L
L
i
 1
 0.8
 0.6
 0.4
 0.2
 0
 10
 12
 14
 16
 18
 20
 22
 24
 26
 28
 30
Billion Instruction Executed
(b) Miss rate (remap period: 100 accesses per cache line)
I
K
P
M
C
L
L
 300
 250
 200
 150
 100
 50
 0
 10
 12
 14
 16
 18
 20
 22
 24
 26
 28
 30
Billion Instruction Executed
(c) MPKI (remap period: 10 evictions per cache line)
t
e
a
R
s
s
M
C
L
L
i
 1
 0.8
 0.6
 0.4
 0.2
 0
 10
 12
 14
 16
 18
 20
 22
 24
 26
 28
 30
Billion Instruction Executed
(d) Miss rate (remap period: 10 evictions per cache line)
Fig. 20. Compare the triggered remaps of running the SPEC CPU 2006
case 403.gcc (expr2). Each remap is depicted as a vertical pink line in the
background.
period in the case of remapping by evictions. What is worse,
these remaps lead to unnecessary block evictions which in turn
raise the miss rate. On the contrary, remapping by evictions
inclines to remap when the miss rate is high, such as the time
segments of (22–23) and (25–26). During these segments, the
utilization efﬁciency of the LLC is already reduced by the
high miss rate. The performance impact of the unnecessarily
evicted blocks in each remap is thus weakened.
The cost of enabling attack detection in CEASER is rela-
tively small compared with the performance boost from remap-
ping by evictions. Fig. 19b provides a detailed breakdown
the remaps when attack detection is enabled. On average,
attack detection introduce 16% extra remaps (false positive
errors) in addition to the remaps triggered by evictions but
together they cause only 28% of the remaps if remapping by
accesses is used. For most benchmark cases, including the
memory intensive cases [59] such as 429.mcf, 462.libquantum,
464.h264ref and 471.omnetpp, the rate of remaps triggered by
detection (related to the rate of false positive errors) is tiny.
Only cases like 403.gcc and 456.hmmer have high rates of
errors. Since the absolute number of remaps for 456.hmmer is
extremely low (RPBI ≈ 8 in Fig. 19a), the high error rate does
not actually hurt performance. As for 403.gcc, the absolute
number of MPKI increased from 10.25 to 10.47, leading to
an extra 2.1% performance loss. Considering the MPKI is
relatively low, this 2.1% loss should be tolerable.
I
K
P
M
d
e
z
i
l
a
m
r
o
N
 1.02
 1.015
 1.01
 1.005
 1
 0.995
 0.99
E
D
D
V
T
T
+
+
E
E
V
V
+
M
S
E
E
V
V
E
E
V
V
E
E
V
V
E
E
V
V
+