sockets are sufficient without the use of sk_lookup (see §3.4).
IPv6 Applicability The abundance of IPv6 prefixes and addresses
makes reasoning about its bindings difficult. One argument against
binding to a single IPv6 address is that there is no need, i.e., address
exhaustion is unlikely. This is a pre-CIDR position that, we claim, is
benign at best and irresponsible at worst. In lieu of asking why use a
single IPv6 address, we should be asking why not? and reject any
answer that reduces to, “because there is no need.”
Connection Coalescing
The potential scale of service under
scrutiny notwithstanding, we note that one-address preserves any
semantics ascribed to IP addresses such as SSH’s known_hosts.
We expect connection coalescing will increase when all services
sit behind one address (assuming target URIs match certificates).
The evidence for coalescing is preliminary, yet favourable. Figure 8
shows requests per connection for services on one address, and
standard addressing used by the CDN in the rest of the world.
Measurements were conducted over a 7-day window in June 2021,
and consist of a 1% sample of all connections over all TCP and QUIC.
For this reason, samples at the ‘One IP’ datacenter are skewed by
connections not on the one IP address, as well as connections from
HTTP/1 and older browsers that do not support connection reuse.
Despite the additional noise, a 2-sample Anderson–Darling test [55]
suggests a significant difference. We tested the hypothesis that the
observations from the ‘One IP’ data center, and the “Rest of World”
data centers can be modelled as coming from a single population.
According to our results, the hypothesis can be rejected with 99.9%
confidence since the returned test value 𝐴𝐷 = 3532.4 is higher than
the critical value 𝐴𝐷𝑐𝑟𝑖𝑡 = 6.546 for significance level of 0.001.
442
 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1100101102p(x <= X)Requests per ConnectionRest of World (TCP)One IP (TCP)Rest of World (QUIC)One IP (QUIC)The Ties that un-Bind: Decoupling IP from web services and sockets. . .
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
We illustrate by example. Assume all PoPs in the network adver-
tise and accept connections on the same /24 (as shown in §4.3). A
policy can be expressed in DNS so that each PoP expects to receive
traffic on a unique address. Say the policy returns *.*.*.25 in re-
sponse to all queries routed to PoP-A, similarly *.*.*.26 for all
queries routed to nearby PoP-B, and *.*.*.78 for PoP-X that is
far from both A and B. As a consequence all or most of the ensuing
request traffic at each PoP should arrive on its corresponding IP.
PoP-A may see a small amount of traffic arrive on *.26, but should
see none on *.78. Conversely, PoP-X should expect little-to-no
traffic on *.25 or *.26. A violation of these expectations in either
direction is an indication of traffic misdirection. We expect network
issues to be visible at DNS TTL timescales.
In this setup, our architecture makes mitigation trivial: Keep
the policy, but change the prefix. Observe that the policy in this
case is unchanged, since only the *.*.* portion is different. If the
mitigation prefix is already advertised and known to the Internet,
then mitigation is complete also at DNS TTL timescales.
Denial of Service (DoS) Mitigation at the Speed of TTLs An
important ability in DoS mitigation is to be able to distinguish the at-
tack vector as layer 3/4 (e.g., UDP or SYN floods) or layer 7 (named
services). One of the tools for diagnosis, as well as mitigation, is to
re-bind a named service to a different IP address.
Addressing agility enables an otherwise naïve 𝑘−ary search as a
fast, powerful foundation for mitigation. For ease of presentation,
start with all 𝑛 services sit behind one address (or narrow prefix) in
a range. For example, a.b.c.1/32 from a.b.c/24, then proceed:
(1) An attack is detected; set DNS TTL to small value, 𝑡.
Begin an 𝑘−ary search:
(2) Partition 𝑛 affected services randomly into 𝑘 disjoint sets,
(3) Map each set to the 𝑖𝑡ℎ address in the range where 𝑖 ∈ {0..𝑘 −
𝑘 services on each of a.b.c.1,
each of size ⌈ 𝑛
𝑘 ⌉;
1}, e.g., for 𝑘 = 32, place 𝑛
a.b.c.2, . . . , a.b.c.32.
If the attack follows a slice then there is a named target; repeat
from (2) on the affected slice. Otherwise the attack continues on the
starting address, meaning that it is layer 3/4. Assuming DNS caches
respect TTL values, then the worst case time to isolate the attack
from services is TTL+𝑡(log𝑘 𝑛).
Measurement Opportunities Initially, our live deployment was
limited to a single medium datacenter, DC1 for testing and debugging.
To ensure reachability in the event of a failure, the BGP prefix 𝑝
used in our test was also advertised from a datacenter, DC2, 600km
away. Accordingly, web services at DC2 were configured to accept
connections on 𝑝 addresses, but DNS at DC2 was unaltered and
returned addresses in accordance with the rest of the world. In other
words, DC2 had little expectation of ingress traffic via 𝑝 addresses.
Despite DC2’s intended purpose as a failover, DC2 received sig-
nificant legitimate traffic on the IP addresses that could only be
learned via DNS queries to DC1. We hypothesize that this happens
because the DNS queries of some clients closest to DC2 are handled
by ISP resolvers that are closest to DC1. Surprisingly, the proportion
of affected traffic was substantially higher for IPv6 than for IPv4.
Figure 9: An example BGP leak of an anycasted prefix, based on
an actual incident that affected DNS performance. CDN origi-
nates an anycasted prefix from multiple PoPs to regional peers. 𝐴𝑆3,
preferring customer routes, leaks the prefix to 𝐴𝑆2. Performance de-
grades for US clients routed to Europe, but the leak goes undetected.
A policy to map each PoP’s DNS responses to a unique address in
the range would enable every CDN location to monitor requests on
unexpected IPs in that range, and flag potential route leaks. Services
can be immediately moved to a different prefix with agile addressing.
TCP connection establishment and longevity is another area of
possible investigation. When all hostnames are multiplexed over the
same IP address, is it necessary to maintain more than one long-lived
TCP connection? Instead, would it not be possible for each client to
simply open a single TCP connection to a one-address CDN and use
that connection to issue all of its requests? This could have upside
in terms of simplicity and performance: the general understanding
is that maintaining a single connection yields better performance
than opening multiple, short-lived ones. Moreover, there are ongoing
efforts to be able to negotiate distinct TLS sessions over a given
TCP connection. However, there are some potential concerns: TCP
connections offer a convenient unit of isolation across different
customers of the CDN. An interesting area of future work would be
to provide stronger isolation guarantees above the transport layer.
6 DISCUSSION: LOOKING AHEAD
Perhaps the most exciting aspect of our architecture is that it opens
pathways to new agile systems designed for added visibility into
outside network effects and behaviours, as well as for granularity of
control. In this section we describe initial ideas that, while concrete,
abstract away many details and are without implementation. All
are currently being pursued or under investigation, and expected to
appear as future work. Each has helped to elucidate our architecture’s
merit – and the value of decoupling IPs from names and sockets.
For ease of presentation we sketch each system assuming one-
address datacenters, unless stated otherwise. We also emphasize
that in each of these designs a single-address set for some policy is
functionally equivalent to a random selection from any disjoint set.
For example, an IPv4 /32 may be comfortably substituted with a /28.
Route Leak Detection and Mitigation for Anycast Figure 9 de-
scribes a route leak on an anycast system based on actual events.
The timely detection and mitigation of traffic misdirection is cur-
rently one of the hardest issues in network operations. In an anycast
network, addressing agility offers a foundation for fast route leak de-
tection and mitigation, and starts with the observation that different
PoPs can return distinct IPs within a single anycast prefix.
443
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Fayed, et al.
This opens new and otherwise infeasible measurement directions,
for example, elucidating Internet routing paths and maps. These are
opportunities are left for future investigation.
Traffic tuning across anycast datacenters The route leak detec-
tion and mitigation mechanism described above gives evidence that
addressing agility could be used to build route leak detection and
mitigation for anycast networks. We posit that similar mechanisms
await that can shift traffic between datacenters in an anycast network
using map-colouring [27]. In this use case a colour is equivalent to a
BGP prefix announcement, such that each datacenter in an anycast
network advertises only one colour (or prefix) from the set. Afore-
mentioned measurements may help to identify the smallest number
of colours needed to achieve some property, for example, region
isolation or traffic tuning zones with nearby datacenters.
7 RELATED WORK
Decoupling Content Names from Hostnames Our proposal that
merges multiple hostnames into a single IP address leveraging any-
cast is very similar to a wide range of work that seeks to decouple
what content is from where it is hosted.
One broad initiative to this end was the set of clean-slate net-
work architectures from the early 2000s to address concerns such
as the impending shortage of IPv4 addresses and poor IP-based sup-
port for mobility, replicated content, and middleboxes. DONA [40],
TRIAD [29], IPNL [23], FARA [11], HIP [36], DOA [6, 69], i3 [64],
and SNF [37] are but a handful of example systems that demon-
strated it was possible to decouple hostnames from content names.
Most of these architectures require extensive changes to the existing
network, some even taking a clean-slate approach. Conversely, we
sought to achieve many of the same goals in today’s Internet, without
any additional deployments at clients or routers.
A more recent initiative that decouples content from location is
Information-Centric Networking (ICN) [18, 19, 24, 35]. Prominent
examples are Name Data Networking (NDN) [71], Network of In-
formation (NetInf) [20], and the eXpressive Internet Architecture
(XIA) [30]. These clean-state network architectures route based on
the name of the content by completely removing host identifiers.
Today’s CDNs can be viewed as a sort of ICN [35]: by employing
aggressive caching, geo-replication, and traffic engineering, virtu-
ally any of a CDN’s PoPs can be used to service a user’s request.
However, none decouple names and addresses to the extent that ICN
architectures do; CDNs still use a large number of IP addresses,
effectively resulting in a few content names mapping to any given
IP address. While there are various designs that facilitate the deploy-
ment of ICN systems (such as the use of overlays), they are still not
compatible enough with the current existing Internet architecture to
have met our operational needs.
We believe our system can be viewed as an evolutionary step to-
wards ICN that is (surprisingly) deployable today; our design would
comprise only one IP address per ASN but can still provide service
and content regardless of which hosts end-users communicate with.
Of course, the scope of our problem is also considerably smaller than
these drastic redesigns of the Internet. Where they sought to address
naming concerns for all hosts and all protocols, we seek the far more
modest goal of serving our customers’ content on machines we con-
trol. Moreover, we seek only to operate over a small set of protocols
(HTTP and HTTPS) that already permit transmitting content names
(through Host headers and SNI). As a result, we did not have to
design new packet headers or architectural components to translate
between namespaces like many of these prior works [23, 29, 40, 64]:
standard HTTP(S) clients already include them.
One trade-off prior architectures faced was between human-
understandable names but less efficient to route (e.g., FQDNs), and
being opaque (e.g., the flat namespace of a DHT is unhelpful to
users) but more efficient to route [10, 25, 39, 64, 68]. Our system
makes no such tradeoff; we maintain the namespace familiar to users
(FQDNs) and still achieve highly optimized performance. This, too,
is because our system need not provide an Internet-wide solution.
IP Randomization and Re-use One study shows surprising vari-
ability in IPv4 usage and activity varies across measures of reacha-
bility and load, as well as inferring evidence of restructuring [53].
There exist multiple attempts to improve multiplexing over IP, or
re-imagining addressing all together. One example explores combi-
nations of NAT, DNS, and DHCP within datacenters to multiplex a
large number of execution environments onto a smaller number of IP
addresses [61]. A more radical proposition reimagines addressing en-
tirely with variable length addresses [51] or adds an additional layer
on top of the network layer to remove IP bindings [23, 29, 40, 58].
Our design is more immediately deployable and, as above, is made
possible by the fact that we are able to make several simplifying
assumptions as compared to work that seeks to rearchitect the entire
Internet. That said, our hope is that by demonstrating that even one
significant step towards these loftier goals can be accomplished in a
performance-sensitive production environment will breathe renewed
interest into these fascinating endeavors.
8 CONCLUDING REMARKS
In this paper, we have presented the design, implementation, and
experiences from an operational deployment of an architecture that
drastically improves addressing agility of CDN services at scale.
We use the architecture to bind addresses at query time, in response
to attributes rather than names, and change bindings with every
query. Our architecture is reminiscent of more audacious redesigns
of Internet naming in that it decouples IP addresses (location) from
hostnames (content), but because our architecture need not apply to
the entirety of the Internet nor to all protocols, we were able to lever-
age existing application-layer mechanisms (like SNI), facilitating
immediate deployment. Our year-long deployment shows that few
IP addresses are needed and that, by disassociating addresses from
names and sockets, just a few addresses can lead to exciting new
applications like route leak detection and greater resilience to attack.
ACKNOWLEDGMENTS
We thank the anonymous reviewers and our shepherd, Anja Feld-