似的，它们归属于不同的开发目录，都是在已有的实现上解耦合，通过配置和扩展来实
中我们常见的是 MVC 模式，从上面的一些基本原理描述可以看出，MVC 和 MTV 是类
更倾向于 post 方法，但是目前 get 方法更流行一些。
写 Web 应用的时候只需要重点关注如何重写 get 和 post 方法即可。原来是从安全和扩展性上
serviceO，所以由此可以看出，它还是协议无关的，所以就有了新的实现类HtpServlet，我们
javax.servlet.GenericServlet 类。很显然这个通用的类只能是一个抽象类，里面的核心方法是
要直接实现还是很困难的，所以，曾经的 sun 给出了实现 Servlet 接口的类，也就是
javax.servlet.Servlet，这个接口里面只定义了5个方法，但是因为 Servlet 是协议无关接口，
综上所述，在Python 的Web 体系中，我们通常叫做MTV模式，而在Java Web 体系
按照JavaEE的规范，任何Servlet都需要直接或间接的实现Servlet接口，即
这一点和 Java 栈的 Web 处理略有不同，如下图 11-7 所示。
客户端请求都会通过url的筛选，走入不同的逻辑处理，即不同的函数。
浏览器
浏览器
http响应
http请求
http响应
http请求
和响应
Http请求
函数1
图11-7
web容器
图11-6
web容器
ur1筛选
函数2
结果
调用
函数3
servlet
函数4
第11章运维开发基础|439
---
## Page 462
440丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
Django 对于初学者的好处就是框架的集成度高，插件丰富，学习的周期会大大缩短，对
架，由Python开发，遵守BSD 版权，初次发布于2005年7月，至今已在社区活跃多年，
到放弃，所以为了简化这个过程，我来准备一个实例从零开始入门基于Python 的 Web 开
11.4.3
所以本书内容还是侧重后端技术方向。
11.4.2Web 开发技术栈
于中小型项目比较适合。
发技术。
我们的整个测试模拟过程基于开源框架 Django，这是一个开放源代码的 Web 应用框
 Web 开发技术深似海，从我的学习过程来看，
·在前端页面可以查看数据;
·数据存储在 MySQL 中；
·显示人员信息和部门；
接下来我们通过表单数据查询来熟悉前后端技术。
整体来说，
我简单列了一下 Web 开发技术栈的框架和方向，如下图11-8所示。
1．业务需求
使用 Django 框架来流转数据；
从零开始串联 Python 前后端技术
前端方向是很庞大的，本书无法奢望几个示例就能够融会贯通前端技术，
Web开发技术栈
图11-8
前端
后端(基于Python)
前端可视化
前端UI框架
，学习盲点太多，以至于很容易从入门
前端JS框架
tableau
Echarts
AmazeUI
EasyUI
bootstrap
JQuery
Angular.Js
Vuejs
React
web.py
Flask
Django
---
## Page 463
以不需要我们创建任何的模型。
建数据库表到数据库中。
这个是Django 内置的功能，需要做对象关系映射，假设我们使用默认的 sqlite，则需要创
可以通过makemigrations选项来查看是否有模型变更，因为这里是内置的功能，所
Operations
[root@dev01 demo_test]# python manage.py migrate
生成数据库的表到数据库（sqlite)，从日志可以看到创建了多个表。
[root@dev01 demo_test]# python manage.py makemigrations
首先需要做ORM映射，因为Admin模块会在数据库中以表的形式持久化一些数据，
为了快速构建出一个应用界面，我们可以尝试使用 Django Admin Site。
3. 构建 Django Admin Site 
INSTALLED_APPS =（
需要将应用配置到项目中生效，配置 settings.py 文件。添加如下的应用：
django-admin startapp emp_test
假设应用名为 emp_test，应用是项目的一部分，或者是一个模块。
（3）创建应用
ALLOWED_HOSTS = ['*']
解决方法：修改 settings.py 文件。
其中192.168.56.102为主机IP，根据需要修改即可。
（2）启动Python内置Web服务
django-admin startproject emp_test
Apply all migrations: 
emp_test'
（1）创建项目
2．环境构建
·快速迭代开发。
python manage.py runserver 192.168.56.102:9001
django.contrib.contenttypes',
'django.contrib.auth'
django
auth,
sessions
第11章运维开发基础”441
---
## Page 464
442丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
可以更加关注模型层的变更，数据库层的表属性变更也可以同步更新。
调用的 API，这样一来，我们对于模型的管理可以更加通用高效，而对于属性的变更，也
据访问和优化前端页面等6个步骤来说。
一个字段，在开发中引入ORM技术，使用对象关系映射，对不同的数据库都提供了同一
（1）构建模型
Superuser created successfully.
Password:
Email address: PI:EMAIL
drwxr-xr-x
total48
Sqlite 文件在项目的根目录下：
Running migrations:
模型如下图11-9所示，通过ORM 建立了数据库表和模型的关联。
一个模型类在数据库中对应一张表，在模型类中定义的属性，对应模型对照表中的
整个流程会按照构建模型、配置URL、配置VIEW 层逻辑、配置前端页面、配置数
当然，要实现自定义的前端页面，满足复杂的需求，我们就需要自定义的方式来做。
浏览器中输入URL：htp://192.168.56.102:9001/admin，即可访问Admin Site。
Username
[root@devo1 demo_test]# python manage.py createsuperuser
构建Admin 模块，需要输入用户名，
-rwxr-xr-x
[root@dev01 demo_test]# 11
4.
Applying
Applying
Ap
Rendering model
自定义前后端技术实现
oplying
oplying
pplying
pplying
Running deferred SQL..
(again):
auth.0006
L
auth.
contenttypes.0002_remove_content_type_name...
3
2
root
root
root
root
require_contenttypes_0o02... OK
alter
alter
to
initial
4096
4096
252
user
Apr
DONE
Apr
Apr
密码和邮箱。
last
OK
8
8
8
15:37
15:42
15:44
login_
name
OK
opts...
manage.py
emp_test
db.sqlite3
max
test
length.
OK
员员
---
## Page 465
度是50。
在 emp_test 目录下的 models.py 里面新增如下的内容：
Operations
使用 migrate 选项来触发变更。
COMMIT;
CREATE
BEGIN;
[root@dev01 demo_test]# python manage.py sqlmigrate emp_test 0001
可以使用 sqlmigrate 选项来查看模型的变更细节。
[root@dev01 demo_test]# python
生成模型变更的配置文件，如下：
从代码可以看出来，字段empno是自增序列，ename 是员工名字，属于字符型，长
class emp(models.Model):
我们的需求就是查看员工的基本信息，我们就计划创建一个表emp，含有两个字段，
Applyall
ename = models.CharField(max_length=50,verbose_name='emp name')
empno
migrations:
数据库
ORM
Models
7
emp
'emp_test':
HTTP请求
模板语言
AUTOINCREMENT,
Views
Urls
WSGI
浏览器
("empno" integer NOT NULL PRIMARY
 manage.py makemigrations
图11-9
返回HTTP
test,contenttypes,auth,sessions
Templates
Statie
Tests
Apps
Settings
Manage
第11章运维开发基础”443
---
## Page 466
444|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
础上持续改进。
render_to_response('emplist.html',context_instance=RequestContext (request))
VIEW 层的emplist 函数。
mkdir -p templates
def emplist(request):
from django.shortcuts import render_to_response,
（3）配置VIEW层逻辑
from emp_test.views import emplist
我们如果没有任何 ORM 的基础，可以先熟悉一下，我们通过 Django API 的方式来
在此基础上，我们的数据要从数据库中查取，这里会用到ORM的内容。
（5）配置数据访问
如果页面（图11-10）中能够正常显示，证明整个路程是畅通的，然后我们在这个基
hello team
写入文件内容为：
cd templates
根据VIEW层的流转，
（4）配置前端页面
URL是访问页面的入口，假设我们要访问的URL为：http://192.168.56.102:9001/emplist。
（2）配置URL
return
Installing custom SQL...
hello team
最常访问
需要配置前端页面emplist.html 来展现数据。
include(admin.site.urls)),
import RequestContext
import
192.168.56.102:9001/emplist/
emp
DONE
图11-10
HttpResponseRedirect
---
## Page 467
对象返回。
创建一些数据。命令行的方式连接到 sqlite，如下：
from
from django.shortcuts import render_to_response,
views.py 的内容我们稍作修改，指定结果集为 emp_data，可以把结果集传入 response
所以要加入ORM层的数据查取逻辑，我们需要在VIEW层中来做。
>>> emp.objects.filter(ename='wusb') .values ('empno')
如果要做过滤查询，可以使用 filter，比如指定 ename='wusb'的记录，输出列为 empno。
>>> emp.objects.filter(ename='wusb');
>>>emp.objects.create(ename='macc');
再插入几条数据。
>>> emp.objects.create (ename='wusb') ;
>>> emp.objects.all () .values ('ename') 
如果想看到细节一些的信息，可以指定输出列，比如这里是ename，如下：
>>> emp.objects.create(ename='jeanron') ;
我们来创建几条记录，可以使用create 方式。
查看 emp 的所有数据库，数据的操作都是类似的 API 形式，
>>>from emp_test.models import emp
引入需要操作的 model，这里就是 emp，我们在 models.py 里面创建过的。
Python 2.7.14
[root@dev01 demo_test]# python manage.py shell
from
>>>exit()
退出操作。
[]
['ename'
[]
再次查看就有数据了
一
>>> emp.objects.all()
(InteractiveConsole)
 emp.objects.all().values('ename')
emp
emp
test.models
object>
20120313
(default,