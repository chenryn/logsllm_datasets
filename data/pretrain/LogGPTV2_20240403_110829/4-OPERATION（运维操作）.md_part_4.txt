### 2）重新加载配置文件
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 3）客户端测试（仔细观察浏览器地址栏的变化）
\[root@client \~\]# firefox http://192.168.4.5/a.html
## 步骤三：地址重写(正则匹配)
修改配置文件(访问192.168.4.5的请求重定向至www.tmooc.cn)
### 1) 修改Nginx服务配置
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
listen 80;
server_name localhost;
rewrite \^/ http://www.tmooc.cn/;
location / {
root html;
index index.html index.htm;
\# rewrite /a.html /b.html redirect;
}
}
### 2）重新加载配置文件
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 3）客户端测试（真实机测试，真实机才可以连接tmooc）
\[root@room9pc01 \~\]# firefox http://192.168.4.5
## 步骤四：修改配置文件(访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面)
### 1) 修改Nginx服务配置
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
listen 80;
server_name localhost;
rewrite \^/(.\*)\$ http://www.tmooc.cn/\$1; #(.\*)复制参数， \$1粘贴参数
location / {
root html;
index index.html index.htm;
}
}
### 2）重新加载配置文件
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 3）客户端测试（真实机测试，真实机才可以连接tmooc）
\[root@room9pc01 \~\]# firefox http://192.168.4.5
\[root@room9pc01 \~\]# firefox http://192.168.4.5/test
## 步骤五：修改配置文件(实现curl和火狐访问相同链接返回的页面不同)
### 1) 创建网页目录以及对应的页面文件：
\[root@proxy \~\]# echo \"I am Normal page\" \>
/usr/local/nginx/html/test.html
\[root@proxy \~\]# mkdir -p /usr/local/nginx/html/firefox/
\[root@proxy \~\]# echo \"firefox page\" \>
/usr/local/nginx/html/firefox/test.html
### 2) 修改Nginx服务配置
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
listen 80;
server_name localhost;
location / {
root html;
index index.html index.htm;
}
#这里，\~符号代表正则匹配，\*符号代表不区分大小写
if (\$http_user_agent \~\* firefox) { //识别客户端firefox浏览器
rewrite \^(.\*)\$ /firefox/\$1;
}
}
### 3）重新加载配置文件
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 4）客户端测试
\[root@client \~\]# firefox http://192.168.4.5/test.html
\[root@client \~\]# curl http://192.168.4.5/test.html
### 5）地址重写格式【总结】
rewrite 旧地址 新地址 \[选项\];
last 不再读其他rewrite
break 不再读其他语句，结束请求
redirect 临时重定向
permament 永久重定向
## 地址重写案例1 
访问www.a.com/a.html 返回 www.a.com/b.html的内容
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
server {
listen 80;
server_name www.a.com;
rewrite /a.html /b.html redirect
> #在server里面添加rewrite 访问a.html 转到b.html
\[root@proxy \~\]# firefox www.a.com/a.html
> #未加redirect 地址栏显示a.html 访问的是b.html
>
> #加了redirect 地址栏显示b.html 访问的也是b.html
## 地址重写案例2:
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
server {
listen 80;-
server_name www.a.com;
rewrite \^/ http://www.tmooc.cn;
\# \^/ 将所有的www.a.com网站转到www.tmooc.cn
## 地址重写案例3:
访问www.a.com/aa/bb/cc 跳转到www.tmooc.cn/aa/bb/cc
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
server {
listen 80;
server_name www.a.com;
rewrite \^/(.\*) http://www.tmooc.cn/\$1;
\# (.\*) 复制 \$1粘贴
## 地址重写案例4:
电脑访问:www.a.com/a.html \--\>/usr/local/nginx/html/a.html
手机访问:www.a.com/a.html \--\>/usr/local/nginx/phone/html/a.html
可以利用使用浏览器不一样,返回不同的页面,
也可以利用使用操作系统不一样,返回不同的页面
/usr/local/nginx/html/test.html
/usr/local/nginx/html/firefox/test.html
\[root@proxy \~\]# echo \"normal\" \>/usr/local/nginx/html/test.html
\[root@proxy \~\]# mkdir /usr/local/nginx/html/firefox
\[root@proxy \~\]# ls /usr/local/nginx/html/
50x.html b.html firefox index.html mysql.php test.html test.php
\[root@proxy \~\]# echo \"fox\"
\>/usr/local/nginx/html/firefox/test.html
\[root@proxy \~\]# cat /usr/local/nginx/html/firefox/test.html
fox
\[root@proxy \~\]# cat /usr/local/nginx/html/test.
test.html test.php
\[root@proxy \~\]# cat /usr/local/nginx/html/test.html
normal
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf #配置nginx.conf
server {
listen 80;
server_name www.a.com;
if (\$http_user_agent \~\* firefox) {
rewrite /(.\*) /firefox/\$1;
}
#以上在一个server中加入if 判断,如果是用firefox 访问的将执行rewrite
地址重写
常用正则
. ： 匹配除换行符以外的任意字符
? ： 重复0次或1次
\+ ： 重复1次或更多次
\* ： 重复0次或更多次
\\d ：匹配数字
\^ ： 匹配字符串的开始
\$ ： 匹配字符串的介绍
{n} ： 重复n次
{n,} ： 重复n次或更多次
\[c\] ： 匹配单个字符c
\[a-z\] ： 匹配a-z小写字母的任意一个
小括号()之间匹配的内容，可以在后面通过\$1来引用，\$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\\转义特殊字符。
## 地址重写案例5:
http {
\# 定义image日志格式
log_format imagelog \'\[\$time_local\] \' \$image_file \' \'
\$image_type \' \' \$body_bytes_sent \' \' \$status;
\# 开启重写日志
rewrite_log on;
server {
root /home/www;
location / {
\# 重写规则信息
error_log logs/rewrite.log notice;
\# 注意这里要用''单引号引起来，避免{}
rewrite
\'\^/images/(\[a-z\]{2})/(\[a-z0-9\]{5})/(.\*)\\.(png\|jpg\|gif)\$\'
/data?file=\$3.\$4;
\# 注意不能在上面这条规则后面加上"last"参数，否则下面的set指令不会执行
set \$image_file \$3;
set \$image_type \$4;
}
location /data {
\# 指定针对图片的日志格式，来分析图片类型和大小
access_log logs/images.log mian;
root /data/images;
\#
应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里
try_files /\$arg_file /image404.html;
}
location = /image404.html {
\# 图片不存在返回特定的信息
return 404 \"image not found\\n\";
}
}
# 日志文件
\[root@proxy nginx\]# cd logs
\[root@proxy logs\]# ls
access.log error.log
日志说明:在配置文件中有日志说明
\[root@proxy \~\]#vim /usr/local/nginx/conf/nginx.conf:
21 #log_format main \'\$remote_addr - \$remote_user \[\$time_local\]
\"\$request\" \'
22 \# \'\$status \$body_bytes_sent \"\$http_referer\" \'
23 \# \'\"\$http_user_agent\" \"\$http_x\_forwarded_for\"\';
24
25 #access_log logs/access.log main;
\$remote_addr
\$remote_user
\[\$time_local\]
\$request
\$status 状态
\$body_bytes_sent 访问的流量大小
\"\$http_referer\" 网站是从哪过来的(哪个链接)
\'\"\$http_user_agent\" 客户端的用户信息
\[root@proxy logs\]# vim access.log
192.168.4.5 - - \[18/Jan/2019:15:34:42 +0800\] \"GET /favicon.ico
HTTP/1.1\" 401 195 \"-\" \"Mozilla/5.0 (X11; Linux x86_64; rv:52.0)
Gecko/20100101 Firefox/52.0\"
@
\"GET /favicon.ico 每个网站默认访问,logo图标.行业约定俗成规定
> rewrite /a.html /b.html;
>
> rewrite /b.html /c.html;
访问a,返回c,
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
rewrite /a.html /b.html last; #直接结束匹配,不再读其他语句,结束请求
> rewrite /b.html /c.html
访问a返回b,不再向下执行,访问b,返回c
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
location /a.html {
> rewrite /a.html /b.html last; #还有其他语句
}
location /b.html {
> rewrite /b.html /c.html;
}
访问a,返回c,
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--