any self-decrypting behavior and are thus detected only by Gene.
For both plain and polymorphic versions, Gene identiﬁed the shell-
code using the PEB heuristic. The use of the PEB-based method
for locating kernel32.dll is probably preferred in Metasploit
due to its reliability.
We continued our evaluation with 22 samples downloaded from
the shellcode repository of the Nepenthes Project [6]. Two of the
samples had a broken decryptor and could not be executed prop-
Metasploit
(Polymorphic)
15 samples
Metasploit (Plain)
15 samples
0/15
Nepenthes
20 samples
Individual Samples
33 samples
4/33
Gene
GetPC
15/15
15/15
15/15
17/20
15/20
31/33
0
20
40
60
80
100
Detected shellcodes (%)
Figure 5: Number of shellcodes detected by Gene and the ex-
isting GetPC-based heuristic [9, 23, 38] for different shellcode
sets. From a total of 83 different shellcode implementations,
Gene detected 78 samples (94%), compared to 34 (41%) for the
GetPC heuristic.
erly. By manually unpacking the two payloads and scanning them
with Gene, in both cases the shellcode was identiﬁed by the PEB
heuristic. From the rest 20 shellcodes, 16 were identiﬁed by the
PEB heuristic, and one, named “Saalfeld,” by the SEH heuristic.
The Saalfeld shellcode is of particular interest due to the use of a
custom SEH handler although it is not an egg-hunt shellcode. The
SEH handler is registered for safely searching the address space of
the vulnerable process starting from address 0x77E00000, with the
aim to reliably detect the base address of kernel32.dll. The
SEH heuristic identiﬁes the proper registration of a custom SEH
handler, so the shellcode was successfully identiﬁed.
The remaining three shellcodes were missed due to the use of
hard-coded addresses, e.g., the linear address of kernel32.dll,
instead of reliable base address resolution. It would be trivial to
implement another detection heuristic similar to the PEB heuris-
tic based on commonly used hard-coded addresses in place of ad-
dressing based on the FS register to detect this kind of shellcode.
However, these samples correspond to quite old attacks and this
style naively implemented kind of shellcode is now encountered
rarely. From the 20 shellcodes, 15 are self-decrypting and are thus
detected by the GetPC-based heuristic.
Besides a few proof-of-concept implementations [5, 27] which
are identiﬁed correctly by Gene, we were not able to ﬁnd any other
shellcode samples that locate kernel32.dll using backwards
searching, probably due to the simplicity of the alternative PEB-
based technique.
In addition to the Saalfeld shellcode, the SEH
heuristic detected a proof-of-concept SEH-based egg-hunt imple-
mentation [28], as well as the “omelet” shellcode [36], an egg-hunt
variation that locates and recombines multiple smaller eggs into
the whole original payload. The SEH heuristic was also effective
in detecting polymorphic shellcode that uses SEH-based GetPC
code [30], which is currently missed by existing payload execution
systems. The SYSCALL heuristic was tested with three different
egg-hunt shellcode implementations [27,28,37], which were identi-
ﬁed correctly. In addition to these eight shellcode implementations,
we gathered more Windows shellcode samples from public repos-
itories [1, 3, 4], totaling 33 different samples. As shown in Fig. 5,
the GetPC-based heuristic detected only four of the shellcodes that
use simple XOR encryption, while Gene detected all but two of the
samples, again due to the use of hard-coded addresses.
Finally, as an extra veriﬁcation experiment, we tested Gene with
a large dataset of real polymorphic attacks captured in production
networks by Nemu [22]. Without using any self-decryption heuris-
tic, this data set allows us to test the effectiveness of Gene in iden-
tifying the actual plain shellcode after the decryption process has
completed. Gene analyzed more than 1.2 million attacks, which af-
ter the decryption process resulted to 98,602 unique payloads, and
in all cases it identiﬁed the decrypted plain shellcode correctly. Not
surprisingly, all shellcodes were identiﬁed by the PEB heuristic.
5.2 Heuristic Robustness
5.2.1 False Positives Evaluation
We tested the robustness of the heuristics against false positives
using a large and diverse set of benign inputs. For our ﬁrst experi-
ment, we captured the internal and external trafﬁc in two research
and educational networks and kept the client-initiated stream of
each TCP ﬂow, since currently Gene detects only attacks against
network services. Collectively, the data set consists of 15.5 million
streams, totaling more than 48GB of data. Depending on its size, a
stream can have from a few hundreds to many thousands of valid in-
struction sequences which are all analyzed independently by Gene.
Thus, we consider as a false positive any benign input with at least
one instruction sequence that matches one of the heuristics. When
scanning the 15.5 million streams of this data set with Gene, none
of the inputs matched any of the heuristics, resulting to zero false
positives.
Seeking more evidence for the resilience of the heuristics against
false positives, we continued the experiments with a much larger
set of artiﬁcially generated benign data. The purpose of this ex-
periment is to ensure that the random IA-32 machine code that is
derived by interpreting arbitrary data as code does not match any of
the heuristics. For this purpose, we used a script that continuously
generates inputs of random binary and ASCII data that are subse-
quently scanned by Gene. The script generated 20 million 32KB-
inputs of each type, totaling more than 1.3TB of data. The rationale
behind using inputs consisting of random ASCII characters, in ad-
dition to random binary data, is to approximate the random code
found in network streams that use text-based protocols. Similarly
to the previous experiment, the false positive rate was again kept at
zero.
5.2.2 Heuristic Analysis
We repeated the experiments of the previous section with the aim
to explore in depth the behavior of the heuristics when operating on
benign data. This time we measured the number of inputs with at
least one instruction sequence that matched the ﬁrst, the ﬁrst two,
or all three conditions of a heuristic.
Figure 6(a) shows the percentage of network streams that matched
a given number of conditions. Out of 15.5 million inputs, only 82
(0.0005%) had an instruction sequence with a memory access to
FS:[0x30] through the FS register—satisfying the ﬁrst condi-
tion of the PEB heuristic. There were no streams that matched both
the ﬁrst and the second or all three conditions, which is a promis-
ing indication for the robustness of the PEB heuristic since all three
conditions must be true for ﬂagging an input as shellcode. The
SYSCALL heuristic had a similar behavior, with just 51 of the in-
puts (0.0003%) exhibiting a single system call invocation, while
there were no streams with two or more system calls.
A much larger number of streams matched the ﬁrst condition of
the BACKWD and SEH heuristics (8,620 and 41,063 streams, re-
spectively). In both heuristics, the ﬁrst condition includes a mem-
ory access to FS:[0], which seems to appear more frequently
in random code compared to accesses at FS:[0x30]. A possi-
ble explanation for this is that the effective address computation in
the memory operand of some instruction can result to zero with a
higher probability compared to other values. For example, when
)
s
/
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
60
50
40
30
20
10
0
4K
RPC
all traffic
port 80
16K
64K
8K
Execution threshold (log scale)
32K
128K
Figure 7: The raw processing throughput of Gene for different
execution thresholds.
a mov ebx,fs:[eax] instruction is executed, it is more likely
that eax will have been zeroed out, e.g., due to a previous two-
byte long xor eax,eax instruction, instead of being set to 0x30.
However, the percentage of inputs that matched both the ﬁrst and
the second condition is very low (0.0003% and 0.0004%, respec-
tively), and no inputs matched all three conditions.
As shown in Fig. 6(b), the overall behavior when operating on
random binary data is comparable to that for network streams, with
no inputs fully matching any of the heuristics. However, for ASCII
data (Fig. 6(c)), although the ﬁrst condition in the PEB, BACKWD,
and SEH heuristics matched in roughly 0.03% of the inputs, there
were no inputs matching any of the subsequent conditions. The op-
code for the int instruction falls outside the ASCII range, so no in-
put matched not even the ﬁrst condition of the SYSCALL heuristic.
Overall, all heuristics seem to perform even better when operating
on ASCII data.
5.3 Runtime Performance
We evaluated the processing throughput of Gene using the real
network trafﬁc traces presented in Sec. 5.2.1. Gene was running on
a system with a Xeon 1.86GHz processor and 2GB of RAM. Fig-
ure 7 shows the raw processing throughput of Gene for different ex-
ecution thresholds. The throughput is mainly affected by the num-
ber of CPU cycles spent on each input. As the execution threshold
increases, the achieved throughput decreases because more emu-
lated instructions are executed per stream. A threshold in the order
of 8–16K instructions is sufﬁcient for the detection of plain as well
as the most advanced polymorphic shellcodes [24]. For port 80
trafﬁc, the random code due to ASCII data tends to form long in-
struction sequences that result to degraded performance compared
to binary data.
The overall runtime throughput is slightly lower compared to ex-
isting emulation-based detectors [23,24] due to the overhead added
by the virtual memory subsystem, as well as because Gene does
not use the zero-delimited chunk optimization used in these sys-
tems [23]. Previous approaches skip the execution of zero-byte de-
limited regions smaller than 50 bytes, with the rationale that most
memory corruption vulnerabilities cannot be exploited if the attack
vector contains null bytes. However, the detection heuristics of
Gene can identify shellcode in other attack vectors that may contain
null bytes, such as document ﬁles. Furthermore, our approach can
be applied in other domains [14, 15], for example for the detection
of client-side attacks, in which the shellcode is usually encrypted
at a higher level using some script language, and thus can be fully
functional even if it contains null bytes.
)
%
(
s
m
a
e
r
t
s
i
g
n
h
c
t
a
M
1
0.1
0.01
0.001
0
Condition 1
Conditions 1+2
Conditions 1+2+3
)
%
(
s
t
u
p
n
i
i
g
n
h
c
t
a
M
1
0.1
0.01
0.001
0
Condition 1
Conditions 1+2
Conditions 1+2+3
)
%
(
s
t
u
p
n
i
i
g
n
h
c
t
a
M
1
0.1
0.01
0.001
0
Condition 1
Conditions 1+2
Conditions 1+2+3
PEB
BACKWD
SEH
SYSCALL
(a) Benign network streams
PEB
BACKWD
SEH
SYSCALL
(b) Random binary data
PEB
BACKWD
SEH
SYSCALL
(c) Random ASCII data
Figure 6: False positives evaluation with (a) 15.5 million real network streams (48GB total data size), (b) 20 million randomly
generated binary inputs (650GB), and (c) 20 million randomly generated ASCII inputs (650GB). For all heuristics, none of the
inputs matched all three conditions, resulting to zero false positives.
In practice, Gene can monitor high speed links when scanning
for server-side attacks because client-initiated trafﬁc (requests) is
usually a fraction of the server-initiated trafﬁc (responses). In our
preliminary deployments in production networks, Gene can scan
trafﬁc of up to 100 Mbit/s without dropping packets. Furthermore,
Gene currently scans the whole input blindly, without any knowl-
edge about the actual network protocol used. Augmenting the in-