title:FastKitten: Practical Smart Contracts on Bitcoin
author:Poulami Das and
Lisa Eckey and
Tommaso Frassetto and
David Gens and
Kristina Host&apos;akov&apos;a and
Patrick Jauernig and
Sebastian Faust and
Ahmad-Reza Sadeghi
FastKitten: Practical Smart Contracts on Bitcoin
Poulami Das, Lisa Eckey, Tommaso Frassetto, David Gens, Kristina Hostáková, 
Patrick Jauernig, Sebastian Faust, and Ahmad-Reza Sadeghi, Technische Universität 
Darmstadt, Germany
https://www.usenix.org/conference/usenixsecurity19/presentation/das
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.FASTKITTEN:
Practical Smart Contracts on Bitcoin
Poulami Das*
Lisa Eckey*
Kristina Hostáková* Patrick Jauernig§
Tommaso Frassetto§
Sebastian Faust*
David Gens§
Ahmad-Reza Sadeghi§
Technische Universität Darmstadt, Germany
* ﬁPI:EMAIL
§ ﬁPI:EMAIL
Abstract
Smart contracts are envisioned to be one of the killer appli-
cations of decentralized cryptocurrencies. They enable self-
enforcing payments between users depending on complex
program logic. Unfortunately, Bitcoin – the largest and by far
most widely used cryptocurrency – does not offer support for
complex smart contracts. Moreover, simple contracts that can
be executed on Bitcoin are often cumbersome to design and
very costly to execute. In this work we present FASTKITTEN,
a practical framework for executing arbitrarily complex smart
contracts at low costs over decentralized cryptocurrencies
which are designed to only support simple transactions. To
this end, FASTKITTEN leverages the power of trusted comput-
ing environments (TEEs), in which contracts are run off-chain
to enable efﬁcient contract execution at low cost. We formally
prove that FASTKITTEN satisﬁes strong security properties
when all but one party are malicious. Finally, we report on
a prototype implementation which supports arbitrary con-
tracts through a scripting engine, and evaluate performance
through benchmarking a provably fair online poker game. Our
implementation illustrates that FASTKITTEN is practical for
complex multi-round applications with a very small latency.
Combining these features, FASTKITTEN is the ﬁrst truly prac-
tical framework for complex smart contract execution over
Bitcoin.
1 Introduction
Starting with their invention in 2008, decentralized cryptocur-
rencies such as Bitcoin [51] currently receive broad attention
both from academia and industry. Since the rise of Bitcoin,
countless new cryptocurrencies have been launched to address
some of the shortcomings of Nakamoto’s original proposal.
Examples include Zerocash [47] which improves on Bitcoin’s
limited anonymity, and Ethereum [16] which offers complex
smart contract support. Despite these developments, Bitcoin
still remains by far the most popular and intensively stud-
ied cryptocurrency, with its current market capitalization of
$109 billion which accounts for more than 50% of the total
cryptocurrency market size [2].
A particular important shortcoming of Bitcoin is its limited
support for so-called smart contracts. Smart contracts are
(partially) self-enforcing protocols that allow emitting trans-
actions based on complex program logic. Smart contracts
enable countless novel applications in, e.g., the ﬁnancial in-
dustry or for the Internet of Things, and are often quoted as
a glimpse into our future [9]. The most prominent cryptocur-
rency that currently allows to run complex smart contracts is
Ethereum [16], which has been designed to support Turing
complete smart contracts. While Ethereum is continuously
gaining popularity, integrating contracts directly into a cryp-
tocurrency has several downsides as frequently mentioned
by the advocates of Bitcoin. First, designing large-scale se-
cure distributed systems is highly complex, and increasing
complexity even further by adding support for complex smart
contracts also increases the potential for introducing bugs.
Second, in Ethereum, smart contracts are directly integrated
into the consensus mechanics of the cryptocurrency, which re-
quires in particular that all nodes of the decentralized system
execute all contracts. This makes execution of contracts very
costly and limits the number and complexity of applications
that can eventually be run over such a system. Finally, many
applications for smart contracts require conﬁdentiality, which
is currently not supported by Ethereum.
There has been signiﬁcant research effort in addressing these
challenges individually. Some works aim to extend the func-
tionality of Bitcoin by showing how to build contracts over
Bitcoin by using multiparty computation (MPC) [37, 38, 40],
others focus on achieving privacy-preserving contracts (e.g.,
Hawk [35], Ekiden [19]) by combining existing cryptocur-
rencies with trusted execution environments (TEEs). How-
ever, as we elaborate in Section 2, all of these solutions suf-
fer from various deﬁciencies: they cannot be integrated into
existing cryptocurrencies such as Bitcoin, are highly inefﬁ-
cient (e.g., they use heavy cryptographic techniques such as
non-interactive zero-knowledge proofs or general MPC), do
not support money mechanics, or have signiﬁcant ﬁnancial
costs due to complex transactions and high collateral (money
blocked by the parties in MPC-based solutions).
USENIX Association
28th USENIX Security Symposium    801
In this work, we propose FASTKITTEN, a novel system that
leverages trusted execution environments (TEEs) utilizing
well-established cryptocurrencies, such as Bitcoin, to offer
full support for arbitrary complex smart contracts. We empha-
size that FASTKITTEN does not only address the challenges
discussed above, but is also highly efﬁcient. It can be easily
integrated into existing cryptocurrencies and hence is ready to
use today. FASTKITTEN achieves these goals by using a TEE
to isolate the contract execution inside an enclave, shielding
it from potentially malicious users. The main challenges of
this solution, such as for instance how to load and validate
blockchain data inside the enclave or how to prevent denial
of service attacks, are discussed in Section 3.1. Moving the
contract execution into the secure enclave guarantees correct
and private evaluation of the smart contract even if it is not
running on the blockchain and veriﬁed by the decentralized
network. This approach circumvents the efﬁciency shortcom-
ing of cryptocurrencies like Ethereum, where contracts have
to be executed in parallel by thousands of users. Most related
to our work is the recently introduced Ekiden system [19],
which uses a TEE to support execution of multiparty compu-
tations but does support contracts that handle coins. While
Ekiden is efﬁcient for single round contracts, it is not de-
signed for complex reactive multi-round contracts, and their
off-chain execution. The latter is one of the main goals of
FASTKITTEN.
We summarize our main goals and contributions below.
• Smart Contracts for Bitcoin: We support arbitrary
multi-round smart contracts executed amongst any ﬁ-
nite number of participants, where our system can be run
on top of any cryptocurrency with only limited script-
ing functionality. We emphasize that Bitcoin is only one
example over which our system can be deployed today;
even cryptocurrencies that are simpler than Bitcoin can
be used for FASTKITTEN.
• Efﬁcient Off-Chain Execution: Our protocol is de-
signed to keep the vast majority of program execution
off-chain in the standard case if all parties follow the
protocol. Since our system incentivizes honest behavior
for most practical use cases, FASTKITTEN can thus run
in real-time at low costs.
• Formal Security Analysis: We formally analyze the
security of FASTKITTEN in a strong adversarial model.
We prove that either the contract is executed correctly,
or all honest parties get their money back that they have
initially invested into the contract, while a malicious
party loses its coins. Additionally, the service provider
who runs the TEE is provably guaranteed to not lose
money if he behaves honestly.
• Implementation and benchmarking: We provide an
in-depth analysis of FASTKITTEN’s performance and
costs and evaluate our framework implementation with
respect to several system parameters by offering bench-
marks on real-world use cases. Concretely, we show that
online poker can run with an overall match latency of
45ms and costs per player are in order of magnitude of
one USD, which demonstrates FASTKITTEN’s practical-
ity.
We emphasize that FASTKITTEN requires only a single TEE
which can be owned either by one of the participants or by an
external service provider which we call the operator. In addi-
tion, smart contracts running in the FASTKITTEN execution
framework support private state and secure inputs, and thus,
offer even more powerful contracts than Ethereum. Finally,
we stress that FASTKITTEN can support contracts that may
span over multiple different cryptocurrencies where each par-
ticipant may use her favorite currency for the money handled
by the contract.
2 Related Work
Support for execution of arbitrary complex smart contracts
over decentralized cryptocurrencies was ﬁrst proposed and
implemented by the Ethereum cryptocurrency. As pointed
out in Section 1, running smart contracts over decentralized
cryptocurrencies results in signiﬁcant overheads due to the
replicated execution of the contract. While there are currently
huge research efforts aiming at reducing these overheads
(for instance, via second layer solutions such as state chan-
nels [24, 49], Arbitrum [34] or Plasma [55], outsourcing of
computation [58], or permissioned blockchains [46]), these so-
lutions work only over cryptocurrencies with support complex
smart contracts, e.g. over Ethereum. Another line of work,
which includes Hawk [36] and the “Ring of Gyges” [33], is
addressing the shortcoming that Ethereum smart contracts
cannot keep private state. However, also these solutions are
based on complex smart contracts and hence cannot be inte-
grated into popular legacy cryptocurrencies such as Bitcoin,
which is the main goal of FASTKITTEN.
In this section we will focus on related work, which con-
siders smart contract execution on Bitcoin. We separately
discuss multiparty computation based smart contracts and so-
lutions using a TEE. We provide a more detailed discussion on
how the above-mentioned Ethereum based solutions compare
to FASTKITTEN in Appendix A. Additionally, in Section 8
we discuss some exemplary contract use cases and compare
their execution inside FASTKITTEN with the execution over
Ethereum.
Multiparty computation for smart contracts An interest-
ing direction to realize complex contracts over Bitcoin is to
use so-called multiparty computation with penalties [38–40].
Similar to FASTKITTEN these works allow secure m-round
contract execution but they rely on the claim-or-refund func-
tionality [39]. Such a functionality can be instantiated over
Bitcoin and hence these works illustrate feasibility of generic
contracts over Bitcoin. Unfortunately, solutions supporting
generic contracts require complex (and expensive) Bitcoin
transactions and high collateral locked by the parties which
makes them impractical for most use-cases. Concretely, in
802    28th USENIX Security Symposium
USENIX Association
Approach
Ethereum contracts
MPC [38–40]
Ekiden [19]
FASTKITTEN
Minimal
# TX
O(m)
O(1)
O(m)
O(1)
Collateral Generic
Contracts
O(n)
O(cid:0)n2m(cid:1)


no support for money
O(n)

Privacy




Table 1: Selected solutions for contract execution over Bitcoin
and their comparison to Ethereum smart contracts. Above, n
denotes the number of parties and m is the number of reactive
execution rounds.
all generic n-party contract solutions we are aware of, each
party needs to lock O(nm) coins, which overall results in
O(n2m) of locked collateral. In contrast, the total collateral
in FASTKITTEN is O(n), see column “Collateral” in Table 1.
It has been shown that for speciﬁc applications, concretely, a
multi-party lottery, signiﬁcant improvements in the required
collateral are possible when using MPC-based solutions [48].
This however comes at the cost of an inefﬁcient setup phase,
communication complexity of order O(2n), and O(logn) on-
chain transactions for the execution phase. Let us stress that
the approach used in [48] cannot be applied to generic con-
tracts.
Overall, while MPC-based contracts are an interesting direc-
tion for further research, we emphasize that these systems are
currently far from providing a truly practical general-purpose
platform for contract execution over Bitcoin—which is the
main goal of FASTKITTEN.
TEEs for blockchains There has recently been a large
body of work on using TEEs to improve certain features
of blockchains [10, 43, 59, 63, 64]. A prominent example is
Teechain [43], which enables off-chain payment channel sys-
tems over Bitcoin. Most of these prior works do not use the
TEE for smart contract execution. Some notable exceptions
include Hawk [36] and the “Ring of Gyges” [33], who pro-
pose privacy preserving off-chain contracts execution, but, as
already mentioned, do not work over Bitcoin.
Probably most related to our work is Ekiden [19], which
proposes a system for private off-chain smart contract ex-