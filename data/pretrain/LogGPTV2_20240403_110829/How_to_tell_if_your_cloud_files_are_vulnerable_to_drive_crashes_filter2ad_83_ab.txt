### Smoothing Read-Time Variance with RAFT Queries

To address the issue of read-time variance, we introduce a method for constructing RAFT queries \( Q \) that include multiple blocks per drive. This approach ensures that the server cannot optimize the access time by scheduling block accesses in a way that exploits drive efficiencies, such as sequential reads.

#### Naive Approach and Its Limitations

A straightforward but naive approach to constructing a challenge \( Q \) consisting of multiple blocks per drive (denoted as \( q \)) is for the client to specify \( c \times q \) random blocks in \( Q \). However, this method allows the server to schedule the set of \( c \times q \) block accesses to minimize total access time. Another alternative is for the client to issue challenges in \( q \) steps, waiting for a response before issuing the next unpredictable challenge. This, however, requires \( c \) rounds of interaction, which is inefficient.

#### Lock-Step Challenge Generation

We propose a more effective approach called **lock-step challenge generation**. The key idea is for the client to specify the initial query \( Q \) with \( c \) random challenge blocks (one per drive). For each subsequent step, the set of \( c \) challenge blocks depends on the content of the file blocks accessed in the previous step. The server can only proceed to the next step after fully completing the current one. This technique is a form of repeated application of a Fiat-Shamir-like heuristic [12] to generate \( q \) independent, unpredictable sets of challenges non-interactively. The server's response to \( Q \) is the aggregate (hash) of all the \( c \times q \) file blocks it accesses.

### Formal Definitions

#### Remote Assessment of Fault Tolerance (RAFT)

A **Remote Assessment of Fault Tolerance (RAFT)** aims to enable a service provider to prove to a client that it has stored a file \( F \) with tolerance against \( t \) drive failures. In this model, the file is first encoded to add redundancy, either by the client or the server. The encoded file is then stored using a specified number of drives. Periodically, the client issues challenges to the server, consisting of a subset of file block indices. If the server responds correctly and promptly, the client is convinced that the server stores the file with the required fault tolerance. The client can also reconstruct the file from the encoding stored by the server, assuming at most \( t \) drive failures.

#### System Definition

To define the RAFT system formally, we introduce the following functions:

- **Keygen(1\(^{\ell}\)) \(\rightarrow\) \(\kappa\)**: A key-generation function that outputs a key \(\kappa\). A keyless system is denoted by \(\kappa = \varnothing\).
- **Encode(\(\kappa\), \(F = \{f_i\}_{i=1}^m\), \(t\), \(c\)) \(\rightarrow\) \(G = \{g_i\}_{i=1}^n\)**: An encoding function applied to an \( m \)-block file \( F \). It takes additional inputs of fault tolerance \( t \) and the number of logical disks \( c \). It outputs an encoded file \( G \) with \( n \geq m \) blocks. The function may be keyed (e.g., encrypting blocks under \(\kappa\)) or unkeyed (e.g., applying an erasure code).
- **Map(n, \(t\), \(c\)) \(\rightarrow\) \(\{C_j\}_{j=1}^c\)**: A function computed by both the client and server that maps the encoded file size \( n \), fault tolerance \( t \), and the number of logical disks \( c \) to a logical mapping of file blocks to \( c \) disks. The output consists of sets \( C_j \subseteq \{1, 2, \ldots, n\} \) denoting the block indices stored on drive \( j \). If the output is not \(\perp\), the placement is tolerant to \( t \) drive failures.
- **Challenge(n, \(G\), \(t\), \(c\)) \(\rightarrow\) \(Q\)**: A (stateful and probabilistic) function computed by the client that generates a challenge \( Q \) consisting of a set of block indices in \( G \) and a random nonce \(\nu\). The aim is to verify disk-failure tolerance.
- **Response(Q) \(\rightarrow\) (R, T)**: An algorithm that computes the server’s response \( R \) to challenge \( Q \) using the encoded file blocks. The timing \( T \) is measured by the client.
- **Verify(G, \(Q\), \(R\), \(T\)) \(\rightarrow\) \(b \in \{0, 1\}\)**: A verification function for the server’s response. \( b = 1 \) denotes "accept" (correct storage verified), and \( b = 0 \) denotes "reject".
- **Reconstruct(\(\kappa\), \(r\), \(\{g_i^*\}_{i=1}^r\}) \(\rightarrow\) \(F^* = \{f_i^*\}_{i=1}^m\)**: A reconstruction function that takes a set of \( r \) encoded file blocks and reconstructs the original \( m \)-block file or outputs \(\perp\) if reconstruction fails.

The RAFT system is defined as \( \text{RAFT}(t) = \{ \text{Keygen}, \text{Encode}, \text{Map}, \text{Challenge}, \text{Response}, \text{Verify}, \text{Reconstruct} \} \).

### Client Model

In some protocols, the client needs to store secret keys for encoding and reconstructing the file (keyed protocols). Unkeyed protocols do not use secret keys for file encoding but instead use public transforms. If the Map function outputs a logical layout \(\{C_j\}_{j=1}^c \neq \perp\), the model is layout-specified. Otherwise, it is layout-free. This paper focuses on layout-specified protocols.

### Drive and Network Models

The response time \( T \) of the server to a challenge \( Q \) has two components: drive read-request delays and network latency. We model these as follows:

- **Drive Modeling**: The server's storage resources are modeled as a collection of \( d \) independent hard drives. Each drive stores a collection of file blocks, and the timing of a read request depends on the query history, reflecting block-retrieval delays. We assume all drives belong to the same class but may differ in seek time, latency, and manufacturer.
- **Network Latency**: Our protocols handle variations in network latency between the client and cloud provider. We set an upper bound threshold on the variability in observed latency and design the protocol to ensure that the difference in timing to reply successfully to a challenge between an adversarial and an honest server is at least the maximum observed variability in network latency.

### Adversarial Model

The adversarial model includes a cheap-and-lazy server that aims to reduce resource costs without modifying file contents. The general adversarial model considers a fully malicious server that can manipulate and store the file in an arbitrary manner. We focus on the cheap-and-lazy model due to the lack of efficient protocols to detect fully malicious servers.

### Problem Instances

A RAFT problem instance includes a client model, an adversarial model, and drive and network models. We propose RAFT designs incrementally, starting with a simple problem instance and gradually incorporating more realistic models.

### Basic RAFT Protocol

In this section, we construct a simple RAFT system resilient against the cheap-and-lazy adversary, considering very simple disk and network models. While this protocol is mostly of theoretical interest, it provides a conceptual framework for more complex RAFT schemes.