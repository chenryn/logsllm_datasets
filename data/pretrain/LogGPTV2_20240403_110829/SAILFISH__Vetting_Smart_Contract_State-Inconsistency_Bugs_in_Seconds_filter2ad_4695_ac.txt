Cr.
Haz.
Scl.
Off.
SECURIFY [54]
VANDAL [23]
MYTHRIL [3]
OYENTE [46]
SEREUM [50]
SAILFISH
Partial No support. Cr.: Cross-function, Haz.: Hazardous
Full
access, Scl.: Scalability, Off.: Ofﬂine detection
times in any arbitrary order—which translates to an unbounded
search space during static reasoning. SECURIFY [54] relies
on a Datalog-based data-flow analysis, which might fail to
reach a fixed point in a reasonable amount of time, as the size
of the contract grows. MYTHRIL [3] and OYENTE [46] are
symbolic-execution-based tools that share the common problems
suffered by any symbolic engine.
Our solution: In SAILFISH, the symbolic verifier validates
a program path involving hazardous accesses. Unfortunately,
the path could access state variables that are likely to be
used elsewhere in the contract. It would be very expensive
for a symbolic checker to perform a whole-contract analysis
required to precisely model those state variables. We augment
the verifier with a value summary that over-approximates the
side-effects of the public methods on the state variables across
all executions. This results in an inexpensive symbolic evaluation
that conservatively prunes false positives.
Ofﬂine bug detection. Once deployed, a contract becomes
immutable. Therefore, it is important to be able to detect bugs
prior to the deployment. However, offline (static) approaches
come with their unique challenges. Unlike an online (dynamic)
tool that detects an ongoing attack in just one execution, a static
tool needs to reason about all possible combinations of the
contract’s public methods while analyzing SI issues. As a static
approach, SAILFISH needs to tackle all these challenges.
D. SAILFISH overview
This section provides an overview (Figure 4) of SAILFISH
which consists of the EXPLORER and the REFINER modules.
Explorer. From a contract’s source, SAILFISH statically builds
a storage dependency graph (SDG) (Section V-A) which
over-approximates the read-write accesses (Section V-B) on
the storage variables along all possible execution paths. State-
inconsistency (SI) vulnerabilities are modeled as graph queries
over the SDG. If the query results in an empty set, the contract
is certainly non-vulnerable. Otherwise, we generate a counter-
example which is subject to further validation by the REFINER.
Example 1 Example 1 (Figure 2) contains a reentrancy bug
that spans across two functions. The attacker is able to create
an SI by leveraging hazardous accesses—splits[id]
influences (read) the argument of the external call at Line 16 in
splitFunds, and it is set (write) at Line 5 in updateSplit.
The counter-example returned by the EXPLORER is 11 → 12
→ 16 → 4 → 5 . Similarly, in Example 2 (Figure 3), when
withdrawBalance is composed with transfer to model a
cross-function attack, SAILFISH detects the write at Line 10, and
the read at Line 19 as hazardous. Corresponding counter-example
Fig. 4: Overview of SAILFISH
is 4 ... 9 → 17 ... 19 . In both the cases, the EXPLORER
detects a potential SI, so conservatively they are flagged as
possibly vulnerable. However, this is incorrect for Example 2.
Thus, we require an additional step to refine the initial results.
Reﬁner. Although the counter-examples obtained from the
EXPLORER span across only two public functions P1 and P2,
the path conditions in the counter-examples may involve state
variables that can be operated on by the public methods P∗ other
than those two. For example, in case of reentrancy, the attacker
can alter the contract state by invoking P∗ after the external
call-site—which makes reentry to P2 possible. To alleviate
this issue, we perform a contract-wide value-summary analysis
that computes the necessary pre-conditions to set the values
of storage variables. The symbolic verifier consults the value
summary when evaluating the path constraints.
Example 2 In Example 2 (Figure 3), the REFINER would
conservatively assume the mutex to be unconstrained after the
external call at Line 9 in absence of a value summary – which
would make the path condition feasible. However, the summary
(Section VI) informs the symbolic checker that all the possible
program flows require the mutex already to be false, in
order to set the mutex to false again. Since the pre-condition
conflicts with the program-state δ = {mutex (cid:55)→ true} (set by
Line 6), SAILFISH refutes the possibility of the presence of a
reentrancy, thereby pruning the false warning.
IV. STATE INCONSISTENCY BUGS
In this section, we introduce the notion of state-inconsistency,
and how it is related to reentrancy and TOD bugs.
Let (cid:126)F be the list of all public/external functions in a contract
C defined later in Figure 9. For each function F ∈ (cid:126)F, we denote
F.statements to be the statements of F, and f = F.name to
be the name of F. In Ethereum, one or more functions can be
invoked in a transaction T . Since the contract code is executed by
the EVM, the value of its program counter (PC) deterministically
identifies every statement s∈F.statements during run-time. An
event e = (cid:104)pc,f ((cid:126)x),inv(cid:105) is a 3-tuple that represents the inv-th
invocation of the function F called from outside (i.e., external
to the contract C) with arguments (cid:126)x. Identical invocation of a
function F is associated with the same arguments. For events,
we disregard internal subroutine calls, e.g., if the function F
calls another public function G from inside its body, the latter
invocation does not generate an event. In other words, the
notion of events captures the occurrences when a public/external
method of a contract is called externally, i.e., across the contract
boundary. Functions in events can be called in two ways: either
directly by T , or by another contract. If an external call statement
sc ∈Fc.statements results in a reentrant invocation of F, then
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
165
Smart ContractExplorerPoints-To &DataflowAnalysesRefiner  Feasible paths +Value summaryStorage DependencyGraphQuerypc holds the value of the program counter of sc. In this case,
we say that the execution of F is contained within that of Fc.
However, the value pc = 0 indicates that F is invoked by T , and
not due to the invocation of any other method in C.
Deﬁnition 1 (Schedule). A schedule H = [e1, e2, ..., en],
∀e∈H,e.f ∈{F.name|F ∈ (cid:126)F} is a valid sequence of n events
that can be executed by the EVM. The events, when executed
in order on an initial contract state ∆, yield the final state ∆(cid:48),
H−→ ∆(cid:48).
i.e., ∆ e1−→ ∆1
The set of all possible schedules is denoted by H.
Deﬁnition 2 (Equivalent schedules). Two schedules H1 and
H2, where |H1| = |H2|, are equivalent, if ∀e ∈ H1,∃e(cid:48) ∈ H2
such that e.f = e(cid:48).f ∧ e.inv = e(cid:48).inv, and ∀e(cid:48) ∈ H2,∃e ∈ H1,
such that e(cid:48).f = e.f∧e(cid:48).inv = e.inv. We denote it by H1≡H2.
Intuitively, equivalent schedules contain the same set of
e2−→ ∆2... en−→ ∆(cid:48), which we denote as ∆
function invocations.
Deﬁnition 3 (Transformation function). A transformation
function µ : H → H accepts a schedule H, and transforms it
to an equivalent schedule H(cid:48) ≡ H, by employing one of two
possible strategies at a time—(i) mutates pc of an event ∃e(cid:48)∈H(cid:48),
such that e(cid:48).pc holds a valid non-zero value, (ii) permutes H.
These strategies correspond to two possible ways of transaction
ordering, respectively: (a) when a contract performs an external
call, it can be leveraged to re-enter the contract through internal
transactions, (b) the external transactions of a contract can be
mined in any arbitrary order.
Deﬁnition 4 (State inconsistency bug). For a contract instance
C, an initial state ∆, and a schedule H1 where ∀e∈H1,e.pc = 0,
H1−−→ ∆1 and
if there exists a schedule H2 = µ(H1), where ∆
H2−−→ ∆2, then C is said to have a state-inconsistency bug, iff
∆
∆1(cid:54)= ∆2.
Deﬁnition 5 (Reentrancy bug). If a contract C contains an
SI bug due to two schedules H1 and H2 = µ(H1), such that
∃e ∈ H2 (e.pc (cid:54)= 0) (first transformation strategy), then the
contract is said to have a reentrancy bug.
In other words, e.pc (cid:54)= 0 implies that e.f is a reentrant
invocation due to an external call in C.
Deﬁnition 6 (Generalized TOD bug). If a contract C contains
an SI bug due to two schedules H1 and H2 = µ(H1), such that
H2 is a permutation (second transformation strategy) of H1,
then the contract is said to have a generalized transaction order
dependence (G-TOD), or event ordering bug (EO) [43].
Permutation of events corresponds to the fact that the trans-
actions can be re-ordered due to the inherent non-determinism in
the network, e.g., miner’s scheduling strategy, gas supplied, etc.
In this work, we limit the detection to only those cases where
Ether transfer is affected by state-inconsistency—which is in line
with the previous work [54], [46]. We refer to those as TOD bugs.
V. EXPLORER: LIGHTWEIGHT EXPLORATION OVER SDG
This section introduces the storage dependency graph (SDG),
a graph abstraction that captures the control and data flow
relations between the storage variables and the critical program
instructions, e.g., control-flow deciding, and state-changing
operations of a smart contract. To detect SI bugs, we then define
hazardous access, which is modeled as queries over the SDG.
A. Storage dependency graph (SDG)
In a smart contract, the public methods are the entry-points
which can be called by an attacker. SAILFISH builds a storage
dependency graph (SDG) N = (V, E, χ) that models the
execution flow as if it was subverted by an attacker, and how
the subverted flow impacts the global state of the contract.
Specifically, the SDG encodes the following information:
Nodes. A node of an SDG represents either a storage variable,
or a statement operating on a storage variable. If V be the set
of all storage variables of a contract, and S be the statements
operating on V, the set of nodes V :={V∪S}.
Edges. An edge of an SDG represents either the data-flow
dependency between a storage variable and a statement, or the
relative ordering of statements according to the program control-
flow. χ(E)→{D,W,O} is a labeling function that maps an edge to
one of the three types. A directed edge (cid:104)u,v(cid:105) from node u to node
v is labeled as (a) D; if u∈V,v∈S, and the statement v is data-
dependent on the state variable u (b) W; if u∈S,v∈V, and the
state variable v is written by the statement u (c) O; if u∈S,v∈S,
and statement u precedes statement v in the control-flow graph.
We encode the rules for constructing an SDG in Datalog.
First, we introduce the reader to Datalog preliminaries, and then
describe the construction rules.
Datalog preliminaries. A Datalog program consists of a set
of rules and a set of facts. Facts simply declare predicates
that evaluate to true. For example, parent("Bill",
"Mary") states that Bill is a parent of Mary. Each Datalog
rule defines a predicate as a conjunction of other predicates.
For example, the rule: ancestor(x, y) :- parent(x,
z), ancestor(z, y)—says that ancestor(x, y) is
true, if both parent(x, z) and ancestor(z, y) are true.
In addition to variables, predicates can also contain constants,
which are surrounded by double quotes, or “don’t cares”, denoted
by underscores.
reach(s1,s2)
intermediate(s1,s2,s3)
succ(s1,s2)
extcall(s,cv)
entry(s,m)
exit(s,m)
storage(v)
write(s,v)
depend(s,v)
owner(s)
:− s2 is reachable from s1
:− reach(s1,s2),reach(s2,s3)
:− s2 is the successor of s1
:− s is an external call,
cv is the call value
:− s is an entry node of method m
:− s is an exit node of method m
:− v is a storage variable
:− s updates variable v
:− s is data-ﬂow dependent on v
:− only owner executes s
Fig. 5: Built-in rules for ICFG related predicates.
Base ICFG facts. The base facts of our inference engine
describe the instructions in the application’s inter-procedural
control-flow graph (ICFG). In particular, Figure 5 shows the
base rules that are derived from a classical ICFG, where s, m and
v correspond to a statement, method, and variable respectively.
SAILFISH uses a standard static taint analysis out-of-the-box
to restrict the entries in the extcall predicate. Additionally,
owner(s) represents that s can only be executed by contract
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
166
owners, which enables SAILFISH to model SI attacks precisely.
Refer to Appendix V-B for details.
sdg(s1,v,(cid:48)
sdg(s1,v,(cid:48)
sdg(s1,s2,(cid:48)
sdg(s1,s2,(cid:48)
sdg(s4,s3,(cid:48)
(cid:48))
W
(cid:48))
D
(cid:48))
O
(cid:48))
O
(cid:48))
O
:− write(s1,v),storage(v)
:− depend(s1,v),storage(v)
:− sdg(s1,_,_),reach(s1,s2),sdg(s2,_,_),
¬intermediate(s1,_,s2)
:− extcall(s1,_),entry(s2,_)
:− extcall(s1,_),entry(_,m0),
succ(s1,s3),exit(s4,m0)
Fig. 6: Rules for constructing SDG.
SDG construction. The basic facts generated from the previous
step can be leveraged to construct the SDG. As shown in Fig 6, a
“write-edge” of an SDG is labeled as ’W’, and is constructed by
checking whether storage variable v gets updated in statement
s. Similarly, a “data-dependency edge” is labeled as ’D’, and
is constructed by determining whether the statement s is data-
dependent on the storage variable v. Furthermore, we also have
the “order-edge” to denote the order between two statements, and
those edges can be drawn by checking the reachability between
nodes in the original ICFG. Finally, an external call in SOLIDITY
can be weaponized by the attacker by hijacking the current
execution. In particular, once an external call is invoked, it may
trigger the callback function of the attacker who can perform
arbitrary operations to manipulate the storage states of the
original contract. To model these semantics, we also add extra
’O’-edges to connect external calls with other public functions
that can potentially update storage variables that may influence
the execution of the current external call. Specifically, we add
an extra order-edge to connect the external call to the entry point
of another public function m, as well as an order-edge from the
exit node of m to the successor of the original external call.
Example 3 Consider Example 1 (Figure 2) that demonstrates an
SI vulnerability due to both splitFunds and updateSplit
methods operating on a state variable splits[id]. Figure 7
models this attack semantics. deposits and splits[id]
correspond to the variable nodes in the graph. Line 12 writes to
deposits; thus establishing a W relation from the instruction
to the variable node. Line 16 and Line 19 are data-dependent
on both the state variables. Hence, we connect the related nodes
with D edges. Finally, the instruction nodes are linked together
with directed O edges following the control-flow. To model the
reentrancy attack, we created an edge from the external call node
2 → 4 , the entry point of splitFunds. Next, we remove the
edge between the external call 2 , and its successor 3 . Lastly,
we add an edge between 5 , the exit node of updateSplit,
and 3 , the following instruction in updateSplit.
B. Hazardous access
Following our discussion in Section IV, to detect SI bugs in a
smart contract, one needs to enumerate and evaluate all possible
schedules on every contract state—which is computationally
infeasible. To enable scalable detection of SI bugs statically,
we define hazardous access, which is inspired by the classical
data race problem, where two different execution paths operate
on the same storage variable, and at least one operation is a
] and green [
Fig. 7: SDG for Example 1. Ovals and rectangles represent storage
variables and instructions. Blue [
] colored nodes
correspond to instructions from splitFunds and updateSplit
methods, respectively. The O, D, and W edges stand for order, data,
and write edges, respectively. The red [
] edges on splits
denote hazardous access.
write. In a smart contract, the execution paths correspond to two
executions of public function(s).
As shown in the hazard(.) predicate in Figure 8, a hazardous
access is a tuple denoted by (cid:104)s1,s2,v(cid:105), where v is a storage vari-
able which both the statements s1 and s2 operate on, and either s1,