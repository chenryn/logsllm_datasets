可采取以下动作：
1) 用一个空格替换所有的（# #）符号。
2) 删除起始域中最前面的0（0 0）。
3) 删除行尾控制字符（^ M）。
一些系统中，回车符为^ @和^ L，如果遇到一些怪异的字符，不必担心，只要是在行尾并
且全都相同就可以。
按步执行每一项任务，以保证在进行到下一任务前得到理想结果。使用输入文件 d o s . t x t。
任务1。 删除所有的#字符很容易，可以使用全局替换命令。这里用一个空格替换两个或
更多的#符号。
任务2。 删除所有行首的0。使用^符号表示模式从行首开始，^ 0 *表示行首任意个0。模式
s / ^ 0 * / / g设置替换部分为空，即为删除模式，正是要求所在。
任务3。 最后去除行尾 ^ M符号，为此需做全局替换。设置替换部分为空。模式为：
‘s / ^ m / / g’，注意‘^ M’，这是一个控制字符。
要产生控制字符（^ M），需遵从前面产生F 1键同样的处理过程。步骤如下；键入 sed s/，
然后按住键和v键，释放v键，再按住^键，并保持键不动，再释放两个键，最后
按键。下面命令去除行尾^ M字符。
分步测试预想功能对理解整个过程很有帮助。用 s e d在移到下一步前测试本步功能及结果
很重要。如果不这样，可能会有一大堆包含怪异字符的意料外的结果。
将所有命令结合在一起，使用管道将 c a t命令结果传入一系列s e d命令，s e d命令与上面几
步精确过滤字符的s e d相同。
现在文件对帐号管理者可用。
可以将命令放在文件里，然后运行它。下面即为转换脚本。
加入java编程群：524621833
101
第10章 sed 用法介绍
下载
通过仅指定一个s e d命令可以将命令行缩短，本书后面部分介绍脚本中 s e d的用法。
10.10.2 处理报文输出
当从数据库中执行语句输出时，一旦有了输出结果，脚本即可做进一步处理。通常先做
一些整理，下面是一个s q l查询结果。
为了使用上述输出信息做进一步自动处理，需要知道所存数据库名称，为此需执行以下
操作：
1) 使用s / - * / / g删除横线- - - - - -。
2) 使用/ ^ $ / d删除空行。
3) 使用$ d删除最后一行
4) 使用1 d删除第一行。
5) 使用awk {print $1}打印第一列。
命令如下，这里使用了c a t，并管道传送结果到s e d命令。
10.10.3 去除行首数字
对接下来卸载的这个文件实施的操作是去除行首所有数字，每个记录应以 U N H或U N D开
头，而不是U N H或U N D前面的数字。文件如下：
使用基本正则表达式完成这个操作。 [ 0 - 9 ]代表行首任意数字，替换部分为空格是为了确
保删除前面的匹配模式，即数字。
加入java编程群：524621833
102
第二部分 文本过滤
下载
10.10.4 附加文本
当帐户完成设置一个文件时，帐号管理者可能要在文件中每个帐号后面加一段文字，下
面是此类文件的一部分：
任务是在每一行末尾加一个字符串‘p a s s e d’。
使用$命令修改各域会使工作相对容易些。首先需要匹配至少两个或更多的数字重复出现，
这样将所有的帐号加进匹配模式。
10.10.5 从shell向sed传值
要从命令行中向s e d传值，值得注意的是用双引号，否则功能不执行。
10.10.6 从sed输出中设置shell变量
从s e d输出中设置s h e l l变量是一个简单的替换过程。运用上面的例子，创建 s h e l l变量
N E W- N A M E，保存上述s e d例子的输出结果。
10.11 快速一行命令
下面是一些一行命令集。（[ ]表示空格，[ ]表示t a b键）
‘s / \ . $ / / g’ 删除以句点结尾行
‘-e /abcd/d’ 删除包含a b c d的行
‘s / [ ] [ ] [ ] * / [ ] / g’ 删除一个以上空格，用一个空格代替
‘s / ^ [ ] [ ] * / / g’ 删除行首空格
‘s / \ . [ ] [ ] * / [ ] / g’ 删除句点后跟两个或更多空格，代之以一个空格
‘/ ^ $ / d’ 删除空行
‘s / ^ . / / g’ 删除第一个字符
‘s /CO L \ ( . . . \ ) / / g’ 删除紧跟C O L的后三个字母
‘s / ^ \ / / / g’ 从路径中删除第一个\
‘s / [ ] / [ ] / / g’ 删除所有空格并用t a b键替代
‘S / ^ [ ] / / g’ 删除行首所有t a b键
‘s / [ ] * / / g’ 删除所有t a b键
加入java编程群：524621833
103
第10章 sed 用法介绍
下载
在结束这一章前，看看一行脚本的一些例子。
1. 删除路径名第一个\符号
将当前工作目录返回给s e d，删除第一个\：
2. 追加/插入文本
将"Mr Wi l l i s "字串返回给s e d并在M r后而追加" B r u c e "。
3. 删除首字符
s e d删除字符串“a c c o u n t s . d o c”首字符。
4. 删除文件扩展名
s e d删除“a c c o u n t s . d o c”文件扩展名。
5. 增加文件扩展名
s e d附加字符串“. d o c”到字符串“a c c o u n t s”。
6. 替换字符系列
如果变量x含有下列字符串：
如果要实现下列转换：
s e d命令是：
10.12 小结
s e d是一个强大的文本过滤工具。使用s e d可以从文件或字符串中抽取所需信息。正像前面
讲到的，s e d不必写太长的脚本以取得所需信息。本章只讲述了 s e d的基本功能，但使用这些功
能就可以执行许多任务了。
如果使用s e d对文件进行过滤，最好将问题分成几步，分步执行，且边执行边测试结果。
经验告诉我们，这是执行一个复杂任务的最有效方式。
加入java编程群：524621833
下载
第11章 合并与分割
几年前，我习惯于使用运行在终端的 P I C K操作的U N I X集合，我实际使用P I C K应用的大
部分时间花费在分类与连接过程中，且使用极其频繁。很幸运我没有成为一个全职的 P I C K操
作员。
有几种工具用来处理文本文件分类、合并和分割操作，本章详细介绍这些工具。
本章内容有：
• 实用的分类（s o r t）操作。
• uniq。
• join。
• cut。
• paste。
• split。
11.1 sort用法
s o r t命令将许多不同的域按不同的列顺序分类。当查阅注册文件或为另一用户对下载文件
重排文本列时，s o r t工具很方便。实际上，使用其他 U N I X工具时，已假定工作文件已经被分
过类。无论如何，分类文件比不分类文件看起来更有意义。
11.1.1 概述
U N I X / L I N U X自带的s o r t功能很强大。尽管有时在使用s o r t各种不同的选项时人们已经很
小心，但仍会产生意想不到的结果。s o r t选项很长，甚至有时在各种不同开关的实际功能和结
果进行比较时也会遇到麻烦，原因可能是在结合使用 s o r t的不同选项时有些概念模糊不清。
本章不讨论各种不同的s o r t方法（不能说s o r t不够强大；它很慢，但观察数值交替变化是
很有趣的）也不讨论各种不同开关的结合使用功效。本章只讲到主要的 s o r t选项，伴随有大量
实例。与s o r t结合使用的u n i q、j o i n、c u t和p a s t e方法与s p l i t方法也将会涉及到。
上面提到，s o r t命令选项很长，下面介绍本章使用的各种选项。
11.1.2 sort选项
s o r t命令的一般格式为：
sort -cmu -o output_file [other options] +pos1 +pos2 input_files
下面简要介绍一下s o r t的参数：
-c 测试文件是否已经分类。
-m 合并两个分类文件。
-u 删除所有复制行。
-o 存储s o r t结果的输出文件名。
加入java编程群：524621833
105
第11章 合并与分割
下载
其他选项有：
-b 使用域进行分类时，忽略第一个空格。
-n 指定分类是域上的数字分类。
-t 域分隔符；用非空格或t a b键分隔域。
-r 对分类次序或比较求逆。
+n n为域号。使用此域号开始分类。
n n为域号。在分类比较时忽略此域，一般与+ n一起使用。
post1 传递到m，n。m为域号，n为开始分类字符数；例如4，6意即以第5域分类，从第7
个字符开始。
11.1.3 保存输出
- o选项保存分类结果，然而也可以使用重定向方法保存。下面例子保存结果到 r e s u l t s . o u t：
11.1.4 sort启动方式
缺省情况下，s o r t认为一个空格或一系列空格为分隔符。要加入其他方式分隔，使用 - t选
项。
s o r t执行时，先查看是否为域分隔设置了 - t选项，如果设置了，则使用它来将记录分隔成
域0、域1等等；如果未设置，用空格代替。缺省时s o r t将整个行排序，指定域号的情况例外。
下面是文件v i d e o . t x t的清单，包含了上个季度家电商场的租金情况。各域为：（1）名称，
（2）供货区代码，（3）本季度租金，（4）本年租金。域分隔符为冒号。为此对此例需使用‘- t’
选项。文件如下：
11.1.5 sort对域的参照方式
关于s o r t的一个重要事实是它参照第一个域作为域 0，域1是第二个域，等等。s o r t也可以
使用整行作为分类依据。为防止混淆，对于此文件用户应按如下方式参照域并做分类依据：
s o r t将定位各域，因此应把域0作为分类键0，域1作为分类键1等等。
11.1.6 文件是否已分类
怎样分辨文件是否已分类？如果只有3 0行，看看就知道了，但如果是4 0 0行呢，使用s o r t - c
加入java编程群：524621833
106
第二部分 文本过滤
下载
通知s o r t文件是否按某种顺序分类。
结果显示未分类，现在将之分类，再试一次：
返回提示符表明已分类。然而如果测试成功，返回一个信息行会更好。
11.1.7 基本sort
最基本的s o r t方式为sort filename，按第一域进行分类（分类键0）。实际上读文件时s o r t操
作将行中各域进行比较，这里返回基于第一域s o r t的结果，如下所示：
11.1.8 sort分类求逆
如果要逆向s o r t结果，使用- r选项。在通读大的注册文件时，使用逆向s o r t很方便。下面是
按域0分类的逆向结果。
11.1.9 按指定域分类
有时需要只按第2域（分类键1）分类。这里为重排报文中供应区代码，使用 t 1，意义为
按分类键1分类。下面的例子中，所有供应区代码按分类键 1分类；注意分类键2和3对应各域
也被分类。
11.1.10 数值域分类
依此类推，要按第三分类键分类，使用t 3。但是因为这是数值域，即为数值分类，可以使
加入java编程群：524621833
107
第11章 合并与分割
下载
用- n选项。下面例子为按年租金分类命令及结果：
如果不加- n，结果会怎样？这里假定按第3域分类，找出最好的季度租金。因为是分类键
2，所以使用t 2。
观察结果，分类进行了，但不是预想的结果，因为第 3域为数值域。当然这个结果也是某
种类型的排列，录像机The Hill应该在第二行，但结果是：s o r t只查看第3域每个数值的第一个
数，并按其分类，然后再按第二个数依次下去。
记住按数值域分类要加- n，这样才会得到预想结果。
现在对了，可以看出本季度卖点最高的是 A l i e n s。如果使用- r选项，将会把A l i e n s放在第