title:MASCOT: Faster Malicious Arithmetic Secure Computation with Oblivious
Transfer
author:Marcel Keller and
Emmanuela Orsini and
Peter Scholl
MASCOT: Faster Malicious Arithmetic Secure Computation
with Oblivious Transfer
Marcel Keller∗
Emmanuela Orsini†
Peter Scholl‡
Department of Computer Science, University of Bristol
{m.keller,emmanuela.orsini,peter.scholl}@bristol.ac.uk
Abstract
We consider the task of secure multi-party computation of arithmetic circuits over a ﬁnite ﬁeld.
Unlike Boolean circuits, arithmetic circuits allow natural computations on integers to be expressed
easily and eﬃciently. In the strongest setting of malicious security with a dishonest majority —
where any number of parties may deviate arbitrarily from the protocol — most existing protocols
require expensive public-key cryptography for each multiplication in the preprocessing stage of the
protocol, which leads to a high total cost.
We present a new protocol that overcomes this limitation by using oblivious transfer to perform
secure multiplications in general ﬁnite ﬁelds with reduced communication and computation. Our
protocol is based on an arithmetic view of oblivious transfer, with careful consistency checks and
other techniques to obtain malicious security at a cost of less than 6 times that of semi-honest
security. We describe a highly optimized implementation together with experimental results for
up to ﬁve parties. By making extensive use of parallelism and SSE instructions, we improve upon
previous runtimes for MPC over arithmetic circuits by more than 200 times.
Keywords: Multi-party computation; oblivious transfer
1
Introduction
Secure multi-party computation (MPC) allows a set of parties to jointly compute a function on their
private inputs, learning only the output of the function. In the last decade, MPC has rapidly moved
from purely theoretical study to an object of practical interest, with a growing interest in practical
applications, and many implementations now capable of handling complex computations [30, 31].
Most MPC protocols either perform secure computation of Boolean circuits, or arithmetic cir-
cuits over a ﬁnite ring or ﬁeld such as Fp, for some prime p. Historically, the Boolean circuit
∗Supported by EPSRC via grant EP/M016803.
†Supported by ERC Advanced Grant ERC-2010-AdG-267188-CRIPTO.
‡Supported by the Defense Advanced Research Projects Agency (DARPA) and Space and Naval Warfare Systems
Center, Paciﬁc (SSC Paciﬁc) under contract No. N66001-15-C-4070.
1
approach has led to fast protocols that mostly need only symmetric cryptography, such as two-
party protocols based on Yao’s garbled circuits [43], or protocols based on fast oblivious transfer
techniques [32, 36]. In contrast, protocols for arithmetic circuits are typically based on more ex-
pensive, public-key technology (except for special cases when a majority of the parties are honest).
Despite the need for expensive techniques, secret-sharing-based MPC protocols for arithmetic
circuits have the key advantage that secure addition requires no communication and essentially
come ‘for free’, whereas with current Boolean circuit-based 2-PC, the only ‘free’ operation is XOR.
The following motivating examples further highlight the practical applicability of integer-based
secure computation, compared with Boolean circuits:
- Bogdanov et al. [8, 9] describe using MPC to perform secure statistical analysis of income tax
records for the Estonian government. The latter work analyzed a large database with over
600000 students and 10 million tax records. The kinds of computations involved were very
simple statistics, but made heavy use of the fact that secure additions are non-interactive.
- In [14], an application of MPC to conﬁdential benchmarking was presented, allowing banks to
jointly evaluate customers’ risks whilst retaining privacy for the customers’ data. They used
secure linear programming, which is a highly complex task in MPC, requiring either secure
ﬂoating point arithmetic or very large integer arithmetic (to emulate real numbers without
overﬂow), both of which would be impractical using Boolean circuits.
- MPC has been suggested as a tool for helping prevent collisions between satellites, by securely
performing collision detection using sensitive location and trajectory data. Kamm et al. [27]
showed how to implement the relevant conjunction analysis algorithms in MPC with a protocol
based on secret-sharing. This also requires secure ﬂoating point operations.
Unfortunately, all of the above case studies are somewhat limited, in either the security proper-
ties obtained, or the eﬃciency. The ﬁrst and third examples above used the Sharemind system [1],
which is restricted to semi-honest security with three parties, where at most one is corrupt. The
second example used the SPDZ MPC protocol [18], which has security against any number of mali-
ciously corrupted parties, but is much slower. They report a fairly quick evaluation time of around
20–30 s with a prototype implementation, but this does not include the costly ‘preprocessing’ stage
required in SPDZ, which would likely take several hours.
We conclude that although these applications are practical, the MPC protocols used still fall
in many real-world applications, semi-honest adversaries and an honest majority are not
short:
realistic assumptions, and MPC may not be cost-eﬀective if it requires several hours of heavy
computation.
Furthermore, it is the case that all known practical protocols for MPC with integer operations
either require an honest majority, or expensive public-key techniques for every multiplication in the
circuit. For example, the SPDZ protocol [16, 18] mentioned above uses a somewhat homomorphic
encryption scheme to perform secure multiplications, whilst the BDOZ protocol [6] uses additively
homomorphic encryption, and both of these require expensive zero-knowledge proofs or cut-and-
choose techniques to achieve security against malicious adversaries.
These protocols mitigate this cost to an extent by restricting the expensive computation to a
preprocessing phase, which is independent of the inputs and can be done in advance. Although
this is highly eﬀective for reducing the latency of the secure computation — as the online phase
2
is indeed very eﬃcient — the total cost of these protocols can still be thousands of times greater
than the online phase, which may render them ineﬀective for many applications.
Frederiksen et al. [20] recently showed how to eﬃciently use oblivious transfer to generate
multiplication triples — the main task of the SPDZ preprocessing — in binary ﬁelds, and estimated
much improved performance, compared with previous methods. However, this does not give the
beneﬁts of general arithmetic circuits that allow integer operations.
1.1 Our contributions
In this paper, we present MASCOT: a new MPC protocol designed to overcome the above limi-
tations of the preprocessing phase, allowing for eﬃcient, secure computation of general arithmetic
circuits using almost exclusively fast, symmetric cryptography.
Protocol
SPDZ (active)
SPDZ (covert,
pr. 1/10)
Ours (active)
Field
Fp, 128-bit
F240
Fp, 128-bit
F240
Fp, 128-bit
F2128
Comms. (kbit)
215n(n − 1)
2272n(n − 1)
66n(n − 1)
844n(n − 1)
180n(n − 1)
180n(n − 1)
Throughput, n = 2 (/s)
23.5
3.68
204
31.9
4842
4827
Table 1: Comparing the cost of n-party secure multiplication in our OT-based protocol with pre-
vious implementations of SPDZ [15, 16].
Arithmetic-circuit MPC from OT. We present a practical protocol for secure multi-party
computation of arithmetic circuits based on oblivious transfer (OT), for the ﬁrst time with malicious
security in the dishonest majority setting. We achieve this by taking an “arithmetic” view of OT
(as was done by Gilboa for two-party RSA key generation [21] and Demmler et al. [19] for two-party
computation in the semi-honest model), which allows us to generalize the preprocessing protocol by
Frederiksen et al. [20] to create multiplication triples in any (suﬃciently large) ﬁnite ﬁeld, instead
of just binary ﬁelds. We achieve security against malicious adversaries using simple consistency
checking and privacy ampliﬁcation techniques, with the result that our maliciously secure protocol
is only 6 times less eﬃcient than a semi-honest version of the protocol. Moreover, our protocol
can be based entirely on symmetric primitives, after a one-time setup phase, by using eﬃcient OT
extensions [25, 28].
Implementation. A key advantage of our approach to triple generation is that we obtain a
streamlined protocol, which is highly amenable to a parallelized and pipelined implementation that
interleaves computation and communication. The results from our open source implementation [29],
shown in Table 1, highlight this: the time for a single secure multiplication in a prime ﬁeld is 200
times faster than the previous best actively secure implementation based on somewhat homomor-
phic encryption [16], in spite of a fairly small improvement in communication cost. Compared with
a covertly secure implementation1 using SHE [16], our actively secure protocol requires slightly
1For F
240 in SPDZ with covert security, we could not ﬁnd precise ﬁgures so the throughput in Table 1 is estimated
based on other results.
3
more communication, but still runs over 20 times faster. In binary ﬁelds, where SHE is much less
suited, the improvement is over 1000 times, compared to previous ﬁgures [15]. Note that the online
phase of our protocol is identical to that of SPDZ, which has been previously reported to achieve
very practical performance for a range of applications [30].
Our optimized implementation utilizes over 80% of the network’s capacity, whereas the previous
schemes based on SHE are so computation-intensive that the network cannot come close to capacity.
We also describe new techniques for reducing the cost of OT extension using consumer hardware
instructions, namely eﬃcient matrix transposition using SSE instead of Eklundh’s algorithm, and
hashing using the Matyas–Meyer–Oseas construction from any block cipher, which allows hashing
128-bit messages with AES-NI whilst avoiding a re-key for every hash.
More general assumptions. We also improve upon the previous most practical protocol by
allowing a much wider variety of cryptographic assumptions, since we only require a secure OT
protocol, which can be built from DDH, quadratic residuosity or lattices [38]. In contrast, security
of the SHE scheme used in SPDZ is based on the ring learning with errors assumption, which is
still relatively poorly understood — it is possible that new attacks could surface that render the
protocol totally impractical for secure parameters. So as well as increasing eﬃciency, we obtain
much greater conﬁdence in the security of our protocol, and it seems more likely to withstand the
test of time.
1.2 Technical overview
The main goal of our MPC protocol is to create multiplication triples, which are essentially additive
secret sharings of tuples (a, b, a· b, a·∆, b·∆, a· b·∆) where a, b are random values and ∆ is a secret-
shared global random MAC key. Shares of a, b and ∆ can be generated by every party choosing a
random share. It remains to generate secret sharings of the products.
Our starting point is the passively secure two-party product-sharing protocol of Gilboa [21],
which uses k oblivious transfers to multiply two k-bit ﬁeld elements. By running OT instances
between every pair of parties, the multiplication triples can be created.
However, corrupted parties can deviate by providing inconsistent inputs to the diﬀerent OT
instances.2 These deviations will not only lead to potentially incorrect results when the triples are
used in SPDZ but also to selective failures, that is, the checks used in SPDZ might fail (or not)
depending on secret information.
To obtain an actively secure protocol, we use two diﬀerent strategies: one to ensure correctness of
the products in the MAC generation, and one to ensure correctness and privacy of the multiplication
triples themselves.
For the MAC generation, it turns out the passively secure protocol is almost enough; we just
need to check random linear combinations of the MACs immediately after creation, and also when
later opening values. Proving the security of this, however, is not straightforward and requires a
careful, technical analysis of the possible deviations. To simplify this as much as possible, we model
the MAC generation and opening requirements in a separate functionality, F(cid:74)·(cid:75), which can be seen
as a generalization of veriﬁable secret-sharing to the case of full-threshold corruption. This greatly
reduces the work in proving higher-level protocols secure, as these can then be made independent
of the MAC scheme and underlying MAC keys.
2We assume that the OT instances themselves are secure against malicious parties.
4
For triple generation, we need to ensure correctness and privacy of the triples. Correctness is
easily veriﬁed with a standard sacriﬁce technique [17, 18], which checks a pair of triples such that
one can then be used securely. To guarantee privacy we use a simple variant of privacy ampliﬁcation,
where ﬁrst several leaky triples are produced, from which a single, random triple is extracted by
taking random combinations.
In more detail, the protocol starts by generating shares of a correlated vector triple (a, b, c),
where b ∈ F and a, c ∈ Fτ for some constant τ, using Gilboa’s multiplication protocol. If at this
point the triple is checked with a sacriﬁce, b is guaranteed to be uniformly random, but the fact
that the sacriﬁce passes may leak a few bits of a, if a corrupt party used inconsistent inputs to
some of the OTs. To counteract this, the parties sample a public random vector r ∈ Fτ and obtain
the triple (a, b, c) by deﬁning
a = (cid:104)a, r(cid:105),
c = (cid:104)c, r(cid:105)
Intuitively, taking inner products ensures that any leaking bits of a are randomly combined with
non-leaking bits, so that the ﬁnal value a appears uniformly random. In the security proof, the
simulator can precisely deﬁne any leakage of a and bound its min-entropy by analysing the adver-
sary’s inputs to the OTs. Since the inner product deﬁnes a universal hash function, we can then
use the leftover hash lemma to show that a is uniformly random when τ is large enough.
At this point, we could repeat the process to obtain another triple, then authenticate both
triples and check correctness with a sacriﬁce. However, we observe that this stage can be optimized
by using the original vector triple (a, b, c) to obtain a second, correlated triple, with the same b
value, at a lower cost. To do this, we simply sample another random vector ˆr and compute ˆa, ˆc
accordingly. Again, we can show (for suitable τ) that ˆa is uniformly random and independent of
a. We can then use (ˆa, b, ˆc) to check correctness of (a, b, c), as follows. After adding MACs to both
triples, the parties sample a random value s ∈ F and open ρ = s ·(cid:74)a(cid:75) −(cid:74)ˆa(cid:75), where(cid:74)·(cid:75) denotes the
linear authenticated secret sharing scheme. Now, we have:
s ·(cid:74)c(cid:75) −(cid:74)ˆc(cid:75) −(cid:74)b(cid:75) · ρ =(cid:74)s · (c − a · b) + (ˆa · b − ˆc)(cid:75)
Since the left-hand side is linear in the shared values, the parties can compute this and check that
it opens to zero. If one or both triples are incorrect then this is non-zero with probability at most
1/|F|, since s is uniformly random and unknown at the time of authentication.
ensure a distinguishing advantage in O(1/|F|). If we allow this to be O(1/(cid:112)|F|) then we can have
It turns out that for this optimized method, using τ = 4 suﬃces to give a correct triple and
τ = 3. Concretely, this means that we can use τ = 3 for ≥ 128-bit ﬁelds with 64-bit statistical
security.
Comparison with Previous Techniques. Previous works have used similar privacy ampliﬁca-
tion techniques for MPC. In [17], privacy ampliﬁcation was done on a large batch of triples using
packed Shamir secret-sharing, which leads to high computation costs. In contrast, our protocol only
requires removing leakage on one of the three triple values, which we do very eﬃciently by com-
bining a constant-sized vector of correlated triples. In situations where leakage is possible on more
than one triple component, our techniqe would have to be repeated and [17] may be more eﬃcient,
at least in terms of communication. Other works use more complex ‘bucketing’ techniques [37] to
remove leakage in F2, but when working in large ﬁnite ﬁelds this is not needed.
5
We also note that our authentication method is similar to that of the triple generation protocol
for binary ﬁelds in [20], except there, MACs are only checked after opening values, whereas we also
check MACs at time of creation. That work did not describe the online phase of the resulting MPC
protocol, and it turns out that for creating inputs in the online phase, this is not enough, and our
additional check is crucial for security of the whole protocol.
Roadmap. We model oblivious transfer and random oblivious transfer with FOT and FROT, re-
spectively. The multiplication with ﬁxed element provided by OT extension with FCOPEe described
in Section 3. This functionality is then used to implement F(cid:74)·(cid:75) in Section 4, which guarantees the
correctness of linear operations. Both FROT and F(cid:74)·(cid:75) are required to implement the triple genera-
tion functionality FTriple in Section 5, which is used for the online protocol described in Appendix 6.
In Section 7, we evaluate the complexity and the implementation of our protocol. Fig. 1 illustrates
the relationship between our functionalities.
FCOPE
FOT
F(cid:74)·(cid:75)
FROT
FTriple
Figure 1: Dependency among functionalities
1.3 Related work
Aside from the works already mentioned, many other secure computation protocols use oblivious
transfer. Protocols based on GMW [2, 22] and TinyOT [10, 32, 36] use OT extensions for eﬃcient
MPC on binary circuits, and fast garbled circuit protocols use OT extensions in the input stage of
the protocol [33]. Pinkas et al. [39, 40] used OT extensions to achieve a very eﬃcient and scalable
protocol for the dedicated application of private set intersection.
Ishai et al. [26] present another protocol achieving malicious security based on OT. However,
they only give asymptotic complexity measures. Furthermore, the building blocks of their protocol
such as codes and fast fourier transforms suggest more expensive computation than our protocol,
where the computation mainly consists of a few ﬁeld operations.
Baum et al. [3] described improvements to the ‘sacriﬁce’ step and the zero-knowledge proofs used
with somewhat homomorphic encryption in SPDZ. Their sacriﬁce technique requires generating
triples that form codewords, which does not seem straightforward with our protocol. Their zero-
knowledge proofs improve upon the method by Damg˚ard et al. [16] by roughly a factor of two, but