而gin则通吃，可以输入任意组合列作为查询条件，并且效率一致。        
例如        
index on (a,b,c)        
b-tree 对于包含驱动列a查询条件的SQL，效率可能比较好，不包括a查询条件的SQL，即使走索引，也要扫描整个索引的所有条目。        
而gin 则无论任何查询条件，效果都一样。        
这是为什么呢？必须从索引的内部存储组织结构来分析。        
### b-tree multi column index 剖析        
btree 对被索引列按创建索引时指定的顺序排序，然后建立B树。        
如create index idx on tbl using btree (a,b desc nulls first,c desc, e);        
所以B树中的KEY实际上就是被索引列的组合对象，这个结构决定了什么查询能用上这个复合索引。        
```        
(a,b,c), row?        
(a,b,c), row?        
(a,b,c), row?        
....        
```        
要达到最高效的使用这种复合索引，必须带上驱动列的条件。        
如果order by要用上索引，那么必须order by的写法要与创建索引时指定的顺序一致。        
例如select * from tbl where a=? order by a,b desc nulls first;           
### gin multi column index 剖析        
gin 的复合索引很有趣，它将所有列展开，然后将展开后的数据（列ID+值）排序并建立B树。        
因此在gin的复合索引中，B树的KEY实际上是列ID+值。        
```        
(column_a, v1), row?        
(column_b, v1), row?        
(column_b, v2), row?        
(column_c, v2), row?        
....        
```        
这样的树，以任意组合进行查询，效率都一样。        
where a=? 与 where b=? 效率一样，而且和B-tree的单列索引的效率几乎一致（当索引层级一致时）。        
where a=? and b=? 与 where b=? and c=? 效率一样(复合索引查两次，在内部使用bitmapAnd取得结果)。        
仅仅当多列组合查询时，gin效率可能比不上b-tree的带驱动列的查询（因为b-tree索引不需要bitmapAnd，而gin需要内部bitmapAnd）。        
## 七 例子        
创建一个测试表，包含3个字段          
```        
postgres=# create table t3(c1 int, c2 text, c3 int);        
CREATE TABLE        
```        
插入100万记录，其中c2,c3的值固定        
```        
postgres=# postgres=# insert into t3 select generate_series(1,1000000),'test',1;        
INSERT 0 1000000        
```        
创建gin复合索引        
```        
postgres=# create index idx_t3_1 on t3 using gin(c1,c2,c3);        
CREATE INDEX        
```        
查询c1=1，效率与单列索引一致        
这个查询结果也可以说明另一个问题，不同列并不是单纯展开后直接构建B树，它依旧添加了列ID进来，所以即使c3=1有100万记录，并不影响c1=1的扫描PAGE数。        
```        
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t3 where c1=1;        
                                                   QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------        
 Bitmap Heap Scan on public.t3  (cost=5.01..6.02 rows=1 width=13) (actual time=0.021..0.021 rows=1 loops=1)        
   Output: c1, c2, c3        
   Recheck Cond: (t3.c1 = 1)        
   Heap Blocks: exact=1        
   Buffers: shared hit=5        
   ->  Bitmap Index Scan on idx_t3_1  (cost=0.00..5.01 rows=1 width=0) (actual time=0.016..0.016 rows=1 loops=1)        
         Index Cond: (t3.c1 = 1)        
         Buffers: shared hit=4        
 Planning time: 0.076 ms        
 Execution time: 0.047 ms        
(10 rows)        
```        
查询c2=?，效率与单列索引一致        
```        
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t3 where c2='test';        
                                                            QUERY PLAN                                                                    
----------------------------------------------------------------------------------------------------------------------------------        
 Bitmap Heap Scan on public.t3  (cost=8121.00..26027.00 rows=1000000 width=13) (actual time=74.467..179.603 rows=1000000 loops=1)        
   Output: c1, c2, c3        
   Recheck Cond: (t3.c2 = 'test'::text)        
   Heap Blocks: exact=5406        
   Buffers: shared hit=5542        
   ->  Bitmap Index Scan on idx_t3_1  (cost=0.00..7871.00 rows=1000000 width=0) (actual time=73.640..73.640 rows=1000000 loops=1)        
         Index Cond: (t3.c2 = 'test'::text)        
         Buffers: shared hit=136        
 Planning time: 0.130 ms        
 Execution time: 230.770 ms        
(10 rows)        
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t3 where c2='t';        
                                                   QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------        
 Bitmap Heap Scan on public.t3  (cost=5.00..6.01 rows=1 width=13) (actual time=0.014..0.014 rows=0 loops=1)        
   Output: c1, c2, c3        
   Recheck Cond: (t3.c2 = 't'::text)        
   Buffers: shared hit=4        
   ->  Bitmap Index Scan on idx_t3_1  (cost=0.00..5.00 rows=1 width=0) (actual time=0.013..0.013 rows=0 loops=1)        
         Index Cond: (t3.c2 = 't'::text)        
         Buffers: shared hit=4        
 Planning time: 0.081 ms        
 Execution time: 0.039 ms        
(9 rows)        
```        
查询c3=?，效率与单列索引一致        
```        
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t3 where c3=1;        
                                                            QUERY PLAN                                                                    
----------------------------------------------------------------------------------------------------------------------------------        
 Bitmap Heap Scan on public.t3  (cost=8121.00..26027.00 rows=1000000 width=13) (actual time=77.949..182.939 rows=1000000 loops=1)        
   Output: c1, c2, c3        
   Recheck Cond: (t3.c3 = 1)        
   Heap Blocks: exact=5406        
   Buffers: shared hit=5542        
   ->  Bitmap Index Scan on idx_t3_1  (cost=0.00..7871.00 rows=1000000 width=0) (actual time=77.116..77.116 rows=1000000 loops=1)        
         Index Cond: (t3.c3 = 1)        
         Buffers: shared hit=136        
 Planning time: 0.083 ms        
 Execution time: 234.558 ms        
(10 rows)        
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t3 where c3=2;        
                                                   QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------        
 Bitmap Heap Scan on public.t3  (cost=5.00..6.01 rows=1 width=13) (actual time=0.015..0.015 rows=0 loops=1)        
   Output: c1, c2, c3        
   Recheck Cond: (t3.c3 = 2)        
   Buffers: shared hit=4        
   ->  Bitmap Index Scan on idx_t3_1  (cost=0.00..5.00 rows=1 width=0) (actual time=0.014..0.014 rows=0 loops=1)        
         Index Cond: (t3.c3 = 2)        
         Buffers: shared hit=4        
 Planning time: 0.081 ms        
 Execution time: 0.040 ms        
(9 rows)        
```        
gin任意组合（不需要限定驱动列）多列查询的隐含bitmapAnd, bitmapOr操作        
```        
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t3 where c1=2 and c3=1;        
                                                   QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------        
 Bitmap Heap Scan on public.t3  (cost=9.01..10.03 rows=1 width=13) (actual time=0.044..0.044 rows=1 loops=1)        
   Output: c1, c2, c3        
   Recheck Cond: ((t3.c1 = 2) AND (t3.c3 = 1))        
   Heap Blocks: exact=1        
   Buffers: shared hit=10        
   ->  Bitmap Index Scan on idx_t3_1  (cost=0.00..9.01 rows=1 width=0) (actual time=0.040..0.040 rows=1 loops=1)        
         Index Cond: ((t3.c1 = 2) AND (t3.c3 = 1))        
         Buffers: shared hit=9        
 Planning time: 0.061 ms        
 Execution time: 0.063 ms        
(10 rows)        
```        
没有驱动列，一样高效无比        
```        
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t3 where c2='test' and c3=2;        
                                                   QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------        
 Bitmap Heap Scan on public.t3  (cost=9.00..10.02 rows=1 width=13) (actual time=0.052..0.052 rows=0 loops=1)        
   Output: c1, c2, c3        
   Recheck Cond: ((t3.c2 = 'test'::text) AND (t3.c3 = 2))        
   Buffers: shared hit=9        
   ->  Bitmap Index Scan on idx_t3_1  (cost=0.00..9.00 rows=1 width=0) (actual time=0.051..0.051 rows=0 loops=1)        
         Index Cond: ((t3.c2 = 'test'::text) AND (t3.c3 = 2))        
         Buffers: shared hit=9        
 Planning time: 0.086 ms        
 Execution time: 0.075 ms        
(9 rows)        
```        
### gin复合索引的展开式B树决定了不能按单列设置顺序        
```        
postgres=# create index idx_t1_0 on t1 using gin (c1, c2 desc);        
ERROR:  0A000: access method "gin" does not support ASC/DESC options        
LOCATION:  ComputeIndexAttrs, indexcmds.c:1248        
```        
## 八 btree vs gin 多列索引        
1\. 由于btree index, 多列值根据创建索引的DDL指定顺序sort后，多列的值组合后作为一个KEY存储在B树中。        
例如4条记录如下        
```        
1,1,2;         
1,100,2;         
2,1,10;         
1,1,3;         
```        
btree 中的key排序后分布(有多少条记录，就有多少KEY)         
```        
1,1,2; 1,1,3; 1,100,2; 2,1,10;         
```        
2\. GIN MULTI COLUMN INDEX 构建了一个包含多种数据类型的B-TREE  ， 将多列的数据展开后，排序后分布 (key的数量为每列的count distinct总和)         
```        
column1,1; column2,1; column1,2; column3,2; column3,3; column3,10; column2,100;         
```        
更形象的比喻        
比如有三幅扑克牌（每幅54张牌），每一幅代表一列，如果要创建3列的复合索引，那么B-TREE会创建出54个条目的B树，而GIN会创建出包含162个条目的B树。        
请看这个例子，可以说明这个情况        
```        
postgres=# create table t2(c1 int2, c2 int4, c3 int8, c4 numeric, c5 text, c6 timestamp);        
CREATE TABLE        
postgres=# insert into t2 select c1,c1,c1,c1,c5,c6 from (select trunc(random()*1000) c1, md5(random()::text) c5, now()+(random()*10000||' sec')::interval c6 from generate_series(1,100000)) t;        
INSERT 0 100000        
postgres=# create index idx_t2_1 on t2 using gin (c1,c2,c3,c4,c5,c6);        
CREATE INDEX        
postgres=# select count(distinct c4) from t2;        
 count         
-------        
  1000        
(1 row)        
postgres=# select count(distinct c1) from t2;        
 count         
-------        
  1000        
(1 row)        
postgres=# select count(distinct c2) from t2;        
 count         
-------        
  1000        
(1 row)        
postgres=# select count(distinct c3) from t2;        
 count         
-------        
  1000        
(1 row)        
postgres=# select count(distinct c5) from t2;        
 count         
-------        
 99996        
(1 row)        
postgres=# select count(distinct c6) from t2;        
 count          
--------        
 100000        
(1 row)        
postgres=# select 99996+100000+4000;        