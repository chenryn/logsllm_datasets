title:PAST: Probabilistic Authentication of Sensor Timestamps
author:Ashish Gehani and
Surendar Chandra
PAST : Probabilistic Authentication of Sensor Timestamps
Ashish Gehani
Surendar Chandra
E-mail: {ashish.gehani,surendar}@nd.edu ∗
University of Notre Dame
Abstract
Sensor networks are deployed to monitor the physical
environment in public and vulnerable locations. It is not
economically viable to house sensors in tamper-resilient en-
closures as they are deployed in large numbers. As a result,
an adversary can subvert the integrity of the data being pro-
duced by gaining physical access to a sensor and altering
its code. If the sensor output is timestamped, then tainted
data can be distinguished once the time of attack is deter-
mined. To prevent the adversary from generating fraud-
ulent timestamps, the data must be authenticated using a
forward-secure protocol. Previous work requires the com-
putation of n hashes to verify the (n+1)th reading. This pa-
per describes PAST, a protocol that allows timestamps to be
authenticated with high probability using a small constant
number of readings. In particular, PAST is parameterized
so that the metadata overhead (and associated power con-
sumption) can be reduced at the cost of lower conﬁdence
in the authentication guarantee. Our protocol allows ar-
bitrary levels of assurance for the integrity of timestamps
(with logarithmically increasing storage costs) while toler-
ating any predeﬁned fraction of compromised base stations.
Unlike prior schemes, PAST does not depend on synchro-
nized clocks.
1. Introduction
Sensor networks are designed to record information
about the physical environment in which they are deployed.
Hence, sensors must be located in close proximity to the tar-
get of measurement. This often precludes relying on wires
for communication or external power. Instead, each sensor
exchanges data wirelessly and relies on a battery. This lim-
its the strength of the signals that they can transmit. As a
result, a base station which communicates with the sensors
must be situated in the immediate neighborhood. An adver-
sary is therefore likely to be able to gain physical access to
the sensors and base stations once they are deployed. With
access, an adversary can generate spurious readings. This
can have signiﬁcant consequences, such as when the data
is used for ﬁnancial applications or as evidence in judicial
proceedings. The vulnerability signiﬁcantly impacts the vi-
∗
Supported by NSF Awards IIS-0515674 and CNS-0447671.
ability of deploying sensors in a hostile environment. Our
protocol records the time at which each sensor reading was
generated. Once the time of an attack is known, we can
distinguish which readings were generated before the sen-
sor’s integrity was compromised. The key is to ensure the
soundness of the timestamping mechanism itself. This pa-
per describes a protocol for probabilistic authentication of
sensor timestamps (PAST) to address the issue.
PAST consists of three stages. Light weight crypto-
graphic witnesses are generated for blocks of readings on
board a sensor in the ﬁrst stage. These witnesses provide
partially trusted testimony to base stations that act as no-
taries. In the second stage, a notary gains increasing con-
ﬁdence in the timestamp of a block as it gets more consis-
tent testimony from multiple witnesses. Once this process
completes, the notary uses a forward-secure identity-based
signature to certify the data in the third stage.
PAST ensures that the data stream generated by a sensor
is distributed through multiple nodes in the network. As a
result, only the sensor sees its own data stream in its en-
tirety. This property is exploited to generate witnesses that
other nodes can not fabricate as long as the number that col-
lude does not exceed a predeﬁned threshold. The witnesses
used by a sensor are evolved at each time step. The protocol
prevents an adversary from gaining any information about
earlier witnesses if a sensor is compromised.
Since the data is certiﬁed with an identity-based signa-
ture, it can be veriﬁed in the absence of network connec-
tivity. Further, since the signature is forward-secure, if a
base station is compromised, the adversary cannot forge
earlier timestamps. Finally, we use a new signature scheme
that we have introduced in this paper. It allows the time-
dependent veriﬁcation key to be computed ofﬂine, unlike
previous forward-secure identity-based signatures. Its se-
curity is equivalent to the underlying scheme on which it is
based.
We analyze the security of the timestamps and data when
an adversary is able to interfere with network connectivity,
compromise sensors or base stations and attempt Sybil at-
tacks. We show that PAST provides a high level of certainty
for the timestamps with low storage and power consump-
tion overhead. For example, when 7 witnesses are included
in each PAST block and at least 4 must be veriﬁed before
the block’s timestamp is accepted, the probability that the
block will be validated is 96% when as much as 35% of
the network’s base stations have been compromised. Fur-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:52 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006ther, this assurance is achieved while imposing only 0.01%
storage and power consumption overhead.
Section 2 frames PAST’s context and the constraint un-
der which the protocol must operate. Section 3.2 explains
how sensors can generate timestamps which can be prob-
abilistically authenticated. Section 3.3 describes how base
stations can certify the timestamps. PAST’s security is ana-
lyzed in Section 4. Related work is described in Section 5.
We draw our conclusions in Section 6.
2. Design Context and Constraints
The constraints on designing an authenticated times-
tamping protocol for a sensor network environment are de-
scribed in this section.
2.1. Temporal Exposure of Signing Keys
If the data gathered from a sensor network is not au-
thenticated, an adversary will be able to forge it without
being detected. To prevent this, the data should be certiﬁed
when it is being generated. This requires that the sensors are
provisioned with cryptographic keys. Since sensors are de-
ployed in large quantities, the budget for constructing each
sensor is limited. This precludes using tamper-resilient en-
closures for the sensors. (Secure smart-cards with limited
protection cost $15 [4] while IBM’s 4758 secure coproces-
sor, which is a more resilient device, costs $2,000 [1]. For
many common sensors, these technologies can add signiﬁ-
cantly to the cost of each device.)
Hence, at ﬁrst glance, the cost constraints would appear
to rule out any guarantees for the sensed data once an adver-
sary gains access to the cryptographc keys stored in the sen-
sor. However, two related classes of algorithms target this
problem. The ﬁrst is forward-secure signatures [2], where
the signing key is evolved periodically with a one-way func-
tion. If an adversary gains access to a signing key, they can
not forge signatures for previously generated data since it is
computationally prohibitively expensive to invert the one-
way function.
The second class is intrusion-resilient signatures [8].
These require a remote node’s participation in the process
of updating the key in each new time interval. When a sign-
ing key is compromised, the appropriate remote node is no-
tiﬁed to stop participating in the key update protocol. This
prevents an adversary from computing new signing keys for
future time periods. Therefore, they can not generate fraud-
ulent future timestamps. Unfortunately, the use of intrusion-
resilient signatures introduces a signiﬁcant vulnerability in
a sensor network setting. If an adversary wishes to prevent
the data from a particular time period from being certiﬁed,
they can ﬂood the network link between the sensor and the
base station during the preceding time period. This will pre-
vent the key update protocol from completing within the al-
lotted time.
The robustness to network noise, ﬂooding and partition-
ing that we can achieve with a forward-secure scheme must
be weighed against the self-correction property of intrusion-
resilient signatures. We opt for the forward-secure scheme
since it sufﬁces for distinguishing untainted readings that
were produced before a sensor was compromised from
those that were subsequently generated.
2.2. Network Dependence of Veriﬁcation
Checking the authenticity of a forward-secure signature
requires access to the appropriate veriﬁcation key. A certi-
ﬁed version of the key can be included with the signed data.
However, this introduces signiﬁcant storage overhead (on
the order of kilobytes for a signature that is computationally
difﬁcult to forge). Alternatively, when a node joins the net-
work, it can broadcast a certiﬁed version of its veriﬁcation
key. Since each node on the network must either cache all
the veriﬁcation keys or query its neighbors for them when
needed, the storage and communication overhead of such a
scheme does not scale as the network grows in size. Instead,
the third option is to register the veriﬁcation key with a pub-
lic key server. When a remote node needs the key, it can be
retrieved from the server. Thereafter, the cached version can
be utilized. However, this is only practical if remote nodes
have reliable network connectivity with the server. If the
remote node attempts to buffer data until it can be veriﬁed,
an adversary can exploit this by disrupting communications
till the buffer overﬂows and legitimate sensor readings must
be discarded.
Identity-based signatures [15] allow arbitrary strings to
be used as veriﬁcation keys. The signing key can be derived
from the veriﬁcation key using a global secret parameter,
known only to the administrator. In particular, a node’s net-
work address can be utilized as its veriﬁcation key, obviat-
ing the need for key distribution. An identity-based signa-
ture can be made forward-secure by concatenating the sign-
ing time with the network address when constructing the
veriﬁcation key. However, this requires a new signing key
to be derived by the administrator for each unique signing
time. This would reintroduce dependence on the network.
In Section 3.3 we construct a new forward-secure identity-
based signature for which the veriﬁer can evolve the new
veriﬁcation key without the intervention of the administra-
tor. This will allow timestamps to be veriﬁed in the face of
transient network connectivity.
2.3. Resource Constraints
Base stations act as gateways to which sensors send their
data. Since each base station serves a large number of sen-
sors, it is provisioned with substantial computational power,
memory and bandwidth. Although this requires signiﬁcant
power consumption, a base station can still be deployed
in the ﬁeld using a renewable energy source, such as so-
lar power, in conjunction with a rechargeable battery. (For
example, a CerfCube [3] node can be powered with the 60-
120 Watts generated by solar panels [10].)
A typical sensor has limited processing power and mem-
ory. The MICA1 mote’s processor is an 8-bit micro-
controller that runs at 4 MHz with 4 KB RAM, 128 KB
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:52 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006ﬂash memory to store code and 512 KB to store data [7].
In principle this sufﬁces to perform the modular exponen-
tiation with large primes needed for asymmetric algorithms
like RSA and Difﬁe-Hellman. However, despite careful se-
lection of exponents and primes, the computations take a
considerable amount of time to complete. Performing a
single RSA operation with a small exponent and a key of
size 512, 768 or 1024 bits takes 3.8, 8.0 or 14.5 seconds
respectively [16]. If each sensor reading was to be signed,
this would signiﬁcantly limit the rate at which data could be
generated. Batching the readings before generating signa-
tures could amortize the cost and increase the rate at which
signed sensor data could be generated. If a sensor reading
is 16 bits and its timestamp is 16 bits, then at most 32 read-
ings could be batched together in a single 1024-bit signature
without adding a hash function to the computation. Even
with amortization, this would require the mote to spend 0.5
seconds to authenticate a reading. Adding a hash would not
only need a new function to be computed over all the data,
but it would also require the data to be sent independently of
the signed hash. Since the MICA1 mote transmits data at 40
Kb/sec, another 25.6 seconds would be needed to transmit
the signed hash. These added costs will only be warranted
if a large number of readings are batched together. How-
ever, the size of the non-volatile memory limits the number
of readings that can be buffered. In addition, this may in-
troduce more latency than is acceptable for sensor applica-
tions.
The most signiﬁcant implication of using an asymmetric
primitive is its effect on how long the sensor can be de-
ployed in the ﬁeld. Sensors must be deployed in the imme-
diate vicinity of the target of measurement. This may be
a location without any renewable energy sources. There-
fore, each sensor must rely on the power that can be stored
in its battery at the time of deployment. A MICA1 mote
runs on 2 AA batteries which provide 2.5 Ampere-hours at
3 Volts. If a mote is performing a typical sensing operation,
performing a computation and transmitting data, it uses 0.1
Watts [7]. At this rate, the mote will exhaust its batteries in
75 hours. Since the expected ﬁeld life of a sensor is sev-
eral months or years, the mote powers components down
when it is not performing operations. In sleep mode, the
MICA1 draws only 30 micro-Watts.
In order for a mote
to survive for long periods, data processing must be min-
imized. Symmetric cryptography primitives require much
less computation. Encrypting a 29 byte packet on a MICA2
mote with TinySec [9] takes 2 milliseconds and computing
its MAC (message authentication code) using a hash takes
3 milliseconds [11]. This is several orders of magnitude
faster than the state of the art implementation of asymmet-
ric cryptography primitives for motes - Sizzle’s [6] assem-
bly language elliptic curve operations. As a result, PAST
only uses symmetric cryptography on the sensors.
2.4. Trust Model
Sensor networks must tolerate compromised nodes, col-
lusion between nodes and transient network partitions.
They can ameliorate the problems using cryptography and
redundancy.
Since sensors and base stations are deployed in the ﬁeld,
some fraction of them may be compromised by an adver-
sary. As a result, at any given time only some predeﬁned
fraction of these nodes is operating correctly. We model
this by assuming that a randomly chosen node’s probability
of subverting the protocol is proportional to the fraction of
nodes in the network that are currently compromised.
If an adversary gains access to multiple nodes, it can
leverage the knowledge obtained from one node to disrupt