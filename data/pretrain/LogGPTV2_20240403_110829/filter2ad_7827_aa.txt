作者：Leeqwind  
作者博客：https://xiaodaozhi.com/exploit/42.html
本文将对 CVE-2016-0165 (MS16-039)
漏洞进行一次简单的分析，并尝试构造其漏洞利用和内核提权验证代码，以及实现对应利用样本的检测逻辑。分析环境为 Windows 7 x86 SP1
基础环境的虚拟机，配置 1.5GB 的内存。
本文分为三篇：
[从 CVE-2016-0165 说起：分析、利用和检测（上）](https://paper.seebug.org/579/ "从
CVE-2016-0165 说起：分析、利用和检测（上）")
从 CVE-2016-0165 说起：分析、利用和检测（中）
[从 CVE-2016-0165 说起：分析、利用和检测（下）](https://paper.seebug.org/581/ "从
CVE-2016-0165 说起：分析、利用和检测（下）")
#### 0x5 利用
前面验证了漏洞的触发机理，接下来将通过该漏洞实现任意地址读写的利用目的。
* * *
**AddEdgeToGET**
根据前面的章节，实现触发该漏洞并引发后续的 OOB 导致系统 BSOD 发生，但由于函数代码逻辑中 `cCurves` 等相关域的值和实际分配的用来容纳
`EDGE` 表项的缓冲区大小的差异实在太大，在 `AddEdgeToGET` 函数中会进行极大范围内的内存访问（超过 4GB
地址空间范围）。不利于在漏洞触发后使系统平稳过渡，好在 `AddEdgeToGET` 函数中存在忽略当前边而直接返回的判断逻辑：
      if ( pClipRect )
      {
        if ( iYEnd top || iYStart > pClipRect->bottom )
          return pFreeEdge;
        if ( iYStart top )
        {
          bClip = 1;
          iYStart = pClipRect->top;
        }
        if ( iYEnd > pClipRect->bottom )
          iYEnd = pClipRect->bottom;
      }
      ipFreeEdge_Y = (iYStart + 15) >> 4;
      *((_DWORD *)pFreeEdge + 3) = ipFreeEdge_Y;
      *((_DWORD *)pFreeEdge + 1) = ((iYEnd + 15) >> 4) - ipFreeEdge_Y;
      if ( ((iYEnd + 15) >> 4) - ipFreeEdge_Y  dt _POOL_HEADER
    nt!_POOL_HEADER
       +0x000 PreviousSize     : Pos 0, 9 Bits
       +0x000 PoolIndex        : Pos 9, 7 Bits
       +0x002 BlockSize        : Pos 0, 9 Bits
       +0x002 PoolType         : Pos 9, 7 Bits
       +0x000 Ulong1           : Uint4B
       +0x004 PoolTag          : Uint4B
       +0x004 AllocatorBackTraceIndex : Uint2B
       +0x006 PoolTagHash      : Uint2B
清单 5-2 结构 POOL_HEADER 的定义
在 32 位 Windows 系统环境下 `POOL_HEADER` 体现在返回值指针向前 `8` 字节的位置：
    win32k!RGNMEMOBJ::vCreate+0xc5:
    933a3ffc ff1550005293    call    dword ptr [win32k!_imp__ExAllocatePoolWithTag (93520050)]
    kd> dc esp l4
    93d1b400  00000021 00000b68 6e677247 00000005  !...h...Grgn....
    kd> p
    win32k!RGNMEMOBJ::vCreate+0xcb:
    933a4002 8b5510          mov     edx,dword ptr [ebp+10h]
    kd> r eax
    eax=fd674180
    kd> !pool fd674180
    Pool page fd674180 region is Paged session pool
    fd674000 is not a valid large pool allocation, checking large session pool...
     fd674158 size:    8 previous size:    0  (Allocated)  Frag
     fd674160 size:   18 previous size:    8  (Free)       Free
    *fd674178 size:  b70 previous size:   18  (Allocated) *Grgn
             Pooltag Grgn : GDITAG_REGION, Binary : win32k.sys
     fd674ce8 size:  318 previous size:  b70  (Allocated)  Gfnt
    kd> dc fd674178 l4
    fd674178  476e0003 6e677247 00000000 00000000  ..nGGrgn........
清单 5-3 分配内存池时 POOL_HEADER 结构的位置
在调用 `ExFreePoolWithTag` 函数释放先前分配的池内存块时，系统会校验目标内存块和其所在内存页中相邻的块的 `POOL_HEADER`
结构；如果检测到块的 `POOL_HEADER` 被破坏，将会抛出导致系统 BSOD 的 `BAD_POOL_HEADER`
异常。但在一种情况下例外：那就是如果该池内存块位于所在的内存页的末尾，那么在这次 `ExFreePoolWithTag`
函数调用期间将不会对相邻内存块进行这个校验。
根据前面的章节可知，漏洞所在函数 `RGNMEMOBJ::vCreate` 中分配了用于存储中间 `EDGE`
数据的内存池块，并在函数结束时释放了分配的内存块，所以在这种情况下，就肯定会面临释放内存块时校验相邻 `POOL_HEADER` 的问题。而如果在
`RGNMEMOBJ::vCreate` 函数中分配内存块时，能使其分配的内存块处于所在内存页的末尾，后续的 OOB
将会发生在下一个内存页中，虽然会破坏下一内存页中的内存块，但至少在当前函数调用期间释放内存块时不去校验相邻块的 `POOL_HEADER`
结构，问题就得以解决。
图 5-1 篡改下一个内存页起始内存块的数据
接下来需要找到最佳的内存布局方式。函数 `RGNMEMOBJ::vCreate` 中所分配的内存块的 `PoolType` 参数是 `0x21`
属于分页会话池（Paged session pool）类型，因此要找出能够分配可控大小的此类型内存块以进行内存布局的其他函数。
* * *
**创建位图对象**
在本文中考虑通过调用 `gdi32!CreateBitmap` 函数在内核分配合适的位图表面 `SURFACE`
对象和位图像素数据，一是由于位图表面对象便于控制大小，二是因为管理位图的 `SURFACE` 对象中存在一些便于后续展开内核利用的成员域。`SURFACE`
类是内核中所有位图表面对象的管理对象类，其成员变量 `SURFOBJ so` 是 `SURFOBJ` 结构体实例，存在于 `SURFACE+0x10`
字节偏移的位置。根据相关文档显示，任何内核 GDI 对象类的基类都是一个称作 `_BASEOBJECT` 的结构，`SURFACE` 对象也不例外。该结构在
32 位 Windows 系统环境下占用 `0x10` 字节的内存空间，定义如下：
    typedef struct _BASEOBJECT {
        HANDLE     hHmgr;
        PVOID      pEntry;
        LONG       cExclusiveLock;
        PW32THREAD Tid;
    } BASEOBJECT, *POBJ;
清单 5-4 结构体 _BASEOBJECT 定义
结构体 `SURFOBJ` 的定义如下：
    typedef struct tagSIZEL {
        LONG cx;
        LONG cy;
    } SIZEL, *PSIZEL;
    typedef struct _SURFOBJ {
        DHSURF  dhsurf;         // 24) + 5;
清单 5-6 函数 GreCreateBitmap 确定位图的位数类型