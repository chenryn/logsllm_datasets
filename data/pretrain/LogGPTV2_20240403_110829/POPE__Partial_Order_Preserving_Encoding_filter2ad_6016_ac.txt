### Values and Two-Block Ciphertexts

When dealing with two-block ciphertexts, even if the two origin bits are treated as part of the label, each plaintext becomes two blocks long. A straightforward application of CTR or CBC mode encryption results in ciphertexts of three blocks. To improve efficiency, one can exclude the tie-breaking randomness while still enabling the receiver to compute it. Specifically, let \( f \) be a pseudorandom permutation (PRP), and define the following operations:

- **Encryption**:
  - **Input**: Plaintext \( m \parallel \pi \)
  - **Process**:
    1. Choose a random string \( r \).
    2. Return the pair \( (r, f_k(r + 1) \oplus (m \parallel \pi)) \).

- **Decryption**:
  - **Input**: Ciphertext \( (c_1, c_2) \)
  - **Process**:
    1. Compute \( m \parallel \pi \leftarrow f_k(c_1 + 1) \oplus c_2 \).
    2. Compute the tie-breaking randomness \( u \leftarrow f_k(c_1 + 2) \).
    3. Return \( (m, \pi, u) \).

Note that this method is similar to CTR mode encryption. Although the ciphertext does not explicitly contain the tie-breaking randomness, the reconstructed \( u \) serves this purpose.

### Server Memory Layout

The server (Ser) maintains the POPE tree \( T \), which is a balanced L-ary tree with root \( r \).

- **Non-leaf Nodes**:
  - Each non-leaf node \( u \in T \) stores a buffer and a list.
  
- **Leaf Nodes**:
  - Each leaf node \( u \in T \) stores only a buffer.

A buffer stores an unbounded, unsorted set of (encryptions of) blocks \(\{(\ell_1, v_{\ell_1}), (\ell_2, v_{\ell_2}), \ldots\}\), and a list stores at most \( L \) sorted (encryptions of) labels \((\ell_1, \ldots, \ell_L)\).

### Main Invariant of the POPE Tree \( T \)

We enforce the following main order-invariant on Ser’s tree \( T \):

- Let \(\ell_{j-1}\) and \(\ell_j\) be the \((j-1)\)-th and \(j\)-th sorted labels at some (non-leaf) node \( u \) in \( T \).
- For all labels \(\ell\) in the sub-tree \( T_u^j \) rooted at the \( j \)-th child \( u_j \) of \( u \), we have \(\ell_{j-1} < \ell \leq \ell_j\).

This global partial ordering ensures that the \( L \) sorted labels \(\ell_1, \ldots, \ell_L\) at each node \( u \) serve as pivot elements for the \( L+1 \) sub-trees rooted at \( u \)'s children. This parallel pivot idea, combined with the parameter setting \( L = n^\epsilon \), implies that \( T \) has depth \(\lceil 1/\epsilon \rceil = O(1)\). This allows Ser to traverse and maintain the tree \( T \) with low amortized latency over repeated batches of client (Cl) queries.

### The POPE Protocol

The POPE protocol consists of three main operations: Setup, Insert, and Search. The Search operation may also call helper protocols Split and Rebalance.

#### Implementing Setup

- **Setup**:
  - Cl generates private keys for label/block encryption.
  - Ser initializes \( T \) as a root \( r \) with an empty buffer and list.

#### Implementing Insert

- **Insert** \((\ell, v)\):
  - Cl sends (encrypted) block \((\ell, v)\) to Ser.
  - Ser appends block \((\ell, v)\) to the end of the current root node’s buffer.

After Setup and possibly many Insert operations (but no Search operations), the POPE tree \( T \) held by Ser appears as shown in Figure 3.

**Figure 3**: The state of Ser’s tree \( T \) prior to any Search queries.

#### Implementing Search

- **Search** \((\ell_{\text{left}}, \ell_{\text{right}})\):
  - Cl and Ser engage in an interactive protocol Split twice: once for \(\ell_{\text{left}}\) and once for \(\ell_{\text{right}}\).
  - After each Split, Cl identifies for Ser the leaf node \( u_{\text{left}} \) (or \( u_{\text{right}} \)) in \( T \) that matches the label \(\ell_{\text{left}}\) (or \(\ell_{\text{right}}\)).
  - Ser sends the blocks in \([u_{\text{left}}, u_{\text{right}}]\) to Cl.

### How to Split the POPE Tree

To split Ser’s tree \( T \) at label \(\ell \in \{\ell_{\text{left}}, \ell_{\text{right}}\}\), Cl and Ser engage in an interactive protocol. This operation returns the leaf node whose buffer contains the given label, ensuring that all nodes along the path from the root to that leaf have empty buffers.

- **Split** \((\ell)\):
  - Individual Split calls always begin at the current root \( r \in T \).
  - After any (non-leaf) node \( u \in T \) is split, Ser learns (from Cl) the index \( i \in [L + 1] \) of the next child \( u_i \) of \( u \) to be Split.
  - The Split protocol proceeds recursively down some path of \( T \), splitting subsequent children \( u_i, u_{i,j}, \ldots \) until terminating at a leaf node \( u \).

We break our description of Split into two broad cases: (i) splits at internal nodes and (ii) splits at leaf nodes.

#### Case (i) — Splits at Internal Nodes

- **Split** \((\ell)\) — for internal nodes \( u \):
  - Ser sends \( L = u.\text{list} \) to Cl.
  - Ser streams \((\ell', v') \in u.\text{buffer} \) to Cl.
  - Cl sends the sorted index \( i \in [L + 1] \) of each \((\ell', v')\) in \( L \) to Ser.
  - Ser appends block \((\ell', v')\) to \( u_i.\text{buffer} \).

During this operation, Cl either (a) sees the searched-for label \(\ell \in \{\ell_{\text{left}}, \ell_{\text{right}}\}\) (and discovers node \( u_i \) to proceed to), or (b) discovers the node \( u_i \) that may contain label \(\ell\) based on its boundary values.

**Figure 4**: The flow of blocks in recursive Splits of Ser’s tree \( T \).

#### Case (ii) — Splits at the Leaves

- **Split** \((\ell)\) — for leaf nodes \( u \) with parent node \( u^* \):
  - If \( |u.\text{buffer}| \leq L \), return.
  - Ser samples \( L \) labels \( L = \{\ell_1, \ldots, \ell_L\} \) from \( u.\text{buffer} \).
  - Ser creates a new root \( u^* \) if \( u \) is the root node, or sets \( u^* \) to \( u \)'s parent otherwise.
  - Ser sends \( L \) to Cl.
  - Cl sorts \( L \) and returns it to Ser.
  - Ser inserts \( L \) new sibling leaf nodes \( u_i \) into parent \( u^* \) as well as new labels \( L \) into \( u^*.\text{list} \) at the position previously occupied by \( u \) (node \( u \) is deleted after it is split).
  - Ser streams \((\ell', v') \in u.\text{buffer} \) to Cl.
  - Cl sends the sorted index \( i \in [L + 1] \) of each \((\ell', v')\) in \( u.\text{buffer} \) to Ser.
  - Ser inserts block \((\ell', v')\) into sibling node \( u_i \).
  - Cl indicates to Ser the index \( i \) of the new leaf node matching \(\ell\).

If the size of the buffer is smaller than the local storage capacity \( L \) of Cl, this operation does nothing, and the split is complete. Otherwise, as in Case (i) of Split, Cl will learn which of the sibling leaf nodes \( u_i \) to recursively Split in order to find label \(\ell\). In this way, a single Split operation may recursively result in multiple leaf node Splits, with smaller and smaller buffers.

**Figure 5**: The state of Ser’s tree \( T \) after the very first Split ends: the new root \( r := u^* \) (empty buffer, full list), plus \( L + 1 \) leaves.

### Clean-up Step: Rebalancing a Split POPE Tree

After completing the Split protocol, the resulting leaf node at which Split terminates will have size at most \( L \), but some internal node’s sorted list may be larger than \( L \) due to insertions from their children. This would be problematic in future Split operations on those internal nodes, as they would send \( u.\text{list} \) to Cl, who only has room for \( L \) items.

To fix this, after completing the Split protocol, Ser calls the following operation on the parent of the resulting leaf node to rebalance the labels in the lists of the internal nodes. We emphasize that Rebalance is purely a local data structure manipulation and does not require interaction from Cl, since the unsorted buffer of the rebalanced nodes is empty due to prior Split, having only sorted labels in the list.

- **Rebalance** \((u)\):
  - If \( |u.\text{list}| \leq L \), return.
  - If \( u \) has no parent \( u^* \), create a fresh root node \( r \) for \( T \) and set \( u^* := r \).
  - Partition \( u.\text{list} \) into sorted sublists of size at most \( L \) each by selecting every \((L + 1)\)-th element in \( u.\text{list} \).
  - Create \( |L| \) new sibling nodes and insert them as well as the new labels \( L \) into parent node \( u^* \).
  - Call Rebalance \((u^*)\).

This completes the description of our main POPE protocol.

### Analysis

#### Cost Analysis

We analyze the amortized costs on the round complexity and bandwidth per operation.

- **Theorem 1**:
  - After \( n \) insertions and \( m \) query operations with local storage of size \( L \), our scheme has the following costs:
    1. Insert always requires a single round, and Search requires \( O(\log_L n) \) rounds in expectation.
    2. The total expected bandwidth over all \( (n + m) \) operations (excluding the bandwidth necessary for sending the search results) is \( O(mL \log_L n + n \log_L m + n \log_L(\lg n)) \).

The proof is found in Appendix 8.

- **Remark**:
  - With \( L = n^\epsilon \), \( 0 < \epsilon < 1 \), Theorem 1 implies that Search takes \( O(1) \) rounds in expectation. Moreover, when \( L = n^\epsilon \) and \( m = O(n^{1-\epsilon}) \) as well, the amortized bandwidth per operation becomes \( O(1) \). This is exactly our target scenario of many insertions and relatively few searches.

### Security Analysis

- **Theorem 2**:
  - The POPE protocol is a frequency-hiding order-preserving range query protocol.
  - **Proof**:
    - We show that our POPE scheme satisfies Definition 1 by showing a simulator. The simulator is very simple. For each insert, the simulator sends \( \text{enck}(0) \); due to semantic security of the underlying encryption, the simulation is indistinguishable. To simulate search queries, the simulator runs the adversarial server’s algorithm, and during the simulation, when the server needs to compare two encrypted labels, the simulator simply queries the rord oracle to get the answer. It’s obvious that the simulated view is indistinguishable from the real view of the server.

- **Theorem 3**:
  - After \( n \) insertions and \( m \) query operations with local storage of size \( L \), where \( mL \in o(n) \), our POPE scheme is frequency-hiding partial-order-preserving with \( \Omega\left(\frac{mL \log_L n - n}{n^2}\right) \) incomparable pairs of elements.
  - **Proof**:
    - Note the simulator in the above proof uses the rord oracle whenever the server algorithm needs to compare the elements. We can prove the theorem by using a counting argument on the number of labels that the server compares. We model the server’s view of the ciphertext ordering as some \( k \) ciphertexts whose order is completely known, and where the remaining \( n - k \) ciphertexts are partitioned into one of \( k + 1 \) buckets according to the \( k \) ordered ciphertexts. Essentially, this is a worst-case scenario where all internal node buffers in the POPE tree are empty, the total size of all internal node sorted lists is \( k \), and the remaining \( n - k \) ciphertexts reside in leaf node buffers.
    - We focus on the round complexity for range queries (insertion gives no change in the number of comparable elements). From Theorem 1, the total rounds of communication for range queries, after \( n \) insertions and \( m \) range queries, is \( O(m \log_L n) \). From the construction, each round of communication can add at most \( L \) new ciphertexts to those whose sorted order is completely known. Therefore, in the worst case, the server has \( k = O(mL \log_L n) \) ciphertexts in its sorted order, creating \( k + 1 \) buckets in which the other values are placed. Thus, the worst-case split that minimizes the total number of incomparable elements is for the remaining values to be partitioned equally among these buckets. Thus, we have \( b = \left\lceil \frac{n - k}{k + 1} \right\rceil \) ciphertexts in each unsorted bucket. Each bucket contains \( \binom{b}{2} \) incomparable items, for a total of \( (k + 1) \cdot \binom{b}{2} = \Omega\left(\frac{mL \log_L n - n}{n^2}\right) \) incomparable pairs.

### Privacy Against a Malicious Server

- **Note**:
  - The above theorem considers the worst case. This implies we can easily achieve privacy against a malicious server with tiny additional costs, that is, by making sure that (1) all the ciphertexts that the server asks the client to compare are legitimate, i.e., created by the client (to ensure this, the labels should now be encrypted with IND-CCA2 encryption), and (2) the number of the server’s comparison requests should be within the bounds of Theorem 1.
  - Unfortunately, this augmented system doesn’t achieve full malicious security; in particular, a malicious server may omit some values from the query answers, although it cannot inject a fake result due to IND-CCA2 security of the underlying encryption. Efficiently achieving full malicious security is left as an interesting open problem.

### Evaluation

#### Experimental Setup

We have made a proof-of-concept implementation of our POPE scheme to test the practical utility of our new approach. The code is written in Python3 and our tests were performed using a single core on a machine with an Intel Xeon E5-2440 2.4 GHz CPU and 72GB available RAM. Our implementation follows the details presented in Section 3. The symmetric cipher used is 128-bit AES, as provided by the PyCrypto library. The full source code of our implementation is available at https://github.com/dsroche/pope.

- **Database Size**:
  - While we performed experiments on a wide range of database sizes and number of range queries, our “typical” starting point is one million insertions and one thousand range queries. This is the same scale as recent work in the databases community for supporting range queries on outsourced data, and would therefore seem to be a good comparison point for practical purposes.

- **Parameters**:
  - In our experiments, we varied the total database size between one thousand and 100 million entries, each time performing...