         max:                                 49.63ms
         approx.  95 percentile:               1.91ms
Threads fairness:
    events (avg/stddev):           173760.4375/2683.48
    execution time (avg/stddev):   108.4860/0.25
```
sysbench本身的CPU开销  
```
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND 
49712 digoal  20   0 25.1g 114m 1188 S 6383.5  0.0  60:43.46 ./sysbench_pg --test lua/select.lua --db-driver pgsql --pgsql-host xxx.xxx.xxx.xxx .....
```
数据库的开销  
```
top - 23:09:38 up 35 days,  4:38,  1 user,  load average: 4.20, 5.79, 10.98
Tasks: 1747 total,  49 running, 1698 sleeping,   0 stopped,   0 zombie
Cpu(s): 38.9%us,  8.2%sy,  0.0%ni, 48.6%id,  0.0%wa,  0.0%hi,  4.3%si,  0.0%st
Mem:  529321832k total, 192590260k used, 336731572k free,   835032k buffers
Swap:        0k total,        0k used,        0k free, 21108036k cached
```
### 小结
sysbench自身的开销更大，几乎把CPU 64个核用满了，而pgbench只用了25%的CPU。  
另一方面pgbench已经把PG数据库的硬件资源全部用光，达到了峰值性能。  
sysbench并没有把PostgreSQL数据库的资源打满，只用了50%的硬件资源的样子。  
## pgbench简单讲解
既然pgbench效率较好，所以简单的讲解一下pgbench的用法。  
1\. 自定义变量  
```
\set 变量名 表达式/值 
设置range为常量
\set range 10000
设置id为随机值, 范围1到range
\set id random(1, :range)
设置x为range的一半
\set x :range/2
```
2\. 使用变量  
```
使用:引用变量即可
\set id random(1,100)
select * from test where id = :id;
```
3\. 变量支持的表达式  
```
The expression may contain :
  integer constants such as 5432, 
  double constants such as 3.14159, 
  references to variables :variablename, 
  unary operators (+, -) 
    and 
  binary operators (+, -, *, /, %) 
  with their usual precedence and associativity, function calls, and parentheses.
           Examples:
               \set ntellers 10 * :scale
               \set aid (1021 * random(1, 100000 * :scale)) % (100000 * :scale) + 1
```
表达式中支持的函数  
```
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|Function                           | Return Type                     | Description                         | Example                        | Result                      |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|abs(a)                             | same as a                       | absolute value                      | abs(-17)                       | 17                          |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|debug(a)                           | same as a                       | print a to stderr,                  | debug(5432.1)                  | 5432.1                      |
|                                   |                                 |         and return a                |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|double(i)                          | double                          | cast to double                      | double(5432)                   | 5432.0                      |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|greatest(a [, ... ] )              | double if any a is double, else | largest value among arguments       | greatest(5, 4, 3, 2)           | 5                           |
|                                   | integer                         |                                     |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|int(x)                             | integer                         | cast to int                         | int(5.4 + 3.8)                 | 9                           |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|least(a [, ... ] )                 | double if any a is double, else | smallest value among arguments      | least(5, 4, 3, 2.1)            | 2.1                         |
|                                   | integer                         |                                     |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|pi()                               | double                          | value of the constant PI            | pi()                           | 3.14159265358979323846      |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|random(lb, ub)                     | integer                         | uniformly-distributed random        | random(1, 10)                  | an integer between 1 and 10 |
|                                   |                                 | integer in [lb, ub]                 |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|random_exponential(lb, ub,         | integer                         | exponentially-distributed random    | random_exponential(1, 10, 3.0) | an integer between 1 and 10 |
|parameter)                         |                                 | integer in [lb, ub],                |                                |                             |
|                                   |                                 |               see below             |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|random_gaussian(lb, ub, parameter) | integer                         | Gaussian-distributed random integer | random_gaussian(1, 10, 2.5)    | an integer between 1 and 10 |
|                                   |                                 | in [lb, ub],                        |                                |                             |
|                                   |                                 |               see below             |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|sqrt(x)                            | double                          | square root                         | sqrt(2.0)                      | 1.414213562                 |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
```
4\. 传入变量  
可以通过pgbench向script传入变量，也可以使用内置的变量。  
```
       -D varname=value
       --define=varname=value
           Define a variable for use by a custom script (see below). Multiple -D options are allowed.
自动变量，很有用，特别是client_id，可以用来拼接表名
+----------+-----------------------------------------------------------------+
|Variable  | Description                                                     |
+----------+-----------------------------------------------------------------+
|scale     | current scale factor                                            |
+----------+-----------------------------------------------------------------+
|client_id | unique number identifying the client session (starts from zero) |
+----------+-----------------------------------------------------------------+
```
5\. 随机值算法  
```
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|random(lb, ub)                     | integer                         | uniformly-distributed random        | random(1, 10)                  | an integer between 1 and 10 |
|                                   |                                 | integer in [lb, ub]                 |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|random_exponential(lb, ub,         | integer                         | exponentially-distributed random    | random_exponential(1, 10, 3.0) | an integer between 1 and 10 |
|parameter)                         |                                 | integer in [lb, ub],                |                                |                             |
|                                   |                                 |               see below             |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
|random_gaussian(lb, ub, parameter) | integer                         | Gaussian-distributed random integer | random_gaussian(1, 10, 2.5)    | an integer between 1 and 10 |
|                                   |                                 | in [lb, ub],                        |                                |                             |
|                                   |                                 |               see below             |                                |                             |
+-----------------------------------+---------------------------------+-------------------------------------+--------------------------------+-----------------------------+
```
6\. 模拟程序交互式, 睡眠  
```
       \sleep number [ us | ms | s ]
           Causes script execution to sleep for the specified duration in microseconds (us), milliseconds (ms) or seconds (s). 
	   If the unit is omitted then seconds are the default.  
	   number can be either an integer constant or a :variablename reference to a variable having an integer value.  
           Example:
               \sleep 10 ms
```
7\. 脚本weight  
当使用多个脚本时，可以为每个脚本设置weight，即权重。如果不设置，默认为1.  
```
pgbench -f ./test1.sql@100 -f ./test2.sql@200
那么有1/3的机会调用test1.sql, 有2/3的机会调用test2.sql  
```
详见 man pgbench  
或  
https://www.postgresql.org/docs/9.6/static/pgbench.html
## pgbench动态表名
目前pgbench不支持动态表名，建议可以修改pgbench程序来实现动态表名，例如client_id是一个很不错的选择。  
```
$ vi test.sql
\set id1 random(1, 10000000)
SELECT pad FROM "sbtest:client_id" WHERE id = :id1;
$ pgbench -M prepared -n -r -P 1 -f ./test.sql -h xxx.xxx.xxx.xxx -p 1924 -U postgres postgres -c 3 -j 3 -T 100 
目前会报错，只支持simple模式。  如果要让prepared模式支持，建议改pgbench代码来支持. 例如使用:::varname时，拼接identifid。   
ERROR:  relation "sbtest$1" does not exist
LINE 1: SELECT pad FROM "sbtest$1" WHERE id = $2;
                        ^
client 0 aborted in state 1: ERROR:  prepared statement "P0_1" does not exist
ERROR:  relation "sbtest$1" does not exist
LINE 1: SELECT pad FROM "sbtest$1" WHERE id = $2;
                        ^
client 1 aborted in state 1: ERROR:  prepared statement "P0_1" does not exist
ERROR:  relation "sbtest$1" does not exist
LINE 1: SELECT pad FROM "sbtest$1" WHERE id = $2;
                        ^
client 2 aborted in state 1: ERROR:  prepared statement "P0_1" does not exist
```
可以修改这个代码来支持    
```
/*
 * Parse the raw sql and replace :param to $n.
 */
static bool
parseQuery(Command *cmd, const char *raw_sql)
{
        char       *sql,
                           *p;
        sql = pg_strdup(raw_sql);
        cmd->argc = 1;
        p = sql;
        while ((p = strchr(p, ':')) != NULL)
        {
                char            var[12];
                char       *name;
                int                     eaten;
                name = parseVariable(p, &eaten);
                if (name == NULL)
                {
                        while (*p == ':')
                        {
                                p++;
                        }
                        continue;
                }
                if (cmd->argc >= MAX_ARGS)
                {
                        fprintf(stderr, "statement has too many arguments (maximum is %d): %s\n", MAX_ARGS - 1, raw_sql);
                        pg_free(name);
                        return false;
                }
                sprintf(var, "$%d", cmd->argc);
                p = replaceVariable(&sql, p, eaten, var);
                cmd->argv[cmd->argc] = name;
                cmd->argc++;
        }
        cmd->argv[0] = sql;
        return true;
}
```
## 小结
sysbench自身的开销更大，几乎把CPU 64个核用满了，而pgbench只用了25%的CPU。  
另一方面pgbench已经把PG数据库的硬件资源全部用光，达到了峰值性能。  
sysbench并没有把PostgreSQL数据库的资源打满，只用了50%的硬件资源的样子。  
pgbench如果要支持动态表名，需要调整代码，此前，可以使用多个FILE来代替此功能。  
ecpg参考  https://www.postgresql.org/docs/current/static/ecpg.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")