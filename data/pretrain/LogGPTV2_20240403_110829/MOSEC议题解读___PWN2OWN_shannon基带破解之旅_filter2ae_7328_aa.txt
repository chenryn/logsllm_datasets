# MOSEC议题解读 | PWN2OWN shannon基带破解之旅
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 一、关于基带漏洞
基带漏洞最大的威胁是可以通过OTA(空中接口)利用，即通过发射加载漏洞利用代码的无线电波，从空中接口利用漏洞，在受害者无任何感知的情况下，远距离对受害者进行攻击。
如上图，自从第一个移动通信系统面世至今，移动通信系统经过近四十年发展，到现在通信标准已经迭代了五代，在一次次迭代过程中，安全问题尤其是来自于无线电波层面的空中接口威胁，已经引起了通信和安全专家们的极度关注。每一代移动通信标准制定时，专家们对协议都进行了非常严密的论证和验证工作。
针对于空中接口，从2G系统开始，引入加密，3G系统开始引入强制完整性保护，4G系统除了RRC完整性保护和加密之外，还引入了NAS层完整性保护和加密以及AS的加密，5G则额外引入了IMSI加密。
自从3G引入强制完整性保护之后，移动通信系统协议层面很少发现空口高危漏洞，纵观国际黑客会议，能从空口利用的影响4G用户的协议层面高危漏洞也就360独角兽安全团队发现的‘Ghost
Telephonist’漏洞[1]，LTE 重定向漏洞[3]，以及IMSI catcher。
因此在协议层面发现高危漏洞的可能性已经降低，然而协议本身由代码实现，这些代码又是由人工编写，难免存在疏漏的可能，因此在空口层面的高危漏洞主要存在于基带实现过程中。对于移动终端而言，每个人都可以获取到基带的二进制固件代码进行分析，近年来也成为安全研究的热点。
## 二、手机处理器架构
手机终端发展至今，已经由早期的功能机的单处理器架构（基带协议栈与应用程序共用一个处理器），发展为现在智能手机的modem+ap结构，某些高级终端SOC甚至包含十几个处理器，分别作为modem，音频，视频，传感器等用途。而对于Amat破解的shannon处理器，则可以简单的看成是CP(modem)
+ AP 结构。
如图所示，在shannon处理器中，CP部分由一个Cortex-R7 ARM 核构成，AP部分则可能是Cortex-A53, Cortex-A72等，CP
和 AP 共用RAM。
对于安全研究员而言，CP使用ARM 处理器是一个好消息，意味着可以使用IDA Pro强大的F5功能，不至于像逆向高通modem一样，要和头痛的Hexagon
DSP 指令集打交道。
## 三、攻击路径
根据PWN2OWN的规则，攻击路径需要满足从空口攻破CP， 再以CP为跳板，攻破AP。
## 四、固件提取
虽然Shannon基带固件在可以在三星手机firmware中找到，但升级包中的固件是加密的，Amat
Cama挖掘shannon基带漏洞的目的主要是满足pwn2own的要求，即找到能从OTA远程利用的基带漏洞，因此，在这里，Amat没有去挑战如何解密基带固件，而是想办法直奔主题，通过ramdump将已经解密的基带固件从内存中直接dump出来，具体流程如下。
在拨号盘上输入*#9900#调出工程模式的SYSDUMP菜单
选中 ‘DEBUG LEVEL ENABLED’按钮，将debug level设定为’HIGH’,之后手机将重新启动。
手机启动后，在拨号盘键入‘*#9900#’重新调出SYSDUM菜单，将’ CP RAM LOGGING‘设定为ON，手机将会再次重启。
手机启动后，调出SYSDUMP菜单，下滑找到‘RUN FORCED CP CRASH DUMP‘，并点击，手机将再次重启，并进入RAM加载模式。
同时按住POWER键和VOLUME DOWN键超过10秒将手机关闭并再次开机，开始dump过程。
重新打开SYSDUMP菜单，并点击‘COPY TO SDCARD(INCLUDE CP
RAMDUMP)‘按钮，将dump文件拷贝到SDCARD。这时在/sdcard/log下将有一个名为‘pcrash_dump_YYYYMMDD_HHSS.log’的文件。
## 五、固件分析
Dump文件是并不包含elf文件格式的定位加载信息，因此在利用IDA 加载dump文件逆向分析之前，还需要分析dump文件的内存映射信息。
Shannon modem上电及ramdump由CP BOOT DAEMON(/sbin/cbd)
负责，而modem加密固件的开始部分还有一个modem的boot loader。
分析cbd及modem的boot代码可以得知dump文件偏移与虚拟地址的对应关系，下图的表格是另一篇破解shannon基带的议题分析的映射关系[2]，由于基带版本号的关系，可能与pwn2own
Amat分析的偏移不一样，笔者手里也没有相应型号的手机，此处没有验证。
有这个映射信息，可以编写一个IDA 加载器来加载这个ramdump文件。
## 六、分析TASKs
Samsung的shannon 基带处理器上运行有一个实时操作系统(RTOS), 首先我们需要在dump文件中定位到在RTOS上运行的这些TASKs。
我们知道CPU的入口是中断向量表，中断向量表位于固件的开始处，中断向量表里有一系列的终端向量，其中也包含‘RESET
HANDLER’，这是处理器复位后开始执行的第一条指令所在，对RTOS固件的逆向分析通常会从RESET HANDLER入手。
在其中定位到一个链表，该链表中包含有所有各个task的信息，其中包括task名称，以及dump相应task的堆栈布局。通过一个脚本可以将这些task
信息提取出来。
其中一些task的名称很友好，可以从中猜出该task的功能，而另外一些task 命名则很有误导性。下面是Amat分析的一些Task名称。
MM (Mobility Management (移动性管理)?)
LLC(Logic Link Control(逻辑链路控制) ？)
SMS_SAP
GRR
SS
SAEL3
SNDCP
CC (Call Control ?)
SM (Session Management ?)
…
不同的task对应了协议栈中不同的分层
在实时操作系统中，Task之间的通信机制很多，在shannon处理器的RTOS中使用的是信箱机制(Mail box)，具体机制可以去翻翻《操作系统原理》。
如下图所示，每个Task的流程大致如此，检查Mailbox中是否有自己的消息，处理消息，必要时还需要向其他Task发送消息，很多个Task协同完成整个基带协议栈的功能。
后面的工作，就是挑选一个Task开始逆向分析，task实现代码中包含很多有用信息。