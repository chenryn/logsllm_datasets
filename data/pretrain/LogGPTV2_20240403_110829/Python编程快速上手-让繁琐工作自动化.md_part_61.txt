]
--snip--
formData列表包含4个字典，针对4个不同的名字。每个字典都有文本字段的
第18章 用GUI自动化控制键盘和鼠标
名字作为键，响应作为值。最后一点准备是设置pyautogui 的PAUSE 变量，在每次函
数调用后等待半秒钟。在程序的formData赋值语句后，添加下面的代码：
pyautogui.PAUSE = 0.5
第 3步：开始键入数据
for 循环将迭代 formData 列表中的每个字典，将字典中的值传递给 pyautogui
函数，最后在文本输入区输入。
在程序中添加以下代码：
#! python3
# formFiller.py - Automatically fills in the form.
--snip--
for person in formData:
# Give the user a chance to kill the script.
print('>>> 5 SECOND PAUSE TO LET USER PRESS CTRL-C <<<')
 time.sleep(5)
# Wait until the form page has loaded.
 while not pyautogui.pixelMatchesColor(submitButton[0], submitButton[1],
submitButtonColor):
time.sleep(0.5)
- -snip--
作为一个小的安全功能，该脚本有 5 秒暂停。如果发现程序在做一些预期之
外的事，这让用户有机会按 Ctrl-C（或将鼠标移到屏幕的左上角，触发
FailSafeException 异常），从而关闭程序。然后程序等待，直到 Submit 按钮的颜色
可见，这让程序知道，表单页面已经加载了。回忆一下，你在第 2 步中已经弄清
楚了坐标和颜色信息，并将它们保存在submitButton和submitButtonColor变量中。要调
用 pixelMatchesColor()，就传递坐标 submitButton[0] 和 submitButton[1]，以及颜色
submitButtonColor。
在等待Submit按钮颜色可见的代码之后，添加以下代码：
#! python3
# formFiller.py - Automatically fills in the form.
--snip--
 print('Entering %s info...' % (person['name']))
 pyautogui.click(nameField[0], nameField[1])
# Fill out the Name field.
 pyautogui.typewrite(person['name'] + '\t')
# Fill out the Greatest Fear(s) field.
 pyautogui.typewrite(person['fear'] + '\t')
- -snip--
Python编程快速上手——让繁琐工作自动化
我们添加了偶尔的print() 调用，在终端窗口中显示程序的状态，让用户知道进
展。
既然程序知道表格已经加载，就可以调用 click()，点击 Name 输入框，并调
用 typewrite()，输入 person['name'] 中的字符串。字符串末尾加上了 '\t' 字符，模拟
按下Tab键，它将输入焦点转向下一个输入框，Greatest Fea（r s）。另一次typewrite() 调
用，将在这个输入框中输入 person['fear'] 中的字符串，然后用 Tab 跳到表格的下一
个输入框。
第 4步：处理选择列表和单选按钮
“wizard powers”问题的下拉菜单和RoboCop字段的单选按钮，处理起来比文
本输入框需要更多技巧。要用鼠标点选这些选项，你必须搞清楚每个可能选项的x、
y坐标。然而，用箭头键来选择会比较容易。
在程序中加入以下代码：
#! python3
# formFiller.py - Automatically fills in the form.
--snip--
# Fill out the Source of Wizard Powers field.
 if person['source'] == 'wand':
 pyautogui.typewrite(['down', '\t'])
elif person['source'] == 'amulet':
pyautogui.typewrite(['down', 'down', '\t'])
elif person['source'] == 'crystal ball':
pyautogui.typewrite(['down', 'down', 'down', '\t'])
elif person['source'] == 'money':
pyautogui.typewrite(['down', 'down', 'down', 'down', '\t'])
# Fill out the RoboCop field.
 if person['robocop'] == 1:
 pyautogui.typewrite([' ', '\t'])
elif person['robocop'] == 2:
pyautogui.typewrite(['right', '\t'])
elif person['robocop'] == 3:
pyautogui.typewrite(['right', 'right', '\t'])
elif person['robocop'] == 4:
pyautogui.typewrite(['right', 'right', 'right', '\t'])
elif person['robocop'] == 5:
pyautogui.typewrite(['right', 'right', 'right', 'right', '\t'])
- -snip--
在下拉菜单获得焦点后（回忆一下，你写了代码，在填充Greatest Fear（s）输
入框后模拟了按 Tab 键），按下向下箭头，就会移动到选择列表的下一项。根据
person['source'] 中的值，你的程序应该发出几次向下按键，然后再切换到下一个输
入区。如果这个用户词典中的 'source' 值是 'wand' ，我们模拟按向下键一次（选择
Wand），并按 Tab 键。如果 'source' 键的值是 'amulet'，模拟按向下键两次，并按
第18章 用GUI自动化控制键盘和鼠标
Tab键。对其他可能的值也是类似。
RoboCop问题的单选按钮，可以用向右键来选择。或者，如果你想选择第一个
选项，就按空格键。
第 5步：提交表单并等待
可以用函数typewrite() 填写备注输入框，将person['comments'] 作为参数。你可
以另外输入 '\t'，将焦点移到下一个输入框或Submit按钮。当Submit按钮获得焦点
后，调用pyautogui.press（'enter'），模拟按下回车键，提交表单。在提交表单之后，
程序将等待5秒，等下一页加载。
在新页面加载之后，它会有一个Submit another response链接，让浏览器转向一
个新的、全空的表单页面。在第二步，你已将这个链接的坐标作为元组保存在
submitAnotherLink中，所以将这些坐标传递给pyautogui.click()，点击这个链接。
新的表单准备好后，脚本的外层 for 循环将继续下一次迭代，在表单中输入下
一个人的信息。
添加以下代码，完成你的程序：
#! python3
# formFiller.py - Automatically fills in the form.
--snip--
# Fill out the Additional Comments field.
pyautogui.typewrite(person['comments'] + '\t')
# Click Submit.
pyautogui.press('enter')
# Wait until form page has loaded.
print('Clicked Submit.')
time.sleep(5)
# Click the Submit another response link.
pyautogui.click(submitAnotherLink[0], submitAnotherLink[1])
在主 for 循环完成后，程序应该已经插入了每个人的信息。在这个例子中，只
有 4 个人要输入。但如果有 4000 个人，那么编程来完成这个任务将节省大量的输
入时间。
18.12 小结
用 pyautogui模块实现GUI自动化，通过控制键盘和鼠标，让你与计算机上的
应用程序交互。虽然这种方式相当灵活，可以做任何人类用户做的事情，但也有不足
之处，即这些程序对它们的点击和键入是相当盲目的。在编写GUI自动化程序时，请
试着确保它们在得到错误指令时快速崩溃。崩溃很烦人，但比程序继续错误要好得多。
Python编程快速上手——让繁琐工作自动化
利用 pyautogui，你可以在屏幕上移动鼠标，模拟鼠标点击、击键和快捷键。
pyautogui 模块也能检查屏幕上的颜色，让 GUI 自动化程序对屏幕内容有足够的了
解，知道它是否有偏差。甚至可以向它提供一个屏幕快照，让它找出你希望点击的
区域坐标。
可以组合使用所有这些 pyautogui 功能，在计算机上自动化各种无脑的重复任
务。实际上，看着鼠标自己移动，看着文本自动出现在屏幕上，这是彻头彻尾的催
眠。为什么不用节省下来的时间，舒舒服服地坐着，看着程序为你工作？看着你的
聪明才智帮你省去无聊的工作，肯定会让你感到满意。
18.13 习题
1．如何触发pyautogui的失效保护来停止程序？
2．什么函数返回当前的分辨率？
3．什么函数返回鼠标当前位置的坐标？
4．pyautogui.moveTo() 和pyautogui.moveRel() 函数之间的区别是什么？
5．什么函数用于拖放鼠标？
6．调用什么函数将替你键入字符串"Hello world!"？
7．如何模拟按下向左键这样的特殊键？
8．如何将当前屏幕的内容保存为图形文件并命名为screenshot.png？
9．什么代码能够设置每次pyautogui函数调用后暂停两秒钟？
18.14 实践项目
作为实践，编程完成下面的内容。
18.14.1 看起来很忙
许多即时通信程序通过一段时间鼠标不动（例如10分钟），来判断你空闲或离
开了计算机。也许你想从桌子边溜走一段时间，但不想让别人看到你的即时通信软
件转为空闲状态。请编写一段脚本，每隔 10 秒钟稍微动一下鼠标。这种移动应该
相当小，以便在脚本运行时，如果你需要使用计算机，它也不会给你制造麻烦。
18.14.2 即时通信机器人
Google Talk、Skype、Yahoo Messenger、AIM和其它即时通信应用通常使用专
有协议，让其他人很难通过编写Python模块与这些程序交互。但即使这些专有协议，
也不能阻止你编写GUI自动化工具。
第18章 用GUI自动化控制键盘和鼠标
Google Talk 应用有一个搜索条，让你在输入朋友列表中的用户名并按下回车
时，打开一个消息窗口。键盘焦点自动移到那个新的窗口。其他即时通信应用也有
类似的方式，来打开新的消息窗口。请编写一个应用程序，向朋友列表中选定的一
组人发出一条通知消息。程序应该能够处理异常情况，比如朋友离线，聊天窗口出
现在屏幕上不同的位置，或确认对话框打断输入消息。程序必须使用屏幕快照，指
导它的GUI交互，并在虚拟按键发送之前采用各种检测方式。
注意 你可能需要建立一些假的测试账户，这样就不会在编写这个程序时，不小心打
扰真正的朋友。
18.14.3 玩游戏机器人指南
有一个很不错的指南名为“How to Build a Python Bot That Can Play Web
Games”，网址是 http://nostarch.com/automatestuff/。这份指南解释了如何用 Python 创
建一个GUI自动化程序，玩一个名为Sushi Go Round的Flash游戏。这个游戏需要
点击正确的成分按钮，填写客户的寿司订单。填写无错订单越快，得分就越高。这
个任务特别适合GUI自动化程序，因为可以作弊得到高分！这份指南包含了本章介
绍的许多主题，也涉及PyAutoGUI的基本图像识别功能。
Python编程快速上手——让繁琐工作自动化
附录 A
安装第三方模块
除了Python自带的标准库，其他开发者写了一些自己的模
块，进一步扩展了Python的功能。安装第三方模块的主要方法
是使用Python的pip工具。这个工具从Python软件基金会的网
站https://pypi.python.org/安全地下载Python模块，并安装到您
的计算机上。PyPI或Python包索引，就像是Python模块的免费
应用程序商店。
A.1 pip 工具
pip工具的可执行文件在Windows上称为pip，在OS X和Linux上称为pip3。在
Windows 上，pip 位于 C:\Python34\Scripts\pip.exe。在 OS X 上，它位于/Library/
Frameworks/Python.framework/Versions/3.4/bin/pip3。在Linux上，它位于/usr/bin/pip3。
虽然在Windows和OS X上pip会随Python3.4自动安装，但在Linux上，必须
单独安装。要在Ubuntu或Debian Linux上安装pip3，就打开一个新的终端窗口，
输入get install python3-pip。要在Fedora Linux上安装pip3，就在终端窗口输入install
python3 -pip。为了安装这个软件，需要输入计算机的管理员密码。
A.2 安装第三方模块
pip工具需要在命令行中运行：向它传入install命令，跟上想要安装的模块名称。
例如，在Windows上，会输入pip install ModuleName，其中ModuleName是模块的名
称。在OS X和Linux，必须加 sudo前缀来运行pip3，授予管理权限来安装该模块。
需要输入sudo pip3 install ModuleName。
如果你已经安装了模块，但想升级到PyPI上提供的最新版本，就运行pip install
–U ModuleName（或在OS X和Linux上运行pip3 install –U ModuleName）。
安装模块后，可以在交互式环境中运行 import ModuleName，测试安装是否成
功。如果未显示错误信息，就可以认为该模块已经成功安装。
运行下面列出的命令，你可以安装本书中介绍的所有模块（请记住，如果在OS
X或Linux上，用pip3替代pip）。
• pip install send2trash
• pip install requests
• pip install beautifulsoup4
• pip install selenium
• pip install openpyxl
• pip install PyPDF2
• pip install python-docx（安装python-docx，而不是docx）
• pip install imapclient
• pip install pyzmail
• pip install twilio
• pip install pillow
• pip install pyobjc-core（仅在OS X上）
• pip install pyobjc（仅在OS X上）
• pip install python3-xlib（仅在Linux上）
• pip install pyautogui
注意 对于OS X用户：pyobjc模块需要20分钟或更长的时间来安装，因此，如果它
需要一段时间，不要惊慌。也应该先安装pyobjc核心模块，这将减少整体安装时间。
376 Python编程快速上手——让繁琐工作自动化