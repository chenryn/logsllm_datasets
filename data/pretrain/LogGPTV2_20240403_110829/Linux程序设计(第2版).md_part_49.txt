memcpy (&entry_to_return, (char *) local_data_dacun.dptr,
)
local_data_datub.dsize) :
return (entry_to_return):
9)下面这个add_cdc_entey函数的作用是添加一个新的标题记录项：
int add_cdc_entry (const cdc_entry entry_to_add)
char key_to_addICAT_CAT_LEN + 11:
datum 1ocal_key_datum;
datun local_data_datum;
int resuit;
/* check database initialized and parameters valid */
1f (strlen(entry_to_add.catalog) > CAT_cAT_LgN) return (0);
if
(1cdc_dbm_ptr 1|!edt_dbm_ptr）return(0):
/* ensure the search key contains only the valid string and nulls */
strcpy(key_to_add. entry_to_add.catalog) :
penset (&key_to_add,'\0*, sizeof (key_to_add)1 ;
local_key_datun.dsize = sizeof(key_to_add);
local_key_datum.dptr = (void →} key_to_add;
local_data_datum.dptr =[void *)&entry_to_add;
local_data_datum.dsize = sizeof {entry_to_add):
result = dbm_store(cdc_dbm_ptr, local_key_datum, local_data_datum,
DEM_REPLACE} :
/*dbm_store()uses 0 for success */
if （zesult ss 0) return (1l;
return (0);
10)add_cdt_entry函数的作用是添加一个新的曲目记录项。在访问数据库的时候，标题字符
串和曲目编号组合在一起构成其关键字。
int add_cdt_entry(const cdt_entry entry_to_add)
char key_to_add[CAT_CAT_LEN + 10]:
Gatun 1ocal_data_datum;
datum local_key_datum;
int result;
if （1cdc_dbm_ptr 1|1edt_dbm_ptx}return(0）;
if (strlen(entry_to_add.catalog1 >s CAT_CAT_LEN) return (0):
memset(&key_to_add,*\0, sizeof (key_to_add));
sprintf(key_to_add,*esed*, entry_to_add.cataiog.
entry_to_add.track_nol:
local_xey_datun.dptr =(void *) key_to_add;
local_data_datum.dptr*（void)entry_to_add:
local_xey_datun.dsize =sizeof(key_to_add);
local_data_datun.dsize a sizeof tentry_to_add):
result = dbe_store(cdt_dbe_ptr, local_key_datum, 1ocal_data_datum,
/ dbo_storef) uses 0 for success and -ve numbers for errors */
if (result b- 0)
加入java编程群：524621833
---
## Page 257
第7章数据管理
239
return (1) ;
:(o) uznge)
11）既然我们可以往数据库里添东西，要是还能删除它们就更好了。下面这个函数的作用是
删除标题记录：
int del_cdc_entry(const char *cd_catalog_ptr)
char key_to_de1 [CAT_CAT_LEN + 1] :
datun local_key_datum;
int result;
if (strlen(ed_catalog_ptr) >a CAT_CAT_LEN) return (0);
if (!cdc_dbn_ptr I1!cdt_dbn_ptr) return (0);
memset (skey_to_del. *\0', sizeof (key_to_de1));
strcpy(key_to_del, cd_catalog_ptr):
1ocal_key_datum.dptr = (void *) key_to_del;
local_key_datum,dsize = sizeof (key_to_del) :
regult = dbm_delete(cdc_dbs_ptr, local_key_datun);
/drm_delete(} uses 0 for success */
if (result = 0) return (1):
return (0):
12）下面这个函数的作用是删除一个曲目。注意：曲日用的关键字是由标题记录项的字符串
和曲目编号两者构成的一个复合索引。
int del_cdt_entry (const char *cd_catalog_ptr, const int track_no)
datum 1ocal_key_datum;
char key_to_Gel(CAT_CAT_LEN + 10]:
int result;
if (!cdc_dbn_ptr 1!edt_dbn_ptr) return (0);
zemget（6key_to_del,`\0'.sizeof（xey_to_del));
sprintf(key_to_del, *ts ad*, cd_catalog_ptr, track_no);
1ocai_key_datun.dptr =(void ·) key_to_del;
local_key_datum.dsize = sizeof (xey_to_del):
result × dbe_delete(cdt_dbe_ptr, loca1_key_datum) :
/dbm_delete(}uses 0 for success */
if (reeult  0) return (1):
return (0);
F
13）现在到达简单的搜索函数。它并不是很复杂，但它展示了这样一种能力，即我们可以在
事先不知道关键字的情况下扫描全部的dbm记录项。
因为我们事先并不知道会有多少记录项，所以我们安排这个函数每次调用时只返回一个记
录项。如果什么也没找到，记录项将是空着的。为了扫描整个数据库，我们在开始调用这个
函数的时候使用了一个指向一个整数的指针“*first_call_ptr”：在第一次调用这个函数的时
候，该整数应该被设置为“1”。这样、这个函数就会知道应该从数据库的起始位置开始搜索。
而在后续调用中，这个变量将被设置为“0”，而这个函数就会从上次找到记录项的位置开始
加入jaVa编程群：524621833
---
## Page 258
240
Linux程序设计
继续搜索
当我们希望重新开始一次搜索的时候，比如要搜索另外一个标题记录项的时候，我们必须
置为真等于对搜索重新进行了初始化、
这个两数需要在自己的两次调用之间使用一些内部的状态信息。这样使用户看不到继续一
次搜索的复杂性，并且维持了搜索函数在具体实现方面的“神秘感”。
如果搜索文本指向一个空字符“null”，那么所有记录项就都将被认为是匹配的。
cdc_entry search_cdc_entry(const char *cd_catalog_ptr, int *first_call_ptr)
statie int local_first_call = 1;
cdc_entry _entry_to_return:
datum local_data_datun;
statie datun local_key_datum;
/* notive this must be static */
memset(&entry_to_return,‘\o',sizeof (entry_to_return));
14）与往常一样，我们先做一些预防性检查：
if (!edc_ibn_ptt 11:edt_dbm_ptr)return lentry_to_returnl;
it
(1cd_catalog_ptr 11:first_call_ptr) return (entry_to_return):
/ protect against never passing *first_call_ptr true */
if (1ocal_first_call){
local_first_call = 0:
first_call_ptr = 1;
15）如果在调用这个函数的时候，“*first_call_ptr”被设置为true，就表示将从数据库的起始
位置开始（或重新开始）搜索。如果“*first_call_ptr”不是ture，我们将简单地前进到数据库里
的下-个关键字：
if （*first_cal1_ptr}{
local_key_detum = dbm_firstkey (cdc_dbm_ptr) ;
*first_call_ptr = 0:
else(
1ocal_key_datum = dbe_nextkey (cdc_dbe_ptr) :
do(
if (local_key_datun.dptz!= MULL){
/*an entry was found */
local_data_datun ± dlm_fetch(cdc_dbm_ptr, local_key_datum) ;
if(1ocal_data_datum.dptr)(
mencpy(&entry_to_return,(char *) 1ocal_data_datum.dptr,
1uf:a1_data_datun.dsize) :
16）我们的搜索工具所做的检查很简单，它只检查当前标题记录项里是否出现了搜索字
符串。
/check if search string oceurs in the entry/
memset (&entry_to_ceturn,*\0′,
1
local_key_datun = dbn_nextkey(cdc_dbm_ptr) ;
sizeof (entry_to_return)):
加入java编程群：524621833
---
## Page 259
第7章数据管理241
1while (1oca1_key_datum. dptr &&
entry_to_return.catalog[0]==\0′1);
local data_datun.dptr &6
/、Xxueop>oxeas 
return (entry_to_retuzn);
我们将通过下面这个制作文件makefile把所有程序结合在一起。现在还用不着太操心它，因
为我们与上就要在下一章开始对它进行学习了。先把下面这些内容敲进计算机并保存为Makefile
再说。
appiication
app_ui.o: app_ui.c cd_data.h
cd_access-o: cd_access.c cd_daca.h
gcc -pedantic -Wa11 -ansi -g -c cd_access.c
application:
app_ui.o cd_access.0
要想编译这个新编写的CD唱盘管理软件，请在提示符处敲人下面的命令：
make -f Makefile
如果一切顺利，可执行文件application将被编译并放在当前子目录里。
7.5本章总结
在这一章里，我们学习了数据管理三个方面的知识。首先，我们学习了关于UNIX内存系统
的知识，虽然请求页面虚拟内存的内在实现很高深，但用起来还是相当容易的。我们还介绍了
它是如何防止操作系统和其他程序受到非法内存访问操作的干扰和损害的。
接下来，我们看到文件封锁功能是如何让多个程序在数据访问操作中彼此协调的。我们先
观察了简单的二进制信号量的机制，然后是一个更复杂的情形，即为共享访问或独占访问面封
锁同一个文件的不同部分。
最后，我们学习了dbm数据库，体会到它通过一种非常灵活的索引安排存储和有效检索各种
数据块的能力。
加入jaVa编程群：524621833
---
## Page 260
第8章开发工具
在这一章里，我们将向大家介绍一些UNIX系统中的程序开发工具。编译器和调试器肯定是
少不了的；除此之外，UNIX还为我们准备了一组工具，它们每一个都能独当一面，并且允许程
序设计人员把它们创造性地组合在一起。我们将在这·章介绍几个比较重要的工具，并用这些
工具解决--些实际问题，其中包括：
·make命令和制作文件。
·利用RCS和CVS系统对源代码进行控制。
·编写一个使用手册。
·用paich和tar命令发行软件。
8.1多个源文件带来的问题
当在编写小程序的时候，许多人都会在编辑之后重新编译所有的文件以重建其应用程序。
但对一个大型程序来说，再使用这样的办法就会带来一些明显的问题。编辑-编译-测试这一循环
的周期将明显延长。如果只改动了一个文件，即使是最有耐心的程序员也不会想去重新编译所
有的文件。
如果曾经创建了多个头文件并且把它们用在了不同的源文件里，情况就更复杂了。比如说，
我们有三个头文件a.h、b.h、c.h以及三个C语言源文件main.c、2.c、3.c（我们希望读者在实际工
作中会给这些文件起些更好的名字），也就是下面这种情况：
finclude *a.h*
*main.c */
/*2，c*/
/*3.c */
include *b.h*
tinclude *c.h*
那么，如果程序员只修改了c.h文件，则文件main.c和2.c是用不着重新编译的，因为它们并
不依赖于这个头文件。面如果c.h文件有了改变，就必须对依赖于c.h的3.c重新进行编译。可要是
b.h发生了改变而程序员又忘了重新编译2.c，就可能导致程序工作失常。
make工具可以解决这类问题，它会在必要时重新编译受这些改动影响的所有文件
make命令的作用不仅仅是编译一个程序。只要你需要使用几个输入文计求产生输出文
加入jaVa编程群：524621833
---
## Page 261
第8章开发工具
件，就可以用它来到达目的。它的其他用法还包括对文格（比如troff文件或TeX文件等）
进行处理等。
8.2make命令和制作文件
我们将会看到make命令相当博大精深，但光凭自已它是无法知道怎样建立你的软件的。用
户必须给它提供一个文件，告诉make软件应该如何构造。这个文件就叫做制作文件。
制作文件一般都会和项目的其他源文件放在同一个子目录里。用户的计算机里可以同时存
在许多不同的制作文件。事实上，如果用户的项目很大，就完全可以选择使用多个不同的制作
文件来管理项目的不同部分。
make命令和制作文件这样一种组合提供了在项目管理方面具有十分强大的功能。它不仅能
够用来对源代码进行编译，还可以用来准备使用手册页和把应用软件安装到一个目标子目录去。
8.2.1制作文件的语法
制作文件由一组依赖关系和规则构成。每个依赖关系由一个目标（即将要创建的文件）和
它所依赖的源文件组成：面规则则描述了怎样从被依赖文件创建出目标文件来。比较常见的情
况是：只有一个可执行文件被当作目标。
make命令会读取制作文件，它先确定需要创建哪些个目标文件，然后比较源文件的日期和
时间以决定采用哪条规则来构造目标文件。在很多情况下，创建最终的目标文件之前必须先创
建出一些过渡性目标。make命令根据制作文件来确定目标文件的创建顺序和规则的应用题序。
8.2.2make命令的选项和参数
make程序自已有几个选项，其中最常用的三个是：
，“-k”，它的作用是让make在遇到出错的时候继续执行，而不是在检测到第一个错误时就
停下来。这样，我们就能利用这个选项通过一遍操作查出都有哪些个源文件没有通过编
译。
，“-n”，它的作用是让make命令在没有实际执行的情况下列出将会执行的操作步骤。
·“-f”，它的作用是让make命令使用指定的制作文件。如果没有使用这个选
项，make命令将使用当前子目录里第一个名为makefile的文件。如果这个文件不存在，它
会去查找一个名为Makefile的文件。不少UNIX程序员都喜欢使用Makefile做为制作文件
的文件名。
目标文件通常都是一些可执行的程序文件，为了制作某个特定的目标文件，我们可以把它
的名字做为一个参数传递给make命令。如果不指定目标文件名、make将尝试创建制作文件里的
第一个日标。大多数程序员都会在自己的制作文件里把第一个目标定义为al1，然后把所有其他
的目标列为al的附属品。这样做可以明确地指定制作文件在没有给出任何目标的情况下将要缺
省创建的日标。我们建议大家整持使用这种办法。
加入jaVa编程群：524621833
---
## Page 262
244Linux程序设计
1.依赖关系
依赖关系定义了最终应用程序里的每个文件与源文件之间的关系。在上面的例子里，我们
可以把依赖关系定义为最终应用程序依鞍于main.o、2.o和3.o：也就是依于main.o的下级依赖