### Optimized Text

When a document is opened, the content is uncompressed. This also applies to A3, where JavaScript functions can be used to re-encode plaintext before exfiltration. However, for A2, B2, and B3, there are restrictions on exfiltrating compressed data, as it will not be decompressed before being appended to the URL. In practice, most PDF viewers cannot interpret URLs containing compressed plaintext, primarily due to URL-encoding issues. For example, macOS applications (such as Preview, Skim, or Safari) do not URL-encode spaces or line breaks in URLs, leading to the restriction that only single words can be exfiltrated using deflate backreferences.

We evaluated the limitations for each PDF viewer, as shown in Table 2. On 21 viewers (78%), we can leak the full plaintext, even when it is compressed. For three applications (11%), only non-compressed data can be leaked, and for another three PDF viewers (11%), only single words from strings or streams can be exfiltrated.

A special case is Acrobat Reader/Pro, where we can leak around 250 bytes without user interaction, but leaking the full plaintext requires user interaction. This is due to DNS prefetching, which occurs even before the user confirms a form submission, allowing us to exfiltrate up to 250 bytes by placing them in the subdomain of a DNS request.

### Generic Constraints

CBC gadgets are most practical for AES-256, the latest encryption algorithm used by PDF 1.7 and 2.0, and considered the most secure. Older AES-based algorithms require known plaintext from the same ciphertext stream/string that the attacker wants to modify. Direct exfiltration attacks, however, are independent of the encryption scheme and can be applied to older files and algorithms, such as AES-128 and RC4. Additionally, we successfully applied direct exfiltration to public key "certificate encryption" (an asymmetric PDF encryption based on X.509 certificates). CBC gadgets are not limited to using PDF features as exfiltration channels, making them more flexible. For example, an encrypted stream to be leaked could be defined as an EmbeddedFile of type HTML, and using CBC gadgets, a format-specific exfiltration string could be prepended (e.g., `<img src="http://p.df/">`), thereby leaking the plaintext once the PDF attachment is opened.

It is important to note that for both attacks, the attacker has full control over the appearance of the displayed document, showing either the original decrypted content, their own content, or a mixture of both by partially overlaying the original content.

### Countermeasures

In this section, we discuss ways to mitigate or prevent the described attacks. Note that standard protection mechanisms, such as digital signatures and blocking exfiltration channels, are insufficient. Sustainable and effective long-term countermeasures require updating the PDF standard.

#### Digital Signatures

Digital signatures, an optional feature of the PDF specification, should guarantee the authenticity and integrity of the document. Any modification, whether based on changing the internal PDF structure or based on CBC ciphertext malleability, should be detected in digitally signed PDFs. However, PDF signatures are not a sufficient countermeasure for various reasons:

1. Even if a signature is invalid, it does not prevent the document from being opened. Once the modified PDF file is opened, the plaintext is already exfiltrated.
2. The usage of PDF signatures cannot be enforced. According to the specification, an encrypted PDF does not have to be signed. Thus, an attacker can strip the signature.
3. Recently, it was shown how to forge valid signatures on almost all tested PDF viewers [30].

#### Closing Exfiltration Channels

While PDF viewers should ensure that PDF documents cannot "phone home" (i.e., load external resources without user consent), this countermeasure alone is not sufficient. The PDF specification is complex and allows various methods to trigger a connection once the document is opened. Our evaluation shows that even PDF viewers designed to prompt the user before opening a connection fail to do this reliably for all discovered exfiltration channels. Given the complexity of the PDF standard, additional, yet unknown, exfiltration channels likely exist. Therefore, it is difficult to implement a full-featured PDF viewer that prevents all possible exfiltration channels. Even if PDF viewers are patched to prevent automatic connections, submitting forms or clicking on hyperlinks remains a legitimate and popular feature of PDF files, and the security of a cryptosystem should not depend on expecting users not to click on any links in the encrypted document.

#### Disallowing Partial Encryption

As a workaround to counter direct exfiltration attacks, PDF viewers might consider dropping support for partially encrypted files based on crypt filters, as specified in PDF ≥ 1.5, and based on additional features documented in Appendix A. While this would make standard-conforming documents unreadable (e.g., PDF documents where only the attachment is encrypted), the number of affected documents is likely limited in practice. Another short-term mitigation would be enforcing a policy where unencrypted objects are not allowed to access encrypted content anymore, similar to "mixed content" warnings in web browsers. In the long term, the PDF 2.x specification should drop support for mixed content altogether, as it is a security nightmare. Instead, an encryption scheme should be preferred where the whole document, including its structure, is encrypted to minimize the overall attack surface. This approach would require major changes in the PDF standard.

#### Using Authenticated Encryption

A countermeasure to CBC gadgets would be updating the PDF encryption standard to use integrity protection, such as an HMAC, or authenticated encryption instead of AES-CBC without any integrity protection. This would effectively mitigate gadget-based attacks. To ensure that downgrade attacks to older encryption modes are not viable, the key derivation function should incorporate encryption contexts such as the cipher and encryption modes. Additionally, the standard needs to clarify what to do when manipulated ciphertexts are encountered, strictly preventing a PDF viewer from displaying manipulated content instead of simply showing a warning that users might ignore. These countermeasures would only apply to future documents; legacy documents remain subject to exfiltration.

### Related Work

We categorized existing research into three categories: PDF security, PDF encryption, and attacks on the encryption of different data formats. We first introduce related work covering different aspects of PDF security, such as PDF malware, insecure features, and attacks on PDF signatures. We then present research on attacks related to PDF encryption. Finally, we give an overview of similar attacks applied to different data formats like XML, JSON, or email.

#### PDF Security

In 2010, Raynal et al. provided a comprehensive study on malicious PDF files that abuse legitimate PDF features and lead to Denial-of-Service (DoS), Server-Side-Request-Forgery (SSRF), and information leakage attacks [40]. This research was extended in 2012 by Hamon et al., who published a study revealing weaknesses in PDF that lead to malicious URI invocations [55]. In 2012, Popescu et al. presented a proof-of-concept for bypassing a specific digital signature [39] based on a polymorphic file that contained two different file types—PDF and TIFF—and led to a different display of the same signed content. In 2013 and 2014, a new attack class was published that abuses the support of insecure PDF features, JavaScript, and XML [20, 44]. Carmony et al. introduced in 2016 different techniques to bypass PDF malware detectors [6], some of which rely on PDF encryption to hide malicious content from the detectors. In 2017, Stevens et al. discovered a novel attack against SHA-1 [49], which broke the collision resistance and allowed an attacker to create a PDF file with new content without invalidating the digital signature. In 2018, Franken et al. revealed weaknesses in two PDF viewers by forcing these to call arbitrary URIs [15]. In the same year, multiple vulnerabilities in Adobe Reader and different Microsoft products were discovered, which allowed URI invocation and NTLM credentials leakage [21, 41]. In 2019, Mladenov et al. discovered three novel attacks on PDF signatures that bypassed the verification of digitally signed PDF files [31]. They did not investigate encrypted PDFs, but their attacks could complement our work if encrypted PDFs are signed (see Section 7).

#### PDF Encryption

Upon studying previous research, we classified attack strategies into two categories: guessing the used password or the encryption key. None of the related work considered attacks beyond these strategies. In 2001, Komulainen et al. provided one of the first security analyses of the PDF encryption standard and pointed out the risks of using encryption with a 40-bit key length [27]. In the same year, Sklyarov et al. presented at DEF CON 9 practical attacks on eBooks and PDF encryption [46], introducing one of the first tools capable of brute-forcing the password of a PDF file using different attack techniques like dictionaries and rainbow tables [13]. As a reaction, Adobe increased the key length from 40 bits to 128 bits for the RC4 algorithm in the new version (PDF 1.4). In 2008, Sklyarov et al. evaluated the encryption of the newly released PDF 1.7 and revealed a critical security issue that allowed efficient brute-force attacks [14]. As a consequence, Adobe updated the key derivation function in the PDF 1.7 specification [37]. In 2013, Danczul et al. introduced a new technique to efficiently brute-force PDF passwords by distributing cryptanalysis tasks to different types of processors [9], concentrating on older PDF versions (PDF 1.1 to 1.5) using the RC4 algorithm for encryption. In 2015, August et al. measured the time required to brute force the password of a PDF file in dependence of its length [4]. In 2017, Stevens et al. showed how to break the password of PDF documents by relying on the deprecated RC4 algorithm with a 40-bit key length in a few seconds using modern hardware [48], using existing tools like pdf2john to brute-force the password.

#### Breaking Encryption in Different Data Formats

To conclude, we list attacks on breaking the encryption in different data formats. Jager et al. showed in 2011 and 2012 how to break the symmetric and asymmetric encryption of XML documents [24, 25], abusing weaknesses related to the CBC mode of operation and the PKCS#1 v1.5 encryption to reveal encrypted content without having the corresponding password. In 2017, Detering et al. adapted the same attacks to the JSON data format [10]. Garman et al. presented research on Apple’s iMessage protocol and revealed a novel chosen ciphertext attack, which allows an attacker to retrospectively decrypt encrypted messages [16]. Gorthe et al. showed in 2016 security issues in the design of Microsoft’s Rights Management Services, which allowed the complete bypass of these services [18]. Recently, Poddebniak et al. [38] and Müller et al. [33] showed the danger of partially encrypted content within emails, successfully revealing encrypted content without having the password by abusing the weakness of the CBC mode of operation and insecure features. In contrast to this research, we elaborated exfiltration channels abusing standard-compliant PDF features. Moreover, we optimized CBC gadgets to construct entirely new encrypted objects and refined the compression-based attacks. This research inspired our work and was used as a foundation for our cryptographic analysis of the PDF file format.

### Conclusion

The PDF specification is very feature-rich, supporting form submission, hyperlinks, and JavaScript. To ensure confidentiality during transport and storage of documents, the PDF standard defines built-in encryption algorithms. The complexity and quantity of standard PDF features, as well as the flexibility of the format, raise the question of whether plaintext exfiltration attacks are possible. During our security analysis, we identified two standard-compliant attack classes that break the confidentiality of encrypted PDF files. Our evaluation shows that among 27 widely-used PDF viewers, all of them are vulnerable to at least one of those attacks, including popular software such as Adobe Acrobat, Foxit Reader, Evince, Okular, Chrome, and Firefox. These alarming results naturally raise the question of the root causes for practical decryption exfiltration attacks. We identified two main causes: many data formats allow encrypting only parts of the content (e.g., XML, S/MIME, PDF), which is difficult to handle and allows an attacker to include their own content, leading to exfiltration channels. Second, when it comes to encryption, the lack of integrity protection and the presence of mixed content make it easier for attackers to exploit these vulnerabilities.