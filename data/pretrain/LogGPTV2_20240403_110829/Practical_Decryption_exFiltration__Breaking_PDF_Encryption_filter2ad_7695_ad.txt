cally uncompressed once the document is opened. The same applies
to A3, for which JavaScript language functions can additionally be
used to re-encode plaintext before exfiltration. However, for A2,
B2, and B3, restrictions apply when trying to exfiltrate compressed
data, as it will not be decompressed prior to being appended to the
URL. We found that in practice, most PDF viewers were unable to
interpret URLs containing compressed plaintext which is mainly
rooted in URL-encoding issues where some readers proved to be
more pedantic. For example, none of the the macOS applications
(i.e., Preview, Skim, or Safari) URL-encode spaces or line breaks
in URLs but rather simply do not evaluate URLs containing these
5While17oftheothertestedviewersexecutedJavaScriptinthedefaultsettings,scripting
support was limited in most of them and could not be used to exfiltrate document objects.
6Note that the attacker already has knowledge of the remaining parts of the document.
characters. This leads to the restriction that we can only exfiltrate
single words in these viewers using deflate backreferences.
We evaluated the limitations for each PDF viewer, as shown in
Table 2. On 21 viewers (78%), we can leak the full plaintext, even
when it is compressed. For three applications (11%), we can only
leak non-compressed data, and for another three PDF viewers (11%),
only single-words from strings or streams can be exfiltrated.
A special case is Acrobat Reader/Pro for which we can only
leak around 250 bytes without user interaction but leaking the full
plaintext requires user interaction. This is due to DNS prefetching
being done by both applications even before the user confirms a
from submission, as depicted in Figure 11. This allows us to exfiltrate
up to 250 bytes by placing them in the subdomain of a DNS request.
Generic Constraints. CBC gadgets are most practical for AES256,
which is the latest encryption algorithm used by PDF 1.7 and 2.0,
and considered to be the most secure. Older AES-based algorithms
do require known plaintext from the same ciphertext stream/string
which the attacker wants to modify. Direct exfiltration attacks, on
the other hand, are independent of the encryption scheme and
therefore can also be applied to older files and algorithms, such as
AES128 and RC4.7 Furthermore, we also successfully applied direct
exfiltration to the public key “certificate encryption” (an asymmetric
PDF encryption based on X.509 certificates).8 CBC gadgets are not
bound to using PDF features as exfiltration channels, making them
more flexible. For example, an encrypted stream to be leaked could
be defined as EmbeddedFile of type HTML and using CBC gadgets,
a format-specific exfiltration string could be prepended (e.g., <img
src="http://p.df/), thereby leaking the plaintext once the PDF
attachment is opened.
It is important to note that for both attacks, the attacker is in
full control of the appearance of the displayed document, for ex-
ample, the attacker can show the original decrypted content, only
their own content, or a mixture of both by partially overlaying the
original content.
Acrobat Reader DC
Foxit Reader
Perfect PDF Reader
PDF Studio Viewer
Nitro Reader
Acrobat Pro DC
Foxit PhantomPDF
PDF-XChange Editor
Direct exfiltration
A3
A1 A2
(cid:32)
(cid:32)
(cid:35)
(cid:32)
PDF-XChange Viewer (cid:35)
(cid:32)
(cid:35)
(cid:32) (cid:35)
(cid:32) (cid:35)
(cid:35)
(cid:35)
(cid:32) (cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
Perfect PDF Premium (cid:32) (cid:35)
(cid:35)
(cid:32) (cid:35)
(cid:35)
(cid:35)
(cid:32) (cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35) (cid:35)
(cid:35)
(cid:35) (cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35) (cid:35)
(cid:35)
(cid:35)
(cid:35) (cid:35)
(cid:32)
(cid:35)
PDF Studio Pro
Nitro Pro
Nuance Power PDF
iSkysoft PDF Editor
Master PDF Editor
Soda PDF Desktop
PDF Architect
PDFelement
Preview
Skim
Evince
Okular
MuPDF
Chrome
Firefox
Safari
Opera
Partial plaintext exfiltration (only non-compressed data)
(cid:32) Full plaintext exfiltration (arbitrary streams and strings)
(cid:71)(cid:35) Weak exfiltration (single-words from strings or streams)
(cid:35) No exfiltration / not vulnerable
Table 2: Limitations regarding plaintext exfiltration.
B2
CBC gadgets
B3
B1
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32) (cid:71)(cid:35) (cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35) (cid:71)(cid:35) (cid:35)
(cid:35) (cid:71)(cid:35) (cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35) (cid:71)(cid:35) (cid:35)
(cid:32)
(cid:32)
7 COUNTERMEASURES
In this section, we discuss ways to mitigate or prevent the de-
scribed attacks. Note that the obvious and standard-conforming
7While object numbers are part of the key derivation in AESV2 (AES128), this is not a
problem for direct exfiltration because the order of encrypted objects can be left intact.
8Note that public key encryption was only supported by eight of the tested viewers.
protection mechanisms, such as digital signatures and mitigations
such as blocking exfiltration channels, are insufficient. Sustainable
and effective long-term countermeasures require updating the PDF
standard.
A Note on Signed PDF Documents. Digital signatures – an optional
feature of the PDF specification – should guarantee the authenticity
and integrity of the document. Therefore, any modification, either
based on changing the internal PDF structure or based on CBC
ciphertext malleability, should be detected in digitally signed PDFs.
However, PDF signatures are not a sufficient countermeasure to
protect against our attacks for various reasons:
Figure 11: A warning dialog displayed by Acrobat Reader
asking the user for consent before submitting a form. Note
that the default choice is “allow and remember for this site”.
(1) Even if a signature is invalid, it does not prevent the doc-
ument from being opened. Once the modified PDF file is
opened, the plaintext is already exfiltrated.
(2) The usage of PDF signatures cannot be enforced. According
to the specification, an encrypted PDF does not have to be
signed. Thus, an attacker can strip the signature.
(3) Recently, it was shown how to forge valid signatures on
almost all tested PDF viewers [30].
A Note on Closing Exfiltration Channels. While PDF viewers
should ensure that PDF documents cannot “phone home” – i.e.,
load external resources without user consent – this countermea-
sure alone is not sufficient. First of all, we found that the PDF
specification is complex and allows various methods to trigger a
connection once the document is opened. Our evaluation shows
that even for PDF viewers which have been designed to prompt the
user before opening a connection fail to do this reliably for all of
the discovered exfiltration channels. It must be noted that our list
of exfiltration channels, as described in section 4.3, is unlikely to be
complete, given the complexity of the PDF standard. Presumably,
additional, yet unknown, exfiltration channels do exist. Therefore,
we can conclude that it is difficult to implement a full-featured PDF
viewer in a way that prevents all possible exfiltration channels.
Finally, even if PDF viewers are patched in such a way that
a connection is not automatically triggered, submitting forms or
clicking on hyperlinks remains a legitimate and popular feature of
PDF files, and the security of a cryptosystem should not depend on
expecting users not to click on any links in the encrypted document.
Disallowing Partial Encryption. As a workaround to counter di-
rect exfiltration attacks, PDF viewers might consider dropping sup-
port for partially encrypted files based on crypt filters, as specified
in PDF ≥ 1.5, and based on additional features as documented in
Appendix A. While this would make standard-conforming docu-
ments unreadable (e.g., PDF documents where only the attachment
is encrypted), we presume the number of affected documents is
limited in practice.9 Another short-term mitigation would be en-
forcing a policy were unencrypted objects are not allowed to access
encrypted content anymore – similar to “mixed content” warnings
in the web, which are thrown by modern web browsers, for ex-
ample, when JavaScript code from an insecure resource is to be
executed on a secure website (see [7]). In the long term, the PDF 2.x
specification should drop support for mixed content altogether10
– the authors consider it to be a security nightmare. Instead, an
encryption scheme should be preferred where the whole document
– including its structure – is encrypted to leave no room for in-
jection or wrapping attacks, and to minimize the overall attack
surface significantly. Obviously, this approach would require major
changes in the PDF standard.
Using Authenticated Encryption. A countermeasure to CBC gad-
gets would be updating the PDF encryption standard to use integrity
protection – for example, an HMAC – or authenticated encryption
instead of AES-CBC without any integrity protection. This would
effectively mitigate the gadget-based attacks. However, to ensure
that downgrade attacks to older encryption modes are not viable,
the key derivation function should incorporate encryption contexts
such as the cipher and encryption modes. Additionally, the standard
needs to clarify what to do when manipulated ciphertexts are en-
countered. It should strictly prevent a PDF viewer from displaying
manipulated content instead of simply showing a warning that
9We analyzed a dataset of 8,840 encrypted PDF documents obtained from crawling the
Alexa top 1 million websites and found only 353 to contain “partial encryption”, all of
them due to unencrypted metadata streams.
10Note that there seems to be a trend towards the opposite direction and newer PDF
specifications often added flexibility (e.g., “Unencrypted Wrappers” in PDF 2.0).
users might just choose to ignore. It must be noted, that these coun-
termeasures would only apply to future documents. Documents in
the legacy format remain subject to exfiltration.
Also note that eliminating the known plaintext from the access
permissions is not an adequate workaround, because it is likely that
further known plaintext segments exist in a PDF document. For
example, encrypted Metadata streams always start with a known
fixed XML header, and we observed that PDF editors and libraries
always add the same encrypted Creator string to a document.
8 RELATED WORK
We separated existing research into three categories: PDF security,
PDF encryption, and attacks on the encryption of different data
formats. We firstly introduce related work covering different aspects
regarding PDF security such as PDF malware, PDF insecure features,
and attacks on PDF signatures. We then present research on attacks
related to PDF encryption. Finally, we give an overview of similar
attacks which have been applied on different data formats like XML,
JSON, or email.
PDF Security. In 2010, Raynal et al. provided a comprehensive
study on malicious PDF files which abuse legitimate PDF features
and lead to Denial-of-Service (DoS), Server-Side-Request-Fogery
(SSRF), and information leakage attacks [40]. This research was
extended in 2012 by Hamon et al., who published a study revealing
weaknesses in PDF that lead to malicious URI invocations [55]. In
2012, Popescu et al. presented a proof-of-concept for bypassing
a specific digital signature [39] based on a polymorphic file that
contained two different file types – PDF and TIFF – and lead to a
different display of the same signed content. In 2013 and 2014, a new
attack class was published which abuses the support of insecure PDF
features, JavaScript, and XML [20, 44]. Carmony et al. introduced
in 2016 different techniques to bypass PDF malware detectors [6].
Some of these techniques rely on PDF encryption to hide malicious
content from the detectors. In 2017, Stevens et al. discovered a novel
attack against SHA-1 [49], which broke the collision resistance and
allowed an attacker to create a PDF file with new content without
invalidating the digital signature. In 2018, Franken et al. revealed
weaknesses in two PDF viewers by forcing these to call arbitrary
URIs [15]. In the same year, multiple vulnerabilities in Adobe Reader
and different Microsoft products were discovered which allowed
URI invocation and NTLM credentials leakage [21, 41]. In 2019,
Mladenov et al. discovered three novel attacks on PDF signatures
which bypassed the verification of digitally signed PDF files [31].
They did not investigate encrypted PDFs documents; however, their
their attacks could possibly complement our work if encrypted PDFs
are signed (see section 7).
PDF Encryption. Upon studying previous research, we classified
attack strategies into two categories: either to guess the used pass-
word or the encryption key. In comparison to our research, none of
the related work considered attacks beyond these attack strategies.
In 2001, Komulainen et al. provided one of the first security
analysis of the PDF encryption standard and pointed out the risks
of using encryption with a 40-bit key length [27]. In the same
year, Sklyarov et al. presented at DEF CON 9 practical attacks on
eBooks and PDF encryption [46]. The authors introduced one of
the first tools capable to brute-force the password of a PDF file by
supporting different attack techniques like dictionaries and rainbow
tables [13]. As a reaction, Adobe increased the key length from 40
bit to 128 bit for the RC4 algorithm in the new version (PDF 1.4). In
2008, Sklyarov et al. evaluated the encryption of the newly released
PDF 1.7 and revealed a critical security issue that allowed efficient
brute-force attacks [14]. As a consequence, Adobe updated the
key derivation function in the PDF 1.7 specification [37]. In 2013,
Danczul et al. introduced a new technique to efficiently brute-force
PDF passwords by distributing crypt analysis tasks to different
types of processors [9]. The authors concentrated on older PDF
versions (PDF 1.1 to 1.5) using the RC4 algorithm for encryption.
In 2015, August at al. measured the time required to brute force
the password of a PDF file in dependence of its length [4]. In 2017,
Stevens et al. showed how to break the password of PDF documents
by relying on the deprecated RC4 algorithm with a 40-bit key length
in a few seconds by using modern hardware [48]. The author used
existing tools like pdf2john, to brute-force the password.
Breaking Encryption in Different Data Formats. To conclude, we
list attacks on how to break the encryption in different data formats.
Jager et al. showed in 2011 and 2012, how to break the symmetric
and the asymmetric encryption of XML documents [24, 25]. The
authors abused weaknesses related to the CBC mode of operation
and the PKCS#1 v1.5 encryption to reveal encrypted content with-
out having the corresponding password. In 2017, Detering et al.
adapted the same attacks to the JSON data format [10]. Garman et
al. presented research on Apple’s iMessage protocol and revealed a
novel chosen ciphertext attack, which allows an attacker the ret-
rospective decryption of encrypted messages [16]. Gorthe et al.
showed in 2016 security issues in the design of Microsoft’s Rights
Management Services, which allowed the complete bypass of these
services [18]. Recently, Poddebniak et al. [38] and Müller et al. [33]
showed the danger of partially encrypted content within emails.
The authors successfully revealed encrypted content without hav-
ing the password by abusing the weakness of the CBC mode of
operation and insecure features. In contrast to this research, we
elaborated exfiltration channels abusing standard compliant PDF
features. Moreover, we optimized CBC gadgets to construct entirely
new encrypted objects and refined the compression-based attacks.
This research inspired our work and was used as a foundation for
our cryptographic analysis of the PDF file format.
9 CONCLUSION
The PDF specification is very feature rich. Similarly to HTML, it
supports form submission, hyperlinks, and JavaScript. To ensure
confidentiality during transport and storage of documents, the PDF
standard defines built-in encryption algorithms. The complexity
and quantity of standard PDF features, as well as the flexibility of
the format, beg the question whether plaintext exfiltration attacks
are possible. During our security analysis, we answer this question
by identifying two standard compliant attack classes which break
the confidentiality of encrypted PDF files. Our evaluation shows
that among 27 widely-used PDF viewers, all of them are vulnerable
to at least one of those attacks, including popular software such as
Adobe Acrobat, Foxit Reader, Evince, Okular, Chrome, and Firefox.
These alarming results naturally raise the question of the root
causes for practical decryption exfiltration attacks. We identified
two of them. First, many data formats allow to encrypt only parts
of the content (e.g., XML, S/MIME, PDF). This encryption flexibility
is difficult to handle and allows an attacker to include their own
content, which can lead to exfiltration channels. Second, when it