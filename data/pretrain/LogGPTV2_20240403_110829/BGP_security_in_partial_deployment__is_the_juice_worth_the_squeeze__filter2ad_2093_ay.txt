### Upper and Lower Bounds on Happy ASes

We utilize the three algorithms presented in Appendix B.2-B.4 to compute upper and lower bounds on the set of happy Autonomous Systems (ASes) for a given attacker-destination pair \((m, d)\), a set of secure ASes \(S\), and a specified routing model. Each algorithm records, for every AS discovered during the Breadth-First Search (BFS) computation, one of the following conditions:
1. All routes in its Best Perceivable Routes (BPR) at that iteration lead to the destination.
2. All routes in its BPR at that iteration lead to the attacker.
3. Some routes in its BPR at that iteration lead to the destination, while others lead to the attacker.

The number of ASes in the first category is used as a lower bound on the number of happy ASes. The total number of ASes in the first and third categories is used as an upper bound on the number of happy ASes.

**Correctness of the Approach:**
The correctness of this approach is based on the correctness of our algorithms (Appendix B.5) and the fact that all routes in the BPR of a node at any iteration have the same length, type, and security status. This ensures that the Tie-Breaking (TB) criteria completely determine which routes are chosen. Specifically:
- ASes in the first category choose legitimate routes and are happy, regardless of the TB criteria.
- ASes in the second category choose attacked routes and are unhappy, regardless of the TB criteria.
- Whether ASes in the third category are happy depends entirely on the TB criteria.

### BGP Convergence

Lemmas B.2-B.15, proven in Appendix B.5, collectively imply Theorem 2.1: when all ASes prioritize secure routes in the same manner, convergence to a single stable routing state is guaranteed, regardless of which ASes adopt S*BGP, even in the presence of attacks discussed in Section 3.

### Partitions

Recall from Section 4.3.1 that a source AS \(s\) is protectable if S*BGP can influence whether it routes to the legitimate destination \(d\) or the attacker \(m\). A source AS \(s\) is doomed (resp. immune) if it always routes to the attacker \(m\) (resp. routes to the legitimate destination \(d\)), regardless of how S*BGP is deployed in the network. In the security-first model, all ASes are assumed to be protectable to avoid the complications discussed in Appendix E.3.

In this section, we describe how to compute the sets of immune, doomed, and protectable ASes with respect to an attacker-destination pair \((m, d)\) in the security-second and security-third models. To do this, we set \(S = \emptyset\) and compute the BGP routing outcome for that \((m, d)\) pair using the algorithm in Section B.2.

#### Computing Partitions: Security-Third Model

To determine the partitions for the security-third model, the algorithm records, for every AS discovered in the BFS computation, one of the following conditions:
1. All routes in its BPR set at that iteration lead to the destination.
2. All routes in its BPR set at that iteration lead to the attacker.
3. Some routes in its BPR set at that iteration lead to the destination, while others lead to the attacker.

We classify ASes in the first category as immune, ASes in the second category as doomed, and ASes in the third category as protectable. We show below that this classification aligns with our definitions of immune, doomed, and protectable ASes in Section 4.3.1 for the security-third model.

**Correctness of the Algorithm:**

**Corollary E.1.** In the security-third routing model, for any destination \(d\), attacker \(m\), source \(s\), and deployment \(S \subseteq V\), \(s\) will stabilize to a route of the same type and length as any route in \(BR(s, \emptyset, m, d)\).

**Proof.** This follows from the correctness of our algorithm for computing routes in the security-third model (Appendix B.2). In the security-third model, route security is prioritized below path length. Therefore, all routes in \(BPR_r(s)\) must be contained in \(BPR(s, \emptyset, m, d)\), where \(BPR_r(s)\) is the set of best perceivable routes of \(s\) during iteration \(r\) of the subroutine FCR, FPeeR, or FPrvR of our algorithm, depending on whether \(BPR(s, S, m, d)\) contains customer, peer, or provider routes, respectively.

By the correctness of our algorithm, \(s\) must stabilize to a route in \(BPR_r(s)\) for some iteration \(r\) of exactly one of these subroutines. Thus, any \(s\) that has customer routes in \(BPR(s, \emptyset, m, d)\) will be "fixed" to a route in the FCR subroutine for any choice of \(S\). Similarly, if \(s\) has peer (resp., provider) routes in \(BPR(s, \emptyset, m, d)\), it will be "fixed" to a route in the FPeeR (resp., FPrvR) subroutine for any choice of \(S\). Consequently, the type of the route will be fixed to the same type as that of \(BPR(s, \emptyset, m, d)\) for all \(S\). Moreover, when we choose to "fix" the route of \(s\) in the appropriate subroutine, we do so by selecting \(s\) with the shortest route out of all the sources that have not been "fixed," and the length of the route will be the same for all \(S\).