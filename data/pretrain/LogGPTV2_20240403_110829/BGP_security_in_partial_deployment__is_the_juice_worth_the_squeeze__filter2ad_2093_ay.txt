We use the three algorithms in Appendix B.2-B.4 to com-
pute upper and lower bounds on the set of happy ASes (as
discussed in Section 4.1), for a given attacker-destination
pair (m, d), set of secure ASes S and routing model. To
do this, each algorithm records, for every AS discovered in
the BFS computation, whether (1) all routes in its BPR at
that iteration lead to the destination, or (2) all these routes
lead to the attacker or (3) some of these routes lead to the
destination and others to the attacker. The number of ASes
in the 1st category is then set to be a lower bound on the
number of happy ASes. The total number of ASes in the 1st
and 3rd category is set to be an upper bound on the number
of happy ASes.
The correctness of this approach follows from the correct-
ness of our algorithms (Appendix B.5), and the fact that all
the routes in the BPRr(vi) of a node vi at iteration r have the
same length, type, and are either all secure or insecure, so
the TB criteria completely determines which of these routes
are chosen. As such, ASes in the 1st category choose legiti-
mate routes (and are happy) regardless of the TB criteria,
ASes in the 2nd category choose attacked routes (and are
unhappy) regardless of the TB criteria, and whether ASes
in the 3rd category are happy completely depends on the
TB criteria.
D. BGP CONVERGENCE.
Taken together, Lemmas B.2-B.15 proven in Appendix B.5
above imply Theorem 2.1; that is, when all ASes prioritize
secure routes the same way, convergence to a single stable
routing state is guaranteed, regardless of which ASes adopt
S*BGP, even in presence of attacks discussed in Section 3.
E. PARTITIONS.
Recall from Section 4.3.1 that a source AS s is protectable
if S*BGP can aﬀect whether or not it routes to the legit-
imate destination d or the attacker m; the source AS s is
doomed (resp. immune) if it always routes to the attacker
m (resp. routes to the legitimate destination d), regardless
of how S*BGP is deployed in the network. In the security
1st model all ASes are assumed to be protectable (we do
this to avoid the complications discussed in Appendix E.3).
In this section we describe how we compute the sets of im-
mune, doomed, and protectable ASes with respect to an
attacker-destination pair (m, d) in the security 2nd and 3rd
models. To do this, we set S = ∅ and compute the BGP
routing outcome for that (m, d) pair using the algorithm in
Section B.2.
E.1 Computing partitions: security 3rd
To determine the partitions for the security 3rd model,
this algorithm records, for every AS discovered in the BFS
computation whether (1) all routes in its BPR set at that
iteration lead to the destination, or (2) all these routes lead
to the attacker or (3) some of these routes lead to the des-
tination and others to the attacker. We classify ASes in
the 1st category as immune, ASes in the 2nd category as
doomed, and ASes in the 3rd category as protectable. We
show below that this indeed coincides with our deﬁnitions
of immune, doomed, and protectable ASes in Section 4.3.1
for the security 3rd model.
The following allows us to prove the correctness of our
algorithm for computing partitions:
Corollary E.1. In the security 3rd routing model, for
any destination d, attacker m, source s and deployment S ⊆
V , s will stabilize to a route of the same type and length as
any route in BR(s,∅, m, d).
Proof. This follows from the correctness of our algo-
rithm for computing routes in the security 3rd model (Ap-
pendix B.2). Note that because in the security 3rd model
route security is prioritized below path length, all routes
in BPRr(s) must be contained in BPR(s, ∅, m, d), where
BPRr(s) is the set of best perceivable routes of s during
iteration r of the subroutine FCR, FPeeR or FPrvR of our
algorithm, when BPR(s, S, m, d) contains customer, peer or
provider routes respectively. Recognize that by the correct-
ness of our algorithm, s must stabilize to a route in BPRr(s)
for some iteration r of exactly one of these subroutines.
Therefore, any s that has customer routes in BPR(s, ∅, m, d)
will be “ﬁxed” to a route in the FCR subroutine for any
choice of S. Similarly, if s has peer (resp., provider) routes
in BPR(s,∅, m, d), it will be “ﬁxed” to a route in the FPeeR
(resp., FPrvR) subroutine for any choice of S. Therefore,
the type of the route will be ﬁxed to the same type as that
of the BPR(s, ∅, m, d) for all S. Moreover, when we choose
to “ﬁx” the route of s in the appropriate subroutine, we do
so by selecting s with a shortest routes out of all the sources
that have not been “ﬁxed”, and regardless of S, and it follows
the the length of the route will be the same for all S.