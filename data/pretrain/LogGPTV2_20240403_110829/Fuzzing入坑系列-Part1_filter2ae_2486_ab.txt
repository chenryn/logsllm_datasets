            }
            s++;
        }
        *t = '\0';
        return true;
    }
    int main(int argc, char const *argv[])
    {
        init_hex_values();
    // #if DEBUG
    //     for (int i=0; i=2) {
            char* s = (char*)argv[1];
            char* t = malloc(strlen(s)+1);
            bool ret = cgi_decode(s, t);
            printf("%s\n", t);
            return ret;
        }
        printf("cgi_decode: usage: cgi_decode STRING\n");
        return 0;
    }
终端:
    $> gcc cgi_decode.c --coverage -o cgi_decode
    $> ./cgi_decode 'Send+mail+to+me%40fuzzingbook.org'
    $> gcov cgi_decode.c
    File 'cgi_decode.c'
    Lines executed:92.86% of 42
    cgi_decode.c:creating 'cgi_decode.c.gcov'
然后在生成的.c.gcov文件中如图所示
最左边就是每一行代码执行到的次数
对于python代码，作者构建了一个 **Coverage类** 来记录代码覆盖率:
    class Coverage(object):
        def traceit(self, frame, event, arg):
            if self.original_trace_function is not None:
                self.original_trace_function(frame, event, arg)
            if event == "line":
                function_name = frame.f_code.co_name
                lineno = frame.f_lineno
                self._trace.append((function_name, lineno))
            return self.traceit
        def __init__(self):
            self._trace = []
        def __enter__(self):
            self.original_trace_function = sys.gettrace()
            sys.settrace(self.traceit)
            return self
        def __exit__(self, exc_type, exc_value, tb):
            sys.settrace(self.original_trace_function)
        def trace(self):
            return self._trace
        def coverage(self):
            return set(self.trace())
这样的话就可以通过这个Coverage类来使用with语句来记录代码覆盖率
测试代码:
    with Coverage() as cov:
            cgi_decode("a+b")
        print(cov.coverage())
终端:
    $> python3 coverage_test.py
    {('cgi_decode', 24), ('cgi_decode', 30), ('cgi_decode', 43), ('cgi_decode', 33), ('cgi_decode', 23), ('__exit__', 38), ('cgi_decode', 32), ('cgi_decode', 45), ('cgi_decode', 29), ('cgi_decode', 25), ('cgi_decode', 22), ('cgi_decode', 28), ('cgi_decode', 44), ('cgi_decode', 31), ('cgi_decode', 21), ('cgi_decode', 34)}
了解代码覆盖率之后，我们就可以使用代码覆盖率，来引导我们的Fuzzer来生成数据，相当于一种具有引导性突变的Fuzzer，我们称为
**GreyboxFuzzer** ，下面是实现这个类的代码
    class GreyboxFuzzer(MutationFuzzer):
        def reset(self):
            super().reset()
            self.coverages_seen = set()
            self.population = []
        def run(self, runner: Runner):
            result, outcome = super().run(runner=runner)
            new_coverage = frozenset(runner.coverage())
            if new_coverage not in self.coverages_seen:
                seed = Seed(self.inp)
                seed.coverage = runner.coverage()
                self.coverages_seen.add(new_coverage)
                self.population.append(seed)
            return (result, outcome)
在 **MutationCoverageFuzzer类**
的Run方法中，我们实际上至少比较了每一次Runner执行后的，其输入的数据是否让程序执行到新的代码块，如果有则记录下来，同时将这一次的数据加入到进行帅选到种子列表中，作为下次突变的数据种子，这样就有机会让我们Fuzzer生成出来的数据能够广的代码覆盖率。
下面是 **MutationFuzzer** 和 **GreyboxFuzzer** 的测试对比,
依然使用FuzzingBook中的测试例子，也是一个很有趣的🌰
Target程序代码:
    def crashme (s):
        if             len(s) > 0 and s[0] == 'b':
            if         len(s) > 1 and s[1] == 'a':
                if     len(s) > 2 and s[2] == 'd':
                    if len(s) > 3 and s[3] == '!':
                        raise Exception()
**MutationFuzzer** 测试代码:
    seed_input = "good"
    blackbox_fuzzer = MutationFuzzer([seed_input], Mutator(), PowerSchedule())
    n = 30000 # 测试次数
    blackbox_runner = FunctionCoverageRunner(crashme)
    with Timer() as t:
        blackbox_fuzzer.runs(blackbox_runner, trials=n)
    all_cov, greybox_coverage = population_coverage(blackbox_fuzzer.inputs, crashme)
    print(t.elapsed_time())
    print(all_cov)
    print(max(greybox_coverage))
终端:
    $> python3 mutator_test.py
    1.489651209
    {('crashme', 3), ('__exit__', 38), ('crashme', 2)}
    3
**GreyboxFuzzer** 测试代码
    seed_input = "good"
    n = 30000
    greybox_fuzzer = GreyboxFuzzer([seed_input], Mutator(), PowerSchedule())
    runner = FunctionCoverageRunner(crashme)
    with Timer() as t:
        greybox_fuzzer.runs(runner, trials=n)
    all_cov, greybox_coverage = population_coverage(greybox_fuzzer.inputs, crashme)
    print(t.elapsed_time())
    # print(runner.coverage())
    print(all_cov)
    print(max(greybox_coverage))
    print(greybox_fuzzer.population)
终端：
    $> python3 greyboxFuzzer.py
    1.7056656000000001
    {('crashme', 3), ('crashme', 6), ('crashme', 2), ('crashme', 5), ('crashme', 4), ('__exit__', 38)}
    6
    [good, bEgd, bar$Egdi, badEdi, bad!Egi]
下面是FuzzingBook所给出的一张对比图，可以直观的发现，没有代码覆盖率引导的普通数据变异很难覆盖完程序的路径，而通过代码覆盖率的引导，Fuzzer生成的数据能逐渐的覆盖程序的路径。
## AFLFastSchedule:
在我们Fuzz
crashme这个例子中，通过上节的实验我们可以发现使用代码覆盖率来引导我们的Fuzzer，可以使其变得更有目的性的去生成变异数据，但其耗时还是相对较长，且fuzzing出来的的数据也相对较多，那么有没有优化的方案呢？
在FuzzingBook中，作者使用如下公式来计算种子数据的权重  
e(s) =\frac{1}{f(p(s))^e}  
实际上很容易理解:
  * s是种子，作为一个参数
  * 函数p用来获取该种子所覆盖的路径hash值
  * 函数f用来获取该路径已经被种子覆盖的次数
  * e是一个指数常量，用来扩大数量级，通过调整这个e的常量值，我们能减少fuzz的次数, 来提升fuzzer的效率
**AFLFastSchedule类** 实现代码:
    class AFLFastSchdule(PowerSchedule):
        def __init__(self, exponent):
            self.exponent = exponent
            self.path_frequency = {}
        def assignEnergy(self, population:List[Seed]):
            for seed in population:
                seed.energy = 1 / (self.path_frequency[getPathID(seed.coverage)] ** self.exponent)
**AFLFastSchedule类** 继承PowerSchedule，重写了assignEnergy方法，重新通过上诉公式来计算种子的权重
**CountGreyboxFuzzer类** 实现代码:
    class CountingGreyboxFuzzer(GreyboxFuzzer):
        def __init__(self, seeds, mutator: Mutator, schedule: AFLFastSchdule):
            super().__init__(seeds, mutator, schedule)
            self.schedule = schedule
        def reset(self):
            return super().reset()
        def run(self, runner: Runner):
            result, outcome = super().run(runner)
            path_id = getPathID(runner.coverage())
            if path_id not in self.schedule.path_frequency:
                self.schedule.path_frequency[path_id] = 1
                return result, outcome
            self.schedule.path_frequency[path_id] += 1
            return result, outcome
**CountGreyboxFuzzer类**
继承GreyboxFuzzer，主要重写run方法，将检测代码路径是否已被执行替换为增加路径已执行次数，相比较原来的 **普通greyboxFuzzer**
，这样当下一次种子调度器在帅选种子时，就有权重变化了。
通过公式的描述，我们可以发现当一个路径被覆盖多次时，他的权重会减少，而较新的路径的权重反而更大，而目前我们的种子调度器帅选种子主要依赖其权重，那么这就相当于种子调度器在帅选种子来进行变异时，会逐渐逐渐往新路径选择，这在一定程度上更能引导我们的Fuzzer去变异出代码覆盖率更广的数据。
下面是实验结果：
**Test_CountingGreyboxFuzzer** :
    def test_countingGreyboxFuzzer(e):
        seed_input = "good"
        exponent = e
        n = 10000
        fast_schedule = AFLFastSchdule(exponent)
        bostgreybox_fuzzer = CountingGreyboxFuzzer([seed_input], Mutator(), fast_schedule)
        runner = FunctionCoverageRunner(crashme)
        with Timer() as t:
            bostgreybox_fuzzer.runs(runner, trials=n)
        _, bostgreybox_coverage = population_coverage(bostgreybox_fuzzer.inputs, crashme)
        print(t.elapsed_time())
        # print(all_cov)
        print(max(bostgreybox_coverage))
        print(bostgreybox_fuzzer.population)
        print(fast_schedule.path_frequency)
当e常量为5，fuzz次数为10000时
终端:
    $> python3 greyboxFuzzer_test.py
    0.723850758
    6
    [good, bg, ba, bad, bad!]
    {'457ea827d94ad12c048397ad55d1d030': 6005, '193f98a7531d0e9a97a787562b595798': 2743, '80819e22a0983ebc96997fa6fe569ca8': 942, '00deafe57bb3539da4ee5a01d5fb4ebe': 260, 'c9a83c563333fdb248e6a10e56aa1f12': 50}
当我们调整e为15，trials为4000时
终端:
    $> python3 greyboxFuzzer_test.py
    0.251615932
    6
    [good, bg=oyodx, ba7g=oyodz,, badBag(yoC>,, bad!sgymIn}C1 该系列主要参考自[FuzzingBook](https://www.fuzzingbook.org)，后面逐步更新相关知识的补充