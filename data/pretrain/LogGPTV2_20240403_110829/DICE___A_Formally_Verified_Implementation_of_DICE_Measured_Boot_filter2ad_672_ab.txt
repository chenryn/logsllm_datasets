If the KDF is cryptographically secure, i.e. injective and one-
way, the derivation ensures that DeviceID uniquely identiﬁes
each device and the L0 ﬁrmware that the device is running.
Furthermore, the public key DeviceIDpub does not reveal any
information about CDI.
In most deployments, the L0 ﬁrmware (and consequently
the device identity) is intended to remain unchanged through-
out the lifetime of the device, unless there is a ﬁrmware cor-
ruption or an attempt to tamper. Therefore, the CDI value and
DeviceID keys remain stable throughout the device lifetime.
The L0 layer is also responsible for generating X.509
Certiﬁcate Signing Requests (CSR) for DeviceIDpub. These
CSRs are typically harvested in a trusted environment (e.g.
during manufacturing), and processed by the manufacturer’s
PKI for DeviceID certiﬁcate issuance.
In addition to DeviceID, the L0 ﬁrmware generates an ad-
ditional asymmetric key pair, known as the Alias Key, from
CDI and the measurement of L1 (referred as FWID):
AliasKeypub,AliasKeypriv = KDF(CDI,FWID)
(3)
This key pair is unique for each combination of UDS, L0
ﬁrmware, and L1 ﬁrmware. It can be used by L1 for attes-
tation and secure key exchange. L0 also issues an X.509
certiﬁcate for the alias key signed by DeviceIDpriv. Therefore,
any relying party can verify that the alias key was issued by a
genuine device as long as they have access to a manufacturer
issued DeviceID certiﬁcate for the device.
2.3 Threat Model
We focus on an adversary that has both remote and physical
access to the device. Remotely, the attacker may try and ex-
ploit any vulnerability in the device ﬁrmware, and thereby
obtain full control over execution including the ability to run
arbitrary code. Physically, the adversary can observe or tam-
per with any of the device’s I/O interfaces such as SPI, I2C,
wi-ﬁ, and any additional pins such as RESET and interrupts, as
well as any persistent storage on the device e.g. ﬂash memory.
Finally, similar to HACL(cid:63) [65], we assume that the adversary
can observe the low-level runtime behavior such as branching
and memory-access patterns.
Possible attacks. An attacker with these capabilities may
exploit a buggy DICE implementation in several ways. A low-
level memory error (such as a buffer overﬂow) or a simple
bug in the implementation may leak secrets such as the UDS
or the device private key into one of the outputs. Using a
functional correctness bug in the X.509 certiﬁcate generation
code, an attacker may load stale or malicious ﬁrmware on the
device, while exploiting the bug to generate the certiﬁcate cor-
responding to a good ﬁrmware. Finally, if the implementation
is not careful with the secrets, an attacker may be able to infer
them by observing the branching behavior or memory-access
patterns at runtime.
More sophisticated attacks such as exploiting speculative
execution, fault injection, cold boot attacks, and use of elec-
tron microscopes to exﬁltrate secrets are out of scope of this
paper. In many simpler devices such as IoT devices, attacks
based on speculative execution are not applicable because the
CPUs do not use speculation. Attacks during manufacturing
and in the supply chain such as leakage of secrets, device
counterfeiting etc. are also out-of-scope.
2.4 Veriﬁcation Goals
Our objective is to develop DICE implementations that guar-
antee that each device has a unique long-term identity and is
capable of generating reliable assertions about its ﬁrmware
even in the presence of an attacker with the capabilities de-
scribed above. The veriﬁed implementation should satisfy the
following properties:
Conﬁdentiality. The DICE implementation should not leak
any secrets or values derived from the secrets to the adversary.
For instance, the UDS should only be accessible to the DICE
engine, and the private DeviceID key should only be known
to the L0 ﬁrmware.
Functional correctness. The DICE implementation should
meet all functional requirements laid out in the DICE speciﬁ-
cation, including key derivation and certiﬁcate generation.
Memory safety. The DICE implementation should be free
from low-level memory errors such as memory leaks, buffer
overﬂows, null dereferences, and dangling pointers.
Side-channel resistance. At runtime, the sequence of in-
structions executed and memory access patterns should be
independent of the secrets. Therefore, even an attacker who
has access to the low-level branching and addresses of all
memory accesses should not be able to distinguish between
1094    30th USENIX Security Symposium
USENIX Association
two runs that use two different values for secrets. In other
words, the implementation should be resistant to timing- and
cache-based side-channel attacks.
2.5 Trusted Computing Base
Our TCB includes the Low(cid:63) toolchain, including the F(cid:63) type-
checker, Z3 SMT solver, and the KreMLin compiler. Low(cid:63)
veriﬁcation guarantees, including side-channel resistance, ex-
tend only until the compiled C code. Beyond that, one may
use a certiﬁed C compiler like CompCert [18] that preserves
both the semantics and the constant-time property of the input
C code, or use a more general compiler like gcc at the cost of
adding it to the TCB. We trust the native, platform-speciﬁc
implementation of the hardware functions that our DICE en-
gine implementation relies on (Section 4.1), the bootloader,
I/O and peripheral drivers (Section 7.1), as well as the native
(one-line) implementation of declassiﬁcation routine used
to declassify public keys (Section 5.3). Finally, we assume
that the manufacturer deploys a secure PKI infrastructure that
issues certiﬁcates only to genuine devices.
3 Overview of the Toolchain
We use the Low(cid:63) toolchain to develop DICE(cid:63). Low(cid:63) has been
used to verify, generate, and deploy low-level code such as
cryptographic algorithms [47, 65] and parsers and serializ-
ers [49]. By developing DICE(cid:63) also in Low(cid:63), we are able to
integrate with these libraries at the speciﬁcation level, thereby
providing strong end-to-end guarantees. In this section, we
provide a background of the toolchain.
3.1 F(cid:63)
F(cid:63) [54] is a dependently-typed functional programming lan-
guage that allows programmers to do proofs about their
programs—programmers write speciﬁcations as part of the
types, and with the help of SMT-based automation provided
by F(cid:63), prove that their program meet those speciﬁcations. As
an example, the factorial function in F(cid:63) can be given the type
int →int, as in other languages like OCaml, but it can also be
given a more precise type x:int{x ≥ 0} →y:int{y ≥ x}. The type
states that the function must be called with non-negative int
arguments, and it returns int-typed results that are at least as
large as their arguments (the type x:int{x ≥ 0} is called a re-
ﬁnement type). F(cid:63) type system is also effectful—the function
types in F(cid:63) capture the effects of the function body. x:t1 →t2
is a shorthand for x:t1 →Tot t2, where Tot is the effect of pure,
terminating computations. Note that we write the argument
type as x:t1 to emphasize that x may appear free in t2. Compu-
tations that work with mutable state have ST effect, with types
of the form x:t1 →ST t2 req ens. When F(cid:63) veriﬁes a function
to have this type, the metatheory of F(cid:63) guarantees that if the
function is called with an argument of type t1 and in a state
that satisﬁes the precondition req, then the function either di-
verges, or returns a value of type t2 and the ﬁnal state satisﬁes
the postcondition ens.
F(cid:63) programs can be extracted to OCaml (or C if they are
written in the Low(cid:63) fragment (Section 3.2)); the extraction
only outputs computationally relevant code, erasing all the
proofs and speciﬁcations.
Erased types F(cid:63) standard library provides a mechanism to
deﬁne values and computations that can only be used in the
speciﬁcations and do not have any computational relevance.
In particular, the ghost version erased t of any type t is non-
informative and extracted as unit. To use an erased value,
one must use the reveal function reveal: erased t →Ghost t, that
incurs the Ghost effect. Again, terms with Ghost effect are
computationally irrelevant, and are erased during extraction.
3.2 Low(cid:63)
Low(cid:63) [48] is a restricted, ﬁrst-order subset of F(cid:63) that can be
used to program and verify low-level applications. Low(cid:63) ex-
poses shallow-embedding of a well-behaved subset of C in F(cid:63)
in the form of a C-like memory model with stack and heap,
and libraries for machine integers and mutable arrays. While
the Low(cid:63) computational code is restricted to be ﬁrst-order,
proofs and speciﬁcations are free to use the full expressive-
ness of F(cid:63). Veriﬁed Low(cid:63) programs can be extracted to read-
able and idiomatic C code that is free of low-level memory
errors (such as buffer overﬂows, use-after-free, null pointer
dereferences) and enjoys the speciﬁcations proven in Low(cid:63).
3.3 HACL(cid:63)
HACL(cid:63) [65] is a cryptographic library written and veriﬁed
in Low(cid:63). In addition to being free of low-level memory er-
rors, HACL(cid:63) algorithms are also proven functionally correct
and side-channel resistant (in the program-counter security
model [43]). Because our DICE engine and L0 speciﬁcations
are written using the speciﬁcations exported by HACL(cid:63) prim-
itives, we explain them in more detail.
Functional correctness of HACL(cid:63) primitives. To prove the
functional correctness of a cryptographic algorithm, say the
SHA256 hash algorithm, HACL(cid:63) deﬁnes a formal speciﬁca-
tion written in the pure fragment of F(cid:63) that has no side-effects
and is guaranteed to terminate. The speciﬁcation is written
using functional sequences (instead of mutable C arrays), and
is free to use mathematical integers and natural numbers, or
any other high-level constructs that may not have a low-level
C counterpart:
type sbyte = u8 (∗ the type for secret bytes ∗)
let sha256_spec (inp:seq sbyte{length inp ≤ 261 − 1})
: lseq sbyte 32 = ...
In this code snippet, the spec function for SHA256 takes as
argument a sequence of bytes with the reﬁnement capturing
USENIX Association
30th USENIX Security Symposium    1095
the allowed maximum length of the input, and returns a se-
quence of bytes whose length is 32. Its body implements the
SHA256 algorithm. This speciﬁcation is extracted to OCaml
and tested on standard test vectors, but is otherwise trusted.
HACL(cid:63) then deﬁnes the low-level implementation of the
primitive in Low(cid:63), using mutable arrays and bounded inte-
gers libraries, and relates it to the pure speciﬁcation in the
postcondition; e.g.,
let sha256_impl (len:size_t) (inp:array sbyte len) (dst:array sbyte 32)
: Stack unit
(requires λh →
len ≤ 261 − 1 ∧ live m inp ∧ live m dst ∧ disjoint [inp; dst])
(ensures λh0 () h1 →modiﬁes dst h0 h1 ∧
as_seq h1 dst == sha256_spec (as_seq h0 inp))
The Low(cid:63) array type array t len represents C-arrays with
element type t and length len. Effect label Stack is a reﬁne-
ment of ST that additionally ensures that sha256_impl does not
perform any heap allocations. The precondition, a predicate
on the input memory h, requires that the input arrays are live
(temporal memory safety), and constrains their lengths as re-
quired by the SHA-256 algorithm (spatial memory safety). It
also requires that inp and dst arrays are disjoint. The postcon-
dition is a predicate on the input memory h0, the return value
(unit value () in this case), and output memory h1. It states
that the function only modiﬁes dst, thus leaving inp (or any
other array that is disjoint from dst) unchanged, and that the
contents of dst in h1 match the speciﬁcation function applied
to the contents of inp. Thus, no matter what algorithmic or
low-level optimizations sha256_impl implements, once F(cid:63) ver-
iﬁes it with the above signature, its output is guaranteed to
be consistent with the speciﬁcation (as_seq is a Low(cid:63) library
function that returns the contents of an array in a memory as
a functional sequence).
Side-channel resistance. Following the methodology pre-
scribed in Low(cid:63) [48], HACL(cid:63) algorithms are implemented
with secrets modeled as abstract, constant-time integers. In-
deed the type u8 in the code listing for SHA256 spec above
is the secret byte type. Thus, if the program type checks, it is
guaranteed that the algorithm implementations cannot branch
on secrets or use them as array indices, thus preventing the
timing and memory access based side-channel leaks. In the
ghost code (speciﬁcation and proofs), the contents of the se-
cret bytes may be inspected via coercions. We refer the reader
to [65] for more HACL(cid:63) details.
4 DICE(cid:63) Engine
In this section, we present the DICE engine implementation
in DICE(cid:63).
Veriﬁed properties. We prove that the CDI computation is
functionally correct (as per Eq. 1). We also prove that the
implementation does not leak secrets through heap by proving
that: (a) it is memory-safe, (b) it does not allocate any memory
val t : Type
val t_rel : Preorder.preorder (seq (erased t))
type state = {
ghost_state : pointer (erased t) t_rel;
cdi : array sbyte 32ul;
l0_binary_size : u32;
l0_binary : b:array sbyte l0_binary_size{
eternal ghost_state ∧ eternal cdi ∧ eternal b ∧
disjoint [ghost_state; cdi; l0_binary]
}}
val get_st () : state
val uds_len : i: u32 {0ul < i ∧ hashable i}
val uds_bytes : erased (lseq sbyte uds_len)
val uds_enabled (h:mem) : prop
val stack_cleared (h:mem) : prop
val read_uds (out:array sbyte uds_len) : Stack unit
(requires λh →uds_enabled h ∧ live h out ∧ stack_array out)
(ensures λh0 _ h1 →
modiﬁes out h0 h1 ∧ as_seq h1 out == uds_bytes)
val disable_uds () : Stack unit
(requires λh →uds_enabled h)
(ensures λh0 _ h1 →
(¬ uds_enabled h1) ∧ modiﬁes (get_st ()).ghost_state h0 h1)
val clear_stack () : Stack unit
(requires λh →¬uds_enabled h)
(ensures λh0 _ h1 →
(¬ uds_enabled h1) ∧ stack_cleared h1 ∧
heap_arrays_except_ghost_state_are_preserved h0 h1)
Figure 3: Platform-agnostic interface used by DICE engine
on the heap, and (c) it only modiﬁes CDI. Disallowing heap
allocations guarantees that there are no memory leaks and
secret leakage through dynamically-allocated memory.
Since Low(cid:63) only models a well-behaved subset of C, it
does not allow us to reason about the (absence of) secret
leaks via deallocated stack frames. Instead, we model an ab-
stract clear_stack function, which is implemented natively in a
platform-speciﬁc manner, and call this function to clear the
stack memory just before transferring control to L0. Since
it is not connected to the Low(cid:63) memory-model, it has to be
manually audited to ensure that it is the last call in the DICE
engine implementation. Finally, we also prove that the imple-
mentation is side-channel resistant.
Some aspects of the DICE engine are platform speciﬁc; for
example, accessing and disabling UDS, primitives for erasing
memory, and even the location of the CDI in the memory. To
make the DICE engine implementation general and portable,