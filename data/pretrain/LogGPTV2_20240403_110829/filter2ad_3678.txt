# A Memory Access Validation Scheme against Payload Injection Attacks

**Authors:** Dongkyun Ahn and Gyungho Lee

## Abstract
The authenticity of data or instructions is crucial in mitigating threats from various forms of software attacks. Cloud security, in particular, has been a significant focus of research and development in recent years. Attackers can exploit vulnerabilities in cloud systems to compromise virtual machines (VMs) and launch large-scale Distributed Denial-of-Service (DDoS) attacks. This paper proposes a multi-phase distributed vulnerability detection, measurement, and countermeasure selection mechanism called NICE. NICE leverages attack graph-based analytical models and reconfigurable virtual network-based countermeasures, utilizing OpenFlow network programming APIs. The proposed framework analyzes attackers through attack analyzers and VM profiling.

**Keywords:** Virtual memory, Security, Vulnerabilities, Detection

## 1. Introduction
Malicious parties often inject payloads into the address space of victimized processes via communication channels such as network devices. These payloads typically consist of machine code combined with control flow data for code injection attacks or control flow data followed by arguments for existing procedures, as in return-to-libc attacks. Despite architectural features and software mitigation approaches, malicious parties have found ways to bypass these techniques. One common observation is that control flow data, which is vulnerable to compromise, is referenced for the next instruction address without validation. For example, return addresses in an active stack frame are blindly referenced upon exiting a sub-procedure.

Several mitigation approaches exist, including inserting canaries, stack layout reorganization, return-address encryption, stack frame allocation, and Address Space Layout Randomization (ASLR). However, most of these measures still allow the processor core to fetch the next instruction address from vulnerable stack frames without verifying the authenticity of the memory word. Stack-compromising attacks exploit this blind behavior, diverting control flow to locations they want to fetch instructions from. Although ASLR can mitigate some threats, it only reduces the likelihood of successful attacks through randomization, which can be circumvented. Additionally, return-oriented programming (ROP) attacks can synthesize viable attack vectors using existing machine codes in a given address space. These observations suggest the need for more complete and robust protection for control flow.

In this paper, we propose a memory-access validation scheme. The validation unit gathers information on memory blocks containing spurious data transferred through unreliable I/O devices and updates this information at runtime. When the processor components for control flow redirection need to reference a memory block, they query the validation unit to check if the memory block or its address is authentic. The unit returns the taint status of the queried memory address, allowing the component to take further actions, such as triggering an exception.

## 2. Problem Description

### 2.1. Existing System
In the current system, multi-variant execution is used in the cloud to detect software-as-a-service (SaaS) attacks. Variants are designed to have identical behavior under normal conditions but exhibit detectable differences when under attack. However, this approach is not applicable to infrastructure-as-a-service (IaaS) and can cause false alarms due to inconsistencies in asynchronous signals and scheduling. Return-oriented programming (ROP) attacks can synthesize viable attack vectors using existing machine codes, indicating the need for more comprehensive control flow protection.

#### 2.1.1. Disadvantages
1. Not securable in IaaS cloud services.
2. High computational complexity.
3. Inability to track specific content.
4. Susceptibility to injection attacks.

### 2.2. Proposed System
The proposed system, Network Intrusion Detection and Countermeasure Selection in Virtual Network Systems (NICE), establishes a defense-in-depth intrusion detection framework. NICE incorporates attack graph analytical procedures into intrusion detection processes. It periodically scans virtual system vulnerabilities within a cloud server to create Scenario Attack Graphs (SAGs) and optimizes resource consumption. NICE employs a novel attack graph approach for detection and prevention, correlating attack behavior and suggesting effective countermeasures. The memory-access validation scheme gathers information on memory blocks containing spurious data and updates their taint status at runtime.

#### 2.2.1. Advantages
1. More efficient access.
2. Lower computational complexity.
3. Enhanced security.
4. Use of validation schemes to ensure data integrity.

## 3. Methodology

### 3.1. Network Controller
Cloud-based networks require only an Internet connection and work over any physical infrastructure. They use per-user or device subscription pricing, reducing upfront costs. Cloud networks function like virtual private networks (VPNs), enabling secure access to files, printers, and applications from anywhere. Each virtual cloud network operates like a borderless LAN, providing fully switched, any-to-any connectivity. Network-as-a-Service (NaaS) delivery means that traditional operational aspects, such as topology, traffic engineering, and capacity planning, are managed by the cloud network operator.

The network controller supports programmable networking capabilities, enabling virtual network reconfiguration based on the OpenFlow protocol. In NICE, each cloud server has a software switch (e.g., OVS) to handle traffic in and out of VMs. Communication between cloud servers is managed by physical OpenFlow-capable switches (OFS).

### 3.2. User Request
Cloud computing is a new model, and resource monitoring tools are still maturing. A periodically and event-driven push (PEP) monitoring model is proposed to better monitor virtual resources. This model provides adequate information about resource usage and status. Users register, log in, and request resources, which are monitored by virtual machine (VM) monitoring.

### 3.3. Information Provider
Vormetric Cloud Encryption is suitable for various cloud services, including SaaS, PaaS, and IaaS. It offers multi-tenant, scalable, and secure implementation, along with the necessary APIs and interfaces. This solution addresses enterprise concerns about the financial and regulatory risks associated with using cloud services.

### 3.4. Attack Analyzer
Network forensic analysis monitors and analyzes computer network traffic for information gathering, legal evidence, and intrusion detection. When capturing network traffic, useful information such as transmitted files, communication messages, and credentials is extracted. Tools like tcpdump and Wireshark are used for network analysis.

NICE's attack analyzer performs major functions, including attack graph construction and update, alert correlation, and countermeasure selection. The process involves three phases: information gathering, attack graph construction, and potential exploit path analysis. Each node in the attack graph represents an exploit, and each path from an initial node to a goal node represents a successful attack.

### 3.5. Virtual Machine Profiling
Managing performance is critical in systems administration, especially in virtualized environments where multiple operating systems compete for resources. Monitoring the performance of both physical and virtual machines is essential for making informed decisions about virtualization performance and load distribution.

## 4. Conclusion
This paper proposes a hardware mechanism to validate memory accesses influencing control flow redirection. The validation unit manages the taint statuses of memory blocks at the cache line size granularity and responds to queries from other hardware components involved in control flow redirection. We also propose integration approaches and caching structures to reduce performance overhead. Experiments with two simulators show that the proposed scheme can detect synthesized payload injection attacks and manage taint information with limited memory. Performance degradation varies from negligible to significant, depending on the number of queries and row cache performance.

## 5. Acknowledgements
The author is deeply grateful to Shri A. SRINIVASAN (Founder Chairman), SHRI P. NEELRAJ (Secretary) of Dhanalakshmi Srinivasan Group of Institutions, Perambalur, for providing the opportunity to work and access the facilities of the college campus. Heartfelt thanks to Principal Dr. ARUNA DINAKARAN, Vice Principal Prof. S. H. AFROZE, HoD Mrs. V. VANEESWARI (Dept. of CS & IT), and Project Guide Dr. M. INDHUMATHI (Dept. of CS & IT) of Dhanalakshmi Srinivasan College of Arts & Science for Women, Perambalur. The author also thanks parents, family members, friends, and relatives for their support, freedom, and motivation.

## References
1. H. Etoh, "GCC extension for protecting applications from stack-smashing attacks (ProPolice)," 2003.
2. G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, "Secure program execution via dynamic information flow tracking," SIGARCH Comput. Archit. News, vol. 32.
3. www.trl.ibm.com/projects/security/ssp/.

## Biographical Notes
- **Ms. J. SWATHIGA**: Currently pursuing M.Sc. in the Department of Computer Science at Dhanalakshmi Srinivasan College of Arts and Science for Women.
- **Dr. M. INDHUMATHI**: Received MCA, Ph.D. She is currently working as an Assistant Professor in the Department of Computer Science at Dhanalakshmi Srinivasan College of Arts and Science for Women, Perambalur, Tamil Nadu, India. She has published papers in IJIRCCE & IJCES journals.
- **Ms. S. TAMILARASI**: Currently pursuing M.Sc. in the Department of Computer Science at Dhanalakshmi Srinivasan College of Arts and Science for Women.