# DR. CHECKER: A Static Analysis Tool for Detecting Vulnerabilities in Linux Kernel Drivers

## 1. Introduction
DR. CHECKER is a fully-automated static analysis tool designed to detect vulnerabilities in Linux kernel drivers. The tool leverages various detectors, such as the `GlobalVariableRaceDetector`, `ImproperTaintedDataUseDetector`, `IntegerOverflowDetector`, `KernelUninitMemoryLeakDetector`, and `InvalidCastDetector`. This document provides an overview of the tool's performance, lessons learned, and related work.

## 2. Performance Summary
The following table summarizes the performance of DR. CHECKER on different vendors' drivers:

| Detector                               | Huawei       | Qualcomm     | Mediatek    |
|----------------------------------------|--------------|--------------|-------------|
| GlobalVariableRaceDetector             | 62 / 62 / 5  | 33 / 33 / 2  | 155 / 153 / 6 |
| ImproperTaintedDataUseDetector         | 552 / 155 / 12 | 264 / 264 / 3 | 465 / 459 / 6 |
| IntegerOverflowDetector                | 75 / 56 / 4  | 52 / 52 / 0  | 73 / 73 / 1 |
| KernelUninitMemoryLeakDetector        | 324 / 184 / 38 | 188 / 108 / 8 | 548 / 420 / 5 |
| InvalidCastDetector                    | 81 / 74 / 5  | 92 / 91 / 3  | 243 / 241 / 9 |
| Total Warnings / Confirmed Bugs / Zero-Days | 250 / 177 / 6 | 196 / 196 / 2 | 247 / 247 / 6 |

All warnings were manually verified by the authors, and confirmed bugs were critical zero-day vulnerabilities. Seven out of the 158 identified zero-days have already been issued Common Vulnerabilities and Exposures (CVE) identifiers. The precision of DR. CHECKER is 78%, which is within the acceptable range of 30%.

## 3. Lessons Learned

### 3.1 Over-Reporting
Due to the stateless nature of the vulnerability detectors, each occurrence of a vulnerable condition raises a warning, leading to correlated warnings. For example, the code `i = tainted + 2; j = i + 1;` will raise two `IntegerOverflowDetector` warnings. This over-reporting is further amplified by context-sensitive analysis, where multiple warnings are raised for the same bug in different contexts.

### 3.2 False Positives
- **GlobalVariableRaceDetector**: Suffers from false positives due to the granularity of LLVM instructions, raising warnings for any access to a global variable outside a critical section.
- **TaintedPointerDereferenceDetector**: Struggled with precision, particularly in Huawei drivers, where it raised 552 warnings but only 155 were true positives. This was due to over-approximation in points-to analysis.
- **InvalidCastDetector**: Also affected by over-approximation, with 66 (80%) false positives in Huawei and a single entry point accounting for most false positives in Samsung.
- **IntegerOverflowDetector**: Experienced over-approximation, with 30 false warnings in a single entry point for Huawei.

### 3.3 Architecture-Specific Findings
Contrary to previous beliefs, integer overflow bugs were more prevalent in 32-bit architectures than 64-bit. DR. CHECKER also correctly identified the critical class of Boomerang bugs recently discovered.

## 4. Soundy Assumptions

### 4.1 Scalability and Precision
DR. CHECKER analyzed 1,207 entry points, with 90% completing in less than 100 seconds. The tool's practicality and scalability are achieved through soundy assumptions, specifically not analyzing core kernel functions and not waiting for loops to converge to a fixed-point.

### 4.2 Runtime Comparison
A comparison of runtime for 100 randomly selected entry points using different analysis approaches:

| Analysis          | Avg. Runtime (seconds) | Min. Runtime (seconds) | Max. Runtime (seconds) | St. Dev. (seconds) |
|-------------------|------------------------|------------------------|------------------------|--------------------|
| Sound*            | 175.823                | 0.012                  | 2261.468               | 527.244            |
| No API            | 110.409                | 0.016                  | 2996.036               | 455.325            |
| DR. CHECKER       | 35.320                 | 0.008                  | 978.300                | 146.238            |

* Only 18/100 sound analyses completed successfully.

### 4.3 Impact of Assumptions
- **Kernel Functions**: Assuming all kernel functions are bug-free and correctly implemented is critical for DR. CHECKER's efficiency. Analyzing all core kernel code leads to state explosion, making the analysis computationally infeasible.
- **Fixed-Point Loop Analysis**: Ignoring kernel API functions and not waiting for loops to converge significantly reduces runtime and improves scalability.

## 5. Discussion
DR. CHECKER is designed for Linux kernel drivers, but its underlying techniques can be applied to other modular codebases with well-defined entry points. To apply DR. CHECKER, one needs to:
1. Identify the source files of the module and compile them into a consolidated bitcode file.
2. Identify the function names that serve as entry points.
3. Determine how the arguments to these functions are tainted.

## 6. Related Work
- **Fixed-Point Loop Analysis**: Zakharov et al. [65] discuss existing tools and propose a pluggable interface for future static-analysis techniques.
- **API-Misuse Detection**: APISan [64], Static Driver Verifier (SDV) [12], SymDrive [43], and CQUAL-based tools [28] address API-misuse, but require user annotations.
- **Taint Analysis**: KINT [56] uses taint analysis for integer errors, while LDV [36] offers precise pointer analysis.
- **Pattern-Matching Approaches**: Joern [59â€“62] and VCCFinder [41] use pattern-matching for vulnerability detection.
- **Static-Analysis Frameworks**: MECA [63] and ESP [22] perform taint and points-to analysis with user annotations.
- **Hardware-Based Defenses**: Boyd-Wickizer et al. [15] and Nooks [49] propose hardware-based defenses, but they face portability issues.

## 7. Conclusion
DR. CHECKER is a fully-automated static analysis tool that effectively detects vulnerabilities in Linux kernel drivers. The tool's performance, precision, and scalability make it a promising solution for identifying critical zero-day vulnerabilities. Future work will focus on refining the detectors and improving the tool's applicability to other codebases.