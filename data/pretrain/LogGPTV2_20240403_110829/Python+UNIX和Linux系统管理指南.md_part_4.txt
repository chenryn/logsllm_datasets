非另有明确要求。
误却不可置之不理。
殊的案
要的是
坦优于由
第1章
ess
优于客
例不足以特殊到破坏规则。
可读
折
琐
作者Tim Peters
最好是只有一个——显而易见的方式来明辨。
be obvious at first unless you're Dutch.
www.TopSage.com
---
## Page 31
译注1：
的软件开发人员并没有获得任何工程方面的学位。他们中的许多人获得的是哲学、新闻
机专业学位才是一个人成长为真正的软件工程师的必经之路。实际上，一些非常有成就
实的真相是，任何人都可以学习编程。另一个同样巨大的误解是，只有攻读并获得计算
见的巨大误解就是，仅有一小部分思维奇特且属于精英类型的人才适合学习编程。而事
你可能还会有一些顾虑，也许会受到一些与编程相关的负面消息的影响。例如，一个常
会促成你拿起这本书，开始阅读简介部分。
以相当轻松地完成Python的学习，需要的仅是学习的动力、好奇心和毅力，这些因素也
如果你有Shell编程或脚本编程背景，那么学习Python时就一点不用担心学不会了。你可
网络编程，如何编写命令行工具等等。
何构建数据处理管道，如何使用对象-关系映射器编写自定义元数据管理工具，如何实现
何使用SNMP自动发现和监测子网，如何转换到交互式Python的Shell（即IPython），如
力，我们编写了一些示例程序，也许可以帮助你完成一些工作。这些示例程序包括：如
跳过下面的简介，直接阅读以后各章，通过使用我们的示例，立即开始工作。经过努
如果你已经对Python有所了解，或者是使用另一种编程语言的大师级人物，那么你可以
容易讲授和学习的一门语言，尽管这只是来自个人的体会，但的确就是这样！
学易懂时，也就完全没有必要再担心Python难学了。事实上，Python被许多人认为是最
你就是这些已经掌握了Bash或Perl的系统管理员中的一分子，那么在得知Python非常好
已经吸引了相当一部分人的眼球，但许多系统管理员正在使用的仍是Bash或Perl。如果
Python会有多难，甚至会问Python是否值得一学。目前，尽管Python发展得如火如茶，
如果你刚从书店拿起这本书，或是正在网上在线阅读本书的简介，你或许会问自已学习
学习的动力
现。如果你也能体会到这些思想精髓，Python对你来说或许就是一个非常不错的选择。
日选择使用Python的理由，而这些思想中的哲学，也会在我们使用语言的过程中不断显
却可以渗透到语言的方方面面。我们发现这些思想非常有用，这或许也是我们日复一
尽管这些描述并不是在各个层次的语言开发中都能教条式地强制贯彻的，但其思想精髓
命名空间就是一个非常好的想法一
荷兰人被认为具有非常外向和直接的性格。
管没有经常
常好于现在。
好
，那么这个想法就是一个坏想法。
www.TopSage.com
－让我们在这方面多做些工作吧！
Python简介丨17
---
## Page 32
的在年近30岁、年近40岁、年近50岁，甚至在更大龄段的人也同样能够成功学习编程的
要条件。学习Python确实不仅仅是年青人的事，正如我们所听到的，实际上有着数不清
时就开始学习编程对以后进一步学习确实是有帮助，但是，年龄并不是学习Python的必
励他们从小就开始学习编程的人。然而这简直是完全没有事实根据的观点，尽管在年青
远错过了学习的时机。这一误解使得一些人倍感欣慰，因为他们有幸在人生中遇见了鼓
另外一个有趣的、也是经常被误解的事情是认为学习编程必须从十几岁开始，否则就永
业的学位并不是学习Python的必要条件，当然，有计算机专业的学位也并不坏。
学、营养学和英语专业的学位，却成了非常优秀的Python程序员。因此，具有计算机专
生活。
力学会Python编程。Python编程确实很简单，如果你决定学习Python，它将会改变你的
始阅读下面的章节。如你还不是很确信，那么请重新阅读本节，它会让你相信自己有能
介绍的任务也就完成了。如果你已经非常确信需要学习Python编程了，那么可以立即开
是如何通过Shell执行命令。掌握了如何在控制终端执行命令之后，本章对Python做简要
人没有的优势。如果你已经决定拿起这本书并开始学习Python，那么你最想知道的可能
至此，如果你已经有了学习Python的动力，那么可以说，作为读者，你已经具备了许多
案例。
正确版本。下载的地址为http:/lipython.scipy.org/moin/Download。如果由于一些原因，
们都将会对Python和Bash程序进行对比。首先需要根据你的平台，下载并安装IPython的
shell。你需要打开两个终端窗口，一个是IPython，另一个是Bash。在每一个示例中，我
能看到的其他介绍不同，我们将同时使用被称为IPython的交互式Shell和常规的Bash
接下来我们将学习一些基础知识，我们将要对Python所做的简要介绍，与之前我们所
一些基础知识
一旦安装了IPython，并且出现了IPython shell提示符，将会看到下面的内容：
需软件的虚拟机，虚拟机中包括了一个预先配置并可以直接使用的IPython。·只需输人
无法下载并完成安装，你也可以使用普通的PythonShell。你可以下载一个包括本书所
“ipython”，就会看到一个命令提示符。
%quickref
IPython 0.8.2 -.
[ngift@Macintosh-7][H:10679][3:0]# ipython
help
第1章
-> Details about 'object'. ?object also works, ?? prints more.
Quickreference.
Python's own help system.
-An enhanced Interactive Python.
www.TopSage.com
2008,
19:35:17)
---
## Page 33
序中做到代码复用。如果你比较熟悉Bash中的“sourcing”
之所以强大，原因之一就是Python可以载入其他模块，或包含其他文件，并在新的程
得有些怪异。你可能会想问“真见鬼，import subprocess究竟是什么意思”？Python
Python示例则不同，如果之前从没有见过Python代码，Python示例看起来可能会令人觉
在上述Bash示例中，可以很清晰地看到，仅使用了一个非常简单的ls命令。但对于
而在Python终端中，需要键人的内容如下：
键人如下内容：
一些比较，从而了解一些Bash下执行的命令在Python中是如何执行的。在Bash终端中，
句，例如将处理结果重定向，输出到文件或输出给另一个UNIX命令。接下来我们进行
如果一天中会花费很多时间在终端里输人各种命令，那么你可能需要学会执行一些语
在Python中执行命令
在这两个示例中，看不出Python与Bash有什么太大的区别，而这正是Python的神奇
如果使用的是Bash终端，输人下面的内容，可以看到如下结果：
之处。
如果在Python终端上输入下面的内容，可以看到如下结果：
令做更多讲解。
接下来的章节，你会学习到更多的命令。本章主要讲述如何学习Python，因此不会对命
IPython shell与普通的Bash shell有些相似，可以执行ls、cd、pwd这样的命令。通过阅读
In [3]: subprocess.call(["1s","-1 ","/tmp/"])
In [2]: import subprocess
Out[3]:0
-rw-r--r-- 1 ngift wheel 0 Apr 7 00:26 file.txt
[ngift@Macintosh-7][H:10701][J:0]# 1s -1 /tmp/
"uoud u weisoxd ues I yutid :[t] u1
In [1]:
www.TopSage.com
一个文件，就会发现相似之
Python简介丨19
4
阁
DG
---
## Page 34
代码写入到该文件中，且将该文件命名为pyls,py，最后使用命令“chmod +x pyls.py”
本的1s命令。在另一个终端或另一个终端窗口中打开你经常使用的文本编辑器，将上述
在Python中，可以就像在Bash中一样使用shell命令。给一点提示：你可以创建Python版
面的代码即可：
模块的语法。我们之后会具体解释subprocess和import是如何工作的，现在直接复制下
处。在上例所示的特定情况下，你只需要知道加载了模块subprocess，并且知道使用该
如果现在运行该脚本，将获得与在命令行使用1s-1命令完全相同的结果，如下所示：
(["I-."s])Tres'ssasoxdqns
#Python wrapper for the Is command
#1/usr/bin/env python
import subprocess.
例1-1：Python包装ls命令
将该文件修改为可执行文件。参见例1-1。
#A System Information Gathering Script
#!/usr/bin/env python
例1-2：显示系统信息脚本一
sh。这些脚本文件都可以在本章的源代码中找到。例1-2和1-3如下所示：
码，或是直接将以下代码进行剪切和粘贴，然后运行脚本文件pysysinfo.py和bashsysinfo.
你已经开始在写一些基本的脚本了。接下来让我们看一个简单示例。编写例1-2所示的代
中使用Python的通用思路。我们经常需要使用Python对脚本或Unix命令进行“包装”
虽然这个示例看起来十分简单（事实上也确实简单），却可以给出一个在系统编程
#Command2
=8xeaweur
#Command 1
import subprocess
（wrap）。实际上，如果在文件中一行接一行地写下命令，然后运行该文件，就可以说
20
iname=
subprocess.call(["some_command", "some_argument", "another_argument_or_path"])
-rwxr-xr-x 1 ngift staff 115 Apr 7 12:57 pyls.py
total8
第1章
"uname"
—Python
www.TopSage.com
X
---
## Page 35
动完成功能对subprocess进行查询的示例。
用的属性。注意，一个模块仅仅是包含了代码的文件。下面是在IPython中，使用tab自
查看模块中是否有可用的工具。让我们使用tab自动完成功能来查看subprocess中所有可
像subprocess这样的模块是非常简单的。使用IPython，你可以通过tab自动完成功能来
lynx命令是否可用。现在如果你想使用在/usr/bin目录下找到的某个工具，只要简单地输
而已经用惯了Red Hat系统，那么你可能会在/usr/bin下使用ls命令去查看wget、curl或是
常类似于在/usr/bin目录下运行ls命令。如果你恰好刚开始使用Ubuntu或是Solaris系统，
进来，也可以创建自已的模块或文件，供以后重复使用，这与加载subprocess模块的方
正如之前提到的，加载模块（例如加载subprocess）仅仅是将可以使用的代码文件加载
Python脚本程序中我们加载了subprocess模块，subprocess模块已经包含了使用Python
到目前为止，我们已经学习了很多，但仍没能将import和subprocess完全解释清楚。在
令与参数完全分开的写法并不是必需的，也可以像下面这样写：
所看到的输出结果也是完全相同的。需要注意的是，在使用subprocess.call时，将命
如果把这两个脚本都读一遍，会发现它们看起来非常相似。如果分别运行这两个脚本，
$DISKSPACE
printf "Gathering diskspace information with the $DISKSPACE command: \n\n"
#Command2
#Command 1
#A System Information Gathering Script
#!/usr/bin/env bash
例1-3：显示系统信息脚本——Bash
入命令名称即可，例如/usr/bin/wget。
常好的优点就是可以对模块或文件进行检查，查看其内部可用的属性。对于Unix，这非
式相同。模块并没什么神奇，只不过是一个写有代码的文件罢了。IPythonshell的一个非
实现系统调用的代码。
DISKSPACE="df-h"
$UNAME
printf
subprocess.call("df -h", shell=True)
subprocess.PIPE
subproceSs.MAXFD
subprocess.CalledProcessError
In [12]:subprocess.
ubprocess.Popen
f "Gathering system information with the SUNAME command: \n\n"
www.TopSage.com
subprocess._init
hew
subprocess.mswindows
subprocess.list2cmdline
subprocess.fcntl
subprocess.errno
subprocess.check_call
subprocess.call
Python简介丨21
---
## Page 36
subprocess.call，以及subprocess.call的功能描述。
查看文档时，
查询。
正确使用这些属性的十分有用的帮助信息。记往，也可以使用Python标准库文档来完成
该属性的文档也会被打印出来。如果在标准库中使用该方法查询更多的属性，你会找到
法。在IPython中，在一个属性之后输入问号，就会找到该属性的相关信息，而且包含
如果希望查询模块中的其他属性，也可以使用与上例中查询subprocess.call类似的方
下某个工具如何使用，也可以直接简单地输入：。
上例中，在属性的后面使用问号来调用manpage手册页查询相关信息。如果想查询UNIX
subprocess.call。现在如果想查看更多如何使用subprocess.call的信息，输人如下内容：
接下来按Tab键使用其自动完成功能来查看可用属性。在示例中的第三列出现了
然后输人：
如果需要执行相同的命令，只需要输入：
man name_of_tool
In [13]: subprocess.call?
subprocess.
Docstring:
Definition: subprocess.call(*popenargs, **kwargs)
File:
Base Class:
Type:
import subprocess
Namespace:
subprocess._
第1章
The arguments are the' same as for the Popen constructor. Example:
return the returncode attribute.
subprocess.py
“Docstring”是正式的官方词汇，我们通过示例演示了如何查询
/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/
class
Interactive
function
"-1"])
subprocess._demo_windows
subprocess._demo_posix
subprocess._cleanup
subprocess._str_
subprocess.types
subprocess.traceback
subprocess.sys
subprocess.select
subprocess.pickle
subprocess.os
---
## Page 37
符下，交互地输人下面的内容：
须再创建一个Python脚本文件，当然如果你愿意的话，也可以创建一个。在IPython提示
让我们看看在Python和Bash中都是如何处理的。如果还有一个打开的IPython shell，则无
进，一个tab可以缩进4个空格。
麻烦，仔细查看一下这些代码是否正确地缩进了。最普通的经验就是使用tab来实现缩
识到这对于提高代码的可读性多么有帮助。如果在使用这些交互式示例程序过程中遇到
初学者，这可能会造成一点点混乱，但过不了很久，你就会熟悉这种写法，而且还会意
用括号将函数代码包括起来。在Python中，必须在括号内缩进你的代码。如果你是一个
过统一的缩进格式来维护的。在其他的语言中，例如Bash，当定义了一个函数，需要使
现在我们需要进一步讨论一下空格（whitespace）的问题。在Python中，嵌套代码是通
在适合的时间被调用执行。
脚本。最后你可以在脚本中编写多个函数，每个函数包含一组代码，那么这组代码就会
两行命令的Bash脚本有点相似。Bash脚本与函数的不同之处在于，你可以包含许多函数
该函数，并且在被调用时，代码块中的所有代码是被一起调用的。这与我们写的封装了
么可把函数想象成一个小脚本。函数允许创建一个代码块，代码块中的每一行代码属于
动执行这些代码，就需要创建函数。如果你对Bash或其他语言中的函数还不太了解，那
意味着可以让一些以前必须手工完成的事情变得可以自动完成。进一步来讲，如果要自
在前面一节中，我们学会了一条接一条地连续执行多个命令，这一点非常有用，因为这
在Python中使用函数
一系列连续的命令组织到函数中。
如何查询不熟悉的模块或属性的文档，从而获得帮助。在下面一节中，你将看到如何将
一个简单的Python脚本，如何将Bash脚本翻译成Python脚本并执行它，最后，你知道了
现在你已经掌握了足够的知识，可以称自己是一名Python程序员了。你知道了如何编写
小结
..: pyfunc()
In [4]: for i in range(5):
Helio function
In [3]: pyfunc()
Out[2]: 
In [1]: def pyfunc():
.：
..：
www.TopSage.com
Python简介
X
23