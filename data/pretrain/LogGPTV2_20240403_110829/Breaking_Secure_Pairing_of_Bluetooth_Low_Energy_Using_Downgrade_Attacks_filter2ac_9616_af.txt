(cid:39)
(cid:41)
(cid:38)
(cid:19)(cid:17)(cid:25)
(cid:19)(cid:17)(cid:23)
(cid:19)(cid:17)(cid:21)
(cid:19)
(cid:19)
(cid:21)(cid:19)
(cid:23)(cid:19)
(cid:25)(cid:19)
(cid:27)(cid:19)
(cid:20)(cid:19)(cid:19)
Maximal attack distance(cid:3)(cid:11)(cid:80)(cid:72)(cid:87)(cid:72)(cid:85)(cid:86)(cid:12)
e
t
a
r
s
s
e
c
c
u
S
80%
70%
60%
50%
40%
30%
20%
10%
0%
(cid:20)(cid:21)(cid:19)(cid:19)
(cid:20)(cid:19)(cid:19)(cid:19)
)
s
u
(
e
m
Ti
(cid:27)(cid:19)(cid:19)
(cid:25)(cid:19)(cid:19)
(cid:23)(cid:19)(cid:19)
(cid:21)(cid:19)(cid:19)
(cid:27)(cid:28)(cid:21)(cid:17)(cid:24)
(cid:26)(cid:22)(cid:20)(cid:17)(cid:20)
(cid:24)(cid:24)(cid:19)(cid:17)(cid:25)
(cid:20)(cid:19)
(cid:21)(cid:19)
(cid:49)(cid:88)(cid:80)(cid:69)(cid:72)(cid:85)(cid:3)(cid:82)(cid:73)(cid:3)(cid:36)(cid:83)(cid:83)(cid:86)
(cid:22)(cid:19)
20
10
1
50
Advertising frequency (HZ) 
30
40
Figure 6: Maximal attack distance
against mobiles and devices
Figure 7: Success rate v.s. Advertising
frequency
Figure 8: Defense performance
6.4 Countermeasure Evaluation
We have implemented our proposed defenses on a Google
Pixel 2 mobile through the AOSP. We launched all our
attacks and conﬁrmed that they failed under the patched
Android system. For example,
in the case of the BLE
keyboard, when Numerical Comparison is enforced, the user
ﬁnds that the two numbers displayed on the victim mobile
and keyboard (emulated by a CC2640) are different when
the MITM attack is deployed. The user should reject the
pairing and investigate the possibility of attacks.
We also evaluated the performance of our secure pairing,
i.e., the overhead caused by the query of the conﬁguration
ﬁle scm.conf for a speciﬁc app’s metadata such as the spec-
iﬁed association method. We tested three cases: 10, 20 and
30 BLE apps using our defense mechanisms on the security
enhanced Android mobile. The app of interest is always set
as the last one in scm.conf. That is, we consider the worst
case of time needed to ﬁnd the metadata of the app of in-
terest. We run the test for each case 10 times and derive
the average time. Figure 8 shows the average delay is from
550.6μs to 892.5μs and is feasible for typical use of BLE
apps in a mobile [20].
7 Flaws and Attacks in Other OSes
While we have demonstrated the ﬂaws and attacks in
Android systems, we also discover that these issues also
exist in other major OSes including iOS, macOS, Windows,
and Linux. This gives more evidence that no SCO mode at
initiators is not an implementation issue but rather a BLE
speciﬁcation ﬂaw. We argue all operating systems shall
provide an option of enforcing the SCO mode in a similar
way to the programming framework we have proposed for
Android. In this section, we present the detailed discovery
with these OSes.
In particular, Table 7 compares the design ﬂaws and at-
tacks against different OSes of latest releases and peer de-
vices. Unless explicitly stated otherwise, we use the same
threat model in §4.1: Before the attack, the initiators and
their peer devices are paired using secure association meth-
ods. The attacker does not have physical access to either
the initiator or responder. We summarize the differences be-
tween OSes regarding the four design ﬂaws and attacks as
follows: (i) A speciﬁc OS may not have all the four ﬂaws.
(ii) Some OSes such as Android may know the adopted as-
sociation method after pairing, while others such as iOS does
not know it at all. (iii) An OS may not have Flaw 3, but al-
lows an app to handle errors. However, given that all OSes
have Flaws 1 and 2, the app handles the errors in various vul-
nerable ways. (iv) Personal computer operating systems such
as macOS, Windows and Linux do not use IRK by default as
initiators, while a Linux device may programmatically adopt
IRK [21]. Without the protection from IRK, an attacker may
sniff a BLE connection, obtain the MAC address of a ma-
cOS/Windows/Linux device, and deploy attacks against peer
devices as introduced in §4.4.2.
7.1
iOS and macOS
According to design guidelines for Apple devices [22]
and our experiments, iOS and macOS use the same SDK
Core-Bluetooth [23] to handle BLE communication. Core-
Bluetooth does not provide functions for BLE pairing al-
though a function IOBluetoothDevicePair.start() is
provided by the programming framework IOBluetooth for
Bluetooth Classic on macOS [24]. In iOS and macOS, when
an initiator tries to access an attribute that requires pairing at
a peer device, the peer device sends error codes to the ini-
tiator, which then starts pairing exclusively through its BLE
stack in the kernel. Therefore, Apple devices have four sim-
ilar design ﬂaws to Android: (i) Flaw 1. Apple devices can
not specify a secure association method. (ii) Flaw 2. There
is no mechanism to enforce a speciﬁed association method
or for an app to obtain the negotiated association method.
(iii) Flaw 3. There is no mechanism for an app to handle
errors while the BLE stack mishandles pairing errors. An
Apple app can learn whether Insufﬁcient Authentication/En-
cryption errors occur by checking the CBATTError object,
and the Pin or Key Missing error is not deﬁned by the Apple
programming framework. (iv) Flaw 4. There is no public
50    29th USENIX Security Symposium
USENIX Association
OS
Android
iOS
macOS
Windows
Linux
Programming framework ﬂaws
Flaw 1
Flaw 2
Flaw 3
Flaw 4
Attack I
Attack against the Initiator
Attack II
Attack III
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)


(cid:2)
(cid:2)
(cid:2)


Flaw 3
Flaw 3
Flaw 3
Flaw 3
Flaw 3
Flaw 3
Flaw 1,2
Flaw 1,2


Flaws1,2,3
Flaws 1,2,3
No IRK
No IRK
Flaws 1,2
Attack IV
Flaws 1,2,3,4
Flaws 1,2,3,4
Flaws 1,2,3,4


Attack V
Flaws 3




Attack against the peer device
Attack VI
Attack VII
Attack VIII
Flaws 1,2,3
Flaws 1,2,3
Flaws 1,2,3
Flaws 1,2,3
Flaws 1,2,3
Flaws 1,2,3
These attacks can be deployed
without stealing IRK;
These attacks can be deployed
without stealing IRK;
Flaws 1,2
Flaws 1,2
Flaws 1,2
Table 7: Flaws and downgrade attacks across OSes with the assumption of no physical access to both initiators and peer devices.
means the app may know the adopted association method after pairing. ∗ means the attack fails when the peer device enforces
the SCO mode; (cid:2) means yes,  means no, and their speciﬁc meaning should be clear in the context.
API for Apple devices to remove a bond or initiate a new
pairing process even when errors occur.
Next, we discuss attacks against Apple devices as initia-
tors of BLE communication.
(i) The false data injection
and spooﬁng attack for sensitive information are the same
against iOS and macOS. When the “Pin or Key Missing
(0x06)” error occurs, iOS and macOS do not notify the
app, and will communicate with its peer device in plaintext.
(ii) The downgrade attack stealing the IRK and MAC ad-
dress works against iOS devices as follows. We ﬁnd that
an iOS device does not respond to the “ Insufficient
Authentication (0x05)” error, but initiates pairing if its
peer device sends a security request and the “Insufficient
Encryption (0x0f)” error code. Therefore, a fake device
can utilize the 0x0f error, pair with the victim iOS device us-
ing Just Works and steal its IRK and Mac address. Since
macOS does not use IRK, an attacker can just sniff BLE
communication to obtain the MAC address and spoof the ini-
tiator. (iii) The DoS attack can be deployed with no change
on iOS and macOS because Apple devices can not resolve
the issue of inconsistent LTK.
We now present attacks against the peer BLE device of an
Apple device. Without physical access to the peer device of
an iOS device, the attacker may use the whitelist bypass at-
tack and deploy the data manipulation attack as introduced in
§4.4.2). However, the passive eavesdropping attack does not
work against iOS devices for the following reason. When a
victim BLE device reconnects to an iOS device, the iOS de-
vice encrypts the connection rather than communicates with
the peer device in plaintext as an Android device does. For
macOS devices, since IRK is not used, the initiator can be
easily spoofed and the spooﬁng device can then deploy all
the attacks except passive eavesdropping.
7.2 Windows
Windows 10’s SDK supports the Universal Windows Plat-
form (UWP) [25], which provides a common platform for
various devices, including laptops, desktops, and embed-
ded devices including BLE devices. With UWP, the same
source code can be compiled to run on different platforms.
We ﬁnd Windows 10 has the following ﬂaws: (i) Flaw 1.
UWP provide a function PairAsync(ProtectionLevel),
(ii) Flaw 2.
which has a parameter ProtectionLevel specifying
the minimal protection level of a pairing process,
in-
cluding None (Plaintext), Encryption (Just Works),
or EncryptionAndAuthentication (Secure association
methods). However, according to our experiments on lat-
est Windows 10, whatever the protection level is, Win-
dows 10 always determines the association method based
on the I/O capabilities of the peer device. The param-
eter ProtectionLevel does not work on personal com-
puter Windows OS while it may be designed for par-
ticular embedded devices with a BLE stack supporting
ProtectionLevel.
It can be observed
from Flaw 1 that personal computer Windows OS can-
not enforce secure pairing.
There is also no mecha-
nism for an application to obtain the negotiated asso-
ciation method.
returns an instance
of DevicePairingResult. DevicePairingResult has a
member variable ProtectionLevelUsed, which shall re-
turn the pairing protection level.
In our experiments,
ProtectionLevelUsed is always set to None, no matter
what association method is adopted.
(iii) Windows does
not have Flaw 3. When errors occur, Windows always tears
down the connection and returns the error codes to the ap-
plication through an instance of ProtocolError. The ap-
plication can determine how to process the errors on its
own.(iv) Windows has the function UnpairAsync() to re-
move a bond and does not have Flaw 4.
PairAsync(.)
We now discuss possible attacks against a Windows 10
device as an initiator. Recall that to deploy attacks, a fake
device shall spoof a victim device and connect to the victim
initiator. Errors will occur as discussed in §3.2. Windows
is different from Android. It tears down the connection and
reports the error to the application. The application has two
options: (i) removes the bond and initiates re-pairing with
the fake device; (ii) does not respond to the error and stops
working, i.e. halting. Since Windows can not enforce secure
pairing, if the application chooses option (i), the communica-
tion is subject to false data injection and spooﬁng attack for
sensitive information. If the application chooses option (ii),
the communication is vulnerable to the DoS attack for the
following reasons. First, since IRK is not used by Windows,
an attacker can obtain the MAC address by snifﬁng and then
USENIX Association
29th USENIX Security Symposium    51
spoof the initiator. The fake initiator pairs with the victim
device and changes its LTK if the victim device does not en-
force the SCO mode. Now the two LTKs on the victim ini-
tiator and victim device are different. The victim Windows
initiator cannot pair with the victim device any more. Sec-
ond, the LTK of the victim device can be lost due to device
reset and the user will not be able to use the device because
of the inconsistent LTK issue. Once the communication is
stuck for the two reasons above, intuitively a user wants to
continue his/her work, may manually remove the bonded de-
vice and initiate pairing again to move forward. The result