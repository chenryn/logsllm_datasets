language syntax and semantics are detailed in [10]. 
start 
P
act
d
d
Act
ae/r 
act
ae/r 
ae/r 
Del
start 
N
d
d
D
deact 
d
R
ae/r 
ae/r 
Legend: 
ae     : Change in attributes expressions 
r       : Change in authorization rules set 
act    : Role activation by a user 
deact: Role deactivation by a user 
Figure 3: User's State Diagram with Sessions 
3.3  Seniority Among Authorization Rules. 
Seniority can be determined among the rules based on 
attributes  expressions  on  their  left  hand  sides.  The  “≥”
symbol,  read  “is  senior  to”,  represents  seniority  relation 
among rules:  
rulei ≥ rulej ↔ (aei (cid:314) aej)
where  aei  and  aej  are  the  LHS  of  rulei and  rulej
respectively. This implies that users who satisfy rulei also 
satisfy  rulej  and,  hence,  are  authorized  to  the  roles 
produced  by  rulej.  The  seniority  relation  on  authorization 
rules,  i.e.  among  attributes  expressions  forming  the  LHS 
of the rules, induces a hierarchy among the roles  forming 
the RHS of these rules. This induced role hierarchy (IRH) 
captures inheritance of user-role assignment. If ri is senior 
to  rj  then  the  users  who  satisfy  the  LHS  of  the  rule  that 
yields ri will also satisfy the rules that yield rj. As a result, 
the  set  of  ri  users  is  a  subset  of  rj  users.  In  other  words, 
user  inheritance  flows  downwards  in  the  IRH  graph,  that 
is, a junior role in IRH inherits all the users assigned to its 
seniors.  In general IRH is a quasi-order, i.e., it is reflexive 
and transitive.   
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
3
3.4 Alternative Ways to Gain Authorization.  
4.2 Motivation. 
There are three approaches to assign roles to users: 
1. Implicit Assignment: Based on certain criteria, users are 
automatically  assigned  to  roles.  This  is  what  Model  A 
does thus far.  
2. Hybrid  Assignment:  Besides  the  automatic  assignment, 
the SSO can manually assign users to roles. 
3. Explicit  Assignment:  In  this  approach  a  person  with 
proper authority such as the SSO manually assigns users 
to roles. This is what traditional RBAC follows. 
In  [16]  Al-Kahtani  argues  that  there  are  situations 
where  pure  implicit  assignment  is  not  flexible  enough. 
Thus,  to  provide  flexibility,  the  concept  of  can_assume
was introduced. The SSO may use can_assume relation to 
explicitly authorize users who are authorized to a role, say 
rg, to another role, rh, for a certain duration d starting at a 
specific  time  t.  The  SSO  specifies  the  duration  and  the 
starting time. As a result, the user(s) in role rg is authorized 
to  activate  role  rh  at  time  t  for  duration  of  d.  The 
motivation  and  specification  of  can_assume  relation  is 
detailed  in  [16].  Appendix  A  provides  a  summary  of 
relevant definitions extracted from RB-RBAC model.  
4. RB-RBAC-ve Model. 
4.1 Introduction.   
to  allow 
RB-RBAC-ve  extends  Model  A 
the 
specification of negative authorization (called Model B1 in 
[16]). This extension has an impact on user authorization, 
formally  represented  by  URAuth  set  and  it  may  cause 
conflict  among  rules.  RB-RBAC-ve  is  the  first  RBAC 
model  that  provides  detailed  analysis  of  different  aspects 
of  negative  authorization  in  an  RBAC  context.  In  this 
section, we analyze this conflict and present several novel 
conflict  resolution  polices.  The  definition  of  URAuth  is 
modified  to  accommodate  the  semantics  of  negative 
authorization. The new definition takes into consideration 
conflict  resolution  policies  in  effect.  We  also  discuss  the 
impact  of  negative  authorization  on  URAuth,  IRH,  and 
RB-RBAC enforcement architecture. 
To specify a negative authorization  we use the ASLB1
language  which imports  the  syntactic  constructs  of  ASLA
(Appendix  B)  but  it  modifies  the  syntax  of  Roles  as 
follows [16]:  
Roles ::= [(cid:329)] Role  
role-set ::= Role | Role||,||role-set 
The 
syntax  above  allows 
specifying  negative 
authorization on roles such as the following: 
aek (cid:159) ¬ ri
The  rule  above  states  that  once  a  user  satisfies  aek  the 
system  that  implements  RB-RBAC  prohibits  that  user 
from assuming ri.
time.  Negative  authorization  helps 
The motivations to use negative authorization are not 
immediately  apparent  in  environments  where  RBAC  is 
applied.  Even  though  user-role  assignment  could  be 
decentralized  [17],  it  is  not  left  to  users’  discretion  to 
assign  other  users  to  roles.  Instead  a  small  number  of 
individuals  (e.g.  SSOs)  are  entrusted  with  applying  the 
enterprise  security  policy  regarding  user-role  assignment. 
However,  since  RB-RBAC  automates 
this  process, 
negative authorization provides an extra safeguard, since it 
is not always easy  to foresee all possible combinations of 
roles  a  user  can  assume  based  on  his  attributes,  which 
change  over 
in 
blocking  any  user  whosoever  satisfies  certain  criteria 
(expressed as attributes expression) from assuming certain 
roles. Also, it can be used to block receiving authorization 
of  certain  roles  via  can_assume  and  can_delegate 
relations.  The  SSO  can  use  can_assume  relation  to 
explicitly authorize users who are authorized to a role, say 
rg, to another role, rh, for a certain duration d starting at a 
specific  time  t.  As  a  result,  the  user(s)  in  role  rg  is 
authorized  to  activate  role  rh  at  time  t  for  duration  of  d.
Also,  he  may  use  can_delegate  relation  to  permit  regular 
users  to  delegate  their  memberships  in  specific  roles  to 
other users. To motivate the use of negative authorization 
in  the  context  of  RBAC,  consider  the  example  of  a 
military unit that has a Commander and four staff officers, 
usually known as G1 through G4 as depicted in Figure 3. 
Commander
G1
G2
G3
G4
Figure 4 : RBAC Hierarchy for a Battalion 
The  commander  can  delegate  his  authority  to  any  of 
his  staff  officers  as  long  as  the  staff  officer  meets  certain 
criteria specified by the military regulations.  
Table 1 
Attributes in the System: 
a1: rank-type = officer 
a2: Staff course = T 
a3:  Leadership  course = T 
a4:  Rank (cid:149) Lt. Colonel 
a5: Assignment Order = T
Authorization Rules: 
∧ a2 (cid:159) {G1, G2, G3, G4}
a1
∧ a2
a1
¬a4 (cid:159) ¬Commander
can_delegate(Commander,  G1, d, t)
∧ a5 (cid:159) Commander
∧ a3
∧a4
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
4
In  Table  1,  we  show  a  security  policy  that  specifies  a 
possible  real  world  situation.  The  policy  uses  negative 
authorization to prevent a Commander from delegating his 
role  to  a  staff  officer  whose  rank  is  lower  than  a  Lt. 
Colonel. 
4.3 Analysis of RB-RBAC-ve . 
4.3.1 Conflict Due to Negative Authorization.
Introducing  “(cid:329)”  to  the  RHS  may  lead  to  conflict  in 
the state of a single user wrt  a single role. The conflict is 
due  to  simultaneous  positive  and  negative  authorizations. 
In Figure 5, the symbol  “(cid:159)” in a  rule means that attribute 
expression aei produces the roles listed to the right of the 
arrow.  Using  the  set  of  authorization  rules  shown  in  the 
figure, the following are several variations of conflict:   
a. Case  1:  Conflict  among  unrelated  rules  like  the  one 
between  rule2 and  rule3.  If  u  satisfies  rule2 and  rule3
simultaneously then u should be authorized to activate 
r1 (i.e. u is in P state wrt r1) and denied r1 at the same 
time  (i.e.  u is  in  N  state  wrt  r1).  This  case  is 
represented by the following: 
(u, aei) ∈ U_AE ∧ (u, aej) ∈ U_AE ∧ r ∈RHS(aei) ∧
¬r ∈RHS(aej)
Where U_AE is defined such that U_AE = {(u, aei)| (u, 
aei) ∈U×AE ∧  u  satisfies  aei}.  (u,  aei) ∈U_AE  means 
that u is authorized to RHS(aei).
b. Case  2:  Conflict  among  related  rules:  rule3  and  rule5
are  conflicting  because  if  u  satisfies  rule3  then  he  is 
denied  r1 (i.e. u is  in  N  state  wrt r1),  but  at  the  same 
time, authorized to assume r1 (i.e. u is in P state wrt r1)
because rule3 ≥ rule5. This case is represented by  the 
following: 
(u, aei) ∈ U_AE ∧ (u, aej) ∈ U_AE ∧ r
∈RHS(aei) ∧ ¬r ∈RHS(aej)
∧ ((aei
→ aei))
→ aej)∨ (aej
c. Case  3:  Conflict  between  implicit  assignment  i.e.  via 
an  authorization  rule  and  explicit  assignment  i.e.  via 
can_assume  or  can_delegate.  Suppose  that  the  SSO 
issued the following: 
can_assume(r4, r3, t, d)
This allows users who are authorized to r4 to activate 
r3.  If  u satisfies  ae1,  i.e.  u is  in  N  state  wrt r3,  and  at 
the  same  time  is  authorized  to  r4.  Nonetheless,  the 
can_assume  relation  above  authorizes  u to  r3,  which 
leads to a conflict.     
rule1:
RHS = ¬r3, r4
rule2:
RHS = r1
rule3:
rule4:
RHS = ¬r1, r2
RHS = r2
rule5:
RHS = r1
rule1:  ae1 (cid:159) ¬r3, r4
rule2: (ae2) (cid:159) r1
rule3: (ae3) (cid:159) ¬r1, r2
rule4: (ae4) (cid:159) r2
rule5: (ae5) (cid:159) r1
such that: 
rule1 ≥ rule2,
rule1 ≥ rule3≥ rule5,
rule1 ≥ rule4≥ rule5
Figure 5 
4.3.2  Conflict  Resolution  Policies.  Conflict  resolution 
policies  have  been  discussed  extensively  in  the  literature, 
see  for  example,  [13,  15  and  12].  Most  notable  among 
them are:  
a. Denial 
(DTP):  Negative 
authorizations are always adopted when conflict exists.  
(PTP):  Positive 
b. Permission  Takes 
Precedence 
Takes 
Precedence 
authorizations are always adopted when conflict exists. 
These  two  policies  in  their  original  form  suffer  the 
following deficiencies: 
a. They are very rigid in the sense that they do not allow 
specification  of  special  cases  that  violate  the  policy 
enforced. Suppose a hospital has a policy that has the 
following authorization rules: 
rule1: No. of years in residency ≤ 1 (cid:159) intern  
rule2: No. of years in residency ≤ 1 (cid:159) ¬ ER_doctor  
Naturally,  during  the  holiday  seasons  large  numbers 
of  the  medical  staff  take  their  yearly  vacation. 
However, this period of the year witnesses a surge in 
the  number  of  people  admitted  to  the  emergency 
room.  Clearly,  additional  medical  staff  is  needed  to 
handle  this  surge  in  demand  of  medical  care.  The 
administration  may  allow  interns  to  work  in  the  ER, 
and hence authorizes them to role ER-doctor. 
One  way  to  handle  this  is  to  change  the  hospital 
policy  by  deleting  rule2.  This  course  of  action  is  not 
preferred because it might lead to unseen side effects. 
Also, it might lead to a breach in the security policy if 
the SSO forgets to add it back after the holiday season 
is  over.  A  better  solution  is  to  use  can_assume
relation as follows: 
can_assume(intern, ER_doctor, t, d)
This authorizes interns to activate the role ER_doctor, 
i.e.  to  work  in  the  emergency  room.  can_assume 
conflicts with rule2. However, if DTP is enforced, the 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
5
interns will not be able to work in the ER unless rule2
is deleted. What is needed in this situation is a relaxed 
version  of  DTP  that  allows  the  stating  of  this 
exception in the security policy. 
b. DTP with negative authorization is useful in a closed 
policy  environment.  However,  PTP  renders  negative 
authorization meaningless in such environments. This 
is  so  because  wrt  any  role  that  is  associated  with 
negative authorization, there could be only one of the 
following possibilities: 
i. Conflict  may  arise:  Since  PTP  is  enforced,  the 
negative authorization is ignored. 
ii. No  conflict  may  arise:  There  is  no  need  for  the 
negative  authorization  since  we  are  assuming  a 
closed policy. 
Based on that, we argue that there is a need for more 
flexible conflict resolution policies. The following section 