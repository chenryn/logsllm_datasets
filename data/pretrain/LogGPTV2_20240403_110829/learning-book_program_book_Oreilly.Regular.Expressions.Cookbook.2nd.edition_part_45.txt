now and then, new countries join the European Union, and member countries change
their rules for VAT numbers. Unfortunately, JavaScript does not support free-spacing.
In this case, you're stuck putting everything on one line:
((AT)?U[0-9]{8}|(BE)?0[0-9]{9}|(BG)？[0-9]{9,10}|(CY)？[0-9]{8}L|
(CZ)?[0-9]{8,10}1(DE)?[0-9]{9}1(0K)?[0-9]{8}1(EE)?[0-9]{9}|
(EL|GR)?[0-9]{9}|(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]|(FI)?[0-9]{8}∣ +
(FR)?[0-9A-Z]{2}[0-9]{9}|(GB)?([0-9]{9}([0-9]{3})|[A-Z]{2}[0-9]{3})∣
(HU)?[0-9]{8}1(IE)?[0-9]S[0-9]{5}L|(IT)[0-9]{11}|
(LT)?([0-9]{9}|[0-9]{12})1(LU)?[0-9]{8}1(LV)[0-9]{11}1(MT)[0-9]{8}|
(NL)?[0-9]{9}B[0-9]{2}1(PL)?[0-9]{10}1(PT)?[0-9]{9}I(R0)？[0-9]{2,10}| 
(SE)?[0-9]{12}|(SI)?[0-9]{8}|(SK)?[0-9]{10})$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Follow Recipe 3.6 to add this regular expression to your order form.
Discussion
Strip whitespace and punctuation
To make VAT numbers easier to read for humans, people often type them in with extra
enter his VAT number DE123456789 as DE 123 -456. 789.
punctuation to split the digits into groups. For instance, a German customer might
A single regular expression that matches VAT numbers from 27 countries in any pos-
sible notation is an impossible job. Since the punctuation is only for readability, it is
much easier to first strip all the punctuation, then validate the resulting bare VAT
number.
The regular expression [- *] matches a character that is a hyphen, dot, or space.
Replacing all matches of this regular expression with nothing effectively deletes the
punctuation characters commonly used in VAT numbers.
4.21 European VAT Numbers | 325
---
## Page 342
VAT numbers consist only of letters and digits. Instead of using
. The same is true in Python when the UNIcoDE or
U flag is not set. This prevents \b) from being useful for a *whole word only” search
within text that contains accented letters or words that use non-Latin scriprs. For ex-
ample, in JavaScript, PCRE, and Ruby, \biber\b willfind a match within dariber, but
m pom no a jo soddoex aussss sou un ep u ou
The problem occurs because i is considered a nonword character, and a word boundary
is therefore found between the rwo characters ru. No word boundary is found between
a space character and u, because they create a contiguous sequence of nonword
characters.
You can deal with this problem by using lookahead and lookbehind (collectively, look-
around—see Recipe 2.16) instead of word boundaries. Like word boundaries, look
arounds match zero-width positions. In PCRE (when compiled with UTF-8 support)
and Ruby 1.9, you can emulate Unicode-based word boundaries using, for example,
(?. This regular expression also uses Uni-
code Letter and Mark category tokens (p(L) and ^p{M}), which are discussed in
Recipe 2.7. If you want the lookarounds to also treat any Unicode decimal numbers
and connector punctuation (underscore and similar) as word characters, like ^b> does
in regex flavors that correctly support Unicode, replace the rwo instances of [^^p{L}
p{M)} ]) with <[^\p(L}\p{M)\p{(Nd}\p{Pc}].
JavaScript and Ruby 1.8 support neither lookbehind nor Unicode categories. You can
work around the lack of lookbehind supporr by matching the nonword character pre-
ceding each match, and then either removing it from each match using procedural code
or putting it back into the string when replacing matches (see the examples of using
parts of a match in a replacement string in Recipe 3.15). The additional lack of support
for matching Unicode categories (coupled with the fact that both programming lan-
guages’\w and \W) tokens consider only ASCII word characters) means you might
need to make do with a more restrictive solution. Code points in the Letter and Mark
categories are scattered throughout Unicode's character set, soit would take thousands
of characters to emulate [ ^^p{L}p{M} ] using Unicode escape sequences and character
332 | Chapter 5: Words, Lines, and Special Characters
---
## Page 349
class ranges. A good compromise might be <[^A-Za-z\xAA\xB5^xBA\,xCo-\xD6\xD8-
xF6\xF8-\xFF], which matches all except Unicode letter characters in eight-bit ad-
dress space (i.e., the first 256 Unicode code points, from positions 0x00 to OxFF). There
are no code points in the Mark category within this range. See Figure 5-1 for the list of
nonmatched characters. This negated character class lets you exclude (orin nonnegated
form, match) some of the most commonly used, accented characters.
123456789ABCDEF
4
A
B
D
E
G
H
I
KLRNO
5
Q
R
S
T
U
A
X
Y
Z