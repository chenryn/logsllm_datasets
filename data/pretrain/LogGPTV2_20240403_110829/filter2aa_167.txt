Bypass AMSI的前世今生(1) - AMSI前置知识
0x00 前言
《Bypass AMSI的前世今生》是 [公鸡队之家] 知识星球的第一个专项技术分享。之所以选择这个主题作
为第一个主题，是因为AMSI是微软用来对抗无文件攻击而开发的安全模块，是当前攻防对抗前沿的技术
之一。从15年AMSI出现，越来越多的杀软厂商接入了AMSI接口，当前市面上主流杀软均接入此接口。
这给当时以powershell为主的红队工具致命打击。因此随后红队人员针对Bypass AMSI的研究从未停
止。从开始的script混淆到现在的内存补丁，详细的技术演变如下：
[BA1] 降级PowerShell版本到2.0（依赖于.Net 3.0，Windows 10 默认不预装）
[BA2] 混淆攻击脚本
[BA3] 使用一行命令关闭AMSI（针对这一行命令本身使用混淆绕过对抗AMSI检测）
[BA4] 设置注册表“HKCU\Software\Microsoft\Windows Script\Settings\AmsiEnable”设置为 0，
以禁用 AMSI
[BA5] 卸载当前进程中的amsi.dll
[BA6] PowerShell.exe同目录下放入傀儡amsi.dll劫持正常amsi.dll（正常amsi.dll存在于
c:\windows\system32\amsi.dll）
[BA7] Null字符绕过
[BA8] COM Server劫持（劫持杀软接入接口）
[BA9] 内存补丁技术
以上技术从不同角度，在AMSI调用流程的不同环节上实施。针对以上对抗技术为了后文方便引用，使用 
[BA1-9]的编号方式，进行编号。攻防相生，在对抗的过程中，微软也对其中一些技术进行了缓解和修
补，例如：
Windows 10 1709以后，如果AMSI提供程序依赖于同目录下其他DLL同时加载，将不能工作。
Windows 10 1903以后，AMSI提供商DLL没有Authenticode-signed，可能将不能加载。这个取决
于注册表：Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\AMSI\FeatureBits的值，
默认0x01,签名检测被禁止。也就是说微软增加了这个功能但没有默认开启
提醒杀软监控注册表“HKCU\Software\Microsoft\Windows Script\Settings\AmsiEnable”的值
总体来说，由于AMSI仅仅是一个连接应用程序和杀软程序的通道，微软主要还是在defender上做各种
对抗，针对通道本身的加固较少。
当然除了对抗以外，红队工具也寻找了另外一条出路就是.Net，使用C#开发的红队工具随之兴起。在攻
防博弈中，直接对抗往往不是性价比最高的方向，错位对抗才是能够保持红队技术具有一定领先性最好
的办法。
随着以.NET(C#)为基础的攻击技术的逐渐成熟，AMSI在.NET 4.8引入了针对Assembly导入的内存扫描，
同时针对WMI的扫描也被加入到了AMSI当中。
[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('a
msiInitFailed','NonPubilc,Static').SetValue($null,$true)
No. 1 / 5
0x01 什么是AMSI
AMSI全称（Antimalware Scan Interface），反恶意软件扫描接口，他的本体是一个DLL文件，存在于
c:\windows\system32\amsi.dll。它提供了通用的标准接口（COM接口、Win32 API）。这些接口中
Win32 API是为正常应用程序提供的，方便正常程序调用这些API针对用户输入做扫描。其中的COM接
口，是为杀软供应商提供的，方便杀软厂商接入自身针对恶意软件的识别能力。官方的架构图很清晰的
表明了AMSI的作用，如图所示：
WIN32 API 如下（根据查询amsi.dll记录）：
AmsiCloseSession
AmsiInitialize
AmsiOpenSession
AmsiScanBuffer
AmsiScanString
AmsiUacInitialize
AmsiUacScan
AmsiUacUninitialize
AmsiUninitialize
和官方文档中给的API有点出入的是关于UAC相关的扫描，具有单独的接口。我们重点关注的也就是
AmsiScanBuffer、AmsiScanString、AmsiUacScan这3个函数。
No. 2 / 5
COM 接口如下（省略部分接口）：
IAmsiStream
IAntimalware
IAntimalwareProvider
0x03 AMSI在Windows中的整合情况
AMSI在windows系统中被直接或间接的调用，主要分布在以下程序，弄清楚AMSI的调用清楚，才能针
对性的做bypass操作，同时也有利于Opsec的规避策略。
用户账户控制，也就是UAC（EXE、COM、MSI、ActiveX的安装）
%windir%\System32\consent.exe
Powershell（脚本、交互式使用、动态代码求值）
System.Management.Automation.dll
Windows脚本宿主
wscript.exe
cscript.exe
JavaScript、VBScript
%windir%\System32\jscript.dll
%windir%\System32\vbscript.dll
Office VBA macros
VBE7.dll
.NET Assembly
clr.dll
WMI
No. 3 / 5
%windir%\System32\wbem\fastprox.dll
以上数据利用specterops提供的方法，查询：
0x04 总结
这是《Bypass AMSI的前世今生》系列的第一篇，主要了解Bypass AMSI的历史、AMSI的发展，以及
AMSI的整体架构和AMSI在windows中的集成情况。接下来我会把[BA1-4]合成一篇、[BA5-8]合成一
篇、[BA9]单独成篇、AMSI针对.Net和WMI的均单独成篇。因此本系列暂定6篇：
AMSI前置知识
[BA1-4]合成一篇（标题待定）
[BA5-8]合成一篇（标题待定）
[BA9]单独成篇（标题待定）
AMSI在.NET中的对抗
AMSI在WMI中的对抗
$UserPEs = Get-CimInstance -ClassName CIM_DataFile -Filter 'Drive = "C:" and 
(Extension = "exe" or Extension = "dll")' -Property 'Name' | Select -
ExpandProperty Name
$AMSIReferences1 = $UserPEs | % { Select-String -Encoding ascii -LiteralPath $_ -
Pattern 'amsi\.dll' }
$AMSIReferences2 = $UserPEs | % { Select-String -Encoding unicode -LiteralPath $_ 
-Pattern 'amsi\.dll' }
$AMSIReferences1.Path
$AMSIReferences2.Path
No. 4 / 5
No. 5 / 5