(Ljava/lang/String;)Ljava/lang/String;
      11: areturn
case Opcodes.DUP:
  push(get(0));
  break;
之后INVOKESPECIAL会触发 visitMethodInsn ，当然⾁眼可知实例化C的时候与我们⽆关
没啥好康的，之后又是 aload_1 去触发visitVarInsn的过程，这⾥逻辑类似我们第⼀步讲的那
样没啥好说的呗，之后又是 invokevirtual 触发 visitMethodInsn 的调⽤也就是 new 
C().method3() 中调⽤⽅法3的过程，虽然结合注释也是能看懂的这⾥也简单说说
⾸先获取method参数类型，由于是⾮静态⽅法会进⼊if条件
之后构造了污染参数集合，for循环当中根据参数类型⼤⼩，从栈底获取⼊参，参数⼊栈是从
右到左的
由于不是构造函数，会新建⼀个HashSet⽤于保存污染参数的返回值
之后判断是否和同⼀⽅法体内的其它⽅法返回值关联，有关联则添加到栈底，等待执⾏return
时保存
⾄此我们也得到了我们可以污染B.method2，控制返回值
之后A.method1同C.method3就不再重复，最后分析的是main⽅法的⼊参args是否会污染到其返
回值，也其实差不多，没必要再浪费笔墨了，看看下⾯反汇编代码即可，有兴趣可以⾃⼰更
⼊具体过程看看
⾄此我们得到了如下的结果
    Code:
       0: new           #2                  // class yyds/A
       3: dup
       4: invokespecial #3                  // Method yyds/A."":()V
       7: aload_1
       8: invokevirtual #4                  // Method yyds/A.method1:
(Ljava/lang/String;)Ljava/lang/String;
      11: astore_2
      12: new           #5                  // class yyds/B
      15: dup
      16: invokespecial #6                  // Method yyds/B."":()V
      19: aload_2
      20: invokevirtual #7                  // Method yyds/B.method2:
(Ljava/lang/String;)Ljava/lang/String;
      23: areturn
CallGraphDiscovery
这个类主要是为了检查⼦⽅法的参数是否可以被⽗⽅法的参数所影响
也是从创宇当中的例⼦开始
其中如果没有⽣成passthrough数据流操作，就⽆法判断childMethod1的返回值是否会受到参数
arg的影响，也就⽆法继续判断parentMethod的arg参数与⼦⽅法MyObject.childmethod的参数传
递关系
也是先看原作者的例⼦以及创宇的师傅的原⽂帮助理解
yyds/C  method3 (Ljava/lang/String;)Ljava/lang/String;  1,
yyds/B  method2 (Ljava/lang/String;)Ljava/lang/String;  1,
yyds/A  method1 (Ljava/lang/String;)Ljava/lang/String;  1,
yyds/Main main  (Ljava/lang/String;)Ljava/lang/String;  1,
private MyObject obj;
public void parentMethod(Object arg){
  ...
    TestObject obj1 = new TestObject();
  Object obj2 = obj1.childMethod1(arg);
  this.obj.childMethod(obj2); 
  ...
}
AbstractTableModel$ff19274a.hashcode与⼦⽅法IFn.invoke：
AbstractTableModel$ff19274a.hashcode的this(0参)传递给了IFn.invoke的1参，表⽰为0-
>IFn.invoke()@1
由于f是通过this.__clojureFnMap(0参)获取的，⽽f又为IFn.invoke()的this(0参)，即
AbstractTableModel$ff19274a.hashcode的0参传递给了IFn.invoke的0参，表⽰为0-
>IFn.invoke()@0
FnCompose.invoke与⼦⽅法IFn.invoke：
FnCompose.invoked的arg(1参)传递给了IFn.invoke的1参，表⽰为1->IFn.invoke()@1
f1为FnCompose的属性(this，0参)，被做为了IFn.invoke的this(0参数)传递，表⽰为0-
>IFn.invoke()@1
f1.invoke(arg)做为⼀个整体被当作1参传递给了IFn.invoke，由于f1在序列化时我们可以控
制具体是IFn的哪个实现类，所以具体调⽤哪个实现类的invoke也相当于能够控制，即
f1.invoke(arg)这个整体可以视为0参数传递给了IFn.invoke的1参(这⾥只是进⾏的简单猜
测，具体实现在字节码分析中，可能也体现了作者说的合理的风险判断吧)，表⽰为0-
>IFn.invoke()@1
好吧返回正题，来到 gadgetinspector.CallGraphDiscovery#discover
会遍历每⼀个class，并传⼊ ModelGeneratorClassVisitor 进⾏观察，⼀样的这⾥加点代
码跳过对构造函数的观察
⾸先是对B类进⾏观察，还是再列⼀次反汇编代码
长话短说，万物之源肯定还是visitCode，可以看到对于对于⾮静态⽅法会额外多⼀个arg0，不
需要理解，本来Java底层就是这样⼦处理滴
Code:
   0: new           #2                  // class yyds/C
   3: dup
   4: invokespecial #3                  // Method yyds/C."":()V
   7: aload_1
   8: invokevirtual #4                  // Method yyds/C.method3:
(Ljava/lang/String;)Ljava/lang/String;
  11: areturn
@Override
public void visitCode() {
  super.visitCode();
  int localIndex = 0;
  int argIndex = 0;
  //使⽤arg前缀来表示⽅法⼊参，后续⽤于判断是否为⽬标调⽤⽅法的⼊参
  if ((this.access & Opcodes.ACC_STATIC) == 0) {
    setLocalTaint(localIndex, "arg" + argIndex);
    localIndex += 1;
    argIndex += 1;
  }
根据汇编由于会调⽤到 invokevirtual ,最终会触发
gadgetinspector.CallGraphDiscovery.ModelGeneratorMethodVisitor#visitMeth
odInsn 的调⽤，这⾥⾯就会记录最终结果，在代码当中有⼀些简单的过滤，⽐如这个arg，
就是为了保证参数为当前⽅法的⼊参
之后便会在参数discoveredCalls当中记录参数流动关系
  for (Type argType : Type.getArgumentTypes(desc)) {
    setLocalTaint(localIndex, "arg" + argIndex);
    localIndex += argType.getSize();
    argIndex += 1;
  }
}
当然后⾯才发现这⾥还有⼀个细节的点，我们加强难度，如果代码改为这样，可以看到在上
⾯基础上只是加了个成员变量
package yyds;
import java.io.IOException;
public class Test {
    private String name;
    public static void main(String[] args) {
    }
    public void main(String args) throws IOException {
        new AA().method1(args, name);
    }
}
class AA {
    public String method1(String param, String param2) {
        return param + param2;
    }
看看他的反汇编
其实和上⾯分析过程差不多的，唯⼀多了个区别就是多了个汇编指令 getfield 的调⽤，也
因此会触发 visitFieldInsn ，我们具体来看
看 gadgetinspector.CallGraphDiscovery.ModelGeneratorMethodVisitor#visitFi
eldInsn ，其实就是判断字段是否是transient的，逻辑也很简单，看注释即可
}
    Code:
       0: new           #2                  // class yyds/AA
       3: dup
       4: invokespecial #3                  // Method yyds/AA."":()V
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field 
name:Ljava/lang/String;
      12: invokevirtual #5                  // Method yyds/AA.method1:
(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      15: pop
      16: return
        public void visitFieldInsn(int opcode, String owner, String name, 
String desc) {
            switch (opcode) {
                case Opcodes.GETSTATIC:
                    break;
                case Opcodes.PUTSTATIC:
                    break;
                case Opcodes.GETFIELD://⼊操作栈
                    Type type = Type.getType(desc);
                    if (type.getSize() == 1) {
                        Boolean isTransient = null;
                        // If a field type could not possibly be 
serialized, it's effectively transient
                        if (!couldBeSerialized(serializableDecider, 
inheritanceMap, new ClassReference.Handle(type.getInternalName()))) {
                            isTransient = Boolean.TRUE;
                        } else {
                            ClassReference clazz = classMap.get(new 
ClassReference.Handle(owner));
                            while (clazz != null) {
                                for (ClassReference.Member member : 
clazz.getMembers()) {
                                    if (member.getName().equals(name)) {
                                        isTransient = 
(member.getModifiers() & Opcodes.ACC_TRANSIENT) != 0;
                                        break;
                                    }
                                }
                                if (isTransient != null) {
                                    break;
                                }
                                clazz = classMap.get(new 
ClassReference.Handle(clazz.getSuperClass()));
                            }
                        }
                        Set newTaint = new HashSet<>();
                        if (!Boolean.TRUE.equals(isTransient)) {
                            for (String s : getStackTaint(0)) {
                                newTaint.add(s + "." + name);
                            }
                        }
                        super.visitFieldInsn(opcode, owner, name, desc);
                        //在调⽤⽅法前，都会先⼊栈，作为参数
                        setStackTaint(0, newTaint);
                        return;
                    }
                    break;
                case Opcodes.PUTFIELD:
                    break;
这⼀部分也算完结了
SourceDiscovery
在gadgetinspector中，存在着多个SourceDiscovery的实现，有jackson的，java原⽣序列化的等
等，我这⾥主要以jackson的SourceDiscovery实现开始分析
⾸先在SourceDiscovery抽象类的discover当中，先是加载了所有的类、⽅法、继承实现关系的
数据
                default:
                    throw new IllegalStateException("Unsupported opcode: " 
+ opcode);
            }
            super.visitFieldInsn(opcode, owner, name, desc);
        }
public void discover() throws IOException {
  Map classMap = 
DataLoader.loadClasses();
  Map methodMap = 
DataLoader.loadMethods();
  InheritanceMap inheritanceMap = InheritanceMap.load();
  Map> graphCallMap = new HashMap<>
();
  for (GraphCall graphCall : 
DataLoader.loadData(Paths.get("callgraph.dat"), new GraphCall.Factory())) 
{
    MethodReference.Handle caller = graphCall.getCallerMethod();
    if (!graphCallMap.containsKey(caller)) {
      Set graphCalls = new HashSet<>();
      graphCalls.add(graphCall);
接下来调⽤discover在实现
类 gadgetinspector.javaserial.SimpleSourceDiscovery#discover ,主要是收集可⽤
的source，逻辑也很简单了
      graphCallMap.put(caller, graphCalls);
    } else {
      graphCallMap.get(caller).add(graphCall);
    }
  }
  discover(classMap, methodMap, inheritanceMap, graphCallMap);
}
public void discover(Map classMap,
                         Map 
methodMap,
                         InheritanceMap inheritanceMap) {
        final SerializableDecider serializableDecider = new 
SimpleSerializableDecider(inheritanceMap);
        for (MethodReference.Handle method : methodMap.keySet()) {
            if 
(Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference())
)) {
                if (method.getName().equals("finalize") && 
method.getDesc().equals("()V")) {
                    addDiscoveredSource(new Source(method, 0));
                }
            }
        }
        // If a class implements readObject, the ObjectInputStream passed 
in is considered tainted
        for (MethodReference.Handle method : methodMap.keySet()) {
            if 
(Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference())
)) {
                if (method.getName().equals("readObject") && 
method.getDesc().equals("(Ljava/io/ObjectInputStream;)V")) {
                    addDiscoveredSource(new Source(method, 1));