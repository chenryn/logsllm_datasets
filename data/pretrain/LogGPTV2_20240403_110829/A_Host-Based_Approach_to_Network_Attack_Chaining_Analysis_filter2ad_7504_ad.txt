ure 5 shows the best exploitation paths that can be created
in the example network.
Once the graph stabilizes, the analyst can then examine
the undesirable accesses and look for ways to remedy them.
With so much access being achieved due to the Apache vul-
nerability (bugtraq 5033) on the Web server, this would
be an obvious place to start remediation efforts. Accord-
ing to the bugtraq notice, upgrading to a newer version
of the Apache software will resolve this problem. Assum-
ing that this occurs, it will invalidate any direct edges that
terminate on Web and use Apache Chunk vulnerability and
any chained edges that are dependent on the now infeasible
edges. The affected edges (represented as “dashed” lines)
are shown in Figure 6.
Figure 6. Effect of patching Apache Chunk
vulnerability.
This example shows how to compute an access graph
using our approach. Through multiple iterations, the net-
work will become secure. Although our approach may not
provide an analyst with a minimal set of changes, it does
produce the same desired goal of a secure network. Since
our approach can be used in real–time analysis because of
its polynomial cost, it is desirable for system administrators
Figure 5. Maximal possible access due to all
exploits.
edge label captures this by marking the chainID ﬁeld of
edge eij with host hk. In this example, the algorithm ﬁrst
selects the host pair whose source being examined is also
the destination host corresponding to edge edd. Since the
current level of access for the edge edd is only none, the
algorithm tries to improve it. The edge gets updated since
there exists an indirect path to leverage the access by go-
ing through Web host. First, Database gains admin level
access on Web through Chunk (bugtraq 5033) exploit.
Then, TNS (bugtraq 4033) is used to gain admin level
access from Web to Database. This is captured by labeling
edge edd with (D D, d, d, TNS, admin, 4033, D W). Since
this is a chained attack, the chain ﬂag is not longer empty
and the last edge used in the chain of exploits, namely D W,
is used as chainID ﬂag. The algorithm then tries to lever-
age the access level between the next host pair (Database
and File). Through available trust relationships, vulnerabili-
ties and exploits, the algorithm uses Database’s admin con-
trol of Web to improve access to File. Currently Database
only has connectivity to File. However, by exploit-
ing the trust relationship between Web and File, Database
can leverage its level of access to File to that of user by
using Web as an intermediate host. Lines 31 − 33 cause
the corresponding edge edf to update its label as (D F, d,
f, Trust, user, -, D W). Since this is also a chained attack,
the chain ﬂag is not longer empty and chainID is marked
with the last edge used in the chain of exploits, namely
D W. Since access edge between Database and Web is al-
ready admin, the algorithm moves to the next host–pair.
This process will continue until all host pairs have been ex-
amined and no edges can be updated. To optimize the al-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
(A_D, a, d, TNS,admin, 4033, A_W)(D_D, d, d, TNS,admin, 4033, D_W)(W_W, w, w, Chunk,admin, 5033, W_D)(A_F, a, f, Trust,user, _ , A_W)(A_W, a, w, Chunk,admin, 5033, _ )(F_F, f, f, Trust,user, _ , F_W)(F_D, f, d, TNS, admin, 4033, F_W)DAFW(W_F, w, f, Trust, user, _ , _ )(F_W, f, w, Chunk, admin, 5033, _ )(W_D, w, d, TNS, admin, 4033, _ )(D_W, d, w, Chunk, admin, 5033, _ )(D_F, d, f, Trust, user, _ , D_W)(A_F, a, f, Trust,user, _ , A_W)(A_D, a, d, TNS,admin, 4033, A_W)(D_D, d, d, TNS,admin, 4033, D_W)(F_F, f, f, Trust,user, _ , F_W)(W_W, w, w, Chunk,admin, 5033, W_D)(A_W, a, w, Chunk,admin, 5033, _ )(D_W, d, w, Chunk, admin, 5033, _ )(W_D, w, d, TNS, admin, 4033, _ )(D_F, d, f, Trust, user, _ , D_W)(F_D, f, d, TNS, admin, 4033, F_W)(F_W, f, w, Chunk, admin, 5033, _ )(W_F, w, f, Trust, user, _ , _ )AWFDto incorporate this approach into their security arsenal.
4.1. Larger Network Example
To further demonstrate that our approach runs in rea-
sonable time for realistic networks, we ran our tool on
a network comprised of 6 subnets (separated by a bor-
der and internal ﬁrewalls) and 87 hosts. The experiment
was conducted on an Intel Pentium 4 (2.0 GHz) with 512
MBytes of RAM running on Fedora Core 3 (Linux 2.6.9).
In our model, there are as many nodes, as there are hosts
in the network. Each host pair is analyzed, hence mak-
ing 872 = 7569 edges in the resulting access graph.
Out of these edges, 2088 had level of access higher than
connectivity. The open source graph visualization
program, graphviz [8], was used to generate graphs for
closer analysis and visualization. First, the system was ini-
tialized with the network’s topology/conﬁguration before
findInitialAccess and findMaximalAccess al-
gorithms were used. Our tool read this information from
couple of ﬁles:
set of host nodes—H, set of trust re-
lationships between hosts—T , set of available network
exploits—X, set of vulnerabilities present at each host in
the network—V , and set of ﬁrewall rules—F . This took
1.527 seconds to complete. Then, findInitialAccess
took 0.107 seconds to establish the initial trust relation-
ships between hosts in absence of applying any exploits.
findMaximalAccess took 1.571 seconds to calculate
maximal accesses between all the hosts in the network using
each host’s known exploits. The graphviz tool was then
used to generate access graph for visualization and analysis
purposes.
By way of comparison, a model presented by Sheyner
et al [20] took 5 seconds to execute for a network com-
prised of 3 hosts, but when their sample network was in-
creased to 5 hosts, their tool took over 2 hours to construct
a corresponding attack graph. Similar scalability prob-
lems are encountered by models which construct complete
attack graphs [19, 16, 22], and by alert correlation tech-
niques [13, 14].
5. Related Work
A variety of graph based approaches [2, 25, 16, 22, 23, 6]
to modelling network vulnerabilities have been proposed.
Swiler et al [16, 22] developed one of the initial graph–
based formalisms for analyzing network vulnerabilities.
The requires/provides model of Templeton and Levitt [23]
has been used by many other researchers to model the role
of exploit pre– and post–conditions in chaining exploits to-
gether. Ritchey and Ammann [19] proposed the use of
model checkers to generate attack paths for known exploits.
Ramakrishnan and Sekar [17] used a model checker to carry
out a related analysis in single host systems with respect to
unknown vulnerabilities.
In an extension of the network vulnerability analysis of
Ritchey and Ammann cited above, Jha et al [10, 9] and
Sheyner et al [20, 21] used model checking to analyze at-
tack graphs on heterogeneous networks. They consider in-
terconnected network of computers with known vulnerabil-
ities that attackers can combined in order to attack one or
more hosts.
If an attack succeeds, the authors provide a
mechanism to allow the analyst to understand all possible
attack scenarios. Ammann et al [1] introduced a mono-
tonicity assumption and used it to develop a polynomial al-
gorithm to encode all of the edges in an attack tree without
actually computing the tree itself. Noel et al [15] devel-
oped an elegant, though still exponential, algorithm to re-
cursively back substitute exploits with preconditions; the re-
sult is a boolean expression describing the initial conditions
that lead to a compromise. Also, there have been number of
different series of techniques developed [7, 5, 13, 14] that
integrate alert correlation methods in order to build possible
attack scenarios.
As described above, researchers have proposed a variety
of methods to generate attack graphs. The computational
complexity for most of their methods quickly becomes ex-
ponential in the size of the network as network complexity
grows past a few machines. By utilizing penetration tester’s
worst case possible damage perspective, our model’s algo-
rithmic complexity is reduced to polynomial in the size of
the network, and so has the potential of scaling well to prac-
tical, more realistic networks.
To help feed information into our model, number of dif-
ferent research efforts and tools can be used. Analyst can
get vulnerabilities and their associated exploits from well
documented public sites such as bugtraq. Commercial
tools such as Nessus and Retina can be used to identify
known vulnerabilities in a given host or network. Since in-
formation from various tools can be in multiple formats and
each may provide different information, Vigna et al [24]
developed NetMap [12] program for integrating multiple
tools, and for providing information in a more complete and
concise format. The information retrieved by the tool is a
nice complement to developing our model.
6. Conclusions
In this paper, we developed a host–centric approach to
analyzing network vulnerabilities. Our approach is a com-
plement to the attack graph approach, and has the beneﬁt
of being computationally feasible on large networks, albeit
at the expense of not explicitly identifying every possible
attack sequence. Instead, we argue that penetration testers
look for speciﬁc degrees of compromise on a given host,
and focusing on that level of compromise is a natural ap-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
proach for a system analyst. Our model can be computed
and analyzed in real–time (its algorithmic complexity is
polynomial in the size of the network), it can be used to 1)
provide near real–time early warning of potential attacks,
2) to identify the network policy rules violations and 3) to
conduct analysis on the potential impacts of giving differ-
ent permissions or credentials to users (modelling insider
attacks), thus making it a viable solution for industry.
Acknowledgments
This work was supported in part by the National Science
Foundation under grant CCR–0208848. The work of Joseph
Pamula was partially supported by the Air Force Research
Laboratory, Rome under the grant F30602–00–2–0512 and
by the Army Research Ofﬁce under the grants DAAD19–
03–1–0257 and W911NF–05–1–0374.
References
[1] P. Ammann, D. Wijesekera, and S. Kaushik. Scalable graph-
based vulnerability analysis. In Proceedings CCS 2002: 9th
ACM Conference on Computer and Commuincations Secu-
rity, pages 217–224, Washington, DC, November 2002.
[2] R. Baldwin. Kuang: Rule based security checking. Tech-
nical report, MIT Lab for Computer Science, Programming
Systems Research Group, May 1994.
[3] Bugtraq.
The security vulnerabilities mailing list.
http://www.securityfocus.com.
[4] T. Cormen, C. Leiserson, and R. Rivest. Introduction to Al-
gorithms. McGraw-Hill Book Company and The MIT Press,
1998.
[5] F. Cuppens and A. Miege. Alert correlation in a cooperative
intrustion detection framework. In Proceedings of the 2002
IEEE Symposium on Security and Privacy (S&P ’02), May
2002.
[6] J. Dawkins, C. Campbell, and J. Hale. Modeling network
attacks: Extending the attack tree paradigm. In Workshop on
Statistical and Machine Learning Techniques in Computer
Intrusion Detection, Johns Hopkins University, June 2002.
Center for Information Security, University of Tulsa.
[7] H. Debar and A. Wespi. Aggregation and correlation of in-
trusion detection alerts. In Proceedings of Recent Advances
in Intrusion Detection (RAID 2001), pages 85–103, 2000.
[8] Graphviz.
Graph
visualization
software.
http://www.graphviz.org.
[9] S. Jha, O. Sheyner, and J. Wing. Minimization and reli-
ability analysis of attack graphs. Technical Report CMU-
CS-02-109, School of Computer Science, Carnegie Mellon
University, February 2002.
[10] S. Jha, O. Sheyner, and J. Wing. Two formal analyses of
attack graphs. In Proceedings of the 2002 Computer Secu-
rity Foundations Workshop, pages 49–63, Nova Scotia, June
2002.
[11] Nessus.
Open source vulnerability scanner project.
[12] NetMap. Network modeling, discovery, and analysis.
http://www.cs.ucsb.edu/∼rsg/NetMap/index.html.
[13] P. Ning, Y. Cui, and D. Reeves. Constructing attack scenar-
ios through correlation of intrustion alerts. In Proceedings
of the 9th ACM Conference on Computer & Communica-
tions Security, pages 245–254, Washington D.C., November
2002.
[14] P. Ning, D. Xu, C. Healey, and R. S. Amant. Building at-
tack scenarios through integration of complementary alert
In Proceedings of the 11th Annual
correlation methods.
Network and Distributed System Security Symposium (NDSS
’04), pages 97–111, February 2004.
[15] S. Noel, S. Jajodia, B. O’Berry, and M. Jacobs. Efﬁcient
minimum-cost network hardening via exploit dependency
In Proceedings ACSAC 2003: 19th Annual Com-
graphs.
puter Security Applications Conference, pages 86–95, Las
Vegas, December 2003.
[16] C. Phillips and L. Swiler. A graph-based system for
network-vulnerability analysis. In Proceedings of the New
Security Paradigms Workshop, pages 71–79, Charlottesville,
VA, 1998.
[17] C. Ramakrishnan and R. Sekar. Model-based vulnerability
analysis of computer systems. In Proceedings of the 2nd In-
ternational Workshop on Veriﬁcation, Model Checking and
Abstract Interpretation, September 1998.
[18] Retina.
Network
security
scanner.
http://www.eeye.com/html/products/Retina/.
[19] R. W. Ritchey and P. Ammann. Using model checking to
analyze network vulnerabilities. In Proceedings of the 2000
IEEE Symposium on Security and Privacy (Oakland 2000),
pages 156–165, Oakland, CA, May 2000.
[20] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. Wing.
Automated generation and analysis of attack graphs. In Pro-
ceedings of the 2002 IEEE Symposium on Security and Pri-
vacy (Oakland 2002), pages 254–265, Oakland, CA, May
2002.
[21] O. Sheyner and J. Wing. Tools for generating and analyz-
ing attack graphs. In To appear in Proceedings of Interna-
tional Symposium on Formal Methods for Components and
Objects, Lecture Notes in Computer Science, 2005.
[22] L. Swiler, C. Phillips, D. Ellis,
, and S. Chakerian.
Computer-attack graph generation tool. In Proceedings DIS-
CEX ’01: DARPA Information Survivability Conference &
Exposition II, pages 307–321, June 2001.
[23] S. Templeton and K. Levitt. A requires/provides model
In Proceedings of the New Secu-
for computer attacks.
rity Paradigms Workshop, Cork, Ireland, September 2000.
http://seclab.cs.ucdavis.edu/papers/NP2000-rev.pdf.
[24] G. Vigna, F. Valeur, J. Zhou, and R. Kremmerer. Compos-
able tools for network discovery and security analysis.
In
Proceedings ACSAC 2002: 18th Annual Computer Security
Applications Conference, Las Vegas, December 2002.
[25] D. Zerkle and K. Levitt. Netkuang - A multi-host con-
ﬁguration vulnerability checker. In Proceedings of the 6th
USENIX Unix Security Symposium, San Jose, CA, 1996.
http://www.nessus.org.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply.