### 1.4.3 JavaScript 基础

#### 浏览器中的JavaScript引擎
在浏览器中，JavaScript (JS) 的执行依赖于内置的解析引擎。不同浏览器使用不同的引擎，这导致了JS代码在不同浏览器上可能会有不同的表现。

| 浏览器 | 引擎       |
|--------|------------|
| IE/Edge | Chakra     |
| Firefox| SpiderMonkey|
| Safari | SFX        |
| Chrome | V8         |
| Opera  | Carakan    |

#### JavaScript代码嵌入方式
HTML文档中嵌入JS代码主要有以下几种形式：
- 直接插入`<script>`标签内的代码块。
- 通过`<script src="..."></script>`加载外部JS文件。
- 利用HTML标签事件属性（如`onclick`）。

#### JavaScript数据类型
JavaScript是一种弱类型语言，声明变量时无需指定其类型。例如：
```javascript
var pi = 3.14; // 数字
var pi = '圆周率'; // 字符串
```
此外，还可以使用构造函数来创建特定类型的对象：
```javascript
var pi = new String('圆周率');
var pi = new Number(3.14);
var pi = new Boolean(true);
var pi = new Array();
var pi = new Object();
```
JavaScript还包括两种特殊的数据类型：`Undefined` 和 `Null`。前者表示已声明但未赋值的变量，后者则代表空值或不存在的对象引用。

#### JavaScript编程逻辑
- **基础语法**：语句之间通常以分号`;`分隔。
- **条件语句**：
  - `if` 语句：
    ```javascript
    if (condition) {
        // 代码块
    } else {
        // 代码块
    }
    ```
  - `switch` 语句：
    ```javascript
    switch (n) {
        case 1:
            // 代码块
            break;
        case 2:
            // 代码块
            break;
        default:
            // 代码块
    }
    ```
- **循环语句**：
  - `for` 循环：
    ```javascript
    for (初始化; 条件; 更新) {
        // 代码块
    }
    ```
  - `for...in` 循环：
    ```javascript
    for (x in xs) {
        // 代码块
    }
    ```
  - `while` 循环：
    ```javascript
    while (条件) {
        // 代码块
    }
    ```
  - `do...while` 循环：
    ```javascript
    do {
        // 代码块
    } while (条件);
    ```

#### 调试与打印
- `window.alert()`：显示警告对话框。
- `document.write()`：向文档写入内容。
- `console.log()`：将信息输出到浏览器控制台。

#### JavaScript框架
- **jQuery**：简化DOM操作及事件处理。
- **Angular**：实现MVC架构，支持双向数据绑定。
- **React**：基于组件构建用户界面。
- **Vue**：MVVM模式下的前端库，强调数据驱动和组件化设计。

#### 双向数据绑定
不同于传统的单向MVC架构，现代前端框架常采用双向数据绑定机制，允许视图层与模型层之间的数据同步更新。然而，这也可能带来安全风险，如模板注入攻击。

#### DOM与BOM
- **DOM (Document Object Model)**：提供了一种结构化的表示方法，使开发者能够动态访问并修改网页内容。
- **BOM (Browser Object Model)**：提供了对浏览器窗口及其功能的访问接口，包括但不限于Cookie管理、地理位置获取等。

#### JavaScript混淆
为了保护源码不被轻易读取，JS代码可以通过各种混淆技术进行加密，常见的手段有变量重命名、字符串编码以及动态执行等。

#### 使用Node.js执行后端JavaScript
安装完Node.js后，可以开始编写简单的后端程序。例如：
```bash
# 创建一个名为hello.js的文件，并输入如下内容
console.log("Hello, World!");

# 执行该脚本
node hello.js
```

### 1.4.4 常见Web服务器基础

#### Apache HTTP Server
- 特点：稳定、安全，广泛应用于PHP环境。
- 安装步骤（Ubuntu为例）：
  ```bash
  sudo apt-get install apache2
  sudo apt-get install mysql-server mysql-client
  sudo apt-get install php7.0 libapache2-mod-php7.0
  sudo apt-get install php7.0-mysql
  service apache2 restart
  service mysql restart
  ```

#### Nginx
- 功能亮点：负载均衡与反向代理。
- 安装指南（Ubuntu）：
  ```bash
  sudo apt-get install nginx
  sudo apt-get install php7.0 php7.0-fpm
  # 编辑配置文件 /etc/nginx/sites-available/default
  service nginx restart
  sudo apt-get install mysql-server php7.0-mysql
  sudo apt-get install mysql-client
  ```

#### IIS (Internet Information Services)
- 优势：与Windows系统高度集成，特别适合.NET应用程序。
- 启用IIS服务（Windows 10）：通过控制面板中的“启用或关闭Windows功能”选项开启。

#### Web服务指纹识别
确定目标网站所使用的Web服务器对于安全测试至关重要。常见方法是查看HTTP响应头中的`Server`字段，它往往直接暴露了服务器类型及其版本信息。