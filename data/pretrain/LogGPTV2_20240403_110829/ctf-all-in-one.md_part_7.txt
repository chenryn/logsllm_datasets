69
1.4.3 JavaScript 基础
在浏览器中，会集成 JS 的解析引擎，不同的浏览器拥有不同的解析引擎，这就使
得 JS 的执行在不同浏览器上有不同的解释效果。
浏览器 引擎
IE/Edge Chakra
Firefox SpiderMonkey
Safari SFX
Chrome V8
Opera Carakan
嵌入在 HTML 中的 JS 代码通常有以下几种形式：
直接插入代码块
加载外部 JS 文件
使用 HTML 标签中的事件属性
JavaScript 数据类型
作为弱类型的语言，JS 的变量声明不需要指定数据类型：
var pi=3.14;
var pi='ratio of the circumference of a circle to its diameter';
当然，可以通过“ new ”来声明变量类型：
var pi=new String;
var pi=new Number;
var pi=new Boolean;
var pi=new Array;
var pi=new Object;
70
1.4.3 JavaScript 基础
上一个示例也展示了 JS 的数据类型，分别是字符串、数字、布尔值、数组和对
象。
有两个特殊的类型是 Undefined 和 Null，形象一点区分，前者表示有坑在但坑中没
有值，后者表示没有坑。另外，所有 JS 变量都是对象，但是需要注意的是，对象
声明的字符串和直接赋值的字符串并不严格相等。
JavaScript 编程逻辑
基础
JS 语句使用分号分隔。
逻辑语句
if 条件语句：
if (condition)
{
代码块
}
else
{
代码块
}
switch 条件语句：
71
1.4.3 JavaScript 基础
switch(n)
{
case 1:
代码块
break;
case 2:
代码块
break;
default:
代码块
}
for/for in 循环语句：
for (代码1；代码2；代码3)
{
代码块
}
for (x in xs)
{
代码块
}
while/do while 循环语句：
while (条件)
{
代码块
}
72
1.4.3 JavaScript 基础
do
{
代码块
}
while (条件);
JavaScript 打印数据
在浏览器中调试代码时，经常用到的手段是打印变量。
函数 作用
window.alert() 弹出警告框
document.write() 写入HTML文档
console.log() 写入浏览器控制台
73
1.4.3 JavaScript 基础
JavaScript 框架
JS 同样有许多功能强大的框架。大多数的前端 JS 框架使用外部引用的方式将 JS
文件引入到正在编写的文档中。
jQuery
jQuery 封装了常用的 JS 功能，通过选择器的机制来操纵 DOM 节点，完成复杂的
前端效果展示。
Angular
实现了前端的 MVC 架构，通过动态数据绑定来简化数据转递流程。
React
利用组件来构建前端UI的框架
Vue
74
1.4.3 JavaScript 基础
MVVM 构架的前端库，理论上讲，将它定义为数据驱动、组件化的框架，但这些概
念也可能适用于其他框架，所以可能只有去真正使用到所有框架才能领悟到它们之
间的区别。
其他
还有许许多多针对不同功能的框架，比如针对图表可视化、网络信息传递或者移动
端优化等等。
双向数据绑定
传统基于 MVC 的架构的思想是数据单向的传送到 View 视图中进行显示，但是有
时我们还需要将视图层的数据传输回模型层，这部分的功能就由前端 JS 来接手，
因此许多近几年出现的新框架都使用数据双向绑定来完成MVVM的新构架，这就带
给了用户更多的权限接触到程序的编程逻辑，进而产生一些安全问题，比较典型的
就是许多框架曾经存在的模板注入问题。
JavaScript DOM 和 BOM
文档对象模型，JS 通过操纵 DOM 可以动态获取、修改 HTML 中的元
DOM
素、属性、CSS 样式，这种修改有时会带来 XSS 攻击风险
浏览器对象模型，类比于 DOM，赋予 JS 对浏览器本身进行有限的操
BOM
纵，获取 Cookie、地理位置、系统硬件或浏览器插件信息等
JavaScript 混淆
由于前端代码的可见性，出于知识产权或者其他目的，JS 代码通过混淆的方法使
得自己既能被浏览器执行，又难以被人为解读。常见的混淆方法有重命名变量名和
函数名、挤压代码、拼接字符、使用动态执行函数在函数与字符串之间进行替换
等。下面对比代码混淆前后的差异。
混淆前：
console.log('Hello World!');
75
1.4.3 JavaScript 基础
混淆后：
console["\x6c\x6f\x67"]('\x48\x65\x6c\x6c\x6f \x57\x6f\x72\x6c\x
64\x21');
更加复杂的混淆后：
eval(function(p,a,c,k,e,d){e=function(c){return(c35?String.fromCharCode(c+29):c.toString(36))};if
(!''.replace(/^/,String)){while(c--)d[e(c)]=k[c]||e(c);k=[functi
on(e){return d[e]}];e=function(){return'\\w+'};c=1;};while(c--)if
(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return
p;}('1.0(\'3 2!\');',4,4,'log|console|World|Hello'.split('|'),0,
{}))
由于之前提到的特性，无论混淆有多么复杂，最终它都能够在浏览器中被解释执
行。
使用 Node.js 执行后端 JavaScript
在 安装完成 Node.js 后，我们可以尝试编写第一个后端 JS 程序。
1.打开文本编辑器，写入
console.log("Hello World");
并保存为 hello.js
2.使用
node hello.js
来执行文件。
76
1.4.3 JavaScript 基础
Node.js 模块
Node.js 同样通过丰富的模块提供强大的功能，模块使用 npm 进行管理。
events ：事件模块，提供事件触发和事件监听功能
util ：核心功能模块，用于弥补核心 JS 功能的不足
fs ：文件操作模块，提供文件操作 API
http ：Web 协议模块，提供 Web 协议交互功能
express ：Web 框架，用于快速构建 Web 应用服务
vm ：沙箱模块，提供干净的上下文环境
后端 JS 就会存在其他语言后端所同样存在安全问题，包括基础的 Web 攻击、服务
端模板注入、沙箱逃逸、内存溢出等问题。
参考资料
JavaScript 教程
Node.js 教程
浅谈 Node.js 安全
77
1.4.4 常见 Web 服务器基础
常见 Web 服务器基础
Apache HTTP Server
Nginx
IIS
如何获取 Web 服务指纹
由于涉及到 Web 服务器和应用服务器的差别问题，这里着重介绍三款使用广泛的
Web 服务器。
当客户端按照 HTTP 协议发送了请求，服务端也写好了处理请求的逻辑代码，这时
就需要一个中间人来接收请求，解析请求，并将请求放入后端代码中执行，最终将
执行结果返回的页面传递给客户端。另外，我们还要保证整个服务能同时被大规模
的人群使用，Web 服务器就充当了这样的角色。
Apache HTTP Server
Apache HTTP Server 以稳定、安全以及对 PHP 的高效支持而被广泛用于 PHP 语
言中，WAMP 或者 LAMP 就是它们组合的简称，即 Windows 或者 Linux 下的
Apache2+Mysql+PHP。
安装 Apache
Windows 下推荐直接安装 WAMP 环境。
Ubuntu 下可以依次使用命令安装，需要注意的是不同的系统版本对 PHP 的支持情
况不同，这里以 ubuntu 16.04 为例。
sudo apt-get install apache2
sudo apt-get install mysql-server mysql-client
sudo apt-get install php7.0
sudo apt-get install libapache2-mod-php7.0
sudo apt-get install php7.0-mysql
service apache2 restart
service mysql restart
78
1.4.4 常见 Web 服务器基础
组件
Apache 服务器拥有强大的组件系统，这些组件补充了包括认证、日志记录、命令
交互、语言支持等复杂功能，同样在 Apache 的发展过程中，许多组件都出现过漏
洞，包括资源溢出、拒绝服务、远程命令执行等。
关于 Apache 的组件历史漏洞可以在 https://www.exploit-db.com 中进行查看
文件后缀解析特性
Apache 支持多后缀解析，对文件的后缀解析采用从右向左的顺序，如果遇到无法
识别的后缀名就会依次遍历剩下的后缀名。
同时，还可以在配置文件如下选项中增加其他后缀名：
更多的后缀名支持可以查看 mime.type 文件。
Nginx
Nginx 的特点在于它的负载均衡和反向代理功能，在访问规模庞大的站点上通常使
用 Nginx 作为服务器。同样，Nginx 也和 Mysql、PHP 一同构成了 WNMP 和
LNMP 环境。和 Apache 默认将 PHP 作为模块加载不同的是，Nginx 通过 CGI 来
调用 PHP。
安装 Nginx
Windows 由于没有官方网站的 WNMP，大家可以选择 Github 上的 WNMP 项目或
者其他用户打包好的安装环境进行安装。
Ubuntu 这里以 FPM 配置为例：
79
1.4.4 常见 Web 服务器基础
$ sudo apt-get install nginx
$ sudo apt-get install php7.0
$ sudo apt-get install php7.0-fpm
打开 vim /etc/nginx/sites-available/default
修改配置
server {
......
......
location ~ \.php$ {
include snippets/fastcgi-php.conf;
fastcgi_pass unix:/run/php/php7.0-fpm.sock;
}
......
......
}
$ service nginx restart
$ sudo apt-get install mysql-server php7.0-mysql
$ sudo apt-get install mysql-client
文件后缀解析
由于 Nginx 对 CGI 的使用更加广泛，所以 PHP 在 CGI 的一些解析特性放到 Nginx
这里来讲解，PHP 具有对文件路径进行修正的特性，使用如下配置参数：
cgi.fix_pathinfo = 1
当使用如下的 URL 来访问一个存在的 1.jpg 资源时，Nginx 认为这是一个 PHP 资
源，于是会将该资源交给 PHP 来处理，而 PHP 此时会发现 1.php 不存在，通过修
正路径，PHP 会将存在的 1.jpg 作为 PHP 来执行。
http://xxx/xxx/1.jpg/1.php
相似的绕过方式还有以下几种方式：
80
1.4.4 常见 Web 服务器基础
http://xxx/xxx/1.jpg%00.php
http://xxx/xxx/1.jpg \0.php
但是，新版本的 PHP 引入了新的配置项 “security.limit_extensions” 来限制可执行
的文件后缀，以此来弥补 CGI 文件后缀解析的不足。
IIS
IIS 被广泛内置于 Windows 的多个操作系统中，只需要在控制面板中的 Windows
服务下打开 IIS 服务，即可进行配置操作。作为微软的 Web 服务器，它对 .net 的
程序应用支持最好，同时也支持以 CGI 的方式加载其他语言。
安装 IIS
IIS 通常只能运行在 Windows 系统上，以 Windows 10 为例，打开控制面板，依次
选择程序-启用或关闭 Windows 功能，勾选打开 Internet Information Services 服
务。
启动成功后，在 “此电脑” 选项上点击右键，打开 “管理” 选项，选择 “服务和应用程
序” 即可看到 IIS 的相关配置。
IIS 解析特性
IIS 短文件名
为了兼容 16 位 MS-DOS 程序， Windows 会为文件名较长的文件生成对应的短文
件名，如下所示：
利用这种文件机制，我们可以在 IIS 和 .net 环境下进行短文件名爆破。
IIS 6.0 解析特性
IIS 6.0 解析文件时会忽略分号后的字符串，因此 1.asp;2.jpg 将会被解析为
1.asp 。
81
1.4.4 常见 Web 服务器基础
IIS 也存在类似于 Nginx 的 CGI 解析特性
如何获取 Web 服务指纹
比赛中的信息获取往往十分重要，确定 Web 服务器指纹对于下一步的对策很重
要。
HTTP 头识别
许多 Web 服务器都会在返回给用户的 HTTP 头中告知自己的服务器名称和版本。
举例列出一些真实存在的包含服务器信息的 HTTP 头：
Server: nginx
Server: Tengine
Server: openresty/1.11.2.4
Server: Microsoft-IIS/8.0
Server: Apache/2.4.26 (Unix) OpenSSL/1.0.2l PHP/5.6.31 mod_perl/
2.0.8-dev Perl/v5.16.3
X-Powered-By: PHP/5.5.25
X-Powered-By: ASP.NET