title:Programmable In-Network Security for Context-aware BYOD Policies
author:Qiao Kang and
Lei Xue and
Adam Morrison and
Yuxin Tang and
Ang Chen and
Xiapu Luo
Programmable In-Network Security for 
Context-aware BYOD Policies
Qiao Kang, Rice University; Lei Xue, The Hong Kong Polytechnic University; 
Adam Morrison, Yuxin Tang, and Ang Chen, Rice University; Xiapu Luo, 
The Hong Kong Polytechnic University
https://www.usenix.org/conference/usenixsecurity20/presentation/kang
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Programmable In-Network Security for Context-aware BYOD Policies
Qiao Kang
Rice University
Yuxin Tang
Rice University
Lei Xue
The Hong Kong Polytechnic
Adam Morrison
Rice University
University
Ang Chen
Rice University
Xiapu Luo
The Hong Kong Polytechnic
University
Abstract
Bring Your Own Device (BYOD) has become the new norm
for enterprise networks, but BYOD security remains a top con-
cern. Context-aware security, which enforces access control
based on dynamic runtime context, is a promising approach.
Recent work has developed SDN solutions to collect device
contexts and enforce access control at a central controller.
However, the central controller could become a bottleneck
and attack target. Processing context signals at the remote
controller is also too slow for real-time decision change.
We present a new paradigm, programmable in-network
security (Poise), which is enabled by the emergence of pro-
grammable switches. At the heart of Poise is a novel security
primitive, which can be programmed to support a wide range
of context-aware policies in hardware. Users of Poise specify
concise policies, and Poise compiles them into different con-
ﬁgurations of the primitive in P4. Compared with traditional
SDN defenses, Poise is resilient to control plane saturation
attacks, and it dramatically increases defense agility.
1 Introduction
BYOD refers to the practice where enterprise employees
could use privately owned tablets, phones, and laptops at
work [32]. This practice has become the new norm in many or-
ganizations [7, 13, 14, 17, 23, 29], and its market is projected
to grow and exceed $73 billion by 2021 [17].
One of the top concerns, however, is BYOD security. As
BYOD devices are generally less well-managed than their
enterprise counterparts, they are easier targets to compro-
mise [6, 8, 47, 101]. This is further exacerbated by the fact
that such devices are used to access sensitive enterprise re-
sources as well as untrustworthy services in the wild [4, 22].
At its core, BYOD security represents a concrete instance
of a fundamental challenge, sometimes known as the “end
node problem” [11, 12]. The “end nodes” are not subject
to the same level of centralized control, management, and
protection as the enterprise infrastructure. We can easily up-
date the access control lists on the gateway router, or patch
newly discovered vulnerabilities on a server, but ensuring that
Kang, Xue, and Morrison contributed to this work equally; Chen and
Luo are the corresponding authors.
the individual end points are properly patched is much more
difﬁcult. As such, insecure end devices tend to become the
weakest link in the security chain [25].
One promising approach to BYOD security is to use
context-aware policies, which enforce access control based
on devices’ runtime contexts [58]. For instance, a policy may
deny access from devices whose TLS libraries have not been
updated [98], or grant access to devices that are physically
located in the enterprise boundary [88], or allow the use of
a sensitive service only if administrators are online [56, 87].
In each of these scenarios, the policy makes security deci-
sions based on additional “threat signals”, such as the device
location, library version, or even the status of other devices
in the network. Context-aware policies are in a class of their
own—they are much more dynamic, as contexts can change
frequently (e.g., GPS location), and they require global visi-
bility of the entire network (e.g., administrators online).
Supporting context-aware policies in enterprise networks
presents interesting research challenges. Some traditional sys-
tems operate at the server side [89, 94], which enables easier
management and update of security policies; others operate at
the client side [91], making it easier to access device context.
A common limitation, however, is that the individual nodes—
clients or servers—only have local visibility. Such a “tunnel
vision” hinders the ability to make synchronized security deci-
sions network-wide [86]. Latest proposals address this using
OpenFlow-based SDN, where a software controller collects
context signals from all devices and enforces network-wide
access control [58]. However, the central controller is vulner-
able to control plane saturation attacks [82], and processing
threat signals in a remote software controller incurs delay and
decreases agility.
Our contribution. We present a novel design called Poise,
or programmable in-network security, whose goal is to ad-
dress the limitations of OpenFlow-based SDN defense. Poise
has a new security primitive that runs in switch hardware, and
it can change defense decisions at hardware speeds. Clients
embed context signals in network trafﬁc, and Poise parses
these signals and enforces security policies without involv-
ing a remote software controller. This primitive is also re-
programmable in a declarative language to support a wide
range of context-aware policies. These declarative policies are
USENIX Association
29th USENIX Security Symposium    595
compiled by Poise into different conﬁgurations of the security
primitive as P4 programs. Compared with traditional SDN
defenses [58, 75, 82], this new paradigm results in defenses
that are highly efﬁcient, agile, and resilient to control plane
saturation attacks [82].
The key enabler for Poise is the emerging programmable
data planes developed by the latest networking technol-
ogy. New switches, such as Intel FlexPipe [16], Cavium
XPliant [9], and Barefoot Toﬁno [3], can be programmed
in P4 [19] to support user-deﬁned network protocols, cus-
tom header processing, and sophisticated state in hard-
ware. P4-programmable networks represent a major step be-
yond OpenFlow-based SDN. OpenFlow switches have ﬁxed-
function hardware, and they can only support programmable
forwarding by occasionally invoking remote software con-
trollers. P4 switches, on the other hand, offer hardware-based
programmability, which can be applied to every single packet
without performance slowdown. The novelty of Poise lies
in leveraging these new hardware features for context-aware
security—we encode context signals with user-deﬁned proto-
cols, compute access control decisions using programmable
packet processing, and support stateful, network-wide policies
by designing hardware data structures.
After motivating our problem further in §2, we present:
• The concept of programmable in-network security (§3);
• A language and compiler for context-aware policies (§4);
• A novel in-network security primitive (§5);
• The Poise orchestration service and device module (§6);
• Discussions and limitations of Poise (§7);
• Prototype and evaluation of Poise that demonstrate its
practicality, as well as its higher resilience to control
plane saturation attacks and increased defense agility
compared with OpenFlow-based SDN defense (§8);
We then describe related work in §9, and conclude in §10.
2 Background and Motivation
Context-aware security (CAS) stands in stark contrast to con-
ventional security mechanisms—existing mechanisms can
only support static policies, but CAS uses dynamic policies
based on runtime contexts. For instance, NAC (network ac-
cess control) mechanisms such as IEEE 802.1x [33] and
Cisco Port/VLAN/IOS ACLs [10, 26] statically conﬁgure
access control policies, whether for a device, an IP preﬁx, or
a VLAN ID. Role- or attribute-based access control mech-
anisms [52, 53, 76] also perform access control based on
statically-deﬁned roles or attributes.
CAS, on the other hand, uses the runtime contexts of a re-
quest as threat signals (e.g., location/time of access, status of
the network); whenever the signals change, the security deci-
sions would adapt accordingly. The theoretical underpinnings
of CAS have been studied more than a decade back [41], but
it recently found an array of new applications in securing IoT
and mobile devices [39, 51, 58, 60, 91]. These devices, just
like the BYOD clients in our scenario, suffer from the “end
node problem” [11, 12]. CAS has proven to be effective for
such scenarios, because it can enable a more precise protec-
tion based on threat signals collected from the end nodes.
2.1 Design space
The concept of CAS by itself does not necessitate a client-,
server-, or network-based design; rather, these design points
have different tradeoffs. First off, purely server-side solutions
are often ineffective, as we desire to collect context signals
from client devices at runtime. Therefore, typical CAS sys-
tems [58, 91] need to install a context collection module at the
clients. In terms of policy enforcement, one could co-locate
enforcement with context collection, resulting in a purely
client-based solution [91]. The main drawbacks, however,
are that a) individual devices only have local views, making
network-wide decisions hard to come by, and that b) policy
management is much harder, as policies are distributed to each
device; this might raise additional concerns if some policies
are themselves sensitive data. Another option is to enforce
the policies inside the network. The network has a global
view for holistic protection, and it enables centralized policy
management and update. Poise adopts this design option.
2.2 Traditional networks are not enough
However, traditional network devices (i.e., switches and mid-
dleboxes) are not up to the task, because they are built with
ﬁxed-function hardware that is customized for speciﬁc pur-
poses. For instance, traditional switch hardware is optimized
for a ﬁxed set of protocols (e.g., TCP/IP), but it does not un-
derstand context information, such as GPS location, time of
access, or library versions. Similarly, hardware middleboxes
also come with ﬁxed functions, e.g., ﬁrewalls or deep packet
inspection (DPI); function updates are typically constrained
by the speed of hardware upgrades, which is much slower than
the need for defense adaptation. As a result, traditional in-
network security mechanisms merely provide ﬁxed-function
security, such as static access control lists, ﬁrewalls, and traf-
ﬁc ﬁlters. There is a fundamental gap between the dynamic
nature of CAS and the static nature of the network devices.
2.3 How about OpenFlow-based SDN?
Software-deﬁned networking (SDN) [67] can partially ad-
dress this by the use of a software controller for control plane
programmability. Although the OpenFlow switch hardware
remains ﬁxed in function, switches can send PacketIn mes-
sages to the central controller for programmable decisions.
This paradigm underlies many recent developments in net-
work security [58, 75, 77, 80, 81, 82]. In particular, a recent
work PBS [58] supports context-aware security by running
596    29th USENIX Security Symposium
USENIX Association
Switch	control	plane
Programmable
Parser
PCIe bus
Programmable
Deparser
y
r
o
m
e
M
ALU
Match/
Action	
Table
Stages
Stages
Match/
Action	
Table
Match/
Action	
Table
Figure 1: P4 switches are programmable in hardware. Packets
ﬁrst go through a programmable parser, which supports user-
deﬁned protocols. Packet headers are then streamed through
a number of hardware stages, each of which contains stateful
registers, arithmetic logic units (ALUs), and match/action
tables. Packets can be recirculated to go through the stages
multiple times to trigger different programmable elements.
the policy enforcement module as an “SDN app” in a central-
ized controller. This app can collect context signals from all
devices and enforce access control in a global manner.
However, in traditional SDN, programmability comes at
a great cost, as it resides in a centralized software controller.
First, PacketIn messages incur a round-trip time delay be-
tween the switch and the remote controller, whereas packets
in the data plane are processed at hardware speeds. As such,
we can only programmatically process a small set of packets—
typically one packet per ﬂow (e.g., the ﬁrst packet). Second,
traditional SDNs are vulnerable to control plane saturation at-
tacks [82], where an adversary can cause high-volume trafﬁc
to be sent to the software controller. A recent work OFX [84]
has further highlighted that, for security applications that re-
quire dynamic, ﬁne-grained decisions, centralized SDN con-
trollers would pose a severe bottleneck. The key goal of Poise
is to address the limitations of traditional SDN defenses by
enforcing CAS in switch hardware.
2.4 Opportunity: Programmable data planes
Data plane programmability represents the latest step in the
networking technology. In contrast to OpenFlow-based SDN,
P4-programmable networks provide new features that can be
reconﬁgured in hardware (Figure 1). The key novelty of Poise
is to leverage them for in-network policy enforcement.
1. Customized header support for CAS. P4 switches can
recognize customized protocols and headers beyond TCP/IP
via the use of a programmable parser, without the need for
hardware upgrades. Our observation is that this allows us
to programmatically deﬁne context signals as special header
ﬁelds, and embed them in network trafﬁc. P4 switches can
directly parse context signals from client trafﬁc.
2. Security decision changes at hardware speeds. Each
hardware stage is integrated with ALUs (Arithmetic Logic
Units) that can perform computation over header ﬁelds at line-
speed. The implication for security is that, without involving
a remote software controller, switches can evaluate context
values (e.g., GPS locations) and make security decisions (e.g.,
location-based access control) directly in hardware.
3. Cross-packet state for network-wide security. Last but
not least, the hardware stages also have persistent memory
in read/write registers, and they can process packets based
on persistent state. We observe that this enables the network
to make coordinated security decisions in a network-wide
manner—decisions for one client could depend on past net-
work behaviors, or activities from other parts of the network.
These hardware features are programmable in P4 [19, 43].
Switch programs can be compiled and installed from the
switch control plane (Figure 1), which typically runs a cus-
tomized version of Linux and has general-purpose CPUs. The
P4 compiler maps a switch program to the available hardware
resources [64]. Programs that successfully compile on a target
are guaranteed to run at linespeed, due to the pipelined nature
of the hardware. Programs that exceed available hardware
resources would be rejected by the P4 compiler.
2.5 Trust model
Poise shares the same trust model as existing CAS solu-
tions [58, 91]—the context collection module at the clients
and policy enforcement module at the switch are both trusted.
As a network-based design, Poise also trusts the network
infrastructure (switches and access points). The context col-
lection module can be installed as a pre-positioned Android
kernel module with OEM support; this is common in Enter-
prise Mobility Management solutions [5, 27, 31, 91]. It only
collects and propagates context signals when devices are con-
nected to the enterprise network; standard BYOD frameworks
such as Android for Work [2] or Samsung Knox [24] can sup-
port this. Users can install unmodiﬁed Android apps. CAS
speciﬁcally protects against malicious apps, and following
existing work [58, 91], we assume that malicious apps cannot