a  set  of  probabilities  by  using  a  clustering  algorithm.  Those 
unknown  traffic  that  cannot  be  classified  into  any  known 
application  community  will  be  considered  as  new  or  unknown 
applications. 
In  the  following  sections,  we  first  discuss  the  payload  signature 
based  classification  approach,  and 
the  cross 
association  clustering  algorithm  for  classifying  the  unknown 
traffic into different known application communities. 
then  present 
3.1  Payload Signature based Classification  
The  payload  signature  based  classifier  is  to  investigate  the 
characteristics  of  bit  strings  in  the  packet  payload.  For  most 
applications,  their  initial  protocol  handshake  steps  are  usually 
different  and  thus  can  be  used  for  classification.  Moreover,  the 
protocol  signatures  can  be  modeled  through  either  public 
documents like RFC or empirical analysis for deriving the distinct 
bit  strings  on  both  TCP  and  UDP  traffic.  The  application 
signatures  are  composed  by  10  fields,  namely  application  name, 
application  description,  protocol,  srcip,  srcport,  dstip,  dstport, 
commondstport,  srccontent  and  dstcontent.  The  total  number  of 
application  signatures  is  470.  As  an  example,  we  illustrate  the 
signatures of 8 typical applications in Table 1. From Table 1, we  
3 
Table 1. Payload signatures for network applications  
Fields 
Signatures 
BitTorrent 
application 
name 
BitTorrent 
description 
protocol 
BitTorrent 
TCP 
common 
dstport 
6881 
IRC 
HTTP 
IMAP 
VNC 
NFS 
IRC 
HTTP 
IMAP 
VNC 
NFS 
Streaming 
Audio 
Streaming 
Audio 
PostgreSQL 
PostgreSQL 
6667 
80 
143 
5900 
111 
554 
TCP 
TCP 
Peer Sync 
IRC traffic 
HTTP 
traffic 
IMAPtraffic  TCP 
TCP 
VNC traffic 
NFS TCP 
TCP 
RPC traffic 
Real Time 
Streaming 
Protocol 
postgreSQL 
remote 
connection 
TCP 
src 
content 
0x0000000d060
0 
PRIVMSG 
GET 
LOGIN 
RFB 
0x000186A0 
null 
dst 
content 
null 
null 
null 
* OK 
.0 
null 
RTSP 
TCP 
5432 
null 
null 
see  that a  flow  is  IRC  traffic  if  the  protocol  for  the  flow  is  TCP 
and  the  source  content  for  the  flow  includes  a  bit  string  like 
"PRIVMSG".  Also  in  the  IRC  signature,  there  is  a  field 
commondstport  to  define  the  most  common  destination  port  for 
IRC traffic. 
The classifier is deployed on  Fred-eZone,  a  free  wireless  fidelity 
(WiFi)  network  service  provider  operated  by  the  City  of 
Fredericton  [34].  Table  2  lists  the  general  workload  dimensions 
for  the  Fred-eZone  network  capacity.  From  Table  2,  we  see,  for 
example,  that  the  unique  number  of  source  IP  addresses  (SrcIP) 
appeared  over  one  day  is  about  1,055  thousands  and  the  total 
number  of  packets  is  about  944  millions.  All  the  flows  are  bi-
directional and we clean all uni-directional flows before applying 
the classifier. Table 3 lists the classification results over one hour 
traffic collected on Fred-eZone. From Table 3, we see that about 
249,000  flows  can  be  identified  by  the  application  payload 
signatures  and  about  215,000  flows  cannot  be  identified.  A 
general result is that about 40% flows cannot be classified by the 
current application payload signature based classification method. 
Next, we present a fuzzy cross association clustering algorithm in 
order to address this issue. 
Table 2. Workload of Fred-eZone WiFi network over one day  
SrcIPs  DstIPs  Flows 
Packets  Bytes 
1055K 
1228K 
30783K 
994M 
500G 
Table 3. Classification results - one hour traffic on Fred-eZone  
Obtained Known Applications 
Unknown Applications  
Flows 
ScrIPs  DstIPs  App.  Flows 
SrcIPs  DstIPs 
249K 
102K 
202K 
82 
215K 
1001K 
1055K 
3.2  Identifying Unknown Traffic Applications  
We  propose  an  automatic  application  discovery  approach  based 
on the across association of source IPs and destination IPs in the 
first step and  destination  IPs  and  destination  Ports  in  the  second 
step. The basic idea of applying cross association algorithm is to  
study  the  association  relationship  between  known  traffic  and 
unknown  traffic.  In  numerous  data  mining  applications,  a  large 
and  sparse  binary  matrix  is  used  to  represent  the  association 
between two objects (corresponding to rows and columns). Cross 
associations are then  defined as  a set of rectangular regions  with 
different  densities.  The  clustering  goal  is  to  summarize  the 
underlying  structure  of  object  associations  by  decomposing  the 
binary  matrix  into  disjoint  row  and  column  groups  such  that  the 
rectangular intersections of groups are homogeneous with high or 
low  densities.  Previous  association  clustering  algorithms  need  to 
predefine the number  of  clusters  (i.e.  rectangles).  This,  however, 
is  not  realistic  in  our  unknown  traffic  classification  because  the 
actual  number  of  applications  is  unknown.  The  basis  of  our 
unknown  traffic  classification  methodology  is  a  novel  cross 
association clustering algorithm that can fully estimate the number 
of rows and columns automatically [35]. 
During  classification,  the  traffic  consisting  of  unknown  and 
known  flows  are  clustered  in  terms  of  the  source  IP  and  the 
destination IP. A set of rectangles is generated after this stage. We 
define  these  rectangles  as  communities  including  either  a  set  of 
flows  or  empty.  Then  flows  in  each  community  are  clustered  in 
terms  of  destination  IP  and  destination  port.  Similarly,  one 
community  will  be  decomposed  into  several  sub-communities, 
each  represents  an  specific  application  community.  The  main 
purpose of applying a two-stage cross association clustering is to 
obtain  the  exact  applications  underlying  a  general  application 
category through the association of different features. Figures 3 to 
6  illustrate  an  example  on  applying  our  approach  for  unknown 
traffic classification. 
Figure 3 is an illustration of the original sparse binary matrix for 
the  cross-association  of  the  source  IP  addresses  and  the 
destination IP addresses. Each point (element) on Figure 3 stands 
for  a  flow  connection  between  a  specified  source  IP  and  a 
specified destination IP. Figure 4 shows the clustering results after 
using  cross-association  algorithm,  the  final  number  of  partitions 
includes  10  rectangular  intersections,  where  6  intersections  are 
non-empty  and  4  are  empty.  Figure  5  shows  the  original  sparse 
binary  matrix  based  on  one  application  community  (i.e.  non-
empty rectangle in Figure 4) on which the association is described 
by  the  destination  IP  address  and  the  destination  port.  Figure  6  
4illustrates the clustering result for that specific community, where 
10 rectangular intersections are obtained, 6 are non-empty and the 
rest are empty. 
flows  are  classified 
After  all 
into  different  application 
communities,  we  have  to  label  each  application  community.  A 
simple  and  effective  way  is  to  label  each  application  community 
based  on  its  content.  In  particular,  we  calculate  the  number  of 
flows for each known application in the community and normalize 
the  numbers  into  a  set  of  probabilities  ranging  from  0  to  1.  The 
unknown flows in each application will be assigned into a specific 
application according to a set of probabilities. This idea is similar 
with  the  member  function  in  fuzzy  clustering  algorithm  and  the 
experimental  evaluation  proves  its  accuracy  and  efficiency.  An 
exception for this labeling method is if  the dominant flow  in  the 
community  is  the  unknown  flow,  the  whole  community  will  be 
labeled as "unknown", which provides a potential to discover new 
or unknown applications. 
4.  BOTNET DETECTION  
A  general  aim  for  intrusion  detection  is  to  find  various 
attack  types  by  modeling  signatures  of  known  intrusions 
(misuse detection) or profiles of normal behavior (anomaly 
detection). Botnet detection, however, is more specific due 
to  a  given  application  domain.  N-gram  byte  distribution 
has  proven  its  efficiency  on  detecting  network  anomalies. 
Wang  et  al.  examined  1-gram  byte  distribution  of  the 
packet  payload,  represent  each  packet 
into  a  256-
dimensional vector describing the occurrence frequency of 
one  of  the  256  ASCII  characters  in  the  payload  and  then 
construct the normal packet profile through calculating the 
statistical average and deviation value of normal packets to 
a  specific  application  service  (e.g.  HTTP)  [36,37]. 
Anomalies  will  be  alerted  once  a  Mahalanobis  distance 
deviation of the testing data to the normal profiles exceeds 
a predefined threshold. Gu et al. improve this approach and 
apply  it  for  detecting  malware  infection  in  their  recent 
work [38]. 
Different with previous n-gram based detection approaches, 
our  method  extends  n-gram  frequency  into  a  temporal 
domain  and  generates  a  set  of  256-dimensional  vector 
representing  the  temporal-frequent  characteristics  of  the 
256  ASCII  binary  bytes  on  the  payload  over  a  predefined 
time  interval.  The  temporal  feature  is  important  in  botnet 
detection  due  to  two  empirical  observations  of  botnets 
behavior:  (1)  the  response  time  of  bots  is  usually 
immediate and accurate once they receive commands from 
botmaster, while normal human behavior might perform an 
action with various possibilities after a reasonable thinking 
time, and (2) bots basically have preprogrammed activities 
based on botmaster's commands, and thus all bots might be 
synchronized with each other. These two observations have 
been confirmed  by  a  preliminary  experiment  conducted  in 
[39]. 
After obtaining the n-gram (n = 1 in this case) features for 
flows over a time window, we then apply an agglomerative 
Figure 3. Original binary matrix of {src IP, dst IP} 
Figure 4. Clustered results 
Figure 5. Original binary matrix of {dst IP, dst Port} 
Figure 6. Clustering results 
5traffic 
is  sensitive 
hierarchical clustering algorithm to cluster the data objects 
with 256 features. We do not construct the normal profiles 
because  normal 
the  practical 
networking  environment  and  a  high  false  positive  rate 
might be generated when deploying the training model on a 
new 
agglomerative 
hierarchical clustering is unsupervised and does not define 
threshold  that  needs  to  be  tuned  in  different  cases.  In  our 
approach, the final number of clusters is set to 2. 
environment. 
contrast, 
the 
In 
to 
We denote the 256-dimensional n-gram byte distribution as 
the 
a  vector
> ,  where 
stands  for 
,...,
 ,  the  detection  approach  is  described 
long  period  on  a  large  scale  WiFi  ISP  network,  the  IRC 
botnet  traffic  collected  on  a  honeypot,  and  the  IRC/Web 
botnet traffic collected on our testbed network, we derive a 
new  metric,  standard  deviation 
σ  for  each  cluster  m,  to 
m
differentiate  botnet  clusters  from  normal  traffic  clusters. 
The  higher  the  value  of  average 
σ over  256  ACSII 
m
characters  for  flows  on  a  cluster  m,  the  more  normal  the 
cluster  m  is.  This  is  reasonable  because  during  normal 