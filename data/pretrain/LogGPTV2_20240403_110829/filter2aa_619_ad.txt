Table 10-10 for a complete list of supported filename macros.
Table 10-9. Supported destination drivers in syslog-ng.conf
Driver
Description
file("filename[$MACROS]" )
Write messages to standard ASCII-text log file. If file doesn’t exist,
syslog-ng will create it. Macros may be used within or in lieu of a file-
name; these allow dynamic naming of files (see Table 10-10).
tcp("address" [port(#);] )
TransmitmessagesviaTCPtothespecifiedTCPport(default=514)on
the specified IP address or hostname. (You must specify an address or
name.)
udp("address" [port(#);] )
Transmit messages via UDP to the specified UDP port (default=514)
onthespecifiedIPaddressorhostname.(Youmustspecifyanaddress
or name.)
pipe("pipename")
Send messages to a named pipe such as /dev/xconsole.
unix_stream("filename" [options])
Send messages in connection-oriented stream mode to a Unix socket
such as /dev/log.
unix_dgram("filename" [options])
Send messages in connectionless datagram mode to a Unix socket
such as /dev/log.
usertty( username )
Send messages to specified user’s console.
program("/path/to/program")
Send messages to standard input of specified program with specified
options.
Table 10-10. Macros supported in file() destinations
Macro
Expands to
PROGRAM
The name of the program that sent the message
HOST
The name of the host that originated the message
FACILITY
The facility to which the message was logged
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
Syslog-ng
|
343
As with syslog, if a file specified in a file() destination doesn’t exist, syslog-ng will cre-
ate it. Unlike syslog, Syslog-ng has a number of options that can be implemented
both globally and on a per-log-file basis. (Global settings are overridden by per-log-
file settings, allowing you to create “general rules” with exceptions.)
For example, whether and how syslog-ng creates new directories for its log files is
controlled via the options create_dirs(), dir_owner(), dir_group(), and dir_perm().
Example 10-16 illustrates the use of these options within a destination{} statement.
Example 10-16 also happens to show the default values of the dir_owner, dir_group(),
and dir_perm() options. While this may seem unrealistic (why would anyone go to
the trouble of setting an option to its default?), it’s necessary if nondefaults are speci-
fied in a global options{} statement and you want the default values used for a spe-
cific file—remember, options set in a destination{} statement override those set in an
options{} statement.
Other global/file-specific options can be used to set characteristics of the log file
itself: owner(), group(), and perm(), which by default are set to root, root, and 0600,
respectively. In case you’re wondering, there is no create_file() option—syslog-ng has
the irrevocable ability to create files (unless that file’s path includes a nonexistent
directory and create_dirs() is set to no). Example 10-17 shows a destination defini-
tion that includes these options.
PRIORITY or LEVEL (synonyms)
The designated priority level
YEAR
The current yeara
MONTH
The current montha
DAY
The current daya
WEEKDAY
The current day’s name (Monday, etc.)a
HOUR
The current houra
MIN
The current minutea
SEC
The current seconda
a If the global option use_time_recvd() is set to yes, then this macro’s value will be taken from the local system time when the message
was received; otherwise, for messages from remote hosts, the timestamp contained in the message will be used.
Example 10-16. Controlling a file() destination’s directory-creating behavior
destination d_mylog { file("/var/log/ngfiles/mylog" create_dirs(yes) dir_owner(root) \
dir_group(root) dir_perm(0700)); };
Example 10-17. Options that affect file properties
destination d_micklog { file("/var/log/micklog" owner(mick) group(wheel) perm(0640)); };
Table 10-10. Macros supported in file() destinations (continued)
Macro
Expands to
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
344
|
Chapter 10: System Log Management and Monitoring
The other file() option we’ll cover here is sync(), which can be used to limit the fre-
quency with which log files are synchronized. This is analogous to syslog’s “-” pre-
fix, but much more granular: whereas the “-” merely turns off synchronization, file()
accepts a numeric value that delays synchronization to as many or as few messages as
you like.
The higher the value, the more messages are cached prior to filesystem synchroniza-
tion and, therefore, the fewer “open for read” actions on the filesystem. The lower
the number, the lower the chances of data loss and the lower the delay between a
message being processed and written to disk.
By default, sync() is set to zero, meaning “synchronize after each message.” In gen-
eral, the default or a low sync() value is preferable for low-volume scenarios, but
numbers in the 100s or even 1,000s may be necessary in high-volume situations. A
good rule of thumb is to set this value to the approximate number of log-message
lines per second your system must handle at peak loads.
If you use a log monitor such as Swatch (described later in this chap-
ter) to be alerted of attacks in progress, don’t set sync() too high. If an
intruder deletes a log file, all of Syslog-ng’s cached messages will be
lost without having been parsed by the log monitor. (Log monitors
parse messages as they are written, not beforehand.)
Filters
And now we come to some of the serious magic in Syslog-ng: message filters. Filters,
while strictly optional, allow you to route messages based not only on priority/level
and facility (which syslog can do), but also on the name of the program that sent the
message, the name of the host that forwarded it over the network, a regular expres-
sion evaluated against the message itself, or even the name of another filter.
A filter{} statement consists of a label (the filter’s name) and one or more criteria con-
nected by operators (and, or, and not are supported). Table 10-11 lists the different
types of criteria that a filter{} statement may contain.
Table 10-11. filter{} functions
Function (criterion)
Description
facility( facility-name )
Facility to which the message was logged (see Table 10-1 for facility names).
priority( priority-name )
priority( priority-name1,
priority-name2, etc. )
priority( priority-name1 ..
priority-name2 )
Priority assigned to the message (see Table 10-2 for priority-names); a list of
priorities separated by commas may be specified, or a range of priorities
expressed as two priorities (upper and lower limits) separated by two periods.
level( priority-name )
Same as priority().
program( program-name )
Program that created the message.
host( hostname )
Host from which message was received.
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
Syslog-ng
|
345
Example 10-18 shows several filter{} statements taken from the default syslog-ng.conf
file included in Debian 2.2’s syslog-ng package.
The first line in Example 10-17, filter f_mail, matches all messages logged to the
mail facility. The second filter, f_debug, matches all messages not logged to the auth,
authpriv, news, and mail facilities.
The third filter, f_messages, matches messages of priority levels info through warn,
except those logged to the auth, authpriv, cron, daemon, mail, and news facilities.
The last filter, called f_cother, matches all messages of priority levels debug, info,
notice, and warn, and also all messages logged to the daemon and mail facilities.
When you create your own filters, be sure to test them using the logger command.
See the section entitled “Testing System Logging with logger” later in this chapter.
Log statements
Now we combine the elements we’ve just defined (sources, filters, and destinations)
into log{} statements. Arguably, these are the simplest statements in syslog-ng.conf:
each consists only of a semicolon-delimited list of source(), destination(), and,
optionally, filter() references. (Filters are optional because a log{} statement contain-
ing only source() and destination() references will send all messages from the speci-
fied sources to all specified destinations.)
Elements from several previous examples are combined in Example 10-19, which
culminates in several log{} statements.
match( regular-expression )
Regular expression to evaluate against the message’s body.
filter( filter-name )
Other filter to evaluate.
Example 10-18. Filters
filter f_mail { facility(mail); };
filter f_debug { not facility(auth, authpriv, news, mail); };
filter f_messages { level(info .. warn) and not facility(auth, authpriv, cron, daemon,
mail, news); };
filter f_cother { level(debug, info, notice, warn) or facility(daemon, mail); };
Example 10-19. Another sample syslog-ng.conf file
source s_loc { unix-stream("/dev/log"); internal(); };
source s_tcpmessages { tcp( ip(192.168.190.190); port(10514);); };
destination d_dailylog { file("/var/log/messages.$WEEKDAY"); };
destination d_micklog { file("/var/log/micklog" owner(mick) perm(0600)); };
filter f_mail { facility(mail); };
Table 10-11. filter{} functions (continued)
Function (criterion)
Description
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
346
|
Chapter 10: System Log Management and Monitoring
As you can see in this example, all messages from the host 192.168.190.190 are writ-
ten to the log file /var/log/micklog, as are all local mail messages. Messages that
match the f_messages() filter are written to the log file /var/log/messages.
$WEEKDAY, e.g., /var/log/Sun, /var/log/Mon, etc.
Example 10-19 isn’t very realistic, though: no nonmail messages with priority-level
higher than warn are dealt with. This begs the question, “Can I get syslog-ng to filter
on ‘none of the above?’” The answer is yes: to match all messages that haven’t yet
matched filters in previous log{} statements, you can use the built-in filter DEFAULT.
The following line, if added to the bottom of Example 10-18, will cause all messages
not processed by any of the prior three log{} statements to be written to the daily log
file:
log { source(s_loc); filter(DEFAULT); destination(d_dailylog); };
Advanced Conﬁgurations
As you’re hopefully convinced of by this point, Syslog-ng is extremely flexible, so
much so that it isn’t feasible to illustrate all possible Syslog-ng configurations. I
would be remiss, however, if I didn’t list at least one advanced syslog-ng.conf file.
Example 10-20 shows a setup that causes syslog-ng to watch out for login failures
and access denials by matching messages against a regular expression and then send-
ing the messages to a shell script (listed in Example 10-21).
filter f_messages { level(info .. warn) and not facility(auth, authpriv, cron, daemon,
mail, news); };
log { source(s_tcpmessages); destination(d_micklog); };
log { source(s_loc); filter(f_mail); destination(d_micklog); };
log { source(s_loc); filter(f_messages); destination(d_dailylog); };
Example 10-20. Using syslog-ng as its own log watcher
# WARNING: while this syslog-ng.conf file is syntactically correct and complete, it is
# intended for illustrative purposes only -- entire categories of message
# are ignored!
source s_local { unix_stream("dev/log"); internal(); };
filter f_denials { match("[Dd]enied|[Ff]ail"); };
destination d_mailtomick { program("/usr/local/sbin/mailtomick.sh"); };
log { source(s_local); filter(f_denials); destination(d_mailtomick); };
Example 10-21. Script for emailing log messages
#!/bin/bash
# mailtomick.sh
# Script which listens for standard input and emails each line to mick
#
Example 10-19. Another sample syslog-ng.conf file (continued)
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
Syslog-ng
|
347
The most important lines in Example 10-20 are the filter f_denials and the destina-
tion d_mailtomick. The filter uses a match() directive containing a regular expression
that matches the strings “denied,” “Denied,” “Fail,” and “fail.”* The destination d_
mailtomick sends messages via a program() declaration to the standard input of a
script I wrote called /usr/local/sbin/mailtomick.sh.
Before we go further in the analysis, here’s an important caveat:
program() opens the specified program once and leaves it open until
syslog-ng is stopped or restarted. Keep this in mind when deciding
whether to use pipe() or program() (i.e., pipe() doesn’t do this), and in
choosing what sort of applications you invoke with program().
In some cases, keeping a script open (actually a bash process) is a
waste of resources and even a security risk (if you run syslog-ng as
root). Furthermore, the particular use of email in Examples 10-19 and
10-20 introduces the possibility of Denial of Service attacks (e.g., fill-
ing up the system administrator’s mailbox). But under the right cir-
cumstances, such as on a non-Internet-accessible host that has a few
CPU cycles to spare, this is a legitimate use of Syslog-ng.
The script itself, /usr/local/sbin/mailtomick.sh, simply reads lines from the standard
input and emails each line to mick@pinheads-on-ice.net. Since syslog-ng needs to
keep this script open, the read command is contained in an endless loop. This script
will run until the syslog-ng process that invoked it is restarted or killed.
In the interest of focusing on the most typical uses of Syslog-ng, I’ve listed some syslog-
ng.conf options without giving examples of their usage and omitted a couple of other
options altogether. Suffice it to say that the global/file option log_fifo_size() and the
global options time_reap(), time_reopen(), gc_idle_threshold(), and gc_busy_threshold()
are useful for tuning syslog-ng’s performance to fit your particular environment.
The official (maintained) documentation for Syslog-ng is the Syslog-ng
Reference Manual. PostScript, SGML, HTML, and ASCII text versions
of this document are included in the /doc directory of Syslog-ng’s
source-code distribution.
For advanced or otherwise unaddressed issues, the best source of Sys-
log-ng information is the Syslog-ng mailing list and its archives. See
http://lists.balabit.hu/mailman/listinfo/syslog-ng for subscription infor-
mation and archives.
while read line;
do
echo $line | mail -s "Weirdness on that Linux box" PI:EMAIL
done
* If you’re completely new to regular expressions, I highly recommend Mastering Regular Expressions by Jef-
frey E. F. Friedl (O’Reilly).
Example 10-21. Script for emailing log messages (continued)
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
348
|
Chapter 10: System Log Management and Monitoring
Testing System Logging with logger
Before we leave the topic of system-logger configuration and use, we should cover a
tool that can be used to test your new configurations, regardless of whether you use
syslog or Syslog-ng: logger. logger is a command-line application that sends mes-
sages to the system logger. In addition to being a good diagnostic tool, logger is espe-
cially useful for adding logging functionality to shell scripts.
The usage we’re interested in here, of course, is diagnostics. It’s easiest to explain
how to use logger with an example.
Suppose you’ve just reconfigured syslog to send all daemon messages with priority
“warn” to /var/log/warnings. To test the new syslog.conf file, you’d first restart
syslogd and klogd and then you’d enter a command like the one in Example 10-22.
As you can see, logger’s syntax is simple. The -p parameter allows you to specify a
facility.priority selector. Everything after this selector (and any other parameters or
flags) is taken to be the message.
Because I’m a fast typist, I often use while…do…done statements in interactive bash
sessions to run impromptu scripts (actually, just complex command lines).
Example 10-23’s sequence of commands works interactively or as a script.
This sends tests messages to the daemon facility for each of all eight priorities.
Example 10-24, presented in the form of an actual script, generates messages for all
facilities at each priority level.
Example 10-22. Sending a test message with logger
mylinuxbox:~# logger -p daemon.warn "This is only a test."
Example 10-23. Generating test messages from a bash prompt
mylinuxbox:~# for i in {debug,info,notice,warning,err,crit,alert,emerg}
> do
> logger -p daemon.$i "Test daemon message, level $I"