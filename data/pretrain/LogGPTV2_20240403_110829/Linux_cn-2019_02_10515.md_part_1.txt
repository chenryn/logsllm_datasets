---
author: Tom Strassner
category: 技术
comments_data:
- date: '2019-07-25 15:47:04'
  message: 在“二者动机”这一小节，第二句有一个错别字，正确是“相去甚远”。
  postip: 221.218.208.2
  username: 来自北京的 Chrome 75.0|GNU/Linux 用户
- date: '2020-02-19 22:07:19'
  message: 最后一个标题，应该是“脚注”而不是“角注”
  postip: 183.252.35.53
  username: 来自福建的 Firefox 72.0|Windows 10 用户
count:
  commentnum: 2
  favtimes: 0
  likes: 0
  sharetimes: 10
  viewnum: 9413
date: '2019-02-06 22:39:59'
editorchoice: true
excerpt: 从这些趋势中可以推断，JSON 的发展将统一 Web 的信息交换格式，XML 的使用率将继续降低。我相信 JSON 很快就会在 Web 开发中超过
  XML。至于其他领域，XML 比 JSON 更好的情况并不多。
fromurl: https://www.cs.tufts.edu/comp/150IDS/final_papers/tstras01.1/FinalReport/FinalReport.html
id: 10515
islctt: true
largepic: /data/attachment/album/201902/06/223948jqjyy979i1ro9m6o.jpg
permalink: /article-10515-1.html
pic: /data/attachment/album/201902/06/223948jqjyy979i1ro9m6o.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 从这些趋势中可以推断，JSON 的发展将统一 Web 的信息交换格式，XML 的使用率将继续降低。我相信 JSON 很快就会在 Web 开发中超过
  XML。至于其他领域，XML 比 JSON 更好的情况并不多。
tags:
- JSON
- XML
thumb: false
title: XML 与 JSON 优劣对比
titlepic: true
translator: wwhio
updated: '2019-02-06 22:39:59'
---
![](/data/attachment/album/201902/06/223948jqjyy979i1ro9m6o.jpg)
### 简介
XML 和 JSON 是现今互联网中最常用的两种数据交换格式。XML 格式由 W3C 于 1996 年提出。JSON 格式由 Douglas Crockford 于 2002 年提出。虽然这两种格式的设计目标并不相同，但它们常常用于同一个任务，也就是数据交换中。XML 和 JSON 的文档都很完善（[RFC 7159](https://tools.ietf.org/html/rfc7159)、[RFC 4825](https://tools.ietf.org/html/rfc4825)），且都同时具有 人类可读性   human-readable 和 机器可读性   machine-readable 。这两种格式并没有哪一个比另一个更强，只是各自适用的领域不用。（LCTT 译注：W3C 是[互联网联盟](https://www.w3.org/)，制定了各种 Web 相关的标准，如 HTML、CSS 等。Douglas Crockford 除了制定了 JSON 格式，还致力于改进 JavaScript，开发了 JavaScript 相关工具 [JSLint](http://jslint.com/) 和 [JSMin](http://www.crockford.com/javascript/jsmin.html)）
### XML 的优点
XML 与 JSON 相比有很多优点。二者间最大的不同在于 XML 可以通过在标签中添加属性这一简单的方法来存储 元数据   metadata 。而使用 JSON 时需要创建一个对象，把元数据当作对象的成员来存储。虽然二者都能达到存储元数据的目的，但在这一情况下 XML 往往是更好的选择，因为 JSON 的表达形式会让客户端程序开发人员误以为要将数据转换成一个对象。举个例子，如果你的 C++ 程序需要使用 JSON 格式发送一个附带元数据的整型数据，需要创建一个对象，用对象中的一个 名称/值对   name/value pair 来记录整型数据的值，再为每一个附带的属性添加一个名称/值对。接收到这个 JSON 的程序在读取后很可能把它当成一个对象，可事实并不是这样。虽然这是使用 JSON 传递元数据的一种变通方法，但他违背了 JSON 的核心理念：“ JSON 的结构与常规的程序语言中的结构相对应，而无需修改。   JSON’s structures look like conventional programming language structures. No restructuring is necessary. ”   1 
虽然稍后我会说这也是 XML 的一个缺点，但 XML 中对命名冲突、 前缀   prefix 的处理机制赋予了它 JSON 所不具备的能力。程序员们可以通过前缀来把统一名称给予两个不同的实体。   2  当不同的实体在客户端中使用的名称相同时，这一特性会非常有用。
XML 的另一个优势在于大多数的浏览器可以把它以 具有高可读性和强组织性的方式   highly readable and organized way 展现给用户。XML 的树形结构让它易于结构化，浏览器也让用户可以自行展开或折叠树中的元素，这简直就是调试的福音。
XML 对比 JSON 有一个很重要的优势就是它可以记录 混合内容   mixed content 。例如在 XML 中处理包含结构化标记的字符串时，程序员们只要把带有标记的文本放在一个标签内就可以了。可因为 JSON 只包含数据，没有用于指明标签的简单方式，虽然可以使用处理元数据的解决方法，但这总有点滥用之嫌。
### JSON 的优点
JSON 自身也有很多优点。其中最显而易见的一点就是 JSON 比 XML 简洁得多。因为 XML 中需要打开和关闭标签，而 JSON 使用名称/值对表示数据，使用简单的 `{` 和 `}` 来标记对象，`[` 和 `]` 来标记数组，`,` 来表示数据的分隔，`:` 表示名称和值的分隔。就算是使用 gzip 压缩，JSON 还是比 XML 要小，而且耗时更少。   3  正如 Sumaray 和 Makki 在实验中指出的那样，JSON 在很多方面都比 XML 更具优势，得出同样结果的还有 Nurseitov、Paulson、Reynolds 和 Izurieta。首先，由于 JSON 文件天生的简洁性，与包含相同信息的 XML 相比，JSON 总是更小，这意味着更快的传输和处理速度。第二，在不考虑大小的情况下，两组研究    4     5  表明使用 JSON 执行序列化和反序列化的速度显著优于使用 XML。第三，后续的研究指出 JSON 的处理在 CPU 资源的使用上也优于 XML。研究人员发现 JSON 在总体上使用的资源更少，其中更多的 CPU 资源消耗在用户空间，系统空间消耗的 CPU 资源较少。这一实验是在 RedHat 的设备上进行的，RedHat 表示更倾向于在用户空间使用 CPU 资源。   6  不出意外，Sumaray 和 Makki 在研究里还说明了在移动设备上 JSON 的性能也优于 XML。   7  这是有道理的，因为 JSON 消耗的资源更少，而移动设备的性能也更弱。
JSON 的另一个优点在于其对对象和数组的表述和 宿主语言   host language 中的数据结构相对应，例如 对象   object 、 记录   record 、 结构体   struct 、 字典   dictionary 、 哈希表   hash table 、 键值列表   keyed list 还有 数组   array 、 向量   vector 、 列表   list ，以及对象组成的数组等等。   8  虽然 XML 里也能表达这些数据结构，也只需调用一个函数就能完成解析，而往往需要更多的代码才能正确的完成 XML 的序列化和反序列化处理。而且 XML 对于人类来说不如 JSON 那么直观，XML 标准缺乏对象、数组的标签的明确定义。当结构化的标记可以替代嵌套的标签时，JSON 的优势极为突出。JSON 中的花括号和中括号则明确表示了数据的结构，当然这一优势也包含前文中的问题，在表示元数据时 JSON 不如 XML 准确。
虽然 XML 支持 命名空间   namespace 与 前缀   prefix ，但这不代表 JSON 没有处理命名冲突的能力。比起 XML 的前缀，它处理命名冲突的方式更简洁，在程序中的处理也更自然。在 JSON 里，每一个对象都在它自己的命名空间中，因此不同对象内的元素名称可以随意重复。在大多数编程语言中，不同的对象中的成员可以包含相同的名字，所以 JSON 根据对象进行名称区分的规则在处理时更加自然。
也许 JSON 比 XML 更优的部分是因为 JSON 是 JavaScript 的子集，所以在 JavaScript 代码中对它的解析或封装都非常的自然。虽然这看起来对 JavaScript 程序非常有用，而其他程序则不能直接从中获益，可实际上这一问题已经被很好的解决了。现在 JSON 的网站的列表上展示了 64 种不同语言的 175 个工具，它们都实现了处理 JSON 所需的功能。虽然我不能评价大多数工具的质量，但它们的存在明确了开发者社区拥抱 JSON 这一现象，而且它们切实简化了在不同平台使用 JSON 的难度。
### 二者的动机
简单地说，XML 的目标是标记文档。这和 JSON 的目标想去甚远，所以只要用得到 XML 的地方就尽管用。它使用树形的结构和包含语义的文本来表达混合内容以实现这一目标。在 XML 中可以表示数据的结构，但这并不是它的长处。
JSON 的目标是用于数据交换的一种结构化表示。它直接使用对象、数组、数字、字符串、布尔值这些元素来达成这一目标。这完全不同于文档标记语言。正如上面说的那样，JSON 没有原生支持 混合内容   mixed content 的记录。