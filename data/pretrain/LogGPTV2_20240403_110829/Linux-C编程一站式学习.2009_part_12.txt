printf("%d\n", result); 
int result = factorial(3);
else{
else{
int result = n * recurse;
int recurse = factorial(n-1);result:
int recurse = factorial(n-1);
retum 1;
int recurse =factorial(n-1);L
retum 1;
retum result;
int recurse = factorial(n-1);
retum 1;
recurse:
result:
n: 2
result:
recurse:
司
result:
result:
result:
recurse:
recurse:
n: 2
result:
n: 3
recurse:
recurse:
recurse:
recurse:
司
result:
result:
n: 3
result:
result:
0
1
factorial(1)
factorial(2)
factorial(3)
main()
factorial(1) result: 1*1
factorial(2)
factorial(3)
main()
factorial(2) result: 2*1
factorial(3)
main()
factorial(3) result: 3*2
main()
main()
factorial(0)
recurse: 1
n: 3
result:
recurse: 2
n: 3
result:
result:6
recurse: 1
recurse:
result:
recurse:
司
recurse:
factorial(1)
factorial(2)
factorial(3)
main()
factorial(2)
factorial(3)
main()
factorial(3)
main()
main()
6
---
## Page 93
在写factorial(n)的代码时写到这个地方:
正确的。这种"相信"称为Leap of Faith，首先相信一
正确的距离，把半径传给area它就能返回正确的面积，
不需要，
在写这
是相信它能打印，
是
我们看上图右侧存储空间的变化过程，
的存储空间变化情况。
图中用实线箭头表示调用，用虚线箭头表示返回，右侧的框表示在调用和返回过程中各层函数调用
了这两个函数：
了factorial(3)是正确的，
法
世
放
质
口
可
每个
个函数只调用一
写一个递归函数时，
栈帧。
系统为程序的运行预留了-
数调用的参数和局部变量的存储空间
的数据结构称为堆栈或栈（Stack）
能访问它
这一端的存储单元，而不能访问内部的存储单元，
着函数调用的层层返回，
4．依此类推，
2.
1．main()有一个局部变量result，用一个框表示。
公式计算3!的过程是一样的，
数调用的参数n同时存在，
时却是两个不同的参数n。
每次调用函数时分配参数和局部变量的存储空间，
示factorial(3)的参数和局部变量，其中n已初始化为3。
调用factorial(3)时要分配参数和局部变量的存储空间，
一句的时候，
间。factorial(3)和factorial(2)是两次不同的调用，
return area(distance(xl, yl, x2, y2));
因为我们已经相信这两个函数能正确工作了
数调用都需
它的参数和局部变量,
 recurse = factorial(n-l);
，请读者对照着图自己分析整个调用过程。读者会发现这个过程和前面我们用数学
能正确完成
一次就返回
，我们需要钻进distance和area函数中去走一趟才知道我们调用得是否正确吗？
要
钻进去
你如何证明它是
然
回
你怎么办？别的函数你可以跟踪它的调用过程去证明它的正确性，
 存储空间的这一端又逐渐缩短，
后
一块栈空间，
一
立刻测试证明
看的。我们在调用printf时没有钻进去看它是怎么打印的，
它
但是对于递归函数，这么跟下去只会跟得你头都大了。事实上并
，而不能访问factorial(3)和main()的参数和局部变量。
，所以在原来的基础上多画一
都是先一步步展开然后再一步步收回去。
是正确的？像上面那样跟踪函数的调用和返回过程算是
，随着函数调用的层层深入，
随着函数调用和返回而不断变化的这一端称为栈顶，每
然后就继续写下面的代码了，
函数调用时就在这个栈空间里分配栈帧，
 又要分配factorial(2)的参数和局部变量,
了这两个函数是正确的，
如果是factorial(1oo）呢？虽然我们已经证明
一些结论，然后再用它们去证明另外一些结论。
，比如当factorial(2)的存储空间位于末端时,
因此调用它们去完成另外一件工作也应该是
也就是相信把坐标传给distance它就能返回
退出函数时释放它们的存储空
 并且每次访问参数和局部变量时只能访
一个框。
factorial(3)的参
，于是在main（)的下面又多了一个框表
 存储空间的一端逐渐增长，
然后我们写area_point时调用
。在上-
，结果也一样，
、局部变量和作用域"讲过，
一节中，我们写
了一次参数n，
函数返回时就释
但这不能代
于是
，具有这种
所以两个
，我们只
是一种办
但运行
8
因
然
性
回
为
后
---
## Page 94
参数列表→表达式，表达式，…
表达式 →表达式(参数列表)
语法规则中，
如[IATLC]。
数学理论上为计算机的设计指明了方向。有兴趣的读者可以参考有关计算理论的教材，例
的
到目前为止我们只学习了全部C语法的一个小的子集，
止，这称为无穷递归（Infinite recursion）。
那么这个函数就会永远调用下去，直到操作系统为程序预留的栈空间耗尽程序崩溃（段错误）为
个函数也不正确。如果factorial函数漏掉了Base Case:
Case正确，递推关系正确。写递归函数时一定要记得写Base Case，
学时学的数学归纳法（Mathematical Induction）
是正确的，
信
递
功
为
高
高
设
现
确性就是要证明factorial(n-1)的正确性,
个n返回这一步显然也没有疑问，那么我们的函数实现就是正确的。因此要证明factorial(n)的正
这
调用它，
可Leap of Faith本身就是Leap（跳跃）的，不是吗？如果你相信你正在写的递归函数是正确的，
果。当然这有点奇怪：
么recurse就是(n-1)!,
这时，如果我们相信factorial(n-1)是正确的，
千
的精髓所在。我们学习在C的语法时已经看到很多递归定义了
归绝不只是为解决一些奇技淫巧的数学题旦而想出来的招，
能？这些要
什么计算机要设计成这样？
级语言有
级语
算机指令
事用递归都能做，
讲到呢，
在学的这些
特性来代替。
么说好像有点儿玄，
语言写的租
，然后在此基础上写完这个递归函数，那么它就会是正确的，
int factorial(int n)
令能
丰
因此factorial(2)也正确，依此类推，
“表达式"就是递归定义的：
归功于早期的计算机科学家，
富的语法特
做的所有
已经
，也就是说，
return result;
int recurse = factorial(n-1);
循环在
院
int
最
最终也要
反之亦然，
全覆
，我们从数学上严格证明一下factorial函数的正确性。
事
resul
那么result就是n*(n-1)!，
要翻译厅
情就是娄
下
盖
+
依此类推下去，
但七
章
第1节“程序和编程语言"讲的五种基本指令了
设计时怎么想到计算机应该具备
也只是比指令
事实
成指令
数据存取、
要学的C语言特性会使代码写起来更加方便，
以后还要学习很多C语言特性，但全部都可以用已经学过的
上有的编程语
recurse;
但
指今
有
例如Alan Turing，
令写起来
运
同理，
>做不到的事情
一个重要的结论就是递归和循环是等
最后
算
，也就是相信传给它n-1它就能返回(n-1)!，那
也就是n!,
要证明factorial(n-1)的正确性就是要证
测试禾
来更方便而
用数学归纳法来证明只需要证明两点：Base 
11
（比如某些LISP实现）
，但是现在应该告诉你：这个子集是完备的
和分支、
肯定是正确的，
情
它是计算机的精髓所在，
只要后者正确，
他们在计算机还没有诞生的年代就从
备这几样功能，
已
级语
 循环 (或递归)
例如在第1节“数学函数"讲过的
能估
，从而值得你相信它正确。
写的程序
做的事情是
否则即使递推关系正确，
序肯定也做不到，
只有递归而没有循环
，刚才说
但不是必不可少的，
它就是程序中的-
而不是更多或更少的
在后者的结果上乘
是
有的读者会说循环还
一样多的。那么
价的，
在计算机上运
，也是编程语
用循环能
6
整
达
做
并
---
## Page 95
[ 例如很多编程书都会举例的汉诺塔问题，本书不打算再重复这个题目了。
2.增量式开发
感兴趣的读者可以参考[SICP]第1.2节的简略证明。
Lamé定理
上面两个看似毫不相干的问题之间却有一个有意思的联系：
fib(n)=fib(n-1)+fib(n-2)
fib(0)=1
2、编写递归函数求Fibonacci数列的第n项，这个数列是这样定义的:
你的程序使之适用于所有整数，而不仅仅是正整数。
Euclid算法是很容易证明的，
用Euclid算法：
1、编写递归函数求两个正整数a和b的最大公约数（GCD，Greatest Common Divisor），使
习题 请点评
可见编译器在解析我们写的程序时一定也用了大量的递归，有关编译器的实现原理可参考[Dragon
语句 →if(控制表达式)语句 
再比如在第1节“i语句"讲过的语规则中，“语句"也是递归定义的：
fib(1)=1
Bookl.
2．否则，最大公约数等于b和aab的最大公约数。
1．如果a除以b能整除，则最大公约数是b。
页
于Fibonacci数列的第k项。
如果Euclid算法需要k步来计算两个数的GCD，那么这两个数之中较小的一个必然大于等
请读者自己证明一下为什么这么算就能算出最大公约数。最后，修改
全国嵌入式人才培训基地
起始页
上一级
第6章循环语句
下一
6
---
## Page 96
6.goto语句和标号
5.嵌套循环
4. break和continue语句
3. for语句
2. do/while语句
目录
第 6 章 循环语句 请点评
3.递归
1. while语句
一页
全国嵌入式人才培训基地
全国嵌入式人才培训基地
部分I.C语言入门
第6章循环语句
起始页
1. while语句
下一页
---
## Page 97
改变，
比循环程序更容易理解。此外还有一点不同：看图5.2“factorial(3)的调用过程",
可见，
两种模式在循环中都很常见。
环结束后得到的累积值就是最终结果,
变量result在这个循环中的作用是累加器（Accumulator）
表达式的值就是假，那么直接跳到return语句，循环体一次都不执行。
语句再执行-
如果控制表达式的值为真，
语句→while (控制表达式)语句
的语句块。
和if语句类似，while语句由一个控制表达式和一个子语句组成，子语句可以是由若干条语句组成
如factoria1用while语句可以写成：
最不擅长的。虽然迭代用递归来做就够了，
它做重复迭代的工作,
是把n乘到(n-1)!上然后把结果返回。虽说是重复，但每次做都稍微有一点区别（n的值不一样）
在第3节“递归"中，我们介绍了用递归求n!的方法，
1. while语句请点评
3
弟
值
些公式要展开是非常复杂的甚至是不可能的，
3·2·1。把公式展开了理解会更直观一些，
果用加法累积则result的初值应该是0。变量n是循环变量（LoopVariable）
上一页
推关系n!=n·(n-1)!，
是递减的
值，
，而上面的循环程序则通过对n和result这两个变量多次赋值来达到同样的目的。前一种思路
，递归能解决的问题用循环也能解决，但解决问题的思路不一样。用递归解决这个问题靠的是
 在控制表达式中要测试它的值，这两点合起来起到控制循环次数的作用，
int factorial(int n)
的。
也有些循环采用递增的循环变量。这个例子具有一定的典型性，累加器和循环变量这
return result;
while (n
int result = 1;
用循环解决这个问题则更像是把这个公式展开了：n!=n-(n-1)-(n-2)...
因为把一件工作重复做成千上万次而不出错正是计算机最擅长的，也是人类
，子语句就被执行，
，由于这个例子是用乘法来累积的，所以resuit的初值是1，
全国嵌入式人才培训基地
 所以有些时候循环程序比递归程序更容易理解。但也有
，但C语言提供了循环语句使迭代程序写起来更方便。例
第6章循环语句
1. while语句
，然后再次测试控制表达式的值，如果还是真，
.这种控制流程称为循环（Loop）
 反倒是递推关系更直观一些，