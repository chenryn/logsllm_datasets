security when H is modeled as a random oracle.
Since a malicious PB can fully determine the values of bi,
however, it can clearly choose them in such a way that each
i } satisfy some predicate, e.g., so that the least-
of the {mxi
signiﬁcant bit of mxi
is equal to 0 for all i. This holds true
i
regardless of how H is instantiated.
APPENDIX C
ATTACK ON MASCOT
Recall that the MASCOT paper [30] recommends instanti-
ating the hash function as H(x, i) = π(x) ⊕ x, and this was
implemented by SPDZ-2 [47]. In Section II, we showed an
attack on the OT-extension protocol using this H. Here, we
show that the same ideas can be used to attack the triple-
generation protocol used in MASCOT in the FΔ-ROT hybrid
model, which in turn can be used to violate privacy of the
overall MASCOT protocol.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:34 UTC from IEEE Xplore.  Restrictions apply. 
839
The attack on MASCOT discussed in Section II focuses on
standard OT, but applies to random OT as well. In particular, a
corrupted receiver can send the same choice bits (denoted as x)
and messages (denoted as b) to FΔ-ROT across all executions i.
In this case, the ai values obtained by the sender are also the
same for all i since ai = bi ⊕ xiΔ = b ⊕ xΔ. Thus, the
output of the sender (namely, m0
i ) is also the same
for all i, since they are computed as a deterministic function
of ai and Δ and are independent of i if the hash function H
does not depend on i.
i and m1
1 , . . . , a(i)
This can be used to attack the triple-generation proto-
col in MASCOT. Roughly, the MASCOT triple-generation
protocol works by having each party Pi choose random
a(i)
1 , . . . , a(i)
τ , b(i) in a ﬁeld F, where b(i) will be the share
of the (secret) b-value of the output triple, and some linear
combination of a(i)
τ will be the share of the (secret) a-
value of the output triple. Party Pj then obtains some random
pads q(j,i)
1,h by playing the role of a sender in an execution
0,h − q(j,i)
of random OT, and later sends q(j,i)
1,h + b(j) to Pi. If
Pi is corrupted, and the adversary makes q(j,i)
0,h , q(j,i)
1,h the same
across two executions of the triple-generation protocol, then
the adversary can easily learn the difference of the b-values
used in two output triples. When such triples are used in the
online phase, this allows the attacker to learn the difference
of two secret values.
0,h , q(j,i)
In detail, the attack works on Protocol 4 of the MASCOT
paper, which is used to generate authenticated SPDZ triples.
For simplicity, assume there are only two parties P1 and P2.
(The attack can be easily generalized to any number of parties),
and the adversary corrupts P1. The attack proceeds as follows.
The adversary ﬁrst picks a bit a and a κ-bit string b.
1) In step 2(a), the adversary (acting as the receiver in an
execution of random OT) sends (a, a, ..., a) ∈ Fτ κ
to the
FΔ-ROT ideal functionality, and requests FΔ-ROT to use
the same string b for all h. By doing so, the adversary
obtains the value s(1,2)
that is the same across for all h,
denoted as sa.
1,h ∈ F
to the sender. Due to the above attack, we know that
q(2,1)
a,h = sa for all h, and for some (random) value s¯a it
holds that q(2,1)
2) The ideal functionality in step 2(b) sends q(2,1)
¯a,h = s¯a for all h.
0,h , q(2,1)
h
2
3) In step 2(c), the adversary receives d(2,1)
h
honest party that are all equal (since d(2,1)
1,h + b(2) = s0 − s1 + b(2)).
q(2,1)
h
values from the
0,h −
= q(2,1)
4) For each triple, the adversary uses the same values of
a and b, which forces all s0, s1 to be same same. So
for generation of two triples, where the honest party uses
b(2) and b(cid:3)(2), the d values sent from the honest party
are d = s0 − s1 + b(2) and d(cid:3)
= s0 − s1 + b(cid:3)(2), where
b(2) − b(cid:3)(2) can be computed by the adversary.
The above allows the adversary to learn all the SPDZ triples
except for the ﬁrst. Since these are used in the online phase to
mask private inputs, this means that if the attacker knows one
bit of the honest party’s input then it can deduce the honest
Batch size
SHA-3
SHA-256 (SHA-NI)
AES + key-sched.
XORP
doubling
Fixed-key AES
MMOπ
π
(cid:2)MMO
σ
TMMOπ
1
1166
223
78
45
51
38
40
42
79
2
1188
179
58
29
29
22
29
25
46
4
1160
185
34
18
16
11
13
15
25
8
1163
252
34
12
10
6
8
9
14
TABLE V: Performance of symmetric-key primitives. Amortized cost per
call, measured in CPU cycles, on an AMD processor with SHA-NI enabled.
party’s entire input. (Equivalently, without knowing anything
a priori the attacker learns that the honest party’s input is one
of two possibilities.)
APPENDIX D
CONCRETE SECURITY OF CORRELATION ROBUSTNESS
Our constructions in Section VII all achieve concrete secu-
rity O((pq+q2)/2k), assuming R is uniform for simplicity. We
show that no hash function H can achieve concrete security
better than O(pq/2k) for correlation robustness—even if H
is a random oracle. For applications of correlation robustness
to secure computation one would generally have p (cid:16) q, and
the concrete security of our constructions is asymptotically
optimal when that holds.
queries to Ocr
advantage O(pq/2k):
We show a explicit attack with p queries to H and q
R(x) = H(R ⊕ x) that has distinguishing
1) Evaluate H on p uniform inputs, i.e., compute the values
z∗
1 = H(v∗
p = H(v∗
q ).
2) Query Ocr
z1 = O(x1), . . . , zq = O(xq).
3) If z∗
1), . . . , z∗
R on q uniform inputs, i.e., obtain the results
i ⊕ xj as a
= v∗
candidate guess for R. This guess can be veriﬁed using
one additional query to each of H and Ocr
R.
i = zj for some i, j, then set R∗
(This is a “slide with a twist attack” [7] adapted to our setting.)
The distinguishing advantage of this attack is O(pq/2k).
APPENDIX E
ADDITIONAL PERFORMANCE EVALUATIONS
A. Microbenchmarks on AMD CPUs
We measured the performance of various primitives using an
AMD EPYC 7000 CPU available on an Amazon EC2 instance
of type m5ad.xlarge. Here, the implementation of SHA-
256 is from openssl and uses SHA-NI. When running multiple
evaluations of SHA-256, we take advantage of pipelining
using the implementation of Faz-Hern´andez et al. [21]. We
observe a 20% improvement in running time when using a
batch size of 2, but the performance is worse when the batch
size is larger. This is consistent with the results reported by
Faz-Hern´andez et al., who explained that this is due to the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:34 UTC from IEEE Xplore.  Restrictions apply. 
840
High
Med.
Low
Prior work (SHA-256)
Here (AES)
Improvement
Prior (SHA-256)
This work (AES)
Improvement
MASCOT
4.29 s
1.92 s
2.2×
SecureML
270 ms
68 ms
4.0×
6.7 s
4.3 s
1.6×
18.2 s
16.1 s
1.1×
320 ms
150 ms
2.1×
700 ms
700 ms
–
TABLE VI: Performance of two OT-based triple-generation protocols
on an Intel processor.
limited CPU register size. The results of our experiments are
summarized in Table V.
B. End-to-end Performance Improvement
To evaluate the performance improvement when using our
improved design in end-to-end MPC protocols, we bench-
marked the performance of MASCOT and SecureML [40]
when using our optimized OT-extension protocols. MASCOT
is a state-of-the-art protocol for multi-party computation with
malicious security that relies on SPDZ-triple generation based
on OT extension; SecureML uses OT extension for (semi-
honest) generation of Beaver matrix triples. Since triple gen-
eration dominates the overall cost in either case, we focus on
the performance of that step.
Similar to the performance of OT extension, the actual
improvement depends on the network speed, and the perfor-
mance is measured in three settings: “High” with a 5 Gbps
network, “Medium” with a 1 Gbps network, and “Low” with
a 200 Mbps network. In Table VI, we show the performance
of these two triple-generation protocols in various network
settings. The running time for MASCOT is for generating 104
128-bit SPDZ triples, and the running time for SecureML is
for generating Beaver matrix triples of dimension 128 × 128,
where each element is 64-bits long. Over a high-bandwidth
network, we observe around 4.0× improvement for SecureML
and 2.2× improvement for MASCOT; as for a medium-
bandwidth network, we observe an 2.1× improvement for
SecureML and 1.6× for MASCOT. We also performed the
same benchmark on an AMD platform with SHA-NI, with
results reported in Table VII.
We remark that the recent secure-computation protocols
based on authenticated garbling [50, 51] do not use the same
type of OT protocols described in this paper. Instead, they rely
on the globally correlated OT-hybrid model [41], which does
not need any (tweakable) correlation robust hash function.
Therefore our improvements do not apply to their protocols.
High
Med.
Low
Prior work (SHA-256)
Here (AES)
Improvement
Prior (SHA-256)
This work (AES)
Improvement
MASCOT
2.8 s
1.64 s
1.7×
SecureML
170 ms
70 ms
2.4×
5.13 s
3.99 s
1.3×
16.8 s
15.6 s
1.07×
220 ms
144 ms
1.5×
700 ms
700 ms
–
TABLE VII: Performance of two OT-based triple-generation protocols
on an AMD processor.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:34 UTC from IEEE Xplore.  Restrictions apply. 
841