n
o
i
t
c
u
d
e
R
100
90
80
70
60
50
40
30
20
10
0
0
100
200
300
500
400
600
Number of nodes
700
800
900
1000
algorithm1
algorithm2
Figure 7: Reduction in the total number of edges in the peering
graph after pruning
course of the algorithm. In order to examine this condition, the lo-
cal node u must keep track of which edges are virtualized to verify
the ﬁrst half of the spliced connection (u; w) and also to answer
the queries for this local information from others. For example, u
needs to ask the intermediate node w about the virtualization of the
second half (w; v), which is local to the node w. Therefore, this
library must implement a protocol to query candidate intermediate
nodes about their current virtualization.
In addition, we can elect to prune edge (u; v) should an interme-
diate node w reside in an AS that is directly connected to the path
from u to v, as illustrated in Figure 6(b). When the links into and
out of the AS that contains w are poor, our algorithm may prune
a better direct edge from u to v. In order to avoid this situation,
we optionally probe the network to ﬁnd out more precise informa-
tion. For example, we examine latency from u to w and from u to
v, and do not prune the edge if the difference is greater than some
threshold.
Although each node u runs this algorithm locally, it does not
build a disconnected mesh since it prunes the edge (u; v) only when
it ﬁnds a physically similar alternate path to reach v. In order to
select an intermediate node w for a virtual edge (u; v), local node
u ﬁrst gets the AS path from u to v, and then consults PG to collect
all the ASes along the path or one AS hop away from the path. It
only needs to check nodes w that live in one of these ASes, hence
does not need to know the entire topology of the network.
4.3.2 Evaluation
We evaluate this strategy by measuring the percentage of the
edges it prunes from the fully connected graph among the N over-
lay nodes. Our evaluation involves the following steps.
First, we combine BGP tables from RouteViews [6] and the BGP
feeds at six PlanetLab locations to construct a peering graph with
15,396 ASes and 69,496 peering edges. We assume that BGP paths
are the shortest (symmetric) paths in this peering graph for the sake
of simplicity, while we acknowledge that this does not precisely
reﬂect reality due to BGP’s administrative policies [25]. Second,
we take a sample of 1,000 potential overlays nodes, each of which
resides in a distinct AS. Although the degree distributions of these
sample nodes is roughly the same as the entire set, it is unclear
if this condition alone ensures that these 1,000 nodes are topolog-
ically representative of the entire Internet. Third, we generate a
sequence of these sample nodes and then in each round of the algo-
rithm, we add one additional node from the sequence to the overlay
network, thus incrementing the number of overlay nodes N. This
allows us to evaluate mesh sparseness as a function of the size of
overlay network.
We evaluate two mesh-building algorithms. Algorithm 1 only
virtualizes edges (u; v) for which there exists an intermediate over-
lay node w as shown in Figure 6(a). Algorithm 2 virtualizes these
edges as well, and tries to further reduce the mesh sparsity by vir-
tualizing edges (u; v) that resemble Figure 6(b).
Figure 7 shows the reduction in the total number of edges from
the fully connected graph for the two algorithms, using a random
sequence of sample nodes. As the plot shows, Algorithm 1 reduces
the number of edges by 70% for an overlay with a large number of
nodes (i.e., our mesh has only 30% of the edges in the fully con-
nected graph). The virtualized paths from Algorithm 1 contain only
2 node-hops on average, and the number of AS-hops is always the
same as the original path. As we expected, Algorithm 2 is even
more aggressive and achieves over 90% reduction. This additional
savings comes at a cost, as Algorithm 2 leads to longer virtualized
paths, both in terms of nodes and ASes. On average, the virtual-
ized paths produced by Algorithm 2 (with N = 1; 000) contain
20 node-hops, and ten times as many AS-hops as the original BGP
path, and the maximum number of node-hops and AS-hops along a
virtualized path is anomalously high. We should note that the plots
vary depending on the sequence of nodes we use, although we al-
ways use the same set of 1,000 sample nodes. For instance, when
we sort the nodes by ascending degree, the curves rise up sharply
and saturate with a small number of nodes. When we sort the nodes
by descending degree, the curves do not climb until a large number
of nodes are added.
We believe this preliminary result shows that a physically rep-
resentative mesh can assist overlays like RON to scale by reduc-
ing topologically redundant probing. We are currently investigat-
ing other mesh-building strategies, as well as additional metrics for
evaluating them.
5. DISCUSSION
Based on our experience to-date, we make three observations
about how Internet routing (and BGP in particular) might be changed
to better support overlays. First, as described in Section 3, BGP
speakers need to export their routing tables to overlay networks.
Without this coarse-grain connectivity information, bootstrapping
the routing underlay is problematic. Second, while ASes that cor-
respond to end-sites are easy to model, transit ASes are much too
diverse to be accurately modeled as a single vertex/hop, forcing
us to use latency probes rather than depend on AS hop counts.
The underlay would beneﬁt from more explicit information about
how peers cluster at POPs.
Ideally, coarse-grain topology infor-
mation about the internal structure of long-haul ISPs would also
be exposed. Third, our approach argues against pushing any dy-
namic capability into BGP [7, 8, 3, 4, 5]. Our position is that BGP
should continue to provide only connectivity information, with dy-
namic functionality moved to higher layers of the routing under-
lay, thereby allowing us to deﬁne value-added routing services in a
cleaner way, and avoid introducing route instability problems. On
the other hand, we actually prototyped our topology probes in Ze-
bra [2], an open-source BGP implementation, meaning that primi-
tives like GetPath can rightfully be viewed as extensions to BGP.
Our strategy for building a routing underlay is based on the sim-
ple observation that the accuracy of a routing mechanism comes at
some cost, and hence, we would be well-served by doing a more
careful cost/beneﬁt analysis. On the cost side of the equation, one
could evaluate an overlay routing mechanism in terms of the num-
ber of probes it performs, perhaps reported as the product of the
scope of its probes (e.g., all N nodes in the overlay or just k neigh-
bors) and the frequency of those probes (e.g., at conﬁguration time,
on a per-connection basis, or continuously). The beneﬁt side of
the equation is much more difﬁcult to quantify since, ultimately,
we would like to compare the route selected for each packet to the
route that a global oracle would have selected in order to optimize
some metric. When evaluating routing mechanisms, however, we
typically assume that one mechanism represents the desired behav-
ior, and are simply trying to ﬁnd a way to lower the cost without
losing too much ﬁdelity. Note that while we focus on the probing
costs of routing, there are other potential costs, such as the over-
utilization of popular links due to overlays being selﬁsh [23].
Several primitives to support routing in overlay networks have
recently been proposed. For example, Jannotti [16] deﬁnes two
router primitives—path reﬂection and path painting—that are used
to replicate multicast packets and to create an overlay topology that
resembles the underlying network. Jannotti’s approach focuses on
how routers incrementally (and locally) improve how they map vir-
tual links onto the underlying network topology. In contrast, our
approach is to provide a more global picture of the underlying con-
nectivity. Another example, the Internet Indirection Infrastructure
(i3) [31], proposes indirection as a more ﬂexible communication
abstraction than traditional IP forwarding. One could view i3 as a
generalized form of source routing overlaid on top of the Internet.
Just as source routing often needs to identify way-points that result
in the most appropriate path to the destination, i3 also beneﬁts from
a topology discovery service. In other words, i3 is designed mainly
for the forwarding aspect of overlay routing, while our underlay ar-
chitecture is designed to enable cost-effective topology discovery.
We believe that i3 and our underlay could complement each other
as an infrastructure for building routing overlays.
6. CONCLUSIONS
The main thesis of this paper is that allowing overlay networks
to independently probe the Internet—with the goal of making in-
formed application-speciﬁc routing decisions—is not a tenable strat-
egy in the long run. Instead, we propose a shared routing underlay
that overlay networks query. Although we acknowledge that the
exact form this underlay takes is not yet well-understood, we posit
that it must adhere to two high-level principles. First, it must take
cost (in terms of number of network probes) into account. Sec-
ond, the underlay will most likely be multiple-layered, with lower
layers exposing coarse-grain static information at large-scale, and
upper layers performing more frequent probes over an increasingly
narrow set of nodes.
The paper proposes a set of primitive operations, along with an
example library of routing services that can be built on top of the
primitives. A preliminary evaluation suggests that a library of low-
cost services is feasible, and we are currently deploying the services
on PlanetLab. Given ISP and hosting site pressure on PlanetLab to
limit the number of traceroutes and pings each node performs, it
is likely that we will need to restrict overlay services to using such
a shared facility in the near future.
Acknowledgments
We thank the anonymous reviewers and Jon Crowcroft, our shep-
herd, for helping us improve the clarity and focus of the paper. This
work was supported in part by NSF grant ANI-9906704, DARPA
contract F30602-00-2-0561, and Intel Corporation.
7. REFERENCES
[1] Fixed Orbit. http://www.ﬁxedorbit.com/.
[2] GNU Zebra. http://www.zebra.org/.
[3] netVmg. http://www.netVmg.com.
[4] Opnix. http://www.opnix.com.
[5] Proﬁcient Networks. http://www.proﬁcientnetworks.com.
[6] Route Views Project. http://antc.uoregon.edu/route-views/.
[7] RouteScience. http://www.routescience.com.
[8] Sockeye Networks. http://www.sockeye.com.
[9] D. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris. Resilient
Overlay Networks. In Proceedings of the 18th ACM Symposium on Operating
Systems Principles (SOSP), pages 131–145, October 2001.
[10] M. Balazinska, H. Balakrishnan, and D. Karger. INS/Twine: A Scalable
Peer-to-Peer Architecture for Intentional Resource Discovery. In Proceedings
of International Conference on Pervasive Computing, August 2002.
[11] Y.-H. Chu, S. G. Rao, S. Seshan, and H. Zhang. Enabling Conferencing
Applications on the Internet using an Overlay Multicast Architecture. In
Proceedings of the ACM SIGCOMM Conference, pages 1–12, August 2001.
[12] Y.-H. Chu, S. G. Rao, and H. Zhang. A Case For End System Multicast. In
Proceedings of the ACM SIGCOMM Conference, pages 1–12, June 2000.
[13] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris, and I. Stoica. Wide-area
cooperative storage with CFS. In Proceedings of the 18th ACM Symposium on
Operating Systems Principles (SOSP), October 2001.
[14] P. Druschel, M. Castro, A.-M. Kermarrec, and A. Rowstron. Scribe: A
large-scale and decentralized application-level multicast infrastructure. IEEE
Journal on Selected Areas in Communications, 20, 2002.
[15] L. Gao. On Inferring Autonomous System Relationships in the Internet. In
Proceedings of IEEE Global Internet Symposium, November 2000.
[16] J. Jannotti. Network Layer Support for Overlay Networks. In Proceedings of the
5th International Conference on Open Architectures and Network Programming
(OPENARCH), June 2002.
[17] T. Kernen. Traceroute.org. http://www.traceroute.org.
[18] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels,
R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, and B. Zhao.
OceanStore: An Architecture for Global-Scale Persistent Storage. In
Proceedings of the Ninth international Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS 2000), Nov. 2000.
[19] R. Mahajan, N. Spring, D. Wetherall, and T. Anderson. Inferring Link Weights
Using End-to-end Measurements. In Proceedings of the Internet Measurement
Workshop, pages 231–236, Marseille, France, November 2002.
[20] P. R. McManus. A Passive System for Server Selection within Mirrored
Resource Environments Using AS Path Length Heuristics, June 1999.
AppliedTheory Communications, Inc.
[21] National Research Council. Looking Over the Fence at Networks. National
Academy Press, Washington D.C., 2001.
[22] L. Peterson, T. Anderson, D. Culler, and T. Roscoe. A Blueprint for Introducing
Disruptive Technology into the Internet. In Proceedings of the HotNets-I, 2002.
[23] L. Qiu, R. Y. Yang, Y. Zhang, and S. Shenker. On Selﬁsh Routing in
Internet-Like Environments. In Proceedings of the ACM SIGCOMM
Conference, August 2003.
[24] S. Ratnasamy, M. Handley, R. Karp, and S. Shenker. Topologically-Aware
Overlay Construction and Server Selection. In Proceedings of the IEEE
INFOCOM Conference, New York, NY, June 2002.
[25] Y. Rekhter and T. Li. A Border Gateway Protocol 4, March 1995. RFC 1771.
[26] A. Rowstron and P. Druschel. Pastry: Scalable, distributed object location and
routing for large-scale peer-to-peer systems. In Proceedings of the 18th
IFIP/ACM International Conference on Distributed Systems Platforms
(Middleware 2001), Heidelberg, Germany, November 2001.
[27] A. Rowstron and P. Druschel. Storage Management and Caching in PAST, A
Large-Scale Persistent Peer-to-Peer Storage Utility. In Proceedings of the 18th
ACM Symposium on Operating Systems Principles (SOSP), pages 188–201,
October 2001.
[28] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Anderson. The End-to-end
Effects of Internet Path Selection. In Proceedings of the ACM SIGCOMM
Conference, Cambridge, MA, September 1999.
[29] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP Topologies with
Rocketfuel. In Proceedings of the ACM SIGCOMM Conference, pages
133–145, August 2002.
[30] N. Spring, D. Wetherall, and T. Anderson. Scriptroute: A facility for distributed
internet measurement. In Proceedings of the 4th USITS Symposium, Seattle,
WA, March 2003.
[31] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and S. Surana. Internet Indirection
Infrastructure. In Proceedings of the ACM SIGCOMM Conference, pages
73–85, August 2002.
[32] I. Stoica, R. Morris, D. Karger, F. Kaashoek, and H. Balakrishnan. Chord: A
Peer-to-Peer Lookup Service for Internet Applications. In Proceedings of the
ACM SIGCOMM Conference, San Diego, CA, September 2001.
[33] L. Subramanian, I. Stoica, H. Balakrishnan, and R. Katz. OverQoS: Offering
Internet QoS Using Overlays. In Proceedings of HotNets-I, October 2002.
[34] L. Wang, V. Pai, and L. Peterson. The Effectiveness of Request Redirection on
CDN Robustness. In Proceedings of the 5th Symposium on Operating System
Design and Implementatio (OSDI), Boston, MA, December 2002.