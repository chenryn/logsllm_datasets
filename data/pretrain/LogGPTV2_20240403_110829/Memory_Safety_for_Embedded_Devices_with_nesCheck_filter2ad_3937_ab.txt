n = ( int ) arr ;
p = arr [3];
Algorithm 1: nesCheck’s type inference algorithm
foreach declaration of pointer variable p do
classify(p, SAFE);
foreach instruction I using pointer p do
r ← result of(I);
if I performs pointer arithmetic then
classify(p, SEQ);
classify(r, SAFE);
if I casts p to incompatible type then
classify(p, DYN);
classify(r, DYN);
Figure 1: nesCheck pipeline (lighter blocks are ex-
isting steps of the nesC compiler toolchain).
space is shared among all components, both user and system
code. For this reason, the oﬃcial development guidelines
for TinyOS recommend to (i) keep the state of the various
components private, (ii) communicate only through exposed
interfaces, and (iii) avoid transferring pointers between dif-
ferent pieces of code. All these characteristics of the TinyOS
compilation and execution model make it a particularly good
ﬁt for static analysis
4. THE NESCHECK APPROACH
Figure 1 shows the architecture of the ﬁnal pipeline for
nesCheck. Our main memory safety goals are listed below.
nesCheck performs both static bug detection – for memory
accesses that will always result in a violation regardless of
the execution path – and runtime bug catching – for mem-
ory accesses that could potentially lead to memory corrup-
tions, depending on the execution ﬂow. (i) Bugs: (Static)
Find all statically provable memory bugs and report them
as errors; (ii) Vulnerabilities: (Static) Find all potentially
unsafe memory accesses, determine and exclude those that
will never result in a memory corruption (in a conserva-
tive way), and report the remaining ones as warnings; (iii)
Checks: (Dynamic) Instrument all remaining vulnerable
locations with dynamic runtime checks, and catch all mem-
ory errors at runtime. We provide a proof sketch about
nesCheck’s memory safety in Appendix A
4.1 Static Analysis
nesCheck uses static analysis in order to enforce an ex-
tended type system on the pointer variables, and subse-
quently compute and propagate metadata for the vulnera-
ble pointers. Our approach uses an inter-procedural whole-
program analysis technique, carried out on the Static Single
Assignment (SSA) form [9] representation of the code. In
SSA form, each variable is written to at most once, intro-
ducing a fresh variable every time the value is updated with
a destructive assignment operation. While the code is in
SSA form, the heap remains in non-SSA form, meaning that
the same memory location can be written to multiple times
through the same and diﬀerent pointers. Therefore, even
though in SSA form each variable is only assigned once, a
new value is assigned with a store operation to a memory
location previously loaded with a load operation, making it
possible to connect together diﬀerent instructions operating
on the same logical variable.
The pointer *arr is classiﬁed as Safe upon declaration. When
casted from int* to int, *arr is reclassiﬁed as Dynamic
since Dynamic ≺ Saf e holds according to the total order-
ing. However, when used in pointer arithmetic, the type of
*arr is not changed as the total ordering constraint Sequence ≺
Dynamic is not satisﬁed.
Note that no extra rules are necessary for several non-
obvious cases, because the analysis runs on SSA form. For
instance, indirect calls (e.g., callbacks or function pointers)
are classiﬁed as Dynamic by nesCheck’s type inference be-
cause of the use of void* pointers. Another case includes
pointers to pointers, or pointers to structs containing point-
ers. If the inner type is classiﬁed as Dynamic, the outer type
must be classiﬁed as Dynamic as well. A concrete example of
this is int * q1 * q2, where q1 and q2 are pointer kinds. If
q2 is Dynamic, then q1 should also be Dynamic. The three
rules presented suﬃce in correctly classifying these point-
ers, since an access to that pointer as a whole will result in
two subsequent load instructions, that will propagate the
Dynamic classiﬁcation between the diﬀerent levels of indi-
rection.
After the type inference completes, all the pointers are
classiﬁed. The rules guarantee that the ﬁnal assignments
are a conservative over-approximation, potentially classify-
ing non-Dynamic pointers as Dynamic pointers, but never
the opposite. This fundamental property ensures the cor-
rectness of the memory safety enforcement. The subse-
quent optimizations will compensate the potential perfor-
mance degradation of conservative classiﬁcation.
Type Inference Validation. We discuss the nesCheck
type inference engine based on the example used in CCured [26]:
1
2
3
4
5
6
7
8
9
10
11
12
13
int ** a ;
int i ;
int acc ;
int ** p ;
int * e ;
acc = 0;
for ( i =0; i > 1) ;
}
The program sums an array of “boxed integers”, a data
type with double interpretation: when odd, its 31 most sig-
niﬁcant bits can be interpreted as an integer, otherwise it
represents the pointer to another boxed integer.
The expected behavior of the type inference engine is to
classify **a as Sequence – since it is used in pointer arith-
metic at line 8 – and *e as Dynamic – since it is casted
and used with diﬀerent types at diﬀerent locations (i.e., as
pointer at line 11 and as integer at line 12). All the other
pointers should be classiﬁed as Safe. It is possible to verify
that, according to our type inference algorithm, the correct
classiﬁcation of **a as Sequence pointer is achieved by the
application of Rule 2 , while *e is correctly classiﬁed as Dy-
namic by Rule 3 applied at line 12. All the other pointers
are classiﬁed as Safe upon their declaration, by Rule 1 , and
their classiﬁcation never changes.
Through this example and others constructed speciﬁcally
to exercise unusual pointer usages, we verify that nesCheck
Figure 2: Comparison of bounds metadata in
nesCheck to the traditional approach.
Figure 3: Explicit metadata variables.
correctly classiﬁes all of the pointer types according to our
extended type system.
4.1.2 Metadata Computation and Propagation
The metadata maintained by nesCheck for each pointer
contains information about the memory area to which such
pointer points. Diﬀerently from the traditional tracking of
base b and bound e for each pointer, nesCheck’s metadata
includes the size of the areas towards both lower and higher
memory addresses (denoted with sl and sh, respectively),
with respect to the current address stored in the pointer
variable. Figure 2 shows a graphical comparison of our
metadata structure and the more traditional one. As an
example, let int* p be a pointer to an array of 5 integers,
and assume int* p1 = &p[2]. The metadata for p will be
(sl = 0, sh = 5·sizeof(int)), while the metadata for p1 will
be (sh = (5−2)·sizeof(int), sl = (5−2−1)·sizeof(int)).
This construction simpliﬁes bounds checking by checking
only one “side” instead of two if we can infer the direction
of a sequential pointer; for example, in a common scenario
such as a monotonically increasing (or decreasing) loop, the
compiler can safely remove one check.
nesCheck computes the metadata information for each
pointer with diﬀerent strategies, depending on the speciﬁc
pointer. For static allocations, such as arrays of ﬁxed size or
pointers to structs, nesCheck directly computes the size of
the allocated memory. While dynamic memory allocation is
discouraged in TinyOS, nesCheck supports it for complete-
ness. For dynamically allocated memory, the size is com-
puted and updated by keeping track of the parameters of
calls to functions such as malloc(), realloc(), calloc(),
and free().
In cases where a local pointer can point to
diﬀerent memory areas depending on dynamic control ﬂow
conditions, nesCheck generates and injects an explicit vari-
able to hold the metadata for this pointer, depending on the
control ﬂow paths. Figure 3 shows a concrete example of this
scenario – with the original source code on the left and the
instrumented one on the right – where function f() performs
diﬀerent allocations for pointer *p depending on the value of
the function parameter a. Explicit metadata variables are
needed for pointers accessed in basic blocks diﬀerent than
the one they were deﬁned in. Detecting this behavior is
possible as the heap is in non-SSA form. nesCheck is thus
capable of connecting the same logical variable at the dif-
ferent locations (i.e., variable declaration and assignments
in disjoint branches). In Figure 3, the diﬀerent basic blocks
are highlighted as separate, numbered solid boxes. *p is
declared in block 1, but is initialized in block 2 or 3, and
accessed in block 4.
4.1.3 Metadata Table
A Metadata Table associates speciﬁc memory addresses
with their metadata information. Eﬃcient data structures,
e.g., hashmaps, often use large virtual address spaces [24].
Embedded devices do not have a virtual memory manage-
ment mechanism; however, all the pointers that will need
an entry in the Metadata Table are known at compile time,
so nesCheck optimizes its data structure by using a dense,
array-based Binary Search Tree. Moreover, for code that
follows TinyOS’s design guidelines and therefore does not
make use of dynamic memory allocation, this data structure
can be entirely preallocated for a statically-deﬁned size.
We decouple metadata from the pointers – compared to fat
pointers used in prior work [26, 17, 1, 10, 27, 35] – in order
to achieve a uniform memory representation for all pointers.
Moreover, since the search tree is, on average, tiny compared
to the total number of pointers, keeping it separate allows
nesCheck to choose the optimal data structure.
4.2 Dynamic Instrumentation
Dynamic checks can detect all memory errors since they
have full runtime view and dynamic information when they
are executed. In nesCheck, the metadata for each pointer
is set to zero upon declaration, then always kept up-to-date
with the actual oﬀsets of the pointer in its memory area.
Every time a dynamic check is necessary, the respective
memory access instruction is instrumented to be preceded
by a bounds check. A failed check will terminate the execu-
tion and reboot the node, preventing memory corruptions.
With no memory separation nor diﬀerence between kernel-
land and user-land, continuing the software execution af-
ter a memory error can have unpredictable, arbitrarily bad
outcomes. Rebooting is the only safe fault-handling action
to prevent further memory corruption and potential com-
promising of the entire network on such constrained plat-
forms. The attacker could try to exploit the same vulnera-
bility again, and achieve at best a Denial of Service (DoS).
Compared to probabilistic defenses, the attacker will never
succeed against memory safety. In a debugging scenario, it
would be possible to extend our prototype to send an error
report message to the base station, including more details
about the code location that caused the error. Our current
prototype supports the explicit printing of details about the
error location on screen when the code is run in a simulator
(more about the TinyOS simulator in Section 6).
Frequent updates and lookups in the table incur high per-
formance overhead. nesCheck optimizes by adding instru-
mentation to more directly propagate the metadata.
Functions taking pointers as parameters: A pointer
appearing as a parameter in a function will assume diﬀerent
values for diﬀerent callers of the function. Consequently,
the pointer will also inherit diﬀerent metadata properties
depending on the pointer that is passed as actual parameter
at every diﬀerent call site. nesCheck enhances the signature
of all the functions that have pointer parameters to include
additional parameters for the metadata. Note that vari-
adic functions are still supported by updates and lookups
in the metadata table. As an example, a function with
a signature such as void f(int* p) is enhanced to void
f(int* p, metadata pmeta), where metadata is the type
of the data structure holding nesCheck’s metadata informa-
tion. Finally, the pointer parameter is associated with the
metadata parameter as its own metadata.
Functions returning pointers: If a function returns a
pointer, metadata propagation must also be enabled through
the return value. nesCheck enhances the signatures of such
functions and their return instructions, from a single value
to a structure containing the original returned value plus
its attached metadata. Thus, the sample function signature
int* f() will be instrumented into {int*, metadata} f().
All the return instructions will consequently be transformed
from return p; into return {p, pmeta};, where pmeta is
the metadata information for pointer p. Lastly, all call sites
for this function must be instrumented to take into account
the change in return type, unpack the two pieces of data
from the structure (i.e., the pointer and its metadata) and
associate one with the other.
4.3 Running Example
In this section, we present the working of the core compo-
nents of nesCheck on a program example (shown in Figure 4)
that is small – for ease of detailed discussion and manual
analysis of expected behaviors – but stress-intensive in the
number of advanced features and memory error corner-cases
included. We include casting of pointer types to and from
integers, index-based access of memory areas, usage of point-
ers with incompatible types depending on speciﬁed condi-
tions, and dynamic memory allocation as well, even if dis-
couraged by TinyOS, to ensure the correctness of nesCheck
even in face of wrong programming styles.
While the analysis and instrumentation of the program in
nesCheck is carried out sequentially one entire function at a
time, here we follow the execution ﬂow for a more eﬀective
presentation. First of all, nesCheck rewrites the signatures
for testMT_aux to {foo_t*, meta_t} testMT_aux(int* p,
meta_t pmeta), and instruments similarly testMetadataT-
able and assignLoop.
In main(), nesCheck infers the size for the metadata of
*arr to be 5 integers, from the parameter of malloc(). The
subsequent call to testMetadataTable() is then updated for
its new signature (adding as second parameter the metadata
for *arr), avoiding the need for metadata table accesses.
The testMetadataTable function initially leverages the
support function testMT_aux for obtaining a pointer to struct
foo_t, using the characteristic TinyOS pattern of global