注意：这里的字段都是索引值，一定要区分是哪个池子的索引值。另外，这个数据结构后面也要使用到，所以需要用一个池子来存储。
7.3.6 method_ids数据结构
method_ids是索引区的最后一个条目，它索引了dex文件里的所有method。method_ids的元素格式是method_id_item，结构跟fields_ids很相似，如下所示：
其中：
·class_idx：表示该method所属的class类型，class_idx的值是type_ids的一个index，并且必须指向一个class类型。
·name_idx：表示该method的名称，它的值是string_ids的一个index。
·proto_idx：描述该method的原型，指向proto_ids的一个index。
header里method_ids_size=0x04，method_ids_off=0xf0。本部分的二进制描述如下：
整理出表格如下：
对dex反汇编的时候，常用的method表示方法是如下这种形式：
将上述表格里的字符串再次整理下，method的描述分别为：
至此，索引区的内容描述完毕，包括string_ids、type_ids、proto_ids、field_ids、method_ids。每个索引区域里存放着指向具体数据的偏移地址（如string_ids），或者存放的数据是其他索引区域里面的index号。
7.3.7 class_defs数据结构
上面介绍了所有的索引区域，终于到了最后一个数据结构了，之所以放最后，是因为这个数据结构是最复杂的，层次太深了。下面我试着详细介绍一下。
1.class_def_item
从字面意思解释，class_defs区域里存放着class的定义。它的结构较dex区都要复杂些，因为有些数据都直接指向了data区里面。
class_defs的数据格式为class_def_item，结构描述如下：
参数介绍如下：
·class_idx：描述具体的class类型，值是type_ids的一个index。值必须是一个class类型，不能是数组类型或者基本类型。
·access_flags：描述class的访问类型，诸如public、final、static等。在dex-format.html里“access_flagsDefinitions”有具体的描述。
·superclass_idx：描述supperclass的类型，值的形式跟class_idx一样。
·interfaces_off：值为偏移地址，指向class的interfaces，被指向的数据结构为type_list。class若没有interfaces，值为0。
·source_file_idx：表示源代码文件的信息，值是string_ids的一个index。若此项信息缺失，此项值赋值为NO_INDEX=0xffff ffff。
·annotions_off：值是一个偏移地址，指向的内容是该class的注释，位置在data区，格式为annotations_direcotry_item。若没有此项内容，值为0。
·class_data_off：值是一个偏移地址，指向的内容是该class的使用到的数据，位置在data区，格式为class_data_item。若没有此项内容，值为0。该结构里有很多内容，详细描述该class的field、method、method里的执行代码等信息，后面有一个比较大的篇幅来讲述class_data_item。
·static_value_off：值是一个偏移地址，指向data区里的一个列表（list），格式为encoded_array_item。若没有此项内容，值为0。
header里class_defs_size=0x01，class_defs_off=0x 0110。则此段二进制描述为：
根据对数据结构class_def_item的描述，整理出表格如下：
其实最初被编译的源码只有几行，和class_def_item的表格对照下，一目了然。
2.class_def_item=>class_data_item
class_data_off指向data区里的class_data_item结构，class_data_item里存放着本class使用到的各种数据，下面是class_data_item的逻辑结构：
关于元素的格式Uleb128在string_ids里讲述过，不赘述。encoded_field的结构如下：
encoded_method的结构如下：
其中：
1）method_idx_diff：前缀methd_idx表示它的值是method_ids的一个index，后缀_diff表示它是于另外一个method_idx的一个差值，就是相对于encodeed_method[]数组里上一个元素的method_idx的差值。其实encoded_filed→field_idx_diff表示的也是相同的意思，只是编译出来的Hello.dex文件里没有使用到class filed所以没有仔细讲，详细的参考dex_format.html的官网文档。
2）access_flags：访问权限，比如public、private、static、final等。
3）code_off：一个指向data区的偏移地址，目标是本method的代码实现。被指向的结构是：
·code_item，有近10项元素，后面再详细解释。
·class_def_item→class_data_off=0x 0234。
名称为LHello；class里只有2个directive methods。directive_methods里的值都是Uleb128的原始二进制值。按照directive_methods的格式encoded_method再整理一次这2个method描述，得到结果如下表格所描述：
method一个是，一个是main，这里需要用string_ids那块介绍到的一个方法就是解码uleb128类型的方法得到正确的value值。
3.class_def_item=>class_data_item=>code_item
到这里，逻辑的描述有点深了。先回想一下是怎么走到这一步的，code_item在dex里处于一个什么位置。
1）一个dex文件被分成了9个区，详细见图7-1所示。其中有一个索引区叫作class_defs，索引了dex里面用到的class，以及对这个class的描述。
2）class_defs区，其实是class_def_item结构。这个结构里描述了LHello；的各种信息，诸如名称、superclass、access flag、interface等。class_def_item里有一个元素class_data_off，指向data区里的一个class_data_item结构，用来描述class使用到的各种数据。自此以后的结构都归于data区了。
3）class_data_item结构，描述class里使用到的static field，instance field，direct_method，和virtual_method的数目和描述。例子Hello.dex里，只有2个direct_method，其余的field和method的数目都为0。描述direct_method的结构叫作encoded_method，是用来详细描述某个method的。
4）encoded_method结构，描述某个method的method类型，access flags和一个指向code_item的偏移地址，里面存放的是该method的具体实现。
5）code_item，一层又一层，简要地说，code_item结构里描述着某个method的具体实现。它的结构如下描述：
末尾的3项见图7-2所示，标志为optional，表示可能有，也可能没有，根据具体的代码来：
·registers_size：该段代码使用到的寄存器数目。
·ins_size：method传入参数的数目。
·outs_size：该段代码调用其他method时需要的参数个数。
·tries_size：try_item结构的个数。
·debug_off：偏移地址，指向该段代码debug信息存放位置，是一个debug_info_item结构。
·insns_size：指令列表的大小，以16bit为单位。insns是instructions的缩写。
·padding：值为0，用于对齐字节。
·tries和handlers：用于处理Java中的exception，常见的语法有try catch。
4.分析main method的执行代码并与smali反编译的结果比较
在7.2节里有2个方法，因为main里的执行代码是自己写的，分析它会熟悉很多。偏移地址是directive_method[1]→code_off=0x0148，二进制描述如下：
根据code_item的结构整理表格如下：
insns数组里的8个二进制原始数据，对这些数据的解析，需要参考官网的文档“Dalvik VM InstructionFormat”和“Bytecode for Dalvik VM”。
分析思路整理如下：
1）“Dalvik VM Instruction Format”里操作符op都是位于首个16位数据的低8位，起始的是op=0x62。
2）在“Bytecode for Dalvik VM”里找到对应的Syntax和format。
3）在“Dalvik VM Instruction Format”里查找21c，得知op=0x62的指令占据2个16位数据，格式是AA|op BBBB，解释为op vAA，type@BBBB。因此这8组16位数据里，前2个是一组。对比数据得AA=0x00，BBBB=0x0000。
4）返回“Bytecode for Dalvik VM”里查阅对sget_object的解释，AA的值表示Value Register，即0号寄存器；BBBB表示static field的index，就是之前分析的field_ids区里Index=0指向的那个东西，当时的fields_ids的分析结果如下：
对field常用的表述是：包含field的类型→field名称：field类型。此次指向的就是Ljava/lang/System；→out：Ljava/io/printStream。
5）综上所述，前2个16位数据0x 0062 0000解释为：
其余的6个16位数据分析思路与这个一样，依次整理如下：
6）最后再整理下main method，用容易理解的方式表示出来就是：
看起来很像smali格式语言，不妨使用smali反编译Hello.dex，看看smali生成的代码跟方才推导出来的有什么差异，结果如下：
从内容上看，二者形式上有些差异，但表述的是同一个method。这说明刚才分析的路子是没有跑偏的。另外一个method是，若是分析的话，思路和流程跟main一样。走到这里，心里很踏实了。
7.4 解析代码
上面解析完了所有的数据结构区域，下面就来看看具体的解析代码，由于篇幅的原因，这里就不贴出全部的代码了，只贴出核心的代码。
7.4.1 解析头部信息
解析代码如下：
这里就是记录几个索引区的偏移值和大小信息，解析结果如下：
7.4.2 解析string_ids索引区
解析代码如下：
解析结果如下：
7.4.3 解析type_ids索引区
解析代码如下：
解析结果如下：
7.4.4 解析proto_ids索引区
解析代码如下：
解析结果如下：
7.4.5 解析field_ids索引区
解析代码如下：
解析结果如下：
7.4.6 解析method_ids索引区
解析代码如下：
解析结果如下：
7.4.7 解析class_def区域
解析代码如下：
解析结果如下：
要想看懂解析结果需要通过class_def的数据结构解析，需要借助“Bytecode for Dalvik VM”查阅具体的指令，然后翻译成具体的指令代码，关于这个指令表可以参考这里：http://www.netmite.com/android/mydroid/dalvik/docs/dalvik-bytecode.html，所以具体解析并不复杂，这里就不详细解析了，解析思路可以参考class_def的数据结构解析。
提示：项目下载地址：https://github.com/fourbrother/parse_androiddex
其实Android中有一个工具可以解析dex文件，直接用aapt命令就可以查看了，只是这个工具是dexdump；这个命令也是在AndroidSDK目录下的build-tools下面，可以将打印的结果重定向到demo.txt文件中，如图7-3所示。
图7-3 用aapt命令输出结果
那么上面做的解析工作是不是就没有用了呢？当然不是，后面会看到，解析dex格式有很多用途。
7.5 本章小结
本章主要介绍了Android中的dex文件格式，关于dex文件格式的重要性不必多言，如果能深入了解dex文件格式，在后续的加固应用和逆向应用的时候非常有用，比如一些应用通过前期改变dex的数据结构来进行加固应用，然后在内存中恢复数据结构，要想逆向这样的应用就需要熟练地掌握dex的数据结构知识。有时候还想在内存中篡改指令来改变代码逻辑，这时候也需要通过分析dex的数据结构来找到相对应的内存指令位置，然后进行数据修改。
防护篇
第8章 Android应用安全防护的基本策略
第9章 Android中常用权限分析