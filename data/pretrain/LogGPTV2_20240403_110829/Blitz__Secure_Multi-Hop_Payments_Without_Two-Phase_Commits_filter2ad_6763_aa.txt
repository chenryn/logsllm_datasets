title:Blitz: Secure Multi-Hop Payments Without Two-Phase Commits
author:Lukas Aumayr and
Pedro Moreno-Sanchez and
Aniket Kate and
Matteo Maffei
Blitz: Secure Multi-Hop Payments Without 
Two-Phase Commits
Lukas Aumayr, TU Wien; Pedro Moreno-Sanchez, IMDEA Software Institute; 
Aniket Kate, Purdue University; Matteo Maffei, TU Wien
https://www.usenix.org/conference/usenixsecurity21/presentation/aumayr
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Blitz: Secure Multi-Hop Payments Without Two-Phase Commits
Lukas Aumayr
TU Wien
PI:EMAIL
Aniket Kate
Purdue University
PI:EMAIL
Abstract
Payment-channel networks (PCN) are the most prominent
approach to tackle the scalability issues of current permission-
less blockchains. A PCN reduces the load on-chain by allow-
ing arbitrarily many off-chain multi-hop payments (MHPs)
between any two users connected through a path of payment
channels. Unfortunately, current MHP protocols are far from
satisfactory. One-round MHPs (e.g., Interledger) are inse-
cure as a malicious intermediary can steal the payment funds.
Two-round MHPs (e.g., Lightning Network (LN)) follow the
2-phase-commit paradigm as in databases to overcome this is-
sue. However, when tied with economical incentives, 2-phase-
commit brings other security threats (i.e., wormhole attacks),
staggered collateral (i.e., funds are locked for a time propor-
tional to the payment path length) and dependency on speciﬁc
scripting language functionality (e.g., Hash Time-Lock Con-
tracts) that hinders a wider deployment in practice.
We present Blitz, a novel MHP protocol that demonstrates
for the ﬁrst time that we can achieve the best of the two worlds:
a single round MHP where no malicious intermediary can
steal coins. Moreover, Blitz provides the same privacy for
sender and receiver as current MHP protocols do, is not prone
to the wormhole attack and requires only constant collateral.
Additionally, we construct MHPs using only digital signa-
tures and a timelock functionality, both available at the core
of virtually every cryptocurrency today. We provide the cryp-
tographic details of Blitz and we formally prove its security.
Furthermore, our experimental evaluation on a LN snapshot
shows that (i) staggered collateral in LN leads to in between
4x and 33x more unsuccessful payments than the constant
collateral in Blitz; (ii) Blitz reduces the size of the payment
contract by 26%; and (iii) Blitz prevents up to 0.3 BTC (3397
USD in October 2020) in fees being stolen over a three day
period as it avoids wormhole attacks by design.
1 Introduction
Permissonless cryptocurrencies such as Bitcoin enable
secure payments in a decentralized, trustless environment.
Transactions are veriﬁed through a consensus mechanism
Pedro Moreno-Sanchez
IMDEA Software Institute
PI:EMAIL
Matteo Maffei
TU Wien
PI:EMAIL
and all valid transactions are recorded in a public, distributed
ledger, often called blockchain. This approach has inherent
scalability issues and fails to meet the growing user demands:
In Bitcoin, the transaction throughput is technically limited
to tens of transactions per second and the transaction conﬁr-
mation time is around an hour. In contrast, more centralized
payment networks such as the Visa credit card network, can
handle peaks of 47,000 transaction per second.
This scalability issue is an open problem in industry and
academia alike [15, 31]. Among the approaches proposed
so far, payment channels (PC) have emerged as one of the
most promising solutions; implementations thereof are al-
ready widely used in practice, e.g., the Lightning Network
(LN) [22] in Bitcoin. A PC enables two users to securely
perform an arbitrary amount of instantaneous transactions
between each other, while burdening the blockchain with
merely two transactions, (i) for opening and (ii) for closing. In
particular, following the unspent transaction output (UTXO)
model, two users open a PC by locking some coins in a shared
multi-signature output. By exchanging signed transactions
that spend from the shared output in a peer-to-peer fashion,
they can capture and redistribute their balances off-chain. Ei-
ther one of the two users can terminate the PC by publishing
the latest of these signed transactions on the blockchain.
As creating PCs requires locking up some coins, it is eco-
nomically infeasible to set up a PC with every user one wants
to interact with. Instead, PCs can be linked together forming a
graph known as payment channel network (PCN) [19, 22]. In
a PCN, a payment of α coins from a sender U0 to a receiver
Un can be performed via a path {Ui}i∈[0,n] of intermediaries.
1.1 State-of-the-art PCNs
A possible way of achieving such a multi-hop pay-
ment (MHP) is an optimistic 1-round approach, e.g., In-
terledger [27]. Here, U0 starts paying to its neighbor on the
path U1, who then pays to its neighbor U2 and so on until Un is
reached. This protocol, however, relies on every intermediary
behaving honestly, otherwise any intermediary can trivially
steal coins by not forwarding the payment to its neighbor.
USENIX Association
30th USENIX Security Symposium    4043
To achieve security in MHPs, most widely deployed PCNs
(e.g., LN [22]) require an additional second round of commu-
nication (i.e., sequential, pair-wise communication between
sender and receiver via intermediaries). Speciﬁcally, PCNs
follow the principles of the 2-phase-commit protocol used to
perform atomic updates in distributed databases. In the ﬁrst
communication round, the users on the payment path lock α
coins of the PC with their right neighbor in a simple smart
contract called Hash Time-Lock Contract (HTLC), which can
be expressed even in restricted scripting languages such as
the one used in Bitcoin. The money put into the HTLC by the
left neighbor at each PC moves to the right neighbor, if this
neighbor can present a secret chosen by Un (i.e., the receiver
of the payment); alternatively, it can be reclaimed by the left
neighbor after some time has expired.
After HTLCs have been set up on the whole path, the users
move to the second round, where they release the locks by
passing the secret from Un to U0 via the intermediaries on the
path before the time on the HTLCs has expired. Intermediaries
are economically incentivized to assist in the 2-phase payment
protocol. In the ﬁrst round, when Ui receives α coins from
the left neighbor Ui−1, it forwards only α− fee to the right
neighbor Ui+1, charging fee coins for the forwarding service.
In the second round, when Ui+1 claims the α− fee coins from
Ui, the latter is incentivized to recover the α coins from Ui−1.
1.2 Open problems in current PCNs
There are some fundamental problems with current
PCNs that follow the 2-phase-commit paradigm. While
2-phase-commit has been successfully used for atomic up-
dates in distributed databases, it is not well suited to applica-
tions where economic incentives are inherently involved. In
particular, there exists a tradeoff between security, efﬁciency
and number of rounds in the PCN setting that constitutes not
only a challenging conceptual problem, but also one with
strong practical impact, as we motivate below.
Staggered collateral After a user Ui has paid to Ui+1, it
must have enough time to claim the coins put by Ui−1. If
Ui−1 is not cooperative, then this time is used to forcefully
claim the funds with an on-chain transaction. The timing on
the HTLCs (called collateral time in the blockchain folklore)
grows therefore in a staggered manner from right to left, ti ≥
ti+1 + ξ. In practice, ξ has to be quite long: e.g., in the LN, it
is set to one day (144 blocks). In the worst case, the funds are
locked up for a time of n·ξ. This means that a single payment
of value α over n users can lock up a collateral of Θ(n2·α·ξ).
Reducing this locktime enables a faster release time of locked
funds and directly improves the throughput of the network.
Moreover, long locktimes are also problematic when looking
at the high volatility of cryptocurrency prices, where prices
can drop signiﬁcantly within the same day.
Grieﬁng attack A malicious user can start a MHP to itself,
causing user Ui to lock up α coins for a time (n− i)· ξ. The
malicious user subsequently goes idle and lets the payment
fail with the intention of reducing the overall throughput of the
network by causing users to lock up their funds. In a different
scenario, an intermediary could do the same by accepting
payments in the ﬁrst round, but going idle in the second. It
is interesting also to observe the ampliﬁcation factor: with
the relatively small amount of α coins, an attacker can lock
(n− 1)· α coins of the network. This attack is hard to detect
and can even be used to target speciﬁc users in the PCN in
order to lock up their funds.
Wormhole attack The wormhole attack [20] is an attack
on PCNs where two colluding malicious users skip honest
users in the open phase of the 2-phase-commit protocol and
thereby cheat them out of their fees. This is problematic as
now the payment does not happen atomically anymore: For
some users the payment is successful and for others it is not,
i.e., for the ones encased by the malicious users. The users for
whom it is unsuccessful have to lock up some of their funds,
but do not get any fees for offering their services, nor can
they use their locked funds for other payments. These fees go
instead to the attacker.
HTLC contracts PCNs built on top of 2-phase-commit pay-
ments depend largely on HTLCs and the underlying cryp-
tocurrencies supporting them in their scripts. However, there
are a number of cryptocurrencies that do not have this func-
tionality or that do not provide scripting capabilities at all,
such as Stellar or Ripple. Instead, these currencies provide
only digital signature schemes and timelocks.
On a conceptual level, one could actually wonder whether
or not it is required to add an agreement protocol (in the
database literature, a protocol where if an honest party delivers
a message m, then m is eventually delivered by every honest
party), like the HTLC-based 2-phase-commit paradigm, on
top of the blockchain-inherited consensus protocol.
The current state of affairs thus leads to the following ques-
tion: Is it possible to design a PCN protocol with a single
round of communication (and thus without HTLCs) while
preserving security and atomicity?
1.3 Our contributions
We positively answer this question by presenting Blitz, a
novel payment protocol built on top of the existing payment
channel constructions, which combines the advantages of both
the optimistic 1-round and the 2-phase-commit paradigms.
Our contributions are as follows.
• With Blitz, we introduce for the ﬁrst time a payment pro-
tocol that achieves a MHP in one round of communication
while preserving security in the presence of malicious inter-
mediaries (i.e., as in the LN). The Blitz protocol has constant
collateral of only Θ(n· α· ξ), allowing for PCNs that are far
more robust against grieﬁng attacks and provide a higher trans-
action throughput. Additionally, the Blitz protocol is immune
to the wormhole attack and having only one communication
round reduces the chance of unsuccessful payments due to
network faults.
4044    30th USENIX Security Symposium
USENIX Association
• We show that Blitz payments can be realized with only
timelocks and signatures, without requiring, in particular,
HTLCs. This allows for a more widespread deployment, i.e.,
in cryptocurrencies that do not feature hashlocks or script-
ing, but only signatures and timelocks, e.g., Stellar or Ripple.
Since Blitz builds on standard payment channel constructions,
it can be smoothly integrated as an (alternative or additional)
multi-hop protocol into all popular PCNs, such as the LN.
• We formally analyze the security and privacy of Blitz in
the Universal Composability (UC) framework. We provide an
ideal functionality modeling the security and privacy notions
of interest and show that Blitz is a UC realization thereof.
• We evaluate Blitz and show that while the computation
and communication overhead is inline with that of the LN,
the size of the contract used in Blitz is around 26% smaller
than an HTLC in the LN, which in practice opens the door
for a higher number of simultaneous payments within each
channel. We have additionally evaluated the effect of the
reduction of collateral from staggered in the LN to constant in
Blitz and observed that it reduces the number of unsuccessful
payments due to locked funds by a factor between 4x and 33x,
depending on payment amount and percentage of disrupted
payments. Finally, the avoidance of the wormhole attack by
design in Blitz can save up to 0.3 BTC (3397 USD in October
2020) of fees in our setting (over a three day period).
2 Background and notation
The notation used in this work is adopted from [5]. We
provide here an overview on the necessary background and
for more details we refer the reader to [5, 19, 20].
2.1 Transactions in the UTXO model
Throughout this work, we consider cryptocurrencies that
are built with the unspent transaction output (UTXO) model,
as Bitcoin is for instance. In such a model, the units of cash,
which we will call coins, exist in outputs of transactions. Let
us deﬁne such an output θ as a tuple consisting of two values,
θ := (cash,φ), where θ.cash denotes the amount of coins held
in this output and θ.φ is the condition which must be fulﬁlled
in order to spend this output. The condition is encoded in the
scripting language used by the underlying cryptocurrency. We
say that a user U owns the coins in an output θ, if θ.φ con-
tains a digital signature veriﬁcation script w.r.t. U’s public key
and the digital signature scheme of the underlying cryptocur-
rency. For this, we use the notation OneSig(U). If multiple
signatures are required, we write MultiSig(U1, . . . ,Un).
Ownership of outputs can change via transactions. A
transaction maps a non-empty list of existing outputs to a
non-empty list of new outputs. For better distinction, we
refer to these existing outputs as transaction inputs. We
formally deﬁne a transaction body tx as an attribute tuple
tx := (id, input, output). The identiﬁer tx.id ∈ {0,1}∗ is au-
tomatically assigned as the hash of the inputs and outputs,
tx.id := H (tx.input, tx.output), where H is modelled as a
tx
x1
x2
≥ t1
pkB
B
+t2
pkA, pkB
tx(cid:48)
x2
φ1
φ2
φ3 ∧ φ4
Figure 1: (Left) Transaction tx has two outputs, one of value
x1 that can be spent by B (indicated by the gray box) with
a transaction signed w.r.t. pkB at (or after) round t1, and one
of value x2 that can be spent by a transaction signed w.r.t.
pkA and pkB but only if at least t2 rounds passed since tx was
accepted on the blockchain. (Right) Transaction tx(cid:48) has one
input, which is the second output of tx containing x2 coins
and has only one output, which is of value x2 and can be spent
by a transaction whose witness satisﬁes the output condition
φ1 ∨ φ2 ∨ (φ3 ∧ φ4). The input of tx is not shown.
random oracle. The attribute tx.input is a list of identiﬁers of
the inputs of the transaction, while tx.output := (θ1, . . . ,θn)
is a list of new outputs. A full transaction tx contains addition-
ally a list of witnesses, which fulﬁll the spending conditions
of the inputs. We deﬁne tx := (id, input, output, witness) or
for convenience tx := (tx, witness). Only a valid transaction
can be published on the blockchain, i.e., one that has a valid
witness for every input and has only inputs not used in other
published transactions.
In fact, a transaction is not published on the blockchain
immediately after it is submitted, but only after it is accepted
through the consensus mechanism. We model that by deﬁning
a blockchain delay ∆, an upper bound on the time it takes for
a transaction that is broadcast until it is added to the ledger.
For better readability we use charts to visualize transac-
tions, their ordering and how they are used in protocols. The
charts are expected to be read from left to right, i.e., the di-
rection of the arrows. Every transaction is represented as a
rectangle with rounded corners. Incoming arrows represent
inputs. Every transaction has one or more output boxes inside
it. Inside these boxes we write the amount of coins stored in
the corresponding output. Every output box has one or more
outgoing arrow. This arrow has the condition needed to spend
the corresponding output written above and below it.
To present complex conditions in a compact way, we use
the following notation. On a high level, we write the owner(s)
of an output below the arrow and how they can spend it above.
In a bit more detail, most output scripts require signature
veriﬁcation w.r.t. one or more public keys, a condition that
we represent by writing the necessary public keys below a
given arrow. Other conditions are written above the arrow.
The conditions above can be any script supported by the
underlying cryptocurrency, however in this paper we require
only the following. We write “+t” or RelTime(t) to denote
a relative timelock, i.e., the output with this condition can
be spent, if and only if at least t rounds have passed since
the transaction containing the output was published on the
blockchain. Additionally, we consider absolute timelocks,
USENIX Association
30th USENIX Security Symposium    4045
denoted as “≥ t” or AbsTime(t): this condition is satisﬁed
if and only if the blockchain is at least t blocks long. If an
output condition is a disjunction of several conditions, i.e., φ =
φ1 ∨···∨ φn, we write a diamond shape in the output box and
put each subcondition φi above/below its own arrow. For the
conjunction of several conditions we write φ = φ1 ∧···∧ φn.
We illustrate an example of our transaction charts in Figure 1.
2.2 Payment channels
A payment channel is used by two parties P and Q to per-
form several payments between them while requiring only
two on-chain transactions (for opening and closing). The
balances are kept and updated in what is called a state. For
brevity and readability, we hereby abstract away from the
implementation details of a payment channel and provide a
more detailed description in Appendix C.
We assume that there is an off-chain transaction txstate