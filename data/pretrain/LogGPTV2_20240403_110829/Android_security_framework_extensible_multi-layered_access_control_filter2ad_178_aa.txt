title:Android security framework: extensible multi-layered access control
on Android
author:Michael Backes and
Sven Bugiel and
Sebastian Gerling and
Philipp von Styp-Rekowsky
Android Security Framework:
Extensible Multi-Layered Access Control on Android
Michael Backes, Sven Bugiel, Sebastian Gerling, Philipp von Styp-Rekowsky
{backes,bugiel,sgerling,styp-rekowsky}@cs.uni-saarland.de
Saarland University/CISPA, Germany
ABSTRACT
We introduce the Android Security Framework (ASF), a
generic, extensible security framework for Android that en-
ables the development and integration of a wide spectrum of
security models in form of code-based security modules. The
design of ASF reﬂects lessons learned from the literature
on established security frameworks (such as Linux Security
Modules or the BSD MAC Framework) and intertwines them
with the particular requirements and challenges from the
design of Android’s software stack. ASF provides a novel
security API that supports authors of Android security ex-
tensions in developing their modules. This overcomes the
current unsatisfactory situation to provide security solutions
as separate patches to the Android software stack or to em-
bed them into Android’s mainline codebase. This system
security extensibility is of particular beneﬁt for enterprise or
government solutions that require deployment of advanced se-
curity models, not supported by vanilla Android. We present
a prototypical implementation of ASF and demonstrate its
eﬀectiveness and eﬃciency by modularizing diﬀerent secu-
rity models from related work, such as dynamic permissions,
inlined reference monitoring, and type enforcement.
1.
INTRODUCTION
For several decades now, the need for operating system
security mechanisms to provide strong security and privacy
guarantees has been well understood [24, 34, 26, 5]. Yet, re-
cent classes of attacks against smartphone end-user’s privacy
and security [19, 41, 29, 9] have shown that the fairly new
smart device operating systems fail to provide these strong
guarantees, for instance, with respect to access control or
information ﬂow control. To remedy this situation, security
research has proposed a wide spectrum of security models and
extensions for mobile operating systems, most of them for the
popular open-source Android OS. These extensions include
context-related access control [10], developer-centric security
policies [28], and dynamic, ﬁne-grained permissions [42, 21,
3]. They also comprise security models [7, 33, 36, 8] such as
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ACSAC’14, December 08–12, 2014, New Orleans, LA, USA
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3005-6/14/12 ...$15.00.
http://dx.doi.org/10.1145/2664243.2664265.
domain isolation and type enforcement, which are usually at
the heart of enterprise and governmental security solutions.
However, the lack of a comprehensive security API for
the development and modularization of security extensions
on Android has created the unsatisfactory situation that
all of these novel and warranted security models are either
provided as model-speciﬁc patches to the Android software
stack, or they became an integrated component of the An-
droid OS design [36]. When considering the body of literature
on established security frameworks, such as Linux Security
Modules (LSM) [40] or the BSD MAC Framework [39], their
history has taught that the need to patch the OS or the hard-
wiring of a speciﬁc security model impairs both the practical
and theoretical beneﬁts of security solutions. First, there
is in general no consensus on the “right” security model,
as demonstrated by the broad range of Android security
extensions [10, 28, 3, 42, 7, 36]. Thus, OS security mecha-
nisms should not limit policy authors to one speciﬁc security
model by embedding it into the OS design. Second, providing
security solutions as “security-model-speciﬁc Android forks”
impedes their maintainability across diﬀerent OS versions,
because every update to the Android software stack has to
be re-evaluated for and applied to each fork separately.
Contributions. In this paper, we propose the design and
implementation of Android Security Framework (ASF),
which allows security experts to develop and deploy their
security models in form of modules as part of Android’s
platform security. This provides the means to easily extend
the Android security mechanisms and avoids that security
designers have to choose “the right Android security fork” or
that the OS vendor has to impose a speciﬁc security model.
In the design of ASF we transfer the lessons learned and
guiding principles from the literature on established OS secu-
rity infrastructures to Android and intertwine them with new
requirements for eﬃcient security policies for multi-tiered
software stacks of smart devices. In contrast to concurrent,
independent work [20], which introduced extensibility for
security apps (i.e., add-ons), our design establishes a generic
and extensible security framework that allows instantiating
security models by design as part of Android’s platform se-
curity and enables not only extending but also replacing
Android’s default security mechanisms. This is particularly
beneﬁcial when tailoring Android for higher-security deploy-
ments like enterprise phones, where the default mechanisms
are insuﬃcient or even obsolete (e.g., when the IT department
is an additional stakeholder that decides on apps’ privileges
and installation). We make the following contributions:
1. Policy-agnostic, multi-tiered security infrastructure: The
security infrastructure must avoid committing to one partic-
ular security model and enable authors of security extensions
to develop as well as deploy their solutions in form of code.
This requires special consideration of Android’s multi-tiered
software stack and the dominant programming languages at
each layer. For ASF we solve this by integrating security-
model-agnostic enforcement hooks into the Android kernel,
middleware and application layer and exposing these hooks
through a novel security API to module authors.
2. Enabling edit automata policies: Various Android se-
curity solutions realize edit automata policies that not only
truncate but also modify control ﬂows. In ASF, the appli-
cation layer and middleware hooks are speciﬁcally designed
to allow module authors to leverage the rich semantics of
Android’s application framework and to implement their se-
curity policies as edit automata. This required a re-thinking
of the “classical” object manager design from the literature
by shifting the edit automata logic from the infrastructure
into the security modules.
3. Instantiation of existing security models: We demon-
strate the eﬃciency and eﬀectiveness of our ASF by instan-
tiating diﬀerent security models from related work on type
enforcement [8, 36] and inlined access control [3] as well as
from Android’s default security architecture as modules.
4. Maintenance beneﬁts for security extensions: Our ported
security modules show how ASF simpliﬁes maintainability
of security extensions across diﬀerent OS versions by shifting
the bulk of eﬀort to the security framework maintainer. This
is similar to the maintenance of the application framework
for regular apps. Hence, a comparable beneﬁt to regular
apps in adaption and stability across OS versions can be
expected of security modules.
5. Research and development beneﬁts: We postulate that
developing security solutions against a well documented secu-
rity API also greatly contributes to a) a better understanding
and analysis of new security models that form a self-contained
unit instead of being integrated to various components of
the Android software stack, b) a better reproducibility and
dissemination of new solutions since modules can be easily
shared and instantiated, and c) a more convient application
of security knowledge to the Android software stack with-
out the requirement to be familiar with the deep technical
internals of Android.
2. BACKGROUND ON ANDROID
In this section we provide necessary technical background
information on Android.
2.1 Primer on Android
Android is an open-source software stack for embedded de-
vices. The lowest level of this stack consists of a Linux kernel
responsible for elementary services such as memory man-
agement, device drivers, and an Android-speciﬁc lightweight
inter-process communication called Binder. On top of the
kernel lies the extensive Android middleware, consisting of
native libraries (e.g., SSL) and the application framework.
System services in the middleware implement the bulk of
Android’s application API (e.g., the location service) and pre-
installed system apps at the application layer, like Contacts,
complement this API.
Although application layer and middleware apps and ser-
vices are commonly written as Java code, they are com-
Figure 1: Android’s default security architecture.
piled to dex bytecode and run inside the Dalvik Virtual
Machine (DVM). In addition to dex bytecode, apps and ser-
vices can use native code libraries (i.e., C/C++) for low-level
interactions with the underlying Linux system. Native code
can be seamlessly integrated into dex bytecode by means of
the Java Native Interface.
Android apps are generally composed of diﬀerent compo-
nents. The four basic app components are Activities (GUI for
user interaction), BroadcastReceivers (mailbox for broadcast
Intent messages), ContentProviders (SQL-like data manage-
ment), and Services (long running operations without user
interaction). All components can be interconnected remotely
across application boundaries by using diﬀerent abstractions
of Android’s Binder IPC mechanism, such as Intent messages.
2.2 Android’s Security Philosophy
Android’s security philosophy dictates that all apps are
sandboxed by executing them in separate processes with
distinct user IDs (UID) and assigning them private data
directories on the ﬁlesystem.
To achieve privilege separation between apps, Android
introduces Permissions, i.e., privileges that an app is granted
by the user at install-time. In accordance with the least
privilege principle, an app without permissions is not able to
access security and privacy sensitive resources. Permissions
are assigned to the app’s UID and enforced at two diﬀerent
points in the system architecture (cf. Figure 1): First, every
app sandbox can directly interact with the kernel through
system calls, for instance, to edit ﬁles or open a network
socket. These resources are either of private nature (i.e., are
within the app’s private directory) or public resources (e.g.,
SDCard). Access control in the ﬁlesystem ensures that the
apps’ processes have the necessary rights (i.e., Permissions)
to issue particular syscalls, e.g., opening a ﬁle. The ﬁlesystem
access control consists of the traditional Linux Discretionary
Access Control, which is complemented (since Android v4.3)
by SELinux based Mandatory Access Control (MAC).
Second, apps can interact through the Android API in a
strictly controlled manner with highly privileged resources.
To ensure system security and stability, apps are prohibited
to access those resources directly. Instead, those resources are
wrapped by system services and apps that implement the API.
For instance, the TelephonyService communicates on behalf
of apps with the radio interface layer daemon (rild) to initiate
calls or send text messages. Whether an app is suﬃciently
privileged to successfully call the API is determined by a
Permission check within the system services/apps. For this
AppSystem Service/App(e.g., TelephonyService)User-spaceVirtual FilesystemAPIDiscretionary Access ControlMandatory Access Control (SELinux)Private/Public Resource (e.g., SDCard)Privileged Resource (e.g., rild)APIPermisson checkPrivileged FunctionalityKernel spacesyscallsyscallDex (DVM)Native CodeBinder IPCcheck, the Binder mechanism provides to the callee (system
service/app) the UID of the caller (app).
3. RELATED WORK
We ﬁrst provide a synopsis of the development of extensible
kernel security frameworks and discuss afterwards the current
status of security extensions and frameworks for Android.
3.1 Extensible Kernel Access Control
The importance of the operating system in providing sys-
tem security has been very well studied in the last decades [34,
24, 5, 26] and diﬀerent approaches to extending operating
systems with access control and security policies have been
explored. These include system-call interposition [15, 30],
software wrappers [16], and extensible access control frame-
works like DTE [4], GFAC [1], and Flask [37]. All of these
solutions have been provided as kernel patches for Linux or
UNIX. However, this led to an intricate situation: On the one
hand, maintaining these solutions as patches incurred high
maintenance costs for adapting the patches to kernel changes.
On the other hand, none of these solutions was included in
the vanilla kernel because this would constrain security policy
authors to one speciﬁc security model. This constrain would
be unsatisfying since there exists in general no consensus on
the “right” security model. To remedy this situation, exten-
sible security frameworks have been proposed [40, 39] that
allow the extension of the system with trusted code modules
that implement speciﬁc security models. Module authors are
supported with an API that exposes kernel abstractions as
well as operations and facilitates the implementation of the
desired security architecture and model. The results of this
research have been integrated into the mainline kernels as
the Linux Security Modules framework (LSM) [40] and the
BSD MAC Framework [39].
3.2 Android Security
Closest to our approach is the independently and con-
currently developed ASM [20], which also provides a pro-
grammable interface for security extensions. In contrast to
ASF, however, it targets “security apps” added in addition to
the default Android security architecture. As a consequence,
ASM has to address the intricate problem of including un-
trusted code into highly-privileged context for access control
enforcement and consolidating it with existing policies. It
avoids this Gordian knot through a trade-oﬀ between policy
expressiveness and sandboxing of security apps. In contrast,
our ASF framework resides beneath the default Android
security framework and hence allows instantiation of secu-
rity models that complement or even substitute parts of the
default platform security (cf. Section 6). Hence, ASM can
even be implemented as a module in ASF. By deﬁnition, we
must trust the developer of security solutions for ASF.
In recent years, Android’s security has been quite scruti-
nized, and a wide spectrum of security extensions has been
brought forward. To name a few: CRePE [10] provides a
context-related access control, where the context can be, e.g.,
the device’s location. Saint [28] enables developer-centric
policies that allow app developers to ship their apps with rules
that regulate the app’s interactions with other apps. Diﬀerent
approaches to more dynamic and ﬁne-grained permissions
have been proposed based on system-centric enforcement
(e.g., TISSA [42]) or inlined reference monitors (Dr. Android
and Mr. Hide [21] or AppGuard [3]). XManDroid [6] en-
forces Chinese Wall policies to prevent confused deputy and
collusion attacks. TrustDroid [7] and MOSES [33] isolate
diﬀerent domains such as “Work” and “Private” from each
other. SE Android [36] and FlaskDroid [8] bring type enforce-
ment to Android, where SE Android focuses on the kernel
layer and has been partially included into the mainline An-
droid source code, and FlaskDroid extends type enforcement
to Android’s middleware layer on top of SE Android.