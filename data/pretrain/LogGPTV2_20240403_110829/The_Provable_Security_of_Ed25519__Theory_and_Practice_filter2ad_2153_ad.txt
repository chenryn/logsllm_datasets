b
a, d
B
c
L
H
E
Secret scalars are n + 1-bits
The public key bit-length 2b−1 > q
Curve parameters in Fq
A generator of the prime order subgroup of E
The log2 of curve cofactor
The prime generator order LB = 0 and 2cL = |E|
Secure hash function producing 2b-bit output
Curve equation in Twisted Edwards form
TABLE II
Instantiation for Ed25519
2255 − 19
254
256
−1,−121665/121666
(x, 4/5), x > 0
c = 3
2252 + 27742 . . . 8493
SHA-512
x2 + y2 = 1 + dx2y2
PARAMETERS FOR Ed25519 SIGNATURES AS DESCRIBED IN FIG. 4.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1665
2) Bounds Checking Variants: Some variants of Ed25519
require an additional check on the received alleged signatures
during veriﬁcation. In particular, this is enforced by the IETF
standard [7] and proposed in the NIST draft standard [47]. In
these variants, implementers are required to reject signatures
whose S parameter is equal
to or larger than L, where
L is the order of the prime-order subgroup. Contrastingly,
Ed25519-Original implementations merely check S is a 256-
bit integer. We refer to such implementations as Ed25519-IETF.
This is claimed to have a substantial impact and achieve strong
unforgeability. We investigate this further in Section V but
already note that, contrastingly to Ed25519-IETF variants,
Ed25519-Original implementations simply reduce the received
signature element S mod L during signature veriﬁcation,
thereby immediately ruling out SUF-CMA security.
3) Point and Bound Checking Variants: Some popular
implementations of Ed25519, such as LibSodium [8], perform
the bounds check on S values in addition to point validation.
Speciﬁcally, Ed25519-LibS ensures that received elements are
canonically encoded and have order (cid:4)L. This check means
that certain R values, which are low order points on the
curve, are rejected during veriﬁcation as well as low order
public keys. Additionally, R values and public keys which
have y-coordinates above q are also rejected to ensure unique
encodings. We see the impact of these decisions in Section V-C.
B. Differences from Schnorr Signatures
Ed25519 has several notable features which differentiate
it from traditional Schnorr signatures. The original Schnorr
signature scheme and its underlying identiﬁcation protocol
can be recalled in Appendix A. In particular, private keys in
Ed25519 are clamped to a speciﬁc format, signature nonces
are chosen deterministically, and signed messages are preﬁxed
with public keys. As indicated before, these differences impact
the security of the overall signature scheme and our analysis.
We next discuss these alterations in more detail.
1) Group Structure: Ed25519’s curve is of order 8L for
L a large prime deﬁned in Table II. Contrastingly, Schnorr
signatures are typically constructed over prime order groups
and implementations are assumed to reject the identity element.
Non-prime order groups contain a more complex group
structure than prime order groups. In particular, non-prime
order groups entail the presence of additional subgroups,
whose elements lie outside the intended prime order subgroup.
Performing group operations on these elements can lead to
surprising results, including conﬁnement under exponentiation,
where they map to a small range of elements and leakage,
where performing exponentiation with a private scalar leaks
information about that scalar. The original paper [1] allowed
Ed25519 implementations to optionally include multiplication
by the cofactor in the veriﬁcation equation. Including the
cofactor makes the veriﬁcation function strictly more permissive
and we assume it is present so that our proofs carry over to
the cofactorless case.
Proofs about systems deﬁned over prime order groups do not
necessarily hold if the system is implemented with non-prime
order groups, even when the proof does not explicitly rely on
the prime order structure. For example, proofs typically assume
that any group element can be written as the exponentiation
of a ﬁxed generator, or that exponentiation of an element is
uniformly distributed over the group. In the non-prime order
case, neither assumption is true in general.
2) Group Element Checks: The question of how values
should be decoded and parsed is often omitted from academic
papers. Ed25519-Original and Ed25519-IETF are of particular
interest in this regard as it is explicitly argued that elements
do not need to be checked to ensure they belong to the prime
order subgroup. This means any group element, including small
order elements, the identity element and elements of order 8L
will be accepted. We discussed variants that mandate this check
in Section IV-A3. The related Difﬁe-Hellman function X25519
also omits these checks which has previously lead to otherwise
avoidable attacks on protocols employing it [50].
A related issue is whether elements are checked to en-
sure they lie on the intended curve, rather than its twist.
Whilst X25519 does not
reject elements on the twist,
Ed25519-Original explicitly mandates that points are checked
to ensure they do belong to E. This is checked during the
decompression of received points prior to signature veriﬁcation.
We assume all implementations uphold this requirement as
otherwise point addition during signature veriﬁcation is not
necessarily deﬁned.
3) Private Key Clamping: In part due to the non-prime order
nature of the curve and the lack of group element validation,
Ed25519 mandates the use of key clamping which involves the
bitwise manipulation of private keys prior to use in signing.
The rationale behind this requirement has been the subject of
much debate [51], [52]. The original Ed25519 paper deﬁnes
private keys, without discussion, such that a high bit is always
set and three low bits are cleared. All subsequent variations
have kept the same requirement. There are two rationales for
clamping:
Firstly, setting the high bit ensures that some deﬁcient point
multiplication implementations, which have variable execution
time with respect to the position of the highest set bit in the
scalar, become constant time [53].
Secondly, clearing the low bits ensures that the scalar is a
multiple of the cofactor and thus the result of applying the
scalar to any group element results in an element in the prime
order subgroup. This avoids key leakage attacks, although
these attacks are not relevant for Ed25519 signature schemes
as private keys are never applied to adversary-provided group
elements. However, as implementers may wish to re-use keys
in both X25519 and Ed25519, this choice provides defence in
depth.
As we will see later, the use of clamping complicates our
security proofs. This is because not every element in the prime
order subgroup is also a valid public key as produced by the key
generation algorithm. Consequently, when providing reductions
which must manipulate public keys, e.g., blinding them, there
is a small chance an invalid public key is produced and the
reduction must abort.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1666
4) Key Preﬁxing: Unlike traditional Schnorr signatures,
Ed25519 uses key preﬁxing, where the signature scheme,
prior to signing or veriﬁcation, prepends the public key to the
message. This choice has also been the subject of much debate
[28], [31], [54], [55] as to whether it provides a substantial
improvement in security. Much of the discussion has revolved
around multi-user security and whether key preﬁxing improves
security in the presence of an adversary who is satisﬁed to
break some subset of witnessed multiple keys, rather than one
key in particular. We discuss the multi-user security of Ed25519
in more detail in Appendix C. It transpires that key preﬁxing
also has beneﬁts when considering lesser-known multi-user
security properties such as message key substitution attacks,
as we show in Section V-C.
5) Deterministic Nonce Generation: Signature schemes
require the use of a nonce with each signed message. This
has historically been an area prone to subtle implementation
mistakes leading to critical real world vulnerabilities [56].
Ed25519 uses deterministic signing which removes the need
for fresh random numbers during the signing process. This does
not lead to any particular consequences for our security analysis
since we model the key derivation function as a random oracle.
However, it is well known not to reduce security [57].
V. THE SECURITY OF ED25519
We now present our security results for Ed25519-Original
and Ed25519-IETF signatures. As suggested by earlier works
that informally discuss the security of these schemes, we use the
Fiat-Shamir approach. However, as elaborated in Section IV-B,
there exist marked differences between Schnorr signatures
and Ed25519 signatures such that the established security
results for Schnorr do not hold without careful adjustment
to the Ed25519 setting. We close this gap by proving both the
existential unforgeability of Ed25519-Original and show that
due to the additional check on the value S, Ed25519-IETF and
Ed25519-LibS achieve strong unforgeability. As is common
for signature proofs, we assume idealized versions of hash
functions (random oracles), but do not make any strong
assumptions on the properties of the underlying elliptic curve
group. Tighter security bounds may be possible in the so-called
generic group model (cf., e.g., [28], [58]), however we explicitly
want to explore security in a setting where the adversary may
take advantage of, e.g., encoding details.
We recall that, in the following, E refers to the twisted Ed-
wards curve underlying Ed25519 (cf. Table II) and analogously
E(Fq) denotes the set of elements on the curve which forms
a group with point addition, as deﬁned in Section III.
A. Existential Unforgeability of Original Ed25519
We
start
by
security
showing
EUF-CMA
speciﬁcally by means of
of
Ed25519-Original
the Fiat-
Shamir transform. We ﬁrst deﬁne an appropriate canonical
identiﬁcation protocol CID in Fig. 5 to which the transform
can be applied, then show that CID satisﬁes the necessary
prerequisites in Theorem 1 and 2 and ﬁnally apply the
transform in Theorem 3 to establish existential unforgeability
of the resulting signature scheme. We note that with the
additional check in Line 17 of CID, the proof of EUF-CMA
security directly carries over to Ed25519-IETF and with the
further check described in Table I also to Ed25519-LibS.
KGen(pp):
1 k $←− {0, 1}b
2 h ← H(k)
3 s ← 2b−2 +
4 A ← sB
5 return (A, k)
(cid:2)b−3
i=3 2ih[i]
V1:
12 ch $←− {0, 1}2b
13 return ch
P2(ch, st):
14 S ← (r + ch · st) mod L
15 return S
(cid:2)b−3
i=3 2ih[i]
V2(A, R, S, ch):
16 Check R, A ∈ E
17 Variant Speciﬁc Checks
18 return (cid:2)8SB = 8R + 8chA(cid:3)
P1(k):
6 h ← H(k)
7 s ← 2b−2 +
8 st ← s
9 r $←− {0, 1}2b
10 R ← rB
11 return (R, st)
Fig. 5. Canonical identiﬁcation protocol CID = (KGen, P = (P1, P2), V =
(V1, V2)) underlying Ed25519-Original in Fig. 4. Note that the highlighted
line (17) varies depending on the version of Ed25519 and the appropriate
check is listed in Table I.
To get from CID in Fig. 5 to the Ed25519-Original in
Fig. 4, we apply a variant of Fiat-Shamir, denoted by FSkp
det,
that captures deterministic signing and key-preﬁxing.
Deterministic signing is achieved by deterministically de-
riving the randomness r of P1 in the signing algorithm via
r ← H(h[b], ..., h[2b − 1], m), where m is the message to be
signed, and, as before, h[i] denotes the i-th bit of h. The
de-randomization of signing by computing the randomness
deterministically as some H(sk, m) is common and in our
case does not impact the security of the resulting signatures,
assuming H is at least a pseudorandom function (cf., e.g., [57]).
Recall that key-preﬁxing, on the other hand, describes the
derivation of the challenge ch by the prover during signature
generation as H(R, A, m) instead of H(R, m), i.e., by also
including the public key into the hash function. It will become
clear from the proof that this additional input to the random
oracle H does not impact security, since this solely relies on R
being sufﬁciently unpredictable in honest signature generations.
1) Security of the underlying identiﬁcation protocol: We
show that the underlying CID is secure against impersonation
attacks by passive adversaries (IMP-PA security, cf. Deﬁni-
tion 4). We do this in a two-step process by ﬁrst showing in The-
orem 1 that CID is secure against impersonating adversaries
that only have access to the public key (IMP-KOA security). To
lift this result to the setting of passive impersonating adversaries,
we then only need to be able to simulate queries to the oracle
OTrans, which can be achieved by the HVZK property of CID.
Thus, in Lemma 1 we show that CID is HVZK and, combined
with the IMP-KOA security, we achieve IMP-PA security.
Theorem 1 (CID is IMP-KOA secure). Let CID =
(KGen, P, V) be the identiﬁcation protocol as deﬁned in Fig. 5.
If ECDLP is (t, ecdlp)-hard on E(Fq), then CID is (t
(cid:3)
)-
, 
(cid:3)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1667
(cid:8)
(cid:9)2 ≤
(cid:3)
L

and
2b−5
L
(cid:3) − 1
IMP-KOA secure, where t ≈ 2t
ecdlp.
Proof Sketch. The full proof can be found in the Appendix B-A
We notice the ﬁrst marked difference to proofs of Schnorr
signatures. While in the latter, we have a straightforward
reduction to ECDLP using the rewinding technique [24], we
now need to account for the secret key clamping in Ed25519.
The clamping causes that an element A ∈ E(Fq) is not
necessarily a valid public key output of KGen and thus cannot
be relayed by the reduction to the IMP-KOA adversary A,
resulting in the loss of a factor of 2b−5
L . As in the Schnorr
setting, the reduction exploits the property that from two
valid conversations (R(cid:3), ch1, S1) and (R(cid:3), ch2, S2) for the
public key A with ch1 (cid:7)= ch2 (mod L), we can extract the
value s = S1−S2
mod L such that A = sB. The Reset
ch1−ch2
Lemma [59] which is the analogue of the Forking Lemma [24]
for identiﬁcation protocols instead of signatures, ensures that
two such conversations can be found with probability at least
(cid:3) − 1
(cid:3) is the success probability of A. We note
(