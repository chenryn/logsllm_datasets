the term packet, with the understanding that we mean either
a packet or a stream.
We argue below that
to control
matches and logs, combined with the presence of overlap-
ping signatures has security implications.
this feature of Snort
A. Security Implications of Overlapping Signatures
We start with the simple case of Snort 1.8.6, which can
only trigger one signature, even if there are more than one
signature that could be triggered given the packet’s char-
acteristics. Suppose that a packet satisfying the conditions
of S336 is observed by Snort 1.8.6, and that it happens
(because of implementation details in the Snort engine) that
S1672 is veriﬁed before S336 (the other order would not
impact our discussion). Then Snort raises an IDS event
because the packet satisﬁes S1672, and is silent about S336:
there is an evasion attack (which is common in older Snort
versions, see Section VI). Fortunately, S1672 and S336 are
related to the same vulnerability and the respective messages
(msg plug-in) are similar: the network administrator will see
an IDS event about the right attack/vulnerability. However,
exploiting the overlap between S1672 and S1624 (which
detect attacks for different vulnerabilities), an attacker can
mislead the network administrator: not all the information
is available to the administrator. Overlapping signatures
that detect different attacks/vulnerabilities are referred to as
orthogonal signatures. Otherwise, the signatures are non-
orthogonal.
This is probably one of the main reasons why modern
IDSs have the ability to log multiple IDS events triggered
(from several signatures) on a single packet.
Let us now turn our attention to Snort 2.4.5, which can
log multiple IDS events per analyzed packet and also allows
the network administrator to specify the maximum number
of IDS events to log per packet. The default conﬁguration
being to log a maximum of three IDS events, the network
administrator would receive all the necessary information in
the scenarios described earlier (e.g., IDS events for both
S1672 and S336): no evasion attack. However, using our
systematic analysis of overlapping signatures (see later in
this paper), we found several opportunities for creating a
packet that triggers three signatures, and we found (with
some additional manual work) that it is theoretically possible
to create a packet that triggers 25 different signatures in
Snort 2.4.5! Table I shows the list of the 25 signatures.
(Note that we are conﬁdent we could have identiﬁed a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
111packet triggering more than 25 signatures.) This means there
are still plenty of opportunities for evasion attacks with
Snort 2.4.5, although it can log multiple events. Whether
the packet triggering these signatures is a synthetic or real
attack is an open issue. However, we were able (see later
in the paper) to exploit identiﬁed overlapping signatures to
create a real evasion attack. Assuming 25 is the maximum
number of overlapping signatures that can be triggered in
Snort 2.4.5 by a packet, we discuss next whether changing
the conﬁguration such that the logging limit is 25 is practical.
S882
S907
S936
S928
S930
S987
S1107
S1113
S1160
S1189
S1594
S1598
S1599
S1601
S1602
S1612
S1740
S1741
S1806
S2145
S1301
S1455
S1536
S1537
S1593
Table I
25 OVERLAPPING SIGNATURES IN SNORT 2.4.5
B. Rationale for a Logging Limit
Why do IDSs such as Snort limit the number of IDS
events to log? We were unable to ﬁnd any documentation
on this subject. At this point, we can only speculate on the
Snort developer intentions. We came up with two reasonable
hypotheses:
the decision is based either on accuracy or
performance assessment of Snort.
First, since Snort is known to be vulnerable to squealing
attacks (e.g., [3,5]), we hypothesize that the Snort developers
have decided to limit the number of IDS events that could
be logged to mitigate this type of attack. (In essence, the
Snort developers know that signatures can overlap, though
they may not know the extent of the overlapping problem.)
Note that an attacker can still exploit overlapping signatures
to create squealing attacks, and that these attacks are more
efﬁcient than those created by tools such as Snot3, Stick4 and
Mucus [6] since only one packet is required (i.e., one that
triggers many signatures) instead of many. (In traditional
squealing attacks, the attacker has to send many packets,
each triggering one signature.)
Unfortunately, without a systematic analysis of the signa-
ture overlapping problem in the IDS signature database, it is
not possible to know the real extent of overlapping signatures
and therefore what is the maximum number of signatures
that could be triggered on one packet (Section VI). The fact
that it is possible to trigger many signatures (i.e., at least
25) on a single packet leads us to our second hypothesis.
Second, the Snort developers realized that signatures can
overlap, but acknowledge that increasing logging capabilities
has a performance impact on the IDS since it requires
I/O operations to store the IDS events in a log ﬁle. This
3www.securityfocus.com/tools/1983
4packetstormsecurity.nl/distributed/stick.htm
performance-related hypothesis is also supported somewhat
by some statements in the Snort ofﬁcial documentation.5
We therefore used the packet payload that triggers the 25
signatures of Table I in a rudimentary experiment to conﬁrm
our hypothesis that Snort limits logging of IDS events for
performance reasons. In this experiment, we generated a
trafﬁc trace for which we sent this packet payload (that
triggers 25 signatures) an arbitrary number of times (16).
The rationale for sending this packet payload several times is
to increase our chances to observe signiﬁcant differences in
cumulative processing times, if there are any to be observed.
We then provided this trafﬁc trace to Snort 2.4.5, using
different values for the log limit in the conﬁguration of Snort
(i.e., 1, the default value of 3, 5, 10, 15, 20 and 25), each time
measuring the time required by Snort to analyze the trafﬁc
trace. Table II shows that indeed increasing the log limit
has a performance impact on Snort when one packet can
trigger multiple signatures. These tests were conducted on a
Dell 1950 with two quad core Intel Xeon E5430 processors
(2.66 GHz), 32 GB of RAM, using a DELL MD3000i 15
TB SCSI disk and running Windows 2008 (64-bit).
Log Limit
Processing Time (sec)
1
3
5
10
15
20
25
1.2
1.8
3.2
6.3
8.5
12.4
15.5
LOG LIMIT VERSUS PROCESSING TIME FOR SNORT 2.4.5
Table II
Consequently, increasing the log limit too much could
lead to performance impacts, and therefore accuracy (the
IDS could start loosing packets), on an IDS such as Snort.
However, having a log limit
too low (e.g., one) could
lead to evasion attacks when many orthogonal overlapping
signatures (e.g., S1672 and S1624) are triggered on the same
packet.6 Regardless of the rationale for a limited log, the
essence of the question remains: (1) What is the extent of the
signature overlapping problem in a signature database? (2)
Is it possible to exploit a group of orthogonal overlapping
signatures (bigger than the log limit) to hide (prevent the
IDS from triggering the IDS event related to) a real working
attack (not a synthetic attack) and make it trigger orthogonal
signatures to the real attack, leaving the attack unnoticed?
We call this kind of attack a sneaky squealing attack.
In this paper, we propose a new approach to answer
question 1 and help answering question 2. We propose a
5www.snort.org/assets/125/snort manual-2 8 5 1.pdf,
section
1.4.3,
page 12.
6Note that Snort was tested using its default (intrusion detection) mode.
However, we believe results would be similar when using other modes (e.g.,
intrusion prevention).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
112new approach to precisely and systematically identify over-
lapping signatures in a signature database (Section IV), used
it to assess the signature overlapping problem in different
versions of Snort, and show that it is possible to make a
sneaky squealing attack (Section VI).
IV. A SET/AUTOMATON THEORY APPROACH TO THE
SIGNATURE OVERLAPPING PROBLEM
An approach to analyze the signature overlapping problem
in any IDS would require that we possess an IDS signature
(meta-)language, describing every possible IDS signature
language, from which to build our approach. Unfortunately,
to the best of our knowledge, this (meta-)language does not
exist. It is not even clear whether building that language
is realistic given the peculiarities of IDS languages, and
creating such a language is well beyond the scope of our
research. Fortunately, network IDS signature languages have
a sufﬁciently large number of common functionalities that
we can describe the main modeling capabilities of that
(meta-)language.
We can reasonably assume, without loss of generality,
that IDSs have a signature language that can be easily
abstracted (meta-language) into a state machine, where the
guard conditions of events triggering state changes are
logical expressions made of predicates, where predicates use
boolean functions (i.e., predicate functions) checking packet
characteristics. Thus, the speciﬁcation of an attack into an
IDS language is equivalent to specifying a state machine.
Consequently, the IDS manages multiple state machines at
the same time, one for each attack speciﬁed. When a new
packet is captured by the IDS, a state change occurs in all the
state machines with a guard condition matching this packet.
In the case of our analysis of the signature overlapping
problem, we want to know if certain guard conditions could
be missed (no transition occur) by the IDS because of the
log limit (which could limit the number of guard conditions
that can be triggered).
instance,
Consequently,
the problem is to analyze the overlap
between guard conditions. Guard conditions are made of
predicates where predicates specify constraints on the pro-
tocol ﬁelds and the packet payloads. For
in
Snort, $EXTERNAL_NET any -> $HOME_NET 21 has
ﬁve predicates that specify constraints on protocol ﬁelds
(i.e., source and destination IP addresses, and source and
destination TCP/UDP port), and pcre:"/bla/" and
content:"foo" are two predicates that specify con-
straints on the packet payload. Usually, in IDS signature
languages, ranges of values are used to specify constraints
on ﬁxed sets of possible values (e.g., the protocol ﬁelds),
and substrings or regular expressions (which can all be
represented as automata) are used to specify constraints
on large (possibly inﬁnite) sets of values (e.g., the packet
payload). A constraint is therefore a set of values or an
automaton. Thus, the signature overlapping problem is a
problem of intersecting sets of constraints. Consequently,
it is natural to rely on set theory (for the protocol ﬁeld
constraints) and automaton theory (for the packet payload
constraints) to devise a method to systematically study the
signature overlapping problem. Moreover, set and automaton
theory provide a uniform way of reasoning about overlap-
ping constraints since they deﬁne the ∪, ∩ and \ operators
which can then be used to identify overlapping signatures
where signatures are logical expressions of constraints.
This set/automaton theory approach entails three differ-
ent analyses of an IDS signature database: analyzing the
signatures for equality, inclusion and intersection. Although
this paper deﬁnes the entire approach, our tool and case
study focus on the equality and inclusion analyses. The
intersection analysis, being more computationally intensive
(Section V-A), is left for future work.
In this section, we present how each signature is converted
into a set of constraints (Section IV-A), we show how Snort
signatures can be converted into sets of constraints (Sec-
tion IV-B), and we deﬁne signature equality, inclusion and
intersection based on set/automaton theory (Section IV-C).
A. Signature Conversion
i
i
i
i
To convert IDS signatures into sets of constraints, a
function convSig() has to be deﬁned which converts every
signature i of an IDS d, which we note Sd
i , into the set of
i ) = CSd
).
constraints CSd
(i.e., convSig(Sd
. Remember that CSd
To deﬁne the function convSig(), we need a representa-
tion for CSd
expresses constraints on
packets. Packets are well-structured objects since they are
generated based on protocol speciﬁcations, which in turn
have well-documented ﬁelds. The protocol ﬁelds have ﬁxed
length (e.g., a maximum of 32 bits) and therefore can be
represented by ﬁnite sets of values (with the exception of
the packet payload). They can therefore be converted into
ranges of values, speciﬁed with minimum and maximum
allowed values (i.e, sets of values), and associated with a
protocol header ﬁeld. These ranges of values can then be
used with the ∪, ∩ and \ operators.
Regular expressions are often preferred to ranges of values
and are therefore used to specify the packet payload. Regular
expressions can not be directly used with operators such as
∪, ∩ and \, but they can be transformed into ﬁnite state
automata (FSA) [7], which support these operators.
Let F be the set of protocol ﬁelds and Π be the set of
protocols. For each π ∈ Π, F π is the set of ﬁelds in π,
that is, F π = {f | f ∈ π}. F is the union of each F π in
each protocol in Π. Let V f be the set of possible values
of ﬁeld f (i.e., all possible values allowed by f based on
its protocol speciﬁcation) and V f
the set of values that is