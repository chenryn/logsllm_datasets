### 演讲人介绍

- **2018年**
  - **Swan**：业余漏洞挖掘爱好者
  - **Heige**：Web安全领域的专家，二进制安全新手
  - **Hui Gao**：微软MSRC Top 100安全研究员
  - **业余时间**：专注于二进制漏洞挖掘
  - **目标**：寻找那些难以利用且无实战意义的漏洞
  - **原则**：
    - 避免灌水性质的漏洞报告（Adobe本身门槛较低）
    - 避开热点区域
    - 不与其他有KPI要求的团队竞争

### 项目背景与启发

- **2014年的思路**
  - 2014年5月29日，我们发现了一个看似普通的IE漏洞（CVE-2014-1792），POC非常简单，只有72字节的Use-After-Free漏洞。
  - **初始挑战**：一开始无法重现漏洞。
  - **解决方案**：通过反复试验，发现拖拽文件到浏览器可以触发UAF漏洞在`mshtml!CDragDropManager::DragOver+0x1f9`处。
  - **结论**：Fuzzer确实有乱发送鼠标键盘事件的模块，但具体如何找到该漏洞仍不明确。

- **类似案例**：CVE-2014-1791等
  - **特点**：有交互的漏洞，小众、难找且难以重现。
  - **现状**：Fuzz效率低，性价比不高，很少有人涉足。
  - **工具**：没有现成的工具，一切需要从头搭建。
  - **收获**：能找到各种搞不清楚原因的漏洞。

### 结论与立项原因

- **核心理念**：
  - 以前关注触发的内容，现在尝试不同的触发方式。
  - 无论是自然发生的交互还是人为制造的交互，都需要处理。
  - 收集会引起交互的PDF元素，如JS命令、错误及安全等级相关的元素。
  - 发送会引起交互的事件，包括JS层面和用户输入层面的模拟。

### 思路与方法

- **触发交互的方法**：
  - 使用`app.execMenuItem("xx")`等命令。
  - 76个动作：GoToPage, FitPage, TwoColumns等。
  - `app.alert(xx)`，`console.show()`等。
  - `this.mailDoc(true)`, `this.mailForm(true)`, `this.print(xx)`, `this.saveAs(xx)`, `this.insertPages(xx)`, `app.launchURL(xx)`等。

- **引起交互的JS**：
  - 引起一些Adobe Reader可容忍的错误，如无效参数、不存在的对象、安全等级警告等。

- **模拟用户响应**：
  - **键盘事件**：随机字符输入（圆周率映射到字符）、快捷键组合（Ctrl+H, Ctrl+L, Alt+F4）。
  - **鼠标事件**：鼠标移动、点击与拖拽、滚轮事件。
  - **系统事件**：全屏、打印、关闭应用程序等。

- **进一步细分**：
  - 输入随机，但记录随机种子以便回放。
  - 记录系统环境（内存、显示设置等）。
  - 记录应用程序初始与结束配置（窗口大小等）。
  - 记录输入时间间隔、虚拟机与物理机负载、网络响应情况。

### 可靠重现的条件

- **生成混合因素的PDF样本**：
  - 打开后根据对话框情况模拟用户响应。
  - 没有交互时制造一些交互事件。
  - 后台记录每次响应与主动事件。
  - 等待并观察一段时间，看是否有崩溃。
  - 重复上述步骤。

### 整合与实施

- **气宗**：从头开始构造文件，通过JS构造页面及页面元素。
- **剑宗**：找个模板替换掉JS。
- **其他方法**：Dummy fuzzing。

### 样本生成

- **特拉维夫分厂**：有人在做气宗的工作。
- **PDF文件格式**：我们对PDF文件格式了解有限。
- **黑哥**：对气剑宗的讨论一直耿耿于怀。

### 佛系Fuzzing构建

- **收集JS API素材**：爬取docs.adobe.com。
- **枚举搜索**：文档不全的部分用枚举来搜索。
- **基础文件中搜集对象名**：混合起来生成适合基础文件的JS语句。

#### 示例代码

```javascript
function obj(o) {
  for (i in o) {
    console.println(o[i]);
  }
}
obj(this);
```

- **JS语句库**：
  - `this.getField("")`
  - `this.getField("mydata1").setFocus();`

- **替换/插入基础文件中的JS语句**：

```javascript
1 0 obj
>
>>
/AcroForm 10 0 R 
/OpenAction 40 0 R
>> endobj
40 0 obj >
endobj
% JS program to execute
41 0 obj >
stream
app.alert('hmm, nice day!');
endstream
endobj
```

通过上述方法，我们可以更有效地进行漏洞挖掘，并提高Fuzzing的效率。