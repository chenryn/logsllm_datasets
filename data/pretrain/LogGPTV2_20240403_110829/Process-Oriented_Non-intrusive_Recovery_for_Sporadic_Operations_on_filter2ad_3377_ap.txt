### 优化后的文本

#### 替代方案
- **成本**: $0.0031
- **操作**: 将对冲实例添加到自动扩展组 (ASG)
- **直接替代方案**
  - **成本**: $0.0031
  - **步骤 7**: 注册新实例到弹性负载均衡器 (ELB)
  - **问题**: 注册 VM 到 ELB 失败
  - **受影响的恢复点**: RP1, RP3, RP5, RP6, RP8
  - **解决方法**:
    - 再次尝试将新实例注册到 ELB; 成本: $0
    - 再次尝试将新实例注册到 ELB; 成本: $0
    - **直接重做**

#### 恢复要求 R4 的满足
所选恢复操作的货币成本是最优/可接受的，这意味着与其他所有恢复操作相比，其货币成本相对较低。这种选择和优化机制确保了恢复货币成本能够满足利益相关者设定的目标。因此，减少货币成本的恢复要求得以实现。

#### 无需已知原因的错误恢复
##### 实验程序
POD-Recovery 不需要已知的原因：其恢复计划生成会动态地从当前错误状态找到一个计划，无论是捕获的早期状态还是预期的未来状态。为了详细研究这一方面，我们进行了其他故障的额外实验。我们再次运行滚动升级，注入各种故障，并在不提供错误原因的情况下触发恢复。每种类型的注入故障进行 30 次运行。

##### 实验结果
表 15 总结了这些实验的结果，显示了每种注入故障的成功恢复次数。如图所示，除了“云系统断开连接”（指恢复服务与 AWS API 之间的网络断开）之外，所有注入故障都成功恢复。由于此断开，POD-Recovery 无法采取任何恢复措施或评估资源的当前状态，因此无法恢复。

| 恢复点 | 错误发生 | 故障注入（原因） | 成功恢复次数 |
| --- | --- | --- | --- |
| 恢复点 1 | 自动扩展组使用错误的启动配置 | 启动配置被其他团队更改 | 30 |
| 恢复点 2 | 旧实例无法从 ELB 注销 | “DeregisterInstancesFromELB” 调用失败 | 30 |
| 恢复点 3 | 旧实例无法终止 | 30 |
| 恢复点 4 | 自动扩展组有错误版本的实例 | 30 |
| 恢复点 5 | 新实例无法注册到 ELB | “TerminateInstanceInASG” 调用失败 | 0 |
| 恢复点 6 | 云系统断开连接 | 启动配置被其他团队更改 | 0 |
| 恢复点 7 | 云系统断开连接 | “RegisterInstancesWithELB” 调用失败 | 0 |

##### 满足恢复要求 R5
由于动态恢复计划生成，我们的方法可以从无已知原因的错误中恢复——只要错误原因包含在资源空间内（例如，错误的 LC）并且可以通过 API 调用恢复。如果原因未包含或无法访问 API（例如，云系统断开连接），则我们的方法无法从错误中恢复。因此，错误原因不会影响恢复，尽管它可能会影响错误是否持续或重新出现。

#### 处理错误检测中的假阳性
##### 实验程序
为了测试 POD-Recovery 对错误检测假阳性的反应，我们在不注入错误的情况下触发恢复服务，并观察 POD-Recovery 是否采取任何行动。对于每个恢复点 (RP)，我们进行 50 次测试。由于错误检测会触发恢复服务，且 POD-Recovery 不考虑触发消息提供的任何原因，我们不再研究更复杂的假阳性。此外，如上所述，如果瞬时错误在恢复开始前消失，我们认为它是从恢复角度来看的假阳性。

##### 实验结果
表 16 显示了恢复服务处理错误检测假阳性的能力。我们可以看到，所有假阳性都被成功检测到：在我们的 250 次实验中，没有采取任何恢复行动。

| 恢复点 | 假阳性次数 | 未采取恢复行动次数 |
| --- | --- | --- |
| RP 1 | 50 | 50 |
| RP 2 | 50 | 50 |
| RP 3 | 50 | 50 |
| RP 4 | 50 | 50 |
| RP 5 | 50 | 50 |

##### 满足恢复要求 R6
由于我们的恢复方法设计具有动态计划生成，错误检测的假阳性不会导致不必要的恢复行动。

#### 恢复自身的恢复
##### 实验程序
为了测试在执行恢复计划期间发生错误时 POD-Recovery 的行为，我们在一个具有 8 个实例的云应用程序上进行滚动升级操作，滚动深度为 1。因此，在滚动升级期间，1 个旧实例将被终止并启动 1 个新实例。我在每个确定的恢复点注入故障以触发 POD-Recovery，等待选定的恢复操作执行，然后手动向恢复操作中注入额外的故障以触发“恢复的恢复”块。我为滚动升级操作的每个恢复点进行了 30 次“恢复自身的恢复”测试。

##### 实验结果
表 17 显示了滚动升级操作中“恢复的恢复”的恢复时间。相对标准偏差最多为 2.5%。

| 恢复点 | 进程步骤 | 错误 | 选定的恢复操作 (Pareto 集) | 恢复时间 (Pareto 集) | 选定的恢复操作 (用户约束) | 恢复时间 (用户约束) |
| --- | --- | --- | --- | --- | --- | --- |
| 恢复点 1 | 步骤 1. 创建新的启动配置 LC' | ASG 未附加到 LC' 但附加到 LC'' | 更新 ASG 再次使用 LC' | 3.19 s | 更新 ASG 再次使用 LC' | 2.79 s |
| 恢复点 2 | 步骤 2. 更新自动扩展组 | 从 ELB 注销 VM 失败 | 从 ELB 注销旧实例再次 | 3.19 s | 从 ELB 注销旧实例再次 | 3.07 s |
| 恢复点 3 | 步骤 3. 排序实例 | 终止 VM 失败（终止时间过长） | 从 ASG 中分离 VM | 直接替代方案 |
| 恢复点 4 | 步骤 4. 从 ELB 注销旧实例 | 从 ELB 注销 VM 失败 | 从 ELB 注销旧实例再次 | 3.19 s | 从 ELB 注销旧实例再次 | 3.07 s |
| 恢复点 5 | 步骤 5. 终止旧实例 VM | 终止 VM 失败（终止时间过长） | 从 ASG 中分离 VM | 直接替代方案 |
| 恢复点 6 | 步骤 6. 等待 ASG 启动新实例 VM' | 启动 VM' 失败 | 添加对冲实例到 ASG | 直接替代方案 |

希望这些优化使文档更加清晰、连贯和专业。如果有进一步的需求，请告知。