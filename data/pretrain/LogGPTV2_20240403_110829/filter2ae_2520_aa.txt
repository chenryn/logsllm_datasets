原文：
**WebSockets概述**
* * *
WebSockets是一种允许浏览器和服务器建立单个TCP连接，并进行双向异步通信的技术。这种技术非常适合Web应用程序，采用该技术之后，浏览器无需在后台发送数百个新的HTTP轮询请求，也照样能够实时更新。然而，对于测试者来说，这可不是什么好事，因为支持WebSockets的工具没有像支持HTTP的工具那样普遍，并且，这些工具用起来也更为复杂。
除了Burp Suite之外，还有一些其他工具也能用来处理WebSockets。虽然我们已经尝试过所有的工具，但没有一个完全符合我们的胃口。
  * Zed Attack Proxy（ZAP）
  * Pappy Proxy
  * Man-in-the-Middle Proxy（mitmproxy）
  * WebSocket/Socket.io（WSSiP）
对于希望通过WebSockets来绕过进攻端的安全检测的读者来说，可以参阅下面这篇文章。
    https://www.blackhillsinfosec.com/command-and-control-with-websockets-wsc2/
在本文中，我们关注的重点是[socket.io](https://socket.io/ "socket.io")，这是一个流行的JavaScript
WebSockets库。然而，需要说明的是，文中介绍的攻击思路不仅适用于其他库，同时，也适用于WebSockets协议。
那么，socket.io到底有多受欢迎呢？它在Github上收获了41,000多颗星。
同时，在NPM网站的WebSockets包排行榜上，它们还占据了第二名和第三名的位置。
事实上，就连优秀的[OWASP Juice-Shop项目](https://www.owasp.org/index.php/OWASP_Juice_Shop_Project "OWASP Juice-Shop项目")也采用了socket.io库，因此，我们决定使用socket.io来完成相应的演示。
    https://github.com/bkimminich/juice-shop/search?utf8=%E2%9C%93&q=socket.io&type=
在本文中，我们假设读者可以熟练使用Burp
Suite测试Web应用程序，同时，文中涉及的所有测试工作，都可以利用该软件的社区版本来完成。废话少说，直入主题吧！
如果通过浏览器访问Juice-Shop的话，就可以在后台快速考察WebSocket的流量了。为此，可以打开Burp，然后转到Proxy->
WebSockets历史记录，从这里就可以看到相关的流量了。
我们知道，HTTP是一种无状态协议，所以，它需要不停的发送请求/响应对；与此相反，WebSockets则是一种有状态协议。这就意味着，我们可以从服务器获得任意数量的传出“请求”和任意数量的传入“响应”。由于底层连接协议使用的是始终保持打开状态的TCP协议，因此，客户端和服务器可以随时发送消息，而无需等待另一端。看到这里，您就能够明白WebSockets历史记录视图与HTTP历史记录之间的差异了。
在该视图中，我们看到的，主要是发送和接收的单字节消息。但是，当应用程序执行一些有趣的操作时，我们将看到带有更大的有效载荷的消息。
Burp提供的许多功能，也可以用来测试WebSockets。比如，Burp可以实时拦截和修改WebSocket消息，遗憾的是，Burp仍然缺乏针对WebSockets的Repeater、Scanner或Intruder功能。在Burp中，WebSocket拦截是默认启用的，所以，我们只需打开主拦截即可。
我们将会收到截获的WebSocket消息，这里跟处理HTTP消息的方式别无二致。同样，我们也可以在拦截窗口中编辑这些消息。
之后，就可以在WebSockets历史记录选项卡中查看编辑后的消息了。
**将WebSockets降级为HTTP**
* * *
**方法1：活用Socket.io的HTTP备用机制**
* * *
我很快注意到了一件奇怪的事情：有时，我会在HTTP历史记录中看到类似于在WebSockets历史记录中所见过的消息。实际上，这个有趣的WebSockets消息与回答记分板质询有关。下面展示的是来自服务器的相同响应，只不过这次是在HTTP历史记录中。所以，我断定socket.io能够通过WebSockets或HTTP发送消息。
之所以允许使用HTTP，根据我的推测，是为了在WebSockets不受支持或因某种原因而被阻止的情况下，使应用程序仍然可以正常运行。传输参数之所以会引起我的注意，是因为我在观察相关请求过程中，发现其值有时候是“websockets”，有时候是“polling”。
在socket.io的文档中，有一个章节对“polling”和“websockets”这两个默认传输选项的运行机制进行了介绍。同时，它还介绍了如何通过将WebSockets指定为唯一的传输机制来禁用轮询。不过，我认为反过来也是可行的，这样，我们就可以将轮询指定为唯一的传输机制了。
    https://socket.io/docs/client-api/#with-WebSocket-transport-only
在浏览socket.io.js源代码过程中，我无意中发现了以下代码，看起来对我们非常有用。
    this.transports=n.transports||["polling","WebSocket"]
上面这行代码会将一个名为"transports"的内部变量设置为传入的某个值，但是，如果传入的值为false/empty的话，就将其设为默认的
[“polling”,”websocket”]
。到目前为止，这当然符合我们对轮询和WebSockets的默认传输的理解。那么，接下来让我们看看，当我们在Burp的Proxy->Options选项中通过设置匹配和替换规则来改变这些默认值后，会发生什么情况。
添加规则后，刷新页面（必须启用Burp的内置规则“Require non-cached
response”或执行强制刷新），这样，数据就不再通过WebSockets发送了。
这很好，但是，如果您使用的应用程序已经提供了优先于我们的新默认值的传输选项呢？在这种情况下，可以修改匹配和替换规则。下面给出的规则，将适用于socket.io库的不同版本，并会忽略应用程序开发人员指定的任何传输选项。
为了便于复制粘贴，下面给出对应的字符串：
    this\.transports=.*?\.transports\|\|\["polling","websocket"]
    this.transports=["polling"]
请务必将其设置为正则表达式匹配。
**方法2：阻止WebSockets升级**
* * *
需要说明的是，方法1只能用于socket.io，不过，如果经过适当修改的话，也可以用于其他客户端库。但是，下面介绍的方法将更加通用，因为它是以WebSockets协议本身为目标。
经过一番研究后，我发现WebSockets会首先通过HTTP进行通信，以便与服务器进行相关的协商，然后将连接“升级”为WebSocket方式。为此，需要完成的重要工作包括：
1）客户端发送带有WebSocket某些特殊头部的升级请求。
2）服务器将返回状态码101 Switching Protocols，以及WebSocket的某些特殊头部。
3）通信转换为WebSockets方式，之后，就看不到用于该特殊会话的HTTP请求了。
WebSockets RFC文档的第4.1节提供了如何中断这个工作流程的相关线索。
以下内容节选自