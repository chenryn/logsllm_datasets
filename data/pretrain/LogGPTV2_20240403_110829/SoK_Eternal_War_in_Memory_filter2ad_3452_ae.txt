### Table II: Comparison of Protection Techniques

| Technique | Performance % (avg/max) | Deployment Status (Dep.) | Compatibility | Primary Attack Vectors |
|-----------|--------------------------|--------------------------|---------------|------------------------|
| ASLR (PIE on 32-bit) | 10 / 25 × Binary | Not widely deployed | Relocatable code | Information leak, Direct overwrite |
| Stack Cookies | 67 / 150 × Binary | Widely deployed | Binary | Corrupt function pointer |
| Shadow Stack | 60 / 127 × — | Limited deployment | — | UAF, sub-obj, read corruption |
| WIT (Generic) | 104 / 155 × Binary/Modularity | Not deployed | Binary/Modularity | UAF, sub-obj, read corruption, Approximation |
| Abadi CFI | 15 / 30 × Binary/Modularity | Not deployed | Binary/Modularity | Information leak, Approximation |
| Abadi CFI (w/ Shadow Stack) | 10 / 25 × Binary/Modularity | Not deployed | Binary/Modularity | UAF, sub-obj, read corruption, Approximation |

### Description and Analysis

This table compares various protection techniques based on their performance impact, deployment status, compatibility issues, and primary attack vectors. The techniques are categorized into those that aim to protect against general memory corruption and those that specifically target control-flow hijacks.

#### Performance
Performance is measured as the average and maximum overhead using SPEC CPU 2000 or 2006 benchmarks. The values reported are from the developers of the tools, and they provide rough estimates due to differences in environments and configurations. Some solutions, like WIT and DSR, report lower overhead compared to other general protection techniques and even the Abadi CFI system under hijacking protections.

#### Deployment Status
Deployment status indicates whether a solution is used in practice. For example, full ASLR on Linux has not been widely adopted due to a 10-25% overhead, which is significant for 32-bit machines. Only solutions with negligible overhead are typically adopted.

#### Compatibility
Compatibility issues are a major barrier to the deployment of many proposed techniques. "Binary" in the table represents binary compatibility issues, meaning interfacing with unmodified binaries (e.g., legacy libraries). This can cause both false negatives and false positives, which are undesirable. Solutions that rely on points-to analysis have "modularity" issues, making it challenging to use re-usable libraries.

#### Primary Attack Vectors
None of the shown policies are perfect regarding robustness, except for enforcing complete Memory Safety with pointer-based techniques. Protections enforcing weaker Memory Safety policies have more attack vectors, such as use-after-free (UAF), corruption of sub-objects (sub-obj), or corrupting values in registers via read dereferences. DSR and ASLR provide the most comprehensive solutions as generic and hijacking protections, respectively, but both can be circumvented by information leaks. The protection level of DFI and CFI is limited by the static analysis, which enforces a static set of valid reaching definitions or jump targets rather than dynamically valid ones.

### Conclusion

The war against memory corruption bugs is ongoing, and while some solutions show promise, existing techniques are still impractical due to performance and compatibility issues. There is a pressing need for research, development, and deployment of better publicly available software protection techniques, especially built into commonly used compilers like LLVM and GCC. Open-source platforms can help solve some compatibility problems, allowing researchers to release robust but possibly slow protections to interested users. Such experiments will improve research further and may lift the performance threshold people impose on security. We hope this systematization of knowledge will help other researchers find new ways to make progress in this area.