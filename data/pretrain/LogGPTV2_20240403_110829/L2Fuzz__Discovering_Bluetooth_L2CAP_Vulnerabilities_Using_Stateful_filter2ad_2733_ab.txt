1 byte
Type Connection Handle Flag L2CAP Length
1 byte
2 bytes
2 bytes
2 bytes
Payload Length
1 byte
Code
2 bytes
Header Channel ID
1 byte
2 bytes
Identifier
Data Length
Data Fields
n bytes
Data Field B
Data Field A
*L2CAP Payload can be up to 65,535 bytes.
Fig. 3: Bluetooth L2CAP protocol format.
Data Field C
…
event) and an appropriate response to that request should be
output from the device (i.e., action).
L2CAP format. L2CAP consists of a header and a payload.
The payload can have multiple Data Fields depending on
the command being used (see Figure 3). To transmit an L2CAP
packet, the packet must be conﬁgured in the order of an HCI
packet, an L2CAP header, and an L2CAP payload.
The HCI packet
is used to communicate between the
host and the controller. The L2CAP header consists of
a Payload Length and Header Channel ID;
the
Header Channel ID identiﬁes the destination channel
endpoint of the packet and transmits L2CAP commands using
the signaling channel (i.e., 0x0001). The L2CAP payload
consists of Code, Identifier, Data Length, and Data
Fields. Code and Identifier indicate the command
code and packet ID, respectively. Next, Data Fields vary
depending on the L2CAP command; there are 26 L2CAP
commands in Bluetooth 5.2, and each command has different
Data Fields. For example, “L2CAP connection request”
has two Data Fields: Protocol/Service Multiplexer (PSM,
port number) and Source Channel ID (SCID). Meanwhile,
“L2CAP connection response” has four Data Fields: Des-
tination Channel ID (i.e., DCID), SCID, Result and Status.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
344
B. Problem Statement
In this paper, we focus on detecting L2CAP vulnerabilities
in a Bluetooth host stack. Because L2CAP is the lowest layer
of the host stack, it is necessary to ensure a root of trust.
In particular, L2CAP vulnerabilities (e.g., BlueBorne [12] and
SweynTooth [13]) can compromise the security of the entire
system, such as causing denial-of-service and remote code
execution. Therefore, to improve the security of Bluetooth ap-
plications, an effective technique that can detect vulnerabilities
in the L2CAP layer is required.
Several existing approaches have attempted to resolve such
undesirable situations; in particular, fuzz testing (i.e., fuzzing)
was mainly performed for security veriﬁcation of wireless
communications [2]–[4]. However, they are limited in detect-
ing potential vulnerabilities in Bluetooth applications owing to
the following two main challenges. Failure to overcome these
challenges can collectively impair the effectiveness of fuzzing.
Challenge 1: Increasing the L2CAP state coverage.
Because Bluetooth is a stateful protocol, it follows a speciﬁc
state machine (see Figure 2) and moves from one state
to another [14], each of which contains its own functions
to perform the desired operation (e.g., a connection-related
operation is conducted in the WAIT CONNECT state). The
L2CAP provides state-transition functions to enter each state.
Because vulnerabilities are highly likely to occur in (1) the
state transition process and (2) the functions of each state, we
need to validate the security of as many states as possible.
However, increasing the state coverage of a fuzzer is difﬁcult
owing to the complexity of the protocol and various implemen-
tations of the Bluetooth stack. In fact, implementations using
Bluetooth speciﬁcations are conducted differently according to
the vendors preferences. Therefore, it is challenging to cover
several L2CAP states on such a diverse implementation of
Bluetooth applications (e.g., BSS [4] can cover only three out
of 19 L2CAP states).
Challenge 2: Generating valid malformed packets. A
malformed packet refers to a packet wrapped with malicious
information or data [15]. Because malformed packets have a
higher chance of causing crashes that lead to fatal vulnerabili-
ties (e.g., denial-of-service and buffer overﬂows) [16]–[18], an
effective Bluetooth fuzzer needs to generate valid malformed
packets that are not rejected by the target device.
However, the method of simply mutating any or all ﬁelds
of L2CAP packets without considering the characteristics of
each ﬁeld, which is used in the existing Bluetooth fuzzing
techniques, results in most of the generated packets being
rejected by the target devices [19].
In addition, it is challenging to apply the existing mutating
algorithms of ﬁle fuzzing studies (e.g., AFL [20]) to Bluetooth
fuzzing; because there are as many Bluetooth stacks as the
number of manufacturers, and most of them are not open-
sourced, the technology of existing ﬁle fuzzing studies cannot
be applied.
(cid:3)(cid:19)(cid:18)(cid:18)(cid:13)(cid:12)(cid:24)(cid:16)(cid:19)(cid:18) (cid:7)(cid:13)(cid:21)(cid:25)(cid:13)(cid:23)(cid:24)(cid:1)(cid:28)(cid:6)(cid:8)(cid:5)(cid:1)(cid:26)(cid:1)(cid:8)(cid:4)(cid:6)(cid:29)
(cid:3)(cid:19)(cid:18)(cid:18)(cid:13)(cid:12)(cid:24)(cid:16)(cid:19)(cid:18) (cid:7)(cid:13)(cid:23)(cid:20)(cid:19)(cid:18)(cid:23)(cid:13)(cid:1)(cid:27) (cid:8)(cid:25)(cid:12)(cid:12)(cid:13)(cid:23)(cid:23)
(cid:6)(cid:21)(cid:7)(cid:21)(cid:9)(cid:1)(cid:21)(cid:19)(cid:7)(cid:16)(cid:20)(cid:13)(cid:21)(cid:13)(cid:17)(cid:16)(cid:1)
(cid:23)(cid:13)(cid:21)(cid:12)(cid:17)(cid:22)(cid:21)(cid:1)(cid:18)(cid:7)(cid:13)(cid:19)(cid:13)(cid:16)(cid:11)
(cid:15)(cid:3)(cid:9)(cid:11)(cid:12)(cid:5)(cid:4)(cid:1)(cid:2)(cid:14)(cid:2)(cid:8)(cid:13)(cid:1)(cid:3)(cid:11)(cid:10)(cid:6)(cid:8)(cid:7)(cid:16)
(cid:3)(cid:19)(cid:18)(cid:14)(cid:16)(cid:15)(cid:25)(cid:22)(cid:10)(cid:24)(cid:16)(cid:19)(cid:18)(cid:1)(cid:7)(cid:13)(cid:21)(cid:25)(cid:13)(cid:23)(cid:24)
(cid:3)(cid:19)(cid:18)(cid:14)(cid:16)(cid:15)(cid:25)(cid:22)(cid:10)(cid:24)(cid:16)(cid:19)(cid:18)(cid:1)(cid:7)(cid:13)(cid:21)(cid:25)(cid:13)(cid:23)(cid:24)
(cid:2)(cid:24)(cid:24)(cid:10)(cid:12)(cid:17)(cid:13)(cid:22)
(cid:3)(cid:7)(cid:14)(cid:10)(cid:17)(cid:19)(cid:15)(cid:9)(cid:8)(cid:1)(cid:2)(cid:17)(cid:16)(cid:10)(cid:13)(cid:11)(cid:22)(cid:19)(cid:7)(cid:21)(cid:13)(cid:17)(cid:16)(cid:1)(cid:5)(cid:9)(cid:20)(cid:18)(cid:17)(cid:16)(cid:20)(cid:9)(cid:1)(cid:24) (cid:4)(cid:9)(cid:16)(cid:8)(cid:13)(cid:16)(cid:11)
(cid:3)(cid:19)(cid:18)(cid:14)(cid:16)(cid:15)(cid:25)(cid:22)(cid:10)(cid:24)(cid:16)(cid:19)(cid:18)(cid:1)(cid:7)(cid:13)(cid:23)(cid:20)(cid:19)(cid:18)(cid:23)(cid:13)
(cid:9)(cid:18)(cid:11)(cid:25)(cid:18)(cid:24)(cid:25) (cid:6)(cid:3)
(cid:1)(cid:6)(cid:11)(cid:3)(cid:1)(cid:8)(cid:9)(cid:7)(cid:3)
(cid:10)(cid:9)(cid:5)(cid:4)(cid:4)(cid:3)(cid:9)(cid:3)(cid:2)
Fig. 4: Illustration of CVE-2017-1000251 attack ﬂow.
C. A Motivating Example
To suggest the need for an effective Bluetooth vulnerability
detection technique, we introduce the CVE-2017-1000251
case (called BlueBorne [12]), which is a critical remote code
execution vulnerability discovered in the Linux Bluetooth host
stack (i.e., BlueZ [21]). Figure 4 illustrates the attack ﬂow of
the BlueBorne.
First, the attacker forms an L2CAP connection using a
service discovery protocol (SDP) port that does not require
pairing. After the L2CAP connection is established, the victim
device enters the conﬁguration state. During the conﬁguration
process, the attacker sends a normal conﬁguration request
packet and a malformed conﬁguration response packet
to
the victim device. Because these packets are valid in the
conﬁguration state, the victim’s device accepts the packets
without rejection, which leads to a fatal attack.
In the overall attack ﬂow, we focused on the two main steps
that are central to the BlueBorne attack scenario: entering the
conﬁguration state, and sending malformed packets. Existing
Bluetooth fuzzing techniques: (1) do not fully consider the
L2CAP states, and (2) do not generate valid malformed pack-
ets (for testing purposes) for each L2CAP state. Therefore,
they easily fail to reach the speciﬁc state (e.g., conﬁguration
state), and even if they reach it, they send invalid packets that
are rejected by the target device, which results in a failure to
identify critical vulnerabilities including BlueBorne.
In this regard, a mature fuzzing technique is required to
overcome the two aforementioned challenges (see Section
II-B), that is, to generate malicious packets valid for each state
while having high L2CAP state coverage.
III. METHODOLOGY
In this section, we introduce the methodology of L2FUZZ, a
stateful fuzzer for detecting Bluetooth L2CAP vulnerabilities.
A. Overview
Figure 5 depicts the overall workﬂow of L2FUZZ, which
comprises the following four phases: (1) target scanning, (2)
state guiding, (3) core ﬁeld mutating, and (4) vulnerability
detecting. L2FUZZ ﬁrst scans a target Bluetooth device and
creates an L2CAP socket with its MAC address by connecting
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
345
Input/Output
Workflow
Target
Device
Tx
Rx
Run
(1) Target
Scanning
(2) State
Guiding
MAC address
Normal Packets
(for state transition)
Commands 
(3) Core Field
Mutating
Malformed Packets
(for fuzzing test)
Packet
queue
Bluetooth 
Dongle
Next state
(4) Vulnerability
Detecting
Response packets
Logfile
Fig. 5: High-level workﬂow of L2FUZZ.
a port that does not require pairing. L2FUZZ then traverses
L2CAP states and generates malformed packets for testing
purposes. For state transition, L2FUZZ uses predeﬁned valid
commands for each of the 19 L2CAP states;
these valid
commands were mapped based on the event and action of each
state. To generate valid malformed packets, L2FUZZ segments
an L2CAP packet format into parts to be mutated (i.e., mutable
ﬁelds) and parts to be maintained. By mutating only mutable
ﬁelds while it does not change the maintained parts, L2FUZZ
can generate valid malformed packets that are less likely to be
rejected in the target device. Finally, L2FUZZ detects potential
vulnerabilities by sending the generated malformed packets to
the target device.
B. Target scanning
L2FUZZ ﬁrst scans the target device’s meta-information,
namely, the MAC address (for establishing L2CAP socket),
device name, class of the device (e.g., smartphone or laptop),
and its Organizationally Unique Identiﬁer (OUI). Thereafter,
L2FUZZ scans the service ports of the target device to detect
ports that do not require pairing. Because (1) attackers often
exploit Bluetooth vulnerabilities without pairing, (e.g., see
Section II-C) (2) fuzzing after pairing is meaningless as this
process is the same as remotely controlling the target device
after gaining permission, and (3) for ports that require pairing,
sending test packets without pairing causes the device to
reject command packets without parsing any ﬁelds. Therefore,
we decided that L2Fuzz should perform fuzz testing without
pairing to counteract such external attacks.
Potentially exploitable port scanning. To ﬁnd potentially
exploitable ports that do not require pairing, L2FUZZ receives
a list of supported service ports on the target device and at-
tempts to connect to each service port. If all ports are identiﬁed
as requiring pairing, L2FUZZ then attempts to connect to the
SDP port, which does not require pairing and is supported by
every Bluetooth device [22], [23] as an alternative. By com-
municating with the target device through the port that does
not require pairing, L2FUZZ can detect L2CAP vulnerabilities
that are not detected in a paired situation.
C. State guiding
Next, L2FUZZ traverses each L2CAP state in the target
device. To increase the state coverage, we ﬁrst identify valid
commands for each state, and use them in state transition.
State classiﬁcation. Before identifying valid commands, we
ﬁrst clustered the 19 L2CAP states based on the event that each
state receives, the functions that internally process the desired
operation in each state, and the corresponding output action,
which we referred to as a job. Consequently, we classiﬁed the
19 L2CAP states into the following seven jobs:
TABLE I: Jobs categorized based on events, functions, and actions
of L2CAP states.
Job
Closed
Connection
Creation
Conﬁguration
Disconnection
Move
Open
States
{CLOSED}
{WAIT CONNECT, WAIT CONNECT RSP}
{WAIT CREATE, WAIT CREATE RSP}
{WAIT CONFIG, WAIT CONFIG RSP,
WAIT CONFIG REQ, WAIT CONFIG REQ RSP,
WAIT SEND CONFIG, WAIT IND FINAL RSP,
WAIT FINAL RSP, WAIT CONTROL IND}
{WAIT DISCONNECT}
{WAIT MOVE, WAIT MOVE RSP,
WAIT MOVE CONFIRM, WAIT CONFIRM RSP}
{OPEN}
By identifying the commands used for each job, we included
commands in the test packet, which are valid for the state of
the target device; this signiﬁcantly reduces the possibility that
the packet will be rejected by the target device. Moreover,
because valid commands can be shared between different
states in a job, more diverse test packets can be generated;
consequently, fuzzing coverage can be increased.
As an example of job classiﬁcation, we introduce the
process of “Connection job” identiﬁcation. Table II summa-
rizes the events and actions of the WAIT CONNECT state
conﬁrmed in the Bluetooth 5.2 speciﬁcation document.
TABLE II: WAIT CONNECT state’s events and actions.
Event
Connect Req
Connect Rsp
Conﬁg Req
Conﬁg Rsp
Disconnect Rsp
Create Channel Req
Create Channel Rsp
Move Channel Req
Move Channel Rsp
Move Channel Conﬁrm Req
Move Channel Conﬁrm Rsp
Action
Connect Rsp
Reject
Reject
Reject
Reject
Reject
Reject
Reject
Reject
Reject
Reject
State transition?
WAIT CONFIG
No
No
No
No
No
No
No
No
No
No
When the target device is in the WAIT CONNECT state, if
we send a connection request (Connect Req) packet, the target
device does not reject the packet because this packet is valid
in the current state. After executing the function related to the
connection, the target device sends a corresponding response
packet (Connect Rsp) and changes its state to WAIT CONFIG.
We conﬁrmed that in the WAIT CONNECT RSP state, the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
346
target device performed almost similar operations (i.e., events,
functions, and actions); thus, we classiﬁed WAIT CONNECT
and WAIT CONNECT RSP as the connection job.
One consideration was that Bluetooth devices did not al-
ways display the exact same operations as deﬁned in the
documentation. For example, some Android devices did not
reject the “Connect Rsp” event even though the device was
in the WAIT CONNECT state. This occurred because of the
variety of implementations of the Bluetooth stack. Therefore,
we set the boundaries of valid commands for each job slightly
more generously to increase fuzzing effectiveness, knowing
that several packets may be rejected.
Consequently, we map valid commands to each job based
traces. The valid
on the speciﬁcation and various packet
commands mapped for each job are shown in Table III.
TABLE III: Valid commands mapped for each job.
Job
Closed
Connection
Creation
Conﬁguration
Disconnection
Move
Open
Valid commands
All commands
Connect Req/Rsp
Create Channel Req/Rsp
Conﬁg Req/Rsp
Disconnect Req/Rsp
Move Channel Req/Rsp,
Move Channel Conﬁrmation Req/Rsp
All commands
By clustering states into jobs and mapping valid commands
for each job, L2FUZZ can cover most of the L2CAP states in
the security validation of Bluetooth devices while decreasing
the test packet rejection rate. This, in turn, renders L2FUZZ
more likely to detect potential L2CAP vulnerabilities.
State transition. With the valid commands, L2FUZZ gen-
erates normal packets, and then sends the packets to the target
device through the packet queue. After receiving the packets,
the target device enters the corresponding state and sends a
response packet. The packet queue parses the response packets
and returns the state transition result. If L2FUZZ succeeds in
the state transition, it obtains the valid commands for the target
state and generates a valid malformed packet in next phase.
When the fuzz testing of the target state is completed, the state
transition is executed again to move to the next target state.
D. Core ﬁeld mutating
L2FUZZ then generates malformed packets that can lead to
vulnerabilities in the entered L2CAP state of the target device.