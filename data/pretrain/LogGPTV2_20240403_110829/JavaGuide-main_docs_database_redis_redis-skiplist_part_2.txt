    }
    //基于上述结果拿到当前节点的后继节点
    Node p = h;
    for (int i = level - 1; i >= 0; i--) {
        while (p.forwards[i] != null && p.forwards[i].data = 0; i--) {
        while (p.forwards[i] != null && p.forwards[i].data = 0; i--) {
        while (p.forwards[i] != null && p.forwards[i].data = 0; i--) {
            if (updateArr[i].forwards[i] != null && updateArr[i].forwards[i].data == value) {
                updateArr[i].forwards[i] = updateArr[i].forwards[i].forwards[i];
            }
        }
    }
    //从最高级开始查看是否有一级索引为空，若为空则层级减1
    while (leveCount > 1 && h.forwards[leveCount] == null) {
        leveCount--;
    }
}
```
### 完整代码以及测试
完整代码如下，读者可自行参阅:
```java
public class SkipList {
    /**
     * 跳表索引最大高度为16
     */
    private static final int MAX_LEVEL = 16;
    /**
     * 每个节点添加一层索引高度的概率为二分之一
     */
    private static final float PROB = 0.5 f;
    /**
     * 默认情况下的高度为1，即只有自己一个节点
     */
    private int leveCount = 1;
    /**
     * 跳表最底层的节点，即头节点
     */
    private Node h = new Node();
    public SkipList() {}
    public class Node {
        private int data = -1;
        /**
         *
         */
        private Node[] forwards = new Node[MAX_LEVEL];
        private int maxLevel = 0;
        @Override
        public String toString() {
            return "Node{" +
                "data=" + data +
                ", maxLevel=" + maxLevel +
                '}';
        }
    }
    public void add(int value) {
        //随机生成高度
        int level = randomLevel();
        Node newNode = new Node();
        newNode.data = value;
        newNode.maxLevel = level;
        //创建一个node数组，用于记录小于当前value的最大值
        Node[] maxOfMinArr = new Node[level];
        //默认情况下指向头节点
        for (int i = 0; i = 0; i--) {
            while (p.forwards[i] != null && p.forwards[i].data  PROB && level = 0; i--) {
            while (p.forwards[i] != null && p.forwards[i].data = 0; i--) {
            while (p.forwards[i] != null && p.forwards[i].data = 0; i--) {
                if (updateArr[i].forwards[i] != null && updateArr[i].forwards[i].data == value) {
                    updateArr[i].forwards[i] = updateArr[i].forwards[i].forwards[i];
                }
            }
        }
        //从最高级开始查看是否有一级索引为空，若为空则层级减1
        while (leveCount > 1 && h.forwards[leveCount] == null) {
            leveCount--;
        }
    }
    public void printAll() {
        Node p = h;