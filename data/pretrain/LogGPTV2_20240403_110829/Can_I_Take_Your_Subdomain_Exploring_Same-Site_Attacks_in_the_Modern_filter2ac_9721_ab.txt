(FQDNs) to devices in their network. This practice allows to
statically reference resources in the network, irrespective of
the assignment of IP addresses that may change over time.
Although hosts might be inaccessible from outside of the or-
ganization network, internal users are put in a related-domain
attacker position with full capabilities, excluding https that
depends on the network conﬁguration of the organization.
Institutions providing roaming services are similarly prone
to the same issue. This is the case of eduroam, a popular in-
ternational education roaming service that enables students
and researchers to have a network connection provided by
any of the participating institutions. As a novel insight, we
discovered that system integrators at some local institutions
are assigning eduroam users a subdomain of the main insti-
tution, such as ip1-2-3-4.eduroam.example.com, where
1.2.3.4 is a placeholder for the public IP assigned to the user
connected to the eduroam network. This practice ultimately
promotes any eduroam user to a related-domain attacker with
full control of the host that is pointed by the DNS record.
Firewall restrictions might hinder complete visibility on the
Internet of the personal device of the user. Still, users’ devices
might be accessible within the institution network.
3.2.3 Hosting Providers and Dynamic DNS Services
Many service providers allow users to create websites un-
der a speciﬁc subdomain, e.g., .github.io on
GitHub. Subdomains hosting user-supplied content are not
related to each other if the parent domain is included in the
PSL, as in the case of github.io. Unfortunately, several ser-
vice providers that we reviewed did not include their domains
in the PSL, turning any of their users into a related-domain
attacker for all the websites hosted on the same platform.
A similar consideration applies to dynamic DNS providers.
The race to offer a huge variety of domains under which users
can create their custom subdomains, made it unfeasible for
certain providers to maintain a list of entries in the PSL. The
FreeDNS service [24] pictures well the problem, with 52,443
offered domains and a declared user base of 3,448,806 active
users as of October 2020, who are in a related-domain attacker
position to all the subdomains and domains of the network,
since none of them has been added to the PSL.
While in the case of hosting and service providers, the capa-
bilities granted to the attacker largely depend on the speciﬁc
service (see §5.1.2 for more details), a dynamic DNS service
allows users to point a DNS record to a host they fully control,
capturing all the capabilities discussed in Table 2.
3.2.4 Compromised Hosts/Websites
Aside from scenarios in which attackers gain control of a re-
source that is either abandoned or explicitly assigned to them,
2920    30th USENIX Security Symposium
USENIX Association
another way to obtain a related-domain attacker position is
the exploitation of vulnerable hosts and websites. Intuitively,
attackers achieving code execution on the vulnerable appli-
cation have capabilities ranging from serving arbitrary con-
tent to full host control. If the exploited vulnerability is an
XSS, attackers could take advantage of the ability to execute
JavaScript code from a privileged position to escalate the
attack against a more sensitive website.
Furthermore, attackers have been found employing a tech-
nique called domain shadowing [7, 34] to illicitly access the
DNS control panel of active domains to distribute malware
from arbitrary subdomains. Alowaisheq et al. recently discov-
ered that stale NS records [5] could also be abused by attackers
to take control of the DNS zone of a domain to create arbitrary
DNS records. Controlling the DNS of a domain is the highest
privileged setting for a related-domain attackers, since they
can point subdomains to hosts they fully control and reliably
obtain TLS certiﬁcates.
3.3 Web Threats
We identify for the ﬁrst time a comprehensive list of web
security threats posed by related-domain attackers, discussing
in particular the scenarios where a related-domain attacker
might have an advantage over traditional web attackers. While
there exists ample literature on threats to cookies conﬁdential-
ity and integrity posed by related-domain attackers [15, 62],
in this work we focus on a complete account of how related-
domain attackers affect web application security by exploring
less-studied mechanisms.
3.3.1 Inherent Threats
Related-domain attackers sit on the same site of their target
web application. This is weaker than sharing the same origin
of the target, which is the traditional web security boundary,
yet it sufﬁces to abuse the trust put by browser vendors and
end users on same-site content. We discuss examples below.
Trust of End Users. End users might trust subdomains of
sites they are familiar with more than arbitrary external sites.
For instance, attackers could exploit the residual trust asso-
ciated with the subdomain’s prior use [30] or deceive users
into inserting their passwords provided by a password man-
ager [56]. This is particularly dangerous on some mobile
browsers, which display only the rightmost part of the domain
due to the smaller display size, hence a long subdomain might
erroneously look like the main site. Attackers could similarly
abuse the trust inherited from the apex domain to use com-
promised subdomains for the distribution of malware or other
types of dangerous content [34].
Site Isolation. Site Isolation is a browser architecture ﬁrst
proposed and implemented by the Google Chrome browser,
which treats different sites as separate security principals
requiring dedicate rendering processes [44]. These processes
can access sensitive data for a single site only, which mitigates
the leakage of cross-origin data via memory disclosure and
renderer exploits, including attacks based on Spectre [29, 47].
As acknowledged in the original Site Isolation paper [44],
“cross-origin attacks within a site are not mitigated”, hence
related-domain attackers can void the beneﬁts of this security
architecture.
Same Site Request Forgery. The introduction of same-site
cookies [59] and the recent enforcement of this security fea-
ture by default on major browsers [20,54] received high praise
as an effective countermeasure against CSRF [26]. In the ab-
sence of other defenses [6], the restrictions introduced by
same-site cookies are voided by a related-domain attacker
who can mount a same-site request forgery attack just by in-
cluding an HTML element pointing to the target website in
one of their web pages.
3.3.2 Cookie Conﬁdentiality and Integrity
Cookies can be issued with the Domain attribute set to an
ancestor of the domain setting them, so as to share them with
all its subdomains. For example, good.foo.com can issue a
cookie with the Domain attribute set to foo.com, which is sent
to both good.foo.com and evil.foo.com. Hence, related-
domain attackers can trivially break cookie conﬁdentiality and
abuse of stolen cookies [62], e.g., to perform session hijack-
ing. The Domain attribute poses risks to cookie integrity too:
evil.foo.com can set cookies for good.foo.com, which can
be abused to mount attacks like session ﬁxation. Note that
the integrity of host-only cookies is at harm too, because a
related-domain attacker can mount cookie shadowing, i.e., set
a domain cookie with the same name of a host-only cookie to
confuse the web server [62].
Site operators can defend against such threats by careful
cookie management. For example, they can implement (part
of) the session management logic on top of host-only cookies,
which are not disclosed to related-domain attackers. More-
over, they can use the __Host- preﬁx to ensure that security-
sensitive cookies are set as host-only, thus ensuring their in-
tegrity against related-domain attackers.
Capabilities. The capabilities required by a related-domain
attacker to break the conﬁdentiality of a domain cookie de-
pend on the ﬂags enabled for it: if the cookie is HttpOnly,
it cannot be exﬁltrated via JavaScript and the headers ca-
pability is needed to sniff it; otherwise, just one between
headers and js sufﬁces. If the Secure ﬂag is enabled, the
cookie is sent only over HTTPS, hence the https capabil-
ity is also required. As to integrity, all cookies lacking the
__Host- preﬁx have low integrity against a related-domain
attacker with the headers or js capabilities, since they are af-
fected by cookie shadowing. There is one exception: cookies
using the __Secure- preﬁx have low integrity only against
related-domain attackers which additionally have the https
capability, since these cookies can only be set over HTTPS.
USENIX Association
30th USENIX Security Symposium    2921
3.3.3 Bypassing CSP
Content Security Policy (CSP) is a client-side defense mecha-
nism originally designed to mitigate the dangers of content
injection and later extended to account for different threats,
e.g., click-jacking. CSP implements a whitelisting approach
to web application security, whereby the browser behavior on
CSP-protected web pages is restrained by binding directives
to sets of source expressions, i.e., a sort of regular expres-
sions designed to express sets of origins in a compact way. To
exemplify, consider the following CSP:
script-src foo.com *.bar.com;
frame-ancestors *.bar.com;
default-src https:
three
policy contains
This
directives, script-src,
frame-ancestors and default-src, each bound to a
set of source expressions like foo.com and *.bar.com.
It allows the protected page to: (i) include scripts from
foo.com and any subdomain of bar.com; (ii) be included
in frames opened on pages hosted on any subdomain of
bar.com; (iii) include any content other than scripts over
HTTPS connections with any host.
Since the syntax of source expressions naturally supports
the whitelisting of any subdomain of a given parent, related-
domain attackers represent a major threat against the secu-
rity of CSP. For example, if an attacker could get control of
vuln.bar.com, then they would be able to bypass most of
the protection put in place by the CSP above. In particular,
the attacker would be able to exploit a content injection vul-
nerability on the CSP-protected page to load and execute
arbitrary scripts from vuln.bar.com, thus voiding XSS miti-
gation. Moreover, the attacker could frame the CSP-protected
page on vuln.bar.com to perform click-jacking attacks. To
avoid these threats, site operators should carefully vet the
subdomains included in their CSP whitelists.
Capabilities. A related-domain attacker requires the capabil-
ity to upload arbitrary ﬁles on the website under its control
to void the protection offered by CSP against content inclu-
sion vulnerabilities, with the only notable exception of frame
inclusion which requires only the html capability. For active
contents [37], i.e., those that may have access to the DOM of
the page, the attacker also needs the https capability if the
target page is hosted over HTTPS. Regarding click-jacking
protection, attackers only requires the html capability to in-
clude the target website on a page under their control.
3.3.4 Abusing CORS
Cross-Origin Resource Sharing (CORS) is the standard ap-
proach to relax the restrictions enforced by SOP on cross-
origin communications, i.e., preventing JavaScript from read-
ing the content of responses to cross-origin requests. Con-
sider a service at https://www.example.com, which needs
to fetch sensitive data from api.example.com via JavaScript:
to enable CORS, https://api.example.com can inspect
the Origin header of incoming requests to detect if they
come from https://www.example.com and, in such a case,
set a CORS header Access-Control-Allow-Origin with
the value https://www.example.com in the response. As
an additional layer of protection, the server must also set
the Access-Control-Allow-Credentials header to true
if the request includes credentials, e.g., cookies, since the as-
sociated response is more likely to include sensitive content.
Related-domain attackers can abuse CORS to bypass the
security restrictions put in place by SOP when the afore-
mentioned server-side authorization checks are too relaxed,
i.e., read access is granted to arbitrary subdomains. For ex-
ample, if https://api.example.com was willing to grant
cross-origin access to any subdomain of example.com be-
sides www.example.com, a related-domain attacker could get
unconstrained access to its data. To avoid these threats, site
operators should be careful in the security policy implemented
upon inspection of the Origin header, e.g., restricting access
just to a few highly trusted subdomains.
Capabilities. To exploit CORS misconﬁgurations, an attacker
needs the js capability to issue requests via JavaScript APIs
like fetch and access the content of the response. The https
capability may be required depending on the CORS policy
deployed by the site operator.
3.3.5 Abusing postMessage
The postMessage API supports cross-origin communication
across windows (e.g., between frames or between a page
and the popup opened by it). The sender can invoke the
postMessage method of the target window to transmit a mes-
sage, possibly restricting the origin of the receiver. The re-
ceiver, in turn, can use event handlers to listen for the message
event and process incoming messages.
Despite its apparent simplicity, the postMessage API
should be used with care, as shown by prior research [50, 51].
In particular, when sending conﬁdential data, one should
always specify the origin of the intended receiver in the
postMessage invocation. When receiving data, instead, one
should check the origin of the sender (via the origin prop-
erty of the received message) and appropriately sanitize the
content of the message before processing it.
Related-domain attackers can undermine web application
security when site operators put additional trust in subdo-
mains. In particular, related-domain attackers can try to abuse
their position to void the aforementioned origin checks and
communicate with inattentive receivers that might process
messages in an unsafe way, e.g., messages are provided as
input to eval or stored in a cookie, opening the way to ses-
sion hijacking attacks. Site operators can defend against such
attacks by carefully vetting authorized subdomains for com-
munication between windows.
2922    30th USENIX Security Symposium
USENIX Association
ﬁrst by identifying subdomains of prominent websites that
can be abused by a related-domain attacker exploiting dan-
gling DNS records, and second by evaluating the security
implications on web applications hosted on related domains
of the vulnerable websites. Our methodology is based on the
pipeline summarized in Figure 2 and further described in this
section.
Figure 2: Vulnerability scanning pipeline.
4.1 DNS Data Collection
Capabilities. An attacker requires scripting capabilities (js)
to open a new tab containing the vulnerable page and commu-
nicate with it via the postMessage API. Similarly to CORS,
https may be needed depending on the origin checking per-
formed by the receiver.
3.3.6 Abusing Domain Relaxation
Domain relaxation is the legacy way to implement commu-
nication between windows whose domains share a common
ancestor. Assume that a page at a.example.com opens a
page at b.example.com inside a frame. Besides using the
postMessage API as explained, the two frames can com-
municate by relaxing their document.domain property to
a common ancestor. In this case, both frames can set such
property to example.com, thus moving into a same-origin
position.1 After that, SOP does not enforce any isolation be-
tween the two frames, which can communicate by writing
on each other’s DOM. Note that example.com must explic-
itly set the document.domain property to example.com if
it is willing to engage in the domain relaxation mechanism,
although this is apparently a no-op.
Domain relaxation can be abused by related-domain attack-
ers, who can look for pages which are willing to engage in
such dangerous communication mechanism and abuse it. In
particular, when the attacker moves into a same-origin posi-
tion, SOP does not provide any protection anymore, which
voids any conﬁdentiality and integrity guarantee. Websites
that are willing to communicate with a selected list of related
domains should refrain from using this mechanism – which
is deemed as insecure – and should implement cross-origin
communication on top of the postMessage API.
Capabilities. Besides the js capability needed to perform the
relaxation and access the DOM of the target page, attackers
need to setup their attack page on the same protocol of the
target, hence the https capability may also be required.
4 Analysis Methodology
We performed a large-scale vulnerability assessment to mea-
sure the pervasiveness of the threats reported in this work,
We enumerated the subdomains of the top 50k domains in the
Tranco list [42] from March 2020.2 The enumeration phase
was based on amass [41], a state of the art information gath-
ering tool backed by the OWASP project. The tool supports
several techniques to maximize the chances of discovering
subdomains of a target. In our conﬁguration, we extracted sub-
domains using the following approaches: (i) fetch data from
publicly available sources, such as Censys [17], certiﬁcate
transparency logs [49], search engines, etc.; (ii) attempt DNS
zone transfer to obtain the complete list of RRs deﬁned for a
certain DNS zone; (iii) inspect ﬁelds of TLS certiﬁcates, e.g.,
Subject Alternative Name and Common Name. To speed
up the enumeration phase and lower the number of network
requests, we avoided bruteforcing DNS resolvers against do-
main name wordlists. Similarly, we explicitly disabled the
resolution of subdomain alterations.
We modiﬁed amass to compute the DNS resolving chains
of all the domains obtained in the previous step. Similarly
to [33], we deﬁne a resolving chain as a list of DNS RRs in
which each element is the target of the previous one, starting
from a DNS record of type A/AAAA, CNAME or NS. We ignore
MX records because we focus on web attacks in this study. For
CNAME and NS records, we recursively perform a DNS reso-
lution until an A/AAAA RR is detected. Unterminated DNS
resolving chains can occur in presence of a record pointing
to an unresolvable resource or due to the abrupt termination
of amass after reaching the execution timeout limit of 5 min-
utes. To ensure the correctness of the results, we recompute
unterminated DNS resolving chains using the dig utility.
Starting from the set of 50k domains in the Tranco list,
our framework identiﬁed 26 million valid subdomains. In a
previous study, Liu et al. [33] used a relatively small wordlist
of 20,000 entries to ﬁnd possible subdomains of the Alexa top
10k list, 2,700 .edu domains, and 1,700 .gov domains. Com-
pared to their work, our domain selection is penalized given
that we do not restrict to speciﬁc TLD zones. For instance,
.edu domains typically have a high number of subdomains
in contrast to other categories (see §5.1.1). Nevertheless, our
results outperform the ﬁndings of Liu et al. by discovering on
average 13 times more subdomains.
1We assume here that the two frames share the same protocol and port.
2https://tranco-list.eu/list/ZKYG/1000000
USENIX Association
30th USENIX Security Symposium    2923
DNS ScannerRDScanDomain ListDisclosureVulnerable(sub)domainsSubdomain takeover scannerVulnerability dislcosureDNS enumerationConstruction of resolving chainsWeb crawlerWeb vulnerability scannerNetworkPublic DatasourcesHTTPHTTPDNSDNSWeb AnalyzerCrawler  PMForce    CORS checker      ...               Amass   dig           4.2 RDScan
After populating a database with the DNS records of the dis-
covered subdomains, the framework detects dangling records
and veriﬁes that all the preconditions to mount a subdomain
takeover attack are met. By doing so, false positives are mini-
mized in the analysis. This component, that we call RDScan,
has three different modules that test for the presence of the