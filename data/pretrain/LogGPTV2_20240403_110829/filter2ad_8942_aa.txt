# 浅谈RASP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
本篇将近一个月对rasp的研究成果进行汇总，具体讨论RASP的优劣势以及一些个人的理解和看法。
## 0x01 概述
RASP是Runtime application self-protection的缩写，中文翻译为应用程序运行时防护，其与WAF等传统安全防护措施的主要区别于其防护层级更加底层——在功能调用前或调用时能获取访问到当前方法的参数等信息，根据这些信息来判定是否安全。
RASP与传统的基于流量监测的安全防护产品来说，优势点在于可以忽略各种绕过流量检测的攻击方式（如分段传输，编码等），只关注功能运行时的传参是否会产生安全威胁。简单来说，RASP不看过程，只看具体参数导致方法实现时是否会产生安全威胁。简单类比一下，RASP就相当于应用程序的主防，其判断是更加精准的。
虽然RASP有很多优势，但是由于其本身的实现也导致了很多问题使其难以推广：
  * 侵入性过大。对于JAVA的RASP来说，它的实现方式是通过Instrumentation编写一个agent，在agent中加入hook点，当程序运行流程到了hook点时，将检测流程插入到字节码文件中，统一进入JVM中执行。在这里如果RASP本身出现了什么问题的话，将会直接对业务造成影响。
  * 效率问题。由于需要将检测流程插入到字节码文件中，这样会在运行时产生大量不属于业务流程本身的逻辑，这样会增加业务执行的流程，对业务效率造成一定的影响。
  * 开发问题。针对不同的语言，RASP底层的实现是不一样的，都需要重新基于语言特性进行专门的开发，开发的压力很大。
  * 部署问题。以Java RASP来举例子，Java RASP有两种部署方式，一种需要在启动前指定agent的位置，另一种可以在运行时用attach的方式进行部署，但是他们都存在不同的问题。 
    * 在启动前指定agent的位置就以为着在进行部署时需要重启服务，会影响到正常的业务。
    * 在运行时进行attach部署时，当后期RASP进行版本迭代重新attach时，会产生重复添加代码的情况（由于JVM本身机制的问题，基本无法将修改的字节码重新转换到运行时的字节码上，所以没办法动态添加代理解决该问题）。
目前RASP的主方向还是Java RASP，受益于JVMTI，现在的Java RASP是很好编写的，效果也是比较错的。同时也受限于JVMTI，Java
RASP的技术栈受到了一定的限制，很难在具体实现上更进一步，只能在hook点和其他功能上进行完善。
跳出乙方视角来审视RASP，其最好的实践场景还是在甲方企业内部，从某个角度来说RASP本来就是高度侵入业务方代码的一种防护措施，在纷繁复杂的业务场景中，只有甲方根据业务进行定制化开发才能达到RASP的最高价值，如果乙方来做很容易变成“纸上谈兵”的产品。
下面将以Java RASP为核心对RASP技术进行详细的阐述，并用跟踪源码的方式来解析百度OpenRASP的具体实现方式。
## 0x02 Java RASP技术栈
Java RASP核心技术栈：
  * Instrumentation通过JVMTI实现的Agent，负责获取并返回当前JVM虚拟机的状态或转发控制命令。
  * 字节码操作框架，用于修改字节码（如ASM、Javassist等）
其余技术栈：
  * Log4j日志记录
  * 插件系统（主要是用于加载检测规则）
  * 数据存储及转发（转发到soc平台或自动封禁平台进行封禁） 等
## 0x03 Java RASP实现方式
编写Java RASP主要分为两部分：
  * Java Agent的编写
  * 利用字节码操作框架（以下都以ASM来举例）完成相应hook操作
###  3.1 Java Agent简介
在Java SE 5及后续版本中，开发者可以在一个普通Java程序运行时，通过-javaagent参数指定一个特定的jar文件（该文件包含Instrumentation代理）来启动Instrumentation的代理程序，这个代理程序可以使开发者获取并访问JVM运行时的字节码，并提供了对字节码进行编辑的操作，这就意味着开发者可以将自己的代码注入，在运行时完成相应的操作。在Java
SE 6后又对改功能进行了增强，允许开发者以用Java Tool
API中的attach的方式在程序运行中动态的设置代理类，以达到Instrumentation的目的。而这两个特性也是编写Java RASP的关键。
javaagent提供了两种模式：
  * premain：允许在main开始前修改字节码，也就是在大部分类加载前对字节码进行修改。
  * agentmain：允许在main执行后通过com.sun.tools.attach的Attach API attach到程序运行时中，通过retransform的方式修改字节码，也就是在类加载后通过类重新转换（定义）的方式在方法体中对字节码进行修改，其本质还是在类加载前对字节码进行修改。
这两种模式除了在main开始前后调用的区别外，还有很多细枝末节的区别，这一点就导致了两种模式的泛用性不同：
  * agent运作模式不同：premain相当于在main前类加载时进行字节码修改，agentmain是main后在类调用前通过重新转换类完成字节码修改。可以发现他们的本质都是在类加载前完成的字节码修改，但是premain可以直接修改或者通过redefined进行类重定义，而agentmian必须通过retransform进行类重新转换才能完成字节码修改操作。
  * 部署方式不同：由于agent运作模式的不同，所以才导致premain需要在程序启动前指定agent，而agentmain需要通过Attach API进行attach。而且由于都是在类加载前进行字节码的修改，所以如果premain模式的hook进行了更新，就只能重启服务器，而agentmain模式的hook如果进行了更新的话，需要重新attach。
因为两种模式都存在一定的限制，所以在实际运用中都会有相应的问题：
  * premain：每次修改需要重启服务。
  * agentmain：由于attach的运行时中的进程，因JVM的进程保护机制，禁止在程序运行时对运行时的类进行自由的修改，具体的限制如下： 
    * 父类应为同一个类
    * 实现的接口数要相同
    * 类访问符要一致
    * 字段数和字段名必须一致
    * 新增的方法必须是private static/final的
    * 可是删除修改方法
  * 这样的限制是没有办法用代理模式的思路来避免重复插入的。同时为了实现增加hook点的操作我们必须将自己的检测字节码插入，所以只能修改方法体。这样一来如果使用agentmain进行重复的attach，会造成将相同代码多次插入的操作，会产生重复告警，极大的增加业务压力。
单单针对agentmain所出现的重复插入的问题，有没有方式能直接对运行时的java类做字节码插入呢？其实是有的，但是由于各种原因，其会较大的增加业务压力所以这里不过多叙述，想要了解详情的读者，可以通过搜索Hotswap和DCE
VM来了解两种不同的热部署方式。
###  3.2 ASM简介
ASM是一个Java字节码操作框架，它主要是基于访问者模式对字节码完成相应的增删改操作。想要深入的理解ASM可以去仔细阅读ASM的官方文档，这里只是简单的介绍一下ASM的用法。
在开始讲ASM用法前，需要简单的介绍一下访问者模式，只有清楚的访问者模式，才能理解ASM为什么要这么写。
**3.2.1 访问者模式**
在面向对象编程和软件工程中，访问者模式是一种把数据结构和操作这个数据结构的算法分开的模式。这种分离能方便的添加新的操作而无需更改数据结构。
实质上，访问者允许一个类族添加新的虚函数而不修改类本身。但是，创建一个访问者类可以实现虚函数所有的特性。访问者接收实例引用作为输入，使用双重调用实现这个目标。
上面说的的比较笼统，直接用代码来说话：
    package com.lucifaer.ASMDemo;
    interface Person {
        public void accept(Visitor v) throws InterruptedException;
    }
    class Play implements Person{
        @Override
        public void accept(Visitor v) throws InterruptedException {
            v.visit(this);
        }
        public void play() throws InterruptedException {
            Thread.sleep(5000);
            System.out.println("This is Person's Play!");
        }
    }
    interface Visitor {
        public void visit(Play p) throws InterruptedException;
    }
    class PersonVisitor implements Visitor {
        @Override
        public void visit(Play p) throws InterruptedException {
            System.out.println("In Visitor!");
            long start_time = System.currentTimeMillis();
            p.play();
            long end_time = System.currentTimeMillis();
            System.out.println("End Visitor");
            System.out.println("Spend time: " + (end_time-start_time));
        }
    }
    public class VisiterMod {
        public static Person p = new Play();
        public static void main(String[] args) throws InterruptedException {
            PersonVisitor pv = new PersonVisitor();
            p.accept(pv);
        }
    }
在这个例子中做了以下的工作:
  1. 添加void accept(Visitor v)到Person类中
  2. 创建visitor基类，基类中包含元素类的visit()方法
  3. 创建visitor派生类，实现基类对Person的Play的操作
  4. 使用者创建visitor对象，调用元素的accept方法并传递visitor实例作为参数
可以看到在没有改变数据结构的情况下只是实现了Visitor类就可以在visit方法中自行加入代码实现自定义逻辑，而不会影响到原本Person接口的实现类。
结果为：
**3.2.2 ASM的访问者模式**
在ASM中的访问者模式中，ClassReader类和MethodNode类都是被访问的类，访问者接口包括：ClassVistor、AnnotationVisitor、FieldVistor和MethodVistor。访问者接口的方法集以及优先顺序可以在下图中进行查询：
通过该图可以清晰的看出调用顺序，对于新手来说可以简单的理解为下面这样的调用顺序：
  * 需要访问类，所以要声明ClassReader，来“获取”类。
  * 如果需要对类中的内容进行修改，就需要声明ClassWriter它是继承于ClassReader的。
  * 然后实例化“访问者”ClassVisitor来进行类访问，至此就以“访问者”的身份进入了类，你可以进行以下工作： 
    * 如果需要访问注解，则实例化AnnotationVisitor
    * 如果需要访问参数，则实例化FieldVisitor
    * 如果需要访问方法，则实例化MethodVisitro
  * 每种访问其内部的访问顺序可以在图上自行了解。
  * ClassReader调用accept方法
  * 完成整个调用流程
###  3.3 实际例子
在具体展示两种模式的例子前，先补充一下agent的运行条件，无论用那种模式写出来的agent，都需要将agent打成jar包，同时在jar包中应用META-INF/MANIFEST.MF中指定agent的相关信息，下面是个例子：
    Manifest-Version: 1.0
    Can-Redefine-Classes: true
    Can-Retransform-Classes: true
    Premain-Class: com.lucifaer.javaagentLearning.agent.PreMainTranceAgent
    Agent-Class: com.lucifaer.javaagentLearning.agent.AgentMainTranceAgent
Premain-Class和Agent-Class是用来配置不同模式的agent实现类，Can-Redefine-Classes和Can-Retransform-Classes是用来指示是否允许进行类重定义和类重新转换，这两个参数在一定的情况下决定了是否能在agent中利用ASM对加载的类进行修改。
**3.3.1 premain模式例子**
下面用园长的一个demo来展示如何利用premain方式进行表达式监控。完整代码可以看这里，也可以看我整理后的代码
    public class Agent implements Opcodes {
        private static List expClassList = new ArrayList();
        static {
            expClassList.add(new MethodHookDesc("org.mvel2.MVELInterpretedRuntime", "parse",
                    "()Ljava/lang/Object;"));
            expClassList.add(new MethodHookDesc("ognl.Ognl", "parseExpression",
                    "(Ljava/lang/String;)Ljava/lang/Object;"));
            expClassList.add(new MethodHookDesc("org.springframework.expression.spel.standard.SpelExpression", "",
                    "(Ljava/lang/String;Lorg/springframework/expression/spel/ast/SpelNodeImpl;" +
                            "Lorg/springframework/expression/spel/SpelParserConfiguration;)V"));
        }
        public static void premain(String agentArgs, Instrumentation instrumentation) {
            System.out.println("agentArgs : " + agentArgs);
            instrumentation.addTransformer(new ClassFileTransformer() {
                public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                    final String class_name = className.replace("/", ".");
                    for (final MethodHookDesc methodHookDesc : expClassList) {
                        if (methodHookDesc.getHookClassName().equals(class_name)) {
                            final ClassReader classReader = new ClassReader(classfileBuffer);
                            ClassWriter classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_MAXS);
                            final int api = ASM5;
                            try {
                                ClassVisitor classVisitor = new ClassVisitor(api, classWriter) {
                                    @Override
                                    public MethodVisitor visitMethod(int i, String s, String s1, String s2, String[] strings) {
                                        final MethodVisitor methodVisitor = super.visitMethod(i, s, s1, s2, strings);
                                        if (methodHookDesc.getHookMethodName().equals(s) && methodHookDesc.getHookMethodArgTypeDesc().equals(s1)) {
                                            return new MethodVisitor(api, methodVisitor) {
                                                @Override
                                                public void visitCode() {
                                                    if ("ognl.Ognl".equals(class_name)) {