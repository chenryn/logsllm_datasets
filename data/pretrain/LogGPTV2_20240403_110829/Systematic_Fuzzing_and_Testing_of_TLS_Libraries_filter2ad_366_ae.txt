### Optimized Text

#### HMAC and Padding Validation
The structure `hmac(cid:48)||pad(cid:48)` is used, where `pad(cid:48)` consists of 32 bytes, each set to `0x1F`. In the fourth step, the concatenated value `hmac(cid:48)||pad(cid:48)` is used to validate the contents of the decrypted message. However, the validation is only performed over the first 32 bytes, which include the maximum padding and the HMAC length. Despite OpenSSL internally computing an HMAC value (`hmac(cid:48)`), this value is ignored during the validation process. Consequently, the HMAC validation step succeeds, and the decrypted message is further processed. See Figure 6 for a visual representation.

#### Timing Behavior and TLS Alert Messages
The described functionality results in different timing behavior. Additionally, further message processing leads to a different TLS alert message. The decrypted message is processed by the `ssl3_get_record` function, which attempts to remove the padding and HMAC bytes and computes the new plaintext message length as `rr->length = lm - lhmac - lpad - 1`, where `lm` is the total length of the decrypted message, `lhmac` is the length of the HMAC, and `lpad` is the length of the padding. In this case, the decrypted message consists of 32 bytes, with `lhmac = 20` and `lpad = 31`. This computation results in an integer underflow for `rr->length`.

The underflow is caught by the validation of the maximum plaintext length in the same OpenSSL method:
```c
if (rr->length > SSL3_RT_MAX_PLAIN_LENGTH) {
    al = SSL_AD_RECORD_OVERFLOW;
    SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_DATA_LENGTH_TOO_LONG);
    goto f_err;
}
```
This branch results in a different alert message, specifically `RECORD_OVERFLOW`. TLS-Attacker detected that this alert differed from the typical `BAD_RECORD_MAC` alert and reported the issue after the first evaluation stage.

To trigger the `RECORD_OVERFLOW` alert, an attacker needs to send a ciphertext that decrypts to 32 equal bytes. This behavior can be exploited in specific BEAST scenarios [30] by controlling 31 bytes of the plaintext data. Compared to the previous Botan vulnerability, the attacker can recover at most 16 subsequent plaintext data bytes due to the properties of the CBC mode of operation [52, 54].

This vulnerability was fixed in OpenSSL 1.0.2h / 1.0.1t and has been labeled CVE-2016-2107. Note that the same behavior can be observed by sending 32 equal padding bytes where `lpad > 0x1F`, even though the padding is incomplete, the implementation only validates the equality of the 32 decrypted message bytes.

#### Unlucky Patch of Lucky 13 in MatrixSSL
A similar issue with patching the Lucky 13 attack was observed in the MatrixSSL library. While attempting to implement a Lucky 13 countermeasure, the developers introduced a more serious buffer overflow vulnerability. This vulnerability was patched in MatrixSSL 3.8.2.

#### Bleichenbacherâ€™s Attack on MatrixSSL
In 2014, Meyer et al. [44] analyzed vulnerabilities of TLS libraries to Bleichenbacher attacks, finding that most libraries were only vulnerable to timing attacks at that time. In our work, we identified a direct Bleichenbacher vulnerability in MatrixSSL. The vulnerable server responds with a different TLS alert (`ILLEGAL_PARAMETER`) if the decrypted `ClientKeyExchange` message is correctly formatted but contains an invalid TLS version number. Otherwise, the server responds with a `DECRYPT_ERROR` alert. This type of vulnerability was first described by Klima et al. in 2003 [40]. The vulnerability was patched in MatrixSSL 3.8.2.

#### Missing Length Checks
Our analysis in the first phase of the second stage revealed interesting results regarding the checks of different length variables. For example, GnuTLS 3.4.9 does not strictly check the length variables in the following extensions: maximum fragment length, elliptic curves, EC point format extension, and signature and hash algorithms extension. If an invalid length variable is included in one of these fields in the `ClientHello` message, GnuTLS proceeds with the TLS handshake without further message parsing. We assume this behavior is due to performance optimizations in the evaluated library. An attacker could use this for fingerprinting the TLS server library. Moreover, this behavior becomes interesting in light of the recent SLOTH attack [20], where the attacker attempts to find hash collisions for a transcript of protocol messages. Not validating specific message fields gives the attacker more modification freedom and improves the attack.

#### Overflows and Overreads
By fuzzing the variables in the first and second phases, we were able to find array boundary vulnerabilities. For example, a stack overflow in OpenSSL-1.1.0-pre1 was reported by ASan when the server crashed. Our analysis revealed that the stack overflow was caused by sending an overlong DH parameter in the `DHClientKeyExchange` message. This bug was triggered by a left shift of the original `BigInteger` value. When we found this vulnerability in February 2016, OpenSSL had already published a new version (OpenSSL-1.1.0-pre2) that did not include this vulnerability. The OpenSSL security team mentioned in our email correspondence that they were aware of this vulnerability internally. The vulnerability is not present in the latest OpenSSL release versions (1.0.2g).

Additionally, we found a potential buffer overread vulnerability in Botan 1.11.28. This was discovered by executing the second phase of the fuzzing stage by modifying bytes in the underlying record layer. The resulting protocol flow revealed that by sending an empty TLS record, the server attempts to use an invalid array index. Even though Botan 1.11.28 does not directly verify the length of incoming TLS records, further handshake handlers can successfully reject the message and throw an error. We reported the issue to the Botan developers, and it was patched in Botan 1.11.29.

#### Building a TLS Test Suite
The uncovered vulnerabilities have strongly motivated developers to build TLS test suites with negative tests to validate correct TLS behavior in specific cases. For example, a padding oracle test suite could have sent encrypted records with modified padding contents to trigger different TLS alerts. Developers introducing new functionality (e.g., Lucky 13 countermeasures) would have been warned about invalid message processing before releasing new library versions.

We have extended TLS-Attacker with a Test-Suite module, allowing TLS developers to easily build positive and negative test suites. The following section describes the usage of assertions with our framework and presents an experimental test suite for cipher suite usage across TLS protocols. Note that the TLS test suite is a work-in-progress, and this section aims to describe the suitability of TLS-Attacker for this purpose.

##### Usage of Assertions
To build comprehensive TLS test suites, we have extended the TLS-Attacker functionality with assertions. Specifically, we have extended modifiable variables with asserting values that allow developers to validate the resulting contents of modifiable variable fields after the TLS protocol is executed.

The following listing provides an example of a TLS protocol flow containing assertions that detect the OpenSSL vulnerability:
```plaintext
CLIENT
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
SERVER
2
20
```
In this listing, the TLS protocol flow sets the explicit value of the plain padded TLS record to 32 `0x3F` bytes, potentially triggering a `RECORD_OVERFLOW` alert in vulnerable OpenSSL implementations (CVE-2016-2107). After executing the protocol flow, we expect to receive a TLS alert message containing assertions for the level (2) and description (20) values. This ensures that the protocol flow only succeeds if the server correctly responds with a `BAD_RECORD_MAC` alert message.

Similar test cases can be defined for other cryptographic attacks or protocol behaviors.

##### Experimental Test Suite for Correct Cipher Suite Handling
We have created a proof-of-concept test suite for validating correct cipher suite support in TLS protocols. The test suite checks whether available cipher suites are supported for the correct protocol versions. For example, `TLS_RSA_WITH_AES_256_CBC_SHA256` must only be accepted in TLS 1.2 but rejected in other protocol versions. We executed the tests with the analyzed frameworks, detecting that Botan (1.11.30) is not standard-compliant and incorrectly accepts TLS 1.2 cipher suites in TLS 1.0 and 1.1 protocols. This does not pose a direct security risk, but using secure cipher suites in older protocols could undermine their security and should be correctly handled by the TLS framework.