collect measurements ourselves, rather than use a general-
purpose source for internet measurements such as RIPE
Atlas [2], for two main reasons. (1) internet routing operates
at a scale and complexity that cannot easily be simulated [75]
and (2) ISPs often treat Tor packets differently from other
internet trafﬁc [23]. Using our own pairwise latency dataset
we determine that, despite being much smaller than a typical
CDN, Tor can still beneﬁt from multi-hop overlay routing.
Ethics: Our measurements were conducted on the live Tor
network, but did not involve any observations on Tor users or
their trafﬁc. We underwent Tor’s security review process and
followed best practices to limit our impact on the Tor network.
Details can be found in Section IV-A5.
Practicality: While ShorTor does require modiﬁcations to
Tor relays, it does not rely on participation of all, or even
a majority of, relays and makes no assumptions about or
modiﬁcations to client behavior. Tor circuits can beneﬁt from
multi-hop overlay routing as long as any two adjacent relays on
the path both support it. The majority of our evaluation assumes
that only the 1,000 most popular Tor relays participate, but we
ﬁnd ShorTor is beneﬁcial with even fewer relays participating.
ShorTor achieves a latency reduction of 178 ms at the 99.9th
percentile with only the 500 most popular relays supporting
the protocol. As such, ShorTor can be deployed incrementally
and still provide meaningful reductions of tail latency on Tor.
Limitations: Our dataset of pairwise latencies was col-
lected from the 1,000 most popular Tor relays. While these
relays do see the majority of trafﬁc on Tor [39], they are not
representative of the full network. The less popular relays,
while not as likely to be included in circuits, may beneﬁt
similarly from ShorTor, and could broaden the pool of available
via relays. A deployed version of ShorTor, however, would
naturally include all available relays regardless of popularity.
As such, the scale of our dataset is strictly a limitation of our
evaluation, not of ShorTor’s effectiveness in practice.
Using this data, we ﬁnd that ShorTor primarily impacts tail
latencies on the Tor network. On average, ShorTor reduced the
RTT between a pair of relays from 42.6 ms to 23.5 ms, while at
the 99.9th percentile the RTT dropped much more substantially
from 487 ms to 125 ms. As a result, the speedups ShorTor
offers disproportionally beneﬁt a relatively small fraction of
Tor users—approximately 20,000 out of two million daily users
select circuits that ShorTor can speed up by 120 ms or more.
Contributions: We propose ShorTor, the ﬁrst protocol to
apply multi-hop overlay routing to an anonymous communica-
tion network. ShorTor is designed to improve performance
while preserving the security guarantees of baseline Tor,
preventing adversarial relays from gaining an advantage by
participating in ShorTor. We evaluate ShorTor using measured
latencies from the live Tor network and show that ShorTor can
signiﬁcantly improve tail latencies on the Tor network with
minimal bandwidth overhead.
In summary, this paper contributes:
1) ShorTor: a protocol for multi-hop overlay routing on Tor
which reduces the latency experienced by Tor circuit trafﬁc
by 122 ms in the 99th percentile.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:07 UTC from IEEE Xplore.  Restrictions apply. 
21934
(cid:38)(cid:79)(cid:76)(cid:72)(cid:81)(cid:87)
(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)
(cid:48)(cid:76)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:79)(cid:72)(cid:79)(cid:79)(cid:79)(cid:79)
(cid:54)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)
(cid:40)(cid:91)(cid:76)(cid:87)
(cid:40) (cid:76)
(cid:42)(cid:88)(cid:68)(cid:85)(cid:71)
(cid:42) (cid:71)
(cid:50)(cid:81)(cid:76)(cid:82)(cid:81)(cid:3)(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:29)
(cid:80)
(cid:42)(cid:88)(cid:68)(cid:85)(cid:71)(cid:42)(cid:88)(cid:68)(cid:85)(cid:71)
(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)
(cid:40)(cid:91)(cid:76)(cid:87)(cid:40)(cid:91)(cid:76)(cid:87)(cid:40)(cid:91)(cid:76)(cid:87)
(cid:55)(cid:47)(cid:54)
(cid:55)(cid:38)(cid:51)(cid:18)(cid:55)(cid:47)(cid:54)(cid:3)(cid:38)(cid:82)(cid:81)(cid:81)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:27) (cid:19) (cid:3) (cid:80) (cid:86)
(cid:38)(cid:79)(cid:76)(cid:72)(cid:81)(cid:87)
(cid:20)(cid:21)
(cid:20)(cid:21)(cid:19)(cid:3)(cid:80)(cid:86)
(cid:38)(cid:39)(cid:49)
(cid:54)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)
(cid:44)(cid:81)(cid:87)(cid:72)(cid:85)(cid:81)(cid:72)(cid:87)
(cid:53)(cid:82)(cid:88)(cid:87)(cid:72)(cid:85)
(cid:24)(cid:19)(cid:3)(cid:80)(cid:86)
(cid:28)(cid:19)(cid:3)(cid:80) (cid:86)
(cid:25)(cid:19)(cid:3)(cid:80)(cid:86)
(cid:54)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)
(cid:44)(cid:81)(cid:87)(cid:72)(cid:85)(cid:81)(cid:72)(cid:87)
(cid:53)(cid:82)(cid:88)(cid:87)(cid:72)(cid:85)
(cid:48)(cid:88)(cid:79)(cid:87)(cid:76)(cid:16)(cid:75)(cid:82)(cid:83)(cid:3)
(cid:48)(cid:88)(cid:79)(cid:87)(cid:76) (cid:75)(cid:82)(cid:83)
(cid:39)(cid:72)(cid:73)(cid:68)(cid:88)(cid:79)(cid:87)(cid:3)
(cid:48)(cid:88)(cid:79)(cid:87)(cid:76)(cid:16)(cid:75)(cid:82)(cid:83)(cid:3)(cid:54)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)
(cid:9)(cid:3)(cid:38)(cid:82)(cid:81)(cid:81)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:37)(cid:42)(cid:51)(cid:3)(cid:53)(cid:82)(cid:88)(cid:87)(cid:72)
Fig. 1: A Tor circuit between a client and server: Tor relays are
represented by onions. The circuit is a series of connections between
three relays carrying onion-encrypted Tor cells.
Fig. 2: Multi-hop overlay routing as in a CDN: the client avoids a
slow BGP route to the blue server by addressing data to the red CDN
server, which then forwards the trafﬁc.
2) An evaluation of ShorTor’s performance at various levels
of deployment based on measured latency between the
thousand most popular Tor relays.
3) A security analysis of ShorTor in the AnoA framework,
demonstrating minimal impact to user anonymity.
II. BACKGROUND
Here, we provide background on Tor and multi-hop overlay
routing, which we combine in Section III to design ShorTor.
A. Tor
The Onion Router (Tor) is a network for anonymous commu-
nication comprising approximately 7,000 [67] volunteer-run
relays that carry user trafﬁc. We provide a brief overview of
Tor’s architecture and security guarantees. For more details on
Tor, see the Tor speciﬁcation [26] or paper [27].
1) Onion Routing: Tor users send their trafﬁc through the
Tor network using onion routing. Rather than communicating
directly with their destination, clients send their trafﬁc through
“layers:” encrypted connections to three (or more) Tor relays
in sequence. These relays form a circuit and have ﬁxed roles:
Guard relays connect directly to the client and serve as an
entry point into the Tor network,
Exit relays connect directly to the server and proxy communi-
cation on behalf of the client, and
Middle relays pass trafﬁc between the Guard and Exit.
Figure 1 shows a single Tor circuit between a client and server
including the connections and layers of encryption involved in
Tor’s onion routing protocol. The trafﬁc ﬂowing over a circuit
is carried in ﬁxed-size packets called cells which are onion
encrypted. That is, cells have a layer of encryption for each
relay on the circuit. Tor relays remove their layer of encryption
when forwarding cells in the client-to-server direction and add
their layer when returning the responses. This ensures that only
the Exit can remove the innermost onion layer, protecting the
client’s privacy without requiring destination servers to handle
onion encrypted data.
2) Path/Circuit Selection: Path—or circuit—selection is the
process by which Tor clients select the set of relays that will
form their circuit. This is a randomized process to ensure that
the selection of relays is neither predictable nor correlated with
the identities of either the client or server. It is, however, not
uniformly random as relays have highly variable capacities and
not every relay can support the same volume of trafﬁc. As
such, path selection is weighted based on a relay’s available
bandwidth, along with security considerations.
3) Tor’s Adversarial Model: Tor is intended to provide
anonymity to its users. Speciﬁcally, no adversary should be
able to link the source and destination of any trafﬁc stream
across Tor. Tor’s threat model considers adversaries in the
form of malicious relays as well as external observers such as
users’ internet service providers. Anonymity in Tor is provided
among all concurrent Tor users. While onion routing prevents
any individual relay or localized network observer from directly
linking a client to their destination, it does not hide the fact
that a client is connected to the Tor network in the ﬁrst place.
Similarly, onion routing alone does not hide which servers are
the destination of Tor connections. As such, both the volume
and diversity of Tor users inﬂuence the degree of anonymity Tor
is able to provide. In a well-known example of this principle,
the sender of a 2013 Harvard bomb threat was identiﬁed despite
their use of Tor because they were the only client connecting
to Tor from Harvard’s campus at the time [21].
4) Trafﬁc Analysis: Trafﬁc analysis attacks are a type
of anonymity-compromising attack against Tor that identify
features of encrypted trafﬁc stream, such as packet interarrival
times [57], to either: 1) recognize a previously observed
stream [38,47,50,62], linking it across Tor or, 2) observe a
pattern corresponding to a website ﬁngerprint and infer the
destination of trafﬁc [20,45,72,80,88]. Both styles give the
adversary an advantage in linking a client to their destination,
compromising Tor’s anonymity by making clients, servers, or
client-server pairs more identiﬁable. We give additional details
on the capabilities of such adversaries and their impact on Tor
in Section V.
B. Multi-hop Overlay Routing
Multi-hop overlay routing is a technique that introduces
intermediate waypoints into the connection between a client
and server for the purpose of altering the route their trafﬁc
takes across the internet. There are many motivations for this
technique—Tor’s onion routing is itself an example of multi-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:07 UTC from IEEE Xplore.  Restrictions apply. 
31935
hop overlay routing that provides anonymity by masking the
direct relationship between client and destination server. More
commonly, CDNs route their trafﬁc over a multi-hop overlay in
order to reduce the latency of their connections as illustrated in
Figure 2 [22,81]. Two such examples are Cloudﬂare’s Argo [55]
and Akamai’s SureRoute [4]. Rather than relying solely on
the Border Gateway Protocol (BGP) to decide routes for their
trafﬁc, both Argo and SureRoute instead establish intermediate
connections via their own servers. By routing their trafﬁc via
these intermediate waypoints they are able to identify and use a
route which may be faster than the route selected by BGP. This
is possible because BGP is subject to routing policies based
on business relationships, not solely on shortest paths [77].
Importantly, this technique is an overlay—it runs on top
of standard BGP without modifying any of the underlying
protocols. This is achieved by establishing pairwise TCP
connections between each of the intermediate points on the
multi-hop overlay route rather than a single direct connection
between the client and server. As such, standard BGP handles
the route used between hops while the overlay protocol adjusts
the ultimate path between client and server via the placement
of its waypoints.
III. SHORTOR
We propose ShorTor, a protocol for reducing the latency
of connections over Tor. Like other such proposals, ShorTor
preferentially selects faster routes across the Tor network
for client circuits. In prior work, fast routes across Tor are
equivalent to fast Tor circuits—Tor clients simply optimize for
latency when selecting relays for their circuits.
Instead, ShorTor creates a multi-hop overlay on top of the
Tor protocol to improve latency as shown in Figure 3. Rather
than altering the circuit selection process to favor faster paths,
ShorTor changes the routing between relays on existing circuits.
It does this by offering circuit relays the option to route their
trafﬁc through an additional Tor relay rather than directly to the
next hop. These intermediate hops, called via relays, are chosen
on-demand by the relays themselves instead of in advance by
clients. Via relays are not part of client circuits and do not
participate in onion routing or encryption.
By routing as an overlay rather than altering circuit composi-
tion, ShorTor avoids security pitfalls of prior works while still
providing a substantial reduction in latency on the Tor network.
Directly optimizing for faster circuits, as in past proposals, has
the unfortunate side effect of creating a correlation between
the relays a client chooses and the client’s location. Via relays
in ShorTor are chosen only based on the circuit relays and
inherit their relationship to the client—if circuits are chosen
independently, as in the default Tor circuit selection, then via
relay choices leak no information about the client. We discuss
the implications of running ShorTor with alternative circuit
selection techniques in Section V and Section VII.
ShorTor’s design gives it several advantages over proposals
that modify circuit selection:
1) Security: Routes in ShorTor are independent of the client
and destination.
(cid:68)(cid:3)(cid:80)(cid:86)
(cid:42)(cid:88)(cid:68)(cid:85)(cid:71)
(cid:42) (cid:71)
(cid:70)(cid:3)(cid:80)(cid:86)
(cid:50)(cid:81)(cid:76)(cid:82)(cid:81)(cid:3)(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:29)
(cid:80)
(cid:42)(cid:88)(cid:68)(cid:85)(cid:71)(cid:42)(cid:88)(cid:68)(cid:85)(cid:71)
(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)
(cid:40)(cid:91)(cid:76)(cid:87)(cid:40)(cid:91)(cid:76)(cid:87)(cid:40)(cid:91)(cid:76)(cid:87)
(cid:55)(cid:47)(cid:54)
(cid:55)(cid:38)(cid:51)(cid:18)(cid:55)(cid:47)(cid:54)(cid:3)(cid:38)(cid:82)(cid:81)(cid:81)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:57)(cid:76)(cid:68) (cid:69)(cid:3)
(cid:80)
(cid:86)
(cid:48)(cid:76)(cid:71)(cid:71)(cid:79)(cid:72)
(cid:40)(cid:91)(cid:76)(cid:87)
(cid:40) (cid:76)(cid:87)
Fig. 3: A Tor circuit routing using a via relay between the guard and
middle. A via relay will be used when the latency over the via (a+b
ms) is less than that of the direct connection (c ms). The via does
not participate in onion routing. For clarity, and because Shortor only
operates between Tor relays, the client and server are not shown.
2) Agility: ShorTor can modify its routes as needed, not just
during circuit construction.
3) Compatibility: ShorTor operates with any circuit selec-
tion algorithm, making it modular and compatible with
future changes to the Tor protocol.
While we describe ShorTor in Tor-speciﬁc terms, we note that
it applies to other distributed communication systems as well.
A. Security Model
ShorTor inherits Tor’s adversarial model, as described in
Section II-A3. It is designed to preserve the same anonymity
guarantees against an adversary identifying the sender or
recipient of a trafﬁc stream which we deﬁne more formally
in Section V. In particular, ShorTor requires no modiﬁcation
to Tor’s baseline circuit selection or encryption and preserves
independence between circuit choice and the identities of the
client and server. However, ShorTor does necessarily change the
number and distribution of relays that may see a given trafﬁc
stream, which could potentially be exploited by an adversarial
Tor relay to deanonymize a larger share of Tor trafﬁc. We
formally consider the anonymity impact of ShorTor in our
security analysis (Section V).
B. ShorTor Protocol