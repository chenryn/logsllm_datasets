### Later Work and Theoretical Bound

Subsequent work includes a theoretical bound [44], but their model is more general, aiming to reveal the entire network rather than a single target user.

#### Theoretical Attack Success Bound
In our attack, all users in the system are ranked based on their likelihood of being an associate of Bob after a certain number of target and random epochs. We now provide bounds on the number of epochs necessary to ensure that an arbitrary associate, Alice, is ranked higher than all non-associates.

**Theorem 1.** Assume there are \( m \) total users in a messaging system. Let Alice be an associate of the target Bob with probabilities \( r_a \) and \( t_a \) of appearing in a random or target epoch, respectively. Under these assumptions, the probability that Alice is ranked higher than all non-associates can be bounded.

### B. Attack Simulation

We cannot directly validate the effectiveness of our attacks in practice, as we do not have access to Signal’s servers and there is no public sample dataset of Signal sealed sender messages. Instead, we perform simulations based on generalized but realistic assumptions about message patterns. We do not claim that our simulations will reveal the exact number of messages needed to deanonymize a particular user, as this would depend on specific messaging patterns. Rather, our simulations provide a sense of the order of magnitude of messages needed for deanonymization.

Unfortunately, there appear to be at least three slightly different versions of this bound in the published literature ([14, equation (6)]; [15, equation (9.8)]; [40, page 5]), making it difficult to compare bounds.

### Simulations and Results

**Figure 5:**
- **Left:** Effect of delayed Read Receipts — The attack assumes that each epoch lasts one second, and thus the log collects all delivery receipts sent within one second of Bob receiving a sealed sender message. A possible simple solution to this attack is to delay delivery receipts. We tested the effectiveness of the attack with variably sized epochs and determined that if delivery receipts were delayed by a full hour (making them effectively worthless for their purpose), with a user base of 500,000 users (each sending 50 messages a day), Bob would need to receive 60 messages from the victim user to identify Alice as the sender.
- **Right:** Effect of popular users in our SDA — We examined the effectiveness of our SDA variant by considering cases where only Alice is messaging Bob and where Bob is being messaged by Alice and five other users. The graph shows the rank of those messaging Bob and how many users have received more messages than those messaging Bob. When only Alice is messaging Bob, her rank quickly drops. When multiple users are messaging Bob, there is a range of ranks, represented by the green band, which bounds the lowest and highest-ranked individuals messaging Bob. The black band considers the same situation but with 1,000 popular users in the system, which our variant accounts for.

### Simulation Details

We simulated sequences of target and random epochs (epochs where Bob does or does not receive a message) and ranked users by their score. Recall that a user’s score increases if they appear in a target epoch. We simulated 1 million active users, with 800 messages per epoch, corresponding to users sending on average about 70 messages per day, with 1-second epochs.

Within each epoch, we select a random set of 800 message destinations. In a target epoch, Alice (the associate) is sent a message to represent Bob’s delivery receipt. The remaining messages are chosen randomly: 25% of messages are selected as "repeat" messages (same sender and receiver) from prior epochs, and another 25% are selected as "responses" to messages in prior epochs. The remaining 50% of messages are from and to a random pairing of users from the set of 1 million active users. We find that the percentage of repeats/replies has limited impact on the number of epochs to identify an associate until nearly all messages are repeats.

We choose half of the epochs to be target epochs (where Alice messages Bob) and half as random (where Alice does not message Bob).

### Social Graph Significance

Our experiment does not rely on a particular social graph, assuming a fully connected one, as any user can message any other. In preliminary experiments, we examined the impact of several different graph generators designed to simulate social networks but found no noticeable change in our results. Specifically, we used the Erdős-Rényi [20] model, Barabási-Albert [3] model, Watts-Strogatz [52] model, and a fully connected graph, but found they all resulted in a similar number of epochs needed to deanonymize the associate (Alice). Given this result, we opted to use the fully connected graph model for simplicity.

### Summary of Simulations

- **Alice Only Variant:** If only Alice messages Bob, she is uniquely identified within 5 messages.
- **Multiple Messengers:** If multiple users are also messaging Bob, it takes more total epochs to identify Alice. Each target epoch is selected to be either Alice or one of 5 co-associates that message Bob (6 total conversations with Bob).
- **Popular Users:** If there are popular users present, it may be more difficult to identify Alice without accounting for them. However, since we remove users that also appear in a large fraction of random epochs, Alice is still eventually ranked uniquely as messaging Bob.
- **Combined Simulation:** Combining popular users and multiple messengers, the effect is dominated by the multiple messengers.

In the worst case, it takes on the order of 60 epochs to identify the users messaging Bob. Note that only half of these are messages to Bob, and the other half are random epochs. If only one person is messaging Bob, the number of messages needed is under 5 to identify Alice as the associate of Bob.

### V. Formalizing Sealed Sender Conversations

Sealed sender messages were initially introduced in Signal to obscure the communication graph. As we have shown, the current instantiation fails to accomplish this goal. Before presenting our solutions, we briefly discuss formalizations for the properties that a perfect implementation should achieve. We call such a system a sealed sender conversation, as the anonymity properties must be maintained throughout the lifetime of the conversation.

Our goal is to specify exactly how much information a service provider can learn when it runs a sealed sender conversation protocol. In a sealed sender conversation between two users, the mediating service provider should learn only the identity of the receiver of the first message, regardless of the messaging pattern of the users. Unlike sealed sender messages, the anonymity of the sender must be maintained across the full conversation, not just individual messages. Therefore, we require a definition that argues about the privacy of the users at the conversation level, rather than at the message level.

### Ideal Functionality for Sealed Sender Conversation System

- **P1, ..., Pn:** A set of \( n \) (possibly corrupt) users of the system.
- **Pservice:** A single corrupt service provider in charge of relaying messages between users.
- **Active Conversation Table Cactive** with entries of the form (convo-id, initiator, receiver).
- **Delivery Pending Message Table Mpending** with entries of the form (convo-id, sender, receiver, plaintext).

**Start Conversation:**
- Upon receiving a message (StartConvo, Pj) from a user Pi, the ideal functionality generates a unique identifier cid and performs the following:
  - If Pi or Pj is corrupt, send (ApproveNewConvoCorrupt, Pi, Pj, cid) to Pservice.
  - If both Pi and Pj are honest, send (ApproveNewConvo, Pj, cid) to Pservice.
  - If Pservice responds with (Disapprove), the ideal functionality halts.
  - If Pservice responds with (Approve), the ideal functionality sends (NewConvo, Pi, Pj, cid) to both Pi and Pj and adds (cid, Pi, Pj) to Cactive.

**Send Message:**
- Upon receiving a message (SendMessage, cid, m) from party Pi, the ideal functionality checks the active conversations table Cactive for an entry (cid, Pj, Pi) or (cid, Pi, Pj). If no such entry exists, the ideal functionality drops the message. The ideal functionality generates a unique identifier mid and performs the following:
  - If there is an entry and Pj is corrupted, the ideal functionality sends (NotifySendMessageCorrupt, cid, mid, m, Pi, Pj) to Pservice.
  - If an entry (cid, Pi, Pj) exists, send (NotifySendMessage, cid, mid, Pj, |m|) to Pservice, and add (Pi, Pj, cid, mid, m) to Mpending.
  - If an entry (cid, Pj, Pi) exists, send (NotifyAnonymousSendMessage, cid, mid, |m|) to Pservice, and add (Pi, Pj, cid, mid, m) to Mpending.

**Receive Message:**
- Upon receiving a message (ReceiveMessage, cid) from party Pj, the ideal functionality checks Cactive for an entry (cid, Pj, Pi) or (cid, Pi, Pj). If such an entry exists, it performs one of the following:
  - If Pi is corrupt, the ideal functionality then sends (ApproveReceiveMessageCorrupt, cid, Pi, Pj) to Pservice, which responds with (Approve) or (Disapprove).
  - If there is an entry (cid, Pj, Pi) in Cactive and entries (Pi, Pj, cid, mid, m) in Mpending, the ideal functionality sends (ApproveAnonymousReceiveMessage, cid, mid, |m|) to Pservice for each such entry. Pservice responds to each message with either (Approve, mid) or (Disapprove, mid). If Pservice responds with (Approve, mid), the ideal functionality sends (Sent, Pi, Pj, cid, m) to Pj.
  - If there is an entry (cid, Pi, Pj) in Cactive and entries (Pi, Pj, cid, mid, m) in Mpending, the ideal functionality sends (ApproveReceiveMessage, cid, mid, |m|, Pj) to Pservice, which responds to each message with either (Approve, mid) or (Disapprove, mid). If Pservice responds with (Approve, mid), the ideal functionality sends (Sent, Pi, Pj, cid, m) to Pj.

### Security Definition for One-Way Sealed Sender Conversations

We now give a formal definition for one-way sealed sender conversations using a simulation-based security definition. We present the ideal functionality for one-way sealed sender conversations in Figure 6. This definition does not rule out learning information about the sender based on the timing of sending messages, e.g., the sender's time zone. We model the service provider as a party Pservice that can control the delivery of messages and delivery receipts. The ideal functionality leaks the contents of the message \( m \) to the service provider only if the receiver of that message is corrupted.

A protocol securely realizes this ideal functionality (in the standalone model) if a corrupted service provider and an arbitrary number of corrupted users cannot determine if they are interacting in the real experiment or with the ideal experiment with non-negligible probability in the security parameter \( \lambda \).

### VI. Solutions

We present three protocols that follow the security definition from Section V and, in particular, prevent the attacks presented in Section III. We first outline a one-way sealed sender conversation in Section VI-B, in which the initiator of the conversation remains anonymous. We prove that our construction meets the definition presented in Section V-A. In Section VI-C, we extend this protocol to give better privacy to the receiver using a two-way sealed sender conversation. Finally, in Section VI-D, we address denial of service attacks that malicious users could launch against the server.

**Overview of Solutions:**
Our key observation is that the attack described in Section III is only possible because both users in a conversation are sending messages to the other’s long-term identity. Over time, these messages can be correlated, revealing the identities of the users. On the other hand, if anonymous and ephemeral identities are used instead, then users' true identities can remain hidden. However, anonymous identities lead to a bootstrapping problem: how do users initiate and authenticate a conversation if they are using fresh, pseudonyms?

In one-way sealed sender conversations, the identity of one side of the conversation is leaked, namely the initial message receiver, to solve this bootstrapping problem. This closely models the situation of a whistleblower, where the informant wishes to stay anonymous, but the reporter receiving the information can be public. At a high level, the initiator of the conversation begins by creating a fresh, anonymous identity and then sends this identity to a receiver via a secure channel.