tage is the tight coupling of the security features with the
third-party component code. This requires control over the
code, either at development or deployment time, which con-
ﬂicts with legacy components and remote component deliv-
ery (R2), and reduces the applicability to mashup scenarios
where the integrator delivers the components to the browser.
JavaScript instrumentation and access mediation.
Instead of restricting a third-party component to a Java-
Script subset, access to speciﬁc security-sensitive operations
can be mediated. Mediation can consist of blocking the call,
or letting a policy decide whether or not to allow it.
BrowserShield[26] is a server-side rewriting technique, that
rewrites certain JavaScript functions to use safe equivalents.
These safe equivalents are implemented in the “bshield” ob-
ject that is introduced through the BrowserShield JavaScript
libraries that are injected into each page. BrowserShield
makes use of a proxy to inject its code into a webpage.
Self-protecting JavaScript[24, 19] is a client-side wrapping
technique that applies advice around JavaScript functions,
without requiring any browser modiﬁcations. The wrapping
code and advice are provided by the server and are exe-
cuted ﬁrst, ensuring a clean environment to start from. The
advice is non-deep advice, meaning that by protecting one
operation, diﬀerent access paths to the same operation are
not automatically protected. The main challenge of this ap-
proach is to ensure full mediation (R1) without breaking
the component’s legitimate functionality (e.g. via removal
of prototypes), since both policy and third-party component
code live in the same JavaScript context.
Browser-Enforced Embedded Policies (BEEP)[16] injects
a policy script at the server-side. The browser will call this
policy script before loading another script, giving the pol-
icy the opportunity to vet the script about to be loaded.
The loading process will only continue after the approval of
the policy. This approach oﬀers control over which scripts
are loaded, but is too coarse grained to assign privileges to
speciﬁc components.
ConScript[21] allows the enforcement of ﬁne-grained secu-
rity policies for JavaScript in the browser. The approach is
similar to self-protecting JavaScript, except that ConScript
uses deep advice, thus protects all access paths to a function.
The price for using deep advice is the need for client-side
support in the JavaScript engine. A limitation of ConScript
is that policies are not composition policies: the policies
are provided by and applied to the same webpage, which
conﬂicts with remote component delivery (R2) and secure
composition policy conﬁgurable by the integrator (R3).
In contrast to the techniques described above, WebJail
oﬀers the integrator the possibility to deﬁne a policy that
restricts the behavior of a third-party component in an iso-
lated way. Additionally, all of the techniques above use Java-
Script as a policy language. This amount of freedom compli-
cates the writing of secure policies: protection against all the
emerging HTML5 APIs is fully up to policy writer and can
be error-prone, a problem that the WebJail policy language
is not susceptible to.
Web application code and data analysis.
A common protection technique against XSS vulnerabil-
ities or attacks is server-side code or data analysis. Even
though these techniques can only be used to check if a com-
ponent matches certain security requirements and do not
enforce a policy, we still discuss them here, since they are
a server-side way to ensure that a component meets certain
least-privilege integration requirements out-of-the-box.
Gatekeeper[12] is a mostly static [sic] enforcement mech-
anism designed to defend against possibly malicious Java-
Script widgets on a hosting page. Gatekeeper analyzes the
complete JavaScript code together with the hosting page.
In addition, Gatekeeper uses runtime enforcement to disable
dynamic JavaScript features.
XSS-Guard[2] aims to detect and remove scripts that are
not intended to be present in a web application’s output,
thus eﬀectively mitigating XSS attacks. XSS-Guard dynam-
ically learns what set of scripts is used for an HTTP request.
Using this knowledge, subsequent requests can be protected.
Recently, Mozilla proposed the Content Security Policy
(CSP) [29], which allows the integrator to insert a security
policy via response headers or meta tags. Unfortunately,
CSP only supports restrictions on a subset of the security-
sensitive operations discussed in this paper, namely oper-
ations potentially leading to content injection (e.g. script
inclusion and XHR).
Information ﬂow control.
Information ﬂow control techniques can be used to detect
unauthorized information sharing or leaking between origins
or external parties. This is extremely useful for applications
that are allowed to use sensitive data, such as a location,
but are not allowed to share that data.
Both Magazinius et al.[18] and Li et al.[17] have proposed
an information ﬂow control technique that prevents unau-
thorized sharing of data. Additionally, both techniques sup-
port authorized sharing by means of declassiﬁcation, where
a certain piece of data is no longer considered sensitive.
Secure multi-execution[9] detects information leakage by
simultaneously running the code for each security level. This
approach is a robust way to detect information leakage, but
does not support declassiﬁcation.
Information ﬂow control techniques themselves are not
suited for enforcing least-privilege integration. Likewise,
WebJail is not suited to enforce information ﬂow control,
since it would be diﬃcult to cover all possible leaks. Both
techniques are complementary and can be used together to
ensure least-privilege integration without unauthorized in-
formation leaking.
Isolating content using specialized HTML.
Another approach to least-privilege integration is the iso-
lation of untrusted content. By explicitly separating the
untrusted code, it becomes easier to restrict its behavior,
for example by preventing script execution.
The “untrusted” attribute[10] on a div element aims to
allow the browser to make the diﬀerence between trusted
and untrusted code. The idea is to enclose any untrusted
content with such a div construct. This technique fails to
defend against injecting closing tags, which would trivially
circumvent the countermeasure.
The new “sandbox” attribute of the iframe element in
HTML 5[13] provides a safer alternative, but is very coarse-
grained.
It only supports limited restrictions, and as far
as JavaScript APIs are concerned, it only supports to com-
pletely enable or disable JavaScript.
ADJail[30] is geared towards securely isolating ads from a
hosting page for conﬁdentiality and integrity purposes, while
maintaining usability. The ad is loaded on a shadow page
that contains only those elements of the hosting page that
the web developer wishes the ad to have access to. Changes
to the shadow page are replicated to the hosting page if
those changes conform to the speciﬁed policy. Likewise, user
actions on the hosting page are mimicked to the shadow page
if allowed by the policy. ADJail limits DOM access and UI
interaction with the component, but does not restrict the
use of all other sensitive operations like WebJail can.
User-provided policies.
Mozilla oﬀers Conﬁgurable Security Policies[27], a user-
conﬁgurable policy that is part of the browser. The policy
allows the user to explicitly enable or disable certain capa-
bilities for speciﬁc internet sites. An example is the option
to disallow a certain site to open a popup window. Some
parts of this idea have also been implemented in the Secu-
rity zones of Internet Explorer.
The policies and enforcement mechanism oﬀered by this
technique resemble WebJail. The major diﬀerence is that
these policies are user-conﬁgurable, and thus not under con-
trol of the integrator. Additionally, the policies do not sup-
port a diﬀerent set of rules for the same included content,
in two diﬀerent scenarios, whereas WebJail does.
9. CONCLUSION
In this paper we have presented WebJail, a novel client-
side security architecture to enables least-privilege integra-
tion of third-party components in web mashups. The Web-
Jail security architecture is compatible with legacy mashup
components, and allows the direct delivery of components
from the service providers to the browser.
We have designed a secure composition language for Web-
Jail, based on a study of security-sensitive operations in
HTML5 APIs, and achieved full mediation by applying deep
aspect weaving within the browser.
We have implemented a prototype of WebJail in Mozilla
Firefox 4.0, and applied it successfully to mainstream plat-
forms such as iGoogle and Facebook. In addition, we have
evaluated the performance of the WebJail implementation
using micro-benchmarks, showing that both the page load-
time overhead (±7ms) and the execution overhead of a func-
tion advised with a whitelist policy (±0.1ms) are negligible.
10. ACKNOWLEDGMENTS
This research is partially funded by the Interuniversity
Attraction Poles Programme Belgian State, Belgian Science
Policy, IBBT, IWT, the Research Fund K.U.Leuven and the
EU-funded FP7-projects WebSand and NESSoS.
The authors would also like to thank Maarten Decat and
Willem De Groef for their contribution to early proof-of-
concept implementations [8, 33] to test the feasibility of the
presented research.
11. REFERENCES
[1] A. Barth, C. Jackson, and J. C. Mitchell. Securing
frame communication in browsers. Commun. ACM,
52:83–91, June 2009.
[2] P. Bisht and V. Venkatakrishnan. Xss-guard: Precise
dynamic prevention of cross-site scripting attacks. In
5th GI International Conference on Detection of
Intrusions & Malware, and Vulnerability Assesment,
July 2008.
[3] D. Crockford. ADsafe – making JavaScript safe for
advertising. http://adsafe.org/.
[4] P. De Ryck, M. Decat, L. Desmet, F. Piessens, and
W. Joosen. Security of web mashups: a survey. In 15th
Nordic Conference in Secure IT Systems (NordSec
2010). Springer, 2011.
[5] P. De Ryck, L. Desmet, T. Heyman, F. Piessens, and
W. Joosen. Csﬁre: Transparent client-side mitigation
of malicious cross-domain requests. In Lecture Notes
in Computer Science, volume 5965, pages 18–34.
Springer Berlin / Heidelberg, February 2010.
[6] P. De Ryck, L. Desmet, W. Joosen, and F. Piessens.
Automatic and precise client-side protection against
csrf attacks. In V. Atluri and C. Diaz, editors,
Computer Security - ESORICS 2011, volume 6879 of
Lecture Notes in Computer Science, pages 100–116.
Springer Berlin / Heidelberg, 2011.
[7] P. De Ryck, L. Desmet, P. Philippaerts, and
F. Piessens. A security analysis of next generation web
standards. Technical report, G. Hogben and M.
Dekker (Eds.), European Network and Information
Security Agency (ENISA), July 2011.
[8] M. Decat. Ondersteuning voor veilige Web Mashups.
Master’s thesis, Katholieke Universiteit Leuven, 2010.
[9] D. Devriese and F. Piessens. Noninterference through
Secure Multi-execution. 2010 IEEE Symposium on
Security and Privacy, pages 109–124, 2010.
[10] A. Felt, P. Hooimeijer, D. Evans, and W. Weimer.
Talking to strangers without taking their candy:
isolating proxied content. In SocialNets ’08:
Proceedings of the 1st Workshop on Social Network
Systems, pages 25–30, New York, NY, USA, 2008.
ACM.
[11] Google. Google Latitude.
https://www.google.com/latitude/.
[12] S. Guarnieri and B. Livshits. Gatekeeper: Mostly
static enforcement of security and reliability policies
for javascript code. In Proceedings of the Usenix
Security Symposium, Aug. 2009.
[13] I. Hickson and D. Hyatt. HTML 5 Working Draft -
The sandbox Attribute.
http://www.w3.org/TR/html5/the-iframe-element.
html#attr-iframe-sandbox, June 2010.
[14] Involver. Tweets To Pages.
http://www.facebook.com/TweetsApp.
[15] Jacaranda. Jacaranda. http://jacaranda.org.
[16] T. Jim, N. Swamy, and M. Hicks. Defeating Script
Injection Attacks with Browser-Enforced Embedded
Policies. In WWW ’07: Proceedings of the 16th
international conference on World Wide Web, pages
601–610, New York, NY, USA, 2007. ACM.
[17] Z. Li, K. Zhang, and X. Wang. Mash-if: Practical
information-ﬂow control within client-side mashups. In
Dependable Systems and Networks (DSN), 2010
IEEE/IFIP International Conference on, pages 251
–260, 28 2010-july 1 2010.
[18] J. Magazinius, A. Askarov, and A. Sabelfeld. A
lattice-based approach to mashup security. In
Proceedings of the 5th ACM Symposium on
Information, Computer and Communications Security,
ASIACCS ’10, pages 15–23, New York, NY, USA,
2010. ACM.
[19] J. Magazinius, P. Phung, and D. Sands. Safe wrappers
and sane policies for self protecting javascript. In The
15th Nordic Conf. in Secure IT Systems. Springer
Verlag, 2010.
[20] G. Maone. Noscript 2.0.9.9. http://noscript.net/,
2011.
[21] L. Meyerovich and B. Livshits. ConScript: Specifying
and enforcing ﬁne-grained security policies for
Javascript in the browser. In IEEE Symposium on
Security and Privacy, May 2010.
[22] Microsoft Live Labs. Live Labs Websandbox.
http://websandbox.org.
[23] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and
M. Stay. Caja - safe active content in sanitized
JavaScript. Technical report, Google Inc., June 2008.
[24] P. H. Phung, D. Sands, and A. Chudnov. Lightweight
self-protecting javascript. In Proceedings of the 4th
International Symposium on Information, Computer,
and Communications Security, ASIACCS ’09, pages
47–60, New York, NY, USA, 2009. ACM.
[25] Programmable Web. Keeping you up to date with
APIs, mashups and the Web as platform.
http://www.programmableweb.com/.
[26] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and
S. Esmeir. BrowserShield: vulnerability-driven
ﬁltering of dynamic HTML. In OSDI ’06: Proceedings
of the 7th symposium on Operating systems design and
implementation, pages 61–74, Berkeley, CA, USA,
2006. USENIX Association.
[27] J. Ruderman. Conﬁgurable Security Policies.
http://www.mozilla.org/projects/security/
components/ConfigPolicy.html.
[28] J. Samuel. Requestpolicy 0.5.20.
http://www.requestpolicy.com, 2011.
[29] S. Stamm, B. Sterne, and G. Markham. Reining in the
web with content security policy. In Proceedings of the
19th international conference on World wide web,
WWW ’10, pages 921–930, New York, NY, USA,
2010. ACM.
[30] M. Ter Louw, K. T. Ganesh, and V. Venkatakrishnan.
Adjail: Practical enforcement of conﬁdentiality and
integrity policies on web advertisements. In 19th
USENIX Security Symposium, Aug. 2010.
[31] The FaceBook Team. FBJS. http:
//wiki.developers.facebook.com/index.php/FBJS.
[32] W3C. W3C Standards and drafts - Javascript APIs.
http://www.w3.org/TR/#tr_Javascript_APIs.
[33] Willem De Groef. ConScript For Firefox.
http://cqrit.be/conscript/.
[34] M. Zalewski. Browser security handbook.
http://code.google.com/p/browsersec/wiki/Main,
2010.