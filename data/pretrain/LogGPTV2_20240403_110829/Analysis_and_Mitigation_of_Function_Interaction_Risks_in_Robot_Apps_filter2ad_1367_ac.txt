Threshold, Priority Adjust max velocity based on fps data.
Max_vel_limit
Block Bit
Limit adjustable max velocity limit with a user-defined value.
Allow/block the action of chosen flow.
Figure 5: Three types of coordination nodes (purple circles).
the preemption policy will choose the action with the highest pri-
ority. For example, both the Safe Control and Path Tracking
nodes publish velocity to the Mobile Driver node. However, the
safe control action should be taken first because it is responsible
for ensuring user’s safety. FIFO_Queue and Priority_Queue policies
are used for high-risk nodes with high requirements of completion
time, such as search, rescue and obstacle avoidance.
RSRCN Policies. RSRCN aims to resolve the conflicts between
data flows from the image-related (iflow) and max_vel-relate (vflow)
nodes. We use three types of policies to adjust the maximal velocity
of the robot. Block policy allows/blocks the action from vflow and
does not affect the action from iflow. Safe policy uses thresholds
to bridge the maximal velocity with fps. Based on the fact that a
higher velocity requires a faster processing capability, we assume
the maximal velocity is proportional to the fps. Then the threshold
serves as a scale factor and can be configured by users. Constrain
policy sets a maximal velocity limit to ensure safety in complex
and dynamic environments. This is particularly useful when users
want the robots to work at low speeds psychologically even though
they drive within safe speed ranges.
MSRCN Policies. MSRCN aims to coordinate the conflicts between
the data flows from the event-related node (eflow) and action-relate
node (aflow). We only adopt block policy to decide whether the
action should be taken under some specific conditions. However,
the block bits of eflow and aflow are different. Bit 0/1 in aflow
denotes that the actions are allowed/blocked, while Bit 0/1 in eflow
represents whether the condition event is triggered or not. Thus,
end users can control all the actions under arbitrary conditions.
To reduce the complexity of configuring our methodology for
unexperienced end users, we delegate part of the policy selection
6
Figure 6: RTron system overview.
and parameter configuration tasks to the developers. It is reasonable
because some risks are derived from the race condition while the
others are caused by falling short of user’s expectation. Specifically,
the developers enforce appropriate policies for each GRCN and set
the corresponding parameters. Moreover, the developers also preset
the parameters in the block and safe policies for RSRCN based on
the robot’s characteristics. On the other hand, the end users only
have the control of policy selection in RSRCN and MSRCN. The
parameters they need to configure are just max_vel_limit in RSRCN
and block bit in MSRCN. Table 2 shows the role of end users and
developers for each policy (the “Executor” column).
5 SYSTEM DESIGN
We design RTron, a novel end-to-end system equipped with the
above mitigation. Given a potential vulnerable robot app, the de-
veloper first utilizes RTron to add necessary coordination nodes
to the app without modifying the original function node, and set
up some security policies. Then the end user can safely launch the
patched app on the robot, and configure other policies before the
task starts. Figure 6 gives the overview of RTron. It consists of
two components: (1) an App Instrumentor for developers to detect
potential risks in robot apps and deploys coordination nodes (§ 5.1);
(2) a Security Service that visualizes and configures the coordination
nodes to mitigate risks at runtime (§ 5.2).
5.1 App Instrumentor
The goal of this module is to instrument the target app’s source
code to make it compatible with RTron. It patches an app with cer-
tain coordination nodes to collect events and actions from high-risk
function nodes, and guard the robot at runtime. Two subcompo-
nents are introduced to identify high-risk function nodes, and the
locations to deploy the coordination nodes, respectively.
Potential Risk Discovery. This submodule is designed to help
developers identify high-risk function nodes in a robot app. It first
simulates the lifecycle of the target app and automatically generates
!"#$%&’&(")$*+,-$.//(0+’"1/’$2/0&$3&4)/56&’7!"#$%&’()*+,"(!)-"*&./0123045*!8#$*/8/79:4&;+7$%=($%)’$#&*"#$==#$’$5’$#&5"*#8-"*5*,+,,+/’9:4&;+1 then
N p
j
if num(N p
RN ST
2
3
RN max
;
;
(cid:111)
N p
j
дr ←(cid:110)
(cid:111)
r sr ←(cid:110)
msr ←(cid:110)
msr ←(cid:110)
RN act ion
RN event
;
(cid:111)
(cid:111)
N p
j
N p
j
;
foreach string sn ∈ EVENT_MSG_TYPE do
if (sn ∈ tj .type) ∨ (‘detect’ ∈ tj .name) then
foreach string sn ∈ ACTION_MSG_TYPE do
if sn ∈ tj .type ∨ (‘goal’ ∈ tj .name) then
12 foreach node ni ∈ N do
i .type;
i by T s
do
i
if sk .type == sk +1 .type then
sort node’s subscriptions T s
foreach subscription sk ∈ T s
дr ← {ni };
foreach subscription sk ∈ T s
RN MT
do
i
if sk .type == ‘sensor_msgs/Image’ then
foreach publication pm ∈ T p
foreach string sn ∈ RECOG_TOPIC_NAME do
i
do
if sn ∈ pm .name then
r sr ← {ni };
RN imaдe
4
5
6
7
8
9
10
11
13
14
15
16
17
18
19
20
21
22
Figure 8: Risk model of three types of risks in Data Collector.
more than one subscribed topics of the same message type can be
integrated to RN mt
дr with multiple topics (Lines 12-16).
imaдe
rsr
RSR Rule: to identify the image-related node RN
and max_
vel-related node RN max
, RTron checks the topic name and type of
rsr
each subscribed or published message (Lines 4-5,17-22). It searches
the key words (e.g., ‘detect’, ‘people’ and ‘face’) in the RECOG_TOPIC
_NAME string list. Evaluations in § 6 indicate this key word search-
ing can effectively identify the RSR nodes.
msr
msr
MSR Rule: to identify the event-related node RN event
and action-
related node RN action
, RTron checks if the message type of each
topic (Lines 6-11) is in the EVENT_MSG_TYPE or ACTION_MSG_
TYPE lists since message types typically use standard ROS naming
conventions [20]. The complete lists of EVENT_MSG_TYPE and
ACTION_MSG_TYPE are presented in Tables 3 and 4.
Coordination Node Deployment. The collected information of
potential risks is used to configure the coordination node setting(❷).
This includes a set of topics and parameters. Topics represent the
state transition between two function nodes: the subscribed and
published topics specify the predecessor and successor nodes of
each coordination, respectively. The parameters are used to expose
an interface to the end user for configuring each policy. With these
configuration files, a Coordination Node Deployment submodule is
designed to deploy coordination nodes into the app automatically
(❸). Meanwhile, the developers check the details of the risks, select
the optional policies for GRCN and configure related parameters.
Figure 7(a) shows an example of GRCN. GRCN monitors velocity
data from three risky nodes: Navigation Control, Tele-operation
and Safe Control. The data transmission of each node is marked as
the interaction graph offline. Then it traverses all function nodes
(black circles in Figure 6) in the graph and identifies three types of
high-risk function nodes: GR node RNдr , RSR node RNrsr and MSR
node RNmsr (❶). Algorithm 1 describes our identification strategy.
We conclude one rule to discover each type of risky nodes:
GR Rule: we identify the topics in the graph whose indegree
is greater than 1. All nodes that publish to these identified topics
are denoted as RN st
дr with single topic (Lines 1-3). The node with
7
!"#$%&’(#)*(+,"#$%-’(#)*(+%."//),0!"#$%&#’()%*+,-(.%/,(%)&#’+(%.(01#’2(3$%),+(#1(01#’2(&4,(!"#$%.,5(1*$,-(4"++"#’6+3,)"7)(1"+/(8,9,’.6(%’5(%)&#’61,$%.,5(’#5,+:,"#$%-’(#)*(+%1$2)’#.;1"22,1(&4,-(=?>=?>)?$@(+.2,)’+8#(79%8’2((9C#0@-((=;)@K(A(("C#0LK(=?>@((C#0A-((=>=MD,’(,’20C%A’/$("2((C#0@-((@K(=>@((C#0A-((AK(=>=M)$")/)$")/)$")/)$")/(b) End user console of RSRCN(c) End user console of MSRCNcn IDnode typenode descriptiontrigger timerisk infopolicyobjgr cnrsr cnmsr cnblock bittimeoutpriorityblock bittimeoutprioritythresholdmax_vel_limitblock bittimeoutgr policyrsr policymsr policyrcdcmetadataRAID ’21, October 6–8, 2021, San Sebastian, Spain
Yuan Xu, Tianwei Zhang and Yungang Bao
Table 3: Description of EVENT_MSG_TYPE.
Message Type
sensor_msgs/
BatteryState
sensor_msgs/
Temperature
sensor_msgs/
RelativeHumidity
sensor_msgs/
MagneticField
sensor_msgs/
FluidPressure
sensor_msgs/
NavSatFix
sensor_msgs/
Illuminance
nav_msgs/
Odometry
Description
Measurement of the battery state (voltage,
charge, etc).
Measurement of the temperature.
Defines the ratio of partial pressure of water
vapor to the saturated vapor pressure at a
temperature.
Measurement of the Magnetic Field vector at
a specific location.
Measurement of the pressure inside of a fluid
(air, water, etc), atmospheric or barometric
pressure.
Measurement for any Global Navigation
Satellite System (latitude, longitude, etc).
Measurement of the single photometric
illuminance.
Measurement of an estimate of a position
and velocity in free space (pose, twist, etc).
Table 4: Description of ACTION_MSG_TYPE.
Actuator Message Type
Description
Mobile
Manipulator
Speaker
geometry_msg/
Twist
control_msgs/
FollowJoint
TrajectoryAction
audio_common
_msg/AudioData
This expresses the velocity in
free space broken into its linear
and angular parts.
This defines the joint trajectory
to follow.
This defines the audio data to
speak.
flow1, flow2 and flow3. The developer can select the Priority_Queue
policy after the app is launched, and set flow3 from Safe Control
as the highest priority, indicating its velocity action should be al-
ways taken first. However, if the coordination node cannot receive