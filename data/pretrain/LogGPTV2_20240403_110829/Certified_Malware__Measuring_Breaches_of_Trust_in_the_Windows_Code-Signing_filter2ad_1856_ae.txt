been stolen because the machines storing the code-signing keys
were accessible to all developers. Most publishers asked us to send
the malware samples signed with their certificate for further inves-
tigation. Two publishers claimed that it was false positive results
of AVs. We also manually investigated to see if those files signed
with each certificates had false positives. Microsoft, IE, Chrome,
GMail, and Dropbox detected them as malware and did not allow
us to share or download them from the Internet. Moreover, one of
them was obviously labeled as trojan, called Vilsel. Therefore, we
believe that the signed samples that the two publishers claimed as
false positives are obvious malware.
5 DISCUSSION
Improvements for code signing PKI. The major difference be-
tween TLS and code signing certificates is that it is hard for the
owners of code signing certificates to know where and how they
are abused, while the owners of TLS certificates are readily aware
of the certificate abuse because the certificates are tightly bound
to a certain domain name. If the owners are informed and aware
of what program code are signed with their certificate, the owners
can easily see if their certificate is abused. To achieve this goal, we
suggest to make signing tools (e.g., signtool.exe in Windows) log
all history and inform the original owners of (1) what and when
program code is signed and (2) who tries to sign (e.g., IP address).
As long as the owners have all history of singing, they can readily
see if it is abused by periodically checking the log. This model is
effective for the compromised certificates, but may not work for
other cases like identify theft and shell company. In these cases, we
can introduce transparency in code signing. In this idea, the hash
value of program code and the certificates are logged when signed.
Other third parties can periodically audit the log and identify code
signing abuse.
Other threats. In addition to the three threats described in Sec-
tion 2.3, a Certificate Authority may be compromised or may act
maliciously. This is a severe threat, as it would allow the adver-
sary to issue fake code signing certificates for signing malware. For
example, they could issue certificates setting the publisher name
(common name) to a reputable software company like Microsoft,
Google, etc. In the past, hackers have compromised two CAs (Dig-
iNotar and Comodo) and have issued fake TLS certificates. However,
we do not observe this threat in our data set.
Recently, Google and CWI Amsterdam developed code that can
generate the two different files with the same SHA-1 hash value [12].
We have not observed any malware sample that exploits this SHA-1
collision attack. However, this represents an important threat, as
demonstrated in the past by the Flame malware, which conducted
an attack against MD5 shortly after it became practical to find MD5
collisions.
6 RELATED WORK
We discuss related work in three key areas: measuring the ecosys-
tems of HTTPS and TLS certificates; measuring code signing abuse,
specifically Authenticode and Android; and attempts at the im-
provements for PKIs.
Measurements of the TLS certificate ecosystem. The TLS cer-
tificates and HTTPS ecosystems have been thoroughly studied due
to the introduction of many network scanners such as ZMap. ZMap
can scan the entire IPv4 address space less than one hour [8]; re-
searchers can readily obtain the large, but limited number of TLS
certificate datasets while code signing certificates in the wild are
hard to collect. Durumeric et al. have uncovered the bad practices in
the HTTPS ecosystem using the datasets that ZMap produced [7].
Two measurement studies with regard to the impacts of Heartbleed,
has been conducted [6, 40]. Heartbleed is a serious security bug in
the OpenSSL cryptography library.
Code signing abuse. For Authenticode code signing abuse, similar
to our work, the computer security company, Sophos examined the
signed Windows PE files collected by the company from 2008 to
2010 [37]. They observed that the number of signed malicious PEs
including trojan, adware, spyware, etc., increased over time in the
measurement period. Kotzias et al. and Alrawi et al. evaluated 356
thousands and three million Windows PE samples respectively
[2, 19]. In their findings, signed malware was not prevalent since
only a small number of signed malware were found, while most
signed samples were PUPs. Unlike the Authenticode code signing
that obtains a certificate from a CA, Android applications are signed
with self-signed certificates; thus, there is no effective revocation
system. Many Android developers use the same key for their many
applications, which can lead to unexpected security threats such as
signature-based permissions [9].
PKI Improvements. The efforts to prevent certificate abuse have
focused primarily on the Web PKI. The proposals can be classified
into three groups; client-based, CA-based, and domain-based. In
the client-based approaches, Perspective [36] and Convergence [1]
require clients to ask a third party (notary authority, independent
from CAs) to check if the certificate of a service (e.g., web service)
that they access is legitimate. Certificate Transparency (CT) [22]
is the representative proposals in the domain-based class. In CT,
all TLS certificates are logged in a signed chronologically ordered
Merkle Hash Tree when they are issued, and the logs are publicly
opened. That enables anyone (e.g., CAs, owners of certificates, etc.)
to monitor and audit the logs. For Android application, Fahl et al.
have proposed Application Transparency (AT) [9]. It is based on CT,
and aims to prevent the threat model of “targeted-and-stealthy."
However, the all proposed improvements cannot be applied to code
signing certificates because they were designed particularly for TLS
certificates or Android applications.
Comparatively, there have been fewer effort to improve the code-
signing PKI. Papp at al. have presented a repository system, called
ROSCO where software code are uploaded by publishers, and looked
up by end-users to check if the certificates are compromised [29].
However, the repository is maintained by a single group so that the
no one can audit the repository system. Moreover, publishers are
required to voluntarily upload their program code to the repository.
In other words, it is not able to cover all program code in the wild.
Another proposal was CT for Binary Codes [38]. This systems is
based on CT to support logging program code so that anyone can
audit the system. However, the proposal does not have an explicit
protocol for publishers how to log program code.
7 CONCLUSIONS
We introduce a threat model that highlights three types of weak-
nesses in the code signing PKI: inadequate client-side protections,
publisher-side key mismanagement, and CA-side verification fail-
ures. We propose an algorithm for analyzing the abuse recorded
in the code signing ecosystem and for identifying the weaknesses
exploited by the adversary. Using the algorithm, we conducted a
systematic measurement of the three weakness types.
We identify 325 signed malware samples in our data set. Of these,
189 (58.2%) samples are properly signed while 136 carry malformed
digital signatures, which do not match the binary’s digest. Such
malformed signatures are useful for an adversary: we find that
simply copying an Authenticode signature from a legitimate sample
to an unsigned malware sample may help the malware bypass AV
detection. The 189 samples signed correctly rely on 111 unique
certificates. We find that only 27 certificates were revoked; malware
signed with one of the remaining 84 certificates would still be
trusted today as long as is carries a trusted timestamp. A large
fraction (88.8%) of malware families rely on a single certificate,
which suggests that the abusive certificates are mostly controlled
by the malware authors rather than by third parties.
Of the 111 certificates used to sign malware, 75 were abused
due to publisher-side mismanagement (72 were compromised and
3 were used on infected developer machines). The compromised
certificates identified with our algorithm include the one used by
Stuxnet. Additionally, 27 certificates were issued to malware authors
due to the CAs’ verification failure (22 through identify theft and 5
using shell company information). For further investigation, we sent
the publishers of the certificates emails to inform them that their
certificates were abused. We received replies from eight publishers.
They confirmed that the certificates were issued to them and five
of them are unaware of the abuse.
ACKNOWLEDGMENTS
We thank Dave Levin, Michelle Mazurek, Dylan O’Reagan, and the
anonymous reviewers for their feedback. We also thank VirusTotal
for access to their service and Symantec for making data available
through the WINE platform. This research was partially supported
by the National Science Foundation (award CNS-1564143) and the
Department of Defense.
REFERENCES
[1] 2017. Convergence. https://github.com/moxie0/Convergence. (2017).
[2] Omar Alrawi and Aziz Mohaisen. 2016. Chains of Distrust: Towards Under-
standing Certificates Used for Signing Malicious Applications. In Proceedings
of the 25th International Conference Companion on World Wide Web (WWW ’16
Companion). International World Wide Web Conferences Steering Committee,
Republic and Canton of Geneva, Switzerland, 451–456. https://doi.org/10.1145/
2872518.2888610
[3] Frank Cangialosi, Taejoong Chung, David Choffnes, Dave Levin, Bruce M. Maggs,
Alan Mislove, and Christo Wilson. 2016. Measurement and Analysis of Private
Key Sharing in the HTTPS Ecosystem. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’16). ACM, New York,
NY, USA, 628–640. https://doi.org/10.1145/2976749.2978301
[4] Tudor Dumitras, and Darren Shou. 2011. Toward a Standard Benchmark for
Computer Security Research: The Worldwide Intelligence Network Environment
(WINE). In EuroSys BADGERS Workshop. Salzburg, Austria.
[5] Zakir Durumeric, David Adrian, Ariana Mirian, Michael Bailey, and J. Alex Halder-
man. 2015. A Search Engine Backed by Internet-Wide Scanning. In Proceedings of
the 22Nd ACM SIGSAC Conference on Computer and Communications Security (CCS
’15). ACM, New York, NY, USA, 542–553. https://doi.org/10.1145/2810103.2813703
[6] Zakir Durumeric, James Kasten, David Adrian, J. Alex Halderman, Michael Bailey,
Frank Li, Nicolas Weaver, Johanna Amann, Jethro Beekman, Mathias Payer, and
Vern Paxson. 2014. The Matter of Heartbleed. In Proceedings of the 2014 Conference
on Internet Measurement Conference (IMC ’14). ACM, New York, NY, USA, 475–488.
https://doi.org/10.1145/2663716.2663755
[7] Zakir Durumeric, James Kasten, Michael Bailey, and J. Alex Halderman. 2013.
Analysis of the HTTPS Certificate Ecosystem. In Proceedings of the 2013 Confer-
ence on Internet Measurement Conference (IMC ’13). ACM, New York, NY, USA,
291–304. https://doi.org/10.1145/2504730.2504755
[8] Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. 2013. ZMap: Fast
Internet-wide Scanning and Its Security Applications. In Proceedings of the 22Nd
USENIX Conference on Security (SEC’13). USENIX Association, Berkeley, CA, USA,
605–620. http://dl.acm.org/citation.cfm?id=2534766.2534818
[9] Sascha Fahl, Sergej Dechand, Henning Perl, Felix Fischer, Jaromir Smrcek, and
Matthew Smith. 2014. Hey, NSA: Stay Away from My Market! Future Proofing
App Markets Against Powerful Attackers. In Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’14). ACM, New York,
NY, USA, 1143–1155. https://doi.org/10.1145/2660267.2660311
[10] Nicholas Falliere, Liam O’Murchu, and Eric Chien. 2011. W32.Stuxnet Dossier.
Symantec Whitepaper. (February 2011). http://www.symantec.com/content/en/
us/enterprise/media/security_response/whitepapers/w32_stuxnet_dossier.pdf
[11] DAN GOODIN. 2015. Stuxnet spawn infected Kaspersky using stolen Fox-
conn digital certificates. (Jun 2015). https://arstechnica.com/security/2015/06/
stuxnet-spawn-infected-kaspersky-using-stolen-foxconn-digital-certificates/
(February 2017). https:
[12] Google. 2017. Announcing the first SHA1 collision.
//security.googleblog.com/2017/02/announcing-first-sha1-collision.html
[13] P. Hoffman and J. Schlyter. 2012. The DNS-Based Authentication of Named Entities
(DANE) Transport Layer Security (TLS) Protocol: TLSA. RFC 6698. RFC Editor. http:
//www.rfc-editor.org/rfc/rfc6698.txt http://www.rfc-editor.org/rfc/rfc6698.txt.
[14] Ralph Holz, Lothar Braun, Nils Kammenhuber, and Georg Carle. 2011. The SSL
landscape: a thorough analysis of the x. 509 PKI using active and passive mea-
surements. In Proceedings of the 2011 ACM SIGCOMM conference on Internet mea-
surement conference. ACM, 427–444. http://dl.acm.org/citation.cfm?id=2068856
[15] Lin Shung Huang, Alex Rice, Erling Ellingsen, and Collin Jackson. 2014. An-
alyzing forged SSL certificates in the wild. In Security and Privacy (SP), 2014
IEEE Symposium on. IEEE, 83–97. http://ieeexplore.ieee.org/xpls/abs_all.jsp?
arnumber=6956558
[16] Burt Kaliski. 1998. PKCS #7: Cryptographic Message Syntax Version 1.5. RFC 2315.
RFC Editor. http://www.rfc-editor.org/rfc/rfc2315.txt http://www.rfc-editor.org/
rfc/rfc2315.txt.
[17] David. G. Kleinbaum and Mitchell Klein. 2011. Survival Analysis: A Self-Learning
Text (3 ed.). Springer.
[18] Platon Kotzias, Leyla Bilge, and Juan Caballero. 2016. Measuring PUP prevalence
and PUP distribution through Pay-Per-Install services. In Proceedings of the
USENIX Security Symposium.
[19] Platon Kotzias, Srdjan Matic, Richard Rivera, and Juan Caballero. 2015. Certified
PUP: Abuse in Authenticode Code Signing. In Proceedings of the 22Nd ACM
SIGSAC Conference on Computer and Communications Security (CCS ’15). ACM,
New York, NY, USA, 465–478. https://doi.org/10.1145/2810103.2813665
[20] Michael Kranch and Joseph Bonneau. 2015. Upgrading HTTPS in mid-air: An
Empirical Study of Strict Transport Security and Key Pinning. In Network and
Distributed System Security (NDSS) Symposium. Internet Society. https://doi.org/
10.14722/ndss.2015.23162
[21] Bum Jun Kwon, Virinchi Srinivas, Amol Deshpande, and Tudor Dumitraş. 2017.
Catching Worms, Trojan Horses and PUPs: Unsupervised Detection of Silent
Delivery Campaigns. In Proc. NDSS.
[22] B. Laurie, A. Langley, and E. Kasper. 2013. Certificate Transparency. RFC 6962.
RFC Editor.
[32] Marcos Sebastián, Richard Rivera, Platon Kotzias, and Juan Caballero. 2016. Av-
class: A tool for massive malware labeling. In International Symposium on Research
in Attacks, Intrusions, and Defenses. Springer, 230–253.
[23] Eric Lawrence. 2011. Everything you need to know about Authenticode Code
Signing. (Mar 2011). https://blogs.msdn.microsoft.com/ieinternals/2011/03/22/
everything-you-need-to-know-about-authenticode-code-signing/
[24] Yabing Liu, Will Tome, Liang Zhang, David Choffnes, Dave Levin, Bruce Maggs,
Alan Mislove, Aaron Schulman, and Christo Wilson. 2015. An End-to-End
Measurement of Certificate Revocation in the Web’s PKI. ACM Press, 183–196.
https://doi.org/10.1145/2815675.2815685
[25] Microsoft. 2001. Erroneous VeriSign-Issued Digital Certificates Pose Spoofing
Hazard. (2001). https://technet.microsoft.com/en-us/library/security/ms01-017.
aspx
[26] Microsoft. 2008. Windows Authenticode Portable Executable Signature
http://download.microsoft.com/download/9/c/5/
Format.
9c5b2167-8017-4bae-9fde-d599bac8184a/Authenticode_PE.docx
(Mar 2008).
[27] Microsoft. 2011.
https:
//www.microsoft.com/security/portal/threat/encyclopedia/entry.aspx?name=
Virus%3AWin32%2FInduc.A
Virus: Win32/Induc.A.
(April 2011).
[28] Evangelos E. Papalexakis, Tudor Dumitras, Duen Horng (Polo) Chau, B. Aditya
Prakash, and Christos Faloutsos. 2103. Spatio-temporal Mining of Software
Adoption & Penetration. In IEEE/ACM International Conference on Advances in
Social Networks Analysis and Mining (ASONAM). Niagara Falls, CA.
[29] Dorottya Papp, Balázs Kócsó, Tamás Holczer, Levente Buttyán, and Boldizsár
Bencsáth. 2015. ROSCO: Repository Of Signed Code. In Virus Bulletin Conference,
Prague, Czech Republic.
[30] Bryan Parno, Jonathan M. McCune, and Adrian Perrig. 2010. Bootstrapping Trust
in Commodity Computers. In IEEE Symposium on Security and Privacy. 414–429.
[31] Kaspersky Lab’s Global Research and Analysis Team. 2015. The Duqu 2.0
(Jun 2015). https://securelist.com/blog/research/70641/
persistence module.
the-duqu-2-0-persistence-module/
[33] Swiat. 2012.
2012).
flame-malware-collision-attack-explained/
Flame malware collision attack explained.
(Jun
https://blogs.technet.microsoft.com/srd/2012/06/06/
[34] Kurt Thomas, Juan A. Elices Crespo, Ryan Rasti, Jean Michel Picod, Cait
Phillips, Marc-André Decoste, Chris Sharp, Fabio Tirelo, Ali Tofigh, Marc-Antoine
Courteau, Lucas Ballard, Robert Shield, Nav Jagpal, Moheeb Abu Rajab, Panayiotis
Mavrommatis, Niels Provos, Elie Bursztein, and Damon McCoy. 2016. Investi-
gating Commercial Pay-Per-Install and the Distribution of Unwanted Software.
In 25th USENIX Security Symposium, USENIX Security 16, Austin, TX, USA, Au-
gust 10-12, 2016. 721–739. https://www.usenix.org/conference/usenixsecurity16/
technical-sessions/presentation/thomas
[35] VirusTotal. 2017. www.virustotal.com. (2017).
[36] Dan Wendlandt, David G. Andersen, and Adrian Perrig. 2008. Perspectives:
Improving SSH-style Host Authentication with Multi-path Probing. In USENIX
2008 Annual Technical Conference (ATC’08). USENIX Association, Berkeley, CA,
USA, 321–334. http://dl.acm.org/citation.cfm?id=1404014.1404041
[37] Mike Wood. 2010. Want My Autograph? The Use and Abuse of Digital Signatures
by Malware. Virus Bulletin Conference September 2010 September (2010), 1–8.
http://www.sophos.com/medialibrary/PDFs/technicalpapers/digital
[38] Liang Xia, Dacheng Zhang, Daniel Gillmor, and Behcet Sarikaya. 2017. CT for
Binary Codes. Internet-Draft draft-zhang-trans-ct-binary-codes-04. IETF Secre-
tariat. http://www.ietf.org/internet-drafts/draft-zhang-trans-ct-binary-codes-04.
txt http://www.ietf.org/internet-drafts/draft-zhang-trans-ct-binary-codes-04.
txt.
[39] Scott Yilek, Eric Rescorla, Hovav Shacham, Brandon Enright, and Stefan Savage.
2009. When Private Keys Are Public: Results from the 2008 Debian OpenSSL
Vulnerability. In Proceedings of the 9th ACM SIGCOMM Conference on Internet
Measurement (IMC ’09). ACM, New York, NY, USA, 15–27. https://doi.org/10.
1145/1644893.1644896
[40] Liang Zhang, David Choffnes, Dave Levin, Tudor Dumitras, Alan Mislove, Aaron
Schulman, and Christo Wilson. 2014. Analysis of SSL Certificate Reissues and
Revocations in the Wake of Heartbleed. In Proceedings of the 2014 Conference on
Internet Measurement Conference (IMC ’14). ACM, New York, NY, USA, 489–502.
https://doi.org/10.1145/2663716.2663758