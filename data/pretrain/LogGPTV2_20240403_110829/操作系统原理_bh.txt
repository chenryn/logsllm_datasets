②执行状态。从作业进入主存开始运行，到作业计算完成为止，称该作业处于执行状态。
③完成状态。从作业计算完成开始，到善后处理完毕并退出系统为止，称该作业处于完成状态。
作业这几种状态的转换以及与各进程状态之间的关系如图6.1所示。
图6.1 作业的状态及转换
 6.2.2 作业调度的功能
作业调度的主要任务是完成作业从后备状态到执行状态和从执行状态到完成状态的转变。为了完成这一任务，作业调度程序应包括以下功能。
1）确定数据结构
系统为每一个已进入系统的作业分配一个作业控制块（job control block，JCB）。作业控制块记录了每个作业在各阶段的情况（包括分配的资源和状态等），作业调度程序根据作业控制块jcb的信息对作业进行调度和管理。
2）确定调度算法
按一定的调度原则（即调度策略）从磁盘中存放的大量作业（后备作业队列）中挑选出一个或几个作业投入运行，即让这些作业由后备状态转变为执行状态，这一工作由作业调度程序完成。作业调度程序所依据的调度原则通常与系统的设计目标有关，并由多个因素决定。如，为了尽量提高系统资源的利用率，应将计算量大的作业和I/O量大的作业搭配调度进入系统。为此，在设计作业调度程序时，必须综合平衡各种因素，确定合理的调度算法。
3）分配资源
为被选中的作业分配运行时所需要的系统资源，如主存和外部设备等。作业调度程序在调度一个作业进入主存时，必须为该作业建立相应的进程，并且为这些进程提供所需的资源。至于处理机这一资源，作业调度程序只保证被选中的作业获得使用处理机的资格，而对处理机的分配工作则由进程调度程序来完成。
4）善后处理
在一个作业执行结束时，作业调度程序输出一些必要的信息（如作业执行时间、作业执行情况）等，然后收回该作业所占用的全部资源，撤销与其有关的全部进程和作业控制块。
必须指出，主存和外部设备的分配和释放工作实际上是由存储管理程序和外设管理程序完成的。作业调度程序只起到控制的作用，即把一个作业的主存、外设要求转给相应的管理程序，由它们完成分配和回收工作。
 6.2.3 作业控制块
每个作业进入系统时由系统为其建立作业控制块jcb。作业存在于系统的整个过程中，相应的jcb也存在，只有当作业退出系统时，jcb才被撤销。因此jcb是一个作业存在的标志。每个jcb记录与该作业有关的信息，而具体的内容根据作业调度的要求而定。对于不同的系统，其jcb内容也有所不同。表6.1列出了jcb的主要内容。它包括作业名、作业类型、作业状态、该作业对系统资源的要求、已分配给该作业的资源使用情况以及作业的优先级等。
下面就表中各项信息分别加以说明。作业名由用户提供，登记在jcb中。估计执行时间是指作业完成计算所需的时间，它是由用户根据经验估计的。最迟完成时间是用户要求完成该作业的截止时间。要求的主存量、外设类型及台数是作业执行时所需的主存和外设的使用量。要求的文件量是指本作业将存储在辅存空间的文件信息总量，输出量是指本作业将输出数据的总量。资源要求均由用户提供。进入系统时间是指该作业的全部信息进入磁盘，其状态转变为后备状态的时间。开始执行时间是指该作业进入主存，其状态由后备状态转变为执行状态的时间。主存地址是指分配给该作业的主存区开始地址。外设台号是指分配给该作业的外设实际台号。在许多情况下主存地址和外设台号是登记在主存管理程序和外设管理程序所掌管的表格中，而不是登记在jcb中。控制方式有联机和脱机两种，它们分别表示该作业是联机操作或脱机操作。作业类型是指系统根据作业运行特性所规定的类别，例如可以将作业分成三类：占CPU时间偏多的作业，I/O量偏大的作业以及使用CPU和I/O比较均衡的作业。优先级反映了这个作业运行的紧急程度，它可以由用户自己指定，也可以由系统根据作业类型、要求的资源、要求的运行时间与系统当前状况动态地给定。作业状态是指本作业当前所处的状态，它可为后备状态、执行状态或完成状态中的任一种状态。
作业运行结束后，在释放了该作业所使用的全部资源之后，作业调度程序调用存储管理程序，收回该作业的jcb空间，从而撤销了该作业。
表6.1 作业控制块
 6.2.4 调度算法性能的衡量
作业调度的功能是以一定的策略从后备作业队列中选择作业进入主存，使其投入运行。其关键是要确定作业调度算法。通常，采用平均周转时间和平均带权周转时间来衡量作业调度算法性能的好坏。
作业的平均周转时间t为
其中：n为进入系统的作业个数；ti
 为作业i的周转时间；tsi
 为作业i进入系统（即进入磁盘后备队列）的时间；tci
 为作业i的完成时间。
平均带权周转时间w为
其中，wi
 为作业i的带权周转时间；tri
 为作业i的实际执行时间。
每个用户总是希望在将作业提交给系统后能立即投入运行并一直执行到完成。这样，他的作业周转时间最短。但是，从系统角度来说，不可能满足每个用户的这种要求。一般来说，系统应选择使作业的平均周转时间（或平均带权周转时间）短的某种算法。因为，作业的平均周转时间越短，意味着这些作业在系统内的停留时间越短，因而系统资源的利用率也就越高。另外，也能使大多数用户感到比较满意，因而总的来说也是比较合理的。
 6.2.5 作业调度算法
1．先来先服务调度算法
先来先服务调度算法是按作业来到的先后次序进行调度的。换言之，这种算法优先考虑在系统中等待时间最长的作业，而不管它要求执行时间的长短。这种算法容易实现，但效率较低。因为它没有考虑各个作业运行特性和资源要求的差异，所以影响了系统的效率。
假定有四个作业，已知它们进入系统时间和执行时间，若采用先来先服务的调度算法进行调度，则可计算出各作业的完成时间、系统的平均周转时间和平均带权周转时间。从表6.2中可以看出，这种算法对短作业不利，因为短作业执行时间很短，若令它等待较长时间，则带权周转时间会很高。
表6.2 先来先服务调度算法
2．短作业优先调度算法
比较磁盘中的作业申请所指出的计算时间，总是选取计算时间最短的作业作为下一次服务的对象。这一算法易于实现，且效率比较高。它的主要弱点是只照顾短作业的利益，而不考虑长作业的利益。如果系统不断地接受新的作业，就有可能使长作业长时间等待而不能运行。如果对上例的作业采用短作业优先调度算法来进行调度，则算出的周转时间和带权周转时间如表6.3所示。
表6.3 短作业优先调度算法
比较上述两种调度算法可以看出，短作业优先调度算法的调度性能要好些，因为作业的平均周转时间和平均带权周转时间都比先来先服务算法的小一些。如果系统的目标是使平均周转时间为最小，那么应采用短作业优先调度算法。
3．响应比高者优先调度算法
先来先服务调度算法与短作业优先调度算法都是比较片面的调度算法。先来先服务调度算法只是考虑作业的等候时间而忽视了作业的执行时间，而短作业优先调度算法则恰好与之相反，它只考虑了用户估计的作业执行时间而忽视了作业的等待时间。响应比高者优先算法是介乎于这两种算法之间的一种折中的算法，它既照顾了短作业，又不使长作业的等待时间过长。一般将作业的响应时间与执行时间的比值称为响应比。即
其中，响应时间为作业进入系统后的等待时间加上估计的执行时间，即为周转时间。因此，响应比可写为
所谓响应比高者优先算法，就是每调度一个作业投入运行时，计算后备作业表中每个作业的响应比，然后挑选响应比最高者投入运行。由式（6-4）可见，计算时间短的作业容易得到较高的响应比，因此本算法是优待了短作业。但是，如果一个长作业在系统中等待的时间足够长久，其响应时间将随着等待时间的增加而提高，它总有可能成为响应比最高者而获得运行的机会，而不至于无限制地等待下去。
表6.4说明了采用响应比高者优先调度算法时上述作业组合运行的情况。
表6.4 响应比高者优先调度算法
采用该算法时，这4个作业的执行次序为：作业1、作业3、作业2、作业4。之所以会是这样的次序，是因为该算法在一个作业运行完时要计算剩下的所有作业的响应比，然后选响应比高者去运行。例如，当作业1结束时，作业2、作业3、作业4的响应比分别为
响应比2
 =1+作业等待时间／执行时间=1+（10.00-8.50）/0.5=1+3
响应比3
 =1+作业等待时间／执行时间=1+（10.00-9.00）/0.10=1+10
响应比4
 =1+作业等待时间／执行时间=1+（10.00-9.50）/0.20=1+2.5
从计算结果可看出，作业3的响应比最高，所以让作业3先运行。当作业3运行结束及以后选中的作业运行结束时，都用上述方法计算出当时各作业的响应比，然后选出响应比高的去运行。
这种算法，虽然其调度性能不如短作业优先调度算法好，但是它既照顾了用户到来的先后，又考虑了系统服务时间的长短，所以它是上述两种算法的一种较好的折中。
4．优先调度算法
优先调度算法综合考虑有关因素，例如作业的缓急程度、作业的大小、等待时间的长短、外部设备的使用情况等，并根据系统设计目标分析这些因素对调度性能的影响，然后按比例确定各作业的优先数（优先数和一定的优先级相对应，优先数可以通过赋值或计算得到，然后对应为某一优先级），系统按作业优先级的高低排序，调度时选取优先级高者先执行。
确定优先级的一种较简单的办法是，当一个作业送入系统时，由用户为自己的作业规定一个优先级，这个优先级反映了用户要求运行的急切程度。但是，有的用户可能为自己的作业规定一个很高的优先级，为了防止这种做法，系统可对高优先级作业收取高的运算费用。更好的办法是作业的优先级不由用户给定，而由系统规定。系统可根据该作业运行时间的长短和对资源要求的多寡来确定。这可以在作业进入系统时确定，也可在每次选择作业时算出。如LANCASTER大学所用的JUNE系统规定，每当作业调度程序挑选作业时，它要访遍输入井，为等待在那里的每个作业算出一个优先数，确定其优先级，然后根据优先级大小挑选作业。优先数的计算保证使输出量最少、要求执行时间短的作业以及已经等了很久的作业得到优待。即
优先数=等待时间2
 -要求执行时间-16×输出量
其中，等待时间是指作业在磁盘中已等候的时间（以分计），要求执行时间（以秒计）和输出量（以行计）是根据作业控制块中所记录的相应值推算出来的。
这一系统所体现的思想是，它企图十分迅速地执行各种短作业，但偶尔也要执行一个在磁盘中等候了很久的作业，此时“等待时间”这一项的值已远远超过其他两项之和。
 6.3 进程调度
 6.3.1 调度／分派结构
任何进程都必须通过调度／分派模块来使用处理机。进程调度的功能可细分为调度和分派两部分。其中，调度意味着依照完全确定的策略将一批进程进行排序，而分派则是从就绪队列中移出一个进程并给它提供处理机的使用权。
相应的调度程序和分派程序的功能是：调度程序负责将一个进程插入到就绪队列并按一定原则保持队列结构；分派程序是将进程从就绪队列中移出并建立该进程执行的机器状态。
调度／分派结构如图6.2所示。
图6.2 调度／分派结构
图6.2说明了处理机的分配是由调度和分派这两方面的功能完成的。而进程调度则与进程控制和进程通信的功能有着密切的联系。无论何时，当一个运行进程需要延时或请求挂起时，这个进程就被安置到适当的等待队列中去；而当一个进程被激活、被唤醒、或由于其他事件使某一进程的状态变为就绪时，它将被插入到就绪队列中，并以既定的排序原则保持该队列的结构，如按优先级高低排序，或按请求的先后次序排序等。
当处理机空闲，即某一调度时机来到时，如某进程由于某种原因而阻塞（被迫让出处理机），或当一个进程完成其任务正常终止自愿让出处理机时，分派程序将移出就绪队列的第一个元素，并将CPU的控制权赋予选中的进程，让该进程的相应程序真正地在处理机上运行。
但是，在一些系统中常常只提进程调度的概念，而不细分调度和分派这两个部分。因为这里所说的调度功能实际上分散到某些进程控制原语或通信原语中实现了，所以在这些系统中，调度与分派之间不加区别，并统称为调度程序模块。在这里提出调度／分派结构，是希望读者明确处理机的分配包含有两方面内容：一是按确定的调度原则选一个进程；二是给选中进程赋予处理机的控制权。若要强调后者，就使用“分派程序”这一名词；否则就采用“进程调度程序”这一名词。
 6.3.2 进程调度的功能和调度准则
1．进程调度的功能
在多道程序系统中，用户进程数往往多于处理机数，这将使它们相互争夺处理机。此外，系统进程同样需要使用处理机。这样就需要按一定的策略，动态地把处理机分配给就绪队列中的某一进程，并使之执行。该任务是由进程调度来完成的。进程调度的具体功能如下。
1）记录和保持系统中所有进程的有关情况和状态特征
记录和保持系统中所有进程的有关情况和状态特征是通过对进程控制块pcb的内容进行相应的登记、修改，以及将pcb在不同的队列中移动而实现的，并由进程控制模块（如进程创建、进程撤销、进程通信等功能模块）来实施。进程在活动期间其状态是可以改变的，如由运行转换到阻塞，由阻塞转换到就绪，由就绪转换到运行。相应的，该进程的pcb就在运行指针、各种等待队列和就绪队列之间转换。进程进入就绪队列的排序原则体现了调度思想。