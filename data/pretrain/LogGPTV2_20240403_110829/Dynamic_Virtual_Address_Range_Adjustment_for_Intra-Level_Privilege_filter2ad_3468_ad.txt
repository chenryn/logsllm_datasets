work and returns from the handler, the exit gate executes the
sequenced tasks of the entry gate in the opposite direction.
1) Virtual Address Range Adjustment: The key role of the
IDC is to control the valid virtual address range to reveal or
conceal the inner domain region depending on the direction of
the domain switch. Hence, the entry and exit gates expand
and reduce the valid virtual address range by modifying
TCR_ELx.TxSZ.
The outer domain has no means to modify the value of TCR
by the restriction described in Section IV-B5. To expose the
9
Fig. 9. The detailed implementation of an IDC (Inner Domain Call) at EL1. The IDC consists of the entry gate that expands the valid virtual address range
to reveal and enter the inner domain and the exit gate that reduces the valid virtual address range to hide the inner domain and return to the outer domain.
inner domain, therefore, attackers residing in the outer domain
may attempt to manipulate TCR by jumping to the TCR control
instructions (Line 18 and 52) in the gates. This could be more
fatal because TCR consists of several ﬁelds having a direct
bearing on the security of the inner domain, i.e., TxSZ, Ax and
TGx that control the address translation system. Fortunately,
all ﬁelds of TCR just hold constant values after they are set
up at system boot-up. Therefore, even if attackers succeed
to manipulate TCR, we can prevent them from accessing the
inner domain by not allowing the outer domain to run with
a modiﬁed TCR. To do this, we insert simple code snippets
conﬁrming the correctness of the value of TCR behind TCR
control instructions, as seen in Line 21-27 and 54-60 of the
IDC code.
2) Interrupt Disabling: The IDC disables interrupts at the
entry gate to ensure the atomicity of the gates. It may simply
harden our TxSZ-based privilege separation mechanisms by
preventing control from being intercepted by the outer domain
when the control
is in the gates or in the inner domain.
However, this can be bypassed if attackers bend the control-
ﬂow to skip the interrupt-disabling instructions (Line 11-13)
in the entry gate. Attackers then can maliciously generate
interrupts to get control (1) immediately after modifying TCR
in the entry gate or (2) while the execution of the inner domain.
Figure 10 describes how we thwart this attack. We add another
code snippet, similar to Line 54-60 of the IDC code, before
the interrupt handler. The code snippet checks the value of
TCR, and if TCR does not have the value corresponding to
the outer domain (that is, interrupts are occurred in the inner
domain or in the middle of the IDC), then it halts the system.
Additionally, through the method explained in Section IV-B5,
we prohibit attackers from modifying VBAR to relocate the
interrupt handler, thereby preventing them from evading the
explained veriﬁcation process for TCR.
The overall performance impact of disabling interrupts
is limited under the assumption that the inner domain does
not run time-consuming security applications. Our evaluation
results show that
this assumption does not undermine the
value of Hilps. Nonetheless, supporting more complex security
applications by allowing interrupts remains as one of our goals
for future work.
3) ASID Assignment: After control returns back from the
inner domain to the outer domain, attackers in the outer domain
may be able to eavesdrop on the inner domain region through
cached TLB entries storing address mappings of the inner
domain. To resolve this problem, the IDC needs to invalidate
all TLB entries associated with the inner domain in the exit
gate before returning to the outer domain, but this solution is
likely to degrade performance as it increases the TLB miss rate.
Fortunately, AArch64 features ASID at EL1. Therefore, we
can eliminate such expensive TLB invalidations when system
software runs at EL1. To achieve this, we conﬁgure the address
space of the inner domain as non-global and assign a unique
ASID to the inner domain. Then the outer domain having a
different ASID is restricted from accessing the inner domain
through cached TLB entries due to the mis-match of the ASID.
To implement this, Hilps must change the current ASID
while switching domains. Considering that, at EL1, ASID is
deﬁned by TTBRx_EL1, Hilps needs to change the current
ASID by updating the value of TTBRx_EL1. However, per-
forming this in the IDC may weaken the security level of
Hilps, as it may expose a sensitive TTBR update instruction
to attackers. Therefore, Hilps uses TCR_EL1.A1 to change
the current ASID. According to the default setting of AArch64
Linux, TCR_EL1.A1 is 0; i.e., TTBR0_EL1 determines the
current ASID. Hilps leaves the outer domain to follow the
setting of Linux, but in the inner domain, it lets TTBR1_EL1
determine the current ASID by toggling TCR_EL1.A1 during
10
1/*** Inner Domain Call (IDC)** @paramcmda command* @param[arg0-arg3]    four parameters* /234567.global  IDC8IDC:910/* Theentry gate */11mrsx5,  DAIFRead interrupt status12stpx30,  x5,  [sp,  #-16]!Save interrupt status13msrDAIFset,  0x3Disable interrupts141:15mrsx5,  tcr_el1Read the current TCR16andx5,  x5,  #0xfffffffffffdffff; Set TCR.T1SZ to 2517orrx5,  x5,  #0x400000; Set TCR.A118msrtcr_el1,  x5Configure TCR19isbInstruction synchronization barrier2021movx6,  #0xc03fCheck the value of TCR22movx7,  #0x1b; TCR.T1SZ = 25 (39-bit address space)23movkx6,  #0xc07f,  lsl#16; TCR.T0SZ = 27 (37-bit address space)24movkx7,  #0x8059,  lsl#16; TCR.TG1 = 0b10 (4KB page size)25andx5,  x5,  x6; TCR.TG0 = 0b00 (4KB page size)26cmpx5,  x7; TCR.A1 = 1 (Use TTBR1.ASID)27b.ne1bIf not correct, configure TCR again2829mrsx6,  mpidr_el1Get number of the current core [0-n]30ubfxx5,  x6,  #8,  #431andx6,  x6,  #0xf32orrx6,  x6,  r5,  lsl  #233addx6,  x6,  #1Add 1 to the core number34adrpx5,  InnerDomain_stackGet the base address of the inner domain stack35addx5,  x5,  x6,  lsl#12Get the inner domain stack of the current core36movx6,  spGet the outer domain stack37movsp,  x5Switch to the inner domain stack38strx6,  [sp,  #-8]!Save the outer domain stack3940adrpx5,  InnerDomain_handlerGet the address of the innerdomain handler41blrx5Jump to the inner domain handler42434445/* The exit gate */46ldpx6,  [sp],  #8Restore the outer domain stack47movsp,  x6Switch to the outer domain stack482:49mrsx5,  tcr_el1Read the current TCR50andx5,  x5,  #0xffffffffffbfffff; Set TCR.T1SZ to 2751orrx5,  x5,  #0x20000; Clear TCR.A152msrtcr_el1,  x5Configure TCR5354movx6,  #0xc03fCheck the value of TCR55movx7,  #0x1b; TCR.T1SZ = 27 (37-bit address space)56movkx6,  #0xc07f,  lsl#16; TCR.T0SZ = 27 (37-bit address space)57movkx7,  #0x801b,  lsl#16; TCR.TG1 = 0b10 (4KB page size)58andx5,  x5,  x6; TCR.TG0 = 0b00 (4KB page size)59cmpx5,  x7; TCR.A1 = 0 (Use TTBR0.ASID)60b.ne2bIf not correct, configure TCR again6162ldpx30,  x5,  [sp],  #16Restore interrupt status63msrDAIF,  x5Enable interrupts64isbInstruction synchronization barrier6566retReturn to the outer domainFig. 10. A defense mechanism for protecting the atomicity of the switching mechanism against control-ﬂow hijacking attacks, initiated from the outer domain.
the domain switching. Recall that TTBRs are managed by the
inner domain; thus, Hilps can assign a unique ASID to the in-
ner domain by (1) writing a unique ASID to TTBR1_EL1 and
(2) avoiding the assignment of the same ASID to TTBR0_EL1.
4) Inner Domain Stack: The stack is frequently used as a
means of attacks, such as code reuse attacks; moreover, many
types of critical data are temporally stored in the stack. Thus,
the inner domain should use its own stack, separate from the
outer domain. Therefore, the entry gate of the IDC switches
the value of the stack pointer to a preallocated stack in the
inner domain (Line 29-38), and the exit gate restores the stack
pointer to that of the original one (Line 46-47). Note that, as
Hilps supports multi-core environments, the inner domain of
each core has its own stack.
5) Port to Different Exception Levels: When we incorpo-
rate Hilps into a normal OS or a secure OS running at EL1, we
can use the IDC as described in Figure 9. However, if Hilps
is applied to other levels of system software running at EL2
or EL3, such as a hypervisor and a secure monitor, the IDC
needs to be modiﬁed slightly. Note that the ASID feature is
not supported at EL2 and EL3; thus, the IDC must perform
the TLB invalidation to prevent the inner domain from being
revealed to the outer domain. More speciﬁcally, in the code
of IDC, TCR control instructions (Line 18 and 52) do not
have to change the value of TCR.A1 and a TLB invalidation
instruction (TLBI*) must be inserted in Line 61 of the exit
gate. Subsequently, according to Section IV-B1, the IDC needs
to set TxSZ to 26 instead of 25 when entering the inner domain
(However, this is not mandatory if the inner domain requires
a much larger address space).
D. Monitoring Capability
Our intra-level privilege separation technique can make
the inner domain provide sufﬁcient monitoring capabilities to
security applications residing in the inner domain region. The
inner domain initially provides unrestricted memory access
for security applications. In addition, it can enable security
applications to monitor system behaviors by mimicking the
trap-and-emulation technique, widely used in virtualization
environments. To achieve this, our technique may employ
code instrumentation. By instrumenting the outer domain with
IDCs,
the inner domain can accumulate the behavior of
the outer domain, such as system call invocations or system
resource accesses, and pass them to security applications for
monitoring. Second, as the inner domain has exclusive control
authority over page tables, it can enforce access-policies over
speciﬁc regions of the outer domain. The inner domain can
also detect access-policy violations by inserting IDCs into the
exception handler of the outer domain and can then let security
applications inspect these violations.
V.
IMPLEMENTATION
In this section, we explain how we implemented a pro-
totype of Hilps to demonstrate the feasibility. The prototype
is incorporated into AArch64 Linux Kernel 3.10 of Android
5.1.1
For a prototype implementation, the kernel corresponding
to the outer domain should be modiﬁed to be deprived of
control capabilities for sensitive system resources. For this, we
substituted IDCs for privileged instructions of the kernel that
modify the contents of page tables and sensitive system control
registers, such as TCR, TTBR0_EL1, TTBR1_EL1, VBAR and
SCTLR, which can affect the safety of the inner domain. We
also modiﬁed the kernel to conﬁgure all page tables as read-
only by setting access permission bits of speciﬁc page table
entries mapping the memory regions of the page tables. This is
necessary to prevent the page tables from being compromised
by attackers, but entails a problem in implementation. Actually,
as there are mixed-pages containing both page tables and
kernel data objects, an access permission modiﬁcation to the
mixed-pages would disturb benign memory operations for the
kernel data objects and cause the kernel to crash. To address
this problem, we eliminated such mixed-pages by reserving
read-only memory regions and allocating page tables from
these regions.
TABLE II.
ROUND-TRIP CYCLES (RTC)
Big core
w/ ASID
424
w/ TI
832
RTC
11
Little core
w/ ASID
210
w/ TI
249
Interrupt disablingTCR configurationVerification of TCR…Inner DomainJumpInterruptJumpInterruptInterruptInterrupt HandlerInterrupt Vector TableYesat EL1:if  TCR_EL1.T1SZ== 27at EL2 or EL3:if  TCR_ELx.T0SZ== 27Halting the systemNoSubverting control-flowEntry gate of IDC…TCR configurationVerification of TCRInterrupt enablingExit gate of IDCTest
null syscall
open/close
stat
sig. handler inst
sig. handler ovh
pipe latency
page fault
fork+exit
fork+execv
mmap
Native
0.44
6.37
2.65
0.68
3.26
12.81
1.88
148.36
163.58
2323.00
TABLE III.
LMBENCH RESULTS
Big core
Hilps
Overhead
w/ ASID
0.44
6.35
2.64
0.68
3.27
14.27
2.40
176.84
195.35
2796.00
w/ TI
0.44
6.44
2.66
0.69
3.32
18.38
3.80
240.18
254.10
3992.00
w/ ASID
0.00 %
-0.31 %
-0.38 %
0.00 %
0.31 %
11.40 %
27.66 %
19.20 %
19.42 %
20.36 %
w/ TI
0.00 %
1.10 %
0.38 %
1.47 %
1.84 %
43.48 %
102.13 %
61.89 %
55.34 %
71.85 %
Native
0.43
12.65
5.06
0.91
5.98
26.70
2.81
255.05
279.70
4654.00
Little core
Hilps
Overhead
w/ ASID
0.44
12.67
5.11
0.91
5.94
28.54
3.69
292.21
314.50
5187.00
w/ TI
0.44
12.74
5.14
0.91
5.97
31.80
5.52
369.69
396.36
6718.00
w/ ASID
2.33 %
0.16 %
0.99 %
0.00 %
-0.67 %
6.89 %
31.32 %
14.57 %
12.44 %
11.45 %
w/ TI
2.33 %
0.71 %
1.58 %
0.00 %
-0.17 %
19.10 %
96.44 %
44.95 %
41.71 %
44.35 %
TABLE IV.
SYNTHETIC BENCHMARK RESULTS
Test
CF-Bench
GeekBench
Quadrant
Smartbench
Vellamo
Antutu
single core
multi core
productivity
gaming