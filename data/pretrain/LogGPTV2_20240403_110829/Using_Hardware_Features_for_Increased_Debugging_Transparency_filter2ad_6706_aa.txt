title:Using Hardware Features for Increased Debugging Transparency
author:Fengwei Zhang and
Kevin Leach and
Angelos Stavrou and
Haining Wang and
Kun Sun
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Using Hardware Features for Increased Debugging
Transparency
Fengwei Zhang1, Kevin Leach2, Angelos Stavrou1, Haining Wang3, and Kun Sun1
1George Mason University, {fzhang4,astavrou,ksun3}@gmu.edu
2University of Virginia, PI:EMAIL
3University of Delaware, PI:EMAIL
Abstract—With the rapid proliferation of malware attacks on
the Internet, understanding these malicious behaviors plays a
critical role in crafting effective defense. Advanced malware
analysis relies on virtualization or emulation technology to run
samples in a conﬁned environment, and to analyze malicious
activities by instrumenting code execution. However, virtual ma-
chines and emulators inevitably create artifacts in the execution
environment, making these approaches vulnerable to detection or
subversion. In this paper, we present MALT, a debugging frame-
work that employs System Management Mode, a CPU mode in
the x86 architecture, to transparently study armored malware.
MALT does not depend on virtualization or emulation and thus
is immune to threats targeting such environments. Our approach
reduces the attack surface at the software level, and advances
state-of-the-art debugging transparency. MALT embodies various
debugging functions, including register/memory accesses, break-
points, and four stepping modes. We implemented a prototype of
MALT on two physical machines, and we conducted experiments
by testing an array of existing anti-virtualization, anti-emulation,
and packing techniques against MALT. The experimental results
show that our prototype remains transparent and undetected
against
the samples. Furthermore, our prototype of MALT
introduces moderate but manageable overheads on both Windows
and Linux platforms.
Keywords-malware debugging; transparency; SMM
I. INTRODUCTION
The proliferation of malware has increased dramatically and
caused serious damage for Internet users in the past few years.
McAfee reported that the presence of malware has been greatly
increasing during the ﬁrst quarter in 2014, seeing more than
30 million new malware samples [1]. In the last year alone,
Kaspersky Lab products detected almost 3 billion malware
attacks on user computers, and 1.8 million malicious programs
were found in these attacks [2]. Symantec blocked an average
of 568,000 web attacks per day in 2013, a 23% increase over
the previous year [3]. As such, malware analysis is critical
to understanding new infection techniques and maintaining a
strong defense.
Traditional malware analysis employs virtualization [4],
[5], [6] and emulation [7], [8], [9] technologies to dissect
malware behavior at runtime. This approach runs the malware
in a Virtual Machine (VM) or emulator and uses an analysis
program to introspect the malware from the outside so that
the malware cannot infect the analysis program. Unfortunately,
malware writers can easily escape this analysis mechanism by
using a variety of anti-debugging, anti-virtualization, and anti-
emulation techniques [10], [11], [12], [13], [14], [15]. Malware
can easily detect the presence of a VM or emulator and alter its
behavior to hide itself. Chen et al. [10] executed 6,900 malware
samples and found that more than 40% of them reduced
malicious behavior under a VM or with a debugger attached.
Branco et al. [11] showed that 88% and 81% of 4 mil-
lion analyzed malware samples had anti-reverse engineering
and anti-virtualization techniques, respectively. Furthermore,
Garﬁnkel et al. [16] concluded that virtualization transparency
is fundamentally infeasible and impractical. To address this
problem, security researchers have proposed analyzing mal-
ware on bare metal [17], [18]. This approach makes anti-VM
malware expose its malicious behavior, and it does not require
any virtualization or emulation technology. However, malware
analysis on bare metal runs an analysis program within the
Operating System (OS), and ring 0 malware can easily detect
its presence. Thus, stealthy malware detection and analysis
still remains an open research problem.
In this paper, we present MALT, a novel approach that
progresses towards stealthy debugging by leveraging System
Management Mode (SMM) to transparently debug software
on bare-metal. Our system is motivated by the intuition that
malware debugging needs to be transparent, and it should not
leave artifacts introduced by the debugging functions. SMM is
a special-purpose CPU mode in all x86 platforms. The main
beneﬁt of SMM is to provide a distinct and easily isolated
processor environment that is transparent to the OS or running
applications. With the help of SMM, we are able to achieve a
high level of transparency, which enables a strong threat model
for malware debugging. We brieﬂy describe its basic workﬂow
as follows. We run malware on one physical target machine
and employ SMM to communicate with the debugging client
on another physical machine. While SMM executes, Protected
Mode is essentially paused. The OS and hypervisor, therefore,
are unaware of code executing in SMM. Because we run
debugging code in SMM, we expose far fewer artifacts to the
malware, enabling a more transparent execution environment
for the debugging code than existing approaches.
The debugging client communicates with the target server
using a GDB-like protocol with serial messages. We im-
plement
the basic debugging commands (e.g., breakpoints
and memory/register examination) in the current prototype of
© 2015, Fengwei Zhang. Under license to IEEE.
© 2015, Fengwei Zhang. Under license to IEEE.
DOI 10.1109/SP.2015.11
DOI 10.1109/SP.2015.11
55
55
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
MALT. Furthermore, we implement four techniques to provide
step-by-step debugging: (1) instruction-level, (2) branch-level,
(3) far control
transfer level, and (4) near return transfer
level. We also design a user-friendly interface for MALT to
easily work with several popular debugging clients, such as
IDAPro [19] and GDB.
MALT runs the debugging code in SMM without using
a hypervisor. Thus,
it has a smaller Trusted Code Base
(TCB) than hypervisor-based debugging systems [4], [7], [8],
[9], which signiﬁcantly reduces the attack surface of MALT.
Moreover, MALT is OS-agnostic and immune to hypervisor
attacks (e.g., VM-escape attacks [20], [21]). Compared to
existing bare-metal malware analysis [17], [18], SMM has
the same privilege level as hardware. Thus, MALT is capable
of debugging and analyzing kernel and hypervisor rookits as
well [22], [23].
We develop a prototype of MALT on two physical ma-
chines connected by a serial cable. To demonstrate the ef-
ﬁciency and transparency of our approach, we test MALT
with popular packing, anti-debugging, anti-virtualization, and
anti-emulation techniques. The experimental results show that
MALT remains transparent against these techniques. Addition-
ally, our experiments demonstrate that MALT is able to debug
crashed kernels/hypervisors. MALT introduces a reasonable
overhead: It
takes about 12 microseconds on average to
execute the debugging code without command communication.
Moreover, we use popular benchmarks to measure the perfor-
mance overhead for the four types of step-by-step execution
on Windows and Linux platforms. The overhead ranges from
2 to 973 times slowdown on the target system, depending on
the user’s selected instrumentation method.
The main contributions of this work are:
• We provide a bare-metal debugging tool called MALT
that leverages SMM for malware analysis. It leaves a
minimal footprint on the target machine and provides a
more transparent execution environment for the debugger
than existing approaches.
• We introduce a hardware-assisted malware analysis ap-
proach that does not use the hypervisor and OS code.
MALT is OS-agnostic and is capable of conducting
hypervisor rootkit analysis and kernel debugging.
• We implement various debugging functions, including
breakpoints and step-by-step debugging. Our experiments
demonstrate that MALT induces moderate but manage-
able overhead on Windows and Linux environments.
• Through testing MALT against popular packers, anti-
debugging, anti-virtualization, and anti-emulation tech-
niques, we demonstrate that MALT remains transparent
and undetected.
The remainder of this paper is organized as follows. Sec-
tion II provides background on SMM and BIOS. Section III
surveys related work. Section IV discusses our threat model
and assumptions. Section V presents the architecture of MALT.
Section VI details the implementation of MALT. Section VII
analyzes the transparency of MALT. Section VIII shows the
5656
TABLE I
SUMMARY OF SMM FEATURES
SMM Entry
SMM Exit
Memory Access
Memory Addressing
Interrupts & Exceptions Disabled upon entering SMM
Privilege
Asserting an SMI
Running an RSM instruction
SMRAM is inaccessible from other CPU modes
Physical memory addressing without paging
Highest privilege access to all memory & devices
performance evaluation of our prototype. Section IX discusses
the limitations of MALT. Section X concludes the paper and
discusses future directions.
II. BACKGROUND
A. System Management Mode
System Management Mode (SMM) [24] is a mode of
execution similar to Real and Protected modes available on
x86 platforms. It provides a transparent mechanism for im-
plementing platform-speciﬁc system control functions such as
power management. It is initialized by the Basic Input/Output
System (BIOS).
SMM is triggered by asserting the System Management
Interrupt (SMI) pin on the CPU. This pin can be asserted
in a variety of ways, which include writing to a hardware
port or generating Message Signaled Interrupts with a PCI
device. Next, the CPU saves its state to a special region of
memory called System Management RAM (SMRAM). Then,
it atomically executes the SMI handler stored in SMRAM.
SMRAM cannot be addressed by the other modes of execution.
The requests for addresses in SMRAM are instead forwarded
to video memory by default. This caveat therefore allows
SMRAM to be used as secure storage. The SMI handler is
loaded into SMRAM by the BIOS at boot time. The SMI
handler has unrestricted access to the physical address space
and can run any instructions requiring any privilege level1. The
RSM instruction forces the CPU to exit from SMM and resume
execution in the previous mode. Table I shows a summary of
SMM features.
B. BIOS and Coreboot
The BIOS is an integral part of a computer. It initializes
hardware and loads the operating system. The BIOS code is
stored on non-volatile memory on the motherboard. In particu-
lar, we make use of an open-source BIOS called Coreboot [25].
Coreboot performs some hardware initialization and then
executes a payload (e.g., UEFI). MALT uses SeaBIOS [25]
as the payload. Coreboot is written mostly in C and allows us
to edit the SMI handler very easily. This makes MALT much
more portable as Coreboot abstracts away the heterogeneity of
speciﬁc hardware conﬁgurations.
1For this reason, SMM is often referred to as ring -2.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II
COMPARISON WITH OTHER DEBUGGERS
MALT BareBox [17] V2E [7] Anubis [8] Virt-ICE [9] Ether [4] VAMPiRE [26] SPIDER [5] IDAPro [19]
No VM/emulator
Debug ring0 malware
(cid:2)
(cid:2)
Trusted code base BIOS
1.5
SLOC of TCB (K)
(cid:2)
OS
16,281
(cid:2)
(cid:2)
KVM+QEMU QEMU
13,397
786
(cid:2)
QEMU
786
(cid:2)
Xen
509
(cid:2)
OS
16,281
(cid:2)
KVM
12,593
(cid:2)
OS
16,281
III. RELATED WORKS
A. Malware Debugging and Analysis
VAMPiRE [26] is a software breakpoint framework running
within the operating system. Since it has the same privilege
level as the operating system kernel, it can only debug ring
3 malware. Rootkits can gain kernel-level privileges to cir-
cumvent VAMPiRE. However, as MALT does not rely on the
operating system, it can debug rootkits safely.
Ether [4] is a malware analysis framework based on hard-
ware virtualization extensions (e.g., Intel VT). It runs outside
of the guest operating systems by relying on underlying
hardware features. BitBlaze [27] and Anubis [8] are QEMU-
based malware analysis systems. They focus on understanding
malware behaviors, instead of achieving better transparency.
V2E [7] combines both hardware virtualization and software
emulation. HyperDbg [6] uses the hardware virtualization that
allows the late launching of VMX modes to install a virtual
machine monitor and run the analysis code in the VMX root
mode. SPIDER [5] uses Extended Page Tables to implement
invisible breakpoints and hardware virtualization to hide its
side effects. Compared to our system, Ether, BitBlaze, Anubis,
V2E, HyperDbg, and SPIDER all rely on easily detected
emulation or virtualization technology [10], [13], [15], [28]
and make the assumption that virtualization or emulation is
transparent from guest-OSes. In contrast, MALT relies on the
BIOS code to analyze malware on the bare metal. Additionally,
nEther [29] has demonstrated that malware running in the
guest OS can detect the presence of Ether using CPUID bits,
while MALT remains transparent. In terms of transparency, as
it relates to the attack surface, MALT has a smaller trusted
computing base than hypervisor-based malware analysis sys-
tems. Table II shows the trusted computing base of various
malware analysis systems. We can see that MALT has a much
smaller attack surface than those hypervisor-based systems.
BareBox [17] is a malware analysis framework based on
a bare-metal machine without any virtualization or emula-
tion technologies. However, it only targets the analysis of
user-mode malware, while MALT is capable of debugging
hypervisor rootkits and kernel-mode device drivers. Willems
et al. [18] used branch tracing to record all the branches
taken by a program execution. As pointed out in the paper,
the data obtainable by branch tracing is rather coarse, and
this approach still suffers from a CPU register attack against
branch tracing settings. However, MALT provides ﬁne-grained
debugging methods and can defend against mutation of CPU
registers. BareCloud [30] is a recent armored malware detec-
tion system; it executes malware on a bare-metal system and
compares disk- and network-activities of the malware with
other emulation and virtualization-based analysis systems for
evasive malware detection, while MALT is used for malware