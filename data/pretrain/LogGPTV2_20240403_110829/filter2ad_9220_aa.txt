### 一、起因
在逛bleepingcomputer时，发现一个有趣的文章，链接：[
顿时又勾起了我分析样本的欲望，其实很早之前我就分析过多款勒索类的软件，但都是基于window/Android等平台的，也接触过osx的一款开源勒索软件，对于Linux平台的勒索软件还没玩过，同时这款样本，还会修改系统grub，导致开机异常，作为一名安全人员，好奇心使然，我必须得弄明白它的原理以及攻击手法，通过上面的文章，我就找到下面一篇文章：
，样本是由ESET发现的，上面提供了样本的HASH值:8F43BDF6C2F926C160A65CBCDD4C4738A3745C0C，google搜了一大圈，没有找到下载链接，好可惜，于是在自己的安全研究群里问了以前的同事和朋友，还好前同事有VT帐号，给我下载了样本，于是就有了下面的一篇文章，也正好趁这个机会跟大家一起学习了解一下2016年比较热门的勒索软件，谈谈自己的一些经验！本人主要从事安全研究方面的工作，不限平台（window/linux/andrid/ios/osx,以及各种IoT智能设备等），有兴趣的可以相互交流学习，有不对的地方，请大牛们多多指教！
### 二、样本简介
KillDisk是一款之前比较有名的恶意软件，是由BlackEnergy组织攻击乌克兰电网以及新闻银行等系统的恶意软件，有要用于清除系统扇区，删除重要的系统文件，对特定类型的文件内容进行覆盖，结束系统进程等，不清楚的可以去查阅相关资料以及报告，就不过多介绍了，我这次主要分析的是基于Linux平台的KillDisk变种的勒索样本，其实之前也有人发现过Linux平台的勒索样本，大致手法都差不多，它会遍历系统多个目录下的各种文件，并进行加密，但这款样本同时会修改Linux系统的grub，导致系统开机异常，启动的时候，界面会弹出勒索信息，要求你支付BTC进行解锁，属于典型的勒索类恶意样本，样本采用的加密算法为三重DES加密算法，每个密钥都是随机生成的，所以无解。
### 三、详细分析
首先查看文件类型，如下：  
​ [  
从图中我们可以得知，此样本为linux64位可执行程序，通过ida反编译程序，发现程序未加密，未加壳，main函数如下：  
​ [  
动态跟踪到main函数，如下所示：  
​ [  
样本首先为利用daemon函数创建一个单独的Linux守护进程执行恶意代码，参数为0,0，如下所示：  
​ [  
​ 动态调试main函数，创建daemon守护进程如下：  
​ [  
创建完守护进程之后，然后通过print_bnr修改Linux的grub项，导致系统bootloader启动发生异常，如下所示：  
​ [  
动态跟踪到print_bnr函数之后，如下所示：  
​ [  
函数拼接相应的字符串，做为grub启动项菜单显示，拼接字符串过程如下：  
​ [  
然后判断系统目录下的/etc/default/grub启动项文件是否存在，如果存在，则修改/boot/grub/menu.lst文件或者修改/boot/loader.rc配置文件（主要是为了兼容一些老的或其它各种类型的Linux系统版本），在一些新的Linux版本下已经没有上面的这些启动文件了，修改完成之后，只需要修改/etc/grub.d/40_custom这个启动项文件即可，写入的文件内容,如下所示：  
​ [  
然后遍历/etc/grub.d目录，将不是40_custom的文件全部删除，因为修改了grub启动项，需要执行update-grub命令，如下所示：  
​ [  
现在勒索样本已经成功修改了Linux系统的grub启动项，当系统重启之后，bootloader会显示我们刚刚写入的字符串菜单项，如下所示：  
​ [  
完成了grub的改写之后，后面的主要工作就是加密系统各个目录下的文件了，具体通过如下两个函数进行完成，加密工作完成之后，重启操作系统，进行勒索，如下所示：  
​ [  
​ 第一个加密函数，会对如下11个目录的文件进行加密，目录列表如下：
    /boot
       /bin
       /sbin
       /lib/security
       /lib64/security
       /usr/local/etc
       /etc
       /mnt
       /share
       /media
       /home
第二个加密函数，会对如下5个目录的文件进行加密，目录列表如下：
    /usr
       /tmp
       /opt
       /var
       /root
​ 由于两次使用的加密函数都是一样的，我们下面重点分析一下，它的加密过程，以及运用了哪些加密算法，加密函数如下：  
​ [  
​ 跟踪进入到bypass_dir函数，如下所示：  
​ [  
动态跟踪入进加密函数，加密/boot目录的文件，如下所示：  
​ [  
这个就和window上的目录遍历差不多了，当遍历到grub启动项文件时，则跳过，如果不是启动文件进调用crypt_file函数进行加密，crypt_file函数如下所示：  