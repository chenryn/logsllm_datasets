### Smart Contract Hacking

**Konstantinos Karagiannis**  
CTO, Security Consulting, BT Americas  
[@KonstantHacker](https://twitter.com/KonstantHacker)

#### When Transactions Aren’t Enough

- **Key Component:** "The key component is this idea of a Turing-complete blockchain." — Vitalik Buterin
- **Putting Computing to Use:** Smart contracts are the practical application of this computational power.

#### The Stakes

- **High Value at Risk:** Whether it's billions or millions, the problem of smart contract security isn't going away.

#### Solidity and Development Tools

- **Development Workflow:**
  - `.sol` files → Bytecode → Blockchain
  - **IDEs and Plugins:**
    - **Atom with plugins:**
      - `language-ethereum`
      - `etheratom`
    - **Remix:** A browser-based IDE for writing, testing, and deploying smart contracts.

#### Security Analysis Tools

- **Static Analysis:**
  - **Oyente:** A tool for detecting security vulnerabilities in Ethereum smart contracts.
  - **Manticore:** A symbolic execution tool for analyzing binary code.
  - **MAIAN:** A framework for detecting vulnerabilities in smart contracts.

#### Basic Methodology

1. **Interview Developers:** Understand the design and intent behind the smart contract.
2. **Review .sol File:** Examine the source code for potential issues.
3. **Compile the Code:** Ensure the contract compiles without errors.
4. **Dissect Code Flow:** Analyze the logic and flow of the contract.
5. **Run Oyente:** Detect common vulnerabilities (cross your fingers).
6. **Run Manticore:** Perform symbolic execution to find deeper issues.
7. **Run MAIAN:** Identify specific vulnerabilities.
8. **Manual Vulnerability Check:**

#### Common Vulnerabilities

- **Reentrancy:**
  - **Example:** The DAO hack.
  - **Mitigation:** Avoid reentrant calls by using mutexes or checks-effects-interactions patterns.
- **Default Public Functions:**
  - **Example:** Parity wallet hack.
  - **Mitigation:** Explicitly define function visibility.
- **Unchecked Send:**
  - **Example:** King of the Ether.
  - **Mitigation:** Always check the return value of `send` and use `transfer` or `call` with appropriate gas limits.
- **Integer Overflow/Underflow:**
  - **Example:** Integer overflows can lead to unexpected behavior.
  - **Mitigation:** Use SafeMath library or built-in overflow protection in Solidity 0.8.0+.
- **Transaction-Ordering Dependence:**
  - **Mitigation:** Use nonces or timestamps to ensure the order of transactions.
- **Call-Stack Depth Limit:**
  - **Mitigation:** Be aware of the call stack depth limit and avoid deep recursion.
- **Variable or Function Ambiguity:**
  - **Mitigation:** Use clear and unique names for variables and functions.

#### Other Considerations

- **Timestamp Dependence:** Avoid relying on block timestamps for critical logic.
- **Business Logic Flaws:** Ensure that the contract's business logic is sound and well-documented.
- **Separating Public/Private Data:** Clearly distinguish between public and private data to prevent unauthorized access.

#### Conclusion

- **Improvements on the Horizon:** While the field is evolving, it's important to stay vigilant and keep up with the latest best practices and tools.
- **Stay Connected:**
  - Follow [@KonstantHacker](https://twitter.com/KonstantHacker) for updates and insights.

---

This revised version aims to provide a more structured and professional presentation of the content, making it easier to follow and understand.