recent MPX-enabled version of GCC (version 6.1) to compile
the SPEC 2006 benchmarks and found that this imposed
2× to 4× runtime overhead. Thus, to ensure low overheads,
these result indicate that the number of BNDSTX and BNDLDX
instructions must be minimized. Ensuring this is one of the
main reasons LMP is able to provide low overhead.
3. METHODOLOGY
3.1 Threat Model
We assume a realistic attacker that can exploit memory
corruption vulnerabilities to change arbitrary memory loca-
462tions (so long as they are permitted by the hardware) to
values of their choosing. We also assume that the attack-
er is aware of the address locations of key data structures
such as pointers, stacks and meta-data and can arbitrarily
target them with the memory corruption vulnerability. We
assume the goal of the attacker is to corrupt a code pointer
to compromise the control-ﬂow integrity of a program.
Despite this powerful attacker, we do assume that the at-
tacker is limited in some realistic ways. For example, the
attacker cannot directly modify registers in CPUs or change
any memory that is marked read-only, such as the code
pages, as both would allow the attacker to remove or by-
pass the compiler-inserted instrumentation that LMP uses.
The attackers also cannot compromise the integrity of the
target program before it is loaded into the memory, which
means that attacks on the program loader and operating sys-
tem are out of scope for LMP. LMP is intended to mitigate
the exploitation of memory corruption vulnerabilities by re-
mote or unprivileged attackers for the purposes of privilege
escalation.
In general, there are two types of code pointers that need
forward-edge) and
to be protected: function-pointers (i.e.
return addresses (i.e. backwards-edge). LMP focuses on
protecting against attacks on return addresses and assumes
use of an existing forward-edge CFI protection scheme to
protect functions pointers from being corrupted. There is a
rich body of literature addressing the problem of forward-
edge protection. For example, the virtual calls in C++
indirect-control transfers through VTables can be hijacked
by attackers [5] to redirect execution to malicious code. These
type of protections can be attained with low overhead by
previous work, such as VTV [34], VTable Interleaving [3]
and VTrust [40]. Our LMP system can work together with
current forward-edge CFI defenses to provide full CFI pro-
tection.
3.2 Memory Protection with MPX
LMP uses two components to protect return addresses:
the shadow stacks and the protected memory region alloca-
tor. First, standard shadow stacks are used to maintain a
second copy of return addresses. The shadow stack is updat-
ed on a function call and checked when functions return. An
attacker would have to corrupt both the program stack at
function call site and the shadow stack to successfully cor-
rupt a return address. Thus, to prevent the attacker from
corrupting the shadow stack, MPX instructions are insert-
ed by LMP to ensure that only the instructions inserted by
LMP at function calls to update the shadow stack can write
to the shadow stack.
Based on the threat model described in Sec. 2, only s-
tore operations could modify the shadow stack area, and
the code pages are read-only so an attacker could not re-
move bound checks to store operations. An attacker could
try to jump directly to a store instruction and avoid exe-
cuting the bound-checks, but to do this, the attacker would
have to corrupt a code pointer, which the CFI provided by
LMP a complementary forward-edge CFI scheme prevents.
Thus, the backwards-edge protection LMP provides hinges
on the ability to protect the shadow stacks from corruption
by a memory safety vulnerability.
To protect the shadow stack, we instrument each store in-
struction in the program to make sure that it cannot access
the memory region of shadow stacks even if the attacker has
modiﬁed the eﬀective address that the instruction targets.
Despite, there being many store instructions in the program,
they are all checked against the same bounds, as LMP need
only check that they do not target the shadow stack. This
is eﬃcient since this avoids the need to use the expensive
BNDLDX and BNDSTX to modify the bounds that LMP must
check – LMP simply sets the upper and lower bounds of a
BND register to the lower and upper regions of the shadow
stack and proceeds to instrument each store in the program
to ensure that it does not fall within that region. However,
in multi-threaded programs, there will be one shadow stack
for each thread. A na¨ıve solution would use a diﬀerent B-
ND register to store the upper and lower addresses for each
stack, but this would require the expensive BNDLDX and B-
NDSTX instructions to load and store the stack bounds into
the BND registers, hurting performance. Instead, we observe
that all shadow stacks are in the same protection class – i.e.
regardless of which thread a store is executing in, it should
not be able to access any of the shadow stacks. This means
that all shadow stacks can be placed in a contiguous region
of memory and protected with a single BND register. Thus,
the other component of LMP is a scheme that allocates stan-
dard shadow stacks so that they are in a single contiguous
region of memory. In the same way, all other auxiliary da-
ta structures that LMP employs are also be protected from
modiﬁcation, by being allocated in the protected region that
is restricted by MPX instructions.
3.3 Using the Shadow Stack
In order to restrict return instructions, LMP records the
return address in the shadow stack upon each function call,
where it will be protected from corruption by an attacker.
We illustrate the idea of shadow stack layout of the LMP
system in Figure 2.
Another diﬀerence from the other shadow stack approach-
es is that LMP compares function return address with the
one stored in the shadow stack using MPX bound checking
instructions. It optimizes the overhead from compare/branch
instructions in standard shadow stack implementation and
details will be presented later in this section.
As mentioned earlier, the shadow stacks are all located
in a contiguous region of memory. Moreover, this region is
statically deﬁned at program startup and since it is inac-
cessible to any memory instruction other than shadow stack
operations inserted by LMP, the region cannot be used to
store any other type of data other than shadow stacks. The
main diﬀerence between our shadow stack implementation
and other shadow stack or safe stack implementations [10]
is that LMP is not free to place shadow stacks any loca-
tion or oﬀset-based region for convenience, but must instead
place them in the predeﬁned shadow stack region. Since each
thread must have its own shadow stack, we must deﬁne a
mapping function that allows the shadow stack code to ﬁnd
the shadow stack for any given thread, but also maps each
shadow stack into the predeﬁned region.
One option is to make the predeﬁned region as large as
the region where regular stacks can be allocated. This would
be eﬃcient as each shadow stack could then be located at
a ﬁxed oﬀset from the thread’s regular stack. However, the
pthread interface permits stacks to be created anywhere in
a process’ virtual address space. As a result, we would have
to reserve one half of the virtual address space for the pre-
deﬁned region. While this is likely acceptable in most cases
463Real Call Stack
Return Address 0
Return Address 0
Return Address 1
Return Address 1
Return Address 2
Return Address 2
LMP Runtime
Shadow Stack
Return Address 0
Return Address 0
Return Address 1
Return Address 1
Return Address 2
Return Address 2
Return Address 2
Return Address N
Return Address N
Return Address N
Return Address N
Figure 2: The illustration of LMP shadow stacks
Shadow Stack End
for 64-bit code, it can present problems if processes need to
allocate memory at a particular virtual address space.
Instead, a more costly, but ﬂexible alternative is to dy-
namically allocate and map stack space from the predeﬁned
region as threads and their corresponding shadow stacks are
created. While this might be slightly more expensive than
the ﬁxed-oﬀset approach, we show that it is still practical,
and can give a more conservative estimate of the overhead
of diﬀerent LMP implementation options. LMP uses a map-
ping table that stores the oﬀset between a thread’s regular
stack and corresponding shadow stack. Both the function
entry and function return instrumentation use the mapping
table to ﬁnd the corresponding shadow stack for the thread.
The predeﬁned region is then partitioned into several ﬁxed-
sized shadow stacks, and another table records which shad-
ow stacks are in use and which are free. When a thread
is created, LMP ﬁnds an unallocated shadow stack and up-
dates the mapping table with the oﬀset between the thread’s
regular stack and its newly allocated shadow stack. When a
thread is destroyed, the thread is deallocated and the oﬀset
in the table is cleared. These allocation and deallocation op-
erations only occur during thread creation and destruction.
LMP inserts instrumentation on function entry that s-
tores the return address into the shadow stack. Because
this memory operation is inserted by LMP, it needs not be
bound-checked. At function return, LMP inserts instrumen-
tation that will ﬁnd the corresponding return address in the
shadow stack and compare it against the address that con-
trol ﬂow is going to.
In this way, the shadow stack can
ensure that when execution returns, the integrity of the re-
turn address is not tampered with. A thread’s regular and
shadow stack have the same layout so a return address on
the regular stack will have the same oﬀset from the base of
the stack as the corresponding return address’ oﬀset from
the base of the shadow stack. Thus, only the oﬀset between
the regular stack base and the shadow stack base needs to
be stored in the mapping table. This design is diﬀerent from
(cid:3)
(cid:51)(cid:56)(cid:54)(cid:43) (cid:8)(cid:85)(cid:86)(cid:83)
(cid:38)(cid:36)(cid:47)(cid:47) (cid:66)(cid:80)(cid:68)(cid:83)(cid:66)(cid:87)(cid:68)(cid:69)(cid:79)(cid:72)
(cid:3)
(cid:48)(cid:50)(cid:57)(cid:3)
(cid:11)(cid:8)(cid:85)(cid:86)(cid:83)(cid:12)(cid:15)(cid:3)(cid:8)(cid:85)(cid:71)(cid:91)
(cid:48)(cid:50)(cid:57)(cid:3) (cid:8)(cid:85)(cid:71)(cid:91)(cid:15)(cid:3)(cid:11)(cid:8)(cid:85)(cid:68)(cid:91)(cid:12)(cid:3)(cid:3)
(cid:17)(cid:17)(cid:17)
(cid:11)(cid:41)(cid:56)(cid:49)(cid:38)(cid:55)(cid:44)(cid:50)(cid:49)(cid:3)(cid:38)(cid:36)(cid:47)(cid:47)(cid:3)(cid:37)(cid:50)(cid:39)(cid:60)(cid:12)
(cid:17)(cid:17)(cid:17)
(cid:48)(cid:50)(cid:57) (cid:3)(cid:11)(cid:8)(cid:85)(cid:86)(cid:83)(cid:12)(cid:15)(cid:3)(cid:8)(cid:85)(cid:71)(cid:91)
(cid:37)(cid:49)(cid:39)(cid:48)(cid:46)(cid:3)(cid:8)(cid:69)(cid:81)(cid:71)(cid:19)(cid:15)(cid:3)(cid:62)(cid:11)(cid:8)(cid:85)(cid:68)(cid:91)(cid:12)(cid:15)(cid:3)(cid:19)(cid:64)
(cid:37)(cid:49)(cid:39)(cid:38)(cid:56)(cid:3)(cid:3)(cid:8)(cid:85)(cid:71)(cid:91)(cid:15)(cid:3)(cid:8)(cid:69)(cid:81)(cid:71)(cid:19)
(cid:37)(cid:49)(cid:39)(cid:38)(cid:47) (cid:3)(cid:3)(cid:8)(cid:85)(cid:71)(cid:91)(cid:15)(cid:3)(cid:8)(cid:69)(cid:81)(cid:71)(cid:19)
(cid:17)(cid:17)(cid:17)
(cid:6)(cid:3)(cid:73)(cid:76)(cid:81)(cid:71)(cid:3)(cid:86)(cid:75)(cid:68)(cid:71)(cid:82)(cid:90)(cid:3)(cid:86)(cid:87)(cid:68)(cid:70)(cid:78)(cid:3)(cid:89)(cid:76)(cid:68)(cid:3)(cid:80)(cid:68)(cid:83)(cid:83)(cid:76)(cid:81)(cid:74)(cid:3)(cid:87)(cid:68)(cid:69)(cid:79)(cid:72)
(cid:6)(cid:3)(cid:85)(cid:72)(cid:87)(cid:88)(cid:85)(cid:81)(cid:3)(cid:86)(cid:75)(cid:68)(cid:71)(cid:82)(cid:90)(cid:3)(cid:86)(cid:87)(cid:68)(cid:70)(cid:78)(cid:3)(cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:3)(cid:76)(cid:81)(cid:3)(cid:8)(cid:85)(cid:68)(cid:91)
(cid:6)(cid:3)(cid:70)(cid:82)(cid:83)(cid:92)(cid:3)(cid:85)(cid:72)(cid:87)(cid:3)(cid:68)(cid:71)(cid:71)(cid:85)(cid:3)(cid:87)(cid:82)(cid:3)(cid:86)(cid:75)(cid:68)(cid:71)(cid:82)(cid:90)(cid:3)(cid:86)(cid:87)(cid:68)(cid:70)(cid:78)(cid:3)(cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:3)(cid:76)(cid:81)(cid:3)(cid:8)(cid:85)(cid:68)(cid:91)
(cid:6)(cid:3)(cid:83)(cid:88)(cid:87)(cid:3)(cid:73)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:85)(cid:72)(cid:87)(cid:88)(cid:85)(cid:81)(cid:3)(cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:3)(cid:76)(cid:81)(cid:3)(cid:8)(cid:85)(cid:71)(cid:91)
(cid:6)(cid:3)(cid:83)(cid:88)(cid:87)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:3)(cid:76)(cid:81)(cid:3)(cid:86)(cid:75)(cid:68)(cid:71)(cid:82)(cid:90)(cid:3)(cid:86)(cid:87)(cid:68)(cid:70)(cid:78)(cid:3)(cid:76)(cid:81)(cid:3)(cid:68)(cid:3)(cid:69)(cid:81)(cid:71)(cid:3)
(cid:6)(cid:3)(cid:85)(cid:72)(cid:74)(cid:76)(cid:86)(cid:87)(cid:72)(cid:85)(cid:3)(cid:8)(cid:69)(cid:81)(cid:71)(cid:19)
(cid:6)(cid:3)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:85)(cid:72)(cid:87)(cid:88)(cid:85)(cid:81)(cid:3)(cid:68)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:82)(cid:81)(cid:72)(cid:3)(cid:76)(cid:81)(cid:3)(cid:86)(cid:75)(cid:68)(cid:71)(cid:82)(cid:90)(cid:3)
(cid:6)(cid:3)(cid:86)(cid:87)(cid:68)(cid:70)(cid:78)
Figure 3: Assembly code example for instrumented function
entry/exit.
RAD [7] which uses a custom stack layout. Because of this,
they must search through the shadow stack to ﬁnd a match,
while LMP does not.
We give an example of execution sequence in steps after
code instrumentation for shadow stack operations, and an
assembly code snippet in Figure. 3:
1. On function entry:
(1) prepare shadow stack address in register %rax
(2) copy return address in %rsp to shadow stack
2. Execute function call and body
3. On function return:
(1) copy return address in shadow stack to bound reg-
ister %bnd0
(2) use bound checking instruction to check return
address in %rsp and %bnd0
464LMP Compiler
C Code
Binary
...
MOV (%rsp), %rcx
MOV %rcx, (%rax)
...
(cid:258)
MOV      (%rcx), %rdx
BNDCU  %rdx, bnd0
BNDCL   %rdx, bnd0
RET
...
Ret Address 0
Ret Address 1
...
Exception Handler
LMP Runtime
Figure 4: A ﬂow chart of how LMP system works.
We use MPX bound checking instructions BNDCL and B-
NDCU instead of a series of compare and jump instructions
to do the equality comparison. We set the return address
in the shadow stack as the upper and lower bound in the
bound register (BND0), then bound-check it against the func-
tion return address. Using MPX instructions to check the
return address improves performance the same way the M-
PX instructions improve memory bound-checks – the MPX
instructions avoid extra branch and check instructions that
would normally be needed to check the result of the com-
parison. Instead, MPX instructions will throw an exception
if the check fails.
3.4 Execute a Program with LMP
We give an illustration of our LMP system conceptual de-
sign by providing a simple example of how the LMP system
works with a user program, as shown in Figure. 4.
The LMP-enabled compiler instruments the application
source code at compile-time. When the program starts, the
LMP runtime prepares the shadow stack memory region and
stores its lower boundary and upper boundary to the bound
register BND1. This is for the protection of the shadow stack
from any illegal modiﬁcation. When the program is run-
ning, it stores return addresses to the shadow stack when
a function call happens and the return address is pushed
to the normal call stack. When the function returns, two
addresses stored in the normal stack and in the shadow s-
tack is compared. Throughout the program, whenever there
is a memory operation that stores values to a memory ad-
dress, we instrument the code to verify that the address is
not in the range of the shadow stack using bound checking
instructions.
Under certain special cases, such as C++ exception han-
dling, the call stack will unwind due to setjmp/longjmp in-
structions causing function call and return mismatching. In
the method we propose with LMP, as long as the compiler
does not change the original call stack with exception in-
formation (e.g., GCC stores it in another side-table), the
return addresses in original call stacks and in shadow stack-
s correspond to the same oﬀset to the stack top addresses,
thus the stack unwinding by exception handling operations
is not aﬀected.
While we have not implemented it, we believe LMP can
be extended to provide backward-edge protection for binary-
only CFI. With a control-ﬂow graph (CFG) generated through
disassembly analysis of a binary and some changes to pthread
library functions, the LMP system can also work with binary-
only CFI approaches that employ binary-rewriting to add
CFI instrumentation.
4.
IMPLEMENTATION
The LMP system has two main parts: The LMP-enabled
compiler and the LMP runtime library. For the compiler
part we modify the register transfer language (RTL) passes
for instrumenting boundary checking to ensure that there
can be no unauthorized writes to the memory region where
the shadow stacks is stored. The LMP runtime is responsible
for managing the allocation of shadow stack and store of the
return addresses from function call stacks.
4.1 LMP-enabled Compiler
The implementation of LMP-enabled compiler is based
on GCC 5.2.0 with approximately 600 lines of code modi-
ﬁed/added to the RTL passes. The main reason for modify-