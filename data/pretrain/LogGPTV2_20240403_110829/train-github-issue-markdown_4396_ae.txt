以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 线程 22

**堆栈帧:**

1. **ntdll.dll + 0xa3074**
   - 寄存器状态: `rax=1c9, rdx=0, rcx=7ff6a3dcce18, rbx=0, rsi=7ff6a3dcce18, rdi=0, rbp=64549ffad0, rsp=64549ffa78, r8=0, r9=0, r10=0, r11=0, r12=0, r13=0, r14=7ff6a3dccdd8, r15=64549ffaa8, rip=7ff833743074`
   - 发现方式: 作为上下文中的指令指针给出

2. **ntdll.dll + 0x747a2**
   - 寄存器状态: `rbp=64549ffad0, rsp=64549ffa80, rip=7ff8337147a2`
   - 发现方式: 堆栈扫描

3. **RtlUnwindEx (App.exe + 0x1190418)**
   - 寄存器状态: `rbp=64549ffad0, rsp=64549ffa90, rip=7ff6a3dcce18`
   - 发现方式: 堆栈扫描

4. **RtlUnwindEx (App.exe + 0x1190440)**
   - 寄存器状态: `rsp=64549ffad8, rip=7ff6a3dcce40`
   - 发现方式: 堆栈扫描

5. **RtlUnwindEx (App.exe + 0x11903d8)**
   - 寄存器状态: `rsp=64549ffae0, rip=7ff6a3dccdd8`
   - 发现方式: 堆栈扫描

6. **RtlUnwindEx (App.exe + 0x1190480)**
   - 寄存器状态: `rsp=64549ffae8, rip=7ff6a3dcce80`
   - 发现方式: 堆栈扫描

7. **KERNELBASE.dll + 0x7d509**
   - 寄存器状态: `rsp=64549ffaf0, rip=7ff82f7cd509`
   - 发现方式: 堆栈扫描

8. **RtlUnwindEx (App.exe + 0x1190440)**
   - 寄存器状态: `rsp=64549ffaf8, rip=7ff6a3dcce40`
   - 发现方式: 堆栈扫描

9. **RtlUnwindEx (App.exe + 0x1190418)**
   - 寄存器状态: `rsp=64549ffb00, rip=7ff6a3dcce18`
   - 发现方式: 堆栈扫描

10. **RtlUnwindEx (App.exe + 0x1190460)**
    - 寄存器状态: `rsp=64549ffb08, rip=7ff6a3dcce60`
    - 发现方式: 堆栈扫描

11. **uv_cond_wait (App.exe [thread.c : 414 + 0xc])**
    - 寄存器状态: `rsp=64549ffb20, rip=7ff6a0055210`
    - 发现方式: 堆栈扫描

12. **worker (App.exe [threadpool.c : 76 + 0xb])**
    - 寄存器状态: `rsp=64549ffb50, rip=7ff6a0c600ad`
    - 发现方式: 调用帧信息

13. **uv__thread_start (App.exe [thread.c : 108 + 0x5])**
    - 寄存器状态: `rsp=64549ffbc0, rip=7ff6a0054d42`
    - 发现方式: 调用帧信息

14. **thread_start (App.exe [thread.cpp : 97 + 0xd])**
    - 寄存器状态: `rsp=64549ffc00, rip=7ff6a2c037e0`
    - 发现方式: 调用帧信息

15. **KERNEL32.DLL + 0x17974**
    - 寄存器状态: `rsp=64549ffc30, rip=7ff8320d7974`
    - 发现方式: 调用帧信息

16. **ntdll.dll + 0x6a271**
    - 寄存器状态: `rsp=64549ffc60, rip=7ff83370a271`
    - 发现方式: 堆栈扫描

---

### 线程 23

**堆栈帧:**

1. **win32u.dll + 0x9904**
   - 寄存器状态: `rax=1446, rdx=6454bff608, rcx=1, rbx=6454bff690, rsi=170625fa080, rdi=0, rbp=6454bff6d8, rsp=6454bff598, r8=2, r9=ffffff7e, r10=0, r11=246, r12=170625fa080, r13=1, r14=6454bff6c0, r15=6454bff6b0, rip=7ff830879904`
   - 发现方式: 作为上下文中的指令指针给出

2. **USER32.dll + 0x2003d**
   - 寄存器状态: `rbp=6454bff6d8, rsp=6454bff5a0, rip=7ff83304003d`
   - 发现方式: 堆栈扫描

3. **WorkerThreadDelegate::DidProcessTask (App.exe [pooled_single_thread_task_runner_manager.cc : 132 + 0x15])**
   - 寄存器状态: `rbp=6454bff6d8, rsp=6454bff5b0, rip=7ff6a0cb6b44`
   - 发现方式: 堆栈扫描

4. **WorkerThread::RunWorker (App.exe [worker_thread.cc : 334 + 0x9])**
   - 寄存器状态: `rbp=6454bff6d8, rsp=6454bff630, rip=7ff6a175a5c9`
   - 发现方式: 调用帧信息

5. **WorkerThread::RunSharedCOMWorker (App.exe [worker_thread.cc : 261 + 0x5])**
   - 寄存器状态: `rbp=6454bff6d8, rsp=6454bff750, rip=7ff6a175a230`
   - 发现方式: 调用帧信息

6. **ThreadFunc (App.exe [platform_thread_win.cc : 110 + 0x8])**
   - 寄存器状态: `rbp=6454bff6d8, rsp=6454bff790, rip=7ff69f9113bd`
   - 发现方式: 调用帧信息

7. **KERNEL32.DLL + 0x17974**
   - 寄存器状态: `rbp=6454bff6d8, rsp=6454bff810, rip=7ff8320d7974`
   - 发现方式: 调用帧信息

8. **ntdll.dll + 0x6a271**
   - 寄存器状态: `rsp=6454bff840, rip=7ff83370a271`
   - 发现方式: 堆栈扫描

---

### 线程 24

**堆栈帧:**

1. **ntdll.dll + 0x9f7e4**
   - 寄存器状态: `rax=4, rdx=0, rcx=708, rbx=0, rsi=6454aff908, rdi=708, rbp=6454affb58, rsp=6454aff8d8, r8=ffffffff, r9=1706260e03a, r10=740, r11=6454aff140, r12=6454aff9a8, r13=1, r14=708, r15=7fffffffffffffff, rip=7ff83373f7e4`
   - 发现方式: 作为上下文中的指令指针给出

2. **KERNELBASE.dll + 0x389b3**
   - 寄存器状态: `rbp=6454affb58, rsp=6454aff8e0, rip=7ff82f7889b3`
   - 发现方式: 堆栈扫描

3. **ScopedCommandsExecutor::~ScopedCommandsExecutor (App.exe [thread_group_impl.cc : 105 + 0x5])**
   - 寄存器状态: `rbp=6454affb58, rsp=6454aff8f0, rip=7ff6a0cb7eff`
   - 发现方式: 堆栈扫描

---

### 线程 25

**堆栈帧:**

1. **ntdll.dll + 0x9f7e4**
   - 寄存器状态: `rax=4, rdx=0, rcx=7b0, rbx=0, rsi=6454cff678, rdi=7b0, rbp=6454cff8c8, rsp=6454cff648, r8=77f0, r9=30, r10=0, r11=fffffff8, r12=6454cff718, r13=1, r14=7b0, r15=7fffffffffffffff, rip=7ff83373f7e4`
   - 发现方式: 作为上下文中的指令指针给出

2. **KERNELBASE.dll + 0x389b3**
   - 寄存器状态: `rbp=6454cff8c8, rsp=6454cff650, rip=7ff82f7889b3`
   - 发现方式: 堆栈扫描

3. **ScopedCommandsExecutor::~ScopedCommandsExecutor (App.exe [thread_group_impl.cc : 105 + 0x5])**
   - 寄存器状态: `rbp=6454cff8c8, rsp=6454cff660, rip=7ff6a0cb7eff`
   - 发现方式: 堆栈扫描

---

### 线程 26

**堆栈帧:**

1. **ntdll.dll + 0x9f7e4**
   - 寄存器状态: `rax=4, rdx=0, rcx=7d0, rbx=0, rsi=6454dff6e8, rdi=7d0, rbp=6454dff938, rsp=6454dff6b8, r8=30, r9=30, r10=1, r11=1, r12=6454dff788, r13=1, r14=7d0, r15=7fffffffffffffff, rip=7ff83373f7e4`
   - 发现方式: 作为上下文中的指令指针给出

2. **KERNELBASE.dll + 0x389b3**
   - 寄存器状态: `rbp=6454dff938, rsp=6454dff6c0, rip=7ff82f7889b3`
   - 发现方式: 堆栈扫描

3. **ScopedCommandsExecutor::~ScopedCommandsExecutor (App.exe [thread_group_impl.cc : 105 + 0x5])**
   - 寄存器状态: `rbp=6454dff938, rsp=6454dff6d0, rip=7ff6a0cb7eff`
   - 发现方式: 堆栈扫描

---

### 线程 27

**堆栈帧:**

1. **ntdll.dll + 0xa3074**
   - 寄存器状态: `rax=1c9, rdx=0, rcx=1706118c388, rbx=0, rsi=0, rdi=6454effe28, rbp=1706118c388, rsp=6454effca8, r8=6454effec8, r9=7ff69f91138c, r10=6454efd000, r11=6454efd000, r12=0, r13=0, r14=1706118c3d0, r15=0, rip=7ff833743074`
   - 发现方式: 作为上下文中的指令指针给出

2. **ntdll.dll + 0x4fa99**
   - 寄存器状态: `rbp=1706118c388, rsp=6454effcb0, rip=7ff8336efa99`
   - 发现方式: 堆栈扫描

3. **KERNELBASE.dll + 0x1f48d**
   - 寄存器状态: `rbp=1706118c388, rsp=6454effd20, rip=7ff82f76f48d`
   - 发现方式: 堆栈扫描

4. **ConditionVariable::TimedWait (App.exe [condition_variable_win.cc : 45 + 0x13])**
   - 寄存器状态: `rbp=1706118c388, rsp=6454effd60, rip=7ff69f9106c2`
   - 发现方式: 堆栈扫描

5. **ConditionVariable::Wait (App.exe [condition_variable_win.cc : 30 + 0x5])**
   - 寄存器状态: `rbp=1706118c388, rsp=6454effe00, rip=7ff69f91061c`
   - 发现方式: 调用帧信息

6. **SingleThreadTaskGraphRunner::Run (App.exe [single_thread_task_graph_runner.cc : 123 + 0x8])**
   - 寄存器状态: `rbp=1706118c388, rsp=6454effe40, rip=7ff69fb951ed`
   - 发现方式: 调用帧信息

7. **ThreadFunc (App.exe [platform_thread_win.cc : 110 + 0x8])**
   - 寄存器状态: `rbp=1706118c388, rsp=6454effe90, rip=7ff69f9113bd`
   - 发现方式: 调用帧信息

8. **KERNEL32.DLL + 0x17974**
   - 寄存器状态: `rbp=1706118c388, rsp=6454efff10, rip=7ff8320d7974`
   - 发现方式: 调用帧信息

9. **ntdll.dll + 0x6a271**
   - 寄存器状态: `rbp=1706118c388, rsp=6454efff40, rip=7ff83370a271`
   - 发现方式: 堆栈扫描

---

### 线程 28

**堆栈帧:**

1. **ntdll.dll + 0x9f7e4**
   - 寄存器状态: `rax=4, rdx=0, rcx=838, rbx=0, rsi=0, rdi=838, rbp=6454fffcd8, rsp=6454fffa88, r8=6454fff298, r9=0, r10=ffffffff, r11=0, r12=170625fa400, r13=1, r14=838, r15=6454fffcb0, rip=7ff83373f7e4`
   - 发现方式: 作为上下文中的指令指针给出

2. **KERNELBASE.dll + 0x389b3**
   - 寄存器状态: `rbp=6454fffcd8, rsp=6454fffa90, rip=7ff82f7889b3`
   - 发现方式: 堆栈扫描

3. **RtlUnwindEx (App.exe + 0x341a46)**
   - 寄存器状态: `rbp=6454fffcd8, rsp=6454fffaa8, rip=7ff6a2f7e446`
   - 发现方式: 堆栈扫描

4. **RtlUnwindEx (App.exe + 0x341a0f)**
   - 寄存器状态: `rbp=6454fffcd8, rsp=6454fffab0, rip=7ff6a2f7e40f`
   - 发现方式: 堆栈扫描

5. **ChildProcessLauncherHelper::StartLaunchOnClientThread (App.exe [child_process_launcher_helper.cc : 111 + 0x21])**
   - 寄存器状态: `rbp=6454fffcd8, rsp=6454fffac0, rip=7ff69ef8eabe`
   - 发现方式: 堆栈扫描

---

### 线程 29

**堆栈帧:**

1. **win32u.dll + 0x9904**
   - 寄存器状态: `rax=1446, rdx=0, rcx=0, rbx=64550ff3fc, rsi=64550ff4a0, rdi=7ff83303ffa0, rbp=0, rsp=64550ff348, r8=1706273d0c0, r9=1, r10=0, r11=1000, r12=7fffffffffffffff, r13=64550ff3f8, r14=64550ff3c0, r15=64550ff400, rip=7ff830879904`
   - 发现方式: 作为上下文中的指令指针给出

2. **USER32.dll + 0x2003d**
   - 寄存器状态: `rsp=64550ff350, rip=7ff83304003d`
   - 发现方式: 堆栈扫描

3. **RtlUnwindEx (App.exe + 0x6b2230)**
   - 寄存器状态: `rsp=64550ff370, rip=7ff6a32eec30`
   - 发现方式: 堆栈扫描

4. **SequenceManagerImpl::OnSystemIdle (App.exe [sequence_manager_impl.cc : 713 + 0xc])**
   - 寄存器状态: `rsp=64550ff380, rip=7ff69f8d5de6`
   - 发现方式: 堆栈扫描

---

通过这种方式，每个线程的堆栈帧都被清晰地列出，并且每个堆栈帧的寄存器状态和发现方式都进行了详细的说明。