  ldr     w0, [sp,28] 
  add     sp, sp, 32 
  ret 
19.2.8 MIPS 
指令清单 19.20  Optimizing GCC 4.4.5 (IDA) 
f: 
; $a0=a 
ori     $a0, 0x4000 
; $a0=a|0x4000 
li      $v0, 0xFFFFFDFF 
jr      $ra 
and     $v0, $a0, $v0 
; at finish: $v0 = $a0&$v0 = a|0x4000 & 0xFFFFFDFF 
ORI 无疑还是 OR 指令。指令中的“I”意味着它使用机械码存储数值。 
但是后面的 AND 指令可就不能是 ANDI 指令了。这是因为它涉及的立即数 0xFFFFFDFF 太长，无法连同操
作指令封装在同一条指令里。所以编译器把这个数赋值给$V0 寄存器，然后让它与其他寄存器进行 AND/与运算。 
19.3 位移 
C/C++的位移运算符是>。 
x86 指令集里有对应的左移 SHL 和右移 SHR 指令。 
位移操作通常用来实现与“2 的 n 次幂”有关的乘法和除法运算。有关介绍请参见本书的 16.1.2 节和
16.2.1 节。 
位移指令可用来对特定位进行取值或隔离，用途十分广泛。 
19.4 在 FPU 上设置特定位 
FPU 存储数据的 IEEE 754 格式如下： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
280 
逆向工程权威指南（上册） 
最高数权位 MSB 为符号位。是否可能在不使用 FPU 指令的前提下变更浮点数的符号呢？ 
#include  
float my_abs (float i) 
{ 
  unsigned int tmp=(*(unsigned int*)&i) & 0x7FFFFFFF; 
  return *(float*)&tmp; 
}; 
float set_sign (float i) 
{ 
  unsigned int tmp=(*(unsigned int*)&i) | 0x80000000; 
  return *(float*)&tmp; 
}; 
float negate (float i) 
{ 
  unsigned int tmp=(*(unsigned int*)&i) ^ 0x80000000; 
  return *(float*)&tmp; 
}; 
int main()  
{ 
  printf ("my_abs():\n"); 
  printf ("%f\n", my_abs (123.456)); 
  printf ("%f\n", my_abs (-456.123)); 
  printf ("set_sign():\n"); 
  printf ("%f\n", set_sign (123.456)); 
  printf ("%f\n", set_sign (-456.123)); 
  printf ("negate():\n"); 
  printf ("%f\n", negate (123.456)); 
  printf ("%f\n", negate (-456.123)); 
}; 
使用位操作 C/C++指令之后，我们不必在 CPU 和 FPU 的寄存器之间传递数据、再进行数学运算了。本节列
举了三个位操作函数：清除 MSB 符号位的 my_abs()函数、设置符号位的 set_sign()函数及求负函数 negate()。 
19.4.1 XOR 操作详解 
XOR 指令常用于使一个操作数的某些位取反的场合。若操作数 A 的某个位为 1，那么 XOR 指令将对
另一个数的相应位求非。 
输入 A 
输入 B 
输出 
0 
0 
0 
0 
1 
1 
1 
0 
1 
1 
1 
0 
若某个参数为零，XOR 则不会进行任何操作。这种指令也就是所谓的空操作。这是 XOR 指令非常重要的属
性，建议记住它。 
19.4.2 x86 
编译生成的指令简单易懂。 
指令清单 19.21  Optimizing MSVC 2012 
_tmp$ = 8 
_i$ = 8 
_my_abs PROC 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
281 
  and      DWORD PTR _i$[esp-4], 2147483647    ; 7fffffffH 
  fld      DWORD PTR _tmp$[esp-4] 
  ret      0 
_my_abs ENDP 
_tmp$ = 8 
_i$ = 8 
_set_sign PROC 
  or       DWORD PTR _i$[esp-4], -2147483648   ; 80000000H 
  fld      DWORD PTR _tmp$[esp-4] 
  ret      0 
_set_sign ENDP 
_tmp$ = 8 
_i$ = 8 
_negate PROC 
  xor      DWORD PTR _i$[esp-4], -2147483648   ; 80000000H 
  fld      DWORD PTR _tmp$[esp-4] 
  ret      0 
_negate ENDP 
函数从栈中提取一个浮点类型的数据，但是把它当作整数类型数据进行处理。 
AND 和 OR 设置相应的比特位，而 XOR 用来设置相反的符号位。 
因为要把浮点数还给 FPU，所以最后把修改后的处理结果保存到 ST0 寄存器。 
接下来，使用 64 位的 MSVC 2012 进行优化编译，得到的代码如下所示。 
指令清单 19.22  Optimizing MSVC 2012 x64 
tmp$ = 8 
i$ = 8 
my_abs  PROC 
  movss    DWORD PTR [rsp+8], xmm0 
  mov      eax, DWORD PTR i$[rsp] 
  btr      eax, 31 
  mov      DWORD PTR tmp$[rsp], eax 
  movss    xmm0, DWORD PTR tmp$[rsp] 
  ret      0 
my_abs  ENDP 
_TEXT   ENDS 
tmp$ = 8 
i$ = 8 
set_sign PROC 
  movss    DWORD PTR [rsp+8], xmm0 
  mov      eax, DWORD PTR i$[rsp] 
  bts      eax, 31 
  mov      DWORD PTR tmp$[rsp], eax 
  movss    xmm0, DWORD PTR tmp$[rsp] 
  ret      0 
set_sign ENDP 
tmp$ = 8 
i$ = 8 
negate  PROC 
  movss  
DWORD PTR [rsp+8], xmm0 
  mov   
eax, DWORD PTR i$[rsp] 
  btc   
eax, 31 
  mov   
DWORD PTR tmp$[rsp], eax 
  movss  
xmm0, DWORD PTR tmp$[rsp] 
  ret  
0 
negate  END 
输入值会经 XMM0 寄存器存储到局部数据栈，然后通过 BTR、BTS、BTC 等指令进行处理。 
这些指令用于重置（BTR）、置位（BTS）和翻转（BTC）特定比特位。如果从 0 开始数的话，浮点数
异步社区会员 dearfuture(15918834820) 专享 尊重版权
282 
逆向工程权威指南（上册） 
的第 31 位才是 MSB。 
最终，运算结果被复制到 XMM0 寄存器。在 Win64 系统中，浮点型返回值要保存在这个寄存器里。 
19.4.3 MIPS 
面向 MIPS 的 GCC 4.4.5 生成的程序几乎没什么区别。 
指令清单 19.23  Optimizing GCC 4.4.5 (IDA) 
my_abs: 
; move from coprocessor 1: 
                   mfc1     $v1, $f12 
                   li       $v0, 0x7FFFFFFF 
; $v0=0x7FFFFFFF 
; do AND: 
                   and      $v0, $v1 
; move to coprocessor 1: 
                   mtc1     $v0, $f0 
; return 
                   jr       $ra 
                   or       $at, $zero ; branch delay slot 
set_sign: 
; move from coprocessor 1: 
                   mfc1     $v0, $f12 
                   lui      $v1, 0x8000 
; $v1=0x80000000 
; do OR: 
                   or       $v0, $v1, $v0 
; move to coprocessor 1: 
                   mtc1    $v0, $f0 
; return                 
                   jr       $ra 
                   or       $at, $zero ; branch delay slot 
negate: 
; move from coprocessor 1: 
                   mfc1     $v0, $f12 
                   lui      $v1, 0x8000 
; $v1=0x80000000 
; do XOR 
                   xor      $v0, $v1, $v0 
; move to coprocessor 1: 
                   mtc1     $v0, $f0 
; return 
                   jr       $ra 
                   or       $at, $zero ; branch delay slot 
因为 LUI 在传递高 16 位数据时会清除寄存器的低 16 位，所以单条 LUI 指令就可以完成 0x80000000
的赋值，无需再用 ORI 指令。 
19.4.4 ARM 
Optimizing Keil 6/2013 (ARM mode) 
指令清单 19.24  Optimizing Keil 6/2013 (ARM mode) 
my_abs PROC 
; clear bit: 
  BIC      r0,r0,#0x80000000 
  BX       lr 
  ENDP 
set_sign PROC 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
283 
; do OR: 
  ORR      r0,r0,#0x80000000 
  BX       lr 
  ENDP 
negate PROC 
; do XOR: 
  EOR      r0,r0,#0x80000000 
  BX       lr 
  ENDP 
ARM 模式的程序可以使用 BIC 指令直接清除指定的比特位。上述程序中的 EOR 指令是 ARM 模式下
进行 XOR（异或）运算的指令。 
Optimizing Keil 6/2013 (Thumb mode) 
指令清单 19.25  Optimizing Keil 6/2013 (Thumb mode) 
my_abs PROC 
  LSLS     r0,r0,#1 
; r0=i>1 
  BX       lr 
  ENDP 
set_sign PROC 
  MOVS     r1,#1 
; r1=1 
  LSLS     r1,r1,#31 
; r1=1>1。虽然看上去是画蛇添足，但是在进行“输入
变量>1”的语句时，根据右移运算规则最
高数权位变为零，而其他各位数值回归原位。借助 LSLS/LSRS 指令对，该函数清除了最高数权位 MSB。 
Optimizing GCC 4.6.3 (Raspberry Pi, ARM mode) 
指令清单 19.26  Optimizing GCC 4.6.3 for Raspberry Pi (ARM mode) 
my_abs 
; copy from S0 to R2: 
FMRS   
R2, S0 
; clear bit: 
BIC      
R3, R2, #0x80000000 
; copy from R3 to S0: 
FMSR     
S0, R3 
BX       
LR 
set_sign 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
284 
逆向工程权威指南（上册） 
; copy from S0 to R2: 
FMRS     
R2, S0 
; do OR: 
ORR      
R3, R2, #0x80000000 
; copy from R3 to S0: 
FMSR     
S0, R3 
BX       
LR 
negate 
; copy from S0 to R2: 
FMRS  
R2, S0 
; do ADD: 
ADD      
R3, R2, #0x80000000 
; copy from R3 to S0: 
FMSR     
S0, R3 
BX       
LR 
在 QEMU 的仿真环境下启动 Raspberry Pi Linux 即可模拟 ARM FPU。所以上述程序使用 S-字头寄存
器存储浮点数，而不会使用 R-字头寄存器。 
FMRS 指令用于在通用寄存器 GPR 和 FPU 之间交换数据。 
上述程序中的 my_abs()函数和 set_sign()函数都中规中矩。但是 negate()函数在应该出现 XOR 指令的地
方使用了 ADD 指令。 
其实“ADD register, 0x80000000”和“XOR register, 0x80000000”是等效指令，只是不特别直观而已。
整个函数用于变更最高数权位的值。在数学上，1000 与任意三位数相加，运算结果的最后 3 位仍然和被加
数的最后三位相等。同理，1234567+10000=1244567，和的最后四位与第一个数的最后四位等值。以二进
制数的角度来看，0x80000000 就是 100000000000000000000000000000000，只有最高位是 1。因此，当
0x80000000 与任意数值相加时，运算结果的最后 31 位还是被加数的最后 31 位，只是最高数权位会发生变
化。再看 MSB：1+0=1，1+1=0（高于 32 位的数值被舍弃了）。因此，对于这个特定加数来说，ADD 指令
和 XOR 指令可以互换。虽然替换的必要性不甚明朗，但是整个程序还是没有问题的。 
19.5 位校验 
我们介绍一个测算输入变量的 2 进制数里有多少个 1 的函数。这种函数叫作“population count/点数”
函数。在支持 SSE4 的 x86 CPU 的指令集里，甚至有直接对应的 POPCNT 指令。 
#include  
#define IS_SET(flag, bit)  ((flag) & (bit)) 
int f(unsigned int a) 
{ 
    int i; 
    int rt=0; 
for (i=0; i<32; i++) 
    if (IS_SET (a, 1<<i)) 
        rt++; 
    return rt; 
}; 
int main() 
{ 