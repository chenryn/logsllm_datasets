gle challenge correct. With an empty token bucket, the bot must
also get a second challenge right within TB-Reﬁll tries; this hap-
pens with probability 1− (1− p)T B−Ref ill. That is, token buckets
reduce the bot success probability to
p ×
1 − (1 − p)T B−Ref ill
“
”
For example, if a bot has a 1/4,096 chance of getting a single
challenge correct, and TB-Reﬁll is 3, our scheme reduces the prob-
ability of getting a ticket to one per about 5.6 million attempts per
bot IP address.
4.2.1 Preventing denial-of-service against humans
Our scheme, as described so far, makes the assumption that each
user has a unique IP address. That assumption is both strong and
incorrect. Users share IP addresses when they access the Internet
via a web proxy or ﬁrewall that performs network address trans-
lation. Such conﬁgurations are common in large corporations and
some Internet Service Providers.
This is a problem for the token bucket scheme we described pre-
viously. When a human shares an IP address—and, thus, a token
bucket—with a bot, the human is denied service while the bot is
attacking. Since bots are much faster than humans, the human is
likely to encounter an empty token bucket every time she submits
an answer, and thus will always be marked wrong.
We address this problem by deﬁning a slightly more complex
scheme that uses two token buckets. The ﬁrst is a per-IP bucket, as
described before. The second is a per-session bucket. (All interac-
tions with Asirra must take place within a session, created when a
client ﬁrst begins to interact with Asirra’s web service.) The rules
governing the buckets are:
• Per-IP buckets are given an initial value of TB-Max tokens,
as before.
• When a new session is created, the per-session bucket is
given an initial value equal to the current value of the client’s
per-IP bucket. Creation of a new session also deducts a token
from the per-IP bucket.
• When any response is submitted, a token is deducted from
both the per-IP and per-session bucket.
• When a correct response is submitted, TB-Reﬁll tokens are
added to both the per-IP and per-session bucket.
• A user is only told their response is correct if their session
bucket is non-empty.
Intuitively, this scheme blacklists IP addresses, but allows hu-
mans to restore service to individual sessions by solving one extra
challenge correctly.
Using a single, per-session bucket would not be effective because
clients are untrusted. A bot does not play by the rules, and would
simply create a new session before every guess. Therefore, the per-
IP bucket is still necessary. However, legitimate users will create
a single session and use it persistently, allowing us to distinguish
them from bots sharing their IP address. A user sharing an IP with
an attacking bot will initially get an empty per-session bucket, but
will add TB-Reﬁll tokens after her ﬁrst correct response. These per-
session tokens are not consumed by the bot, so the user is granted
access after a second correct response.
5. DEPLOYMENT
Most CAPTCHAs are algorithms; their realization is typically
source code that can be shared freely and integrated into web sites
without external dependencies. In contrast, Asirra is both an al-
gorithm and a database that must be kept secret. To protect the
database, we had no option but to implement Asirra as a web ser-
vice.
In this section, we brieﬂy describe our service’s interface,
implementation, and deployment.
The service is divided into the trusted web service, run by us,
and the untrusted client component, implemented by us but run in
the end-user’s browser.
5.1
Interface
Our goal in designing the interface to the web service was to
make it as easy as possible for the webmaster. Overly complex
interfaces tend to be mis-used in ways that compromise security.
Suppose a web site wishes to use Asirra to protect a sign-up
form. Our site has instructions for the webmaster describing how
to include a few lines of JavaScript in the HTML form she wishes
to protect. This code loads the bulk of Asirra’s front-end imple-
mentation from the Asirra server.
Once the end-user views, completes, and submits the form—
including solving the Asirra CAPTCHA—our JavaScript will set
a hidden input ﬁeld in the HTML form called Asirra Ticket.
The ticket is a bit string that the webmaster then must validate
against the Asirra web service to ensure the client did not forge or
re-use it. This validation typically happens as a step of processing
the client’s form on the webmaster’s back-end server.
Ticket validation is simple: the ticket is passed to an Asirra val-
idation URL. Our web service returns “Pass” only if the ticket is
valid, recent, and has never been validated before. The JavaScript
that manages user interactions on the client prevents the form from
being submitted until a valid ticket has been received by passing the
Asirra challenge. Thus, webmasters typically only see validations
fail when their service is under attack.
5.2
Implementation
Asirra manages its own interaction with the user inside an em-
bedded DIV. The interactions between client and web service are
performed using “AJAX” (asynchronous HTTP requests executed
from within JavaScript). When our JavaScript is loaded, it ﬁrst cre-
ates the visual elements of the challenge in the user’s browser. It
then sends requests to the Asirra web service to create a new Asirra
session, retrieve one or more challenges, and submit user responses
for scoring. The client earns a service ticket for a correct response
(or, in some cases, an almost-correct response; see Section 4.1).
The user can choose to see a new challenge if they are asked to
solve one that contains a confusing image.
Though administratively centralized, the web service’s imple-
mentation is distributed to ensure scalability. Load balancing is
achieved by mapping our web service’s DNS name to multiple IP
addresses; clients choose among them randomly. The ﬁrst action
performed by a client is session creation. Whichever machine is
randomly selected by the client to execute this action becomes the
permanent custodian of that session’s state. The custodian stores
the session state locally and returns a session ID to the client. The
session ID has the custodian server’s ID embedded in it.
If later operations that are part of the same session arrive at a
different Asirra service machine, the request is forwarded to the
session custodian by ﬁnding its identity embedded in the session
ID. (The client is not trusted; a forged session ID will simply fail
to ﬁnd any expected state on the incorrectly indicated custodian
server.) Our forwarding scheme ensures that at most two machines
Solved
With PCA
Challenges Users Passed, Users Passed,
1 (≈15 sec)
2 (≈30 sec)
3 (≈45 sec)
No PCA
83.4%
97.2%
99.5%
83.4%
99.6%
99.96%
Table 1: Expected user population that will pass Asirra after 1, 2, and
3 challenges, with and without PCA (§4.1). Assumes a 12-image chal-
lenge, 98.5% classiﬁcation accuracy for an individual image (§3.1.3),
and 15 seconds required per challenge (§3.1.2).
Image Classiﬁer
Accuracy
50% (random guessing)
60% (known techniques)
70% (major AI advance)
Bot Success Rate
No PCA With PCA PCA + Tokens
1/5.2 million
1/4,096
1/459
1/54 thousand
1/72
1/3,952
1/404
1/54
1/990
Table 2: Expected success rates of bots with three hypothetical image
classiﬁers. Assumes a 12-image challenge. The effects of PCA (§4.1)
and Token Buckets (§4.2) with TB-Reﬁll of 3 are also considered. A
detailed threat analysis can be found in §3.2.
are ever involved in servicing a single request: the machine which
receives the request from the client, and the machine that owns the
session state and receives the sub-request. The Asirra service is
therefore readily scalable; the overhead of parallelization will never
be more than 2x regardless of the total size of the farm.
In practice, we have observed lower overhead; request forward-
ing is not the common case. Many combinations of browser and
operating system continue to use the same IP address for a given
domain name for the duration of a browser session. This may be an
aspect of many browsers’ “DNS Pinning” policy meant to reduce
cross-site scripting attacks.
The web service is about 700 lines of Python code. It is currently
deployed on Amazon’s EC2 [10] compute cloud platform, making
it easy to add resources as the service’s popularity increases.
6. SUMMARY AND CONCLUSIONS
In this paper, we presented Asirra, a CAPTCHA that asks users
to identify cats out of a set of 12 photographs of both cats and
dogs. Our image database is provided by a novel, mutually bene-
ﬁcial partnership with Petﬁnder.com, which has a database of over
three million images of pets looking for new homes. In exchange
for the use of these images, Asirra displays an “adopt me” link be-
neath each one, promoting Petﬁnder’s primary mission of ﬁnding
homes for homeless animals. (Security implications of Adopt-Me
are discussed in Section 3.2.1.)
Asirra is attractive because humans can solve it quickly and ac-
curately (Table 1), but it provides signiﬁcant protection from bots
(Table 2). Asirra provides a social beneﬁt: improving animal wel-
fare. And, anecdotally, users report that Asirra is enjoyable: Spend-
ing a few moments looking at cute kittens is generally preferred to
squinting at deformed letters.
Asirra is a free web service, available at www.asirra.com.
Our contributions in this paper also include two techniques that
we use in Asirra, but can be added to virtually any CAPTCHA. The
Partial Credit Algorithm (§4.1) signiﬁcantly improves the pass rates
of humans while only marginally improving the yield of bots. Con-
versely, our use of CAPTCHA Token Buckets (§4.2) signiﬁcantly
decreases the yield of brute-force bots while having a minimal ef-
fect on humans.
CAPTCHA design seems to be both an art and a science. They
will never be strong in the sense of a cryptosystem or a proof; by
deﬁnition, they can be broken with nothing more than a few mo-
ments of casual human effort.
In what may be an endless arms
race, perhaps the best we can do is ensure the latest weapon du jour
is fun for users. In this goal, at least, we hope Asirra succeeds.
7. REFERENCES
[1] Frozen Bear. hotcaptcha. http://www.hotcaptcha.com.
[2] Kumar Chellapilla, Kevin Larson, Patrice Simard, and Mary
Czerwinski. Designing human friendly human interaction
proofs (HIPs). In Proceedings of ACM CHI 2005 Conference
on Human Factors in Computing Systems, volume 1 of Email
and security, pages 711–720, 2005.
[3] Monica Chew and J.D. Tygar. Image recognition
CAPTCHAs. In Proceedings of the 7th International
Information Security Conference (ISC 2004), pages
268–279. Springer, September 2004.
[4] Mark Everingham, Andrew Zisserman, Chris Williams, and
Luc Van Gool. The PASCAL visual object classes challenge
2006 (VOC2006) results. Technical report, University of
Oxford, 2006.
[5] Ralph Gross, Jianbo Shi, and Jeff Cohn. Quo vadis Face
Recognition? Technical Report CMU-RI-TR-01-17,
Carnegie Mellon University Robotics Institute, June 2001.
[6] Google Images. http://images.google.com.
[7] Eight Days Inc. Hot or not. http://www.hotornot.com.
[8] Greg Mori and Jitendra Malik. Recognizing objects in
adversarial clutter: Breaking a visual CAPTCHA. In
Conference on Computer Vision and Pattern Recognition
(CVPR ’03), pages 134–144. IEEE Computer Society, 2003.
[9] Jared Saul. Petﬁnder. http://www.petﬁnder.com.
[10] Amazon Web Services. Ec2 scalable compute cloud.
http://aws.amazon.com/ec2.
[11] Patrice Simard, David Steinkraus, and John C. Platt. Best
practices for convolutional neural networks applied to visual
document analysis. In International Conference on
Document Analysis and Recognition, pages 958–962. IEEE
Computer Society, 2003.
[12] Digg.com user DoubtfulSalmon. http://tinyurl.com/2stwu3,
April 2006.
[13] L. von Ahn, M. Blum, N.J. Hopper, and J. Langford. The
CAPTCHA web page. http://www.captcha.net.
[14] Luis von Ahn, Manuel Blum, Nicholas J. Hopper, and John
Langford. CAPTCHA: Using hard AI problems for security.
In Eli Biham, editor, Advances in Cryptology - EUROCRYPT
2003, International Conference on the Theory and
Applications of Cryptographic Techniques, Warsaw, Poland,
May 4-8, 2003, Proceedings, volume 2656 of Lecture Notes
in Computer Science, pages 294–311. Springer, 2003.
[15] Luis von Ahn and Laura Dabbish. Labeling images with a
computer game. In Elizabeth Dykstra-Erickson and Manfred
Tscheligi, editors, Proceedings of the 2004 Conference on
Human Factors in Computing Systems, CHI 2004, Vienna,
Austria, April 24 - 29, 2004, pages 319–326. ACM, 2004.
[16] Oli Warner. Kittenauth. http://www.thepcspy.com/kittenauth.
[17] WikiMedia Foundation. http://commons.wikimedia.org.
[18] Wen-Yi Zhao, Rama Chellappa, P. J. Phillips, and Azriel
Rosenfeld. Face recognition: A literature survey. ACM
Comput. Surv, 35(4):399–458, 2003.