大白话解释拟态安全
一、前言
一千个读者有一千个哈姆雷特，可能我有一些地方没有理解透彻和没有彻底明白，所以对于我讲的
东西存在偏面或者不好地方，欢迎指正但是不要骂我。
各位师傅可能这几年都听过一些特别高大上的词语，拟态安全，内生安全...在我看来，一开始，可能以
为这是什么全新的技术，全新的理念。其实都是一些旧概念，旧技术的衍生。我们今天主要来讲的就是
拟态安全，究竟是什么东西，尽量使用能听得懂的话语，来进行通俗易懂的解释。
此外，要注意的是，拟态安全并没有开源或公开的设备，或者说我这种菜鸡接触不到。所以我只能根据
网上的公开的文章，论文等资料进行阅读和理解，进行云解答。所以一定会存在理解误差的情况。我会
把看到的文献论文 以caj或pdf的形式打包成压缩包贴在文章后面。
二、拟态是什么
拟态是生物学里面的概念，即指一种生物在形态、行为等特征上模拟另一种生物，从而使一方或双方受
益的生态适应现象。其实就是模拟，模仿，拟态听起来比较高大上。如果有联想记忆好的师傅可能就已
经想到一个历史更为悠久的名词--蜜罐。我觉得如果不能明白拟态是什么，就把拟态当成蜜罐V2.0，蜜
罐的延伸技术就好了。
1、起源
追溯一个事务的本质，就要去理解其发展的过程和历史，根据国内的论文显示拟态安全最早追溯于2013
年9月，那么，真的是如此吗？
我们通过谷歌把时间限制在2013年8月30日之前
其实可以看到最早是可以追溯到2005年一篇来自中国台湾省国立交通大学的硕士论文。这里给出链接，
我随后也会打包（以下开始，有关引用链接做相同处理）
https://ir.nctu.edu.tw/bitstream/11536/73946/1/759101.pdf
这是拟态攻击之入侵检测，巴拉巴拉巴拉的 就是在写ids是怎么通过fork来进行防御的，这和我们的拟态
防御没有关系，跳过。（为了确认，通读了全文，顶- -）
别的13年以前的拟态都是和我们要看的拟态无关。那么拟态防御这个概念 在国外的相关技术是什么呢
Moving Target Defence, MTD（叫做移动目标防御）
（译文截图）（直接跳过吧，不用看，感兴趣的自己google搜一下）
出发点
移动防御的出发点和拟态的出发点是相似的
划重点了，师傅们，这有助于理解拟态安全的出发点。现有的安全体系里面，大部分（严谨滑稽）都是
基于指纹或者常说的特征来进行识别的，是一种被挨打的方式，大部分都是黑客组织们攻击成功，比如
17010已经打了不知道多少年了，才被后人所知。所以现有的安全体系是无法面对零日漏洞的。所以，
什么拟态安全，内生安全，出发点就是为了增加未知的可利用的漏洞和故意设置的后门成本。注意，这
里是增加成本，因为邬江兴院士也在论文里提及了这个点，不可能保证系统的百分百安全，就是为了恶
心黑客，啊，写到这里让我想到了宝塔。
区别
移动目标防御对于后门不是特别关注，主要关注自身内部未知漏洞攻击的防护（原因：联想一下棱
镜门，再想想大量的后门都是谁写的。2333）
目前移动目标防御主要基于软件技术;拟态安全防御, 不仅仅基于软件, 而是基于拟态计算的软硬件
协同的技术。共同特点还是动态化、多样化、随机化。
相同点
相同的都是动态化、多样化、随机化的主动防御思想。
2、前提
首先，要记住一个基准。安全是服务于产品的。所以拟态安全不能对用户的使用进行较大的影响。
3、实现
别的不提，讲一些我觉得是重点的东西。
硬件层面, 它的目标就是主动变化处理、存储、互联、输入、输出等方式。让系统充满随机性
听起来好像好高大上，就是什么地址分配随机化（眼熟不，2333），指令随机化...就是让一些固定的，
能让黑客容易且需要获取的东西，变成多样化，增加成本
。这个其实现在的产品都在做- -。
（传
统的安全体系）
（拟态安全体系）
拟态安全，不是真的就是一个百分百全新的技术，是结合现有的入侵检测，蜜罐，应急响应等等一起
做。
说了这么多 拟态究竟是什么东西？怎么实现的
那么在web层面上，拟态的网络拓扑是怎么样的呢，请看图，（注意，这是来自2017年的论文，可能有
新迭代）
看出亮点了吗，我们以前传统的网络架构，可能就是客户端对应的一个服务端，或者做了负载均衡的服
务端。（说错指正）
拟态怎么做的 就是他在服务端，做了几个流程，第一个点就是 你的请求会随机交到后面的所有服务器处
理，有服务器A 服务器B 服务器C。他们的架构不同，但是对于正常的用户请求，他们返回的应该是一样
的。比如
但是你这个老黑客就不同了，你请求的是
这时候centos 或者ubuntu的服务器可能的确包含成功了，但是winserver摇了摇头，他们根本没有这个
文件，所以包含没成功，响应的内容是空的。
这时候DDRV（响应表决器）看到，怎么请求的结果不一样啊，可能就会
把你这个请求给取消了或者响应正常的?include=头像.jpg，
并且可能对执行了恶意请求的服务器进行还原
同理，这些也可以应用到各种攻击手段中，比如
你sql注入，你注入的一开始，探测到的是mysql，结果后面的mssql orcale接收到你注入的mysql
指令根本不认识，结果导致返回结果不一样，而且别忘了，前面说过，其实拟态不会只用拟态，
waf，入侵检测这些恶心东西都在的。过完waf发现  只bypass了mysql mssql不行。 
或者你发现了个apache的0day，结果Nginx的服务器没有这个洞- -。又凉。
比如基于Apache的hash collision进行ddos，但是还有nginx和别的服务器能够正常响应，只需要
屏蔽Apache的不一致消息即可
拟态DNS：例如dns投毒，多架几个dns，对于缓存的过程中 不一样啥的 就重新请求。（具体可以
看看：一种基于拟态安全防御的DNS框架设计）
扫描拟态的网站 可以发现，每次的响应都是有区别的，下面看对比图
                         关闭拟态
?include=头像.jpg #所有的服务器都有这个头像文件
?include=../../../../../../etc/passwd
                            开启拟态
webshell连接：
(1) 准备一组web服务执行体, 开启拟态防御功能;
(2) 向单一执行体中植入php木马;
(3) 使用Weevely客户端尝试连接木马, 连接失败;
(4) 向所有执行体中植入php木马;
(5) 使用Weevely客户端尝试连接木马, 连接成功后执行dir命令, 命令执行失败如图16所示。
ps：这里我猜是linux没有dir的指令。所以所有的执行体响应不一致，如果执行个whoami呢？或者不要
回显写入进文件里面呢。不过接触不到拟态站，没辙
我猜着可能可以绕过。
这时候师傅可能提问，这不会影响业务吗。每次请求，用户获取的响应是一样的吗？我们看看下图
#MNOS:拟态网络操作系统设计与实现
可以看看这篇 技术细节很多。但是这里不过多叙说，想了一下，这篇讲的真的明白，我觉得没必要再复
述一遍，对拟态的一些简单的处理和实现 感兴趣的 推荐看看
3.2、网络拟态
网络拟态防御通过变换网络结构来改变网络拓扑, 使得网络拓扑呈现出动态性、异构性、不确定
性、非持续性。网络拟态防御主要是通过降低网络的确定性、静态性和同构性来增加攻击者的攻击
难度, 使得攻击者没有足够的时间对目标网络进行探测;同时降低其所搜集信息的有效性, 使其在探
测期间收集的信息在攻击期间变得无效, 降低系统被成功攻击的概率。
人话：这内网的拓扑图一直在变 。而且还容易给检测到我常规的扫描发送的数据包
人话 ：主流技术已经实现，分别是：
变形网络
变形网络主要是网络、主机以及应用程序进行随机调整和配置, 使得整个网络呈现出动态性。
相关技术是：美国雷声公司的Morphinator项目、SAFE等
自适应计算机网络
自适应计算机网络指的是网络本身如何通过自动改变拓扑结构和设置
相关技术是：有Fuzzbuster和ACD等技术
开放流随机主机转换技术 (OFRHM) 
就是动态网络地址转换、地址空间随机化、网络地址跳变等技术使得网络对外地址呈现出动态性,
目的：使攻击者找不到攻击目标, 以此破坏攻击者的攻击链, 
相关技术是：NSAR, HSS, MT6D等技术。
实际：技术未成熟，还没有应用到实践中，2333，但是说不定现在成熟了，毕竟也过了几年了
更加详细的一些技术细节
3.3、拟态防御模型
传统的模型，是
动态异构冗余模型（听起来比较高大上，只要知道其实就是个名字而已）：
其中每个执行体还可以继续拆分成不同的执行体，举个例子
输入->
处理->
输出
->输入
->预处理（把输入的内容通过分发器复制多份，然后分发给不一样的执行体，执行体不会互相干扰，互相独立
的）
->所有执行体执行完成以后都会把结果发给表决器
->表决器对多个输出结果处理，得到正确的输出,
->输出
->输入
->预处理（把输入的内容通过分发器复制多份，然后分发给不一样的执行体，执行体不会互相干扰，互相独立