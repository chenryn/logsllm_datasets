other elements in the call graph. Similarly, we have F 0,
F 1, F 2, and . . . .
• E is a ﬁnite set of transition relationships among Activ-
ities and Fragments. There are three basic relationships:
1) E1 : A → A (outer): From an Activity to another
Activity directly. Since there doesn’t exist A → A
(inner), we will use A → A to represent it.
2) E2 : A → F (inner): From an Activity to its own
Fragments. We will use A → Fi to represent it.
3) E3 : F → F (inner): From a Fragment to another
Fragment. Both of them belong to one Activity. We
will use F → Fi to represent it.
in fact,
Note that,
there are seven types of transition:
A → A, A → Fi, F → Fi, A → Fo, F → Ai, F → Ao,
and F → Fo, where Fi (Ai) stands for an internal Fragment
(Activity), and Fo (Ao) stands for an external Fragment
(Activity). Finally, we merge them into three situations as
mention above. The other four situations are ignored. First,
we ignore the edge F → Ai because this transition must go
through its host Activity. Second, all edges starting from a
Fig. 5: Example of AFTM
Fragment can be regarded as starting from its host Activity.
Therefore, F → Ao and F → Fo can be considered as
A → Ao and A → Fo respectively. In Deﬁnition 1, A → Ao
is equal to A → A. Third, A → Fo can be split into A → A
and A → Fi.
After merging, all transitions among Activities and Frag-
ments can be expressed by the three basic edges. In the paper,
we use E1 to represent A → A, E2 for A → Fi, and E3 for
F → Fi. In Figure 5, we give an abstract view of AFTM of
an app, and we could ﬁnd the three basic edges (E1, E2, and
E3) could cover all situations.
B. Initialization of AFTM
In this subsection, we introduce how to generate the AFTM
from an app.
1) Decompile APK: We use Apktool [11] to decompile the
target APK ﬁle to get the smali code and its AndroidMani-
fest.xml ﬁle. The initialization construction of AFTM is based
on them. Also, in this step, we further convert the smali code
to the corresponding Java code through jd-core [12] for the
last step – transition edge calculation.
2) Get the Effective Activities and Fragments: In order to
ensure the accuracy of AFTM, we must remove the invalid Ac-
tivities and Fragments, which have no interactions with other
401
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:55 UTC from IEEE Xplore.  Restrictions apply. 
UI elements. Invalid Activities include the Activities involved
in intermediate classes as well as isolated Activities. Through
analyzing the manifest ﬁle, we can get a list of all declared
Activities. Also, this list does not contain the Activities in
intermediate classes, so the interference of intermediate classes
can be solved. Then, we ﬁlter out the isolated Activities. If
an Activity is considered as a node, the interaction between
two nodes is an edge. It is clear that when completing the
classiﬁcation and acquisition of all the edges, the nodes not
linked by any edge are isolated and should be removed.
To Fragments, through scanning all the decompiled smali
code ﬁles, we can ﬁnd some ﬁles that
inherit from the
Fragment class. These ﬁles are the subclasses of Fragment,
and we save the class names to a list. Next, we scan all smali
ﬁles again to ﬁnd out all derived classes that inherit from these
subclasses of Fragment and add the newly discovered ones
to our collection. Note that this collection still needs to be
ﬁltered. Here we assume that we have obtained a valid list of
Activities. Then we collaborate the effective Activity classes
with the Fragments in the collection to observe whether there
exists a statement of the Fragment. If the statement could be
found, we consider the corresponding Fragment is an effective
Fragment. Following this approach until all Fragments in
the collection are checked, we will get an updated effective
collection in the end.
3) Get the Transition Edges: We treat the Activities and
Fragments found in the static analysis as nodes, so the transi-
tion relationships among them are edges. There are seven types
of edges in practice. Note that, as mentioned before, the seven
types will be merged to three basic types: A → A, A → Fi,
and F → Fi. We designed an Algorithm to emulate those
edges and generate the AFTM graph, as listed in Algorithm 1.
As shown in Algorithm 1, to the edge A → A, we should
analyze the ﬁle of every Activity. Whenever we want to switch
to a new Activity, we need to create an Intent object with
the information of this converted Activity and execute the
startActivity() method. If there exists Java code like
the form of new Intent(Class A0, Class A1) or
setClass(Class A0, Class A1) in A0 class, the sec-
ond parameter (Class A1) could be used as the information
of the Activity converted to because it indicates the name of
the new Activity. Then we will add this switching relationship
A0 → A1 to the list. To the code new Intent(String
action) or setAction(String action), it is a dif-
ferent case because the String type of parameter indicates
the information of the Action in AndroidManifest.xml ﬁle.
Therefore, we have to ﬁnd the corresponding statement in
AndroidManifest.xml, determine the Activity it belongs to, and
add the corresponding edge and nodes to the graph.
To the edge with Fragment as the end node, say A → Fi
and F → Fi, we look for the code of instances of Fragment
F 1 in Activity A0’s class ﬁle or Fragment F 0’s class ﬁle.
Then If F 1 belongs to A0 or F 0 and F 1 belong to the same
Activity, these edges and nodes will be added to the graph.
Algorithm 1 Generate AFTM Graph
Input:
Current Activity java ﬁle called A0.java
Current Fragment java ﬁle called F0.java
AndroidManifest.xml
Output:
The AFTM Graph G = (V, E)
function GETEDGEATOAORATOF()
for all lines in A0.java do
if contains setClass(Class A0, Class A1) or
new Intent(Class A0, Class A1) then
V = V ∪ A0;
V = V ∪ A1;
E = E ∪ (A0 → A1);
end if
if
then
contains new Intent(String
action)
or
setClass(String action) then
if f ind A1 in AndroidM anif est.xml by action
V = V ∪ A0;
V = V ∪ A1;
E = E ∪ (A0 → A1);
end if
end if
if contains new F 1() or
if F 1 ∈ A0 then
V = V ∪ A0;
V = V ∪ F 1;
E = E ∪ (A0 → F 1);
F 1.newInstance() then
end if
end if
end for
end function
function GETEDGEFTOF()
for all lines in F 0.java do
if contains new F 1() or
F 1.newInstance() then
if F0, F1 ∈ A then
V = V ∪ F 0;
V = V ∪ F 1;
E = E ∪ (F 0 → F 1);
end if
end if
end for
end function
instanceof (F 1) or
instanceof (F 1) or
V. STATIC INFORMATION EXTRACTION
FragDroid needs the dependency information to identify
states and analyze relationships in apps. Such information is
provided as knowledge for the subsequent evolutionary test
case generation phase.
In the previous research, TrimDroid [13] explains widget,
handler, and Activity dependency on the level of Activity. As
402
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:55 UTC from IEEE Xplore.  Restrictions apply. 
1 // Create intent for next Activity
2 Intent intent = new Intent(Context,
SecondActivity.class);
3
4 // Start the Activity from Activity
5 startActivity(intent);
6
7 // Start the Activity from Fragment
8 getActivity().startActivity(intent);
Fig. 6: Code example: Start next Activity
the Activity dependency in TrimDroid, FragDroid extracts the
dependency relationships among Activities and extends the
scope to the Fragment level as well as the dependency rela-
tionships between Activities and Fragments. Besides, resource
dependency and input dependency are the essential parts of
the collected meta-data. The Activity & Fragment dependency
speciﬁes the Activities and Fragments impacted by the behav-
iors of another Activity or Fragment. The resource dependency
helps the UI driving component to quickly distinguish which
Activity or Fragment the current UI belongs to through source-
IDs. The Input dependency is built up manually to provide
proper inputs for widgets like EditText so that the test cases
could reach more states.
Algorithm 2 Activity & Fragment Dependency
Input: a ∈ Activity
Output: The Relationship of Activity & Fragment R =
(A, F )
R ← (cid:6)
F Class ← “android.app.F ragment”
sF Class ← “android.support.v4.app.F ragment”
for all a in Activity do
allClass ← getInnerClass(a)
for all aClass in allClass do
Classes ← getU sedClass(aClass)
for all Class in Classes do
classChain ← getSuperChain(Class)
if F Class ∈ classChain (cid:7) sF Class ∈
classChain then
R = R ∪ {a, Class}
break
end if
end for
end for
end for
tance chain, this class is a derived class of Fragment. Then
this Activity and class are the dependency of the Activity and
Fragment.
A. Activity & Fragment Dependency
B. Resource Dependency
It is known that the switching between Activities could
be proceeded by Intent. Usually, an Intent contains many
serialized data some of which are concerned with the widget
state. Likewise, in a Fragment, the Intent can be used for
the transition from a Fragment to an Activity. This can be
implemented by calling the Context of host Activity in a
Fragment via function getActivity(), as shown in the
code snippet in Figure 6. In some cases, a Fragment shares
events with its host Activity. One way to achieve that is to
deﬁne a callback interface inside the Fragment and require
the host Activity to implement.
Furthermore, a Fragment may be used in one or more
Activities, which means ExampleFragment in Figure 3 can
appear in any Activity which involves Fragment components.
In reverse, an Activity is able to hold more than one Fragment.
The code in Figure 3 shows how to add a Fragment
to
an Activity, in which ExampleFragment can be replaced
with any subclass of android.app.Fragment. To the
example shown in Figure 1, in order to discover more possible
test paths, it would be helpful if we identify the Fragments
of CATEGORY and RECENT tabs in the current Activity.
For such a purpose, Algorithm 2 describes the procedure of
identifying the dependency among Activities and Fragments.
First, FragDroid gets all used classes from each Activity
and its inner classes (like ExampleActivity$1.class)
and then analyzes the inheritance chain of each used class.
If there exists class android.app.Fragment or class
android.support.v4.app.Fragment in the inheri-
Android UI is constituted with numerous UI components. A
UI component in the present UI state always belongs to some
certain Activity. In existing research, several Activity-level
analysis tools design their UI models by analyzing the layout
ﬁles and code of Activities [13]. However, the introduction
of Fragment makes the Activity-based UI models incomplete,
because a widget in current UI state may belong to an Activity
or a Fragment. For instance, in Figure 1(a), the listener of the
tab marked as “CATEGORIES” belongs to an Activity, but the
list below is implemented in a Fragment. It means the code
of different widgets in the same UI may be implemented in
different ﬁles.
The static analysis phase extracts the resource dependency
to match widgets to their host Activities and Fragments. In An-
droid, a unique number (resource-ID) is used to identify a re-
source. As shown in Algorithm 3, the dependency information
is collected by discovering the resource-IDs that repeatedly
appear in both layout and resource ﬁles. Function getID()
fetches a widget’s resource-ID, and function getAID() /
getFID() outputs a list of resource-IDs contained in an
Activity or Fragment. At the same time, all non-interaction
widgets not declared in code ﬁle are ruled out.
C. Input Dependency
Android apps usually require users to enter some informa-
tion to complete a speciﬁc function. Different input values
usually lead to different outcomes. For example, in the login
Activity of an app, only the correct account information can
403
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:55 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 3 Resource Dependency
Input: a ∈ Activity, f ∈ F ragments, L ∈ Layouts
Output: The AFRM Model M = (A, F, RID)
M ← (cid:6)
for all
for all w(idge) in l do
l in Layouts do
id ← getID(w)
isF ind = f alse
for all a in Activity do
aID ← getAID(a)
if id ∈ aID && l ∈ a then
M = M ∪ {a, null, w}
isF ind = true
break
end if
end for
if !isF ind then
for all f in F ragment do
f ID ← getF ID(f )
if id ∈ f ID && l ∈ f then
M = M ∪ {null, f, w}
break
end if
end for
nodes in AFTM model are accessed and all test cases have
been executed, and no new node is added to AFTM.
A. UI Driving and AFTM Update
FragDroid could drive the execution of a test case automat-
ically and reach the target interface set in the case. There are
three methods for FragDroid to reach a certain interface:
• We use the command am start -n 
-a android.intent.action.MAIN -c
to
android.intent.category.LAUNCHER
launch an app by Android Debug Bridge (ADB) [16], in
which  is the entry Activity.
• We translate the operation series of
test cases and
stored them as a test script, then package them into the
target Android app by Ant [17] and install this app to
the testing phone. Finally, we use the ADB command
am instrument -w 
android.test.InstrumentationTestRunner
to run this app, in which  is
the package name of this app.
• During static analysis, we modify AndroidManifest.xml
by adding the attribute  for
every
Activity and use the ADB command am start -n
 to forcibly start an Activity which Frag-
Droid cannot visit by normal methods in the ﬁrst phase of
dynamic testing, in which  is the target
Activity.
end if
end for
end for
the test process move on. Without a successful
let
login,
most of the subsequent Activities will not be reached. As
another example, a search box in TheWeatherChannel requires
inputting the name of an existing place for checking weather
information. If a test tool inputs random string like “abc”, this
app may report an error or give the null result, and the test
cannot continue.
There are many studies on improving the input for dynamic
analysis. TrimDroid [13] considers the input relationship of
different widgets. Chen et al. [14] propose a simple way
to generate input according to the state of a widget and its
context. Dynodroid [15] cuts down impossible input sequence
combinations to decrease the number of generated test cases.
FragDroid utilizes some techniques of these works to ensure
that it could generate inputs as accurate as possible. Moreover,
FragDroid introduces a new input interface which is a ﬁle
containing resource-IDs of all input widgets (like EditText,
CheckBox, and so on). Regarding this ﬁle, analysts can
manually ﬁll the input ﬁelds with correct values in advance,
then FragDroid will use these values with a preference during
tests.
VI. EVOLUTIONARY TEST CASE GENERATION
This section discusses how the AFTM is iteratively updated.
It is a kind of dynamic process that the output of the previous
test is fed back to AFTM, and new test cases will be generated
according to the update of AFTM. This process ends when all
No matter which method a test case is used to complete
the UI transition,
the tested app will eventually reach a
stable interface unless the system collapses with FC (Force
Close). When the app settles down to a steady-state, there are
three possible situations: reach an unvisited Activity, reach
an unvisited Fragment, reach a visited interface. These three
situations may trigger the update of AFTM and/or the UI
queue through a kind of evolutionary manner. The ways of
handling different situations are described as below:
Case 1 – Reaching an unvisited Activity. When Frag-
Droid reaches a new Activity interface, a new item will
be added to the UI queue. The operation list of this item
contains the operation list of
its previous item and the
operation information converting from the previous item to
here. Also, if the function getFragmentManager() or
getSupportFragmentManager() is found in the cur-
rent Activity, it means the existence of dynamic switching
between this Activity and some Fragment. Therefore, based
on the amount of the Fragments having dependency with
this Activity, the same amount of items will be added to
the UI queue. The operation lists of these items contain the
operation information reaching this Activity and the approach
of switching from this Activity to this Fragment. In Case 1,
we use the Java reﬂection mechanism as the switching method
by default.
Case 2 – Reaching an unvisited Fragment. There are two
ways for FragDroid to reach a new Fragment: clicking event