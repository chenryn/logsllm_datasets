### Verification Mechanisms and Hardware-Backed Solutions

The solution employs a Trusted Platform Module (TPM) for verification, but the specific verification mechanisms have not been publicly disclosed. Additionally, the role and exact tasks of the TPM remain unclear.

Hardware-backed solutions have also been utilized for similar introspection mechanisms. For instance, SPROBES [11] leverages ARM TrustZones to enforce invariants that detect malicious modifications to Linux kernel code during runtime. These invariants are used to evaluate various metadata to determine whether the system has been maliciously altered. The invariants are designed to ensure that any unintended modifications do not go undetected.

### Conclusion and Future Work

In this work, we introduced DRIVE, a novel approach that complements Memory Forensics (MF) and System Integrity Verification concepts. DRIVE aims to produce evidence of a system's state and attest to the reliability of a measured system's runtime configuration. Our approach enables continuous monitoring of long-running OS components, thereby reducing the attack surface for sophisticated adversaries by detecting attacks on volatile memory. The presented architecture is flexible and can be adapted in various ways. We demonstrated an exemplary instantiation of our proposed architecture and provided a security evaluation and metrics to showcase DRIVE's applicability.

Currently, we are enhancing the concept and technical details of DRIVE. Our current research targets the following major challenges:
1. Implementation and integration of DRIVE’s Measurement Agent (MA) into an isolated environment for secure measurement acquisition. Currently, an ARM TrustZone-based implementation and a Loadable Kernel Module (LKM) for extended hypervisor introspection are being developed and evaluated.
2. Support and integration of kernel hot-patching and runtime code patching mechanisms.
3. Measurement and verification of kernel-critical data structures targeted in Direct Kernel Object Manipulation (DKOM) based attacks.
4. Mechanisms to trigger measurements on security-critical events.
5. Performance improvements to reduce computational effort and time, especially during the measurement acquisition process.

### References

[1] S. Andersen and V. Abella. "Data Execution Prevention: Changes to Functionality in Microsoft Windows XP Service Pack 2, Part 3: Memory Protection Technologies." 2004.

[2] A. M. Azab et al. "HIMA: A Hypervisor-Based Integrity Measurement Agent." In: Computer Security Applications Conference, 2009. ACSAC’09. Annual. IEEE. 2009, pp. 461–470.

[3] A. Baliga, V. Ganapathy, and L. Iftode. "Detecting Kernel-Level Rootkits Using Data Structure Invariants." In: Dependable and Secure Computing, IEEE Transactions on 8.5 (2011), pp. 670–684.

[4] T. Bletsch et al. "Jump-Oriented Programming: A New Class of Code-Reuse Attack." In: Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security. ASIACCS ’11. Hong Kong, China: ACM, 2011, pp. 30–40. ISBN: 978-1-4503-0564-8. DOI: 10.1145/1966913.1966919. URL: http://doi.acm.org/10.1145/1966913.1966919.

[5] C. Chang et al. "Research on Dynamic Integrity Measurement Model Based on Memory Paging Mechanism." In: Discrete Dynamics in Nature and Society 2014 (2014).

[6] S. Checkoway et al. "Return-Oriented Programming Without Returns." In: Proceedings of the 17th ACM Conference on Computer and Communications Security. ACM. 2010, pp. 559–572.

[7] T. Committee et al. "Tool Interface Standard (TIS) Executable and Linking Format (ELF) Specification Version 1.2." In: TIS Committee (1995).

[8] J. Criswell et al. "Secure Virtual Architecture: A Safe Execution Environment for Commodity Operating Systems." In: ACM SIGOPS Operating Systems Review. Vol. 41. 6. ACM. 2007, pp. 351–366.

[9] CVEdetails.com. "Linux Kernel Vulnerabilities." https://www.cvedetails.com/product/47/Linux-Linux-Kernel.html?vendor_id=33.

[10] T. Garfinkel et al. "Terra: A Virtual Machine-Based Platform for Trusted Computing." In: ACM SIGOPS Operating Systems Review. Vol. 37. 5. ACM. 2003, pp. 193–206.

[11] X. Ge, H. Vijayakumar, and T. Jaeger. "Sprobes: Enforcing Kernel Code Integrity on the TrustZone Architecture." In: arXiv preprint arXiv:1410.7747 (2014).

[12] M. Gorman. Understanding the Linux Virtual Memory Manager. Prentice Hall Upper Saddle River, 2004.

[13] N. L. P. Jr et al. "Copilot—A Coprocessor-Based Kernel Runtime Integrity Monitor." In: USENIX Security Symposium. San Diego, USA. 2004, pp. 179–194.

[14] V. Katoch. "Whitepaper on Bypassing ASLR/DEP." http://www.exploit-db.com/wp-content/themes/exploit/docs/17914.pdf.

[15] C. H. Kim et al. "CAFE: A Virtualization-Based Approach to Protecting Sensitive Cloud Application Logic Confidentiality." In: Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security. ASIA CCS ’15. Singapore, Republic of Singapore: ACM, 2015, pp. 651–656. ISBN: 978-1-4503-3245-3. DOI: 10.1145/2714576.2714594. URL: http://doi.acm.org/10.1145/2714576.2714594.

[16] T. Kittel et al. "Code Validation for Modern OS Kernels." In: Workshop on Malware Memory Forensics (MMF). 2014.

[17] ld(1) Linux User’s Manual.

[18] J. R. Levine. Linkers and Loaders. 1st. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 1999. ISBN: 1558604960.

[19] M. H. Ligh et al. The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. John Wiley & Sons, 2014.

[20] P. A. Loscocco et al. "Linux Kernel Integrity Measurement Using Contextual Inspection." In: Proceedings of the 2007 ACM Workshop on Scalable Trusted Computing. STC ’07. Alexandria, Virginia, USA: ACM, 2007, pp. 21–29. ISBN: 978-1-59593-888-6. DOI: 10.1145/1314354.1314362. URL: http://doi.acm.org/10.1145/1314354.1314362.

[21] C. S. Ltd. "Whitepaper on Quadrooter." URL: https://www.checkpoint.com/resources/quadrooter-vulnerability-enterprise/.

[22] C. Mitchell. Trusted Computing. Springer, 2005.

[23] J. A. Pendergrass and K. N. McGill. "LKIM: The Linux Kernel Integrity Measurer." In: Johns Hopkins APL Technical Digest 32.2 (2013), p. 509.

[24] N. L. Petroni et al. "FATKit: A Framework for the Extraction and Analysis of Digital Forensic Data from Volatile System Memory." In: Digital Investigation 3.4 (2006), pp. 197–210.

[25] A. Prakash et al. "On the Trustworthiness of Memory Analysis—An Empirical Study from the Perspective of Binary Execution." In: Dependable and Secure Computing, IEEE Transactions on 12.5 (2015), pp. 557–570.

[26] A. Rein et al. "Trust Establishment in Cooperating Cyber-Physical Systems." In: Cybersecurity of Industrial Control Systems, Security of Cyber Physical Systems. 2015.

[27] R. Roemer et al. "Return-Oriented Programming: Systems, Languages, and Applications." In: ACM Transactions on Information and System Security (TISSEC) 15.1 (2012), p. 2.

[28] G. Roglia et al. "Surgically Returning to Randomized lib(c)." In: Computer Security Applications Conference, 2009. ACSAC ’09. Annual. 2009, pp. 60–69. DOI: 10.1109/ACSAC.2009.16.

[29] R. Sailer et al. "Design and Implementation of a TCG-Based Integrity Measurement Architecture." In: USENIX Security Symposium. Vol. 13. 2004, pp. 16–16.

[30] A. Seshadri et al. "SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes." In: Proceedings of Twenty-First ACM SIGOPS Symposium on Operating Systems Principles. SOSP ’07. Stevenson, Washington, USA: ACM, 2007, pp. 335–350. ISBN: 978-1-59593-591-5. DOI: 10.1145/1294261.1294294. URL: http://doi.acm.org/10.1145/1294261.1294294.

[31] R. Shapiro, S. Bratus, and S. W. Smith. "Weird Machines in ELF: A Spotlight on the Underappreciated Metadata." In: Presented as part of the 7th USENIX Workshop on Offensive Technologies. Washington, D.C.: USENIX, 2013. URL: https://www.usenix.org/conference/woot13/workshop-program/presentation/Shapiro.

[32] U. Steinberg and B. Kauer. "NOVA: A Microhypervisor-Based Secure Virtualization Architecture." In: Proceedings of the 5th European Conference on Computer Systems. ACM. 2010, pp. 209–222.

[33] J. Sylve. "Lime—Linux Memory Extractor." In: Proceedings of the 7th ShmooCon Conference. 2012.

[34] PaX Team. "PaX Address Space Layout Randomization (ASLR)." http://pax.grsecurity.net/docs/aslr.txt. 2003.

[35] Volatility Foundation. "Volatility Framework." URL: http://www.volatilityfoundation.org.

[36] P. Wagle, C. Cowan, et al. "StackGuard: Simple Stack Smash Protection for GCC." In: Proceedings of the GCC Developers Summit. Citeseer. 2003, pp. 243–255.

[37] Z. Wang and X. Jiang. "Hypersafe: A Lightweight Approach to Provide Lifetime Hypervisor Control-Flow Integrity." In: Security and Privacy (SP), 2010 IEEE Symposium on. IEEE. 2010, pp. 380–395.

[38] W. Xu et al. "From Collision To Exploitation: Unleashing Use-After-Free Vulnerabilities in Linux Kernel." In: Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. CCS ’15. Denver, Colorado, USA: ACM, 2015, pp. 414–425. ISBN: 978-1-4503-3832-5. DOI: 10.1145/2810103.2813637. URL: http://doi.acm.org/10.1145/2810103.2813637.

### Appendix

#### A. Micro-Benchmark Experiments

Table AT1 shows the detailed results discussed in Section 5.4. The metrics consist of multiple measurements taken from the implemented DRIVE LKM conducting a measurement process.

#### B. Technical Background

This section provides an overview of the related technical principles used in DRIVE. DRIVE measures system memory content and metadata. Therefore, it is deeply related to core low-level functionalities provided by the OS kernel's Memory Management (MM). Basic MM concepts are briefly introduced, particularly focusing on how the loading process utilizes MM and affects memory contents and metadata. Access permissions of Virtual Address Space (VAS) segments, basic memory sharing concepts, and the static and dynamic behavior of individual VAS segment sections are also discussed.

##### B.1 Loading Principle in Modern Operating Systems

Every component intended for execution on a computer system follows a well-known approach. Regardless of the specific software components, every CPU-based computation relies on data present in the system's main memory. While different architectures have different implementations, all modern architectures follow the same principle and are based on similar organization of the involved data.

###### B.1.1 Organization of Object Code

In Unix-based systems, the Executable and Linkable Format (ELF) standard defines the organizational structures of executables, shared libraries, and core dumps, referred to as object code in this work. Inside the ELF, different components of the object code are represented by different sections. Notable sections include:
1. The .text, .init, and .plt sections, which encapsulate executable instructions.
2. The .data, .rodata, and .bss sections, which hold initialized and uninitialized data.
3. The .got, a table organizing data structures related to function symbols.

Additionally, there are more sections in the ELF, such as those representing program and section headers, procedures, and symbol resolution tables. A comprehensive overview is given in [7]. Figure AF1 shows a user-space process ELF to VAS mapping example.

Once the section is loaded and resides in memory within the VAS, it is referred to as a segment. As shown, multiple related sections from the ELF are organized into a single segment. This relationship is specified in the section-to-segment mapping in the ELF header and can vary for each ELF.

###### B.1.2 Object Code Loading

Before object code instructions can be executed by the CPU, all necessary object code must reside in memory. Depending on the object code, different loaders are responsible for the loading process. Following the boot process, we briefly describe the loading process of an ELF, starting with the system's Bootloader. The result of the loading mechanism is depicted in Figure AF1.

**Figure AF1: ELF-File to VAS Mapping with Aid of Section to Segment Mappings**

```
ELF File
+-----------------+
| ELF Header      |
+-----------------+
| .plt            |
| .init           |
| .text           |
| .rodata         |
| ...             |
| .got            |
| .data           |
| .bss            |
| ...             |
+-----------------+

ELF Library
+-----------------+
| ELF Header      |
| ...             |
+-----------------+

Section to Segment
Mapping
+-----------------+
| Mapping Details |
+-----------------+

ELF in VAS
+-----------------+
| 0x00000000      |
| .text (r-x)     |
| .text (r-x)     |
| .data (rw-)     |
| .data (rw-)     |
| ...             |
| heap            |
| ...             |
| .text (r-x)     |
| lib .text (rw-) |
| .data (rw-)     |
| lib .data (rw-) |
| ...             |
| User-space (3GB)|
| Kernel-space    |
| (1GB)           |
| ...             |
| stack           |
| Kernel .text    |
| Kernel .data    |
| ...             |
| LKM .text       |
| LKM .data       |
| ...             |
| 0x7FFFFFFF      |
| 0x80000000      |
| 0xFFFFFFFF      |
+-----------------+
```

**Bootloader and Kernel Setup:**
- The Bootloader instructs the CPU to load the OS Kernel object code into memory at a fixed location.
- The Kernel takes complete control over the MM and initializes the Memory Management Unit (MMU).
- The Kernel sets up internal structures to organize mappings between physical and virtual memory (VM), specifically the Page Table [12].
- The VM is separated into Kernelspace and Userspace.
- The Kernel continues its execution until a Loadable Kernel Module (LKM) needs to be loaded.

**Kernel Module Loader:**
- The Kernel Module Loader (KML) loads the requested LKM ELF object code into memory and transforms the LKM into a ready-to-run state.
- During this process, dependencies between different LKMs are resolved.
- The KML inspects every unresolved symbol, resolves the symbol by determining the targeted Virtual Memory Address (VMA), and patches the determined target VMA directly into the in-memory object code instructions (relocation).
- After all transformations, the LKM is in a ready-to-run state and can be used as intended.
- The relocation processes are architecture-dependent and rely on the architecture-specific relocation types defined in the architecture's specifications found at http://refspecs.linuxbase.org/elf/.
- For example, for X86 64: R_X86_64_64, R_X86_64_32, R_X86_64_32S, R_X86_64_PC32, and PPC32: R_PPC_ADDR32, R_PPC_ADDR16_LO, R_PPC_ADDR16_HA, R_PPC_REL24. For ARM32, ARM64, and PPC64, there are many relevant relocation types.