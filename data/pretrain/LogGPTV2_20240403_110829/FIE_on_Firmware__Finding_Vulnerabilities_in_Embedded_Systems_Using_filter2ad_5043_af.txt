### Memory Safety Bugs in USB Drivers

Memory safety bugs have been identified in two USB drivers, comprising 18 vulnerabilities. These vulnerabilities occur when a USB protocol value, received from an external source, is used to control an index into an array. This can lead to adversarial reads or the ability to crash the firmware. One specific vulnerability in the HID Driver allows an attacker to inject arbitrarily long strings due to an unprotected `strcat` function. This not only enables the firmware to be crashed but also potentially leads to a complete compromise through control flow hijacking.

Two additional memory safety bugs are present in both programs, originating from the same source file. These bugs involve dereferencing a value read from flash, which, in our model, is considered untrusted. However, these bugs are unlikely to be exploitable in most settings.

### Peripheral Misuse Bug in TI Community Code Project

The TI community code project, controleasy, contains a peripheral misuse bug. This bug allows a read-only I/O port to be written to based on the value of another peripheral. Similar to the attacker-controlled reads in the USB code, this bug can be exploited by an attacker who can send data to PORT 1, causing the firmware to crash.

### Limitations of FIE

The evaluation in the previous section demonstrated FIE's effectiveness in both finding bugs and verifying their absence. However, FIE does have some limitations. The design philosophy of FIE emphasizes the value of sound and complete analysis, which is often feasible for embedded firmware. Nevertheless, it is evident that there are firmware programs for which complete analyses are intractable. Soundness is also relative to the symbolic execution framework, meaning that reported bugs may not arise in the firmware when run natively.

For example, some firmware in our corpus, such as Contiki, appear to have an intractably large number of reachable states. In such cases, FIE aims to provide the highest possible code coverage, but improving on the results might require different techniques. For instance, combining loop elision and improved state selection heuristics could be more effective than state pruning and memory smudging. Future work might explore incorporating these techniques into FIE.

### Sources of Imprecision in Analysis

Both when achieving complete analyses and when not, various sources of imprecision can lead to false positives or false negatives. During the development of FIE, we frequently encountered analysis errors due to bugs in the analysis software or misconfiguration (e.g., using the incorrect target architecture). These issues were subsequently fixed, and while we are unaware of any outstanding bugs in FIE, and all reported bugs in Section 5 have been manually verified, some analysis errors may still remain.

Imprecision can also arise from discrepancies between the firmware as symbolically executed in FIE and natively in deployment. We had to implement extensions to C that are (sometimes implicitly) defined by `msp430-gcc`. Inconsistencies between `msp430-gcc` and FIE were addressed, but some may persist. These C extensions differ among the three MSP430 compilers, so analyzing firmware written for IAR or CCS compilers (e.g., the USB drivers in our corpus) may result in analysis errors when using FIE. Despite this, FIE remains useful for finding vulnerabilities in such firmware programs, as demonstrated by the bugs found in the USB drivers.

Another source of imprecision is our most conservative analysis, which models peripherals and interrupt firing as adversarially controlled. This means FIE may explore states that do not occur in real executions, leading to false positives. Fixing such bugs is still encouraged as it reduces the potential for latent vulnerabilities. Moreover, it is unclear where to draw the line in terms of adversarial access to a chip. FIE is easily customizable to address such false positives or to adopt other environmental models for speed-ups.

Finally, FIE currently fails execution paths that include inline assembly. While we added explicit handlers for several inline assembly instructions (e.g., `nop`), complex assembly code constructs remain a challenge. Future work might investigate performing symbolic analysis starting with MSP430 assembly, similar to [7].

### Related Work

FIE is based on KLEE and builds upon the work of KLEEâ€™s predecessors such as EXE [11]. These prior systems target the generation of high-coverage test suites for non-embedded programs (e.g., Linux CoreUtils). As seen in previous sections, using KLEE with minimal porting provides poor coverage. Many systems that extend KLEE [2,9,13,28,31,36] do not target embedded systems, with the exception of KleeNet [28], which targets wireless sensor nodes running Contiki [35] on x86 platforms and thus does not apply to our setting of MSP430 firmware programs.

Concolic execution systems extend symbolic execution by concretizing values that cannot be handled efficiently by the constraint solver [14, 30]. Whole-system concolic execution tools like S2E [14] can execute external functions natively by concretizing symbolic arguments. However, this model of concretization is less applicable to our setting, where the firmware specifies all software and interacts only with hardware peripherals. For the latter, we can support concretization by returning concrete values and changing symbolic values to concrete ones.

SymDrive [26] builds on S2E to test Linux and FreeBSD kernel drivers without the need for actual hardware, addressing many of the same problems as FIE, including modeling hardware and dealing with polling loops. SymDrive uses static analysis to guide execution along deep paths and avoid loops, improving code coverage but not enabling complete analyses. Incorporating such static analysis techniques into FIE to increase code coverage in conjunction with state pruning and memory smudging is left for future work.

Pruning redundant states during analysis has been considered in various program analysis contexts [3, 5, 32]. RWset [6] extended the EXE [11] symbolic execution engine to track live variables and discard states if all live variable values have already been executed. Our state pruning approach is simpler and does not require auxiliary live variable analysis, which can be challenging in interrupt-driven code. The trade-off is that FIE may prune less aggressively. However, FIE goes further in limiting path explosion via memory smudging, which is effective even when variables within a loop are live.

There is a body of work on improving the performance of symbolic execution by merging similar states [23, 25]. State merging combines identical or similar active states, while state pruning compares active states to both active and prior states, enabling complete analysis. Whether these techniques are useful in conjunction is an open question.

Efforts have been made to improve the scalability of symbolic execution [7, 15, 29]. For example, Cloud9 speeds up symbolic execution by parallelizing the execution of multiple memory states across a cluster of commodity hardware. Such techniques are applicable to FIE, and future work may involve adopting them to improve FIE's performance for large firmware programs.

Finally, we are aware of two commercial tools relevant to FIE. Codenomicon [16] offers a network protocol fuzzing tool for embedded medical devices, targeting protocol parsing logic, a frequent source of vulnerabilities. FIE already supports rudimentary fuzzing and could perform network protocol fuzzing (or a mixture of fuzzing and symbolic execution) by implementing more detailed memory specs. Coverity [4] is a static analysis tool that targets several platforms, including the MSP430. While we have access to Coverity, their software license prevents head-to-head comparisons in published research.

### Conclusion

In this paper, we presented the design and implementation of FIE, a tool for performing symbolic-execution-based analysis of MSP430 firmware programs. It provides an extensible platform for finding security vulnerabilities and other kinds of bugs, and has proven effective in analyzing a large corpus of open-source MSP430 firmware programs. To increase code coverage in a way that supports the verification of security properties, we incorporated state pruning and memory smudging into FIE. We used FIE to verify memory safety for 53 firmware programs and found 21 distinct vulnerabilities, some of which appear to be remotely exploitable. This demonstrates that FIE is well-suited for small, simple firmware programs used in microcontrollers and is also useful for analyzing more complex firmware programs.

### Acknowledgements

We would like to thank Kevin Fu, Matt Renzelmann, and the anonymous reviewers for their extensive feedback on earlier drafts of this paper. This work was supported, in part, by DARPA and AFRL under contracts FA8650-10-C-7088 and CNS-1064944. The views, opinions, and/or findings contained herein are those of the authors and should not be interpreted as representing the official views or policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the Department of Defense.

### References

[References listed here as provided in the original text]

---

This version of the text is more structured, coherent, and professional, with clear headings and improved readability.