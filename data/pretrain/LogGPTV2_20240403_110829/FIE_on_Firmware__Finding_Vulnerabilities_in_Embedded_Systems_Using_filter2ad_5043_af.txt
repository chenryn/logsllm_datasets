from disjoint source ﬁles. The memory safety bugs in
the two USB drivers include 18 vulnerabilities in which
a USB protocol value (received from off-chip) ends up
controlling an index into an array, allowing adversarial
reads or the ability to crash the ﬁrmware. One of the vul-
nerabilities, in HID Driver, allows an adversary over the
network to inject arbitrarily long strings due to an unpro-
tected strcat. This allows crashing the ﬁrmware, but
may also lead to a complete compromise by way of con-
trol ﬂow hijacking. The ﬁnal two memory safety bugs are
present in both programs but arise from the same source
ﬁle. The bug dereferences a value read from ﬂash, which
in our model is untrusted but unlikely to be exploitable
in most settings.
The TI community code project controleasy has a pe-
ripheral misuse bug in which a read-only I/O port can be
written to based on the value of another peripheral. Like
the attacker-controlled reads in the USB code, this bug
can be used by an attacker that can send data to PORT 1
to cause the ﬁrmware to crash.
6 Limitations
The evaluation in the last section evidenced FIE’s effec-
tiveness at both ﬁnding bugs as well as verifying their
absence. Of course, FIE does have some limitations.
The design of FIE arises from a philosophy that sound
and complete analysis are valuable and can be feasible
for the embedded ﬁrmware often found in practice. How-
ever, it is simple to show that there exist ﬁrmware for
which complete analyses are intractable, and likewise
soundness is only with respect to the symbolic execu-
tion framework (it is possible that reported bugs may not
arise in the ﬁrmware when run natively, as discussed be-
low). Indeed some of the ﬁrmware in our corpus (e.g.,
Contiki) appear to have, in particular, an intractably large
number of reachable states. Here FIE attempts to provide
as high as possible code coverage, but improving on the
results reported in the last section might require different
techniques than currently used. For example, a combina-
tion of loop elision [14, 26] and improved state selection
heuristics might be more effective than state pruning and
memory smudging. Future work might therefore explore
incorporation of other techniques into FIE.
Both when achieving complete analyses and when
not, there exist various sources of imprecision in anal-
ysis that may lead to false positives or false negatives.
In developing FIE we often encountered analysis errors
due to bugs in the analysis software or misconﬁgura-
tion (e.g., using the incorrect target architecture almost
always yields false positives). These problems were sub-
sequently ﬁxed, and while we are unaware of any out-
standing bugs in FIE and have manually veriﬁed all the
bugs reported in Section 5, it could be that some analysis
errors remain.
Imprecision can also arise due to discrepancies be-
tween the ﬁrmware as symbolically executed in FIE and
natively in deployment. In building FIE, we had to im-
plement extensions to C that are (sometimes implicitly)
deﬁned by msp430-gcc. We encountered inconsistencies
between msp430-gcc and FIE, which were subsequently
ﬁxed, but some may remain. These C extensions also
differ among the three MSP430 compilers, and so an-
alyzing ﬁrmware written to work for the IAR or CCS
compilers (e.g., the USB drivers in our corpus) may give
rise to analysis errors when using FIE. Even so FIE can
still be useful for ﬁnding vulnerabilities in such ﬁrmware
programs, as the bugs found in the USB drivers shows.
As a ﬁnal source of imprecision, our most conserva-
tive analysis models peripherals and interrupt ﬁring as
adversarially controlled. This means that FIE may ex-
plore states that do not arise in real executions, and errors
ﬂagged due to such states would constitute false posi-
tives. We feel that ﬁxing even such bugs should be en-
couraged, since it reduces the potential for latent vulner-
abilities. Moreover, it is unclear where to draw the line
in terms of adversarial access to a chip. That said, FIE
is easily customizable should such false positives prove
burdensome, or to receive the speed-ups of other envi-
ronmental models.
Finally, we note that currently FIE fails execution
paths that include inline assembly. While we added some
explicit handlers for several inline assembly instructions
(e.g., nop), this approach would struggle with complex
assembly code constructs. Future work might investigate
performing symbolic analysis starting with MSP430 as-
sembly, similarly to [7].
476  22nd USENIX Security Symposium 
USENIX Association
14
7 Related Work
FIE is based off of KLEE and, in turn, builds off the work
of KLEE’s predecessors such as EXE [11]. These prior
systems target generation of high-coverage test suites for
non-embedded programs (e.g., Linux CoreUtils). As we
saw in previous sections, using KLEE with a minimal
amount of porting provides poor coverage. The many
systems that extend KLEE [2,9,13,28,31,36] do not target
embedded systems, with the exception of KleeNet [28].
It targets wireless sensor nodes running Contiki [35], but
only on x86 platforms, and so does not work for our set-
ting of MSP430 ﬁrmware programs.
Concolic execution systems extend symbolic execu-
tion by concretizing values that cannot be handled by
the constraint solver efﬁciently (or cannot be handled by
the constraint solver at all) [14, 30]. Whole-system con-
colic execution tools like S2E [14] can execute external
functions natively by concretizing symbolic arguments,
and then providing the concrete value in the call. Their
model of concretization makes less sense in our setting,
where we have a ﬁrmware that speciﬁes all software on
the system and interacts only with hardware peripherals.
For the latter, we can support concretization in the sense
that a memory speciﬁcation can return concrete values,
change symbolic values to concrete, etc.
SymDrive [26] builds off S2E to test Linux and
FreeBSD kernel drivers without the need for the ac-
tual hardware, and treats many of the same problems as
FIE, including modeling hardware, dealing with polling
loops, etc. SymDrive uses static analysis to help guide
execution along states that reach deep paths and to avoid
loops. This improves code coverage, but does not enable
complete analyses. We leave incorporating such static
analysis techniques into FIE, in order to increase code
coverage in conjunction with state pruning and memory
smudging, for future work.
Pruning redundant states during an analysis has been
considered before in a variety of program analysis con-
texts [3, 5, 32]. Closest to our work is RWset [6], which
extended the EXE [11] symbolic execution engine to
track live variables and to discard a state should the val-
ues of all live variables have already been executed upon.
Our state pruning approach is simpler and does not re-
quire an auxiliary live variable analysis (which can be
challenging in the face of interrupt-driven code). The
trade-off for this simplicity is that FIE may prune less
aggressively than possible. On the other hand, FIE goes
further than RWset in limiting path explosion via mem-
ory smudging, which is effective even when, for exam-
ple, variables written within a loop are live.
There is a body of work on improving the performance
of symbolic execution by merging similar states [23,25].
State merging seeks to combine identical (or similar) ac-
tive states, whereas state pruning compares active states
to both active and prior states. Only the latter enables
complete analysis. Whether the two techniques are use-
ful in conjunction is an interesting open question.
Much effort has gone into improving the scalability
of symbolic execution [7, 15, 29]. One such example
is Cloud9, which speeds symbolic execution by paral-
lelizing the execution of multiple memory states across
a cluster of commodity hardware. We note that such
techniques are applicable to FIE, and future work may
involve adopting such techniques to improve the perfor-
mance of FIE for large ﬁrmware programs.
Finally, we are aware of two commercial tools of po-
tential relevance to FIE. The ﬁrst, Codenomicon [16], of-
fers a network protocol fuzzing tool for embedded med-
ical devices. It therefore targets protocol parsing logic,
which is a frequent source of vulnerabilities. FIE already
supports rudimentary fuzzing, and could perform net-
work protocol fuzzing (or a mixture of fuzzing and sym-
bolic execution) by implementing more detailed memory
specs. Second is Coverity [4], a static analysis tool that
targets a number of platforms, including the MSP430.
While we have access to Coverity, their software license
unfortunately prevents head-to-head comparisons in pub-
lished research.
8 Conclusion
In this paper, we presented the design and implementa-
tion of FIE, a tool for performing symbolic-execution-
based analysis of MSP430 ﬁrmware programs. It pro-
vides an extensible platform for ﬁnding security vulner-
abilities and other kinds of bugs, and has proven effec-
tive in analyzing a large corpus of open-source MSP430
ﬁrmware programs. To increase code coverage in a way
that supports veriﬁcation of security properties, we incor-
porate into FIE the techniques of state pruning and mem-
ory smudging. We used FIE to verify memory safety for
53 ﬁrmware programs and elsewhere found 21 distinct
vulnerabilities, some of which appear to be remotely ex-
ploitable. All this shows that FIE is particularly well-
suited to the small, simple ﬁrmware programs often used
for microcontrollers and proves useful for analysis of
more complex ﬁrmware programs as well.
Acknowledgements
We would like to thank Kevin Fu, Matt Renzelmann and
the anonymous reviewers for their extensive feedback on
earlier drafts of this paper. This work was supported,
in part, by DARPA and AFRL under contracts FA8650-
10-C-7088 and CNS-1064944. The views, opinions,
and/or ﬁndings contained herein are those of the authors
and should not be interpreted as representing the ofﬁcial
views or policies, either expressed or implied, of the De-
fense Advanced Research Projects Agency or the Depart-
ment of Defense.
USENIX Association  
22nd USENIX Security Symposium  477
15
References
[1] Amazon. Amazon elastic compute cloud.
http://aws.
amazon.com/ec2, 2013. Last accessed Jun 2013.
[2] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley. AEG:
Automatic exploit generation. In Network and Distributed System
Security Symposium (NDSS), 2011.
[3] T. Ball, V. Levin, and S. K. Rajamani. A decade of software
model checking with SLAM. Commun. ACM, 54(7):68–76, July
2011.
[4] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem,
C. Henri-Gros, A. Kamsky, S. McPeak, and D. Engler. A few
billion lines of code later: using static analysis to ﬁnd bugs in the
real world. Commun. ACM, 53(2):66–75, Feb. 2010.
[5] D. Beyer, T. A. Henzinger, R. Jhala, and R. Majumdar. The soft-
ware model checker Blast: Applications to software engineering.
Int. J. Softw. Tools Technol. Transf., 9(5):505–525, Oct. 2007.
[6] P. Boonstoppel, C. Cadar, and D. Engler. RWset: Attacking path
explosion in constraint-based test generation. In C. Ramakrish-
nan and J. Rehof, editors, Tools and Algorithms for the Construc-
tion and Analysis of Systems, volume 4963 of Lecture Notes in
Computer Science, pages 351–366. Springer Berlin Heidelberg,
2008.
[7] D. Brumley, C. Hartwig, M. G. Kang, Z. Liang, J. Newsome,
P. Poosankam, D. Song, and H. Yin. BitScope: Automatically
dissecting malicious binaries. Technical report, In CMU-CS-07-
133, 2007.
[8] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. To-
wards automatic generation of vulnerability-based signatures. In
Proceedings of the 2006 IEEE Symposium on Security and Pri-
vacy (SP), pages 2–16. IEEE Computer Society, 2006.
[9] S. Bucur, V. Ureche, C. Zamﬁr, and G. Candea. Parallel symbolic
execution for automated real-world software testing. In EuroSys,
pages 183–198, 2011.
[10] C. Cadar, D. Dunbar, and D. Engler. KLEE: unassisted and auto-
matic generation of high-coverage tests for complex systems pro-
grams. In Proceedings of the 8th USENIX conference on Operat-
ing systems design and implementation (OSDI), pages 209–224.
USENIX Association, 2008.
[11] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R.
Engler. EXE: automatically generating inputs of death. In ACM
Conference on Computer and Communications security, pages
322–335. ACM, 2006.
[12] S. Checkoway, D. McCoy, B. Kantor, D. Anderson, H. Shacham,
S. Savage, K. Koscher, A. Czeskis, F. Roesner, and T. Kohno.
Comprehensive experimental analyses of automotive attack sur-
faces. In Proceedings of USENIX Security, 2011.
[13] V. Chipounov and G. Candea. Reverse engineering of binary de-
vice drivers with RevNIC. In EuroSys, pages 167–180, 2010.
[14] V. Chipounov, V. Kuznetsov, and G. Candea. S2E: a platform for
in-vivo multi-path analysis of software systems. SIGPLAN Not.,
46(3):265–278, Mar. 2011.
[15] L. Ciortea, C. Zamﬁr, S. Bucur, V. Chipounov, and G. Candea.
Cloud9: a software testing service. SIGOPS Oper. Syst. Rev.,
43(4):5–10, Jan. 2010.
[16] Codenomicon.
Codenomicon defensics.
http://www.
codenomicon.com, 2013. Last accessed Jun 2013.
[17] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado.
Bouncer: securing software by blocking bad input. In Symposium
on Operating System Principles (SOSP), pages 117–130, 2007.
[18] A. Cui, M. Costello, and S. J. Stolfo. When ﬁrmware modiﬁca-
tions attack: A case study of embedded exploitation. In Network
and Distributed System Security Symposium (NDSS), 2013.
[19] A. Cui and S. J. Stolfo. A quantitative analysis of the insecu-
rity of embedded network devices: results of a wide-area scan.
In Annual Computer Security Applications Conference (ACSAC),
pages 97–106. ACM, 2010.
[20] W. Frisby, B. Moench, B. Recht, and T. Ristenpart. Security
analysis of smartphone point-of-sale systems. In Proceedings of
the 6th USENIX conference on Offensive Technologies (WOOT),
pages 3–3, 2012.
[21] D. Halperin, T. Heydt-Benjamin, B. Ransford, S. Clark, B. De-
fend, W. Morgan, K. Fu, T. Kohno, and W. Maisel. Pacemakers
and implantable cardiac deﬁbrillators: Software radio attacks and
zero-power defenses. In IEEE Symposium on Security and Pri-
vacy (SP), pages 129–142, 2008.
[22] D. Halperin, T. Kohno, T. Heydt-Benjamin, K. Fu, and W. Maisel.
Security and privacy for implantable medical devices. Pervasive
Computing, IEEE, 7(1):30–39, 2008.
[23] T. Hansen, P. Schachte, and H. Søndergaard. State joining and
splitting for the symbolic execution of binaries. In Runtime Veriﬁ-
cation, 9th International Workshop, RV 2009, pages 76–92, 2009.
[24] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, S. Check-
oway, D. McCoy, B. Kantor, D. Anderson, H. Shacham, et al.
Experimental security analysis of a modern automobile. In 2010
IEEE Symposium on Security and Privacy, pages 447–462. IEEE,
2010.
[25] V. Kuznetsov, J. Kinder, S. Bucur, and G. Candea. Efﬁcient state
merging in symbolic execution. In PLDI, pages 193–204, 2012.
[26] M. J. Renzelmann, A. Kadav, and M. M. Swift. Symdrive: testing
drivers without devices. In Proceedings of the 10th USENIX con-
ference on Operating Systems Design and Implementation, pages
279–292. USENIX Association, 2012.
[27] I. Rouf, R. Miller, H. Mustafa, T. Taylor, S. Oh, W. Xu,
M. Gruteser, W. Trappe, and I. Seskar. Security and privacy
vulnerabilities of in-car wireless networks: a tire pressure mon-
itoring system case study. In Proceedings of the 19th USENIX
conference on Security, 2010.
[28] R. Sasnauskas, O. Landsiedel, M. H. Alizai, C. Weise,
S. Kowalewski, and K. Wehrle. Kleenet: Discovering insidious
interaction bugs in wireless sensor networks before deployment.
In ACM/IEEE International Conference on Information Process-
ing in Sensor Networks (IPSN), Stockholm, Sweden, April 2010.
[29] P. Saxena, P. Poosankam, S. McCamant, and D. Song. Loop-
extended symbolic execution on binary programs.
In Inter-
national Symposium in Software Testing and Analysis (ISSTA),
pages 225–236, 2009.
[30] K. Sen, D. Marinov, and G. Agha. CUTE: A concolic unit test-
ing engine for C. In Proceedings of the 10th European software
engineering conference held jointly with 13th ACM SIGSOFT
international symposium on Foundations of software engineer-
ing, ESEC/FSE-13, pages 263–272, New York, NY, USA, 2005.
ACM.
[31] A. Slowinska, T. Stancescu, and H. Bos. Howard: A dynamic
excavator for reverse engineering data structures. In Network and
Distributed System Security Symposium (NDSS), 2011.
[32] U. Stern and D. L. Dill. Improved probabilistic veriﬁcation by
hash compaction. In In Advanced Research Working Conference
on Correct Hardware Design and Veriﬁcation Methods, pages
206–224. Springer-Verlag, 1995.
[33] Texas
Instruments.
projects website.
http://e2e.ti.com/group/microcontrollerprojects/
m/msp430microcontrollerprojects/default.aspx. Last
accessed Jun 2013.
Microcontroller
[34] Texas Instruments. MSP430 for security applications. http:
//www.ti.com/mcu/docs/mcuorphan.tsp?contentId=
33485&DCMP=MSP430&HQS=Other+OT+430security, January
2012.
[35] The Contiki Project. Contiki. http://www.contiki-os.org/.
Last accessed Jun 2013.
[36] C. Zamﬁr and G. Candea. Execution synthesis: a technique
for automated software debugging. In EuroSys, pages 321–334,
2010.
478  22nd USENIX Security Symposium 
USENIX Association
16