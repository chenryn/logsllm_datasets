pre-shared keys 455
.preventDefault() method 104
PRF (pseudorandom function) 475
INDEX
548
principle of defense in depth 66
principle of least authority (POLA) 45–46, 90, 
250, 295
principle of least privilege 46
principle of separation of duties 84
Privacy Enhanced Mail (PEM) 80
private-use IP address 363
privilege escalation attacks 95–97
privilege separation 341
processResponse method 242, 413
prompt=login parameter 262
prompt=none parameter 262
Proof Key for Code Exchange (PKCE) 236–237
property attribute 354
PROTECTED header 470
pseudorandom function 425
PSK (pre-shared keys) 458–463, 467, 490, 492
clients 462–463
implementing servers 460–461
supporting raw PSK cipher suites 464
with forward secrecy 465–467
PskClient 494
pskId variable 494
PskServer 493
PSKTlsClient 462, 464
PSKTlsServer class 460, 495
public clients 227
public key encryption algorithms 195
public key infrastructure (PKI) 369, 409, 479
public keys 251–254
public suffix list 128
pw_hash column 73
Q
query language 8
QueryBuilder class 270
QUIC protocol (Quick UDP Internet 
Connections) 442
quotas 24
R
rainbow table 75
random number generator (RNG) 157
ratcheting 482–484
RateLimiter class 67
rate-limiting 19, 24–26
answers to pop quiz questions 25–26
for availability 64–69
raw PSK cipher suites 463–464
raw public keys 455
RBAC (role-based access control) 274–281
determining user roles 279–280
dynamic roles 280–281
mapping roles to permissions 276–277
static roles 277–278
RCE (remote code execution) 48
read() method 194, 213, 252, 254, 325–326
readMessage method 359
read-only memory (ROM) 480
readOnlyRootFileSystem 347
realms 277
receive() method 446
Recipient Context 499
Recipient object 470
recvBuf 446
redirect URIs 235–236
redirect_uri parameter 234
ReDoS (regular expression denial of service) 
attack 51
Referer header 78, 233, 263, 301–302, 311, 
314
Referrer-Policy header 301
reflected XSS 53–54
reflection attacks 188, 471
refresh tokens 237–238
registerable domain 127
registering users in Natter API 74–75
regular expression denial of service (ReDoS) 
attack 51
Relying Party (RP) 260–261
remote attestation 481
remote code execution (RCE) 48
Remote Method Invocation (RMI) 7
Remote Procedure Call (RPC) 7
RemoteJWKSet class 252–253
removeItem(key) method 165
replay 506–510
replay attacks 187–188, 496, 498
repudiation 18
request object 34, 509
requested_token_type parameter 432
request.session() method 116
request.session(false) method 120
request.session(true) method 119–120
requireAuthentication method 92, 138, 162
requirePermission method 270, 276, 279, 283
requireRole filter 276
requireScope method 221
resource owner (RO) 227
Resource Owner Password Credentials (ROPC) 
grant 228
resource parameter 432
resource server (RS) 227
resources 14, 282
Response object 34
response_type parameter 231
response_type=device_code parameter 516
REST (REpresentational State Transfer) 8
INDEX
549
REST APIs 34–35
avoiding replay in 506–510
capability-based security and 297–302, 318
capabilities as URIs 299
capability URIs for browser-based clients
311–312
combining capabilities with identity
314–315
hardening capability URIs 315–318
Hypertext as Engine of Application State 
(HATEOAS) 308–311
using capability URIs in Natter API 303–307
creating new space 34–35
wiring up endpoints 36–39
Retry-After header 67, 96
reverse proxy 10
Revocation endpoint 529
REVOKE command 46
revoke method 182, 203, 239, 248
revoking tokens 209–213
access tokens 248
implementing hybrid tokens 210–213
RMI (Remote Method Invocation) 7
RNG (random number generator) 157
RO (resource owner) 227
role_permissions table 277, 279
@RolesAllowed annotation 276
ROM (read-only memory) 480
root CA 369, 397
ROPC (Resource Owner Password Credentials) 
grant 228
routes 36
row-level security policies 179
RowMapper method 85
RP (Relying Party) 260–261
RPC (Remote Procedure Call) 7
RS (resource server) 227
RSA1_5 algorithm 257
RSA-OAEP algorithm 257
RSA-OAEP-256 algorithm 257
RtlGenRandom() method 157
runAsNonRoot 346
rwd (read-write-delete) permissions 309
S
salt 75
same-origin policy (SOP) 54, 105–106, 147
SameSite attribute 121
SameSite cookies 127–129, 152
SameSite=lax 129
SameSite=strict 129
sandboxing 347
satisfyExact method 325
Saver API 297
scope claim 254
scope field 242
scope parameter 432, 514
scoped tokens 218–224
adding to Natter 220–222
difference between scopes and 
permissions 223–224
scopes 219
Scrypt 72
search method 272
secret key cryptography 195
SecretBox class 198–200, 490
SecretBox.encrypt() method 198
SecretBox.key() method 200
secretName 380
secrets management services 420–422
Secure attribute 121
secure element chip 477
__Secure prefix 123
Secure Production Identity Framework for Every-
one (SPIFFE) 407–408
Secure Socket Layer (SSL) 79
secure() method 81, 350, 392
SecureRandom class 157–158, 160, 180, 236, 329, 
350, 443
SecureTokenStore interface 207–209, 323
security areas 8–12
security domain 277
security goals 14–16
Security Information and Event Management 
(SIEM) 83
security mechanisms 19–26
access control and authorization 22–23
audit logging 23–24
encryption 20
identification and authentication 21–22
rate-limiting 24–26
security token service (STS) 432
securityContext 346
SecurityParameters class 495
SELECT statement 46
selectFirst method 354
selectors 346
self-contained tokens 181–214
encrypting sensitive attributes 195–205
authenticated encryption 197
authenticated encryption with NaCl 198–200
encrypted JWTs 200–202
using JWT library 203–205
handling token revocation 209–213
JWTs 185–194
generating standard 190–193
JOSE header 188–190
standard claims 187–188
validating signed 193–194
INDEX
550
self-contained tokens (continued)
storing token state on client 182–183
using types for secure API design 206–209
self-signed certificate 80
Sender Context 499
sensitive attributes
encrypting 195–205
authenticated encryption 197
authenticated encryption with NaCl 198–200
encrypted JWTs 200–202
using JWT library 203–205
protecting 177–180
separation of duties 84
Serializable framework 48
serialize() method 191, 203
servers
implementing DTLS 450–452
implementing PSK for 460–461
server-side request forgery (SSRF) attacks 190, 
361–365
service accounts
authenticating using JWT bearer grant 395–396
client credentials grant 387–388
service API calls 428–435
OAuth2 token exchange 431–435
phantom token pattern 429–431
service mesh
for TLS 370–374
mutual TLS (mTLS) 406–409
services, Kubernetes 338–339
service-to-service APIs 383–436
API keys and JWT bearer authentication
384–385
JWT bearer grant for OAuth2 389–396
client authentication 391–393
generating JWTs 393–395
service account authentication 395–396
managing service credentials 415–428
avoiding long-lived secrets on disk 423–425
key and secret management services 420–422
key derivation 425–428
Kubernetes secrets 415–420
mutual TLS authentication 396–414
certificate-bound access tokens 410–414
client certificate authentication 399–401
how TLS certificate authentication 
works 397–398
mutual TLS with OAuth2 409–410
using service mesh 406–409
verifying client identity 402–406
OAuth2 client credentials grant 385–388
service API calls in response to user 
requests 428–435
OAuth2 token exchange 431–435
phantom token pattern 429–431
session cookie authentication 101–145
building Natter login UI 138–142
implementing logout 143–145
in web browsers 102–108
calling Natter API from JavaScript 102–104
drawbacks of HTTP authentication 108
intercepting form submission 104
serving HTML from same origin 105–108
preventing Cross-Site Request Forgery 
attacks 125–138
double-submit cookies for Natter API
133–138
hash-based double-submit cookies 129–133
SameSite cookies 127–129
session cookies 115–125
avoiding session fixation attacks 119–120
cookie security attributes 121–123
validating 123–125
token-based authentication 109–115
implementing token-based login 112–115
token store abstraction 111–112
session cookies 115–125
avoiding session fixation attacks 119–120
cookie security attributes 121–123
validating 123–125
session fixation attacks 119–120
session.fireAllRules() method 286
session.invalidate() method 143
sessionStorage object 164
Set-Cookie header 115
setItem(key, value) method 165
setSSLParameters() method 456
setUseClientMode(true) method 444
SHA-256 hash function 133
sha256() method 171
side channels 477
sidecar container 338
SIEM (Security Information and Event 
Management) 83
signature algorithms 254–256
Signature object 421
SignedJwtAccessToken 265
SignedJwtAccessTokenStore 252
SignedJwtTokenStore 192, 208
single logout 260
single sign-on (SSO) 258–259
single-page apps (SPAs) 54, 312
site-local IPv6 addresses 363
SIV (Synthetic Initialization Vector) mode 475
SIV-AES 475
slow_down 516
smart TVs 512
SOP (same-origin policy) 54, 105–106, 147
SpaceController class 34, 36–37, 75, 94, 278, 304
spaceId 41
INDEX
551
space_id field 277
:spaceId parameter 92
spaces 34–35
spaces database 35
spaces table 32, 90
Spark route 36
Spark.exception() method 51
SPAs (single-page apps) 54, 312
SPIFFE (Secure Production Identity Framework 
for Everyone) 407–408
sponge construction 473
spoofing prevention 70–77
authenticating users 75–77
creating password database 72–74
HTTP Basic authentication 71
registering users in Natter API 74–75
secure password storage with Scrypt 72
SQLi (SQL injection) attacks 40, 45–47, 270
src attribute 167
SSL (Secure Socket Layer) 79
SSL offloading 10
SSL passthrough 379
SSL re-encryption 10
SSL termination 10
ssl-client-cert header 400, 402, 404, 413
ssl-client-issuer-dn header 402
ssl-client-subject-dn header 402
ssl-client-verify header 402, 404, 413
SSLContext 444, 450
SSLContext.init() method 443
SSLEngine class 443–444, 456–457, 461
sslEngine.beginHandshake() method 446
sslEngine.getHandshakeStatus() method 446
SSLEngine.unwrap() method 447
sslEngine.unwrap(recvBuf, appData) 446
sslEngine.wrap(appData, sendBuf) 445
SSLParameters 456
SSLSocket class 443–444
SSO (single sign-on) 258–259
SSRF (server-side request forgery) attacks 190, 
361–365
state parameter 232, 263
stateless interactions 115
static groups 272
static roles 277–278
staticFiles directive 106
sticky load balancing 505–506
Storage interface 165
strict transport security 82
STRIDE (spoofing, tampering, repudiation, infor-
mation disclosure, denial of service, elevation 
of privilege) 18
String equals method 134
STROBE framework 473