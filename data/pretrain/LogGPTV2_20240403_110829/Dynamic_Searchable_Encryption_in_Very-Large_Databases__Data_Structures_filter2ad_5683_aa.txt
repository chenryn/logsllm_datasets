title:Dynamic Searchable Encryption in Very-Large Databases: Data Structures
and Implementation
author:David Cash and
Joseph Jaeger and
Stanislaw Jarecki and
Charanjit S. Jutla and
Hugo Krawczyk and
Marcel-Catalin Rosu and
Michael Steiner
Dynamic Searchable Encryption in Very-Large
Databases: Data Structures and Implementation
David Cash∗, Joseph Jaeger∗, Stanislaw Jarecki†, Charanjit Jutla‡,
Hugo Krawczyk‡, Marcel-C˘at˘alin Ros¸u‡, and Michael Steiner‡
∗Rutgers University
†University of California, Irvine
‡IBM Research
Abstract—We design and implement dynamic symmetric
searchable encryption schemes that efﬁciently and privately
search server-held encrypted databases with tens of billions of
record-keyword pairs. Our basic theoretical construction sup-
ports single-keyword searches and offers asymptotically optimal
server index size, fully parallel searching, and minimal leakage.
Our implementation effort brought to the fore several factors
ignored by earlier coarse-grained theoretical performance anal-
yses, including low-level space utilization, I/O parallelism and
goodput. We accordingly introduce several optimizations to our
theoretically optimal construction that model the prototype’s
characteristics designed to overcome these factors. All of our
schemes and optimizations are proven secure and the information
leaked to the untrusted server is precisely quantiﬁed. We evaluate
the performance of our prototype using two very large datasets:
a synthesized census database with 100 million records and
hundreds of keywords per record and a multi-million webpage
collection that includes Wikipedia as a subset. Moreover, we
report on an implementation that uses the dynamic SSE schemes
developed here as the basis for supporting recent SSE advances,
including complex search queries (e.g., Boolean queries) and
richer operational settings (e.g., query delegation), in the above
terabyte-scale databases.
I.
INTRODUCTION
BACKGROUND. Searchable symmetric encryption (SSE) al-
lows one to store data at an untrusted server and later search
the data for records (or documents) matching a given keyword
while maintaining privacy. Many recent works [3]–[5], [7], [9],
[14], [15], [17], [19], [21] studied SSE and provided solutions
with varying trade-offs between security, efﬁciency, and the
ability to securely update the data after it has been encrypted
and uploaded. These constructions aim at practical efﬁciency,
in contrast to generic cryptographic tools like homomorphic
encryption or multiparty computation which are highly secure
but not likely to be efﬁcient in practice.
Large data sizes motivate storage outsourcing, so to be
useful an SSE scheme must scale well. Existing SSE schemes
employ only symmetric cryptography operations and standard
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1) is(cid:1) granted(cid:1) provided(cid:1) that(cid:1) copies(cid:1) bear(cid:1) this(cid:1) notice(cid:1) and(cid:1) the(cid:1) full(cid:1) citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1) Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1) was(cid:1) prepared(cid:1) within(cid:1) the(cid:1) scope(cid:1) of(cid:1) employment.
NDSS(cid:1) ’14,(cid:1) 23-26(cid:1) February(cid:1) 2014,(cid:1) San(cid:1) Diego,(cid:1) CA,(cid:1) USA
Copyright(cid:1) 2014(cid:1) Internet(cid:1) Society,(cid:1) ISBN(cid:1) 1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:23)(cid:21)
data structures and thus show potential for practical efﬁ-
ciency, but obstacles remain. While most constructions have
theoretically optimal search times that scale only with the
number of documents matching the query, the performance of
their implementations on large datasets is less clear. Factors
like I/O latency, storage utilization, and the variance of real-
world dataset distributions degrade the practical performance
of theoretically efﬁcient SSE schemes. One critical source of
inefﬁciency in practice (often ignored in theory) is a complete
lack of locality and parallelism: To execute a search, most prior
SSE schemes sequentially read each result from storage at a
pseudorandom position, and the only known way to avoid this
while maintaining privacy involves padding the server index
to a prohibitively large size.
CONTRIBUTIONS. We give the ﬁrst SSE implementation that
can encrypt and search on datasets with tens of billions
of record/keyword pairs. To design our scheme, we start
with a new, simple, theoretical SSE construction that uses a
generic dictionary structure to already achieve an asymptotic
improvement over prior SSE schemes, giving optimal leakage,
server size, search computation, and parallelism in search. This
starting point can be seen as a generalization and simpliﬁcation
of the more ad-hoc techniques of [3]. We show how to make
the scheme dynamic, meaning that the data can be changed
after encryption: Our scheme can easily support additions to
the data, as well as deletions via revocation lists.
Because the scheme uses a generic dictionary that itself
has no security properties, it allows for several extensions and
modiﬁcations with only small changes to the security proofs.
In particular, our implementation effort showed that disk I/O
utilization remained a bottleneck which prevented scaling; so
we extend our basic construction to improve locality and
throughput. These extensions preserve privacy with slightly
different leakages that we analyze with formal security proofs.
Below we describe the techniques behind results in more detail,
starting with the new theoretical scheme that we extend later,
and then compare our results to prior work.
BASIC CONSTRUCTION. Our scheme is very simple (see
Figure 2): It associates with each record/keyword pair a pseu-
dorandom label, and then for each pair stores the encrypted
record identiﬁer with that label in a generic dictionary data
structure. We derive the labels so that the client, on input
a keyword to query, can compute a keyword-speciﬁc short
key allowing the server to search by ﬁrst recomputing the
labels, then retrieving the encrypted identiﬁers from the dic-
tionary, and ﬁnally decrypting the matching encrypted record
identiﬁers. The only information leaked to the server by the
encrypted index (other than the indexes of records matching a
query) is the number of items in the dictionary, i.e. the number
of record/keyword pairs in the data. This scheme is easy to
implement correctly (and with parallel searching) because we
make no security demands on the dictionary thus allowing
instantiations as applications demand.
EXTENSIONS FOR EXTERNAL STORAGE. To compute the
results of a keyword search with r matches, our basic scheme
requires r retrievals from the dictionary for pseudorandom
labels. Assuming O(1) cost of a dictionary retrieval, this is
asymptotically optimal. However, in implementations this will
be far from optimal when the dictionary is stored in external
memory (i.e., a block device like a HDD), because each
random-looking retrieval will generate a disk read. This is in
contrast to a plaintext system which could store all of the
matches in a single contiguous area of memory.
In view of this reality we extend our scheme to use external
storage more carefully while maintaining privacy. We ﬁrst
show how to securely “pack” related results together via a
padding strategy to reduce the number of dictionary retrievals.
We found that even this modiﬁcation was too slow for
the datasets we targeted, and in particular we noticed that
real data-sets exhibit extreme variability in the number of
matches for a keyword: There were typically many keywords
matching very few documents, then some keywords matching a
signiﬁcant fraction of the entire database. Our padding strategy
thus becomes unsatisfactory because the (many) keywords
matching only a few results create a lot of padding, and the
searches that return a large number of results still trigger a
large number of dictionary retrievals.
To address this we introduce further modiﬁcations that
replace dictionary reads with array reads when processing large
numbers of results. These modiﬁcations result in a slightly
different, but intuitively acceptable (and perhaps even better)
leakage proﬁle that we discuss below.
EXTENSION FOR UPDATES. We observe that our scheme easily
extends to allow for additions to the data after it has been
uploaded. We only have to arrange that the client can compute
the labels for the new data to be added, which it sends to the
server for to be added to the dictionary. This requires either
client state or communication proportional to the total number
of keywords ever added or deleted. To support deletions we
maintain a (pseudorandom) revocation list at the server that
allows to ﬁlter out results that should be deleted; To actually
reclaim space we must re-encrypt periodically.
OTHER APPLICATIONS. Recent constructions of SSE support-
ing more complex queries [3] and multi-client settings [13]
use SSE as a black-box. Thus our data structures and asso-
ciated operations (including support for dynamic databases)
are readily available to support terabyte-scale databases in
these much richer/complex encrypted-search settings (see end
of Section II).
IMPLEMENTATION. Our implementation remains efﬁcient on
two orders of magnitude larger datasets than the most scalable
previous work [3], resulting in the ﬁrst implementation of
SSE on terabyte-scale databases containing tens of billions
of indexed record/keyword pairs. We report on our prototype
design and experimental results in Section V.
COMPARISON TO PRIOR WORK. In Figure 1 we compare our
basic theoretical scheme to prior work. The basic scheme
Πbas generalizes and greatly simpliﬁes an approach implicit
in [3], which complicated the analysis by demanding security
properties of the underlying data structures.
For a database with N record/keyword pairs, our basic
scheme Πbas produces an encrypted index of optimal size
O(N ), leaks only the size N and the matching record id’s,
and processes a search with r results in optimal O(r) time,
assuming O(1)-cost for dictionary retrievals. Searching is
trivial to parallelize with any number of processors.
Most prior schemes leak additional information, like the
number of unique keywords, the size of the largest number
of matches for a keyword, and so on. Some of these works
also pad their encrypted indexes to be (worst-case) quadratic
in their input size, which is totally impractical for large
datasets. A notable issue with most prior work was a difﬁculty
with parallelism: Other than [3], parallel searching was only
achieved by two works that needed quadratic padding. Works
like [7] required walking through an encrypted linked list and
were not parallelizable at all. See the “Ind Leak”, “Index Size”,
and “Search Time” columns in Figure 1.
the server learned, say,
The only prior dynamic schemes either had an impracti-
cally large index [14] or leaked the structure of the added
documents [15], meaning that
the
pattern of which keywords appear in which documents as they
are added, which is a severe form of leakage compared to the
usual SSE leakage of facts like the total database size. Our
dynamic extension maintains the optimal index size and only
leaks basic size information (and not document structure, as
in [15]). Unlike prior dynamic schemes, ours does not reclaim
space after each deletion - rather, we envision applications
where deletions are relatively rare or, more generally, where
a periodic complete re-encryption of the data is performed
(re-encryption may be desirable to mitigate the leakage from
updates with any dynamic SSE scheme).
MORE ON RELATED WORK. The notion of SSE we consider
has its origins in work by Song, Wagner, and Perrig [19].
Several schemes since have improved upon the security and
efﬁciency offered by the original schemes. The most similar
to our construction is that of Chase and Kamara [5], and Cash
et al [3]. Chase and Kamara also uses a dictionary, but in
a different way and with an impractical level of padding for
large datasets. Cash et al implements a scheme similar to our
basic construction, but do not address updates nor, as we show
in Section V-E, does their approach achieve the same level of
practical scalability.
There is also a related line of work on searchable public-
key encryption starting with [2], all of which do not scale
due to linear-time searching. The version of SSE we deal
with inherently leaks the identiﬁers of documents that match a
query, as well as when a query is repeated. It is possible to hide
even this information using private information retrieval [6] or
oblivious RAM [10]. Several recent improvements to oblivious
2
Scheme
CGKO’06-1 [7]
CGKO’06-2 [7]
CK’10 [5]
LSDHJ’10 [21]
KO’12 [17]
KPR’12 [15]
KP’13 [14]
Basic (Πbas here)
Basic Adp (Πro
bas here)
bas , Πdyn,ro
bas
Basic Dyn (Πdyn
here) NonAd, Adro
Security
NonAd
Ad
Ad
Ad
Ad(UC)
Adro
Adro
NonAd, Adro
Ad
Ind Leak
Dyn.?
Dyn Leak
Index Size
Search Time/Comm
Dyn. Comm
m, N
M n
m, n, M
m, n
n, M
m, N
m, n
N
N
N
No
No
No
Yes
No
Yes
Yes
No
No
Yes
—
—
—
no proof
—
O(N + m)
O(M n)
O(M n)
O(mn)
O(M n)
EP(Wid) O(N + m)
minimal
—
—
minimal
O(mn)
O(N )
O(N )
O(N )
O(r), O(1)
O(r), O(r)
O(r), O(r)