title:PreInfer: Automatic Inference of Preconditions via Symbolic Analysis
author:Angello Astorga and
Siwakorn Srisakaokul and
Xusheng Xiao and
Tao Xie
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
PreInfer: Automatic Inference of Preconditions via Symbolic Analysis
Angello Astorga∗, Siwakorn Srisakaokul∗, Xusheng Xiao†, Tao Xie∗
{aastorg2, srisaka2, taoxie}@illinois.edu,{xusheng.xiao}@case.edu
∗University of Illinois at Urbana-Champaign
†Case Western Reserve University
Abstract—When tests fail (e.g., throwing uncaught excep-
tions), automatically inferred preconditions can bring various
debugging beneﬁts to developers. If illegal inputs cause tests
to fail, developers can directly insert the preconditions in
the method under test to improve its robustness. If legal
inputs cause tests to fail, developers can use the preconditions
to infer failure-inducing conditions. To automatically infer
preconditions for better support of debugging, in this paper,
we propose PREINFER, a novel approach that aims to infer
accurate and concise preconditions based on symbolic analysis.
Speciﬁcally, PREINFER includes two novel techniques that
prune irrelevant predicates in path conditions collected from
failing tests, and that generalize predicates involving collection
elements (i.e., array elements) to infer desirable quantiﬁed
preconditions. Our evaluation on two benchmark suites and
two real-world open-source projects shows PREINFER’s high
effectiveness on precondition inference and its superiority over
related approaches.
Keywords-precondition inference; dynamic symbolic execu-
tion; symbolic analysis; path conditions;
I. INTRODUCTION
With recent research advances in automatic test generation
based on dynamic symbolic execution [1], [2], powerful test
generation tools are now at the ﬁngertips of developers in
industry. For example, Pex [2], [3] has been shipped as
IntelliTest [4] in Visual Studio 2015 and 2017 Enterprise
Edition, beneﬁting numerous developers. These test gener-
ation tools allow developers to automatically generate tests
for the code under test, comprehensively covering various
program behaviors to achieve high code coverage. However,
even with these tools, developers still need to perform time-
consuming debugging tasks when unexpected failing tests
are generated. They must determine whether the inputs are
reasonably expected to be witnessed in real scenarios; if
so, the developers must isolate the causes of the failures,
possibly through more tests.
To assist such debugging tasks, automatically inferred
preconditions bring various beneﬁts. When tests containing
illegal inputs fail, developers can directly insert the precon-
ditions in the method under test to improve its robustness.
When tests containing legal inputs fail, developers can use
the preconditions to further infer failure-inducing conditions.
Generally automatic inference of preconditions aims to infer
preconditions that are sufﬁcient1 and necessary2. However,
to be conveniently usable by developers, preconditions
should also be succinct (e.g., including a minimal number
of predicates). More succinct preconditions typically incur
less runtime overhead during runtime monitoring, and also
incur less human effort during manual inspection.
To automatically infer preconditions, in this paper, we
present PREINFER, a novel approach based on symbolic
analysis that aims to guard against failures exposed by
the generated failing tests without blocking passing tests.
PREINFER leverages symbolic analysis to capture an ex-
ecution path with path condition ρ, which is a sequence
of conjuncted predicates (φ1, φ2, . . . , φ|ρ|) collected from
the executed branch conditions in the path. Note that the
variables appearing in each predicate in ρ are program
inputs, i.e., symbolic inputs, instead of local variables inside
the program body. In particular, PREINFER takes as input
a test suite containing both passing and failing tests. It
uses path conditions from failing tests (in short as failing
path conditions) to infer a succinct condition α that is a
generalization (i.e., summary) of the witnessed unsafe states.
To avoid overgeneralizing, PREINFER uses path conditions
from passing tests to identify states that should not satisfy
α. Naturally, PREINFER outputs ¬α as the inferred precon-
dition.
To infer the condition α, we choose the divide-and-
conquer strategy by disjuncting these failing path conditions
to form α. Unfortunately, such disjunction introduces an α
with a large number of predicates, compromising the goal of
obtaining a succinct precondition. Alternatively, to aim for
a sufﬁcient and necessary precondition, we can always keep
only the last-branch predicate, i.e., φ|ρ|, for each failing
path condition and disjunct these reduced path conditions
to produce α. φ|ρ| in a failing path condition ρ for path
p corresponds to the p-assertion-violating condition (e.g.,
the assertion-violating condition in path p) at the assertion-
1Preconditions are sufﬁcient if their satisfaction ensures that the pro-
gram’s execution does not produce runtime failures: sufﬁcient preconditions
block all illegal inputs, but can possibly block legal inputs.
2Preconditions are necessary if their violation ensures that the program’s
execution produces runtime failures: necessary preconditions block only
illegal inputs but may not block all of them.
2158-3927/18/$31.00 ©2018 IEEE
DOI 10.1109/DSN.2018.00074
678
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:29:38 UTC from IEEE Xplore.  Restrictions apply. 
1 public int example(string[] s, int a, int b,
int c, int d) {
2
4
/*ground-truth precondition for exception
3 ¬(((c > 0 ∧ d + 1 > 0) ∨ (c ≤ 0 ∧ d > 0)) ∧ s == null)
at Lines 14-15*/
/*ground-truth precondition for exception
5 ¬((((c > 0 ∧ d + 1 > 0) ∨ (c ≤ 0 ∧ d > 0)) ∧ s! = null)∧
at Lines 16-17*/
∃i, (i  0)
b++;
if (c > 0)
d++;
if (b > 0)
sum++;
if (d > 0) {
assert(s != null);/*implicit assert:
NullReference exception*/
for (var i = 0; i  0

c > 0

b + 1 > 0

d + 1 > 0

s! = null

0  0

c > 0

b + 1 > 0

d + 1 > 0

s! = null

0  0
corresponds to the branch (d > 0) at Line 13 because
d gets increased at Line 10. To block this failing test
(s: {null}, a: 1, b: 0, c: 1, d: 0) (along with
all other possible failing tests reaching that same program
location such as tf3 : (s: {‘‘a’’,‘‘a’’, null}, a:
1, b: 0, c: 1, d: 0) ), we can use the ground-truth
precondition (Line 5) to ﬁlter out the tests.
To infer the precondition candidate, PREINFER ﬁrst ap-
plies our technique of dynamic predicate pruning to remove
predicates (from the path condition) that are irrelevant for
helping achieve location reachability and expression preser-
vation. Informally,
the predicates that preserve location
reachability are in a c-depend relation w.r.t. the last-branch
predicate φ|ρ|, and the predicates that preserve expression
preservation are in a d-impact relation w.r.t. φ|ρ|(formally
deﬁned in Section III-A). For each failing path condition
ρf1, our technique employs a backward analysis starting
from φ|ρ|, to detect the predicates that belong in the reduced
(cid:3), which ultimately composes α. For ρf1
path condition, ρf1
shown in Table I, our analysis determines that the last-
branch predicate s[0] == null should not be pruned since
it expresses the p-assertion-violating condition. Our analysis
proceeds by analyzing constraints 0  0 in that order. The results of the analysis can be
seen in the last two columns of Table I.
For brevity, we illustrate only how our technique of
dynamic predicate pruning prunes a > 0, derived from a
conditional c. Note that b + 1 > 0 is pruned similarly. Our
technique prunes a > 0 if the analysis can establish a > 0
as irrelevant. A predicate is irrelevant if it is “c-depend”
(i.e., not in a c-depend relation) and also is “d-impact”
(i.e., not in a d-impact relation). To check whether a > 0
is c-depend, our analysis considers another preﬁx-sharing
path condition from an available passing test tp1 that also
reaches the same last-branch predicate (i.e., a passing path
that shares the same preﬁx as tf1 before c but takes c’s
the other branch not taken by tf1). In this case, the path
condition for tp1 is a  0 ∧ b > 0 ∧ d + 1 > 0 ∧ s! =
null∧ 0  s.length. Our analysis
establishes that a > 0 is c-depend since a path from either
a > 0 or a  0 is d-impact, our analysis considers another preﬁx-
sharing path condition from an available failing test tf2 that
also reaches the last-branch predicate. In this case, the path
condition for tf2 is a > 1 ∧ c > 0 ∧ b > 0 ∧ d + 1 > 0 ∧ s! =
null ∧ 0  0 is d-impact since a path from either a > 0
or a > 1 does not change the symbolic expression at the