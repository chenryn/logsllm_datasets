现在我们再回过头来看check函数，check函数接收一个参数，为vm结构体。check函数短一些，所以全部分析一遍吧
    __int64 __fastcall check(__int64 a1)
    {
      int v1; // eax
      char v2; // al
      char v4; // [rsp+19h] [rbp-27h]
      unsigned __int8 v5; // [rsp+1Dh] [rbp-23h]
      unsigned __int8 v6; // [rsp+1Eh] [rbp-22h]
      char v7; // [rsp+20h] [rbp-20h]
      unsigned __int8 v8; // [rsp+21h] [rbp-1Fh]
      unsigned __int8 v9; // [rsp+22h] [rbp-1Eh]
      unsigned int v10; // [rsp+24h] [rbp-1Ch]
      int v11; // [rsp+28h] [rbp-18h]
      unsigned int v12; // [rsp+2Ch] [rbp-14h]
      unsigned __int8 *v13; // [rsp+30h] [rbp-10h]
      v10 = 0;
      v13 = *(unsigned __int8 **)(a1 + 0x50); //PC
      v11 = 1;
      while ( v11 )
      {
        ++v10;
        v1 = (unsigned __int8)take_value(v13); //取标志位
        if ( v1 == 9 ) //标志位为9，对应not
        {
          if ( (unsigned __int8)take_value(v13 + 1) > 7u )//如果第二个字节的值大于7，寄存器范围报错，因此只有八个寄存器
            sub_CAA("Invalid register!");
          v13 += 2;
        }
        /*not
        else if ( v2 == 9 )
        {
          v9 = take_value(v30 + 1);
          *(_QWORD *)(8LL * v9 + a1) = ~*(_QWORD *)(8LL * v9 + a1);
          v30 += 2;
        }not只有两个字节，将通过第二个字节找到的寄存器的值取反
        */
        else if ( v1 > 9 )
        {
          if ( v1 == 0xC )//标志位为12，对应jmp
          {
            v13 += 2;//无操作，PC指针后移两个字节
          }
          /*jmp
          else if ( v2 > 11 )
          {
              ..........
              else if ( v2  0xC )
          {
            if ( v1 == 0xE )//标志位为14，对应nop
            {
              ++v13;//无操作，PC指针后移两个字节
            }
            else if ( v1  0x1000 )
                sub_CAA("Invalid size!");//限制重新分配的栈空间大小
              *(_DWORD *)(a1 + 0x5C) = v12 >> 3;
              *(_DWORD *)(a1 + 0x58) = 0;
              v13 += 5;
            }
            /*alloc
            if ( v2 == 13 )
            {
              v29 = sub_D13((unsigned int *)(v30 + 1));//取第二字节
              free((void *)(*(_QWORD *)(a1 + 0x48) - 8LL * *(unsigned int *)(a1 + 0x5C)));//将原来的栈空间free掉
              (//vm结构体
              *(_QWORD *)(a1 + 0x40) = malloc(a2);
                *(_QWORD *)(a1 + 0x48) = *(_QWORD *)(a1 + 0x40) + 8LL * (a2 >> 3);
                *(_QWORD *)(a1 + 0x40) = *(_QWORD *)(a1 + 0x48);
                *(_DWORD *)(a1 + 0x5C) = a2 >> 3;
                )
              set_stack(a1, v29);//重新设定大小为v29的栈空间
              v30 += 5;//PC指针后移
            }
            */
            else
            {
              if ( v1 != 255 )
    LABEL_67:
                sub_CAA("Invalid code!");
              v11 = 0;
            }
          }
          else if ( v1 == 0xA )//标志位为10，对应push
          {
            v4 = take_value(v13 + 1);//取第二字节
            if ( v4 != 1 && v4 )//如果第二字节不为1且不为0
              sub_CAA("Invalid code!");
            if ( *(_DWORD *)(a1 + 88) >= *(_DWORD *)(a1 + 92) )//如果栈数值大于最大数据量
              sub_CAA("Invalid code!");
            if ( v4 == 1 )//如果第二字节为1
            {
              v13 += 10;//PC指针后移
            }
          /*push
          else if ( v2 > 9 )
          {
            if ( (unsigned __int8)take_value(v30 + 1) == 1 ) //如果第二字节为1
            {
              v31 = take_value_QWORD((__int64)(v30 + 2)); //取第三部分，一个八字节数
              *(_QWORD *)(a1 + 0x40) -= 8LL;//栈顶降低八字节
              **(_QWORD **)(a1 + 0x40) = v31;//将这个八字节数压入栈中
              v30 += 10;//PC指针后移，1+1+8=10
            }
            else//如果第二字节不为1
            {
              v8 = take_value(v30 + 2);取第三字节
              *(_QWORD *)(a1 + 0x40) -= 8LL;栈顶降低八字节
              **(_QWORD **)(a1 + 0x40) = *(_QWORD *)(a1 + 8LL * v8);//将通过v8指定的寄存器的值压入栈中
              v30 += 3;
            }
            ++*(_DWORD *)(a1 + 58);//栈的数据数量加一
          }
          */
            else//如果第二字节不为1
            {
              if ( (unsigned __int8)take_value(v13 + 2) > 7u )//如果第三字节大于7
                sub_CAA("Invalid register!");
              v13 += 3;
            }
            ++*(_DWORD *)(a1 + 88);
          }
          else//如果标志位为11，对应pop
          {
            if ( !*(_DWORD *)(a1 + 88) )//如果栈为空
              sub_CAA("Invalid code!");
            v13 += 2;//PC指针后移
            --*(_DWORD *)(a1 + 88);//栈数据减一
          }
        }
        else if ( v1 == 4 )//如果标志位为4，对应mov
        {
          v2 = take_value(v13 + 1);//取第二字节
          if ( v2 & 1 || v2 & 4 ) //如果第二字节为1或4
          {
            if ( (unsigned __int8)take_value(v13 + 2) > 7u )//如果寄存器超范围
              sub_CAA("Invalid register!");
            v13 += 11;
          }
          else//如果第二字节不为1或4
          {
            if ( !(v2 & 8) && !(v2 & 0x10) && !(v2 & 0x20) )//如果第二字节也不为8或0x10或0x20
              sub_CAA("Invalid code!");
            v5 = take_value(v13 + 2);//取第三字节
            v6 = take_value(v13 + 3);//取第四字节
            if ( v5 > 7u || v6 > 7u )//如果寄存器超范围
              sub_CAA("Invalid register!");
            v13 += 4;
          }
        }
        /*mov
          else
          {
            v3 = take_value(v30 + 1);//取第二个字节
            if ( v3 & 1 ) //第二字节为1
            {
              v4 = (__int64 *)(8LL * (unsigned __int8)take_value(v30 + 2) + a1);取第三字节指定的寄存器的值
              *v4 = take_value_QWORD((__int64)(v30 + 3));//将寄存器中的值指向的地址赋值为一个八字节数
              v30 += 11;//PC指针后移
            }
            else if ( v3 & 4 )//第二字节为4
            {
              v20 = take_value(v30 + 2);//取第三字节
              v33 = take_value_QWORD((__int64)(v30 + 3));//取八字节数
              *(_QWORD *)(8LL * v20 + a1) = take_value_QWORD(v33);//将一个寄存器赋值为这个数
              v30 += 11;
            }
            else if ( v3 & 8 )//第二字节为8
            {
              v19 = take_value(v30 + 2);//取第三字节
              *(_QWORD *)(8LL * v19 + a1) = *(_QWORD *)(8LL * (unsigned __int8)take_value(v30 + 3) + a1);//将一个寄存器中的值赋给另一个寄存器
              v30 += 4;
            }
            else if ( v3 & 0x10 )//第二字节为0x10
            {
              v17 = take_value(v30 + 2);//取第三字节
              v18 = take_value(v30 + 3);//取第四字节
              v32 = take_value_QWORD(*(_QWORD *)(8LL * v18 + a1));//取v18指定的寄存器的值
              *(_QWORD *)(8LL * v17 + a1) = take_value_QWORD(v32);//将v32指向的地址中的值赋给v17指定的寄存器
              v30 += 4;
            }
            else
            {
              if ( !(v3 & 0x20) )//第二字节为0x20
                sub_CAA("Invalid code!");
              v16 = take_value(v30 + 2);取第三字节
              **(_QWORD **)(8LL * v16 + a1) = *(_QWORD *)(8LL * (unsigned __int8)take_value(v30 + 3) + a1);//将第三字节指向的寄存器中的值赋给v16指定的寄存器的值指向的地址
              v30 += 4;
            }
          }
        */
        else if ( v1 > 4 )//剩下的就不说了
        {
          if ( v1 != 5 )
            goto LABEL_18;
          v13 += 2;
        }
        else
        {
          if ( v1  7u )
              sub_CAA("Invalid register!");
            v13 += 11;
          }
          else
          {
            if ( v7 )
              sub_CAA("Invalid code!");
            v8 = take_value(v13 + 2);
            v9 = take_value(v13 + 3);
            if ( v8 > 7u || v9 > 7u )
              sub_CAA("Invalid register!");
            v13 += 4;
          }
        }
      }
      *(_DWORD *)(a1 + 0x5C) = 0x100;
      *(_DWORD *)(a1 + 0x58) = 0;
      return v10;
    }
vm结构体如下
    typedef struct{
        uint64_t r0;
        uint64_t r1;
        uint64_t r2;
        uint64_t r3;
        uint64_t r4;
        uint64_t r5;
        uint64_t r6;
        uint64_t r7;
        uint64_t* rsp;
        uint64_t* rbp;
        uint8_t* pc;
        uint32_t stack_size;
        uint32_t stack_cap;
    }vm;
分析完check，我们知道寄存器的范围被限定了，不允许我们越界读写，但其中的jmp功能并没有做任何check，而且在vm_start函数中，先分配的pc段，再分配的stack段，stack段在高地址，两个段分别是两个chunk，chunk之间因为presize的存在会有一段空字符，因此这个check函数其实只检查了PC段，stack段是没有做任何检查的。因此我们可以将先将code压入栈中，然后再跳到栈中执行，这样就没有check了。
暂且就分析这些，exp就看ruan师傅的吧，我这里将所有的函数和指令都分析一遍，这样无论是自己复现还是调试别人的exp也应该不会一脸懵逼了，调试起来会快一些。
## 总结
复现几题vmpwn之后感觉人都变佛系了许多，逆向指令十分考研耐心和细心，最好是一边分析一边做注释，慢一点也没关系，以免因代码量太大，分析完之后再回头看又不知道是什么了。
参考链接: