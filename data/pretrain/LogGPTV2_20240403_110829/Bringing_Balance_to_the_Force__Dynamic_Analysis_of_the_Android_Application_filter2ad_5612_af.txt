code analysis. This can lead to wrong results, as we have
demonstrated for some of ARF’s results. Feeding back our
observations, future static analysis can be improved with this
new expert knowledge.
Veriﬁability of Static Analysis Results. Being able to verify
the permission mappings from static analysis solutions is
crucial to the development of their approaches, for example,
by having direct feedback that conﬁrms the results and avoids
huge manual efforts for result veriﬁcation. As an example,
PScout [11] followed this general advice, but their veriﬁcation
was based on only a heuristic evaluation that was generally
imprecise. A tool like DYNAMO that leverages advances in
dynamic testing and runtime instrumentation can ﬁll this gap.
This is exempliﬁed by 76.1% automatically conﬁrmed cases
by DYNAMO and the extended and new APIs that have been
previously overlooked and whose root cause analysis yielded
valuable insights for static analysis.
Further, being able to identify the location of the security
checks, the order of checks, the paths that lead to them, and
the resolved variables used in them is crucial to properly
analyze and understand the framework. This information is
easily collected by DYNAMO for the executed paths but poses
a huge challenge for static analysis. For instance, one of the
wrong assumptions that lead to false positives in ARF (i.e.,
whitelistAppTemporarily) stems from not being able to
resolve the caller’s identity that is used to enforce a permission.
The imprecision started with the authors assuming that the call
from the deputy API to the target API is done over Binder IPC,
which would cause the permission check in the target API to be
done against the deputy’s identity, while the runtime behaviour
showed that the permission is still enforced against the app’s
identity (i.e., no permission re-delegation). Inspection of the
code showed that although the call from the deputy to the
target followed the general IPC pattern, it is actually handled
locally as both deputy and target share the same process.
Complexity of Access Control in Android. Existing works,
including DYNAMO, have focused on permissions and other
security checks in the middleware, and we have seen how
different checks interact with each other, e.g., in our analysis of
inconsistencies in access control (see Section V-C). However,
access control on Android also extends to the kernel using
Linux DAC and SELinux MAC. For instance, although a
service might seemingly be unprotected in the application
framework, SELinux might prevent calls to this service from
unprivileged processes. First approaches based on static anal-
ysis to model a holistic view of the access control on Android
exist [32], but considering the complexity of such holistic
models and the inherent limitations of the analyses from which
they retrieve their data, we argue that adding dynamic analysis
helps in reﬁning such models of Android’s access control.
We also observed that not all reported permissions are
required for accessing an API. For example, some APIs check
for permissions that are only used to select an execution path
or to populate the result with more data. We identify those
permission checks when no security exception is ﬁred, and we
found three patterns of how they are used: (1) The scope of the
result is changed or reduced. (2) A mock or a default value is
returned. (3) The execution aborts silently if the invoked API
has a void return type. Those patterns complicate both static
and dynamic analysis since the effect of permissions can only
be judged from side-effects and path constraints.
Improving Static Analysis. Similar to how our design of
DYNAMO proﬁted from prior experience of static analysis
(e.g., path sensitivity or security checks beyond permissions),
our results can proﬁt future static analysis. First, we found that
the order of checks and their placement in the method is useful
information to our inconsistency analysis. For example, we
were able to easily exclude candidate paths leading to the same
sink when two paths enforced similar checks before calling
the sink. Without the location and order of the checks, we
would have to manually inspect the code to see if one path is
enforcing the check after calling the sink (i.e., differs in access
control for the sink). In fact, not being able to argue about the
order of the checks was a limitation of ARF [29]. Second,
resolving the identity that is used in checks is generally a
limitation of static solutions. In our permission mapping, we
annotated each check with the identity used in it, including
permissions enforced after clearing the caller’s identity. This
gives insights into which functionality of a service is guarded
by the caller’s privileges and which functionality is executed as
deputy on the caller’s behalf. Lack of such information (e.g.,
13
lack of data ﬂow analysis) can create a faulty understanding
of how system services interact with each other. Third, com-
promises for following IPC calls, such as limiting the analysis
to ﬁrst entry point [28] or improperly connecting calls [12],
[5], reduced the completeness of the results. Despite current
efforts [10], bridging IPC is still one of the unsolved challenges
in static analysis of the application framework.
Alternative Approaches. Modeling the security policy of the
application framework is a non-trivial task. The difﬁculty stems
from the sheer size of the framework (aggravated by the
closed-source modiﬁcations by OEMs), the different protection
mechanisms that need to be combined in a comprehensive
model (e.g., permissions, cross-user checks, etc.), and layers
(Java and native code). Modeling this policy via manual
reverse-engineering is not scalable and shown to be error-
prone even for experienced security analysts (Section V-B).
Approaches for automatic placement of authorization hooks, as
known for the Linux kernel [54], [53], [60], [19], are also not
feasible as they require a clear knowledge of what constitutes
a protected resource, which is not available in Android’s
application framework despite prior efforts [12], [47]. As such,
we argue that static and dynamic analysis are currently the best
candidates of the available approaches to study the framework.
Nevertheless, we advise symbolic execution [41] as a possible
addition to address use-cases that are challenging to dynamic
analysis, such as analyzing event-driven security checks that
cannot be triggered dynamically because of unsatisﬁed state.
Code Coverage. We found the inherent code coverage problem
of dynamic analysis not to pose a blocker for building permis-
sion mappings that are as complete as mappings built using
static analysis. This is attributed to the fact that security checks
take precedent to sanity checks and logic, and hence do not
necessitate high code coverage. However, for future use-cases
that need higher code coverage, our prototypical implemen-
tation has great potential to be extended, e.g., guidance from
static analysis or symbolic execution results.
Limitations. Only after we conducted our evaluation, we
found that more APIs could have been discovered by re-
solving multi-level services [38]. Moreover, deriving the se-
curity policy from the invocation results is incomplete. We
manually veriﬁed over 300 APIs out of 1,292 reported APIs
for Android 6 and found some APIs with security checks
that were overlooked by the association rules encoded in the
Policy Builder. Since manual veriﬁcation of all APIs is out
of scope, the exact FN rate is currently unclear. Moreover,
dynamic testing is generally time-consuming, and DYNAMO is
not different (e.g., building permission mappings took multiple
weeks on our setup). Lastly, DYNAMO requires the tested
device to be rooted or Android being built in debugging mode.
VII. CONCLUSIONS
We presented DYNAMO, our tool for analyzing the security
policy of Android’s application framework. It is based on
well-known dynamic testing techniques for Java and native
system APIs, considering path-sensitivity, order as well as
the location of security checks, and additional key contextual
information (e.g., the subject’s identity). We applied DYNAMO
to four prominent use-cases from the literature and by taking
a synoptical view on the results, we were able to conﬁrm,
complement, and refute previous results. Root cause analysis
of the discrepancies between prior and our results provided
insights and new expert knowledge to improve both static and
dynamic analysis in the future. We see further potential to ap-
ply dynamic analysis to Android’s middleware, such as testing
compliance of OEM images or scanning for vulnerabilities.
Acknowledgements. We like to thank our anonymous review-
ers for their valuable comments. We also like to thank the
authors of Arcade [5] and ARF [29] for their discussion with
us regarding the root-cause analysis after we shared our results
with them. We especially thank Arcade’s authors for updating
their mapping following our discussion. We also like to thank
Oliver Schranz for his valuable feedback and insights on the
early implementation of DYNAMO.
REFERENCES
[1] Cuttleﬁsh Virtual Android Devices, 2020 (Last visited: Sep 20, 2020).
[Online]. Available: https://source.android.com/setup/create/cuttleﬁsh
[2] Randoop: Automatic unit test generation for Java, 2020 (Last visited:
Sep 20, 2020). [Online]. Available: https://randoop.github.io/randoop/
[3] WalaWiki: T.J. Watson Libraries for Analysis, 2020 (Last visited: Sep
20, 2020). [Online]. Available: http://wala.sourceforge.net/wiki/index.
php/Main Page
[4] Y. Aafer, J. Huang, Y. Sun, X. Zhang, N. Li, and C. Tian, “AceDroid:
Normalizing diverse android access control checks for inconsistency
detection,” in 25th Annual Network and Distributed System Security
Symposium (NDSS’18). The Internet Society, 2018.
[5] Y. Aafer, G. Tao, J. Huang, X. Zhang, and N. Li, “Precise android API
protection mapping derivation and reasoning,” in 25th ACM Conference
on Computer and Communication Security (CCS’18). ACM, 2018.
[6] Y. Aafer, X. Zhang, and W. Du, “Harvesting inconsistent security
conﬁgurations in custom android roms via differential analysis,” in 25th
USENIX Security Symposium (SEC’16). USENIX Association, 2016.
[7] A. Amin, A. Eldessouki, M. Magdy, N. Abdeen, H. Hindy, and
I. Hegazy, “Androshield: Automated android applications vulnerability
detection, a hybrid static and dynamic analysis approach,” Information,
vol. 10, 10 2019.
[8] P. Anderson, “The use and limitations of static-analysis tools to improve
software quality,” CrossTalk-Journal of Defense Software Engineering,
vol. 21, 06 2008.
[9] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, and K. Rieck,
“Drebin: Effective and explainable detection of android malware in
your pocket,” in 21st Annual Network and Distributed System Security
Symposium (NDSS’14). The Internet Society, 2014.
[10] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for android
apps,” ACM SIGPLAN Notices, vol. 49, 06 2014.
[11] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “Pscout: analyzing
the android permission speciﬁcation,” in 19th ACM Conference on
Computer and Communication Security (CCS’12). ACM, 2012.
[12] M. Backes, S. Bugiel, E. Derr, P. McDaniel, D. Octeau, and S. Weisger-
ber, “On demystifying the android application framework: Re-visiting
android permission speciﬁcation analysis,” in 25th USENIX Security
Symposium (SEC’16). USENIX Association, 2016.
[13] M. Backes, S. Bugiel, C. Hammer, O. Schranz, and P. von Styp-
Rekowsky, “Boxify: Full-ﬂedged app sandboxing for stock android,” in
24th USENIX Security Symposium (SEC’15). USENIX Association,
2015.
[14] C. Cao, N. Gao, P. Liu, and J. Xiang, “Towards analyzing the input
validation vulnerabilities associated with android system services,” in
31st Annual Computer Security Applications Conference (ACSAC’15).
ACM, 2015.
14
[15] A. Damodaran, F. D. Troia, C. A. Visaggio, T. H. Austin, and M. Stamp,
“A comparison of static, dynamic, and hybrid analysis for malware
detection,” J. Comput. Virol. Hacking Tech., vol. 13, no. 1, pp. 1–12,
2017.
[16] A. Dawoud and S. Bugiel, Dynamo: Dynamic Analysis of the Android
Application Framework, 2020 (Last visited: Nov 17, 2020). [Online].
Available: https://github.com/abdawoud/Dynamo
[17] L. Deshotels, C. Carabas, J. Beichler, R. Deaconescu, and W. Enck,
“Kobold: Evaluating decentralized access control for remote nsxpc
methods on iOS,” in 41st IEEE Symposium on Security and Privacy
(S&P ’18).
IEEE, 2020.
[18] A. Desnos, G. Gueguen,
and S. Bachmann, Androguard’s
documentation, 2020 (Last visited: Sep 20, 2020). [Online]. Available:
https://androguard.readthedocs.io/en/latest
[19] A. Edwards, T. Jaeger, and X. Zhang, “Runtime veriﬁcation of autho-
rization hook placement for the linux security modules framework,”
in 9th ACM Conference on Computer and Communication Security
(CCS’02). ACM, 2002.
[20] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. A. Wagner, “Android
permissions demystiﬁed,” in 18th ACM Conference on Computer and
Communication Security (CCS’11). ACM, 2011.
[21] H. Feng and K. G. Shin, “Understanding and defending the binder attack
surface in android,” in 32nd Annual Computer Security Applications
Conference (ACSAC’16). ACM, 2016.
[22] Google, Android Security 2017 Year In Review, 2018 (Last visited:
Sep 20, 2020). [Online]. Available: https://source.android.com/security/
reports/Google Android Security 2017 Report Final.pdf
[23] ——,
2020
(Last
Avail-
able: https://android.googlesource.com/platform/system/core/+/master/
libcutils/include/private/android ﬁlesystem conﬁg.h
Filesystem
2020).
Conﬁg,
[Online].
AOSP
visited:
Android
Sep
20,
[24] ——, Documentation for app developers, 2020 (Last visited: Sep 20,
2020). [Online]. Available: https://developer.android.com/docs
[25] ——, TrustManager Class, 2020 (Last visited: Sep 20, 2020). [Online].
Available: https://android.googlesource.com/platform/frameworks/base/
+/android-10.0.0 r27/core/java/android/app/trust/TrustManager.java#
194
[26] ——, Work Proﬁles, 2020 (Last visited: Sep 20, 2020). [Online].
Available: https://developer.android.com/work/managed-proﬁles
[27] A. Gorla, I. Tavecchia, F. Gross, and A. Zeller, “Checking app behavior
against app descriptions,” in Proceedings of the 36th International
Conference on Software Engineering (ICSE ’14). ACM, 2014.
[28] S. A. Gorski III, B. Andow, A. Nadkarni, S. Manandhar, W. Enck,
E. Bodden, and A. Bartel, “Acminer: Extraction and analysis of autho-
rization checks in android’s middleware,” in 9th ACM Conference on
Data and Application Security and Privacy (CODASPY’19). ACM,
2019.
[29] S. A. Gorski III and W. Enck, “ARF: identifying re-delegation vul-
nerabilities in android system services,” in 12th ACM Conference on
Security and Privacy in Wireless and Mobile Networks (WiSec’19).
ACM, 2019.
[30] Y. Gu, Y. Cheng, L. Ying, Y. Lu, Q. Li, and P. Su, “Exploiting
android system services through bypassing service helpers,” in 12th
International Conference on Security and Privacy in Communication
Networks (SecureComm’16). Springer, 2016.
[31] M. Harbach, M. Hettig, S. Weber, and M. Smith, “Using personal
examples to improve risk communication for security & privacy de-
cisions,” in Proceedings of the SIGCHI Conference on Human Factors
in Computing Systems (CHI ’14). ACM, 2014.
[32] G. Hernandez, D. Tian, A. Yadav, B. Williams, and K. Butler, “Big-
MAC: Fine-grained policy analysis of android ﬁrmware,” in 25th
USENIX Security Symposium (SEC’20). USENIX Association, 2020.
[33] H. Huang, S. Zhu, K. Chen, and P. Liu, “From system services freezing
to system server shutdown in android: All you need is a loop in an app,”
in 22nd ACM Conference on Computer and Communication Security
(CCS’15). ACM, 2015.
[34] A. K. Iannillo, R. Natella, D. Cotroneo, and C. Nita-Rotaru, “Chizpur-
ﬂe: A gray-box android fuzzer for vendor service customizations,”
in 28th International Symposium on Software Reliability Engineering
(ISSRE’17).
IEEE, 2017.
15
[35]
J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster,
and T. Millstein, “Dr. android and mr. hide: Fine-grained permissions
in android applications,” in 2nd Workshop on Security and Privacy in
Smartphones and Mobile Devices (SPSM ’12). ACM, 2012.
[36] H. Jiao, X. Li, L. Zhang, G. Xu, and Z. Feng, “Hybrid detection
using permission analysis for android malware,” in 10th International
International Conference on Security and Privacy in Communication
Networks (SecureComm ’14), J. Tian, J. Jing, and M. Srivatsa, Eds.
Springer, 2014.
J. Lin, B. Liu, N. Sadeh, and J. I. Hong, “Modeling users’ mobile
app privacy preferences: Restoring usability in a sea of permission
settings,” in 10th Symposium On Usable Privacy and Security (SOUPS
’14). USENIX Association, 2014.
[37]
[38] B. Liu, C. Zhang, G. Gong, Y. Zeng, H. Ruan, and J. Zhuge, “FANS:
Fuzzing android native system services via automated interface anal-
ysis,” in 25th USENIX Security Symposium (SEC’20).