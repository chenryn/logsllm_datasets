|  us-east-1d |  subnet-c2abdded  |
|  us-east-1f |  subnet-aae11aa5  |
|  us-east-1e |  subnet-fd3a43c2  |
|  us-east-1b |  subnet-324e246f  |
|  us-east-1c |  subnet-d281a2b6  |
+-------------+-------------------+
```
Querying subnet IDs by availability zone
在上例中，您可以看到在`dev.cfg`文件中输入的`ApplicationSubnets`中的第一项是`us-east-1a`的子网标识，确保 NAT 网关将被安装到正确的可用性区域。
# 为您的专用子网配置路由
配置 NAT 网关的最后一步是为私有子网配置一条指向 NAT 网关资源的默认路由。此配置将确保所有出站互联网流量将被路由到您的 NAT 网关，然后该网关将执行地址转换，使您的私有主机和容器能够与互联网通信。
以下示例演示如何为您之前创建的专用路由表添加默认路由:
```
...
...
Resources:
 PrivateRouteTableDefaultRoute:
 Type: AWS::EC2::Route
 Properties:
 DestinationCidrBlock: 0.0.0.0/0
 RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
...
...
```
Configuring a default route
在前面的示例中，您可以看到您配置了`RouteTableId`和`NatGatewayId`属性，以确保您在第一个示例中创建的私有路由表的默认路由被设置为您在后面的示例中创建的 NAT 网关。
现在，您已经准备好部署您的更改，但是在此之前，让我们在 todobackend-aws 存储库中创建一个名为 **ecs-task-networking** 的单独分支，以便您可以在本章结束时轻松地恢复您的更改:
```
> git checkout -b ecs-task-networking
M stack.yml
Switched to a new branch 'ecs-task-networking'
> git commit -a -m "Add NAT gateway resources"
[ecs-task-networking af06d37] Add NAT gateway resources
 1 file changed, 33 insertions(+)
```
Creating an ECS task networking branch
现在，您可以使用熟悉的`aws cloudformation deploy`命令来部署您的更改，您在本书中一直在使用该命令进行栈部署:
```
> export AWS_PROFILE=docker-in-aws > aws cloudformation deploy --template-file stack.yml \
 --stack-name todobackend --parameter-overrides $(cat dev.cfg) \ --capabilities CAPABILITY_NAMED_IAM Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - todobackend
> aws ec2 describe-subnets --query "Subnets[?CidrBlock=='172.31.96.0/20'].SubnetId" ["subnet-3acd6370"]
> aws ec2 describe-nat-gateways
{
    "NatGateways": [
        {
            "CreateTime": "2018-04-22T10:30:07.000Z",
            "NatGatewayAddresses": [
                {
                    "AllocationId": "eipalloc-838abd8a",
                    "NetworkInterfaceId": "eni-90d8f10c",
                    "PrivateIp": "172.31.21.144",
 "PublicIp": "18.204.39.34"
                }
            ],
            "NatGatewayId": "nat-084089330e75d23b3",
            "State": "available",
            "SubnetId": "subnet-a5d3ecee",
            "VpcId": "vpc-f8233a80",
...
...
```
Deploying changes to the todobackend application
在前面的示例中，成功部署云信息更改后，您可以使用`aws ec2 describe-subnets`命令查询您创建的新子网的子网标识，因为您将在本章的后面需要该值。您还可以运行`aws ec2 describe-nat-gateways`命令来验证 NAT 网关是否已成功创建，并查看网关的弹性 IP 地址，该地址由突出显示的`PublicIP`属性表示。注意您还应该检查默认路由是否创建正确，如以下示例所示:
```
> aws ec2 describe-route-tables \
 --query "RouteTables[].Routes[?DestinationCidrBlock=='0.0.0.0/0']"
[
    [
        {
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": "nat-084089330e75d23b3",
            "Origin": "CreateRoute",
            "State": "active"
        }
    ],
    [
        {
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": "igw-1668666f",
            "Origin": "CreateRoute",
            "State": "active"
        }
    ]
]
...
...
```
Checking default routes
在前面的示例中，您可以看到存在两条默认路由，一条默认路由与 NAT 网关相关联，另一条默认路由与互联网网关相关联，确认您帐户中的一个路由表正在将互联网流量路由到您新创建的 NAT 网关。
# 配置 ECS 任务网络
现在，您已经建立了网络基础设施，将支持 ECS 任务网络的私有 IP 寻址要求，您可以继续在您的 ECS 资源上配置 ECS 任务网络。这需要以下配置和注意事项:
*   您必须配置您的 ECS 任务定义和 ECS 服务，以支持 ECS 任务联网。
*   您的任务定义的网络模式必须设置为`awsvpc`。
*   用于 ECS 任务联网的弹性网络接口只能有一个与之关联的 ECS 任务。根据您的 ECS 实例类型，这将限制您可以在任何给定的 ECS 容器实例中运行的 ECS 任务的最大数量。
*   配置了 ECS 任务网络的 ECS 任务的部署比传统的 ECS 部署需要更长的时间，因为需要创建一个弹性网络接口并将其绑定到您的 ECS 容器实例。
*   因为您的容器应用有一个专用的网络接口，所以动态端口映射不再可用，您的容器端口直接暴露在网络接口上。
*   当使用`awsvpc`网络模式的 ECS 服务与应用负载平衡器目标组结合使用时，目标类型必须设置为`ip`(默认为`instance`)。
移除动态端口映射的含义意味着，例如，todobackend 应用(运行在端口 8000 上)将在启用任务网络的情况下在端口`8000`上被外部访问，而不是通过动态映射的端口。这为生成大量网络流量的应用带来了更好的性能，也意味着您的安全规则可以针对应用运行的特定端口，而不是允许访问动态端口映射使用的短暂网络端口范围。
# 为任务网络配置 ECS 任务定义
配置 ECS 任务网络的第一步是配置您的 ECS 任务定义。以下示例演示了修改`ApplicationTaskDefinition`资源以支持 ECS 任务联网:
```
...
...
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: todobackend
 NetworkMode: awsvpc
      TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}
      Volumes:
        - Name: public
      ContainerDefinitions:
        - Name: todobackend
          ...
          ...
 PortMappings:
 - ContainerPort: 8000 
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: docker
        - Name: collectstatic
          Essential: false
...
...
```
Configuring ECS task definitions to use task networking
在前面的示例中，`NetworkMode`属性已被添加并配置为值`awsvpc`。默认情况下，此属性设置为`bridge`，它实现默认的 Docker 行为，如第一个图所示，包括一个 Docker 桥接口，网络地址转换配置为启用动态端口映射。通过将网络模式设置为`awsvpc`，ECS 将确保从该任务定义部署的任何 ECS 任务都分配有专用的弹性网络接口(ENI)，并在任务定义中配置容器以使用 ENI 的网络栈。本例中的另一项配置更改是`HostPort: 0`配置已从`PortMappings`部分删除，因为 ECS 任务网络不使用或不支持动态端口映射。
# 为任务网络配置 ECS 服务
将 ECS 任务定义配置为使用正确的网络模式进行任务联网后，接下来需要配置 ECS 服务。您的 ECS 服务配置定义了 ECS 应该在其中创建 ENI 的目标子网，还定义了应该应用于 ENI 的安全组。以下示例演示了如何更新 todobackend 栈中的`ApplicationService`资源:
```
...
...
Resources:
  ...
  ...
  ApplicationService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationAutoscaling
      - ApplicationLogGroup
      - ApplicationLoadBalancerHttpListener
      - MigrateTask
    Properties:
      TaskDefinition: !Ref ApplicationTaskDefinition
      Cluster: !Ref ApplicationCluster
      DesiredCount: !Ref ApplicationDesiredCount
      NetworkConfiguration: