0
K=1024
K=256
K=64
K=16
K=4
0
0.2
0.4
Satisfaction Level
0.6
0.8
1
Figure 7: Adaptation Interval: A plot of the function I =
T × K
−(1−S), where S = satisf action level(), T = maximum
interval between adaptation iterations, and K = sensitivity to
satisf action level(). In this ﬁgure, we set T = 10seconds and
plot curves for adaptation interval versus satisfaction level for
different values of K.
of a node’s neighbors (normalized by their degrees) is to the node’s
own capacity. Thus a high capacity neighbor with a low degree con-
tributes more to our satisfaction level than another neighbor with the
same capacity but a much higher degree. The intuition behind this is
that a node with capacity C will forward approximately C queries
per unit time at full load and needs enough outgoing capacity from
all of its neighbors to handle that load. In addition to the factors dis-
cussed above, a number of other parameters may be used to compute
the satisfaction level, for example, the load on a node’s neighbors,
network locality, etc. However, for our prototype, we rely only on
node capacity and degree to compute the satisfaction level.
The satisfaction level is key to deciding how often a node should
conduct its local topology adaptation. Nodes with low satisfaction
levels perform topology adaptation more frequently than satisﬁed
nodes. We use an exponential relationship between the satisfaction
level, S, and the adaptation interval, I: I = T × K
−(1−S), where
T is the maximum interval between adaptation iterations, and K
represents the aggressiveness of the adaptation. After each interval
I, if a node’s satisfaction level is < 1.0, it attempts to add a new
neighbor. Once a node is fully satisﬁed, it still continues to iterate
through the adaptation process, checking its satisfaction level every
T seconds.
Figure 7 shows how the aggressiveness factor K affects the adap-
tation interval. As expected, when a node is fully satisﬁed (S =
1.0), the adaptation interval is T irrespective of the value of K. As
the level of satisfaction decreases, the adaptation interval becomes
shorter. For the same satisfaction level, higher values of K produce
shorter intervals and hence cause a more aggressive (i.e., quicker)
response. In Section 5.4 we look at how the rate of topology adap-
tation changes in a real system with different values of K.
5.3 Query resilience
As described earlier, the Gia search protocol uses biased random
walks to forward queries across the network. One of the drawbacks
of using a random walk instead of ﬂooding is that it is much more
susceptible to failures in the network. If a node receives a query and
dies before it can forward the query to a neighbor, that query is lost
forever. This is in contrast to ﬂooding where a query gets replicated
many times, and so even if a node dies without forwarding a query,
there is a good chance that other copies of the query still exist in the
system.
To overcome this problem, we rely on query keep-alive messages.
Query responses sent back to the originator of the query act as im-
plicit keep-alives. In addition, if a query is forwarded enough times
i
s
r
o
b
h
g
e
n
f
o
r
e
b
m
u
N
50
40
30
20
10
0
C=1000x
C=100x
C=10x
C=1x
i
s
r
o
b
h
g
e
n
f
o
r
e
b
m
u
N
50
40
30
20
10
0
0
20
40
60
Time (seconds)
80
100
0
50
K=256
K=64
K=16
250
300
100
Time (seconds)
150
200
Figure 8: Progress of topology adaptation for an 83-node topol-
ogy over time. The graph shows changes in the number of neigh-
bors of four nodes (each with different capacities).
Figure 9: Progress of topology adaptation for a 1000x capac-
ity node over time. The graph shows changes in the number of
neighbors of a node over different runs of the experiment, each
with a different value of K for the adaptation interval function.
without sending any response, we send back an explicit keep-alive
message. This is implemented as a dummy query response message
that has no actual matches. If the query originator does not receive
any responses or keep-alive messages for a while, it can re-issue the
query.
Yet another problem arises from the fact that responses are typ-
ically forwarded along the same path that the query originally ar-
rived from. If one of the nodes in the query path dies or the topology
changes due to adaptation before the responses for the query are sent
back, then those responses will be dropped. When a node dies and
causes responses to be dropped, the query originator will notice it
because of the absence of keep-alive responses. Thus, it can reis-
sue the query if necessary. On the other hand, topology adaptation
is a controlled process and hence we can do better than wait for a
timeout. When a connection is dropped as a result of a topology
adaptation decision, the connection is not closed for some time later.
It stops accepting any more incoming queries, but continues to for-
ward any lingering query responses that need to be sent along that
path.
5.4 Deployment
We deployed our prototype implementation on PlanetLab [17], a
wide-area service deployment testbed spread across North America,
Europe, Asia, and the South Paciﬁc. To test the behavior of our
algorithms in the face of diversity, we artiﬁcially introduced hetero-
geneity into the system by explicitly setting the capacities of the in-
dividual nodes. These experiments are by no means meant to stress
all of the various components of the Gia system. We present them
here as a set of early results that demonstrate the viability of this
approach in an actual deployment.
We instantiated Gia clients on 83 of the PlanetLab nodes with a
range of capacities. We allowed the system to run for 15 minutes
before shutting down the clients. Over the course of the experiment,
we tracked changes in the Gia topology to evaluate the behavior of
the topology adaptation process. Figure 8 shows the changes over
time to the neighborhood of each of four different nodes. These
nodes were picked randomly from four capacity classes (1x, 10x,
100x, and 1000x). We notice that initially when the nodes are all
“dissatisﬁed,” they quickly gather new neighbors. The rate of topol-
ogy adaptation slows down as the satisfaction level of the nodes rises
and the topology eventually stabilizes to its steady state.
In the above experiment, the 1000x capacity node takes approx-
imately 45 seconds to reach its steady state. This time interval is
closely tied to the level of aggressiveness used in the topology adap-
tation. Recall that the adaptation interval I is a function of the
node’s satisfaction level S, and its aggressiveness factor K: I =
T ∗ K
−(1−S). In the above experiment, we set T to 10 seconds
and K to 256. We ran other experiments to see how the responsive-
ness of the topology adaptation changes with different values of K.
Figure 9 shows the behavior of a 1000x capacity node for different
values of K. As can be seen from the ﬁgure, the topology adaptation
does respond to changes in K, and is less aggressive when we ramp
down the value of K. Thus, this parameter gives us a knob with
which we can trade off the speed at which nodes attain their target
topology to the rate of churn in the overall network.
6. RELATED WORK
We now look at some of the related research in this area. Since the
rise and fall of Napster, many decentralized P2P systems have been
proposed. Gnutella pioneered this approach, and on its footsteps
many other networks such as KaZaA [24] have emerged. Although
the notion of supernodes (nodes with better bandwidth connectivity)
used by KaZaA and the latest versions of Gnutella helps to improve
the performance of the network, it is still limited by the ﬂooding
used for communication across supernodes. Moreover, unlike Gia,
the supernode approach makes just a binary decision about a node’s
capacity (supernode or not) and to our knowledge has no mecha-
nisms to dynamically adapt the supernode-client topologies as the
system evolves.
Numerous researchers have performed extensive measurement stud-
ies of P2P infrastructures. For example, Saroiu et al. [22] studied
the bandwidth, latency, availability, and ﬁle sharing patterns of the
nodes in Gnutella and Napster. Their study highlighted the existence
of signiﬁcant heterogeneity in both systems. Based on this fact, Gia
is designed to accommodate heterogeneity and avoid overloading
the less capable nodes in the network. Other measurement studies
include [23] which shows that there exists extreme heterogeneity in
the trafﬁc volumes generated by hosts within a P2P network and
that only a small fraction of hosts are stable and persist in the P2P
network over long periods of time.
In addition to the work described in Section 1 [1, 12, 16], there
have been other proposals for addressing the scaling problems of
Gnutella. Krishnamurthy et al. [10] proposed a cluster-based archi-
tecture for P2P systems (CAP), which uses a network-aware cluster-
ing technique (based on a central clustering server) to group hosts
into clusters. Each cluster has one or more delegate nodes that act
as directory servers for the objects stored at nodes within the same
cluster. In some sense, the high capacity nodes in Gia provide func-
tionality similar to that of delegate nodes. However, unlike CAP,
Gia adapts its topology to cluster around high-capacity nodes in a
fully decentralized manner and explicitly takes node capacity into
account in all facets of its design.
7. CONCLUSION
We have proposed modifying Gnutella’s algorithms to include
ﬂow control, dynamic topology adaptation, one-hop replication, and
careful attention to node heterogeneity. Our simulations suggest that
these modiﬁcations provide three to ﬁve orders of magnitude im-
provement in the total capacity of the system while retaining sig-
niﬁcant robustness to failures. The increased capacity is not due to
any single design innovation, but is the result of the synergy of the
combination of all of the modiﬁcations. While making search much
more scalable, the design also has potential to improve the system’s
download capacity by more fully distributing the load. Thus, a few
simple changes to Gnutella’s search operations would result in dra-
matic improvements in its scalability.
Why is this result interesting? The most plausible alternative to
Gia is a DHT-based design. As we argued in Section 2, we be-
lieve that DHTs, while more efﬁcient at many tasks, are not well
suited for mass-market ﬁle sharing.
In particular, their ability to
ﬁnd needles, i.e., exceedingly rare ﬁles, is not needed in a mass-
market ﬁle-sharing environment, while their ability to efﬁciently im-
plement keyword search, which is crucial for this application, is still
unproven.
Another alternative, perhaps too readily dismissed by the research
community, is that of centralized search as in the original Napster.
The reﬂex response from the research community is that such de-
signs are inherently unscalable, but the examples of Google, Yahoo,
and other large sites tell us that scalability does not pose an insur-
mountable hurdle. In reality, the real barriers to Napster-like designs
are not technical but legal and ﬁnancial. The demise of Napster is
due to it being used for unauthorized exchanges of copyrighted ma-
terial. Adopting decentralized designs merely to avoid prosecution
for such acts is hardly a noble exercise. From a ﬁnancial standpoint,
while scaling a centralized search site is technically feasible, it re-
quires a sizable capital investment in the infrastructure. Thus, this
approach can only be adopted when there is an underlying business
model to the application. In contrast, decentralized designs need no
large infrastructure expenditures.
Thus, we view our work not as facilitating copyright avoidance
but as enabling the sharing of ﬁles in cases where there is no un-
derlying business model. This is what the web did for publishing—
allowing any author access to a large audience regardless of com-
mercial viability—and we hope to support a similar ability in ﬁle
sharing.
8. REFERENCES
[1] ADAMIC, L. A., LUKOSE, R. M., PUNIYANI, A. R., AND
HUBERMAN, B. A. Search in Power-law Networks. Physical Review
E 64 (2001).
[2] ADAR, E., AND HUBERMAN, B. A. Free Riding on Gnutella. First
Monday, Internet Journal (Oct. 2000). Available at
http://www.firstmonday.dk/issues/issue5_10/
adar/index.html.
[3] BHAGWAN, R., SAVAGE, S., AND VOELKER, G. Understanding
Availability. In Proceedings of the 2nd International Workshop on
Peer-to-Peer Systems (IPTPS ’03). (Berkeley, CA, Feb. 2003).
[4] C—NET NEWS. Napster among fastest-growing Net technologies,
Oct. 2000.
http://news.com.com/2100-1023-246648.html.
[5] GNUCLEUS. The Gnutella Web Caching System, 2002.
http://www.gnucleus.net/gwebcache/.
[6] GNUTELLA DEVELOPMENT FORUM. The Gnutella v0.6 Protocol,
2001.
http://groups.yahoo.com/group/the_gdf/files/.
[7] GNUTELLA DEVELOPMENT FORUM. The Gnutella Ultrapeer
Proposal, 2002. http://groups.yahoo.com/group/the_
gdf/files/Proposals/Ultrapeer/.
[8] GNUTELLA.WEGO.COM. Gnutella: Distributed Information Sharing,
2000. http://gnutella.wego.com/.
[9] GOYAL, P., VIN, H. M., AND CHENG, H. Start-time Fair Queuing: A
Scheduling Algorithm for Integrated Services Packet Switching
Networks. In Proceedings of ACM SIGCOMM ’96 (Stanford, CA,
Aug. 1996).
[10] KRISHNAMURTHY, B., WANG, J., AND XIE, Y. Early Measurements
of a Cluster-based Architecture for P2P Systems. In Proceedings of
the ACM SIGCOMM Internet Measurement Workshop 2001 (San
Francisco, CA, Nov. 2001).
[11] LI, J., LOO, B. T., HELLERSTEIN, J., KAASHOEK, F., KARGER,
D. R., AND MORRIS, R. On the Feasibility of Peer-to-Peer Web
Indexing and Search. In Proceedings of the 2nd International
Workshop on Peer-to-Peer Systems (IPTPS ’03). (Berkeley, CA, Feb.
2003).
[12] LV, Q., CAO, P., COHEN, E., LI, K., AND SHENKER, S. Search and
Replication in Unstructured Peer-to-Peer Networks . In Proceedings of
16th ACM International Conference on Supercomputing(ICS’02)
(New York, NY, June 2002).
[13] LV, Q., RATNASAMY, S., AND SHENKER, S. Can Heterogeneity
Make Gnutella Scalable. In Proceedings of the 1st International
Workshop on Peer-to-Peer Systems (IPTPS ’02). (Cambridge, MA,
Mar. 2002).
[14] MAYMOUNKOV, P., AND MAZIERES, D. Kademlia: A Peer-to-peer
Information System Based On the XOR Metric. In Proceedings of the
1st International Workshop on Peer-to-Peer Systems (IPTPS ’02).
(Cambridge, MA, Mar. 2002).
[15] METAMACHINE. The Overnet File-sharing Network, 2002.
http://www.overnet.com/.
[16] OSOKINE, S. The Flow Control Algorithm for the Distributed
’Broadcast-Route’ Networks with Reliable Transport Links., Jan.
2001.
http://www.grouter.net/gnutella/flowcntl.htm.
[17] PETERSON, L., ANDERSON, T., CULLER, D., AND ROSCOE, T. A
Blueprint for Introducing Disruptive Technology into the Internet. In
Proceedings of the ACM HotNets-I Workshop (Princeton, NJ, Oct.
2002). See also http://www.planet-lab.org/.
[18] RATNASAMY, S., FRANCIS, P., HANDLEY, M., KARP, R., AND
SHENKER, S. A Scalable Content-addressable Network. In
Proceedings of ACM SIGCOMM 2001 (San Diego, CA, Aug. 2001).
[19] REYNOLDS, P., AND VAHDAT, A. Efﬁcient Peer-to-Peer Keyword
Searching. Technical report, Duke University, Durham, NC, 2002.
Available at http://issg.cs.duke.edu/search/.
[20] RIPEANU, M., FOSTER, I., AND IAMNITCHI, A. Mapping the
Gnutella Network: Properties of Large-Scale Peer-to-Peer Systems
and Implications for System Design. IEEE Internet Computing
Journal 6, 1 (2002).
[21] SAROIU, S., GUMMADI, K. P., DUNN, R. J., GRIBBLE, S. D., AND
LEVY, H. M. An Analysis of Internet Content Delivery Systems. In
Proceedings of the Fifth Symposium on Operating Systems Design and
Implementation (OSDI 2002) (Boston, MA, Dec. 2002).
[22] SAROIU, S., GUMMADI, P. K., AND GRIBBLE, S. D. A
Measurement Study of Peer-to-Peer File Sharing Systems. In
Proceedings of Multimedia Computing and Networking 2002
(MMCN’02) (San Jose, CA, Jan. 2002).
[23] SEN, S., AND WANG, J. Analyzing Peer-to-Peer Trafﬁc Across Large
Networks. In Proceedings of the ACM SIGCOMM Internet
Measurement Workshop 2002 (Marseille, France, Nov. 2002).
[24] SHARMAN NETWORKS LTD. KaZaA Media Desktop, 2001.
http://www.kazaa.com/.
[25] STOICA, I., MORRIS, R., KARGER, D., KAASHOEK, F., AND
BALAKRISHNAN, H. Chord: A Scalable Peer-to-peer Lookup Service
for Internet Applications. In Proceedings of ACM SIGCOMM 2001
(San Diego, CA, Aug. 2001).
[26] TANG, C., XU, Z., AND MAHALINGAM, M. pSearch: Information
Retrieval in Structured Overlays. In Proceedings of the ACM
HotNets-I Workshop (Princeton, NJ, Oct. 2002).
[27] ZHAO, B., KUBIATOWICZ, J., AND JOSEPH, A. Tapestry: An
Infrastructure for Fault-tolerant Wide-area Location and Routing.
Tech. rep., University of California, Berkeley, 2001.