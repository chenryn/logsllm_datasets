programming language used to create that application. Since neither Mixmaster
nor Reliable were written by seasoned software developers, we assume a level of
experience which would allow for simplistic security mistakes.5
6.4
Included libraries
In addition to the standard POSIX libraries provided by the compilation OS,
Mixmaster 3.0, the version of Mixmaster evaluated in this paper, requires that
the zlib [DG96] and OpenSSL [CEHL] libraries be included. Optionally, Mix-
master also links against pcre [Haz] an ncurses [BHRPD].
Reliable requires many native Windows system calls as well as the third-
party application, Mixmaster 2.0.4.
6.5
Cryptographic functions
Both Mixmaster and Reliable avoid direct implementation of cryptographic al-
gorithms when possible. Mixmaster 3.0 relies strictly on OpenSSL for these
cryptographic functions. Any attackable ﬂaws in the cryptographic library used
to build Mixmaster which aﬀect the security if the algorithms6 used by Mix-
master may be a an attack against Mixmaster as well.
Reliable abstracts the cryptographic operations one step further. To support
the Mixmaster message format, Reliable acts as a wrapper around the DOS
version of Mixmaster 2.0.4. Thus, any attack against the Mixmaster message
format due to implementation ﬂaws in Mixmaster 2.0 will work against Reliable
as well. Mixmaster 2.0.4 relies on the cryptographic library OpenSSL or its
predecessor SSLeay for the MD5, EDE-3DES, and RSA routines.7
6.6
Entropy sources
The quality of the entropy source plays an extremely important role in both the
pool mix and S-G mix schemes. In pool mix systems, the mixing in the pool must
be cryptographically random in order to mix the traﬃc in a non-deterministic
way. The timestamps used to determine how long a message should be held by
an S-G mix implementation must also be from a strong entropy source for the
5The bulk of the code for Mixmaster 3.0 was written by Ulf M¨oller as his ﬁrst major software
development project while completing his undergraduate computer science degree [M¨02]. He
has since gained respect as a skilled cryptographic software developer for his open source
and proprietary development projects. Reliable was authored under a pseudonym, and we
can only speculate about the level of experience of its author. (There has been no known
communication with the author of Reliable since February, 2000).
6It is understood that ﬂaws in the cryptographic algorithms will aﬀect the security of
software which relies upon those algorithms. However, since most attacks on cryptographic
applications are due to ﬂaws in the implementation, care must be taken when evaluating the
shared cryptographic libraries.
7Prior to the expiration of the RSA patent, versions of Mixmaster 2.0 oﬀered support for
the RSAREF and BSAFE libraries as well.
Use of these versions of Mixmaster is largely
abandoned.
13
same reasons. In addition, the Mixmaster message format speciﬁes the use of
random data for its message and header padding.
All software is dependent on its underlying operating system for a good
source of entropy. Cryptographic quality entropy is a scarce resource on most
systems8, and therefore the entropy sources provided by most modern operat-
ing systems actually provide PRNG output which has been seeded with truly-
random data.
Mixmaster uses OpenSSL’s rand
functions9.
Reliable uses the standard
Windows system call, Rnd(), when obtaining entropy, with the exception of
message and header padding (which is done by the supporting Mixmaster 2.0.4
binary). The Rnd() function is not a cryptographically strong source of entropy.
Rnd() starts with a seed value and generates numbers which fall within a ﬁnite
range. Previous work has demonstrated that systems which use a known seed
to a deterministic PRNG are trivially attackable [GW96, Cor]. While its use of
Rnd() to determine the latency for a message injected into the mix is the most
devastating, Reliable uses Rnd() for many other critical purposes as well.
6.7
Network timing attacks
Packet counting, deduction of pool variables by timing observation.
Aﬀects
pool-mixes more than s-g mixes, possibly aids attacker in some non-host based
active attacks such as (n − 1) attacks. The anonymity strength of a remailer
should not require pool values to be hidden, and countermeasures to this class
of active attacks should be taken. [DS03a]
7
Conclusions and future work
In this paper we have analyzed the traﬃc pattern of a real traﬃc stream going
through a working mix node and found that the traﬃc is not Poisson, as it is
commonly assumed in the literature. The traﬃc pattern is highly impredictable.
Therefore, no assumptions on the traﬃc should be made when designing a mix.
We measure the anonymity of the pool mix scheme used in Mixmaster by
applying a metric previously proposed in the literature. We provide our own
metric for evaluating the anonymity of the S-G mix variant used in Reliable
which does not assume a Poisson traﬃc pattern.
Our comparison of the two predominant mixing applications shows that
Mixmaster provides superior anonymity, and is better suited for the anonymiza-
tion of email messages than Reliable. Mixmaster provides a minimum level of
anonymity at all times; Reliable does not. Reliable’s anonymity drops to nearly
zero if the traﬃc is very low. In high-traﬃc situations, Mixmaster provides a
higher maximum of anonymity than Reliable for the same stream of input: 10.5
8Systems which employ the use of noisy diodes, or other plentiful sources of entropy have
less of a concern for entropy pool exhaustion.
9OpenSSL relies on its internal PRNG seeded with various system sources to provide
cryptographically strong entropy.
14
of Mixmaster versus 10 of Reliable. We have shown that Mixmaster provides
higher average anonymity than Reliable for the same input and same average
delay. Due to its nature as a pool mix, Mixmaster provides higher delays than
Reliable in low traﬃc conditions.
Comparatively, due to the nature of S-G
Mixes, Reliable’s delay is not dependent on the traﬃc.
In addition, we have identiﬁed a number of key points of attack and weakness
in mix software to which anonymity software designers need to pay particular
attention. In addition to the areas of theoretical weakness which we have iden-
tiﬁed, we discovered a fatal ﬂaw in the use of randomness in Reliable, which
diminishes its ability to provide anonymity, independent of our ﬁndings with
regard to the S-G mix protocol.
We can conclude from our analysis of the mixing algorithms used by these
mix implementations that S-G mixes are not suitable for use with systems that
may have occurrences of low traﬃc on the network. While S-G mixes are an
appropriate solution to low-latency applications such as web mixing, pool mixes
should be used for higher latency systems with ﬂuctuating traﬃc loads.
Acknowledgments
Claudia D´ıaz is funded by a research grant of the K.U.Leuven. This work was
also partially supported by the IWT STWW project on Anonymity and Privacy
in Electronic Services (APES), and by the Concerted Research Action (GOA)
Meﬁsto-2000/06 of the Flemish Government.
Evelyne Dewitte is a research assistant with the I.W.T. (Flemish Institute
for Scientiﬁc and Technological Research in Industry).
Research supported
by Research Council KUL: GOA-Meﬁsto 666, several PhD/postdoc & fellow
grants; Flemish Government: FWO: PhD/postdoc grants, projects, G.0240.99
(multilinear algebra), G.0407.02 (support vector machines), G.0197.02 (power
islands), G.0141.03 (identiﬁcation and cryptography), G.0491.03 (control for
intensive care glycemia), G.0120.03 (QIT), research communities (ICCoS, AN-
MMM); AWI: Bil. Int. Collaboration Hungary/ Poland; IWT: PhD Grants,
Soft4s (softsensors), Belgian Federal Government: DWTC (IUAP IV-02 (1996-
2001) and IUAP V-22 (2002-2006)), PODO-II (CP/40: TMS and Sustainabil-
ity); EU: CAGE; ERNSI; Eureka 2063-IMPACT; Eureka 2419-FliTE; Contract
Research/agreements: Data4s, Electrabel, Elia, LMS, IPCOS, VIB.
The authors also want to thank Jasper Scholten for looking at the feasibility
of some simulation algorithms, Peter Palfrader for assisting with the gathering of
input data for our simulations, and members of The Shmoo Group for discussion
of secure programming issues.
A
Method to compute the anonymity of Reli-
able
To formalize the behaviour of the mixes, we deﬁne:
15
• Xs : an incoming message arriving at time s;
• Yt : an outgoing message leaving at time t;
• D : the amount of time a message has been delayed.
We know that the mixes delay the messages exponentially and we have set the
mean to 43 minutes: D ∼ exp(1/43):
pdf : f(d)
=
1
43e− 1
43 d
for all d ≥ 0 ;
=
0
elsewhere ;
cdf : F(d)
=
P(D ≤ d) = 1 − e− 1
43 d
for all d ≥ 0 ;
=
0
elsewhere .
All delay times are independent.
Crucial to note in this setup is that the sequence of outgoing messages is
not a Poisson process. This would only be true if all inputs would arrive at the
same time, hence belong to the mix when the delaying starts. But in our case,
messages arrive at distinct moments in time, each being delayed upon their ar-
rival times.
Mixes ﬂush at ﬁxed time moments which are observed by the attacker:
t ∈ {out1, out2, . . . , outM}.
He also observes the arrival times:
s ∈ {in1, in2, . . . , inN}.
If a message leaves the mix at time t, what are then the probabilities for the
arrival times? Suppose the departure time t =out is ﬁxed. We then look for the
probability that the message that left at time out is the same message as the
one that entered the mix at time s:
P(Yout = Xs) = P(D = out − s) .
We can hence rephrase the problem in terms of the delay: which values for
the delay times are the most probable? Clearly, negative delay is impossible
so only arrival times prior to out are probable.
These arrival times form a
set {in1, in2, . . . , ink} with ink  d2 > . . . > dk. We are almost at the solution as the density
function of the delay times is known! Caution has to be taken however as the
exponential function is a continuous function which means that the probabil-
ity of the delay taking a single value is zero: P(D = d1) = . . . = P(D = dk) = 0!
16
Figure 9: An example of an exponential probability density function
Figure 10: The matching exponential cumulative density function
How can we then calculate the probabilities of the delay times? To make
this clear, let us look at ﬁgure 9 and suppose that we only have three arrival
times prior to out. We have thus three possible delays d1 > d2 > d3. Let us
now assume for simplicity reasons that d1 = 3 hours, d2 = 2 hours and d3 = 1
hour. The variable delay is continuous and can theoretically take every value
in the interval [0, 3]. However, we know that we only ﬂush at three particular
times and that hence only three particular delays can occur. We can exploit
this knowledge in the following way:
P(D = d1)
≈
P(d2 < D ≤ d1) = yellow surface ;
P(D = d2)
≈
P(d3 < D ≤ d2) = green surface ;
P(D = d3)
≈
P(0 < D ≤ d3) = blue surface .
In this way one can clearly see that the biggest surface corresponds to the
most probable delay! This is straightforward for more than three delays. For
computation we make use of the cumulative distribution function (cdf) which is
graphed in ﬁgure 10. Cumulative probabilities are listed in tables and known in
statistical software. For reasons of simplicity we put the mean of the exponential
17
to be 1 hour (easy parameterization):
P(D = d1)
≈
F(d1) − F(d2) = 0.9502 − 0.8647 = 0.0855 ;
P(D = d2)
≈
F(d2) − F(d1) = 0.8647 − 0.6321 = 0.2326 ;
P(D = d3)
≈
F(d3) = 0.6321 .
In our little example, the message corresponds most likely with the one that
entered the mix 1 hour before out. You can also clearly see this on ﬁgure 9. In
practical applications however, many possible delays will occur so that visual
inspections will not be eﬃcient and calculations have to made and compared.
A.1
Uniform Delays
Reliable allows for mix-chosen uniform delays if the users do not specify any
delay for their messages.
We have found a method to compute the anonymity provided by a mix that
delays inputs uniformly from a distribution U[a, b].
The method consists in
creating a tables with all inputs and outputs. Then we search for all possible
combinations input-output that are possible from an external observer’s point of
view (i.e., those that assign to every input that arrives at time T an output that
leaves between T + a and T + b). Let us call the total number of combinations
C.
Then, in order to compute the recipient (sender) anonymity of message mi,
we need to ﬁnd the distribution of probabilities that link this input (output) to
all outputs (inputs).
If input mi appears matching output sj in P cases, then the probability
assigned to sj is P/C.
The probability of an input of matching an output is computed as possible
cases divided by total cases. ¿From this distribution, the sender and recipient
anonymity can be computed for every message.
Unfortunately, due to the large amount of messages considered, the imple-
mentation of this algorithm in our case is not feasible.
References
[BHRPD] Z. Ben-Halim, E. Raymond, J. Pfeifer, and T. Dickey. Ncurses.
[CEHL]
M. Cox, R. Engelschall, S. Henson, and B. Laurie. The OpenSSL
Project.
[Cha81]
David Chaum. Untraceable electronic mail, return addresses, and
digital pseudonyms.
Communications of the ACM, 4(2):84–88,
February 1981.
[Cor]
Microsoft Corporation. Visual basic language reference–rnd func-
tion. MSDN Library.
18
[Cot]
Lance Cottrell. Mixmaster and remailer attacks.
[Cot95]
Lance Cottrell.
Announcement: Mixmaster 2.0 remailer release!
Usenet post, May 1995.
[DDM03]
George Danezis, Roger Dingledine, and Nick Mathewson. Mixmin-
ion: Design of a Type III Anonymous Remailer Protocol. In Pro-
ceedings of the 2003 IEEE Symposium on Security and Privacy, May
2003.
[DG96]
P. Deutsch and J-L. Gailly. ZLIB Compressed Data Format Speciﬁ-
cation version 3.3. Request for Comments: 1950, May 1996.
[DP04]
Claudia Diaz and Bart Preneel.
Reasoning about the anonymity
provided by pool mixes that generate dummy traﬃc. In Accepted
submission at IH2004, 2004.
[DS03a]
George Danezis and Len Sassaman. Heartbeat traﬃc to counter (n-1)
attacks. In Proceedings of the Workshop on Privacy in the Electronic
Society (WPES 2003), Washington, DC, USA, October 2003.
[DS03b]
Claudia Diaz and Andrei Serjantov. Generalising mixes. In Privacy
Enhacing Technologies, LNCS, Dresden, Germany, April 2003.
[DSCP02] Claudia Diaz, Stefaan Seys, Joris Claessens, and Bart Preneel. To-
wards measuring anonymity. In Roger Dingledine and Paul Syverson,
editors, Proceedings of Privacy Enhancing Technologies Workshop
(PET 2002). Springer-Verlag, LNCS 2482, April 2002.
[GW96]
Ian Goldberg and David Wagner. Randomness and the Netscape
browser. Dr. Dobb’s Journal, January 1996.
[Haz]
Philip Hazel. Perl compatible regular expressions.
[KEB98]
Dogan Kesdogan, Jan Egner, and Roland B¨uschkes. Stop-and-go
MIXes: Providing probabilistic anonymity in an open system. In
Proceedings of Information Hiding Workshop (IH 1998). Springer-
Verlag, LNCS 1525, 1998.
[M¨02]
Ulf M¨oller. Personal communication. Private email to Len Sassaman,
August 2002.
[MCPS03] Ulf M¨oller, Lance Cottrell, Peter Palfrader, and Len Sassaman. Mix-
master Protocol — Version 2, July 2003.
[PK00]
Andreas Pﬁtzmann and Marit Kohntopp. Anonymity, unobservabil-
ity and pseudonymity — a proposal for terminology. In Designing
Privacy Enhancing Technologies: Proceedings of the International
Workshop on the Design Issues in Anonymity and Observability,
pages 1–9, July 2000.
19
[RPr99]
RProcess. Selective denial of service attacks. Usenet post, September
1999.
[Sas02]
Len Sassaman. The promise of privacy. Invited talk, LISA XVI,
November 2002.
[SD02]
Andrei Serjantov and George Danezis. Towards an information theo-
retic metric for anonymity. In Roger Dingledine and Paul Syverson,
editors, Proceedings of Privacy Enhancing Technologies Workshop
(PET 2002). Springer-Verlag, LNCS 2482, April 2002.
[Tho84]
K. Thompson. Reﬂections on trusting trust. Communications of the
ACM, 27(8), August 1984.
20