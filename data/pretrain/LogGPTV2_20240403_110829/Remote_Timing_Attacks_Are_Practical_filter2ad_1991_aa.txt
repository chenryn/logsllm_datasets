title:Remote Timing Attacks Are Practical
author:David Brumley and
Dan Boneh
USENIX Association
Proceedings of the
12th USENIX Security Symposium
Washington, D.C., USA
August 4–8, 2003
© 2003 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Remote Timing Attacks are Practical
David Brumley
Stanford University
PI:EMAIL
Dan Boneh
Stanford University
PI:EMAIL
Abstract
Timing attacks are usually used to attack weak comput-
ing devices such as smartcards. We show that timing
attacks apply to general software systems. Speciﬁcally,
we devise a timing attack against OpenSSL. Our exper-
iments show that we can extract private keys from an
OpenSSL-based web server running on a machine in the
local network. Our results demonstrate that timing at-
tacks against network servers are practical and therefore
security systems should defend against them.
1 Introduction
Timing attacks enable an attacker to extract secrets
maintained in a security system by observing the time
it takes the system to respond to various queries. For
example, Kocher [10] designed a timing attack to ex-
pose secret keys used for RSA decryption. Until now,
these attacks were only applied in the context of hard-
ware security tokens such as smartcards [4, 10, 18]. It
is generally believed that timing attacks cannot be used
to attack general purpose servers, such as web servers,
since decryption times are masked by many concurrent
processes running on the system. It is also believed that
common implementations of RSA (using Chinese Re-
mainder and Montgomery reductions) are not vulnerable
to timing attacks.
We challenge both assumptions by developing a remote
timing attack against OpenSSL [15], an SSL library
commonly used in web servers and other SSL applica-
tions. Our attack client measures the time an OpenSSL
server takes to respond to decryption queries. The client
is able to extract the private key stored on the server. The
attack applies in several environments.
Network. We successfully mounted our timing attack
between two machines on our campus network.
The attacking machine and the server were in
different buildings with three routers and multi-
ple switches between them. With this setup we
were able to extract the SSL private key from
common SSL applications such as a web server
(Apache+mod SSL) and a SSL-tunnel.
Interprocess. We successfully mounted the attack be-
tween two processes running on the same machine.
A hosting center that hosts two domains on the
same machine might give management access to
the admins of each domain. Since both domain are
hosted on the same machine, one admin could use
the attack to extract the secret key belonging to the
other domain.
Virtual Machines. A Virtual Machine Monitor (VMM)
is often used to enforce isolation between two Vir-
tual Machines (VM) running on the same proces-
sor. One could protect an RSA private key by stor-
ing it in one VM and enabling other VM’s to make
decryption queries. For example, a web server
could run in one VM while the private key is stored
in a separate VM. This is a natural way of protect-
ing secret keys since a break-in into the web server
VM does not expose the private key. Our results
show that when using OpenSSL the network server
VM can extract the RSA private key from the se-
cure VM, thus invalidating the isolation provided
by the VMM. This is especially relevant to VMM
projects such as Microsoft’s NGSCB architecture
(formerly Palladium). We also note that NGSCB
enables an application to ask the VMM (aka Nexus)
to decrypt (aka unseal) application data. The appli-
cation could expose the VMM’s secret key by mea-
suring the time the VMM takes to respond to such
requests.
Many crypto libraries completely ignore the timing at-
tack and have no defenses implemented to prevent it. For
example, libgcrypt [14] (used in GNUTLS and GPG)
and Cryptlib [5] do not defend against timing attacks.
OpenSSL 0.9.7 implements a defense against the tim-
ing attack as an option. However, common applications
such as mod SSL, the Apache SSL module, do not en-
USENIX Association
12th USENIX Security Symposium 
1
2
12th USENIX Security Symposium 
USENIX Association
inputs g the attacker can expose information about bits
of the factor q. We note that a timing attack on sliding
windows is much harder than a timing attack on square-
and-multiply since there are far fewer multiplications by
g in sliding windows. As we will see, we had to adapt
our techniques to handle sliding windows exponentia-
tion used in OpenSSL.
2.3 Montgomery Reduction
The sliding windows exponentiation algorithm performs
a modular multiplication at every step. Given two inte-
gers x, y, computing xy mod q is done by ﬁrst multiply-
ing the integers x ∗ y and then reducing the result mod-
ulo q. Later we will see each reduction also requires a
few additional multiplications. We ﬁrst brieﬂy describe
OpenSSL’s modular reduction method and then describe
its integer multiplication algorithm.
Naively, a reduction modulo q is done via multi-
precision division and returning the remainder. This is
quite expensive. In 1985 Peter Montgomery discovered
a method for implementing a reduction modulo q us-
ing a series of operations efﬁcient in hardware and soft-
ware [13].
Montgomery reduction transforms a reduction modulo
q into a reduction modulo some power of 2 denoted by
R. A reduction modulo a power of 2 is faster than a
reduction modulo q as many arithmetic operations can
be implemented directly in hardware. However, in order
to use Montgomery reduction all variables must ﬁrst be
put into Montgomery form. The Montgomery form of
number x is simply xR mod q. To multiply two num-
bers a and b in Montgomery form we do the following.
First, compute their product as integers: aR∗bR = cR2.
Then, use the fast Montgomery reduction algorithm to
compute cR2 ∗ R 1 = cR mod q. Note that the result
cR mod q is in Montgomery form, and thus can be di-
rectly used in subsequent Montgomery operations. At
the end of the exponentiation algorithm the output is put
back into standard (non-Montgomery) form by multiply-
ing it by R 1 mod q. For our attack, it is equivalent to
use R and R 1 mod N, which are public.
Hence, for the small penalty of converting the input g to
Montgomery form, a large gain is achieved during mod-
ular reduction. With typical RSA parameters the gain
from Montgomery reduction outweighs the cost of ini-
tially putting numbers in Montgomery form and convert-
ing back at the end of the algorithm.
l
’
m
h
t
i
r
o
g
a
s
y
r
e
g
t
n
o
M
n
i
s
n
o
i
t
c
u
d
e
r
a
r
t
x
e
f
o
#
discontinuity when
g mod q = 0
discontinuity when
g mod p = 0
q
2q
3q p
4q
5q
values g between 0 and 6q
Figure 1: Number of extra reductions in a Montgomery
reduction as a function (equation 1) of the input g.
The key relevant fact about a Montgomery reduction is
at the end of the reduction one checks if the output cR
is greater than q.
If so, one subtracts q from the out-
put, to ensure that the output cR is in the range [0, q).
This extra step is called an extra reduction and causes a
timing difference for different inputs. Schindler noticed
that the probability of an extra reduction during an ex-
ponentiation gd mod q is proportional to how close g is
to q [18]. Schindler showed that the probability for an
extra reduction is:
Pr[Extra Reduction] = g mod q
2R
(1)
Consequently, as g approaches either factor p or q from
below, the number of extra reductions during the expo-
nentiation algorithm greatly increases. At exact mul-
tiples of p or q, the number of extra reductions drops
dramatically. Figure 1 shows this relationship, with the
discontinuities appearing at multiples of p and q. By de-
tecting timing differences that result from extra reduc-
tions we can tell how close g is to a multiple of one of
the factors.
2.4 Multiplication Routines
RSA operations, including those using Montgomery’s
method, must make use of a multi-precision integer mul-
tiplication routine. OpenSSL implements two multipli-
cation routines: Karatsuba (sometimes called recursive)
and “normal”. Multi-precision libraries represent large
integers as a sequence of words. OpenSSL uses Karat-
suba multiplication when multiplying two numbers with
an equal number of words. Karatsuba multiplication
takes time O(nlog2 3) which is O(n1.58). OpenSSL uses
USENIX Association
12th USENIX Security Symposium 
3
4
12th USENIX Security Symposium 
USENIX Association
When the i’th bit is 0, the “large” difference can ei-
t2 is
ther be negative or positive. In this case, if t1
positive then DecryptTime(g) > DecryptTime(ghi), and
the Montgomery reductions dominated the time differ-
t2 is negative, then DecryptTime(g) <
ence.
DecryptTime(ghi), and the multi-precision multiplica-
tion dominated the time difference.
If t1
Formatting of RSA plaintext, e.g. PKCS 1, does not af-
fect this timing attack. We also do not need the value of
the decryption, only how long the decryption takes.
3.1 Exponentiation Revisited
tg2| (cid:3) |tg3
tg4| when g1 < q < g2
We would like |tg1
and g3 < g4 < q. Time measurements that have this
property we call a strong indicator for bits of q, and those
that do not are a weak indicator for bits of q. Square and
multiply exponentiation results in a strong indicator be-
cause there are approximately log2 d
2 multiplications by
g during decryption. However, in sliding windows with
window size w (w = 5 in OpenSSL) the expected num-
ber of multiplications by g is only:
E[# multiply by g] ≈
log2 d
2w 1(w + 1)
resulting in a weak indicator.
To overcome this we query at a neighborhood of values
g, g +1, g +2, ..., g + n, and use the result as the decrypt
time for g (and similarly for ghi). The total decryption
time for g or ghi is then:
Tg =
n(cid:1)
i=0
DecryptTime(g + i)
We deﬁne Tg as the time to compute g with sliding win-
dows when considering a neighborhood of values. As
| typically becomes a stronger indi-
n grows, |Tg
cator for a bit of q (at the cost of additional decryption
queries).
Tghi
4 Real-world scenarios
As mentioned in the introduction there are a number
of scenarios where the timing attack applies to net-
worked servers. We discuss an attack on SSL applica-
tions, such as stunnel [23] and an Apache web server
with mod SSL [12], and an attack on trusted comput-
ing projects such as Microsoft’s NGSCB (formerly Pal-
ladium).
During a standard full SSL handshake the SSL server
performs an RSA decryption using its private key. The
SSL server decryption takes place after receiving the
CLIENT-KEY-EXCHANGE message from the SSL client.
The CLIENT-KEY-EXCHANGE message is composed on
the client by encrypting a PKCS 1 padded random bytes
with the server’s public key. The randomness encrypted
by the client is used by the client and server to compute
a shared master secret for end-to-end encryption.
Upon receiving a CLIENT-KEY-EXCHANGE message
from the client, the server ﬁrst decrypts the message with
its private key and then checks the resulting plaintext for
proper PKCS 1 formatting.
If the decrypted message
is properly formatted, the client and server can com-
pute a shared master secret. If the decrypted message
is not properly formatted, the server generates its own
random bytes for computing a master secret and con-
tinues the SSL protocol. Note that an improperly for-
matted CLIENT-KEY-EXCHANGE message prevents the
client and server from computing the same master secret,
ultimately leading the server to send an ALERT message
to the client indicating the SSL handshake has failed.
In our attack, the client substitutes a properly format-
ted CLIENT-KEY-EXCHANGE message with our guess
g. The server decrypts g as a normal CLIENT-KEY-
EXCHANGE message, and then checks the resulting
plaintext for proper PKCS 1 padding. Since the decryp-
tion of g will not be properly formatted, the server and
client will not compute the same master secret, and the
client will ultimately receive an ALERT message from
the server. The attacking client computes the time dif-
ference from sending g as the CLIENT-KEY-EXCHANGE
message to receiving the response message from the
server as the time to decrypt g. The client repeats this
process for each value of of g and ghi needed to calcu-
late Tg and Tghi.
Our experiments are also relevant to trusted computing
efforts such as NGSCB. One goal of NGSCB is to pro-
vide sealed storage. Sealed storage allows an applica-
tion to encrypt data to disk using keys unavailable to the
user. The timing attack shows that by asking NGSCB
to decrypt data in sealed storage a user may learn the
secret application key. Therefore, it is essential that the
secure storage mechanism provided by projects such as
NGSCB defend against this timing attack.
USENIX Association
12th USENIX Security Symposium 
5
As mentioned in the introduction, RSA applications (and
subsequently SSL applications using RSA for key ex-
change) using a hardware crypto accelerator are not vul-
nerable since most crypto accelerators implement de-
fenses against the timing attack. Our attack applies to
software based RSA implementations that do not defend
against timing attacks as discussed in section 6.
For the ﬁrst 5 experiments we implemented a simple
TCP server that read an ASCII string, converted the
string to OpenSSL’s internal multi-precision representa-
tion, then performed the RSA decryption. The server re-
turned 0 to signify the end of decryption. The TCP client
measured the time from writing the ciphertext over the
socket to receiving the reply.
5 Experiments
We performed a series of experiments to demonstrate the
effectiveness of our attack on OpenSSL. In each case we
show the factorization of the RSA modulus N is vul-
nerable. We show that a number of factors affect the
efﬁciency of our timing attack.