##### 5.2.3 解析ResourceId Chunk {.bodycontent-title3}
ResourceId
Chunk主要是用来存放AndroidManifest中用到的系统属性值对应的资源ID，如图5-4所示，比如android：versionCode中的versionCode属性，android是前缀，后面会说到。
::: bodypic-c
![](OEBPS/Images/5a4-i.jpg){.calibre199}
:::
图5-4 ResourceId Chunk结构\
·ChunkType：ResourceId Chunk的类型，固定四个字节0x00080108。
·ChunkSize：ResourceId Chunk的大小，四个字节。
·ResourceIds：ResourceId的内容，这里大小是ResourceId
Chunk大小除以4，减去头部的大小8个字节（ChunkType和ChunkSize）。
解析代码如下：
::: bodypic-c
![](OEBPS/Images/068-2-i.jpg){.calibre200}
:::
::: bodypic-c
![](OEBPS/Images/069-i.jpg){.calibre201}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/069-2-i.jpg){.calibre202}
:::
这里解析出来的ID到底是什么呢？
###### Android中的ID值 {.section-subtitle}
在写Android程序的时候，都会发现有一个R文件，那里面存放着每个资源对应的ID，那么这些ID值是怎么得到的呢？
Package
ID相当于一个命名空间，限定资源的来源。Android系统当前定义了两个资源命令空间，其中一个是系统资源命令空间，其Package
ID等于0x01；另外一个是应用程序资源命令空间，其Package
ID等于0x7f。所有位于\[0x01，0x7f\]之间的Package
ID都是合法的，而在这个范围之外的都是非法的。前面提到的系统资源包package-export.apk的Package
ID就等于0x01，而在应用程序中定义的资源Package
ID的值都等于0x7f，这一点可以通过生成的R.java文件来验证。
Type
ID是指资源的类型ID。资源的类型有animator、anim、color、drawable、layout、menu、raw、string和xml等若干种，每一种都会被赋予一个ID。
Entry
ID是指每一个资源在其所属的资源类型中所出现的次序。注意，不同类型的资源的Entry
ID有可能是相同的，但是由于它们的类型不同，仍然可以通过其资源ID区别开来。
关于资源ID的更多描述，以及资源的引用关系，可以参考frameworks/base/libs/utils目录下的README文件。
可以得知系统资源对应ID的XML文件在这里：frameworks\\base\\core\\res\\res\\values\\public.xml，代码如下：
::: bodypic-c
![](OEBPS/Images/070z-i.jpg){.calibre203}
:::
用上面解析到的ID去public.xml文件中查询一下，得到如下结果：
::: bodypic-c
![](OEBPS/Images/070z1-i.jpg){.calibre204}
:::
查到了，是versionCode，这个系统资源ID存放的文件public.xml是很重要的，后面在讲解resource.arsc文件格式的时候还会用到。
##### 5.2.4 解析Start Namespace Chunk {.bodycontent-title3}
这个Chunk主要包含一个AndroidManifest文件中的命令空间的内容，Android中的XML都是采用Schema格式的，所以肯定有Prefix和URI的，如图5-5所示。
::: bodypic-c
![](OEBPS/Images/5a5-i.jpg){.calibre205}
:::
图5-5 Start Namespace Chunk\
XML格式有两种：DTD和Schema。
说明如下：
·Chunk Type：Chunk的类型，固定四个字节0x00100100。
·Chunk Size：Chunk的大小，四个字节。
·Line Number：在AndroidManifest文件中的行号，四个字节。
·Unknown：未知区域，四个字节。
·Prefix：命名空间的前缀（在字符串中的索引值），比如：android。
·Uri：命名空间的URI（在字符串中的索引值），比如：[http://schemas.android.com/apk/res/android](http://schemas.android.com/apk/res/android){.calibre32
.pcalibre}。
解析代码如下：
::: bodypic-c
![](OEBPS/Images/071-i.jpg){.calibre206}
:::
解析的结果如下：
::: bodypic-c
![](OEBPS/Images/071-2-i.jpg){.calibre207}
:::
这里的内容就是上面我们解析完String之后对应的字符串索引值。这里需要注意的是，一个XML中可能会有多个命名空间，所以这里用Map存储Prefix和URI对应的关系，后面在解析节点内容的时候会用到。
##### 5.2.5 解析Start Tag Chunk {.bodycontent-title3}
这个Chunk主要是存放AndroidManifest.xml中的标签信息，是最核心的内容，当然也是最复杂的内容，如图5-6所示。
::: bodypic-c
![](OEBPS/Images/5a6-i.jpg){.calibre208}
:::
图5-6 Start Tag Chunk结构\
说明如下：
·Chunk Type：Chunk的类型，固定四个字节：0x00100102。
·Chunk Size：Chunk的大小，固定四个字节。
·Line Number：对应于AndroidManifest中的行号，四个字节。
·Unknown：未知领域，四个字节。
·Namespace
Uri：这个标签用到的命名空间的URI，比如用到了android这个前缀，那么就需要用[http://schemas.android.com/apk/res/android](http://schemas.android.com/apk/res/android){.calibre32
.pcalibre}这个URI去获取，四个字节。
·Name：标签名称（在字符串中的索引值），四个字节。
·Flags：标签的类型，四个字节，比如是开始标签还是结束标签等。
·Attribute Count：标签包含的属性个数，四个字节。
·Class Atrribute：标签包含的类属性，四个字节。
·Atrributes：属性内容，每个属性算是一个Entry，Entry是大小为5的字节数组\[Namespace，URI，Name，ValueString，Data\]，在解析的时候需要注意第四个值，要做一次处理：需要右移24位。所以这个字段的大小是："属性个数×5×4个字节"。
解析属性代码如下：
::: bodypic-c
![](OEBPS/Images/072-i.jpg){.calibre209}
:::
::: bodypic-c
![](OEBPS/Images/073-i.jpg){.calibre210}
:::
可以看到，第四个值需要额外的处理一下，就是需要右移24位。解析完属性之后，可以得到一个标签的名称、属性名称、属性值：
::: bodypic-c
![](OEBPS/Images/073-2-i.jpg){.calibre211}
:::
看解析的结果：
::: bodypic-c
![](OEBPS/Images/073-3-i.jpg){.calibre212}
:::
标签manifest包含的属性如下：
::: bodypic-c
![](OEBPS/Images/073-4-i.jpg){.calibre52}
:::
这里有几个问题需要解释一下：
1）为什么看到的是三个属性，但是解析打印的结果是5个？
因为系统在编译apk的时候，会添加两个属性：platformBuildVersionCode和platform-BuildVersionName。
这是发布的设备版本号和版本名称：
::: bodypic-c
![](OEBPS/Images/074-i.jpg){.calibre213}
:::
这个是解析之后的结果。
2）当没有android这样的前缀时，NamespaceUri是null。
::: bodypic-c
![](OEBPS/Images/074-2-i.jpg){.calibre6}
:::
3）当dataType不同，对应的data值也不同，如下所示：
::: bodypic-c
![](OEBPS/Images/074-3-i.jpg){.calibre214}
:::
这个方法就是用来转义的，后面在解析resource.arsc的时候也会用到这个方法。
4）每个属性理论上都会含有一个NamespaceUri，这也决定了属性的前缀Prefix默认都是Android，但是有时候会自定义一个控件，这时候就需要导入NamespaceUri和Prefix了。所以一个XML中可能会有多个Namespace，每个属性都会包含NamespaceUri。
到这里就算解析完大部分的工作了，至于EndTagChunk，与StartTagChunk非常类似，这里就不再详解了，下面代码也加了解释：
::: bodypic-c
![](OEBPS/Images/075-i.jpg){.calibre215}
:::
::: bodypic-c
![](OEBPS/Images/076-i.jpg){.calibre216}
:::
在解析的时候，需要做一个循环操作：
::: bodypic-c
![](OEBPS/Images/076-2-i.jpg){.calibre217}
:::
因为Android中在解析XML的时候提供了很多种方式，但是这里没有用任何一种方式，而是用纯代码编写的，所以用一个循环来遍历解析Tag。其实这种方式类似于用SAX解析XML，这时候本节开头提到的Flag字段就大有用途了。这里还做了一个工作就是将解析之后的XML格式化一下，如下所示：
::: bodypic-c
![](OEBPS/Images/076-3-i.jpg){.calibre218}
:::
::: bodypic-c
![](OEBPS/Images/077-i.jpg){.calibre174}
:::
难度不大，这里也就不继续解释了。有一个地方需要优化，就是可以利用LineNumber属性来精确到格式化后文件的行数，不过这个工作量有点大，这里就不做了。有兴趣的同学可以考虑一下，格式化完之后的结果如下：
::: bodypic-c
![](OEBPS/Images/077-2-i.jpg){.calibre219}
:::
这里就把之前的16进制的内容解析出来了。
还有一个问题，就是看到还有很多@7F070001这类的东西，这其实是资源Id，这需要解析完resource.arsc文件之后，才能对应上这个资源，参见下一章。
当发现可以解析AndroidManifest文件了，那么同样也可以解析其他的XML文件：
::: bodypic-c
![](OEBPS/Images/077-3-i.jpg){.calibre220}
:::
这时解析其他XML时报错了，定位代码发现是在解析String
Chunk的地方报错了，修改如下：
::: bodypic-c
![](OEBPS/Images/078-i.jpg){.calibre221}
:::
因为其他的XML中的字符串格式和AndroidManifest.xml中的不一样，所以这里需要单独解析一下：
::: bodypic-c
![](OEBPS/Images/078-2-i.jpg){.calibre222}
:::
修改之后就可以了。
在反编译的时候，有时候只想反编译AndroidManifest内容，所以ApkTool工具就有点繁琐了，不过网上有个已经写好了的工具AXMLPrinter.jar，这个工具很好用：
::: bodypic-c
![](OEBPS/Images/078-3-i.jpg){.calibre223}
:::
将xxx.xml解析之后输出到demo.xml中即可。
[提示：]{.yanse}AXMLPrinter.jar工具下载地址：
[http://download.csdn.net/detail/jiangwei0910410003/9415323](http://download.csdn.net/detail/jiangwei0910410003/9415323){.calibre32
.pcalibre}\
源代码下载地址：
[http://download.csdn.net/detail/jiangwei0910410003/9415342](http://download.csdn.net/detail/jiangwei0910410003/9415342){.calibre32
.pcalibre}\
AXMLPrinter.jar工具项目见图5-7。
从项目结构可以发现，它用的是Android中自带的Pull解析XML的，主函数是：
::: bodypic-c
![](OEBPS/Images/078-4-i.jpg){.calibre224}
:::
::: bodypic-c
![](OEBPS/Images/079-i.jpg){.calibre225}
:::
::: bodypic-c
![](OEBPS/Images/5a7-i.jpg){.calibre226}
:::