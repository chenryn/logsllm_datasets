### Broader Framework of Intrusion Detection: Related Work
Our current research aims to leverage machine learning techniques to analyze network traffic payloads, which could serve as a trigger for initiating malware cleaning operations. Additionally, we are exploring the integration of moving target defense strategies, such as dynamically changing IP addresses, passwords, or even the physical host machine of a restored container. These measures are designed to complicate and delay attacks, providing more time for the deployment of robust defenses.

### 8. Conclusion
The primary contribution of our work is the introduction of CRIU-MR, a novel method for malware recovery. Unlike traditional approaches that rely on logging or virtual machine (VM)-based methods for malware removal, CRIU-MR utilizes Linux containers and CRIU to rapidly restore a system to a safe state in the event of an infection. Furthermore, our method enhances the speed and efficiency of recovering trusted services post-recovery, with minimal impact on clients.

We conducted two experiments to evaluate the performance of CRIU-MR. The first experiment measured the duration of the malware recovery process, finding that it does not significantly increase the time compared to a standard CRIU checkpoint/restore operation without any additional policies. The second experiment demonstrated that CRIU-MR can effectively restore container processes and TCP connections, even under conditions of high concurrency.

The success of CRIU-MR is contingent upon its integration with other security systems, such as Intrusion Detection Systems (IDSs), firewalls, and antivirus scanners. Information from these systems, combined with static application-specific knowledge, can form a comprehensive policy for malware removal. CRIU-MR can now be utilized by both administrators and researchers to develop responsive and service-preserving systems in the face of malware infections.

### 9. Acknowledgments
This work was supported by the United States Office of Naval Research under Contract N000141612107.

### References
[1] ab - Apache HTTP server benchmarking tool. https://httpd.apache.org/docs/2.4/programs/ab.html. Accessed: 2018-02-05.
[2] Contagio malware dump. http://contagiodump.blogspot.com/. Accessed: 2018-02-05.
[3] CRIU: TCP Repair. https://criu.org/TCP_connection. Accessed: 2018-02-05.
[4] Cuckoo sandbox. https://cuckoosandbox.org/. Accessed: 2018-02-05.
[5] Hybrid analysis. https://www.hybrid-analysis.com/. Accessed: 2018-02-05.
[6] Linux containers - lxc. https://linuxcontainers.org/lxc/. Accessed: 2018-02-05.
[7] Logstash. https://www.elastic.co/products/logstash. Accessed: 2018-02-05.
[8] Lxc security. https://linuxcontainers.org/lxc/security/. Accessed: 2018-02-05.
[9] Metasploit. https://www.metasploit.com/. Accessed: 2018-02-05.
[10] National vulnerability database: CVE-2017-17562 detail. https://nvd.nist.gov/vuln/detail/CVE-2017-17562. Accessed: 2018-02-05.
[11] Timeit. https://docs.python.org/2/library/timeit.html. Accessed: 2018-02-05.
[24] HODSON, D. Remote LD_PRELOAD exploitation. https://www.elttam.com.au/blog/goahead/. Accessed: 2018-02-05.
[25] HSU, F., CHEN, H., RISTENPART, T., LI, J., AND SU, Z. Back to the future: A framework for automatic malware removal and system repair. In Proceedings of the 22nd Annual Computer Security Applications Conference (Washington, DC, USA, 2006), ACSAC '06, IEEE Computer Society, pp. 257–268.
[26] JORDANEY, R., SHARAD, K., DASH, S. K., WANG, Z., PAPINI, D., NOURETDINOV, I., AND CAVALLARO, L. Transcend: Detecting concept drift in malware classification models. In 26th USENIX Security Symposium (USENIX Security 17) (Vancouver, BC, 2017), USENIX Association, pp. 625–642.
[27] KHARAZ, A., ARSHAD, S., MULLINER, C., ROBERTSON, W., AND KIRDA, E. UNVEIL: A large-scale, automated approach to detecting ransomware. In 25th USENIX Security Symposium (USENIX Security 16) (Austin, TX, 2016), USENIX Association, pp. 757–772.
[28] LABS, M. 2017 State of Malware Report. https://www.malwarebytes.com/pdf/white-papers/stateofmalware.pdf. Accessed: 2018-02-05.
[12] Usage of operating systems for websites. https://w3techs.com/technologies/overview/operating_system/all. Accessed: 2018-02-05.
[13] Virus total. https://www.virustotal.com. Accessed: 2018-02-05.
[14] ARAUJO, F., HAMLEN, K. W., BIEDERMANN, S., AND KATZENBEISSER, S. From patches to honey-patches: Lightweight attacker misdirection, deception, and disinformation. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA, 2014), CCS '14, ACM, pp. 942–953.
[15] BARTOS, K., SOFKA, M., AND FRANC, V. Optimized invariant representation of network traffic for detecting unseen malware variants. In 25th USENIX Security Symposium (USENIX Security 16) (Austin, TX, 2016), USENIX Association, pp. 807–822.
[16] CISCO. ClamAV. https://www.clamav.net/. Accessed: 2018-02-05.
[17] CISCO. Snort. https://www.snort.org/. Accessed: 2018-02-05.
[18] DE OLIVEIRA, D. A. S., CRANDALL, J. R., WASSERMANN, G., WU, S. F., SU, Z., AND CHONG, F. T. Execrecorder: VM-based full-system replay for attack analysis and system recovery. In Proceedings of the 1st Workshop on Architectural and System Support for Improving Software Dependability (New York, NY, USA, 2006), ASID '06, ACM, pp. 66–71.
[19] ELBADAWI, K., AND AL-SHAER, E. Timevm: A framework for online intrusion mitigation and fast recovery using multi-time-lag traffic replay. In Proceedings of the 4th International Symposium on Information, Computer, and Communications Security (New York, NY, USA, 2009), ASIACCS '09, ACM, pp. 135–145.
[20] GOEL, A., PO, K., FARHADI, K., LI, Z., AND DE LARA, E. The taser intrusion recovery system. In Proceedings of the Twentieth ACM Symposium on Operating Systems Principles (New York, NY, USA, 2005), SOSP '05, ACM, pp. 163–176.
[21] GOOGLE. Protocol buffers. https://developers.google.com/protocol-buffers/. Accessed: 2018-02-05.
[22] GRATTAFIORI, A. Understanding and hardening linux containers. Whitepaper, NCC Group (2016).
[23] HERTZ, J. Abusing privileged and unprivileged linux containers. Whitepaper, NCC Group (2016).
[29] LABS, S. O. Hiding in plain sight? https://www.sentinelone.com/blog/hiding-plain-sight/. Accessed: 2018-02-05.
[30] LEVER, C., KOTZIAS, P., BALZAROTTI, D., CABALLERO, J., AND ANTONAKAKIS, M. A lustrum of malware network communication: Evolution and insights. In 2017 IEEE Symposium on Security and Privacy (SP) (May 2017), pp. 788–804.
[31] MAEDA, K. Performance evaluation of object serialization libraries in XML, JSON, and binary formats. In Digital Information and Communication Technology and Its Applications (DICTAP), 2012 Second International Conference on (May 2012), pp. 177–182.
[32] MOHAN, C., HADERLE, D., LINDSAY, B., PIRAHESH, H., AND SCHWARZ, P. Aries: A transaction recovery method supporting fine-granularity locking and partial rollbacks using write-ahead logging. ACM Trans. Database Syst. 17, 1 (Mar. 1992), 94–162.
[33] PALEARI, R., MARTIGNONI, L., PASSERINI, E., DAVIDSON, D., FREDRIKSON, M., GIFFIN, J., AND JHA, S. Automatic generation of remediation procedures for malware infections. In Proceedings of the 19th USENIX Conference on Security (Berkeley, CA, USA, 2010), USENIX Security'10, USENIX Association, pp. 27–27.
[34] PASSERINI, E., PALEARI, R., AND MARTIGNONI, L. How good are malware detectors at remediating infected systems? In Proceedings of the 6th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (Berlin, Heidelberg, 2009), DIMVA '09, Springer-Verlag, pp. 21–37.
[35] SHAN, Z., WANG, X., AND C. CHIUEH, T. Malware clearance for secure commitment of OS-level virtual machines. IEEE Transactions on Dependable and Secure Computing 10, 2 (March 2013), 70–83.
[36] SOFTWARE, E. Goahead: Simple, secure embedded web server. https://www.embedthis.com/goahead/. Accessed: 2018-02-05.
[37] SOLTESZ, S., PÖTZL, H., FIUCZYNSKI, M. E., BAVIER, A., AND PETERSON, L. Container-based operating system virtualization: A scalable, high-performance alternative to hypervisors. SIGOPS Oper. Syst. Rev. 41, 3 (Mar. 2007), 275–287.
[38] SUBRAHMANIAN, V., OVELGONNE, M., DUMITRAS, T., AND ADITYA PRAKASH, B. The Global Cyber-Vulnerability Report. 01 2015.
[39] VASUDEVAN, A. Maltrak: Tracking and eliminating unknown malware. In Proceedings of the 2008 Annual Computer Security Applications Conference (Washington, DC, USA, 2008), ACSAC '08, IEEE Computer Society, pp. 311–321.
[40] VIRTUOZZO. CRIU. https://criu.org. Accessed: 2018-02-05.
[41] ZHU, Z., AND DUMITRAS, T. Featuresmith: Automatically engineering features for malware detection by mining the security literature. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA, 2016), CCS '16, ACM, pp. 767–778.

### Appendices

#### A. Logstash Pipelines for Snort and ClamAV Triggers
Logstash [7] is a powerful tool for parsing and forwarding alerts from various sources. The "grok" filter, a key feature in the Logstash pipeline, can parse alerts from arbitrary sources (such as files, network ports, etc.) into easily parseable JSON. 

**Listing 1: Logstash Pipeline for Snort Alert Parsing**
```plaintext
# Standard path for Snort alerts
path => "/var/log/snort/alert"

# Combines multiple lines as a single log event
codec => multiline {
  pattern => "^[\*\*]"
  negate => true
  what => "previous"
}

# Adding a field to the parsed JSON so that CRIU-MR knows how to parse it
add_field => { "trigger_type" => "snort" }

input {
  file {
    path => "/var/log/snort/alert"
  }
}

filter {
  grok {
    match => { "message" => "[\*\*]%{NUMBER:revision}] %{GREEDYDATA:rule} [\*\*]*\n[Priority: %{NUMBER:priority}]\n%{MONTHNUM:month}/%{MONTHDAY:day}-%{HOUR:hour}:%{MINUTE:minute}:%{SECOND:second} %{IP:src_ip}:%{NUMBER:src_port} -> %{IP:dst_ip}:%{NUMBER:dst_port}*" }
  }
}
```

**ClamAV Parsing**
The ClamAV parsing is very similar. The command to execute the scanner is:
```bash
clamscan /path/to/scan --no-summary --infected > output.log
```
The Logstash configuration is slightly modified for the different output format. Specifically, the path is changed to point to `output.log`, and the multiline code is not needed (each line of `output.log` corresponds to one alert). The `add_field` codec is modified for the appropriate trigger type. The grok parsing code in the filter step becomes:
```plaintext
%{GREEDYDATA:filepath} : %{GREEDYDATA:malwarename} FOUND
```

#### B. NFQUEUE Buffer
**Listing 2: NFQUEUE Python Buffer**
```python
import os
from netfilterqueue import NetfilterQueue
import signal

def send_packets(signal, frame):
    print("Sending packets and shutting down")
    os.system("iptables -D INPUT -i lxcbr0 -j NFQUEUE --queue-num 1")
    os.system("iptables -D OUTPUT -o lxcbr0 -j NFQUEUE --queue-num 1")
    os.system("iptables -D FORWARD -o lxcbr0 -j NFQUEUE --queue-num 1")
    for packet in packets:
        packet.accept()
    nfqueue.unbind()

def hold_packet(pkt):
    global packets
    print(f"Holding {pkt}")
    packets.append(pkt)

packets = []
signal.signal(signal.SIGTERM, send_packets)
os.system("iptables -I INPUT -i lxcbr0 -j NFQUEUE --queue-num 1")
os.system("iptables -I OUTPUT -o lxcbr0 -j NFQUEUE --queue-num 1")
os.system("iptables -I FORWARD -o lxcbr0 -j NFQUEUE --queue-num 1")

nfqueue = NetfilterQueue()
nfqueue.bind(1, hold_packet)

try:
    nfqueue.run()
except KeyboardInterrupt:
    send_packets(None, None)
```

This script uses the `netfilterqueue` library to buffer packets intended for the `lxcbr0` interface, which is the default interface used for Linux container networking. Packets are held until the program terminates via a kill signal, at which point they are released to the kernel and forwarded to or from the container.