in size. To obtain the best concrete parameters and security levels, the accumulated error
should be kept as small as possible. More precisely, its coefﬁcients with respect to some
choice of Z-basis should have magnitudes that are as small as possible.
As shown in [LPR13a, Section 6], errors 𝑒 whose coordinates 𝜎𝑖(𝑒) in the canonical
embedding are small and (nearly) independent have correspondingly small coefﬁcients with
respect to the decoding basis of 𝑅∨. In the tweaked setting, where errors 𝑒′ and the decoding
basis both carry an extra 𝑡𝑚 = ˆ𝑚/𝑔𝑚 factor, an equivalent hypothesis is the following,
which we codify as an invariant that applications should maintain:
Invariant 4.2.2 (Error Invariant). For an error 𝑒′ ∈ 𝑅, every coordinate
𝜎𝑖(𝑒′/𝑡𝑚) = ˆ𝑚−1 · 𝜎𝑖(𝑒′ · 𝑔𝑚) ∈ C
should be nearly independent (up to conjugate symmetry) and have relatively “light” (e.g.,
subgaussian or subexponential) tails.
As already mentioned, the invariant is satisﬁed for fresh errors drawn from tweaked
Gaussians, as well as for small linear combinations of such terms. In general, the invariant
is not preserved under multiplication, because the product of two tweaked error terms
99
𝑖 = 𝑡𝑚 · 𝑒𝑖 carries a 𝑡2
𝑒′
factor:
𝑚 factor. Fortunately, this is easily ﬁxed by introducing an extra 𝑔𝑚
𝑔𝑚 · 𝑒′
1 · 𝑒′
2 = 𝑡𝑚 · ( ˆ𝑚 · 𝑒1 · 𝑒2)
satisﬁes the invariant, because multiplication is coordinate-wise under 𝜎. We use this
technique in the implementation of our SHE scheme in section 4.3.
4.2.3 Ring tunneling as key switching.
Abstractly, ring tunneling is an operation that homomorphically evaluates a desired 𝐸𝑝-linear
function 𝐿𝑝 : 𝑅𝑝 → 𝑆𝑝 on a plaintext, by converting its ciphertext over 𝑅′
𝑞 to one over 𝑆′
𝑞.
Operationally, it can be implemented simply as a form of key switching.
Ring tunneling involves two phases: a preprocessing phase where we use the desired
linear function 𝐿𝑝 and the secret keys to produce appropriate hints, and an online phase where
we apply the tunneling operation to a given ciphertext using the hint. The preprocessing
phase is as follows:
1. Extend 𝐿𝑝 to an 𝐸′
𝑝-linear function 𝐿′
𝑝 : 𝑅′
𝑝 → 𝑆′
𝑝 that agrees with 𝐿𝑝 on 𝑅𝑝, as
described above.
2. Lift 𝐿′
𝑝 to a “small” 𝐸′-linear function 𝐿′ : 𝑅′ → 𝑆′ that induces 𝐿′
deﬁne 𝐿′ by 𝐿′(⃗𝑑𝑟′,𝑒′) = ⃗𝑦, where ⃗𝑦 (over 𝑆′) is obtained by lifting ⃗𝑦𝑝 = 𝐿′
using the powerful basis.
𝑝. Speciﬁcally,
𝑝(⃗𝑑𝑟′,𝑒′)
The above lifting procedure is justiﬁed by the following considerations. We want 𝐿′ to
map ciphertext errors in 𝑅′ to errors in 𝑆′, maintaining Invariant 4.2.2 in the respective
𝑟′,𝑒′ · ⃗𝑒 ∈ 𝑅′ has
rings. In the relative decoding basis ⃗𝑑𝑟′,𝑒′, ciphertext error 𝑒 = ⃗𝑑𝑡
𝐸′-coefﬁcients ⃗𝑒 that satisfy the invariant for 𝐸′, and hence for 𝑆′ as well. Because
we want
𝐿′(𝑒) = 𝐿′(⃗𝑑𝑡
𝑟′,𝑒′ · ⃗𝑒) = ⃗𝑦𝑡 · ⃗𝑒 ∈ 𝑆′
100
to satisfy the invariant for 𝑆′, it is therefore best to lift ⃗𝑦𝑝 from 𝑆′
𝑝 to 𝑆′ using the
powerful basis, for the same reasons that apply to modulus switching when rescaling
the 𝑐1 component of a ciphertext.1
3. Prepare an appropriate key-switching hint using keys 𝑠in ∈ 𝑅′ and 𝑠out ∈ 𝑆′. Let ⃗𝑏
be an arbitrary 𝐸′-basis of 𝑅′ (which we also use in the online phase below). Using
a gadget vector ⃗𝑔 over 𝑆′
𝑞, generate key-switching hints 𝐻𝑗 for the components of
𝐿′(𝑠in · ⃗𝑏𝑡), such that
(1, 𝑠out) · 𝐻𝑗 ≈ 𝐿′(𝑠in · 𝑏𝑗) · ⃗𝑔𝑡
(mod 𝑞𝑆′).
(4.2.1)
(As usual, the approximation hides appropriate Ring-LWE errors that satisfy Invari-
ant 4.2.2.) Recall that we can interpret the columns of 𝐻𝑗 as linear polynomials.
The online phase proceeds as follows. As input we are given an MSD-form, linear
𝑞) with associated integer 𝑘 = 0 and arbitrary 𝑙 ∈ Z𝑝,
ciphertext 𝑐(𝑆) = 𝑐0 + 𝑐1𝑆 (over 𝑅′
encrypting a message 𝜇 ∈ 𝑅𝑝 under secret key 𝑠in.
1. Express 𝑐1 uniquely as 𝑐1 = ⃗𝑏𝑡 · ⃗𝑒 for some ⃗𝑒 over 𝐸′
𝑞 (where ⃗𝑏 is the same 𝐸′-basis
of 𝑅′ used in step 3 above).
2. Compute 𝐿′(𝑐0) ∈ 𝑆′
𝑞, apply the core key-switching operation to each 𝑒𝑗 with hint 𝐻𝑗,
and sum the results. Formally, output a ciphertext having 𝑘 = 0, the same 𝑙 ∈ Z𝑝 as
the input, and the linear polynomial
𝑐′(𝑆) = 𝐿′(𝑐0) +
𝐻𝑗 · 𝑔−1(𝑒𝑗)
(mod 𝑞𝑆′).
(4.2.2)
∑︁
𝑗
1The very observant reader may notice that because 𝐿′
𝑝(⃗𝑑𝑟′,𝑒′) = 𝐿𝑝(⃗𝑑𝑟,𝑒) is over 𝑆𝑝, the order in which
we extend and lift does not matter.
101
For correctness, notice that we have
𝑐0 + 𝑠in · 𝑐1 ≈ 𝑞
=⇒ 𝐿′(𝑐0 + 𝑠in · 𝑐1) ≈ 𝑞
𝑝 · 𝑙−1 · 𝜇 (mod 𝑞𝑅′)
𝑝 · 𝑙−1 · 𝐿(𝜇)
(mod 𝑞𝑆′),
(4.2.3)
where the error in the second approximation is 𝐿′ applied to the error in the ﬁrst approxima-
tion, and therefore satisﬁes Invariant 4.2.2 by design of 𝐿′. Then we have
∑︁
𝑐′(𝑠out) ≈ 𝐿′(𝑐0) +
𝐿′(𝑠in · 𝑏𝑗) · ⃗𝑔𝑡 · 𝑔−1(𝑒𝑗)
(Equations (4.2.2), (4.2.1))
𝑗
= 𝐿′(𝑐0 + 𝑠in · ⃗𝑏𝑡 · ⃗𝑒)
= 𝐿′(𝑐0 + 𝑠in · 𝑐1)
𝑝 · 𝑙−1 · 𝐿(𝜇)
≈ 𝑞
(mod 𝑞𝑆′)
(𝐸′-linearity of 𝐿′)
(deﬁnition of ⃗𝑒)
(Equation (4.2.3))
as desired, where the error in the ﬁrst approximation comes from the hints 𝐻𝑗.
Comparison to ring hopping. We now describe the efﬁciency advantages of ring tun-
neling versus ring hopping. We analyze the most natural setting where both the input and
output ciphertexts are in CRT representation; in particular, this allows the process to be
iterated as in [AP13].
Both ring tunneling and ring hopping convert a ciphertext over 𝑅′
𝑞, either
via the greatest common subring 𝐸′
𝑞 (in hopping). In
both cases, the bottleneck is key-switching, where we compute one or more values 𝐻 · 𝑔−1(𝑐)
for some hint 𝐻 and ring element 𝑐 (which may be over different rings). This proceeds in
𝑞 (in tunneling) or the compositum 𝑇 ′
𝑞 to one over 𝑆′
two main steps:
1. We convert 𝑐 from CRT to powerful representation for 𝑔−1-decomposition, and then
convert each entry of 𝑔−1(𝑐) to CRT representation. Each such conversion takes
Θ(𝑛 log 𝑛) = ˜Θ(𝑛) time in the dimension 𝑛 of the ring that 𝑐 resides in.
102
2. We multiply each column of 𝐻 by the appropriate entry of 𝑔−1(𝑐), and sum. Because
both terms are in CRT representation, this takes linear Θ(𝑛) time in the dimension 𝑛
of the ring that 𝐻 is over.
The total number of components of 𝑔−1(𝑐) is the same in both tunneling and hopping, so we
do not consider it further in this comparison.
In ring tunneling, we switch dim(𝑅′/𝐸′) elements 𝑒𝑗 ∈ 𝐸′
𝑞 (see Equation (4.2.2)) using
the same number of hints over 𝑆′
𝑞. Thus the total cost is
dim(𝑅′/𝐸′) · ( ˜Θ(dim(𝐸′)) + Θ(dim(𝑆′))) = ˜Θ(dim(𝑅′)) + Θ(dim(𝑇 ′)).
By contrast, in ring hopping we ﬁrst embed the ciphertext into the compositum 𝑇 ′
𝑞 and
key-switch there. Because the compositum has dimension dim(𝑇 ′) = dim(𝑅′/𝐸′)·dim(𝑆′),
the total cost is
˜Θ(dim(𝑇 ′)) + Θ(dim(𝑇 ′)).
The second (linear) terms of the above expressions, corresponding to step 2, are essentially
identical. For the ﬁrst (superlinear) terms, we see that step 1 for tunneling is at least a
dim(𝑇 ′/𝑅′) = dim(𝑆′/𝐸′) factor faster than for hopping. In typical instantiations, this
factor is a small prime between, say, 3 and 11, so the savings can be quite signiﬁcant in
practice.
4.3 Somewhat-Homomorphic Encryption in Λ∘𝜆
In this section we describe a full-featured somewhat-homomorphic encryption scheme and its
implementation in Λ∘𝜆, using the interfaces described in chapter 3. At the mathematical level,
the system reﬁnes a variety of techniques and features from a long series of works [LPR13b;
BV11b; BV14a; BGV14; Gen+13; LPR13a; AP13]. In addition, we describe some important
generalizations and include new operations like ring-tunneling. Along with the mathematical
103
description of each main component, we present the corresponding Haskell code, showing
how the two forms match very closely.
Note that like all prior implementations of SHE, our implementation has a relatively
low-level interface which corresponds directly to the mathematical operations described
in the literature. Actually using this interface requires a great deal of expertise. Chapter 5
describes a compiler which drastically simpliﬁes the use of this powerful application.
4.3.1 Keys, Plaintexts, and Ciphertexts
The cryptosystem is parameterized by two cyclotomic rings: 𝑅 = 𝒪𝑚 and 𝑅′ = 𝒪𝑚′ where
𝑚|𝑚′, making 𝑅 a subring of 𝑅′. The spaces of keys, plaintexts, and ciphertexts are derived
from these rings as follows:
• A secret key is an element 𝑠 ∈ 𝑅′. Some operations require 𝑠 to be “small;” more
precisely, we need 𝑠 · 𝑔𝑚′ to have small coordinates in the canonical embedding
of 𝑅′ (Invariant 4.2.2). Recall that this is the case for “tweaked” spherical Gaussian
distributions.
• The plaintext ring is 𝑅𝑝 = 𝑅/𝑝𝑅, where 𝑝 is a (typically small) positive integer, e.g.,
𝑝 = 2. For technical reasons, 𝑝 must be coprime with every odd prime dividing 𝑚′. A
plaintext is simply an element 𝜇 ∈ 𝑅𝑝.
𝑞 = 𝑅′/𝑞𝑅′ for some integer modulus 𝑞 ≥ 𝑝 that is coprime
𝑞[𝑆], i.e., one with
𝑞 in an indeterminant 𝑆, which represents the (unknown) secret
𝑞)𝑑+1,
• The ciphertext ring is 𝑅′
with 𝑝. A ciphertext is essentially just a polynomial 𝑐(𝑆) ∈ 𝑅′
coefﬁcients from 𝑅′
key. We often identify 𝑐(𝑆) with its vector of coefﬁcients (𝑐0, 𝑐1, . . . , 𝑐𝑑) ∈ (𝑅′
where 𝑑 is the degree of 𝑐(𝑆).
In addition, a ciphertext carries a nonnegative integer 𝑘 ≥ 0 and a factor 𝑙 ∈ Z𝑝 as
auxiliary information. These values are affected by certain operations on ciphertexts,
as described below.
104
Data types. Following the above deﬁnitions, our data types for plaintexts, keys, and
ciphertexts as follows. The plaintext type PT rp is merely a synonym for its argument
type rp representing the plaintext ring 𝑅𝑝.
The data type SK representing secret keys is deﬁned as follows:
data SK r’ where SK :: ToRational v => v -> r’ -> SK r’
Notice that a value of type SK r’ consists of an element from the secret key ring 𝑅′, and in
addition it carries a rational value (of “hidden” type v) representing the parameter 𝑣 = 𝑟2
for the (tweaked) Gaussian distribution from which the key was sampled. Binding the
parameter to the secret key in this way allows us to automatically generate ciphertexts and
other key-dependent information using consistent error distributions, thereby relieving the
client of the responsibility for managing error parameters across multiple functions.
The data type CT representing ciphertexts is deﬁned as follows:
data Encoding
= MSD | LSD
data CT m zp r’q = CT Encoding Int zp (Polynomial r’q)
The CT type is parameterized by three arguments: a cyclotomic index m and a Z𝑝-representation zp
deﬁning the plaintext ring 𝑅𝑝, and a representation r’q of the ciphertext ring 𝑅′
𝑞. A CT value
has four components: a ﬂag indicating the “encoding” of the ciphertext (MSD or LSD; see
below); the auxiliary integer 𝑘 and factor 𝑙 ∈ Z𝑝 (as mentioned above); and a polynomial
𝑐(𝑆) over 𝑅′
𝑞.
Decryption relations. A ciphertext 𝑐(𝑆) (with auxiliary values 𝑘 ∈ Z, 𝑙 ∈ Z𝑝) encrypting
a plaintext 𝜇 ∈ 𝑅𝑝 under secret key 𝑠 ∈ 𝑅′ satisﬁes the relation
𝑐(𝑠) = 𝑐0 + 𝑐1𝑠 + ··· + 𝑐𝑑𝑠𝑑 = 𝑒
(mod 𝑞𝑅′)
(4.3.1)
105
for some sufﬁciently “small” error term 𝑒 ∈ 𝑅′ such that
𝑒 = 𝑙−1 · 𝑔𝑘
𝑚′ · 𝜇 (mod 𝑝𝑅′).
(4.3.2)
By “small” we mean that the error satisﬁes Invariant 4.2.2, so that all the coefﬁcients of 𝑒
with respect to the decoding basis have magnitudes smaller than 𝑞/2. This will allow us to
correctly recover 𝑒′ ∈ 𝑅′ from its value modulo 𝑞, by “lifting” the latter using the decoding
basis.
We say that a ciphertext satisfying Equations (4.3.1) and (4.3.2) is in “least signiﬁcant
digit” (LSD) form, because the message 𝜇 is encoded as the error term modulo 𝑝. An
alternative form, which is more convenient for certain homomorphic operations, is the “most
signiﬁcant digit” (MSD) form. Here the relation is
𝑐(𝑠) ≈ 𝑞
𝑝 · (𝑙−1 · 𝑔𝑘
𝑚′ · 𝜇)
(mod 𝑞𝑅′),
(4.3.3)
where the approximation hides a small fractional error term (in 1
ant 4.2.2. Notice that the message is represented as a multiple of 𝑞
𝑝 𝑅′) that satisﬁes Invari-
𝑝 modulo 𝑞, hence the
name “MSD.” One can losslessly transform between LSD and MSD forms in linear time,
just by multiplying by appropriate Z𝑞-elements (see [AP13, Appendix A]). Each such
transformation implicitly multiplies the plaintext by some ﬁxed element of Z𝑝, which is why
a ciphertext carries an auxiliary factor 𝑙 ∈ Z𝑝 that must be accounted for upon decryption.
4.3.2 Encryption and Decryption
To encrypt a message 𝜇 ∈ 𝑅𝑝 under a key 𝑠 ∈ 𝑅′, one does the following: