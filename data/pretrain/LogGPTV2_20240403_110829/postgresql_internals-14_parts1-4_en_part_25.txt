(0,2) | 139471 | t | | t | |
(2 rows)
=> ROLLBACK;
Shared Modes
TheSharemodecanbeappliedwhenarowneedstoberead,butitsmodification
by another transaction must be forbidden. The Key Share mode allows updating
anytuplefieldsexceptkeyattributes.
Ofallthesharedmodes,thePostgrecoreusesonlyKeyShare,whichisapplied
whenforeignkeysarebeingchecked.SinceitiscompatiblewiththeNoKeyUpdate
exclusive mode, foreign key checks do not interfere with concurrent updates of
non-keyattributes.Asforapplications,theycanuseanysharedmodestheylike.
Letmestressonceagainthatsimplecommandsneveruserow-levellocks.
=> BEGIN;
=> SELECT * FROM accounts WHERE id = 1 FOR KEY SHARE;
=> SELECT * FROM accounts WHERE id = 2 FOR SHARE;
Hereiswhatweseeintheheaptuples:
=> SELECT * FROM row_locks('accounts',0) LIMIT 2;
ctid | xmax | lock_only | is_multi | keys_upd | keyshr | shr
−−−−−−−+−−−−−−−−+−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−+−−−−−
(0,1) | 139472 | t | | | t |
(0,2) | 139472 | t | | | t | t
(2 rows)
242
13.3 Multitransactions
Thexmax_keyshr_lockbitissetforbothoperations,butyoucanrecognizetheShare
modebyotherhintbits.1
13.3 Multitransactions
Aswehaveseen,thelockingattributeisrepresentedbythexmaxfield,whichisset
totheofthetransactionthathasacquiredthelock.Sohowisthisattributeset
forasharedlockheldbyseveraltransactionsatatime?
When dealing with shared locks, Postgre applies so-called multitransactions
(multixacts).2 Amultitransactionisagroupoftransactionsthatisassignedasepa-
rate.Detailedinformationongroupmembersandtheirlockingmodesisstored
infilesunderthe/pg_multixactdirectory.Forfasteraccess,lockedpagesare
cachedinthesharedmemoryoftheserver;3allchangesareloggedtoensurefault
tolerance.
Multixactshavethesame-bitlengthasregulartransactions,buttheyare
issued independently. It means that transactions and multitransactions can po-
tentiallyhavethesames. Todifferentiatebetweenthetwo,Postgreusesan
additionalhintbit: xmax_is_multi.
Let’saddonemoreexclusivelockacquiredbyanothertransaction(KeyShareand
NoKeyUpdatemodesarecompatible):
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
=> SELECT * FROM row_locks('accounts',0) LIMIT 2;
ctid | xmax | lock_only | is_multi | keys_upd | keyshr | shr
−−−−−−−+−−−−−−−−+−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−+−−−−−
(0,1) | 1 | | t | | |
(0,2) | 139472 | t | | | t | t
(2 rows)
1 include/access/htup_details.h
2 backend/access/transam/multixact.c
3 backend/access/transam/slru.c
243
Chapter13 Row-LevelLocks
Thexmax_is_multibitshowsthatthefirstrowusesamultitransactioninstead
ofaregularone.
Without going into further implementation details,let’s display the information
onallthepossiblerow-levellocksusingthepgrowlocksextension:
=> CREATE EXTENSION pgrowlocks;
=> SELECT * FROM pgrowlocks('accounts') \gx
−[ RECORD 1 ]−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
locked_row | (0,1)
locker | 1
multi | t
xids | {139472,139473}
modes | {"Key Share","No Key Update"}
pids | {30574,30874}
−[ RECORD 2 ]−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
locked_row | (0,2)
locker | 139472
multi | f
xids | {139472}
modes | {"For Share"}
pids | {30574}
It looks a lot like querying the pg_locks view,but the pgrowlocks function has to
accessheappages,ascontainsnoinformationonrow-levellocks.
=> COMMIT;
=> ROLLBACK;
p. Sincemultixactsare-bit,theyaresubjecttowraparoundbecauseofcounter
limits,justlikeregulartransactions. Therefore,Postgrehastoprocessmul-
tixactsinawaysimilartofreezing:oldmultixactsarereplacedwithnewones
(orwitharegulartransactionifonlyonetransactionisholdingthelockbythat
time).1
Butwhileregulartransactionsarefrozenonlyinthexminfield(asanon-empty
xmaxindicatesthatthetupleisoutdatedandwillsoonberemoved),itisthexmax
fieldthathastobefrozenformultitransactions: thecurrentrowversionmaybe
repeatedlylockedbynewtransactionsinasharedmode.
1 backend/access/heap/heapam.c,FreezeMultiXactIdfunction
244
13.4 WaitQueue
Freezing of multitransactions can be managed by server parameters, which are
similar to those provided for regular freezing: vacuum_multixact_freeze_min_age,
vacuum_multixact_freeze_table_age, autovacuum_multixact_freeze_max_age, as well
asvacuum_multixact_failsafe_age. v.
13.4 Wait Queue
Exclusive Modes
Sincearow-levellockisjustanattribute,thequeueisarrangedinanot-so-trivial
way.Whenatransactionisabouttomodifyarow,ithastofollowthesesteps:1
 Ifthexmaxfieldandthehintbitsindicatethattherowislockedinanincom-
patiblemode,acquireanexclusiveheavyweightlockonthetuplethatisbeing
modified.
 Ifnecessary,waituntilalltheincompatiblelocksarereleasedbyrequestinga
lockontheofthexmaxtransaction(orseveraltransactionsifxmaxcontains
amutixact).
 Writeitsownintoxmaxinthetupleheaderandsettherequiredhintbits.
 Releasethetuplelockifitwasacquiredinthefirststep.
Atuplelockisyetanotherkindofheavyweightlocks,whichhasthetupletype(not
tobeconfusedwitharegularrow-levellock).
Itmayseemthatstepsandareredundantanditisenoughtosimplywaituntil
all the locking transactions are over. However, if several transactions are trying
to update one and the same row, all of them will be waiting on the transaction
currentlyprocessingthisrow.Onceitcompletes,theywillfindthemselvesinarace
conditionfortherighttolocktherow,andsome“unlucky”transactionsmayhave
towaitforanindefinitelylongtime. Suchasituationiscalledresourcestarvation.
Atuplelockidentifiesthefirsttransactioninthequeueandguaranteesthatitwill
bethenextonetogetthelock.
1 backend/access/heap/README.tuplock
245
Chapter13 Row-LevelLocks
But you can see it for yourself. Since Postgre acquires many different locks
duringitsoperation,andeachofthemisreflectedinaseparaterowinthepg_locks
table,I am going to create yet another view on top of pg_locks. It will show this
informationinamoreconciseform,keepingonlythoselocksthatwearecurrently
interestedin(theonesrelatedtotheaccountstableandtothetransactionitself,
exceptforanylocksonvirtuals):
=> CREATE VIEW locks_accounts AS
SELECT pid,
locktype,
CASE locktype
WHEN 'relation' THEN relation::regclass::text
WHEN 'transactionid' THEN transactionid::text
WHEN 'tuple' THEN relation::regclass||'('||page||','||tuple||')'
END AS lockid,
mode,
granted
FROM pg_locks
WHERE locktype in ('relation','transactionid','tuple')
AND (locktype != 'relation' OR relation = 'accounts'::regclass)
ORDER BY 1, 2, 3;
Let’sstartthefirsttransactionandupdatearow:
=> BEGIN;
=> SELECT txid_current(), pg_backend_pid();
txid_current | pg_backend_pid
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
139475 | 30874
(1 row)
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
Thetransactionhascompletedallthefourstepsoftheworkflowandisnowholding
alockonthetable:
=> SELECT * FROM locks_accounts WHERE pid = 30874;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
30874 | relation | accounts | RowExclusiveLock | t
30874 | transactionid | 139475 | ExclusiveLock | t
(2 rows)
Startthesecondtransactionandtrytoupdatethesamerow. Thetransactionwill
hang,waitingonalock:
246
13.4 WaitQueue
=> BEGIN;
=> SELECT txid_current(), pg_backend_pid();
txid_current | pg_backend_pid
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
139476 | 30945
(1 row)
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
T1
NoKeyUpdate
ctid
T2 xmin xmax
(0,1) data
T1
tuple(0,1)
Thesecondtransactiononlygetsasfarasthesecondstep. Forthisreason,apart
from locking the table and its own ,it adds two more locks,which are also re-
flectedinthepg_locksview: thetuplelockacquiredatthefirststepandthelockof
theofthesecondtransactionrequestedatthesecondstep:
=> SELECT * FROM locks_accounts WHERE pid = 30945;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
30945 | relation | accounts | RowExclusiveLock | t
30945 | transactionid | 139475 | ShareLock | f
30945 | transactionid | 139476 | ExclusiveLock | t
30945 | tuple | accounts(0,1) | ExclusiveLock | t
(4 rows)
Thethirdtransactionwillgetstuckonthefirststep.Itwilltrytoacquirealockon
thetupleandwillstopatthispoint:
=> BEGIN;
=> SELECT txid_current(), pg_backend_pid();
txid_current | pg_backend_pid
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
139477 | 31016
(1 row)
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
247
Chapter13 Row-LevelLocks
=> SELECT * FROM locks_accounts WHERE pid = 31016;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
31016 | relation | accounts | RowExclusiveLock | t
31016 | transactionid | 139477 | ExclusiveLock | t
31016 | tuple | accounts(0,1) | ExclusiveLock | f
(3 rows)
Thefourthandallthesubsequenttransactionstryingtoupdatethisrowwillnot
differfromthethirdtransactioninthisrespect: allofthemwillbewaitingonthe
sametuplelock.
=> BEGIN;
=> SELECT txid_current(), pg_backend_pid();
txid_current | pg_backend_pid
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
139478 | 31087
(1 row)
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
=> SELECT * FROM locks_accounts WHERE pid = 31016;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
31016 | relation | accounts | RowExclusiveLock | t
31016 | transactionid | 139477 | ExclusiveLock | t
31016 | tuple | accounts(0,1) | ExclusiveLock | f
(3 rows)
T1
NoKeyUpdate
ctid
T2 xmin xmax
(0,1) data
T1
T3 tuple(0,1)
T4
Togetthefullpictureofthecurrentwaits,youcanextendthepg_stat_activityview
withtheinformationonlockingprocesses:
248
13.4 WaitQueue
=> SELECT pid,
wait_event_type,
wait_event,
pg_blocking_pids(pid)
FROM pg_stat_activity
WHERE pid IN (30874,30945,31016,31087);
pid | wait_event_type | wait_event | pg_blocking_pids
−−−−−−−+−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−
30874 | Client | ClientRead | {}
30945 | Lock | transactionid | {30874}
31016 | Lock | tuple | {30945}
31087 | Lock | tuple | {30945,31016}
(4 rows)
Ifthefirsttransactionisaborted,everythingwillworkasexpected: allthesubse-
quenttransactionswillmoveonestepfurtherwithoutjumpingthequeue.
Andyetitismorelikelythatthefirsttransactionwillbecommitted.AttheRepeat-
able Read or Serializable isolation levels,it would result in a serialization failure,
sothesecondtransactionwouldhavetobeaborted1(andallthesubsequenttrans-
actionsinthequeuewouldgetabortedtoo). ButattheReadCommittedisolation
levelthemodifiedrowwillbere-read,anditsupdatewillberetried.
So,thefirsttransactioniscommitted:
=> COMMIT;
The second transaction wakes up and successfully completes the third and the
fourthstepsoftheworkflow:
UPDATE 1
=> SELECT * FROM locks_accounts WHERE pid = 30945;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
30945 | relation | accounts | RowExclusiveLock | t
30945 | transactionid | 139476 | ExclusiveLock | t
(2 rows)
Assoonasthesecondtransactionreleasesthetuplelock,thethirdonealsowakes
up,butitseesthatthexmaxfieldofthenewtuplecontainsadifferentalready.
1 backend/executor/nodeModifyTable.c,ExecUpdatefunction
249
Chapter13 Row-LevelLocks
At this point, the above workflow is over. At the Read Committed isolation level,
onemoreattempttolocktherowisperformed,1butitdoesnotfollowtheoutlined
steps.Thethirdtransactionisnowwaitingforthesecondonetocompletewithout
tryingtoacquireatuplelock:
=> SELECT * FROM locks_accounts WHERE pid = 31016;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
31016 | relation | accounts | RowExclusiveLock | t
31016 | transactionid | 139476 | ShareLock | f
31016 | transactionid | 139477 | ExclusiveLock | t
(3 rows)
Thefourthtransactiondoesthesame:
=> SELECT * FROM locks_accounts WHERE pid = 31087;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
31087 | relation | accounts | RowExclusiveLock | t
31087 | transactionid | 139476 | ShareLock | f
31087 | transactionid | 139478 | ExclusiveLock | t
(3 rows)
Nowboththethirdandthefourthtransactionsarewaitingforthesecondoneto
complete,riskingtogetintoaracecondition.Thequeuehasvirtuallyfallenapart.
T2
NoKeyUpdate
ctid
xmin
xmax
(0,1) data
T1
T3 (0,2)
T1
T4 T2
Ifothertransactionshadjoinedthequeuewhileitstillexisted,allofthemwould