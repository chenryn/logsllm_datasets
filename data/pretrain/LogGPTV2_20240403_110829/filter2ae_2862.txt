# Check Point ZoneAlarm反病毒软件本地提权漏洞分析

##### 译文声明
本文是翻译文章，原文作者为illumant，来源于illumant.com。具体内容和含义请以原文为准。

## 一、概要
Illumant近期在Check Point的ZoneAlarm反病毒软件中发现了一个严重的安全漏洞。攻击者可以利用此漏洞，在反病毒软件运行的情况下，将低权限用户提升至`SYSTEM`权限。该漏洞源于ZoneAlarm在进程间通信（IPC）实现上的不安全性，导致低权限用户能够通过存在缺陷的.NET服务劫持不安全的通信，并注入及执行代码。受影响的.NET服务以`SYSTEM`权限运行，因此被注入的代码也会以同样的高权限运行，从而绕过权限限制，使攻击者获得对系统的完全控制。
本文将从技术角度介绍这一漏洞的发现过程及其如何在本地环境中被利用以执行未授权的代码。漏洞利用过程的演示视频可参考[此处](https://www.illumant.com/blog/zonealarm-anti-virus-exploit-video/)。完整的漏洞利用代码可在我们的[GitHub页面](https://github.com/illumant/ZoneAlarmExploit)上获取。

## 二、背景介绍
Fabius Watson (@FabiusArtrel) 在2018年的Ekoparty会议上发表了一次开创性的演讲，重点介绍了如何滥用WCF端点。同年，他还提交并公开了一些与基于.NET WCF服务的商业产品相关的CVE编号，包括但不限于：
- [CVE-2018-13101 – KioskSimpleService本地权限提升漏洞](https://github.com/VerSprite/research/blob/master/advisories/VS-2018-026.md)
- [CVE-2018-10169 – Proton VPN本地权限提升漏洞](https://github.com/VerSprite/research/blob/master/advisories/VS-2018-017.md)
- [CVE-2018-10170 – NordVPN本地权限提升漏洞](https://github.com/VerSprite/research/blob/master/advisories/VS-2018-018.md)
- [CVE-2018-10190 – Private Internet Access本地权限提升漏洞](https://github.com/VerSprite/research/blob/master/advisories/VS-2018-019.md)

Watson的研究为本项目提供了宝贵的启示。此外，在开发此漏洞的过程中，我们也借鉴了SpecterOps成员Matt Graeber (@mattifestation) 发布的关于[代码签名证书克隆攻击及防御策略](https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec)的技术。

## 三、枚举.NET服务
我们使用由Fabius Watson提供的Python脚本来识别可能存在的易受攻击的服务。该工具旨在查找满足以下条件的所有服务：
- 以`SYSTEM`（即`NT AUTHORITY\SYSTEM`）身份运行；
- 服务对应的程序为.NET应用程序。

脚本首先通过WMIC查询语句定位所有以`SYSTEM`权限运行的服务，随后利用`pefile`模块检查这些服务是否引用了`mscoree.dll`——这是所有.NET应用都会使用的库。脚本输出结果如下图所示。

完成服务枚举后，下一步是利用.NET反编译工具（如dnSpy）来审查这些服务。虽然系统中有许多.NET服务，但并非全部都依赖于WCF。由于所有WCF服务都需要`System.ServiceModel`库的支持，因此我们在dnSpy中搜索对该库的引用。最终，在ZoneAlarm服务中仅发现了`SBACipollaSrvHost.exe`这一个引用了上述库的服务。

## 四、寻找漏洞点
确定了以`SYSTEM`权限运行且基于WCF的服务之后，接下来的任务是检查该服务是否对外暴露了可供利用的方法。理想情况下，某些方法会接受待执行命令作为输入参数，这类方法通常更容易被利用。然而，在其他情形下，找到合适的利用方式可能会更具挑战性。当然，也有可能目标服务并未公开任何可用于代码执行的方法。

在源码审计过程中，我们特别关注了`OnCommandReceived`方法。通过对该方法调用链的跟踪，我们注意到其中有一个名为`ExecuteInstaller`的方法，其功能是执行安装程序。鉴于该方法的名字及其实际用途，我们认为它很可能就是我们要找的目标，于是继续深入研究。

## 五、与目标服务交互
查看`SBACipolla`类的源代码后，我们发现它创建了两个命名管道服务端点：`Cipolla`和`CipollaRoot`。WCF服务支持多种传输协议；如果使用的是HTTP或TCP，则可能存在远程利用的可能性。但在本案例中，服务采用的是命名管道，这意味着我们的目标将是实现本地权限提升。

此外，还有一个名为`AddSecureWcfBehavior`的自定义函数用于处理这两个服务端点的安全性设置。实际上，当客户端尝试连接到命名管道服务器时，服务端首先会验证发起请求的应用程序是否经过Check Point签名，具体步骤如下：
1. 获取客户端PID；
2. 使用PID获取应用程序完整路径；
3. 检查应用是否由有效的证书签名；
4. 确认证书的CN字段以“Check Point Software Technologies.”开头。

如果不满足以上任一条件，服务端将断开与客户端的连接。

## 六、绕过代码签名
最初，我们的计划是通过向经过Check Point签名的合法进程中注入DLL来满足上述安全检查要求，进而与目标服务建立通信。然而，这种方法只有在特定的反病毒功能被禁用时才有效。默认情况下，向大多数进程注入DLL十分困难，因此这不是首选方案。

幸运的是，SpecterOps团队成员Matt Graeber在其发布的[文章](https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec)中介绍了一种PowerShell cmdlet，允许低权限用户生成自签名证书并对代码进行签名，同时让操作系统信任该证书。这为我们提供了一种无需注入其他进程即可签名利用代码并与WCF服务通信的方法。具体操作步骤如下：
```powershell
$cert = New-SelfSignedCertificate -CertStoreLocation cert:\CurrentUser\my -DnsName checkpoint.com -Subject "CN=Check Point Software Technologies Ltd." -Type CodeSigningCert
Export-Certificate -Type CERT -FilePath c:\tmp\MSKernel32Root_Cloned.cer -Cert $cert
Import-Certificate -FilePath c:\tmp\MSKernel32Root_Cloned.cer -CertStoreLocation Cert:\CurrentUser\Root\
Set-AuthenticodeSignature -Certificate $cert -FilePath c:\tmp\exploit.exe
```

## 七、开发利用代码
`SBAStub.dll`（位于`C:\Program Files (x86)\CheckPoint\Endpoint Security\TPCommon\Cipolla`目录下）中定义了一个`SBAStub`对象，负责管理与WCF服务通信所需的所有管道连接，并包含一个名为`SendCommand`的方法。根据名字推测，这个方法应该与目标服务中的`OnCommandReceived`相对应。后者接受一个名为`CommandXML`的字符串参数，并将其直接传递给`ExecuteInstaller`方法。现在让我们来看看`ExecuteInstaller`是如何处理这些参数的：

- 第204-211行：将`CommandXML`反序列化为一个`RunInstallerPackageCommand`对象。这是一个自定义类，包含三个属性：`InstallerPackagePath`（string类型）、`InstallerPackageArguments`（string类型）以及另一个自定义对象`MessageInfo`（属于`SBAMessageInfo`类）。其中最值得注意的是`InstallerPackagePath`，因为它可以用来指定要在服务上下文中启动的程序路径。
- 第224行：验证`InstallerPackagePath`指向的应用程序是否已由Check Point签名。
- 第213-232行：将相关参数加载到一个`Process`对象中，并在第235行启动该进程。

综上所述，我们可以通过这种方式以`SYSTEM`权限启动任意经Check Point签名的应用程序。以下是具体的利用代码示例：

```csharp
// 初始化SBAMessageInfo和RunInstallerPackageCommand对象
var messageInfo = new SBAMessageInfo();
var command = new RunInstallerPackageCommand {
    InstallerPackagePath = "path/to/target/app",
    InstallerPackageArguments = "",
    MessageInfo = messageInfo
};

// 序列化RunInstallerPackageCommand对象
using (var stream = new MemoryStream()) {
    var serializer = new XmlSerializer(typeof(RunInstallerPackageCommand));
    serializer.Serialize(stream, command);
    var xml = Encoding.UTF8.GetString(stream.ToArray());
}

// 创建SBAStub实例并通过SendCommand发送序列化后的对象
var stub = new SBAStub();
stub.SendCommand(xml);
```

为了展示利用过程，我们编写了一个简单的示例程序，它能够在系统中添加一个新的本地管理员账户。我们使用内置的Windows PowerShell cmdlets对该程序进行了签名。随后，目标服务按照预期执行了该程序，实现了权限提升。

## 八、厂商回应
在成功开发出利用代码后，我们立即向Check Point报告了这一漏洞。与其他厂商相比，他们对于安全问题的响应机制更加便捷高效。Check Point官方网站上专门设有用于提交安全问题的表单，在收到报告后迅速与我们取得联系，并在整个修复过程中保持密切合作。

厂商修复了存在问题的代码后，邀请我们验证补丁的有效性。他们的解决方案非常直接：禁止通过WCF调用`ExecuteInstaller`方法，并提高了未授权客户端与目标服务交互的难度。这种处理方式比单纯避免敏感功能通过WCF暴露更为安全可靠。