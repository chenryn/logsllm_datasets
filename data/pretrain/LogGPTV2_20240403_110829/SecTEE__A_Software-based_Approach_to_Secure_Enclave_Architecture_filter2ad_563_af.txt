flexibility of software-based solutions and the security of hardware-
based solutions. fTPM [85] presents the design and implementation
of a TPM 2.0 chip in TEE, and it has been used in millions of mobile
devices. VButton [63] verifies the authenticity of sensitive user
operations to prevent malicious mobile apps and rootkits from
forging legitimate user inputs.
7.2 Secure Enclave Architectures
Secure enclave architectures have been an active field of research
over the past ten years, most of them are implemented by extending
security mechanisms to microprocessors, and some of them require
a small security kernel. AEGIS [100] provides secure execution
environments and fundamental trusted computing features for
security-sensitive code. OASIS [81] offers an isolated execution
environment with basic trusted computing features (attestation
and data binding) on minimally modified commodity CPUs. One
disadvantage of OASIS is that its execution environments are
limited by the cache size. Bastion [12] is a hardware-software
security architecture for security-critical tasks. It extends a memory
authentication mechanism to the microprocessor to provide basic
protection against both software and physical attacks. Intel SGX is
30004000500060007000800090000200400600800Number of accessesExecution time in CPU cycles   Memory access in OP-TEE         Memory access in SecTEE No memory access in OP-TEE    No memory access in SecTEE016324864809611212814416017619220822424025602004006008001000OP-TEESecTEEScoreCandidate  Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1736the most popular secure enclave architecture. Although it achieves
high levels of software and physical security, it is vulnerable to a
variety of software side-channel attacks [9, 14, 32, 41, 73, 110, 114].
Iso-X [20] is a hardware-software co-design that provides isolated
compartments with the remote attestation mechanism.
Flicker [72] is a trusted computing architecture based on the
Late Launch technology [1, 48] and does not need to modify the
CPU. The TrustVisor [71] system overcomes Flicker’s performance
disadvantage by using a software-based “micro-TPM”, executing at
high speed on the platform’s primary CPU, to provide basic trusted
computing primitives. Sancus [79] presents a trusted computing
architecture for low-end systems, which provides rich trusted
computing primitives with minimal (hardware) TCB, such as remote
attestation, strong integrity, and authenticity guarantees.
Sanctum [17], Keystone [60], Komodo [22], and Sanctuary [8]
are modern secure enclave architectures proposed recently, which
aim to provide the same or higher security features as Intel
SGX. Sanctum [17] offers the same software security and trusted
computing features as SGX for the RISC-V CPU architecture. It does
not prevent physical attacks, but adds protection against software
side-channel attacks. After Sanctum, the Keystone project [60] is
proposed, whose goal is to make an open end-to-end framework for
secure enclaves on the RISC-V architecture. Komodo [22] presents
an approach to secure enclave architecture in formally verified
software. Based on TrustZone, Sanctuary [8] provides SGX-like
user-space enclaves without requiring any hardware modifications
and does not increase the TCB of the TEE system, but it does
not consider recently raised threats such as physical attacks and
memory access based side-channel attacks.
7.3 The Page Coloring Technique
Jin et al. [53] present a two-dimension page coloring mechanism
which can improve both on-chip miss rate and cache access latency.
Tam et al. [104] implement a software page coloring mechanism
in the OS which allows for partitioning of the shared L2 cache. Shi
et al. [92] protect crypto keys in virtualized clouds by proposing
a dynamic cache coloring mechanism. StealthMem [55] presents
a system-level protection mechanism against cache side channel
attacks in the cloud. Godfrey et al [31] design and implement two
defenses against the sequential and parallel types of cache-based
side-channel attacks respectively for cloud systems. COLORIS [117]
implements an efficient page re-coloring framework in production
systems, such as Linux.
8 CONCLUSION
In this paper, we present a software-based secure enclave archi-
tecture, SecTEE, for the ARM architecture. SecTEE leverages the
TrustZone isolation mechanism and the SoC-bound execution
environment technology to provide protection against software and
physical attacks and offers necessary trusted computing features
required by secure enclaves. SecTEE also provides protection
against memory access based side-channel attacks by modifying the
kernel’s memory management service to avoid cache conflicts of
enclaves and locking the working enclave pages into the cache,
showing that the design of moving the enclave management
functionality such as memory management and enclave scheduling
to a dedicated secure OS is an efficient way to resist memory access
based side-channel attacks. We implement a prototype system on a
TrustZone-enabled platform, but SecTEE can be applied to other
CPU architectures with isolation mechanisms, such as the RISC-
V architecture with TEE extensions. Although our prototype is
based on OP-TEE, SecTEE is not limited to it and can be directly
applied to other TEE systems by re-implementing the SoC-bound
execution environment and applying the mechanisms of resistance
to side-channel attacks and trusted computing primitives to them.
Our evaluation results show that the trusted computing features of
SecTEE introduce acceptable performance overhead on the runtime
of security-critical code and most performance overhead comes
from the memory protection mechanism.
ACKNOWLEDGEMENT
We would like to thank our anonymous reviewers for their
valuable comments. This research was supported by the National
Natural Science Foundation of China (61802375, 61602325, 61872343,
61602455, U1636216), the National Key R & D Program of China
(2018YFB0904900, 2018YFB0904903).
REFERENCES
[1] AMD64 Virtualization. Secure Virtual Machine Architecture Reference Manual.
AMD Publication, 33047, 2005.
[2] ARM.
Security Technology - Building a Secure System using Trustzone
Technology. ARM Technical White Paper, 2009.
[3] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind,
D. Muthukumaran, D. O’keeffe, M. Stillwell, M. L. Stillwell, D. Goltzsche, D. Eyers,
R. Kapitza, P. Pietzuch, and C. Fetzer. SCONE: Secure Linux Containers with
Intel SGX.
In 12th USENIX Symposium on Operating Systems Design and
Implementation, OSDI’16, pages 689–703. USENIX Association, 2016.
[4] P.-L. Aublin, F. Kelbert, D. O’Keeffe, D. Muthukumaran, C. Priebe, J. Lind,
R. Krahn, C. Fetzer, D. Eyers, and P. Pietzuch. TaLoS: Secure and Transparent
TLS Termination inside SGX Enclaves. Imperial College London, Tech. Rep, 5,
2017.
[5] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma, and
W. Shen. Hypervision Across Worlds: Real-time Kernel Protection from the
ARM TrustZone Secure World. In 21st ACM SIGSAC Conference on Computer
and Communications Security, CCS’14, pages 90–102. ACM, 2014.
[6] R. Boivie and P. Williams. SecureBlue++: CPU Support for Secure Execution.
Technical report, 2012.
[7] B. Bond, C. Hawblitzel, M. Kapritsos, K. R. M. Leino, J. R. Lorch, B. Parno, A. Rane,
S. Setty, and L. Thompson. Vale: Verifying High-Performance Cryptographic
Assembly Code. In 26th USENIX Security Symposium, USENIX Security 17, pages
917–934. USENIX Association, 2017.
[8] F. Brasser, D. Gens, P. Jauernig, A.-R. Sadeghi, and E. Stapf. SANCTUARY:
ARMing TrustZone with User-space Enclaves. In 26th Network and Distributed
System Security Symposium, NDSS 2019, 2019.
[9] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi.
Software Grand Exposure: SGX Cache Attacks Are Practical. In 11th USENIX
Workshop on Offensive Technologies. USENIX Association, 2017.
[10] S. Brenner, C. Wulf, D. Goltzsche, N. Weichbrodt, M. Lorenz, C. Fetzer,
P. Pietzuch, and R. Kapitza. SecureKeeper: Confidential ZooKeeper using Intel
SGX. In 17th International Middleware Conference, pages 14:1–14:13. ACM, 2016.
[11] C. Cao, L. Guan, N. Zhang, N. Gao, J. Lin, B. Luo, P. Liu, J. Xiang, and W. Lou.
CryptMe: Data Leakage Prevention for Unmodified Programs on ARM Devices.
In International Symposium on Research in Attacks, Intrusions, and Defenses,
RAID 2018, pages 380–400. Springer, 2018.
[12] D. Champagne and R. B. Lee. Scalable Architectural Support for Trusted
Software. In 16th IEEE International Symposium on High-Performance Computer
Architecture, pages 1–12. IEEE, 2010.
[13] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. Lai. SgxPectre Attacks: Leaking
Enclave Secrets via Speculative Execution. In 4th IEEE European Symposium on
Security and Privacy, pages 142–157. IEEE, 2019.
[14] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang. Detecting Privileged Side-Channel
Attacks in Shielded Execution with Déjá Vu. In 12th ACM on Asia Conference
on Computer and Communications Security, pages 7–18. ACM, 2017.
[15] P. Colp, J. Zhang, J. Gleeson, S. Suneja, E. De Lara, H. Raj, S. Saroiu, and
A. Wolman. Protecting Data on Smartphones and Tablets from Memory Attacks.
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1737In 20th International Conference on Architectural Support for Programming
Languages and Operating Systems, ASPLOS’15, pages 177–189. ACM, 2015.
[16] V. Costan and S. Devadas. Intel SGX Explained. IACR Cryptology ePrint Archive,
2016/086, 2016.
[17] V. Costan, I. Lebedev, and S. Devadas. Sanctum: Minimal Hardware Extensions
for Strong Software Isolation. In 25th USENIX Security Symposium, USENIX
Security 16, pages 857–874. USENIX Association, 2016.
[18] Y. Ding, R. Duan, L. Li, Y. Cheng, Y. Zhang, T. Chen, T. Wei, and H. Wang.
POSTER: Rust SGX SDK: Towards Memory Safety in Intel SGX Enclave. In 24th
ACM SIGSAC Conference on Computer and Communications Security, CCS’17,
pages 2491–2493. ACM, 2017.
[19] L. Duflot, Y.-A. Perez, G. Valadon, and O. Levillain. Can You Still Trust Your
Network Card. CanSecWest/core10, pages 24–26, 2010.
[20] D. Evtyushkin, J. Elwell, M. Ozsoy, D. Ponomarev, N. A. Ghazaleh, and R. Riley.
Iso-X: A Flexible Architecture for Hardware-Managed Isolated Execution.
In Proceedings of the 47th Annual IEEE/ACM International Symposium on
Microarchitecture, MICRO-47, pages 190–202. IEEE Computer Society, 2014.
[21] D. Evtyushkin, R. Riley, N. Abu-Ghazaleh, and D. Ponomarev. BranchScope: A
New Side-Channel Attack on Directional Branch Predictor. In 23rd International
Conference on Architectural Support for Programming Languages and Operating
Systems, ASPLOS’18, pages 693–707. ACM, 2018.
[22] A. Ferraiuolo, A. Baumann, C. Hawblitzel, and B. Parno. Komodo: Using
Verification to Disentangle Secure-Enclave Hardware from Software. In 26th
Symposium on Operating Systems Principles, SOSP’17, pages 287–305. ACM, 2017.
[23] B. Fisch, D. Vinayagamurthy, D. Boneh, and S. Gorbunov. IRON: Functional
Encryption using Intel SGX. In 24th ACM SIGSAC Conference on Computer and
Communications Security, CCS’17, pages 765–782. ACM, 2017.
[24] Y. Fu, E. Bauman, R. Quinonez, and Z. Lin. SGX-LAPD: Thwarting Controlled
Side Channel Attacks via Enclave Verifiable Page Faults. In 20th International
Symposium on Research in Attacks, Intrusions, and Defenses, RAID 2017, pages
357–380. Springer, 2017.
[25] FuturePlus System. DDR2 800 Bus Analysis Probe. http://www.futureplus.com/
download/datasheet/fs2334_ds.pdf, 2006.
[26] B. Garmany and T. Müller. PRIME: Private RSA Infrastructure for Memory-
In 29th Annual Computer Security Applications Conference,
less Encryption.
ACSAC’13, pages 149–158. ACM, 2013.
[27] Q. Ge, Y. Yarom, and G. Heiser. No Security Without Time Protection: We Need
a New Hardware-Software Contract. In 9th Asia-Pacific Workshop on Systems,
pages 1:1–1:9. ACM, 2018.
[28] X. Ge, H. Vijayakumar, and T. Jaeger. Sprobes: Enforcing Kernel Code Integrity
on the TrustZone Architecture. arXiv preprint arXiv:1410.7747, 2014.
[29] Global Platform Device Technology. TEE client API specification version 1.0.
http://globalplatform.org, 2010.
[30] GlobalPlatform. GlobalPlatform Device Technology: TEE System Architecture.
Technical report, GPD_SPE_009, 2017.
[31] M. M. Godfrey and M. Zulkernine. Preventing Cache-Based Side-Channel
IEEE Transactions on Cloud Computing,
Attacks in a Cloud Environment.
2(4):395–408, 2014.
[32] J. Götzfried, M. Eckert, S. Schinzel, and T. Müller. Cache Attacks on Intel SGX.
In 10th European Workshop on Systems Security, pages 2:1–2:6. ACM, 2017.
[33] B. Gras, K. Razavi, H. Bos, and C. Giuffrida. Translation Leak-aside Buffer:
Defeating Cache Side-channel Protections with TLB Attacks. In 27th USENIX
Security Symposium, USENIX Security 18, pages 955–972. USENIX Association,
2018.
[34] D. Gruss, C. Maurice, K. Wagner, and S. Mangard. Flush+ Flush: A Fast and
Stealthy Cache Attack. In International Conference on Detection of Intrusions
and Malware, and Vulnerability Assessment, pages 279–299. Springer, 2016.
[35] D. Gruss, R. Spreitzer, and S. Mangard. Cache Template Attacks: Automating
Attacks on Inclusive Last-level Caches. In 24th USENIX Security Symposium,
USENIX Security 15, pages 897–912. USENIX Association, 2015.
[36] L. Guan, C. Cao, P. Liu, X. Xing, X. Ge, S. Zhang, M. Yu, and T. Jaeger. Building
a Trustworthy Execution Environment to Defeat Exploits from both Cyber
Space and Physical Space for ARM. IEEE Transactions on Dependable and Secure
Computing, 16(3):438–453, 2018.
[37] L. Guan, J. Lin, B. Luo, and J. Jing. Copker: Computing with Private Keys without
RAM. In 21st Network and Distributed System Security Symposium, NDSS 2014,
pages 23–26, 2014.
[38] L. Guan, J. Lin, B. Luo, J. Jing, and J. Wang. Protecting Private Keys against
Memory Disclosure Attacks using Hardware Transactional Memory. In 36th
IEEE Symposium on Security and Privacy, S&P 2015, pages 3–19. IEEE, 2015.
[39] S. Gueron. A Memory Encryption Engine Suitable for General Purpose
Processors. IACR Cryptology ePrint Archive, 2016/204, 2016.
[40] D. Gullasch, E. Bangerter, and S. Krenn. Cache games–Bringing access-based
In 30th IEEE Symposium on Security and
cache attacks on AES to practice.
Privacy, S&P 2011, pages 490–505. IEEE, 2011.
[41] M. Hähnel, W. Cui, and M. Peinado. High Resolution Side Channels for Untrusted
Operating Systems. In 2017 USENIX Annual Technical Conference, USENIX ATC
17, pages 299–312. USENIX Association, 2017.
[42] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A.
Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest We Remember:
Cold Boot Attacks on Encryption Keys. Communications of the ACM, 52(5):91–98,
2009.
[43] M. Henson and S. Taylor. Beyond Full Disk Encryption: Protection on Security-
Enhanced Commodity Processors. In 11th International Conference on Applied
Cryptography and Network Security, pages 307–321. Springer, 2013.
[44] G. Hotz. PS3 Glitch Hack. http://www.eurasia.nu/wiki/index.php/PS3_Glitch_
Hack, 2010.
[45] Z. Hua, J. Gu, Y. Xia, H. Chen, B. Zang, and H. Guan. vTZ: Virtualizing ARM
TrustZone. In 26th USENIX Security Symposium, USENIX Security 17, pages
541–556. USENIX Association, 2017.
[46] A. Huang. Keeping Secrets in Hardware: The Microsoft XboxTM Case Study. In
4th International Workshop on Cryptographic Hardware and Embedded Systems,
CHES 2002, pages 213–227. Springer, 2002.
[47] M. S. Inci, B. Gülmezoglu, G. I. Apecechea, T. Eisenbarth, and B. Sunar. Seriously,
IACR
get off my cloud! Cross-VM RSA Key Recovery in a Public Cloud.
Cryptology ePrint Archive, 2015/898, 2015.
[48] Intel Corporation. LaGrande Technology Preliminary Architecture Specification.
Document No. 315168 002, 2006.
[49] G. Irazoqui, T. Eisenbarth, and B. Sunar. S$A: A shared cache attack that works
across cores and defies VM sandboxing–and its application to AES. In 36th IEEE
Symposium on Security and Privacy, S&P 2015, pages 591–604. IEEE, 2015.
[50] G. Irazoqui, T. Eisenbarth, and B. Sunar. Cross Processor Cache Attacks. In
11th ACM on Asia conference on computer and communications security, pages
353–364. ACM, 2016.
[51] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar. Wait a Minute! A fast,
Cross-VM Attack on AES. In 17th International Workshop on Recent Advances in
Intrusion Detection, RAID 2014, pages 299–319. Springer, 2014.
[52] D. Ji, Q. Zhang, S. Zhao, Z. Shi, and Y. Guan. MicroTEE: Designing TEE OS
Based on the Microkernel Architecture. In 18th IEEE International Conference on
Trust, Security and Privacy in Computing and Communications, TrustCom 2019.