在这一节中，我们将创建一个基本的查找脚本，用来收集可用的IP地址、Mac地址、基
联，例如，连接在Cisco交换机上的活动服务器的准确Mac地址，或是Brocade光纤交换
络上的设备列表及这些设备的信息。更高级的查找可以用来创建所收集的数据之间的关
SNMP的一个更有意义的用途是查找数据中心。简要地讲，对数据中心的查找会收集网
查找数据中心
易。在接下来的一节，我们写了一个简单的工具来自动发现数据中心，后面将具体进行
进程与并发一章可以看到，使用processing模块来创建处理并发SNMP请求的进程非常容
机的存储层次。
介绍。
简而言之，你不能像使用C语言写等待响应的代码块那样写多线程代码。幸运的是，在
引力的，它仅与支持异步线程的库一起使用。针对Net-SNMP的Python绑定是同步的。
看到上面的结果，在你没高兴过头之前，让我告诉你，在IPython中后台线程是非常有吸
214
们将集中介绍第一个算法。参见例7-3。
样发送一系列SNMP查询，然后运行另一个进程来收集响应。但是正如之前所说的，我
询，解析输出，然后根据结果做进一步查找。另一个会被提及的算法，它类似散弹枪一
描述该算法：发出一些ICMP ping，对于每一个响应的设备，发出一个基本的SNMP查
我们会接触到一些各不相同的查找算法，这里将介绍其中最简单的一个。可以用一句话
有用的基础。我们将通过提取在其他章中介绍的信息，来进一步说明。
本的SNMP信息，并对它们进行记录。这是在你的设备上实现数据中心查找的一个非常
In [16]: jobs[0].result
.1.3.6.1.4.1.8072.3.2.10',
('Linux localhost 2.6.18-8.1.14.el5 #1 SMP Thu Sep 27 18:58:54 EDT 2007. 1686',
Out[16]:
 Dispatching.'
1.3.6.1.2.1.49',
My Local
第7章
ased Access Control Model for SNMp.', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o')
Machin
'.1.3.6.1.2.1.4'
managing
'121219',
and ICMP implementations',
www.TopSage.com
'PI:EMAIL',
'The MIB for Message Processing and
'.1.3.6.1.6.3.16.2.2.1',
TCP imple
lementations'
---
## Page 229
def f(i,q,0q):
class HostRecord(object):
"192.168.1.1"]
q = Queue()
from processing import Process, Queue, Pool
#!/usr/bin/env python
from snmp import 
例7-3：基本数据中心发现
注意：
import time
while True:
def
def
Queue(
们将为SNMP和ping使用相同的模式。
call的调用。对于刚使用过的subprocess.Popen的ping选项，为了保持代码的一致性，我
下面的代码中有一点需要注意：由于Net-SNMP库是同步的，我们将创建一个对subprocess.
sys
time.sleep(.1)
else:
if ret == 0:
ret
time.sleep(.1)
self.snmp_response = snmp_response
self.mac= mac
.sys.exit()
(dt “T) % : S% 1of asuodsa1 e put4 2,uprp s% :xaqunN ssasoidu zurxd
oq.put(ip)
: = subprocess.call("ping -c 1 %s" % ip,
print "Process Number: %s Exit" % i
sys.exit()
pass
"[Host Record('%s','%s','%s')]" % (self.ip,
_(self, ip=None, mac=None, snmp_response=None):
(self):
Snmp
stderr=subprocess.STDoUT)
，"192.19.101.251", "192.19.101.252","192.19.101.253",
stdout=open('/dev/null',
www.TopSage.com
self.snmp_response)
'w'),
SNMP |215
PDG
---
## Page 230
216
于面向对象。但是这会完全变成另一本书，我们在接下来一节对这一点进一步说明。
题需要进一步修复，例如还需要添加Mac地址到HostRecord对象，从而使用代码更加趋
查看一下代码的输出，我们看到这个有趣的查找数据中心的算法的起始部分有一些小问
运行这个脚本，会看到如下所示的输出结果：
print “Main Program finished"
#while not oq.empty():
P.join()
print "main process joins on queue"
finally:
try:
q.putmany(ips)
Process Number:
192.19.101.250:
[root@giftcsllco2][H:4849][3:0]> python discover.py
for
fori
.#1 SMP Mon Oct 22
[Host
Host
Process Number:
Process Number:
192.19.101.251:
#1 SMP Mon 0ct 22 08:32:04
#1 SMP Mon 0ct 22 08:32:04
ost Rec0rd('192.19.101.250'
in Program finished
第7章
Pp = Process(target=snmp_query, args=[i,oq])
i in range(num_workers):
pp.start()
p.start()
P
0 = Process(target=f, args=[i,q,oq])
return h
print h
h.snmp_response = s.query()
Record('192.19.101.253'
Record('192.19.101.252'
 in range(num_workers):
.ip = ipaddr 
=HostRecord()
=Snmp()
print."Process Number: %s" % i
P
is alive
is alive
alive
alive
08:32:04
4EDT2007i686'，)
,'None',
,'None'
'None
,'None','('Linux linux.host 2.6.18-8.1.15.el5
www.TopSage.com
i686'，)
'('Linux 1inux.host 2.6.18-8.1.15.e15
'('Linux 1inux.host 2.6.18-8.1.15.el5
Linux
linux.host 2.6.18-8.1.15.el5
1
')1
PDG
---
## Page 231
次快速测试，通过SNMP获得内存值：
优势明显，但是最好不要进行优化，除非绝对需要。下面复用前面示例的代码来进行一
的主机列表。查询所需要的OID的准确名称是“hrMemorySize”。SNMP在并发处理中
使用选择3，通过SNMP，可以非常容易地产生目录清单报告，报告显示内存量不到1G
选择3
选择2
选择1
很明显，你需要做一个艰难的决定。下面介绍一些可能的选择：
是有几千台自己负责的主机没有1GB内存。
有的系统都需要至少1GB的内存。你恍惚记得绝大多数主机有至少1GB的内存，但是还
些参数集合。下面是一个假想的情况：你正准备对一个重要软件进行升级，并被告之所
一个非常常见的任务是对数据中心或分中心做一个详细的目录清单，计算所有主机的一
并使用它们来完成一些更重要的事情。
非常有用，例如查询一台主机的OS类型。为了做一些更有意义的事情，需要取回多个值
通过SNMP获得单一值的实际意义不大，
使用Net-SNMP获取多个值
In [6]: s.oid = "hrMemorySize"
In [5]: s.Community = "public"
In [4]: s.DestHost ="10.0.1.2"
In [3]: s = Snmp()
netsnmp Snmp
In [2]: who
In [1]: run snmpinput
写一小段脚本，通过SNMP遍历并查询网络中每一设备具有的内存量。
该方法依赖于对活动主机位置的了解。
是需要写一个跨平台的脚本，因为每一种操作系统都会有些许差别。另一个问题是
在一些问题，但是至少理论上通过使用ssh密钥可以被写成脚本。一个明显的问题
通过Shel1登录到每一台主机，然后运行命令来查看具体有多少内存。该方法也存
显，这不是一个很有吸引力的办法。
物理上启动每一台主机然后运行命令或打开主机箱来检查安装了多少内存。很明
hrMemorySize =None （None)
www.TopSage.com
尽管这对于测试响应或执行基于指定值的操作
X
SNMP | 217
---
## Page 232
讲，写可复用的代码是一个好主意，因为它会像滚雪球一样，很快具有越来越大的惯
接下来可以写一个命令行工具，该工具以子网范围和一个可选的OID关键字（默认是
每一台主机，推断出它是否具有2GB的内存，然后将这一信息写入CSV文件，这样就可
基于这些信息，我们现在自动对内存多少进行判断。最为有效的做法应该是这样：查询
的主机进行识别。
一个新的应用程序需至少2GB内存才能安装，老板希望你能对数据中心中具有2GB内存
在接下来将要讲述的事例中，需要对大约2GB内存进行统计。假如你现在被告之，由于
个比1G内存稍低的范围值，比如990MB。
要硬编码成一个绝对值，因为你可能会得到与所期望的值不同的结果。例如希望查询一
是，不同的机器在计算RAM时会用不同的方法。因此，最好在计算时使用模糊参数，不
们提取索引0的值并将其转换为整数。结果值是一个以KB为单位的整数。需要记住的
可以看到，这是一个非常简单易懂的脚本。结果值在第6行作为一个元组返回，因此我
在接下来的示例中，我们写了一个命令行工具，通过SNMP来计算主机中已安装的内存
如果之前你还是没有意识到SNMP的强大之外，那么现在恐怕已经理解了。让我们继续
IPython，你可以对自己写的脚本进行记录，然后将它们转换为更精炼的脚本。通常来
快速直接地完成代码？我们认为在大多数情况下，两者兼得是没有问题的。如果使用
写一个非常长的以后可以复用的脚本，而仅是因为使用的是面向对象技术？还是应该
通常，
hrmemorySize）作为输入。我们希望可以在子网中迭代一个地址范围。
以很容易被加载到Excel和OpenOffice中。
容量：
查找内存
写脚本...
218
性。
2026124
In[27]:print result
fromIPyimportIP
#A command line tool that will grab total memory in a machine
#/usr/bin/env python
import optparse
importnetsnmp
第7章
www.TopSage.com
---
## Page 233
class SnmpSession(object):
class SnmpController(object):
def
p.add_option('
def run(self):
except:
try:
self.Community= Community
self.DestHost = DestHost
p.add_option(
results={}
self.Version = Version
self.oid = oid
default='hrMemorySize')
default='public')
return result
import sys
#Note this is toy code, but let's us know what exception is raised
result = netsnmp.snmpwalk(self.oid,
result = None
except:
try:
oid="hrMemorySize"
Version=2,
if not options.quiet:
ips = IP(arg) #Note need to convert instance to str
suppresses
.PTo--,
[auex jauqns] sord%=asesn
--quiet'
#A place to hold and collect snmp results
'-o',help='object identifier'
www.TopSage.com
version="memorator 0.1.oa",
memory installed",
-9
'-v', action='store_true'
, action='store_true',help='
Community = self.Community)
DestHost = self.DestHost,
Version = self.version,
action='store',
[options]")
, type"int",
SNMP | 219
A
DG
---
## Page 234
220
第7章
start.run()
start = SnmpController()
Runs memorator.
else:
p.print help() #note if nothing is specified on the 
“pro*suotado) % "u\:s% 1oJ s% Kran0 dwNS woxy s4tnsx, suzxd
arguments),results
for i in ips:
#Put everything into an IP/result dictionary
if options.oid == "hrMemorySize":
else:
session = SnmpSession(options.oid,
ipAddr = str(i)
continue
output
Ippvds ‘. :roy Kianb duus Suruuny. 4urid 
 print 'Ignoring %s, not a valid IP adress' % arg
else:
#Non-memory related SNMP query results
output = memory
except: