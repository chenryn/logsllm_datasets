title:TARDIS: Time and Remanence Decay in SRAM to Implement Secure Protocols
on Embedded Devices without Clocks
author:Amir Rahmati and
Mastooreh Salajegheh and
Daniel E. Holcomb and
Jacob Sorber and
Wayne P. Burleson and
Kevin Fu
TARDIS: Time and Remanence Decay in SRAM to Implement Secure
Protocols on Embedded Devices without Clocks
Amir Rahmati
UMass Amherst
Mastooreh Salajegheh
UMass Amherst
Wayne P. Burleson
UMass Amherst
Dan Holcomb
UC Berkeley
Kevin Fu
UMass Amherst
Jacob Sorber
Dartmouth College
Abstract
Lack of a locally trustworthy clock makes security
protocols challenging to implement on batteryless em-
bedded devices such as contact smartcards, contactless
smartcards, and RFID tags. A device that knows how
much time has elapsed between queries from an untrusted
reader could better protect against attacks that depend on
the existence of a rate-unlimited encryption oracle.
The TARDIS (Time and Remanence Decay in SRAM)
helps locally maintain a sense of time elapsed with-
out power and without special-purpose hardware. The
TARDIS software computes the expiration state of a timer
by analyzing the decay of existing on-chip SRAM. The
TARDIS enables coarse-grained, hourglass-like timers
such that cryptographic software can more deliberately
decide how to throttle its response rate. Our experiments
demonstrate that the TARDIS can measure time ranging
from seconds to several hours depending on hardware
parameters. Key challenges to implementing a practi-
cal TARDIS include compensating for temperature and
handling variation across hardware.
Our contributions are (1) the algorithmic building
blocks for computing elapsed time from SRAM decay; (2)
characterizing TARDIS behavior under different tempera-
tures, capacitors, SRAM sizes, and chips; and (3) three
proof-of-concept implementations that use the TARDIS
to enable privacy-preserving RFID tags, to deter double
swiping of contactless credit cards, and to increase the
difﬁculty of brute-force attacks against e-passports.
1
Introduction
“Timestamps require a secure and accurate
system clock—not a trivial problem in itself.”
–Bruce Schneier, Applied Cryptography [43]
Even a perfect cryptographic protocol can fail without
a trustworthy source of time. The notion of a trustworthy
clock is so fundamental that security protocols rarely state
Platform
MIFARE Classic
MIFARE DESFire
UHF RFID tags
TI DST
GSM SIM card
Attack
#Queries
≥1,500
Brute-force [15]
Side-channel [35]
250,000
Side-channel [34]
200
Reverse eng. [7, 8] ∼75,000
Brute-force [16]
150,000
Table 1: Practical attacks on intermittently powered de-
vices. These attacks require repeated interactions between
the reader and the device. Throttling the reader’s attempts
to query the device could mitigate the attacks.
this assumption. While a continuously powered computer
can maintain a reasonably accurate clock without trusting
a third party, a batteryless device has no such luxury.
Contact smartcards, contactless smartcards, and RFIDs
can maintain a locally secured clock during the short
duration of a power-up (e.g., 300 ms), but not after the
untrusted external reader removes power.
It’s Groundhog Day! Again. Unawareness of time has
left contactless payment cards vulnerable to a number
of successful attacks (Table 1). For instance, Kasper et
al. [35] recently demonstrated how to extract the 112-bit
key from a MIFARE DESFire contactless smartcard (used
by the Clipper all-in-one transit payment card1). The
side channel attack required approximately 10 queries/s
for 7 hours. Some RFID credit cards are vulnerable to
replay attacks because they lack a notion of time [21].
Oren and Shamir [34] show that power analysis attacks
on UHF RFID tags can recover the password protecting
a “kill” command with only 200 queries. At USENIX
Security 2005, Bono et al. [8] implemented a brute-force
attack against the Texas Instruments Digital Signature
Transponder (DST) used in engine immobilizers and the
ExxonMobile SpeedPassTM. The ﬁrst stage of the attack
required approximately 75,000 online “oracle” queries to
1No relation to the Clipper Chip [27].
the counters introduce vulnerabilities for denial of service
and are difﬁcult to reset based on time elapsed; one credit
card ceases to function after the counter rolls over [21].
While one can maintain a real-time clock (RTC) with
a battery on low-power mobile devices [40], battery-
less platforms do not support RTCs across power fail-
ures [31, 41, 9] because of the quiescent current draw.
While a timer of just a few seconds would sufﬁce to
increase the difﬁculty of brute-force attacks (Table 1), our
experimental results indicate that an SRAM timer can
reliably estimate the time of power failures from a few
seconds up to several hours. For example, using a 100 µF
capacitor at room temperature, the TARDIS expiration
time can exceed 2 hours of time. We evaluate the energy
and time overhead of the TARDIS, its security against
thermal and power-up attacks, and its precision across
different platforms.
The primary novelty of the TARDIS is that a moder-
ately simple software update can enable a sought-after
security primitive on existing hardware without power.
While data remanence is historically considered an un-
desirable security property [19], the TARDIS uses rema-
nence to improve security. At the heart of the TARDIS are
SRAM cells, which are among the most common building
blocks of digital systems. The ubiquity of SRAM is due
in part to ease of integration: in contrast with ﬂash mem-
ory and DRAM, SRAM requires only a simple CMOS
process and nominal supply voltage.
2
Intermittently Powered Devices: Back-
ground, Observations, and Challenges
New mobile applications with strict size and cost con-
straints, as well as recent advances in low-power micro-
controllers, have given rise to a new class of intermittently
powered device that is batteryless and operates purely on
harvested energy. These devices—including contact and
contactless smart cards and computational RFID tags (CR-
FIDs) [38, 41, 56, 55]— typically have limited com-
putational power, rely on wireless transmissions from a
reader both for energy and for timing information, and
lose power frequently due to minimal energy storage. For
example, when a contactless transit card is brought sufﬁ-
ciently close to a reader in a subway, the card gets enough
energy to perform the requested tasks. As soon as the card
is out of the reader range, it loses power and is unable
to operate until presented to another reader. Since a tag
loses power in the absence of a reader, it doesn’t have any
estimation of time between two interactions with a reader.
A typical secure communication between a reader and a
tag is shown in Figure 2. The tag will only respond to the
reader’s request if it has authenticated itself by correctly
answering the challenge sent by the tag. Two problems
Figure 1: TARDIS estimates time by counting the number
of SRAM cells that have a value of zero in power-up (com-
putes SRAM decay). Initially, a portion of SRAM cells
are set to one (initializes SRAM) and their values decay
during power-off. The dots in the power-off indicate the
arbitrary and unpredictable duration of power-off.
recover the proprietary cipher parameters [7].
A batteryless device could mitigate the risks of brute-
force attacks, side-channel attacks, and reverse engineer-
ing by throttling its query response rate. However, the
tag has no access to a trustworthy clock to implement
throttling. A smartcard does not know whether the last
interrogation was 5 seconds ago or 5 days ago.
Enter the TARDIS. To enable security protocols on in-
termittently powered devices without clocks, we propose
Time and Remanence Decay in SRAM (TARDIS) to keep
track of time without a power source and without addi-
tional circuitry. The TARDIS relies on the behavior of
decaying SRAM circuits to estimate the duration of a
power failure (Figure 1). Upon power-up, the TARDIS
initializes a region in SRAM of an intermittently powered
device. Later, during power-off, the SRAM starts to de-
cay. Upon the next power-up, the TARDIS measures the
fraction of SRAM cells that retain their state. In many
ways, TARDIS operation resembles the functioning of an
hourglass: the un-decayed, decaying, and fully decayed
stages of SRAM are analogous to full, emptying, and
empty hourglass states.
Contributions. Our primary contributions are:
• Algorithmic building blocks to demonstrate the fea-
sibility of using SRAM for a trustworthy source of
time without power.
• Empirical evaluation that characterizes the behavior
of SRAM-based timekeeping under the effects of
temperature, capacitance, and SRAM size.
• Enabling three security applications using SRAM-
based TARDIS: sleepy RFID tags, squealing credit
cards, and forgiving e-passports.
State of the Art. Today, batteryless devices often im-
plement monotonically increasing counters as a proxy
for timekeeping. RFID credit cards occasionally include
transaction counters to defend against replay attacks. Yet
2
SRAM cells decay...TARDISinitializes SRAMpower-uppower-offpower-upTARDIS computes SRAM decayVoltagePurpose
Location
Applications
Storage technology Cross-coupled transistors
Normal operation
Decay state
Constantly powered
50% zero/one bits
SRAM
Fast local memory
Usually on-chip w/ CPU
CPU caches, microcontrollers Desktop computers, notebooks, servers
DRAM
Large main memory
Usually off-chip
Capacitors
Intermittently refreshed
All zero bits
Table 2: Because CPUs of embedded devices generally do not have on-chip DRAM, the TARDIS operates on SRAM.
SRAM and DRAM differ fundamentally in their manufacture, operation, intended use, and state of decay.
system uses a low-power RTC (e.g., NXP PCF2123
RTC chip [32]), the RTC component has to be con-
stantly powered (for example, using a battery). This
choice also increases the cost of manufacturing and
it does not beneﬁt devices that are already deployed.
2. A system can keep time by accessing an external
device (e.g., an RFID tag reader) or by secure time
synchronization [14, 46]. This option introduces
security concerns and may either require signiﬁcant
infrastructure or severely limit range and mobility.
2.1 Threat Model and Assumptions
“...if the attack surface includes an awful lot of
clocks that you do not control, then it’s worth
some effort to try and make your system not de-
pend on them anymore.”–Ross Anderson [30]
The primary goal of the adversary in our model is to dis-
tort the TARDIS timekeeping. Our threat model considers
semi-invasive attacks common to smart cards [15, 35]. We
will not discuss attacks such as buffer overﬂows which
are against the systems that would integrate the TARDIS;
we focus on the attacks aimed at the TARDIS itself. Our
adversarial model considers two classes of attacks: (1)
thermal attacks that use heating and cooling [19] to distort
the speed of memory decay; and (2) power-up attacks that
keep the tag partially powered to prevent memory decay.
3 The TARDIS Algorithms
The TARDIS exploits SRAM decay during a power-off to
estimate time. An example of the effect of time on SRAM
decay in the absence of power is visualized in Figure 3.
In this experiment, a 100× 135 pixel bitmap image of
a different TARDIS [1] was stored into the SRAM of a
TI MSP430 microcontroller. The contents of the memory
were read 150, 190, and 210 seconds after the power was
disconnected. The degree of image distortion is a function
of the duration of power failure.2
2The 14.6 KB image was too large to ﬁt in memory, and therefore
was divided into four pieces with the experiment repeated for each to
Figure 2: The tag cannot determine the time between a
challenge and a response or the time between two sessions.
The reader could respond to the tag as tardily as it likes
or query the tag as quickly as it wants.
arise in this scheme:
• The tag is unaware of the amount of time spent by
the reader to answer the challenge, so an adversary
has an unlimited amount of time to crack a challenge.
• The tag is unaware of the time between two different
queries, so an adversary can send a large number of
queries to the tag in a short time space. This can
make various brute-force attacks possible on these
devices.
Traditionally, computing devices have either had a di-
rect connection to a reliable power supply or large bat-
teries that mask disconnections and maintain a constant
supply of power to the circuit. In either case, a reliable
sense of time can be provided using an internal clock.
Time measurement errors, due to clock drift or power
failures, can be corrected by synchronizing with a trusted
peer or other networked time source. Current embed-
ded systems address the timekeeping issue in one of the
following ways:
1. A system can power a real-time clock (RTC); how-
ever, this is not practical on intermittently powered
devices due to their tight energy budget. Even if the
3
ReaderTagchallengeTime?Time?requestackresponserequestFigure 1 shows the general mechanism of the TARDIS.
When a tag is powered up, the TARDIS initializes a region
in SRAM cells to 1. Once the power is cut off, the SRAM
cells decay and their value might reset from 1 to 0. The
next time the tag is powered up, the TARDIS tracks the
time elapsed after the power loss based on the percentage
of cells remaining 1. Algorithm 1 gives more details about
the implementation of the TARDIS.
MEASURE TEMPERATURE: To detect and compensate
for temperature changes that could affect the decay rate
(Section 6), the TARDIS uses the on-board tempera-
ture sensor found on most microcontrollers. The pro-