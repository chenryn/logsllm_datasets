them into four-byte chunks. Note that this does not af-
fect variable-length ﬁelds which are identiﬁed by ﬁnding the
separators and the direction ﬁelds.
Even with this limitation, our approach is an improvement
over previous work [17], where each binary-encoded byte is
considered a separate ﬁeld. Using that approach, two con-
secutive ﬁxed-length ﬁelds, each of length 4 bytes, would be
considered to be 8 consecutive byte-long ﬁxed-length ﬁelds.
7. EVALUATION
In this section we present the evaluation results of our sys-
tem. We have evaluated our system extensively using 11 dif-
ferent programs implementing 5 diﬀerent protocols (HTTP,
DNS, IRC, ICQ and Samba) as shown in Table 2. Most of
the binaries analyzed are Windows servers but we also in-
clude one ICQ client and a Samba server running on Linux
Fedora Core 5, to show that our system can potentially work
on any IA-32 binary. The test suite shows that our approach
can handle real protocols and real size programs, such as
Apache, Bind and Samba.
The protocols under study include diﬃcult-to-ﬁnd ele-
ments such as length ﬁelds, pointer ﬁelds, and separators,
and we compare our results, obtained with no protocol knowl-
edge, with the manually crafted message formats included
in Wireshark2 one of the state-of-the-art protocol analyzers.
The results show that we correctly identify most ﬁeld bound-
aries and that the diﬀerences are usually due to diﬀerent
implementations handling ﬁelds in diﬀerent ways. Finding
these diﬀerences between implementations is important for
problems such as ﬁngerprint generation, fuzzing, and error
detection.
7.1 Message Format Results
Protocols are comprised of many diﬀerent messages. For
each protocol under study, we select one representative mes-
sage and capture an execution trace while the program pro-
cesses that message. We now present the results of extract-
ing the message format for the diﬀerent messages.
DNS query: The session under study is composed of two
messages: a DNS query and a DNS reply. The query is
the same for all three servers. It requests the IP address of
the host www.example.net and we analyze how the request
2Previously known as Ethereal
Program
Apache
Miniweb
Savant
Bind
MaraDNS
SimpleDNS
TinyICQ
Beware ircd
JoinMe
UnrealIRCd
Sambad
Version
Type
2.2.4
0.8.1
3.1
9.3.4
1.2.12.4
4.00.06
1.2
1.5.7
1.41
3.2.6
3.0.24
HTTP server
HTTP server
HTTP server
DNS server
DNS server
DNS server
ICQ client
IRC server
IRC server
IRC server
Samba server
Size
OS
4,344kB Win.
528kB Win.
280kB Win.
224kB Win.
164kB Win.
432kB Win.
11kB Win.
148kB Win.
365kB Win.
760kB Win.
3,580kB Linux
Table 2: Diﬀerent program binaries used in our eval-
uation. The size represents the main executable if
there are several.
is parsed by each DNS server. Figure 5 shows the message
format obtained from each server compared to the one from
Wireshark, shown on the left.
The results show that we correctly identify the message
format including length ﬁelds and variable ﬁelds. The word
’Unused’ in the ﬁgure indicates that there was no opera-
tion, other than moves, performed by the program on those
speciﬁc bytes. For example, we see that Bind does not per-
form any check on the Identiﬁcation (ID) ﬁeld. Since any
16-bit value is allowed for ID, Bind can move the ﬁeld di-
rectly into the data structure used to construct the reply,
with no further operation. Also, SimpleDNS operates on
the Total Queries ﬁeld but it ignores the Total Answers,
Authority and Additional ﬁelds. This behavior is ﬁne since
those ﬁelds are not used in the request, though it does not
allow to detect malformed requests that set those ﬁelds to
values diﬀerent than zero. Knowledge about diﬀerences be-
tween implementations of the same protocol, such as unused
ﬁelds, is important for applications like ﬁngerprint genera-
tion and error detection.
DNS query using pointer: DNS allows using a com-
pression scheme which eliminates the repetition of domain
names in a message. An entire domain name or a list of la-
bels at the end of a domain name is replaced with a pointer
to another occurance of the same name [27]. To verify the
detection of an pointer ﬁeld, we create a DNS query with
a forward pointer, So the ﬁrst name is www and a pointer
to the next name, which holds the value example.net. The
complete query is www.example.net. This type of forward
pointer is only allowed by the SimpleDNS server. The re-
sults show that the pointer ﬁeld and the length ﬁelds are
properly identiﬁed, the rest of the ﬁelds are similar to the
standard DNS query above. For brevity, the message format
is shown in Figure 8 in Appendix B.2.
ICQ login: The session under study is a login session,
where the client sends a fake username and password to the
server, and the server replies denying the session. We extract
the ﬁeld format from the reply sent by the server.
Again, we properly identify the direction ﬁelds. The main
diﬀerence with the DNS results is that there are some un-
used ﬁxed-length ﬁelds following the variable-length ﬁelds,
and those ﬁxed-length ﬁelds are incorrectly merged into the
variable-length one. This happens because the ICQ client is
adding a constant of value 2 to the value of the length ﬁeld to
skip both the follow-up variable-length target ﬁeld and the
unused ﬁeld simultaneously. This shows that our techniques
are able to identify the pointer increments but are not cur-
Wireshark 0.99.5(cid:13)
Bind 9.3.4(cid:13)
Mara DNS 1.2.12.04(cid:13)
SimpleDNS 4.00.06(cid:13)
Header(cid:13)
Query(cid:13)
Name(cid:13)
0(cid:13)
2(cid:13)
4(cid:13)
6(cid:13)
8(cid:13)
10(cid:13)
12(cid:13)
13(cid:13)
20(cid:13)
21(cid:13)
24(cid:13)
25(cid:13)
27(cid:13)
Identification: Fixed(cid:13)
Flags: Fixed/SubByte(cid:13)
Total Questions: Fixed(cid:13)
Total Answers: Fixed(cid:13)
Total Authority: Fixed(cid:13)
Total Additional: Fixed(cid:13)
Label length: Fixed(cid:13)
Label: Variable [7](cid:13)
“example”(cid:13)
Label length: Fixed(cid:13)
Label: Variable [3](cid:13)
“net”(cid:13)
0(cid:13)
Type: Fixed(cid:13)
Class: Fixed(cid:13)
Unused(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Direction(cid:13)
Variable(cid:13)
Direction(cid:13)
Variable(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Direction(cid:13)
Variable(cid:13)
Direction(cid:13)
Variable(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Unused(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Unused(cid:13)
Fixed(cid:13)
Unused(cid:13)
Direction(cid:13)
Variable(cid:13)
Direction(cid:13)
Variable(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Figure 5: Message format extracted from a DNS query sent to all three DNS servers. On the left we present
the message format from Wireshark.
rently able to describe how the increment was derived from
the direction ﬁeld value, which would be needed to observe
that a constant of value two was added to the length ﬁeld.
For brevity, the message format is presented in Figure 7 in
Appendix B.1 and it shows the Value ID ﬁelds being merged
with the variable-length Field Data ﬁelds preceding them.
Separator
0x0d0a (’CRLF’)
0x2f (’/’)
0x2e (’.’)
0x20 (’ ’)
0x3a20 (’: ’)
Apache Savant Miniweb
ﬁeld
in-ﬁeld
in-ﬁeld
-
in-ﬁeld
ﬁeld
in-ﬁeld
in-ﬁeld
in-ﬁeld
-
ﬁeld
-
in-ﬁeld
in-ﬁeld
-
Table 3: Separators extracted from an HTTP GET
request sent to all three HTTP servers.
HTTP GET query: The session under study is a HTTP
GET request for the index.html webpage and it correspond-
ing reply. We analyze the GET request. So far, we have
shown the message format for protocols that use direction
ﬁelds to mark the boundary of variable-length ﬁelds. But,
separators can also be used to mark those boundaries.
Table 3 shows the results from the separator extraction
module for the three HTTP servers. The HTTP GET re-
quest used, includes several separators but does not include
any direction ﬁelds. Thus, the message format is deter-
mined by the location of the separators. Each row represents
a separator value, shown both in hexadecimal and ASCII,
and each table entry states if the ﬁeld was used or not by
the server. For brevity, rather than the full scope (i.e., all
sequences where it appeared), we show a tag with values
ﬁeld/in-ﬁeld to indicate the scope of the separator.
The results show that the three servers use a similar set
of separators. For all three servers, the ﬁeld separator has
been properly expanded to two bytes (0x0d0a). The space
character (0x20), or semicolon and space for Apache, is used
to parse the ﬁelds, separating the ﬁeld name from the ﬁeld
data. Another separator is the dot character (0x2e), used
to ﬁnd the ﬁle extension in all three servers, plus being used
by Apache to parse the IP address in the Host ﬁeld. Finally,
Apache and Savant use the slash character (0x2f) to ﬁnd the
beginning of the path in the URL.
Samba negotiate protocol request: The session un-
der study is a Samba negotiate protocol request and its cor-
responding reply. We analyze the request. So far, the ex-
tracted message format have used either only direction ﬁelds
or only separators to mark the boundary of variable-length
ﬁelds. The Samba negotiate protocol request uses both. It
uses length ﬁelds to mark the end of the Samba request,
and the null byte (0x00) to mark the end of variable-length
strings. Figure 6 shows the results, after both separators
and direction ﬁelds have been extracted. On the left is the
message format while on the right we zoom into the requested
dialects ﬁeld which uses the separators.
The message format shows both the Samba word count
and byte count (near the bottom) combined together into a
single direction ﬁeld. This is because the server uses both
ﬁelds simultaneously to establish the total length of the re-
quest (2*wordCount + byteCount). The Netbios length ﬁeld
near the top is reported as a ﬁxed-length ﬁeld because al-
though the server combines the two bytes of the ﬁeld into a
two-byte ﬁeld, it does not uses the resulting ﬁeld. Instead,
it uses the Samba word count and byte count ﬁelds to iden-
tify the end of the Samba request. In the requested dialects
ﬁeld, we can see the separators being used at the end of each
string, and that the Samba server ignores the one byte ﬁeld
describing the type of each string (i.e., the buﬀer format).
7.2 Keyword Results
We now present the keyword extraction results. Table 4
shows the keywords found in the same HTTP GET request
used in the separator’s results. An entry with value Yes
means that the keyword was found at the proper position,
while an entry with value NS means that the keyword was
not found because the server in its default conﬁguration does
not support those keywords. Thus, the server in other con-
ﬁgurations, for example when loading diﬀerent modules in
Apache, might support those keywords.
The results show no missing supported keywords. They
also show some instances, where there is a partial keyword
match (shown with the partial keyword in the table entry).
This happens because there might be two keywords that
start the same. Thus, when the server compares the received
keyword, with its set of supported keywords, it will obtain a
sequence of true comparisons up to the ﬁrst diﬀerence, and
that sequence of true comparisons is output by our module
Wireshark 0.99.5(cid:13)
Samba 3.0.24(cid:13)