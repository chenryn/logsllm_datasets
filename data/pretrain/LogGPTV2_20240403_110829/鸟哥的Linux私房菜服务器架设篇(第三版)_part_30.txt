媒体的 MTU 数值， 那么每个可以调整的主机就得要先使用 ifcofig 或 ip 先
将 MTU 调大，然后再去进行侦测， 否则就会出现像上面提供的案例一样，可能
PI:EMAIL
会出现错误讯息的！
不过这个 MTU 不要随便调整啊！除非真的有问题。通常调整 MTU 的时间是在这
个时候：
o 因为全部的主机群都是在内部的区网，例如丛集架构 (cluster) 的
环境下， 由于内部的网络节点都是我们可以控制的，因此可以透过修改
MTU 来增进网络效能；
o 因为操作系统默认的 MTU 与你的网域不符，导致某些网站可以顺利
联机，某些网站则无法联机。 以 Windows 操作系统作为联机分享的主机
时，在 Client 端挺容易发生这个问题；
如果是要连上 Internet 的主机，注意不要随便调整 MTU ，因为我们无法知道
Internet 上面的每部机器能够支持的 MTU 到多大，因为......不是我们能够管
的到的嘛 ^_^！ 另外，其实每种联机方式都有不同的 MTU 值，常见的各种接口
的 MTU 值分别为︰
网络接口 MTU
Ethernet 1500
PPPoE 1492
Dial-up(Modem) 576
5.2.2 两主机间各节点分析： traceroute
我们前面谈到的指令大多数都是针对主机的网络参数设定所需要的，而 ping 是两
部主机之间的回声与否判断， 那么有没有指令可以追踪两部主机之间通过的各个节点
(node) 通讯状况的好坏呢？举例来说，如果我们联机到 yahoo 的速度比平常慢，你觉
得是 (1)自己的网络环境有问题？ (2)还是外部的 Internet 有问题？如果是 (1) 的
话，我们当然需要检查自己的网络环境啊，看看是否又有谁中毒了？但如果是 Internet
的问题呢？那只有‘等等等’啊！ 判断是 (1) 还是 (2) 就得要使用 traceroute 这
个指令啦！
[root@www ~]# traceroute [选项与参数] IP
选项与参数：
-n ：可以不必进行主机的名称解析，单纯用 IP ，速度较快！
-U ：使用 UDP 的 port 33434 来进行侦测，这是预设的侦测协议；
-I ：使用 ICMP 的方式来进行侦测；
PI:EMAIL
-T ：使用 TCP 来进行侦测，一般使用 port 80 测试
-w ：若对方主机在几秒钟内没有回声就宣告不治...预设是 5 秒
-p 埠号：若不想使用 UDP 与 TCP 的预设埠号来侦测，可在此改变埠号。
-i 装置：用在比较复杂的环境，如果你的网络接口很多很复杂时，才会用到
这个参数；
举例来说，你有两条 ADSL 可以连接到外部，那你的主机会有两个
ppp，
你可以使用 -i 来选择是 ppp0 还是 ppp1 啦！
-g 路由：与 -i 的参数相仿，只是 -g 后面接的是 gateway 的 IP 就是了。
# 范例一：侦测本机到 yahoo 去的各节点联机状态
[root@www ~]# traceroute -n tw.yahoo.com
traceroute to tw.yahoo.com (119.160.246.241), 30 hops max, 40 byte
packets
1 192.168.1.254 0.279 ms 0.156 ms 0.169 ms
2 172.20.168.254 0.430 ms 0.513 ms 0.409 ms
3 10.40.1.1 0.996 ms 0.890 ms 1.042 ms
4 203.72.191.85 0.942 ms 0.969 ms 0.951 ms
5 211.20.206.58 1.360 ms 1.379 ms 1.355 ms
6 203.75.72.90 1.123 ms 0.988 ms 1.086 ms
7 220.128.24.22 11.238 ms 11.179 ms 11.128 ms
8 220.128.1.82 12.456 ms 12.327 ms 12.221 ms
9 220.128.3.149 8.062 ms 8.058 ms 7.990 ms
10 * * *
11 119.160.240.1 10.688 ms 10.590 ms 119.160.240.3 10.047 ms
12 * * * <==可能有防火墙装置等情况发生所致
这个 traceroute 挺有意思的，这个指令会针对欲连接的目的地之所有 node 进行 UDP
的逾时等待， 例如上面的例子当中，由鸟哥的主机连接到 Yahoo 时，他会经过 12 个
节点以上，traceroute 会主动的对这 12 个节点做 UDP 的回声等待，并侦测回复的时
间，每节点侦测三次，最终回传像上头显示的结果。 你可以发现每个节点其实回复的
时间大约在 50 ms 以内，算是还可以的 Internet 环境了。
比较特殊的算是第 10/12 个，会回传星号的，代表该 node 可能设有某些防护措
施，让我们发送的封包信息被丢弃所致。 因为我们是直接透过路由器转递封包，并没
有进入路由器去取得路由器的使用资源，所以某些路由器仅支持封包转递， 并不会接
受来自客户端的各项侦测啦！此时就会出现上述的问题。因为 traceroute 预设使用
UDP 封包，如果你想尝试使用其他封包， 那么 -I 或 -T 可以试看看啰！
由于目前 UDP/ICMP 的攻击层出不穷，因此很多路由器可能就此取消这两个封包的
响应功能。所以我们可以使用 TCP 来侦测呦！ 例如使用同样的方法，透过等待时间 1
秒，以及 TCP 80 埠口的情况下，可以这样做：
PI:EMAIL
[root@www ~]# traceroute -w 1 -n -T tw.yahoo.com
5.2.3 察看本机的网络联机与后门： netstat
如果你觉得你的某个网络服务明明就启动了，但是就是无法造成联机的话，那么应
该怎么办？ 首先你应该要查询一下自己的网络接口所监听的端口口 (port) 来看看是
否真的有启动，因为有时候屏幕上面显示的 [OK] 并不一定是 OK 啊！ ^_^
[root@www ~]# netstat -[rn] <==与路由有关的参数
[root@www ~]# netstat -[antulpc] <==与网络接口有关的参数
选项与参数：
与路由 (route) 有关的参数说明：
-r ：列出路由表(route table)，功能如同 route 这个指令；
-n ：不使用主机名与服务名称，使用 IP 与 port number ，如同 route -n
与网络接口有关的参数：
-a ：列出所有的联机状态，包括 tcp/udp/unix socket 等；
-t ：仅列出 TCP 封包的联机；
-u ：仅列出 UDP 封包的联机；
-l ：仅列出有在 Listen (监听) 的服务之网络状态；
-p ：列出 PID 与 Program 的档名；
-c ：可以设定几秒钟后自动更新一次，例如 -c 5 每五秒更新一次网络状态
的显示；
# 范例一：列出目前的路由表状态，且以 IP 及 port number 显示：
[root@www ~]# netstat -rn
Kernel IP routing table
Destination Gateway Genmask Flags MSS Window
irtt Iface
192.168.1.0 0.0.0.0 255.255.255.0 U 0 0
0 eth0
169.254.0.0 0.0.0.0 255.255.0.0 U 0 0
0 eth0
0.0.0.0 192.168.1.254 0.0.0.0 UG 0 0
0 eth0
# 其实这个参数就跟 route -n 一模一样，对吧！这不是 netstat 的主要功
能啦！
# 范例二：列出目前的所有网络联机状态，使用 IP 与 port number
[root@www ~]# netstat -an
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address Foreign Address State
....(中间省略)....
PI:EMAIL
tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN
tcp 0 52 192.168.1.100:22 192.168.1.101:1937
ESTABLISHED
tcp 0 0 :::22 :::* LISTEN
....(中间省略)....
Active UNIX domain sockets (servers and established)
Proto RefCnt Flags Type State I-Node Path
unix 2 [ ACC ] STREAM LISTENING 11075
@/var/run/hald/dbus-uukdg1qMPh
unix 2 [ ACC ] STREAM LISTENING 10952
/var/run/dbus/system_bus_socket
unix 2 [ ACC ] STREAM LISTENING 11032
/var/run/acpid.socket
....(底下省略)....
netstat 的输出主要分为两大部分，分别是 TCP/IP 的网络接口部分，以及传统的 Unix
socket 部分。 还记得我们在基础篇里面曾经谈到档案的类型吗？那个 socket 与
FIFO 档案还记得吧？ 那就是在 Unix 接口用来做为程序数据交流的接口了，也就是上
头表格内看到的 Active Unix domain sockets 的内容啰～
通常鸟哥都是建议加上‘ -n ’这个参数的，因为可以避过主机名与服务名称的反
查，直接以 IP 及端口口号码 (port number) 来显示，显示的速度上会快很多！至于
在输出的讯息当中， 我们先来谈一谈关于网络联机状态的输出部分，他主要是分为底
下几个大项：
 Proto：该联机的封包协议，主要为 TCP/UDP 等封包；
 Recv-Q：非由用户程序连接所复制而来的总 bytes 数；
 Send-Q：由远程主机所传送而来，但不具有 ACK 标志的总 bytes 数， 意
指主动联机 SYN 或其他标志的封包所占的 bytes 数；
 Local Address：本地端的地址，可以是 IP (-n 参数存在时)， 也可以是
完整的主机名。使用的格是就是‘ IP:port ’只是 IP 的格式有 IPv4 及 IPv6
的差异。 如上所示，在 port 22 的接口中，使用的 :::22 就是针对 IPv6 的
显示，事实上他就相同于 0.0.0.0:22 的意思。 至于 port 25 仅针对 lo 接口
开放，意指 Internet 基本上是无法连接到我本机的 25 埠口啦！
 Foreign Address：远程的主机 IP 与 port number
 stat：状态栏，主要的状态含有：
o ESTABLISED：已建立联机的状态；
o SYN_SENT：发出主动联机 (SYN 标志) 的联机封包；
o SYN_RECV：接收到一个要求联机的主动联机封包；
o FIN_WAIT1：该插槽服务(socket)已中断，该联机正在断线当中；
o FIN_WAIT2：该联机已挂断，但正在等待对方主机响应断线确认的封
包；
o TIME_WAIT：该联机已挂断，但 socket 还在网络上等待结束；
o LISTEN：通常用在服务的监听 port ！可使用‘ -l ’参数查阅。
PI:EMAIL
基本上，我们常常谈到的 netstat 的功能，就是在观察网络的联机状态了，而网
络联机状态中， 又以观察‘我目前开了多少的 port 在等待客户端的联机’以及 ‘目
前我的网络联机状态中，有多少联机已建立或产生问题’最常见。 那你如何了解与观
察呢？通常鸟哥是这样处理的：
# 范例三：秀出目前已经启动的网络服务
[root@www ~]# netstat -tulnp
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address Foreign Address State
PID/Program name
tcp 0 0 0.0.0.0:34796 0.0.0.0:* LISTEN
987/rpc.statd
tcp 0 0 0.0.0.0:111 0.0.0.0:* LISTEN
969/rpcbind
tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN
1231/master
tcp 0 0 :::22 :::* LISTEN
1155/sshd
udp 0 0 0.0.0.0:111 0.0.0.0:*
969/rpcbind
....(底下省略)....
# 上面最重要的其实是那个 -l 的参数，因为可以仅列出有在 Listen 的
port