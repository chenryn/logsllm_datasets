title:Screen after Previous Screens: Spatial-Temporal Recreation of Android
App Displays from Memory Images
author:Brendan Saltaformaggio and
Rohit Bhatia and
Xiangyu Zhang and
Dongyan Xu and
Golden G. Richard III
Screen after Previous Screens:  
Spatial-Temporal Recreation of Android App 
Displays from Memory Images
Brendan Saltaformaggio, Rohit Bhatia, Xiangyu Zhang, and Dongyan Xu, Purdue University; 
Golden G. Richard III, University of New Orleans
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/saltaformaggio
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Screen After Previous Screens: Spatial-Temporal Recreation of Android
App Displays from Memory Images
Brendan Saltaformaggio1, Rohit Bhatia1, Xiangyu Zhang1, Dongyan Xu1, Golden G. Richard III2
1Department of Computer Science and CERIAS, Purdue University
{bsaltafo, bhatia13, xyzhang, dxu}@cs.purdue.edu
2Department of Computer Science, University of New Orleans
PI:EMAIL
Abstract
Smartphones are increasingly involved in cyber and real
world crime investigations.
In this paper, we demon-
strate a powerful smartphone memory forensics tech-
nique, called RetroScope, which recovers multiple previ-
ous screens of an Android app — in the order they were
displayed — from the phone’s memory image. Differ-
ent from traditional memory forensics, RetroScope en-
ables spatial-temporal forensics, revealing the progres-
sion of the phone user’s interactions with the app (e.g.,
a banking transaction, online chat, or document editing
session). RetroScope achieves near perfect accuracy in
both the recreation and ordering of reconstructed screens.
Further, RetroScope is app-agnostic, requiring no knowl-
edge about an app’s internal data deﬁnitions or rendering
logic. RetroScope is inspired by the observations that (1)
app-internal data on previous screens exists much longer
in memory than the GUI data structures that “package”
them and (2) each app is able to perform context-free re-
drawing of its screens upon command from the Android
framework. Based on these, RetroScope employs a novel
interleaved re-execution engine to selectively reanimate
an app’s screen redrawing functionality from within a
memory image. Our evaluation shows that RetroScope
is able to recover full temporally-ordered sets of screens
(each with 3 to 11 screens) for a variety of popular apps
on a number of different Android devices.
1
Introduction
As smartphones become more pervasive in society, they
are also increasingly involved in cyber and real world
crimes. Among the many types of evidence held by a
phone, an app’s prior screen displays may be the most
intuitive and valuable to an investigation — revealing
the intent, targets, actions, and other contextual evidence
of a crime.
In this paper, we demonstrate a powerful
forensics capability for Android phones: recovering mul-
tiple previous screens displayed by each app from the
phone’s memory image. Different from traditional mem-
ory forensics, this capability enables spatial-temporal
forensics by revealing what the app displayed over a time
interval, instead of a single time instance. For example,
investigators will be able to recover the multiple screens
of a banking transaction, deleted messages from an on-
line chat, and even a suspect’s actions before logging out
of an app.
Our previous effort
in memory forensics, GUI-
TAR [35], provides a related (but less powerful) capa-
bility:
recovering the most recent GUI display of an
Android app from a memory image. We call this GUI
display Screen 0. Unfortunately, GUITAR is not able
to reconstruct the app’s previous screens, which we call
Screens -1, -2, -3... to reﬂect their reverse temporal or-
der. For example, if the user has logged out of an app
before the phone’s memory image is captured, GUITAR
will only be able to recover the “log out” screen, which
is far less informative than the previous screens showing
the actual app activities and their progression.
To address this limitation, we present a novel spatial-
temporal solution, called RetroScope, to reconstruct an
Android app’s previous GUI screens (i.e., Screens 0, -1,
-2... -N, N > 0). RetroScope is app-agnostic and does
not require any app-speciﬁc knowledge (i.e., data struc-
ture deﬁnitions and rendering logic). More importantly,
RetroScope achieves near perfect accuracy in terms of
(1) reconstructed screen display and (2) temporal order
of the reconstructed screens. To achieve these proper-
ties, RetroScope overcomes signiﬁcant challenges. As
indicated in [35], GUI data structures created for previ-
ous screens get overwritten almost completely, as soon as
a new screen is rendered. This is exactly why GUITAR
is unable to reconstruct Screen -i (i > 0), as it cannot ﬁnd
GUI data structures belonging to the previous screens. In
other words, GUITAR is capable of “spatial” — but not
“spatial-temporal” — GUI reconstruction. This limita-
tion motivated us to seek a fundamentally different ap-
USENIX Association  
25th USENIX Security Symposium  1137
proach for RetroScope.
During our research, we noticed that although the
GUI data structures for app screens dissolve quickly,
the actual app-internal data displayed on those screens
(e.g., chat texts, account balances, photos) have a much
longer lifespan. Section 2 presents our proﬁling results
to demonstrate this observation. However, if we follow
the traditional memory forensics methodology of search-
ing for [16,25,26,41] and rendering [35–37] instances of
those app data, our solution would require app-speciﬁc
data structure deﬁnitions and rendering logic, breaking
the highly desirable app-agnostic property.
We then turned our attention to the (app-agnostic) dis-
play mechanism supplied by the Android framework,
which revealed the most critical (and interesting) idea
behind RetroScope. A smartphone displays the screen of
one app at a time; hence the apps’ screens are frequently
switched in and out of the device’s display, following the
user’s actions. Further, when the app is brought back to
the foreground, its entire screen must be redrawn from
scratch: by ﬁrst “repackaging” the app’s internal data
to be displayed into GUI data structures, and then ren-
dering the GUI data structures according to their layout
on the screen. Now, recall that the “old” app-internal
data (displayed on previous screens) are still in mem-
ory. Therefore, we propose redirecting Android’s “draw-
from-scratch” mechanism to those old app data.
Intu-
itively, this would cause the previous screens to be re-
built and rendered. This turns out to be both feasible and
highly effective, thus enabling the development of Ret-
roScope.
Based on the observations above, RetroScope is de-
signed to trigger the re-execution of an app’s screen-
drawing code in-place within a memory image — a pro-
cess we call selective reanimation. During selective re-
animation, the app’s data and drawing code from the
memory image are logically interleaved with a live sym-
biont app, using our interleaved re-execution engine and
state interleaving ﬁnite automata (Section 3.2). This al-
lows RetroScope (within a live Android environment)
to issue standard GUI redrawing commands to the in-
terleaved execution of the target app, until the app has
redrawn all different (previous) screens that its internal
data can support. In this way, RetroScope acts as a “pup-
peteer,” steering the app’s code and data (the “puppet”)
to reproduce its previous screens.
We have performed extensive evaluation of Retro-
Scope, using memory snapshots from 15 widely used
Android apps on three commercially available phones.
For each of these apps, RetroScope accurately recov-
ered multiple (ranging from 3 to 11) previous screens.
Our results show that RetroScope-recovered app screens
provide clear spatial-temporal evidence of a phone’s ac-
tivities with high accuracy (only missing 2 of 256 re-
coverable screens) and efﬁciency (10 minutes on aver-
age to recover all screens for an app). We have open-
sourced RetroScope1 to encourage reproduction of our
results and further research into this new memory foren-
sics paradigm.
2 Problem and Opportunity
Different from typical desktop applications, frequent
user interactions with Android apps require their screen
display to be highly dynamic. For example, nearly all
user interactions (e.g., clicking the “Compose Email”
button on the Inbox screen) and asynchronous notiﬁca-
tions (e.g., a pop-up for a newly received text message)
lead to drawing an entirely new screen. Despite such
frequent screen changes, an earlier study [35] shows that
every newly rendered app screen destroys and overwrites
the GUI data structures of the previous screen.
This observation however, seems counter-intuitive as
Android apps are able to very quickly render a screen
that is similar or identical to a previous screen. For ex-
ample, consider how seamlessly a messenger app returns
to the “Recent Conversations” screen after sending a new
message. Given that the previous screen’s data structures
have been destroyed, the app must be able to recreate
GUI data structures for the new screen. More impor-
tantly, we conjecture that the raw, app-internal data (e.g.,
chat texts, dates/times, and photos) displayed on previ-
ous screens must exist in memory long after their corre-
sponding GUI data structures are lost.
To conﬁrm our conjecture about the life spans of (1)
GUI data structures (short) and (2) app-internal data
(long), we performed a proﬁling study on a variety of
popular Android apps (those in Section 4). Via instru-
mentation, we tracked the allocation and destruction (i.e.,
overwriting) of the two types of data following multiple
screen changes of each app. Figure 1 presents our ﬁnd-
ings for TextSecure (also known as Signal Messenger). It
is evident that the creation of every new screen causes the
destruction of the previous screen’s GUI data, whereas
the app-internal data not only persists but accumulates
with every new screen. We observed this trend across all
evaluated apps.
Considering that a memory image reﬂects the mem-
ory’s content at one time instance, Figure 1 illustrates
a limitation of existing memory forensics techniques
(background on memory image acquisition can be found
in Appendix A). Speciﬁcally, given the memory image
taken after Screen 0 is rendered (as marked in Figure 1),
our GUITAR technique [35] will only have access to the
GUI data for Screen 0. Meanwhile, the app’s internal
1RetroScope is available online, along with a demo video, at:
https://github.com/ProjectRetroScope/RetroScope.
1138  25th USENIX Security Symposium 
USENIX Association
USENIX Association  
25th USENIX Security Symposium  1139
020406080100120Data Structure Count (Thousands) Time (Relative to Screen Changes From Screen -5 to Screen 0 Above) Internal DataScreen -5Screen -4Screen -3Screen -2Screen -1Screen 0(a) Screen -5 (b) Screen -4 (c) Screen -3 (d) Screen -2 (e) Screen -1 RetroScope Recovery Memory Image Taken (e) Screen 0 Figure1:LifeCyclesofGUIDataStructuresVersusApp-InternalDataAcrossMultipleScreenChanges.ContactList.java Model View Conversation.java MessageItem.java   class MessageItem {    …    String mTimestamp;    String mAddress;    String mBody;    String mContact;    String mSubject;    …  } SlideView.java ImageAttachmentView.java MessageListView.java   class MessageListView {    void draw (Canvas canvas){      …      String str;      str = MessageItem.format();      canvas.drawText(str);      …    }  } Figure2:TheTypicalModel/ViewImplementationSplitofAndroidApps.dataaremaintainedbytheappitselfforaslongastheapp’simplementationallows(e.g.,weneverobservedTextSecuredeallocatingitsmessagesbecausetheymaybeneededagain).However,withoutapp-speciﬁcdatadeﬁnitionsorrenderinglogic,itisimpossibleforexist-ingapp-agnostictechniques[6,36,41]tomeaningfullyrecoverandredisplaytheapp’sinternaldataonScreens-1to-5inFigure1.ItturnsoutthattheAndroidframeworkinstillsthe“short-livedGUIstructuresandlong-livedapp-internaldata”propertiesinallAndroidapps.Speciﬁcally,An-droidappsmustfollowa“Model/View”designpat-ternwhichintentionallyseparatestheapp’slogicintoModelandViewcomponents.AsshowninFigure2,anapp’sModelstoresitsinternalruntimedata;whereasitsViewisresponsibleforbuildingandrenderingtheGUIscreensthatpresentthedata.Forexample,theMes-sageItem,Conversation,andContactList(Model)classesinFigure2storeraw,app-internaldata,whicharethenformattedintoGUIdatastructures,anddrawnonscreenbytheMessageListViewclass.Thisdesignallowstheapp’sViewscreenstorespondquicklytothehighlydy-namicuser-phoneinteractions,whiledelegatingsloweroperations(e.g.,fetchingdataupdatesfromaremoteserver)tothebackgroundModelthreads.Further,theAndroidframeworkprovidesaJavaclass(aptlynamedView)whichappsmustextendinordertoimplementtheirownGUIscreens.AsillustratedbyFigure2’sMessageListViewclass,eachoftheapp’sscreenscorrespondtoanapp-customizedViewobjectandpossiblymanysub-Viewsdrawnwithinthetop-levelView.Mostimportantly,eachViewobjectdeﬁnesadrawfunction.drawfunctionsareprohibitedfromperformingblockingoperationsandmaybeinvokedbytheAndroidframeworkwheneverthatspeciﬁcscreenneedstobere-drawn.Thismakesanyscreen’sGUIdata(e.g.,format-tedtext,graphicsbuffers,anddrawingoperationswhichbuildthescreen)easilydisposable,becausetheAndroidframeworkcanquicklyrecreatethembyissuingaredrawcommandtoanappatanytime.Thisdesignpatternpro-videsaninterestingopportunityforRetroScope,whichwillinterceptandreusethecontextofaliveredrawcom-mandtosupportthereanimationofdrawfunctionsinamemoryimage.3DesignofRetroScopeRetroScope’soperationisfullyautomatedandonlyre-quiresamemoryimagefromtheAndroidappbeingin-vestigated(referredtoasthetargetapp)asinput.Fromthismemoryimage,RetroScopewillrecreateasmanyprevious screens as the app’s internal data (in the mem-
ory image) can support. However, without app-speciﬁc
data deﬁnitions, RetroScope is unable to locate or un-
derstand such internal data. But recall from Section 2
that the Android framework can cause the app to draw its
screen by issuing a redraw command, without handling
the app-internal data directly. This is possible because
the app’s draw functions are invoked in a context-free
manner: The Android framework only supplies a buffer
(called a Canvas) to draw the screen into, and the draw
function obtains the app’s internal data via previously
stored, global, or static variables — analogous to starting
a car with a key (the redraw command) versus manually
cranking the engine (app internals). Thus, RetroScope is
able to leverage such commands, avoiding the low-level
“dirty work” as in previous forensics/reverse engineering
approaches [36, 37].
RetroScope mimics this process within the target app’s
memory image by selectively reanimating the app’s
screen drawing functions via an interleaved re-execution
engine (IRE). RetroScope can then inject redraw com-
mands to goad the target app into recreating its previ-
ous screens. An app’s draw functions are ideal for re-
animation because they are (1) functionally closed, (2)
deﬁned by the Android framework (thus we know their
interface deﬁnition), and (3) prevented from perform-
ing I/O or other blocking operations which would oth-
erwise require patching system dependencies. Finally,
RetroScope saves the redrawn screens in the temporal or-
der that they were previously displayed, unless the draw
function crashes — indicating the app-internal data could
not support that screen.
To support selective reanimation, RetroScope lever-
ages the open-source Android emulator to start, control,
and modify the execution of a symbiont app, a minimal
implementation of an Android app which will serve as a
“shell” for selective reanimation.
3.1 Selective Reanimation
Before selective reanimation can begin, RetroScope must
ﬁrst set up enough of the target app’s runtime environ-
ment for re-executing the app’s draw functions. There-
fore RetroScope ﬁrst starts a new process in the An-
droid emulator, which will later become the symbiont
app and the IRE (Section 3.2). RetroScope then syn-
thetically recreates a subset of the target app’s memory
space from the subject memory image. Speciﬁcally, Ret-
roScope loads the target app’s data segments (native and
Java) and code segments (native C/C++ and Java code
segments) back to their original addresses (Lines 1-4 of
Algorithm 1) — this would allow pointers within those
segments to remain valid in the symbiont app’s memory
space. RetroScope then starts the symbiont app which
will initialize its native execution environment and Java
runtime. Note that the IRE will not be activated until
later when state interleaving (Section 3.2) is needed.
Isolating Different Runtime States. The majority of
an Android app’s runtime state is maintained by its Java
runtime environment2. For RetroScope, it is not sufﬁ-
cient to simply reload the target app’s memory segments.
Instead the symbiont app’s Java runtime must also be
made aware of the added (target app’s) runtime data prior
to selective reanimation. Later, the IRE will need to dy-
namically switch between the target app’s runtime state
and that of the symbiont app to present each piece of
interleaved execution with the proper runtime environ-
ment.
RetroScope traverses a number of global Java run-
time data structures from the subject memory image with
information such as known/loaded Java classes, app-
speciﬁc class deﬁnitions, and garbage collection trackers
(Lines 5–9 of Algorithm 1). Such data are then copied
and isolated into the symbiont app’s Java runtime by in-
serting them (via the built in Android class-loading logic)
into duplicates of the Java runtime structures in the sym-
biont app. Note that, at this point, the duplicate runtime
data structures will not affect the execution of the sym-
biont app, but they must be set up during the symbiont
app’s initialization so that any app-speciﬁc classes and
object allocations from the memory image can be han-
dled later by the IRE.
At this point, the symbiont app’s memory space con-
tains (nearly) two full applications (shown in Figure 4).
The symbiont app has been initialized naturally by the
Android system with its own execution environment. In
addition, RetroScope has reserved and loaded a subset
of the target app’s memory segments (those required
for selective reanimation) and isolated the necessary old
(target app’s) Java runtime data into the new (symbiont
app’s) Java runtime. The remainder of RetroScope’s op-
eration is to (1) mark the target app’s View draw func-
tions so that they can receive redraw commands and (2)
reanimate those drawing functions inside the symbiont
app via the IRE.
Marking Top-Level Draw Functions. RetroScope tra-
verses the target app’s loaded classes to ﬁnd top-level
Views (Lines 10–17 in Algorithm 1). Top-level Views
are identiﬁed as those which inherit from Android’s par-
ent View class ViewParent and are not drawn inside
any other Views. As described in Section 2, top-level
Views are default Android classes which contain app-
customized sub-Views. Further, we know that all Views
must implement a draw function (which invokes the sub-
Views’ draw functions). Thus RetroScope marks each
top-level draw function as a reanimation starting point.
2Please see Section 5 regarding Dalvik JVM versus ART runtimes.
1140  25th USENIX Security Symposium 
USENIX Association
Algorithm 1 RetroScope Selective Reanimation.
Input: Target App Memory Image M
Output: GUI Screen Ordered Set S
⊲ Rebuild the Target App runtime environment.
⊲ Remap memory segments.
1: for Segment S ∈ M do
2:
3:
if isNeededForReanimation(S) then
Map(S.startAddress, S.length, S.content)
4: SymbiontApp.initialize()
⊲ Set up Symbiont App.
5: JavaGlobalStructs G ← ∅ ⊲ Isolate the Target App runtime state.
6: for Segment S ∈ M do
⊲ Find Java control data.
7:
8:
9:
G ← getJavaGlobals(S)
break
if containsJavaGlobals(S) then