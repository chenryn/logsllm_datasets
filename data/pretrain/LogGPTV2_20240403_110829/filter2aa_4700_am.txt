  undefined4 local_3c;
  undefined4 *local_38;
  undefined4 local_34;
  undefined4 local_20;
  undefined4 local_14;
  undefined4 uStack12;
  undefined *local_8;
  local_8 = &DAT_0041cf68;
  uStack12 = 0x404973;
  local_20 = param_5;
  local_44 = 0;
  local_34 = *(undefined4 *)(param_2 + -4);
  local_38 = __CreateFrameInfo(local_50,*(undefined4 *)(param_1 + 0x18));
  iVar1 = ___vcrt_getptd();
  local_3c = *(undefined4 *)(iVar1 + 0x10);
  iVar1 = ___vcrt_getptd();
  local_40 = *(undefined4 *)(iVar1 + 0x14);
  iVar1 = ___vcrt_getptd();
  *(int *)(iVar1 + 0x10) = param_1;
  iVar1 = ___vcrt_getptd();
  *(undefined4 *)(iVar1 + 0x14) = param_3;
  local_48 = 1;
  local_8 = (undefined *)0x1;
  uVar2 = FUN_00403780(param_2,param_4,param_5,param_6,param_7);
  local_8 = (undefined *)0xfffffffe;
  local_48 = 0;
  local_20 = uVar2;
  FUN_00404aaf();
  *in_FS_OFFSET = local_14;
  return uVar2;
}
void FUN_00404aaf(void)
{
  int iVar1;
  int unaff_EBX;
  int unaff_EBP;
  int *unaff_EDI;
  *(undefined4 *)(*(int *)(unaff_EBP + 0xc) + -4) = *(undefined4 *)(unaff_EBP + -0x30);
  FUN_00403991(*(int *)(unaff_EBP + -0x34));
  iVar1 = ___vcrt_getptd();
  *(undefined4 *)(iVar1 + 0x10) = *(undefined4 *)(unaff_EBP + -0x38);
  iVar1 = ___vcrt_getptd();
  *(undefined4 *)(iVar1 + 0x14) = *(undefined4 *)(unaff_EBP + -0x3c);
  if ((((*unaff_EDI == -0x1f928c9d) && (unaff_EDI[4] == 3)) &&
      ((unaff_EDI[5] == 0x19930520 || ((unaff_EDI[5] == 0x19930521 || (unaff_EDI[5] == 0x19930522)))
       ))) && ((*(int *)(unaff_EBP + -0x40) == 0 && (unaff_EBX != 0)))) {
    iVar1 = __IsExceptionObjectToBeDestroyed(unaff_EDI[6]);
    if (iVar1 != 0) {
      FUN_00404e24(unaff_EDI);
    }
  }
  return;
}
// WARNING: Function: __EH_prolog3_catch replaced with injection: EH_prolog3
void FUN_00404b2b(undefined4 param_1)
{
  code *pcVar1;
  int iVar2;
  iVar2 = ___vcrt_getptd();
  if (*(int *)(iVar2 + 0x1c) == 0) {
    FUN_00404ddc();
    iVar2 = ___vcrt_getptd();
    *(undefined4 *)(iVar2 + 0x1c) = param_1;
    FUN_00404fe3((int *)0x0,(byte *)0x0);
  }
  _terminate();
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}
void Catch_All_00404b4b(void)
{
  code *pcVar1;
  int iVar2;
  int unaff_EBP;
  iVar2 = ___vcrt_getptd();
  *(undefined4 *)(iVar2 + 0x1c) = *(undefined4 *)(unaff_EBP + 8);
  FUN_00404fe3((int *)0x0,(byte *)0x0);
  _terminate();
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}
// Library Function - Single Match
// Name: ?ExFilterRethrow@@YAHPAU_EXCEPTION_POINTERS@@@Z
// Library: Visual Studio 2015 Release
// int __cdecl ExFilterRethrow(struct _EXCEPTION_POINTERS *)
int __cdecl ExFilterRethrow(_EXCEPTION_POINTERS *param_1)
{
  PEXCEPTION_RECORD pEVar1;
  int iVar2;
  pEVar1 = param_1->ExceptionRecord;
  if ((((pEVar1->ExceptionCode == 0xe06d7363) && (pEVar1->NumberParameters == 3)) &&
      ((pEVar1->ExceptionInformation[0] == 0x19930520 ||
       ((pEVar1->ExceptionInformation[0] == 0x19930521 ||
        (pEVar1->ExceptionInformation[0] == 0x19930522)))))) &&
     (pEVar1->ExceptionInformation[2] == 0)) {
    iVar2 = ___vcrt_getptd();
    *(undefined4 *)(iVar2 + 0x20) = 1;
    return 1;
  }
  return 0;
}
void __cdecl FUN_00404baf(int param_1,undefined4 param_2,int param_3)
{
  FUN_00404bc7(param_1,param_2,param_3,-1);
  return;
}
// WARNING: Function: __SEH_prolog4 replaced with injection: SEH_prolog4
void __cdecl FUN_00404bc7(int param_1,undefined4 param_2,int param_3,int param_4)
{
  code *pcVar1;
  int iVar2;
  int iVar3;
  undefined4 *in_FS_OFFSET;
  undefined4 local_14;
  iVar2 = FUN_00404df9(param_1,param_2,param_3);
  iVar3 = ___vcrt_getptd();
  *(int *)(iVar3 + 0x18) = *(int *)(iVar3 + 0x18) + 1;
  while (iVar3 = iVar2, iVar3 != param_4) {
    if ((iVar3 < 0) || (*(int *)(param_3 + 4) <= iVar3)) goto LAB_00404ca9;
    iVar2 = *(int *)(*(int *)(param_3 + 8) + iVar3 * 8);
    if (*(int *)(*(int *)(param_3 + 8) + 4 + iVar3 * 8) != 0) {
      FUN_00404e16(param_1,param_3,iVar2);
      __CallSettingFrame_12(*(undefined4 *)(*(int *)(param_3 + 8) + 4 + iVar3 * 8),param_1,0x103);
    }
  }
  FUN_00404c95();
  if (iVar3 == param_4) {
    FUN_00404e16(param_1,param_3,iVar3);
    *in_FS_OFFSET = local_14;
    return;
  }
LAB_00404ca9:
  _terminate();
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}
void FUN_00404c95(void)
{
  int iVar1;
  iVar1 = ___vcrt_getptd();
  if (0 < *(int *)(iVar1 + 0x18)) {
    iVar1 = ___vcrt_getptd();
    *(int *)(iVar1 + 0x18) = *(int *)(iVar1 + 0x18) + -1;
  }
  return;
}
uint FUN_00404caf(int param_1,int *param_2)
{
  int *piVar1;
  int iVar2;
  int iVar3;
  code *pcVar4;
  byte **in_EAX;
  int iVar5;
  undefined4 uVar6;
  byte **ppbVar7;
  byte bVar8;
  int iVar9;
  int local_c;
  int local_8;
  if (param_2 == (int *)0x0) {
    _terminate();
    pcVar4 = (code *)swi(3);
    uVar6 = (*pcVar4)();
    return uVar6;
  }
  iVar9 = *param_2;
  bVar8 = 0;
  if (0 < iVar9) {
    local_8 = 0;
    piVar1 = *(int **)(*(int *)(param_1 + 0x1c) + 0xc);
    iVar2 = *piVar1;
    in_EAX = (byte **)(piVar1 + 1);
    bVar8 = 0;
    do {
      if (0 < iVar2) {
        iVar3 = param_2[1];
        ppbVar7 = in_EAX;
        local_c = iVar2;
        do {
          iVar5 = ___TypeMatch((byte *)(iVar3 + local_8),*ppbVar7,*(byte **)(param_1 + 0x1c));
          if (iVar5 != 0) {
            bVar8 = 1;
            break;
          }
          local_c = local_c + -1;
          ppbVar7 = ppbVar7 + 1;
        } while (0 < local_c);
      }
      local_8 = local_8 + 0x10;
      iVar9 = iVar9 + -1;
    } while (iVar9 != 0);
  }
  return (uint)in_EAX & 0xffffff00 | (uint)bVar8;
}
void FUN_00404d49(undefined4 param_1,undefined *param_2,undefined4 param_3)
{
  (*(code *)param_2)(param_3);
  return;
}
void FUN_00404d59(undefined4 param_1,undefined *param_2,undefined4 param_3,undefined4 param_4)
{
  (*(code *)param_2)(param_3,param_4);
  return;
}
undefined4 __cdecl FUN_00404d6c(int param_1)
{
  return *(undefined4 *)(param_1 + 0x1c);
}
char * __fastcall FUN_00404d77(int param_1)
{
  char *pcVar1;
  pcVar1 = *(char **)(param_1 + 4);
  if (pcVar1 == (char *)0x0) {
    pcVar1 = "Unknown exception";
  }
  return pcVar1;
}
// WARNING: Restarted to delay deadcode elimination for space: stack
// Library Function - Single Match
// Name: __CallSettingFrame@12
// Library: Visual Studio
void __CallSettingFrame_12(undefined4 param_1,undefined4 param_2,int param_3)
{
  code *pcVar1;
  pcVar1 = (code *)__NLG_Notify1(param_3);
  (*pcVar1)();
  if (param_3 == 0x100) {
    param_3 = 2;
  }
  __NLG_Notify1(param_3);
  return;
}
void FUN_00404ddc(void)
{
  code *pcVar1;
  int iVar2;
  iVar2 = ___vcrt_getptd();
  pcVar1 = *(code **)(iVar2 + 4);
  if (pcVar1 != (code *)0x0) {
    _guard_check_icall();
    (*pcVar1)();
  }
  _terminate();
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}
int __cdecl FUN_00404df9(int param_1,undefined4 param_2,int param_3)
{
  if (*(int *)(param_3 + 4) < 0x81) {
    return (int)*(char *)(param_1 + 8);
  }
  return *(int *)(param_1 + 8);
}
void __cdecl FUN_00404e16(int param_1,undefined4 param_2,undefined4 param_3)
{
  *(undefined4 *)(param_1 + 8) = param_3;
  return;
}
// WARNING: Function: __SEH_prolog4 replaced with injection: SEH_prolog4
void __cdecl FUN_00404e24(int *param_1)
{
  byte *pbVar1;
  code *pcVar2;
  undefined4 *in_FS_OFFSET;
  int *piVar3;
  undefined4 local_14;
  if ((((param_1 != (int *)0x0) && (*param_1 == -0x1f928c9d)) && (param_1[4] == 3)) &&
     ((((param_1[5] == 0x19930520 || (param_1[5] == 0x19930521)) || (param_1[5] == 0x19930522)) &&
      (pbVar1 = (byte *)param_1[7], pbVar1 != (byte *)0x0)))) {
    if (*(undefined **)(pbVar1 + 4) == (undefined *)0x0) {
      if (((*pbVar1 & 0x10) != 0) && (piVar3 = *(int **)param_1[6], piVar3 != (int *)0x0)) {
        pcVar2 = *(code **)(*piVar3 + 8);
        _guard_check_icall();
        (*pcVar2)(piVar3);
      }
    }
    else {
      FUN_00404ec4(param_1[6],*(undefined **)(pbVar1 + 4));
    }
  }
  *in_FS_OFFSET = local_14;
  return;
}
void FUN_00404ec4(undefined4 param_1,undefined *param_2)
{
  (*(code *)param_2)();
  return;
}
// Library Function - Single Match
// Name: __IsExceptionObjectToBeDestroyed
// Library: Visual Studio 2015 Release
undefined4 __cdecl __IsExceptionObjectToBeDestroyed(int param_1)
{
  int *piVar1;
  int iVar2;
  iVar2 = ___vcrt_getptd();
  piVar1 = *(int **)(iVar2 + 0x24);
  while( true ) {
    if (piVar1 == (int *)0x0) {
      return 1;
    }
    if (*piVar1 == param_1) break;
    piVar1 = (int *)piVar1[1];
  }
  return 0;
}
// Library Function - Single Match
// Name: ___AdjustPointer
// Library: Visual Studio 2015 Release
int __cdecl ___AdjustPointer(int param_1,int *param_2)
{
  int iVar1;
  int iVar2;
  iVar1 = param_2[1];
  iVar2 = *param_2 + param_1;
  if (-1 < iVar1) {
    iVar2 = iVar2 + *(int *)(*(int *)(iVar1 + param_1) + param_2[2]) + iVar1;
  }
  return iVar2;
}