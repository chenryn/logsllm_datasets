a
星期几的简写形式
8A
星期几的全称
b
月份的简写形式
$B
月份的全称
日期和时间
8d
月份中的日期，0~31
H
小时,00-23
I
12选制小时钟点，01-12
8j
年份中的日期，001~366
8m
年份中的月份，01-12
加入jaVa编程群：524621833
---
## Page 131
第4章UNIX环境
I13
（续）
转换控制符
说明
分，00-59
p
上午或下午
秒，00-61
u
星期几，1~7（1代表星期一）
eU
年中的第几个星期，01~53（星期天是-周中的第一大）
一年中的第儿个尾期，01~53（星期一是一周中的第一天）
$w
星期几，0-6（0代表星期天）
x
当地格式的目期
X
当地格式的时间
ey
年份中的最后两位数，00~99
&Y
年
2
地理时区名称
一个“%”字符
所以，date程序给出的普通日期就相当于strftime格式字符串中的：
为了帮助人们读取日期，我们可以使用strptime函数。它以一个代表时间和日期的字符串为
参数，生成一个代表同一时间和日期的tm结构：
#include 
char *atrptine( const char *buf, connt cbar *format, struct tu tiaeptr ）;
格式字符串format的构造方法与strftime函数中的format完全一样。strptime函数在字符串扫
描方面类似于sscanf函数，也是对匹配数据域进行查找并把它们写人与之对应的变量。在这里，
根据format字符串填出的是tm结构中的数据元素。但与strfime函数中使用的转换控制符相比，
strptime函数里的要松快一些，因为strptime函数中的星期儿和月份用简写或全称都行，两种写
法都能够匹配strptime函数中的“%a”控制符。此外，在strftime函数里，小于10的数字前面永
远要加上一个“0"，而strptime函数则把它看做是可选的。
strptime函数返回的是一个指针，它指向转换过程期间紧跟在最后一个被转换字符后面的
那个字符。如果它遇到一个无法被转换的字符，转换工作就简单地停在那个位置上。调用者程
序需要检查是否已经从做为参数的字符串上读入了足够的内容以保证有意义的值被写到tm结构
里去。
动手试试：strftime和strptime函数。
请注意下面这个程序中选用的转换控制符。
include 
#inciude 
int nain()
struct tm *tn_ptr,timestruct;
time_t the_time;
加入jaVva编程群：524621833
---
## Page 132
114
Linux程序设计
char buf[256];
char *result;
(void) time (&the_time) ;
tm_ptr = 1ocaltime(&the_time):
strftime[buf. 256, *A d e3, I:$S 8p*, tm_ptr);
printf (*strftime gives: sn*, buf);
strcpy(buf,*Mon 26 July 1999. 17:53 wi11 ①o fine*):
printf(*calling strptime with: ks`n*, buf1;
tm_ptr = stimestruct;
result = strptime(buf,*%a ad eb Y, R*, tm_ptr);
printf(*strptize consumed up to: gs\n*, result);
printf1*date: 402d/s02d/#02d\n*.
printf(*strptime gives:\n*);
tn_ptr->tn_year,tm_ptr->tm_mon+1, tn_ptr->tm_mday):
printf(*tine: e02d:s02d\n*,
tm_ptr->tm_hour, tm_ptr->tn_min);
exit{0);
编译井运行这个strftimc.c程序，我们得到；
S./atrftime
strftine gives: Sunday 06 June, 11:55 AM
calling strptime with: Mon 26 July 1999, 17:53 wi11 do fine
strptime conswmed up to: will do fine
date: 99/07/26
strptine gives:
tine: t7:53
操作注释：
strftime程序通过调用time和localtime函数取得本地的当前时间。然后调用strftime函数根据
一个相应的格式编排参数把它转换为人们可以理解的表示形式。为了演示strptime函数的用法，
程序建立了一个包含着时间和日期的字符串，然后调用strptime函数提取出时间和日期的原始值
并输出它们。strptime函数里的转换控制符“%R”是控制符“%H：%M”的简写形式。
千万记住，为了成功扫描一个日期，strptime函数必须要有一个精确的格式字符串。一般来
说，除非在格式编排方面的要求非常严格，否则它不会去精确扫描读自用户的日期字符串。
读者可能会在编译strftime.c程序时看到一条编译器发出的警告信息。这是因为GNU的函数
库在默认情况下不会对strptime函数做出声明。这很容易解决，在包括time.h文件的语句前加上
下面这条语句就行，它的作用是明确申请使用X/Open技术规范中的标准功能。
#define _xoPEN_SOURcE
4.4临时文件
在很多情况下，程序会用到一些文件形式的临时存储手段。比如保存计算的中间结果，或
者在关键操作之前制作文件的备份拷贝等。举个例子，一个数据库应用软件在除数据记录时
就会使用一个临时文件。这个文件收集需要被保留的数据库数据项，最后，在处理结束的时候，
这个临时文件变成了新的数据库，而原来的数据库则被删除了。
临时文件的这种用法很常见，但也有一个隐蔽的缺点，即用户必须保证临时文件选用的文
加入jaVa编程群：524621833
---
## Page 133
第4章UNIX环境
115
件名是独一无二的。如果情况不是这样，因为UNIX是一个多任务系统，其他程序就可能会选上
相同的文件名，两个程序就会彼此干扰影响。
用tumpnam函数可以生成一个独一无二的文件名，请看对它的声明：
#include 
char *tnpnam( char *s ）;
tmpnam函数的作用是返回一个合法的文件名，它与任何现有的文件名都不一样。如果字符
串s不为空，则新文件名就写在其中。后续的tmpnam调用会覆盖用来保存返回值的静态存储单元，
所以如果需要多次调用tmpnam函数，就必须使用一个字符串参数。字符串的长度至少要有
L_tmpnam个字符。在一个程序里，最多可以调用TMP_MAX次tmpnam函数，而它每次都会生成
一个不同的文件名。
如果遇到需要立刻用到临时文件的情况，我们可以通过tmpfile函数在获得它名字的同时打
开它。这是非常重要的，因为另外一个程序可能会创建出一个与tmpnan函数的返回值同名的文
件。tmpfile函数避免了这类问题的发生。下面是对它的定义：
include 
FILE*tmpfile（void）)
tmpfile函数返回一个文件流指针，它指向一个独一无二的时文件。该文件已经以读写方
式被打开（通过fopen函数及其“w+”选项），当该文件上的引用线索都被关闭时，它就会被自
动删除。
如果操作失败，mpfile函数将返回一个null空指针并对errno进行设置。
动手试试：tmpnam和tmpfile函教。
我们来看看这两个函数的用法。
finclude 
int main()
ddu,3714
char
*filename;
filename = tnpnan(tapnane):
printt(*Tenporary file nane is: @s\n*, filename);
tepfp=trpfile();
if(tmpfp)
printf(*Opened a temporary file OK\n*):
else
exit(0):
编译并运行这个tmpnam.c程序，就可以看到由tmpnam函数生成的独一无二的文件名：
Tenporary file name is:/tnp/filedn9a2K
./tpnaa
Opened a tenporary file OK
加入jaVva编程群：524621833
---
## Page 134
116Linux程序设计
操作注释：
程序调用rmpnam函数为临时文件生成了一个独一无二的文件名。如果我们打算用它，就必
须尽快打开这个文件，把另一个程序打开一个同名文件的风险降到最小。tmpfile调用会同时完
成创建并打开一个临时文件的工作，也就避免了这种危险。
老版本的UNIX有另外种生成临时文件名的办法，就是对mktemp和mkstemp函数进行调用。
它们与tmpnam函数很相似，不同之处在于我们还可以给临时文件名指定一个模版，这使我们对
它们的存放地点和名字多少增加了一些控制。请看对它们的定义：
#include 
char*mktemp（cbar*teuplate)1
int nkstemp(char *tenplate);
mktemp函数以给定的模版为基础生成一个独一无二的文件名。参数template必须是一个末尾
组合。它返回一个指向生成的字符申的指针：如果它尤法生成一个独一无二的名字，就返回一
个空指针。
mkstemp函数类似于tmpfile，它也是同时完成一个临时文件的创建和打开工.作。文件名的生
成办法与mktemp函数用的一样，但返回结果则是一个打开的底层文件描述符。一般来说，我们
应该尽量多用tmpnam和tmpfile函数，少用mktemp和mkstemp函数。
4.5用户的个人资料
除init以外，一切UNIX程序都是由其他程序或用户启动的。我们将在第10章对运行中的程
序或进程彼此之间的交互作用做进一步的学习。用户通常是在一个响应他们命令的shell里启动
程序的。我们已经看到，通过检查环境变量和读取系统时钟，一个程序可以对自身所处的环境
大部分作出确定。程序还可以查出与其使用者有关的个人资料。
一个用户，当他或她在一个UNIX系统里登录上机的时候，就会有一个用户名和一个口令字。
在对这些资料进行核实之后，用户就可以进人一个shell进行操作了。从原理上来说，用户还有
一个独-无二的用户身份标识符，也叫做一个UID。UNIX运行的每个程序实际上都是被某个用
户运行的，因此都会有-个关联着的UID值。
我们可以对程序进行设置，让它们看上去就好像是由另外一个用户启动的。当一个程序的
setUID权限被置位的时候，其运行就会像是由这个可执行文件的属主启动的。而在执行了su命
令的时候，它的运行又会像是由根用户启动的。接下来，程序会核查用户的访问权限，把UID修
改为目标帐户的对应值，然后执行该帐户的登录shell。通过类似手段，我们还可以让一个程序
看起来就像是被另外一个用户启动的，系统管理员经常会用这种办法执行一些系统维护方面的
工作。
既然说到UID是用户身份证明的关键，我们就从它开始吧。
UID有自己的数据类型一—uid_，这个类型是在sys/types.h文件里定义的。它般会是一个
小整数。有的UID是由系统预先定义的，其他一些则是由系统管理员根据新用户的上机申请创建
加入java编程群：524621833
---
## Page 135
第4章UNIX环境
117
出来的。一般情况下，用户的UID值都大于100。
include 
finclude 
1(PTOA)PTnO5Pn
char *getlogin(void);
getuid函数返回的是与程序关联着的那个UID。它通常就是启动该程序的用户的UID。
getlogin函数返回的是与当前用户关联着的登录名。
系统文件/etc/passwd里包含着一个与用户帐户有关的数据库。它的每一行分别代表着一位用
户，里面的资料包括用户名、加密口令字、用户身份标识符（即UID）、分组标识符（即GID）
用户的全名、登录子目录以及缺省shell等。下面就是一个示范行：
nei1:2Bgxfqedfpx : 500 :4:Nei1 Matchew:/home ne1:/ban/bash
如果我们编写一个程序，使它能够查出启动它的那个用户的UID，就可以再对它进行扩展，
使它能够查看口令字文件的内容，找出用户的登录名和全名。我们并不推荐这种缴法，原因是
为了改善系统的安全性，现如今的UNIX系统基本上都不再使用简单的口令字文件了。许多系统
有使用“shadow”（隐蔽）口令字文件的选择权，原来的文件里不再有任何加过密的口令字信息
（加密信息通常会被保存到/etc/shadow文件里去，这是一个普通用户不能读取的文件）。出于这
方面考虑，人们又定义并开发了几个函数，向程序员提供了一个标准而义有效的获取用户个人
资料的程序设计接口。请看：
#include 
#include 
struct paewwd *getpwuid(uid_t uid);
struct passwd *getpwmam(const char *name);
口令字数据库中使用的passwd结构定义在pwd.h文件里，其中包括以下数据元素见表4-3：
表4-3
passwd元素
说明
char *pv_name
用户的登录名
uid_t p_uid
UID编号
gid_t p_gid
GID编号
char *pu_dir
用户的登录子目录
char *pw_she11
用户的缺省shell
有些UNIX系统还会有一个用户全名数据域，但这并不是个标准做法：在某些UNIX系统上它是
pw_gccos，面在其他系统上它又是pw_comment。这就意味着我们无法对此给出一个准确统一的用法。
getpwuid和getpwnam函数都会返回一个指针，指针又都指向一个与某个用户对应着的
passwd结构。对gctpwuid函数来说，用户身份是由其UID确定的；面getpwnam中使用的则是用
户的登录名。如果出现错误，两个函数都会返回一个空指针并设置errmo变量。
动手试试：用户的个人资料
加入jaVa编程群：524621833