### 速度测试结果
- **设备 #2**: 58038.3 MH/s (64.70ms)
- **设备 #3**: 59104.4 MH/s (63.55ms)
- **设备 #4**: 59123.0 MH/s (63.52ms)
- **设备 #5**: 58899.7 MH/s (63.74ms)
- **设备 #6**: 59125.8 MH/s (63.51ms)
- **设备 #7**: 59256.3 MH/s (63.36ms)
- **设备 #8**: 59064.5 MH/s (63.56ms)
- **总速度**: 472.0 GH/s

对于那些无法负担大型GPU设备的人来说，云破解是一个可行的选择。虽然这也不是非常便宜，但亚马逊最近集成了TESLA GPU（不是汽车），其处理能力甚至超过了1080Ti。在Medium上有一篇详细的文章介绍了如何基于这些GPU搭建破解服务器。

### NTLM计算性能
根据Iraklis Mathiopoulos的论文，以下是使用NTLM散列模式进行的速度测试：
- **设备 #1**: 79294.4 MH/s (33.81ms)
- **设备 #2**: 79376.5 MH/s (33.79ms)
- **设备 #3**: 79135.5 MH/s (33.88ms)
- **设备 #4**: 79051.6 MH/s (33.84ms)
- **设备 #5**: 79030.6 MH/s (33.85ms)
- **设备 #6**: 79395.3 MH/s (33.81ms)
- **设备 #7**: 79079.5 MH/s (33.83ms)
- **设备 #8**: 79350.7 MH/s (33.83ms)
- **总速度**: 633.7 GH/s

与TESLA GPU相比，NTLM计算速度大约快34%。运行AWS云服务的总成本约为每小时25美元。因此，您需要根据预算、需求和目标来规划。

### 实验
Troy Hunt 在“Have I Been Pwned”网站上发布了一个包含SHA1密码散列的列表，压缩文件大小约为5.3 GB。这是一个由以前泄露的数据生成的大字典，可以作为测试密码破解能力的实验数据。

随着GPU技术的发展，10个字符以下的密码可以在合理的时间内通过智能破解方法被破解。一些密码可以通过设置合理的掩码进行破解，但在大多数情况下，需要使用密码字典。使用真实漏洞中的密码字典是破解超过12个字符密码的一种快速方法。通过分析过去的泄露数据，我们可以了解人类创建密码的习惯、常用的混淆技巧以及常用单词。

### 密码字典资源
以下是一些常用的密码字典资源：
- **berzerk0 Real-Password-WPA**：18.6 GB Uncompressed。 [下载链接](http://bit.ly/2EMs6am)
- **berzerk0 Dictionary-Style**：1 GB Uncompressed。 [下载链接](http://bit.ly/2GXRNus)
- **Xato Million Passwords**：[磁力链接](magnet:?xt=urn:btih:32E50D9656E101F54120ADA3CE73F7A65EC9D5CB)
- **Hashes.org**：[网站链接](http://hashes.org/left.php)
- **Crackstation**：15 GB Uncompressed
- **Weakpass**：大量密码列表
- **First20Hours**：包含按频率排序的10,000个常见英语单词列表，由Google的Trillion Word Corpus的N-Gram频率分析生成。
- **SkullSecurity.org**：许多老的字典库，例如 rockyou、myspace和phpbb。
- **Daniel Miessler's Password Compilation**
- **Adeptus-mechanicus Hash dumps**

### 规则集
将好的密码字典组合，并添加规则，可以进一步提高破解效率。例如，KoreLogicRulesAppendYears规则集会在每个密码后面附加1949年到2019年的年份。如果密码字典中包含单词“hacker”，那么它会尝试计算字符串“hacker1949”到“hacker2019”的散列值。

已经有许多现成的规则集可供使用，包括：
- **Hashcat默认规则**
- **Kore规则**
- **NSAKEY Rules**（我的最爱之一）
- **Praetorian-inc Hob0Rules**
- **NotSoSecure - One Rule to Rule Them All**

### 破解演练
假设您突破了CSK公司并获取了大量的密码散列。为了在有限时间内获得最佳结果，以下步骤可以帮助您尽可能多地破解密码：

#### 初始步骤
1. **确定散列类型**：首先，您需要了解散列的密码格式。理解散列类型后，进行一些初始测试以确定密码散列算法的速度。
2. **选择合适的工具**：对于NTLM散列，您可以使用8个1080Ti GPU进行快速破解。

#### 命令示例
- **暴力破解**：对于长度为1～7个字符的任何字母、数字或特殊字符（?a），使用攻击模式“brute-force”（-a 3）破解所有7个字符或更少的密码（增量）。 
  ```bash
  hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt -a 3 ?a?a?a?a?a?a?a --increment
  ```
  7个字符alpha/num/special破解总时间约为5分钟。8个字符需要运行9小时。

- **限制特殊字符**：限制特殊字符为少数（!@#$%^），可以显著减少破解时间和复杂度。

- **字典破解**：将所有常见密码字典与散列值进行比较。
  ```bash
  hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt ./lists/40GB_Unique_File.txt
  ```

- **规则集应用**：在单个密码字典文件上尝试不同的规则集。
  ```bash
  hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt ./lists/40GB_Unique_File.txt -r ./rules/rockyou-30000.rule
  ```

- **字符添加**：在密码字典的右侧或左侧添加字符，以满足更长密码破解需求。
  ```bash
  hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt -i -a 6 ./lists/found.2015.txt ?a?a?a?a
  hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt -i -a 7 ?a?a?a?a ./lists/40GB_Unique_File.txt
  ```

- **组合器工具**：使用组合器工具将两个或三个不同的密码字典进行组合。
  ```bash
  ./hashcat-utils-1.8/bin/combinator.bin lists/shortKrak.txt lists/shortKrak.txt > lists/comboshortKrak.txt
  ```

- **自定义字典**：使用客户端网站创建自定义密码字典。
  - **Brutescrape**：[GitHub链接](https://github.com/cheetz/brutescrape)
  - **Burp Word List Extractor**：[PortSwigger BApp Store](https://portswigger.net/bappstore/21df56baa03d499c8439018fe075d3d7)

- **分析破解的密码**：输入所有破解的密码，分析它们并用来创建掩码。
  ```bash
  python ./PACK-0.0.4/statsgen.py hashes.password
  ```

通过这些步骤，您可以有效地破解大量的密码散列，并提高您的破解成功率。