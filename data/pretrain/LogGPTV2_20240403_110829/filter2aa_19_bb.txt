Speed.Dev.#2.....: 58038.3 MH/s (64.70ms)
Speed.Dev.#3.....: 59104.4 MH/s (63.55ms)
Speed.Dev.#4.....: 59123.0 MH/s (63.52ms)
Speed.Dev.#5.....: 58899.7 MH/s (63.74ms)
Speed.Dev.#6.....: 59125.8 MH/s (63.51ms)
Speed.Dev.#7.....: 59256.3 MH/s (63.36ms)
Speed.Dev.#8.....: 59064.5 MH/s (63.56ms)
Speed.Dev.#*.....: 472.0 GH/s
对于那些买不起大型GPU设备的人来说，还有其他选择。虽然也不是很便宜，但您可以考虑云破解。最近，亚马逊云集成了TESLA GPU（不是汽车），处理能力比1080Ti更强。在Medium上有一篇很棒的文章介绍如何基于这些GPU搭建破解服务器。
来自Iraklis Mathiopoulos论文的统计数据，散列模式为1000 - NTLM。
Speed.Dev.#1.....: 79294.4 MH/s (33.81ms)
Speed.Dev.#2.....: 79376.5 MH/s (33.79ms)
Speed.Dev.#3.....: 79135.5 MH/s (33.88ms)
Speed.Dev.#4.....: 79051.6 MH/s (33.84ms)
Speed.Dev.#5.....: 79030.6 MH/s (33.85ms)
Speed.Dev.#6.....: 79395.3 MH/s (33.81ms)
Speed.Dev.#7.....: 79079.5 MH/s (33.83ms)
Speed.Dev.#8.....: 79350.7 MH/s (33.83ms)
Speed.Dev.#*.....: 633.7 GH/s
NTLM计算总的速度比使用TESLA GPU大约快34%。运行AWS云的总成本约为每小时25美元。因此，您需要统筹规划自己的预算、要求和目标。
实验
最近，Troy Hunt 在“Have I Been Pwned”网站上发布了一个密码散列的SHA1列表，压缩文件大小约为5.3 GB。这是由以前泄露的数据生成的大字典，可以作为一份测试密码破解能力的实验数据。
随着这些GPU变得越来越快，10个字符以下的密码可以在相对合理的时间范围内进行智能破解。其中一些使用设置合理的密码掩码可以实现破解，但在大多数情况下，需要使用密码字典破解。使用真实漏洞的密码字典是破解大于12个字符密码的一种极快的方法。查看过去所有的泄露数据，我们可以很快地了解人类如何创建密码、混淆密码的常用技巧以及常用的单词。
使用具有复杂规则集的这些密码字典，我们将能够快速破解密码（有时超过25个字符）。但是请记住，密码字典取决于构建方式和更新方式。作为红队，我们定期跟踪破解的所有账户，分析它们，并将它们添加到密码字典中。我们还需要不断监控新的数据泄露、pastebin/pastie类型的网站等，查找新的密码。
常用的密码字典
berzerk0 Real-Password-WPA密码字典。
18.6 GB Uncompressed。 
http://bit.ly/2EMs6am
berzerk0 Dictionary-Style字典。 
1 GB Uncompressed
http://bit.ly/2GXRNus
Xato Million Passwords。 
magnet:?xt=urn:btih:32E50D9656E101F54120ADA3CE73F7A65EC9D5CB
Hashes.org。 
http://hashes.org/left.php
Multiple Gigabytes and growing daily
Crackstation。 
15 GB Uncompressed
Weakpass。 
Tons of password lists
First20Hours。 
这个库包含按频率顺序排列的10 000个常见的英语单词列表，由Google的Trillion Word Corpus的N-Gram频率分析生成
SkullSecurity.org。 
很多老的字典库，例如 rockyou、myspace和phpbb
Daniel Miessler's Password Compilation。
Adeptus-mechanicus Hash dumps。
将好的密码字典进行组合，我们可以在这些密码字典之上，添加规则，查找更多密码。就hashcat而言，规则定义了是否需要对密码字典进行修改。介绍规则的一种方式是使用一个易于理解的例子。我们可以使用KoreLogicRulesAppendYears规则集，如下所示。
cAz"19[0-9][0-9]"。
Az"19[0-9][0-9]"。
cAz"20[01][0-9]"。
Az"20[01][0-9]"。
它会在每个密码后面附加1949年～2019年的年份。如果密码字典中包含单词“hacker”，那么它会尝试计算字符串“hacker1949”～“hacker2019”的散列值。请记住，您制定的规则越复杂，完成单词列表所需的时间就越多。
幸运的是，我们不需要自己创建规则，因为已经有很多很好的规则。当然，还有默认的hashcat规则，它们来自许多较早的数据泄露，以及常见的密码操作方法。这是一个很好的起点。Kore规则来自Korelogic的密码竞赛，是另外一个标准。另外，NSAKEY和Hob0Rules这两个规则肯定需要更长的时间，但有非常详细的规则集。在过去，我应用所有规则，将它们放到一个文件中，并且唯一标识这个文件。但是现在，NotSoSecure已经为您完成这个功能，规则如下。
Hashcat规则。
Kore规则。
NSAKEY Rules (One of my favorite) *Forked。
Praetorian-inc Hob0Rules *Forked。
NotSoSecure - One Rule to Rule Them All *Forked。
8.3 彻底破解全部——尽您所能快速破解
您突破CSK公司，获取了大量的密码。在有限的时间内，您如何取得最好的“收益”？以下演练将指导您完成初始步骤，我们需要尽可能多地破解密码。虽然，我们通常只需要几个域管理员、LDAP 管理员和公司管理员账户，但我的强迫症倾向驱使我破解所有密码。
在开始之前，您确实需要了解散列的密码格式。一旦理解了散列类型，最好先进行一些初始测试，确定密码散列算法的速度。这将对您的密码破解方法产生巨大影响。例如，在查看Windows散列时，我们看到NTLM（Windows）的执行速度大约是5 000 MH/s。常见的Linux散列值SHA-256的执行速度约为5 000 MH/s。
这意味着对于SHA-256散列，您的GPU可以每秒猜测5 000 000 000次。这可能看起来很多，但是当您有大量的单词字典和复杂规则集时，它可能不够强大。这是因为与NTLM相比，SHA-256算法的计算速度非常慢且成本高，NTLM可以达到每秒75 000 000 000个散列值。在例子中，我们将使用8个1080Ti GPU，通过NTLM的快速散列转储。
破解Cyber SpaceKittens NTLM散列
在获得域管理员访问权限后，您可以使用DCSync攻击方法，从域控制器转储所有散列值。您现在的目标是尽可能多地尝试破解散列。您能够在以后的行动中使用这些账户，并向被攻击者公司展示员工密码使用方面的问题。
我们在名为cat.txt的文件中保存所有NTLM Windows散列值。为了使读者更容易理解，我们将省略初始的hashcat执行命令。每个命令执行都将以“hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt”开头。
hashcat：运行hashcat工具。
-w 3：使用固定的配置。
-m 1000：散列值的格式为 NTLM。
-o hashes.cracked：结果输出到文件中。
./hashes/cat.txt：散列值存储的位置。
因此，每当您看到“[hashcat]”字符串时，可使用以下命令替换它：“hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt”。现在，快速破解NTLM散列值，我们可以在8 个GPU 1080Ti平台上高效工作。
对于长度为1～7个字符的任何字母、数字或特殊字符（?a），使用攻击模式“brute-force”（-a 3）破解所有7个字符或更少的密码（增量）。 
[hashcat] -a 3 ?a?a?a?a?a?a?a --increment
7个字符alpha/num/special破解总时间约为5min。8个字符需要运行9h。
您还可以限制特殊字符为少数（!@＃$%^），这将显著减少破解时间和复杂度。
接下来，将所有常见密码字典转储与散列值进行比较。第一个文件（40GB_ Unique_File.txt）是一个3.2 GB大小的密码文件，运行大约需要9s。 
[hashcat] ./lists/40GB_Unique_File.txt
正如我们所看到的，即使是最大的文件，计算的时间也只需要几秒。为了提高效率，我们实际上可以使用“*”运算符，与./lists/文件夹中的每个密码字典进行比较。 
[hashcat] ./lists/*
接下来，基于散列算法的速度，可以在单个密码字典文件上尝试不同的规则集。我们将从rockyou规则集开始，这些NTLM散列值大约需要2min9s。 
[hashcat] ./lists/40GB_Unique_File.txt -r ./rules/rockyou-30000.rule
注意：使用3 GB大小文件设置NSAKEY规则，大约需要7min，而NotSoSecure的“The one rule to rule them all”规则集大约需要20min
我重新使用其他密码字典和规则集组合。所有大型规则集和大型密码字典组合的第一轮，我们至少可以提高30%的破解率。
接下来，我们开始在密码字典的右侧添加字符，满足更长密码破解需求。下面显示的-a 6开关命令，将每个字母/数字/特殊字符添加到密码右侧，从1个字符开始一直到4个字符。 
[hashcat] -i -a 6 ./lists/found.2015.txt ?a?a?a?a
需要花费大约30min时间完成4个字符的尝试
我们还可以在密码列表的左侧添加字符。以下命令将每个字母/数字/特殊字符添加到密码的左侧，从1个字符开始一直到4个字符。 
[hashcat] -i -a 7 ?a?a?a?a ./lists/40GB_Unique_File.txt
需要花费大约30min时间完成4个字符的尝试
hashcat应用：hashcat包括很多工具，可以帮助构建更好的密码字典。一个例子是组合器，它可以采用两个或3个不同的密码字典进行组合。使用小的字典速度相对较快。把我们的shortKrak字典与它自身结合，就会产生一个非常好的结果。 
./hashcat-utils-1.8/bin/combinator.bin lists/shortKrak.txt lists/shortKrak.txt > lists/ comboshortKrak.txt
使用排名靠前的Google 1 000字的列表会产生大约1.4 GB大小的字典文件，因此您必须小心地选择文件的大小。 
./hashcat-utils-1.8/bin/combinator.bin lists/google_top_1000.txt lists/google_top_ 1000.txt > lists/google_top_1000_combo.txt
输入4MB文件，运行combinator，生成的文件大于25 GB的存储空间。因此，要注意这些文件的大小
很多时候，人们使用的密码不是常见的字典单词，而是基于公司、产品或服务的单词。我们可以使用客户端网站创建自定义密码字典。实现这个功能的两个工具如下。 
Brutescrape - https://github.com/cheetz/brutescrape
Burp Word List Extractor -https://portswigger.net/bappstore/21df56baa03d499c 8439018fe075d3d7
接下来，输入所有破解的密码，分析它们并用来创建掩码https://thesprawl.org/ projects/pack/。 
python ./PACK-0.0.4/statsgen.py hashes.password