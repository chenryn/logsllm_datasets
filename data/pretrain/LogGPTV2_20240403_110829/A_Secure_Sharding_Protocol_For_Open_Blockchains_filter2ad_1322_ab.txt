Third, we must ensure that an adaptive adversary observing all
the protocol runs, does not gain signiﬁcant advantage in biasing its
operations or creating sybil identities. Our protocol must tolerate
variable rate of identity creation and inconsistency in views of com-
mittee members (i.e., they may not agree on who are in the same
committee) because of both byzantine failures and network delays
in real networks (as in our threat model).
3. ELASTICO DESIGN
In this section, we present ELASTICO. For the rest of the pa-
per, unless otherwise stated, if some probability p is negligible, it
means it happens with probability at most O(1/2λ) for some secu-
rity parameter λ. Similarly, if some event happens with high prob-
ability (w.h.p), it happens with probability of at least 1−O(1/2λ).
If some event happens with non-negligible probability, it happens
with probability greater than O(1/2λ).
3.1 Solution Overview
set of values X =(cid:83)2s
The algorithm proceeds in epochs, each of which decides on a
i=1 Xi where 2s is the number of subsets Xi.
In this description, we describe the steps taken during one epoch.
The key idea is to automatically parallelize the available com-
putation power, dividing it into several smaller committees, each
processes a disjoint set of transactions (or shards). The number of
committees grows proportionally to the total computation power in
the network. All committees, each of which has a small constant
number c of members, run a classical byzantine consensus protocol
internally to agree on one value. A ﬁnal committee called the con-
sensus committee is responsible for combining the shards selected
by other committees, computing a cryptographic digest and broad-
casting it to the whole network. As the last step in the epoch, the
ﬁnal committee generates a set of shared public random bit strings,
which have a bounded bias. These random strings are used in the
subsequent epoch as a source of randomness—ensuring that the
adversary cannot use observations from previous epoch to simulate
any non-negligible gain in computational power.
In each epoch, processors execute the following 5 steps:
1. Identity Establishment and Committee Formation. Each pro-
cessor locally generates an identity consisting of a public key,
an IP address and a proof-of-work (PoW) solution [1]. The
processor must solve a PoW puzzle which has publicly veriﬁ-
able solutions to generate the ﬁnal component of the identity.
A PoW solution also allows others to verify and accept the
identity of a processor. Because solving PoW requires com-
putation, the number of identities that the malicious proces-
sors can create is limited by the fraction of malicious com-
putational power f. Each processor will then be assigned to
a committee corresponding to its established identity.
2. Overlay Setup for Committees. In this step, processors com-
municate to discover identities of other processors in their
committee. The overlay of a committee is a fully-connected
subgraph containing all the committee members. A naïve
solution is for every processor to broadcast its identity and
committee membership to everyone; however, this solution
will result in O(n2) messages, which is not scalable. We
provide a simple solution that requires a small number of
broadcasts, i.e., O(nc), after which identities in same com-
mittees can quickly identify each other.
3. Intra-committee Consensus. Processors run a standard byzan-
tine agreement protocol (e.g., PBFT [13]) within their com-
mittee to agree on a single set of transactions (or a shard).
There exist simple solutions to guarantee that all commit-
tees propose disjoint shards, e.g., each committee works on a
separate shard of transactions based on their committee ID.
Each committee sends the selected shard, signed by enough
members (i.e., c/2 + 1), to a designated ﬁnal committee.
4. Final Consensus Broadcast. The ﬁnal committee computes
a ﬁnal value from all the values received from other commit-
tees. To do so, members in ﬁnal committee run a byzantine
consensus protocol to agree on the ﬁnal result and broadcast
it to the network.
5. Epoch Randomness Generation. The ﬁnal committee runs a
distributed commit-and-xor scheme to generate an exponen-
tial biased, but bounded, set of random values. The random
values are broadcast to the network and used in the PoW in
the next epoch.
Parameters. Throughout this paper, we use the following nota-
tion: n is the total number of identities that we expect to be gener-
ated in an epoch, f = 1/4 is the fraction of computational power
controlled by malicious users, the size of each committee is c, the
number of committees is 2s, for some constant s. Without loss of
generality, s can be picked such that n = c · 2s. Thus, ELASTICO
scales up almost linearly because the expected number of PoW so-
lutions to have each committee has at least c members is O(n log s)
(or O(n log log (n/c))). For a concrete analysis, we refer readers
to Appendix 10.1. Note that picking smaller s leads to lower la-
tency and bandwidth consumption, which allows one to tune the
network consumption. In addition, the size of committee c is deter-
mined by the security parameter λ and the expected network delay
δt.
Efﬁciency. Our protocol requires O(c) broadcasts to the whole
network (steps 2, 4 and 5). Each such broadcast can be imple-
mented in O(n) message transmissions. Steps 3, 4 and 5 require at
most c round of c2 multicasts for each committee of size c. There-
fore, the total number of messages is O(nc + nc3) or roughly O(n)
if we consider c to be a small constant compared to n.
Security. In each epoch, for f = 1/4, our protocol guarantees
the following security properties S1–S5, the proofs of which are
presented in Section 4.
• S1. Given a security parameter λ, there exists n0 such that
∀n(cid:48) ≥ n0, among the ﬁrst n(cid:48) identities created, at most 1/3
are malicious w.h.p. The gap between f and 1/3 accounts
for the variance in the number of PoW solutions found by
the adversary. Our committee size c is then chosen as based
on the value of n0 (e.g., c ≥ n0) such that every committee
has at most a fraction 1/3 of malicious identities.
• S2. After Step 2, all committee members have their own
view of at least c members in the committee. There may be
discrepancies between two views due to network latency and
byzantine behaviors. This discrepancy, however, is bounded
by c/3 w.h.p and all honest members have identities of other
honest members in their views. Further, the number of unique
identities in all views is bounded by 3c/2, of which at most
1/3 fraction are malicious w.h.p.
• S3. For each committee, Step 3 yields a consensus on the set
of transactions Xi proposed by members in the committee.
The chosen Xi is signed by at least c/2 + 1 of the identities
on the committee. This ensures at least one honest member
has veriﬁed and agreed on the value.
• S4. Step 4 yields a valid set X =(cid:83)2s
i=1 Xi which combines
all proposed sets Xi from other committees. X is also signed
by at least c/2 + 1 of the members in the ﬁnal committee.
• S5. Step 5 will yield a set of random r-bit values with sufﬁ-
cient randomness. Explicitly, the attacker can predict the ran-
dom value, given r is large enough, with a negligible proba-
bility in λ.
Note that we select f = 1/4 in order to achieve a practical value
of committee size. Theoretically, ELASTICO can work with any
f less than 1/3 by increasing the committee size c accordingly to
f. The 1/3 bound is because we need to run a consensus protocol
(e.g., PBFT [13]) at every committee in Step 3, which can tolerate
at most 1/3 fraction of malicious committee members.
3.2
Identity Setup and Committee Formation
First, each processor locally chooses its own identity of the form
(IP, PK), which are public key and IP address respectively for the
authenticated communication later.
In order for the network to
accept an identity, the processor must ﬁnd a PoW solution corre-
sponding to its chosen identity. As a “seed” for the PoW, we need
a public random string epochRandomness generated at the end of
the previous epoch to ensure that the PoW was not precomputed.
We discuss how this is generated and veriﬁed in Section 3.6. As-
sume, for now, that epochRandomness is a public random string
generated in the previous epoch. Speciﬁcally, each processor lo-
cally searches for a valid nonce that satisﬁes the following con-
straint:
O = H(epochRandomness||IP||PK||nonce) ≤ 2γ−D.
D is a predeﬁned parameter in the network which determines how
much work a processor has to do to solves a PoW 3. Note that
one can use other mechanisms like Proof of Stake [29], Proof of
Space [30,31] instead of PoW to establish identities for processors.
Next, our protocol assigns each identity to a random commit-
tee in 2s, identiﬁed by an s-bit committee identity. The committee
assignment must be random, even for the malicious users: a prob-
abilistic polynomial-time adversary should not be able to bias its
committee assignment with non- negligible probability. We use a
PoW to achieve these goals. Speciﬁcally, the last s bits of O speci-
ﬁes which (s-bit) committee id that the processor belongs to. Each
committee will process a separate set of values (e.g., a shard) based
on this s-bit ID.
All processors know epochRandomness and choose their iden-
tity IP and P K privately. For any choice of nonce, H produces
a γ-bit random output. The probability that a single invocation
of H satisﬁes the constraint for a randomly chosen nonce is thus
p = 2−D. No efﬁcient adversary can ﬁnd a nonce that satis-
ﬁes the constraint with non-negligible probability better than p by
the cryptographic pre-image resistance assumption. We later prove
in Lemma 2 (Section 4) that among the ﬁrst n(cid:48) identities, at most
1/3 · n of identities are created by byzantine processors w.h.p.
For establishing S1, we need to examine the number of honest
and byzantine identities that map to any given committee. Since H
is a random oracle, we can treat the bits in its output as unbiased
and random. Therefore, the s bit strings generated in the solution
are random, and an identity is mapped to a given committee with
probability 2−s. Further, if n = 2sc, then on average it requires
O(n log s) PoW solutions to have each of 2s committees has at
least c members (see Appendix 10.1). This is why the scale up
factor is almost linear.
3For example, D = 20 means O has at least 20 leading zeros.
Byzantine adversaries can choose not to broadcast valid solu-
tions, thereby denying membership in a committee. However, this
does not advantage their membership in any other committee. It
remains to choose the parameters s, which determines the number
of committees, and D, which determines the difﬁculty of the PoW.
These are discussed in Section 5 with our experiments.
3.3 Overlay Setup for Committees
Once identities and their committees are established, committee
members need a way to establish point-to-point connections with
their committee peers. A naıve solution is to ask every proces-
sor to broadcast its identity and committee membership to every-
one; however, this solution will result in O(n2) messages, which
is not scalable. Another challenge is that identities are established
through a PoW, which is a probabilistic process that occurs over
time: new identities are continuously being created at some rate.
Ideally, we need a mechanism to establish the ﬁrst c members of
the committee so that all honest members have the same view of
the member set. One could run any byzantine agreement proto-
col here which tolerates up to 1/3 fraction of malicious identities.
However, this would yield BFT protocol running over the entire
network without any parallelization (e.g., O(n3) cost in the worst
case). Here we show something more efﬁcient which has O(nc)
message complexity.
To reduce the number of broadcast messages, we have a special
committee of size c to serve as a set of “directories." All identities
can ﬁnd their committee peers by contacting the directory commit-
tee and then set up point-to-point links. Further, we allow commit-
tee members (including directory members) to have different views
of the member set, a challenge that most previous BFT protocols do
not face. Our protocol can tolerate this discrepancy and show that
i) all honest members have others’ identities in their view; ii) the
difference is bounded by c/2 as in S2. Our algorithm to setup the
overlay for committee is depicted in Algorithm 1.
More speciﬁcally, the directory committee is simply a commit-
tee of the ﬁrst c identities. During step one, if a processor ﬁnds
a valid solution for PoW, and it has not seen c identities, then the
processor will broadcast this identity to the whole network. On
the other hand, during step one, whenever a processor ﬁnds a valid
solution for PoW for an identity, the processor will inform all di-
rectory members (Line 17). Each processor informs only the ﬁrst c
directories that it sees in the network. Note that each processor can
have its own view of who are the ﬁrst c directories.
In this way, directory members keep track of the committee mem-
bership announcements. Once each committee contains at least c
identities each, directory members multicast the list of committee
members to each committee member (Line 33). To reduce the num-
ber of messages, a non-directory committee member only receives
the list of members in its own committee. Notice that directory
members do not have to agree on the same set of members for
a committee. Each directory member can decide independently
which members are in a given committee.
For committee members, each will receive at least 2c/3 lists of c
committee members (from at least 2c/3 honest directories — due
to S2). A malicious directory may not send any list to committee
members. Worse, malicious directories may send a bad member
list to committee members (i.e., a list which favors malicious iden-
tities). To prevent that, a committee member takes the union of all
the identities that it receives to create a view of at least c committee
members (including itself) (Line 19). It is still possible that com-
mittee members have different member sets. We analyze both the
sources and show that the discrepancy is bounded by at most c/2
members in Lemma 3, which proves S2.
Algorithm 1 Algorithm to form the directory committee and setup
overlay for other committees.
Input: c: committee size; k = 2s: number of committees
Output: Every committee member receives at least c members of
(cid:46) Done by everyone
(cid:46) Receive a PoW solution
(cid:46) Find a PoW solution
end if
if lV iews ← GetViewsFromDirectories() then
(cid:46) Move to next step in the protocol
its committee
w ← ReceivePoW()
if len(curDirectories) < c then
myPoW.append(w)
Send(curDirectories, w)
curDirectories.append(w)
end if
w ← SolvePoW()
if len(curDirectories) < c then
curDirectories.append(w)
Execute RunAsDirectory()
BroadcastToNetwork(w)
else
curDirectories ← empty
myPoW ← empty
while True do
1: procedure FORMCOMMITTEE
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
end if
21:
end while
22:
23: end procedure
24: procedure RUNASDIRECTORY
25:
26:
27:
28:
29:
30:
31:
32:
33:
v ← union(lV iews)
return v