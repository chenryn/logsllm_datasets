title:Effective trust management through a hybrid logical and relational
approach
author:Adam J. Lee and
Ting Yu and
Yann Le Gall
Effective Trust Management Through a Hybrid Logical and
Relational Approach
Adam J. Lee†
PI:EMAIL
Ting Yu‡
PI:EMAIL
Yann Le Gall†
PI:EMAIL
†Department of Computer Science, University of Pittsburgh
‡Department of Computer Science, North Carolina State University
ABSTRACT
Despite a plethora of recent research regarding trust man-
agement approaches to authorization, relatively little atten-
tion has been given to exactly how these technologies can be
eﬀectively deployed. In this paper, we investigate one way
in which well-established logical trust management systems
described in the literature can be deployed within enterprise
environments. Speciﬁcally, we develop a framework within
which logical trust management policies can be managed
using a relational DBMS. We describe a correct and com-
plete procedure for compiling CTM credentials into dynamic
views within a database, and show how the resulting system
can be used to perform role membership checks or to enu-
merate the members of a given role. We then propose a
hybrid algorithm that leverages the logical ruleset and the
underlying DBMS to eﬃciently enumerate the capabilities
ascribed to a given user. We also present an evaluation of
a prototype implementation of our framework that demon-
strates the practicality of our approach. As CTM extends
the RT family of trust management languages—which are
representative of a large class of Datalog-based trust man-
agement systems—our work is likely generalizable to other
trust management approaches.
Categories and Subject Descriptors: D.4.6 [Operating
Systems]: Security and Protection—access controls, authen-
tication; K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms: Security
Keywords: Credentials, databases, policy, reputation, trust
1.
INTRODUCTION
Today’s organizations bear little resemblance to the highly
centralized monoliths of old, having instead embraced the
pervasiveness and reliability of the Internet to become ever
more distributed entities. For example, it is the norm for an
organization to be comprised of many logically and phys-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’10 April 13–16, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7 ...$10.00.
ically decentralized divisions acting autonomously, compa-
nies are increasingly forming virtual organizations to carry
out a range of short- and long-term goals, and the rise of
Web 2.0 has involved users in content development and dis-
semination like never before. Unfortunately, legacy identity-
based access control technologies are ill-suited to meet the
needs of these emerging dynamic organizations.
As a result, the past decade has seen much research on
trust management [2,3,5,20], trust negotiation [19,27,29,30],
and distributed proof construction [1, 12, 15, 24] approaches
to authorization. More recently, researchers have begun to
combine these types of systems with the decentralized rep-
utation and recommendation systems used in P2P and so-
cial networks [4, 7, 9, 10, 18] to take a more comprehensive
approach to managing trust. These types of trust manage-
ment systems allow administrators to manage and query the
protection state of a distributed system in a manner that
leverages—rather than works around—the decentralized na-
ture of the system.
In order to be a viable solution for emerging networked
environments, a trust management system must be capa-
ble of eﬃciently answering queries over the protection state
of the environment, even when handling policies with rich
structures and complex reputation functions. Existing re-
search [1,2,6,8,17,23] has done an admirable job of address-
ing the proof of compliance question (Can user u satisfy pol-
icy p?), but relatively little attention has been given to the
policy satisfaction question (Which users can satisfy the pol-
icy p?) and the capability question (What permissions does
user u have?). The latter questions are intrinsically diﬃcult
to solve in many trust management systems, but are neces-
sary if administrators are to fully understand the protection
state of the system. Furthermore, eﬃciency is not the only
concern when considering the deployment of trust manage-
ment systems in commercial environments: these systems
must also be deployable on top of existing IT infrastruc-
tures. To this end, De Capitani Di Vimercati et al. show
that a bare-bones trust management system can be imple-
mented entirely within a DBMS [11]. While this is a step in
the right direction, it says little about the adoption of the
myriad logical trust management systems proposed in the
research literature.
In this paper, we further pursue this line of work by de-
veloping an implementation of the composite trust manage-
ment system CTM [18] that is capable of eﬃciently answer-
ing proof of compliance, policy satisfaction, and capability
queries by leveraging both logical inference, as well as an
open-source DBMS substrate. CTM extends the RT fam-
ily of role-based logical trust management systems [20] with
support for aggregate horizontal trust calculations (e.g., rep-
utation functions or QoS metrics). Because RT —and there-
fore CTM—is representative of a broad class of logical trust
management systems and has been well-studied in the re-
search literature, our work takes a step beyond [11] to show
that we need not resort to special-purpose solutions to re-
alize the beneﬁts of trust management within commercial
IT infrastructures. In addressing this challenge, this paper
makes the following contributions:
• We describe the design of a framework for trust manage-
ment policy management built upon a commercial rela-
tional DBMS substrate. This framework automatically
synchronizes an organization’s logical policy ruleset with
the underlying database, and uses these complimentary
views of an organization’s protection state to eﬃciently
answer many types of trust management queries.
• Within the context of this framework, we describe a cor-
rect and complete compilation procedure for transform-
ing a set of CTM policy credentials into a collection of
dynamic views over a standard relational database. The
resulting database provides an eﬃcient mechanism for an-
swering proof of compliance and policy satisfaction queries.
• We present a novel algorithm for answering capability re-
view queries over a composite trust management system;
i.e., given a particular user, enumerate the set of rights
possessed by this user. Our algorithm takes advantage of
our framework’s logical rule set to forward-chain from the
user’s set of base rights whenever possible, while simul-
taneously leveraging the database’s ability to quickly ag-
gregate horizontal trust assessments and perform complex
joins over role memberships to answer more diﬃcult mem-
bership queries. This hybrid forward-chaining/top-down
processing approach increases the eﬃciency with which
capability review queries can be answered.
• To assess the eﬃciency of our framework, we present a
comprehensive evaluation of a prototype implementation.
In particular, we describe several microbenchmarks that
gauge the core costs involved with processing queries over
basic trust management policies. We then discuss the re-
sults of evaluating a larger workload that simulates the
use of our framework within the context of a set of hier-
archically organized virtual organizations.
When viewed collectively, the above contributions provide
further insight into questions surrounding the deployment of
trust management systems. First, we demonstrate that even
complex CTM policies can be evaluated eﬃciently in central-
ized systems, a challenge that was left as an open problem
in [18]. Second, our framework shows that existing commer-
cial technologies form a viable substrate for the realization
of feature-rich trust management in complex systems.
The rest of this paper is organized as follows. Section 2
provides a brief introduction to the CTM composite trust
management policy language, and then discuss the types of
queries that a trust management framework should be capa-
ble of eﬃciently answering. In Section 3, we describe the de-
sign of a centralized framework for processing CTM queries
using oﬀ-the-shelf relational DBMS technologies. Section 4
describes how this framework can be used to eﬃciently pro-
cess trust management queries. In particular, we present a
compilation procedure for transforming a collection of CTM
policy credentials into a set of dynamic views over a re-
lational database, and describe a novel hybrid algorithm
for processing capability review queries over trust manage-
ment policies. In Section 5 we present a comprehensive per-
formance evaluation of our framework. Finally, Section 6
presents an overview of related research eﬀorts, while Sec-
tion 7 discusses our conclusions and promising directions for
future research.
2. BACKGROUND
To make our discussion concrete, in the rest of this pa-
per we give the speciﬁc design of the framework to sup-
port CTM, an extension of the RT family of logical trust
management languages. One distinguished feature of CTM
is its support for aggregate trust evaluation (e.g., reputa-
tion functions) and the composition of credential-based and
reputation-based trust. This feature, on the one hand, sig-
niﬁcantly improves the expressiveness of trust management
languages. On the other hand, it imposes challenges to eﬃ-
cient trust policy evaluation. In this section, we give a brief
overview of CTM, and discuss the types of queries that we
expect a trust policy evaluation engine to answer eﬃciently.
2.1 Composite Trust Management
Two types of trust aﬀect human interactions in a society:
vertical trust and horizontal trust. Vertical trust is a trust
relationship between individuals and institutions or author-
ities (often in the form of credentials). Horizontal trust cap-
tures the trust that can be inferred from the observations
and opinions of other peers (often in the form of reputa-
tions aggregated from individual’s experience). These two
types of trust are complementary and often used in concert
during one’s decision making. Lee and Yu proposed CTM,
a composite trust management language to support ﬂexi-
ble composition of vertical and horizontal trust [18]. The
design of CTM is built on RT with extensions to support
constraints on reputation evaluations.
As in RT and many other trust management languages,
CTM uses the concept of role membership to deﬁne a set-
based semantics for policies. Intuitively, a role deﬁnes a set
of principals possessing the same properties, while a policy
deﬁnes a set of role memberships that must be possessed by
an authorized principal. Like in RT , principals in CTM are
identiﬁed by means of identity certiﬁcates. A role is deﬁned
simply as strings identifying the name of the role. Policy
statements are expressed as one or more of these role deﬁ-
nitions and are encoded as role deﬁnition credentials signed
by the author of the role deﬁnition. CTM supports the fol-
lowing four basic types of role deﬁnitions in RT .
Simple Member. A role deﬁnition of the form KA.R ←
KD encodes the fact that principal KA considers princi-
pal KD to be a member of the role KA.R. For example,
StateU.student ← Alice says that Alice belongs to the role
StateU.student.
Simple Containment. A role deﬁnition of
the form
KA.R ← KB.R1 encodes the fact that principal KA deﬁnes
the role KA.R to contain all members of the role KB.R1,
which is deﬁned by principal KB.
example,
eBook.pref erred customer ← StateU.student says that Sta-
teU students are also preferred customers of eBook, an on-
line book store. This is a typical way to specify delegation
in decentralized systems.
For
Linking Containment. A role deﬁnition of the form
KA.R ← KA.R1.R2 is called a linked role. This deﬁnes
the members of KA.R to contain all members of KB.R2
for each KB that is a member of KA.R1. For example,
eBook.pref erred customer ← ABU.accredited univ.student
says that any student of a university that is accredited by
ABU (Accreditation Board for Universities) is a preferred
customer of eBook.
Intersection Containment. A role deﬁnition of the form
KA.R ← KB1 .R1 ∩ ··· ∩ KBn .Rn deﬁnes KA.R to contain
the principals who are members of each role KBi .Ri where
1 ≤ i ≤ n. For example, eBook.pref erred customer ←
StateU.student∩ACM.member says that an StateU student
who is also a member of ACM is a preferred customer of
eBook.
To support horizontal trust generally, CTM assumes prin-
cipals interact through a series of transactions. Feedbacks
are issued by involved principals after a transaction com-
pletes. A feedback may contain a variety of attributes, in-
cluding the issuer (i.e., the principal who issues the feed-
back), the signer (i.e., the principal who certiﬁes the feed-
back), the subject (i.e., about whose behavior the feedback
applies to), a single rating, and other transaction-speciﬁc
properties. A horizontal trust evaluation thus can be mod-
eled as the application of a trust function f : 2F ×P ×P →
R, where F is a set of feedbacks about transactions among
principals in a system, P is the set of principals, and R
is the reputation domain (i.e., the possible trust values for
reputation-based trust). Intuitively, given a principal A and
B, and a set of feedbacks F , f (F, A, B) returns A’s trust
assessment of B based on some evidence, i.e., the set of
feedbacks in F . Here A and B are called the source and the
target of a reputation evaluation respectively.
Given the above formalism, CTM allows a domain to de-
ﬁne roles in terms of reputation evaluation. Note that a
domain may impose ﬂexible constraints on the evaluation
of a reputation function, including the set of feedbacks fed
to the reputation function. Speciﬁcally, besides the above
four types of roles as deﬁned in RT , CTM further supports
the concept of aggregate containment roles. For ease of pre-
sentation, we consider the following simpliﬁed deﬁnition of
aggregate containment:
Aggregate Containment. Let & represent a comparison
operator (e.g., , or (=). The role deﬁnition
KA.R ← KB.f (issuer = Ki.Ri, output & co) deﬁnes the role
KA.R to contain all principals whose horizontal trust level
satisﬁes the constraint output&co after principal KB invokes
the horizontal trust assessment function f when consider-
ing feedback reports issued by principals in the role Ki.Ri.
For example, Alice.R1 ← Alice.f (issuer = Alice.F riend,
output ≥ 0.8) deﬁnes that a principal B is a member of
Alice.R1 if Alice’s trust evaluation of B using the function
f is over 0.8, when considering feedback reports issued by
Alice’s friends.
As is the case for the four basic types of roles in RT , CTM
has a well-deﬁned set-theoretic semantics for aggregate con-
tainment roles. Therefore, they can be ﬂexibly combined
with other types of roles, which enables arbitrary composi-
tion of vertical and horizontal trust. The above example in
fact shows how other roles are used in the deﬁnition of an ag-
gregate containment role. Similarly, aggregate containment
roles may also be used in the deﬁnition of vertical roles. The
full extent of this potential to arbitrarily compose horizontal
and vertical trust is discussed in detail in [18]; as such we
do not elaborate upon it further in this paper
2.2 Trust Query Types
Many security vulnerabilities in information systems are
caused by the misconﬁguration of security policies, which
often results in either giving excessive or insuﬃcient privi-
leges for principals to carry their tasks. Privilege review is
one of the key steps to discover and ﬁx such conﬁguration
mistakes. It is in particular important to decentralized trust
management because one domain’s trust decision may aﬀect
privileges of many principals globally. A trust management
system should not only have the capability to answer access
control decisions, but also have eﬃcient support for various
privilege review requirements.
In this paper we consider the support for the following
three useful types of privilege review queries against a trust
management system.
Proof of compliance query. Determine whether a prin-
cipal is a member of a role. Such queries often correspond
to access control decisions when a principal requests access
to certain resources. They are frequently issued and should
be answered not only correctly but very eﬃciently.
Role membership query. Determine all the members of
a role. Such queries are useful to check to what extend cer-
tain privileges have been propagated in a system. They are
also often needed for “what-if” type of analysis to determine
the eﬀect of a change of policy.
Capability query. Given a principal, determine all the roles
of which the principal is a member. Such queries are useful
to check whether a user possess excessive privileges.
Though role membership queries and capability queries
do not happen as frequently as proof of compliance queries,
it is still desirable to answer them with reasonable eﬃciency.
Similar to the implementation of the access matrix in tradi-
tional access control, how role information is maintained in
a trust management system greatly aﬀects the eﬃciency of
query answering.
3. THE DESIGN OF A TRUST EVALUATION
ENGINE
A trust evaluation engine is essentially a reference monitor
that determines whether a principal possesses the necessary
privileges to perform certain actions or access certain re-
In CTM, as privileges are implicitly wrapped as
sources.
roles, a trust evaluation engine ensures the correct mapping
between users and roles. It also helps to answer policy anal-
ysis queries as mentioned in the previous section.
Instead of developing a trust evaluation engine as a stand
alone software system from scratch, in this paper we advo-
cate to build such a system on top of commodity relational
database management systems (DBMSs), which we believe
brings at least the following beneﬁts:
1. Easy deployment. DBMSs are arguably one of the
most widely deployed and managed software systems in
enterprises, organizations, and governments. By building
on top of DBMSs, a trust evaluation engine can easily be
integrated with existing IT infrastructures.
policy update 
requests
trust queries
trust query
results
Trust 
Management
Front End
Policy 
Maintenance 
Module
Trust Query
Evaluation
Module
Policy 
Analysis 
Module
Trust 