内部编码：
- ziplist
- linkedlist
- quicklist 结合了ziplist和linkedlist两者的优势
使用场景：
- 消息队列 户端使用lrpush从列表左侧插入元素 多个消费者客户端使用brpop命令阻塞式的“抢”
```mermaid
stateDiagram-v2
  生产者 --> Redis: lpush
  消费者1 --> Redis: brpop
  消费者2 --> Redis: brpop
  消费者3 --> Redis: brpop
```
- 分页列表 使用lrange实现
其他：
·lpush+lpop=Stack
·lpush+rpop=Queue
·lpsh+ltrim=Capped Collection
·lpush+brpop=Message Queue
## 集合类型
命令|时间复杂度
-|-
sadd key element element...|O(k),k是元素个数
srem key element element ...|O(k),k是元素个数
scard key|0(1)
sismember key element|O(1)
srandmember key count|O(counnt)
spop key|O(1)
smembers key|O(n),n是元素总数
sinter key key... 或 sinterstore|O(m*k),k是多个集合中元素最少的个数，m是键个数
suinon key key... 或 suionstore|O(k),k是多个集合元素个数和
sdiff key key... 或 sdiffstore|O(k),k是多个集合元素个数和
```sh
sadd set a b c # 添加元素
srem set b # 删除元素
scard set # 计算元素个数(维护一个变量得到)
sismember set c # 判断元素是否在集合内
srandmember set 2 # 随机从集合返回指定个数元素
# 正数：取出一个去重的结果集（不能超过已有集）
# 负数：取出一个带重复的结果集，一定满足你要的数量
# 如果：0，不返回
spop set 1 # 随机弹出元素
smembers set # 获取所有元素
sinter s1 s2 # 求交集
sunion s1 s2 # 求并集
sdiff s1 s2 # 求差集
sinterstore s3 s1 s2 # 交集结果存储到s3
# ...
```
内部编码：
- intset 占用内存小
- hashtable
例子：用户标签
```sh
sadd user1 food movie sport music
sadd user2 food music network
sinter user1 user2 # 计算用户共同感兴趣的标签
```
例子：抽奖
```sh
sadd k 1 2 3 4 5 6 7 8 9 # 9个用户
SRANDMEMBER k 3 # 抽取三个不重复用户
SRANDMEMBER k -3 # 抽取三个可能会重复的用户
```
- sadd=Tagging（标签）
- spop/srandmember=Random item（生成随机数，比如抽奖）
- sadd+sinter=Social Graph（社交需求）
## 有序集合类型
命令|时间复杂度
-|-
zadd key score member...|O(k×log(n)),k是添加成员的个数，n是当前有序集合成员个数
zcard key|O(1)
zscore key member|O(1)
zrank key member、zrevrank key member|O(log(n)) n是当前有序集合成员个数
zrem key member...|O(k*1og(n)),k是删除成员的个数，n是当前有序集合成员个数
zincrby key increment member|O(log(n)),n是当前有序集合成员个数
zrange key start end 、zrevrange key start end|O(log(n)+k),k是要获取的成员个数，n是当前有序集合成员个数
zcount|O(log(n)),n是当前有序集合成员个数
zremrangebyrank key start end|O(log(n)+),k是要删除的成员个数，n是当前有序集合成员个数
zremrangebyscore key min max|O(log(n)+),k是要删除的成员个数，n是当前有序集合成员个数
zinterstore destination numkeys key key ...|`O(n*k)+O(m*log(m))`,n是成员数最小的有序集合成员个数，k是有序集合的个数，m是结果集中成员个数
zunionstore destination numkeys key key ...|O(n)+O(m*log(m)),n是成员数最小的有序集合成员个数，k是有序集合的个数，m是结果集中成员个数
```sh
help @sorted_set
```
![批注 2020-06-19 113509](/assets/批注%202020-06-19%20113509.png)
物理内存左小右大
```sh
zadd users 251 tom # 添加成员 分数251
zcard users # 计算成员个数
zscore users tom # 获取某个成员分数
zrank users tom # 计算某个成员排名
zrem users tom # 删除成员
zincrby users 8 jerry # 增加某个成员的分数
zrange users 0 10 # 正序返回指定排名范围的成员
zrevrange users 0 10 # 倒序返回指定排名范围的成员
zrangebyscore users 0 255 # 正序返回指定分数范围的成员
zrevrangebyscore users 0 255 # 正序返回指定分数范围的成员
zcount users 0 255 # 计算指定分数范围的成员个数
zremrangebyrank users 0 1 # 删除指定排名范围内的成员
zremrangebyscore users 0 10 # 删除指定分数范围内的成员
zinterstore user:ranking:1_inter_2 2 user:ranking:1 user:ranking:2 weights 1 0.5 aggregate max # 并集
```
内部数据结构：
- ziplist
- skiplist
例子：点赞
```sh
zadd video 0 cxk # cxk发布了一个视频 0赞
zincrby video 1 cxk # 有人给cxk视频点了一个赞
zrem video cxk # 清空cxk的视频点赞
zrevrange video 0 9 # 获取点赞排行榜
```
## Streams
- XADD：插入消息，保证有序，可以自动生成全局唯一 ID
- XREAD：用于读取消息，可以按 ID 读取数据
- XREADGROUP：按消费组形式读取消息
- XPENDING 和 XACK：XPENDING 命令可以用来查询每个消费组内所有消费者已读取但尚未确认的消息，而 XACK 命令用于向消息队列确认消息处理已完成
## 键管理
单键管理：
```sh
rename name newname # 键重命名
randomkey # 随机返回数据库里的一个键
expire name 10 # 设置键10秒后过期
expireat name timestamp # 设置键在指定时间戳后过期
# 对于字符串 set 会清除其过期时间
# Redis不支持二级数据结构（例如哈希、列表）内部元素的过期功能
persist name # 去除键的过期时间
```
键迁移：
- move 同一redis内
- dump restre 通过RDB文件的方式
- migrate 自动通过网络传输数据
遍历键：
```sh
keys * # 获取所有键 如果Redis包含了大量的键，执行keys命令很可能会造成Redis阻塞
scan 0 # 渐进式遍历 该命令返回两个部分：1. 下一个游标 2. 遍历结果
# 如果要继续遍历 下一次scan后面接的就是返回的游标
```
数据库管理：
```sh
select 2 # 切换到2号数据库
flushdb # 清空数据库 如果当前数据库键值数量比较多，flushdb/flushall存在阻塞Redis的可能
flushall
```
Redis3.0后已经逐渐弱化多数据库这个功能