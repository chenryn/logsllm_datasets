.\" %%%license_end
.\"
.\" 2006-02-03, mtk, substantial wording changes and other improvements
.\" 2007-08-27, lee schermerhorn 
.\"     more precise specification of behavior.
.\"
.th set_mempolicy 2 2021-06-20 linux "linux programmer's manual"
.sh name
set_mempolicy \- set default numa memory policy for a thread and its children
.sh synopsis
.nf
.b "#include "
.pp
.bi "long set_mempolicy(int " mode ", const unsigned long *" nodemask ,
.bi "                   unsigned long " maxnode );
.pp
link with \fi\-lnuma\fp.
.fi
.sh description
.br set_mempolicy ()
sets the numa memory policy of the calling thread,
which consists of a policy mode and zero or more nodes,
to the values specified by the
.ir mode ,
.ir nodemask ,
and
.i maxnode
arguments.
.pp
a numa machine has different
memory controllers with different distances to specific cpus.
the memory policy defines from which node memory is allocated for
the thread.
.pp
this system call defines the default policy for the thread.
the thread policy governs allocation of pages in the process's
address space outside of memory ranges
controlled by a more specific policy set by
.br mbind (2).
the thread default policy also controls allocation of any pages for
memory-mapped files mapped using the
.br mmap (2)
call with the
.b map_private
flag and that are only read (loaded) from by the thread
and of memory-mapped files mapped using the
.br mmap (2)
call with the
.b map_shared
flag, regardless of the access type.
the policy is applied only when a new page is allocated
for the thread.
for anonymous memory this is when the page is first
touched by the thread.
.pp
the
.i mode
argument must specify one of
.br mpol_default ,
.br mpol_bind ,
.br mpol_interleave ,
.br mpol_preferred ,
or
.br mpol_local
(which are described in detail below).
all modes except
.b mpol_default
require the caller to specify the node or nodes to which the mode applies,
via the
.i nodemask
argument.
.pp
the
.i mode
argument may also include an optional
.ir "mode flag" .
the supported
.i "mode flags"
are:
.tp
.br mpol_f_numa_balancing " (since linux 5.12)"
.\" commit bda420b985054a3badafef23807c4b4fa38a3dff
when
.i mode
is
.br mpol_bind ,
enable the kernel numa balancing for the task if it is supported by the kernel.
if the flag isn't supported by the kernel, or is used with
.i mode
other than
.br mpol_bind ,
\-1 is returned and
.i errno
is set to
.br einval .
.tp
.br mpol_f_relative_nodes " (since linux 2.6.26)"
a nonempty
.i nodemask
specifies node ids that are relative to the
set of node ids allowed by the process's current cpuset.
.tp
.br mpol_f_static_nodes " (since linux 2.6.26)"
a nonempty
.i nodemask
specifies physical node ids.
linux will not remap the
.i nodemask
when the process moves to a different cpuset context,
nor when the set of nodes allowed by the process's
current cpuset context changes.
.pp
.i nodemask
points to a bit mask of node ids that contains up to
.i maxnode
bits.
the bit mask size is rounded to the next multiple of
.ir "sizeof(unsigned long)" ,
but the kernel will use bits only up to
.ir maxnode .
a null value of
.i nodemask
or a
.i maxnode
value of zero specifies the empty set of nodes.
if the value of
.i maxnode
is zero,
the
.i nodemask
argument is ignored.
.pp
where a
.i nodemask
is required, it must contain at least one node that is on-line,
allowed by the process's current cpuset context,
(unless the
.b mpol_f_static_nodes
mode flag is specified),
and contains memory.
if the
.b mpol_f_static_nodes
is set in
.i mode
and a required
.i nodemask
contains no nodes that are allowed by the process's current cpuset context,
the memory policy reverts to
.ir "local allocation" .
this effectively overrides the specified policy until the process's
cpuset context includes one or more of the nodes specified by
.ir nodemask .
.pp
the
.i mode
argument must include one of the following values:
.tp
.b mpol_default
this mode specifies that any nondefault thread memory policy be removed,
so that the memory policy "falls back" to the system default policy.
the system default policy is "local allocation"\(emthat is,
allocate memory on the node of the cpu that triggered the allocation.
.i nodemask
must be specified as null.
if the "local node" contains no free memory, the system will
attempt to allocate memory from a "near by" node.
.tp
.b mpol_bind
this mode defines a strict policy that restricts memory allocation to the
nodes specified in
.ir nodemask .
if
.i nodemask
specifies more than one node, page allocations will come from
the node with the lowest numeric node id first, until that node
contains no free memory.
allocations will then come from the node with the next highest
node id specified in
.i nodemask
and so forth, until none of the specified nodes contain free memory.
pages will not be allocated from any node not specified in the
.ir nodemask .
.tp
.b mpol_interleave
this mode interleaves page allocations across the nodes specified in
.i nodemask
in numeric node id order.
this optimizes for bandwidth instead of latency
by spreading out pages and memory accesses to those pages across
multiple nodes.
however, accesses to a single page will still be limited to
the memory bandwidth of a single node.
.\" note:  the following sentence doesn't make sense in the context
.\" of set_mempolicy() -- no memory area specified.
.\" to be effective the memory area should be fairly large,
.\" at least 1 mb or bigger.
.tp
.b mpol_preferred
this mode sets the preferred node for allocation.
the kernel will try to allocate pages from this node first
and fall back to "near by" nodes if the preferred node is low on free
memory.
if
.i nodemask
specifies more than one node id, the first node in the
mask will be selected as the preferred node.
if the
.i nodemask
and
.i maxnode
arguments specify the empty set, then the policy
specifies "local allocation"
(like the system default policy discussed above).
.tp
.br mpol_local " (since linux 3.8)"
.\" commit 479e2802d09f1e18a97262c4c6f8f17ae5884bd8
.\" commit f2a07f40dbc603c15f8b06e6ec7f768af67b424f
this mode specifies "local allocation"; the memory is allocated on
the node of the cpu that triggered the allocation (the "local node").
the
.i nodemask
and
.i maxnode
arguments must specify the empty set.
if the "local node" is low on free memory,
the kernel will try to allocate memory from other nodes.
the kernel will allocate memory from the "local node"
whenever memory for this node is available.
if the "local node" is not allowed by the process's current cpuset context,
the kernel will try to allocate memory from other nodes.
the kernel will allocate memory from the "local node" whenever
it becomes allowed by the process's current cpuset context.
.pp
the thread memory policy is preserved across an
.br execve (2),
and is inherited by child threads created using
.br fork (2)
or
.br clone (2).
.sh return value
on success,
.br set_mempolicy ()
returns 0;
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b efault
part of all of the memory range specified by
.i nodemask
and
.i maxnode
points outside your accessible address space.
.tp
.b einval
.i mode
is invalid.
or,
.i mode
is
.b mpol_default
and
.i nodemask
is nonempty,
or
.i mode
is
.b mpol_bind
or
.b mpol_interleave
and
.i nodemask
is empty.
or,
.i maxnode
specifies more than a page worth of bits.
or,
.i nodemask
specifies one or more node ids that are
greater than the maximum supported node id.
or, none of the node ids specified by
.i nodemask
are on-line and allowed by the process's current cpuset context,
or none of the specified nodes contain memory.
or, the
.i mode
argument specified both
.b mpol_f_static_nodes
and
.br mpol_f_relative_nodes .
or, the
.b mpol_f_numa_balancing
isn't supported by the kernel, or is used with
.i mode
other than
.br mpol_bind .
.tp
.b enomem
insufficient kernel memory was available.
.sh versions
the
.br set_mempolicy ()
system call was added to the linux kernel in version 2.6.7.
.sh conforming to
this system call is linux-specific.
.sh notes
memory policy is not remembered if the page is swapped out.
when such a page is paged back in, it will use the policy of
the thread or memory range that is in effect at the time the
page is allocated.
.pp
for information on library support, see
.br numa (7).
.sh see also
.br get_mempolicy (2),
.br getcpu (2),
.br mbind (2),
.br mmap (2),
.br numa (3),
.br cpuset (7),
.br numa (7),
.br numactl (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/copysign.3
.so man2/msgop.2
.so man3/pthread_mutexattr_setrobust.3
.so man3/cmsg.3
.\" copyright 1993 giorgio ciucci (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified 1996-10-22, eric s. raymond 
.\" modified 2002-01-08, michael kerrisk 
.\" modified 2003-04-28, ernie petrides 
.\" modified 2004-05-27, michael kerrisk 
.\" modified, 11 nov 2004, michael kerrisk 
.\"	language and formatting clean-ups
.\"	added notes on /proc files
.\" 2005-04-08, mtk, noted kernel version numbers for semtimedop()
.\" 2007-07-09, mtk, added an example code segment.
.\"
.th semop 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
semop, semtimedop \- system v semaphore operations
.sh synopsis
.nf
.b #include 
.pp
.bi "int semop(int " semid ", struct sembuf *" sops ", size_t " nsops );
.bi "int semtimedop(int " semid ", struct sembuf *" sops ", size_t " nsops ,
.bi "               const struct timespec *" timeout );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br semtimedop ():
.nf
    _gnu_source
.fi
.sh description
each semaphore in a system\ v semaphore set
has the following associated values:
.pp
.in +4n
.ex
unsigned short  semval;   /* semaphore value */
unsigned short  semzcnt;  /* # waiting for zero */
unsigned short  semncnt;  /* # waiting for increase */
pid_t           sempid;   /* pid of process that last
.ee
.in
.pp
.br semop ()
performs operations on selected semaphores in the set indicated by
.ir semid .
each of the
.i nsops
elements in the array pointed to by
.i sops
is a structure that
specifies an operation to be performed on a single semaphore.
the elements of this structure are of type
.ir "struct sembuf" ,
containing the following members:
.pp
.in +4n
.ex
unsigned short sem_num;  /* semaphore number */
short          sem_op;   /* semaphore operation */
short          sem_flg;  /* operation flags */
.ee
.in
.pp
flags recognized in
.i sem_flg
are
.b ipc_nowait
and
.br sem_undo .
if an operation specifies
.br sem_undo ,
it will be automatically undone when the process terminates.
.pp
the set of operations contained in
.i sops
is performed in
.ir "array order" ,
and
.ir atomically ,
that is, the operations are performed either as a complete unit,
or not at all.
the behavior of the system call if not all operations can be
performed immediately depends on the presence of the
.b ipc_nowait
flag in the individual
.i sem_flg
fields, as noted below.
.pp
each operation is performed on the
.ir sem_num \-th
semaphore of the semaphore set, where the first semaphore of the set
is numbered 0.
there are three types of operation, distinguished by the value of
.ir sem_op .
.pp
if
.i sem_op
is a positive integer, the operation adds this value to
the semaphore value
.ri  ( semval ).
furthermore, if
.b sem_undo
is specified for this operation, the system subtracts the value
.i sem_op
from the semaphore adjustment
.ri ( semadj )
value for this semaphore.
this operation can always proceed\(emit never forces a thread to wait.
the calling process must have alter permission on the semaphore set.
.pp
if
.i sem_op
is zero, the process must have read permission on the semaphore
set.
this is a "wait-for-zero" operation: if
.i semval
is zero, the operation can immediately proceed.
otherwise, if
.b ipc_nowait
is specified in
.ir sem_flg ,
.br semop ()
fails with
.i errno
set to
.b eagain
(and none of the operations in
.i sops
is performed).
otherwise,
.i semzcnt
(the count of threads waiting until this semaphore's value becomes zero)
is incremented by one and the thread sleeps until
one of the following occurs:
.ip \(bu 2
.i semval
becomes 0, at which time the value of
.i semzcnt
is decremented.
.ip \(bu
the semaphore set
is removed:
.br semop ()
fails, with
.i errno
set to
.br eidrm .
.ip \(bu
the calling thread catches a signal:
the value of
.i semzcnt
is decremented and
.br semop ()
fails, with
.i errno
set to
.br eintr .
.pp
if
.i sem_op
is less than zero, the process must have alter permission on the
semaphore set.
if
.i semval
is greater than or equal to the absolute value of
.ir sem_op ,
the operation can proceed immediately:
the absolute value of
.i sem_op
is subtracted from
.ir semval ,
and, if
.b sem_undo
is specified for this operation, the system adds the absolute value of
.i sem_op
to the semaphore adjustment
.ri ( semadj )
value for this semaphore.
if the absolute value of
.i sem_op
is greater than
.ir semval ,
and
.b ipc_nowait
is specified in
.ir sem_flg ,
.br semop ()
fails, with