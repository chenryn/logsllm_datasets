title:Rosita++: Automatic Higher-Order Leakage Elimination from Cryptographic
Code
author:Madura A. Shelton and
Lukasz Chmielewski and
Niels Samwel and
Markus Wagner and
Lejla Batina and
Yuval Yarom
Rosita++: Automatic Higher-Order Leakage Elimination from
Cryptographic Code
Madura A. Shelton
University of Adelaide
Australia
PI:EMAIL
Markus Wagner
University of Adelaide
Australia
PI:EMAIL
Łukasz Chmielewski
Radboud University and Riscure
The Netherlands
PI:EMAIL
Lejla Batina
Radboud University
The Netherlands
PI:EMAIL
Niels Samwel
Radboud University
The Netherlands
PI:EMAIL
Yuval Yarom
University of Adelaide
Australia
PI:EMAIL
ABSTRACT
Side-channel attacks are a major threat to the security of crypto-
graphic implementations, particularly for small devices that are
under the physical control of the adversary. While several strategies
for protecting against side-channel attacks exist, these often fail
in practice due to unintended interactions between values deep
within the CPU. To detect and protect from side-channel attacks,
several automated tools have recently been proposed; one of their
common limitations is that they only support first-order leakage.
In this work, we present Rosita++, the first automated tool for
detecting and eliminating higher-order leakage from cryptographic
implementations. Rosita++ proposes statistical and software-based
tools to allow high-performance higher-order leakage detection. It
then uses the code rewrite engine of Rosita (Shelton et al. NDSS
2021) to eliminate detected leakage. For the sake of practicality we
evaluate Rosita++ against second and third order leakage, but our
framework is not restricted to only these orders.
We evaluate Rosita++ against second-order leakage with three-
share implementations of two ciphers, present and Xoodoo, and
with the second-order Boolean-to-arithmetic masking, a core build-
ing block of masked implementations of many cryptographic prim-
itives, including SHA-2, ChaCha and Blake. We show effective
second-order leakage elimination at a performance cost of 36% for
Xoodoo, 189% for present, and 29% for the Boolean-to-arithmetic
masking. For third-order analysis, we evaluate Rosita++ against
the third-order leakage using a four-share synthetic example that
corresponds to typical four-share processing. Rosita++ correctly
identified this leakage and applied code fixes.
CCS CONCEPTS
• Security and privacy → Hardware attacks and countermea-
sures; Side-channel analysis and countermeasures; • Com-
puting methodologies → Model verification and validation;
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485380
• Hardware → Power and thermal analysis; • Software and its
engineering → Virtual machines.
KEYWORDS
Power analysis leakage, multivariate leakage, automatic counter-
measures
ACM Reference Format:
Madura A. Shelton, Łukasz Chmielewski, Niels Samwel, Markus Wagner,
Lejla Batina, and Yuval Yarom. 2021. Rosita++: Automatic Higher-Order
Leakage Elimination from Cryptographic Code. In Proceedings of the 2021
ACM SIGSAC Conference on Computer and Communications Security (CCS
’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York,
NY, USA, 15 pages. https://doi.org/10.1145/3460120.3485380
1 INTRODUCTION
Cryptography is one of the main tools used to protect data, both
in transit and at rest. With the increased proliferation of small
computing devices into every aspect of modern life, secure cryp-
tography is more important than ever. Traditionally, the security
of cryptographic primitives was evaluated in terms of their mathe-
matical function. However, in 1996 Kocher [36] demonstrated that
the computation of a cryptographic primitive can interact with the
environment in which it is computed. Such side channels can leak
information about the internal state of the computation, leading to
a potential collapse of the security of the implementation.
Since then, significant effort has been invested in researching
side-channel attacks. On the offensive side, attacks have been demon-
strated against various types of primitives, including symmetric
ciphers [6, 46], public-key systems [28, 44] post-quantum cryptog-
raphy [2], and non-cryptographic implementations [4, 60, 62, 67].
These attacks exploit various side channels, such as power con-
sumption [37] electromagnetic emanations [24, 52], microarchi-
tectural state [8, 27, 40], and even acoustic and photonic emis-
sions [29, 38]. On the defensive side, proposals range over hard-
ware designs that reduce emissions [15], software solutions that
ensure secret-independent execution [27], adding noise to hide the
signal [45], and information masking techniques [13, 35, 48].
Masking techniques, in particular, are considered promising be-
cause they provide a theoretical basis that guarantees protection.
In a nutshell, these operate by splitting secrets into multiple shares,
such that to recover a secret, an attacker needs to observe all of the
shares that comprise the secret. For example, in order-𝑑 Boolean
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea685masking, a secret 𝑣 is split into 𝑑 + 1 shares, 𝑣0, . . . , 𝑣𝑑 such that for
1 ≤ 𝑖 ≤ 𝑑, 𝑣𝑖 is chosen uniformly at random, and 𝑣0 is selected such
that 𝑣0 = 𝑣 ⊕ 𝑣1 ⊕ 𝑣2 ⊕· · ·⊕ 𝑣𝑑. Such schemes are considered safe be-
cause attackers are limited in the number of observations they can
made on the internal state of the implementations. Thus a 𝑑-order
secure implementation which consists of 𝑑 + 1 shares, is secure
against an attacker that can observe up to 𝑑 internal values [35].
Despite the theoretical security, masked implementations of-
ten fail to provide the promised resistance in practice. A main
cause for this failure is unintended interactions between values
processed by the hardware, which allow an attacker to observe mul-
tiple shares with a single observation [3, 25, 49]. Thus, to protect
against unintended interactions, designers need to first implement
the cryptographic primitives aiming for best protection and then
go through several rounds of evaluation. In each such round, the
implementation is evaluated for the presence of leakage and then
tweaked to eliminate observed leakage. The process usually repeats
until no evidence of leakage is observed. This experimental process
is expensive because it requires significant expertise, both in the de-
sign of cryptographic primitives, and in setting up and performing
analysis of hardware measurements.
To reduce the effort required for producing side-channel resistant
implementations, a designer may elect to use a leakage emulator [11,
42, 49, 65] instead of evaluating the hardware. A recent proposal
goes one step further and suggests Rosita, a tool that combines a
leakage emulator with software manipulation techniques, providing
automatic elimination of side-channel leakage [61]. However, one
limitation of Rosita is that it only provides first-order security and
cannot protect against higher-order attacks. Thus, in this paper we
ask the following question:
Can we automatically detect and correct higher-order side-channel
leakage from implementations protected with masking?
1.1 Our Contribution
In this work we present Rosita++, an extension to Rosita [61]
that performs higher-order leakage detection and mitigation. At
its core, Rosita++ extends the leakage detection and root-cause
analysis capabilities of Rosita to support high-order analysis. It
then uses the Rosita code rewrite engine to modify the evaluated
implementation and eliminate leakage. While Rosita++ can analyse
and fix code at any order, in this work we concentrate on second-
and third-order leakage. We do not investigate orders higher than
three for the sake of practicality. The complexity of third-order
side-channel analysis is significant and the analysis requires tens of
millions of traces (i.e. number of side-channel measurements). We
expect that fourth-order analysis would require at least hundreds
of millions of traces (i.e. months of trace acquisition with a similar
setup to ours), making such analyses impractical in many scenarios.
Implementing Rosita++ is far from straightforward. The main
appeal of high-order secure implementations is that high-order
analysis is significantly more complex then first-order analysis. In
particular, we identify three main challenges: the impact of the
quadratic (for second order) and cubic (for third order) increases
in trace lengths on the statistical tools used for the analysis, the
explosion in the amount of data that needs be processed both due
to the increase in trace length and because of the required increase
in the number of required traces, and the complexities involved in
performing multivariate root-cause analyses.
To address these challenges, we develop statistical software tools
that allow robust and efficient high-order leakage analysis. Our
software tools can combine and analyse millions of traces each
with thousands of sample points and perform efficient bivariate
and trivariate analysis on the combined traces. We believe that these
tools are of independent value for the side-channel community and
could be used for high-order analysis in a wide-range of cases.
We assess the second-order effectiveness of Rosita++ with
three cryptographic primitives, which represent different points
in the design space of symmetric cryptography. Present [56] is a
popular lightweight block cipher with a traditional substitution-
permutation network design. We extend the two-share present
implementation of Sasdrich et al. [56] to support three shares. In
contrast, Xoodoo [19, 20] is a modern cryptographic primitive that
underlies multiple higher-level primitives [19]. We implement a
three-share version of Xoodoo, building on the non-linear 𝜒 layer
from Keccak. Finally, we evaluate Boolean-to-arithmetic mask-
ing [32] which is a cryptographic building block that converts
a Boolean mask to an arithmetic mask, and is often required in im-
plementing side-channel resistant instances of cryptographic algo-
rithms that mix Boolean and arithmetic operations, e.g., SHA-2 [47],
ChaCha [5], Blake [1], Skein [23], IDEA [39], and RC6 [55]. We
implemented the second-order Boolean-to-arithmetic masking of
Hutter and Tunstall [33].
We show that Rosita++ removes all leakage detected in the
real experiment up to 2 million traces in Xoodoo and Boolean-to-
arithmetic masking. For present all but one leakage point were
removed. Further, we find that Rosita++ only requires to emulate
500,000 traces to achieve the same level of protection as achieved
by analysing 2 million side-channel traces from physical hardware.
Rosita++ is available as an open-source project at https://github.
com/0xADE1A1DE/Rositaplusplus.
In summary, in this work we make the following contributions:
• We explore automated tools for automatic second and third order
• We develop statistical and software tools for addressing the chal-
• We build Rosita++, the first tool to automatically detect and
remove unintended high-order leakage, evaluate it on three cryp-
tographic primitives and demonstrate its efficiency. (Section 4.)
• We made Rosita++ and the associated tools available as open
side-channel detection and protection. (Section 3.1.)
lenges. (Sections 3.2 to 3.4.)
source.
1.2 Organisation of this paper
Section 2 introduces the necessary background on side-channel
attacks, masking, univariate and multivariate side-channel leakage
assessment methods, leakage emulators and automatic countermea-
sures, and statistical tools that we use in this work. In Section 3, we
describe the design for Rosita++ and in particular how we extend
Rosita to higher orders and what the challenges we face. We also
describe multivariate root-cause analysis and how Rosita improves
the code security by code rewrites. Subsequently, in Section 4, we
present the results of our evaluation, including both the emulation
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea686results and the complimentary side-channel measurement evalua-
tion. Finally, in Section 5 we conclude the paper.
2 BACKGROUND
2.1 Side-Channel Attacks
Traditional cryptanalysis attacks aim to extract secrets from crypto-
graphic algorithms by focusing on the mathematical aspects of such
algorithms. Side-channel attacks, in contrast, focus on obtaining
internal values processed by the algorithm, which are not expected
to become public. This information is gained by exposing interme-
diate values of an algorithm through the process of collection and
analysis of measurements of physical phenomena. Such phenomena
include timing, power consumption, acoustics, electro-magnetic
emanations or properties such as various internal states of CPU
components.
In 1996, Kocher [36] was the first to publish an exploit of side-
channel leakage to recover secret information that was processed
by a cryptographic algorithm. The algorithm in question was im-
plemented with high performance in mind, and therefore ran in
non-constant time; this allowed the timing differences for differ-
ent inputs to be exploited. Subsequently, Kocher et al. [37] used
side-channel information from power consumption to recover se-
cret information in a new type of attack called Differential Power
Analysis (DPA). In DPA, an attacker calculates a differential trace
by finding the difference between averages of measured traces of
a certain bit being 1 or 0 given a plaintext and a guessed part of the