0.45
97.08
100.24
68.47
1.62
100.29
Note that we explicitly not rely on CPU pinning to optimize the
performance. This is because we want to present realistic values
for the use case of multiple isolated VMs. Again, we state that we
do not aim to provide a comprehensive hypervisor performance
evaluation in this paper.
Furthermore, we measure network throughput with the TCP
streaming test of nerperf [25]. Table 2 shows the network through-
put per benchmark mode, assuming V M as a baseline. We retrieve
a result similar to the CPU benchmark. For an interval of 1s, we
can measure a network overhead of 2.92%. For higher intervals, we
measure no decrease in network throughput. The network through-
put directly on the hypervisor exceeds the network throughput
in a VM. This is reasonable because of the additional CPU-bound
forwarding step of the network bridge and the forwarding between
the SM and the MM.
Thus, in terms of CPU performance and network throughput
the dominance components do not add a measurable overhead.
However, the system virtualization comes at its cost.
8 LIMITATIONS
This section deals with the limitations of the proposed system ar-
chitecture. The virtualization overhead reduces the performance
of the actual application services. McDougall et al. [56] show that
the virtualization overhead decreased in younger hardware gen-
erations and optimized hypervisors. We expect embedded devices
to become more and more powerful so that hardware-supported
virtualization techniques can be widely employed on future embed-
ded devices. While hardware-assisted virtualization functions are
currently being adopted in the field of embedded devices [62, 63],
this may limit the wide practical applicability of our system archi-
tecture on already deployed infrastructure without virtualization
features. Further, a secure implementation of gated boot [78] and
DICE++ [40] requires hardware latches, e.g. for locking the boot
program in hardware via one-time-programmable memory.
Finally, our approach inherits the limitations of gated boot,
i.e. the increased boot time delay and the potential attack surface
of an early-boot network stack [78].
9 EXTENSION OF DOMINANCE
Our work extends the concept of dominance of Xu et al [78]. To
clarify our contribution, this section differentiates our approach
from the original definition of dominance. According to Xu et al.,
the hub dominates a device if the hub can choose arbitrary code
and force the device to run it within a bounded amount of time. In
contrast, we generalize this definition and allow a more generic
scheduler to be strongly and weakly dominated. We claim that our
463ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Röckl, et al.
definition is more suited to decompose and assess the building
blocks of future resilient IoT deployments. Our definitions allow
further research on fine-granular nuances of security guarantees
provided by strong and weak dominance relationships.
Xu et al. describe a dominance relationship between one single
hub and a device. Contrary, we assume an isolation of infrastructure
and services (Section 4.1) and align strong and weak dominance
relationships so that multiple hubs can control a corresponding
partition of a device.
Our approach integrates an interface for the detection of intru-
sions and anomalies by linking dynamic runtime information to
deferral ticket requests. This is a novel line of action, not to be
found in the system proposed by Xu et al.
Differing to Xu et al., we enrich gated boot with DICE++ [40] to
further reduce the amount of code that cannot be updated. Similar
to Xu et al., we use an AWDT in the SW to enforce a device reset.
Our structure of the NW, however, differs. We employ additional
AWDTs and a hypervisor. The latter allows us to isolate the net-
work stack during the runtime of the system. Xu et al. only provide
network stack isolation during boot via gated boot. By combin-
ing both, we achieve network stack isolation during boot and the
runtime of the device.
10 RELATED WORK
Besides the work of Xu et al. [78], several further related works are
to be found. System management and recovery with an additional
co-processor is established in several industry standards, e.g. the
Intelligent Platform Management Interface (IPMI) [42] and the Red-
fish Scalable Platforms Management API [26] standard. Via a system
co-processor, one is able to implement a strong dominance relation-
ship between a hub and a device. A weak dominance relationship
could be added in software. Thus, these standards could be utilized
to implement the proposed dominance hierarchy.
However, we show that an implementation of a dominance hi-
erarchy without a system co-processor is feasible. Auer et al. [3]
propose an approach akin to the underlying concept of dominance
for RISC-V. Huber et al. [40] introduce DICE++ and integrate it
into their system Lazarus, which is similar to gated boot. Assuming
a separation of infrastructure and services, we re-arrange system
components so that remote attestation is possible towards multiple
entities, while still enabling to update early-boot components.
Noorman et al. propose Sancus [60] and Sancus 2.0 [61]. They as-
sume a separation of infrastructure and applications, which is akin
to our approach. Additionally, so-called trust-assessment modules
can be utilized to detect intrusions and anomalies of the system.
However, Sancus (2.0) focuses on low-end IoT devices without
hardware memory protection features (e.g. an MMU) or hardware
support for hypervisors and relies on custom CPU hardware exten-
sions. Our approach is based on Commercial-Off-The-Shelf (COTS)
devices.
Turan et al. [76] propose a system of mutual attestation and
device recovery of same-rank devices. A specifically designed hard-
ware encapsulates keys and cryptography operations and enforces
action on devices, even if they are compromised. The basic idea is
that a more recent version of code is more trusted. In contrast, we
assume the presence of a central IH and multiple SHs.
Suzaki et al. [74] also base their approach on the system of Xu
et al [78]. In contrast to Xu et al., they propose a system that proac-
tively resets in fixed time intervals to enforce device updates. Inter-
estingly, they employ inspection techniques in the SW to conduct
live memory forensics of the NW. Although they take boomerang
attacks [54] into account, we argue that inspection techniques in-
crease the attack surface and complexity of the TCB to a size that
cannot be considered as minimal any longer. Therefore, we explic-
itly isolate inspection techniques from the TCB.
Dunlap et al. [23] argue that a hypervisor has a smaller TCB than
a commodity OS. Contemporary hypervisors provide advanced
security features. For example, Berger et al. [64] enable TPM support
in a VM and Cicero et al. [14] propose a novel hypervisor, capable of
providing both a NW and a SW to a VM. However, general-purpose
hypervisors are considered to be still too complex for the TCB [55].
Thus, several thin hypervisors have been designed over time [12,
13, 72]. Those approaches prevent or hinder hardware-assisted
system virtualization for application isolation and deployment of
independent services since the tiny hypervisor already consumes
the hardware support. Contrary to that, our approach does not
consider the hypervisor to be trusted, since we outsource critical
functionality to the SW. Even if the hypervisor is compromised,
the system can be recovered with high assurances.
Besides the recovery of IoT devices, one line of academic work fo-
cuses on re-arranging and combining existing device functionality
to facilitate security guarantees. For example, Guan et al. [37] pro-
pose protection mechanisms for normal-world applications from
the underlying commodity OS. Further work added trusted lan-
guage runtime support in order to outsource critical portions of
applications to the SW [69]. Pinto et al. [66] utilize the TrustZone
to provide hardware-based virtualization of the NW. In contrast to
them, we focus on the recoverability of compromised IoT devices.
Stajano et al. [73] propose the resurrecting duckling model to
bootstrap a relationship between two constrained devices that can
be seen as closely related to strong dominance. A device will rec-
ognize as its owner the first entity that sends it a secret key. In
contrast, we assume a secure provisioning environment, demand
a time limit to obey commands, and focus on devices powerful
enough for modern cryptographic primitives.
Freiling et al. [27] propose code stabilization, a theoretical prop-
erty of a system that can recover from perturbations of code, which
is akin to strong dominance. Practically, we use existing device
functionality to realize strong and weak dominance while keeping
the TCB minimal.
Baliga et al. [6] designed an advanced hypervisor-based detection
system for intrusions and anomalies based on VMI [28, 29]. We state
that the actual detection mechanism is orthogonal to our approach
and can be integrated seamlessly with our interface.
Connecting all the device and hub manufacturers in a hub-centric
paradigm is a challenge. However, we do not expect the IoT ecosys-
tem to move away from hub-based architectures. Instead, our work
follows the line of work that anticipates a growing need for flexible
cloud techniques in the realm of IoT, leveraging offloading of tasks
to the edge or even to the device while still being based on a logical
hub [10, 39, 77].
Finally, there are commercial IoT platforms. Azure Sphere [16]
includes many security features like remote attestation and verified
464Advanced System Resiliency Based on Virtualization Techniques for IoT Devices
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
software updates. However, it requires a certified device with a
co-processor and does not bind intrusion and anomaly detection to
the recoverability of the device. Android Things [33] is a similar
platform that was discontinued in 2019.
11 CONCLUSION
We introduce strong dominance and weak dominance as novel trusted
computing concepts for securing the IoT of tomorrow. Anticipating
a paradigm shift to embedded platforms as-a-service for multiple
independent service suppliers, we design a resilient system archi-
tecture focusing on guaranteed recoverability of the device, even
if notable portions of the devices are compromised by an attacker.
The system components are statically remote attested, using a key
derivation mechanism based on DICE and DICE++. Notably, we
bind an interface for intrusion and anomaly detection to the weak
dominance relationships. A remote administrator is able to, first, de-
tect if a device recovery process is necessary and, second, trigger the
device recovery process with high assurances. Malicious attempts
to block the transmission of information related to intrusions and
anomalies from the device to the hub unconditionally trigger the
recovery process, fostering self-healing future IoT deployments. As-
suming a hardware-aligned multi-layer defense model, we provide
a security discussion. Finally, we implement a prototype on a Ni-
trogen8M development board and show that the runtime overhead
is justifiable in practice.
ACKNOWLEDGMENTS
We like to thank Simon Ott for his valuable insights into low-level
ARM systems. Furthermore, we would like to thank the reviewers
for their helpful feedback. This research was partly supported by
the German Federal Ministry of Education and Research (BMBF) as
part of the CELTIC-NEXT project AI-NET-ANTILLAS (“Automated
Network Telecom Infrastructure with inteLLigent Autonomous
Systems”, Förderkennzeichen “16KIS1314”).
REFERENCES
[1] Anjali, Tyler Caraza-Harter, and Michael M. Swift. 2020. Blending Containers and
Virtual Machines: A Study of Firecracker and GVisor. In Proceedings of the 16th
ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environ-
ments (Lausanne, Switzerland) (VEE ’20). Association for Computing Machinery,
New York, NY, USA, 101–113. https://doi.org/10.1145/3381052.3381315
[2] Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein,
Jaime Cochran, Zakir Durumeric, J. Alex Halderman, Luca Invernizzi, Michalis
Kallitsis, Deepak Kumar, Chaz Lever, Zane Ma, Joshua Mason, Damian Menscher,
Chad Seaman, Nick Sullivan, Kurt Thomas, and Yi Zhou. 2017. Understanding the
Mirai Botnet. In 26th USENIX Security Symposium (USENIX Security 17). USENIX
Association, Vancouver, BC, 1093–1110. https://www.usenix.org/conference/
usenixsecurity17/technical-sessions/presentation/antonakakis
[3] L. Auer, C. Skubich, and M. Hiller. 2019. A Security Architecture for RISC-V
based IoT Devices. In 2019 Design, Automation Test in Europe Conference Exhibition
(DATE). 1154–1159.
[4] Linux Kernel Authors. 2020. dm-verity. https://www.kernel.org/doc/html/latest/
admin-guide/device-mapper/verity.html. Accessed 2021-04-25.
[5] Ahmed M. Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar, Guruprasad
Ganesh, Jia Ma, and Wenbo Shen. 2014. Hypervision Across Worlds: Real-Time
Kernel Protection from the ARM TrustZone Secure World. In Proceedings of
the 2014 ACM SIGSAC Conference on Computer and Communications Security
(Scottsdale, Arizona, USA) (CCS ’14). Association for Computing Machinery, New
York, NY, USA, 90–102. https://doi.org/10.1145/2660267.2660350
[6] Arati Baliga, Xiaoxin Chen, and Liviu Iftode. 2006. Paladin: Automated Detection
and Containment of Rootkit Attacks. Department of Computer Science, Rutgers
University (2006).
[7] Dave Benson. 2021. Protobuf-C. https://github.com/protobuf-c/protobuf-c. Ac-
cessed 2021-04-27.
2021-01-29.
Accessed 2021-04-27.
[8] Fredrik Björck, Martin Henkel, Janis Stirna, and Jelena Zdravkovic. 2015. Cyber
Resilience – Dundamentals for a Definition. In New Contributions in Information
Systems and Technologies. Springer, 311–316.
[9] Marcel Busch, Florian Nicolai, Fabian Fleischer, Christian Rückert, Christoph
Safferling, and Felix Freiling. 2021. Make Remote Forensic Investigations Foren-
sic Again: Increasing the Evidential Value of Remote Forensic Investigations. In
Digital Forensics and Cyber Crime, Sanjay Goel, Pavel Gladyshev, Daryl John-
son, Makan Pourzandi, and Suryadipta Majumdar (Eds.). Springer International
Publishing, Cham, 23–43.
[10] Keyan Cao, Yefan Liu, Gongjie Meng, and Qimeng Sun. 2020. An Overview on
Edge Computing Research. IEEE access 8 (2020), 85714–85728.
[11] David Cerdeira, Nuno Santos, Pedro Fonseca, and Sandro Pinto. 2020. Sok:
Understanding the Prevailing Security Vulnerabilities in Trustzone-Assisted TEE
Systems. In 2020 IEEE Symposium on Security and Privacy (SP). IEEE, 1416–1432.