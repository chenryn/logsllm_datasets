### Fault Reporting and Notification

When a fault is detected, a fault report is sent to the Fault Notifier. The Fault Notifier then notifies all subscribed users and sends an acknowledgment back to the Availability Manager. The Fault Notifier's state is checkpointed every time the subscriber list is modified.

### Node Communication and Checkpointing

The Availability Managers of two nodes, A and B, communicate directly if B serves as a standby for A. All checkpoints of a process P running on node A must be available on node B. The Availability Manager on node A accepts checkpoints from process P and forwards them to node B. Additionally, node A keeps a local copy of the checkpoint to facilitate a local restart of process P.

### Checkpointer Functionality

The Checkpointer copies all memory pages currently used by a process and writes them into a file. During process restoration, it copies the memory pages back into the service address space of the new process. The memory image includes the process text and data segments, as well as the stacks of all threads. Upon restoration, the checkpointer recreates all threads with their original IDs and restores the thread stacks and program heap.

User-space checkpointing methods typically save and restore the contents of data structures and objects used by a process. However, some of the saved state is meaningful only if the corresponding state maintained by the operating system is also restored. For example, the value of file descriptors can be restored, but the operating system object corresponding to the file descriptor needs to be recreated for the value to be meaningful. Other properties, such as resource limits, are also maintained by the operating system and need to be restored to ensure the restored process behaves like the original.

The Checkpointer uses an interceptor approach to obtain relevant operating system state. Operations that change the operating system state are intercepted, and the information is stored in a log. This log is checkpointed along with the application state. When a process is restored, the logged information is used to recreate the appropriate operating system state. This approach, similar to the one described in [2, 5], has the advantage of amortizing the time taken to checkpoint the operating system state over the runtime of the process. It also facilitates portability by not requiring direct involvement of the operating system. The disadvantage is that the number of system calls that need to be intercepted can be large.

The Checkpointer restores the original file and socket descriptors. The corresponding files are reopened, and the seek pointer is moved to its original location. If the application writes data to a file after a checkpoint is taken, the application will overwrite that data after restoration. Files modified by the application must reside in a shared file system. The Checkpointer also recreates all open sockets, binds them, and puts TCP server sockets into listening mode. In the current version of Anacapa, TCP connections are not restored, and reestablishment of connections is left to the application [1].

### Fault Notifier Operation

The Fault Notifier accepts fault reports and alarms from the Availability Managers and forwards them to all subscribed users. The Availability Manager creates fault reports, and user applications generate alarms. The alarm interface allows the application process to generate an alarm message, which is passed through the Availability Manager and the Fault Notifier to the subscribers.

The Fault Notifier is implemented as a user process that runs on top of the Availability Manager. There is only one instance of the Fault Notifier in the system at any time. The Fault Notifier's state is checkpointed every time the list of subscribers changes or when other configuration settings are modified. Third-party subscribers subscribe with the Fault Notifier for fault event reports. When a fault occurs, the Availability Manager sends a fault report to the Fault Notifier, which then forwards the report to all applications that have subscribed for that type of report. Optionally, an email message containing the fault event report is sent to an email server.

### Voice over IP (VoIP) Demonstration

The demonstration of the Anacapa system includes a Voice over IP (VoIP) application [3]. VoIP is the transport of voice over the Internet Protocol (IP), providing a packet-switched alternative to the circuit-switched telephony of the past. VoIP must provide Carrier Grade service, meaning high availability (99.999% or better), scalability to hundreds of thousands of calls, predictable performance, and high quality of speech.

The VoIP demonstration application is based on the H.323 ITU standard voice and video telephony architecture. The Opengate H.323 Gatekeeper [10] is built on the OpenH323 H.323 Protocol Library [11]. Neither OpenH323 nor Opengate has reliability features such as redundancy or checkpointing, making Opengate an ideal case study. In this real-life application, we inserted only one line of code into the Opengate package to register it with the Anacapa infrastructure. The purpose of this case study was to establish that Anacapa can easily protect a stateful application that was never designed for high availability. In a failure scenario, an application process is switched over to a standby application process, maintaining established VoIP call sessions.

In the simplest configuration, the gatekeeper functions as a name resolver, converting telephone numbers to IP addresses. An endpoint (e.g., an IP phone) must register its phone number and IP address with the gatekeeper before it can place or receive calls. After registering, an endpoint can initiate a call by requesting the gatekeeper to provide network access and address resolution for the called number. Once the gatekeeper grants permission and resolves the phone number to an IP address, the endpoint can send call signaling directly to the other endpoint or via its gatekeeper. The gatekeeper determines the path the call signaling will take. In the case study, the system is configured to use direct endpoint-to-endpoint call signaling, so the gatekeeper uses only connectionless protocols based on UDP/IP, which Anacapa can restore automatically.

Figure 3 shows a time sequence diagram of call setup performed in this manner. The originating endpoint first requests access permission from its gatekeeper. When the gatekeeper grants permission and performs address translation, the endpoint commences call signaling to the remote endpoint. The remote endpoint immediately returns a Call Processing message prior to asking its gatekeeper for permission to handle the call. By sending back the Call Proceeding message immediately, the endpoint signals to the call originator that it received the Setup message successfully. The called endpoint then requests permission from its gatekeeper to handle the call. The message exchange begins immediately after the Connect message.

If the gatekeeper program or the node on which it is running crashes, endpoints will not be able to place calls. If the gatekeeper is restarted, an endpoint must re-register with the gatekeeper before calls can be placed to it. Most H.323 telephones periodically heartbeat the gatekeeper; however, it might take an unacceptably long time for all phones managed by a gatekeeper to re-register. By checkpointing the state of the gatekeeper and restarting the service automatically from the checkpoint, either locally or on another node, Anacapa can immediately restore service after a node crash without the need for all phones to re-register. Established calls are preserved, and once the gatekeeper is restored, new calls can be established.

The Anacapa system with the VoIP application will be demonstrated on the MontaVista Carrier Grade Linux operating system [8] running on Intel Pentium III processors. Checkpointing, fault detection, and recovery of the VoIP application will be demonstrated. A screen shot of the VoIP application is shown in Figure 4.

### Related Work

SwiFT [5] and NT_SwiFT [6] are systems similar to Anacapa. They provide fault detection and recovery, checkpointing, event logging, and IP packet rerouting. On restoring a process, the SwiFT system opens all file and socket descriptors, intercepts and logs all file system and socket calls, and replays them after restoring the process. To allow the failover of connections, SwiFT assigns the same IP address to all nodes in the cluster and performs node selection based on the MAC address of a node. To communicate with a node in a SwiFT cluster, a client is required to use SwiFT-compatible connection software.

Chameleon [7] is a fault-tolerant infrastructure that supports different levels of availability. Similar to Anacapa, Chameleon installs a manager process on every node. The managers coordinate a group of agents. Chameleon employs heartbeating, checkpointing, and voting agents, depending on the application’s availability requirements.

Narasimhan et al. [9] developed a software infrastructure that provides strongly consistent replication and recovery for CORBA applications. Unlike that system, Anacapa targets applications other than CORBA and focuses on transparent checkpointing.

Egida [13] is an object-oriented toolkit that supports transparent rollback recovery. Egida provides a specification language that allows the user to describe a rollback recovery protocol. The system synthesizes the protocol, which is linked into the application. The rollback recovery protocol logs and replays all relevant actions that occurred between the time the last checkpoint was taken and the time the fault occurred.

Dieter and Lumpp [4] describe a checkpointing library that checkpoints multithreaded processes. The checkpointing library uses barrier synchronization and signals to interrupt the threads of a process. The checkpoint is a memory image of the process that includes the stacks of all threads. When a process is restored, the checkpointing library creates as many threads as there were in the original process and restores their stacks. The program resumes from the exact position at which it was interrupted.

Ramkumar and Strumpen [12] describe a system that supports the creation of portable checkpoints. It allows a process checkpointed on one host to be restarted on another host with a different processor architecture. The two key considerations are stack environment and pointer portability. The authors propose a source code pre-compiler that inserts entry points into all functions and replaces all pointers with offsets. The pre-compiler requires the application to be programmed in C.

### Conclusion

The Anacapa system is an infrastructure that provides protection against process and node faults, checkpointing of application processes, and restoration of application processes after a fault. The checkpoints include the state of the application process and the state of the operating system relevant to the process. Additionally, Anacapa provides checkpoint management, fault detection, and fault recovery. The concepts of service groups, service addresses, and home nodes allow for easy and flexible configuration of the system.

### Bibliography

1. L. Alvisi, T. C. Bressoud, A. El-Khashab, K. Marzullo, and D. Zagorodnov, “Wrapping server-side TCP to mask connection failures,” Proceedings of INFOCOM 2001, Anchorage, AL (April 2001), pp. 329−337.
2. T. Boyd and P. Dasgupta, “Process migration: A generalized approach using a virtual operating system,” Proceedings of the IEEE Conference on Distributed Computing Systems, Vienna, Austria (July 2002), pp. 385−392.
3. D. Collins, *Carrier Grade Voice over IP*, McGraw-Hill, New York, 2001.
4. W. R. Dieter and J. E. Lumpp, Jr., “A user-level checkpointing library for POSIX threads programs,” Proceedings of the IEEE Symposium on Fault-Tolerant Computing (June 1999), pp. 224−227.
5. Y. Huang and C. Kintala, “Software implemented fault tolerance,” Proceedings of the IEEE Fault Tolerant Computing Symposium, Toulouse, France (June 1993), pp. 2−10.
6. Y. Huang, P. E. Chung, C. Kintala, C. Y. Wang, and D. R. Liang, “NF_SwiFT: Software implemented fault-tolerance on Windows NT,” Proceedings of the USENIX Windows NT Symposium, Seattle, WA (August 1998), pp. 47−55.
7. Z. Kalbarczyk, R. K. Iyer, S. Bagchi, and K. Whisnant, “Chameleon: A software infrastructure for adaptive fault tolerance,” IEEE Transactions on Parallel and Distributed Systems, vol. 10, no. 6 (June 1999), pp. 560−579.
8. MontaVista Software, *MontaVista Carrier Grade Edition 2.1* (November 2002), <http://www.mvista.com/dwp/MVLCGE.pdf>.
9. P. Narasimhan, L. E. Moser, and P. M. Melliar-Smith, “Strongly consistent replication and recovery of fault-tolerant CORBA applications,” Computer System Science and Engineering Journal, vol. 17, no. 2 (March 2002), pp. 103−114.
10. Opengate H.323 Gatekeeper, <http://www.opengatekeeper.sourceforge.net>.
11. OpenH323 H.323 Protocol Library, <http://www.openh323.org>.
12. B. Ramkumar and V. Strumpen, “Portable checkpointing architectures,” Proceedings of the IEEE Symposium on Fault-Tolerant Computing Systems, Seattle, WA (June 1997), pp. 58−67.
13. S. Rao, L. Alvisi, and H. M. Vin, “Egida: An extensible toolkit for low-overhead fault-tolerance,” Proceedings of the IEEE Symposium on Fault-tolerant Computing, Madison, WI (June 1999), pp. 48−55.

---

**Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03)**  
**0-7695-1959-8/03 $17.00 (c) 2003 IEEE**