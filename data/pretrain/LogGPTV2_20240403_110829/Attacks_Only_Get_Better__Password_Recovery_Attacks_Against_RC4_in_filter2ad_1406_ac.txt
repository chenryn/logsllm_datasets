j=1
Nx j,x j+1,z1,z2, j log(pr+ j,z1,z2)
Nx j,z,r+ j log(pr+ j,z).
∑
z∈B
the
With appropriate pre-computation of
terms
Ny1,y2,z1,z2, j log(pr+ j,z1,z2) and Ny,z,r+ j log(pr+ j,z) for all
y1,y2 and all y, the computation for each candidate
x ∈ X can be reduced to roughly 2n ﬂoating point
additions. The pre-computation can be further reduced by
computing the terms for only those pairs (y1,y2) actually
arising in candidates in X in positions ( j, j + 1). We use
USENIX Association  
24th USENIX Security Symposium  119
7
this further optimisation in our implementation.
The above procedure is speciﬁed as an attack in Algo-
rithm 4. We refer to it as our double-byte attack because
of its reliance on the double-byte keystream probabili-
ties ps,z1,z2. It again outputs a collection of approximate
log likelihoods {γx : x ∈ X } for each candidate x ∈ X ,
suitable for further processing. Note that for simplicity
of presentation, it involves a quintuply-nested loop to
compute the values Ny1,y2,z1,z2, j; these values should of
course be directly computed from the (n− 1)· 216 pre-
computed counters N(cid:26)ci, j,ci, j+1, j in an in-line fashion using
the formula Ny1,y2,z1,z2, j = N(cid:26)z1⊕y1,z2⊕y2,, j.
4 Simulation Results
4.1 Methodology
We performed extensive simulations of both of our attacks,
varying the different parameters to evaluate their effects
on success rates. We focus on the problem of password re-
covery, using the RockYou data set as an attack dictionary
and the Singles.org data set as the set of target passwords.
Except where noted, in each simulation, we performed
256 independent runs of the relevant attack. In each attack
in a simulation, we select a password of some ﬁxed length
n from the Singles.org password data set according to the
known a priori probability distribution for that data set,
encrypt it S times in different starting positions r using
random 128-bit keys for RC4, and then attempt to recover
the password from the ciphertexts using the set of all pass-
words of length n from the entire RockYou data set (14
million passwords) as our candidate set X . We declare
success if the target password is found within the top T
passwords suggested by the algorithm (according to the
approximate likelihood measures γx). Our default settings,
unless otherwise stated, are n = 6 and T = 5. Six is the
most common password length in the data sets we encoun-
tered; T = 5 is an arbitrary choice, and we examine the
effect of varying T in detail below. We try all values for r
between 1 and 256− n + 1, where the single-byte biases
dominate the behaviour of the RC4 keystreams. Typical
values of S are 2s where s ∈ {20,22,24,26,28}.
Using different data sets for the attack dictionary and
the target set from which encrypted passwords are cho-
sen is more realistic than using a single dictionary for
both purposes, not least because in a real attack, the exact
content and a priori distribution of the target set would
not be known. This approach also avoids the problem of
hapax legomena highlighted in [4]. However, this has the
effect of limiting the success rates of our attacks to less
than 100%, since there are highly likely passwords in the
target set (such as jesus) that do not occur at all, or only
have very low a priori probabilities in the attack dictio-
nary, and conversely. Figure 1 compares the use of the
Singles.org
RockYou
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
 0
 0
 64
 128
 192
 256
Starting Position
Figure 1: Recovery rate for Singles.org passwords using
RockYou data set as dictionary, compared to recovery
rate for RockYou passwords using RockYou data set as
dictionary (S = 224, n = 6, T = 5, 1 ≤ r ≤ 251, double-
byte attack).
RockYou password distribution to attack Singles.org pass-
words with the less realistic use of the RockYou password
distribution to attack RockYou itself. It can be seen that,
for the particular choice of attack parameters (S = 224,
n = 6, T = 5, double-byte attack), the effect on success
rate is not particularly large. However, for other attack
parameters, as we will see below, we observe a maximum
success rate of around 80% for our attacks, whereas we
would achieve 100% success rates if we used RockYou
against itself. The observed maximum success rate could
be increased by augmenting the attack dictionary with
synthetically generated, site-speciﬁc passwords and by
removing RockYou-speciﬁc passwords from the attack
dictionary. We leave the development and evaluation of
these improvements to future work.
Many data sets are available from password breaches.
We settled on using RockYou for the attack dictionary
because it was one of the biggest data sets in which all
passwords and their associated frequencies were available,
and because the distribution of passwords, while certainly
skewed, was less skewed than for other data sets. We
used Singles.org for the target set because the Singles.org
breach occurred later than the RockYou breach, so that
the former could reasonably used as an attack dictionary
for the latter. Moreover, the Singles.org distribution being
quite different from that for RockYou makes password re-
covery against Singles.org using RockYou as a dictionary
more challenging for our attacks. A detailed evaluation of
the extent to which the success rates of our attacks depend
on the choice of attack dictionary and target set is beyond
the scope of this current work.
A limitation of our approach as described is that we
assume the password length n to be already known. Sev-
120  24th USENIX Security Symposium 
USENIX Association
8
Algorithm 4: Double-byte attack
input
: ci, j : 0≤ i < S,0 ≤ j < n – array formed from S independent encryptions of ﬁxed n-byte candidate X
r – starting position of X in plaintext stream
X – collection of N candidates
px – a priori probability of candidates x ∈ X
pr+ j,z (0 ≤ j < n, z ∈ B) – single-byte keystream distribution
pr+ j,z1,z2 (0 ≤ j < n− 1, z1,z2 ∈ B) – double-byte keystream distribution
output :{γx : x ∈ X } – set of (approximate) log likelihoods for candidates in X
begin
for j = 0 to n− 2 do
for z1 = 0x00 to 0xFF do
N(cid:26)z, j ← 0
for z2 = 0x00 to 0xFF do
N(cid:26)z1,z2, j ← 0
for j = 0 to n− 2 do
for i = 0 to S− 1 do
N(cid:26)ci, j, j ← N(cid:26)ci, j, j + 1
N(cid:26)ci, j,ci, j+1, j ← N(cid:26)ci, j,ci, j+1, j + 1
for j = 1 to n− 2 do
for y = 0x00 to 0xFF do
for z = 0x00 to 0xFF do
Ny,z, j ← N(cid:26)z⊕y, j
Ly, j = ∑z∈B Ny,z, j log(pr+ j,z),
for j = 0 to n− 2 do
for y1 = 0x00 to 0xFF do
for y2 = 0x00 to 0xFF do
for z1 = 0x00 to 0xFF do
for z2 = 0x00 to 0xFF do
Ny1,y2,z1,z2, j ← N(cid:26)z1⊕y1,z2⊕y2,, j
Ly1,y2, j = ∑z1∈B ∑z2∈B Ny1,y2,z1,z2, j log(pr+ j,z1,z2),
γx ← log(px) + ∑n−2
for x = (x0, . . . ,x n−1) ∈ X do
return {γx : x ∈ X }
j=0 Lx j,x j+1, j − ∑n−2
j=1 Lx j, j
USENIX Association  
24th USENIX Security Symposium  121
9
e
t
a
R
s
s
e
c
c
u
S
 1
 0.8
 0.6
 0.4
 0.2
 0
220
222
224
226
228
 0  16  32  48  64  80  96  112  128  144  160  176  192  208  224  240  256
Starting Position
e
t
a
R
s
s
e
c
c
u
S
 1
 0.8
 0.6
 0.4
 0.2
 0
220
222
224
226
228
 0  16  32  48  64  80  96  112  128  144  160  176  192  208  224  240  256
Starting Position
Figure 2: Recovery rates for single-byte algorithm for
S = 220, . . . ,2 28 (n = 6, T = 5, 1 ≤ r ≤ 251).
Figure 3: Recovery rates for double-byte algorithm for
S = 220, . . . ,2 28 (n = 6, T = 5, 1 ≤ r ≤ 251).
eral solutions to this problem are described in the full
version [12].
4.2 Results
Single-Byte Attack We ran the attack described in Al-
gorithm 3 with our default parameters (n = 6, T = 5,
1 ≤ r ≤ 251) for S = 2s with s ∈ {20,22,24,26,28} and
evaluated the attack’s success rate. We used our default
of 256 independent runs per parameter set. The results
are shown in Figure 2. We observe that:
• The performance of the attack improves markedly
as S, the number of ciphertexts, increases, but the
success rate is bounded by 75%. We attribute this
to the use of one dictionary (RockYou) to recover
passwords from another (Singles.org) – for the same
attack parameters, we achieved 100% success rates
when using RockYou against RockYou, for example.
• For 224 ciphertexts we see a success rate of greater
than 60% for small values of r, the assumed position
of the password in the RC4 keystream. We see a
drop to below 50% for starting positions greater than
32. We note the effect of the key-length-dependent
biases on password recovery; passwords encrypted
at starting positions 16(cid:29)− n,16(cid:29)− n + 1, . . . ,16(cid:29) −
1,16(cid:29), where (cid:29) = 1,2, . . . ,6, have a higher probabil-
ity of being recovered in comparison to neighbouring
starting positions.
• For 228 ciphertexts we observe a success rate of more
than 75% for 1 ≤ r ≤ 120.
Double-Byte Attack Analogously, we ran the attack
of Algorithm 4 for S = 2s with s ∈ {20,22,24,26,28}
and our defaults of n = 6, T = 5. The results for these
simulations are shown in Figure 3. Note that:
• Again, at 224 ciphertexts the effect of key-length-
dependent biases is visible.
• For 226 ciphertexts we observe a success rate that is
greater than 78% for r ≤ 48.
Comparing the Single-Byte Attack with a Naive Al-
gorithm Figure 4 provides a comparison between our
single-byte algorithm with T = 1 and a naive password
recovery attack based on the methods of [2], in which the
password bytes are recovered one at a time by selecting
the highest likelihood byte value in each position and
declaring success if all bytes of the password are recov-
ered correctly. Signiﬁcant improvement over the naive
attack can be observed, particularly for high values of r.
For example with S = 224, the naive algorithm essentially
has a success rate of zero for every r, whereas our single-
byte algorithm has a success rate that exceeds 20% for
1 ≤ r ≤ 63. By way of comparison, an attacker knowing
the password length and using the obvious guessing strat-
egy would succeed with probability 4.2% with a single
guess, this being the a priori probability of the password
123456 amongst all length 6 passwords in the Singles.org
dataset (and 123456 being the highest ranked password
in the RockYou dictionary, so the ﬁrst one that an attacker
using this strategy with the RockYou dictionary would
try). As another example, with S = 228 ciphertexts, a
viable recovery rate is observed all the way up to r = 251
for our single-byte algorithm, whereas the naive algo-
rithm fails badly beyond r = 160 for even this large value
of S. Note however that the naive attack can achieve a
success rate of 100% for sufﬁciently large S, whereas our
attack cannot. This is because the naive attack directly
122  24th USENIX Security Symposium 
USENIX Association
10
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
sb, 220
sb, 222
sb, 224
sb, 226
sb, 228
old, 220
old, 222
old, 224
old, 226
old, 228
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
uniform
a priori
 0
 0
 64
 128
 192
 256
 0
 0
 64
 128
 192
 256
Starting Position
Starting Position
Figure 4: Performance of our single-byte algorithm versus
a naive single-byte attack based on the methods of AlFar-
dan et al. (labelled “old”) (n = 6, T = 1, 1 ≤ r ≤ 251).
Figure 6: Recovery rate for uniformly distributed pass-
words versus known a priori distribution (S = 224, n = 6,
T = 5, 1 ≤ r ≤ 251, double-byte algorithm).
 1
 0.8
 0.6
 0.4
 0.2
e
t
a