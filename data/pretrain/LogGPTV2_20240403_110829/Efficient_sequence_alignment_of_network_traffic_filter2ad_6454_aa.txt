title:Efficient sequence alignment of network traffic
author:Christian Kreibich and
Jon Crowcroft
Efﬁcient Sequence Alignment of Network Trafﬁc
Christian Kreibich, Jon Crowcroft
University of Cambridge Computer Laboratory
{ﬁrstname.lastname}@cl.cam.ac.uk
ABSTRACT
String comparison algorithms, inspired by methods used in
bioinformatics, have recently gained popularity in network
applications. In this paper we demonstrate the need for care-
ful selection of alignment models if such algorithms are to
yield the desired results when applied to network traﬃc. We
introduce a novel variant of the Jacobson-Vo algorithm em-
ploying a ﬂexible gap-minimising alignment model suitable
for network traﬃc, and ﬁnd that our software implementa-
tion outperforms the commonly used Smith-Waterman ap-
proach by a factor of 33 on average and up to 58.5 in the
best case on a wide range of network protocols.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols
General Terms
Algorithms, Measurement, Experimentation
Keywords
Traﬃc Monitoring, Sequence Alignment, Sequence Analysis
INTRODUCTION
1.
Traditionally, content-based traﬃc analysis has typically in-
volved searching the payloads of packets, either in isolation
or reassembled into ﬂows when necessary, for known pat-
terns. Lately, traﬃc ﬂows have also been compared to each
other, in an attempt to identify commonalities by aligning
the ﬂow contents in a suitable fashion. Discovered common-
alities can be used for follow-up analyses of many kinds, for
example to automatically ﬁngerprint malicious traﬃc [1, 2],
mimic the modus operandi of network protocols [3], or for
building traﬃc models suitable for anomaly detection and
traﬃc classiﬁcation [4]. Many of the relevant algorithms in
this sequence alignment problem setting are inspired by the
ﬁeld of bioinformatics, where such methods are regularly
used for problems of motif ﬁnding in large DNA sequence
databases.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
The contributions of this paper are twofold. First, we point
out the need for careful choice of the right alignment model
and implementation in Section 2. We demonstrate that sub-
tleties in either can lead to inconsistent and, in the worst
case,
incorrect results. Second, we show that while the
commonly used and closely related Smith-Waterman and
Needleman-Wunsch algorithms provide high ﬂexibility, they
may be a suboptimal choice if the top concern is runtime
performance of longest common subsequence computations
on network traﬃc. We next introduce a novel variant of
the Jacobson-Vo algorithm in Section 3. To the best of our
knowledge, this algorithm has not previously been used in
the networking domain. Our variant is consistent with the
goals we present in Section 2 and borrows dynamic program-
ming elements from Smith-Waterman to yield the desired
results, while retaining the runtime complexity of the origi-
nal approach. Jacobson-Vo’s runtime performance depends
on the distribution of characters in the input strings, making
it hard to make a priori statements about its performance
on network traﬃc. As we show in Section 4, a careful imple-
mentation in software outperforms Smith-Waterman across
a wide range of network protocols and ﬂow sizes by a factor
of up to 33 in the average case, reaching up to 58.5 in the
best case. We brieﬂy discuss our ﬁndings in Section 5 before
concluding the paper in Section 6.
2. CAVEATS IN SEQUENCE ALIGNMENT
OF NETWORK TRAFFIC
There are many ways of ﬁnding common substrings among
multiple input strings. In this paper we focus on procedures
that yield multiple such strings per pairwise alignment and
include precise locational information per substring. In our
experience, such precision is highly desirable for many appli-
cations of alignment algorithms. More approximate meth-
ods for extracting frequent content have been proposed in
the literature [5, 6].
Two input strings S1 and S2 of respective lengths s1 and s2
can be aligned either globally or locally. Global alignment
assumes that two strings are largely similar and that only
minor misalignments have to be identiﬁed. By contrast, lo-
cal alignment assumes no inherent similarity between strings
and focuses on ﬁnding regions of similarity. In practice, both
problems can be solved by a tabular dynamic programming
procedure introduced by Smith and Waterman.1 We sum-
1The global alignment procedure is commonly referred to
as “Needleman-Wunsch”, though Needleman and Wunsch
only discussed the global alignment problem but proposed
a diﬀerent (and slower) algorithm [7, 8].
marise the algorithm here and refer to the literature for de-
tails [9, 8, 10]. The algorithm runs in O(s1 s2) by ﬁlling a
table of size s1 × s2 row-by-row, in each cell recording the
best alignment of the preﬁxes of S1 and S2 up to the cell’s
row/column indices by selecting an edit operation on the pair
of characters at the current row/column. These operations
can (i) skip characters of either string, (ii) align the char-
acters directly, or (iii) accept mismatching characters via
substitution. Each operation is assigned a cost/score, and
the best resulting alignment is the one with the highest score
(for local alignment) or lowest cost (for global alignment).
The resulting alignment is extracted by walking backward
through the table, starting in the bottom-right corner, fol-
lowing the alignment decisions taken at each cell. The algo-
rithm computes a longest common subsequence LCS(S1, S2)
of input strings S1 and S2. A common subsequence is a
sequence of common substrings; a longest common subse-
quence maximises cumulative length.
The cost model chosen directly aﬀects the resulting LCS and
thus requires careful consideration. Showing the soundness
of cost models with per-character-pair substitution costs
takes substantial eﬀort [8] and their investigation is a topic
of future research for the networking domain. We feel that
the soundness of this approach is undermined by limitations
of the similarity to the bioinformatics domain: while na-
ture introduces at most limited random mutation, proto-
cols do not undergo such a process; rather, they evolve over
a sequence of more or less well-speciﬁed implementations.
Worse, the networking domain faces a malicious adversary
who is aware of the model decisions we are making. We
argue that when using Smith-Waterman approaches, rather
than choosing an ad-hoc cost model, the alignment decision
should be coded explicitly into the algorithm, for example
by excluding the possibility of substitutions altogether and
interweaving exactly matching subsequences with gaps only.
We will now show how even when doing so, subtleties in the
implementation can critically aﬀect the outcome. Consider
the following pair of strings:
‘GET / HTTP’
‘GET /a/a.HTM HTTP’
The LCSs for these strings have a maximum length of 10.
Note the plural; the following are both possible LCSs of this
length:
‘GET /’, ‘ HTTP’
‘GET ’, ‘/’, ‘ HTTP’
Examples with more ambiguity are easily constructed. The
key diﬀerence among the alternatives is the number of gaps—
the most compact version has only one gap while the other
has two. Without forethought it depends on the subtleties
of the implementation which result is obtained, even in such
basic cases as the given example. Worse, once we restrict
our interest to substrings of a minimum length larger than
a single character, the second LCS will yield the wrong re-
sult if we ﬁlter the detected substrings, as it will fail to
report the ‘GET /’ substring. We argue that an LCS com-
putation should report the LCS with the minimum num-
ber of gaps, since it yields more consistent results. To get
Smith-Waterman to return such results, one needs to employ
alignment scoring schemes that actively encourage longer
contiguous substrings.
Jacobson-Vo: Combinatorial Reduction
3. FAST LCS FOR NETWORK TRAFFIC
We now introduce a method for computing LCSs that ad-
heres to the requirements presented in the previous sec-
tion and that is typically substantially faster than Smith-
Waterman. The method is an adaptation of an algorithm
that was presented independently by Jacobson and Vo [11]
and Pevzner and Waterman [12]. We will refer to the orig-
inal algorithm as Jacobson-Vo and summarise its operation
before enhancing it.
3.1
Jacobson-Vo reduces a related combinatorial problem for
which there is a potentially more eﬃcient solution than
O(s1 s2) to the LCS problem. This combinatorial prob-
lem is the identiﬁcation of a longest increasing subsequence
(LIS) in a sequence of numbers. Again referring the reader
to the literature for details [11, 8], we continue the example
of the previous section to demonstrate the algorithm. The
idea is that an LIS has a one-to-one correspondence with
an LCS if the sequence of numbers is produced from the
two input strings in the following fashion: iterating over the
characters in S1, we list once per occurring character all in-
dices in S2 at which that character occurs, in descending
order. This yields:
G → 0
E → 1
T → 15 14 10 2
/ → 6 4
H → 13 9
P → 16
→ 12 3
These character occurrence lists are then concatenated into
a numerical sequence Π of length π. For S1 and S2 the
beginning of Π looks as follows (dots indicate occurrence
list merge points):
0 · 1 · 15 14 10 2 · 12 3 · 6 4 · 12 3 · 13 9 · . . .
The next step is to greedily extract a cover of Π. A cover is a
set of non-increasing subsequences of Π that together use up
all of its members. We can perform this extraction in a tab-
ular fashion by building up each subsequence in one column
of a subsequence table. Let S n be the nth such subsequence.
An arbitrary element in S i is denoted ei, and I S1
ei and I S2
ei
are ei’s indices in S1 and S2, respectively.
Iterating over
the elements of Π, one selects for each element the leftmost
subsequence (i.e., column in the table) that the element can
extend. Extension is possible whenever the last number in
a sequence is larger than or equal to new element.
If no
subsequence fulﬁlls this requirement, a new one is added to
the table. We obtain:
To extract an LCS, ﬁrst an arbitrary element in the last
subsequence is selected. Afterward, the remaining subse-
quences are scanned downward in right-to-left order, select-
ing the ﬁrst element ei in each S i for which I S2
ei+1 ,
where ei+1 is the element chosen in S i+1:
ei  I S1
ei ∧ I S2
ei ∧ I S2