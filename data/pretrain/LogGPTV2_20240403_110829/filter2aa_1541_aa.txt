# F-Secure Countercept Whitepaper: Killsuit Research

## Contents
1. **Introduction to Killsuit and Its Functionality**
   - 1.1 What is Killsuit?
   - 1.2 How does Killsuit infect a machine?
   - 1.3 How does Killsuit work?

2. **Deployment and Configuration of a KillSuit Instance**
   - 2.1 Deploying a KillSuit Instance
   - 2.2 Configuring a KillSuit Instance

3. **Additional Capabilities and Modular Functions**
   - 3.1 DarkSkyline
   - 3.2 FlewAvenue

4. **Killsuit Installation Process**
   - 4.1 Initial Analysis of Installation Identifiers
   - 4.2 Detailed Examination of the Installation Process

5. **Detection and Remediation of a KillSuit Compromise**
   - 5.1 Detecting KillSuit Installation
   - 5.2 Removing KillSuit from a Host

6. **Conclusion**

7. **Appendix**
   - 7.1 Killsuit Instance ID List
   - 7.2 Full Danderspritz Driver List
   - 7.3 Registry List – Part 1
   - 7.4 Registry List – Part 2

8. **Sources**

---

## 1. Introduction to Killsuit and Its Functionality

### 1.1 What is Killsuit?
Killsuit (KiSu) is a modular persistence and capability mechanism used in post-exploitation frameworks, including Danderspritz (DdSz). Developed by The Equation Group, DdSz was leaked in April 2017 by The Shadow Brokers as part of the “Lost in Translation” leak. KiSu serves two primary purposes: it enables persistence on a host and acts as a catalyst for specific exploitative functions.

### 1.2 How does Killsuit infect a machine?
KiSu is a post-exploitation tool used in hands-on-keyboard attacks where a malicious actor actively compromises a network. The DdSz framework includes various tools, such as PeddleCheap (PC), which can install KiSu instances on a host to run its capabilities. PC is typically loaded onto a host using a tool like DoublePulsar and then injected into a running process. KiSu is installed as a deliberate action by the PC payload during the post-exploitation phase.

**Figure 01 – Killsuit Installation and Function Diagram**
- **Danderspritz Operator**
- **PeddleCheap Agent**
- **Killsuit Instance**
- **DarkSkyline Module**
- **FlewAvenue Module**
- **PeddleCheap Persistence through Killsuit SOTI**

### 1.3 How does it work?
KiSu facilitates specific functions within the DdSz framework. It is not a malicious actor itself but rather a component for other operations, serving as a local repository for the installation and operation of other tools. Each instance is installed into an encrypted database within the registry. To utilize an instance, the operator must "connect" to it and perform relevant actions. A PC agent can only connect to one KiSu instance at a time. These instances have specialized functionalities associated with specific tools, such as Strangeland (StLa) for covert keylogging and MagicBean (MaBe) for WiFi man-in-the-middle (MITM) attacks.

DecibelMinute (DeMi) is believed to be the controller for KiSu installation and module management. It can bypass driver signing issues and install modules into an instance from the internal module store to increase capabilities. If the related instances are removed, the specialized tools and loaded modules no longer function.

---

## 2. Deployment and Configuration of a KillSuit Instance

### 2.1 Deploying a KillSuit Instance
To deploy a KillSuit instance, you first need to install the PC instance on the host using the command `KiSu_install –type pc`. This installs the necessary data/packages into the encrypted registry DB. Next, connect to the newly created instance using the command `kisu_connect –type pc`. This tells the current PC agent that it is connected to the PC KiSu instance on the host. Finally, run `pc_install` to create the persistence.

**Figure 02 – Installation and Connection to PC KiSu Instance**

### 2.2 Configuring a KillSuit Instance
The `pc_install` command generates a menu with options and status information. Ensure the "KiSu connection" option is active. Change the load method from the default "AppCompat" to "KillSuit". Create a new PC payload on the host, noting the payload level (e.g., level 4). Select the desired payload type and configure it. You can also install a knocking trigger for the payload. Once the payload is created, the menu should show no yellow options.

**Figure 03 – Default Values for Persistence Installation**
**Figure 04 – KiSu Persistence Configuration**
**Figure 05 – Connection Level for Persistence KiSu PC Instance**

Select "installation" to communicate with the connected instance and install the persistence. Reboot the machine, and for reconnection, change the "connection target" port to a level 4 connection port. Now, you have a KiSu persistence instance of PC on the target machine.

---

## 3. Additional Capabilities and Modular Functions

### 3.1 DarkSkyline
DarkSkyline (DSky) is a packet capture utility that can be installed as part of any KiSu instance. Connect to a specific instance, typically the PC persistence module, and use the command `darkskyline –method demi` to install the DSky module. Ensure the "Use DecibelMinute" and "Connected" options are green. Then, select "install tools" followed by "load driver".

**Figure 06 – DarkSkyline Configuration Options for Execution**
**Figure 07 – Executing DarkSkyline Packet Collection from Capture Session**

### 3.2 FlewAvenue
FlewAvenue (FlAv) is a custom TCP/IP IPv4 stack designed to avoid detection. By installing FlAv, you can control plugins such as packet redirection, FlAv DNS, and FlAv traceroute. When installing FlAv, you may encounter driver signing issues. To circumvent this, edit the `_FLAv.py` script to force the FlAv controller to comply. Ensure you are connected to an instance, run `flewavenue`, select "install tools," then "load driver," and verify the installation.

**Figure 08 – FlewAvenue Plugin Status on Initial PC Connection**
**Figure 09 – Workaround to Override Driver Warning and Install**
**Figure 10 – Verify Installation Showing FlewAvenue as “Available”**

Once the driver is installed and available, you can start creating traffic redirects using commands like `hittun`, `imr`, and `packetredirect`.

---

## 4. Killsuit Installation Process

### 4.1 Initial Analysis of Installation Identifiers
Our research is based on the leaked version of KiSu made available by The Shadow Brokers. When the PC agent starts installing KiSu, it uses the internal resource library DeMi to manage the installation and associated modules. During installation, the local agent runs many redundant API calls, DLL loads, and system operations to generate debug information, some of which are dummy operations to complicate research and reversing.

One of the first and last checks the agent makes is the running system mode, querying the registry value `HKLM\System\Setup\SetupInProgress`. Alteration of this value did not affect the installation, indicating it might be a dummy operation.

**Figure 11 – Killsuit Installation Check for Value SystemSetupInProgress (OS Running Mode)**
**Image 12 – API Collection Showing “systemfunction007” Kernel Operation in calc.exe Thread**

### 4.2 Detailed Examination of the Installation Process
The PC instance makes a Kernel API call for `systemfunction007` to generate NTLM hashes for encrypted communication. The generated hash values are used in operations with the Kernel crypto modules and stored in the registry under `HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/OemMgmt`.

**Image 13 – API Collection Showing Unicode Operation for Registry Keys Under Dir “OemMgmt”**
**Image 14 – Registry Edit Displaying Malicious Registry Entries for Two Installed KiSu Instances**
**Figure 15 – DoubleFeature Display of Killsuit Module Root Location**

This registry directory is created at the installation of the first instance and removed when all instances are uninstalled. Each instance has a corresponding 36-character ID registry entry, which contains keys holding the stored encrypted values, including the encrypted communication key and other KiSu configuration data.

Further investigation found that the path corresponds to the "KiSu Module Root" location specified during usage of the "DoubleFeature" function of the framework. This function allows operators to quickly assess previously installed elements.

---

## 5. Detection and Remediation of a KillSuit Compromise

### 5.1 Detecting KillSuit Installation
To detect a KillSuit installation, monitor the registry for unusual entries and look for the presence of the "OemMgmt" directory. Additionally, check for the presence of the 36-character ID registry entries and any associated encrypted values.

### 5.2 Removing KillSuit from a Host
To remove KillSuit from a host, identify and delete all instances and their associated registry entries. Ensure that all related drivers and modules are also uninstalled. Reboot the machine to ensure all changes take effect.

---

## 6. Conclusion
Killsuit is a sophisticated modular persistence and capability mechanism used in post-exploitation frameworks. Understanding its functionality and installation process is crucial for detecting and mitigating its impact. By following the steps outlined in this whitepaper, security professionals can effectively identify and remove Killsuit from compromised systems.

---

## 7. Appendix

### 7.1 Killsuit Instance ID List
- {982cfd3f-5789-effa-2cb5-05a3107add06}
- ...

### 7.2 Full Danderspritz Driver List
- DarkSkyline
- FlewAvenue
- ...

### 7.3 Registry List – Part 1
- HKLM\SOFWARE\Microsoft\Windows\CurrentVersion\OemMgmt
- ...

### 7.4 Registry List – Part 2
- HKLM\SOFWARE\Microsoft\Windows\CurrentVersion\OemMgmt
- ...

---

## 8. Sources
- [Link to Source 1]
- [Link to Source 2]
- [Link to Source 3]

---

This document provides a comprehensive overview of Killsuit, its installation, and how to detect and remediate a compromise. For more detailed information, refer to the sources listed in the appendix.