exhibiting larger delays, NetHide can be extended to con-
sider link delays as an additional constraints.
The same arguments hold for analyzing queuing times
or other time measurements. Moreover, delays often vary
greatly in short time intervals, making it practically in-
feasible to perform enough simultaneous measurements.
Can a topology be de-obfuscated by analyzing link fail-
ures? Because some physical link failures are observed
as multiple concurrent link failures in the virtual topol-
ogy, an attacker can try to reconstruct the physical topol-
ogy by observing link failures over a long timespan.
However, this strategy is not promising for the following
reasons: (i) most of the link failures are directly repre-
sented in the virtual topology (cf. §6.8). Observing them
does not provide usable information for de-obfuscation;
and (ii) analyzing link failures over time requires perma-
nent tracing of the entire network between, which would
make the attacker visible and is against the idea of LFAs.
Is NetHide compatible with link access control or
VLANs? Not at the moment, but we can easily extend
our model to support them. The required changes are:
(i) link access control policies need to be part of the
NetHide’s input; (ii) the ILP needs additional constraints
to respect different VLANs (i.e., model forwarding trees
per VLAN); (iii) the output consists of VLAN-speciﬁc
paths; and (iv), the runtime additionally matches on the
VLAN ID and applies the appropriate actions.
Does NetHide support load-balancing? Not at the mo-
ment, but after the following extensions: (i) instead of an
exact path for each ﬂow, we specify the expected load
that a ﬂow adds to each link (e.g., using max-min fair al-
location as in [30]); (ii) the constraints regarding the ﬂow
density now constrain the expected ﬂow density; (iii) the
virtual topology can contain multiple parallel paths and
probabilities with which each path is taken; and (iv) the
runtime randomly selects one of the possible paths.
USENIX Association
27th USENIX Security Symposium    707
How close to the optimal is the solution computed by
NetHide? Computing this distance is computationally
infeasible as it requires to exhaustively enumerate all
possible solutions (one of the cruxes behind NetHide se-
curity). Instead, we measure the distance between the vir-
tual and the physical topology (§6.2) and show that the
virtual topology is already very close (in terms of accu-
racy and utility) to the physical one. The optimal solution
would therefore only do slightly better, while being much
harder to compute.
Can NetHide be used with other metrics for computing
the ﬂow density? At present, NetHide requires a static
metric such that the ﬂow density can be computed before
obfuscating the topology. For simplicity, we assume that
the load which each ﬂow imposes to the network is the
same and all links have the same capacity. However, this
assumption can easily be relaxed to allow speciﬁc loads
and capacities for each ﬂow and link (therefore requiring
more knowledge or assumptions about the topology and
the expected trafﬁc).
8 Related work
Existing works on detecting and preventing LFAs can be
broadly classiﬁed into reactive and proactive approaches.
Reactive approaches only become active once a po-
tential LFA is detected. As such, they do not prevent
LFAs and only aim to limit their impact after the fact.
CoDef [31] works on top of routing protocols and re-
quires routers to collaborate to re-route trafﬁc upon con-
gestion. SPIFFY [25] temporarily increases the band-
width for certain ﬂows at a congested link. Assuming
that benign hosts react differently than malicious ones,
SPIFFY can tell them apart. Liaskos et al. describe a sys-
tem [33] that continuously re-routes trafﬁc such that it
becomes unlikely that a benign host is persistently com-
municating via a congested link. Malicious hosts on the
other hand are expected to adapt their behavior. Nyx [36]
addresses the problem of LFAs in the context of multi-
ple autonomous systems (ASes). It allows an AS to route
trafﬁc from and to another AS along a path that is not
affected by an LFA.
On the other hand, proactive solutions—including
NetHide—aim at preventing LFAs from happening and
are typically based on obfuscation. HoneyNet [28] uses
software-deﬁned networks to create a virtual network
topology to which it redirects traceroute packets.
While this hides the topology from an attacker, it also
makes traceroute unusable for benign purposes.
Trassare et al. implemented topology obfuscation as a
kernel module running on border routers [39]. The key
idea is to identify the most critical node in the network
and to ﬁnd the ideal position to add an additional link that
minimizes the centrality of this node. The border router
replies to traceroute packets as if there was a link at
the determined position. However, adding a single link
has little impact on the security of a big network and even
if the procedure would be repeated, an attacker could de-
termine the virtual links with high probability. Further,
traceroute becomes unusable for benign users as the
replies come from the border router.
Linkbait [40] identiﬁes potential target links of LFAs
and tries to hide them from attackers. Hiding a target link
is done by changing the routing of tracing packets from
bots in such a way that the target link does not appear in
the paths. As a prerequisite to only redirect trafﬁc from
bots, Linkbait describes a machine learning-based detec-
tion scheme that runs at a central controller which needs
to analyze all trafﬁc. Being based on re-routing of pack-
ets, Linkbait can only present paths that exist in the net-
work. Therefore, a topology that does not have enough
redundant paths cannot be protected. The paper does not
discuss issues with an attacker that is aware of the pro-
tection scheme and sends tracing trafﬁc that is likely to
be misclassiﬁed and therefore not re-routed.
Other approaches that are related to LFAs but not par-
ticularly to our work are based on virtual networks [22],
require changes in protocols or support from routers and
end-hosts [19,29] or focus on the detection of LFAs [41].
9 Conclusion
We presented a new, usable approach for obfuscating
network topologies. The core idea is to phrase the ob-
fuscation task as a multi-objective optimization problem
where security requirements are encoded as hard con-
straints and usability ones as soft constraints using the
notions of accuracy and utility.
As a proof-of-concept, we built a system, called
NetHide, which relies on an ILP solver and effective
heuristics to compute compliant obfuscated topologies
and on programmable network devices to capture and
modify tracing trafﬁc at line rate. Our evaluation on real-
istic topologies and simulated attacks shows that NetHide
can obfuscate large topologies with marginal impact on
usability, including in partial deployments.
Acknowledgements
We are grateful to the anonymous reviewers, Benjamin
Bichsel, Rüdiger Birkner and Tobias Bühler for the con-
structive feedback and the insightful discussions. This
work was partly supported by armasuisse Science and
Technology (S+T) under the Zurich Information Secu-
rity and Privacy Center (ZISC) grant.
708    27th USENIX Security Symposium
USENIX Association
References
[1] 3 in 4 DDoS attacks aimed at multiple vectors.
https :
/ / www . enterpriseinnovation . net / article / 3 -
4 - ddos - attacks - aimed - multiple - vectors -
512931178.
[2] Akamai q2 2017 state of the Internet. https://content.
akamai . com / us - en - pg9565 - q2 - 17 - state - of -
the- internet- security- report.html.
[3] Barefoot Toﬁno. https : / / barefootnetworks . com /
products/product- brief- tofino/.
[4] Can a DDoS break the Internet? Sure... just not all of it. https:
/ / arstechnica . com / information - technology /
2013 / 04 / can - a - ddos - break - the - internet -
sure- just- not- all- of- it/.
[5] DDoS attack threat cannot be ignored.
http : / / www .
computerweekly . com / feature / DDoS - attack -
threat- cannot- be- ignored.
[6] Dyn Statement on 10/21/2016 DDoS Attack. https://dyn.
com / blog / dyn - statement - on - 10212016 - ddos -
attack/.
[7] Exclusive: Inside the ProtonMail siege: how two small com-
panies fought off one of Europe’s largest DDoS attacks.
http : / / www . techrepublic . com / article /
exclusive - inside - the - protonmail - siege -
how - two - small - companies - fought - off - one -
of- europes- largest- ddos/.
[8] Github survived the biggest DDoS attack ever
recorded.
https : / / www . wired . com / story / github - ddos -
memcached/.
[9] Gurobi mathematical programming solver. http : / / www .
gurobi.com/products/gurobi- optimizer.
[10] How to ﬁght
the new breed of DDoS attacks on data
centers.
http : / / www . datacenterknowledge .
com / security / how - fight - new - breed - ddos -
attacks- data- centers.
[11] The internet topology zoo. http://topology- zoo.org/.
[12] Message regarding the ProtonMail DDoS attacks. https :
/ / protonmail . com / blog / protonmail - ddos -
attacks/.
[13] P4 behavioral model. https://github.com/p4lang/
behavioral- model.
[14] The P4 language speciﬁcation - version 1.0.4. https://p4.
org/p4- spec/p4- 14/v1.0.4/tex/p4.pdf.
[15] RFC 2992 - analysis of an equal-cost multi-path algorithm.
https://tools.ietf.org/html/rfc2992.
[16] RIPE atlas. https://atlas.ripe.net/.
[17] traceroute(8) - Linux manual page. http : / / man7 . org /
linux/man- pages/man8/traceroute.8.html.
[18] Unmetered mitigation: DDoS protection without
limits.
https : / / blog . cloudflare . com / unmetered -
mitigation/.
[19] BASESCU, C., REISCHUK, R. M., SZALACHOWSKI, P., PER-
RIG, A., ZHANG, Y., HSIAO, H.-C., KUBOTA, A., AND
URAKAWA, J. SIBRA - Scalable internet bandwidth reservation
architecture. arXiv preprint arXiv:1510.02696 (2015).
[20] BOSSHART, P., DALY, D., GIBB, G., IZZARD, M., MCKEOWN,
N., REXFORD, J., SCHLESINGER, C., TALAYCO, D., VAH-
DAT, A., VARGHESE, G., ET AL. P4: Programming protocol-
independent packet processors. ACM SIGCOMM CCR 44, 3
(2014).
[21] DIJKSTRA, E. W. A note on two problems in connexion with
graphs. Numerische Mathematik 1 (1959).
[22] GILLANI, F., AL-SHAER, E., LO, S., DUAN, Q., AMMAR, M.,
AND ZEGURA, E. Agile virtualized infrastructure to proactively
defend against cyber attacks. IEEE INFOCOM 2015.
[23] GIOTSAS, V., SMARAGDAKIS, G., DIETZEL, C., RICHTER, P.,
FELDMANN, A., AND BERGER, A. Inferring BGP blackholing
activity in the Internet. ACM IMC 2017.
[24] HOLTERBACH, T., PELSSER, C., BUSH, R., AND VANBEVER,
L. Quantifying interference between measurements on the RIPE
atlas platform. ACM IMC 2015.
[25] KANG, M. S., GLIGOR, V. D., AND SEKAR, V. SPIFFY: In-
ducing cost-detectability tradeoffs for persistent link-ﬂooding at-
tacks. In NDSS 2015.
[26] KANG, M. S., LEE, S. B., AND GLIGOR, V. D. The crossﬁre
attack. IEEE S&P 2013.
[27] KATZ-BASSETT, E., JOHN, J. P., KRISHNAMURTHY, A.,
WETHERALL, D., ANDERSON, T. E., AND CHAWATHE, Y. To-
wards IP geolocation using delay and topology measurements.
ACM IMC 2006.
[28] KIM, J., AND SHIN, S. Software-deﬁned HoneyNet: Towards
mitigating link ﬂooding attacks. IEEE/IFIP DSN-W 2017.
[29] KIM, T. H.-J., BASESCU, C., JIA, L., LEE, S. B., HU, Y.-C.,
AND PERRIG, A. Lightweight source authentication and path
validation. ACM SIGCOMM 2014.
[30] KUMAR, P., YUAN, Y., YU, C., FOSTER, N., KLEINBERG, R.,
LAPUKHOV, P., LIM, C. L., AND SOULÉ, R. Semi-oblivious
trafﬁc engineering: The road not taken. USENIX NSDI 2018.
[31] LEE, S. B., KANG, M. S., AND GLIGOR, V. D. CoDef: Col-
laborative defense against large-scale link-ﬂooding attacks. ACM
CoNEXT 2013.
[32] LEVENSHTEIN, V. Binary codes capable of correcting deletions,
insertions and reversals. Soviet Physics Doklady 10 (1966).
[33] LIASKOS, C., KOTRONIS, V., AND DIMITROPOULOS, X. A
novel framework for modeling and mitigating distributed link
ﬂooding attacks. IEEE INFOCOM 2016.
[34] PETITCOLAS, F. A. P. Kerckhoffs’ Principle. Springer US, 2011.
[35] SCHOEPE, D., AND SABELFELD, A. Understanding and enforc-
ing opacity. IEEE CSF 2015.
[36] SMITH, J. M., AND SCHUCHARD, M. Routing around conges-
tion: Defeating DDoS attacks and adverse network conditions via
reactive BGP routing. IEEE S&P 2018.
[37] SPRING, N., MAHAJAN, R., AND WETHERALL, D. Measuring
ISP topologies with Rocketfuel. ACM SIGCOMM CCR 32, 4
(2002).
[38] STUDER, A., AND PERRIG, A. The coremelt attack.
ORICS 2009, vol. 5789, Springer.
In ES-
[39] TRASSARE, S. T., BEVERLY, R., AND ALDERSON, D. A tech-
nique for network topology deception. In IEEE MILCOM 2013.
[40] WANG, Q., XIAO, F., ZHOU, M., WANG, Z., LI, Q., AND LI, Z.
Linkbait: Active link obfuscation to thwart link-ﬂooding attacks.
arXiv preprint arXiv:1703.09521.
[41] XUE, L., LUO, X., CHAN, E. W., AND ZHAN, X. Towards
detecting target link ﬂooding attack. USENIX LISA 2014.
USENIX Association
27th USENIX Security Symposium    709