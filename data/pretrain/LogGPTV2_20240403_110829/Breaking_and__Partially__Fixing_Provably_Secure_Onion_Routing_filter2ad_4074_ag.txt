includes the sequence from Pj to Pj(cid:48) starting at the k-th node.
H1
2 stores ( ¯Oj(cid:48), Pj(cid:48), ProcOnion(SKPj(cid:48) , Oj(cid:48), Pj(cid:48))) on the ¯O-
list. Like in H∗
1 if an onion ˜O is sent to Pj(cid:48), processing is ﬁrst
checked for a fail. If it does not fail , H1
2 compares ˜O to all ¯Oj(cid:48)
on its ¯O-list where the second entry is Pj(cid:48). If it ﬁnds a match,
the belonging ProcOnion(SKPj(cid:48) , Oj(cid:48), Pj(cid:48)) is used as process-
ing result of Pj(cid:48). Otherwise, ProcOnion(SKPj(cid:48) , ˜O, Pj(cid:48)) is
used.
H∗
1 ≈I H1
2 replaces for one communication (and all
its replays), the ﬁrst subpath between two consecutive honest
nodes after an honest sender. The output to A includes the
earlier (by H∗
1) replaced onion layers ¯Oearlier before the ﬁrst
honest relay (these layers are identical in H∗
2) that
take the original subpath but are otherwise chosen randomly;
the original onion layers after the ﬁrst honest relay for all
communications not considered by H1
1) or in
case of the communication considered by H1
2, the newly drawn
random replacement (generated by H1
2); and the processing
after Pj(cid:48).
The onions ¯Oearlier are chosen independently at random
by H∗
1 such that they embed the original path between an
honest sender and the ﬁrst honest relay, but contain a random
2 (outputted by H∗
1 and H1
2. H1
16Technically, we need the onion layers as used in H1
1 (with replaced
onion layers between a honest sender and ﬁrst honest node) in this case.
Hence, slightly different than before the attack needs to simulate the other
communications not only by the oracle use and processing, but also by replacing
some onion layers (between the honest sender and ﬁrst honest node) with
randomly drawn ones as H1
1 does.
17We treat modifying adversaries later in a generic way.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:48 UTC from IEEE Xplore.  Restrictions apply. 
183
message and random valid path before the honest sending
relay and after the next following honest relay. As they are
replaced by the original onion layers after Pj (there was no
modiﬁcation for this communication) and include a random
path and message, onions ¯Oearlier cannot be linked to onions
output by Pj. Hence, the random onions before the ﬁrst honest
node do not help distinguishing the machines.
Hybrid H∗
Thus, all that is left to distinguish the machines, is the
original/replaced onion layer after the ﬁrst honest node and the
processing afterwards. This is the same output as in H0 ≈I H1
1.
Hence, if there exists a distinguisher between H∗
2 there
exists an attack on LU.
1 and H1
H1
2 ≈I H∗
Hybrid H1
2. In this hybrid, for all communications, one
communication (and all its replays) at a time is selected. Within
that communication, the next (from sender to receiver) non-
replaced subpath between two consecutive honest nodes is
chosen. If A previously (i.e. in onion layers up to the honest
node starting the selected subpath) modiﬁed an onion layer in
this communication, the communication is skipped. Otherwise,
the onion layers between those honest nodes are replaced with
a random onion sharing the path.
2. Analogous above.
3. In this hybrid, for one communication (and
all its replays) for which in the adversarial processing no
modiﬁcation occurred so far, onion layers from its last honest
relay to the corrupted receiver are replaced with random
onions sharing this path and message. More precisely, this
machine acts like H∗
2 except that the processing of Oj (and,
if no replay protection, the processing result of all replays
of Oj); i.e. the consecutive onion layers Oj+1, . . . , On from
a communication of an honest sender, starting at the last
honest node Pj to the corrupted receiver Pn are replaced with
n(cid:48)) ←
¯Oj+1, . . . , ¯On. Thereby ¯Oi = O(cid:48)
FormOnion(m,Prdm, (P K)Prdm) where m is the message
of this communication18, Prdm a random path that includes
the sequence from Pj to Pn starting at the k-th node.
k+i with (O(cid:48)
1, . . . , O(cid:48)
H∗
2 ≈I H1
3. Similar to H∗
1 ≈I H1
Hybrid H∗
2 the onion layers before
Pj are independent and hence do not help distinguishing. The
remaining outputs sufﬁce to construct an attack on T I similar
to the one on LU in H∗
1 and H1
2.
3. In this hybrid, for one communication (and
all its replays) for which in the adversarial processing no
modiﬁcation occurred so far and for which the onion layers
from its last honest relay to corrupted receiver have not
been replaced before, the onion layers between those nodes
are replaced with random onion layers sharing the path and
message.
H1
3 ≈I H∗
Hybrid H4 This machine acts the way that S acts in
combination with F. Note that H∗
3 only behaves differently
from S in (a) routing onions through the honest parties and
(b) where it gets its information needed for choosing the
replacement onion layers: (a) H∗
3 actually routes them through
the real honest parties that do all the computation. H4, instead
18H1
3 knows this message as it communicates with the environment.
3. Analogous above.
runs the way that F and S operate: there are no real honest
parties, and the ideal honest parties do not do any crypto work.
(b) H∗
3 gets inputs directly from the environment and gives
output to it. In H4 the environment instead gives inputs to F
and S gets the needed information (i.e. parts of path and the
included message, if the receiver is corrupted) from outputs
of F as the ideal world adversary. F gives the outputs to the
environment as needed. Further, H∗
3 chooses the replacement
onion layers randomly, but identical for replays, while S
chooses them pseudo-randomly depending on an in F randomly
chosen temp, which is identical for replays.
H∗
3 ≈I H4. For the interaction with the environment from the
protocol/ideal functionality, it is easy to see that the simulator
directly gets the information it needs from the outputs of the
ideal functionality to the adversary: whenever an honest node
is done processing, it needs the path from it to the next honest
node or path from it to the corrupted receiver and in this case
also the message. This information is given to S by F.
Further, in the real protocol, the environment is notiﬁed by
honest nodes when they receive an onion together with some
random ID that the environment sends back to signal that the
honest node is done processing the onion. The same is done
in the ideal functionality. Notice that the simulator ensures
that every communication is simulated in F such that those
notiﬁcations arrive at the environment without any difference.
For the interaction with the real world adversary, we
distinguish the outputs in communications from honest and
corrupted senders. 0) Corrupted senders: In the case of a
corrupted sender both H∗
3 and H4 (i.e. S+F) do not replace
any onion layers except that with negligible probability a
collision on the ¯O-list resp. O-list occurs.
1)Honest senders: 1.1) No modiﬁcation of the onion by the
adversary happens: All parts of the path are replaced with
randomly drawn onion layers ¯Oi. The way those layers are
chosen is identical for H∗
3 and H4 (i.e. S+ F). 1.2) Some
modiﬁcation of the onion or a drop or insert happens: As soon
as another onion as the expected honest processing is found,
both H∗
3 and H4 continue to use the bit-identical onion for
the further processing except that with negligible probability a
collision on the ¯O-list resp. O-list occurs. In case of a dropped
onion it is simply not processed further in any of the two
machines.
Note that the view of the environment in the real protocol is
the same as its view in interacting with H0. Similarly, its view
in the ideal protocol with the simulator is the same as its view
in interacting with H4. As we have shown indistinguishability
in every step, we have indistinguishability in their views.
C. Sphinx
1) Adapted Sphinx: The original Sphinx protocol was
adapted in [5] to use modern cryptographic primitives, which
can be proven secure. Further, the number of different crypto-
graphic algorithms is reduced to improve performance of the
construction. Additionally, the encryption function used for
the Sphinx payload is replaced by an authenticated encryption
(AE) scheme, such that the payload is also authenticated at
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:48 UTC from IEEE Xplore.  Restrictions apply. 
184
each node by the tag γi as part of the header. Let πAE (π−1
AE)
be the encryption (decryption) function of an AE scheme, as
proposed by [5].
The algorithm to generate a Sphinx packet is partly adapted.
Calculation of αi, si, bi, βi is equivalent to the original Sphinx
description, except that we consider the 0-bit string for padding
βν−1 replaced by random bits to prevent the known attack from
Section IV-A. The cryptographic primitives µ, hµ, π, hπ are
not used anymore in the adaptation. Instead an AE scheme is
employed: Let δν be the payload of the Sphinx packet. For
0 ≤ i < ν − 1: (δi, γi) ← πAE(si, δi+1, βi), where δi is
an encryption of δi+1 and γ is a tag authenticating δi+1, βi.
πAE, ρ, hb, hρ are modelled as a random oracle. The length of
the Sphinx payload is ﬁxed and checked at all mix nodes. If
the length is incorrect, the packet is discarded.
2) Proof of adapted Sphinx: The proof
for Onion-
Correctness is analogous to the one in [13]. The proof of
our new security properties follows:
Symmetric key si
is a secret: The mix nodes have an
asymmetric private key xni, that is used in a Difﬁe-Hellman
key exchange. It follows that the shared symmetric key between
an honest sender and an honest mix node is not known to the
adversary. If an adversary could extract the symmetric key with
non-negligible probability, she could break the decisional difﬁe-
hellman problem. See [13] Section 4.4, indistinguishability
proof of hybrid G1. Note that tag γ is generated using an AE
scheme keyed with si directly. The argumentation from [13]
still holds.
LU : Recall that LU allows the adversary to decide the
inputs to FormOnion and either returns the resulting onion
O1 of this FormOnion call or a randomly chosen onion ¯Ok,
that only matches the subpath between the honest nodes,
together with the processing of O1 after the honest node
(ProcOnion(Oj)). Furthermore, it allows oracle use before
and after this decision.
No dependencies between FormOnion: We deﬁne the game
LU 1 to be the same as LU except that the adversary has
no oracle access before his input decision (skips Step 2). As
the creation of onions in Sphinx is adequately randomized,
independent from earlier creations and using a sufﬁciently
large security parameter, oracle access before the challenge
only negligibly improves the adversary’s success in guessing
correctly.
No modiﬁcation: We deﬁne the game LU 2 to be the same
as LU 1 except that the adversary has no oracle access after
his input decision (skips Step 7). Using the oracle for a new
onion ˜O independent of the challenge onion O does not help
guessing b as the output ProcOnion( ˜O) is then independent
from b as well. Thus, we only need to look at modiﬁcations of
the challenge onion processed until the honest node O+j :=
ProcOnionj(O). As any onion layer, O+j consists of four parts
(α, β, γ, δ), from which the tag γ authenticates β, δ using a
shared key s extracted from α. Modiﬁcations generating a
valid tag are thus only successful with negligible probability.
Therefore, there cannot be a successful attack on LU 1 that
relies on the second oracle and thus any successful attack on
LU 1 is also possible for LU 2 in Sphinx.
No linking: We deﬁne the game LU 3 to be LU 2 but the
second part of the output (P rocOnion(Oj) = (Oj+1, Pj+1))
is no longer given to the game adversary. Assume knowing
this output helps the adversary to break LU. As the next hop
Pj+1 is already known to her from her choice of path, the
only part of the output that can help her is Oj+1. Thus the
adversary must be able to link Oj+1 to the ﬁrst output onion
layer (O1 resp. ¯Ok) which differs depending on b.
Hence, she must be able to link the onion layers before and
after the honest node. The processing at a honest node changes
all four parts of a Sphinx packet in a way such that the adversary
the result. Let B = (β(cid:107)02κ) ⊕ ρ(hρ(s)):
cannot predict
α(cid:48) ← αhbα,s; β(cid:48) ← B[2κ..(2r+3)κ−1]; γ(cid:48) ← B[κ..2κ−1]; δ(cid:48) ←
π−1
AE(s, δ, γ). Assume if the adversary can decide on (α, β, γ, δ)
she can distinguish any of the new values (α(cid:48), β(cid:48), γ(cid:48), δ(cid:48)) from
randomness without knowing s. However, this implies that she
is able to solve the DDH problem induced by the computation
for α(cid:48), or break the secure ρ, πAE, or hash primitives, which
contradicts the assumption. Thus, no successful attack on LU 2
based on the second part of the output (P rocOnion(Oj)) can
exist for Sphinx.
they result
Onion layer indistinguishable from random ones: We deﬁne
LU 4 to be LU 3 except that for the output onion layer the
values of α, β, γ and δ are chosen randomly from their
corresponding spaces, such that
in the same
subpath as given by the adversary. We show that LU 4 is
indistinguishable from LU 3. Assume an adversary that can
distinguish the games. As processing of onion layers results
in expected behavior, she must be able to distinguish some
of the parts of the onion layer from randomness. Assume she
can distinguish any part of the packet, that means she can
– without knowing s – either solve the DDH problem or break
the security of ρ or the AE scheme. Therefore, she cannot
distinguish any part of the packet from a randomly drawn
value, and also not process it to get the message.
In LU 4 all the values are drawn exactly the same way
independent of b. There cannot be an adversary with any
advantage for this game. Because LU 4 ≈ LU 3
=⇒
LU 2 =⇒ LU 1 =⇒ LU, we have proven that any adversary
has at most negligible advantage in guessing b for LU.
TI : Recall that T I either outputs the processing of the
onion build from the adversary’s choice (ProcOnion(Oj) =
(Oj+1, Pj+1)) or the processing from a random onion that
matches the end of the path and message of the adversary’s
choice (ProcOnion( ¯Ok) = ( ¯Ok+1, Pj+1)). Note that the next
hop is always the same in those outputs and thus only the onion
layers need to be indistinguishable. The proof of this is similar
to LU’s “Onion layer indistinguishable from random ones”
except that O is chosen randomly from the onion layers that
also include the adversary chosen message. Further, thanks to
the ﬁx to the attack determining the path length, also the values
αν−1, βν−1, γν−1, δν−1 the last node gets are indistinguishable
from such random ones.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:48 UTC from IEEE Xplore.  Restrictions apply. 
185