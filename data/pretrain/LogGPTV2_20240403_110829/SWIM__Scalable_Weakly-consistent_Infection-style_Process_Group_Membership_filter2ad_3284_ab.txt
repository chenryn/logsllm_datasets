### Log(pml)

The calculation of \(\log(p_{ml})\), where \(p_{ml}\) represents the independent message loss probability for each message, serves as a useful baseline for comparing the scalability of various failure detection protocols. For instance, all-to-all heartbeat protocols, discussed in Section 2, exhibit a sub-optimality factor that increases linearly with group size.

---

### 3. The Basic SWIM Approach

As previously mentioned, the SWIM (Scalable Weakly-consistent Infection-style Membership) approach consists of two main components:

1. **Failure Detector Component**: This component is responsible for detecting failures among group members.
2. **Dissemination Component**: This component disseminates information about recent changes in group membership, such as members joining, leaving, or failing.

We will now provide an overview of the basic SWIM protocol. This protocol employs a random-probing-based failure detector, as described in [12] (Section 3.1), and uses network multicast to disseminate membership updates (Section 3.2). The refined SWIM protocol is developed in the subsequent section (Section 4).

#### 3.1. SWIM Failure Detector

The SWIM failure detector algorithm, as detailed in [12], relies on two key parameters: the protocol period \(T'\) (in time units) and the integer \(k\), which denotes the size of failure detection subgroups. The protocol does not require synchronized clocks across members, and its properties hold if \(T'\) is the average protocol period at group members.

**Figure 1** illustrates the operation of the protocol at an arbitrary member \(M_i\). During each protocol period of length \(T'\) (measured by \(M_i\)'s local clock), \(M_i\) selects a random member from its membership list (say \(M_j\)) and sends a ping message to it. \(M_i\) then waits for an acknowledgment (ack) from \(M_j\). If the ack is not received within a specified timeout (determined by the message round-trip time, which is chosen to be less than the protocol period), \(M_i\) indirectly probes \(M_j\). Specifically, \(M_i\) selects \(k\) random members and sends each a `ping-req(M_j)` message. Each of these members, if non-faulty, pings \(M_j\) and forwards the ack from \(M_j\) (if received) back to \(M_i\). At the end of the protocol period, \(M_i\) checks if it has received any acks, either directly from \(M_j\) or indirectly through one of the \(k\) members. If no acks are received, \(M_i\) declares \(M_j\) as failed in its local membership list and passes this update to the Dissemination Component.

In the example shown in **Figure 1**, one of the \(k\) members successfully completes the cycle of events because \(M_j\) is operational, and thus \(M_i\) does not suspect \(M_j\) as faulty at the end of the protocol period.

The specified timeout for initiating indirect probing is based on an estimate of the distribution of round-trip times within the network, such as an average or 99th percentile. Note that the protocol period \(T'\) must be at least three times the round-trip estimate. In our experiments, we use the average measured round-trip time to set the timeout, and our protocol period is significantly larger than this value.

Each message in this protocol is tagged with a unique sequence number corresponding to the protocol period at the initiator (\(M_i\)). The sizes of `ping`, `ping-req`, and `ack` messages are bounded by a constant and are independent of the group size.

The second part of the protocol involves an indirect probing subgroup of members to relay both pings and acks. This approach is used to avoid the effects of congestion on the network path between \(M_i\) and \(M_j\), which might cause the original ping message or its ack to be dropped.

The analysis of this failure detector protocol is provided in [12]. Here, we summarize the key results:

- **Selection Probability**: If each member has a membership list of size \(n\) and a fraction \(q_f\) of these members are non-faulty, the likelihood of an arbitrary member being chosen as a ping target in a protocol period is \(1 - (1 - \frac{1}{n} \cdot q_f)^{n-1}\), which decreases quickly (and asymptotically as \(n \to \infty\)) to \(1 - e^{-q_f}\).
- **Expected Detection Time**: The expected time between the failure of an arbitrary member and its detection by some process in the group is at most \(T' \cdot \frac{1}{1 - e^{-q_f}}\). This provides an estimate of the protocol period length in terms of the application-specified expected detection time.
- **False Detection Probability**: If \(q_{ml}\) is the probability of timely packet delivery by the network, independent across all packets, an arbitrary non-faulty member will be falsely detected as failed within a protocol period with probability \(q_f \cdot (1 - q_{ml}^2) \cdot (1 - q_f \cdot q_{ml}^4)^k \cdot e^{q_f - 1}\). This allows for a configurable value of \(k\) based on the false positive probability required by the application.
- **Strong Completeness**: A faulty member will eventually be chosen as a ping target at each non-faulty member and deleted from its membership list.
- **Message Load**: The expected message load per member imposed by the protocol is a constant that does not vary with group size and is symmetrical across all members. This load can be calculated from the estimate of \(k\).
- **Independence from Group Size**: None of these properties depend (except asymptotically) on the group size \(n\).

#### 3.2. Dissemination Component and Dynamic Membership

Upon detecting the failure of another group member, the process multicasts this information to the rest of the group using a `failed(M_j)` message. A member receiving this message deletes \(M_j\) from its local membership list. Information about newly joined members or voluntarily leaving members is multicast in a similar manner. However, for a process to join the group, it needs to know at least one contact member. This can be achieved through several means, such as directing joins to a well-known server or IP multicast address. In the absence of such infrastructure, join messages could be broadcast, and group members can probabilistically decide whether to reply. Alternatively, a static coordinator can be maintained within the group to handle join requests. The existence of multiple coordinators does not affect the correctness of the protocol but may lead to multiple replies to the join request. Discovery and resolution of multiple coordinators can be managed over time through the Dissemination Component. In the current version of SWIM, we maintain a coordinator, although other strategies are also viable.

---

### 4. A More Robust and Efficient SWIM

Section 3 described the basic SWIM protocol, which disseminates membership updates using network multicast. However, network multicast primitives like IP multicast are best-effort and can cause correlated non-receipt of membership changes due to message losses. In Section 4.1, we describe a Dissemination Component that piggybacks membership updates on the ping and ack messages sent by the failure detector protocol. This eliminates the need for additional multicast packets, resulting in a constant expected message overhead per group member. This approach, known as infection-style dissemination, offers robustness to packet losses and low latency.

The basic SWIM failure detector, despite its calculable accuracy, can be affected by slow processes (e.g., those losing packets due to buffer overflow) declaring non-faulty processes as faulty. Additionally, a process might be temporarily unresponsive, causing it to miss timely replies to pings and be mistakenly declared as failed. Section 4.2 introduces the Suspicion mechanism, where an unresponsive process is initially declared as "suspected" rather than "faulty." This information is spread through the group, and after a specified timeout, the suspected process is declared as "faulty" and this information is disseminated. If the suspected process responds before the timeout, an "alive" message is disseminated, and the process is rejuvenated in membership lists without needing to leave or rejoin the group. This timeout effectively trades off an increase in failure detection time for a reduction in false failure detections.

The basic SWIM failure detection protocol guarantees eventual detection of the failure of an arbitrary process \(M_i\) at each non-faulty group member \(M_j\). However, it does not provide deterministic guarantees on the time between failure and detection. Section 4.3 describes a modification to the original SWIM failure detector that ensures a Time Bounded Completeness property, where the interval between a failure and its detection is no more than twice the group size (in terms of protocol periods).

#### 4.1. Infection-Style Dissemination Component

The basic SWIM protocol propagates membership updates through the group using a multicast primitive. While hardware and IP multicast are available on most networks and operating systems, they are often disabled for administrative reasons. In such cases, the basic SWIM protocol would have to use costly broadcasts or inefficient point-to-point messaging schemes to disseminate membership updates. Furthermore, since multicast is unreliable, membership changes can only be disseminated on a best-effort basis.

The augmented SWIM protocol eliminates the use of external multicast primitives by piggybacking the information to be disseminated on the ping, `ping-req`, and `ack` messages generated by the failure detector protocol. This infection-style dissemination mechanism spreads information in a manner similar to gossip or an epidemic in society. This implementation of the Dissemination Component does not generate any extra packets; all messages are propagated by piggybacking on the packets of the Failure Detection Component.

Bailey [2] presents a deterministic analysis of the spread of an epidemic within a homogeneously mixing group of \(n\) members with one initial infected member. The relationship between the (expected) number of infected members \(x\) (initially 1) and time \(t\), under a contact rate of \(\beta\) per time unit, is given by:
\[ \frac{dx}{dt} = \beta \cdot x \cdot (n - x) \Rightarrow x = \frac{n}{1 + (n - 1)e^{-\beta n t}} \]

In our infection-style dissemination component, the spread of a membership update through ping and ack messages can be analyzed similarly. With the protocol period treated as a time unit, the contact rate \(\beta\) is the probability of contact between any pair of infected and non-infected members, and equals \([1 - (1 - \frac{1}{n})^2] = \frac{2(n-1)}{n^2}\). This gives us:
\[ x = \frac{n}{1 + (n - 1)e^{-(2 - \frac{1}{n})t}} \]

Such an epidemic process spreads exponentially fast in the group. After \(t = \lambda \log n\) rounds of the protocol, where \(\lambda\) is a parameter, the expected number of infected members is:
\[ x \geq n \cdot (1 - n^{-(2\lambda - 2)}) \]

A membership update propagated in infection-style by piggybacking will thus reach \((n - n^{-(2\lambda - 2)})\) group members after \(\lambda \log n\) protocol periods. As \(n\) increases (and \(n \to \infty\)), the estimate for \(x\) approaches \((n - n^{-(2\lambda - 2)})\). Setting \(\lambda\) to a small constant suffices to disseminate the epidemic reliably, even at small group sizes, as demonstrated by our experiments in Section 5.

The literature contains analyses of several other styles of epidemics [4, 8, 13], with essentially similar conclusions.