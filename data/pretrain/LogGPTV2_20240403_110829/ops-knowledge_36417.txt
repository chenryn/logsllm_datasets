User: 如何实现HTTP请求中的数字签名验证？请提供实现方案和示例代码。
Assistant: 数字签名是一种数字证书技术，用于验证消息的完整性和身份认证。在HTTP请求中，数字签名可以用于验证请求的来源和完整性，防止请求被篡改或冒充。

下面是一个简单的数字签名验证方案和示例代码：

1. 获取请求参数并按照字典序排序。

2. 使用 HMAC-SHA256 算法对参数和密钥进行加密，得到签名。

3. 将签名加入请求头或参数中。

4. 接收方获取请求参数和签名，并按照相同的方法生成签名。

5. 比对接收到的签名和自己生成的签名，如果一致，则验证通过。

示例代码：

# 客户端代码

import hashlib
import hmac
import requests

# 请求参数
params = {
    'name': 'Alice',
    'age': '20',
    'timestamp': '1538476400'  # 当前秒级时间戳
}

# 密钥
secret = 'my-secret-key'

# 按照字典序排序并拼接参数
sorted_params = sorted(params.items(), key=lambda x: x[0])

# 使用HMAC-SHA256算法生成签名
message = '&'.join([f"{p[0]}={p[1]}" for p in sorted_params]).encode()
signature = hmac.new(secret.encode(), message, hashlib.sha256).hexdigest()

# 添加签名到请求头
headers = {
    'X-Signature': signature
}

# 发送GET请求
response = requests.get('http://example.com/api', params=params, headers=headers)

# 接收方代码

import hashlib
import hmac

# 请求参数
params = {
    'name': 'Alice',
    'age': '20',
    'timestamp': '1538476400'
}

# 密钥
secret = 'my-secret-key'

# 按照字典序排序并拼接参数
sorted_params = sorted(params.items(), key=lambda x: x[0])

# 使用HMAC-SHA256算法生成签名
message = '&'.join([f"{p[0]}={p[1]}" for p in sorted_params]).encode()
signature = hmac.new(secret.encode(), message, hashlib.sha256).hexdigest()

# 比对接收到的签名和自己生成的签名
if signature == request.headers.get('X-Signature'):
    print('Signature verification succeed.')
else:
    print('Signature verification failed.')