Media, Inc., 2005.
[7] L. Cai and H. Chen, “TouchLogger: Inferring Keystrokes on Touch
Screen from Smartphone Motion,” in USENIX Workshop on Hot Topics
in Security – HotSec, 2011.
[8] CSID,
“Consumer
Survey:
[On-
line]. Available: http://www.csid.com/wp-content/uploads/2012/09/CS
PasswordSurvey FullReport FINAL.pdf
Password Habits,”
2012.
[9] A. Das, J. Bonneau, M. Caesar, N. Borisov, and X. Wang, “The tangled
web of password reuse.” in NDSS’14, 2014.
[10] W. Diao, X. Liu, Z. Li, and K. Zhang, “No Pardon for the Interruption:
New Inference Attacks on Android Through Interrupt Timing Analysis,”
in S&P’16, 2016.
[11] S. Gaw and E. W. Felten, “Password management strategies for online
accounts,” in SOUPS’06, 2006.
[12] Q. Ge, Y. Yarom, D. Cock, and G. Heiser, “A Survey of Microar-
chitectural Timing Attacks and Countermeasures on Contemporary
Hardware,” Journal of Cryptographic Engineering, pp. 1–27, 2016.
[13] N. Gondhia, “Samsung galaxy s7 battery life review,” 2016.
[Online]. Available: http://www.androidauthority.com/samsung-galaxy-
s7-battery-life-review-683968/
[14] Google, “Android o prevents access to /proc/stat,” Jun. 2017. [Online].
Available: https://issuetracker.google.com/issues/37140047
[15] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa,
“Strong and efﬁcient cache side-channel protection using hardware
transactional memory,” in USENIX Security Symposium, 2017.
[16] D. Gruss, C. Maurice, K. Wagner, and S. Mangard, “Flush+Flush: A
Fast and Stealthy Cache Attack,” in DIMVA’16, 2016.
[17] D. Gruss, R. Spreitzer, and S. Mangard, “Cache Template Attacks: Au-
tomating Attacks on Inclusive Last-Level Caches,” in USENIX Security
Symposium, 2015.
13
[18] D. Gullasch, E. Bangerter, and S. Krenn, “Cache Games – Bringing
Access-Based Cache Attacks on AES to Practice,” in S&P’11, 2011.
[45] Qualcomm, “Snapdragon mobile processors and chipsets,” Jan. 2017.
[Online]. Available: https://www.qualcomm.com/products/snapdragon
[19] S. Idrus, E. Cherrier, C. Rosenberger, and P. Bours, “Soft Biometrics for
Keystroke Dynamics: Proﬁling Individuals While Typing Passwords,”
Computers & Security, vol. 45, pp. 147–155, 2014.
[20] M. S. Inci, B. Gulmezoglu, G. Irazoqui, T. Eisenbarth, and B. Sunar,
“Cache Attacks Enable Bulk Key Recovery on the Cloud,” in CHES’16,
2016.
Intel, “82093AA I/O Advanced Programmable Interrupt Controller
(IOAPIC),” 1996.
[21]
[22] ——, “Intel R(cid:13) 64 and IA-32 Architectures Software Developer(cid:48)s Man-
ual, Volume 3 (3A, 3B & 3C): System Programming Guide,” 2014.
[23] S. Jana and V. Shmatikov, “Memento: Learning Secrets from Process
Footprints,” in S&P’12, 2012.
[24] Y. Jang, S. Lee, and T. Kim, “Breaking Kernel Address Space Layout
Randomization with Intel TSX,” in CCS’16, 2016.
[25] N. Kralevich, “Honey, i shrunk the attack surface,” in Black Hat 2017
Brieﬁngs, 2017.
[26] D. G. B. Lab, “Global app power consumption report 2016, h1,”
2016. [Online]. Available: https://medium.com/@DU Global Battery
Lab/e7f9b845bed
[28]
[27] P.-M. Lee, W.-H. Tsui, and T.-C. Hsiao, “The Inﬂuence of Emotion
on Keyboard Typing: An Experimental Study Using Auditory Stimuli,”
PLOS ONE, vol. 10, pp. 1–16, 2015.
“ld.so(8) Linux Programmer’s Manual,” Linux man-pages project, 2016.
[Online]. Available: http://man7.org/linux/man-pages/man8/ld.so.8.html
[29] M. Lipp, D. Gruss, M. Schwarz, D. Bidner, C. Maurice, and S. Man-
gard, “Practical keystroke timing attacks in sandboxed javascript,” in
ESORICS’17, 2017, (to appear).
[30] M. Lipp, D. Gruss, R. Spreitzer, C. Maurice, and S. Mangard, “AR-
Mageddon: Cache Attacks on Mobile Devices,” in USENIX Security
Symposium, 2016.
[31] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-Level Cache
Side-Channel Attacks are Practical,” in S&P’15, 2015.
[32] LWN, “The high-resolution timer API,” Jan. 2006. [Online]. Available:
https://lwn.net/Articles/167897/
J. Ma, W. Yang, M. Luo, and N. Li, “A study of probabilistic password
models,” in S&P’14, 2014.
[33]
[34] C. Maurice, N. Le Scouarnec, C. Neumann, O. Heen, and A. Francillon,
“Reverse Engineering Intel Complex Addressing Using Performance
Counters,” in RAID’15, 2015.
[35] L. W. McVoy, C. Staelin et al., “lmbench: Portable tools for performance
analysis.” in USENIX ATC’96, 1996.
[36] W. Melicher, B. Ur, S. M. Segreti, S. Komanduri, L. Bauer, N. Christin,
and L. F. Cranor, “Fast, Lean, and Accurate: Modeling Password
Guessability Using Neural Networks,” in USENIX Security Symposium,
2016.
[37] Microsoft, “Acpi system description tables,” Jul. 2016.
[Online].
Available: https://msdn.microsoft.com/en-us/windows/hardware/drivers/
bringup/acpi-system-description-tables#madt
[38] A. Narayanan and V. Shmatikov, “Fast dictionary attacks on passwords
using time-space tradeoff,” in CCS’05, 2005.
[39] P. Norvig, “English letter frequency counts: Mayzner revisited,” 2013.
[Online]. Available: http://norvig.com/mayzner.html
[40] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis, “The
Spy in the Sandbox: Practical Cache Attacks in JavaScript and their
Implications,” in CCS’15, 2015.
[41] D. A. Osvik, A. Shamir, and E. Tromer, “Cache Attacks and Counter-
measures: the Case of AES,” in CT-RSA, 2006.
[42] C. Percival, “Cache missing for fun and proﬁt,” in Proceedings of
BSDCan, 2005.
[43] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard, “DRAMA:
Exploiting DRAM Addressing for Cross-CPU Attacks,” in USENIX
Security Symposium, 2016.
[44] S. Pinet, J. C. Ziegler, and F.-X. Alario, “Typing is writing: Linguistic
properties modulate typing execution,” Psychon Bull Rev, vol. 23, no. 6,
pp. 1898–1906, Apr. 2016.
14
[46] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey, You,
Get Off of My Cloud: Exploring Information Leakage in Third-Party
Compute Clouds,” in CCS’09, 2009.
[47] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L. Mazurek,
L. Bauer, N. Christin, and L. F. Cranor, “Encountering stronger pass-
word requirements: User attitudes and behaviors,” in SOUPS’10, 2010.
[48] P. Shrestha, M. Mohamed, and N. Saxena, “Slogger: Smashing
Motion-based Touchstroke Logging with Transparent System Noise,”
in WiSec’16, 2016.
[49] L. Simon, W. Xu, and R. Anderson, “Don’t Interrupt Me While I Type:
Inferring Text Entered Through Gesture Typing on Android Keyboards,”
Proceedings on Privacy Enhancing Technologies, 2016.
[50] D. X. Song, D. Wagner, and X. Tian, “Timing Analysis of Keystrokes
and Timing Attacks on SSH,” in USENIX Security Symposium, 2001.
[Online]. Available:
[51] The GTK+ Team, “GTK+ Features,” 2016.
https://www.gtk.org/features.php
[52] R. Veras, C. Collins, and J. Thorpe, “On semantic patterns of passwords
and their security impact,” in NDSS’14, 2014.
[53] P. Vila and B. K¨opf, “Loophole: Timing attacks on shared event loops
in chrome,” in USENIX Security Symposium, 2017.
[54] R. Wash, R. Rader, R. Berman, and Z. Wellmer, “Understanding
password choices: How frequently entered passwords are re-used across
websites,” in SOUPS’16, 2016.
[55] M. Weir, S. Aggarwal, B. d. Medeiros, and B. Glodek, “Password
cracking using probabilistic context-free grammars,” in S&P’09, 2009.
[56] M. Winnick and J. Mons, “Mobile touches: a study on humans and
their tech,” 2016. [Online]. Available: https://blog.dscout.com/mobile-
touches
[57] X.org Foundation, “xorg documentation,” 10 2014. [Online]. Available:
https://www.x.org/wiki/Documentation/
[58] Y. Yarom and K. Falkner, “Flush+Reload: a High Resolution, Low
Noise, L3 Cache Side-Channel Attack,” in USENIX Security Sympo-
sium, 2014.
[59] Y. Yarom, Q. Ge, F. Liu, R. B. Lee, and G. Heiser, “Mapping the Intel
Last-Level Cache,” Cryptology ePrint Archive, Report 2015/905, pp.
1–12, 2015.
[60] K. Zhang and X. Wang, “Peeping Tom in the Neighborhood: Keystroke
Eavesdropping on Multi-User Systems,” in USENIX Security Sympo-
sium, 2009.
APPENDIX
We compare the accuracy of four different side channels
with and without KeyDrown (procfs, rdtsc, Flush+Reload,
and Prime+Probe on the last-level cache) on three different ar-
chitectures: a Lenovo ThinkPad T460s (Intel Core i5-6200U),
an LG Nexus 5 (ARMv7), and a OnePlus 3T (ARMv8). Ta-
ble IV summarizes the F-scores for all attacks with and without
KeyDrown. KeyDrown prevents keystroke timing attacks in all
cases when considering single-trace attacks only.
TABLE IV.
F-SCORE WITHOUT AND WITH KeyDrown FOR
STATE-OF-THE-ART ATTACKS.
Device
ThinkPad T460s
LG Nexus 5
OnePlus 3T
ThinkPad T460s
LG Nexus 5
OnePlus 3T
ThinkPad T460s
LG Nexus 5
OnePlus 3T
ThinkPad T460s
LG Nexus 5
OnePlus 3T
Side Channel
procfs
procfs
procfs
Interrupt-timing (rdtsc)
Interrupt-timing
Interrupt-timing
Flush+Reload
Flush+Reload
Flush+Reload
Prime+Probe on LLC
Prime+Probe on LLC
Prime+Probe on LLC
unprotected
KeyDrown
1.00
1.00
1.00
0.94
0.94
0.99
0.99
0.99
0.93
0.81
0.80
0.89
0.15
0.15
0.15
0.14
0.14
0.15
0.09
0.02
0.10
0.11
0.11
0.07
Fig. 13. procfs-based attack on the Nexus 5. Injected keystrokes ((cid:78)) and
real events (•) are not distinguishable with KeyDrown (before dotted line).
Fig. 14. Timing-based attack on the Nexus 5. Injected keystrokes ((cid:78)) and
real events (•) are not distinguishable with KeyDrown (before dotted line).
We performed our experiments on the touchscreen soft-
keyboard of the Nexus 5. With KeyDrown, the precision is
lowered to 0.01 and, thus, the resulting F-score of 0.02 means
a ≤−86.5 % advantage over an always-one oracle.
Figure 13 and Figure 14 show a procfs-based interrupt
attack and a timing-based attack, both on the Nexus 5. Without
KeyDrown, we achieve a precision of 1.00 for the procfs-
based attack and 0.89 for the timing-based attack, resulting in
an F-score of 1.00 and 0.94 respectively. Enabling KeyDrown
reduces the precision to only 0.08 and 0.07 respectively. Thus,
the resulting F-score is 0.15 for the procfs-based attack, and
0.14 for the timing-based attack, which is an advantage of
≤0.0 % over an always-one oracle.
Figure 15 shows the results of inferring keystrokes by
detecting the touchscreen interrupt handler’s cache activity
using Multi-Prime+Probe on the Nexus 5. We monitored 5
cache sets in parallel for noise robustness. Without KeyDrown,
the precision is 0.71 with a recall of only 0.92, as an access
to one of the cache sets by any other application cannot
be distinguished from a cache set access by the touchscreen
interrupt handler, resulting in a high number of false positives.
If we enable KeyDrown, the precision drops to 0.06, as the
attacker additionally measures the noise generated by the
injected keystrokes. Thus, the F-score is 0.11.
We performed our experiments on the OnePlus 3T touch-
screen soft-keyboard. Figure 16 shows a Flush+Reload attack
on libflinger.so. Without KeyDrown, the precision is
0.88 and the F-score is thus 0.93. If KeyDrown is active, the
precision is lowered to 0.05 and, thus, the resulting F-score of
0.10 means a ≤−32.5 % advantage over an always-one oracle.
Fig. 15. Multi-Prime+Probe attack on the 5 cache sets from 0x382659be
to 0x38265abe of touch_irq_handler on the Nexus 5. Injected
keystrokes ((cid:78)) and real events (•) are not distinguishable when KeyDrown
is active (before dotted line).
Fig. 16.
Flush+Reload attack on address 0x28ec0 of libflinger.so
on the OnePlus 3T. Injected keystrokes ((cid:78)) and real events (•) are not
distinguishable when KeyDrown is active (before dotted line).
Fig. 17. procfs-based attack on the OnePlus 3T. Injected keystrokes ((cid:78))
and real events (•) are not distinguishable with KeyDrown (before dotted line).
Figure 17 and Figure 18 show a procfs-based interrupt
attack as well as a timing-based attack, both on the OnePlus
3T. The attack has a precision of 1.00 (F-score of 1.00)
and 0.99 (F-score of 0.99) respectively. Enabling KeyDrown
reduces the precision to only 0.08 (F-score is 0.15) and 0.07
(F-score is 0.15) respectively, which is a 0.0 % advantage over
an always-one oracle.
Figure 19 shows the results of inferring keystroke timings
by detecting the touchscreen interrupt handler’s cache activity
using Multi-Prime+Probe on the OnePlus 3T. We monitored
5 cache sets in parallel for a higher noise robustness. Without
KeyDrown, the precision is already at a quite low value of
0.80 with a recall of only 1.00, as access to one of the
cache sets by any other application cannot be distinguished
from a cache set access by the touchscreen interrupt handler.
Thus, this attack has a high number of false positives. If we
enable KeyDrown, the precision drops to 0.10, as the attacker
additionally measures the noise generated by the injected
keystrokes. Thus, the F-score is 0.07, which is a ≤−52.7 %
advantage over an always-one oracle.
Fig. 18. Timing-based attack on the OnePlus 3T. Injected keystrokes ((cid:78)) and
real events (•) are not distinguishable with KeyDrown (before dotted line).
Fig. 19. Multi-Prime+Probe attack on the 5 cache sets from 0x3fc0355c28
to 0x3fc0355d68 of msm_gpio_irq_handler of the OnePlus 3T.
Injected keystrokes ((cid:78)) and real events (•) are not distinguishable when
KeyDrown is active (before dotted line).
15
00.20.40.60.81·1090204060Runtime[ns]IRQcount01234·10902·1064·106Runtime[ns]∆cycles00.20.40.60.811.2·1090246Runtime[ns]Activesets0246·10905001,0001,500Runtime[ns]Latency00.511.522.53·1090100200Runtime[ns]IRQcount2468·10901·1062·106Runtime[ns]∆cycles0.511.52·1090246Runtime[ns]Activesets