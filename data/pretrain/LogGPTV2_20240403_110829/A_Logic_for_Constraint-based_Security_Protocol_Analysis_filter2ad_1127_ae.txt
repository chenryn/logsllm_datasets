π) are deﬁned by the grammar:
π ::= true | false | t1 = t2 | m : K | ¬π | π∧π | π∨
π | ∃v.π | ∀v.π
Here each t1, t2 and m is either a variable or a ground
term, K is a set of terms and v is a variable.
Let π be an EF formula. We deﬁne the left free variables
f reel(π) and its right free variables f reer(π), as follows:
f reel(true) = f reel(false) = ∅
f reel(t1 = t2)
f reel(m : K)
f reel(¬π)
f reel(π1 ∧ π2) =
f reel(π1 ∨ π2)
f reel(∃v.π) = f reel(∀v.π)
f reer(π) is similar, but deﬁned with: f reer(t1 = t2) =
= var(t1)
= var(m)
= f reel(π)
= f reel(π1) ∪ f reel(π2)
= f reel(π1) ∪ f reel(π2)
= f reel(π) \ {v}
var(t2) and f reer(m : K) = var(K).
We now give semantics of an EF formula π w.r.t. a ground
substitution σ.
Deﬁnition 23. Let π be an EF formula and σ be a ground
substitution s.t. f reel(π) = ∅ and f reer(π) = dom(σ).
Then σ |=(cid:2)
π is deﬁned by:
σ |=(cid:2) true
σ (cid:16)|=(cid:2) false
σ |=(cid:2)
t1 = t2
σ |=(cid:2)
m : K
σ |=(cid:2) ¬π
π1 ∧ π2
σ |=(cid:2)
σ |=(cid:2)
π1 ∨ π2
σ |=(cid:2) ∃v.π
σ |=(cid:2) ∀v.π
iff
iff m ∈ F(Kσ)
iff
iff
iff
iff
iff
t1 = t2σ
σ (cid:16)|=(cid:2)
π
σ |=(cid:2)
π1 and σ |=(cid:2)
σ |=(cid:2)
π1 or σ |=(cid:2)
π2
∃t ∈ T + : σ |=(cid:2)
π[t/v]
∀t ∈ T + : σ |=(cid:2)
π[t/v]
π2
We deﬁne a translation T(φ, tr, IK) from a PS-LTL for-
mula φ, a trace tr and an initial intruder knowledge IK into
an EF formula:
Deﬁnition 24. Let φ be a PS-LTL formula, tr be an exe-
cution trace and IK be an initial intruder knowledge. Then
T(φ, tr, IK) is the EF formula resulting from applying the
three steps detailed in Table 4.
It can be shown that the transformation T terminates and
is conﬂuent given a ﬁnite trace, although we do not prove
that here. The last step (3) removes cases which are known
not to hold. The following lemma states that the translation
T is correct, i.e. it preserves the semantics of PS-LTL w.r.t.
semantics of EF.
Lemma 25. Let φ be a closed PS-LTL formula, tr be a
trace and IK be an initial intruder knowledge, and let σ be
a ground substitution such that var(tr) ⊆ dom(σ). Then
(cid:7)trσ, IK(cid:9) |= φ iff σ |=(cid:2) T(φ, tr, IK).
Transformation T provides the necessary input to the de-
cision algorithm D of the next section, to decide validity of
the original formula.
We call an EF formula existential if it is of the form
∃v1 . . .∃vn.ϕ, and ϕ does not contain any quantiﬁers (∀
nor ∃). In addition, we say that an EF formula φ is nega-
tion ground if every occurrence of a negated constraint
¬(m : T ) in φ satisﬁes that m is ground.
We now deﬁne the subset Φ of PS-LTL over which we
are going to decide symbolic validity:
Deﬁnition 26. Φ is the set of well-behaving PS-LTL for-
(cid:8)
= { φ | φ closed and T(φ, tr, IK) is existential
mulas: Φ
and negation ground for all tr, IK }
Φ is expressive enough to allow the speciﬁcation of sev-
In particular, every
eral interesting security properties.
property ϕ considered in Section 3.2 satisﬁes Aϕ ∈ Φ.
4.3 Deciding Validity
Let φ be a well-behaving PS-LTL formula and π =
∃v1...∃vn.ϕ be the result of the translation T(φ, tr, IK) for
some tr and IK. We transform ϕ into its disjunctive nor-
mal form ϕ =
i πj,i. Given a simple
j ψj, with ψj =
(cid:2)
(cid:3)
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
1. First, we repeatedly apply transformation (cid:19)·(cid:20)·, until none of the rules can be applied:
(cid:19)∃v.φ(cid:20)tr ⇒ ∃v.(cid:19)φ(cid:20)tr
(cid:19)∀v.φ(cid:20)tr ⇒ ∀v.(cid:19)φ(cid:20)tr
(cid:19)¬φ(cid:20)tr ⇒ ¬(cid:19)φ(cid:20)tr
(cid:19)φ1 ∧ φ2(cid:20)tr ⇒ (cid:19)φ1(cid:20)tr ∧ (cid:19)φ2(cid:20)tr
(cid:19)φ1 ∨ φ2(cid:20)tr ⇒ (cid:19)φ1(cid:20)tr ∨ (cid:19)φ2(cid:20)tr
(cid:19)Yφ(cid:20)(cid:7)(cid:9) ⇒ false
(cid:19)Yφ(cid:20)(cid:7)tr e(cid:9) ⇒ (cid:19)φ(cid:20)tr
(cid:19)φ1Sφ2(cid:20)(cid:7)(cid:9) ⇒ (cid:19)φ2(cid:20)(cid:7)(cid:9)
(cid:19)true(cid:20)tr ⇒ true
(cid:19)false(cid:20)tr ⇒ false
(cid:19)learn(m)(cid:20)tr ⇒ m : (K(tr) ∪ IK)
(cid:19)p(d1, . . . , dn)(cid:20)(cid:7)(cid:9) ⇒ false
(cid:19)φ1Sφ2(cid:20)(cid:7)tr e(cid:9) ⇒ (cid:19)φ2(cid:20)(cid:7)tr e(cid:9) ∨ ((cid:19)φ1(cid:20)(cid:7)tr e(cid:9) ∧ (cid:19)φ1Sφ2(cid:20)tr)
(cid:19)p(d1, . . . , dn)(cid:20)(cid:7)tr q(e1, . . . , em)(cid:9) ⇒ false if p (cid:16)= q or n (cid:16)= m
(cid:19)p(d1, . . . , dn)(cid:20)(cid:7)tr p(e1, . . . , en)(cid:9) ⇒ d1 = e1 ∧ ··· ∧ dn = en
(Note how a learn translates directly into a constraint. Also, notice that in each equality di = ei, var(di)∩ var(ei) =
∅, as we require that variables from the formula and from the trace do not clash.)
2. Repeatedly rewrite atoms ¬¬φ to φ, and move ¬ inside conjunctions and disjunctions using DeMorgan distributive laws.
3. Move universal quantiﬁers ∀ as far as possible to the right, and simplify universally quantiﬁed formulas over (possibly
negated) equalities and constraints, according to the following rules:
∀v.φ ⇒ φ if v is not free in φ
∀v.(φ1 ∧ φ2) ⇒ ∀v.φ1 ∧ ∀v.φ2
∀v.(φ1 ∨ φ2) ⇒ ∀v.φ1 ∨ ∀v.φ2 if v is not free in φ1 or v is not free in φ2
∀v.(v : K) ⇒ false (where K is a term set)
∀v.¬(v : K) ⇒ false (where K is a term set)
∀v.¬(v = t) ⇒ false
∀v.(v = t) ⇒ false
(In the last two rules, t is a term s.t. t (cid:16)= v since we require that var(v) = {v} ∩ var(t) = ∅.)
Table 4. Transformation T(φ, tr, IK)
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
¬
j
= R
) (where L
¬
j and R
constraint set CS, the procedure D(π, CS) we are about
to deﬁne either fails and returns false or succeeds and re-
turns a substitution σ that makes π true. For simplicity, in
the sequel we assume that each ψj contains just one pos-
itive equality Lj = Rj (where Lj and Rj denote the left
and right term in the equality, respectively), one negated
equality ¬(L
¬
¬
j denote the left
j
and right term in the negated equality, respectively), one
: Kj and one negated constraint
positive constraint mj
¬(m
¬
). The generalization to the case with sev-
j
eral (possibly negated) atomic formulas and with true and
false atoms is straightforward.
j ψj, with ψj = (Lj = Rj) ∧
Procedure 27. Let ϕ =
¬(L
¬
). Let CS be a
j
simple constraint set. Procedure D succeeds if all the fol-
lowing steps succeed, in which case it returns σ = ρρkσV
where ρ is given by Step 2, ρk is given by Step 3 and σV is
the substitution described in Section 4.1.
) ∧ (mj : Kj) ∧ ¬(m
¬
j
= R
: K
: K
¬
j
¬
j
¬
j
(cid:2)
1. Pick a disjunct ψj while possible, otherwise exit and
return false.
2. Solve Positive Equality: Take a relevant most general
uniﬁer ρ of Lj and Rj such that dom(ρ) ⊆ var(Lj)∪
var(Rj), i.e. Ljρ = Rjρ (If no mgu exists, go back to
Step 1).
3. Solve Positive Constraint: Apply P to (CS ∪ {mj :
Kj})ρ. Let ρ1, . . . , ρl be the partial solutions.
4. Pick ρk, k ∈ [1 . . . l], while possible, otherwise go
back to Step 1.
5. Solve Negated Constraint: Apply P to (CS ∪ {mj :
})ρρkσV (where σV is the substitution
Kj, m
given in Section 4.1). If it is solvable, go back to Step
4.
: K
¬
j
¬
j
¬
6. Solve Negated Equality: Check that L
j ρρkσV and
¬
j ρρkσV differ syntactically, otherwise go back to
R
Step 4.
Step 2 tries to solve the positive equality, ﬁnding a suit-
able uniﬁer ρ. (We need a uniﬁer and not a matching for
the general case of many equalities). In case ρ is not found,
then the disjunct does not hold , so we try a different one
going back to Step 1. Similarly, Step 3 solves the positive
constraint. Step 5 checks that both ρ, ρk and σV cause the
negated constraint to hold (this is based on Theorem 21). Fi-
nally, Step 6 checks that the negated equalities hold. Since
we consider (i) relevant uniﬁers for Step 2, of which there
are only ﬁnitely many, (ii) P only outputs a ﬁnite number
of solutions for Step 3 and 5, and (iii) we only need to per-
form a syntactic check for Step 6, then we can deduce that
procedure D terminates. The correctness of D is more chal-
lenging to establish.
Lemma 28. Let φ be a well-behaving PS-LTL formula,
(cid:7)Sc, IK, CS, tr(cid:9) be a state from Procedure 13, and π =
T(φ, tr, IK). Then:
1. D(π, CS) succeeds and returns a substitution σ im-
plies that σ |=(cid:2)
π, with trσ valid w.r.t. IK; and
2. σ |=(cid:2)
π, with trσ valid w.r.t.
IK implies that there
exists a substitution γ s.t. D(π, CS) succeeds and re-
turns γ.
Now we are ready to formulate the main result of this
section, which states that applying the transformation T of
Deﬁnition 24 and D deﬁned in Procedure 27 is both sound
and complete.
Theorem 29. Let Sc0 be a system scenario, IK be an ini-
tial intruder knowledge, φ be a closed PS-LTL formula
representing a security property with Aφ = ¬φ is a well-
behaving PS-LTL formula. Let also (cid:7)Sc, IK, CS, tr(cid:9) be
a state from Procedure 13 and π = T(Aφ, tr, IK). Then
D(π, CS) fails iff (cid:7)tr, IK(cid:9) |= φ.
Proof. D(π, CS) fails iff, by Lemma 28, ∀σ : σ (cid:16)|=(cid:2)
T(Aφ, tr, IK). By Lemma 25, (cid:7)trσ, IK(cid:9) (cid:16)|= Aφ. By deﬁ-
nition, this is equivalent to (cid:7)trσ, IK(cid:9) |= φ. So, we obtained
that ∀σ : (cid:7)trσ, IK(cid:9) |= φ, which by Deﬁnition 17 of sym-
bolic validity is (cid:7)tr, IK(cid:9) |= φ.
4.4 Integrating PS-LTL to Constraint
Solving
Procedure 13 outputs execution traces which are in-