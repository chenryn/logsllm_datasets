title:MIRAGE: Succinct Arguments for Randomized Algorithms with Applications
to Universal zk-SNARKs
author:Ahmed E. Kosba and
Dimitrios Papadopoulos and
Charalampos Papamanthou and
Dawn Song
MIRAGE: Succinct Arguments for 
Randomized Algorithms with Applications 
to Universal zk-SNARKs
Ahmed Kosba, Alexandria University; Dimitrios Papadopoulos, 
Hong Kong University of Science and Technology; Charalampos 
Papamanthou, University of Maryland; Dawn Song, UC Berkeley
https://www.usenix.org/conference/usenixsecurity20/presentation/kosba
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.MIRAGE: Succinct Arguments for Randomized Algorithms with Applications to
Universal zk-SNARKs
Ahmed Kosba∗
Alexandria University
Dimitrios Papadopoulos
HKUST
Charalampos Papamanthou†
University of Maryland
Dawn Song
UC Berkeley
Abstract
1
Introduction
The last few years have witnessed increasing interest in the de-
ployment of zero-knowledge proof systems, in particular ones
with succinct proofs and efﬁcient veriﬁcation (zk-SNARKs).
One of the main challenges facing the wide deployment of
zk-SNARKs is the requirement of a trusted key generation
phase per different computation to achieve practical proving
performance. Existing zero-knowledge proof systems that do
not require trusted setup or have a single trusted preprocess-
ing phase suffer from increased proof size and/or additional
veriﬁcation overhead. On the other other hand, although uni-
versal circuit generators for zk-SNARKs (that can eliminate
the need for per-computation preprocessing) have been intro-
duced in the literature, the performance of the prover remains
far from practical for real-world applications.
In this paper, we ﬁrst present a new zk-SNARK system
that is well-suited for randomized algorithms—in particular
it does not encode randomness generation within the arith-
metic circuit allowing for more practical prover times. Then,
we design a universal circuit that takes as input any arith-
metic circuit of a bounded number of operations as well as a
possible value assignment, and performs randomized checks
to verify consistency. Our universal circuit is linear in the
number of operations instead of quasi-linear like other univer-
sal circuits. By applying our new zk-SNARK system to our
universal circuit, we build MIRAGE, a universal zk-SNARK
with very succinct proofs—the proof contains just one ad-
ditional element compared to the per-circuit preprocessing
state-of-the-art zk-SNARK by Groth (Eurocrypt 2016). Fi-
nally, we implement MIRAGE and experimentally evaluate
its performance for different circuits and in the context of
privacy-preserving smart contracts.
∗ A major part of this work was done while Ahmed Kosba was a post-
doctoral scholar at UC Berkeley.
† Part of this work was done while Charalampos Papamanthou was with
Oasis Labs.
Zero-knowledge proofs are a cryptographic primitive that en-
able an untrusted prover to prove the knowledge of a secret
witness that satisﬁes certain properties to a skeptical veri-
ﬁer. This can be quite useful in many applications including
authentication, privacy-preserving computations and others.
Although the concept of zero-knowledge proofs was intro-
duced multiple decades ago, it only started to get much atten-
tion in practice after recent advances in several aspects [1–8],
which led to efﬁcient implementations for a primitive called
zk-SNARKs (zero-knowledge succinct non-interactive ar-
guments of knowledge). zk-SNARKs provide constant-size
proofs and veriﬁcation that is only linear in the size of pub-
lic statement being proven, regardless of how expensive the
computation is. The promising performance properties of
zk-SNARKs led to the development of various tools and im-
proved back ends [5, 9–12], and enabled different kinds of
applications including privacy-preserving transactions, certiﬁ-
cate validation, image authentication and others [13–18].
However, using zk-SNARKs with constant-size proofs
comes at a cost. For practicality reasons, such constructions
typically resort to non-standard cryptographic assumptions
and require a trusted key generation phase for each differ-
ent computation. A compromised trusted setup process could
lead to parties providing proofs for false statements while
undetected. To avoid such problems in practice, distributed
protocols are used for CRS generation [19, 20], which will be
expensive to repeat for every type of computation. These draw-
backs have led to different lines of work on zero-knowledge
proofs attempting to solve some or all of these issues, while
providing good performance, e.g., [21–28]. While these works
manage to alleviate the drawbacks of zk-SNARKs, they are
not as efﬁcient as zk-SNARKs with respect to the veriﬁca-
tion overhead and proof size. For example, the proof size of
these schemes can be tens or hundreds of kilobytes, while a
typical zk-SNARK proof is only between 128 and 288 bytes
depending on the assumptions [2, 7].
These issues led to another line of work on universal zk-
USENIX Association
29th USENIX Security Symposium    2129
SNARK systems [4, 29–31], which aim to reach a middle
ground to avoid the trusted setup per computation challenge,
while maintaining the succinctness and efﬁcient veriﬁcation
guarantees provided by efﬁcient zk-SNARK constructions.
These systems still require a trusted setup, but such setup is
done once for computations of a particular class, e.g., com-
putations that have a certain bound on the number of their
operations. In the following section, we provide a brief dis-
cussion of the existing universal zk-SNARK systems.
Universal zk-SNARK systems. There are two ﬂavors of uni-
versality in the context of zk-SNARK systems presented in
literature. The ﬁrst is universality with respect to the common
reference string (CRS), meaning that a CRS can be adapted
without ﬁxing a circuit. The other is the universality of the
circuit itself, in which a circuit receives the computation being
veriﬁed as part of the input itself, and processes its logic.
While the ﬁrst approach sounds more ﬂexible and does not
require ﬁxing any circuit, the existing approaches under that
category have practical limitations. For example, the tech-
nique by Groth et al. [29] requires a quadratic CRS for sup-
porting universal SNARKs. In a more recent work, Sonic [31]
presented a more practical universal zk-SNARK with updat-
able CRS, however (in “unhelped” mode) it increases the
proof size by a factor of 7×, the veriﬁcation effort by a factor
of 4× and the prover’s effort by a factor of 50× (assuming
Groth’s zk-SNARK [7] as a baseline). Note that Sonic also
provides a helped mode that has less proof computation over-
head and a shorter proof, but this mode requires adding an
untrusted third party to help with the computations.
The advantages of the universal circuit approach is main-
taining the succinct proof and the small number of pairings in
the veriﬁcation as enabled by zk-SNARKs, however, the most
notable universal circuit approach, namely vnTinyRAM [4]
is not efﬁcient enough to support applications in practice.
vnTinyRAM’s approach was shown to signiﬁcantly increase
the circuit size and prover’s effort by multiple orders of mag-
nitude [10].
In this paper, we aim to address such practical limitations by
building MIRAGE, a new universal zk-SNARK. In contrast to
common belief, we show that the concept of universal circuits
can be brought to practicality, through a modiﬁed zk-SNARK
protocol and careful design of the universal circuit. While
there is a cost to be paid for being universal, we managed
to apply our system to applications that could beneﬁt from
our construction, such as privacy-preserving auctions and
crowdfunding for a small number of participants. MIRAGE
can be further scaled up using recent systems like DIZK [12].
Technical Highlights. Next, we provide a brief overview of
some technical aspects of MIRAGE.
Separated zk-SNARKs. We ﬁrst explore how to enable efﬁ-
cient randomized checks in zk-SNARK circuits. Randomized
checks can make the veriﬁcation logic much faster than regu-
lar veriﬁcation circuits in cases like permutation veriﬁcation
and others. Informally, while it is possible to ask the prover
to generate randomness by committing to the witness, do-
ing this naively would lead to having additional expensive
commitment logic in the circuit. To avoid that, we introduce
separated zk-SNARKs that separate the witness values into
ones that do not depend on the randomness and ones that do.
Then the randomness is produced by committing to the ﬁrst
set of values out of the circuit and using this randomness to
produce the second set of values. Due to this separation of the
witness, our approach only increases the proof by one group
element, and the veriﬁcation effort by one pairing and two
hash function calls, when compared to Groth’s zk-SNARK [7].
Our protocol is not only useful in a universal-circuit context
(as explained below), but also from a complexity theory per-
spective, comprising an efﬁcient zk-SNARK for the MA
complexity class.
Linear-Size Universal Circuits. A universal circuit is a circuit
that receives the program to verify as input, besides the input
values. One essential element of the veriﬁcation of universal
circuits is checking permutations to ensure that variables with
the same labels have consistent values across the circuit. Pre-
vious approaches, e.g., vnTinyRAM [4], use permutation net-
works which has O(nlogn) overhead. We build a linear-size
universal circuit based on an O(n) permutation veriﬁcation
circuit. Informally, we use the fact that two vectors v and w
of size n are a permutation of each other if and only if the
polynomials ∏(x− vi) and ∏(x− wi) are equal, which can
be veriﬁed by checking equality at a random point r. Fur-
thermore, in order to further reduce the prover’s effort, we
address different circuit design issues, and present a circuit
that has better utilization than previous work. Our ﬁnal univer-
sal zk-SNARK, MIRAGE, is derived by applying our separated
zk-SNARK on our randomized, linear-size, universal circuit.
Applications in Privacy-Preserving Smart Contracts. We uti-
lize MIRAGE in applications that require very succinct proofs
and efﬁcient veriﬁcation, such as blockchain applications. We
evaluate MIRAGE in the context of privacy-preserving smart
contracts (e.g., HAWK [16]) to address the trusted key gener-
ation per contract issue. Using MIRAGE, a universal veriﬁca-
tion key will be hardcoded on the blockchain, and for every
new computation, an untrusted computation speciﬁer would
only provide 32 bytes encoding the computation to be veri-
ﬁed to a custom contract. Verifying MIRAGE’s proof on the
chain would be very similar to verifying zk-SNARK proofs,
which has been already implemented on Ethereum (our veri-
ﬁer would only be 1.4× expensive). Besides the evaluation
of this scenario, we present detailed evaluation for different
kinds of circuits.
Our contributions. We now summarize our contributions:
• We introduce separated zk-SNARKs, a zk-SNARK protocol
that allows using randomized checks efﬁciently in circuits,
which can be useful for both universal and non-universal
contexts. This only adds one group element to the proof
2130    29th USENIX Security Symposium
USENIX Association
in the generic group model, and adds one more pairing
operation to the pairing operations done by the veriﬁer in
addition to other negligible operations in practice.
• We design a more efﬁcient universal circuit that provides
much better performance compared to the state-of-the-art
by using random checks. Given a bound N on the number
of operations (additions and multiplications), our universal
circuit is linear O(N) instead of O(N logN).
• We build a new universal zk-SNARK, MIRAGE, by combin-
ing the above and we evaluate it in the context of privacy-
preserving smart contracts, e.g., HAWK [16], addressing
the trusted setup per contract problem that limits its usage
in practice while maintaining veriﬁcation efﬁciency.
Limitations. While MIRAGE signiﬁcantly reduces the uni-
versal circuit overhead in comparison with vnTinyRAM and
enables a higher scale of applications, the proof computation
overhead is notably more expensive than the non-universal
SNARK approach (See Section 6). Additionally, although our
system provides a more succinct proof and a more efﬁcient
veriﬁer than Sonic, it does not provide updatable CRS.
1.1 Related work
Here, we discuss the existing zero-knowledge proof systems.
In addition, since our system is evaluated in the context of
privacy-preserving smart contracts, we provide a brief back-
ground on smart contracts and their challenges.
Zero-knowledge proof systems. Table 1 gives an overview
of representative zero knowledge proof constructions in the
space. The constructions can be classiﬁed into different cate-
gories with respect to the setup requirements:
• Trusted setup per computation: This most notably includes
the construction proposed by Gennaro et al. using quadratic
arithmetic programs
[1]. This construction was imple-
mented, improved and extended in several later works [2, 4,
7, 8]. A clear advantage of this approach is that the proof
size is succinct/constant-size and the veriﬁcation overhead
depends only on the size of the statement being proven. This
made this kind of zero knowledge proofs more inviting for
blockchain applications [13, 14, 16].
• Transparent setup: Several constructions were proposed to
eliminate the trusted setup requirement of the previous con-
structions. These include 1) Discrete log-based techniques,
such as Bulletproofs [22] and the previous work by Bootle et
al. [33]. 2) Interactive oracle proofs techniques [34], such as
Ligero [21], zk-STARKs [25] Aurora [26] and more recently
Virgo [28]. These techniques rely on symmetric cryptogra-
phy and are plausibly conjectured to have post-quantum
security. 3) Interactive proof-based techniques [35]. Such
techniques build upon several earlier works [36–38]. An ex-
ample is the Hyrax system by Wahby et al. [24]. 4) Lattice-
based techniques, such as the work by Baum et al. [32].
• Universal trusted setup: This includes other interactive proof-
based techniques, such as the techniques proposed by Zhang
et al. [23], and Xie et al. [27]. These techniques besides
all techniques in the second category increase the veriﬁca-
tion overhead to an extent that might not be suitable for
applications where proof size and veriﬁcation overhead
are a bottleneck. To avoid the trusted setup per computa-
tion problem while maintaining the veriﬁcation efﬁciency,
vnTinyRAM [4] introduced a universal circuit that accepts
the program to be veriﬁed besides the statement. This was
shown to increase the proving cost by orders of magni-
tude compared to the non-universal approach [10]. Groth et
al. introduced a universal zk-SNARK with updatable com-
mon reference strings [29], however the size of the CRS in
their setting is quadratic making it not practical. Recently,
LegoUAC, a zk-SNARK with a linear universal CRS was in-
troduced [30], but it has polylogarithmic proofs. On the other
hand, Sonic provides an updatable zk-SNARK with constant
size proofs [31]. Sonic can run in two modes: helped and
unhelped. In the helped mode, an additional untrusted party
helps with making both proof computation and veriﬁcation
more efﬁcient. Table 2 provides a more detailed comparison
between systems under the universal trusted setup category
with constant proof sizes.
Comparison with vnTinyRAM [4]. MIRAGE’s circuit is linear
in the number of supported operations, while vnTinyRAM’s
circuit is quasi-linear. Note that vnTinyRAM’s construction
accepts a program and a bound T on the number of execu-
tion steps, while our construction assumes that the desired
computation is represented as an arithmetic circuit or a set
of constraints. While the model is different, the same bound
in the complexity comparison of the circuit sizes is used, as-
suming T = Θ(N). In Table 2, the concrete complexity of our
prover is measured in terms of the number of additions and
multiplications, but for vnTinyRAM, measuring the concrete
complexity is different as it depends on the executed branches
during runtime. The cost is estimated conservatively based
on the per-cycle gate count in vnTinyRAM [4], assuming the
generic group model is used. More comparison details are in
Section 5.3.
Comparison with Sonic [31]. We mainly consider the un-
helped mode of Sonic, as the availability of additional helper