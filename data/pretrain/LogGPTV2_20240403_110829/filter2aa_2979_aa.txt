XStream 安全研究笔记
1
XStream 安全研究笔记
Created
Tags
  ⼀、简介
  近期，XStream组件频繁爆出安全漏洞，本来打算是⼀年前看XStream组件的，后来因为种种原因⼀直没有看，现在分别爆出了：
CVE-2020-26217、CVE-2020-26258、CVE-2020-26259，打算重新回过头再看看XStream的代码。
  XStream的架构主要由四个模块组成，分别是：
Converters
Drivers
Context
Facade
  其中Converters是XStream中的核⼼模块，主要是负责XML到Java对象的转换，Java对象到XML数据格式的转换，XStream内置了
许多Converters，其中内置了⼀个DefaultConverters，它是使⽤反射来加载XML中指定的对象的。
  Drivers是负责从“流”中直接读取并操作XML，有两个接⼝分别是HierarchicalStreamWriter 和 HierarchicalStreamReader 分别负责将
Java对象序列化到XML数据格式以及从XML数据格式反序列化到Java对象。
  Context是序列化和反序列化过程中所必须的⼀个对象，它会根据操作创建MarshallingContext 或 UnmarshallingContext，相关过程
将会从对应的Context中查找对应的Converters去完成相应的转换操作。
  最后介绍了⼀下XStream的外观模式
The main XStream class is typically used as the entry point. This assembles the necessary 
components of XStream (as described above; Context, Converter, Writer/Reader and ClassMapper) 
and provides a simple to use API for common operations.
⼆、正向分析
CVE-2020-26217 
远程代码执⾏漏洞
CVE-2020-26258
服务端请求伪造漏洞
CVE-2020-26259
任意⽂件删除漏洞
@December 14, 2020 5:59 PM
XStream 安全研究笔记
2
受限于篇幅和精⼒，我们只会深度分析其中⼀个漏洞，因为漏洞都是相似的，我们会总结⼀些相似性，这样其他的漏洞也可以实现快
速理解。
我们将深度分析CVE-2020-26258（服务端请求伪造）这个漏洞，下⾯开始漏洞分析。
Proof of Concept: 
      0 
            http://127.0.0.1:1337/internal 
        0 
我们将在初始化XStream对象并开启反序列化流程的的时候，不启⽤安全上下⽂，这样不会被⽩名单拦截，我们⿎励各位同学⾃⼰动
⼿调试，所以不会详细的描述每⼀次的调⽤代码，但会给出关键调⽤。
XStream.class 
public Object fromXML(String xml) { 
    return this.fromXML((Reader)(new StringReader(xml)));  0) { 
        result = this.parentStack.peek(); 
XStream 安全研究笔记
4
        if (result != null && !this.values.containsKey(result)) { 
            this.values.put(result, parent); 
        } 
    } 
    String attributeName = this.getMapper().aliasForSystemAttribute("reference"); 
    String reference = attributeName == null ? null : this.reader.getAttribute(attributeName); 
    boolean isReferenceable = this.getMapper().isReferenceable(type); 
    Object currentReferenceKey; 
    if (reference != null) { 
        currentReferenceKey = isReferenceable ? this.values.get(this.getReferenceKey(reference)) : null; 
        if (currentReferenceKey == null) { 
            ConversionException ex = new ConversionException("Invalid reference"); 
            ex.add("reference", reference); 
            ex.add("referenced-type", type.getName()); 
            ex.add("referenceable", Boolean.toString(isReferenceable)); 
            throw ex; 
        } 
        result = currentReferenceKey == NULL ? null : currentReferenceKey; 
    } else if (!isReferenceable) { 
        result = super.convert(parent, type, converter); 
    } else { 
        currentReferenceKey = this.getCurrentReferenceKey(); 
        this.parentStack.push(currentReferenceKey); 
        Object localResult = null; 
        try { 
            localResult = super.convert(parent, type, converter); 反射创建java.util.Map对象
AbstractCollectionConverter.class 
protected Object createCollection(Class type) { 
    ErrorWritingException ex = null; 
    Class defaultType = this.mapper().defaultImplementationOf(type); 
    try { 
        return defaultType.newInstance(); >> 16); 
    } 
NativeString.class 
public int hashCode() { 
        return this.getStringValue().hashCode(); <------- point 
    } 