## 使用Postgres，MobilityDB和Citus大规模(百亿级)实时分析GPS轨迹    
### 作者    
digoal    
### 日期    
2020-11-17    
### 标签    
PostgreSQL , sharding , citus , 移动对象 , mobilityDB      
----    
## 背景    
https://github.com/MobilityDB/MobilityDB  
https://www.citusdata.com/download/  
https://www.postgresql.org/  
https://www.citusdata.com/blog/2020/11/09/analyzing-gps-trajectories-at-scale-with-postgres-mobilitydb/  
GPS已成为我们日常生活的一部分。GPS在用于导航的汽车中，在智能手机中可以帮助我们找到位置，最近，GPS一直在帮助我们避免被COVID-19感染。管理和分析流动性轨迹是我工作的核心。我在布鲁塞尔自由大学的团队专门研究移动数据管理。我们为时空轨迹建立了一个开源数据库系统，称为MobilityDB。MobilityDB在Postgres数据库及其空间扩展PostGIS中增加了对时空对象的支持。如果您还不熟悉时空轨迹，请放心，我们将简要介绍公共交通工具的一些运动轨迹。  
我团队的项目之一是开发MobilityDB的分布式版本。这是我们与Postgres的Citus扩展以及Citus工程团队取得联系的地方。这篇文章介绍了运动轨迹数据的分布式查询处理的问题和解决方案。GPS是轨迹数据的最常见来源，但是本文中的想法也适用于其他位置跟踪传感器收集的运动轨迹，例如飞机的雷达系统和船舶的AIS系统。  
首先，让我们探索轨迹数据管理的主要概念，以便您可以了解如何分析地理空间运动轨迹。  
下面的动画gif显示了靠近广告广告牌的公交车1的地理空间轨迹。如果您想评估广告牌对公交车乘客的可见度，该怎么办？如果您可以对所有广告牌和车辆执行此操作，那么您将能够提取有趣的见解，以便广告代理商为广告牌定价，并为希望优化其广告系列的广告客户提供信息。  
![公共交通工具的轨迹](https://www.citusdata.com/assets/images/blog/1_smartads.gif)  
在整个这篇文章中，我将使用地图可视化布鲁塞尔的公交车轨迹和广告广告牌，因此您可以学习如何查询公交车乘客在哪里看到广告广告牌（以及显示多长时间）。背景图由OpenStreetMap提供。  
在上面的动画gif中，我们简单地假设，如果公共汽车到广告牌30米以内，那么它对乘客是可见的。当公交车位于广告牌30米以内时，动画中的“可见性”通过广告牌周围的黄色闪烁指示。  
如何使用数据库查询来衡量广告牌对行驶中的公交车的可见性？  
让我们准备一个玩具PostGIS数据库，该数据库最少地表示以前的gif动画中的示例，然后逐步开发一个SQL查询，以评估行驶中的公共汽车上的乘客对广告牌的可见性。  
如果您不熟悉PostGIS，则它可能是Postgres最受欢迎的扩展，用于存储和查询空间数据。就本文而言，您需要知道的是PostGIS扩展了Postgres的数据类型，包括几何点，线和面。PostGIS还定义了一些功能，用于测量地理特征之间的距离并测试拓扑关系（例如交叉点）。  
在下面的SQL代码块中，首先创建PostGIS扩展。然后，您将创建两个表：gpsPoint和billboard。  
```  
CREATE EXTENSION PostGIS;  
CREATE TABLE gpsPoint (tripID int, pointID int, t timestamp, geom geometry(Point, 3812));  
CREATE TABLE billboard(billboardID int, geom geometry(Point, 3812));  
INSERT INTO gpsPoint Values  
(1, 1, '2020-04-21 08:37:27', 'SRID=3812;POINT(651096.993815166 667028.114604598)'),  
(1, 2, '2020-04-21 08:37:39', 'SRID=3812;POINT(651080.424535144 667123.352304597)'),  
(1, 3, '2020-04-21 08:38:06', 'SRID=3812;POINT(651067.607438095 667173.570340437)'),  
(1, 4, '2020-04-21 08:38:31', 'SRID=3812;POINT(651052.741845233 667213.026797244)'),  
(1, 5, '2020-04-21 08:38:49', 'SRID=3812;POINT(651029.676773636 667255.556944161)'),  
(1, 6, '2020-04-21 08:39:08', 'SRID=3812;POINT(651018.401101238 667271.441380755)'),  
(2, 1, '2020-04-21 08:39:29', 'SRID=3812;POINT(651262.17004873  667119.331513367)'),  
(2, 2, '2020-04-21 08:38:36', 'SRID=3812;POINT(651201.431447782 667089.682115196)'),  
(2, 3, '2020-04-21 08:38:43', 'SRID=3812;POINT(651186.853162155 667091.138189286)'),  
(2, 4, '2020-04-21 08:38:49', 'SRID=3812;POINT(651181.995412783 667077.531372716)'),  
(2, 5, '2020-04-21 08:38:56', 'SRID=3812;POINT(651101.820139904 667041.076539663)');  
INSERT INTO billboard Values  
(1, 'SRID=3812;POINT(651066.289442793 667213.589577551)'),  
(2, 'SRID=3812;POINT(651110.505092035 667166.698041233)');  
```  
该数据库在下面的地图中可视化。您可以看到gpsPoint表具有两个公交车出行的点，蓝色出行1和红色出行2。在表中，每个点都有一个时间戳。这两个广告牌是地图上的灰色菱形。  
![公交gps点地图](https://www.citusdata.com/assets/images/blog/2_toyDB.jpg)  
下一步是查找公交车距广告牌30米以内的位置，以及持续时间，即移动公交车距广告牌30米以内的时间。  
```  
SELECT tripID, pointID, billboardID  
FROM gpsPoint a, billboard b  
WHERE st_dwithin(a.geom, b.geom, 30);  
--1    4    1  
```  
上面的此PostGIS查询不能解决问题。是的，该条款中的条件WHERE可以找到距离广告牌30米以内的GPS点。但是PostGIS查询不会告诉您此事件的持续时间。  
此外，假设没有给出行程1（蓝色行程）中的点4 。然后，该查询将返回null。该查询的问题在于，它不处理公交车行程的连续性，即查询不处理公交车的运动轨迹。  
我们需要从给定的GPS点中重建连续的运动轨迹。以下是另一个PostGIS查询，该查询既可以找到广告牌对公交车乘客的可见性的位置，也可以找到广告牌对公交车乘客可见的持续时间。  
```  
WITH pointPair AS(  
  SELECT tripID, pointID AS p1, t AS t1, geom AS geom1,  
    lead(pointID, 1) OVER (PARTITION BY tripID ORDER BY pointID) p2,  
    lead(t, 1) OVER (PARTITION BY tripID ORDER BY pointID) t2,  
    lead(geom, 1) OVER (PARTITION BY tripID ORDER BY pointID) geom2  
  FROM gpsPoint  
), segment AS(  
  SELECT tripID, p1, p2, t1, t2,  
    st_makeline(geom1, geom2) geom  
  FROM pointPair  
  WHERE p2 IS NOT NULL  
), approach AS(  
  SELECT tripID, p1, p2, t1, t2, a.geom,  
    st_intersection(a.geom, st_exteriorRing(st_buffer(b.geom, 30))) visibilityTogglePoint  
  FROM segment a, billboard b  
  WHERE st_dwithin(a.geom, b.geom, 30)  
)  
SELECT tripID, p1, p2, t1, t2, geom, visibilityTogglePoint,  
  (st_lineLocatePoint(geom, visibilityTogglePoint) * (t2 - t1)) + t1 visibilityToggleTime  
FROM approach;  
```  
是的，上述PostGIS查询是一个相当复杂的查询。我们将查询分为多个公用表表达式CTE，以使其可读。在Postgres中，CTE使您能够“命名”子查询，从而使编写包含多个步骤的SQL查询更加容易。  
pointPair第1-7行中的第一个CTE使用window函数lead，以便将属于同一总线行程的每对连续点打包到一个元组中。  
这是segment第7-12行中第二个CTE的准备工作，然后将两个点与一个线段相连。此步骤可以看作是每两个GPS点之间的路径的线性插值。  
这两个CTE的结果可以在下面的地图中显示：  
![CTE结果图](https://www.citusdata.com/assets/images/blog/3_segments.jpg)  
然后，第三个CTE接近12-18行，找到了公交车起/停的位置，离广告牌30米以内。为此，可以在广告牌周围绘制一个直径30米的圆环，并将其与公交车轨迹的各部分相交。因此，我们在下面的地图中获得了用黑叉标记的两个点。  
![巴士起点/终点地图](https://www.citusdata.com/assets/images/blog/4_visibilityTogglePoints.jpg)  
较早的PostGIS查询的最后一步，第19-22行，使用线性参考来计算这两个点的时间，即假设每个线段2的速度恒定。  
![公交时间参考图](https://www.citusdata.com/assets/images/blog/5_visibilityToggleTime.jpg)  
练习：尝试找到一种更简单的方式来表示先前显示的PostGIS查询。我不能 :-)  
PostGIS查询必须是如此复杂，因为它编写了两个非平凡的概念：  
连续运动轨迹：尽管GPS数据是离散的，但我们必须重建连续运动轨迹。  
时空接近度：连续运动轨迹用于查找公交车距广告牌30米以内的位置和时间（即时空）。  
给您带来的好消息是MobilityDB可以帮助您更轻松地分析这些类型的运动轨迹。MobilityDB是PostgreSQL和PostGIS的扩展，已将这些时空概念实现为Postgres中的自定义类型和功能。  
让我们看看如何使用MobilityDB更简单地表达此PostGIS查询。  
MobilityDB：用于Postgres和PostGIS的移动对象数据库系统  
这是以前的PostGIS查询在MobilityDB中的表达方式。  