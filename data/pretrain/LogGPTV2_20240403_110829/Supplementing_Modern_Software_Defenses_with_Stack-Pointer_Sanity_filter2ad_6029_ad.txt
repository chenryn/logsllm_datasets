198.0
10.8
16.1
1.4
45.9
0.8
0.9
8.8
159.0
14.1
2.6
37.0
54.2
33.9
17.9
0.5
46.0
overhead in Table 3 represents the maximum stack size overhead
when compared to the stack utilization for programs compiled using
mainline LLVM-clang 3.7.0. As expected, mean memory overhead
scales linearly with respect to the alignment.
Most functions require frame sizes smaller than 128 bytes (Ta-
ble 7). In case of mcf, most functions require a frame size much
smaller than 128 bytes (16 to 32 bytes). Therefore, it shows the
highest overhead.
6.3 Entry Points
We extracted entry points for the SPEC CPU2006 programs, and
for each entry point we implemented a wrapper to acclimate the
stack pointer. While most programs did not have any entry point
other than the main function, some C++ programs listed in Ta-
ble 5 contained global objects that needed non-default construction,
destruction or both. These entry points were invoked from libc.
Overall, we found the number of entry points to be a very small
fraction of the total number of functions in a program.
123Table 4: Distribution of frame size for SPEC CPU2006 INT and FP benchmarks. The numbers indicate the number of times a
frame of a particular size was created during execution.
perlbench
bzip2
mcf
gobmk
hmmer
sjeng
libquantum
h264ref
astar
omnetpp
xalancbmk
milc
namd
dealII
soplex
povray
lbm
sphinx3
4096
986,731
116,268
0
59,197,274
6,604,171
688,658,543
0
0
3
0
1,243
0
459,648
75
2
17
0
136,365
Table 5: Non-main entry points for C++ programs in SPEC
CPU2006.
Table 6: Summary of gadgets and SP-Update Instructions in
Coreutils and Binutils.
Program
xalancbmk
omnetpp
astar
h264ref
dealII
povray
Total
Functions
49635
3503
213
590
18725
2013
# Entry
Points
109
18
2
8
22
1
Percentage
0.22
0.51
0.94
1.36
0.12
0.05
Suite
binutils
coreutils
libc.so
Total # gadgets Absolute
15
7
3
170265
71887
36515
SPU
Relative
SPU
2406
2571
845
6.4 Frame Size Distribution
Function frame size distribution for common programs is presented
in Table 7, and frequency of frames of differently-sized brackets
for SPEC CPU2006 programs are presented in Table 4. Frequency
distribution of the frame size offers vital information in deciding
the optimal alignment size. The main consumers of stack space are
local variables in functions. As a software development practice,
large objects are typically created on the heap, and not on the stack.
Therefore, more than 96% of all functions require under 256 bytes
of stack frame. As a result, partitioning is not required for most
functions when alignment is 256 bytes or higher.
Optimal alignment. Optimal alignment can vary from program
to program. However, we found n=256 to offer least performance
overhead and covers most functions in a program without the need
to partition. Given the low cost of memory, we believe the average
memory overhead of 32.6% is reasonable.
6.5 Attack Surface Ananlysis
We examined the number of relative SP-update gadgets SPIglass can
eliminate in binutils, coreutils and libc. The results are presented
in Table 6. Relative SP-update instructions are far more prevalent
than absolute SP-update instructions. Note that SPIglass can de-
fend against attacks that utilize relative SP-update instructions to
perform intra-stack pivoting, whereas EMET and PBlocker cannot.
Metasploit exploits: Furthermore, we analyzed the usage of SP-
update instructions in the exploits in the Metasploit [2] framework.
Results for CVEs reported between 2013 and 2016 are tabulated
in Table 2. For vulnerabilities with CVEs between 2010 and 2016,
we found 84 exploits that used sub esp, offset relative SP-
update instruction whereas 60 exploits utilized absolute SP-update
instructions xchg eax, esp and pop esp to carry out the exploit.
SPIglass can successfully defend against attacks that utilize relative
SP-update instructions in pivoting.
7 DISCUSSION
7.1 Effect on Recursion
While SPIglass does limit the total possible depth in non-tail recur-
sion, it has no impact on tail recursion. During tail recursion, the
compiler does not create a separate function frame for each instance
of recursion. Instead, it reuses the same stack frame for all recursive
invocations, introducing unconditional jmp instructions to mimic a
recursive call. Because the same stack frame is reused, the frame
size overhead introduced by SPIglass does not accumulate over all
the instances of recursion.
124Table 7: Percentage distribution of frame size for 49.0a1, coreutils 8.25, binutils 2.26 and OpenSSL 1.1.0.
size ≥ 2048
1024 ≤ size < 2048
512 ≤ size < 1024
128 ≤ size < 256
256 ≤ size < 512
Program size < 128
Firefox
Coreutils
Binutils
OpenSSL
92.33
80.25
92.3
92.74
4.52
10.34
5.58
4.38
1.98
5.96
1.47
1.21
0.80
1.47
0.31
0.47