100%
100%
8
8
8
8
16
8
8
8
8
8
8
8
0
0
0
0
0
0
0
13
21
29
29
29
29
30
30
30
30
30
30
42
42
42
42
42
42
42
61.9%
72.4%
78.4%
78.4%
64.4%
78.4%
78.9%
78.9%
78.9%
78.9%
78.9%
78.9%
100%
100%
100%
100%
100%
100%
100%
96
624
86.7%
Table 4: The overall result of ECMO on rehosting the Linux
kernel of Netgear Devices.
Device Name
Kernel Version
Images
# of Peripherals Transplanted
Shell
R6250
R6300v2
R6400
R6700
R6900
Overall
2.6.36
2.6.36
2.6.36
2.6.36
2.6.36
-
21
22
20
16
16
95
21
22
20
16
16
95
15
19
20
16
16
86
the shell for 86 images while the left 9 cannot be rehosted due to
the same root file system problem.
Answer to RQ2: ECMO can rehost the Linux kernel of em-
bedded devices from 20 kernel versions and 37 (32 in Open-
WRT and 5 in Netgear) device models. Peripherals can be
transplanted to all the Linux kernels while 87.1% (710/815)
Linux kernels can be successfully rehosted (i.e., launch the
shell).
5.4 Reliability and Stability (RQ3)
We use the LTP (Linux Test Project [8]) testsuite to evaluate the
reliability and stability of the rehosted kernel. In total, there are
Table 5: The category of the failed syscall test cases. After
installing the peripheral driver for Ethernet device, the 15
failed cases due to the network are passed and the total
failed ones will decrease from 66 to 51.
Category of Failed cases
Testing the bug or vulnerability of Linux kernel
Network is not enabled
The function is not implemented
Others
Total
Number
16
(15)
25
10
66 (51)
1, 257 test cases for system calls. Among them, 148 are skipped as
the testing environment (e.g., the CPU architecture and the build
configuration) does not meet the requirement. For the left 1, 109
test cases, 1, 043 passed while the left 66 ones failed.
We further analyze the reason for the failed test cases. Table 5
lists the category of the reason. Among them, 15 cases are due to
the lack of network devices. This is expected since our system does
not add the support of network device initially. However, all the
15 test cases are passed after installing the Ethernet device driver
with kernel modules on the rehosted Linux kernel (Section 5.5.1).
Also, 16 cases aim to test whether the Linux kernel fixes a bug or
vulnerability. For instance, the test case (timer_create03 [9]) is to
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea743Linux Kernel
Crash
 Trace
    alloc_skb_with_frags
    0xc022d16c BL 0xc022cfd0(__alloc_skb) 
    /*crash in function __alloc_skb*/
    r0: 0xffffff40 
[] (__alloc_skb) from []
[] (alloc_skb_with_frags) from []
[] (sock_alloc_send_pskb) from [] 
[] (unix_stream_sendmsg) from []
    sock_alloc_send_pskb
    0xc0227cac BL 0xc022d110
    r0: 0xffffff40 
Callstack
ECMO
int sock_setsockopt(args []){
    . . .
sk->sk_userlocks |= SOCK_SNDBUF_LOCK;
sk->sk_sndbuf = max_t(u32, val * 2, 
SOCK_MIN_SNDBUF);  
}
GDB
Watchpoint
Source Code
    unix_stream_sendmsg
    0xc02bb4cc LDR sb, [r2, #0xd0]
    r2+0xd0: 0xc7929110
    0xc7929110: 0xffffff00
    /*load 0xffffff00 from address 0xc7929110*/
    . . .
    0xc02bb53c BL 0xc0227b04
    r1:0xffffff40 /*calculated from 0xffffff00*/
    sock_setsockopt
    0xc0229f68 STR r6, [r4, #0xd0]
    r4+0xd0: 0xc7929110
    /*write 0xffffff00 into 0xc7929110*/
Figure 14: Root cause analysis of CVE-2016-9793.
check whether CVE-2017-18344 [5] is fixed. If the vulnerability is
not fixed, the test case will fail. They are also expected since the
testing kernel does not fix these vulnerabilities. The other 25 cases
return back the ENOSYS error number, which means the functionali-
ties are not implemented. For the remaining 10 cases, the reason is
adhoc, such as the kernel version is old and timeout.
In summary, 94% of the system call test cases passed. This evalu-
ation shows the rehosted kernel is reliable and stable. We further
demonstrate the usage scenarios of the rehosted Linux kernel in
Section 5.5.
Answer to RQ3: The rehosted Linux kernel can pass 94%
system call test cases in LTP, which demonstrates its reliability
and stability.
5.5 Applications and Other Peripherals (RQ4)
Our system can rehost Linux kernels, which provides the capabil-
ity to install different peripheral drivers with kernel modules to
support more peripherals. Furthermore, the rehosted Linux kernel
lays the foundation of applications relying on the capability to in-
trospect the runtime states of the target system. In this section, we
successfully install the Ethernet device driver (i.e., smc91x) for all
the rehosted Linux kernels. We also leverage our system to build
three applications, including kernel crash analysis, rootkit forensic
analysis, and kernel fuzzing, to demonstrate the usage scenarios of
ECMO. Other applications that rely on QEMU can be ported. Note
that, we only use these applications to demonstrate the usage of
our system. The applications are not the main contribution of this
work.
5.5.1 Other Peripherals. Linux kernel module is an object file that
can be loaded during the runtime to extend the functionality of the
Linux kernel. In this case, peripheral drivers can be built as kernel
modules and loaded into the kernel dynamically. To demonstrate
Table 6: CVEs that can be triggered on the rehosted Linux
kernel by ECMO.
CVE ID
CVE Score
CVE Type
Fix Version
CVE-2018-5333
CVE-2016-4557
CVE-2017-10661
CVE-2016-0728
CVE-2016-9793
CVE-2017-12193
5.5
7.8
7.0
7.8
7.8
5.5
Null Pointer Dereference
Double Free
Race Condition
Interger Overflow
Type Confusion
Null Pointer Dereference
4.14.13
4.5.5
4.10.15
4.4.1
4.8.14
4.13.11
that our rehosted Linux kernel is able to support more peripherals.
we select one rather complex peripheral (i.e., smc91x [18]) and build
the driver code into kernel module (i.e., smc91x.ko). We then inject
this kernel module into the ramfs that is fed to rehosted Linux
kernel. After the embedded Linux kernel is rehosted by ECMO, we
use the command insmod smc91x.ko to install the peripheral driver
for smc91x. Meanwhile, QEMU has already provided the peripheral
model for smc91x and we can integrate this model into the machine
model directly. Finally, we successfully install the peripheral driver
of smc91x for all the 710 rehosted Linux kernels, which demonstrate
the capability of ECMO to support the other peripherals.
5.5.2 Crash Analysis. In the following, we show the process to
utilize ECMO to understand the root cause of the crash on rehosted
kernels. To this end, we collect the PoCs that can trigger the crash
for six reported bugs and vulnerabilities (as shown in Table 6). We
then boot the Linux kernel and run the PoCs to crash the kernel.
During this process, we use the QEMU to collect the runtime trace.
We also leverage the remote GDB in QEMU to debug the rehosted
kernel. We detail the procedures on how to conduct the crash anal-
ysis for one case (CVE-2016-9793 [4]) with the collected runtime
trace. Figure 14 shows the whole procedure.
Specifically, when the rehosted Linux kernel crashes, the detailed
call stack will be printed out. The call stack includes the function
name and the addresses of these functions. With the runtime trace
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea744provided by QEMU, we can get the information including the reg-
ister values and the execution path. By analyzing the trace, we
noticed that a negative value (i.e., 0xffffff40) is the first parame-
ter of the function __alloc_skb. This negative value results in the
crash.
We then analyze the propagation of this negative value within the
trace. This value is propagated by the first parameter of the function
sock_alloc_send_pskb. Finally, we notice that the negative value
0xffffff40 is calculated from 0xffffff00, which is loaded by the
function unix_stream_sendmsg from the address 0xc7929110. We
then use the GDB to set a watchpoint at this memory address and
capture that the instruction at the address 0xc0229f68 was writing
the negative value (i.e., 0xffffff00 ) into this memory location.
We further analyze the function that contains the instruction at
the address 0xc0229f68. It turns out that the root cause of the crash
is because of the type confusion. In the function sock_setsockopt,
the variable sk→sk_sndbuf will be set by the return value of max_t
(maximum value between two values in the same type). However,
due to the wrong type u32, the return value can be a negative value,
which triggers the crash.
This analysis shows the usage of ECMO by providing the capa-
bility introspect the runtime states of the rehosted kernel.
5.5.3 Rootkit Forensic Analysis. Rootkit forensic analysis requires
the ability to monitor the runtime states of the kernel [40, 48]. We
demonstrate this ability by conducting the rootkit forensic analysis
with one (i.e., Suterusu [20]) popular rootkit in the wild.
Specifically, Suterusu is able to hide specific processes by hi-
jacking the kernel function proc_readdir, which is used to get
the process information. As shown in Figure 15(a), it hijacks the
function proc_readdir by rewriting the function’s first instruction
to LDR PC,[PC,#0]. As a result, it redirects the execution to the
function new_proc_readdir inside the rootkit. With ECMO, we can
monitor the changes to the kernel code sections (a suspicious behav-
ior) by setting up memory watchpoints to the Linux code section
(Figure 15(b)).
Fuzzing. Fuzzing has been widely used to detect software
5.5.4
vulnerabilities. We ported one of the most popular kernel fuzzers
(i.e.,UnicornFuzz [51]) into ECMO and fuzzed the example kernel
modules provided by UnicornFuzz. UnicornFuzz can work under
ECMO and the fuzzing speed can reach to 396 instances per second.
This demonstrates the usage of ECMO for kernel fuzzing.
Answer to RQ4: Applications, e.g., crash analysis, forensic
analysis, kernel fuzzing, can be built upon the rehosted Linux
kernel by our system. Furthermore, rehosted Linux kernel
can install peripheral drivers with kernel modules to support
more peripherals.
6 DISCUSSION
Manual efforts ECMO provides mostly automated approach and
only developing the ECMO Driver requires manual efforts. However,
this is a one-time effort. Furthermore, one ECMO Driver can be
transplanted to different kernel versions if the related functions
and structures are not changed. Even if the functions are changed,
we just need to change a few APIs and compile it again to create a
Linux Kernel
Hijack
Rootkit
hijack_proc
proc_readdir
new_proc_readdir
Rewriting
LDR PC, [PC,#0]
(a) Workflow of rootkit Suterusu
gef >   c
Continuing.
Hardware watchpoint 1: *0xc00fc078
Old value  = 0xe92d4038
New value = 0xe59ff000
0xbf00116c in ?? ()
LDR PC,[PC, #0]
(b) ECMO observes how the rootkit Suterusu works.
Figure 15: The workflow of rootkit Suterusu and how ECMO
analyzes the behavior
new ECMO Driver. For example, the 815 Linux kernels consist of 20
different kernel versions. For the kernel in version 2.6.36, it takes
385 lines of C code. This driver can be used for all the kernel images