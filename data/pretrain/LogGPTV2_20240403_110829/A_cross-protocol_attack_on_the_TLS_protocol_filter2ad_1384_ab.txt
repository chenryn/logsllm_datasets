(2)
and we require:
Lq + C ≤ Lp ≤ C + 3Lq − 6
Note that in the above equation, 3Lq represents the sum of
the lengths of the prime q, and the X and Y -coordinates
of the ephemeral elliptic curve public key. Combined with
Eqn. (1) we conclude that C should satisfy:
262 − 2Lq ≤ C ≤ 256 .
(3)
The constraints for C are not unrealistic, and if we consider
randomly generated curves (i.e. with random a and b) the
1If this requirement is not satisﬁed an attack may be possible
on servers with constant curve parameters of certain form.
We do not consider this attack in this paper.
650
7
15
0
7
15
curve type [1]
prime length
(Lq)
length of p (Lp)
EC curve parameter a
EC curve parameter b
EC prime (q)
length of a (La)
length of b (Lb)
8>>>>>>>:
8>:
8>:
8>: order length
8>: cofactor length
8>: public length
base length
(Lcofactor)
(Lbase)
(Lorder)
base point
order
cofactor
9>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>=
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;
Lq
1+La
1+Lb
1+Lbase
1+Lorder
1+Lcofactor
Lq
Lq
8>>>>>>>>>>>>>>>:
8>>>>>>>>>>>>>>>:
DH prime p
C
(2Lq + 1)
public type [4]
o 256−C
X-coordinate of ECDH public
share of server
length of g (Lg)
generator g
Y -coordinate of ECDH public
share of server
length of Ys (LYs )
public share of server Ys
9>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>=
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>;
9>=
>;
9>>>>=
>>>>;
Lp
Lg
LYs
(a) Elliptic Curve Diﬃe-Hellman
(b) Diﬃe-Hellman
Figure 3: Contrasting the ‘ServerKeyExchange’ message contents with Diﬃe-Hellman and explicit elliptic curve Diﬃe-
Hellman parameters, side-by-side. Each row represents a 2-byte (16-bit) ﬁeld, unless the length is explicitly given. All
the indicated lengths are in bytes and the numbers in brackets denote a constant value ﬁeld.
66The new cross-protocol attack
Client
Adversary
Server
ClientHello
TLS DHE RSA. . . , CRAND
ClientHello
TLS ECDHE RSA. . . , CRAND
ServerHello
TLS ECDHE RSA. . . , SRAND
Certif icate
ServerKeyExchange
curve params, kG, sig(CRAND,
SRAND, curve params, kG)
ServerHello
TLS DHE RSA. . . , SRAND
Certif icate
ServerKeyExchange
Verify signature
ServerHelloDone
ClientKeyExchange Yc = αx mod n
Recover pre-master secret
ChangeCipherSpec, Finished
ChangeCipherSpec, Finished
Application Data
Figure 4: A message sequence chart describing our attack. The dashed lines indicate a forwarded message, and the
consequent lines indicate multiple trials.
Table 1: The sizes (in bytes) of the parameters in various named curves. The curve marked with gray fulﬁlls the
requirements for the attack: 262 − 2Lq ≤ C ≤ 256.
Curve
name
secp192k1
secp192r1
secp224k1
secp224r1
secp256k1
secp256r1
secp384r1
secp521r1
Lq
24
24
28
28
32
32
48
66
La
1
Lq
1
Lq
1
Lq
Lq
Lq
Lb
1
Lq
1
Lq
1
Lq
Lq
Lq
Lbase
Lorder Lcofactor C
262 − 2Lq
2Lq + 1
2Lq + 1
2Lq + 1
2Lq + 1
2Lq + 1
2Lq + 1
2Lq + 1
2Lq + 1
Lq
Lq
Lq
Lq
Lq
Lq
Lq
Lq
1
1
1
1
1
1
1
1
83
129
95
149
107
169
249
339
214
214
206
206
198
198
166
130
67attack will work for any elliptic curve over a prime ﬁnite
ﬁeld of characteristic roughly between 300 and 400 bits. For
instance, if we test the prime curves listed in [6] we see that
they are fulﬁlled for the secp384r1 curve (although this is a
named curve), as shown in Table 1.
Probability estimate.
If a server uses explicit elliptic curve parameters in the ap-
propriate range, the attack is straightforward, even though it
requires quite some eﬀort from the adversary and the server.
The adversary intercepts a client connection; upon receipt of
the ‘ClientHello’, initiates multiple connections to the server.
His goal is to obtain signed ECDH parameters that contain
valid lengths for g and Ys.
From Fig. 3a we see that the maximum valid length of g is
given by
2Lq − (256 − C) − 2 − 2 − 1 ,
where the consecutive terms in the above sum correspond to:
the size of X and Y -coordinate, the part taken up by p, the
length ﬁeld of g, the length ﬁeld of Ys and the minimal length
of Ys. If we deﬁne this upper bound as L := 2Lq − 261 + C,
then we conclude that the valid lengths of g satisfy
0  20 for the prime factors to
be small enough for the attack to succeed within the timeout.
68Hence, the probability that n satisﬁes these requirements is
< 2−80.
In the oﬄine scenario, the attacker has a much higher proba-
bility of succeeding. Indeed, now n can have one large prime
factor (e.g. around 530 bits, the current DLP record [15])
and all other prime factors much smaller (e.g. around 240
bits, the current ECM record [5]). Since the size of n is never
larger than 2500 bits, the probability that the attacker suc-
ceeds given a valid message is larger than 8−8 = 2−24. This
probability then needs to be multiplied with Eqn. (6) which
is around 2−25. The overall success probability therefore is
around 2−49.
The fact that the key can be recovered oﬄine does not pose
any threat to the TLS protocol since in the normal execu-
tion of the protocol, the application data are only trans-
mitted after the veriﬁcation of ‘Finished’ messages by both
peers. However, extensions to the protocol such as the “False
start” [18] that try to reduce protocol round-trips by send-
ing the client’s application data before the peer’s ﬁnished
message is veriﬁed, are at risk. This attack may be used to
obtain the encrypted client’s data and decrypt it by calcu-
lating the shared key oﬄine.
Computing pre-master secret.
Recall that the ephemeral key Ys is given by part of the X
and/or Y coordinate of the ephemeral public key generated
by the server. It is thus possible and in fact not unlikely (see
the next section), that Ys = 0, ±1. As observed in [22], if
the client accepts any of these values, the pre-master secret
is very easy to compute since it will be equal to 0, ±1.
Such values for Ys can be generalized slightly when there
are other roots of unity of small order or roots of nullity
if n is composite, since then it becomes likely that the pre-
master secret again equals 1 or 0. The main obstacle for this
generalisation is the fact that the available length for Ys is
rather small compared to the total length of n. We require
roots of unity and/or nullity with compact representation
modulo n. For roots of nullity it is easy to see that this
is very unlikely: indeed, let n = Qs
i , then the root of