### Implementation Rationale for Large Page Sizes

Larger page sizes, typically in the multi-kilobyte range, are preferred for several reasons. Smaller pages require more metadata to track the mapping between data and pages, and they necessitate more complex garbage collection mechanisms. 

**Figure 14. Lifetime Gain for Different Page Sizes**

### Analysis of MFC Objectives

Methuselah Flash Codes (MFCs) select codewords from cosets to achieve three primary objectives: 
1. Avoid writing to saturated cells.
2. Minimize the number of cells that increment.
3. Balance the increments across the cells.

In this section, we evaluate how well MFCs achieve the latter two objectives. The first objective is always a requirement. The results presented here provide insight into the higher-level performance metrics discussed earlier.

#### 1. Minimizing the Number of Cells that Increment

For each page update, we calculate the fraction of cells that increment. We further categorize these results based on the number of updates that have already been performed on the page since its last erasure. We compare the performance of WOM (Write Once Memory) and MFC-1/2-1BPC, noting that WOM achieves only 2 updates per page, while MFC-1/2-1BPC achieves 12 updates.

**Figure 15. Average Number of Increments**

The x-axis in Figure 15 represents the page update number since the last erasure, and the y-axis shows the average fraction of cells that increment. Additionally, we present an overall average on the far right. Our observations indicate that MFC-1/2-1BPC has an average of 17% of v-cells incremented per update, compared to 75% for WOM. For MFC-1/2-1BPC, the first two updates have the fewest increments (~14%). This is because, in the initial updates, most v-cells are at level L0, minimizing the cost of balancing increments. In later updates, the number of increments increases as MFCs strive to balance the increments.

#### 2. Balancing Increments Across Cells

We calculate the histogram of the levels that the cells reach before the page is erased. These results are shown in Figure 16 for MFC-1/2-1BPC and the WOM code.

**Figure 16. Histogram of the v-cell Levels Before Erasure**

For MFC-1/2-1BPC, the majority of the cells reach level L2, with only 0.5% of the v-cells remaining at level L0. This means that 99.95% of the v-cells are programmed at least once, and 88.5% of them reach level L2 or L3. Ideally, all cells would reach level L3 before erasure, but this is not feasible.

In the case of the WOM code, only 56% of the v-cells reach levels L2 or L3, and 6% of them are never programmed. Interestingly, both implementations have about the same number of v-cells at level L3 (~20%). This result indicates that saturated cells are a critical bottleneck for re-writing codes, and 20% of the v-cells being saturated is an average threshold that renders the entire page unable to be re-programmed.

### Related Work

There are two complementary approaches to extending the lifetime of flash memory: postponing wearout and tolerating wearout. MFCs, described in Section V, focus on postponing wearout and can be combined with Error Correction Codes (ECC), as shown in Section V.B, to also tolerate wearout.

#### Postponing Wearout

Postponing wearout involves two main techniques: coding and wear-leveling. Since we have already discussed coding, we now focus on wear-leveling.

Intuitively, it is undesirable to wear out one or a few cells out of the thousands in a page, rendering the entire page unusable. At a larger scale, it is preferable not to wear out one or a few pages out of the many in a block, which would reduce the effective size of the block and lead to more frequent erasures. Uniform wearout across all cells, pages, and blocks is essential for good lifetime performance.

Various schemes have been developed for wear-leveling at different granularities. The primary focus in flash memories is on block-level wear-leveling [20, 21, 22]. By adding some complexity to the Flash Translation Layer (FTL) algorithm, blocks can have a more even number of erases. Challenges arise with blocks containing "cold" and "hot" data, meaning data that are either rarely or frequently modified, respectively. Algorithms aim to detect such blocks and evenly distribute erases using various techniques, potentially increasing the overall number of block erasures.

In its current form, flash memory does not require page-level wear leveling, as each page within a block is programmed exactly once before erasure. However, for coding schemes like MFCs, page-level wear leveling may be beneficial. Research in this area [23] has provided solutions for other memory types, such as Phase Change Memory (PCM). The main idea is to program pages in an order that ensures even usage of all pages.

#### Tolerating Wearout

Tolerating wearout is crucial in flash memory for multiple reasons. First, some flash cells may start wearing out faster than expected due to defects. Additionally, some cells may be manufactured with defects, making them unable to retain information from the start. Such failures are common in flash memories [13].

Flash memory implementations provide extra capacity for ECC. Various ECCs have been proposed [24, 25, 26], exploring trade-offs between complexity, size, and correction capabilities.

Other methods for tolerating wearout, besides ECC, have also been proposed. Schechter et al. [19] use a finite number of redundant cells to replace defective cells and those that wear out faster than expected. Although their scheme is designed for PCM, it can be adapted for any non-volatile memory.

### Conclusion

Methuselah Flash Codes (MFCs) offer several benefits for flash memory. We have shown that MFCs achieve the best aggregate gains compared to prior work, providing a range of trade-offs between rate and lifetime gain for a given aggregate gain. Furthermore, the compatibility of MFCs with ECC makes them particularly attractive.

We also conclude that, regardless of the coding scheme, one must carefully consider the interface provided by a realistic flash memory. Rather than assuming idealized cells, we highlight the limitations of the current interface and find a way to provide virtual cells that facilitate coding on real flash memory.

Another conclusion is that there could be benefits to co-designing flash chips with code designers and systems designers. Decisions such as the mapping of cell levels to bits and the sizes of the pages could be optimized for a specific purpose, maximizing the benefits of re-writing codes like MFCs. Eslami et al. [27] demonstrated how such a co-design process could be beneficial for phase change memory (PCM), and similar opportunities may exist for flash memory.

### Acknowledgment

This material is based on work supported by the National Science Foundation under grant CCF-142-1177.

### References

[References listed as provided in the original text]

---

This version of the text is more structured and professional, with clearer headings and improved coherence.