title:How Vulnerable Are Unprotected Machines on the Internet?
author:Yuanyuan Grace Zeng and
David Coffey and
John Viega
How Vulnerable Are Unprotected Machines
on the Internet?
Yuanyuan Grace Zeng1, David Coffey2, and John Viega1
{yzeng,jviega}@silversky.com
1 SilverSky
2 McAfee, Inc.
david PI:EMAIL
Abstract. How vulnerable are unprotected machines on the Internet? Utilizing
Amazon’s Elastic Compute Cloud (EC2) service and our own VMware ESXi
server, we launched and monitored 18 Windows machines (Windows 2008, XP
and 7) without anti-virus or ﬁrewall protection at two distinct locations on the
Internet—in the cloud and on-premise. Some machines ran a wide-open conﬁg-
uration with all ports open and services emulated, while others had a out-of-the-
box conﬁguration with default ports and services. After launching, all machines
received port scans within minutes and vulnerability probes within a couple of
hours. Although all machines with wide-open conﬁgurations attracted exploita-
tions within a day, machines with out-of-the-box conﬁgurations observed very
few vulnerability exploitations regardless of their locations. From our months-
long experiment we found that: a) attackers are constantly searching for victims;
b) the more opening ports/listening services a machine has, the more risks it is
exposed to; c) brute-force logins are the most common type of attack; d) exploita-
tions targeting vulnerabilities of software or operating systems are not widely
observed.
1 Introduction
The Internet is a playground for opportunistic attackers. Thousands of threats are cir-
culating around the Internet. Most computers today are protected by ﬁrewalls, IDS/IPS
and anti-virus (AV) tools. But what happens in the worst-case scenario when they do
not have any protection? Previous experiments on “Time-to-Live-on-the-Network” [5]
and “Survival Time” [11] of Windows machines were conducted quite a few years ago
with test machines running old Windows operating systems. The Internet Storm Center
of SANS made the “Four-Minute Windows Survival Time” [10] claim in 2008 and was
especially criticized for using a Windows XP RTM or SP1 version in the test.
Since the time of these initial time-to-live studies, the Internet threat environment
has become deadlier. Meanwhile, the Windows operating systems have become more
secure. But in the past ﬁve years, we failed to see any study on attacks towards un-
protected machines running current operating systems. To close this gap, we wanted
to investigate how well an unprotected machine with a current operating system does
in today’s threat environment. Left to its own devices, how soon will it be probed and
attacked? And what is the most prevalent attack targeting the unprotected machine?
M. Faloutsos and A. Kuzmanovic (Eds.): PAM 2014, LNCS 8362, pp. 224–234, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
How Vulnerable Are Unprotected Machines on the Internet?
225
We are interested in testing unprotected machines at two places on the Internet: one is
in the cloud and the other is on-premise connecting directly to a DSL line. We would
like to study the in-cloud scenario because enterprises are increasingly turning to the
cloud for various business purposes. Also, since Windows operating systems account
for more than 80% market share [3], we would like to focus our study on the most
widely-used Windows operating systems. To the best of our knowledge, this is the ﬁrst
experiment carried out on Windows 2008 and Windows 7 machines. Unlike previous
experiments that only captured the elapsed time for a machine to get infected, our ex-
periment kept track of different stages of a malware infection process. We measured the
time elapsed starting with the initial deployment of the test machine to the ﬁrst occur-
rence of all following events: port scan, vulnerability probe, and exploitation. Based on
detailed trafﬁc and event logs captured, we were able to conduct a thorough analysis on
the scan/probe/exploitation activities.
2 Related Work
Besides the aforementioned empirical time-to-live studies on Windows machines, there
are other areas of research related to our work. One such area is vulnerability assess-
ment. Ten et al. [13] proposed a framework to quantify and evaluate the vulnerabilities
of SCADA systems at multiple levels. Hartung et al. [6] demonstrated the ease of com-
promising a sensor node and tampering its data, and suggested a few countermeasures to
improve a sensor’s security posture. McQueen et al. [7] created a time-to-compromise
model for a system component that is visible to an attacker, taking into account known
and visible vulnerabilities, and attacker skill level. Another relevant topic is the analy-
sis on the Internet-wide malware propagation. Moore et al. [8] conducted a case study
on the infamous Code-Red worm at the global level, detailing the spread of this worm
and the properties of the infected machines. Shannon et al. [12] monitored the outbreak
of Witty worm through a network telescope and reported ﬁndings such as the scan-
ning rate, the infection duration as well as the number of victims over a period of time.
Moore et al. [9] studied the use of public search engines to locate vulnerable servers
and found that as an alternative to vulnerability scanning this approach was widely used
in compromising web servers to host malware and phishing sites.
3 Experiment Design
3.1 Scope of the Experiment
Usually, a machine gets infected through either of the two ways: user-involved infection
or vulnerability exploitation. A user-involved infection requires a user to take certain
actions such as clicking a link or downloading and executing a ﬁle. An infection via
vulnerability exploitation normally gets its way into the machine silently without a
user’s awareness. Our experiment only considers the vulnerability exploitation scenario
with no user in the loop. Every Windows machine in our experiment meets the following
requirements:
– Each machine is connected to the Internet with a unique public IP address.
– All incoming trafﬁc (TCP, UDP and ICMP) is allowed by a network-based ﬁrewall.
226
Y. Zeng, D. Coffey, and J. Viega
– The in-host Windows ﬁrewall is disabled and no anti-virus (AV) is installed.
– Wireshark captures all network trafﬁc; Regshot [4] monitors Registry changes and
Windows event logs keep track of system-wide activities such as logins/logouts and
application status changes. Those logs together are used to decompose probes and
attacks.
3.2 Experiment Set-Up
Our experiment spanned two periods of time: February to April and August to October
of 2012. We set up and collected data from 18 machines in total at two locations—the
Amazon’s Elastic Compute Cloud (EC2) and a VMware ESXi server on-premise.
In-Cloud Experiment. We ran 15 machines in Amazon’s EC2 environment with two
conﬁguration proﬁles: “wide-open” and “out-of-the-box”. In the wide-open scenario, a
machine opens all ports and emulates all possible services. This way the machine can
attract as many malicious attempts as possible. In the out-of-the-box scenario, a ma-
chine runs only with default open ports and services. This scenario gives us a baseline
of how many malicious attempts an unprotected machine might encounter.
Windows is by far the most popular operating system on the Internet. Its server ver-
sions are generally exposed to more risks than home/professional versions. Our tests
were carried out on Windows Server 2008 R1 SP2 and R2 SP1. As mentioned earlier,
we disabled all ﬁrewall and anti-virus programs and conﬁgured the security policies
so that Amazon allowed all incoming connections to those machines. To create the
wide-open scenario, we installed a low-interactive honeypot named HoneyBot [1] and
changed several services to avoid interference. After the conﬁguration was complete,
we took a snapshot of the instance and created an AMI (Amazon Machine Image) for
later use. We launched ten instances on EC2 using the same AMI and made sure that
they were hosted in different geographical zones and were allocated different IP ad-
dresses. For the out-of-the-box scenario, we made a clean install of Windows Server
2008 and did not install any programs other than Wireshark and Regshot. By default,
common ports such as 135 (RPC), 139 (NetBIOS), 445 (SMB) and 3389 (RDP) were
open. We ran ﬁve such instances on EC2.
On-Premise Experiment. To create a testbed, we installed a VMware ESXi 5.0 server
and connected it to a DSL line at our ofﬁce location in North Carolina. This time we
wanted to test out non-server Windows OS versions. Since OS platform statistics [3]
showed that Windows 7 and Windows XP accounted for a majority of Windows op-
erating systems being used (55% and 25% in August 2012), we created three virtual
machines on the ESXi server: one running Windows 7 Professional SP1 and two run-
ning Windows XP Professional SP2. Their default open ports included 135 (RPC), 139
(NetBIOS), 445 (SMB) and 3389 (RDP). We later opened port 21 (FTP), 25 (SMTP),
80 (HTTP), 443 (HTTPS), 1433/1434 (MSSQL) on those Windows XP machines. Each
virtual machine was assigned a unique public IP and we ran port scans to conﬁrm that
machines were indeed reachable from the Internet. Other conﬁgurations were the same
as the in-cloud machines.
How Vulnerable Are Unprotected Machines on the Internet?
227
4 Experiment Results
4.1 In-Cloud Experiment
Scan, Probe, and Exploitation Times of Occurrence. Malware infections follow a
predictable pattern. Using a port scan, an attacker tests whether a port on a target ma-
chine is open. If so, a vulnerability probe gathers more information about a listening
service, such as the version of the service to identify speciﬁc vulnerabilities; and an ex-
ploitation delivers malicious payloads to ﬁnally compromise the machine. In the wide-
open scenario, after launching, on average it took about 23.4 minutes to see the ﬁrst
port scan, and 56.4 minutes to see the ﬁrst vulnerability probe (the exact number for
each server shown in Figure 1). Probes hit well-known ports such as 22 (SSH), 23 (Tel-
net), 25 (SMTP), 80 (HTTP), 445 (SMB), 1080 (SOCKS Proxy), 1433 (Microsoft SQL
Server) and 3389 (RDP). Looking at each server (honeypot) individually, we found that
honeypots 1, 7, 8 and 9, which were hosted in the same zone on EC2, waited longer
to see the ﬁrst port scans and probes. We surmised that the IP space of that zone was
new and not yet explored by attackers. With respect to exploitation time windows, we
observed that almost all ﬁrst exploitation attempts came in within 24 hours, with the av-
erage time being 18.6 hours (Figure 2). We captured exploitation attempts on port 445
(SMB), 1434 (Microsoft SQL Monitor), 2967 (Symantec AV) and 12147 (Symantec
Alert Management System 2). Almost all exploitations during our months-long experi-
ment were known threats. This is expected because the HoneyBot program was able to
emulate many known vulnerabilities to attract attacks. Interestingly, exploits targeting
ﬁve to even ten years old vulnerabilities were still ﬂoating around. For example, the
attack at port 1434 was the Slammer worm dating back to 2003, and the stack overﬂow
vulnerability at port 2967 was disclosed in 2006.
In the out-of-the-box scenario, it took an average of 13 minutes for the ﬁrst port scan
to arrive (Figure 3). Port scans hit ports such as 8080 (HTTP) and 1433 (Microsoft SQL
Server). The ﬁrst vulnerability probe arrived within 3 hours on average (Figure 3); all
probes were login attempts to the Samba share (445) or via RDP (3389). We monitored
the servers for a few weeks, but failed to see any exploitation attempts mainly due to
the limited number of open ports (services).
Top Targeted Ports. In the wide-open scenario, all ports were open on each test ma-
chine. We analyzed the trafﬁc to see which ports were targeted most often. Table 1 plots
the top 10 ports ordered by the percentage of total trafﬁc each port accounts for. As shown,
1080 (SOCKS) was the most targeted port. The SOCKS protocol is used to tunnel trafﬁc
through ﬁrewalls from inside to outside, but it is often misconﬁgured. Attackers take ad-
vantage of misconﬁgured SOCKS services to tunnel their attack trafﬁc inward and mask
the origin of their trafﬁc—that’s why this port attracted so many hits. Port 1433, the Mi-
crosoft SQL Server listener, also received much attack trafﬁc. Port 25 (SMTP) was also
popular. Spammers who look for open relays frequently probe this port. Many of the
other top ports were related to the HTTP service, such as 80, 8000, 8080 and 8888. In
the out-of-the-box scenario, we can see that (also in Table 1) more than 60% of trafﬁc
went to port 445 and 3389 which were open by default. Other common ports such as
1433, 80, 4899 and 1080, though not open, also received numerous scans.
228
Y. Zeng, D. Coffey, and J. Viega
First Port Scan 
First Vulnerability Probe 
Avg Scan:   ~23 min 
Avg Probe: ~56 min 
250 
200 
s
e
t
u
n
M
i
150 
100 
50 
0 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
Wide-Open Servers (Honeypots) 
Fig. 1. Scan and Probe Times of Occurrence on Wide-Open Servers (in minutes)
First Exploitation 
Avg Time: ~19 h 
s
r
u
o
H
45 
40 
35 
30 
25 
20 
15 
10 
5 
0 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
Wide-Open Servers (Honeypots) 
Fig. 2. Exploitation Attempt Times of Occurrence on Wide-Open Servers (in hours)
First Port Scan 
First Vulnerability Probe 
Avg Scan:   ~13 min 
Avg Probe: ~3 h 
s
e
t
u
n
M
i
400 
350 
300 
250 
200 
150 
100 
50 
0 
1 
2 
3 
4 
5 
Out-of-the-Box Servers 
Fig. 3. Scan and Probe Times of Occurrence on Out-of-the-Box Servers (in minutes)
How Vulnerable Are Unprotected Machines on the Internet?
229
Login Attempts. In our experiment, we observed a huge number of login attempts. Al-
most all of them were failures according to Windows security event logs. Every test ma-
chine, on average, received over 1,000 login requests daily either through port 445/139
(SMB/NetBIOS) or port 3389 (RDP). SMB (Server Message Block) is an application
layer protocol that is mainly used for ﬁle sharing on Windows systems. It can run di-
rectly over TCP port 445 or run in the session layer via port 139 over TCP. RDP (Re-
mote Desktop Protocol) provides remote desktop connections for Windows. We looked
at failed login attempts at port 3389 on our test machines. As it turned out, multiple
offending IPs tested out the same dictionary of usernames. Table 2 demonstrates this
set of usernames. In particular, the username administrator—the default administra-
tive account name—was brute-forced the most. Examining the SMB login attempts,
Table 1. Top 10 Targeted Ports
Wide-Open
Out-of-the-Box
Port
% of Conn Port
% of Conn
1080 SOCKS 15.50% 445 SMB
445 SMB
10.94% 3389 RDP
1433 MSSQL 8.03% 38856
3389 RDP
80 HTTP
110 POP3
22 SSH
25 SMTP
139 NetBIOS
8000 HTTP
32.26%
28.85%
6.07%
6.29% 139 NetBIOS
2.81%
6.01% 1433 MSSQL 2.48%
1.73%
3.18% 22292
1.58%
2.93% 80 HTTP
1.13%
2.91% 4899 Radmin
0.93%
2.83% 27977
1.76% 1080 SOCKS
0.90%
Table 2. Brute-Forced Usernames
Usernames
1
123
a
actuser
adm
admin
admin1
admin2
administrator
aspnet
backup
console
david
guest
john
owner
root