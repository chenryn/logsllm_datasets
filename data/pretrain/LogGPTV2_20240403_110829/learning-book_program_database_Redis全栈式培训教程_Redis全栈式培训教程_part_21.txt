## Page 266
18.Redis与Spring集成
18.1．基础环境介绍
18.1.1.Springboot环境搭建
进入官网 https://start.spring.io/
spring initializr
pepid apeg O
O Kotin
O Groovy
ADD DEPENDENCIES CTRL + B
No deg
O 3.0.0 (SNAPSHOT)
O 3.0.0 (M3)
(IOHSVNSIZZ O
O2.69(5NAPSHOT)
O 26.8
Artitac
O w
EXPLORE CTRL + SPACE
SHARE.
春风阁讲堂出品
---
## Page 267
18.1.2.
Spring集成Redis方式
集成方式
主要过程
Spring 集成Jedis
基于Jedis实现，倾向于原生，功能强大
Spring集成lettuce
基本lettuce实现，倾向于原生，功能强大，支持异步
Spring集成 RedisTemplate
通过RedisTemplate深度集成，部分功能受限
SpringCache 集成 Redis
通过RedisTemplate、SpringCache深度集成，部分功能受限，使用场景有限
春风阁讲堂出品
267
---
## Page 268
18.2.Spring集成Jedis
18.2.1.Spring工程依赖
dependencies 
implementation 'org.springframework.boot:spring-boot-starter-data-redis
implementation'org.springframework.boot:spring-boot-starter-web'
implementation 'redis.clients:jedis'
Spring与Redis 集成方式参考源码工程：spring-jedis
官网地址：https：//github.com/redis/jedis
春风阁讲堂出品
268
---
## Page 269
18.2.2.集成单点配置
@Component
public class Simple{
@Bean
public JedisPoolConfig jedisPoolConfig(@Value("${jedis.simple.maxTotal}") int maxActive,
@Value("${jedis.simple.maxIdle}") int maxIdle, @Value("${jedis.simple.minIdle}") int minIdle,
@Value("${jedis.simple.maxWaitMillis}") long maxWaitMillis,
@Value("${jedis.simple.testOnBorrow}") boolean testOnBorrow)
JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
jedisPoolConfig.SetMaxTotal(maxActive);
jedisPoolConfig.setMaxIdle(maxIdle);
jedisPoolConfig.setMinIdle(minIdle);
jedisPoolConfig.SetMaxWait(Duration.ofMillis(maxWaitMillis));
jedisPoolConfig.setTestOnBorrow(testOnBorrow);
return jedisPoolConfig;
@Bean
public JedisPool jedisPool(@Value("${jedis.simple.host}") String host,
@Value("${jedis.simple.password}") String password,
@Value("${jedis.simple.port}") int port,
@Value("${jedis.simple.timeout}") int timeout, JedisPoolConfig jedisPoolConfig) {
return new JedisPool(jedisPoolConfig, host, port, timeout);
春风阁讲堂出品
269
---
## Page 270
18.2.3.集成哨兵配置
@Component
public class Sentinel {
@Value("${jedis.Sentinel.host1}")
private String host1;
@Value("${jedis.Sentinel.host2}")
private String host2;
@Value("${jedis.Sentinel.host3}")
private String host3;
@Bean
public JedisSentinelPool jedisSentinel(JedisPoolConfig jedisPoolConfig)
Set sentinels = new HashSet();
sentinels.add(this.hostl);
sentinels.add(this.host2);
sentinels.add(this.host3);
JedisSentinelPool jspool = new JedisSentinelPool("mymaster", sentinels, jedisPoolConfig, 10000);
return jspool;
春风阁讲堂出品
270
---
## Page 271
18.2.4.集成Cluster配置
@Component
public class Cluster {
@Bean
public JedisCluster jedisCluster(JedisPoolConfig jedisPoolConfig){
Set nodeSet = new HashSet<>();
nodeSet.add(new HostAndPort("172.16.122.101", 6379));
nodeSet.add(new HostAndPort("172.16.122.101",6380));
nodeSet.add(new HostAndPort("172.16.122.102", 6379));
nodeSet.add(new HostAndPort("172.16.122.102", 6380));
nodeSet.add(new HostAndPort("172.16.122.103", 6379));
nodeSet.add(new HostAndPort("172.16.122.103", 6380));
JedisCluster jedisCluster = new JedisCluster(nodeSet, 20oo, jedisPoolConfig);
return jedisCluster;
春风阁讲堂出品
271
---
## Page 272
18.3.Spring集成lettuce
18.3.1.Spring工程依赖
dependencies 
implementation 'org.springframework.boot:spring-boot-starter-data-redis
implementation 'io.lettuce:lettuce-core:6.1.8.RELEASE'
Spring与Redis集成方式参考源码工程：spring-lettuce
官方网址：https://github.com/lettuce-io/lettuce-core
春风阁讲堂出品
272
---
## Page 273
18.3.2.集成单点配置
Spring集成lettuce的配置
*/
@Component
public class Simple {
@Value("${lettuce.simple.host}")
private String host;
@Value("${lettuce.simple.port}")
private int port;
@Value("${lettuce.simple.timeout}")
private int timeOut;
@Bean("simpleConnection")
RedisURI redisURI = new RedisURI();
redisURI.setHost(this.host);
redisURI.setPort(this.port);
redisURI.setTimeout(Duration.ofMillis(timeOut));
RedisClient redisClient = RedisClient.create(redisURI);
return redisClient.connect();
春风阁讲堂出品
273
---
## Page 274
18.3.3.集成主从配置
Spring集成lettuce的配置（标准主从）
Component
oublic class Mslave {
@Value("${lettuce.mslave.host1}")
private String url1;
@Value("${lettuce.mslave.host2}")
private String ur12;
@Value("${lettuce.mslave.host3}")
private String ur13;
@Bean("mslaveConnection")
public StatefulRedisConnection getSentinelConnection()
RedisClient redisClient = RedisClient.create();
List list = new ArrayList();
list.add(RedisURI.create(this.url1));
list.add(RedisURI.create(this.url2));
list.add(RedisURI.create(this.url3));
StatefulRedisMasterReplicaConnection connection = MasterReplica.connect(redisClient,
StringCodec.UTF8,
list);
connection.SetReadFrom(ReadFrom.MASTER_PREFERRED);
return connection;
春风阁讲堂出品
274
---
## Page 275
18.3.4.集成哨兵配置
Spring集成lettuce的配置（sentinel）
*
Component
oublic class Sentinel {
@Value("${lettuce.sentinel.host1}")
private String host1;
@Value("${lettuce.sentinel.portl}")
private int port1;
@Value("${lettuce.sentinel.host2}")
private String host2;
@Value("${lettuce.sentinel.port2}")
private int port2;
@Value("${lettuce.sentinel.host3}")
private String host3;
@Value("${lettuce.sentinel.port3}")
private int port3;
@Bean("sentinelConnection")
public StatefulRedisConnection getSentinelConnection() {
RedisURI redisUri = RedisURI.Builder.sentinel(host1, port1, "mymaster").withSentinel(host2, port2)
.withSentinel(host3, port3).build();
RedisClient redisClient = RedisClient.create(redisUri);
StatefulRedisConnection connection = redisClient.connect();
return connection;
春风阁讲堂出品
275
---
## Page 276
18.3.5.集成Cluster配置
Spring集成lettuce的配置（cluster模式）
*/
Component
public class Cluster{
@Value("${lettuce.cluster.host1}")
private String host1;
@Value("${lettuce.cluster.host3}")
private String host2;
@Value("${lettuce.cluster.host3}")
private String host3;
@Bean("clusterConnection")
public StatefulRedisClusterConnection getClusterConnection(){
RedisURI node1 = RedisURI.create("redis://" + host1);
RedisURI node2 = RedisURI.create("redis://" + host2);
RedisURI node3 = RedisURI.create("redis://" + host3);
RedisClusterClient clusterClient = RedisClusterClient.create(Arrays.asList(node1, node2, node3));
StatefulRedisClusterConnection connection = clusterClient.connect();
return connection;
春风阁讲堂出品
276
---
## Page 277
18.3.6.连接池使用
参考网址：
https:/lettuce.io/core/release/reference/index.html#_connection_pooling
春风阁讲堂出品
277
---
## Page 278
18.4.采用RedisTemplate
参考源码工程 redistemplate,官网地址::https://spring. io/projects/spring-dataredis
18.4.1.自动配置查看
自动配置的代码实现参考：RedisProperties.java
@ConfigurationProperties(prefix-=."spring.redis")
public-class-RedisProperties-{
*-Database-index-used-by-the-connection-factory.
*
private-int database-=-0;
**
*.Connection-URL.-Overrides-host,-port,-and-password.-User-is-ignored.-Example
.*-redis://user:PI:EMAIL:6379
private-String-url;
**
.*.Redis-server-host.
*/
private-String-host-=."localhost";
*.Login-username-of-the-redis-server.
*/
private-String-username;
春风阁讲堂出品
278
---
## Page 279
18.4.2.序列化配置
@Configuration
public class RedisConfig {
@Autowired
private RedisTemplate redisTemplate;
@Bean
public RedisTemplate redisTemplateInit()
//设置序列化Key的实例化对象
redisTemplate.setKeySerializer(new StringRedisSerializer());
//设置序列化Value的实例化对象
redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());
return redisTemplate;
春风阁讲堂出品
279
---
## Page 280
18.4.3.
集成单点配置
server:
port:8080
spring:
application:
name: sredis
redis:
clientType: LETTUCE
host: 192.168.128.167
database:0
port: 6379
timeout: 10000
password:
11
lettuce:
pool:
enabled: true
minIdle: 1
maxActive: 10
maxWait: 10000
cache:
type:
REDIS
春风阁讲堂出品
280
---
## Page 281
18.4.4.集成哨兵配置
server:
port:8080
spring:
application:
name: sredis
redis:
clientType:LETTUCE
database:0
password:
timeout: 10000
sentinel:
master: mymaster
nodes: 192.168.128.167:26378,192.168.128.167:26379,192.168.128.167:26380
lettuce:
pool:
enabled:true
minIdle: 1
maxActive: 10
maxWait: 10000
cache:
type:
REDIS
春风阁讲堂出品
281
---
## Page 282
18.4.5.集成Cluster配置
server:
port:8080
spring:
application:
name: sredis
redis:
clientType: LETTUCE
database:0
password:
timeout: 10000
cluster:
nodes: 192.168.128.167:6381,192.168.128.167:6382, 192.168.128.167:6383
max-redirects: 3
lettuce:
pool:
enabled: true
minIdle: 1
maxActive: 10
maxWait: 10000
cache:
type:
REDIS
春风阁讲堂出品
282
---
## Page 283
18.5.Redis短信验证码
18.5.1.
业务场景
场景层
服务层
redis
请求生成短信码
1，短信码具有可时效
生成随机短信
2，短信码具有唯一性
短信入库带时效）
短信验证
短信验证（存在判断
春风阁讲堂出品
283
---
## Page 284