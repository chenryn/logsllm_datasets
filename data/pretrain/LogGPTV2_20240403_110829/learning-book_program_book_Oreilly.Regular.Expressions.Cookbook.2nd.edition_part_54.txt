and combining the ranges with alternation.
Since lerters and digits occupy separate areas in the ASCIl and Unicode charactertables,
you cannot use the character class [o-F] to match any of the 16 hexadecimal digits.
Though this character class will actually do that, it will also match the punctuation
symbols that sit between the digits and the letters in the ASCII table. Instead, place two
character ranges in the character class: [o-9A-F].
Another issue that comes into play is case-sensitivity. By default, regular expressions
are case-sensitive. , to match decimal, hexadecimal, and binary numbers.
If we wanted to allow underscores anywhere, we could just add the underscore to these
three character classes. But we do not want to allow underscores at the start or the end.
The first and last characters in the number must be a digit. You might think of  uses  to match the initial digit or digits as
before. We add (_+[o-9]+)* to allow the digits to be followed by one or more under-
scores, as long as those underscores are followed by more digits. _+) allows any number
of sequential underscores. , does
match all valid floating-point numbers, but it also matches the empty string. And be-
cause we omitted the anchors, this regex will match the zero-length string between any
rwo characters in your subject text. If you run a search-and-replace with this regex and
the replacement α{$8} on 123abc456, you’ll get {123){}a{)b{}c{456}{}. The regex does
match 123 and 456 correctly, but it finds a zero-length match at every other match
attempt, too.
When creating a regular expression in a situation where everything is optional, it's very
important to consider whether everything else remains optional if one part is actually
omitted. Floating-point numbers must have at least one digit.
The solutions for this recipe clearly spell out that when the integer and fractional parts
are optional, either of them is still required. They also spell out whether 123. is a
floating-point number with a decimal dot, or whether it’s an integer number followed
by a dot that’s not part of the number. For example, in a programming language, that
trailing dot might be a concatenation operator or the first dot in a range operator speci-
fied by rwo dots.
To implement the requirement that the integer and fractional can’t be omitted at the
same time, we use alternation (Recipe 2.8) inside a group (Recipe 2.9) to simply spell
out the rwo situations. [0-9]+(\. [o-9]+)?> matches a number with a required integer
part and an optional fraction.  covers all three situations. The first altema-
tive covers numbers with both the integer and fractional parts, as well as numbers
without a fraction. The second alternative matches just the fraction. Because the alter-
nation operator has the lowest precedence of all, we have to place these two alternatives
in a group before we can add them to a longer regular expression.
398 1 Chapter 6: Numbers
---
## Page 415
[0-9]+(\ [o-9]+)|\- [o-9]+> requires the decimal dot to be omitted when the fraction
is omitted. If the decimal dot can occur even without fractional digits, we use [o-9]+
\[o-9]*)?|-[o-9]+ instead. In the first altermative in this regex, the fractional part
is still grouped with the question mark quantifier, which makes it optional. The dif-
ference is that the fractional digits themselves are now optional. W'e changed the plus
(one or more) into an asterisk (zero or more). The result is that the first altermative in
this regex matches an integer with optional fractional part, where the fraction can either
be a decimal dot with digits or just a decimal dot. The second alternative in the regex
is unchanged.
This last example is interesting because we have a requirement change about one thing.
but change the quantifier in the regex on something else. The requirement change is
about the dot being optional on its own, rather than in combination with the fractional
digits. We achieve this by changing the quantifier on the character class for the frac-
tional digits. This works because the decimal dot and the character class were already
inside a group that made both of them optional at the same time.
See Also
All the other recipes in this chapter show more ways of matching different kinds of
numbers with a regular expression.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2-
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.3 explains
character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains altermation.
Recipe 2.9 explains grouping. Recipe 2.12 explains repetition.
6.11NumberswithThousandSeparators
Problem
You want to match numbers that use the comma as the thousand separator and the
dot as the decimal separator.
Solution
Mandatory integer and fraction:
[0-9]{1,3}(,[0-9]{3})*\.[0-9]+$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Mandatory integer and optional fraction. Decimal dot must be omitted if the fraction
is omitted.
[0-9]{1,3](,[0-9]{3})*(\-[0-9]+)?$
Regex options: None
6.11 Numbers with Thousand Separaters | 399
---
## Page 416
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Optional integer and optional fraction. Decimal dot must be omitted if the fraction is
omitted.
^([0-9]{1,3}(,[0-9]{3})*(\.[0-9]+)1-[0-9]+)$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
The preceding regex, edited to find the number in a larger body of text:
\b[0-9]{1,3}(,[0-9]{3})*(\.[0-9]+)?\b|\. [0-9]+\b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Since these are all regular expressions for matching floating-point numbers, they use
the same techniques as the previous recipe. The only difference is that instead of simply
matching the integer part with , This
regular expression matches between 1 and 3 digits, followed by zero or more groups
that consist of a comma and 3 digits.
that would match numbers with a leading comma (e.g., 123). It's the same trap of
We cannot use [0-9]{o,3}(, [0-9]{3})*) to make the integer part optional, because
making everything optional, explained in the previous recipe. To make the integer part
optional, we don’t change the part of the regex for the integer, but instead make it
optional in its entirety. The last two regexes in the solution do this using alternation.
The regex for a mandatory integer and optional fraction is alternated with a regex that
matches the fraction without the integer. That yields a regex where both integer and
fraction are optional, but not at the same time.
See Also
All the other recipes in this chapter show more ways of matching different kinds of
numbers with a regular expression. Recipe 6.12 shows how you can add thousand
separators to numbers that don’t have them.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.3 explains
character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains word boundaries.
Recipe 2.8 explains alternation. Recipe 2.9 explains grouping. Recipe 2.12 explains
repetition.
400 | Chapter 6: Numbers
---
## Page 417
6.12Add ThousandSeparatorstoNumbers
Problem
You want to add commas as the thousand separator to numbers with four or more
digits You want to do this both forindividual numbers and forany numbers in a string
or file.
For example, you’d like to convert this:
There are more than 700ooooo00 people in the world today.
To this:
There are more than 7,ooo,o0o,0oo people 1n the world today.
thousand separator. The solutions here use a comma, but some people
Not all countries and written languages use the same character as the
you want, you can replace the commas in this recipe’s replacement 
strings with one of these other characters.
Solution
The following solutions work both for individual numbers and for all numbers in a
given string. They're designed to be used in a search-and-replace for all matches.
Basic solution
Regular expression:
(([6-0]i,
Replacement text flavor: Python
These replacement strings all put the matched number back using backreference zero
(the entire match, which in this case is a single digit), followed by a comma. When
programming, you can implement this regular expression search-and-replace as ex-
plained in Recipe 3.15.
Match separator positions only, using lookbehind
Regular expression:
(?<=[0-9])(?=(?:[0-9]{3})+(?![0-9]))
Regex options: None
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby 1.9
Replacement:
Replacement text flavors: .NET, Java, Perl, PHP, Python, Ruby
Recipe 3.14 explains how you can implement this basic regular expression search-and-
replace when programming.
This version doesn’rt work with Java5cript or Ruby 1.8, because they don’t support any
type of lookbehind. This time around, however, we need only one version of the re-
placement text because we’re simply using a comma without any backreference as the