Docker企业级架构篇
Docker 企业级架构篇
前言：
随着互联网技术的进步与发展，日益精细化的需求为我们带来挑战也带来了机遇。一个
问题提出，同时也有更多对应的解决方法和方案出现，这是社会不断进步的规律。因此，近
年来兴起的 Docker 容器技术和基于 Docker 的各平台以及解决方案也逐渐进入我们视野。
关于Docker，已经有很多文章作了相关说明及见解，其入门篇我们已经有了整理，那么今
天针对Docker在企业级架构中的实战我们也作一次分享。
注：本文部分资料来源于网络，由云舒网络整理发布。
目录
一．背景--------------------------------------------------------------------------------3
1. 新IT时代的诉求-----------------------------------------------------------------3
2. 微服务理念的流传---------------------------------------------------------------4
二．落地篇------------------------------------------------------------------------------4
1. Docker Sidekick ----------------------------------------------------------------4
2. DevOps--------------------------------------------------------------------------5
3. 容器服务企业落地之Rancher解决之道------------------------------------------7
三．实战篇-----------------------------------------------------------------------------15
1. Rancher快速上手指南（虚拟机篇）------------------------------------------15
2. 基于Docker的构建流程-持续集成及测试-------------------------------------35
四．番外篇-----------------------------------------------------------------------------37
1. Docker容器和存储系统之Root Image分层文件系统------------------------37
2. Docker容器和存储系统之Volume存储接口---------------------------------41
五．结语-------------------------------------------------------------------------------44
 背景：
随着x86服务器，KVM虚拟化技术以及OpenStack等IaaS管理平台的普及和成熟，
VM 已经可以在不同 X86 服务器厂商的硬件平台上在线无缝迁移。这就日益形成了硬件差
异化不断缩小甚至消失而软件重要性不断提升的一个局面，至此 IT 真正进入”软件定义数
据中心”的时代。
1.新IT时代的诉求
人们发现，虚拟化后的 IT 在部署简单化，在资源高利用率、高可用性、维护便利性等
方面都收获了的巨大的收益。但是，随着流程规模化的进一步需求，IT部门提出了更高的要
求：如何将应用在不同操作系统间实现无缝迁移？如何将开发和生产统一实现“一处构建处
处运行”？如何能把精力和时间从开发——测试——运维的一系列环境重复搭建和调试之
中解放出来？如何使企业从繁杂的基础架构解脱，从而更专注于业务？能否让应用的部署、
分发、负载均衡、高可用性、监控运维等方面也与虚拟机一样有更统一和更简单的方法呢？
也因此， 一些技术、工具、平台等等应运而生。其中就包括了今天我们重点要讲的
Docker容器技术。说起容器技术，我们先看看不得不谈的微服务。
2.微服务理念的流传
微服务的思路不是开发一个巨大的单体式的应用，而是将应用分解为小的、互相连接的
微服务。微服务带来的好处有：第一软件工程上多部门更好协作，第二软件本身的扩展性更
强。一个微服务一般完成某个特定的功能。一些微服务还会发布 API 给其它微服务和应用
客户端使用。运行时，一个微服务实例就可以是一个 Docker 容器，所以微服务天然需要
Docker，所以说微服务与Docker是“相得益彰”的关系。具体如何体现呢？不妨先来看看
下文。
 落地篇：
1. Docker Sidekick
Sidekick 是一种容器，它做了主容器不做的杂事，从而可以让主容器专心的做最核心
的事。这个其实也是Docker容器非常优美好用的地方。比如说，你起了一个服务进程A容
器， 那么这个容器的主要工作就是服务进程 A，但是还有些辅助的工作。我们可以列举一
下：
首先，如果服务进程A要备份数据，怎么做呢？容器时代之前，那么大家就进入shell
上,直接的用rsync，或者起一个定时备份的进程来备份。
但是容器时代不一样了。记住，每个容器最好只干一件事，然后以服务的形式来对外服
务。所以最好的做法是：创建一个Volume容器，服务进程A容器共享Volume容器，然
后另外一个备份Job容器也共享这个Volume容器，然后备份Job容器专门来做备份。你
看，服务进程A、Volume 、备份，三个容器功能清清楚楚的，相互协作但是又各自独立，
架构上也非常容器理解和把握。对于服务进程A容器，其他两个容器就是sidekick。
其次，如果是要重启服务进程A呢？也可以用一个sidekick容器来搞定。
比如服务进程A创建了一个/var/run/A.sock， 然后提供命令行A-ctl restart来重启
服务。CID=$(docker run -d -v /var/run Aservice) 启动A服务，拿到容器CID。然后启
动一个 Sidekick 容器来重启主容器 CID 的服务 A。docker run --volumes-from $CID
Aservice A-ctl restart。
所以请记住，容器只把一件事干好，不要把太多东西都放到一个容器里。正确的方式应
该是一个主容器带一帮 Sidekick 来提供服务，就像黑帮老大带着马仔出入，这样的效率和
架构是最优的。
2. DevOps
在讲述容器技术如何在企业落地之前，请允许我向大家介绍下 DevOps。DevOps
（Development Operations）兴起于互联网公司，基本理念是开发和运维合为一体，把
开源工具拿过来再根据自己的业务特点稍加改动，测试通过后就上线支撑公司的产品和服
务，并一边运维一边改进。这样做的好处是整个过程将更加流程化和更加方便快捷。因为
DevOps本身就是一组过程、方法与系统的统称，它的价值在于为了按时交付软件产品和服
务、开发和运营工作，部门之间必须紧密合作。也就是说，如果把Docker看着是为你提供
了“集装箱 ”，那么DevOps的加入使得这些集装箱运作起来更加有序。
在 DevOps 出现之前，开发的工作流程是：市场调研，需求分析，系统设计，软件编
码，单元测试，集成测试，系统测试，软件发布。运维人员的工作流程是：安装服务器，安
装软件，配置软件，系统运维。很明显在老的模型中，运维人员地位低下，整天做着重复且
枯燥的工作，并且开发和运维之间相互等待资源环境、软件版本、以及Buglist。
所以，能不能使运维专注于提供、维护、监控平台，提供工具，让开发利用运维的工具
发布、维护自己的产品或服务呢？互联网的神仙/屌丝们很快发现，Docker的“一处构建，
处处运行”正是他们需要的。那么有了Docker又如何呢？
首先，他们可以快速构建，整体打包 (Build)。在这个过程中主要是运维和研发需要更
多的协助，编写Dockerfile来构建镜像。
其次，快速交付（Ship） 。研发以镜像作为交付，整体交付给测试人员，缩短研发和
测试之间处理问题的周期。
最后，快速部署（Run） 。Docker镜像保证了环境的一致性，让问题在部署前得到解
决，更重要的是可以基于镜像，快速部署应用。
好了，到这里，我们已经基本确定，我们的企业需要Docker。我们可以不关心服务商
自己写的还是基于开源平台改的， 但是我们要关心他的服务是否可靠、是否稳定、是否便
宜、是否安全、是否在我的企业可以落地。那么当下市场上的服务商们是怎么落地的呢？
3.容器服务如何在企业客户落地—Rancher解决之道
对企业来说，尤其是对企业的 CIO 来说，首先要考虑的问题就是“容器技术如何在我
的企业平稳落地”？
对于非互联网公司的传统企业客户， 以及大量围绕企业客户做集成、交付解决方案的
服务提供商而言，我们需要考虑的一个问题就是怎么样把容器技术以高质量、低成本、易维
护的方式落地到企业的生产环境中来。换句话说，如果把容器技术比做KVM和Xen，我们
需要一个容器界的OpenStack或是CloudStack。
Rancher就是定位在提供“企业私有容器服务”这一核心业务需求上，并提出构建
"企业私有、混合容器云"；"像AppStore一样的企业应用商店实现一键式应用部署
"；”CI/CD 部署流水线优化践行DevOps“以及”轻量级PaaS平台“等多个被企业客
户所关注的一揽子解决方案。
Rancher公司是一家位于硅谷的美国公司，创建人梁胜博士和他的团队一直是专注于
计算技术在企业落地工作的，梁博士创建的CloudStack 项目是很多大的公有、私有IaaS
云的支撑平台，他在早期时还是SUN公司JVM和JNI的开发带头人，所以“云计算”、
“企业客户”是Rancher公司基因当中的两大关注点。
纯粹的Docker和可以落地到企业生产环境的容器平台还是有很大距离的，需要做的
工作至少有以下这些方面：
举几个例子： Rancher 可以统一管理企业内部多个数据中心的虚拟机、物理机容器
环境、以及公有云（阿里、AWS等）内的容器主机，允许我们通过标签把业务灵活的分配
到不同属性的"云"上。
以下调度策略为：把容器运行在阿里云上，并且容器尽量分散在多台阿里云主机，以
提高可用性。
为了实现公有云和私有云间以及同一片云的主机间的容器通讯，Rancher基于SDN
技术创建了 overlay容器网络：
当不同云和不同主机上的容器可以通过容器网络通讯后，再配合Rancher实现的负
载均衡、服务发现、健康检查机制就可以帮助企业实现快速业务搭建和扩展，手动或是自
动的实现容器甚至是容器主机的跨云动态扩容，这一点对“双11”这样的场景特别有用。
企业应用商店和一键部署是另外一个非常强大的功能，这引申出Rancher 对容器云
未来发展方向的一个预见：单纯提供容器编排能力是不够的，提供容器应用的配置管理更
能让“以应用为中心”这一容器技术特点发挥得淋漓尽致。因此我们提供了一个开放式的
框架，在兼容docker-compose.yml 的基础上把与应用配置相关的信息记录在rancher-
compose.yml中，并且允许用户以灵活的方式实现对任何应用的配置管理 ： 你只要提
供docker-compose.yml和rancher-compose.yml ，Rancher会自动在应用商店中探
测到你上架的应用并支持管理你定义的配置项。
上架应用示例：
应用的配置管理：
基于上述技术，可以做的事情有很多，比如通过一个高可用的MySQL服务实现一个
轻量级的PaaS平台：
接入SysDig监控
云的对接：
Hadoop 动态扩容的支持等：http://www.iqiyi.com/w_19rt9qkn7d.html
再次强调，上述能力并非是Hadoop 产品里的，而是通过任何人都可以创建的配置
文件完成的。比如：大家可以通过这种技术实现WebLogic应用部署或是Zabbix 监控方
案等。
CI/CD 优化部署流水线是Docker的拿手项目，Rancher通过上述一键部署能力提供
快速构建的支持。
上面说的主要还是容器管理平台Rancher，我们还有一款产品是RancherOS。它是
一个只有二十几M的操作系统，专门运行容器的。可以看到它的所有系统进程都是在容器
里运行，性能好，升级维护特别方便。更酷的是我们还支持把虚拟机（Windows 或