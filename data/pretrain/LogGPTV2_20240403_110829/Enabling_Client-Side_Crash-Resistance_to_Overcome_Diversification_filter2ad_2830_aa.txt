title:Enabling Client-Side Crash-Resistance to Overcome Diversification
and Information Hiding
author:Robert Gawlik and
Benjamin Kollenda and
Philipp Koppe and
Behrad Garmany and
Thorsten Holz
Enabling Client-Side Crash-Resistance to
Overcome Diversiﬁcation and Information Hiding
Robert Gawlik, Benjamin Kollenda, Philipp Koppe, Behrad Garmany and Thorsten Holz
Horst G¨ortz Institute for IT-Security (HGI), Ruhr-University Bochum, Germany
{firstname}.{lastname}@rub.de
Abstract—It is a well-known issue that attack primitives
which exploit memory corruption vulnerabilities can abuse the
ability of processes to automatically restart upon termination.
For example, network services like FTP and HTTP servers are
typically restarted in case a crash happens and this can be used
to defeat Address Space Layout Randomization (ASLR). Further-
more, recently several techniques evolved that enable complete
process memory scanning or code-reuse attacks against diversiﬁed
and unknown binaries based on automated restarts of server
applications. Until now, it is believed that client applications are
immune against exploit primitives utilizing crashes. Due to their
hard crash policy, such applications do not restart after memory
corruption faults, making it impossible to touch memory more
than once with wrong permissions.
In this paper, we show that certain client application can
actually survive crashes and are able to tolerate faults, which
are normally critical and force program termination. To this
end, we introduce a crash-resistance primitive and develop a
novel memory scanning method with memory oracles without
the need for control-ﬂow hijacking. We show the practicability
of our methods for 32-bit Internet Explorer 11 on Windows
8.1, and Mozilla Firefox 64-bit (Windows 8.1 and Linux 3.17.1).
Furthermore, we demonstrate the advantages an attacker gains
to overcome recent code-reuse defenses. Latest advances propose
ﬁne-grained re-randomization of the address space and code
layout, or hide sensitive information such as code pointers
to thwart tampering or misuse. We show that these defenses
need improvements since crash-resistance weakens their security
assumptions. To this end, we introduce the concept of Crash-
Resistant Oriented Programming (CROP). We believe that our
results and the implications of memory oracles will contribute to
future research on defensive schemes against code-reuse attacks.
I.
INTRODUCTION
In the last years, attackers shifted their focus away from
network services to client applications and especially web
browsers became an attractive target. Adversaries can ap-
parently easily detect memory corruption and similar vul-
nerabilities in such complex programs, as demonstrated by
the steady stream of reported vulnerabilities. In contrast to
server software, client applications have a crucial property:
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23262
to conduct
their attack successfully. In contrast,
they typically terminate immediately on memory corruption
faults or on failed exploit attempts, and do not automatically
restart themselves. Hence, adversaries have usually only one
shot
the
ability of network services to restart
initiated research on
developing sophisticated attack primitives: if programs such as
servers automatically respawn after termination due to a crash,
memory layout information or hidden sections can be deduced
which are otherwise not accessible to an adversary [6, 19, 50].
Until now, a common belief is that such attacks can only
be conducted against restarting programs, especially network
services like FTP and HTTP servers.
In this paper, we challenge this assumption and demon-
strate the ability to handle faults in a manner that memory
corruptions no longer remain an all or nothing primitive
against client software. More speciﬁcally, we demonstrate that
memory corruption vulnerabilities can in fact be used as a side
channel to weaken available security features.
A. Defenses Against Memory Corruption Attacks
For some years, we observe an ongoing arms race between
attackers and defenders in the area of memory corruption
vulnerabilities. From time to time, novel attacks are proposed
that break existing defenses and it is still an open research
problem how memory corruption vulnerabilities can be pre-
vented with a reasonable performance overhead. Gradually it
became apparent that there are several building blocks that can
be used on the defense side to hamper attacks. First, there is
the W ⊕ X (Writable xor eXecutable) security model [39]
that prevents an attacker from redirecting the hijacked control
ﬂow to data of her choice that is then interpreted as code. The
W ⊕ X security model is nowadays directly supported within
processors and the Windows operating systems supports Data
Execution Prevention (DEP) since 2004. In response, different
kinds of code-reuse attacks such as for example return-to-libc,
Return-Oriented Programming (ROP) [49], and many more
variants [7, 12, 44] were developed. Recently, many detection
techniques for code-reuse attacks were proposed [20, 36], but
most of them were also broken shortly afterwards [10, 22, 47].
A second building block is randomization of the address
space, a strategy which can be leveraged to prohibit an
attacker from re-using existing code since the location of
code (or data structures) is not known beforehand. Many
kinds of randomization strategies were proposed over the
years [4, 24, 38] that hide the code layout, and Address Space
Layout Randomization (ASLR) [38] is widely deployed on
modern operating systems. It is a well-known issue that the
low entropy used to randomize a program’s address space
on 32-bit systems is susceptible to brute-force attacks [50].
However, discovering parts of the memory layout in a brute
force manner requires a program which tolerates crashes. Thus,
this way of exploitation is normally only viable on certain
kinds of server software, where each request spawns a new
but equally randomized process. With increasing entropy to
randomize the address space on 64-bit architectures and a hard
crash policy which forbids restarts of the program, brute-force
attacks do not seem to be a viable option anymore these days.
In addition, efﬁcient (re-)randomization schemes seem to be
a promising direction and several papers that propose such
randomization schemes were recently published [3, 13, 17]. It
remains an open question if attacks against such schemes are
viable, especially in the light of memory disclosure attacks.
A third building block attempts to enforce Control-Flow
Integrity (CFI) [1]. The basic idea behind CFI is to verify
that each control ﬂow transfer leads to a valid target based on
a control ﬂow graph that is either (statically) pre-computed
or dynamically generated. Several
implementations of CFI
with different design constraints, security goals, and perfor-
mance overheads were published [18, 26, 59, 60]. However,
several papers recently demonstrated bypasses of these CFI
solutions [16, 19, 21].
B. Subverting Information Hiding
In the presence of these defenses, the successful exploita-
tion of a memory corruption vulnerability poses a challenge
to an adversary. We observe that a successful attack is typ-
ically based on a memory disclosure vulnerability (so called
information leak): such leaks are often the ﬁrst step utilized to
gain some knowledge about the memory layout. Once the code
locations are collected, they can be used to mount a code-reuse
attack (which is in turn used to disable W ⊕ X).
More importantly, we observe that hiding of information in
a program’s address space is a crucial aspect: data structures
with sensitive information have to remain hidden in order to
prevent weakening available security features. For example, in
the presence of ASLR, base addresses of shared modules as
well as stack addresses of running threads, heap boundaries,
and exception handlers have to remain hidden from an attacker.
With ﬁne-grained randomization schemes [5, 24, 56], the same
problem applies: an adversary might be able to uncover the
address space via novel attack methods and leverage this
information to perform just-in-time attacks similar to the work
by Snow et al. [51].
Other security features rely on information hiding as
well, for example hidden regions to store metadata used to
perform integrity checks. Consider for example Code-Pointer
Integrity (CPI) [26], the state-of-the-art code pointer protection
approach: on platforms where the implementation is based
on information hiding (e.g., Intel’s x86-64 architecture), such
pointers (and pointers to such pointers) are stored in a hidden
memory region to impede tampering with them. Recently
and concurrently to our work, a successful attack against the
current CPI implementation was demonstrated that leaks this
hidden memory region [19]. Furthermore, all CFI implemen-
tations that leverage a shadow stack need to prevent this stack
from being leaked to an attacker [9, 15].
2
C. Novel Memory Probing Method
In this paper, we show that fault-tolerant functionality is
available in web browsers and—when combined with memory
disclosures—delivers a novel way to explore unknown memory
territories. It is a common belief that a hidden memory region
without references to it is undiscoverable in practice with-
out code-execution or code-reuse attacks. Thus, an important
building block towards revealing reference-less memory is the
ability to scan the address space without forcing the program
into termination. This is viable in server software [6, 19, 50],
but seems impossible in web browsers due to their hard crash
policy (i.e., after three consecutive crashes, Internet Explorer
stops restarting automatically). We demonstrate that a memory
scanning ability in web browsers can be achieved and use
this as a base to subvert memory secrecy and randomization
approaches without control-ﬂow hijacking, code injection or
code-reuse attacks. Deducing hidden information with memory
scans in turn enables an adversary to conduct code-reuse
attacks.
In our experiments, we were able to scan the address space
with 18,357 probes per second in 64-bit Firefox on Linux,
with 718 probes per second in 64-bit Firefox on Windows,
and 63 probes per seconds in 32-bit Internet Explorer. We
leverage memory oracles as an extension of information leaks,
which either return the content at speciﬁed memory or de-
liver an event in case of unmapped memory, to learn more
about the structure of the address space. This enables us to
circumvent standard ASLR implementations and recently pro-
posed defense schemes are undermined. Additionally, we use
our crash-resistance primitive together with function chaining
to achieve Crash-Resistant Oriented Programming (CROP):
arbitrary exported system calls or functions can be dispatched
in a fault-tolerant manner.
In summary, we make the following contributions:
• To the best of our knowledge, we are the ﬁrst to introduce
the ability in web browsers to survive crashes and to run
in fault-tolerant mode. We term this new class of primitive
crash-resistance.
• We develop new methods allowing to scan memory inside
client software based on crash-resistance and memory
oracles. We thereby do not need control-ﬂow hijacking,
code injection, or code-reuse. Furthermore, we demon-
strate the practical feasibility of our methodology for
Internet Explorer 32-bit on Windows and Mozilla Firefox
64-bit on Linux and Windows.
the advantages an adversary gains with
crash-resistance and memory oracles to weaken recently
proposed security features based on code hiding and
(re-)randomization. More speciﬁcally, we show that mem-
ory secrecy enforced through memory layout randomiza-
tion is ineffective even in a large address space (i.e.,
on x86-64 systems), uncovering sensitive information
protected via information hiding.
• Finally, we develop a new code-reuse technique based on
function chaining in combination with crash-resistance.
We term this technique Crash-Resistant Oriented Pro-
gramming (CROP).
• We present
II. TECHNICAL BACKGROUND
In the following, we ﬁrst introduce the adversarial capabil-
ities and the defense model we use throughout this paper. Fur-
thermore, we describe several state-of-the-art defense strategies
and brieﬂy discuss potential shortcomings.
A. Adversary Model
We assume that the adversary has an initial vulnerability
such as a use-after-free or a restricted write (such as a byte
increment/decrement or null byte write) to an attacker-chosen
address. We assume as well that the initial vulnerability leads
to the ability to read from and write to arbitrary addresses,
using a scripting environment such as JavaScript. These as-
sumptions are consistent with recent exploitation of memory
corruptions in web browsers [13, 14, 17]
Furthermore, we assume that the target system incorporates
the following defense mechanisms against the exploitation of
memory corruption vulnerabilities:
• Non-executable memory: The target OS implements the
W⊕X security model that is applied to all non-executable
pages. Thus, only code pages gain the execute permission
in order to hamper code injection attacks.
• Memory diversiﬁcation: The adversary has to tackle sev-
eral levels of randomization techniques starting with the
widely deployed coarse-grained ASLR that randomizes
modules, over to ﬁne-grained address space randomiza-
tion on the instruction/basic block/function level [5, 23,
24, 37, 56], to re-randomizing code such as proposed in
Isomeron [17].
• Control-ﬂow integrity: As CFI implementations such as
Microsoft’s Control Flow Guard (MS-CFG) begin to be
deployed in commodity operating systems, we assume
that coarse-grained CFI [59, 60] and ROP protections [20]
are active on the target OS.
• Execute-no-read memory: We further restrict the attacker
by enforcing non-readable code pages (R ⊕ X) as pro-
posed by recent JIT-ROP defenses [2, 13]. Consequently,
any read attempt to code results in an access fault.
• Hard crash policy: We assume that a program does not
automatically restart after a crash and that a user will
not open a potentially dangerous web page again after it
crashed a web browser once.
B. Randomization Techniques
Several randomization techniques were proposed over the
last years and we brieﬂy review the different approaches. Fur-
thermore, we discuss potential shortcomings of such methods.
1) Address Space Layout Randomization: All state-of-the-
art operating systems deploy ASLR. This feature randomizes
the base address of shared libraries and executables, all stacks,
heaps, and other structures. Randomization is performed at
load time of a program and ideally no locations of speciﬁc
memory are predictable. However, there exist drawbacks: off-
sets to data structures and code within a shared library remain
constant and are susceptible to static code-reuse attacks. If one
library base address is revealed with one memory disclosure,
the adversary knows the layout of the complete module [53].
3
2) Fine-Grained ASLR: To overcome the constant layout
in shared modules and to prevent an attacker to conduct static
code-reuse attacks, several schemes of ﬁne-grained random-
ization were developed. They randomize the code layout [23],
replace instructions with semantic equivalents [37], or alternate
the order of basic blocks [56]. These methods are applied
during load time of a program. Unfortunately, these defenses
can be bypassed if an adversary discloses code pages and
assembles a code-reuse payload dynamically on the ﬂy [51].
3) Re-Randomization: To hinder dynamic code-reuse at-
tacks, re-randomization is applied to programs: if an adversary
discovers code locations via memory disclosure vulnerabil-
ities, she cannot use them as re-randomization changes the
code layout in between. Isomeron [17] applies ﬁne-grained
randomization in the load phase of a program to ensure that not
only basic blocks or modules are placed at different addresses,
but also single code snippets. Furthermore, Isomeron applies
re-randomization on the granularity of function calls during
runtime. In a coin-ﬂip manner, it decides whether the original
or a diversiﬁed copy of a function is executed. This approach
thwarts code-reuse attacks like ROP and JIT-ROP. However,
we found that speciﬁc structures are very challenging to re-
randomize, especially data structures to which dynamic access
needs to be maintained during a program’s runtime (see
Section IV-A1). Thus, we show that an adversary can still
gather sufﬁcient information and conduct code-reuse attacks.
C. Security by Information Hiding
As noted above, hiding of information in a program’s
address space is getting more and more into the spotlight
of interest. Note that all structures with sensitive information
have to remain hidden to prevent an adversary from leaking
them (and thus weakening available security features). In the
context of ASLR, the following information is for example
considered to be sensitive: base addresses of shared modules,
stack addresses of running threads, heap boundaries, and