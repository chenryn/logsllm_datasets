### 5. Vulnerability Analysis Overview

In this work, we analyze (EC)DSA nonce leakage in OpenSSL, LibreSSL, and BoringSSL. Our analysis covers the entire lifecycle of nonces, including generation, modular exponentiation for DSA or scalar multiplication for ECDSA, modular inversion, and the final modular multiplication. The results are summarized in Table 1 and discussed below. As noted in Section 4, our analysis cannot provide a mathematical proof of security.

**Nonce Representation:**
- **OpenSSL and LibreSSL:** These libraries use Bignumbers to represent nonces, optimizing memory usage by using fewer memory words for smaller numbers. This minimal representation can leak the length of small nonces during subsequent computations.
- **BoringSSL:** This library avoids Bignumber-related vulnerabilities by not shrinking sensitive Bignumbers, ensuring a consistent memory footprint.

**Nonce Generation:**
- **LibreSSL and BoringSSL:** Nonces are generated via rejection sampling, resulting in uniformly distributed nonces.
- **OpenSSL:** Nonces are generated by truncating a large random number, introducing a negligible bias. OpenSSL also incorporates the private key into nonce generation to mitigate potential weaknesses in random number generators.

**Modular Exponentiation:**
- **Fixed-Window Implementations:** These are constant-time and did not reveal any leaks.
- **Padding Leaks:** OpenSSL and LibreSSL have critical leaks due to padding the nonce before exponentiation, enabling cache attacks that can lead to full key recovery. While a patched version of OpenSSL mitigates this vulnerability, it remains susceptible to more sophisticated attacks, as demonstrated in Appendix B.

**Scalar Multiplication:**
- **Leakage:** Similar to DSA exponentiation, OpenSSL and LibreSSL leak information when padding the nonce. However, the default multiplication routines use blinding to make side-channel leakage independent of the nonce.
- **Additional Protections:** Both OpenSSL and BoringSSL offer optimized constant-time windowed multiplication routines for several NIST curves.

### 6. Detailed Analysis

#### 6.1 Nonce Representation

**OpenSSL and LibreSSL:**
- **BIGNUM Struct:** Each Bignumber is stored in a `BIGNUM` struct with a lazily allocated array of limbs (e.g., 64-bit words). The number of allocated limbs is tracked by the `dmax` field, and the actual used limbs are tracked by the `top` field.
- **Minimal Form:** Bignumbers are represented in their minimal form, and the `top` field is adjusted to exclude leading zero limbs. This optimization avoids unnecessary computations and increases performance but introduces side-channel leakage.

**BoringSSL:**
- **Hardened Implementation:** BoringSSL has abandoned the minimal representation invariant of Bignumbers, introducing a `width` field to fix the top to the maximum width in advance, thus avoiding the Bignumber-related leaks found in OpenSSL and LibreSSL.

**Small Nonce Vulnerability (V1):**
- **Nonce Length:** Nonces are generated in the range [1, q-1]. If the modulus `q` is slightly above a word boundary, the generated nonce may use fewer limbs than `q`. An attacker learning the value of `top` can distinguish small nonces from large ones and mount a key recovery attack.
- **Example:** In Figure 1, the first nonce `k1` uses two limbs, while the second nonce `k2` uses one limb. If `q` uses only four bits of the topmost limb, an attacker can learn whether the four topmost bits of `k` are zero.
- **Leakage Calculation:** For i386 (`w=32`) and x86_64 (`w=64`), a small nonce leaks \( L = \log_2(q) \mod w \) bits, occurring every \( 2^L \)th signature on average. By collecting enough signatures, an attacker can recover the private key using lattice or Bleichenbacher attacks.

**Table 3: OpenSSL/LibreSSL Curves Leaking Small (Inverse) Nonces**

| Curve          | L32 | L64 |
|----------------|-----|-----|
| sect163r1      | -   | -   |
| sect163r2      | 9.0 | 9.0 |
| sect233k1      | -   | -   |
| sect233r1      | -   | -   |
| sect239k1      | -   | -   |
| c2pnb163v1     | -   | -   |
| c2pnb163v2     | -   | -   |
| c2pnb163v3     | -   | -   |
| c2tnb359v1     | 2.0 | -   |
| secp112r1      | 2.0 | -   |
| c2tnb431r1     | 2.0 | -   |
| secp521r1      | 9.0 | -   |
| wap-wtls1      | 7.0 | -   |
| wap-wtls3      | 8.0 | -   |
| prime239v1     | 15.0| 13.0|
| wap-wtls4      | 13.0| 13.0|
| prime239v2     | 15.0| 13.0|
| wap-wtls5      | 2.0 | -   |
| wap-wtls6      | 2.0 | -   |
| wap-wtls8      | 2.0 | -   |
| wap-wtls10     | 2.0 | -   |
| sect113r1      | 16.0| 16.0|
| sect113r2      | 16.0| 16.0|
| wap-wtls11     | 2.0 | -   |
| sect131r1      | 2.0 | -   |
| sect131r2      | 2.0 | -   |
| c2tnb239v1     | 13.0| 13.0|
| c2tnb239v2     | 12.4| 12.4|
| c2tnb239v3     | 11.7| 11.7|

**Exploitation:**
- **Leakage Points:** Leakage occurs in nonce generation, scalar multiplication, and nonce inversion. For example, the code in Listing 1 converts the nonce stored in `BIGNUM` `a` into its Montgomery representation. If both `a` and `b` have the full word length of `q`, the if branch executes an optimized multiplication. If `a` is one limb smaller, OpenSSL falls back to less secure functions, leading to side-channel leakage.

By following this methodology, we uncovered numerous vulnerabilities, as summarized in Table 2. To provide an intuition about their exploitability, we rank them as easy to exploit (if a Flush+Reload attack suffices for extracting nonce bits), medium (for more elaborate attacks requiring performance degradation or Prime+Probe), or hard (for tiny leakage, e.g., few assembler instructions on a single cache line, which might be only exploitable in an SGX setting [17]).

### Data GUI and Tool Open-Sourcing

The DATA GUI was crucial in managing the amount of data collected during our analysis. We have open-sourced our tool, including the DATA GUI, and provided examples to reproduce our results. Figure 5 in Appendix A depicts the DATA GUI, showing a discovered control-flow leak in BoringSSL.

---

This revised text aims to provide a clearer, more coherent, and professional presentation of the original content.