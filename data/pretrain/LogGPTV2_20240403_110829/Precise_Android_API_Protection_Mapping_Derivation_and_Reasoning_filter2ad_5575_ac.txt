AFG in Figure 6(C) starting from the root node. The traversal reveals
6 disjoint unique paths leading to Granted. Each path condition is
constructed by conjoining the predicates and assignments along
the way. We use variable Perm to denote the needed permission(s),
U ID to denote the enforced UID and variables xi to denote the ith
parameter of the API.
[p1 ∨ ..p6];
[¬x4 = U ser H andle .дetU ser Id∧
¬U I D = SY ST EM∧
Perm ∋ I NT ERACT _..U SERS)∧
¬U I D = mPackaдes .дet(x1).pkд.uid∧
Perm ∋ CH AN GE_..._ST AT E];
[¬x4 = U ser H andle .дetU ser Id∧
U I D = SY ST EM∧
¬U I D = mPackaдes .дet(x1).pkд.uid∧
Perm ∋ CH AN GE_..._ST AT E];
...
Observe that the above formula is complicated and verbose.
Nonetheless, our reduction step produces a succinct representation
as in Figure 6(D).
:=
p2
5 USING PROTECTION MAPPING TO
IDENTIFY SECURITY PROBLEMS
The existing Android permission maps have been a valuable input
to address classic Android security problems, particularly, permis-
sion over-privilege and component hijacking. Intuitively, since the
existing statically-derived efforts [6, 7] present an API’s required
protection as a single set of conjoint permissions, using such per-
mission sets to identify the aforementioned two problems is quite
straightforward. Simply put, to detect overprivilege, they extract the
set of permissions an app possesses and compare it with the invoked
API’s permission map. Similarly, to infer whether an app’s com-
ponent is correctly protected, the solutions compare the enforced
component protection with the permission set of its control-flow
reachable APIs.
Since Arcade uses first-order logic formulas to precisely model
access control mechanisms, using our protection map requires
sophisticated analysis of the apps and detecting security issues
requires reasoning about satisfiability of logic formulas. In the fol-
lowing subsections, we describe how we analyze apps and use
protection maps to detect security problems.
5.1 Over-Privilege Detection
As discussed in the previous section, our constructed protection
map for each Android API is a first-order logic formula (as illus-
trated in Figure 6(D)), which essentially denotes a disjunction of
the path conditions leading from the entry point of the API to the
Granted node in the AFG. In order to invoke a protected Android
API, a calling app needs to satisfy at least one of the path condi-
tions. To detect over-privilege problems, we identify the weakest
permissions the app needs to possess. We translate the problem
into a logic inference problem.
Recall that our protection map formula contains several con-
textual factors affecting subsequent enforced security protection.
That is, different protections might be enforced depending on the
contextual condition an app holds. Intuitively, the context of an
API invocation within an app contains (1) a number of implicit se-
curity properties of the app including the app’s UID, User ID, and
system settings; these properties cannot be inferred by analyzing
the source code of the app, rather, they are implicitly encoded in
various configuration files; and (2) the values of API parameters that
can be explicitly determined by analyzing the app source code using
traditional data flow analysis. Formally, we model context C = I ∧ P.
I is the implicit set of conditions and P the set of explicit conditions.
Intuitively, I is a conjunction of individual implicit conditions,
such as i1 ∧ i2 ∧ ... ∧ in, where it represents an implicit condition.
For example, to represent that an app’s UID is 1000, we have it
being (U ID = 1000). Similarly, P is a conjunction of individual
explicit conditions, such as e1 ∧ e2 ∧ ... ∧ en, where ei represents
the condition for the ith API parameter. For example, if the first
parameter may have values 1 and 2, we have e1 being x1 = 1∨x1 = 2
with x1 denoting the first API parameter in our protection map.
For the cases where we cannot extract the value(s) of an explicit
condition (e.g., the parameter value is provided at runtime), we
conservatively assume it can be any value.
Example. Let us revisit the example API of TelephonyRegistry.
listen(...) in Section 2, in which events is the 3rd parameter
of the API. The system app GmsCore.apk (version 6.0-2166767)
invokes the API as follows.
1 mTelephony.listen(.., LISTEN_CELL_LOCATION | LISTEN_DATA_CONNECTION_STATE | ...)
We extract the explicit condition for parameter events (e3) from
the above call site.
events
=
LI ST EN _CELL_LOCAT IO N
| LI ST EN _DAT A_CO N N ECT IO N _ST AT E |...
2
Given the context C for an API at a specific call site and the
protection mapping M of the API, we query a constraint solver for
the solution of variable Perm, which denotes the needed permis-
sion(s), in order to satisfy C ∧ M. Intuitively, the permission(s) need
to satisfy both the contextual condition and the protection map.
Since there may be multiple solutions, we enumerate the possible
solutions one by one as follows. Assume the first solution is S1, in
order to acquire the second solution, we query C ∧ M ∧ Perm (cid:44) S1.
Assume the second solution is S2, in order to acquire the third solu-
tion, we query C ∧ M ∧ Perm (cid:44) S1 ∧ Perm (cid:44) S2, and so on until it
is unsatisfiable (UNSAT). Since the number of solutions is limited,
the process quickly terminates.
Example Continued. The permission map M of the previous API
is in Figure 2. Inferring a possible permission Perm that GmsCore
should satisfy to invoke listen under the contextual condition C
= {e3} entails solving the conjunction of C ∧ M. The solver returns
two solutions S1 and S2.
:=
:=
Perm = {ACCESS .. , READ_P RIV ..}
Perm = {ACCESS .. , READ_P HO N ..} 2
S1
S2
Given the multiple solutions, each denoting some permission
configuration, we need to identify the weakest one. Note that in
Android, different permissions have various privilege levels. Accord-
ing to [2], these permissions can be classified into four categories,
whose strength can be ordered as follows. System = Signature >
Dangerous > Normal. Based on this partial order, we can determine
the weakest condition(s) from the multiple solutions returned by
the solver.
In our example, the returned solutions S1 and S2 correspond to
different privilege levels. Since READ_PRIVILEGED_PHONE_STATE
and READ_PHONE_ STATE fall into the System and Dangerous protec-
tion levels, respectively, the first solution S1 is more privileged than
the second one S2. Hence, requesting S1 would lead to a permission
over-privileged problem.
5.2 Component Hijacking Detection
Classic solutions [25, 37] detect whether a component is correctly
protected through comparing its enforced permission at its manifest
declaration to the permission sets of its control-flow reachable
APIs. If the former is weaker than the latter, a flag is raised. Given
our protection map structure, we translate detecting this class of
vulnerabilities into a boolean satisfiability problem.
Specifically, we define the same constraints C and M as in the
previous section, where C is the contextual condition an app’s
component holds at its control-flow reachable API and M is our
extracted protection map. In addition, we need to define one more
constraint D denoting the enforced permission at the component’s
declaration. Now, detecting whether the target component is not
safe is therefore a test of satisfaction of D ⇒ C ∧ M. Intuitively, we
are testing if D is equally strong or stronger than C ∧ M.
Permission Normalization. However, the above test may lead to false
positives if not carefully designed due to the following app devel-
opment practice: Any permissions in the signature class indicate
the same level of protection. As such, if a component is meant to
provide a privileged functionality exclusively to other apps signed
by the same developer, an arbitrary signature level permission may
be used, which may not appear in its invoked API protection map.
The practice is safe since the target components are actually overly
protected. However, without encoding the strength of permissions,
the solver would return UNSAT, leading to false positives.
To handle such cases, we first classify the permissions in both
M and D to the four categories mentioned in the previous section.
We further encode the partial order of categories as part of the
formula. As such, the solver could correctly compare the different
permissions. Details about such normalization are omitted as it is
not our contribution.
6 EVALUATION
We implement Arcade on top of Wala [19], which is a comprehen-
sive analysis infrastructure for Java and Dalvik code and can handle
large code bases. It has been used in a number of Android analysis
projects (e.g., [2, 16–18, 24, 25]). It provides a rich set of analysis
primivitves such as alias analysis, dependence analysis, and entry
point recogniztion for Android apps. We have also implemented a
simplified version of Android IPC resolver similar to [2, 32]. We use
Z3 [26] as our solver. For each Android image under study, Arcade
extracts and processes its framework class files. As different images
might pack the code differently, we employ several existing tools
to handle each format gracefully [1, 4, 8, 31].
6.1 Analysis of API Protection Map
Our proposed path-sensitive analysis of the Android framework
produced a protection map that correlates APIs with a set of disjoint
protection paths dictated by input conditions. Each path is further
denoted with a set of conjoint conditions. While the achieved results
of our tool Arcade partially align with a subset of the prior permis-
sion maps (e.g., when the protection map has a single permission),
they also demonstrate differences for a significant percentage of An-
droid framework APIs (∼ 41%), indicating the potential inaccuracy
of existing mappings.
In this section, we discuss the characteristics of our constructed
API protection mapping and compare the results to the permission
specification produced by the most recent effort Axplorer [7].
6.1.1 Codebases.
AOSP codebases. We use Arcade to extract the protection map-
ping for 4 Android versions: 6.0 and 6.0.1, 7.0 and the recent release
7.1. Table 1 (rows 2 to 5) summarizes the statistics generated for the
analyzed images. As shown, the framework complexity increases
between major versions: the number of exposed framework APIs
(column 3) is larger in the latest releases.
Custom codebases. Our analysis mainly aims to generate pro-
tection specifications for AOSP images, since 3rd party and AOSP
system-app developers mostly invoke AOSP’s documented APIs.
However, we propose to further analyze custom Android images
for two reasons. First, we aim to provide new insights about the ef-
fect of customization on our generated maps. Second, since vendor
apps, accounting for the majority of preloaded apps [37], do invoke
custom APIs, we believe that providing protection references for
vendor APIs can be quite valuable. Table 1 lists our collected cus-
tom images. We select representative images from major vendors:
Samsung Galaxy S6 Edge (6.0.1), S8 (7.0), Sony Xperia XZ (7.0) and
LG Q6 (7.1). As shown, it is obvious that the vendors conduct heavy
customization. The number of exposed APIs drastically increases
in the custom images.
Performance. Column 2 in Table 1 reports the time consumed by
Arcade to process and analyze our collected images. As shown, it
takes on average 36.5 min to conduct our analysis, with Samsung S7
incurring the longest time (47 min). Since this is a one time effort,
the time is acceptable.
6.1.2 API Protection Mapping Breakdown.
Table 1 further presents a breakdown of our generated API pro-
tection mapping. The 4th column reports the number of APIs where
at least one Android protection path has been identified. That is,
there is access control in these APIs. Please note that this reported
number is slightly larger than what has been reported by Axplorer;
e.g., for AOSP 7.0, Axplorer reports 1640 protected APIs, while
Arcade reports 1776. This is because Arcade considers more pro-
tection features (UID checks, etc).
The 5th column presents the number of APIs where an absolute
permission(s) enforcement is detected. That is, it denotes the APIs in
which there is only one path leading from the entry to the Granted
node in the AFGs. There may be multiple security checks along the
path, meaning that multiple permissions are required. The following
protection maps are examples of absolute permission checks: Perm =
{MANAGE_FINGERPRINT}, Perm ={ RECEIVE_SMS, SEND_SMS}.
Please note that the APIs having absolute permission mapping must
have the same requested permissions reported in Axplorer as well,
since this latter constructs the permission mapping required for an
API as a set of permissions.
The 6th column reports the number of APIs where a permis-
sion is conditionally enforced (i.e., different security checks are
required in different paths leading to Granted in AFGs). As such,
these APIs should have at least 2 disjoint protection paths. The
following protection maps illustrate such cases: Perm = {INTER-
ACT_ACROSS_USERS}∨ x1 = UserId, Perm = {SCORE_NETWORKS}
∨ Perm = {BROADCAST_NETWORK_PRIVILEGED}.
We report similar analysis results for two other protection fea-
tures: UID and User Id checks. Columns 7 and 8 present the number
of APIs where absolute and conditional UID checks are present,
respectively. An example of absolute UID check is UID = SYS-
TEM_UID, while an example of conditional UID check is UID =
SYSTEM_UID ∨ Perm = {MANAGE_APP_TOKENS}, meaning that
the caller needs to be either SYSTEM or holds the permission MAN-
AGE_... to invoke the API. Columns 9 and 10 depict the results for
the User checks. Please note that the conditional UID or UserId
checks paths might (partially) overlap with the conditional permis-
sion enforcement paths.
Significance of Path-Sensitive Analysis. The last column of
Table 1 presents the ratio of detected conditional protection en-
forcement. As depicted, it constitutes on average ∼41% of the en-
forced checks (for AOSP). Since they do not perform path-sensitive
analysis, existing static analysis approaches (e.g., PScout and Ax-
plorer) would not be able to accurately generate permission maps
for this significant portion, rather, their solutions are an approxi-
mation. This result clearly highlights the need for our conducted
path-sensitive analysis.
Importance of Other Security Features. Although not as sub-
stantial as absolute permissions checks, Absolute UID or UserId
checks constitute∼6.9% of total checks for AOSP. Their conditional
enforcements are more substantial (∼28%). Hence, to generate an
accurate protection map, these features should be considered.
Effect of Customization. Although the sample LG and Sony
images have a similar conditional security checks ratio to AOSP,
Samsung’s protection map demonstrates that vendor customization
may affect this number. Samsung exhibits the highest conditional
checks ratio: Up to 51%, which further proves the need for path-
sensitive analysis in the construction of protection maps.
6.1.3 Protection Mapping Complexity.
As discussed, our protection map consists of disjoint protection
paths. Intuitively, the count of disjoint paths identified per API (i.e.,
paths to Granted node in AFGs) reflects the complexity level for
the adopted access control. The more paths are detected, the more
complex the access control is. Figure 7 presents the distribution of
protection paths count generated for AOSP 6.0.1 and 7.0.
As illustrated, the protection path count ranges from one single
path to as many as more than 8 paths for a few APIs, with one being
the most dominant. The next dominant path count is 2 protections
paths followed by 4 paths. Observe that there is also an increase in
complexity between versions 6.0.1 and 7.0.
6.1.4 Conditional Protection Characteristics.
In an effort to provide some insights about the nature of condi-
tional protection enforcements, we report the most common disjoint
protection paths generated by Arcade. Recall that disjoint protec-
tion paths A and B denote the cases where either A or B is satisfied,
Table 1: Breakdown of API Protection Mapping Results
Image
AOSP 6.0
AOSP 6.0.1
AOSP 7.0
AOSP 7.1
S6 Edge (6.0.1)
S8 (7.0)
LG Q6 (7.1)
Sony Xperia XZ (7.0)
Analysis Time (min) # Exposed APIs # Protected APIs # Permission Checks
Absolute Conditional Absolute Conditional Absolute Conditional
# UID Checks
# User Checks
Conditional Checks
Ratio (%)
27
28
35
35
44
47
37
38
4117
4189
5073
5274
9184
8616
6676
8383
1510
1519
1776
1832
2566
2743
1988
2022
842
844
875
882
1030
1091
988
1059
564
570
648
680
1107
1172
779
776
68
69
71
88