with respect to φi for every i ∈ [1, m]. In other words, for SAFE,
one may check whether U is safe with respect to φi independently
from φj (i (cid:54)= j). However, when it comes to UTS, such indepen-
dency no longer exists and one has to take into account whether
every user in U is used to satisﬁed some φi in the term φ.
Proofs for the P results in Theorem 2
To prove all the P results in Figure 1, it sufﬁces to prove
that the three cases SAFE(cid:104)¬, +,(cid:117),(cid:116)(cid:105), SAFE(cid:104)¬, +,(cid:116),(cid:175)(cid:105), and
SAFE(cid:104)¬, +,⊗(cid:105) are in P. We ﬁrst prove the following lemma,
which will be useful. We need the following deﬁnition taken
from [6].
Deﬁnition 10. A term is in level-1 canonical form (called a 1CF
term) if it is t or t+, where t is a unit term. Recall that a unit term
can use the operators ¬, (cid:117), and (cid:116).
Lemma 3. The following Properties hold.
1. A userset X satisﬁes a unit term t if and only if X is a sin-
gleton set and the only user in X satisﬁes t.
2. A userset X satisﬁes a term t+, where t is a unit term, if and
only if every user in X satisﬁes t.
3. If a userset X satisﬁes a term φ that uses only ¬, +,(cid:117),(cid:116),
then every user in X satisﬁes φ.
4. A userset X is safe with respect to a 1CF term φ if and only
if there exists a user in X that satisﬁes t.
PROOF. Properties 1 and 2 follow from the deﬁnition of term
satisfaction. Observe that a unit term can be satisﬁed only by a
singleton set.
Property 3. The term φ can be decomposed into subterms in 1CF
form, connected using (cid:117) and (cid:116). By deﬁnition, X satisﬁes φ1 (cid:117) φ2
218
if and only if X satisﬁes both φ1 and φ2, and X satisﬁes φ1 (cid:116) φ2
if and only if X satisﬁes either φ1 or φ2. Identify all 1CF subterms
that X satisﬁes, it follows from Properties 1 and 2 that each user in
X satisﬁes all these subterms. Therefore, each user satisﬁes φ.
Property 4. For the “if” direction, if X contains a user u that
satisﬁes t, then {u} satisﬁes the term φ, and thus X is safe with
respect to φ. For the “only if” direction, if X is safe with respect
to φ, then X contains a subset X0 that satisﬁes φ, any user in X0
must satisfy t according to Properties 1 and 2.
Lemma 4. SAFE (cid:104)¬, +,(cid:116),(cid:175)(cid:105) is in P.
PROOF. A userset X is safe with respect to (φ1(cid:116)φ2) if and only
if either X is safe with respect to φ1 or X is safe with respect to φ2.
Furthermore, X is safe with respect to (φ1(cid:175) φ2) if and only if X is
safe with respect to both φ1 and φ2. Therefore, one can determine
whether U is safe with respect to φ that uses only the operators in
{¬, +,(cid:116),(cid:175)} by following the structure of the term until reaching
subterms in 1CF. From Property 4 of Lemma 3, checking whether
U is safe with respect to such a term amounts to checking whether
there exists a user in U that satisﬁes t, which can be done in poly-
nomial time.
Lemma 5. SAFE (cid:104)¬, +,(cid:116),(cid:117)(cid:105) is in P.
PROOF. Given a term φ using only operators in {¬, +,(cid:116),(cid:117)},
we prove that a userset X is safe with respect to φ if and only if
there exists a user u ∈ X such that u satisﬁes φ. The “if” direction
follows by deﬁnition. For the “only if” direction: Suppose that X
contains a nonempty subset X0 that satisﬁes φ, then by Property
3 of Lemma 3, every user in X0 satisﬁes φ; thus X must contain
a user that satisﬁes φ. Therefore, to determine whether X is safe
with respect to φ, one can, for each user in X, check whether the
user satisﬁes φ. From [6], checking whether one user satisﬁes a
term using only operators in {¬, +,(cid:116),(cid:117)} can be done in P.
Lemma 6. SAFE (cid:104)¬, +,⊗(cid:105) is in P.
PROOF. Given a term φ that uses only the operator ⊗, we show
that determining whether a userset X is safe with respect to φ under
a conﬁguration (cid:104)U, UR(cid:105) can be reduced to the maximum matching
problem on bipartite graphs, which can be solved in O(M N ) time,
where M is the number of edges and N is the number of nodes in
G [8].
Let s be the number of 1CF terms in φ and t = |X|. Since ⊗
is associative [6], φ can be equivalently expressed as (φ1 ⊗ φ2 ⊗
··· ⊗ φs), where each φi is a 1CF term . Let X = {u1,··· , ut}.
We construct a bipartite graph G(V1 ∪ V2, E), where each node
in V1 corresponds to a 1CF term in φ and each node in V2 cor-
responds to a user in X. More precisely, V1 = {a1,··· , as},
V2 = {b1,··· , bt}, and (ai, bj) ∈ E if and only if {uj} satisﬁes
φi. The resulting graph G has s + t nodes and O(st) edges, and
can be constructed in time polynomial in the size of G. Solving the
maximal matching problem for G takes time O((s + t)st).
We now show that X is safe with respect to φ if and only if
the maximal matching in the graph G has size s. If the maximal
matching has size s, then each node in V1 matches to a certain
node in V2, which means that the s 1CF terms in φ are satisﬁed
by s distinct users in X; thus X contains a subset that satisﬁes
Ss
φ. If X is safe with respect to φ, by deﬁnition, there exist s dis-
joint subsets X1,··· , Xs such that Xi (i ∈ [1, s]) satisﬁes φi and
j=1 Xj ⊆ X. From our construction of G, we may match a node
corresponding to a user in Xi to the node corresponding to φi. In
this case, a maximal matching of size s exists.
Proving the NP-completeness results in Figure 1
It sufﬁces to prove that the general case SAFE(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105)
is in NP and that the four cases SAFE(cid:104)(cid:117),(cid:175)(cid:105), SAFE(cid:104)(cid:116),⊗(cid:105),
SAFE(cid:104)(cid:117),⊗(cid:105), and SAFE(cid:104)(cid:175),⊗(cid:105) are NP-hard. Below we state lem-
mas that establish these results. The proofs to these lemmas that are
not included in this section are given in Appendix B. For each NP-
hardness result, we discuss the NP-complete problem used in the
reduction.
Lemma 7. SAFE(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105) is in NP.
PROOF. To determine whether a userset U is safe with respect
to a term φ under a conﬁguration (cid:104)U, UR(cid:105), we ﬁrst compute the
syntax tree T of φ. When constructing T , a 1CF term is treated as
a unit and is not further decomposed. In other words, the leaves in
T correspond to sub-terms of φ that are 1CF terms and the inner
nodes correspond to binary operators connecting these sub-terms.
If U is safe with respect to φ, then for each node in the tree, there
exists a subset of U that satisﬁes the term rooted at that node, and
the root of T corresponds to a subset of U. After these subsets
are guessed and labeled with each node, verifying that they indeed
satisfy the terms can be done efﬁciently. From Lemma 3, verifying
that a userset satisﬁes a 1CF term is in P. When the two children
of a node are veriﬁed, checking that node is labeled correctly can
also be done efﬁciently. Therefore, the problem is in NP.
J
In the following, (opkφ) denotes k copies of φ connected to-
i=1ri) denotes (r1 op··· op rn).
gether by operator op and (opn
Given R = {r1,··· , rm}, (opR) denotes (r1 op··· op rm).
Lemma 8. SAFE(cid:104)(cid:117),(cid:175)(cid:105) is NP-hard.
i=1 ri)), where ri is a role.
Jn
We use a reduction from the NP-complete SET COVERING
problem [4]. The term we constructed for reduction has the form
k All) (cid:117) (
((
Lemma 9. SAFE(cid:104)(cid:175),⊗(cid:105) is NP-hard.
Jn
We use a reduction from the NP-complete DOMATIC NUMBER
problem [4]. The term we constructed for reduction has the form
(
Lemma 10. SAFE(cid:104)⊗,(cid:116)(cid:105) is NP-hard.
i=1 ri)), where ri is a role.
N
k(
N
`Fm
N
We use a reduction from the NP-complete SET PACKING prob-
lem [4]. The term we constructed for reduction has the form
(
), where Rj is a set of roles.
Rj)
k
i=1 (
´
We use a reduction from the NP-complete SET COVERING
problem. The term we constructed for reduction has the form
Lemma 11. SAFE (cid:104)(cid:117),⊗(cid:105) is NP-hard.
i=1(ri ⊗N
((cid:117)n
4. COMPUTATIONAL COMPLEXITY
k−1 All)), where ri is a role.
OF SSC
In this section, we study the computational complexity of SSC,
which determines whether a state is safe with respect to a static
safety policy. We will show that SSC in the most general case
(i.e., the policy uses an arbitrary term in which all operators are
allowed) is both NP-hard and coNP-hard, but it is in polynomial
hierarchy coNPNP. A brief introduction on polynomial hierarchy
can be found in Appendix A. Similar to the discussion of SAFE in
Section 3.2, we consider all subcases where only some subset of
the operators in {¬, +,(cid:117),(cid:116),(cid:175),⊗} is allowed.
Theorem 12. The computational complexities for SSC and its sub-
cases are given in Figure 2.
In the following, we prove that SSC is in coNPNP. The proofs to
those intractable cases in Figure 2 are given in Appendix C. In Sec-
tion 4.1, we identify a class of syntactically restricted terms such
that SSC for policies using these syntactically restricted terms is
tractable. The class of syntactically restricted terms subsumes both
cases listed as in P in Figure 2.
Lemma 13. SSC(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105) is in coNPNP.
that
show
PROOF. We
complement
of
the
SSC(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105) is in NPNP.
Because SAFE is in
NP (see Figure 1), an NP oracle can decide whether a userset is
safe with respect to a term. We construct a nondeterministic Oracle
Turing Machine M that accepts an input consisting of a state
(cid:104)U, UR, UP(cid:105) and a policy sp(cid:104)P, φ(cid:105) if and only if (cid:104)U, UR, UP(cid:105)
is not safe with respect to sp(cid:104)P, φ(cid:105). M nondeterministically
selects a set U of users in (cid:104)U, UR, UP(cid:105). If U does not cover P ,
then M rejects. Otherwise, M involves the NP oracle to check
whether U is safe with respect to φ. If the oracle answers “yes”,
then M rejects; otherwise, M accepts, as it has found a userset
that covers P but is not safe with respect to φ, which violates
the static safety policy. The construction of M shows that the
complement of SSC(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105) is in NPNP. Hence,
SSC(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105) is in coNPNP.
Lemma 14. SSC(cid:104)(cid:116),(cid:175)(cid:105) is coNP-hard.
We reduce the coNP-complete VALIDITY problem for propo-
sitional logic to SSC(cid:104)(cid:116),(cid:175)(cid:105).
Lemma 15. SSC(cid:104)(cid:117),(cid:175)(cid:105) is NP-hard.
PROOF. There is a straightforward reduction from SAFE(cid:104)(cid:117),(cid:175)(cid:105)
to SSC(cid:104)(cid:117),(cid:175)(cid:105). Given a term φ using only operators (cid:117) or (cid:175), in
order to check whether a userset X is safe with respect to φ, we
can construct a policy sp(cid:104)P, φ(cid:105) and a state (cid:104)U, UR, UP(cid:105) such that
X is the only set of users in the state that covers P . In this case,
X is safe with respect to φ if and only if the state we constructed
satisﬁes sp(cid:104)P, φ(cid:105). Since SAFE(cid:104)(cid:117),(cid:175)(cid:105) is NP-hard (see Figure 1),
SSC(cid:104)(cid:117),(cid:175)(cid:105) is NP-hard.
Jn
Jm
Remind that a reduction from the NP-complete SET COVER-
ING problem is used to prove that SSC(cid:104)(cid:117),(cid:175)(cid:105) is NP-hard. The
i=1 φi) (cid:117)
term we constructed for the reduction has the form ((
j)). Such information on term construction will be useful
(
in Section 4.1.
j=1 φ(cid:48)
219
SSC(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105)
NP-hard, coNP-hard, in coNPNP
......
. . . . . . . . . . . . . . . . . . . . . . . . .
.........................
SSC(cid:104)(cid:116),(cid:175)(cid:105)
coNP-hard
SSC(cid:104)(cid:117),(cid:175)(cid:105)
NP-hard
......
. . . . . . . . . . . . . . . . . . . . . . . . .
.........................
......
SSC(cid:104)¬, +,(cid:117),(cid:116)(cid:105)
SSC(cid:104)¬, +,(cid:175)(cid:105)
SSC(cid:104)⊗(cid:105)
coNP-complete
in P
in P
Figure 2: Various sub-cases of the Static Safety Checking (SSC) problem and the corresponding time-complexity. Time-complexity
of other subcases can be implied from the subcases shown in the ﬁgure.
Lemma 16. SSC(cid:104)⊗(cid:105) is coNP-hard.
We reduce the NP-complete SET COVERING problem to the
complement of SSC(cid:104)⊗(cid:105).
4.1 The Most General Tractable Form
From Figure 2, when the operator ⊗ is used or when the oper-
ator (cid:175) is used in conjunction with any other binary operator, SSC
is intractable in general. In this section, we show that if the term
in a static safety policy satisﬁes certain syntactic restriction, then
even if all operators except ⊗ appear in the term, one can still efﬁ-
ciently determine whether a state satisﬁes the policy. Furthermore,
we show that the syntactic restriction presented in this section al-
lows the most general form of terms such that SSC is tractable with
these terms.
Deﬁnition 11 (Syntactically Restricted Forms of Terms). The syn-
tactically restricted forms of terms are deﬁned as follows:
• A term is in level-1 syntactically restricted form (called a
1RF term) if it is t or t+, where t is a unit term. Recall that a
unit term can use operators ¬, (cid:116) and (cid:117).
• A term is in level-2 syntactically restricted form (called a
2RF term) if it consists of one or more sub-terms that are
1RF terms, and (when there are more than one such sub-