ua(a, r1) ua(a, r2) ua(a, r3) ua(b, r2) ua(b, r3) ua(c, r2)
pa(r3, t1) pa(r2, t2) pa(r2, t3) pa(r1, t4) pa(r2, t5)
at(u) ← ua(u, r) ∧ pa(r, t) for each t ∈ {t1, ..., t5}
and denoted by DP . By taking the union of the clauses of
Dn and DP , we build a Datalog program Mn=3 allowing us
to monitor the security-sensitive workﬂow of Figure 1. I.e.
Mn=3 is capable of answering queries of the form can do(u,
t) in such a way that all execution and authorization con-
straints are satisﬁed and the workﬂow execution terminates.
An example of a run of the monitor is in Table 2, where
each line represents a state of the system; columns CF and
Auth describe the values of the variables in that state (“To-
ken in” shows which places have a token and the various hti
hold the name of the user who executed task ti); can do(u, t)
represents user u requesting to execute task t and ‘Resp’ is
the corresponding response returned by the monitor (grant
or deny the request). The execution in the table shows two
denied requests, one in line 0 and one in line 2. In line 0,
user a requests to execute task t1 but this is not possible
since a is the only user authorized to execute t4, and if a
executes t1, he/she will not be allowed to execute t4 because
of the SoD constraint between t1 and t4 (see Figure 1). In
line 2, user b requests to execute task t2 but again this is
not possible since b has already executed task t1 and this
would violate the SoD constraint between t1 and t2. All the
other requests are granted, as they do not violate neither
execution nor authorization constraints.
So far, we have described the key ideas underlying our
technique while neglecting eﬃciency considerations related
to the enumeration of all possible terminating execution se-
quences of the security-sensitive workﬂow. If we want our
approach to scale up and handle real-world workﬂows, we
have to design suitable heuristics as discussed in Section 4.
Table 2: A run of the monitor program Mn=3 for the
security-sensitive workﬂow in Figure 1
CF
Auth
p0
p0
# Token in
0
1
2
3
4
5
6
7
p1, p2, p3
p1, p2, p3
p4, p2, p3
p4, p5, p3
p4, p5, p6
p7
ht1 ht2 ht3 ht4 ht5
-
-
b
b
b
b
b
b
-
-
-
-
a
a
a
a
-
-
-
-
-
-
a
a
-
-
-
-
-
c
c
c
-
-
-
-
-
-
-
b
can do
(u, t)
(a, t1)
(b, t1)
(b, t2)
(a, t2)
(c, t3)
(a, t4)
(b, t5)
-
Resp.
deny
grant
deny
grant
grant
grant
grant
-
3. AUTOMATED SYNTHESIS OF RUN-
TIME MONITORS
Considering the speciﬁcation of workﬂows as transition
systems presented in Section 2, we now describe how a sym-
bolic model checker can compute a reachability graph that
represents all terminating executions of the workﬂow (oﬀ-
line phase) and how this is then translated to a Datalog
program that implements the run-time monitor for the WSP
(on-line phase).
3.1 Off-line
As already observed in Section 2.1, it is standard to use
(extensions of) Petri nets to give a formal semantics to work-
ﬂows written in BPM notation [24]. In turn, it is well-known
how to represent (extension of) Petri nets as state transition
systems (see, e.g., [21]), that are composed of a set of state
variables and a set of events, as proposed in [22]. A state of
the system is deﬁned by the values of the variables. A pred-
icate (Boolean function) over the state variables implicitly
deﬁnes a set of states, i.e. the one containing the values of
the variables for which the predicate evaluates to true. A
state satisﬁes a predicate iﬀ it belongs to the set of states
implicitly deﬁned by the predicate. An event has an enabling
condition, which is a predicate on the state variables, and
an action, which updates the state variables. When the en-
abling condition of an event evaluates to true in a given state
s, we say that the event is enabled at s. Executing an event
enabled at state s results in a new state s(cid:48) obtained by ap-
plying the update of the event to the values of the variables
e1→ ···
in s. A behavior is a sequence of the form s0
where si is a state, ei is an event, and state si+1 is obtained
by executing event ei in state si, for i = 0, 1, .... We say
that a state sn is reachable from a state s0 iﬀ there exists a
behavior s0
e1→ ··· sn−1
en−1−→ sn.
e0→ s1
e0→ s1
For the class of security-sensitive workﬂows considered in
this paper, the set V of state variables is the union of a set
VCF and a set VAuth where the former contains a Boolean
variable pi for each place in the Petri net (for i = 0, 1, ...) and
a Boolean variable dt for each transition t in the Petri net,
whereas the latter contains two function variables at and ht
mapping the set U of users to Booleans for each transition
t in the net. Intuitively, pi is true iﬀ there is a token in the
corresponding place, dt is true iﬀ task t has been executed,
at(u) is true iﬀ user u has the right to execute task t, and
ht(u) is true iﬀ user u has executed task t. The enabling con-
dition and the action of an event t are of the following forms:
enabled CF ∧ enabled Auth and act CF||act Auth, respectively,
where enabled CF is a predicate over VCF, enabled Auth is a
predicate over VAuth, act CF (act Auth, resp.) is the parallel
(||) updates of (some of) the variables in VCF (VAuth, resp.),
which are written as x1, ..., xk := v1, ..., vk for xi a state vari-
able and vi is the value to which xi should be updated to.
An update of a function variable f from users to Booleans is
written as f (u) := b where u is a user, b is a Boolean value,
and after the update the function is identical to the previous
one except at u for which the value b is returned. An event is
a tuple (t(u), enabled CF∧enabled Auth, act CF||act Auth) writ-
ten as
t(u) : enabled CF ∧ enabled Auth → act CF||act Auth
(6)
where t is the name of the event (taken from a ﬁnite set)
and u is a user. Notice that an event is parametric with
respect to a user; thus, (6) speciﬁes a collection of events,
one for every u in the set U of users. A security-sensitive
(state) transition system over the ﬁnite set U of users is
a tuple (VCF ∪ VAuth, Tr ) where U is a ﬁnite set of users,
VCF ∪ VAuth is the set of state variables as described above,
and Tr is the set of events obtained by considering all users
in U .
Let U be an unbounded set of users and S = (VCF ∪
VAuth, Tr ) be a security-sensitive workﬂow over a ﬁnite set
U ⊆ U, I and F be two predicates over VCF ∪ VAuth and
VCF, respectively, characterizing the set of initial and ﬁnal
states. (Intuitively, F describes the set of states in which
the security-sensitive workﬂow terminates: to express this,
the variables in VCF are suﬃcient.) The goal of the oﬀ-
line phase is to compute the set B(S, I, F ) of all behaviors
en−1−→ sn such that s0 is an initial state
s0
(i.e. satisﬁes I) and sn is a ﬁnal state (i.e. satisﬁes F ), for
every ﬁnite sub-set U of users in U.
e1→ ··· sn−1
e0→ s1
Symbolic behaviors. We solve the problem of enumer-
ating all possible behaviors of a security-sensitive workﬂow
S = (VCF ∪ VAuth, Tr ) for every sub-set U of users in U
by using a symbolic representation for S and U . We use
ﬁrst-order logic formulae [15] to represent sets of states. A
state formula is a ﬁrst-order formula containing (at most)
the state variables in VCF ∪ VAuth ∪ VUser as free variables
where VUser is a set of variables taking values over the set
U of users. A state formula P evaluates to true (in sym-
bols, s, v |= P ) or false (in symbols, s, v (cid:54)|= P ) in a state
s of the system and for an assignment v of the user vari-
ables (i.e. a mapping from VUser to U ): for each variable x
in VCF ∪ VAuth ∪ VUser that appears free in P , replace x by
its value in s or v and then evaluate the resulting formula.
In other words, state formulae deﬁne predicates or, equiva-
lently, sets of states. Examples of state formulae are (1) and
(2) describing the sets of initial and ﬁnal states, respectively,
of the security-sensitive workﬂow in Figure 2. A symbolic
event is a tuple of the form (6) where, this time, u is a ﬁrst-
order variable in VUser, enabled CF is a state formula over
VCF, and enabled Auth is a state formula over VAuth ∪ VUser,
act CF is as before, and act Auth is of the form f (u) := b
where b is a Boolean value and u is the same variable in the
label t(u). A symbolic security-sensitive transition system is
a tuple (VCF∪VAuth∪Vuser, Ev ) where VCF∪VAuth is the set
of state variables, VUser is the set of user variables, and Ev is
a ﬁnite set of symbolic events. The semantics of a symbolic
security-sensitive transition system (VCF∪VAuth∪VUser, Ev )
is axiomatically deﬁned by using the notion of weakest lib-
eral precondition (wlp) [14]:
wlp(Ev , P )
:=
(t(u):en→act)∈Ev
(en ∧ P [act])
(7)
(cid:95)
where P [act] denotes the formula obtained from P by sub-
stituting the state variable v with the value b when the as-
signment v := b is in act CF and substituting v(x) with ei-
ther v(x) ∨ x = u when v(x) := true is in act Auth or with
v(x) ∧ x (cid:54)= u when v(x) := false is in act Auth for x in
VUser and act := act CF ∧ act Auth. When Ev is a singleton
containing a single symbolic event ev , we write wlp(ev , P )
instead of wlp({ev}, P ). Notice that wlp(Ev , P ) is equivalent
ev∈Ev wlp(ev , P ). To make expressions more compact,
we also write wlp(t(u), P ) instead of wlp(t(u) : en → act, P ).
to (cid:87)
To illustrate, we compute wlp(t5(u), (2)) where the sym-
bolic event t5(u) is deﬁned in Table 1 by using (7):
(cid:19)
at5(u) ∧ ¬ht3(u) ∧ ¬ht2(u)
(cid:18) p4 ∧ p5 ∧ p6 ∧ ¬dt5∧
(cid:94)