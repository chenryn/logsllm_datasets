bility graph, from our deductive system. Up-
ward edges could lead to privilege escalation.
Datalog. We add an edge from one interface to another if
our deductive system computes that a reference to an object
with the ﬁrst interface implemented by one principal could
lead to an object with the second interface implemented by
the same principal. Notice that the type forgery rule permits
us to reason about each interface individually instead of re-
quiring us to build a lattice over sets of interfaces. Figure 5
summarizes the lattice by coalescing all the interfaces with
the same security rating into a single vertex and contracting
the unlabeled interfaces.
Of the 2920 edges in the lattice, 147 edges go “up” the
lattice. These upward edges represent potential escalation
points that make reducing the privilege of extensions difﬁ-
cult. Because our analysis is an over-approximation, some
of these edges might not actually be exploitable given the
Firefox implementation of the extension interfaces. How-
ever, even these edges might become exploitable if an exten-
sion replaces the built-in implementation of the relevant in-
terface. To retroﬁt security onto the Firefox extension API,
we recommend preventing privilege escalation by removing
these edges, either by adding runtime access control checks
or by taming the interfaces at design time. When designing
a new extension system, we suggest not introducing escala-
tion points into the security lattice.
4 Google Chrome Extension System
In this section, we describe and evaluate the security ar-
chitecture of the Google Chrome extension system. We fo-
cus on the aspects of the design related to protecting users
from benign-but-buggy extensions. The security model for
the extension system is based on least privilege, privilege
separation, and strong isolation.
Behavior
User chooses a ﬁle (N)
Extension-speciﬁc data & preferences (N) HTML5 storage (N)
Speciﬁc-domain network access (M)
DOM of speciﬁc sites (M)
Page for display only (L)
Highlighted text/images (L)
List speciﬁc XHR domains in manifest (M)
List speciﬁc domains in manifest (M)
Open a new frame with the page (L)
Not yet supported – full DOM access required (M/H)
Implementation
File picker, with  (N)
Figure 6. The proposed extension system supports ﬁne-grained implementation of behaviors, re-
moving most of the privilege disparity between behavior and implementation.
Without additional encouragement, developers are likely to
request the maximum possible privileges for their exten-
sions, reducing the beneﬁts of least privilege. To encour-
age developers to request the minimum required privileges,
we alter the user experience for installing an extension from
the Google-controlled extension gallery based on the maxi-
mum privilege level the extension requests. The most dan-
gerous class of extensions (extensions with the privilege
to execute arbitrary code) are not permitted in the gallery
unless the developer signs a contract with Google. An-
other approach is to review extensions manually, as in the
addons.mozilla.org gallery.
In this approach, the
manifests make it easier for reviewers to prioritize reviews
of low-privilege extensions. This incentivizes developers to
request fewer privileges to reduce review latency. Whether
these incentives are sufﬁcient to encourage least privilege
will depend largely on whether developers can gain more
exposure for their extensions by appearing in the gallery
sooner or more prominently. We examine a set of Google
Chrome extensions in Section 4.4 to see whether developers
are following the principle of least privilege.
Extensions can also be installed from arbitrary web sites.
This install experience is different from installing an exten-
sion from the gallery. When installing an extension from
outside the gallery, the user experience is the same as the
user experience for downloading and running a native ex-
ecutable. An attacker who can trick a user into installing
a malicious extension this way can likely already trick the
user into running an arbitrary executable, giving the attacker
little additional leverage.
4.2 Privilege Separation
To make it more difﬁcult for a malicious web site
to usurp an extension’s privileges, the extension platform
forces developers to divide their extensions into multiple
components: content scripts, the extension core, and a na-
tive binary (see Figure 1):
• Content Scripts.
Content
scripts, written in
JavaScript, let extensions interact directly with un-
trusted web content. A content script is newly instan-
tiated for each web page, and it has direct access to the
DOM of the page via the standard DOM APIs. Content
scripts are only added to pages from origins that match
the permissions deﬁned in the manifest ﬁle. Content
scripts do not have access to the powerful extension
APIs provided by the browser. Beyond the DOM API,
the only other privilege granted to content scripts is
the privilege to send JSON [2] messages to the exten-
sion core via a postMessage-like API. Like regular
web content, content scripts cannot make cross-origin
XMLHttpRequests.
• Extension Core.
The extension core, written in
HTML and JavaScript, controls the extension’s user
interface (e.g., browser actions, pop-ups) and has ac-
cess to the extension APIs declared in the extension’s
manifest. The extension core contains the majority
of the extension’s privileges, but it is insulated from
direct interaction with untrusted web content. To in-
teract with untrusted content, the extension core can
either (1) communicate with a content script or (2)
issue an XMLHttpRequest. Both of these mecha-
nisms require the extension author to take explicit ac-
tion and restrict the interaction to plain data. The man-
ifest ﬁle deﬁnes what origins the extension core can
make XMLHttpRequests to.
• Native Binary. Only native binaries can run arbitrary
code or access arbitrary ﬁles. To gain these privileges,
the extension developer must supply a native Netscape
Plug-in API (NPAPI) binary. For example, on Win-
dows such a binary consists of a dynamically linked
library (DLL) with certain entry points. By default,
the native binary can interact only with the extension
core (e.g., not with content scripts). Furthermore, the
interaction is typically limited to the interfaces deﬁned
when the native binary was compiled, but, of course,
the native binary can re-compile itself because it can
run arbitrary code. Similarly, the manifest lets devel-
opers expose their native binaries to web pages be-
cause there are no technical means for stopping an ex-
tension that can run arbitrary code from installing a
regular browser plug-in.
Content scripts, which have the largest attack surface, do
not have a direct channel to the component with critical
privileges. By dividing the extension’s privileges among
three components, the extension system makes it harder for
an attacker to exploit the user’s machine. To run arbitrary
code, the attacker ﬁrst convinces the extension’s content
script to forward malicious input to the extension core. The
attacker then convinces the extension core to forward the
malicious input to the native binary (assuming one even ex-
ists). Finally, the attacker would need to exploit a vulnera-
bility in the native binary.
4.3
Isolation Mechanisms
The extension system uses three mechanisms to isolate
extension components from each other and from web con-
tent. First, we leverage the same-origin web sandbox by
running the extension core in a unique origin designated by
a public key. Second, we run the extension core and native
binaries in their own processes. Finally, content scripts run
in a separate JavaScript heap from untrusted web content.
Origin.
In the web platform, the authority of a script is
derived from its origin (in particular, the scheme, host,
and port of the URL from which the browser obtained the
script). However, extension scripts are not loaded from
the network; extensions are stored in the user’s ﬁle system.
Consequently, extensions do not have an origin in the usual
sense. We assign an “origin” to an extension by including a
public key in the extension’s URL as follows:
chrome-extension://
ilpnegfhimflflifcnmgpeihglhedbnn/
When loading an extension, the browser veriﬁes that the
extension package is “self-signed” by the public key in its
URL. Placing the extension’s public key in its URL frees the
extension system from depending on a central naming au-
thority (like a public-key infrastructure or DNS), reducing
the attack surface of the platform and simplifying extension
signing. By using this approach, we can reuse the web’s
same-origin machinery to isolate extensions from browser
internals, web pages, and each other.
This approach to extension identity also makes updating
extensions easy. If the browser encounters a newer exten-
sion package signed with the same public key, the browser
can replace the installed version of the extension (unless the
new manifest requests critical privileges and changes the in-
stall experience). When the browser reloads the extension,
the updated version inhabits the same security context as
the old version, analogous to re-visiting a web site. In par-
ticular, the updated extension still has access to its previous
persistent state because localStorage is segregated by
origin and its origin remains the same.
Process Isolation. Each component of the extension runs
in a different process. The extension core and the native bi-
nary each receive dedicated processes. Content scripts run
in the same process as their associated web pages. This pro-
cess isolation has two beneﬁts: it defends against browser
errors and low-level exploits. Process isolation helps pro-
tect the extension core from browser implementation er-
rors, such as cross-origin JavaScript capability leaks [12],
because JavaScript objects cannot leak from one process to
another. Process isolation also defends against low-level
exploits in the browser. For example, if a malicious web
site operator manages to corrupt the renderer process [11]
(e.g., via a buffer overﬂow), the attacker will not be granted
access to the extension APIs because the extension core re-
sides in another process.
Isolated Worlds. We provide an additional layer of isola-
tion between the content script and the untrusted web site’s
JavaScript environment by running the content script in an
isolated world. Instead of accessing the underlying DOM
data structures via the same JavaScript objects used by the
page, each content script accesses the DOM with its “own”
JavaScript objects. Content scripts and web pages therefore
never exchange JavaScript pointers, making it more difﬁcult
for a malicious web page to confuse the content script (e.g.,
with a JavaScript rootkit [9]).
This design changes the normal one-to-one relation be-
tween DOM implementation objects and their JavaScript
representations (see Figure 7) into a one-to-many rela-
tion (see Figure 8). For example, both the page and the
content script have a global variable named document,
but these variables refer to two distinct JavaScript objects.
Consistency is still maintained: when either script calls a
DOM method, such as appendChild, both objects are
updated to reﬂect the modiﬁed document tree. However,
when a script modiﬁes a non-standard DOM property, such
as document.foo, the modiﬁcation is not reﬂected in
the other object. These rules help maintain the invariant
that JavaScript objects (i.e., non-primitive values) are never
transmitted between worlds.
The standard one-to-one relation is implemented using a
hash table keyed by DOM implementation object (depicted
as black rectangles in the ﬁgures). For isolated worlds, we
create a hash table for each world and choose which hash
table to use based on the currently executing world.
Figure 7. The normal one-to-one relation
between DOM implementation objects and
JavaScript representations.
Figure 8. The one-to-many relation caused by
running content scripts in isolated worlds.
When entering the JavaScript virtual machine (e.g., when
invoking a callback function registered via setTimeout),
the browser must start executing the function in the proper
world. If the browser executes the function in the wrong
world, we risk leaking a JavaScript pointer between worlds.
To select the correct world, we cache a reference to the ap-
propriate world on the function object itself at the time the
callback is registered.
4.4 Evaluation
Reduced Privileges. We evaluated the privileges of the
25 most popular Google Chrome extensions [17]. (See Ap-
pendix B for a list.) For each extension, we examine its
manifest to determine the privileges requested by the exten-
sion, both for the core extension and for its content scripts.
Figure 9. Highest privilege of popular Google
Chrome extensions.
We then measure the privilege gap by comparing the exten-
sion’s requested privileges with its behavior. The extensions
we survey are not as diverse as the extensions in the Firefox
survey (Section 3.1) because the Google Chrome extension
platform is new and 9 of the extensions were developed by
Google employees.
Figure 9 shows the highest severity privileges that ex-
tensions ask for in their manifests. Of the three critical-
rated extensions, two include NPAPI plug-in and one in-
jects content scripts into documents from the local ﬁle
system. The 20 high-rated extensions request arbitrary
web/network access, and the two medium-rated extensions
request web/network access for a limited number of origins.
We found one extension (Cooliris) that requests more priv-
ileges than required to implement its behavior. This ex-
tension requires 3D accelerated graphics, which could be
provided to extensions without granting the extension the
ability to run arbitrary code. (The current APIs do not pro-
vide this functionality.) However, the rest of the extensions
request appropriate privileges given their feature set. We
conclude that extensions in the Google Chrome extension
system posses signiﬁcantly fewer privileges than extensions
in the Firefox extension system.
In addition to analyzing the highest severity privilege re-
quested by an extension overall, we also examine how priv-
ileges are separated within the extension (see Figure 10).
Even if the extension as a whole has arbitrary DOM ac-
cess via content scripts, its core might have access only to
a limited set of origins, or vice versa. During our review,
we found that two extensions requested more privileges for
their core than necessary. However, the privileges requested
for the core extension were a subset of the privileges re-
quested for the content scripts, leaving the overall privilege
level of the extension the same.
It appears that develop-
ers overall are willing to limit DOM and network access to
small sets of origins when possible.
DOM (C++)JavaScript (V8)JavaScript (V8)W1 (Page)DOM (C++)W2 (Extension 1)W3 (Extension 2)Medium 2 High 20 Critical 3 # of extensions
5 Related Work
Privilege
Content script DOM access
Read-only ﬁle system access
All sites
Limited number of sites
No sites
Core extension XHR access
All sites
Limited number of sites
No sites
Other APIs
Tabs
Bookmarks