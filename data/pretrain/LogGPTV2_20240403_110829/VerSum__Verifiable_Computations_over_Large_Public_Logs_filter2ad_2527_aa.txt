title:VerSum: Verifiable Computations over Large Public Logs
author:Jelle van den Hooff and
M. Frans Kaashoek and
Nickolai Zeldovich
VerSum: Verifiable Computations over Large Public Logs
The MIT Faculty has made this article openly available. Please share 
how this access benefits you. Your story matters.
Citation
Jelle van den Hooff, M. Frans Kaashoek, and Nickolai Zeldovich.
2014. VerSum: Verifiable Computations over Large Public Logs.
In Proceedings of the 2014 ACM SIGSAC Conference on Computer
and Communications Security (CCS '14). ACM, New York, NY, USA,
1304-1316.
As Published
http://dx.doi.org/10.1145/2660267.2660327
Publisher
Version
Association for Computing Machinery (ACM)
Author's final manuscript
Citable link
http://hdl.handle.net/1721.1/100450
Terms of Use
Creative Commons Attribution-Noncommercial-Share Alike
Detailed Terms
http://creativecommons.org/licenses/by-nc-sa/4.0/
VerSum: Verifiable Computations over Large Public Logs
Jelle van den Hooff
MIT CSAIL
M. Frans Kaashoek
MIT CSAIL
Nickolai Zeldovich
MIT CSAIL
ABSTRACT
VERSUM allows lightweight clients to outsource expensive compu-
tations over large and frequently changing data structures, such as
the Bitcoin or Namecoin blockchains, or a Certificate Transparency
log. VERSUM clients ensure that the output is correct by comparing
the outputs from multiple servers. VERSUM assumes that at least
one server is honest, and crucially, when servers disagree, VERSUM
uses an efficient conflict resolution protocol to determine which
server(s) made a mistake and thus obtain the correct output.
VERSUM’s contribution lies in achieving low server-side over-
head for both incremental re-computation and conflict resolution,
using three key ideas: (1) representing the computation as a func-
tional program, which allows memoization of previous results; (2)
recording the evaluation trace of the functional program in a care-
fully designed computation history to help clients determine which
server made a mistake; and (3) introducing a new authenticated data
structure for sequences, called SEQHASH, that makes it efficient
for servers to construct summaries of computation histories in the
presence of incremental re-computation. Experimental results with
an implementation of VERSUM show that VERSUM can be used
for a variety of computations, that it can support many clients, and
that it can easily keep up with Bitcoin’s rate of new blocks with
transactions.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]:
Security and Protection
Keywords
Verifiable Computation; Cloud Computing
1.
INTRODUCTION
Systems such as Bitcoin [15] provide publicly available logs,
whose validity is guaranteed. The logs are large (e.g., the Bitcoin
blockchain was 14 GB as of January 2014) and many records are
added daily (e.g., on average every 10 min an entry is added to the
Bitcoin blockchain). To run computations over these logs requires a
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full cita-
tion on the first page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660327 .
1
powerful computer, because a computation may require processing
the entire log, which can take a long time (a few hours) and requires
the computer to store the whole log.
VERSUM is a new system for securely outsourcing computations
over frequently changing inputs, supporting many clients. With
VERSUM, a lightweight client can outsource a computation over
the entire Bitcoin blockchain and learn the correct result. VERSUM
is a refereed delegation of computation, or RDoC, system [7]. A
VERSUM client outsources a computation to a pool of independent
servers, and can determine the correct result as long as it can reach
one honest server. To handle large inputs, outputs, and intermediate
state, VERSUM stores all data in authenticated data structures.
Refereed delegation of computation systems assume a trust model
based on the practical assumptions that not all servers will be com-
promised. The challenge in designing a RDoC system is performing
the refereeing on the client. It is not enough to merely look for a
majority of agreeing servers: a RDoC system must provide the cor-
rect result even if all servers disagree. Using its conflict resolution
protocol (§6), VERSUM can ask a server to prove that a conflicting
server made a mistake. The conflict resolution protocol is based
on Quin’s [7]. When two servers disagree on the outcome of a
computation, Quin splits the computation in many parts and finds
the first point at which two servers disagreed. Then, it determines
which server made a mistake, and continues with the honest server.
Unlike Quin, VERSUM supports incremental updates of inputs.
Incremental updates happen, for example, when a new log entry is
added to the Bitcoin blockchain, VERSUM can update its compu-
tation to include the latest transactions from the log. Supporting
incremental updates is challenging because the server must prove
that it performed the entire new computation correctly; handling
updates one by one does not scale with many updates. VERSUM
efficiently performs the new computation in its entirety by reusing
parts of the old computation. To support reuse, VERSUM represents
computations as purely functional programs. These programs have
no global state, which can make programming more difficult; how-
ever, because they have no global state, computations can be reused.
Quin cannot reuse computations as its x86 computations have global
state, and thus change completely when the input is changed even
slightly.
During conflict resolution, VERSUM uses computation histo-
ries (§4) that describe the evaluation of its functional programs.
Computation histories can be reused to support incremental up-
dates, and can be efficiently extended so that clients can perform
conflict resolution. Conflict resolution requires a data structure for
holding computation histories that supports fast lookups and com-
parison. Supporting incremental updates requires a data structure
that supports efficient concatenation of computation histories. The
SEQHASH (§5) is the first data structure to efficiently support all
of these operations in an adversarial setting, formally stated and
proven in Appendix A.
We have implemented VERSUM and three applications on top of
the Bitcoin blockchain in 2,800 lines of Go (§7). As an example, one
of these applications computes the set of unspent transactions in Bit-
coin, a common computation in practice. The VERSUM prototype
can run this computation over the unmodified Bitcoin blockchain;
it uses an existing Go library to read and store Bitcoin data struc-
tures. A VERSUM server running this computation creates around
365 GB of authenticated data structures for a recent snapshot of
the blockchain, which contains 14 GB of Bitcoin blocks and a total
of 30 million transactions. Our prototype automatically pages the
authenticated data structures to and from disk, so that applications
can effectively perform large computations.
Experiments with this prototype (§9) show that a server can sup-
port many clients (e.g., a server can serve 4,000 queries per second
for the unspent Bitcoin transaction application), and that servers can
incorporate new Bitcoin blocks in seconds, which is sufficient to
keep up with the growth of the Bitcoin blockchain (which grows by
one block approximately every ten minutes).
Although we demonstrated VERSUM’s applicability using a Bit-
coin log, we expect VERSUM to be applicable in increasingly more
situations as more data is available in the form of authenticated
logs. VERSUM’s design could be used to determine if a certificate
has been revoked in the Certificate Transparency system [12], to
perform name lookups in Namecoin [2], etc. One can even view all
git repositories as authenticated data structures that VERSUM could
compute over.
2. BACKGROUND
VERSUM depends on two key previous ideas: authenticated data
structures and the refereed delegation of computation model. This
section provides the necessary background about these two ideas so
that the reader can understand VERSUM’s design.
2.1 Authenticated data structures
Authenticated data structures [20] (ADSs) allow a client to out-
source storage of large data sets to a server without trusting that
server [14]. The client stores a small authenticator (for example,
a hash) that summarizes all data stored on the server. With that
authenticator, the client can then verify operations, such as lookups
in a dictionary, performed by the server.
Using Miller et al.’s approach [14], VERSUM transparently trans-
forms any functional data structure into an ADS. Behind the scenes,
such a data structure is recursively hashed (like a Merkle hash-tree),
and the authenticator is the root hash, the hash at the top of the tree.
The programmer writes only the normal lookup function, and all
hash computation and verification is handled automatically.
For example, consider a client outsourcing the storage of a binary
search tree to a server. To perform a lookup in the tree, the client
asks the server to perform a lookup, and to transmit all the nodes that
the lookup function accessed to the client. The client then checks
that the server sent the correct nodes by computing the hashes, and
performs the lookup itself to determine the result. If either the
hashes are incorrect, or the server has not sent some required nodes,
the computation fails. Otherwise, the client is guaranteed a correct
result, as it has performed the computation itself on the correct input.
For terminology, in the remainder of the paper, we will refer to the
values accessed by the server that let a client verify a computation a
proof.
While ADSs might seem to outsource computation as well as
storage, ADSs do not speed up computation on the client, as the
client must still perform the computation itself after the server has
done so. For this reason, VERSUM does not use ADSs to outsource
the entire computation, and instead uses ADSs to store data for the
larger computation, so that the client can verify that small steps of
the computation happened correctly.
2.2 Refereed delegation of computation
Refereed delegation of computation is a setting for outsourcing
computation in a verifiable manner. A RDoC system allows a client
to learn the correct result of a computation if it can talk to a pool of
servers, at least one of which is honest. Even if all other dishonest
servers are cooperating to try and deceive the client, the client will
still learn the correct result. The client does not have to specify
which server it thinks is honest; it merely needs to talk to a pool
servers of which it believes at least one to be honest.
In effect, the client assumes that all server operators are honest
(there is no point in talking to dishonest servers), but that a server
might be compromised or coerced into deceiving a client. By out-
sourcing computation to a pool of independent servers, a client is
protected against individual servers getting compromised.
Quin is a RDoC system for verifying the execution of Turing
machines, applied to x86 binaries [7]. When two servers disagree on
the outcome of a computation, Quin figures out which server made
a mistake by finding the first step of the Turing machine the two
servers disagreed on. To find this step, the client performs a binary
search, with the goal of finding a state of the Turing machine that
both servers agreed, with a consecutive state the servers disagree
on:
Let n be the number of steps of the shortest computation. First,
the client asks both servers to commit to their computation’s state
after n/2 steps. Then, if they agree, the client asks for the state at
3n/4 steps, otherwise at n/4 steps, and so forth. Eventually, both
servers will have committed to a state after m steps on which they
agree, and two distinct states after m + 1 steps. At this point, the
honest server will be able to show that it advanced its state correctly,
and the client can from then on ignore the dishonest server. Note
that this point must exist, as the two servers agree on the initial state
which defines the computation, and disagree, by definition, on the
outcome of the computation.
Quin’s computational model is general enough to let Quin run
standard x86 binaries, storing the state in a Merkle tree describing
the process’s memory. However, because Quin runs standard x86
binaries, it does not support incremental re-computation: when the
input changes, the Turing machine must be re-run completely.
3. OVERVIEW
VERSUM is a system for outsourcing computations in the RDoC
setting. VERSUM targets computations like processing large, grow-
ing logs: large computations with frequently updated inputs. An
end-to-end diagram of VERSUM can be found in Figure 1.
VERSUM represents computations as purely functional programs.
In these programs, individual function calls are self-contained and
have no side effects, so they can be reused in other computations.
This allows VERSUM to quickly update a computation when the in-
puts are updated. VERSUM can reuse computation histories because
its computations, unlike Quin’s Turing machines, are stateless.
To perform conflict resolution, VERSUM uses a conflict resolu-
tion protocol inspired by Quin, but modified to support VERSUM’s
functional model and incremental computation. Instead of working
with Turing machine state, a VERSUM server stores computation
histories that describe the evaluation of the functional program as a
sequence of function call and return records. When the input to a
VERSUM computation changes, the server can reuse (parts of) the
previous computation history to quickly build a new computation
2
return G(x) + H(x)
return H(x * 2) * 2
F(x):
G(x):
H(x):
return x + 1
call F(5)
call G(5)
Step Action
1:
2:
call H(10)
3:
4:
return H(10) = 11, computed in 2 steps
------------------------------------------------
5:
6:
7:
8:
return G(5) = 22, computed in 4 steps
call H(5)
return H(5) = 6, computed in 2 steps
return F(5) = 28, computed in 8 steps
Figure 2: An example program, together with a computation
history of F(5). The indentation and the step numbers (on the
left) are for ease of reading only, and are not actually stored by
VERSUM. The step counts (on the right) are stored by VER-
SUM. The prefix ending at step 4 is used as an example in §4.2.
prefixes, abc and abx. Using DetermineNext, the client can deter-
mine that abc is correct, and that server 3 must have performed an
incorrect computation.
VERSUM needs to store computation histories in a data struc-
ture that supports a number of operations. First, a server must
efficiently construct computation histories, both during a first run,
and during future incremental computations. That means that two
computation histories should be efficiently concatenable. Second,
two computation histories must be efficiently comparable during
conflict resolution, and must support DetermineNext invocations.
Finally, the data structure must be efficient even if adversaries con-
trol its inputs, as VERSUM’s external inputs might be contributed to
by anyone.
The SEQHASH data structure supports all operations needed by
VERSUM, and is the first data structure to do so. A SEQHASH is a
deterministically shaped hash-tree for holding sequences, supporting
efficient concatenation, comparison, and indexing. A SEQHASH’s
shape is determined by performing several merge rounds, during
which adjacent (leaf-)nodes stochastically get merged.
VERSUM stores all function arguments, return values, and the
computation history in authenticated data structures. When a server
constructs a DetermineNext proof, it must include the inputs and
outputs it computed over. Since internal state might be large, VER-
SUM uses ADSs to keep proofs small. DetermineNext also per-
forms operations on a SEQHASH, which can also be used as an ADS