AS $$
SELECT itemoffset,
htid -- ctid before v.13
FROM bt_page_items(relname,pageno);
$$ LANGUAGE sql;
Thepagereferencesbothheaptuples,thecurrentandthepreviousone:
84
3.5 TOAST
=> SELECT * FROM index_page('t_s_idx',1);
itemoffset | htid
−−−−−−−−−−−−+−−−−−−−
1 | (0,2)
2 | (0,1)
(2 rows)
Since BEGIN;
1 backend/access/transam/xact.c
85
Chapter3 PagesandTuples
=> -- txid_current_if_assigned() before v.13
SELECT pg_current_xact_id_if_assigned();
pg_current_xact_id_if_assigned
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
(1 row)
At different points in time, the system can contain some virtual s that have
alreadybeenused. Anditisperfectlynormal: virtualsexistonlyin,and
onlywhilethecorrespondingtransactionsareactive; theyareneverwritteninto
datapagesandnevergettodisk.
Oncethetransactionstartsmodifyingdata,itreceivesanactualunique:
=> UPDATE accounts
SET amount = amount - 1.00;
=> SELECT pg_current_xact_id_if_assigned();
pg_current_xact_id_if_assigned
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
780
(1 row)
=> COMMIT;
3.7 Subtransactions
Savepoints
Ssupportssavepoints,whichenablecancelingsomeoftheoperationswithina
transactionwithoutabortingthistransactionasawhole.Butsuchascenariodoes
notfitthecourseofactiondescribedabove: thestatusofatransactionappliesto
allitsoperations,andnophysicaldatarollbackisperformed.
Toimplementthisfunctionality,atransactioncontainingasavepointissplitinto
severalsubtransactions,1sotheirstatuscanbemanagedseparately.
1 backend/access/transam/subtrans.c
86
3.7 Subtransactions
Subtransactionshavetheirowns(whicharebiggerthantheofthemaintrans-
action). Thestatusofasubtransactioniswrittenintointheusualmanner;
however,committedsubtransactionsreceiveboththecommittedandtheaborted
bitsatonce.Thefinaldecisiondependsonthestatusofthemaintransaction: ifit
isaborted,allitssubtransactionswillbeconsideredabortedtoo.
Theinformationaboutsubtransactionsisstoredunderthe/pg_subtransdi-
rectory.Fileaccessisarrangedviabuffersthatarelocatedintheinstance’sshared
memoryandhavethesamestructureasbuffers.1
Donotconfusesubtransactionswithautonomousones.Unlikesubtransactions,thelatter
donotdependoneachotherinanyway.VanillaPostgredoesnotsupportautonomous
transactions,anditisprobablyforthebest: theyarerequiredinveryrarecases,buttheir
availability in other database systems often provokes misuse,which can cause a lot of
trouble.
Let’struncatethetable,startanewtransaction,andinsertarow:
=> TRUNCATE TABLE t;
=> BEGIN;
=> INSERT INTO t(s) VALUES ('FOO');
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
782
(1 row)
Nowcreateasavepointandinsertanotherrow:
=> SAVEPOINT sp;
=> INSERT INTO t(s) VALUES ('XYZ');
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
782
(1 row)
Note that the pg_current_xact_id function returns the  of the main transaction,
notthatofasubtransaction.
1 backend/access/transam/slru.c
87
Chapter3 PagesandTuples
=> SELECT *
FROM heap_page('t',0) p
LEFT JOIN t ON p.ctid = t.ctid;
ctid | state | xmin | xmax | id | s
−−−−−−−+−−−−−−−−+−−−−−−+−−−−−−+−−−−+−−−−−
(0,1) | normal | 782 | 0 a | 2 | FOO
(0,2) | normal | 783 | 0 a | 3 | XYZ
(2 rows)
Let’srollbacktothesavepointandinsertthethirdrow:
=> ROLLBACK TO sp;
=> INSERT INTO t(s) VALUES ('BAR');
=> SELECT *
FROM heap_page('t',0) p
LEFT JOIN t ON p.ctid = t.ctid;
ctid | state | xmin | xmax | id | s
−−−−−−−+−−−−−−−−+−−−−−−+−−−−−−+−−−−+−−−−−
(0,1) | normal | 782 | 0 a | 2 | FOO
(0,2) | normal | 783 | 0 a | |
(0,3) | normal | 784 | 0 a | 4 | BAR
(3 rows)
Thepagestillcontainstherowaddedbytheabortedsubtransaction.
Committhechanges:
=> COMMIT;
=> SELECT * FROM t;
id | s
−−−−+−−−−−
2 | FOO
4 | BAR
(2 rows)
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−
(0,1) | normal | 782 c | 0 a
(0,2) | normal | 783 a | 0 a
(0,3) | normal | 784 c | 0 a
(3 rows)
88
3.7 Subtransactions
Nowwecanclearlyseethateachsubtransactionhasitsownstatus.
Sdoesnotallowusingsubtransactionsdirectly,thatis,youcannotstartanew
transactionbeforecompletingthecurrentone:
=> BEGIN;
BEGIN
=> BEGIN;
WARNING: there is already a transaction in progress
BEGIN
=> COMMIT;
COMMIT
=> COMMIT;
WARNING: there is no transaction in progress
COMMIT
Subtransactionsareemployedimplicitly: toimplementsavepoints,handleexcep-
tionsin/pg,andinsomeother,moreexoticcases.
Errors andAtomicity
Whathappensifanerroroccursduringexecutionofastatement?
=> BEGIN;
=> SELECT * FROM t;
id | s
−−−−+−−−−−
2 | FOO
4 | BAR
(2 rows)
=> UPDATE t SET s = repeat('X', 1/(id-4));
ERROR: division by zero
After a failure, the whole transaction is considered aborted and cannot perform
anyfurtheroperations:
=> SELECT * FROM t;
ERROR: current transaction is aborted, commands ignored until end
of transaction block
89
Chapter3 PagesandTuples
Andevenifyoutrytocommitthechanges,Postgrewillreportthatthetrans-
actionisrolledback:
=> COMMIT;
ROLLBACK
Why is it forbidden to continue transaction execution after a failure? Since the
already executed operations are never rolled back, we would get access to some
changesmadebeforetheerror—itwouldbreaktheatomicityofthestatement,and
hencethatofthetransactionitself.
Forexample,inourexperimenttheoperatorhasmanagedtoupdateoneofthetwo
rowsbeforethefailure:
=> SELECT * FROM heap_page('t',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−
(0,1) | normal | 782 c | 785
(0,2) | normal | 783 a | 0 a
(0,3) | normal | 784 c | 0 a
(0,4) | normal | 785 | 0 a
(4 rows)
Onasidenote,psqlprovidesaspecialmodethatallowsyoutocontinueatransac-
tionafterafailureasiftheerroneousstatementwererolledback:
=> \set ON_ERROR_ROLLBACK on
=> BEGIN;
=> UPDATE t SET s = repeat('X', 1/(id-4));
ERROR: division by zero
=> SELECT * FROM t;
id | s
−−−−+−−−−−
2 | FOO
4 | BAR
(2 rows)
=> COMMIT;
COMMIT
90
3.7 Subtransactions
As you can guess, psql simply adds an implicit savepoint before each command
when run in this mode; in case of a failure, a rollback is initiated. This mode is
notusedbydefaultbecauseissuingsavepoints(eveniftheyarenotrolledbackto)
incurssignificantoverhead.
91
4
Snapshots
4.1 What is a Snapshot?
Adatapagecancontainseveralversionsofoneandthesamerow,althougheach
transactionmustseeonlyoneofthematthemost. Together,visibleversionsof
p. allthedifferentrowsconstituteasnapshot. Asnapshotincludesonlythecurrent
datacommittedbythetimeitwastaken,thusprovidingaconsistent(inthe
sense)viewofthedataforthisparticularmoment.
Toensureisolation,eachtransactionusesitsownsnapshot.Itmeansthatdifferent
transactionscanseedifferentsnapshotstakenatdifferentpointsintime,whichare
neverthelessconsistent.
AttheReadCommittedisolationlevel,asnapshotistakenatthebeginningofeach
statement,anditremainsactiveonlyforthedurationofthisstatement.
At the Repeatable Read and Serializable levels, a snapshot is taken at the begin-
ningofthefirststatementofatransaction,anditremainsactiveuntilthewhole
transactioniscomplete.
snapshot1 snapshot2 snapshot
statement1 statement2 statement1 statement2
xid xid
ReadCommitted RepeatableRead,
Serializable
92
4.2 RowVersionVisibility
4.2 Row Version Visibility
Asnapshotisnotaphysicalcopyofalltherequiredtuples. Instead,itisdefined
byseveralnumbers,whiletuplevisibilityisdeterminedbycertainrules.
Tuplevisibilityisdefinedbyxminandxmaxfieldsofthetupleheader(thatis,s
of transactions that perform insertion and deletion) and the corresponding hint
bits. Since xmin–xmax intervals do not intersect,each rowis represented in any
snapshotbyonlyoneofitsversions.
Theexactvisibilityrulesarequitecomplex,1astheytakeintoaccountavarietyof
differentscenariosandcornercases.Veryroughly,wecandescribethemasfollows:
atupleisvisibleinasnapshotthatincludesxmintransactionchangesbutexcludes
xmaxtransactionchanges(inotherwords,thetuplehasalreadyappearedandhas
notbeendeletedyet).
Intheirturn,transactionchangesarevisibleinasnapshotifthistransactionwas
committed before the snapshot creation. As an exception, transactions can see
theirownuncommittedchanges. Ifatransactionisaborted,itschangeswillnot
bevisibleinanysnapshot.
Let’stakealookatasimpleexample. Inthisillustrationlinesegmentsrepresent
transactions(fromtheirstarttimetillcommittime):
snapshot
xid
1 2 3
Herevisibilityrulesareappliedtotransactionsasfollows:
• Transactionwascommittedbeforethesnapshotcreation,soitschangesare
visible.
1 backend/access/heap/heapam_visibility.c
93
Chapter4 Snapshots
• Transactionwasactiveatthetimeofthesnapshotcreation,soitschanges
arenotvisible.
• Transactionwasstartedafterthesnapshotcreation,soitschangesarenot
visibleeither(itmakesnodifferencewhetherthistransactioniscompletedor
not).
4.3 Snapshot Structure
Unfortunately,thepreviousillustrationhasnothingtodowiththewayPostgre
actually sees this picture.1 The problem is that the system does not know when
transactionsgotcommitted.Itisonlyknownwhentheywerestarted(thismoment
isdefinedbythetransaction),whiletheircompletionisnotregisteredanywhere.
off Commit times can be tracked2 if you enable the track_commit_timestamp parameter,but
theydo not participate invisibilitychecks in anyway(although it can still be useful to
trackthemforotherpurposes,forexample,toapplyinexternalreplicationsolutions).
Besides,Postgrealwayslogscommitandrollbacktimesinthecorrespondingen-
p. tries,butthisinformationisusedonlyforpoint-in-timerecovery.
Itisonlythecurrentstatusofatransactionthatwecanlearn. Thisinformationis
availableintheserver’ssharedmemory: theProcArraystructurecontainsthelist
ofalltheactivesessionsandtheirtransactions. Onceatransactioniscomplete,it
isimpossibletofindoutwhetheritwasactiveatthetimeofthesnapshotcreation.
Sotocreateasnapshot,itisnotenoughtoregisterthemomentwhenitwastaken:
it is also necessary to collect the status of all the transactions at that moment.
Otherwise,lateritwillbeimpossibletounderstandwhichtuplesmustbevisible
inthesnapshot,andwhichmustbeexcluded.
Takealookattheinformationavailabletothesystemwhenthesnapshotwastaken
andsometimeafterwards(thewhitecircledenotesanactivetransaction,whereas
theblackcirclesstandforcompletedones):
1 include/utils/snapshot.h
backend/utils/time/snapmgr.c
2 backend/access/transam/commit_ts.c
94
4.3 SnapshotStructure
xid xid
1 2 3 1 2 3
atsnapshotcreation… …andsometimelater
Supposewedidnotknowthatatthetimethesnapshotwastakenthefirsttransac-
tionwasstillbeingexecutedandthethirdtransactionhadnotstartedyet.Thenit
wouldseemthattheywerejustlikethesecondtransaction(whichwascommitted
atthattime),anditwouldbeimpossibletofilterthemout.
Forthisreason,Postgrecannotcreateasnapshotthatshowsaconsistentstate