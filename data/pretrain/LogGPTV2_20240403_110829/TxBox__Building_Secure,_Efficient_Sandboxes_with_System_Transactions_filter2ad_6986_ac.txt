While the sandboxed process is running inside a trans-
action, TXBOX maintains its trace consisting of (1) all
system calls the process made, (2) their arguments, and (3)
workset of the transaction, which contains references to all
system objects affected by the process (see Section IV).
Whenever the sandboxed process makes a critical system
call—for example, terminates or attempts to perform exter-
nal I/O—control is switched to the security monitor.
The monitor checks whether the trace of the process
violates the installed policy or not. If the policy has been
violated, the monitor can either roll back the transaction
and kill the violating process, or else pause the process,
generate a POLICY VIOLATION event, and call the user-
space policy manager for further investigation. The choice is
a policy conﬁguration parameter. The manager can perform
additional checking (e.g., use ptrace to attach and examine
the memory of the sandboxed process) or request input from
the human operator, then inform the monitor whether the
sandboxed process should be killed and transaction rolled
back. Transactions aborted due to a policy violation are
prevented from automatically re-trying.
If the policy is not violated and the critical event that
caused invocation of the monitor is process termination,
the transaction is committed and all effects of the process’s
execution become visible to the rest of the system. The only
other default critical events are external I/O. If a non-default
call is listed as critical in the policy, the monitor executes
the call and continues the current transaction after checking
that the trace does not violate policy.
The trusted computing base of TXBOX consists of the OS
kernel and the user-space policy manager. In modern OSes,
334
the administrator (root) can insert and remove kernel mod-
ules. Security of TXBOX only holds under the assumption
that the adversary does not have root access to the host.
B. Security policies
Security policies are deﬁned by the system administrator
who uses the policy manager to install them in the security
monitor, as described in Section V-C. Different policies may
be associated with different user processes. The administra-
tor can specify either the sandboxed process when installing
a policy, or a path and a list of events. In the latter case, the
policy manager will automatically associate the policy with
any program residing on that path.
A TXBOX policy is an ordered list with any number of
primitives of one of three types: BLACKLIST, WHITELIST,
DENY. BLACKLIST primitives specify forbidden behavior.
WHITELIST primitives specify required behavior. DENY
primitives are lists of system calls which should be denied
if the sandboxed process tries to make them.
TXBOX matches primitives to the program’s trace in the
order they are written. Once a violation is detected (the
trace matches a BLACKLIST primitive or does not match a
WHITELIST primitive), TXBOX terminates the sandboxed
program and rolls back all of its local changes without
checking subsequent policy primitives.
BLACKLIST and WHITELIST primitives. These prim-
itives are regular expressions over system-call names and
arguments, or over system objects. TXBOX supports two
types of system objects in policies: inodes (of directories or
ﬁles) and sockets. In policies, these are preﬁxed by ‘I’ and
‘S’, respectively. An inode object has two attributes: number
and mode (e.g., read or write). If multiple ﬁle systems are
mounted at the same time, superblock identiﬁers can be used
to distinguish ﬁles from different systems that happen to
have the same inode number. The set of supported modes
is determined by the underlying transactional OS which
provides the worksets to TXBOX. A socket object has two
attributes: type (e.g., INET or UNIX datagram) and either
destination IP address (for INET sockets), or name (for
UNIX datagram sockets). Using low-level kernel objects
such as inodes rather than ﬁle names helps make security
decisions faster because the TXBOX security monitor can
match policies against transactional worksets without extra
lookups. In our current implementation, policies on objects
(marked as WREGEX) use inode numbers, while system-
call policies (marked as SREGEX) use ﬁle names.
If the policy involves a ﬁle name, the policy manager
retrieves the corresponding inode number and substitutes it
for the name before installing the policy. It also stores the
original ﬁle name. If the name’s inode mapping has changed
before an existing policy is automatically installed for a new
process, the policy is updated with the new inode number.
Policies involving ﬁle names should block creation of soft
and hard links, as shown below.
The TXBOX policy syntax allows complex policies to be
expressed in a modular manner. For example, suppose that a
known execution proﬁle of some program says that it should
open a ﬁle in the ’/tmp’ directory other than ’secret’ for
reading. This can be enforced by the following policy, where
’(e)∗’ means “match expression e any number of times.”
BLACKLIST SREGEX *open:/tmp/secret:r*
BLACKLIST SREGEX *rename:/tmp/secret*
BLACKLIST SREGEX *symlink:/tmp/secret*
BLACKLIST SREGEX *link:/tmp/secret*
WHITELIST SREGEX (open:/tmp/*:r)*
Whitelist policies represent required behavior and can be
used to sandbox programs for which a system-level model
of correct behavior is available. Such models can be derived
by proﬁling the program’s execution or computed from the
program’s source or binary code using static analysis [26,
56]. Static models are conservative, thus any deviation from
a model-based whitelist policy means that the sandboxed
program is no longer executing the original code (typically,
because of a code-injection attack) and should be terminated.
example BLACKLIST and
WHITELIST policies. These policies are simple but can
effectively sandbox untrusted, potentially malware-infected
programs. For example, they can conﬁne an untrusted ﬁle-
format converter downloaded from the Internet to reading
and writing ﬁles in a particular directory. In Section VI, we
report the experimental results of sandboxing the FFmpeg
multimedia converter with TXBOX.
shows
some
Table
I
In general, TXBOX can enforce any policy expressed as
a (possibly non-deterministic) security automaton [16]. This
includes policies designed to recognize malware by tracking
sequences and graphs of dependent system calls [7, 33, 36].
Multiple-call policies present a challenge to conventional
sandboxes because by the time the sequence has been
matched, the infected program has already performed system
calls whose effects will remain in the system. By contrast,
TXBOX can roll back all effects of a malicious execution.
Policies based on sequences or graphs of system calls
are not evasion-proof. If the malware writer is aware of the
policy, he may able to modify the behavior of malware so
that its system calls don’t match any of the signatures (this
may require changing the semantics of his malware). Nev-
ertheless, these policies are useful insofar as they accurately
describe the system-call behavior of existing malware.
DENY primitives. A DENY primitive consists of a single
system call and a regular expression over its arguments.
If a BLACKLIST or WHITELIST primitive is violated,
the sandboxed process is terminated and its transaction
is rolled back. By contrast, DENY primitives instruct the
monitor to block speciﬁed calls while permitting the process
to continue. DENY primitives can be used to emulate a
conventional sandbox which simply denies certain calls,
335
Table I
SAMPLE TXBOX POLICIES.
Policy objectives for sandboxed process
Cannot access both ‘AddressBook’ (inode 100) and
’EmbarrassingSecrets’ (inode 200)
May not perform network I/O after accessing any ﬁle in
directory ’secret’ (inode 200)
May only write to the ﬁle ’/home/user1/outout’ (inode
150)
Must perform network I/O with IP address x.y.z.w
Don’t allow any network I/O but continue execution
TXBOX policy
BLACKLIST WREGEX (* I:100 *) AND (* I:200 *)
BLACKLIST WREGEX * I:200 * S:1 *
BLACKLIST WREGEX NOT(* I:150:w *) AND (* I:*:w *)
WHITELIST WREGEX (S:1:x.y.z.w)*
DENY connect*
DENY sendto*
DENY recvfrom*
possibly depending on the call’s arguments.
DENY primitives also enable the administrator to run
a sandboxed program without
letting it perform certain
operations. For example, suppose the administrator wants
to run an untrusted codec in a sandbox but does not want
it to talk to the network. This can be done by installing
DENY primitives for all network I/O calls. If the codec
tries to contact the network (e.g., looking for updates), the
call will fail but the codec may be able to handle this and
continue local execution. Note the difference in enforcement
semantics: if network I/O calls are installed as BLACKLIST
primitives, then an attempt to make the call is a policy
violation and the process will be killed.
TXBOX also beneﬁts from semantic ﬁdelity. Consider a
conventional system-call monitor trying to block all net-
work communication. When presented with a write(fd,
buf) call, it must determine whether fd is mapped to a
socket, which requires tracking the effect of all prior system
calls. By contrast, TXBOX can easily determine whether fd
is a socket by inspecting the transactional workset.
C. Policy enforcement
The TXBOX security monitor is responsible for enforcing
security policies. It is implemented as a kernel module and
consists of four parts: character device driver, system-call
interposer, enforcer, and policy decision engine.
Character device driver. The character device driver pro-
vides an interface between the user-level policy manager
and the kernel-level security monitor. The policy manager
can be invoked automatically when a program residing in a
particular directory is executed (the mechanism for this is
described below). To sandbox a process, the policy manager
sends the policy and the process’s pid to the monitor through
the interface of the character device driver. It also compiles
the policy supplied by the system administrator into a string
which can be loaded into the monitor’s policy decision
engine. The policy includes two lists of system calls: those
that appear in BLACKLIST or WHITELIST primitives and
those that appear in DENY primitives. Policies may also
include critical system calls that will cause the system-
call interposer to trap into the security monitor. The set of
critical system calls always includes calls involving program
termination and external I/O. To prevent malicious user-
level processes from impersonating the policy manager, the
monitor will communicate only with processes that are
running with root privileges.
System-call interposer. The interposer patches the system
call table with TXBOX call wrappers. In contrast to con-
ventional wrappers, TXBOX wrappers are very simple (see
Algorithm 1). First, if the call and its arguments match one
of the DENY primitives in the policy, the call is blocked
and an error is returned to the process. TXBOX wrappers
can use kernel data structures to map arguments (e.g., ﬁle
descriptors) directly to kernel objects, eliminating the risk of
race conditions. Second, if the call has not been denied, it is
logged along with its arguments. Third, if the call is critical,
control is passed to the policy decision engine. Otherwise,
the call is permitted to execute. Note that the wrapper does
not try to determine if the call is malicious or not, since all
of its effects on the local system can be rolled back later if
a violation is detected.
To handle symbolic links, TXBOX relies on Dazuko’s
helper function which tracks the link’s target ﬁle. If the
argument ﬁle of a system call is a symbolic link, the TXBOX
wrapper calls this function to get the target’s name and adds
it to the trace instead of the name of the link.
Because rename calls can change the inode number
assigned to a ﬁle, TXBOX’s wrapper for rename keeps
the mapping from the old number to the new number.
Once the policy decision engine has decided to commit
the transaction, any installed policy that uses an old inode
number is updated with the corresponding new number.
Enforcer. The enforcer provides additional hooks into the
kernel transaction mechanism, forcing the sandboxed pro-
cess to run in transactional mode. When instructed by the
policy decision engine, it either commits the transaction, or
336
Algorithm 1 Algorithm of a TXBOX system-call wrapper
if should deny(syscallname,pid) then
return error
else if should log(syscallname,pid) then
Add the syscall and its arguments to process-speciﬁc
syscall log
end if
if is critical call(syscallname) then
Invoke policy decision engine
if Policy violation detected then
Roll back the transaction and exit
end if
end if
Call the original syscall function
kills the process and aborts the transaction.
Policy decision engine. The policy decision engine is
invoked when the sandboxed process attempts to perform a
critical call. It has access to the process-speciﬁc system-call
log provided by the system-call wrapper and the transac-
tional workset provided by the OS. Together, they constitute
the trace of the process. The policy decision engine uses a
regular expression parser to match installed policies against
the trace and detect policy violations using Algorithm 2.
Intuitively, a trace violates the policy if it matches any of
the BLACKLIST primitives or if it deviates from any of the
WHITELIST primitives.
Algorithm 2 Algorithm for determining if process trace pt
violates policy p
for each BLACKLIST/WHITELIST primitive prim in pol-
icy p in speciﬁed order do
if (prim.regextype==WREGEX) then
if (!match(prim.regex,pt.txworkset) and (prim.type==
WHITELIST)) then
return violation
if
else
(prim.type==BLACKLIST)) then
(match(prim.regex,pt.txworkset)
and
return violation
end if
else
if (!match(prim.regex,pt.syscalltrace) and (prim.type==
WHITELIST)) then
return violation
if
else
(prim.type==BLACKLIST)) then
(match(prim.regex,pt.sycalltrace)
return violation
end if
end if
end for
return ok
and
337
If a violation is detected, the policy decision engine can
either instruct the enforcer to kill the sandboxed process and
abort the transaction, or pass control to the policy manager
for memory checks, etc., and wait for its decision.
If no violation is detected and the critical call that caused
the invocation of the policy decision engine is a termination
call such as exit or exit group, the engine instructs the
enforcer to commit the transaction. If the critical call is a
user-speciﬁed call other than external I/O, it is allowed to
execute inside the current transaction. Critical calls involving
I/O are handled as described in Section V-D.
Implementation. Our implementation of the TXBOX secu-
rity monitor is based on Dazuko [12], an open-source Linux
kernel module. It provides a character device interface and
supports system-call interposition in the kernel, which in
TXBOX is based on hooking the system call table but can
also be based on the Linux Security Module framework.
Implementing the TXBOX security monitor required sev-
eral substantial changes to Dazuko and TxOS. Dazuko
was modiﬁed to (i) compile and run on TxOS—this in-
cluded changing Dazuko to use TxOS kernel data struc-
tures (e.g., inodes) which are different from the standard
kernel data structures; (ii) implement TXBOX system-call