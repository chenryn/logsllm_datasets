title:Detecting Lateral Movement in Enterprise Computer Networks with Unsupervised
Graph AI
author:Benjamin Bowman and
Craig Laprade and
Yuede Ji and
H. Howie Huang
Detecting Lateral Movement in Enterprise Computer Networks with
Unsupervised Graph AI
Benjamin Bowman
Craig Laprade
Graph Computing Lab
Yuede Ji
George Washington University
H. Howie Huang
Abstract
In this paper we present a technique for detecting lateral
movement of Advanced Persistent Threats inside enterprise-
level computer networks using unsupervised graph learning.
Our detection technique utilizes information derived from
industry standard logging practices, rendering it immediately
deployable to real-world enterprise networks. Importantly,
this technique is fully unsupervised, not requiring any labeled
training data, making it highly generalizable to different en-
vironments. The approach consists of two core components:
an authentication graph, and an unsupervised graph-based
machine learning pipeline which learns latent representa-
tions of the authenticating entities, and subsequently performs
anomaly detection by identifying low-probability authenti-
cation events via a learned logistic regression link predictor.
We apply this technique to authentication data derived from
two contrasting data sources: a small-scale simulated envi-
ronment, and a large-scale real-world environment. We are
able to detect malicious authentication events associated with
lateral movement with a true positive rate of 85% and false
positive rate of 0.9%, compared to 72% and 4.4% by tradi-
tional rule-based heuristics and non-graph anomaly detection
algorithms. In addition, we have designed several ﬁlters to
further reduce the false positive rate by nearly 40%, while
reducing true positives by less than 1%.
1 Introduction
According to the 2019 FireEye M-Trends report [5], the me-
dian time to detection of a network intrusion was 78 days.
While this is an impressive improvement from the 418 days
reported in 2011, this still means an adversary would have
over 2 months inside an environment to accomplish their
mission prior to detection. Additionally, nearly half of all
compromises are detected via external sources, indicating
that the tools currently employed by enterprise-level cyber de-
fenders are insufﬁcient for detecting the highly sophisticated
modern-day adversaries.
Existing systems and techniques for detecting network in-
trusions rely heavily on signatures of known-bad events [25],
such as ﬁle hashes of malware, or byte streams of malicious
network trafﬁc. While these techniques are able to detect rel-
atively unskilled adversaries who use known malware and
common exploitation frameworks, they provide almost no
utility for detecting advanced adversaries, coined Advanced
Persistent Threats (APTs), who will use zero-day exploits,
novel malware, and stealthy procedures.
Similarly, the state-of-the-art behavioral analytics [26] in
use today by network defenders utilize relatively rudimentary
statistical features such as the number of bytes sent over a
speciﬁc port, number of packets, ratio of TCP ﬂags, etc. Not
only are these types of analytics relatively noisy in terms of
false positives, but they are also challenging to investigate
due to their limited information and scope. For example, the
fact that a particular host sent 50% more network packets
in a given day could be indicative of many different events,
ranging from data exﬁltration, botnet command & control,
to a myriad of other possibilities, most of which would not
indicate a compromise, such as streaming a video.
To address these challenges, our approach is to build an
abstract, behavior-based, graph data model, with key elements
related to the particular behavior of interest we are trying to
detect. Speciﬁcally, we model a computer network using a
graph of authenticating entities, and the target behavior we
detect is anomalous authentication between entities indicative
of lateral movement within the network. Lateral movement
is a key stage of APT campaigns when an attacker will au-
thenticate to new resources and traverse through the network
in order to gain access to systems and credentials necessary
to carry out their mission [17, 21]. This is very challenging
to detect as attackers will often use legitimate authentication
channels with valid credentials as opposed to noisy exploita-
tion procedures.
In order to effectively detect lateral movement, we ﬁrst con-
vert our input data, which is the in form of industry standard
authentication logs, into a representation which will allow for
not only learning about individual authentication events, but
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    257
also the authentication behavior of the network as a whole. To
that end, we construct an authentication graph, where nodes
represent authenticating entities which can either be machines
or users, and edges represent authentication events. Next, we
utilize an unsupervised node embedding technique where
latent representations are generated for each vertex in the
graph. Finally, we train a link predictor algorithm on these
vertex embeddings, and utilize this link predictor to identify
low-probability links in new authentication events.
We apply our technique on two distinct datasets represent-
ing two contrasting computer networks. The PicoDomain
dataset is a small simulated environment we developed in-
house with only a few hosts, and spanning only 3 days. The
second dataset is from Los Alamos National Labs (LANL)
[11] and is a real-world network capture from their internal en-
terprise computer network spanning 58 days with over 12,000
users and 17,000 computers. In both cases, there is labeled
malicious authentication events associated with APT-style
activity which were used as ground truth for evaluation pur-
poses. We were able to detect the malicious authentication
events in the real-world dataset with a true positive rate of
85% and a false positive rate of only 0.9%. In comparison,
traditional heuristics, and non-graph based machine learning
methods, were able to achieve at best 72% true positive rate
and 4.4% false positive rate. Understanding that modern day
cyber defenders are frequently receiving far too many false
positives, we spent additional time building simple ﬁlters that
allowed us to further reduce our false-positive rate by nearly
40% on the LANL dataset, while reducing true positives by
less than 1%.
In summary, our contributions of this work are as follows:
• A graph data structure for modeling authentication be-
havior within enterprise-level computer networks based
on information available in industry standard log ﬁles.
• An unsupervised graph-learning technique for identify-
ing anomalous authentication events which are highly
indicative of malicious lateral movement.
• Experiments on two datasets showing the strength of
graph learning for this application domain.
The remaining of this paper will be laid out as follows.
Section 2 will provide some background into authentication
protocols, the graph structure, and deﬁne the problem of lat-
eral movement. Section 3 will discuss our proposed method
and explain the learning algorithm. Section 4 will discuss our
experimental evaluation and results. Section 5 will discuss
the related work. Section 6 will discuss some limitations of
our approach and our planned future work, and Section 7 will
conclude.
2 Background & Problem Deﬁnition
In this section we will discuss some background on authentica-
tion in enterprise networks, how we build our graph structure,
and deﬁne the problem of lateral movement.
2.1 Authentication
Modern enterprise computer networks rely on the ability to
manage the permissions and privileges of users in order to
maintain a safe and secure network. Users in the enterprise
network will be given explicit permissions to access resources
within the environment ranging from folders and network
share drives, to applications and services. To make this possi-
ble, there have been many network authentication protocols
developed through the years, which allow users to authenti-
cate to resources in the network in order to verify that they
have the privileges necessary to perform a certain action.
Common authentication protocols in today’s enterprise
computer networks include protocols such as Kerberos,
NTLM, SAML, and others. Each one is designed to be a
secure way to authenticate users inside an environment, and
each has the ability to be abused. APT-level adversaries are
well-versed in the workings of these authentication protocols,
and they are often abused during an attack campaign. For
example, the well-known "Pass the Hash" attack is a weak-
ness in the NTLM implementation where the hash of a user’s
password, which can often be harvested from system memory,
is used to authenticate to additional resources by the attacker.
Because hackers often abuse existing authentication chan-
nels, logs related to these critical protocols are valuable to
the security analyst and detection algorithms. Typically these
logs capture key information such as the account that is re-
questing to authenticate, the origin of the request, what they
are attempting to authenticate to, as well as the result of that
authentication request. Additionally, as authentication in the
environment is network activity, we have the ability to capture
this critical information from centralized network taps, rather
than requiring expensive host-based log collection.
2.2 Graph Structure
There were two main considerations in how we chose to build
our graph data structure. First, we wanted the input data to
be highly accessible to our network defenders. This means
utilizing data that is likely already being collected at the en-
terprise scale. While some smaller enterprises may have the
luxury of collecting verbose system logs from all endpoints,
larger enterprises are limited to coarse feeds from central-
ized resources such as network sensors or domain controllers.
Second, we wanted the data to provide clear and concise in-
formation related to our target detection of lateral movement.
Therefore, we design our algorithm to utilize network-level au-
thentication logs generated from Zeek sensors [31] (formerly
258    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
servers and ﬁle servers (hr-email, hr-fserv, rnd-email, rnd-
fserv). We can see that user Sally is a network administrator,
as she has authentication activity to the Domain Controller ser-
vice node (DC) in the environment, the email and ﬁle server
nodes, as well as her own workstation node (it-win10-1). Note
that for display purposes, the IP nodes have been collapsed
into their representative service nodes.
2.3 Lateral Movement
Lateral movement is a key stage of APT-level attack cam-
paigns as seen in various attack taxonomies such as the Lock-
heed Martin Cyber Kill Chain [17], and the MITRE ATT@CK
framework [21]. Figure 2 provides a simpliﬁed version of an
APT-style campaign. After some initial compromise, and prior
to domain ownership by the adversary, there is a cycle of lat-
eral movement through the network. In most cases, the system
that is initially compromised will be a low privileged account,
typically a user workstation. This is due to the prevalence
of client-side attacks (e.g., phishing), which are much more
effective on typical, low-privilege users, as opposed to high-
privilege IT professionals. Thus, the attacker almost always
gains a foothold on a low privilege system and is thus required
to move laterally through the network to achieve their goals.
Deﬁnition 2 Lateral movement is deﬁned as a malicious
path  conducted by an attacker in an organization’s
network characterized by the authentication graph, where u,v
belong to entity set {IP, user, service}.
For example, in Figure 1, if the user Alice fell victim to a
phishing email and downloaded malware, the attacker would
gain their initial foothold as account Alice on hr-win7-2. As
Alice is a low-privilege account, it is unlikely that the attacker
would be able to do much harm to the enterprise at large, such
as installing ransomware on all the systems in the network,
or exﬁltrating highly sensitive business data. Therefore, the
attacker would be required to move laterally to systems and
Figure 2: An APT-style campaign showing the cycle of lateral
movement after initial compromise and prior to full domain
ownership.
Figure 1: Example of an authentication graph for a small
simulated network.
Bro). Speciﬁcally, we utilize the Kerberos logging capability,
which generates protocol speciﬁc logging on the Kerberos
authentication protocol which is utilized in the majority of
Microsoft Windows domains. The technique is easily adapt-
able, however, to other authentication logs such as host-based
authentication logs, NTLM logs, Active Directory logs, or
others, providing they can uniquely identify authentication
events between user and system identities in the network.
For Kerberos logs, we extract the client and service princi-
pals, which are unique identiﬁers associated with users and
services in the network, as well as the source IP address of the
requesting entity, which will uniquely identify the machine
from which the client is operating. The destination IP address
will always be the IP of the Kerberos server itself, and thus
does not add valuable information to our graph. Here is an
example of content we extract from the Kerberos logs with
their respective Zeek column headings:
client
id_orig_h
jdoe/G.LAB 10.1.1.152
service
host/hr-1.g.lab
This record shows that the user jdoe of domain G.LAB au-
thenticated to service host/hr-1.g.lab, which is a host in the
network, from IP address 10.1.1.152.
Deﬁnition 1 An authentication graph (AG) is deﬁned as a
graph G = (V,E) with a node type mapping φ: V → A and
an edge type mapping ψ: E → R, where V denotes the node
set and E denotes the edge set, A = {IP, user, service} and
R = {authentication}.
A simple authentication graph generated from a small sim-
ulated computer network is shown in Figure 1. We can infer
from this graph that there are two separate organizational units
in our enterprise: the hr unit and the rnd unit, each with two
user nodes (Bob and Alice, John and Mary) interacting with
user workstations represented as service nodes (hr-win7-1,
hr-win7-2, rnd-win10-1, rnd-win10-2), as well as some email
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    259
Figure 3: Full algorithm pipeline including ofﬂine training of node embeddings and logistic regression link predictor, as well as
online detection via an embedding lookup, link prediction, and threshold-based anomaly detection.
accounts that have higher permissions in the environment.
This can be done by exploitation of vulnerabilities, however,
this is often a noisy and error prone process. More often, ad-
versaries will harvest and abuse legitimate credentials from
the set of compromised systems. In the case of our example,
Alice could harvest the domain admin Sally’s credentials from
the ﬁle server hr-fserv which Sally had previously authenti-
cated to, and Alice has privileges to access. Now, with Sally’s
credentials, Alice can authenticate from hr-win7-2 to the Do-
main Controller (DC). This attack could be characterized by
the lateral movement path: .
Existing techniques are not well suited to detect lateral
movement within enterprise-scale environments. Most Intru-
sion Detection Systems (IDSs) are placed at the border of a
network, and will fail to detect attacker actions after an initial
foothold has been established. Even if the IDS had total visibil-
ity, an attacker using legitimate authentication channels would
likely not trigger any alerts. Host-based security software re-
lies almost exclusively on identifying signatures of known