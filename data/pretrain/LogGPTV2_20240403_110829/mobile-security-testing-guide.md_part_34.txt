245
Code Quality and Build Settings for Android Apps
vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or
might be the case in the future, then look for an alternative which provides similar functionality, but without the
vulnerabilities.
Is the library not packaged with the application? See if there is a patched version in which the vulnerability is
fixed. If this is not the case, check if the implications of the vulnerability for the build-process. Could the
vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in
which the vulnerability is fixed.
When the sources are not available, one can decompile the app and check the jar files. When Dexguard or Proguard
are applied properly, then version information about the library is often obfuscated and therefore gone. Otherwise you
can still find the information very often in the comments of the Java files of given libraries. Tools such as MobSF can
help in analyzing the possible libraries packed with the application. If you can retrieve the version of the library, either
via comments, or via specific methods used in certain versions, you can look them up for CVEs by hand.
Detecting the licenses used by the libraries of the application
In order to ensure that the copyright laws are not infringed, one can best check the dependencies by using a plugin
which can iterate over the different libraries, such as License Gradle Plugin . This plugin can be used by taking the
following steps.
In your build.gradle file add:
plugins {
id "com.github.hierynomus.license-report" version"{license_plugin_version}"
}
Now, after the plugin is picked up, use the following commands:
$ gradle assemble
$ gradle downloadLicenses
Now a license-report will be generated, which can be used to consult the licenses used by the third party libraries.
Please check the license agreements to see whether a copyright notice needs to be included into the app and
whether the license type requires to open-source the code of the application.
Similar to dependency checking, there are commercial tools which are able to check the licenses as well, such as
SourceClear, Snyk or Blackduck.
Note: If in doubt about the implications of a license model used by a third party library, then consult with a legal
specialist.
When a library contains a license in which the application IP needs to be open-sourced, check if there is an alternative
for the library which can be used to provide similar functionalities.
Note: In case of a hybrid app, please check the build tools used: most of them do have a license enumeration plugin
to find the licenses being used.
When the sources are not available, one can decompile the app and check the jar files. When Dexguard or Proguard
are applied properly, then version information about the library is often gone. Otherwise you can still find it very often
in the comments of the Java files of given libraries. Tools such as MobSF can help in analyzing the possible libraries
packed with the application. If you can retrieve the version of the library, either via comments, or via specific methods
used in certain versions, you can look them up for their licenses being used by hand.
Dynamic Analysis
246
Code Quality and Build Settings for Android Apps
The dynamic analysis of this section comprises validating whether the copyrights of the licenses have been adhered
to. This often means that the application should have an about or EULA section in which the copy-right statements
are noted as required by the license of the third party library.
Testing Exception Handling (MSTG-CODE-6 and MSTG-CODE-7)
Overview
Exceptions occur when an application gets into an abnormal or error state. Both Java and C++ may throw exceptions.
Testing exception handling is about ensuring that the app will handle an exception and transition to a safe state
without exposing sensitive information via the UI or the app's logging mechanisms.
Static Analysis
Review the source code to understand the application and identify how it handles different types of errors (IPC
communications, remote services invocation, etc.). Here are some examples of things to check at this stage:
Make sure that the application uses a well-designed and unified scheme to handle exceptions.
Plan for standard RuntimeException s (e.g. NullPointerException , IndexOutOfBoundsException ,
ActivityNotFoundException , CancellationException , SQLException ) by creating proper null checks, bound
checks, and the like. An overview of the available subclasses of RuntimeException can be found in the Android
developer documentation. A child of RuntimeException should be thrown intentionally, and the intent should be
handled by the calling method.
Make sure that for every non-runtime Throwable there's a proper catch handler, which ends up handling the
actual exception properly.
When an exception is thrown, make sure that the application has centralized handlers for exceptions that cause
similar behavior. This can be a static class. For exceptions specific to the method, provide specific catch blocks.
Make sure that the application doesn't expose sensitive information while handling exceptions in its UI or log-
statements. Ensure that exceptions are still verbose enough to explain the issue to the user.
Make sure that all confidential information handled by high-risk applications is always wiped during execution of
the finally blocks.
byte[] secret;
try{
//use secret
} catch (SPECIFICEXCEPTIONCLASS | SPECIFICEXCEPTIONCLASS2 e) {
// handle any issues
} finally {
//clean the secret.
}
Adding a general exception handler for uncaught exceptions is a best practice for resetting the application's state
when a crash is imminent:
public class MemoryCleanerOnCrash implements Thread.UncaughtExceptionHandler {
private static final MemoryCleanerOnCrash S_INSTANCE = new MemoryCleanerOnCrash();
private final List mHandlers = new ArrayList<>();
//initialize the handler and set it as the default exception handler
public static void init() {
S_INSTANCE.mHandlers.add(Thread.getDefaultUncaughtExceptionHandler());
Thread.setDefaultUncaughtExceptionHandler(S_INSTANCE);
}
//make sure that you can still add exception handlers on top of it (required for ACRA for instance)
247
Code Quality and Build Settings for Android Apps
public void subscribeCrashHandler(Thread.UncaughtExceptionHandler handler) {
mHandlers.add(handler);
}
@Override
public void uncaughtException(Thread thread, Throwable ex) {
//handle the cleanup here
//....
//and then show a message to the user if possible given the context
for (Thread.UncaughtExceptionHandler handler : mHandlers) {
handler.uncaughtException(thread, ex);
}
}
}
Now the handler's initializer must be called in your custom Application class (e.g., the class that extends
Application ):
@Override
protected void attachBaseContext(Context base) {
super.attachBaseContext(base);
MemoryCleanerOnCrash.init();
}
Dynamic Analysis
There are several ways to do dynamic analysis:
Use Xposed to hook into methods and either call them with unexpected values or overwrite existing variables with
unexpected values (e.g., null values).
Type unexpected values into the Android application's UI fields.
Interact with the application using its intents, its public providers, and unexpected values.
Tamper with the network communication and/or the files stored by the application.
The application should never crash; it should
recover from the error or transition into a state in which it can inform the user of its inability to continue,
if necessary, tell the user to take appropriate action (The message should not leak sensitive information.),
not provide any information in logging mechanisms used by the application.
Memory Corruption Bugs (MSTG-CODE-8)
Android applications often run on a VM where most of the memory corruption issues have been taken care off. This
does not mean that there are no memory corruption bugs. Take CVE-2018-9522 for instance, which is related to
serialization issues using Parcels. Next, in native code, we still see the same issues as we explained in the general
memory corruption section. Last, we see memory bugs in supporting services, such as with the stagefreight attack as
shown at BlackHat.
A memory leak is often an issue as well. This can happen for instance when a reference to the Context object is
passed around to non- Activity classes, or when you pass references to Activity classes to your helperclasses.
Static Analysis
There are various items to look for:
Are there native code parts? If so: check for the given issues in the general memory corruption section. Native
248
Code Quality and Build Settings for Android Apps
code can easily be spotted given JNI-wrappers, .CPP/.H/.C files, NDK or other native frameworks.
Is there Java code or Kotlin code? Look for Serialization/deserialization issues, such as described in A brief
history of Android deserialization vulnerabilities.
Note that there can be Memory leaks in Java/Kotlin code as well. Look for various items, such as: BroadcastReceivers
which are not unregistered, static references to Activity or View classes, Singleton classes that have references to
Context , Inner Class references, Anonymous Class references, AsyncTask references, Handler references,
Threading done wrong, TimerTask references. For more details, please check:
9 ways to avoid memory leaks in Android
Memory Leak Patterns in Android.
Dynamic Analysis
There are various steps to take:
In case of native code: use Valgrind or Mempatrol to analyse the memory usage and memory calls made by the
code.
In case of Java/Kotlin code, try to recompile the app and use it with Squares leak canary.
Check with the Memory Profiler from Android Studio for leakage.
Check with the Android Java Deserialization Vulnerability Tester, for serialization vulnerabilities.
Make Sure That Free Security Features Are Activated (MSTG-CODE-9)
Overview
Because decompiling Java classes is trivial, applying some basic obfuscation to the release byte-code is
recommended. ProGuard offers an easy way to shrink and obfuscate code and to strip unneeded debugging
information from the byte-code of Android Java apps. It replaces identifiers, such as class names, method names, and
variable names, with meaningless character strings. This is a type of layout obfuscation, which is "free" in that it
doesn't impact the program's performance.
Since most Android applications are Java-based, they are immune to buffer overflow vulnerabilities. Nevertheless, a
buffer overflow vulnerability may still be applicable when you're using the Android NDK; therefore, consider secure
compiler settings.
Static Analysis
If source code is provided, you can check the build.gradle file to see whether obfuscation settings have been applied.
In the example below, you can see that minifyEnabled and proguardFiles are set. Creating exceptions to protect
some classes from obfuscation (with "-keepclassmembers" and "-keep class") is common. Therefore, auditing the
ProGuard configuration file to see what classes are exempted is important. The getDefaultProguardFile('proguard-
android.txt') method gets the default ProGuard settings from the /tools/proguard/ folder. The file
proguard-rules.pro is where you define custom ProGuard rules. You can see that many extended classes in our
sample proguard-rules.pro file are common Android classes. This should be defined more granularly on specific
classes or libraries.
By default, ProGuard removes attributes that are useful for debugging, including line numbers, source file names, and
variable names. ProGuard is a free Java class file shrinker, optimizer, obfuscator, and pre-verifier. It is shipped with
Android's SDK tools. To activate shrinking for the release build, add the following to build.gradle:
android {
buildTypes {
release {
249
Code Quality and Build Settings for Android Apps
minifyEnabled true
proguardFiles getDefaultProguardFile('proguard-android.txt'),
'proguard-rules.pro'
}
}
...
}
proguard-rules.pro
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
Dynamic Analysis
If source code has not been provided, an APK can be decompiled to determine whether the codebase has been
obfuscated. Several tools are available for converting dex code to a jar file (e.g., dex2jar). The jar file can be opened
with tools (such as JD-GUI) that can be used to make sure that class, method, and variable names are not human-
readable.
Sample obfuscated code block:
package com.a.a.a;
import com.a.a.b.a;
import java.util.List;
class a$b
extends a
{
public a$b(List paramList)
{
super(paramList);
}
public boolean areAllItemsEnabled()
{
return true;
}
public boolean isEnabled(int paramInt)
{
return true;
}
}
References
OWASP Mobile Top 10 2016
M7 - Poor Code Quality - https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality
OWASP MASVS
MSTG-CODE-1: "The app is signed and provisioned with valid certificate."
MSTG-CODE-2: "The app has been built in release mode, with settings appropriate for a release build (e.g. non-
debuggable)."
MSTG-CODE-3: "Debugging symbols have been removed from native binaries."
250
Code Quality and Build Settings for Android Apps
MSTG-CODE-4: "Debugging code has been removed, and the app does not log verbose errors or debugging
messages."
MSTG-CODE-5: "All third party components used by the mobile app, such as libraries and frameworks, are
identified, and checked for known vulnerabilities."
MSTG-CODE-6: "The app catches and handles possible exceptions."
MSTG-CODE-7: "Error handling logic in security controls denies access by default."
MSTG-CODE-8: "In unmanaged code, memory is allocated, freed and used securely."
MSTG-CODE-9: "Free security features offered by the toolchain, such as byte-code minification, stack protection,
PIE support and automatic reference counting, are activated."
CWE
CWE-20 - Improper Input Validation
CWE-215 - Information Exposure through Debug Information
CWE-388 - Error Handling
CWE-489 - Leftover Debug Code
CWE-656 - Reliance on Security through Obscurity
CWE-937 - OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities
Tools
ProGuard - https://www.guardsquare.com/en/proguard
jarsigner - http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jarsigner.html
Xposed - http://repo.xposed.info/
Drozer - https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf
GNU nm - https://ftp.gnu.org/old-gnu/Manuals/binutils-2.12/html_node/binutils_4.html
Black Duck - https://www.blackducksoftware.com/
Sourceclear - https://www.sourceclear.com/
Snyk - https://snyk.io/
Gradle license plugn - https://github.com/hierynomus/license-gradle-plugin
Dependency-check-gradle - https://github.com/jeremylong/dependency-check-gradle
MobSF - https://www.github.com/MobSF/Mobile-Security-Framework-MobSF
Squares leak canary - https://github.com/square/leakcanary
Memory Profiler from Android Studio - https://developer.android.com/studio/profile/memory-profiler
Android Java Deserialization Vulnerability Tester - https://github.com/modzero/modjoda
Memory Analysis References
A brief history of Android deserialization vulnerabilities - https://lgtm.com/blog/android_deserialization
9 ways to avoid memory leaks in Android - https://android.jlelse.eu/9-ways-to-avoid-memory-leaks-in-android-
b6d81648e35e
Memory Leak Patterns in Android - https://android.jlelse.eu/memory-leak-patterns-in-android-4741a7fcb570
Android Documentation
APK signature scheme with key rotation - https://developer.android.com/about/versions/pie/android-9.0#apk-key-
rotation
251
Code Quality and Build Settings for Android Apps
252
Tampering and Reverse Engineering on Android
Tampering and Reverse Engineering on Android
Android's openness makes it a favorable environment for reverse engineers. In the following chapter, we'll look at
some peculiarities of Android reversing and OS-specific tools as processes.
Android offers reverse engineers big advantages that are not available with iOS. Because Android is open source, you
can study its source code at the Android Open Source Project (AOSP) and modify the OS and its standard tools any
way you want. Even on standard retail devices it is possible to do things like activating developer mode and
sideloading apps without jumping through many hoops. From the powerful tools shipping with the SDK to the wide
range of available reverse engineering tools, there's a lot of niceties to make your life easier.
However, there are also a few Android-specific challenges. For example, you'll need to deal with both Java bytecode
and native code. Java Native Interface (JNI) is sometimes deliberately used to confuse reverse engineers (to be fair,
there are legitimate reasons for using JNI, such as improving performance or supporting legacy code). Developers
sometimes use the native layer to "hide" data and functionality, and they may structure their apps such that execution
frequently jumps between the two layers.
You'll need at least a working knowledge of both the Java-based Android environment and the Linux OS and Kernel,
on which Android is based. You'll also need the right toolset to deal with both bytecode running on the Java virtual
machine and native code.
Note that we'll use the OWASP Mobile Testing Guide Crackmes as examples for demonstrating various reverse
engineering techniques in the following sections, so expect partial and full spoilers. We encourage you to have a crack
at the challenges yourself before reading on!
Reverse Engineering