147
class (Functor_ expr) => Applicative_ expr where
pure_ :: (Applicative f) => expr e (a -> f a)
ap_
:: (Applicative f) => expr e (f (a -> b) -> f a -> f b)
class (Applicative_ expr) => Monad_ expr where
bind_ :: (Monad m) => expr e (m a -> (a -> m b) -> m b)
class (Monad_ expr) => MonadWriter_ expr where
tell_
:: (MonadWriter w m) => expr e (w -> m ())
listen_ :: (MonadWriter w m) => expr e (m a -> m (a,w))
5.2.3 Plaintext DSL
In addition to these generic language components, there are several language components
which are unique to the plaintext DSL for BGV-style HE ([BGV14] and section 4.3). It
is trivial to extend the plaintext language with these new features: we simply deﬁne a
corresponding class and give instances for the appropriate interpreters. Note that while
the generic language components can by deﬁnition be supported by any interpreter, the
components which are part of the plaintext DSL but not the ciphertext DSL may only be
supported by a subset of the interpreters. This is simple to encode: we simply omit instances
of language components for interpreters that do not make sense. See section 5.5 for more
details.
In this section, we give only the language deﬁnitions; their implementations for P and E
are very simple.
148
Arithmetic with Public Values. The AddLit language component provides the addLit_
operation to add a meta-language literal of type a to an object-language expression of type
a:
class AddLit expr a where
addLit_ :: a -> expr e (a -> a)
Similarly, the MulLit language component introduces mulLit_, which multiplies a public
meta-language value with an object-language value. These language features are useful for
performing arithmetic with known constants.
Division by two. The Div2 language gives the div2_ operation to divide a value that is
known to be even by two, simultaneously reducing its modulus by a factor of two. Like
the Mul class, Div2 has an associated type family PreDiv2 which allows the interpreter to
specify how the input to the operation depends on the output. Concretely, our interpreters
all require that the input have a modulus that is twice that of the output.
class Div2 expr a where
type PreDiv2 expr a
div2_ :: expr e (PreDiv2 expr a -> a)
Applying linear functions. The linearCyc_ operation evaluates the given Linear func-
tion from a cyclotomic ring 𝑅 to a cyclotomic ring 𝑆. Like PreDiv2, the PreLinearCyc
type family determines the interpreter-speciﬁc input type cyclotomic representation from
the output’s representation. This is useful, e.g., in the PT2CT compiler, subsection 5.5.2.
In addition, the LinearCyc class has an associated constraint which permits interpreters
to require the types to satisfy certain relationships. This power is also available to other
lanuage components like Add because the object language type a appears as a parameter
to the class. Since LinearCyc has so many parameters, it is simpler to use a constraint
synonym to achieve the same effect.
149
class LinearCyc expr rep where
type LinearCycCtx expr rep e r s zp :: Constraint
type PreLinearCyc expr rep :: * -> *
linearCyc_ :: (LinearCycCtx expr rep e r s zp)
=> Linear zp e r s
-> expr env ((PreLinearCyc expr rep) (Cyc r zp)
-> rep (Cyc s zp))
Higher-level operations. Before compiling a computation into one which operates on
encrypted inputs, we must ﬁrst express the computation in terms of “native” HE operations.
These native operations have a straightforward translation into homomrphic operations;
non-native operations can be expressed in the HE scheme in many different ways, some of
which are more efﬁcient than others.
However, the set of native HE operations can be rather restrictive, and the user may
want to perform a computation which includes more advanced operations. We would like
to provide a way for the user to write computation using these high-level (i.e. non-native)
operations.
This is easy to do using the existing design of the plaintext DSL. The basic idea is to
extend the plaintext DSL with an expression which “arithmetizes” a non-native operation in
terms of basic arithmetic operations which are native to the HE scheme. The expression is
written entirely in terms of other plaintext DSL expressions, so the expression itself can be
considered as a native extension to the plaintext DSL. The type of this expression is similar
to the type of basic plaintext operations like add_ or div2_, so it can be used in the same
way to express computation which involve non-native HE operations. See subsection 6.6.1
for one such higher-level operation and its implementation in ALCHEMY.
150
5.3 Ciphertext DSL
The ciphertext DSL is composed of all of the generic language components, plus a few
features which make sense for ciphertexts, but not plaintexts. For example, we can change
the encryption key of a ciphertext, but this operation makes no sense on plaintexts, so this
operation is not part of the plaintext DSL. In general, the ciphertext DSL for any HE scheme
is closely coupled with the (implementation of the) HE scheme itself. Since ALCHEMY
targets BGV-style SHE as implemented in section 4.3, the ciphertext DSL operations use
types (for ciphertexts, keys, etc) from Λ∘𝜆.
5.3.1 BGV-style SHE in Λ∘𝜆
We give a brief overview of the relevant SHE types in Λ∘𝜆. Some unnecessary details have
been suppressed for clarity.
In this cryptosystem, a plaintext is an element of the 𝑚th cyclotomic ring mod 𝑝, i.e.
𝑅𝑝 = Z𝑝[𝑋]/(Φ𝑚(𝑋)), where Φ𝑚(𝑋) is the 𝑚th cyclotomic polynomial. In Λ∘ 𝜆, this
ring is represented with the data type Cyc m zp, where m is a (type-level) natural number
representing the parameter 𝑚 (known as the cyclotomic index) and zp is a type for integer
arithmetic mod 𝑝 (i.e., Z𝑝 arithmetic).
A ciphertext is a polynomial over the 𝑚′th cyclotomic ring mod 𝑞, where the plaintext
𝑞. Λ∘ 𝜆 represents
index 𝑚 divides the ciphertext index 𝑚′. We denote this ring by 𝑅′
ciphertexts with the type CT m zp (Cyc m’ q), where m and zp are the plaintext parameters,
and m’, q are the ciphertext parameters.
The secret key for a ciphertext with type CT m zp (Cyc m’ zq) is encoded as SK (Cyc
m’ z), where z represents the ring of integers (not mod anything).
Arithmetic Operations. Λ∘𝜆 deﬁnes the native SHE operations on these types. Concretely,
the CT data type is an instance of Haskell’s Additive and Ring classes, so we can use the
(+) and (*) operators on ciphertexts. Note that the Add and Ring instances for E given
151
in subsection 5.2.1 and subsection 5.2.3 sufﬁce to obtain addition and multiplication for
ciphertexts, with no extra work.
In addition to adding and multiplying ciphertexts, we can also add and multiply a public
plaintext value with a ciphertext. These operations are captured with the DSL expressions
addPublic_ and mulPublic_, which are part of the SHE ciphertext language component:
addPublic_ :: (SHE expr, ct ~ CT m zp (Cyc m’ zq), ...)
=> Cyc m zp -> expr env (ct -> ct)
mulPublic_ :: (SHE expr, ct ~ CT m zp (Cyc m’ zq), ...)
=> Cyc m zp -> expr env (ct -> ct)
Here, Cyc m zp represents a plaintext value in 𝑅𝑝. The functions take a public plaintext
value and output an expression from a ciphertext encrypting an 𝑅𝑝 value to a new ciphertext.
Rescaling Plaintexts. The SHE scheme also allows us to rescale an encrypted plaintext
while simultaneously changing the modulus of the plaintext. The DSL operation for this is:
modSwitchPT_ :: (SHE expr, ...)
=> expr env (CT m zp (Cyc m’ zq) -> CT m zp’ (Cyc m’ zq))
Ring switching. We can apply a linear function to an encrypted plaintext (which possibly
moves the plaintext to a new ring) using the tunnel_ operation:
tunnel_ :: (SHE expr, ...) => TunnelHint gad e r s e’ r’ s’ zp zq
-> expr env (CT r zp (Cyc r’ zq) -> CT s zp (Cyc s’ zq))
tunnel_ corresponds to Λ∘ 𝜆’s implementation of ring switching called ring tunneling,
which moves an (encrypted) plaintext in the 𝑟th cyclotomic ring 𝑅 to an encrypted plaintext
in the 𝑠th cyclotomic ring 𝑆. In the process, tunneling applies any function 𝑓 : 𝑅 → 𝑆 to
the plaintext, as long as 𝑓 is linear over the 𝑒th cyclotomic ring (for some 𝑒 dividing both
152
𝑟 and 𝑠). Each of the plaintext indices 𝑒,𝑟,𝑠 has a corresponding ciphertext index 𝑒′,𝑟′,𝑠′,
subject to divisibility constraints. The public TunnelHint input encodes the linear function
𝑓 that will be applied to the plaintext. The hint data type is parameterized by the gadget used
to make the hint, all relevant cyclotomic indices, and the plaintext and ciphertext moduli.
Ciphertext management. Many SHE operations are most convenient to perform when
the ciphertext is a linear polynomial (in the secret key) over 𝑅′
𝑞. Ciphertext multiplication
produces a quadratic polynomial. Thus to perform more operations, we have to “linearize”
the ciphertext using a (circular) key switch with keySwitchQuadCirc:
keySwitchQuad_ :: (ct ~ CT m zp (Cyc m’ zq), ...)
=> KSQuadCircHint gad (Cyc m’ zq) -> expr env (ct -> ct)
The DSL operation requires additional (public) information in the form of a hint. The hint
data type, KSQuadCircHint, is parameterized by a gadget used to perform the key switch,
as well as the type for the ciphertext ring.
Measuring and Managing Ciphertext Noise. Ciphertexts have an implicit error term
which grows as homomorphic operations are performed. If this noise becomes too large,
the ciphertext cannot be decrypted, and the plaintext is lost. Thus an important part of
the cryptosystem is controlling the noise growth by augmenting a computation with noise
management operations.
We ﬁrst consider an operation which helps to control the size of the absolute error in a
ciphertext by rescaling the ciphertext modulus:
modSwitch_ :: (SHE expr, ...)
=> expr env (CT m zp (Cyc m’ zq) -> CT m zp (Cyc m’ zq’))
See section 4.3 for details.
153
It is difﬁcult to predict how the (relative) error rate changes throughout a computation.
In practice, it is simplest to just decrypt the ciphertext, observing the error rate in the process.
This is captured with a new ciphertext language component:
class ErrorRate expr where
errorRate_ :: (...)
=> SK (Cyc m’ z) -> expr e (CT m zp (Cyc m’ zq) -> Double)
Since extracting and measuring the error term requires the decrypting the ciphertext,
errorRate_ takes the secret key under which the input (object-language) ciphertext is
encrypted.
Connection to SHE implementation. Recall that the SHE language component is tightly
coupled with the underlying implementation in Λ∘𝜆. Each of the functions from the SHE
language component correspond directly with a similarly named function from the Λ∘𝜆
SHE interface. For example, the DSL operation addPublic_ corresponds to addPublic
from the SHE implementation, which has the following signature:
addPublic :: (AddPublicCtx m m’ zp zq)
=> Cyc m zp -> CT m zp (Cyc m’ zq) -> CT m zp (Cyc m’ zq)
The addPublic_ operation is a Haskell function which takes a value in the plaintext ring
and produces an expression for an object language function which takes a ciphertext and
produces a ciphertext. Similarly, addPublic takes a plaintext element and a ciphertext and
produces a new ciphertext.
The coupling between the interfaces becomes even more apparent with the evaluation
interpreter. To evaluate any SHE DSL operation, we simply call the corresponding function
from Λ∘𝜆’s SHE interface, as in this partial instance:
instance SHE E (CT m zp (Cyc m’ zq)) =>
addPublic_ a = E $ \e -> \ct -> addPublic a ct
154
With the exception of errorRate_, the other ciphertext language features described above
similarly match the functionality of the corresponding function from the Λ∘𝜆 interface,
and have equally simple implementations. For errorRate_, we ﬁrst use the Λ∘𝜆’s SHE
interface to obtain the error term, then compute the associated error rate.
5.4
Interpreters
We now describe a selection of the interpreters included with ALCHEMY. We describe our
ﬂagship interpreter, the homomorphic compiler, in section 5.5. We have already seen one
interpreter in its entirety: the evaluation interpreter E described in subsection 5.2.1.
5.4.1 Pretty-printer
The pretty-print interpreter turns an ALCHEMY DSL expression into a string representing
the expression. This interpreter was simpliﬁed in subsection 5.2.1; we describe the actual
implementation here. The pretty-printer P is deﬁned as:
newtype P e a = P (Int -> String)
pprint :: P () a -> String -- same as previous definition
A pretty-print expression is thus represented by a Int -> String function. The argument
indicates how many variables are in scope for this expression. This value is ignored for most
language components like Add, Mul, Pair, etc:
instance Add P a where
add_ = P $ \i -> "add_"
However, the scoping information is needed to pretty-print a lambda expression:
instance Lambda P where
lam (P f) =
155
P $ \i -> "(\\v" ++ show
i ++ " -> " ++ f (i+1) ++ ")"
(P f) $: (P a) =
P $ \i -> "("
++ f i ++ " "
++ a i
++ ")"
v0
= P $ \i -> "v" ++ show (i-1)
s
(P v) = P $ \i -> v (i-1)
lam creates a string with a lambda for variable 𝑖, then recursively prints the rest of the
expression, adding one more variable to the scope. The ($:) operator is object-language
function application, which doesn’t introduce or hide any variable, so ($:) appends the
two subexpressions without changing the variable counter. Since the body of any lambda
has at least one bound variable (by deﬁnition), v0 uses 𝑖 − 1 so that variables are zero-
indexed. Finally, since s is used to refer to a variable in an extended scope (as opposed to
the closest-bound variable), it recursively interprets the subexpression in a context with one
fewer variables.
5.4.2 Expression Size
A useful metric for evaluating the complexity of an expression is its size, in term of the
number of DSL operations used. The size interpreter S is deﬁned as:
newtype S e a = S { size :: Int }
size :: S () a -> Int
Thus all expressions are simply represented by an integer, which can be extracted using
size. This simple deﬁnition leads to equally simple instances:
instance AddLit S a where
addLit_ _ = S 1
instance Lambda S where
156
lam (S i) = S $ i+1
(S f) $: (S a) = S $ f + a
v0 = S 1
s (S i) = S i
The most interesting instance is Lambda. Clearly v0 should have size one. The same should
be true for any other variable, so uses of s don’t increase 𝑖. Lambdas increase the size of
an expression by one, so lam increments 𝑖. Finally, the function application operation ($:)
simply adds the size of the function and the size of the argument.
5.4.3 Expression Duplicator
So far, we have seen that each ALCHEMY interpreter uses a concrete representation for
expressions. However, the expressions themselves are written using only DSL operations,
which are abstract and not tied to any speciﬁc interpreter (i.e., ALCHEMY expressions are