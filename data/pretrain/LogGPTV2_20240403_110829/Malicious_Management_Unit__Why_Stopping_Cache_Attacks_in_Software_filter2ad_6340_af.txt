nario of trusted components managing explicitly (e.g.,
kernel buffers) or implicitly (e.g., deduplicated page ta-
bles [9]) shared pages across security domains, whose
access can be indirectly controlled by an attacker. Color-
ing alone cannot help here and, even assuming one can
pinpoint all such scenarios, supporting a zero-sharing so-
lution amenable to coloring may have deep implications
for systems design and raise new performance-security
challenges and trade-offs.
In short, there is no simple
software ﬁx and this is an open challenge for future re-
search.
We conclude by noting that addressing this challenge
is non-trivial for hardware-based solutions as well. For
instance, the published implementation of CATalyst [30]
explicitly moves page table pages mapping secure pages
out of the secure domain, which, can, for instance, open
the door to MMU-to-MMU attacks. A quick ﬁx is to
keep secure page table pages in the secure domain, but
this would further reduce CATalyst’s number of sup-
ported secure pages (and hence scalability) by a worst-
case factor of 5 on a 4-level page table architecture.
9 Related Work
We have already covered literature on cache attacks and
defenses in Sections 3 and 4. Here we instead focus on
related work that use side-channel attacks in the context
of Intel SGX or ASLR.
Intel SGX
9.1
Intel Security Guard eXtensions (SGX) is a feature avail-
able on recent Intel processors since Skylake, which of-
fers protected enclaves isolated from the remainder of the
system. The latter includes the privileged OS and the hy-
pervisor, allowing for the execution of security-sensitive
application logic on top of an untrusted run-time soft-
ware environment. However, when a page fault occurs
during enclave execution, the control is handed over to
the untrusted OS, revealing the base address of the fault-
ing page. This property can be exploited in a controlled-
channel (page fault) attack, whereby a malicious OS can
clear the present bit in the Page Table Entries (PTEs) of
a victim enclave, obtain a page-level execution trace of
the victim, and leak information [41].
Many defenses have been proposed to counter
controlled-channel attacks. Shih et al. [37] observe that
code running in a transaction using Intel TSX imme-
diately returns to a user-level abort handler whenever
a page fault occurs instead of notifying a (potentially
malicious) OS. With their T-SGX compiler, each basic
block is wrapped in a transaction guaranteed to trap to
a carefully designed springboard page at each attack at-
tempt. Chen et al. [5] extend such design not to only
hide page faults, but to also monitor suspicious interrupt
rates. Constan et al. [7] present Sanctum, a hardware-
software co-design that prevents controlled-channel at-
tacks by dispatching page faults directly to enclaves and
by allowing enclaves to maintain their own virtual-to-
physical mappings in a separate page table hierarchy in
enclave-private memory. To bypass these defenses, Van
USENIX Association
27th USENIX Security Symposium    949
Bulck et al. [38] observe that malicious operating sys-
tems can monitor memory accesses from enclaves with-
out resorting to page faults, by exploiting other side-
effects from the address translation process.
9.2 ASLR
Address Space Layout Randomization (ASLR) is used
to mitigate memory corruption attacks by making ad-
dresses unpredictable to an attacker. ASLR is commonly
applied to user-space applications (e.g., web browsers)
and OS kernels (i.e., KASLR) due to its effectiveness and
low overhead. Unfortunately ASLR suffers from various
side-channel attacks which we discuss here.
Memory deduplication is a mechanism for reducing
the footprint of applications and virtual machines in the
cloud by merging memory pages with the same contents.
While memory deduplication is effective in improving
memory utilization, it can be abused to break ASLR and
leak other sensitive information [2, 4]. Oliverio et al. [32]
show that by only merging idle pages it is possible to
mitigate security issues with memory deduplication. The
AnC attack [12] shows an EVICT + TIME attack on the
MMU that leak pointers in JavaScript, breaking ASLR.
Hund et al. [20] demonstrate three different timing
side-channel attacks to bypass KASLR. The ﬁrst attack
is a variant of PRIME + PROBE that searches for cache
collisions with the kernel address. The second and third
attacks exploit virtual address translation side channels
that measurably affect user-level page fault latencies. In
response to these attacks, modern operating systems mit-
igate access to physical addresses, while it is possible to
mitigate the other page fault attacks by preventing exces-
sive use of user-level page faults leading to segmentation
faults [20]. To bypass such mitigations, Gruss et al. [15]
observe that the prefetch instruction leaks timing infor-
mation on address translation and can be used to prefetch
privileged memory without triggering page faults. Simi-
larly, Jang et al. [22] propose using Intel TSX to suppress
page faults and bypass KASLR.
10 Conclusion
In recent years, cache side-channel attacks have estab-
lished themselves as a serious threat. The research com-
munity has scrambled to devise powerful defenses to
stop them by partitioning shared CPU caches into dif-
ferent security domains. Due to their scalability, ﬂexi-
bility, and portability, software-based defenses are com-
monly seen as particularly attractive. Unfortunately, as
we have shown, they are also inherently weak. The
problem is that state-of-the-art defenses only partition
the cache based on direct memory accesses to the cache
by untrusted code.
In this paper, we have shown that
indirect cache attacks, whereby another trusted compo-
nent such as the MMU accesses the cache on the at-
tackers’ behalf, are just as dangerous. The trusted com-
ponent acts as a confused deputy so that the attack-
ers, without ever violating the cache partitioning mech-
anisms themselves, can still mount cache attacks that
bypass all existing software-based defenses. We have
exempliﬁed this new class of attacks with MMU-based
indirect cache attacks and demonstrated their effective-
ness against existing defenses in practical settings. We
have also discussed mitigations and shown that devising
general-purpose software-based defenses that stop arbi-
trary direct and indirect cache attacks remains an open
challenge for future research.
Acknowledgements
We would like to thank the anonymous reviewers for
their valuable feedback. The research leading to these
results has received funding from the European Union’s
Horizon 2020 Research and Innovation Programme, un-
der Grant Agreement No. 786669 and was supported in
part by the MALPAY project and by the Netherlands Or-
ganisation for Scientiﬁc Research through grants NWO
639.023.309 VICI “Dowsing”, NWO 639.021.753 VENI
“PantaRhei”, and NWO 629.002.204 “Parallax”.
References
[1] Thomas W. Barr, Alan L. Cox, and Scott Rixner.
Translation Caching: Skip, Don’t Walk (the Page
Table). ISCA ’10.
[2] Antonio Barresi, Kaveh Razavi, Mathias Payer, and
Thomas R. Gross. CAIN: Silently Breaking ASLR
in the Cloud. WOOT ’15.
[3] Brian N Bershad, Dennis Lee, Theodore H Romer,
and J Bradley Chen. Avoiding Conﬂict Misses
Dynamically in Large Direct-Mapped Caches.
In
ACM SIGPLAN Notices, volume 29, pages 158–
170. ACM, 1994.
[4] Erik Bosman, Kaveh Razavi, Herbert Bos, and
Cristiano Giuffrida. Dedup Est Machina: Memory
Deduplication as an Advanced Exploitation Vector.
S&P ’16.
[5] Sanchuan Chen, Xiaokuan Zhang, Michael K Re-
iter, and Yinqian Zhang. Detecting Privileged Side-
channel Attacks in Shielded Execution with Déjá
Vu. ASIA CCS ’17.
[6] Patrick Colp, Jiawen Zhang, James Gleeson, Sahil
Suneja, Eyal de Lara, Himanshu Raj, Stefan Saroiu,
950    27th USENIX Security Symposium
USENIX Association
and Alec Wolman. Protecting Data on Smartphones
and Tablets from Memory Attacks. ACM SIGPLAN
Notices, 50(4):177–189, 2015.
[7] Victor Costan, Ilia A Lebedev, and Srinivas De-
vadas. Sanctum: Minimal Hardware Extensions for
Strong Software Isolation. USENIX Security ’16.
[8] Craig Disselkoen, David Kohlbrenner, Leo Porter,
and Dean Tullsen. Prime+Abort: A Timer-Free
High-Precision L3 Cache Attack using Intel TSX.
USENIX Security ’17.
[9] Xiaowan Dong, Sandhya Dwarkadas, and Alan L
Cox. Shared Address Translation Revisited. Eu-
roSys ’16.
[10] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and
Kaveh Razavi. Grand Pwning Unit: Accelerating
Microarchitectural Attacks with the GPU. S&P ’18.
[11] Ben Gras, Kaveh Razavi, Herbert Bos, and Cris-
tiano Giuffrida. Translation Leak-aside Buffer: De-
feating Cache Side-channel Protections with TLB
Attacks. USENIX Security ’18.
[12] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert
Bos, and Cristiano Giuffrida. ASLR on the line:
Practical cache attacks on the MMU.
[13] Marc Green, Leandro Rodrigues-Lima, Andreas
Zankl, Gorka Irazoqui, Johann Heyszl, and Thomas
Eisenbarth. AutoLock: Why Cache Attacks on
ARM Are Harder Than You Think. USENIX Se-
curity ’17.
[14] Daniel Gruss, Julian Lettner, Felix Schuster, Olya
Ohrimenko,
Istvan Haller, and Manuel Costa.
Strong and Efﬁcient Cache Side-Channel Pro-
tection using Hardware Transactional Memory.
USENIX Security ’17.
[15] Daniel Gruss, Clémentine Maurice, Anders Fogh,
Moritz Lipp, and Stefan Mangard. Prefetch Side-
Channel Attacks: Bypassing SMAP and Kernel
ASLR. CCS ’16.
[16] Daniel Gruss, Clémentine Maurice, Klaus Wagner,
and Stefan Mangard. Flush + Flush: A Fast and
Stealthy Cache Attack. In Detection of Intrusions
and Malware, and Vulnerability Assessment, pages
279–299. Springer, 2016.
[17] David Gullasch, Endre Bangerter, and Stephan
Cache Games–Bringing Access-Based
Krenn.
Cache Attacks on AES to Practice. In S&P ’11.
[18] Andrew Herdrich, Edwin Verplanke, Priya Autee,
Ramesh Illikkal, Chris Gianos, Ronak Singhal, and
Ravi Iyer. Cache QoS: From Concept to Reality in
the Intel R(cid:13) Xeon R(cid:13) Processor E5-2600 v3 Product
Family. HPCA ’16.
[19] Ralf Hund, Carsten Willems, and Thorsten Holz.
Practical Timing Side Channel Attacks Against
Kernel Space ASLR. S&P ’13.
[20] Ralf Hund, Carsten Willems, and Thorsten Holz.
Practical Timing Side Channel Attacks Against
Kernel Space ASLR. S&P ’13.
[21] Gorka Irazoqui, Thomas Eisenbarth, and Berk
Sunar. S$A: A Shared Cache Attack that Works
Across Cores and Deﬁes VM Sandboxing–and its
Application to AES. S&P ’15.
[22] Yeongjin Jang, Sangho Lee, and Taesoo Kim.
Breaking Kernel Address Space Layout Random-
ization with Intel TSX. CCS ’16.
[23] Mehmet Kayaalp, Dmitry Ponomarev, Nael Abu-
Ghazaleh, and Aamer Jaleel. A High-Resolution
Side-Channel Attack on Last-Level Cache. DAC
’16.
[24] Richard E Kessler and Mark D Hill. Page Place-
ment Algorithms for Large Real-Indexed Caches.
[25] Taesoo Kim, Marcus Peinado, and Gloria Mainar-
Ruiz. STEALTHMEM: System-Level Protection
Against Cache-Based Side Channel Attacks in the
Cloud. USENIX Security ’12.
[26] Paul Kocher, Jann Horn, Anders Fogh, Daniel
Genkin, Daniel Gruss, Werner Haas, Mike Ham-
burg, Moritz Lipp, Stefan Mangard, Thomas
Prescher, Michael Schwarz, and Yuval Yarom.
Spectre Attacks: Exploiting Speculative Execution.
[27] Nate Lawson. Side-Channel Attacks on Crypto-
graphic Software.
[28] Jochen Liedtke, Hermann Hartig, and Michael
Hohmuth. OS-controlled Cache Predictability for
Real-time Systems. RTAS ’17.
[29] Moritz Lipp, Michael Schwarz, Daniel Gruss,
Thomas Prescher, Werner Haas, Anders Fogh,
Jann Horn, Stefan Mangard, Paul Kocher, Daniel
Genkin, Yuval Yarom, and Mike Hamburg. Melt-
down: Reading kernel memory from user space.
[30] Fangfei Liu, Qian Ge, Yuval Yarom, Frank Mck-
een, Carlos Rozas, Gernot Heiser, and Ruby B Lee.
CATalyst: Defeating Last-Level Cache Side Chan-
nel Attacks in Cloud Computing. HPCA ’16.
USENIX Association
27th USENIX Security Symposium    951
Appendix A Extended Results
Figure 8 shows a comparison of PRIME + PROBE,
PRIME + ABORT, XLATE + PROBE and XLATE +
ABORT while applying page coloring or way partition-
ing with 4, 8 and 12 ways available to the attacker. Fig-
ure 9 shows that we can fully mitigate the XLATE family
of attacks by extending page coloring to page tables.
[31] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser,
and Ruby B Lee. Last-Level Cache Side-Channel
Attacks are Practical. S&P ’15.
[32] Marco Oliverio, Kaveh Razavi, Herbert Bos, and
Cristiano Giuffrida. Secure Page Fusion with VU-
sion. SOSP ’17.
[33] Dag Arne Osvik, Adi Shamir, and Eran Tromer.
Cache Attacks and Countermeasures: the Case of
AES. In Cryptographers’ Track at the RSA Confer-
ence, pages 1–20. Springer, 2006.
[34] Ashay Rane, Calvin Lin, and Mohit Tiwari. Rac-
coon: Closing Digital Side-Channels through Ob-
fuscated Execution. USENIX Security ’15.
[35] ARM Limited. PL310 Cache Controller Technical
Reference Manual.
[36] CAT Intel. Improving Real-Time Performance by
Utilizing Cache Allocation Technology. Intel Cor-
poration, April, 2015.
[37] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and
Marcus Peinado. T-SGX: Eradicating Controlled-
Channel Attacks against Enclave Programs. NDSS
’17.
[38] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza,
Frank Piessens, and Raoul Strackx. Telling Your
Secrets Without Page Faults: Stealthy Page Table-
Based Attacks on Enclaved Execution. USENIX
Security ’17.
[39] Stephan van Schaik, Kaveh Razavi, Ben Gras,
Herbert Bos, and Cristiano Giuffrida. RevAnC:
A Framework for Reverse Engineering Hardware
Page Table Caches. EuroSec ’17.
[40] Barry Duane Williamson. Line Allocation in Multi-
Level Hierarchical Data Stores, September 18
2012. US Patent 8,271,733.
[41] Yuanzhong Xu, Weidong Cui, and Marcus Peinado.
Controlled-Channel Attacks: Deterministic Side
Channels for Untrusted Operating Systems. S&P
’15.
[42] Yuval Yarom and Katrina Falkner.
FLUSH +
RELOAD: A High Resolution, Low Noise, L3
Cache Side-Channel Attack. USENIX Security’14.
[43] Ying Ye, Richard West, Zhuoqun Cheng, and Ye Li.
COLORIS: A Dynamic Cache Partitioning System
Using Page Coloring. PACT ’14.
[44] Ziqiao Zhou, Michael K Reiter, and Yinqian Zhang.
A Software Approach to Defeating Side Channels
in Last-Level Caches. CCS ’16.
952    27th USENIX Security Symposium
USENIX Association
Figure 8: PRIME + PROBE, PRIME + ABORT, XLATE + PROBE and XLATE + ABORT against the AES implementation using
T-tables in OpenSSL on an Intel Core i7-6700K @ 4.00GHz (Skylake) while various software-based cache defenses are active.
USENIX Association
27th USENIX Security Symposium    953
0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(coloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT(coloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(coloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORT(coloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(4ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT(4ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(4ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORT(4ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(8ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT(8ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(8ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORT(8ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(12ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT(12ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(12ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORT(12ways)Figure 9: PRIME + PROBE, PRIME + ABORT, XLATE + PROBE and XLATE + ABORT against the AES implementation using
T-tables in OpenSSL on an Intel Core i7-6700K @ 4.00GHz (Skylake) before and after the mitigation of coloring page tables.
954    27th USENIX Security Symposium
USENIX Association
0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(nocoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(pagecoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(fullcoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT(nocoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT(pagecoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT(fullcoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(nocoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(pagecoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(fullcoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORT(nocoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORT(pagecoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORT(fullcoloring)