### Overwriting the Exception Handling Cache Pointer: Dwarf-Oriented Programming

**Authors:**
- James Oakley (Electron) - Electron100 *noSPAM* gmail.com
- Rodrigo Rubira Branco (@BSDaemon) - rodrigo *noSPAM* kernelhacking.com
- Sergey Bratus (Sbratus) - Sergey *noSPAM* cs.dartmouth.edu

**Credits:**
This presentation combines ideas, research, and discussions from the following individuals:
- **Sergey Bratus**: Insecurity Theory, Exploiting the Hard-working Dwarf
- **Meredith Patterson**: Langsec
- **Len Sassaman (R.I.P.)**: Langsec
- **James Oakley**: Exploiting the Hard-working Dwarf, including Katana
- **Rodrigo Rubira Branco**: Exploiting the Hard-working Dwarf, exploitation, implementation details, and research organization

**Motivation:**
- Software exploitation is no longer a generic process.
- Different exploitation primitives exist in various contexts.
- Modern exploitation techniques leverage these primitives.
- More is being 'computed' than just the code that was written (the target).

**Insecurity State:**
- "Treat all systems as compromised."
  - Deborah Plunkett, NSA Information Assurance Directorate
- "Long weeks to short months before a security meltdown."
  - Brian Snow, December 2010

**Does Prevention Work?**
- Many initiatives in 'trustworthy computing.'
- Numerous books on 'secure programming.'
- Extensive academic publications.
- Various test methods: fuzzing, binary analysis, etc.
- Despite these efforts, software remains vulnerable and is frequently exploited.
- The state of hardware security is even more uncertain.

**Insecurity and Computation:**
- The trustworthiness of a computer system is defined by what it can and cannot compute.
  - Can the system identify and reject invalid, unexpected, or malicious inputs?
  - Will the program perform only expected computations, or can it be subverted to perform malicious ones?
- Exploitation involves setting up, instantiating, and programming a 'weird machine.'
  - A part of the target is overwhelmed by crafted input, leading to an unexpected but manipulable state.

**Decidability:**
- Computation has some unsolvable (undecidable) problems, particularly regarding input recognition.
- An undecidable problem lacks a general algorithmic solution.

**Software Exploitation:**
- A part of the target is overwhelmed by crafted input, entering an unexpected but manipulable state.
- Primitives are exposed:
  - Memory corruption, implicit control flows
  - Unexpected control flows, etc.
- A 'weird machine' is unleashed:
  - A more powerful, programmable execution environment than intended or expected.

**Software Complexity:**
- Input validity checks are scattered throughout the program, mixed with processing logic.
- Many additional computing options are available to the 'weird machine programmer' (exploit writer).

**Weird Machine is Born!**
- There are many computations inside a program that can be used to subvert code execution, often unrelated to the original code.
- Return-Oriented Programming (ROP) has been used in exploits since 2000 (or earlier).

**Unix Exception Handling:**
- Binaries compiled with GCC and supporting exception handling contain DWARF bytecode.
  - Describes the stack frame layout.
  - Interpreted to unwind the stack after an exception occurs.
- The process image includes the DWARF interpreter (part of the GNU C++ runtime).
- Bytecode can be written to force the interpreter to perform any computation (Turing-Complete), including setting up library/system calls by modifying registers like stack and base pointers.
- See James and Sergey's previous work on DWARF Trojans.

**James Oakley and Sergey Bratus:**
- Proved that DWARF can replace code, creating a Trojan completely using DWARF bytecode.
- Demonstrated that DWARF is a complete development environment:
  - Can read memory.
  - Can compute with values from memory/registers.
  - Can influence the flow of execution of a process.

**ELF (Executable and Linkable Format):**
- The executable has this format both on disk and in memory.

**DWARF:**
- Developed as a debugging format to replace STABS.
- Standard: [dwarfstd.org](http://dwarfstd.org)
- Provides information such as code lines, variable types, backtraces, etc.
- ELF Sections: .debug_info, .debug_line, .debug_frame are defined in the standard.
- .debug_frame defines how to unwind the stack (restore each entry in the previous call frame).

**Linux Exception Handling:**
- GCC, the Linux Standards Base, and the ABI.