Overwri'ng	
  the	
  Excep'on	
  Handling	
Cache	
  Pointer	
  -­‐	
  Dwarf	
  Oriented	
Programming	
James	
  Oakley	
  (Electron)	
Electron100	
  *noSPAM*	
  gmail.com	
Rodrigo	
  Rubira	
  Branco	
  (@BSDaemon)	
rodrigo	
  *noSPAM*	
  kernelhacking.com	
Sergey	
  Bratus	
  (Sbratus)	
Sergey	
  *noSPAM*	
  cs.dartmouth.edu	
Credits	
•  This	
  presenta'on	
  combines	
  ideas,	
  research,	
discussions	
  from	
  the	
  following	
  personnel:	
–  Sergey	
  Bratus	
  (Insecurity	
  Theory,	
  Exploi'ng	
  the	
  Hard-­‐
working	
  Dwarf)	
–  Meredith	
  PaRerson	
  (Langsec)	
–  R.I.P.	
  Len	
  Sassaman	
  (Langsec)	
–  James	
  Oakley	
  (Exploi'ng	
  the	
  Hard-­‐working	
  Dwarf	
  -­‐>	
everything	
  related	
  to	
  that,	
  including	
  Katana)	
–  Rodrigo	
  Rubira	
  Branco	
  (Exploi'ng	
  the	
  Hard-­‐working	
Dwarf	
  -­‐>	
  exploita'on,	
  implementa'on	
  details,	
research	
  organiza'on)	
Mo'va'on	
•  SoWware	
  exploita'on	
  is	
  not	
  generic	
  anymore	
•  There	
  are	
  diﬀerent	
  exploita'on	
  primi'ves	
  in	
diﬀerent	
  contexts	
•  A	
  modern	
  exploita'on	
  technique	
  shows	
  how	
to	
  take	
  advantage	
  of	
  those	
  primi'ves	
•  There	
  are	
  much	
  more	
  been	
  ‘computed’	
  then	
only	
  the	
  code	
  that	
  was	
  wriRen	
  (the	
  target)	
Insecurity	
  State	
•  “Treat	
  all	
  systems	
  as	
  compromised”	
– “There's	
  no	
  such	
  thing	
  as	
  ‘secure’	
  any	
  more.”	
  -­‐-­‐	
Deborah	
  PlunkeR,	
  NSA	
  Informa'on	
  Assurance	
Directorate	
•  “Long	
  weeks	
  to	
  short	
  months	
  before	
  a	
security	
  meltdown”	
  –	
  Brian	
  Snow,	
  in	
December	
  2010	
Does	
  preven'on	
  works?	
•  Many	
  ini'a'ves	
  in	
  ‘trustworthy	
  compu'ng’	
•  Many	
  books	
  on	
  ‘secure	
  programming’	
•  Many	
  academic	
  publica'ons	
•  Lots	
  of	
  test	
  methods:	
  fuzzing,	
  binary	
  analysis,	
you	
  name	
  it	
– And	
  STILL	
  the	
  soWware	
  SUCKS	
  and	
  is	
  EXPLOITED!	
•  And	
  about	
  the	
  hardware?	
  We	
  have	
  no	
  idea	
how	
  bad	
  it	
  is…	
Insecurity	
  is	
  all	
  about	
  computa'on	
•  Trustworthiness	
  of	
  a	
  computer	
  system	
  is	
what	
  the	
  system	
  can	
  and	
  cannot	
  compute	
–  Can	
  the	
  system	
  decide	
  if	
  an	
  input	
  is	
invalid/unexpected/malicious	
  &	
  reject	
  it?	
–  Will	
  program	
  perform	
  only	
  expected	
  computa'ons,	
or	
  malicious	
  ones	
  too?	
•  Exploita)on	
  is	
  se.ng	
  up,	
  instan)a)ng,	
  and	
programming	
  a	
  weird	
  machine	
–  A	
  part	
  of	
  the	
  target	
  is	
  overwhelmed	
  by	
  craWed	
  input	
and	
  enters	
  an	
  unexpected	
  but	
  manipulable	
  state	
Decidability	
•  Computa'on	
  has	
  some	
  unsolvable	
(un-­‐decidable)	
  problems	
  –	
about	
  recogni7on	
  of	
  inputs!	
•  An	
  un-­‐decidable	
  problem	
  does	
  not	
  have	
  an	
algorithm	
  that	
  solves	
  it	
  for	
  the	
  general	
  case	
SoWware	
  Exploita'on	
•  A	
  part	
  of	
  the	
  target	
  is	
  overwhelmed	
  by	
  craWed	
input	
  and	
  enters	
  an	
  unexpected	
  but	
  manipulable	
state	
•  Primi7ves	
  are	
  exposed	
–  Memory	
  corrup'on,	
  implicit	
  control	
  ﬂows	
–  Unexpected	
  control	
  ﬂows,	
  …	
•  A	
  “weird	
  machine”	
  is	
  unleashed	
–  A	
  more	
  powerful,	
  programmable	
  execu7on	
environment	
  than	
  intended	
  or	
  expected	
SoWware	
  is	
  Complex	
•  Checks	
  for	
  input	
  validity	
  are	
scaRered	
  throughout	
  the	
program,	
  mixed	
  with	
processing	
  logic	
•  Lots	
  of	
  addi'onal	
  compu'ng	
op'ons	
  existent	
  and	
  available	
to	
  the	
  ‘weird	
  machine	
  programmer’,	
aka,	
  exploit	
  writer	
Weird	
  Machine	
  is	
  Born!	
Exploi'ng	
  Addi'onal	
  Computa'ons	
•  Finally	
  we	
  are	
  in	
  our	
  talk	
  line…	
•  There	
  are	
  many	
  computa'ons	
  inside	
  a	
  program	
that	
  can	
  be	
  used	
  to	
  subvert	
  the	
  code	
  execu'on	
(and	
  some	
  of	
  then	
  has	
  nothing	
  to	
  do	
  with	
  the	
original	
  code	
  itself)	
•  ROP	
  is	
  not	
  new,	
  exploits	
  are	
  using	
  it	
  since	
  2000	
(maybe	
  even	
  before)	
*nix	
  Excep'on	
  Handling	
•  Binaries	
  compiled	
  with	
  GCC	
  and	
  that	
  support	
  excep'on	
handling	
  have	
  Dwarf	
  bytecode:	
–  Describe	
  the	
  stack	
  frame	
  layout	
–  Interpreted	
  to	
  unwind	
  the	
  stack	
  aWer	
  an	
  excep'on	
  occurs	
•  The	
  process	
  image	
  includes	
  the	
  Dwarf	
  interpreter	
  (part	
  of	
the	
  GNU	
  C++	
  run'me)	
•  Bytecode	
  can	
  be	
  wriRen	
  to	
  force	
  the	
  interpreter	
  to	
  perform	
any	
  computa'on	
  (Turing-­‐Complete),	
  including,	
  but	
  not	
limited	
  to,	
  setup	
  a	
  library/system	
  call	
  modifying	
  registers	
such	
  as	
  stack	
  and	
  base	
  pointers	
  -­‐>	
  See	
  James	
  and	
  Sergey	
previous	
  work	
  on	
  Dwarf	
  Trojans	
James	
  Oakley	
  and	
  Sergey	
  Bratus	
•  Proved	
  that	
  Dwarf	
  can	
  replace	
  code	
  crea'ng	
  a	
Trojan	
  completely	
  using	
  Dwarf	
  bytecode	
•  Proved	
  that	
  Dwarf	
  is	
  a	
  complete	
  development	
environment:	
– Can	
  read	
  memory	
– Can	
  compute	
  with	
  values	
  from	
  memory/registers	
– Can	
  inﬂuence	
  the	
  ﬂow	
  of	
  execu'on	
  of	
  a	
  process	
ELF	
The	
  executable	
  has	
  this	
  format	
  either	
  on	
  disk	
or	
  in	
  memory.	
Dwarf	
•  Developed	
  as	
  a	
  debugging	
  format	
  to	
  replace	
  STABS	
•  Standard:	
  hRp://dwarfstd.org	
•  Provide	
  informa'on	
  such	
  as	
  code	
  line,	
  variable	
  types,	
backtraces,	
  others	
•  ELF	
  Sec'ons:	
  .debug_info,	
  .debug_line,	
  .debug_frame	
  are	
deﬁned	
  in	
  the	
  standard	
•  .debug_frame	
  deﬁnes	
  how	
  to	
  unwind	
  the	
  stack	
  (how	
  to	
restore	
  each	
  entry	
  in	
  the	
  previous	
  call	
  frame)	
Linux	
  Excep'on	
  Handling	
•  GCC,	
  the	
  Linux	
  Standards	
  Base	
  and	
  the	
  ABI	