the executing ad, we need to address a few issues – some of them
come from innate JavaScript features.
Dynamically generated JavaScript.
Ads can insert a new piece of JavaScript into a web page.
The new JavaScript must also be executed in the same shadow
JavaScript engine. Otherwise, the newly generated JavaScript can
escape the isolation of AdSentry.
There are several ways for ads to introduce new JavaScript into
the original web page. Examples include abusing document.write
or setting the innerHTML attribute of an element. Accordingly,
whenever AdSentry receives a message from the shadow JavaScript
engine requesting to invoke such DOM interfaces, the request is in-
terpreted and all newly introduced JavaScript is properly ﬂagged to
ensure they will execute in the shadow JavaScript engine. We detail
this solution in Section 4.
Timers and event listeners.
One interesting challenge comes from the support of asyn-
chronous events, such as timers, where ads register callback rou-
tines to be executed later. Such callback routines need to be ex-
ecuted in the shadow JavaScript engine. To handle these asyn-
chronous events, AdSentry dynamically creates a stub as the cor-
responding event handler in the web page. This stub will notify or
invoke the true callback routine in the shadow JavaScript engine.
Unfortunately, as asynchronous events occur unexpectedly, the
notifying message sent to the shadow JavaScript engine may arrive
in the middle of the execution of some other DOM accesses, which
causes an undesirable race condition. To avoid that, the messages
from asynchronous events will be separately marked and tempo-
rally buffered by the shadow JavaScript engine. These messages
will then be processed after the ongoing DOM accesses are ﬁn-
ished.
Anonymous functions.
The JavaScript language supports anonymous functions. For
example, the following code snippet creates an anonymous func-
tion with a function body alert(0).
window.addEventListener("click",
function () { alert(0); },
false);
As an ad may create these anonymous functions, we need to
isolate them properly. Particularly, if these anonymous functions
are being used as event listeners, they should be invoked within
the shadow JavaScript engine when the corresponding events oc-
cur. Unfortunately, anonymous functions are represented as na-
tive function objects in the JavaScript engine, rather than strings
of JavaScript code. Therefore, we cannot handle them in the same
way as we do for JavaScript code on the page.
To address this problem, in our system, when the shadow JavaScript
engine executes a statement that creates an anonymous function, we
record the function’s internal identiﬁcation number, associate that
number with the related DOM access, and forward it to the page
agent. When the page agent receives the message at the real DOM
side, it dynamically composes a new JavaScript function whose
task is just to send a message containing the identiﬁcation num-
ber of the anonymous function to the shadow JavaScript engine.
After that, it assigns the newly composed function as the argument
to the event listener. When the event occurs, the newly composed
function will be invoked (at the real DOM side) to send a message
to the shadow JavaScript engine and ask it to run the anonymous
function with the speciﬁed identiﬁcation number.
3.3 Policy Enforcer
By conﬁning the shadow JavaScript engine within a sandboxed
environment, our system effectively blocks possible drive-by down-
loads that target the underlying JavaScript engines (more concrete
examples will be shown in Section 5). In the meantime, it is im-
portant to point out that the sandbox itself does not provide any
guarantee on the conﬁdentiality or integrity of the web application.
As a result, it needs to work in concert with the policy enforcer to
achieve this goal. Speciﬁcally, the policy enforcer checks the re-
quests intercepted by the virtual DOM according to a given user
security policy. Only if allowed by the enforced security policy, the
request will then be forwarded to the page agent for processing.
As mentioned earlier, our system allows both web publishers and
end users to customize the access policy for ads. Speciﬁcally, for
web publishers, as they can simply change the web page content,
they may choose to wrap the ad and conﬁne its execution in the
shadow JavaScript engine. For end users, our current system lever-
ages Adblock Plus [34] to automatically identify ads and conﬁne
them with a customized JavaScript wrapper. We will present the
details as well as the supported policies in the next section.
4.
IMPLEMENTATION
We have implemented a proof-of-concept prototype of AdSentry
based on the browser extension support of Firefox, and it is imple-
mented and tested in Mozilla Firefox 3.5.8. Our implementation
of the shadow JavaScript engine is based on Mozilla SpiderMon-
key version 1.8.0. The virtual DOM support is generated with a
code generator of 770 SLOC in perl. On the browser side, the other
two components (i.e., the policy enforcer and the page agent), are
implemented entirely in the JavaScript language. These two com-
ponents add about 3100 SLOC.
4.1 Specifying Advertisement Scripts
AdSentry is ﬂexible in deployment. It allows both web publish-
ers and end users to specify the scripts to be executed in the sand-
box. The intuitive way is to associate an attribute with the script
indicating it is an advertisement script. However, this solution re-
quires the browser to be modiﬁed to recognize the attribute. In Ad-
Sentry, we provide a function sandboxAds. It takes the body of
an ad or the URL of an ad script, and notiﬁes AdSentry to execute
it in isolation.
Therefore, to use AdSentry, web publishers can process the ad-
vertisement with the function sandboxAds, as illustrated by the
following example, where the last argument indicates whether the
ﬁrst argument is the URL (true) or the body of an ad script (false).
AdSentry also provides the option to end users by automati-
cally identifying ads instances at the client side. It uses Adblock
Plus [34] to identify ads and automatically processes them with
sandboxAds.
4.2 Shadow JavaScript Runtime and Virtual
DOM
We use NaCl to sandbox the SpiderMonkey JavaScript engine.
We found this process relatively straightforward. However, the
main challenge comes from the extension we make to the origi-
nal JavaScript engine. Speciﬁcally, to enable ads running in the
JavaScript environment to access related page content (e.g., for ad
rendering), there is a need to provide virtual DOM objects. In our
prototype, a virtual DOM is made available to the JavaScript en-
gine in the form of a tree of objects. The root of this tree is called
the global object. 1 In the case of a web page, the global object
is the window object. This global object has a number of prop-
erties, including global JavaScript variables and functions, such as
the document object, the location object, and the eval func-
tion. With this tree structure, all other virtual DOM objects are also
properties of their parent objects.
We obtain a standard DOM structure from the standard DOM
speciﬁcations [44], construct virtual DOM objects and expose them
to the shadow JavaScript engine as host objects. More speciﬁ-
cally, the virtual DOM for SpiderMonkey is generated in the fol-
lowing steps: 1) Create a new JSRuntime object and set up ini-
tial conﬁgurations and in runtime, create JSContexts for the ex-
ecution of ads scripts. 2) Create a JSClass for each class of
DOM objects. 3) Specify properties and member functions for each
JSClass. 4) Implement property and function accessor methods
for each JSClass, most of which will invoke one of the cen-
tralized access handling functions, respectively. 5) Implement the
centralized access handling functions for virtual DOM accesses.
These functions will then relay the access to the page agent (on the
browser side). To relay the access, they also perform other tasks,
such as preparing arguments to actual DOM function calls, looking
1Note that the concept of the global object here is different from
that of global objects in a JavaScript program.
for anonymous functions, buffering event listener code for later ex-
ecution, etc. These functions interpose each and every access from
ads to the real DOM. 6) Create instances of standard objects from
JSClass deﬁnitions, starting from the window global object. For
non-global objects, we will specify their parent objects during the
creation to form the tree structure.
Considering the large number of virtual DOM objects we need to
construct and the associated tree structure we need to maintain, we
have a code generator in place to automate the above steps for all
virtual DOM objects. The code generator reads in an XML ﬁle that
speciﬁes the DOM tree objects and structures, and then generates
an output ﬁle that embeds the JavaScript engine and sets up its host
environment with the virtual DOM.
4.3 Page Agent
To facilitate the communication between the shadow JavaScript
engine and the page agent, we deﬁne a simple message format for
data exchange. The format is summarized as follows:
msg::= command data
command::=
script | callFunc | getProp
| setProp | return
data::= 
Each message contains a command ﬁeld and a related data ﬁeld.
Our prototype has deﬁned ﬁve different commands: a script
command is used to notify the page agent that an ad script needs
to be sent to the shadow engine for execution. Upon receiving the
message, the shadow engine will prepare the runtime environment
and then start executing it. During execution, it will intercept any
DOM access from the ad script and based on the type of access,
translate it into three other types of messages to the page agent:
callFunc for function invocations, getProp for property re-
trievals, and setProp for property (re)initialization. Finally, a
return command carries the results in the message body, i.e., the
data ﬁeld.
The page agent extends the Firefox browser through its stan-
dard extension interfaces. We create a Firefox extension, which
monitors the dispatched message events notiﬁed by sandboxAds.
Speciﬁcally, following the above message format, if a script com-
mand is received, it parses the message stored in the event object,
and communicates with the sandbox. We stress that web pages
cannot directly communicate with the sandbox, and all communi-
cations are done via the Firefox extension. During the ad execu-
tion, if it needs to access a DOM object, the sandbox intercepts it
and encapsulates the access by sending a message to the page agent
requesting a DOM access. Here, the DOM access is meant for the
access of the real web page and the extension cannot evaluate it in
its own execution environment.
There are two possible approaches for our extension to evaluate
the intended DOM access in the web page context. The ﬁrst ap-
proach is straightforward: simply posting a message (or dispatch-
ing a custom event) to the web page. After receiving it, the web
page can then evaluate the requested DOM access (encoded in the
message or event). However, message passing is asynchronous,
which allows other JavaScript on the same web page to preempt
the execution of the current ad script. This kind of preemption may
cause serious problems as it alters the original execution order of
different scripts on the page. For example, scripts may have de-
pendency on each other, and a premature execution of a later script
may fail if the dependent script has not been executed. As another
example, document.write is normally executed before a web
page is loaded. If it’s executed after a page is loaded, it creates
a new page, completely eliminating the original one. To execute
sandboxed scripts normally, AdSentry should not alter the original
execution order of scripts on the web page, so this ﬁrst approach is
not suitable here.
The second approach is to implement the communication be-
tween the web page and the extension like a function call. Mozilla
Firefox provides a mechanism for extensions to evaluate JavaScript
code in web pages’ privileges, called evalInSandbox [32]. In
our prototype, we leverage this method to call a function in the
context of the web page that contains the ad script, which in turn
evaluates the DOM access being requested, and returns the result to
the extension. After that, the extension sends it back to the sandbox
via a pipe. By doing so, when an ad script is being executed, we can
ensure the JavaScript engine in the original browser environment is
always in one of the three states: a) waiting for messages from the
sandbox; b) executing our script in the extension; or c) executing
the message processing function in the host web page while our ex-
tension is waiting for the return. As a result, no other scripts on the
web page could preempt the current execution of ads script.
Consequently, our implementation is based on the second com-
munication approach. More details are discussed below.
Concurrent ads scripts.
AdSentry supports processing multiple ads scripts concurrently.
To avoid mix-ups of ad scripts from different web pages, our browser
extension maintains a message queue to ensure that only one ad
script is being processed at any point of time. Each message sent
to the shadow engine is marked with an identiﬁcation number, en-
abling the engine to evaluate each ad script in its own JavaScript
context. When evaluating DOM accesses requested by the sand-
box, AdSentry also makes sure the accesses will be evaluated in
the same page that originally contains the ad script being executed.
Object maps.
The communication mechanisms implemented in AdSentry are
text-based, but in some cases we need to pass objects as parame-
ter or return values. This is achieved by maintaining object maps
at both the page agent and the shadow JavaScript engine, and only
communicating the objects’ indices in the messages. Before a JavaScript
object is to be communicated to the other end, it is checked against
the local object map. If it already exists in the map, its index is
returned; otherwise, it is inserted into the map with its new index
returned. Then in the message sent, the index of the object is in-
cluded, rather than the object’s real data. Next time when a message
is received from the other end containing an object index, the object
is restored by querying its index from the local object map.
Parameter buffering.
AdSentry enforces security policies on the result of JavaScript
actions, which will be described in Subsection 4.4. One possible
way to bypass our access control policy enforcement is to insert
content into the web page piece by piece. For example, instead of
calling
document.write(" some script ");
malicious ad script may attempt to avoid being detected by in-
serting a script element like the following
document.write(" some script ");
This way, checks on parameters to each individual DOM function
call would not detect that a new script element is being inserted.
To prevent such misuses, AdSentry buffers such consecutive func-
tion calls by not sending them one by one to the shadow JavaScript
engine for execution, but ﬁnally replace them with a single call with
the entire piece of content being inserted, which is checked by the
access control policy enforcer as normal.
4.4 Access Control Policy Enforcement
To regulate the communication between the host web page and
the conﬁned ad script, our policy enforcer acts as a moderator. Any
communication between the two parties needs to be approved ac-
cording to a given policy. AdSentry is ﬂexible in allowing both web
publishers and end users to specify the access control policies for
ads.
AdSentry has a default policy. The default policy disallows any
JavaScript code originated from ads to run in the host web page.
In other words, all untrusted scripts will be guaranteed to be only
executed inside the shadow JavaScript engine. To enforce that,
we examine all incoming messages from the sandbox, distinguish
page updates containing dynamic JavaScript content versus static
HTML, and then handle them accordingly.
Speciﬁcally, for the static HTML content, our system ﬁrst nor-
malizes the HTML into the corresponding XML format and then
serializes the XML back to HTML before processing. The HTML
code is widely known as badly formed, to the point that badly writ-
ten code is often called “tag soup” [6]. Also, all major browsers
have permissive parsing behaviors by supporting a rendering mode
called “quirks mode” beside the “standards mode” [5]. These browser
quirks have many negative implications, one of which is that mali-
cious attacker can embed JavaScript code inside a malformed frag-
ment of HTML code. To strive a balance between security and
the support of potential browser quirks, we took three phases for
parsing HTML code. First, we attempt to reformat the code by cor-
recting popular mistakes in web authoring. For instance, we close
all open tags and correct all improperly nested tags. Second, we
leverage the XML parser in the web browser to parse this refor-
matted code into a XML model. Note that a malformed HTML
is considered dangerous and will be rejected by our parser. Since
XML parser is strictly standard-compliant, any surviving forma-
tion will bear no ambiguity. Finally, we serialize this XML model
back to HTML code before handing to the page agent for further
processing.
For the JavaScript dynamically generated by ads scripts, we in-
stall wrappers that request the sandbox to run the dynamic JavaScript
code. In other words, all untrusted scripts are guaranteed to ex-
ecute inside the shadow page, not the real page.