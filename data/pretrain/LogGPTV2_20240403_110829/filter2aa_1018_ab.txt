# OptiGuard: A Smart Meter Assessment Toolkit

## Table of Contents
1. Introduction
2. Client Tools
3. Configuration and Logging
4. Optical Port Risk Mitigations
5. Conclusion
6. Acknowledgements

---

## 1. Introduction
**Date:** July 14, 2012  
**Copyright:** 2012 InGuardians, Inc.

OptiGuard is a comprehensive toolkit designed for the assessment and management of smart meters. This document provides an overview of the toolkit's features, client tools, and risk mitigation strategies.

---

## 2. Client Tools

### 2.1 `run_proc` Command
- **Usage:** `run_proc -p <procedure_number> [options]`
- **Options:**
  - `-f <configuration_file>`: Select configuration file
  - `-t <table_number>`: Specify table number
  - `-d <decade_number>`: Specify decade number
  - `-p <procedure_number>`: Specify procedure number (default: 0)
  - `-s <data>`: Data for sending
  - `-lp <procedure_numbers>`: Comma-separated list of procedure numbers
  - `-no`: Turn off negotiation attempts
- **Note:** This tool operates in a "fire and forget" manner. You will need to monitor hardware lines with a logic analyzer to determine success or failure and to read data.

### 2.2 `c12_18_optical_client.py`
This client provides a menu-based interface for full functionality of the OptiGuard toolkit. It communicates directly with a smart meter's optical port using a serial-based optical probe. The client can:
- Build and send C12.18/19 messages
- Parse and interpret meter responses
- Read one or more tables at a time
- Write data to any table
- Run all procedures with user-provided data

**Note:** Using `c12_12_optical_client.py` requires a valid C12.18 Security Code of the appropriate security level to make modifications or run procedures on correctly configured smart meters.

#### User Menu
```plaintext
user$ python c12_18_optical_client.py
############################################################
## C12.18 Optical Client - InGuardians, Inc.
## Please review license and Terms of Use before using this software.
############################################################
Start Time: 11:47:55 04/10/12 CDT
##########################################
## 0) Quit
## 1) Test Negotiation Sequence
## 2) Test Logon
## 3) Parse Configuration Table
## 4) Parse General Manufacturer Identification Table
## 5) Read Table
## 6) Read Multiple Tables
## 7) Read Decade
## 8) Run Procedure
## 9) Run Multiple Procedures
## 10) Run Multiple Procedures without login
## 11) Write Table
## 12) Brute Force Logon
## 13) Alternate Brute Force Logon (Read Table Verification)
## 14) Fuzz Security code
## 15) Alternate Fuzz Security code
## 16) Read Single Table walking User IDs
## 17) Read Multiple Table walking User IDs
## 18) Write Table 13 Demand Control Table. Table write Proof of Concept only.
## 19) Run Procedure 21 Direct Load Control and set 0 percent load
## 20) Run Procedure 21 Direct Load Control and set 100 percent load
## 21) Toggle Negotiation
## 22) Terminate Session
## 23) Reset Serial
## 24) Toggle Debug
## 25) Toggle Invert
##########################################
Enter Action Selection:
```

### 2.3 `client_framework.py`
This script is a dummy client designed as an easy starting point for new users. It provides the basics necessary to begin developing new functionality, which can later be integrated into the optical client.

#### User Menu
```plaintext
user$ python client_framework.py
############################################################
## C12.18 Optical Client - InGuardians, Inc.
## Please review license and Terms of Use before using this software.
############################################################
Start Time: 11:49:31 04/10/12 CDT
##########################################
## 0) Quit
## 1) Read Table
## 2) Toggle Debug
## 3) Toggle Invert
## 4) Toggle Negotiation
## 5) Terminate Session
## 6) Reset Serial
##########################################
Enter Action Selection:
```

---

## 3. Configuration and Logging
All clients are augmented by the configuration file `c12_18_config.txt` and logging functionality. The configuration file stores common values such as C12.18 security codes and settings. Logging is essential for documenting findings and results of testing. A generic `meter_passwd.txt` file is included for brute force authentication testing. Users can build password files manually or from data dumped from smart meter memory components using the `c12_18_extract_keys.py` script.

---

## 4. Optical Port Risk Mitigations
Mitigating risks associated with a smart meter's optical port depends on the capabilities of the utility's overall AMI solution. Here are some known mitigations:

### 4.1 Brute Force Authentication
- **Mitigation:** Most meters log authentication attempts. Head-end systems can collect these logs to detect brute force attacks.

### 4.2 Disconnect/Reconnects
- **Mitigation:** Head-end systems can monitor the current state of the meter and compare it to the expected state. Incident response procedures can be developed to react to unauthorized disconnects or reconnects.

### 4.3 Configuration Modifications
- **Mitigation:** Head-end systems can detect unauthorized configuration changes and implement incident response procedures.

### 4.4 Additional Considerations
- **Meter Deployment:** Meters with disconnect/reconnect functionality should not be deployed at critical infrastructure locations.
- **Meter Passwords:** Utilities should use multiple authentication passwords, such as different passwords for residential and commercial meters, or passwords based on zip codes.
- **Secure Password Storage:** Meter vendors should secure passwords stored on the meter and protect them during communication.
- **Brand Issues:** Utilities should prepare statements and responses for potential public knowledge of successful attacks.
- **Service Level Agreements:** Utilities should develop and modify SLAs with AMI vendors to ensure timely identification and addressing of security issues.
- **Incident Response Planning:** Utilities should develop, test, and implement incident response plans for unauthorized meter modifications and attacks.

---

## 5. Conclusion
The optical ports of smart meters provide utilities with a safe method to manage individual meters. However, they also present security risks. Tools like OptiGuard are essential for testing and validating the reliability, effectiveness, and security of smart grid solutions. Open-sourcing these tools can reduce development costs and improve the industry's knowledge base, ensuring that all smart grid vendors and utilities benefit from shared efforts.

---

## 6. Acknowledgements
- **InGuardians:**
  - John Sawyer
  - Tom Liston
  - Matt Carpenter
  - Andrew Righter
  - Joshua Wright
  - Justin Searle
  - Travis Goodspeed
- **External Contributors:**
  - Ed Beroset – Elster Solutions, LLC
  - Robert Former – Itron, Inc.
  - Smart Meter and Smart Grid Security staff from various utilities

---

For more information, please visit the following resources:
- [Python.org](http://www.python.org/)
- [Probe-Tec Catalog](http://www.probe-tec.com/catalog.htm#OptoCord)
- [Saleae](http://www.saleae.com/)