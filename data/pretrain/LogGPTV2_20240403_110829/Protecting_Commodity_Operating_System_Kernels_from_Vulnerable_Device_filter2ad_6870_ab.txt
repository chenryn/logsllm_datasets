making monitoring all updates impractical without restruc-
turing the operating system.
Our security architecture, shown in Figure 1, therefore
leverages prior work on the Microdrivers architecture to
achieve the above goals on a large fraction of device driver
code. The Microdrivers architecture oﬀers mechanisms to
split device drivers along performance and priority bound-
aries without changing the kernel/driver interface. A mi-
crodriver consists of a small kernel-mode k-driver that con-
tains performance-critical and high priority functions, and a
u-driver that contains non-performance critical code, such as
device initialization and conﬁguration.
The kernel communicates with the k-driver via the stan-
dard driver/kernel interface to transfer data to/from the de-
vice. Some of these requests, such as those to initialize and
conﬁgure the device, may invoke functionality that are im-
plemented in the u-driver. When such requests arrive, the
k-driver invokes the u-driver via the Microdrivers runtime
(shown in Figure 1 as the k-driver runtime and the u-driver
runtime). The runtime has two key responsibilities:
(1) Communication.
It provides mechanisms to transfer
It
control and data between the u-driver and the k-driver.
provides RPC stubs that implement upcalls (i.e., the k-driver
invoking the u-driver) and downcalls (i.e., the u-driver invok-
ing the k-driver) to enable transfer of control; it also imple-
ments marshaling/unmarshaling protocols to transfer data.
(2) Object tracking. Splitting a device driver into a k-driver
and u-driver results in data structures being copied between
address spaces. The runtime tracks and synchronizes the k-
driver’s and the u-driver’s versions of driver data structures.
Speciﬁcally, it is responsible for propagating the k-driver’s
changes to a driver data structure to a u-driver upon an upcall,
and for propagating the u-driver’s changes to the k-driver
when the upcall returns or when the u-driver makes a down-
call into the k-driver.
There are several key challenges that must be addressed
by the runtime. For example, it must ensure that the u-driver
and the k-driver can never simultaneously lock a data struc-
ture, and that when the lock is released, the copies of the data
structure in the u-driver and the k-driver are synchronized. It
must also correctly allocate and deallocate memory in user
and kernel space in response to allocation/deallocation re-
quests by the u-driver and the k-driver. We refer the inter-
ested reader to the Microdrivers paper [21], which describes
mechanisms to deal with these challenges in detail.
3.1. RPC monitor
As discussed above, the runtime ensures that driver data
structure changes made by the u-driver are propagated to
the k-driver, either when an upcall returns or when the u-
driver issues a downcall. Because the u-driver is untrusted,
all data and control transfers initiated by the u-driver must
be checked against a security policy. This is the task of the
RPC monitor, shown in Figure 1, which mediates all RPC
messages from the u-driver to the k-driver. Note that control
and data transfers from the k-driver to the u-driver need not
be mediated because the k-driver is trusted. Because our ar-
chitecture seeks to protect the integrity of kernel data (rather
than its secrecy), the RPC monitor need only monitor writes
to kernel data structures. The RPC monitor is implemented
as a kernel module that enforces security policies before con-
trol and data are transferred to the k-driver.
Monitoring data transfer. A compromised u-driver can ma-
liciously modify kernel data structures by passing corrupt
data. The RPC monitor must therefore detect and prevent
malicious data transfers.
When a u-driver returns control to its k-driver follow-
ing an upcall, or when the u-driver invokes functionality
implemented in the kernel or the k-driver via a downcall,
data structures in the k-driver are synchronized with their
u-driver counterparts using the marshaling protocol. The
RPC monitor ensures that each such update conforms to a
driver-speciﬁc security policy. Intuitively, the goal of the se-
curity policy is to ensure that kernel data structures are not
updated maliciously, i.e., each update must preserve kernel
data structure integrity. For instance, an update must not
allow a compromised u-driver access to kernel/device mem-
ory regions that a benign u-driver does not normally access.
Similarly, an update must not allow a compromised u-driver
to execute arbitrary code with kernel privilege.
Specifying such integrity constraints is challenging be-
cause of the quantity and heterogeneity of kernel data struc-
tures updated by device drivers. In addition, our security ar-
chitecture splits device drivers to ensure good performance;
consequently, several driver-speciﬁc data structures may be
copied across the user/kernel boundary. For example, Linux
represents network devices using a per-driver net device
303
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:20 UTC from IEEE Xplore.  Restrictions apply. 
data structure. In a network microdriver, this data structure
may be modiﬁed by the u-driver, for example, when the de-
vice is initialized or conﬁgured. It is also important to mon-
itor updates to such driver-speciﬁc data structures because
these updates propagate to the kernel. Specifying integrity
constraints for driver data structures often requires domain-
speciﬁc knowledge, therefore making manual speciﬁcation
of such integrity constraints cumbersome and error-prone.
To overcome these challenges, we present an approach
that automatically infers integrity constraints by monitoring
driver execution.
In our architecture, these constraints are
expressed as data structure invariants—properties that the
data structure must always satisfy. For example, an invari-
ant may state that a function pointer to the packet-send func-
tion (e.g., the hard start xmit pointer in the net device data
structure in Linux) of a network driver must not change after
being initialized. Our approach infers such invariants during
training; these are checked during enforcement.
During the training phase, we execute the u-driver on sev-
eral benign workloads, and use Daikon [19] to infer data
structure invariants automatically. Daikon does so by ob-
serving the values of data structures that cross the user/kernel
boundary and hypothesizing invariants. During the enforce-
ment phase, the RPC monitor enforces these invariants on
data structures received from a u-driver; it ﬁrst copies these
data structures to a vault area in the kernel, and checks that
the invariants hold. If they do, it updates kernel data struc-
tures with values from the vault. The kernel itself never
uses data structures directly from the vault before they are
checked by the RPC monitor. By monitoring data transfers
from the u-driver to the k-driver, the RPC monitor prevents
compromised u-drivers from aﬀecting kernel data integrity.
Monitoring control transfer. The RPC monitor checks u-
driver to k-driver control transfers to prevent the u-driver
from making unauthorized calls to kernel functions.
As the u-driver services an upcall, it may invoke the k-
driver via a downcall, either to call a k-driver function or to
execute a function implemented in the kernel. Downcalls are
implemented using ioctl system calls that are handled in
the k-driver. Because the u-driver is untrusted, these down-
calls must be veriﬁed to be legitimate, e.g., that a downcall is
not initiated by a code injection attack on a compromised u-
driver. Such unauthorized downcalls can be maliciously used
by the u-driver, e.g., to cause denial of service by invoking
the kernel function to unregister a device. To avoid such at-
tacks, we statically analyze the u-driver and extract the set of
downcalls that a u-driver can issue in response to an upcall
(static analysis is performed before the driver is loaded). The
RPC monitor enforces this statically extracted policy when
it receives a downcall from the u-driver. We refer the reader
to the companion technical report [8] for details on how the
control transfer policy is extracted and enforced.
Having checked both data and control integrity, the RPC
monitor transfers control to the k-driver, which can now re-
sume execution on newly-updated kernel data structures.
4. Implementation
We extended the implementation of the Microdrivers ar-
chitecture on the Linux-2.6.18.1 kernel with support to moni-
tor data and control transfers from the u-driver to the k-driver.
In this implementation, the k-driver, the kernel runtime and
the RPC monitor are implemented as a kernel module while
304
the u-driver and the user runtime execute as a multi-threaded
user-space process.
4.1. Background on Microdrivers
A microdriver begins operation when its kernel module is
loaded and the user-space process is started. The main thread
of the user-space process makes an ioctl call into the kernel
module and blocks. The kernel module unblocks this thread
when it needs to invoke functions in the u-driver.
The u-driver and k-driver exchange data and control us-
ing an RPC-like mechanism, shown in Figure 2. To invoke
the u-driver using an an upcall (Figure 2(a)), the k-driver
(1) registers the k-driver function that initiates the upcall with
the RPC monitor; (2) marshals data structures that will be
read/modiﬁed by the u-driver; and (3) unblocks the thread
of the u-driver’s user-space process. This transfers control
to the u-driver, which in turn (4) consults the object tracker
and unmarshals the data structures into its address space; and
(5) invokes the appropriate u-driver function on the unmar-
shaled data structure. The object tracker is a bi-directional ta-
ble responsible for maintaining the correspondence between
kernel- and user-mode pointers of data structures shared be-
tween the k-driver and the u-driver. As the u-driver runtime
unmarshals data received from the k-driver into its address
space, it uses the object tracker to identify u-driver objects
that correspond to kernel-mode pointers received from the k-
driver. If the runtime is unable to ﬁnd such an object, e.g., be-
cause the k-driver or the kernel created a new object that the
u-driver is unaware of, the u-driver can allocate a new object
and enter a new mapping into the object tracker.
When an upcall returns, or when the u-driver invokes
functions in the k-driver via an ioctl system call (i.e., a
downcall), data is marshaled by the u-driver and unmarshaled
in the kernel, as shown in Figure 2(b). The main diﬀerence in
this case is that a RPC monitor interposes on these requests
before they are forwarded to the k-driver. The RPC monitor
has two key responsibilities—(i) to check control transfers;
and (ii) to check data structure integrity. The RPC moni-
tor uses a statically-extracted control ow policy to check
control transfers—this policy statically determines the set of
allowed downcalls for each upcall. For each downcall, the
RPC monitor uses the k-driver function registered with it (in
step (1) of Figure 2(a)) to ensure that the downcalls are al-
lowed. If this downcall is allowed, the RPC monitor checks
the integrity of data structures received from the u-driver. To
do so, it unmarshals the data received from the u-driver into
a vault area. This area is not accessed by the k-driver and
is only used by the RPC monitor to check data structure in-
tegrity. The RPC monitor checks that each variable that was
unmarshaled satisﬁes a set of invariants; if so, it uses the data
from the vault area to update kernel data structures and frees
any data structures the vault.
DriverSlicer. To allow existing device drivers on com-
modity operating systems to beneﬁt from our architec-
ture, we extended DriverSlicer, a device driver partitioning
tool [21], to generate security enforcement code. Driver-
Slicer is implemented as a plugin to CIL [31], a source code
transformation tool, and consists of about 11,000 lines of
Ocaml code. Given a small number of annotations, Driver-
Slicer automatically partitions a device driver into a k-driver
and a u-driver.
It also generates code for the k-driver and
u-driver runtimes, and the RPC monitor, including code to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:20 UTC from IEEE Xplore.  Restrictions apply. 
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)
(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:8)(cid:22)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:31)
(cid:30)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:8)(cid:9)(cid:10)(cid:11)(cid:8)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)
(cid:14)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:15)(cid:14)(cid:18)(cid:21)(cid:8)(cid:22)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:23)(cid:13)(cid:4)(cid:8)(cid:24)(cid:8)(cid:14)(cid:19)(cid:25)(cid:26)(cid:4)(cid:16)(cid:27)(cid:26)(cid:28)(cid:20)(cid:15)(cid:14)(cid:18)(cid:21)(cid:29)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:29)
(cid:30)
(cid:45)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:36)(cid:15)(cid:37)(cid:7)(cid:33)(cid:13)(cid:8)(cid:38)(cid:4)(cid:26)(cid:33)(cid:34)(cid:7)(cid:4)
(cid:32)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)(cid:10)(cid:11)(cid:8)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)
(cid:34)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:15)(cid:14)(cid:18)(cid:21)(cid:8)(cid:22)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:15)(cid:14)(cid:18)(cid:8)(cid:24)(cid:8)(cid:25)(cid:26)(cid:4)(cid:16)(cid:27)(cid:26)(cid:28)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:29)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:4)(cid:23)(cid:33)(cid:33)(cid:26)(cid:28)(cid:28)(cid:20)(cid:14)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:18)(cid:19)(cid:35)(cid:15)(cid:14)(cid:18)(cid:21)(cid:29)
(cid:49)
(cid:30)
(cid:32)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)
(cid:33)(cid:26)(cid:28)(cid:28)(cid:8)(cid:34)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:8)(cid:29)
(cid:23)(cid:13)(cid:4)
(cid:39)(cid:26)(cid:4)(cid:16)(cid:27)(cid:26)(cid:28)(cid:5)(cid:19)(cid:40)(cid:8)(cid:41)(cid:14)(cid:18)(cid:18)(cid:7)(cid:4)
(cid:42)
(cid:44)
(cid:9)(cid:10)(cid:11)(cid:8)(cid:39)(cid:48)(cid:19)(cid:5)(cid:13)(cid:48)(cid:4)
(cid:46)(cid:26)(cid:14)(cid:28)(cid:13)(cid:8)(cid:38)(cid:26)(cid:15)(cid:28)(cid:7)
(cid:39)(cid:26)(cid:4)(cid:16)(cid:27)(cid:26)(cid:28)(cid:5)(cid:19)(cid:40)(cid:8)(cid:41)(cid:14)(cid:18)(cid:18)(cid:7)(cid:4)
(cid:47)(cid:19)(cid:6)(cid:26)(cid:4)(cid:5)(cid:26)(cid:19)(cid:13)(cid:8)(cid:38)(cid:26)(cid:15)(cid:28)(cid:7)
(cid:23)(cid:13)(cid:4)
(cid:43)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)
(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:8)(cid:22)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:31)
(cid:30)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:8)(cid:9)(cid:10)(cid:11)(cid:8)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)
(cid:14)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:15)(cid:14)(cid:18)(cid:21)(cid:8)(cid:22)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:24)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:15)(cid:14)(cid:18)(cid:8)(cid:25)(cid:8)(cid:26)(cid:27)(cid:4)(cid:16)(cid:28)(cid:27)(cid:29)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:24)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:4)(cid:7)(cid:13)(cid:14)(cid:4)(cid:19)(cid:24)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)
(cid:30)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:38)(cid:15)(cid:39)(cid:7)(cid:33)(cid:13)(cid:8)(cid:40)(cid:4)(cid:27)(cid:33)(cid:34)(cid:7)(cid:4)
(cid:32)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)(cid:10)(cid:11)(cid:8)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)
(cid:34)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:15)(cid:14)(cid:18)(cid:21)(cid:8)(cid:22)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:4)(cid:23)(cid:33)(cid:33)(cid:27)(cid:29)(cid:29)(cid:20)(cid:14)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:18)(cid:19)(cid:35)(cid:15)(cid:14)(cid:18)(cid:21)(cid:24)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:14)(cid:19)(cid:26)(cid:27)(cid:4)(cid:16)(cid:28)(cid:17)(cid:33)(cid:28)(cid:7)(cid:33)(cid:34)(cid:20)(cid:15)(cid:14)(cid:18)(cid:21)(cid:24)
(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:8)(cid:33)(cid:36)(cid:23)(cid:37)(cid:17)(cid:18)(cid:4)(cid:36)(cid:26)(cid:17)(cid:6)(cid:27)(cid:14)(cid:29)(cid:13)(cid:20)(cid:15)(cid:14)(cid:18)(cid:21)(cid:24)(cid:8)(cid:8)
(cid:30)
(cid:32)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)
(cid:33)(cid:27)(cid:29)(cid:29)(cid:8)(cid:34)(cid:16)(cid:13)(cid:14)(cid:15)(cid:17)(cid:14)(cid:16)(cid:7)(cid:4)(cid:18)(cid:19)(cid:20)(cid:23)(cid:13)(cid:4)(cid:21)(cid:8)(cid:24)
(cid:23)(cid:13)(cid:4)
(cid:41)(cid:27)(cid:4)(cid:16)(cid:28)(cid:27)(cid:29)(cid:5)(cid:19)(cid:42)(cid:8)(cid:43)(cid:14)(cid:18)(cid:18)(cid:7)(cid:4)
(cid:41)(cid:27)(cid:4)(cid:16)(cid:28)(cid:27)(cid:29)(cid:5)(cid:19)(cid:42)(cid:8)(cid:43)(cid:14)(cid:18)(cid:18)(cid:7)(cid:4)
(cid:9)(cid:10)(cid:11)(cid:8)(cid:41)(cid:36)(cid:19)(cid:5)(cid:13)(cid:36)(cid:4)
(cid:23)(cid:13)(cid:4)
(cid:44)(cid:27)(cid:14)(cid:29)(cid:13)(cid:8)(cid:40)(cid:27)(cid:15)(cid:29)(cid:7)
(cid:44)(cid:27)(cid:14)(cid:29)(cid:13)(cid:8)(cid:46)(cid:4)(cid:7)(cid:27)
(cid:45)(cid:19)(cid:6)(cid:27)(cid:4)(cid:5)(cid:27)(cid:19)(cid:13)(cid:8)(cid:40)(cid:27)(cid:15)(cid:29)(cid:7)
(cid:23)(cid:13)(cid:4)
(a) Data movement from a k-driver to a u-driver.
(b) Data movement from a u-driver to a k-driver.
Figure 2. Data movement during upcalls and downcalls. During downcalls, data is ﬁrst unmarshaled
into the vault area to enforce invariants before updating kernel data structures.
check control transfers from the u-driver to the k-driver and