# 十二、将你所知道的内容容器化——Docker 实现指南
在这本书里，我用了旧的.NET 技术，向您展示 Docker 与它们一起工作就像与现代的一样好.NET 核心应用。您可以记录一个十年前的网络表单应用，并获得许多与在容器中运行绿地 ASP.NET 核心网络应用相同的好处。
您已经看到了许多容器化应用的例子，并了解了如何使用 Docker 构建、运输和运行生产级应用。现在，您已经准备好开始与 Docker 合作您自己的项目，本章将为您提供如何开始的建议。
我将介绍一些技术和工具，这些技术和工具将帮助您运行概念验证项目，将应用转移到 Docker。我还将向您介绍一些案例研究，向您展示我是如何将 Docker 引入现有项目的:
*   小规模的.NET 2.0 网络表单应用
*   一款 **Windows 通信基础** ( **WCF** )应用中的数据库集成服务
*   运行在 Azure 中的分布式物联网应用编程接口应用
您将看到如何处理典型的问题，以及转到 Docker 如何帮助解决这些问题。
# 记录你所知道的
当您迁移到一个新的应用平台时，您必须使用一组新的工件和新的操作流程。如果您当前使用 Windows 安装程序进行部署，您的工件是 Wix 文件和 MSIs。您的部署过程是将 MSI 复制到目标服务器，登录并运行安装程序。
移动到 Docker 后，您将拥有 Docker 文件和映像作为部署工件。您将映像推送到注册表，并运行容器或更新服务来部署应用。Docker 中的资源和活动更简单，并且它们在项目之间是一致的，但是当您开始时，仍然有一个学习曲线。
将你熟知的应用容器化是为学习体验提供坚实基础的好方法。当您第一次在容器中运行您的应用时，您可能会看到错误或不正确的行为，*，但这将属于您自己的应用领域*。当您追踪问题时，您将处理您非常了解的领域，因此尽管平台是新的，但问题应该很容易识别。
# 选择简单的概念验证应用
Docker 非常适合分布式应用，在分布式应用中，每个组件都运行在一个轻量级容器中，从而有效利用最少的硬件。您可以为您的第一个 Docker 部署选择一个分布式应用，但是更简单的应用会更快地迁移，并且会给您带来更高的成功机会。
单片应用是个不错的选择。它不一定是一个小的代码库，但是它与其他组件的集成越少，它在 Docker 中运行的速度就越快。在 SQL Server 中存储状态的 ASP.NET 应用是一个简单的选项。通过一个简单的应用，您可以期望在一两天内运行一个**概念验证** ( **概念验证**)。
从编译后的应用开始，而不是从源代码开始，这是一个很好的方法来证明应用可以被 Dockerized，而不必进行更改。选择 PoC 应用时，需要考虑几个因素:
*   **状态**:如果你的目标应用将状态存储在内存中，你将无法通过运行多个容器来扩展 PoC。每个容器都有它自己的状态，当请求被不同的容器处理时，你会得到不一致的行为，除非你也运行一个支持粘性会话的反向代理。考虑无状态应用或可以使用共享状态的应用，例如使用 SQL Server 作为 ASP.NET 的会话状态提供程序。
*   **配置**:NET 应用通常在`Web.config`或`app.config`中使用 XML 配置文件。您可以将 PoC 设置为使用现有的配置文件作为基础，然后交换出不适用于容器化环境的任何值。最好通过带有环境变量和机密的 Docker 读取配置设置，但是对于 PoC 来说，保留配置文件更容易。
*   **弹性**:较旧的应用通常假设可用性——网络应用期望数据库总是可用的，并且不能优雅地处理故障情况。如果您的应用没有外部连接的重试逻辑，当容器启动时，如果出现短暂的连接故障，您的 PoC 将面临错误。您可以在 Dockerfile 中通过检查启动时的依赖关系和正在进行的运行状况检查来缓解这种情况。
*   **Windows 认证**:容器没有加入域。如果您在 AD 中创建了一个组管理服务帐户，则可以访问容器中的**活动目录** ( **AD** )对象，但这增加了复杂性。对于 PoC，坚持使用更简单的认证方案，如基本认证。
这些都不是主要限制。您应该能够在不更改代码的情况下，在容器化现有应用的基础上工作，但是您需要意识到功能在 PoC 阶段可能并不完美。
# 用 Image2Docker 生成初始 Docker 文件
Image2Docker 是一个开源工具，可以用来为现有应用生成 Dockerfile。它是一个 PowerShell 模块，您可以在本地机器上运行，也可以针对远程机器或虚拟机磁盘文件运行(在 Hyper-V 中，文件采用`VHD`或`VHDX`格式)。
这是开始使用 Docker 的一个非常简单的方法——你甚至不需要在你的机器上安装 Docker 来试用它，看看 Dockerfile 对你的应用来说会是什么样子。Image2Docker 可以处理不同类型的应用(称为**工件**，但是对于运行在 IIS 上的 ASP.NET 应用来说，该功能已经成熟。
在我的开发机器上，我有一个部署到**互联网信息服务** ( **IIS** )的 ASP.NET 应用。我可以将该应用迁移到 Docker，方法是从 PowerShell 库中安装 Image2Docker，并导入该模块以在本地使用它:
```
Install-Module Image2Docker
Import-Module Image2Docker
```
PowerShell 5.0 is the minimum required version for `Image2Docker`, but the tool has no other dependencies.
我可以运行`ConvertTo-Dockerfile` cmdlet，指定 IIS 工件来构建一个包含我机器上所有 IIS 网站的 Dockerfile:
```
ConvertTo-Dockerfile -Local -Artifact IIS -OutputPath C:\i2d\iis
```
这将在`C:\i2d\iis`创建一个目录，在这个文件夹中，我将为每个网站创建一个 Dockerfile 和子目录。`Image2Docker`将网站内容从源位置复制到输出位置。Dockerfile 为其找到的应用使用最相关的基础映像，即`microsoft/iis`、`microsoft/aspnet`或`microsoft/aspnet:3.5`。
如果源上有多个网站或网络应用，`Image2Docker`将它们全部提取出来，并构建一个单一的 Dockerfile，该 Docker file 复制了原始 IIS 设置，因此 Docker 映像中将有多个应用。这不是我的目标，因为我希望 Docker 映像中有一个单独的应用，所以我可以用一个参数来提取一个单独的网站:
```
ConvertTo-Dockerfile -Local -Artifact IIS -ArtifactParam SampleApi -OutputPath C:\i2d\api
```
过程是相同的，但是这一次，`Image2Docker`只从源中提取了一个应用——在`ArtifactParam`参数中命名的那个。Dockerfile 包含部署应用的步骤，您可以运行`docker image build`来创建映像并运行应用。
这可能是应用 Dockerizing 的第一步，然后运行一个容器并检查应用的功能。可能需要额外的设置，`Image2Docker`不适合您，因此您可能需要迭代生成的 Dockerfile，但是该工具是一个很好的开始方式。