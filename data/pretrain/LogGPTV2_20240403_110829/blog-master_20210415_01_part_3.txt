(2 rows)    
```    
#### Query command Type (SELECT, INSERT, UPDATE OR DELETE)    
**`cmd_type`**: List the command type of the query.    
```sql    
postgres=# SELECT bucket, substr(query,0, 50) AS query, cmd_type FROM pg_stat_monitor WHERE elevel = 0;    
 bucket |                       query                       | cmd_type     
--------+---------------------------------------------------+----------    
      4 | END                                               |     
      4 | SELECT abalance FROM pgbench_accounts WHERE aid = | SELECT    
      4 | vacuum pgbench_branches                           |     
      4 | select count(*) from pgbench_branches             | SELECT    
      4 | UPDATE pgbench_accounts SET abalance = abalance + | UPDATE    
      4 | truncate pgbench_history                          |     
      4 | INSERT INTO pgbench_history (tid, bid, aid, delta | INSERT    
      5 | SELECT relations query FROM pg_stat_monitor       | SELECT    
      9 | SELECT bucket, substr(query,$1, $2) AS query, cmd |     
      4 | vacuum pgbench_tellers                            |     
      4 | BEGIN                                             |     
      5 | SELECT relations,query FROM pg_stat_monitor       | SELECT    
      4 | UPDATE pgbench_tellers SET tbalance = tbalance +  | UPDATE    
      4 | UPDATE pgbench_branches SET bbalance = bbalance + | UPDATE    
(14 rows)    
```    
#### Function Execution Tracking     
**`top_queryid`**: Outer layer caller's query id.    
```sql    
CREATE OR REPLACE function add2(int, int) RETURNS int as    
$$    
BEGIN    
	return (select $1 + $2);    
END;    
$$ language plpgsql;    
SELECT add2(1,2);    
 add2    
-----    
   3    
(1 row)    
postgres=# SELECT queryid, top_queryid, query, top_query FROM pg_stat_monitor;    
     queryid      |   top_queryid    |                       query.                           |     top_query    
------------------+------------------+-------------------------------------------------------------------------+-------------------    
 3408CA84B2353094 |                  | select add2($1,$2)                                     |    
 762B99349F6C7F31 | 3408CA84B2353094 | SELECT (select $1 + $2)                                | select add2($1,$2)    
(2 rows)    
```    
#### Monitor Query Execution Plan.    
```sql    
postgres=# SELECT substr(query,0,50), query_plan from pg_stat_monitor limit 10;    
                      substr                       |                                                  query_plan    
---------------------------------------------------+---------------------------------------------------------------------------------------------------------------    
 select o.n, p.partstrat, pg_catalog.count(i.inhpa | Limit                                                                                                        +    
                                                   |   ->  GroupAggregate                                                                                         +    
                                                   |         Group Key: (array_position(current_schemas(true), n.nspname)), p.partstrat                           +    
                                                   |         ->  Sort                                                                                             +    
                                                   |               Sort Key: (array_position(current_schemas(true), n.nspname)), p.partstrat                      +    
                                                   |               ->  Nested Loop Left Join                                                                      +    
                                                   |                     ->  Nested Loop Left Join                                                                +    
                                                   |                           ->  Nested Loop                                                                    +    
                                                   |                                 Join Filter: (c.relnamespace = n.oid)                                        +    
                                                   |                                 ->  Index Scan using pg_class_relname_nsp_index on pg_class c                +    
                                                   |                                       Index Cond: (relname = 'pgbench_accounts'::name)                       +    
                                                   |                                 ->  Seq Scan on pg_namespace n                                               +    
                                                   |                                       Filter: (array_position(current_schemas(true), nspname) IS NOT NULL)   +    
                                                   |                           ->  Index Scan using pg_partitioned_table_partrelid_index on pg_partitioned_table p+    
                                                   |                                 Index Cond: (partrelid = c.oid)                                              +    
                                                   |                     ->  Bitmap Heap Scan on pg_inherits i                                                    +    
                                                   |                           R    
 SELECT abalance FROM pgbench_accounts WHERE aid = | Index Scan using pgbench_accounts_pkey on pgbench_accounts                                                   +    
                                                   |   Index Cond: (aid = 102232)    
 BEGIN;                                            |    
 END;                                              |    
 SELECT substr(query,$1,$2), query_plan from pg_st |    
 SELECT substr(query,$1,$2),calls, planid,query_pl | Limit                                                                                                        +    
                                                   |   ->  Subquery Scan on pg_stat_monitor                                                                       +    
                                                   |         ->  Result                                                                                           +    
                                                   |               ->  Sort                                                                                       +    
                                                   |                     Sort Key: p.bucket_start_time                                                            +    
                                                   |                     ->  Hash Join                                                                            +    
                                                   |                           Hash Cond: (p.dbid = d.oid)                                                        +    
                                                   |                           ->  Function Scan on pg_stat_monitor_internal p                                    +    
                                                   |                           ->  Hash                                                                           +    
                                                   |                                 ->  Seq Scan on pg_database d                                                +    
                                                   |               SubPlan 1                                                                                      +    
                                                   |                 ->  Function Scan on pg_stat_monitor_internal s                                              +    
                                                   |                       Filter: (queryid = p.top_queryid)    
 select count(*) from pgbench_branches             | Aggregate                                                                                                    +    
                                                   |   ->  Seq Scan on pgbench_branches    
 UPDATE pgbench_tellers SET tbalance = tbalance +  |    
 vacuum pgbench_tellers                            |    
 UPDATE pgbench_accounts SET abalance = abalance + |    
(10 rows)    
```    
PS: 柱状图的bucket边界算法比较奇特, 貌似只和PGSM_HISTOGRAM_MAX-PGSM_HISTOGRAM_MIN差值有关, 那为啥要两个参数来控制.   
```
static int
get_histogram_bucket(double q_time)
{
	double q_min = PGSM_HISTOGRAM_MIN;
	double q_max = PGSM_HISTOGRAM_MAX;
	int    b_count = PGSM_HISTOGRAM_BUCKETS;
	int    index = 0;
	double b_max;
	double b_min;
	double bucket_size;
	q_time -= q_min;
	b_max = log(q_max - q_min);
	b_min = 0;
	bucket_size = (b_max - b_min) / (double)b_count;
	for(index = 1; index = b_start && q_time  b_end) )
		{
			return index - 1;
		}
	}
	return 0;
}
Datum
get_histogram_timings(PG_FUNCTION_ARGS)
{
	double q_min = PGSM_HISTOGRAM_MIN;
	double q_max = PGSM_HISTOGRAM_MAX;
	int    b_count = PGSM_HISTOGRAM_BUCKETS;
	int    index = 0;
	double b_max;
	double b_min;
	double bucket_size;
	bool	first = true;
	char    *tmp_str = palloc0(MAX_STRING_LEN);
	char    *text_str = palloc0(MAX_STRING_LEN);
	b_max = log(q_max - q_min);
	b_min = 0;
	bucket_size = (b_max - b_min) / (double)b_count;
	for(index = 1; index <= b_count; index++)
	{
		int64 b_start = (index == 1)? 0 : exp(bucket_size * (index - 1));
		int64 b_end = exp(bucket_size * index);
		if (first)
		{
			snprintf(text_str, MAX_STRING_LEN, "(%ld - %ld)}", b_start, b_end);
			first = false;
		}
		else
		{
			snprintf(tmp_str, MAX_STRING_LEN, "%s, (%ld - %ld)}", text_str, b_start, b_end);
			snprintf(text_str, MAX_STRING_LEN, "%s", tmp_str);
		}
	}
	pfree(tmp_str);
	return CStringGetTextDatum(text_str);
}
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")