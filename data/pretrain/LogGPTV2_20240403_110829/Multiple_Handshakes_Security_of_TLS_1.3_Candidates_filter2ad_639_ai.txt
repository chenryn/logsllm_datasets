In this part we consider the case that the secret s is never
compromised.
Just like the work in [22] and [19], we consider the case that
the adversary makes a single Test query only, by a factor at
most 1/5ns as there are ﬁve stages in each of the ns sessions.
Also, the same problem as in [19] we have to deal with is
that sid2 for the second stage and hence also sid3 are not
available in clear, but are partly encrypted. However, stage key
independence allows us to reveal the keys for stage 1 for the
consistent simulation for B in terms of identical answers for
partnered sessions, and at the same time without endangering
security of the following stage keys. We omit the hybrid details
which can be referred to [19].
From now on, we can therefore speak about the session
label(cid:2) tested at stage i and we also assume that we know
label(cid:2) in advance. Note that server authentication always exists
in all stages except stage 2 since only the server that has been
authenticated in label knows the secret s, no matter whether
there exists ServerCertiﬁcate and ServerCertiﬁcateVerify
messages in stage 3.
Note that if the server does not send its ServerCertiﬁcate
and ServerCertiﬁcateVerify messages in stage 3, then there
may exist an adversary that selects ServerHello ‘+’ KeyShare
on its own to interact with client in stage 2, and by our
deﬁnition of Test query,
in this case, Test query to the
client for stage 2 should be prohibited to avoid trivial attack.
However, if there is an honest unauthenticated (in stage 2)
server, then the key of stage 2 between these honest parties
should still be secure and Test queries to the client are still
allowed in this case.
Similarly, if client does not send its ClientCertiﬁcate and
ClientCertiﬁcateVerify messages in stage 2, then there may
exist an adversary that selects ClientHello ‘+’ KeyShare
during stage 1 on its own and then interacts with server in stage
2, and by our deﬁnition of Test query, in this case, Test query
to server for stage 1 and stage 2 should be prohibited to avoid
trivial attack. However, if there is an honest unauthenticated
(in stage 1) client, then the key of stage 1 and stage 2 between
these honest parties should still be secure and Test queries to
the server are still allowed in this case.
Above all, our subsequent security analysis separately con-
siders the three cases that:
1) the adversary tests a server session without honest con-
tributive partner in the ﬁrst stage (i.e., label(cid:2).role = re-
sponder for the test session label(cid:2) and there exists no
label(cid:2)(cid:2) (cid:9)= label(cid:2) with label(cid:2).cid1 = label(cid:2)(cid:2).cid1),
2) the adversary tests a client session without honest contribu-
tive partner in the second stage (i.e., label(cid:2).role = initiator
(cid:9)=
for the test session label(cid:2) and there exists no label(cid:2)(cid:2)
label(cid:2) with label(cid:2).cid2 = label(cid:2)(cid:2).cid2),
3) the tested session has an honest contributive partner
partner in the second stage(i.e., there exists label(cid:2)(cid:2) with
label(cid:2).cid2 = label(cid:2)(cid:2).cid2).
This allows us to bound the advantage into three cases:
Adv1−Key−Secrecy,server without partner
,
Adv2−Key−Secrecy,client without partner
,
and Adv2−Key−Secrecy,test with partner
draft−10,A
draft−10,A
draft−10,A
.
Case A: Test Server without Partner in stage 1
We ﬁrst consider the case that the tested session is a server
(responder) session without honest contributive partner in the
ﬁrst stage. Having an honest partner in the second or later stage
implies having also one in the ﬁrst, hence the tested session
must actually be without honest partner in all later stages.
Observe that, in this case no honest party has the same cid1 as
the tested session, then if the tested key is unauthenticated, the
adversary cannot win unless with trivial attack according to the
security model. Hence, we can assume that client will send its
502502
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
ClientCertiﬁcate and ClientCertiﬁcateVerify messages during
stage 2.
We proceed in the following sequence of games. Starting
from the original Key Secrecy game, we bound the
advantage difference of adversary A in successive games
by complexity-theoretic assumptions until we reach a game
where the advantage of A is at most 0.
AdvGA.0
draft−10,A
Game A.0. This initial game equals the Key Secrecy
game with a single Test query where A is restricted to test a
server session without honest contributive partner in stage 1.
Therefore,
draft−10,A = Adv1−Key−Secrecy,server without partner
Game A.1. The challenger in this game aborts the game if
any two honest sessions compute the same hash value for
different inputs in any evaluation of the hash function H. We
H to denote the advantage of an adversary B1 against
use AdvColl
the collision resistance of the hash function H. To this extent,
B1 acts as the challenger in Game A.0, using its description of
H to compute hash values, and running A as a subroutine. If
the challenger aborts, B1 outputs the two distinct input values
to H resulting in the same hash values as a collision. And thus
.
AdvGA.0
draft−10,A ≤ AdvGA.1
draft−10,A + AdvColl
H .
Sig
Game A.2. The challenger in this game aborts the game if
the tested session receives, within the ClientCertiﬁcateVerify
message, a valid signature under the public key pkU for some
user U ∈ U such that the hash value has not been signed by
any of the honest sessions. We use AdvEUF−CMA
to denote the
advantage of an adversary B2 against the EUF-CMA security
of the signature scheme Sig. In the reduction, B2 ﬁrst guesses
a user U ∈ U which it associates with the challenger public
∗ in the EUF-CMA game, then generates all long-term
key pk
(cid:2) ∈ U \ {U} and runs the Key
key pairs for the other U
Secrecy game GA.1 for A. For any signature to generate for
user U in honest sessions, B2 calls its signing oracle. If the
challenger aborts, B2 outputs the signature the tested server
received together with the hash value as a forgery.
If B2 correctly guessed the user under whose public key
the obtained signature veriﬁes, which happens with probability
1/nu (there are at most nu users), then as a forger, B2 can use
the signature received to break the EUF-CMA security in the
sense that its message was never queried to the EUF-CMA
oracle and thus
draft−10,A ≤ AdvGA.2
draft−10,A + nu. AdvEUF−CMA
Finally, if Game A.2 does not abort, we are assured that an
honest session outputs the signature obtained by the tested
server session within the ClientCertiﬁcateVerify message.
Specially, the tested server and the honest session outputting
the signature agree on sid1, so also on cid1 and hence
partnered in the ﬁrst stage.
The adversary A therefore cannot
test a server session
without honest ﬁrst-stage partner in Game A.2, resulting in
the test bit btest being unknown to A and hence
AdvGA.1
Sig
.
AdvGA.2
draft−10,A = 0.
Case B: Test Client without Partner in stage 2
We then consider the case that the tested session is a client
session without honest contributive partner in the second stage.
Since having an honest partner in the third or later stage
implies having also one in the second stage, hence the tested
session must actually be without honest partner in all later
stages. Observe that, in this case no honest party has the same
cid2 to the tested session, then if the tested keys in stage
2 and later stages are unauthenticated, the adversary cannot
win unless with trivial attack according to the security model.
Hence, we assume that in stage 3, server will authenticate itself
by sending its ServerCertiﬁcate and ServerCertiﬁcateVerify
messages.
We proceed in a sequence of games similar to the case A,
and the detail of the proof will be omitted here. Finally, for
two adversaries B3 and B4, we have
Adv2−Key−Secrecy,client without partner
draft−10,A
≤ AdvColl
+nu.AdvEUF−CMA
H
.
Sig
Case C: Test with Partner in stage 2
.
AdvGC.0
Now we analyze the case that the tested session has an
honest contributive partner in the second stage. Note that, in
this case, the Test query can be issued in any stage.
Game C.0. Again, we start with an initial game equal to
the Key Secrecy game with a single Test query where A is
restricted to test a session with an honest contributive partner
in stage 2. Therefore,
draft−10,A = Adv2−Key−Secrecy,test with partner
draft−10,A
AdvGC.0
draft−10,A.
Game C.1. This game is identical to Game C.0, except for the
following. The challenger guesses a session label(cid:2)(cid:2) (cid:9)= label(cid:2)
and aborts the game in case this session is not the honest
contributive partner of the tested session in stage 2. This
reduces the adversary’s advantage by a factor of at most 1/ns
and hence
From now on, we can speak of the session label(cid:2)(cid:2) partnered
draft−10,A ≤ ns.AdvGC.1
with the tested session label(cid:2) in stage 2.
Game C.2. In this game we add an abort rule. The chal-
lenger aborts if the adversary makes a random oracle query
HKDF.Extract(0,gxs). In addition, pick a uniformly random
string (cid:5)
xSS and implicitly program HKDF.Extract(0,gxs) to be
(cid:5)
xSS. We bound the abort probability by the advantage of an
adversary B5 against the Gap-DH assumption in group G.
B5 is given the security parameter (q, g, S = gs, X = gx) for
random x, y and the veriﬁcation oracle V(g, S, ., .). In simu-
lating the game for A, when A makes a new random oracle
query HKDF.Extract(0,SS(cid:2)) (repeated queries answered with
the previously recorded answer), B5 ﬁrst calls its veriﬁcation
(cid:2)) and outputs SS(cid:2) as its own output in
oracle on (g, S, X, SS
case the oracle returned 1. Otherwise, B5 returns to A the
corresponding previously stored xSS∗ if SS(cid:2) has ever been
queried before. If SS(cid:2) has never been queried, then B5 returns
with a random (cid:5)
xSS and records this information along with
the corresponding SS(cid:2). Hence, above all B5 provides a perfect
simulation for A, and we have
draft−10,A ≤ AdvGC.2
draft−10,A + AdvGap−DH
AdvGC.1
G
.
503503
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
AdvGC.2
Game C.3. Next, we replace the early data trafﬁc key Eadk,
the ﬁnished key FS and mSS derived in both the tested and
its partnered session by a uniformly random value (cid:3)Eadk, (cid:6)
and (cid:5)
FS
mSS .
We can bound the difference in A’s advantage introduced
in this game by the security of the HKDF.Expand function.
The reduction B6, uses its PRF oracle for the evaluations
of HKDF.Expand under the key (cid:5)
xSS in the tested and its
partnered session. Observe that if the oracle computes the
PRF, this equals Game C.2, whereas, if it computes a random
this equals Game C.3. The simulation is sound
function,
because (cid:5)
xSS is a random value. The advantage of B6 in the
PRF security game therefore bounds the advantage difference
such that
draft−10,A ≤ AdvGC.3
draft−10,A + AdvPRF−sec
HKDF.Expand.
Game C.4. In this game we add an abort rule. The chal-
lenger aborts if the adversary makes a random oracle query
HKDF.Extract(0,gxy). In addition, pick a uniformly random
string (cid:5)
xES and implicitly program HKDF.Extract(0,gxy) to be
(cid:5)
xES. We bound the abort probability of its occurrence by the
advantage of an adversary B7 against the Gap-DH assumption
in group G.
Similar to Game C.2, B7 is given the security parameter
(q, g, X = gx, Y = gy) for random x, y and the veriﬁcation or-
acle V(g, X, ., .). In simulating the game for A, when A makes
a new random oracle query HKDF.Extract(0, ES(cid:2)) (repeated
queries answered with the previously recorded answer), B7
(cid:2)) and outputs
ﬁrst calls its veriﬁcation oracle on (g, X, Y, ES
ES(cid:2) as its own output in case the oracle returned 1. Otherwise,
B7 returns to A the corresponding previously stored xES∗
if ES(cid:2) has ever been queried before. If ES(cid:2) has never been
queried, then B7 returns with a random (cid:5)
xES and records this
information along with the corresponding ES(cid:2). Hence, B7
provides a perfect simulation for A, and we have
draft−10,A + AdvGap−DH