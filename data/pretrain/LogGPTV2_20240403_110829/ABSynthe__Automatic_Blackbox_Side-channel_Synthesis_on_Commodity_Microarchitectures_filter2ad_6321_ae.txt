0.70
0.71
DE F1
0.85
0.56
0.57
0.84
LSTM F1
0.95
0.88
0.91
0.91
0.98
0.76
0.95
0.88
LSTM F1
0.99
0.99
0.99
0.92
0.66
0.82
0.95
0.99
0.93
0.81
LSTM F1
0.97
0.80
0.91
0.79
0.80
0.78
0.60
0.66
LSTM F1
0.84
0.66
0.68
0.86
known from our instrumentation code in the training phase.
When evaluating the quality of this side channel, we use the
synchronization information for alignment and run the classi-
ﬁer on the unknown, aligned trace. If the classiﬁer guesses the
right secret most of the time, we have a signal. The quality
of guessing is combined in an F 1 score, an accuracy score
corrected for testing set size, where 1.00 denotes a perfect
score.
Given that we exhaustively measured the effect of all
instructions on all architectures on all targets, we are able
to give an interesting overview of these results grouped in
different ways. Figure 13 shows these F1 scores grouped both
by architecture and by software target.
Table II shows how well the 2-label classiﬁer works (or
in the case of NIST P-256, 3-label) when using instruction
sequences found with ABSynthe’s DE algorithm on our eval-
uation platforms in different settings (i.e., native and virtual-
ized). Each classiﬁer distinguishes aligned samples into one
of the secret values. We also include the F1 scores for the
four best-performing instructions we found in our exhaustive,
black-box test. As the results show, ABSynthe successfully
synthesizes side channels on different platforms and software
targets. Furthermore, the ABSynthe’s DE algorithm can in
certain cases synthesize a better side channel by creating
contention at multiple resources at the same time. As expected,
there is not much to gain for EdDSA 25519-secure which
was designed explicitly with side channels in mind, but for
the other algorithms, the signal is signiﬁcantly improved by
DE, sometimes even across VMs. These results show the
value of using ABSynthe’s automated pipeline for testing the
susceptibility of cryptographic functions against contention-
based side-channel attacks.
On the ARM platform where we currently do not have a
leakage map, we write some snippets by hand that we expect to
generate contention: one snippet that does XOR operations and
exercises the ALU unit and another snippet that does memory
loads and exercises the memory subsystem (without cache
eviction). Clearly, non of this is exhaustive and the F1 scores
are lower in general. However, even without a full instruction
set, ABSynthe’s DE algorithm can synthesize a signiﬁcantly
better side channel from these primitives than either snippet.
Figure 11 provides more detail on the improvements made
to the synthesized side channel using ABSynthe’s DE algo-
rithm. As an example, we show the improved signals collection
on the NIST P-256 target on an Intel Broadwell machine. NIST
P-256 has 3 secret values due to the NAF representation (see
Figure 8 for more information). We visualize the improvement
using Principal Component Analysis (PCA) on the normalized
signal. This is a more rudimentary technique than our classiﬁer
(GNB), but lends itself better to visualizing the ability for the
12
# DB1
DIV CL
IDIV R8
PUSHFQ
DIV CL
IDIV R8
PUSHFQ
DIV CL
IDIV R8
PUSHFQ
DIV CL
IDIV R8
PUSHFQ
IDIV R8
PUSHFQ
IDIV R8
PUSHFQ
IDIV R8
PUSHFQ
PUSHFQ
Fig. 12: An example of an evolved side channel snippet, com-
bining a varying number of 3 different primitive instructions.
The DB1 annotation is a signal to the code synthesis system
that a memory barrier (mfence) must be emitted before the
ﬁrst rdtscp.
Fig. 13: Histogram of side channel reliability organized by
software target and by platform.
signals to be separated. We visualize the signal by forcing
PCA to express them using just 2 components, and plot these
2 components in a scatter-plot, showing whether or not the
signal can be separated this way.
Figure 11a shows that with the best-performing instruction
it is difﬁcult to distinguish between -1, 0 and 1 bits, while
Figure 11b shows that the distinction is very clear with our
DE-reﬁned side channel. The improvement is the result of
ABSynthe creating contention on different resources at the
same time. Finally, Figure 12 shows what a sequence of
instructions found by DE may look like, clearly illustrating
that it is difﬁcult (if not impossible) to manually create such
sequences.
D. Unaligned Secret Bit Sequence Recovery
We next show an analyst armed with ABSynthe’s results
is capable of recovering secret bit sequences without synchro-
nization with the victim. We train the LSTM models using 75
training traces, and then evaluate the performance of secret
recovery using 7 additional testing traces. It takes roughly a
one-time session of 15 minutes to train the model for each
scenario.
13
TABLE III: Unaligned secret bit sequence recovery. These are
all performed on Intel Skylake on the EdDSA 25519 target.
We show the number of trials, success rate, and median brute
force attempts needed. The GnuPG case uses the same software
target, but the full execution trace of GnuPG is processed,
and the secret-dependent region of interest is automatically
identiﬁed and analyzed without external cues.
Platform
Skylake
Skylake
Skylake
Skylake
Skylake
Skylake
Target
ED25519
ED25519
ED25519
GPG/ED25519
GPG/ED25519
GPG/ED25519
Instr
DE1
Instr2
Instr1
DE1
Instr2
Instr1
Trials
7
7
7
Success
1.00
1.00
1.00
7
7
7
0.71
0.86
1.00
Med. BF (2N )
7.9
15.8
15.8
29.7
22.5
17.4
Our LSTM classiﬁers are expected to classify a signal
into a certain secret (implying alignment), or a special blank
label, implying no alignment. We use the predictions from
the synchronized classiﬁers as the ground-truth for the unsyn-
chronized classiﬁcations. The results of this experiment can
be found in the LSTM F1 column in Table II. In many cases,
the LSTM classiﬁers achieve a very good F1 score implying
a strong signal for the secret key bits.
To recover the actual secret (key) in an example scenario,
we pick the EdDSA 25519 target on the Skylake architecture,
for its high reliability score in the aligned secret classiﬁcation
scenario. At this point, an analysis can perform post processing
of the signal to recover the actual secret key bits. We exemplify
this with a basic heuristic. This heuristic assumes that secret
bits are processed in key bit order and uses the density of
the label predictions by the LSTM models as an indication
of the secret key bits. In cases, where the heuristic is not
conﬁdent with the predictions, the target secret key bit will
be left for brute-forcing. Given the key value guesses that the
LSTM models made, we needed to do a modest amount of
brute forcing to reach the exact original key. We limit this to
240 brute-forcing trials. If the key guess requires more brute
forcing than that, we call that trial a failure. Otherwise, the
trial is successful and we report the median of how many brute
force trials were needed.
Table III shows the results, including the number of trials
performed in each scenario, the success rate, and the median
number of brute force attempts needed before we could guess
the correct key in the successful cases. ABSynthe’s synthesized
end-to-end side channels were 100% successful in aiding secret
key recovery, using only a single trace capture and a modest
amount of brute forcing, even when the cryptographic function
is embedded inside a full application.
These results demonstrate that a simple case-speciﬁc
heuristic is effective for the recovery of arbitrary secret keys
using ABSynthe’s unaligned secret recovery analysis. We leave
the exploration of other signal processing heuristics (e.g., cross
correlation) for other software targets as future work.
TABLE IV: Classiﬁcation performance of ABSynthe classiﬁer using PortSmash and SMoTherSpectre instruction sequences. ror
and popcount are unique to SMoTherSpectre. All except popcount are used by PortSmash. On Skylake microarchitecture
in the native environment (non-virtualized).
Software Target
gcrypt 1.6.3 ECDSA P-256
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 RSA
add
0.83
0.95
0.64
0.64
paddb
0.84
0.93
0.67
0.64
ror
0.79
0.95
0.65
0.59
andn
0.80
0.95
0.65
0.61
crc32
0.54
0.87
0.61
0.55
vpermd
0.82
0.95
0.70
0.65
popcnt
0.59
0.89
0.64
0.56
ABSynthe
0.99
1.00
0.91
0.79
Fig. 14: Noise resistance heuristic in full GnuPG execution.
We show the heuristic operating correctly in 7 different trials.
E. Comparison with manually discovered sequences
In recent work, PortSmash [10] and SMoTherSpectre [11]
suggested exploiting contention-based side channels using
manually discovered instruction sequences. We now compare
such sequences against the best sequences found by ABSynthe
on our target.
PortSmash uses instructions add, paddb, ror, andn,
crc32, and vpermd, as evidenced from the original source
code repository2. SMoTherSpectre uses ror and popcnt
(the latter missing from PortSmash’s list). For each selected
instruction, we compare its classiﬁcation performance on each
of our targets to the performance of the best sequence that
ABSynthe found. Table IV presents our results. According
to our classiﬁer, ABSynthe’s automated DE algorithm out-
performs all the other sequences in terms of classiﬁcation
reliability by a wide margin by ﬁnding instructions that create
the maximum contention for a given target.
F. Robustness
In this section, we evaluate two robustness aspects of
ABSynthe. Firstly,
if we capture the side channel signal
during the execution of a target program, can we automatically
identify the region of interest, i.e., the region during which
the secret key bits are processed? Secondly, if either the spy
process, the target process, or both, are periodically interrupted
by concurrent computation, can we still perform key recovery
on the resulting signal? We detail, visualize and quantify these
two aspects next.
2https://github.com/bbbrumley/portsmash
Fig. 15: Interference noise resistance in key recovery. We show
all combinations of 7 different artiﬁcially induced interference
levels. We execute an interference process on the same logical
processor as both the target and the spy process, and vary
the amount of CPU time that the interference process claims.
We show the resulting key recovery success rate for each
combination.
it
1) Automatically ﬁnding the region of interest: While it
is straightforward to record our side channel signal,
is
less straightforward to determine when the execution region
of interest, namely the processing of the cryptographic key,
occurs. The detection algorithm will be processing data it is
not trained to handle, and spurious bit predictions may occur.
To show that our algorithm can adequately handle this situation
and detect when the region of interest starts, we record side-
channel samples on a full execution of GnuPG 2.2.17 linked
with libgcrypt 1.8.3, using the non-sidechannel-safe EdDSA
25519 algorithm. We ﬁnd that, while there are many spurious
cryptographic bit predictions, the density of predictions in
the region of interest is signiﬁcantly higher. We can use this
pattern as a reliable heuristic to detect the region of interest
without external synchronization. This data is illustrated with
7 different executions of GnuPG in Figure 14.
2) Target and spy executing with interference: We wish
to quantify the effect of imperfect measurement conditions.
What is the effect of other processes executing concurrently
with either the spy process or the target process? To quantify
this, we start two interference processes. One executes on the
same logical processor as the target, while the other executes
on the same logical processor as the spy. The interference
process can be conﬁgured to ask for a varying amount of CPU
time, by executing a computation loop and a usleep period
of conﬁgurable lengths. We vary the desired CPU time that
14
020000400006000080000100000GPG execution time (samples)0.0000.0020.0040.0060.0080.0100.0120.0140.016ML prediction densityTrue crypto start0.10.31.43.17.211.930.6Spy noise (% time interference active)0.10.31.43.17.211.930.6Target noise (% time interference active)Success rate of key recovery with interference0.00.20.40.60.81.0TABLE V: Full, unaligned key recovery with ABSynthe with