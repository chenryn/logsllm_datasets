#### 一、Re：
1、reverse1_final.exe
有个UPX壳，直接拿工具脱了就好了，这里我使用的是
好了接下来直接ida分析一波
重点关注加密函数：
通过加密函数加密出来是DDCTF那串字符，进去看看：
这里分析逻辑可以知道，类似于异或加密（通过动态调试验证），举个例子：A[3] = 7，那么A[7] =
3，这里addr[k]就是我们输入的字符串，这里被转成ASCII码，相当于byte_402FF8表数组的下标，找对照表取出字符，addr每次加一，相当于取出每一个输入的字符，那么只需要把DDCTF{reverseMe}放进去，因为A[明文]
= 密文，那么A[密文] = 明文。直接动态调试逆出来，在栈空间得到一串16进制的数字，再转成字符即是flag，下面是动态调试表：
16进制5A5A5B4A58232C3928392C2B39515921，转成字符：
下面回去验证下，看看我们的类似异或加密对不对：
输入ZZ[JX#,9(9,+9QY!按道理得到的就是DDCTF{ReverseMe}
动态：
得到：44444354467B726576657273654D457D
很明显：
第一题比较简单~重点看下面第二题。
2、reverse2_final.exe
首先拿到程序，查壳:
发现是aspack壳，用工具直接脱！（看雪上论坛找到，好用）：
脱壳后得到新的exe，拖进ida分析一波：
就我改了一些命名好看一些，逻辑就是，第一关一个check，然后第二关加密，sprinf就是把v8这个加密后的密文加上头DDCTF{}，所以密文就是v8，所以DDCTF{v8}就是strcmp里面比较的东西，这样很容易得到密文：
v8 = reverse+（8位的密文）
好啦，先去第一关：
这里也改了些命名(做逆向的习惯，好看才好分析)，这里很明白，首先输入是偶数个字符，范围在0-9和A-F之间，也就是说第一关的信息就是，提示输入的格式：1、输入12位字符 2、字符有范围
接着看加密：
    int __usercall sub_1091240@(const char *input@, int v8)
    {
      signed int length; // edi
      signed int i; // edx
      char second_1; // bl
      char first; // al
      char second; // al
      unsigned int v7; // ecx
      char first_1; // [esp+Bh] [ebp-405h]
      char v10; // [esp+Ch] [ebp-404h]
      char Dst; // [esp+Dh] [ebp-403h]
      length = strlen(input);
      v10 = 0;
      memset(&Dst, 0, 0x3FFu);
      i = 0;
      if ( length > 0 )
      {
        second_1 = first_1;
        do
        {
          first = input[i];
          if ( (input[i] - '0') > 9u )//取第1个字符，范围在A-F就减去55作为一个值，所以first_1有6种可能，10，11,12,13,14,15
          {
            if ( (first - 'A')  9u )//取第2个字符，同上
          {
            if ( (second - 'A') > 1;//v7就是个下标值：0,1,2,3,4,5......
          i += 2;
          *(&v10 + v7) = second_1 | 16 * first_1;//这一步就是利用上面两个值算出一个新的值，存到v10地址那里，而由栈的分布可知v10和v8是同一个地址，也就是存到v8
        }
        while ( i ,std::allocator>::basic_string,std::allocator>(&v22);//C++的构造函数
      len = 0;
      v26 = 0;
      if ( half_length )
      {
        do
        {
          *(&str + len) = *v4;
          str1_1 = str1;
          ++len;
          --len_half;
          ++v4;
          if ( len == 3 )
          {
            res0 = str >> 2;//这是熟悉的Base64加密算法，而且长度是3的倍数的情况下
            res1 = (str1 >> 4) + 16 * (str & 3);
            res2 = (str2 >> 6) + 4 * (str1 & 0xF);
            res3 = str2 & 0x3F;
            i = 0;
            do
              std::basic_string,std::allocator>::operator+=(//这是C++的字符串运算符重载，把char转成string，方便直接字符叠加在后面。
                &v22,
                (word_1093020[*(&res0 + i++)] ^ 0x76));//从Base64表中（0x1093020）找到十进制下标所在的值异或0x76得到新值存到v22中，一次处理3个字符。
            while ( i > 4) + 16 * (str & 3);
          res0 = str >> 2;
          res2 = (str2 >> 6) + 4 * (str1_1 & 0xF);
          k = 0;
          for ( res3 = str2 & 0x3F; k ,std::allocator>::operator+=(
              &v22,
              (word_1093020[*(&res0 + k)] ^ 0x76));
          if ( len ,std::allocator>::operator+=(&v22, '=');
              --v9;
            }
            while ( v9 );
          }
        }
      }