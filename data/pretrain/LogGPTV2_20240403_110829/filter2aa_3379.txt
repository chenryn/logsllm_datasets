# C0RE Team: Challenge the Impossible -- Multiple Exploits on Android

## About Us & C0RE Team
### Hanxiang Wen (温瀚翔)
- **Security Researcher at C0RE Team**
- Focus: Android vulnerability research and exploit development

### Xiaodong Wang (王晓东)
- **Security Researcher at C0RE Team**
- Focus: Kernel vulnerability research and exploit development

### C0RE Team
- A security-focused group founded in mid-2015, with a recent focus on the Android/Linux platform.
- The team aims to discover zero-day vulnerabilities, develop proof-of-concept (PoC) exploits, and create robust exploit techniques.
- Currently, the team has 131 public CVEs for AOSP and the Linux Kernel.
- Recognized as a top researcher team for submitting high-quality reports to Google's Vulnerability Rewards Program (VRP).

## Agenda
1. **AOSP Exploit**
   - **CVE-2016-6707**
     - Background
     - Exploit Analysis
     - Improvement & Limitations
2. **Kernel Exploit**
   - **CVE-2017-0437**
     - Introduction
     - Vulnerability Analysis
     - Exploit Workflow
3. **Combination Exploits**
   - AOSP and Kernel Exploit Workflow
   - Demonstration

## AOSP Exploit: CVE-2016-6707
### Background
- **"BitUnmap" in system_server**
- An open-source exploit with some defects, detailed in [Gal Beniamini's blog](https://googleprojectzero.blogspot.com/2016/12/bitunmap-attacking-android-ashmem.html).

### Mismatch in Ashmem
- **Set/Get Size in Ashmem**: 
  - There is a mismatch between the size set and the actual mapped memory size.
- **Map Memory with Ashmem**:
  - The region size in ashmem may not equal the mmaped size.

### False Assumption in Bitmap
- **Create Bitmap**:
  - Incorrect assumptions about the bitmap size.
- **Free Bitmap**:
  - `mPixelStorage.ashmem.size` (used in `munmap`) does not match the `size` used in `mmap`.
  - This leads to an out-of-bounds (OOB) unmap.

### Preparation
- **Target Structure: Thread**
- **Bypass SELinux Rules** (Embedded Shellcode in APK):
  - Updated in Android-N, `system_server` should never execute anything from `/data` except for `/data/dalvik-cache` files.
  - SELinux policy:
    ```plaintext
    # system_server should never execute anything from /data except for /data/dalvik-cache files.
    neverallow system_server {
      data_file_type
      -dalvikcache_data_file
    }:file no_x_file_perms;;
    ```

### Exploit
- **Shaping Memory Space (IPC with Notification Service)**:
  - Use multiple bitmaps and SoundPool to shape the memory space.
  - Create a faked thread to bypass security checks.

### Improvement
- **Accuracy of "NOP" before "ADRP" in embedded shellcode**.
- **Patch for fake thread attributes assembly**:
  - Enable `dlopen()` and `dlsym()`.

### Limitation
- **SELinux Mitigation**:
  - Updated in Android-N, `system_server` cannot open files from external storage.
  - SELinux policy:
    ```plaintext
    # Do not allow opening files from external storage as unsafe ejection could cause the kernel to kill the system_server.
    neverallow system_server sdcard_type:dir { open read write };
    neverallow system_server sdcard_type:file rw_file_perms;
    ```

## Kernel Exploit: CVE-2017-0437
### Introduction
- **Impacted Phones**: Nexus 5X, Pixel, etc.
- **Vulnerability Type**: Stack buffer overflow.
- **Qualcomm Driver Vulnerability**: `wlan_hdd_cfg80211.c`
- **Exploitation**:
  - Using the stack overflow, rewrite the return address of the call function.
  - Control the PC register to the gadget and remove the process’s address_limit.
- **Reported by**: Chen Hao of Qihoo 360 Technology Co. Ltd. to Google in February.
- **Validation**: Tested on the MTC19V version of the Nexus 5X.

### Analysis
- **Struct Definition**: `roam_ext_params`
- **Netlink Commands in User Space**
- **ARMv8’s LR (X30)**: On the stack, push down stack pointer and store FP and LR.

### Call Trace and PoC/PWN Workflow
- **Workflow**:
  1. Overflow `roam_params.bssid_favored_factor[]` to overwrite the caller function's return address when the loop exceeds 16 times.
  2. Use gadgets to remove the address limit of the process.

### Patch
- The patch for CVE-2017-0437.

## Combination Exploits
### AOSP and Kernel Exploit Workflow
- **Demonstration**: Combining AOSP and Kernel exploits to achieve a more powerful attack vector.

---

This optimized text provides a clear, professional, and structured overview of the C0RE Team's work, including detailed explanations of the exploits and their technical aspects.