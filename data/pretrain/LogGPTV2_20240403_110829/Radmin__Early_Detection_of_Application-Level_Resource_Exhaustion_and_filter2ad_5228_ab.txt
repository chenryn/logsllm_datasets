(lossy compression) of the measurements by mapping them to a ﬁnite alphabet
of a much smaller size. The Guard then builds multiple PFAs over the encoded
sequences, one for each monitored resource type. In the online phase, the Guard
encodes the incoming stream of measurements, executes the PFAs (per task, per
resource type), runs the detection algorithm, and raises an alarm if an anomaly is
detected. In our experiments, we only terminated the violating process. However,
more advanced recovery can be used such as resource throttling or execution
rollback [35].
Fig. 2. Overview of Radmin Guard.
In the following section, we discuss in more depth how the Guard encodes
the measurements, learns and executes the PFAs, and detects attacks.
4 Learning and Detection
4.1 Encoding
Radmin learns each codebook, used by the encoder, by running a k-means quan-
tizer over the raw vectors of measurements, where k = |Σ| is the number of
desired codewords. In our implementation, we used k-means++ [10,13], which
522
M. Elsabagh et al.
is guaranteed to ﬁnd a codebook (clusters) that is O(lg k)-competitive with
the optimal k-means solution [13]. To build the codebook, each measurement
(consumed kernel and user time, and resource value) is treated as a point in
a three-dimensional space. k-means++ starts by selecting one center point at
random, from among all measurement points. Then, the distance d(x) between
each measurement point x and the nearest center point is computed. Next, one
more center point is chosen with probability proportional to d2(x). This seed-
ing process repeats until k centers are chosen. After which, standard k-means
clustering is performed resulting in k point clusters, the centers of which are
the codewords. We refer the interested reader to [13] for a detailed discussion of
k-means++.
Each codebook Σ (one codebook per resource type) stores an indexed list
of codewords. Each codeword σ is represented by three-dimensional centers μσ
and spreads sσ, where each dimension corresponds to one dimension of the raw
measurement vector. The number |Σ| of codewords is determined such that each
dimension gets at least 1 degree of freedom (level), constrained by a total of 64
degrees of freedom per codeword, i.e., |Σ| ∈ [3 . . . 64]. This setup allows at most
4 degrees of freedom per dimension (43 total), in case that all dimensions have
the same amount of variance. Finally, encoding is done by mapping a given mea-
surement vector to the index of its nearest codeword. If a measurement vector
falls outside the coverage of all codewords, an empty codeword ∅ is returned.
4.2 Learning the PFAs
Radmin builds multiple PFAs for each resource type, and uses them to predict
the probability of new sequences of measurements given the history of measure-
ments. A PFA is a 5-tuple (Σ, Q, π, τ, γ), where:
– Σ is a ﬁnite alphabet (the codebook) of symbols processed by the PFA.
– Q is a ﬁnite set of PFA states.
– π : Q → [0, 1] is the probability distribution vector over the start states.
– τ : Q×Σ → Q is the state transition function.
– γ : Q× Σ → [0, 1] is the emitted probability function (predictive distribution)
when making a transition.
The subclass of PFA used in Radmin is constructed from their equivalent
Probabilistic Suﬃx Tree (PST) model [30], which is a bounded variable-order
Markov model where the history length varies based on the context (statistical
information) of the subsequences of measurements, and the tree does not grow
beyond a given depth L. In other words, the PST captures all statistically signiﬁ-
cant paths between resource consumption levels (encoded measurements), where
the path length is at most L. In the construction of the PST, a subsequence of
encoded measurements s ∈ Σ∗ is added to the PST only if :
1. s has a signiﬁcant prediction probability, i.e., there is some symbol σ ∈ Σ
such that P (σ|s) ≥ γmin, where γmin is the minimum prediction probability
of the model.
Radmin: Early Detection of Application-Level Resource Exhaustion
523
P (σ|s)
≥ rmin or ≤ 1
2. And, s makes a contribution, i.e., the prediction probability is signiﬁcantly
diﬀerent from the probability of observing σ after the parent node of s, i.e.,
rmin , where rmin is the minimum diﬀerence ratio.
P (σ|Parent(s))
The PFA model provides tight time and space guarantees since it has a
bounded order, and only the current state and the transition symbol determine
the next state. Those are desirable properties for Radmin since (1) we construct
the PFAs without prior knowledge of the dependencies order (the length of sta-
tistical history in the measurements produced by target programs); and (2) we
want to minimize the execution overhead of Radmin by maintaining a minimal
amount of state-keeping information for the PFAs, and calculating the predic-
tion probability for each measurement as fast as possible. For a sequence of n
measurements, the PFA model allows us to compute the prediction probability
in O(n) time and O(1) space. Due to space constraints, we refer the reader to
[14,19,30] for detailed discussions of various construction algorithms.
In the subclass of PFA used in Radmin, each state q ∈ Q has a unique ID
corresponding to the subsequence captured by that state, and the PFA has a
single start state q◦, where π(q◦) = 1. Given a PFA M and a string of encoded
measurements s = s1 . . . sl, we walk M (for each si ∈ s) where each transi-
tion qi+1 = τ(qi, si) emits the transition probability γ(qi, si). The prediction
probability of s by M is given by:
l(cid:2)
(cid:3)
γ
qi−1, si
(cid:4)
.
P (s) =
i=1
(1)
For example, given the PFA in Fig. 3, the prediction probability of the sequence
of encoded measurements “abca” is given by:
P (abca) = γ(φ, a) × γ(a, b) × γ(ab, c) × γ(c, a)
= 3/8 × 2/3 × 1 × 1/2
= 1/8.
Learning the PFAs, for a target program, requires running the target program
over benign inputs. The following are some possible ways to handle this:
– Dry runs and collected benign traﬃc. Radmin can be trained through
dry runs over benign inputs. This is typical in internal acceptance and pre-
release testing. Radmin can also be trained using traﬃc that has already been
processed by applications and shown to be benign. This is arguably the easiest
approach to train Radmin if it is deployed to protect a web-server.
– Functionality tests. Radmin can be trained using positive functionality
tests. Testing is integral to the software development lifecycle, and Radmin
can integrate with the test harness at development time. The main disadvan-
tage is the additional eﬀort needed for integration and debugging.
– Endusers. Radmin can be trained by endusers. Even though this causes an
increased risk of learning bad behavior, the resulting PFAs can be compared
524
M. Elsabagh et al.
Fig. 3. Example of a PFA over the alphabet Σ = {a, b, c}. φ is the start state. Every
edge is labeled by the transition symbol and transition probability. Transition symbols
correspond to encoded measurements. Note, transition probabilities were rounded, and
low probability transitions were removed for simplicity.
or averaged based on the type and privileges given to each class of users.
The PFAs can be averaged, for example, based on the distance between their
transition functions. Additionally, the learning algorithm can be modiﬁed such
that the PFA learns new behavior if the new behavior is statistically similar
to old behavior, by using statistics over the frequency of minimum probability
transitions.
Once trained, Radmin can continue learning or be locked down, based on
the system policy. For example, system administrators may desire to limit guest
users to what Radmin already knows, while PFAs for sudoers can still adjust
and add to what they learned. The PFAs can also be locked after some time of
no change, which can be an eﬀective strategy for preventing future attacks from
compromised users.
4.3 Anomaly Detection
In the online phase, the Guard operates by encoding the received sequences
over Σ, and executing the corresponding PFAs as shadow automata, where each
sequence results in a transition in one or more PFA. In addition to the measure-
ments, the Guard uses the received heartbeat signal to timeout the transitions
of the PFAs.
Algorithm 1 outlines the detection algorithm. Radmin raises an alarm if any
of the following conditions is satisﬁed:
1. A foreign symbol is detected (lines 2–4). In this case, the program is requesting
some resource amount that is not within the spread of any of the codewords
in the codebook. This typically indicates an overshoot or undershoot signal.
A very common example is DoS attacks that use data poisoning to pass a
huge value to a malloc call, resulting in immediate crashing.
Radmin: Early Detection of Application-Level Resource Exhaustion
525
Algorithm 1. AcceptMeasurement
input : Measurement vector v, heartbeat signal t,
PFA M , Current state qi ∈ M , Current path probability p
output: Accept or Reject
1 c ← Encode(v);
2 if c = ∅ then
Reject
3
4 end
5 if p · γ(qi, c) < γmin(M ) then
Reject
6
7 end
8 timedout ← 1;
9 foreach outgoing edge ei from qi do
10
if ¬ Timedout(ei, t) then
timedout ← timedout ∧ 0;
11
12
end
(cid:4) Foreign value
(cid:4) Low probability transition or path
13 end
14 if timedout = 1 then
15
16 end
Reject
17 Accept
(cid:4) All transitions timed out
(cid:4) take the transition
– γmin(M ) is the minimum prediction probability of M .
– Timedout(ei, t) tests if the time signal t lies outside the spread of the time dimen-
sions of the codeword corresponding to transition ei.
2. The program is requesting a transition that has a very low probability (lines
5–7). This case captures scenarios where attackers craft input that consumes
(or locks) resources at program states that diﬀer from benign runs. A common
example is attacks that aim at maximizing the amounts of resources consumed
by the program.
3. One or more PFAs time out (lines 8–16). In this case, the program has not
transitioned to any of the next states within an acceptable time, with respect
to one or more resource types. This, for example, could indicate the presence
of a livelock.
The algorithm takes O(|Σ|) time in the worst case, since the number of
outgoing edges from any state is at most |Σ|.
5 Empirical Evaluation
We conducted a series of experiments to evaluate the eﬀectiveness of Radmin.
The ﬁrst set of experiments evaluate the eﬀectiveness of Radmin in detecting
attacks that trigger uncontrolled resource consumption. The ﬁrst experiment
526
M. Elsabagh et al.
uses a web server and a browser, with suﬃcient input coverage. We then con-
ducted a second experiment using common Linux programs, and only using the
functionality tests that shipped with them as a representation of normal inputs.
Finally, we conducted a third experiment to evaluate the eﬀectiveness of Radmin
in detecting starvation, using starvation and livelock cases that are common in
the literature.
We refer to test cases that trigger abnormal behavior by positive (malicious),
and those that do not by negative (benign). Each positive test case can either
be correctly detected or missed, giving a true positive (TP) or a false negative
(FN), respectively. Each negative test case can either be detected as such or
incorrectly detected as an attack, giving a true negative (TN) or a false positive
(FP), respectively.
5.1 Procedure and Metrics
For every target program, we proceeded as follows. We executed two thirds of the
negative test cases to collect benign measurements and build the PFAs. Then,
we executed the remaining one third to measure the false positive rate. Finally,
we executed all positive test cases to measure the detection rate and earliness of
the detection.
We trained the PFAs, and optimized their hyperparameters, using 5-fold
cross-validation (CV) over the training sequences (measurements from the two-
thirds of negative test cases used in training). For each resource type, we build
a PFA and select its hyperparameters from a cross product of all possible values
(see Appendix A). Training sequences were divided into ﬁve roughly equal seg-
ments. Each fold in the CV used the sequences in one such segment for testing,
and a concatenation of the rest for training. CV testing is performed by calcu-
lating the average log-loss of the prediction probability of sequences, given by
− 1
i=1 lg P (si), where P (si) is the prediction probability of test sequence si
and T is the total number of test sequences. This is done for each fold, resulting
in ﬁve average log-loss values per hyperparameters vector. Finally, the hyper-
parameter vector with the best median log-loss over the ﬁve folds is used for
building the PFA over the entire training sequences.
(cid:2)T
T
We used the following metrics in our evaluation: False Positive Rate (FPR),
True Positive Rate (TPR), and Earliness (Erl.). Earliness is calculated as the
percentage of the amount of resources that Radmin saved under an attack, to
the maximum resources used by negative runs. We use Erl. to quantify how quick
Radmin detected the attacks. For example, if a program consumed a maximum of
40 MB under benign conditions, and an attack consumed 30 MB before Radmin
detected it, the earliness of detecting the attack would be 40−30
40 = 25 %. Erl.
reaches its best value at 100 and its worst at 0.
For resource exhaustion detection, we used synthetic attacks (which we dis-
cuss in the following section). In the case of starvation and livelocks, we used
a number of common cases that appeared in prior livelock detection studies
[6,7,22,27]. Note, since the attacks aimed at exhausting system resources, they
were always detected once consumed resources more than the maximum of
Radmin: Early Detection of Application-Level Resource Exhaustion
527
benign runs. Therefore, Radmin always achieved a TPR of 1. The same applies
to starvation and livelock test cases.
5.2 Synthetic Exhaustion Attacks
One approach to evaluate Radmin against resource exhaustion attacks would
be to test it with several known attacks. While such an approach is common in
the literature, it suﬀers from two major drawbacks. First, it is very challenging
to identify real exhaustion attacks that exploit diﬀerent weaknesses, diﬀerent
resource types, and exercise diﬀerent code paths for each target program. That
means the produced results could be biased, because the number of attacks would
have little to no correlation with the variety of attacks that can be detected.
Second, evaluating a defense system against only known attacks limits the scope
of the evaluation and the results to only the known attacks. As we have seen in
the past [15,25,29], this may establish a false sense of security against attacks
that are possible in practice but have not yet been seen in the wild. Therefore,
we decided against using the only few known attacks, and instead opted for
generating synthetic attacks that resemble, and even surpass in sophistication
and variety, the attacks seen in the wild. Our ultimate goal is to stress the system
and ﬁnd out its limits on a much richer set of attack entries.
To achieve that, we assume that the attacker has successfully identiﬁed some
exhaustion vulnerability in the target program, and has crafted malicious input
that successfully triggers the vulnerability. The nature of the exploit by which
the vulnerability is triggered is not pertinent to our evaluation, since we are only
concerned about the scope of the exploit (in our case, resource exhaustion) rather
than its cause. Therefore, the malicious input that caused the exhaustion can be
substituted by attack code that executes to the same eﬀect at some vulnerable
code site in the context of the process. Therefore, we generated synthetic attack
datasets by separately collecting measurements for exhaustion attack samples,
and injecting those measurements in the trace of negative (benign) measure-
ments. The attack measurements are injected once per trace ﬁle at a randomly
selected location. To account for diﬀerences in the total amount of the attacked
resource at the injection point, we adjust the injected measurements by adding
(summing) the last benign measurement vector of the same resource type to
each attack vector in the rest of the trace. Being able to inject the attacks at
any point in the trace allows us to accurately capture attacks seen in the wild,
and even cover more sophisticated cases, including exhaustion attacks at very