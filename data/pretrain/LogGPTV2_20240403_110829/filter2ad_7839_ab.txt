    67126fcf 8d3c10          lea     edi,[eax+edx]
    0:009> p/／ecx的值为dword值
    eax=00000024 ebx=000002fd ecx=00000000 edx=680312c0 esi=0060e7d0 edi=680312e4
    eip=67126fd2 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x357:
    67126fd2 8d4c1b02        lea     ecx,[ebx+ebx+2]
    0:009> p
    eax=00000024 ebx=000002fd ecx=000005fc edx=680312c0 esi=0060e7d0 edi=680312e4
    eip=67126fd6 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x35b:
    67126fd6 8bc1            mov     eax,ecx
    0:009> p／／最后拷贝的长度再除以4
    eax=000005fc ebx=000002fd ecx=000005fc edx=680312c0 esi=0060e7d0 edi=680312e4
    eip=67126fd8 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x35d:
    67126fd8 c1e902          shr     ecx,2
    0:009> p/／这次拷贝17f的值 key！！！看ecx
    eax=000005fc ebx=000002fd ecx=0000017f edx=680312c0 esi=0060e7d0 edi=680312e4
    eip=67126fdb esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x360:
    67126fdb f3a5            rep movs dword ptr es:[edi],dword ptr [esi]
可以看到，这次拷贝的长度是0x17f，长度非常大，而在整个分析的过程中，并没有对拷贝的长度进行控制，因此，可以拷贝任意超长的字符串，进入这个堆空间。
这个堆空间非常有意思，存放的是一个vftable，这个vftable会在ScStorageFromUrl函数中的某个内层函数调用调用到，还记得之前分析的ScStripAndCheckHttpPrefi函数吗。
    0:009> p//正常情况ScStripAndCheckHttpPrefix函数中对vftable的获取
    eax=00fff9a4 ebx=00fffbe8 ecx=00605740 edx=00fff4f8 esi=0060c648 edi=00605740
    eip=671335e8 esp=00fff4b8 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStripAndCheckHttpPrefix+0x13:
    671335e8 8b07            mov     eax,dword ptr [edi]  ds:0023:00605740={httpext!CEcb::`vftable' (67113bc8)}
获取完虚表之后，会获取到对应的虚函数，在ScStripAndCheckHttpPrefix函数中call调用到。但是由于之前的memcpy覆盖，导致这个vftable被覆盖。
    0:009> p
    eax=680313c0 ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=671335f0 esp=00fff4b4 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStripAndCheckHttpPrefix+0x1b:
    671335f0 8955f4          mov     dword ptr [ebp-0Ch],edx ss:0023:00fff4c4=00000000
    0:009> p//eax是vftable，而call [eax+24]调用虚函数，这里由于之前的覆盖，导致跳转到可控位置
    eax=680313c0 ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=671335f3 esp=00fff4b4 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStripAndCheckHttpPrefix+0x1e:
    671335f3 ff5024          call    dword ptr [eax+24h]  ds:0023:680313e4=68016082
    0:009> dc eax
    680313c0  680313c0 68006e4f 68006e4f 766a4247  ...hOn.hOn.hGBjv
    680313d0  680313c0 4f744257 52345947 4b424b66  ...hWBtOGY4RfKBK
这个漏洞的原理非常简单，在PROPFIND中，由于对http的长度没有进行检查，导致在memcpy中，可以拷贝超长的字符串，覆盖到栈中的关键位置，下面来看一下伪代码。
    __int32 __fastcall ScStoragePathFromUrl(const struct IEcb *a1, wchar_t *a2, unsigned __int16 *a3, unsigned int *a4, struct CVRoot **a5)
    {
      v35 = a3;
      v5 = a1;
      Str = a2;
      v37 = (int)a1;
      v34 = a4;
      v33 = a5;
      result = ScStripAndCheckHttpPrefix(a1, (const unsigned __int16 **)&Str);//主要用来检查开头信息，比如http头以及host等等
      if ( result ::CchGetVirtualRootW (6712d665) 获取虚拟路径
      if ( v8 == v42 )
      {
        if ( !v8 || Str[v8 - 1] && !__wcsnicmp(Str1, Str, v8) )
          goto LABEL_14;
      }
      else if ( v8 + 1 == v42 )
      {
        v9 = Str[v8];
        if ( v9 == 47 || !v9 )
        {
          --v42;
          goto LABEL_14;
        }
      }
      v36 = 1378295;
    LABEL_14:
      if ( v36 == 1378295 && a5 )
      {
        ……
      }
      v16 = v41;
      if ( v41 )
      {
        v17 = (const unsigned __int16 *)((char *)&v39 + 2 * v41 + 2);
        if ( *v17 == 92 )
        {
          while ( v16 && *v17 == 92 && !FIsDriveTrailingChar(v17, v16) )
          {
            v41 = --v16;
            --v17;
          }
        }
        else if ( !*v17 )
        {
          v16 = v41-- - 1;
        }
      }
      v18 = v16 - v42 + v7 + 1;
      v19 = *v34 > 2;
        qmemcpy(v35, WideCharStr, 4 * v24);//拷贝虚拟路径
        v26 = &WideCharStr[2 * v24];
        v25 = &v21[2 * v24];
        LOBYTE(v24) = v23;
        v27 = v42;
        qmemcpy(v25, v26, v24 & 3);
        v28 = v7 - v27;//这里v7是0x2fd，相减赋值给v28，这个值很大，v27为0
        v29 = &Str[v27];
        v30 = v35;
        qmemcpy(&v35[v22], v29, 2 * v28 + 2);//直接拷贝到栈中，没有对长度进行检查，导致溢出
        for ( i = &v30[v41]; *i; ++i )
        {
          if ( *i == 47 )
            *i = 92;
        }
        *v34 = v37;
        result = v36;
      }
      return result;
    }
* * *
## CVE-2017-7269 Exploit!精妙的漏洞利用
* * *
其实通过上面的分析，我们发现这个漏洞的 原理非常简单，但是究竟如何利用呢，我们来看一下关于ScStorageFromUrl函数中，包含了GS
check，也就是说，我们在进行常规的覆盖ret方式利用的情况下，将会把cookie也会覆盖，导致利用失败。
    .text:67127017 loc_67127017:                           ; CODE XREF: ScStoragePathFromUrl(IEcb const &,ushort const *,ushort *,uint *,CVRoot * *)+50j
    .text:67127017                                         ; ScStoragePathFromUrl(IEcb const &,ushort const *,ushort *,uint *,CVRoot * *)+67j
    .text:67127017                 mov     ecx, [ebp+var_C]
    .text:6712701A                 pop     edi
    .text:6712701B                 mov     large fs:0, ecx
    .text:67127022                 mov     ecx, [ebp+var_10]