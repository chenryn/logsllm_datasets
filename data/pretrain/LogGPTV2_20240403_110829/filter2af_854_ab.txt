  * 
  * 
  * 
  * 
## IDA Pro
老牌逆向工具，在 Ghidra 出来之前已经制霸了十几年，因此也拥有丰富的插件生态。从使用者的角度来说，IDA
无疑是一个优秀的选择，其反编译器可以给出非常接近源码的高层伪代码，极大减少了逆向工程师的工作量。缺点也就一个:
太贵。每年几千美刀的授权费用对于个人逆向爱好者而言并不是一个小数目，而且还分别针对不同的指令集架构进行收费。之前还满心期待家庭版的 [IDA
Home](https://www.hex-rays.com/products/idahome/)，365美元一年，但是没有 decompiler、没有
SDK、还不能商业使用，于是我又默默关闭页面并掏出了 [Binary
Ninja](https://rehex.ninja/posts/comparision-of-re-tools/)。
因此要有一个舒适的逆向体验，还是需要一个 `IDA Pro`。从插件开发者的角度来说，IDA Pro
本身确实提供了接口文档，而且由于年代久远也积累了许多插件生态，但是实际使用下来还是有些卡壳。举例来说，在写插件的过程中遇到一个需求，比如判断`jni_all.h`这个头文件是否已经加载过，即某个结构体是否已经定义，在文档中说是使用下面的
idapython 接口:
    idaapi.get_struc_id('JNIInvokeInterface_') != idaapi.BADADDR 
可是实际上这样即便 JNI 接口已经定义，返回也是 BADADDR 。最终实现还是通过一种比较取巧的方法，即根据下面的语句是否抛出异常来判断:
    idc.parse_decl('JNIInvokeInterface_ *if', idc.PT_SILENT) 
类似的问题还有不少，而且很多技巧需要通过阅读其他人的插件代码去了解，对于不熟悉的开发者来说体验并不是太好。下面是一些 IDA 开发相关的资料:
  * 
  * 
  * 
  * 
## Radare2
作为一个骨灰级命令行爱好者，接触 Radare2(r2) 也是顺应自然的选择。最初使用 Radare2
的一个原因是因为其开源，可以在各个平台中使用；另外一个原因是支持 VI 快捷键，省去了我很大的学习成本。虽然一开始以命令行逆向工具为卖点，但也可以配合
[Cutter](https://cutter.re/) 使用。
虽然每次我都狂热推荐使用 r2，但实际上他也有明显的局限性，其中一个是 decompiler 的缺乏。这可以使用一些三方的 decompiler
实现，比如:
  * Ghidra Decompiler
  * RetDec Decompiler
  * r2dec
作为插件开发者，使用的主要是 r2pipe 接口，这个接口实际上是 r2 的命令行参数的管道，所以写插件本质上还是需要通过 r2 的命令实现。说到 r2
的命令，内置的帮助信息可以方便日常使用的查询，用户只需要记得大致的命令类目，比如分析类命令是`a`开头，可以使用`a?`查看所有分析相关的命令，进而可以使用`af?`查看所有和函数分析相关的命令。
虽然和 Ghidra 一样是开源工具，但由于 r2 主要是爱好者去维护，因此投入上的差距也导致了开发进度的差距。在 Github
中可以看到开发者们经常在努力修 bug 以及更新优化代码，但关闭 issue 的速度远跟不上新开 issue
的速度。举一个遇到的例子，我想要修改某个地址对应函数的签名为对应 JNI 函数签名，搜索后发现有几种方法: 一是使用 `afvr/avfn/afvt`
修改变量；二是使用 `tl` (type link)去连接类型；三是使用 `afs` 去直接修改签名信息。可测试下来这几种方式都有问题。其中 `afs`
是最接近我需求的命令了，但是却不支持自定义的类型，而解决这个问题还需要等 r2 项目组将内置 parser 从 `Tcc`迁移到 `tree-sitter`
(见
[issue#17432](https://github.com/radareorg/radare2/issues/17432))。诸如此类的问题也是比较打击插件开发者积极性的，毕竟谁也不想为了一个简单的功能找半天文档发现无法实现。
尽管如此，我还是非常看好 Radare2
的未来，他年岁尚浅，但有很大的拓展性，值得持续保持关注。同时也应该给开发者更多的耐心和支持，如果可以的话，为其添砖加瓦。下面是一些 r2 相关的资料:
  * 
  * 
  * 
# 后记
本文主要是分享 [JNI Helper](https://github.com/evilpan/jni_helper) 这个辅助自动化静态逆向分析 JNI
接口的工具，可以在日常安卓逆向时候减少一些重复的劳动。俗话说工欲善其事，必先利其器，在日常中打磨自己的武器库值得投入必要时间，但也要避免陷入盲目造轮子的冲动。另一方面，也记录一下在编写各个逆向工具插件过程中的一些感受。总的来说
Ghidra 的插件编写体验最好，文档丰富且完善，不愧为 NSA 的产品；其次是
IDAPython，虽然有部分文档，但很多都只是一句话带过，想查找某些特定功能需要花费额外时间；而对于
Radare2，虽然是使用管道来进行批处理，但基本的交互都可以支持，只是部分功能实现尚不完善，需要给开发者更多的支持和耐心，毕竟大家都是花费着自己的业余时间和精力去维护和贡献。希望能有更多人投入到
Radare2 的社区中，哪怕只是贡献一点文档，写一写 writeup，对开源社区的帮助也是很大的。
# 参考链接
  * [JNI 文档](https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/design.html)
  * [skylot/jadx](https://github.com/skylot/jadx)
  * [Ayrx/JNIAnalyzer](https://github.com/Ayrx/JNIAnalyzer)
  * 
  * 
* * *