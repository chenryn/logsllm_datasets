inputs, zeroing out sensitive memory after use. This addresses
Problem #1. SecureTextView also implements a secure version
of SpannableStringBuilder, which is the buffer type used
in TextView, to avoid password fragments from being left in
memory. This addresses Problem #2. We describe our ﬁxes
for Problem #3 in Section VI-B, which will address the use
of String objects.
it
SecureTextView is different from the regular TextView
treats password inputs differently from regu-
in that
lar inputs, and also that
it ﬁxes the insecure design of
the SpannableStringBuilder class. When SecureTextView
processes a password ﬁeld, it uses a secure implementation
SecureBuffer instead of SpannableStringBuilder as the
buffer. The design and implementation of SecureBuffer
closely follow these of SpannableStringBuilder. How-
ever, it avoids leaving password fragments, and it contains
a secure close method that cleans up passwords. Moreover,
SecureTextView has an event handler that listens for status
changes of the phone. If the phone is locked, or if an app
becomes inactive, SecureTextView automatically zeroizes its
buffer to clean up password ﬁelds. SecureTextView can be
used as a drop-in replacement of TextView, as all code
changes are localized to the implementation of TextView and
SpannableStringBuilder. Overall, SecureTextView differs
from the regular TextView only by 500 lines of code in Java.
To ﬁx the buffering problem in keyboards (Problem #4), we
modiﬁed the code of the open-source keyboard app LatinIME
to avoid holding on to the most recent user input. Since the
other keyboard apps are not open source, we could not easily
modify the source code and test the ﬁx. Nevertheless, as we
discussed before, we observed similar behaviors in these apps
as LatinIME, so they are likely caused by a similar buffering
problem. In addition, we plan to contact Google to update its
ofﬁcial documents that describe security issues with creating
keyboards; the current documents only suggest that passwords
Fig. 3: Authentication steps when unlocking a device.
count for passwords, instead of depending on automatic mem-
ory management in Java itself. When passwords are copied, the
reference count will increment. When copies are released, the
reference count decrements. When a reference count drops to
zero, its cleanup method overwrites the password three times
with different values, which seems unnecessarily paranoid.
Unlike Keepass2Android, PasswdSafe does not seem to be
aware of the TextView problem, and there is no attempt to
clear its buffer.
The results for password managers are clearly more en-
couraging than other apps, as we can see considerable efforts
gone into secure management of passwords. However, despite
developers’ best efforts, we can see that even experts with
intricate knowledge of security practices fail to completely
solve the password retention problem. This is because there
are many opportunities for retention; as a result, overlooking
even one of them would cause password to be left in memory.
F. System Processes
Last but not least, we turn to a special type of authenti-
cation in the Android framework: PIN authentication in the
lockscreen service. As shown in Figure 3, this system service
in Android is designed with security in mind, as it lever-
ages several services in the secure world in TrustZone, such
as Gatekeeper and Keymaster. Unfortunately, we found
that the SystemUI and LocalSettingsService processes,
which are in charge of PIN authentication, also have password
retention. The SystemUI process uses the standard TextView
to obtain passwords, and like other apps,
it also converts
the password into a String object. This process then sends
the String object directly to the LocalSettingsService
process via Binder. The LocalSettingsService ﬁnally con-
verts the string password into a char array, and derives keys
from this password using scrypt; these derived keys are further
protected by TrustZone. However, the original password, as it
is stored in a String object, is immutable and survives in
memory long past its use.
This is an unfortunate but classic example where a single
weak link can break the entire security chain. Even though
the developers for the Android framework explicitly keep
security in mind, using security features not available to
regular Android developers, the TextView class and the use
of String-based passwords leaves a prominent vulnerability.
8
HARDWARETrustedSystemUIKeyGuardNon TrustedLockSettingServiceGatekeeperdDaemonKeystoreServiceKeymasterGatekeeperGatekeeperHALKeymasterHALAndroid OSTEE OS①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭AuthTokenHMAC key(a) The password usage patterns for 19 apps that we studied,
in the form of state transitions.
(b) The password usage pattern
KeyExporter aims to achieve.
(c) KeyExporter further encapsu-
lates the states containing pass-
words.
Fig. 4: The password usage patterns in the studied apps, as well as the pattern and encapsulation that KeyExporter achieves.
should not be stored in a ﬁle, but they should ideally also
include suggestions on avoiding password inputs from being
unnecessarily retained in memory.
B. KeyExporter: Fixing Android Apps
Problems #5 – #7 (as well as #3) need to be addressed on
a per-app basis, since it is up to an individual app developer to
avoid insecure engineering practices. We summarize security
practices to avoid password retention:
•
•
•
Using char array to hold passwords obtained from
TextView (Use charAt() instead of toString()).
Clearing the TextView’s buffer by calling its
clear() function.
Deriving a strong key (e.g., “key stretching” [32])
at the early stage without any unnecessary password
propagation.
Zeroing out all password memory.
•
Unfortunately, many developers generally do not share the
same level of awareness of security practices. As found in our
analysis, many apps simply send plaintext passwords to the
network, or save them to local non-volatile storage. A recent
survey also conﬁrms that developers think of functionality ﬁrst,
and regard security as a secondary task [43]. Therefore, we
believe that a general, easy-to-use solution is necessary for
developers to follow the security practices to avoid password
retention.
We achieve this by designing and implementing KeyEx-
porter, with two explicit design goals: proactive security, and
usability. KeyExporter proactively manages passwords inter-
nally, and only exports password-derived keys to developers;
it also securely manages its password memory. Moreover,
it offers developers simple APIs that are intuitive to use:
existing studies show that if security APIs are complicated,
developers tend not to use them at all [26], [42]. KeyExporter
9
is designed with the understanding that usability and simplicity
can effectively promote security [1].
KeyExporter Design. We start by identifying common pat-
terns of password usage in today’s apps. Figure 4a shows the
patterns for the 19 apps that we have analyzed, which are
presented in the form of state transitions. We have omitted apps
that rely on OAuth for authentication, as they do not directly
manage passwords. The edges in this graph indicate the ﬂow
of passwords in an app, and the nodes represent the states
that a series of transitions can reach. Each node also contains
a count, which represents the number of apps that reach this
state following a particular transition path. For instance, all
19 apps implement a form of onClick() method, which is
the starting point for authentication when a user clicks a login
button.
We make several high-level observations on the usage
pattern after onClick. Most apps (18 of them) directly get
a String object from the widget to store passwords, and only
one app correctly uses a char array. Afterwards, all of these
apps perform a transition that we label as use(pw), which
either passes the data as a parameter to a function, or sends
it to a different process via IPC, or checks its strength. We
noticed that, apart from checking the password strength, all
other “uses” are simply unnecessary password propagation.
After this, 11 out of the 19 apps directly send passwords
to the network instead of deriving keys from them. Although
this percentage may not be representative for all Android apps
(many of the tested apps here are sample apps), they do serve
as further conﬁrmation of the ﬁndings on insecure password
usage in other studies [43]. Finally, the doubly-circled nodes
in this graph correspond to the three common password sinks:
networks, ﬁles, or cryptographic libraries that use passwords to
derive keys. Furthermore, it can be noticed that two out of three
sinks (i.e., sending passwords to the network or storing them
in ﬁles) are insecure. These use patterns should be prevented,
because they only lead to more password exposure. One should
1918onClick()pw = pwUI.toString()4use(pw)1network(pw)file(pw)1141h = deriveKey(pw)31network(h)1decryptDB(h)181pwArr= pwUI.getChars()1use(pwArr)h = deriveKey(pwArr)111decryptDB(h)1verify(h)onClick()pwUI.clear()pwArr= pwUI.getChars()pwArr= {0}h = deriveKey(pwArr)network(h)file(h)decryptDB(h)verify(h)onClick()h = pwUI.deriveKey()network(h)file(h)decryptDB(h)verify(h)always use “key stretching” [32] to derive a strong key from
the password and perform authentication with the key instead.
Therefore, our design of KeyExporter speciﬁcally focuses
on preventing the possibility for passwords to be sent to the
network or stored in a ﬁle; passwords are not made available
to the application, which can only fetch cryptographic keys
derived from the passwords. Figure 4b shows the intended
usage of passwords enforced by KeyExporter: it always starts
by a key derivation, and contains passwords within the ﬁrst
three states (shown using blank circles); the rest of the states
do not contain any user passwords (shaded circles). Figure 4c
further abstracts the states that contain passwords into a
super state, which shows the ﬁnal design of KeyExporter.
In current apps, developers need to obtain passwords from
a widget, generate derived keys, and then manually clean up
passwords; but with KeyExporter, a developer can simply call
getKey() to obtain derived keys without ever accessing the
raw passwords. All passwords are automatically zeroed out by
KeyExporter.
KeyExporter Implementation. KeyExporter currently sup-
ports HMAC, PBKDF2, and scrypt as key derivation functions,
although it could be easily be extended with others. We
picked these functions because some of our test apps use
HMAC and PBKDF2, and Android’s own device authenti-
cation uses memory-hard functions (MHFs) such as scrypt.
In addition, we have also implemented support for the Se-
cure Remote Password (SRP) protocol [61], which runs a
password-authenticated key agreement (PAKE). Regardless of
which method a programmer uses, KeyExporter prevents the
spread of plaintext passwords, with API support for secure
alternatives.
Figure 5 uses code segments to demonstrate how an app
could use KeyExporter. Figure 5a is a simpliﬁed version of a
sample app, which uses HMAC-based authentication instead of
directly sending passwords; as such, it represents a more secure
practice than the other sample apps. However, we can see
that this app does not clean up passwords properly. Figure 5b
shows the code after integrating the app with KeyExporter.
In this version, the app no longer has direct access to the
password. Instead, she could invoke a function to derive an
HMAC based on the password for authentication. The init()
call also clears the passwords from the widget and from
memory. Figure 5c shows another example based on the SRP
API provided by KeyExporter, which uses a variant of Difﬁe-
Hellman key exchange. As we can see, KeyExporter can
achieve better security with more concise code.
VII. EVALUATION OF SECURETEXTVIEW AND
KEYEXPORTER
We now report results from our experimental evaluation
of SecureTextView and KeyExporter. We focus on three key
questions:
•
•
•
How effective can our solution ﬁx password retention?
How much code change does our solution require?
How much development effort does a ﬁx require?
OnLogin:
final String id = idUI.getText().toString();
final String pw = pwUI.getText().toString();
// generate HMAC
mac = Mac.getInstance("HmacSHA1");
key = new SecretKeySpec(pw.getBytes(), "HmacSHA1");
mac.init(key);
hash = mac.doFinal(serverRandom);
// send packet to server
sendResponse(id, hash);
(a) Original code for authentication using HMAC.
OnLogin:
final String id = idUI.getText().toString();
HMacKeyExporter auth = (HMacKeyExporter)
pwUI.getKeyExporter("HmacSHA1");
// generate HMAC
auth.init(); // cleanup happens here
auth.update(serverRandom);
// send packet to server
sendResponse(id, auth.getKey());
(b) Integration with KeyExporter using HMAC.
OnLogin:
final String id = idUI.getText().toString();
SRPKeyExporter auth =
(SRPKeyExporter) pwUI.getKeyExporter("SRP");
auth.init()
// cleanup happens here
// send ID, client public A to server
sendStep1Req(id, auth.getA());
...
// set received salt, server public B
auth.setStep1Response(s, B);
// send proof of session key to server
sendStep2Req(auth.getM());
(c) Integration with KeyExporter using SRP.
Fig. 5: Integration with KeyExporter is easy.
A. Methodology
As before, we have tested the effectiveness of our ﬁxes
for the Android framework (Problems #1 – #4) and for the
Android apps (Problems #5 – #7). For each app A, we
conducted two experiments:
•
•
Running the original app on a modiﬁed version of
Android that uses SecureTextView (written as A(cid:48)).
Running a modiﬁed version of the app that is inte-
grated with KeyExporter and SecureTextView (written
as A†).
Integration of KeyExporter with an existing app requires
code modiﬁcation to the app. In order to integrate with KeyEx-
porter, we needed to identify the entry point for authentication,
initialize KeyExporter with the desired cryptographic protocol,
and replace all password usages with the derived key. We’re
assuming that the relevant server-side code is already present,
but for many app authors, this would represent an additional
burden, likely far more work than making the necessary client-
10
Category
Basic
Cha./Resp.
OAuth
Standalone
System app
PAKE
Application
Sample 1
Sample 1(cid:48)
Sample 1†
Sample 3
Sample 3(cid:48)
Sample 3†
Yelp
Yelp(cid:48)
Yelp†
PasswdSafe
PasswdSafe(cid:48)
PasswdSafe†
SystemUI
SystemUI†
Sample 1srp
Description
Original
SecureTextView
STV + KeyExporter
Original
SecureTextView
STV + KeyExporter
Original
SecureTextView
STV + KeyExporter
Original
SecureTextView
STV + KeyExporter
Original
STV + KeyExporter
STV + KeyExporter
Login
25
14
0
21
11
0
3
2
N.A.
12
2
0