# Title: Util::Lookup: Exploiting Key Decoding in Cryptographic Libraries

## Authors
- Florian Sieck
- Sebastian Berndt
- Jan Wichelmann
- Thomas Eisenbarth

### Affiliations
- **University of Lübeck, Institute for IT Security, Germany**

## Abstract
Cryptographic library implementations have been scrutinized for secret-dependent execution behavior that can be exploited through microarchitectural side-channel attacks. To prevent unintended leakages, most libraries have adopted constant-time implementations of cryptographic primitives. Additionally, efforts have been made to certify libraries, such as Microsoft CNG and Botan, with a focus on leakage behavior.

In this work, we highlight a common oversight in these libraries: the presence of utility functions that handle and potentially leak confidential information. We analyze the exploitability of base64 decoding functions across several widely used cryptographic libraries. Base64 decoding is used when loading keys stored in PEM format. Our findings show that these functions can leak sufficient information even when executed in trusted execution environments. Specifically, we demonstrate that recent countermeasures against transient execution attacks, such as Load Value Injection (LVI), can ease the exploitability of observed faint leakages, allowing us to robustly infer RSA private key information from a single trace. We present a complete attack, including a broad library analysis, a high-resolution last level cache attack on SGX enclaves, and a fully parallelized implementation of the extend-and-prune approach for key recovery at moderate costs.

## CCS Concepts
- **Security and Privacy**: Cryptanalysis and other attacks; Side-channel analysis and countermeasures.

## Keywords
- Controlled-channel
- Constant-time
- Microarchitectural attacks
- RSA key recovery
- SGX
- Transient execution

## Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

## Conference Information
- **CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea**
- **© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.**
- **ACM ISBN 978-1-4503-8454-4/21/11...$15.00**
- **DOI: https://doi.org/10.1145/3460120.3484783**

## ACM Reference Format
Florian Sieck, Sebastian Berndt, Jan Wichelmann, and Thomas Eisenbarth. 2021. Util::Lookup: Exploiting Key Decoding in Cryptographic Libraries. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3460120.3484783

## 1. Introduction
The widespread adoption of cloud computing and virtual machines has made architectural and microarchitectural attacks exploiting shared resources a significant concern for security-critical applications. Over the past decade, these attacks have advanced, culminating in the discovery of transient execution bugs in modern processors. Cryptographic implementations are a popular target due to their critical and compact information, which is often used in highly optimized computations.

Automated analysis tools like CacheAudit, DATA, and Microwalk have facilitated the identification of exploitable code sections in cryptographic implementations, leading to numerous Common Vulnerabilities and Exposures (CVEs). Some libraries, such as Microsoft CNG and Botan, have been certified for secure implementation and design.

Despite these efforts, Intel's mitigations for transient execution bugs, particularly in highly protected environments like Intel Software Guard Extensions (SGX), have altered the efficacy of microarchitectural attacks. For instance, countermeasures to Foreshadow now prevent L1 Cache attacks on SGX, while enclave developers can mitigate Simultaneous Multithreading (SMT) attacks by ensuring operation on private cores.

### 1.1 Our Contribution
We demonstrate that despite rigorous analysis, microarchitectural attacks remain a threat. Our analysis focuses on utility functions, which are essential but often overlooked in cryptographic libraries. These functions, such as base64 decoding, can leak sensitive information. We show how such leakages can be exploited via a faint last level cache (LLC) leakage.

Specifically, we investigate RSA keys stored in the popular PEM format, which uses base64 encoding. The decoded information is processed in constant-time cryptographic implementations. The leakage from the decoding process is usually faint and difficult to exploit due to high noise. However, recent mitigations against Load Value Injection (LVI) in SGX enclaves enable us to sample the decoding with significantly reduced noise, allowing almost error-free leakage extraction.

Our contributions include:
- Fine-grained leakage analysis of base64 decoding functions in several common cryptographic libraries, including the certified Botan library.
- A sophisticated microarchitectural attack that extracts observed leakages from SGX enclaves with a single observation, leveraging Intel's microcode and countermeasures.
- An optimized RSA key recovery method with a highly scalable implementation, allowing key reconstruction from weak leakages using medium resources.

### 1.2 Responsible Disclosure
We informed the maintainers of all studied libraries about our findings in December 2020. The following CVEs and responses were received:
- **Botan**: CVE-2021-24115, fixed with version 2.17.3
- **GNU Nettle**: No response, not yet fixed
- **mbedTLS**: CVE-2021-24119, fixed with version 2.26.0
- **MS CryptoAPI**: Declared as not urgent
- **NSS**: CVE-2021-29992, fixed with version 3.70
- **OpenSSL**: No response, not yet fixed
- **RustSGX**: CVE-2021-24117, fix in progress
- **wolfSSL**: CVE-2021-24116, fixed with version 4.6.0

## 2. Background

### 2.1 Microarchitectural Attacks
Microarchitectural attacks exploit contention in CPU buffers and caches to leak secrets. These attacks manipulate buffer or cache content to provoke measurable side-channel information, such as timing differences.

#### 2.1.1 Cache Attacks
CPU caches, from core-specific L1 caches to shared L3 caches, are frequent targets. Techniques like Prime+Probe and Flush+Reload allow adversaries to measure timing differences and determine if victim code accessed certain cache lines. Prime+Probe involves priming a cache set with attacker values, waiting for the victim's code execution, and then probing the cache set. This technique is less precise and prone to noise compared to Flush+Reload but does not require shared memory.

#### 2.1.2 Vulnerability Detection
Manual inspection of high-level and assembly code for side-channel vulnerabilities is cumbersome and often incomplete. Automated tools like DATA and Microwalk use dynamic binary instrumentation and input fuzzing to find non-constant-time behavior. These tools record execution traces and identify deviations suggesting secret-dependent behavior. Other approaches, such as CacheAudit, apply static analysis to find cache side channels.

### 2.2 Intel SGX
Intel Software Guard Extensions (SGX) provides a hardware root of trust, enabling isolated environments called enclaves to perform confidential computations in untrusted operating systems. SGX supports remote attestation schemes to verify the integrity and security of applications. Memory management is handled by the OS, but SGX ensures the confidentiality and integrity of data in RAM through memory encryption and the Enclave Page Cache (EPC).

To counteract manipulations of address translation, SGX provides specific guarantees. Recent mitigations, such as those against Load Value Injection (LVI), have altered the landscape of microarchitectural attacks, making some previously infeasible attacks more viable.