from several functions. This is because several common tasks in
the kernel are often delegated to helper functions. Consequently
mapping = inode−>i_mappingpage−>mapping−>a_ops−>prepare_write()inode−>i_size = 0inode−>i_nlink−−ext2_rmdir(inode,dentry)ext2_unlink(inode,dentry)ext2_find_entry(inode,dentry,page)ext2_delete_entry(inode,page)ext2_get_page(inode)ext2_dec_count(inode)several idioms used by TAHOE contain code patterns drawn from
different functions. For instance, while inode->i size = 0 ap-
pears in ext2 rmdir, decrementing inode->i nlink is delegated
to ext2 dec count. Thus, it is important to search through the set
of idioms after code patterns are gathered from all the callees of
the function being analyzed.
Algorithm 4 scans the code of a function in a ﬂow-insensitive
fashion, i.e., it does not consider control-ﬂow while scanning the
statements of the function. This sufﬁces for kernel analysis be-
cause, as mentioned earlier, the analysis does not track the condi-
tions under which an operation is performed. Instead, it returns the
set of conceptual operations that may be performed by the kernel.
We use the occurrence of an idiom in the function body to deter-
mine if an operation is performed by the kernel, and this can be
achieved using a simple ﬂow-insensitive scan of the function body.
3.2.2 Idioms
Idioms are rules with conceptual operations on the left-hand-
side, and conjunctions of code-patterns on the right-hand-side. Each
conceptual operation OP can appear on the left-hand-side of several
rules. Figure 6(A) shows the grammar used to express idioms for
TAHOE; there are currently six kinds of code-patterns, which we
have found sufﬁcient to express idioms for most conceptual opera-
tions. Code-patterns are expressed in terms of the abstract-syntax-
tree (AST) of a variable, rather than variable names. Figure 6(B)
shows a few idioms, relevant to Figure 5.
OP :-Vn
Idiom :=
CodePat :=
AST :=
i=1 (CodePati | ¬CodePati)
SET AST | SET AST TO value
| READ AST | CALL AST
| INCR AST | DECR AST
(type->)∗ﬁeldname
(A) Idiom Grammar.
SET inode->i ctimeV
DECR inode->i nlinkV
SET inode->i size TO 0V
CALL address space ops->prepare write()
READ inode->i mapping
¬SET inode->i size TO 0
DIR WRITE :-
DIR SEARCH :-
FILE UNLINK :-
DIR RMDIR :-
(B) Examples of idioms used in the analysis of ext2 rmdir.
DECR inode->i nlink
Figure 6: Idiom grammar and examples of idioms.
Using Idioms: Idioms are used to determine which conceptual
operations are performed by each kernel function. After the set of
code-patterns that appears in a function f and its callees is gathered
in CodePatterns(f) (line (7) of Algorithm 3), SEARCH IDIOMS
searches through the set of idioms. If the code-patterns that ap-
pear on the right-hand-side of an idiom also appear in CodePat-
terns(f), then SEARCH IDIOMS adds the left-hand-side of the id-
iom to the set of conceptual operations performed by f. For in-
stance, because the value of CodePatterns(ext2 unlink) is {DECR
inode->unlink}, and this matches the third idiom in Figure 6(B),
FILE UNLINK is added to KernelSummary(ext2 unlink). Note
that because CodePatterns(ext2 rmdir) contains the pattern “SET
inode->i size TO 0”, it does not match the third idiom, and
FILE UNLINK /∈ KernelSummary(ext2 rmdir).
Methodology used to write idioms: We explain the methodol-
ogy to write idioms by considering two examples from Figure 6(B);
More examples of idioms can be found elsewhere [9].
1. DIR WRITE :- SET inode->i ctime ∧
CALL address space ops->prepare write(): Writing to
a directory usually involves a statement that adds new content
to the data structures that store directory content (achieved via
the call to prepare write()), followed by setting the ﬁeld
i ctime of the directory’s inode, indicating the change time.
2. DIR RMDIR :- SET inode->i size TO 0 ∧
DECR inode->i nlink: Removing a directory bar from a di-
rectory foo involves decrementing the ﬁeld i nlink, the link
count, of the inodes of both foo and bar, followed by setting
i size, the size of the inode of bar to 0.
Figure 7: Writing idioms.
Currently, writing idioms is an iterative, manual procedure. For
each conceptual operation OP, we used our knowledge of the ker-
nel to reason about the sequence of steps the kernel must take to
perform OP. Using this information, we extracted code-patterns, as
shown in the examples above. When we were unfamiliar with the
sequence of steps the kernel would take, we considered examples
of functions in the kernel which perform the conceptual operation,
and used these examples to formulate idioms.
Figure 7 illustrates the general methodology we used to write
idioms. The goal is to ﬁnd code-patterns that exactly cover the
set of functions that perform OP (depicted as a box). To do so,
we consider several code-patterns which approximate this set: Fig-
ure 7 shows four sets of functions, A, B, C and D, which contain
four distinct code patterns. We ﬁrst guessed code-patterns using
our knowledge of the kernel, following which we manually reﬁned
these patterns by combining more code patterns using conjunction,
or removing existing code patterns to reduce false positives and
false negatives. False positives denote functions which contain the
code-patterns guessed, but do not perform OP; we identiﬁed these
by ﬁrst obtaining the set of functions containing the code-patterns
(automatically, using Algorithm 4), and manually inspecting the
operations performed by each function in the set. False negatives
denote functions which perform OP, but do not contain any of the
code-patterns guessed. These are harder to identify; we used our
knowledge of the kernel to identify missing entries in the set of
functions covered by the code-patterns, and added more patterns,
as required.
TAHOE currently uses about 100 idioms, representing rules for
conceptual operations related to ﬁle systems and networking—it
took us about a week to write these idioms. While these idioms
work reasonably well (Section 4.1), we believe that it will take a
shorter amount of time for experienced kernel developers to for-
mulate idioms. Moreover, as we argue in Section 3.2.4, idioms are
reusable, and writing them is a one-time activity.
Expressive Power: As mentioned earlier, code-patterns in id-
ioms can be drawn from different functions. Thus, idioms can be
used in an interprocedural analysis, such as ANALYZE KERNEL,
to determine if a kernel function performs an operation. How-
ever, they cannot express temporal properties, which can be used to
enforce order between code patterns. For instance, “ext2 rmdir
checks that a directory is empty before removing it” is a tempo-
ral property that cannot be expressed using idioms that follow the
grammar in Figure 6(A). While temporal properties are strictly richer
than what we can express using the grammar in Figure 6(A), we
have been able to express idioms for most conceptual operations us-
ing the above grammar. We also note that an interprocedural anal-
ysis that checks for temporal properties is computationally expen-
sive, and signiﬁcant engineering tricks, such as those employed by
MOPS [3] and MC [4], will have to be employed for the analysis to
scale. On the other hand, Algorithm 3 works in time O(m + f × n),
where m is proportional to the size of the Linux kernel, f is the
number of functions in the kernel, and n denotes the number of id-
ioms to be checked, and is thus linear in the number of idioms to
be checked.
3.2.3 Precision of Kernel Analysis
Algorithm 3 and Algorithm 4 search each statement in the kernel
for code-patterns. Thus, the analysis is precise in the following
if the code-patterns on the right-hand-side of an idiom I
sense:
appear in a function f, then the conceptual operation on the left-
hand-side of I is added to KernelSummary(f). Consequently,
the precision of kernel analysis depends on the quality of idioms
used. As mentioned earlier, idioms can be reﬁned iteratively to
remove false positives and false negatives; each such reﬁnement
also improves the precision of kernel analysis.
3.2.4 Discussion
While at ﬁrst glance it may seem that TAHOE simply shifts the
burden of placing hooks to that of writing idioms for conceptual
operations, it is not the case, as we argue below:
1. Idiom writing only requires knowledge of the kernel. As we
demonstrated in Section 3.2.2, writing idioms only requires an
understanding of how the kernel performs the conceptual op-
eration.
In particular, kernel analysis is independent of hook
analysis, and writing idioms does not require understanding any
policy-speciﬁc code written in kernel modules such as LSM-
SELinux. This is in stark contrast with current practice, where
manual hook placement requires an understanding of both the
conceptual operations performed by each kernel function, as
well as the operations authorized by each hook.
2. Idiom writing is a one-time activity.
Idioms need to be writ-
ten only once for each version of the kernel. In addition, ker-
nel analysis itself is a one-time activity. The results of kernel
analysis can be combined with the results of hook analysis for
different MAC policies. We also conjecture that idioms will not
change much across different versions of the kernel, and hence
will only require incremental updates as the kernel evolves. The
reason for our belief is because the kernel usually performs con-
ceptual operations in a few “standard” ways. For instance, un-
linking an inode typically involves decrementing its link count
(n link), and this is standard across most versions of the ker-
nel. Unless the kernel is radically restructured, the set of idioms
will remain relatively stable.
3. Idiom reﬁnement can improve analysis quality. Finally, we be-
lieve that iteratively reﬁning idioms by identifying false posi-
tives and false negatives is a formal and systematic way to im-
prove the quality of kernel analysis. We are unaware of any sys-
tematic techniques for reﬁnement in manual hook placement.
3.3 Combining the Results of Hook and Ker-
nel Analysis
With the results of hook analysis and kernel analysis in hand,
TAHOE obtains the set of hooks that must guard each kernel func-
tion. Recall that the output of hook analysis is a set {hph
i k OPh
i i}
i }
for each hook h, and the output of kernel analysis is a set S = {OPk
for each kernel function k. Finding the set of hooks to guard k then
reduces to ﬁnding a cover for set S using the output of hook anal-
ysis. The predicates in the output of hook analysis help determine
the arguments that must be passed to the hook.
Instead of giving a formal description, we illustrate the algorithm
on our running example. Kernel analysis infers that KernelSum-
mary(ext2 rmdir) is {DIR RMDIR, DIR WRITE, DIR SEARCH}.
Analysis of hooks infers that Summary(selinux inode rmdir)
is {htrue k DIR RMDIRi, htrue k DIR SEARCHi}, and that Sum-
mary(selinux inode permission) is as shown in Figure 4(B)
(only the relevant portions of the summaries are shown). Because
the operations authorized by these two hooks cover the set Ker-
nelSummary(ext2 rmdir), these hooks are chosen to authorize
ext2 rmdir. The hook selinux inode rmdir unconditionally
checks that the operations DIR RMDIR and DIR SEARCH are au-
thorized, and can hence be called with the relevant variables in
scope at locations where ext2 rmdir is called, for instance within
vfs rmdir. Because the hook selinux inode permission checks
that the operation DIR WRITE is authorized when it is invoked
such that (mask 6= 0) ∧ (inode->i mode & S IFMT == S IFDIR) ∧
(mask & MAY WRITE) is true, it is invoked with mask = MAY WRITE.
As shown above, the problem of ﬁnding the set of hooks to guard
each kernel function reduces to ﬁnd a set cover for the set of op-
erations performed by the kernel function. This is a well-known
NP-complete problem [6]. We currently employ a simple greedy
heuristic to ﬁnd a set cover, based upon the number of operations
in common to each hook and the kernel function. However, the
number of hooks applicable for each kernel function is fortunately
quite small, and if necessary brute-force search can be employed
to ﬁnd all possible set covers. The example above also demon-
strates how predicates obtained via hook analysis determine how
each hook must be called. Formally, a satisfying assignment to the
predicate determines the arguments that the hook must be called
with. While we manually obtain satisfying assignments in the cur-
rent implementation of TAHOE, this process can easily be auto-
mated by querying a simple theorem-prover, such as Simplify [20],
for satisfying assignments to predicates.
We use the term authorization graph to refer to the relation-
ship obtained using the analysis discussed above, because it has the
structure of an undirected, bipartite graph. The authorization rela-
tionship discovered forms the edges of this bipartite graph, whose
nodes correspond to hooks and kernel functions.
Algorithm : FIND CONTROLLED KERNEL FUNCTIONS
Input
: (i) CG: Call-graph of Linux kernel (ii) AG: Authorization
Graph
Output
: The set of controlled kernel functions
foreach (f ∈ CG) do
foreach (r ∈ roots of CG) do
// hooksAG(f ) is set of hooks (in AG) that protect f .
if there is a path from r to f in CG, and hooksAG(f ) = hooksAG(r)
then
if hooksAG(f ) 6= hooksAG(c) for at least one child c of f then
CKF := CKF ∪ {f};
return CKF
Algorithm 5: Finding controlled kernel functions.
1
2
3
4
5
6
7
While the authorization graph relates each kernel function to the
set of hooks that must protect it, in practice, hooks are placed only
to protect a small set of kernel functions, which we call controlled
kernel functions. The idea is that protecting these functions protects
all security sensitive operations performed by the kernel. TAHOE
uses the call-graph of the kernel and the authorization graph to ﬁnd
controlled kernel functions. Algorithm 5 describes the heuristic
currently employed to ﬁnd controlled kernel functions.
The basic intuition behind Algorithm 5 is to place hooks as close
as possible to the functions that actually perform security sensitive
operations. For instance, while our analysis infers that sys rmdir
does directory removal (formally, KernelSummary(sys rmdir)