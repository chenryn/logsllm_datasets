### 代码示例优化

```java
// 创建并设置优先级为最高
Thread er = new Thread(HG, ER, "TimerResolver");
er.setPriority(Thread.MAX_PRIORITY);

// 启动线程
dr.start();
er.start();

// 创建并启动管理器和工作线程
new Thread(DG, new Manager(jp, 1, 100), "manager").start();
new Thread(DG, new Worker(jp, 500), "worker").start();
```

### 管理器-工作者示例

在收集信息的基础上，程序员可以通过使用各种定制的管理器和工作者来获取更多信息。例如，程序员可以让管理器分配一些任务，停止管理器，然后让工作者执行任务。程序员还可以尝试不同大小的任务池，例如，他们可以尝试一个大小为1的任务池，然后是一个大小为2的任务池，以此类推。

最终，程序员会发现如果任务池已满，则无法再分配更多任务，无论是否从任务池中取走了一些任务。识别出这个错误后，程序员可以调整管理器的行为以防止死锁的发生。具体来说，程序员可以在图3中的第23行添加以下代码：

```java
while (jp.c() == (jp.s() - 1)) {
    Thread.yield();
}
```

这表示任务池最多容纳 `size-1` 个任务。

### 死锁检测与处理

即使没有死锁异常，经验丰富的程序员也可能找到错误，但这会比较困难。例如，如果没有死锁异常的帮助，很难知道当任务池大小为1时，管理器会从工作者那里收到通知。了解这一点对于定位任务能否被分配的条件非常重要。

该技术的优点在于程序员可以通过检查异常对象来了解死锁状态，并在程序死锁后采取进一步措施收集更多信息。这种技术优势也有助于程序员识别误报。下一小节将通过一个例子展示如何处理误报。

#### 处理误报

在执行图3中的代码时，可能会出现管理器（或工作者）运行过慢的情况，导致工作者（或管理器）等待时间过长，从而触发计时器超时并抛出 `DeadEnd` 异常。然而，这样的 `DeadEnd` 异常实际上是一个误报。因此，作为对误报的反应，安装在 `TimerResolver` 上的全局死锁处理器（第47-53行）可以简单地将超时值翻倍，前提是超时值还没有非常大。第48-53行展示了这一反应的实现。

值得注意的是，图3中的第45行 `"try { Thread.currentThread().join(t); }"` 是支持基于计时器的异常的关键。`t` 的值是传递给死锁检测引擎的 `TIMEOUT` 参数的实际参数。

在一个更复杂的系统中，`t` 的值可以通过 `DeadEnd` 来确定。具体来说，为了在误报数量和死锁检测延迟之间取得良好的平衡，当前 `t` 的值可以设置为 `DeadEnd` 中 `AV INTERVALS` 字段中某些元素的最大值。这些元素对应的线程由 `DeadEnd` 报告，但从程序员的角度来看，它们在当前时间点上不太可能处于死锁状态。

### 实现：编程努力和运行时性能

我在Latte 0.9.1 JVM中构建了一个初始实现，以支持仅涉及通知和锁资源类型的死锁异常，并使用此实现来运行和测试第4节中的示例。Latte是一个包含有效JIT编译器、按需异常处理机制和轻量级监视器实现的JVM。目前，Latte只能在SPARC平台上运行，并且它有自己的线程包实现在JVM内部。编程努力和运行时性能是任何实现的重要属性。下面我将探讨这两个属性。

#### 编程努力

为了支持死锁异常，只对Latte JVM进行了少量修改：我只修改了5个文件，并添加/修改了不到1000行代码。由于只需要稍微修改线程包和异常处理模块就可以支持死锁异常，因此这些技术可以很容易地适应其他使用本地线程的JVM。

#### 运行时性能

由于合理的程序中很少发生死锁，因此为实际程序创建和抛出死锁异常所花费的总时间通常很小。在程序执行期间，支持死锁异常的主要性能开销是实现第2.3小节提出的方法的死锁检测引擎。当前实现假设所有 `DELTA` 值为0。未来实现将支持正的 `DELTA` 值。

为了方便起见，我用死锁异常来指代相应的死锁。`DeadKnot`（`DeadCycle` 为其特例）由结检测解决方案检测，`DeadEnd` 由基于计时器的解决方案检测，`DeadLock` 由基于阻塞组的解决方案检测。死锁检测的顺序如下：`DeadCycle` 检测先于 `DeadKnot` 检测，后者又先于 `DeadLock` 检测；`DeadEnd` 检测由计时器触发。下面我首先讨论检测四种类型死锁的最坏情况成本，然后检查触发其检测的频率。在讨论中，`n` 表示涉及的线程数，锁和通知是唯一的资源类型。

- **DeadEnd**：检测 `DeadEnd` 需要 O(n) 时间：需要检查所有阻塞线程是否等待了过长时间。
- **DeadCycle**：检测 `DeadCycle` 需要 O(n) 时间：一个线程一次最多有一个未决的锁请求，一个锁一次最多由一个线程持有。
- **DeadKnot**：由于所有 `DELTA` 值为0，检测 `DeadKnot` 需要 O(n) 时间：`DELTA` 为0使得依赖图中的任何节点最多只有一个出边，因此结中的所有节点总是位于一个循环中。
- **DeadLock**：检测 `DeadLock` 只需要一个小常数时间：唯一操作是检查组中当前存活线程的数量是否等于该组中阻塞线程的数量。

触发死锁检测的频率：
- **DeadEnd**：只有计时器到期才会触发 `DeadEnd` 异常检测。计时器的超时值是一个可调参数，通常较大，因此计时器到期不常见。
- **DeadCycle**：只有争用锁请求（即请求已被其他线程持有的锁）才会触发 `DeadCycle` 检测。[7] 声称，在经过良好调优的程序中，锁争用很少见，因为锁争用通常是由于“多个线程持有全局锁的时间过长或过于频繁”。[7] 进一步报告说，在运行SPECjvm98基准测试套件中唯一的多线程程序mtrt时，715244次锁请求中有11次是争用请求。
- **DeadKnot**：由于所有 `DELTA` 值为0，只有争用锁请求才会触发 `DeadKnot` 检测。
- **DeadLock**：争用锁请求、`wait()` 调用和线程终止都会触发 `DeadLock` 检测。由于使用多个线程是为了最大化性能，频繁的 `wait()` 操作会损害性能，因此可以合理假设 `wait()` 不会频繁执行。线程终止在某些程序中可能相对频繁。

由于争用锁请求不常见，`DeadCycle` 和 `DeadKnot` 涉及的线程数通常较少。尽管线程终止可能相对频繁，但 `DeadLock` 检测的成本是一个小常数。因此，对于合理的实际程序，死锁检测的总体成本较小。

系统中还有一些其他开销。具体来说，需要维护用于死锁检测的时间变化数据结构，并保留生成异常所需的信息。释放锁、`wait()` 调用、`notify()`/`notifyAll()`/`interrupt()` 调用、争用锁请求、启动线程和杀死线程都与此类开销相关。这些开销很小：只需要一个小常数时间。

虽然支持正的 `DELTA` 值很容易，但当前实现不支持。正的 `DELTA` 值将 `DeadKnot` 检测的成本从 O(n) 改变为 O(n^2)，并增加触发 `DeadKnot` 检测的频率。但是，给定适当的 `DELTA` 值，合理程序中的 `n` 很可能较小，因此 `DeadKnot` 检测的 O(n^2) 成本中的 `n` 较小。

因此，只需少量的实现努力即可实现良好的运行时性能，以支持仅涉及通知和锁资源类型的死锁异常。

### 相关工作

死锁检测和恢复已经研究了很长时间。由于篇幅限制，我只讨论与多线程Java程序的死锁解决密切相关的部分工作。

在大多数操作系统教科书中，例如 [8]，循环等待是死锁的必要条件。在 [4] 中，循环等待不是必要的，“死锁状态是没有输出转换的非终结全局状态。”[3] 对C程序中的死锁进行了描述：“当多线程程序因某个线程等待永远不会发生的条件而无法继续进行时，就会发生死锁。”我的实用死锁定义侧重于单个线程的运行时行为，并基于用户可定义的资源，因此具有灵活和可扩展的范围，并促进了基于计时器的解决方案的实现。

一些研究人员为Java程序构建了死锁检测工具，例如 JCAT [5]、Jlint [1] 和 Rivet [2]。虽然这些工具旨在通过调试使程序变得更好，但我的目标是利用不良代码。此外，这些工具无法处理使用某些Java功能的大规模Java程序，例如动态类加载。

Sun的J2SE 1.4.1平台 [6]（大约在2002年9月发布）在其Java HotSpot虚拟机中集成了死锁检测工具。该工具只能报告涉及锁循环等待的死锁。我的方法可以报告涉及各种资源类型的多种死锁类型。此外，该工具不提供运行时死锁恢复的手段，而我的方法允许程序员使用异常处理器来解决死锁。

### 结论与未来工作

本文介绍了一种通过异常解决死锁的方法，并表明该方法在开发可能死锁的可靠Java应用程序方面是实用且有效的。未来的工作包括但不限于：1）支持更多的资源类型，例如内存和RMI消息；2）使用JIT编译器提高检测精度，减少检测延迟，并半自动化恢复代码生成。

### 参考文献

[1] C. Artho and A. Biere. Applying Static Analysis to Large-Scale, Multi-threaded Java Programs. In: D. Grant (Ed.), Proceedings of the 13th Australian Software Engineering Conference (ASWEC 2001), pp. 68 - 75, Canberra, Australia, August 2001. IEEE Computer Society, PR 01254.

[2] Derek Bruening. Systematic Testing of Multithreaded Java Programs. Master of Engineering Thesis, Massachusetts Institute of Technology, 1999.

[3] Sung-Eun Choi and E Christopher Lewis. A Study of Common Pitfalls in Simple Multi-Threaded Programs. In Proceedings of the Thirty-first ACM SIGCSE Technical Symposium on Computer Science Education, March 2000.

[4] James C. Corbett. Evaluating Deadlock Detection Methods for Concurrent Software. IEEE Transactions on Software Engineering, 22(3): 161-180, 1996.

[5] C. Demartini, R. Iosif, and R. Sisto. A Deadlock Detection Tool For Concurrent Java Programs. Software: Practice and Experience, 29(7): 577-603, 1999.

[6] http://java.sun.com/j2se/1.4.1/changes.html.

[7] Sheng Liang and Deepa Viswanathan. Comprehensive Profiling Support in the Java Virtual Machine. In 5th USENIX Conference on Object-Oriented Technologies and Systems (COOTS '99), pages 229-240, San Diego, CA, May 3-7, 1999.

[8] William Stallings. Operating Systems: Internals and Design Principles (4th Edition). ISBN: 0130319996, published by Prentice Hall 2001.

[9] Allan Vermeulen. Java Deadlock. Dr. Dobbs Journal, September 1997.

[10] Byung-Sun Yang, Soo-Mook Moon, Seongbae Park, Jun-pyo Lee, SeungIl Lee, Jinpyo Park, Yoo C. Chung, Suhyun Kim, Kemal Ebcioglu, and Erik Altman. LaTTe: A Java VM Just-in-Time Compiler with Fast and Efficient Register Allocation. 1999 International Conference on Parallel Architectures and Compilation Techniques (PACT99), New Port Beach, California, October 1999.

[11] Fancong Zeng. Exploiting Runtime Exceptions and Static Analyses to Detect Deadlock in Multithreaded Java Programs. PhD Qualifying Exam presentation, http://www.dcis.rutgers.edu/cs/general/colloquia, Rutgers University, August 6, 2002.