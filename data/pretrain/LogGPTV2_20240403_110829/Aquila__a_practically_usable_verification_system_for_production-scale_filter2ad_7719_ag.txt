[45] Sivaraman, A., Cheung, A., Budiu, M., Kim, C., Alizadeh, M., Balakrishnan,
H., Varghese, G., McKeown, N., and Licking, S. Packet transactions: High-level
programming for line-rate switches. In ACM SIGCOMM (SIGCOMM) (2016).
programs with ùúáp4. In ACM SIGCOMM (SIGCOMM) (2020).
[47] Steffen, S., Gehr, T., Tsankov, P., Vanbever, L., and Vechev, M. Probabilistic
verification of network configurations. In ACM SIGCOMM (SIGCOMM) (2020).
[48] Stoenescu, R., Dumitrescu, D., Popovici, M., Negreanu, L., and Raiciu, C.
Debugging P4 programs with Vera. In ACM SIGCOMM (SIGCOMM) (2018).
[49] Stoenescu, R., Popovici, M., Negreanu, L., and Raiciu, C. Symnet: Scalable
symbolic execution for modern networks. In ACM SIGCOMM (SIGCOMM) (2016).
[50] Tian, B., Zhang, X., Zhai, E., Liu, H. H., Ye, Q., Wang, C., Wu, X., Ji, Z., Sang,
Y., Zhang, M., Yu, D., Tian, C., Zheng, H., and Zhao, B. Y. Safely and automat-
ically updating in-network ACL configurations with intent language. In ACM
SIGCOMM (SIGCOMM) (2019).
[51] Velner, Y., Alpernas, K., Panda, A., Rabinovich, A., Sagiv, M., Shenker, S.,
and Shoham, S. Some complexity results for stateful network verification. In
22nd International Conference on Tools and Algorithms for the Construction and
Analysis of Systems (TACAS) (2016).
[52] Wang, A., Jia, L., Zhou, W., Ren, Y., Loo, B. T., Rexford, J., Nigam, V., Scedrov,
A., and Talcott, C. L. FSR: Formal analysis and implementation toolkit for
safe interdomain routing. IEEE/ACM Transactions on Network (ToN) 20, 6 (2012),
1814‚Äì1827.
[53] Wong, W. E., Gao, R., Li, Y., Abreu, R., and Wotawa, F. A survey on software
fault localization. IEEE Trans. Software Eng. 42, 8 (2016), 707‚Äì740.
SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
Tian et al.
[54] Wu, D., Chen, A., Ng, T. S. E., Wang, G., and Wang, H. Accelerated service
In 18th ACM Workshop on Hot Topics in
chaining on a single switch ASIC.
Networks (HotNets) (2019).
[55] Ye, F., Yu, D., Zhai, E., Liu, H. H., Tian, B., Ye, Q., Wang, C., Wu, X., Guo, T.,
Jin, C., She, D., Ma, Q., Cheng, B., Xu, H., Zhang, M., Wang, Z., and Fonseca,
R. Accuracy, scalability, coverage - A practical configuration verifier on a global
WAN. In ACM SIGCOMM (SIGCOMM) (2020).
[56] Zhai, E., Chen, A., Piskac, R., Balakrishnan, M., Tian, B., Song, B., and Zhang,
H. Check before you change: Preventing correlated failures in service updates.
In 17th USENIX Symposium on Networked Systems Design and Implementation
(NSDI) (2020).
Appendices are supporting material that has not been peer-reviewed.
APPENDIX
A HYPER-CONVERGED DATA PLANE
EXAMPLE
In Figure 2, we showed an example of our hyper-converged data
plane that contains four different network functions. Different from
software-based network functions, the hardware implementation is
constrained by the hardware limitation. First of all, the switch uses
a pipeline architecture, the packet can only be processed in one
direction. This limits the total length of the installed program. Sec-
ondly, one switch have multiple pipelines, there are four pipelines
in Figure 2. To fit all programs in the switch, we have to program
each pipeline individually. Thirdly, due to the pipeline architecture,
there are only two ways to redirect the packets: (1) the traffic man-
ager connecting the ingress and egress of all pipelines and (2) the
internal loopback that sends the packet from one egress pipeline
to its ingress. As a result, the engineers have to carefully allocate
the program in each pipeline to make sure the program can fit into
the switch without sacrificing performance. For example, given
that the packet has to go through the switch pipeline first, we
have to allocate the first half of the load balancer program to the
egress pipeline and second half on the ingress pipeline. Because
we have no way to force one packet traverse two ingress pipelines
sequentially without touching one egress pipeline. If we install the
first half load balancer program in the egress pipeline, the packet
has to be recirculated once more, which has additional processing
throughput overhead.
In deployment, we rely on the port loopback configuration and
table entries to allow different packets traverse different paths.
For example, in Figure 2, the ingress of switch checks whether
the packet should go through the load balancer and sends it to
the corresponding egress pipeline. The port loopback function is
enabled to fit the complex load balancer program. The switch
program can also redirect the packet to the scheduler and firewall
program based on the table entry installed by the engineers.
Figure 12: TCP options parsing graph
the TCP option header has four loops, shown in Figure 12. Naively,
we can unroll the loops into a DAG because the packet length has
an upper bound, but this method introduces too many branches
and causes the state explosion problem.
Instead, we have three observations: for one header whose pars-
ing graph has loops, (1) the loops form a strongly connected compo-
nent (SCC). For example in Figure 12, the four loops form an SCC. (2)
The SCC has only one input transition. For example in Figure 12, the
only input transition is from state tcp to state next_option. We name
the transition‚Äôs end state the root state. So the next_option state
is the root state. (3) Each loop has one transition to the root state,
in Figure 12, all four loops have one transition to the next_option
state.
Based on the above observations, we propose the following al-
gorithm to encode the loops into one state. (1) In the SCC, remove
all the transitions to the root state, then the SCC is simplified into
a DAG. (2) Use sequential encoding to encode the DAG. (3) En-
close the encoded expression with a while loop, monitoring the
root state‚Äôs label. (4) Create the outgoing transitions of the encoded
state based on the outgoing transitions of the SCC.
For example, in Figure 12, there is one SCC with four loops
visiting states option_nop, option_ss, option_s, and option_sack re-
spectively. The next_option state is the root state. In the first step,
the four transitions to the root state is removed. Secondly, the
six states in the SCC are encoded into the right half of Figure 13.
Next, the encoded statement is enclosed by a while loop monitoring
variable Next_option. Finally, the only outgoing state option_end
B VERIFICATION
B.1 Sequential Encoding with Loops
The sequential encoding algorithm introduced in ¬ß4.1 relies on an
assumption that the state machine‚Äôs dependency graph is a DAG,
because it is designed in principle based on topological sorting [6].
However, loops may exist in the dependency graph. For example,
some headers (e.g., MPLS and VLAN) may contain header stacks
and require a transition to itself. Other headers may formulate a
complicated dependency graphs with multiple loops‚Äîfor example,
Figure 13: Merged state of TCP options
acceptethipv4tcpnext_optionnext_option_2option_endoption_sackoption_ssoption_soption_noppadding$Next_option = true;while ($Next_option) {  $Option_end = false;  sequential_encoder();}// states outside the loopif ($Option_end == true)  ... next_optionnext_option_2option_nopoption_ssoption_sackoption_sSIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
Each ABV has a fixed D field indicating if the current entry is the
default entry, and a fixed LAID field representing the local action ID.
Then the values of action parameters are appended, and a padding
field is added to align all ABVs of the table.
Aquila calculates a constant ABV value for each table entry. With
ABV, Aquila can represent table matching as:
// Without ABV: Thousands of branches and inlining
if (match_0) { accept(); }
else if(match_1) { deny(0); }
else if(match_2) { accept(); }
else if(match_3) { deny(1); }
else if(match_4) { redirect(4); }
... // omit 1k else-if statements
else { accept(); }
// With ABV: Several branches and inlining
abv = ite(match_0, abv_0,
ite(match_1, abv_1,
ite(..., // omit 1k nested ite operators
abv_default)));
if(abv[7:1] == 0) { accept(); }
else if(abv[7:1] == 1) { deny(abv[15:8]); }
else { redirect(abv[23:8]); }
Aquila uses ABV to prevent any action from being inlined more
than once. Note that the final expression size grows quadratically as
the number of branches growing [14]. Aquila in addition connects
ABVs by nested ite operators, so that branches can be represented
in an indirect way, and finally, expression size explosion is avoided.
Recall that we further provide an optimized ABV encoding method
in Section 4.2.
Another use of ABV is to encode match-related conditions. Aquila
uses the D field to encode the if-statement such as if(acl.apply().hit){..}
or if(acl.apply().miss){..}, and uses the LAID field to encode the
switch-statement such as switch(acl.apply().action_run){..}.
B.4 More Features
This section details the data structure and new feature encoding
and optimization mentioned in ¬ß4.3.
Inter-pipeline packet passing. Similar to the input packet encod-
ing, the inter-pipeline packet passing is encoded as a sequence of
headers and their values. There are two differences: (1) the header or-
der is generated by the deparser of the previous pipeline rather than
given by the engineer: each emit statement pushes corresponding
headers into the header sequence if they are valid; (2) the unparsed
header in the previous pipeline (e.g., when its parser consumes up
to layer 3, leaving a packet‚Äôs tcp header unparsed) is merged with
the reassembled header, since the next pipeline may parse deeper
than the previous one. The output packet should be encoded as:
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
pkt.$order := ‚ü®eth ipv4 . . . ‚ü©
deparsed headers
+ unparsed headers
Pipeline behaviors encoding. Pipeline behaviors include mirror-
ing, resubmission, recirculation, etc. These behaviors allow packets
to traverse through the pipelines multiple times, which easily results
in the state explosion. Due to the aforementioned encoding, Aquila
can stitch multiple pipelines together, making GCL‚Äôs complexity
grow linearly.
Hash algorithm. Hash algorithm is widely used in data plane pro-
grams such as ECMP, bloom filter, etc. The non-linear relationship
introduced by hash between the input and output slows down the
Figure 14: The lookahead operation in TCP options
is appended to the tail of the merged state. The encoded result is
shown in Figure 13.
B.2 Lookahead
Traditionally, the transition from the current parsing state to the
next state depends on the value of the parsed field. For example, in
Figure 8, the transitions from Eth to IPv4 and IPv6 depend on the
value of eth.type, which has already been extracted into the eth
header. However, the lookahead operation allows the programmer
to first check the unparsed bits and then decide which header these
bits belong to. For example, in Figure 12, the transition from state
next_option_2 to the next five states depends on the first 8 unparsed
bits of the packet, like the left part of Figure 14.
In ¬ß4.2, we have introduced the key-value based packet encoding
in parsers and deparsers. While it reduces the verification complex-
ity, it also makes lookahead no longer trivial: constraints about the
bits looked ahead in previous states should be considered.
Aquila solves this problem by introducing a placeholder with
unassigned ‚Äúhavoc‚Äù value, like the right part of Figure 14. First, we
use the placeholder tcp$s0e7 to represent the first 8 bits looked
ahead. Next, encode all transitions through the placeholder. And
finally, encode all following states sequentially. In each following
state, an ‚Äúassume‚Äù statement is added to guarantee that the bits
looked ahead before (i.e., the placeholder) is equal to the bits ex-
tracted here.
For more complex scenarios where a state can be transited from
multiple states via individual lookaheads, Aquila introduces a vari-
able recording the previous state, then distinguishes these place-
holders via the variable and then generates constraints accordingly.
B.3 Action BitVector (ABV)
We use the following ACL table as an example to introduce the
format of ABV:
action accept() { ... }
action deny(bit reason) { ... }
action redirect(bit port) { ... }
table ACL {
key = { ... }
actions = { accept; deny; redirect; }
default_action = accept;
}
The ABVs of above three actions are represented as:
0.1.............8...............16..............24
+++++++++++++++++++++++++++++++++++++++++++++++++
|D|...LAID=0....|............PADDING............| accept
+++++++++++++++++++++++++++++++++++++++++++++++++
|D|...LAID=1....|....REASON.....|....PADDING....| deny
+++++++++++++++++++++++++++++++++++++++++++++++++
|D|...LAID=2....|.............PORT..............| redirect
+++++++++++++++++++++++++++++++++++++++++++++++++
state next_option_2 {  transition select(     pkt.lookahead>())  ){    0: option_end;    1: option_nop;    2: option_ss;    3: option_s;    4: option_sack;  }} tmp := tcp$s0e7;if (tmp == end.kind)  $option_end := true;if (tmp == nop.kind)  $option_nop := true;...if ($option_end == true){  Assume(tcp$s0e7 == end.kind);  end.$valid := 1;}...SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
Tian et al.
ipv4.$valid ‚áí g == ipv4.ttl,
¬¨ipv4.$valid ‚áí g == invalid,
where g equals
ite(@ipv4.$valid, @ipv4.ttl - 1, invalid).
verification performance. Aquila solves this issue by removing this
relationship and assuming the output as an independent variable,
whose value is ‚Äúhavoc‚Äù and bounded by the range of the hash algo-
rithm. This assumption can introduce false positives in rare cases.
However, we find it never happened in practice, because our engi-
neers rarely care about the concrete hash value by simply assuming
that it is evenly distributed.
Stateful memories. Stateful memories such as registers, meters,
and counters are organized as arrays by P4. However, arrays can
make verification condition undecidable. Thanks to the inherent
constraints of staged-based pipelines, we can safely treat an array
as a normal field and ignore the index. Unless the initial values of
stateful memories are specified, Aquila leaves them unassigned and
considers all kinds of possibilities.
Field groups and quantifiers. Field groups are supported by LPI
to describe similar properties in batch over a group of fields, e.g., the
TCP 5-tuple. Two quantifiers, i.e., forall and exists, can be applied
to either a fields group defined in LPI or a header defined in P4 code.
Aquila translates quantifiers over finite sets into propositional logic
to reduce the complexity.
C VALIDATOR IMPLEMENTATION
Building the semantic translator for our validator is non-trivial in
reality, since alternative representation, i.e., ùëã(ùëÉ), may present a
totally different semantics from Aquila‚Äôs GCL representation, i.e.,
ùê¥(ùëÉ). Based on our implementation experience, the majority of
these semantic difference is caused by dynamic values, e.g., header
validity and table entries, which are decided and changed in runtime
rather than re-deployment stage. We use header validity ambiguity
as an example to explain this implementation challenge.
Because the header validity semantics are hard to translate, differ-
ent representations handle their outputs in quite different ways. For
example, Aquila explicitly uses a symbolic a boolean variable, e.g.,
$valid, to denote whether a header is valid; alternatively, Gaunt-
let [43] embeds the validity in the header‚Äôs field value directly
We use an example below to illustrate different approaches to
represent header validity. Note that we focus on the output state
when ipv4 is not valid.
// P4 program
if (ipv4.isValid()) {
ipv4.ttl = ipv4.ttl - 1;
}
// Gauntlet representation
ipv4.ttl == invalid;
// Aquila representation
ipv4.ttl == @ipv4.ttl;
ipv4.$valid == 0;
Given a P4 program, if we only focus on the case that ipv4 is not
valid, as shown in the example above, Gauntlet represents the
case as invalid, and Aquila models ipv4.ttl with ipv4.$valid==0
to indicate that all fields in ipv4 should be ignored.
To match the two semantic representations of the final state, we
distinguish whether a header is valid or not. If it is valid, we require
that the field computed by Gauntlet and Aquila must be identical
to each other. Otherwise, the value computed by Gauntlet must
be invalid and the $valid flag in Aquila must be set to 0. We thus
match it with the Aquila semantics as the following post-condition: