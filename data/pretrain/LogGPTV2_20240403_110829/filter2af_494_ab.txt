Information`外的随机子文件夹。恶意软件会创建一个伪随机名的子文件夹，然后在文件夹中找到`.exe`或`.dll`文件，找到的文件名会永固保存恶意软件的可执行文件。如果没有找到`.exe`或`.dll`文件，恶意软件会递归地搜索内部子文件夹中的其他文件；如果都没有找到，恶意软件就会生成下面的名字：
图13: 文件名生成算法
恶意软件创建子文件夹来保存可执行文件。子文件名的生成使用的是下面的算法：
图14: 子文件名生成算法
因此，恶意软件的目标路径就是这样的：
    C:\Program Files\Internet Explorer\v6.8.3.6\uDkxuDgJ.exe
如果没有找到`.exe`或`.dll`文件，文件名就是这样的：
    C:\Program Files\Internet Explorer\v6.8.3.6\iexplore.exe
如果在`Program Files`目录中没有找到合适的子文件夹，恶意软件就会在`Program Files
``%APPDATA%``%LocalAppData%`中创建一个以8位随机字母命名的文件夹，然后用前面提到的算法来生成内部子文件夹名和`.exe`文件名。
对于保存的文件，会设置与`ntdll.dll`相同值的新时间戳。  
此外，恶意软件还会再选择的目录中创建一个子文件夹，文件夹名与系统目录序列号有关：
图15: 生成二级子文件夹名
生成的文件夹名是这样的：
    C:\Program Files\Internet Explorer\2.0.41885\
恶意软件还会在`%TEMP%`文件夹中创建子文件夹，并保存一个副本。子文件夹和文件名的生成如下:
图16: 恶意软件的副本生成路径
文件夹和文件的名与硬编码的值有关，所以路径与每个受感染的机器是一样的：
    %TEMP%\{D2309EFC-AB81-74D2-4D23-1674D2309EFC}\ROPYRmXM.exe
创建的文件和文件夹都使用`EncryptFile`API函数进行加密。
恶意软件会创建两个定时任务：
  * 运行第一个副本
  * 每2分钟运行exe文件
图17: 开启恶意软件的定时任务
定时任务名是用系统的函数生成的，用于生成mutex和event的名：
图18: 生成的任务名
因此定时任务名和受害者机器名是一样的：
    {09EFC5AB-D230-AB81-74D2-4D2309EFC5AB}
    {D2309EFC-AB81-74D2-4D23-1674D2309EFC}
## 恶意软件配置
恶意软件配置中的数据有：
  * 配置AES-256密钥：用于解密配置
  * RSA公钥：通过检查数字签名识别真实性
  * 通信AES-256密钥：用于加密C&C STAGE-1服务器的通信
  * C&C STAGE-0服务器地址
配置以加密格式保存，配置区块的前32字节是AES -256密钥，用于解密配置。APLib用于解压缩：
图19: 解密、提取配置区块
解密后就可以提取配置中的数据：
图20: 解密的恶意软件配置
每个配置域都预先加入了2字节的长度。比如第一个域（AES -256密钥）的长度是0x20。
配置含有下面的区块：
## 网络与通信
### STAGE-0 C&C
恶意软件用HTTP协议连接STAGE-0 C&C服务器。HTTP请求的URL是从配置中获取的：  
恶意软件会创建一个从20个随机字母中进行字符串查询的HTTP GET，HTTP请求的`User-Agent`参数硬编码在样本中。请求格式如下：
    GET /vnnf4pffztd356ey?fafgxybetmnqvmtifcle HTTP/1.1
    User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
    Host: 46.161.40.50
    Cache-Control: no-cache
服务器响应中含有命令和Base64编码的服务器数字证书：
    HTTP/1.1 200 OK
    Server: nginx/1.6.2
    Date: Thu, 07 Jun 2018 02:54:59 GMT
    Content-Type: text/plain; charset=utf-8
    Transfer-Encoding: chunked
    Connection: keep-alive
    8
    WAIT 60
    b2
    CERT 7PYB0XUnrvomid0DDnlFchiogTULgdmyBz6Rro3hfyyRRqXBzX+W5mbomWG4sKc0i8DTRgV6HuvPqZ6BKgEcIW+jMchM82Zj+vxt9c0js/6Ykg7GcgVNU2v5Un6hrjwWoYHgLdc3lbyGa7bBuRYxV3V+8gxHF2whnIRmfGM2PVM=
    0
并支持下面的命令：
### STAGE-1 C&C
恶意软件在接收到命令`CONNECT host:port`后，会创建到特定STAGE-1
C&C服务器的连接。然后用自由的二进制协议（基于TCP）进行通信，来自服务器和客户端的消息都以长度为16字节的header开始。
Header使用了2层加密：  
第一层是ECB模式的AES密文，加密密钥保存在恶意软件配置中；  
分析的样本中的AES密钥为：
    ava5df#be45av^bbdgq!hiuyyhh4327$
AES解密后，header的前4字节chunk会作为XOR密钥解密header的其他部分。解密后，header的格式如下：
恶意软件会将header进行语义分析，获得传输数据的长度和CRC32校验码。消息的数据会进行2层加密，密钥同时用于解密。
解密的消息中含有多个chunk，每个chunk都以表示chunk类型的字节开始：
Chunk的数量和类型与message code有关。
恶意软件支持以下message code：
C&C服务器发送的消息，message code的高字节是`0x10`，而僵尸主机发送的消息的message code的高字节是`0x00`。
## 保护机制
恶意软件样本中的所有字符串都用`Stack strings
obfuscation`结束进行了混淆。因此，字符串不以明文也不以加密的形式保存，也很难在恶意软件二进制文件中找到。每个字符串都在函数主体中一个字符一个字符地填充：
图21: 字符串混淆
当恶意软件需要调用API函数时，首先用哈希对来解析目标函数的地址，然后用解析的地址调用API函数：
图22: API调用混淆
恶意软件还使用了一些绕过结束来检测沙箱环境和研究用软件，在查询STAGE-0
C&C服务器之前会进行循环检查。如果检查到沙箱或分析环境，恶意软件就会从加密区块中提取出假的C&C服务器地址，并用来代替真实的配置。
样本中使用的假的配置有：
    http://104.144.207.211:443/vnnf4pffztd356ey
    http://46.161.40.50:443/vnnf4pffztd356ey