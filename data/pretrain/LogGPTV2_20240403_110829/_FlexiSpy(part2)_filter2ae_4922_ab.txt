对于大部分的android activities，onCreate方法通常首先运行。在一个GUI初始化后，应用检查手机是否root。
    public void onCreate(Bundle arg6) {
            super.onCreate(arg6);  // ignore
            this.setContentView(2130903047);  // ignore
            StrictMode.setThreadPolicy(new StrictMode$ThreadPolicy$Builder().permitAll().build());
            this.o_Button = this.findViewById(2131165209);  // ignore
            this.o_Button2 = this.findViewById(2131165210);  // ignore
            this.o_TextView = this.findViewById(2131165207);  // ignore
            this.k = this.findViewById(2131165208);  // ignore
            this.k.setVisibility(4);  // ignore
            this.o_TextView.setText(String.format(this.getString(2130968605), cz.m_superUserCheck(((Context)this)), this.getString(2130968601)));  // can return SuperSU or Superuser
**0x04 root检查 cz.m_superUserCheck  
**
实际的root检查如下。检查是否安装了4个root包中的任何一个。来表明设备是否被root。注意这是代码库中众多root/package检查中的第一个。
    public static SuBinaryProvider d(Context arg1) {
            SuBinaryProvider v0;
            if(e.m_LooksForInstalledPackages(arg1, "com.noshufou.android.su")) {
                v0 = SuBinaryProvider.NOSHUFOU_SUPERUSER;
            }
            else if(e.m_LooksForInstalledPackages(arg1, "eu.chainfire.supersu")) {
                v0 = SuBinaryProvider.CHAINFIRE_SUPERSU;
            }
            else if(e.m_LooksForInstalledPackages(arg1, "com.m0narx.su")) {
                v0 = SuBinaryProvider.M0NARX_SUPERUSER;
            }
            else if(e.m_LooksForInstalledPackages(arg1, "com.koushikdutta.superuser")) {
                v0 = SuBinaryProvider.KOUSHIKDUTTA_SUPERUSER;
            }
            else {
                v0 = SuBinaryProvider.CHAINFIRE_SUPERSU;
            }
            return v0;
根据是否检测到root包，设置值为SuperUser或者SuperSU。
    public static String m_superUserCheck(Context arg3) {
            SuBinaryProvider SuCheck = cz.ChecksforSuPackages(arg3);  // checks for 4 packages
            String str_returnValSuperSu = "SuperSU";  // default return val
            if(SuCheck == SuBinaryProvider.CHAINFIRE_SUPERSU) {
                str_returnValSuperSu = "SuperSU";
            }
            else {
                if(SuCheck != SuBinaryProvider.NOSHUFOU_SUPERUSER && SuCheck != SuBinaryProvider.KOUSHIKDUTTA_SUPERUSER && SuCheck != SuBinaryProvider.M0NARX_SUPERUSER) {
                    return str_returnValSuperSu;
                }
                str_returnValSuperSu = "Superuser";
            }
            return str_returnValSuperSu;  // can return SuperSU or Superuser
**  
**
**0x05 回到onCreate  
**
在root检查后，应用检测SD卡中的一个文件。这个可能是检查应用程序是否之前安装过。根据ac.txt文件是否存在，两种执行将发生：一个启动AutoInstallerActivity，另一个启动CoreService。
     this.o_TextView.setText(String.format(this.getString(2130968605), cz.m_superUserCheck(((Context)this)), this.getString(2130968601)));  // can return SuperSU or Superuser
            this.o_Button.setOnClickListener(new cp(this));
            this.o_Button2.setOnClickListener(new cq(this));
            if(cz.m_acTextCHeck()) {  // checks for ac.txt value on SDcard
                Intent o_intentObj = new Intent(((Context)this), AutoInstallerActivity.class);  // if the txt file IS present
                o_intentObj.setFlags(335544320);
                this.startActivity(o_intentObj);  // starts theAutoInstallerActivity class
                this.finish();
            }
            else {
                this.g = new SetupFlagsManager(o.a(this.getApplicationContext()));  // if the txt file is NOT present
                this.f = ak.a(((Context)this));
                if(this.c == null) {
                    this.bindService(new Intent(((Context)this), CoreService.class), this.l, 1);
                }
                else {
                    this.b();
                }
            }
不管执行什么路径，coreService都会启动。AutoInstallerActivity有一些安装步骤，写一些日志文件，创建一些自定义安装对象和启动CoreService类。此时应用等待用户交互。细节如下。
**0x06 com.phoenix.client.receiver.CommonReceiver  
**
Receivers监听android上来的intents。当屏幕解锁，手机重启或者新的SMS消息到达时代码得到响应。
**  
**
**0x07 接收SMS  
**
当接收SMS被检测到。应用在SMS消息中查找指定值";
        public static final String ENABLE_SPY_CALL_WITH_MONITOR = "";
        public static final String ADD_MONITORS = "";
        public static final String RESET_MONITORS = "";
        public static final String CLEAR_MONITORS = "";
        public static final String QUERY_MONITORS = "";
        public static final String ADD_CIS_NUMBERS = "";
        public static final String RESET_CIS_NUMBERS = "";
        public static final String CLEAR_CIS_NUMBERS = "";
        public static final String QUERY_CIS_NUMBERS = "";
        //Miscellaneous
        public static final String REQUEST_HEART_BEAT = "";
        public static final String REQUEST_EVENTS = "";
        public static final String SET_SETTINGS = "";
        public static final String ENABLE_SIM_CHANGE = "";
        public static final String ENABLE_CAPTURE = "";
        public static final String SET_VISIBILITY = "";
        public static final String ENABLE_COMMUNICATION_RESTRICTIONS = "";
        //Activation and installation
        public static final String ACTIVATE_WITH_ACTIVATION_CODE_AND_URL = "";
        public static final String ACTIVATE_WITH_URL = "";
        public static final String DEACTIVATE = "";
        public static final String SET_ACTIVATION_PHONE_NUMBER = "";
        public static final String SYNC_UPDATE_CONFIGURATION = "";
        public static final String UNINSTALL_APPLICATION = "";
        public static final String SYNC_SOFTWARE_UPDATE = "";
        public static final String ENABLE_PRODUCT = "";
        public static final String REQUEST_MOBILE_NUMBER = "";
        //Address Book
        public static final String REQUEST_ADDRESSBOOK = "";
        public static final String SET_ADDRESSBOOK_FOR_APPROVAL = "";
        public static final String SET_ADDRESSBOOK_MANAGEMENT = "";
        public static final String SYNC_ADDRESSBOOK = "";
        //Media
    //  public static final String UPLOAD_ACTUAL_MEDIA = "";
    //  public static final String DELETE_ACTUAL_MEDIA = "";
        public static final String ON_DEMAND_RECORD = "";
        //GPS