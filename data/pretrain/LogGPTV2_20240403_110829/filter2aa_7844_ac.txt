}
namespace eval Counter {
    proc test {args} {
        return $args
    }
}
namespace eval Counter {
    rename test ""
}\fR
.CE
注意在例子中向 \fBCounter\fR  名字空间增加了 \fBtest\fR 过程，后来又用 \fBrename\fR命令把它删除了。
.PP
在名字空间内可以又其他的名字空间，它们是有层次的嵌套。一个嵌套的名字空间被封装在它的父名字空间中并且不会被其他名字空间所干扰。      
.SH "限定的名字 QUALIFIED NAMES"
.PP
每个名字空间都有一个文本名字比如\fBhistory\fR 或 \fB::safe::interp\fR。因为名字空间可以嵌套，使用限定的名字来引用在名字空间中的命令、变量、和包含子名字空间。除了使用 \fB::\fR作为分隔符而不是 \fB/\fR 或 \fB.\fR 之外，限定的(qualified)名字类似于给 Unix 文件或 Tk 组件的有层次的路径，最顶层或全局名字空间拥有名字“” (一个空串)，而 \fB::\fR 是它的同义词。例如，名字 \fB::safe::interp::create\fR  引用在名字空间 \fB::safe \fR的子名字空间 \fBinterp\fR 中的命令 \fBcreate\fR，\fB::safe \fR是全局名字空间 \fB:: \fR的子名字空间。
.PP
如果你打算从其他的名字空间中访问命令和变量，你必须使用额外的语法。名字必须被包含它们的名字空间所限定。例如我们可以象下面这样访问 \fBCounter\fR 的过程: 
.CS
\fBCounter::bump 5
Counter::Reset\fR
.CE
我们可以象下面这样访问当前的 count (变量的值):  
.CS
\fBputs "count = $Counter::num"\fR
.CE
当一个名字空间包含另一个的时候，要到达它的元素你可能需要多于一个的限定符。如果我们有一个名字空间 \fBFoo\fR，它包含名字空间 \fBCounter\fR，你可以象下面这样从全局名字空间调用它的 \fBbump\fR 过程:
.CS
\fBFoo::Counter::bump 3\fR
.CE
.PP
你还可以在建立和重命名命令的时候使用限定的名字。例如，你可以象下面这样向 \fBFoo\fR增加一个过程:  
.CS
\fBproc Foo::Test {args} {return $args}\fR
.CE
你可以象下面这样把同一个过程移动到另一个名字空间中: 
.CS
\fBrename Foo::Test Bar::Test\fR
.CE
.PP
我们覆盖(cover)剩下的一些关于限定的名字的要点。除了全局名字空间之外名字空间有非空的名字。除了作为名字空间分隔符，不允许 \fB::\fR  在简单命令、变量、和名字空间名字中使用。在限定的名字中忽略额外的 \fB:\fR ；就是说，两个或更多的 \fB: \fR被作为一个名字空间分隔符。在一个限定的变量或命令名字中的尾随的 \fB::\fR 引用叫做 {} 的变量或命令。但是忽略在一个限定的名字空间名中的尾随的 \fB::\fR。 
.SH NAME
.PP
一般的，所有接受变量和命令的名字的 Tcl 命令都支持限定的名字。这意味着你可以把限定的名字给这样的命令如\fBset\fR、\fBproc\fR、\fBrename\fR、和 \fBinterp alias\fR。如果你提供了以 \fB:: \fR开始的一个完全限定的名字，对任何命令、变量、或名字空间多没有问题。但是，如果这个名字不以一个 \fB::\fR    开始(它是\fI相对的\fR)，Tcl 依据一个固定的规则来查找它: 解析命令和变量名字总是首先在当前的名字空间中查找，接着在全局名字空间中查找。另一方面，解析名字空间总是在当前名字空间中查找。
.PP
在下列例子中, 
.CS
\fBset traceLevel 0
namespace eval Debug {
    printTrace $traceLevel
}\fR
.CE
Tcl 在名字空间 \fBDebug\fR 中查找 \fBtraceLevel\fR接着在全局名字空间中查找，它以相同的方式查找命令 \fBprintTrace\fR。如果一个变量或命令的名字在这两个上下文中都找不到，则这个名字是未定义的。为了使这一点绝对清楚，考虑下列例子:   
.CS
\fBset traceLevel 0
namespace eval Foo {
    variable traceLevel 3
    namespace eval Debug {
        printTrace $traceLevel
    }
}\fR
.CE
这里 Tcl 首先在名字空间 \fBFoo::Debug \fR中查找 \fBtraceLevel\fR。因为在这里未找到，Tcl 接着在全局名字空间中查找。在名字解析过程中完全忽略了变量 \fBFoo::traceLevel\fR。
.PP
你可以使用 \fBnamespace which\fR  命令来清除关于名字解析的任何问题: 
.CS
\fBnamespace eval Foo::Debug {namespace which \-variable traceLevel}\fR
.CE
返回  \fB::traceLevel\fR。另一方面，命令，
.CS
\fBnamespace eval Foo {namespace which \-variable traceLevel}\fR
.CE
返回 \fB::Foo::traceLevel\fR.
.PP
如上面提及的那样，查找名字空间名字与变量和命令的名字不同。总是在当前名字空间中解析名字空间名字。这意味除非新名字空间的名字以一个 \fB::\fR开始，否则建立一个新名字空间的 \fBnamespace eval\fR 命令总是建立当前名字空间的一个子名字空间。
.PP
Tcl 对你可以引用的变量、命令、或名字空间没有访问控制。如果你能提供一个限定的名字来通过名字解析规则解析到一个元素，你就可以访问这个元素。
.PP
你可以通过 \fBvariable\fR  命令从同一个名字空间中的一个过程中访问一个名字空间变量。非常象 \fBglobal\fR 命令，它建立到名字空间变量的一个本地连接。如果需要，这个命令还在当前的名字空间中建立这个变量并初始化它。注意：\fBglobal\fR命令只建立到在全局名字空间中的变量的连接。如果你总是使用一个适当的限定的名字来引用名字空间变量，则使用 \fBvariable\fR 命令不是必须的。 
.SH "导入命令 IMPORTING COMMANDS"
.PP
名字空间经常用来表示库。一些库命令使用的如此频繁以至于键入它们的限定的名字是极其烦人的。例如， 假设在一个包如 BLT 中的所有命令都包含在一个叫 \fBBlt \fR的名字空间中。则你可以象下面这样访问这些命令: 
.CS
\fBBlt::graph .g \-background red
Blt::table . .g 0,0\fR
.CE
如果你频繁使用 \fBgraph\fR 和 \fBtable\fR  命令，你可能希望访问它们而不用加 \fBBlt::\fR前缀。你可以通过把它导入到当前名字空间中的方式来达到此目的。例如: 
.CS
\fBnamespace import Blt::*\fR
.CE
这个例子把从 \fBBlt\fR名字空间导出的所有命令增加到当前名字空间上下文中，所以你可以象下面这样写代码: 
.CS
\fBgraph .g \-background red
table . .g 0,0\fR
.CE
\fBnamespace import\fR命令从一个名字空间导入的命令只能是那个名字空间中用 \fBnamespace export\fR命令导出的命令。
.PP
从一个名字空间导入\fI所有\fR命令一般是一个坏主意，因为你不知道你将会得到些什么。更好的方式是只导入你需要的命令。例如，命令
.CS
\fBnamespace import Blt::graph Blt::table\fR
.CE
只把 \fBgraph\fR 和 \fBtable\fR  命令导入到当前上下文。
.PP
如果你要导入一个已经存在的命令，你将得到一个错误。这防止你从两个不同的包导入同一个命令。但是有的时候(可能在调试时)，你可能希望超越这个限制。你可能希望重新发起(reissue) \fBnamespace import\fR命令来导入(pick up)一个新命令，而同名的命令在这个名字空间中已经出现过了。在这种情况下，你可以使用 \fB-force\fR   选项，现存命令将悄无声息的被覆写(overwritten): 
.CS
\fBnamespace import \-force Blt::graph Blt::table\fR
.CE
如果出于某种原因，你打算停止使用导入的命令，你可以用 \fBnamespace forget\fR 命令删除它们，例如: 
.CS
\fBnamespace forget Blt::*\fR
.CE
它在当前名子空间中查找从 \fBBlt \fR导入的所有命令，如果找到则删除它们。否则，它什么都不做。此后，访问 \fBBlt\fR命令必须使用 \fBBlt::\fR  前缀。
.PP
当你从导出(命令的)名字空间删除一个命令的时候，例如:
.CS
\fBrename Blt::graph ""\fR
.CE
则从所有导入它的名字空间中自动删除这个命令。 
.SH "导出命令 EXPORTING COMMANDS"
你可以从一个名字空间中导出命令，例如: 
.CS
\fBnamespace eval Counter {
    namespace export bump reset
    variable Num 0
    variable Max 100
    proc bump {{by 1}} {
        variable Num
        incr Num $by
        Check
        return $Num
    }
    proc reset {} {
        variable Num
        set Num 0
    }
    proc Check {} {
        variable Num
        variable Max
        if {$Num > $Max} {
            error "too high!"
        }
    }
}\fR
.CE
过程 \fBbump\fR  和 \fBreset\fR  被导出，所以当你从 \fBCounter\fR 名字空间导入的时候，它们被包括在内。例如:  
.CS
\fBnamespace import Counter::*\fR
.CE
但是 \fBCheck\fR  过程未被导出，所以它被导入操作所忽略。
.PP
\fBnamespace import\fR，命令只导入被它们的名字空间导出的命令。\fBnamespace export\fR 命令指定什么命令可以被其他名字空间导入。如果一个 \fBnamespace import\fR命令指定了一个未被导出的命令，则不导入这个命令。
.SH "参见 SEE ALSO"
variable(n)
.SH "关键字 KEYWORDS"
exported, internal, variable
.SH "[中文版维护人]"
.B 寒蝉退士
.SH "[中文版最新更新]"
.B 2001/10/12
.SH "《中国 Linux 论坛 man 手册页翻译计划》:"
.BI http://cmpp.linuxforum.net