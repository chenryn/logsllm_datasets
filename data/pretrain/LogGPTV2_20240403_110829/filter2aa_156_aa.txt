安服崽笔记_flex-messaging-core-4.7.2.jar AMF 反序列化 
AMF 反序列化常用的利用链有 MetaDataEntry、ReplicatedTree 和 UnicastRef 等等 
Externalizable 实现类 
本次主要记录 MetaDataEntry 利用链 
文章写的异常垃圾、凌乱，跟着代码看文章可能会好一些， 
代码里很多父类引用指向子类对象的地方，我都有说明为什么会调用某个实现类的方法。 
Src 目录下 Test.java，可以辅助了解 amf 协议格式。 
靶场地址：https://github.com/jiashaoxiong1998/amfDemo 
导入 idea，配置个 tomcat，应该就可以执行 
或者直接 mvn -package 打成 war 包，扔 tomcat 里就行 
组件介绍： 
AMF(Action Message Format)是 Flash 与服务端通信的一种常见的二进制编码模式，AMF 是
Adobe 独家开发的数据封装格式，Flash 可以直接访问，由于它是基于二进制的数据传输，
所以相对于 xml SOAP、json、webService 等基于字符串的数据格式，有数据体积小和效率
高的特点。AMF 目前有 AMF0 和 AMF3 两种格式，flash8 以前版本只支持 AMF0，flash9 支
持两种格式。AMF3 比 AMF0 效率更高。 
java 语言编写的网站，前端使用 flash 时，或部分功能需要前端 flash 和后端有数据交互时，
有很大概率会存在 AMF3 反序列化漏洞。 
代码层面特征 
使用小于等于 flex-messaging-core-4.7.2.jar 组件搭建 AMF 协议通信的 flex 应用，一般都会
有如下特征： 
1：存在 flex-messaging-core 小于 4.7.3 版本依赖： 
2：定义 class 为：flex.messaging.MessageBrokerServlet 的 servlet 
例如下图配置： 
3：通过配置文件，或代码中动态添加 amf 的 channels 请求端点： 
例如下图配置：配置了/test/amf 的 channels， 
漏洞代码分析 
AMF 协议部分： 
根据 web.xml 中 MessageBrokerServlet 配置，查看 servlet 代码： 
flex/messaging/MessageBrokerServlet.java 
重点关注源码中 service 方法，主要关注以下部分： 
1：306 行将 request 对象存到 threadLocal 中 
2：346 行，根据 servletPath 获取 endpoint， 
getServletPath 方法：当请求 url 为：127.0.0.1/dou/xiang/niu/pi 时 
getServletPath 方法获取到的值为/niu/pi,根据此路径去寻找对应 amf 的请求端点 
3：373 行调用根据 servletPath 找到的 endpoint 对象的 service 方法，此方法触发漏洞 
EndPoint 是接口类型，有很多实现类，靶场中定义的实现类是 BaseHTTPEndpoint，因为： 
Web.xml 中指定配置文件参数 services.configuration.file 参数为 services-config.xml， 
services-config.xml 中 endpoint 标签配置的 url 为： 
http://{server.name}:{server.port}/{context.root}/test/amf 
class 为 flex.messaging.endpoints.AMFEndpoint， 
AMFEndpoint 类继承 BasePollingHTTPEndpoint 类， 
BasePollingHTTPEndpoint 继承 BaseHTTPEndpoint 类， 
（这不是主要执行流程，不贴图了，就为了明白为什么会调用 BaseHTTPEndpoint 类的 service
方法） 
BaseHTTPEndpoint 类的 service 方法，调用 filterChain 对象的 invoke 方法 
从 BaseHTTPEndpoint 类的 start 方法中看到，filterChain 对象是通过调用 createFilterChain
方法进行初始化， 
BaseHTTPEndpoint 类中的 createFilterChain 为抽象方法， 
通过查看子类 AMFEndpoint 类中的 createFilterChain 实现方法，可以确定 filterChain.invoke
方法首先会调用 SerializationFilter 的 invoke 方法（这不是主要执行流程，不贴图了，就为了
明白为什么会进入到 SerializationFilter 的 invoke 方法） 
SerializationFilter 的 invoke 方法比较长，主要关注 121/124/125 行，创建 MessageDeserializer
类对象，从 threadLocal 中取出 request 对象，获取到 request 对象的输入流 
SerializationFilter 类中 invoke 方法第 147/169 行位置， 
使用请求输入流初始化 deserializer 对象，并调用了 readMessage 方法 
deserialize 对象在 flex/messaging/endpoints/amf/SerializationFilter.java 文件中 121 行位置
定义， 
MessageDeserializer 是接口类型，默认会使用 AmfMessageDeserializer 类： 
通过上图可以看到，实际调用的是 flex/messaging/io/amf/AmfMessageDeserializer.java 类的
readMessage 方法 
其中的 amfIn，就是上图使用 request.getInputStream 请求输入流进行初始化的。 
方法中调用了三次 readUnsignedShort 方法，分别读取了 version、headersCount 和
bodyCount 
漏洞触发点在 readBody 方法 
flex/messaging/io/amf/AmfMessageDeserializer.java 文件中 156 行，定义 readBody 方法： 
方法中调用了 DataInputStream 的两次 readUTF 和一次 readInt 方法，读取了 targetUri、
responseUri 和一个 int 偏移 
在 173 行位置，调用了当前类的 readObject 方法 
197 行位置，定义 readObject 方法，方法中再次调用了 AmfIn 对象的 readObject 方法 
amfIn 对象又是接口类型， 
在上文中提到过，SerializationFilter 类中 147 行调用了 initialize 方法， 
代码长这样：deserializer.initialize(sc, in, debugTrace); 
在 initialize 方法中，初始化 amfIn 为 Amf0Input 类型 
所以 amfIn 对象的 readObject 方法会调用 Amf0Input 的 readObject： 
flex/messaging/io/amf/Amf0Input.java 类的中 89 行位置定义 readObject 方法 
方法中读取 1 字节数据，传递到当前类的 readObjectValue 方法中， 
当前类 97 行定义 readObjectValue 方法，方法中进行 switch 判断，当读取的 1 字节数据等
于 17 时，将会使用 flex/messaging/io/amf/Amf3Input.java 类再次包裹输入流，并调用
readObject 方法 
flex/messaging/io/amf/Amf3Input.java 中 129 行，定义 readObject 方法， 
方法中再次读取 1 字节， 
进行 switch 判断，当该字节值为 10，调用当前类的 readScriptObject 方法 
当前类 732 行定义 readScriptObject 方法， 
方法中首先调用当前类的 readUInt29 方法：读取 1 字节无符号整数，小于 128 直接 return，
保存在 ref 变量中。 
739 行位置，ref 变量被传递到当前类 readTraits 方法中， 
readTraits 方法再次对 ref 按位与 3 进行判断（没看懂），按位与 3 结果不为 1 时，对 ref 值
进行处理， 
boolean externalizable = ((ref & 4) == 4); 
boolean dynamic = ((ref & 8) == 8); 
int count = (ref >> 4); /* uint29 */ 
接下来调用 readString 方法，读取类名，先读取 1 个字节的无符号整数，表示类名长度，后
续调用 readUTF 方法读取指定长度的内容。 
746 行位置，createObjectInstance 方法，根据读取到的类名，返回该类对象 
757 行调用 readExternalizable 方法，触发漏洞 
flex/messaging/io/amf/Amf3Input.java 文件中 819 行，定义 readExternalizable 方法，方法
中调用利用链类的 readExternal 方法，触发反序列化漏洞，到此 AMF 执行流程就算走完，
剩下的就是利用链部分 
MetaDataEntry 利用链部分： 
MetaDataEntry 利用链位于 axis2-kernel.jar 中，靶场中使用最新 1.8.0 版本； 
MetaDataEntry 类实现 Externalizable 接口，并重写了 readExternal 方法； 
方法中首先使用 SafeObjectOutputStream 包裹输入流； 
接下来从流中读取 8 字节和 4 字节，当做序列化 ID 和修订版本： 
硬编码的序列化 ID：8978361069526299875L 
硬编码的修订版本：2 
验证通过后，319 行位置，调用了 SafeObjectOutputStream 类的 readObject 方法 
SafeObjectOutputStream 类中 readObject 方法，调用当前类的 readObjectOverride 方法 
SafeObjectOutputStream 中 317 行，定义 readObjectOverride 方法， 
方法中读取两个布尔类型数据，共读取 2 字节 
通过指定第一个布尔值为 true，第二个布尔值为 false，让代码进入到框起来的部分，触发
java 反序列化漏洞，流中后续只要放 java 反序列化对象即可。 
getByteStream 方法中，会再次读取 4 字节 int 数据，标识对象数据长度，后续跟 java 对象。 
协助分析 java 代码： 
通过下面代码可以协助分析 
package jsx.ink; 
import java.io.DataInputStream; 
import java.io.FileInputStream; 
import java.io.IOException; 
import java.io.InputStream; 
public class Test { 
    public static void main(String[] args) throws Exception{ 
        InputStream 
resourceAsStream 
= 
Test.class.getResourceAsStream("/2.txt"); 
        DataInputStream dis=new DataInputStream(resourceAsStream); 
        //MetaDataEntry 利用链,71 字节后,就是原生 java 反序列化 payload 
//        for(int a=0;a<71;a++){dis.read(); 
//        } 
//        System.out.println(dis.readByte());//ac 
//        System.out.println(dis.readByte());//ed 
//        System.out.println(dis.readByte());//00 
//        System.out.println(dis.readByte());//05 
        //version,2 字节 
        int i = dis.readUnsignedShort(); 
        System.out.println("version:"+i); 
        //headers,2 字节 
        int i1 = dis.readUnsignedShort(); 
        System.out.println("headers:"+i1); 
        //bodyCount,2 字节 
        int i2 = dis.readUnsignedShort(); 
        System.out.println("bodyCount:"+i2); 
        //targetUri,2 字节 
        String targetURI = dis.readUTF(); 
        System.out.println("targetURI:"+targetURI); 
        //responseURI,2 字节 
        String responseURI = dis.readUTF(); 
        System.out.println("responseURI:"+responseURI); 
        //一位 int 偏移,4 字节 
        int i3 = dis.readInt(); 
        System.out.println("偏移一位:"+i3); 
        //amf0Input_type,1 字节 
        int amf0 = dis.readByte(); 
        System.out.println("amf0_type:"+amf0); 
        //amf0Input_type,1 字节 
        int amf3 = dis.readByte(); 
        System.out.println("amf3_type:"+amf3); 
        //readTraits,读取 1byte,判断是否小于 128,如果大于则继续读取,payload 中
该字节为 7,直接返回 
        // 决定 externalizable 和 dynamic 是否为 true,和 properties 的 count 信息