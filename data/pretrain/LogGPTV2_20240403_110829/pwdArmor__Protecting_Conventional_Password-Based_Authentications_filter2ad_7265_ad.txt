restricted pages from being retrieved by unauthorized users
and relies on an HTTP header to indicate that pwdArmor
logins are available. It also uses HTTP headers to exchange
the pwdArmor messages created by libpwdarmor. Once
authentication is successful it uses session cookies to main-
tain an authenticated state with the client.
6.1 Integrating with Existing Protocols
Table 1 gives examples of the speciﬁc contents of the
pwdArmor messages for the following password protocols:
HTTP Basic with the Apache Variant of MD5-based
BSD Veriﬁers
In this protocol α speciﬁes the method of
veriﬁer creation and contains the salt that is required to cre-
ate the same veriﬁer stored by H. HTTP Basic has no host-
supplied challenge and expects pwdU, which is sent in RU.
from H and then tricks U into at-
tempting an authentication to her then she will be able to
use κU,H and pwdver
to decrypt RU. Since HTTP Basic is a
Type-0 protocol, the value for RU, in this case pwdU, allows
M to repeatedly impersonate U until pwdU is reset.
If M steals pwdver
Outﬁtting HTTP Basic with pwdArmor provides it with
the same protections it would have normally received if it
were contained within an encrypted tunnel, and adds the
beneﬁt of protecting RU if that tunnel is circumvented.
U
U
OTP The value of α is equivalent, in content, to the chal-
lenge from the previous successful authentication. The
challenge contains the information to use pwdU to derive
current one-time password, which is sent to H in RU.
450450
U
If M obtains a copy of pwdver
and tricks U into attempt-
ing an authentication to her, she will be able to decrypt RU.
As OTP is a Type-1 protocol, the value for RU, in this case
the current one-time password, allows M to impersonate
U a single time. It is interesting to note that when OTP is
used normally it is vulnerable to a “small n” attack in which
M reduces the hash index of the real host’s challenge. If
M manipulates the hash index contained in α, she will, at
worst, obtain LEAK break since pwdver
is needed to de-
crypt RU and obtain the “small n” value generated by U. If
M obtains a copy of pwdver
, the small n attack is still not
that U will generate will
feasible as the value for pwdver
not correspond to the stolen pwdver
as their respective hash
indices are not equal.
U
U
U
U
HTTP Basic with HTTP Digest Veriﬁers The algorithm
and realm speciﬁed in α enables U to generate the H(A1)
HTTP Digest password veriﬁer. Again, HTTP Basic has no
host-supplied challenge and expects pwdU.
pwdArmor provides HTTP Basic with the same protec-
tion from PWD breaks as HTTP Digest, without requir-
ing password-equivalent veriﬁers.
In this approach pwdU
is hashed and then compared to H(A1), allowing what
were password-equivalent veriﬁers to become password-
If HTTP Digest is still employed elsewhere
dependent.
using these same veriﬁers,
then they remain password-
equivalent for those HTTP Digest authentications.
7 Related Work
As is evidenced by the success of password phishing,
the assurances provided by encasing conventional password
protocols within encrypted tunnels (e.g., TLS) can be eas-
ily circumvented by tricking the user. The key problems
with encrypted tunnels are the difﬁcultly for users to: 1)
Determine if the host authentication ever occurred; and 2)
Correctly verify the identity of the server. Several solutions
have been proposed to improve the authentication of H by
U. Visualization techniques [27] help improve veriﬁcation
of public keys. Additional human perceptible server au-
thenticators (e.g., pictures, voice) [12] may also help users.
Other systems, like BeamAuth [2], use bookmarks to ensure
that logins only occur with legitimate sites. These solutions
do not address the lack of creation of the tunnel. pwdArmor
provides the same passive/active protections as encrypted
tunnels, along with the additional beneﬁt that if the host au-
thentication is circumvented then pwdU is not leaked.
Delayed password disclosure (DPD) [17] authenticates
H without a secure tunnel by requiring U to verify the cor-
rectness of a host-supplied image after each character of
pwdU is entered. A distinct oblivious transfer for each pass-
word character ensures that actual password character is not
451451
disclosed. U then authenticates via a traditional PAKE pro-
tocol. Unlike pwdArmor, DPD is designed to thwart static
phishing sites and does not protect against MITM attacks.
Also, pwdArmor maintains the current practice of allowing
users to quickly submit their usernames and passwords.
The need to couple an inner authentication protocol with
its outer tunnel has been previously examined as the com-
pound authentication binding problem [5, 28]. The solution
proposed (and adopted by EAP [1]) requires that the result-
ing session key be derived from: 1) The tunnel key; and 2)
A key created by the inner authentication protocol or from
pwdU. Although this binding prevents MITM attacks, the
tunnel must be modiﬁed and the password protocol is not
protected if the tunnel is incorrectly established.
IKEv2 [18] does not directly address the tunneling of
Type-0/1 protocols, which it calls “legacy authentication”
mechanisms, but does supports the optional binding of itself
to EAP, provided the underlying EAP method produces a
key. As with EAP, IKEv2 does not provide any protections
against phishers if the tunnel is incorrectly established.
Oppliger et al. [26] couples a TLS session to a speciﬁc
authentication through a hardware/software token. Client-
side certiﬁcates (from the token) are used in the TLS hand-
shake to prevent MITM attacks, not for client authentication.
pwdArmor accomplishes the same goals by using nonces to
ensure unique sessions and by using IDH to ensure a tight
coupling with the encrypted tunnel.
Halevi and Krawczyk [13] speciﬁes a generic, password-
based, encrypted challenge-response protocol and an in-
stantiation that provides mutual authentication and key ex-
change. Even though this protocol encrypts pwdU with H’s
public key, if the phisher successfully performs the certiﬁ-
cate trick then the beneﬁts of this protocol are completely
negated. Also, the requirement that H have a public key
pair may be unreasonable for the low-value services that
typically operate in Sclear scenarios.
PAKE protocols are the strongest answer, to date, for the
troubles with password-based authentication through en-
crypted tunnels. There are a variety of protocols: SRP [30],
SPEKE [16], EKE [7], PDM [19], SNAPI [24], PAK [23],
AuthA [6], AMP [21]. If executed correctly, these protocols
are not vulnerable to PWD, LEAK, or MITM breaks. As
pwdArmor only provides all of these assurances if U does
not fall victim to a certiﬁcate trick, PAKE protocols pro-
vide superior beneﬁts to pwdArmor, with two exceptions.
First, and most signiﬁcantly, is their inability to reuse exist-
ing password veriﬁer databases as detailed in Section 2.3.
Second, is their lack of privacy protection for IDU. With
the exception of SNAPI, this protection cannot be easily
added to these protocols as their DH-based key exchanges
are tightly coupled to IDU (and as such cannot be used to
privately transmit IDU) and they do not require H to have a
public key pair.
8 Conclusions and Future Work
pwdArmor is a more secure alternative to the current
practice of encasing conventional password-based authen-
tication protocols within a server-authenticated, encrypted
tunnel. The key beneﬁt of pwdArmor is evident when
users think they are authenticating to one of their legiti-
mate service providers, but are, in fact, being phished. In
this scenario, all the beneﬁts of using an encrypted tun-
nel can be negated by users, whereas in pwdArmor, users’
passwords are never disclosed. This advantage comes from
pwdArmor’s treatment of server authentication as an added
bonus, rather than the linchpin of its assurances.
Unlike other PAKE protocols, pwdArmor can reuse ex-
isting veriﬁer databases while maintaining the password-
dependent nature of those veriﬁers. Reuse of existing veri-
ﬁers is valuable as it allows simpliﬁed deployment, avoids
the overhead of creating new veriﬁers, and preserves com-
patibility with legacy systems. pwdArmor also, unlike other
PAKE protocols, offers optional privacy protection to the
user’s identity during the authentication.
Operating system utilities (e.g., CardSpace [9]) for man-
aging and using login credentials have the potential to unify
user authentication across a variety of mediums (e.g., web
site, wireless network, local application logins). As such,
they represents an attractive avenue for deploying the client-
side functionality required by pwdArmor.
Assuming the presence of HTTPS only for login pages,
SessionLock [3] secures resulting web sessions from pas-
sive eavesdropping without TLS. A combination of pwd-
Armor and SessionLock, could eliminate the need for
HTTPS for a large number of low-security web sites and
therefore remove the additional costs associated with the
performance overhead and caching behavior of TLS.
References
[1] B. Aboba, L. Blunk, J. Vollbrecht, and J. Carlson. RFC
3748: Extensible Authentication Protocol, June 2004.
[2] B. Adida. Beamauth: Two-factor web authentication with a
bookmark. In ACM Conference on Computer and Commu-
nications Security, October 2007.
[3] B. Adida. Sessionlock: securing web sessions against eaves-
dropping. In International Conference on World Wide Web,
April 2008.
[4] APWG. Phishing Trends Reports, January 2008. Available
from http://anti-phishing.org.
[5] N. Asokan, V. Niemi, and K. Nyberg. Man-in-the-Middle in
Tunnelled Authentication Protocols. In Security Protocols
Workshop, 2003.
[6] M. Bellare and P. Rogaway.
The AuthA Protocol for
Password-Based Authenticated Key Exchange. Submission
to IEEE P1363, February 2000.
[7] S. Bellovin and M. Merritt. Encrypted Key Exchange:
Password-Based Protocols Secure Against Dictionary At-
tacks. In IEEE Symposium on Security and Privacy, 1992.
[8] Cain and Able. Available from http://www.oxid.it/cain.html.
[9] CardSpace. http://msdn.microsoft.com/CardSpace.
[10] W. Difﬁe and M. E. Hellman. New directions in cryptogra-
phy. In IEEE Trans. on Information Theory, Nov 1976.
[11] J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence,
P. Leach, A. Luotonen, and L. Stewart. RFC 2617: HTTP
Authentication: Basic and Digest Access Authentication,
June 1999.
[12] S. Gajek, M. Manulis, A. Sadeghi, and J. Schwenk. Provably
secure browser-based user-aware mutual authentication over
In ACM Symposium on Information, computer and
TLS.
communications security, 2008.
[13] S. Halevi and H. Krawczyk. Public-key cryptography and
password protocols. ACM Transactions on Information and
System Security, 1999.
[14] N. Haller. The S/KEY one-time password system. In Sym-
posium on Network and Distributed System Security, 1994.
[15] N. Haller, C. Metz, P. Nesser, and M. Straw. RFC 2289: A
One-Time Password System, Feb. 1998.
[16] D. P. Jablon. Strong password-only authenticated key ex-
change. SIGCOMM Comput. Commun. Rev., 1996.
[17] M. Jakobsson and S. Myers. Delayed Password Disclosure.
SIGACT News, 38(3):56–75, 2007.
[18] C. Kaufman. RFC 4306: Internet Key Exchange (IKEv2)
Protocol, December 2005.
[19] C. Kaufman and R. Perlman.
PDM: A New Strong
Password-based Protocol. In USENIX Security Symposium,
2001.
[20] T. Kivinen and M. Kojo. RFC 3526: More Modular Ex-
ponential (MODP) Difﬁe-Hellman groups for Internet Key
Exchange (IKE), May 2003.
[21] T. Kwon. Authentication via Memorable Password. Sub-
mission to IEEE P1363, May 2000.
[22] M. Lepinski and S. Kent. RFC 5114: Additional Difﬁe-
Hellman Groups for Use with IETF Standards, Jan 2008.
[23] P. MacKenzie. The PAK suite. Submission to IEEE P1363,
May 2002.
[24] P. MacKenzie and R. Swaminathen. Secure Network Au-
thentication with Password Identiﬁcation. Submission to
IEEE P1363, August 1999.
[25] NIST.
The Keyed-Hash Message Authentication Code
(HMAC). FIPS Pub 198a.
[26] R. Oppliger, R. Hauser, and D. Basin.
SSL/TLS
session-aware user authentication – Or how to effectively
thwart the man-in-the-middle. Computer Communications,
29(12):2238–2246, August 2006.
[27] A. Perrig and D. Song. Hash Visualization: A New Tech-
nique to Improve Real World Security. In Intl. Workshop on
Cryptographic Techniques and E-commerce, 1999.
[28] J. Puthenkulam, V. Lortz, A. Palekar, and D. Simon. Inter-
net Draft: The Compound Authentication Binding Problem.
draft-puthenkulam-eap-binding-04.txt, October 2003.
[29] B. Schneier. Applied Cryptography, 2nd Edition. John Wiley
& Sons, Inc., New York, NY, 1996.
[30] T. Wu. The Secure Remote Password Protocol. In Network
and Distributed System Security Symposium, 1998.
[31] G. Zorn. RFC 2759: Microsoft PPP CHAP Extensions, Ver-
sion 2, January 2000.
452452