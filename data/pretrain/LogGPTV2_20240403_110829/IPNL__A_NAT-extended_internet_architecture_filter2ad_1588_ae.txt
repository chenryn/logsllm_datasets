### DNS Isolation and IPNL Addresses

DNS isolates all knowledge about Fully Qualified Domain Names (FQDNs) and IPNL addresses to the individual connections that generated this information. For example, consider a host X with an address Xa and FQDN X.com. Another host Y has an address Ya and pretends to have the FQDN X.com. Host Y anonymously accesses a respondent host R using address Ya and FQDN X.com. Host R creates a record for this specific connection (including port numbers and protocol) and remembers that the host has FQDN X.com and address Ya. Subsequently, when host X accesses respondent host R with address Xa and FQDN X.com, R creates another record for this specific connection without associating the two connections in any way. In other words, R never attempts to send a packet intended for host X’s connection to Ya, nor does it try to send a packet for host Y’s connection to Xa.

#### Security Considerations

We use the term "secure" in quotes here because we do not mean strong security. There are no secret keys or encryption involved. We assume that if a respondent host cares about non-anonymous accesses at the network layer, it has the means to learn the MRIPs of the host in advance.

### Handling Connection Changes

The complexity arises when packets to and from an initiating host need to go through a different frontdoor than the one learned in the initial packet. This must be done efficiently and in a trusted manner.

Efficiency is achieved through the use of the Used fields, as described in Section 4. The Used fields act as the "true" source address (the one that can be used to return packets), while the source IPNL address serves as an identifier only. Specifically, the source IPNL address tells the host who the packet came from, and the Used fields provide a new overloaded address that should be used subsequently.

### Preventing Spoofing

The RID (Random Identifier) is used to prevent a rogue host from trivially spoofing the Used fields to hijack packets. It works as follows: the initiating host picks a different random value for the RID for each connection. All packets in either direction for that connection contain the RID. Because a hijacking host cannot easily guess the RID, the respondent host can trust that the IPNL learned from the Used fields is indeed from the true initiating host. However, the RID does not protect against Man-in-the-Middle (MITM) attacks. For this, true security mechanisms such as HIP or IPsec are needed. The same applies to IPv4 or IPv6, which are not secure against MITM attacks in the absence of true security. The RID can also be used for mobility, providing the same level of hijack protection for anonymous access.

### Architectural Concerns

We are not entirely satisfied with the fact that IPNL requires three different mechanisms to achieve the level of hijack resistance that IPv4 has. The entire system feels somewhat cobbled together, lacking a strong architectural principle. The principle it does have—an overloaded address (the FQDN) with scalability based on caching rather than aggregation—is not usable in the common case of a heavily loaded server.

A stronger architectural principle could be a cryptographically strong host identifier. In HIP, the identifier is a 128-bit hash of a public key, represented in packets as a 32-bit tag (specifically, the IPsec SPI). If used in IPNL, the host identifier would replace the RID. A cryptographic identifier could also potentially replace the Used fields, as the originator of the packet would be identifiable from the host identity alone, so the source MRIP could always be that of the frontdoor through which the packet actually passed.

HIP is still under community review, so it is premature to say whether it or something similar will suffice. HIP has some associated costs, such as a Diffie-Hellman key exchange in a four-packet handshake, which might be prohibitive for heavily loaded servers. However, HIP includes a cookie challenge mechanism that makes DoS attacks harder, improving the situation for heavily loaded servers in certain ways.

### Performance Evaluation

We prototyped IPNL in the Linux 2.2.16 kernel by implementing the nl-router functionality in Click and the host functionality in the Linux TCP/IP stack. We modified about 50 files, mostly under the net/ipv4 kernel source subtree, to fully implement the host unicast algorithms and added a new element directory called ipnl under the elements subtree to implement the internal and frontdoor nl-router algorithms. The prototype testbed consisted of 8 Linux boxes acting as end-hosts—4 each in 2 sites, with each site consisting of 2 realms, and another 8 Linux boxes acting as nl-routers, with an internal nl-router for each realm and 2 frontdoor routers for each site. Each realm was configured with one DNS zone. We ran a simple BGP-like path vector protocol within each site to propagate both the realm reachability and FQDN routing information. The 2 frontdoor routers were used to test failover and load-balancing characteristics. Each of the two sites was interconnected by a network of 2 Bay Networks Passport 8600 routing switches that forwarded traffic between the 2 pairs of frontdoors. These routers simulated the middle realm and could only perform native IP forwarding.

We ran “netperf” TCP throughput benchmarks to measure the overhead due to IPNL. The NIC cards used in the Linux boxes were 3Com 3c905B 10/100 Fast Ethernet cards, which, without IPNL, could attain a 99.1 Mbits/sec throughput for a packet size of 1500 bytes. After adding the IPNL layer, we observed no degradation in throughput. We also performed latency tests associated with a connection failover due to a frontdoor failure. Using a routing protocol that refreshed routes every 5 seconds, the end-to-end connection was restored after about 3 seconds on average. Using a link-state protocol to propagate the link-down failure event provided much better response times.

### Related Work

#### Comparison with IPv6

It is interesting to compare IPNL with various IPv6 transition mechanisms because their addressing and forwarding semantics share some commonality with IPNL. In one transitional deployment of IPv6, IPv6 is tunneled over IPv4. A deployment in which only the NAT boxes and hosts spoke IPv6 and always tunneled over IPv4 could be considered an extension of NAT. Such an architecture is emerging from ngtrans, the IETF working group responsible for the transition from IPv4 to IPv6.

There are two ngtrans working group projects contributing to this. Neither project explicitly sees itself as a NAT extension per se. This is our interpretation. When we speak of a NAT box, we refer to the IPv6 router positioned where a NAT box is normally placed: between a site using private IPv4 addresses and the globally routable IPv4 infrastructure. We call this NAT box a v6NAT box.

One project, called 6to4, uses the global IP address of the v6NAT box as the prefix of the IPv6 addresses assigned to hosts behind the v6NAT box. When a packet with a 6to4 address arrives at a v6NAT box on its way out of a site, the v6NAT box reads the IPv4 address from the 6to4 prefix, writes it into the destination IPv4 address field of the tunneling IPv4 header, and transmits it across the globally routable IPv4 backbone.

The other project, ISATAP, is more recent. With ISATAP, the IPv4 address of the host is embedded in the lower 64 bits of the IPv6 address. As with 6to4, a v6NAT uses the embedded IPv4 address to automatically generate the appropriate tunneled IPv4 header. In the case of ISATAP, the automatic tunnel is created by the v6NAT receiving a packet from the globally routable IPv4 backbone destined for a host behind the v6NAT box.

6to4 and ISATAP alter the semantics of the IPv6 address and the operation of the IPv6 forwarding engine. Without 6to4 or ISATAP, the IPv6 address is treated as a simple bit-wise best-match routing table lookup to determine the next hop IPv6 node. With 6to4 or ISATAP, a simple best-match routing table lookup is no longer enough; the router must additionally find a specific field in the IPv6 address to determine the next hop. This change in the semantics of the IPv6 address to accommodate IPv4 leads us to characterize 6to4+ISATAP as a NAT-extended architecture.

The primary objection to a v6NAT approach might be that it does not improve the scaling characteristics of the Internet, as IPv4 would continue to run as-is. While this is true, there is concern that even "native" (non-6to4) IPv6 will not improve the situation even after widespread deployment. This is due to the renumbering requirements of IPv6 and the complexities of multi-homing, which may result in individual site prefixes being advertised across the Internet core. The IETF has chartered a new working group specifically to address these issues.

The primary difference between IPv6 tunneled over IPv4 and IPNL is that, even with 6to4+ISATAP, hosts must be aware of their address prefixes and must renumber when necessary. Another major difference is that once two IPv6 hosts start communicating with a given pair of addresses, they cannot change addresses, for instance, due to problems at the ISP connection point.

The GSE proposal by Mike O’Dell proposed fully separating the identifier portion of the IPv6 address (the lower 64 bits) from the prefix (the upper 64 bits). The purpose was to allow site multihoming by changing the prefix while still identifying the host. In this sense, GSE has parallels with IPNL. The major problem with GSE is that the identifier could not be used to do DNS (or any other kind of) lookups to verify the mapping of prefix to identifier. Another problem was that GSE was tied to the IPv6 header, which does not include a Random ID field, leading to unresolved hijacking problems.

#### Other Work

There are many recent efforts to provide enhanced services based on the notion of using FQDNs as persistent end-host identifiers.

TRIAD is a recently proposed Internet architecture aimed at supporting an explicit content layer. Two major components of TRIAD are name-based routing (DRP) and wide-area relaying protocol (WRAP). DRP uses FQDNs as the end-to-end identifier/address, and WRAP, like IPNL, is a NAT-extended architecture. The primary difference between DRP and IPNL is that DRP proposes to globally distribute routes to DNS domains through a traditional routing protocol, whereas IPNL uses DNS globally and traditional routing protocols only at the edges. Because of this, despite DNS aggregation, NBR is unlikely to scale adequately, as there are far more top-level domains (under .com, .org, etc.) than there are top-level IPv4 aggregations. Furthermore, WRAP uses stateful address translators, which, while providing symmetric addressing, have the same well-known disadvantages of NATs—lack of robustness, scalability problems, and costly setup.

In another work, the authors use FQDNs as identifiers and dynamically update DNS as part of an end-to-end approach to support host mobility. Their focus is on providing a better mobility solution than Mobile IP. While IPNL does not require modifications to DNS to support mobility, their approach relies on a securely-updateable DNS. The downside of not using secure DNS (or some other alternative such as a certificate infrastructure) is to introduce a certain amount of inelegance and uncertainty, as described in detail in Section 5.

### Next Steps

IPNL has several interesting and promising characteristics, such as mechanisms for site isolation and scalable multihoming. However, it is premature to make definitive statements about its effectiveness. IPNL is a major new architecture, and it will take considerable time, thought, and implementation experience from a broad community to convincingly demonstrate its viability.

Earlier in this paper, we argued that IPNL may be easier to deploy than IPv6 because it has two phases of deployment rather than three. This statement is only partially true. Before these three "box deployment" phases, there are at least three preliminary phases:

1. Standardization
2. Obtaining mindshare
3. Vendor implementation

Despite ongoing problems with IPv6, it has at least a 5-year head start on these preliminary phases. Given this, an appropriate future for IPNL might be to pursue it as a community research project (perhaps under the auspices of the IRTF) and for IPv6 to incorporate whatever aspects of IPNL make sense.

### Acknowledgments

We thank Prof. Hari Balakrishnan for his valuable comments on earlier drafts of this paper. We also thank the anonymous reviewers for their useful comments and suggestions, which helped improve the paper.

### References

[1] S. Bradner, A. Mankin, J. Schiller, “A Framework for Purpose Built Keys (PBK)”, Internet Draft, draft-bradner-pbk-frame-00.txt, February 2001.
[2] B. Carpenter, K. Moore, “Connection of IPv6 Domains via IPv4 Clouds”, RFC3056, February 2001.
[3] I. Castineyra, N. Chiappa, M. Steenstrup, “The Nimrod Routing Architecture”, RFC1992, August 1996.
[4] D. R. Cheriton, M. Gritter, “TRIAD: A Scalable Deployable NAT-based Internet Architecture”, Stanford Computer Science Technical Report, January 2000.
[5] M. Crawford, “Router Renumbering for IPv6”, RFC2894, August 2000.
[6] S. Deering, R. Hinden, “Internet Protocol, Version 6 (IPv6) Specification”, RFC2460, December 1998.
[7] Mike O’Dell, “GSE-an alternate addressing architecture for IPv6”, Internet Draft, draft-ietf-ipngwg-gseaddr-00.txt, February 1997.
[8] R. Droms, “Dynamic Host Configuration Protocol”, RFC1541, March 1997.
[9] K. Egevang, P. Francis, “The IP Network Address Translator (NAT)”, RFC1631, May 1994.
[10] P. Francis, “Pip Near-term Architecture”, RFC1621, May 1994.
[11] P. Francis, R. Gummadi, “IPNL Protocol Specification”; available from http://www.ipnl.net/spec/
[12] P. Gross, P. Almquist, “IESG Deliberations on Routing and Addressing”, RFC1380, November 1992.
[13] M. Handley, H. Schulzrinne, E. Schooler, J. Rosenberg, “SIP: Session Initiation Protocol”, RFC2543, March 1999.
[14] R. Hinden, S. Deering, “IP Version 6 Addressing Architecture”, RFC2373, July 1998.
[15] S. Kent, R. Atkinson, “IP Encapsulating Security Payload (ESP)”, RFC2406, November 1998.
[16] E. Kohler, R. Morris, B. Chen, J. Jannotti, and F. Kaashoek, “The Click Modular Router”, ACM Transactions on Computer Systems, 18(3), August 2000.
[17] R. Moskowitz, “Host Identity Payload Architecture”, Internet Draft, draft-moskowitz-hip-arch-02.txt, February 2001.
[18] http://www.netperf.org
[19] C. Perkins, Editor, “IP Mobility Support”, RFC2002, October 1996.
[20] C. Rigney, A. Rubens, W. Simpson, S. Willens, “Remote Authentication Dial In User Service (RADIUS)”, RFC2138, April 1997.
[21] J. Saltzer, “On the Naming and Binding of Network Destinations”, RFC1498, August 1993.
[22] Site Multihoming in IPv6 (multi6), http://www.ietf.org/html.charters/multi6-charter.html
[23] A. Snoeren, H. Balakrishnan, “An End-to-End Approach to Host Mobility”, Proc. of 6th ACM/IEEE International Conference on Mobile Computing and Networking (Mobicom ’00), August 2000.
[24] F. Templin, “Intra-Site Automatic Tunnel Addressing Protocol (ISATAP)”, Internet Draft, draft-ietf-ngtrans-isatap-00.txt, March 2001.