from DNS. It isolates all knowledge about FQDNs and IPNL ad-
dresses to the individual connections that produced that knowledge.
For example, say host X has address Xa and FQDN X.com. An-
other host Y has address Ya, and pretends to have FQDN X.com.
Host Y anonymously accesses respondent host R with address Ya
and FQDN X.com. R creates a record for this speciﬁc connection
(i.e. the port numbers and protocol), and remembers that the host
has FQDN X.com and address Ya. Next host X accesses respon-
dent host R with address Xa and FQDN X.com. R simply creates
another record for this speciﬁc connection and does not associate
the two connections in any way. In other words, it never tries to
We “secure” in quotes here because we don’t mean strong secu-
rity. There are no secret keys or encryption involved.
We assume that
if a respondent host does care about non-
anonymous accesses at the network layer, it has the wherewithal
to learn the MRIPs of the host in advance.
send a packet for host X’s connection to Ya, nor does it try to send
a packet for host Y’s connection to Xa.
The tricky part comes when packets to and from an initiating
host need to go through a different frontdoor than the one learned
in the initial packet. This must be done in an efﬁcient and trusted
way.
The efﬁciency comes from the use of the Used ﬁelds, as already
described in Section 4. We mention it again here just to point out
the architectural role that the IPNL address ﬁelds are playing when
a packet with new Used ﬁelds arrives. Speciﬁcally, the Used ﬁelds
play the role of the “true” source address (the one that can be used
to return packets), and the source IPNL address plays the role of an
identiﬁer only. In other words, the source IPNL address tells the
host who the packet came from, and the Used ﬁelds provide a new
overloaded address that should be used subsequently.
The RID is used to prevent a rogue host from trivially spoof-
ing the Used ﬁelds to hijack packets, and works as follows: The
initiating host picks a different random value for the RID for each
connection. All packets in either direction for that connection con-
tain the RID. Because a hijacking host cannot easily guess the RID,
the respondent host can trust that the IPNL learned from the Used
ﬁelds is indeed from the true initiating host. Of course the RID
does not protect against MITM attacks. For this, true security is
needed (HIP or IPsec). The same can be said for IPv4 or IPv6.
Neither of these are secure against a MITM attack in the absence
of true security. Note that the RID can also be used for mobility
while providing the same amount of hijack protection for anony-
mous access.
As already mentioned, we are not entirely happy with the fact
that IPNL requires three different mechanisms to achieve the level
of hijack resistance that IPv4 has. The whole thing has a certain
cobbled together feel about it that smacks of lacking a strong archi-
tectural principle. The thing it lacks is that the architectural prin-
ciple that it does have—an overloaded address (the FQDN) with
scalability based on caching rather than aggregation—is not usable
in the common case of a heavily loaded server.
A stronger architectural principle from which IPNL might bene-
ﬁt is a cryptographically strong host identiﬁer. In HIP, the identiﬁer
is a 128-bit hash of a public key which is subsequently represented
in packets as a 32-bit tag (speciﬁcally, the IPsec SPI [15]). If used
in IPNL, the host identiﬁer would take the place of the RID.
A cryptographic identiﬁer could also potentially take the place of
the Used ﬁelds. This is because the originator of the packet would
be identiﬁable from the host identity alone, so the source MRIP
could always be that of the frontdoor through which the packet ac-
tually passed.
HIP is still in the process of receiving community review, so it
is premature to say whether it or something similar will sufﬁce.
HIP certainly has some cost associated with it—a Difﬁe-Hellman
key exchange in a four packet handshake. It is possible that these
costs are also prohibitive for the heavily loaded server case. Hav-
ing said that, HIP has a cookie challenge mechanism that makes
DoS attacks harder, so in certain ways it improves the situation for
heavily loaded servers.
6. PERFORMANCE EVALUATION
We prototyped IPNL in the Linux 2.2.16 kernel by implementing
the nl-router functionality in Click [16], and the host functionality
in the Linux TCP/IP stack. We altered about 50 ﬁles, most of them
under the net/ipv4 kernel source subtree, to fully implement the
host unicast algorithms, and added a new element directory called
ipnl under the elements subtree to implement the internal and
frontdoor nl-router algorithms. The prototype testbed consisted of
8 Linux boxes acting as end-hosts—4 each in 2 sites, with each
site consisting of 2 realms, and another 8 Linux boxes acting as nl-
routers, with an internal nl-router for each realm, and 2 frontdoor
routers for each site. Each realm was conﬁgured with one DNS
zone. We ran a simple BGP-like path vector protocol within each
site to propagate both the realm reachability and FQDN routing
information. The 2 frontdoor routers were to test the failover and
load-balancing characteristics of the routing algorithms (the routing
protocol sent trafﬁc from each of the two internal nl-routers in each
site to a different frontdoor under normal conditions, and to the
remaining frontdoor under one frontdoor failure). Each of the two
sites was interconnected by a network of 2 Bay networks Passport
8600 routing switches that forwarded the trafﬁc between the 2 pairs
of frontdoors. These routers simulated the middle realm, and could
do only native IP forwarding.
We ran “netperf” [18] TCP throughput benchmarks to measure
the overhead due to IPNL. The NIC cards used in the Linux boxes
were 3Com 3c905B 10/100 Fast Ethernet cards, that could, without
IPNL, attain a 99.1 Mbits/sec throughput for a packet size of 1500
bytes. After IPNL layer was added, we could see no degradation
in the throughput at all. We also performed latency tests associated
with a connection failover due to a frontdoor failure. Using a rout-
ing protocol that refreshed routes every 5 seconds, the end-to-end
connection was restored after about 3 seconds on average. Using
a link-state protocol to propagate the link-down failure event gave
much better response times.
Realm
Hosts
Site
Interior NL router
Frontdoor
Figure 5: Layout of the Implementation Testbed
7. RELATED WORK
7.1 Comparison with IPv6
It is interesting to compare IPNL with various IPv6 transition
mechanisms because their addressing and forwarding semantics
share some commonality with IPNL. In one of the transitional de-
ployments of IPv6, IPv6 is tunneled over IPv4. A deployment in
which only the NAT boxes and hosts spoke IPv6 and always tun-
neled over IPv4 could be considered an extension of NAT. As it so
happens, such an architecture is emerging from ngtrans, the IETF
working group responsible for transition from IPv4 to IPv6.
There are two separate ngtrans working group projects contribut-
ing to this. Neither project explicitly sees itself as a NAT extension
per se. This is purely our interpretation. As such, it should be un-
derstood that when we speak of a NAT box in what follows, we are
referring to the IPv6 router that is positioned where a NAT box is
normally positioned: between a site using private IPv4 addresses,
and the globally routable IPv4 infrastructure. We call this NAT box
a v6NAT box.
One of the projects, called 6to4 [2], uses the global IP address
of the v6NAT box14 as the preﬁx of the IPv6 addresses assigned to
hosts behind the v6NAT box. When a packet with a 6to4 address
arrives at a v6NAT box on its way out of a site, the v6NAT box reads
the IPv4 address from the 6to4 preﬁx, writes it into the destination
IPv4 address ﬁeld of the tunneling IPv4 header, and transmits it
across the globally routable IPv4 backbone.
The other project, called ISATAP [24], is much more recent.
With ISATAP, the IPv4 address of the host is embedded in the lower
64 bits of the IPv6 address. As with 6to4, a v6NAT uses the em-
bedded IPv4 address to automatically generate the appropriate tun-
neled IPv4 header In the case of ISATAP, however, the automatic
tunnel is created by the v6NAT receiving a packet from the globally
routable IPv4 backbone destined for a host behind the v6NAT box.
6to4 and ISATAP are unique among IPv6 transition tools in that
they alter the semantics of the IPv6 address and the operation of the
IPv6 forwarding engine! Without 6to4 or ISATAP, the IPv6 address
is treated as a simple bit-wise best-match routing table lookup to
determine the next hop IPv6 node. With 6to4 or ISATAP, a simple
best-match routing table lookup is no longer enough to determine
the next-hop: the router must additionally ﬁnd a speciﬁc ﬁeld in
the IPv6 address and use that to determine the next hop. It is this
change in the semantics of the IPv6 address to accommodate IPv4
that leads us to characterize 6to4+ISATAP as a NAT-extended ar-
chitecture.
The primary objection to a v6NAT approach might be that it does
not improve the scaling characteristics of the Internet, since IPv4
would continue to run as-is. While this is true, we point out that
there is concern that even “native” (non-6to4) IPv6 will not im-
prove on this situation even after it is widely deployed. This is
because the renumbering requirements of IPv6 and complexities of
multi-homing may result in individual site preﬁxes being advertised
across the Internet core. Indeed there is enough concern here that
the IETF has chartered a new working group speciﬁcally to look at
these issues [22].
The primary difference between IPv6 tunneled over IPv4 and
IPNL is that, even with 6to4+ISATAP, hosts must be aware of their
address preﬁxes and must renumber when necessary. Another ma-
jor difference is that once two IPv6 hosts start communicating with
a given pair of addresses, they cannot change addresses, for in-
stance, because of problems at the ISP connection point.
The GSE proposal of Mike O’Dell [7] proposed fully separating
the identiﬁer portion of the IPv6 address (the lower 64 bits) from
the preﬁx (the upper 64 bits). The purpose of this was, among other
things, to allow site multihoming by being able to change the preﬁx
while still identifying the host. In this sense, GSE has parallels with
IPNL.
The major problem with GSE is that the identiﬁer could not be
used to do DNS (or any other kind of) lookups to verify the map-
ping of preﬁx to identiﬁer. Another problem was that GSE was tied
to the IPv6 header, which does not include a Random ID ﬁeld. As
a result, GSE had unresolved hijacking problems.
RFC 3056 itself does not refer to NAT boxes, but rather to “6to4
routers” that are “normally the border router between an IPv6 site
and a wide-area IPv4 network”. This is exactly where the NAT
function resides.
7.2 Other Work
There are many recent efforts [4] [23] to provide enhanced ser-
vices based on the notion of using FQDNs as persistent end-host
identiﬁers.
TRIAD [4] is a recently proposed Internet architecture whose
goal is to support an explicit content layer. Two of the major com-
ponents of TRIAD are name-based routing (DRP), and wide-area
relaying protocol (WRAP). These two components share two prop-
erties with IPNL. DRP uses FQDNs as the end-to-end identiﬁer/address.
WRAP, like IPNL, is a NAT-extended architecture. The primary
difference between DRP and IPNL is that DRP proposes to glob-
ally distribute routes to DNS domains through a traditional rout-
ing protocol whereas IPNL uses DNS globally and traditional rout-
ing protocols only at the edges. Because of this, in spite of DNS
aggregation, NBR is not likely to scale adequately—there are far
more top-level domains (those under .com, .org, etc) than there
are top-level IPv4 aggregations. Furthermore, WRAP uses stateful
address translators that, while providing symmetric addressing15,
have the same well-known disadvantages of NATs—lack of robust-
ness, scalability problems, and costly setup.
In [23], the authors use FQDNs as identiﬁers, and dynamically
update DNS as part of an end-to-end approach towards supporting
host mobility. Their focus is on providing a better mobility solution
than Mobile IP [19]. While IPNL does not require any modiﬁca-
tions to DNS to support mobility, their approach [23] relies on a
securely-updateable DNS. The downside of not using secure DNS
(or some other alternative such as a certiﬁcate infrastructure) is to
introduce a certain amount of inelegance and uncertainty, as de-
scribed in detail in Section 5.
8. NEXT STEPS
IPNL has a number of interesting and even promising character-
istics, such as the various mechanisms for site isolation and scalable
multihoming. It is premature, however, to say anything deﬁnitive
about it. IPNL is a major new architecture, and it will take a lot of
time, thought, and implementation experience from a broad com-
munity to be able to say convincingly that it works and works well.
Earlier in this paper, we argued that IPNL may be easier to de-
ploy than IPv6 because it has two phases of deployment rather than
three. This statement is only partially true. Before these three “box
deployment” phases, there are at least three preliminary phases:
1. Standardization
2. Obtaining mindshare
3. Vendor implementation
In spite of the ongoing problems with IPv6, it has at least a 5 year
head-start on the above three preliminary phases.
Given all this, an appropriate future for IPNL might be to pursue
it as a community research project (perhaps under the auspices of
the IRTF), and for IPv6 to incorporate whatever aspects of IPNL
make sense.
ACKNOWLEDGMENTS
We thank Prof. Hari Balakrishnan for his valuable comments on
earlier drafts of this paper. We also thank the anonymous reviewers
for their useful comments and suggestions which helped improve
the paper.
This requires host protocol changes.
9. REFERENCES
[1] S. Bradner, A. Mankin, J. Schiller, “ A Framework for
Purpose Built Keys (PBK)”, Internet Draft,
draft-bradner-pbk-frame-00.txt, February 2001.
[2] B. Carpenter, K. Moore, “Connection of IPv6 Domains via
IPv4 Clouds”, RFC3056, February 2001.
[3] I. Castineyra, N. Chiappa, M. Steenstrup, “The Nimrod
Routing Architecture”, RFC1992, August 1996.
[4] D. R. Cheriton, M. Gritter, “TRIAD: A Scalable Deployable
NAT-based Internet Architecture”, Stanford Computer
Science Technical Report, January 2000.
[5] M. Crawford, “Router Renumbering for IPv6”, RFC2894,
August 2000.
[6] S. Deering, R. Hinden, “Internet Protocol, Version 6 (IPv6)
Speciﬁcation”, RFC2460, December 1998.
[7] Mike O’Dell, “GSE-an alternate addressing architecture for
IPv6”, Internet Draft, draft-ietf-ipngwg-gseaddr-00.txt,
February 1997.
[8] R. Droms, “Dynamic Host Conﬁguration Protocol”,
RFC1541, March 1997.
[9] K. Egevang, P. Francis, “The IP Network Address Translator
(NAT)”, RFC1631, May 1994.
[10] P. Francis, “Pip Near-term Architecture”, RFC1621, May
1994.
[11] P. Francis, R. Gummadi, “IPNL Protocol Speciﬁcation”;
available from http://www.ipnl.net/spec/
[12] P. Gross, P. Almquist, “IESG Deliberations on Routing and
Addressing”, RFC1380, November 1992.
[13] M. Handley, H. Schulzrinne, E. Schooler, J. Rosenberg,
“SIP: Session Initiation Protocol”, RFC2543, March 1999.
[14] R. Hinden, S. Deering, “IP Version 6 Addressing
Architecture”, RFC2373, July 1998.
[15] S. Kent, R. Atkinson, “IP Encapsulating Security Payload
(ESP)”, RFC2406, November 1998.
[16] E. Kohler, R. Morris, B. Chen, J. Jannotti, and F. Kaashoek,
“The Click Modular Router”, ACM Transactions on
Computer Systems, 18(3), August 2000.
[17] R. Moskowitz, “Host Identity Payload Architecture”, Internet
Draft, draft-moskowitz-hip-arch-02.txt, February 2001.
[18] http://www.netperf.org
[19] C. Perkins, Editor, “IP Mobility Support”, RFC2002,
October 1996.
[20] C. Rigney, A. Rubens, W. Simpson, S. Willens, “Remote
Authentication Dial In User Service (RADIUS)”, RFC2138,
April 1997.
[21] J. Saltzer, “On the Naming and Binding of Network
Destinations”, RFC1498, August 1993.
[22] Site Multihoming in IPv6 (multi6),
http://www.ietf.org/html.charters/multi6-charter.html
[23] A. Snoeren, H. Balakrishnan, “An End-to-End Approach to
Host Mobility”, Proc. of 6th ACM/IEEE International
Conference on Mobile Computing and Networking
(Mobicom ’00), August 2000.
[24] F. Templin, “Intra-Site Automatic Tunnel Addressing
Protocol (ISATAP)”, Internet Draft,
draft-ietf-ngtrans-isatap-00.txt, March 2001.