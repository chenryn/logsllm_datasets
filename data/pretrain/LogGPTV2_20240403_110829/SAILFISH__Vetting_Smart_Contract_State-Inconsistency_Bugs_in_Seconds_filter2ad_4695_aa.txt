title:SAILFISH: Vetting Smart Contract State-Inconsistency Bugs in Seconds
author:Priyanka Bose and
Dipanjan Das and
Yanju Chen and
Yu Feng and
Christopher Kruegel and
Giovanni Vigna
1
2
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
SAILFISH: Vetting Smart Contract
State-Inconsistency Bugs in Seconds
Priyanka Bose, Dipanjan Das, Yanju Chen, Yu Feng, Christopher Kruegel, and Giovanni Vigna
University of California, Santa Barbara
{priyanka, dipanjan, yanju, yufeng, chris, vigna}@cs.ucsb.edu
Abstract—This paper presents SAILFISH, a scalable system for
automatically ﬁnding state-inconsistency bugs in smart contracts.
To make the analysis tractable, we introduce a hybrid approach
that includes (i) a light-weight exploration phase that dramati-
cally reduces the number of instructions to analyze, and (ii) a pre-
cise reﬁnement phase based on symbolic evaluation guided by our
novel value-summary analysis, which generates extra constraints
to over-approximate the side effects of whole-program execution,
thereby ensuring the precision of the symbolic evaluation. We
developed a prototype of SAILFISH and evaluated its ability to
detect two state-inconsistency ﬂaws, viz., reentrancy and trans-
action order dependence (TOD) in Ethereum smart contracts.
Our experiments demonstrate the efﬁciency of our hybrid
approach as well as the beneﬁt of the value summary analysis.
In particular, we show that SAILFISH outperforms ﬁve state-of-
the-art smart contract analyzers (SECURIFY, MYTHRIL, OYENTE,
SEREUM and VANDAL) in terms of performance, and precision.
In total, SAILFISH discovered 47 previously unknown vulnerable
smart contracts out of 89,853 smart contracts from ETHERSCAN.
I. INTRODUCTION
Smart contracts are programs running on top of the Ethereum
blockchain. Due to the convenience of high-level programming
languages like SOLIDITY and the security guarantees from
the underlying consensus protocol, smart contracts have seen
widespread adoption, with over 45 million [16] instances
covering financial products [6], online gaming [9], real estate,
and logistics. Consequently, a vulnerability in a contract can lead
to tremendous losses, as demonstrated by recent attacks [15],
[14], [12], [21]. For instance, the notorious “TheDAO” [11]
reentrancy attack led to a financial loss of about $50M in 2016.
Furthermore, in recent years, several other reentrancy attacks,
e.g., Uniswap [17], Burgerswap [7], Lendf.me [8], resulted in
multimillion dollar losses. To make things worse, smart contracts
are immutable—once deployed, the design of the consensus
protocol makes it particularly difficult to fix bugs. Since smart
contracts are not easily upgradable, auditing the contract’s source
pre-deployment, and deploying a bug-free contract is even more
important than in the case of traditional software.
In this paper, we present a scalable technique to detect state-
inconsistency (SI) bugs—a class of vulnerabilities that enables an
attacker to manipulate the global state, i.e., the storage variables
of a contract, by tampering with either the order of execution of
multiple transactions (transaction order dependence (TOD)), or
the control-flow inside a single transaction (reentrancy). In those
attacks, an attacker can tamper with the critical storage variables
that
transitively have an influence on money transactions
through data or control dependency. Though “TheDAO” [11]
is the most well-known attack of this kind, through an offline
analysis [59], [50] of the historical on-chain data, researchers
have uncovered several instances of past attacks that leveraged
state-inconsistency vulnerabilities.
While there are existing tools for detecting vulnerabilities
due to state-inconsistency bugs, they either aggressively over-
approximate the execution of a smart contract, and report false
alarms [54], [36], or they precisely enumerate [3], [46] concrete
or symbolic traces of the entire smart contract, and hence, cannot
scale to large contracts with many paths. Dynamic tools [50], [59]
scale well, but can detect a state-inconsistency bug only when
the evidence of an active attack is present. Moreover, existing
tools adopt a syntax-directed pattern matching that may miss
bugs due to incomplete support for potential attack patterns [54].
A static analyzer for state-inconsistency bugs is crucial for
pre-deployment auditing of smart contracts, but designing such
a tool comes with its unique set of challenges. For example, a
smart contract exposes public methods as interfaces to interact
with the outside world. Each of these methods is an entry point
to the contract code, and can potentially alter the persistent
state of the contract by writing to the storage variables. An
attacker can invoke any method(s), any number of times, in
any arbitrary order—each invocation potentially impacting the
overall contract state. Since different contracts can communicate
with each other through public methods, it is even harder to
detect a cross-function attack where the attacker can stitch
calls to multiple public methods to launch an attack. Though
SEREUM [50] and ECFCHECKER [37] detect cross-function
attacks, they are dynamic tools that reason about one single
execution. However, statically detecting state-inconsistency bugs
boils down to reasoning about the entire contract control and
data flows, over multiple executions. This presents significant
scalability challenges, as mentioned in prior work [50].
This paper presents SAILFISH, a highly scalable tool that is
aimed at automatically identifying state-inconsistency bugs in
smart contracts. To tackle the scalability issue associated with stat-
ically analyzing a contract, SAILFISH adopts a hybrid approach
that combines a light-weight EXPLORE phase, followed by a RE-
FINE phase guided by our novel value-summary analysis, which
constrains the scope of storage variables. Our EXPLORE phase
dramatically reduces the number of relevant instructions to reason
about, while the value-summary analysis in the REFINE phase
further improves performance while maintaining the precision
of symbolic evaluation. Given a smart contract, SAILFISH first
introduces an EXPLORE phase that converts the contract into a
© 2022, Priyanka Bose. Under license to IEEE.
DOI 10.1109/SP46214.2022.00072
161
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
storage dependency graph (SDG) G. This graph summarizes the
side effects of the execution of a contract on storage variables in
terms of read-write dependencies. State-inconsistency vulnerabil-
ities are modeled as graph queries over the SDG structure. A vul-
nerability query returns either an empty result—meaning that the
contract is not vulnerable, or a potentially vulnerable subgraph
g inside G that matches the query. In the second case, there are
two possibilities: either the contract is indeed vulnerable, or g is
a false alarm due to the over-approximation of the static analysis.
To prune potential false alarms, SAILFISH leverages a REFINE
phase based on symbolic evaluation. However, a conservative
symbolic executor would initialize the storage variables as un-
constrained, which would, in turn, hurt the tool’s ability to prune
many infeasible paths. To address this issue, SAILFISH incorpo-
rates a light-weight value-summary analysis (VSA) that summa-
rizes the value constraints of the storage variables, which are used
as the pre-conditions of the symbolic evaluation. Unlike prior
summary-based approaches [31], [34], [20] that compute sum-
maries path-by-path, which results in full summaries (that encode
all bounded paths through a procedure), leading to scalability
problems due to the exponential growth with procedure size, our
VSA summarizes all paths through a finite (loop-free) procedure,
and it produces compact (polynomially-sized) summaries. As our
evaluation shows, VSA not only enables SAILFISH to refute more
false positives, but also scales much better to large contracts com-
pared to a classic summary-based symbolic evaluation strategy.
from
ETHERSCAN [16] (89,853 contracts), and showed that our tool
is efficient and effective in detecting state-inconsistency bugs.
SAILFISH significantly outperforms all five state-of-the-art
smart contract analyzers we evaluated against, in the number
of reported false positives and false negatives. For example, on
average SAILFISH took only 30.79 seconds to analyze a smart
contract, which is 31 times faster than MYTHRIL [3], and six
orders of magnitude faster than SECURIFY [54].
We evaluated SAILFISH on the entire data set
• We propose a novel value-summary analysis that efficiently
computes global constraints over storage variables, which
when combined with symbolic evaluation, enables
SAILFISH to significantly reduce false alarms. (Section VI)
• We perform a systematic evaluation of SAILFISH on the
entire data set from ETHERSCAN. Not only does SAILFISH
outperforms state-of-the-art smart contract analyzers in
terms of both run-time and precision, but also is able to
uncover 47 zero-day vulnerabilities (out of 195 contracts
that we could manually analyze) not detected by any other
tool. (Section VIII)
In summary, this paper makes the following contributions:
• We define state-inconsistency vulnerabilities and identify
two of its root-causes (Section III), including a new
reentrancy attack pattern that has not been investigated in
the previous literature.
• We model state-inconsistency detection as hazardous access
queries over a unified, compact graph representation (called
a storage dependency graph (SDG)), which encodes the
high-level semantics of smart contracts over global states.
(Section V)
• In the spirit of open science, we pledge to release both the
tool and the experimental data to further future research.
II. BACKGROUND
This section introduces the notion of the state of a smart
contract, and provides a brief overview of the vulnerabilities
leading to an inconsistent state during a contract’s execution.
Smart contract. Ethereum smart contracts are written in high-
level languages like SOLIDITY, VYPER, etc., and are compiled
down to the EVM (Ethereum Virtual Machine) bytecode. Pub-
lic/external methods of a contract, which act as independent entry
points of interaction, can be invoked in two ways: either by a
transaction, or from another contract. We refer to the invocation
of a public/external method from outside the contract as an event.
Note that events exclude method calls originated from inside the
contract, i.e., a method f calling another method g. A schedule
H is a valid sequence of events that can be executed by the EVM.
The events of a schedule can originate from one or more transac-
tions. Persistent data of a contract is stored in the storage variables
which are, in turn, recorded in the blockchain. The contract state
∆ = (V,B) is a tuple, where V ={V1,V2,V3,...,Vn} is the set of
all the storage variables of a contract, and B is its balance.
State inconsistency (SI). When the events of a schedule H
execute on an initial state ∆ of a contract, it reaches the final
state ∆(cid:48). However, due to the presence of several sources of non-
determinism [55] during the execution of a smart contract on the
Ethereum network, ∆(cid:48) is not always predictable. For example,
two transactions are not guaranteed to be processed in the order in
which they got scheduled. Also, an external call e originated from
a method f of a contract C can transfer control to a malicious
actor, who can now subvert the original control and data-flow
by re-entering C through any public method f(cid:48) ∈C in the same
transaction, even before the execution of f completes. Let H1 be
a schedule that does not exhibit any of the above-mentioned non-
deterministic behavior. However, due to either reordering of trans-
actions, or reentrant calls, it might be possible to rearrange the
events of H1 to form another schedule H2. If those two schedules
individually operate on the same initial state ∆, but yield different
final states, we consider the contract to have a state-inconsistency.
Reentrancy. If a contract A calls another contract B, the