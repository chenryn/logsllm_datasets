            enc-part
                etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)
                kvno: 4
                cipher: 70246fe54be2b6395f20dc6845b970d16bb3319ab304e3bb…
主要关注与AS_REQ不同的点
  * ticket
这就是AS派发的TGT票据，内部所有密文的密钥都是`krbtgt`的`NTLM hash`，如果能拿到`krbtgt`的`NTLM
hash`我们既可以伪造TGT，这就是`黄金票据`
    * tkt-vno
票据版本
    * realm
派发票据的KDC的所属域
    * sname
派发票据的角色再KDC的身份，一般是`kbrtgt`
    * enc-part
使用`kbrtgt`的`NTLM hash`作为密钥生成的TGT主体
  * enc-part
这部分是使用Client的hash为key加密`Session key`得到的，主要用于作为下阶段(TGS阶段)的认证密钥。
### AS阶段的安全问题
#### 用户名枚举
在AS认证截断，用户名存在和密码错误的响应报文错误码不同，
  * 用户名不存在的响应错误码是`6:KDC_ERR_C_PRINCIPAL_UNKNOWN 未知的主机名`
  * 密码错误，用户名存在的响应错误码是`24:KDC_ERR_PREAUTH_PAILED 预认证失败`
通过这个比较AS_REP里的错误码就可实行 **_用户名枚举_** .
#### 黄金票据
AS_ERP里的tikcet的encpart是使用`kbrtgt`的`NTLM hash`为`key`加密而成的,所以只要拿到了`kbrtgt`的`NTLM
hash`就可以伪造TGT，这个伪造出来的票据就叫做 **_黄金票据_**
## TGS_REQ
**_拆解数据包_**
    Frame 40: 62 bytes on wire (496 bits), 62 bytes captured (496 bits) on interface \Device\NPF_{FBDB2B2D-DEF3-473C-87EF-787E4B606694}, id 0
    Ethernet II, Src: VMware_f0:d8:2b (00:0c:29:f0:d8:2b), Dst: VMware_e6:ab:e6 (00:0c:29:e6:ab:e6)
    Internet Protocol Version 4, Src: 192.168.1.2, Dst: 192.168.1.1
    Transmission Control Protocol, Src Port: 49731, Dst Port: 88, Seq: 1461, Ack: 1, Len: 8
    [2 Reassembled TCP Segments (1468 bytes): #39(1460), #40(8)]
    Kerberos
        Record Mark: 1464 bytes
        tgs-req
            pvno: 5
            msg-type: krb-tgs-req (12)
            padata: 2 items
                PA-DATA PA-TGS-REQ
                    padata-type: kRB5-PADATA-TGS-REQ (1)
                        padata-value: 6e8204f4308204f0a003020105a10302010ea20703050000…
                PA-DATA PA-PAC-OPTIONS
                    padata-type: kRB5-PADATA-PAC-OPTIONS (167)
                        padata-value: 3009a00703050040000000
            req-body
                Padding: 0
                kdc-options: 40810000
                    0... .... = reserved: False
                    .1.. .... = forwardable: True
                    ..0. .... = forwarded: False
                    ...0 .... = proxiable: False
                    .... 0... = proxy: False
                    .... .0.. = allow-postdate: False
                    .... ..0. = postdated: False
                    .... ...0 = unused7: False
                    1... .... = renewable: True
                    .0.. .... = unused9: False
                    ..0. .... = unused10: False
                    ...0 .... = opt-hardware-auth: False
                    .... 0... = unused12: False
                    .... .0.. = unused13: False
                    .... ..0. = constrained-delegation: False
                    .... ...1 = canonicalize: True
                    0... .... = request-anonymous: False
                    .0.. .... = unused17: False
                    ..0. .... = unused18: False
                    ...0 .... = unused19: False
                    .... 0... = unused20: False
                    .... .0.. = unused21: False
                    .... ..0. = unused22: False
                    .... ...0 = unused23: False
                    0... .... = unused24: False
                    .0.. .... = unused25: False
                    ..0. .... = disable-transited-check: False
                    ...0 .... = renewable-ok: False
                    .... 0... = enc-tkt-in-skey: False
                    .... .0.. = unused29: False
                    .... ..0. = renew: False
                    .... ...0 = validate: False
                realm: HACKE.TESTLAB
                sname
                    name-type: kRB5-NT-SRV-HST (3)
                    sname-string: 2 items
                        SNameString: host
                        SNameString: win10-x64-test.hacke.testlab
                till: 2037-09-13 02:48:05 (UTC)
                nonce: 19595592
                etype: 5 items
                    ENCTYPE: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)
                    ENCTYPE: eTYPE-AES128-CTS-HMAC-SHA1-96 (17)
                    ENCTYPE: eTYPE-ARCFOUR-HMAC-MD5 (23)
                    ENCTYPE: eTYPE-ARCFOUR-HMAC-MD5-56 (24)
                    ENCTYPE: eTYPE-ARCFOUR-HMAC-OLD-EXP (-135)
  * msg-type
windows消息格式，krb-tgs-req
  * padata
这部分携带了TGS_REQ最重要的数据—TGT票据，TGT票据以ap-req的形式存放在数据包之中。KDC会校验TGT，如果正确就返回TGS票据
这部分数据和还包含PAC和S4U2SELF,这个之后其他文章单独说
  * req-body
格式和之前的请求报文基本一致，只是这里的 _sname_ 换成了 ** _Client_** 想要请求服务的 ** _Server_** 的名字
## TGS_REP
**_数据包拆解_**
    Kerberos
        Record Mark: 1495 bytes
            0... .... .... .... .... .... .... .... = Reserved: Not set
            .000 0000 0000 0000 0000 0101 1101 0111 = Record Length: 1495
        tgs-rep
            pvno: 5
            msg-type: krb-tgs-rep (13)
            crealm: HACKE.TESTLAB
            cname
                name-type: kRB5-NT-PRINCIPAL (1)
                cname-string: 1 item
                    CNameString: testuser
            ticket
                tkt-vno: 5
                realm: HACKE.TESTLAB
                sname
                    name-type: kRB5-NT-SRV-HST (3)
                    sname-string: 2 items
                        SNameString: host
                        SNameString: win10-x64-test.hacke.testlab
                enc-part
                    etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)
                    kvno: 1
                    cipher: 1fc40f7b907bea22e5606abf4f0575c113b8f5ee8d87ce4f…
            enc-part
                etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)
                cipher: e4705cfafb271944be50c33f4576bb4b4e449357fbdbb18f…
  * msg-type
windows消息格式，krb-tgs-rep
  * crealm
Client所属域
  * cname
Client的身份名
  * ticket
这就是最终的票据，是使用Client请求服务的Server的hash作为key来加密得到的。内部包含:`Server session
key`、`Client info (Domain name\client)`、`end time (到期时间)`
  * enc-part
这一部分是使用AS认证中得`Session key`为key加密成得内部有`Server session key`,主要用于下轮用户认证(AP阶段)  
# NTML协议
## LM Hash&NTML Hash
windows内部是不保存明文密码的，只保存密码的hash值
> 本机的用户密码hash是放在本地的SAM文件里面，域内用户的密码hash存在域控的NTDS.DIT文件的。
windows密码hash保存模式，类似如下
    Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0:::
`AAD3B435B51404EEAAD3B435B51404EE`是`LM hash`
`31D6CFE0D16AE931B73C59D7E0C089C0`是`NTML hash`
### LM hash (LAN Manager Hash) 老密码
_LM Hash 的算法_
  1. 将用户密码转化为大写，再将转化后的密码转化成十六进制字符串，不足14字节将会使用0再末尾补全。
  2. 上一步得到的十六进制字符串分成两个7byte的部分，每部分转化成byte流，长度为56bit，长度不足的使用0在左边补齐。
  3. 再分为7bit一组，每组末尾加0，凑足8bit，重新组回两组。
  4. 上步骤得到的二组，分别作为Key对`KGS!@#$%`进行DES加密。
  5. 加密后的两组拼接到一起，得到最终的LM Hash
_LM Hash的一些弊端_
  * 密码方面的限制
    * 密码长度最大只能为14个字符
    * 密码不区分大小写
  * 加密过程中的一些漏洞
    * 如果密文的后半部分是`aad3b435b51404ee`，那么就意味着，这个密码的长度是小于等于7位的，密码强度大大减少
    * des密码强度并不高
### NTLM hash
_NTLM hash 的算法_
  1. 将用户的密码转化成16进制形式
  2. 把转化成16进制的密码进行unicode编码
  3. 使用MD4摘要算法对上一步得到的unicode编码进行hash计算
_NTLM hash本地的认证_
当用户注销、重启、锁屏之后，windows会让 ** _winlogon_** 显示登陆界面，接收用户的输入之后，会将将密码交付给 ** _lsass_**
进程，这个进程会将明文密码加密成NTLM hash，再与 ** _SAM数据库_** 里对应的用户密码做对比。
>   * winlogon(Windows logon process)windows注册进程：是windows NT
> 用户的登陆程序，用于管理用户的登陆与退出
>
>   * lsass( Local Security Authority Service): 用于本地安全与登陆策略
>
>   * SAM(Security Account Manager
> 安全账户管理)：windows采用的账户管理策略，这个策略会将本地组的用户的账户和hash加密之后保存到SAM数据库中，SAM数据库文件路径是`%systemroot%\system32\config\SAM`文件
>
## NTLM 身份验证机制
NTLM 身份验证采用的是 `Challenge(挑战)/Response(响应)`验证机制，有三步组成：协商，质询，身份验证
**_客户机与服务器的交互过程示意图(域控不参加的情况)_**
  * 协商：Client会发送一个带有用户信息(用户名)和服务器请求的功能列表
  * 质询：Server对Client发出的 ** _协商_** 做出回应，返回的内容包含服务器同意并且支持的功能列表，更重要的是包含了服务器产生的`challenge`
  * 身份验证：Client对Server返回的 ** _质询_** 做出回应，使用根具输入的密码生成的`NTMLM hash`和 ** _质询_** 中的`challenge`进行加密运算得到 ** _response_** ，然后将 ** _response_** 、用户名、 ** _challenge_** 一起返回给Server
> 关于challenge：服务端生成的一个随机字符用于验证Client的身份，NTLM v1中为8位，NTLM v2中为16位
>
> 关于Net-NTML hash：基于用户hash经过一定算法产生的。
>
> 关于response：本质上就是一个`net-NTLM hash`