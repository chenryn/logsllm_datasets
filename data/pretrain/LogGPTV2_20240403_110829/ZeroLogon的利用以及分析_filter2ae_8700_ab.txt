`XY` | ``000000000000000000000000000000` | `XYxxxxxxxxxxxxxxxxxxxxxxxxxxxxx` |
`XY^XY=00`  
由于在key固定的情况下，E(000000000000000000000000000000)的值固定，所以`E(参与AES运算的上一轮密文)的前面8位`是固定的，而每一轮的`明文内容`和`E(参与AES运算的上一轮密文)的前面前面8位`一样。所以每一轮的明文内容就必须要一样。所以要求明文的格式就是`XYXYXYXYXYXYXY`这种格式。那么还剩下最后一个问题。假设我们可以控制明文，那么在不知道key的情况下，我们怎么保证`E(000000000000000000000000000000)`的前面8位一定和明文一样呢。
这个地方我们不敢保证，但是前面八位的可能性有2**8=256(`00-FF`)，因为每一位都可能是0或者1。那么也就是说我们运行一次，在不知道key的情况下，`E(000000000000000000000000000000)`的前面8位一定和明文一样的概率是1/256,我们可以通过不断的增加尝试次数，运行到2000次的时候，至少有一次命中的概率已经有99.6%了。(具体怎么算。文章后面会介绍)。
所以我们最后下一个结论。
在AES_CFB8算法中，如果IV为全零。只要我们能控制明文内容为XYXYXYXY这种格式(X和Y可以一样，既每个字节的值都是一样的)，那么一定存在一个key,使得AES_CFB8(XYXYXYXY)=00000000。
###  4、netlogon 认证协议绕过
说完IV全为0导致的AES_CFB8安全问题，我们来看看netlogon认证协议。
继续看图
1、客户端调用NetrServerReqChallenge向服务端发送一个ClientChallenge
2、服务端向客户端返回送一个ServerChallenge
3、双方都利用client的hash、ClientChallenge、ServerChallenge计算一个session_key。
4、客户端利用session_key和ClientChallenge计算一个ClientCredential。并发送给服务端进行校验。
5、服务端也利用session_key和ClientChallenge去计算一个ClientCredential，如果值跟客户端发送过来的一致，就让客户端通过认证。
这里的计算ClientChallenge使用ComputeNetlogonCredential函数。
有两种算法，分别采用DES_ECB和AES_CFB。可以通过协商flag来选择哪一种加密方式。
这里存在问题的是AES_CFB8。为了方便理解，我们用一串python代码来表示这个加密过程。
    # Section 3.1.4.4.1
    def ComputeNetlogonCredentialAES(inputData, Sk):
        IV='\x00'*16
        Crypt1 = AES.new(Sk, AES.MODE_CFB, IV)
        return Crypt1.encrypt(inputData)
使用AES_CFB8，IV是’\x00’*16，明文密码是ClientChallenge，key是session_key，计算后的密文是ClientCredential。
这里IV是’\x00’*16，我们上面一节得出一个结论。在AES_CFB8算法中，如果IV为全零。只要我们能控制明文内容为XYXYXYXY这种格式(X和Y可以一样，既每个字节的值都是一样的)，那么一定存在一个key,使得AES_CFB8(XYXYXYXY)=00000000。
这里ClientChallenge我们是可以控制的，那么一定就存在一个key，使得ClientCredential为`00000000000000`
那么我们就可以。
1、向服务端发送一个ClientChallenge`00000000000000`(只要满足XYXYXYXY这种格式就行)
2、循环向服务端发送ClientCredential为`00000000000000`，直达出现一个session_key,使得服务端生成的ClientCredential也为`00000000000000`。
还有一个需要注意的环节。
认证的整个协议包里面，默认会增加签名校验。这个签名的值是由session_key进行加密的。但是由于我们是通过让服务端生成的ClientCredential也为`00000000000000`来绕过前面的认证，没有session_key。所以这个签名我们是无法生成的。但是我们是可以取消设置对应的标志位来关闭这个选项的。
在 _NegotiateFlags_ 中。
所以在Poc里面作者将flag位设置为0x212fffff
在NetrServerAuthenticate里面并没有提供传入`NegotiateFlags`的参数，因此这里我们使用NetrServerAuthenticate3。
###  5、重置密码利用分析
前面的认证都通过之后，我们就可以利用改漏洞来重置密码，为啥一定是该漏洞，有没有其他的方法，后面会介绍。这里着重介绍重置密码的函数。
在绕过认证之后，我们就可以调用RPC函数了。作者调用的是RPC函数NetrServerPasswordSet2。
     NTSTATUS NetrServerPasswordSet2(
       [in, unique, string] LOGONSRV_HANDLE PrimaryName,
       [in, string] wchar_t* AccountName,
       [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
       [in, string] wchar_t* ComputerName,
       [in] PNETLOGON_AUTHENTICATOR Authenticator,
       [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
       [in] PNL_TRUST_PASSWORD ClearNewPassword
     );
调用这个函数需要注意两个地方。
1)、一个是Authenticator。
如果我们去看NRPC里面的函数，会发现很多函数都需要这个参数。这个参数也是一个校验。在前面的校验通过，建立通道之后，还会校验Authenticator。
我们去文档看看Authenticator怎么生成的
这里面我们不可控的参数是是使用ComputeNetlogonCredential计算ClientStoreCredentail+TimeNow,这这里的ComputeNetlogonCredential跟之前一样，之前我们指定了AES_CFB8，这里也就是AES_CFB8。而ClientStoreCredentail的值我们是可控的，TimeNow的值我们也是可控的。我们只要控制其加起来的值跟我们之前指定的ClientChallenge一样(session_key
跟之前的一样，之前指定的是`00000000000000`)，就可以使得最后的Authenticator为`0000000000000000`，最后我们指定Authenticator为`0000000000000000`就可以绕过Authenticator
的校验。
2)、另外一个是ClearNewPassword
我们用一段代码来看看他是怎么计算的
    indata = b'\x00' * (512-len(self.__password)) + self.__password + pack('已经说的很清楚了。最主要的原因是AD里面存储的机器密码跟本机的Lsass里面存储的密码不一定导致的。这里简单翻译一下。
正常情况下，AD运行正常。有一个DC和一个服务器。他们彼此信任是因为他们有一个共享的Secret：机器帐户密码。他们可以使用它彼此通讯并建立加密通道。两台机器上的共享Secret是相同的。
尝试登录服务器的用户可以通过带有服务票证的Kerberos进行登录。该服务票证由DC使用机器帐户密码加密。
服务器具有相同的Secret，可以解密票证并知道其合法性。用户获得访问权限。
借助Zerologon攻击，攻击者可以更改AD中计算机帐户的密码，从而在一侧更改Secret。
现在，服务器无法再在域上登录。在大多数情况下，服务器仍将具有有效的Kerberos票证，因此某些登录仍将起作用。
在漏洞利用之前发出的Kerberos票证仍然可以使用，但是新的票证将由AD使用新密钥（以蓝色显示）进行加密。服务器无法解密(因为使用了Lsass里面的密码hash去进行解密，这个加密用的不一致)这些文件并抛出错误。后续Kerberos登录也随即无效。
NTLM的登录也不行，因为使用AD帐户登录已通过安全通道（通过相同的netlogon协议zerologon滥用）在DC上进行了验证。
但是无法建立此通道，因为信任中断，并且服务器再次引发错误。
但是，在最常见的特权升级中，将目标DC本身而不是另一台服务器作为目标。这很有趣，因为现在它们都在单个主机上运行。
但这并没有完全不同，因为DC也有多个存储凭据的位置。
像服务器一样，DC拥有一个带有密码的机器帐户，该帐户以加密方式存储在注册表中。引导时将其加载到lsass中。如果我们使用Zerologon更改密码，则仅AD中的密码会更改，而不是注册表或lsass中的密码。
利用后，每当发出新的Kerberos票证时，我们都会遇到与服务器相同的问题。
DC无法使用lsass中的机器帐户密码来解密服务票证，并且无法使用Kerberos中断身份验证。
对于NTLM，则有所不同。在DC上，似乎没有使用计算机帐户，但是通过另一种方式（我尚未调查过）验证了NTLM登录，该方式仍然有效。
这使您可以使用DC计算机帐户的空NT哈希值进行DCSync。
如果您真的想使用Kerberos，我想（未经测试）它可以与2个DC一起使用。 DC之间的同步可能会保持一段时间，因为Kerberos票证仍然有效。
因此，一旦将DC1的新密码同步到DC2，就可以使用DC1的帐户与DC1同步。
之所以起作用，是因为DC2的票证已使用DC2机器帐户的kerberos密钥进行了加密，而密钥没有更改。
###  2、 脚本里面2000次失败的概率是0.04是怎么算的
在作者的利用脚本里面，我们注意到这个细节。
作者说平均256次能成功，最大的尝试次数是2000次，失败的概率是0.04。那么这个是怎么算出来的呢。
一个基本的概率问题。每一次成功的概率都是1/256，而且每一次之间互不干扰。那么运行N次，至少一次成功的概率就是`1-(255/256)**N`
那么运行256次成功的概率就是
运行2000次成功的概率就是
###  3、NRPC那么多函数，是不是一定得重置密码
已经绕过了netlogon的权限校验，那么netlogon里面的RPC函数那么多，除了重置密码，有没有其他更优雅的函数可以用来利用呢。
我们可以在API文档里面开始寻觅。
事实上，在impacket里面的`impacket/tests/SMB_RPC/test_nrpc.py`里面已经基本实现了调用的代码，我们只要小做修改，就可以调用现有的代码来做测试。
我们将认证部分，从账号密码登录替换为我们的Poc
         def connect(self):
            if self.rpc_con == None:
                print('Performing authentication attempts...')
                for attempt in range(0, self.MAX_ATTEMPTS):
                    self.rpc_con = try_zero_authenticate(self.dc_handle, self.dc_ip, self.target_computer)
                    if self.rpc_con == None:
                        print('=', end='', flush=True)
                    else:
                        break
            return self.rpc_con
将Authenticator的实现部分也替换下就行。
        def update_authenticator(self):
            authenticator = nrpc.NETLOGON_AUTHENTICATOR()
            # authenticator['Credential'] = nrpc.ComputeNetlogonCredential(self.clientStoredCredential, self.sessionKey)
            # authenticator['Timestamp'] = 10
            authenticator['Credential'] = b'\x00' * 8
            authenticator['Timestamp'] = 0
            return authenticator
然后其他地方根据报错稍微修改就可以了。我们开始一个个做测试。
这块基本是查看信息。
虽然可以调用成功，但是对我们的利用帮助不大。
这块基本是是建立安全通道的，设置密码已经使用了，除去认证，设置密码，还有一个查看密码。遗憾的是EncryptedNtOwfPassword是使用sesson_key
参与加密的，我们不知道sesson_key，也就无法解密。
其他的函数整体试了下，也没有找到几个比较方便直接提升到域管权限的。大家可以自行寻觅。
事实上，dirkjanm也研究了一种无需重置密码，借助打印机漏洞relay来利用改漏洞的方法，但是由于Rlay在实战中的不方便性，整体来说并不比重置密码好用，这里不详细展开，大家可以自行查看文章[A
different way of abusing Zerologon
(CVE-2020-1472)](https://dirkjanm.io/a-different-way-of-abusing-zerologon/)。
###  4、是不是只有IV 全为零才是危险的
在之前的分析中，只要`参与AES运算的上一轮密文`每一轮保存不变就行，第一轮的`参与AES运算的上一轮密文`就是IV。也就是说，存在一个IV，只要他能够保持最前面8位不断移到最后，如AA(XXXXXX)
->
(XXXXXX)AA，值保持不变，就一定存在一个key,使得AES_CFB8(XYXYXYXY)=`IV*(len(明文)/len(IV))`(这里乘以`(len(明文)/len(IV)`是因为密文长度跟明文一样，不一定跟IV一样)。显然IV
全为零满足这个条件，但是不止是IV 全为零才有这个安全问题。