# 如何限流？在工作中是怎么做的？说一下具体的实现？
## 什么是限流
> 限流可以认为服务降级的一种，限流就是限制系统的输入和输出流量已达到保护系统的目的。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳定运行，一旦达到的需要限制的阈值，就需要限制流量并采取一些措施以完成限制流量的目的。比如：延迟处理，拒绝处理，或者部分拒绝处理等等。
## 限流方法
### 计数器
#### 实现方式
控制单位时间内的请求数量。
```java
import java.util.concurrent.atomic.AtomicInteger;
public class Counter {
    /**
     * 最大访问数量
     */
    private final int limit = 10;
    /**
     * 访问时间差
     */
    private final long timeout = 1000;
    /**
     * 请求时间
     */
    private long time;
    /**
     * 当前计数器
     */
    private AtomicInteger reqCount = new AtomicInteger(0);
    public boolean limit() {
        long now = System.currentTimeMillis();
        if (now  queue = new ConcurrentLinkedQueue();
    /**
     * 间隔秒数
     */
    private int seconds;
    /**
     * 最大限流
     */
    private int max;
    public TimeWindow(int max， int seconds) {
        this.seconds = seconds;
        this.max = max;
        /**
         * 永续线程执行清理queue 任务
         */
        new Thread(() -> {
            while (true) {
                try {
                    // 等待 间隔秒数-1 执行清理操作
                    Thread.sleep((seconds - 1) * 1000L);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                clean();
            }
        }).start();
    }
    public static void main(String[] args) throws Exception {
        final TimeWindow timeWindow = new TimeWindow(10， 1);
        // 测试3个线程
        IntStream.range(0， 3).forEach((i) -> {
            new Thread(() -> {
                while (true) {
                    try {
                        Thread.sleep(new Random().nextInt(20) * 100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    timeWindow.take();
                }
            }).start();
        });
    }
    /**
     * 获取令牌，并且添加时间
     */
    public void take() {
        long start = System.currentTimeMillis();
        try {
            int size = sizeOfValid();
            if (size > max) {
                System.err.println("超限");
            }
            synchronized (queue) {
                if (sizeOfValid() > max) {
                    System.err.println("超限");
                    System.err.println("queue中有 " + queue.size() + " 最大数量 " + max);
                }
                this.queue.offer(System.currentTimeMillis());
            }
            System.out.println("queue中有 " + queue.size() + " 最大数量 " + max);
        }
    }
    public int sizeOfValid() {
        Iterator it = queue.iterator();
        Long ms = System.currentTimeMillis() - seconds * 1000;
        int count = 0;
        while (it.hasNext()) {
            long t = it.next();
            if (t > ms) {
                // 在当前的统计时间范围内
                count++;
            }
        }
        return count;
    }
    /**
     * 清理过期的时间
     */
    public void clean() {
        Long c = System.currentTimeMillis() - seconds * 1000;
        Long tl = null;
        while ((tl = queue.peek()) != null && tl 
    org.springframework.cloud
    spring-cloud-starter-gateway
    org.springframework.boot
    spring-boot-starter-data-redis-reactive
```
```yaml
spring:
    cloud:
        gateway:
            routes:
                - id: requestratelimiter_route
                  uri: lb://pigx-upms
                  order: 10000
                  predicates:
                      - Path=/admin/**
                  filters:
                      - name: RequestRateLimiter
                        args:
                            redis-rate-limiter.replenishRate: 1 # 令牌桶的容积
                            redis-rate-limiter.burstCapacity: 3 # 流速 每秒
                            key-resolver: '#{@remoteAddrKeyResolver}' #SPEL表达式去的对应的bean
                      - StripPrefix=1
```
```java
@Bean
KeyResolver remoteAddrKeyResolver() {
    return exchange -> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());
}
```
### sentinel
-   通过配置来控制每个 url 的流量
```xml
    com.alibaba.cloud
    spring-cloud-starter-alibaba-sentinel
```
```yaml
spring:
    cloud:
        nacos:
            discovery:
                server-addr: localhost:8848
        sentinel:
            transport:
                dashboard: localhost:8080
                port: 8720
            datasource:
                ds:
                    nacos:
                        server-addr: localhost:8848
                        dataId: spring-cloud-sentinel-nacos
                        groupId: DEFAULT_GROUP
                        rule-type: flow
                        namespace: xxxxxxxx
```
-   配置内容在 nacos 上进行编辑
```json
[
    {
        "resource": "/hello",
        "limitApp": "default",
        "grade": 1,
        "count": 1,
        "strategy": 0,
        "controlBehavior": 0,
        "clusterMode": false
    }
]
```
-   resource：资源名，即限流规则的作用对象。
-   limitApp：流控针对的调用来源，若为 default 则不区分调用来源。
-   grade：限流阈值类型，QPS 或线程数模式，0 代表根据并发数量来限流，1 代表根据 QPS 来进行流量控制。
-   count：限流阈值
-   strategy：判断的根据是资源自身，还是根据其它关联资源 (refResource)，还是根据链路入口
-   controlBehavior：流控效果（直接拒绝 / 排队等待 / 慢启动模式）
-   clusterMode：是否为集群模式
### 总结
> sentinel 和 spring cloud gateway 两个框架都是很好的限流框架， 但是在我使用中还没有将[spring-cloud-alibaba](https://github.com/alibaba/spring-cloud-alibaba)接入到项目中进行使用， 所以我会选择**spring cloud gateway**， 当接入完整的或者接入 Nacos 项目使用 setinel 会有更加好的体验.