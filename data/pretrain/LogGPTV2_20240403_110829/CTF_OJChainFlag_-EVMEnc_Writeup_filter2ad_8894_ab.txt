                sstore(8, and(key_tmp, 0xffffffff))
之前所求的tmp就是这里的key_tmp,那么存储在storage[5]到storage[8]都是固定值可以直接求出。后续部分用到的sload(2)是取storage[2]的值，按照源码分析对应的是变量delta=0xb3c6ef3720。storage[3]对应的output用来存储结果，由循环部分每次循环计算的结果移位拼接而成。将Encrypt函数重写成python，转化过程中需要注意符号的优先级，结果如下：
    tmp = flag  #Convert(flag)  48 hex
    key_tmp =0x6b65795f746869735f69735f6b65795f
    sstore5 = 0x6b65795f # 0x6b65795f 74686973 5f69735f 6b65795f >>96
    sstore6 = 0x74686973
    sstore7 = 0x5f69735f
    sstore8 = 0x6b65795f
    sstore2 = 0xb3c6ef3720
    sstore3 = 0
    step = 1
    sstore4listall = []//mark
    for i in range(1,4):
        first = (tmp >> ((24 - i * 8)+4) * 8) & 0xffffffff
        second = (tmp >> (24 - i * 8) * 8) & 0xffffffff
        sstore4 = 0
        sstore4list = []
        for j in range(0, 32):
            sstore4 = ((sstore4 & 0xffffffff) + (sstore2 >> 5)) & 0xffffffff
            sstore4list.append(sstore4)//mark
            tmp11 = (((second * 16) & 0xffffffff) + sstore5 ) & 0xffffffff
            tmp12 = (second + sstore4) & 0xffffffff
            tmp13 = ((second >> 5) + sstore6) & 0xffffffff
            first = (first + (tmp11 ^ tmp12 ^ tmp13)) & 0xffffffff
            tmp21 = (((first > 5) + sstore8) & 0xffffffff
            second = (second + (tmp21 ^ tmp22 ^ tmp23)) & 0xffffffff
        sstore4listall.append(sstore4list)//mark
        sstore3 = sstore3 + ((first > 5)) & 0xffffffff
            sstore4list.append(sstore4)
        sstore4listall.append(sstore4list)
    for i in range(1,4):
        first = (sstore3 >> ((24 - i * 8)+4) * 8) & 0xffffffff
        second = (sstore3 >> (24 - i * 8) * 8) & 0xffffffff
        sstore4 = 0
        for j in range(0, 32):
            sstore4 = sstore4list[31 - j]
            tmp21 = (((first > 5 )+ sstore8) & 0xffffffff
            second = (second - (tmp21 ^ tmp22 ^ tmp23)) & 0xffffffff
            tmp11 = (((second > 5) + sstore6) & 0xffffffff
            first = (first - (tmp11 ^ tmp12 ^ tmp13)) & 0xffffffff
        tmp = tmp + ((first << (192 - (step * 32))) + (second << (192 - (i * 64))))
        step = step + 2
    print(hex(tmp))
    print (str(hex(tmp)[2:-1]).decode('hex'))