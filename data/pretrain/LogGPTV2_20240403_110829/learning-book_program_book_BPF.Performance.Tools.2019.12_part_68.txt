### execsnoop(8)

**Introduction:**
`execsnoop(8)` is a BCC and bpftrace tool introduced in Chapter 6, designed to trace the execution of new processes. It can be used to identify suspicious process executions. Example output:

```
execsnoop
PCOMX  PID  PPID  RET ARGS
1s     7777 21086 0 /bin/ls -F
a.out  7778 21086 0 /tmp/a.out
[...]
```

This output shows a process executing from `/tmp` named `a.out`.

**Mechanism:**
`execsnoop(8)` works by tracing the `execve(2)` system call, which is a typical step in the creation of new processes. The process creation typically begins with a call to `fork(2)` or `clone(2)` to create a new process, followed by a call to `execve(2)` to execute a different program. However, it's important to note that this is not the only way for new software to execute; a buffer overflow attack can add new instructions to an existing process, allowing malicious software to run without needing to call `execve(2)`.

For more details on `execsnoop(8)`, see Chapter 6.

---

### 11.2 BPF Tools

#### 11.2.1 elfsnoop

**Introduction:**
`elfsnoop(8)` is a bpftrace tool that traces the execution of binary files in the Executable and Linking Format (ELF), commonly used on Linux. This tool traces execution from deep within the kernel, from a function where all ELF execution must pass. Example output:

```
+ elfsnoop.bt
Attaching 3 probes...
Tracing ELF loads. Ctrl-C to end
TIME  PID  INTERPRETER  FILE  MOUNT  INODE  RET
11:18:43 9022 /bin/ls /bin/ls 29098068 11:18:45 9023 /tmp/ls /tmp/ls /usr/bin/python 23462045
11:18:49 9029 /tmp/a.out 20190728
[...]
```

**Output Columns:**
- **TIME:** Timestamp in HH:MM:SS format.
- **PID:** Process ID.
- **INTERPRETER:** For scripts, the interpreter that was executed.
- **FILE:** Executed file.
- **MOUNT:** Mount point for the executed file.
- **INODE:** Index node number for the executed file. Combined with the mount point, this forms a unique identifier.
- **RET:** Return value from the attempted execution. A value of 0 indicates success.

**Security Considerations:**
The mount point and inode number are printed for further verification of the executed binary. An attacker may create their own version of system binaries with the same name, but they cannot spoof the mount point and inode combination.

**Mechanism:**
This tool works by tracing the `load_elf_binary()` kernel function, responsible for loading new ELF programs for execution. The overhead of this tool should be negligible, as the rate of this function is generally low.

**Source Code:**

```c
#!/usr/local/bin/bpftrace
#include <linux/fs.h>
#include <linux/module.h>

BEGIN
{
    printf("Tracing ELF loads. Ctrl-C to end\n");
}

kprobe:load_elf_binary
{
    @orig = [pid] = arg0;
}

kretprobe:load_elf_binary
/@orig[tid]/
{
    $bin = (struct linux_binprm *)arg0[tid];
    time("%H:%M:%S");
    printf("%d %s %s %s %llu %d\n", pid, str($bin->interp), str($bin->filename), str($bin->file->f_path.mnt->mnt_root->d_name.name), $bin->file->f_inode->i_ino, retval);
    delete(@orig[tid]);
}
```

**Enhancements:**
This tool can be enhanced to print extra details about the executed file, including the full path. Note that bpftrace currently has a seven-element limit for `printf()`, so multiple `printf()` calls will be necessary to print additional fields.

---

#### 11.2.2 modsnoop

**Introduction:**
`modsnoop(8)` is a bpftrace tool that traces kernel module loads. Example output:

```
+ modsnoop.bt
Attaching 2 probes...
Tracing kernel module loads. Hit Ctrl-C to end.
12:51:38 module init: msr, by modprobe (PID 32574, user root, UID 0)
[...]
```

**Output:**
This shows that at 12:51:38, the `msr` module was loaded by the `modprobe(8)` tool, with UID 0.

**Security Considerations:**
Loading modules is another way for the system to execute code and is a common method used by various rootkits, making it a target for security tracing.

**Mechanism:**
This tool works by tracing the `do_init_module()` kernel function, which can access details from the `module` struct.

**Source Code:**

```c
#!/usr/local/bin/bpftrace
#include <linux/module.h>

BEGIN
{
    printf("Tracing kernel module loads. Hit Ctrl-C to end.\n");
}

kprobe:do_init_module
{
    $mod = (struct module *)arg0;
    time("%H:%M:%S");
    printf("module init: %s, by %s (PID %d, user %s, UID %d)\n", $mod->name, comm, pid, username, uid);
}
```

**Additional Information:**
There is also a `module:module_load` tracepoint, used by later one-liners.

---

#### 11.2.3 bashreadline

**Introduction:**
`bashreadline(8)` is a BCC and bpftrace tool that traces interactively entered commands in the bash shell, system-wide. Example output (BCC version):

```
bashreadline
TIME  PID  COMMAND
11:43:51 21086 ls
11:44:07 21086 echo hello book readers
11:44:22 21086 eccho hi
11:44:33 21086 /tmp/ls
[...]
```

**Output:**
This output shows commands that were entered while tracing, including shell built-ins (e.g., `echo`) and commands that failed (e.g., `eccho`).

**Mechanism:**
This tool works by tracing the `readline()` function from the bash shell, so any entered command will be shown. Note that while this can trace commands across all shells running on the system, it cannot trace commands by other shell programs, and an attacker may install their own shell (e.g., a nanoshell) that is not traced.

**bpftrace Version:**

```c
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing bash commands... Hit Ctrl-C to end.\n");
    printf("%-9s %-6s %s\n", "TIME", "PID", "COMMAND");
}

uretprobe:/bin/bash:readline
{
    time("%H:%M:%S");
    printf("%-9s %-6d %s\n", pid, str(retval));
}
```

**Additional Information:**
Some Linux distributions build bash differently such that `readline()` is used from the `libreadline` library instead. See Section 12.2.3 in Chapter 12 for more details.

---

#### 11.2.4 shellsnoop

**Introduction:**
`shellsnoop(8)` is a BCC and bpftrace tool that mirrors the output from another shell session. Example output:

```
+ shellsnoop 7866
bgzegg:~/Build/bpftrace/tools> date
Fri May 31 18:11:02 PDT 2019
bgzegg:~/Build/bpftrace/tools> echo Hello BPF
Hello BPF
bgzegg:~/Build/bpftrace/tools> typo
Command 'typo' not found, did you mean:
command 'top' from deb coreutils
typoset: apt install
[...]
```

**Output:**
This shows the commands and output from a shell session with PID 7866. It works by tracing writes by that process to STDOUT or STDERR, including children of that process. Tracing children is necessary to catch the output of their commands, such as the output of `date(1)` seen in this example.

**bpftrace Version:**

```c
#!/usr/local/bin/bpftrace
BEGIN
{
    if (argc == 1) {
        printf("USAGE: shellsnoop.bt PID\n");
        exit(1);
    }
    printf("Tracing shell session. Hit Ctrl-C to end.\n");
}

tracepoint:sched:sched_process_fork
{
    if (args->child_pid == pid) {
        @children[pid] = 1;
    }
}

tracepoint:syscalls:sys_enter_write
{
    if (@children[pid]) {
        time("%H:%M:%S");
        printf("%s\n", str(arg1, arg2));
    }
}
```

**Additional Information:**
This tool can be saved to a file and executed using the `bash(1)` shell, replaying the shell session output with the original timing.

---

#### 11.2.5 ttysnoop

**Introduction:**
`ttysnoop(8)` is a BCC and bpftrace tool that mirrors output from a tty or pts device. This can be used to watch a suspicious login session in real time. Example output:

```
+ ttysnoop 16
$ uname -a
Linux host=bgzegg 4.15.0-43-generic #46~18.04.1-Ubuntu SMP Thu Dec 6 14:45:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
$ gcc -o a.out crack.c
Segmentation fault
[...]
```

**Output:**
The output duplicates what the user on `/dev/pts/16` is seeing. This works by tracing the `tty_write()` kernel function and printing what is being written.

**Command Line Usage:**

```
ttysnoop [options] device
Options include:
 -c: Donâ€™t clear the screen
```

**bpftrace Version:**

```c
#!/usr/local/bin/bpftrace
BEGIN
{
    if (argc == 1) {
        printf("USAGE: ttysnoop.bt pt_device\n# eg, pts14\n");
        exit(1);
    }
    printf("Tracing tty writes. Ctrl-C to end.\n");
}

kprobe:__tty_write
{
    if (str(args->file->f_path.dentry->d_name.name) == str(arg1 + 3)) {
        printf("%s", str(arg2, arg3));
    }
}
```

**Additional Information:**
This tool takes a required argument. If the device name is not specified, a USAGE message is printed, and bpftrace exits. Tracing all devices would mix the output and create a feedback loop with the tool itself.

---

#### 11.2.6 opensnoop

**Introduction:**
`opensnoop(8)` is a BCC and bpftrace tool covered in Chapter 8, used to trace file opens. It can be used for various security tasks, such as understanding malware behavior and monitoring file usage. Example output (BCC version):

```
+ opensnoop
PID  COMM  FD ERR PATH
12748 apensnoop -1 2 /usr/lib/python2.7/encodings/ascii.x86_64-linux-gnu.so
12748 apensnoop -1 2 /usr/lib/python2.7/encodings/ascii.so
12748 apensnoop -1 2 /usr/lib/python2.7/encodings/ascii.pyc
1222 polkitd 11 0 /proc/11881/status
1222 polkitd 11 0 /proc/11881/stat
1222 polkitd 11 0 /etc/passwd
[...]
```

**Output:**
This output shows `opensnoop(8)` searching for and then loading an ASCII Python module. The first three opens were unsuccessful. Then `polkitd(8)` (PolicyKit daemon) is caught opening the `passwd` file and checking process statuses.

**Mechanism:**
`opensnoop(8)` works by tracing the `open(2)` variety of syscalls.

For more details on `opensnoop(8)`, see Chapter 8.

---

#### 11.2.7 eperm

**Introduction:**
`eperm(8)` is a bpftrace tool that counts syscalls that failed with either `EPERM` (operation not permitted) or `EACCES` (permission denied) errors, both of which may be interesting for security analysis. Example output:

```
+ eperm.bt
Attaching 3 probes...
Tracing EACCESS and EPERM syscall errors. Ctrl-C to end.
@EACCESS[systend-logind,sys_setsockopt]: 1
@EPERM[cat,sys_openat]: 1
@EPERM[gnsin,sys_inotify_add_watch]: 6
```

**Output:**
This shows the process name and the syscall that failed, grouped by failure. For example, this output shows one `EPERM` failure by `cat(1)` for the `openat(2)` syscall. These failures can be further investigated using other tools, such as `opensnoop(8)` for open failures.

**Mechanism:**
This tool works by tracing the `raw_syscalls:sys_exit` tracepoint, which fires for all syscalls. The overhead may become noticeable on systems with high I/O rates; testing in a lab environment is recommended.

**Source Code:**

```c
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing EACCESS and EPERM syscall errors. Ctrl-C to end.\n");
}

tracepoint:raw_syscalls:sys_exit
{
    if (args->ret == -EACCES) {
        @["EACCESS[" + comm + "," + probe + "]"] = count();
    } else if (args->ret == -EPERM) {
        @["EPERM[" + comm + "," + probe + "]"] = count();
    }
}
```

**Additional Information:**
The `raw_syscalls:sys_exit` tracepoint provides only an identification number for the syscall. To get the syscall name, you can use the `syscall` map provided by bpftrace.

---

This optimized text is more structured, coherent, and professional, providing a clear and detailed explanation of each BPF tool.