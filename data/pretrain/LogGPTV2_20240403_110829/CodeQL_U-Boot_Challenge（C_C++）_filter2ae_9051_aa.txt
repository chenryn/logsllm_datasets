# CodeQL U-Boot Challenge（C/C++）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 背景
需要在U-Boot中寻找一组9个远程代码执行漏洞  
漏洞点位于memcpy函数  
但并非所有调用memcpy函数的都存在漏洞  
所以我们需要减少误报率，找到真正存在漏洞的memcpy调用
[放上题目链接](https://lab.github.com/githubtraining/codeql-u-boot-challenge-\(cc++)
关于环境搭建根据题目提示就可以顺利完成哦  
也可以参考我的文章”CodeQL for VSCode搭建流程”  
不出意外会放在我的[博客中](https://milkii0.github.io)
## Step 3 – our first query
在项目中寻找所有名为’strlen’的函数  
语法类似于sql语句  
`import cpp`: 导入c++规则库  
`From Function f1`: 声明一个Function类的变量为f1  
`where f1.getName() = "strlen"`:
Function.getName()顾名思义用于获取此声明的名称，也就是名称和”strlen”相等的声明会被挑选出来  
`select f1,"a function named strlen"`: select后接要在result中展示的项目，用逗号分隔  
3_function_definitions.ql
    import cpp
    from Function f1
    where f1.getName() = "strlen"
    select f1,"a function named strlen"
直接在main提交
commit中查看结果，通过
## Step 4 – Anatomy of a query
仿照上一步，在项目中寻找所有名为’memcpy’的函数  
4_function_definitions.ql
    import cpp
    from Function f
    where f.getName() = "memcpy"
    select f,"a function named memcpy"
提交查看结果，通过
## Step 5 – Using different classes and their predicates
自定义规则，查找三个名为`ntohs`, `ntohl` or `ntohll`的宏定义  
需要一个紧凑的查询，而不是三个查找案例组合在一起  
给出以下两种方法
  1. 利用正则表达式  
`string`类有一个方法`regexpMatch`，接收器将参数与正则表达式匹配  
那我们需要先找到宏定义，再对该字符串进行正则匹配（使用的java的匹配模式）  
5_function_definitions.ql
    import cpp
    from Macro m
    where m.getName().regexpMatch("ntoh(s|l|ll)")
    select m,"macros named ntohs, ntohl or ntohll"
运行
  1. 使用集合表达式  
给出的格式： in [“bar”, “baz”, “quux”]
    import cpp
    from Macro m
    where m.getName() in ["ntohs","ntohl","ntohll"]
    select m,"macros named ntohs, ntohl or ntohll"
运行后和之前的结果相同，提交通过
PS：  
上学的时候为了过考试自学的c++，就是一些简单的语法  
看题目说明也没看明白ntoh 族函数到底是个啥  
后来看见了[swing的文章](https://bestwing.me/codeql.html)  
才知道ntoh族函数通常用来进行网络字节序到主机字节序的转换  
其实自己看到的时候就应该去查的，但是因为对题目影响不大就犯懒没去:-(  
以后不能这样了！看见没见过的看不懂的一定要去弄清楚
## Step 6 – Relating two variables
找到所有对`memcpy`函数的调用  
先看看给的例子  
`FunctionCall.getTarget()`查询该函数被调用的位置  
直接和`Function`类型的`fcn`对比值，说明他返回的值应该就是`Function`类型（这点在下面优化中会用到）
通过`Function.hasName()`获取方法名
    import cpp
    from FunctionCall call, Function fcn
    where
      call.getTarget() = fcn and
      fcn.getDeclaringType().getSimpleName() = "map" and
      fcn.getDeclaringType().getNamespace().getName() = "std" and
      fcn.hasName("find")
    select call
如果你想要省略中间变量`Function`，使查询的更加紧凑，可以参考以下两个对比  
`c1.getClass2()`返回的是Class2类型的值，因此可以直接调用Class2的方法
    from Class1 c1, Class2 c2
    where
      c1.getClass2() = c2 and
      c2.getProp() = "something"
    select c1
    from Class1 c1
    where c1.getClass2().getProp() = "something"
    select c1
根据以上案例思考  
我们需要找到`memcpy`函数被调用的位置，可以使用  
`FunctionCall.getTarget()`  
并希望查询更加紧凑，可以直接获取找到的函数的名称并进行判断  
`FunctionCall.getTarget().getName="memcpy"`
6_memcpy_calls.ql
    import cpp
    from FunctionCall functioncall
    where functioncall.getTarget().hasName("memcpy")
    select functioncall
提交通过
## Step 7 – Relating two variables, continued
寻找所有对`ntoh*`宏定义的调用
这里用到的是`MacroInvocation`这个类，顾名思义就是宏定义调用的类  
鼠标悬浮看其注释也能看出来
那么我们就可以通过`getMacro()`寻找被调用的宏定义，并得到返回的`Macro`类型值  
再获得找到的`Macro`名称进行正则匹配，即可获得我们想要的结果
    import cpp
     from MacroInvocation macInvo
     where macInvo.getMacro().getName().regexpMatch("ntoh.*")
     select macInvo
（备注：关于正则表达式，不太会写，找的java正则api看的。  
`.`表示匹配除换行符 \n 之外的任何单字符，`*`表示零次或多次，  
我这里希望得到的结果是以`ntoh`开头的宏定义都会被选中。  
如果有不对的地方，还希望可以被提出指正◔ ‸◔）
提交通过
## Step 8 – Changing the selected output
根据提示，使用`getExpr()`这个predicate  
先看看这个`getExpr()`的注释说明  
是用来获取宏定义表达式的  
如果顶级拓展元素不是表达式，它只是一条语句，将不会被选中列为结果
使用`select macInvo.getExpr()`，就能获得宏定义调用相关的表达式  
8_macro_expressions.ql
    import cpp
     from MacroInvocation macInvo
     where macInvo.getMacro().getName().regexpMatch("ntoh.*")
     select macInvo.getExpr()
例如点击其中一个结果，就会跳转至下图位置
提交通过
那么查询表达式和查询调用的区别是啥？  
看注释说明，  
`getExpr()`：
_Gets a top-level expression associated with this macro invocation,if any.  
Note that this predicate will fail if the top-level expanded element is not an
expression (for example if it is a statement).  
This macro is intended to be used with macros that expand to a complete
expression.  
In other cases, it may have multiple results or no results._
获取关于宏调用的顶级表达式  
注意，如果顶级扩展元素不是一个表达式的话查询将失败（例如，它是一个语句）  
此宏用于扩展为完整表达式的宏，在其他情况下可能会有多个结果或没有结果
`getMacro()`：
_Gets the macro that is being accessed._  
获取正在访问的宏
即`getMacro()`会获取所有调用的宏，即使他只是一个语句  
而`getExpr()`只会获取宏调用的顶级表达式  
所以`getExpr()`得到的结果集应该包含于`getMacro()`的结果集  
这里放上[语句和表达式的区别讨论链接](https://www.zhihu.com/question/20750344)
## Step 9 – Write your own class
首先看看学习`exists`关键词给出的例子：  
这个规则只是为了获取不秃头的所有人
不秃头的人都会有头发，那么他们的头发都会对应一个或多个颜色  
其中`t.getHairColor()`会返回一个`string`类型的值，例如”red”  
如果我们需要获得不秃头的人，我们并不需要知道他们头发的具体颜色，只需要知道`t.getHairColor()`会返回`string`类型的值即可，因为秃头`getHairColor()`时，不会返回任何值
所以我们利用`string`类型的变量完成该操作  
更好的方式是使用`exists`关键词，因为我们只是在`where`中使用该变量  
例如，`exists(string c | t.getHairColor() =
c)`使用了string类型的临时变量，用于获取`t.getHairColor()`返回了`string`值的`t`，也就是查询了所有头发颜色的值为`string`类型的人