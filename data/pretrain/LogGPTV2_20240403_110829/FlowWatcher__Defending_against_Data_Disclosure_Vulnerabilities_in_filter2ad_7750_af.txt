### 优化后的文本

#### 引言
在访问控制模型的设计中，有些模型侧重于表达能力，例如基于角色的访问控制（RBAC）[47]，而有些则专注于特定领域的需求，如数据隐私。例如，在线社交网络中的UURAC模型[7]允许用户和社交网络自身指定哪些用户可以访问哪些数据。与此不同，我们的UDA策略语言旨在通过观察HTTP请求和响应来表达一种动态访问控制模型，并使用访问控制列表进行管理。

### 结论
随着Web应用程序功能的日益丰富，开发者确保所有组件正确执行访问控制检查变得越来越具有挑战性。Web应用程序中数据泄露漏洞的增加表明，现有的检测和缓解授权逻辑错误的技术尚未得到广泛应用。

我们介绍了FlowWatcher，这是一种实用的方法，用于缓解由于授权逻辑中的错误导致的Web应用程序中的未授权数据泄露问题。FlowWatcher作为外部工具运行：开发者通过规则化的策略语言定义预期的动态访问控制策略（即UDA策略），这使得FlowWatcher Web代理能够通过跟踪用户之间HTTP请求和响应中的数据传播来检测未授权的数据泄露。实验评估表明，UDA策略编写简单，能够防范多种数据泄露漏洞，并且可以在低开销下实施。

### 致谢
本研究得到了英国工程与物理科学研究委员会（EPSRC）资助的EP/K008129/1项目“CloudSafetyNet: End-to-End Application Security in the Cloud”的支持。

### 参考文献
[1] Apache JMeter. jmeter.apache.org, 2014.
[2] D. Balzarotti, M. Cova, V. V. Felmetsger, and G. Vigna. Multi-module Vulnerability Analysis of Web-based Applications. In CCS, 2007.
[3] P. Bisht, T. Hinrichs, N. Skrupsky, et al. NoTamper: Automatic Blackbox Detection of Parameter Tampering Opportunities in Web Applications. In CCS, 2010.
... (其余参考文献保持不变)

### 完整的UDA策略
以下是Drupal 6.31和WordPress 4.2.2的完整UDA策略示例。

**Listing 2: Drupal的完整UDA策略**
```plaintext
/* 定义规则 */
1 user+ "/*" if (res_hdr "Set-Cookie" re"SESS.*")
2 { id := formfield "name", res_hdr "Location" re"/?q=user/([0-9]+)";
3 token := res_hdr "Set-Cookie" re"SESS.*"; }
4 group+ "/?q=node/add/group"
5 { id := res_hdr "Location" re"/?q=node/([0-9]+)"; }
6 data+ Article re"/?q=node/add/article"
7 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
item := formfield "title", formfield "body"; }
8
9 data+ Page re"/?q=node/add/page"
10 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
item := formfield "title", formfield "body"; }
11
12 data+ PrivateGroupName "/?q=node/add/group" if (formfield "og_private"="1")
13 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
14 item := formfield "title"; }
15 group- re"/?q=node/[0-9]+/delete" if (formfield "op"="Delete+group")
16 { group.id := url re"/?q=node/([0-9]+)"; }
17 user- re"/user/[0-9]+/delete"
18 { id := url re"/user/([0-9]+)"; }
19 data- Any re"/?q=node/[0-9]+/delete"
20 { id := url re"/?q=node/([0-9]+)"; }
/* 更新规则 */
21 data* Article re"/?q=node/[0-9]+/edit"
22 { id = url re"/([0-9]+)/edit";
item[0] = formfield "title";
23 item[1] = formfield "body"; }
24
25 data* Page re"/?q=node/[0-9]+/edit"
26 { id = url re"/([0-9]+)/edit";
item[0] = formfield "title";
27 item[1] = formfield "body"; }
28
29 user -> group re"/?q=og/users/[0-9]+/add_user"
30 { user.id = formfield "og_names";
31 group.id = url re"/([0-9]+)/add_user"; }
32 user -/> group re"/?q=og/unsubscribe/[0-9]+/[0-9]+"
33 { group.id = url re"/([0-9]+/)/";
34 user.id = url re"[(0-9]+)(?!\/)"; }
35 user -> data re"/?q=node/add/.*" if (formfield "status"="0")
36 { user.id = authenticated_user;
37 data.id = res_hdr "Location" re"/?q=node/([0-9]+)"; }
38 group -> data re"/?q=node/add/*" if (formfield "status"="1")
39 { group.id = formfield "og_groups";
40 data.id = res_hdr "Location" re"/?q=node/([0-9]+)"; }
41 group -> PrivateGroupName "/?q=node/add/group" if (formfield "og_private"="1")
42 { group.id = res_hdr "Location" re"/?q=node/([0-9]+)";
43 PrivateGroupName.id = res_hdr "Location" re"/?q=node/([0-9]+)"; }
```

**Listing 3: WordPress的完整UDA策略**
```plaintext
/* 定义规则 */
1 user+ "/wp-login.php" if (res_hdr "Set-Cookie" re"wordpress_logged_in_.*")
2 { id := res_body re/"\"uid\":\"([0-9]+)\"";
3 token := res_hdr "Set-Cookie" re"wordpress_logged_in_.*"; }
4 data+ Post re"/wp-admin/post\.php" if (formfield "visibility"="private")
5 { id := res_hdr "Location" re"/?post=([0-9]+)";
6 item := formfield "post_title", formfield "content"; }
7 user- re"wp-admin/users.php.*action=delete" if (formfield "action"="dodelete" and res_status="302")
8 { id := url re"user=([0-9]+)"; }
9 data- re"/wp-admin/post\.php.*action=delete" if (res_status="302")
10 { data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
/* 更新规则 */
11 data* Post re"/wp-admin/post\.php.*action=edit"
12 { id := res_hdr "Location" re"/?post=([0-9]+)";
13
14
item[0] = formfield "post_title";
item[1] = formfield "content"; }
15 user -> data re"/wp-admin/post\.php" if (formfield "visibility"="private")
16 { user.id = authenticated_user;
17 data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
18 group -> data re"/wp-admin/post\.php.*action=trash" if (res_status="302")
19 { group.id = Null;
20 data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
21 group -/> data re"/wp-admin/post\.php.*action=untrash" if (res_status="302")
22 { group.id = Null;
23 data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
```

这样修改后，文本更加清晰、连贯和专业。希望这些改进对你有帮助！