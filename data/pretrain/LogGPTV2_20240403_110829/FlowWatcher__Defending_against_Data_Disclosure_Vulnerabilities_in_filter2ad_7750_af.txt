cus on expressiveness, e.g. through role-based access control mod-
els [47], or on the needs of speciﬁc domains, such as data pri-
vacy. For example, to restrict data dissemination in online social
networks, the UURAC model [7] allows individual users, and the
social network itself, to specify which users should be allowed to
access which data. In contrast, the goal of our UDA policy lan-
guage is to express a dynamic access control model with access
control lists in terms of observed HTTP requests and responses.
7. CONCLUSIONS
As web applications support richer functionality, it becomes chal-
lenging for developers to ensure that all application components
perform access control checks correctly. The rise of data disclosure
vulnerabilities in web applications shows that existing techniques
to detect and mitigate bugs in the authorisation logic of applications
lack widespread adoption.
We described FlowWatcher, a practical approach to mitigate
unauthorised data disclosure in web applications due to bugs in
the authorization logic. FlowWatcher operates externally to the
application: developers specify the intended dynamic access con-
trol policy in a rule-based policy language, as a UDA policy, which
enables the FlowWatcher web proxy to detect unauthorised data
disclosure by tracking the propagation of data between HTTP re-
quests and responses across users. As our experimental evaluation
demonstrates, UDA policies are simple to write, can protect against
a wide range of data disclosure bugs and can be enforced with low
overhead.
Acknowledgements
This work was supported by grant EP/K008129/1 (“CloudSafe-
tyNet: End-to-End Application Security in the Cloud”) from the
UK Engineering and Physical Sciences Research Council (EPSRC).
8. REFERENCES
[1] Apache JMeter. jmeter.apache.org, 2014.
[2] D. Balzarotti, M. Cova, V. V. Felmetsger, and G. Vigna.
Multi-module Vulnerability Analysis of Web-based
Applications. In CCS, 2007.
[3] P. Bisht, T. Hinrichs, N. Skrupsky, et al. NoTamper:
Automatic Blackbox Detection of Parameter Tampering
Opportunities in Web Applications. In CCS, 2010.
[4] P. Bisht, T. Hinrichs, N. Skrupsky, et al. WAPTEC:
Whitebox Analysis of Web Applications for Parameter
Tampering Exploit Construction. In CCS, 2011.
[5] A. Blankstein and M. J. Freedman. Automating isolation and
least privilege in web services. In IEEE S&P, 2014.
[6] J. Burket, P. Mutchler, M. Weaver, M. Zaveri, and D. Evans.
GuardRails: A data-centric web application security
framework. In USENIX WebApps, 2011.
[7] Y. Cheng, J. Park, and R. S. Sandhu. A user-to-user
relationship-based access control model for online social
networks. In DBSec, 2012.
[8] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vigna.
Swaddler: An Approach for the Anomaly-based Detection of
State Violations in Web Applications. In RAID, 2007.
[9] CVE. cve.mitre.org, 2014.
[10] M. Dalton, C. Kozyrakis, and N. Zeldovich. Nemesis:
Preventing Authentication & Access Control Vulnerabilities
in Web Applications. In USENIX Security, 2009.
[11] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The
Ponder Policy Spec. Language. In Workshop on Policies for
Distributed Systems and Networks (POLICY), 2001.
[12] DokuWiki. www.dokuwiki.org, 2014.
[13] A. Doupé, B. Boe, C. Kruegel, and G. Vigna. Fear the EAR:
Discovering and Mitigating Execution After Redirect
Vulnerabilities. In CCS, 2011.
[14] Dropbox. www.dropbox.com, 2015.
[15] The Dropbox Blog: Web vulnerability affecting shared links.
bit.ly/1FiRIsv, 2014.
[16] Drupal. www.drupal.org, 2014.
[17] Drupal Node Access Keys.
drupal.org/project/nodeaccesskeys, 2014.
[18] Drupal Organic Groups. drupal.org/project/og, 2014.
[19] Drupal Security Advisories.
drupal.org/security/contrib, 2014.
[20] Evernote. www.evernote.com, 2014.
[21] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna.
Toward Automated Detection of Logic Vulnerabilities in
Web Applications. In USENIX Security, 2010.
[22] D. B. Gifﬁn, A. Levy, D. Stefan, D. Terei, D. Mazières, J. C.
Mitchell, and A. Russo. Hails: Protecting Data Privacy in
Untrusted Web Applications. In OSDI, 2012.
[23] GitLab. about.gitlab.com, 2014.
[24] K. L. Ingham, A. Somayaji, J. Burge, and S. F. A. C.
Learning DFA Representations of HTTP for Protecting Web
Applications. Computer Networks, 51, 2007.
[25] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static
Analysis Tool for Detecting Web Application Vulnerabilities.
In IEEE S&P, 2006.
[26] C. Kruegel and G. Vigna. Anomaly Detection of Web-based
Attacks. In CCS, 2003.
[27] T. Krueger, C. Gehl, K. Rieck, and P. Laskov. TokDoc: A
Self-healing Web Application Firewall. In ACM SAC, 2010.
[28] M. S. Lam, M. Martin, B. Livshits, and J. Whaley. Securing
Web Applications with Static and Dynamic Information
Flow Tracking. In ACM SIGPLAN Symp. on Partial Eval.
and Semantics-based Program Manipulation, 2008.
614[29] X. Li and Y. Xue. BLOCK: A Black-box Approach for
Detection of State Violation Attacks Towards Web
Applications. In ACSAC, 2011.
[30] X. Li, W. Yan, and Y. Xue. SENTINEL: Securing Database
from Logic Flaws in Web Applications. In ACM Conf. on
Data and App. Security and Privacy (CODASPY), 2012.
[31] ModSecurity. www.modsecurity.org, 2014.
[32] M. Monshizadeh, P. Naldurg, and V. N. Venkatakrishnan.
MACE: Detecting Privilege Escalation Vulnerabilities in
Web Applications. In CCS, 2014.
[33] Y. Mundada, A. Ramachandran, and N. Feamster.
SilverLine: data and network isolation for cloud services. In
HotCloud, 2011.
[34] New York Times. Russian Hackers Amass Over a Billion
Internet Passwords. nyti.ms/1mjPhsL, 2014.
[35] Nginx. www.nginx.org, 2014.
[36] OASIS eXtensible Access Control Markup Language.
bit.ly/1BRwfFt, 2013.
[37] Open Web App. Sec. Proj. (OWASP). Injection ﬂaws.
www.owasp.org/index.php/Top_10_2013-A1-Injection,
2013.
[38] Open Web Application Security Project (OWASP). OWASP
Top 10 2013.
www.owasp.org/index.php/Top_10_2013-Top_10, 2013.
[39] Open Web Application Security Project (OWASP). SQL
Injection Prevention Cheat Sheet. www.owasp.org/index.
php/SQL_Injection_Prevention_Cheat_Sheet, 2014.
[40] OwnCloud. www.owncloud.org, 2014.
[41] V. Pappas, V. P. Kemerlis, A. Zavou, et al. CloudFence: Data
ﬂow tracking as a cloud service. In Research in Attacks,
Intrusions, and Defenses. Springer, 2013.
[42] G. Pellegrino and D. Balzarotti. Toward Black-box Detection
of Logic Flaws in Web Applications. In NDSS, 2014.
[43] phpBB. www.phpbb.com, 2014.
[44] phpMyAdmin. www.phpmyadmin.net, 2014.
[45] Redis. www.redis.io, 2014.
[46] W. Reese. Nginx: The High-performance Web Server and
Reverse Proxy. Linux Journal, Sept. 2008.
[47] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
Youman. Role-based access control models. IEEE Computer,
29(2), Feb. 1996.
[48] E. J. Schwartz, T. Avgerinos, and D. Brumley. All you ever
wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In
IEEE S&P, 2010.
[49] R. Sekar. An efﬁcient black-box technique for defeating web
application attacks. In NDSS, 2009.
[50] S. Son, K. S. McKinley, and V. Shmatikov. RoleCast:
Finding Missing Security Checks when You Do Not Know
What Checks Are. In OOPSLA, 2011.
[51] S. Son, K. S. Mckinley, and V. Shmatikov. Fix Me Up:
Repairing access-control bugs in web apps. In NDSS, 2013.
[52] G. Wassermann and Z. Su. Static Detection of Cross-site
Scripting Vulnerabilities. In ICSE, 2008.
[53] WhiteHat Security. Website security statistics report.
www.whitehatsec.com/resource/stats.html, 2014.
[54] WordPress. www.wordpress.com, 2014.
[55] A. Yip, X. Wang, N. Zeldovich, and M. F. Kaashoek.
Improving Application Security with Data Flow Assertions.
In SOSP, 2009.
A. COMPLETE UDA POLICIES
We show the complete listing of the UDA policies for Drupal 6.31
in Listing 2 and for WordPress 4.2.2 in Listing 3.
Listing 2: The complete UDA policy for Drupal
/* Deﬁnition rules */
1 user+ "/*" if (res_hdr "Set-Cookie" re"SESS.*")
2 { id := formfield "name", res_hdr "Location" re"/?q=user/([0-9]+)";
3
token := res_hdr "Set-Cookie" re"SESS.*"; }
4 group+ "/?q=node/add/group"
5 { id := res_hdr "Location" re"/?q=node/([0-9]+)"; }
6 data+ Article re"/?q=node/add/article"
7 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
item := formfield "title", formfield "body"; }
8
9 data+ Page re"/?q=node/add/page"
10 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
item := formfield "title", formfield "body"; }
11
12 data+ PrivateGroupName "/?q=node/add/group" if (formfield
(cid:44)→ "og_private"="1")
13 { id := res_hdr "Location" re"/?q=node/([0-9]+)";
14
item := formfield "title"; }
15 group- re"/?q=node/[0-9]+/delete" if (formfield "op"="Delete+group")
16 { group.id := url re"/?q=node/([0-9]+)"; }
17 user- re"/user/[0-9]+/delete"
18 { id := url re"/user/([0-9]+)"; }
19 data- Any re"/?q=node/[0-9]+/delete"
20 { id := url re"/?q=node/([0-9]+)"; }
/* Update rules */
21 data* Article re"/?q=node/[0-9]+/edit"
22 { id = url re"/([0-9]+)/edit";
item[0] = formfield "title";
23
item[1] = formfield "body"; }
24
25 data* Page re"/?q=node/[0-9]+/edit"
26 { id = url re"/([0-9]+)/edit";
item[0] = formfield "title";
27
item[1] = formfield "body"; }
28
29 user -> group re"/?q=og/users/[0-9]+/add_user"
30 { user.id = formfield "og_names";
31
group.id = url re"/([0-9]+)/add_user"; }
32 user -/> group re"/?q=og/unsubscribe/[0-9]+/[0-9]+"
33 { group.id = url re"/([0-9]+/)/";
34
user.id = url re"[(0-9]+)(?!\/)"; }
35 user -> data re"/?q=node/add/.*" if (formfield "status"="0")
36 { user.id = authenticated_user;
37
data.id = res_hdr "Location" re"/?q=node/([0-9]+)"; }
38 group -> data re"/?q=node/add/*" if (formfield "status"="1")
39 { group.id = formfield "og_groups";
40
data.id = res_hdr "Location" re"/?q=node/([0-9]+)"; }
41 group -> PrivateGroupName "/?q=node/add/group" if (formfield
(cid:44)→ "og_private"="1")
42 { group.id = res_hdr "Location" re"/?q=node/([0-9]+)";
43
PrivateGroupName.id = res_hdr "Location" re"/?q=node/([0-9]+)"; }
Listing 3: The complete UDA policy for WordPress
/* Deﬁnition rules */
1 user+ "/wp-login.php" if (res_hdr "Set-Cookie"
(cid:44)→ re"wordpress_logged_in_.*")
2 { id := res_body re/"\"uid\":\"([0-9]+)\"";
3
token := res_hdr "Set-Cookie" re"wordpress_logged_in_.*"; }
4 data+ Post re"/wp-admin/post\.php" if (formfield
(cid:44)→ "visibility"="private")
5 { id := res_hdr "Location" re"/?post=([0-9]+)";
6
item := formfield "post_title", formfield "content"; }
7 user- re"wp-admin/users.php.*action=delete" if (formfield
(cid:44)→ "action"="dodelete" and res_status="302")
8 { id := url re"user=([0-9]+)"; }
9 data- re"/wp-admin/post\.php.*action=delete" if (res_status="302")
10 { data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
/* Update rules */
11 data* Post re"/wp-admin/post\.php.*action=edit"
12 { id := res_hdr "Location" re"/?post=([0-9]+)";
13
14
item[0] = formfield "post_title";
item[1] = formfield "content"; }
15 user -> data re"/wp-admin/post\.php" if (formfield
(cid:44)→ "visibility"="private")
16 { user.id = authenticated_user;
17
data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
18 group -> data re"/wp-admin/post\.php.*action=trash" if
(cid:44)→ (res_status="302")
19 { group.id = Null;
20
data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
21 group -/> data re"/wp-admin/post\.php.*action=untrash" if
(cid:44)→ (res_status="302")
22 { group.id = Null;
23
data.id = res_hdr "Location" re"/?post=([0-9]+)"; }
615