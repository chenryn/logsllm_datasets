# T-Reqs: HTTP Request Smuggling with Differential Fuzzing

**Authors:**
- Bahruz Jabiyev, Northeastern University, Boston, MA, USA
- Steven Sprecher, Northeastern University, Boston, MA, USA
- Kaan Onarlioglu, Akamai Technologies, Cambridge, MA, USA
- Engin Kirda, Northeastern University, Boston, MA, USA

## Abstract

HTTP Request Smuggling (HRS) is an attack that exploits discrepancies in HTTP processing between two servers in a proxy-origin configuration, allowing attackers to smuggle hidden requests through the proxy. Although the concept of HRS is not new, it has gained popularity due to recent novel exploitation techniques and real-world abuse scenarios.

In this work, we step back from highly-specific exploits and present the first systematic exploration of HRS within a scientific framework. We design an experimental infrastructure powered by a novel grammar-based differential fuzzer, test 10 popular server/proxy/CDN technologies in various combinations, identify pairs that result in processing discrepancies, and discover new HRS exploits. Our experiments reveal previously unknown ways to manipulate HTTP requests for exploitation and document the server pairs prone to HRS.

### CCS Concepts
- **Security and Privacy → Web Application Security**

### Keywords
- HTTP Request Smuggling
- HTTP Desync Attacks

### ACM Reference Format
Bahruz Jabiyev, Steven Sprecher, Kaan Onarlioglu, and Engin Kirda. 2021. T-Reqs: HTTP Request Smuggling with Differential Fuzzing. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3460120.3485384

## 1 Introduction

The increasing use of web caches, proxies, cloud services, and Content Delivery Networks (CDNs) means that a typical HTTP request is often processed by multiple intermediate servers before reaching its destination. HTTP Request Smuggling (HRS) is an attack that exploits discrepancies in the HTTP processing semantics of these different servers to confuse them about message boundaries, thereby smuggling unintended requests into the connection inside the request body.

HRS was first documented by Linhart et al. in 2005 [24]. However, the technique gained prominence only recently when researchers proposed novel variants and demonstrated attacks on high-profile targets (e.g., [6, 15, 19, 23]). These attacks have been shown to lead to response queue and cache poisoning, which can be exploited for various nefarious purposes such as personal data leakage, credential theft, session hijacking, denial of service, and security control bypass attacks, resulting in significant financial losses (e.g., [5, 16, 17]).

While some researchers have released tools (e.g., [7, 36]) that partially automate the detection of HRS, these tools are primarily designed to assist website owners and penetration testers in probing specific targets for vulnerabilities. They are narrowly scoped, focusing mainly on the manipulation of the Content-Length and Transfer-Encoding headers, which govern how servers determine HTTP message bounds.

To date, HRS has not been systematically studied; disclosed vulnerabilities have been driven by case studies targeting popular websites. Previous work on HRS leaves two important gaps in our understanding:
1. HRS is a system interaction problem involving at least two HTTP processors. These processors may not be individually buggy, but their combined use leads to parsing or semantic disagreements, resulting in vulnerabilities.
2. Previous attacks focus on the manipulation of the Content-Length and Transfer-Encoding headers. The potential for other HTTP headers or parts of the request to induce similar processing discrepancies remains unexplored.

In this paper, we present the first study that investigates HRS within a scientific framework. We present a novel experimental setup involving 10 popular web servers and proxies: Apache, NGINX, Tomcat, Apache Traffic Server (ATS), HAProxy, Squid, Varnish, Akamai, Cloudflare, and CloudFront. We study these technologies in pairs to identify which combinations are vulnerable to HRS. To achieve this, we propose a grammar-based fuzzer called T-Reqs, which incorporates string and tree mutations targeting a wide variety of HTTP headers, the request line, and the request body. T-Reqs employs a differential fuzzing strategy, first testing each target technology in isolation, and then comparing responses to identify pairs that behave differently, signaling a potential vulnerability.

Once we identify the combinations that exhibit discrepancies and the payloads that trigger them, we deploy every server pair in a proxy-to-origin formation for further experimentation and verification of our findings. We examine the conditions that cause the potential HRS attacks to succeed or fail in this setup and demonstrate a range of exploits we discover.

Our results show that attacks can be induced by manipulating every part of a request, highlighting that HRS is a complex system interaction problem that can arise from seemingly innocuous processing discrepancies between pairs of web technologies that are otherwise secure in isolation.

### Contributions
- We present the most comprehensive study of HRS to date, examining attacks within a scientific framework for the first time.
- We propose a novel approach and experimental setup to identify HTTP processing discrepancies between 10 popular web servers and proxy services.
- We develop a grammar-based differential HTTP fuzzer called T-Reqs, and make it open source.
- We discover novel HRS payloads made possible by manipulating HTTP request parts beyond the Content-Length and Transfer-Encoding headers.
- We systematically examine the practical conditions that determine the success of HRS.

### Availability
T-Reqs is open-source and publicly available on the authors’ websites.

### Ethical Considerations
This study was conducted within a controlled experiment setup, and no attacks were launched against any external entities. We followed established coordinated-disclosure best practices, notifying all tested technology vendors of our findings, providing them with a copy of this paper, and making our data and team available for further assistance.

## 2 Background & Related Work

In this section, we explain the basic terminology used in the rest of the text and summarize how HRS attacks work.

### 2.1 HTTP Requests & Chunked Encoding

Listing 1 illustrates the structure of a typical HTTP request, which consists of the following three components:

1. **Request Line**: The first line specifies the HTTP method (POST), the requested URI (/search), and the protocol version (HTTP/1.1).
2. **Header Block**: This section follows the request line and lists header fields and values that define various parameters of the communication. For example, the Host header specifies the endpoint, and the Content-Length header indicates the length of the message body.
3. **Request Body**: Separated from the header block by a blank line containing a carriage return and a line feed (CRLF or \r\n), the request body starts and contains the message payload. In Listing 1, the body consists of a parameter and its value, `query=funny+cats`.

**Listing 1: Regular body.**
```http
POST /search HTTP/1.1
Host: example.com
Content-Length: 16

query=funny+cats
```

**Chunked transfer encoding** is an alternative encoding scheme available in HTTP/1.1, where the message body is split into multiple chunks transferred independently. This mechanism is useful for streaming applications when the size of the data to be transferred is not known a priori [10].

**Listing 2: Chunked body.**
```http
POST /search HTTP/1.1
Host: example.com
Transfer-Encoding: chunked

6
query=
a;foo=bar
funny+cats
0
X-Header:value
```

**Table 1: Breakdown of the chunked body.**
| Component | Description |
| --- | --- |
| 6\r\n | Chunk size |
| query=\r\n | Chunk data |
| a;foo=bar\r\n | Chunk size & chunk extension |
| funny+cats\r\n | Chunk data |
| 0\r\n | Last chunk |
| X-Header:value\r\n | Trailer part |
| \r\n | Terminating CRLF |

Note that the `Transfer-Encoding: chunked` header in Listing 2 indicates to the receiver that chunked encoding is in effect. When using chunked encoding, sending the `Content-Length` header is not meaningful, and according to RFC 7230, it is prohibited: "A sender MUST NOT send a `Content-Length` header field in any message that contains a `Transfer-Encoding` header field." [10]

### 2.2 HTTP Request Smuggling (HRS)

HRS arises from a discrepancy between the HTTP processing behaviors of two servers that process the same request on the traffic path. These servers could include CDNs, stand-alone proxies, web caches, load balancers, or security products. In this text, we call the first server receiving the request the **entrypoint**, and the next one the **exitpoint**. While this abstraction is sufficient for our discussion, note that a typical request may be processed by more than two such entities, and a hazardous combination of any two could lead to attacks.

HRS involves a maliciously crafted request such that the entrypoint and exitpoint disagree on the bounds of the message. All documented attacks achieve this by including both the `Content-Length` and `Transfer-Encoding: chunked` headers in the request. If the entrypoint honors one header and the exitpoint the other, they parse the message body differently, and an HRS attack is possible. Even when both servers are strictly RFC compliant and reject or normalize messages containing both headers, an attacker can still abuse header parsing discrepancies (e.g., by introducing invisible characters or minor syntax errors into headers) and prevent one of the servers from recognizing an invalid header combination.

Let’s illustrate the attack through an example:

1. **The attacker crafts a smuggler request** which includes a second hidden request inside the message body. Listing 3 shows such a request, including `Content-Length: 33` and `Transfer-Encoding: ;chunked` together. Note the extra semicolon in the latter, which will serve to confuse the message parser in the next step.

**Listing 3: Malicious smuggler request.**
```http
POST /search HTTP/1.1
Host: example.com
Content-Length: 33
Transfer-Encoding: ;chunked

0
`
GET /img/i.jpg HTTP/1.1
X:X
```

2. **The entrypoint receives the request** but cannot correctly parse `Transfer-Encoding: ;chunked` due to the semicolon. The server disregards chunked encoding and instead parses the message body according to the `Content-Length: 33` header. As a result, the entrypoint forwards all 33 bytes shown between lines 5-9 to the next hop.

**Listing 4: Incoming request.**
```http
GET /js/j.js HTTP/1.1
Host: example.com
A
A
A
```

**Listing 5: Smuggled request.**
```http
GET /img/i.jpg HTTP/1.1
X:X
GET /js/j.js HTTP/1.1
Host: example.com
```

This example demonstrates how a carefully crafted request can exploit the processing discrepancies between two servers, leading to an HRS attack.