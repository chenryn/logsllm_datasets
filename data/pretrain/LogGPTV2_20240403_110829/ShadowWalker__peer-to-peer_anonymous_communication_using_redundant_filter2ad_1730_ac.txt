Restricted Topology Attack: In a simple random walk design,
the ﬁrst malicious node is also the terminus of a random
walk, due to the route capture attack. However, in our pro-
tocol, the random walk may continue past the ﬁrst malicious
node in case one of its shadows is honest. In particular, if
the last node in the circuit is honest, the malicious nodes
will not learn the destination of the circuit, and as such will
gain nothing by learning (or guessing at) the identity of the
initiator. However, if the last node is compromised, then the
ﬁrst malicious node in the circuit can perform timing anal-
ysis to establish that the two nodes are on the same circuit.
It can then assign probabilities to the initiator as before, by
considering all nodes that can reach its previous hop within
i − 1 hops. Thus if the last hop is compromised, and the
ﬁrst malicious node is at the i’th position, then it can infer
that the initiator lies in the set of nodes who can reach its
previous hop in i − 1 hops.
(i will have to be found out
by timing analysis between the ﬁrst malicious node and the
last.)
We ﬁrst study the eﬀect of route capture attacks by mod-
eling the sampling bias. We can think of an k-hop random
walk as sampling a node that is k hops away from the ini-
tiator. If the walk proceeded undisturbed, then the proba-
bility that this sampled node would be malicious would be
f . However, the route capture attack introduces a bias into
this sampling, such that the longer the random walk, the
larger the possibility of the route being captured and thus
the last node being compromised. We now compute the bias
we can expect when sampling nodes using a k-hop random
walk. The k’th hop will be deﬁnitely malicious if any of
the ﬁrst k − 1 stages are able to launch a route capture at-
tack. The probability of launching route capture is given by
1 −`1 − f r+1´k−1. If the attacker is unable to launch the
route capture attack in the ﬁrst k − 1 hops, then the k’th
hop is malicious with probability f . We can now compute
the probability that the k’th hop is compromised as follows:
P (k’th hop is compromised) = “1 −`1 − f r+1´k−1” · 1
· f
(3)
+`1 − f r+1´k−1
Figure 4 shows the probability that the k’th hop is com-
promised, for r = 2. We can see the cascading eﬀect due
to route capture attacks: as the random walk length is ex-
tended, the probability that the next hop is compromised
becomes higher. Note that there is hardly any sampling
bias for f  6.5 ) Finally, we study the
eﬀect of increasing redundancy. Figure 7 shows the plot of
entropy with varying redundancy for l = 3. We can see that
increasing redundancy beyond 2 does not have any signiﬁ-
cant beneﬁt. We use r = 2 in the remainder of our analysis.
4.3 Using Shorter Circuits
First, consider a two-hop random walk. Let us denote the
ﬁrst hop as A and the second hop as B. If both A, B are ma-
licious, then the initiator anonymity is compromised. When
only B is compromised, the initiator can be narrowed to the
3This is a slight simpliﬁcation, as the exact fraction of com-
promised tunnels will depend on the share of bandwidth and
the guard/exit status of compromised nodes
4Fingers of ﬁngers do not overlap in a regular de Bruijn
topology.
5In real networks, the lack of perfect load-balancing will
result in somewhat worse mixing, and thus values of l >
logd N may still make sense.
y
p
o
r
t
n
E
 20
 19.5
 19
 18.5
 18
 17.5
 17
 16.5
 16
 0
r=1
r=2
r=3
 0.05
 0.1
 0.15
 0.2
Fraction of Compromised Nodes
Figure 7: Eﬀect of varying redundancy: There is lit-
tle advantage in increasing redundancy beyond r = 2
set of nodes that have A as their ﬁngers. The expected size of
this set is quite small (d), resulting in poor anonymity. Also
note that the latter event happens frequently, with proba-
bility about f , where as both A and B are malicious with
probability about f 2.
Now, let us consider our modiﬁcation to the protocol: a
node performs a secure three-hop random walk (A, B, C),
and then uses the last two hops (B, C) for anonymous com-
munication, by building a circuit directly to B and then
extending it to C. Again, the dominant event is when only
C is compromised. Under this event, the attacker can nar-
row the choice of the initiator to the set of nodes who have
B within two hops. The expected size of this set is now d2.
Thus our modiﬁcation results in an increase in anonymity,
while keeping the circuit length constant.
Note that in the anonymity analysis of the modiﬁed two
hop random walk protocol, the entropy is 0 when the last
two nodes are compromised. Thus let us redeﬁne Mi for
(i ≤ l − 2) to be the event such that the ﬁrst malicious node
on the circuit is at the i′th position, the last node is also
compromised, but the second last node is honest. We deﬁne
Ml−1 as the event that the last two nodes are compromised,
regardless of whether any previous nodes were compromised
as well. P (Ml−1) = f 2, and H(I|Ml−1) = 0, since the
initiator contacts the second last node directly. We keep the
deﬁnition of Ml the same as before; i.e., only the last hop is
compromised. For i ≤ l − 2, P (Mi) can be expressed as:
P (Mi) = f (1 − f )i−1(1 − f r)`1 − f r+1´l−2−i
Figure 8 shows the plot of entropy for our modiﬁed pro-
(1 − f )f (7)
167y
p
o
r
t
n
E
 20
 19.5
 19
 18.5
 18
 17.5
 17
 16.5
 0
l=2
l=2-3
l=2-4
l=2-5
l=2-6
l=6
 0.05
 0.1
 0.15
 0.2
Fraction of Compromised Nodes
y
p
o
r
t
n
E
 14
 13
 12
 11
 10
 9
 8
 7
 0
l=5
l=2-5
Salsa
 0.05
 0.1
 0.15
 0.2
Fraction of Compromised Nodes
Figure 8: Using last two hops for anonymous com-
munication: Mitigating restricted topology attacks
while keeping circuit length constant
Figure 9: Comparison with Salsa: For f = 0.2, our
protocol has 4.5 bits more entropy than Salsa
tocol, computed as:
l−2
Xi=1
+ 1 −
H =
P (Mi)H(I|Mi) + P (Ml)H(I|Ml)
P (Mi)! log2 N
l
Xi=1
(8)
Here, l = 2–6 refers to our modiﬁed protocol where a
node performs a 6 hop random walk and then uses only the
last two hops for anonymous communication. We can see
that that our modiﬁcation allows a user to derive higher
anonymity using longer random walks, but keeping the cir-
cuit length constant. Viewed from another perspective, this
extension creates a tradeoﬀ between anonymity and perfor-
mance. Using all l hops for anonymous communication is
more secure, but introduces higher latency on the communi-
cation and uses more system resources. Using only the last
two hops will improve the system performance, at the cost
of revealing the identity of the initiator to the second-to-
last hop. As can be see in Figure 8, the loss of anonymity
is slight: using l = 2–6 results in anonymity that is only
slightly lower than l = 6.
4.4 Comparison with Salsa
We will now compare our ShadowWalker protocol with
Salsa [33]. Salsa uses secure lookup as a primitive to build
a circuit for anonymous communication, which makes Salsa
susceptible to information leak attacks [29]. To compute
the eﬀect of active attacks on lookups, we used a simulator
developed by the authors of Salsa [32]. The simulator was
conﬁgured to simulate 1000 topologies, and in each topology,
results were averaged over 1000 random lookups. The Salsa
architecture divides the identiﬁer space into groups, where
the number of groups is denoted by |G|. We used the param-
eters N = 10, 000 and |G| = 128 for the simulation (it is dif-
ﬁcult to scale the simulations beyond 10, 000 nodes). Next,
we modeled the Salsa path building process as a stochastic
activity network in the M¨obius framework [7]. Figure 9 com-
pares the anonymity provided by ShadowWalker and Salsa.