  6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997,
  7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103,
  7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207,
  7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297,
  7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411,
  7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499,
  7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561,
  7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643,
  7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723,
  7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829,
  7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919,
]
def make_tlv(type, byte_data):
  output = []
  output.append(bytes(type, "utf-8")[:4])
  output.append(struct.pack(">I", len(byte_data)))
  output.append(byte_data)
  return b''.join(output)
def step1_encode_as_tlv(input_data_as_byte_stream):
  output = []
  output.append(make_tlv("BEGN", bytes("abcdefghijklmnopqrstuvwxyz", "utf-8")))
  output.append(make_tlv("DATA", input_data_as_byte_stream))
  output.append(make_tlv("END.", bytes("ABCDEFGHIJKLMNOPQRSTUVWXYZ", "utf-8")))
  return b''.join(output)
def step2_encrypt_data(data_to_encrypt):
  output = []
  for i in range(len(data_to_encrypt)):
    byte_to_encrypt = data_to_encrypt[i]
    key_number = NUMBERS[i]
    output.append(byte_to_encrypt ^ (key_number & 0xff))
  return bytes(bytearray(output))
def encode(input_data_as_byte_stream):
  tlv_data = step1_encode_as_tlv(input_data_as_byte_stream)
  encrypted_data = step2_encrypt_data(tlv_data)
  return encrypted_data
#END
```
`tester.py`:
```python
import random
import os
from encoder_golfed import encode
from decoder import decode
for i in range(1000):
  sz = random.randint(0, 800)
  data = os.urandom(sz)
  data_processed = decode(encode(data))
  if data != data_processed:
    raise Exception('data mismatch')
print("Done")
```
`protocol.txt`:
```
                                  TOP SECRET
                             BURN BEFORE READING
Agents,
Please send all and any intel to the drop servers encoded in the manner
described in this document. The drop servers will NOT accept any data encoded
in a different way.
In this explanation we are assuming your input data is a stream of bytes not
longer than 800 bytes.
** Step 1. Type-Length-Value
The data need to be TLV encoded. Each TLV block needs to have the following
format:
Bytes 0-3: 4 ASCII characters denoting type
Bytes 4-7: big endian encoded length of data
Bytes 8-...: data
The drop servers require at least 3 TLV blocks:
Block 0: type 'BEGN', length 26, data: abcdefghijklmnopqrstuvwxyz
Block 1: type 'DATA', followed by length/data corresponding to your input data
Block 2: type 'END.', length 26, data: ABCDEFGHIJKLMNOPQRSTUVWXYZ
** Step 2. Encryption
The data needs to be stream-encrypted by XORing the byte stream output of Step 2
with the following sequence of numbers (i.e. byte at index N from the output of
Step 2 must be XORed with bottom 8 bits of number at index N):
   2    3    5    7   11   13   17   19   23   29
  31   37   41   43   47   53   59   61   67   71
  73   79   83   89   97  101  103  107  109  113
 127  131  137  139  149  151  157  163  167  173
 179  181  191  193  197  199  211  223  227  229
 233  239  241  251  257  263  269  271  277  281
 283  293  307  311  313  317  331  337  347  349
 353  359  367  373  379  383  389  397  401  409
 419  421  431  433  439  443  449  457  461  463
 467  479  487  491  499  503  509  521  523  541
 547  557  563  569  571  577  587  593  599  601
 607  613  617  619  631  641  643  647  653  659
 661  673  677  683  691  701  709  719  727  733
 739  743  751  757  761  769  773  787  797  809
 811  821  823  827  829  839  853  857  859  863
 877  881  883  887  907  911  919  929  937  941
 947  953  967  971  977  983  991  997 1009 1013
1019 1021 1031 1033 1039 1049 1051 1061 1063 1069
1087 1091 1093 1097 1103 1109 1117 1123 1129 1151
1153 1163 1171 1181 1187 1193 1201 1213 1217 1223
1229 1231 1237 1249 1259 1277 1279 1283 1289 1291
1297 1301 1303 1307 1319 1321 1327 1361 1367 1373
1381 1399 1409 1423 1427 1429 1433 1439 1447 1451
1453 1459 1471 1481 1483 1487 1489 1493 1499 1511
1523 1531 1543 1549 1553 1559 1567 1571 1579 1583
1597 1601 1607 1609 1613 1619 1621 1627 1637 1657
1663 1667 1669 1693 1697 1699 1709 1721 1723 1733
1741 1747 1753 1759 1777 1783 1787 1789 1801 1811
1823 1831 1847 1861 1867 1871 1873 1877 1879 1889
1901 1907 1913 1931 1933 1949 1951 1973 1979 1987
1993 1997 1999 2003 2011 2017 2027 2029 2039 2053
2063 2069 2081 2083 2087 2089 2099 2111 2113 2129
2131 2137 2141 2143 2153 2161 2179 2203 2207 2213
2221 2237 2239 2243 2251 2267 2269 2273 2281 2287
2293 2297 2309 2311 2333 2339 2341 2347 2351 2357
2371 2377 2381 2383 2389 2393 2399 2411 2417 2423
2437 2441 2447 2459 2467 2473 2477 2503 2521 2531
2539 2543 2549 2551 2557 2579 2591 2593 2609 2617
2621 2633 2647 2657 2659 2663 2671 2677 2683 2687
2689 2693 2699 2707 2711 2713 2719 2729 2731 2741
2749 2753 2767 2777 2789 2791 2797 2801 2803 2819
2833 2837 2843 2851 2857 2861 2879 2887 2897 2903
2909 2917 2927 2939 2953 2957 2963 2969 2971 2999
3001 3011 3019 3023 3037 3041 3049 3061 3067 3079
3083 3089 3109 3119 3121 3137 3163 3167 3169 3181
3187 3191 3203 3209 3217 3221 3229 3251 3253 3257
3259 3271 3299 3301 3307 3313 3319 3323 3329 3331
3343 3347 3359 3361 3371 3373 3389 3391 3407 3413
3433 3449 3457 3461 3463 3467 3469 3491 3499 3511
3517 3527 3529 3533 3539 3541 3547 3557 3559 3571
3581 3583 3593 3607 3613 3617 3623 3631 3637 3643