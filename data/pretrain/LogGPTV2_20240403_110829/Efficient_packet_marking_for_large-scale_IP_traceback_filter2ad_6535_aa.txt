title:Efficient packet marking for large-scale IP traceback
author:Michael T. Goodrich
Efﬁcient Packet Marking for Large-Scale IP Traceback
Michael T. Goodrich∗
Department of Info. & Computer Science
University of California
Irvine, CA 92697-3425
PI:EMAIL
ABSTRACT
We present a new approach to IP traceback based on the
probabilistic packet marking paradigm. Our approach,
which we call randomize-and-link, uses large checksum
cords to “link” message fragments in a way that is highly
scalable, for the checksums serve both as associative ad-
dresses and data integrity veriﬁers. The main advantage
of these checksum cords is that they spread the addresses
of possible router messages across a spectrum that is too
large for the attacker to easily create messages that col-
lide with legitimate messages. Our methods therefore
scale to attack trees containing hundreds of routers and
do not require that a victim know the topology of the
attack tree a priori. In addition, by utilizing authenti-
cated dictionaries in a novel way, our methods do not
require routers sign any setup messages individually.
Categories and Subject Descriptors: C.2.2 [Computer-
Communication Networks]: Network Protocols.
General Terms: Algorithms, Management, Security.
Keywords: denial-of-service, traceback, packet marking.
1.
INTRODUCTION
Internet denial-of-service (DOS) attacks are a serious
problem. Recent analysis, by Moore et al. [13], shows
that there are an average of at least 4,000 denial-of-
service attacks per week on the Internet. Moreover, their
analysis showed that 50% of attacks have an intensity
of at least 1,000 packets per second, that 25% have an
intensity of at least 5,000 packets per second, and that
some attacks have intensities in excess of 500,000 packets
per second. Most attacks last at least 10 minutes, 10%
last more than an hour, and 2% last at least 5 hours
(some even last days). The volume of packets received
in a DOS attack is, by its very nature, overwhelming.
For example, in a 10-minute attack at 5,000 packets-
per-second, a DOS victim will receive 3 million packets.
∗
This work was support by DARPA grant F30602-00-2-
0509 and NSF grant PHY-9980044.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies
are not made or distributed for proﬁt or commercial advantage and that
copies bear this notice and the full citation on the ﬁrst page. To copy
otherwise, to republish, to post on servers or to redistribute to lists,
requires prior speciﬁc permission and/or a fee.
CCS’02, November 18–22, 2002, Washington, DC, USA.
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
Moore et al. note that even DOS-hardened ﬁrewalls can
be disabled at packet rates in excess of 14,000 packets-
per-second. Simply put, there is little existing deterrent
against DOS attacks and prevention of DOS attacks is
not foolproof. Therefore, we desire ways of tracing DOS
attacks back to their source(s), so as to employ packet-
blocking and law-enforcement techniques against them.
1.1 Modeling the Problem
One of the insidious aspects of a denial-of-service at-
tack is that it uses the strength of routers—to move
packets quickly—against the victim. This aspect of DOS
attacks is especially troubling in the case of a distributed
denial-of-service (DDOS) attack, where many diﬀerent
hosts are compromised and used as “zombies” to ﬁre
packets at the victim. In this case, the attack packets
proceed to the victim not in a single path, but through
a tree. Thus, in order to model DDOS attacks, we con-
sider the attack as propagating in a tree T , where the
root of the tree T is the victim, V , each internal node in
T corresponds to a router X on the Internet, and each
leaf in T is a (possibly compromised) attack host. Thus,
T is a subtree of the Internet, where we are modeling
only the inﬂow of packets to V . In fact, from the per-
spective of V , the tree T is a subtree of a much larger
universal tree U that consists of the union of all routes
to V in the Internet. For any internal node X in T ,
other than the root, we therefore sometimes refer to the
parent of X as X’s downstream neighbor. Likewise, the
children of a node X in T are sometimes called X’s up-
stream neighbors. Our goal in the traceback problem is
to identify the internal nodes1 of the tree T . That is, we
wish to identify the internal nodes in the universal tree
U that correspond to routers unwittingly serving in the
attack tree T to send attack packets to the victim V .
In addition, we speciﬁcally want to exclude from T any
routers that are not part of the attack. Moreover, so
as to traceback large-scale distributed denial-of-service
attacks, we desire solutions that allow for eﬃcient trace-
back even if T contains hundreds of routers.
1One could also consider the version where we also iden-
tify the leaves of T , but identifying internal nodes is sim-
pler and suﬃcient—since ISPs control routers whereas
administration of hosts is not consolidated. Therefore,
we focus on the problem of identifying internal nodes in
T .
117We model the attacker as an adversary, A, who can
compromise hundreds of hosts and use them as “zom-
bies” in a DDOS attack. We allow that A may have
knowledge about our traceback algorithms, and that he
can even try to design his DDOS attack so as to confuse,
break, or delay our algorithms. In so doing, A can make
it diﬃcult for us to identify some of the routers in the
attack tree T . Speciﬁcally, if he succeeds in having us
miss a router in T , then we say that we have made a
false-negative identiﬁcation. In addition, we allow that
A may know the IP addresses of routers in the Internet;
hence, he can try to trick us so as to implicate routers
not in T . If we therefore identify a router X as belong-
ing to the attack tree T , when X is in fact not in T , then
we say that we have made a false positive identiﬁcation.
Clearly, we desire algorithms that minimize the number
of false-negative and false-positive identiﬁcations.
A major challenge in the IP traceback problem is that
there are approximately 200 million hosts on the Inter-
net (e.g., see www.netsizer.com); hence, the universal
tree U for a potential victim V has 200 million leaves.
Conservatively assuming that there is a router for ev-
ery 200 hosts on the Internet, we therefore estimate the
number of routers (internal nodes) in U to be at least
one million. Thus, in practical terms, solving the IP
traceback problem amounts to correctly identifying a
few hundred of the million internal nodes in U as be-
longing to the attack tree T . Ideally, we would like to do
this identiﬁcation without requiring any a priori knowl-
edge of the universal tree U on the part of the victim
V , for such information could be diﬃcult to obtain and
maintain.
Finally, we desire solutions to the IP traceback prob-
lem that are fast and eﬃcient. We prefer solutions that
minimize the amount of additional traﬃc on the Inter-
net needed to solve the traceback problem or create an
infrastructure for solving it. Likewise, we want to allow
for incremental adoption by routers in any new infras-
tructure needed for traceback, and we want to minimize
the amount of state that must be maintained by routers.
In addition, the computations needed on the part of the
victim to reconstruct the attack tree T should be fast
enough so that V can quickly reconstruct T . The main
objective of a DOS attack is to consume resources, so
our solutions to the IP traceback problem should them-
selves not contribute to that goal.
1.2 Previous Related Work
There are several existing approaches to the IP trace-
back problem (e.g., see Baba and Matsuda [3], Park and
Lee [16], or Savage et al. [19]). We review some related
approaches below.
Pattern-based Filtering and Hop-by-hop Tracing.
In
some cases, such as in reﬂector-based DDOS attacks [17],
we can use patterns in the attack packets to ﬁlter out
DDOS packets at a ﬁrewall. Likewise, the approach of
hop-by-hop tracing, which is also known as link testing,
uses a pattern-based approach to do traceback of a DOS
attack while it is in progress. This is the approach of the
automated Pushback mechanism [10], for example, and
it is the solution currently supported manually by many
router manufacturers. In this approach, a network ad-
ministrator or his/her agent logs into the routers nearest
the victim, and using statistics and pattern analysis, de-
termines the next upstream routers in the attack tree T .
The approach is then repeated at the upstream routers
for as long as the attack continues. This scheme there-
fore requires immediate action during the attack, and
requires considerable coordination between network ad-
ministrators (to either communicate directly or setup
access points for the agents of partnering administra-
tors). This technique also requires some pattern-based
way to separate legitimate packets from attack packets.
A similar approach is used by Burch and Cheswick [5]
to perform traceback by iteratively ﬂooding from V por-
tions of the Internet to see its eﬀects on V ’s incoming
traﬃc. Unfortunately, because of their iterative nature,
these approaches have limited traceback capabilities in a
large-scale DDOS. In addition, they have limited foren-
sic appeal, since they can only be used while the attack
is occurring.
ICMP Messaging. An alternative approach, based on
ICMP messaging [4], is to have each router X decide,
with some probability q (typically, q = 1/20000 is men-
tioned), for each packet P to send an additional ICMP
packet to the destination, which identiﬁes X and some
content of P . The main idea of this approach is that dur-
ing a DDOS, a suﬃcient amount of attack packets will
trigger ICMP messages from the routers in the attack
tree T so that the victim can reconstruct T from these
messages. The main drawback of this approach is that it
causes additional network traﬃc even when no DDOS is
present. Even so, it is not eﬃcient, for identifying all the
n internal nodes in the attack tree T requires, according
to the analysis of the coupon collectors problem (e.g.,
see Motwani and Raghavan [14]), an expected number
of nHn/dq packets to arrive at the victim, where Hn is
the n-th Harmonic number and d is the average depth
of T . For example, if d = 20 and n = 1000, then the
expected number of attack packets needing to arrive at
the victim V before V will have suﬃcient information
to reconstruct T is 7.5 million.
Logging.
In addition to the hop-by-hop and ICMP
messaging approaches, several researchers have advo-
cated a logging approach to the IP traceback problem.
In a logging solution, we either ask routers to log the
packets they process or we augment the data packets
themselves to contain a full log of all the routers they
have encountered on their way to their destinations [18].
Stone [22] and Baba and Matsuda [3] advocate logging
of packet information at the routers, and Snoeren et
al. [20] propose the logging of message digests of pack-
ets at the routers. With any of these solutions, a victim
queries routers or their storage agents to see whether
they sent suspect attack packets. The drawback with
these approaches is that they require additional storage
at the routers. They also require a way of publishing
the data stored at routers in a timely manner (which
itself could become a performance bottleneck or DOS
vulnerability).
Probabilistic Packet Marking. An intriguing alterna-
tive solution to the IP traceback problem is probabilis-
118tic packet marking. This traceback approach, which we
follow in this paper, can be applied during or after an
attack, and it does not require any additional network
traﬃc, router storage, or packet size increase.
Probabilistic packet marking was originally introduced
by Savage et al. [19]. In this approach to the IP trace-
back problem, each router X performs, for each packet
it processes, an information injection event that occurs
with a set probability p (e.g., p = 1/20). The infor-
mation injection involves using b bits in the IP header
that are typically not used or changed by routers (they
identify the 16-bit IP identiﬁcation ﬁeld). They use 5
bits of this ﬁeld for a hop count, which helps their re-
construction algorithm. The remaining bits are used for
the message MX that the router X wishes to send. If
that message is too big, they break it into fragments
and use the b − 5 bits of usable IP header to store a
fragment oﬀset and its data fragment. By then includ-
ing a hash interleaved with the message MX , the victim
can reconstruct MX from the packets it receives during
the DOS attack. Their algorithm is quite interesting, as
it introduces the packet marking framework, and does
not require a priori knowledge of the universal tree U .
But their algorithm, unfortunately, is not practical for
large distributed denial-of-service attacks.
In particu-
lar, their algorithm for reconstructing a message MX
from a router at distance d from the victim requires nl
d
checksum tests, where nd is the number of routers in T
at distance d from V and l is the number of fragments
messages have been divided into (and this bound gen-
erously assumes there are no “noise” packets from the
adversary). For example, if nd = 30 and l = 8, then the
victim has to perform over 650 trillion checksum tests
in order to reconstruct each of the 30 messages. Such
a computation is, of course, not feasible for the victim,
and even if it were, it would introduce many false pos-
itives. Moreover, this scheme is easily spoofed by an
adversary that knows this algorithm.
Song and Perrig [21] improve the performance of prob-
abilistic packet marking and suggest the use of hash
chains [12] for authenticating routers. They also use
a 5-bit distance ﬁeld, but they do not fragment router
messages.
Instead, they assume the victim knows the
universal tree U , and they include a (b − 5)-bit XOR
of hashed message authentication codes (HMACs) from
each router X and its downstream neighbor Y . Once
a time-released key is revealed, which is a computation
performed out-of-band, the victim uses his/her knowl-
edge of U and the revealed keys to determine which
routers have marked the given packets. The computa-
tion proceeds breadth-ﬁrst from V , so that each phase
requires nd−1Nd HMAC tests, where nd−1 denotes the
number of routers in T at distance d− 1 from V and Nd
denotes the number of routers in the universal graph U
at distance d from V . For example, if nd−1 = 50 and
we conservatively estimate that the number of routers in
U at distance d is 100,000, then their algorithm would
perform 5 million HMAC tests to determine the routers
at distance d in T . Summing over distances d = 5 to
d = 25 (and assuming that near-by tests are faster), im-
plies a total of at least 100 million HMAC tests, which
is several orders of magnitude better than a similar re-
construction in the Savage et al. approach. Such a com-
putation is still a great eﬀort for the victim, of course,
but it is at least feasible. Unfortunately, using an 11-bit
HMAC implies that over 45,000 of these tests will be
validated at random. Thus, the authentication aspects
of their algorithm has scalability issues in addition to
the drawback of requiring knowledge of U .
Dean et al. [7] introduce an interesting algebraic ap-
proach to probabilistic packet marking. In their scheme
a router X will mark the b reusable bits of a packet
with probability p, as in the previous schemes, but the
marking information is the value of a linear polynomial
with X’s identity as its leading coeﬃcient. Any sub-
sequent router Y not initiating a similar computation
nevertheless changes the b-bits by performing an itera-
tion of Horner’s rule to create an evaluation of a new
polynomial having the IP addresses of the routers on
the path from X to Y as its coeﬃcients. Thus, in order
to reconstruct each path in the attack tree, the victim
must perform polynomial interpolation with noise on the
packets it has received. Dean et al. identify 25 bits in
the IP header that can be used for marking, namely, 16
bits from the ID ﬁeld used in fragmentation (which is
used only 0.25% of the time), 8 type-of-service bits, and
one ﬂag bit (which is also used in fragmentation). They
describe several algorithms for polynomial interpolation
with noise for reconstructing paths of T . Their schemes
do not require knowledge of the universal tree U . Un-
fortunately, their schemes do not easily lend themselves
to authentication (without requiring knowledge of U ).
Moreover, the interpolation-with-noise algorithms are
complex and slow for large distributed denial-of-service
attacks (e.g., when T contains hundreds of routers), for
in such cases the amount of “noise” far exceeds the in-
terpolation data (some of which could have been forged
by the adversary).
In addition to the above packet marking algorithms,
Adler [1] and Park and Lee [16] study tradeoﬀs for var-
ious parameters in probabilistic packet marking.
1.3 Our Results
In this paper we introduce a novel approach to prob-
abilistic packet marking, which we call the randomize-
and-link approach, that greatly improves the practical-
ity and security of probabilistic packet marking. The
main idea of our approach is to have each router X
fragment its message MX into several words and in-
clude in the b reusable bits such a word fragment at
random together with a large checksum cord on the en-
tire message MX . For example, if b = 25, we may wish
to include 14 bits of a checksum cord in every marked