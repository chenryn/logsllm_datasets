### 2.4 高级软件包管理操作

#### 2.4.1 命令行中的高级软件包管理操作

以下是一些高级的软件包管理操作，这些操作在 `aptitude` 中可能过于复杂或不具备所需的功能。

**注意事项：**
- 对于支持多架构的软件包，您可能需要为某些命令指定架构名称。例如，使用 `dpkg -L libglib2.0-0:amd64` 列出 amd64 架构的 `libglib2.0-0` 软件包内容。
- 系统管理员应谨慎使用低级别的软件包工具（如 `dpkg -i …` 和 `debi …`），因为它们不会自动处理依赖关系。`dpkg` 的命令行选项 `--force-all` 及类似选项只适用于高级用户。若未完全理解其效果而使用它们可能会破坏整个系统。

**重要提示：**
- 所有系统配置和安装命令都需要以 root 用户身份运行。
- 与使用正则表达式的 `aptitude` 不同，其他软件包管理命令使用类似于 shell glob 的通配符。
- `apt-file(1)` 由 `apt-file` 软件包提供，并且需要先运行 `apt-file update`。
- `configure-debian(8)` 由 `configure-debian` 软件包提供，它运行 `dpkg-reconfigure(8)` 作为后端。
- `dpkg-reconfigure(8)` 使用 `debconf(1)` 作为后端来运行软件包脚本。
- `apt-get build-dep`、`apt-get source` 和 `apt-cache showsrc` 命令需要源列表中存在 `deb-src` 条目。
- `dget(1)`、`debuild(1)` 和 `debi(1)` 需要 `devscripts` 软件包。
- 参见第 2.7.13 节了解使用 `apt-get source` 的打包（重打包）过程。
- `make-kpkg` 命令需要 `kernel-package` 软件包（参见第 9.10 节）。
- 通用打包请参见第 12.9 节。

**常用命令：**
- `file_name_pattern`: `apt-file list` 列出档案库中匹配的软件包内容。
- `package_name_pattern`: `dpkg-reconfigure package_name` 重新配置软件包。
- `dpkg-reconfigure -plow`: 通过最详细的方式重新配置软件包。
- `package_name`: `configure-debian` 以全屏菜单的形式重新配置软件包。
- `dpkg --audit`: 审计部分安装的软件包。
- `dpkg --configure -a`: 配置所有部分安装的软件包。
- `apt-cache policy binary_package_name`: 显示二进制软件包的可用版本、优先级和档案库信息。
- `apt-cache madison package_name`: 显示软件包的可用版本和档案库信息。
- `apt-cache showsrc binary_package_name`: 显示二进制软件包的源代码软件包信息。
- `apt-get build-dep package_name` 或 `aptitude build-dep package_name`: 安装构建软件包所需的依赖。
- `apt-get source package_name`: 从标准档案库下载源代码。
- `dget dsc 文件的 URL`: 从其他档案库下载源代码软件包。
- `dpkg-source -x`: 从源代码软件包集合中构建代码树。
- `debuild binary`: 从本地源代码树中构建软件包。
- `make-kpkg kernel_image` 或 `make-kpkg --initrd kernel_image`: 从内核源代码树中构建内核软件包。
- `dpkg -i package_name_version-debian.revision_arch.deb`: 安装本地软件包到系统中。
- `apt install /path/to/package_filename.deb`: 安装本地软件包并尝试自动解决依赖。
- `debi package_name_version-debian.revision_arch.dsc`: 安装本地软件包到系统中。
- `dpkg --get-selections >selection.txt`: 保存 dpkg 级别的软件包选择状态信息。
- `dpkg --set-selections <selection.txt`: 使用 dpkg 设置软件包选择状态。
- `echo package_name hold | dpkg --set-selections`: 将一个软件包的选择状态设置为 hold。

### 2.4.2 验证已安装的软件包文件

如果您已经安装了 `debsums` 软件包，可以使用 `debsums(1)` 命令通过 `/var/lib/dpkg/info/*.md5sums` 文件中的 MD5sum 值来验证已安装的文件。有关 MD5sum 的更多信息，请参见第 10.3.5 节。

**注意：**
由于 MD5sum 数据库可能被入侵者篡改，`debsums(1)` 作为安全工具的用途有限。这种工具主要用于校验因管理员造成的本地修改或媒体错误导致的损坏。

### 2.4.3 预防软件包故障

许多用户更倾向于使用 Debian 系统的 testing（或 unstable）版本，因为它提供了新的功能和软件包。但这也会使系统更容易遇到严重的软件包问题。

- 安装 `apt-listbugs` 软件包可以在通过 APT 系统升级时自动检查 Debian BTS 中的严重 bug。
- 安装 `apt-listchanges` 软件包可以在使用 APT 系统升级时提供重要的新闻信息。

### 2.4.4 搜索软件包元数据

尽管浏览 Debian 网站 (https://packages.debian.org/) 是搜索软件包元数据的更简单方法，但这里还是介绍一些传统的方法。

- `grep-dctrl(1)`、`grep-status(1)` 和 `grep-available(1)` 命令用于搜索具有 Debian 软件包控制文件格式的任何文件。
- `dpkg -S file_name_pattern` 可以用来搜索包含该文件的软件包名称，但会忽略由维护者脚本创建的文件。
- 如果需要对 `dpkg` 元数据进行更复杂的搜索，可以在 `/var/lib/dpkg/info/` 目录下运行 `grep -e regex_pattern *` 命令。
- 若要递归查找软件包依赖，可以使用 `apt-rdepends(8)`。

### 2.5 Debian 软件包内部管理

让我们学习 Debian 软件包管理的内部工作原理，这将有助于您独立解决一些软件包问题。

#### 2.5.1 档案库元数据

每个发行版的元数据文件都保存在 Debian 镜像站的 `dist/codename` 下面，例如 `http://deb.debian.org/debian/`。档案库的结构可以通过网络浏览器浏览。其中有六种关键的元数据文件：

| 文件名         | 位置                    | 内容                                                         |
|----------------|-------------------------|--------------------------------------------------------------|
| Release        | 发行版的顶层            | 档案库描述和完整性信息                                       |
| Release.gpg    | 发行版的顶层            | `Release` 文件的签名文件，使用档案库密钥签名                 |
| Contents-architecture | 发行版的顶层          | 列出在相关架构中所有软件包的全部文件                         |
| Release        | 每个发行版/区域/架构组合的顶部 | 归档描述使用 `apt_preferences(5)` 的规则                     |
| Packages       | 每个发行版/区域/二进制架构组合的顶部 | 连接 `debian/control` 获取二进制包                           |
| Sources        | 每个发行版/区域/源代码组合的顶部 | 连接 `debian/control` 获取源代码包                           |

为了减少网络流量，在最近的档案库中，这些元数据存储为压缩的差分文件。

#### 2.5.2 顶层“Release”文件及真实性

**提示：**
顶层 `Release` 文件用于签署 secureAPT 系统下的归档文件。

每个 Debian 档案库的网址都有一个这样的 `Release` 文件，例如 `http://deb.debian.org/debian/dists/unstable/Release`，内容如下：

```
Origin: Debian
Label: Debian
Suite: unstable
Codename: sid
Date: Sat, 14 May 2011 08:20:50 UTC
Valid-Until: Sat, 21 May 2011 08:20:50 UTC
Architectures: alpha amd64 armel hppa hurd-i386 i386 ia64 kfreebsd-amd64 kfreebsd-i386 mips mipsel powerpc s390 sparc
Components: main contrib non-free
Description: Debian x.y Unstable - Not Released
MD5Sum:
bdc8fa4b3f5e4a715dd0d56d176fc789 18876880 Contents-alpha.gz
9469a03c94b85e010d116aeeab9614c0 19441880 Contents-amd64.gz
3d68e206d7faa3aded660dc0996054fe 19203165 Contents-armel.gz
...
```

**注意：**
- 在第 2.1.5 节中，您可以找到关于 `suite` 和 `codename` 的逻辑。“发行版”同时指代 `suite` 和 `codename`。
- 所有由档案库提供的归档 `area` 名称都会列在 `Components` 下。

顶层文件 `Release` 的完整性由名为 secureapt 的加密架构验证，具体描述见 `apt-secure(8)`：
- 加密签名文件 `Release.gpg` 由顶层授权文件 `Release` 和加密的 Debian 档案库公钥创建。
- 公开的 Debian 档案库公钥可以通过安装 `debian-archive-keyring` 软件包安装到本地。
- secureAPT 系统自动验证下载的顶层文件 `Release` 的完整性。加密验证过程使用 `Release.gpg` 文件和本地安装的 Debian 档案库公钥。
- 所有 `Packages` 和 `Sources` 文件的完整性由顶层 `Release` 文件中的 MD5sum 值验证。所有软件包文件的完整性由 `Packages` 和 `Sources` 文件中的 MD5sum 值验证。参见 `debsums(1)` 和第 2.4.2 节。
- 由于加密签名验证比计算 MD5sum 值消耗更多的 CPU，因此使用 MD5sum 值验证每个软件包，使用加密签名验证顶层 `Release` 文件，这种方式在提供较好安全性的同时也有较好的性能（参见第 10.3 节）。

如果源列表条目特别指定了 `signed-by` 选项，它下载的顶层 `Release` 文件将使用指定的公钥进行验证。这对于包含非 Debian 档案库的源列表非常有用。

**提示：**
不建议使用 `apt-key(8)` 命令来管理 APT 密钥。

当然，您可以使用 `gpg` 手动验证 `Release` 的完整性，使用 `Release.gpg` 文件和在 `ftp-master.debian.org` 上公布的 Debian 档案库公钥。

#### 2.5.3 档案库层的“Release”文件

**提示：**
档案库层的 `Release` 文件将用作 `apt_preferences(5)` 的规则。

归档层次的 `Release` 文件，其全部归档位置在源列表中指定，如以下的 `http://deb.debian.org/debian/dists/unstable/main/binary-amd64/Release` 或 `http://deb.debian.org/debian/dists/sid/main/binary-amd64/Release`。

```
Archive: unstable
Origin: Debian
Label: Debian
Component: main
Architecture: amd64
```

**小心：**
对于 `Archive:` 字段，系列名称（如 `stable`、`testing`、`unstable`）用于 Debian 档案库，而代号（如 `trusty`、`xenial`、`artful`）用于 Ubuntu 档案库。

对于某些档案库，如 `experimental` 和 `bookworm-backports`，其中包含的软件包不会被自动安装，因为有额外的行。例如，在 `http://deb.debian.org/debian/dists/experimental/main/binary-amd64/Release` 中有如下额外的一行：

```
Archive: experimental
Origin: Debian
Label: Debian
NotAutomatic: yes
```