file_name_pattern
apt-file list
列出档案库中匹配的软件包的内容
package_name_pattern
dpkg-reconfigure package_name 重新配置软件包
dpkg-reconfigure -plow
通过最详细的方式来重新配置软件包
package_name
configure-debian 以全屏菜单的形式重新配置软件包
dpkg --audit 部分安装软件包的审计系统
dpkg --configure -a 配置所有部分安装的软件包
apt-cache policy
显示一个二进制软件包的可用版本、优先级和档案库信息
binary_package_name
apt-cache madison package_name 显示一个软件包的可用版本和档案库信息
apt-cache showsrc
显示一个二进制软件包的源代码软件包信息
binary_package_name
apt-get build-dep package_name 安装构建软件包所需要的软件包
aptitude build-dep package_name 安装构建软件包所需要的软件包
apt-get source package_name （从标准档案库）下载源代码
dget dsc 文件的 URL （从其它档案库）下载源代码软件包
dpkg-source -x 从源代码软件包集合（“*.orig.tar.gz”和
package_name_version-debian.revis“io*n..ddesbcian.tar.gz”/”*.diff.gz”）中构建代码树
debuild binary 从本地的源代码树中构建软件包
make-kpkg kernel_image 从内核源代码树中构建一个内核软件包
make-kpkg --initrd kernel_image 从启用了initramfs的内核代码树中构建一个内核软件包
dpkg -i
安装一个本地的软件包到系统中
package_name_version-debian.revision_arch.deb
apt install
安装本地软件包到系统中，同时尝试自动解决依赖
/path/to/package_filename.deb
debi
安装本地软件包到系统中
package_name_version-debian.revision_arch.dsc
dpkg --get-selections ’*’
保存dpkg级别的软件包选择状态信息
>selection.txt
dpkg --set-selections
使用dpkg设置软件包选择状态
<selection.txt
echo package_name hold | dpkg 使用dpkg将一个软件包的包选择状态设置为hold（相当
--set-selections 于”aptitude hold 包名”）
Table2.13: 高级软件包管理操作
Debian参考手册 57/233
2.4 高级软件包管理操作
2.4.1 命令行中的高级软件包管理操作
下面列出了一些其它的软件包管理操作，这些操作对于aptitude过于高级或缺失所需的功能。
注意
对于一个支持多架构的软件包，你可能需要为一些命令指定架构名称。例如，使用“dpkg -L
libglib2.0-0:amd64”来列出amd64架构的libglib2.0-0软件包的内容。
小心
系统管理员应该小心使用低级的软件包工具（例如“dpkg -i …”和“debi …”），它们不会自动处理所需
的软件包依赖。dpkg的命令行选项“--force-all”和类似的选项（参见dpkg(1)）只适用于高手。没有
完全理解它们的效果却使用它们会破坏你的整个系统。
请注意以下几点。
• 所有的系统配置和安装命令都需要以root运行。
• 不同于使用正则表达式的aptitude（参见第 1.6.2 节），其它的软件包管理命令使用类似于shellglob的通配符
（参见第 1.5.6 节）。
• apt-file(1)由apt-file软件包提供，并且需要先运行“apt-file update”。
• configure-debian(8)由configure-debian软件包提供，它运行dpkg-reconfigure(8)作为后端。
• dpkg-reconfigure(8)使用debconf(1)作为后端来运行软件包脚本。
• ”apt-get build-dep”、”apt-get source”和”apt-cache showsrc”命令需要源列表中存在”deb-src”条
目。
• dget(1)、debuild(1)和debi(1)需要devscripts软件包。
• 参见第 2.7.13 节里使用”apt-get source”的打包（重打包）过程。
• make-kpkg命令需要kernel-package软件包（参见第 9.10 节）。
• 通用打包参见第 12.9 节.
2.4.2 验证安装的软件包文件
已经安装debsums软件包的，能使用debsums(1)命令通过”/var/lib/dpkg/info/*.md5sums”文件中的MD5sum
值，验证已安装的文件。参见第 10.3.5 节来获得MD5sum是怎样工作的信息。
注意
因为MD5sum数据库可能被侵入者篡改，debsums(1)作为安全工具使用有限。这种工具用于校验管理者造成的本
地修改或媒体错误造成的损坏是很不错的。
2.4.3 预防软件包故障
许多用户更想使用Debian系统的testing（或unstable）版本，因为它有新的功能和软件包。但这会使得系统更容易
遇到严重的软件包问题。
安装软件包apt-list bugs可以避免您的系统遭遇严重bugs，在通过APT系统升级时，它会自动检查DebianBTS
里的严重bug。
安装apt-listchanges软件包，在使用APT系统升级时它会在“NEWS.Debian”中提供重要新闻。
Debian参考手册 58/233
2.4.4 搜索软件包元数据
尽管近来浏览Debian网站https://packages.debian.org/是搜索软件包元数据更加简单的方法，但我们依旧来看看更传统
的方法。
grep-dctrl(1)、grep-status(1)和grep-available(1)命令被用来搜索具有Debian软件包控制文件格式的任
何文件。
“dpkg -S file_name_pattern”能够被用来搜索包含该文件的软件包名称，其匹配的名称是由dpkg安装的。但
它会忽略维护者的脚本创建的文件。
如果你需要对 dpkg 元数据进行更复杂的搜索，你需要在“/var/lib/dpkg/info/”目录下运行“grep -e
regex_pattern *”命令。这会使你在软件包脚本和安装查询文本中搜索提及的单词。
如果你想递归查找软件包依赖，你应该使用apt-rdepends(8)。
2.5 Debian 软件包内部管理
让我们来学习Debian软件包管理的内部工作原理。这应该能够帮助你独立解决一些软件包问题。
2.5.1 档案库元数据
每个发行版的元数据文件都保存在Debian镜像站的“dist/codename”下面，例如“http://deb.debian.org/debian/”。
档案库的结构可以通过网络浏览器来浏览。其中有6种关键的元数据。
文件 位置 内容
Release 发行版的顶层 档案库描述和完整性信息
”Release”文件的签名文件，使用档案库
Release.gpg 发行版的顶层
密钥签名
Contents-architecture 发行版的顶层 列出在相关架构中所有软件包的全部文件
每个发行版/区域/架构组合的顶 归档描述使用apt_preferences(5)的
Release
部 规则
每个发行版/区域/二进制架构组
Packages 连接debian/control获得二进制包
合的顶部
每个发行版/区域/源代码组合的
Sources 连接debian/control获取源代码包
顶部
Table2.14: Debian档案库元数据的内容
为了减少网络流量，在最近的档案库中，这些元数据存储为压缩了的差分文件。
2.5.2 顶层“Release”文件及真实性
提示
顶层“Release”文件用于签署secureAPT系统下的归档文件。
每个Debian档案库的网址都有一个这样的“Release”文件，例如“http://deb.debian.org/debian/dists/unstable/Release”，
内容如下。
Origin: Debian
Label: Debian
Suite: unstable
Codename: sid
Debian参考手册 59/233
Date: Sat, 14 May 2011 08:20:50 UTC
Valid-Until: Sat, 21 May 2011 08:20:50 UTC
Architectures: alpha amd64 armel hppa hurd-i386 i386 ia64 kfreebsd-amd64 kfreebsd-i386 mips ←-
mipsel powerpc s390 sparc
Components: main contrib non-free
Description: Debian x.y Unstable - Not Released
MD5Sum:
bdc8fa4b3f5e4a715dd0d56d176fc789 18876880 Contents-alpha.gz
9469a03c94b85e010d116aeeab9614c0 19441880 Contents-amd64.gz
3d68e206d7faa3aded660dc0996054fe 19203165 Contents-armel.gz
...
注意
在第 2.1.5 节里，你能够发现我使用”suite”和”codename”的逻辑。“发行版”被用来同时谈及”suite”和”codename”.
所有由档案库提供的归档”area”名，会被列在”Components”下.
顶层文件”Release”的完整性，是由叫secureapt的加密架构来验证，在apt-secure(8)中进行描述。
• 加密签名文件”Release.gpg”是由顶层授权文件”Release”和加密的Debian档案库公钥创建。
• 公开的Debian档案库公钥能够通过安装debian-archive-keyring软件包来安装到本地。
• secureAPT系统自动验证下载的顶层文件”Release”的完整性。加密验证过程用到了”Release.gpg”文件和本地
安装的Debian档案库公钥.
• 所有”Packages”和”Sources”文件的完整性是由在顶层”Release”文件里的MD5sum值来验证。所有软件包文
件的完整性由”Packages”和”Sources”文件里的MD5sum值来验证.参见debsums(1)和第 2.4.2 节.
• 因加密签名验证比计算MD5sum值消耗更多的CPU，使用MD5sum值来验证每一个软件包，使用加密签名来验证
顶层的”Release”文件，这种方式提供较好安全性的同时，也有比较好的性能(参见第 10.3 节).
如果源列表条目特别指定了”signed-by”选项，它下载的顶层”Release”文件使用这个指定的公钥来验证。这在当
源列表包含有非Debian档案库时有用。
提示
不赞成使用apt-key(8)命令来管理APT密钥。
当然，你能够使用gpg手工验证”Release”的完整性，使用”Release.gpg”文件和在ftp-master.debian.org上公布的
Debian档案库公钥。
2.5.3 档案库层的“Release”文件
提示
档案库层的“Release”文件将用作apt_preferences(5)的规则。
归档层次的”Release”文件，其全部归档位置在源列表中指定，如以下的”http://deb.debian.org/debian/dists/unstable/main/binary-amd64/Release”
或”http://deb.debian.org/debian/dists/sid/main/binary-amd64/Release”。
Archive: unstable
Origin: Debian
Label: Debian
Component: main
Architecture: amd64
Debian参考手册 60/233
小心
对于”Archive:”章节，系列名称(”stable”，”testing”，”unstable”,…)用于Debianarchive，而代号
(”trusty”,”xenial”,”artful”,…)用于Ubuntuarchive。
对于部分档案库,比如说experimental和bookworm-backports,它们包含的软件包不会被自动安装，这是因为有
额外的行，例如在”http://deb.debian.org/debian/dists/experimental/main/binary-amd64/Release”
里面有如下额外的一行。
Archive: experimental
Origin: Debian
Label: Debian
NotAutomatic: yes