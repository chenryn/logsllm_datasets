by referring to states in the underlying Markov model,
not to events in the given ft. We develop a logic to
express properties over fts and present counterexamples
generation methods on the level of fts. Since existing
counterexample generation methods [19] works on the
underlying Markov models, it is diﬃcult to relate these
to the ft. Another related line of work are software spe-
ciﬁcation languages, such as the Java Modelling Language
(JML) [20]. JML uses Hoare style pre- and postconditions
and invariants, to prove the correctness of programs using
the design by contract paradigm. Logics operating on
the structure of high-level description mechanisms (other
than FTs) exist. The Object Constraint Language (OCL)
for UML is a textual query and description language
developed by IBM [21]. [22] uses description logic (DL) to
detect and resolve consistency conﬂicts between (diﬀerent
versions of) UML diagrams.
is involved with the
automatic analysis of UML class diagrams using DL. In
[24], the author provides a formulation of Pandora, a logic
for the qualitative analysis of temporal fts. In spite of
the use of logic to capture ft properties, [24] focuses on
the analysis of time, introducing gates that are diﬀerent
from the ones considered in this work: the Priority-AND-
[23]
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
442
gate (PAND), the Simultaneous-AND-gate (SAND), and
the Priority-OR gate (POR). In BFL we do not (yet)
consider time and we focus on AND, OR and VOT-gates
in order to create a ﬂexible yet powerful logic that can be
further extended in the future. Furthermore, [24] focuses
more on the algorithmic part of FTA while leaving out
any formalization of fts or the logic deﬁned upon. To
the best of our knowledge, no other work considers the
option of developing a logic speciﬁc to fts. Literature
related to fts and bdds is opportunely referenced and
contextualized in Sec. II and Sec. V.
Structure of the paper: Sec. II provides background
on fts, Sec. III showcases the logic, Sec. IV shows how
ft properties can be speciﬁed in BFL, Sec. V presents our
model checking algorithms, Sec. VI constructs and repres-
ents useful counterexamples, Sec. VII shows an application
of our logic to a medium-sized case study and Sec. VIII
concludes the paper and reﬂects on future work.
II. Fault Trees: Background
Developed in the early ’60s [25], fts are directed acyclic
graphs (dags) that model how low-level
failures can
propagate and cause a system-level failure. The overall
failure of a system is captured by a top level event (tle),
that is reﬁned through the use of gates. fts come with
diﬀerent gate types. For the purposes of our paper, we
will focus on static fault trees, featuring OR-gates, AND-
gates and VOT(k/N)-gates. In order for a low-level failure
to propagate, at least one child of an OR-gate has to fail,
all the children of an AND-gate must fail, and at least
k out of N elements must fail for a VOT(k/N)-gate to
fail. When gates can no longer be reﬁned, we reach the
basic events (bes) which are the leaves of the tree. fts
enable both qualitative and quantitative analyses. On the
qualitative side, minimal cut sets (mcss) and minimal
path sets (mpss) have a paramount role in highlighting
root causes of failures and critical paths in the system.
mcss are minimal sets of events that - when failed - cause
the failure of the tle. mpss are minimal sets of events
that - when remaining operational - guarantee that the
tle will remain operational.
Deﬁnition 1 (Fault Tree). A Fault Tree is a 4-tuple T =
(cid:2)BE, IE, t, ch(cid:3) consisting of the following components:
• BE is the set of basic events.
• IE is the set of intermediate elements with BE∩IE = ∅.
Let etop ∈ IE be the top element of the fault tree.
• E = BE ∪ IE is the set of all the elements.
• t : IE → GateTypes is a function that maps each inter-
mediate element to its gate type, with GateTypes =
{AND, OR}.
• ch : IE → P(E)\∅ is a function that maps each
intermediate element to its children (its inputs). With
e ∈ IE, we require that ch(e) (cid:9)= ∅.
In order to be meaningful, FTs have to meet the fol-
lowing well-formedeness condition: the graph formed by
G = (cid:2)E, ch(cid:3) must be acyclic with a unique root in etop
that is reachable from all other nodes.
>1
We can extend GateTypes with any gate derived from
AND and OR-gates. E.g., we can add VOT(k/N) by ex-
tending GateTypes as follows: GateTypes = {AND, OR} ∪
{VOT(k/N) | k, N ∈ N
, k ≤ N}. Furthermore, it suﬃces
to require that |ch(e)| = N if t(e) =VOT(k/N ). The
behaviour of a ft T can be rigorously expressed through
its structure function [1] - ΦT: if we assume the convention
that a be has value 1 if failed and 0 if operational, the
structure function indicates the status of the tle given
the status of all the bes ofT.
Deﬁnition 2 (Structure Function). The structure func-
n × E → B
tion of a fault tree T is a function ΦT : B
that takes as input a status vector b = (b1, . . . , bk) ofk
Booleans, where bi = 1 if the i-th be has failed and bi = 0
if it is operational, and an arbitrary element e ∈ E.
ΦT(b , e) =
bi
⎧⎪⎪⎪⎨
⎪⎪⎪⎩
(cid:6)
(cid:7)
e(cid:2)∈ch(e)
e(cid:2)∈ch(e)
(cid:2))
ΦT(b , e
(cid:2))
ΦT(b , e
if e = ei ∈ BE
if e ∈ IE and t(e)=OR
if e ∈ IE and t(e)=AND
for each set of bes we can identify its char-
Thus,
acteristic vector b. Note that the semantics for e ∈
(cid:8)
IE and t(e)=VOT(k/N) is given by
(cid:2))
e(cid:2)∈ch(e) ΦT(b , e
≥ k
(cid:9)
Σ
Next we deﬁne the classical notions of minimal cut sets
and minimal path sets [1]. A cut set is any set of basic
events that causes the tle to occur, i.e., for which the
structure function evaluates to 1. A path set is any set of
basic events that does not cause the tle to occur, i.e.,
for which the structure function evaluates to 0.
Deﬁnition 3. A status vector b is a cut set (CS) for
element e ∈ E of a given tree T if ΦT(b , e) = 1. A
minimal cut set (MCS) is a cut set of which no subset
is a cut set. Formally: b is a MCS for e ∈ E of T if
ΦT(b , e) = 1 ∧ ∀b
Deﬁnition 4. A status vector b is a path set (PS) for
element e ∈ E of a given tree T if ΦT(b , e) = 0. A minimal
path set (MPS) is a path set of which no subset is a path
set. Formally: b is a MPS for e ∈ E of T if ΦT(b , e) =
0 ∧ ∀b
The ft in Fig. 1 has two minimal cut sets: {IW , H3} and
{IT , H2}. Its minimal paths sets are {IW , IT}, {IW , H2},
{H3 , IT}, and {H3 , H2}.
(cid:2) ⊂ b , ΦT(b , e) = 0.
(cid:2) ⊂ b , ΦT(b , e) = 1.
III. A Logic to Reason about FTs
A. Syntax
Below, we present the syntax of BFL. The atomic
propositions in BFL can be any ft element e. As usual,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
443
formulae can be combined through Boolean connectives.
Furthermore, we can set evidence: φ[e (cid:15)→ 0] sets the
element e to 0, and φ[e (cid:15)→ 1] sets e to 1. Finally, BFL
allows reasoning about mcss.
We construct our logic on two syntactic layers, repres-
ented with φ and ψ. With χ we will refer to any formula
in either the ﬁrst or the second layer. Formulae in the ﬁrst
layer are evaluated on a single status vector, while for-
mulae in the second layer allow quantiﬁcation over status
vectors. Further, the IDP operator expresses whether two
formulae are independent, i.e. whether there is no event
which inﬂuences the truth value of both formulae.
φ ::= e | ¬φ | φ ∧ φ | φ[e (cid:15)→ 0] | φ[e (cid:15)→ 1] | MCS(φ)
ψ ::= ∃φ | ∀φ | IDP(φ, φ)
Note that φ[e (cid:15)→ 0] is not equivalent to φ ∧ ¬e. Taking
φ equal to ¬e, we will have that (¬e)[e (cid:15)→ 0] evaluates to
true, while (¬e)∧¬e is equivalent to ¬e. Moreover, we have
operators to express mcss for a given formula: in addition
to mcss for tle, we can evaluate whether a given status
vector is a mcs for an intermediate event (recall Def. 3).
Lastly, the second layer provides us with the possibility to
quantify over formulae and to check if two formulae (e.g.,
two intermediate events) are independent. We consider two
formulae to be independent whenever they do not share
any inﬂuencing basic event (IBE) i.e., any event the value
of which inﬂuences the truth value of the given formulae.
Syntactic sugar: We deﬁne several derived operators.
Apart from extra Boolean operators, mpss denotes the
minimal path sets, and SUP(e) means that event e ∈ E
is superﬂuous, i.e., its value does not inﬂuence the tle.
Finally, the voting operator Vot≥k
(φ1, . . . , φN) holds if at
least k of the formulae φ1, . . . , φN hold.
Vot
(cid:2)(cid:3)k
(φ1, . . . , φN) ::=
φu
u∈U
U⊆{1,...,N}
|U|(cid:2)(cid:3)k
Here, we have k ≤ N and (cid:5)(cid:6) ∈ {}.
B. Semantics
The semantics of BFL is given by the satisfaction
relation |=, which expresses whether a formula φ holds
for a ft T under the status vector b = (b1, . . . , bk). The
satisfaction for events e, Boolean connectives and setting
evidence are straightforward. For the MCS operator, we
have b , T |= MCS(φ) iﬀ b is a minimal vector that satisﬁes
φ, i.e., b satisﬁes φ, but if we change some bi = 0 into
φ1 ∨ φ2 ::=¬(¬φ1 ∧ ¬φ2)
φ1 ⇒ φ2 ::=¬(φ1 ∧ ¬φ2)
φ1 ≡ φ2 ::=(φ1 ⇒ φ2) ∧ (φ2 ⇒ φ1)
φ1 (cid:9)≡ φ2 ::=¬(φ1 ≡ φ2)
mps(φ) ::=mcs(¬φ)
(cid:11)(cid:12)
SUP(e) ::=IDP(e, etop)
(cid:10)
(cid:13)
⎛
⎝ (cid:12)
∧
¬φu
u∈{1,...,N}\U
⎞
⎠
bi = 1, then the vector no longer satisﬁes φ. In particular,
b , T |= MCS(etop) means that b is a minimal cut set for
the tle of T.
b , T |= e
iﬀ ΦT(b , e) = 1
b , T |= ¬φ
iﬀ b , T (cid:9)|= φ
b , T |= φ ∧ φ
iﬀ b , T |= φ and b , T |= φ
(cid:2)
(cid:2)
b , T |= φ[ei (cid:15)→ 0] iﬀ b
(cid:2)
(cid:2)
(cid:2) = (b
n) where
1, . . . , b
i = 0 and for j (cid:9)= i we have b
(cid:2)
(cid:2)
j = bj
b , T |= φ[ei (cid:15)→ 1] iﬀ b
(cid:2)
(cid:2)
n) where
1, . . . , b
j = bj for j (cid:9)= i
(cid:2)
(cid:2)
i = 1 and b
, T |= φ with b
, T |= φ with b
, T |= φ)
b , T |= MCS(φ) iﬀ b , T |= φ ∧ (¬∃b
With (cid:2)φ(cid:3) we denote the satisfaction set of vectors for φ,
i.e., the set containing all status vectors that satisfy φ. We
deﬁne semantics for the second syntactic layer as:
(cid:2) ⊂ b ∧ b
(cid:2) = (b
(cid:2). b
(cid:2)
(cid:2)
b
b
(cid:2)
T |= ∃φ
T |= ∀φ
T |= IDP(φ, φ
(cid:2))
iﬀ ∃b. b , T |= φ
iﬀ ∀b. b , T |= φ
iﬀ IBE(φ) ∩ IBE(φ
(cid:2)) = ∅
Here IBE is the set of inﬂuencing basic events deﬁned as:
IBE(φ) ={e ∈ BE | ∃b. b , T |= φ[e (cid:15)→ 0] and
b , T (cid:9)|= φ[e (cid:15)→ 1] or vice-versa}
Thus, IBE(φ) returns the set of bes that inﬂuence the
truth value of φ. Two events are independent if they do
not share any IBEs.
Example 1. If we wanted to know whether the failure
of the AND-gate CP in Fig. 1 implies the failure of the
tle CP/R for every possible truth assignment on bes
we would write ∀(CP ⇒ CP/R). If we wanted to check
whether it exists an assignment such that both CP and
CR fail, we would write ∃(CP ∧ CR). The same holds for
∨. Finally, if we wanted to check whether a speciﬁc vector
b represents a mcs/mps for CP/R, given b we would
write MCS(CP/R)/MPS(CP/R).
IV. COVID Case Study: modeling
To illustrate our logic, we formulate several properties
for a ft that models COVID-19 infection risks at con-
struction sides. This FT is a slightly modiﬁed version of
[26], and is displayed in Fig. 2.
COVID-19 fault tree: The tle for this tree rep-
resents a COVID-19 infected worker on site, abbreviated
IWoS. As shown in Fig. 2, the ft considers events in
several categories: COVID-19 pathogens and reservoirs
(i.e., germs and objects carrying the virus); their mode of
transmissions; the presence of susceptible hosts, infected
objects and workers; physical contacts; the status, as well
as human errors. Note that Figure 2 contains several re-
peated basic events: IT, PP, H1 and IW occur at multiple
places in the tree and refer to the same basic event. This
tle IWoS is reﬁned via an AND-gate with three children.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
444
Thus, for the TLE to occur the following must happen:
COVID pathogens/COVID infected objects must exist,
there has to be a susceptible host and COVID pathogens
must be transmitted in some way to this host. These
three events are captured by corresponding subtrees: the
purple OR-gate CP/R reﬁnes the existence of COVID
purple
pathogens/COVID infected objects, the OR-gate MoT in
teal reﬁnes modes of transmission and the AND-gate SH
teal
orange reﬁnes the presence of a susceptible host. In
in orange
order to further reﬁne these trees in a realistic way, the ft
contains duplicated leaves, e.g., Physical Proximity (PP)
occurs twice.
Properties: Following, we specify some properties us-
ing natural language and present the corresponding BFL
formulae:
• Is an infected surface suﬃcient for the transmission
of COVID?
∀(IS ⇒ MoT)
• Does the occurrence of Mode of Transmission require
human errors?
∀(MoT ⇒ (H1 ∨ H2 ∨ H3 ∨ H4 ∨ H5))
• Is an object disinfection error suﬃcient for the occur-
rence of tle?
∀(H4 ⇒ IWoS)
• Are at least 2 human errors suﬃcient for the occur-
rence of tle?
∀(Vot≥2 (H1 , . . . , H5) ⇒ IWoS)
• What are all the mcss for tle that include errors
in disinfecting objects?
(cid:2)MCS(IWoS) ∧ H4 (cid:3)
• Is not committing any human error suﬃcient to pre-
vent the occurrence of tle?
∃MPS(IWoS)[H1 (cid:15)→ 0, H2 (cid:15)→ 0, H3 (cid:15)→ 0,
ei∈BE\{H1 ,...,H5}
H4 (cid:15)→ 0, H5 (cid:15)→ 0, ei (cid:15)→ 1]
• What are the minimal ways to prevent the tle?
(cid:2)MPS(IWoS)(cid:3)
• Are a contact with an infected object and a contact
with an infected surface independent scenarios?
IDP(CIO, CIS)
• Is physical proximity superﬂuous for the occurrence
of tle?
SUP(PP)
A thorough analysis of these properties is conducted in
Sec. VII.
V. Model Checking Algorithms
We present two model checking procedures for BFL.
1) Given a speciﬁc vector b, a ft T and a formula χ,
check if b , T |= χ (Sec. V-C),
2) Given a ft T and a formula χ, compute all vectors
b such that b , T |= χ (Sec. V-D),
Furthermore, we oﬀer some observations on the following