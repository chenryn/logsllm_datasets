    #print >> sys.stderr, 'connection from', client_address_m
    data = connection_m.recv(4098)
    #print >> sys.stderr, 'received "%s"' % data
    password = 'laeyobmsamlrdmyh'
    # Get in loop
    while data != password:
        connection_m.sendall('wrong password, try again')
        data = connection_m.recv(4098)
        #print >> sys.stderr, 'received "%s"' % data
    while data:
        connection_m.sendall('ok')
        #print('welcome')
        # get first command
        data = connection_m.recv(4098)
        res = 0
        while data != 'quit':
            # get commands
            #print >> sys.stderr, 'received "%s"' % data
            cmd = data.rstrip('\n')
            res = commands(cmd)
            connection_m.send(res)
            if res == 'send zip':
                f = open('/home/tc/canudoit.zip', 'rb')
                f.seek(0)
                l = f.read(1024)
                while (l):
                    connection_m.send(l)
                    l = f.read(1024)
                f.close()
                #print >> sys.stderr, 'Done sending'
            #print('wait to client')
            # wait for next command
            data = connection_m.recv(4098)
        #print >> sys.stderr, 'bye'
        break
    #print >> sys.stderr, 'no more data from', client_address_m
finally:
    # Clean up the connection
    #print >> sys.stderr, 'closing socket'
    connection_m.close()
```
For the client, we have a file called `passwords.txt` with 8MB worth of passwords, and `client.py`:
```python
import socket
import sys
import time
from Crypto.Cipher import AES
BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s: s[0:-ord(s[-1])]
# read all the passwords
lines = [line.rstrip() for line in open('home/tc/passwords.txt')]
# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_ip = "192.168.54.150"
# Connect the socket to the port where the server is listening
server_address = (server_ip, 11111)
res = sock.connect_ex(server_address)
while res != 0:
    res = sock.connect_ex(server_address)
print >>sys.stderr, 'connecting to %s port %s' % server_address
try:
    dport = sock.recv(1024)
    #print >> sys.stderr, 'the encrypted port %s' % dport
    decryption_suite = AES.new('4dJhvjFRn2oXraty', AES.MODE_CBC, '1234567890123456')
    new_port = decryption_suite.decrypt(dport)
    #print >> sys.stderr, 'the new port %s' % new_port
finally:
    sock.close()
time.sleep(1)
# Create the NEW TCP/IP socket
sock_new = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Connect the socket to the port where the server is listening
server_address_new = (server_ip, int(new_port))
res1 = sock_new.connect_ex(server_address_new)
while res1 != 0:
    res1 = sock_new.connect_ex(server_address_new)
#print >>sys.stderr, 'connecting to %s port %s' % server_address_new
try:
    for line in lines:
        time.sleep(120)
        # Send data
        #print >> sys.stderr, 'sending "%s"' % line
        # print 'the sent password is ' + repr(line)
        sock_new.sendall(line)
        # receive ack
        data = sock_new.recv(128)
        if data == 'ok':
            break
    # get in to server
    #print >> sys.stderr, 'received "%s"\n' % data
    #print >> sys.stderr, 'password ok, what do you want to do?\n'
    cmd = raw_input('> ')
    answer = ''
    while cmd != 'quit':
        sock_new.sendall(cmd)
        answer = sock_new.recv(1024)
        #print >> sys.stderr, '%s ' % answer
        if answer == 'send zip':
            file_size = 420240
            #print(file_size)
            with open('received_file', 'wb') as f:
                #print ('file opened')
                total = 0
                while total != file_size:
                    dat = sock_new.recv(1024)
                    f.write(dat)
                    total += len(dat)
            #print >> sys.stderr, 'get the file'
        cmd = raw_input('> ')
    # for quit
    if answer != 'send zip' or answer != 'send txt':
        sock_new.sendall(cmd)
finally:
    #print >> sys.stderr, 'closing socket'
    sock_new.close()
```
Now that we've finished cheating, we can go back to solve the challenge using the harder (and intended) method. In order to do that, we need to perform an attack called "TCP Hijacking".
A nice and short explanation of the method we will use can be found [here](https://raw.githubusercontent.com/offensive-security/exploitdb-papers/master/papers/english/13587-tcp-session-hijacking.txt).
The most important part of the explanation is:
> At the establishment of a TCP session the client starts by sending a SYN-packet with a sequence number. This number is used to assure the transmission of packets in a chronological order. It is increased by one with each packet. Both sides of the connection wait for a packet with a specified sequence number. The first seq-number for both directions is random.
> 
> The server responds with an SYN/ACK packet which contains the seq-number of the client+1 and also its own start seq-number. The client confirms everything with an ACK packet including the seq-number of the server+1, and after that the session is established.
>
> To hijack a session it is required to send a packet with a right seq-number, otherwise they are dropped.
So, since we are sitting on the same network as the client and the server, we are able to easily sniff the traffic between them and capture the correct sequence number. We even have a 2 minute delay between every message. 
The article describes a tool named `shijack` that can be used to programmatically  hijack a TCP session. I used a fork called [rshijack
](https://github.com/kpcyrd/rshijack).
The flow is as follows:
1. We start the server and the client and have them negotiate a connection.
2. We start `rshijack` and supply it with the details of the connection, acquired from sniffing the communication between the client and the server.
3. `rshijack` listens to the network, and when the next communication between the client and the server occurs, takes note of the sequence numbers. 
4. `rshijack` informs us that it is now possible to hijack the session.
5. We can send and receive data using the client's session.
6. If the client sends another message, it will be discarded since the sequence numbers will be out of sync.
Here's a network capture showing this in action:
```
    1 0.000000000      0.0.0.0 → 255.255.255.255 DHCP 342 DHCP Discover - Transaction ID 0x4acdf14f 68 67
    2 0.000017537 192.168.54.2 → 255.255.255.255 DHCP 590 DHCP Offer    - Transaction ID 0x4acdf14f 67 68
    3 0.000349474      0.0.0.0 → 255.255.255.255 DHCP 342 DHCP Request  - Transaction ID 0x4acdf14f 68 67
    4 0.000356132 192.168.54.2 → 255.255.255.255 DHCP 590 DHCP ACK      - Transaction ID 0x4acdf14f 67 68
    5 2.114698229 PcsCompu_f4:51:fa → Broadcast    ARP 60 Who has 192.168.54.150? Tell 192.168.54.152
    6 2.114829777 PcsCompu_14:69:d5 → PcsCompu_f4:51:fa ARP 60 192.168.54.150 is at 08:00:27:14:69:d5
    7 2.114924911 192.168.54.152 → 192.168.54.150 TCP 74 43482 → 11111 [SYN] Seq=0 Win=29200 Len=0 MSS=1460 SACK_PERM=1 TSval=3333668464 TSecr=0 WS=128 43482 11111
    8 2.115083143 192.168.54.150 → 192.168.54.152 TCP 74 11111 → 43482 [SYN, ACK] Seq=0 Ack=1 Win=28960 Len=0 MSS=1460 SACK_PERM=1 TSval=2886436575 TSecr=3333668464 WS=128 11111 43482
    9 2.115192155 192.168.54.152 → 192.168.54.150 TCP 66 43482 → 11111 [ACK] Seq=1 Ack=1 Win=29312 Len=0 TSval=3333668464 TSecr=2886436575 43482 11111
   10 2.151619087 192.168.54.150 → 192.168.54.152 TCP 82 11111 → 43482 [PSH, ACK] Seq=1 Ack=1 Win=29056 Len=16 TSval=2886436611 TSecr=3333668464 11111 43482
   11 2.151864567 192.168.54.150 → 192.168.54.152 TCP 66 11111 → 43482 [FIN, ACK] Seq=17 Ack=1 Win=29056 Len=0 TSval=2886436611 TSecr=3333668464 11111 43482
   12 2.151874547 192.168.54.152 → 192.168.54.150 TCP 66 43482 → 11111 [ACK] Seq=1 Ack=17 Win=29312 Len=0 TSval=3333668501 TSecr=2886436611 43482 11111
   13 2.152558680 192.168.54.152 → 192.168.54.150 TCP 66 43482 → 11111 [FIN, ACK] Seq=1 Ack=18 Win=29312 Len=0 TSval=3333668502 TSecr=2886436611 43482 11111
   14 2.152808053 192.168.54.150 → 192.168.54.152 TCP 66 11111 → 43482 [ACK] Seq=18 Ack=2 Win=29056 Len=0 TSval=2886436612 TSecr=3333668502 11111 43482
   15 3.154792038 192.168.54.152 → 192.168.54.150 TCP 74 57984 → 39926 [SYN] Seq=0 Win=29200 Len=0 MSS=1460 SACK_PERM=1 TSval=3333669503 TSecr=0 WS=128 57984 39926
   16 3.155093303 192.168.54.150 → 192.168.54.152 TCP 74 39926 → 57984 [SYN, ACK] Seq=0 Ack=1 Win=28960 Len=0 MSS=1460 SACK_PERM=1 TSval=2886437614 TSecr=3333669503 WS=128 39926 57984
   17 3.155649477 192.168.54.152 → 192.168.54.150 TCP 66 57984 → 39926 [ACK] Seq=1 Ack=1 Win=29312 Len=0 TSval=3333669504 TSecr=2886437614 57984 39926
   18 7.268410598 PcsCompu_14:69:d5 → PcsCompu_f4:51:fa ARP 60 Who has 192.168.54.152? Tell 192.168.54.150
   19 7.268428814 PcsCompu_f4:51:fa → PcsCompu_14:69:d5 ARP 60 192.168.54.152 is at 08:00:27:f4:51:fa
   20 123.313916910 192.168.54.152 → 192.168.54.150 TCP 72 57984 → 39926 [PSH, ACK] Seq=1 Ack=1 Win=29312 Len=6 TSval=3333789602 TSecr=2886437614 57984 39926
   21 123.314325741 192.168.54.150 → 192.168.54.152 TCP 66 39926 → 57984 [ACK] Seq=1 Ack=7 Win=29056 Len=0 TSval=2886557713 TSecr=3333789602 39926 57984
   22 123.314751724 192.168.54.150 → 192.168.54.152 TCP 91 39926 → 57984 [PSH, ACK] Seq=1 Ack=7 Win=29056 Len=25 TSval=2886557714 TSecr=3333789602 39926 57984
   23 123.314960167 192.168.54.152 → 192.168.54.150 TCP 66 57984 → 39926 [ACK] Seq=7 Ack=26 Win=29312 Len=0 TSval=3333789603 TSecr=2886557714 57984 39926
   24 128.329985600 PcsCompu_f4:51:fa → PcsCompu_14:69:d5 ARP 60 Who has 192.168.54.150? Tell 192.168.54.152
   25 128.330472730 PcsCompu_14:69:d5 → PcsCompu_f4:51:fa ARP 60 192.168.54.150 is at 08:00:27:14:69:d5
   26 128.501174650 PcsCompu_14:69:d5 → PcsCompu_f4:51:fa ARP 60 Who has 192.168.54.152? Tell 192.168.54.150
   27 128.501687444 PcsCompu_f4:51:fa → PcsCompu_14:69:d5 ARP 60 192.168.54.152 is at 08:00:27:f4:51:fa
   28 243.476143508 192.168.54.152 → 192.168.54.150 TCP 74 57984 → 39926 [PSH, ACK] Seq=7 Ack=26 Win=29312 Len=8 TSval=3333909704 TSecr=2886557714 57984 39926
   29 243.477067034 192.168.54.150 → 192.168.54.152 TCP 91 39926 → 57984 [PSH, ACK] Seq=26 Ack=15 Win=29056 Len=25 TSval=2886677816 TSecr=3333909704 39926 57984
   30 243.477597432 192.168.54.152 → 192.168.54.150 TCP 66 57984 → 39926 [ACK] Seq=15 Ack=51 Win=29312 Len=0 TSval=3333909706 TSecr=2886677816 57984 39926
   31 248.496005010 PcsCompu_f4:51:fa → PcsCompu_14:69:d5 ARP 60 Who has 192.168.54.150? Tell 192.168.54.152
   32 248.496615046 PcsCompu_14:69:d5 → PcsCompu_f4:51:fa ARP 60 192.168.54.150 is at 08:00:27:14:69:d5
   33 248.667899654 PcsCompu_14:69:d5 → PcsCompu_f4:51:fa ARP 60 Who has 192.168.54.152? Tell 192.168.54.150
   34 248.668385065 PcsCompu_f4:51:fa → PcsCompu_14:69:d5 ARP 60 192.168.54.152 is at 08:00:27:f4:51:fa
   35 248.719714824 PcsCompu_17:82:1b → Broadcast    ARP 42 Who has 192.168.54.150? Tell 192.168.54.151
   36 248.720002615 PcsCompu_14:69:d5 → PcsCompu_17:82:1b ARP 60 192.168.54.150 is at 08:00:27:14:69:d5
   37 248.720013970 192.168.54.152 → 192.168.54.150 TCP 61 57984 → 39926 [PSH, ACK] Seq=15 Ack=26 Win=896 Len=7 57984 39926
   38 248.720439151 192.168.54.150 → 192.168.54.152 TCP 91 39926 → 57984 [PSH, ACK] Seq=51 Ack=22 Win=29056 Len=25 TSval=2886683057 TSecr=3333909706 39926 57984
   39 248.720584380 192.168.54.152 → 192.168.54.150 TCP 54 57984 → 39926 [ACK] Seq=22 Ack=76 Win=512 Len=0 57984 39926
   40 256.595908536 192.168.54.152 → 192.168.54.150 TCP 61 57984 → 39926 [PSH, ACK] Seq=22 Ack=76 Win=896 Len=7 57984 39926
   41 256.596447979 192.168.54.150 → 192.168.54.152 TCP 91 39926 → 57984 [PSH, ACK] Seq=76 Ack=29 Win=29056 Len=25 TSval=2886690929 TSecr=3333909706 39926 57984
   42 256.596591244 192.168.54.152 → 192.168.54.150 TCP 54 57984 → 39926 [ACK] Seq=29 Ack=101 Win=512 Len=0 57984 39926
   43 262.982958681 192.168.54.152 → 192.168.54.150 TCP 71 57984 → 39926 [PSH, ACK] Seq=29 Ack=101 Win=2176 Len=17 57984 39926
   44 262.983434593 192.168.54.150 → 192.168.54.152 TCP 91 39926 → 57984 [PSH, ACK] Seq=101 Ack=46 Win=29056 Len=25 TSval=2886697313 TSecr=3333909706 39926 57984
   45 262.983582911 192.168.54.152 → 192.168.54.150 TCP 54 57984 → 39926 [ACK] Seq=46 Ack=126 Win=512 Len=0 57984 39926
   46 266.088766267 192.168.54.152 → 192.168.54.150 TCP 71 57984 → 39926 [PSH, ACK] Seq=46 Ack=126 Win=2176 Len=17 57984 39926
   47 266.089186727 192.168.54.150 → 192.168.54.152 TCP 91 39926 → 57984 [PSH, ACK] Seq=126 Ack=63 Win=29056 Len=25 TSval=2886700417 TSecr=3333909706 39926 57984