title:ReDoSHunter: A Combined Static and Dynamic Approach for Regular
Expression DoS Detection
author:Yeting Li and
Zixuan Chen and
Jialun Cao and
Zhiwu Xu and
Qiancheng Peng and
Haiming Chen and
Liyuan Chen and
Shing-Chi Cheung
ReDoSHunter: A Combined Static and Dynamic 
Approach for Regular Expression DoS Detection
Yeting Li and Zixuan Chen, SKLCS, ISCAS, UCAS; Jialun Cao, HKUST; Zhiwu Xu, 
Shenzhen University; Qiancheng Peng, SKLCS, ISCAS, UCAS; Haiming Chen, 
SKLCS, ISCAS; Liyuan Chen, Tencent; Shing-Chi Cheung, HKUST
https://www.usenix.org/conference/usenixsecurity21/presentation/li-yeting
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.ReDoSHunter: A Combined Static and Dynamic Approach for Regular
Expression DoS Detection
Yeting Li
SKLCS, ISCAS
Zixuan Chen
SKLCS, ISCAS
Jialun Cao
HKUST
Zhiwu Xu
Shenzhen University
UCAS
UCAS
Qiancheng Peng
SKLCS, ISCAS
UCAS
Haiming Chen 
SKLCS, ISCAS
Abstract
Liyuan Chen
Shing-Chi Cheung
Tencent
HKUST
Regular expression Denial of Service (ReDoS) is a class of
algorithmic complexity attacks using the regular expressions
(regexes) that cause the typical backtracking-based match-
ing algorithms to run super-linear time. Due to the wide
adoption of regexes in computation, ReDoS poses a perva-
sive and serious security threat. Early detection of ReDoS-
vulnerable regexes in software is thus vital. Existing detection
approaches mainly fall into two categories: static and dynamic
analysis. However, they all suffer from either poor precision
or poor recall in the detection of vulnerable regexes. The
problem of accurately detecting vulnerable regexes at high
precision and high recall remains unsolved. Furthermore, we
observed that many ReDoS-vulnerable regex contain more
than one vulnerability in reality. Another problem with exist-
ing approaches is that they are incapable of detecting multiple
vulnerabilities in one regex.
To address these two problems, we propose ReDoSHunter,
a ReDoS-vulnerable regex detection framework that can ef-
fectively pinpoint the multiple vulnerabilities in a vulnerable
regex, and generate examples of attack-triggering strings. Re-
DoSHunter is driven by ﬁve vulnerability patterns derived
from massive vulnerable regexes. Besides pinpointing vulner-
abilities, ReDoSHunter can assess the degree (i.e., exponential
or polynomial) of the vulnerabilities detected. Our experi-
ment results show that ReDoSHunter achieves 100% preci-
sion and 100% recall in the detection of ReDoS-vulnerable
regexes in three large-scale datasets with 37,651 regexes. It
signiﬁcantly outperforms seven state-of-the-art techniques.
ReDoSHunter uncovered 28 new ReDoS-vulnerabilities in
26 well-maintained popular projects, resulting in 26 assigned
CVEs and 2 ﬁxes.
1 Introduction
commonly used by online and ofﬂine services/projects for
essential operations such as data validation, parsing, scraping
and syntax highlighting [37, 44]. Earlier studies [8, 14] have
reported that about 40% Java, JavaScript and Python projects
use regexes. While regexes are popular, their computation can
be complex and not easy to reason about. As a result, users
or even experts often write regexes in super-linear worst-case
time complexity (e.g., matching a string in quadratic or expo-
nential time with the length of the input string). For example,
(\w|\d)+$ is a problematic regex commonly used to match
strings ending with words or numeric characters. To deter-
mine whether a string w matches the regex, O(2|w|) time may
be needed due to backtracking. Furthermore, according to the
recent investigations [14, 20], more than 10% of regexes used
in software projects exhibit super-linear worst-case behavior.
More seriously, such regexes are subject to the Reg-
ular expression Denial of Service (abbrev., ReDoS, a.k.a.
catastrophic backtracking) attacks. The threat of ReDoS
is widespread and serious [14, 20, 40], and has a growing
trend in recent years1. For instance, Stack Overﬂow [41]
had a global outage in 2016 caused by a single super-linear
regex. Similarly, in 2019, ReDoS took down Cloudﬂare’s ser-
vices [4]. Thus, early detection of ReDoS-vulnerable regexes
in software projects is vital. Similar concerns are raised
by Staicu and Pradel [40]: “better tools and approaches
should be created to help maintainers reason about ReDoS-
vulnerabilities”.
Existing approaches for ReDoS-vulnerable regex identiﬁ-
cation are mainly either static or dynamic. However, existing
detection approaches mostly involve a trade-off between pre-
cision and recall — a higher precision is often accompanied
by a lower recall and vice versa. According to our investi-
gation, the existing static work [14] with the highest recall
(36.70%) turns out to result in only 57.96% precision. While
the dynamic work [37] with 100% precision, results in only
1.82% recall. The huge trade-off on precision and recall limits
Regular expressions (regexes) have wide applications in pro-
gramming languages, string processing, database query lan-
guages and so on [1, 9, 14, 15, 20, 37]. Therefore, regexes are
1Snyk’s Security Research Team [39] found that there were a growing
number of ReDoS-vulnerabilities disclosed, with a spike of 143% in 2018
alone.
USENIX Association
30th USENIX Security Symposium    3847
the usefulness of these approaches. How to reach both high
precision and high recall is still an open problem. Further-
more, the existing works can hardly locate the root cause of
a ReDoS-vulnerability. Even the root cause of the vulnera-
bility can be located, they can only detect one vulnerability.
Nevertheless, according to our statistics (see §4.2), there are
53.7% of ReDoS-vulnerable regexes containing more than
one vulnerability. This motivates the need for a ReDoS de-
tection approach that can detect multiple vulnerabilities in a
regex.
To achieve the end, we propose ReDoSHunter, a ReDoS-
vulnerable regex detection framework, which can pinpoint
multiple root causes of vulnerabilities in a regex and gen-
erate attack-triggering strings accordingly. Speciﬁcally, Re-
DoSHunter ﬁrst adopts static analysis to identify potential
vulnerabilities and generate attack strings that trigger the tar-
geting vulnerabilities. The analysis leverages the ﬁve vul-
nerability patterns that we conclude by close examination of
massive ReDoS-vulnerable regexes. These patterns prescribe
the time complexity (exponential or polynomial), triggering
conditions and possible attack strings (see §3.3 for details).
Then, ReDoSHunter veriﬁes whether the identiﬁed candi-
dates are real vulnerabilities by dynamic analysis. Finally,
ReDoSHunter outputs all the detected vulnerabilities with
the degree (exponential or polynomial) and attack-triggering
strings if any.
Empowered by the combination of static and dynamic anal-
ysis, and especially by the effectiveness of the patterns of
the ReDoS-vulnerabilities, ReDoSHunter achieves high pre-
cision and recall at the same time. Our experiments show that
ReDoSHunter achieves 100% precision and 100% recall on
three large-scale datasets with 37,651 regexes. Furthermore,
to validate the effectiveness of ReDoSHunter in the wild,
we utilized ReDoSHunter to detect the publicly-conﬁrmed
real vulnerabilities in Common Vulnerabilities and Expo-
sure (CVE) [12]. The experiment result shows ReDoSHunter
can detect 100% of them, compared with the highest 60.00%
achieved by the existing works. We applied ReDoSHunter to
26 well-maintained libraries (such as the popular JavaScript
utility library lodash2 which has more than 40 million weekly
downloads), disclosing 28 new vulnerabilities among which
26 were assigned CVE IDs and 2 were ﬁxed by developers.
The main contributions of this work are summarized as
follows.
• We propose ReDoSHunter, a ReDoS-vulnerable regex
detection framework which can pinpoint multiple root
causes of vulnerabilities and generate attack-triggering
strings. Combining both static and dynamic analyses,
ReDoSHunter achieved remarkable precision and recall,
reaching both 100% over three large-scale datasets, over-
coming the dilemma as to which metric should be priori-
tized faced by the existing works.
• We identify ﬁve patterns of ReDoS-vulnerabilities based
on extensive examination of massive vulnerable regexes.
These patterns are characterized by detailed descrip-
tions, degree of the vulnerability (the time complexity
is exponential or polynomial), and the triggering con-
ditions. They can help maintainers to locate ReDoS-
vulnerabilities, shedding light on preventing and repair-
ing vulnerable regexes.
• The experiment results demonstrate the practicality of
ReDoSHunter. ReDoSHunter can detect 100% con-
ﬁrmed ReDoS-related CVEs, compared with the high-
est 60.00% achieved by the state-of-the-art works,
and further identiﬁed 28 more unrevealed ReDoS-
vulnerabilities across 26 intensively-tested projects, with
26 of them assigned CVEs and 2 of them ﬁxed.
2 Preliminaries
Let Σ be an alphabet of all printable symbols except that each
of the following symbols is written with an escape character \
in front of it: (, ), {, }, [, ], ^, $, |, \, ., ?, *, and +. Meanwhile,
Σ also includes some special characters such as \t (denotes a
tab character) and \n (denotes a newline character). The set
of all words over Σ is denoted by Σ∗. The empty word and the
empty set are denoted by ε and ∅, respectively.
Deﬁnition 1. Standard Regular Expression. ε, ∅, and a ∈
Σ are standard regular expressions; a standard regular expres-
sion is also formed using the operators: r1|r2, r1r2, r1{m,n},
where m ∈ N, n ∈ N ∪ {∞}, and m ≤ n. Besides, r?, r*, r+
and r{i} where i ∈ N are abbreviations of r{0,1}, r{0,∞},
r{1,∞} and r{i,i}, respectively. r{m,∞} is often simpliﬁed
as r{m,}.
The language L(r) of a standard regular expression r
is deﬁned inductively as follows: L(∅) = ∅; L(ε) = {ε};
L(a) = {a}; L(r1|r2) = L(r1)∪ L(r2); L(r1r2) = {vw | v ∈
L(r1), w ∈ L(r2)}; L(r{m,n}) = Sm6i6n L(r)i.
In practice, real-world regular expressions (regexes) are
commonly found.
Deﬁnition 2. Real-world Regular Expression (regex). A
regex over Σ is a well-formed parenthesized formula, con-
sisting of operands in Σ∗ ∪ {\i | i ≥ 1}3. Besides the
common rules governing standard regular expressions (e.g.
r1|r2, r1r2, r1{m,n} deﬁned in Deﬁnition 1), a regex also has
the following constructs: (i) capturing group (r); (ii) non-
capturing group (?:r); (iii) lookarounds: positive lookahead
r1(?=r2), negative lookahead r1(?!r2), positive lookbehind
(? 𝟎
where 𝒙 ∈ 𝓛 𝚿𝟏 , 𝒚𝒏 ∈ 𝓛 𝚿𝟐 and 𝒘 ∉ 𝓛 𝐫
𝑥
𝑦
⋯
𝑦
⋯
𝑦
𝑧
repeats 𝒏 times
Figure 1: The Components of the Attack String and the Re-
lation Between the ReDoS-vulnerable Regex and the Attack
string.
In our algorithms we ﬁnd the position in the regex r that
causes ReDoS, and locate a sub-regex containing this position,
which is called the inﬁx or attackable sub-regex of r. The sub-
regexes before and after the inﬁx sub-regex in r are called
preﬁx and sufﬁx sub-regexes, respectively. We use Ψ1, Ψ2,
Ψ3 to denote the preﬁx sub-regex, inﬁx sub-regex, and sufﬁx
sub-regex respectively. Note that sub-regexes Ψ1 and Ψ3 can
be ε. The components of the attack string w = xynz5 and the
relation between the ReDoS-vulnerable regex and the attack
string is provided in Figure 1, which shows w = xynz /∈ L(r),
n > 0, x ∈ L(Ψ1), and yn ∈ L(Ψ2). In addition, if Ψ1 = ε,
then x = ε.
For example, the regex Ξ = ([0-9]*)+(\.[0-9]+)+ is
ReDoS-vulnerable because the matching time of the regex Ξ
on the Java-8 regex engine against a malicious string ‘0’ × n
grows rapidly with input size. (Figure 2)
For a standard regular expression r, the following sets are
needed to analyze the ambiguity of r.
r.ﬁrst = {a|au ∈ L(r), a ∈ Σ, u ∈ Σ∗};
r.last = {a|ua ∈ L(r), a ∈ Σ, u ∈ Σ∗};
r.followlast = {a|uav ∈ L(r), u ∈ L(r), u 6= ε, a ∈ Σ, v ∈
Σ∗}.
)
s
(
i
e
m
T
g
n
i
h
c
t
a
M
120
100
80
60
40
20
0
5
10
15
20
25
30
Size of String
Figure 2: Matching Time against Malicious String Size for
ReDoS-vulnerable Regex Ξ on the Java-8 Regex Engine.
We say r satisﬁes the nullable property if it accepts ε. We
deﬁne r.nullable to represent this property as: r.nullable =
true if ε ∈ L(r) or false otherwise.
3 The ReDoSHunter Algorithm
In this section, we elaborate on the key ideas and techniques
of our approach ReDoSHunter to analyze and identify the
ReDoS-vulnerable regexes. Figure 3 shows the workﬂow of
ReDoSHunter, which consists of three key components. The
ﬁrst component regex standardization (§3.2) transforms the
original real-world regular expression (regex) into a simpliﬁed
form which can then be manipulated by the second compo-
nent. It takes a given regex as input and converts the regex into
a standard regular expression with constraints using our de-
signed transformation rules. The second component static di-
agnosis (§3.3) diagnoses the potential ReDoS-vulnerabilities
of the given regex via the standard regular expression and the
constraints obtained from the ﬁrst component. In particular,
it takes the standard regular expression and the constraints
as input and diagnoses the potential backtracking locations,
and then assesses the vulnerability degrees (exponential or
polynomial) and generates the corresponding attack strings.
The last component dynamic validation (§3.4) determines
whether the candidate vulnerabilities diagnosed by the second
component are real ones by testing and verifying these attack
strings generated from the second component.
Consider the above regex Ξ, Ξ.ﬁrst = Ξ.followlast = {0, 1,
2, 3, 4, 5, 6, 7, 8, 9, \.} and Ξ.last = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}.
3.1 The Main Algorithm
4Parentheses that are part of other syntax such as non-capturing groups
should be skipped.
5It can also be denoted as w = x + y × n + z,
Our algorithm ReDoSHunter is shown in Algorithm 1. Re-
DoSHunter ﬁrst leverages the transformation rules that we
design to rewrite the given regex α to a standard regular ex-
USENIX Association
30th USENIX Security Symposium    3849
❶
Regex Standardization
❷
Static	Diagnosis
❸
Dynamic Validation
Standard
Regular
Expression
Constraint
Memorizer
Real-world
Regular
Expression
Vulnerability
Source
Attack	String
Vulnerability
Position
Vulnerability
Degree
Attack	String
Validation
Figure 3: An Overview of ReDoSHunter for ReDoS Detection.
Table 1: The Vulnerability Type (Vuln. Type), Vulnerability Description (Vuln. Description), and Example Regex (including
Attack String) of the Five ReDoS Patterns.
No. ReDoS Pattern
Vuln. Type
Vuln. Description
Example Regex
Attack String
#1
Nested Quantiﬁers (NQ)
Exponential
Optional nested quantiﬁers result in two choices
for each pump string
(CVE-2015-9239) \[(\d+;)? (\d+)*m
‘[’ + ‘ 0’ × 20 + ‘!’
Exponential Overlapping
Disjunction (EOD)
Exponential A disjunction with a common outer quantiﬁer
whose multiple nodes overlap
#2
#3
Exponential Overlapping
Adjacency (EOA)
Exponential
#4
Polynomial Overlapping
Adjacency (POA)
Polynomial
#5
Starting with Large Quan-
tiﬁer (SLQ)
Polynomial
Two overlapping nodes with a common outer
quantiﬁer {m,n} (n > 1) are either adjacent or
can reach each other by skipping some optional
nodes
Two overlapping nodes with an optional com-
mon outer quantiﬁer {0,1} are either adjacent
or can reach each other by skipping some op-
tional nodes
The regex engine keeps moving the regex start-
ing with a large quantiﬁer across the string to
ﬁnd a match
(CVE-2020-7662)
"((?:\\[\x00-\x7f]|[^\x00-\x08
\x0a-\x1f\x7f"])*)"
‘"’ + ‘ \\\x7e’ × 30 + ‘!’
(CVE-2018-3738)
^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$
‘a’ × 30 + ‘!’
(CVE-2018-3737)
^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+
\/]+[=]*)([\n \t]+([^\n]+))?$
‘0\t0’ + ‘\t’ × 10000 + ‘\n’
(CVE-2019-1010266)
[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9]
[a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z
0-9 ]
‘A’ × 10000 + ‘!’
Algorithm 1: ReDoSHunter
Input: a regex α
Output: true, a diagnostic information list Γ if α is