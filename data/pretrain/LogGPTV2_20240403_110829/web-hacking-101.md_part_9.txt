= user2. So, combining $key with $i, we get name_test. The result is a placeholder with
:name_test which equals user2.
SQLInjection 67
Now, with all that said, the fact that Drupal was wrapping the PHP PDO objects comes
into play because PDO allows for multiple queries. So, an attacker could pass malicious
input, like an actual SQL query to create a user admin user for an array key, which gets
interpreted and executed as multiple queries.
Takeaways
This example was interesting because it wasn’t a matter of submitting a single
quote and breaking a query. Rather, it was all about how Drupal’s code was
handling arrays passed to internal functions. That isn’t easy to spot with black
box testing (where you don’t have access to see the code). The takeaway from
thisistobeonthelookoutforopportunitiestoalterthestructureofinputpassed
to a site. So, where a URL takes ?name as a parameter, trying passing an array
like ?name[] to see how the site handles it. It may not result in SQLi, but could
leadtootherinterestingbehaviour.
2. Yahoo Sports Blind SQL
Difficulty: Medium
Url: sports.yahoo.com
Report Link: esevece tumblr2
Date Reported: February 16, 2014
Bounty Paid: $3,705
Description:
According to his blog, Stefano found a SQLi vulnerability thanks to the year parameter
in http://sports.yahoo.com/nfl/draft?year=2010&type=20&round=2. From his post,
here is an example of a valid response to the Url:
2https://esevece.tumblr.com
SQLInjection 68
YahooValidResponse
Now,interestingly,whenStefanoaddedtwodashes,–,tothequery.Theresultschanged:
SQLInjection 69
YahooValidResponse
Thereasonforthisis,the–actascommentsinthequery,asIdetailedabove.So,where
Yahoo’s original query might have looked something like:
SELECT*FROMPLAYERSWHEREYEAR=2010ANDTYPE=20ANDROUND=2;
By inserting the dashes, Stefano essentially made it act like:
SELECT*FROMPLAYERSWHEREYEAR=2010;
Recognizing this, it was possible to begin pulling out database information from Yahoo.
For example, Stefano was able to check the major version number of the database
software with the following:
SQLInjection 70
YahooDatabaseVersion
Using the IF function, players would be returned if the first character from the version()
function was 5. The IF function takes a condition and will return the value after it if the
condition is true and the last parameter if it is false. So, based on the picture above, the
conditionwasthefirstcharacterintheversion.Asaresult,weknowthedatabaseversion
isnot5sincenoresultsarereturned(besuretocheckouttheMySQLcheatsheetinthe
Resources page for additional functionality when testing SQLi).
The reason this is considered a blind SQLi is because Stefano can’t see the direct
results;hecan’tjustprintoutthedatabaseversionsinceYahooisonlyreturningplayers.
However, by manipulating the query and comparing the results against the result of
the baseline query (the first image), he would have been able to continue extracting
information from the Yahoo database.
Takeaways
SQLi, like other injection vulnerabilities, isn’t overly tough to exploit. The key is
to test parameters which could be vulnerable. In this case, adding the double
dash clearly changed the results of Stefano’s baseline query which gave away
theSQLi.Whensearchingforsimilarvulnerabilities,beonthelookoutforsubtle
changestoresultsastheycanbeindicativeofablindSQLivulnerability.
SQLInjection 71
Summary
SQLi can be pretty significant and dangerous for a site. Finding this type of vulnerability
could lead to full CRUD permissions to a site. In other cases it can be escalated to
remote code execution. The example from Drupal was actually one such case as there
are proofs of attackers executing code via the vulnerability. When looking for these, not
only should you keep your eye out for the possibility of passing unescaped single and
doublequotestoaquery,butalsoopportunitiestoprovidedatainunexpectedways,like
substitutingarrayparametersinPOSTdata.Thatsaidthough,sometimestheindications
of the vulnerability can be subtle, such as with a blind injection as found by Stefano on
YahooSports.Keepaneyeoutforsubtlechangestoresultsetswhenyou’retestingthings
like adding SQL comments to parameters.
12. Server Side Request Forgery
Description
Server side request forgery, or SSRF, is a vulnerability which allows an attacker to use a
target server to make HTTP requests on the attacker’s behalf. This is similar to CSRF in
that both vulnerabilities perform HTTP requests without the victim recognizing it. With
SSRF,thevictimwouldbethevulnerableserver,withCSRF,itwouldbeauser’sbrowser.
The potential here can be very extensive and include:
• InformationDisclosurewherewetricktheserverintodisclosinginformationabout
itself as described in Example 1 using AWS EC2 metadata
• XSS if we can get the server to render a remote HTML file with Javascript in it
Examples
1. ESEA SSRF and Querying AWS Metadata
Difficulty: medium
Url: https://play.esea.net/global/media_preview.php?url=
ReportLink:http://buer.haus/2016/04/18/esea-server-side-request-forgery-and-query-
ing-aws-meta-data/1
Date Reported: April 18, 2016
Bounty Paid: $1000
Description:
E-Sports Entertainment Association (ESEA) is an esports competitive video gaming com-
munity founded by E-Sports Entertainment Association (ESEA). Recently they started a
bug bounty program of which Brett Buerhaus found a nice SSRF vulnerability on.
Using Google Dorking, Brett searched for site:https://play.esea.net/ ext:php. This
leveragesGoogletosearchthedomainof play.esea.netforPHPfiles.Thequeryresults
included https://play.esea.net/global/media_preview.php?url=.
1http://buer.haus/2016/04/18/esea-server-side-request-forgery-and-querying-aws-meta-data/
ServerSideRequestForgery 73
Looking at the URL, it seems as though ESEA may be rendering content from external
sites. This is a red flag when looking for SSRF. As he described, Brett tried his own do-
main: https://play.esea.net/global/media_preview.php?url=http://ziot.org. But no
luck.Turnsout,eseawaslookingforimagefilessohetriedapayloadincludinganimage,
first using Google as the domain, then his own, https://play.esea.net/global/media_-
preview.php?url=http://ziot.org/1.png.
Success.
Now, the real vulnerability here lies in tricking a server into rendering content other
than the intended images. In his post, Brett details typical tricks like using a null
byte (%00), additional forward slashes and question marks to bypass or trick the back
end. In his case, he added a ? to the url: https://play.esea.net/global/media_pre-
view.php?url=http://ziot.org/?1.png.
Whatthisdoesisconvertthepreviousfilepath,1.pngtoaparameterandnotpartofthe
actual url being rendered. As a result, ESEA rendered his webpage. In other words, he
bypassed the extension check from the first test.
Now, here, you could try to execute a XSS payload, as he describes. Just create a simple
HTML page with Javascript, get the site to render it and that’s all. But he went further.
With input from Ben Sadeghipour (remember him from Hacking Pro Tips Interview #1
on my YouTube channel), he tested out querying for AWS EC2 instance metadata.
EC2isAmazon’sElasticComputeCloud,orcloudservers.Theyprovidetheabilitytoquery
themselves, via their IP, to pull metadata about the instance. This privilege is obviously
lockeddowntotheinstanceitselfbutsinceBretthadtheabilitytocontrolwhattheserver
wasloadingcontentfrom,hecouldgetittomakethecalltoitselfandpullthemetadata.
Thedocumentationforec2ishere:http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-
instance-metadata.html. Theres some pretty sensitive info you can grab.
Takeaways
GoogleDorkingisagreattoolwhichwillsaveyoutimewhileexposingallkinds
ofpossibleexploits.Ifyou’relookingforSSRFvulnerabilities,beonthelookout
foranytargeturlswhichappeartobepullinginremotecontent.Inthiscase,it
wastheurl=whichwasthegiveaway.
Secondly,don’trunoffwiththefirstthoughtyouhave.Brettcouldhavereported
the XSS payload which wouldn’t have been as impactful. By digging a little
deeper,hewasabletoexposethetruepotentialofthisvulnerability.Butwhen
doingso,becarefulnottooverstep.
ServerSideRequestForgery 74
Summary
Server side request forgery occurs when a server can be exploited to make requests on
behalf of an attacker. However, not all requests end up being exploitable. For example,
justbecauseasiteallowsyoutoprovideaURLtoanimagewhichitwillcopyanduseon
it’sownsite(liketheESEAexampleabove),doesn’tmeantheserverisvulnerable.Finding
that is just the first step after which you will need to confirm what the potential is. With
regards to ESEA, while the site was looking for image files, it wasn’t validating what it
received and could be used to render malicious XSS as well as make HTTP requests for
its own EC2 metadata.
13. XML External Entity Vulnerability
Description
An XML External Entity (XXE) vulnerability involves exploiting how an application parses
XML input, more specifically, exploiting how the application processes the inclusion of
externalentitiesincludedintheinput.Togainafullappreciationforhowthisisexploited
and its potential, I think it’s best for us to first understand what the eXtensible Markup
Language (XML) and external entities are.
Ametalanguageis alanguage usedfor describingother languages,and that’swhat XML
is. It was developed after HTML in part, as a response to the shortcomings of HTML,
which is used to define the display of data, focusing on how it should look. In contrast,
XML is used to define how data is to be structured.
For example, in HTML, you have tags like , , , , etc. all of which are
used to define how content is to be displayed. The  tag is used to define a page’s
title (shocking),  tags refer define headings,  tags present data in rows and
columns and  are presented as simple text. In contrast, XML has no predefined tags.
Instead, the person creating the XML document defines their own tags to describe the
content being presented. Here’s an example:
Hacker
1000000
Shottheweb
Reading this, you can probably guess the purpose of the XML document - to present a
joblistingbutyouhavenoideahowthiswilllookifitwerepresentedonawebpage.The
firstlineoftheXMLisadeclarationheaderindicatingtheversionofXMLtobeusedand
type of encoding. At the time of writing this, there are two versions of XML, 1.0 and 1.1.
Detailing the differences between 1.0 and 1.1 is beyond the scope of this book as they
should have no impact on your hacking.
After the initial header, the tag  is included and surrounds all other  tags,
whichincludes,andtags.Now,whereaswithHTML,
XMLExternalEntityVulnerability 76
some tags don’t require closing tags (e.g., ), all XML tags require a closing tag.
Again, drawing on the example above,  is a starting tag and  would be the
corresponding ending tag. In addition, each tag has a name and can have an attribute.
Usingthetag,thetagnameisjobbutithasnoattributes.ontheother
hand has the name responsibility with an attribute optional made up of the attribute
name optional and attribute value 1.
Sinceanyonecandefineanytag,theobviousquestionthenbecomes,howdoesanyone
know how to parse and use an XML document if the tags can be anything? Well, a valid
XML document is valid because it follows the general rules of XML (no need for me to
list them all but having a closing tag is one example I mentioned above) and it matches
its document type definition (DTD). The DTD is the whole reason we’re diving into this
because it’s one of the things which will enable our exploit as hackers.
An XML DTD is like a definition document for the tags being used and is developed by
the XML designer, or author. With the example above, I would be the designer since I
defined the jobs document in XML. A DTD will define which tags exist, what attributes
they may have and what elements may be found in other elements, etc. While you and
I can create our own DTDs, some have been formalized and are widely used including
Really Simple Syndication (RSS), general data resources (RDF), health care information
(HL7 SGML/XML), etc.
Here’s what a DTD file would look like for my XML above:
Looking at this, you can probably guess what most of it means. Our  tag is
actuallyanXML!ELEMENTandcancontaintheelementJob.AJobisan!ELEMENTwhich
can contain a Title, Compensation and Responsibility, all of which are also !ELEMENTs
and can only contain character data, denoted by the (#PCDATA). Lastly, the !ELEMENT
Responsibility has a possible attribute (!ATTLIST) optional whose default value is 0.
Not too difficult right? In addition to DTDs, there are still two important tags we haven’t
discused, the !DOCTYPE and !ENTITY tags. Up until this point, I’ve insinuated that DTD
files are external to our XML. Remember the first example above, the XML document
didn’t include the tag definitions, that was done by our DTD in the second example.
However, it’s possible to include the DTD within the XML document itself and to do so,
the first line of the XML must be a  element. Combining our two examples
above, we’d get a document that looks like:
XMLExternalEntityVulnerability 77
]>
Hacker
1000000
Shottheweb
Here,wehavewhat’sreferredasanInternalDTDDeclaration.Noticethatwestillbegin
with a declaration header indicating our document conforms to XML 1.0 with UTF-8
encoding, but immediately after, we define our DOCTYPE for the XML to follow. Using
an external DTD would be similar except the !DOCTYPE would look like . The XML parser would then parse the contents of the jobs.dtd file
when parsing the XML file. This is important because the !ENTITY tag is treated similarly
and provides the crux for our exploit.
An XML entity is like a placeholder for information. Using our previous example again,
if we wanted every job to include a link to our website, it would be tedious for us to
writetheaddresseverytime,especiallyifourURLcouldchange.Instead,wecanusean
!ENTITY and get the parser to fetch the contents at the time of parsing and insert the
value into the document. I hope you see where I’m going with this.
Similar to an external DTD file, we can update our XML file to include this idea:
]>