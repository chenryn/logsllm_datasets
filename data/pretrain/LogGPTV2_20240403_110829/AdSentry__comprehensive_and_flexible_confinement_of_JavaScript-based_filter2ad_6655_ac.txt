In our proto-
type, we apply the code wrapping based on the above XML model.
Speciﬁcally, we leverage the XML XPath facility available in most
browsers to traverse the XML model tree and inspect the enclosed
nodes. We ﬁrst query for patterns of dynamic code on the model.
These patterns of dynamic code include event handlers such as
onclick(), as well as related JavaScript functions such as
addEventListener() , setTimeout() and setInterval().
The resulting node set will then be properly wrapped or trans-
formed.
In our prototype, we have installed wrappers on all 32
possible vectors of dynamic code and ensure that no potentially
malicious code will ever be injected to the real page. As an exam-
ple, the following code snippet
setTimeout(’ slideAd(10,100); ’, slideDelay);
will be transformed into the following code fragment:
setTimeout(’ sandboxAds(" slideAd(10,
100);", id, false); ’, slideDelay);
To further ensure the privacy of sensitive user data in the web
page, we allow users to conﬁgure the data to be shared with the
script. As mentioned earlier, we do not copy all the content of the
real DOM to the virtual DOM. Instead, we choose to interpose on
every access to the virtual DOM from the untrusted ad and subject
it for policy veriﬁcation. As such, users can decide to be extremely
cautious with certain kind of ads, and block any read access from
the ad to the entire page. On the other extreme, a user might want
to trust certain ads, and allow free accesses to the real DOM con-
tent. In addition to the above two policies, a user is also allowed to
specify a policy that blocks accesses to the document.cookie
object or mandates that ad can only read from its own elements and
not the surrounding content. Moreover, an ad can be prohibited
from appearing outside of the allocated region of the web page (by
stating the allowed values of width, height and overflow
property of ad elements). This is helpful to thwart some types of
phishing attacks. In fact, as a comprehensive isolation framework,
our system provides a mediation capability that can accommodate
existing access control polices [23] for ads. And both web publish-
ers and end users can take the advantage of the same capability to
enforce security policy on ad behaviors.
AdSentry also enables end users to dynamically specify access
control policy with tools during the execution of web applications.
In addition, AdSentry leverages a customized version of Adblock
Plus [34] to automatically identify and wrap ads scripts on web
pages.
5. EVALUATION
In this section, we evaluate the functionality and performance
of AdSentry. In particular, we have conducted four sets of experi-
ments. The ﬁrst one is based on real-world browser exploits to eval-
uate AdSentry’s defense against drive-by download attacks. The
second one is to test its resilience against malicious attempts that
inject JavaScript into web applications. The third one is to eval-
uate AdSentry’s protection of privacy against rogue information-
stealing ads; The fourth one is to measure the performance over-
head. Our experiments were conducted on a Dell E8400 worksta-
tion with a Core 2 Duo CPU (3GHz 6 MB L2 Cache) and 4GB
of RAM. The system runs Ubuntu 9.10 and we its the default web
browser – Mozilla Firefox 3.5.8 – for our experiments.
5.1 Browser Exploits
To evaluate the effectiveness of AdSentry in sandboxing ads,
we conducted experiments with a few real-world exploitations, ob-
tained from existing research work [25] as well as vulnerability
databases [1, 31]. All the exploits we tested with caused the vul-
nerable versions of the Firefox browser to crash during our ex-
periments. They are all marked as critical by Mozilla developers,
and can be further crafted to launch severe attacks such as drive-by
download.
Our experiments are summarized in Table 1. The eight examples
exploit the vulnerabilities in the SpiderMonkey JavaScript engine.
Most of them are various instances of buffer overﬂow or memory
corruption attacks, and they could lead to arbitrary code execution.
With AdSentry installed in the vulnerable versions of the Firefox
browser (in our experiments, we used Firefox 3.0 and Firefox 3.5
for corresponding exploits), each of the exploits was successfully
contained by the shadow JavaScript engine. This conﬁrmed and
demonstrated one of our design goals that we would like to run
untrusted ads scripts in an isolated environment so that even in
the worst case, they would not crash the entire web browser. As
AdSentry sandboxes the JavaScript engine, so any memory attack
against vulnerabilities in the JavaScript engine would be contained
by the sandbox.
Bugzilla ID
426520
454704
465980
493281
503286
507292
561031
615657
Scenario
1
2
3
4
5
6
7
Attack Behavior
Browser crashed by memory corruption with crafted XML namespace
Browser crashed by exploiting a vulnerability of XPCSafeJSObjectWrapper
Browser crashed by pushing to an array of length exceeding limit
Browser crashed by stack corruption starting at unknown symbol
Browser crashed by exploiting a vulnerability of Escape()’s return value
Browser crashed by incorrect upvar access on trace involving top-level scripts
Browser crashed by overwriting jump offset
Browser crashed by buffer overﬂow due to incorrect copying of upvarMap.vector
Outcome
Contained by shadow JS engine
Contained by shadow JS engine
Contained by shadow JS engine
Contained by shadow JS engine
Contained by shadow JS engine
Contained by shadow JS engine
Contained by shadow JS engine
Contained by shadow JS engine
Table 1: AdSentry evaluation using browser exploits
Attack Vector
Attack Behavior
Inject script
Direct code injection
Browser parsing quirk
Malformed  tag
Browser parsing quirk Malformed  tag
Browser parsing quirk Malformed  tag
Browser parsing quirk
Browser parsing quirk Malformed  tag
Browser parsing quirk Malformed  tag
Malformed  tag
Outcome
Blocked
Blocked
Blocked
Blocked
Blocked
Blocked
Blocked
Description
Denied by the default policy
Rejected by message normalization
Rejected by message normalization
Rejected by message normalization
Rejected by message normalization
Rejected by message normalization
Rejected by message normalization
Table 2: AdSentry evaluation using JavaScript injection attacks
5.2 Script Injection by Ads
In our second experiment, we evaluated the effectiveness of our
default policy in preventing untrusted code from being injected
from the ad to the web page. In particular, we examined the XSS
Cheat Sheet [7] and identiﬁed a number of cases that can success-
fully result in injecting JavaScript from the ad into the web page
for execution. We conﬁrmed the successful injection and execution
in the default Firefox without AdSentry being installed. During
our experiments, we explicitly cleared the browser’s cache between
each step.
Our results are shown in Table 2. The ﬁrst one is a direct attempt
to include an external JavaScript to execute in the web page while
the other six exploit numerous parsing quirks [7]. Such attacks
are created to execute a simple script that displays a message box
“hacked!” The use of browser parsing quirks reﬂects the current
trend [24] in part because they are much harder to repair without
breaking compatibilities with legacy web applications. This was
blocked by the default policy in AdSentry that direct injection of
scripts into the web page is disallowed.
For the rest examples, we use the second scenario as the rep-
resentative. Speciﬁcally, in the second scenario, the attempt is to
exploit a parsing quirk by embedding a  tag as literal
text inside a  tag, which will cause the browser to interpret
the text string as JavaScript code, thus causing an injection:
">
The related code snippet is shown above. It contains three pairs
If a
of double-quotes, encapsulating different parts of the text.
parser were properly implemented, there would be three literal strings:
an empty string "", the second string ">". These three strings are orphaned
as they are not assigned to any property of the tag and therefore
should be discarded. As such, the entire tag should simply collapse
to , which can also be disregarded. However, this is
not the case in most modern browsers. In fact, existing browsers
tend to be very permissive in their parsing behavior [5]. For in-
stance, we observed that Firefox interpreted  as the
ﬁrst tag and  as the sec-
ond tag; the remaining "> was accepted as plain text and displayed
as is. As a result, the “malicious” code alert("XSS") was ex-
ecuted. This attempt was blocked because of the normalization
through the standard-compliant XML in our system. We success-
fully detected this malformed HTML content and substituted it with
the benign static text “Script Injection Blocked.”
5.3 Privacy Protection
In our third set of experiments, we test our system from the pri-
vacy perspective. In particular, it has been known that third-party
JavaScript can violate user privacy in various ways. Examples in-
clude cookie stealing, location hijacking, history snifﬁng, and be-
havior tracking [20]. In our experiments, we evaluated AdSentry
with a synthesized ad that simulates the above information-stealing
behaviors.
In particular, the synthesized ad is developed to perform all these
four types of behaviors: The cookie stealing is implemented to
access the cookie property of document object; The location
is hijacked by setting the location property of window (or
document); The previously browsed URLs are sniffed by obtain-
ing the color of the populated hyperlinks, which can be done by
invoking the getPropertyValue function of the
ComputedCSSStyleDeclaration object (with the argument
“color”) 2; Behavior tracking is achieved by registering related event
listeners of interested elements, such as onclick, onmouseover,
etc.
AdSentry successfully detected each of the above four types of
behaviors. For the ﬁrst two types, our system simply denies the
read access to the document.cookie and the write access to
the window.location and document.location. For the
third type of ad behavior, it is detected by monitoring any invoca-
tions to the related getPropertyValue function. For behavior
tracking, AdSentry refused the registration of callback routines of
those elements if the ad does not own them.
We stress that our privacy protection enforcement does not suf-
fer from JavaScript object and property aliasing problems. This is
because the access is intercepted by the virtual DOM that, when
invoked, has already resolved all object and property aliasing, if
any.
Moreover, we also evaluated the user experience of AdSentry us-
ing 15 popular website with ads, shown in Table 3. The embedded
ads are automatically recognized by the Adblock Plus extension
2Recent browsers return the same computed styles for visited and
unvisited links.
Properties of ads
Ads on different domain of same company
Ads on content distribution network (CDN)
Web site
www.msn.com
www.aol.com
www.livejournal.com Ad network DoubleClick
Ad network DoubleClick
espn.go.com
Ads on different domain of same company
www.cnet.com
Ad network Google
imageshark.us
Ad network Checkm8
www.nytimes.com
www.ehow.com
Ad network YieldManager
Ad network DoubleClick
sourceforge.net
www.reference.com
Ad network DoubleClick
www.dailymail.co.uk Ad network DoubleClick
www.guardian.co.uk
www.gmx.net
yfrog.com
www.comcast.net
Ad network Google
Ad network Uimserv
Ad network Rubicon Project
Ad network Yahoo!
Table 3: Web sites used in user experience evaluation
and then transparently conﬁned with AdSentry. To allow users to
interactively specify security policies, we integrate a Firefox exten-
sion called Firebug [3] and extend it with a pop-up menu that can be
triggered with a right mouse click. Speciﬁcally, we use the Firebug
to visually capture available screen regions and for a selected re-
gion, a right mouse click will activate the pop-up menu. From the
menu, a user will be shown the list of ads (grouped by domains)
currently embedded in the current page and can then choose which
ad can have a read access to the chosen screen region or can reg-
ister call-back routines (e.g., event listeners). By default, these ads
are only allowed to read their own elements, not the surrounding
areas. Users can also specify new policies during run time, which
will overwrite existing ones if necessary.
Our experiments did not ﬁnd any suspicious information-stealing
behavior for these websites.
5.4 Performance Evaluation
In order to assess the performance overhead, we conducted ex-
periments to measure the page load overhead. We picked up four
typical ads, one from each of the top four ad networks. We created
a test page for each ad and ran the test page with and without Ad-
Sentry. Each experiment was repeated for 20 times, and the average
results were recorded.
Our results are shown in Table 4. Overall, AdSentry incurs small
overhead. The relative overhead ranges from 3.03% in MSN Ad
Network ad to 4.96% in Google Adsense ad. We observed that a
typical ad might only infrequently access DOM namespace, which
might attribute to the low overhead. From another perspective, the
relative overhead can be low because ad content such as images
are often dynamically loaded from a remote server, this process
experiences network round trip delay that is typically much more
signiﬁcant than local computation time in web browsers. Also, to
improve responsiveness, modern browsers typically start rendering
any elements immediately once they are available. Therefore a user
may not notice the difference in the speed of ad loading time at all.
In other words, this pipelining of the rendering process contributes
to masking the delay that may be experienced by any single element
in a web page.
In addition to the above real ads, we also measure the time needed
to initialize our sandbox. Our results show that it takes 31 ms to ini-
tialize and set up the sandbox. Though it is lightweight, we expect
opportunities still remain to reduce the time by further optimizing
the JavaScript engine and NaCl sandbox. Finally, we evaluate a
round-trip communication delay for a virtual DOM access. With-
out our system, it typically took 0.001 ms for the ad to ﬁnish the
reading of a particular DOM property. When being conﬁned, it
will take 0.59 ms. This is expected as it needs to cross the sandbox
boundary and go through the normalization for policy veriﬁcation.
Note that this overhead will be effectively amortized in real-world
scenarios – as demonstrated in the four real ads.
6. DISCUSSION
In this section, we discuss the limitation of AdSentry and future
work. First, our current work focuses on the JavaScript-based ad-