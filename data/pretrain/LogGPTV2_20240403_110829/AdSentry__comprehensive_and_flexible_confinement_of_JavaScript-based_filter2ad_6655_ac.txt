### Prototype Implementation

In our prototype, we apply code wrapping based on the XML model. Specifically, we leverage the XML XPath facility, available in most browsers, to traverse the XML model tree and inspect the enclosed nodes. We first query for patterns of dynamic code within the model. These patterns include event handlers such as `onclick()`, and related JavaScript functions like `addEventListener()`, `setTimeout()`, and `setInterval()`. The resulting node set is then properly wrapped or transformed.

For example, the following code snippet:
```javascript
setTimeout('slideAd(10, 100);', slideDelay);
```
is transformed into:
```javascript
setTimeout('sandboxAds("slideAd(10, 100);", id, false);', slideDelay);
```

### Ensuring User Data Privacy

To further ensure the privacy of sensitive user data on the web page, we allow users to configure the data that can be shared with the script. As mentioned earlier, we do not copy all the content of the real DOM to the virtual DOM. Instead, we interpose on every access to the virtual DOM from the untrusted ad and subject it to policy verification. This allows users to be extremely cautious with certain types of ads and block any read access from the ad to the entire page. Conversely, a user might trust certain ads and allow free access to the real DOM content.

In addition to these two policies, users can specify a policy that blocks access to the `document.cookie` object or mandates that the ad can only read from its own elements, not the surrounding content. Furthermore, an ad can be prohibited from appearing outside the allocated region of the web page by specifying allowed values for the width, height, and overflow properties of ad elements. This helps thwart some types of phishing attacks. As a comprehensive isolation framework, our system provides a mediation capability that can accommodate existing access control policies [23] for ads, benefiting both web publishers and end users.

### Dynamic Access Control Policy

AdSentry also enables end users to dynamically specify access control policies during the execution of web applications. Additionally, AdSentry leverages a customized version of Adblock Plus [34] to automatically identify and wrap ad scripts on web pages.

## Evaluation

In this section, we evaluate the functionality and performance of AdSentry through four sets of experiments. The first experiment assesses AdSentry’s defense against drive-by download attacks using real-world browser exploits. The second tests its resilience against malicious attempts to inject JavaScript into web applications. The third evaluates AdSentry’s protection of privacy against rogue information-stealing ads. The fourth measures the performance overhead. Our experiments were conducted on a Dell E8400 workstation with a Core 2 Duo CPU (3GHz, 6 MB L2 Cache) and 4GB of RAM, running Ubuntu 9.10 and using Mozilla Firefox 3.5.8 as the default web browser.

### Browser Exploits

To evaluate the effectiveness of AdSentry in sandboxing ads, we conducted experiments with several real-world exploits obtained from existing research work [25] and vulnerability databases [1, 31]. All tested exploits caused the vulnerable versions of Firefox to crash. They are marked as critical by Mozilla developers and can be crafted to launch severe attacks, such as drive-by downloads.

Our experiments, summarized in Table 1, show that the eight examples exploit vulnerabilities in the SpiderMonkey JavaScript engine, including buffer overflows and memory corruption. With AdSentry installed, each exploit was successfully contained by the shadow JavaScript engine, confirming our design goal of running untrusted ad scripts in an isolated environment.

| Bugzilla ID | Scenario | Attack Behavior | Outcome |
|-------------|----------|-----------------|---------|
| 426520      | 1        | Browser crashed by memory corruption with crafted XML namespace | Contained by shadow JS engine |
| 454704      | 2        | Browser crashed by exploiting a vulnerability of XPCSafeJSObjectWrapper | Contained by shadow JS engine |
| 465980      | 3        | Browser crashed by pushing to an array of length exceeding limit | Contained by shadow JS engine |
| 493281      | 4        | Browser crashed by stack corruption starting at unknown symbol | Contained by shadow JS engine |
| 503286      | 5        | Browser crashed by exploiting a vulnerability of Escape()'s return value | Contained by shadow JS engine |
| 507292      | 6        | Browser crashed by incorrect upvar access on trace involving top-level scripts | Contained by shadow JS engine |
| 561031      | 7        | Browser crashed by overwriting jump offset | Contained by shadow JS engine |
| 615657      | 8        | Browser crashed by buffer overflow due to incorrect copying of upvarMap.vector | Contained by shadow JS engine |

### Script Injection by Ads

In the second experiment, we evaluated the effectiveness of our default policy in preventing untrusted code injection from ads into the web page. We examined the XSS Cheat Sheet [7] and identified cases that can successfully result in JavaScript injection and execution. We confirmed successful injection and execution in the default Firefox without AdSentry. Our results, shown in Table 2, indicate that the direct injection of scripts and various parsing quirks were blocked by AdSentry's default policy.

| Attack Vector | Attack Behavior | Outcome | Description |
|---------------|-----------------|---------|-------------|
| Inject script | Direct code injection | Blocked | Denied by the default policy |
| Browser parsing quirk | Malformed <script> tag | Blocked | Rejected by message normalization |
| Browser parsing quirk | Malformed <script> tag | Blocked | Rejected by message normalization |
| Browser parsing quirk | Malformed <script> tag | Blocked | Rejected by message normalization |
| Browser parsing quirk | Malformed <script> tag | Blocked | Rejected by message normalization |
| Browser parsing quirk | Malformed <script> tag | Blocked | Rejected by message normalization |
| Malformed <script> tag | Malformed <script> tag | Blocked | Rejected by message normalization |

### Privacy Protection

In the third set of experiments, we tested AdSentry's privacy protection capabilities. Third-party JavaScript can violate user privacy through cookie stealing, location hijacking, history sniffing, and behavior tracking [20]. We evaluated AdSentry with a synthesized ad that simulates these behaviors. AdSentry successfully detected and prevented each of these behaviors by denying read access to `document.cookie` and write access to `window.location` and `document.location`, monitoring invocations to the `getPropertyValue` function, and refusing the registration of callback routines for non-owned elements.

We also evaluated the user experience of AdSentry using 15 popular websites with ads, as shown in Table 3. The embedded ads were automatically recognized by the Adblock Plus extension and transparently confined with AdSentry. Users can interactively specify security policies using a Firefox extension called Firebug, which we extended with a pop-up menu. Our experiments did not find any suspicious information-stealing behavior for these websites.

| Properties of ads | Web site | Ad network |
|-------------------|----------|------------|
| Ads on different domain of same company | www.msn.com | DoubleClick |
| Ads on content distribution network (CDN) | www.aol.com | DoubleClick |
| Ads on different domain of same company | www.livejournal.com | DoubleClick |
| Ads on different domain of same company | espn.go.com | Google |
| Ads on different domain of same company | www.cnet.com | Checkm8 |
| Ads on different domain of same company | imageshark.us | YieldManager |
| Ads on different domain of same company | www.nytimes.com | DoubleClick |
| Ads on different domain of same company | www.ehow.com | DoubleClick |
| Ads on different domain of same company | sourceforge.net | DoubleClick |
| Ads on different domain of same company | www.reference.com | DoubleClick |
| Ads on different domain of same company | www.dailymail.co.uk | DoubleClick |
| Ads on different domain of same company | www.guardian.co.uk | Uimserv |
| Ads on different domain of same company | www.gmx.net | Rubicon Project |
| Ads on different domain of same company | yfrog.com | Yahoo! |
| Ads on different domain of same company | www.comcast.net | Google |

### Performance Evaluation

To assess the performance overhead, we measured the page load time with and without AdSentry for four typical ads, one from each of the top four ad networks. Each experiment was repeated 20 times, and the average results were recorded. Overall, AdSentry incurs a small overhead, ranging from 3.03% in MSN Ad Network ad to 4.96% in Google Adsense ad. The relative overhead is low because ad content, such as images, is often dynamically loaded from a remote server, experiencing network round trip delay, which is more significant than local computation time in web browsers.

| Ad Network | Relative Overhead (%) |
|------------|-----------------------|
| MSN Ad Network | 3.03 |
| Google Adsense | 4.96 |
| Other Ad Network 1 | 3.50 |
| Other Ad Network 2 | 4.20 |

Additionally, initializing the sandbox takes 31 ms, and a round-trip communication delay for a virtual DOM access is 0.59 ms when confined, compared to 0.001 ms without confinement. This overhead is effectively amortized in real-world scenarios, as demonstrated in the four real ads.

## Discussion

In this section, we discuss the limitations of AdSentry and future work. Our current focus is on JavaScript-based ad content, and there are opportunities to further optimize the JavaScript engine and NaCl sandbox to reduce initialization time and improve performance.