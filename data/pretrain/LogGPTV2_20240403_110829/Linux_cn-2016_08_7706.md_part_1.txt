---
author: Stéphane Graber
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 12300
date: '2016-08-22 12:14:00'
editorchoice: false
excerpt: 由于在管理 LXD 容器时涉及到大量的命令，所以这篇文章的篇幅是比较长的，如果你更喜欢使用同样的命令来快速的一步步实现整个过程，你可以尝试我们的在线示例！
fromurl: https://www.stgraber.org/216/03/19/lxd-2-0-your-first-lxd-container-312/
id: 7706
islctt: true
largepic: /data/attachment/album/201612/28/225424r9ke4e9e0lzz49a9.jpg
permalink: /article-7706-1.html
pic: /data/attachment/album/201612/28/225424r9ke4e9e0lzz49a9.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 7687
- displayorder: 1
  raid: 8072
reviewer: ''
selector: ''
summary: 由于在管理 LXD 容器时涉及到大量的命令，所以这篇文章的篇幅是比较长的，如果你更喜欢使用同样的命令来快速的一步步实现整个过程，你可以尝试我们的在线示例！
tags:
- 容器
- LXC
- LXD
thumb: false
title: LXD 2.0 系列（三）：你的第一个 LXD 容器
titlepic: true
translator: kylepeng93
updated: '2016-08-22 12:14:00'
---
![](/data/attachment/album/201612/28/225424r9ke4e9e0lzz49a9.jpg)
这是 LXD 2.0 系列介绍文章的第三篇博客。
1. [LXD 入门](/article-7618-1.html)
2. [安装与配置](/article-7687-1.html)
3. [你的第一个 LXD 容器](/article-7706-1.html)
4. [资源控制](/article-8072-1.html)
5. [镜像管理](/article-8107-1.html)
6. [远程主机及容器迁移](/article-8169-1.html)
7. [LXD 中的 Docker](/article-8235-1.html)
8. [LXD 中的 LXD](/article-8257-1.html)
9. [实时迁移](/article-8263-1.html)
10. [LXD 和 Juju](/article-8273-1.html)
11. [LXD 和 OpenStack](/article-8274-1.html)
12. [调试，及给 LXD 做贡献](/article-8282-1.html)
由于在管理 LXD 容器时涉及到大量的命令，所以这篇文章的篇幅是比较长的，如果你更喜欢使用同样的命令来快速的一步步实现整个过程，你可以[尝试我们的在线示例](https://linuxcontainers.org/lxd/try-it)！
### 创建并启动一个新的容器
正如我在先前的文章中提到的一样，LXD 命令行客户端预配置了几个镜像源。Ubuntu 的所有发行版和架构平台全都提供了官方镜像，但是对于其他的发行版也有大量的非官方镜像，那些镜像都是由社区制作并且被 LXC 上游贡献者所维护。
#### Ubuntu
如果你想要支持最为完善的 Ubuntu 版本，你可以按照下面的去做：
```
lxc launch ubuntu:
```
注意，这里意味着会随着 Ubuntu LTS 的发布而变化。因此，如果用于脚本，你需要指明你具体安装的版本（参见下面）。
#### Ubuntu14.04 LTS
得到最新更新的、已经测试过的、稳定的 Ubuntu 14.04 LTS 镜像，你可以简单的执行：
```
lxc launch ubuntu:14.04
```
在该模式下，会指定一个随机的容器名。
如果你更喜欢指定一个你自己的名字，你可以这样做：
```
lxc launch ubuntu:14.04 c1
```
如果你想要指定一个特定的体系架构（非主流平台），比如 32 位 Intel 镜像，你可以这样做：
```
lxc launch ubuntu:14.04/i386 c2
```
#### 当前的 Ubuntu 开发版本
上面使用的“ubuntu:”远程仓库只会给你提供官方的并经过测试的 Ubuntu 镜像。但是如果你想要未经测试过的日常构建版本，开发版可能对你来说是合适的，你需要使用“ubuntu-daily:”远程仓库。
```
lxc launch ubuntu-daily:devel c3
```
在这个例子中，将会自动选中最新的 Ubuntu 开发版本。
你也可以更加精确，比如你可以使用代号名：
```
lxc launch ubuntu-daily:xenial c4
```
#### 最新的Alpine Linux
Alpine 镜像可以在“Images:”远程仓库中找到，通过如下命令执行：
```
lxc launch images:alpine/3.3/amd64 c5
```
#### 其他
全部的 Ubuntu 镜像列表可以这样获得：
```
lxc image list ubuntu:
lxc image list ubuntu-daily:
```
全部的非官方镜像：
```
lxc image list images:
```
某个给定的原程仓库的全部别名（易记名称）可以这样获得（比如对于“ubuntu:”远程仓库）：
```
lxc image alias list ubuntu:
```
### 创建但不启动一个容器
如果你想创建一个容器或者一批容器，但是你不想马上启动它们，你可以使用`lxc init`替换掉`lxc launch`。所有的选项都是相同的，唯一的不同就是它并不会在你创建完成之后启动容器。
```
lxc init ubuntu:
```
### 关于你的容器的信息
#### 列出所有的容器
要列出你的所有容器，你可以这样这做：
```
lxc list
```
有大量的选项供你选择来改变被显示出来的列。在一个拥有大量容器的系统上，默认显示的列可能会有点慢（因为必须获取容器中的网络信息），你可以这样做来避免这种情况：
```
lxc list --fast
```
上面的命令显示了另外一套列的组合，这个组合在服务器端需要处理的信息更少。
你也可以基于名字或者属性来过滤掉一些东西：
```
stgraber@dakara:~$ lxc list security.privileged=true
+------+---------+---------------------+-----------------------------------------------+------------+-----------+
| NAME |  STATE  |        IPV4         |                       IPV6                    |    TYPE    | SNAPSHOTS |
+------+---------+---------------------+-----------------------------------------------+------------+-----------+
| suse | RUNNING | 172.17.0.105 (eth0) | 2607:f2c0:f00f:2700:216:3eff:fef2:aff4 (eth0) | PERSISTENT | 0         |
+------+---------+---------------------+-----------------------------------------------+------------+-----------+
```
在这个例子中，只有那些特权容器（禁用了用户命名空间）才会被列出来。
```
stgraber@dakara:~$ lxc list --fast alpine
+-------------+---------+--------------+----------------------+----------+------------+
|    NAME     |  STATE  | ARCHITECTURE |      CREATED AT      | PROFILES |    TYPE    |
+-------------+---------+--------------+----------------------+----------+------------+
| alpine      | RUNNING | x86_64       | 2016/03/20 02:11 UTC | default  | PERSISTENT |
+-------------+---------+--------------+----------------------+----------+------------+
| alpine-edge | RUNNING | x86_64       | 2016/03/20 02:19 UTC | default  | PERSISTENT |
+-------------+---------+--------------+----------------------+----------+------------+
```
在这个例子中，只有在名字中带有“alpine”的容器才会被列出来（也支持复杂的正则表达式）。
#### 获取容器的详细信息
由于 list 命令显然不能以一种友好的可读方式显示容器的所有信息，因此你可以使用如下方式来查询单个容器的信息：
```
lxc info 
```
例如：
```
stgraber@dakara:~$ lxc info zerotier
Name: zerotier
Architecture: x86_64
Created: 2016/02/20 20:01 UTC
Status: Running
Type: persistent
Profiles: default
Pid: 31715
Processes: 32
Ips:
 eth0: inet 172.17.0.101
 eth0: inet6 2607:f2c0:f00f:2700:216:3eff:feec:65a8
 eth0: inet6 fe80::216:3eff:feec:65a8
 lo: inet 127.0.0.1
 lo: inet6 ::1
 lxcbr0: inet 10.0.3.1
 lxcbr0: inet6 fe80::c0a4:ceff:fe52:4d51
 zt0: inet 29.17.181.59
 zt0: inet6 fd80:56c2:e21c:0:199:9379:e711:b3e1
 zt0: inet6 fe80::79:e7ff:fe0d:5123
Snapshots:
 zerotier/blah (taken at 2016/03/08 23:55 UTC) (stateless)
```
### 生命周期管理命令
这些命令对于任何容器或者虚拟机管理器或许都是最普通的命令，但是它们仍然需要讲到。
所有的这些命令在批量操作时都能接受多个容器名。
#### 启动
启动一个容器就向下面一样简单：
```
lxc start 
```
#### 停止
停止一个容器可以这样来完成：
```
lxc stop 
```
如果容器不合作（即没有对发出的 SIGPWR 信号产生回应），这时候，你可以使用下面的方式强制执行：
```
lxc stop  --force
```
#### 重启
通过下面的命令来重启一个容器：
```
lxc restart 
```
如果容器不合作（即没有对发出的 SIGINT 信号产生回应），你可以使用下面的方式强制执行：
```
lxc restart  --force
```
#### 暂停
你也可以“暂停”一个容器，在这种模式下，所有的容器任务将会被发送相同的 SIGSTOP 信号，这也意味着它们将仍然是可见的，并且仍然会占用内存，但是它们不会从调度程序中得到任何的 CPU 时间片。
如果你有一个很占用 CPU 的容器，而这个容器需要一点时间来启动，但是你却并不会经常用到它。这时候，你可以先启动它，然后将它暂停，并在你需要它的时候再启动它。
```
lxc pause 
```
#### 删除
最后，如果你不需要这个容器了，你可以用下面的命令删除它：
```
lxc delete 
```
注意，如果容器还处于运行状态时你将必须使用“-force”。
### 容器的配置
LXD 拥有大量的容器配置设定，包括资源限制，容器启动控制以及对各种设备是否允许访问的配置选项。完整的清单因为太长所以并没有在本文中列出，但是，你可以从[这里]获取它。
就设备而言，LXD 当前支持下面列出的这些设备类型：
* 磁盘 既可以是一块物理磁盘，也可以只是一个被挂挂载到容器上的分区，还可以是一个来自主机的绑定挂载路径。
* 网络接口卡 一块网卡。它可以是一块桥接的虚拟网卡，或者是一块点对点设备，还可以是一块以太局域网设备或者一块已经被连接到容器的真实物理接口。
* unix 块设备 一个 UNIX 块设备，比如 /dev/sda
* unix 字符设备 一个 UNIX 字符设备，比如 /dev/kvm
* none 这种特殊类型被用来隐藏那种可以通过配置文件被继承的设备。
#### 配置 profile 文件
所有可用的配置文件列表可以这样获取：
```
lxc profile list
```
为了看到给定配置文件的内容，最简单的方式是这样做：