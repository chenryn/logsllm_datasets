# Rarest First and Choke Algorithms Are Sufficient

**Authors:**
- Arnaud Legout, I.N.R.I.A., Sophia Antipolis, France
- Guillaume Urvoy-Keller, Institut Eurecom, Sophia Antipolis, France
- Pietro Michiardi, Institut Eurecom, Sophia Antipolis, France

## Abstract
The performance of peer-to-peer (P2P) file replication is significantly influenced by its piece and peer selection strategies. The BitTorrent protocol employs two such strategies: the rarest first and choke algorithms. While it is widely acknowledged that BitTorrent performs well, recent studies have proposed replacing these algorithms to enhance efficiency and fairness. In this paper, we present empirical evidence from real-world experiments to argue that the replacement of the rarest first and choke algorithms is not justified in the context of P2.P file replication on the Internet.

We instrumented a BitTorrent client and conducted experiments on various torrents with different characteristics. Our evaluation is peer-oriented rather than tracker-oriented, allowing us to gather detailed information on all exchanged messages and protocol events. Our findings go beyond merely confirming the efficiency of both algorithms. We demonstrate that the rarest first algorithm ensures near-ideal diversity of pieces among peers, making it unnecessary to replace it with source or network coding solutions. Additionally, the latest version of the choke algorithm promotes reciprocation and is robust against free riders, rendering a bit-level tit-for-tat solution inappropriate. Finally, we identify new areas for improvement in efficient P2P file replication protocols.

**Categories and Subject Descriptors:**
- C.2.2 [Computer-Communication Networks]: Network Protocols
- C.2.4 [Computer-Communication Networks]: Distributed Systems

**General Terms:**
- Measurement, Algorithms, Performance

**Keywords:**
- BitTorrent, choke algorithm, rarest first algorithm, peer-to-peer

## 1. Introduction
Peer-to-peer (P2P) file sharing has become one of the most popular applications on the Internet [16, 17]. Efficient content localization and replication are key factors in its success. While content localization has been extensively studied [7, 12, 23, 25], content replication has only recently attracted significant research interest. Among the most popular P2P file-sharing networks [1]—eDonkey2K, FastTrack, Gnutella, and Overnet—BitTorrent [8] stands out as the only widely used application focusing on content replication.

Yang et al. [26] investigated efficient content replication in P2P networks, showing that the network's capacity to serve content grows exponentially during flash crowds, and that splitting content into multiple pieces is a key improvement. Qiu et al. [22] provided a refined model of BitTorrent, demonstrating its high efficiency. These studies highlight that a P2P architecture for file replication is a significant improvement over a client-server architecture, which does not scale with the number of peers.

However, these studies assume global knowledge, which is unrealistic. In practice, each peer does not know all other peers, and the challenge is to design a P2P protocol that achieves near-optimal efficiency without this assumption.

Piece and peer selection strategies are crucial for efficient P2P content replication. In a P2P system, content is divided into pieces, and each peer acts as both a client and a server. An effective piece selection strategy should ensure that each peer can always find an interesting piece from any other peer, maximizing the choice available to the peer selection strategy. An efficient peer selection strategy should maximize the system's service capacity, using criteria such as upload and download capacity, and should not be biased by the lack of available pieces in some peers.

The rarest first algorithm, used by BitTorrent, selects the least common pieces first. This simple strategy outperforms random piece selection [5, 9]. However, Gkantsidis et al. [11] argued that the rarest first algorithm may lead to the scarcity of some pieces and proposed a solution based on network coding. While elegant, this solution raises issues of security and computational cost. Other solutions based on source coding [18] have also been proposed to address the perceived deficiencies of the rarest first algorithm.

The choke algorithm, another core component of BitTorrent, is based on the reciprocation of upload and download speeds. Several studies [5, 10, 13, 15] have discussed the fairness issues of the choke algorithm, arguing that it is unfair and favors free riders. Solutions based on a bit-level tit-for-tat have been proposed to address these fairness concerns.

In this paper, we conduct an experimental evaluation of the piece and peer selection strategies as implemented in BitTorrent. We instrumented a client and ran extensive experiments on several torrents with different characteristics to evaluate the properties of the rarest first and choke algorithms. Our main conclusions are:

- The rarest first algorithm ensures high piece diversity, preventing the reappearance of rare pieces and the last pieces problem.
- During the startup phase, torrents can have low piece diversity, but this is due to the upload capacity of the content source, not the rarest first algorithm.
- A bit-level tit-for-tat strategy is not appropriate for P2P file replication; we propose two new fairness criteria.
- The latest version of the choke algorithm is fair, fosters reciprocation, and is robust against free riders.

Our contribution goes beyond confirming the good performance of BitTorrent. We provide new insights into the role of peer and piece selection for efficient P2P file replication, showing that the rarest first and choke algorithms do not need to be replaced by more complex solutions. We also identify new areas for improvement, such as the replication of the first pieces and the speed of delivering the first copy of the content. Finally, we propose two new fairness criteria and present results on the latest version of the choke algorithm, which addresses fundamental fairness issues.

Our findings differ from previous work [5, 10, 11, 13, 15, 18] for three main reasons:
1. We focus on P2P file replication in the Internet, where peers are well-connected without severe network bottlenecks.
2. We evaluate the latest version of the choke algorithm, which solves the problems identified in the old version.
3. We perform an experimental evaluation on real torrents, which have larger peer sets and smaller diameters compared to simulations.

This study shows that, in the context of Internet P2P file replication, the rarest first and choke algorithms are sufficient. While our conclusions may not extend to other P2P contexts, this paper provides new insights into a system that uses a large fraction of the Internet bandwidth.

The rest of the paper is organized as follows: Section 2 introduces the terminology and provides an overview of the BitTorrent protocol and the rarest first and choke algorithms. Section 3 describes our experimental methodology, and Section 4 presents our detailed results. Related work is discussed in Section 5, and we conclude the paper with a discussion of the results in Section 6.

## 2. Background

### 2.1 Terminology
The terminology used in the P2P community, especially in the BitTorrent community, is not standardized. For clarity, we define the terms used throughout this paper:

- **Pieces and Blocks:** Files transferred using BitTorrent are split into pieces, and each piece is further divided into blocks. Blocks are the transmission unit on the network, but the protocol only accounts for transferred pieces. Partially received pieces cannot be served by a peer; only complete pieces can.
- **Interested and Choked:** Peer A is interested in peer B if peer B has pieces that peer A does not have. Conversely, peer A is not interested in peer B if peer B only has a subset of the pieces of peer A. Peer A chokes peer B if peer A decides not to send data to peer B. Conversely, peer A unchokes peer B if peer A decides to send data to peer B.
- **Peer Set:** Each peer maintains a list of other peers it knows about, called the peer set. This is also known as the neighbor set.
- **Local and Remote Peers:** The local peer is the one with the instrumented BitTorrent client, and remote peers are those in the local peer's peer set.
- **Active Peer Set:** A peer can only send data to a subset of its peer set, called the active peer set. The choke algorithm determines which remote peers will be part of the active peer set. Only peers that are unchoked by the local peer and interested in the local peer are part of the active peer set.
- **Leecher and Seed:** A peer has two states: leecher, when it is downloading content but does not yet have all the pieces; and seed, when it has all the pieces of the content.
- **Initial Seed:** The initial seed is the peer that is the first source of the content.
- **Rarest First Algorithm:** This is the piece selection strategy used in BitTorrent, described in detail in Section 2.3.1. It is also called the local rarest first algorithm.
- **Choke Algorithm:** This is the peer selection strategy used in BitTorrent, described in detail in Section 2.3.2. It is also called the tit-for-tat algorithm or tit-for-tat-like algorithm.
- **Rare and Available Pieces:** Rare pieces are those only present on the initial seed, while available pieces are those already served at least once by the initial seed.
- **Rarest Pieces and Rarest Pieces Set:** The rarest pieces are those with the least number of copies in the peer set. If the least replicated piece has m copies, all pieces with m copies form the rarest pieces set. The rarest pieces can be either rare or available, depending on the number of copies.

### 2.2 BitTorrent Overview
BitTorrent is a P2P application that leverages the bandwidth of peers to efficiently replicate content across a large set of peers. A unique feature of BitTorrent is the concept of a torrent, which defines a session for transferring a single content to a set of peers. Torrents are independent, and participating in one does not benefit participation in another. A torrent remains active as long as there is at least one copy of each piece in the torrent. Peers involved in a torrent cooperate to replicate the file using swarming techniques [24].

The file is typically split into pieces of 256 kB, and each piece is divided into blocks of 16 kB. A user joins an existing torrent by downloading a .torrent file from a web server, which contains metadata such as the piece size and SHA-1 hash values of each piece, and the IP address of the tracker. The tracker is the only centralized component of BitTorrent and keeps track of the peers currently involved in the torrent and collects statistics.

When joining a torrent, a new peer requests a list of IP addresses from the tracker to build its initial peer set. This list usually consists of 50 peers chosen at random from the current participants. The initial peer set is augmented by peers connecting directly to the new peer. Each peer reports its state to the tracker every 30 minutes, or when disconnecting, indicating the amount of data uploaded and downloaded since joining. A torrent can be viewed as a collection of interconnected peer sets. If a peer's peer set size falls below a predefined threshold (typically 20 peers), the peer contacts the tracker again to obtain a new list of IP addresses. The maximum peer set size is 80, with a limit of 40 initiated connections, ensuring a good interconnection among the peer sets.

Each peer knows the distribution of pieces for each peer in its peer set, maintained through message exchanges [3]. The exchange of pieces among peers is governed by the rarest first and choke algorithms, detailed in Section 2.3.

### 2.3 BitTorrent Piece and Peer Selection Strategies

#### 2.3.1 Rarest First Algorithm
The rarest first algorithm operates as follows: Each peer maintains a list of the number of copies of each piece in its peer set. It uses this information to define a rarest pieces set. If the rarest piece has m copies, the indices of all pieces with m copies are added to the rarest pieces set. The rarest pieces set is updated whenever a piece is added to or removed from the peer set. Each peer selects the next piece to download randomly from its rarest pieces set.

The behavior of the rarest first algorithm can be modified by three additional policies:
- **Random First Policy:** If a peer has downloaded fewer than 4 pieces, it chooses the next piece to request randomly. This policy allows a peer to quickly acquire its first pieces, which is important for reciprocation in the choke algorithm. A randomly chosen piece is likely to be more replicated than the rarest piece, facilitating faster initial downloads.
- **Rarest First Policy:** Once a peer has downloaded at least 4 pieces, it switches to the rarest first algorithm.
- **End Game Mode:** When a peer is close to completing the file, it switches to a mode where it requests the remaining pieces from all peers that have them, regardless of their rarity.

These policies ensure that the rarest first algorithm is both efficient and flexible, adapting to the changing needs of the peer as it progresses through the download process.