title:Rarest first and choke algorithms are enough
author:Arnaud Legout and
Guillaume Urvoy-Keller and
Pietro Michiardi
Rarest First and Choke Algorithms Are Enough
Arnaud Legout
I.N.R.I.A.
Sophia Antipolis France
PI:EMAIL
ABSTRACT
The performance of peer-to-peer ﬁle replication comes from
its piece and peer selection strategies. Two such strategies
have been introduced by the BitTorrent protocol: the rarest
ﬁrst and choke algorithms. Whereas it is commonly ad-
mitted that BitTorrent performs well, recent studies have
proposed the replacement of the rarest ﬁrst and choke algo-
rithms in order to improve eﬃciency and fairness. In this
paper, we use results from real experiments to advocate that
the replacement of the rarest ﬁrst and choke algorithms can-
not be justiﬁed in the context of peer-to-peer ﬁle replication
in the Internet.
We instrumented a BitTorrent client and ran experiments
on real torrents with diﬀerent characteristics. Our exper-
imental evaluation is peer oriented, instead of tracker ori-
ented, which allows us to get detailed information on all
exchanged messages and protocol events. We go beyond the
mere observation of the good eﬃciency of both algorithms.
We show that the rarest ﬁrst algorithm guarantees close to
ideal diversity of the pieces among peers. In particular, on
our experiments, replacing the rarest ﬁrst algorithm with
source or network coding solutions cannot be justiﬁed. We
also show that the choke algorithm in its latest version fos-
ters reciprocation and is robust to free riders. In particu-
lar, the choke algorithm is fair and its replacement with a
bit level tit-for-tat solution is not appropriate. Finally, we
identify new areas of improvements for eﬃcient peer-to-peer
ﬁle replication protocols.
Categories and Subject Descriptors: C.2.2 [Computer-
Communication Networks]: Network Protocols; C.2.4
[Computer-Communication Networks]: Distributed Systems
General Terms: Measurement, Algorithms, Performance
Keywords: BitTorrent, choke algorithm, rarest ﬁrst algo-
rithm, peer-to-peer
1.
INTRODUCTION
In a few years, peer-to-peer ﬁle sharing has become the
most popular application in the Internet [16, 17]. Eﬃcient
content localization and replication are the main reasons
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
G. Urvoy-Keller and P. Michiardi
Institut Eurecom
Sophia Antipolis France
{Guillaume.Urvoy,Pietro.Michiardi}@eurecom.fr
for this success. Whereas content localization has attracted
considerable research interest in the last years [7, 12, 23, 25],
content replication has started to be the subject of active
research only recently. As an example, the most popular
peer-to-peer ﬁle sharing networks [1] eDonkey2K, FastTrack,
Gnutella, Overnet focus on content localization. The only
widely used [16, 17, 20] peer-to-peer ﬁle sharing application
focusing on content replication is BitTorrent [8].
Yang et al.
[26] studied the problem of eﬃcient content
replication in a peer-to-peer network. They showed that
the capacity of the network to serve content grows exponen-
tially with time in the case of a ﬂash crowd, and that a key
improvement on peer-to-peer ﬁle replication is to split the
content into several pieces. Qiu et al.
[22] proposed a re-
ﬁned model of BitTorrent and showed its high eﬃciency. In
summary, these studies show that a peer-to-peer architec-
ture for ﬁle replication is a major improvement compared to
a client server architecture, whose capacity of service does
not scale with the number of peers.
However, both studies assume global knowledge, which is
not realistic. Indeed, they assume that each peer knows all
the other peers. As a consequence, the results obtained with
this assumption can be considered as the optimal case. In
real implementations, there is no global knowledge. The
challenge is then to design a peer-to-peer protocol that
achieves a level of eﬃciency close to the one achieved in
the case of global knowledge.
Piece and peer selection strategies are the two keys of
eﬃcient peer-to-peer content replication. Indeed, in a peer-
to-peer system, the content is split into several pieces, and
each peer acts as a client and a server. Therefore, each
peer can receive and give any piece to any other peer. An
eﬃcient piece selection strategy should guarantee that each
peer can always ﬁnd an interesting piece from any other peer.
The rationale is to oﬀer the largest choice of peers to the
peer selection strategy. An eﬃcient peer selection strategy
should maximize the capacity of service of the system. In
particular, it should employ selection criteria based, e.g., on
upload and download capacity, and should not be biased by
the lack of available pieces in some peers.
The rarest ﬁrst algorithm is a piece selection strategy that
consists of selecting the rarest pieces ﬁrst. This simple strat-
egy used by BitTorrent performs better than random piece
selection strategies [5, 9]. However, Gkantsidis et al.
[11]
argued based on simulations that the rarest ﬁrst algorithm
may lead to the scarcity of some pieces of content and pro-
posed a solution based on network coding. Whereas this
solution is elegant and has raised a lot of interest, it leads
to several complex deployment issues such as security and
computational cost. Other solutions based on source coding
[18] have also been proposed to solve the claimed deﬁciencies
of the rarest ﬁrst algorithm.
The choke algorithm is the peer selection strategy of Bit-
Torrent. This strategy is based on the reciprocation of up-
load and download speeds. Several studies [5, 10, 13, 15] dis-
cussed the fairness issues of the choke algorithm.
In par-
ticular, they argued that the choke algorithm is unfair and
favors free riders, i.e., peers that do not contribute. Solu-
tions based on a bit level tit-for-tat have been proposed to
address the choke algorithm’s fairness problem.
In this paper, we perform an experimental evaluation of
the piece and peer selection strategies as implemented in
BitTorrent. Speciﬁcally, we have instrumented a client and
run extensive experiments on several torrents with diﬀer-
ent characteristics in order to evaluate the properties of the
rarest ﬁrst and choke algorithms. While we have not ex-
amined all possible cases, we argue that we have covered a
representative set of today real torrents.
Our main conclusions on real torrents are the following.
(cid:129) The rarest ﬁrst algorithm guarantees a high diversity
of the pieces. In particular, it prevents the reappear-
ance of rare pieces and of the last pieces problem.
(cid:129) We have found that torrents in a startup phase can
have low piece diversity. The duration of this phase
depends only on the upload capacity of the source of
the content. In particular, the rarest ﬁrst algorithm is
not responsible for the low piece diversity during this
phase.
(cid:129) The fairness achieved with a bit level tit-for-tat strat-
egy is not appropriate in the context of peer-to-peer
ﬁle replication. We have proposed two new fairness
criteria in this context.
(cid:129) The choke algorithm is fair, fosters reciprocation, and
is robust to free riders in its latest version.
Our contribution is to go beyond the mere conﬁrmation
of the good performance of BitTorrent. We provide new in-
sights into the role of peer and piece selection for eﬃcient
peer-to-peer ﬁle replication. We show for the ﬁrst time that
on real torrents, the eﬃciency of the rarest ﬁrst and choke
algorithms do no justify their replacement by more complex
solutions. Also, we identify, based on our observations, new
area of improvements: the replication of the ﬁrst pieces and
the speed of delivery of the ﬁrst copy of the content. Fi-
nally, we propose two new fairness criteria in the context of
peer-to-peer ﬁle replication and we present for the ﬁrst time
results on the new version of the choke algorithm that ﬁxes
fundamental fairness issues.
Our ﬁndings signiﬁcantly diﬀer from previous work [5, 10,
11, 13, 15, 18]. There are three main reasons for this diver-
gence. First, we target peer-to-peer ﬁle replication in the
Internet. As a consequence, the peers are well connected
without severe network bottlenecks. The problems iden-
tiﬁed in the literature with the rarest ﬁrst algorithm are
in the context of networks with connectivity problems or
low capacity bottlenecks. Second, we evaluate for the ﬁrst
time the new version of the choke algorithm. The evaluation
of the choke algorithm in the literature was performed on
the old version. We show that the new version solves the
problems identiﬁed on the old one. Finally, we perform an
experimental evaluation on real torrents. Simulating peer-
to-peer protocols is hard and requires many simpliﬁcations.
In particular, all the simulations of BitTorrent we are aware
of consider that each peer only knows few other peers, i.e.,
each peer has a small peer set [5, 11].
In the case of real
torrents, the peer set size is much larger. The consequence
is that BitTorrent builds a random graph, connecting the
peers, that has a larger diameter in simulations than in real
torrents. However, the diameter has a fundamental impact
on the eﬃciency of the rarest ﬁrst algorithm.
In this study, we show that in the speciﬁc context con-
sidered, i.e., Internet peer-to-peer ﬁle replication, the rarest
ﬁrst and choke algorithms are good enough. Even if we can-
not extend our conclusions to other peer-to-peer contexts,
we believe this paper sheds new light on a system that uses
a large fraction of the Internet bandwidth.
The rest of the paper is organized as follows. We present
the terminology used throughout this paper in section 2.1.
Then, we give a short overview of the BitTorrent proto-
col in section 2.2 and a description of the rarest ﬁrst and
choke algorithms in section 2.3. We present our experimen-
tal methodology in section 3, and our detailed results in sec-
tion 4. Related work is discussed in section 5. We conclude
the paper with a discussion of the results in section 6.
2. BACKGROUND
We introduce in this section the terminology used
throughout this paper. Then, we give an overview of the Bit-
Torrent protocol, and we present the rarest ﬁrst and choke
algorithms.
2.1 Terminology
The terminology used in the peer-to-peer community and
in particular in the BitTorrent community is not standard-
ized. For the sake of clarity, we deﬁne in this section the
terms used throughout this paper.
(cid:129) Pieces and Blocks Files transfered using BitTorrent
are split in pieces, and each piece is split in blocks.
Blocks are the transmission unit on the network, but
the protocol only accounts for transfered pieces.
In
particular, partially received pieces cannot be served
by a peer, only complete pieces can.
(cid:129) Interested and Choked We say that peer A is in-
terested in peer B when peer B has pieces that peer A
does not have. Conversely, peer A is not interested in
peer B when peer B only has a subset of the pieces of
peer A. We say that peer A chokes peer B when peer
A decides not to send data to peer B. Conversely, peer
A unchokes peer B when peer A decides to send data
to peer B.
(cid:129) Peer Set Each peer maintains a list of other peers it
knows about. We call this list the peer set. The notion
of peer set is also known as neighbor set.
(cid:129) Local and Remote Peers We call local peer the peer
with the instrumented BitTorrent client, and remote
peers the peers that are in the peer set of the local
peer.
(cid:129) Active Peer Set A peer can only send data to a sub-
set of its peer set. We call this subset the active peer
set. The choke algorithm (described in section 2.3.2)
determines the peers being part of the active peer set,
i.e., which remote peers will be choked and unchoked.
Only peers that are unchoked by the local peer and
interested in the local peer are part of the active peer
set.
(cid:129) Leecher and Seed A peer has two states: the leecher
state, when it is downloading content, but does not
have yet all the pieces; the seed state when the peer
has all the pieces of the content. For short, we say
that a peer is a leecher when it is in leecher state and
a seed when it is in seed state.
(cid:129) Initial Seed The initial seed is the peer that is the
ﬁrst source of the content.
(cid:129) Rarest First Algorithm The rarest ﬁrst algorithm
is the piece selection strategy used in BitTorrent. We
give a detailed description of this algorithm in sec-
tion 2.3.1. The rarest ﬁrst algorithm is also called the
local rarest ﬁrst algorithm.
(cid:129) Choke Algorithm The choke algorithm is the peer
selection strategy used in BitTorrent. We give a de-
tailed description of this algorithm in section 2.3.2.
The choke algorithm is also called the tit-for-tat algo-
rithm, or tit-for-tat like algorithm.
(cid:129) Rare and Available Pieces We call the pieces only
present on the initial seed rare pieces, and we call the
pieces already served at least once by the initial seed
available pieces.
(cid:129) Rarest Pieces and Rarest Pieces Set The rarest
pieces are the pieces that have the least number of
copies in the peer set. In the case the least replicated
piece in the peer set has m copies, then all the pieces
with m copies form the rarest pieces set. The rarest
pieces can be rare pieces or available pieces, depending
on the number of copies of the rarest pieces.
2.2 BitTorrent Overview
BitTorrent is a P2P application that capitalizes on the
bandwidth of peers to eﬃciently replicate contents on a large
set of peers. A speciﬁcity of BitTorrent is the notion of
torrent, which deﬁnes a session of transfer of a single content
to a set of peers. Torrents are independent. In particular,
participating in a torrent does not bring any beneﬁt for the
participation to another torrent. A torrent is alive as long as
there is at least one copy of each piece in the torrent. Peers
involved in a torrent cooperate to replicate the ﬁle among
each other using swarming techniques [24].
In particular,
the ﬁle is split in pieces of typically 256 kB, and each piece
is split in blocks of 16 kB. Other piece sizes are possible.
A user joins an existing torrent by downloading a .tor-
rent ﬁle usually from a Web server, which contains meta-
information on the ﬁle to be downloaded, e.g., the piece size
and the SHA-1 hash values of each piece, and the IP ad-
dress of the so-called tracker of the torrent. The tracker is
the only centralized component of BitTorrent, but it is not
involved in the actual distribution of the ﬁle. It keeps track
of the peers currently involved in the torrent and collects
statistics on the torrent.
When joining a torrent, a new peer asks to the tracker a
list of IP addresses of peers to build its initial peer set. This
list typically consists of 50 peers chosen at random in the list
of peers currently involved in the torrent. The initial peer
set will be augmented by peers connecting directly to this
new peer. Such peers are aware of the new peer by receiving
its IP address from the tracker. Each peer reports its state
to the tracker every 30 minutes in steady-state regime, or
when disconnecting from the torrent, indicating each time
the amount of bytes it has uploaded and downloaded since it
joined the torrent. A torrent can thus be viewed as a collec-
tion of interconnected peer sets. If ever the peer set size of
a peer falls below a predeﬁned threshold, typically 20 peers,
this peer will contact the tracker again to obtain a new list
of IP addresses of peers. By default, the maximum peer
set size is 80. Moreover, a peer should not exceed a thresh-
old of 40 initiated connections among the 80 at each time.
As a consequence, the 40 remaining connections should be
initiated by remote peers. This policy guarantees a good
interconnection among the peer sets in the torrent.
Each peer knows the distribution of the pieces for each
peer in its peer set. The consistency of this information is
guaranteed by the exchange of messages [3]. The exchange
of pieces among peers is governed by two core algorithms:
the rarest ﬁrst and the choke algorithms. These algorithms
are further detailed in section 2.3.
2.3 BitTorrent Piece and Peer Selection
Strategies
We focus here on the two core algorithms of BitTorrent:
the rarest ﬁrst and choke algorithms. We do not give all
the details of these algorithms, but explain the main ideas
behind them.
2.3.1 Rarest First Algorithm
The rarest ﬁrst algorithm works as follows. Each peer
maintains a list of the number of copies of each piece in its
peer set. It uses this information to deﬁne a rarest pieces
set. Let m be the number of copies of the rarest piece,
then the index of each piece with m copies in the peer set
is added to the rarest pieces set. The rarest pieces set of a
peer is updated each time a copy of a piece is added to or
removed from its peer set. Each peer selects the next piece
to download at random in its rarest pieces set.
The behavior of the rarest ﬁrst algorithm can be modiﬁed
by three additional policies. First, if a peer has downloaded
strictly less than 4 pieces, it chooses randomly the next piece
to be requested. This is called the random ﬁrst policy. Once
it has downloaded at least 4 pieces, it switches to the rarest
ﬁrst algorithm. The aim of the random ﬁrst policy is to
permit a peer to download its ﬁrst pieces faster than with the
rarest ﬁrst policy, as it is important to have some pieces to
reciprocate for the choke algorithm. Indeed, a piece chosen
at random is likely to be more replicated than the rarest