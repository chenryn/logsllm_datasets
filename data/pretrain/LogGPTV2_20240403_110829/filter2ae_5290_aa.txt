## 环境
  * linux kernel 4.1.1
  * qemu
## 相关结构
这一部分参考[博客](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.html "博客")，im0963表哥这一些列文章做了翻译，建议先了解一下这些结构，对后面的调试有帮助
### task_struct
    struct  task_struct  { 
        volatile  long  state ;             //进程状态（运行，停止，...）
        void  * stack ;                     //任务的堆栈指针
        int  prio ;                        //进程优先级
        struct  mm_struct  * mm ;            //内存地址空间
        struct  files_struct  * file;      //打开文件信息
        const  struct  cred  * cred ;         //凭证,保存uid等权限信息
      // ... 
    };
每个进程，线程都有自己的task_struct,可以通过current宏进行访问
### fd,file object,fdt,file_struct
fd:对于给定进程而言，是一个整数  
file object(struct file):表示一个已经打开的文件
    struct  file  { 
        loff_t                             f_pos ;             //“cursor”，同时读取文件
        atomic_long_t                      f_count ;           //对象的引用计数器
        const  struct  file_operations       * f_op ;             //虚函数表（VFT）指针
      void                               * private_data ;       //文件“specialization”使用
      // ... 
    };
    struct file *filp; / *文件指针 * /
fdt:将fd转换为对应的filp，这个映射不是一一映射，可能对各文件描述符指向同一个文件对象，这种情况下，文件对象的引用计数器加一。
    struct  fdtable  { 
        unsigned  int  max_fds ; 
        struct  file  **  fd ;       / *当前fd数组* / 
      // ... 
    };
file_struct ：将fdt链接到进程内部,file_struct可以在多个线程之间共享
    struct  files_struct  { 
        atomic_t  count ;            //引用计数器
        结构 fdtable  * fdt ;       //指向文件描述符表的指针
      // ... 
    };
### socket,sock,skb
创建socket时，比如调用了socket syscall，就会创建一个struct
file类型的的socket文件对象，然后创建一个结构体`socker_file_ops`，里面包含了对这个file的操作,并且将它的操作(file
operation)嵌入其中
    static const struct file_operations socket_file_ops = {
        .read = sock_aio_read,      // ops->recvmsg()
        .write =    sock_aio_write, // ops->sendmsg()
        .llseek =   no_llseek,      // 
    SYSCALL_DEFINE2(mq_notify, mqd_t, mqdes,
            const struct sigevent __user *, u_notification)
    {
        int ret;
        struct fd f;
        struct sock *sock;
        struct inode *inode;
        struct sigevent notification;
        struct mqueue_inode_info *info;
        struct sk_buff *nc;     / *网络数据包* / 
            / *判断u_notification是否为空，不为空，则拷贝到内核空间* /
        if (u_notification) {
            if (copy_from_user(&notification, u_notification,
                        sizeof(struct sigevent)))
                return -EFAULT;
        }
            / *记录系统调用* /
        audit_mq_notify(mqdes, u_notification ? &notification : NULL);
            / *初始化nc,sock */
        nc = NULL;
        sock = NULL;
        if (u_notification != NULL) {
                    / *判断是哪一种通知方法* /
            if (unlikely(notification.sigev_notify != SIGEV_NONE &&
                     notification.sigev_notify != SIGEV_SIGNAL &&
                     notification.sigev_notify != SIGEV_THREAD))
                return -EINVAL;
                    /*通过发送指定的信号进行通知，并判断信号编号是否有效* /
            if (notification.sigev_notify == SIGEV_SIGNAL &&
                !valid_signal(notification.sigev_signo)) {
                return -EINVAL;
            }
                    /*通过创建线程进行通知*/
            if (notification.sigev_notify == SIGEV_THREAD) {
                long timeo;
                /* create the notify skb */
                            /* 申请内存，存放网络数据包（用于通知）* /
                nc = alloc_skb(NOTIFY_COOKIE_LEN, GFP_KERNEL);
                if (!nc) {
                    ret = -ENOMEM;
                    goto out;
                }
                if (copy_from_user(nc->data,
                        notification.sigev_value.sival_ptr,
                        NOTIFY_COOKIE_LEN)) {
                    ret = -EFAULT;
                    goto out;
                }
                /* TODO: add a header? */
                            /* skb_put()功能并不是将引用计数器减1，而是“push data info sk buffer”.
                skb_put(nc, NOTIFY_COOKIE_LEN);
                /* and attach it to the socket */
    retry:
                            /*根据fd获取对应的file对象*/
                f = fdget(notification.sigev_signo);
                if (!f.file) {
                    ret = -EBADF;
                    goto out;
                }
                            /*在file object中获取对应的sock对象指针*/
                sock = netlink_getsockbyfilp(f.file);/*调用sock_hold(),sock对象的引用计数器+1*/
                fdput(f);/*file 的引用计数器-1*/
                if (IS_ERR(sock)) {
                    ret = PTR_ERR(sock);
                    sock = NULL;
                    goto out;
                }
                timeo = MAX_SCHEDULE_TIMEOUT;
                            /*出现分支，1，0，other 三条路径*/
                            /*正常功能就是将skb加入到sk receiving buf中*/
                ret = netlink_attachskb(sock, nc, &timeo, NULL);
                if (ret == 1)
                    goto retry; /*进入retry 逻辑*/
                if (ret) {
                    sock = NULL;
                    nc = NULL;
                    goto out;
                }
            }
        }
    / *省略不必要的部分* /
    out:
        if (sock)
            netlink_detachskb(sock, nc);
        else if (nc)
            dev_kfree_skb(nc);
        return ret;
    }
    -------------------------------------------CUT LINE---------------------------------------------------    int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
                  long *timeo, struct sock *ssk)
    {
        struct netlink_sock *nlk;
        nlk = nlk_sk(sk);
            /*判断sk的实际大小与理论大小 or netlink_sock是否处于拥堵状态*/
        if ((atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf ||
             test_bit(NETLINK_CONGESTED, &nlk->state)) &&
            !netlink_skb_is_mmaped(skb)) {
                    /*声明一个等待队列*/
            DECLARE_WAITQUEUE(wait, current);
            if (!*timeo) {
                if (!ssk || netlink_is_kernel(ssk))
                    netlink_overrun(sk);
                sock_put(sk);
                kfree_skb(skb);
                return -EAGAIN;
            }
                    /*设置当前task状态为TASK_INTERRUPTIBLE*/
            __set_current_state(TASK_INTERRUPTIBLE);
                    /*添加到wait 队列*/
            add_wait_queue(&nlk->wait, &wait);