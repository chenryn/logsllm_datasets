sage starts with an author identiﬁer and a sequence number,
lexical order will group messages by author in the order that
they were created.
Shutdown() collects the digests published by all the other
participants. It then calculates the digests of ˆX’s transcripts
of the messages received from each other party, combines
these digests into a single digest, publishes the combined
digest, and collects the combined digests from all the other
parties. At this point, ˆX determines if it has reached consen-
sus with each of the other parties on the session transcript.
Since at the setup phase parties conﬁrmed their views of
chat participants and sid of the chat, all transcripts already
agree on the set of participants and the chat instance. As
argued in §4.3, the only remaining way for an adversary to
break consensus is to force diﬀerent messages in the tran-
script. The consensus adversary does not (yet) have the sig-
nature keys hence he is still not able to inject new messages
or impersonate honest users; his only freedom is the hash
function that we assume collision and preimage resistant.
366Algorithm 7: Shutdown() — called in the context of
party ˆX when the application determines that the session
should be shut down. Determines if consensus has been
reached with other participants and publishes ephemeral
signing key.
Input: all sent messages Sent, all received messages
Received, participant set Pi, session id sidi,
ephemeral signing key e ˆX,i
Output: consensus ˆY values indicating if consensus has
been reached for each party ˆY , publishes
private ephemeral signing key for current
session e ˆX,i
2 ), . . .) = Sent in lexical order;
1 ), ( ˆX, M ˆX
1 , M ˆX
2 , . . .);
// Publish digest of sent messages
Let (( ˆX, M ˆX
h ˆX ← H(M ˆX
AuthSend( (“shutdown”, h ˆX ) );
// Collect digests of others’ transcripts
// and calculate digest of our view
Outstanding ← Pi \ { ˆX};
while Outstanding (cid:54)= ∅ do
2 , . . .) = {M | ( ˆY , M ) ∈ Received} in
ˆY )) ← AuthReceive();
( ˆY , (“shutdown”, h(cid:48)
Let (M ˆY
1 , M ˆY
lexical order;
h ˆY ← H(M ˆY
Outstanding ← Outstanding \ { ˆY };
1 , M ˆY
2 , . . .);
// Publish digest of full chat
Let ( ˆY1, ˆY2, . . .) = Pi in lexical order;
h ← H(h ˆY1 , h ˆY2 , . . .);
AuthSend( (“digest”, h) );
// Determine consensus
Outstanding ← Pi \ { ˆX};
while Outstanding (cid:54)= ∅ do
( ˆY , (M, h(cid:48))) ← AuthReceive();
if M = “digest”∧ ˆY ∈ Outstanding then
consensus ˆY ← h = h(cid:48);
Outstanding ← Outstanding \ { ˆY };
// Verify that nobody’s listening
AuthSend(“end(cid:48)(cid:48));
Outstanding ← Pi \ { ˆX};
while Outstanding (cid:54)= ∅ do
( ˆY , M ) ← AuthReceive();
if M (cid:54)= “end” then
else
return;
Outstanding ← Outstanding \ { ˆY };
// Publish ephemeral signing key
Broadcast( (sidi, ˆX, e ˆX,i) );
Thus chat participants obtain assurances about consistency
— they reach pairwise consensus in the sense of §3.2.2.
The consensus approach adopted above is crude, as it does
not attempt to remedy any consensus errors, and it only
determines consensus at the very end of the chat session.
We adopt this simple approach to allow the network layer
to freely choose consensus-ensuring algorithms. The net-
work could provide totally ordered multicast or KleeQ-like
algorithms optimized for the broadcast medium. Whatever
approach is chosen, our protocol can detect any violations
of reliable delivery at the mpOTR level. Furthermore, the
signatures used to authenticate messages are transferable
within the chatroom since all members have the correct asso-
ciation between the chatroom-speciﬁc signature keys and the
entities behind the keys. Therefore the protocol can identify
malicious users, since an honest party Alice has transferable
proofs to convince any other honest party about the origin of
the messages that she received. Thus she can prove that she
did not modify or inject messages on behalf of other users.
Likewise, she can update her transcript with messages that
she failed to receive. Ultimately, honest users can agree on
a transcript that is the union of all the messages that have
reached at least one honest user. Although we have chosen
the simple approach above for its clarity, approaches that
ensure consensus incrementally throughout the chat session
are possible and useful.
After exchanging all the values, Shutdown() sends the dis-
tinguished message “end” indicating ˆX will no longer send
any authenticated messages. Once ˆX has received the “end”
message from each other participant, ˆX knows that all par-
ticipants have determined their consensus values and will
no longer accept messages from ˆX. This allows ˆX to pub-
lish his ephemeral signing key to permit modifying the chat
transcript.
Publishing the ephemeral signing key is a delicate issue.
If the key is published too soon, the adversary could use the
ephemeral signing key to impersonate the current party to
others. Therefore, the protocol only publishes the ephemeral
signing key at the end of Shutdown() if it can verify that all
other parties have agreed that they have determined their
consensus values and will only publish their keys or end the
session. The adversary can trivially prevent any party ˆX
from publishing its signing key by preventing the delivery
of even one of the “end” messages. However, this is not a
problem. The protocol is deniable even without publishing
the ephemeral signing keys. Therefore, we gladly trade the
deniability beneﬁts gained by allowing malleability for en-
suring that the adversary will not be able to impersonate
ˆX. However, if parties do publish their ephemeral signing
keys then the existing transcripts can be tweaked. This a
posteriori publication of signing keys allows for a user Al-
ice who accepts a relation between her chatroom signing
key and herself to argue that the messages in the transcript
are bogus. Indeed the adversary could inject and/or delete
messages on behalf of Alice’s ephemeral signing key, since
all secret information has been made public.
5. CONCLUSION
Our proposed framework for multi-party Oﬀ-the-Record
communication does not depend on a central server; instead
we developed a model that mimics a typical private meeting
where each user authenticates the other participants for him-
self. We identiﬁed three main goals for mpOTR: conﬁden-
367tiality, consensus and repudiation. We achieve conﬁdential-
ity via standard cryptographic measures. Consensus is based
on unforgeable signatures. Repudiation is based on a user’s
ability to disassociate from the signing key pair. The crucial
step in our solution is the distribution of chatroom-speciﬁc
signature keys, which become the authentication mechanism
during the chat. The deniability is a consequence of the for-
ward secrecy and deniability of the key agreement protocol
that is used to establish authentic, conﬁdential, deniable
channels between pairs of parties.
We are currently implementing and improving the eﬃ-
ciency of mpOTR. Since the setup phase is crucial for con-
sensus and deniability we opted for a relatively slow solution
that requires pairwise interaction. It is natural to look for a
more eﬃcient protocol for authentic, deniable, conﬁdential
exchange of signing keys. We also believe that a complete
formalization and veriﬁcation of our model will improve our
understanding and will help us select suitable primitives
and analyze mpOTR’s interaction with anonymity-providing
protocols and networks.
Acknowledgments
We thank Mark Gondree, Matt Franklin, Matt Bishop, Zhen-
dong Su, and Phillip Rogaway for their feedback during the
early stages of this research. We also thank the anonymous
reviewers for their helpful comments. This research is based
upon work supported by the National Science Foundation
under Grant No 0831547 (Van Gundy and Chen), MITACS
(Goldberg) and NSERC (Goldberg).
6. REFERENCES
[1] C. Alexander and I. Goldberg. Improved User
Authentication in Oﬀ-The-Record Messaging. In
P. Ning and T. Yu, editors, WPES’07: Proceedings of
the 2007 ACM workshop on Privacy in electronic
society, pages 41–47, New York, NY, USA, 2007.
ACM.
[2] M. Bellare and C. Namprempre. Authenticated
Encryption: Relations among notions and analysis of
the generic composition paradigm. In T. Okamoto,
editor, Advances in Cryptology – ASIACRYPT 2000,
volume 1976 of LNCS, New York, NY, USA, Dec.
2000. Springer-Verlag.
[3] M. Bellare and P. Rogaway. Entity Authentication
and Key Distribution. In D. R. Stinson, editor,
Advances in Cryptology – CRYPTO’93, volume 773 of
LNCS, pages 232–249, Santa Barbara, CA, USA,
1993. Springer Verlag. Full version available at
http://www.cs.ucdavis.edu/~rogaway/papers/
eakd-abstract.html.
[4] J. Bian, R. Seker, and U. Topaloglu. Oﬀ-the-Record
Instant Messaging for Group Conversation. In IRI ’07:
Proceedings of Information Reuse and Integration,
pages 79–84. IEEE Computer Society, 2007.
[5] J.-M. Bohli, M. I. G. Vasco, and R. Steinwandt.
Secure Group Key Establishment Revisited.
Cryptology ePrint Archive, Report 2005/395, 2005.
http://eprint.iacr.org/2005/395.
[6] N. Borisov, I. Goldberg, and E. Brewer. Oﬀ-the-record
communication, or, why not to use PGP. In V. Atluri,
P. Syverson, and S. D. C. di Vimercati, editors, WPES
’04: Proceedings of the 2004 ACM workshop on
Privacy in the electronic society, pages 77–84, New
York, NY, USA, 2004. ACM.
[7] C. Boyd, W. Mao, and K. G. Paterson. Key
Agreement Using Statically Keyed Authenticators. In
B. Christianson, B. Crispo, J. A. Malcolm, and
M. Roe, editors, Security Protocols, 11th International
Workshop, Revised Selected Papers, volume 3364 of
LNCS, pages 255–271, Berlin, Germany, 2005.
Springer Verlag.
[8] R. Canetti, C. Dwork, M. Naor, and R. Ostrovsky.
Deniable Encryption. In B. S. Kaliski, Jr., editor,
Advances in Cryptology – CRYPTO’97, volume 1294
of LNCS, pages 90–104, Santa Barbara, CA, USA,
1997. Springer Verlag.
[9] S. M. Cherry. IM means business. IEEE Spectrum,
38:28–32, November 2002.
[10] M. Di Raimondo, R. Gennaro, and H. Krawczyk.
Secure Oﬀ-the-Record Messaging. In V. Atluri,
S. D. C. di Vimercati, and R. Dingledine, editors,
WPES’05: Proceedings of the 2005 ACM workshop on
Privacy in electronic society, pages 81–89, New York,
NY, USA, 2005. ACM.
[11] M. Di Raimondo, R. Gennaro, and H. Krawczyk.
Deniable Authentication and Key Exchange. In R. N.
Wright, S. De Capitani di Vimercati, and
V. Shmatikov, editors, CCS 2006: Proceedings of the
13th ACM Conference on Computer and
Communications security, pages 400–409, New York,
NY, USA, 2006. ACM.
[12] C. Dwork, M. Naor, and A. Sahai. Concurrent
Zero-Knowledge. Journal of the ACM, 51(6):851–898,
2004. http://www.wisdom.weizmann.ac.il/%7Enaor/
PAPERS/time.ps.
[13] H. Krawczyk. SKEME: A Versatile Secure Key
Exchange Mechanism for Internet. In SNDSS ’96:
Proceedings of the 1996 Symposium on Network and
Distributed System Security, pages 114–127, 1996.
[14] L. Law, A. Menezes, M. Qu, J. Solinas, and
S. Vanstone. An Eﬃcient Protocol for Authenticated
Key Agreement. Designs, Codes and Cryptography,
28(2):119–134, 2003.
[15] M. Mannan. Secure Public Instant Messaging.
Master’s thesis, Carleton University, Ottawa, Canada,
August 2005.
[16] M. Mannan and P. C. van Oorschot. A Protocol for
Secure Public Instant Messaging. In G. Di Crescenzo
and A. Rubin, editors, Financial Cryptography and
Data Security – FC 2006, volume 4107 of LNCS,
pages 20–35, Anguilla, British West Indies, 2006.
Springer Verlag. Full version available at
http://www.scs.carleton.ca/research/tech_
reports/2006/download/TR-06-01.pdf.
[17] A. Menezes and B. Ustaoglu. Comparing the pre- and
post-speciﬁed peer models for key agreement. In
Y. Mu, W. Susilo, and J. Seberry, editors, Information
Security and Privacy – ACISP 2008, volume 5107 of
LNCS, pages 53–68. Springer, 2008.
[18] J. Reardon, A. Kligman, B. Agala, and I. Goldberg.
KleeQ: Asynchronous Key Management for Dynamic
Ad-Hoc Networks. Technical Report CACR 2007-03,
Center for Applied Cryptographic Research,
University of Waterloo, Waterloo, ON, Canada, 2007.
368