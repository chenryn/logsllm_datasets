𝑆.
We first observe that no query in 𝑊 ′ could have suppressed a
𝑄-block on C. As in the proof of Lemma 6.6, in such a case there
would exist a set of consecutive rounds |𝑆∗| ≥ 𝜆 such that 𝑌 (𝑆∗) ≤
𝑍(𝑆∗). This contradicts the last item of Lemma 6.4.
From this observation and the Unsuppressibility Lemma, there
1−𝑓 + 𝜖) blocks that the ad-
are at least 𝑌 (𝑆) − 2𝑍(𝑊 ) − 2𝜆𝑓 ( 𝑡
versary cannot suppress. Each of these is a 𝑄-block independently
1−𝑓 +𝜖)  ℓ′. Assume —towards a contradiction— that
ℓ  (1 − 𝜖)𝑐|𝑈 |.
Theorem 6.10 (Succinctness). In a typical execution with 𝑡  𝜆. Applying the Unsuppressibility Lemma, we ob-
tain that at least |𝑆| ≥ 𝑐|𝑈 | = 𝑐|D[ℓ]| ∈ Ω(𝜆) rounds of 𝑈 must
have been uniquely successful and belong to the chain of every
honest party. Therefore |D[ℓ]↑ℓ+1 | ≥ (1−𝜖) |𝑆 |
2 . By the definition
of ℓ this is impossible.
Case 2: 0 ≤ 𝜇 < ℓ. By maximality of 𝜇, we have |D[𝜇 + 1]| ∈
𝑂(𝜆), but |D[𝜇]| ∈ Ω(𝜆2). By the definition of D[𝜇] = C[: − 𝑘]↑𝜇
[−2𝑚:] ∪ C[: − 𝑘]↑𝜇 {C[: − 𝑘]↑𝜇+1 [−𝑚]:}, clearly |C[: − 𝑘]↑𝜇
[−2𝑚:]| = 2𝑚 so necessarily C[:− 𝑘]↑𝜇 {D[𝜇 + 1][−𝑚]:} ∈ Ω(𝜆2).
Therefore there exist blocks 𝐴 and 𝐵 in D[𝜇+1] and D[𝜇] such that
|D[𝜇 + 1]{𝐴:𝑍}| = 1, but |D[𝜇]{𝐴:𝑍}| ∈ 𝜔(𝜆). Similarly to case 1,
consider the rounds 𝑢0 and 𝑢1 during which blocks 𝐴 and 𝑍 were
generated respectively and the set of consecutive rounds 𝑈 from 𝑢0
to 𝑢1 with |𝑈 | ∈ 𝜔(𝜆). Using the Unsuppressibility Lemma, there
must exist a set of uniquely successful rounds |𝑆| ≥ 𝑐|𝑈 | whose
Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3498blocks have been adopted by all honest parties and of which at
least (1 − 𝜖) |𝑆 |
2 ≥ 0 will be of level 𝜇 + 1. Therefore there must
exist a block between 𝐴 and 𝑍 in D[𝜇 + 1].
Both cases are contradictions.
□
The previous theorem allows us to make miners reject incoming
state that is too large (more than polylogarithmic) without process-
ing them fully.
We note here that our analysis critically relies on the honest
majority assumption holding throughout the execution. The rea-
son why our verifiers can maintain a valid chain is that, once they
receive a chain C which is the longest, they inductively know that
C[−𝑘] must contain valid application data snapshot. Then, since
they have all the last 𝑘 blocks, they can validate the transactions 𝛿
on the snapshot obtained before further mining on top of them.
7 DISCUSSION AND FUTURE WORK
We have presented a scheme in which full miners are replaced with
logarithmic-space miners. Our new mining protocol allows miners
to only keep storage growing logarithmically in time. Furthermore,
the data communicated to newly bootstrapped nodes is also loga-
rithmic. We focused on optimizing the consensus data portion of
blockchains (i.e., block headers) without concern for the applica-
tion data portion. Our techniques can be composed with applica-
tion data optimization techniques.
We have proven our scheme succinct and secure against all 1/3
adversaries. Our treatment requires uninterrupted honest computa-
tional majority throughout the execution, is in the static difficulty
model, works only for proof-of-work blockchains, and requires mod-
ifications to the blockchain protocol for deployment. Let us discuss
these aspects of our construction.
Temporary dishonest majority. One important difference be-
tween our scheme and the existing blockchain protocols is that
traditional full nodes are able to verify the whole state evolution
of the system from genesis. This allows them to recover in case of
temporary dishonest majority [1, 5], while our system cannot do
so. Let us consider what could happen in case an adversary tem-
porarily has the upper hand in a blockchain where everybody is
mining using our protocol. Let C denote the chain of the honest
parties that has converged. The adversary begins mining on top of
the honest tip. She eventually produces 𝑘 + 1 new blocks on top
of C[−1], generating an adversarial chain C∗, prior to the honest
parties advancing by 𝑘 + 1 blocks — a Common Prefix violation.
In the block C∗[−𝑘 − 1], the adversary places an invalid snapshot;
say, a snapshot in which she owns a lot of money. The rest of the
blocks in C∗[−𝑘:] are filled with valid transactions. This adversary
can then compress this consensus state into a convincing proof,
as state transitions buried 𝑘 + 1 blocks beyond the tip are never
checked. As soon as the honest parties transition to this adversar-
ial chain, the attack concludes, and no more adversarial supremacy
is required. It is critical to understand what assumptions our pro-
tocol mandates: An uninterrupted honest majority throughout the
execution. It remains an open question whether it is possible to
construct logarithmic space mining protocols that can withstand
temporary adversarial supremacy.
Variable difficulty. We have built and analyzed our logarithmic
mining protocol in the constant difficulty setting, i.e., requiring that
the target 𝑇 is a constant. We strongly suspect, but have not pro-
vided proof, that similar protocols to ours work in the variable diffi-
culty setting. One important change in the protocol that is required
before it can be adapted to variable difficulty settings is that the 𝜒
portion of the proofs cannot be a constant number of blocks long.
Instead, it must be a suffix which corresponds to sufficient work
having been performed, the difficulty of which must correspond
to the current target. Simply pruning 𝑘 blocks long is insufficient.
As such, the verifier must first gauge the difficulty of the network
prior to taking conclusive decisions. An analysis in the variable
difficulty model is beyond the scope of this work. The model re-
quired here would make use of the martingale arguments in the
variable difficulty backbone model [22]. The precise proofs would
need to articulate how the security parameter 𝑚 is related to the
epoch length. We leave such analysis for future work.
Deployment. Our scheme requires the introduction of interlink
pointers to block headers. Some blockchains have already adopted
such headers, namely ZCash [34], ERGO [15], Nimiq, WebDollar.
Ethereum has proposals to adopt such interlinking [11]. Notably,
Bitcoin, while possible [25], does not plan to include such a scheme.
However, it may be possible to introduce these changes using a vel-
vet fork [32, 45]. While velvet forking can enable (superblock and
FlyClient) NIPoPoW clients, it remains an open question whether
it can also be used to transition to light mining.
Comparison to other NIPoPoWs. Our protocol is a Non-Inter-
active Proof of Proof-of-Work, akin to superblock NIPoPoWs [31]
and FlyClient [10]. Our difference with FlyClient is the ability to
generate online proofs, proofs that can be updated as the block-
chain grows. Contrary to our construction, FlyClient requires the
sampling of past blocks to change as new blocks are added to the
tip of the blockchain. This is due to their use of the Fiat–Shamir
heuristic [19]. More concretely, a block that was not sampled in
the past may need to be sampled in the future. In our protocol, pre-
viously pruned blocks never need to be salvaged. As any block has
a potential for future samplability in FlyClient, no blocks can be
discarded, and mining cannot be logarithmic. The construction of
superblock NIPoPoWs [31] is similar to ours. However, their con-
struction is not both succinct and secure against all adversaries. In
particular, their certificates of badness allow an adversary to pump
the storage state required from logarithmic to linear with the ap-
propriate attack. We are thus the first to propose a NIPoPoW which