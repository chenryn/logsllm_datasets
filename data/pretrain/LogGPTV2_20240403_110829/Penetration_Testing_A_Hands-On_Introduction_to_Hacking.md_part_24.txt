using strong passwords is imperative for account security because all that
stands between the attacker and sensitive data may come down to a simple
string. Strong passwords are long, use characters from multiple complexity
classes, and are not based on a dictionary word.
The passwords we use in this book are deliberately terrible, but unfor-
tunately, many users don’t behave much better when it comes to passwords.
Organizations can force users to create strong passwords, but as passwords
become more complex, they become harder to remember. Users are likely
to leave a password that they can’t remember in a file on their computer, in
their smartphone, or even on a Post-it note, because it’s just easier to keep
of track them that way. Of course, passwords that can be discovered lying
around in plaintext undermine the security of using a strong password.
Another cardinal sin of good password management is using the same
password on many sites. In a worst-case scenario, the CEO’s weak password
for a compromised web forum might just be the very same one for his or
her corporate access to financial documents. Password reuse is something
to bear in mind while performing password attacks; you may find the same
passwords work on multiple systems and sites.
Password management presents a difficult problem for IT staff and will
likely continue to be a fruitful avenue for attackers unless or until password-
based authentication is phased out entirely in favor of another model.
online Password attacks
Just as we used automated scans to find vulnerabilities, we can use scripts to
automatically attempt to log in to services and find valid credentials. We’ll
use tools designed for automating online password attacks or guessing pass-
words until the server responds with a successful login. These tools use a
technique called brute forcing. Tools that use brute forcing try every possible
username and password combination, and given enough time, they will find
valid credentials.
The trouble with brute forcing is that as stronger passwords are used,
the time it takes to brute-force them moves from hours to years and even
beyond your natural lifetime. We can probably find working credentials
more easily by feeding educated guesses about the correct passwords into
an automated login tool. Dictionary words are easy to remember, so despite
the security warnings, many users incorporate them into passwords. Slightly
more security-conscious users might put some numbers at the end of their
password or maybe even an exclamation point.
198 Chapter 9
Wordlists
Before you can use a tool to guess passwords, you need a list of credentials
to try. If you don’t know the name of the user account you want to crack, or
you just want to crack as many accounts as possible, you can provide a user-
name list for the password-guessing tool to iterate through.
User Lists
When creating a user list, first try to determine the client’s username scheme.
For instance, if we’re trying to break into employee email accounts, figure
out the pattern the email addresses follow. Are they firstname.lastname, just a
first name, or something else?
You can look for good username candidates on lists of common first or
last names. Of course, the guesses will be even more likely to succeed if you
can find the names of your target’s actual employees. If a company uses a
first initial followed by a last name for the username scheme, and they have
an employee named John Smith, jsmith is likely a valid username. Listing 9-1
shows a very short sample user list. You’d probably want a larger list of users
in an actual engagement.
root@kali:~# cat userlist.txt
georgia
john
mom
james
Listing 9-1: Sample user list
Once you’ve created your list, save the sample usernames in a text file
in Kali Linux, as shown in Listing 9-1. You’ll use this list to perform online
password attacks in “Guessing Usernames and Passwords with Hydra” on
page 202.
Password Lists
In addition to a list of possible users, we’ll also need a password list, as
shown in Listing 9-2.
root@kali:~# cat passwordfile.txt
password
Password
password1
Password1
Password123
password123
Listing 9-2: Sample password list
Password Attacks 199
Like our username list, this password list is just a very short example
(and one that, hopefully, wouldn’t find the correct passwords for too many
accounts in the real world). On a real engagement, you should use a much
longer wordlist.
There are many good password lists available on the Internet. Good
places to look for wordlists include http://packetstormsecurity.com/Crackers/
wordlists/ and http://www.openwall.com/wordlists/. A few password lists are also
built into Kali Linux. For example, the /usr/share/wordlists directory con-
tains a file called rockyou.txt.gz. This is a compressed wordlist. If you unzip
the file with the gunzip Linux utility, you’ll have about 140 MB of possible
passwords, which should give you a pretty good start. Also, some of the
password-cracking tools in Kali come with sample wordlists. For example,
the John the Ripper tool (which we’ll use in “Offline Password Attacks” on
page 203) includes a wordlist at /usr/share/john/password.lst.
For better results, customize your wordlists for a particular target by
including additional words. You can make educated guesses based on infor-
mation you gather about employees online. Information about spouses,
children, pets, and hobbies may put you on the right track. For example,
if your target’s CEO is a huge Taylor Swift fan on social media, consider
adding keywords related to her albums, her music, or her boyfriends. If
your target’s password is TaylorSwift13!, you should be able to confirm it
using password guessing long before you have to run a whole precompiled
wordlist or a brute-force attempt. Another thing to keep in mind is the
language(s) used by your target. Many of your pentesting targets may be
global.
In addition to making educated guesses based on information you
gather while performing reconnaissance, a tool like the ceWL custom
wordlist generator will search a company website for words to add to
your wordlist. Listing 9-3 shows how you might use ceWL to create a
wordlist based on the contents of www.bulbsecurity.com.
root@kali:~# cewl --help
cewl 5.0 Robin Wood (PI:EMAIL) (www.digininja.org)
Usage: cewl [OPTION] ... URL
--snip--
--depth x, -d x: depth to spider to, default 2 u
--min_word_length, -m: minimum word length, default 3 v
--offsite, -o: let the spider visit other sites
--write, -w file: write the output to the file w
--ua, -u user-agent: useragent to send
--snip--
URL: The site to spider.
root@kali:~# cewl -w bulbwords.txt -d 1 -m 5 www.bulbsecurity.com x
Listing 9-3: Using ceWL to build custom wordlists
200 Chapter 9
The command ceWL --help lists ceWL’s usage instructions. Use the -d
(depth) option u to specify how many links ceWL should follow on the
target website. If you think that your target has a minimum password-size
requirement, you might specify a minimum word length to match with the
-m option v. Once you’ve made your choices, output ceWL’s results to a file
with the -w option w. For example, to search www.bulbsecurity.com to depth
1 with minimum word length of 5 characters and output the words found to
the file bulbwords.txt, you would use the command shown at x. The resulting
file would include all words found on the site that meet your specifications.
Another method for creating wordlists is producing a list of every pos-
sible combination of a given set of characters, or a list of every combination
of characters for a specified number of characters. The tool Crunch in Kali
will generate these character sets for you. Of course, the more possibilities,
the more disk space is required for storage. A very simple example of using
Crunch is shown in Listing 9-4.
root@kali:~# crunch 7 7 AB
Crunch will now generate the following amount of data: 1024 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 128
AAAAAAA
AAAAAAB
--snip--
Listing 9-4: Brute-forcing a keyspace with Crunch
This example generates a list of all the possible seven-character com-
binations of just the characters A and B. A more useful, but much, much
larger example would be entering crunch 7 8, which would generate a list
of all the possible combinations of characters for a string between seven
and eight characters in length, using the default Crunch character set of
lowercase letters. This technique is known as keyspace brute-forcing. While
it is not feasible to try every possible combination of characters for a pass-
word in the span of your natural life, it is possible to try specific subsets; for
instance, if you knew the client’s password policy requires passwords to be at
least seven characters long, trying all seven- and eight-character passwords
would probably result in cracking success—even among the rare users who
did not base their passwords on a dictionary word.
note Developing a solid wordlist or set of wordlists is a constantly evolving process. For the
exercises in this chapter, you can use the short sample wordlist we created in Listing 9-2,
but as you gain experience in the field, you’ll develop more complex lists that work
well on client engagements.
Now let’s see how to use our wordlist to guess passwords for services
running on our targets.
Password Attacks 201
Guessing Usernames and Passwords with Hydra
If you have a set of credentials that you’d like to try against a running service
that requires a login, you can input them manually one by one or use a tool
to automate the process. Hydra is an online password-guessing tool that can
be used to test usernames and passwords for running services. (Following
the tradition of naming security tools after the victims of Heracles’s labors,
Hydra is named for the mythical Greek serpent with many heads.) Listing 9-5
shows an example of using Hydra for online password guessing.
root@kali:~# hydra -L userlist.txt -P passwordfile.txt 192.168.20.10 pop3
Hydra v7.6 (c)2013 by van Hauser/THC & David Maciejak - for legal purposes only
Hydra (http://www.thc.org/thc-hydra) starting at 2015-01-12 15:29:26
[DATA] 16 tasks, 1 server, 24 login tries (l:4/p:6), ~1 try per task
[DATA] attacking service pop3 on port 110
[110][pop3] host: 192.168.20.10 login: georgia password: passwordu
[STATUS] attack finished for 192.168.20.10 (waiting for children to finish)
1 of 1 target successfuly completed, 1 valid password found
Hydra (http://www.thc.org/thc-hydra) finished at 2015-01-12 15:29:48
Listing 9-5: Using Hydra to guess POP3 usernames and passwords
Listing 9-5 shows how to use Hydra to guess usernames and passwords
by running through our username and password files to search for valid
POP3 credentials on our Windows XP target. This command uses the -L
flag to specify the username file, the -P for the password list file, and spec-
ifies the protocol pop3. Hydra finds that user georgia’s password is password at
u. (Shame on georgia for using such an insecure password!)
Sometimes you’ll know that a specific username exists on a server, and
you just need a valid password to go with it. For example, we used the SMTP
VRFY verb to find valid usernames on the SLMail server on the Windows XP
target in Chapter 6. As you can see in Listing 9-6, we can use the -l flag
instead of -L to specify one particular username. Knowing that, let’s look
for a valid password for user georgia on the pop3 server.
root@kali:~# hydra -l georgia -P passwordfile.txt 192.168.20.10 pop3
Hydra v7.6 (c)2013 by van Hauser/THC & David Maciejak - for legal purposes only
[DATA] 16 tasks, 1 server, 24 login tries (l:4/p:6), ~1 try per task
[DATA] attacking service pop3 on port 110
[110][pop3] host: 192.168.20.10 login: georgia password: passwordu
[STATUS] attack finished for 192.168.20.10 (waiting for children to finish)
1 of 1 target successfuly completed, 1 valid password found
Hydra (http://www.thc.org/thc-hydra) finished at 2015-01-07 20:22:23
Listing 9-6: Using a specific username with Hydra
Hydra found georgia’s password to be password u.
Now, in Listing 9-7, we’ll use our credentials to read georgia’s email.
root@kali:~# nc 192.168.20.10 pop3
+OK POP3 server xpvictim.com ready 
202 Chapter 9
USER georgia
+OK georgia welcome here
PASS password
+OK mailbox for georgia has 0 messages (0 octets)
Listing 9-7: Using Netcat to log in with guessed credentials
Specify the pop3 protocol, and provide the username and password
when prompted. (Unfortunately, there are no love letters in this particular
inbox.) Hydra can perform online password guessing against a range of ser-
vices. (See its manual page for a complete list.) For example, here we use
the credentials we found with Hydra to log in with Netcat.
Keep in mind that most services can be configured to lock out accounts
after a certain number of failed login attempts. There are few better ways
to get noticed by a client’s IT staff than suddenly locking out several user
accounts. Logins in rapid succession can also tip off firewalls and intrusion-
prevention systems, which will get your IP address blocked at the perimeter.
Slowing down and randomizing scans can help with this, but there is, of
course, a tradeoff: Slower scans will take longer to produce results.
One way to avoid having your login attempts noticed is to try to guess a
password before trying to log in, as you’ll learn in the next section.
offline Password attacks
Another way to crack passwords (without being discovered) is to get a copy
of the password hashes and attempt to reverse them back to plaintext pass-
words. This is easier said than done because hashes are designed to be the
product of a one-way hash function: Given an input, you can calculate the
output using the hash function, but given the output, there is no way to
reliably determine the input. Thus, if a hash is compromised, there should
be no way to calculate the plaintext password. We can, however, guess a
password, hash it with the one-way hash function, and compare the results
to the known hash. If the two hashes are the same, we’ve found the correct
password.
note As you’ll learn in “LM vs. NTLM Hashing Algorithms” on page 208, not all pass-
word hashing systems have stood the test of time. Some have been cracked and are no
longer considered secure. In these cases, regardless of the strength of the password cho-
sen, an attacker with access to the hashes will be able to recover the plaintext password
in a reasonable amount of time.
Of course, it’s even better if you can get access to passwords in plain-
text and save yourself the trouble of trying to reverse the cryptography, but
often the passwords you encounter will be hashed in some way. In this section
we’ll focus on finding and reversing password hashes. If you stumble upon a
program configuration file, database, or other file that stores passwords in
plaintext, all the better.
But before we can try to crack password hashes, we have to find them.
We all hope that the services that store our passwords do a good job of
Password Attacks 203
protecting them, but that’s never a given. It only takes one exploitable flaw or
a user who falls victim to a social-engineering attack (discussed in Chapter 11)
to bring down the whole house of cards. You’ll find plenty of password hashes
lying around sites like Pastebin, remnants from past security breaches.
In Chapter 8, we gained access to some password hashes on the Linux
and Windows XP targets. Having gained a Meterpreter session with system
privileges on the Windows XP system via the windows/smb/ms08_067_netapi
Metasploit module, we can use the hashdump Meterpreter command to print
the hashed Windows passwords, as shown in Listing 9-8.
meterpreter > hashdump
Administrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::
georgia:1003:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
HelpAssistant:1000:df40c521ef762bb7b9767e30ff112a3c:938ce7d211ea733373bcfc3e6fbb3641:::
secret:1004:e52cac67419a9a22664345140a852f61:58a478135a93ac3bf058a5ea0e8fdb71:::
SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:bc48640a0fcb55c6ba1c9955080a52a8:::
Listing 9-8: Dumping password hashes in Meterpreter
Save the output of the hashdump to a file called xphashes.txt, which we
will use in “John the Ripper” on page 210.
In Chapter 8 we also downloaded backups of the SAM and SYSTEM
hives using the local file inclusion issue in Zervit 0.4 on the Windows XP
system. We used this same issue to download the configuration file for
the FileZilla FTP server, which contained passwords hashed with the MD5
algorithm. On the Linux target, the Vsftpd smiley-face backdoor gave us
root privileges, and thus we can access to the file /etc/shadow, which stores
Linux password hashes. We saved the password for user georgia to the file
linuxpasswords.txt.
Recovering Password Hashes from a Windows SAM File
The SAM file stores hashed Windows passwords. Though we were able to use
Meterpreter to dump the password hashes from the Windows XP system (as
shown previously), sometimes you’ll be able to get only the SAM file.