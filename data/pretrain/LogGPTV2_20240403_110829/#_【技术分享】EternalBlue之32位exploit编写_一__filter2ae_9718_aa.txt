# 【技术分享】EternalBlue之32位exploit编写(一)
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[东](http://bobao.360.cn/member/contribute?uid=2554610746)
预估稿费：400RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
距离shadowbrokers团队放出NSA的这批黑客工具也有两月之久了,其中的一个名叫"永恒之蓝"的漏洞模块被疯狂地在野外利用,相信网友们如果没有经历过WannaCry
勒索软件的淫威,重视度可能也远不如之前刚放出来时,任何人都可以用着fuzzbunch这个工具集成模块去攻击别人,fb.py这个集合了他子目录下的一些exploit被热心网友们玩的不亦乐乎的同时,地下的自由职业者也忙的不可开交各类变种勒索软件不断涌现,当然今天主角也不是勒索软件,今天我们着重从协议上分析一下
**eternalblue的攻击的数据流** ，然后试着重放这些数据。
**  
**
**实验环境**
网络环境:局域网
攻击ip:192.168.157.129(win7_x86)
靶机ip:192.168.157.131(win7_x86)
工具:NSA的fb.py、wireshark、python、hex editor、
**实验步骤**
**第一步:使用fb.py中的eternalblue模块走一遍正常攻击流程 开wireshark把攻击过程的数据截获  
**
接着我们就轻车熟路的打开了shadowbrokers的fb.py 去攻击192.168.157.129 攻击过程我就不阐述了 网上很多参考
攻击完毕回头就看下wireshark捕捉到的SMB数据包
这里用到的Eternalblue模块这个模块 在这个模块执行之前是没有数据的,执行之后wireshark捕捉到了数据
这个说白了就是个利用Eternalblue利用漏洞安装后门的一个过程,接着重新捕获数据
我们使用Doublepulsar这个模块,这模块功能定义上类似于meterprete而前面的则属于exploit模块吧
msfvenom -p windows/exec CMD="calc.exe" -f dll >
/test.dll这样生成就可以,上面我用Doublepuls注入的dll是用msf生的 注入的进程我选择了资源管理器的
这次的数据包明显比上一个少了很多。接着我们着重分析这两个流内的数据。
**第二步:分析fb.py动作产生的数据流**
我们先来看一下SMB协议的定义
    // 8 unsigned bits
    typedef unsigned short USHORT;        // 16 unsigned bits
    typedef unsigned long ULONG;          // 32 unsigned bits
    typedef struct {
       ULONG LowPart;
       LONG HighPart;
    } LARGE_INTEGER;                      // 64 bits of data
    typedef struct  {
       UCHAR Protocol[4];                // Contains 0xFF,'SMB'
       UCHAR Command;                    // Command code
       union {
           struct {
               UCHAR ErrorClass;         // Error class
               UCHAR Reserved;           // Reserved for future use
               USHORT Error;             // Error code
           } DosError;
           ULONG Status;                 // 32-bit error code
       } Status;
       UCHAR Flags;                      // Flags
       USHORT Flags2;                    // More flags
       union {
           USHORT Pad[6];                // Ensure section is 12 by
           struct {
               USHORT PidHigh;          // High Part of PID
               UCHAR SecuritySignature[8];   // reserved for MAC
          } Extra;
       };
       USHORT Tid;                       // Tree identifier
       USHORT Pid;                       // Caller’s process ID, opaque for
    client use