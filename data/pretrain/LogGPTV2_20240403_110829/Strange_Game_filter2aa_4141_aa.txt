# Strange Game
Category: Misc., 100 Points
## Description
> It's just winning a simple game.
> 
> What could go wrong?
## Solution
Let's connect to the attached service:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Strange_Game]
└─$ nc strange-game.csa-challenge.com 4444
==================
   Strange Game
==================
• We take turns picking numbers from 1 to 9.
• The same number can't be chosen twice.
• First player to hold 3 numbers which, when added, make 15, wins.
• If all numbers are exhausted without a winner, the game is a tie.
• We will play 15 rounds of this game, alternating who goes first.
• Win or tie all 15 rounds and I'll give you the flag.
Press any key...
```
Sounds simple enough. Let's try to play:
```
Round 1!
==================================================
New game
I'll go first.
==================================================
Available moves: 1 2 3 4 5 6 7 8 9
Past moves:
        Player One: None
        Player Two: None
Game still in progress
I choose to play 4.
==================================================
==================================================
Available moves: 1 2 3 5 6 7 8 9
Past moves:
        Player One: 4
        Player Two: None
Game still in progress
Choose your move: 6
==================================================
==================================================
Available moves: 1 2 3 5 7 8 9
Past moves:
        Player One: 4
        Player Two: 6
Game still in progress
I choose to play 8.
==================================================
==================================================
Available moves: 1 2 3 5 7 9
Past moves:
        Player One: 8 4
        Player Two: 6
Game still in progress
Choose your move: 3
==================================================
==================================================
Available moves: 1 2 5 7 9
Past moves:
        Player One: 8 4
        Player Two: 3 6
Game still in progress
I choose to play 2.
==================================================
==================================================
Available moves: 1 5 9 7
Past moves:
        Player One: 8 2 4
        Player Two: 3 6
Game still in progress
Choose your move: 5
==================================================
==================================================
Available moves: 1 9 7
Past moves:
        Player One: 8 2 4
        Player Two: 3 5 6
Game still in progress
I choose to play 9.
==================================================
==================================================
Available moves: None
Past moves:
        Player One: 8 9 2 4
        Player Two: 3 5 6
Winner: Player One
You lose!
Better luck next time!
```
Well, the computer seems pretty good at this. Doesn't seem very fair though, it can efficiently review all current and future moves to choose the optimal one. We should do the same.
We'll start by implementing a basic representation of the game, in a file called `number_scrabble.py` (since from a quick search, that's what the game is called).
```python
__all__ = ['NumberScrabble', 'Players']
from enum import Enum
from math import inf
from collections import namedtuple
from itertools import combinations
from functools import reduce
from typing import List, Tuple
import operator
TARGET_SCORE = 15
VALID_MOVES = range(1, 10)
TUPLE_LENGTH = 3
OR_BITS         = lambda bit_nums: reduce(operator.or_, (1  None:
        if not IS_BIT_SET(self._available_moves, move):
            raise ValueError(f"Move {move} not available")
        self.moves[player] = SET_BIT(self.moves[player], move)
    def undo_move(self, player: Players, move: int) -> None:
        if not IS_BIT_SET(self.moves[player], move):
            raise ValueError(f"Move {move} never performed by player {player}")
        self.moves[player] = UNSET_BIT(self.moves[player], move)
    @property
    def _available_moves(self) -> int:
        return (~(self.moves[Players.MY_PLAYER] | self.moves[Players.OTHER_PLAYER])) & ALL_MOVES_BITMASK
    @property
    def available_moves(self) -> List[int]:
        return GET_BITS_SET(self._available_moves)
    def __str__(self) -> str:
        return f"NumberScrabble(My moves = {GET_BITS_SET(self.moves[Players.MY_PLAYER])}, " \
               f"Other moves = {GET_BITS_SET(self.moves[Players.OTHER_PLAYER])}, " \
               f"Available moves: {GET_BITS_SET(self._available_moves)})"
    def __repr__(self) -> str:
        return str(self)
    def player_wins(self, player: Players) -> bool:
        return any( ((self.moves[player] & winning_state) == winning_state) for winning_state in WINNING_STATES_BITMASK)
    def game_over(self) -> bool:
        return any(self.player_wins(player) for player in Players) or self._available_moves == 0
    def get_best_move(self) -> int:
        # TODO: Implement
```
This implementation uses bitmasks under the hood to represent the game state. Each player has an integer representing the moves they've made by setting the matching bit. For example, if we choose the number `1`, the value will be `0b0000000010`, and if we later choose the number `3`, the value will turn to `0b0000001010`.
We precalculate the different winning states once using:
```python
>>> WINNING_STATES_BITMASK = [OR_BITS(t) for t in combinations(VALID_MOVES, TUPLE_LENGTH) if sum(t) == TARGET_SCORE]
>>> [bin(x) for x in WINNING_STATES_BITMASK]
['0b1000100010', '0b101000010', '0b1000010100', '0b100100100', '0b11000100', '0b100011000', '0b10101000', '0b1110000']
>>> [GET_BITS_SET(x) for x in WINNING_STATES_BITMASK]
[[1, 5, 9], [1, 6, 8], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 4, 8], [3, 5, 7], [4, 5, 6]]
```
This means that checking if a player won can simply be done using basic bitwise operations - we just need to check if the bits set in the player's moves are a match with one of the winning states.
Notice that we've left a placeholder for `get_best_move` - this is how we'll decide what's the optimal move we should make. We'll implement that soon enough.
At this point we can go on and implement the wrapping logic for our game representation. This is the logic that is responsible for interacting with the challenge server on one hand and with our game representation on the other hand.
```python
from pwn import *
from number_scrabble import *
NUM_ROUNDS = 15
context.newline = b'\r\n'
r = remote("strange-game.csa-challenge.com", 4444)
for round in range(NUM_ROUNDS):
    r.sendafter(b"Press any key...", b"\n")
    r.recvuntil(b"New game\r\n")
    current_player = {"I'll go first.": Players.OTHER_PLAYER, "You go first.": Players.MY_PLAYER}[r.recvlineS(keepends = False)]
    log.info(f"New game (round #{round + 1}), first player: {current_player.name}")
    ns = NumberScrabble()
    done = False
    with log.progress('Playing...') as p:
        while True: