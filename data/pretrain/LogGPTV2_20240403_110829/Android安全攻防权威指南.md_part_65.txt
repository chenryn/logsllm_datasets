e5933004
1dr
r3,(r3, #4]
vm_pgoff fix,smem_start;
1370
len = PAGE_ALIGN( (start & ~PAGR_MASK) + Info->fix.smem_1en) ;
1383
if ((vma->vm_end - vma->vm_start + off) > len)
1384
return -EINVAL}
1391
if (io_remap_pfn_range (vma, vna->vm_start, off >> PAGE_SHIPT,
1.392
vma->vn_end - vna>vm_start, vma->vm_page_prot1)
vma参数来自于调用fb_mmap（mmap_region中）之前的mmap系统调用，因此可以完全
控制这个结构的所有成员。off变量是直接传人mmap的相对于基址的偏移，但是第1369行赋
值的 start是framebuffer 自身的属性。在第1370行，1en是start 的页对齐地址和 frame buffer
区城长度之和。在第1383行，可以看到这个漏润产生的原因。代码将你控制的vm_end和
vm_start相减，来计算所请求映射的长度，然后把得到的结果加上off，判断是否超过len。
如果指定off为一个很大的值，求和的结果会溢出并通过检查。最终，一大片内核内存区域会
被重新映射到用户的虚拟内存空间。
Dan利用该漏洞的方法分为两步。第一步，通过尝试分配越来越大的内存来检测1en的值。
他将offset设为0，然后以每次一页的速度增加size。一且要映射的内存大小超过1en，fm_mmap
函数就会在第1384行返回错误。检测到这个错误后，Dan记录下这个值并在下一步使用。第二
步，在触发整数溢出的同时，尝试尽可能分配最大的内存。他从一个比较保守的最大值开始，然
后逐渐减小。在每次尝试之前，使用之前检测到的1en来计算出可以触发整数溢出的off值。
mmap调用成功后，当前进程就拥有了内核大片内存区域的读写权限。
有很多方法可以利用内核内存的任意读写来提权。一种是直接重写内核代码。例如，可以修
改setuid系统调用，永远允许将userID设置为root。另一种是通过修改内核内存中的各种bit，
在内核空间直接执行任意代码。这种方法在前面利用sock_diag漏洞时采用过。还有一种方法
是Dan在Motochopper中采用的：找到当前用户的credentials结构体并直接修改。这将当前进程
的用户和组ID设置为0，从面获得root权限。读写内核内存是非常强大的能力。关于其他利用
方法，则交给读者进行思考。
---
## Page 295
10.5内核漏洞利用
279
3. Levitator
2011年11月，Jon Oberheide和Jon Larimer 发布了个名为 1evitator.c 的利用程序。在
当时，这是一个高级利用，因为它用到了两个相关的内核漏洞：一个信息泄露和一个内存破坏。
Levitator 针对于使用 PowerVR SGX 3D 图形芯片的 Android 设备,例如 Nexus S 和 Motorola Droid,
本节展示把Levitator移植在Motorola Droid上运行的整个过程，解释了在分析和利用Linux内核
漏洞当中用到的一些其他技术。
·利用程序的原理
因为利用程序的源代码已经发布，所以可以在网上获取一份进行阅读。文件的开头是一大块
注释，包含作者名称、两个CVE编号和描述、编译命令、样例输出、测试设备以及修补信息。
接下来是一些常量和一个结构体，用来与PowerVR通讯。然后是fake_disk_ro_show函数，实
现了一个典型的内核空间载荷。之后的代码定义了两个数据结构和全局变量fake_dev_attr_ro
注意在编译和运行利用程序之前阅读和理解源代码非常重要，否则很可能会对系统造成不可
修复的伤害。
利用程序代码其余的部分包含3个函数：get_symbol、do_ioct1和main。get_symbol
函数在/proc/kallsyms搜索符号名并返回对应地址或0。do_ioct1函数是利用程序的“心脏”，
用于设置参数并执行存在漏洞的IO控制操作（ioct1）。
main函数则是利用程序的“大脑”.实现了漏洞利用的逻辑。它首先搜索3个符号：commit
creds、prepare_kernel_cred和dev_attr_ro。前两个由内核空间的载荷函数使用，第三个
随后讨论。接下来，利用程序打开驱动存在漏洞的设备并首次执行do_ioct1函数，传人out和
out_size参数来把内核内存泄露到dump缓冲区中。然后在缓冲区中搜索指向dev_attr_ro对
象的指针，并全部改成指向fake_dev_attr_ro的指针，其中包含指向内核空间载荷的指针。接
下来再次调用do_ioctl，指定in和in_size参数并把修改过的dump缓冲区写回内核内存。
扫描/sys/block目录中的条目，尝试打开和读取ro条目。如果ro条目与修改后的对象相匹配，内
核就会执行fake_disk_ro_show，读到的数据是Owned。本例中，利用程序检测到利用成功，
然后停止处理/sys/block中的条目。最后，利用程序恢复之前修改的指针，为用户打开一个rootshell。
·运行已有的利用程序
阅读利用程序源代码之后可以知道，在目标设备上编译和运行它很安全。执行命令后结果如下：
$ ./levitator
[+] resolved symbo] commit_creds to 0xc0078ef0
[+]  looking for symbols..-
[+] reso1ved symbol prepare_kernel_cred to 0xc0078d64
[1 dev_attr_ro symbol not found, aborting
利用程序没有找到dev_attr_ro符号，但是这个错误并不代表设备不存在这个漏洞。编辑
利用程序，注释掉最后一次调用get_symbol（第181~187行）。给dev_attr_ro赋一个不太
可能在内核内存中存在的值，如Oxdeadbeef。修改后重新编译、上传、运行，输出如下：
---
## Page 296
280
第10章攻击内核
[+]  lookingfor 8ymbols...
$ ./nodevattr
[+]
resolved symbo1 prepare_kernel_cred to 0xc0078d64
resolved symbol connit_creds to 0xc0078ef0
[+]
[+]
dumping kernel memory...
opening prvsrvkm device...
[+]
[+]
searching kmem for dev_attr_ro pointers...
[+] poisoned o dev_attr_ro pointers with fake_dev_attr_ro!
[]  could not find any dev_attr_ro ptrs, aborting!
理解了利用程序的原理，就可以知道ioct1操作成功了。这表明信息泄露正在按照预期工
作，并且可以确定该设备存在漏洞。
然而，并没有修复这个错误的简单方法。利用程序非常依赖于找到dev_attr_ro内核符号，
面这在设备的/proc/kallsyms上是不可能的。需要耐心、创造力以及对漏润的深人理解，才能让这
个利用程序在设备上正常工作。
·获得源代码
遗憾的是，关于这两个漏洞能找到的所有公开信息只有这个利用程序和2个CVE。为了深
人理解漏洞，需要获得目标设备的内核源代码。首先在设备上查询版本信息：
$ getprop ro.bui1d.fingerprint
verizon/voles/sholes/sholes:2.2 .3/FRK76/185902:u8er/release-key8
$ cat /proc/veraion
version 4.4.0 (GCC) 1 #1 PREEMPT Tue Aug 10 16:07:07 PDr 2010
从这个设备的编译指纹信息来看，它运行的是最新的固件版本FRK76。好消息是，这个版
本的内核是谷歌自己编译的，面且版本号字符串包含了一个commit哈希68ecef5；坏消息是，谷
歌维护的OMAP内核源代码已经不包含带有这个commit的分支了。
使用搜索引擎来寻找这个commit哈希可以找到一些结果，其中几个包含这个commit的完整
哈希。经过仔细寻找，会在Gitorious 上发现相关代码：https:/gitorious.org/android_kermel_omap/
android_kemel_omap/。复制这个仓库并checkout哈希对应的commit，就可以进一步分析这个漏
润了。
·判断原因
获得正确的源代码后，使用gitgrep命令可以找到存在漏洞的代码。搜索设备名称/dev/
pvrsrvkm可以找到一个文件操作结构，进面找到句柄函数 PVRSRV_BridgeDispatchKM。仔细
阅读后可以发现，漏洞并不直接在这个函数中，面是在它调用的BridgeDispatchKM函数中。
通过 git grep 的方法，在 drivers/gpu/pvr/bridged_pvr_bridge.c 的第 3282 行可以找到
BridgeDispatchKM函数。这个函数非常短，开头部分不太关键，但是后面几块代码看起来很
可疑。相关代码如下所示：
3283
PVRSRV_BRIDGB_PACKAGE * psBridgePackageKK)
3284 (
3351
+