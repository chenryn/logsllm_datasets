收到 **客户端问候** 之后服务器必须发送 **服务器问候**
信息，服务器会检查指定诸如TLS版本和算法的客户端问候的条件，如果服务器接受并支持所有条件，它将发送其证书以及其他详细信息，否则，服务器将发送握手失败消息。  
图中，我们可以看到服务器响应0x0303表示服务器同意使用TLS 1.2，我们来检查一下 **服务器问候** 中的记录。
### 服务器接收Hello报文的内容
服务器问候消息包含以下信息。  
加下来我们会在这里讨论其中一些重要的参数。
### 服务器版本
如果客户端可以支持，则服务器将选择客户端指定的TLS版本，这里选择了TLS 1.2
### 服务器的随机数
类似于客户端随机，服务器随机也占32字节，前4个字节表示服务器的Unix纪元时间，后面加上28字节的随机数。客户端和服务器随机将用来创建加密密钥，我待会儿会解释。
### 密码套件
还记得我们已经将发送支持的密码套件发送到客户端问候中的github.com吗？Github从名单中选出了第一个，也就是：
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
### 会话id(Session id)
服务器将约定的Session参数存储在TLS缓存中，并生成与其对应的Session id。它与Server
Hello一起发送到客户端。客户端可以写入约定的参数到此Session id，并给定到期时间。客户端将在Client
Hello中包含此id。如果客户端在此到期时间之前再次连接到服务器，则服务器可以检查与Session
id对应的缓存参数，并重用它们而无需完全握手。这非常有用，因为服务器和客户端都可以节省大量的计算成本。
在涉及亚马逊和谷歌等流量巨大的应用程序时，这种方法存在缺点。每天都有数百万人连接到服务器，服务器必须使用Session密钥保留所有Session参数的TLS缓存。这是一个巨大的开销。为了解决之前介绍过的Session
Tickets的问题, 在这里，客户端可以在client hello中指定它是否支持Session Ticket。然后，服务器将创建一个
**新的会话票证(Session Ticket)**
，并使用只有服务器知道的经过私钥加密的Session参数。它将存储在客户端上，因此所有Session数据仅存储在客户端计算机上，但Ticket仍然是安全的，因为该密钥只有服务器知道。
此数据可以作为名为Session Ticket的扩展包含在Client
Hello中。在我们的例子中，此参数为空，因为这是第一次连接到github.com或前一个Session的浏览器已过期。
### 压缩数据
如果支持，服务器将同意客户端的首选压缩方法。在这里，您可以看到服务器响应为空响应，则意味着不需要压缩。
服务器不在ServerHello消息中发送任何证书;
它会在正确命名的[证书](https://tools.ietf.org/html/rfc5246#section-7.4.2)消息中发送证书。
### 服务器证书的信息
在我们的例子中，证书消息长度为3080字节。毫无疑问，这是包含所有信息的服务器证书。服务器按[信任链](https://www.wst.space/ssl-part-3-certificate-authority/)的顺序发送完整的证书列表。该链中的第一个是服务器证书，接着是颁发服务器证书的intermediate CA
的证书,然后是下一个intermediate CA 的证书......直到Root CA的证书。服务器不可以发送Root
CA证书，因为在大多数情况下，浏览器可以从任何intermediate CA 识别Root CA。
在我们的例子中，您可以看到第一个证书是github.com，第二个证书是中间件Digicert SHA2扩展验证Server CA。 检查下图中的`id-at-commonName`参数。  
让我们分析证书的内容，看看浏览器如何验证它。
### 证书的内容
证书被发送到浏览器，因此我们可以在访问github.com时查看Github的证书。来自Firefox的CA证书内容:  
可以通过单击" **详细信息** "选项卡查看github的intermediate CA 和Root CA.  
让我们了解这些领域是什么以及它们的用途。
### 版本和序列号
版本表示使用的是哪个版本的[X.509](https://en.wikipedia.org/wiki/X.509)标准。X.509是用于定义公钥证书格式的标准。[X.509](https://en.wikipedia.org/wiki/X.509)有3个版本，github使用最新版本version
3。
从RFC
5280开始，CA为每个证书分配的序列号必须是正整数。因此对于每个发布CA证书，它必须是唯一的（即颁发者名称和序列号标识唯一的证书）。所以，CA必须强制serialNumber为非负整数。
### 证书的签名算法与值
浏览器需要知道签名算法以验证签名。如果使用的是RSA签名，则需要相同的算法来验证签名。对于Github，使用的是PKCS＃1
SHA-256和RSA加密，即SHA-256用于生成散列，RSA用于签名。
从我们[上一篇文章](https://xz.aliyun.com/t/2530)中，证书数据使用SHA-256算法进行哈希处理，并使用RSA加密过Github的私钥对此哈希进行签名。
### 颁布机构
此字段包含颁发证书的颁发机构的详细信息。Github的证书由Digicert的intermediate CA 颁发。
### 合法性
该字段有两个值`Not Before` 和`Not After` 。如果当前日期时间不在这些值之间，则证书无效。浏览器就不会信任该证书。
### 子公钥信息(Subject Public Key Info)
该字段携带公钥和用于生成公钥的算法。此密钥用于交换密钥，我们将在稍后讨论。
### 指纹
浏览器生成了两个指纹SHA 1和SHA-256，而且不会发送到服务器。这些指纹分别是通过SHA
1和SHA-256函数散列DER格式的证书产生的。我们可以通过将证书下载到我们的机器并应用哈希函数来验证这一点。
单击 **详细信息** 选项卡左下角的“ **导出** ” 按钮以下载证书，保存为.crt 扩展名，并在终端上运行以下命令以生成证书的指纹。
    $ openssl x509 -noout -fingerprint -sha256 -inform pem -in [certificate-file.crt]
    $ openssl x509 -noout -fingerprint -sha1 -inform pem -in [certificate-file.crt]
这应该产生与您在浏览器中看到的结果相同的结果。这些值不是证书的一部分，而是根据证书计算出来的。Root
CA证书的指纹将在浏览器中进行硬编码，因此可以轻松地进行交叉验证。除此之外，这些指纹主要用于识别和组织证书。不要将[Signature与指纹混淆](https://security.stackexchange.com/questions/46230/digital-certificate-signature-and-fingerprint)。
我们在这里讨论的证书信息是关于github.com的服务器证书。Github的intermediate CA
证书也将在同一请求中发送给客户，所有上述字段也适用于该证书。您可以通过转到详细信息选项卡并单击intermediate CA 来检查，如下所示。
## 服务器端密钥交换
随后是 **Server Hello** 和证书消息(Certificate message)， **服务器密钥交换(Server Key
Exchange)**
是可选的。仅当服务器提供的证书不足以允许客户端交换预主密钥时，才会发送此消息。让我们看看为什么github.com必须发送服务器密钥交换消息。
我们可以看到github.com首选Session的密码套件是`TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`。这意味着双方使用`Elliptic
Curve Diffie Hellman`算法来交换密钥。在[Diffie-Hellman](https://www.wst.space/ssl-part-2-diffie-hellman-key-exchange/)中，客户端无法自行计算预主密钥;
双方都有助于计算它，因此客户端需要从服务器获取Diffie-Hellman公钥。（不要对"Pre-Master
Secret"一词感到困惑，我们将在下面深入讨论它。）当使用`Elliptic Curve Diffie-Hellman`时，该公钥不在证书中。因此，服务器必须在单独的消息中向客户端发送其DH公钥，以便客户端可以计算预主密钥。这可以在上面的图像中看到。请注意，此密钥交换也由签名保护。
服务器密钥交换完成后，服务器将发送Server Hello Done 消息。客户端将开始计算Pre-Master Secret。我们来看看如何。
### 如何计算Pre-Master Secret
Pre-Master
Secret计算取决于商定的密钥交换算法的类型。当使用RSA进行密钥交换时，从客户端（即浏览器）计算[预主密钥](https://security.stackexchange.com/questions/63971/how-is-the-premaster-secret-used-in-tls-generated)，客户端通过连接协议版本（2个字节）和客户端随机生成的一些字节（46个字节）来生成48字节的预主密钥。客户端从加密安全的