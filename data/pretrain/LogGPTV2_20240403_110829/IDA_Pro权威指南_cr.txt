➊  .shrink:0041D0C5 pCONTEXT            = dword ptr  0Ch  
  .shrink:0041D0C5  
➍  .shrink:0041D0C5        mov     eax, [esp+pEXCEPTION_RECORD]  
➋  .shrink:0041D0C9        mov     ecx, [esp+pCONTEXT]  ; Address of SEH CONTEXT  
➌  .shrink:0041D0CD        inc     [ecx+CONTEXT._Eip]   ; Modify saved eip  
➎  .shrink:0041D0D3        mov     eax, [eax]           ; Obtain exception type  
➏  .shrink:0041D0D5        cmp     eax, EXCEPTION_INT_DIVIDE_BY_ZERO  
  .shrink:0041D0DA        jnz     short loc_41D100  
  .shrink:0041D0DC        inc     [ecx+CONTEXT._Eip]   ; Modify eip again  
➐  .shrink:0041D0E2        xor     eax, eax             ; Zero x86 debug registers  
  .shrink:0041D0E4        and     [ecx+CONTEXT.Dr0], eax  
  .shrink:0041D0E7        and     [ecx+CONTEXT.Dr1], eax  
  .shrink:0041D0EA        and     [ecx+CONTEXT.Dr2], eax  
  .shrink:0041D0ED        and     [ecx+CONTEXT.Dr3], eax  
  .shrink:0041D0F0        and     [ecx+CONTEXT.Dr6], 0FFFF0FF0h  
  .shrink:0041D0F7        and     [ecx+CONTEXT.Dr7], 0DC00h  
  .shrink:0041D0FE        jmp     short locret_41D160
传递给异常处理函数的第三个参数（➊ ）是一个指向一个Windows CONTEXT
 结构体（在Windows API 头文件winnt.h中定义）的指针。CONTEXT
 结构体使用异常发生时所有 CPU 寄存器的内容进行初始化。一个异常处理程序有机会检查和修改（如有必要）CONTEXT
 结构体的内容。如果异常处理程序认为它已经更正了导致异常的问题，它可以通知操作系统，允许导致异常的线程继续执行。这时，操作系统会从提供给异常处理程序的 CONTEXT
 结构体中，为这个线程重新加载CPU 寄存器，线程将恢复执行，就好像什么也没有发生一样。
在上面的例子中，异常处理程序首先访问线程的CONTEXT
 结构体（➋），以递增指令指针（➌），从而移动到生成异常的指令之外。接下来，异常的类型代码［EXCEPTION_RECORD
 ➍ 中的一个字段］被检索（➎），以确定异常的性质。这部分的异常处理程序通过将所有 x86 硬件调试寄存器6
 清零（➐），处理前一个例子中生成的“除以零”错误（➏）。如果不分析剩余的 tElock 代码，你不能立即了解清零调试寄存器的原因。在这个例子中，tElock 正清除前一个操作的值，在前一个操作中，它使用调试寄存器设置了 4 个断点以及我们前面看到的 int 3
 。除了模糊程序的真正控制流外，清除或修改 x86 调试寄存器可能会对应用软件调试器（如 OllyDbg）或 IDA 的内部调试器造成重大影响。这类反调试技巧将在 21.2 节中讨论。
6. 在x86 中，调试寄存器0～7（Dr0～Dr7）用于控制硬件辅助断点的使用。Dr0～Dr3 用于指定断点地址，而Dr6和Dr7 则用于启用和禁用特定的硬件断点。
操作码模糊
到目前为止，我们讨论的技巧可以形成（实际上，旨在形成）一种障碍，以防止他人了解程序的控制流。但是，还没有一种技巧能够阻止你查看你所分析的程序的正确反汇编代码清单。去同步会在很大程度上影响反汇编代码清单，但是，通过重新格式化反汇编代码清单，使其反映正确的指令流，你就可以轻易破坏这种技巧。
阻止正确反汇编的一种更加有效的方法是在创建可执行文件时编码或加密具体的指令。模糊指令对CPU没有用处，在被CPU提取并执行之前，它们必须经过去模糊处理，以恢复到原始状态。因此，程序必须至少有一个部分没有被加密，以充当启动例程。在模糊程序中，启动例程通常负责对一些或所有的剩余程序进行去模糊处理。模糊过程的一般概况如图21-1所示。
图21-1 常规模糊过程
如图21-1 所示，模糊过程的输入是用户出于某种原因希望进行模糊的程序。许多时候，输入的程序使用标准编程语言和构建工具（编辑器、编译器等）编写，并且很少考虑到将要进行模糊处理。生成的可执行文件被输入到一个模糊实用工具中，后者将原始程序转换成一个功能相同但经过模糊的二进制文件。模糊实用工具负责模糊原始程序的代码和数据节，并增加另一段代码（一个去模糊存根），在运行时访问原始功能之前，这个存根负责对代码和数据进行去模糊处理。模糊实用工具还修改程序的头部，将程序的入口点重定向到去模糊存根，确保从去模糊过程开始执行。在去模糊后，执行通常会进入原始程序的入口点，这时，程序将开始执行，就好像它根本没有被模糊处理一样。
用于创建模糊二进制文件的模糊实用工具不同，这个过于简化的模糊过程也明显不同。可用于处理模糊过程的实用工具日益增多。这类实用工具提供的功能包括：压缩、反—反汇编和反调试技巧。相关程序包括：UPX7
 （压缩器，也用于 ELF ）、ASPack8
 （压缩器）、ASProtect（ASPack的制造者开发的反逆向工程工具）、用于Windows PE文件的tElock9
 （压缩和反逆向工程工具）、用于Linux ELF 二进制文件的 Burneye10
 （加密）和 Shiva11
 （加密和反调试）。模糊实用工具的功能已经取得很大的进步，一些反逆向工程工具，如 WinLicense12
 ，能够为整个构建过程提供更紧密的集成，允许程序员在构建过程的每一个步骤（从源代码到已编译二进制文件的后处理阶段）集成反逆向工程功能。
7. 参见http://upx.sourceforge.net/
 。
8. 参见http://www.aspack.com/
 。
9. 参见http://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/Telock.shtml
 。
10. 参见http://packetstormsecurity.org/groups/teso/indexdate.html
 。
11. 参见http://cansecwest.com/core03/shiva.ppt
 （工具：http://www.securiteam.com/tools/5XP041FA0U.html
 ）。
12. 参见http://www.oreans.com/winlicense.php
 。
模糊程序领域的最近发展涉及使用虚拟机执行引擎来包装原始可执行文件。根据虚拟化模糊器的复杂程度，原始的机器代码可能永远不会直接执行，而是由面向字节码的虚拟机来解释。非常复杂的虚拟化模糊器能够在每次运行时生成唯一的虚拟机实例，因而很难创建多功能的去模糊算法来破解它们。VMProtect13
 就是一个虚拟化模糊器。VMProtect 用于模糊处理Clampi14
 木马。
13. 参见http://www.vmpsoft.com/
 。
14. 参见http://www.symantec.com/connect/blogs/inside-jaws-trojanclampi
 。
和任何侵犯性技术一样，人们也已经开发出一些防范措施来对抗许多反逆向工程工具。多数情况下，这类工具的目的是找到原始的、不受保护的可执行文件（或者一个合适的摹本），然后使用反汇编器和调试器等更加传统的工具对它进行分析。有一个专用于对 Windows 可执行文件进行去模糊处理的工具，叫做 QuickUnpack15
 。和其他许多自动化的解压程序一样，QuickUnpack以调试器的方式运行，并允许一个模糊的二进制文件执行，直到它的去模糊阶段，然后从内存捕获进程映像。需要小心的是，这类工具可用于运行潜在的恶意程序，希望在这些程序解压或去模糊后，但又在它们有机会执行任何恶意行为之前，阻止这些程序执行。因此，你应该始终在类似沙盒的环境中执行这样的程序。
15. 参见 http://qunpack.ahteam.org/wp2/
 （俄罗斯）或 http://www.woodmann.com/collaborative/tools/index.php/Quick_Unpack
 。
使用一个纯粹的静态分析环境分析模糊代码是一个充满挑战的任务。由于不能执行去模糊存根，在开始反汇编模糊代码之前，必须采取某种方法解压或解密二进制文件被模糊处理的部分。一个已经使用 UPX 压缩程序打包的可执行文件的布局如图 21-2 所示。在这个文件的地址空间中，IDA 唯一能够识别的部分是处的窄条，它恰巧是 UPX 解压缩存根。
图21-2 一个使用 UPX打包的二进制文件的IDA 导航带
分析地址空间的内容，可以发现➊左边的空白空间，以及➊和➋之间区域内明显的随机数据。这些随机数据是 UPX 压缩过程的结果。解压缩存根的作用是在最后将控制权转交给解压代码之前，将随机数据解压到导航带左边的空白区域。注意，导航栏的这种少见的外观是一种潜在的暗示，说明这个二进制文件已经以某种形式被模糊处理。实际上，使用 IDA 查看已被模糊处理的二进制文件时，通常你会得到许多暗示。说明二进制文件被模糊处理的一些可能的暗示如下所示。
很少有代码在导航带中突出显示。
“Functions ”（函数）窗口中列出的函数非常少，通常仅显示 start
 函数。
“Imports”（导入）窗口中列出的导入函数非常少。
“Strings ”（字符串）窗口（默认情况下不会打开该窗口）显示的可辨别字符串非常少。通常仅显示少数导入库和函数的名称。
一个或多个程序节既可写，又可执行。
使用UPX0
 或.shrink
 等非标准的节名称。
沙盒环境
在逆向工程过程中，使用沙盒环境可以在执行程序时观察程序的行为，而该行为不会损害逆向工程平台的关键组件。沙盒环境通常使用 VMware16
 等平台虚拟化软件构建，但它们也可以在一些专用的系统上构建。在执行任何恶意软件之后，这类专用系统可以恢复到一个已知良好的状态。
16. 参见http://www.vmware.com/
 。
沙盒系统的一个共同特点是它们通常都受到严密检测，以观察和收集与沙盒中的程序行为有关的信息。收集到的数据包括与程序的文件系统活动有关的信息、（Windows）程序的注册表活动、与程序生成的任何网络活动有关的信息。
导航栏中显示的信息可以与二进制文件中的每个段的属性关联起来，以确定每个窗口中显示的信息是否一致。这个二进制文件的段代码清单如下所示：
  Name   Start    End      R W X D L Align Base Type   Class  
➊  UPX0   00401000 00407000 R W X . L para  0001 public CODE  
➋  UPX1   00407000 00409000 R W X . L para  0002 public CODE  
  UPX2   00409000 0040908C R W . . L para  0003 public DATA  
  .idata 0040908C 004090C0 R W . . L para  0003 public XTRN  
  UPX2   004090C0 0040A000 R W . . L para  0003 public DATA
在这个例子中，由段 UPX0
 （➊）和段 UPX1
 （➋）组成的整个地址范围（00401000～00409000
 ）被标记为可执行文件（已设置 X
 标志）。基于这一事实，我们应该会看到整个导航带以彩色显示，表示它们是代码。但情况并非如此，而且观察发现，UPX0
 的整个范围全为空，未被占用，这些都应引起我们的高度怀疑。在 IDA 中，UPX0
 的节头部包含以下行：
UPX0:00401000 ;  Section 1. (virtual address 00001000)  
UPX0:00401000 ;  Virtual size                : 00006000 (  24576.)  
UPX0:00401000 ; ➊ Section size in file          : 00000000 (      0.)  
UPX0:00401000 ;  Offset to raw data for section: 00000200  
UPX0:00401000 ; ➋ Flags E0000080: Bss Executable Readable Writable
使用IDA 在静态上下文中（根本不执行二进制文件）执行解压操作的技巧将在21.3 节讨论。
21.1.3 导入的函数模糊
为了避免泄漏与二进制文件可能执行的与可能操作有关的信息，另一种反静态分析技巧专用于难以确定模糊二进制文件所使用的共享库和库函数。多数情况下，这种技巧可以令 dumpbin
 、ldd
 和objdump
 等工具失效，无法列出库依赖关系。
这类模糊对 IDA 的影响在“导出”窗口中表现得尤为明显。前面 tElock 示例的“导出”窗口的整个内容如下所示：
Address   Ordinal   Name                  Library  
0041EC2E            GetModuleHandleA      kernel32  
0041EC36            MessageBoxA           user32
只有两个外部函数被引用：GetModulehandleA
 （来自kernel32.dll ）和MessageBoxA
 （来自user32.dll ）。从这个简短的代码段，几乎不可能推断出程序的任何行为。那么，这样一个程序如何完成有用的任务呢？同样，在这方面，程序采用的技巧多种多样，但是基本上归结于一个事实，即程序本身必须加载它依赖的任何其他库，一旦库被加载，程序必须在这些库中定位所需的任何函数。多数情况下，这些任务由去模糊存根完成，然后再将控制权转交给去模糊后的程序。这个过程的最终目的是正确初始化程序的导入表，就好像整个过程是由操作系统自己的加载器执行的一样。
对Windows 二进制文件而言，一种简单的方法是使用LoadLibrary
 函数按名称加载所需的库，然后在每个库中使用 GetProcAddress
 函数执行函数地址查询。为了使用这些函数，程序要么显式链接它们，要么采取其他方法查询它们。tElock 示例的“名称”列表中并未包含任何一个这样的函数，而下面 UPX 示例的“名称”（Name）列表则包含了这两个函数。
Address   Ordinal   Name                  Library  
0040908C            LoadLibraryA          KERNEL32  
00409090            GetProcAddress        KERNEL32  
00409094            ExitProcess           KERNEL32  
0040909C            RegCloseKey           ADVAPI32  
004090A4            atoi                  CRTDLL  
004090AC            ExitWindowsEx         USER32  
004090B4            InternetOpenA         WININET  
004090BC            recv                  wsock32
负责重建导入表的 UPX 代码如代码清单 21-1 所示。
代码清单 21-1 UPX 中的导入表重建
  UPX1:0040886C loc_40886C:                          ; CODE XREF: start+12E↓ j  
  UPX1:0040886C        mov     eax, [edi]  
  UPX1:0040886E        or      eax, eax  
  UPX1:00408870        jz      short loc_4088AE  
  UPX1:00408872        mov     ebx, [edi+4]  
  UPX1:00408875        lea     eax, [eax+esi+8000h]  
  UPX1:0040887C        add     ebx, esi  
  UPX1:0040887E        push    eax  
  UPX1:0040887F        add     edi, 8  
➊  UPX1:00408882        call    dword ptr [esi+808Ch] ; LoadLibraryA  