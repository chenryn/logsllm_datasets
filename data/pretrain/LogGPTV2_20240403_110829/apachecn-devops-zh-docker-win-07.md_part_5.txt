  ch07-es-data:
  ch07-db-data:
```
群覆盖将所有服务连接到的同一个`nd-net`网络映射为名为`nd-swarm`的外部网络，在我部署该栈之前，该网络需要存在:
```
networks:
  nd-net:
    external:
      name: nd-swarm
```
群覆盖中没有定义卷。您可以在群集模式下使用卷，就像在单个 Docker Engine 上使用卷一样，但是您可以选择使用不同的驱动程序，并将数据中心或云存储服务中的存储设备连接到您的容器卷。
Storage in Docker is a complete topic in itself. I cover it in detail in my Pluralsight course, **Handling Data and Stateful Applications in Docker**. In that course, I demonstrate how to run stateful apps and databases in containers on the desktop, and with high availability and scale in Docker Swarm.
swarm override 文件中还有两个部分，涵盖了我的应用配置:
```
configs:
  nerd-dinner-api-config:
    external: true
  nerd-dinner-config: 
    external: true
secrets:
  nerd-dinner-db-sa-password:
    external: true
  nerd-dinner-save-handler-secrets:
    external: true
  nerd-dinner-api-secrets:
    external: true
  nerd-dinner-secrets:
    external: true
```
如果你看到这个，并且认为有很多`configs`和`secrets`需要管理，记住这是你的应用需要的配置数据，无论你在什么平台上运行它。Docker 的优势在于，所有这些设置都是集中存储和管理的，如果它们包含敏感数据，您可以选择安全地存储和传输它们。
我所有的配置和机密对象都被定义为外部资源，所以在我部署我的应用之前，它们需要存在于群中。在`ch07-docker-stack`目录中有一个名为`apply-configuration.ps1`的脚本，它包含了所有的`docker config create`和`docker secret create`命令:
```
> .\apply-configuration.ps1
ntkafttcxvf5zjea9axuwa6u9
razlhn81s50wrqojwflbak6qx
npg65f4g8aahezqt14et3m31l
ptofylkbxcouag0hqa942dosz
dwtn1q0idjz6apbox1kh512ns
reecdwj5lvkeugm1v5xy8dtvb
nyjx9jd4yzddgrb2nhwvqjgri
b3kk0hkzykiyjnmknea64e3dk
q1l5yp025tqnr6fd97miwii8f
```
输出是新对象标识的列表。现在资源都存在了，我可以将我的应用作为一个栈进行部署。
# 从 Docker 编写文件部署集群栈
我可以通过指定多个编写文件(核心文件和本地覆盖)在开发笔记本电脑上部署带有 Docker Compose 的应用。在集群模式下，使用标准的`docker`命令，而不是`docker-compose`来部署栈。Docker CLI 不支持多个文件进行栈部署，但是我可以通过使用 Docker Compose 将源文件连接在一起来生成单个栈文件。该命令从两个用于栈部署的合成文件中生成一个名为`docker-stack.yml`的合成文件:
```
docker-compose -f docker-compose.yml -f docker-compose.swarm.yml config > docker-stack.yml
```
Docker Compose 连接输入文件并检查输出配置是否有效。我在一个名为`docker-stack.yml`的文件中捕获输出。这是一个额外的步骤，很容易适合您的部署管道。现在，我可以在 swarm 上部署我的栈，使用包含核心服务描述的栈文件，加上机密和部署配置。
您可以使用单个命令`docker stack deploy`从合成文件部署栈。您需要传递合成文件的位置和栈的名称，然后 Docker 在合成文件中创建所有资源:
```
> docker stack deploy --compose-file docker-stack.yml nerd-dinner
Creating service nerd-dinner_message-queue
Creating service nerd-dinner_elasticsearch
Creating service nerd-dinner_nerd-dinner-api
Creating service nerd-dinner_kibana
Creating service nerd-dinner_nerd-dinner-index-handler
Creating service nerd-dinner_nerd-dinner-save-handler
Creating service nerd-dinner_reverse-proxy
Creating service nerd-dinner_nerd-dinner-web
Creating service nerd-dinner_nerd-dinner-homepage
Creating service nerd-dinner_nerd-dinner-db
```
结果是一组资源被逻辑分组在一起形成栈。与依赖命名约定和标签来识别分组的 Docker Compose 不同，栈是 Docker 中的一等公民。我可以列出所有栈，这为我提供了栈中的基本细节—栈名称和服务数量:
```
> docker stack ls
NAME                SERVICES            ORCHESTRATOR
nerd-dinner         10                  Swarm
```
我的栈中有 10 个服务，部署在一个 Docker Compose 文件中，该文件有 137 行 YAML。对于这样一个复杂的系统来说，这只是极少量的配置:两个数据库、一个反向代理、多个前端、一个 RESTful API、一个消息队列和多个消息处理程序。这种规模的系统通常会在长达数百页的 Word 部署文档中描述，并且需要一个周末的手动工作来运行所有步骤。我用一个命令部署了这个。
我还可以深入到运行栈的容器中，通过`docker stack ps`查看它们运行的状态和节点，或者通过`docker stack services`获得栈中服务的更高级视图:
```
> docker stack services nerd-dinner
ID              NAME       MODE        REPLICAS        IMAGE
3qc43h4djaau  nerd-dinner_nerd-dinner-homepage       replicated  2/2       dockeronwindows/ch03...
51xrosstjd79  nerd-dinner_message-queue              replicated  1/1       dockeronwindows/ch05...
820a4quahjlk  nerd-dinner_elasticsearch              replicated  1/1       sixeyed/elasticsearch...
eeuxydk6y8vp  nerd-dinner_nerd-dinner-web            replicated  2/2       dockeronwindows/ch07...
jlr7n6minp1v  nerd-dinner_nerd-dinner-index-handler  replicated  2/2       dockeronwindows/ch05...
lr8u7uoqx3f8  nerd-dinner_nerd-dinner-save-handler   replicated  3/3       dockeronwindows/ch05...
pv0f37xbmz7h  nerd-dinner_reverse-proxy              replicated  1/1       sixeyed/traefik...
qjg0262j8hwl  nerd-dinner_nerd-dinner-db             replicated  1/1       dokeronwindows/ch07...
va4bom13tp71  nerd-dinner_kibana                     replicated  1/1       sixeyed/kibana...
vqdaxm6rag96  nerd-dinner_nerd-dinner-api            replicated  2/2       dockeronwindows/ch07...
```
这里的输出显示，我有多个运行前端容器和消息处理程序的副本。总共有 15 个容器在我的双节点群集上运行，这是两个虚拟机，总共有四个 CPU 内核和 8 GB 内存。空闲时，容器使用很少的计算资源，我有足够的容量在这里运行额外的栈。我甚至可以使用不同的代理端口来部署同一个栈的副本，然后我将有两个完全独立的测试环境在同一套硬件上运行。
将服务分组到栈中使得管理您的应用变得更加容易，尤其是当您有多个应用在每个应用中运行多个服务时。栈是一组 Docker 资源的抽象，但是您仍然可以直接管理单个资源。如果我运行`docker service rm`，它将删除一个服务，即使该服务是栈的一部分。当我再次运行`docker stack deploy`时，Docker 将看到栈中缺少一个服务，并将重新创建它。
当涉及到用新的映像版本或对服务属性的更改来更新应用时，您可以采用命令式方法并直接修改服务，或者通过修改栈文件并再次部署它来保持声明性。Docker 不会强迫你执行一个过程，但最好保持声明性，并使用合成文件作为唯一的事实来源。
我可以通过向栈文件的部署部分添加`replicas :2`并再次部署它，或者通过运行`docker service update --replicas=2 nerd-dinner_nerd-dinner-save-handler`来扩展我的解决方案中的消息处理程序。如果我更新了服务，并且没有更改栈文件，那么下次我部署栈时，我的处理程序将进入一个副本。栈文件被视为所需的最终状态，如果当前状态有所偏离，它将在您再次部署时得到纠正。
使用声明性方法意味着您总是在 Docker Compose 文件中进行这些更改，并通过再次部署栈来更新您的应用。撰写文件与您的 Dockerfiles 和应用源代码一起存在于源代码控制中，因此可以对它们进行版本控制、比较和标记。这意味着，当你为你的应用的任何特定版本提取源代码时，你将拥有构建和部署它所需的一切。
Secrets and configurations are the exception, you would keep them in a more secure location than the central source repository, and only admin users would have access to the plain text. The Compose files just reference external secrets, so you get the benefit of a single source of truth for your app manifest inside source control, with sensitive data kept outside.
运行单个节点或两个节点的集群对于开发和测试环境来说很好。我可以以栈的形式运行完整的 NerdDinner 套件，验证栈文件定义是否正确，并且我可以上下扩展来检查应用的行为。这不能给我高可用性，因为群只有一个管理器节点，所以如果管理器离线，那么我就不能管理栈。在数据中心，您可以运行具有数百个节点的集群，并通过三个管理器获得完全高可用性。
通过在云中运行，您可以构建一个具有更大弹性的集群，以实现高可用性和可扩展性。所有主要的云运营商都在他们的 IaaS 服务中支持 Docker，因此您可以轻松地在预装 Docker 的情况下启动 Linux 和 Windows 虚拟机，并通过本章中看到的简单命令将它们加入群。
Docker Swarm 不仅仅是在集群中大规模运行应用。跨多个节点运行为我提供了高可用性，因此我的应用可以在出现故障时继续运行，我可以利用这一点来支持应用生命周期，实现零停机滚动更新和自动回滚。
# 零停机时间部署更新
Docker Swarm 有两个功能，可以在应用不停机的情况下更新整个栈—滚动更新和节点耗尽。当您有组件的新版本要发布时，滚动更新会用新映像中的新实例替换应用容器。更新是分阶段进行的，因此如果您有多个副本，在升级其他任务时，将始终有任务运行以满足请求。
应用更新会频繁发生，但不太频繁，您还需要更新主机，以升级 Docker 或应用 Windows 修补程序。Docker Swarm 支持清空一个节点，这意味着该节点上运行的所有容器都将停止，并且不会再调度更多容器。如果节点耗尽时任何服务的副本级别下降，任务将在其他节点上启动。当节点耗尽时，您可以更新主机，然后将其重新加入群。
我将通过介绍这两种情况来结束这一章。
# 更新应用服务
我在 Docker Swarm 上运行我的栈，现在我要部署一个应用更新——一个带有重新设计的用户界面的新主页组件，这是一个很好的、易于验证的更改。我把它建成了`dockeronwindows/ch07-nerd-dinner-homepage:2e`。为了进行更新，我有一个新的 Docker Compose 覆盖文件，它只包含现有服务的新映像名称:
```
version: '3.7'
services:
  nerd-dinner-homepage:
    image: dockeronwindows/ch07-nerd-dinner-homepage:2e
```
In a normal release, you wouldn't use an override file to update one service. You would update the image tag in the core Docker Compose file and save the file in source control. I'm using an override file to make it easier to follow along the examples from this chapter.
此更新有两个步骤。首先，我需要通过组合合成文件和所有覆盖文件来生成一个新的应用清单:
```
docker-compose `
 -f docker-compose.yml `
 -f docker-compose.swarm.yml `
 -f new-homepage.yml `
 config > docker-stack-2.yml
```
现在我可以部署栈了: