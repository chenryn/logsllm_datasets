title:POSTER: Android System Broadcast Actions Broadcasts Your Privacy
author:Fadi Mohsen and
Mohamed Shehab and
Emmanuel Bello-Ogunu and
Abeer Al Jarrah
POSTER: Android System Broadcast Actions Broadcasts
Your Privacy
Fadi Mohsen, Mohamed Shehab, Emmanuel Bello-Ogunu, and Abeer Al Jarrah
Department of Software and Information Systems
University of North Carolina at Charlotte
{f mohsen, mshehab, ebelloog, aaljarra}@uncc.com
Charlotte, USA
ABSTRACT
Android provides ﬁner-grained security features through a
”permission” mechanism that puts limitations on the re-
sources that each application can access. Upon installing
a new Android application, a user is prompted to grant it a
set of permissions. There are two typical assumptions made
regarding permissions and mobile application security and
privacy. The ﬁrst one is that malicious applications need
to retain many permissions. Secondly, mobile devices users
assume that installed applications do not access data if they
are not in the foreground.
In this project, we show that
malicious Android applications can still fulﬁll their objec-
tives with minimum permissions and that they can access
user data while in the background. This could happen with
the help of another Android component, called broadcast
receiver. We study the evaluation of Android broadcast ac-
tions. We demonstrate an attack scenario made possible by
the broadcast receivers. Moreover, we propose solutions to
protect from such attacks.
Categories and Subject Descriptors
H.4 [Information Systems Applications]: Security and
Protection
General Terms
Security
Keywords
Broadcast , Actions, Receivers
1.
INTRODUCTION
A broadcast receiver is an Android component that en-
ables applications to register for system or application events
or actions(e.g. receive call, receive message). Once an event
occurs, Android runtime notiﬁes all registered receivers of
that particular action. A broadcast is a message that any
Permission to make digital or hard copies of part or all of this work for personal or 
classroom  use  is  granted  without  fee  provided  that  copies  are  not  made  or 
distributed for profit or commercial advantage, and that copies bear this notice and 
the full citation on the first page. Copyrights for third-party components of this work 
must be honored. For all other uses, contact the owner/author(s). Copyright is held 
by the author/owner(s). 
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA. 
ACM 978-1-4503-2957-6/14/11. 
http://dx.doi.org/10.1145/2660267.2662388
application can receive. The Android system delivers nu-
merous broadcasts for system events, such as when an In-
ternet connection is enabled or a new SMS arrives. While
broadcast receivers are considered a useful feature by devel-
opers, users’ experience and privacy can be aﬀected nega-
tively by them. Therefore, investigating Android broadcast
receivers is vital. In this project, to understand the inﬂuence
of broadcast receivers, we conducted an extensive study on
the evolution of Android broadcast actions over all releases.
We study the implications of including broadcast receivers
in third party applications on users’ privacy. We implement
a malicious Android application in an eﬀort to compromise
users’ privacy. The application uses one broadcast receiver
which requires NORMAL permissions. The application col-
lects some information and stores them in the cloud for fu-
ture analysis. We perform two types of analysis:
internal
knowledge analysis and external knowledge analysis. In the
internal knowledge analysis, we only used the collected data
to infer some private information.The external knowledge
analysis entails employing external data to gain more pre-
cise information about the victim.The study ﬁnds that the
number of broadcasts actions have increased by 64% since
Android’s ﬁrst release.We also ﬁnd that user privacy can be
compromised using broadcast receivers that require NOR-
MAL permissions. Our contributions are as follows:
• We outline the evolution of Android broadcast actions.
• We demonstrate an attack using a broadcast receiver.
• We propose solutions that would give users and secu-
rity experts more insight and understanding of broad-
cast receivers and actions.
1.1 Related Work
The work in [2] examined the inter-application commu-
nication in Android and presented several classes of poten-
tial attacks on applications, such as the risk of Broadcast
theft and Broadcast injection. The paper proposed security
tips to developers when implementing Broadcast receivers.
Broadcast receivers can also be vulnerable to several at-
tacks such as active denial-of-service attacks [4], which hap-
pen due to developers confusing inter-application and intra-
application communication mechanisms. Additional related
studies have shown that Android users pay poor attention
to the permissions requests upon installing new apps [3],
and thus alternate approaches were presented to provide
users with the knowledge needed to make informed decisions
about the applications they install [5].
1484(a) # of broadcast actions by Android version code.
(b) # of broadcast actions by Android API level.
Figure 1: The evolution of Android broadcast actions over the 19 releases.
social problems, such as, monitoring children or employee
activity. Attackers, on the other hand, use spy software
to collect vital information, such as bank account info to
gain ﬁnancial leverage, or other data to blackmail the vic-
tim. The spy software enables the attacker to SILENTLY
learn the truth about the victims’ calls, text messages, GPS
locations, and more. The silent monitoring is possible on
Android with the help of broadcast receivers. An alterna-
tive solution would be to run services that would collect the
data every deﬁned period of time (e.g. 30 seconds). But
this solution suﬀers from a major concern: a long-running
service, once started, usually receives lower positioning in
the list of background tasks over time, which would make it
highly susceptible to be killed by the system.
2.1.2 User Assumptions and Habits
Over the years, users have developed certain habits and
assumptions when dealing with malicious software. For in-
stance, users know that they should not click on a link or
attachment in an email that they don’t trust, nor run un-
trusted executables, because doing so may infect their sys-
tems, which in turn compromises their privacy. An assump-
tion of mobile devices users speciﬁcally is that installed ap-
plications can’t access data if they are not on the foreground.
Moreover, permissions give users an incomplete view of the
capabilities each installed application has. A more accurate
view would require retrieving registered Broadcast receivers
of each application.
2.1.3 Attack Model
The attack presented here can be part of a legitimate ap-
plication downloaded by the victim from an oﬃcial or unof-
ﬁcial Android market. The application contains at least one
activity, one service, and one broadcast receiver, although
the application may contain some other components. A
broadcast receiver needs an activity to be activated and reg-
istered. Moreover, the application may need to display an
activity for the victim to interact with to hide the suspicious
behind the scene behavior. The application has to provide
some features to attract victims in the ﬁrst place, and to
keep it on the mobile device as long as possible.
2.1.4 Use Case Scenario
We developed an Android app SpyApp that has one Activ-
Figure 2: The change in the number of Android broadcast
actions over the 19 APIs.
2. ANDROID BROADCAST ACTIONS
We studied the Android platform to see how the set of
broadcast actions has evolved. Figure 1a and Figure 1b
show the increase in the number of actions over the version
codes and API levels, respectively. In Figure 2 we show the
number of broadcast actions that were added and removed
on each release. While adding certain new actions can be
justiﬁed as the need to fulﬁll new or hardware features (e.g.
Bluetooth, Sensors), we couldn’t ﬁnd any explanation to
removing some of these actions. In conclusion, the overall
increase in the broadcast actions has given developers more
control, but on the other hand, protecting users’ privacy has
become more challenging.
2.1 The Danger with Broadcast Receivers
In this section, we show why broadcast receivers can com-
promise users’ privacy. We start by deﬁning spy software,
user assumptions and habits, then we demonstrate possible
attack using broadcast receivers.
2.1.1 Android Spy Software
Android spy software is any software that aims at collect-
ing as much data as possible from mobile devices. Some of
this software is commercially distributed for sale. The com-
panies that build such software present them as solutions to
1485needed interfaces to allow the user to manage the installation
process. PackageInstaller calls InstallAppProgress activity
to receive instructions from the user.
InstallAppProgress
asks a PackageManager service to install the app via in-
stalld. The installd daemon’s main role is to receive re-
quests from the PackageManager service via the Linux do-
main socket. The installd executes a series of steps to install
APKs with root permission. The source code of the Package-
Installer can be found online[1]. It has many components,
such as PackageInstallerActivity.java, PackageUtil.java, In-
stallAppProgress.java. We downloaded the Android source
code for the Kitkat version of PackageInstaller. Currently,
we are working on modifying the installer to retrieve and
display the broadcast receivers information as part of the
permissions prompt.
3.2 BroadcastsViewer Tool
Figure 3 shows BroadcastsViewer, the tool we developed
to detect registered system broadcast actions by the installed
apps. Our focus is on the system Broadcasts actions which
would make our contribution unique compared to previous
works.BroadcastsViewer will also provide the user with some
statistics on the usage of each broadcast receiver. The user
can also give his/her feedback on their level of concern for
each receiver action registered to each app. Aggregating
apps’ receiver usage can help us draw conclusions on what
is suspicious and what is not. For example, an app like Drop-
box registers to receive the CONNECTIVITY CHANGE
action, and it would be justiﬁable given the cloud storage
service it provides and its dependency on connectivity to
accomplish this.
4. ACKNOWLEDGMENTS
This research was partially supported by grants from the
National Science Foundation (NSF-CNS-0831360, NSF-CNS-
1117411) and a Google Research Award.
5. REFERENCES
[1] Android. "packages/apps/PackageInstaller/src/
com/android/packageinstaller", 2010.
[2] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner.
Analyzing inter-application communication in android.
In Proceedings of the 9th International Conference on
Mobile Systems, Applications, and Services, MobiSys
’11, pages 239–252, New York, NY, USA, 2011. ACM.
[3] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and
D. Wagner. Android permissions: User attention,
comprehension, and behavior. In Proceedings of the
Eighth Symposium on Usable Privacy and Security,
SOUPS ’12, pages 3:1–3:14, New York, NY, USA, 2012.
ACM.
[4] D. Kantola, E. Chin, W. He, and D. Wagner. Reducing
attack surfaces for intra-application communication in
android. Technical Report UCB/EECS-2012-182, EECS
Department, University of California, Berkeley, Jul
2012.
[5] S. Rosen, Z. Qian, and Z. M. Mao. Appproﬁler: A
ﬂexible method of exposing privacy-related behavior in
android applications to end users. In Proceedings of the
Third ACM Conference on Data and Application
Security and Privacy, CODASPY ’13, pages 221–232,
New York, NY, USA, 2013. ACM.
(a) Main Page.
(b) User Feedback Form.
Figure 3: BroadcastsViewer Tool for Detecting and Display-
ing Registered System Broadcast Actions.
ity, which is the minimum we need for the broadcast receiver
to get registered. The SpyApp registers for network related
system events. To register for the above events, Android
mandates two NORMAL permissions: ACCESS NETWORK
STATE and ACCESS WIFI STATE. Whenever any of these
events is ﬁred, SpyApp would get notiﬁed by the system. At
this moment, information about the network are getting col-
lected, such as: Status, MacAddress, SSID, STATE, TIME.
The information is then sent to a remote server by the app
for future analysis. We performed two types of analysis on
the collected data: internal knowledge analysis and external
knowledge analysis. In the internal knowledge analysis, we
only used the collected data to infer some knowledge about
the victim. The external knowledge analysis entails employ-
ing external data to gain more deﬁned knowledge about the
victim, such as mapping SSIDs to a geographical location.
Some of the private information include the victim’s work
place, their home, times she arrives and departs work, times
she arrives and departs home, and other places she visits,
like coﬀee shops.
3. PROPOSED SOLUTIONS
Currently on Android, when user installs a new app, he/she
would be prompted to grant it some permissions. The prompt
doesn’t include any information about the broadcast re-
ceivers. Moreover, the existing tools that assess the risk of
installed apps focus on the permissions they possess. Thus,
we propose to
• Develop a tool to display the registered broadcast re-
ceivers by installed applications.
• Propose to modify the Android package installer to
change the permission prompts to include broadcast
receivers.
3.1 Android Package Installer
PackageInstaller is the default Android application to in-
teractively install new applications (apps). It provides the
1486