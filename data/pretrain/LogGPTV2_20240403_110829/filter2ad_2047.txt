# POSTER: Android System Broadcast Actions and User Privacy

**Authors:**  
Fadi Mohsen, Mohamed Shehab, Emmanuel Bello-Ogunu, and Abeer Al Jarrah  
*Department of Software and Information Systems, University of North Carolina at Charlotte, USA*  
*Emails: {fmohsen, mshehab, ebelloog, aaljarra}@uncc.edu*

## ABSTRACT
Android's security model includes a "permission" mechanism that restricts the resources each application can access. When installing a new application, users are prompted to grant it a set of permissions. Two common assumptions about permissions and mobile application security are: (1) malicious applications require many permissions, and (2) installed applications do not access data if they are not in the foreground.

In this project, we demonstrate that malicious Android applications can achieve their objectives with minimal permissions and can access user data even when running in the background, facilitated by broadcast receivers. We evaluate the evolution of Android broadcast actions and present an attack scenario. Additionally, we propose solutions to protect against such attacks.

**Categories and Subject Descriptors:**  
H.4 [Information Systems Applications]: Security and Protection

**General Terms:**  
Security

**Keywords:**  
Broadcast, Actions, Receivers

## 1. INTRODUCTION
A broadcast receiver is an Android component that allows applications to register for system or application events (e.g., receiving calls, messages). When an event occurs, the Android runtime notifies all registered receivers. While broadcast receivers are useful for developers, they can negatively impact user experience and privacy. Therefore, investigating them is crucial.

In this project, we conducted an extensive study on the evolution of Android broadcast actions across all releases. We examined the implications of including broadcast receivers in third-party applications on user privacy. We implemented a malicious Android application that uses one broadcast receiver requiring only NORMAL permissions. The application collects information and stores it in the cloud for analysis. We performed two types of analysis: internal knowledge analysis and external knowledge analysis.

Our findings show that the number of broadcast actions has increased by 64% since Android's first release, and user privacy can be compromised using broadcast receivers that require NORMAL permissions. Our contributions include:
- Outlining the evolution of Android broadcast actions.
- Demonstrating an attack using a broadcast receiver.
- Proposing solutions to give users and security experts more insight into broadcast receivers and actions.

### 1.1 Related Work
Previous work [2] examined inter-application communication in Android and identified potential attacks, such as broadcast theft and injection. The paper provided security tips for developers. Broadcast receivers can also be vulnerable to active denial-of-service attacks [4] due to confusion between inter-application and intra-application communication mechanisms. Studies have shown that Android users often overlook permission requests during app installation [3], leading to alternative approaches to inform users [5].

## 2. ANDROID BROADCAST ACTIONS
We studied the evolution of broadcast actions in the Android platform. Figures 1a and 1b show the increase in the number of actions over version codes and API levels, respectively. Figure 2 illustrates the number of broadcast actions added and removed in each release. While adding new actions can be justified by new hardware features, the removal of some actions lacks clear explanation. The overall increase in broadcast actions provides developers with more control but makes protecting user privacy more challenging.

### 2.1 The Danger with Broadcast Receivers
In this section, we explain why broadcast receivers can compromise user privacy. We define spy software, discuss user assumptions and habits, and demonstrate possible attacks using broadcast receivers.

#### 2.1.1 Android Spy Software
Android spy software collects data from mobile devices. Some of this software is commercially available. Companies market it as solutions for social issues like monitoring children or employees. Attackers use spy software to collect sensitive information, such as bank account details, for financial gain or blackmail. Silent monitoring is possible on Android with the help of broadcast receivers. An alternative approach is to run periodic services, but this can lead to the service being killed by the system.

#### 2.1.2 User Assumptions and Habits
Users have developed certain habits and assumptions regarding malicious software. They avoid clicking on untrusted links or running untrusted executables. A common assumption among mobile users is that installed applications cannot access data if they are not in the foreground. Permissions provide an incomplete view of an application's capabilities; a more accurate view would require retrieving registered broadcast receivers.

#### 2.1.3 Attack Model
The attack presented here can be part of a legitimate application downloaded from official or unofficial Android markets. The application contains at least one activity, one service, and one broadcast receiver. The broadcast receiver needs an activity to be activated and registered. The application may display an activity to hide suspicious behavior and attract victims.

#### 2.1.4 Use Case Scenario
We developed an Android app, SpyApp, which has one activity and registers for network-related system events. The app requires two NORMAL permissions: ACCESS_NETWORK_STATE and ACCESS_WIFI_STATE. When these events occur, the app collects network information (e.g., status, MAC address, SSID, state, time) and sends it to a remote server. We performed internal and external knowledge analyses on the collected data to infer private information about the victim, such as their workplace, home, and other visited places.

## 3. PROPOSED SOLUTIONS
Currently, when a user installs a new app, they are prompted to grant permissions without information about broadcast receivers. Existing tools focus on permissions. We propose:
- Developing a tool to display registered broadcast receivers by installed applications.
- Modifying the Android package installer to include broadcast receivers in the permission prompts.

### 3.1 Android Package Installer
PackageInstaller is the default Android application for interactive app installation. It provides interfaces for the user to manage the installation process. We are working on modifying the installer to retrieve and display broadcast receiver information as part of the permissions prompt.

### 3.2 BroadcastsViewer Tool
Figure 3 shows BroadcastsViewer, a tool we developed to detect and display registered system broadcast actions by installed apps. The tool provides statistics on the usage of each broadcast receiver and allows users to provide feedback on their level of concern. Aggregating this feedback can help identify suspicious and non-suspicious behaviors.

## 4. ACKNOWLEDGMENTS
This research was partially supported by grants from the National Science Foundation (NSF-CNS-0831360, NSF-CNS-1117411) and a Google Research Award.

## 5. REFERENCES
[1] Android. "packages/apps/PackageInstaller/src/com/android/packageinstaller", 2010.  
[2] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services, MobiSys '11, pages 239–252, New York, NY, USA, 2011. ACM.  
[3] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner. Android permissions: User attention, comprehension, and behavior. In Proceedings of the Eighth Symposium on Usable Privacy and Security, SOUPS '12, pages 3:1–3:14, New York, NY, USA, 2012. ACM.  
[4] D. Kantola, E. Chin, W. He, and D. Wagner. Reducing attack surfaces for intra-application communication in Android. Technical Report UCB/EECS-2012-182, EECS Department, University of California, Berkeley, Jul 2012.  
[5] S. Rosen, Z. Qian, and Z. M. Mao. AppProfiler: A flexible method of exposing privacy-related behavior in Android applications to end users. In Proceedings of the Third ACM Conference on Data and Application Security and Privacy, CODASPY '13, pages 221–232, New York, NY, USA, 2013. ACM.