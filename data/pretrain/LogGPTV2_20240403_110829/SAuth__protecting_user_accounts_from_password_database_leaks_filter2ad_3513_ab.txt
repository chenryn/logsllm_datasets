user’s password for S (step 1a). Subsequently ser-
vice S initiates our proposed protocol which involves
service V vouching for the user (step 1b). The user
is redirected to V with which he also engages in a
standard authentication process (step 2a) at the end
of which service V generates a vouching token for
the user to return to S (step 2b). Finally, service
S allows the user to access his account if and only
if the vouching token from V is veriﬁed (step 3a)
and optionally returns a persistent authentication
token (e.g., cookie) that will bypass this authentica-
tion process for subsequent interactions (e.g., HTTP
requests) with S.
2.3 Out of Scope Threats
We do not attempt to address password compromise due
to social engineering, phishing, or man-in-the-middle at-
tacks. Social engineering exploits the human psychology and
we argue that technical means may not be able to oﬀer ade-
quate protection on their own. As far as phishing, malware,
and man-in-the-middle attacks are concerned we stress that
there are already suﬃcient protection mechanisms that can
be employed independently to our proposal. For example,
researchers have proposed PwdHash [50], BeamAuth [22]
and Visual Skins [39] against phishing. They employ some-
thing unique to the original site, such as a URL or its ap-
pearance, to alert the user or safeguard against transmitting
his password to the wrong site. Nevertheless, they do not
have any eﬀect on the server side nor do they present any
beneﬁt once the user’s password has been leaked.
3. SAuth ARCHITECTURE
Alice has registered and maintains accounts with web sites
S and V like she does today. We consider the case where
Alice tries to authenticate to S using SAuth, while V is
acting as a vouching party for Alice. We use the terms A→S
and A→V for indicating Alice as announced to S and V ,
respectively. We use this notation for stressing that Alice
has a diﬀerent identity with each party. Below, we provide
the steps executed for Alice to successfully authenticate with
service S in the presence of service V , which is trusted by S
and has agreed to vouch for its own users to S. The process
is also depicted in Figure 1.
189accounts on two distinct services, we require that ac-
counts A→S and A→V have been associated in the past
when user Alice opted in this enhanced authentication
process. This association means that if some user man-
ages to authenticate as A→S but then authenticates as
B→V , the enhanced authentication process will be ter-
minated by service S as unsuccessful. The only way
for the process to succeed is for the current user to
authenticate as both A→S, on service S, and A→V , on
service V . Once the enhanced authentication process
concludes with a positive result on service S the cur-
rent user is given an authentication token (e.g., HTTP
cookie), which replaces the need for challenging her au-
thentication credentials for every subsequent request,
currently a common practice in the web and elsewhere.
Note that at this point the current user has authenti-
cated fully on S and V in case both services are vouch-
ing for each other. If a diﬀerent service is selected to
vouch for V then, as expected, the user has to follow
a similar process for authenticating with V .
SAuth is proposed as an opt-in feature, designed to com-
plement existing authentication methods. Sites providing
SAuth can let users enable the mechanism at registration or
at any later time. We now discuss the protocol details. We
assume that SAuth operates above SSL.
3.1 Protocol Details
Security and Trust. When service S receives a vouching
token from service V about some user, S trusts that V has
indeed authenticated the user and its security practices do
not allow some other user to generate the same vouching
token while interacting with V .
If V fails to meet those
expectations, the security of the process followed by S is as
if SAuth was not in place at all and S was operating alone.
In other words, as S does not nullify its own authentication
system, even if V implicitly or explicitly misbehaves, S will
not be negatively impacted. As the ﬁrst step in the SAuth
protocol involves correctly authenticating with the target
service, the security procedures of S take precedence over the
ones by vouching parties. Note that including more than one
vouching service reduces the dependence on a single external
party and increases the redundancy in the face of vouching
unavailability.
Activation. Registering for a new account in a synergy-
supporting service or enabling synergy-enabled authentica-
tion for an existing account entails an association step be-
tween the target service S and potential vouching services
V . When registering for a new account, the traditional regis-
tration process is carried out and then followed by the asso-
ciation step. Note that activation of SAuth can be deferred
for a later time to limit the workload for new users as it
is not strongly tied to the registration process. For exist-
ing accounts, only the association step needs to take place.
The association step is necessary so that a link is estab-
lished between the current account in the target service S
and an account the user controls in a vouching service V . As
mentioned earlier, a vouching party produces proof that the
current user has managed to successfully authenticate. This
alone is not useful to the target service as it is not necessary
for the owner of the account in S to be the owner of the
account in V . In other words, an attacker who manages to
steal the password for an account in S could authenticate
with his own account in V and have service V return that as
Figure 2: Overview of the association process to en-
able synergy-enhanced authentication. A user tries
to register for a new account in service S (e.g., Twit-
ter). Alternatively he logs in to an existing account
with S for which he wants to enable SAuth (step
1a). S generates a unique anonymous alias for the
user and redirects him to vouching service V (e.g.,
Google) (step 1b). The user is expected to authen-
ticate to V or create a new account (step 2a). Note
that the user may have already enabled SAuth in
his V account. Upon authentication or registration,
the anonymous alias from S is associated with the
current account on V and user is redirected back to
S with a conﬁrmation message (step 2b). Finally,
S binds that alias to the user’s account and enables
SAuth (step 3) so that subsequent authentication
attempts can involve V as a vouching service and, if
so, will require the receipt of that alias from V .
1. Alice visits service S and is challenged for her authen-
tication credentials (e.g., an HTML form asking for her
name and password or a cookie storing an authentica-
tion token). Note that these authentication credentials
were established when Alice created her account, A→S,
on service S. This is currently a standard method for
authentication employed by web services. This step is
depicted as (1a) in Figure 1. After providing the cor-
rect credentials for A→S, the synergy-based authen-
tication protocol is initiated (step (1b) in Figure 1)
and Alice is prompted to choose from a list of trusted
vouching services, including service V , to complete the
enhanced authentication process. Notice, that Alice
has speciﬁed her vouching services in S when she reg-
istered or enabled SAuth. Alice chooses service V and
a vouching request is issued towards V by S, while the
user is being redirected to service V .
2. Service V receives the vouching request from S and
challenges the current user for her authentication cre-
dentials (step (2a) in Figure 1). Note that these au-
thentication credentials were established when Alice
created her account, A→V , on service V . After suc-
cessful authentication of user A→V , a veriﬁcation re-
sponse is returned and the user is redirected back to
service S (step (2b) in Figure 1).
3. Service S receives a veriﬁcation response from V sig-
naling that current user, A→S, has managed to prove
ownership of an account, A→V , on service V (step (3a)
in Figure 1). As any user can prove ownership of two
190proof of authentication. For that matter, upon registration
of a new account or enabling of SAuth, service S generates
an anonymous alias for the user. The user is then expected
to provide that alias to a vouching service and associate it
with an account there. Once this association is made, the
vouching service will return this alias as part of the authenti-
cation proof to service S. Service S will check the returned
alias against the one bound to the account of the current
user and enable him to access the account if and only if the
two are a match (Fig. 2).
Authenticity. As the user agent, i.e., web browser, is
tasked to facilitate the communication between the target
site and vouching parties, special measures are necessary
to ensure the authenticity of protocol messages exchanged.
The reason is that the user agent is both untrusted and mo-
tivated to misbehave when challenged to prove his identity.
Secrecy is also important but, since the user is privy to all
exchanged information, it can be achieved through secure
layer, e.g., SSL, connections between the user and the sites.
To safeguard authenticity, each protocol message is required
to carry the service, signature and signed_fields param-
eters. The ﬁrst one is the identiﬁer of the sender service and
could be the service’s domain, a URI under that domain or
an alias. The second one is a cryptographic signature, such
as RSA-SHA1, computed over the rest of the parameters
using the private key of the service sending the message.
The ﬁnal parameter is a list with the names of parameters
and the order in which they have been signed. As soon as
the user-agent relays a protocol message to the receiving
service, it will parse the signed_fields parameter, verify
the signature based on those ﬁelds and accept the values of
those ﬁelds while discarding all other ﬁelds. Verifying the
signature entails looking up the public key for the service,
speciﬁed by the service parameter. To do so eﬃciently we
employ the X.509 certiﬁcate it has for HTTP over SSL.
Password reset.
In the general case, without SAuth
present, users have the ability to be reminded of their pass-
word or better yet reset it and choose a new one. For this to
happen, users may be asked some security questions, such as
the name of their pet, that they chose during account reg-
istration and subsequently receive an e-mail, to an address
they also chose during registration, with either their current
password or a secure URL to select a new password. Note
that this current practice is already one form of synergy-
based authentication, since the service places trust in the
e-mail provider and expects only the owner of that address
to be able to read the password-reset message. Unfortu-
nately, this model fails when an attacker manages to get
access to the e-mail address and then proceeds to initiate
password-reset procedures for the victim’s online accounts.
Enhancing the current model with SAuth means that the
service will proceed as detailed above only after the current
user proves ownership of an account in a vouching service.
Assuming the user hasn’t forgotten all of his passwords in
all the vouching services, he is ﬁrst prompted by target ser-
vice S to authenticate with vouching service V before S
proceeds with the steps to reset the user’s password for S.
Note that this process is not meant to replace the current
security-question model, whose security has been questioned
by researchers [51], but to precede it and thereby couple it.
3.2 Usability
SAuth is built on standard technologies and is founded
upon the existing browsing habits of users. Thereby it does
not aﬀect their perceived web experience. We are taking
advantage of the fact that users prefer to maintain concur-
rently many browser tabs open [58] and spend at least 57.4%
of their time in switching tabs [42]. This suggests the use
of multiple web applications in one session. Furthermore,
researchers have observed long-lived sessions in online social
networks [24], which is another indicator suggesting that
users are concurrently active in multiple sites.
What is more, in favor of users’ convenience, current web
applications maintain authentication state, usually in the
form of HTTP cookies, for each established session, which
can be destroyed only if the user is explicitly logged oﬀ or
decides to erase the browser cache. In other words, like the
user is not prompted for his password for every HTTP re-
quest the browser makes when rendering a site, he won’t
be interrupted when a service he is already logged in is in-
volved as a vouching party in SAuth. In addition, browsers
implement auto-completion features for ﬁlling out password
forms. Therefore, even if the user is not currently authenti-
cated with one or more of the services involved in a SAuth
session, this feature will alleviate his inconvenience.
Finally, one may be concerned with the involvement of
multiple accounts in diﬀerent services if a user needs to regis-
ter for all of them at once to activate SAuth. We expect that
such cases will be rare in practice as vouching services will be
selected due to their popularity and dependability. As such
we expect that users will almost always have an account with
one of the supported vouching services so, when registering
with an SAuth-enabled service, they will not need to addi-
tionally register with one of the vouching services. Our use
case is aligned with the existing “sign in with Google” and
“sign in with Facebook” single-sign-on mechanisms; users
most probably will hold an account with one of those ser-
vices. Moreover, SAuth’s design enables users to include a
vouching service of their choosing by supplying its domain
name to the target service (Sec. 4). This clearly increases
the ﬂexibility of SAuth. Nevertheless, in the unlikely case
that the user is unable to provide an account with an exist-
ing, or introduce a new, vouching party to the target service,
activating SAuth could also be deferred to the future.
3.3 Availability
The synergistic nature of SAuth creates dependencies be-
tween sites during their user authentication process. The
unavailability of a vouching site V means the target service
S will have to rely solely on its own authentication proce-
dure which, as mentioned earlier, is the ﬁrst step in an SAuth
session and takes precedence over any vouching responses.
In other words, should a vouching site be unavailable, the
target service will still be able to function and operate, as
it would do without the use of SAuth. Administrators can
make a policy decision on whether they want to operate
without enhanced authentication, admit the user into his
account on a provisional basis with limited functionality, or
engage additional checks such as security questions. Note
that once a user is authenticated and receives back a to-
ken, for instance an HTTP cookie, he is not aﬀected by any
changes in the availability of the vouching sites. He will not
have to initiate SAuth unless he relinquishes that token.
1913.4 Password Compromise Alerts
The multi-party authentication process of SAuth enables
a warning system for when passwords from one or more par-
ties are compromised.
In a password leakage an attacker
would gain access to all password hashes stored by a tar-
get site. We assume that he will eventually recover the
plain-text passwords using any of the techniques described
in Sec. 2.2. As he will still be lacking the corresponding pass-
words for the vouching sites he will resort to online guessing
attempts which will result in failed SAuth sessions. Even if
the user has chosen the same password for both the target
and vouching site, as described in Section 5, the attacker will
still end up guessing online. Note that for a vouching site
to receive a request from a target site, the user must have
already successfully authenticated with the latter. There-
fore, a vouching site dealing with a user repeatedly failing
to authenticate with it can suspect that the user is trying