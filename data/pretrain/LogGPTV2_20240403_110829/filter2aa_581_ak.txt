### OAuth 2.0 Fundamentals

#### Token Response Example
```json
{
  "token_type": "bearer",
  "expires_in": 685,
  "refresh_token": "22b157546b26c2d6c0165c4ef6b3f736",
  "access_token": "cac93e1d29e45bf6d84073dbfb460"
}
```

**Note:** If the authorization code grant type is an option, it should be preferred over the resource owner password credentials grant type. The resource owner password credentials grant type was introduced to facilitate migration from HTTP Basic and digest authentication to OAuth 2.0.

#### Client Credentials Grant Type
The client credentials grant type is similar to the Client Account and Password Profile in OAuth WRAP and to two-legged OAuth in OAuth 1.0 (see Appendix B). In this grant type, the client itself becomes the resource owner (see Figure 4-5).

**Example cURL Command:**
```sh
curl -v -k -X POST --basic \
     -u 0rhQErXIX49svVYoXJGt0DWBuFca:eYOFkL756W8usQaVNgCNkz9C2D0a \
     -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
     -d "grant_type=client_credentials" \
     https://authz.example.com/oauth2/token
```

**Response:**
```json
{
  "token_type": "bearer",
  "expires_in": 3600,
  "access_token": "4c9a9ae7463ff9bb93ae7f169bd6a"
}
```

This grant type is primarily used for system-to-system interactions without an end user, such as a web application needing to access an OAuth-secured API for metadata.

#### Refresh Token
Unlike the implicit and client credentials grant types, the other two grant types (authorization code and resource owner password credentials) provide a refresh token. This token can extend the validity of the access token without involving the resource owner.

**Example cURL Command:**
```sh
curl -v -X POST --basic \
    -u 0rhQErXIX49svVYoXJGt0DWBuFca:eYOFkL756W8usQaVNgCNkz9C2D0a \
    -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
    -k -d "grant_type=refresh_token&refresh_token=22b157546b26c2d6c0165c4ef6b3f736" \
    https://authz.example.com/oauth2/token
```

**Response:**
```json
{
  "token_type": "bearer",
  "expires_in": 3600,
  "refresh_token": "9ecc381836fa5e3baf5a9e86081",
  "access_token": "b574d1ba554c26148f5fca3cceb05e2"
}
```

**Note:** The refresh token has a longer lifetime than the access token. If the refresh token expires, the client must initiate the OAuth token flow again to obtain new tokens. The authorization server may also return a new refresh token each time the access token is refreshed.

#### Choosing the Right Grant Type
OAuth 2.0 is an authorization framework that provides multiple options. The choice of grant type depends on the use case. For example:
- **Client Credentials Grant Type:** Use when the client application accesses the API on its own.
- **Authorization Code Grant Type:** Use when the client application accesses the API on behalf of an end user.
- **Implicit and Password Grant Types:** These are now considered obsolete.

#### OAuth 2.0 Token Types
OAuth 2.0 supports custom token types, unlike OAuth 1.0 and WRAP. The most common token profile is the Bearer Token Profile, which is based on OAuth WRAP. Bearer tokens must be used over TLS to ensure security.

**Bearer Token Usage:**
- **HTTP Authorization Header:**
  ```http
  GET /resource HTTP/1.1
  Host: rs.example.com
  Authorization: Bearer JGjhgyuyibGGjgjkjdlsjkjdsd
  ```

- **Query Parameter:**
  ```http
  GET /resource?access_token=JGjhgyuyibGGjgjkjdlsjkjdsd
  Host: rs.example.com
  ```

- **Form-Encoded Body Parameter:**
  ```http
  POST /resource HTTP/1.1
  Host: server.example.com
  Content-Type: application/x-www-form-urlencoded
  access_token=JGjhgyuyibGGjgjkjdlsjkjdsd
  ```

#### OAuth 2.0 Client Types
OAuth 2.0 distinguishes between confidential and public clients:
- **Confidential Clients:** Can protect their credentials (e.g., web applications).
- **Public Clients:** Cannot protect their credentials (e.g., JavaScript running in a browser, native mobile apps).

All four grant types require the client to preregister with the authorization server and receive a client identifier. Under the implicit grant type, the client does not get a client secret.

#### JWT Secured Authorization Request (JAR)
In OAuth 2.0, request parameters are typically sent as query parameters, which can be altered by the user or lack integrity. JWT-secured authorization requests address these issues by allowing the request to be signed and encrypted.

**Example Decoded Payload:**
```json
{
  "iss": "s6BhdRkqt3",
  "aud": "https://server.example.com",
  "response_type": "code id_token",
  "client_id": "s6BhdRkqt3",
  "redirect_uri": "https://client.example.org/cb",
  "scope": "openid",
  "state": "af0ifjsldkj",
  "nonce": "n-0S6_WzA2Mj",
  "max_age": 86400
}
```

**Passing Methods:**
- **Pass by Value:**
  ```http
  https://server.example.com/authorize?request=[jwt_assertion]
  ```

- **Pass by Reference:**
  ```http
  https://server.example.com/authorize?
        response_type=code&
        client_id=s6BhdRkqt3&
        request_uri=https://tfp.example.org/request.jwt/Schjwew&
        state=af0ifjsldkj
  ```

#### Pushed Authorization Requests (PAR)
PAR complements the JAR approach by allowing clients to push authorization request parameters directly to the authorization server, eliminating the need for the client to expose an endpoint.

**Example cURL Command:**
```sh
POST /as/par HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
response_type=code&
state=af0ifjsldkj&
client_id=s6BhdRkqt3&
redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&
scope=ais
```

**Response:**
```json
{
  "request_uri": "urn:example:bwc4JK-ESC0w8acc191e-Y1LTC2",
  "expires_in": 3600
}
```

**Redirect Request:**
```http
https://server.example.com/authorize?
        request_uri=urn:example:bwc4JK-ESC0w8acc191e-Y1LTC2
```

This document provides a comprehensive overview of OAuth 2.0 fundamentals, including token types, grant types, and advanced features like JAR and PAR.