import javax.ws.rs.core.Response; 
@Stateless 
@Path("/books") 
public class BookResource { 
   @GET 
   @Path("{title : [a-zA-Z][a-zA-Z_0-9]}") 
    public Response getBookByTitle(@PathParam("title") String title) { 
      return Response.status(200).entity("getBookByTitle is called, title : " + title).build(); 
   } 
   @GET 
   @Path("{isbn : \\d+}") 
   public Response getBookByISBN(@PathParam("isbn") String isbn) { 
      return Response.status(200).entity("getBookByISBN is called, isbn : " + isbn).build(); 
   } 
} 
```
在前面的例子中，我们有两个`@GET`映射，每个映射都有相同的`/books/`路径。第一个参数是`/{title : [a-zA-Z][a-zA-Z_0-9]}`参数，只对字母和数字有反应。第二个参数是`/{isbn : \\d+}`参数，只有当你拨打 URI 时提供一个号码才会被执行。如您所见，我们已经映射了两条相同的路径，但是每条路径都会对不同类型的传入路径参数做出反应。
除了使用`@PathParam`之外，我们还可以使用`@QueryParams`使用请求参数来提供参数。看看下面的例子:
```
package pl.finsys.jaxrs_example 
import java.util.List; 
import javax.ws.rs.GET; 
import javax.ws.rs.Path; 
import javax.ws.rs.core.Context; 
import javax.ws.rs.core.Response; 
import javax.ws.rs.core.UriInfo; 
@Stateless 
@Path("/users") 
public class UserResource { 
   @EJB private UserService userService; 
   @GET 
   @Path("/query") 
   @Produces("application/json") 
   public Response getUsers( 
      @QueryParam("from") int from, 
      @QueryParam("to") int to, 
      @QueryParam("orderBy") List orderBy)) { 
      List users = userService.getUsers(from, to, orderBy); 
      return Response.status(200).entity(users).build(); 
   } 
} 
```
在前面的例子中，当在`/users/query?from=1&to=100&orderBy=name`上调用`HTTP GET`时，JAX-RS 会将 URI 参数传递到`getUsers()`方法参数中，并调用注入的`userService`来获取数据(例如，从数据库中)。
为了打包 JAX-RS 应用，我们当然需要一个 Maven `pom.xml`文件。在其最简单的形式中，它可以看起来像下面一样:
```
    4.0.0 
    pl.finsys 
    jee7-rest 
    war 
    1.0-SNAPSHOT 
            javax 
            javaee-api 
            7.0 
            provided 
        jee7-rest 
        1.8 
        1.8 
        false 
```
创建 JEE7 REST 服务非常简单，不是吗？通过构建项目并将其部署到符合 JEE 标准的应用服务器，我们已经准备好了几个端点，等待通过`HTTP`调用。但是还有一个更简单更快速的方法。毕竟，在微服务时代，我们希望以最小的开销更快地创建单个组件。Spring Boot 来了。我们现在来看看。
# Spring Boot
Spring 本身是一个非常流行的基于 Java 的框架，用于构建 web 和企业应用。这不仅仅是专注于依赖注入的 Spring Core。Spring Framework 提供了许多特性，可以让开发人员的生活变得更加轻松，并允许您更快地交付所需的特性。名单很长；这里只是几个例子:
*   **春季数据**:简化关系型和 NoSQL 型数据存储的数据访问
*   **春季批次**:提供强大的批次处理框架
*   **春季安全**:提供多种保护应用的方法
*   **春季社交**:支持与 Twitter、脸书、GitHub 等社交网站融合
*   **Spring 集成**:企业集成模式的实现，使用轻量级消息传递和声明性适配器来促进与其他企业应用的集成
但是为什么春天变得如此受欢迎呢？这有几个原因:
*   它使用依赖注入方法，鼓励编写可测试的、松散耦合的代码
*   包含数据库事务管理功能很容易
*   例如，与其他流行的 Java 框架如 JPA/Hibernate 的集成
*   它包括一个最先进的 MVC 框架，用于更快地构建 web 应用，将视图与业务逻辑分开
在 Spring 框架中配置 beans 可以通过多种方式完成，例如 XML 定义文件、Java 注释和代码配置。这可能是一个乏味的过程。此外，我们经常为不同的应用做大量的样板配置。Spring Boot 的诞生是为了解决配置的复杂性。我们可以将 Spring Boot 用于我们自己的目的，开发小型的、独立的、可以运行的服务。它可以是一个可运行的 fat JAR 文件，包含运行应用所需的所有 Java 依赖项。不需要应用服务器或复杂的部署描述符配置。事实上，在幕后，Spring Boot 会为你启动一个嵌入式服务器。当然，您不会被迫使用嵌入式应用服务器。例如，您总是可以构建一个 WAR 文件，将其部署在自己的 Tomcat 或 Wildfly 上。值得了解的是，尽管大多数事情会在运行 Spring Boot 应用时自动发生，但它不是一个代码生成框架。
所有这些是否会让您想起 Docker 容器的简单性和可移植性？当然有，但在应用层面上。正如我们在[第 3 章](03.html)、*中讨论的那样，与微服务*合作，我们正朝着具有更小的、可独立部署的微服务的架构发展。这意味着我们将需要能够快速离开地面，并开始运行新的组件。在使用 Spring Boot 时，我们有很多现成的功能。这些特性是以 Maven 工件的形式交付的，您可以将它包含在您的 Maven `pom.xml`文件中。
下表显示了我们将使用的由 Spring Boot 提供的一些重要的初始项目:
| **项目** | **描述** |
| `spring-boot-starter` | Spring Boot 应用的基本启动器。为自动配置和日志记录提供支持。 |
| `spring-boot-starter-web` | 用于构建基于 Spring MVC 的 web 应用或 RESTful 应用的入门项目。这使用 Tomcat 作为默认的嵌入式 servlet 容器。 |
| `spring-boot-starter-data-jpa` | 为春季数据 JPA 提供支持。默认实现是 Hibernate。 |
| `spring-boot-starter-validation` | 为 Java Bean 验证应用编程接口提供支持。默认实现是 Hibernate Validator。 |
| `spring-boot-starter-test` | 为各种单元测试框架提供支持，如 JUnit、Mockito 和 Hamcrest 匹配器 |
还有很多项目，可能对你有用。我们不打算使用它们，但让我们看看还有什么可用的:
| `spring-boot-starter-web-services` | 开发基于 XML 的网络服务的初始项目 |
| `spring-boot-starter-activemq` | 支持使用活动 MQ 上的 JMS 进行基于消息的通信 |
| `spring-boot-starter-integration` | 支持 Spring 集成，这个框架提供了企业集成模式的实现 |
| `spring-boot-starter-jdbc` | 为使用 Spring JDBC 提供支持。默认情况下，配置 Tomcat JDBC 连接池。 |
| `spring-boot-starter-hateoas` | HATEOAS 代表作为应用状态引擎的超媒体。使用`HATEOAS`的 RESTful 服务除了返回数据之外，还返回与当前上下文相关的其他资源的链接。 |
| `spring-boot-starter-jersey` | JAX-RS 是开发 REST APIs 的 Java EE 标准。泽西岛是默认的实现。这个初始项目为构建基于 JAX 遥感的遥感应用编程接口提供了支持。 |
| `spring-boot-starter-websocket` | `HTTP`是无状态的。Web 套接字允许维护服务器和浏览器之间的连接。这个初始项目为 Spring 网络套接字提供了支持。 |
| `spring-boot-starter-aop` | 为面向方面的编程提供支持。还为高级面向方面编程提供了对 AspectJ 的支持。 |
| `spring-boot-starter-amqp` | 默认为`RabbitMQ`，这个初始项目提供与 AMQP 的消息传递。 |
| `spring-boot-starter-security` | 这个初始项目实现了 Spring Security 的自动配置。 |
| `spring-boot-starter-batch` | 为使用 Spring Batch 开发批处理应用提供支持。 |
| `spring-boot-starter-cache` | 使用 Spring 框架对缓存的基本支持。 |
| `spring-boot-starter-data-rest` | 支持使用 Spring Data REST 公开 REST 服务。 |
让我们用这些好东西来编写我们自己的 Spring Boot 微服务。
# 编码 Spring Boot 微服务
我们知道我们有一些可用的启动器，所以让我们利用它们来节省一些时间。我们将要创建的服务将是简单的 REST 微服务，用于存储和检索数据库中的实体:在我们的例子中是书籍。我们不打算实现身份验证和安全功能，只是为了使它尽可能干净和简单。书籍将存储在内存关系型 H2 数据库中。我们将使用 Maven 构建和运行我们的书店，所以让我们从`pom.xml`构建文件开始。
# Maven 构建文件
正如您将看到的，我们自己的服务的父项目是 spring-boot-starter-parent。这是为基于 Spring Boot 的应用提供依赖和插件管理的父项目。这给了我们很多特性。我们还包括两个启动器:
*   `spring-boot-starter-web`:这是因为我们将使用之前使用 JEE7 JAX-RS 所做的`@Path`注释来创建我们的请求映射(类似于`@GET`或`@POST`映射)
*   `spring-boot-starter-data-jpa`:因为我们要把书保存在内存中的 H2 数据库里
启动器是为不同目的定制的简化依赖描述符。例如，`spring-boot-starter-web`是使用 Spring MVC 构建 web 和 RESTful 应用的开始。它使用 Tomcat 作为默认的嵌入式容器。我们还包括 Spring Boot·马文插件，它允许我们在适当的位置运行应用，而无需构建一个 JAR 或 WAR，或者为将来的部署准备一个 JAR 或 WAR 文件。我们完整的`pom.xml`应该和这个一样:
```
    4.0.0 
    pl.finsys 
    rest-example 
    0.1.0 
        org.springframework.boot 
        spring-boot-starter-
 parent 
        1.5.2.RELEASE 
            org.springframework.boot 
            spring-boot-starter-