-行记录，然后检查一下child表的内容，看看会发生什么事情：
请注意，往child表里插入新的行时，
S
mysql> INSERT
mysql>INSERT INTO
现在，当往 child 表里插入新行时，
CREATE TABLE child
想要查
>
口使用 ON DELETE SET NULL 来代替 ON DELETE CASCADE。这将使 InnoDB 把外键列
par_id | child_id
ENGINE = INNODB;
口
Sql>INSERT
sql>
FOREIGN KEY
外，它可以在索引里多次出现。
KEY不允许包含
在child 表的最初定义中,将 par_id 列定义成 PRIMARY KEY 的一部分。不过 PRIMARY
ON UPDATE SET NULL 配合使用，因此必须把该列的定义更改为允许NULL 值。
child 表里的 par_id 列最初被定义成 NOT NULL。这无法与 ON DELETE SET
表里的行时，把child表里与之匹配的行的外键列（par_id）设置为NULL。
使用ONUPDATESETNULL来代替ONUPDATECASCADE。
(par_id）设置为NULL，而不会删除这些行。
第2章使用SQL管理数据
NULL
NULL
查看这些修改的效果，则需要使用最初的定义重新创建parent 表，并在表中加载相
RIMARYKEY改成UNIQUE索引。UNIQUE索引要求索引I值必须是唯一的，但NULL值除
SELECT
INSERT
223
2
INT NOT NULL,
INT NULL,
*FROM child;
INTO
INTO
INTO
表里能找到的行，
id,
含 NULL 值。因此，在把 par_id改成允许 NULL 值的同时，还需要把
('sampdb
NULL
child_id),
2
child
child
child
child
(par_id,child_id)
（par_id,chi1d_id) vALUES（1,1),(1,2);
(par_id,child_id)
(par_id
'parent'
add
，才允许被插到child表里；否则，
,child_id)
，其行为和最初的定义基本一样。也就是说，只有其
，与原来相比还是有一点区别。
('par_id'）ON DELETE SET NULL
VALUES(4,1);
VALUES(3,1);
。这将使InnoDB在更新parent
d
foreignkey
，因为 par_id 列现在
FOREIGN
：将拒绝插入：
NULL和
---
## Page 141
有以下几个方面的特点。
的查找。全文搜索有 3 种类型。
2.14
STATUS 语句来查看完整的出错消息。
设置为了NULL，这正是ON DELETE SET NULL 约束所指定的效果。
要想对某个给定表进行全文搜索，则必须事先为它创建一个特殊类型的索引，这种索引具
MySQL具备全文搜索的能力，它可以让你在不使用模板匹配操作的情况下进行单词或短语
口全文搜索基于FULLTEXT索引。在MySQL5.5里，这些索引只能针对MyISAM类型的
口自然语言搜索（默认类型）
如果在创建一个带有外键关系的表时遇到了问题，那么可以使用SHOWENGINEINNODB
更新 parent 表里的行也会有类似的效果：
此时，在 child 里表，所有 par_id 列的值为1 的行都未被删除。而 par_id 列的值都被
口全文搜索对
口太短的单词也会被忽略。默认情况下，
口有些内建的常用单词，如“the”
口查询扩展搜索。这种搜索分两阶段进行。第一阶段是自然语言搜索。第二阶段则先把原
口7
如果想要查看某个InnoDB表都有哪些外键关系，
mysql> SELECT *FROM chi1d;
mysql> UPDATE parent SET par_id = 100 WHERE par_id = 2;
置服务器，把这个最小长度设置为其他值。更多相关信息请参考2.14.4节。
（stopword），在进行全文搜索时总是会被忽略掉。
个单词将至少有50%的出现几率，
全文搜索将会忽略掉那些常见词。这里的“常见”指的是“至少在一半的行里都出现
CHAR、VARCHAR和TEXT这几种类型的列。
MyISAM类型的表，因为你可能还没有5.6版本。在FULLTEXT索引里，只能包含
表创建。MySQL5.6引人了对InnoDB的全文搜索支持，但在这里我们仍然是针对
字符串却匹配不到的那些行也找出来。
一次搜索。这种做法扩大了搜索范围，可以把那些与原有搜索字符串相关、但用这些
来的搜索字符串，与在第一阶段的搜索里高度匹配的那些行，连接在一起，然后再进行
个短语。
求，如某个给定的单词必须出现（或不出现）在匹配行里，或者某些行必须恰好包含某
布尔模式搜索。在搜索字符串里那些单词可以包含修饰字符，用以表明某些特定的要
候
过
出包含这些单词的那些行。
使用FULLTEXT搜索
NULL
NULL
NULL
NULL
NULL
在测试表里，你至少需要插入3个行。如果那个表只有一两个行，那么它里面的每
，牢记这一点很重要，
child_id
“单词”的定义是，它们是由字母、数字、撇号和下划线构成的字符序
，尤其是当你在建立测试表，以体验FULLTEXT功能的时
。MySQL 会把搜索字符串解析成一系列的单词，然后搜索
，所以对它进行全文搜索将不会得到任何结果！
“after”和“other”
“太短”指少于4个字符。不过，你可以重新配
，可以使用 SHOW CREATE TABLE语句。
2.14使用FULLTEXT搜索
等。它们都被称为“停用词”
121
---
## Page 142
指定搜索字符串，对表进行自然语言类型的全文搜索。例如：
2.14.1
两个列各算一个，
的名言信息：
全
创建表的脚本，以及一些需要加载到其中的样本数据。
潘
然
因
然
122
会变得更快一些。
后再添加索引的方式，而不是采用将数据加载到已经索引过的表中的方式，那么表的加载过
文搜索的表，那么可以顺便利用一下MyISAM存储引擎的其中一个特性：如果采用先填充表，
为FULLTEXT索
FULLTEXT 索引与其他索引的创建方法大同小异。你可以在开始创建表的时候，在CREATE
在创建好表之后，便可以用运算符 MATCH列出一个或多个用于搜索的列，并用AGAINST（）
CREATE TABLE apothegm
并对它进行填
如果按
Robert
William Shakespeare
Aeschylus
接
Benjamin Franklin
口
heodoreRoosevelt
igueldeCervante
enjamin
enjamin
下来的几个示例将会演示如何使用全文搜索，这些示例首先创建了几个FULLTEXT.索引，
占一个，而两个列的组合需要占一个。
某
在
可以为单个列或多个列创建 FULLTEXT 索引。如果它涉及多个列，基于该索引的搜索将
者通过添加一个通配符来匹配所有以一个给定前缀开头的单词。
符串里的顺序进行短语搜索）。还可以用布尔搜索来匹配那些不包含特定单词的行，或
外的约束条件，如要求所有的单词都必须存在（或者以任何顺序，或者严格按照搜索字
个行与搜索字符串相匹配。如果你使用的是布尔式全文搜索，那么你可以加上一些客
第2章使用SQL管理数据
"blooded"
自然语言FULLTEXT 搜索
l2，而有时想同时搜索col1和co12；那么，这时你需要创建3个索引，即两个列各
个 FULLTEXT 索引所匹配的那些列精确匹配。例如，有时想搜索col1，有时想搜索
所有列上同时进行。反过来也就是说，在进行全文搜索时，你给出的列列表必须和
FULLTEXT
FULLTEXT
FULLTEXT
Burton
Franklin
Graham
索引要求必须使用MyISAM类型的表，所以如果你正在创建一个新的需要使用
这两列加起来算一个。
充和索引：
假设有一个名为apothegm.txt的数据文件，其中内容是一些名人及他们
。一般情况下，全文搜索会匹配整个单词，而不会匹配部分单词。通常情次
(phrase,attribution);
“名言”和“名人加名言”来搜索，那么你需要创建3个FULLTEXT索引：
(attribution),
Bell
es
'apothegm.txt' INTO TABLE apothegm;
(attribution VARCHAR(4O),phrase TEXT) ENGINE = MyISAM;
I light my candle from their torches.
But,
Speaksoftlyandcarry
Remember that time is money
Little strokes fell great oaks
Time as he grows old teaches many lessons
ishard
soft! what light through yonder window breaks?
，根据下面这些语句，可以创建一个名为 apothegm 的
foranemptybagto
come
here.
a big stick
I want you!
stand upright
额
况
---
## Page 143
包含单词“hard”或“sof”
些值，可以在输出列的列表里加上一个MATCH表达式：
照相关程度递减顺序排列的。相关度是一个非负浮点数，其中零代表“毫不相关”。要想查看这
是
列出来的顺序（即phrase，attribution）并不相同。由此说明这里的顺序并不重要。重要的
查询语句里以名字方式列出来的各个列的顺序是：attribution，phrase。这与在创建索引时
找出来的，其中也演示了利用FULLTEXT索引同时搜索多个列的功能。另外还要注意，在这条
，这里必须要有一个FULLTEXT索引，而它正好是由查询命令里列出的那些列组成的。
自然语言搜索能够将包含所有搜索单词的那些行找出来，因此下面这条查询语句将把所有
mysql> SELECT phrase,
当你在WHERE子句里使用MATCH表达式时，对于自然语言类型的全文搜索，其输出行是按
mysql> SELECT COUNT(*) FROM apothegm WHERE MATCH(phrase) AGAINST('time');
如果只想看看某个搜索可以匹配到多少个行，那么可以使用COUNT（*）：
在最后这个示例里，要注意这条查询语句是如何在不同的列里将包含搜索单词的各个行查
mySql> SELECT * FROM apothegm WHERE MATCH(attribution, phrase)
mySql> SELECT *FROM apothegm WHERE MATCH(phrase)AGAINST('time'）;
A soft answer turneth awaywrath
Time as he grows old teaches many lessons
phrase
COUNT（*)
Miguel de Cervantes
Alexander Graham Bell
attribution
Benjamin Franklin
Ilight mycandle from their torches
attribution
attribution
But;
Speaksoftly
Bell,book，and candle
Little strokes
Aeschylus
->FROM apothegm;
->AGAINST('hard
Watson,
AGAINST('bell');
2
andcarrya
come
fell