码
含义
编码
含义
%2e%2e%2f
%2e%2e/
..%2f
%2e%2e%5c
..
%2e%2e
..%5c
%252e%252e%255c
.%255c
..1
..%c0%af
.
.%c1%9c
..
260
---
## Page 286
第
我们来看一个简单的例子，比如有这样一个URL：
8
http://www.testsite.com/download.asp?file=document.pdf
章
这条语句的功能是下载特定目录下的document.pdf文件。如果没有对路径回溯进行检查的
其
话，可以构造特定的URL来下载服务器上的敏感文件：
他
类
http://www.testsite.com/download.asp?file=../../../../windows/win.ini
型
http://www.testsite.com/dowmload.asp?file=../../../../etc/passwd
的
软
工业界最著名的路径回溯漏洞应该算是微软的IIS5服务器中的漏洞CVE-2001-0333。该
件
漏洞被利用的情况如图8.4.4所示。
漏
hp
nt/system32/cmd.exe?/c+dir+c:-MicrosoRt Int
洞
国sn
Verzeichnis von c:\
12.09.2006
16:38
Inetpub
12.09.2006
16:26
Progremos
12,09.2006
17:05
VDOT
2 Datei(en)
2.509.020 Bytes
4 Verzeichnis(se),
9.328.20s.824 Bytes fre1
图8.4.4IIS5服务器中的漏洞
请注意，这里的%c0%af实际上是Unicode形式的反斜杠“/”。当攻击者使用Unicode编
码过的反斜杠进行路径回溯的时候，可以突破IS的目录访问控制机制，访问到文件系统中的
任何数据，例如，本例请求了cmd.exe并跟上了dir参数。
8.5.2范式化与路径回溯
用户输入URL的时候，可以用很多方式来表达同样一个意思，比如表8-5-2中列举出了可
以访问Baidu的几种方法。
表8-5-2Baidu的表示方法
SQL注入攻击测试用例
说
明
http://www.baidu.com
Baidu的域名
http://220.181.6.175
Baidu 的 IP 地址:
http://0xDCB506AF
BaiduIP地址的十六进制表示
在十六进制表示的前面加上一串数字，一些浏览
http://0x123456789DCB506AF
器（如IE）会将前面多余的数字丢弃掉
http:// 3702851247
0xDCB506AF的1进制表示
http://0334.0265.06.0257
BaiduIP地址的八进制表示
261
---
## Page 287
0
IPv6中对于同一个IP地址也有很多种表示方法，比如下面几条IP地址是一样的：
安
2001:0DB8:0000:0000:0000:0000:1428:57ab
全
2001:0DB8:0000:0000:0000::1428:57ab
：
2001:0DB8:0:0:0:0:1428:57ab
软
2001:0DB8:0::0:1428:57ab
件
2001:0DB8::1428:57ab
漏
洞
可以看出，同样一个资源的表达方式是多种多样的，这在给用户带来方便的同时，也使得
分
访问控制系统变得复杂起来。假如您要设计一个企业内部的防火墙系统，对一个指定的URL
析
黑名单列表进行阻止，那一定要考虑到URL形态上的多样性，否则攻击者只要对URL进行简
技
术
单的编码就可以绕过防火墙的匹配规则。
（第
解决这个问题。范式化（Canonicalization）是指将一个路径转换成标准格式的路径，在Windows
2
中，使用GetFullPathNameO或者PathCanonicalizeO函数就可以做到这一点：在Linux中则可以
版
使用cannonicalize_file_name（）这个函数。另外，Java中的File.getCannonicalPathO、java.net.URI
.normalize(）和PHP中的realpathO）函数也可以做到范式化的功能。
在进行访问控制时，应当首先对传入的资源定位的字符串（URL，本地路径，管道路径，
环境变量路径等）进行范式化。
C:\WINDOWS\..\WINDOWS\.\system32\ca1c.exe
C:\WINDOwSV.system32\calc.exe
例如，上面对计算器的定位经过范式化后应该变为唯一范式的资源定位字符串
C:IWINDOWSlsystem32\calc.exe。
综上所述，访问控制应当在范式化过后的资源描述基础上进行，以避免资源描述的多样性
引起的安全问题。
262
---
## Page 288
第 2篇
漏洞利用原理（高级）
据沧海而观众水，则江河之会归可见也；
登泰山而览群岳，则冈峦之本末可知也。
一《意林》
如果您已经学会了三五招擒拿、两三套长拳，不妨和我们一起探索下华山之巅的高手们曾
10多年的演变，双方针锋相对，不断提高的过程本身就是一部耐人寻味的传奇史。本篇我们收
录了近年来Windows平台内存利用技术领域若干次华山论剑的现场实况，欣赏完高手们思维火
花的碰撞或许能够激发您的灵感，说不定明年的BlackHat的演讲台上就能看到您的身影。
---
## Page 289
第9章Windows 安全机制概述
色即是空，空即是色，受想行识，亦复如是
—《般若波罗蜜多心经》
一台图灵机包括4个部分：一条无限长的纸带、一个读写头、一个规则集合（程序）和一
个状态集合（数据）。当图灵机能够把规则集合当作状态集合来读写时，就会发生很多怪诞的
现象，比如图灵机可以自己复制自己！
冯·诺依曼在实现电子计算机时，忽略了图灵机模型中对程序和数据的区分，将程序（规
则集）和数据（状态集）放在了同一个物理设备一内存中。因此，现代电子计算机对图灵机
模型的实现存在着天然的瑕疵。由于没有明确地区分内存中的程序指令（规则）和普通数据（状
态），当年对图灵机自我复制的预言频繁地被黑客攻击所验证，端虫的自我复制与传播就是一
个生动的例子。
漏洞的方源之本就来自于冯·诺依曼机这种“色即是空，空即是色”的对待代码和数据的
态度。高级的变形病毒、软件加壳与脱壳技术等都是基于程序指令可以在运行时当做普通的内
堆栈中的普通内存数据当做程序指令而使用的缺陷；此外，跨站脚本攻击、SQL注入攻击等也
都是利用计算机把数据和代码混消这一天然缺陷而造成的。
虽然加强输入验证、分析数据流、分析控制流等方法在增强系统安全性方面起到了一定效
用数据与代码这一缺陷，而且微软天才的工程师们已经发现了这一点。
在过去的十年中，微软在提高操作系统的安全性方面做着不懈的努力。从Windows98到
WindowsXP，从WindowsXP到WindowsVista，再到最新的Windows7，每个新版本的发布
都会带来安全性质的飞跃。
从普通用户角度来看，微软在安全方面逐步做了如下几点增强。
（1）增加了Windows安全中心，提醒用户使用杀毒软件、防火墙，以及下载最新的安装补
丁等。
（2）为Windows添加PC端的防火墙。
（3）未经用户充许，大多数的Web弹出窗口和Activex控件安装将被禁止。
（4）IntermetExplorer7中增加了筛选仿冒网站功能，具有了钓鱼网站过滤器（PhishingFilter）
的新功能。
（5）添加UAC（UserAccountControl，用户账户控制）机制，可以防正恶意软件和间谋软件
在未经许可的情况下在计算机上进行安装或对计算机进行更改。
（6）集成了WindowsDefender，可以帮助阻止、控制和删除间谍软件以及其他潜在的恶意
---
## Page 290
第
软件。
9
在这些安全功能的保护下，我们操作系统的安全性大大提高了，但是微软所做的工作还远
章
远不止于此。微软还在普通用户看不到的内存保护方面做了很多的工作，下边我们就来看看微
Windows
软十年间都是如何提高内存保护的安全性。
（1）使用GS编译技术，在函数返回地址之前加入了SecurityCookie，在函数返回前首先
检测SecurityCookie是否被覆盖，从而把针对操作系统的栈溢出变得非常困难。
（2）增加了对S.E.H的安全校验机制，能够有效地挫败绝大多数通过改写S.E.H而劫持进
安全
程的攻击。
（3）堆中加入了HeapCookie、SafeUnlinking等一系列的安全机制，为原本就困难重重的
机
制
堆溢出增加了更多的限制。
概
（4）DEP（DataExecutionProtection，数据执行保护）将数据部分标示为不可执行，阻止
述
了栈、堆和数据节中攻击代码的执行。
（5）ASLR（Addressspacelayoutrandomization，加载地址随机）技术通过对系统关键地址
的随机化，使得经典堆栈溢出手段失效。
（6）SEHOP（StructuredExceptionHandlerOverwriteProtection，S.E.H覆盖保护）作为对
安全S.E.H机制的补充，SEHOP将S.E.H的保护提升到系统级别，使得S.E.H的保护机制更为
有效。
傻眼了吧！事实就是这样，微软在我们看不到的地方已经做了很多保护操作系统的工作，
将系统的安全性给予了最大限度的提升，这些安全技术也应用在Windows2003、Windows2008
等服务器的操作系统上。如果以安全性为衡量指标对Windows家族进行分级的话，WindowsXP
SP2以前的操作系统致力于系统的稳定性，忽略了系统的安全性，在这之前的系统可以归为一
级；在WindowsXPSP2、Windows2003系统中加入了独特安全性设计，在安全性上较前辈有
了很大的提高，因此它们属于同一级别：WindowsVista、Windows2008和最新的Windows7
等操作系统中加入了更多的安全机制，从安全性来看它们也是目前Windows家族中安全级别最
高的。WindowsXPSP2以后的各版本内存保护机制汇总如表9-1-1所示。
表9-1-1Windows安全机制汇总
XP
2003
Vista
2008
Win7
GS
安全Cookies
>
变量重排
√
√
√
安全S.E.H
S.E.H句柄验证
√
√
√
→
√
堆保护
安全拆卸
√
√
√
√
安全快表
+
√
√
√
Heap Cookie
>
元数据加密
X
265
---
## Page 291
0
day
续表
安
XP
2003
Vista
2008
Win7
全
DEP
：
NX支持
√
√
√
软
永久DEP
√12
件
默认OptOut
√
漏
洞
ASLR
分
PEB. TEB
J
√
析
堆
×
√
技
栈
×
√
√
术
映像
（第
SEHOP
S.E.H链验证
+
2
√0
版
说明：1.012只有在对应的SP0、SP1、SP2补丁包下有效。
2.“SEHOP虽然属于S.E.H保护机制，但由于它的特殊性故我们将其独立出来。
微软引入的这些安全机制成功地挫败了很多攻击，使得能够应用于Windows的漏洞大大减
少了。但是，智者千虑必有一失，在一些特定的攻击场景中，采用一些高级的漏洞利用技术，
这些安全机制还是可以被绕过的。2008年，AlexanderSotirov和MarkDowd就发表一篇关于
Windows安全机制的文章“BypassingBrowserMemoryProtections”，文中总结了Windows各种
安全机制及其突破方法。
接下来我们将在前辈们的研究基础上一一介绍这些安全机制和黑客们对付这些安全机制
的奇思妙想，带您回顾微软工程师与黑客之间斗智斗勇的故事。
题外话：似乎总是有些浮躁的家伙在用粗鲁的口吻贵难微软的产品安全问题。虽然微
软确实在安全问题上曾经犯过错误，但微软也是这今为止对待安全问题最虚心、最积
极、投入力量最多的软件厂商。他们在公司内部推广安全软件生命周期、开展安全编
码培训活动、他们甚至聘请著名的黑客专门对SQLServer进行攻击测试！在世界各大
著名的安全技术峰会上总能见到微软工程师的身影，除了密切关注BlackHat之外，
微软还自己举办BlueHat，邀请安全专家和黑客进行演讲。Windows的每次安全更新
都是在这种积极的态度下诞生的，其中蕴含的安全机制凝结了天才的工程师们对产品
安全的深度理解，绝对是产品安全技术上的一座座里程碑。
266
---
## Page 292
第10章栈中的守护天使：GS
10.1GS安全编译选项的保护原理
针对缓冲区溢出时覆盖函数返回地址这一特征，微软在编译程序时使用了一个很酷的安全
编译选项一GS，在VisualStudio2003（VS7.0)及以后版本的VisualStudio中默认启用了这个
编译选项。在本书中使用的VisualStudio2008（VS9.0)中，可以在通过菜单中的Project一project
Properties→ConfigurationProperties→C/C++→CodeGeneration→BufferSecurityCheck中对GS
编译选项进行设置，如图10.1.1所示。
Ceafigwaties
Active Gebeg
letfern：Actire(Fin32）
Cor
Properties
Enable String Pooling
end Befers
Enable Wininal Bebuil4
Me
Ies (/G)
Enable C++ Exceptioss
Tes (/EKsc)
Delegting
Femaral
Seeller Type Check
Besie Bentine Checkt
Vota /rrc1,*quiv.t/xrCs)
C/C++
General
tine Librury
bulti-threaded Bebeg BLL (/una)
Defelt
Cade Gan
butter
Tes
（/GS-）
rre
piled Heedert
Enable Eab
Output Piles
Floating Point Wodel
ed Instructica Set
1# 1
Enable Floating Point Exceptions
Br
B De
Custon Duild Step
Chad frhffrmes
laffur Secwity Check
确定消皮用
图10.1.1VS2008中的安全编译选项
GS编译选项为每个函数调用增加了一些额外的数据和操作，用以检测栈中的溢出。
在所有函数调用发生时，向栈帧内压入一个额外的随机DWORD，这个随机数被称做
“canary”，但如果使用IDA反汇编的话，您会看到IDA会将这个随机数标注为"Security
Cookie”。在本书的叙述中将用SecurityCookie来引用这种随机数。
SecurityCookie位于EBP之前，系统还将在.data的内存区域中存放一个SecurityCookie
的副本，如图10.1.2所示。
---