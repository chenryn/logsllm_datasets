worker that can steal the pool operator’s winning ticket with sig-
niﬁcant probability, should a winning ticket be found. This can
help deter outsourcing when individuals are expected to behave
selﬁshly.
One critical drawback of the weakly nonoutsourceable scheme
(and, indeed, of Permacoin [29]) is that a stealing adversary may
be detected when he spends his stolen reward, and thus might be
held accountable through some external means, such as legal pros-
ecution or a tainted public reputation.
For example, a simple detection mechanism would be for the
pool operator and worker to agree on a λ/2-bit preﬁx of the nonce
space to serve as a watermark. The worker can mine by randomly
choosing the remaining λ/2-bit sufﬁx, but the pool operator only
accepts evidence of mining work bearing this watermark. If the
worker publishes a stolen puzzle solution, the watermark would be
easily detectable.
Ideally, we should enable the stealing adversary to evade detec-
tion and leave no incriminating trail of evidence. Therefore, in this
section, we deﬁne a “strongly nonoutsourceable” puzzle, which
has the additional requirement that a stolen ticket cannot be dis-
tinguished from a ticket produced through independent effort.
is
puzzle
DEFINITION 5. A
(tS , tC, te, α, ps)-
strongly nonoutsourceable if it is (tS , tC, te, α, ps)-weakly nonout-
sourceable, and additionally the following holds:
For any (tS , tC, te)-outsourcing protocol (S,C), there exists an
adversary A for the protocol such that the stolen ticket output by A
for payload m∗ is computationally indistinguishable from a hon-
estly computed ticket for m∗, even given the pool operator’s view
in the execution (A,C). Formally, let puz ← G(1λ), let m∗ $←
{0, 1}λ. Consider a protocol execution (A(puz, m∗),C(puz)): let
view∗ denote the pool operator C’s view and ticket∗ the stolen
Let NIZK be a non-interactive zero-knowledge proof system. Also as-
sume that E = (Key, Enc, Dec) is a CPA-secure public-key encryption
scheme.
Let (G(cid:48), Work(cid:48), Verify(cid:48)) be a weakly nonoutsourceable scratch-off puz-
zle scheme. We now construct a strongly nonoutsourceable puzzle
scheme as below.
• G(1λ): Run the puzzle generation of the underlying scheme puz(cid:48) ←
G(cid:48)(1λ). Let crs ← NIZK.Setup(1λ); and let (skE , pkE ) ←
E.Key(1λ). Output puz ← (puz(cid:48), crs, pkE )
• Work(puz, m, t):
Parse puz := (puz(cid:48), crs, pkE ).
ticket(cid:48) ← Work(cid:48)(puz(cid:48), m, t),
Encrypt c ← Enc(pkE ; ticket(cid:48); r).
Set π ← NIZK.Prove(crs, (c, m, pkE , puz(cid:48)), (ticket(cid:48), r))
for the following NP statement:
Verify(cid:48)(puz(cid:48), m, ticket(cid:48)) ∧ c = Enc(pkE ; ticket(cid:48); r)
Return ticket := (c, π).
• Verify(puz, m, ticket);
Parse puz := (puz(cid:48), crs, pkE ), and parse ticket as (c, π).
Check that Verify(crs, (c, m, pkE , puz(cid:48)), π) = 1.
Figure 1: A generic transformation from any weakly nonoutsourceable
scratch-off puzzle to a strongly nonoutsourceable puzzle.
ticket output by A in the execution. Let ticketh denote an honestly
generated ticket for m∗, (ticketh := WorkTillSuccess(puz, m∗)),
and let viewh denote the pool operator’s view in the execution
(S,C(puz)). Then,
∗
(view
, ticket
∗
)
c≡ (viewh, ticketh)
Recall that in Bitcoin, the message payload m typically contains
a Merkle root hash representing a set of new transactions to commit
to the blockchain in this round, including the public key to which
the reward is assigned. Thus to take advantage of the strongly non-
outsourceable puzzle, the stealing worker should bind its substi-
tuted payload m∗ to a freshly generated public key for which it
knows the corresponding private key. It can then spend its stolen
reward anonymously, for example by laundering the coins through
a mixer [8].
In Figure 1, we present a generic transformation that turns any
weakly nonoutsourceable puzzle into a strongly nonoutsourceable
puzzle. The strengthened puzzle is essentially a zero-knowledge
extension of the original – a ticket for the strong puzzle is effec-
tively a proof of the statement “I know a solution to the underlying
puzzle.”
If (GenKey(cid:48), Work(cid:48), Verify(cid:48)) is a (tS , tC, te, α, ps) weakly non-
outsourceable puzzle, then the puzzle described in Figure 1 is a
(tS , tC, te, α + tenc + tNIZK, ps − negl(λ)) strongly nonoutsource-
able puzzle, where tenc + tNIZK is the maximum time required to
compute the encryption and NIZK in the honest Work algorithm.
We next state a theorem that this generic transformation essen-
tially preserves the non-transferability of the underlying puzzle. If
the underlying puzzle (G(cid:48), Work(cid:48), Verify(cid:48)) is δ(cid:48)-non-transferable,
then the derived puzzle through the generic transformation is δ non-
transferable for
µ + δ
(cid:48) ≤
(µ + δ)t
t · t + (tenc + tnizk)(cid:96)
where tenc and tnizk are the time for performing each encryption and
NIZK proof respectively.
Again, due to space restrictions, we defer the proof of this theo-
rem to the full online version of our paper.
685Cheap plaintext option. Although we have shown it is plausible
for a stealing worker (with parallel resources) to compute the zero-
knowledge proofs, this would place an undue burden on honest in-
dependent miners. However, it is possible to modify our generic
transformation so that there are two ways to claim a ticket: the ﬁrst
is with a zero-knowledge proof as described, while the second is
simply by revealing a plaintext winning ticket for the underlying
weakly nonoutsourceable puzzle.
7.
IMPLEMENTATION AND MICRO-
BENCHMARKS
In order to demonstrate the practicality of our schemes, we im-
plemented both our weakly nonoutsourceable and strongly nonout-
sourceable puzzle schemes and provide benchmark results below.
Metrics. We are concerned with two main performance criteria.
First, the size of a ticket and cost of verifying a ticket should be
minimal, since each participant on the network is expected to ver-
ify every ticket independently. Second, in order for our scheme to
be an effective deterrent, the cost and latency required to “steal”
a ticket should be low enough that it is at least plausible for an
outsourcing worker to compute a stolen ticket and propagate it
throughout the network before any other solution is found.
When comparing the veriﬁcation cost of our schemes to that of
the current Bitcoin protocol, we include both the cost due to the
puzzle itself, as well as the total cost of validating a block including
transactions. At present, there are over 400 transactions per block
on average; 4 we assume each transaction carries at least 1 ECDSA
signature that must be veriﬁed. In general, the computational cost
of validating blocks in Bitcoin is largely dominated by verifying
the ECDSA signatures in transactions rather than verifying puzzle
solutions. We measured that the time to verify an ECDSA signa-
ture on a 2.4GHZ Intel CPU is 1.7ms.5 On average, at the time
of writing, a block contains about 350 kilobytes of data and 600
transactions, each with an average of two signatures. 6
7.1 Our Weakly Nonoutsourceable Puzzle
The weakly nonoutsourceable puzzle is straightforward to im-
plement, and its overhead relative to the Bitcoin puzzle consists
only of λ log λ additional hashes; we implemented this in unop-
timized Python and discuss its performance later on. In contrast,
the strongly nonoutsourceable puzzle requires much more care in
implementation due to the NIZK proof, which we will describe
shortly.
We used the SHA-1 hash function throughout our implementa-
tion, since this has a relatively efﬁcient implementation as an arith-
metic circuit [36]. We restricted our focus to the following puzzle
parameters: the signature tree consists of 2h = 210 leaves, and the
number of leaves revealed during a scratch attempt and a claim is
q = q(cid:48) = 10. This provides roughly 50 bits of security for the
non-transferability property.
Performance results. In Table 1 (ﬁrst and second rows), we show
that if we replace Bitcoin’s puzzle with our weakly nonoutsource-
able puzzle, the slowdown for the block veriﬁcation operation will
number
of
per
block:
transactions
4Average
//blockchain.info/charts/n-transactions-
per-block
5Unless otherwise noted, we conducted our measurements over at
least 1000 trials, and omit the error statistic if the standard deviation
is within ±1%.
6 Average block size:
charts/
https://blockchain.info/
https:
be only 2%. More speciﬁcally, while our puzzle veriﬁcation itself
is over a thousand times more expensive than the Bitcoin puzzle,
puzzle veriﬁcation only accounts for a very small percentage of the
overall veriﬁer time. Therefore, the overall performance slowdown
is insigniﬁcant for practical purposes. Likewise, while the size of
the ticket in our scheme is almost a hundred times larger than that
of Bitcoin, the ticket is a small fraction of the total size of a block
when transactions are included.
An adversarial worker can steal a ticket in a marginal amount of
time (only one additional hash in expectation, for example, assum-
ing the worker knows at least a third of the Merkle tree branches
used during scratch attempts). This cost is insigniﬁcant compared
to the expected time for solving a puzzle.
7.2 Our Strongly Nonoutsourceable Puzzle
We next describe more details of our instantiation and imple-
mentation of our strongly nonoutsourceable puzzle, followed by
evaluation.
We implemented our puzzle twice, each time using a different
NIZK libraries: Pinocchio [36] and Libsnark [5]. Both are im-
7 Pinocchio in-
plementations of a generic [20] NIZK scheme.
cludes a compiler that generates an arithmetic circuit from high-
level C code, while Libsnark [5] provides a library C++ for com-
posing systems of equations. We used a combination of hand-tuned
and generated-from-C-code arithmetic circuits, and developed an
adapter for Libsnark to use Pinocchio’s arithmetic circuit ﬁles.
In the full online version of our paper we discuss a concrete pa-
rameterization of our scheme. We implemented an optimization to
improve the parallel running time of the prover. Essentially, we
break the overall statement into many substatements, all of which
can be proven concurrently; the overall proof consists of a proof
for one “Type II” statement, and proofs for some number of “Type
I” statements. The number of Type I statements is determined by a
parameter C (smaller C means a larger number of smaller circuits).
We discuss this in more detail in the full online version.
Performance results. The prover and veriﬁer costs for our strongly
nonoutsourceable implementation are presented in Tables 1and 2.
Each of the bottom four rows of Table 1 and top four rows of Ta-
ble 2 corresponds to a different setting of the parameter C, the num-
ber of 160-bit blocks (of the underlying ticket) checked by each
substatement (smaller values of C indicate higher degrees of paral-
lelism). The total number of substatements required (#) is reported
along with computing time per circuit for the prover and veriﬁer.
We also report the total veriﬁcation time over all the statements,
as well as the total proof size. Note that our benchmarks are for a
sequential veriﬁer, although veriﬁcation could also be parallelized.
The bottom row is for the second type of statement, which does not
depend on C. Due to the longer time required to compute these
proofs, the quantities reported are averaged over only three trials.
The reader may immediately notice the vast improvement in pro-
ver performance using Libsnark rather than Pinocchio for our im-
plementation; in particular the speedup is much greater than previ-
ous reports (i.e, several orders of magnitude vs one order of mag-
nitude) [5]. This is readily explained with reference to the highly
sequential nature of our statements, which yields deep and highly-
connected circuits. Proﬁling reveals that the cost of generating our
proofs in Pinocchio is dominated by the polynomial interpolation
7 Libsnark [5] implements several optimizations over the original
GGPR [20] scheme. The version we used includes an optimization
that turns out to be unsound. [35] Libsnark has since been patched
to restore soundness; the patch is reported only to incur an overhead
of 0.007% on typical circuits, hence we report our original ﬁgures.
686Table 1: Estimated puzzle and block veriﬁcation costs for various schemes
Scheme
Bitcoin
Weak
Strong (C = 4)
Strong (C = 3)
Strong (C = 2)
Strong (C = 1)
Verif.
11.7µs
15.1ms
0.48s
0.62s
0.93s
1.68s
Puzzle only
Ratio
1
1.3e3
4.1e+04
5.3e+04
8e+04
1.4e+05
Size
80B
6.6KB
10.8KB
17.0KB
23.2KB
29.4KB
Transactions Included
Ratio Verif. Ratio
1
1.02
1.71
1.91
2.37
3.47
0.68s
0.70s
1.16s
1.30s
1.61s
2.36s
1
83
135
213
290
368
Size Ratio
1
1.02
1.03
1.05
1.07
1.08
350KB
357KB
361KB
367KB
373KB
379KB
step, which greatly exceeds that of simpler circuits with compara-
ble number of gates [36].
Keeping in mind our goal is to prove it is plausible for a worker
to produce stolen ticket proof with low latency, we believe it is rea-
sonable to assume that such a worker has access to parallel comput-
ing resources. Using Libsnark, the combination of our statement-
level parallelism and the parallel SNARK implementation leads to
proof times in under 15 seconds at the C = 2 setting. Since the
average time between puzzle solutions in the Bitcoin network is 10
minutes, this can be a wholly plausible deterrent. At this setting,
veriﬁcation of an entire proof takes under one second. Since ap-
proximately 144 Bitcoin puzzle solutions are produced each day, it
would take approximately two minutes for a single-threaded veri-
ﬁer to validate a day’s worth of puzzle solutions.
Assuming computational power can be rented at $1.68 per hour
(based on Amazon EC2 prices for the c3.8xlarge used in our trials,
which provides 32 cores), it would cost an attacker less than $10
in total to produce a stolen ticket proof within 20 seconds. This is
vastly less than reward for a puzzle solution, which at the current
time is approximately $8,750.
7.3 Cryptocurrency Integration
We now discuss several practical aspects of integrating nonout-
sourceables puzzles within existing cryptocurrency designs.
Integrating the puzzle with Bitcoin-like cryptocurrencies.
In
our deﬁnitions, we indicate that GenPuz(1λ) must be a random