缺少 ，就会导致继续执⾏下⼀个 或 分⽀。
break case default
switch (grade) {
case 0:
printf("False");
case 1:
printf("True");
break;
default:
printf("Illegal");
}
上⾯示例中， 的部分没有 语句，导致这个分⽀执⾏完以后，不会跳出 结构，继续执
case 0 break switch
⾏ 分⽀。
case 1
利⽤这个特点，如果多个 分⽀对应同样的语句体，可以写成下⾯这样。
case
switch (grade) {
case 0:
case 1:
printf("True");
break;
default:
printf("Illegal");
}
上⾯示例中， 分⽀没有任何语句，导致 和 都会执⾏同样的语句体。
case 0 case 0 case 1
后⾯的语句体，不⽤放在⼤括号⾥⾯，这也是为什么需要 的原因。
case break
分⽀⽤来处理前⾯的 case 都不匹配的情况，最好放在所有 case 的后⾯，这样就不⽤写
default break
语句。这个分⽀是可选的，如果没有该分⽀，遇到所有的 case 都不匹配的情况，就会直接跳出整个
switch 代码块。
while 语句 #
语句⽤于循环结构，满⾜条件时，不断执⾏循环体。
while
while (expression)
statement
上⾯代码中，如果表达式 为⾮零值（表示真），就会执⾏ 语句，然后再次判断
expression statement
是否为零；如果 为零（表示伪）就跳出循环，不再执⾏循环体。
expression expression
while (i  0);
上⾯示例中，变量 先减去 1，再判断是否⼤于 0。如果⼤于 0，就继续减去 1，直到 等于 为⽌。
i i 0
如果循环部分有多条语句，就需要放在⼤括号⾥⾯。
i = 10;
do {
printf("i is %d\n", i);
i++;
} while (i  0; i--)
printf("i is %d\n", i);
上⾯示例中，循环变量 在 的第⼀个表达式⾥⾯声明，该变量只⽤于本次循环。离开循环体之后，就
i for
会失效。
条件部分的三个表达式，每⼀个都可以有多个语句，语句与语句之间使⽤逗号分隔。
int i, j;
for (i = 0, j = 999; i  1) {
if (n > 2) break;
printf("hello\n");
}
上⾯示例中， 语句是⽆效的，因为它不能跳出外层的 结构。
break if
continue 语句 #
语句⽤于在循环体内部终⽌本轮循环，进⼊下⼀轮循环。只要遇到 语句，循环体内部
continue continue
后⾯的语句就不执⾏了，回到循环体的头部，开始执⾏下⼀轮循环。
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
printf("%d, %d\n", i, j);
continue;
}
}
上⾯示例中，有没有 语句，效果⼀样，都表示跳到下⼀个 。
continue j
while ((ch = getchar()) != '\n') {
if (ch == '\t') continue;
putchar(ch);
}
上⾯示例中，只要读到的字符是制表符（ ），就⽤ 语句跳过该字符，读取下⼀个字符。
\t continue
goto 语句 #
goto 语句⽤于跳到指定的标签名。这会破坏结构化编程，建议不要轻易使⽤，这⾥为了语法的完整，介绍
⼀下它的⽤法。
char ch;
top: ch = getchar();
if (ch == 'q')
goto top;
上⾯示例中， 是⼀个标签名，可以放在正常语句的前⾯，相当于为这⾏语句做了⼀个标记。程序执⾏
top
到 语句，就会跳转到它指定的标签名。
goto
infinite_loop:
print("Hello, world!\n");
goto infinite_loop;
上⾯的代码会产⽣⽆限循环。
goto 的⼀个主要⽤法是跳出多层循环。
for(...) {
for (...) {
while (...) {
do {
if (some_error_condition)
goto bail;
} while(...);
}
}
}
bail:
上⾯代码有很复杂的嵌套循环，不使⽤ goto 的话，想要完全跳出所有循环，写起来很麻烦。
goto 的另⼀个⽤途是提早结束多重判断。
if (do_something() == ERR)
goto error;
if (do_something2() == ERR)
goto error;
if (do_something3() == ERR)
goto error;
if (do_something4() == ERR)
goto error;
上⾯示例有四个判断，只要有⼀个发现错误，就使⽤ goto 跳过后⾯的判断。
注意，goto 只能在同⼀个函数之中跳转，并不能跳转到其他函数。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
数据类型 语⾔教程 ⽹道
- C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
C 语⾔的每⼀种数据，都是有类型（type）的，编译器必须知道数据的类型，才能操作数据。所谓 “类
型”，就是相似的数据所拥有的共同特征，那么⼀旦知道某个值的数据类型，就能知道该值的特征和操作⽅
式。
基本数据类型有三种：字符（char）、整数（int）和浮点数（float）。复杂的类型都是基于它们构建的。
字符类型 #
字符类型指的是单个字符，类型声明使⽤ 关键字。
char
char c = 'B';
上⾯示例声明了变量 是字符类型，并将其赋值为字⺟ 。
c B
C 语⾔规定，字符常量必须放在单引号⾥⾯。
在计算机内部，字符类型使⽤⼀个字节（8 位）存储。C 语⾔将其当作整数处理，所以字符类型就是宽度
为⼀个字节的整数。每个字符对应⼀个整数（由 ASCII 码确定），⽐如 对应整数 。
B 66
字符类型在不同计算机的默认范围是不⼀样的。⼀些系统默认为 到 ，另⼀些系统默认为 到
-128 127 0
。这两种范围正好都能覆盖 到 的 ASCII 字符范围。
255 0 127
只要在字符类型的范围之内，整数与字符是可以互换的，都可以赋值给字符类型的变量。
char c = 66;
char c = 'B';
上⾯示例中，变量 是字符类型，赋给它的值是整数 66。这跟赋值为字符 的效果是⼀样的。
c B
两个字符类型的变量可以进⾏数学运算。
char a = 'B';
char b = 'C';
printf("%d\n", a + b);
上⾯示例中，字符类型变量 和 相加，视同两个整数相加。占位符 表示输出⼗进制整数，因此输
a b %d
出结果为 133。
单引号本身也是⼀个字符，如果要表示这个字符常量，必须使⽤反斜杠转义。
char t = '\'';
上⾯示例中，变量 为单引号字符，由于字符常量必须放在单引号⾥⾯，所以内部的单引号要使⽤反斜杠
t
转义。
这种转义的写法，主要⽤来表示 ASCII 码定义的⼀些⽆法打印的控制字符，它们也属于字符类型的值。
：警报，这会使得终端发出警报声或出现闪烁，或者两者同时发⽣。
\a
：退格键，光标回退⼀个字符，但不删除字符。
\b
：换⻚符，光标移到下⼀⻚。在现代系统上，这已经反映不出来了，⾏为改成类似于 。
\f \v
：换⾏符。