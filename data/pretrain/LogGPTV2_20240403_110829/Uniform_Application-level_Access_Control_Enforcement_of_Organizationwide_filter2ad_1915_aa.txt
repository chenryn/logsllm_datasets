# Uniform Application-level Access Control Enforcement of Organization-wide Policies

**Authors:**
- Tine Verhanneman
- Frank Piessens
- Bart De Win
- Wouter Joosen

**Affiliation:**
Katholieke Universiteit Leuven, Department of Computer Science
Celestijnenlaan 200A, 3001 Leuven, Belgium
Emails: tine.verhanneman@cs.kuleuven.be, frank.piessens@cs.kuleuven.be, bart.dewin@cs.kuleuven.be, wouter.joosen@cs.kuleuven.be

## Abstract

The application developer is responsible for providing the application logic. Fine-grained and expressive access control policies on application resources need to be enforced at the application level. Enforcing a single, organization-wide policy across diverse applications is challenging with current technologies. This challenge arises from the poor delineation of responsibilities between the application deployer and the security officer, which hampers centralized policy management and compromises the uniformity of policy enforcement.

To address this issue, we introduce the concept of an **access interface** as a contract between an organization-wide authorization engine and the various applications that require its services. The access interface supports the central management of the policy by the security officer. Through a **view connector**, the application deployer ensures that each application complies with this contract, enabling uniform policy enforcement.

## 1. Introduction

Many applications require the enforcement of expressive access control policies that consider application state. In an organizational context, where a single, organization-wide policy must be enforced, support should be provided for centralized policy administration and uniform enforcement across all deployed applications.

Multiple stakeholders are involved in enforcing an access policy:
- The **security officer** manages the policy centrally.
- The **application deployer** tunes the access control enforcement for each application to ensure the policy can be enforced.
- The **organization-wide authorization engine** makes access control decisions, which may be developed independently of specific application settings and provided by an authorization engine provider.

Current technologies poorly support the delineation of responsibilities between the security officer and the application deployer. In practice, the application deployer bears complete responsibility for the uniform enforcement of the policy, making centralized policy management difficult, especially if the policy is subject to frequent changes.

This paper introduces an abstraction layer, called the **access interface**, which captures the requirements an application must meet to enforce the organization-wide policy. The access interface explicitly includes the additional information needed to evaluate access requests, abstracting from application-specific details. It can be specified by the security officer, who is responsible for defining and centrally managing the policy.

The application deployer binds the access interface to each application using application-specific **view connectors**. A view connector specifies how the application fulfills the requirements set forth in the access interface and how access requests within the application are translated to the access interface. A prototype has been implemented as an extension of an aspect-oriented application container, where the view connector acts as a deployment descriptor.

The remainder of the paper is organized as follows:
- Section 2 provides a detailed motivation, illustrated by a case in the healthcare application domain.
- Section 3 presents the access interface approach.
- Section 4 discusses the approach.
- Section 5 describes the prototype.
- Section 6 gives an overview of related work.
- Section 7 draws conclusions.

## 2. Detailed Motivation

### 2.1. High-Level Policy

Healthcare organizations must ensure that appropriate technical and organizational measures are in place to protect patient data. Based on the principles of least privilege and minimum necessary, the disclosure of healthcare information should be limited to the minimum necessary to accomplish the intended purpose.

We discuss a subset of the security policy of an academic hospital in Belgium. These rules are typical for access control policies in a medical context. Our setting involves a hospital with a large number of physicians and associated general practitioners. The following rules deal with accesses to a contact, which is a logical unit of medical data.

**Rule 1:** A physician will be granted access to a patient’s data if a contact exists to which they were assigned. The access rights are valid only until 30 days after the contact was closed.

The policy allows overruling the access decision, for example, for emergency access, provided that it is possible to hold physicians accountable for any access granted based on this rule.

**Rule 2:** The system provides the possibility to overrule the access decision, on condition that the user requesting access specifies a reason. The reason, the requesting user’s name, the patient’s name, and some context information (time, place) are logged.

To improve communication between the patient, their general practitioner (GP), and the team of caregivers, view access is granted to the patient’s GP.

**Rule 3:** The patient’s general practitioner has view access to all the patient’s contacts, whether these contacts have been closed or not.

These three rules serve as the basis for further discussion.

In the following paragraphs, roles and permissions (objects and operations) are identified (conforming to RBAC [12]) as a first step towards implementing the policy.

**Roles:**
- **Physician:** A staff member and licensed medical practitioner (e.g., a specialist).
- **General Practitioner (GP):** Maintains an overview of the patient’s social background, medical history, and current health condition and acts as a confidant for the patient.

**Permissions:**
- The policy concerns objects representing identifiable medical data.
- The status of medical data can be open or closed, depending on whether the contact, the data is part of, has been closed or not.
- The operations that can be carried out on a medical data object are restricted to view, append, and close. The latter is invoked by the patient’s responsible physician to close the contact.

Pure RBAC lacks the granularity to enforce the rules mentioned earlier. For an access decision, the relationship between the user requesting access and the patient whose data is about to be accessed should also be considered. Table 1 summarizes the policy rules and illustrates that only the responsible physician is allowed to close the medical data of their patient.

### 2.2. Enforcing the Policy in Applications

The organization-wide policy specified above must be enforced in all applications running in the hospital, such as an appointment and prescription system. Given the increased use of information technology in healthcare, the number of applications can be quite high.

We describe a simplified model of one example application: an Integrated Care Pathways (ICP) application. An ICP is a predefined plan for care relating to a certain diagnosis, serving as a guideline to organize care more effectively and efficiently. Upon commencing the treatment, the responsible physician instantiates an ICP for their patient and plans and executes the steps as the treatment proceeds. These steps include examinations, medication prescriptions, and notes. Figure 1 shows a simplified class diagram for the ICP application. The medical data to protect is contained within the ICP and its associated steps. The application keeps a reference to both the GP of the patient and the responsible physician.

### 2.3. Problems When Implementing and Managing the Policy

Before elaborating on the challenges of application-level policy enforcement, two important stakeholders are introduced:
- **Security Officer:** Draws up and manages the policy without needing extensive knowledge of the internal operation of different applications.
- **Application Deployer:** Tunes the access control enforcement by the application, ensuring it conforms to the policy.

How should an organization-wide policy, like the one presented in Section 2.1, be enforced in the application? The deployer must translate the high-level, organization-wide policy into application terms, often through deployment descriptors, configuration files, or code. This typically results in a series of lower-level rules, indicating for each type of object which methods may be invoked by whom. For example, a low-level rule might state that a physician is allowed to invoke `getPatient()` on all objects of the class `ICP`.

Once the high-level policy is defined by the security officer, the burden is placed entirely on the application deployer to uniformly translate this policy into application terms for each application deployed within the organization, which is a very intricate job.

This lack of an abstraction layer between an application and the security logic also becomes apparent when using a common organization-wide authorization engine. Application-specific access requests need to be translated into terms understood by the engine. An ad hoc approach involves conveying labels to the authorization engine, which abstract the action and/or object being accessed.

Uniformly enforcing an access policy becomes harder as policy rules are frequently updated, added, or removed. The application deployer must re-translate the high-level policy and ensure that the access control enforcement points and the information passed to the authorization engine (if used) are adapted to reflect the updated policy. Consider the following additional rules:

**Rule 4:** Each time the GP accesses their patient’s medical data, the responsible physician is notified of this access.

**Rule 5:** Psychiatric and human heredity records are classified as highly sensitive and cannot be viewed by the GP.

For Rule 4, the responsible physician, and for Rule 5, the sensitivity level of the data need to be conveyed to the authorization engine. The deployer faces similar problems when the application itself changes, e.g., due to code refactoring.

### 2.4. Requirements

We define the major requirements for our approach to integrate access control enforcement in applications. These requirements are based on [4]:

1. **Expressiveness of Policies:** The expressiveness of the policies that can be enforced should not be constrained. In practice, the granularity of the policy that can be specified should be small enough to encompass the application resources to be protected. The variety and amount of information serve as criteria for the expressiveness of the supported policies. For example, the state of a workflow process, the time, or other contextual information may be relevant when making an access control decision.

2. **Separation of Concerns:** Separation of concerns must be supported by clearly delineating the responsibilities of the stakeholders identified in Section 2.3. This separation is key to supporting evolution, which encompasses both manageability and extensibility.

3. **Uniformity Across Multiple Applications:** Multiple applications that obey the same security policy must be treated and described uniformly. Uniformity requires support for the central management of an organization-wide policy and the enforcement of a single policy in diverse applications. In short, the goal is to write the policy once and enforce it everywhere.

Any proposed design should also have no adverse effects on other important properties of an access control infrastructure, such as performance and scalability. We return to this point in the discussion section.

## 3. Proposed Solution

In this section, we describe our solution. As shown in the overview in Figure 2, an organization-wide authorization engine is used to evaluate access requests.

Two new concepts are introduced as part of this solution:
- **Access Interface:** Describes explicitly what the authorization engine expects from applications to make access decisions. Such an access interface should be relevant to the application and the policy.
- **View Connector:** Ensures that each application complies with the access interface, enabling the uniform enforcement of the policy.

The access interface and view connector together provide a clear and manageable way to enforce an organization-wide policy across diverse applications.