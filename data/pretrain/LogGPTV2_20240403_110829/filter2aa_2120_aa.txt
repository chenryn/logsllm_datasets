# The Dark Side of Winsock - Lecture Notes
(C) 2005 Jonathan Levin, All Rights Reserved

## Introduction & Nomenclature

### Overview
- **IP Communications and Sockets**: IP communications are typically implemented using the socket API. A socket is a transport endpoint used for sending and receiving data. Applications interact with sockets similarly to how they handle file descriptors, while the operating system handles the fragmentation and encapsulation of data.
- **Prerequisites**: This lecture assumes you have prior experience with sockets, as detailed in Stevens' works (e.g., "TCP/IP Illustrated" and "UNIX Network Programming").

### UNIX vs. Windows Sockets
- **UNIX Sockets**: In UNIX, sockets closely follow the Berkeley (BSD) model.
- **Windows Sockets (Winsock)**:
  - **Winsock 1.x**: A close adaptation of the BSD socket API.
  - **Winsock 2.x**: Introduced new features such as asynchronous calls, callbacks, overlapped I/O, and the Layered Service Provider (LSP) architecture.

### Layered Service Provider (LSP) Architecture
- **LSP Functionality**: The LSP architecture in Winsock provides powerful hooking capabilities, enabling interception, eavesdropping, or rerouting of almost all IP-based traffic on Windows platforms.
- **Focus of the Talk**: This lecture will explore both legitimate and less legitimate applications of the LSP.

## Winsock 2 Architecture

### Multi-Layered Design
- **Winsock 2 API**: Provides the main entry point for applications.
- **Transport Driver Interface (TDI)**: Bridges calls to lower levels.
- **Network Driver Interface Specification (NDIS)**: Abstracts hardware, allowing the use of multiple or different interfaces simultaneously.
- **NetBT**: Used by Windows Workstation and Server services for file and print sharing, bypassing traditional Winsock calls.

### Service Providers
- **Types of Providers**:
  - **Transport Providers**: Handle connection setup and data transfer, providing features like QoS and error handling.
    - **Examples**: `rsvpsp.dll` (RSVP QoS) and `mswsock.dll` (Winsock core).
  - **Namespace Providers**: Provide name resolution mechanisms (e.g., `getXXXbyYYY` functions).
    - **Examples**: TCP/IP, NT DS, and NLA namespaces.

### Installing Custom Providers
- **API Functions**:
  - **Transport Providers**:
    ```c
    int WSPAPI WSCInstallProvider(
        IN LPGUID lpProviderId,
        IN const WCHAR FAR * lpszProviderDllPath,
        IN const LPWSAPROTOCOL_INFOW lpProtocolInfoList,
        IN DWORD dwNumberOfEntries,
        OUT LPINT lpErrno
    );
    int WSPAPI WSCDeinstallProvider(
        IN LPGUID lpProviderId,
        OUT LPINT lpErrno
    );
    ```
  - **Namespace Providers**:
    ```c
    INT WSPAPI WSCInstallNameSpace(
        IN LPWSTR lpszIdentifier,
        IN LPWSTR lpszPathName,
        IN DWORD dwNameSpace,
        IN DWORD dwVersion,
        IN LPGUID lpProviderId
    );
    INT WSPAPI WSCUnInstallNameSpace(
        IN LPGUID lpProviderId
    );
    ```

### Enumerating and Reordering Providers
- **SPOrder.exe and SPOrder.dll**:
  - **SPOrder.exe**: Utility from the Platform SDK that enumerates service providers.
  - **SPOrder.dll**: Allows reordering of service providers using registry functions.
    ```c
    int WSPAPI WSCWriteProviderOrder(
        IN LPDWORD lpwdCatalogEntryId,
        IN DWORD dwNumberOfEntries
    );
    int WSPAPI WSCWriteNameSpaceOrder(
        IN LPGUID lpProviderId,
        IN DWORD dwNumberOfEntries
    );
    ```

### Layered Service Providers (LSP)
- **Enhancing Transport Providers**: LSPs can be layered on top of base transport providers to add functionalities like QoS, encryption, and security.
- **Chaining Providers**: As long as all providers in the chain support the SPI, any number of providers can be chained.

### Enumerating Protocols
- **WSCEnumProtocols Function**:
  ```c
  int WSPAPI WSCEnumProtocols(
      IN LPINT lpiProtocols,
      OUT LPWSAPROTOCOL_INFOW lpProtocolBuffer,
      IN OUT LPDWORD lpdwBufferLength,
      OUT LPINT lpErrno
  );
  ```
  - **Usage**: Retrieves information about available transport protocols.
  - **Parameters**:
    - `lpiProtocols`: Array of protocol IDs to enumerate, or NULL for all.
    - `lpProtocolBuffer`: Buffer for `WSAPROTOCOL_INFOW` structs.
    - `lpdwBufferLength`: In/out parameter specifying buffer size.
    - `lpErrno`: Out parameter holding error code, if any.
  - **Return Value**: Number of enumerated protocols.

### Example Code
- **Utility Function**:
  ```c
  char *ExpandServiceFlags(DWORD serviceFlags) {
      // Utility function to interpret service flags
      char *serviceFlagsText = (char *) malloc(2048);
      memset(serviceFlagsText, '\0', 2048);
      // Further implementation to convert flags to text
      return serviceFlagsText;
  }
  ```

This document provides a comprehensive overview of the Winsock 2 architecture and its dark side, focusing on the Layered Service Provider (LSP) architecture and its potential uses.