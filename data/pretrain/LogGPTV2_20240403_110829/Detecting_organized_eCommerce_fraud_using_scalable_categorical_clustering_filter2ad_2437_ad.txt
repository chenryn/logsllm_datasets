I (%) CFR (%)
0.8
1.2
1.1
3.3
2.4
20.5
14.1
10.5
7.1
0.9
42.1
51.9
1.2
2.2
7.7
99.8
91.6
39.2
51.4
30.3
time
185s
1h31
38s
38s
158s
20m
1h31
7h44
3h08
1h48
“modes” and calculates the distance between each element-mode
pair. It assigns each element to the cluster that has the closest pair-
wise distance to its mode. Modes and clusters are updated over
several iterations. Kmodes uses Hamming as distance metric and
its time complexity is O(n × k). We use the PyPi implementation of
Kmodes [42].
ROCK [20] is a clustering algorithm that uses a concept of “neigh-
bor”. Two elements are neighbors if the distance between them is
lower than a threshold θ. Then, if two elements have enough com-
mon neighbors they are placed in the same cluster. ROCK uses
the Jaccard index as distance metric and its time complexity is
O(n2 × loд(n) + n2). We adjust the ROCK implementation from [38]
to accommodate for categorical data.
7.3 Performance analysis
We cluster the 10 TestF-15K subsets (15,000 orders each) and aver-
age I, CFR and t over the 10 runs. ROCK was not able to cluster
15,000 elements in a reasonable amount of time and its results are
computed on a random sample of 5,000 elements from TestF-15K.
These results are summarized in Tab. 1 Kmodes is not able to gen-
erate a clustering with low impurity (I > 0.1) despite the high
number of clusters we try to generate (up to k =12,000 as generated
by AggloClust). SampleClust generates a clustering with low
impurity in short time. However, it clusters only a very small num-
ber of frauds (CFR 1h30). AggloClust is the
algorithm providing the best trade-off between impurity and CFR.
It clusters over half of the frauds with an impurity close to 1%. Its
computation time of 1h31 is prohibitive for a fairly small dataset.
RecAgglo has the second lowest computation time (3 minutes)
and the clusters it generates have the lowest impurity of all algo-
rithms (I = 0.008). RecAgglo achieves high CFR = 0.421, which
is only 10 percentage points lower than the CFR of AggloClust.
RecAgglo meets R2 with its low impurity and R3 with its relatively
high CFR.
8
Table 2: Performance of RecAgglo at clustering real-world
orders from 5 countries. Different delays for obtaining fraud
labels (1 day/30 days). Cluster impurity (I), ratio of unlabeled
(CFRu) and overall (CFR) frauds clustered. Ratio of legitimate
orders clustered (CLR). Frauds are clustered 3-7 times more
than legitimate orders. Clusters do not mix legitimate or-
ders and frauds.
Dataset
DE-real
CH-real
NL-real
BE-real
FR-real
Overall
1 day delay for labels
I
0.9
2.9
1.2
1.2
0.3
1.3
CFR CFRu CLR
9.6
51.9
17.7
49.8
7.9
34.8
49.8
13.0
7.1
50.4
49.7
10.9
43.4
45.8
34.8
41.8
44.1
43.5
30 days delay for labels
CFR CFRu CLR
I
9.6
52.8
0.8
17.8
52.1
2.6
7.9
33.1
1.0
1.1
48.6
13.0
7.1
47.7
0.2
1.1
50.2
11.0
33.3
37.3
26.0
29.9
32.1
33.7
in parallel of any existing detection system (as depicted in Fig. 1)
and does not take into account the fraud detection pipeline that
Zalando has already developed. The evaluation of the incremental
value of RecAgglo with respect to the existing Zalando pipeline is
not in the scope of this paper.
8.1 Prioritizing screening
To effectively prioritize screening we must provide human analysts
with a manageable amount of orders that contains a large portion
of frauds. If we screen only clusters generated by RecAgglo, these
clusters must contain a large amount of fraud (maximize CFR) and
a low amount of legitimate orders (minimize CLR). CLR is the ratio
of clustered legitimate orders, equivalent to CFR but for legitimate
orders. Considering our real-world scenario, we cluster orders in
Ou ∪ Of using RecAgglo. We cluster the merged sets together
since frauds from Ou can be related to frauds from Of . We want our
clusters to maximize CFRu, which is the CFR computed solely on
Ou, i.e., the portion of fraudulent orders form Ou that are clustered.
Recall that we want our clusters to have low impurity I and to keep
a low CLR to reduce the workload of human analysts.
We take orders from each day in the datasets DE-real, CH-real,
NL-real, BE-real and FR-real to create 35 sets Ou per country. We
create associated sets Of of frauds from a prior period of 60 con-
secutive days using DE-bg, CH-bg, NL-bg, FR-bg and BE-bg. We
consider two scenarios for composing Of that depict the delay in
obtaining fraud labels. The first scenario assumes a one day delay
meaning that Of contains frauds from the period of 60 days ending
when Ou starts. The second scenario assumes a 30 days delay mean-
ing that Of contains frauds from a period ending 30 days before
Ou ends. We selected 30 days because it is a sufficient delay for
preliminary identification of orders being in payment default. We
cluster the 35 resulting sets Ou ∪ Of for each country and present
averaged I, CFR, CFRu and CLR per country in Tab. 2.
RecAgglo produces clusters having low impurity which varies
depending on the country. Notably, there is a 10-fold difference
between Switzerland (I = 2.9%) and France (I = 0.3%). This shows
that legitimate orders from, e.g., Switzerland or Belgium, are more
similar to frauds than this is the case in France or Germany. The
CLR is 3- to 7-times lower than the CFR showing that RecAgglo
Figure 5: Computation time (averaged over 5 runs) vs. sam-
ple size for 5 clustering algorithms. Only SampleClust and
RecAgglo can scale to large datasets.
We timed the clustering of an increasing set of orders from DE-
real (up to n = 300, 000) to assess the scalability of these algorithms.
We report the running time averaged over 5 runs in Fig. 5. We use
settings from Tab. 1 providing the lowest computation time: Sam-
pleClust (δmax = 0.5, ρs = 0.5) and ROCK (θ = 0.45, t = 0.40). For
Kmodes, we use k = min(n/2, 5000), bounding k to 5,000 to limit
the complexity of Kmodes (function of k).
ROCK, AggloClust and Kmodes cannot process 50,000 orders
in less than 5 hours. Their complexity is at least quadratic, which
prevent scaling to large datasets. SampleClust is the fastest al-
gorithm, it clusters 300,000 samples in less than one hour. Finally,
we see that RecAgglo scales to medium-size datasets despite its
high worst-case complexity (cf. Sect. 3.3). In our specific use case of
clustering orders, RecAgglo is much faster than algorithms with
quadratic complexity because it requires only 2-5 recursions (in-
stead of n in the worst case) to obtain a final clustering that meets
our goodness criterion. It is able to cluster 100,000 orders in one
hour and its computation time increases almost linearly with the
set size: one hour more per additional 50,000 orders. RecAgglo
processes 300,000 samples in 5 hours, which is the number of orders
received by Zalando daily. RecAgglo addresses C4 and it meets
the low computation time requirement R4: it can be used in a
real-world deployment setting to cluster frauds.
8 REAL-WORLD FRAUD DETECTION
We assess the performance of RecAgglo for our applied cases
of preventing organized fraud: A1 prioritizing screening and A2
automated fraud cancellation. We take the following real-world
scenario and we evaluate it using our real-world datasets. We take
a set of unlabeled orders Ou placed over one day (e.g., in a 24h
window). We have access to a set of labeled fraudulent orders Of
from an earlier time period (e.g., more than one day old). Our goal
for A1 is to provide human operators with clusters containing a
maximum number of frauds from Ou. Our goal for A2 is to use the
resulting clusters to automatically and reliably detect a maximum
number of organized frauds. This empirical evaluation assesses the
performance of RecAgglo in its own right. It assumes a deployment
9
050K100K150K200K250K300KSamples012345Computation time (hours)RecAggloAggloClustSampleClustKmodesROCKTable 3: Recall, precision and false positive rate (FPR) for
automated fraud detection in 5 countries. One quarter of
frauds are detected while generating a few false alarms
(0.1%). Only 35.3% of detected frauds are actual frauds.
Recallclust
Recallf inal
Precision
Dataset
DE-real
CH-real
NL-real
BE-real
FR-real
Overall
59.8
72.3
60.4
63.6
65.8
62.6(±10.6)
26.2
33.2
20.5
26.5
30.0
35.9
17.0
29.3
34.4
71.4
F PR
0.1
0.3
0.1
0.2
0.1
0.1(±0.03)
26.4(±5.5)
35.3(±6.3)
clusters more frauds than legitimate orders. The CFRu is around
35-45%, which is slightly lower than the CFR but consistently larger
than the CLR (7-18%). For screening prioritization A1, around 90%
of legitimate orders could be discarded from manual analysis while
preserving around 40% of frauds that could be detected. RecAgglo
can be used to prioritize screening.
We see that the increased delay in obtaining fraud labels de-
creases the CFRu by around 10 percentage points. There is a strong
time dependence between orders belonging to the same cluster
and to the same fraud campaign. Obtaining fraud labels in a timely
manner is crucial to maximize our ability to detect organized fraud.
It is worth noting that while we ran RecAgglo once per day in
this experiment, it can be re-ran continuously as new orders are
received (using a sliding window containing one day of orders Ou).
We recall that RecAgglo processes 100,000 orders in one hour.
8.2 Automated fraud cancellation
We devise a simple technique to automatically detect and cancel
frauds using clusters generated by RecAgglo. We detect an un-
labeled order from Ou as fraud (1) if it is clustered and (2) if at
least one known fraud from Of belongs to this cluster. We call this
technique label propagation - known fraud propagates its label to
the whole cluster it belongs to.
We apply this technique to the clusters generated in Sect. 8.1.
For each country in Tab. 3, we report Recall, Precision and False
Positive Rate (F PR) averaged over 35 clustering results (35 days).
Recall is the ratio of correctly detected frauds (T P) over the total
number of frauds (T P + F N ) and it represents the ability to detect
frauds. Recallclust is computed only on clustered frauds, while
Recallf inal is computed on all frauds. Recallf inal = Recallclust ×
CFRu is the actual rate of detected frauds. Precision is the ratio of
correctly detected frauds (T P) over the total number of detected
frauds (T P + F P), i.e., the reliability of fraud detection. F PR is the
ratio of legitimate orders incorrectly detected as fraud (F P) over
the total number of legitimate orders (T N + F P). It corresponds to
the error rate for legitimate orders.
This simple automated detection technique would cancel over
one quarter (Recallf inal = 26.4%) of fraud, which likely represents
62.6% (Recallclust ) of all organized fraud. It also generates few false
alarms (F PR = 0.1%) for legitimate orders. Despite this very low
F PR = 0.1%, the precision remains low because of the large imbal-
ance between fraud and legitimate orders (#fraud ≪ #leдitimate).
Our average precision of 35.4% means that 2/3 orders detected
as fraud are actually legitimate orders. This low precision is pro-
hibitive for automated fraud cancellation A2 but it can prioritize
screening A1. Human analysts could cancel over 25% of frauds with
little effort required.
We investigated further the characteristics of legitimate orders
that our label propagation technique incorrectly identified as fraud.
We computed the ratio of these orders that belong to four legitimate
categories namely, (1) fully and (2) partially returned to the retailer
(where a customer does not pay for all items and returns some of
them), (3) partly unpaid (where items in the order remain unpaid
while delivered) and (4) canceled by the customer. We observed
that 94.7% of the false positives that degrade the Precision of label