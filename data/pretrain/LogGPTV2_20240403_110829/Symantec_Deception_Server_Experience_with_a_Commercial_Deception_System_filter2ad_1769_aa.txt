title:Symantec Deception Server Experience with a Commercial Deception System
author:Brian Hernacki and
Jeremy Bennett and
Thomas Lofgren
Symantec Deception Server Experience  
with a Commercial Deception System 
Brian Hernacki, Jeremy Bennett, and Thomas Lofgren 
{brian_hernacki,jeremy_bennett,thomas_lofgren}@symantec.com 
Redwood City, CA 
Symantec Corporation 
Abstract. This paper provides an examination of an emerging class of security 
mechanisms  often  referred  to  as  deception  technologies  or  honeypots.  It  is 
based on our experience over the last four years designing and building a high, 
end commercial deception system called ManTrap. The paper will provide an 
overview  of  the  various  technologies  and  techniques  and  will  examine  the 
strengths and weaknesses of each approach. It will discuss deployment criteria 
and  strategies  and  will  provide  a  summary  of  our  experiences  designing  and 
constructing  these  systems.  It  also  presents  the  results  of  work  demonstrating 
the feasibility and utility of a deep deception honeypot.  
Keywords: Deception, Honeypot, ManTrap. 
1   Introduction 
Over the past several years network systems have grown considerably in size, com-
plexity, and susceptibility to attack. At the same time, the knowledge, tools, and tech-
niques available to attackers have grown just as fast if not faster. Unfortunately defen-
sive  techniques  have  not  grown  as  quickly.  The  current  technologies  are  reaching 
their limitations and innovative solutions are required to deal with current and future 
classes  of  threats.  Firewalls  and  intrusion  detection/protection  systems  are  valuable 
components  of  a  security  solution  but  they  are  limited  in  the  information  they  can 
provide. While they can provide very broad protection for a large variety of services, 
they also provide very shallow protection. Even the solutions with the most complete 
“application protection” or “deep inspection” can determine very little about host-side 
effects,  attacker  capability,  or  attacker  intent.  In  order  to  provide  scalable  detection 
for  a  wide  variety  of  applications  and  systems,  they  cannot  support  the  necessary 
environment in which to completely evaluate a potential threat. High bandwidth and 
network  encryption  also  present  barriers  to  such  solutions.  While  host  monitoring 
solutions (e.g. host intrusion detection systems, a.k.a. HIDS) do not suffer from all of 
these  limitations,  they  are  encumbered  with  their  own.  Using  such  host  solutions 
poses significant management and scalability challenges and also places real assets at 
risk.  Deception  systems,  also  called  “honeypots”  present  a  valuable  combination of 
these two approaches. 
This paper presents the results of our experience designing and deploying honey-
pots for the last four years. It will first provide a basic overview of honeypot technol-
ogy, including a classification system that we have developed and used. It will then 
examine deployment techniques and strategies we have used and observed. Finally, it 
E. Jonsson et al. (Eds.): RAID 2004, LNCS 3224, pp. 188–202, 2004. 
© Springer-Verlag Berlin Heidelberg 2004 
Symantec Deception Server Experience with a Commercial Deception System      189 
will discuss our specific experiences designing and constructing our honeypot, called 
ManTrap  [1].  It  will  provide  a  detailed  look  at  some  of  the  design  challenges  and 
existing problems yet to be solved. 
2   Honeypot Basics 
A honeypot appears to be an attractive target to an attacker. These targets can be real 
systems or some type of emulator designed  to appear as servers, desktops, network 
devices,  etc.  When  the  attacker  attempts  to  attack  the  network,  they  either  stumble 
into or are led into the honeypot. The honeypot then records all of the attacker’s ac-
tions as they assess and attempt to compromise it. Depending on the specific class of 
honeypot it may provide additional functionality such as automated alerting, triggered 
responses, data analysis, and summary reporting. 
Using a honeypot has numerous advantages. First it wastes the attacker’s time. Any 
time spent attacking a honeypot is time not spent attacking a real machine. Second, it 
provides extremely detailed information about what the attacker does and how they 
do it. Third it gives the attacker a false impression of the existing security measures. 
Thus the attacker spends time finding tools to exploit the honeypot that may not work 
on a real system. Fourth the existence of a honeypot decreases the likelihood that a 
random attack or probe will hit a real machine. Finally, a honeypot has no false posi-
tives. Any activity recorded is suspicious as a honeypot is not used for any other pur-
pose. 
Much like a pot of honey used to attract and trap insects, a honeypot ensnares an 
attacker by appearing to be an attractive target. Depending on the depth of the decep-
tion an attacker can spend large amounts of time attempting to exploit and then ex-
ploring  the  honeypot.  Meanwhile  all  this  activity  is  recorded  and  reported  to  the 
honeypot owner. The more time the attacker spends with the honeypot the more in-
formation about her means and motives is given to the owner. This information can be 
used to make other machines immune to the tools being used. 
If  an  attacker  does  not  know  the  weaknesses  of  a  system  he  cannot  exploit  it. 
Honeypots give attackers a false sense of accomplishment. They spend time research-
ing the vulnerabilities presented by the honeypot. They create or find tools to exploit 
those  vulnerabilities.  Finally,  they  spend  time  executing  these  exploits  and  demon-
strating to the honeypot owner exactly how to thwart their attack should it be viable 
on other machines. 
Many attackers scan large blocks of computers looking for victims. Even attackers 
targeting a specific organization will scan the publicly accessible machines owned by 
the  organization  looking  for  a  machine  to  compromise  as  a  starting  point.  Using 
honeypots decreases the chance an attacker will choose a valuable machine as a tar-
get. A honeypot will detect and record the initial scan as well as any subsequent at-
tack. 
Unlike  other  intrusion  detection  measures  there  are  no  false  positives  with  a 
honeypot. All IDS systems produce false positives to varying degrees. This is because 
there is always a chance that valid traffic will match the characteristics the IDS uses 
to  detect  attacks.  This  is  not  the  case  with  a  honeypot.  Any  communication  with  a 
honeypot is suspect. This is because the honeypot is not used for any purpose other 
than detecting attacks. There is no valid traffic to produce false positives.  
190      Brian Hernacki, Jeremy Bennett, and Thomas Lofgren 
In this way a honeypot can detect more attacks than other IDS measures. New vul-
nerabilities  can  be  found  and  analyzed  because  all  actions  an  attacker  takes  are  re-
corded. New attack tools can be detected based on their interaction with a honeypot. 
Since all communication is suspect, even new or unknown attacks which exhibit no 
signature  or  anomalous  characteristics  can  be  detected.  These  can  include  feeding 
false  information  into  a  service  or  database,  using  compromised  credentials  to  gain 
unauthorized access, or exploiting some new application logic flaw. Finally, a honey-
pot can detect and record incidents that may last for months. These so-called ‘slow 
scans’ are difficult to detect using an IDS as the time involved makes them very diffi-
cult to differentiate from normal traffic without being false positive prone. 
3   Classification of Honeypots 
Honeypots are not a new idea. Researchers and security professionals have been using 
different forms of honeypots for many years [8][9][10]. In recent years however, there 
has been rapid innovation in the technology and significant increases in deployment. 
As honeypots become more mainstream, it is useful to discuss them in a slightly more 
formal sense. 
Honeypots  can  be  classified  into  three  primary  categories:  facades,  sacrificial 
lambs, and instrumented systems. A facade is the most lightweight form of a honey-
pot and usually consists of some type of simulation of an application service in order 
to provide the illusion of a victim system. A sacrificial lamb usually consists of an 
“off the shelf” or “stock” system placed in a vulnerable location and left as a victim. 
An  instrumented  system  honeypot  is  a stock system with additional modification to 
provide more information, containment, or control.  
Each class of honeypots has different strengths and weaknesses and is appropriate 
to  different  types  of  use  according  to  these.  The  sections  below  explore  each  class 
with respect to implementation, strengths and weaknesses and typical uses.  
Note that while these classifications are primarily our creation, we have been using 
them with others in the field for a number of years. Other classification systems do 
exist [12], however ours attempts to provide more information of the honeypot (form, 
capability, risk, etc) rather than just the degree of interaction.  
3.1   Facades 
A facade honeypot is a system which provides a false image of a target host. It is most 
often implemented as software emulation of a target service or application. This emu-
lation acts like a vulnerable host or service. Some implementations can emulate large 
numbers  of  hosts,  varieties  of  operating  systems,  and  different  applications  or  ser-
vices. When the facade is probed or attacked, it gathers information about the attacker 
and  provides  a  fictitious  response.  This  is  analogous  to  having  a  locked  door  with 
nothing behind it and watching to see who attempts to open it. The depth of the simu-
lation varies depending on implementation. Some will provide only partial application 
level behavior (e.g. banner presentation). Other implementations will actually simu-
late the target service down as far as the network stack behavior. This is done in order 
to prevent remote signaturing by O/S fingerprinting. The value of a facade honeypot 
is defined primarily by what systems and applications it can simulate and how easy to 
deploy and administrator it is. 
Symantec Deception Server Experience with a Commercial Deception System      191 
Facades offer simple, easy deployment as they often have very minimal installation 
or equipment requirements and are easy to administer. They can provide a large num-
ber  of  targets  of  considerable  variety.  Since  they  are  not  real  systems,  they  do  not 
have the vulnerabilities of real systems. They also present very little additional risk to 
your environment due to the nature of the emulation. While the system underneath is 
“real”, the emulated services are not. They cannot be compromised on the same fash-
ion as they “live” services they emulate. Thus the honeypot cannot be used as a jump-
ing off point. While it is technically possible that someone could attempt to actually 
exploit the emulated service (knowing that it is a honeypot) this seems very unlikely. 
At worst it simply merits caution in deployment. 
Their only significant limitation is that due to their limited depth, they provide only 
basic information about a potential threat. They may also fail to engage the attacker 
for long periods of time since there is not anything to compromise. This lack of depth 
can potentially create a signature which drives the attacker away from the honeypot. 
While  this  can  be  considered  a  limitation,  by  the  time  the  attacker  becomes  suspi-
cious, they have usually interacted with the honeypot enough to generate alerts, pro-
vide intelligence, etc. 
Examples of this type of honeypot include NetFacade and Honeyd [2]. 
Sites that wish to deploy very simple deception as a form of early warning system 
should consider facade products given their simplicity to deploy and low administra-
tive  overhead.  These  are  typically  used  by  small  to  medium  enterprises or by large 
enterprises in conjunction with other technology. While very little hard data exists to 
indicate the exact scale of this, our field experience supports this conclusion. 
3.2   Sacrificial Lambs 
A sacrificial lamb is a normal system left vulnerable to attack. They can be built from 
virtually any device (a Linux server, a Cisco router, etc). The typical implementation 
involves loading the operating system, configuring some applications and then leav-
ing it on the network to see what happens. The administrator will examine the system 
periodically to determine if it has been compromised and if so what was done to it. In 
many cases, the only form of data collection used is a network sniffer deployed near 
the honeypot. While this provides a detailed trace of commands sent to the honeypot, 
it does not provide any data in terms of host effects. In other cases additional exami-
nation  is  done  either  by  hand  or  using  various  third-party  forensic  tools.  Also  the 
systems  themselves  are  “live”  and  thus  present  a  possible  jumping  off  point  for  an 
attacker. Additional deployment considerations must be made to isolate and control 
the honeypot by means of firewalls or other network control devices. 
Sacrificial lambs provide real targets. All the results are exactly as they would be 
on  a  real  system  and  there  is  no  signature  possible  since  there  is  nothing  different 
about  the  system.  These  types  of  honeypots  are  also  fairly  simple  to  build  locally 
since  they  only  use  off-the-shelf  components.  Sacrificial  lambs  provide  a  means  to 
analyze a compromised system down to the last byte with no possible variation. How-
ever, this type of honeypot requires considerable administrative overhead. The instal-
lation  and  setup  requires  the  administrator  to  load  the  operating  system  themselves 
and manually perform any application configuration or system hardening. The analy-
sis is manual and often requires numerous third-party tools. They also do not provide 
192      Brian Hernacki, Jeremy Bennett, and Thomas Lofgren 
integrated containment or control facilities, so will require additional network consid-
erations (as mentioned above) to deploy in most environments. 
There are no specific examples of sacrificial lambs since they can be constructed 
from virtually anything. However the Honeynet Project [3] provides good examples 
on constructing these. 
Groups  or  individuals  that  are  interested  in  doing  vulnerability  research  should 
consider  a  sacrificial  lamb  honeypot.  It  will  require  dedicated  expert  security  re-
sources to support but will provide a great deal of information and flexibility.  
3.3   Instrumented Systems 
Instrumented systems provide a compromise between the low cost of a facade and the 
depth of detail of a sacrificial lamb. They are implemented by modifying a stock sys-
tem to provide additional data collection, containment, control and administration. 
Designed  as  an  evolutionary  step  from  earlier  forms  of  deception,  they  provide 
easy to deploy and administer honeypots that are built on real systems. They are able 
to  provide  an  exceptional  level  of  detail  (often  more  than  a  sacrificial  lamb)  while 
also providing integrated containment and control mechanisms. There are two impor-
tant considerations when using instrumented systems. First is that building one can be 
very  expensive  and  difficult  to  do  correctly.  It  requires  significant  time,  skill  and 
knowledge to create even moderately good deception which is not detectable (e.g. a 
signature) or itself a security risk. Some administrators attempt to construct their own 
but often run into difficulty creating an effective deception, providing effective isola-