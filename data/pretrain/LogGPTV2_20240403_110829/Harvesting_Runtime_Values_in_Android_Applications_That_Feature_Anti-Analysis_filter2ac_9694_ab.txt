values paramString1 and paramString2. Afterwards, in the same
way as before, the reduced code is run, and HARVESTER reports
the concrete telephone numbers (7151, 2858 and 9151) and
bodies (701369431072588745752, 7012394196732588741192
and 7834194455582588771822) of the SMS messages sent.
Note that HARVESTER does not require any manipulations
to the underlying Android framework. It works purely on the
bytecode level of the target application, through a bytecode-to-
bytecode transformation.
III. LOGGING POINTS AND VALUES OF INTEREST
The main purpose of HARVESTER is to compute runtime
values. Formally we call these runtime values values of interest.
To use HARVESTER, a human analyst deﬁnes logging points
for which she wants to extract all values of interest. Both are
deﬁned as follows.
Deﬁnition 1: A logging point hv, si comprises a variable
or ﬁeld access v and a statement s such that v is in scope at s.
Deﬁnition 2: A value of interest is a concrete runtime value
of variable v at a logging point hv, si.
For instance, if one is interested in runtime values passed
to a conditional check s: if(a.equals(b)) the runtime values
of a and b are both values of interest at this statement s,
inducing the two logging points ha, si and hb, si. Another
example would be an API call to the sendTextMessage method
such as s: sendTextMessage(targetNumber, arg2, messageText,
arg4, arg5) where h targetNumber, si and h messageText, si are
possible logging points at s. Parameters arg2, arg4 and arg5
can be also deﬁned as logging points, but do not provide
security-relevant information. The corresponding runtime values
are the values of interest. Examples for values of interest for
targetNumber would be ’+01234’ and for messageText would be
’This is a premium SMS message’.
To ease the deﬁnition of logging points for the human
analyst, HARVESTER provides a comprehensive list of pre-
deﬁned logging points taken from SuSi [19], a machine-
learning approach which provides a comprehensive list of
categorized sensitive API methods. HARVESTER makes use of
these sensitive API methods by providing generic categories
such as URL, Shell-Command or SMS Number as tool-input
parameters. For instance, if one is interested in URLs inside the
application, one can run HARVESTER with the URL parameter
and all API calls that are able to call a URL are automatically
deﬁned as logging points. This is the only human interaction
that HARVESTER requires.
IV. OVERALL APPROACH
Figure 1 depicts HARVESTER’s workﬂow. To compute
values of interest, HARVESTER ﬁrst reads the APK ﬁle and
a conﬁguration ﬁle deﬁning the logging points. HARVESTER
next computes a static backwards slice starting at these code
points, as will be further explained in Section V-A. This slicing
step runs on a desktop computer or compute server. The pre-
computed slices are then used to construct a new, reduced
APK ﬁle which contains only the code required to compute
the values of interest, and an executor activity. The task of the
executor activity is to invoke the computed slices and report
the computed values of interest.
i.e.,
the value in question,
HARVESTER additionally alters those conditionals whose
value depends on the execution environment and on which
the slicing criterion,
is data-
dependent. These conditionals are replaced by simple Boolean
variables, allowing HARVESTER to force the simulation of
different environments at runtime. Listing 3 shows the output
of Harvester when requesting a slice for the parameters of the
reﬂective call from Listing 1. The emulator check has been
removed, as the slicing criterion is reachable only if the branch
falls through. The conditional in line 3 has been replaced by
the global variable EXECUTOR_1, making the slice parametric.
This new, reduced APK ﬁle is then executed on a stock
Android emulator or real phone, as we explain in Section V-B.
These steps are fully automated and no user interaction is
required. In a forced execution, HARVESTER explicitly triggers
all the different behaviors of the parametric slice (in Listing 3
with both true and false for EXECUTOR_1) which allows the
complete reconstruction of the values of interest, for all concrete
environments, decrypting any encrypted values. HARVESTER
instruments the reporting mechanism for the values of interest
into the slices (see line 4), making changes to the runtime
environment (emulator, Android OS) unnecessary. Note that
HARVESTER does not need to reconﬁgure or reset the actual
device or emulator on which the slices are executed which
is novel in comparison to other approaches that are based on
symbolic or concolic execution [20], [21].
In some highly-obfuscated applications, the logging point
cannot directly be identiﬁed. Reconsider Listing 2, in which
the application uses reﬂection to call the method that sends
out a text message. To handle such cases, HARVESTER can
1 String messageText = EXECUTOR_1 ? US:INTERN;
2 String clazz = decrypt("fri$ds\&S");
3 String method = decrypt("dvdf4$DCS");
4 Harvester.report(clazz,method,messageText);
5 Class.forName(clazz).
6
getMethod(method).invoke(
"+01234",null,messageText,null,null);
Listing 3: Sliced version of Listing 1
4
be conﬁgured to run twice, once to retrieve the targets of all
reﬂective method calls, and then a second time to retrieve
the telephone number and/or text messages for the reﬂectively
invoked calls to the SMS interface just identiﬁed.
V. DETAILED SOLUTION ARCHITECTURE
Next we provide more details about the main components
of HARVESTER namely the static backward slicing process,
the dynamic execution of the reduced APK and the injection
of runtime values into the APK, as shown in Figure 1.
A. Static Backward Slicing
Part A comprises the static analysis phase. In traditional
slicing as deﬁned by Weiser [22], a program slice S is an
executable program that is obtained from a program P by
removing statements such that S replicates the behavior of
P [23] with respect to the so-called slicing criterion—a value
of interest selected by the user. We use Figure 2 to explain
the effect of traditional slicing on our initial example from
Listing 1. Assume that we want to slice this program such
that the parameters clazz, method and messageText passed to the
reﬂective ﬁnal call are our slicing criteria. The reﬂective call is
data-dependent on all four assignments to those three variables.
The assignments to messageText are further control-dependent
on the check of the simCountryIso(). All of those statements are
further control-dependent on the check on Build.FINGERPRINT,
the environment check that circumvents the execution of the
remaining code on Android emulators. Traditional slicing
approaches such as the one by Weiser [22] would include this
check in the slice. Executing the check, however, immediately
leads to leaving the method, consequently never triggering
the “interesting code” that computes the values relevant to the
slicing criterion.
Even if the emulator check were removed, this traditional
approach would still not be sufﬁcient as it would still retain the
environment-dependent check on simCountryIso(). In the spe-
ciﬁc scenario of malware analysis, the method simCountryIso()
will return exactly one of several country codes, depending on
the conﬁguration of the emulator. But frequently, the malware
analyst is interested in inspecting all possible runtime values in
question. In the example, we would like to cover both possible
branches. Without further extensions to the approach this would
require a reboot and reconﬁguration of the emulator, which is
a time consuming and error-prone undertaking. However, while
the assignments to msg are control-dependent on simCountryIso()
and thus also on the execution environment, there is no data
dependency. HARVESTER exploits this fact by replacing the
conditional referring to simCountryIso() by a simple global
Boolean ﬂag EXECUTOR_1. This ﬂag causes the slice to become
parametric: the selection of any concrete Boolean values for the
generated control variables allows the direct execution of one of
the parametric slices. This effectively breaks the dependencies
of the app’s execution on its execution environment, depicted
by the lower red cross in Figure 2.
The same concept also applies to the dependency on
Build.FINGERPRINT. In this case, the code of interest is, however,
only executed if this check returns true. In other cases, the
whole computation of the values of interest would be skipped.
Therefore, this conditional is replaced by true, resulting in a
removal of the condition as shown at the big red cross.
APK
Conﬁguration
A
STATIC BACKWARD SLICING
Backward 
Slicer
Slice 1
...
Slice N
B
DYNAMIC EXECUTION OF REDUCED APK
Preparation
Phase
Reduced 
APK
Executor
(Emulator/Phone)
Runtime
Values
(in case reﬂective method calls have been resolved)
Fig. 1: Workﬂow of HARVESTER
RUNTIME VALUE INJECTION (optional)
C
Enhanced
APK
Bytecode 
Enhancer
Xtrue
false
if(Build.FINGERPRINT.startsWith("generic"))
X
Environment
if(simCountryIso().equals("US"))
if(EXECUTOR_1)
false
true
messageTextE=EINTERN;
messageTextE=EUS;
clazzE=Edec("fri$ds\&S");
methodE=Edec("dvdf4$DCS")E;
text
removed program ﬂow
program ﬂow
removed statement
statement
logging point
Harvester.report(clazz,method,messageText)
Class.forName(clazz).getMethod(method).invoke(
"+01234",null,messageText,null,null);
Fig. 2: Slice representation of Listing 1
Note that HARVESTER only parameterizes the slice at
those conditionals that are data-dependent on environment
values, while all other conditionals remain unchanged. This,
for instance, allows HARVESTER to swiftly recover the correct
value 123 for the valueOfInterest in the following example,
which contains no such reference. (Note that in this snippet
we show a goto operation. HARVESTER works directly on the
bytecode level, where all loops are expressed that way.)
int valueOfInterest = 120, i = 0;
label1: if (i < 3) {
i++;
valueOfInterest++;
goto label1;
}
send("" + valueOfInterest, "Hello");
If HARVESTER were to replace all conditionals regardless
of whether they are environment-dependent or not, the slice
for the example above would compute the incorrect value 120
5
when choosing false for the condition i < 3. Worse, when
choosing true for the condition, the code would loop inﬁnitely.
At this point it is important to note that HARVESTER maintains
the assignment to control variables ﬁxed per run, i.e., it can
only execute loops never (condition is false) or inﬁnitely often
(condition is true). In particular, in cases in which a loop
condition does depend on an environment value, this may
cause one of HARVESTER’s dynamic runs to loop indeﬁnitely.
HARVESTER simply addresses this problem with a timeout on
the overall execution time for every run of a slice. As evident
from our experiments, this theoretical shortcoming does not
pose a problem in practice. Developers intend computed values
such as reﬂective call targets or telephone numbers for SMS
scam to be independent of the execution environment.
In general, HARVESTER replaces only such conditionals
that access values dependent on the execution environment. To
be able to determine such conditionals, HARVESTER comes pre-
customized with a conﬁguration ﬁle listing ﬁelds and methods
whose return values are known to depend on environment
settings. Vidas et. al. [24] analyzed different techniques for
Android emulator-detection and Maier et. al. [25] showed
ﬁngerprinting techniques for mobile sandboxes. We use the
methods from these papers as a starting point for constructing
the required lists. We believe the lists to be complete for current
Android versions, but they can easily be extended.
The remainder of this section discusses the most impor-
tant challenges that arise during backward slicing and how
HARVESTER overcomes them.
Data Dependencies through Persistent Storage:
Most
applications use API classes such as SharedPreferences
to persist data. Storage and retrieval can be distributed over
the program. For instance, data can be stored into a ﬁle
during application startup and read again after the reboot of
the application—a common workﬂow also in current Android
malware applications [26]. A slicing approach that does not
model this data dependency between user actions would yield
an incorrect slice that attempts to read non-existent data from
an uninitialized data store. To handle these cases, HARVESTER
resolves all calls within the analyzed bytecode that write
to persistent storage and prepends them to the slice. This
approximation may, however, miss some of the data if the
stored value is ambiguous, as only the last value is retained
and all earlier values are overwritten. While a better handling
might seem desirable, in our experiments the current solution
proves sufﬁcient to produce correct values for all logging points.
User Input:
Further special handling is required for API
calls that access environment values such as free-text user
input. It is one major contribution of this work to show that
within the slices that are frequently of interest to security
analysts, such accesses to environment values, are, however,
typically restricted to conditionals (see Section VI). Thus, they
are removed by HARVESTER, as the respective expressions
are replaced by Boolean control variables. Semantically, this
restriction applies because obfuscators and malware authors
seek to encode values independently of user input. The target
of reﬂective call, for instance, is assumed to always be the
same, regardless of the environment. In some few slices of
interest, however, we found user input to be accessed also
outside conditionals. In some cases this can simply happen
because the slice is less precise than one would like it to be. To
allow the execution also of such slices without user interaction,
HARVESTER injects code to short-circuit the actual API calls
that read out the UI, returning dummy values instead. Our
experiments show this workaround, albeit somewhat crude, to
be highly effective when applied to current malware.
Dynamic Code Loading and Native Code:
Note that
HARVESTER can also cope with dynamic code loading and
native methods, as long as all logging points are contained
within the APK’s Dalvik bytecode. If, for instance, the value
of an SMS message is computed by a native method, the slicer
will declare this function as required and the dynamic execution
will evaluate the function just as any other, invoking the same
implementation that would also be invoked during normal app
execution. Many current malware samples encode important
values in native or dynamically loaded code, making this an
essential feature [26].
Cut-Offs for Large Programs:
For very large programs
it may be infeasible to compute exact slices. HARVESTER
therefore supports cut-offs that prevent it from walking further
up (into callers) or down (into callees) along the call stack
while slicing. After the cut-off, all further callees are retained as
they are, without any slicing. All callers exceeding the cut-off
are simply disregarded, i.e., HARVESTER, assumes that the
slice constructed so far does not depend on any earlier program
logic. To avoid uninitialized variables in this case, HARVESTER
inserts artiﬁcial initialization statements that assign dummy
values. As our experiments show, only few such dummy values
are required in practice (see Section VI).
B. Dynamic Execution of Reduced APK
Part B in Figure 1 describes the dynamic analysis phase.
HARVESTER assembles every slice computed during the static
slicing phase within a single new method that becomes part of
the reduced APK. The executor activity injected into the same
APK ﬁle calls all these methods one after another, directly after
the new app has been started, e.g., on an unmodiﬁed emulator
or a stock Android phone. Since the slices are directly executed,
regardless of their original position in the application code,
HARVESTER requires no user interaction that might otherwise
be necessary to reach the code location of the computing
statements. If, for instance, the extracted code was originally
contained in a button-click handler, it would have required
the user or an automated test driver to click that button to
be executed. HARVESTER, however, executes the sliced code
directly, making these interactions unnecessary. In fact, the
reduced app does not contain any GUI elements from the
original app at all. Figure 3 shows how the slice explained in
Figure 2 would be executed. Executing this program will cause