ObjectDataProvider.ObjectInstance
execution of arbitrary methods.
enabling
To run arbitrary commands during YAML deserializa-
tion process, e.g. a calculator, an attacker leverage the class
ObjectDataProvider to create a payload as in Listing 5.
Speciﬁcally,
the deserializer will execute the property set-
ter ObjectDataProvider.ObjectInstance and invoke the
method Process::Start to run calc.exe.
! {
MethodName: Start,
ObjectInstance:
! {
StartInfo:
! {
FileName: cmd,
Arguments: ’/C calc.exe’
}}}
Listing 5: YAML payload of ObjectDataProvider
The YamlDotNet’s OIV follows our template: The library
exposes a public entry point (Deserialize) to call a sen-
sitive method creating an object of attacker-controlled type
(Activator.CreateInstance). Subsequently,
it uses the
object to trigger the execution of a gadget (the property setter
of class ObjectDataProvider) via a malicious payload. To
detect such vulnerabilities, a comprehensive analysis should
consider all implementations of the property setter methods
like SetValue in the codebase of the .NET Framework
and libraries. Observe that the analysis should target .NET
assemblies to account for OIVs in the framework and libraries.
III. OVERVIEW OF THE APPROACH
This section discusses the key insights of our approach
(Section III-A) and provides a high-level overview of the
architecture and workﬂow of SerialDetector (Section III-B).
A. Root cause of Object Injection Vulnerabilities
look at
We now take a closer
the vulnerability of
YamlDotNet
library in Section II-B. Listing 3 shows that
the vulnerability occurs because of an insecure chain of
method calls during the deserialization of attacker-controlled
data. The chain starts from a call
to the public method
Deserialize(yaml) which uses the untrusted input in
variable yaml to create an object of arbitrary type via the
method Activator.CreateInstance and subsequently use
it to call the method SetValue. The latter executes the code of
a property setter of the created object using a property name.
The vast majority of related works leverage publicly avail-
able knowledge about signatures of vulnerable methods, like
Activator.CreateInstance and SetValue,
to identify
such (magic) methods in a target codebase [13], [18], [32],
[33]. These works rely on the knowledge of vulnerable method
signatures to either build or reuse malicious gadgets. We argue
that such syntax-based approaches are not ideal as modern
applications may hide unknown methods that achieve the same
malicious effect. This leads us to the ﬁrst research question:
(i) What is an appropriate criteria for identifying OIVs? To
help answering this question, we dive deeper into the analysis
of the two vulnerable methods of our example.
Fig. 1: OIV pattern for YamlDotNet Deserializer: public entry
point (green), sensitive sink (red), and attack trigger (blue)
RuntimeTypeHandle.Allocate(type).
The method Activator.CreateInstance performs a
sequence of method calls which results in executing the native
method
This
method takes as input a parameter type and uses it to deﬁne
the type of the returned object. We call such methods sensitive
sinks. In general, sensitive sinks are either native (external)
methods or run-time generated methods that return an object
of the type speciﬁed in their input parameter. The .NET
Framework contains in total 123 sensitive sinks. A similar
analysis of the method SetValue shows that the subsequent
sequence of method calls results in executing the native method
RuntimeMethodHandle.InvokeMethod(obj,..., sig),
which invokes the method sig of object obj. Hence, an
attacker controlling the type of the object obj and the name of
the method sig can execute arbitrary code as in our example.
We call such methods attack triggers since they determine
the ﬁrst method of a gadget chain that leads to malicious
behavior. In fact, an attack trigger puts the system into a
state that does not meet the speciﬁcation as intended by the
developer. Other potential candidates for attack triggers are
virtual method calls, e.g., the method Execute in Listing 1,
which enable attackers to execute concrete implementations
of these methods at their choice.
In light of this analysis, we identify the root cause of an
OIV based on three ingredients: (a) public entry points; (b)
sensitive sinks; and (c) attack triggers. We use these ingredients
to compute OIV patterns in large codebases. We deﬁne an OIV
pattern as a public entry point that triggers the execution of
a sensitive sink to create an object that controls the execution
of an attack trigger. Figure 1 depicts the OIV pattern for our
running example in Section II-B. Motivated by our notion of
OIV pattern, we address three additional key questions: (ii)
Can we provide practical tool support to detect OIV patterns
in large-scale applications including frameworks and third-
party libraries? (iii) How do we validate the usefulness of
the generated patterns? (iv) Are there real-world applications
to give evidence for the feasibility of the approach?
B. SerialDetector
Overview of SerialDetector. We have developed a static
analysis tool, dubbed SerialDetector [41], to detect and ex-
ploit Object Injection Vulnerabilities in .NET applications and
4
System.ReflectionSystemYamlDotNetDeserializer.Deserialize()Activator.CreateInstance()PropertyInfo.SetValue()RuntimeTypeHandle.Allocate()RuntimeMethodInfo.UnsafeInvokeInternal()RuntimeMethodHandle.InvokeMethod()Deserializer.DeserializeObject()at performing an in-depth security evaluation of our approach
on production software such as Microsoft Azure DevOps for
which the source code is not available. Fourth, CIL has fewer
language constructs that must be supported by the analyzer as
compared to the high-level languages. By focusing on CIL,
we do not lose any signiﬁcant data that is relevant to our code
analysis. In fact, CIL is a type-safe language with complete
type information in the metadata. On the other hand, CIL
inherits well-known challenges for the analysis of stack-based
object-oriented intermediate languages, e.g., the emulation of
the evaluation stack and the reconstruction of control ﬂow.
We develop and implement a principled and practical
ﬁeld-sensitive taint-based dataﬂow analysis targeting the CIL
language. In Section IV we present the details of the analysis
for a core of CIL instructions. At the heart of this analysis
lies a modular inter-procedural abstract interpretation based
on method summaries, pointer aliasing, and efﬁcient on-the-ﬂy
reconstruction of the control ﬂow graph. We present the algo-
rithms underpinning our analysis in a principled manner and
discuss various challenges and solutions related to low-level
language features. The analysis implements type-sensitivity, a
lightweight form of context-sensitivity, and a type-hierarchy
graph analysis for reconstruction of the call graph. We ﬁnd
that these features provide a middle ground to implementing
scalable yet precise algorithms for detecting OIV patterns.
Similar analysis have been implemented in the context of
web applications [43], [47] and mobile applications [4], [21].
While these analysis leverage intermediate languages featuring
control ﬂow and call graph reconstruction (e.g., FlowDroid
builds on the SOOT framework [48]), SerialDetector imple-
ments these features on the ﬂy.
Roadmap of results. In Section V, we discuss our im-
plementation of SerialDetector including challenges and lim-
itations. Following Figure 2, the detection phase performs a
call graphs analysis for a set of input assemblies, e.g., the
.NET Framework and third-party libraries, to identify public
entry points that may reach sensitive sinks. Then, it uses such
information to carry out the dataﬂow analysis to identify attack
triggers, thus generating a list of OIV patterns. However, the
usefulness of the generated patterns depends on the existence
of matching gadgets that result
in exploits. While gadget
generation is orthogonal to pattern generation, we evaluate
SerialDetector by analyzing .NET deserialization libraries with
publicly available gadgets [3]. Because an attack trigger is
the ﬁrst method in a gadget, it is sufﬁcient that an attack
trigger from our generated patterns matches the ﬁrst method
of a gadget. Subsequently, we validate the feasibility of these
attacks using our payload generator. In Section VI, we discuss
the details of our evaluation showing that SerialDetector ﬁnds
patterns associated with vulnerable deserializers.
While these results show that SerialDetector is useful in
detecting OIV patterns in the .NET Framework and its deserial-
ization libraries, as well as in generating and validating exploits
for known gadgets, it is unclear whether these vulnerabilities
appear in production software. In fact, an application build
on top of the .NET Framework and libraries might still use a
vulnerable deserializer in a secure manner, e.g., by performing
validation of the untrusted input. To validate this claim, we
use SerialDetector to carry out a comprehensive in-breadth
security analysis of vulnerable .NET applications (Section VI)
Fig. 2: Architecture and workﬂow of SerialDetector:
automated steps (green) and manual steps (blue)
libraries. Figure 2 describes the architecture and workﬂow of
SerialDetector. At high level, the tool operates in two phases:
A fully-automated detection phase and a semi-automated ex-
ploitation phase. In the detection phase, SerialDetector takes
as input a list of .NET assemblies and a list of sensitive sinks,
and performs a systematic analysis to generate OIV patterns
automatically. The exploitation phase matches the generated
patterns with a publicly available list of gadgets. When a gad-
get matches a pattern, we describe the gadget in a knowledge
base to generate malicious payloads for different formats. The
entry points of the matched pattern allow us to describe tem-
plates in the knowledge base. Populating the knowledge base
is a manual operation; the payload and template generation is
performed automatically based on the described rules. For a
target application, SerialDetector performs a lightweight call
graph analysis to identify control ﬂow paths that make use
of the vulnerable templates described in the knowledge base.
Subsequently, it uses the automatically generated payloads to
validate their exploitability for the target application during the
exploit generation step. The exploit generation may require
modifying the payload and other application inputs, or a
combination of multiple vulnerabilities into one exploit. This is
a manual step requiring knowledge of the application’s threat
model and analysis of the data validation code, e.g., dynamic
analysis or application debugging. SerialDetector does not
automate this process, but provides aids such as automated
validation of modiﬁed payload on a vulnerable template and
automated generation of the call graph. We explain both
phases in detail in Section V-A. In Section VII, we use the
vulnerabilities found in the Azure DevOps Server to showcase
the exploit generation and validation process.
Static analysis. SerialDetector targets the Common Inter-
mediate Language (CIL) instead of working with the source
code such as C#. This choice is motivated by several reasons:
First, we aim at analyzing the code of the .NET Framework
to identify sensitive methods which are not available at the
source level. Second, this approach allows us to implement a
framework-agnostic analysis without any knowledge about the
known vulnerable methods of the framework. Third, we aim
5
Exploitation Phase   Knowledge BaseDetection Phase   Call GraphAnalysisEntry PointDetectionData FlowAnalysisMatchingPopulating KnowledgeBasePayload/TemplateGenerationCall GraphAnalysisExploitGenerationTemplateValidationSensitive Sinks.NET AssembliesPatternsGadgetsApplicationVulnerabilitiesand an in-depth security analysis of the Azure DevOps Server
(Section VII). We report on the number of false positive and
false negatives of our analysis, and on the number of manual
changes of exploit candidates to generate a successful payload.
In Section VII we use SerialDetector’s call graph analysis
to identify control ﬂow paths from public APIs of the Azure
DevOps Server to vulnerable entry points in the .NET Frame-
work. By exploring different threat models in the applica-
tion, SerialDetector found three critical security vulnerabilities
leading to Remote Code Execution in Azure DevOps Server.
In line with the best practices of coordinated disclosure, we
reported the vulnerabilities to the affected vendors. Microsoft
recognized the severity of our ﬁndings and assigned CVEs
to all three exploits. We also received three bug bounties
acknowledging our contributions to Microsoft’s security.
IV. TAINT-BASED STATIC ANALYSIS
This section presents a taint-based static analysis underpin-
ning the detection phase of SerialDetector. The analysis targets
CIL, an object-oriented stack-based binary instruction set, and
it features a modular inter-procedural ﬁeld-sensitive dataﬂow
analysis that we leverage to detect OIV patterns for large
code. We provide an overview of the core language features
(Section IV-A), and discuss challenges and solutions for imple-
menting a precise, yet scalable, intra-procedural (Section IV-B)
and inter-procedural analysis (Section IV-C).
A. CIL language and notation
CIL is a stack-based language running on the CLR virtual
machine (see Appendix A). We focus on a subset of instruc-
tions to describe the core ideas of our analysis.
Inst ::= ldvar x | ldﬂd f | stvar x | stﬂd f | newobj T |
br i | brtrue i | call i | ret
We assume a set of variables x, y, args,··· ∈ Var con-
i.e., formal parameters of methods,
taining root variables,
and local variables; a set of object ﬁelds f, g,··· ∈ Fld; a
set of values v, l,··· ∈ Val consisting of object locations
l, l1,··· ∈ Loc ⊆ V al and other values, e.g., booleans true
and f alse; a set of class types C, T ∈ Types. We write
f [x (cid:55)→ v] for substitution of value v for parameter x in function
f and f (x) for the value of x in f. We use f (x)↓ to represent
that the partial function f is deﬁned in x, and f (x)↑ otherwise.
We write (b ? e1 : e2) to denote a conditional expression
returning e1 if the condition b is true, e2 otherwise.
The memory model contains an environment E : Var (cid:55)→
Val mapping variables to values, a heap h : Loc × Fld (cid:55)→ Val
mapping object locations and ﬁelds to values, an (operand)
stack s and a call stack cs. The environment and heap map-
pings are partial functions, hence we write ⊥ for the undeﬁned
value. A program P ∈ Prog consists of a list of instructions
Inst∗ indexed by a program counter index pc, i ∈ P C. We
tacitly assume there is set of class deﬁnitions including a set
of ﬁelds and a set of methods, and a distinguished method to
start the execution. Each method deﬁnition includes a method
identiﬁer with formal parameters and the list of instructions.
We write sig ∈ Sig for the signature of a method which
consists of the method’s name and its formal parameters.
The execution model consists of conﬁgurations cf g ∈
Conf of shape cf g = (pc, cs, E, h, s) containing the program
counter pc ∈ PC , environment E ∈ Env, heap h ∈ Heap,
call stack cs = (pc, E, s)∗ with cs ∈ (PC × Env × Val
)∗,
and stack s ∈ Val
∗. We write  to denote an empty stack
and t :: v to denote a stack with top element v and tail t.
The semantics of CIL programs is deﬁned by the transition
relation →∈ Conf ×Conf over conﬁgurations, using the rules
in Figure 12. As expected, the reﬂexive and transitive closure
→∗ of → induces a set of program executions. Notice that the
program P is ﬁxed, hence the instruction to be executed next
is identiﬁed by the program counter pc. The semantics of CIL
is standard and we report it in Figure 12 in Appendix.
∗
B. Intra-procedural dataﬂow analysis
We now present our intra-procedural dataﬂow analysis
based on abstract interpretation of CIL instructions. Motivated
by the root cause of OIVs, our abstraction overapproximates
operations over primitive types and focuses on tracking the
propagation of object locations from sensitive sinks to attack
triggers. Our symbolic analysis combines aliases’ computation
with taint tracking [37], [38] using a store-based abstraction
of the heap [26]. We present the key features of the analysis
implemented in SerialDetector via examples and principled
rules underpinning our algorithms.
Our abstract interpretation of CIL instructions leverages
a symbolic domain of values for object locations and other
primitive values. Abusing notation, we assume a set of sym-
bolic values Val = Loc ∪ Sv containing symbolic locations
l ∈ Loc and other symbolic values sv ∈ Sv. The latter
is used as a placeholder to abstract away operations over
primitive datatypes. We use symbolic conﬁgurations of shape
(cid:104)pc, E, h, s, φ, ψ(cid:105) where the ﬁrst four components correspond
to symbolic versions of the concrete counterparts, while φ and
ψ overapproximate symbolic stacks and control ﬂow.
Challenges and solutions at high level. Symbolic analysis
for stack-based languages like CIL requires tackling several
challenges related to: (a) abstract representation of the heap;
(b) unstructured control ﬂow and symbolic representation of
the stack; (c) sound approximation of control ﬂow, e.g, loops.
We address these challenges using a store-based abstraction
of the heap and an efﬁcient on-the-ﬂy computation of merge
points for conditionals and loops via forward symbolic anal-
ysis. Our analysis is ﬂow-insensitive, hence the abstract heap
graph and information about aliases holds at any program point
within a method. While some code may be traversed twice to
account for jump instructions, we ensure that the code is only
analyzed once. Moreover, we ensure the consistency of the
symbolic stack by recording the stack state for every branch
instruction and combining the stacks at merge points, while
updating the pointers in the heap and environment.
Abstracting the heap. We represent the heap as a directed
graph where nodes denote abstract locations in the memory and
edges describe points-to relations between symbolic locations.
Edges contain labels corresponding to the ﬁelds and variables
connecting the two locations. Here, the graph is computed from
the symbolic environment and the symbolic heap.
Figure 3 depicts the abstract semantics of the heap. For
simplicity, we assume that the environment E and the heap h
6
S-STVAR
(cid:48)
(cid:48)
(cid:48)
(E
, h
, s
, φ
(cid:48)
P (pc) = stvar x
) = update(sv, E(x), E, h, s, φ)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:104)pc, E, h, s :: sv, φ, ψ(cid:105) → (cid:104)pc + 1, E
, h
, s
, φ