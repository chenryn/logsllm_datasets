---
## Page 167
excellence.
ERROR。
#!/bin/bash
则显示pass；成绩大于或等于70分但小于80分，则显示fine；成绩在 80分以上则显示
示例4：读取参数判断成绩，成绩小于60分将显示Fail；成绩大于或等于60分但小于70
示例3：要求用户输入密码，判断密码是否正确。若正确，显示OK；若不正确，则显示
echo
else
echo
then
#Read password and test.
#!/bin/bash
echo"oK"
示例2：要求用户输入密码，判断密码是否正确。
tar-czf/root/etc.tar.gz/etc&>/dev/null
#If current user is root then bakcup the /etc.
示例1：判断当前用户是否为root管理员，
#!/bin/bash
if["s（id
if语句示例如下。
fi
fi
#!/bin/bash
"ERROR"
"OK"
语法格式1
-u）"
eg
"pass"]
then
语法格式2
，如果是，则执行tar对/etc/目录执行备份。
命令序列
else
命令序列
then
语法格式3
自动化运维
151
续表
---
## Page 168
表3-13
结束整个语句。
须要以;结尾的默认命令序列除外，代表该模式下的命令到此结束。最后，case 语句使用esac
都没有匹配时，case 将执行*)下的命令序列。模式可以使用通配符，模式下的命令序列最后必
以是单条命令，也可以是多条命令的集合，*)下的命令为case默认动作，当变量与所有的模式
语句通过检查模式与变量值是否匹配，如果匹配，则执行相应模式下的命令序列，命令序列可
出了case语句的语法结构，case语句是多重if判断语句的替换解决方案，它易读、
Linux运维之道
152
示例1：根据时间备份/var/log日志目录，仅备份周三、周五的数据。
case语句示例如下。
在 Shell脚本中，除了使用if语句进行判断外，还可以使用case语句进行判断，表3-13给
2.case语句
P
echo"Fail"
else
echo
elif
echo
elif
echo
if[ $1-ge 80];then
#Test score,and print the level.
esac
模式N）
模式2）
模式1）
case $变量名称in
命令序列
命令序列
命令序列
"pass"
[$1-ge60];then
"fine"
[$1-ge70];then
"excellence"
语法格式1
esac
*）
模式51模式6）
模式3|模式4）
模式1|模式2）
case$变量名称in
命令序列
命令序列
命令序列
语法格式2
易写。case
---
## Page 169
type a character;
pkill firefox
#!/bin/bash
示例3：编写firefox火狐浏览器启动脚本，支持 start、stop、restart功能。
firefox&
pkill firefox
firefox&
case $1 in
esac
echo
case $1 in
#!/bin/bash
示例2：根据用户输入的参数不同返回不同的提示字符，如果用户输入字符，则提示You have
ii
esac
echo "Today neither
tar
case $DATE in
TIME=$（date+%Y%m%d)
DATE=S（date +a)
#!/bin/bash
restart)
stop)
start)
[[:digit:]])
[a-z]l[A-Z])
Wed|Fri)
*）
*）
-czf/usr/src/$(TIME)_log_tar.gz/var/log/&>/dev/null
"Error.
如果用户输入数字，
Wednor
则提示Youhavetypeanumber，
Fri."
#判断$1是否是字母
#判断S1是否是数字
，否则提示ERROR。
自动化运维
153
---
## Page 170
表3-14
量的初始值，然后通过运算修改变量的值，当结束循环的条件满足时，for循环结束。
赋值，多个赋值通过空格隔开；语法格式2则是首先通过初始化变量的值，也就是定义一个变
循环将循环执行命令3次。表3-14中，for语句的语法格式1对变量的赋值通过在in后面直接
次数，for循环内的指令将被执行相同的次数，如定义一个变量i取值为1、3、5，则最终for
为for语句的语法格式，for语句通过对变量的定义取值决定循环的执行次数，根据变量赋值的
运行命令序列前都需要对条件进行过滤，满足条件才会运行命令，否则不执行相关操作。表3-14
循环语句以实现特定指令的反复执行功能，在所有的循环语句中，变量必须要有初始值，每次
Linux运维之道
3.9.5循环语句应用
154
do
for NUM in (1..20}
#Print the variable values.
#!/bin/bash
示例2：多次给NUM变量赋值，并显示变量NUM的值。
mail -s "Log" $MAIL_U@$DOMAIN< /var/log/messges
DOMAIN=gmail.com
#!/bin/bash
示例1：给多个用户群发邮件，邮件内容为/var/log/messges文件中的内容，标题为Log。
for语句示例如下。
日常系统管理工作中有大量需要重复运行的指令，Shell编程提供了for、while、until、select
done
do
for MAIL_U in tom jerry smith
1.for语句
esac
done
for变量in值1值2.值N
语法格式1
#NUM取值为1到20之间的整数
done
命令序列
do
for（（初始化变量值；结束循环条件；运算））
#MAIL_U分别赋值为tom、jerry、smith
语法格式2
---
## Page 171
表3-15
取一行文件内容，文件内容有多少行，while循环就执行多少次，读取文件结束时，循环结束。
时，循环将一直被执行，直到测试条件失败时循环结束。while 语句可以通过 read 命令每次读
U_NUM=1
示例1：批量添加20个用户，
while语句示例如下
表3-15为while语句的语法格式，while语句在循环前对运行条件进行判断，运行条件满足
done
U_NUM=$（（U_NUM+1）)
while[ $U_NUM -le 20 ]
#Add twenty users through wile loop.
#!/bin/bash
2.while语句
done
do
foriin(1..9}
#!/bin/bash
示例3：通过for语句打印9×9的乘法表。
useradd user${U NUM}
do
done
echo $NUM
done
命令序列
while[条件]
echo
done
for
语法格式1
（（j=1;j<=i;j++）)
printf "%-8s" $j*$i=$((j*i))
用户名称为userN，N为1至20的数字。
#只要U_NUM的值小于或等于20，循环就一直执行
done<file
命令序列
do
while read-r line
语法格式2
第3章自动化运维
?
155
---
## Page 172
退出脚本。
Linux运维之道
156
read -p "Press Enter to continue:"
echo $（free)
echo $(uptime)
echo
read
echo
echo
echo
echo
echo
echo
clear
#!/bin/bash
示例3：无限循环菜单，根据用户的选择实现不同菜单的功能，最后通过相应的菜单项
case
echo
whiletrue
done<$FILE
echo $line
while read-rline
FILE=/etc/sysconfig/network-scripts/ifcfg-etho
#Read /etc/sysconfig/network-scripts/ifcfg-etho and print out.
#!/bin/bash
示例2：打印网卡配置文件的每一行。
do
do
3）
1）
$(cat/proc/cpuinfo)
$U_SELECT
"5.
"4.
"3
Exit Program:"
Display filesystem mount info:"
Display Mem and swap info:"
Display system load:"
Display CPU info:"
---------
in
#无限循环while
---
## Page 173
表3-16
直到条件满足时循环结束。
done
（(L-WNNn))s=WAN∩
until [ $U_NUM -eq 0 ］
U_NUM=20
#Delete user.
批量删除用户，
until语句示例如下。
表 3-16为until语句的语法格式，该语句根据条件判断循环是否继续执行，until代表的是
3.until语句
userdeluser$(U_NUM}
do
#!/bin/bash
done
esac
read -p "Please Select 1-5, Press Enter to continue:"
exit
echo"$(df -h)"
done
命令序列
do
until【条件]
4）
）
用户名称为userN，N是1~20之间的数字。
语法格式
第3章自动化运维
157
---
## Page 174
行结束后继续运行for循环，
参数将左移一位。也就是说，the现在变成了$1的值，world变成了$2的值，所以 shift 命令执
$1=hello,$2=the,S3=world，运行for指令先输出S1，然后执行shift命令，该命令执行后，位置
这样可以通过$1调用所有的命令参数。下面的示例可以很好地说明具体的使用细节。
本中的命令，通过控制语句可以人为控制脚本的执行顺序与流程。
问籍贯的提问菜单，并通过echo回显用户的选择项。
Linux运维之道
shift 的作用是将位置参数左移一位，也就是执行一次 shift命令后，$2将变为S1，依此类推，
Shell支持的控制语句有 shift、continue、break、exit，Shell 脚本默认会按顺序依次执行脚
3.9.6
158
运行脚本时指定了三个参数，分别是hello、the和world，参数之间用空格隔开，此时
echo"You are from $var"
select 语句可以用来生成菜单项目，select循环与for循环格式相同。下面通过 select 生成询
world
the
hello
[root@centos6 ~]#./shift.sh hello the world
[root@centos6~]#chmoda+x shift.sh
done
shift
echo$1
for i in s@
#!/bin/bash
[root@centos6 ~]# cat shift.sh
break
select
echo"Where are you from?"
#!/bin/bash
4.select语句
do
done
do
控制语句应用
var
in
"Beijing"
，第二次输出的S$1是the，输出 the后继续执行 shift命令，使位置变
"Shanghai"
"New York""Chongqing"
---
## Page 175
时直接通过函数名称调用即可。
这也是函数的应用案例。表3-17为Shell函数的语法格式，该函数需要先定义，后使用，使用
同样需要函数的功能。另外，当脚本比较复杂时，我们需要将脚本划分为多个模块以简化脚本，
我们通过函数名称可以更高效地重复利用它们。如果想让自己写的脚本代码可以为别人所使用，
脚本，所以示例脚本中的最后一条echo命令永远都不会被执行。
不会结束，如果for循环外面还有其他命令，将按顺序继续执行。最后，exit用来退出当前 Shell
命令，break将使for循环强制结束，不管for循环内部后续是否还有需要执行的指令，但脚本
环将结束。也就是说，第15~254次循环根本就不会运行，因为到15时，for循环执行了break
从而直接进入下一循环，也就是IP_SUFFIX将赋值为11。当IP_SUFFIX为15时，整个for循
行。下面的示例脚本说明了这些控制语句的功能与区别。