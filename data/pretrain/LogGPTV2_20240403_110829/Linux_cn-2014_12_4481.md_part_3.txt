### 基于命令行的性能监控工具
#### 1. dstat - 多类型资源统计工具
该命令整合了**vmstat**，**iostat**和**ifstat**三种命令。同时增加了新的特性和功能可以让你能及时看到各种的资源使用情况，从而能够使你对比和整合不同的资源使用情况。通过不同颜色和区块布局的界面帮助你能够更加清晰容易的获取信息。它也支持将信息数据导出到**cvs**格式文件中，从而用其他应用程序打开，或者导入到数据库中。你可以用该命令来[监控cpu，内存和网络状态随着时间的变化](http://linux.cn/article-3215-1.html)。
![](/data/attachment/album/201412/19/000431dj4t4bckobrkt7uc.png)
#### 2. atop - 相比top更好的ASCII码体验
这个使用**ASCII**码显示方式的命令行工具是一个显示所有进程活动的性能监控工具。它可以展示每日的系统日志以进行长期的进程活动分析，并高亮显示过载的系统使用资源。它包含了CPU，内存，交换空间，磁盘和网络层的度量指标。所有这些功能只需在终端运行**atop**即可。
```
# atop
```
当然你也可以使用[交互界面来显示](http://linoxide.com/monitoring-2/guide-using-linux-atop/)数据并进行排序。
![](/data/attachment/album/201412/19/000433occszd5tslddtd17.jpg)
#### 3. Nmon - 类Unix系统的性能监控
Nmon是**Nigel's Monitor**缩写，它最早开发用来作为**AIX**的系统监控工具。如果使用**在线模式**，可以使用光标键在屏幕上操作实时显示在终端上的监控信息。使用**捕捉模式**能够将数据保存为**CSV**格式，方便进一步的处理和图形化展示。
![](/data/attachment/album/201412/19/000435apz51c1p00njpkjp.png)
更多的信息参考[使用nmon进行性能监控](http://linoxide.com/monitoring-2/install-nmon-monitor-linux-performance/)的文章。
#### 4. slabtop - 显示内核slab缓存信息
这个应用能够显示**缓存分配器**是如何管理Linux内核中缓存的不同类型的对象。这个命令类似于top命令，区别是它的重点是实时显示内核slab缓存信息。它能够显示按照不同排序条件来排序显示缓存列表。它同时也能够显示一个slab层信息的统计信息的题头。举例如下：
```
# slabtop --sort=a
# slabtop -s b
# slabtop -s c
# slabtop -s l
# slabtop -s v
# slabtop -s n
# slabtop -s o
```
更多的信息参考[监控内核slab缓存](http://linux.cn/article-3702-1.html)的文章。
#### 5. sar - 性能监控和瓶颈检查
**sar** 命令可以将操作系统上所选的累积活动计数器内容信息输出到标准输出上。其基于计数值和时间间隔参数的**审计系统**，会按照指定的时间间隔输出指定次数的监控信息。如果时间间隔参数为设置为0，那么[sar命令将会显示系统从开机到当时时刻的平均统计信息](http://linoxide.com/linux-command/linux-system-performance-monitoring-using-sar-command/)。有用的命令如下：
```
# sar -u 2 3
# sar -u -f /var/log/sa/sa05
# sar -P ALL 1 1
# sar -r 1 3
# sar -W 1 3
```
#### 6. Saidar - 简单的统计监控工具
Saidar是一个**简单**且**轻量**的系统信息监控工具。虽然它无法提供大多性能报表，但是它能够通过一个简单明了的方式显示最有用的系统运行状况数据。你可以很容易地看到[运行时间、平均负载、CPU、内存、进程、磁盘和网络接口](http://linoxide.com/monitoring-2/monitor-linux-saidar-tool/)统计信息。
```
Usage: saidar [-d delay] [-c] [-v] [-h]
-d 设置更新时间（秒）
-c 彩色显示
-v 显示版本号
-h 显示本帮助
```
![](/data/attachment/album/201412/19/000448zcv6s2ewass6y2sr.png)
#### 7. top - 经典的Linux任务管理工具
作为一个广为人知的**Linux**工具，**top**是大多数的类Unix操作系统任务管理器。它可以显示当前正在运行的进程的列表，用户可以按照不同的条件对该列表进行排序。它主要显示了系统进程对**CPU**和内存的使用状况。top可以快速检查是哪个或哪几个进程挂起了你的系统。你可以在[这里](http://linux.cn/article-2352-1.html)看到top使用的例子。 你可以在终端输入top来运行它并进入到交互模式：
```
交互模式的一些快捷操作:
    全局命令:  ?, =, A, B, d, G, h, I, k, q, r, s, W, Z
    统计区的命令: l, m, t, 1
    任务区的命令：
         外观: b, x, y, z 内容: c, f, H, o, S, u 大小: #, i, n 排序: , F, O, R
    色彩方案: , a, B, b, H, M, q, S, T, w, z, 0 - 7
    窗口命令:  -, _, =, +, A, a, G, g, w
```
![](/data/attachment/album/201412/19/000450pqrrixr0u6uqdyx5.png)
#### 8. Sysdig - 系统进程的高级视图
**Sysdig**是一个能够让系统管理员和开发人员以前所未有方式洞察其系统行为的监控工具。其开发团队希望改善系统级的监控方式，通过提供关于**存储，进程，网络和内存**子系统的**统一有序**以及**粒度可见**的方式来进行错误排查，并可以创建系统活动记录文件以便你可以在任何时间轻松分析。
简单例子:
```
# sysdig proc.name=vim
# sysdig -p"%proc.name %fd.name" "evt.type=accept and proc.name!=httpd"
# sysdig evt.type=chdir and user.name=root
# sysdig -l
# sysdig -L
# sysdig -c topprocs_net
# sysdig -c fdcount_by fd.sport "evt.type=accept"
# sysdig -p"%proc.name %fd.name" "evt.type=accept and proc.name!=httpd"
# sysdig -c topprocs_file
# sysdig -c fdcount_by proc.name "fd.type=file"
# sysdig -p "%12user.name %6proc.pid %12proc.name %3fd.num %fd.typechar %fd.name" evt.type=open
# sysdig -c topprocs_cpu
# sysdig -c topprocs_cpu evt.cpu=0
# sysdig -p"%evt.arg.path" "evt.type=chdir and user.name=root"
# sysdig evt.type=open and fd.name contains /etc
```
![](/data/attachment/album/201412/19/000452i0j23a421ej2d4ra.jpg)
更多的信息参考：[如何利用sysdig改善系统层次的监控和错误排查](http://linux.cn/article-4341-1.html)。
#### 9. netstat - 显示开放的端口和连接
它是**Linux管理员**使用来显示各种网络信息的工具，如查看什么端口开放和什么网络连接已经建立以及何种进程运行在该连接之上。同时它也显示了不同程序间打开的**Unix套接字**的信息。作为大多数Linux发行版本的一部分，netstat的许多命令在[netstat和它的不同输出](http://linux.cn/article-2434-1.html)中有详细的描述。最为常用的如下：
```
$ netstat | head -20
$ netstat -r
$ netstat -rC
$ netstat -i
$ netstat -ie
$ netstat -s
$ netstat -g
$ netstat -tapn
```
#### 10. tcpdump - 洞察网络封包
**tcpdump**可以用来查看**网络连接**的**封包**内容。它显示了传输过程中封包内容的各种信息。为了使得输出信息更为有用，它允许使用者通过不同的过滤器获取自己想要的信息。可以参照的例子如下：
```
# tcpdump -i eth0 not port 22
# tcpdump -c 10 -i eth0
# tcpdump -ni eth0 -c 10 not port 22
# tcpdump -w aloft.cap -s 0
# tcpdump -r aloft.cap
# tcpdump -i eth0 dst port 80
```
更多的信息可以在[使用topdump捕捉包](http://linoxide.com/linux-how-to/network-traffic-capture-tcp-dump-command/)中找到详细描述。
#### 11. vmstat - 虚拟内存统计信息