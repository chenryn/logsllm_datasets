been parallelised; and 3) Pinocchio uses a SHA-1 circuit
which is approximately 3 times larger than ours. While it
is conceivable that Pinocchio could be made faster using
some of the optimizations introduced here, we do not be-
lieve that Pinocchio could ever reach proving times sim-
ilar to ZKBoo, due to the use of heavy public-key tech-
nology (exponentiations in a pairing-friendly group) for
each gate in the circuit.
ZKGC [21]. For the case of ZKGC, we could not di-
rectly compare implementations, since the source code
for [21] is not publicly available.
In addition, since
the publication of [21], several signiﬁcant improvements
have been proposed but have not been implemented yet.
Therefore, in Table 2, we give an accurate estimate of
1080  25th USENIX Security Symposium 
USENIX Association
the size of the proofs generated using ZKGC but only a
lower-bound for its runtime. The estimates are computed
using the following tools: (GC) we estimate the proof
size using the communication complexity of the most ef-
ﬁcient (in terms of communication complexity) garbled
circuits, namely privacy-free garbled circuits [13, 27]
that can be instantiated with as little as one ciphertext
(128 bits using AES) per AND gate in the circuit; (OT)
we plug the size and runtime given by the most efﬁ-
cient OT available [6]. Since the input size of SHA-1
is quite large (512 bits), it might be that using OT exten-
sion would prove useful. Therefore, to make the com-
parison even more favourable towards ZKGC, we only
count the runtime of 190 base OTs necessaries for active
secure OT extensions [1] and we do not account at all for
the runtime of the OT extension protocol nor the genera-
tion/veriﬁcation of the GC. The resulting estimates show
that even when counting the base OTs alone, the run-
time of ZKGC is already larger than the runtime of ZK-
Boo for the SHA-1 circuit. As for proof size, we note
that ZKGC produces shorter proofs. However, the ap-
proach of ZKGC cannot be made non-interactive which
is a qualitative drawback and it is likely to introduce sig-
niﬁcant slow-downs due to network latency.
6 Conclusions
the ﬁrst attempt
In this paper we described ZKBoo,
to make general purpose zero-knowledge practical us-
ing the “MPC-in-the-head” approach of Ishai et al. [19].
We discussed how to generalize their protocol using the
idea of (2,3)-function decompositions, we showed sim-
ple linear decompositions for arithmetic circuits over any
ring and we leave it as a future work to ﬁnd compact de-
compositions for other interesting functions.
Our experimental results show that for practically rel-
evant circuits (such as SHA-1), our protocol is the fastest
in terms of proving time, and where the veriﬁcation time
is comparable even with SNARKs technology.
Acknowledgements
This project was supported by: the Danish National Re-
search Foundation and The National Science Foundation
of China (grant 61361136003) for the Sino-Danish Cen-
ter for the Theory of Interactive Computation; the Cen-
ter for Research in Foundations of Electronic Markets
(CFEM); the European Union Seventh Framework Pro-
gramme ([FP7/2007-2013]) under grant agreement num-
ber ICT-609611 (PRACTICE).
References
[1] ASHAROV, G., LINDELL, Y., SCHNEIDER, T., AND ZOHNER,
M. More efﬁcient oblivious transfer extensions with security for
malicious adversaries. In Advances in Cryptology - EUROCRYPT
2015 - 34th Annual International Conference on the Theory and
Applications of Cryptographic Techniques, Soﬁa, Bulgaria, April
26-30, 2015, Proceedings, Part I (2015), pp. 673–701.
[2] BEN-OR, M., GOLDWASSER, S., AND WIGDERSON, A.
Completeness theorems for non-cryptographic fault-tolerant dis-
tributed computation (extended abstract). In STOC (1988), pp. 1–
10.
[3] BEN-SASSON, E., CHIESA, A., GARMAN, C., GREEN, M.,
MIERS, I., TROMER, E., AND VIRZA, M. Zerocash: Decen-
tralized anonymous payments from bitcoin. In 2014 IEEE Sym-
posium on Security and Privacy, SP 2014, Berkeley, CA, USA,
May 18-21, 2014 (2014), pp. 459–474.
[4] BEN-SASSON, E., CHIESA, A., TROMER, E., AND VIRZA, M.
Succinct non-interactive zero knowledge for a von neumann ar-
chitecture. In Proceedings of the 23rd USENIX Security Sympo-
sium, San Diego, CA, USA, August 20-22, 2014. (2014), pp. 781–
796.
[5] BENDLIN, R., DAMG ˚ARD, I., ORLANDI, C., AND ZAKARIAS,
S. Semi-homomorphic encryption and multiparty computation.
In Advances in Cryptology - EUROCRYPT 2011 - 30th An-
nual International Conference on the Theory and Applications
of Cryptographic Techniques, Tallinn, Estonia, May 15-19, 2011.
Proceedings (2011), K. G. Paterson, Ed., vol. 6632 of Lecture
Notes in Computer Science, Springer, pp. 169–188.
[6] CHOU, T., AND ORLANDI, C. The simplest protocol for obliv-
ious transfer.
In Progress in Cryptology - LATINCRYPT 2015
- 4th International Conference on Cryptology and Information
Security in Latin America, Guadalajara, Mexico, August 23-26,
2015, Proceedings (2015), pp. 40–58.
[7] DAMGAARD, I. On σ-protocols (2010). Lecture on Cryptologic
Protocol Theory (Aaurhus Unvivesrity, course notes).
[8] DAMG ˚ARD, I., AND ISHAI, Y. Scalable secure multiparty com-
In Advances in Cryptology-CRYPTO 2006. Springer,
putation.
2006, pp. 501–520.
[9] DAMG ˚ARD, I., ISHAI, Y., AND KRØIGAARD, M. Perfectly
secure multiparty computation and the computational overhead
of cryptography. In Proceedings of EuroCrypt (Springer Verlag
2010), pp. 445–465.
[10] DAMG ˚ARD, I., AND ZAKARIAS, S. Constant-overhead secure
In TCC
computation of boolean circuits using preprocessing.
(2013), pp. 621–641.
[11] EVEN, S., GOLDREICH, O., AND LEMPEL, A. A randomized
protocol for signing contracts. Commun. ACM 28, 6 (1985), 637–
647.
[12] FIAT, A., AND SHAMIR, A. How to prove yourself: Practical
solutions to identiﬁcation and signature problems. In Advances
in Cryptology—CRYPTO’86 (1986), Springer, pp. 186–194.
[13] FREDERIKSEN, T. K., NIELSEN, J. B., AND ORLANDI, C.
Privacy-free garbled circuits with applications to efﬁcient zero-
knowledge.
In Advances in Cryptology - EUROCRYPT 2015 -
34th Annual International Conference on the Theory and Appli-
cations of Cryptographic Techniques, Soﬁa, Bulgaria, April 26-
30, 2015, Proceedings, Part II (2015), pp. 191–219.
[14] GIACOMELLI, I., MADSEN, J., AND ORLANDI, C. Zkboo:
Faster zero-knowledge for boolean circuits. Cryptology ePrint
Archive, Report 2016/163, 2016. http://eprint.iacr.org/.
USENIX Association  
25th USENIX Security Symposium  1081
[15] GOLDREICH, O., MICALI, S., AND WIGDERSON, A. How to
play any mental game. In Proceedings of the nineteenth annual
ACM symposium on Theory of computing (1987), ACM, pp. 218–
229.
[16] GOLDWASSER, S., MICALI, S., AND RACKOFF, C. The knowl-
edge complexity of interactive proof-systems (extended abstract).
In Proceedings of the 17th Annual ACM Symposium on Theory
of Computing, May 6-8, 1985, Providence, Rhode Island, USA
(1985), pp. 291–304.
[17] HAZAY, C., AND LINDELL, Y. Efﬁcient secure two-party proto-
cols: Techniques and constructions. Springer Science & Business
Media, 2010.
[18] HAZAY, C., AND VENKITASUBRAMANIAM, M. On the power
of secure two-party computation. Cryptology ePrint Archive,
Report 2016/074. To appear in Crypto 2016, 2016. http://
eprint.iacr.org/.
[19] ISHAI, Y., KUSHILEVITZ, E., OSTROVSKY, R., AND SAHAI,
A. Zero-knowledge from secure multiparty computation. In Pro-
ceedings of the Thirty-ninth Annual ACM Symposium on Theory
of Computing (2007), STOC ’07, ACM, pp. 21–30.
[20] ISHAI, Y., KUSHILEVITZ, E., OSTROVSKY, R., AND SAHAI,
A. Zero-knowledge proofs from secure multiparty computation.
SIAM Journal on Computing 39, 3 (2009), 1121–1152.
[21] JAWUREK, M., KERSCHBAUM, F., AND ORLANDI, C. Zero-
knowledge using garbled circuits: how to prove non-algebraic
statements efﬁciently.
In 2013 ACM SIGSAC Conference on
Computer and Communications Security, CCS’13, Berlin, Ger-
many, November 4-8, 2013 (2013), pp. 955–966.
[22] NIELSEN, J. B., NORDHOLT, P. S., ORLANDI, C., AND
BURRA, S. S. A new approach to practical active-secure two-
party computation. In Advances in Cryptology - CRYPTO 2012
- 32nd Annual Cryptology Conference, Santa Barbara, CA, USA,
August 19-23, 2012. Proceedings (2012), pp. 681–700.
[23] PARNO, B., HOWELL, J., GENTRY, C., AND RAYKOVA, M.
Pinocchio: Nearly practical veriﬁable computation.
In 2013
IEEE Symposium on Security and Privacy, SP 2013, Berkeley,
CA, USA, May 19-22, 2013 (2013), pp. 238–252.
[24] RABIN, M. O. How to exchange secrets with oblivious transfer.
IACR Cryptology ePrint Archive 2005 (2005), 187.
[25] RANELLUCCI, S., TAPP, A., AND ZAKARIAS, R. W. Efﬁcient
generic zero-knowledge proofs from commitments. Cryptology
ePrint Archive, Report 2014/934. To appear in ICITS 2016, 2014.
http://eprint.iacr.org/.
[26] SCHNORR, C.-P. Efﬁcient identiﬁcation and signatures for smart
cards. In CRYPTO (1989), pp. 239–252.
[27] ZAHUR, S., ROSULEK, M., AND EVANS, D. Two halves make
a whole - reducing data transfer in garbled circuits using half
gates.
In Advances in Cryptology - EUROCRYPT 2015 - 34th
Annual International Conference on the Theory and Applications
of Cryptographic Techniques, Soﬁa, Bulgaria, April 26-30, 2015,
Proceedings, Part II (2015), pp. 220–250.
A Appendix
Proof of Proposition 4.1
Proof. In order to prove that the decomposition DZ is
correct is enough to prove that for any c ∈ [N] the fol-
lowing holds.
(1) if the c-th gate is an “add α” gate, then:
(2) if the c-th gate is an “mult. α” gate, then:
(3) if the c-th gate is an addition gate, then:
wi[c] =(cid:31) 3
∑
wi[c] =(cid:31) 3
∑
3
∑
i=1
3
∑
i=1
i=1
i=1
wi[a](cid:30) + α
wi[a](cid:30)· α
wi[a](cid:30) +(cid:31) 3
∑
wi[a](cid:30)·(cid:31) 3
∑
i=1
i=1
wi[b](cid:30)
wi[b](cid:30)
i=1
wi[c] =(cid:31) 3
∑
wi[c] =(cid:31) 3
∑
i=1
3
∑
i=1
3
∑
i=1
(4) if the c-th gate is a multiplication gate, then:
Indeed, using (1), (2), (3) and (4) iteratively for all
the gates in the circuit we can prove that ∑3
i=1 wi[N] =
φ (∑3
Π∗φ (x) =Rec Z(y1, . . . ,y n) =
i=1 xi) and from this it follows that
3
∑
xi(cid:30) = φ (x)
wi[N] = φ(cid:31) 3
∑
∑
i=1
i=1
i=1
yi
=
3
The ﬁrst three follow trivially by the deﬁnition of the
function φ (c)
Ai when the c-th gate is a an “add α”, “mult.
α” and addition gate, respectively. Now assume that the
c-th gate is a multiplication gate. Then, using the deﬁni-
tion for the function φ (c)
for this case and recalling that
Ai
the index values are computed modulo 3, we have that
3
∑
i=1
wi[c] =
=
3
i=1(cid:29)wi[a]· wi[b] +w i+1[a]· wi[b] +w i[a]· wi+1[b]
∑
+ Ri(c)− Ri+1(c)(cid:28)
wi[a]· (wi[b] +w i+1[b]) +
3
∑
i=1
3
∑
i=1
wi[a]· wi+2[b]+
Ri(c)
3
+
i=1
∑
=(cid:31) 3
∑
i=1
3
i=1
∑
Ri(c)−
wi[a](cid:30)·(cid:31) 3
∑
i=1
wi[b](cid:30)
1082  25th USENIX Security Symposium 
USENIX Association
We now pass to prove the 2-privacy property. Given
e ∈ [3], we deﬁne the simulator Se on input y with the
following instructions:
1. Sample random tapes k(cid:30)e,k(cid:30)e+1;
2. Sample uniformly at random the values w(cid:30)e[0] and
w(cid:30)e+1[0]. Then, for all c ∈ [N]: If the c-th gate is
an “add α”, “mult. α” or addition gate then deﬁne
w(cid:30)e[c] and w(cid:30)e+1[c] using the functions φ (c)
and φ (c)
e+1,
e
respectively. If the c-th gate is a multiplication gate
then sample uniformly at random the value w(cid:30)e+1[c]
and compute the value w(cid:30)e[c] using φ (c)
; In this way
e
deﬁne the entire views w(cid:30)e and w(cid:30)e+1;
3. Compute
y(cid:30)e = Outpute(w(cid:30)e)
and
y(cid:30)e+1 =
Outpute+1(w(cid:30)e+1);
4. Compute y(cid:30)e+2 = y− (y(cid:30)e + y(cid:30)e+1);
5. Output ({k(cid:30)i,w(cid:30)i}i∈{e,e+1},y(cid:30)e+2)
is easy to verify that
It
the output of
the sim-
ulator Se has the same distribution of
the string
({ki,wi}i∈{e,e+1},ye+2) produced by the protocol Π∗φ .
Indeed, all the elements in the output of Se are computed
using the same commands used in Π∗φ , except for the ele-
ment w(cid:30)e+1[c] when the c-th gate is a multiplication gate.
In this case w(cid:30)e+1[c] is sample uniformly at random, while
we+1[c] in the protocol is computed using the function
φ (c)
e+1. In particular, we+1[c] is computed by subtracting to
determined value the element Ri+2(c). Since Ri+2 is an
uniformly random function sampled using an indepen-
dent tape ke+2, the distribution of we+1[c] in the protocol
is the uniform one, that is it has the same distribution of
w(cid:30)e+1[c] in the output of Se. Therefore, we can conclude
that Se is a correct simulator for the decomposition DZ.
Finally, by inspection we have that |wi| = (k + N +
(cid:30))log|Z| + κ for all i ∈ [3].
USENIX Association  
25th USENIX Security Symposium  1083