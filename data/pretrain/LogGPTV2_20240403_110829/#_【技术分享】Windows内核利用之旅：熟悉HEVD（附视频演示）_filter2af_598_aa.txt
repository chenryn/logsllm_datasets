# 【技术分享】Windows内核利用之旅：熟悉HEVD（附视频演示）
|
##### 译文声明
本文是翻译文章，文章来源：hshrzd.wordpress.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
最近我正开始学习Windows内核利用，因此我决定以博文形式分享一些学习笔记。
之前的一篇文章中，我介绍了如何搭建实验环境。现在，让我们学习一下Ashfaq
Ansari开发的HackSysExtremeVulnerableDriver来熟悉整个实验环境。在接下来的文章中，我计划进一步通过漏洞演示以及利用技术学习来与读者一起探索Windows内核利用之旅。
本文中我们需要准备以下条件：
1、前文介绍的实验环境。
2、HEVD（HackSys Extreme Vulnerable Driver，极其脆弱的HackSys驱动程序）：预编译版本以及源代码。
3、OSR驱动加载器。
4、DebugView（SysInternals工具集中的一员）。
5、Visual Studio 2012（任意版本都可以）。
**二、安装及测试HEVD**
首先来看看如何安装HEVD。我们将对被调试主机（Debugee）以及调试器（Debugger）进行配置，以查看调试字符串以及HEVD的符号链接。我们也会做一些漏洞利用研究。你可以查看如下视频，阅读相关说明：
**2.1 观察调试字符串**
HEVD以及待分析的漏洞会以调试字符串形式打印大量信息。我们可以在调试端（Debugger，使用WinDbg工具）以及被调试端（Debugee，使用DebugView工具）上观察这些信息。
在安装HEVD之前，我们需要对环境进行配置，才能观察驱动初始化过程中打印的字符串信息。
在调试端（Debugger）：
我们需要打断被调试端（Debugger）的执行过程，以便获得kd命令提示符（在WinDbg中，依次选择Debug、Break）。然后，我们通过如下命令开启调试字符串打印功能：
    ed nt!Kd_Default_Mask 8
之后，我们使用如下命令恢复被调试端的执行过程。
    g
警告：打开这个功能会降低被调试端的运行性能。因此，如果条件允许，尽量在本地观察调试字符串（即只在被调试端上观察调试字符串）。
在被调试端：
我们需要以管理员权限运行DebugView。然后在菜单中依次选择如下选项：Capture->Capture Kernel。
**2.2 安装驱动**
首先，我们需要在被调试端（即受害者主机）上下载预编译包（驱动+利用程序），安装并测试预编译包。我们可以在Github上的HackSysTeam代码仓库中找到预编译包。预编译包中包含两个版本的驱动：存在漏洞的版本以及不存在漏洞的版本。我们选择存在漏洞的32位（i386）版驱动。
在OSR驱动加载器中，我们选择服务启动方式为自启动方式。然后点击“Register Service”，服务注册成功后再点击“Start
Service”开启服务。
此时我们应该可以在调试主机的WinDbg上以及被调试主机的DbgView上看到HEVD的banner信息。
**2.3 添加符号**
HEVD的预编译版本包含了符号（sdb文件）信息，我们可以在调试端中添加这些信息。首先，我们可以向被调试端发送一个中断信号打断其执行流程，然后观察已加载的所有模块：
    lm
设置过滤器，查看HEVD模块：
    lm m H*
然后我们会发现它并没有附加任何符号，但这个问题很容易解决。首先，为了打印WinDbg在搜索符号时所引用的路径信息，我们可以打开noisy模式：
    !sym_noisy
然后尝试重载这些符号：
    .reload
接着再试试查找这些符号。此时你就可以发现这些路径信息，我们可以从这些路径中拷贝pdb文件。将pdb文件移动到Debugger主机上的合适位置，然后再次重载符号。我们可以尝试打印HEVD的所有函数来进行测试：
    x HEVD!*
读者可以查看视频以了解详细信息。
**2.4 测试漏洞利用**
预编译包中同样包含一系列专用漏洞。我们可以通过合适的命令来运行这些漏洞。让我们试着部署其中一些漏洞，并设置cmd.exe为待执行的程序。
部署内核池溢出（Pool Overflow）漏洞：
如果漏洞利用成功，那么目标程序（cmd.exe）会以管理员权限运行。
我们可以使用“whoami”命令确定目标程序的运行权限：
同时，我们可以在调试端上看到漏洞打印出的调试字符串：
除了“double fetch”这个漏洞之外，所有的漏洞都能在单独一个核心上完美运行。如果我们想要复现“double
fetch”漏洞，需要开启被调试主机的双核功能。
警告：某些漏洞并不能100%被成功复现，系统在复现这些漏洞时可能会崩溃。不要在意这些细节，这种情况是正常的。
**三、来跟驱动打个招呼吧**
与用户环境中的漏洞利用情况类似，内核中的漏洞利用也是从查找关键点开始，利用这些关键点，我们可以为程序提供一个输入数据。然后，我们需要查找能够破坏程序执行过程的输入数据（与用户环境相反，内核中崩溃点会直接导致系统蓝屏！）。最后，我们会尝试控制输入以便控制漏洞程序的执行流程。
为了能够在用户态与驱动通信，我们需要向驱动发送IOCTL（Input Output
controls，输入输出控制码）控制消息。我们可以利用IOCTL从用户态的输入缓冲区向驱动发送某些输入数据。这也是我们尝试进行漏洞利用的出发点。
HEVD包含许多类漏洞样例。每个漏洞样例都可以使用不同的IOCTL触发，然后通过输入缓冲区加以利用。某些（不是全部）漏洞在触发时会导致系统蓝屏。
**3.1 查找设备名以及IOCTL**
在与驱动通信前，我们需要知道以下两点信息：
1、驱动创建的设备（如果驱动没有创建任何设备，我们就无法与它通信）。
2、驱动能接受的IOCTL列表。
HEVD是个开源项目，因此我们可以直接从源代码中阅读所需的所有信息。在现实世界中，大多数情况下我们需要对驱动进行逆向才能获取所需的信息。
让我们来看看HEVD创建设备的那部分代码。
设备名如上图所示。
现在让我们找到设备所能接受的IOCTL列表。我们先来看看与IRP数组有关的那部分代码：
与IRP_MJ_DEVICE_CONTOL绑定的那个函数用来派遣发往驱动的IOCTL。因此，我们需要看一下这个函数的内部代码。
代码中包含一个switch条件分支，会根据具体条件调用处理函数，以正确处理特定的IOCTL。我们可以根据switch的条件分支，构造出我们所需的IOCTL列表。所生成的IOCTL列表位于头文件中：
**3.2 编写客户端程序**
现在我们已经收集了足够多的信息，接下来我们可以使用自己的程序与驱动通信。我们可以将所有信息汇集在一个头文件中，如hevd_constants.h头文件：
    #pragma once
    #include 
    const char kDevName[] = "\\.\HackSysExtremeVulnerableDriver";
    #define HACKSYS_EVD_IOCTL_STACK_OVERFLOW                  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS               CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_POOL_OVERFLOW                   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_USE_UAF_OBJECT                  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT                 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x806, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT            CTL_CODE(FILE_DEVICE_UNKNOWN, 0x807, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_TYPE_CONFUSION                  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x808, METHOD_NEITHER, FILE_ANY_ACCESS)