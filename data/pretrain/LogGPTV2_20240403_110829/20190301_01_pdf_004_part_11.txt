### 2.3.1 Creating Profiles

#### 2.3.1.1 Creating a Profile with Password Reuse Restrictions
The following command creates a profile named `accts` that enforces the following password policies:
- A user cannot reuse a password within 180 days of its last use.
- A user must change their password at least 5 times before reusing it.

```sql
CREATE PROFILE accts LIMIT
PASSWORD_REUSE_TIME 180
PASSWORD_REUSE_MAX 5;
```

#### 2.3.1.2 Creating a Profile with Custom Password Verification
The following command creates a profile named `resources` that uses a user-defined function, `password_rules`, to verify that the new password meets specific complexity requirements.

```sql
CREATE PROFILE resources LIMIT
PASSWORD_VERIFY_FUNCTION password_rules;
```

### 2.3.1.3 Creating a Password Verification Function
When specifying `PASSWORD_VERIFY_FUNCTION`, you can provide a customized function that defines the security rules for password changes. For example, you can specify that the new password must be at least `n` characters long and must not contain certain values.

The function has the following signature:

```sql
function_name (user_name VARCHAR2,
               new_password VARCHAR2,
               old_password VARCHAR2) RETURN boolean
```

- `user_name`: The name of the user.
- `new_password`: The new password.
- `old_password`: The user's previous password. 
  - For database superusers, this parameter is always `NULL`.
  - For users with the `CREATEROLE` attribute, the parameter will pass the previous password if the statement includes the `REPLACE` clause.
  - For other users, the parameter will contain the previous password for the role.

The function returns a Boolean value. If the function returns `true` and does not raise an exception, the password is accepted. If the function returns `false` or raises an exception, the password is rejected. If the function raises an exception, the specified error message is displayed to the user. If the function returns `false` without raising an exception, the following error message is displayed:

```
ERROR: password verification for the specified password failed
```

The function must be owned by a database superuser and reside in the `sys` schema.

#### Example
The following example creates a profile and a custom function, then associates the function with the profile.

1. Create a profile named `acctg_pwd_profile`:

```sql
CREATE PROFILE acctg_pwd_profile;
```

2. Create a (schema-qualified) function named `verify_password`:

```sql
CREATE OR REPLACE FUNCTION sys.verify_password(user_name VARCHAR2,
                                                new_password VARCHAR2,
                                                old_password VARCHAR2)
RETURN BOOLEAN IMMUTABLE
IS
BEGIN
    IF LENGTH(new_password) < 5 THEN
        RAISE EXCEPTION 'EDB-20001: too short';
    END IF;

    IF INSTR(new_password, old_password) > 0 THEN
        RAISE EXCEPTION 'EDB-20002: includes old password';
    END IF;

    RETURN TRUE;
END;
/
```

3. Associate the function with the profile:

```sql
ALTER PROFILE acctg_pwd_profile LIMIT PASSWORD_VERIFY_FUNCTION verify_password;
```

### 2.3.2 Altering a Profile
Use the `ALTER PROFILE` command to modify a user-defined profile. Advanced Server supports two forms of the command:

```sql
ALTER PROFILE profile_name RENAME TO new_name;
ALTER PROFILE profile_name LIMIT {parameter value} [...];
```

- Include the `LIMIT` clause and one or more space-delimited parameter/value pairs to specify the rules enforced by Advanced Server.
- Use `ALTER PROFILE ... RENAME TO` to change the name of a profile.

#### Parameters
- `profile_name`: The name of the profile.
- `new_name`: The new name of the profile.
- `parameter`: The attribute limited by the profile.
- `value`: The parameter limit.

#### Examples
1. Modify a profile named `acctg_profile`:

```sql
ALTER PROFILE acctg_profile
LIMIT FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 1;
```

This profile will count failed connection attempts and lock the account for one day after three failed attempts.

2. Change the name of `acctg_profile` to `payables_profile`:

```sql
ALTER PROFILE acctg_profile RENAME TO payables_profile;
```

### 2.3.3 Dropping a Profile
Use the `DROP PROFILE` command to drop a profile. The syntax is:

```sql
DROP PROFILE [IF EXISTS] profile_name [CASCADE|RESTRICT];
```

- Include the `IF EXISTS` clause to prevent an error if the specified profile does not exist.
- Include the `CASCADE` clause to reassign any users associated with the profile to the default profile and then drop the profile.
- Include the `RESTRICT` clause to prevent dropping a profile that is associated with a role. This is the default behavior.

#### Examples
1. Drop a profile named `acctg_profile` and reassign users to the default profile:

```sql
DROP PROFILE acctg_profile CASCADE;
```

2. Drop a profile named `acctg_profile` only if no roles are associated with it:

```sql
DROP PROFILE acctg_profile RESTRICT;
```

### 2.3.4 Associating a Profile with an Existing Role
After creating a profile, you can use the `ALTER USER ... PROFILE` or `ALTER ROLE ... PROFILE` command to associate the profile with a role. The syntax is:

```sql
ALTER USER|ROLE name [[WITH] option [...]]
```

Where `option` can be:
- `PROFILE profile_name`
- `ACCOUNT {LOCK|UNLOCK}`
- `PASSWORD EXPIRE [AT 'timestamp']`
- `PASSWORD SET AT 'timestamp'`
- `LOCK TIME 'timestamp'`
- `STORE PRIOR PASSWORD {'password' 'timestamp}, ...`

For more information about the administrative clauses of the `ALTER USER` or `ALTER ROLE` command, see the PostgreSQL core documentation: [PostgreSQL SQL Commands](https://www.postgresql.org/docs/11/static/sql-commands.html)

Only a database superuser can use these clauses to enforce profile management. The clauses enforce the following behaviors:
- `PROFILE profile_name`: Associate a pre-defined profile with a role.
- `ACCOUNT LOCK|UNLOCK`: Lock or unlock the user account.
- `PASSWORD EXPIRE [AT 'timestamp']`: Specify when the password will expire.
- `PASSWORD SET AT 'timestamp'`: Set the password modification date.
- `LOCK TIME 'timestamp'`: Lock the role at a specified time.
- `STORE PRIOR PASSWORD {'password' 'timestamp}, ...`: Modify the password history.

Each login role may only have one profile. To discover the profile associated with a login role, query the `profile` column of the `DBA_USERS` view.

#### Examples
1. Associate a profile named `acctg_profile` with a user named `john`:

```sql
ALTER USER john PROFILE acctg_profile;
```

2. Associate a profile named `acctg_profile` with a role named `john`:

```sql
ALTER ROLE john PROFILE acctg_profile;
```

### 2.3.5 Unlocking a Locked Account
A database superuser can use the `ALTER USER|ROLE ... ACCOUNT` command to lock or unlock a role. The syntax is:

```sql
ALTER USER|ROLE name
ACCOUNT {LOCK|UNLOCK}
LOCK TIME 'timestamp'
```

- `ACCOUNT LOCK`: Lock a role immediately.
- `ACCOUNT UNLOCK`: Unlock a role.
- `LOCK TIME 'timestamp'`: Lock the account at a specified time for the duration defined by the `PASSWORD_LOCK_TIME` parameter.

#### Examples
1. Lock the role named `john`:

```sql
ALTER ROLE john ACCOUNT LOCK;
```

2. Unlock the role named `john`:

```sql
ALTER USER john ACCOUNT UNLOCK;
```

3. Lock the role named `john` on September 4, 2015:

```sql
ALTER ROLE john LOCK TIME 'September 4 12:00:00 2015';
```

4. Lock the role named `john` on September 4, 2015, and keep it locked until a superuser unlocks it:

```sql
ALTER ROLE john LOCK TIME 'September 4 12:00:00 2015' ACCOUNT LOCK;
```

### 2.3.6 Creating a New Role Associated with a Profile
A database superuser can use the `CREATE USER|ROLE` command to assign a named profile to a role when creating the role. The syntax is:

```sql
CREATE USER|ROLE name [[WITH] option [...]]
```

Where `option` can be:
- `PROFILE profile_name`
- `ACCOUNT {LOCK|UNLOCK}`
- `PASSWORD EXPIRE [AT 'timestamp']`
- `LOCK TIME 'timestamp'`

For more information about the administrative clauses of the `CREATE USER` or `CREATE ROLE` command, see the PostgreSQL core documentation: [PostgreSQL SQL Commands](https://www.postgresql.org/docs/11/static/sql-commands.html)

#### Examples
1. Create a login role named `john` associated with the `acctg_profile` profile:

```sql
CREATE USER john PROFILE acctg_profile IDENTIFIED BY '1safepwd';
```

2. Create a login role named `john` associated with the `acctg_profile` profile using `CREATE ROLE`:

```sql
CREATE ROLE john PROFILE acctg_profile LOGIN PASSWORD '1safepwd';
```

### 2.3.7 Backing up Profile Management Functions
A profile may include a `PASSWORD_VERIFY_FUNCTION` clause that refers to a user-defined function. Profiles are global objects shared by all databases within a cluster, while user-defined functions are database objects.

To back up profiles and their associated functions:
- Use `pg_dumpall` with the `-g` or `-r` option to create a script that recreates the definition of existing profiles but not the user-defined functions.
- Use `pg_dump` to explicitly dump and restore the database containing the user-defined functions.

The script created by `pg_dump` will contain a command that associates the restored function with the profile:

```sql
ALTER PROFILE ... LIMIT PASSWORD_VERIFY_FUNCTION function_name
```

If the `PASSWORD_VERIFY_FUNCTION` clause is set to `DEFAULT` or `NULL`, the behavior will be replicated by the script generated by `pg_dumpall -g` or `pg_dumpall -r`.

Copyright Â© 2007 - 2018 EnterpriseDB Corporation. All rights reserved.