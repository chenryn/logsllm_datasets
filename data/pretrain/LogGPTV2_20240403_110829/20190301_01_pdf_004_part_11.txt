The following command creates a profile named accts. The profile specifies that a user
cannot re-use a password within 180 days of the last use of the password, and must
change their password at least 5 times before re-using the password:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 87
Database Compatibility for Oracle® Developers Guide
CREATE PROFILE accts LIMIT
PASSWORD_REUSE_TIME 180
PASSWORD_REUSE_MAX 5;
The following command creates a profile named resources; the profile calls a user-
defined function named password_rules that will verify that the password provided
meets their standards for complexity:
CREATE PROFILE resources LIMIT
PASSWORD_VERIFY_FUNCTION password_rules;
2.3.1.1 Creating a Password Function
When specifying PASSWORD_VERIFY_FUNCTION, you can provide a customized
function that specifies the security rules that will be applied when your users change their
password. For example, you can specify rules that stipulate that the new password must
be at least n characters long, and may not contain a specific value.
The password function has the following signature:
function_name (user_name VARCHAR2,
new_password VARCHAR2,
old_password VARCHAR2) RETURN boolean
Where:
user_name is the name of the user.
new_password is the new password.
old_password is the user's previous password. If you reference this parameter
within your function:
When a database superuser changes their password, the third parameter
will always be NULL.
When a user with the CREATEROLE attribute changes their password, the
parameter will pass the previous password if the statement includes the
REPLACE clause. Note that the REPLACE clause is optional syntax for a
user with the CREATEROLE privilege.
When a user that is not a database superuser and does not have the
CREATEROLE attribute changes their password, the third parameter will
contain the previous password for the role.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 88
Database Compatibility for Oracle® Developers Guide
The function returns a Boolean value. If the function returns true and does not raise an
exception, the password is accepted; if the function returns false or raises an exception,
the password is rejected. If the function raises an exception, the specified error message
is displayed to the user. If the function does not raise an exception, but returns false, the
following error message is displayed:
ERROR: password verification for the specified password failed
The function must be owned by a database superuser, and reside in the sys schema.
Example:
The following example creates a profile and a custom function; then, the function is
associated with the profile. The following CREATE PROFILE command creates a profile
named acctg_pwd_profile:
CREATE PROFILE acctg_pwd_profile;
The following commands create a (schema-qualified) function named
verify_password:
CREATE OR REPLACE FUNCTION sys.verify_password(user_name varchar2,
new_password varchar2, old_password varchar2)
RETURN boolean IMMUTABLE
IS
BEGIN
IF (length(new_password)  ALTER ROLE alice PASSWORD 'hey';
ERROR: missing REPLACE clause
The new password must be at least 5 characters long:
edb=> ALTER USER alice PASSWORD 'hey' REPLACE 'temp_password';
ERROR: EDB-20001: too short
CONTEXT: edb-spl function verify_password(character varying,character
varying,character varying) line 5 at procedure/function invocation statement
If the new password is acceptable, the command completes without error:
edb=> ALTER USER alice PASSWORD 'hello' REPLACE 'temp_password';
ALTER ROLE
If alice decides to change her password, the new password must not contain the old
password:
edb=> ALTER USER alice PASSWORD 'helloworld' REPLACE 'hello';
ERROR: EDB-20002: includes old password
CONTEXT: edb-spl function verify_password(character varying,character
varying,character varying) line 10 at procedure/function invocation statement
To remove the verify function, set password_verify_function to NULL:
ALTER PROFILE acctg_pwd_profile LIMIT password_verify_function NULL;
Then, all password constraints will be lifted:
edb=# ALTER ROLE alice PASSWORD 'hey';
ALTER ROLE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 90
Database Compatibility for Oracle® Developers Guide
2.3.2 Altering a Profile
Use the ALTER PROFILE command to modify a user-defined profile; Advanced Server
supports two forms of the command:
ALTER PROFILE profile_name RENAME TO new_name;
ALTER PROFILE profile_name
LIMIT {parameter value}[...];
Include the LIMIT clause and one or more space-delimited parameter/value pairs to
specify the rules enforced by Advanced Server, or use ALTER PROFILE…RENAME TO to
change the name of a profile.
Parameters:
profile_name specifies the name of the profile.
new_name specifies the new name of the profile.
parameter specifies the attribute limited by the profile.
value specifies the parameter limit.
See the table in Section 2.3.1 for a complete list of accepted parameter/value pairs.
Examples
The following example modifies a profile named acctg_profile:
ALTER PROFILE acctg_profile
LIMIT FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 1;
acctg_profile will count failed connection attempts when a login role attempts to
connect to the server. The profile specifies that if a user has not authenticated with the
correct password in three attempts, the account will be locked for one day.
The following example changes the name of acctg_profile to payables_profile:
ALTER PROFILE acctg_profile RENAME TO payables_profile;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 91
Database Compatibility for Oracle® Developers Guide
2.3.3 Dropping a Profile
Use the DROP PROFILE command to drop a profile. The syntax is:
DROP PROFILE [IF EXISTS] profile_name [CASCADE|RESTRICT];
Include the IF EXISTS clause to instruct the server to not throw an error if the specified
profile does not exist. The server will issue a notice if the profile does not exist.
Include the optional CASCADE clause to reassign any users that are currently associated
with the profile to the default profile, and then drop the profile. Include the optional
RESTRICT clause to instruct the server to not drop any profile that is associated with a
role. This is the default behavior.
Parameters
profile_name
The name of the profile being dropped.
Examples
The following example drops a profile named acctg_profile:
DROP PROFILE acctg_profile CASCADE;
The command first re-associates any roles associated with the acctg_profile profile
with the default profile, and then drops the acctg_profile profile.
The following example drops a profile named acctg_profile:
DROP PROFILE acctg_profile RESTRICT;
The RESTRICT clause in the command instructs the server to not drop acctg_profile
if there are any roles associated with the profile.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 92
Database Compatibility for Oracle® Developers Guide
2.3.4 Associating a Profile with an Existing Role
After creating a profile, you can use the ALTER USER… PROFILE or ALTER ROLE…
PROFILE command to associate the profile with a role. The command syntax related to
profile management functionality is:
ALTER USER|ROLE name [[WITH] option[…]
where option can be the following compatible clauses:
PROFILE profile_name
| ACCOUNT {LOCK|UNLOCK}
| PASSWORD EXPIRE [AT 'timestamp']
or option can be the following non-compatible clauses:
| PASSWORD SET AT 'timestamp'
| LOCK TIME 'timestamp'
| STORE PRIOR PASSWORD {'password' 'timestamp} [, ...]
For information about the administrative clauses of the ALTER USER or ALTER ROLE
command that are supported by Advanced Server, please see the PostgreSQL core
documentation available at:
https://www.postgresql.org/docs/11/static/sql-commands.html
Only a database superuser can use the ALTER USER|ROLE clauses that enforce profile
management. The clauses enforce the following behaviors:
Include the PROFILE clause and a profile_name to associate a pre-defined
profile with a role, or to change which pre-defined profile is associated with a
user.
Include the ACCOUNT clause and the LOCK or UNLOCK keyword to specify that the
user account should be placed in a locked or unlocked state.
Include the LOCK TIME 'timestamp' clause and a date/time value to lock the
role at the specified time, and unlock the role at the time indicated by the
PASSWORD_LOCK_TIME parameter of the profile assigned to this role. If LOCK
TIME is used with the ACCOUNT LOCK clause, the role can only be unlocked by a
database superuser with the ACCOUNT UNLOCK clause.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 93
Database Compatibility for Oracle® Developers Guide
Include the PASSWORD EXPIRE clause with the AT 'timestamp' keywords to
specify a date/time when the password associated with the role will expire. If you
omit the AT 'timestamp' keywords, the password will expire immediately.
Include the PASSWORD SET AT 'timestamp' keywords to set the password
modification date to the time specified.
Include the STORE PRIOR PASSWORD {'password' 'timestamp} [, ...]
clause to modify the password history, adding the new password and the time the
password was set.
Each login role may only have one profile. To discover the profile that is currently
associated with a login role, query the profile column of the DBA_USERS view.
Parameters
name
The name of the role with which the specified profile will be associated.
password
The password associated with the role.
profile_name
The name of the profile that will be associated with the role.
timestamp
The date and time at which the clause will be enforced. When specifying a value
for timestamp, enclose the value in single-quotes.
Examples
The following command uses the ALTER USER… PROFILE command to associate a
profile named acctg with a user named john:
ALTER USER john PROFILE acctg_profile;
The following command uses the ALTER ROLE… PROFILE command to associate a
profile named acctg with a user named john:
ALTER ROLE john PROFILE acctg_profile;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 94
Database Compatibility for Oracle® Developers Guide
2.3.5 Unlocking a Locked Account
A database superuser can use clauses of the ALTER USER|ROLE… command to lock or
unlock a role. The syntax is:
ALTER USER|ROLE name
ACCOUNT {LOCK|UNLOCK}
LOCK TIME 'timestamp'
Include the ACCOUNT LOCK clause to lock a role immediately; when locked, a role’s
LOGIN functionality is disabled. When you specify the ACCOUNT LOCK clause without
the LOCK TIME clause, the state of the role will not change until a superuser uses the
ACCOUNT UNLOCK clause to unlock the role.
Use the ACCOUNT UNLOCK clause to unlock a role.
Use the LOCK TIME 'timestamp' clause to instruct the server to lock the account at the
time specified by the given timestamp for the length of time specified by the
PASSWORD_LOCK_TIME parameter of the profile associated with this role.
Combine the LOCK TIME 'timestamp' clause and the ACCOUNT LOCK clause to lock
an account at a specified time until the account is unlocked by a superuser invoking the
ACCOUNT UNLOCK clause.
Parameters
name
The name of the role that is being locked or unlocked.
timestamp
The date and time at which the role will be locked. When specifying a value for
timestamp, enclose the value in single-quotes.
Note
This command (available only in Advanced Server) is implemented to support Oracle-
styled profile management.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 95
Database Compatibility for Oracle® Developers Guide
Examples
The following example uses the ACCOUNT LOCK clause to lock the role named john.
The account will remain locked until the account is unlocked with the ACCOUNT UNLOCK
clause:
ALTER ROLE john ACCOUNT LOCK;
The following example uses the ACCOUNT UNLOCK clause to unlock the role named
john:
ALTER USER john ACCOUNT UNLOCK;
The following example uses the LOCK TIME 'timestamp' clause to lock the role
named john on September 4, 2015:
ALTER ROLE john LOCK TIME „September 4 12:00:00 2015‟;
The role will remain locked for the length of time specified by the
PASSWORD_LOCK_TIME parameter.
The following example combines the LOCK TIME 'timestamp' clause and the
ACCOUNT LOCK clause to lock the role named john on September 4, 2015:
ALTER ROLE john LOCK TIME „September 4 12:00:00 2015‟ ACCOUNT LOCK;
The role will remain locked until a database superuser uses the ACCOUNT UNLOCK
command to unlock the role.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 96
Database Compatibility for Oracle® Developers Guide
2.3.6 Creating a New Role Associated with a Profile
A database superuser can use clauses of the CREATE USER|ROLE command to assign a
named profile to a role when creating the role, or to specify profile management details
for a role. The command syntax related to profile management functionality is:
CREATE USER|ROLE name [[WITH] option […]]
where option can be the following compatible clauses:
PROFILE profile_name
| ACCOUNT {LOCK|UNLOCK}
| PASSWORD EXPIRE [AT 'timestamp']
or option can be the following non-compatible clauses:
| LOCK TIME 'timestamp'
For information about the administrative clauses of the CREATE USER or CREATE ROLE
command that are supported by Advanced Server, please see the PostgreSQL core
documentation available at:
https://www.postgresql.org/docs/11/static/sql-commands.html
CREATE ROLE|USER… PROFILE adds a new role with an associated profile to an
Advanced Server database cluster.
Roles created with the CREATE USER command are (by default) login roles. Roles
created with the CREATE ROLE command are (by default) not login roles. To create a
login account with the CREATE ROLE command, you must include the LOGIN keyword.
Only a database superuser can use the CREATE USER|ROLE clauses that enforce profile
management; these clauses enforce the following behaviors:
Include the PROFILE clause and a profile_name to associate a pre-defined
profile with a role, or to change which pre-defined profile is associated with a
user.
Include the ACCOUNT clause and the LOCK or UNLOCK keyword to specify that the
user account should be placed in a locked or unlocked state.
Include the LOCK TIME 'timestamp' clause and a date/time value to lock the
role at the specified time, and unlock the role at the time indicated by the
PASSWORD_LOCK_TIME parameter of the profile assigned to this role. If LOCK
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 97
Database Compatibility for Oracle® Developers Guide
TIME is used with the ACCOUNT LOCK clause, the role can only be unlocked by a
database superuser with the ACCOUNT UNLOCK clause.
Include the PASSWORD EXPIRE clause with the optional AT 'timestamp'
keywords to specify a date/time when the password associated with the role will
expire. If you omit the AT 'timestamp' keywords, the password will expire
immediately.
Each login role may only have one profile. To discover the profile that is currently
associated with a login role, query the profile column of the DBA_USERS view.
Parameters
name
The name of the role.
profile_name
The name of the profile associated with the role.
timestamp
The date and time at which the clause will be enforced. When specifying a value
for timestamp, enclose the value in single-quotes.
Examples
The following example uses CREATE USER to create a login role named john who is
associated with the acctg_profile profile:
CREATE USER john PROFILE acctg_profile IDENTIFIED BY “1safepwd”;
john can log in to the server, using the password 1safepwd.
The following example uses CREATE ROLE to create a login role named john who is
associated with the acctg_profile profile:
CREATE ROLE john PROFILE acctg_profile LOGIN PASSWORD “1safepwd”;
john can log in to the server, using the password 1safepwd.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 98
Database Compatibility for Oracle® Developers Guide
2.3.7 Backing up Profile Management Functions
A profile may include a PASSWORD_VERIFY_FUNCTION clause that refers to a user-
defined function that specifies the behavior enforced by Advanced Server. Profiles are
global objects; they are shared by all of the databases within a cluster. While profiles are
global objects, user-defined functions are database objects.
Invoking pg_dumpall with the –g or –r option will create a script that recreates the
definition of any existing profiles, but that does not recreate the user-defined functions
that are referred to by the PASSWORD_VERIFY_FUNCTION clause. You should use the
pg_dump utility to explicitly dump (and later restore) the database in which those
functions reside.
The script created by pg_dump will contain a command that includes the clause and
function name:
ALTER PROFILE… LIMIT PASSWORD_VERIFY_FUNCTION function_name
to associate the restored function with the profile with which it was previously associated.
If the PASSWORD_VERIFY_FUNCTION clause is set to DEFAULT or NULL, the behavior
will be replicated by the script generated by the pg_dumpall –g or pg_dumpall –r
command.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 99