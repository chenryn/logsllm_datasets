cant substring overlap should point to a high level of similarity
between the strings; (2) two strings which contain the same
words, but in a different order, should be recognized as being
similar. The factor 2 ensures that when the two strings are
exactly the same, the distance is 0.
For structural features, we use Euclidean distance (Equa-
tion 3). Each feature—depth, number of operators, and
centroid—appears as a term in the calculation.
We combine the three distances by assigning each of them
a weight, and thus the distance between two variables is:
d(v1, v2) = αdseman + βdstat + γdstruct
(5)
where v1 and v2 are variables from the ﬁrst and second
designs, respectively. When assigning values to parameters
α, β, and γ, we empirically choose α to be the largest as
the semantic meanings of variable names are usually similar
between designs. We choose β to be the smallest as the
detailed implementation are often different between designs,
thus the structural information will be less similar.
C. Structural Transformation Pass
In the structural transformation pass, we amend the arith-
metic expressions that make up each of the terms in the
property. We start by describing the challenges we met in
translating the properties after the variable mapping pass. We
then discuss our observations and solutions to the challenges.
1) Challenges: We identify three types of structural dissim-
ilarities between designs, which Transys must handle: mapping
state to array, mapping one to many, and mapping constants.
Mapping state to array refers to the case where a variable
is updated according to a state machine in one design, but
in another design, the variable is an array that stores all the
possible values at different states of the state machine. Figure 4
shows code snippets of two AES implementations of the key
expansion. In Design 1, the round constant rcon_o changes
every time the state machine changes to the next state. In
Design 2, all possible values of rcon are stored in an array.
Mapping one to many refers to the case where a variable
from one design can be mapped to several variables in another
design. For example, one design might use temporary variables
to store the intermediate results of long calculations or avoid
large arrays, and a second design might not. Figure 5 shows
code snippets from two AES cores. The variable keyout in
Design 1 maps to the concatenation of variables w0, w4, w8,
and w12 in Design 2. Mapping many to one is the dual case
and also requires structural transformation.
The last type is mapping the constant values used in one
design to the analogous constant values of a second design.
For example, the syscall instruction is encoded differently in
OpenRISC cores versus RISC-V cores. In some cases it is
possible to ﬁnd a linear transformation from the constant of
one design to its semantic equivalent in the second design, but
in other cases, such as with the syscall encoding, it is not.
2) Transformation Algorithm: We observe that if in the ﬁrst
design, the variables in the property are related to each other,
the correlation among the variables in design two are often
explicitly stated in the code. Thus, we leverage the PDG to
build the arithmetic expressions of, and capture the analogous
relationship between, the variables in the translated property.
As shown in Algorithm 1, we ﬁrst check whether in the ﬁrst
design, the variables in the property are in the same PDG. If
not, we assume that in the second design, the variables in the
translated property are also not in the same PDG. In this case,
we use the translation result of the Variable Mapping Pass as
the result for this pass.
Otherwise, we leverage the PDG to build the property. We
take the mapped variable with the highest score (max_var) and
check whether the other mapped variables are in the same
PDG as the max_var. If not, we move to the next variable in
the vector of mapped variables and check again. We iterate
until all variables in the translated property are in the same
PDG as max_var. Then we ﬁnd the variable with the second
highest score (line 10).
Finally, we use a propagation algorithm in the PDG to
build the new property. The propagation algorithm takes in
two variables: a starting point variable, and an ending point
variable (max_var is usually taken as the starting point). The
ending point variable can be either an ancestor or a descendant
of the starting point in the dependency graph. We explore both
the ancestors and descendants of the starting point variable
in the PDG until we hit the ending point variable. During
the exploration of each node in the PDG, we replace the
intermediate variables until the ending point variable is shown
in the property. We stop at the ending point variable so that the
property can cover the logic involving the mapped variables
but does not include too long of a calculation.
There is a timing issue during the propagation. Every time
we encounter a nonblocking assignment, we add a Next (X)
to the property (or equivalently, a prev), indicating that there
will be a delay of one clock-cycle for this assignment. Sec-
tion VI shows an example of how we handle the nonblocking
assignment timing.
ALGORITHM 1: Transformation Pass
: The property generated from the VM Pass P
: A set of PDGs of the Design 1 pdgSet1
: A set of PDGs of the Design 2 pdgSet2
: A map of variable mapping scores vScoreMap
Input
Input
Input
Input
Output: A new property P (cid:48)
1 newAssertSet ← ∅;
2 if in_same_pdg(P, pdgSet1) then
3
4
5
6
max_var ← max_score(P, vScoreMap);
for var in P do
for v in vScoreMap[var] do
if in_same_pdg(max_var, v, pdgSet1) then
break ;
end
substitute(P , var, v);
end
var ← max_score(P -{max_var}, vScoreMap);
P (cid:48) ← propagate(max_var, var);
P (cid:48) ← P ;
7
8
9
10
11
12 else
13
14 end
15 return P’;
D. Constraint Reﬁnement Pass
At this point, we have a draft property of Design 2 in the
= A → B. We ﬁrst check whether P (cid:48) is a valid
form P (cid:48)
.
property of Design 2. If it is, we are done. If it is not, then
we continue with the constraint reﬁnement pass. The goal of
= A(cid:48) → B is a
this step is to reﬁne A to A(cid:48), such that P (cid:48)(cid:48)
.
valid property of Design 2.
We ﬁrst introduce notation and deﬁne the problem; we then
describe the algorithm.
1) Notation and Problem Statement: A hardware design
unrolled for multiple clock cycles can be represented as a
.
boolean formula φ in conjunctive normal form (CNF): φ
=
(lp ∨ lq)∧ (lr ∨ ls ∨ lt)∧ . . ., which is written as a conjunction
of clauses ω, where each clause is a disjunction of literals l
= (lp ∨ lq)). A literal is either a variable xi or its
.
(e.g., ω
negation ¬xi.
Let φD2 be the CNF formula representing Design 2 unrolled
for some ﬁnite but unbounded number of clock cycles. P is a
valid property of Design 2 if and only if the boolean formula
φD2 ∧ ¬P is unsatisﬁable:
φD2 |= P ⇔ (φD2 ∧ ¬P ) UNSAT
(6)
If φD2 ∧ ¬P is satisﬁable, in other words, if P is not a
valid property of Design 2, then we look for a sequence of
conjuncts A1 ∧ A2 ∧ . . . ∧ An such that the formula F
.
=
φD2 ∧ ¬P ∧ A1 ∧ A2 ∧ . . . ∧ An is unsatisﬁable. Using the
new conjuncts, we deﬁne P (cid:48) as follows:
(cid:48)
P
= (A1 ∧ A2 ∧ . . . ∧ An ∧ A) → B
.
(7)
Then φD2 ∧ ¬P (cid:48) is equivalent to F : F ⇔ φD2 ∧ ¬P (cid:48), and
therefore equisatisﬁable with F . If we are successful in ﬁndng
A1 ∧ A2 ∧ . . .∧ An that make F unsatisﬁable, then φD2 ∧¬P (cid:48)
will also be unsatisﬁable, and P (cid:48) will be a valid property of
the design: φD2 |= P (cid:48).
There are two possible cases when F is unsatisﬁable. The
ﬁrst case is that the subformula φD2 ∧ A1 ∧ A2 ∧ ... ∧ An is
ALGORITHM 2: Reﬁnement Pass
Input
: A CNF formula φ
: The property generated from the T Pass P (cid:48)
Input
Output: A new property with reﬁned antecedent P (cid:48)(cid:48)
1 if φ ∧ ¬P (cid:48) is UNSAT then return P (cid:48);
2 for t in range(1,MAX_SEQ) do
Ωt ← {ωi|(ωi in φ) ∧ (P (cid:48)
t in ωi)};
3
for ωi in Ωt do
4
t ← {ωj|(ωj in φ) ∧ (¬l in ωj) ∧ (l in ωi)};
Ω(cid:48)
5
for ωj in Ω(cid:48)
6
7
8
9
10
S ← ∅; step ← 0;
ωl ← ωi (cid:12) ωj;
S ← S ∪ {l|l in ωl};
while step < MAX_STEP or False not in ωl or
ωl changes do
t do
ωante ← ﬁnd_ante(ωl, S);
S ← S ∪ {l|l in ωante};
ωl ← ωante (cid:12) ωl;
step ← step +1;
Ante ← (cid:86)
end
l in ωl,l(cid:54)=I(cid:48)
λ(l, 0);
if φ∧ Ante is SAT then
return P (cid:48)∧ ¬Ante;
t
11
12
13
14
15
16
else
end
17
18
19
20
21
22
23 end
24 return Not Found;
end
end
unsatisﬁable. In this case, the negation of the new conjuncts
¬(A1 ∧ A2 ∧ ...∧ An) is itself a valid property of φD2. We are
not interested in this case as it does not relate to the original
property we are translating. The second case is that φD2 ∧
A1 ∧ A2 ∧ ... ∧ An is satisﬁable, and F = φD2 ∧ ¬P ∧ A1 ∧
A2 ∧ ... ∧ An is unsatisﬁable. In this case, A1 ∧ A2 ∧ ... ∧ An
are the preconditions of the property P . This is the reﬁnement
of the constraints of the translated property.
Constraint Reﬁnement Problem. Given φD, the CNF repre-
sentation of a hardware design unrolled a ﬁnite but unbounded
number of clock cycles, and a draft property P such that
φD ∧ ¬P is satisﬁable, ﬁnd a sequence of n conjuncts
A1 ∧ A2 ∧ ... ∧ An such that:
• φD ∧ A1 ∧ A2 ∧ ... ∧ An is satisﬁable, and
• φD ∧ ¬P ∧ A1 ∧ A2 ∧ ... ∧ An is unsatisﬁable.
2) Constraint Reﬁnement Algorithm: The constraint reﬁne-
ment algorithm works by ﬁnding conﬂict clauses in the CNF
representation of the design. For each literal l appearing in the
clause ω that contains B (the consequent of the property), the
algorithm searches for a clause ω(cid:48) in φD such that ¬l appears
in the clause. These two clauses are conﬂict clauses. If we
force all other literals appearing in ω and ω(cid:48) to evaluate to
false, then φD will be unsatisﬁable.
Let λ(l, v) be a function that takes in a literal l ∈ {x,¬x}
and a truth value v ∈ {true, false} and returns a new literal
l(cid:48) ∈ {x,¬x} such that l(cid:48) evaluates to true when l evaluates
to v.
λ(l, v) =
x
x
¬x
if l = x, v = true
if l = ¬x, v = false
otherwise
Given a CNF formula φ, if there exist conﬂict clauses ωi and
ωj in φ, where ωi = li1∨ ...∨ lis∨ xc, and ωj = lj1∨ ...∨ ljt∨
¬xc, then φ∧ λ(li1, 0)∧ ...∧ λ(lis, 0)∧ λ(lj1, 0)∧ ...∧ λ(ljt, 0)
is unsatisﬁable. This is because xc ∧ ¬xc is unsatisﬁable. By
assigning all other literals in the two clauses ωi and ωj to 0,
subformula ωi ∧ ωj can be simpliﬁed to xc ∧ ¬xc, which is
unsatisﬁable. Thus, P = ¬(λ(li1, 0)∧...∧λ(lis, 0)∧λ(lj1, 0)∧
... ∧ λ(ljt, 0)) is a property of φ.
Algorithm 2 takes a CNF formula φD and the property
to be reﬁned P (cid:48) as inputs. It ﬁrst checks whether P (cid:48) is a
valid property of φD, if it is, the algorithm just returns P (cid:48).
Otherwise, it searches for clauses that contain the property P (cid:48)
(line 3), and for each clause that contains P (cid:48), it searches for
its conﬂict clauses (line 5). By combining the results of these
two sets of clauses, the algorithm produces the new property
for φD.
3) Greedy Search: The results we obtained from combining
ωi and ωj often do not include any interesting preconditions,
but just a restatement of the property P (cid:48). This is because when
unrolling the design together with the invariant, some clauses
to connect the invariant with the design need to be added to
φD. To get the preconditions, we have to search further.