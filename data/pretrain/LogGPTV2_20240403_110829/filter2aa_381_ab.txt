Attacker Capabilities: An attacker seeks to gain unautho-
rized access to sensitive resources by leveraging one of the
following methods on publicly exposed web API endpoint
functionality:
1) GET sensitive data using an API endpoint.
2) POST1 to data stores using the API endpoint.
Web API hijacking gives the attackers unauthorized access
to perform privileged actions on the API server side, and the
ability to inﬂuence reﬂected data to various apps and other
clients that may access the web API. This is a highly attractive
target for an attacker because it is a single point of attack that
can affect multiple users. For example, an attacker can leverage
capability 2 to write data to a data store that in subsequently
read by a website that may display the data to users. If the
attacker is able to embed malicious code into the data store,
that code would be reﬂected to the user if the consuming
website does not properly sanitize the data.
III. BACKGROUND
Android apps are packaged as APK ﬁles, which contain
all the resources necessary to execute the application on
the Android Framework. WARDroid starts by extracting the
resources from a given APK ﬁle and preprocessing those
resources for further analysis. The DEX class ﬁles are further
converted to an intermediate representation called Jimple [10]
that lends itself to static analysis using Soot [11]. Additionally,
WARDroid inspects the XML resource ﬁles that represent the
user interface and user input elements for different Activities
of the app. In Android, Activities represent the user interface
components of an app.
We focus on the Android platform due to its open source
nature, and we restrict our analysis to apps that use the
HTTP protocol for communication with a web API server.
One of the main functions of WARDroid is therefore to
model the HTTP(S) communication of the app with respect
to different web API services that may be used by the app.
An HTTP transaction consists of a Request and a Response
pair. A Request is modeled in the output templates as a tu-
ple containing . Similarly, we model a Response as . Apps may directly open an HTTP stream
through the APIs provided by the framework, or they may
use an intermediate SDK which abstracts the framework API
utilization.
1We consider other less common HTTP verbs such as UPDATE and PUT
as having similar core functionality
Listing 1. Basic HTTP Request Generation Code
1
p r o t e c t e d
S t r i n g
doInBackground ( s t r i n g s ) {
2
URL u r l ;
3
HttpURLConnection
urlConnection = n u l l ;
4
/ / c r e a t e
r e q u e s t
5
u r l = new URL( s t r i n g s [ 0 ] ) ;
6
urlConnection =
( HttpURLConnection )
u r l . openConnection ( ) ;
7
i n t
responseCode =
urlConnection . getResponseCode ( ) ;
8
i f ( responseCode ==
HttpURLConnection .HTTP OK) {
9
/ / response
handling
code
10
}
11
r e t u r n
n u l l ;
12
}
The code listing shows a typical HTTP request method
in Android apps. This is encapsulated within a class that
may extend AsyncTask and is called using syntax such as
‘new GetMethodDemo().execute(serviceURL);’.
WARDroid identiﬁes the HTTP interface at line 6 as a
point of interest (POI) and proceeds with backward program
slicing to identify all parameters and UI elements to which
the connection has a dependency. Intuitively, this exercise
encapsulates the full dependency graph that makes up the
web request. The observation is that forward taint propagation
from line 6 tracks objects that originate from a web API in
a response and backward tainting tracks objects that are used
to generate a request to a web API. We refer to such HTTP
access functions as Points of Interest because they separate
the forward and backward program slices. Forward taint
propagation reveals the data dependency for objects related to
response message processing, and backward tainting identiﬁes
objects that make up the URI, request method, and body of a
web API request. As a result, the problem is now reduced to
searching and identifying POIs from Android and Java APIs,
which is much more feasible than performing a full analysis
of the entire app call graph and tracking all network-related
objects.
Thereafter, the path constraints within the slices are an-
alyzed to extract the web API request templates for which
test HTTP requests can be generated and further evaluated. In
particular, WARDroid identiﬁes the constraints associated with
the web API request path Parameters, Headers, and Body, and
can generate test inputs for both valid and invalid API requests.
IV. APPROACH AND CHALLENGES
First, we extract the web API communication templates
from mobile apps that encode the input constraints enforced
by the app for web API communication. We implemented
a network-aware taint analysis approach to extract program
slices that represent the web API request generation func-
tionality of the app. We employed existing program analysis
tools and techniques to ﬁt our problem and address known
inherent challenges. Second, using the extracted constraint
templates, we implement a blackbox testing component that
759
HTTP Templates
Static Analysis
Program 
Slicing
APK
Path
Constraints
Constants
Header
Body Header
Body Header
Body
Inconsistency Evaluation
UI Analysis
Reports
Request
Generation
Response
Testing
Reports
Reports
Fig. 1. Overview Architecture of the WARDroid Framework
assesses the consistency between the app validation logic and
the web API server validation logic. Using the constraint
relationship rules between the app and the web API server,
we can generate requests that we expect to be rejected by the
server. The intuition is that the app validation logic should
be consistent with the web API server validation logic. Any
inconsistencies uncovered are opportunities that attackers may
be able exploit and can lead to a violation of the application
security properties. WARDroid generates both valid an invalid
requests that can be replayed to the server to evaluate our
hypothesis using a simple cross-validation approach to reduce
false positives.
A. General Challenges
The challenges of the whitebox analysis approach lie in the
non-trivial nature of static analysis and its inherent limitations.
Fortunately, these have been solved by existing work [12],
[10], [13], [14], [15]. We utilize these existing work in
WARDroid. Still, we address additional challenges in analyzing
app-to-web communication.
Modeling Server Logic. Without access to the back-end
server code, we must devise a methodology that effectively
utilizes the mobile application and the observed HTTP com-
munication logic to the backend API service to model the
expected server logic and constraints. This is exactly what
an adversary would also have access to, which lends some
practicality and feasibility to our analysis approach.
Incomplete Access. While the mobile application binaries
are readily available through the open marketplace model
of Android, we do not have access to the server side API
implementation for a precise comparison. Therefore, we must
rely solely on the mobile app and formulate an estimated
model of the server logic. Our system must therefore ensure
high code coverage and accurately infer the web API request
message constraint formula. To overcome this challenge, we
employ robust static analysis tools that ensure high coverage
and accuracy.
Low Coverage. To increase accuracy and coverage, and
further optimize our analysis, we implement symbolic ex-
ecution to model the input validation logic through path
constraints [16]. This allows us to efﬁciently reason about the
constraints of web API requests.
Symbolic execution utilizes the control ﬂow graph, storing
an accumulating path condition as the data dependence moves
along the execution path. The path condition at the point
of interest represents the constraint formula that we later
utilize to reason about valid and invalid inputs to compare
validation consistency. For our purposes, the point of interests
are the HTTP(s) buffers in the mobile application used to
communicate with remote web APIs.
However, symbolic execution can be slow, and analyzing an
entire app can lead to unnecessary code paths being explored.
Since not all the app execution paths are related to web API
requests, we must ﬁlter only the paths that are of interest to
reduce the analysis space, while still maintaining precision and
accuracy.
Search Space. To reduce the search space and optimize the
analysis, we ﬁlter the paths to analyze only those that utilize
an HTTP library or system API. We focus on identiﬁed points
of interest (POIs) that generate or process web API HTTP(S)
messages. Fortunately, there is a small set of HTTP(S) libraries
and HTTP network buffer APIs that we can use as our starting
point for extracting HTTP communication templates.
Validating
Inconsistencies.
An
important
goal
of
WARDroid is to validate inconsistencies in a semi-automated
fashion. This requires generation and replay of web API
requests and analysis of the corresponding responses. Some
human
intervention
is
necessary
in
formulating
proper
requests. It is also non-trivial to analyze server responses
based on simple heuristics to make a determination of success
or failure of the request. A simple approach could be to
evaluate HTTP status codes, but that would lead to many
false negatives. WARDroid overcomes this challenge by
implementing a response analysis approach that compares
several response traces of known valid requests with suspected
invalid requests. This approach is inspired by a similar method
used in [3].
V. SYSTEM ARCHITECTURE
The general system architecture is depicted in Figure 1. The
primary goal of WARDroid is a novel application of static taint
analysis and symbolic execution to uncover web API input
validation constraints and reason about web API hijacking
opportunities by evaluating inconsistencies. To achieve this
goal, we extend Flowdroid [15] to comprehensively analyze
760
web-related code paths and constraints in apps that lead to
network APIs that generate HTTP(S) messages. We therefore
model the web API’s server-side validation logic using the
mobile application validation logic. We can then detect in-
consistencies by deriving invalid API requests that fail in our
mobile application model but does not fail when testing on
the actual server. We characterize the application validation
logic as a symbolic path constraint on a static abstraction
of the web request functionality which is a subset of the
program dependence graph (PDG) of the app. We represent
the constraints in the format of Z3 [13] and utilize the Z3-Str
library [17] to generate both valid and invalid concrete API
requests for testing through message replay.
WARDroid takes the application APK package as input and
produces possible web API hijacking opportunities as output.
First, we model the mobile app’s web API communication
into HTTP message templates. To accomplish this, we utilize
program analysis techniques that analyze the app to extract
the program slices that generate HTTP requests from each
POI. The main task is to track all dependencies that eventually
ﬂow to network buffers through particular Android framework
APIs. This allows us to extract the relevant path constraints
and reason about the web API requests generated by the app.
To this end, our system extracts and analyzes the program
slices that generate and process HTTP messages using data
dependency analysis. We augment the resulting program de-
pendence graph slices with information from the user interface
(UI) resources in the app that deﬁne additional constraints
imposed by UI elements on user input data that eventually
make up part of the web API request.
Interesting code paths are those that include a conditional
ﬂow that determines the ﬁnal API request endpoint. These
conditions encode constraints that are our main targets for
evaluation of inconsistencies. We theorize that this constraint
logic is representative of the web API logic intended on
the server, but not always implemented with due diligence.
First we must understand the normal intended ﬂow, and the
semantics of the checks that control the ﬂow to different
web API end points. Armed with this information, we can
then reason about request messages that would violate the
extracted constraints and test if they are accepted by the
server. In some cases when the server is not available for
testing, or would cause harm, we can still infer success by
evaluating the response processing constraint logic of the app
that corresponds to the code path under consideration. This
correlates to the constraints extracted from the forward static
analysis starting at each POI.
A. Static Analysis
WARDroid implements program slicing to reduce the search
scope and focus on web API related code paths. The ﬁrst step
is to extract a program slice using backward slicing starting
at the web API call points, which are our POIs (Points of
Interest). The key idea is to generate a concise representation
of the subset of the program that communicates over the
network. The slice is an approximation of the code necessary
to enable the app-to-web API communication.
1) Program Slicing: Extracting program slices of inter-
est requires identiﬁcation and tracking of dependencies to
network-bound APIs [18]. We focus on two sets of net-
work message sending APIs as our starting points of inter-
est (POIs). First, we identify the Android framework APIs
provided for HTTP communication (e.g., HttpClient.execute).
We utilize the semantic models of these APIs devised
from [18]. We currently support java.net.HttpURLConnection,
org.apache.http, android.net.http, android.volley, javax.net.ssl,
and java.net.URL. Second, we also identify low level Socket
APIs. When these APIs get called, they will directly perform
connections to remote servers, which will then generate the
response from the servers. With these method invocations as
target points of interest, we can use taint analysis to identify
the dependencies and call paths that invokes them.
For tracking web API-related data ﬂows, we modify Flow-
Droid [15], which is a system built on Soot [11] and pro-
vides ﬂow-sensitive, context-sensitive, and inter-procedural
data ﬂow analysis for Android apps. We also utilize the
output from SuSi [14], which provides a comprehensive list
of categorized sensitive APIs. We use the NETWORK and
BROWSERONFORMATION entries as the input to Flow-
Droid. This allows us to identify all the API calls that
can communicate using the network sensor or the browser.
However, different from the traditional use of Flowdroid to
track source to sink tainted paths, we utilize its taint analysis
functionality to track taints in reverse from the sinks (POIs)
until they converge to a UI element, an event handler, or
initial deﬁnition. This gives us the ability to extract a web
API-related program slice that represents the app’s web API
communication functionality.
Modifying tainting rules. For high accuracy and coverage,
the program slices must contain all operations related to the
web API communication from the POI. WARDroid utilizes
an open-ended taint propagation approach for this purpose.
Flowdroid’s default tainting rules implicitly handle forward