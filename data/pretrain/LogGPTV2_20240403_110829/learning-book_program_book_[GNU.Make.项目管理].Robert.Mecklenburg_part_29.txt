define java-process-aepend
$（SED)-e‘s/~.*\.class*:/$2$（subst.class,.d,$2):/
$（subst.java,.u,$1)>$（subst.class,.tmp.$2)
S（SED)-e's/#.*//
-e's/[:]*:*//
//ssss\/s.a-
P/s$ss/.a-
-e's/ssss/:/'$（subst .class,.tmp,$2)
>$（subst.class,.tmp,S2)
s（MV） s(subst.class,.tmp.$2）.tmp $（subst.class,.d,$2)
endef
这需要你从二进制文件树来运行此makefile，并且将vpath设定成可以找到源文件。如
果你只想将Jikes编译器用在依存关系的产生上，且使用不同的编译器来产生实际的二
进制码，你可以使用+B选项来避免Jikes产生bytecode。
---
## Page 193
Java
183
如果我们以先前所提到的快速编译方式，对223个java文件调用一次Java编译器，在
我的机器上需要9.9秒的时间。相同的这223个文件，如果为每个文件调用一次Java编
译器，则需要411.6秒的时间，是前者的41.5倍。此外，在源文件与二进制文件分开的
状态下进行编译，任何的编译动作都需要多编译4个文件，所以会比对所有源文件调用
一次Java编译器还慢。如果依存关系的产生和编译是由不同的程序进行的，则会增加不
一致性。
当然，开发环境各有不同，重点在于你想达成什么样的目标。将所编译的文件数量最小
化，并不一定能够将编译一个系统所花的时间最小化。对Java而言尤其是这样，一般的
程序开发环境并不需要进行完整的依存关系检查以及将所编译的文件数量最小化。
设定CLASSPATH
引用的解析时，将会根据此变量来决定应该加载哪个程序代码。要正确编译Java应用程
序，makefile中必须包含正确的CLASSPATH。当有许多Java包、API和支持工具被加人
系统时，CLASSPATH马上就会变得既长且复杂。如果CLASSPATH很难正确设定，最
好只在一处设定它。
我发现如下的技术非常适合在makefile中用来为它自己和其他程序设定CLASSPATH。例
如，工作目标claSSpath将会把CLASSPATH返回给调用如下makefile的shell：
PHONY:classpath
classpath:
@echo*export CLASSPATH='$(CLASSPATH)"
开发人员可以用如下的方式来设定他们的CLASSPATH（如果他们使用的是bash）：
$eval S（make classpath）
CLASSPATH在Windows环境中可以用如下的方式来设定：
.PHONY:windows_classpath
windows_classpath:
contro1sysdm.cpl,@1,4&
@echo “Now click Environment Variables,then OK,then OK again.
regtool程序是Cygwin开发系统中的一个实用程序，可用来操作WindowsRegistry。
然而，只是设定Registry并不会使得Windows读取新的设定值。解决此事的一个方法就
是查看“EnvironmentVariable”（环境变量）对话框，然后按“OK”（确定）按钮两次。
---
## Page 194
184
第九章
选定“Advanced”（高级）页面。可惜，这个命令无法显示“EnvironmentVariable”（环
境变量）对话框并为我们按下“OK”（确定）按钮两次，所以需要最后一行来提醒用户
完成此工作。
将cLASSPATH导出到其他程序，比如EmacsJDEE或Jbuilder的项目文件（projectfile）
中，并不困难。
CLASSPATH本身的设定也可以通过make来管理。以如下明确的方式来设定CLASSPATH
变量是绝对没问题的：
CLASSPATH=/third_party/toplink-2.5/TopLink.jar:/third_party/...
为了方便维护，使用变量会更好：
CLASSPATH = $(TOPLINK_25_JAR) :$ (TOPLINKX_25_JAR):..
但是我们还可以做得更好。正如你在通用的makefile中所看到的，CLASSPATH的建立可
以分成两个阶段：首先将路径中各个元素列成make变量，然后将这些变量转换成环境
变量的字符串值：
#设定Javaclasspath
class_path := OUTPUT_DIR
XERCES_JAR
COMMONS_LOGGING_JAR
LOG4J_JAR
JUNIT_JAR
设定CLASSPATH
export CLASSPATH := $(cal1 build-classpath,$(class_path))
（例9-1里的CLASSPATH的示范性质高于实用性。）一个好的bui1d-classpath函数应
该可以解决以下几个问题：
可以轻易地将各个片段组合成一个CLASSPATH。举例来说，如果使用不同的应用服
务器，CLASSPATH可能会有所不同。那么你就可以把不同版本的CLASSPATH放在
各个ifdef区段中，并通过make变量的设定加以选择。
makefile的临时维护人员不必担心内置的空格、换行符号或续行符号，因为build-
classpath函数可以处理这些问题。
build-classpath函数可以自动选择路径分隔符（pathseparator），因此不管你
是在Unix或Windows上运行，它都是正确的。
---
## Page 195
Java
185
build-classpath函数可以确认路径中各元素的正确性。特别是，make有一个麻
烦的问题，就是未定义的变量会被扩展成空字符串而且不会产生错误。在大多数的
情况下这个特性非常有用，不过有时候这会妨碍到你。在此情况下，它会闷不声
地为CLASSPATH变量产生错误的设定值（注1）。我们可以通过build-classpath
函数来检查具空值的元素并提出警告来解决这个问题。
最后，一个用来处理CLASSPATH的挂钩将有助于实现高级的功能，像协助调整路
径名称中内置的空格以及搜索路径。
如下的build-classpath实现可以解决前三个问题：
#$(call build-classpath,variable-list)
define build-classpath
s(strip
$(patsubsts:,,
$（subst:，
$(strip
$（foreach c,$1,$（cal1 get-file,$c):)))))
endef
#$（call get-file,variable-name）
define get-file
s(strip
$（$1）
S（if S(call file-exists-eval,s1),,
S(warning The file referenced by variable
‘$1·（S（$i）)cannot be found)）)
endef
#S（call file-exists-eval,variable-name)
define file-exists-eval
$(strip
S（if S($1),,S(warning '$1·has no value))
$（wildcard $(S1)))
endef
build-classpath函数将会反复处理它的参数中所包含的每个单词，确认每个元素并
且为他们衔接上路径分隔符（此例为：）。要自动选择路径分隔符现在很容易。然后，此
函数会删除由get-file函数与foreach循环所加上的空格。接着，它会删除由
foreach循环所加上的最后一个分隔符。最后，就是将整个东西封装在strip中，这
将会移除续行符所带进来的多余空格。
get-file函数将会返回它的文件名参数，然后测试变量所引用的文件是否存在。如果
文件不存在，它会产生一个警告信息。然而，不管文件是否存在，它都会返回变量的值，
注1：我们将会使用--warn-undefined-variables选项来检查此情况，不过这网时会影响
到其他需要使用此特性的地方。
---
## Page 196
186
第九章
因为这个值对调用者可能有用。有时，get-file可能会被用来测试即将产生但尚不存
在的文件。
最后一个函数file-exists-eval的参数是一个变量名称（内含文件引l用）。如果这个
变量的值是空的，则会产生警告信息：否则，wildcard函数会将此值解析成-个文件
（或一份文件列表）。
当build-classpath函数处理到某些有问题的值时，我们将会看到如下的错误信息：
Makefile:37:The file referenced by variable'TOPLINKX_25_JAR'
(/usr/java/toplink-2.5/TopLinkx.jar)cannot be found
Makefile:37:'XERCES_142_JAR'has no value
Makefile:37:The file referenced by variable
'XERCES_142_JAR'()cannot be found
相较于闷不声的简单做法，这是一个很大的改进。
使用get-file函数来检查文件是否存在，倒不如将输人文件的搜索一般化。
#$(call get-jar,variable-name)
define get-jar
s(strip
$（if $（$1).,$（warning·S1·is empty))
1
S（if S(JAR_PATH).,S(warning JAR_PATH is empty))
$（foreach d,S（dir $（S1)） $(JAR_PATH),
1
S（if $（wildcard $d/s（notdir $(si))),
S（if $(get-jar-return)..
$（eval get-jar-return:=$d/$（notdir S（$1))))))
$（if $（get-jar-return),
$(get-jar-return)
$（eval get-jar-return :=),
/
$($1)
$（warning get-jar:File not found·$1'in $(JAR_PATH))）)
endef
此处，我们将JAR_PATH变量定义成内含文件的搜索路径，第一个被找到的文件将会被
返回。此函数的参数是一个变量名称（内含一个jar文件的路径）。我们想要先在变量所
指定的路径中查找jar文件，然后在JAR_PATH中查找。为完成此事，foreach循环中
的目录列表将会由来自变量的目录组成，后面跟着JAR_PATH。另外，此参数将会在两
次notdir调用中使用到，所以jar的名称可以由此列表中的路径组成。请注意，不能
马上结束每个foreach循环，应该使用eval来设定get-jar-return变量，以便记住
我们所找到的第一个文件。处理完循环之后，我们不是返回这个临时变量的值，就是显
示警告信息（如果没有找到任何文件的话）。我们必须记得在终止此宏之前重新设定我
们的返回值。
---
## Page 197
Java
187
这本质上是在设定CLASSPATH的语境中重新实现vPath的功能。让我们复习一下：
vpath是make内部所使用的搜索路径，用来查找以相对路径在当前目录中找不到的必
要条件。在此情况下，make会到vpath查找必要条件文件，以及将完整的路径插人s、
S？和S+等自动变量中。为了设定CLASSPATH，我们会让make为每个jar文件搜索路
径并将完整的路径插入CLASSPATH变量。因为make对此没有内置的支持，所以我们必
须自己提供。当然，你可以使用适当的jar文件名来扩展jar路径变量，让Java进行搜索
的动作，但是CLASSPATH马上就会变得很长。在某些操作系统上，环境变量的空间有
限，CLASSPATH的内容太长将有可能被截断。在WindowsXP上，一个环境变量的长度
限制为1023个字符。此外，即使CLASSPATH的内容没有被截断，JaVa虚拟机必须在加
载类的时候搜索CLASSPATH，因此也会拖慢应用程序的运行速度。
管理jar
在Java中建立和管理jar所引i发的问题跟C/C++的程序库的不一样。理由有三个：首先，
jar中的成员包含了相对路径，所以必须小心处理传递给jar程序的文件名；其次，在Java
中有一个趋势，就是将各个jar合并成一个jar以利于发行：最后，jar中不止类文件，它
还包含了manifest、property和XML等文件。
在GNUmake中用来创建jar的基本命令为：
JAR
=jar
JARFLAGS：=-Cf
$(FOo_JAR):prerequisites..
$(JAR)$(JARFLAGS)S@$^
jar程序所接受的是目录而不是文件名，在此情况下，jar中将会包含目录树里的所有文
件。这将会非常方便，特别是当你想要使用-C选项来变更目录的时候：
JAR:=jar
JARFLAGS:=Cf
PHONY:$（FOO_JAR)
S(FOO_JAR):
$(JAR)$(JARFLAGS)$@-C $(OUTPUT_DIR)COm
此处我们把jar本身声明为.PHONY，否则，下次运行makefile的时候将不会重编译该文
件，因为它没有必要条件。如同前面章节所介绍的ar命令，这似乎有点像在使用更新
标记-u，因为它需要花相同的时间或是较长的时间（如果是从头开始重新建立jar的话），
至少对大部分的更新动作而言是这样。
---
## Page 198
188
第九章
一个jar通常会包含一个manifesr文件，内含厂商、API和jar版本编号等信息。一个简
单的manifest文件可能会像这样：
Name:JAR_NAME
Specification-Title:SPEC_NAME
Implementation-Version: IMPL_VERSION
Specification-Vendor:Generic Innovative Company,Inc.
这个manifest文件具有三个占位符：JAR_NAME、SPEC_NAME和IMPL_VERSION，这让
make可以在建立jar的时候，使用sed、m4或任何其他流编辑器，将它们替换成实际
的值。你可以使用如下的函数来处理manifest文件：
MANIFEST_TEMPLATE := src/manifests/default.mf
IMP_JAR_DIR
:=S（call make-temp-dir)
TMP_MANIFEST
:=S(TMP_JAR_DIR)/manifest.mf
#$(call add-manifest,jar,jar-name,manifest-file-opt)
define add-manifest
S（RM)$（dirS（TMP_MANIFEST))
S（MKDIR)$（dir S（TMP_MANIFEST）)
m4--define=NAME=*S（notdir $2）*
--define=IMPL_VERSION=S(VERSION_NUMBER)
--define=SPEC_VERSION=S(VERSION_NUMBER)
$（if $3,$3,S(MANIFEST_TEMPLATE))
>S(TMP_MANIFEST)
S（RM）S(dir $（TMP_MANIFEST）)
endef
add-manifest函数所操作的manifest文件如同之前你所看到的：此函数首先会创建一
个临时目录，接着会扩展manifest实例，然后它会更新jar，而且最后会删除临时目录。
请注意，此函数的最后一个参数是一个选项。如果manifest文件路径是个空值，则此函
数将会使用MANIFEST_TEMPLATE的值。
这个通用的makefile将以上这些操作纳人到了一个通用的函数中，利用此函数来为jar的
建立编写具体规则：
#$(call make-jar,jar-variable-prefix)
define make-jar
.PHONY:$1 $S(S1_name)
$1:$($1_name)
sS($1_name):