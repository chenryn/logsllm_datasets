title:Stack Overflow Considered Harmful? The Impact of Copy&amp;Paste
on Android Application Security
author:Felix Fischer and
Konstantin B&quot;ottinger and
Huang Xiao and
Christian Stransky and
Yasemin Acar and
Michael Backes and
Sascha Fahl
2017 IEEE Symposium on Security and Privacy
Stack Overﬂow Considered Harmful?
The Impact of Copy&Paste on Android Application Security
Felix Fischer, Konstantin B¨ottinger, Huang Xiao, Christian Stransky∗, Yasemin Acar∗, Michael Backes∗, Sascha Fahl∗
Fraunhofer Institute for Applied and Integrated Security; ∗CISPA, Saarland University
Abstract—Online programming discussion platforms such as
Stack Overﬂow serve as a rich source of information for software
developers. Available information include vibrant discussions
and oftentimes ready-to-use code snippets. Previous research
identiﬁed Stack Overﬂow as one of the most important in-
formation sources developers rely on. Anecdotes report that
software developers copy and paste code snippets from those
information sources for convenience reasons. Such behavior
results in a constant ﬂow of community-provided code snippets
into production software. To date, the impact of this behaviour
on code security is unknown.
We answer this highly important question by quantifying
the proliferation of security-related code snippets from Stack
Overﬂow in Android applications available on Google Play.
Access to the rich source of information available on Stack
Overﬂow including ready-to-use code snippets provides huge
beneﬁts for software developers. However, when it comes to
code security there are some caveats to bear in mind: Due
to the complex nature of code security, it is very difﬁcult to
provide ready-to-use and secure solutions for every problem.
Hence, integrating a security-related code snippet from Stack
Overﬂow into production software requires caution and expertise.
Unsurprisingly, we observed insecure code snippets being copied
into Android applications millions of users install from Google
Play every day.
To quantitatively evaluate the extent of this observation, we
scanned Stack Overﬂow for code snippets and evaluated their
security score using a stochastic gradient descent classiﬁer. In
order to identify code reuse in Android applications, we applied
state-of-the-art static analysis. Our results are alarming: 15.4%
of the 1.3 million Android applications we analyzed, contained
security-related code snippets from Stack Overﬂow. Out of these
97.9% contain at least one insecure code snippet.
misusing Android’s cryptographic API [3], a developer who is
seeking help can ﬁnd solutions for almost any problem. While
such solutions oftentimes provide functional code snippets,
many of them threaten code security. Those insecure code
snippets commonly have a rather solid life-cycle: provided by
the community, copied and pasted by the developer, shipped
to the customer, and exploited by the attacker. To date it is
unknown to what extent software developers copy and paste
code snippets from information sources into production soft-
ware. Is this phenomenon limited to just occasional instances,
or is it rather a general and dangerous trend threatening code
security to a large extent?
We answer this highly important question by measuring
the frequency 1,161 insecure code snippets posted on Stack
Overﬂow were copied and pasted into 1,305,820 Android
applications available on Google Play. We demonstrate that
the proliferation of insecure code snippets within the Android
ecosystem, and thus the impact of insecure code snippets
posted on Stack Overﬂow, poses a major and dangerous
problem for Android application security.
Our Contributions
We investigate the extent security-related code snippets
posted on Stack Overﬂow were copied into Android appli-
cations available on Google Play. Our contributions can be
summarized as follows:
I. INTRODUCTION
Discussion platforms for software developers have grown in
popularity. Especially inexperienced programmers treasure the
direct help from the community providing easy guide and most
often even ready-to-use code snippets. It is widely believed
that copying such code snippets into production software is
generally practiced not only by the novice but by large parts
of the developer community. Access to the rich source of
information given by public discussion platforms provides
quick solutions. This allows fast prototyping and an efﬁcient
workﬂow. Further, the public discussions by sometimes ex-
perienced developers potentially promote distribution of best-
practices and may improve code quality on a large basis.
However, when it comes to code security, we often observe
the opposite. Android-related discussions on Stack Overﬂow
for example include an impressive conglomeration of oddities:
from requesting too many and unneeded permissions [1]
to implementing insecure X.509 certiﬁcate validation [2] to
© 2017, Felix Fischer. Under license to IEEE.
DOI 10.1109/SP.2017.31
121
• We identiﬁed all Android posts on Stack Overﬂow,
extracted all (4,019) security-related code snippets and
analyzed their security using a robust machine learning
approach. As a result we provide a security analysis for
all security-related Android code snippets available on
Stack Overﬂow.
• We applied state-of-the-art static code analysis techniques
to detect extracted code snippets from Stack Overﬂow in
1.3 million Android applications.
• We found that 15.4% of all 1.3 million Android ap-
plications contained security-related code snippets from
Stack Overﬂow. Out of these 97.9% contain at least one
insecure code snippet.
• We designed and implemented a fully automated large-
scale processing pipeline for measuring the ﬂow of
security-related code snippets from Stack Overﬂow into
Android applications.
• We make all data available on https://www.aisec.
fraunhofer.de/stackoverﬂow.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
Stack Overﬂow
1
1
2
3
4
5
Google Play Store
5
Fig. 1: Overall processing pipeline of code extraction (1), ﬁltering (2), classiﬁcation (3), program dependency graph generation
(4), and clone detection (5).
Our processing pipeline is fully automated and designed to
scale to extensive measurements of platforms other than Stack
Overﬂow and software repositories other than Google Play.
II. PROCESSING PIPELINE ARCHITECTURE
In this section, we discuss the architecture of our processing
pipeline. The individual steps of the processing pipeline are
described in detail in subsequent sections.
As depicted in Figure 1 the code originates in the Stack
Overﬂow database (on the left) and ﬂows into Google Play
(on the right). To measure this ﬂow we ﬁrst crawl Stack
Overﬂow and extract every single code snippet in the database
(1). From this comprehensive snippet collection we ﬁlter those
that are security-related (2). We discuss steps (1) and (2) in
detail in Section III on code extraction and ﬁltering. This
provides us with a set of security-related snippets. In order
to label each of them secure or insecure we deﬁne labeling
rules as described in Section IV and apply machine learning
classiﬁcation (3) using support vector machines (cf. Section
V). Next, we generate an abstract representation of each
labeled code snippet (4) that allows us to detect their clones in
Google Play (5) (cf. Section VI). Each step is fully automated
and designed for large scale analysis. Only the training step for
supervised machine learning classiﬁcation (3) requires manual
labeling of training data. However, this must be done only once
for a small fraction of snippets, classiﬁcation of very large
sets of code snippets afterwards runs fully automated and is
therefore just a matter of processing power and time. As we
will show in the evaluation in Section VII-C our proposed
approach is time-efﬁcient and yields decent results.
III. CODE EXTRACTION AND FILTERING
First, we crawl discussion threads from a developer discus-
sion platform for actual code snippets. Second, we extract all
security-related snippets. We begin this section by deﬁning the
criteria for security-related code snippets and continue with
describing our implementation for Stack Overﬂow.
A. Security-related Code Snippets
On Android, security operations include but are not limited
to cryptographic operations, secure network communication
and transmission, validation via PKI-based mechanisms, as
well as authentication and access control. These operations
are supported by different APIs. We deﬁne code elements of
these APIs as an indicator for security-related code: A code
snippet is considered security-related iff it makes calls to one
of the following APIs: [4]
• Cryptography: Java Cryptography Architecture (JCA),
Java Cryptography Extension (JCE)
• Secure network communications: Java Secure Socket
Extension (JSSE), Java Generic Security Service (JGSS),
Simple Authentication and Security Layer (SASL)
• Public key infrastructure: X.509 and Certiﬁcate Revoca-
tion Lists (CRL) in java.security.cert, Java certiﬁcation
path API, PKCS#11, OCSP
• Authentication and access control: Java Authentication
and Authorization Service (JAAS)
Additionally, we included code snippets with reference to
the following security libraries, which were specially designed
for Android: BouncyCastle (BC) is the default, pre-installed
cryptographic service provider on Android and is widely
used [3]. SpongyCastle1 (SC) gives a repackaged version of
BC which provides additional functionality. We looked for
code snippets containing both BC and SC API calls.
Furthermore, we extracted code snippets for the Apache
TLS/SSL package as part of the HttpClient library which
is one of the most used libraries on GitHub [5].
We also included code snippets that reference security
libraries speciﬁcally designed with usability in mind [6], e.g.
keyczar [7] and jasypt [8], which were designed to simplify
the safe use of cryptography for developers.
To contrast Android’s default providers and the usable
security libraries with a more inconvenient alternative, we
included GNU Crypto. Although this library also implements
a JCA provider, it is challenging to integrate into Android [9],
which makes it interesting to see whether it is being discussed
on Stack Overﬂow and used by developers.
Table I lists the considered security libraries and gives an
overview of their supported features.
1cf. https://rtyley.github.io/spongycastle/
122
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
n
o
i
t
a
r
e
n
e
G
r
e
b
m
u
N
m
o
d
n
a
R
e
r
u
c
e
S
y
h
p
a
r
g
o
t
p
y
r
C
c
i
r
t
e
m
m
y
S
y
h
p
a
r
g
o
t
p
y
r
C
c
i
r
t
e
m
m
y
s
A
S
L
T
s
t
s
e
g
i
D
e
g
a
s
s
e
M
s
e
r
u
t
a
n
g
i
S
l
a
t
i
g
i
D
n
o
i
t
a
c
i
t
n
e
h
t
u
A
n
g
i
s
e
D
y
b
y
t
i
l
i
b
a
s
U
Standard API
BouncyCastle
SpongyCastle
Apache TLS/SSL
keyczar
jasypt
GNU Crypto
= fully applies;
= does not apply at all