attempt to detect input fields that are otherwise hidden or disguised
(e.g., placed out of the screen, covered by an overlay, having size
equal to zero etc.). Such fields are populated along with all the
non-disguised ones when the autofill functionality is triggered, as
we will discuss in more detail in Section 3.
On the other hand, Firefox has a different approach and fills out
all1 input fields, even those that have the visibility attribute set to
hidden. If the same element appears more than once in the page,
irrespectively if it’s visible or hidden, Firefox fills only the first one
that it finds as it parses the page. The strategy that Firefox follows
for protecting users is to show them a message when they start
entering a value in a form, informing them about the generic types
of the information that will be filled out. However, this approach
shifts the burden entirely onto the user, who must somehow infer
the true extent to which a website is collecting their information and
avoid triggering the autofill process when necessary. We discuss
the pitfalls of this design choice and how it does not adequately
protect users from deceptive practices in Section 5.
Autofill preview. This functionality, which is enabled when a
user hovers the mouse over the autofill overlay window to select
one of the profiles, provides a preview of what autofill will do,
allowing users to make a more informed decision. Specifically, it
displays the values of that profile within the form’s input fields,
as shown in Figure 1. Importantly, the preview functionality does
not trigger the autofill mechanism and the form’s input fields are
not really populated with the profile’s values. Due to the obvious
1Currently Firefox only autofills address information for users in the US [4].
Table 1: Browsers that autofill form fields that are hidden
from the user, based on various concealment techniques.
Techniques
CSS Display
CSS Visibility
CSS Opacity
Covered by overlay
Non-effective size
Off-screen placement
Ancestor’s overflow
Firefox Chrome Brave Edge
Safari Opera
✓
✓
✓
✓
✓
✓
✓
✗
✗
✓
✓
✓
✓
✓
✗
✗
✓
✓
✓
✓
✓
✗
✗
✓
✓
✓
✓
✓
✗
✗
✓
✓
✓
✓
✓
✗
✗
✓
✓
✓
✓
✓
Furthermore, we do not focus on how that exfiltrated information
is actually used by the website or how the collected/inferred values
are sent to their backend server or third parties. Finally, while such
controversial practices may also be used for legitimate purposes
(e.g., detecting bots in registration forms), or may be the result of
developer implementation bugs, we still consider them indicative
of suspicious (if not outright malicious) activities, as sensitive user
information is acquired without the user’s knowledge or consent.
3 STEALTHY DATA EXFILTRATION
Attackers can use hidden form elements to stealthily exfiltrate sen-
sitive user information when the autofill functionality is triggered.
While it is fairly easy for attackers to deploy such an attack, it is
also inherently challenging for browsers to detect hidden input
fields as there are various techniques for concealing their presence.
Some of those techniques are straightforward as they change the
style attributes of the elements, while others are more elaborate
and non-trivial to detect. Furthermore, autofill functionality can be
triggered by visible input elements of any type. To avoid raising sus-
picion, attackers can use visible input elements that require data of
a non-sensitive, non-PII type and hide the input fields that require
sensitive data. For instance, a form could have a visible element for
a user’s country, which is not invasive from the user’s perspective,
while using hidden input fields to obtain the user’s home address.
Next we describe various properties and techniques that can be
used for hiding HTML elements. Table 1 presents a summary of
these techniques and their respective support across major browsers.
Specifically, we test whether a browser will autofill a form element
whose presence has been concealed using each technique respec-
tively. While one of these techniques has been mentioned in public
before, we identify several previously-unknown methods that are
effective against all the major browsers we test.
CSS display property. The simplest approach for hiding an
element is to set its CSS display property to none. This property
completely removes the element and the space it occupies, as if it
never existed in the page. Also, this property can be inherited from
a parent element. In our experiments Firefox is the only browser
that fills elements that have been hidden using this technique.
CSS visibility property. The visibility property specifies
whether an element should be visible or not. When this property is
set to hidden the element becomes invisible, but its original space
and position in the page layout are reserved. It can be also set to
collapse, which is treated in the same way as hidden for 
and  elements. Similarly to the display property, the
visibility property can be inherited from a parent element.
CSS opacity property. The opacity property specifies the trans-
parency level of the element. When the opacity value is set to 0, the
element becomes fully transparent and, thus, invisible to the user.
However, this concealment technique does not work for 
tag elements (i.e., drop-down menus), which are visible to the user
even when they are transparent. This property is not inherited, but
an element cannot be less transparent than its parent. As shown in
Table 1 this, and all subsequent methods, work in all the browsers.
Covered by overlay. This trick overlays a non-transparent ele-
ment on top of the element of reference to completely cover it.
Non-effective size. The element is invisible due to its non-effective
size (i.e., width or height equal to zero).
Off-screen placement. We can hide an element that has a fixed
or absolute position in the page by moving it out of the device’s
screen area, using the top, bottom, left, and right properties. This
technique has been previously demonstrated by a researcher [5].
Ancestor’s overflow. This approach places the element out of
the bounds of its ancestor’s overflow to make it invisible to the user.
This can be implemented in various ways; for example the attacker
can set the parent element’s height or width equal to zero. Another
way, when the ancestor element has an effective size, is to position
the element in reference out of the actual ancestor’s bounds and set
the ancestor’s overflow property to hidden, to disable scrolling
functionality for the ancestor element.
Summary. In general, the detection of concealed autofillable
input fields is not a trivial challenge for browsers, due to the va-
riety and heterogeneity of methods and properties available for
interacting with elements. The list of deceptive techniques that we
present above is most likely not exhaustive, and other techniques
for hiding the presence of input fields may be feasible.
4 DATA INFERENCE ATTACKS
We present a number of design flaws and idiosyncrasies in the aut-
ofill functionality of Chromium-based browsers, and detail a series
of attacks that exploit these flaws to bypass existing safeguards.
We then demonstrate how these individual attacks can be used as
building blocks and chained together to construct a more powerful
attack that can be used to infer highly sensitive information (e.g.,
credit card number) from a user’s autocomplete profile. More im-
portantly, this attack completely removes the requirement for users
to trigger the autofill functionality, rendering it a severe threat even
for more privacy-cautious users that may avoid using autofill.
4.1 Field-Type Mismatch Attack
The majority of user information stored by browsers in autofill
profiles is typically populated in  tag elements. Notable
exceptions are the values for the user’s country and state, which
are often encountered in websites as  tag elements. This
is due to the limited size of their value space, compared to other
types of information that have significantly more potential values.
Despite the fact that most types of information are intended for
use with form input elements, browsers do not restrict the use of
these types of information from being used in drop-down menus.
Furthermore, apart from allowing their use as drop-down menu
types, browsers will also automatically select the option matching
the value stored in the user’s autofill profile (if there is a match),
when the autofill functionality is triggered. The only type of input
information that browsers will not automatically select from a drop-
down menu is the credit card number. In other words, credit card
numbers are not autofillable when a  tag element is used.
This lack of checks and restrictions for types other than that of a
credit card means that an attacker can use, for instance, a drop-down
menu populated with various email addresses and the browser will
select the entry that matches the user’s email if it matches one of the
options. Moreover, attackers can include up to 200 different drop-
down menus of the same type within a given page, thus, increasing
the overall number of candidate values matched against the user’s
profile. If a value that matches the user’s original value is found in
any of the drop-down menus, it will be automatically selected. If a
value is found in multiple menus, it will be selected in all of them.
Finally, Chromium-based browsers do not autofill  ele-
ments that have their visibility property set to hidden/collapse or
their display property to none. When, however, the attacker uses
drop-down menus instead of input elements, all these browsers
select the correct values in the menus when autofill is triggered.
4.2 Autofill Preview Attack
As described in Section 2, browsers provide an autocomplete pre-
view functionality, allowing users to see what values will be auto-
completed if the autofill functionality is triggered. In more detail,
whenever a user clicks on any autofillable element, an overlay win-
dow appears showing the various user autofill profiles. The preview
functionality is activated if the mouse’s cursor passes over any part
of the autocomplete overlay window associated with one of the
profiles. The preview values that are shown in the form will only be
entered into the form if the user clicks on the window choosing a
profile to be used. Next, we present a side-channel attack against the
autocomplete preview, that works in Chromium-based browsers,
and allows an attacker to infer a user’s information even though
this information is never actually written into the form.
Side-channel leakage. While the preview window and dis-
played values are part of an overlay that is not part of the page’s
DOM, nor are they accessible through JavaScript, we can detect
if a value is previewed in any of the elements by observing their
style properties. Through experimentation we identified 22 style
properties (such as background-color, border-bottom-color, border-
bottom-left-radius etc.) that change when a value is previewed in
an element. These properties are accessible by the page’s JavaScript.
In its simplest form this side-channel allows the attacker to detect
that a value from the user’s profile is previewed, but it does not
reveal the actual value. A critical idiosyncrasy, however, is that
these style property changes occur in drop-down menus only if one
of the options in the menu matches the value in the user’s profile.
Value inference. Next, we leverage this behavior to infer the
exact value in the user’s profile through the strategic placement and
replication of probing values across multiple drop-down menus in
the page. The intuition here is to replicate each candidate value
across a unique set of drop-down menus, such that each combina-
tion of menus is “activated” by exactly one candidate value. This
way, when the autocomplete preview functionality is activated, if
the browser matches the user’s actual value with a value that exists
in some specific drop-down menus, the attacker can detect those
menus’ style changes (even if they are hidden from the user) and
infer the user’s actual value. It is also important to note that in
cases where a user has multiple profiles (e.g., a personal and a work
profile) this attack can harvest the information from all profiles if
the mouse cursor passes over them in the preview window.
Probing size constraints. As this attack requires the replica-
tion of candidate values across multiple drop-down menus, we now
explore a strategy for maximizing the number of values that can
be probed. Through experimentation we found that Chromium
allows at most 200 form elements in a page. We also found that
 elements are limited to 512 entries per drop-down menu.
Considering that one element is needed for the user to activate the
autocomplete preview functionality, we are left with 199 drop-down
menus that can have up to 199 × 512 = 101,888 values in total.
(cid:16)199
For the replication of values across drop-down menus, we find
that an effective strategy that does not suffer from false positives, is
to progressively increase the number of entries per candidate value
when there are no other unique combinations left for that number.
More specifically, this strategy places
= 199 unique values
without replication (i.e., one in each drop-down menu),
=
19,701 values in two drop-down menus each (i.e., 39,402 entries
out of the total of 101,888 options), and for the remaining available
positions each value will appear in exactly 3 different menus (i.e.,
(101,888 - (2×19,701) - (1×199))/3 = 20,762 values). With this repli-
cation strategy an attacker can probe up to 40,659 unique values in
the page that can potentially match the user’s value (we present a
technique for overcoming this limit in Section 4.3).
(cid:16)199
Type constraints. The basic version of this attack works for all
types of autofillable information except for phone and credit card
numbers. For those two types, Chromium has additional safeguards
in place that we need to overcome. Specifically, for phone numbers
it only autofills the first element of that type that it finds in the page.
For credit card numbers, as discussed in Section 2, the browser only
autofills form input elements, but not drop-down menus.
(cid:17)
2
(cid:17)
1
4.3 Dynamic Element Replacement Attack
To bypass the restrictions imposed on credit card and phone num-
bers we design two techniques for extending our attack that rely
on dynamically changing the form elements in the page.
Phone numbers. When targeting phone numbers, our attack
initially places multiple identical input elements in the page, includ-
ing the one that is used to trigger the autofill functionality. All these
elements need to be the same, to trick the browser into filling them
all at once. When the user clicks on the visible input element we
dynamically replace all the remaining identical form elements with
drop-down menus, and replicate the candidate values across them
as described previously. This allows us to infer the user’s exact
phone number from the preview functionality. More importantly,
this extension to the autocomplete preview attack removes the
constraints imposed by the browser on the number of entries that
each drop-down menu can have. As a result, our attack can now
probe the user’s profile for as many phone numbers as we want.
Credit cards. We follow a similar approach for bypassing the
restrictions imposed for credit card numbers. We use form input