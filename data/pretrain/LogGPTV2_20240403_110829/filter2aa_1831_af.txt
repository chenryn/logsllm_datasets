[Function]
int rl_bind_key_if_unbound (int key, rl command func t *function)
Binds key to function if it is not already bound in the currently active keymap.
Returns non-zero in the case of an invalid key or if key is already bound.
[Function]
int rl_bind_key_if_unbound_in_map (int key, rl command func t
*function, Keymap map)
Binds key to function if it is not already bound in map. Returns non-zero in the case
of an invalid key or if key is already bound.
[Function]
int rl_unbind_key (int key)
Bind key to the null function in the currently active keymap. Returns non-zero in
case of error.
[Function]
int rl_unbind_key_in_map (int key, Keymap map)
Bind key to the null function in map. Returns non-zero in case of error.
[Function]
int rl_unbind_function_in_map (rl command func t *function,
Keymap map)
Unbind all keys that execute function in map.
[Function]
int rl_unbind_command_in_map (const char *command, Keymap map)
Unbind all keys that are bound to command in map.
[Function]
int rl_bind_keyseq (const char *keyseq, rl command func t *function)
Bind the key sequence represented by the string keyseq to the function function,
beginning in the current keymap. This makes new keymaps as necessary. The return
value is non-zero if keyseq is invalid.
Chapter 2: Programming with GNU Readline
30
[Function]
int rl_bind_keyseq_in_map (const char *keyseq, rl command func t
*function, Keymap map)
Bind the key sequence represented by the string keyseq to the function function. This
makes new keymaps as necessary. Initial bindings are performed in map. The return
value is non-zero if keyseq is invalid.
[Function]
int rl_set_key (const char *keyseq, rl command func t *function,
Keymap map)
Equivalent to rl_bind_keyseq_in_map.
[Function]
int rl_bind_keyseq_if_unbound (const char *keyseq,
rl command func t *function)
Binds keyseq to function if it is not already bound in the currently active keymap.
Returns non-zero in the case of an invalid keyseq or if keyseq is already bound.
[Function]
int rl_bind_keyseq_if_unbound_in_map (const char *keyseq,
rl command func t *function, Keymap map)
Binds keyseq to function if it is not already bound in map. Returns non-zero in the
case of an invalid keyseq or if keyseq is already bound.
[Function]
int rl_generic_bind (int type, const char *keyseq, char *data, Keymap
map)
Bind the key sequence represented by the string keyseq to the arbitrary pointer data.
type says what kind of data is pointed to by data; this can be a function (ISFUNC), a
macro (ISMACR), or a keymap (ISKMAP). This makes new keymaps as necessary. The
initial keymap in which to do bindings is map.
[Function]
int rl_parse_and_bind (char *line)
Parse line as if it had been read from the inputrc ﬁle and perform any key bindings
and variable assignments found (see Section 1.3 [Readline Init File], page 4).
[Function]
int rl_read_init_file (const char *ﬁlename)
Read keybindings and variable assignments from ﬁlename (see Section 1.3 [Readline
Init File], page 4).
2.4.4 Associating Function Names and Bindings
These functions allow you to ﬁnd out what keys invoke named functions and the functions
invoked by a particular key sequence. You may also associate a new function name with an
arbitrary function.
[Function]
rl_command_func_t * rl_named_function (const char *name)
Return the function with name name.
[Function]
rl_command_func_t * rl_function_of_keyseq (const char *keyseq,
Keymap map, int *type)
Return the function invoked by keyseq in keymap map. If map is NULL, the current
keymap is used. If type is not NULL, the type of the object is returned in the int
variable it points to (one of ISFUNC, ISKMAP, or ISMACR).
Chapter 2: Programming with GNU Readline
31
[Function]
char ** rl_invoking_keyseqs (rl command func t *function)
Return an array of strings representing the key sequences used to invoke function in
the current keymap.
[Function]
char ** rl_invoking_keyseqs_in_map (rl command func t
*function, Keymap map)
Return an array of strings representing the key sequences used to invoke function in
the keymap map.
[Function]
void rl_function_dumper (int readable)
Print the readline function names and the key sequences currently bound to them to
rl_outstream. If readable is non-zero, the list is formatted in such a way that it can
be made part of an inputrc ﬁle and re-read.
[Function]
void rl_list_funmap_names (void)
Print the names of all bindable Readline functions to rl_outstream.
[Function]
const char ** rl_funmap_names (void)
Return a NULL terminated array of known function names. The array is sorted. The
array itself is allocated, but not the strings inside. You should free the array, but not
the pointers, using free or rl_free when you are done.
[Function]
int rl_add_funmap_entry (const char *name, rl command func t
*function)
Add name to the list of bindable Readline command names, and make function the
function to be called when name is invoked.
2.4.5 Allowing Undoing
Supporting the undo command is a painless thing, and makes your functions much more
useful. It is certainly easy to try something if you know you can undo it.
If your function simply inserts text once, or deletes text once, and uses rl_insert_
text() or rl_delete_text() to do it, then undoing is already done for you automatically.
If you do multiple insertions or multiple deletions, or any combination of these operations,
you should group them together into one operation. This is done with rl_begin_undo_
group() and rl_end_undo_group().
The types of events that can be undone are:
enum undo_code { UNDO_DELETE, UNDO_INSERT, UNDO_BEGIN, UNDO_END };
Notice that UNDO_DELETE means to insert some text, and UNDO_INSERT means to delete
some text. That is, the undo code tells what to undo, not how to undo it. UNDO_BEGIN and
UNDO_END are tags added by rl_begin_undo_group() and rl_end_undo_group().
[Function]
int rl_begin_undo_group (void)
Begins saving undo information in a group construct. The undo information usually
comes from calls to rl_insert_text() and rl_delete_text(), but could be the
result of calls to rl_add_undo().
[Function]
int rl_end_undo_group (void)
Closes the current undo group started with rl_begin_undo_group (). There should
be one call to rl_end_undo_group() for each call to rl_begin_undo_group().
Chapter 2: Programming with GNU Readline
32
[Function]
void rl_add_undo (enum undo code what, int start, int end, char *text)
Remember how to undo an event (according to what). The aﬀected text runs from
start to end, and encompasses text.
[Function]
void rl_free_undo_list (void)
Free the existing undo list.
[Function]
int rl_do_undo (void)
Undo the ﬁrst thing on the undo list. Returns 0 if there was nothing to undo, non-zero
if something was undone.
Finally, if you neither insert nor delete text, but directly modify the existing text (e.g.,
change its case), call rl_modifying() once, just before you modify the text. You must
supply the indices of the text range that you are going to modify.
[Function]
int rl_modifying (int start, int end)
Tell Readline to save the text between start and end as a single undo unit. It is
assumed that you will subsequently modify that text.
2.4.6 Redisplay
[Function]
void rl_redisplay (void)
Change what’s displayed on the screen to reﬂect the current contents of rl_line_
buffer.
[Function]
int rl_forced_update_display (void)
Force the line to be updated and redisplayed, whether or not Readline thinks the
screen display is correct.
[Function]
int rl_on_new_line (void)
Tell the update functions that we have moved onto a new (empty) line, usually after
ouputting a newline.
[Function]
int rl_on_new_line_with_prompt (void)
Tell the update functions that we have moved onto a new line, with rl prompt already
displayed. This could be used by applications that want to output the prompt string
themselves, but still need Readline to know the prompt string length for redisplay. It
should be used after setting rl already prompted.
[Function]
int rl_reset_line_state (void)
Reset the display state to a clean state and redisplay the current line starting on a
new line.
[Function]
int rl_crlf (void)
Move the cursor to the start of the next screen line.
[Function]
int rl_show_char (int c)
Display character c on rl_outstream. If Readline has not been set to display meta
characters directly, this will convert meta characters to a meta-preﬁxed key sequence.
This is intended for use by applications which wish to do their own redisplay.
Chapter 2: Programming with GNU Readline
33
[Function]
int rl_message (const char *, . . .)
The arguments are a format string as would be supplied to printf, possibly containing
conversion speciﬁcations such as ‘%d’, and any additional arguments necessary to
satisfy the conversion speciﬁcations.
The resulting string is displayed in the echo
area. The echo area is also used to display numeric arguments and search strings.
You should call rl_save_prompt to save the prompt information before calling this
function.
[Function]
int rl_clear_message (void)
Clear the message in the echo area. If the prompt was saved with a call to rl_save_
prompt before the last call to rl_message, call rl_restore_prompt before calling
this function.
[Function]
void rl_save_prompt (void)
Save the local Readline prompt display state in preparation for displaying a new
message in the message area with rl_message().
[Function]
void rl_restore_prompt (void)
Restore the local Readline prompt display state saved by the most recent call to
rl_save_prompt.
if rl_save_prompt was called to save the prompt before a call
to rl_message, this function should be called before the corresponding call to rl_
clear_message.
[Function]
int rl_expand_prompt (char *prompt)
Expand any special character sequences in prompt and set up the local Readline
prompt redisplay variables. This function is called by readline(). It may also be
called to expand the primary prompt if the rl_on_new_line_with_prompt() function
or rl_already_prompted variable is used. It returns the number of visible characters
on the last line of the (possibly multi-line) prompt. Applications may indicate that
the prompt contains characters that take up no physical screen space when displayed
by bracketing a sequence of such characters with the special markers RL_PROMPT_
START_IGNORE and RL_PROMPT_END_IGNORE (declared in ‘readline.h’. This may be
used to embed terminal-speciﬁc escape sequences in prompts.
[Function]
int rl_set_prompt (const char *prompt)
Make Readline use prompt for subsequent redisplay. This calls rl_expand_prompt()
to expand the prompt and sets rl_prompt to the result.
2.4.7 Modifying Text
[Function]
int rl_insert_text (const char *text)
Insert text into the line at the current cursor position. Returns the number of char-
acters inserted.
[Function]
int rl_delete_text (int start, int end)
Delete the text between start and end in the current line. Returns the number of
characters deleted.
[Function]
char * rl_copy_text (int start, int end)
Return a copy of the text between start and end in the current line.
Chapter 2: Programming with GNU Readline
34
[Function]
int rl_kill_text (int start, int end)
Copy the text between start and end in the current line to the kill ring, appending
or prepending to the last kill if the last command was a kill command. The text is
deleted. If start is less than end, the text is appended, otherwise prepended. If the
last command was not a kill, a new kill ring slot is used.
[Function]
int rl_push_macro_input (char *macro)
Cause macro to be inserted into the line, as if it had been invoked by a key bound to
a macro. Not especially useful; use rl_insert_text() instead.
2.4.8 Character Input
[Function]
int rl_read_key (void)
Return the next character available from Readline’s current input stream. This han-
dles input inserted into the input stream via rl pending input (see Section 2.3 [Read-
line Variables], page 23) and rl_stuff_char(), macros, and characters read from
the keyboard. While waiting for input, this function will call any function assigned
to the rl_event_hook variable.
[Function]
int rl_getc (FILE *stream)
Return the next character available from stream, which is assumed to be the keyboard.
[Function]
int rl_stuff_char (int c)
Insert c into the Readline input stream. It will be "read" before Readline attempts
to read characters from the terminal with rl_read_key(). Up to 512 characters may
be pushed back. rl_stuff_char returns 1 if the character was successfully inserted;
0 otherwise.
[Function]
int rl_execute_next (int c)
Make c be the next command to be executed when rl_read_key() is called. This
sets rl pending input.
[Function]
int rl_clear_pending_input (void)
Unset rl pending input, eﬀectively negating the eﬀect of any previous call to rl_
execute_next(). This works only if the pending input has not already been read
with rl_read_key().
[Function]
int rl_set_keyboard_input_timeout (int u)
While waiting for keyboard input in rl_read_key(), Readline will wait for u mi-
croseconds for input before calling any function assigned to rl_event_hook. u must
be greater than or equal to zero (a zero-length timeout is equivalent to a poll). The
default waiting period is one-tenth of a second. Returns the old timeout value.
2.4.9 Terminal Management
[Function]
void rl_prep_terminal (int meta ﬂag)
Modify the terminal settings for Readline’s use, so readline() can read a single
character at a time from the keyboard. The meta ﬂag argument should be non-zero
if Readline should read eight-bit input.
Chapter 2: Programming with GNU Readline
35
[Function]
void rl_deprep_terminal (void)
Undo the eﬀects of rl_prep_terminal(), leaving the terminal in the state in which
it was before the most recent call to rl_prep_terminal().
[Function]