title:Measuring the Practical Impact of DNSSEC Deployment
author:Wilson Lian and
Eric Rescorla and
Hovav Shacham and
Stefan Savage
Measuring the Practical Impact  
of DNSSEC Deployment
Wilson Lian, University of California, San Diego; Eric Rescorla, RTFM, Inc.;  
Hovav Shacham and Stefan Savage, University of California, San Diego
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Measuring the practical impact of DNSSEC Deployment
Wilson Lian
UC San Diego
Eric Rescorla
RTFM, Inc.
Hovav Shacham
UC San Diego
Stefan Savage
UC San Diego
Abstract
DNSSEC extends DNS with a public-key infras-
tructure, providing compatible clients with crypto-
graphic assurance for DNS records they obtain, even
in the presence of an active network attacker. As
with many Internet protocol deployments, admin-
istrators deciding whether to deploy DNSSEC for
their DNS zones must perform cost/beneﬁt analy-
sis. For some fraction of clients — those that perform
DNSSEC validation — the zone will be protected
from malicious hijacking. But another fraction of
clients — those whose DNS resolvers are buggy and
incompatible with DNSSEC — will no longer be able
to connect to the zone. Deploying DNSSEC requires
making a cost-beneﬁt decision, balancing security for
some users with denial of service for others.
We have performed a large-scale measurement of
the eﬀects of DNSSEC on client name resolution us-
ing an ad network to collect results from over 500,000
geographically-distributed clients. Our ﬁndings cor-
roborate those of previous researchers in showing
that a relatively small fraction of users are protected
by DNSSEC-validating resolvers. And we show, for
the ﬁrst time, that enabling DNSSEC measurably in-
creases end-to-end resolution failures. For every 10
clients that are protected from DNS tampering when
a domain deploys DNSSEC, approximately one or-
dinary client (primarily in Asia) becomes unable to
access the domain.
Introduction
1
The Domain Name System (DNS) [32], used to map
names to IP addresses, is notoriously insecure; any
active attacker can inject fake responses to DNS
queries, thus corrupting the name → address map-
ping. In order to prevent attacks on DNS integrity,
the Internet Engineering Task Force (IETF) has
developed DNSSEC [4], a set of DNS extensions
which allows DNS records to be digitally signed, thus
preventing—or at least detecting—tampering.
Over the past several years, public enthusiasm for
DNSSEC has increased signiﬁcantly. In July 2010,
the DNSSEC root zone (containing all top level do-
mains) was signed; in March 2011, .com, the largest
top level domain, was signed; in January 2012, Com-
cast announced that they had switched all of their
DNS resolvers to do DNSSEC validation and that
they had DNSSEC-signed all customer domains they
were serving [30]. Moreover, protocol designs which
depend on DNSSEC have started to emerge. For
instance, DANE [20] is a DNS extension that uses
DNS to authenticate the name → public key binding
for SSL/TLS connections. Obviously, DANE is not
secure in the absence of DNSSEC, since an attacker
who can man-in-the-middle the SSL/TLS connec-
tion can also forge DNS responses.
Despite the eﬀort being poured into DNSSEC,
actual deployment of signed records at the end-
system level has remained quite limited. As of
February 2013, VeriSign Labs’ Scoreboard1 mea-
sured 158,676 (.15%) of .com domains as secured
with DNSSEC. As with many Internet protocol de-
ployments, there is a classic collective action prob-
lem: because the vast majority of browser clients do
not verify DNSSEC records or use resolvers which
do, the value to a server administrator of deploying
a DNSSEC-signed zone is limited. Similarly, because
zones are unsigned, client applications and resolvers
have very little incentive to perform DNSSEC vali-
dation.
A zone administrator deciding whether to deploy
DNSSEC must weigh the costs and beneﬁts of:
• The fraction of clients whose resolvers validate
DNSSEC records and therefore would be able
to detect tampering if it were occurring and
DNSSEC were deployed.
• The fraction of clients which fail with valid
DNSSEC records and therefore will be unable
to reach the server whether or not tampering is
occurring.
In this paper, we measure these values by means of a
large-scale study using Web browser clients recruited
via an advertising network. This technique allows us
to sample a cross-section of browsers behind a vari-
ety of network conﬁgurations without having to de-
ploy our own sensors. Overall, we surveyed 529,294
unique clients over a period of one week. Because of
the scale of our study and the relatively small error
rates we were attempting to quantify, we encoun-
tered several pitfalls that can arise in ad-recruited
1Online: http://scoreboard.verisignlabs.com/. Vis-
ited 20 February 2013.
USENIX Association  
22nd USENIX Security Symposium  573
1
browser measurement studies. Our experience may
be relevant to others who wish to use browsers for
measurements, and we describe some of these results
in Section 4.2.
Ethics. Our experiment runs automatically with-
out user interaction and is intended to measure the
behavior and properties of hosts along the paths
from users to our servers rather than the users them-
selves. We worked with the director of UC San
Diego’s Human Research Protections Program, who
certiﬁed our study as exempt from IRB review.
2 Overview of DNS and DNSSEC
A DNS name is a dot-separated concatenation of
labels; for example, the name cs.ucsd.edu is com-
prised of the labels cs, ucsd, and edu. The DNS
namespace is organized as a tree whose nodes are
the labels and whose root node is the empty string
label. The name corresponding to a given node in
the tree is the concatenation of the labels on the path
from the node to the root, separated by periods.
Associated with each node are zero or more re-
source records (RRs) specifying information of dif-
ferent types about that node. For example, IP ad-
dresses can be stored with type A or AAAA RRs,
and the name of the node’s authoritative name
servers can be stored in type NS RRs. The set of
all RRs of a certain type2 for a given name is re-
ferred to as a resource record set (RRset).
2.1 Delegation
DNS is a distributed system, eliminating the need
for a central entity to maintain an authoritative
database of all names. The DNS namespace tree
is broken up into zones, each of which is owned
by a particular entity. Authority over a subtree
in the domain namespace can be delegated by the
owner of that subtree’s parent. These delegations
form zone boundaries. For example, a name reg-
istrar might delegate ownership of example.com
to a customer, forming a zone boundary between
.com and example.com while making that customer
the authoritative source for RRsets associated with
example.com and its subdomains. The customer can
further delegate subdomains of example.com to an-
other entity. Figure 1 depicts an example DNS tree.
2.2 Address resolution
The most important DNS functionality is the reso-
lution of domain names to IP addresses (retrieving
2And class, but for our purposes class is always IN, for
“Internet.”
.
(Root)
org
edu
com
ucsd.edu
google.com
cs.ucsd.edu
sysnet.ucsd.edu
mail.google.com
www.google.com
dnsstudy.sysnet.ucsd.edu
Figure 1: Example DNS name tree. Shaded boxes
represent zone boundaries. Edges that cross zone
boundaries are delegations.
(1) cs.ucsd.edu IN A?
(10) cs.ucsd.edu IN A 
1.2.3.4
LAN
Router
Desktop PC
(2) cs.ucsd.edu IN A?
(3) cs.ucsd.edu IN A?
(9) cs.ucsd.edu IN A
1.2.3.4
(4) edu IN NS a.edu-servers.net
a.edu-servers.net IN A x.x.x.x
Root DNS Server
(5) cs.ucsd.e d u IN A ?
ISP's Recursive
DNS Resolver
(6) ucsd.edu IN NS ns0.ucsd.edu
ns0.ucsd.edu IN A y.y.y.y
edu DNS Server
a.edu-servers.net
x.x.x.x
(8) cs.ucsd.edu IN A
1.2.3.4
(7) cs.ucsd.e
d
u IN A
?
ucsd.edu DNS Server
ns0.ucsd.edu
y.y.y.y
Figure 2: Simpliﬁed DNS address resolution pro-
cedure for cs.example.tld. In this example, there
are at most one nameserver and one IP address per
name.
type A or AAAA RRsets). Domain name resolu-
tion is performed in a distributed, recursive fashion
starting from the root zone, as shown in Figure 2.
Typically, end hosts do not perform resolution them-
selves but instead create DNS queries and send them
to recursive resolvers, which carry out the resolution
to completion on their behalfs. When a nonrecursive
DNS server receives a query that it cannot answer, it
returns the name and IP address of an authoritative
name server as far down as possible along the path
to the target domain name. The recursive resolver
then proceeds to ask that server.
In this fashion,
the query eventually reaches a server that can an-
swer the query, and the resolution is complete. This
recursive process is bootstrapped by hardcoding the
names and IP addresses of root nameservers into end
hosts and recursive resolvers.
574  22nd USENIX Security Symposium 
USENIX Association
2
2.3 DNS (in)security
The original DNS design did not provide any mecha-
nisms to protect the integrity of DNS response mes-
sages. Thus, an active network attacker can launch
a woman-in-the-middle attack to inject her own re-
sponses which would be accepted as if they were le-
gitimate. This attack is known as DNS spooﬁng.
Moreover, because recursive resolvers typically cache
responses, a single spoofed response can be used to
perform a DNS cache poisoning attack, which re-
sults in future responses to requests for the same
RRset returning the bogus spoofed response. The
mechanisms by which DNS cache poisoning is car-
ried out are outside the scope of this work but have
been studied more formally in [38]. DNS spooﬁng
and cache poisoning may be used to compromise any
type of DNS RR.
2.4 DNSSEC to the rescue
The Domain Name System Security Extensions
(DNSSEC) [4], aim to protect against DNS spoof-
ing attacks by allowing authoritative nameservers to
use public key cryptography to digitally sign RRsets.
Security-aware recipients of a signed RRset are able
to verify that the RRset was signed by the holder of
a particular private key, and a chain of trust from
the root zone downwards ensures that a trusted key
is used to validate signatures.
While DNSSEC adds a number of new RR types,
the DNSKEY, RRSIG, DS only the records are rele-
vant for our purposes; we describe them brieﬂy here.
DNSKEY: DNSKEY records are used to hold
public keys. Each zone authority generates at least
one public/private key pair, using the private keys
to sign RRsets and publishing the public keys in
Domain Name System Key (DNSKEY) resource
records.
RRSIG: When a zone is signed, a resource record
signature (RRSIG) resource record is generated for
each RRset-public key pair. In addition to contain-
ing a cryptographic signature and the name and type
of the RRset being signed, the RRSIG RR speciﬁes
a validity window and the name of the signing key’s
owner.
DS: Lastly, the Delegation Signer (DS) RR type
links signed zones to establish the chain of trust.
Each DS RR contains the digest of one of the sub-
zone’s DNSKEY RRs.
DNSSEC’s security is built on the chain of trust
model. Starting from a “trust anchor,” a validator
attempts to trace a chain of endorsements from the
root all the way to the RRset being validated; I.e.,
that each DNSKEY or DS record along the path and
the ﬁnal RRSet is correctly signed by the parent’s
If a chain of trust can be constructed
public key.
all the way to the trust anchor, then the validating
resolver can have conﬁdence that the information in
that RR is correct — or at least that it is crypto-
graphically authenticated.
Because DNSSEC is a retroﬁt onto the exist-
ing insecure DNS, it is explicitly designed for in-
cremental deployment, and insecure (i.e., unsigned)
domains can coexist with secure domains. Thus,
DNSSEC-capable resolvers should be able to re-
solve unsigned domains, and non-DNSSEC resolvers
should be able to resolve DNSSEC-signed domains,
though of course they will not gain any security
value. In order to make this work, DNSSEC records
are designed to be backwards-compatible with ex-
isting resolvers, and DNSSEC resolvers are able to
distinguish zones which simply are not signed from
those which are signed but from which an attacker
has stripped the signatures (the DS record is used
for this purpose).
Unfortunately, while DNSSEC is designed to be
it is known [9] that there
backwards compatible,
are some network elements which do not process
DNSSEC records properly. The purpose of this work
is to determine the frequency of such elements and in
particular their relative frequency to elements which
actually validate DNSSEC signatures and thus ben-
eﬁt from its deployment.
3 Methodology
In order to address this question, we conducted a
large-scale measurement study of web browsers in
the wild. In particular, we sought to measure two
quantities:
• What fraction of clients validate DNSSEC
records and therefore would be able to detect
tampering if it were occurring and DNSSEC
were deployed?
• What fraction of clients fail with valid DNSSEC
records and therefore will be unable to reach the
server whether or not tampering is occurring?
Answering these questions requires taking mea-
surements from a large number of clients. We gath-
ered our clients by purchasing ad space from an on-
line advertising network; the ad network enabled us
to host an ad at a ﬁxed URL which would be loaded
in an iframe on various publishers’ web sites. Our
ad included JavaScript code to drive the experiment
and was executed without any user interaction upon
the loading of the ad iframe in clients’ browsers. In
order to minimize sampling bias, our ad campaign
did not target any particular keywords or countries.
USENIX Association  
22nd USENIX Security Symposium  575
3
However, because our measurements were sensitive
to the reliability of the participants’ Internet con-
nections, we conﬁgured our ad campaign to target
desktop operating systems, to the exclusion of mo-
bile users.
Publisher's web page
Ad-network iframe 1
Ad-network iframe 2
Static ad URL iframe
Measurement page
Our client-side “driver script” (discussed in detail
in § 3.1) induces participants’ browsers to load 1×1-
pixel images (“test resources”) from various domains.
This is a standard technique for inducing the browser
to load resources from diﬀerent origins than the con-
taining document. These domains fall into the fol-
lowing three classes:
Dummy 
image
Driver 
script
jQuery.js
JSON lib
Test 
resource
Test 
resource
...
Test 
resource
• nosec — without DNSSEC
• goodsec — with correctly-conﬁgured DNSSEC
• badsec — with DNSSEC against which we simu-
late misconﬁguration or tampering by an active
network attacker
The goodsec and badsec zones were signed with
1024-bit keys3 using RSA-SHA1.
If we observe an HTTP request for a test resource,
we conclude that the participant’s browser was able
to resolve that type of domain. Otherwise, we con-
clude that it was not.
These three domain classes allow us to assess the
client/resolver’s DNSSEC behavior. The nosec do-
main class serves as a control, representing the state
of the majority of the sites on the web. Failed loads
from the goodsec domain class allow us to measure
the fraction of clients which would not be able to
reach a DNSSEC-enabled site, even in the absence
of an attack. Failed loads from the badsec domain
class tell us about the fraction of clients which detect
and react to DNSSEC tampering.
During each ad impression, the driver script at-
tempts to resolve and load a total of 27 test re-
sources. They are distributed as follows: one nosec
domain, one goodsec domain, and 25 diﬀerent badsec
domains. Each badsec variant simulates an attack
against DNSSEC at a diﬀerent point in the chain of
trust, and as we will see in Section 4, certain vali-
dating resolvers exhibit bugs that cause some badsec
domains to be treated as correctly-signed.
3.1 Client-side experiment setup
Figure 3 shows how our driver script is embedded in