title:Automated Detection and Fingerprinting of Censorship Block Pages
author:Ben Jones and
Tzu-Wen Lee and
Nick Feamster and
Phillipa Gill
Automated Detection and Fingerprinting of
Censorship Block Pages
Ben Jones, Tzu-Wen Lee*, Nick Feamster, Phillipa Gill*
Georgia Tech *Stony Brook University
Abstract
One means of enforcing Web censorship is to return a block page,
which informs the user that an attempt to access a webpage is unsuc-
cessful. Detecting block pages can provide a more complete picture
of Web censorship, but automatically identifying block pages is
difﬁcult because Web content is dynamic, personalized, and may
even be in different languages. Previous work has manually de-
tected and identiﬁed block pages, which is difﬁcult to reproduce;
it is also time-consuming, which makes it difﬁcult to perform con-
tinuous, longitudinal studies of censorship. This paper presents an
automated method both to detect block pages and to ﬁngerprint
the ﬁltering products that generate them. Our automated method
enables continuous measurements of block pages; we found that
our methods successfully detect 95% of block pages and identify
ﬁve ﬁltering tools, including a tool that had not been previously
identiﬁed “in the wild”.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]:[Security and pro-
tection (e.g., ﬁrewalls)]; C.2.3 [Network Operations]: [Network
Monitoring]
Keywords
Censorship; Internet Measurement
1 Introduction
Internet censorship is pervasive; for example, the OpenNet Initia-
tive’s latest measurements detected censorship in 38 of 74 coun-
tries [10]. Censorship mechanisms can take many forms, ranging
from injected TCP RST packets or DNS responses, to explicit Web
pages notifying users that the content has been blocked, or block
pages. Previous work has developed mechanisms to automatically
detect TCP RST packets and altered DNS responses [13, 1], but
a signiﬁcant share of censorship still consists of block pages. To
provide a more complete picture of Internet censorship, we must
develop automated methods to detect block pages and identify the
ﬁltering tools that create them.
Differentiating accessible content from block pages are difﬁcult
for several reasons:
1. Dynamic Content. Some sites may update content between
requests, returning different versions of the same page. Fig-
ures 1a and 1b illustrate this effect for cnn.com. Block pages
may also change (e.g., to display the blocked URL or category),
Permission to make digital or hard copies of part or all of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage, and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for third-party components
of this work must be honored. For all other uses, contact the owner/author(s).
Copyright is held by the author/owner(s).
IMC’14, November 5–7, 2014, Vancouver, BC, Canada. 
ACM 978-1-4503-3213-2/14/11.
http://dx.doi.org/10.1145/2663716.2663722
adding yet more problems. Figure 1c illustrates this problem
because the block page includes the URL for cnn.com.
2. Content is personalized. Web sites may personalize content
for an individual or region, thereby decreasing the similarity
between versions of the same page.
3. Content is in different languages. Languages vary across
regions, making keyword matching challenging.
Today, those who wish to measure block pages must manually
create regular expressions to detect speciﬁc block pages and identify
ﬁltering tools. Unfortunately, this approach is too slow and resource-
intensive to support consistent, continuous measurements because a
person must manually create new regular expressions. This process
also cannot identify unknown block page templates a priori.
In this paper, we present techniques to automatically detect block
pages and identify the products that serve them. Our detection tech-
nique is based on the insight that it is easier to detect the difference
between a block page and legitimate content than the similarity
between a block page and known block pages. Based upon this
insight, we develop a block page detection method that correctly
identiﬁes 95% of block pages and 98.6% of accessible pages.
Our ﬁngerprinting technique is based on the insight that block
page templates uniquely identify the ﬁltering tool that generated
them. Using this method, we identify ﬁve known ﬁltering tools, in-
cluding one that has not been previously observed “in the wild”. We
extend the work of Dalek et al. [2] by automatically identifying ﬁl-
tering tools where possible, and ﬂagging unidentiﬁed templates for
researchers to label. Since these methods do not require active prob-
ing, we can apply them to archival censorship measurements from
the OpenNet Initiative and provide the ﬁrst glimpse into changes in
ﬁltering tools across time.
The rest of this paper describes our methods for detecting block
pages; techniques for ﬁngerprinting block pages to uniquely identify
block page vendors; the accuracy of these detection and ﬁngerprint-
ing methods; and an application of these techniques to ﬁve years of
measurements of block pages from 49 countries.
2 Background
In this section, we describe various web ﬁltering mechanisms and
survey related work.
2.1 Censorship and Block Pages
A censor may return a block page using a variety of mechanisms,
such as injecting DNS responses, redirecting trafﬁc through trans-
parent proxies, and inserting packets directly into a TCP stream.
In DNS redirection, the censor injects a fake DNS response when
the user tries to resolve a hostname that contains blocked content,
thereby redirecting the user to a server hosting a block page. Trans-
parent proxies can provide more granularity than DNS injection by
inspecting the content of HTTP streams for restricted keywords or
URLs. If the user tries to access restricted content, the proxy could
299(c) Block Page for cnn.com
(a) cnn.com on October 24
(b) cnn.com on October 30
Figure 1: Differences between accessible pages inhibit block page detection. Figure 1a and Figure 1b are structurally similar, but contain different text and links.
Both of these versions of the page differ from the block page in Figure 1c. The block page in Figure 1c also shows that block pages can contain custom content,
in this case, the blocked URL, cnn.com . Variations in block page content make block page detection challenging and time consuming.
drop the request and return a block page. Because a block page
is overt, it is generally safe to assume that a censor who returns a
block page to the user is not trying to hide the fact that they are
censoring the page and are thus not genearally interested in evading
our detection techniques.
2.2 Related Work
OONI [11] is the only other censorship measurement tool that
has implemented an automated block page detection method. In
Section 4.1, we describe OONI’s DOM similarity measure, and in
Section 4.2 we compare its method to other block page detection
techniques.
Block page detection relates to both document classiﬁcation and
web page classiﬁcation. Document classiﬁcation aims to classify
documents based on features within the documents. The most rele-
vant document classiﬁcation technique is term-based classiﬁcation,
which clusters pages based on the words in a document [4]. Web
page classiﬁcation is a type of document classiﬁcation that operates
on web pages. Web page classiﬁcation may leverage the seman-
tic content of HTML markup [7], which provides information for
visualizing and linking documents. Some classiﬁcation methods
strip the HTML structure from pages and use existing document
classiﬁcation schemes on the stripped content.
Previous work has aimed to identify other types of censorship
techniques, such as methods that reset connections or otherwise
interfere with connections. Weaver et al. detected injected TCP
RST packets and tried to isolate the source and purpose of the
injected RST packets [13]. They also ﬁngerprinted ﬁltering tools
that reset TCP connections. More recently, Weaver et al. focus on
identifying the existence and purpose of transparent proxies, but
did not extend the work to measuring censorship due to user safety
concerns [12].
Marqui-Boire et al. scanned networks for Blue Coat devices
and conﬁrmed the manufacturer by actively probing the devices [5].
Noman et al. and the Citizen Lab explored how censorship changes
in response to changes in the URL list for a particular product [8, 6].
Dalek et al. identiﬁed URL ﬁltering tools by network scanning and
validated their results with in-network testing [2]. Unfortunately,
these methods are time consuming because each measurement re-
quires generating new URLs and inconsistent because network
scanning may miss devices that do not have public IPs.
3 Data
We used the OpenNet Initiative (ONI) [10] block page corpus,
which has over 500,000 entries. The ONI collected measurements
in 49 countries from 2007 to 2012 using locally and globally sensi-
tive URLs as deﬁned by ONI researchers and collaborators around
the globe. Each entry in the database corresponds to a single mea-
surement for a URL and contains an uncensored version of the
page collected in Toronto, and a test page, collected in the cen-
soring country at approximately the same time. We assume that
the Internet in Toronto is not censored and therefore that page rep-
resents a known good page. Amongst other data, the dataset has
a measurement timestamp, a manually-assigned label indicating
whether the test page is blocked or not, the location of the test, and
the test network. An anonymized version of the dataset and more
information are available online [3].
The ONI dataset has a label for each measurement indicating
if the test page was blocked or accessible. To generate this label-
ing, an ONI staff member generated a regular expression for each
block page in each region; about 28,000 test pages were labeled as
blocked, and the remaining test pages (about 480,000) were labeled
as accessible. We use both sets in our evaluation of detection meth-
ods. Because this labeling process created new regular expressions
for each new test, the labeling accounts for changes in block pages.
Although we identiﬁed a few misclassiﬁed pages, we have found
the labeling to be mostly accurate; these labels have themselves
served as a means to identify censorship in previous studies [3] and
are thus a reasonable source of an independent label.
4 Block Page Detection
We present methods for detecting block pages based on a simple
insight: block pages are less similar to accessible pages than dif-
ferent versions of accessible pages are to one another. Thus, while
accessible pages may be non-identical, block pages will exhibit
more signiﬁcant differences. To classify a test page as blocked or
not, we compare the test page to a known unblocked version of
the page using a similarity measure. Each test page was collected
from the region of interest at about the same time as the known
unblocked version of the page. To ﬁnd the best classiﬁer, we
evaluated many similarity metrics, including page length, cosine
similarity, and DOM similarity (the metric that OONI [11] uses).
We evaluated several other document classiﬁcation methods such
as inverse document frequency (IDF), which performed poorly; and
300Figure 2: Block pages are typically smaller than accessible pages. The
knee of the blocked page curve is inset.
other methods such as fuzzy hashing. We present the most salient
results below.
4.1 Metrics
Length. In the length similarity metric, we compare the sizes of the
test page and the known unblocked page. The intuition is that block
pages will be smaller than accessible pages, so a test page may be a
block page if its size signiﬁcantly differs from the size of the known
good page. This simple approach works well because accessible
pages tend to be larger than blocked pages, as Figure 2 illustrates.
To compare pages, we compute the page length difference using
Equation 1, where len1 is the length of the known unblocked page
and len2 is the length of the test page.
Length Percent Diff = |len1− len2|
max{len1,len2}
(1)
Cosine Similarity. The cosine similarity metric [4] compares pages
based on a term frequency vector, which is a data structure that
stores the number of times the words in a document occur. In the
context of block page identiﬁcation, the terms are HTML tags; the
term frequency vector stores the number of times each HTML tag
appears within a page. Representing a page by its HTML structure
allows us to elide most dynamic content, which reduces the variance
between accessible pages and (hence) the false positive rate.
DOM Similarity. The developers of OONI [11] proposed compar-
ing the HTML structure of block pages using a DOM similarity
measure. The metric creates an adjacency matrix with the proba-
bilities of transitioning between HTML tags. The DOM similarity
measure then compresses the adjacency matrix for each page into a
vector of its eigenvalues and compares these vectors with a normal-
ized dot product.
4.2 Results
We ﬁnd that our automated detection methods are accurate, and
that the page length similarity measure works best. To evaluate
these measures, we compute precision, recall, and false positive
rates for each metric using a ten-fold cross-validation and compare
precision-recall and ROC curves.
The length comparison measure scored blocked and accessible
pages differently, as Figure 3 shows: A threshold that marks any
difference in size over 30% as blocked achieves a true positive rate
of 95% and a false positive rate of 1.37%. These numbers compare
favorably to other similarity measures, as shown in Table 1. Further-
more, the low standard deviation shows that the length comparison
metric performed consistently well during cross-validation, imply-
ing that these results will generalize to other block pages. Figure 4
Figure 3: Differences in page length for blocked and accessible sites imply
that the length comparison measure can differentiate between blocked and
accessible pages. The knee of the accessible page scores curve is shown
inset.
shows the precision-recall and ROC curves for each metric, further
illustrating that length comparison is the best metric.
5 Block Page Fingerprinting
To ﬁngerprint ﬁltering tools, we identify block page templates and
match signatures for each template. Though signature matching
for block pages is not new, automated detection of block page
templates reduces the effort and increases consistency of ﬁltering
product identiﬁcation.
5.1 Approach
We ﬁngerprint block pages using two features from the block page
detection methods: page length and term frequency vectors. Using
these features, we cluster the block pages and label each cluster
with the ﬁltering tool that generated the template. We assume that
ﬁltering tools generate block pages from a template, and that each
template is unique to the ﬁltering tool, though a single ﬁltering tool
may have many templates. Our analysis of changes in censorship
in Section 5.2 and prior work[3] validate this assumption.
We used both term frequency vectors and page length as features
for clustering. The intuition behind page length clustering is that
block-page templates change at most a few words between different
URLs. We used single-link hierarchical clustering to generate
clusters on the basis of the block page sizes without knowing the
number of clusters a priori.
Similarly, the intuition behind term frequency clustering is that
the censor will not vary the structure of a block page within the
same template. This intuition appears to be accurate because there
are only 37 distinct term frequency vectors from the 5 years of data.
We partitioned the data into different clusters on the basis of unique
term frequency vectors.
5.2 Results
To validate the clusters that our algorithm produced, we compared
the clusterings to manually labeled block page templates. We man-
ually identiﬁed 27 block page templates and computed the longest
common subsequences for each template. We used these subse-
quences to represent the ground truth for distinct clusters and them
to calculate precision and recall for each cluster. In this context,
precision is the number of pages in the cluster which come from
the same block page template. Recall is the number of pages in
the cluster which match a block page template out of all the pages