not clear that either can be used to construct a scheme sup-
porting range queries over multiple attributes. Recent work
on traitor-tracing systems [14, 12] allows a more specialized
sort of range query. Given a ciphertext C with attributes
X = (x1, x2, . . . , xD), a master key owner can issue a token
(cid:1)
√
for some value x
for
all 1 ≤ d ≤ D with O(
T ) ciphertext size and token size.
Applications of searchable encryption have been studied by
the database community [30, 22, 2]. Other works related to
searches on encrypted data include oblivious RAMs [37, 28],
and private stream searching [5, 38].
IBE. The notion of Identity-Based Encryption (IBE) was in-
troduced by Shamir [42]. Several IBE schemes [20, 11, 7, 6,
18, 46, 36], hierarchical IBE (HIBE) schemes [31, 26, 8, 48],
and applications [41, 29] were proposed since then. In par-
ticular, the HIBE scheme proposed by Boneh, Boyen, and
Goh [8] can be extended to multiple dimensions (M-HIBE)
efﬁciently and in a collusion-resistant1 manner. The resulting
scheme can be used to solve a problem similar to MRQED,
but lacking the third property in the previous discussion. That
is, when using M-HIBE it would not be possible to hide the
attribute values associated with a ciphertext.
Anonymous IBE. Recently,
researchers have proposed
anonymous IBE and HIBE schemes (AIBE, AHIBE) [15, 1].
The notion of anonymity is also related to key privacy [4, 3].
Like the HIBE scheme mentioned above, the AHIBE scheme
of Boyen and Waters [15] can be extended to multiple dimen-
sions in a collusion-resistant manner, resulting in a Multi-
dimensional AHIBE (M-AHIBE) scheme. An M-AHIBE
scheme could be used to implement MRQED (including the
third property), but applying it directly would have a serious
drawback. Because the encryption is anonymous and hides
the attributes used as the public key, at time of decryption
one would need to try all possible decryption keys on a given
ciphertext. This incurs O(T D) decryption cost on a single
ciphertext, where T is the number of possible values each
attribute may assume and may be quite large. Nevertheless,
on a technical level, this AHIBE scheme and its extension to
M-AHIBE are the most closely related work to ours. In par-
ticular, we prevent collusion in the same way the M-AHIBE
construction does. Since we do not require the key delegation
property of HIBE schemes, however, we are able to improve
decryption cost to be logarithmic in T .
Recent developments. Concurrent to our work, Boneh and
Waters [13] propose another construction (BonehWaters06
in Table 1) for complex queries over encrypted data. They
propose a primitive called Hidden Vector Encryption, and
1Collusion-resistance, in this sense, means that two parties who have been
issued different decryption keys cannot combine their keys in some way to
allow decryption of ciphertexts that neither could decrypt previously.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007use it in conjunctive range and subset queries. When ap-
plied to multi-dimensional range query, their scheme results
in O(DT ) encryption time, ciphertext size, and public key
size, and O(D) decryption key size and decryption cost. As
in Table 1, D and T are the number of attributes and the num-
ber of discrete values for each attribute. Their scheme is more
expensive in terms of public key size, encryption cost and ci-
phertext size; but saves on decryption key size and decryption
cost.
In applications with large T and small D (e.g., net-
work audit logs, and the stock trading application mentioned
in Section 8), our approach is more appropriate. In particu-
lar, for network audit logs, T = 232 for an IP address, and
D may range from 2 to 4.
In other applications where D
is large and T is small, the BonehWaters06 construction is
more appropriate. We also would like to note that the Bone-
hWaters06 construction achieves a stronger notion of secu-
rity. Their construction hides the attribute values, even when
the message is successfully decrypted. This stronger secu-
rity property is a key difference from our construction, in
which the attribute values are revealed upon successful de-
cryption. In Section 3, we name these two different security
models match-concealing security and match-revealing secu-
rity respectively. For applications like encrypted network au-
dit logs, it is acceptable to reveal the attributes of a message
when it is successfully decrypted. By relaxing the security
deﬁnition to allow this possibility, we achieve O(D log T )
encryption time, ciphertext size, and public key size. This
makes applications such as the encrypted network audit logs
possible. However, one may conceive of other applications
where the stronger security notion is necessary.
3 Problem Deﬁnition and Preliminary
3.1 Problem Deﬁnition
In the network audit log application, a gateway encrypts
network ﬂows, and submits them to an untrusted repository.
When necessary, an auditor may ask an authority for a key
that allows the decryption of all ﬂows whose attributes fall
within a certain range; while the privacy of all irrelevant ﬂows
are still preserved. There is a geometric interpretation to these
multi-attribute range queries. Suppose that we would like to
allow queries on these three ﬁelds: time-stamp t, source ad-
dress a, and destination port p. The tuple (t, a, p) can be re-
garded as a point X in multi-dimensional space. Now sup-
pose we query for all ﬂows whose t, a, p falls within some
range: t ∈ [t1, t2], a ∈ [a1, a2] and p ∈ [p1, p2]. Here
the “hyper-range” [t1, t2] × [a1, a2] × [p1, p2] forms a hyper-
rectangle B in space. The above range query is equivalent to
testing whether a point X falls inside the hyper-rectangle B.
We now formally deﬁne these notions mentioned above.
Assume that an attribute can be encoded using discrete inte-
ger values 1 through T . For example, an IP address can be
encoded using integers 1 through 232. We use the notation
[T ] to denote integers from 1 to T , i.e., [T ] = {1, 2, . . . , T}.
Let S ≤ T be integers, we use [S, T ] to denote integers from
S to T inclusive, i.e., [S, T ] = {S, S + 1, . . . , T}. Through-
out this paper, we assume that T is a power of 2, and denote
A MRQED scheme
(cid:1)(cid:1)∀d ∈
log2 as simply log. Suppose that we would like to support
range queries on D different attributes, each of them can take
on values in [T1], [T2], . . . , [TD] respectively. We formally
deﬁne a D-dimensional lattice, points and hyper-rectangles
below.
Deﬁnition 1 (D-dimensional lattice, point, hyper-rectan-
gle). Let ∆ = (T1, T2, . . . , TD). L∆ = [T1] × [T2] ×
. . . × [TD] deﬁnes a D-dimensional lattice. A D-tuple
X = (x1, x2, . . . , xD) deﬁnes a point in L∆, where xd ∈
[Td](∀d ∈ [D]). A hyper-rectangle B in L∆ is deﬁned
as B(s1, t1, s2, t2, . . . , sD, tD) ={( x1, x2, . . . , xD)
[D], xd ∈ [sd, td]} (∀d ∈ [D], 1 ≤ sd ≤ td ≤ Td).
four
(random-
of
consists
Setup, Encrypt,
ized) polynomial-time algorithms:
DeriveKey and QueryDecrypt.
In the network audit
log example, an authority runs Setup to generate public
parameters and a master private key; a gateway runs the
Encrypt algorithm to encrypt a ﬂow.
Encryption is
performed on a pair (Msg, X). The message Msg is an
arbitrary string, and X is a point in multi-dimensional space,
representing the attributes. For example, suppose that we
would like to support queries on the following three attributes
of a ﬂow:
time-stamp t, source address a, and destination
port p. The tuple (t, a, p) then becomes the point X, and the
entire ﬂow summary forms the message Msg. Whenever
necessary, the authority can run the DeriveKey algorithm,
and compute a decryption key allowing the decryption of
ﬂows whose attributes fall within a certain range. Given
this decryption key, an auditor runs the QueryDecrypt
algorithm over the encrypted data to decrypt the relevant
ﬂows. We now formally deﬁne MRQED.
Deﬁnition 2 (MRQED). An Multi-dimensional Range Query
over Encrypted Data (MRQED) scheme consists of the fol-
lowing polynomial-time randomized algorithms.
1. Setup(Σ, L∆): Takes a security parameter Σ and D-
dimensional lattice L∆ and outputs public key PK and
master private key SK.
2. Encrypt(PK, X, Msg): Takes a public key PK, a
point X, and a message Msg from the message space
M and outputs a ciphertext C.
3. DeriveKey(PK, SK, B): Takes a public key PK, a
master private key SK, and a hyper-rectangle B and out-
puts decryption key for hyper-rectangle B.
4. QueryDecrypt(PK, DK, C): Takes a public key
PK, a decryption key DK, and a ciphertext C and out-
puts either a plaintext Msg or ⊥, signaling decryption
failure.
For each message Msg ∈ M, hyper-rectangle B ⊆ L∆,
and point X ∈ L∆, the above algorithms must satisfy the
following consistency constraints:
(cid:2)
QueryDecrypt(PK, DK, C) =
w.h.p., if X /∈ B
(1)
where C = Encrypt(PK, X, Msg) and DK =
DeriveKey(PK, SK, B).
Msg if X ∈ B
⊥
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 20073.2 Security Deﬁnitions
Suppose that during time [t1, t2], there is an outbreak of a
worm characteristic by the port number p1. Now the trusted
authority issues a key for the range t ∈ [t1, t2] and p = p1
to a research group who has been asked to study the worm
behavior. With this key, the research group should be able
to decrypt only ﬂows whose time-stamp and port number
fall within the given range. The privacy of all other ﬂows
should still be preserved.
Informally, suppose that a com-
putationally bounded adversary has obtained decryption keys
for regions B0, B1, . . . , Bq. Now given a ciphertext C =
Encrypt(PK, X, Msg) such that X /∈ B0, B1, . . . , Bq,
the adversary cannot learn X or Msg from C. Of course,
since the adversary fails to decrypt C using keys for regions
B0, B1, . . . , Bq, the adversary inevitably learns that the point
X encrypted does not fall within these regions. But apart
from this fact, the adversary cannot learn more information
about X or Msg.
We now formalize this intuition into a selective security
game for MRQED. Here, the selective security notion is sim-
ilar to the selective-ID security for IBE schemes [16, 17, 6].
We prove the security of our construction in the selective
model. A stronger security notion is adaptive security, where
the adversary does not have to commit to two points in the
Init stage of the security game deﬁned below. In the technical
report version [43], we give a formal deﬁnition for adaptive
security, and state how it is related to the selective security
model.
0, X∗
where it wishes to be challenged.
Deﬁnition 3 (MR-selective security). An MRQED scheme is
selectively secure in the match-revealing (MR) model if all
polynomial-time adversaries have at most a negligible advan-
tage in the selective security game deﬁned below.
• Init: The adversary submits two points X∗
1 ∈ L∆
• Setup: The challenger runs the Setup(Σ, L∆) algo-
rithm to generate PK, SK. It gives PK to the adver-
sary, keeping SK secret.
• Phase 1: The adversary adaptively issues decryption
key queries for hyper-rectangles B1, B2, . . . , Bq0. Fur-
thermore, X∗
1 are not contained in any hyper-
rectangles queried in this phase, i.e., for 0 < i ≤ q0,
0 /∈ Bi, and X∗
X∗
• Challenge: The adversary submits two equal length
messages Msg0, Msg1 ∈ M. The challenger ﬂips a
random coin, b, and encrypts Msgb under X∗
b. The ci-
phertext is passed to the adversary.
• Phase 2: Phase 1 is repeated. The adversary adap-
tively issues decryption key queries for hyper-rectangles
Bq0+1, Bq0+2, . . . , Bq. As before, all hyper-rectangles
queried in this stage must not contain X∗
0 and X∗
1.
• Guess: The adversary outputs a guess b
(cid:1)
of b.
An adversary A’s advantage in the above game is deﬁned
0 and X∗
1 /∈ Bi.
(cid:1)(cid:1)Pr[b = b
(cid:1)] − 1
2
as AdvA(Σ) =
(cid:1)(cid:1).
We would like to note that a stronger notion of security
is possible as deﬁned by Boneh and Waters in their concur-
rent work [13]. We call this stronger security notion match-
concealing (MC) security, since it requires that the attribute
values (i.e., the point X) remain hidden even when an entry
matches a query. MC-selective security can be formally de-
ﬁned through the following game between an adversary and
a challenger.
Deﬁnition 4 (MC-selective security [13]). An MRQED
scheme is selectively secure in the match-concealing (MC)
model if all polynomial-time adversaries have at most a neg-
ligible advantage in the selective security game deﬁned be-
low.
0, X∗
0 /∈ Bi) ∧ (X∗
0 ∈ Bi) ∧ (X∗
1 ∈ Bi), or( X∗
where it wishes to be challenged.
• Init: The adversary submits two points X∗
1 ∈ L∆
• Setup: The challenger runs the Setup(Σ, L∆) algo-
rithm to generate PK, SK. It gives PK to the adver-
sary, keeping SK secret.
• Phase 1: The adversary adaptively issues decryption
key queries for hyper-rectangles B1, B2, . . . , Bq0, sat-
isfying the condition that for all 0 < i≤ q0, either
1 /∈ Bi).
(X∗
• Challenge: The adversary submits two equal length
messages Msg0, Msg1 ∈ M. If in Phase 1, there ex-
ists some 0 < i ≤ q0 such that (X∗
1 ∈ Bi),
then Msg0 = Msg1. The challenger ﬂips a random
coin, b, and encrypts Msgb under X∗
b. The ciphertext is
passed to the adversary.
• Phase 2: Phase 1 is repeated. The adversary adap-
tively issues decryption key queries for hyper-rectangles
Bq0+1, Bq0+2, . . . , Bq, satisfying the condition that for
all q0 < i≤ q, either (X∗
1 ∈ Bi), or
1 /∈ Bi). In addition, if in the Chal-
(X∗
lenge stage, Msg0 (cid:10)= Msg1, then for all q0 < i ≤ q,
1 /∈ Bi).
(X∗
0 /∈ Bi) ∧ (X∗