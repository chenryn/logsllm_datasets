title:Ciphertext-Policy Attribute-Based Encryption
author:John Bethencourt and
Amit Sahai and
Brent Waters
Ciphertext-Policy Attribute-Based Encryption
John Bethencourt
Carnegie Mellon University
Amit Sahai
UCLA
Brent Waters
SRI International
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract
In several distributed systems a user should only be
able to access data if a user posses a certain set of cre-
dentials or attributes. Currently, the only method for
enforcing such policies is to employ a trusted server to
store the data and mediate access control. However, if
any server storing the data is compromised, then the
con(cid:12)dentiality of the data will be compromised. In this
paper we present a system for realizing complex access
control on encrypted data that we call Ciphertext-Policy
Attribute-Based Encryption. By using our techniques
encrypted data can be kept con(cid:12)dential even if the stor-
age server is untrusted; moreover, our methods are
secure against collusion attacks. Previous Attribute-
Based Encryption systems used attributes to describe
the encrypted data and built policies into user’s keys;
while in our system attributes are used to describe a
user’s credentials, and a party encrypting data deter-
mines a policy for who can decrypt. Thus, our meth-
ods are conceptually closer to traditional access control
methods such as Role-Based Access Control (RBAC).
In addition, we provide an implementation of our sys-
tem and give performance measurements.
1
Introduction
In many situations, when a user encrypts sensitive
data, it is imperative that she establish a speci(cid:12)c ac-
cess control policy on who can decrypt this data. For
example, suppose that the FBI public corruption of-
(cid:12)ces in Knoxville and San Francisco are investigating
an allegation of bribery involving a San Francisco lob-
byist and a Tennessee congressman. The head FBI
agent may want to encrypt a sensitive memo so that
only personnel that have certain credentials or at-
tributes can access it. For instance, the head agent
may specify the following access structure for accessing
this information: ((\Public Corruption Office"
AND (\Knoxville" OR \San Francisco")) OR
(management-level > 5) OR \Name: Charlie
Eppes").
By this, the head agent could mean that the memo
should only be seen by agents who work at the public
corruption o(cid:14)ces at Knoxville or San Francisco, FBI
o(cid:14)cials very high up in the management chain, and a
consultant named Charlie Eppes.
As illustrated by this example, it can be crucial that
the person in possession of the secret data be able to
choose an access policy based on speci(cid:12)c knowledge of
the underlying data. Furthermore, this person may
not know the exact identities of all other people who
should be able to access the data, but rather she may
only have a way to describe them in terms of descriptive
attributes or credentials.
Traditionally, this type of expressive access control
is enforced by employing a trusted server to store data
locally. The server is entrusted as a reference monitor
that checks that a user presents proper certi(cid:12)cation be-
fore allowing him to access records or (cid:12)les. However,
services are increasingly storing data in a distributed
fashion across many servers. Replicating data across
several locations has advantages in both performance
and reliability. The drawback of this trend is that it is
increasingly di(cid:14)cult to guarantee the security of data
using traditional methods; when data is stored at sev-
eral locations, the chances that one of them has been
compromised increases dramatically. For these reasons
we would like to require that sensitive data is stored in
an encrypted form so that it will remain private even
if a server is compromised.
Most existing public key encryption methods allow
a party to encrypt data to a particular user, but are
unable to e(cid:14)ciently handle more expressive types of en-
crypted access control such as the example illustrated
above.
Our contribution.
In this work, we provide the (cid:12)rst
construction of a ciphertext-policy attribute-based en-
cryption (CP-ABE) to address this problem, and give
the (cid:12)rst construction of such a scheme. In our system,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:20 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007a user’s private key will be associated with an arbi-
trary number of attributes expressed as strings. On
the other hand, when a party encrypts a message in our
system, they specify an associated access structure over
attributes. A user will only be able to decrypt a cipher-
text if that user’s attributes pass through the cipher-
text’s access structure. At a mathematical level, ac-
cess structures in our system are described by a mono-
tonic \access tree", where nodes of the access struc-
ture are composed of threshold gates and the leaves
describe attributes. We note that AND gates can be
constructed as n-of-n threshold gates and OR gates
as 1-of-n threshold gates. Furthermore, we can handle
more complex access controls such as numeric ranges
by converting them to small access trees (see discussion
in the implementation section for more details).
Our techniques. At a high level, our work is sim-
ilar to the recent work of Sahai and Waters [24] and
Goyal et al. [15] on key-policy attribute based encryp-
tion (KP-ABE), however we require substantially new
techniques. In key-policy attribute based encryption,
ciphertexts are associated with sets of descriptive at-
tributes, and users’ keys are associated with policies
(the reverse of our situation). We stress that in key-
policy ABE, the encryptor exerts no control over who
has access to the data she encrypts, except by her choice
of descriptive attributes for the data. Rather, she must
trust that the key-issuer issues the appropriate keys
to grant or deny access to the appropriate users.
In
other words, in [24, 15], the \intelligence" is assumed
to be with the key issuer, and not the encryptor. In our
setting, the encryptor must be able to intelligently de-
cide who should or should not have access to the data
that she encrypts. As such, the techniques of [24, 15]
do not apply to our setting, and we must develop new
techniques.
At a technical level, the main objective that we must
attain is collusion-resistance: If multiple users collude,
they should only be able to decrypt a ciphertext if at
least one of the users could decrypt it on their own. In
particular, referring back to the example from the be-
ginning of this Introduction, suppose that an FBI agent
that works in the terrorism o(cid:14)ce in San Francisco col-
ludes with a friend who works in the public corruption
o(cid:14)ce in New York. We do not want these colluders to
be able to decrypt the secret memo by combining their
attributes. This type of security is the sine qua non of
access control in our setting.
In the work of [24, 15], collusion resistance is in-
sured by using a secret-sharing scheme and embedding
independently chosen secret shares into each private
key. Because of the independence of the randomness
used in each invocation of the secret sharing scheme,
collusion-resistance follows. In our scenario, users’ pri-
vate keys are associated with sets of attributes instead
of access structures over them, and so secret sharing
schemes do not apply.
Instead, we devise a novel private key randomization
technique that uses a new two-level random masking
methodology. This methodology makes use of groups
with e(cid:14)ciently computable bilinear maps, and it is the
key to our security proof, which we give in the generic
bilinear group model [6, 28].
Finally, we provide an implementation of our system
to show that our system performs well in practice. We
provide a description of both our API and the structure
of our implementation. In addition, we provide several
techniques for optimizing decryption performance and
measure our performance features experimentally.
Organization. The remainder of our paper is struc-
tured as follows. In Section 2 we discuss related work.
In Section 3 we our de(cid:12)nitions and give background
on groups with e(cid:14)ciently computable bilinear maps.
We then give our construction in Section 4. We then
present our implementation and performance measure-
ments in Section 5. Finally, we conclude in Section 6.
2 Related Work
Sahai and Waters [24] introduced attribute-based
encryption (ABE) as a new means for encrypted ac-
cess control. In an attribute-based encryption system
ciphertexts are not necessarily encrypted to one par-
ticular user as in traditional public key cryptography.
Instead both users’ private keys and ciphertexts will be
associated with a set of attributes or a policy over at-
tributes. A user is able to decrypt a ciphertext if there
is a \match" between his private key and the cipher-
text. In their original system Sahai and Waters pre-
sented a Threshold ABE system in which ciphertexts
were labeled with a set of attributes S and a user’s pri-
vate key was associated with both a threshold param-
eter k and another set of attributes S 0. In order for a
user to decrypt a ciphertext at least k attributes must
overlap between the ciphertext and his private keys.
One of the primary original motivations for this was
to design an error-tolerant (or Fuzzy) identity-based
encryption [27, 7, 12] scheme that could use biometric
identities.
The primary drawback of the Sahai-Waters [24]
threshold ABE system is that the threshold semantics
are not very expressive and therefore are limiting for
designing more general systems. Goyal et al.
intro-
duced the idea of a more general key-policy attribute-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:20 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007In their construction a ci-
based encryption system.
phertext is associated with a set of attributes and a
user’s key can be associated with any monotonic tree-
access structure. 1 The construction of Goyal et al.
can be viewed as an extension of the Sahai-Waters tech-
niques where instead of embedding a Shamir [26] secret
sharing scheme in the private key, the authority embeds
a more general secret sharing scheme for monotonic ac-
cess trees. Goyal et. al. also suggested the possibility
of a ciphertext-policy ABE scheme, but did not o(cid:11)er
any constructions.
Pirretti et al.
[23] gave an implementation of
the threshold ABE encryption system, demonstrated
di(cid:11)erent applications of attribute-based encryption
schemes and addressed several practical notions such as
key-revocation. In recent work, Chase [11] gave a con-
struction for a multi-authority attribute-based encryp-
tion system, where each authority would administer a
di(cid:11)erent domain of attributes. The primary challenge
in creating multi-authority ABE is to prevent collusion
attacks between users that obtain key components from
di(cid:11)erent authorities. While the Chase system used the
threshold ABE system as its underlying ABE system at
each authority, the problem of multi-authority ABE is
in general orthogonal to (cid:12)nding more expressive ABE
systems.
In addition, there is a long history of access control
for data that is mediated by a server. See for exam-
ple,
[18, 14, 30, 20, 16, 22] and the references therein.
We focus on encrypted access control, where data is
protected even if the server storing the data is compro-
mised.
Collusion Resistance and Attribute-Based En-
cryption The de(cid:12)ning property of Attribute-Based
Encryption systems are their resistance to collusion
attacks. This property is critical for building cryp-
tographic access control systems; otherwise, it is im-
possible to guarantee that a system will exhibit the
desired security properties as there will exist devastat-
ing attacks from an attacker that manages to get a hold
of a few private keys. While we might consider ABE
systems with di(cid:11)erent (cid:13)avors of expressibility, prior
work [24, 15] made it clear that collusion resistance
is a required property of any ABE system.
Before attribute-based encryption was introduced
there were other systems that attempted to address
access control of encrypted data [29, 8] by using se-
cret sharing schemes
[17, 9, 26, 5, 3] combined with
identity-based encryption; however, these schemes did
not address resistance to collusion attacks. Recently,
1Goyal et al. show in addition how to construct a key-policy
ABE scheme for any linear secret sharing scheme.
Kapadia, Tsang, and Smith [19] gave a cryptographic
access control scheme that employed proxy servers.
Their work explored new methods for employing proxy
servers to hide policies and use non-monontonic access
control for small universes of attributes. We note that
although they called this scheme a form of CP-ABE,
the scheme does not have the property of collusion re-
sistance. As such, we believe that their work should not
be considered in the class of attribute-based encryption
systems due to its lack of security against collusion at-
tacks.
3 Background
We (cid:12)rst give formal de(cid:12)nitions for the security
of ciphertext policy attribute based encryption (CP-
ABE). Next, we give background information on bilin-
ear maps. Like the work of Goyal et al. [15] we de(cid:12)ne
an access structure and use it in our security de(cid:12)ni-
tions. However, in these de(cid:12)nitions the attributes will
describe the users and the access structures will be used
to label di(cid:11)erent sets of encrypted data.
3.1 De(cid:12)nitions
De(cid:12)nition 1 (Access Structure [1]) Let
fP1; P2; : : : ; Png be a set of parties. A collection
A (cid:18) 2fP1;P2;:::;Png is monotone if 8B; C : if B 2 A and
B (cid:18) C then C 2 A. An access structure (respectively,
monotone access structure) is a collection (respec-
tively, monotone collection) A of non-empty subsets
of fP1; P2; : : : ; Png, i.e., A (cid:18) 2fP1;P2;:::;Pngnf;g. The
sets in A are called the authorized sets, and the sets
not in A are called the unauthorized sets.
In our context, the role of the parties is taken by
the attributes. Thus, the access structure A will con-
tain the authorized sets of attributes. We restrict our
attention to monotone access structures. However, it
is also possible to (ine(cid:14)ciently) realize general access
structures using our techniques by having the not of an
attribute as a separate attribute altogether. Thus, the
number of attributes in the system will be doubled.
From now on, unless stated otherwise, by an access
structure we mean a monotone access structure.
An ciphertext-policy attribute based encryption
scheme consists of four fundamental algorithms: Setup,
Encrypt, KeyGen, and Decrypt. In addition, we allow
for the option of a (cid:12)fth algorithm Delegate.
Setup. The setup algorithm takes no input other
than the implicit security parameter.
It outputs the
public parameters PK and a master key MK.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:20 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007encryption
algorithm
Encrypt(PK; M; A). The
takes as input the public parameters PK, a message
M , and an access structure A over the universe of
attributes. The algorithm will encrypt M and produce
a ciphertext CT such that only a user that possesses a
set of attributes that satis(cid:12)es the access structure will
be able to decrypt the message. We will assume that
the ciphertext implicitly contains A.
Key Generation(MK; S). The key generation al-
gorithm takes as input the master key MK and a set of
attributes S that describe the key. It outputs a private
key SK.
Decrypt(PK; CT; SK). The decryption algorithm