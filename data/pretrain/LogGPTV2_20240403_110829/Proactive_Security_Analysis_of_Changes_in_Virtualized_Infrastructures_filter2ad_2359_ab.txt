As we are focusing on isolation properties, we further need
to determine information ﬂows in the system.
3.1 Modeling of Infrastructure Changes
We model the impact of management operations in terms of
infrastructure changes using graph transformations. We will
brieﬂy introduce the formalism and describe our methodology
how we can create a model for a practical system, followed by
concrete examples of models for speciﬁc VMware operations.
3.1.1 Modeling Operations as Graph Transformations
We model each operation as a graph transformation rule,
which takes the graph representation of the virtualized in-
Table 1: Overview of Security-Critical VMware Operations [27].
Operation
AddPortGroup
UpdatePortGroup
RemovePortGroup
UpdateNetworkConﬁg Updates the network conﬁguration of a host; another means of creating or updating port groups. Network Isolation
CreateVM
Description
Creates a new port group on a given host and virtual switch, with a name and VLAN ID.
Updates the name and/or VLAN ID of an existing port group on a given host.
Removes an existing port group on a host given by name.
Policy Impact
Network Isolation
Network Isolation
Dependability
Creates a VM on a host with virtual storage and network resources (modeled as sub-operations). Compute Placement
Creates a virtual disk for a VM with ﬁle backend.
Creates a virtual NIC connected to a port group.
Updates a VM’s conﬁguration, including storage and network resources.
Storage Isolation
Network Isolation
AddVirtualDisk
AddVirtualNic
ReconﬁgVM
UpdateVirtualDisk Updates the ﬁle backend of a virtual disk.
UpdateVirtualNic
Connect a virtual NIC to a new port group.
Storage Isolation
Network Isolation
frastructure as input and transforms it into a modiﬁed one.
According to [23], we deﬁne a graph transformation rule as
the following.
Deﬁnition 1 (Graph Transformation Rule)
A graph transformation rule p, also called a production
rule, has the form p : L r−→ R, where graphs L and R are
denoted the left hand side (LHS) and right hand side (RHS),
respectively. The production morphism r establishes a partial
correspondence between elements in the LHS and the RHS
of a production, which determines the nodes and edges that
have to be preserved, deleted, or created. A match m ﬁnds
an occurrence of L in a given graph G, then G p,m==⇒ H is an
application of a production p, where H is a derived graph.
H is obtained by replacing the occurrence of L in G with R.
An important extension to graph transformations are appli-
cation conditions that express constraints on the applicabil-
ity of a production rule, which includes constraints on the
attribute values of vertices. Further, parameterized rules
capture expected attribute values as parameters that need to
be satisﬁed by the application condition. This is important
for our model as management operations are parameterized.
The Operations Transition Model consists of graph trans-
formation rules and captures how operations change the
topology and conﬁguration of a virtualized infrastructure.
Deﬁnition 2 (Operations Transition Model)
The Operations Transition Model consists of named and
attribute-parameterized graph production rules which is writ-
ten as the set P = {p1, . . . , pn} . Each rule corresponds to
a parameterized management operation op and models the
eﬀects of op on the infrastructure as graph modiﬁcations on
the Realization graph model. The name of each production
rule corresponds to the name of the management operation.
The ordering of the rules is not relevant for the modeling as
the rules model the operations independently. However, the
ordering becomes important for the analysis (cf. §4) which
performs an ordered application of a subset of rules with
parameter values on a given infrastructure model graph.
3.1.2 Modeling Methodology
For any existing real-world virtualized infrastructure like
VMware, the API documentation does not oﬀer a precise
formal deﬁnition and model, but rather a semi-formal de-
scription of the operations. A contribution of this paper is to
create a formal model that allows for precise statements to
be made and proved or refuted. It is of course not possible
to formally prove that our formal model captures the infor-
mal description, however there is a methodology to obtain a
“good” model by combining the following directions:
1) API Documentation: We follow the API documen-
tation that describes for each operation the functionality,
the required parameters as well as the preconditions and
eﬀects that the operation has on the infrastructure. For
the relevant operations, we determine the parameters that
are security-critical and which will have an impact on the
model when the operation is performed. Overall, the API
documentation provides us with a list of relevant operations,
their parameters, and a high-level idea of their impact on
the infrastructure.
2) Infrastructure Change Assessment: In order to
understand how the infrastructure is changed in detail by an
operation, we inspect the conﬁguration of the infrastructure
before and after the operation has been issued. For each oper-
ation that we have selected based on the API documentation,
we vary the parameter values to determine their diﬀerent
eﬀects, if applicable. For example, varying the VLAN identi-
ﬁer parameter of a virtual network re-conﬁguration preserves
the same eﬀect, whereas varying the device conﬁguration of a
new virtual machine creation may lead to diﬀerent topology
changes, e.g., attaching the VM to a diﬀerent virtual network.
We do not only study the diﬀerences in the conﬁguration
after each operation, we also investigate the diﬀerences in the
resulting graph models. The changes from the graph model
of the conﬁguration before the operation was performed and
the graph model after the operation guides us how a graph
production rule of the operation may look like. The graph
model changes include new and deleted vertices and edges,
as well as attribute changes.
3) Validation with Administrative Tasks: Finally,
we also performed common administrative actions from the
graphical management client, which itself issues the docu-
mented API operations. We intercepted and analyzed these
issued operations and discovered that the management client
makes use of other operations from the API to perform the
same task. For example, to change the VLAN identiﬁers
of a virtual network component the usual operation is Up-
datePortGroup, however the client software issues the much
more general operation UpdateNetworkConﬁg. We extended
our model to include these other variations of performing
security-critical tasks.
3.1.3 Modeling of a Practical System
The VMware API (v5.0) consists of 545 methods [27], but
many of these operations do not aﬀect the topology or con-
ﬁguration of the virtualized infrastructure, because they deal
with VMware-speciﬁc management and operations aspects
such as licensing and patch management, handling of admin-
istrative sessions, or diagnostics and alarms. We identiﬁed 95
operations that modify the topology or conﬁguration of the in-
frastructure. We model a security-critical subset of VMware
management operations as listed in Table 1, which also in-
dicates potential policy violations (cf. §3.3). We consider
53
host
name
real
real
0
string
storagepool
name
2
string
real
real
vm
name
real
real
1
string
real
real
name
vdisk
(a) AddVirtualDisk
ﬁle
3
string
host
name
0
string
real
vswitch
real
∀
@
@
portgroup
real
vport
vlanId
int
vlanId
vlanId
vlanId
int
3
int
name
name
1
string
2
string
(b) UpdatePortGroup
Figure 2: Storage and network operations modeled
as graph transformation rules in GROOVE.
changes to the virtual compute, network, and storage infras-
tructure, such as the creation of virtual machines, creation
or updates of virtual switches and interfaces, and attachment
of storage to virtual machines. Complex operations, such as
creating VMs, are broken down into sub-operations.
From the subset of operations, we present the production
rules of two operations: The UpdatePortGroup operation
changes the isolation property of a virtual network, as well as
the sub-operation AddVirtualDisk of the CreateVM operation
that connects a new virtual disk to a created VM. The
two examples cover a spectrum of operation classes: First,
operations that create infrastructure elements as well as
updating existing ones; Second, operations that work on
diﬀerent resource types, namely, storage and network.
The production rules are illustrated in Fig. 2. We selected
GROOVE [9], a tool for specifying and applying transfor-
mation rules, as our graph transformation environment and
the rules are shown in its visual notation. Each rule is rep-
resented by a graph that describes both the LHS and RHS
(cf. Def. 1) with the following semantics: Readers (thin
line) are nodes and edges that need to be matched in the
graph for the rule to be applicable and which are preserved
in the transformation, i.e., they belong to both the LHS and
RHS. Creators (bold line) for newly added nodes and edges,
which only belong to the RHS. Erasers (thin dashed) are
nodes and edges that need to be matched, and which will be
deleted by the transformation, i.e., only belong to the LHS.
Embargoes (thick dashed) are nodes and edges that need
to be absent in the graph, in order that the rule matches.
Disk Creation Operation: AddVirtualDisk.
AddVirtualDisk ( s t r i n g hostname ,
s t r i n g vmName , ←(cid:2)
s t r i n g s t o r a g e p o o l ,
s t r i n g f i l e n a m e )
As part of the creation of a virtual machine, a virtual disk
is created and attached to the VM, which is identiﬁed by
a given hostname and the VM name. Virtual disks are
ﬁle-based (given by a ﬁlename), and the ﬁle is residing on
a storage pool, given by a name. The production rule of
Fig. 2a ﬁnds the corresponding subgraph where the names
of host, VM, and storage pool match the rule’s parameters.
New nodes for the virtual disk (vdisk) as well as the ﬁle
backend (ﬁle) are created and connected to the matched
54
subgraph by specifying them as creator elements (visually
thick line). In GROOVE, attributes of a node are represented
by data nodes, visually indicated as ecliptic shapes, that are
connected by a labeled edge, where the label denotes the
attribute name. The numeric superscript on data nodes show
that an attribute value is matched against a rule parameter,
e.g., the host’s name is matched against parameter 0.
Virtual Network Update Operation: UpdatePortGroup.
UpdatePortGroup ( s t r i n g hostname ,
s t r i n g pgName , ←(cid:2)
s t r i n g newPGName ,
i n t newPGVlanId )
Using this operation, an administrator can change the conﬁg-
uration of an existing port group. The port group is identiﬁed
by its name, as well as the host where it resides on, and the
operation allows to change the port group’s name and VLAN
ID. Changing attributes is modeled as changing the edges
to diﬀerent data nodes based on the input parameters. The
VLAN ID is not only contained in the port group nodes, but
also in the associated vport nodes, i.e., virtual switch ports.
Therefore, changing the VLAN ID of the port group also
requires to change all virtual ports associated to that port
group. For this we use the universal quantiﬁer ∀ that applies
a sub-rule, given by nodes connected to the quantiﬁer with @
labeled edges, to all its matches [21]. In this case, it updates
the vlanId attributes of all matching vport nodes.
3.2 Dynamic Information Flow Analysis
Our information ﬂow analysis computes potential infor-
mation ﬂows within the infrastructure, and thus enables the
system to determine isolation failures between tenants. A set
of graph production rules capture trust assumptions on the
isolation of particular infrastructure elements, and construct
the information ﬂow graph by introducing edges that denote
if ﬂow is either permitted or denied.
We are drawing from existing work that computes infor-
mation ﬂow in virtualized infrastructures by using a graph
coloring and traversal approach based on a set of traversal
rules [4]. The traversal rules deﬁne for a pair of connected
Realization model vertex types if the traversal and color-
ing should proceed or not. The rules further consider the
traversal direction, vertex attributes, and the current graph
color. We adapted the existing traversal rules, which capture
best-practices on virtualization and network security, and
formalized them as graph production rules. The challenge of
such a formalization is that a direct encoding of the graph
coloring approach in GROOVE would result in an expensive
blow-up of the state space. Therefore we opted for the con-
struction of an information ﬂow graph instead of performing
a graph coloring. Another challenge is the formalization of
color-dependent traversal rules, which have been used to
model forms of network tunneling such as virtual networks
with VLANs. We model the tunneling with “fast edges” that
connect the logical endpoints of the tunnel directly with
an information ﬂow edge. The fast edge rules capture the
termination properties of the original traversal rules, e.g., the
endpoints must have the same VLAN identiﬁer, as well as the
connectivity condition of the endpoints, i.e., they are mutu-