### Expressing Sandboxing in Machine Code

One significant advantage of implementing sandboxing directly in machine code is the elimination of the need for a trusted compiler. This approach drastically reduces the size of the Trusted Computing Base (TCB) [61] and removes the necessity for cryptographic signatures from the compiler. Besides simplifying security implementation, this method also allows Native Client to be more open to third-party toolchains.

### Comparison with Control-Flow Integrity (CFI)

Compared to Native Client, CFI [1] provides finer-grained control flow integrity. While Native Client only ensures that indirect control flow targets an aligned address in the text segment, CFI can restrict specific control transfers to a more arbitrary subset of known targets. Although this precise control may be useful in some scenarios, such as ensuring the integrity of high-level language translations, it is not necessary for Native Client. Native Client aims to allow arbitrary control flow, including hand-coded assembler, as long as execution remains within known text and targets are aligned. Additionally, CFI incurs an average overhead of 15%, which is three times higher than Native Client's 5% (on SPEC2000). This is due to the longer instrumentation sequences required by CFI, both in terms of size and instruction count.

### Data Sandboxing and Related Mechanisms

XFI [19] extends CFI with data sandboxing, adding further overhead. In contrast, Native Client leverages x86 segments to achieve data integrity without additional cost. Other recent systems, such as DTrace [11], Systemtap [49], and XFI [19], have explored mechanisms for enabling safe side effects with measured trust. NaCl resource descriptors are similar to capabilities in systems like EROS [55], and Singularity channels [30] serve a similar role.

### Isolating Untrusted Kernel Extensions

Several projects have investigated isolating untrusted kernel extensions. SPIN and VINO take different approaches to safety. SPIN uses a type-safe language, Modula-3 [47], and a trusted compiler toolchain, while VINO, like Native Client and the original work by Wahbe et al., employs software fault isolation based on sandboxing of machine instructions. VINO uses a modified compilation toolchain to add sandboxing instructions to x86 machine code, but unlike Native Client, it lacks a binary validator and relies on a trusted compiler. A validator for VINO would be more challenging, as it would need to enforce data reference integrity, which Native Client achieves using 80386 segments.

### Nooks System

The Nooks system [58] enhances operating system kernel reliability by isolating trusted kernel code from untrusted device driver modules using a transparent OS layer called the Nooks Isolation Manager (NIM). Similar to Native Client, NIM uses memory protection to isolate untrusted modules. However, since NIM operates in the kernel, it uses private page tables for each extension module and updates the x86 page table base address, which flushes the Translation Lookaside Buffer (TLB). This suggests an alternative to segment protection used by Native Client. A key difference is that Nooks is designed to protect against unintentional bugs, whereas Native Client must resist deliberate abuse, necessitating mechanisms for reliable x86 disassembly and control flow integrity.

### Virtual-Machine Architectures

Many environments based on virtual-machine architectures provide safe execution and near-native performance [3], [6], [7], [20], [28], [39], [53], [63]. While these systems offer excellent fault isolation, Native Client avoids virtualization to maintain OS and browser neutrality and achieve peak native performance.

### Kernel Extensions for Monitoring

Kernel extensions have been used for operating system monitoring. DTrace [11] incorporates a VM interpreter into the Solaris kernel for safe execution and provides kernel instrumentation points and output facilities similar to Native Client’s safe side effects. Systemtap [49] offers similar capabilities but uses x86 native code for extensions instead of an interpreted language in a VM.

### Trust with Authentication

ActiveX [15] is a prevalent example of using native code in web content. ActiveX controls rely on a trust model, with controls cryptographically signed using Microsoft’s Authenticode system [43]. However, this model depends on users making prudent trust decisions, which is often exploited. Defects in trusted controls can lead to arbitrary code execution, and Microsoft maintains a blacklist of unsafe controls [42]. In contrast, Native Client is designed to prevent such exploitation, even for flawed NaCl modules.

### Conclusions

This paper describes Native Client, a system for incorporating untrusted x86 native code into web applications. It creates a robust barrier against undesirable side effects, supports portability across operating systems and browsers, and includes performance-oriented features like threading and vectorization instructions. The inner sandbox of Native Client is highly robust, and additional redundant mechanisms provide defense-in-depth. Porting existing Linux/gcc code to Native Client is straightforward, and the performance penalty for the sandbox is minimal, especially in compute-bound scenarios. By making Native Client open source, we aim to encourage community scrutiny and contributions, leading to a system with superior safety compared to previous native code web technologies.

### Acknowledgments

We acknowledge the contributions of many individuals to the direction and development of Native Client. The project was conceived by Matt Papakipos, and valuable contributions were made by Jeremy Lau, Brad Nelson, John Grabowski, Kathy Walrath, and Geoff Pike. We also thank Danny Berlin, Chris DiBona, and Rebecca Ward, as well as Sundar Pichai and Henry Bridge for shaping the project direction. Special thanks to Dick Sites for his thoughtful feedback on an earlier version of this paper.

### References

[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-flow integrity: Principles, implementations, and applications. In Proceedings of the 12th ACM Conference on Computer and Communications Security, November 2005.
...
[64] Document Object Model (DOM) Level 1 Specification. Number REC-DOM-Level-1-19981001. World Wide Web Consortium, October 1998.