Boolean return value, and assuming the CMS parser works correctly,
does not contain any exfiltration channel.
7.4 Serialization
When processing complex data formats such as email headers and
bodies, security of parsers and generators is critical. The following
notes are intended to give some assurance that parsing is not an
obstacle to the security of the DC mechanism.
First, we note that serialization of header field names in R must
be done in a limited character set that does not include the separa-
tors ":", "\r" and "\n". This is already specified in [37] (section
2.2, Header Fields). We further note that we assume all header field
values do not include any ":", again as specified in [37] (section
2.2, 3.6.8 et al.) Also, we assume field values are given in "unfolded
form" as specified in [37], i.e. do not include any "\r" or "\n".
These restrictions on character sets are important to guarantee
that serialization (by joining header field names with ":" and DC
string components with "\r\n" and deserialization (by splitting at
":" and "\r\n" resp.) are inverse of each other and thus safe.
Our serialization rules are inspired by DKIM [9] and designed to
be easily processed in legacy email applications. Other serialization
formats are possible, as long as they are well-defined (such that P
and DC strings can be generated reliably by the sender and recip-
ient) and safe (such that there are no collisions when generating
the serialization of two different objects).
8 FALSE POSITIVE EVALUATION
When using encryption contexts with S/MIME or OpenPGP, false
positives would occur whenever an email source code M is changed
during transit into M′ such that DC(M, P) (cid:44) DC(M′, P). False
positives due to benign changes to email headers and body by ser-
vice providers are undesirable, because they might have a negative
impact on the acceptance of the decryption context mitigation.
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1656To evaluate these false positives and their impact on interoper-
ability between email clients and service providers, we followed a
two-step approach:
(1) We evaluated how eleven popular email service providers10
change the email headers and bodies in transit relevant to an
example DC policy. We tested outbound, inbound, and internal
email traffic on a multipart/encrypted email based on PG-
P/MIME [12] and manually evaluated all changes to the email
with respect to the DC policy from Figure 3. As shown in Ta-
ble 4, most changes by the tested providers to emails in transit
are unproblematic, with the exception of Outlook.com.
(2) Additionally, we sent an email similar to Figure 3, which was
encrypted using our modified implementation of Enigmail, over
the same gateways and tried to decrypt it afterwards. Only one
false positive was recorded, and this was caused by well-known
non-standard behaviour of Outlook.com.
Table 4: Evaluation of modifications by email service
providers to email headers and bodies, and their impact on
the tested DC policy from Figure 3.
Inbound
-
-
-
-
(cid:35) M1
(cid:35) H1, H2
-
(cid:35) B2
-
-
-
Outbound
Internal
-
-
-
-
-
-
-
-
-
(cid:35) B1, M1
(cid:35) H3, H4
(cid:18) H5, M3
-
-
-
-
-
-
-
-
-
(cid:35) H1, H2
(cid:35) H3, H4
(cid:18) H5, M3
AOL Mail
FastMail
Gmail
GMX Mail
Hushmail
iCloud
Mail.ru
Outlook.com
Runbox
Yahoo! Mail
Zoho Mail
-
No changes to original headers or body.
Addition of \r\n at the end of the body.
(cid:35) Modifications not changing the DC string.
B1
H1 Modification of letter case in some header fields.
H2
H3
H4
M1 Addition of content-transfer-encoding in each MIME part.
B2
Removal of quotes around boundary parameter in content-type.
Removal of user-agent.
Rewrite of date as Greenwich Mean Time.
Removal of any text before first MIME part.
(cid:18) Modifications changing the DC string.
Rewrite/Merging of (multiple) from and to headers.
Insertion of a new MIME part and modification of existing ones.
H5
M3
8.1 Modifications Not Changing DC
Added headers. As is common in email transport, many new
headers are added by all email providers on inbound, outbound
and internal traffic. For example, Hushmail added a redundant
content-transfer-encoding header to each MIME part (M1), but
10 https://en.wikipedia.org/wiki/Comparison_of_webmail_providers, retrieved on 30
April 2019.
that does not affect the DC. No provider added any of the headers
included in the tested DC policy (from, reply-to, to, and subject).
Deleted headers. One provider (Outlook.com) deleted the header
user-agent on outbound and internal email (H3), presumably for
privacy protection. As this header field is not part of our DC policy,
this deletion does not lead to false positives.
Reordered headers. The decryption context is, similar to DKIM,
sensitive to the order of multiple instances of a header field. Al-
though one provider (Outlook.com) reordered some header fields, it
did not reorder multiple instances of the same header field, so this
reordering does not lead to false positives.
Modified headers. iCloud changed the letter case of some header
fields (H1), which does not affect the DC string due to DKIM canoni-
calization. They also folded some long header lines, again not affect-
ing the DC string due to DKIM canonicalization rules. iCloud also
removed the double-quote characters of the boundary parameter in
the content-type header (H2). We drop the boundary parameter
during canonicalization, thus this modification did not affect the
DC string either. Outlook.com rewrites date in a different timezone
(H4), but this header field is not part of our DC policy.
Body modifications. Hushmail adds an empty line at the end of
the body (B1). Outlook.com strips an explanatory message before
the first MIME part, which can be displayed by email clients not
capable of MIME (B2). These changes do not lead to false positives.
8.2 Modifications Changing DC
Only one out of eleven email service providers tested would lead
to false positives for at least some messages (specifically, outbound
and internal mails). This shows that effective DC policies with broad
compatibility are already possible. Outlook.com modifies email ad-
dresses in several header fields (including from and to, which are
part of our tested DC policy) to always include a display name
(falling back to the email address if no display name is given). It
also merges multiple instances of these header fields to a single
one, joining their content with commas. Although the DC policy
could possibly be modified to find a common canonicalization com-
patible with Outlook.com, merely excluding the display names from
the DC policy could enable spoofing attacks [29]. Furthermore,
Outlook.com corrupts the PGP/MIME structure in our second test
case by changing content-type from multipart/ encrypted to
multipart/mixed, and prepending an additional (otherwise empty)
MIME part text/plain. This behaviour is well-known and un-
changed for many years, requiring custom work-arounds in email
clients supporting OpenPGP. In fact, Thunderbird recognizes such
emails and offers to “repair” them by reverting the changes done
by Outlook and overwriting the corrupt email on the IMAP server,
restoring the original context of the email for functional reasons.
8.3 Additional Findings
During testing, we also received some bounce emails due to in-
termittent delivery failures. Bounce emails contain a copy of the
original mail as message/rfc822 MIME part. In the case of the
OpenPGP extension Memory-Hole,11 that implements protected
headers, we observed that the protected headers were decrypted
11https://github.com/autocrypt/memoryhole retrieved 2019-04-30
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1657and applied to the bounce mail, thereby changing the subject to
that of the original email. This faulty behaviour would have been
prevented by applying a decryption context policy that includes
m=mimepath, because the changes to the MIME context would have
prevented the decryption of the original email.
We also found that Outlook.com filters out non-standard header
fields (such as Autocrypt or Decryption-Context) from outbound
and internal email, unless prefixed with X-. To overcome this,
the Decryption-context header could initially be provided as
X-Decryption-Context, until it is widely adopted and whitelisted.
Outside of our tests, we found that Gmail replaces the value of
From with the sender’s account data from the SMTP login. This
well-intentioned protection against address spoofing can potentially
interfere with DC policies that include from if the email client of
the user is misconfigured.
9 RELATED WORK
OpenPGP and S/MIME. The chosen-ciphertext attack described
by Katz and Schneier in 2000 [22] opened the research in the context
of email security. In 2001, Davis described “surreptitious forward-
ing” attacks [10] in which an attacker can re-sign or re-encrypt the
original email and forward it onto a third person. In 2002, Perrin
presented a downgrade attack, which removes the integrity protec-
tion turning a SEIP into a SE data packet [32]. In 2015, Magazinius
showed that this downgrade attack is still applicable in practice [27].
In 2002, Klima and Rosa published a fault attack on the OpenPGP
format which led to disclosure of the private RSA and DSA keys [24].
The attack requires a powerful adversary, who has access to the lo-
cal machine and can perform modifications in the secured OpenPGP
key format. In 2005, Mister and Zuccherato described an adaptive
chosen-ciphertext attack [28] exploiting OpenPGP’s integrity quick
check. The attacker needs 215 queries to decrypt two plaintext bytes
per block. In 2018, Poddebniak et al. published EFAIL attacks [33].
EFAIL describes two attacks: EFAIL-DE attacks, which have served
as a motivation for our work, and malleability gadget attacks. The
latter attacks exploit the malleability of CBC and CFB modes of op-
erations used in OpenPGP and S/MIME, which allow the attacker to
insert exfiltration channels directly into ciphertexts. In contrast to
EFAIL-DE attacks, malleability gadgets can be directly mitigated by
using authenticated encryption. In 2019, Müller et al. showed that
also email signatures suffer from serious attacks [29]. These attacks
allow an attacker to modify emails without violating signature vali-
dation. Along with the analyses of novel attacks, the research in the
area of email security has also concentrated on various usability
problems, especially in the context of OpenPGP [15, 16, 40, 42, 46].
Related chosen-ciphertext and exfiltration attacks. Message-
level security has been introduced into many relevant standards,
including XML [11], PDF [19], or JSON. These standards have also
become targets of chosen-ciphertext attacks. In 2011, Jager and
Somorovsky presented an adaptive chosen-ciphertext attack on
XML Encryption [21]. Their attack exploits the CBC malleability
and the high flexibility of the XML Encryption standard, which
allows the attacker to force the server to decrypt ciphertexts at any
position in the XML document [43]. In 2019, Müller et al. presented
exfiltration attacks in the context of PDF files [30]. Similarly to
EFAIL, their attacks consider CBC malleability as well as EFAIL-
DE attacks. Our decryption context countermeasures may also be
applicable to prevent these attacks.
Protection of SMTP context. The necessity to protect the SMTP
context of emails has long been recognized by the community.
For S/MIME, experimental RFC 7508 [6] provides integrity pro-
tection of email headers for signing only, which leaves encrypted
emails unprotected. For OpenPGP, the focus has historically been
on confidentiality and privacy, although more recently awareness
of integrity aspects has increased. The latest (incomplete) effort, a
draft RFC on protected headers that emerged from the Autocrypt
community,12 gives a good overview on the history and recognizes
the problem of REPLY attack, which are referred to as participant
modification attacks. However, as any protected headers in encrypted
emails are part of the ciphertext, decryption must happen before
the protected headers are available, leaving a window of opportu-
nity for attacks where the plaintext of the email is processed in a
possibly malicious SMTP context.
10 CONCLUSIONS AND FUTURE WORK
Contrary to common belief and the security advice given in S/MIME
4.0, exfiltration attacks are not solely an HTML problem, as differ-
ent attack vectors like REPLY attacks have shown. Instead, these
vulnerabilities are inherent to the complex email ecosystem. To
tame the complexity of this ecosystem with respect to decryption,
we have proposed to enable decryption only in a clearly specified
decryption context, and by implementing a prototype version have
shown that the false positive rate is very low.
In this paper, we only covered the SMTP and MIME contexts of
an email. However, below the MIME level, there are more structured
data formats like CMS or OpenPGP which may allow for exfiltration
attacks. For example, we may wrap the original EnvelopedData
CMS object into another EnvelopedData objects, together with two
HTML sibling objects. In such a case it would be important that for
each layer of encryption, a novel decryption context is derived.
In addition, decryption contexts may be applicable for applica-
tions other than email: for document encryption (MS Office, PDF,
OpenPGP file encryption, XML Encryption), to protect against back-
wards compatibility attacks (as mentioned in [20]), or for novel
cryptographic constructions. To give only one example for the last
point; digital signatures can no longer be removed or replaced in an
encrypt-then-sign construction if the public signing key is included
in the decryption context of the ciphertext.
ACKNOWLEDGEMENTS
Marcus Brinkmann was supported by the German Federal Ministry
of Economics and Technology (BMWi) project “Industrie 4.0 Recht-
Testbed” (13I40V002C). Jens Müller was supported by the research
training group “Human Centered System Security”, sponsored by
the state of North Rhine-Westfalia. In addition, this work was sup-
ported by the Deutsche Forschungsgemeinschaft (DFG, German
Research Foundation) under Germany’s Excellence Strategy - EXC
2092 CASA - 390781972. We thank Phil Zimmermann for his com-
ments, and the anonymous referees and our shepherd Tobias Fiebig
for improving the final version of the paper.