tar -zxvf databend-x86_64.tar.gz -C /home/databend/databend_software
tar -zxvf bendsql-x86_64-unknown-linux-gnu.tar.gz -C /usr/local/bin/ 
cd /home/databend/databend_software   
echo "  " >> ./configs/databend-query.toml  
echo "[[query.users]]" >> ./configs/databend-query.toml  
echo "name = \"root\"" >> ./configs/databend-query.toml  
echo "auth_type = \"no_password\"" >> ./configs/databend-query.toml  
chown -R databend:databend /home/databend/databend_software  
cd /tmp
# su - databend -c "cargo install bendsql"  
# 启动databend
# su - databend
# cd /home/databend/databend_software
# ./scripts/start.sh
# 连接databend
# su - databend
# bendsql
# 停止databend
# su - databend
# cd /home/databend/databend_software
# ./scripts/stop.sh
cd /usr/lib/postgresql/14  
git clone --depth 1 https://github.com/swida/sqlbench  
cd /usr/lib/postgresql/14/sqlbench  
autoreconf -if  
./configure --with-postgresql="$PGHOME"  
C_INCLUDE_PATH=/usr/include/postgresql make  
C_INCLUDE_PATH=/usr/include/postgresql make install  
apt-get install -y libpcap-dev libnl-genl-3-dev  
cd /tmp  
git clone --depth 1 -b 8.4.0-stable https://github.com/ntop/PF_RING  
cd /tmp/PF_RING/userland/lib  
./configure && make  
make install  
cd /tmp  
git clone --depth 1 https://github.com/heterodb/pg-strom  
cd /tmp/pg-strom/arrow-tools  
PG_CONFIG=/usr/lib/postgresql/14/bin/pg_config C_INCLUDE_PATH=/tmp/PF_RING/kernel make  
PG_CONFIG=/usr/lib/postgresql/14/bin/pg_config C_INCLUDE_PATH=/tmp/PF_RING/kernel make install  
cd /usr/lib/postgresql/14  
git clone --depth 1 https://github.com/apache/madlib  
cd /usr/lib/postgresql/14/madlib  
mkdir build  
cd /usr/lib/postgresql/14/madlib/build  
cmake ..  
make -j 4  
# $BUILD_ROOT/src/bin/madpack -s madlib -p postgres -c [user[/password]@][host][:port][/database] install
# cd /tmp
# git clone --depth 1 -b apache-arrow-12.0.0 https://github.com/apache/arrow.git  
# cd /tmp/arrow/cpp  
# mkdir build-release  
# cd /tmp/arrow/cpp/build-release  
# cmake -DARROW_DEPENDENCY_SOURCE=BUNDLED ..  
# make -j4  
# make install  
# 
# cd /tmp
# apt-get install -y libcurl4-openssl-dev uuid-dev libpulse-dev  
# git clone --depth 1 -b 1.11.91 https://github.com/aws/aws-sdk-cpp  
# cd /tmp/aws-sdk-cpp  
# git submodule update --init --recursive --depth 1  
# mkdir build  
# cd /tmp/aws-sdk-cpp/build  
# cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3;core"  
# make -j4  
# make install  
# 
# cd /tmp
# git clone --depth 1 -b v1.1.0 https://github.com/pgspider/parquet_s3_fdw  
# cd /tmp/parquet_s3_fdw  
# PG_CPPFLAGS="-Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make install  
# echo "/usr/local/lib" >>/etc/ld.so.conf  
# ldconfig 
```  
```  
vi 4.sh  
```  
```  
#!/bin/bash  
set -vx  
echo "* soft    nofile  1024000" >> /etc/security/limits.conf  
echo "* hard    nofile  1024000" >> /etc/security/limits.conf  
echo "* soft    nproc   unlimited" >> /etc/security/limits.conf  
echo "* hard    nproc   unlimited" >> /etc/security/limits.conf  
echo "* soft    core    unlimited" >> /etc/security/limits.conf  
echo "* hard    core    unlimited" >> /etc/security/limits.conf  
echo "* soft    memlock unlimited" >> /etc/security/limits.conf  
echo "* hard    memlock unlimited" >> /etc/security/limits.conf  
```  
```  
vi 5.sh  
```  
```  
#!/bin/bash  
set -vx  
export PG_HOME=/var/lib/postgresql  
. $PG_HOME/.bash_profile  
initdb -D $PGDATA -U postgres -E UTF8 --lc-collate=C --lc-ctype=en_US.UTF8  
cd $PGDATA  
echo "host all all 0.0.0.0/0 scram-sha-256" >> ./pg_hba.conf  
echo "listen_addresses = '0.0.0.0'" >> ./postgresql.auto.conf		  
echo "port = 1921" >> ./postgresql.auto.conf				  
echo "max_connections = 2000" >> ./postgresql.auto.conf			  
echo "unix_socket_directories = '., /var/run/postgresql'" >> ./postgresql.auto.conf	  
echo "shared_buffers = 128MB" >> ./postgresql.auto.conf			  
echo "dynamic_shared_memory_type = posix" >> ./postgresql.auto.conf	  
echo "vacuum_cost_delay = 0" >> ./postgresql.auto.conf			  
echo "bgwriter_delay = 20ms" >> ./postgresql.auto.conf			  
echo "bgwriter_lru_maxpages = 500" >> ./postgresql.auto.conf		  
echo "bgwriter_lru_multiplier = 5.0" >> ./postgresql.auto.conf		  
echo "max_parallel_workers_per_gather = 0" >> ./postgresql.auto.conf	  
echo "synchronous_commit = off" >> ./postgresql.auto.conf		  
echo "wal_compression = on" >> ./postgresql.auto.conf		  
echo "wal_writer_delay = 10ms" >> ./postgresql.auto.conf		  
echo "max_wal_size = 1GB " >> ./postgresql.auto.conf  
echo "min_wal_size = 80MB " >> ./postgresql.auto.conf  
echo "random_page_cost = 1.1" >> ./postgresql.auto.conf			  
echo "log_destination = 'csvlog'" >> ./postgresql.auto.conf		  
echo "logging_collector = on" >> ./postgresql.auto.conf		  
echo "log_truncate_on_rotation = on" >> ./postgresql.auto.conf		  
echo "log_timezone = 'Etc/UTC' " >> ./postgresql.auto.conf  
echo "autovacuum = on" >> ./postgresql.auto.conf			  
echo "autovacuum_vacuum_cost_delay = 0ms" >> ./postgresql.auto.conf	  
echo "vacuum_freeze_table_age = 750000000 " >> ./postgresql.auto.conf  
echo "vacuum_multixact_freeze_table_age = 750000000 " >> ./postgresql.auto.conf  
echo "datestyle = 'iso, mdy' " >> ./postgresql.auto.conf  
echo "timezone = 'Etc/UTC' " >> ./postgresql.auto.conf  
echo "lc_messages = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_monetary = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_numeric = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_time = 'en_US.UTF-8'" >> ./postgresql.auto.conf				  
echo "default_text_search_config = 'pg_catalog.english'" >> ./postgresql.auto.conf  
```  
4、准备Dockerfile  
```  
cd ~/pg14  
vi Dockerfile  
```  
```  
FROM --platform=$TARGETPLATFORM debian:11.8  
MAINTAINER digoal zhou "PI:EMAIL"  
ARG TARGETPLATFORM  
ARG BUILDPLATFORM  
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM"  
ENV DEBIAN_FRONTEND=noninteractive TEMP_DIR=/tmp ROOT_HOME=/root PG_HOME=/var/lib/postgresql PG_DATA=/var/lib/postgresql/14/pgdata PGHOME=/usr/lib/postgresql/14  
STOPSIGNAL SIGINT  
COPY --chmod=555 1.sh 2.sh 3.sh 4.sh 5.sh $TEMP_DIR/  
COPY GraphBLAS-3.1.1.tar.gz libduckdb-linux-amd64.zip duckdb_cli-linux-amd64.zip cmake-3.27.4.tar.gz mongo-c-driver-1.17.3.tar.gz json-c-0.15-20200726.tar.gz pg_tiktoken--0.0.1.sql pg_tiktoken.control pg_tiktoken.so lantern_extras--0.0.3.sql lantern_extras.control lantern_extras.so lantern-cli onnxruntime-linux-x64-1.15.1.tgz node-v14.21.3.tar.gz pg_bm25.control pg_bm25.so pg_bm25--0.5.3.sql pg_search.control pg_search.so pg_search--0.0.0.sql pg_sparse.so pg_sparse.control pg_sparse--0.0.0.sql pg_task.so pg_task.index.bc pg_task.control pg_task--1.0.sql pg_idkit--0.2.1.sql pg_idkit.control pg_idkit.so pgdd--0.5.2.sql pgdd.control pgdd.so pghero_3.4.0-1701207987.0382b812.bullseye_amd64.deb plrust-trusted-1.2.7_1.72.0-debian-pg14-amd64.deb pgroll pgmq.control pgmq--1.1.1.sql pgmq.so pg_later.control pg_later.so pg_later--0.0.14.sql vectorize.control vectorize.so vectorize--0.9.0.sql cmake-3.27.9-linux-x86_64.tar.gz libduckdb-src.zip datasketches-1.7.0.zip halo_14.debian11.x86_64.tar.gz proxysql_2.5.5-debian11_amd64.deb pg_analytics.so pg_analytics.control pg_analytics--0.5.3.sql databend-x86_64.tar.gz bendsql-x86_64-unknown-linux-gnu.tar.gz $TEMP_DIR/
RUN mkdir /tmp/pg_task 
COPY pg_task /tmp/pg_task 
RUN $TEMP_DIR/1.sh  
RUN $TEMP_DIR/2.sh  
RUN $TEMP_DIR/3.sh  
# WORKDIR $TEMP_DIR  
# RUN apt install -y libtinfo5 build-essential ninja-build python3  
# RUN git clone --depth 1 -b v3.1.7 https://github.com/plv8/plv8  
# WORKDIR $TEMP_DIR/plv8  
# RUN USE_ICU=1 USE_PGXS=1 make  
# RUN USE_ICU=1 USE_PGXS=1 make install  
#  
# WORKDIR $TEMP_DIR  
# RUN git clone --depth 1 -b apache-arrow-12.0.1 https://github.com/apache/arrow.git  
# WORKDIR $TEMP_DIR/arrow/cpp  
# RUN mkdir build-release  
# WORKDIR $TEMP_DIR/arrow/cpp/build-release  
# RUN cmake -DARROW_DEPENDENCY_SOURCE=BUNDLED ..  
# RUN make -j4  
# RUN make install  
#  
# WORKDIR $TEMP_DIR  
# RUN apt install -y libcurl4-openssl-dev uuid-dev libpulse-dev  
# RUN git clone --depth 1 -b 1.9.263 https://github.com/aws/aws-sdk-cpp  
# WORKDIR $TEMP_DIR/aws-sdk-cpp  
# RUN git submodule update --init --recursive --depth 1  
# RUN mkdir build  
# WORKDIR $TEMP_DIR/aws-sdk-cpp/build  
# RUN cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3;core"  
# RUN make -j4  
# RUN make install  
#  
# WORKDIR $TEMP_DIR  
# RUN git clone --depth 1 -b v1.0.0 https://github.com/pgspider/parquet_s3_fdw  
# WORKDIR $TEMP_DIR/parquet_s3_fdw  
# RUN PG_CPPFLAGS="-Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# RUN PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# RUN PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make install  
# RUN echo "/usr/local/lib" >>/etc/ld.so.conf  
# RUN ldconfig  
ENV ORACLE_BASE /usr/lib/postgresql/14/lib  
WORKDIR $ORACLE_BASE  
COPY instantclient_12_2/libclntsh.so.12.1 .  
RUN ln -s libclntsh.so.12.1 libclntsh.so  
RUN mkdir -p oracle/network/admin  
COPY instantclient_12_2 ./oracle  
RUN echo "export LD_LIBRARY_PATH=\$PGHOME/lib/oracle:\$LD_LIBRARY_PATH" >>$PG_HOME/.bash_profile  
RUN echo "export ORACLE_HOME=\$PGHOME/lib/oracle" >>$PG_HOME/.bash_profile  
RUN echo "export TNS_ADMIN=\$ORACLE_HOME/network/admin/" >>$PG_HOME/.bash_profile  
RUN echo "export LD_LIBRARY_PATH=\$PGHOME/lib/oracle:\$LD_LIBRARY_PATH" >>$ROOT_HOME/.bashrc  
RUN echo "export ORACLE_HOME=\$PGHOME/lib/oracle" >>$ROOT_HOME/.bashrc  
RUN echo "export TNS_ADMIN=\$ORACLE_HOME/network/admin/" >>$ROOT_HOME/.bashrc  
RUN . $ROOT_HOME/.bashrc  
RUN echo "/usr/lib/postgresql/14/lib/oracle" >> /etc/ld.so.conf  
RUN echo "/usr/local/lib" >> /etc/ld.so.conf  
RUN echo "/usr/lib/postgresql/14/lib" >> /etc/ld.so.conf  
RUN ldconfig  
WORKDIR $TEMP_DIR  
# RUN apt install -y libsqlite3-dev  
RUN git clone --depth 1 https://github.com/ossc-db/dblink_plus  
WORKDIR $TEMP_DIR/dblink_plus  
RUN cp -r /usr/lib/postgresql/14/lib/oracle/sdk/include/* ./  
RUN PG_CFLAGS=-I/usr/lib/postgresql/14/lib/oracle/sdk/include PG_LDFLAGS=-L/usr/lib/postgresql/14/lib/oracle USE_PGXS=1 make  
RUN PG_CFLAGS=-I/usr/lib/postgresql/14/lib/oracle/sdk/include PG_LDFLAGS=-L/usr/lib/postgresql/14/lib/oracle USE_PGXS=1 make install  
# RUN rm -rf $TEMP_DIR/*  
RUN $TEMP_DIR/4.sh  
USER postgres  
RUN $TEMP_DIR/5.sh
WORKDIR $PG_HOME  
# RUN wget -T 36000 -t 0 --waitretry=5 https://github.com/duckdb/duckdb/releases/download/v0.9.2/duckdb_cli-linux-amd64.zip  
# RUN curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/duckdb/duckdb/releases/download/v0.9.2/duckdb_cli-linux-amd64.zip -o duckdb_cli-linux-amd64.zip  
RUN cp $TEMP_DIR/duckdb_cli-linux-amd64.zip $PG_HOME/  
RUN unzip -d . duckdb_cli-linux-amd64.zip
RUN cp $TEMP_DIR/pgroll $PG_HOME/ 
USER root  
WORKDIR $ROOT_HOME  
EXPOSE 1921
EXPOSE 3000
EXPOSE 8080
EXPOSE 80 
EXPOSE 3306 
ENTRYPOINT ["su", "-", "postgres", "-c", "/usr/lib/postgresql/14/bin/postgres -D \"/var/lib/postgresql/14/pgdata\""]  
```  
5、配置ignore文件  
```  
cd ~/pg14  