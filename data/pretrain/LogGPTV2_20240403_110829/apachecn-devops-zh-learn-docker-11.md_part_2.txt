在这里，我们看到了一个永远失败的任务:
![](img/659dc0d2-55dc-494d-8d15-5f1b41f91045.png)
Permanent failure of task
如果任务没有恢复，并且在重试三次(或您定义的次数)后，SwarmKit 首先向任务的容器发送`SIGTERM`，如果 10 秒后超时，它将发送`SIGKILL`信号。
我们刚刚学习了如何在其映像的 Dockerfile 中定义服务的运行状况检查。但这不是唯一的办法。我们还可以在一个栈文件中定义运行状况检查，我们使用该文件将我们的应用部署到 Docker Swarm 中。下面是这样一个栈文件的简短片段:
```
version: "3.5"
services:
  web:
    image: example/web:1.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
...
```
在这个片段中，我们看到了健康检查相关信息是如何在栈文件中定义的。首先，重要的是要认识到，我们必须为每项服务单独定义健康检查。应用或全局级别没有运行状况检查。
类似于我们之前在 Dockerfile 中定义的，由 SwarmKit 用来执行健康检查的命令是`curl -f http://localhost:3000/health`。我们还有`interval`、`timeout`、`retries`和`start_period`的定义。后四个键值对与我们在 Dockerfile 中使用的相应参数具有相同的含义。如果映像中定义了与运行状况检查相关的设置，则栈文件中定义的设置会覆盖 Dockerfile 中的设置。
现在，让我们尝试使用定义了运行状况检查的服务。在我们的`lab`文件夹中，有一个名为`stack-health.yaml`的文件，内容如下:
```
version: "3.5"
services:
  web:
    image: nginx:alpine
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://localhost"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 15s
```
我们现在要部署的:
```
$ docker stack deploy -c stack-health.yaml myapp
```
我们可以使用`docker stack ps myapp`找到单个任务被部署到哪里。在那个特定的节点上，我们可以列出所有的容器来找到我们栈中的一个。在我的例子中，任务已经部署到`node-3`:
![](img/6648a74a-298e-4a39-8418-1ea593b40230.png)
Displaying the health status of a running task instance
这个截图有趣的是`STATUS`栏。Docker，或者更准确地说是 SwarmKit，已经认识到服务已经定义了健康检查功能，并且正在使用它来确定服务的每个任务的健康状况。
# 反转
有时候，事情并不像预期的那样发展。应用版本中的最后一分钟修复无意中引入了新的 bug，或者新版本显著降低了组件的吞吐量，等等。在这种情况下，我们需要有一个 B 计划，在大多数情况下，这意味着能够将更新回滚到以前的好版本。
与更新一样，回滚必须以不会导致应用中断的方式进行；它需要零停机时间。从这个意义上说，回滚可以被视为反向更新。我们正在安装一个新版本，然而这个新版本实际上是以前的版本。
与更新行为一样，我们可以在栈文件或 Docker 服务`create`命令中声明系统在需要执行回滚时应该如何表现。这里，我们有以前使用过的栈文件，但这次带有一些与回滚相关的属性:
```
version: "3.5"
services:
  web:
    image: nginx:1.12-alpine
    ports:
      - 80:80
    deploy:
      replicas: 10
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 10s
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://localhost"]
      interval: 2s
      timeout: 2s
      retries: 3
      start_period: 2s
```
在这个栈文件中，我们已经定义了关于滚动更新、运行状况检查和回滚期间行为的细节。健康检查被定义为在初始等待时间`2`秒后，指挥者开始每`2`秒轮询一次`http://localhost`上的服务，并在认为任务不健康之前重试`3`次。如果我们计算一下，那么如果一个任务由于错误而不健康，至少需要 8 秒钟才能停止。因此，现在在部署下，我们有了一个新条目`monitor`。此条目定义了新部署的任务应监控多长时间的运行状况，作为是否继续滚动更新中的下一批的决策点。这里，在这个例子中，我们给了它`10`秒。这比我们计算出的发现已部署有缺陷的服务所需的 8 秒稍长。这很好。
我们还有一个新的条目`failure_action`，它定义了如果编排器在滚动更新过程中遇到故障，比如服务不健康，它会做什么。默认情况下，该操作只是停止整个更新过程，并使系统处于中间状态。系统没有停机，因为它是一个滚动更新，并且至少服务的一些健康实例仍在运行，但是一些运行工程师更擅长查看和修复问题。
在我们的例子中，我们将动作定义为`rollback`。因此，在出现故障的情况下，SwarmKit 将自动将所有已经更新的任务恢复到它们以前的版本。
# 蓝绿部署
我们已经在[第 6 章](06.html)、*分布式应用架构、*中抽象地讨论了什么是蓝绿色部署。事实证明，在 Docker Swarm 上，我们无法真正实现任意服务的蓝绿色部署。在 Docker Swarm 中运行的两个服务之间的服务发现和负载平衡是 Swarm 路由网格的一部分，并且不能(容易地)定制。如果**服务 A** 想要调用**服务 B** ，那么 Docker 会隐式地完成这一切。给定目标服务的名称，Docker 将使用 Docker DNS 服务将该名称解析为一个**虚拟 IP** ( **VIP** )地址。当请求以 VIP 为目标时，Linux IPVS 服务将使用 VIP 在 Linux 内核 IP 表中进行另一次查找，并将请求负载平衡到 VIP 所代表的服务任务的物理 IP 地址之一，如下图所示:
![](img/afd484e5-6ec3-4021-be39-511a69ab2b12.png)
How service discovery and load balancing work in Docker Swarm
不幸的是，没有简单的方法可以拦截这种机制，并用自定义行为来替换它。但是这需要考虑到**服务 B** 的真正蓝绿部署，这是我们示例中的目标服务。正如我们将在[第 13 章](13.html)、*中看到的，使用 Kubernetes 部署、更新和保护应用，* Kubernetes 在这方面更加灵活。
也就是说，我们可以始终以蓝绿色的方式部署面向公众的服务。我们可以使用互锁 2 及其第 7 层路由机制来实现真正的蓝绿色部署。
# 金丝雀释放
从技术上讲，滚动更新是一种金丝雀式的发布。但是由于它们没有接缝，你可以在系统中插入定制的逻辑，滚动更新只是加那利版本的一个非常有限的版本。
真正的金丝雀版本要求我们对更新过程有更精细的控制。此外，真正的金丝雀版本不会关闭旧版本的服务，直到 100%的流量通过新版本。在这方面，它们被视为蓝绿部署。
在加那利发布场景中，我们不仅希望使用健康检查等因素作为决定是否通过新版本的服务输送越来越多流量的因素，而且我们还希望在决策中考虑外部输入，例如日志聚合器收集和聚合的指标或跟踪信息。可以用作决策者的例子是符合**服务级别协议** ( **服务级别协议**，即如果服务的新版本显示响应时间超出公差带。如果我们向现有服务添加新的功能，就会发生这种情况，但是这种新功能会降低响应时间。
# 机密
机密用于以安全的方式处理机密数据。群体机密在静止和运输中是安全的。也就是说，当一个新的机密在一个管理器节点上创建时，它只能在一个管理器节点上创建，它的值被加密并存储在 raft 共识存储中。这就是为什么它在休息时是安全的。如果一个服务获得一个分配给它的机密，那么管理器从存储中读取该机密，解密它，并将其转发给所有容器，这些容器是请求该机密的 Swarm 服务的实例。由于群中的节点到节点通信使用的是相互的**传输层安全性** ( **TLS** )，因此机密值虽然被解密，但在传输过程中仍然是安全的。管理器仅将机密转发给运行服务实例的工作节点。机密随后作为文件装入目标容器。每个机密对应一个文件。机密的名称将是容器内文件的名称，机密的值是相应文件的内容。机密从不存储在工作节点的文件系统中，而是使用`tmpFS`装载到容器中。默认情况下，机密在`/run/secrets`装载到容器中，但是您可以将其更改为任何自定义文件夹。
# 创造机密
首先，让我们看看我们如何实际创建一个机密:
```
$ echo "sample secret value" | docker secret create sample-secret - 
```
该命令创建一个名为`sample-secret`的机密，值为`sample secret value`。请注意`docker secret create`命令末尾的连字符。这意味着 Docker 期望机密的值来自标准输入。这正是我们通过将值`sample secret value`输入到`create`命令中所做的。
或者，我们可以使用一个文件作为机密值的来源:
```
$ docker secret create other-secret ~/my-secrets/secret-value.txt
```
这里，名为`other-secret`的机密的值是从文件`~/my-secrets/secret-value.txt`中读取的。一旦机密被创造出来，就没有办法获得它的价值。例如，我们可以列出我们所有的机密，我们将获得以下截图:
![](img/795fcdac-ec3b-4fe3-b845-6b32bf65f399.png)
List of all secrets
在这个列表中，我们只看到机密的 ID 和名称加上一些其他元数据，但是机密的实际值是不可见的。我们也可以使用 inspect on a secret，例如，获取更多关于`other-secret`的信息:
![](img/1ff748b4-5f6d-4fca-9e50-e932895c6109.png)
Inspecting a swarm secret
即使在这里，我们也无法找回机密的价值。这当然是有意的，机密就是机密，因此需要保密。如果我们对 Docker 开箱即用的产品不满意，我们可以根据需要为机密分配标签，甚至可以使用不同的驱动程序来加密和解密机密。
# 使用机密
机密被成群运行的服务使用。通常，机密是在创建时分配给服务的。因此，如果我们想要运行一个名为`web`的服务，并为其分配一个机密，`api-secret-key,`的语法如下所示:
```
$ docker service create --name web \
 --secret api-secret-key \
 --publish 8000:8000 \
 fundamentalsofdocker/whoami:latest
```
该命令基于映像`fundamentalsofdocker/whoami:latest`创建名为`web`的服务，将容器港口`8000`发布到所有群节点上的港口`8000`，并为其分配机密`api-secret-key`。
只有在群中定义了名为`api-secret-key`的机密时，这才会起作用，否则文本`secret not found: api-secret-key`会产生错误。因此，让我们现在创建这个机密:
```
$ echo "my secret key" | docker secret create api-secret-key -
```
现在，如果我们重新运行服务`create`命令，它将成功:
![](img/b138cb0d-5fa1-4565-850f-cbe91f135809.png)
Creating a service with a secret
我们现在可以做一个`docker service ps web`来找出在哪个节点上部署了唯一的服务实例，然后执行到这个容器中。在我的例子中，实例已经被部署到`node-3,`中，因此我 SSH 到该节点中:
```
$ docker-machine ssh node-3
```
然后，我列出该节点上的所有容器，以找到属于我的服务的一个实例，并复制其容器 ID。然后，我们可以运行以下命令，以确保该机密确实可以在容器内明文包含机密值的预期文件名下获得:
```
$ docker exec -it  cat /run/secrets/api-secret-key
```
再一次，在我的例子中，这看起来像这样:
![](img/6e42c669-93b3-4b06-95c6-ee0c542e87a9.png)
A secret as a container sees it
如果出于某种原因，Docker 在容器内装载机密的默认位置不为您所接受，您可以定义一个自定义位置。在下面的命令中，我们将机密挂载到`/app/my-secrets`:
```
$ docker service create --name web \