DxZDe
aigisal valse
alue
0000 0000 0000 0000| 1815 8813 8081 3789 9478 9508 $ 
C
Hely
图30-13第二处Patch位置
第3个陷阱：由于这题的I2C协议不是标准的TWI协议，因此会导
致TWCR标志位始终不是0，还是会卡在sub_9F处，所以将前面那个
循环全部nop掉即可，如图30-14所示。
最后，就能成功断在301地址上了，如图30-15所示。
动态调试很容易就能看出来，这里的sub38B是比较了38个字节
的前5个是否为“flag”，以及最后一个字节是否为"”，接着跟踪
需要注意的是，AVR为哈弗结构，数据和指令是分开的，要看读入
buffer的内存变化。区块要选择Data，如图30-16所示。
---
## Page 1108
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1108/1144
10c_2F4:
；No Operation
nop
nop
；No Operation
nop
；No Operation
nop
；No Operation
dou
；No Operation
dou
No Operation
nop
；No
Operation
nop
；No Operation
nop
；No Operation
nop
；No Operation
nop
;No Operation
dou
；No Operation
dou
；No Operation
Anou
r24,r2
;Copy Register Word
ldi
r22,
0x60
；Load Innediate
ldi
r23,
0
；Load Innediate
ldi
r20,
5
;Load Innediate
ldi
r21,
；Load Innediate
rcall
sub_38B
;Relative Call Subroutine
sbiw
r24,0
Subtract Innediate fron Word
breq
10C_30A
;Branch if Equal
图30-14
第三处patch位置
---
## Page 1109
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1109/1144
BFDE
OUT
0x3E.
R29
000
BEOF
SFCD
OUT
100
0x3D, R28
Ox3F.R0
Out to1/01ocation
DE15
RCALL
LDI
PC-
0x01EA
Relative call subroutine
02EE
E010
E000
LDI
R16,
0x00
Load innediate
Load innediate
12EF
2F0
011E
8016
MOVW
R2.R28
Copy register pair
1631
290
Carry
SOP
Add with carry
0000
0000
NOP
No
operation
00002F6
J0UL
NOP
operat1on
0000
NOP
NO
NO
operat1on
02F8
0000
NOP
No
oper at1.on
6.470
0000
NOP
No
operat1.on
02FA
0000
NOP
No
operation
02FB
0000
NOP
No
operation
operation
000C
0000
NOP
NOP
No
No
operation
operation
02FE
0000
0000
NOP
NOP
No
No
operation
0000
BOP
Nooperation
operation
01C1
660
LDI
R24,R2
Copy register pair
E070
LDI
Ox0C
Load innediate
E045
0903
ITT
R20,
0.0%0 *12%
UcUC
Load imnediate
0084
RCALI
PC+0x0085
Relative call subroutine
Load 1nnediste
9700
FOO5
RTES
SREQ
R24, 0ac00
Branch if equal
Subtract imnediate fron word
C059
斯
PC+D
Relative junp
18E
LDD
R24.Y+38
Load indirect
with displacement
3781
CPI
24.0x7t
Branch if equal
Coapare vith ianediate
FOOS
RTMEP
BREQ
056
Relative jup
mOTW
R24, R2
图30-15
需要分析的断点位置
63
ANDI
ORI
22
R23.
0x5:
Dx33
Logical AND with inmediate
Logical OR vith inmediate
00
73
120
ORI
R16.
Logical OR vith inmediate
61
R22.
Dx91
Logical OR vith imediate
NTT
R27
nvFQ
4
plug-in can stil be used if y
Data
8/16abcAdde:0x100
Co16
V
a128.xml
AB1F5C733AA719EC2360483107492
3猎地
F.确男换咽
000120
000130
C5
9B2A0A51D4
73
BED5E91E00000000
续.Q缺？
000140
00
23 33 23 33 33 33 33 33 33 33 33 23 33 23 33
mation.
000150
FTFEFETEFTFE
OOOL6OTTTETETETETTTETEYE TETETETETETETT
FEETTEEEFEETTE
OOOIBOFTFEFEFEFEFE FEFEFEFETEFEFEFEFEET
000170
FT
YEYETEFTFT YTFE YEFEYYFYYEFEYY
FT
OOO19OTT TE YE TEYT TT TT FTTE TT TE TT TE TT TE TY
ATmega128
AVR Simulator
Auto Stol
图30-16
AVR
Studio的内存浏览器
---
## Page 1110
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1110/1144
sub_29F和sub_2AD这两个函数都比较简单，一个是将38字节的
前5个和最后1个也就是flag0从输入里去掉，只保留中间的32字节
第二个则是将这32字节进行unhex解码，若输入里面包含非十六进制
（也就是不是0-9a-f之间的），则该位直接为0，最后会得到一个16字
节的buffer。
最终我们可以发现，关键代码如图30-17所示。
loc_314:
47
sbci
31
-0x7C
d
10d
r2e
2+2
2
1dd
Z+3
rs:
-
30
3
r1e
r3e
rae
r5
r3
call
andi
ndr
nd:
25
clr
15
17
---
## Page 1111
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1111/1144
图30-17关键逻辑位置
动态调试一下，很容易发现是进行了什么操作，归纳如下：
((（buffer[]c[)*a[）)&OxFF)^d[)b[）&OxFF）
每一步操作均可逆。其中，cl]、a]、d[]、b是从代码存储区获
取的，这里需要注意的是，不要搞错内存！算法并不难，接下来只要
逆回去就可以得到flag了。解题的Python脚本具体如下：
#/usr/bin/envpython
importgmpy2
a=[32441,4865,4861,13691,65483,45749,23147,54841,893123,485481,989421,
98757451,238747,87413.98411
b=[8731,3781,42395871,98341,27843,3713,621113,897847,328741,987451
3975981,8789,7625,5467,9659,78423]
C=[10,86,92,86,96,175,177,245,199,51,170,113,158,194,54,4]
d=[131,16,116,146,70,25,198,173,196,208,210,190,209,202,30,156]
cflag=[138,80,247,193,197,155,42,10,81,212,115,238,142,213,233,30]
res=
for i in xrange(16):
OxFF)^[]
res += chr(tmp)
printflagf+res.encode(hex+}
---
## Page 1112
CTF特训营：技术详解、解题方法与
30.3UCTF2016决赛:Normandie
1112/1144
30.3UCTF2016决赛：Normandie
该题是一个施耐德PLC以太网模块的固件分析题，这里主要分析
固件中的后门账号。
拿到题目后首先用fle命令进行识别，命令如下：
[root@kali:~/Xman/Normandie]% file chall.bin
chall.bin: data
出乎意料，结果是data。
不过，并不是没办法，下面再使用binwalk看看：
[root@kali:~/Xman/Normandie]%binwalkchall.bin
DECIMAL
HEXADECIMAL
DESCRIPTION
901
0x385
Zlib compressed data,default compression
从0x385开始是zlib压缩的内容。
既然是压缩的，也许是分析不出什么了，那么我们先解压，代码
如下：
#/usr/bin/env python