## CTF特训营：技术详解、解题方法与
### 30.2 UCTF2016资格赛：TWI

#### 第三处Patch位置
图30-14展示了第三处需要进行补丁的位置。由于题目中的I2C协议不是标准的TWI协议，导致TWCR标志位始终不为0，并且程序会卡在sub_9F处。解决方法是将前面的循环全部替换为NOP指令。

#### 成功断点
通过上述修改，可以成功在地址301处设置断点，如图30-15所示。动态调试显示，`sub_38B`函数比较了输入缓冲区前5个字节是否为“flag”，以及最后一个字节是否为特定值。需要注意的是，AVR架构采用哈弗结构，数据和指令存储是分开的，因此需要选择Data视图来查看缓冲区内存变化，如图30-16所示。

#### 关键逻辑分析
`sub_29F` 和 `sub_2AD` 这两个函数相对简单。`sub_29F` 函数从输入中移除前5个字节和最后一个字节（即“flag0”），只保留中间的32字节。`sub_2AD` 则对这32字节进行unhex解码，如果输入包含非十六进制字符，则该位直接设为0，最终得到一个16字节的缓冲区。关键代码如图30-17所示。

#### 解密算法
通过动态调试，可以发现执行的操作如下：
\[ ((\text{buffer}[i] \times c[i]) \& 0xFF) \oplus d[i] \]

每一步操作均可逆。其中，数组`c[]`、`a[]`、`d[]` 和 `b[]` 的值从代码存储区获取。算法并不复杂，只需逆向操作即可恢复原始flag。以下是Python脚本实现：

```python
#!/usr/bin/env python
import gmpy2

# 定义数组
a = [32441, 4865, 4861, 13691, 65483, 45749, 23147, 54841, 893123, 485481, 989421, 98757451, 238747, 87413, 98411]
b = [8731, 3781, 42395871, 98341, 27843, 3713, 621113, 897847, 328741, 987451, 3975981, 8789, 7625, 5467, 9659, 78423]
c = [10, 86, 92, 86, 96, 175, 177, 245, 199, 51, 170, 113, 158, 194, 54, 4]
d = [131, 16, 116, 146, 70, 25, 198, 173, 196, 208, 210, 190, 209, 202, 30, 156]
cflag = [138, 80, 247, 193, 197, 155, 42, 10, 81, 212, 115, 238, 142, 213, 233, 30]

# 反向计算flag
res = ''
for i in range(16):
    tmp = (cflag[i] ^ d[i]) & 0xFF
    res += chr(tmp)

print("Flag: " + res.encode('hex'))
```

### 30.3 UCTF2016决赛：Normandie

该题涉及施耐德PLC以太网模块固件分析，主要目标是找到固件中的后门账号。首先使用`file`命令识别文件类型：

```bash
[root@kali:~/Xman/Normandie]% file chall.bin
chall.bin: data
```

结果表明文件为二进制数据。接着使用`binwalk`工具进一步分析：

```bash
[root@kali:~/Xman/Normandie]% binwalk chall.bin
DECIMAL  HEXADECIMAL  DESCRIPTION
901      0x385        Zlib compressed data, default compression
```

从0x385开始是zlib压缩的内容。接下来，我们先解压该内容：

```python
#!/usr/bin/env python
import zlib

with open('chall.bin', 'rb') as f:
    data = f.read()

decompressed_data = zlib.decompress(data[901:])
with open('decompressed.bin', 'wb') as f:
    f.write(decompressed_data)
```

通过这些步骤，我们可以逐步解析固件并找到隐藏的后门账号。