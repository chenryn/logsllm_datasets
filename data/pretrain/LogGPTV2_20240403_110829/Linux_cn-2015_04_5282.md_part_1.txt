---
author: Remy van Elst
category: 系统运维
comments_data:
- date: '2015-04-16 20:38:28'
  message: 请求提供关于如何在Apache2上启用HTTPS的教程，适用于Windows和Linux系统。目前在网上找到的相关信息较为模糊。
  postip: 123.114.59.60
  username: 北京 Chrome/Windows 用户
- date: '2016-12-20 10:42:57'
  message: 感谢文章翻译者与发布者的贡献，我的网站现已启用了HPKP功能。
  postip: 14.205.15.39
  username: 云南大理 Chrome 55.0|Windows 7 用户
- date: '2016-12-20 12:59:50'
  message: 【握手】
  postip: 183.198.26.223
  username: Mac 10.11 Chrome 55.0 用户
- date: '2022-01-21 20:09:21'
  message: "友情提示：\r\n自Chrome 68版本起，已开始弃用HPKP，并在Chrome 72中正式移除该功能。\r\n因此，不再需要进行相关配置。"
  postip: 117.176.109.253
  username: 四川南充 Chrome 70.0|Windows 7 用户
count:
  commentnum: 4
  favtimes: 4
  likes: 0
  sharetimes: 0
  viewnum: 19165
date: '2015-04-16 18:27:21'
editorchoice: false
excerpt: 此文旨在探讨Google发现由CNNIC签发的伪造Google证书的技术机制以及如何在服务器端实现针对此类攻击的防御与报告措施。公钥固定（Public Key Pinning, PKP）是指仅允许被列入白名单的证书颁发机构为特定域名签发证书，而非浏览器信任列表中的任意CA均可执行此操作。本文将介绍PKP的基本概念及其在Apache、Nginx和Lighttpd上的实现方法。
fromurl: https://raymii.org/s/articles/HTTP_Public_Key_Pinning_Extension_HPKP.html
id: 5282
islctt: true
largepic: /data/attachment/album/201504/16/182724cfrflf9lw44xxich.png
permalink: /article-5282-1.html
pic: /data/attachment/album/201504/16/182724cfrflf9lw44xxich.png.thumb.jpg
related:
- displayorder: 0
  raid: 5266
- displayorder: 0
  raid: 5374
reviewer: ''
selector: ''
summary: 文章解释了为何及如何通过公钥固定技术来增强网站的安全性，特别是当面临非法证书签发时。此外，还提供了具体步骤以帮助用户在不同类型的Web服务器上启用HPKP功能。
tags:
- HTTPS
- HPKP
- HSTS
thumb: false
title: 在 Apache、Nginx 和 Lighttpd 上启用 HTTP 公钥固定扩展 (HPKP)
titlepic: false
translator: wxy
updated: '2015-04-16 18:27:21'
---

## 编者按

近期，谷歌通报了一起涉及中国互联网网络信息中心(CNNIC)签发的中级认证机构(CA)非法生成假冒Google证书的安全事件。作为回应，谷歌和Mozilla决定停止对CNNIC后续发放的所有新证书的信任。本文将深入剖析此类伪造证书被识别的过程、背后的技术原理，同时指导读者如何在其网站服务器上部署有效的防护策略。

### 什么是公钥固定？

公钥固定是一种安全措施，要求任何为给定域名`*.example.com`签发证书的认证机构必须事先经过批准并加入到一个预定义的“可信”列表中。这意味着即使用户的浏览器已经信任某个CA，如果该CA不在预先指定的列表内，则其签发的证书也将被视为无效。本篇文章不仅会向您介绍这一机制的工作原理，还将提供在Apache、Lighttpd和Nginx等常见Web服务器平台上启用HTTP公共密钥锁定扩展(HPKP)的具体指南。

![](/data/attachment/album/201504/16/182724cfrflf9lw44xxich.png)

#### HTTP Public Key Pinning Extension

设想一下，如果你经常访问的一家银行一直使用来自CA公司A提供的数字证书来进行身份验证。然而，在现有的证书架构下，其他如CA公司B、C甚至国家安全部门也可能能够为这家银行创建看似合法但实际上未经授权的证书，而大多数现代浏览器默认情况下都会无条件地接受这些证书，因为它们同样属于受信根CA之一。

若该银行实施了HPKP策略并且指定了只认可来自最初那个CA A的第一级中间证书的话，那么浏览器就会拒绝接受由其他CA生成的所有证书，即便它们拥有有效的信任链也罢。更进一步地，HPKP还支持让浏览器向受影响方发送违规通知，从而使得后者能够及时察觉潜在的安全威胁并采取相应行动。

HTTP公钥固定扩展是一项自2011年起发展起来的标准，主要用于加强HTTP客户端（即网页浏览器）与服务器之间的通信安全性。这项技术最初由Google提出，并已在最新版的Chrome和Firefox浏览器中得到了广泛应用。它允许开发者通过设置特定HTTP响应头的方式来告知浏览器应当信赖哪些具体的公钥。

以下是有关HPKP的一些关键特性概述：

- **配置方式**：通过添加名为`Public-Key-Pins`的HTTP响应头部信息来实现；
- **有效期管理**：利用`max-age`参数设定规则的有效期长度，单位为秒；
- **适用范围限制**：只能应用于加密连接环境下的请求处理；
- **优先级规则**：当存在多个相同类型的响应头时，仅第一个会被实际处理；
- **子域兼容性**：可借助`includeSubDomains`选项使设置生效于所有子域；
- **更新机制**：每当接收到新的PKP响应头时，之前存储的信息将会被自动覆盖；
- **指纹计算**：基于哈希算法生成的SPKI指纹用于标识每个公钥。

接下来的部分我们将首先探讨一些基本理论知识，然后逐步演示如何获取所需指纹并在Web服务器上正确配置它们。
  
#### SPKI Fingerprint - Theory

根据Adam Langley在其博客文章中提到的观点，我们实际上是对公钥而不是整个证书进行哈希运算。原因在于同一份公钥可能对应着多张具有不同有效期或扩展属性的证书，这会导致简单的证书哈希无法准确反映预期的目标对象。

例如，StartSSL持有两张根证书——一张采用SHA-1签名，另一张则使用SHA-256算法。假如你想确保只有StartSSL作为你的认证机构，那么你应该如何选择呢？或许你会想到同时包含两者，但如果没有明确指示的话，外部观察者又怎能知道还有第二张证书的存在呢？

相反地，直接对公钥进行哈希可以避免上述问题的发生：

- 浏览器假定终端实体证书是不可更改的起点。
- 子证书携带的签名必定是由其直接上级父证书专门为其创建的有效签名。
- 这意味着对于子证书而言，其父证书所持有的公钥是恒定不变的。
- 因此我们可以推断出整条公钥链条也是固定的。

唯一需要注意的是不能尝试固定至交叉认证的根证书之上。比如GoDaddy的根证书曾经由Valicert签署，目的是为了让那些尚未认识GoDaddy根证书的老用户也能信任其颁发的证书。但由于新客户在构建证书路径时一旦遇到GoDaddy证书便会立即终止搜索过程，故而无法再继续向上追溯至Valicert处。

除此之外，为了防止潜在的曲解攻击，我们应选择对完整的SubjectPublicKeyInfo(SPKI)结构而非单纯的公钥比特序列进行哈希。这是因为对于Diffie-Hellman类型的公钥来说，如果仅仅依赖于公钥本身而不考虑附加参数的话，恶意第三方可能会试图重用相同的公钥却将其解释为不同的数学群组成员；类似地，RSA密钥也可能被误当作DSA密钥来对待等等。

#### Where to Pin

那么究竟应该在哪里实施公钥固定呢？直接锁定自己的私有密钥并不是最佳做法，因为它们可能会因各种原因发生变化或者被撤销。此外，频繁更换证书也会导致密钥变更。最简便但也相对不够安全的方法是固定第一个中间级别的CA证书。由于该证书位于你的站点证书之上，因此其所对应的CA公钥必然存在于证书链之中。

采用这种方法的好处是你可以在不破坏现有固定关系的前提下从同一个CA处更新自己的证书。当然，如果该CA发行了一个全新的根证书，则仍有可能引发兼容性问题。对此并没有完美的解决方案，不过可以通过以下措施来减轻影响：

- 向另一个独立的CA申请备用证书，并将其一同纳入固定列表。

根据RFC文档建议，至少需要定义两个固定点。其中一个代表当前连接使用的证书链内的公钥，另一个则是作为备选方案存在的替代公钥。这种双重保障有助于提高系统的健壮性和灵活性。