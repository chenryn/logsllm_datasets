### 优化后的文本

#### 普通 `p` 命令
普通 `p` 命令只打印 `data2` 文件中包含单词 `header` 的那行。加了感叹号之后，情况则相反：除了包含单词 `header` 的那一行外，文件中的其他所有行都被打印出来。

#### 感叹号的应用
感叹号在某些应用中非常方便。例如，在本章的 21.1.1 节中，我们演示了一种情况：`sed` 编辑器无法处理数据流中的最后一行文本，因为之后再没有其他行了。这种情况下，可以使用感叹号来解决该问题。

```bash
S sed *B;
```

---

### 第 21 章 sed 进阶

#### 使用感叹号与 N 命令及美元符
这个例子展示了如何结合使用感叹号、N 命令以及美元符特殊地址。美元符表示数据流的最后一行文本，因此当 `sed` 编辑器到达最后一行时，它不会执行 N 命令，但会对所有其他行执行该命令。

通过这种方法，你可以反转数据流中文本行的顺序。要实现这一效果（先显示最后一行，最后显示第一行），你需要利用保持空间进行一些特别的操作。

具体步骤如下：
1. 在模式空间中放置一行。
2. 将模式空间中的行放到保持空间中。
3. 在模式空间中放入下一行。
4. 将保持空间附加到模式空间后。
5. 将模式空间中的所有内容都放到保持空间中。
6. 重复执行第 (3) 到 (5) 步，直到所有行都反序放到了保持空间中。
7. 提取并打印行。

图 21-1 详细描述了这个过程。

在这种方法中，你不想在处理过程中打印行，这意味着要使用 `sed` 的 `-n` 命令行选项。下一步是决定如何将保持空间文本附加到模式空间文本后面，这可以通过 `c` 命令完成。唯一的问题是你不想将保持空间附加到要处理的第一行文本后面，这可以用感叹号命令轻松解决：

```bash
11G
```

接下来，将新的模式空间（含有已反转的行）放到保持空间中，这可以通过 `h` 命令完成。

当整个数据流都在模式空间中反转后，你需要做的就是打印结果。当到达数据流的最后一行时，你就知道已经得到了整个数据流。打印结果的命令如下：

```bash
&p
```

---

### 反转文本文件中的行

以下是创建一个可以反转文本文件中行的 `sed` 编辑器脚本所需的操作步骤。现在可以运行一下试试：

```bash
$ cat data2.txt
This is the header line.
This is the first data line.
This is the second data line.
This is the last line.

$ sed -n '1{h;1!H;$!d};x;s/\n/ /g;p' data2.txt
This is the last line.
This is the second data line.
This is the first data line.
This is the header line.
```

这个脚本按预期输出了反转后的文本文件行。这展示了在 `sed` 脚本中使用保持空间的强大之处，提供了一种在脚本输出中控制行顺序的简单方法。

值得注意的是，Linux 中有一个命令 `tac` 已经实现了反转文本文件的功能。它的名字很巧妙，正好与 `cat` 命令相反。

---

### 改变流

通常，`sed` 编辑器会从脚本的顶部开始，一直执行到脚本的结尾（`D` 命令是个例外，它会强制 `sed` 编辑器返回到脚本的顶部，而不读取新的行）。`sed` 编辑器提供了一种方法来改变命令脚本的执行流程，从而实现类似结构化编程的效果。

#### 分支
在前面一节中，你了解了如何用感叹号命令来排除作用在某行上的命令。`sed` 编辑器提供了一种基于地址、地址模式或地址区间排除一整块命令的方法，允许你只对数据流中的特定行执行一组命令。

分支命令 `b` 的格式如下：

```bash
[address] b [label]
```

`address` 参数决定了哪些行的数据会触发分支命令。`label` 参数定义了要跳转到的位置。如果没有指定 `label`，跳转命令会跳转到脚本的结尾。

```bash
$ cat data2.txt
This is the header line.
This is the first data line.
This is the second data line.
This is the last line.

$ sed '2,3b : s/This is/Is this/ : s/line. /test?/' data2.txt
Is this the header test?
This is the second data line.
This is the first data line.
Is this the last test?
```

分支命令在数据流中的第 2 行和第 3 行处跳过了两个替换命令。

如果不想直接跳到脚本的结尾，可以为分支命令定义一个要跳转到的标签。标签以冒号开始，最多可以是 7 个字符长度。

```bash
: label2
```

要指定标签，将其加到 `b` 命令后即可。使用标签允许你跳过地址匹配处的命令，但仍然执行脚本中的其他命令。

```bash
$ sed '/first/b jump1 : s/This is the/No jump on/ :jump1 : s/This is the/Jump here on/' data2.txt
No jump on header line
Jump here on first data line
No jump on second data line
No jump on last line
```

跳转命令指定如果文本行中出现了 `first`，程序应该跳到标签为 `jump1` 的脚本行。如果分支命令的模式没有匹配，`sed` 编辑器会继续执行脚本中的命令，包括分支标签后的命令（因此，所有的替换命令都会在不匹配分支模式的行上执行）。

如果某行匹配了分支模式，`sed` 编辑器就会跳转到带有分支标签的那行。因此，只有最后一个替换命令会执行。

这个例子演示了跳转到 `sed` 脚本后面的标签上。也可以跳转到脚本中靠前面的标签上，这样就达到了循环的效果。

```bash
$ echo "This, is, a, test, to, remove, commas." | sed -n '
8/, //1p
:start
b start
'
This is, a, test, to, remove, commas
This is a, test, to, remove, commas
This is a test, to, remove, commas
This is a test to, remove, commas
This is a test to remove, commas
^C
$
```

脚本的每次迭代都会删除文本中的第一个逗号，并打印字符串。这个脚本有个问题：它永远不会结束，形成了一个无穷循环，不停地查找逗号，直到使用 `Ctrl+C` 组合键手动停止。

要防止这个问题，可以为分支命令指定一个地址模式来查找。如果没有模式，跳转就应该结束。

```bash
$ echo "This, is, a, test, to, remove, commas." | sed -n '
:start
/,,/b start
s/,//p
'
This is, a, test, to, remove, commas
This is a, test, to, remove, commas
This is a test, to, remove, commas
This is a test to, remove, commas
This is a test to remove, commas
This is a test to remove commas
```

现在分支命令只会在行中有逗号的情况下跳转。在最后一个逗号被删除后，分支命令不会再执行，脚本也就能正常停止。

#### 测试
类似于分支命令，测试命令 `t` 也可以用来改变 `sed` 编辑器脚本的执行流程。测试命令会根据替换命令的结果跳转到某个标签，而不是根据地址进行跳转。

如果替换命令成功匹配并替换了一个模式，测试命令就会跳转到指定的标签。如果替换命令未能匹配指定的模式，测试命令就不会跳转。

测试命令使用与分支命令相同的格式：

```bash
[address] t [label]
```

跟分支命令一样，在没有指定标签的情况下，如果测试成功，`sed` 会跳转到脚本的结尾。

测试命令提供了对数据流中的文本执行基本的 if-then 语句的一个低成本办法。举个例子，如果已经做了一个替换，不需要再做另一个替换，那么测试命令能帮上忙。

```bash
$ sed '
/first/t
s/This is the/No match on/
' data2.txt
No match on header line
This is the matched data line
No match on second data line
No match on last line
```

第一个替换命令会查找模式文本 `first`。如果匹配了行中的模式，它就会替换文本，并且测试命令会跳过后面的替换命令。如果第一个替换命令未能匹配模式，第二个替换命令就会被执行。

有了测试命令，你可以结束之前用分支命令形成的无限循环。

```bash
$ echo "This, is, a, test, to, remove, commas." | sed -n '
:start
//*/ t start
s/,//
p
'
This is, a, test, to, remove, commas
This is a, test, to, remove, commas
This is a test, to, remove, commas
This is a test to, remove, commas
This is a test to remove, commas
This is a test to remove commas
```

---

### 子模式
子模式提供了选择将模式中的某部分作为替代模式的能力。这在处理通配符模式时尤其有用。

```bash
$ echo "That furry cat is pretty" | sed 's/furry \(-at\)/\1/'
That cat is pretty
```

在这种情况下，你不能用 `&` 符号，因为它会替换整个匹配的模式。子模式提供了答案，允许你选择将模式中的某部分作为替代模式。

当需要在两个或多个子模式间插入文本时，这个特性尤其有用。这里有个脚本，它使用子模式在大数字中插入逗号。

```bash
$ echo "1234567" | sed '
s/( *[0-9]*)([0-9]{3})/\1, \2/
:start
t start
'
1, 234, 567
```

这个脚本将匹配模式分成了两部分：

- `[0-9]*`
- `[0-9]{3}`

这个模式会查找两个子模式。第一个子模式是以数字结尾的任意长度的字符。第二个子模式是若干组三位数字（关于如何在正则表达式中使用花括号的内容可参考第 20 章）。如果这个模式在文本中找到了，替代文本会在两个子模式之间加一个逗号，每个子模式都会通过其位置来标示。

这个脚本使用测试命令来遍历这个数字，直到放置好所有的逗号。

---

### 在脚本中使用 `sed`

现在你已经认识了 `sed` 编辑器的各个部分，是时候将它们综合运用在 shell 脚本中了。本节将会演示一些你应该知道的特性，在脚本中使用 `sed` 编辑器时会用得着它们。

#### 使用包装脚本
你可能已经注意到，实现 `sed` 编辑器脚本的过程很繁琐，尤其是脚本很长的话。可以将 `sed` 编辑器命令放到 shell 包装脚本（wrapper）中，不用每次使用时都重新键入整个脚本。包装脚本充当着 `sed` 编辑器脚本和命令行之间的中间人角色。

在 shell 脚本中，可以将普通的 shell 变量及参数和 `sed` 编辑器脚本一起使用。这里有个将命令行参数变量作为 `sed` 脚本输入的例子。

```bash
$ cat reverse.sh
#!/bin/bash
# Shell wrapper for sed editor script.
# to reverse text file lines
```