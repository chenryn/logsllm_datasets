普通p命令只打印data2文件中包含单词header的那行。加了感叹号之后，情况就相反了：除
了包含单词header那一行外，文件中其他所有的行都被打印出来了。
感叹号在有些应用中用起来很方便。本章之前的21.1.1节演示了一种情况：sed编辑器无法处
理数据流中最后一行文本，因为之后再没有其他行了。可以用感叹号来解决这个向题。
S sed *B;
---
## Page 467
452
第21章sed进阶
> s/Systen\nAdministrator/Desktop\nUser/
> s/System Administrator/Desktop User/
On Tuesday, the Linux Desktop
> ' data4.txt
User*α group meeting vill be held.
A1l Syaten Adminilatrators should attend.
> a/Syaten\nAdmlnlatrator/Desktop\nUser/
> s/System Administrator/Desktop User/
On Tuesday, the Linux Desktop
> ' data4.txt
User α group meeting vi1l be held.
A11 Desktop Users should attend.
这个例子演示了如何配合使用感叹号与N命令以及与美元符特殊地址。美元符表示数据流中
的最后一行文本，所以当sed编辑器到了最后一行时，它没有执行N命令，但它对所有其他行都执
行了这个命令。
使用这种方法，你可以反转数据流中文本行的顺序。要实现这个效果（先显示最后一行，最
后显示第一行）你得利用保持空间做一些特别的铺垫工作。
你得像这样使用模式空间：
(1)在模式空间中放置一行；
(2)将模式空间中的行放到保持空间中；
(3）在模式空间中放人下一行；
（4）将保持空间附加到模式空间后；
(5)将模式空间中的所有内容都放到保持空间中；
(6)重复执行第(3)-(5)步，直到所有行都反序放到了保持空间中；
(7)提取并打印行。
图21-1详细描述了这个过程。
在使用这种方法时，你不想在处理时打印行。这意味着要使用sed的-n命令行选项。下一步
是决定如何将保持空间文本附加到模式空间文本后面。这可以用c命令完成。唯一的问题是你不
想将保持空间附加到要处理的第一行文本后面。这可以用感叹号命令轻松解决：
11G
下一步就是将新的模式空间（含有已反转的行）放到保持空间。这也非常简单，只要用h命
令就行。
将模式空间中的整个数据流都反转了之后，你要做的就是打印结果。当到达数据流中的最后
一行时，你就知道已经得到了模式空间的整个数据流。打印结果要用下面的命令：
&p
---
## Page 468
21.3排除命令
453
数据文件
模式空间
保持空间
第1行
第1行
3
第2行
第1行
第2行
第3行
第2行第1行
第4行
第2行第1行
第3行
第3行第2行第1行
第4行
第4行第3行第2行第1行
图21-1使用保持空间来反转文本文件中行的顺序
这些都是你创建可以反转行的sed编辑器脚本所需的操作步骤。现在可以运行一下试试：
S cat data2.txt
Thla la the header line.
Thla ia the flrst data line.
Thlala the second data line.
Thla ia the last line.
S sed -n '(1:G : b ; $p )' data2.txt
This ia the last line.
Thia ia the second data line.
Thia ia the firat data line.
Thia ia the header line.
sed编辑器脚本的执行和预期的一样。脚本输出反转了文本文件中原来的行。这展示了在sed
脚本中使用保持空间的强大之处。它提供了一种在脚本输出中控制行顺序的简单办法。
说明可能你想说，有个Limux命令已经有反转文本文件的功能了。tac命令会倒序显示一个文
本文件。你也许已经注意到了，这个命令的名字很巧妙，它执行的正好是与cat命令相反的
功能。
---
## Page 469
454
第21章sed进阶
21.4改变流
通常，sed编辑器会从脚本的顶部开始，一直执行到脚本的结尾（D命令是个例外，它会强制
sed编辑器返回到脚本的顶部，而不读取新的行）sed编辑器提供了一个方法来改变命令脚本的执
行流程，其结果与结构化编程类似。
21.4.1分支
在前面一节中，你了解了如何用感叹号命令来排除作用在某行上的命令。sed编辑器提供了
一种方法，可以基于地址、地址模式或地址区间排除一整块命令。这允许你只对数据流中的特定
行执行一组命令。
分支（branch）命令b的格式如下：
[ addresa] b [labeI]
address参数决定了哪些行的数据会触发分支命令。label参数定义了要跳转到的位置。如
果没有加1abel参数，跳转命令会跳转到脚本的结尾。
S cat data2.txt
Thia la the header llne.
This la the first data line.
This la the second data llne.
Thia la the last line.
S sed *(2,3b : s/This is/Is this/ : s/line. /test?/)· data2.txt
Is thla the header test?
Thia la the second data llne.
Thla la the first data line.
Is thia the last test?
分支命令在数据流中的第2行和第3行处跳过了两个替换命令。
要是不想直接跳到脚本的结尾，可以为分支命令定义一个要跳转到的标签。标签以冒号开始，
最多可以是7个字符长度。
: 1abe12
要指定标签，将它加到b命令后即可。使用标签允许你跳过地址匹配处的命令，但仍然执行
脚本中的其他命令。
≤ sed *(/firet/b jumpl : s/This 1a the/No junp on/
> :{unp1
No junp on beader line
> s/This is the/Jump here on/)* data2.txt
Jump hexe on firet data llne
No junp on second data line
No junp on last 1ine
跳转命令指定如果文本行中出现了first，程序应该跳到标签为jumpl的脚本行。如果分支
---
## Page 470
21.4改变流
455
命令的模式没有匹配，sed编辑器会继续执行脚本中的命令，包括分支标签后的命令（因此，所
有的替换命令都会在不匹配分支模式的行上执行）
如果某行匹配了分支模式，sed编辑器就会跳转到带有分支标签的那行。因此，只有最后一
个替换命令会执行。
这个例子演示了跳转到sed脚本后面的标签上。也可以跳转到脚本中靠前面的标签上，这样
就达到了循环的效果。
S echo *This, is,a, test, to, remove, commas.* I sed -n *{
> 8/, //1p
> 18tart
> b start
This is, a, test, to, remove, conmas
> }'
This is a, test, to, remove, commas
This is a test, to, renove, commas
This is a test to remove, cormas.
Ihis
is a
test
to, renove, commas,
This is a test to remove conmas.
^C
$
脚本的每次选代都会删除文本中的第一个逗号，并打印字符串。这个脚本有个间题：它永远
不会结束。这就形成了一个无穷循环，不停地查找逗号，直到使用Ctl+C组合键发送一个信号，
2
手动停止这个脚本。
要防止这个问题，可以为分支命令指定一个地址模式来查找。如果没有模式，跳转就应该
结束。
Secho *This, i8, a, test, to, remove, comnas.* 1 sed -n *(
> 18tart
>/,/b start
> 8/,//1p
Thie is, a, test, to, remove, conmas.
}'
This is a, test, to, remove, commas.
This is a test, to, renove, commas.
This is a test to, remove, commas.
This is a test to remove, commas
This is a test to remove cormas.
现在分支命令只会在行中有逗号的情况下跳转。在最后一个逗号被删除后，分支命令不会再
执行，脚本也就能正常停止了。
21.4.2测试
类似于分支命令，测试（test）命令（t）也可以用来改变sed编辑器脚本的执行流程。测
试命令会根据替换命令的结果跳转到某个标签，而不是根据地址进行跳转。
---
## Page 471
456
第21章sed进阶
如果替换命令成功匹配并替换了一个模式，测试命令就会跳转到指定的标签。如果替换命令
未能匹配指定的模式，测试命令就不会跳转。
测试命令使用与分支命令相同的格式。
[address] t[label]
跟分支命令一样，在没有指定标签的情况下，如果测试成功，sed会跳转到脚本的结尾，
测试命令提供了对数据流中的文本执行基本的if-then语句的一个低成本办法。举个例子，
如果已经做了一个替换，不需要再做另一个替换，那么测试命令能帮上忙。
$ sed *{
> 8/firat/natched/
> 8/This is the/No match on/
>t
>}' data2.txt
No match on header line
This is the matched data line
No match on second data line
No match on last line
第一个替换命令会查找模式文本first。如果匹配了行中的模式，它就会替换文本，面且测
试命令会跳过后面的替换命令。如果第一个替换命令未能匹配模式，第二个替换命令就会被执行。
有了测试命令，你就能结束之前用分支命令形成的无限循环。
$echo "This, is, a, test, to, remove, commas. " 1 sed -n '{
> 18tart
//*/ t start
This is, a, test, to. renove, coemas
s/\(Systen\) Adninistrator/\1 User/ 
这个替换命令用一对圆括号将单词System括起来，将其标示为一个子模式。然后它在替代模
式中使用1来提取第一个匹配的子模式。这没什么特别的，但在处理通配符模式时却特别有用。
如果需要用一个单词来替换一个短语，面这个单词刚好是该短语的子字符串，但那个子字符
甲碰巧使用了通配符，这时便用子模式会方使很多。
---
## Page 473
458
第21章sed进阶
S echo "That furry cat ia pretty" 1 sed *a/furry \(-at\)/\1/*
That cat iα pretty
/T/(\e)\Axxg/e,pos1xd efaeg Axxmgg。oo≤
Ksead st seq teua
在这种情况下，你不能用&符号，因为它会替换整个匹配的模式。子模式提供了答案，允许
你选择将模式中的某部分作为替代模式。
当需要在两个或多个子模式间插人文本时，这个特性尤其有用。这里有个脚本，它使用子模
式在大数字中插人逗号。
$echo “1234567*1sed(
> s/( *[09]([09{3)/1, 2/
> :start
> t start
>}'
1, 234 , 567
这个脚本将匹配模式分成了两部分。
[6 - 0] + *
[091 (3)
这个模式会查找两个子模式。第一个子模式是以数字结尾的任意长度的字符。第二个子模式
是若干组三位数字（关于如何在正则表达式中使用花括号的内容可参考第20章）。如果这个模式
在文本中找到了，替代文本会在两个子模式之间加一个逗号，每个子模式都会通过其位置来标示。
这个脚本使用测试命令来遍历这个数字，直到放置好所有的逗号。
21.6在脚本中使用sed
现在你已经认识了sed编辑器的各个部分，是时候将它们综合运用在shell脚本中了。本节将
会演示一些你应该知道的特性，在脚本中使用sed编辑器时会用得着它们。
21.6.1使用包装脚本
你可能已经注意到，实现sed编辑器脚本的过程很烦琐，尤其是脚本很长的话。可以将sed编
辑器命令放到shell包装脚本（wrapper）中，不用每次使用时都重新键入整个脚本。包装脚本充当
着sed编辑器脚本和命令行之间的中间人角色。
在shell脚本中，可以将普通的shell变量及参数和sed编辑器脚本一起使用。这里有个将命令行
参数变量作为sed脚本输人的例子。
S cat reverse.sb
1/bin/baah
 Shell wrapper for sed editor script.
to reverse text file lines,