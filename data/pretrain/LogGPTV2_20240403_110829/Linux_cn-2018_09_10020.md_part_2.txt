确实更好了。我们可以很快看到，Nginx 有 20520 和 20521 的 PID。
#### PGREP
`pgrep` 命令更加简化单独调用 `grep` 遇到的问题。
```
alan@workstation:~$ pgrep nginx
20520
20521
```
假设您在一个托管环境中，多个用户正在运行几个不同的 Nginx 实例。您可以使用 `-u` 选项将其他人排除在输出之外。
```
alan@workstation:~$ pgrep -u alan nginx
20520
20521
```
#### PIDOF
另一个好用的是 `pidof`。此命令将检查特定二进制文件的 PID，即使另一个同名进程正在运行。为了建立一个例子，我将我的 Nginx 复制到第二个目录，并以相应的路径前缀启动。在现实生活中，这个实例可能位于不同的位置，例如由不同用户拥有的目录。如果我运行两个 Nginx 实例，则`pidof` 输出显示它们的所有进程。
```
alan@workstation:~$ ps -ef |grep nginx
alan     20881  1454  0 11:18 ?        00:00:00 nginx: master process ./nginx -p /home/alan/web/prod/nginxsec
alan     20882 20881  0 11:18 ?        00:00:00 nginx: worker process
alan     20895  1454  0 11:19 ?        00:00:00 nginx: master process nginx
alan     20896 20895  0 11:19 ?        00:00:00 nginx: worker process
```
使用 `grep` 或 `pgrep` 将显示 PID 数字，但我们可能无法辨别哪个实例是哪个。
```
alan@workstation:~$ pgrep nginx
20881
20882
20895
20896
```
`pidof` 命令可用于确定每个特定 Nginx 实例的 PID。
```
alan@workstation:~$ pidof /home/alan/web/prod/nginxsec/sbin/nginx
20882 20881
alan@workstation:~$ pidof /home/alan/web/prod/nginx/sbin/nginx
20896 20895
```
#### TOP
`top` 命令已经有很久的历史了，对于查看运行进程的细节和快速识别内存消耗等问题是非常有用的。其默认视图如下所示。
```
top - 11:56:28 up 1 day, 13:37,  1 user,  load average: 0.09, 0.04, 0.03
Tasks: 292 total,   3 running, 225 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem : 16387132 total, 10854648 free,  1859036 used,  3673448 buff/cache
KiB Swap:        0 total,        0 free,        0 used. 14176540 avail Mem
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
17270 alan      20   0 3930764 247288  98992 R   0.7  1.5   5:58.22 gnome-shell
20496 alan      20   0  816144  45416  29844 S   0.5  0.3   0:22.16 gnome-terminal-
21110 alan      20   0   41940   3988   3188 R   0.1  0.0   0:00.17 top
    1 root      20   0  225564   9416   6768 S   0.0  0.1   0:10.72 systemd
    2 root      20   0       0      0      0 S   0.0  0.0   0:00.01 kthreadd
    4 root       0 -20       0      0      0 I   0.0  0.0   0:00.00 kworker/0:0H
    6 root       0 -20       0      0      0 I   0.0  0.0   0:00.00 mm_percpu_wq
    7 root      20   0       0      0      0 S   0.0  0.0   0:00.08 ksoftirqd/0
```
可以通过键入字母 `s` 和您喜欢的更新秒数来更改更新间隔。为了更容易监控我们的示例 Nginx 进程，我们可以使用 `-p` 选项并传递 PID 来调用 `top`。这个输出要干净得多。
```
alan@workstation:~$ top -p20881 -p20882 -p20895 -p20896
Tasks:   4 total,   0 running,   4 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.8 us,  1.3 sy,  0.0 ni, 95.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem : 16387132 total, 10856008 free,  1857648 used,  3673476 buff/cache
KiB Swap:        0 total,        0 free,        0 used. 14177928 avail Mem
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
20881 alan      20   0   12016    348      0 S   0.0  0.0   0:00.00 nginx
20882 alan      20   0   12460   1644    932 S   0.0  0.0   0:00.00 nginx
20895 alan      20   0   12016    352      0 S   0.0  0.0   0:00.00 nginx
20896 alan      20   0   12460   1628    912 S   0.0  0.0   0:00.00 nginx
```
在管理进程，特别是终止进程时，正确确定 PID 是非常重要。此外，如果以这种方式使用 `top`，每当这些进程中的一个停止或一个新进程开始时，`top` 都需要被告知有新的进程。
### 终止进程
#### KILL
有趣的是，没有 `stop` 命令。在 Linux 中，有 `kill` 命令。`kill` 用于向进程发送信号。最常用的信号是“终止”（`SIGTERM`）或“杀死”（`SIGKILL`）。然而，还有更多。下面是一些例子。完整的列表可以用 `kill -L` 显示。
```
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
```
注意第 9 号信号是 `SIGKILL`，通常，我们会发出比如 `kill -9 20896` 这样的命令。默认信号是 15，这是 `SIGTERM`。请记住，许多应用程序都有自己的停止方法。Nginx 使用 `-s` 选项传递信号，如 `stop` 或 `reload`。通常，我更喜欢使用应用程序的特定方法来停止操作。然而，我将演示用 `kill` 命令来停止 Nginx 进程 20896，然后用 `pgrep` 确认它已经停止。PID 20896 就不再出现。
```
alan@workstation:~$ kill -9 20896
alan@workstation:~$ pgrep nginx
20881
20882
20895
22123
```
#### PKILL
命令 `pkill` 类似于 `pgrep`，因为它可以按名称搜索。这意味着在使用 `pkill` 时必须非常小心。在我的 Nginx 示例中，如果我只想杀死一个 Nginx 实例，我可能不会选择使用它。我可以将 Nginx 选项 `-s stop` 传递给特定的实例来消除它，或者我需要使用 `grep` 来过滤整个 `ps` 输出。
```
/home/alan/web/prod/nginx/sbin/nginx -s stop
/home/alan/web/prod/nginxsec/sbin/nginx -s stop
```
如果我想使用 `pkill`，我可以包括 `-f` 选项，让 `pkill` 过滤整个命令行参数。这当然也适用于 `pgrep`。所以，在执行 `pkill -f` 之前，首先我可以用 `pgrep -a` 确认一下。
```
alan@workstation:~$ pgrep -a nginx
20881 nginx: master process ./nginx -p /home/alan/web/prod/nginxsec
20882 nginx: worker process
20895 nginx: master process nginx
20896 nginx: worker process
```
我也可以用 `pgrep -f` 缩小我的结果。`pkill` 使用相同参数会停止该进程。
```
alan@workstation:~$ pgrep -f nginxsec
20881
alan@workstation:~$ pkill -f nginxsec
```
`pgrep`（尤其是 `pkill`）要记住的关键点是，您必须始终确保搜索结果准确性，这样您就不会无意中影响到错误的进程。
大多数这些命令都有许多命令行选项，所以我总是建议阅读每一个命令的 [man 手册页](https://www.kernel.org/doc/man-pages/)。虽然大多数这些命令都存在于 Linux、Solaris 和 BSD 等平台上，但也有一些不同之处。在命令行工作或编写脚本时，始终测试并随时准备根据需要进行更正。
---
via: 
作者：[Alan Formy-Duval](https://opensource.com/users/alanfdoss) 选题：[lujun9972](https://github.com/lujun9972) 译者：[heguangzhi](https://github.com/heguangzhi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出