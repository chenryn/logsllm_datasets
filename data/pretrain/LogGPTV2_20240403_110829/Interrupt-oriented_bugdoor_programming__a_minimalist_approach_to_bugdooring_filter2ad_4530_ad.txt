### Program Termination and CPU State Analysis

When the program terminates, it reports whether the specified CPU state is reachable. If the state is reachable, the program concludes its search. Otherwise, the search continues until all possible interleavings of up to \( n \) steps into the program are explored, at which point it reports that the state cannot be found. A step is defined as either an instruction in the target program or the execution of an interrupt handler, which is assumed to be atomic and thus counted as a single step.

In theory, this exhaustive search can determine if a program and its interrupts can place the processor in a "bad" or exploitable state. For example, the tool can check if it is possible for the Stack Pointer (SP) to be set to 0xC00 during the execution of an MSP430 program, thereby determining if the program is vulnerable to the stack-growing exploit described in Section 9.3.

However, the space of possible CPU states grows exponentially with \( n \), making brute-force search impractical even for modest values of \( n \). Additionally, the version of mspdebug used in this study (version 0.22) did not support the MSP430X extended instruction set, which some target firmwares (e.g., GoodFET) utilize. As a result, our tool could not accurately search the space of possible CPU states in these firmwares.

### Interrupt State-Change Analyzer

This mspdebug function, specifically implemented for the simulator module, determines the state changes induced by the execution of a given interrupt handler at any point in the program. The function saves the state of the virtual MSP430 CPU before executing the interrupt, runs the interrupt, compares the resultant state with the saved state, and prints all differences in memory and register values to the screen. This tool aims to simplify the understanding of interrupt side-effects, making it easier to identify potentially useful interrupt handlers for Interrupt-Oriented Programming (IOP).

As expected, most interrupt handlers in the target firmwares modified the CPU state without restoring it. However, the state changes induced by the interrupt handlers varied depending on the invocation point in the program and the number of consecutive invocations. Some interrupt handlers only induced state changes after their first invocation and had no further effect on subsequent calls.

In cases where state was accumulated or changed in a register or memory location, we found that these locations were either used internally within the handler (e.g., a counter variable) or were not used elsewhere without being set, as verified manually and with the help of the Unset Register/Memory Use Scanner. Additionally, due to the lack of support for the MSP430X extended instruction set in mspdebug, the tool could not accurately determine the state changes induced by interrupt handlers using unique MSP430X instructions.

### Hardware Analysis

Using the FET430UIF, we controlled the MSP430F2618 and examined CPU state via the JTAG protocol. We needed to verify if MSP430 registers could accumulate state across resets, which would be possible if the registers were not cleared or loaded each time a power-on reset or reset interrupt was triggered. Since the MSP430 manual [30] only specifies the values of SR and PC after resets, we observed CPU states across resets to determine if other registers were loaded or cleared.

A limitation of using JTAG for debugging is that a JTAG reset occurs each time the microcontroller is taken under and released from JTAG control [31]. Therefore, the CPU state displayed upon entering a JTAG session in mspdebug is after a JTAG reset, not a "true" reset triggered by a signal edge on the RST/NMI pin. To bypass this, we wrote custom firmware that writes all register values to fixed memory locations immediately after the reset interrupt handler is invoked, allowing us to read them in a subsequent JTAG session.

Using this custom firmware, we found that the MSP430F2618 loads fixed values into its registers (other than PC and SR) on each reset triggered by an edge on the RST/NMI pin. These values were generally predictable, though they occasionally varied between experimental sessions. It appears safe to assume that fixed values are indeed loaded into registers between resets, preventing state accumulation across multiple resets.

### Future Work

Future work should focus on generalizing and fully automating the IOP program discovery process. The first step would be to compile a formal catalog of IOP "gadgets," providing direction for finding the building blocks needed to construct IOP programs.

Next, we aim to fully automate the IOP static analysis process. The scripts and programs we have written only semi-automate the process; further research should focus on devising algorithms to locate IOP gadgets in target program binaries reliably and efficiently. One possible approach is to use SMT solvers to search the CPU state space, rather than the inefficient brute-force search tool developed for this study. SMT solvers have been effective in analyzing various vulnerabilities and exploit programming models [33], and IOP seems a promising application for them.

This would require a model of the target Instruction Set Architecture (ISA) and its interactions with interrupts, a significant investment. Once this is done, using an SMT solver might provide a feasible way to search and query the states achievable through interrupt triggering. Such fully automated analyzers could also identify programs vulnerable to IOP and alert programmers to specific state dependencies between interrupt handlers and target code, enhancing microcontroller security.

Future IOP exploitation research should also aim to construct attacks that assume no access to any part of the firmware on the target device or similar devices. Such attacks might infer the behavior of interrupt handlers purely by observing their side-effects on CPU state, rather than relying on disassembled binaries. Successfully achieving this stronger form of IOP attack would emphasize the significance of this exploit programming model to microcontroller security.

### Conclusion

We have illustrated the concept of Interrupt-Oriented Programming (IOP) and demonstrated synthetic examples of firmware code where IOP programs that achieve unintended computation on a microcontroller could be constructed. We have shown that these synthetic exploits could be planted as backdoors into commercially deployed firmware and have built tools to help researchers discover and explore IOP programs in MSP430 firmware.

### Acknowledgments

We would like to thank Daniel Beer for helping us debug initial problems with interfacing our hardware with mspdebug. We also thank the members of Dartmouth’s Trust Lab—particularly Rebecca 'bx' Shapiro, Peter Johnson, and Jason Reeves—for feedback and useful discussions. Finally, thanks are due to Aurélien Francillon for discussions on minimalist exploitation of microcontrollers.

### References

[1] J. Bangert, S. Bratus, R. Shapiro, and S. W. Smith. The Page-Fault Weird Machine: Lessons in Instruction-less Computation. In 7th USENIX Workshop of Offensive Technologies (WOOT), August 2013. https://www.usenix.org/system/files/conference/woot13/woot13-bangert.pdf.
[2] E. Bosman and H. Bos. Framing Signals – A Return to Portable Shellcode. IEEE Symposium on Security and Privacy, May 2014.
[3] S. Bratus, J. Bangert, A. Gabrovsky, A. Shubina, D. Bilar, and M. E. Locasto. Composition Patterns of Hacking. In Proceedings of the 1st International Workshop on Cyber Patterns, pages 80–85, Abingdon, Oxfordshire, UK, July 2012.
[4] S. Bratus, M. E. Locasto, M. L. Patterson, L. Sassaman, and A. Shubina. Exploit Programming: from Buffer Overflows to “Weird Machines” and Theory of Computation. ;login:, December 2011.
[5] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When Good Instructions Go Bad: Generalizing Return-oriented Programming to RISC. In Proceedings of the 15th ACM Conference on Computer and Communications Security, pages 27–38, New York, NY, USA, 2008. ACM.
[6] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy. Return-oriented Programming Without Returns. In Proceedings of the 17th ACM Conference on Computer and Communications Security, pages 559–572, New York, NY, USA, 2010. ACM.
[7] T. Dullien. Exploitation and State Machines: Programming the “Weird Machine”, revisited. http://www.immunityinc.com/infiltrate/presentations/Fundamentals_of_exploitation_revisited.pdf, April 2011. Infiltrate Conference.
[8] T. Durden. Bypassing PaX ASLR protection. Phrack 59:9, 59(9), Jul 2002.
[9] eugene. Architecture spanning shellcode. Phrack 57:14, November 2001. http://phrack.org/issues/57/17.html.
[10] J. Evers. Alcatel leaves LAN switch software back door wide open, 2002. http://www.networkworld.com/news/2002/1122alcatellan.html.
[11] T. Goodspeed and A. Francillon. Half-blind Attacks: Mask ROM Bootloaders Are Dangerous. In Proceedings of the 3rd USENIX Conference on Offensive Technologies, WOOT’09, Berkeley, CA, USA, 2009. USENIX Association.
[12] C. Helfmeier, D. Nedospasov, C. Tarnovsky, J. S. Krissler, C. Boit, and J.-P. Seifert. Breaking and entering through the silicon. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, CCS ’13, pages 733–744, New York, NY, USA, 2013. ACM.
[13] jp. Advanced Doug Lea’s malloc Exploits. Phrack 61:6. http://phrack.org/issues.html?issue=61&id=6.
[14] S. Krahmer. x86-64 buffer overflow exploits and the borrowed code chunks exploitation technique. http://users.suse.com/~krahmer/no-nx.pdf, September 2005.
[15] J. Mason, S. Small, F. Monrose, and G. MacManus. English shellcode. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS ’09, pages 524–533, New York, NY, USA, 2009. ACM.
[16] H. Meer. The (Almost) Complete History of Memory Corruption Attacks. BlackHat USA, August 2010.
[17] T. Müller. ASLR Smack & Laugh Reference, 2008.
[18] Nergal. The advanced return-into-lib(c) exploits: PaX case study. Phrack, 11(58), December 2001.
[19] J. Oakley and S. Bratus. Exploiting the hard-working dwarf: Trojan and exploit techniques with no native executable code. In WOOT, pages 91–102, 2011.
[20] G. Richarte. Re: Future of Buffer Overflows. Bugtraq, October 2000. http://seclists.org/bugtraq/2000/Nov/32.
[21] G. Richarte. About Exploits Writing. Core Security Technologies presentation, 2002.
[22] riq and gera. Advances in Format String Exploitation. Phrack 59:7, 59(7), Jul 2002.
[23] rix. Writing ia32 alphanumeric shellcodes. Phrack 57:15, November 2001. http://phrack.org/issues/57/18.html.
[24] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security, CCS ’07, pages 552–561, New York, NY, USA, 2007. ACM.
[25] R. Shapiro, S. Bratus, and S. W. Smith. “Weird Machines” in ELF: A Spotlight on the Underappreciated Metadata. In 7th USENIX Workshop of Offensive Technologies (WOOT), August 2013. https://www.usenix.org/system/files/conference/woot13/woot13-shapiro.pdf.
[26] Shimmer. Shop: Shimmer Platform. http://www.shimmersensing.com/shop/shimmer-platform.
[27] Solar Designer. Getting around non-executable stack (and fix). Bugtraq mailing list archives, August 1997. http://seclists.org/bugtraq/1997/Aug/63.
[28] Solar Designer. Openwall linux kernel patch. Web, 1998. http://www.openwall.com/linux.
[29] B. Spengler. The Case for GrSecurity. https://grsecurity.net/papers.php, September 2012. H2HC, Sao Paulo, Brazil.
[30] Texas Instruments. SLAU144I: MSP430x2xx Family: User’s Guide, January 2012.
[31] Texas Instruments. SLAU320L: MSP430 Programming Via the JTAG Interface, September 2013.
[32] TinyOS Documentation Wiki. TinyOS. Web. http://tinyos.stanford.edu/tinyos-wiki/index.php/Main_Page.
[33] J. Vanegue, S. Heelan, and R. Rolles. SMT solvers for software security. In Proceedings of the 6th USENIX Conference on Offensive Technologies, WOOT’12, Berkeley, CA, USA, 2012. USENIX Association.
[34] R. Verma. Designing Portable, Wearable and Implantable Medical Electronics with Ultra-Low-Power Microcontrollers. http://tinyurl.com/lc4rat5.