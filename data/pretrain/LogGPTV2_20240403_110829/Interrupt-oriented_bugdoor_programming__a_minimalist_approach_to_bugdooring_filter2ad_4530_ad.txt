V , the program terminates and reports that this CPU state
is reachable. Otherwise, the search continues until all pos-
sible interleavings of up to n steps into the program are
searched, and reports that such a state cannot be found.
We deﬁne a step as either a instruction in the target pro-
gram or the execution of an interrupt handler (assumed to
be atomic and thus counted as a single step).
In theory,
this search would be able to determine whether it is possi-
ble for a program and its interrupts to put the processor in
a “bad”, exploitable state. For example, this tool would be
able to check if it is possible for SP(R1) to be set to 0xC00
during the execution of an MSP430 program, and therefore
determine whether the program is vulnerable to the stack
growing exploit described in Section 9.3.
However, given the fact that the space of possible CPU
states grows exponentially as n increases, this brute-force
search took long amounts of time for even modest values of
n; brute-force searching entire ﬁrmware binaries was far out
of our reach.
Moreover, the latest version of mspdebug as of the time
of this study (version 0.22) did not support the MSP430X
extended instruction set, which some of the target ﬁrmwares
(e.g. GoodFET) utilize. Since mspdebug could not emulate
the behavior of the MSP430 on these instructions, our tool
was unable to accurately search the space of possible CPU
states in these ﬁrmwares.
Interrupt state-change analyzer
11.1.4
This is an mspdebug function we implemented speciﬁcally
for the simulator module to determine the state changes in-
duced by the execution of a given interrupt handler at any
given point in the program. This function saves the state of
the virtual MSP430 CPU before executing the interrupt, ex-
ecutes it, compares the resultant state with the saved state,
and prints all the diﬀerences in memory and register val-
ues to screen. This tool is meant to make understanding
the side-eﬀects of interrupts easier, and thus allow interrupt
handlers potentially useful in IOP to be easily identiﬁable.
As expected, most interrupt handlers found in the tar-
get ﬁrmwares changed modiﬁed CPU state without restor-
ing it. However, most the state change induced by the in-
terrupt handlers tended to vary depending on where in the
target program the interrupt handler was invoked, as well as
how many consecutive times the interrupt handler was in-
voked. For example, some interrupt handlers only induced
state changes after their ﬁrst invocations, and did not in-
duce further state changes on subsequent, consecutive invo-
cations.
In the several cases we discovered where state is
either accumulated or changed in a register/memory loca-
tion, we either found that this register/memory location is
only used internally within the handler (e.g. a counter vari-
able), or could not ﬁnd—by hand or with the help of the
Unset Register/Memory Use Scanner—instances where this
register/memory was used elsewhere without being set.
Moreover, as mentioned in Section 11.1.3, mspdebug does
not support the MSP430X extended instruction set. This
tool was therefore unable to accurately determine the state
changes induced by interrupt handlers that use instructions
unique to the MSP430X architecture.
11.2 Hardware analysis
With the help of the FET430UIF, we were able to control
the MSP430F2618 and examine CPU state via the JTAG
protocol.
We needed to check if MSP430’s registers could potentially
be used to accumulate state across resets. This could be
possible if the registers were not cleared or loaded each time
a power-on reset or reset interrupt was trigger. Since the
MSP430 manual [30] only explicitly states the values SR
and PC take after resets, we needed to observe CPU states
across resets in order to determine whether or not the other
registers are loaded or cleared after each reset.
A limitation of using the JTAG protocol to debug the
MSP430 is that a JTAG reset is performed each time the
microcontroller is taken under and released from JTAG con-
trol.[31] Therefore, the CPU state displayed upon entering a
JTAG “session” in mspdebug is that after a JTAG reset, not
after a “true” reset interrupt triggered by a signal edge on
the RST/NMI pin. The former is diﬀerent from the latter
in that the former is triggered by signals sent over JTAG
interface pins (TDO, TDI, TMS, and TCK) rather than by
a signal edge on the RST/NMI pin. While documentation
states that CPU state is the same after either reset is per-
formed, we suspected that this claim might not hold.
In order to bypass this limitation, we wrote custom ﬁrmware
that writes all register values to ﬁxed locations in memory
immediately after the reset interrupt handler is invoked, so
that they could be read out in a subsequent JTAG debug-
ging session.
Using this custom ﬁrmware, we found that the MSP430F2-
618 does indeed load ﬁxed values into its registers (other
than PC and SR) on each reset triggered by an edge on the
RST/NMI pin.
These values were generally predictable, though we occa-
sionally saw them vary between our experimental sessions.
However, it appears safe to assume that ﬁxed values are in-
deed loaded into registers between resets, therefore prevent-
ing state accumulation in registers across multiple resets.
12. FUTURE WORK
Future work should focus on generalizing and fully au-
tomating the IOP program discovery process. The ﬁrst step
to achieving this would be to compiling a formal catalog of
IOP “gadgets”. This would provide direction for ﬁnding the
building blocks needed to construct IOP programs.
The next step would be to fully automate the IOP static
analysis process. The scripts and programs that we have
written only semi-automate the static analysis process; fur-
ther research should focus devising algorithms to locate IOP
gadgets in target program binaries reliably and eﬃciently.
One possible avenue to pursue is using SMT solvers to search
the CPU state space, rather than the ineﬃcient brute-force
search tool we developed for this study. SMT solvers have
helped analyze various kinds of vulnerabilities and exploit
programming models [33]; IOP seems a promising applica-
tion for them.
This application would, of course, require a model of the
target ISA and of its interactions with interrupts, a sig-
niﬁcant investment; once this is done, however, using an
SMT solver might yield a feasible way to search and query
the states achievable through the triggering of interrupts.
Such fully automated analyzers would also be able to iden-
tify programs vulnerable to IOP, and alert programmers to
speciﬁc state dependencies between interrupt handler and
target code. This would allow microcontroller programmers
to better protect their code against potential IOP attacks.
Future work in IOP exploitation should also aim to con-
struct IOP attacks that assume no access to the any part of
the ﬁrmware on the target device or similar devices. Such
attacks might infer the behavior of interrupt handlers purely
by observing their side-eﬀects on CPU state, rather than re-
lying on analyzing disassembled binaries. Successfully achiev-
ing this stronger form of an IOP attack would future empha-
size the signiﬁcance of this exploit programming model to
microcontroller security.
13. CONCLUSION
We have illustrated the concept of interrupt-oriented pro-
gramming and have demonstrated synthetic examples of ﬁrm-
ware code where IOP programs that achieve unintended
computation on amicrocontroller could be constructed. More-
over, we have shown that these synthetic exploits could be
planted as bugdoors into commercially deployed ﬁrmware,
and have built tools that will help further researchers dis-
cover and explore IOP programs in MSP430 ﬁrmware.
14. ACKNOWLEDGMENTS
We would like to thank Daniel Beer for helping us to debug
some initial problems we had with interfacing our hardware
with mspdebug. We would also like to thank the members of
Dartmouth’s Trust Lab—particularly Rebecca ‘bx’ Shapiro,
Peter Johnson, and Jason Reeves—for feedback and useful
discussions. Finally, thanks are due to Aur´elien Francil-
lon for discussions on minimalist exploitation of microcon-
trollers.
(cid:20)(cid:21)(cid:23)
15. REFERENCES
[1] J. Bangert, S. Bratus, R. Shapiro, and S. W. Smith.
The Page-Fault Weird Machine: Lessons in
Instruction-less Computation. In 7th USENIX
Workshop of Oﬀensive Technologies (WOOT), August
2013. https://www.usenix.org/system/files/
conference/woot13/woot13-bangert.pdf.
[2] E. Bosman and H. Bos. Framing Signals – A Return
to Portable Shellcode. IEEE Symposium on Security
and Privacy, May 2014.
[3] S. Bratus, J. Bangert, A. Gabrovsky, A. Shubina,
D. Bilar, and M. E. Locasto. Composition Patterns of
Hacking. In Proceedings of the 1st International
Workshop on Cyber Patterns, pages 80–85, Abingdon,
Oxfordshire, UK, July 2012.
[4] S. Bratus, M. E. Locasto, M. L. Patterson,
L. Sassaman, and A. Shubina. Exploit Programming:
from Buﬀer Overﬂows to “Weird Machines” and
Theory of Computation. ;login:, December 2011.
[5] E. Buchanan, R. Roemer, H. Shacham, and S. Savage.
When Good Instructions Go Bad: Generalizing
Return-oriented Programming to RISC. In Proceedings
of the 15th ACM Conference on Computer and
Communications Security, pages 27–38, New York,
NY, USA, 2008. ACM.
[6] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy. Return-oriented
Programming Without Returns. In Proceedings of the
17th ACM Conference on Computer and
Communications Security, pages 559–572, New York,
NY, USA, 2010. ACM.
[7] T. Dullien. Exploitation and State Machines:
Programming the “Weird Machine”, revisited. http://
www.immunityinc.com/infiltrate/presentations/
Fundamentals_of_exploitation_revisited.pdf,
April 2011. Inﬁltrate Conference.
[8] T. Durden. Bypassing PaX ASLR protection. Phrack
59:9, 59(9), Jul 2002.
[9] eugene. Architecture spanning shellcode. Phrack
57:14, November 2001.
http://phrack.org/issues/57/17.html.
[10] J. Evers. Alcatel leaves LAN switch software back
door wide open, 2002. http://www.networkworld.
com/news/2002/1122alcatellan.html.
[11] T. Goodspeed and A. Francillon. Half-blind Attacks:
Mask ROM Bootloaders Are Dangerous. In
Proceedings of the 3rd USENIX Conference on
Oﬀensive Technologies, WOOT’09, Berkeley, CA,
USA, 2009. USENIX Association.
[12] C. Helfmeier, D. Nedospasov, C. Tarnovsky, J. S.
Krissler, C. Boit, and J.-P. Seifert. Breaking and
entering through the silicon. In Proceedings of the
2013 ACM SIGSAC Conference on Computer &#38;
Communications Security, CCS ’13, pages 733–744,
New York, NY, USA, 2013. ACM.
[13] jp. Advanced Doug Lea’s malloc Exploits. Phrack 61:6.
http://phrack.org/issues.html?issue=61&id=6.
[14] S. Krahmer. x86-64 buﬀer overﬂow exploits and the
borrowed code chunks exploitation technique.
http://users.suse.com/~krahmer/no-nx.pdf,
September 2005.
[15] J. Mason, S. Small, F. Monrose, and G. MacManus.
English shellcode. In Proceedings of the 16th ACM
Conference on Computer and Communications
Security, CCS ’09, pages 524–533, New York, NY,
USA, 2009. ACM.
[16] H. Meer. The (Almost) Complete History of Memory
Corruption Attacks. BlackHat USA, August 2010.
[17] T. M¨uller. ASLR Smack & Laugh Reference, 2008.
[18] Nergal. The advanced return-into-lib(c) exploits: PaX
case study. Phrack, 11(58), December 2001.
[19] J. Oakley and S. Bratus. Exploiting the hard-working
dwarf: Trojan and exploit techniques with no native
executable code. In WOOT, pages 91–102, 2011.
[20] G. Richarte. Re: Future of Buﬀer Overﬂows. Bugtraq,
October 2000.
http://seclists.org/bugtraq/2000/Nov/32.
[21] G. Richarte. About Exploits Writing. Core Security
Technologies presentation, 2002.
[22] riq and gera. Advances in Format String Exploitation.
Phrack 59:7, 59(7), Jul 2002.
[23] rix. Writing ia32 alphanumeric shellcodes. Phrack
57:15, November 2001.
http://phrack.org/issues/57/18.html.
[24] H. Shacham. The geometry of innocent ﬂesh on the
bone: Return-into-libc without function calls (on the
x86). In Proceedings of the 14th ACM Conference on
Computer and Communications Security, CCS ’07,
pages 552–561, New York, NY, USA, 2007. ACM.
[25] R. Shapiro, S. Bratus, and S. W. Smith. ”Weird
Machines” in ELF: A Spotlight on the
Underappreciated Metadata. In 7th USENIX
Workshop of Oﬀensive Technologies (WOOT), August
2013. https://www.usenix.org/system/files/
conference/woot13/woot13-shapiro.pdf.
[26] Shimmer. Shop: Shimmer Platform. http:
//www.shimmersensing.com/shop/shimmer-platform.
[27] Solar Designer. Getting around non-executable stack
(and ﬁx). Bugtraq mailing list archives, August 1997.
http://seclists.org/bugtraq/1997/Aug/63.
[28] Solar Designer. Openwall linux kernel patch. Web,
1998. http://www.openwall.com/linux.
[29] B. Spengler. The Case for GrSecurity.
https://grsecurity.net/papers.php, September
2012. H2HC, Sao Paulo, Brazil.
[30] Texas Instruments. SLAU144I: MSP430x2xx Family:
User’s Guide, January 2012.
[31] Texas Instruments. SLAU320L: MSP430 Programming
Via the JTAG Interface, September 2013.
[32] TinyOS Documentation Wiki. TinyOS. Web.
http://tinyos.stanford.edu/tinyos-wiki/index.
php/Main_Page.
[33] J. Vanegue, S. Heelan, and R. Rolles. SMT solvers for
software security. In Proceedings of the 6th USENIX
Conference on Oﬀensive Technologies, WOOT’12,
Berkeley, CA, USA, 2012. USENIX Association.
[34] R. Verma. Designing Portable, Wearable and
Implantable Medical Electronics with
Ultra-Low-Power Microcontrollers.
http://tinyurl.com/lc4rat5.
(cid:20)(cid:21)(cid:24)