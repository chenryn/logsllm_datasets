# 《Chrome V8 源码》35. String.prototype.CharAt 源码分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 介绍
本文先讲解 String.prototype.CharAt 源码以及相关数据结构，再通过测试用例演示 String.prototype.CharAt
的调用、加载和执行过程。  
 **注意** （1）Sea of Nodes 是本文的先导知识，请参考 Cliff 1993年发表的论文 From Quads to
Graphs。（2）本文所用环境为：V8 7.9、win10 x64、VS2019。  
本文的测试用例如下：
    1.  var s = "hello V8";
    2.  var c = s.charAt(2);
    3.  console.log(c);
## 2 CharAt 源码
String.prototype.CharAt 由 TF_Bultin 实现，编号是 885。String.prototype.CharAt
源码中使用了TF_BUILTIN宏模板，宏模板展开后的源码如下：
    1.    class StringPrototypeCharAtAssembler : public CodeStubAssembler {
    2.     public:                                                           
    3.      using Descriptor = Builtin_StringPrototypeCharAt_InterfaceDescriptor;
    4.      explicit StringPrototypeCharAtAssembler(compiler::CodeAssemblerState* state)
    5.          : CodeStubAssembler(state) {}     
    6.      void GenerateStringPrototypeCharAtImpl(); 
    7.      Node* Parameter(Descriptor::ParameterIndices index) {/*省略*/      }                                                             
    8.    };                                                                   
    9.    void Builtins::Generate_StringPrototypeCharAt(compiler::CodeAssemblerState* state) { 
    10.      StringPrototypeCharAtAssembler assembler(state);                                   
    11.        //省略.....                                                           
    12.      assembler.GenerateStringPrototypeCharAtImpl();                                  
    13.    }                                                                     
    14.    void StringPrototypeCharAtAssembler::GenerateStringPrototypeCharAtImpl(){
    15.  //省略.....
    16.    if (block0.is_used()) {
    17.      compiler::TNode tmp0;
    18.      compiler::TNode tmp1;
    19.      compiler::TNode tmp2;
    20.      ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    21.      ca_.SetSourcePosition("../../../src/builtins/string.tq", 77);
    22.      compiler::TypedCodeAssemblerVariable result_0_0(&ca_);
    23.      compiler::TypedCodeAssemblerVariable result_0_1(&ca_);
    24.      compiler::TypedCodeAssemblerVariable result_0_2(&ca_);
    25.      compiler::CodeAssemblerLabel label0(&ca_);
    26.      compiler::CodeAssemblerLabel label1(&ca_);
    27.      GenerateStringAt_336(state_, compiler::TNode{tmp0}, compiler::TNode{tmp1}, compiler::TNode{tmp2}, "String.prototype.charAt", &label0, &result_0_0, &result_0_1, &result_0_2, &label1);
    28.      if (label0.is_used()) {
    29.        ca_.Bind(&label0);
    30.        ca_.Goto(&block5, tmp0, tmp1, tmp2, tmp1, tmp2, result_0_0.value(), result_0_1.value(), result_0_2.value());
    31.      }  }
    32.    if (block5.is_used()) {
    33.  //省略.....
    34.      ca_.Bind(&block5, &tmp3, &tmp4, &tmp5, &tmp6, &tmp7, &tmp8, &tmp9, &tmp10);
    35.      ca_.Goto(&block4, tmp3, tmp4, tmp5, tmp8, tmp9, tmp10);
    36.    }
    37.    if (block4.is_used()) {
    38.  //省略.....
    39.      ca_.Bind(&block4, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21);
    40.      ca_.SetSourcePosition("../../../src/builtins/string.tq", 81);
    41.      compiler::TNode tmp22;
    42.      USE(tmp22);
    43.      tmp22 = CodeStubAssembler(state_).StringCharCodeAt(compiler::TNode{tmp19}, compiler::TNode{tmp20});
    44.      ca_.SetSourcePosition("../../../src/builtins/string.tq", 82);
    45.      compiler::TNode tmp23;
    46.      USE(tmp23);
    47.      tmp23 = CodeStubAssembler(state_).StringFromSingleCharCode(compiler::TNode{tmp22});
    48.      CodeStubAssembler(state_).Return(tmp23);
    49.    }}
编译 String.prototype.CharAt 时，先调用 Builtins::Generate _StringPrototypeCharAt()
方法（第 9 行）生成中间结果，然后 compiler::CodeAssembler::GenerateCode()
方法再将中间结果编译成二进制代码并存储在 butiltin_ 数组中。
StringPrototypeCharAtAssembler::GenerateStringPrototypeCharAtImpl() （第 14
行）的关键功能如下：  
 **（1）** 第 18 行代码 tmp1 代表测试用例中的字符串 “hello V8”；  
 **（2）** 第 19 行代码 tmp2 代表测试用例中的 position， position 的值为 2；  
 **（3）** 第 27 行代码 GenerateStringAt_336() 判断 tmp1 的类型是否为 string 且 tmp2 是否小于
tmp1 的长度，判断结果为真则执行 32 行代码；  
 **（4）** 第 34-35 行代码绑定参数，跳转到第 37 行；  
 **（5）** 第 40-43 行代码调用 StringCharCodeAt() 获取指定位置的字符（tmp2）并存储在 tmp22 中。使用
StringFromSingleCharCode() 方法把 tmp22 转换为最终结果，并在第 48 行返回此结果。至此，CharAt 执行完毕。  
下面说明 GenerateStringPrototypeCharAtImpl 用到的几个重要方法。  
 **（1）** GenerateStringAt_336() 判断字符串的类型和参数的长度是否正确，源码如下：
    1.  void GenerateStringAt_336(/*省略*/) {
    2.  ca_.Goto(&block0, p_context, p_receiver, p_position);
    3.  //省略........
    4.   if (block0.is_used()) {
    5.     ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    6.      compiler::TNode tmp4;
    7.      USE(tmp4);
    8.      tmp4 = CodeStubAssembler(state_).ToThisString(compiler::TNode{tmp0}, compiler::TNode{tmp1}, compiler::TNode{tmp3});
    9.      ca_.SetSourcePosition("../../../src/builtins/string.tq", 65);
    10.      compiler::TNode tmp5;
    11.      USE(tmp5);
    12.      tmp5 = CodeStubAssembler(state_).ToInteger_Inline(compiler::TNode{tmp0}, compiler::TNode{tmp2}, CodeStubAssembler::ToIntegerTruncationMode::kTruncateMinusZero);
    13.      ca_.SetSourcePosition("../../../src/builtins/string.tq", 64);
    14.      ca_.SetSourcePosition("../../../src/builtins/string.tq", 66);
    15.      compiler::TNode tmp6;
    16.      USE(tmp6);
    17.      tmp6 = CodeStubAssembler(state_).TaggedIsNotSmi(compiler::TNode{tmp5});
    18.      ca_.Branch(tmp6, &block3, &block4, tmp0, tmp1, tmp2, tmp4, tmp5);
    19.    }//省略........
    20.    if (block4.is_used()) {
    21.  //省略...........
    22.      ca_.Branch(tmp22, &block5, &block6, tmp12, tmp13, tmp14, tmp15, tmp16, tmp18, tmp19);
    23.    }
    24.    if (block6.is_used()) {ca_.Goto(&block1, tmp33, tmp35, tmp36);}
    25.    if (block1.is_used()) {ca_.Goto(label_IfInBounds);}
    26.    if (block2.is_used()) {
    27.      ca_.Bind(&block2);
    28.      ca_.Goto(label_IfOutOfBounds);} }