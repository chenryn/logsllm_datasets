includes several components that feed sensor measurements
into state estimation systems, contingency analysis software,
optimal power ﬂow control analysis software, as well as an
HMI. Hence, the power system topology information can be
extracted through insider intruders (e.g., Stuxnet [24]) or EMS
compromises. Additionally, unlike in purely-cyber settings, the
physical power system and its topology is often exposed to
outside world; therefore, physical system reconnaissance is
relatively simpler.
5Obviously the attacker could also use HARVEY’s capabilities to cause very
visible attacks if he chooses to.
6Stuxnet for instance utilized a compromised HMI to hide itself from the
operator [24].
7SCADA: supervisory control and data acquisition.
Fig. 2: System Model
logic to program the behavior of the PLC. The control logic
programs are executed repeatedly in ﬁxed intervals, called
scan cycles. The control logic program reads input values
from memory and stores the output values to memory. The
underlying ﬁrmware is responsible for the interchange of
these updated values to and from the PLC’s general purpose
input/output (GPIO) ports, i.e., the interface to the physical
system, as well as the reporting mechanisms of the PLC, i.e.,
the LED display on the device and the HMI. The scan cycle
is illustrated by the white arrows in Figure 1.4
For instance, a pump can increase the pressure in a pipe. In
order to have a constant pressure in the pipe the pump must
be active until the predeﬁned pressure is reached. Whether
the desired level has been reached is determined based on
sensor readings. However, the sensor and the pump are not
directly connected. The sensor measurements are read by the
PLC through its input lines. The value is then processed by the
control logic, and the result is translated back into the physical
system to steer the pump.
This approach allows for high ﬂexibility, e.g., the sensor
and actuator (pump) might not operate in close proximity
and the sensor measurements have to be sent to the PLC
controlling the actuator. This can be done cost-efﬁciently
through existing computer networks, even over the internet.
Furthermore, processing data in the cyber network allows for
more complex relations between sensor measurements and
actions.
B. System Model
In this paper, we mainly consider large distributed ICSs
that are operated in a centralized manner. Figure 2 shows
an abstract view of our system model in which a physical
system is operated from a central control terminal. The control
terminal provides a HMI that allows an operator to monitor
the system and interact with the system (by sending control
commands). The connection between the control terminal in
the cyber world of the ICS and the physical world is provided
by PLCs. PLCs capture the physical system’s state by reading
measurements from sensors. Additionally, PLCs control the
system’s actuators, based on both the control actions generated
by their local control logic and the control commands sent from
the operator.
4PLCs can be programmed with multiple independent control logic appli-
cations which are executed sequentially within in each scan cycle.
3
Physical System(Power Grid)Central ControlHMIOperatorSensor / ActuatorHMI: Human-Machine InterfacePLC: Programmable Logic ControllerIII. HARVEY: MODEL-AWARE ROOTKIT
importantly,
The central property of our rootkit HARVEY is the fact that
it takes into account the physical topology of the industrial
control system (ICS) it infects. This gives HARVEY unique
capabilities. Most
to be
stealthy. HARVEY is completely invisible to the ICS’s virtual
world. This means that the effects of attacks launched by
HARVEY can neither be detected by human operators monitor-
ing system measurements nor by security tools like intrusion
detection systems (IDS) monitoring the ICS network. This
makes HARVEY uniquely powerful and goes beyond attacks
known today.
it allows our rootkit
is to infect
The idea of our model-aware rootkit
the
ﬁrmware of a programmable logic controller (PLC), allowing
HARVEY to control all inputs and outputs of the PLC. The
control logic program gets access to the PLC’s input values
through the ﬁrmware from the physical world, processes them,
and then provides outputs that are forwarded to the physical
world through the ﬁrmware. The control logic can also interact
with other cyber components in the industrial control system
(ICS) over network.
Because HARVEY lives in the ﬁrmware layer and intercepts
the control and information ﬂow of the ﬁrmware, it is com-
pletely transparent to the control logic. Each output which is
passed from the control logic to the ﬁrmware is captured by
HARVEY and can be changed, e.g., to maximize the effects
of the attack. Similarly, HARVEY can change the input values
seen by the control logic arbitrarily, e.g., to hide effects of its
attack.
HARVEY only compromises the PLC’s ﬁrmware, hence, it
cannot be detected by the operator’s PLC management tools. In
contrast, malware that operates on the control logic level can be
detected through the PLC’s remote management capabilities.
Control logic malwares need to rely on additional techniques
or assumptions to hide themselves from the operator. Stuxnet
compromised the operators workstation to hide itself [24];
Br¨uggemann and Spenneberg rely on the observation that they
can cause the operator’s remote management software to crash
by manipulating meta-data stored on the PLC [12].
Although our Man-in-the-PLC rootkit cannot be detected
directly by the operator, it could still be detected indirectly
through the effects it causes. To prevent unintended, possibly
suspicious effects in the ICS, HARVEY does not change input
and output values arbitrarily. Instead, our rootkit acts according
to a model of the target system which ensures that the opera-
tor’s view of the system stays consistent with his expectations.
This means that if the malware’s goal is to increase the pressure
in a pipe to damage it, it is not sufﬁcient to activate the pump
by setting the output of the PLC accordingly. A sensor would
measure the increasing pressure and would alert the operator or
trigger an automatic safety mechanism. Hence, for the attack
to be successful, the malware must also ensure that sensor
readings presented to the operator are not suspicious, e.g., hide
the increasing pressure.
Since our rootkit uses a model to manipulate inputs and
outputs of a PLC in a coordinated fashion, it can present a
normal operation view towards the cyber world while manip-
ulating the physical world.
Model. The model according to which our malware is operat-
ing can be created and/or obtained in different ways. HARVEY
essentially makes use of the same models that are used to
control the underlying physical platform legitimately. However,
the malware optimizes the control commands for an adversarial
objective function.
4
For attacks on simple systems the model would be simple,
too, and can be created manually. For more complex systems
the model can be created with automated tools.8 The attacker’s
advantage is that he does not need to have a comprehensive
model of the entire system. She only needs a model for parts
of the system her attack will operate in. For instance, if the
attacker aims to damage a speciﬁc pipe in a large plant, she
only needs a model covering those components that her attack
will effect, which might be as few as a single pump and a
single sensor. Additionally, the model can also incorporate
the deployed (if any) intrusion detection sensors to ensure the
malicious control commands do not trigger the alerts.
In Section VI, we will present our evaluation results of
our model-aware malware on a real power grid. It shows that
manipulations in the physical world can be hidden from the
cyber world.
PLC Infection. Our rootkit works by compromising a PLC’s
ﬁrmware, which the attacker can achieve in different ways.
The attack can use the built-in ﬁrmware update mechanism
to replace the ﬁrmware on a PLC. Depending on the PLC
model, ﬁrmware updates are not secure against manipulations.9
Firmware updates can be deployed over the network for most
PLCs. Hence, PLCs which are reachable by the attacker over
the network can be compromised directly.
The attacker can also compromise PLCs locally. Many
PLCs allow ﬁrmware updates from local media such as SD
cards. Additionally, the attacker can use hardware interfaces
like JTAG10 to connect to the PLC and manipulate its ﬁrmware.
An attack has recently been presented that shows the ease of
JTAG implantation [25]. In Section V we describe in detail
our attack on a PLC through its JTAG interface.11
Lastly, if the previous attack methods are not available,
the adversary could facilitate run-time attacks, e.g., net-
work exploits. To the best of our knowledge, there are no
PLCs available that have run-time attack mitigation tech-
niques deployed. This means that attacks like code injec-
tion are likely to succeed on PLCs. Remote code execu-
tion vulnerabilities on PLCs have been issued just this past
year, e.g., CVE-2016-0868, CVE-2016-5645 and all vulner-
abilities associated with the FrostyURL vulnerability, such
as CVE-2015-6490, CVE-2015-6492, CVE-2015-6491, CVE-
2015-6488, and CVE-2015-6486. However, even in the pres-
ence of protection mechanisms, the developments in the desk-
top and server world have shown that attackers will ﬁnd new
means of circumventing these protection mechanisms. Code
reuse attacks, like return oriented programming (ROP), have
already been applied on embedded systems [27].
IV. PHYSICS-AWARENESS
This section explains how HARVEY manipulates the control
actuation actions and sensor measurements within a PLC.
Figure 3 shows how HARVEY manipulates data streams to
damage the physical plant while ensuring the operators see
what they would expect to see based on their inputs to the
system. HARVEY performs the attack through manipulation
8Related work focusing on modeling industrial control systems is described
in Section VII.
9We will elaborate on our ﬁndings on ﬁrmware update security in Section V.
10Joint Test Action Group (JTAG) is an IEEE standard for testing and
debugging integrated circuits.
11Note that the goal of our work is to show the effectiveness of physics-
aware malware, providing novel infection vectors were not the scope of our
efforts.
module write requests, and replaces them with malicious
control output u∗
m. It calculates the malicious control outputs
through similar logic as the legitimate controller with only
one difference: it calculates the control outputs that minimize
the corresponding objective function u∗ = argminu obj(x, f ) to
maximize the damage on the physical plant. HARVEY writes
the calculated commands to the corresponding PLC output
ports that are connected to the physical plant actuators. The
corrupted control commands drive the plant towards unsafe
states leading to potential physical failures, e.g., power system
blackouts.
It is noteworthy that HARVEY’s malicious control output
calculation can also incorporate additional constraints that
may be introduced to evade the detection of the attack. For
instance, in a water plant, the constraints may avoid an extreme
increase of the pump rotation speed because of its potentially
noticeable noise. Additionally, without the loss of generality,
the linear model mentioned above can be replaced with either
simpler or more complicated models used by the PLC control
logic depending on the speciﬁc control system domain (see
Section VI for an empirical power system case study.)
Fig. 3: HARVEY Two-Way Data Manipulation Attack
B. Monitoring: Sensor Data Corruption
of data in both directions: i) control commands sent by the
operators and/or the control logic on the PLC to the actuators
deployed on the physical plant; and ii) sensor measurements
from the deployed sensors to the operators. The control
commands are corrupted to damage the physical system and
cause system failures, whereas the sensor measurements are
corrupted to evade the operator detection of the caused failures.
A. Control: Malicious Plant Actuation
In real-world control systems, e.g., power systems, the
system dynamics continuously change due to various factors,
e.g., electricity consumption changes by the civilians. Such
changes require updated control of the physical system to
ensure it maintains its core functionalities. For instance, in the
power grid control systems, the generation set-points (control
commands) are updated dynamically by the controllers to
ensure the amount of power that
is consumed equals the
generated amount by the generators.
The control of the physical plant is often performed based
on the models of the underlying physical dynamics, e.g.,
ﬂuid dynamics for the water networks and Kirchhoff laws
for the power systems. The models encode the correlations
between the system parameters due to the physics laws caused
by inter-component connections and dependencies. The most
popular generic modeling follows linear dynamical state-based
formalism ˙x = f (x,u), where
y = Cx + ε.
f (x,u) = Ax + Bu + ω
(1)
(2)
The matrices A,B,C represent the dynamics of the physical
system, x is the state vector of the system, y is the sensor mea-
surements sent to the PLC, and u are the control outputs from
the PLC to the actuators. ω and ε encode the noise in system
dynamics and the sensor measurements, respectively. The PLC
control logic receives the sensor measurements y and calculates
the corresponding optimal control commands u∗ to maximize
a domain-speciﬁc objective function u∗ = argmaxu obj(x, f ),
e.g., the minimum total generation cost in power systems.
The calculated control commands are sent to the PLC output
modules through its ﬁrmware facilities.
HARVEY sits within the ﬁrmware and intercepts the output
5
The control command manipulation attack, discussed
above, causes unsafe physical plant states, but it does not
contain the necessary amount of stealth for practical real-world
deployment. Hence, it can be easily detected by the control
system operators, who continuously monitor the real-time
physical plant state on the human-machine interface (HMI)
screens. The HMI screens are frequently updated automatically
by fetching the PLC’s memory for the most recent physical
system sensor measurements that have been delivered to the
PLC’s input module.
To evade the detection, HARVEY intercepts the sensor mea-
surements on the PLC and replaces them with fake values that
would make the underlying physical system status look normal
to the operators. Stuxnet implemented an innovative system
status record-and-replay attack. The worm would record the
plant dynamics for 13 days before it injected malicious control
logic on the PLC. Once the attack started on the plant
(malicious control logic execution on the PLC), Stuxnet would
replay the recorded data stream back to the operator screens.
Such record-and-replay attacks would work in speciﬁc
control system plants with static and stationary low-pace
dynamics such as uranium enrichment, which was Stuxnet’s
target. However, the sole record-and-replay attack would not
be practical and can be easily detected if used in typical
control systems with high-pace dynamics such as a power grid.
In power grids, the operators constantly change the system
conﬁguration/topology and parameter values as a result of