# Instruction Breakdown and Details

### Challenges
- **Manual Construction:** We need to build the instruction breakdown and details ourselves.
- **API Exposure:** Semantics must be exposed through the API.
- **Thread Safety:** The design is not inherently thread-safe.
- **Windows Support:** Poor support for Windows.
- **Binding Development:** All bindings need to be built from scratch.
- **Upstream Synchronization:** After forking LLVM, we must keep up with upstream code changes.

### Issues
- **Forking LLVM:** Must remove unnecessary components.
- **MC Replication:** Need to replicate and build around LLVM's MC (Machine Code) without modifying it.
- **Language Transition:** Replace C++ with C.
- **MC Extension:** Extend LLVM’s MC.
- **Thread Safety:** Isolate global variables to ensure thread safety.
- **Semantics Information:** Extract semantics information from TD files in LLVM.
- **Data Structure:** Utilize `cs_inn` structure to organize and retain all necessary information.
- **API Independence:** Ensure that APIs are architecture-independent.

### Solutions
- **Capstone Independence:**
  - Zero dependencies.
  - Compact size.
  - More than just assembly code.
  - Thread-safe design.
  - Embeddable in restricted firmware/OS environments.
  - Malware resistance (x86).
  - Optimized for reverse engineers.
  - Additional hardware modes supported (e.g., Big-Endian for ARM and ARM64).
  - More instructions supported (e.g., 3DNow for x86).

- **Superior Features:**
  - Cannot always rely on LLVM for bug fixes.
  - Disassembler is a second-class citizen in LLVM, especially if it doesn't affect code generation.
  - May refuse to fix bugs if they don’t impact LLVM's backend (tricky x86 code).
  - Handling all corner cases is Capstone's top priority.
  - Handles all known x86 malware tricks.
  - LLVM may not prioritize these issues.

- **Robustness:**
  - Showcase: x64dbg
  - Unicorn Engine by NGUYEN Anh Quynh and DANG Hoang Vu
  - Website: [Unicorn Engine](http://www.unicorn-engine.org)

### Current Emulator Limitations
- **Functionality:** Nothing worked well until 2015 (First release of Unicorn Engine).
- **Bindings:** Limited bindings.
- **Functions and Architectures:** Limited functions and architectures.

### Requirements
- **Multiple Architectures:** x86, x86_64, ARM, ARM64, MIPS, PPC.
- **Multiple Platforms:** Windows, Linux, macOS, Android, and more.
- **Multiple Bindings:** Python, Ruby, Java, C#, and more.
- **Pure C Implementation:** Latest and updated architectures.
- **JIT Compiler Technique:** Instrumentation (e.g., F7, F8).

### Workload
- **Architectures:** x86, ARM.
- **Maintenance:** Actively maintained and updated with the latest architectural changes.
- **Platforms:** Windows, Linux.
- **Opcode Understanding:** Intel x86 with over 1500 documented instructions.
- **Binding Languages:** Support for Python and Ruby.
- **Project Scope:** Single-person effort, targeted for completion within 12 months.

### Good Emulator Characteristics
- **Architectures:** x86, x86_64, ARM, ARM64, MIPS, and more.
- **Maintenance:** Actively maintained and updated.
- **Platforms:** Windows, Linux, macOS, Android, and more.
- **Implementation:** Pure C.
- **Bindings:** Support for Python and Ruby.
- **JIT Compiler:** JIT compiler technique.
- **Instrumentation Levels:** Single step, instruction, memory access.
- **Community:** Open-source project with a large and active community.
- **Supported Architectures:** x86, ARM, ARM64, MIPS, PowerPC, SPARC, and more (18 architectures).
- **Platforms:** *nix and Windows.

### Not Reinventing the Wheel
- **Forked from QEMU:** Supports various architectures and is highly updated.
- **Pure C Implementation:** Easy to implement Unicorn core on top.
- **JIT CPU Emulation:** Already implemented with optimizations.

### Are We Done?
- **Emulation Scope:** Not just CPU, but also device models and ROM/BIOS to fully emulate physical machines.
- **Codebase Complexity:** QEMU codebase is large and complex, contributed by many people.

### Issues and Solutions
- **Issue 1:** Keep only CPU emulation code and remove other components (devices, ROM/BIOS, migration, etc.).
  - **Solution:** Retain supported subsystems like Qobject, Qom. Rewrite some components while keeping CPU emulation code intact for future synchronization.

- **Issue 2:** Set of emulators for individual architectures.
  - **Solution:** Independently built at compile time. Share internal data structures and global variables. Unicorn aims for a single emulator supporting all architectures.
  - **Solution:** Isolate common variables and structures, ensure thread safety, and refactor to allow multiple instances of Unicorn simultaneously. Modify the build system to support multiple architectures on demand.

- **Issue 3:** Instrumentation for static compilation only.
  - **Solution:** Build a dynamic, fine-grained instrumentation layer from scratch. Support various levels of instrumentation (single-step, specific instruction, memory access, register read/write, exception handling, interrupt, syscall).

- **Issue 4:** Memory management.
  - **Solution:** Find and fix all memory leak issues. Refactor subsystems to track and clean up dangling pointers.

### Unicorn Engine
- **Independence:** Independent framework.
- **Compact Size:** Much more compact and lightweight.
- **Thread Safety:** Supports multiple architectures in a single binary.
- **Dynamic Instrumentation:** Provides an interface for dynamic instrumentation.
- **Security:** More resistant to exploitation.
- **Testing:** Easy to test and fuzz as an API.

### Showcase: box.py

### Keystone Engine
- **Developers:** NGUYEN Anh Quynh
- **Website:** [Keystone Engine](http://www.keystone-engine.org)

### Assembler Limitations
- **Standards:** No assembler meets our standards even in 2016.
- **Yasm:** X86 only, no longer updated.
- **Intel XED:** X86 only, missing many instructions, closed-source.
- **Other Important Architectures:** ARM, ARM64, MIPS, PPC, SPARC, etc.

### Requirements
- **Multiple Architectures:** x86, ARM, ARM64, MIPS, PPC, and more.
- **Multiple Platforms:** Windows, Linux, macOS, and more.
- **Multiple Bindings:** Python, Ruby, Java, C#, and more.
- **API:** Clean, simple, intuitive, and architecture-neutral.
- **Instruction Details:** Provide detailed breakdown of instructions.
- **License:** BSD.

### Workload
- **Architectures:** x86, ARM.
- **Maintenance:** Actively maintained and updated.
- **Platforms:** Windows, Linux.
- **Opcode Understanding:** Intel x86 with over 1500 documented instructions.
- **Binding Languages:** Support for Python and Ruby.
- **Project Scope:** Single-person effort, targeted for completion within 12 months.

### Good Assembler Characteristics
- **Architectures:** x86, ARM.
- **Maintenance:** Actively maintained and updated.
- **Platforms:** Windows, Linux.
- **Binding Languages:** Support for Python and Ruby.
- **License:** Friendly (BSD).
- **Ease of Setup:** Easy to set up.

### Not Reinventing the Wheel
- **Open Source Project:** Sets of modules for machine code representation, compiling, and optimizing.
- **Backed by Major Players:** AMD, Apple, Google, Intel, IBM, ARM, Imagination Technologies, Nvidia, Qualcomm, Samsung, etc.
- **Huge Community:** Forked from LLVM.
- **Multiple Architectures:** Ready and actively maintained.

### Are We Done?
- **LLVM Components:** LLVM includes disassembler, bitcode, InstPrinter, Linker Optimization, etc.
- **Codebase Complexity:** LLVM codebase is large and mixed.

### Issues and Solutions
- **Issue 1:** Keep only assembler code and remove unrelated components.
  - **Solution:** Rewrite some components but keep AsmParser, CodeEmitter, and AsmBackend code intact for future synchronization. Maintain code in C++.

- **Issue 2:** LLVM compiled into multiple libraries.
  - **Solution:** Modify linking setup to generate a single library (libkeystone.so, libkeystone.dylib, keystone.dll, keystone.lib).

- **Issue 3:** Relocation object code generated for linking.
  - **Solution:** Make the fixup phase detect and report missing symbols, propagate this error back to the top-level API `ks_asm()`.

- **Issue 4:** Address retention for relative branches.
  - **Solution:** Allow specifying the address of the first instruction, change the core to retain addresses, and fix encoding based on current and target addresses.

- **Issue 5:** Handle input errors.
  - **Solution:** Fix all exits and propagate errors back to `ks_asm()`, including parse and code emit phases.

- **Issue 6:** Support non-LLVM syntax.
  - **Solution:** Extend X86 parser for new syntaxes (Nasm, Masm, etc.). Build Python binding, and additional bindings (NodeJS, Ruby, Go, Rust, Haskell, OCaml) by the community. Keep syncing with LLVM upstream for important changes and bug fixes.

### Keystone is Not LLVM
- **Independent Framework:** Does not give up on bad-formed assembly.
- **Position Awareness:** Aware of current code position (for relative branches).
- **Compact Size:** Much more compact and lightweight.
- **Thread Safety:** Supports multiple architectures in a single binary.
- **Flexibility:** Supports X86 Nasm syntax.
- **Undocumented Instructions:** Supports undocumented X86 instructions.
- **Bindings:** Provides bindings (Python, NodeJS, Ruby, Go, Rust, Haskell, OCaml as of August 2016).

### Demo
- **Showcase: metame**

### One More Thing
- **IDA Pro:**
  - **Standard in Reverse Engineering:** Patching on the fly is essential.
  - **Keypatch:** A binary editor plugin for IDA Pro.
    - **Open Source:** Available at [Keystone Engine](https://keystone-engine.org/keypatch)
    - **Features:** On-the-fly patching in IDA Pro with multi-architecture support.
    - **Developers:** Nguyen Anh Quynh & Thanh Nguyen (rd) from vnsecurity.net.

### Latest Keypatch and DEMO
- **Fill Range:** Select start and end range and patch with bytes.
- **Access:** Edit | Keypatch | Fill Range.
- **Contact:** QQ: 2880139049

**THANKS [Hacker@KCon]**