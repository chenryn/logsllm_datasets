>  Need to build instruction breakdown-details 
ourselves. 
>  Expose semantics to the API. 
>  Not designed to be thread-safe. 
>  Poor Windows support. 
>  Need to build all bindings ourselves. 
>  Keep up with upstream code once forking LLVM to 
maintain ourselves. 
Issues 
>  Fork LLVM but must remove everything we do not 
need 
>  Replicated LLVM’s MC 
>  Build around MC and not changing MC 
>  Replace C++ with C 
>  Extend LLVM’s MC 
>  Isolate some global variable to make sure 
thread-safe 
>  Semantics information from TD file from LLVM 
>  cs_inn structure 
>  Keep all information and group nicely 
>  Make sure API are arch-independent 
Solutions 
Capstone is not LLVM 
 '
>  Zero dependency 
>  Compact in size 
>  More than assembly code 
>  Thread-safe design 
>  Able to embed into restricted firmware OS/ 
Environments 
>  Malware resistance (x86) 
>  Optimized for reverse engineers 
>  More hardware mode supported:- Big-Endian for 
ARM and ARM64 
>  More Instructions supported: 3DNow (x86) 
More Superiors 
>  Cannot always rely on LLVM to fix bugs 
>  Disassembler is still conferred seconds-
class LLVM, especially if does not affect 
code generation 
>  May refuse to fix bugs if LLVM backed 
does not generate them (tricky x86 code) 
>  But handle all comer case properly is Capstone 
first priority 
>  Handle all x86 malware ticks we aware of 
>  LLVM could not care less 
More Robust 
Demo 
 '
Showcase: x64dbg 
Unicorn Engine 
NGUYEN Anh Quynh   
DANG Hoang Vu  
http://www.unicorn-engine.org 
What’s Wrong with Current Emulator 
Nothing works even up until 2015 (First release of Unicorn Engine) 
Limited bindings 
Limited functions, limited architecture 
What Do We Need ? 
Multiple archs: x86, x86_64, 
ARM+ ARM64 + Mips + PPC 
Multiple platform: Windows, 
Linux, OSX, Android and more 
Multiple binding: Python, 
Ruby, Java, C# and more 
Pure C implementation 
Latest and updated 
architecture 
With JIT compiler technique 
Instrumentation eg. F7, F8 
Lots of Work ! 
Multiple archs: x86, ARM 
Actively maintained & update 
within latest arch’s change 
Multiple platform: Windows, 
Linux 
Understanding opcode, Intel 
x86 it self with 1500++ 
documented instructions 
Support python and ruby as 
binding languages 
Single man show 
Target finish within 12 months  
A Good Emulator 
Multiple archs: x86, x86_64, 
ARM, ARM64, Mips and more 
Actively maintained & update 
within latest arch’s change 
Multiple platform: Windows, 
Linux, OSX, Android and more 
Code in pure C 
Support python and ruby as 
binding languages 
JIT compiler technique 
Instrumentation at various 
level 
Single step 
Instruction 
Memory Access 
Open source project on system emulator 
Very huge community and highly active 
Multiple architecture: x86, ARM, ARM64, Mips, PowerPC, Sparc, etc (18 architectures) 
Multiple platform: *nix and Windows 
Not Reinventing the Wheel 
Fork from QEMU 
Support all kind of architectures and very updated 
Already implemented in pure C, so easy to implement Unicorn core on top 
Already supported JIT in CPU emulation, optimization on of of JIT 
Are we done ? 
Are We Done 
> 
Not just emulate CPU, but also device models & 
ROM/BIOS to fully emulate physical machines 
> 
Qemu codebase is huge and mixed like spaghetti 
> 
Difficult to read, as contributed by many different 
people 
Issues 1 
> 
Keep only CPU emulation code & remove everything 
else (devices, ROM/BIOS, migration, etc) 
> 
Keep supported subsystems like Qobject, Qom 
> 
Rewrites some components but keep CPU emulation 
code intact (so easy to sync with Qemu in future) 
Solutions 
> 
Set of emulators for individual architecture 
> 
Independently built at compile time 
> 
All archs code share a lot of internal data 
structures and global variables 
> 
Unicorn wants a single emulator that supports all 
archs 
Issues 2 
Solutions 
> 
Isolated common variables & structures 
> 
Ensured thread-safe by design 
> 
Refactored to allow multiple instances of Unicorn at 
the same time Modified the build system to support 
multiple archs on demand 
Are We Done 
> 
Instrumentation for static compilation only 
> 
JIT optimizes for performance with lots of fast-path 
tricks, making code instrumenting extremely hard 
Issues 3 
> 
Build dynamic fine-grained instrumentation layer from 
scratch Support various levels of instrumentation 
> 
Single-step or on particular instruction (TCG 
level) 
> 
Instrumentation of memory accesses (TLB 
level) 
> 
Dynamically read and write register 
> 
Handle exception, interrupt, syscall (arch-
level) through user provided callback. 
Solutions 
> 
Objects is open (malloc) without closing (freeing) 
properly everywhere  
> 
Fine for a tool, but unacceptable for a framework 
Issues 4 
Solutions 
> 
Find and fix all the memory leak issues 
> 
Refactor various subsystems to keep track and 
cleanup dangling pointers 
Unicorn Engine is not QEMU 
Independent framework 
Much more compact in size, lightweight in memory 
Thread-safe with multiple architectures supported in a single binary Provide interface for 
dynamic instrumentation 
More resistant to exploitation (more secure) 
CPU emulation component is never exploited! 
Easy to test and fuzz as an API. 
Demo 
 '
 '
Showcase: box.py 
Keystone Engine
NGUYEN Anh Quynh   
http://www.keystone-engine.org 
What’s Wrong with Assembler 
Nothing is up to our standard, even in 2016! 
Yasm: X86 only, no longer updated 
Intel XED: X86 only, miss many instructions & closed-source 
Use assembler to generate object files 
Other important archs: Arm, Arm64, Mips, PPC, Sparc, etc? 
What do we need? 
Multiple archs: x86, ARM+ 
ARM64 + Mips + PPC and 
more 
Multiple platform: Windows, 
Linux, OSX and more 
Multiple binding: Python, 
Ruby, Java, C# and more 
Clean, simple, intuitive & 
architecture-neutral API 
Provide break-down details on 
instructions 
Friendly license: BSD 
Lots of Work ! 
Multiple archs: x86, ARM 
Actively maintained & update 
within latest arch’s change 
Multiple platform: Windows, 
Linux 
Understanding opcode, Intel 
x86 it self with 1500++ 
documented instructions 
Support python and ruby as 
binding languages 
Single man show 
Target finish within 12 months  
A Good Assembler 
Multiple archs: x86, ARM 
Actively maintained & update 
within latest arch’s change 
Multiple platform: Windows, 
Linux 
Support python and ruby as 
binding languages 
Friendly license (BSD) 
Easy to setup 
Not Reinventing the Wheel 
Open source project compiler 
Sets of modules for machine code representing, compiling, optimizing 
Backed by many major players: AMD, Apple, Google, Intel, IBM, ARM, Imgtec, Nvidia, 
Qualcomm, Samsung, etc 
Incredibly huge (compiler) community around. 
Fork from LLVM 
Multiple architectures ready 
In-build assembler (MC module) 
Only, Only and Only build for LLVM 
actively maintained 
Very actively maintained & updated by a huge community 
Are We Done 
>  LLVM not just assembler, but also disassembler, 
bitcode, InstPrinter, Linker Optimization, etc 
>  LLVM codebase is huge and mixed like spaghetti 
Issue 1 
>  Keep only assembler code & remove everything 
else unrelated 
>  Rewrites some components but keep AsmParser, 
CodeEmitter & AsmBackend code intact (so easy 
to sync with LLVM in future, e.g. update)  
>  Keep all the code in C++ to ease the job (unlike 
Capstone) 
>  No need to rewrite complicated parsers 
>  No need to fork llvm-tblgen 
Solutions 
>  LLVM compiled into multiple libraries 
>  Supported libs 
>  Parser 
>  TableGen and etc 
>  Keystone needs to be a single library 
Issue 2 
Solutions 
>  Modify linking setup to generate a single library 
>  libkeystone.[so, dylib] + libkeystone.a 
>  keystone.dll + keystone.lib 
Are We Done 
>  Relocation object code generated for linking in the 
final code generation phase of compiler 
>    Ex on X86:  
>  inc [_var1] → 0xff, 0x04, 0x25, A, A, A, A 
Issue 3 
>  Make fixup phase to detect & report missing 
symbols  
>  Propagate this error back to the top level API 
ks_asm() 
Solutions 
Issue 4 
Solutions 
>  Ex on ARM: blx 0x86535200 → 0x35, 0xf1, 0x00, 
0xe1 
>  ks_asm() allows to specify address of first 
instruction  
>  Change the core to retain address for each 
statement 
>  Find all relative branch instruction to fix the 
encoding according to current & target address 
Are We Done 
>  Ex on X86: vaddpd zmm1, zmm1, zmm1, x → "this 
is not an immediate" 
>  Returned llvm_unreachable() on input it cannot 
handle 
Issue 5 
>  Fix all exits & propagate errors back to ks_asm() 
>  Parse phase 
>  Code emit phase 
Solutions 
Issue 6 
Solutions 
>  LLVM does not support non-LLVM syntax 
>  We want other syntaxes like Nasm, Masm, 
etc 
>  Bindings must be built from scratch 
>  Keep up with upstream code once forking LLVM to 
maintain ourselves 
>  Extend X86 parser for new syntaxes: Nasm, 
Masm, etc 
>   Built Python binding 
>  Extra bindings came later, by community: NodeJS, 
Ruby, Go, Rust, Haskell & OCaml 
>  Keep syncing with LLVM upstream for important 
changes & bug-fixes 
Keystone is not LLVM 
>  Independent & truly a framework 
>  Do not give up on bad-formed assembly 
>  Aware of current code position (for relative 
branches) 
>  Much more compact in size, lightweight in memory 
>  Thread-safe with multiple architectures supported 
in a single binary More flexible: support X86 Nasm 
syntax 
>  Support undocumented instructions: X86 
>  Provide bindings (Python, NodeJS, Ruby, Go, 
Rust, Haskell, OCaml as of August 2016) 
Fork and Beyond 
Demo 
 '
Show Case: metame 
Before 
After 
One More Thing
The IDA Pro 
IDA Pro 
§  RE Standard 
§  Patching on the fly is always a must 
§  Broken “Edit\Patch Program\ Assembler” is always giving us problem 
ARM 
PUSH RAX 
PUSH ESI 
Keypatch 
A binary editor plugin for IDA Pro 
§  Fully open source @ https://keystone-engine.org/keypatch 
§  On the fly patching in IDA Pro with Multi Arch 
§  Base on Keystone Engine 
§  By Nguyen Anh Quynh & Thanh Nguyen (rd) from vnsecurity.net 
Latest Keypatch and DEMO 
Fill Range 
§  Select Start, End range and patch with bytes 
§  Goto: Edit | Keypatch | Fill Range 
§  QQ: 2880139049 
T
H
A
N
K
S
[ Hacker@KCon ]