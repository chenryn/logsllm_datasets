a route with prepends for some upstreams and no prepends (pre-
ferred) for others. Then, we use ICMP/TCP/UDP ping probes to-
wards a diverse set of targets to generate response traffic towards
the PEERING testbed AS. If the traffic enters via one of the preferred
ASes, we refer to the result as a “hit”, otherwise as a “miss”. We
note that the PEERING testbed allows us to correctly identify in
which of the POPs the response has arrived.
Target selection. We base our target selection on Rapid 7’s list
of HTTP/1.1 GET responses [51]. We first select only IP addresses
that responded with the HTTP status code “200 OK” when queried
by an HTTP/1.1 GET request. To sample a diverse set of targets, we
first map IPs to ASes by performing a longest prefix match on the
closest snapshot of our BGPWeekly data set. Afterward, we classify
ASes as follows: (i) we use a public list [69] to identify Tier-1 ASes;
(ii) we use CAIDA’s AS type classification [13] to identify “Content”
and “Enterprise” ASes; (iii) we identify the remaining ASes as either
“Access” or “Transit”—based on whether we observe them only as
origin ASes in the BGPWeekly snapshot12. Since the Tier-1 class only
contains 23 ASes, we use all of them as target ASes. For each of the
remaining classes, we sampled 250 target ASes, resulting in 1023
targeted ASes. By running our own GET requests, we make sure to
select only ASes for which 20 different IPs respond, resulting in a
final target set of 20460 IP addresses.
Upstream selection. While the PEERING testbed has hundreds
of upstreams, only roughly 20 provide transit. Since ASPP will have
no effect if the prefix is subject to prefix aggregation [52] by a
remote AS, we check how “well” our prefix propagates. We then
announce it in one upstream per time and check how many mon-
itors observe the prefix without aggregation. We filter out those
upstreams that propagate our prefix to less than 200 monitors after
30 minutes of convergence. After this step, 11 transit providers—
present at 10 different PoPs—remain. For the sake of simplicity, we
focus on only one transit provider per PoP. We use the following
PoPs: Amsterdam (A), Clemson University (C), Georgia Institute of
Technology (GA), GRnet (GR), Northeastern University (N), Seat-
tle (S), UFMG (UF), Utah (UT), University of Washington (UW), and
University of Wisconsin (W).
Experiments. Each experiment employs a pair of PoPs, and we
repeat it for all combinations and for different sizes of prepending
(none, one, two, and three). We then run three sets of experiments.
In the first set, we pick one upstream from each PoP and announce
our test prefix on both—one with prepending and one without
prepending. In the second set, we announce the prefix to all up-
streams, prepending for all but one. In the last set of experiments,
we announce the prefix to all upstreams but prepend to only one.
12All those ASes are in the “Access/Transit” class in CAIDA’s classification.
AS-Path Prepending: there is no rose without a thorn
IMC ’20, October 27–29, 2020, Virtual Event, USA
Figure 13: Hitrates by protocol and tar-
get class.
Figure 14: Hitrates when prepending 1
(top)|N-1 (bottom) PoPs.
Figure 15: Prefix-origin: Pairs with at
least X prepends.
We refer to specific choices of prepending size, upstreams, and
experiment-class as an iteration. Our experiments took place be-
tween August 27th, 2020, and September 21st, 2020.
Iteration schedules. We deploy two similar iteration schedules
that only differ in their first two rounds of announcements. For the
“Post”-schedule, we start each iteration announcing our prefix P via
all upstreams without any prepending. After waiting 15 minutes
to allow BGP to converge, we announce P with X prepends via
the chosen upstream (Appendix § C shows a detailed graphical
timeline). For the “Pre”-schedule, we do the opposite: we first an-
nounce P with X prepends via the chosen upstream; we wait for
15 minutes, and finally, announce P without prepending via all but
the chosen upstream. We employ both schedules to contain the
impact of route age as a tie-breaking factor. We wait another 15
minutes for both schedules for BGP convergence before starting a
25 minutes long probing period. Each probe consists of ICMP, TCP,
and UDP pings since the transport protocol can potentially bias
the forwarding path [7, 48]. We probe once per minute all targets.
To reduce probing bursts, we spread the packets evenly across the
one minute time interval. To enable targets to opt-out, we embed
our contact information in the payload of every probe. The cleanup
phase starts 30 minutes after the start of the probing phase. Thus,
we have a 5-minute break to ensure that the last responses can
arrive before we withdraw the prefix. To allow for BGP to converge
and minimize the risk of BGP Route Flap Damping, we wait for 30
minutes before starting a new iteration.
Data cleaning. In our results, we only consider those targets
for which we see a significant number of responses: we require at
least 10 of 25 probes for each protocol to be successful. However,
we notice multiple probing artifacts, including many duplicates,
additional ICMP packets, and RST packets. Thus, we first clean our
data in the following manner: (i) we remove duplicate packets by
relying on ICMP and TCP sequence numbers—since we sent SYN-
packets, we receive duplicate TCP SYN-ACKs and RESET packets
caused by receiver timeouts; (ii) we only consider ECHO-REPLY
ICMP packets—we remove, in particular, ICMP TYPE 3 (destination
port unreachable) for UDP and TCP probes; (iii) we hardly get any
responses to the UDP probes, hence, we do not further consider
them; (iv) for a given iteration, we remove all targets for which we
receive responses via multiple interfaces—this can, e.g., occur if an
AS uses load balancing. Overall, these steps remove less than 3% of
the unique iteration-target combinations for ICMP and TCP.
Location matters when using only two upstreams. First, we
look at how different prepending sizes influence routing behavior
when using only two upstreams. Figure 11 shows the ECDF for the
fraction of potentially movable targets (i.e., those targets initially
routed via the later prepended upstream) per iteration and iteration
type. We observe that our tested upstream-pairs cover the entire
spectrum of scenarios, i.e., few, medium, and many potentially
movable targets. Given this insight, we investigate how many of
the potentially movable targets have been moved by each prepend
size. Figure 12 shows an ECDF for the fraction of actually moved
targets (based on the number of potentially movable targets) per
PoP combination. We observe that the effectiveness of prepending
can strongly depend on the location (for around 20% of cases, ASPP
has moved no targets, while for another 20% , it moved almost all
targets). We further observe that the change from a prepend of
size one to a prepend of size two has a much larger impact than
the change from size two to three. While we observed that the
Pre-schedule performs slightly better than the Post-schedule (see
the effectiveness of the maximum prepend size for both schedule
types in the figure), the route age did not significantly affect our
results. When manually looking into our data, we observe that for
some pairs, the traffic shifts can happen either way (e.g., GRnet
and Northeastern University), whereas for others, prepending has
little effect (e.g., for Georgia Institute of Technology and Clemson
University). The lack of effectiveness of ASPP might be caused
by the low connectivity degree of the ASes. However, we observe
a different result for Northeastern University despite the same
number of upstream providers of Clemson University and Georgia
Institute of Technology. This highlights that location (not only
connectivity) plays an essential role in the effectiveness of ASPP.
In addition, we observe that traffic shifts, in most cases, are not
IMC ’20, October 27–29, 2020, Virtual Event, USA
Pedro Marcos et al.
gradual; instead, there is a minimum prepend size necessary to shift
a majority of the targets.
Effectiveness differs based on the target class. Based on the
above results, we study if the probing protocol and target class
change the effectiveness of ASPP. Figure 13 shows a box plot of
per-target hit rates (i.e., fraction of experiments where the target
was a hit) per prepend size, network type, and transport protocol.
Comparing the top plot with the one at the bottom, highlights that
the overall hit rates are the same for both protocols. Comparing
the different network classes, shows that Tier-1 targets were the
hardest to influence using ASPP; however, the difference between
target classes is not statistically significant.
With many upstreams, ASPP is able to shift almost all tar-
gets consistently. Finally, we analyze prepending’s effectiveness
for more than two upstreams (second and third sets of experi-
ments). Figure 14 shows the hit rate per PoP when only one PoP
is prepended (top) or when all other PoPs are prepended (bottom).
In the experiments in which all but one upstream use prepending
(bottom plot), we observe that, except for few cases, even small
prepending sizes steer all traffic to the non-prepended upstream.
The same holds for the inverse (top plot). If only a single PoP
prepends, its hit rate quickly drops with increasing prepend size;
however, it never drops to zero.
Discussion. In conclusion, with only two upstreams, the effec-
tiveness of ASPP is strongly dependent on the location within the
routing ecosystem; whereas with many upstreams, ASPP is able to
shift almost all targets consistently. This notion is consistent with
our conversations with operators. On the one hand, a few operators
told us that certain ASes (mostly CDNs) might ignore prepends
during their best-route selection, leading to limited effectiveness.
On the other hand, many operators claimed that prepending works
well for their networks most of the time, highlighting that ASPP is
indeed useful for certain ASes.
7 SECURITY IMPLICATIONS
In this section, we shed light on some of the security concerns
of ASPP that the community recently brought to network oper-
ators’ attention [37–39, 63]. We first analyze if ASes manipulate
prepended paths, i.e., remove prepends. Then, we experimentally
verify and evaluate—on the Internet—the potential impact of hijack-
ing of prepended prefixes as a basis for discussing the increased
vulnerability of prepended prefixes. Finally, we estimate if ASes
that prepend their prefixes also use RPKI-based Route Origin Vali-
dation (ROV) to protect their prefixes against hijacks.
7.1 Is removing prepends a common case?
When propagating routes, ASes should prepend their ASN at least
once and keep the remaining AS path unchanged [52]. Nevertheless,
no mechanism prevents an AS from modifying the path. Indeed,
there have been reports about ASes (possibly) removing prepends
from paths [76]. An AS might remove (all) prepends from a path to
create a shorter path and potentially attract more traffic. Besides
malicious behavior (i.e., for traffic inspection), potential reasons
include economics (e.g., to earn revenue by trying to increase the
95th-percentile of the exchanged traffic [46, 59]) and performance
(e.g., to adapt traffic flow).
Consider the scenario of Figure 1b, where AS A announces the
prefix P to its two upstreams (AS B and AS C). AS B receives the
non-prepended route, while AS C receives a route with three extra
prepends. AS A would expect that most of the traffic towards prefix
P would arrive on the link with AS B. Now suppose that AS C
intends to increase its revenue. If AS C removes (all) prepends
added by AS A, it makes its route shorter and more attractive to
others.
Methodology. We check if we can observe such behavior hap-
pening systematically in the wild. We perform active measurements,
since using passive BGP data to infer path manipulations is difficult
(e.g., due to lack of visibility). Using the PEERING testbed, between
May 3rd, 2020 and May 12th, 2020, we announce our prefix with
three prepends via one of the PEERING’s upstreams, and 30 minutes
later, we withdraw it. After the withdrawal, we wait for another 30
minutes before starting a new iteration using a different upstream.
After iterating through all available upstreams, we analyze all BGP
updates (visible at route collectors) for our prefix. If we identify an
update where at least one prepend is missing, we mark the upstream
for further analysis. In the end, we do an in-depth experiment for
the marked upstreams (that removed at least one prepend). For
each of these, we announce a prepended path and wait 15 minutes
for BGP to converge. Then we manually inspect the chosen best
routes via BGP looking glasses and route servers to identify which
AS is likely the one that is removing prepends. Then, we withdraw
the prefix. After 45 minutes, we check the next marked upstream.
We announce our prefix using 231 different upstreams, resulting in
more than 22k observed paths and 738 traversed ASes.
Prepending removal is rare. After manual investigation, we
find that a single AS removed prepends, on a single path (in a
previous run of this experiment, in September 2019, we found three
ASes consistently removing prepends). We cannot attribute this to
malicious behavior, as we learned from conversations with network
operators that some route optimizers might remove prepends.
7.2 Can ASPP “ease” prefix hijackings?
By artificially increasing the AS path length, an AS makes a route
“less attractive” to other ASes. However, this behavior may create
opportunities for other ASes to hijack this prefix for a larger part
of the Internet ecosystem, since longer paths are more suitable
for prefix hijacking [8]. Recall the scenario of Figure 1b. Let us
assume an AS X (un)intentionally originates a path for prefix P
that contains AS A as the first hop. ASes that use a prepended path
are more likely to adopt this new route (originated by AS X) since
it is shorter than the one originally propagated by AS C. Possible
variations of this scenario reflect different prefix hijacking types
(e.g., using an illegitimate origin, or manipulating the path so that
the malicious AS is next to the actual origin AS [17, 60]) and route
leaks [32, 61]. In all these scenarios, a “bad” route may replace a
legitimate prepended route.
Routes with at least three prepends are more vulnerable
to prefix hijacking. Recall that there have been reports that ASPP
may increase the risk of prefix hijacking [37, 38, 63]. To better
understand to which extent different lengths of ASPP facilitate the
adoption of hijacked routes, we performed an experiment using the
PEERING testbed.