0
1
0
0
0
0
0
0
6
0
Sabre
Linux
0
0
1
1
0
1
1
1
3
1
2
1
1
4
1+1†
6+1†
3+4†
Sabre
VxWorks
1
1
2
0
0
1
0
0
1
0
1
1
1
0
0
0
1
WRT54GL
Linux
0
0
0
0
0
0
0
1
1
0
0
0
2
0
0
0
0
SteamLink
Linux
0
0
1
0
1
0
1
0
1
1
4
1
1
1
0
4
1
not found during fuzzing or analysis) and false positives (i.e.,
non-handler code mistakenly identiﬁed by the divergence anal-
ysis). We also demonstrate that our preprocessing successfully
reduces the size and number of traces we need to analyze.
Finally, we perform two case studies with platforms in our
evaluation dataset. To understand the impact of disabling IRQ
handlers on a real system (the Raspberry Pi), we systematically
evaluate the effect of disabling each handler found across
three operating systems (Linux, FreeBSD, and RiscOS). Next,
we give a practical demonstration of IRQDebloat’s ability to
reduce attack surface with the popular Steam Link stream-
ing device, showing that disabling the IRQ handler for the
WiFi/Bluetooth functionality succesfully blocks a Bluetooth
exploit. We then systematically measure the attack surface
reduction (ASR) on this device by counting how many CVEs
would have been blocked over the past ﬁve years by disabling
each interrupt on the device.
A. Hardware Ground Truth
To characterize the types of interrupt controllers in our
evaluation corpus, we analyzed the datasheets, kernel source
code, and (for devices supported by QEMU) the QEMU
emulated peripheral source. Broadly, we ﬁnd two main ways of
identifying a pending interrupt i: either by setting the i-th bit in
a 32-bit register, or by returning the integer i. This validates
our fuzzing strategy, which systematically enumerates small
integer values as well as setting each possible bit in each 32-
bit MMIO register.
The Raspberry Pi has the most complicated IRQ dispatch
hardware among the tested platforms. The BCM2837 SoC has
4 CPU cores, and each core has an independent 32-bit IRQ
source register to signal which peripheral device raised the
IRQ. Every bit of the IRQ source register is used to determine
one speciﬁc device, and device IRQs can be conﬁgured to
route to any one of the cores’ IRQ source register, including
Inter-Processor Interrupts (IPI), Performance Monitor Unit
(PMU), Local Timer etc. Among these, there is also a sec-
ondary interrupt controller from the GPU (interrupt 1(cid:28)8, or
256) chained to the global interrupt controller, which has three
further 32-bit IRQ pending registers that signal which global
device raised the IRQ, such as global timer, UART controller,
GPIO controller etc. The masked bits of these 3 registers in
combination determine the source device during an interrupt.
The ASPEED Romulus has a similar, albeit simpler, hard-
ware design. It has two 32-bit source registers at the top-level,
and each bit of the registers signals one particular device.
Similarly, users can further register chained IRQ handlers
under each device to dispatch device speciﬁc interrupts. In
our setup, we have a I2C controller that further dispatches
one hardware IRQ in a bit-masked 32-bit register, and a
GPIO controller that dispatches two registered IRQ handlers
through 8 MMIO registers, each of which can indicate up to
32 interrupt sources (although in practice only the ﬁrst 29 are
enabled on the Romulus).
Three devices in our evaluation dataset (SABRE Lite,
Samsung NURI, and Steam Link) use the standard ARM
GIC [7], which is thoroughly documented by ARM. To obtain
the IRQ number, the GIC provides a single 32-bit MMIO regis-
ter, GICC_HPPIR which returns the highest-priority pending
interrupt in its lowest 10 bits (for a total of 1024 possible
IRQ numbers, although IRQs 1020-1023 reserved for signaling
conditions such as spurious interrupts). In addition to the GIC,
the NURI and Steam Link have additional secondary interrupt
controllers. The NURI has a “combiner” peripheral that allows
multiple peripherals’ interrupts to be grouped into a single
GIC input and supports ﬁve different groups; each group has
a corresponding 32-bit MMIO register that indicates which
member of the group raised the interrupt using a bit set.
The Steam Link has two secondary Synopsys DesignWare
interrupt controllers on the Advanced Peripheral Bus (APB).
Each APB interrupt controller has a 32-bit register where each
bit represents a separate interrupt.
Unlike many of the ARM systems we examined, the MIPS-
based Linksys WRT54GL has a well-documented way of
handling interrupts. The interrupts are signaled in the CP0
Cause register through the IP0–IP7 bit ﬁelds (for a maxi-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1616
mum of 8 interrupts). Each interrupt can be independently
enabled/disabled in the CP0 Status register through the IM0–
IM7 mask bits. Notably, MMIO is not used, meaning that we
do not need to actually fuzz the MMIO values to collect traces.
More complex MIPS devices may include dedicated interrupt
controller peripherals (e.g., the MIPS Malta board uses a PC-
style Intel 82C59 interrupt controller, and the MIPS Boston
board uses the MIPS Global Interrupt Controller (GIC)).
Finally, the BeagleBone has the simplest design compared
to the other boards. It reads a 7-bit integer value (128 total
possible IRQs) from the interrupt controller register, and
dispatches directly using the hardware IRQ number. We did
not encounter any chained IRQ handlers with the BeagleBone
in our setup.
B. OS Ground Truth
To verify our analysis results, we ﬁrst need to obtain
the ground truth of how many IRQ handlers are actually
registered, and how many of those registered handlers are
actually used at the runtime.
For Linux and FreeBSD, which are open-source, we in-
strumented the kernel source and added print functions to
the interrupt registration APIs. We instrument irq request irq,
irq request percpu irq and request threaded irq in the Linux
kernel and intr setup irq in the FreeBSD kernel. For RiscOS,
which has a fairly simple design for its IRQ handling, we
studied the code for the interrupt handling routine, and then
located and parsed the device and IRQ data structures from the
memory dump to enumerate the registered handlers. Finally,
for VxWorks, we reverse engineered the interrupt handling
code (aided by the presence of debug symbols in our evalua-
tion image) and then used gdb to enumerate the list of handlers
from a running system.
Table II shows the listing of registered IRQ handlers we
found in each operating system. Note that
threaded IRQ
handlers are not included in our evaluation. We discuss this
limitation further in Section VI.
C. Fuzzing Evaluation
Different interrupt controllers and implementations of IRQ
dispatching across operating systems may have different be-
haviors for the same sequence of fuzzed MMIO values. In
this section, we evaluate how effective our fuzzing strategies
(described in Section III) are at covering the IRQ handlers for
each platform.
Figure 4 shows the IRQ handler coverage for each platform
as fuzzing proceeds. In our test set, we see that IRQDebloat’s
fuzzer uncovers almost all handlers within 3 hours; in one
case (Linux running on SABRE Lite) it takes up to 24 hours
to uncover the ﬁnal handler.
By comparing to the ground truth for each platform, we
ﬁnd only two handlers that the fuzzer is unable to uncover:
mxc epdc irq handler and vdoa irq handler in Linux for
SABRE Lite. On further investigation, we found that these
are masked (i.e., disabled) by the operating system and cannot
be triggered in our conﬁguration. In other words, the fuzzer
successfully ﬁnds all of the reachable handlers in our test set.
Fig. 4. Fuzzing coverage over time.
EFFECT OF TIMER/UART POLLING REMOVAL
TABLE III
# Blacklisted MMIO
Romulus Linux
Sabre VxWorks
RasPi FreeBSD
RasPi RiscOS
Beagle Linux
RasPi Linux
Nuri Linux
Sabre Linux
SteamLink Linux
4
0
1
0
2
1
4
3
0
Before
490,446
66
50
25,583
2,166
1,277
41,540
21,293
15,106
After
1087
N/A
647
N/A
184
681
266
86
N/A
D. Preprocessing
The goal of our preprocessing stage is to simplify the traces
by minimizing common sources of noise (e.g., timer/UART
polling) and extracting shorter I/O sequences that allow han-
dlers to be found earlier. To evaluate the effect of this prepro-
cessing, we measured the minimum, maximum, and average
position in the trace for each handler on each platform. Across
the platforms tested, we ﬁnd that I/O sequence grouping
reduces the average number of blocks in the trace needed to
reach a handler from 47,171 to 6,935.
We also investigate the effect of identifying and blacklisting
polling loops. Table III shows the number of grouped I/O
sequences before and after applying the IO blacklist. (We omit
WRT54GL here since it does not use MMIO for interrupt
dispatching.) Each grouped I/O sequence is replayed to create
a trace for the divergence analysis, so reducing the number of
such sequences is critical for performance. We ﬁnd that our
heuristic effectively reduces the number of sequences we need
to consider by between 1.9X and 451X (151X on average),
indicating that it provides signiﬁcant savings.
E. Divergence Analysis Results
We report the results of our divergence analysis in Table IV.
In addition to false positives and negatives, we also include
the number of chained handlers (“Chain”) and the number
of default handlers (“Default”). These represent handlers that
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1617
10-1100101102103104105Time (s)0.00.20.40.60.81.0Fraction of IRQ HandlersNuri_LinuxWRT54GL_LinuxBeagle_LinuxSabreLite_VxWorksRomulus_LinuxRasPi_LinuxSteamLink_LinuxRasPi_RiscOSSabreLite_LinuxRasPi_FreeBSDDIVERGENCE ANALYSIS FALSE POSITIVES AND NEGATIVES
TABLE IV
TABLE V
IRQ HANDLER REMOVAL RESULTS.
Beagle Linux
Nuri Linux
RasPi FreeBSD
RasPi Linux
RasPi RiscOS
Romulus Linux
Sabre Linux
Sabre VxWorks
WRT54GL Linux
SteamLink Linux
Total
23
11
12
14
16
19
28
12
4
21
FN
0
0
0
1
0
0
2
0
0
0
FP
0
0
0
0
0
2
0
2
0
3
Chain
Default
2
6
1
3
0
6
4
0
0
4
2
1
0
0
1
2
1
0
0
1
UART
USB
Video Controller
DMA
GPIO
PMU
Timer
IPI
Linux
(cid:88)
(cid:88)
(cid:88)
(cid:88)
N/A
(cid:88)
A
A
FreeBSD
(cid:88)
(cid:88)
N/A
N/A
(cid:88)
(cid:88)
A