We can also save time in generating p by not requiring p
to be a safe prime. The cost of breaking Difﬁe-Hellman
is a function of both the size of p and the size of the larg-
est prime factor of p-1. It is much faster to ﬁnd a p with
the property that (p-1)/2 isn’t prime, but merely has a
large prime factor. Although it is believed that Difﬁe-
Hellman will be sufﬁciently secure with a p of this form,
we run into a problem of ﬁnding a generator for p if p is
not a safe prime, since without knowing the factoriza-
tion of p-1 it is difﬁcult (if not impossible) to determine
whether a given g is a generator of the group. Tradi-
tional Difﬁe-Hellman does not need to assure that g is a
generator. It only needs to assure that g generates a large
subgroup of p. But for us, it is important that our g
(which will be 2) is a generator. Otherwise, it might leak
information to an eavesdropper. If the eavesdropper
knew, for a particular password, that 2 was not a genera-
tor for the corresponding p, and then saw a value that 2
could not generate for that p, that password could be
ruled out for that user.
3.4.3  User-Supplied Hint
Another method of increasing performance is to use a
trick suggested by Jeff Schiller of giving the user a hint
to tell the workstation, such as several of the bits of the
selected p. If the user can’t remember the hint, the work-
station must test all candidate numbers. If the user mis-
remembers the hint, then authentication will fail since
the workstation will compute the wrong p. The user will
recognize that it is probably the wrong hint since com-
puting p will be as slow as without the hint.
How much will performance be improved? Assuming
you’ve sieved for factors of p and (p-1)/2 up to 10,000,
to get a safe prime of 512 bits you’d have to test, on
average, 1600 numbers. On a 400 Mhz processor, a safe
prime of 512 bits can be found within our budget of 10
seconds without the hint. Using the “hint” telling you,
for instance, 6 bits of p, reduces computation by a factor
of 64, making it under our target of 10 seconds even for
1024-bit safe primes. This hint could be in the form of a
single character (using upper and lower case, numbers,
and two more characters).
3.5 Measured Timing for Generating p
On a 400 MHz processor, using code that was not opti-
mized for performance, the following table shows mean
generation times with and without a six-bit user-sup-
plied hint.
size of p
without hint
with hint
512
768
1024
8.1 seconds
.11 seconds
34 seconds
.57 seconds
111 seconds
1.8 seconds
Times for Generating p
Even more speedup could be attained with a larger hint,
but of course this stretches the abilities of the human to
remember the hint.
4  Avoiding a Password-Equivalent at the
Server
In this section we discuss a different method of avoiding
storing a password-equivalent at the server that is higher
performance at the server than previous schemes. The
approaches suggested in this section could be used for
EKE and SPEKE as well, but not for AMP or SRP. The
best previous method, SRP, involved doing two expen-
sive exponentiations and one exponentiation with a 32-
bit exponent. We present two new variants. The ﬁrst is a
little better in performance than SRP, assuming equal
sized moduli, because our inexpensive exponentiation is
an RSA veriﬁcation (so the exponent could be as small
as 3, rather than a 32-bit number as in SRP). The second
involves only a single Difﬁe-Hellman exponentiation at
the server and an RSA veriﬁcation, so it is about half as
much computation at the server as SRP, but it gives up
perfect forward secrecy if someone steals Bob’s data-
base. (and again, this is assuming equal sized moduli).
In any of the schemes (ours as well as augmented EKE,
SPEKE and SRP) it will be possible to do off-line pass-
word-guessing using a stolen copy of the server data-
base, but without correctly guessing and verifying the
password, the information in the server database would
not be usable for impersonating the user to that (or any
other) server.
The augmented versions of EKE and SPEKE, and proto-
cols such as SRP and AMP do variants of having the
server store gX mod p (where X is a function of the pass-
word), and require knowledge of X on the client. The
augmented feature of these protocols requires an extra
expensive exponentiation at the server.
By using an RSA private key encrypted with Alice’s
password in place of gX mod p we can reduce the total
computation for Bob to two expensive exponentiations
and a single RSA public key verify, which can be very
inexpensive (for example, if the public exponent is 3).
Basing it on RSA is especially attractive because the
same protocol works for download of an RSA private
key as for mutual authentication. Bob stores p, Y (an
RSA private key encrypted with the user’s password),
and pub (the associated public key). The protocol is:
Alice
calculates p from pwd
choose random A
Bob
stores:
p, Y, pub
“Alice”, 2A mod p
choose random B
2B mod p, {Y}2AB mod p
[h(2AB mod p)]signed with Alice’s RSA priv key
No pwd-equivalent stored at server
In the protocol above, Bob has to compute two expen-
sive exponentiations: raising 2 to B mod p, and raising
(2A mod p) to B mod p, and an inexpensive exponentia-
tion (an RSA verify). This is slightly better in perfor-
mance than the best previous scheme (SRP) because our
inexpensive exponentiation, an RSA verify,
is less
expensive that SRP’s inexpensive exponentation with a
32-bit exponent. It might also be the case with a secret
modulus p (our scheme described in section 3) that the
Difﬁe-Hellman exchange can be secure with a smaller p,
which would further reduce the work for Bob. Note also
that Alice must authenticate Bob. She does this by
checking to see if Y, when decrypted, has the encoding
of an RSA private key.
With the RSA-based scheme, we can reduce the work
for Bob down to a single expensive exponentiation by
allowing Bob to use the same B each time and adding a
nonce as we did in section 3.1. If we make the session
key be a function of the nonce as well as the Difﬁe-Hell-
man key, we can achieve “partial forward secrecy”, a
term we are using to mean someone would have to steal
both Alice’s private key and Bob’s database in order to
decrypt previous conversations.
Alice
calculates p from pwd
choose random A
Bob
stores:
p, pub, B, 2B mod p, and
Y={priv}pwd
“Alice”, 2A mod p
chooses nonce R
2B mod p, {R}pub, {Y}2AB mod p
h(R, 2AB mod p)
Partial forward secrecy, single exponentiation
The session key should be some function of both the
Difﬁe-Hellman key and R, such as h(1,R,2AB mod p).
We give up perfect forward secrecy because if someone
steals both B and Alice’s private key, they can decrypt a
previously recorded conversation, since they will be
able to compute 2AB mod p (because they will have sto-
len B from Bob’s database), and extract R (because of
having stolen Alice’s private key).
5  Preventing Servers from Impersonating
Each Other to the User
The third proposed enhancement is to prevent servers
from impersonating each other to the user. If the infor-
mation stored for user Alice is the same at server Bob as
at server Carol, then Bob and Carol will be able to
impersonate each other to Alice.
For this reason it is important to customize the informa-
tion per server, so that even if Alice chooses the same
password at multiple servers, the information at each
will be different, and not usable to impersonate a differ-
ent server to Alice.
The method of accomplishing this is to have some of the
information stored for Alice be a function of the pass-
word and the server’s name. It is desirable for Alice to
have the same value for p at each server, since it is com-
putation-intensive for Alice to compute p. So there
should be some other quantity, X, that is a function of
the server name. X will enable Bob to authenticate to
Alice as “Bob” rather than as “any server on which user
Alice has that password”. Then even if the p is the same
at Bob and Carol, they will not be able to impersonate
one another to Alice because each only knows its own
X.
So we suggest that p be computed using a seed which is
solely a function of the user’s name and user’s pass-
word, and X be a function of the server’s name, the
user’s name, and the user’s password.
Bob stores p (generated from Alice’s name and pass-
word, Y (Alice’s private RSA key encrypted with her
password), X (a hash of Alice’s name, password, and
Bob’s name), and Alice’s public key:
Alice
calculates p and X
choose random A
Bob
stores:
p, Y, pub, X
“Alice”, 2A mod p
chooses random B
K=h(X,2AB mod p)
“Bob”, 2B mod p, {Y}K
[h(K)] signed with Alice’s RSA priv key
Prevent servers impersonating each other
6  Summary
In this paper we present PDM, a new method of doing
strong password-based credentials download or mutual
authentication. It has better performance at the server
than any of the existing schemes, especially since it can
use smaller moduli, because there is no single modulus
on which the world could concentrate its Difﬁe-Hellman
breaking efforts. Instead, Difﬁe-Hellman would have to
be broken per user per password guess. We show that
although performance at the client is far more expen-
sive,
is “good enough”, especially with an
optional user-supplied hint. We also present a method
for avoiding a password equivalent which is less expen-
sive than existing schemes at the server. This scheme
could be applied to EKE or SPEKE, but not to schemes
such as SRP and AMP that depend on everything being
based on Difﬁe-Hellman. And we present a scheme with
“partial forward secrecy” that is half as expensive as
SRP, even with the same sized modulus.
that
it
Acknowledgments
We wish to thank Eric Rescorla for writing the code for
generating PDM primes, and timing it for various sizes
of p. We also wish to thank David Jablon for offering
helpful comments.
References
[BM92] S. Bellovin and M. Merritt, "Encrypted Key
Exchange: Password-based protocols secure against dic-
tionary attacks", Proceedings of the IEEE Symposium
on Research in Security and Privacy, May 1992.
[BM94] S. Bellovin and M. Merritt, "Augmented
Encrypted Key Exchange: a Password-Based Protocol
Secure Against Dictionary Attacks and Password File
Compromise”, ATT Labs Technical Report, 1994.
[BMP00] V. Boyko, P. MacKenzie, and S. Patel, “Prov-
ably Secure Password Authenticated Key Exchange
Using Difﬁe-Hellman”, Advances in Cryptology -
EUROCRYPT 2000.
[BPR00] M. Bellare, D. Pointcheval, and P. Rogaway,
“Authenticated Key Exchange Secure Against Dictio-
nary Attacks”, Advances in Cryptology - EUROCRYPT
2000.
[DH76] W. Difﬁe and M. Hellman, "New Directions in
Cryptography", IEEE Transactions on Information The-
ory, November 1976.
[FK00] W. Ford and B. Kaliski, “Server-Assisted Gen-
eration of a Strong Secret from a Password”, Proceed-
ings of
the IEEE 9th International Workshop on
Enabling Technologies: Infrastructure for Collaborative
Enterprises, 2000.
[GL00] O. Goldreich and Y. Lindell, “Session-Key Gen-
eration using Human Passwords Only”, Cryptology
ePrint Archive: Report 2000/057.
[Jab96] D. Jablon, "Strong password-only authenticated
key exchange", ACM Computer Communications
Review, October 1996.
[Jab97] D.
Jablon, "Extended Password Protocols
Immune to Dictionary Attack", Proceedings of the
WETICE `97 Enterprise Security Workshop, June 1997.
[Kwon01] T. Kwon, “Authentication and Key Agree-
ment via Memorable Password”, ISOC NDSS Sympo-
sium, 2001.
[KPS95] C. Kaufman, R. Perlman, and M. Speciner,
"Network Security: Private Communication in a Public
World", Prentice Hall, 1995.
[MS99] P. MacKenzie and R. Swaminathen, “Secure
Network Authentication with Password Identiﬁcation”,
submission to IEEE P1363.
[Pat97] S. Patel, "Number Theoretic Attacks On Secure
Password Schemes", Proceedings of the IEEE Sympo-
sium on Security and Privacy, May 1997.
[PK99] R. Perlman and C. Kaufman, “Secure Password-
Based Protocol for Downloading a Private Key”, ISOC
NDSS Symposium, 1999.
[RCW98] M. Roe, B. Christianson, D. Wheeler, “Secure
Sessions from Weak Secrets, Technical report from Uni-
versity of Cambridge and University of Hertfordshire,
1998.
[SS88] G. Steiner and J. Schiller, "Kerberos: An authen-
tication service for open network systems", Proceedings
of the USENIX Winter Conference, February 1988.
[Wu98] T. Wu, "The Secure Remote Password Proto-
col", ISOC NDSS Symposium, 1998.