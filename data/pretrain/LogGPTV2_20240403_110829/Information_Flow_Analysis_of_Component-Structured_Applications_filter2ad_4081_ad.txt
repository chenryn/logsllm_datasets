patient requires that his record may be accessed only by (cid:21)
and himself and therefore adds the sub-label (cid:6) (cid:2) (cid:21)(cid:6) (cid:6) to
the objects P1DPatConﬁd and P1DHospConﬁd. The hos-
pital prevents other principals reading the hospital conﬁ-
dential part of the record by attaching sub-label (cid:21) (cid:2) (cid:21) to
the label of P1DHospConﬁd. Likewise the labels of the
components of (cid:8)’s patient record are set to (cid:8) (cid:2) (cid:21)(cid:6) (cid:8)
resp. (cid:8) (cid:2) (cid:21)(cid:6) (cid:8)(cid:3) (cid:21) (cid:2) (cid:21). The permission PP1 is owned
by (cid:6) who enables access for (cid:21) and himself (cf.
label
(cid:6) (cid:2) (cid:21)(cid:6) (cid:6) in Fig. 3). Similarly, permission PP2 carries the
label (cid:8) (cid:2) (cid:21)(cid:6) (cid:8). The four components are supervised by the
hospital owner. HospDB and Declass are not intended to
print out information to anybody. Therefore reading access
is only granted to (cid:21) itself for maintenance (label (cid:21) (cid:2) (cid:21)). In
contrast, the components (cid:2)(cid:6) and (cid:2)(cid:8) are used for the out-
put of patient records. Therefore, the label of (cid:2)(cid:6) is set to
(cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:6) and the label of (cid:2)(cid:8) to (cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:8). The labels of
the data structures and channels are added automatically by
a graph rewrite system. While the channels are set to the la-
bels of the components linked by an edge of type Receives,
the data structures P1Data and P2Data carry the label (cid:21) (cid:2) (cid:21)
due to the stricter policy of the hospital owner.
The conﬁdentiality security levels of the patient records
are set to the value (cid:9). This reﬂects that on the one hand
eavesdropping of patient data does not lead to a break down
of the hospital operations. On the other hand, however, the
leaking of patient data is a serious privacy violation leading
to costly compensations and distrust in the hospital. Weigh-
ing up the aspects, we consider a high to moderate valuation
(level (cid:9)) as appropriate. By applying graph rewrite rules the
value (cid:9) is also set to the conﬁdentiality security properties
of the components and channels.
Finally, we have to ﬁx the declassiﬁcation rules of the
permission. The patient record of (cid:6) is constrained by (cid:21)
as well as (cid:6). Since (cid:6) accepts (cid:20)(cid:6) as the doctor treating
him, both record owners accept (cid:20)(cid:6) as a reader and the Add
Readers property of PP1 is set to (cid:6) (cid:2) (cid:20)(cid:6)(cid:3) (cid:21) (cid:2) (cid:20)(cid:6) (cf. Fig. 3).
Likewise, in PP2 this property is set to the value (cid:8) (cid:2) (cid:20)(cid:8)(cid:3) (cid:21) (cid:2)
(cid:20)(cid:8).
In the next step we analyze the system model for vulnera-
bilities and threats. In order to show incorrect label settings
to the reader, we replaced the correct labels of component
(cid:2)(cid:8) and channel Declass-D2 by wrong labels (cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:8)(cid:6) .
Thus, at (cid:2)(cid:8) access is mistakenly enabled to any patient.
Fig. 5 delineates the distorted system model augmented by
vulnerability and threat objects. As expected, the objects
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:06 UTC from IEEE Xplore.  Restrictions apply. 
an acceptable expenditure.
Due to the extensive tool-support the speciﬁcation and
analysis of the example system could be performed in a cou-
ple of minutes.
7. Concluding Remarks
We reported on the application of object-oriented model-
ing and graph rewriting for the highly automated informa-
tion ﬂow control of component-structured software. The
corresponding tool-support is well-suited to real-life sys-
tems since it supports UML-based description techniques
for complex systems (e.g., hierarchical system models hid-
ing subsystems in folders which are modeled by separate
UML-object diagrams). Currently, more work is devoted
to extensions of the class libraries and rewrite systems and,
in particular, to the consideration of trust between princi-
pals which can be realized by applying trust management
approaches (e.g., [8, 9, 22]). For instance, in order to de-
termine the seriousness of a threat due to a malicious com-
ponent leaking information, one considers not only the ap-
plied countermeasures but also the trust into the component
designer.
Moreover, one has to consider integrity and availabil-
ity aspects of component-structured software, too. Here,
we will augment the component contracts by speciﬁcation
modules in a temporal logic-based modular speciﬁcation
and veriﬁcation technique [17]. The contract speciﬁcations
of all components may be composed to a system interface
speciﬁcation. Since the security policy can be modeled
based on the same speciﬁcation technique, one can prove
formally that the combined interface speciﬁcation fulﬁlls
the security policy. Moreover, one has to check that the
real component behavior complies with the contract speci-
ﬁcation which can be performed, for instance, by security
wrappers [19].
References
[1] M. Abadi. Secrecy by Typing in Security Protocols.
In
Proc. 3rd International Conference on Theoretical Aspects
of Computer Software, 1997.
[2] E. Amoroso. Fundamentals of Computer Security Technol-
ogy. Prentice Hall, New Jersey, 1993.
[3] R. J. R. Back and R. Kurkio-Suonio. Decentralization of
process nets with a centralized control. Distributed Com-
puting, (3):73–87, 1989.
[4] R. Bardohl, G. Taentzer, M. Minas, and A. Sch¨urr. Applica-
tion of graph transformation to visual languages. In Hand-
book on Graph Grammars and Computing by Graph Trans-
formation, Volume 2, chapter 1. World Scientiﬁc, 1999.
[5] R. Baskerville. Designing Information Systems Security.
Wiley & Sons, Chichester, 1988.
Figure 5. Example system with vulnerabilities
and threats
DataExComponentL and DataExChannelL refer to the er-
roneous labels of component (cid:2)(cid:8) and channel Declass-D2.
Similarly, the two objects IncorrectDataFowarding indicate
that component Declass may leak information intended to
(cid:2)(cid:6) by transferring it to (cid:2)(cid:8) and vice versa. Each vulnerabil-
ity object is associated to a threat object CompInfoLeakOut
referring to the threat of leaking information. The serious-
ness of the vulnerability and threat objects is set to the max-
imum value (cid:7) since no countermeasures are integrated, yet.
Thereafter, for each vulnerability a separate risk object is
generated. According to the matrix in Tab. 1 the risk levels
of all objects are set to the value (cid:11). Since we want to accept
only risks of levels (cid:6) and (cid:8), we have to continue the security
analysis with planning countermeasures. With respect to
the incorrect label settings, we apply a graph rewrite system
which replaces the wrong labels of (cid:2)(cid:8) and Declass-D2 with
the correct label (cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:8) again.
In order to reduce the
information ﬂow policies, we apply another rewrite system
suggesting countermeasures. Since the protection level of
a security wrapper for a component with risk level (cid:11) is too
low, the tool suggests byte code veriﬁcation and source code
analysis to guard against malicious behavior of component
Declass. As byte code veriﬁcation, moreover, is the less
expensive safeguard, it is selected.
In the next iteration, the two vulnerability objects Incor-
rectDataForwarding are generated again. Due to the coun-
termeasure, however, their seriousness values are now set
to (cid:8). Likewise, the levels of the corresponding risks are as-
signed with (cid:8) which, according to our security policy, can
be accepted as remaining risks. Thus, the information ﬂow
analysis will be terminated now and we have to perform a
byte code veriﬁcation of component Declass. In case of us-
ing Java Beans-based components, this veriﬁcation is facil-
itated by powerful tool-support and can be performed with
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:06 UTC from IEEE Xplore.  Restrictions apply. 
[6] R. Baskerville. Information Systems Design Methods: Im-
plications for Information Systems Development. ACM
Computing Surveys, 25(4):375–414, Dec. 1993.
[7] D. E. Bell and L. J. LaPadula. Secure Computer System:
Mathematical Foundations. Technical Report MTR-2547,
MITRE Corporation, Bedford, Mass., 1973.
[8] T. Beth, M. Borcherding, and B. Klein. Valuation of Trust in
Open Networks. In Proc. European Symposium on Research
in Security (ESORICS), LNCS 875, pages 3–18, Brighton,
1994. Springer-Verlag.
[9] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D. Keromytis.
The Role of Trust Management in Distributed Systems Se-
curity. In Internet Programming: Security Issues for Mobile
and Distributed Objects. Springer-Verlag, 1999.
[10] G. Booch, J. Rumbaugh, and I. Jacobson. The Uniﬁed
Modeling Language User Guide. Addison-Wesley, 1999.
[11] CCTA. SSADM-CRAMM Subject Guide for SSADM Ver-
sion 3 and CRAMM Version 2. CCTA, London, 1991.
[12] R. Courtney. Security Risk Assessment in Electronic Data
Processing. In AFIPS Conf. Proc. National Computer Con-
ference 46, pages 97–104, Arlington, 1977. AFIPS.
[13] W. Farmer, J. Guttman, and V. Swarup. Security for Mobile
Agents: Issues and Requirements.
In Proc. 19th National
Information Systems Security Conference (NISSC 96), pages
591–597, 1996.
[14] E. Ferrari, P. Samarati, E. Bertino, and S. Jajodia. Provid-
ing ﬂexibility in information ﬂow control for object-oriented
systems. In Proc. IEEE Symposium on Security and Privacy,
pages 130–140, Oakland, 1997.
[15] R. Graubart. On the Need for a Third Form of Access Con-
trol. In Proc. 12th National Computer Security Conference,
pages 296–303, Gaithersburg, MD, 1989.
[16] N. Heintze and J. G. Riecke. The SLam Calculus: Program-
ming with Secrecy and Integrity. In Proc. ACM Symposium
on Principles of Programming Languages (POPL’98), San
Diego, 1998.
[17] P. Herrmann and H. Krumm. A Framework for Modeling
Transfer Protocols. Computer Networks, 34(2):317–337,
2000.
[18] P. Herrmann and H. Krumm. Object-oriented security anal-
ysis and modeling.
In Proc. 9th International Conference
on Telecommunication Systems — Modeling and Analysis,
pages 21–32, Dallas, 2001. ATSMA, IFIP.
[19] P. Herrmann and H. Krumm. Trust-adapted enforcement of
security policies in distributed component-structured appli-
cations. In Proc. 6th IEEE Symposium on Computers and
Communications, pages 2–8, Hammamet, 2001. IEEE Com-
puter Society Press.
[20] P. Herrmann, L. Wiebusch, and H. Krumm. Tool-Assisted
Security Assessment of Distributed Applications. In Proc.
3rd IFIP WG 6.1 International Working Conference on
Distributed Applications and Interoperable Systems (DAIS
2001), pages 289–294, Krakow, 2001. Kluwer Academic
Publisher.
[21] ISO/IEC. Common Criteria for Information Technology Se-
International Standard ISO/IEC
curity Evaluation, 1998.
15408.
[22] A. Jøsang. An Algebra for Assessing Trust in Certiﬁca-
tion Chains. In J. Kochmar, editor, Proc. Network and Dis-
tributed Systems Security Symposium (NDSS’99). The Inter-
net Society, 1999.
[23] G. Karjoth, D. Lange, and M. Oshima.
A Security
Model for Aglets. IEEE Internet Computing, pages 68–77,
July/August 1997.
[24] D. M. Kienzle and W. A. Wulf. A Practical Approach
In Proc. Workshop New Security
to Security Assessment.
Paradigms ’97, pages 5–16, Lake District, 1997.
[25] B. W. Lampson. Protection. In Proc. Princeton Conference
on Information and Systems Sciences, 1971.
[26] J. Leiwo, C. Gamage, and Y. Zheng. Harmonizer — A Tool
for Processing Information Security Requirements in Orga-
nization. In Proc. 3rd Nordic Workshop on Secure Computer
Systems (NORDSEC’98), Trondheim, 1998.
[27] C. J. McCollum, J. R. Messing, and L. Notargiacomo. Be-
yond the Pale of MAC and DAC — Deﬁning New Forms of
Access Control. In Proc. IEEE Symposium on Security and
Privacy, pages 190–200, Oakland, CA, 1990.
[28] M. D. McIlroy and J. A. Reeds. Multilevel Security in
the UNIX Tradition. Software — Practice and Experience,
22(8):673–694, 1992.
[29] Microsoft. The Microsoft COM Technologies. available
via WWW: http://www.microsoft.com/com/comPapers.asp,
1998.
[30] A. C. Myers. JFlow: Practical Mostly-Static Information
Flow Control. In Proc. 26th ACM Symposium on Principles
of Programming Languages (POPL’99), San Antonio, 1999.
[31] A. C. Myers and B. Liskov. A Decentralized Model for In-
formation Control Flow. In Proc. 16th ACM Symposium on
Operating Systems Principles, Saint-Malo, France, 1997.
[32] A. C. Myers and B. Liskov. Complete, Safe Information
In Proc. IEEE Symposium on
with Decentralized Labels.
Security and Privacy, pages 186–197, Oakland, 1998.
[33] Object Management Group. CORBA Component Model
Request for Proposals, June 1997.
[34] Object Management Group (OMG). A Discussion of the Ob-
ject Management Architecture, 1997.
[35] Object Management Group (OMG), CORBA. Security Ser-
vices Speciﬁcation, Version 1.5, 2000.
[36] J. Palsberg and P. Ørbaek. Trust in the (cid:1)-Calculus. In Proc.
2nd Internation Symposium on Static Analysis, LNCS 983,
pages 314–329. Springer-Verlag, 1995.
[37] T. Quatrani. Visual Modeling with Rational Rose 2000 and
UML. Addison-Wesley, 2 edition, 2000.
[38] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
Youman. Role-Based Access Control Models. IEEE Com-
puter, pages 38–47, Feb. 1996.
[39] A. Stoughton. Access Flow: A Protection Model which Inte-
grates Access Control and Information Flow. In Proc. IEEE
Symposium on Security and Privacy, pages 9–18, Oakland,
CA, 1981.
[40] Sun Microsystems. Java Beans Speciﬁcation. available via
WWW: http://java.sun.com/beans/docs/spec.html, 1998.
[41] Sun Microsystems, Palo Alto.
Infobus 1.2 Speciﬁcation,
1999.
[42] C. Szyperski. Component Software — Beyond Object Ori-
ented Programming. Addison-Wesley, 1997.
[43] Tigris. ArgoUML Vision,
argouml.tigris.org/vision.html,
2000.
[44] D. Volpano, G. Smith, and C. Irvine. A Sound Type System
for Secure Flow Analysis. Journal of Computer Security,
4(3):167–187, 1996.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:06 UTC from IEEE Xplore.  Restrictions apply.