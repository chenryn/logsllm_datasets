来做图像文件。因此，我们用二进制编辑器进行的开发就到此为止，接下来我们要调转方向，开
始用编程语言来继续我们的开发工作。不过有了这次的经验，我们就知道了如果今后遇到什么特
殊情况还可以使用二进制编辑器，它是非常有用的。而且后面章节中我们偶尔也会用到它。
33 初次体验汇编程序
好，现在就让我们马上来写一个汇编程序，用它来生成一个跟刚才完全一样的helloos.img吧。
我们这次使用的汇编语言编译器是笔者自己开发的，名为“nask”，其中的很多语法都模仿了自
由软件里享有盛名的汇编器“NASM”，不过在“NASM”的基础之上又提高了自动优化能力。
超长的源代码
DB 0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f
DB 0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00
DB 0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00
DB 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
DB 0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff
（为节省纸张，这里省略中间的18万4314行）
DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
我们使用复制粘帖的方法，就可以写出这样一个超长的源代码来，将其命名为“helloos.nas”，
并保存在helloos0中。仔细看一下就能发现这个文件内容与我们用二进制编辑器输入的内容是一
模一样的。
接着，我们用“!cons_nt.bat”或是“!cons_9x.bat”（我们在前面已经说过，要根据Windows
的版本决定用哪一个。以后每次都这样解释一遍的话比较麻烦，所以我们就将它简写为!cons好了）
打开一个命令行窗口（console），输入以下指令（提示符部分不用输入）：
提示符①>..\z_tools\nask.exe helloos.nas helloos.img
——————————
① prompt，出现在命令行窗口中，提示用户进行输入的信息。
图灵社区会员 metorm 专享 尊重版权
3 初次体验汇编程序 …… 23
这样我们就得到了映像文件helloos.img。
1
好，我们的第一个汇编语言程序就这样做成了！……不过这么写程序也太麻烦了，要做个18
万行的程序，不但浪费时间，还浪费硬盘空间。与其这样还不如用二进制编辑器呢，不用输入“0x”、
1
“,”什么的，还能轻松一点。
3
■■■■■
其实要解决这个问题并不难，如果我们不只使用DB指令，而把RESB指令也用上的话，就可
20
以一下将helloos.nas缩短了，而且还能保证输出的内容不变，具体我们来看下面。
正常长度的源程序 21
DB 0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f
DB 0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00
DB 0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00 22
DB 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
DB 0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff
DB 0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f
7
DB 0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41
DB 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00
RESB 16
DB 0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c 8
DB 0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a
DB 0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09
DB 0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb
DB 0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65 9
DB 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72
DB 0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00
RESB 368
10
DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
DB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
RESB 4600
DB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 11
RESB 1469432
我们自己动手输入这段源程序比较麻烦，所以笔者把它放在附带光盘的projects\01_day\ 12
helloos1目录下了。大家只要把helloos1文件夹复制粘帖到tolset文件夹里就可以了。之前的helloos0
文件夹以后就不用了，我们可以把它删除，也可以放在那里留作纪念。顺便说一下，笔者将helloos0 13
文件夹名改为了helloos1，删掉了其中没用的文件，新建并编辑了需要用到的文件，这样就做出
了新的helloos1文件夹。操作系统就是这样一点一点地成长起来的。
14
每次进行汇编编译的时候，我们都要输入刚才的指令，这太麻烦了，所以笔者就做了一个批
处理文件①asm.bat。有了这个批处理文件，我们只要在用“!cons”打开的命令行窗口里输入“asm”，
15
——————————
① batch file，基本上只是将命令行窗口里输入的命令写入文本文件。虽然还有功能更强的处理，但本书中我们用不 16
到。所谓批处理就是批量处理，即一次处理一连串的命令。
图灵社区会员 metorm 专享 尊重版权
24 …… 第1天：从计算机结构到汇编程序入门
就可以生成helloos.img文件。在用“asm”作成img文件后，再执行“run”指令，就可以得到与
刚才一样的结果。
■■■■■
DB指令是“define byte”的缩写，也就是往文件里直接写入1个字节的指令。笔者喜欢用大
写字母来写汇编指令，但小写的“db”也是一样的。
在汇编语言的世界里，这个指令是程序员的杀手锏，也就是说只要有了DB指令，我们就可
以用它做出任何数据（甚至是程序）。所以可以说，没有用汇编语言做不出来的文件。文本文件
也好，图像文件也好，只要能叫上名的文件，我们都能用汇编语言写出来。而其他的语言（比如
C语言）就没有这么万能。
RESB指令是“reserve byte”的略写，如果想要从现在的地址开始空出10个字节来，就可以
写成RESB 10，意思是我们预约了这10个字节（大家可以想象成在对号入座的火车里，预订了10
个连号座位的情形）。而且nask不仅仅是把指定的地址空出来，它还会在空出来的地址上自动填
入0x00，所以我们这次用这个指令就可以输出很多的0x00，省得我们自己去写18万行程序了，真
是帮了个大忙。
这里还要说一下，数字的前面加上0x，就成了十六进制数，不加0x，就是十进制数。这一点
跟C语言是一样的。
44 加工润色
刚才我们把程序变成了短短的22行，这成果令人欣喜。不过还有一点不足就是很难看出这些
程序是干什么的，所以我们下面就来稍微改写一下，让别人也能看懂。改写后的源文件增加到了
48行，它位于附带光盘的projects\01_day\helloos2目录下，大家可以直接把helloos2文件夹复制到
tolset里。现在helloos1也可以删掉了（每个文件夹都是独立的，用完之后就可以删除，以后不再
赘述。当然放在那里留作纪念也是可以的）。
现在的程序有50行，也占不了多少地方，所以我们将它写在下面了。
有模有样的源代码
; hello-os
; TAB=4
; 以下这段是标准FAT12格式软盘专用的代码
DB 0xeb, 0x4e, 0x90
DB "HELLOIPL" ; 启动区的名称可以是任意的字符串（8字节）
DW 512 ; 每个扇区（sector）的大小（必须为512字节）
DB 1 ; 簇（cluster）的大小（必须为1个扇区）
图灵社区会员 metorm 专享 尊重版权
4 加工润色 …… 25
DW 1 ; FAT的起始位置（一般从第一个扇区开始）
1
DB 2 ; FAT的个数（必须为2）
DW 224 ; 根目录的大小（一般设成224项）
DW 2880 ; 该磁盘的大小（必须是2880扇区）
DB 0xf0 ; 磁盘的种类（必须是0xf0） 1
DW 9 ; FAT的长度（必须是9扇区）
DW 18 ; 1个磁道（track）有几个扇区（必须是18）
DW 2 ; 磁头数（必须是2）
3
DD 0 ; 不使用分区，必须是0
DD 2880 ; 重写一次磁盘大小
DB 0,0,0x29 ; 意义不明，固定
DD 0xffffffff ;（可能是）卷标号码 20
DB "HELLO-OS " ; 磁盘的名称（11字节）
DB "FAT12 " ; 磁盘格式名称（8字节）
RESB 18 ; 先空出18字节 21
; 程序主体
DB 0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c
22
DB 0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a
DB 0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09
DB 0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb
DB 0xee, 0xf4, 0xeb, 0xfd 7
; 信息显示部分
8
DB 0x0a, 0x0a ; 2个换行
DB "hello, world"
DB 0x0a ; 换行
DB 0 9
RESB 0x1fe-$ ; 填写0x00,直到 0x001fe
DB 0x55, 0xaa
10
; 以下是启动区以外部分的输出
DB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 11
RESB 4600
DB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
RESB 1469432 12
■■■■■ 13
这里有几点新内容，我们逐一来看一下。首先是“;”命令，这是个注释命令，相当于C语言
或是C++中的“//”。正是因为有它，我们才可以在源代码里加入很多注释。 14
其次是DB指令的新用法。我们居然可以直接用它写字符串。在写字符串的时候，汇编语言
会自动地查找字符串中每一个字符所对应的编码，然后把它们一个字节一个字节地排列起来。 15
这个功能非常方便，也就是说，当我们想要变更输出信息的时候，就再也不用自己去查字符编码
表了。
16
图灵社区会员 metorm 专享 尊重版权
26 …… 第1天：从计算机结构到汇编程序入门
再有就是DW指令和DD指令，它们分别是“define word”和“define double-word”的缩写，
是DB指令的“堂兄弟”。word的本意是“单词”，但在计算机汇编语言的世界里，word指的是“16
位”的意思，也就是2个字节。“double-word”是“32位”的意思，也就是4个字节。
对了，差点忘记说RESB 0x1fe-$了。这个美元符号的意思如果不讲，恐怕谁也搞不明白，它
是一个变量，可以告诉我们这一行现在的字节数（如果严格来说，有时候它还会有别的意思，关
于这一点我们明天再讲）。在这个程序里，我们已经在前面输出了132字节，所以这里的$就是132。
因此nask先用0x1fe减去132，得出378这一结果，然后连续输出378个字节的0x00。
那这里我们为什么不直接写378，而非要用$呢？这是因为如果将显示信息从“hello, world”
变成“this is a pen.”的话，中间要输出0x00的字节数也会随之变化。换句话说，我们必须保证软
盘的第510字节（即第0x1fe字节）开始的地方是55 AA。如果在程序里使用美元符号（$）的话，
汇编语言会自动计算需要输出多少个00，我们也就可以很轻松地改写输出信息了。
■■■■■
既然可以毫不费力地改写显示的信息，就一定要好好发挥这一功能，让我们的操作系统显示
出自己喜欢的一句话，让它成为一个只属于我们自己的、世界上独一无二的操作系统。不过遗憾
的是现在它还不能显示汉字。当然大家也可以尝试一下，但由于这个程序还没有显示汉字的功能，
所以显示出来的都是乱码，因此大家先将就一下，用英语或拼音吧。
■■■■■
最后再给大家解释一下程序中出现的几个专门术语。时间不早了，我们今天就到这吧。其他
的留待明天再说。
TAB=4….......
有的文本编辑器可以调整TAB键的宽度。请使用这种编辑器的人将TAB键的宽度设
定成4，这样源程序更容易读。可能有人说，我这里只能用记事本（notepad），TAB
键宽度固定为8，想调都没法调。没关系，明天笔者来推荐一个好用的文本编辑器。
FAT12格式...
（FAT12 Format）用Windows或MS-DOS格式化出来的软盘就是这种格式。我们的
helloos也采用了这种格式，其中容纳了我们开发的操作系统。这个格式兼容性好，
在Windows上也能用，而且剩余的磁盘空间还可以用来保存自己喜欢的文件。
启动区..........
（boot sector）软盘第一个的扇区称为启动区。那么什么是扇区呢？计算机读写软
盘的时候，并不是一个字节一个字节地读写的，而是以512字节为一个单位进行读
写。因此,软盘的512字节就称为一个扇区。一张软盘的空间共有1440KB，也就是
1474560字节，除以512得2880，这也就是说一张软盘共有2880个扇区。那为什么
第一个扇区称为启动区呢？那是因为计算机首先从最初一个扇区开始读软盘，然
后去检查这个扇区最后2个字节的内容。
图灵社区会员 metorm 专享 尊重版权
4 加工润色 …… 27
如果这最后2个字节不是55 AA，计算机会认为这张盘上没有所需的启动程序，就会 1
报一个不能启动的错误。（也许有人会问为什么一定是55 AA呢？那是当初的设计
者随便定的，笔者也没法解释）。如果计算机确认了第一个扇区的最后两个字节正
1
好是55 AA，那它就认为这个扇区的开头是启动程序，并开始执行这个程序。
IPL.........…....
initial program loader的缩写。启动程序加载器。启动区只有区区512字节，实际的
3
操作系统不像hello-os这么小，根本装不进去。所以几乎所有的操作系统，都是把
加载操作系统本身的程序放在启动区里的。有鉴于此，有时也将启动区称为IPL。
20
但hello-os没有加载程序的功能，所以HELLOIPL这个名字不太顺理成章。如果有
人正义感特别强，觉得“这是撒谎造假，万万不能容忍！”，那也可以改成其他的
名字。但是必须起一个8字节的名字，如果名字长度不到8字节的话，需要在最后 21
补上空格。
启动..........…. （boot）boot这个词本是长靴（boots）的单数形式。它与计算机的启动有什么关系 22
呢？一般应该将启动称为start的。实际上，boot这个词是bootstrap的缩写，原指靴
子上附带的便于拿取的靴带。但自从有了《吹牛大王历险记》（德国）这个故事
7
以后，bootstrap这个词就有了“自力更生完成任务”这种意思（大家如果对详情感
兴趣，可以在Google上查找，也可以在帮助和支持网页http://hrb.osask.jp上提问）。
8
而且，磁盘上明明装有操作系统，还要说读入操作系统的程序（即IPL）也放在磁
盘里，这就像打开宝物箱的钥匙就在宝物箱里一样，是一种矛盾的说法。这种矛
盾的操作系统自动启动机制，被称为bootstrap方式。boot这个说法就来源于此。如 9
果是笔者来命名的话，肯定不会用bootstrap 这么奇怪的名字，笔者大概会叫它“多
级火箭式”吧。 10
11
12
13
14
15
16
图灵社区会员 metorm 专享 尊重版权
第 2 天
汇编语言学习与Makefile入门
 介绍文本编辑器
 继续开发
 先制作启动区
 Makefile入门
11 介绍文本编辑器
笔者要向大家推荐一个文本编辑器TeraPad，可以从下面这个网站下载，这是一款免费软件
（在此感谢寺尾进先生的慷慨奉献！）。
http://www5f.biglobe.ne.jp/~t-susumu/library/tpad.html①
——————————
① 这个编辑器是日文版的，译者推荐一个可编辑中文的文本编辑器Notepad++，可以从这个网站下载：
http://notepad-plus-plus.org/。
这也是个免费软件。下载以后解压缩，大家可以在解压后的文件夹里找到“Notepad++”，然后双击鼠标左键就
可以安装软件了。
大家下载的时候，可能版本会升级，所以文件名也许会略有不同。它的使用方法与记事本（notepad）基本上
是一样的。它有很多选项，大家可以根据自己的喜好进行相应的设置。这里介绍几个非常有用的设置。
设置中文模式方法：
从菜单选择“Encoding”→“Character set”→“Chinese”→“GB2312（Simplified）”
大家可以按照如下步骤设置Tab键所对应的字符数。从菜单选择“Settings”→“Preference”，会弹出一个对话框，
选择“Language Menu/Tab Settings”，就会显示出语言和TAB键的设置窗口。在TAB键设置的下半部可以看到
TAB键的宽度设置，默认值是4。如果要用空格代替TAB，则勾选“Replace by space”前面的选择框就可以了。