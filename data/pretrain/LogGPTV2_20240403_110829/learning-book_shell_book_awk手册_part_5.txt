for(i=1; iBEGIN
BEGIN为awk的保留字，是一种特殊的Patterm
BEGIN成立（其值为true）的时机是："awk程序一开始执行，尚未读取任何数据之前."所以在
---
## Page 29
BEGINActions语法中，其Actions部份仅于程序一开始执行时被执行一次.当awk从数
据文件读入数据行后，BEGIN便不再成立，故不论有多少数据行，该Actions部份仅被执行
一次
一般常把“与数据文件内容无关"与“只需执行一次"的部分置于该Actions（以BEGIN为
Patterm)中
例如：
BEGIN{
FS="\t：]”#于程序一开始时，改变awk切割字段的方式
RS=""#于程序一开始时.改变awk分隔数据行的方式
count=100#设定变量count的起始值
....... # 其它 Pattern { Actions }....
有些awk程序甚至"不需要读入任何数据行".遇到这情况可把整个程序置于以BEGIN为
Patterm 的 Actions 中
例如：
BEGIN (print " Hello ! the Word !“}
注意：执行该类仅含BEGIN{Actions的程序时，awk并不会开启任何数据文件进行处理
>END
END为awk的保留字，是另一种特殊的Pattermn.
END成立（其值为true）的时机与BEGIN恰好相反，为：awk处理完所有数据，即将离开程序
时"平常读入数据行时，END并不成立，故其对应的Actions并不被执行；唯有当awk读完所
有数据时，该Actions才会被执行
注意：不管数据行有多少笔，该Actions仅被执行一次
关系表达式
使用像”A关系运算符B"的表达式当成Patterm
当A与B存在所指定的关系（Relation）时，该Patterm就算成立（true)
例如：
length($0)大于
大于或等于
正则表达式
直接使用正则表达式当成Patterm；此为S0~正则表达式的简写
该Patterm用以判断S0（数据行）中是否含有匹配该正则表达式的子字符串；若含有该成立
(true)则执行其对应的Actions.
例如：
/"[09]*$/ (print "This line is a integer !*)
与 S0 ~/^[0-9]*S/ {print "This line is a integer !" } 相同]
>混合Pattern
之前所介绍的各种Patterms,其计算后结果为一逻辑值（TrueorFalse).awk中逻辑值彼此间可
通过&&（and)，(or)，！（not)结合成一个新的逻辑值.故不同Patterms彼此可通过上述结合符号
来结合成一个新的Patterm.如此可进行复杂的条件判断
例如：
FNR >= 23 && FNR Pattern1，Pattern2
遇到这种Patterm,awk会帮您设立一个switch（或flag).
当awk读入的数据行使得Patterml成立时，awk会打开（turn on)这switch.
当awk读入的数据行使得Patterm2成立时，awk会关上（turmoff)这个switch
该Pattermn成立的条件是：
当这个switch被打开（turmon）时（包括Patterml，或Patterm2成立的情况）
---
## Page 31
例如：
FNR >= 23 && FNR =23时，awk就turmon这个switch;因为随着数据行的读入，awk不停的累加
FNR.当FNR=28时，Patterm2(FNR-28)便成立，这时awk会关上这个switch
当switch打开的期间，awk会执行print”"S0
（FNR为awk的内建变量，请参考附录D）
13.附录B——Actions
Actions是由下列指令（statement）所组成：
·表达式（function calls,assignments.)
·print表达式列表
·print(格式化字符串，表达式列表）
·if（表达式）语句[else语句]
·while(表达式）语句
·do语句while(表达式)
：for（表达式；表达式；表达式）语句
·for(variable in array)语句
delete
·break
continue
·next
·exit[表达式]
·语句
awk中大部分指令与C语言中的用法一致，此处仅介绍较为常用或容易混淆的指令的用法
>流程控制指令
·if指令
语法
if(表达式）语句1[else语句2]
范例：
if( $1 > 25 )
(a)与C语言中相同，若表达式计算（evaluate）后之值不为0或空字符串，则执行语句1；否
则执行语句2.
(b)进行逻辑判断的表达式所返回的值有两种，若最后的逻辑值为true，则返回1，否则返回0.
（c)语法中else语句2以[]前后括住表示该部分可视需要而予加入或省略
---
## Page 32
·while指令
语法：
while（表达式）语句
范例：
while( match(buffer,/[09]+\,c/))(
print "Find :" substr( buffer,RSTART, RLENGTH)
buff = substr( buffer, RSTART + RLENGTH)
上列范例找出buffer中所有能匹配/[0-9]+.c/（数字之后接上".e"的所有子字符串）
范例中while以函数match（）所返回的值做为判断条件.若buffer中还含有匹配指定条件的
子字符串（match成功），则matchO函数返回1,while将持续进行其后的语句
·do-while指令
语法：
do语句while（表达式）
范例：
do{
.i u ao x uogug. ufad 
getline data
}while( data !~/^ [YyNn]$/)
(a)上例要求用户从键盘上输入一个字符，若该字符不是YyN，或n则会不停执行该循环
直到读取正确字符为止
(b)do-while指令与while指令最大的差异是：do-while指令会先执行statement而后再判断
是否应继续执行.所以，无论如何其statement部分至少会执行一次.
·forStatement指令（一）
语法：
for(variable in array ) statement
范例：执行下列命令
awk
BEGIN{
X[1]= 50; X[2]= 60; X["1ast"]= 70
for( any in X )
printf("X[%s] = %d\n", any. X[any])
结果输出：
X[last] = 70
X[1] = 50
X[2] = 60
（a)这个for指令，专用以查找数组中所有的下标值，并依次使用所指定的变量予以记录.以
本例而言，变量any将逐次代表"last"，1及2.
(b)以这个for指令，所查找出的下标之值彼此间并无任何次续关系
---
## Page 33
（c)第5节中有该指令的使用范例，及解说
·forStatement指令（二）
语法：
for(expressionl; expression2; expression3) statement
范例：
for( i =1; i< =10; i++) sum = sum + i
说明：
（a)上列范例用以计算1加到10的总和
(b)expressionl常用于设定该for循环的起始条件，如上例中的i-l
expression2用于设定该循环的停止条件，如上例中的i<=10
expression3 常用于改变counter 之值，如上例中的i++
·break指令