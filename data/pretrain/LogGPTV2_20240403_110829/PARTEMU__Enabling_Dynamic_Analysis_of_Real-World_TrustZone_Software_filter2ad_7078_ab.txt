the TEE driver may optionally exist in userspace (NS.EL0);
these components form the TEE userspace.
We ﬁnd that a typical TZOS’s dependency on other soft-
ware components can be broadly divided into dependencies
with the bootloader and secure monitor at boot-time, and the
secure monitor, and the TEE driver at run-time (Figure 2).
4.2.1 Boot-Time Dependencies
At boot-time, the TZOS depends on the bootloader and secure
monitor. The bootloader supplies boot-time arguments to
the TZOS through a boot information structure (Step B1 in
Figure 2). Depending on the boot ﬂow, this information may
be passed to the TZOS through the secure monitor. Boot
information structures contain hardware information such as
the physical address ranges of RAM. The bootloader also sets
up any data structures referenced by the boot information, and
loads and starts execution of the TZOS binary.
Once the TZOS ﬁnishes boot successfully, it passes control
back to the secure monitor with speciﬁc information about
how to call back into the TZOS (Step B2). Thereafter, at
runtime, if the secure monitor receives an SMC from the
normal world that should be handled by the TZOS, it uses
this information to pass control to the TZOS.
4.2.2 Run-Time Dependencies
At run-time, the TZOS typically interacts with the TEE driver
in the normal world OS, the secure monitor, and TAs.
The main TZOS ﬂow at run-time is to handle a request
from the normal world - originating from a client application
(CA) or the normal world OS itself. The normal world TEE
792    29th USENIX Security Symposium
USENIX Association
TrustZone OS (TZOS)Trusted Application (TA)Trusted Application (TA)Secure MonitorBootloaderstruct callback_info {   ...}struct boot_info {  ...}B1B2Normal-world OSR2R3Client Application (CA)Client Application (CA)TEEDriverR1SharedMemoryHypervisorNormal WorldSecure WorldNon-Secure EL0Non-Secure EL1Non-Secure EL2EL3Secure EL0Secure EL1driver invokes an SMC instruction to call the secure monitor
(Step R1). The secure monitor determines if the request has
to be handled by the TZOS. If so, it passes control to the
TZOS (Step R2). The TZOS, in turn, handles the request. If
the request is to be handled by a TA, the TZOS passes control
to the TA (Step R3).
A special case is loading a TA. The TEE driver uses the
SMC in Step R2 to send the TA binary and shared memory to
communicate with the TA. The TZOS loads the TA and maps
the shared memory into the TA.
4.2.3 Hardware Dependencies
The TZOS and secure monitor typically depend on hardware
components that conﬁgure access control, such as the TZASC
and TZPC, to set up secure and normal memory and interrupts.
They also depend on the cryptography co-processor, which
usually has access to a device-unique hardware key that is
only available to TrustZone. One of either the TZOS or the
secure monitor interacts with most hardware components; this
is implementation-dependent.
5 Selecting Components to Emulate
In this section, we describe how we select a subset of com-
ponents to emulate with the aim of making the emulation
effort practically feasible. As noted, naïvely loading and run-
ning entire ﬁrmware images requires emulation of a huge
number of hardware components, many custom and without
documentation, thus making this approach infeasible.
To make the emulation effort practically feasible, our ﬁrst
insight is that TZOSes only depend only on a limited subset
of all hardware and software components. For example, the
TZOS and TAs have no dependency on the hypervisor or most
of the Android framework. Therefore, such components can
be excluded, reducing emulation effort. However, we ﬁnd that
even the emulation effort required to support the remaining
components is often impractical. For example, supporting
the bootloader requires emulation of particular storage con-
trollers [26, 27] that are extremely complicated, and that no
open-source emulators we know of support sufﬁciently. Thus,
we need a different approach in such cases.
For a software component the TZOS depends on, we ﬁnd
we can sometimes make emulation more feasible by re-
implementing only the relevant parts of the component in
a stub. For example, the bootloader has several functions: it
reads the TZOS binary image from storage, loads it into mem-
ory, sets up arguments, and jumps to the TZOS. However,
the TZOS only directly depends on the bootloader setting
up the arguments to the TZOS and jumping to it; if we can
sufﬁciently mimic, i.e., emulate, this necessary functionality
of the bootloader in a stub, we eliminate the need to support
the entire original bootloader, and consequently, to emulate
the storage controller. This approach is analogous to QEMU’s
Component
Type
Software
Hardware
Prefer to Emulate
Component C if
C and target component
are loosely coupled
C and other components
are tightly coupled
C is partially or fully open-source
C is encrypted
C does not have interfaces
to modify registers/memory
C locks down software that runs
on it (e.g., using secure boot)
Prefer to Reuse
Component C if
C and target component
are tightly coupled
C and other components
are loosely coupled
C is closed-source
C is not encrypted
C has interfaces to modify
registers/memory (e.g., JTAG)
C does not lock down
software that runs on it
Table 1: Criteria to decide whether to reuse or emulate a
component C. As in object-oriented design, we use “loosely-
coupled” to mean components that have well-deﬁned inter-
faces with each other and work largely independently of each
other, and “tightly-coupled” to mean the opposite, that is, com-
ponents that need to know each others’ internal data structure
implementations, leading to complicated interfaces and deep
dependencies.
user mode [5], which emulates an OS by re-implementing
system call APIs required by a target user application. In
contrast, QEMU’s system mode runs entire OS binaries and
instead emulates the hardware the OS depends on.
However, emulating the required software component APIs
is not always more practically feasible. Sometimes, the cou-
pling between two components is so tight that it is often
more effort to understand and emulate the required dependen-
cies than it is to reuse the original component and support
all its dependencies instead. This is especially true because
most TrustZone software is closed-source, and often the only
way to determine dependency details is by high-effort binary
reverse-engineering. Intuitively, it is preferable to emulate a
software component if it is loosely coupled with the TZOS,
but tightly coupled with other components itself. Sometimes,
a component is tightly coupled with both the TZOS and other
components. Our approach identiﬁes that this would require
signiﬁcant emulation effort whether we emulate or reuse the
component. Further, source-code availability makes under-
standing dependencies, and therefore emulation, easier. In
addition, if a software component binary is encrypted, then
the only option is emulating it. Thus, we have two choices for
each component. First, we can reuse the original component
as it is. Second, we can mimic, or emulate the component, that
is, replace the component with a model or stub that sufﬁciently
mimics the original component to the target.
For hardware components, we can reuse the original hard-
ware component on the device if the component exposes an in-
terface to interact with memory and registers (e.g., JTAG [47]),
or if it is possible to run a custom software proxy on the de-
vice that allows a similar interface to hardware access. How-
ever, for real-world TrustZone environments, neither of these
approaches is possible, since the hardware does not expose
such interfaces, and is it not possible to run a custom soft-
ware proxy for hardware access in the TrustZone because of
USENIX Association
29th USENIX Security Symposium    793
mechanisms such as secure boot and code signing. Therefore,
emulating any required hardware is the only possibility. Ta-
ble 1 lists criteria to decide whether to reuse or emulate a
hardware or software component.
6 Case Studies
In this section, we present results from our study of compo-
nents that the TZOSes under consideration (QSEE, Kinibi,
TEEGRIS, and OP-TEE) depend on, and use the criteria in
Table 1 to determine whether to reuse or emulate each com-
ponent. While the deﬁnitions of tight and loose coupling are
subjective as in object-oriented design, we identify concrete
patterns that indicate tight or loose coupling between compo-
nents the TZOS depends on. We believe these ﬁndings and
patterns would help focus and guide similar future efforts for
other closed-source TZOSes.
6.1 Bootloader
Bootloader and TZOS Coupling. In all our cases, we found
that the bootloader had three well-deﬁned, loosely-coupled
functionality relevant to the TZOS. First, the bootloader set
up the boot information structure with boot-time arguments
for the TZOS. This structure usually contains hardware in-
formation such as the physical address ranges of RAM and
required peripherals. Second, the bootloader loaded the TZOS
into memory. Third, the bootloader handed over execution
control to the TZOS.
Bootloader and Other Component Coupling. All bootload-
ers we studied were tightly coupled with a hardware com-
ponent - the storage controller (e.g., eMMC [26], UFS [27]).
Since bootloaders have to read the TZOS and other images
from storage, this dependency is expected. However, emulat-
ing such hardware faithfully is extremely complicated, and
often requires supporting vendor-speciﬁc extensions.
Guiding Pattern. Check if the emulator already emulates
the storage hardware that the bootloader uses. If so, reusing
the bootloader binary is possible. Otherwise, it is preferable
to the emulate the bootloader, as the coupling between the
bootloader and the TZOS is generally much looser than the
coupling between the bootloader and storage hardware.
6.2 Secure Monitor
Secure Monitor and TZOS Coupling. In general, the TZOS
interacts with the secure monitor for two functions. First, the
TZOS relies on the secure monitor for world switches - to
yield control back to the normal world and to upcall into the
TZOS. Second, the secure monitor offers APIs to hardware
for the TZOS. It is usually the secure monitor, and not the
TZOS, that interacts with hardware directly because the secure
monitor is developed by the chip hardware manufacturers.
First, TEEGRIS’s secure monitor was encrypted with a key
derived from hardware. Therefore, our only option was to
emulate its secure monitor by reverse-engineering the TZOS
itself to ﬁnd dependencies on SMC APIs. Second, in Kinibi’s
case, we found that only a limited number (5) of loosely cou-
pled, well-deﬁned SMC API calls between the TZOS and
the secure monitor were required to get it to boot and run.
These API calls either interact with hardware, store vectors
of callback functions for upcalls, or yield control to the nor-
mal world. Third, QSEE’s interaction with its secure monitor,
however, was much more tightly coupled, involving multiple
SMC calls and shared data structures that were challenging
to reverse-engineer. We suppose this is because QSEE and its
secure monitor are both developed by a single entity: Qual-
comm. Likewise, our 32-bit OP-TEE’s secure monitor and
TZOS were compiled together into one binary, which we
could not decouple.
Secure Monitor and Other Components Coupling. Kinibi’s
secure monitor was tightly coupled with hardware. It inter-
faced with hardware components such as a vendor-speciﬁc
crypto co-processor and PRNG, which were challenging to
emulate. In contrast, QSEE’s secure monitor was loosely cou-
pled with hardware; QSEE itself accessed most hardware
directly, and did not go through secure monitor APIs. Again,
we suppose this is because QSEE and the hardware are both
developed by the same entity.
Guiding Pattern. Check if the TZOS and secure monitor are
designed such that only the secure monitor directly interacts
with most hardware. If this is the case, then it is typically
more practical to emulate the monitor’s APIs that the TZOS
uses to access hardware than it is to emulate the hardware
that the secure monitor depends on.
6.3 TEE Driver and TEE Userspace
TEE Driver and TZOS Coupling. The TEE driver in the
normal-world OS (usually, Linux) enables communication
between CAs and TAs. Broadly, the TEE driver interacts with
the TZOS to: (i) start new TAs, (ii) set up shared memory
between the CA and TA, (iii) send commands from the CA to
the TA, and (iv) respond to requests from the TZOS, such as
access to the normal-world ﬁlesystem.
We observed two designs of the interaction between TEE
driver and the TZOS - synchronous and asynchronous - that
gave a broad indication of the extent of coupling. In a syn-
chronous design, the TEE driver speciﬁes its request as ar-
guments to an SMC call and blocks until the secure world
completes the request. In an asynchronous design, the TEE
driver and the TZOS set up a shared request-response queue
that they operate in a producer-consumer relationship. Here,
an SMC (or secure interrupt) is used to periodically trans-
fer control to the TZOS. While not necessary, we observed
that the asynchronous design generally correlated with tighter
coupling because of queue synchronization requirements and
because data structures in the queue needed to be consistent
between the TZOS and TEE driver. In our case, QSEE and
794    29th USENIX Security Symposium
USENIX Association
OP-TEE followed a synchronous design, whereas Kinibi and
TEEGRIS followed an asynchronous design.
TEE Driver and Other Components Coupling. The
TEE driver optionally depends on the TEE userspace
to handle functionality such as reading a ﬁle from the
ﬁlesystem (to load persistent objects through the API
TEE_OpenPersistentObject or to load TAs), and access-
ing the RPMB. In our environment, we found that neither
QSEE nor OP-TEE required upcalls to the TEE userspace6,
whereas TEEGRIS and Kinibi did.
TEE Userspace. Kinibi, TEEGRIS, and QSEE images were
extracted from Android smartphones in which userspace bi-
naries were compiled for Android. Given the well-deﬁned
functionality expected of the TEE userspace, we found it
much easier to emulate this functionality instead of introduc-
ing Android emulation to reuse the TEE userspace binaries.
Guiding Pattern. Check if the TEE driver interacts with
the TZOS in an asynchronous manner, or if the TEE driver
depends on the TEE userspace to handle signiﬁcant function-
ality. In either of these cases, it is usually easier to reuse the
TEE driver.
Table 7 in Appendix A.1 summarizes our choices for each
component across all TZOSes.
7 Hardware Emulation
The TZOS depends on only a limited subset of all hardware
components on a real device, instead relying on the normal
world to interact with most hardware directly. This is a typical
design choice to keep TZOS code as minimal as possible
and not increase the trusted computing base with complicated
hardware drivers. For example, to store data on the disk, the
TZOS cryptographically “wraps” data using a key accessible
only to the TrustZone secure world, and then sends it back
to the normal world to store on the disk. This reduces the
amount of hardware emulation required, since we do not need
hardware models for such devices.
7.1 Ease of Hardware Emulation
For the hardware we need to emulate, we have a key ﬁnding:
to get the TZOS to boot up and run in the emulator, we needed
to emulate only simple access patterns for most hardware
it interacts with. The TZOS interacts with hardware using
memory-mapped I/O (MMIO), where hardware registers are
accessed using memory addresses. We describe the patterns
that the TZOS uses to interact with MMIO registers below.
• Constant Read. These MMIO registers return a con-
stant value.
6OP-TEE generally requires upcalls to load a TA, but in our environment,
the TAs were packaged into the OP-TEE binary itself.
Figure 3: Register patterns we found in the TZOSes binaries.
Variables in the binary are in lower case, and hard-coded con-
stants in the binary are in upper case. Registers are identiﬁed
by their MMIO addresses (e.g., RAND_REG).
• Write-Read. These MMIO registers store the value on
a write operation and return the most recently written
value on a read. This is the behavior of normal RAM.
• Increment. These MMIO registers return a monotoni-
cally increasing value each time (e.g., a timer). We found
that the exact increment did not matter as long as it was
non-zero.
• Random. These MMIO registers return a random value
(e.g., a pseudo-random number generator).
• Poll. These MMIO registers are set when a particular
operation is complete.
• Shadow, Commit, and Target. Shadow registers are
used for atomic updates of multiple target registers.
Shadow registers store new values to be written to other
target registers. When a commit register is written to,
all target registers atomically get the value in the cor-
responding shadow registers. For example, this is used
when updating address range registers for access control
in the TZASC or TZPC. Otherwise, there might be a
tiny window during update where address ranges are
conﬁgured incorrectly.
Figure 3 lists the corresponding code patterns. Importantly,
we observe that the TZOS binary gives us sufﬁcient infor-
mation to determine both the address and expected values
of particular MMIO registers. Given the simplicity of these
patterns, we believe that it is possible to automate extracting
relevant values from most, if not all, of these patterns.
Locating MMIO Regions. For Kinibi, we control the
MMIO region through the boot information structure deﬁned
in our emulated bootloader. QSEE, TEEGRIS, and OP-TEE
assume speciﬁc regions to be MMIO. For QSEE, we deduced
these regions from their page tables in the binary. We assume
that any region corresponding to a page table entry that has
USENIX Association
29th USENIX Security Symposium    795
# Constant read (CONSTANT_READ_REG)v = read(CONSTANT_READ_REG);if (v != VALID_VALUE)fail();# Read-write (READ_WRITE_REG)write(READ_WRITE_REG, v1);v2 = read(READ_WRITE_REG);if (v2 != v1)fail();# Increment (INCR_REG)v = read(INCR_REG);if (read(INCR_REG) < v)fail();# Poll (POLL_REG)while (read(POLL_REG) != READY);# Random (RAND_REG)v1 = read(RAND_REG)v2 = read(RAND_REG)if (v1 == v2)fail();# Shadow (SHADOW_REG1, SHADOW_REG2)# Commit (COMMIT_REG)# Target (TARGET_REG1, TARGET_REG2)write(SHADOW_REG1, v1)write(SHADOW_REG2, v2)write(COMMIT_REG, COMMIT_VALUE)v3 = read(TARGET_REG1)v4 = read(TARGET_REG2)if ((v1 != v3) or (v2 != v4))fail();the non-cacheable attribute is MMIO. For TEEGRIS and OP-
TEE, we obtained MMIO regions using the device tree used
by the Linux kernel.
Other Hardware. Beyond these simple register patterns,
the TZOSes required more complex emulation for only three
more devices, and we were able to re-use standard imple-
mentations in all cases. First, all TZOSes required the ARM
standard global interrupt controller (GIC). This hardware is
standard and is already emulated in QEMU. Second, QSEE
required limited emulation of cryptography hardware. QSEE
uses a crypto co-processor, for example, to generate a hash of
the TA binary for authentication before loading. Furthermore,