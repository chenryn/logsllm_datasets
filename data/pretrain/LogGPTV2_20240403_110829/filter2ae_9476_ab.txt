一旦Sulley fuzz session完成，就可以查看结果并进入检验阶段。
在Web服务中的会话将为您提供有关潜在未发现问题的早期提示，这是您花时间来分类测试结果。有一实用程序可以帮助您完成此过程。
第一个是'crashbin_explorer.py'实用程序，它接受以下命令行参数：
    $ ./utils/crashbin_explorer.py
    USAGE: crashbin_explorer.py 
    [-t|--test #] dump the crash synopsis for a specific test case number
    [-g|--graph name] generate a graph of all crash paths, save to 'name'.udg
例如，我们可以使用此实用程序查看检测到崩溃的每个位置，并列出在该地址触发崩溃的各个测试用例编号。 以下是对Trillians
Jabber协议解析器的真实例子：
    $ ./utils/crashbin_explorer.py audits/trillian_jabber.crashbin
    [3] ntdll.dll:7c910f29 mov ecx,[ecx] from thread 664 caused access violation
    1415, 1416, 1417,
    [2] ntdll.dll:7c910e03 mov [edx],eax from thread 664 caused access violation
    3780, 9215,
    [24] rendezvous.dll:4900c4f1 rep movsd from thread 664 caused access violation
    1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 3443, 3781, 3782, 3783, 3784, 3785, 3786, 3787, [1] ntdll.dll:7c911639 mov cl,[eax+0x5] from thread 664 caused access violation
    3442,
这些列出的崩溃点中没有一个时明显可利用的。 我们可以通过使用'-t'命令行开关指定测试用例编号来进一步深入了解单个崩溃的细节。
我们来看看测试用例编号1416：
    $ ./utils/crashbin_explorer.py audits/trillian_jabber.crashbin -t 1416
    ntdll.dll:7c910f29 mov ecx,[ecx] from thread 664 caused access violation
    when attempting to read from 0x263b7467
    CONTEXT DUMP
    EIP: 7c910f29 mov ecx,[ecx]
    EAX: 039a0318 ( 60424984) -> gt;>>...>>>>>(heap)
    EBX: 02f40000 ( 49545216) -> PP@ (heap)
    ECX: 263b7467 ( 641430631) -> N/A
    EDX: 263b7467 ( 641430631) -> N/A
    EDI: 0399fed0 ( 60423888) -> #e>>>>...>>>& (heap)
    ESI: 039a0310 ( 60424976) -> gt;>>...>>>>>(heap)
    EBP: 03989c38 ( 60333112) -> \|gt;&t]IP"Ix;IXIox@ @x@PP8|p|Hg9I P (stack)
    ESP: 03989c2c ( 60333100) -> \|gt;&t]IP"Ix;IXIox@ @x@PP8|p|Hg9I (stack)
    +00: 02f40000 ( 49545216) -> PP@ (heap)
    +04: 0399fed0 ( 60423888) -> #e>>>>...>>>& (heap)
    +08: 00000000 ( 0) -> N/A
    +0c: 03989d0c ( 60333324) -> Hg9I Pt]I@"ImI,IIpHsoIPnIX{ (stack)
    +10: 7c910d5c (2089880924) -> N/A
    +14: 02f40000 ( 49545216) -> PP@ (heap)
    disasm around:
    0x7c910f18 jnz 0x7c910fb0
    0x7c910f1e mov ecx,[esi+0xc]
    0x7c910f21 lea eax,[esi+0x8]
    0x7c910f24 mov edx,[eax]
    0x7c910f26 mov [ebp+0xc],ecx
    0x7c910f29 mov ecx,[ecx]
    0x7c910f2b cmp ecx,[edx+0x4]
    0x7c910f2e mov [ebp+0x14],edx
    0x7c910f31 jnz 0x7c911f21
    stack unwind:
    ntdll.dll:7c910d5c
    rendezvous.dll:49023967
    rendezvous.dll:4900c56d
    kernel32.dll:7c80b50b
    SEH unwind:
    03989d38 -> ntdll.dll:7c90ee18
    0398ffdc -> rendezvous.dll:49025d74
    ffffffff -> kernel32.dll:7c8399f3
同样，没有明显看出什么东西，但是我们知道因为寄存器包含了ASCII：“&；tg”产生的无效解引用导致了这种访问冲突。或许是字符串扩展问题？我们可以使用“-g”通过图形来查看崩溃位置：  
我们可以看到，虽然我们已经发现了4个不同崩溃点，但问题的根源似乎是相同的。进一步的研究表明，这确实是正确的。Rendezvous /
XMPP（可扩展消息传递和状态协议）消息传递子系统中存在特定缺陷。Trillian通过UDP端口5353上的“_presence”mDNS（多播DNS）服务定位附近的用户。一旦用户通过mDNS注册，就通过TCP端口5298上的XMPP完成消息传递。在plugins
\ rendezvous.dll中,跟随逻辑应用于收到的消息(the follow logic is applied to received
messages:)：
    4900C470 str_len:
    4900C470 mov cl, [eax] ; *eax = message+1
    4900C472 inc eax
    4900C473 test cl, cl
    4900C475 jnz short str_len
    4900C477 sub eax, edx
    4900C479 add eax, 128 ; strlen(message+1) + 128
    4900C47E push eax
    4900C47F call _malloc
计算提供的消息的字符串长度，并分配长度为+ 128的堆缓冲区来存储消息的副本，然后通过expatxml.xmlComposeString（）传递
    seString", struct xml_string_t *);
    struct xml_string_t {
    unsigned int struct_size;
    char *string_buffer;
    struct xml_tree_t *xml_tree;
    };
xmlComposeString（）例程调用expatxml.19002420（），其中HTML分别编码字符＆，>和和"
    190024C3 push offset greater_than ; ">"
    190024C8 push eax
    190024C9 call sub_190023A0
由于最初计算的字符串长度不考虑此字符串扩展，rendezvous.dll中的以下后续内联内存复制操作，可能会触发可利用的内存损坏：
    4900C4EC mov ecx, eax
    4900C4EE shr ecx, 2
    4900C4F1 rep movsd
    4900C4F3 mov ecx, eax
    4900C4F5 and ecx, 3
    4900C4F8 rep movsb
WikiStart  
Sulley检测到的每个崩溃都是对这个逻辑错误的回应。 跟踪故障位置和路径使我们能够快速假设崩溃来源。
我们最后一步是希望删除所有不包含崩溃信息的PCAP文件。 'pcap_cleaner.py'实用程序就是为此编写的：
    $ ./utils/pcap_cleaner.py
    USAGE: pcap_cleaner.py  
此实用程序将打开指定的crashbin文件，读入触发故障的测试用例编号列表并从指定目录中清除所有其他PCAP文件。