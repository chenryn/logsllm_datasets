A4 – MCU Reset: At the end of a successful reset routine, all
registers (including PC) are set to zero before resuming normal
software execution ﬂow. Resets are handled by the MCU in
hardware. Thus, the reset handling routine can not be modiﬁed.
When a reset happens, the corresponding reset signal is set.
The same signal is also set when the MCU initializes for the
ﬁrst time.
A5 – Interrupts: Whenever an interrupt occurs, the correspond-
ing irq signal is set.
5 APEX: A Secure PoX Architecture
We now present APEX, a new PoX architecture that realizes
the PoX security deﬁnition in Deﬁnition 2. The key aspect
of APEX is a computer-aided formally veriﬁed and publicly
available implementation thereof. This section ﬁrst provides
some intuition behind APEX’s design. All APEX properties are
overviewed informally in this section and are later formalized
in Section 6.
In the rest of this section we use the term “unprivileged
776    29th USENIX Security Symposium
USENIX Association
Deﬁnition 3 (Proof of Execution Protocol). APEX instantiates a PoX = (XRequest, XAtomicExec, XProve, XVerify) scheme behaving as follows:
1. XRequestV rf→P rv(S ,ERmin,ERmax,ORmin,ORmax): includes a set of conﬁguration parameters ERmin, ERmax, ORmin, ORmax. The Executable
Range (ER) is a contiguous memory block in which S is to be installed: ER = [ERmin,ERmax]. Similarly, the Output Range (OR) is also conﬁgurable
and deﬁned by V rf’s request as OR = [ORmin,ORmax]. If S does not produce any output ORmin = ORmax =⊥. S is the software to be installed in
ER and executed. If S is unspeciﬁed (S =⊥) the protocol will execute whatever code was pre-installed on ER on P rv, i.e., V rf is not required to
provide S in every request, only when it wants to update ER contents before executing it. If the code for S is sent by V rf, untrusted auxiliary
software in P rv is responsible for copying S into ER. P rv also receives a random l-bit challenge C hal (|C hal| = l) as part of the request, where l is
the security parameter.
2. XAtomicExecP rv(ER,OR,METADATA): This algorithm starts with unprivileged auxiliary software writing the values of: ERmin, ERmax, ORmin,
ORmax and C hal to a special pre-deﬁned memory region denoted by METADATA. APEX’s veriﬁed hardware enforces immutability, atomic
execution and access control rules according to the values stored in METADATA; details are described in Section 5.1. Finally, it begins execution
of S by setting the program counter to the value of ERmin.
3. XProveP rv(ER,C hal,OR): produces proof of execution H . H allows V rf to decide whether: (1) code contained in ER actually executed; (2) ER
contained speciﬁed (expected) S’s code during execution; (3) this execution is fresh, i.e., performed after the most recent XRequest; and (4)
claimed output in OR is indeed produced by this execution. As mentioned earlier, APEX uses VRASED’s RA architecture to compute H by attesting
at least the executable, along with its output, and corresponding execution metadata. More formally:
H = HMAC(KDF(K ,C hal),ER,OR,METADATA, ...)
(1)
METADATA also contains the EXEC ﬂag that is read-only to all software running in P rv and can only be written to by APEX’s formally
veriﬁed hardware. This hardware monitors execution and sets EXEC = 1 only if ER executed successfully (XAtomicExec) and memory regions of
METADATA, ER, and OR were not modiﬁed between the end of ER’s execution and the computation of H . The reasons for these requirements are
detailed in Section 5.2. If any malware residing on P rv attempts to violate any of these properties APEX’s veriﬁed hardware (provably) sets EXEC
to zero. After computing H , P rv returns it and contents of OR (O) produced by ER’s execution to V rf.
4. XVerifyP rv→V rf (H ,O,S ,METADATAV rf ) : Upon receiving H and O, V rf checks whether H is produced by a legitimate execution of S and
reﬂects parameters speciﬁed in XRequest, i.e., METADATAV rf = C hal||ORmin||ORmax||ERmin||ERmax||EXEC = 1. This way, V rf concludes that
S successfully executed on P rv and produced output O if:
H ≡ HMAC(KDF(K ,C halV rf ),S ,O,METADATAV rf , ...)
(2)
Table 1: Notation
Current Program Counter value
Signal that indicates if the MCU is reading from memory (1-bit)
Signal that indicates if the MCU is writing to memory (1-bit)
Address for an MCU memory access
Signal that indicates if DMA is currently enabled (1-bit)
Memory address being accessed by DMA, if any
Signal that indicates if an interrupt is happening
PC
Ren
Wen
Daddr
DMAen
DMAaddr
irq
CR Memory region where SW-Att is stored: CR = [CRmin,CRmax]
MR
(MAC Region) Memory region in which SW-Att computation
result is written: MR = [MRmin,MRmax]. The same region is used
to pass the attestation challenge as input to SW-Att
(Attested Region) Memory region to be attested. Can be
ﬁxed/predeﬁned or speciﬁed in an authenticated request from
V rf: AR = [ARmin,ARmax]
(Key Region) Memory region that stores K
(Exclusive Stack Region) Exclusive memory region that contains
SW-Att’s stack and can be only accessed by SW-Att
A 1-bit signal that reboots/resets the MCU when set to logical 1
(Execution Region) Memory region that stores an executable to
be executed: ER = [ERmin,ERmax]
(Output Region) Memory region that stores execution output:
OR = [ORmin,ORmax]
1-bit execution ﬂag indicating whether a successful execution
has happened
reset
ER
EXEC
METADATA Memory region containing APEX’s metadata
AR
KR
XS
OR
to VRASED’s implementation of SW-Att (see Section 3) which
is formally veriﬁed and can not be modiﬁed by Adv, since it
is stored in ROM. APEX is designed such that no changes to
SW-Att are required. Therefore, both functionalities (RA and
PoX, i.e., VRASED and APEX) can co-exist on the same device
without interfering with each other.
Notation is summarized in Table 1.
5.1 Protocol and Architecture
Figure 1: Overview of APEX’s workﬂow
software” to refer to any software other than SW-Att code
from VRASED. Adv is allowed to overwrite or bypass any
“unprivileged software”. Meanwhile, “trusted software” refers
APEX implements
secure PoX = (XRequest,
XAtomicExec, XProve, XVerify) scheme conforming to
a
USENIX Association
29th USENIX Security Symposium    777
Deﬁnition 3. The steps in APEX workﬂow are illustrated in
Figure 1. The main idea is to ﬁrst execute code contained
in ER. Then, at some later time, APEX invokes VRASED
veriﬁed RA functionality to attest the code in ER and include,
in the attestation result, additional information that allows
V rf to verify that ER code actually executed. If ER execution
produces an output (e.g., P rv is a sensor running ER’s code
to obtain some physical/ambient quantity), authenticity and
integrity of this output can also be veriﬁed. That is achieved by
including the EXEC ﬂag among inputs to HMAC computed
as part of VRASED RA. The value of this ﬂag is controlled by
APEX formally veriﬁed hardware and its memory can not be
written by any software running on P rv. APEX hardware
module runs in parallel with the MCU, monitoring its behavior
and deciding the value of EXEC accordingly.
Figure 2 depicts APEX’s architecture.
In addition to
VRASED hardware that provides secure RA by monitoring a set
of CPU signals (see Section 3.2), APEX monitors values stored
in the dedicated physical memory region called METADATA.
METADATA contains addresses/pointers to memory bound-
aries of ER (i.e., ERmin and ERmax) and memory boundaries of
expected output: ORmin and ORmax. These addresses are sent
by V rf as part of XRequest, and are conﬁgurable at run-time.
The code S to be stored in ER is optionally2 sent by V rf.
METADATA includes the EXEC ﬂag, which is initialized
to 0 and only changes from 0 to 1 (by APEX’s hardware) when
ER execution starts, i.e., when the PC points to ERmin. After-
wards, any violation of APEX’s security properties (detailed
in Section 5.2) immediately changes EXEC back to 0. After
a violation, the only way to set the ﬂag back to 1 is to re-start
execution of ER from the very beginning, i.e., with PC=ERmin.
In other words, APEX veriﬁed hardware makes sure that EXEC
value covered by the HMAC’s result (represented by H ) is 1,
if and only if ER code executed successfully. As mentioned
earlier, we consider an execution to be successful if it runs
atomically (i.e., without being interrupted), from its ﬁrst ERmin
to its last instruction ERmax.
In addition to EXEC, HMAC covers a set of parame-
ters (in METADATA memory region) that allows V rf to
check whether executed software was indeed located in ER =
[ERmin,ERmax]. If any output is expected, V rf speciﬁes a mem-
ory range OR = [ORmin,ORmax] for storing output. Contents
of OR are also covered by the computed HMAC, allowing V rf
to verify authenticity of the output of the execution.
Remark: Our notion of successful execution requires S to
have a single exit point – ERmax. Any self-contained code with
multiple legal exits can be trivially instrumented to have a
single exit point by replacing each exit instruction with a jump
to the uniﬁed exit point ERmax. This notion also requires S to
run atomically. Since this constraint might be undesirable for
some real-time systems, we discuss how to relax it in Section 8.
2Sending the code to be executed is optional because S might be pre-
installed on P rv. In that case the proof of execution will allow V rf to conclude
that the pre-installed S was not modiﬁed and that it was executed.
MCU’s Address Space
C hal
ORmax
ORmin
ERmax
ERmin
EXEC
ER
OR
MCU CORE
PC,
irq,
Ren,
Wen,
Daddr,
DMAen,
DMAaddr
reset
HW-Mod
VRASED
APEX
Figure 2: HW-Mod composed of APEX and VRASED hardware
modules. Shaded area represents APEX’s METADATA.
In addition, V rf is responsible for deﬁning OR memory region
according to S behavior. OR should be large enough to ﬁt all
output produced by S and OR boundaries should correspond
to addresses where S writes its output values to be sent to V rf.
To ensure freshness of OR content, V rf may enforce ER to
clear OR contents as the ﬁrst step in its execution. This may be
necessary if not all ER execution paths overwrite OR entirely.
We clarify that requirements for APEX might conﬂict with
existing memory-based security mechanisms, such as Data Ex-
ecution Prevention (DEP), or (Kernel) Address Space Layout
Randomization (K)ASLR. However, such techniques are appli-
cable to higher-end platforms and are not present on low-end
platforms targeted by APEX (see “Targeted Devices & Scope”
in Section 1).
5.2 APEX’s Sub-Properties at a High-Level
We now describe sub-properties enforced by APEX. Section 6
formalizes them in LTL and provides a single end-to-end deﬁni-
tion of APEX correctness. This end-to-end correctness notion is
provably implied by the composition of all sub-properties. Sub-
properties fall into two major groups: Execution Protection and
Metadata Protection. A violation of any of these properties
implies one or more of:
• Code in ER was not executed atomically and in its en-
tirety;
• Output in OR was not produced by ER execution;
• Code in ER was not executed in a timely manner, i.e.,
after receiving the latest XRequest.
Whenever APEX detects a violation, EXEC is set to 0. Since
EXEC is included among inputs to the computation of HMAC
(conveyed in P rv’s response), it will be interpreted by V rf as
failure to prove execution of code in ER.
Remark: We emphasize that properties discussed below are
required in addition to VRASED veriﬁed properties, i.e., these
are entirely different properties used speciﬁcally to enforce
778    29th USENIX Security Symposium
USENIX Association
PoX security and should not be viewed as replacements for
any of VRASED properties that are used to enforce RA security.
5.2.1 Execution Protection:
EP1 – Ephemeral Immutability: Code in ER can not be mod-
iﬁed from the start of its execution until the end of SW-Att
computation in XProve routine. This property is necessary to
ensure that the attestation result reﬂects the code that executed.
Lack of this property would allow Adv to execute some other
code ERAdv, overwrite it with expected ER and ﬁnally call
XProve. This would result in a valid proof of execution of ER
even though ERAdv was executed instead.
EP2 – Ephemeral Atomicity: ER execution is only considered
successful if ER runs starting from ERmin until ERmax atom-
ically, i.e., without any interruption. This property conforms
with XAtomicExec routine in Deﬁnition 1 and with the notion
of successful execution in the context of our work. As discussed
in Section 4, ER must run atomically to prevent malware re-
siding on P rv from interrupting ER execution and resuming it
at a different instruction, or modifying intermediate execution
results in data memory. Without this property, Return-Oriented
Programming (ROP) and similar attacks on ER could change
its behavior completely and unpredictably, making any proof
of execution (and corresponding output) useless.
EP3 – Output Protection: Similar to EP1, APEX must ensure
that OR is unmodiﬁed from the time after ER code execution
is ﬁnished until completion of HMAC computation in XProve.
Lack of this property would allow Adv to overwrite OR and
successfully spoof OR produced by ER, thus convincing V rf
that it produced output ORAdv.
5.2.2 Metadata Protection:
MP1 - Executable/Output (ER/OR) Boundaries: APEX hard-
ware ensures properties EP1, EP2, and EP3 according to val-
ues: ERmin, ERmax, ORmin, ORmax. These values are conﬁg-
urable and can be decided by V rf based on application needs.
They are written into metadata-dedicated physical addresses
in P rv memory before ER execution. Therefore, once ER ex-
ecution starts, APEX hardware must ensure that such values
remain unchanged until XProve completes. Otherwise, Adv
could generate valid attestation results, by attesting [ERmin,
ERmax], while, in fact, having executed code in a different re-
gion: [ERAdv
MP2 - Response Protection: The appropriate response to
V rf’s challenge must be unforgeable and non-invertible. There-
fore, in the XProve routine, K used to compute HMAC must
never be leaked (with non-negligible probability) and HMAC
implementation must be functionally correct, i.e., adhere to
its cryptographic speciﬁcation. Moreover, contents of memory
being attested must not change during HMAC computation.
We rely on VRASED to ensure these properties. Also, to en-
sure trustworthiness of the response, APEX guarantees that no
min , ERAdv
max ].
software in P rv can ever modify EXEC ﬂag and that, once
EXEC = 0, it can only become 1 if ER’s execution re-starts
afresh.
MP3 - Challenge Temporal Consistency: APEX must ensure
that C hal can not be modiﬁed between ER’s execution and
HMAC computation in XProve. Without this property, the
following attack is possible: (1) P rv-resident malware exe-
cutes ER properly (i.e., by not violating EP1-EP3 and MP1-
MP2), resulting in EXEC = 1 after execution stops, and (2) at
a later time, malware receives C hal from V rf and simply calls
XProve on this C hal without executing ER. As a result, mal-
ware would acquire a valid proof of execution (since EXEC
remains 1 when the proof is generated) even though no ER