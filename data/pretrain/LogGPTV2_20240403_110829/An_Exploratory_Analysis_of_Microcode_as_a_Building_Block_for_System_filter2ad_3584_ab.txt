the corresponding sequence word from region R4. Thereby, the
operations belonging to one triad have the same offset relative to
the start of their corresponding region. The different subregions
of a single ROM region are illustrated in Figure 2, more technical
details are provided in Appendix A.1. We will use the same naming
convention in the following.
The hardware layout suggested that the triads are organized
in four arrays (A1 to A4), with A1, A3 and A4 containing data
for 1024 triads each and A2, which is physically smaller than the
other arrays, for 768 triads. This organization means that the first
triad will use bits extracted from R1:A1, R2:A1 and R3:A1 as its
operations and the sequence word is obtained from the bits located
in R4:A1. As the regions are no longer relevant after combining
the triads, they will be omitted in further notations. Each of the
arrays is subdivided into blocks B1 to B4, each containing 256 triads.
The exception to this is the array A2: while the hardware layout
suggests the presence of four blocks with a smaller number of triads
each, we mapped the contents to three blocks with 256 triads each.
This means array A2 contains only 768 triads in contrast to the
1024 triads contained in the other arrays.
We were also able to locate the microcode patch RAM, which is
loaded with the microcode updates during runtime. The RAM needs
to be placed physically close to the rest of the microcode engine to
keep signal paths short, however previously it was unknown where
exactly it is located. Using new images taken with a SEM, we could
classify the area between arrays A2 and A3 as Static Random Access
Memory (SRAM). The area is marked in Figure 2. We determined the
storage type based on detailed images of the region and additional
cross-section images. Both showed visual structures specific to
SRAM. This location also contains a visually different control logic,
which also indicates a different type of storage than the rest of
the region. A higher resolution image and additional details are
available in Appendix A.1. It should be noted that the usage of
two different classes of storage in this close proximity implies a
highly optimized hardware layout. The SRAM marked in the figure
contains 32×64 bits, which is the amount of data needed per region
for 32 triads. This corresponds to the maximum update size of
32 triads determined in our experiments. Due to the additional
complexity of implementing a fast readable and writable memory
in hardware, the SRAM occupies roughly the same space as a ROM
block with 256 triads.
3.2 Physical Ordering
Another insight gained from the available readout was that not only
the three operations forming a triad exhibited data dependencies
between each other (suggesting that the triads are indeed correctly
combined), but in some cases data flow was visible between triads
immediately following each other. This means the readout already
partially placed related triads close to each other. Based on this
observation, we retained the triad order and by convention placed
all triads after one another with increasing addresses. This yielded
what we considered a continuous physical memory space with
addresses starting at 0 and increasing with each triad to 0xEFF. This
corresponded with the observation that the microcode patch RAM
starts at the address 0xF00 for the K8 series of processors.
Figure 2: SEM image of region R1 showing arrays A1 to A4
and the SRAM holding the microcode update. The higher
resolution raw image is available in Appendix A.1.
• 3⃝ Reconstruct the mapping between logical and physical
microcode addresses as well as reorder the triads according
to this mapping.
• 4⃝ Disassemble the resulting triad list into a continuous,
ordered stream of instructions.
The first step, the conversion of images to bitstrings, was already
performed by Koppe et al. [49] and we used this data as our starting
point for our further analysis. The authors also already combined
parts of the readouts into triads. We build upon this and recovered
the remaining part of the triads, which is depicted as step 2⃝ in
the figure. The details of this step are described in Sections 3.1
and 3.2. Step 3⃝, the recovery of the mapping algorithm, constituted
the majority of our efforts. We outline the approach we used in
Section 3.3 and provide details of the solutions we developed in
the following sections. The mapping was reverse engineered for an
AMD K8 processor. However, our approach is also applicable to the
K10 architecture based on the similarities between the two archi-
tectures. For the last step, we extended the disassembler used by
Koppe et al. [49] to include details learned during our own analysis.
3.1 Physical Layout
The physical storage is composed of three larger regions of ROM (R1
to R3), which were identified as the area containing the operations,
and a smaller region (R4) containing the sequence words. Previous
work [49] already performed permutations such as inversion and
interleaving of bit rows to receive whole operations in the correct
bit order. In addition, the algorithm for constructing triads out of
three operations was known. The triads are built by loading a single
Our physical memory space assumed an arbitrary ordering of
A1 – A3 – A4 – A2, so A1 would contain addresses from 0x0 to
0x3FF, A3 from 0x400 to 0x7FF, A4 from 0x800 to 0xBFF and A2
from 0xC00 to 0xEFF. We placed A2 last because it contained less
triads which we assumed to be missing at the end of the addressable
space. In each array, we ordered the blocks starting from the bottom
of the image in Figure 2, omitting the missing block B4 in array A2.
Physical address 0x0 is thus located in A1:B1 and 0xEFF in A2:B3.
3.3 Mapping Recovery Approach
Our recovery approach is based on inferring the mapping based on
address pairs. We chose this approach because it was infeasible to
recover the mapping via hardware analysis. The addressing logic is
complex and the connections span multiple layers, each of which
would require delayering and subsequent imaging. Each address
pair maps a logical (microcode) address to a physical address. Once
the recovered function correctly produces the physical address
for any given logical address in our test set, we can assume that
it will be correct for any further translations. We thus needed a
sufficiently large collection of address pairs. Unfortunately, the
microcode updates only provided two usable data points.
Therefore, we developed an approach that (i) executes all ROM
triads on the CPU individually and extracts the observable seman-
tics of a given logical address, (ii) emulates each triad we acquired
from the physical ROM readout in a custom microcode emulator to
extract the semantics for a given physical address, and (iii) corre-
lates the extracted semantics to find matching pairs of physical and
logical addresses. Details of this process are described in Section 3.4.
This resulted in a total of 54 address pairs. The results were then
reviewed in a manual analysis step to find the correct permutation
of triads for a given block. Once a permutation candidate for a block
is found, it can be verified by checking the correctness of additional
triads. Both the process and its results are described in Section 3.5.
In combination with executing known triads directly from ROM
and extracting their side effects, we can correlate the emulated
instructions with their counterparts with known addresses.
3.4 Microcode Emulation
In order to gather a sufficiently large number of data points to
reverse engineer the fine grained mapping of the ROM addresses,
we implemented a microcode emulation engine. This emulation
engine is designed to replicate the behavior of the CPU during the
execution of a given triad. This means that for any given input,
the output of both the physical CPU and our emulation engine
should be identical. As our analysis framework is implemented in
Python, we also chose this language to implement the emulator.
The emulator is designed to interpret the bitstrings extracted from
the CPU and first disassembles them using our framework. For
each individual micro-op, this yields the operation as well as the
source and target operands. The operations itself are implemented
as Python lambdas modifying the indicated registers. This allows
for simple extension of the supported instruction list. For each triad
the emulator returns a changeset indicating the changed registers
and their new values. Currently this is done on a triad-by-triad basis
to support our reverse engineering method. However, by supplying
the changed register set as the input state for the next triad, the
emulation can be performed for any number of triads in sequence.
The emulation engine currently supports all of the identified arith-
metic microcode operations. Additionally, we supply a whitelist of
instructions that produce no visible effect on the specified registers.
While these instructions have side effects when executed on the
CPU, they are treated as no-ops, because only the visible state of the
registers is considered in our further analysis. The instructions and
their behavior are based on previous reverse engineering results.
We ensured that we correctly identified a certain instruction by
executing the bitstring of the instruction in a microcode update
applied to a real CPU and observing the effects on the specified
registers with varying inputs.
However, as the ROM contains operations that implement un-
known behavior, most importantly reading and writing internal
status registers or collecting information on the currently executed
instruction, we were unable to accurately emulate all of the triads.
Also the readout itself introduced both potential bit errors as well
as sections that are unable to be read due to dust particles or other
disturbances in the raw image. We thus opted to only consider
triads for further analysis that (i) contain only known instructions
and (ii) were not part of an unreadable section. This emulation
yielded the behavior of triads with known physical addresses for a
given input state. The input state assigned a different value to every
x86 and usable microcode register. During testing we observed that
not all microcode registers can be freely assigned to, some will
trigger erratic CPU behavior leading to crashes or loss of control.
Thus, we had to exclude certain registers from our tests. Our input
and output state contains all six x86 general purpose registers (we
excluded the stack manipulation registers EBP and ESP) as well as
in total 22 internal microcode registers.
To gather the behavior for known logical addresses, we forced
execution of each ROM triad directly on the CPU. For this execu-
tion, we chose the same input state that was previously used for
the emulation. The input state was set by a sequence of x86 instruc-
tions setting the x86 registers to the chosen values. The microcode
registers were then set after entering microcode by a sequence of
micro-ops preceding the jump to the triad address to be tested. The
output was gathered by writing out the changed registers as speci-
fied by our emulator to x86 registers using microcode executed after
the tested triad. Due to the different values for each register, we
could determine which register was used as an input in the tested
triad as well as the operation performed on it. However, we also
had to exclude a large number of logical addresses as those triads
lead to a loss of control or showed a behavior that was independent
of the given input state. In combination, these two tests yielded a
collection of address pairs consisting out of the physical address of
a candidate triad and the logical address of the triad.
3.5 Permutation Algorithms
After gathering the microcode address pairs, we had to reconstruct
the function used to map these onto each other. Due to the hard-
ware layout and hardware design possibilities, we determined a
number of different candidate permutation functions. Additionally,
we used the data points gathered in the previous step to develop
new algorithmic options. We then applied these possible functions
in combination to test whether they were used for a specific triad.
Figure 3: Translation of logical to physical microcode ROM addresses.
Via this empirical testing, we found that the ROM uses the fol-
lowing permutations:
• T: table based 16 triad-wise permutation, illustrated in Ta-
ble 1
• R: reverse counting direction, mapping higher physical ad-
dress triads to lower logical addresses
• S: pairwise swap two consecutive triads
• L: custom table based 16 triad-wise permutation for last
block, illustrated in Table 1
To determine the combination of permutations used for a specific
address pair, we verified the possibilities by calculating the physical
address for the given logical address. If the result matches the
expected value, the combination is correct. The found combination
is then used to calculate the physical addresses for the rest of the
data points. Once a mismatch is found, the first approach is repeated
to determine the next combination of permutations.
We determined that the mapping function is constant for 256
triads at a time, then the combination of algorithms changes. We
also had to account for potentially swapped 256 triad blocks, so
in case of a mismatch the remaining triad blocks in a region were
then considered. This yielded the mapping algorithm for all but the
last 256 triads. The last block uses a different mapping algorithm
that was reconstructed manually. The detailed mapping of all triad
blocks is given in Figure 3; Table 1 illustrates the permutation
algorithms T and L.
4 MICROCODE PRIMITIVES
Microcode programs supported by modern processors combined
with the ability to update this microcode can provide a range of
useful security primitives that can be used to build system defenses.
In the following, we explore several key primitives and discuss in
Section 5 how system defenses can be implemented based on our
analysis results described in the previous section.
Enabling or disabling CPU features at runtime Despite re-
cently uncovered security issues such as Spectre and Meltdown [37,
45, 53], speculative execution is an important feature that enables
the performance of current CPU families. While the naïve counter-
measure—disabling speculative execution completely—provides a
high level of security, it significantly reduces the performance of a
Physical
0x00
0x10
0x20
0x30
0x40
0x50
0x60
0x70
0x80
0x90
0xA0
0xB0
0xC0
0xD0
0xE0
0xF0
logical - T logical - L
0x00
0x20
0x40
0x60
0x80
0xA0
0xC0
0xE0
0x10
0x30
0x50
0x70
0x90
0xB0
0xD0
0xF0
0x00
0x10
0x20
0x30
0x40
0x50
0x60
0x70
0xF0 (RS)
0xE0 (RS)
0xD0 (RS)
0xC0 (RS)
0xB0 (RS)
0xA0 (RS)
0x90 (RS)
0x80 (RS)
Table 1: Translation of addresses for the T and L algorithms.
The L algorithm applies the R and S permutations to the
higher addresses after the table based permutation.
given system. However, if the speculative execution could be dis-
abled only temporally or only for certain program states, a trade-off
between security and performance could be implemented.
Another example of a feature that can be used by both benign and
malicious applications is the availability of high-resolution timers.
Such timers allow an attacker to abuse microarchitectural timing
side channels to gather information from otherwise inaccessible
contexts [13, 39, 46, 62]. In both cases, microcode can improve
security by applying a fine-grained permission model on top of
existing protection mechanisms by restricting features to certain
applications or contexts only.
Intercepting low-level CPU processes A core functionality of