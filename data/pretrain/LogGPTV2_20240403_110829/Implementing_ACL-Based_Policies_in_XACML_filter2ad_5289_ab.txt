holds via matching group entries.
If there is neither a
user nor a group match but the user is authenticated, the
permissions of the any-other entry are returned (or an
empty permission set if this entry is absent).
If the user
is unauthenticated, the algorithm returns the permissions of
the unauthenticated entry after computing a bitwise
“and” operation against the any-other entry. The lat-
ter operation ensures that unauthenticated users do not have
more permissions than those matched by the any-other
entry. The above evaluation scheme on ACLs is similar to
schemes found in Posix or DCE [11].
Note that Bob shall not be able to write (w) even when
his credentials contain the group id Admin. Also, an au-
thenticated user (not Alice or Bob) belonging to the group
Physician but not to Admin shall not be able to write
even if an authenticated user (not Alice or Bob) not be-
longing to any of these groups can. The latter examples
show that there is the possibility to express negative per-
missions for particular users due to the “pre-emptiveness”
of the evaluation algorithm.
ACL Policy. We translate an ACL into an XACML pol-
icy with a first-applicable algorithm for combining
rules. That is, the effect (Deny or Permit) of the ﬁrst rule
target match determines the result of the policy. Further,
we generate two rules for each ACL Entry. For the respec-
tive subject, the ﬁrst rule grants the assigned permissions
whereas the second rule denies any (other) permission. As
each rule shall be evaluated in the order in which it is listed
in the policy, the second rule denies access if the subject
does not have the required permission in the preceeding
rule. Whereas the rules for user entries are next to each
other, positive group rules preceed negative group rules to
implement the union semantics of groups. Finally, a catch
rule at the end of the rule set assures that access is denied
for every requestor not addressed in the ACL, implementing
the closed world semantics of Tivoli Access Manager.
To incorporate the special entries any-other and
unauthenticated, we impose the convention that there
are two special subjects. If a requestor is unauthenticated it
shall be denoted by the user Unauthenticated. By def-
inition, every user is member of the group Any-other ex-
cept user Unauthenticated who is not member of any
group. The structure of a XACML Policy for ACL is given
in Figure 4). Criss-cross lines indicate negative rules.
The below XACML policy deﬁnition describes the au-
deny−overridesResource PolicySetAuthRuleACLTraversePOPTraverse (‘T’) permission that controls who can traverse a
particular node to access nodes lower in the tree of the ob-
ject space. Checking object accessibility thus includes the
search for all ACLs attached to ancestors on the path to the
root,2 and, on each level, to check whether the Traverse per-
mission is granted. Let us call the ACL attached to the node
to be the primary ACL and the ACL(s) on the path to be the
secondary ACLs.
To illustrate this particular evaluation strategy, let us con-
sider the accessibility of node /Mgmt/Manuals in Fig-
ure 1. ACL3 is deﬁned in Figure 3 and the content of ACL1
is given below:
user Alice
group Admin
group Physician
any-other
-rw
T-w
-r-
Tr-
If we assume that Alice is member of group Physician,
Bob is member of group Admin, and Charles is not mem-
ber of group Physician, then we get following effective
permissions:
Alice
---
Bob
-r-
Charles Tr-
According to ACLs ACL1 and ACL3, user Alice has suf-
ﬁcient permissions to write on node /Mgmt/Manuals
(ACL3) but does not have the Traverse permission on node
/ (ACL1). Even if Alice would be member of group
Admin she cannot access any node below the root because
of the preemption after evaluation of her user entry in ACL1.
The same holds for unauthenticated users as there is no
unauthenticated entry in ACL1.
Traverse Permission PolicySet. Evaluating a request of
Alice to read a resource requires the checking of two ac-
cess rights – whether the primary ACL grants the read ac-
tion and the secondary ACLs grant the Traverse action.
However, XACML does only allow to check for one of the
two actions [6, XACML Context Request]. The challenge
is therefore to enforce the checking of Traverse permissions
in parallel to the evaluation of an access request for another
action.
The crucial observation is the fact that it is not neces-
sary to explicitly match against the Traverse permission. It
is sufﬁcient to have a check that fails if the requester does
not hold the Traverse permission in any secondary ACL.
Our solution is to shift up the evaluation of secondary ACLs
2The ACL attached to the requested object is not considered.
Figure 4. Structure of an ACL.
thorizations given by the ACL of Fig. 3, using a short-hand
notation for the XACML Target elements.
 Alice,(r,w) 
 Alice 
 Bob,w 
 Bob 
 Admin,w 
 Physician,r 
 Admin 
 Physician 
 Any-other,(T,r) 
 Unauthenticated,T 
The Deny rules for Alice and Bob ensure that, after a suc-
cessful user id match, no other matches are attempted. All
the user rules of course precede all the group rules. Each of
the user Deny rules follows its corresponding permit rule.
The Deny rules for Admin and Physician ensure that
granting a request based on the Any-other rule can oc-
cur only if none of the requester’s credentials matched a
user id or group name. As a request can match multiple
group rules and the requester should be granted access if
any of his group credentials give the right permission, all
the group Permit rules precede all the group Deny rules.
The Any-other rule follows any group rule such that per-
missions based on the any-other ACL entry will only
be granted if no speciﬁc user or group match occurred. The
Unauthenticated rule can be at any position except the
last.
Note that if there is an ACL entry without permissions,
for example ’user Charles ---’, only the negative rule
would be generated.
4.2 Traverse Permission
In Tivoli Access Manager, it is not sufﬁcient that the re-
quester holds the necessary permissions on the object but
the object must also be accessible for the requester. It is the
177187
User 1User 2Group 1Group 2Group 3Group 1 CatchGroup 3 CatchUser 1 CatchFinal CatchUser 2 CatchGroup 2 Catchfirst-applicableACL Policyfrom rules to policies. Each secondary ACL lists the com-
bination of users and groups that hold the Traverse action.
First, we can safely remove all actions in the secondary
ACL except Traverse. Next, we translate each ACL into an
XACML secondary policy as described in Section 4.1. In
the policy, we remove all action elements such that the pol-
icy permits any action only if it would permit a Traverse ac-
tion. Thus, it is sufﬁcient to check whether there is a match-
ing user or group entry, which is implemented by rules with
a Subject element only. The set of all secondary ACL poli-
cies is aggregated into a policy set with deny-overrides.
Figure 5. Structure of a Traverse policy.
To access node ‘/Mgmt/Manuals’, a requester is re-
quired to have Traverse permission on node ‘/’, which is
controlled by ACL ACL1. Following the above approach,
an equivalent check is encoded in the below XACML Pol-
icy.
 Alice 
 Admin 
 Physician 
 Any-other 
Note that the structure of the above XACML policy for ACL
ACL1 follows the approach given in Section 4.1 except that
if a User or Group Entry holds the Traverse permission then
only a Permit rule is created with the Subject as its only
element else only a Deny rule is created.
Finally, accessibility of a node is encoded by a
PolicySet, where each policy contains the information
on subjects with Traverse permissions at a particular node
on the path to the root. The number of policies in the pol-
icy set is the number of ACLs on the path from the node
to the root without the node itself. These policies are com-
bined with the deny-overrides algorithm: if one of the
nodes cannot be traversed (one of the policies evaluates to a
Deny), the requested access is denied.
Figure 5 shows the structure of the Traverse Policy-
Set, “anding” the results of the policies for the secondary
ACLs.
In our example, the accessibility to the region of
node /Mgmt/Manuals is only controlled by ACL ACL1
attached to the root; therefore, the PolicySet contains only
one Policy holding the Traverse information of ACL1.
178188
4.3 Protected Object Policies
attributes whose values either additionally restrict access
A protected object policy (POP) is a set of predeﬁned
• to a speciﬁc time period or weekday,
• to an IP address range or to minimal authentication lev-
els for certain IP addresses,
or impose additional provisional actions (see also [9]) on
• warning,
• audit levels,
• quality of protection: none, integrity, privacy.
A provisional action is passed back to the resource man-
ager3 along with the answer. Conditions imposed by a POP
apply to all principals.
Although Tivoli Access Manager provides these POP at-
tributes, it only enforces the warning mode, audit level,
and time-of-day access. WebSEAL, a resource manager
for Web-based information and included with Tivoli Access
Manager, uses POPs to enforce quality of protection4 (qop)
and to restrict certain IP addresses (or IP address ranges) to
access any resource in the secure domain (ipauth).
POP attribute Value
Deny
audit-level
9.0.0.0, 255.0.0.0, 1
ipauth
ipauth
anyothernw Forbidden
Integrity
qop
tod-access
mon,tue,wed:0800-1800
warning
No
Table 1. Attributes of a POP
To illustrate the policies that can be expressed by POPs,
we consider an example given in Table 1. The audit-level
attribute Deny instructs the authorization service to log all
unsuccessful requests. The ipauth attribute specify that
any request coming from an IP address ”9.*.*.*” has
to have an authentication level of at least 1. The qop at-
tribute demands the use of integrity checking mechanism
such as MACs to ensure that the data of the request has not
changed. The tod-access setting speciﬁes that access can
only be granted on Mondays, Tuesdays and Wednesdays be-
tween 8 a.m. and 6 p.m. Finally, the value of the warning
attribute switches off the warning mode that would allow
bypassing of the access decisions for testing purposes.
POP PolicySet. To encode POPs in XACML, we observe
that each POP attribute is a parameter of (provides input for)
3In the XACML model, it corresponds to a Policy Enforcement Point
(PEP)
4The required level of data protection, determined by a combination
of authentication, integrity, and privacy conditions, when performing an
operation on an object.
Traverse PolicySetdeny−overridesACL T1ACL T2ACL Tna predeﬁned condition or provision. For example, the eval-
uation of the tod-access part of the POP shown in Table 1
includes the evaluation of the following condition:
date() IsIn tod-access
to XACML conditions,
where function date() returns the current date and time. For
the above example, this condition would return true if the
current time is Mon May 26 14:45:42 CEST 2008.
Attributes warning, tod-access, and ipauth
correspond
attributes
audit-level and qop correspond to XACML obliga-
tions. For reasons of simplicity, we implement each of the
POP attributes as a policy and combine them in a PolicySet
(representing the collection of POP constraints) using a
deny-overrides policy combining algorithm (see Figure 6).
This structure also works for policies with obligations
because the XACML PDP combines obligations of policies
with the same effect [6, Sect. 7.14].
and
Figure 6. Structure of a POP.
Each policy consists of a Permit rule, which tests the
condition, and a Deny rule triggered only if the condi-
tion failed. We now show the details of each of the poli-
cies. The TIME IN RANGE policy consists of one Permit
rule testing the time condition, and a Deny rule which is
triggered only if the condition does not hold. Checking
the time interval is easily expressed by XACML built-in
functions where current time is evaluated by selecting the
environment:current-time environment attribute,
which must either be present in the decision request or its
value must be supplied by the PDP.
08:00:00
18:00:00
179189
In the DAY OF WEEK policy, there is an environment vari-
able called day-of-week, whose value we assume to be
present in the XACML Request Context or otherwise sup-
plied by the PDP. Note that checking whether the value
of the existing environment:current-date envi-
ronment attribute indicates a particular weekday would ei-
ther require a complicated XACML condition expression or
the deﬁnition of a non-standard function.
Mon
Tue
Wed
For space limitation, we do not show the XACML condi-
tion to encode the POP attribute ipauth. IP addresses are
represented as bit strings and regular expressions are used
to matching addresses. This makes reading cumbersome
but allows for ﬁner-grained condition creation on the net-
work address. Catch rules are used as well to handle the
case where the network address matches but the authlevel
did not satisfy the condition.
POP attributes that represent provisions are encoded as
XACML obligations, which are operations that must be per-