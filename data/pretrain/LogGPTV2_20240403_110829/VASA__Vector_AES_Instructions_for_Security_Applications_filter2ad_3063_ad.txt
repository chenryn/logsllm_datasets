specific data, both non-vector computable and loaded data, e.g., the
lane 0 (the lowest 128 bit of the value) of all three virtual registers
are assigned to gate 0, whereas lane 1 of all three is assigned to
gate 1 and hold the input wire keys and a processed garbled table
value. 2) Perform vectorizable operations on the input data, e.g.,
deriving computed inputs from loaded inputs with a global offset. 3)
Perform the AES operations on the prepared inputs and keys with a
sufficiently large batch size. 4) Execute vectorizable post-processing
on the results and potentially other input values, e.g., XORing pairs
of AES outputs as required by the scheme. 5) Do the remaining
post-processing and scatter the data back to memory, e.g., handle
operations that cannot be vectorized and where data needs to be
extracted from the vectors first. Then, write the values back to the
memory location where they are expected.
The cost of such a low-level approach is, of course, that not
just the AES code needs to be re-written to satisfy the types of
each used architecture and extension but also the immediately
surrounding code leading to significant code duplication. An
example implementation for HalfGate’s [97] AND evaluation
with fixed keys [13] and VAES is given in Listing 1 in Appen-
dix A. Depending on the familiarity of the developer with the
available platform instructions, their invocation, and the avail-
ability of validation methods, this register-oriented technique
can be implemented within a few hours per optimized functionality.
4.2.2 Memory-Oriented Computation. Our memory-oriented
technique addresses the code duplication concerns of the register-
oriented one but can result in less performance. In particular, it only
requires that a core primitive for this technique, e.g., electronic
codebook mode, is implemented in an architecture-specific way.
This core primitive is then used with a memory abstraction wher-
ever needed while ensuring a sufficiently large number of AES calls
for every invocation. The main loop for this only consists of three
steps: 1) perform the data loading and preprocessing, 2) let the
optimized library perform the operations, and 3) read the results
using the memory abstraction and post-processing and store them.
The pre-processing and post-processing steps for this approach can
use platform-independent instructions lowering code duplication
ACSAC’21,December6–10,2021,VirtualEvent,USAJean-PierreMünch,ThomasSchneider,andHosseinYalameANDIN(A)IN(B)IN(C)ANDANDXORXORXOREvalXOREvalOUT(S)OUT(C)ANDANDIN(A)IN(B)IN(C)ANDANDXORXORXORXORXOREvalXOROUT(S)OUT(C)OUT(C)ANDFigure1:Asimple1-bitadderwithdifferentmanuallychosengateorderingsasanillustrativeexampleforthefreedomoftopologicalordering.Solidblackarrowsdenotedatadependencies,reddashedarrowsdenoteonepossiblesub-optimalorder-ingintheleftgraphandgreendottedarrowsshowapreferableorderingintherightgraph.The“Eval”marksdenoteplaceswheredynamicbatchingwithfreeXORswouldtriggerprocessingofthequeuedfreshANDgates.Allunfillednodesareonthefirstlayerintherightfigureandalllight-blue-fillednodesareonthesecondlayer.Alayerisdefinedtobethesetofallnodeswiththesameamountofnon-free(AND)gatesbetweenthemandtheinputonthecriticalpath.largerlayersoversmallerlayers.AnexampleofsuchimprovedgatearrangementisprovidedfromthelefttotherightgraphinFig.1.Additionally,localityhastobeconsideredwhengeneratingcircuits,i.e.,usageofwiresmuststayclosetowheretheyaregeneratedasnottopushthewirevaluesoutofcaches,whilemaintainingenoughdistancetoallowbatchingoncurrentandmoreinstruction-levelparallelfuturearchitectures.4.2BatchComputationAfteronehasidentifiedabatchofindependentAEScalls,theyneedtobecomputed.Forthis,wehaveusedtwotechniques:register-orientedcomputation,whichfocusesonperformanceandsimplicitytothecompiler,andmemory-orientedcomputation,whichfocusesonmodularity.4.2.1Register-OrientedComputation.Ourprimarytechniqueforprocessingbatchesdescribesthetaskcomputationsaslow-levelaspossiblewithoutresortingtoassembly.Byusingvectorregis-tertypesandconstant-sizedloopswegivethecompilerasmanyopportunitiesforoptimizationaspossiblewhilestillallowingtheconcisenessofhigh-levelcode.Concretely,wehaveidentifiedfivestepsexecutedcontinuouslyinaloopforalltasks.1)Filltheappropriatelanesofthevectorvalueswiththetask-specificdata,bothnon-vectorcomputableandloadeddata,e.g.,thelane0(thelowest128bitofthevalue)ofallthreevirtualregistersareassignedtogate0,whereaslane1ofallthreeisassignedtogate1andholdtheinputwirekeysandaprocessedgarbledtablevalue.2)Performvectorizableoperationsontheinputdata,e.g.,derivingcomputedinputsfromloadedinputswithaglobaloffset.3)PerformtheAESoperationsonthepreparedinputsandkeyswithasufficientlylargebatchsize.4)Executevectorizablepost-processingontheresultsandpotentiallyotherinputvalues,e.g.,XORingpairsofAESoutputsasrequiredbythescheme.5)Dotheremainingpost-processingandscatterthedatabacktomemory,e.g.,handleoperationsthatcannotbevectorizedandwheredataneedstobeextractedfromthevectorsfirst.Then,writethevaluesbacktothememorylocationwheretheyareexpected.Thecostofsuchalow-levelapproachis,ofcourse,thatnotjusttheAEScodeneedstobere-writtentosatisfythetypesofeachusedarchitectureandextensionbutalsotheimmediatelysurroundingcodeleadingtosignificantcodeduplication.Anexampleimple-mentationforHalfGate’s[97]ANDevaluationwithfixedkeys[13]andVAESisgiveninListing1inAppendixA.Dependingonthefamiliarityofthedeveloperwiththeavailableplatforminstructions,theirinvocation,andtheavailabilityofvalidationmethods,thisregister-orientedtechniquecanbeimplementedwithinafewhoursperoptimizedfunctionality.4.2.2Memory-OrientedComputation.Ourmemory-orientedtechniqueaddressesthecodeduplicationconcernsoftheregister-orientedonebutcanresultinlessperformance.Inparticular,itonlyrequiresthatacoreprimitiveforthistechnique,e.g.,electroniccodebookmode,isimplementedinanarchitecture-specificway.Thiscoreprimitiveisthenusedwithamemoryabstractionwher-everneededwhileensuringasufficientlylargenumberofAEScallsforeveryinvocation.Themainloopforthisonlyconsistsofthreesteps:1)performthedataloadingandpreprocessing,2)lettheoptimizedlibraryperformtheoperations,and3)readtheresultsusingthememoryabstractionandpost-processingandstorethem.Thepre-processingandpost-processingstepsforthisapproachcan136VASA: Vector AES Instructions for Security Applications
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 3: Overview of improved frameworks, used batch identification methods, and batch computation strategies used.
for handling a batch of gates at a time. However, this technique has
performance overhead if implemented this way as implementing
counter-mode can be significantly slower than with a dedicated
implementation as the compiler might generate general-purpose
64-bit store instructions and adds from the abstract code. In con-
trast, a direct use of 64-bit vector additions might be significantly
faster. An example implementation for EMP-AG2PC’s [90, 91]
AND evaluation with fixed keys [13] and VAES is given in Listing 2
in Appendix A. As this technique favors engineering efficiency
over runtime efficiency, the required effort for its implementation
is generally a few hours if a pre-existing implementation can be
adapted and some form of batch identification has already been
implemented.
4.3 Frameworks
To measure the performance impact of batching, VAES, and the
above techniques we have applied them to the MPC frameworks
and libraries ABY [25], EMP-OT [90], and EMP-AGMPC [90], and
the PPML framework Microsoft CrypTFlow2 [82]. We will now
briefly discuss our changes to each framework and library and
provide an overview in Table 3.
4.3.1 ABY. We chose to use ABY [25] as it is a flexible, optimized
framework for mixed-protocol secure two-party computation. For
our modifications, we targeted the GC subcomponent of ABY which
uses HalfGates garbling [97] with a fixed AES key [13] and invokes
OpenSSL individually for every single AES operation used. We
changed this fixed-key AES garbling, which we call “PRP” based on
the public random permutation assumption used, to use a register-
oriented computation. We furthermore added to ABY support for
two more instantiations of the encryption functions in the Half-
Gates [97] garbling scheme: CIRC [97] is based on a circular security
assumption and uses the wire keys as AES keys. MI [41] provides
better multi-instance security and uses the wire key as the data
input and the gate index as the AES key starting from a random
offset. We note that these three schemes “PRP” / “CIRC” / “MI” need
0 / 4 / 2 computations of the AES key schedule to garble an AND
gate respectively. Garbled circuit evaluation requires 0 / 2 / 2 key
schedules per AND gate respectively. Neither the evaluation nor the
garbling of XOR gates requires communication or AES operations
with HalfGates.
Furthermore, we added an implementation of the PRF-based
garbling scheme of Gueron et al. [40] which is secure in the
standard model. It uses 8 AES operations with 4 keys for garbling
an AND gate, 2 uniquely keyed operations for evaluating an
AND, 3 uniquely keyed AES operations for XOR garbling, and 1-2
uniquely keyed AES operations for XOR evaluation. We identify
batches using dynamic batching with support for SIMD gates
and with support for two queues with shared indices for the
PRF-based scheme. For all these four schemes, we implemented
two register-oriented backends each for the batch processing: one
using AES-NI and 128-bit operations, and another one using VAES
and AVX512.
4.3.2 EMP-OT. We chose EMP-OT [90] because it is a state-
of-the-art implementation for oblivious transfer and it is the
underlying OT library for the two frameworks in § 4.3.3 and § 4.3.4
and other recent works [52]. We modified the main OT protocol
implementations [8, 9, 57] by replacing the AES-NI based ECB and
pseudo-random generator (PRG) implementations in the referenced
EMP-Tool library [90] with VAES and widened the batch size from
8 to 16. Additionally, we widened the bit matrix transposition
algorithm to use 512-bit AVX512 operations instead of 128-bit SSE
operations. Finally, we changed the LPN-based FERRET OT [93]
implementation to use VAES instead of AES-NI for selecting the
matrix-vector multiplication entries.
4.3.3 EMP-AGMPC. The EMP-AGMPC [90, 92] framework pro-
vides a low-communication actively secure garbling scheme. For
the implementation, we used a memory-oriented computation
strategy mirroring the modular design of the EMP toolkit that
strongly encourages modularity. We used basic dynamic batching
with early execution for the online and preprocessing phases’
circuit processing. In the corresponding EMP-OT library [90]
which implements the actively secure OT extension of [9], we
instantiate the PRG using VAES.
4.3.4 CrypTFlow2. Microsoft CrypTFlow2 [82] is a state-of-the-
art framework for general PPML neural network inference. The
implementation uses a sub-part of EMP-OT [90] for OT operations.
We extended the modular implementation of CrypTFlow2 with
VAES-based implementations for: 1) the 128-bit and 256-bit PRGs,
2) the AES-NI based ECB, and 3) the circular-secure correlation
robust function in the garbling scheme of Gueron et al. [40].
5 EVALUATION
This section presents the benchmarking platform and the perfor-
mance results we achieved for the frameworks from § 4.3.
VASA:VectorAESInstructionsforSecurityApplicationsACSAC’21,December6–10,2021,VirtualEvent,USATable3:Overviewofimprovedframeworks,usedbatchidentificationmethods,andbatchcomputationstrategiesused.BatchIdentification(§4.1)Framework(§4.3)Dynamic(§4.1.1)Static(§4.1.2)Computation(§4.2)ABY[25](§4.3.1)Non-Free-XOR+SIMDSIMDRegister-Oriented(§4.2.1)EMP-OT[90](§4.3.2)——Memory-Oriented(§4.2.2)EMP-AGMPC[90,92](§4.3.3)Regular-Early-Execution—Memory-Oriented(§4.2.2)CrypTFlow2[82](§4.3.4)——Memory-Oriented(§4.2.2)useplatform-independentinstructionsloweringcodeduplicationforhandlingabatchofgatesatatime.However,thistechniquehasperformanceoverheadifimplementedthiswayasimplementingcounter-modecanbesignificantlyslowerthanwithadedicatedimplementationasthecompilermightgenerategeneral-purpose64-bitstoreinstructionsandaddsfromtheabstractcode.Incon-trast,adirectuseof64-bitvectoradditionsmightbesignificantlyfaster.AnexampleimplementationforEMP-AG2PC’s[90,91]ANDevaluationwithfixedkeys[13]andVAESisgiveninListing2inAppendixA.Asthistechniquefavorsengineeringefficiencyoverruntimeefficiency,therequiredeffortforitsimplementationisgenerallyafewhoursifapre-existingimplementationcanbeadaptedandsomeformofbatchidentificationhasalreadybeenimplemented.4.3FrameworksTomeasuretheperformanceimpactofbatching,VAES,andtheabovetechniqueswehaveappliedthemtotheMPCframeworksandlibrariesABY[25],EMP-OT[90],andEMP-AGMPC[90],andthePPMLframeworkMicrosoftCrypTFlow2[82].WewillnowbrieflydiscussourchangestoeachframeworkandlibraryandprovideanoverviewinTable3.4.3.1ABY.WechosetouseABY[25]asitisaflexible,optimizedframeworkformixed-protocolsecuretwo-partycomputation.Forourmodifications,wetargetedtheGCsubcomponentofABYwhichusesHalfGatesgarbling[97]withafixedAESkey[13]andinvokesOpenSSLindividuallyforeverysingleAESoperationused.Wechangedthisfixed-keyAESgarbling,whichwecall“PRP”basedonthepublicrandompermutationassumptionused,tousearegister-orientedcomputation.WefurthermoreaddedtoABYsupportfortwomoreinstantiationsoftheencryptionfunctionsintheHalf-Gates[97]garblingscheme:CIRC[97]isbasedonacircularsecurityassumptionandusesthewirekeysasAESkeys.MI[41]providesbettermulti-instancesecurityandusesthewirekeyasthedatainputandthegateindexastheAESkeystartingfromarandomoffset.Wenotethatthesethreeschemes“PRP”/“CIRC”/“MI”need0/4/2computationsoftheAESkeyscheduletogarbleanANDgaterespectively.Garbledcircuitevaluationrequires0/2/2keyschedulesperANDgaterespectively.NeithertheevaluationnorthegarblingofXORgatesrequirescommunicationorAESoperationswithHalfGates.Furthermore,weaddedanimplementationofthePRF-basedgarblingschemeofGueronetal.[40]whichissecureinthestandardmodel.Ituses8AESoperationswith4keysforgarblinganANDgate,2uniquelykeyedoperationsforevaluatinganAND,3uniquelykeyedAESoperationsforXORgarbling,and1-2uniquelykeyedAESoperationsforXORevaluation.WeidentifybatchesusingdynamicbatchingwithsupportforSIMDgatesandwithsupportfortwoqueueswithsharedindicesforthePRF-basedscheme.Forallthesefourschemes,weimplementedtworegister-orientedbackendseachforthebatchprocessing:oneusingAES-NIand128-bitoperations,andanotheroneusingVAESandAVX512.4.3.2EMP-OT.WechoseEMP-OT[90]becauseitisastate-of-the-artimplementationforoblivioustransferanditistheunderlyingOTlibraryforthetwoframeworksin§4.3.3and§4.3.4andotherrecentworks[52].WemodifiedthemainOTprotocolimplementations[8,9,57]byreplacingtheAES-NIbasedECBandpseudo-randomgenerator(PRG)implementationsinthereferencedEMP-Toollibrary[90]withVAESandwidenedthebatchsizefrom8to16.Additionally,wewidenedthebitmatrixtranspositionalgorithmtouse512-bitAVX512operationsinsteadof128-bitSSEoperations.Finally,wechangedtheLPN-basedFERRETOT[93]implementationtouseVAESinsteadofAES-NIforselectingthematrix-vectormultiplicationentries.4.3.3EMP-AGMPC.TheEMP-AGMPC[90,92]frameworkpro-videsalow-communicationactivelysecuregarblingscheme.Fortheimplementation,weusedamemory-orientedcomputationstrategymirroringthemodulardesignoftheEMPtoolkitthatstronglyencouragesmodularity.Weusedbasicdynamicbatchingwithearlyexecutionfortheonlineandpreprocessingphases’circuitprocessing.InthecorrespondingEMP-OTlibrary[90]whichimplementstheactivelysecureOTextensionof[9],weinstantiatethePRGusingVAES.4.3.4CrypTFlow2.MicrosoftCrypTFlow2[82]isastate-of-the-artframeworkforgeneralPPMLneuralnetworkinference.Theimplementationusesasub-partofEMP-OT[90]forOToperations.WeextendedthemodularimplementationofCrypTFlow2withVAES-basedimplementationsfor:1)the128-bitand256-bitPRGs,2)theAES-NIbasedECB,and3)thecircular-securecorrelationrobustfunctioninthegarblingschemeofGueronetal.[40].5EVALUATIONThissectionpresentsthebenchmarkingplatformandtheperfor-manceresultsweachievedfortheframeworksfrom§4.3.137ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Jean-Pierre Münch, Thomas Schneider, and Hossein Yalame
5.1 Evaluation Platform
For all measurements, we use an Apple Macbook Pro with an
Intel Core i7-1068NG7, 2x16GB of dual rank Samsung LPDDR4-
3733 RAM (K4UCE3Q4AA-MGCL). It runs Arch Linux using the Linux
5.9.13.arch1-1 kernel along with GCC 10.2.0 and Clang 11.0.0 which
were used for compiling the code. For comparative AES-NI mea-
surements we use the same machine.
5.2 ABY
For ABY (cf. § 4.3.1), we ran the benchmarks with both parties
locally using a single sample per triple of circuit, scheme and
implementation backend (reference, AES-NI, and VAES). For each
measurement, the garbling times are taken from the logs of the
party running the garbling operation and the data-input-dependent
online time from the other party running the evaluation which
are executed after each other in ABY. This is done to capture
the pure computation time for garbling and evaluation. For the
evaluation, we use circuits of AES (with 65× parallel SIMD), SHA-1
(with 512-bit input and 63× parallel SIMD), and for circuit-based
private set intersection (PSI) the sort-compare-shuffle (SCS) circuit
(1024 elements of 32-bits) [49], and circuit phasing (1024 elements
per side of 32-bit, 3 hash functions, ε = 1.2, stash of size 1) [80].
For the summary in Table 4, we computed the geometric mean
over the performance results of the four above circuits. The
detailed measurements are given in Table 8 in Appendix B. The
binaries were produced by GCC. We note a range of performance
improvements from the use of batched execution of 67 - 161%
and an additional 17 - 171% from the use of VAES. In particular,
we observe better performance improvements from VAES for
garbling schemes needing more cryptographic operations per
gate, e.g., circularly secure computation (CIRC) benefits more than
public-random permutation based computation (PRP) (cf. § 4.3.1).
Discussion. We make two key observations for the ABY bench-
marks in Table 4: First, using batch sizes larger than one increases
the throughput, as can be seen from the runtime decrease of the
baseline reference (by 80-130%). Second, the use of VAES does in-
crease performance further, more so in scenarios where more AES
operations are done per gate, i.e., with the schemes not using fixed
AES keys with HalfGates [13, 97]. Additionally, an investigation
using a profiler showed a high miss-speculation rate for the AES-
NI code using regular "if" branches with the condition depending
on an unpredictable label bit. Therefore, the use of masking facili-
tated by AVX512 is a secondary factor contributing to performance
as it does not invoke speculative execution miss-predicting the
branch with 50% probability. Finally, we note the odd behavior that
multi-instance secure computation (MI) is significantly slower than
circular-secure computation (CIRC) for AES-NI during the evalua-
tion even though they should be tied given that they perform similar
AES operations. Concerning the impact of VAES beyond improv-
ing speculative execution behavior, we see performance increases
of 27% (garbling) and 36% (evaluation) for fixed-key AES because
the AES processing makes up only a somewhat small amount of
processing time. The HalfGates variable-keyed schemes see a 47%
(MI garbling), 43% (CIRC evaluation), and 57% (CIRC garbling) per-
formance increase. PRF-based garbling schemes see the largest
increase with 51% (garbling) and 75% (evaluation) due to a large
amount of AES operations necessary, given that each AND gate
garbling requires 8 AES operations, each AND evaluation 2, each
XOR garbling 3, and each XOR evaluation at least 1.