# FRESCO: Modular Composable Security Services for Software-Defined Networks

**Authors:**
- Seungwon Shin (Texas A&M University, College Station, TX 77840)
- Phillip A. Porras (SRI International, Menlo Park, CA 94025)
- Vinod Yegneswaran (SRI International, Menlo Park, CA 94025)
- Martin W. Fong (SRI International, Menlo Park, CA 94025)
- Guofei Gu (Texas A&M University, College Station, TX 77840)
- Mabry Tyson (SRI International, Menlo Park, CA 94025)

**Abstract:**
OpenFlow, an open standard that has gained significant interest in recent years, embodies the software-defined networking (SDN) paradigm. In SDN, higher-level flow routing decisions are managed by a control layer, which is decoupled from the data handling layer. This separation allows researchers to design and distribute innovative flow handling and network control algorithms more easily. We believe that OpenFlow can drive numerous innovations in network security, simplifying the design and integration of complex security applications into large networks. However, there is currently a lack of compelling OpenFlow security applications.

In this paper, we introduce FRESCO, an OpenFlow security application development framework designed to facilitate the rapid design and modular composition of detection and mitigation modules. FRESCO, itself an OpenFlow application, provides a Click-inspired programming framework that enables security researchers to implement, share, and compose various security modules. We demonstrate the utility of FRESCO through the implementation of several well-known security defenses as OpenFlow services, and evaluate their performance and efficiency.

## 1. Introduction
OpenFlow (OF) networks differ from traditional network infrastructures by redefining the relationship between the data and control planes. OpenFlow embraces highly programmable switch infrastructures, allowing software to compute optimal flow routing decisions on demand. For modern networks, which must handle host virtualization and dynamic application migration, OpenFlow offers the agility needed for dynamic network orchestration.

In an OpenFlow switch, the data plane is programmable, with flows dynamically specified in a flow table. The flow table contains rules that dictate how the data plane processes active network flows. The control plane is simplified to support the OpenFlow protocol, enabling communication with an external controller. The controller, often running on low-cost commodity hardware, coordinates flow rule production logic and updates switches with new flow rules.

From a security perspective, OpenFlow provides a singular point of control over network flow routing decisions. Using OpenFlow, security applications can implement complex logic, such as stateful flow rule production for quarantine procedures or malicious connection redirection. Flow-based security detection algorithms can be redesigned as OpenFlow applications, offering more concise and efficient deployment.

We introduce FRESCO, a new security application development framework. FRESCO addresses key issues in composing new OF-enabled security services. It exports a scripting API that allows security practitioners to code modular libraries for monitoring and threat detection. These libraries can be shared and linked to provide complex network defense applications. FRESCO currently includes 16 reusable modules, which can be combined to build sophisticated security functions.

FRESCO modules can produce flow rules, implementing security directives to counter threats reported by other modules. They incorporate security functions ranging from simple address blocking to complex flow redirection. FRESCO also includes an API for integrating legacy DPI-based security tools, enabling the construction of efficient countermeasure applications.

**Contributions:**
- **FRESCO**: A new application development framework for prototyping composable security services in OF-enabled networks.
- **Security Modules and APIs**: A collection of OpenFlow security mitigation directives and APIs to integrate legacy applications.
- **Exemplar Applications**: Demonstrations of threat detection and mitigation, including scan detectors and BotMiner.
- **Performance Evaluation**: An evaluation showing minimal overhead for live network environments.

## 2. Background and Motivation
Our goal is to design an application framework that enables the modular design of complex OF-enabled network security services. Before presenting FRESCO's design, we review the challenges that motivate its features.

### 2.1 Information Deficiency Challenge
OpenFlow controllers do not uniformly capture and store session information, which is essential for developing security functionality. FRESCO incorporates a database module (FRESCO-DB) to simplify storage and management of session state. It also provides a high-level API that abstracts away complexities related to switch management and specific controller implementations.

### 2.2 Security Service Composition Challenge
FRESCO's modular and composable design, inspired by the Click router architecture, fosters rapid and collaborative development through module composition. It includes a scripting language for linking modules via data sharing and event triggering. Additionally, it provides an API to facilitate flow rule production using information from legacy DPI-based security applications.

### 2.3 Threat Response Translation Challenge
The OpenFlow protocol enables the controlling software layer to communicate flow handling instructions to the data plane. However, security technologies need to express complex, stateful security response directives. FRESCO addresses this by providing a framework for defining and implementing such directives, including host quarantine and flow redirection.

## 3. FRESCO Design
FRESCO consists of an application layer and a security enforcement kernel (SEK), both integrated into NOX, an open-source OpenFlow controller. The application layer is implemented using NOX Python modules, extended through FRESCO's APIs to provide a Development Environment (DE) and a Resource Controller (RC). Developers use the FRESCO script language to define interactions between security modules, which are instantiated to form security applications driven by input and accessed via the DE database API.

## 4. FRESCO Application Layer
The basic unit in FRESCO is a module, defined as a Python object with five interface types: input, output, parameter, action, and event. Modules are event-driven processing functions, and security functions can be realized by a single module or composed into a directed graph for more complex services.

### 4.1 Actions
FRESCO supports actions derived from the NOX OpenFlow controller, including required actions like drop, output, and group, and optional actions like set. FRESCO breaks down the set action into redirect, mirror, and quarantine actions for simpler development. The redirect action redirects packets without explicit state maintenance, the mirror action copies packets for analysis, and the quarantine action isolates suspicious flows.

### 4.2 FRESCO Development Environment
The FRESCO development environment (DE) provides security researchers with tools to synthesize security controls. It includes a database API for managing session state and a high-level API for abstracting switch and controller details.