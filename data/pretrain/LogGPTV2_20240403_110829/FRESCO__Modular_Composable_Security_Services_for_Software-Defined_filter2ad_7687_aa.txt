title:FRESCO: Modular Composable Security Services for Software-Defined
Networks
author:Seungwon Shin and
Phillip A. Porras and
Vinod Yegneswaran and
Martin W. Fong and
Guofei Gu and
Mabry Tyson
FRESCO: Modular Composable Security Services
for Software-Deﬁned Networks
Seugwon Shin1, Phillip Porras2, Vinod Yegneswaran2, Martin Fong2, Guofei Gu1, Mabry Tyson2
(1) Texas A&M University
College Station, TX 77840
PI:EMAIL
PI:EMAIL
(2) SRI International
Menlo Park, CA 94025
{porras,vinod,mwfong}@csl.sri.com
PI:EMAIL
Abstract
OpenFlow is an open standard that has gained tremen-
dous interest in the last few years within the network com-
munity.
It is an embodiment of the software-deﬁned net-
working paradigm, in which higher-level ﬂow routing deci-
sions are derived from a control layer that, unlike classic
network switch implementations, is separated from the data
handling layer. The central attraction to this paradigm is
that by decoupling the control logic from the closed and
proprietary implementations of traditional network switch
infrastructure, researchers can more easily design and dis-
tribute innovative ﬂow handling and network control al-
gorithms. Indeed, we also believe that OpenFlow can, in
time, prove to be one of the more impactful technologies to
drive a variety of innovations in network security. Open-
Flow could offer a dramatic simpliﬁcation to the way we
design and integrate complex network security applications
into large networks. However, to date there remains a stark
paucity of compelling OpenFlow security applications. In
this paper, we introduce FRESCO, an OpenFlow security
application development framework designed to facilitate
the rapid design, and modular composition of OF-enabled
detection and mitigation modules. FRESCO, which is it-
self an OpenFlow application, offers a Click-inspired [19]
programming framework that enables security researchers
to implement, share, and compose together, many differ-
ent security detection and mitigation modules. We demon-
strate the utility of FRESCO through the implementation of
several well-known security defenses as OpenFlow security
services, and use them to examine various performance and
efﬁciency aspects of our proposed framework.
1
Introduction
OpenFlow (OF) networks distinguish themselves from
legacy network infrastructures by dramatically rethinking
the relationship between the data and control planes of
the network device. OpenFlow embraces the paradigm of
highly programmable switch infrastructures [23], enabling
software to compute an optimal ﬂow routing decision on de-
mand. For modern networks, which must increasingly deal
with host virtualization and dynamic application migration,
OpenFlow may offer the agility needed to handle dynamic
network orchestration beyond that which traditional net-
works can achieve.
For an OpenFlow switch, the data plane is made pro-
grammable, where ﬂows are dynamically speciﬁed within a
ﬂow table. The ﬂow table contains a set of ﬂow rules, which
specify how the data plane should process all active network
ﬂows. In short, OpenFlow’s ﬂow rules provide the basic in-
structions that govern how to forward, modify, or drop each
packet that traverses the OF-enabled switch. The switch’s
control plane is simpliﬁed to support the OpenFlow proto-
col, which allows the switch to communicate statistics and
new ﬂow requests to an external OpenFlow network con-
troller. In return, it receives ﬂow rules that extend its ﬂow
table ruleset.
An OF controller is situated above a set of OF-enabled
switches, often on lower-cost commodity hardware. It is the
coordination point for the network’s ﬂow rule production
logic, providing necessary ﬂow rule updates to the switch,
either in response to new ﬂow requests or to reprogram the
switch when conditions change. As a controller may com-
municate with multiple OF switches simultaneously, it can
distribute a set of coordinated ﬂow rules across the switches
to direct routing or optimize tunneling in a way that may
dramatically improve the efﬁciency of trafﬁc ﬂows. The
controller also provides an API to enable one to develop
OpenFlow applications, which implement the logic needed
to formulate new ﬂow rules. It is this application layer that
is our central focus.
From a network security perspective, OpenFlow offers
researchers with an unprecedented singular point of con-
trol over the network ﬂow routing decisions across the
data planes of all OF-enabled network components. Using
OpenFlow, an OF security app can implement much more
complex logic than simplifying halting or forwarding a ﬂow.
Such applications can incorporate stateful ﬂow rule produc-
tion logic to implement complex quarantine procedures, or
malicious connection migration functions that can redirect
malicious network ﬂows in ways not easily perceived by
the ﬂow participants. Flow-based security detection algo-
rithms can also be redesigned as OF security apps, but im-
plemented much more concisely and deployed more efﬁ-
ciently, as we illustrate in examples within this paper.
We introduce a new security application development
framework called FRESCO. FRESCO is intended to ad-
dress several key issues that can accelerate the composition
of new OF-enabled security services. FRESCO exports a
scripting API that enables security practitioners to code se-
curity monitoring and threat detection logic as modular li-
braries. These modular libraries represent the elementary
processing units in FRESCO, and may be shared and linked
together to provide complex network defense applications.
FRESCO currently includes a library of 16 commonly
reusable modules, which we intend to expand over time.
Ideally, more sophisticated security modules can be built by
connecting basic FRESCO modules. Each FRESCO mod-
ule includes ﬁve interfaces: (i) input, (ii) output, (iii) event,
(iv) parameter, and (v) action. By simply assigning val-
ues to each interface and connecting necessary modules, a
FRESCO developer can replicate a range of essential secu-
rity functions, such as ﬁrewalls, scan detectors, attack de-
ﬂectors, or IDS detection logic.
FRESCO modules can also produce ﬂow rules, and thus
provide an efﬁcient means to implement security directives
to counter threats that may be reported by other FRESCO
detection modules. Our FRESCO modules incorporate sev-
eral security functions ranging from simple address block-
ing to complex ﬂow redirection procedures (dynamic quar-
antine, or reﬂecting remote scanners into a honeynet, and
so on). FRESCO also incorporates an API that allows exist-
ing DPI-based legacy security tools (e.g., BotHunter [12])
to invoke FRESCO’s countermeasure modules. Through
this API, we can construct an efﬁcient countermeasure ap-
plication, which monitors security alerts from a range of
legacy IDS and anti-malware applications and triggers the
appropriate FRESCO response module to reprogram the
data planes of all switches in the OpenFlow network.
Contributions.
In summary, our primary contribution
is the introduction of FRESCO, which simpliﬁes the devel-
opment and deployment of complex security services for
OpenFlow networks. To this end, we describe
• FRESCO: a new application development framework
to assist researchers in prototyping new composable
security services in OF-enabled networks. FRESCO
scripts can be deﬁned in a manner agnostic to OF con-
troller implementation or switch hardware (an impor-
tant feature given the rapid evolution of the protocol
standard).
• A collection of OpenFlow security mitigation direc-
tives (FRESCO modules) and APIs to enable legacy
applications to trigger these modules. Using FRESCO,
security projects could integrate alarms from legacy
network security DPI-based applications as inputs to
FRESCO detection scripts or as triggers that invoke
FRESCO response scripts that generate new ﬂow rules.
• Several exemplar security applications demonstrate
both threat detection and mitigation in an OpenFlow
network, including scan detectors
[16, 35, 15] and
BotMiner [11]. We further show that existing secu-
rity applications can be easily created with the use
of FRESCO. For example, our FRESCO implementa-
tions demonstrate over 90% reduction in lines of code
when compared to standard implementations and re-
cently published OpenFlow implementations [24].
• A performance evaluation of FRESCO, which shows
promise in developing OpenFlow security services that
introduce minimal overhead for use in live network en-
vironments.
2 Background and Motivation
Our intent is to design an application framework that
enables the modular design of complex OF-enabled net-
work security services, which can be built from smaller
sharable libraries of security functions. Before presenting
FRESCO’s design, we ﬁrst review some of the challenges
that motivate the features of our framework.
2.1 The Information Deﬁciency Challenge
OpenFlow controllers do not uniformly capture and store
TCP session information, among other key state tracking
data, which is often required to develop security functional-
ity (e.g., TCP connection status, IP reputation). We call this
an information deﬁciency challenge. The FRESCO archi-
tecture incorporates a database module (FRESCO-DB) that
simpliﬁes storage and management of session state shared
across applications. FRESCO also exports a high-level API
in the FRESCO language that abstracts away complexities
relating to switch management and speciﬁc controller im-
plementations. This abstraction is a critical feature to en-
able module sharing across OpenFlow network instances
that may vary in controller and OpenFlow protocol version.
2.2 The Security Service Composition Challenge
The FRESCO framework incorporates a modular and
composable design architecture, inspired by the Click router
architecture [19], which fosters rapid and collaborative de-
velopment of applications through module composition.
For example, a security module design to recognize cer-
tain trafﬁc patterns that may represent a threat should be
easily linkable to a variety of potential threat mitigation
Figure 1. High-level overview of the FRESCO architecture.
modules that, when triggered by the detection module, pro-
duce appropriate ﬂow rule responses. FRESCO incorpo-
rates a scripting language that enables the linking of mod-
ules through data sharing and event triggering. Another
important challenge is the need to provide an API that
can facilitate ﬂow rule production decisions using informa-
tion produced from legacy DPI-based security applications
(such as IDS or anti-malware applications).
2.3 The Threat Response Translation Challenge
The OpenFlow protocol enables the controlling software
layer to communicate ﬂow handling instructions to the data
plane. However, while network security technologies do in-
deed produce threat alerts applicable to responses for indi-
vidual ﬂows, these technologies also have a need to express
more complex (even stateful) security response directives
that may span many ﬂow rules, or even address network-
wide attack scenarios. We call this the threat response trans-
lation challenge.
For example, one may wish to deﬁne a notion of host
quarantine, in which all ﬂows from an infected internal ma-
chine are blocked, with the exception that the machine’s
web trafﬁc should be redirected to a web server that returns
quarantine notiﬁcation pages to the machine’s user. One
might also wish to deﬁne redirection directives that will
silently redirect ﬂows from a detected hostile external en-
tity away from an internal production network and into a
honeynet for analysis. One might even want to produce a
network-wide response to shun malicious trafﬁc, or alter-
natively, incorporate high-priority ﬂow rules to ensure that
emergency administrative ﬂows succeed during a DOS at-
tack.
Such security directives may require a complex set of
ﬂow rule production logic, which is also ideally sharable as
a countermeasure library that could be coupled with many
different detection algorithms.
3 FRESCO DESIGN
The FRESCO framework consists of an application layer
(which provides an interpreter and APIs to support compos-
able application development) and a security enforcement
kernel (SEK, which enforces the policy actions from devel-
oped security applications), as illustrated in Figure 1. Both
components are integrated into NOX, an open-source open-
ﬂow controller.
FRESCO’s application layer is implemented using NOX
python modules, which are extended through FRESCO’s
APIs to provide two key developer functions: (i) a FRESCO
Development Environment [DE], and (ii) a Resource Con-
troller [RC], which provides FRESCO application develop-
ers with OF switch- and controller-agnostic access to net-
work ﬂow events and statistics.
Developers use the FRESCO script language to instanti-
ate and deﬁne the interactions between the NOX python se-
curity modules (we present FRESCO’s scripting language
in Section 4.3). These scripts invoke FRESCO-internal
modules, which are instantiated to form a security appli-
cation that is driven by the input speciﬁed via the FRESCO
scripts (e.g., TCP session and network state information)
and accessed via FRESCO’s DE database API. These in-
stantiated modules are triggered (executed) by FRESCO DE
as the triggering input events are received. FRESCO mod-
ules may also produce new ﬂow rules, such as in response to
a perceived security threat, which are then processed by the
controller’s security enforcement kernel [SEK] (Section 5).
4 FRESCO Application Layer
The basic operating unit in the FRESCO framework is
called a module. A module is the most important element
of FRESCO. All security functions running on FRESCO are
realized through an assemblage of modules. Modules are
deﬁned as Python objects that include ﬁve interface types:
(i) input, (ii) output, (iii) parameter, (iv) action, and (v)
event. As their names imply, input and output represent the
interfaces that receive and transmit values for the module.
A parameter is used to deﬁne the module’s conﬁguration or
initialization values. A module can also deﬁne an action to
implement a speciﬁc operation on network packets or ﬂows.
An event is used to notify a module when it is time to per-
form an action.
A module is implemented as an event-driven processing
function. A security function can be realized by a single
module or may be composed into a directed graph of pro-
cessing to implement more complex security services. For
example, if a user desires to build a naive port compara-
tor application whose function is to drop all HTTP packets,
this function can be realized by combining two modules.
The ﬁrst module has input, output, parameter, and event.
The input of the ﬁrst module is the destination port value
of a packet, its parameter is the integer value 80, an event
is triggered whenever a new ﬂow arrives, and output is the
result of comparing the input destination port value and pa-
rameter value 80. We pass the output results of the ﬁrst
module as input of the second module and we assign drop
and forward actions to the second module. In addition, the
second module performs its function whenever it is pushed
as an input. Hence, the event of this module is set to be
push. A module diagram and modules representing this ex-
ample scenario are shown in Figure 2.
Figure 2. Illustration of FRESCO module de-
sign (left: model diagram; right: naive port
comparator application)
An action is an operation to handle network packets (or
ﬂows). The actions provided by FRESCO derive from the
actions supported by the NOX OpenFlow controller. The
OpenFlow standard speciﬁes three required actions, which
should be supported by all OpenFlow network switches, and
four optional actions, which might be supported by Open-
Flow network switches [29]. OpenFlow requires support for
three basic actions: (i) drop, which drops a packet, (ii) out-
put, which forwards a packet to a deﬁned port (in this paper,
we sometimes use the term forward to denote the output ac-
tion), and (iii) group, which processes a packet through the
speciﬁed group. As these actions must be supported by all
OpenFlow network switches, FRESCO also exports them to
higher-level applications.
One optional action of interest is the set action, which
enables the switch to rewrite a matching packet’s header
ﬁelds (e.g., the source IP, destination port) to enable such
features as ﬂow path redirection. Because one of the pri-
mary goals of FRESCO is to simplify development of secu-
rity functions, FRESCO handles possible issues related to
the set action by breaking the set action into three more spe-
ciﬁc actions: redirect, mirror, and quarantine. Through the
redirect action, an application can redirect network packets
to a host without explicitly maintaining state and dealing
with address translation. FRESCO ofﬂoads session man-
agement tasks from applications and automatically changes
the source and destination IP address to handle redirects.
The mirror action copies an incoming packet and forwards
it to a mirror port for further analysis. The functionality may
be used to send a packet to a feature or other packet analy-
sis systems. The quarantine action isolates a ﬂow from the
network. Quarantine does not mean dropping a particular
ﬂow, but rather, FRESCO attaches a tag to each packet to
denote a suspicious (or malicious) packet. If a packet has
the tag, then this packet can traverse only to allowed hosts
(viz., a FRESCO script can ﬁshbowl an infected host into
an isolated network using packet tags).
4.1 FRESCO Development Environment
The FRESCO development environment (DE) provides
security researchers with useful information and tools to
synthesize security controls. To realize this goal, we de-