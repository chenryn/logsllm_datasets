title:Caching-Enhanced Scalable Reliable Multicast
author:Carolos Livadas and
Idit Keidar
∗
Carolos Livadas
BBN Technologies
Abstract
We present the Caching-Enhanced Scalable Reliable Multi-
cast (CESRM) protocol. CESRM augments the Scalable Re-
liable Multicast (SRM) protocol [4,5] with a caching-based
expedited recovery scheme. CESRM exploits the packet loss
locality occurring in IP multicast transmissions in order to
expeditiously recover from losses in the manner in which re-
cent losses were recovered. Trace-driven simulations show
that CESRM reduces the average recovery latency of SRM
by roughly 50% and, moreover, drastically reduces the over-
head in terms of recovery trafﬁc and control messages.
1. Introduction
Developing scalable reliable multicast protocols is chal-
lenging, due to the requirements to scale to large multi-
cast groups, to cater to dynamic memberships and chang-
ing networks, and to minimize the recovery overhead. A
number of retransmission-based reliable multicast proto-
cols [5, 7–9, 13, 14] have been designed to address these
challenges, beginning with the seminal Scalable Reliable
Multicast (SRM) protocol [4,5]. Such protocols use retrans-
missions in order to recover from losses. In SRM, packet re-
covery is carried out as follows. Upon detecting a loss (e.g.,
by observing a sequence number gap in the stream of pack-
ets received from a given source), a receiver multicasts a
retransmission request for the missing packet. In response,
any member of the reliable multicast group that has the re-
quested packet may retransmit it, using multicast. In order
to minimize the number of requests and replies (i.e., retrans-
missions) that are multicast per loss, SRM employs a sup-
pression mechanism that relies on appropriately delaying
the transmission of requests and replies. This mechanism
causes loss recovery in SRM to be delayed by several net-
work round-trip times.
∗
This work was conducted while Carolos Livadas was pursuing his
Ph.D. at the Theory of Distributed Systems Group at the Lab. for Com-
puter Science at MIT.
Caching-Enhanced Scalable Reliable Multicast
Idit Keidar
Dept. of Electrical Engineering, Technion
All the previously suggested retransmission-based pro-
tocols that we are familiar with (including SRM) treat each
packet loss independently and run the recovery process
anew for each loss. Our work is motivated by the observa-
tion that packet losses in IP multicast transmissions are not
independent [1,6,15–17]. Thus, in the case of SRM, there is
no need to repeat the suppression mechanism for each loss.
Rather, the recovery of later losses can be expedited based
on decisions made in the recovery of earlier ones.
the Caching-Enhanced Scalable Reli-
We present
able Multicast
(CESRM) protocol, which augments
the functionality of SRM with a caching-based ex-
pedited recovery scheme. CESRM’s expedited recov-
ery scheme operates in parallel with SRM’s recovery
scheme. In this scheme, each receiver caches the re-
questor/replier pairs that carry out the recovery of its recent
losses and uses this information to select an appropri-
ate requestor/replier pair to carry out the expeditious re-
covery of each new loss. We henceforth refer to requestor
and replier of the selected pair as the expeditious re-
questor and expeditious replier, respectively. Thus, upon
detecting a loss, if a receiver considers itself to be the ex-
peditious requestor, then it initiates an expedited recovery
for the given packet by immediately unicasting an expe-
dited request to the expeditious replier. Upon receiving
this request, the expeditious replier immediately multi-
casts the requested packet. Since neither the expedited
request nor the expedited reply is delayed, the packet is re-
covered much faster than with SRM’s recovery scheme.
In some cases, the expedited recovery may fail either due
to packet loss or because the replier to which the expe-
dited request is sent does not have the given packet. In
such cases, CESRM falls back on SRM’s usual recov-
ery scheme.
Like SRM, the basic CESRM protocol is an end-to-end
protocol that does not assume any intelligent network sup-
port beyond IP multicast. Therefore, as with SRM, every
retransmission is multicast to the entire group (multicast
tree), even if only a subset of the receivers lose the packet.
Router-assisted protocols [8,12,13] eliminate this drawback
by modifying the underlying IP multicast protocol to allow
routers to forward requests to designated repliers, and also
to subcast packets, i.e., to send packets only to receivers that
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:28 UTC from IEEE Xplore.  Restrictions apply. 
reside on certain subtrees of the IP multicast tree. Adopting
this approach, we also present a router-assisted version of
CESRM that exploits such router capabilities (if present) in
order to achieve localized recovery. The router-assisted ver-
sion of CESRM is more “light-weight” than other router-
assisted protocols in that it requires less functionality in the
underlying routers.
We use trace-driven simulations to evaluate CESRM’s
performance and compare it to that of SRM. In these sim-
ulations, we consider CESRM in its simplest form, where
router-assistance is unavailable. Our results show that
CESRM reduces the average recovery time of SRM by
roughly 50%. Furthermore, CESRM sends fewer packet re-
transmissions: it sends between 30% and 80% the num-
ber of retransmissions sent by SRM. Finally, CESRM sends
roughly as many control packets as SRM, but a large per-
centage of these are unicast whereas all of SRM’s con-
trol packets are multicast. So all in all, CESRM’s overhead
is signiﬁcantly smaller than that of SRM.
This paper is organized as follows. Section 2 describes
SRM, Section 3 describes CESRM, and Section 4 evalu-
ates CESRM’s performance through trace-driven simula-
tions. Finally, Section 5 concludes the paper.
2. Scalable Reliable Multicast
We now give a brief overview of the Scalable Reli-
able Multicast protocol of Floyd et al. [4, 5]. SRM is an
application-layer protocol implemented atop the IP multi-
cast best-effort communication primitive. SRM consists of
two functional components: i) session message exchange,
and ii) packet loss recovery.
The hosts that are members of the multicast group ex-
change session messages so as to estimate their distance to
each other — inter-host distances are quantiﬁed by the one-
way transmission latency from one host to another. More-
over, by include information about which packets have been
received from each transmission source, session messages
also assist in detecting packet loss. Since this aspect of SRM
is not central to this paper, we skip its detailed description
(for further details see [4, 5, 10, 11]).
SRM’s packet loss recovery scheme is receiver-based. A
receiver detects the loss of a packet in one of two ways: (1)
by noticing a gap in the sequence numbers in the stream of
packets it receives from a given source; or (2) by learning
from a session message that another receiver has received
the missing packet. Upon detecting the loss of a packet, the
receiver engages in the loss recovery process. The recov-
ery process is logically divided into asynchronous rounds.
A round involves the transmission of a repair request (re-
questing the packet’s retransmission) by a receiver that lost
the packet, and the transmission of a repair reply (the re-
transmission of the packet) by either the source or another
receiver that has received the packet. Since a recovery round
may fail to recover the packet due to additional losses, sev-
eral recovery rounds may be required in order to recover a
given packet.
All requests and replies are sent using IP multicast. SRM
uses a suppression mechanism in order to minimize the
number of requests and replies transmitted during the re-
covery of a given loss. This mechanism is based on delay-
ing the transmission of repair requests and replies, and sup-
pressing their transmission if the same requests or replies
are received from other hosts. The delay period is randomly
chosen within a time interval that depends on that host’s
distance from the source of the lost packet (for requests) or
from the requestor (for replies). We proceed by describing
these mechanisms in more detail.
2.1. Scheduling repair requests
SRM uses two suppression techniques: deterministic and
probabilistic suppression. Deterministic suppression dic-
tates that the transmission time of a request be sched-
uled proportionately to the distance of the requestor to the
source. Thus, hosts that are closer to the source have a bet-
ter chance of suppressing their descendants in the under-
lying IP multicast tree. Probabilistic suppression dictates
that the transmission time of a request be scheduled ran-
domly within a particular time interval. Thus, hosts that
are equidistant from the source probabilistically suppress
each other. SRM’s request scheduling parameters C1, C2 ∈
≥0 control how aggressively deterministic and probabilis-
R
tic suppression, respectively, are used.
Upon detecting the loss of a packet p, a host h sched-
ules a request by setting a request timeout timer to a value
ˆdhs, (C1+C2) ˆdhs],
uniformly chosen within the interval [C1
where ˆdhs is h’s distance estimate to the source s of p. Upon
the expiration of the request timeout timer for p, h multi-
casts a repair request for p, and also schedules a new re-
quest for p for the next recovery round. The new request
timeout timer is now set to a uniformly chosen value in the
ˆdhs, (C1 + C2) ˆdhs], where k is the number
interval 2k[C1
of times that a request for p has already been scheduled. If
h receives a request for packet p while h has a scheduled
request for p, then the scheduled request for p is resched-
uled to the next recovery round, by resetting the request
timeout timer to a uniformly chosen value in the interval
ˆdhs, (C1 + C2) ˆdhs]. Note that whenever the request
2k[C1
is rescheduled, the interval is doubled (since k increases).
Requests should only be backed off once per recovery
round, even when multiple requests are sent in the same re-
covery round. To this end, SRM designates a back-off ab-
stinence period, which is a time interval during which the
request’s timeout is not backed off again. Once h resched-
ules a request for p, following either the transmission or the
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:28 UTC from IEEE Xplore.  Restrictions apply. 
reception of another request for p, it also sets a back-off ab-
ˆdhs, where k is the back-
stinence timeout to the value 2kC3
off used to schedule the request, and C3 ∈ R
≥0 is a param-
eter. Requests for p received prior to the expiration of the
back-off abstinence timeout for p are discarded; they are
considered to pertain to the prior recovery round. Thus, the
back-off abstinence period prevents the request from being
backed-off multiple times during the same recovery round.
As an aside, we note that our designation of the absti-
nence period departs slightly from the original description
of SRM [4, 5], which sets the back-off abstinence timeout
to half the time to the next request.1 We have replaced the
half with a parameter, in order to allow more tuning free-
dom.
2.2. Scheduling repair replies
In scheduling replies, deterministic and probabilis-
tic suppression operate in a similar fashion. First, replies
are scheduled proportionately to the reply scheduling pa-
rameter D1 ∈ R
≥0 and the distance of the replier to
the requestor. Secondly, replies are scheduled within re-
to the reply
ply intervals whose width is proportional
scheduling parameter D2 ∈ R
≥0 and the distance be-
tween the replier and the requestor.
Let h be a host that has either sent or received the
packet p and receives a repair request for p from a host
h(cid:2)
. Upon receiving this repair request for p, h schedules
the transmission of a repair reply for p, by setting a reply
timeout timer to a uniformly chosen value in the interval
ˆdhh(cid:1) , (D1 + D2) ˆdhh(cid:1)], where ˆdhh(cid:1) is h’s distance esti-
[D1
mate to h(cid:2)
. Upon the expiration of this reply timeout for p,
h multicasts a repair reply for p. If a reply for the packet p
is received while a scheduled reply for p is awaiting trans-
mission, then the scheduled reply for p is canceled.
Once h either receives or sends a repair reply for p, it ob-
serves a reply abstinence period. During this period, h con-
siders a reply for p to be pending and, thus, refrains from
scheduling additional replies for p; requests for p that are
received during this period are simply discarded. The ex-
tent of the reply abstinence period for p is dictated by a re-
ply abstinence timeout. Upon either receiving or sending a
repair reply for p, h sets the reply abstinence timeout for
≥0 is SRM’s reply
p to the value D3
abstinence parameter. Reply abstinence periods prevent du-
plicate requests pertaining to a given recovery round for p
from generating duplicate replies.
ˆdhh(cid:1), where D3 ∈ R
The use of these suppression techniques introduces a
performance trade-off. While choosing large values for the
1 SRM [4, 5] also suggests an alternative approach for setting the absti-
nence period using message annotations, which we do not consider in
this paper.
scheduling parameters C1, C2, D1, and D2 affords more ef-
fective suppression, it also prolongs the packet recovery and
results in larger recovery latencies.
3. Caching-Enhanced Scalable Reliable Mul-
ticast (CESRM)
In addition to SRM’s recovery scheme, CESRM imple-
ments a caching-based expedited recovery scheme. In this
scheme, members of the reliable multicast group attempt
to expeditiously recover losses based on how recent losses
were recovered. Hosts cache the requestor/replier pairs in-
volved in the recovery of recent losses from each source.
Upon detecting a loss, an expedited requestor/replier pair
for this loss is chosen according to the cached information
pertaining to the lost message’s source. The expeditious re-
questor unicasts a request to the expeditious replier, which
in turn, multicasts the packet. Expedited recoveries are not
delayed for the purpose of suppression. Thus, when suc-
cessfully recovering a packet, they result in minimal recov-
ery latency, and suppress the requests and replies scheduled
by SRM’s usual recovery scheme. However, expedited re-
coveries may fail either due to further packet losses or be-
cause the replier to which the expedited request is sent has
shared the loss and is thus incapable of retransmitting the
packet. In such cases, CESRM falls back on SRM’s usual
recovery scheme.
We now proceed to describe in detail how CESRM
works. Section 3.1 explains how the cache is managed. In
Section 3.2, we explain how the cached information is used
for expedited recovery. Section 3.3 presents an improve-
ment to CESRM that exploits intelligent router capabili-
ties (if present). Finally, in Section 3.4, we provide a simple
analysis of CESRM’s expedited and non-expedited recov-
ery delays.
3.1. Caching Requestor/Replier Pairs: Basic Ap-
proach
Each host maintains a collection of per-source re-
questor/replier caches, one for each source from which
it receives packets. For simplicity of the exposition, we
present the protocol for a single source IP multicast trans-
mission, where each receiver h maintains a single cache
for the source s. The cache contains the requestor/replier
pairs that carried out the recovery of the most recent pack-
ets from s that were lost by h. More precisely, the cache
consists of tuples of the form (cid:2)i, q, ˆdqs, r, ˆdrq(cid:3), where i is
a packet sequence number, q is a requestor, ˆdqs is q’s dis-
tance estimate to s, r is a replier, and ˆdrq is r’s distance
estimate to q.
When a packet is requested and/or retransmitted multiple
times, multiple plausible requestor/replier pairs may arise.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:28 UTC from IEEE Xplore.  Restrictions apply. 
In such a case, h caches only the optimal requestor/replier
pair for the given packet. We consider a requestor/replier
pair to be optimal when it affords the minimum recovery
delay; in our work, we deﬁne a packet’s recovery delay to
be the sum of the distance estimate from the requestor to
the source and the round-trip distance from the requestor
to the replier, i.e., ˆdqs + 2 ˆdrq. This deﬁnition gives prefer-
ence to requestors that are closer to the source and to repli-
ers that can provide the smallest recovery latency.
Optimal requestor/replier pairs are ascertained by simply
annotating request and reply packets with the appropriate
information. In particular, each request packet is annotated
by the requestor and its distance to the source of the packet
being requested, e.g., (cid:2)q, ˆdqs(cid:3). Each reply packet is anno-
tated with the requestor that instigated the reply, this re-
questor’s distance to the source, the replier, and this replier’s
distance to the requestor, e.g., (cid:2)q, ˆdqs, r, ˆdrq(cid:3).
Host h updates the contents of its cache upon receiv-
ing replies. When h receives a reply for a packet i, then
if h did not suffer the loss of packet i, the reply is dis-
carded. The reply is also discarded if the cache is full and
packet i is less recent than all the packets for which re-
questor/replier pairs are already cached. Otherwise, h pro-
cesses the reply and updates the cache contents as follows:
If no requestor/replier tuple pertaining to packet i is al-
ready cached, then the recovery tuple annotating the reply
is cached; if the cache is full, it replaces the tuple pertain-
ing to the least recent packet. If a requestor/replier tuple for
packet i is already cached, then the cached tuple is updated
to reﬂect the optimal requestor/replier pair.
3.2. Expedited Recoveries
Upon detecting the loss of packet i, a host h schedules a
request for packet i using the usual SRM recovery mecha-
nism. In addition, h consults the optimal requestor/replier
cache for the source s in order to determine whether it
should also act as the expeditious requestor.
The host h examines the optimal requestor/replier pairs it
has cached and determines which such pair is the most ap-
propriate to carry out an expedited recovery for packet i.
Several policies may be used for selecting this expeditious
requestor/replier pair. The most recent loss policy is to se-
lect the optimal requestor/replier pair that carried out the re-
covery of the most recent packet that h lost and has since re-
covered. The most frequent loss policy is the one in which
the expeditious requestor/replier pair is chosen to be the pair
that appears most frequently in the optimal requestor/replier
pair cache. Other more sophisticated policies for selecting
the expeditious requestor/replier pair may indeed be more
effective than either of these policies.
Suppose that (cid:2)q, r(cid:3) is the expeditious recovery pair dic-
tated by the expedition requestor/replier policy used by h.
If h is the requestor of the expedited recovery pair (cid:2)q, r(cid:3),
i.e., h = q, then h schedules the transmission of an expe-
dited request for the packet i for REORDER-DELAY time
units in the future, where REORDER-DELAY is a CESRM
parameter. This delay serves to prevent the transmission of
extraneous expedited requests when packets are temporar-
ily presumed missing due to packet reordering. If packet i is
received prior to the transmission time of the expedited re-
quest, then h cancels its expedited request for packet i. Oth-
erwise, h unicasts the expedited request to the expeditious
replier r.
Upon receiving this expedited request for packet i, the
expeditious replier r immediately multicasts an expedited
reply for packet i, provided that it has previously either sent
or received packet i and a reply for packet i is neither sched-
uled nor pending.
3.3. Router-Assisted Local Recovery
Up to this point, our presentation of CESRM has as-
sumed no network support beyond a best-effort multicast
service like IP multicast. While this approach makes the
protocol more readily deployable, it has a disadvantage
in terms of performance: the retransmission of every lost
packet is multicast to the entire multicast group. This draw-
back is even more signiﬁcant in SRM, where packet re-
quests are also multicast to the entire group.
In order to remedy this shortcoming (of SRM), several
router-assisted reliable multicast protocols have recently
been proposed [8, 12, 13]. Such protocols assume that the
underlying IP multicast routers have enhanced functional-
ities that allow them to forward packet requests to desig-
nated repliers and to subcast packet retransmissions to a
subtree of the IP multicast tree. Such protocols, e.g., the
Light-weight Multicast Services (LMS) protocol [13], ap-
point designated hosts (called repliers) to reply to requests
originating within particular subtrees of the underlying IP
multicast tree. In the case of LMS, for example, each router
in the multicast tree maintains a replier link onto which it
forwards requests that originate within the subtree rooted at
that router. Thus, every request originating in a certain sub-
tree is forwarded by the router at the root of that subtree to
that subtree’s designated replier. Subsequently, the replies
to such requests are unicast to the aforementioned routers,
which in turn subcast the replies downstream.
In effect, router-assisted reliable multicast protocols use
the enhanced IP multicast router functionality to introduce
a recovery hierarchy. This hierarchy is very effective in
achieving localized recovery and, thus, reducing recovery
exposure. However, it may not fare well in highly dynamic
environments where reliable multicast group members may
either leave or crash unexpectedly. In such cases, the replier
state maintained by the IP multicast routers becomes stale
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:28 UTC from IEEE Xplore.  Restrictions apply. 
and must be updated. Such updates may prolong and even
inhibit packet loss recovery.
CESRM’s caching-based expedited recovery scheme, as
presented above, effectively establishes a similar hierarchy
of repliers. However, instead of pre-designating repliers and
making them known to the routers, CESRM determines the
appropriate repliers on-the-ﬂy according to the cached in-
formation. Thus, CESRM’s choice of repliers evolves to
match changes in the group membership resulting from
member joins, leaves, and crashes. Although this evolution
may take time, packets continue to be recovered in the in-
terim, because when expedited recoveries fail, losses are
still recovered by SRM’s recovery scheme. It is important
to note that the expeditious requestor/replier selection pol-
icy affects how fast CESRM’s expedited recovery scheme
adapts to membership and topology changes.
Using minimal additional IP multicast router functional-
ity, CESRM’s expedited recovery scheme can also achieve
localized recovery. In particular, routers need only be aug-
mented to: i) annotate reply packets with their turning point
routers, i.e., the routers at which reply packets are received
from and forwarded on downstream links with respect to the
source of the original packet, and ii) subcast expedited re-
ply packets downstream. This functionality is nearly iden-
tical to that of LMS [12, 13], with the exception that LMS
requires routers to maintain replier state.
CESRM may exploit such extra router functionality as
follows: Recovery tuples may be augmented to include the
turning point router involved in the recoveries of the re-