(14)
Constraint (14) must be satisﬁed ∀e ∈ EP , ∀q ∈ Q
and ∀i ∈ VL.
total number of lightpaths, (cid:88)
b - d) Constraints (3) - (12).
Equation (13) is the objective function that minimizes the
bp, needed to accommodate
p∈P
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE311DSN 2008: Bari et al.all
the trafﬁc requests. Since each lightpath requires one
transmitter and one receiver, the objective minimizes the cost
of the network, by minimizing the number of costly optical
transceivers.
Constraint (2) in ILP1 is replaced by constraint (14). Here,
we consider each edge and ensure that the entire trafﬁc request
can be routed over the surviving logical topology, even if
edge e fails. The constraints used to route each request over
the logical topology, using a single multi-hop logical path, in
accordance with the non-bifurcation model used in this paper.
The rest of the constraints are the same as ILP1.
IV. HEURISTIC FOR SURVIVABLE TRAFFIC GROOMING
In this section we outline our heuristic for survivable trafﬁc
grooming (H-STG), which uses the concept of survivable
routing to create a robust logical topology that can support
the entire trafﬁc request even after any single-link failure.
In order to describe the H-STG, we need another heuristic to
create a logical topology that supports a speciﬁed set of trafﬁc
requests using as few lightpaths as possible, based on non-
bifurcated trafﬁc grooming model. In our description below,
we have referred to this heuristic as create topology. The
heuristic create topology has to take into account the physical
topology of the network, an existing logical topology, a routing
scheme to handle an existing set of trafﬁc requests Qold, and
a new set of trafﬁc requests Qnew. The heuristic
• creates a new logical topology and
• generates a new routing scheme to handle the requests
in Qnew in addition to the exisiting requests.
The routing scheme for the requests in Qold, supplied to
create topology, as well as the new routing scheme to handle
Qnew ∪ Qold must ensure that the total trafﬁc on any logical
edge does not exceed g, the capacity of a lightpath. The
heuristic create topology handles each new trafﬁc request in
Qnew, without disturbing the logical paths already allotted to
the existing set of requests Qold. The heuristic uses the existing
spare capacity of the logical topology to the maximum extent
possible and adds new edges to the logical topology only
when the existing logical topology is inadequate to handle
one or more of the requests in Qnew. When Qold is empty,
the set Qnew is the set of entire trafﬁc requests, and there is no
existing logical topology, the heuristic create topology is the
classical logical topology design and trafﬁc routing problem
which has been studied extensively [5], [7], [23], [24]. In
create topology, the input arguments are
• the physical topology, speciﬁed by the graph GP =
(VP , EP ), where VP is the set of end nodes and router
nodes in the network,
• an existing logical topology, speciﬁed by a set LTold of
logical edges, where each logical edge is characterized
by its endpoints.
• an existing routing, speciﬁed by a set RTold where each
element represents a route for a request in Qold over the
logical topology LTold,
• the set Qnew of new trafﬁc requests.
The heuristic returns a pair of sets (LT , RT ) where
• LT represents a new logical topology, speciﬁed as a set
of logical edges. If the set LT is empty, it means that
the heuristic has failed to create a logical topology that
can handle the additional requests in Qnew. Otherwise,
each element in the set LT represents a logical edge.
• RT represents the set of all routings for each request
in the set Qold ∪ Qnew over the new logical topology
LT . We will use RT q to denote the route of request
q, q ∈ Qold ∪ Qnew.
Many heuristics have been proposed for designing logical
topologies [5], [7], which could be easily adapted for our
purpose. Heuristic H-STG does not depend on the choice of a
speciﬁc algorithm for logical topology design. In our experi-
ments described in the next section, we have used the Generic
Graph Model for Trafﬁc Grooming proposed in [34], using
the minimum lightpath (MinLP) policy with the Maximum-
Amount-First (MAF) scheme, to implement create topology.
The heuristic H-STG is described below.
topology represented by the directed
Heuristic: H-STG(GP ,Q)
Input: The physical
graph GP = (VP , EP ), and a set of trafﬁc requests Q.
Value returned: A pair of sets (LT , RT ) deﬁned in the same
way as in create topology.
1: (LTinit, RTinit) ← create topology (GP ,∅,∅,Q).
2: if (LTinit = ∅) then
3:
4: end if
5: (LT, RT ) ← (LTinit, RTinit).
6: for each e ∈ EP , do
7: Gnew
8:
return (∅,∅).
P ← (VP , EP\{e}).
LTf aulty ← set of logical edges in LT which traverse
edge e.
LTsurv ← LT\LTf aulty.
the logical topology involves an edge in LTf aulty}.
(LT e, RT e) ← create topology
if (LT e = ∅) then
9:
10: Qnew ← {q| q is a trafﬁc request whose route RT q over
11: RTsurv ← RT\{RT q|q ∈ Qnew}.
12:
P , LTsurv, RTsurv,Qnew).
(Gnew
else
return (∅,∅).
LT ← LT e ∪ LTf aulty.
RT ← RTinit.
13:
14:
15:
16:
17:
end if
18:
19: end for
20: return (LT, RT ).
The H-STG ﬁrst creates an initial logical topology and
routing scheme capable of supporting the entire trafﬁc request
under fault-free conditions. Then it augments the logical
topology whenever needed, and updates the routing scheme to
take into account each potential single-link failure scenario.
In step 1 of our design process, we use create topology,
to generate an initial logical topology, LTinit and routing
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE312DSN 2008: Bari et al.scheme, RTinit, for handling all trafﬁc requests in Q assuming
that the network is fault-free. If the initial topology can be
created successfully (i.e. LTinit (cid:54)= ∅, in step 2), the design
process continues, otherwise the algorithm stops and reports
failure.
In step 5, we initialize the process. In steps 7 - 14, we
consider a speciﬁc failure scenario where physical edge e has
become faulty. In step 7 we update the physical topology by
removing the faulty edge e. In step 8, we construct the set
LTf aulty of lightpaths that are disrupted due to the failure
of edge e, by including in LTf aulty those lightpaths that
traverse edge e. In step 9, we create a temporary logical
topology (LTsurv) that has survived the failure of edge e.
In step 10, we create a new trafﬁc request matrix Qnew by
determining the set of disrupted trafﬁc requests that were using
a logical path involving edge e. Each request in Qnew has
to be rerouted using an alternate logical path that does not
use edge e. The remaining requests are not affected by the
failure of edge e, and can use their existing routes. In step 11,
we determine the routing scheme RTsurv for the surviving
requests, by simply removing the disrupted requests from
the original (fault-free) routing scheme. In step 12, we use
create topology with the modiﬁed physical topology Gnew
P ,
the surviving logical topology LTsurv, the routing scheme
RTsurv for the surviving requests, and the trafﬁc requirements
Qnew representing the trafﬁc originally carried by the edge
e. If all the disrupted trafﬁc cannot be handled successfully,
either by utilizing the spare capacities in LTsurv or by adding
new lightpaths, then create topology returns LT e = ∅, and the
algorithm stops, reporting failure. Otherwise create topology
returns a pair (LT e, RT e), where LT e denotes an updated
logical topology, including any new lightpaths added to ac-
commodate the disrupted requests in Qnew, and RT e denotes
the routing scheme to be used in case edge e fails. This new
routing scheme can be stored for future reference and used
whenever a failure on edge e is detected. This concludes the
process of considering an edge e as faulty. When considering
case of failure of another edge, since we are considering the
case of single edge failures only, we have to ﬁrst restore the
edge e to a fault-free state. This means that the lightpaths
that were disrupted when edge e fails are now operational and
must be included in the logical topology for the next iteration
(step 16). When the lightpaths in LTf aulty are available, the
routes speciﬁed in RTinit may all be used again, including the
routes for the requests in Qnew. We do this in step 17. It should
be noted that logical topology LT now includes logical edges
added in step 12 to handle faulty edge e. The next edge failure
scenario is then considered in the next iteration of steps 7-19
with the updated topology LT and the initial routing scheme
RTinit.
V. EXPERIMENTAL RESULTS
A. Evaluation of ILP formulations
In this section, we present the results for our ILP formu-
lations. ILP1 performed well for practical networks with up
to 14 nodes and over 200 requests. For each trafﬁc request q,
THE NUMBER OF LIGHTPATHS AND WAVELENGTHS REQUIRED BY ILP1
TABLE I
ON NETWORKS WITH DIFFERENT SIZE AND REQUESTS
# Nodes
6
10
14
# requests
68
24
78
108
56
168
204
# LP
18
46
49
60
108
123
130
# Wavelength-links
27
117
126
156
360
422
458
the source sq, the destination dq, and the amount of trafﬁc
tq (using OC-n notation) was generated randomly. Table I
shows the number of lightpaths (LP ) and the number of
wavelength-links required by ILP1 to accommodate different
trafﬁc requests, for each of the networks we tested. We note
that
try to minimize the number of
lightpaths directly, but place constraints on the number of
available transmitters and receivers at each node. We have
found that, because of this, the resultant topology generally
uses up all or most of the available transceivers.
in ILP1, we do not
We could generate solutions using ILP2 only for small
networks having 6 or fewer nodes and with 15 or fewer
requests. This demonstrates the need for a heuristic (such as
the H-STG) to handle this problem.
B. Evaluation of H-STG
In this section, we present and analyze our experimental
results for the heuristic H-STG and study its performance
in comparison to shared and dedicated protection. There are
many algorithms for path protection available in the literature
[5], [24]. In order to ensure a fair comparison, we used the
same basic approach based on the Generic Graph Model for
Trafﬁc Grooming proposed in [34] that was used in to design
the initial topology in H-STG. The heuristics H-DP and H-SP
are used to generate the logical topology using dedicated and
shared protection respectively. The details are straightforward
and available in [26].
We tested our approach on various networks, where the
network size was varied from 6 to 40 nodes. We randomly
generated a number of physical topologies for each size of
the networks. For each physical topology, three sets of trafﬁc
matrices, each with a random number of elements, were
generated in the following three categories:
1) Low trafﬁc: the trafﬁc between every source destination
pair either does not exist or is randomly distributed
between OC-3 to OC-24,
2) Medium trafﬁc: the trafﬁc between every source destina-
tion pair either does not exist or is randomly distributed
between OC-3 to OC-48, and
3) High trafﬁc: the trafﬁc between every source destination
pair either does not exist or is randomly distributed
between OC-3 to OC-96.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE313DSN 2008: Bari et al.COMPARISON OF NUMBER OF CHANNELS USING H-STG, DEDICATED AND
TABLE II
SHARED PROTECTION ON NETWORKS WITH DIFFERENT SIZE AND
REQUESTS
COMPARISON OF NUMBER OF LIGHTPATHS REQUIRED BY H-STG AND
H-SP ON NETWORKS WITH DIFFERENT SIZE AND REQUEST
TABLE III
Number of channels per ﬁber required for
High Trafﬁc
H-DP
4
10
16
30
-
-
H-SP
3
7
11
18
32
-
H-STG
3
6
10
16
29
41
Medium Trafﬁc
H-STG