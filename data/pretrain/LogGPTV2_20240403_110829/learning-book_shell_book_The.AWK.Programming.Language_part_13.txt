BEGIN （ FS ="\t"}
$1-/Canada/{
printf("%s:\n", $1)
printf("\t%d ni11ion people\n"，$3)
printf("\tx.3f mi11ion sq.mi.\n",$2/1000)
printf("\tx.1f people per sq. mi.\n",1000+$3/$2)
countries
and get the response
Canada:
25 mi1lion people
3.852 mi1lion sq.mi.
6.5 people per sq. mi.
Now, if we want to invoke this same command on different countries, we would
get tired of substituting the new country name into the awk program every time
we executed the command. We would find it more convenient to put the pro-
gram into an executable file, say info, and answer queries by typing
info Canada
info USA
We can use the technique from Section 2.6 to pass the name of the country into
the program, or we can use the shell itself to include the country name at the
right point:
---
## Page 110
100
REPORTS AND DATABASES
CHAPTER 4
info -print infornation about country
awk '
usage:info country-name
BEGIN （FS = "\t"}
$1-/'s1'/{
printf("xs:\n",$1)
printf(*\txd mi11ion people\n", $3)
printf(*\tx.1f people per sq.mi.n，1000*$3/s2)
printf("\t%.3f mi1lion sq.mi.\n", $2/1000)
countries
In the beginning of the second line,
$1-/'s1′/
the first $1 refers to the first field in the input file and the second (apparently
quoted)$1 to the country parameter, which is the first argument of the shell
command info. The second $ 1 is visible only to the shell, which replaces it by
the string following info when this command is invoked. What's happening is
that the shell makes up the awk program by concatenating three strings: two
multiline strings bounded by single quotes, and $1, the argument to info.
Notice that any regular expression can be passed to info; in particular, it is
possible to retrieve information by specifying only a part of a country name or
by specifying several countries at once, as in
info 'CaniusA'
Exercise 4-5. Revise the info program so the regular expression is passed in through
ARGV instead of by shell manipulations. O
Form Letters
Awk can be used to generate form letters by substituting values for parame-
ters in the text of a form letter:
letter.text
form.gen
form
values
letter
The text of the form letter is stored in the file letter.text. The text con-
form letter that is generated. For example, the following text uses parameters
---
## Page 111
SECT1ON 4.2
PACKAGED QUERIES AND REPORTS101
#1 through #4, which represent the name of a country, and its population, area.
and population density:
Subject: Demographic Information About #1
From: AwK Demographics, Inc.
In response to your request for information about #1,
our latest research has revealed that its population is #2
million people and its area is #3 million square miles.
This gives #1 a population density of #4 people per
square mile.
From the input values
Canada:25:3.852:6.5
this form letter is generated:
From: AWK Denographics, Inc.
Subject: Demographic Information About Canada
In response to your request for information about Canada,
million people and its area is 3.852 million square miles.
This gives Canada a population density of 6.5 people per
square mile.
The program form. gen is the form-letter generator:
form.gen -generate form letters
input: prototype file letter.text; data 1ines
output: one form letter per data line
BEGIN{
FS= °:*
while （getline 0)#read form letter
forn[++n]= s0
，
1
for（i=1;iprefix(gp[1]))
if （(ng = getgroup()）0;ng++)
return 0
if （prefix（gp[ng]) 1= prefix（gp[1])）{
unget(gp[ng])
went too far
return ng-1
return ng-1
}
function getone(f,gp,n)( get next 1ine in gp[n]
if（eofstattemp.countries
1sort capitals >temp.capitals
1join temp.countries temp.capitals >cc
This file says that there are two base tables, countries and capitals, and
one derived table cc that is constructed by sorting the base tables into tem-
porary files, then joining them. That is, cc is constructed by executing
---
## Page 117
SECTION 4.3
A RELATIONAL DATABASE SYSTEM
107
sort countries >tenp.countries
sort capitals >temp.capitals
join temp.countries temp.capitals >cc
A relfile often includes a universal relation, a table that contains all the
attributes, as the last table in the relfile. This ensures that there is one
table that contains any combination of attributes. The table cc is a universal
relation for the countries-capitals database.
A good design for a complex database should take into account the kinds of
queries that are likely to be asked and the dependencies that exist among the
attributes, but the small databases for which q is likely to be fast enough, with
only a few tables, are unlikely to uncover subtleties in relfile design.
q, an awk-llke query language
follows:
1. It determines the set of attributes in the query.
2. Starting from the beginning of the relfile, it finds the first table whose
attributes include all the attributes in the query. If this table is a base table,
it uses that table as the input for the query. If the table is a derived table, it
constructs the derived table and uses it as the input. (This means that every
either a base or derived table in the relfile.)
3. It transforms the q query into an awk program by replacing the symbolic
field references by the appropriate numeric field references. This program is
then applied to the table determined in step (2).
The q query
$continent -/Asia/（print $country,$population}
mentions the attributes continent, country, and population, all of which
are included in the attributes of the first table countries. The query proces-
sor translates this query into the program
$4-/Asia/(print $1,$3}
which it applies to the countries file.
inb b 
(print $country,$population,$capital)
included only in the derived table cc. The query processor therefore constructs
the derived table cc using the commands listed in the relfile and translates
this query into the program
---
## Page 118
108
REPORTS AND DATABASES
CHAPTER 4
(print $1，$3,$5 }
which it applies to the freshly constructed cc file.
qawk to compute as well, as in this computation of the average area:
(area += $area ); END ( print area/NR )
qawk, a q-to-awk translator