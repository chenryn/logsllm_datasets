  /dev/sdf1  taft lvm2 a--  15.00g 15.00g C
  /dev/sdg1  taft lvm2 a--  15.00g 15.00g A
  /dev/sdh1  taft lvm2 a--  15.00g 15.00g A
```
::: para
下面的命令在卷组 `taft`{.literal} 中创建一个大小为 100GB 的镜像卷。
:::
``` screen
# lvcreate --type raid1 -m 1 -n mirror --nosync -L 10G taft
  WARNING: New raid1 won't be synchronised. Don't read what you didn't write!
  Logical volume "mirror" created
```
::: para
下面的命令显示用于镜像分支及 RAID 元数据子卷的设备。
:::
``` screen
# lvs -a -o +devices
  LV                VG   Attr       LSize  Log Cpy%Sync Devices
  mirror            taft Rwi-a-r--- 10.00g       100.00 mirror_rimage_0(0),mirror_rimage_1(0)
  [mirror_rimage_0] taft iwi-aor--- 10.00g              /dev/sdb1(1)
  [mirror_rimage_1] taft iwi-aor--- 10.00g              /dev/sdc1(1)
  [mirror_rmeta_0]  taft ewi-aor---  4.00m              /dev/sdb1(0)
  [mirror_rmeta_1]  taft ewi-aor---  4.00m              /dev/sdc1(0)
```
::: para
下面的命令扩展镜像卷的大小，使用 `cling`{.literal}
分配策略表示需要使用有相同标签的物理卷扩展的镜像分支。
:::
``` screen
# lvextend --alloc cling -L +10G taft/mirror
  Extending 2 mirror images.
  Extending logical volume mirror to 20.00 GiB
  Logical volume mirror successfully resized
```
::: para
下面的命令显示使用与该分支有相同标签的物理卷扩展的镜像卷。注：忽略使用标签
`C`{.literal} 的物理卷。
:::
``` screen
# lvs -a -o +devices
  LV                VG   Attr       LSize  Log Cpy%Sync Devices
  mirror            taft Rwi-a-r--- 20.00g       100.00 mirror_rimage_0(0),mirror_rimage_1(0)
  [mirror_rimage_0] taft iwi-aor--- 20.00g              /dev/sdb1(1)
  [mirror_rimage_0] taft iwi-aor--- 20.00g              /dev/sdg1(0)
  [mirror_rimage_1] taft iwi-aor--- 20.00g              /dev/sdc1(1)
  [mirror_rimage_1] taft iwi-aor--- 20.00g              /dev/sdd1(0)
  [mirror_rmeta_0]  taft ewi-aor---  4.00m              /dev/sdb1(0)
  [mirror_rmeta_1]  taft ewi-aor---  4.00m              /dev/sdc1(0)
```
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_reduce}4.4.16. 缩小逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426160619904
.indexterm}[]{#LVM_CLI.html#idm140426160618464
.indexterm}[]{#LVM_CLI.html#idm140426157958704 .indexterm}
::: para
要缩小逻辑卷，首先请卸载该文件系统。然后可使用命令 `lvreduce`{.command}
缩小该卷。缩小该卷后，创新挂载该文件系统。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
关键是要在缩小该卷前，减小文件系统或者其在该卷中所在位置的大小，否则可能会有丢失数据的风险。
:::
:::
:::
::: para
缩小逻辑卷可释放一些卷组空间，将其分配该该卷组中的其他逻辑卷。
:::
::: para
下面的示例将卷组 `vg00`{.filename} 中的逻辑卷 `lvol1`{.filename} 减少 3
个逻辑扩展。
:::
``` screen
# lvreduce -l -3 vg00/lvol1
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_activate}4.4.17. 控制逻辑卷激活 {.title}
:::
[]{#LVM_CLI.html#idm140426179908464 .indexterm}
::: para
可使用 `lvcreate`{.command} 或者 `lvchange`{.command} 命令的
`-k`{.option} 或者 `--setactivationskip {y|n}`{.option}
选项在正常激活命令中跳过为逻辑卷添加标签。该标签不适用于停用命令。
:::
::: para
可使用 `lvs`{.command} 命令确定是否要为逻辑卷设定标志，下面的示例中显示
`k`{.literal} 属性。
:::
``` screen
# lvs vg/thin1s1
LV         VG  Attr       LSize Pool  Origin
thin1s1    vg  Vwi---tz-k 1.00t pool0 thin1
```
::: para
默认情况下，将精简快照卷标记为跳过激活。除使用标准的 `-ay`{.option} 或者
`--activate y`{.option} 选项外，还可使用由 `-K`{.option} 或者
`--ignoreactivationskip`{.option} 设定的 `k`{.literal} 属性激活逻辑卷。
:::
::: para
下面的命令激活精简逻辑卷。
:::
``` screen
# lvchange -ay -K VG/SnapLV
```
::: para
使用 `lvcreate`{.command} 命令的 `-kn`{.option} 或者
`--setactivationskip n`{.option} 选项创建逻辑卷时可关闭持久 \"activation
skip\" 标志。可使用 `lvchange`{.command} 命令的 `-kn`{.option} 或者
`--setactivationskip n`{.option} 选项关闭现有逻辑卷的标签。可使用
`-ky`{.option} 或者 `--setactivationskip y`{.option} 再打开该标志。
:::
::: para
下面的命令创建没有 activation skip 标志的快照逻辑卷
:::
``` screen
# lvcreate --type thin -n SnapLV -kn -s ThinLV --thinpool VG/ThinPoolLV
```
::: para
下面的命令从快照逻辑卷中删除 activation skip 标签。
:::
``` screen
# lvchange -kn VG/SnapLV
```
::: para
可使用 `/etc/lvm/lvm.conf`{.filename} 文件中的
`auto_set_activation_skip`{.literal} 设置控制默认的跳过激活指定。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_CLI.html#lvm_filters}4.5. 使用过滤器控制 LVM 设备扫描 {.title}
:::
[]{#LVM_CLI.html#idm140426154161776
.indexterm}[]{#LVM_CLI.html#idm140426154160816
.indexterm}[]{#LVM_CLI.html#idm140426154159856 .indexterm}
::: para
启动时，会运行 `vgscan`{.command} 命令，扫描系统中的块设备，查找 LVM
标签，以决定哪些是物理卷。同时还会读取元数据并建立卷组列表。物理卷的名称保存在系统中每个节点的缓存文件
`/etc/lvm/cache/.cache`{.filename}
中。之后的命令可读取那个文件以避免重复扫描。
:::
::: para
可通过在 `lvm.conf`{.filename} 配置文件中设定过滤器控制设备 LVM
扫描。`lvm.conf`{.filename}
文件中的过滤器由一系列简单正则表达式组成，应用于 `/dev`{.filename}
目录中的设备名以决定接受或者拒绝每个找到的块设备。
:::
::: para
下面的示例演示了使用过滤器控制 LVM
扫描的设备。注：这些示例不一定代表最佳实践，因为正则表达式与完整路径名完全匹配。例如：`a/loop/`{.filename}
等同与 `a/.*loop.*/`{.filename}，并与
`/dev/solooperation/lvol1`{.filename} 映射。
:::
::: para
下面的过滤器添加所有找到的设备，这是默认行为，因为在配置文件中没有配置任何过滤器：
:::
``` screen
filter = [ "a/.*/" ]
```
::: para
下面的过滤器删除 cdrom
设备，以避免在该驱动器中不包含任何介质时会造成延迟：
:::
``` screen
filter = [ "r|/dev/cdrom|" ]
```
::: para
下面的过滤器添加所有回路并删除其他所有块设备：
:::
``` screen
filter = [ "a/loop.*/", "r/.*/" ]
```
::: para
下面的过滤器添加所有回路和 IDE，并删除其他所有块设备：
:::
``` screen
filter =[ "a|loop.*|", "a|/dev/hd.*|", "r|.*|" ]
```
::: para
下面的过滤器只在第一个 IDE 驱动器中添加分区 8 并删除其他所有块设备：
:::
``` screen
filter = [ "a|^/dev/hda8$|", "r/.*/" ]
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
`lvmetad`{.command} 守护进程处于运行状态时，执行
`pvscan --cache device`{.command} 命令时不会应用
`/etc/lvm/lvm.conf`{.filename} 文件中的 `filter =`{.literal}
设置。要过滤设备，则需要使用 `global_filter =`{.literal} 设定。LVM
不会打开无法进行全局过滤的设备，且再也不会对其进行扫描。可能会需要使用全局过滤器，例如：在
VM 中使用 LVM 设备，且不想让该物理主机扫描 VM 中设备的内容。
:::
:::
:::
::: para
有关 `lvm.conf`{.filename} 文件的详情，请查看 [附录 B, *LVM
配置文件*](#config_file.html){.xref} 及 `lvm.conf`{.command}(5) man
page。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_CLI.html#online_relocation}4.6. 在线数据重新定位 {.title}
:::
[]{#LVM_CLI.html#idm140426161125920
.indexterm}[]{#LVM_CLI.html#idm140426161124992
.indexterm}[]{#LVM_CLI.html#idm140426161124064 .indexterm}
::: para
可使用 `pvmove`{.command} 命令在系统处于使用状态时迁移数据。
:::
::: para
`pvmove`{.command}
命令将要移动到扇区中的数据分散，并创建临时镜像以便移动每个扇区。有关
`pvmove`{.command} 命令操作的详情，请查看 `pvmove`{.command}(8) man
page。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
要在集群中执行 `pvmove`{.command} 操作，应该确定已安装
`cmirror`{.literal} 软件包，且 `cmirrord`{.literal} 服务正在运行。
:::
:::
:::
::: para
下面的命令将物理卷 `/dev/sdc1`{.filename}
中所有已分配的空间移动到该卷组中可用的物理卷中：
:::
``` screen
# pvmove /dev/sdc1
```
::: para
下面的命令只移动逻辑卷 `MyLV`{.filename} 的扩展。
:::
``` screen
# pvmove -n MyLV /dev/sdc1
```
::: para
因为执行 `pvmove`{.command}
命令需要较长时间，可以在后台运行该命令，以免在前台显示进程更新。下面的命令在后台将物理卷
`/dev/sdc1`{.filename} 中所有分配的扩展移动到 `/dev/sdf1`{.filename}。
:::
``` screen
# pvmove -b /dev/sdc1 /dev/sdf1
```
::: para
下面的命令以 5 秒为间隔报告该命令移动进程的百分比。
:::
``` screen
# pvmove -i5 /dev/sdd1
```
:::
::: section
::: titlepage
# [⁠]{#LVM_CLI.html#cluster_activation}4.7. 在集群的独立节点中激活逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426103741488
.indexterm}[]{#LVM_CLI.html#idm140426104675888
.indexterm}[]{#LVM_CLI.html#idm140426104674448 .indexterm}
::: para
如果在集群环境中安装了
LVM，则有时可能会需要以独占方式在一个节点中激活逻辑卷。
:::
::: para
要以独占方式在一个节点中激活逻辑卷，可使用 `lvchange -aey`{.command}
命令。另外，可以使用 `lvchange -aly`{.command}
命令在一个本地节点中以非独占方式激活逻辑卷。可稍后在附加节点中同时将其激活。
:::
::: para
还可以使用 LVM 标签中独立节点中激活逻辑卷，如 [附录 C, *LVM
对象标签*](#lvm_tags.html){.xref} 。还可以在该配置文件中指定节点激活，如
[附录 B, *LVM 配置文件*](#config_file.html){.xref} 所述。
:::
:::
::: section
::: titlepage