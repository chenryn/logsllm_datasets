title:SoK: Introspections on Trust and the Semantic Gap
author:Bhushan Jain and
Mirza Basim Baig and
Dongli Zhang and
Donald E. Porter and
Radu Sion
2014 IEEE Symposium on Security and Privacy
SoK: Introspections on Trust and the Semantic Gap
Bhushan Jain, Mirza Basim Baig, Dongli Zhang, Donald E. Porter, and Radu Sion
{bpjain, mbaig, dozhang, porter, sion}@cs.stonybrook.edu
Stony Brook University
Abstract—An essential goal of Virtual Machine Introspection
(VMI) is assuring security policy enforcement and overall
functionality in the presence of an untrustworthy OS. A
fundamental obstacle to this goal is the difﬁculty in accurately
extracting semantic meaning from the hypervisor’s hardware-
level view of a guest OS, called the semantic gap. Over the
twelve years since the semantic gap was identiﬁed, immense
progress has been made in developing powerful VMI tools.
Unfortunately, much of this progress has been made at
the cost of reintroducing trust into the guest OS, often in
direct contradiction to the underlying threat model motivating
the introspection. Although this choice is reasonable in some
contexts and has facilitated progress, the ultimate goal of
reducing the trusted computing base of software systems is
best served by a fresh look at the VMI design space.
This paper organizes previous work based on the essential
design considerations when building a VMI system, and then
explains how these design choices dictate the trust model
and security properties of the overall system. The paper then
observes portions of the VMI design space which have been
under-explored, as well as potential adaptations of existing
techniques to bridge the semantic gap without trusting the
guest OS.
Overall, this paper aims to create an essential checkpoint
in virtualized
in the broader quest
for meaningful
environments through VM introspection.
trust
Keywords-VM Introspection, semantic gap, trust.
I. INTRODUCTION
Virtualization has the potential to greatly improve system
security by introducing a sensible layering—separating the
policy enforcement mechanism from the component being
secured.
Most
legacy OSes are both monolithic and burdened
with a very wide attack surface. A legacy OS, such as
Linux, executes all security modules in the same address
space and with the same privilege level as the rest of the
kernel [91]. When this is coupled with a porous attack
surface, malicious software can often load code into the
OS kernel which disables security measures, such as virus
scanners and intrusion detection. As a result, users have
generally lost conﬁdence in the ability of the OS to enforce
meaningful security properties. In cloud computing, for
instance, customers’ computations are isolated using virtual
machines rather than OS processes.
In contrast, hypervisors generally have a much narrower
interface. Moreover, bare metal, or Type I [76], hypervisors
generally have orders of magnitude fewer lines of code
than a legacy OS. Table I summarizes the relative size of a
representative legacy OS (Linux 3.13.5), and a representative
bare-metal hypervisor (Xen 4.4), as well as comparing the
number of reported exploits in both systems over the last 8
years. Perhaps unsurprisingly, the size of the code base and
API complexity are strongly correlated with the number of
reported vulnerabilities [85]. Thus, hypervisors are a much
more appealing foundation for the trusted computing base
of modern software systems.
This paper focuses on systems that aim to assure the func-
tionality required by applications using a legacy software
stack, secured through techniques such as virtual machine
introspection (VMI) [46]. A number of valuable research
projects observe that a sensitive application component, such
as a random number generator or authentication module,
requires little functionality, if any, from the OS, yet are
vulnerable to failures of the OS [68, 69]. These projects are
beyond the scope of this paper, which instead focuses on
systems that leverage virtualization to ensure security prop-
erties for applications that require legacy OS functionality.
VMI has become a relatively mature research topic, with
numerous projects. This paper distills key design points
from previous work on VMI—providing readers and system
designers with a framework for evaluating design choices.
Moreover, we observe an unfortunate trend in the lit-
erature: many papers do not explicate their assumptions
about the system, trusted computing base, or threat models.
Although an attentive reader can often discern these facts,
this trend can create confusion within the ﬁeld. Thus, this
survey carefully explicates the connection between certain
design choices and the fundamental trust assumptions un-
derlying these designs. One particularly salient observation
is that all current solutions to the semantic gap problem [34]
implicitly assume the guest OS is benign. Although this is
a reasonable assumption in many contexts, it can become a
stumbling block to the larger goal of reducing the size of
the trusted computing base.
Finally, after identifying key design facets in previous
work, this paper identiﬁes promising under-explored regions
of the design space. The paper discusses initial work in these
areas, as well as the applicability of existing techniques and
more challenging threat models.
The contributions and insights of this work are as follows:
• A thorough survey of research on VMI, and a distillation
of the principal VMI design choices.
• An analysis of the relationship between design choices
© 2014, Bhushan Jain. Under license to IEEE.
DOI 10.1109/SP.2014.45
605
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:07 UTC from IEEE Xplore.  Restrictions apply. 
Codebase
Xen hypervisor 4.4
Linux kernel 3.13.5
Codebase
Xen hypervisor
Linux kernel
Lines of code
0.50 Million
12.01 Million
No. of CVE
24
903
Table I
SIZE AND DOCUMENTED VULNERABILITIES OF A REPRESENTATIVE
BARE-METAL HYPERVISOR (XEN) AND LEGACY OS (LINUX). CODE
SIZES WERE CALCULATED BASED ON XEN 4.4 AND LINUX 3.13.5.
CVES WERE COLLECTED FOR ALL VERSIONS OF THESE CODE BASES
OVER THE PERIOD FROM 01/01/2006 TO 03/03/2014.
and implicit assumptions and trust. We observe that ex-
isting solutions to the semantic gap problem inherently
trust the guest OS, often in direct contradiction to the
underlying motivation for using VM introspection.
• The observation that
the semantic gap problem has
evolved into two separate issues: an engineering challenge
and a security challenge. Existing solutions address the
engineering challenge.
• Identifying a connection between techniques that protect
memory and prevent attacks.
• Exploring the applicability of current techniques to new
problems, such as removing the guest OS from the trusted
computing base without removing OS functionality.
• Identifying additional points in the design space that
are under-explored, such as hardware-support for mutual
distrust among system layers and dynamic learning from
an untrusted OS.
II. BACKGROUND
The speciﬁc goals of VM introspection systems vary, but
commonly include identifying if a malicious loadable kernel
module, or rootkit, has compromised the integrity of the
guest OS [75]; identifying malicious applications running
on the system [65]; or ensuring the integrity or secrecy of
sensitive ﬁles [51]. In these systems, a monitor tracks the
behavior of each guest OS and either detects or prevents
policy violations. Such a monitor may be placed in the
hypervisor, a sibling VM,
itself, or in the
hardware, as illustrated in Figure 1. This process of looking
into a VM is Virtual Machine Introspection (VMI).
in the guest
A fundamental challenge to using VMI for security pol-
is that many desirable security policies
icy enforcement
are expressed in high-level, OS abstractions, such as ﬁles
and processes, yet the hypervisor only has direct visibility
into hardware-level abstractions, such as physical memory
contents and hardware device operations. This disparity in
abstractions is known as the semantic gap.
As an example of how the semantic gap creates chal-
lenges for introspection, consider how a hypervisor might
go about listing the processes running in a guest OS. The
hypervisor can access only hardware-level abstractions, such
as the CPU registers and contents of guest memory pages.
The hypervisor must identify speciﬁc regions of guest OS
App
App App
VM
Guest OS
Sibling
VM
            Hypervisor
    Hardware
Figure 1. Monitor placement options in VMI: in a sibling VM, the
hypervisor, in the guest OS itself, or in hardware. In-guest and hardware
solutions require some assistance from the hypervisor.
memory that include process descriptors, and interpret the
raw bytes to reconstruct semantic information, such as the
command line, user id, and scheduling priorities.
As a result of the semantic gap, much of the VMI devel-
opment effort goes into reconstructing high-level semantic
information from low-level sources. VMI tools attempt to
reconstruct a range of information, including the set of run-
ning processes, sensitive ﬁle contents, and network sockets.
For brevity, we limit this paper to memory introspection,
where the hypervisor draws inferences about guest behavior
from the contents of memory and CPU registers. A range
of work has also introspected disk contents [54, 87, 93] and
network trafﬁc [48, 56]; at this boundary, we limit discussion
to in-memory data structures, such as those representing ﬁle
metadata (inode) or a socket (sk_buff).
As we discuss in the next section, many of these semantic
reconstruction techniques rely on fragile assumptions or are
best-effort. Unfortunately, errors in reconstructing seman-
tic information can be exploited by malware to trick an
introspection-based security monitor.
Continuing our example of listing processes in a guest
OS, a typical introspection strategy would be to identify the
deﬁnition of a process descriptor (e.g., a task_struct
on Linux) from the source code, and then walk the list
of runnable processes by following the global root of the
process list init_task, overlaying this structure deﬁnition
over the relevant memory addresses. This strategy faces a
number of challenges. First, one must either assume all
process descriptors are in this list—even in a compromised
or malicious OS—or one must detect hidden processes,
using techniques such as scanning all of guest memory
looking for potential process descriptors or detecting incon-
sistencies between the currently loaded page tables and the
purported process descriptor [55]. Hidden process detection
faces additional challenges, such as false positives from
scanning memory during a critical section which temporarily
606
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:07 UTC from IEEE Xplore.  Restrictions apply. 
invariant
the introspection tool
is
violates some internal
checking. In order to prevent the guest OS from using a
hidden process descriptor, the introspection must identify
all context switching code in the kernel, possibly including
dynamically loaded code which manually context switches
a hidden process. Finally, a rootkit might hide itself in a
subtle and unexpected manner, such as loading itself as a
thread in the address space of a benign system process, or
placing its code in the memory image of a common library
and scheduling itself by changing the address of a signal
handling function.
These subtleties make robustly bridging the semantic
gap quite a challenge. The next section organizes current
strategies to solve this problem.
III. BRIDGES ACROSS THE SEMANTIC GAP
Modern OSes are complex systems consisting of thou-
sands of data structure types, and many instances of each
type. A typical running instance of the Linux kernel was
found to have a core set of 29,488 data structure instances
belonging to 231 different types that enable scheduling,
memory management, and I/O [77]. Each of these structures
consists of many ﬁelds. For instance, a task struct in Linux
3.10 contains more than 50 ﬁelds [14], many of which are
pointers to other structures. A key ingredient to any solution
to the semantic gap problem is reconstruction of kernel data
structures from memory contents.
This section begins with explaining techniques to recon-
struct kernel data structures (III-A), followed by additional
introspection techniques that do not directly reconstruct data
structures (§III-B–III-C), and then techniques that assure
the integrity of the kernel binary (§III-D). As the section
explains each technique, it highlights the underlying trust
assumption(s)—most commonly that the guest OS is benign.
We will revisit these trust assumptions as we explain VMI
attacks and defenses (§V). as well as discussing how one
might adapt VMI to a stronger threat model where these
assumptions do not hold (§VI).
A. Learning and Reconstruction
Data structure reconstruction generally relies on a learn
and search methodology. A learning phase is used to extract
information relevant
to data structures, generally a data
structure signature. A signature can be used to identify and
reconstruct data structure instances within kernel memory
contents. Signatures are created using techniques such as
expert knowledge, source analysis, or dynamic analysis—
each described in this subsection (§III-A1–III-A3).
A second search phase identiﬁes instances of the data
structure. The two most common search strategies are to
either linearly scan kernel memory or to traverse data struc-
ture pointers, starting with public symbols. Depending on the
OS, public symbols may include debugging symbols or the
dynamic linking tables exposed to loadable kernel modules.
It is arguable which approach is more efﬁcient, since many
kernel data structures can have cyclic or invalid pointers, but
may require traversing less total memory. However, the lin-
ear scan of kernel memory has the advantage that it is robust
to “disconnected” structures or other attempts to obfuscate
pointers. Both techniques can observe transient states when
searching concurrently with OS operation, discussed further
in §IV-A.
Several linear scanning techniques limit the search space
by introspecting on the kernel memory allocators—either
by interpreting allocator data structures [51] or by placing
debugging breakpoints on the allocator [77]. OS kernels
commonly use a different slab or memory pool for each
object type; this information can be used to further infer data
structure types. An advantage of leveraging heap-internal
information for search is more easily identifying transient
data structures which have been freed but may be pointed
to—a challenge for other search approaches. An inherent
risk of this approach is missing data structures allocated in
an unorthodox manner.