                             undefined main()
             undefined         AL:1           
                             main                                            XREF[4]:     Entry Point(*), 
                                                                                          _start:5555555550fd(*), 
                                                                                          5555557530f0, 5555557531b8(*)  
    555555555296 55              PUSH       RBP
    555555555297 48 89 e5        MOV        RBP,RSP
    55555555529a 48 81 ec        SUB        RSP,0xcbb00
                 00 bb 0c 00
    5555555552a1 b9 00 00        MOV        ECX,0x0
                 00 00
    5555555552a6 ba 01 00        MOV        EDX,0x1
                 00 00
    5555555552ab be 00 00        MOV        ESI,0x0
                 00 00
    5555555552b0 bf 00 00        MOV        EDI,0x0
                 00 00
    5555555552b5 b8 00 00        MOV        EAX,0x0
                 00 00
    5555555552ba e8 e1 fd        CALL       ptrace                                           long ptrace(__ptrace_request __r
                 ff ff
    5555555552bf 48 83 f8 ff     CMP        RAX,-0x1
    5555555552c3 75 16           JNZ        LAB_5555555552db
    5555555552c5 48 8d 3d        LEA        RDI,[s_I'm_being_debugged!_555555753008]         = "I'm being debugged!"
                 3c dd 1f 00
    5555555552cc e8 5f fd        CALL       puts                                             int puts(char * __s)
                 ff ff
    5555555552d1 b8 01 00        MOV        EAX,0x1
                 00 00
    5555555552d6 e9 16 d9        JMP        LAB_555555752bf1
                 1f 00
                             LAB_5555555552db                                XREF[1]:     5555555552c3(j)  
    5555555552db 48 8d 3d        LEA        RDI,[s_Meow_Meow..._55555575301c]                = "Meow Meow..."
                 3a dd 1f 00
    5555555552e2 e8 49 fd        CALL       puts                                             int puts(char * __s)
                 ff ff
    5555555552e7 c7 45 f8        MOV        dword ptr [RBP + -0x8],0x0
                 00 00 00 00
    5555555552ee 48 8d 35        LEA        RSI,[DAT_555555753029]                           = 72h    r
                 34 dd 1f 00
    5555555552f5 48 8d 3d        LEA        RDI,[s_RoyalCat_55555575302b]                    = "RoyalCat"
                 2f dd 1f 00
    5555555552fc e8 af fd        CALL       fopen                                            FILE * fopen(char * __filename, 
                 ff ff
    555555555301 48 89 45 f0     MOV        qword ptr [RBP + -0x10],RAX
    555555555305 48 83 7d        CMP        qword ptr [RBP + -0x10],0x0
                 f0 00
    55555555530a 75 16           JNZ        LAB_555555555322
    55555555530c 48 8d 3d        LEA        RDI,[s_Error_opening_file_555555753034]          = "Error opening file"
                 21 dd 1f 00
    555555555313 e8 a8 fd        CALL       perror                                           void perror(char * __s)
                 ff ff
    555555555318 b8 ff ff        MOV        EAX,0xffffffff
                 ff ff
    55555555531d e9 cf d8        JMP        LAB_555555752bf1
                 1f 00
                             LAB_555555555322                                XREF[1]:     55555555530a(j)  
    555555555322 83 7d f8 00     CMP        dword ptr [RBP + -0x8],0x0
    555555555326 0f 84 c0        JZ         LAB_555555752bec
                 d8 1f 00
    55555555532c 48 8b 45 f0     MOV        RAX,qword ptr [RBP + -0x10]
    555555555330 ba 02 00        MOV        EDX,0x2
                 00 00
    555555555335 be 00 00        MOV        ESI,0x0
                 00 00
    55555555533a 48 89 c7        MOV        RDI,RAX
    55555555533d e8 4e fd        CALL       fseek                                            int fseek(FILE * __stream, long 
                 ff ff
    555555555342 48 8b 45 f0     MOV        RAX,qword ptr [RBP + -0x10]
    555555555346 48 89 c7        MOV        RDI,RAX
    555555555349 e8 22 fd        CALL       ftell                                            long ftell(FILE * __stream)
                 ff ff
    55555555534e 89 45 ec        MOV        dword ptr [RBP + -0x14],EAX
    555555555351 48 8b 45 f0     MOV        RAX,qword ptr [RBP + -0x10]
    555555555355 ba 00 00        MOV        EDX,0x0
                 00 00
    55555555535a be 00 00        MOV        ESI,0x0
                 00 00
    55555555535f 48 89 c7        MOV        RDI,RAX
    555555555362 e8 29 fd        CALL       fseek                                            int fseek(FILE * __stream, long 
                 ff ff
    555555555367 48 8d 85        LEA        RAX,[RBP + -0xcbb00]
                 00 45 f3 ff
    55555555536e ba e0 ba        MOV        EDX,0xcbae0
                 0c 00
    555555555373 be 00 00        MOV        ESI,0x0
                 00 00
    555555555378 48 89 c7        MOV        RDI,RAX
    55555555537b e8 d0 fc        CALL       memset                                           void * memset(void * __s, int __
                 ff ff
    555555555380 c7 85 00        MOV        dword ptr [RBP + -0xcbb00],0x238
                 45 f3 ff 
                 38 02 00 00
    55555555538a c7 85 04        MOV        dword ptr [RBP + -0xcbafc],0x1d4
                 45 f3 ff 
                 d4 01 00 00
    555555555394 c7 85 08        MOV        dword ptr [RBP + -0xcbaf8],0x2b8
                 45 f3 ff 
                 b8 02 00 00
    ; ... many more MOV instructions ...
    5555557522aa c7 85 44        MOV        dword ptr [RBP + -0x1bc],0x8e
                 fe ff ff 
                 8e 00 00 00
    5555557522b4 c7 85 48        MOV        dword ptr [RBP + -0x1b8],0x2ec
                 fe ff ff 
                 ec 02 00 00
    5555557522be c7 85 4c        MOV        dword ptr [RBP + -0x1b4],0x1ca
                 fe ff ff 
                 ca 01 00 00
    5555557522c8 c7 45 fc        MOV        dword ptr [RBP + -0x4],0x32e54
                 54 2e 03 00
    5555557522cf e9 c0 08        JMP        LAB_555555752b94
                 00 00
```
We can try to reconstruct our own decompilation from the assembly:
```c
void main()
{
    uint32_t    counter;        // RBP + -0x4
    uint32_t    dummy;          // RBP + -0x8
    FILE*       p_file;         // RBP + -0x10
    uint32_t    file_size;      // RBP + -0x14
    uint32_t    array[208568];  // RBP + -0xcbb00
    if (ptrace(PTRACE_TRACEME, 0, 1, 0) == -1)
    {
        puts("I'm being debugged!");
        return 1;
    }
    puts("Meow Meow...");
    dummy = 0;
    p_file = fopen("RoyalCat", 'r');
    if (p_file == NULL)
    {
        perror("Error opening file");
        return -1;
    }
    if (dummy == 0)
    {
        return 0;
    }
    fseek(p_file, 0, SEEK_END);
    file_size = ftell(p_file);
    fseek(p_file, 0, SEEK_SET);
    memset(array, 0, sizeof(array));
    array[0] = 0x238;
    array[1] = 0x1d4;
    array[2] = 0x2b8;
    // ... many more assignments
    array[208465] = 0x8e;
    array[208466] = 0x2ec;
    array[208467] = 0x1ca;
    counter = 208468;
}
```
So what we see here is:
 * A simple anti-debug trick with `ptrace`
 * Another anti-debug anti-anything trick with `dummy`? Looks like we'll need to patch the program to bypass this
 * An attempt to open a file named `RoyalCat` and identify its size
 * Filling an array with many different values up to a certain point
 * Initializing a counter to the number of values filled in the array
Let's continue analyzing what happens when we jump to `LAB_555555752b94`:
```assembly
                             LAB_555555752b94                                XREF[1]:     5555557522cf(j)  
    555555752b94 8b 45 fc        MOV        EAX,dword ptr [RBP + -0x4]
    555555752b97 3b 45 ec        CMP        EAX,dword ptr [RBP + -0x14]
    555555752b9a 0f 8c 34        JL         middle_label
                 f7 ff ff
```
Well, over here we check if `counter < file_size` and jump to `middle_label` if so.
```assembly
                             middle_label                                    XREF[1]:     555555752b9a(j)  
    5555557522d4 81 7d fc        CMP        dword ptr [RBP + -0x4],0x32e53
                 53 2e 03 00
    5555557522db 0f 8e 9d        JLE        LAB_555555752b7e
                 08 00 00
    5555557522e1 81 7d fc        CMP        dword ptr [RBP + -0x4],0x32e54
                 54 2e 03 00
    5555557522e8 0f 8e 89        JLE        LAB_555555752b77
                 08 00 00
    5555557522ee 81 7d fc        CMP        dword ptr [RBP + -0x4],0x32e55
                 55 2e 03 00
    5555557522f5 0f 8e 75        JLE        LAB_555555752b70
                 08 00 00
    ; This continues ...
    5555557527b1 81 7d fc        CMP        dword ptr [RBP + -0x4],0x32eb4
                 b4 2e 03 00
    5555557527b8 7e 30           JLE        LAB_5555557527ea
    5555557527ba 81 7d fc        CMP        dword ptr [RBP + -0x4],0x32eb5
                 b5 2e 03 00
    5555557527c1 7e 1d           JLE        LAB_5555557527e0
    5555557527c3 81 7d fc        CMP        dword ptr [RBP + -0x4],0x32eb6
                 b6 2e 03 00
    5555557527ca 7e 0a           JLE        LAB_5555557527d6
    5555557527cc b8 96 00        MOV        EAX,0x96
                 00 00
    5555557527d1 e9 ad 03        JMP        end_label
                 00 00
                             LAB_5555557527d6                                XREF[1]:     5555557527ca(j)  
    5555557527d6 b8 40 01        MOV        EAX,0x140
                 00 00
    5555557527db e9 a3 03        JMP        end_label
                 00 00
                             LAB_5555557527e0                                XREF[1]:     5555557527c1(j)  
    5555557527e0 b8 9c 00        MOV        EAX,0x9c
                 00 00
    5555557527e5 e9 99 03        JMP        end_label
                 00 00
    ; This continues ...
                             LAB_555555752b70                                XREF[1]:     5555557522f5(j)  