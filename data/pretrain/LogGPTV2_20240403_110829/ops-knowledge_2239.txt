In my C++ application, which runs on Ubuntu and works with nfqueue, I send packets via raw sockets to another computer and then receive the response packets. I want to test the sent and received packets on both Computer 1 and Computer 2 to ensure they match the expected values (e.g., IP addresses, ports, and payload).

I need to create an automated test that can listen to the Ethernet interface, capture the sent packets, and verify their content. I am looking for a simple solution, such as a tool with a straightforward API or code, to accomplish this. Ideally, the test should check the packets at the sender, but if that is too complex, a solution that verifies the packets at the receiver is also acceptable.

The test application can be written in C++, Java, or Python.

### Requirements:
1. **Capture and Verify Packets:**
   - Listen to the Ethernet interface.
   - Capture the sent and received packets.
   - Verify the packet contents (IP, ports, and payload).

### Preferred Solutions:
- A tool or library with a simple API to capture and analyze network traffic.
- The ability to integrate this tool/library into the test framework.

### Possible Tools and Libraries:
- **Libpcap/WinPcap:** A widely-used library for packet capture and analysis. It has bindings for C/C++, Java, and Python.
- **Scapy:** A powerful Python-based interactive packet manipulation program and library. It is easy to use and can handle complex packet analysis.
- **Tcpdump:** A command-line packet analyzer that can be used for capturing and analyzing network traffic. It can be integrated with scripts for automation.

### Example Approach Using Scapy (Python):
1. **Install Scapy:**
   ```bash
   pip install scapy
   ```

2. **Capture and Verify Packets:**
   ```python
   from scapy.all import sniff, IP, TCP

   def packet_callback(packet):
       if packet.haslayer(IP) and packet.haslayer(TCP):
           ip = packet[IP]
           tcp = packet[TCP]
           payload = packet[TCP].payload.load if packet[TCP].payload else b''

           # Define your expected values
           expected_ip_src = "192.168.1.1"
           expected_ip_dst = "192.168.1.2"
           expected_port_src = 12345
           expected_port_dst = 80
           expected_payload = b"Expected Payload"

           # Verify the packet
           if (ip.src == expected_ip_src and ip.dst == expected_ip_dst and
               tcp.sport == expected_port_src and tcp.dport == expected_port_dst and
               payload == expected_payload):
               print("Packet is as expected.")
           else:
               print("Packet does not match expected values.")

   # Start sniffing on the Ethernet interface
   sniff(iface="eth0", prn=packet_callback, store=0)
   ```

### Example Approach Using Libpcap (C++):
1. **Install Libpcap:**
   ```bash
   sudo apt-get install libpcap-dev
   ```

2. **Capture and Verify Packets:**
   ```cpp
   #include <pcap.h>
   #include <iostream>

   void packet_handler(u_char *user_data, const struct pcap_pkthdr* pkthdr, const u_char* packet) {
       // Parse the packet and verify its contents
       const struct ip* ip_header = (struct ip*)(packet + 14); // Assuming Ethernet header
       const struct tcphdr* tcp_header = (struct tcphdr*)((u_char*)ip_header + (ip_header->ip_hl << 2));

       // Define your expected values
       const char* expected_ip_src = "192.168.1.1";
       const char* expected_ip_dst = "192.168.1.2";
       uint16_t expected_port_src = 12345;
       uint16_t expected_port_dst = 80;

       // Convert IP addresses to strings
       char src_ip_str[INET_ADDRSTRLEN];
       char dst_ip_str[INET_ADDRSTRLEN];
       inet_ntop(AF_INET, &ip_header->ip_src, src_ip_str, INET_ADDRSTRLEN);
       inet_ntop(AF_INET, &ip_header->ip_dst, dst_ip_str, INET_ADDRSTRLEN);

       // Verify the packet
       if (strcmp(src_ip_str, expected_ip_src) == 0 && strcmp(dst_ip_str, expected_ip_dst) == 0 &&
           ntohs(tcp_header->source) == expected_port_src && ntohs(tcp_header->dest) == expected_port_dst) {
           std::cout << "Packet is as expected." << std::endl;
       } else {
           std::cout << "Packet does not match expected values." << std::endl;
       }
   }

   int main() {
       pcap_t* handle;
       char errbuf[PCAP_ERRBUF_SIZE];

       // Open the device for live capture
       handle = pcap_open_live("eth0", BUFSIZ, 1, 1000, errbuf);
       if (handle == nullptr) {
           std::cerr << "Couldn't open device: " << errbuf << std::endl;
           return -1;
       }

       // Start capturing packets
       pcap_loop(handle, 0, packet_handler, nullptr);

       // Close the handle
       pcap_close(handle);

       return 0;
   }
   ```

These examples provide a starting point for capturing and verifying packets. You can adapt them to fit your specific requirements and integrate them into your test framework.