# Title: Ripple: A Programmable, Decentralized Link-Flooding Defense Against Adaptive Adversaries

## Authors
Jiarong Xing, Wenqing Wu, and Ang Chen  
Rice University

## Publication Information
- **Conference**: 30th USENIX Security Symposium
- **Date**: August 11â€“13, 2021
- **Proceedings ISBN**: 978-1-939133-24-3
- **Access**: Open access sponsored by USENIX
- **Link**: [https://www.usenix.org/conference/usenixsecurity21/presentation/xing](https://www.usenix.org/conference/usenixsecurity21/presentation/xing)

## Abstract
Link-flooding attacks (LFAs) aim to disconnect an edge network from the Internet by congesting core network links. These adversaries can dynamically change their attack strategies (e.g., target links, traffic types) to evade mitigation and launch persistent attacks.

We introduce Ripple, a programmable, decentralized link-flooding defense against dynamic adversaries. Ripple can be programmed using a declarative policy language to emulate a range of state-of-the-art SDN defenses, but it enables these defenses to adapt autonomously without a central controller. To achieve this, Ripple develops new defense primitives in programmable switches, which are configured by the policy language to implement the desired defense. The Ripple compiler generates a distributed set of switch programs to extract a panoramic view of attack signals and act against them in a fully decentralized manner, enabling successive waves of defenses against fast-changing attacks. We show that Ripple has low overheads and can effectively recover traffic throughput where SDN-based defenses fail.

## 1. Introduction
Distributed denial-of-service (DDoS) attacks have always been a significant threat, but recent advancements have made them even more formidable. In a link-flooding attack (LFA), an attacker can surgically remove an edge network from the Internet without it perceiving any attack traffic. The adversary identifies a set of network links serving the victim edge and orchestrates attack traffic to congest these links. This can result in severe performance degradation or complete disconnection for the victim. Traditional endpoint-based DDoS protections are ineffective since attack traffic never reaches the endpoints, necessitating defenses within the network core.

Link-flooding attacks present unique challenges in detection, classification, and mitigation:
1. **Detection**: Unlike volumetric attacks, LFAs can use low-rate flows to stay under the detection threshold.
2. **Classification**: Advanced LFAs use legitimate flows indistinguishable from normal traffic.
3. **Adaptation**: Adversaries can launch adaptive attacks, changing target links or traffic types while targeting the same victim network.

A promising approach is to develop LFA defenses based on software-defined networking (SDN). In this architecture, defense algorithms run as software apps in a centralized controller, providing programmability to implement a wide range of LFA defenses. However, these defenses rely on a feedback loop, which can lag behind if the adversary rapidly changes attack strategies. This leads to suboptimal defenses or even additional harm, known as rolling attacks.

In this paper, we propose Ripple, a programmable and decentralized link-flooding defense against adaptive adversaries. Like SDN defenses, Ripple can be programmed to implement various defenses, but it does so without centralized control. Ripple leverages programmable switches to develop new defense primitives in switch hardware. Defense decisions take effect within the round-trip time (RTT) scale, enabling rapid response to changing attacks. The key challenge Ripple addresses is decentralization, requiring careful choreography of switch-local decisions for synchronized defense. Ripple achieves this through a policy language, a compiler, and a distributed runtime for link-flooding defense.

### Contributions
- A decentralized defense architecture for mitigating adaptive link-flooding attacks.
- The Ripple system, which develops defense primitives in programmable switch hardware. It can be programmed by a policy language to emulate state-of-the-art SDN defenses. The compiler generates switch programs to implement the policy, and the defense programs run in a fully distributed manner to react to changing attacks without central control. The runtime protocol synchronizes switch-local views for panoramic defense.
- Hardware and software prototypes, and extensive evaluation demonstrating defense effectiveness.

## 2. Overview
### 2.1 Key Challenges
**Diversity**: Link-flooding attacks can employ a wide range of strategies, such as Coremelt, Crossfire, and SPIFFY, each with different characteristics and requirements for detection, classification, and mitigation. This calls for a programmable defense that can be customized to mitigate various attacks.

**Dynamicity**: Link-flooding attacks can rapidly change, making them difficult to defend against. An adversary can dynamically shift attack traffic to different critical links, change traffic patterns, or use short-lived pulses. Defenses must account for this dynamicity, which is a key design goal of Ripple.

### 2.2 State of the Art
State-of-the-art defenses are based on OpenFlow SDN, where a central controller hosts "defense apps" that receive traffic samples or statistics from switches, perform detection and classification, and install new mitigation decisions back to the switches. While SDN-based solutions enable programmable defenses, they have limitations due to the feedback loop required for the defense, which can lag behind rapidly changing attacks.

### 2.3 Limitations of Existing Work
SDN-based defenses are limited by the latency in the feedback loop, which includes sampling, computation, and installation of decisions. This latency allows adaptive adversaries to change their strategies before the defense can respond, leading to suboptimal or ineffective defenses.

### 2.4 A Programmable, Decentralized Defense
Ripple addresses these limitations by leveraging programmable switches, which can inspect every packet with minimal latency. Ripple also provides a decentralized defense by developing a policy language, a compiler, and a distributed runtime. This enables a panoramic view of the network, allowing Ripple to adapt to fast-changing attacks without central control.

## 3. Programming the Panoramic Defense
Ripple introduces a new abstraction, the defense panorama, which describes the relevant signals for link-flooding defense. The panorama extracts network-wide threat signals from switch-local traffic using the defense policy and abstracts away unrelated signals. Ripple captures a series of panoramic snapshots of the entire network, presenting a global view of attack waves, including their current location and propagation.

### 3.1 The Panoramic View
The defense panorama is a key abstraction in Ripple, providing a global, real-time view of attack waves and their propagation through the network. Users program against this panoramic view, and the compiler automatically generates the defense programs at each switch. The distributed protocol synchronizes switch-local views, enabling successive defense waves to take effect against fast-changing attacks.

## Conclusion
In summary, Ripple is a programmable, decentralized link-flooding defense that addresses the limitations of existing SDN-based defenses. By leveraging programmable switches and a policy language, Ripple can adapt to fast-changing attacks without central control, providing a robust and effective defense against adaptive adversaries.