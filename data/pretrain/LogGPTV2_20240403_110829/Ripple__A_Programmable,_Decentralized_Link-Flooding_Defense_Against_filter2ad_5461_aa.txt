title:Ripple: A Programmable, Decentralized Link-Flooding Defense Against
Adaptive Adversaries
author:Jiarong Xing and
Wenqing Wu and
Ang Chen
Ripple: A Programmable, Decentralized Link-Flooding 
Defense Against Adaptive Adversaries
Jiarong Xing, Wenqing Wu, and Ang Chen, Rice University
https://www.usenix.org/conference/usenixsecurity21/presentation/xing
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Ripple: A Programmable, Decentralized Link-Flooding Defense
Against Adaptive Adversaries
Jiarong Xing Wenqing Wu Ang Chen
Rice University
Abstract
Link-ﬂooding attacks (LFAs) aim to cut off an edge network
from the Internet by congesting core network links. Such an
adversary can further change the attack strategy dynamically
(e.g., target links, trafﬁc types) to evade mitigation and launch
persistent attacks.
We develop Ripple, a programmable, decentralized link-
ﬂooding defense against dynamic adversaries. Ripple can be
programmed using a declarative policy language to emulate a
range of state-of-the-art SDN defenses, but it enables the de-
fenses to shapeshift on their own without a central controller.
To achieve this, Ripple develops new defense primitives in
programmable switches, which are conﬁgured by the policy
language to implement a desired defense. The Ripple com-
piler generates a distributed set of switch programs to extract
a panoramic view of attack signals and act against them in
a fully decentralized manner, enabling successive waves of
defenses against fast-changing attacks. We show that Ripple
has low overheads, and that it can effectively recover trafﬁc
throughput where SDN-based defenses fail.
1 Introduction
Distributed denial-of-service (DDoS) attacks [5, 9, 10] have
always been a signiﬁcant threat, but as of late, adversaries
have taken DDoS attacks to the next level. In a link-ﬂooding
attack (LFA), an attacker can surgically remove an edge net-
work from the Internet without it perceiving any attack trafﬁc.
Such an adversary identiﬁes a set of network links that serve
the victim edge, and orchestrate attack trafﬁc to congest these
links [40]. Victim destinations may experience severe perfor-
mance degradation or complete disconnection. To mitigate
these new attacks, traditional endpoint-based DDoS protec-
tions [26, 29, 50, 61] are fundamentally handicapped—since
attack trafﬁc never has to reach endpoint destinations, de-
fenses must be deployed inside the network core.
Link-ﬂooding attacks are signiﬁcantly more challenging
than traditional volumetric DDoS in their detection, classiﬁca-
tion, and mitigation. (a) Unlike volumetric attacks, which are
easy to detect by thresholding, LFAs can leverage low-rate
ﬂows to stay under the detection threshold [40]. (b) Classi-
ﬁcation algorithms are also challenging to design: although
some LFA trafﬁc has distinctive features (e.g., spoofed or
UDP-based ﬂows) [53], more advanced attacks rely entirely
on legitimate ﬂows that are indistinguishable from normal
trafﬁc [40]. (c) Adversaries can launch adaptive attacks [40]
that dynamically change target links or trafﬁc types while
targeting the same victim network. An effective LFA defense
must simultaneously match the signiﬁcant diversity and dy-
namicity of the attacks.
A promising line of work has developed link-ﬂooding de-
fenses [4,28,39,43,55,61] based on software-deﬁned network-
ing (SDN) [46]. In this architecture, defense algorithms run
as software apps in a centralized controller; this programma-
bility is key to implementing a wide range of LFA defenses in
an otherwise ﬁxed-function network. Although SDN switches
are hardwired for packet forwarding, the software defense
apps can receive OpenFlow messages from the switches at
runtime, construct a global defense view, and compute new de-
fense decisions when needed. This feedback loop enables the
hardwired switches to work with the controller for dynamic
defenses. The switches send trafﬁc samples or statistics to the
software apps, which run detection, classiﬁcation, and mitiga-
tion algorithms. The defense decisions are then populated to
each switch for link-ﬂooding defense.
However, these defenses share a common assumption and
limitation—the efﬁcacy of the feedback loop itself. After the
controller samples, recomputes, and reinstalls defense deci-
sions to the switches, the decisions must remain effective for
a sufﬁciently long period of time. If the adversary rapidly
changes her attack strategies, e.g., trafﬁc types or target links,
then the controller decisions would constantly lag behind.
Such dynamic adversaries can force the defense apps to al-
ways act on stale data, which would in turn result in subopti-
mal defenses or even additional harm. These TOCTOU-style
strategies have been proven effective and are known as rolling
attacks [40]. Developing effective defenses against adaptive
adversaries remains an open research question.
In this paper, we propose Ripple, a programmable and
decentralized link-ﬂooding defense against adaptive adver-
saries. Like OpenFlow-based SDN defenses, Ripple can be
programmed to implement a wide range of defenses; however,
the defenses can shapeshift on its own without centralized
software control. This makes Ripple a powerful match against
dynamic attacks. In fact, Ripple can activate new defenses as
fast as attack waves propagate. Defense decisions only take
RTT-timescale—the diameter of the network—to take effect.
This enables successions of defense waves to replace older
ones as the attacks change. The technology enabler for Ripple
is the emergence of programmable switches [18, 19], which
Ripple leverages to develop new defense primitives in switch
hardware. However, raw hardware speeds are only a starting
point; there is a range of challenges in the Ripple defense.
USENIX Association
30th USENIX Security Symposium    3865
The key challenge Ripple needs to address is decentral-
ization; the same factor that enables rapid attack responses
also brings new design challenges. In traditional SDN, the
software controller has a centralized view, so it has a global
vantage point to enforce network-wide defense. Ripple, how-
ever, eliminates central control, so it needs to choreograph
the switch-local decisions carefully for synchronized defense.
To this end, Ripple develops a policy language, a compiler,
and a distributed runtime for link-ﬂooding defense. The Rip-
ple language exports a key abstraction that we call a defense
panorama, whose goal is to precisely extract network-wide
threat signals from high-speed trafﬁc. Users of Ripple pro-
gram against this panoramic view, and the compiler generates
switch programs that implement the panoramic defense in a
fully distributed manner. Attack signals are ﬁrst extracted by
switch-local primitives, and then propagated by the distributed
runtime protocol for view synchronization.
In summary, we make the following contributions:
• A decentralized defense architecture for mitigating adap-
tive link-ﬂooding attacks.
• The Ripple system, which develops defense primitives in
programmable switch hardware. It can be programmed
by a policy language to emulate state-of-the-art SDN
defenses. The compiler generates switch programs to im-
plement the policy. The defense programs run in a fully
distributed manner to react to changing attacks with-
out central control. The runtime protocol synchronizes
switch-local views for panoramic defense.
• Hardware and software prototypes1, and extensive eval-
uation that demonstrates defense effectiveness.
We then describe related work and conclude the paper.
2 Overview
Figure 1 illustrates the key mechanisms of link-ﬂooding at-
tacks [39, 40, 53]. The adversary controls a large botnet, and
she constructs a link map using traceroute-like utilities. Next,
she identiﬁes a set of critical links that carry all or most of the
victim destination’s trafﬁc. She creates congestion at some or
all of the critical links using her botnet to degrade the victim’s
network performance.
2.1 Key challenges
Diversity. The ﬁrst challenge in link-ﬂooding attacks is the
wide range of possible attack strategies [4, 28, 39, 40, 43, 53,
55, 61]. We describe three representative attacks and their ad-
versary assumptions [39, 40, 53]. In all cases, the attack trafﬁc
always originates from the bots controlled by the adversary,
but trafﬁc types and patterns vary: (a) Coremelt [53] uses
1https://github.com/jiarong0907/Ripple
Figure 1: Link-ﬂooding attacks congest network links to dis-
connect a target victim edge.
bot-to-bot trafﬁc patterns, and the attack ﬂows are volumet-
ric in nature (i.e., UDP or spoofed TCP trafﬁc). (b) Cross-
ﬁre [40] generates trafﬁc from bots to public servers that
are not controlled by the adversary; the attack trafﬁc con-
sists of normal web requests, which are typically low-rate and
regulated by TCP congestion control. Since these ﬂows are
protocol-conforming TCP requests, the attack trafﬁc is “indis-
tinguishable” [40] from ﬂash crowds. (c) SPIFFY [39] falls
somewhere between (a) and (b). It assumes a “cost-sensitive”
adversary [39] that generates as much trafﬁc as possible from
each bot—for instance, because the attacker wants to maxi-
mize the utility of a moderate-sized botnet. The individual
attack ﬂows are TCP-conforming instead of volumetric ﬂoods.
Takeaway: Although all these attacks aim to congest net-
work links, they require different detection, classiﬁcation, and
mitigation algorithms. This calls for a programmable defense
that can be customized to mitigate a host of different attacks.
Dynamicity. Another formidable feature of link-ﬂooding at-
tacks is dynamicity. The feasibility of rolling attacks was ﬁrst
identiﬁed and validated by Crossﬁre [40], but it remains an
open question to this day. (a) Changing targets: An adversary
can dynamically shifts its attack trafﬁc to a different set of
critical links while attacking the same victim destination. The
attack can therefore evade non-adaptive defenses and persist
for a long time [40]. (b) Mix-vectored attacks: The adversary
can easily change the attack trafﬁc and patterns, or use mix-
vectored attacks—related to the diversity of attack strategies
discussed above. (c) Pulsewave attacks: The adversary can
generate short-lived attack pulses, which may have already
subsided by the time that defense algorithms are activated [2].
Recent results have also shown that pulses can be synchro-
nized to arrive at the same location very precisely [49].
Takeaway: Link-ﬂooding attacks can rapidly change. De-
fenses against adaptive adversaries must explicitly account
for such dynamicity. This is a key design goal of Ripple.
2.2 State of the art
State-of-the-art defenses developed in the security community
are based on OpenFlow SDN [4,28,39,43,55,61]. At the heart
of SDN-based defenses is a central controller that can host a
3866    30th USENIX Security Symposium
USENIX Association
botsuserspublic/decoy serversvictim networktarget linksnormal trafficmalicious trafficrange of “defense apps”. These apps receive trafﬁc samples
or statistics from the OpenFlow switches, perform detection
and classiﬁcation, and installs new mitigation decisions back
to the switches. The operator can customize each step using
attack-speciﬁc algorithms.
Detection can be achieved by collecting link utilization data
from all switches to the SDN controller, either periodically or
when certain links are overwhelmed. The SDN apps have a
global view of the network by virtue of running in the central
controller. This provides a useful vantage point to collect
network-wide trafﬁc statistics and detect which parts of the
network are congested.
Classiﬁcation algorithms implement attack-speciﬁc logic
for identifying malicious trafﬁc—e.g., volumetric ﬂows in
Coremelt [53], or cost-sensitive ﬂows in SPIFFY [39]. At-
tempts to classify Crossﬁre-like attacks must be aware of false
positives and negatives that may result, as the attack ﬂows are
indistinguishable from ﬂash crowds [40].
Mitigation algorithms include dropping malicious packets
if attack trafﬁc has distinguishable features [53], or more con-
servative strategies that reroute trafﬁc away from congested
links—e.g., for “indistinguishable” attack ﬂows where classi-
ﬁers inevitably produce inaccuracy [40].
Compared to traditional networks, SDN-based solutions
enable programmable defenses that can be customized for
different types of link-ﬂooding attacks.
2.3 Limitations of existing work
However, SDN-based defenses also have notable limitations,
and they stem from the fact that a feedback loop is required
for the defense.
Rolling attacks [40] remain a prominent open question
in link-ﬂooding defense. An adaptive adversary can rapidly
change her attack strategies to prevent an effective feedback
loop from forming—e.g., by dynamically changing victim
links, attack trafﬁc types, patterns, or by using short-lived
pulses. SDN apps are forced to always use an outdated view
of the attack. Concretely, the defense lags behind due to three
latency components: a) sampling latency from OpenFlow
switches to the controller, b) computing new responses in
the SDN apps using trafﬁc engineering algorithms [34, 36],
and c) installing the decisions back to the network. When
defense decisions are installed back to the switches, the attack
strategies may have already changed. Moreover, detection
algorithms that desire higher accuracy may require higher
sampling rates for ﬁne-grained analysis; but this in the case
of rolling attacks may further increase defense latency.
#1: Programmable data planes. Ripple leverages an emerg-
ing technology trend in the networking community. Pro-
grammable switches have reconﬁgurable data planes, which
can be programmed in P4 [12] for ﬂexible packet process-
ing. A P4 program can customize the switch pipeline with
new protocols, header types, and sophisticated processing
logic. Ripple develops defense primitives that directly run
in programmable switch hardware. Unlike SDN apps that
can only process downsampled trafﬁc or aggregate statistics,
programmable switches can inspect every single packet with
nanoseconds of extra latency at full linespeed.
#2: Decentralized defense. Raw hardware speed, by itself,
is far from sufﬁcient for mitigating adaptive attacks. This
is because a link-ﬂooding defense requires a network-wide
view—the detection, classiﬁcation, and mitigation policies
need to precisely identify the locations and types of attack
waves, which propagate across switches and change over time.
If every switch simply takes actions based on its local view,
the collective effect may be incoherent or even chaotic. Ripple
addresses this by developing a policy language to precisely
capture a defense panorama—a global, real-time view of
attack waves and how they propagate through the network.
Users of Ripple program against this panoramic view with-
out having to reason about switch-local actions; rather, our
compiler automatically generates the defense programs at ev-
ery switch. To match the dynamicity of adaptive adversaries,
Ripple constructs this panoramic view in a fully decentralized
manner, using a distributed protocol to synchronize switch-
local views. This enables successive defense waves to take
effect against fast-changing attacks as they propagate.
3 Programming the Panoramic Defense
The ﬁrst set of challenges in Ripple stems from the need for
programmable defense. In OpenFlow-based SDN, the defense
apps are simply software modules that can be plugged into
the SDN controller platform—e.g., OpenDaylight [16]/Bea-
con [14] supports Java apps, POX [15] supports Python apps,
and NOX [13] supports C++. However, the P4 programming
model is highly restricted; it does not support familiar pro-
gram constructs such as loops or recursions. The program also
needs to ﬁt in tight hardware resource constraints. Therefore,
defenses mostly have to work with compact, array-like data
structures. Moreover, a P4 program only speciﬁes per-switch
processing, but Ripple needs a panoramic view of the entire
network. This leads to design challenges for a) providing a
panoramic view of the network, b) emulating state-of-the-
art SDN defenses in a restricted programming model, and c)
shielding switch programming details from the defense.
2.4 A programmable, decentralized defense
The key contribution of Ripple is to address the limitations of
existing work in mitigating changing attacks. The design of
Ripple involves a number of techniques.
3.1 The panoramic view
Ripple proposes a new abstraction, the defense panorama,
which describes the types of signals that are relevant for link-
USENIX Association
30th USENIX Security Symposium    3867
Figure 2: Ripple provides a defense panorama for network
operators to program defense policies easily.
ﬂooding defense. A panorama extracts network-wide threat
signals from switch-local trafﬁc using the defense policy, and
it abstracts away unrelated signals so that they do not clutter
the defense view. More concretely, Ripple captures a series
of panoramic snapshots of the entire network, and precisely
zooms in on the attack signals. These snapshots present a
global view of attack waves, including their current location,