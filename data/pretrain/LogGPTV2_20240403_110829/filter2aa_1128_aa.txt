# Vista System Restore and Rootkit Protection

## Speaker Information
- **Name:** Edward Sun
- **Network ID:** CardMagic
- **Author of:** DarkSpy Anti-Rootkit
- **Contributions:**
  - Published several articles on rootkit.com
  - Involved in R&D for some world-famous kernel-level products in global companies
  - Experienced in Windows kernel mode research and programming
- **Current Role:** Researcher at Trend Micro Threat Solution Team

## Overview
This presentation will cover:
- Internals of Vista System Restore (VSR)
- A user-mode rootkit to hide arbitrary files or registry keys from VSR
- A new method to bypass modern Host Intrusion Prevention Systems (HIPS)
- Detection and protection against the threat

## Agenda
1. **Introduction to Vista System Restore (VSR)**
2. **VSR Internals**
3. **VSR Rootkit**
4. **Bypassing HIPS**
5. **Protecting and Detecting VSR Threats**
6. **Demo**

## Introduction to Vista System Restore (VSR)
- **Functionality:** VSR allows users to revert their system files and settings to a previous state using restore points.
- **Enhancements in Vista:**
  - Significant improvements over the XP version, with a new architecture and implementation.
  - Capabilities include modifying Windows system files, registry settings, installed programs, scripts, batch files, and other executable files.

## VSR Internals
- **Documentation:** Microsoft has not provided detailed documentation on how VSR works.
- **Process Overview:**
  1. **Creating a Restore Point:**
     - Utilizes the shadow copy mechanism to create a volume shadow copy.
     - Example: `SRSetRestorePoint` function call stack.
  2. **Serving a Restore Request:**
     - When a restore request is initiated, two processes are launched: `WmiPrvSE.exe` (holding `srwmi.dll`) and `dllhost.exe` (holding `srcore.dll`).
     - Control is then transferred to `CSrWMIProvider::Restore` in `srwmi.dll`, which involves `srcore.dll`'s `CreateInstance` method.
     - `srcore.dll` performs preparation and configuration, then calls `_RegisterForShutdownContinuation` to register a callback for Windows shutdown.
  3. **Shutdown and Startup:**
     - During shutdown, the `ShutdownContinuation` callback is invoked, which parses shadow volume information and restores system elements.
     - **Registry Restore:**
       - Based on hive files, `srcore` renames the original hive file and copies the backed-up hive file from the volume shadow copy.
       - The original hive file is renamed to `xxxx_previous`, and the backed-up file is used after reboot.
     - **File Restore:**
       - Modified files are restored immediately, except for inaccessible files.
       - For inaccessible files, `srcore` copies the old version to the restore folder, renames it, and registers an autorun program (`srdelayed.exe`) to execute during startup.

## Shadow Copy Mechanism
- **Implementation:**
  - Uses the disk filter driver `Volsnap.sys`.
  - Backs up original sectors when any writer modifies them, providing a point-in-time view of the volume.
  - Example: If an application writes `a, b, d`, the original sectors are kept by the shadow copy service. Access requests for these sectors are routed to the original copies, while requests for other sectors (e.g., `c`) are directed to the real volume.
- **Shadow Copy Files:**
  - Located in specific directories, with backup file IDs matching the names of shadow volume device names.

## Protecting and Detecting VSR Threats
- **Detection:**
  - Monitor for unauthorized restore points and changes in system files and registry.
  - Use security tools to detect and block rootkits and HIPS bypass attempts.
- **Protection:**
  - Implement robust access controls and monitoring.
  - Regularly update and patch systems to mitigate vulnerabilities.
  - Use advanced security solutions to detect and prevent rootkit and HIPS bypass attacks.

## Demo
- A live demonstration of the VSR process and the detection and protection mechanisms will be provided.

---

**PDF created with pdfFactory Pro trial version www.pdffactory.com**