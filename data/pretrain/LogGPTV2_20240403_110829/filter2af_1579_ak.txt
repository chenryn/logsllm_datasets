        :param poly: poly , default 0xEDB88320
        :param accum: accum , default 0
        :return: none
        '''
        obj = crc32_reverse_class(crc32, length, char_set, poly, accum)
        obj.run_reverse()
    def crc32(s):
        '''
        :param s: the string to calculate the crc32
        :return: the crc32
        '''
        return binascii.crc32(s) & 0xffffffff
    from my_crc32 import *
    l=[0x251dee02,
    0xb890530f,
    0x6e6b39df,
    0x50f684c3,
    0xde41b551,
    0x24bd35b6,
    0xcef2eda8,
    0xba2b1745,
    0x1f4c7ea9,
    0x58b2bfa9,
    0x251dee02,
    0xe0f81f1e,
    0xbd6fbd41,
    0x7342a1f6,
    0x665648e9,
    0xe7c594b3,
    0xa60ffdd0,
    0xce2ce80b,
    0x22459f2d,
    0x6f8a6539,
    0x2073a2e4,
    0x52fa60a8,
    0x80410dda,
    0xb7c68f27,
    0x6e6b39df,
    0xbd598041,
    0xaa145d64,
    0x16da6b3b,
    0x7dd590bc,
    0xb9eef5a1,
    0xf0b958f0,
    0x445a43f7,
    0x8bd55271,
    0xc0340fe2,
    0xc0cd9ee5,
    0x7fc7de58,
    0x53bfec8a,
    0x99b5537b,
    0xd68019af,
    0x73d7ee30,
    0x5fbd3f5e]
    for k in l:
        crc32_reverse(k,5)
        print '======='
    #You_know_the_bed_feels_warmer_Sleeping_here_alone_You_know_I_dream_in_color_And_do_the_things_I_want_You_think_you_got_the_best_of_me_Think_you_had_the_last_laugh_Bet_you_think_that_everything_good_is_gone
crc32爆破完连接成文，很容易发现是最后一个文本。然后使用已知明文攻击即可。（有些人说因为我用7z压缩的zip所以他已知明文一直攻击不成功，我表示是我没有考虑到
## level2
### pokemon
打开游戏，大木会直接和你疯狂暗示
大木告诉你，FLAG在第一个道馆，去打败馆主。  
到研究室领精灵，助手给你20个奇异糖果，让你快速升级。  
再次提醒打败第一个馆主。  
一路打怪升级到第一个道馆  
打败后
馆主说我不会告诉你的，想知道的话自己去逆向这个rom。  
正文开始。  
用PPRE工具。  
    text_11="HIIIIIINT(You-really-want-to-get-the-flag-by-submi
    ting-it-one-by-one?)"
    text_12="HIIIIIINT(Try-to-read-the-scrpit-XP)"
    text_13="HIIIIIINT(Don’t forget to change Brackets to Curly
    Brackets !!!!)"
下面是一堆flag，但只有一个是正确的。  
提示你去看脚本。  
锁定脚本
    Fanfare 1500
    Lockall
    Faceplayer
    Checkbadge 0 0x800c
    If 0x800c 1
    CheckLR 1 func_5
    Message 0
    CloseMsgOnKeyPress
    TrainerBattle 20 0 0
    CheckTrainerLost 0x800c
    If 0x800c 0
    CheckLR 1 func_6
    Setbdgtrue 0
    ActMainEvent 22
    SetTrainerId 29
    SetTrainerId 50
    Setvar 0x4074 1
    Setflag 402
    Setvar 16648 6
    Setflag 244
    Setflag 403
    Message 1
    SetvarHero 0
    Message 2
    Soundfr 1189
    Fadedef
    Message 3
    Jump func_7
到func_7
    Setvar 0x8004 378
    Setvar 0x8005 1
    CheckItem3 0x8004 0x8005 0x800c
    If 0x800c 0
    CheckLR 1 func_15
    Callstd 241 7
    Setflag 115
    Clearflag 741
    Setvar 0x8004 378
    Setvar 0x8005 1
    CheckItem3 0x8004 0x8005 0x800c
    If 0x800c 0
    CheckLR 1 func_16
    Message 4
    WaitButton
    CloseMsgOnKeyPress
    Releaseall
    End
分析逻辑可知，func_16永远不会被执行  
到func_16
    Message 64
    WaitButton
    CloseMsgOnKeyPress
    Releaseall
    End
发现是使用64号text弹出对话框
    text_64="HCTF(6A0A81AB5F9917B1EEC3A6183C614380)"
get flag `HCTF{6A0A81AB5F9917B1EEC3A6183C614380}`
## level3
### new_love_song
# New_Love_Song
* * *
不知道各位还记不记得去年HCTF的图片隐写题，去年的大一通信小学弟今年已经大二了。  
他从课堂上学会了音频隐写， ~~并选了大家（wo）LP的一首歌准备在双11送给大家（虽然没几个人开到）~~
#### **解题分析：**
题目后来也放过 **hint: concentrate on the waveform 注意波形图**  
用 **Audacity** 打开new_love_song.wav,基本近似于一种矩形:  
而正常的音频波形往往都是高低起伏的:  
所以我们就把波放大，能够发现：  
相隔特定的距离 就会出现一段直线。接触过的人肯定知道，直线波就是某一特定的值  
能够猜测 肯定有东西藏在其中，尝试提取出来，发现是一串01串 长度可开方 ，又是熟悉的转换二维码，扫描get flag
#### **解题脚本：**
    clc
    clear
    close all 
    %% load data
    wm_sz     = 20000;                             % watermark size
    px_sz     = wm_sz/8;                           % number of pixels
    im_sz     = sqrt(px_sz);                       % image size
    host_new  = audioread ('new_love_song.wav');   % new (watermarked) host signal
    host_new  = uint8(255*(host_new + 0.5));       % double [-0.5 +0.5] to 'uint8' [0 255]
    %% prepare host
    host_bin  = dec2bin(host_new, 8);              % binary host [n 8]
    %% extract watermark
    wm_bin_str = host_bin(1:wm_sz, 8);
    wm_bin    = reshape(wm_bin_str, px_sz , 8);
    wm_str    = zeros(px_sz, 1, 'uint8');
    for i     = 1:px_sz                           % extract water mark from the first plane of host               
    wm_str(i, :) = bin2dec(wm_bin(i, :));      
    end
    wm        = reshape(wm_str, im_sz , im_sz);
    %% show image
    imshow(wm)
### BabyRSA
先看下题目的逻辑
    M = r * bytes_to_long('hctf{' + sha256(open('./flag').read()).hexdigest() + '}')
    S = pow(M, d, n)
程序接收 r，然后同 flag 相乘后计算出它的数字签名  
先说下本来的思路，flag 为 m，单纯 flag 的签名为 S，返回的签名为 S',如果我们构造 `r=R^e`  
因为  
所以
e 的值未知，通过爆破 e 的值遍历提交 R^e，再根据上式得出 flag
但是题目忘记对 r 进行限制，导致也可以通过传入 `r=2` 来做出  
因为 `2m >= low_bits
            d <<= low_bits
            d |= low_d
            if (e * d) % k == 1:
                if pow(test, d, n) == 3:
                        print k, d