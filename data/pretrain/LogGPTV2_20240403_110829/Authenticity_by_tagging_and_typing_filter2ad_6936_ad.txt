### Theorem 2: Strong Compositionality
Let \( P \) be the process with keys \((k_1, \ldots, k_n)\). Consider the process \((I_1 \xrightarrow{S_1} | \ldots | I_n \xrightarrow{S_n})\). Then, \( P : [] \) if and only if \( \text{keys}(k_1, \ldots, k_n).I_i \xrightarrow{S_i} : [], \forall i \in [1, n] \).

**Corollary:**
A protocol is safe if and only if all its participants are safe. Additionally, determining the safety of a participant requires only knowledge of the long-term keys it shares with other participants. This assumption is relatively mild, as the information conveyed by the keys pertains to the identities of the parties sharing them, rather than the specific protocol they are executing.

**Consequence:**
Unlike similar results in existing typing systems for authentication (e.g., [11, 12]), Theorem 2 can be directly applied to the verification of multi-protocol systems (see [20, 21] for details). However, this flexibility comes at a cost, as our result depends critically on run-time checks on message tags provided by pattern-matching.

### Case Study: SPLICE/AS Protocol
We illustrate our system using a slightly modified version of the SPLICE/AS Protocol (see the remark at the end of this section):

**Messages:**
1. \( B \to A : B, n_B \)
2. \( A \to B : A, B, \{B, n_B, \{n_A\}_{\text{Pub}(k_B)}\}_{\text{Priv}(k_A)} \)
3. \( B \to A : \{B, n_A\}_{\text{Pub}(k_A)} \)

This protocol aims to mutually authenticate \( A \) and \( B \). In the first two messages, \( B \) uses a POSH nonce handshake to authenticate \( A \), as \( n_B \) is sent in clear and received encrypted. In the second message, \( A \) sends a nested challenge to \( B \) using a SOSH scheme. However, this second part is flawed, as shown by the following attack sequence:

**Attack Sequence:**
- **Msg 2.a:** \( E : B, n_B \)
- **Msg 1.a:** \( A : B, n_B \)
- **Msg 1.b:** \( E(B) \to A : A, B, \{B, n_B, \{n_A\}_{\text{Pub}(k_B)}\}_{\text{Priv}(k_A)} \)
- **Msg 2.b:** \( E \to B : E, B, \{B, n_B, \{n_A\}_{\text{Pub}(k_B)}\}_{\text{Priv}(k_E)} \)
- **Msg 3.a:** \( B \to E : \{B, n_A\}_{\text{Pub}(k_E)} \)
- **Msg 3.b:** \( A : \{B, n_A\}_{\text{Pub}(k_A)} \)
- **Msg 3.c:** \( E(B) \to A : \{B, n_A\}_{\text{Pub}(k_A)} \)

There are two parallel sessions: session \( a \) between \( E \) and \( B \), and session \( b \) between \( A \) and \( B \). The adversary \( E \) exploits session \( a \) to impersonate \( B \) with \( A \) in session \( b \). Specifically, the adversary uses \( B \) as an oracle to decrypt the message \(\{n_A\}_{\text{Pub}(k_B)}\). The correspondence assertions show a mismatch: \( \text{commit}(A, B) \) (session \( b \)) does not match \( \text{run}(B, E) \) (session \( a \)). This attack is similar to the well-known attack on the Needham-Schroeder public-key protocol [17].

In the \(\rho\)-spi calculus, we capture these attack sequences by providing the adversary with long-term keys.

**Protocol Specification:**
Since the protocol is unsafe, it cannot be type-checked. We provide an intuitive explanation for why this occurs. The specification for \( A \) might look like this:

- **Msg 1:** \( \text{in}(B, x) \)
- **Msg 2:** \( \text{new}(n_A) \). \( \text{encrypt} \{n_A\}_{\text{Pub}(k_B)} \text{as} z \). \( \text{encrypt} \{B, x, z\}_{\text{Priv}(k_A)} \text{as} w \). \( \text{out}(A, B, w) \)
- **Msg 3:** \( \text{in}(y) \). \( \text{decrypt} y \text{as} \{B, n_A\}_{\text{Priv}(k_A)} \). \( \text{commit}(A, B) \)

No tagging can make this sequential process type-check. Specifically, rule SOPH/SOSH COMMIT requires that the nonce \( n_A \) has type \( \text{nonce}(B, A) \). This implies that the encryption of this nonce must follow the rule SOPH/SOSH INQUIRY, which always requires an identity label tagged by \( \text{Id} \) to be encrypted with the nonce, which is not the case in \( \text{encrypt} \{n_A\}_{\text{Pub}(k_B)} \text{as} z \).

**Repairing the Protocol:**
Since type-checking fails due to a missing identifier, adding it can repair the protocol. By modifying message 2 to:
- **Msg 2:** \( A \to B : A, B, \{B, n_B, \{A, n_A\}_{\text{Pub}(k_B)}\}_{\text{Priv}(k_A)} \)

We obtain the repaired protocol suggested by Gavin Lowe in [19]. The tagged version of the protocol is:

- **Msg 1:** \( B \to A : B, n_B \)
- **Msg 2:** \( A \to B : A, B, \{ \text{Id}(B), \text{Verif}(n_B), \{ \text{Id}(A), \text{Verif?}(n_A) \}_{\text{Pub}(k_B)} \}_{\text{Priv}(k_A)} \)
- **Msg 3:** \( B \to A : \{B, n_A\}_{\text{Pub}(k_A)} \)

In Message 2, \( A \) communicates to \( B \) that \( B \) is the verifier of the current authentication session and asks \( B \) whether or not he is willing to start an authentication session with her. Thus, we tag \( n_B \) by \( \text{Verif} \) and \( n_A \) by \( \text{Verif?} \).

The \(\rho\)-spi calculus specification of the protocol is reported in Table 7, where we analyze an unbounded number of sessions, with \( A \) and \( B \) playing both the initiator and responder roles. To check mutual authentication, we use two different pairs of correspondence primitives: \( \text{run1}(I, J), \text{commit1}(J, I) \) and \( \text{run2}(I, J), \text{commit2}(J, I) \). Each pair checks one direction of authentication, i.e., Initiator with respect to Responder and vice versa. For readability, both decorations are written together, but the typing is performed by considering only one at a time. The protocol can be typed with empty effect and environment, i.e., \( /0 \vdash \text{ProtocolS} : [] \). The rule used for typing each primitive is reported on the right side.

**Remark:**
In the original version of the SPLICE/AS protocol, the format of Message 2 is:
- \( A, B, \{A, n_B, \{n_A\}_{\text{Pub}(k_B)}\}_{\text{Priv}(k_A)} \)

With our present system, there is no tagging for this message enabling a successful validation of the protocol. We believe the problem can be circumvented by enhancing the system to allow public keys to be treated as entity identifiers and tagged as such.

### Conclusion and Related Work
We have proposed a type and effect system for authentication protocols. We tested our analysis on several authentication protocols, with some results reported in Table 8. Our system provides safety proofs for correct versions of the protocols while consistently failing to validate flawed versions (CCITT X.509 passes our analysis since it provides authentication even if it is affected by an attack on confidentiality). The main advantages of our proposal are:

- **Scalability:** Since authentication guarantees are local, safe sequential processes (possibly modeling different protocols) can be safely composed.
- **Limited Human Effort:** Tagging is simple, requiring only the disambiguation of identifiers and nonces in some encrypted messages.
- **Simplicity:** The type and effect system is simple yet expressive enough to verify many existing protocols.

Moreover, our analysis can verify authentication in the presence of adversaries with long-term keys, a feature not covered in [11, 12].

The set of rules presented here and in [10] is general enough for analyzing many authentication protocols. We are studying a method to "mechanically" extend the set of authentication rules, preserving safety. The idea is to provide meta-rules dictating the shape of "good rules." We are also developing a tool for type checking and tag inference.

**Related Work:**
- **Tagging:** Tagging is not new and is used for verification in [3, 4, 11, 12, 16]. Typically, tagging involves adding a different label to each encrypted protocol message to prevent confusion. Our tagging is less demanding, as we do not require every message to be unambiguously tagged.
- **Strand Spaces Formalism:** [13, 14, 15, 22] is an interesting framework for studying authentication. There are similarities between our analysis and the way nonce handshakes are checked in Strand Spaces. It would be interesting to explore how our type system could be applied in such a framework.
- **Control-Flow Analysis:** The recent work by Bodei et al. on a control-flow analysis for message authentication in Lysa [6, 5] is related to our approach. The motivations and goals differ, as message authentication concerns the origin of a message, while agreement provides guarantees about the presence in the current session of the claimant and its willingness to authenticate with the verifier.
- **Comparison with Gordon and Jeffrey's System:** We are formally comparing our type and effect system with the one by Gordon and Jeffrey [11, 12] and investigating a possible encoding of the former within the latter.

### References
[1] M. Abadi and C. Fournet. Private authentication. In Proceedings of the 2002 Workshop on Privacy Enhancing Technologies, Lecture Notes in Computer Science, pages 27–40. Springer-Verlag, 2003.
[2] M. Abadi and A. D. Gordon. A calculus for cryptographic protocols: The spi calculus. Information and Computation, 148(1):1–70, 1999.
[3] M. Abadi and R. Needham. Prudent engineering practice for cryptographic protocols. IEEE Transactions on Software Engineering, 22(1):6–15, 1996.
[4] B. Blanchet and A. Podelski. Verification of cryptographic protocols: Tagging enforces termination. Proceedings of Foundations of Software Science and Computation Structures, pages 136–152, 2003.
[5] C. Bodei, M. Buchholtz, P. Degano, F. Nielson, and H. Riis Nielson. Automatic validation of protocol narration. In Proceedings of the 16th IEEE Computer Security Foundations Workshop (CSFW’03), pages 126–140. IEEE Computer Society Press, June 2003.
[6] C. Bodei, M. Buchholtz, P. Degano, F. Nielson, and H. Riis Nielson. Control flow analysis can find new flaws too. In Proceedings of the Workshop on Issues on the Theory of Security (WITS’04), ENTCS. Elsevier, 2004.
[7] M. Boreale. Symbolic trace analysis of cryptographic protocols. In Proceedings of ICALP 01, volume 2076, pages 667–681. LNCS 2076, Springer Verlag, 2001.
[8] M. Boreale, R. De Nicola, and R. Pugliese. Proof techniques for cryptographic processes. In Logic in Computer Science, pages 157–166, 1999.
[9] M. Bugliesi, R. Focardi, and M. Maffei. Principles for entity authentication. In Proceedings of 5th International Conference Perspectives of System Informatics (PSI 2003), volume 2890 of Lecture Notes in Computer Science, pages 294–307. Springer-Verlag, July 2003.
[10] M. Bugliesi, R. Focardi, and M. Maffei. Compositional analysis of authentication protocols. In Proceedings of European Symposium on Programming (ESOP 2004), volume 2986 of Lecture Notes in Computer Science, pages 140–154. Springer-Verlag, 2004.
[11] A. Gordon and A. Jeffrey. Authenticity by typing for security protocols. In Proceedings of 14th IEEE Computer Security Foundations Workshop (CSFW’01), pages 145–159. IEEE Computer Society Press, June 2001.
[12] A. Gordon and A. Jeffrey. Types and effects for asymmetric cryptographic protocols. In Proceedings of 15th IEEE Computer Security Foundations Workshop (CSFW’02), pages 77–91. IEEE Computer Society Press, 24-26 June 2002.
[13] J.D. Guttman, F.J. Thayer, J.A. Carlson, J.C. Herzog, J.D. Ramsdell, and B.T. Sniffen. Trust management in strand spaces: a rely-guarantee method. In Proceedings of European Symposium on Programming (ESOP 2004), volume 2986 of Lecture Notes in Computer Science, pages 325–339. Springer-Verlag, 2004.
[14] Joshua D. Guttman and F. Javier Thayer. Protocol independence through disjoint encryption. In Proceedings of 13th IEEE Computer Security Foundations Workshop (CSFW’00), pages 24–34. IEEE Computer Society Press, July 2000.
[15] Joshua D. Guttman and F. Javier Thayer. Authentication tests and the structure of bundles. Theoretical Computer Science, 283(2):333–380, 2002.
[16] J. Heather, G. Lowe, and S. Schneider. How to prevent type flaw attacks on security protocols. In Proceedings of 13th IEEE Computer