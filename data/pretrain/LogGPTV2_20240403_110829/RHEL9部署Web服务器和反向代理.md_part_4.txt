2.  可选：默认情况下，所有连接到 Apache HTTP
    服务器的客户端都可以显示手册。要限制对特定 IP
    范围的访问，如`192.0.2.0/24`{.literal}
    子网，编辑`/etc/httpd/conf.d/manual.conf`{.literal}文件，并将`Require ip 192.0.2.0/24`{.literal}设置添加到
    ``{.literal}指令中：
    ``` screen
    ...
        **Require ip 192.0.2.0/24**
    ...
    ```
3.  重启`httpd`{.literal}服务：
    ``` screen
    # systemctl restart httpd
    ```
:::
::: orderedlist
**验证步骤**
1.  要显示 Apache HTTP 服务器手册，使用 Web
    浏览器连接到`http://host_name_or_IP_address/manual/`{.literal}
:::
:::
::: section
::: titlepage
# []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#working-with-modules_setting-apache-http-server}使用模块 {.title}
:::
作为一个模块化应用，`httpd`{.literal}服务与多个[*动态共享对象*]{.emphasis}([**DSO**]{.strong}s)一起分发，它们可以根据需要在运行时动态载入或卸载。这些模块位于`/usr/lib64/httpd/modules/`{.literal}目录中。
::: section
::: titlepage
## []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#sec-apache-dso-loading}载入模块 {.title}
:::
若要载入特定的 DSO 模块，可使用`LoadModule`{.literal}
指令。请注意，由单独的包提供的模块通常在`/etc/httpd/conf.modules.d/`{.literal}目录中有自己的配置文件。
[]{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#example-apache-dso-loading}
::: title
**载入 mod_ssl DSO**
:::
``` screen
LoadModule ssl_module modules/mod_ssl.so
```
载入该模块后，重启 web 服务器以重新载入配置。有关如何重启
`httpd`{.literal} 服务的更多信息，请参阅 ["管理 httpd
服务"一节](#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#managing-the-httpd-service_setting-apache-http-server "管理 httpd 服务"){.xref}。
:::
::: section
::: titlepage
## []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#sec-apache-dso-writing}编写模块 {.title}
:::
若要创建新的 DSO
模块，请确保已安装了`httpd-devel`{.literal}软件包。要做到这一点，以`root`{.literal}用户身份输入以下命令：
``` screen
# dnf install httpd-devel
```
此软件包包含编译模块所需的 include 文件、头文件和[**[APache
eXtenSion]{.application}**]{.strong}(`apxs`{.literal})工具。
编写完成后，可以使用以下命令构建模块：
``` screen
# apxs -i -a -c module_name.c
```
如果构建成功，您就可以像 [**[Apache HTTP
服务器]{.application}**]{.strong}分发的其他模块一样，载入该模块。
:::
:::
::: section
::: titlepage
# []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#exporting-a-private-key-and-certificates-from-an-nss-database-to-use-them-in-an-apache-web-server-configuration_setting-apache-http-server}从 NSS 数据库导出私钥和证书，以便在 Apache Web 服务器配置中使用它们 {.title}
:::
因为 RHEL 8 不再为 Apache web 服务器提供 `mod_nss`{.literal}
模块，因此红帽建议使用 `mod_ssl`{.literal}
模块。如果您将私钥和证书存储在网络安全服务(NSS)数据库中，请按照以下步骤[以
Privacy Enhanced
邮件(PEM)格式提取密钥和证书](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/setting-apache-http-server_deploying-different-types-of-servers#exporting-a-private-key-and-certificates-from-an-nss-database-to-use-them-in-an-apache-web-server-configuration_setting-apache-http-server){.link}。
:::
::: section
::: titlepage
# []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#_additional_resources}其他资源 {.title}
:::
::: itemizedlist
-   `httpd(8)`{.literal} -
    `httpd`{.literal}服务的手册页，包含其命令行选项的完整列表。
-   `httpd.service(8)`{.literal} -
    `httpd.service`{.literal}单元文件的手册页，描述如何自定义和加强服务。
-   `httpd.conf(5)`{.literal} - `httpd`{.literal} 配置的 man page，描述
    `httpd`{.literal} 配置文件的结构和位置。
-   `apachectl(8)`{.literal} - [**[Apache HTTP
    服务器]{.application}**]{.strong}控制接口的手册页。
-   有关如何在 Apache HTTP 服务器中配置 Kerberos 验证的详情，请参考[为
    Apache httpd 操作使用
    GSS-Proxy](https://access.redhat.com/articles/5854761){.link}。使用
    Kerberos 是在 Apache HTTP 服务器中强制进行客户端授权的替代方法。
-   [通过 PKCS #11
    配置应用程序以使用加密硬件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening){.link}.
:::
:::
:::
[]{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html}
::: chapter
::: titlepage
# []{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies}第 2 章 设置和配置 NGINX {.title}
:::
NGINX 是一个高性能和模块化的服务器，可作为：
::: itemizedlist
-   Web 服务器
-   反向代理服务器
-   负载均衡器
:::
这部分论述了如何在这些场景中使用 NGINX。
::: section
::: titlepage
# []{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#installing-and-preparing-nginx_setting-up-and-configuring-nginx}安装并准备 NGINX {.title}
:::
红帽使用 Application Streams 来提供不同的 NGINX 版本。本节描述了如何：
::: itemizedlist
-   选择流并安装 NGINX
-   在防火墙中打开所需端口
-   启用并启动`nginx`{.literal}服务
:::
使用默认配置，NGINX 作为 Web
服务器在端口`80`{.literal}上运行，并提供`/usr/share/nginx/html/`{.literal}目录中的内容。
::: itemizedlist
**先决条件**
-   已安装 RHEL 9。
-   主机订阅了红帽客户门户网站。
-   `firewalld`{.literal}服务已经启用并启动。
:::
::: orderedlist
**步骤**
1.  安装`nginx`{.literal}软件包：
    ``` literallayout
    # dnf install nginx
    ```
2.  打开 NGINX
    应该在其防火墙中提供其服务的端口。例如，要在`firewalld`{.literal}中为HTTP（端口
    80）和 HTTPS（端口 443）开放默认端口，请输入：
    ``` literallayout
    # firewall-cmd --permanent --add-port={80/tcp,443/tcp}
    # firewall-cmd --reload
    ```
3.  设置`nginx`{.literal}服务在系统启动时自动启动:
    ``` literallayout
    # systemctl enable nginx
    ```
4.  另外，也可启动`nginx`{.literal}服务：
    ``` literallayout
    # systemctl start nginx
    ```
    如果您不想使用默认配置，请跳过这一步，并在启动该服务前相应地配置
    NGINX。
:::
::: orderedlist
**验证步骤**
1.  使用 `dnf`{.literal} 实用程序验证是否已安装 `nginx`{.literal}
    软件包：
    ``` literallayout
    # dnf list installed nginx
    Installed Packages
    nginx.x86_64    1:1.20.1-4.el9       @rhel-AppStream
    ```
2.  确保在 firewalld 中打开了 NGINX 需要的端口：
    ``` literallayout
    # firewall-cmd --list-ports
    80/tcp 443/tcp
    ```
3.  验证`nginx`{.literal}服务是否已启用：
    ``` literallayout
    # systemctl is-enabled nginx
    enabled
    ```
:::
::: itemizedlist
**其他资源**
-   有关 Subscription Manager 的详情，请参阅[使用和配置 Subscription
    Manager](https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm){.link}指南。
-   有关配置防火墙的详情，请查看[安全网络](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/){.link}指南。
:::
:::
::: section
::: titlepage
# []{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#configuring-nginx-as-a-web-server-that-provides-different-content-for-different-domains_setting-up-and-configuring-nginx}将 NGINX 配置为一个为不同域提供不同内容的 web 服务器 {.title}
:::
默认情况下，NGINX 作为 web 服务器，为与服务器的 IP
地址关联的所有域名提供相同的内容。此流程解释了如何配置 NGINX
来实现一下情况：
::: itemizedlist
-   使用`/var/www/example.com/目录中的内容为`{.literal}example.com``{=html}域提供请求
-   使用`/var/www/example.net/`{.literal}目录中的内容为`example.net`{.literal}域提供请求
-   使用`/usr/share/nginx/html/`{.literal}目录中的内容为所有其他请求提供服务，例如，向服务器的IP地址或与服务器的IP地址相关联的其他域发送请求
:::
::: itemizedlist
**先决条件**
-   如 ["安装并准备
    NGINX"一节](#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#installing-and-preparing-nginx_setting-up-and-configuring-nginx "安装并准备 NGINX"){.xref}
    所述安装 NGINX。
-   客户端和 Web 服务器将 `example.com`{.literal} 和
    `example.net`{.literal} 域解析为 Web 服务器的 IP 地址。
    请注意，您必须手动将这些条目添加到 DNS 服务器中。
:::
::: orderedlist
**步骤**
1.  编辑`/etc/nginx/nginx.conf`{.literal}文件：
    ::: orderedlist
    1.  默认情况下，`/etc/nginx/nginx.conf`{.literal}文件已包含catch-all配置。如果您已从配置中删除了这部分，请将以下`server`{.literal}块重新添加到`/etc/nginx/nginx.conf`{.literal}文件中的`http`{.literal}块中：
        ``` literallayout
        server {
            listen       80 default_server;
            listen       [::]:80 default_server;
            server_name  _;
            root         /usr/share/nginx/html;
        }
        ```
        这些设置配置以下内容：
        ::: itemizedlist
        -   `listen`{.literal}指令定义服务监听的 IP
            地址和端口。在本例中，NGINX 监听所有 IPv4 和 IPv6
            地址的`80`{.literal}端口
            。`default_server`{.literal}参数表示，NGINX
            使用此`server`{.literal}块作为匹配 IP
            地址和端口的请求的默认值。
        -   `server_name`{.literal}参数定义此`server`{.literal}块所负责的主机名。将`server_name`{.literal}设置为`_`{.literal},会将NGINX配置为接受这个`server`{.literal}块的任何主机名。
        -   `root`{.literal}指令设置此`server`{.literal}块的 Web
            内容的路径。
        :::
    2.  将类似于`example.com`{.literal}域的`server`{.literal}块添加到
        `http`{.literal}块中：
        ``` literallayout
        server {
            server_name  example.com;
            root         /var/www/example.com/;
            access_log   /var/log/nginx/example.com/access.log;
            error_log    /var/log/nginx/example.com/error.log;
        }
        ```
        ::: itemizedlist
        -   `access_log`{.literal}指令为此域定义一个单独的访问日志文件。
        -   `error_log`{.literal}指令为此域定义单独的错误日志文件。
        :::
    3.  将类似于`example.com`{.literal}域的`server`{.literal}块添加到
        `http`{.literal}块中：
        ``` literallayout
        server {
            server_name  example.net;
            root         /var/www/example.net/;
            access_log   /var/log/nginx/example.net/access.log;
            error_log    /var/log/nginx/example.net/error.log;
        }
        ```
    :::
2.  为这两个域创建根目录：
    ``` literallayout
    # mkdir -p /var/www/example.com/