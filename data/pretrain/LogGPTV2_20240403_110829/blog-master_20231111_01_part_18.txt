 id | pid |   locktype    |        mode         | granted |         query          | conflict_origin_own_lock_pid   
----+-----+---------------+---------------------+---------+------------------------+------------------------------  
  1 | 367 | virtualxid    | ExclusiveLock       | t       | select * from t_lock;  |                          358  
  1 | 367 | relation      | AccessShareLock     | f       | select * from t_lock;  |                          358  
  2 | 358 | relation      | AccessExclusiveLock | f       | truncate table t_lock; |                          344  
  2 | 358 | virtualxid    | ExclusiveLock       | t       | truncate table t_lock; |                          344  
  2 | 358 | transactionid | ExclusiveLock       | t       | truncate table t_lock; |                          344  
(5 rows)  
```  
找到了源头是344, 最后查一下这条在干什么?   
```  
select pg_locks.pid, pg_locks.locktype, pg_locks.mode, pg_locks.granted, pg_stat_activity.query  
from pg_locks, pg_stat_activity   
where pg_locks.pid = pg_stat_activity.pid  
and pg_locks.pid=344;   
 pid |  locktype  |      mode       | granted |         query           
-----+------------+-----------------+---------+-----------------------  
 344 | relation   | AccessShareLock | t       | select * from t_lock;  
 344 | virtualxid | ExclusiveLock   | t       | select * from t_lock;  
 344 | relation   | AccessShareLock | t       | select * from t_lock;  
(3 rows)  
```  
创建一个试图, 方便排查锁等待链条    
```  
create view v_lock_chains as   
with recursive   
a as (select pid from pg_locks where not granted),  
tmp as (  
  select 1 as id, pid as blocked_pid, conflict_origin_own_lock_pid from (select pid, unnest(pg_blocking_pids(pid)) as conflict_origin_own_lock_pid from a) tt  
  union all  
  select id+1, conflict_origin_own_lock_pid as blocked_pid, unnest(pg_blocking_pids(conflict_origin_own_lock_pid)) as conflict_origin_own_lock_pid from tmp   
     -- where pg_blocking_pids(conflict_origin_own_lock_pid) <> '{}'::int[]   
)   
select tmp.id, pg_locks.pid, pg_locks.locktype, pg_locks.mode, pg_locks.granted, pg_stat_activity.query,   
  tmp.conflict_origin_own_lock_pid   
  from tmp, pg_locks, pg_stat_activity   
  where tmp.blocked_pid=pg_locks.pid   
      -- or tmp.conflict_origin_own_lock_pid=pg_locks.pid   
      and pg_locks.pid = pg_stat_activity.pid  
  order by id;   
```  
#### 85 RR隔离级别  
后续的SQL可见性判断都使用同一个事务快照, 也就是事务开始时创建的快照.  快照后提交的数据是看不到的, 因为被判断为不可见.  
```  
create table t_rr (id int);  
insert into t_rr values (1);  
```  
session 2:  
```  
begin;  
insert into t_rr values (2);  
INSERT 0 1  
```  
session 1:  
```  
db1=> begin isolation level repeatable read ;  
BEGIN  
db1=*> select * from t_rr;  
 id   
----  
  1  
(1 row)  
```  
session 2:  
```  
db1=*> commit;  
COMMIT  
```  
session 1:  
```  
db1=*> select * from t_rr;  
 id   
----  
  1  
(1 row)  
```  
#### 86 导出事务快照   
[《PostgreSQL 共享事务快照功能 - PostgreSQL 9.2 can share snapshot between multi transactions》](../201205/20120516_01.md)    
[《PostgreSQL 事务快照功能 - Parallel Export consistent data or Parallel Query use snapshot transaction feature》](../201303/20130306_02.md)    
[《PostgreSQL 9.5 new feature - pg_dump use --snapshot taken by another session (exp. slot, pg_export_snapshot())》](../201506/20150616_02.md)    
让多个会话使用同一个快照判断tuple可见性. 在 并行逻辑备份, 并行逻辑复制 的场景中, 使用共享事务快照解决多个并行进程快照不一致的问题. 也可以用来分享rc事务不同快照给不同的协作会话.   
```  
create table t_snap (id int);  
insert into t_snap values (1);  
```  
session 1:  
```  
begin TRANSACTION ISOLATION LEVEL repeatable read;    
SELECT pg_export_snapshot();    
 pg_export_snapshot    
---------------------  
 00000005-00000008-1  
(1 row)  
```  
#### 87 导入事务快照  
session 2:  
```  
db1=> begin TRANSACTION ISOLATION LEVEL repeatable read;    
BEGIN  
db1=*>   
db1=*> SET TRANSACTION SNAPSHOT '00000005-00000008-1';   
SET  
```  
#### 88 串行隔离级别(SSI)  
用于模拟串行处理 开启了SSI隔离级别的多个会话, 按事务结束顺序的串行, 如果相互不冲突, 则可以成功结束事务.    
采用了一些优化手段来通知被冲突但是未结束的事务, 用于加速报错, 避免到事务结束时再报错.    
```  
db1=> begin isolation level serializable ;  
BEGIN  
```  
#### 89 使用pgbench压测数据库  
- [《HTAP数据库 PostgreSQL 场景与性能测试之 3.1 - (OLAP) 大表JOIN统计查询-10亿 join 1亿 agg》](../201711/20171107_49.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 47 - (OLTP多模优化) 空间应用 - 高并发空间位置更新、多属性KNN搜索并测（含空间索引）末端配送、新零售类项目》](../201711/20171107_48.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 46 - (OLTP) 大json字段的高并发更新》](../201711/20171107_47.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 45 - (OLTP) 数据量与性能的线性关系(10亿+无衰减), 暨单表多大需要分区》](../201711/20171107_46.md)    
- [《[未完待续] HTAP数据库 PostgreSQL 场景与性能测试之 44 - (OLTP) 空间应用 - 空间包含查询(输入多边形 包含 表内空间对象)》](../201711/20171107_45.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 43 - (OLTP+OLAP) unlogged table 含索引多表批量写入》](../201711/20171107_44.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 42 - (OLTP+OLAP) unlogged table 不含索引多表批量写入》](../201711/20171107_43.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 41 - (OLTP+OLAP) 含索引多表批量写入》](../201711/20171107_42.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 40 - (OLTP+OLAP) 不含索引多表批量写入》](../201711/20171107_41.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 39 - (OLTP+OLAP) logged & unlogged table 含索引多表单点写入》](../201711/20171107_40.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 38 - (OLTP+OLAP) logged & unlogged table 不含索引多表单点写入》](../201711/20171107_39.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 37 - (OLTP+OLAP) 含索引单表批量写入》](../201711/20171107_38.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 36 - (OLTP+OLAP) 不含索引单表批量写入》](../201711/20171107_37.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 35 - (OLTP+OLAP) 含索引单表单点写入》](../201711/20171107_36.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 34 - (OLTP+OLAP) 不含索引单表单点写入》](../201711/20171107_35.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 33 - (OLAP) 物联网 - 线性字段区间实时统计》](../201711/20171107_34.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 32 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(JSON + 函数流式计算)》](../201711/20171107_33.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 31 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(读写大吞吐并测)》](../201711/20171107_32.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 30 - (OLTP) 秒杀 - 高并发单点更新》](../201711/20171107_31.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 29 - (OLTP) 空间应用 - 高并发空间位置更新（含空间索引）》](../201711/20171107_30.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 28 - (OLTP) 高并发点更新》](../201711/20171107_29.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 27 - (OLTP) 物联网 - FEED日志, 流式处理 与 阅后即焚 (CTE)》](../201711/20171107_28.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 26 - (OLTP) NOT IN、NOT EXISTS 查询》](../201711/20171107_27.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 25 - (OLTP) IN , EXISTS 查询》](../201711/20171107_26.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 24 - (OLTP) 物联网 - 时序数据并发写入(含时序索引BRIN)》](../201711/20171107_25.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 23 - (OLAP) 并行计算》](../201711/20171107_24.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 22 - (OLTP) merge insert|upsert|insert on conflict|合并写入》](../201711/20171107_23.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 21 - (OLTP+OLAP) 排序、建索引》](../201711/20171107_22.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 20 - (OLAP) 用户画像圈人场景 - 多个字段任意组合条件筛选与透视》](../201711/20171107_21.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 19 - (OLAP) 用户画像圈人场景 - 数组相交查询与聚合》](../201711/20171107_20.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 18 - (OLAP) 用户画像圈人场景 - 数组包含查询与聚合》](../201711/20171107_19.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 17 - (OLTP) 数组相似查询》](../201711/20171107_18.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 16 - (OLTP) 文本特征向量 - 相似特征(海明...)查询》](../201711/20171107_17.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 15 - (OLTP) 物联网 - 查询一个时序区间的数据》](../201711/20171107_16.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 14 - (OLTP) 字符串搜索 - 全文检索》](../201711/20171107_15.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 13 - (OLTP) 字符串搜索 - 相似查询》](../201711/20171107_14.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 12 - (OLTP) 字符串搜索 - 前后模糊查询》](../201711/20171107_13.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 11 - (OLTP) 字符串搜索 - 后缀查询》](../201711/20171107_12.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 10 - (OLTP) 字符串搜索 - 前缀查询》](../201711/20171107_11.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 9 - (OLTP) 字符串模糊查询 - 含索引实时写入》](../201711/20171107_10.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 8 - (OLTP) 多值类型(数组)含索引实时写入》](../201711/20171107_09.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 7 - (OLTP) 全文检索 - 含索引实时写入》](../201711/20171107_08.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 6 - (OLTP) 空间应用 - KNN查询（搜索附近对象，由近到远排序输出）》](../201711/20171107_07.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 5 - (OLTP) 空间应用 - 空间包含查询(表内多边形 包含 输入空间对象)》](../201711/20171107_06.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 4 - (OLAP) 大表OUTER JOIN统计查询》](../201711/20171107_05.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 3 - (OLAP) 大表JOIN统计查询》](../201711/20171107_04.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 2 - (OLTP) 多表JOIN》](../201711/20171107_03.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 1 - (OLTP) 点查》](../201711/20171107_02.md)    
- [《沉浸式学习PostgreSQL|PolarDB 12: 如何快速构建 海量 逼真 测试数据》](../202309/20230906_02.md)    
- [《PostgreSQL 如何快速构建 海量 逼真 测试数据》](../201711/20171121_01.md)    
man pgbench  
tpc-b  
```  
postgres@6f60081d4ace:~$ pgbench -i -s 10  
dropping old tables...  
NOTICE:  table "pgbench_accounts" does not exist, skipping  
NOTICE:  table "pgbench_branches" does not exist, skipping  
NOTICE:  table "pgbench_history" does not exist, skipping  
NOTICE:  table "pgbench_tellers" does not exist, skipping  
creating tables...  
generating data (client-side)...  
1000000 of 1000000 tuples (100%) done (elapsed 0.75 s, remaining 0.00 s)  
vacuuming...  
creating primary keys...  
done in 1.96 s (drop tables 0.00 s, create tables 0.02 s, client-side generate 0.78 s, vacuum 0.28 s, primary keys 0.88 s).  
postgres@6f60081d4ace:~$ pgbench -M prepared -n -r -P 1 -c 4 -j 4 -T 10 -S  
pgbench (14.9 (Debian 14.9-1.pgdg110+1))  
progress: 1.0 s, 30933.3 tps, lat 0.128 ms stddev 0.043  
progress: 2.0 s, 33331.9 tps, lat 0.120 ms stddev 0.037  
progress: 3.0 s, 32953.7 tps, lat 0.121 ms stddev 0.036  
progress: 4.0 s, 33335.1 tps, lat 0.120 ms stddev 0.034  
progress: 5.0 s, 31687.2 tps, lat 0.126 ms stddev 0.044  
progress: 6.0 s, 32090.9 tps, lat 0.124 ms stddev 0.042  
progress: 7.0 s, 33384.9 tps, lat 0.120 ms stddev 0.038  
progress: 8.0 s, 32202.6 tps, lat 0.124 ms stddev 0.040  
progress: 9.0 s, 31151.3 tps, lat 0.128 ms stddev 0.041  
transaction type:   
scaling factor: 10  
query mode: prepared  
number of clients: 4  
number of threads: 4  
duration: 10 s  
number of transactions actually processed: 320073  
latency average = 0.125 ms  
latency stddev = 0.041 ms  
initial connection time = 4.823 ms  
tps = 32020.662222 (without initial connection time)  
statement latencies in milliseconds:  
         0.001  \set aid random(1, 100000 * :scale)  
         0.124  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
```  
自定义测试脚本:  
```  
create unlogged table t_bench(id serial primary key, gid int, info text, ts timestamp);  
vi t.sql  
\set gid random(1,1000)  
insert into t_bench(gid,info,ts) values (:gid, random()::text, now());  
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 4 -j 4 -T 10  
postgres@6f60081d4ace:~$ pgbench -M prepared -n -r -P 1 -f ./t.sql -c 4 -j 4 -T 10  
pgbench (14.9 (Debian 14.9-1.pgdg110+1))  
progress: 1.0 s, 27538.6 tps, lat 0.144 ms stddev 0.061  
progress: 2.0 s, 27973.0 tps, lat 0.143 ms stddev 0.041  
progress: 3.0 s, 27437.5 tps, lat 0.145 ms stddev 0.043  
progress: 4.0 s, 27998.6 tps, lat 0.143 ms stddev 0.042  
progress: 5.0 s, 28008.2 tps, lat 0.142 ms stddev 0.045  
progress: 6.0 s, 28242.1 tps, lat 0.141 ms stddev 0.062  
progress: 7.0 s, 28113.7 tps, lat 0.142 ms stddev 0.067  
progress: 8.0 s, 28360.3 tps, lat 0.141 ms stddev 0.040  
progress: 9.0 s, 27479.7 tps, lat 0.145 ms stddev 0.046  
transaction type: ./t.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 4  
number of threads: 4  
duration: 10 s  
number of transactions actually processed: 276617  
latency average = 0.144 ms  
latency stddev = 0.051 ms  
initial connection time = 4.494 ms  
tps = 27673.170529 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set gid random(1,1000)  
         0.144  insert into t_bench(gid,info,ts) values (:gid, random()::text, now());  
```  
#### 90 查看活跃会话  
[《PostgreSQL DBA最常用SQL》](../202005/20200509_02.md)    
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)    
```  
postgres=# select now(),state,datname,usename,wait_event_type,wait_event,query from pg_stat_activity where state in ('active', 'fastpath function call');      
-[ RECORD 1 ]---+-----------------------------------------------------------------------------------------------------------------------------------------------  
now             | 2023-11-11 06:36:28.51324+00  
state           | active  
datname         | postgres  
usename         | postgres  
wait_event_type |   
wait_event      |   
query           | select now(),state,datname,usename,wait_event_type,wait_event,query from pg_stat_activity where state in ('active', 'fastpath function call');  
```  
#### 91 查看TOP SQL  
[《PostgreSQL 如何查找TOP SQL (例如IO消耗最高的SQL) (包含SQL优化内容) - 珍藏级 - 数据库慢、卡死、连接爆增、慢查询多、OOM、crash、in recovery、崩溃等怎么办?怎么优化?怎么诊断?》](../201704/20170424_06.md)    
最耗时 SQL. 依赖pg_stat_statements插件   
单次调用最耗时 SQL TOP 5      
```      
select userid::regrole, dbid, query from pg_stat_statements order by mean_exec_time desc limit 5;      
```    
```  
 userid | dbid  |                                                       query                                                         
--------+-------+-------------------------------------------------------------------------------------------------------------------  
 r1     | 16388 | truncate table t_lock  
 r1     | 16388 | create index on tbl using gin (gid, c1 gin_trgm_ops, c2 gin_trgm_ops, c3 gin_trgm_ops)  
 r1     | 16388 | insert into tbl_ts select id,ts,to_tsvector(ts) from (select generate_series($1,$2) id, gen_rand_text($3) ts) t  
 r1     | 16388 | insert into t_big select generate_series($1,$2), md5(random()::text), random()*$3, random()*$4, clock_timestamp()  
 r1     | 16388 | insert into tbl (gid,c1,c2,c3,ts)                                                                                +  
        |       | select random()*$1, gen_hanzi($2), gen_hanzi($3), gen_hanzi($4), clock_timestamp()                               +  
        |       | from generate_series($5,$6)  
(5 rows)  
```    
**总最耗时 SQL TOP 5(最需要关注的是这个)**      
```      
select userid::regrole, dbid, query from pg_stat_statements order by total_exec_time desc limit 5;      
```    
```  
 userid | dbid  |                                                       query                                                         
--------+-------+-------------------------------------------------------------------------------------------------------------------  
 r1     | 16388 | truncate table t_lock  
 r1     | 16388 | insert into tbl (gid,c1,c2,c3,ts)                                                                                +  