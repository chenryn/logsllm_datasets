### Leakage Analysis and Address Bus Interactions

The leakage identified in this study is attributed to interactions through the address bus. Specifically, Listing 6 highlights the first segment of the code that corresponds to samples (700, 440) in Figure 7e. We confirmed this leakage through correlation-based testing against actual share values and their combinations.

In the `ldrb` instruction at Line 4, the registers used for addressing each carry one share. Our investigation revealed that sample 440 originates from this point, while the missing share is provided by the instruction corresponding to sample 700. Both points exhibit high correlation with the share values, indicating that this leakage is observable as second-order leakage. This pattern was further validated by reproducing the same effect in a separate fixed vs. random experiment, which involved only two shares used in an `ldrb` instruction for addresses. The experiment showed significant first-order leakage at 200,000 traces.

Currently, our tooling does not detect address leakage, making it impossible to correct this code. Additionally, we suspect that the leakage may be due to the specific threshold implementation algorithm used, and thus, addressing this issue is beyond the scope of this work.

### Tools for Leakage Analysis

We now present the performance of our second-order analysis tools. These tools were run on a desktop computer equipped with an Intel Core i9-10900K CPU and 32 GB of memory. We utilized 10 threads for the analysis, and the number of threads can be adjusted to fit the underlying hardware. The thread count is determined by the equal-sized splits along the sample axis, given by \( S(S + 1) \div 2 \), where \( S \) is the number of equal-sized splits. For our runs, \( S \) was set to 4. Without parallelization, the runtime would be 8 times slower if run in a single thread, as 4 out of 10 threads perform half of the work.

We performed bivariate analysis on four cryptographic implementations, collecting 2 million traces from real experiments. The results are presented in the heatmaps shown in Figure 7, and the detailed findings are summarized in Table 3.

### Conclusions

Since the introduction of side-channel attacks, the security of embedded device implementations has been under intense scrutiny and constant threat. Even with theoretically sound measures such as masking, practical implementations often exhibit unintended leakages due to hardware interactions. Manual evaluation and fixing of such "leaky" implementations have been the norm, although some automatic countermeasures have been developed, primarily targeting univariate leakage.

In this work, we aimed to automate the detection and application of fixes for high-order secure implementations through multivariate analysis. We demonstrated that it is possible to fix almost all detected leakage in three second-order masked implementations using our root cause analysis. Furthermore, we showed that our methodology is also applicable to third-order analysis, representing a significant improvement over previous automatic countermeasure methods due to its simplicity.

### Acknowledgements

We thank the anonymous reviewers for their insightful comments and recommendations. This work was supported by the ARC Discovery Early Career Researcher Award (DE200101577), ARC Discovery Projects (DP200102364 and DP210102670), the Blavatnik ICRC at Tel-Aviv University, the European Commission through the ERC Starting Grant 805031 (EPOQUE) of Peter Schwabe, and gifts from Facebook, Google, and Intel. Parts of this work were carried out while Yuval Yarom was affiliated with CSIROâ€™s Data61.

### References

[References are listed as provided, with no changes made to the original citations.]

---

This revised text aims to provide a clear, coherent, and professional presentation of the research findings and methodology.