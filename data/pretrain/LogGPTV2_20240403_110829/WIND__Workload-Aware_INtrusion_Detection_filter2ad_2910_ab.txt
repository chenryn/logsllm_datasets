the traﬃc is from the Thursday on the fourth week of 99 DARPA dataset (99-
test-w4-thu). Figure 2 shows a similar graph, using the same set of rules on
a border router in a large academic network. The graphs show that checking
the destination port rejects the maximum number of rules, which is followed
by destination IP address and then by the check that determines whether the
packet is from a client. The source IP address is fourth in the list for the border
router traﬃc and seventh in the DARPA dataset. After this, most other protocol
ﬁelds reject a small number of rules. Therefore, the graphs show that the rule
set and the traﬃc mix cause varying number of rules to be rejected by diﬀerent
protocol ﬁelds.
 0
 200
 400
 600
 800
 1000
 1200
 1400
 1600
 1800
avg. num. of rules rejected
CheckDstPort
CheckDstIp
CheckFromClient
CheckSrcIp
CheckSrcPort
IcmpTypeCheck
CheckFromServer
IcmpCodeCheck
CheckTcpFlags
IcmpIdCheck
CheckDsizeEq
CheckDsizeGT
IpIdCheckEq
CheckFragBits
IcmpSeqCheck
CheckTcpSeqEq
CheckTcpAckEq
CheckIpOptions
CheckDsizeLT
CheckTtleq
IpSameCheck
TcpWinCheckEq
CheckTtlGT
Fig. 2. Average number of rules (out of 2, 059) rejected by checking diﬀerent protocol
ﬁelds for data from the border router of a large academic network
Now, checking whether a payload contains a particular string is a costly op-
eration, but checking the value of a protocol ﬁeld is cheap. So, it is prefer-
able to check protocol ﬁelds to reduce the number of applicable rules. To use
multiple protocol ﬁelds for reducing the applicable rules, the rules have to be
pre-processed in a hierarchical structure in which each internal node checks a
protocol ﬁeld and then divides the rules by the values of the protocol ﬁeld. Fi-
nally, the leaf node is associated with a set of rules and a corresponding data
structure for evaluating multiple patterns speciﬁed in the rules. We are agnostic
WIND: Workload-Aware INtrusion Detection
297
destination
port
21
23
25
53
80
........
client
check
From
Client
destination
IP
Home
Net
source
IP
Ext
Net
client
check
From
Client
Rules at the leaf
Generic
Fig. 3. An example evaluation tree that checks protocol ﬁelds to determine the set of
rules for matching an incoming packet
to the multi-pattern search algorithm and the only objective of this hierarchi-
cal evaluation is to reduce the number of applicable rules, so that a packet is
matched with as few rules as possible.
Figure 3 shows an example of an evaluation tree in which protocol ﬁelds are
hierarchically evaluated to determine the set of applicable rules. It ﬁrst checks
for destination port. If the destination port matches a value for which the set
of rules is maintained then those groups of rules are further analyzed, or else
the generic set of rules is picked. If the destination port is 21, the connection
table is checked to determine if the packet came from the client who initiated
the connection, and the corresponding rules are picked. If the destination port
is 80, then the destination IP address of the packet is checked. Then, depending
on whether the packet is destined to the Home Network or not, the correct set
of rules are picked to further evaluate on the packet. However, maintaining a
naive hierarchical index structure, in which every speciﬁc value of a protocol
ﬁeld is separated, consumes a signiﬁcant amount of memory for the following
two reasons:
1. Groups require memory: Multiple patterns from a set of rules have to be
searched in a payload in only one pass of the payload. Therefore, additional
data structures are maintained for fast multi-pattern matching. This struc-
ture can be a hash table as in the case of the Wu-Manber [11] algorithm,
or a state table as in the case of the Aho-Corasick [10] algorithm. These
structures consume a signiﬁcant amount of memory.
2. Rules are duplicated across groups: If groups are formed by composing
two protocol ﬁelds hierarchically, then the number of distinct groups may
increase signiﬁcantly. For example, assume that the rules are ﬁrst divided by
destination port, and then each group so formed is further divided by source
298
S. Sinha, F. Jahanian, and J.M. Patel
port. A rule that is speciﬁc in source port but matches any destination
port has to be included in all groups with a particular destination port. If
the groups that are separated by destination port are further divided by
source port, then separate source port groups would be created within all
the destination port groups. For a set of rules with n source port groups and
m destination port groups, the worst number of groups formed, when rules
are hierarchically arranged by the two protocol ﬁelds, is n × m.
To investigate the memory consumed when rules are grouped hierarchically
by diﬀerent protocol ﬁelds, we instrumented Snort to construct this structure
for a given list of protocol ﬁelds. We then measured the memory consumed for
diﬀerent combinations of protocol ﬁelds. Figure 4 shows the memory consumed
when diﬀerent protocol ﬁelds are hierarchically arranged, and a separate bin is
maintained for every speciﬁc value in a protocol ﬁeld (trace data was 99-w4-thu
from DARPA dataset and the 2059 rules of Snort-2.1.3 distribution). This shows
that the memory consumed by the combination of destination port and client
check is 50% more than just the destination port. The memory required for the
combination of destination port and destination IP address is two times, and for
the combinations of destination port, destination IP address and client check, the
memory consumed is three times than only using the base destination port. From
the graph, the increase in memory is evident when the rules are hierarchically
grouped by destination port and source port. Therefore, constructing such a
hierarchy immediately raises two important questions:
memory usage (MB)
 0
 100
 200
 300
 400
 500
 600
destination_port
actual_snort
destination_port+from_client
destination_port+destination_ip
destination_port+destination_ip+from_client
destination_port+source_port
Fig. 4. Memory usage when rules are hierarchically arranged by protocol ﬁelds in the
speciﬁed order using the DARPA dataset (99-w4-thu)
WIND: Workload-Aware INtrusion Detection
299
1. What is the order in which the protocol ﬁelds are evaluated in the hierarchy?
2. What are the values of a protocol ﬁeld for which groups are maintained?
In what follows, we ﬁrst present a mathematical description of this problem,
analyzing the cost and beneﬁt of diﬀerent orders of protocol ﬁelds and the ﬁeld
values for which the rules are maintained. We then argue that these questions
can be answered by capturing properties of the workload, namely the traﬃc-mix
characteristics and the input rule set characteristics.
3.2 Formal Description
1, vi
2, . . . , vi
j1 ) ∧ (Fr2 = vr2
j2 ) ∧ . . . ∧ (Fri = vri
Consider n protocol ﬁelds F1, F2, . . . , Fn. Let vi
In this section, we formulate the problem of determining the order of evaluation
and the values of protocol ﬁelds for which the groups are maintained. As argued
earlier, the cost in maintaining a separate group is mostly the memory consumed
by the group. Intuitively, the beneﬁt obtained by maintaining a group of rules
can be measured by how many rules this group separates from the rule set
and how frequently this group is rejected for an incoming packet. We begin by
formalizing the problem.
mi be mi speciﬁc
values of the protocol ﬁeld Fi present in various rules in the rule set. Let P =
(Fr1 = vr1
) be the predicate for a group
that is picked only when the packet matches speciﬁc values for i protocol ﬁelds,
and f(P) denote the probability that the protocol ﬁelds for an incoming packet
matches the predicate P, i.e., vr1
j2 for protocol ﬁeld Fr2,
for protocol ﬁeld Fri. f(P) actually captures statistics on the network
. . . , vri
ji
traﬃc. The probability that an incoming packet does not have the values for
protocol ﬁelds as the predicate P is 1 − f(P). Let the beneﬁt of rejecting rule R
be measured by improvement of bR in run time. Then, every time a packet does
not have the values for protocol ﬁelds as P, beneﬁt of
R=rule with value P bR is
obtained by maintaining a separate group of rules with values P. Therefore, the
overall beneﬁt of creating a group with speciﬁc values for protocol ﬁelds present
in the predicate P includes traﬃc characteristics in f(P) and rule properties in
the rule set as:
j1 for protocol ﬁeld Fr1, vr2
ji
(cid:2)
(1 − f(P)) ×
(cid:3)
bR
R=rule with value P
(1)
Assume that c(P) is the memory cost of creating a group for a set of rules that
satisﬁes the predicate P. Then, the problem of an eﬀective hierarchical structure
is to determine the set of groups such that they maximize the beneﬁt measured
by improvement in run time for a given total cost, measured by the total amount
of memory that is available. Formally, the objective is to determine m and m
distinct predicates P1,P2, . . . ,Pm that maximizes
[(1 − f(Pi)) ×
m(cid:3)
i=1
(cid:3)
R=rule with value Pi
bR]
(2)
300
S. Sinha, F. Jahanian, and J.M. Patel
with the cost constraint
c(Pi) ≤ maximum memory
m(cid:3)
i=1
(3)
3.3 Our Approach
In this section, we design an algorithm that captures the properties of input rules
and traﬃc characteristics to produce an eﬀective set of rule groups, separated
by values of protocol ﬁelds. These groups are then arranged in a hierarchical
evaluation structure, which determines the order in which protocol ﬁelds are
evaluated on an incoming packet. We begin with some assumptions that simplify
the above mathematical model for a realistic treatment and then present our
algorithm.
Assumptions. It is not easy to precisely determine the cost of creating a data
structure for matching multiple patterns and the absolute beneﬁt achieved by
rejecting a rule. For some exact substring-match algorithms (like Aho-Corasick),
the memory space occupied by the data structure may not grow linearly with
the number of patterns. For hash-based algorithms, the memory consumed is
independent of the number of patterns. This makes estimating cost for a multi-
pattern-matching algorithm diﬃcult. At the same time, for most algorithms that
perform multi-pattern matching, it is hard to estimate the beneﬁt of excluding a
single pattern. Therefore, we will make two simplifying assumptions that allows
us to easily compute the cost and beneﬁt:
1. The cost of creating a multi-pattern data structure for any group of patterns
is constant. This assumption is valid for hash-based matching algorithms,
like Wu-Manber, that allocate ﬁxed hash space. However, this assumption
is incorrect for the Aho-Corasick algorithm in which the required space may
increase with the increase in the number of patterns.
2. The beneﬁt of rejecting any rule is a one-unit improvement in run time (i.e.,
bR = 1) except for rules that have content of maximum length one. The rules
that have content length one signiﬁcantly degrade multi-pattern matching
and should be separated if possible. Therefore, rules with a content length
of one are assigned a large beneﬁt (mathematically inﬁnity). It is possible
that other patterns may adversely impact the performance in multi-pattern
search, but we choose to ignore such interactions for simplicity.
It is important to note that our assumptions help us to easily estimate the cost
and beneﬁt of creating a group, and more accurate estimates will only improve
our scheme.
The Algorithm. Instead of specifying a ﬁxed memory cost and then maxi-
mizing the beneﬁt, we specify the trade-oﬀ between the cost and the beneﬁt.
We say that any speciﬁc value of a protocol ﬁeld that rejects at least a mini-
mum THRESHOLD number of rules should be assigned a separate group and
WIND: Workload-Aware INtrusion Detection
301
hence, memory space. This speciﬁcation allows us to more easily tune real-time
performance.
The mathematical model allows us to compare two groups with speciﬁc values
for a number of protocol ﬁelds. The problem is then to determine a set of groups
in which each group rejects at least a THRESHOLD number of rules and the
set maximizes the overall beneﬁt. However, this may require generating all pos-
sible sets, which is computationally infeasible. Therefore, we do not attempt to
produce an optimal set of groups, but instead to discover possible groups heuris-
tically. The main intuition behind our algorithm is to place all rules in a bin
and iteratively split that bin by the protocol ﬁeld that produces the maximum
beneﬁt, and at each split separate values of the chosen protocol ﬁeld that reject
at least a THRESHOLD number of rules on average.
j
(cid:2)
j) and
R=rule with value P bR reduces to SFi=vi
We now explain our algorithm in detail. First, all rules are placed in a bin.
Then, a few packets are read from the network and protocol ﬁelds in each rule are
evaluated. Then, the beneﬁt obtained by a value in a protocol ﬁeld is computed
j of the protocol ﬁeld Fi, f(P) reduces
using the beneﬁt Equation 1. For value vi
where SP indicates
to f(Fi = vi
the number of rules with protocol ﬁeld values speciﬁed by the predicate P. This
simpliﬁcation is possible because bR is one. The overall beneﬁt of a protocol
ﬁeld is the sum of beneﬁt of all values, and the protocol ﬁeld is chosen that
produces maximum beneﬁt. Then groups are formed for each speciﬁc value in
the protocol ﬁeld that rejects at least THRESHOLD number of rules, or has
a rule with content length one. Then, we partition the bin into those speciﬁc
values and recursively compute other protocol ﬁelds for each of these bins. We
stop splitting a bin if none of the protocol ﬁelds can reject at least THRESHOLD
number of rules.
When we partition a bin into speciﬁc values, we replicate a rule that may