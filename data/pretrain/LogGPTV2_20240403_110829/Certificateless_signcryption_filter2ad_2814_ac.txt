Γ
(B, q2
D + 2qDq2 + q2),
where qT = q1 + qX + qSK + 2qD + 2. Here q1, q2, qX, qSK and qD are the
maximum number of queries that the adversary could place to H1, H2, partial
private key extraction, private key extraction and de-signcryption oracles.
Proof. On receiving the GBDH challenge tuple (Γ, aP, bP, cP ), where the gener-
ator is P , algorithm B sets Mpk := aP and params = (Γ, Mpk) and passes them
on to A. Algorithm B chooses an index (cid:96) uniformly at random in {1, . . . , qT},
where qT is as in the statement of the Lemma, and answers various oracle queries
as follows:
H1 Queries: On the i-th non-repeat query ID, if i (cid:54)= (cid:96) algorithm B chooses
r ∈ Zp uniformly at random and sets QID = rP . It then adds (i, ID, r) to a list
L1 which is initially empty and returns QID. Otherwise, it returns QID(cid:96) = bP
and adds ((cid:96), ID,⊥) to L1. From this point on on we denote the (cid:96)-th non-repeat
identity queried to this oracle with ID(cid:96).
Extract Partial Secret Key Queries: For each new query ID, algorithm B
calls H1 on ID and obtains (i, ID, r). If i = (cid:96) then B aborts the simulation.
Otherwise, B returns D = raP .
Request Public Key Queries: For each query ID, algorithm B checks in list
LK, which is initially empty, if there is a tuple (ID, PK, x). If so, then B returns
PK. Otherwise, B generates a new key pair, updates the list LK, and returns the
public key.
Replace Public Key Queries: On input (ID, PK) algorithm B inserts/updates
LK with tuple (ID, PK,⊥).
Extract Private Key Queries: For each new query ID, algorithm B calls H1
on ID and obtains (i, ID, r). If i = (cid:96) then B aborts the simulation. Otherwise, B
searches LK for the entry (ID, PK, x), generating a new key pair if this does not
exist, and returns (x, raP ).
H3 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value t in Zp, updates an initially empty list L3 with the input, t and tP and
returns tP .
10
H4 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value s in Zp, updates an initially empty list L4 with the input, s and sP and
returns sP .
H2 Queries: For each new query (U, T, R, ID, PK), algorithm B proceeds as
follows:
1. It checks if the decision bilinear Diﬃe-Hellman oracle returns 1 when queried
with the tuple (aP, bP, cP, T ). If this is the case, algorithm B returns T and
stops.
2. Algorithm B goes through the list L2 with entries (U, (cid:63), R, ID, PK, h), for
diﬀerent values of h, such that the decision bilinear Diﬃe-Hellman oracle
returns 1 when queried on the tuple (aP, bP, U, T ). Note that in this case
ID = ID(cid:96). If such a tuple exists, it returns h (and replaces the symbol (cid:63) with
T ).
3. If B reaches this point of execution, it returns a random h and updates the
list L2, which is initially empty, with a tuple containing the input and return
values.
De-signcryption Queries: For each new query (U, V, W, ID, ID(cid:48)) algorithm B
proceeds as follows:
1. It executes the veriﬁcation part of the de-signcryption algorithm obtaining
QID and PK by calling the H1 and request public key oracles. It returns ⊥ if
veriﬁcation does not succeed.
2. It calculates R := x(cid:48)U, obtaining x(cid:48) (and hence PK(cid:48)) from either the adversary
or by calling the request public key oracle.
(cid:54)= ID(cid:96), it calculates T = e(rU, Mpk), where (j, ID(cid:48), r) is obtained by
3. If ID(cid:48)
calling H1 on ID(cid:48), and completes de-signcryption in the usual way placing a
query on H2.
4. If ID(cid:48) = ID(cid:96) then the pairing cannot be calculated. In order to return a con-
sistent answer, B goes through L2 and looks for a tuple (U, T, R, ID(cid:96), PK(cid:48), h),
for diﬀerent values of T , such that the decision bilinear Diﬃe-Hellman oracle
returns 1 when queried on (aP, bP, U, T ). If such an entry exists, the correct
pairing value is found and B decrypts using the hash value h.
5. If B reaches this point of execution, it places the entry (U, (cid:63), R, ID(cid:96), PK(cid:48), h)
for a random h on list L2 and decrypts using this h. The symbol (cid:63) denotes
an unknown value of pairing. Note that the identity component of all entries
with a (cid:63) is ID(cid:96).
S and ID∗
Eventually, A outputs two messages (m0, m1) and two identities ID∗
R.
Algorithm B places a query on H1 with input ID∗
R. If the index of ID∗
R is not (cid:96),
algorithm B fails. Otherwise it proceeds to construct a challenge as follows. It
obtains from LK the public key PK corresponding to ID∗
S. Then it sets U∗ := cP ,
selects a random bit σ and a random hash value h∗ and sets V ∗ := mσ ⊕ h∗. The
component W ∗ is set to be DS +rH +xSH(cid:48) = DS +tcP +sPK where t is obtained
from L3, s is obtained from L4 and DS is calculated by calling the partial secret
11
S (cid:54)= ID∗
R the partial secret key
S. Note that, since ID∗
key extraction oracle on ID∗
extraction oracle simulation always give B the correct value of DS.
In the second stage, A’s queries are answered as before. Eventually, A will output
its guess as to which message is signcrypted inside the challenge. Since (cid:96) is
independent of adversary’s view, and the list L1 can be easily seen to have at
most qT elements, with probability 1/qT the adversary will output an identity ID(cid:96)
with index (cid:96). If this event occurs, the simulation is perfect unless the adversary
queries H2 on the challenge-related tuple (U∗, T ∗, R∗, ID(cid:96), PK∗). Since the hash
function H2 is modelled as a random oracle, the adversary will not have any
advantage if this tuple does not appear on L2. However, if this happens, B will
win the game due to the ﬁrst step in the simulation of H2. The Lemma follows
from this observation and the fact that the total number of decision bilinear
(cid:3)
Diﬃe-Hellman oracle calls that B makes is at most q2
D + 2qDq2 + q2.
Lemma 4. Under the CDH assumption in G1 no PPT attacker A has non-
negligible advantage in winning the IND-iCCA-II game against the scheme pro-
posed above, when all hash functions are modelled as random oracles. More pre-
cisely, there exists an algorithm B which uses A to solve the CDH problem such
that:
AdvIND−iCCA−II
CLSC
(A) ≤ qT AdvCDH
Γ (B),
where qT = qP K + qRP K + qSK +2qD +2. Here qP K and qRP K are the maximum
number of queries that the adversary could place to request public key and replace
public key oracles and qSK and qD are as before.
Proof. On receiving the CDH challenge tuple (Γ, aP, bP ), with generator P ,
algorithm B generates a master key pair (Msk, Mpk) and sets params := (Γ, Mpk)
and passes these on to A. Algorithm B chooses an index (cid:96) uniformly at random
in {1, . . . , qT}, with qT as in the statement of the Lemma, and answers various
oracle queries as follows:
H1 Queries: On the non-repeat query ID algorithm B chooses r ∈ Zp uniformly
at random and sets QID = rP . It then adds (ID, r) to a list L1 which is initially
empty and returns QID.
Request Public Key Queries: On the i-th non-repeat query ID, if i (cid:54)= (cid:96), algo-
rithm B generates a new key pair (x, PK), updates the list LK with (i, ID, x, PK).
If i = (cid:96) algorithm B returns aP and adds ((cid:96), ID, aP,⊥) to LK. From this point
on on we denote the (cid:96)-th non-repeat identity queried to this oracle with ID(cid:96).
Replace Public Key Queries: On input (ID, PK) on the i-th non-repeat iden-
tity ID algorithm B inserts/updates LK with tuple (i, ID, PK,⊥). If i = (cid:96) then
B aborts the simulation.
Extract Private Key Queries: For each new query ID, B calls request public
key on ID obtaining (i, ID, PK, x). If i = (cid:96), algorithm B aborts the simulation.
Otherwise, it calls H1 on ID and gets (ID, r). It returns (x, rMskP ).
12
H3 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value t in Zp, updates an initially empty list L3 with the input, t and tP and
returns tP .
H4 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value s in Zp, updates an initially empty list L4 with the input, s and sP and
returns sP .
H2 Queries: For each new query (U, T, R, ID, PK), algorithm B proceeds as
follows:
1. It checks if e(aP, bP ) = e(P, R). If so, B returns R and stops.
2. Algorithm B goes through the list L2 looking for entries (U, T, (cid:63), ID, PK, h),
such that e(U, bP ) = e(P, R). Note that in this case ID = ID(cid:96). If such a tuple
exists, it returns h (and replaces the symbol (cid:63) with R).
3. If B reaches this point of execution, it returns a random h and updates the
list L2, which is initially empty, with a tuple containing the input and return
values.
De-signcryption Queries: For each new query (U, V, W, ID, ID(cid:48)), algorithm B
proceeds as follows:
1. It executes the veriﬁcation part of the de-signcryption algorithm obtaining
QID and PK by calling H1 and request public key oracles. It returns ⊥ if the
veriﬁcation does not succeed.
2. It calculates T = e(U, r(cid:48)Mpk), where (ID(cid:48), r(cid:48)) is obtained from H1
3. If ID(cid:48)
(cid:54)= ID(cid:96), it calculates R := x(cid:48)U, where (j, ID(cid:48), PK(cid:48), x(cid:48)) is obtained by
calling the request public key oracle on ID(cid:48), and x(cid:48) is possibly received from
the adversary. It completes de-signcryption in the usual way by placing a
query on H2.
4. If ID(cid:48) = ID(cid:96), the correct value of R cannot be computed. To answer the query
consistently, B goes through L2 and looks for a tuple (U, T, R, ID(cid:96), PK(cid:48), h), for
diﬀerent values of R, such that e(U, bP ) = e(P, R). If such an entry exists,
the correct value of R is found, and B decrypts using h.
5. If B reaches this point of execution, B places the entry (U, T, (cid:63), ID(cid:48), PK(cid:48), h)
for a random h on list L2 and decrypts using this h.
Eventually, A outputs two messages (m0, m1) and two identities ID∗
S and
ID∗
R. Algorithm B queries the request public key oracle on ID∗
R and receives
R, PK∗, x∗). If j (cid:54)= (cid:96), it fails. Otherwise it proceeds to construct a challenge
(j, ID∗
as follows. It obtains the public key PK for ID∗
S by calling the request public key
oracle. It sets U∗ = bP , selects a random bit σ and a random hash value h∗
and sets V ∗ = mσ ⊕ h∗. The component W ∗ is set to be DS + rH + xSH(cid:48) =
DS + tcP + sPK, where DS is obtained by calling the extract partial secret key
oracle8, t is obtained from L3 and s is obtained from L4.
In the second stage, A’s queries are answered as before. Eventually, A will
output its guess as to which message is signcrypted inside the challenge. Since (cid:96) is
∗
∗
8 Unlike Lemma 3 note that the simulation is possible for ID
S = ID
R.
13
independent of adversary’s view, with probability 1/qT the adversary will output
an identity ID∗
R with index (cid:96). If this event occurs, the simulation is perfect unless
the challenge-related tuple (U∗, T ∗, R∗, ID(cid:96), PK∗) is queried from H2. However,
since the hash function H2 is modelled as a random oracle, the adversary will
not have any advantage if this entry does not appear on L2 list and, in this case,
B will have won the game due to its simulation of H2. The Lemma follows from
this observation and the fact that the maximum length of the list LK is qT , as
(cid:3)
stated in the Lemma.
Theorem 2. The certiﬁcateless signcryption scheme above is sUF-iCMA-I/II
secure, in the random oracle model, under the GDH(cid:48) assumption in G1.
This theorem follows from Lemmas 2, 5 and 6.
(cid:48)
Γ (B, q2
CLSC
(A) ≤ qT AdvGDH
Lemma 5. Under the GDH(cid:48) assumption in G1, no PPT attacker A has non-
negligible advantage in winning the sUF-iCMA-I(cid:48) game against the scheme pro-
posed above, when all hash functions are modelled as random oracles. More pre-
cisely, there exists an algorithm B which uses A to solve the GDH(cid:48) problem such
that:
AdvsUF−iCMA−I
(cid:48)
D +2qDq2)+(qSC(qSC +qD +q3 +1)+2)/2κ,
where qT = q1 + qX + qSK + 2qD + 2qSC + 1. Here q3 and qSC is the maximum
number of queries that the adversary could place to the H3 and signcryption
oracles and q1, qX, qSK and qD are as before.
Proof. To prove this Lemma, we construct an algorithm B which uses A to
solve the GDH(cid:48) problem over G1. Algorithm B receives a GDH(cid:48) problem instance
(Γ, aP, bP ), with generator P , it sets Mpk := aP and provides params := (Γ, Mpk)
to A. Algorithm B then chooses an index (cid:96) uniformly at random in {1, . . . , qT},
where qT is as in the statement of the Lemma, and answers various oracle queries
as follows:
H1 Queries: On the i-th non-repeat query ID, if i (cid:54)= (cid:96) algorithm B chooses
r ∈ Zp uniformly at random and sets QID = rP . It then adds (i, ID, r) to a list
L1 which is initially empty and returns QID. Otherwise, it returns QID(cid:96) = bP
and adds ((cid:96), ID,⊥) to L1. From this point on on we denote the (cid:96)-th non-repeat
identity queried to this oracle with ID(cid:96).
Extract Partial Secret Key Queries: For each new query ID, algorithm B
calls H1 on ID and obtains (i, ID, r). If i = (cid:96) then B aborts the simulation.
Otherwise, B returns D = raP .
Request Public Key Queries: For each query ID, algorithm B checks in list
LK, which is initially empty, if there is a tuple (ID, PK, x). If so, then B returns
PK. Otherwise, B generates a new key pair, updates the list LK, and returns the
public key.
Replace Public Key Queries: On input (ID, PK) algorithm B inserts/updates
LK with tuple (ID, PK,⊥).
14
Extract Private Key Queries: For each new query ID, algorithm B calls H1
on ID and obtains (i, ID, r). If i = (cid:96) then B aborts the simulation. Otherwise, B
searches LK for the entry (ID, PK, x), generating a new key pair if this does not
exist, and returns (x, raP ).