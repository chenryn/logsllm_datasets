20
Technology always come from 
humanity!!! 
21
 Provide the browser to run web application in native code. 
 Based on Google’s sandbox, it would just drop 5% 
performance compared to original native application. 
 Could be available in Chrome Browser already. 
 The Native Client SDK only support the C/C++ on x86 32/64 
bits platform.  
 Provide Pepper APIs (derived from Mozilla NPAPI). Pepper 
v2 added more APIs. 
Native Client(Nacl) - a vision of the 
future 
22
Hack Google's Native Client and get 
$8,192 
http://www.zdnet.com/blog/google/hack-
googles-native-client-and-get-8192/1295 
23
 Data integrity 
 Native Client's sandbox works by validating the untrusted 
code (the compiled Native Client module) before running it 
 No support for process creation / subprocesses 
 You can call pthread 
 No support for raw TCP/UDP sockets (websockets for TCP 
and peer connect for UDP) 
 No unsafe instructions 
 inline assembly must be compatible with the Native Client 
validator (could use ncval utility to check) 
Security of Native Client  
http://code.google.com/p/nativeclient/issues/list 
24
How Native Client Work? 
Chromium 
Browser 
Browsing WebPage 
with Native Client. 
Launch nacl64.exe to Execute 
the NaCl Executable (*.NEXE) file. 
25
Main Process and Dynamic Library  
Chromium 
Browser 
C:\Users\loda\AppData\Local\Temp 
6934.Tmp (=libc.so.3c8d1f2e) 
6922.Tmp (=libdl.so.3c8d1f2e) 
6933.tmp (=libgcc_s.so.1) 
6912.tmp (=libpthread.so.3c8d1f2e) 
67D8.tmp (=runnable-ld.so) 
66AE.tmp (=hello_loda.nmf) 
6901.Tmp (= hello_loda_x86_64.nexe) 
Server provided 
Native Client Page 
lib64/libc.so.3c8d1f2e 
lib64/libdl.so.3c8d1f2e 
lib64/libgcc_s.so.1 
lib64/libpthread.so.3c8d1f2e 
lib64/runnable-ld.so 
hello_loda.html 
hello_loda.nmf 
hello_loda_x86_32.nexe 
hello_loda_x86_64.nexe 
Download the main process and 
dynamic run-time libraries. 
26
Dynamic libraries Inheritance 
relationship 
runnable-ld.so =(ld-nacl-x86-64.so.1) 
libc.so.3c8d1f2e 
libdl.so.3c8d1f2e 
libgcc_s.so.1 
libpthread.so.3c8d1f2e 
Hello Loda Process (.NEXE) 
27
 PNaCl (pronounced "pinnacle") 
 Based on LLVM to provided an ISA-neutral format for 
compiled NaCl modules supporting a wide variety of target 
platforms without recompilation from source. 
 Support the x86-32, x86-64 and ARM instruction sets now. 
 Still under the security and performance properties of 
Native Client. 
Portable Native Client (PNaCl) 
28
LLVM and PNaCl 
Refer from Google’s ‘PNaCl Portable Native Client Executables ’ document. 
29
Libtest.pso 
libtest.c 
app.c 
App.bc 
App.pexe 
Libtest.so 
pnacl-translate 
App.nexe 
pnacl-translate 
Translate to 
native code 
Execute under Native Client 
RunTime Environment 
PNaCl Shared Libraries 
http://www.chromium.org/nativeclient/pnacl/pnacl-shared-libraries-final-picture 
30
 Trust with Authentication 
 Such as the ActiveX technology in Microsoft Windows, it would 
download the native web application plug-in the browser (MS 
Internet Explorer). User must authorize the application to run in 
browser. 
 User-ID based Access Control  
 Android Application Sandbox use Linux user-based protection to 
identify and isolate application resources. Each Android 
application runs  as that user in a separate process, and cannot 
interact with each other under the limited access to the 
operating system.. 
Before SFI 
31
User Space 
Application 
#1 
User Space 
Application 
#2 
User Space 
Application 
#3 
Kernel Space 
Device Drivers and Kernel Modules 
UnTrust Code 
Trust Code 
Application could use kernel 
provided services by System Call 
Process individual 
memory space 
Process individual 
memory space 
Process individual 
memory space 
RPC 
RPC 
General User/Kernel Space Protection 
32
 CFI (CISC Fault Isolation) 
 Based on x86 Code/Data Segment Register to reduce 
the overhead, NaCl CFI would increase around 2% 
overhead.  
 SFI 
 NaCl SFI  would increase 5% overhead in Cortex A9 out-
of-order ARM Processor, and 7% overhead in x86_64 
Processor. 
Fault Isolation 
1,ARM instruction length is fixed to 32-bits or 16bits 
                                                                          (depend on ARMv32,Thumb or Thumb2 ISA) 
2,X86 instruction length is variable from 1 to 1x bytes. 
33
Target 
Address 
Data/Code Dedicated Register= 
(Target Address & And-Mask Register) | Segment Identifier Dedicated Register 
UnTrust Code 
Region 
Address 
SandBoxing 
Address 
SandBoxing 
CISC Fault Isolation 
34
User Space 
SFI 
Trust Code 
Kernel Space 
Device Drivers and Kernel Modules 
UnTrust Code 
Trust Code 
Application could use kernel 
provided services by System Call 
Process individual memory space 
User Space 
SFI 
UnTrust 
Code 
Call 
Gate 
Return 
Gate 
Running in Software Fault Isolation Model 
Software Fault Isolation 
35
 PNaCl would download the whole execution environment (with 
dynamic libraries) 
 Would use x86_64 environment as the verification sample. 
 Each x86_64 App would use 4GB memory space. 
 But for ARM App, it would only use 0-1GB memory space. 
 x86_64  R15 Registers would be defined as “Designated Register 
RZP” (Reserved Zero-address base Pointer),and initiate as a  4GB 
aligned base address to map the  UnTrust Memory space. For the 
UnTrust Code, R15 Registers is read-only. 
SFI SandBox 
36
 The modification of 64bits RSP/RBP would be replaced by a 
set instructions to limit the 64bits RSP/RBP would be limited 
in allowed 32bits range. 
RSP/RBP Register Operation 
...... 
10001e0: 8b 2c 24                       mov (%rsp),%ebp 
10001e3: 4a 8d 6c 3d 00           lea 0x0(%rbp,%r15,1),%rbp 
10001e8: 83 c4 08                      add $0x8,%esp 
10001eb: 4a 8d 24 3c                 lea (%rsp,%r15,1),%rsp 
..... 
37
 The function target address would be 32 bytes alignment, 
and limit the target address to allowed 32bits range by R15. 
 For the internal UnTrust function directly calling, it doesn’t 
need to filter by the R15 
 vRet=987*testA(111); 
Function Call 
….. 
 1000498:       83 e0 e0                and    $0xffffffe0,%eax 
 100049b:       4c 01 f8                add    %r15,%rax 
 100049e:       ff d0                      callq  *%rax 
….. 
….  
10004bb:       e8 c0 fe ff ff          callq  1000380  
10004c0:       69 c0 db 03 00 00       imul   $0x3db,%eax,%eax 
…. 
38
 The function return address would be 32 bytes alignment, 
and limit the target address to allowed 32bits range by R15. 
Function Return  
…..  
10004e8:       83 e1 e0                and    $0xffffffe0,%ecx 
 10004eb:       4c 01 f9                add    %r15,%rcx 
 10004ee:       ff e1                       jmpq   *%rcx 
….. 
39
For Hacker’s View 
40
 LLVM support IR and could run on variable processor 
platforms. 
 Portable native client + LLVM should be a good 
candidate to play role in Android and Browser usage. 
(in SFI SandBox) 
 It is a new security protection model, use user-space 
Sandbox to run native code and validate the native 
instruction without kernel-level privilege involved. 
Conclusion 
41
Appendix 
42
 From compiled execution code 
 LLVM transfer to 100% native code. Dalvik VM need to based 
on the JIT Trace-Run Counter. 
 From the JIT native-code re-used 
 After Dalvik VM process restart, the  JIT Trace-Run procedures 
need to perform again. But after LLVM application transfer to 
100% native code, it could run as native application always.  
 From CPU run-time loading 
 Dalvik application need to calculate the Trance-Run Counter in 
run-time and perform JIT. LLVM-based native application 
could save this extra CPU loading. 
The differences of Dalvik and LLVM (1/2) 
43
 From the run-time memory footprint 
 Dalvik application convert to JIT native code would need extra 
memory as JIT-Cache. If user use Clang to compile C code as 
BitCode and then use LLVM compiler to compile the BitCode to 
native assembly, it could save more run-time memory usage. 
 If Dalvik application transfer the loading to JNI native .so library, it 
would need extra loading for developer to provide .so for different 
target processors’ instruction. 
 From the Storage usage 
 General Dalvik application need a original APK with .dex file and 
extra .odex file in dalvik-cache. But LLVM application doesn’t need 
it. 
 From the system security view of point 
 LLVM support pointer/function-pointer/inline-assembly and have 
the more potential security concern than Java. 
The differences of Dalvik and LLVM (2/2) 
44
 NaCl is salt  
 Download the native client source code 
 http://code.google.com/p/nativeclient/wiki/Source?tm=4 
 cd $NACL_ROOT 
 gclient config 
http://src.chromium.org/native_client/trunk/src/native_cl
ient 
 gclient sync 
NaCl Source Code 
http://code.google.com/p/nativeclient/issues/list 
45
Native Client Page Content 
.... 
    ..... 
{ 
  "files": { 
    "libgcc_s.so.1": { 
      "x86-64": { 
        "url": "lib64/libgcc_s.so.1" 
      }, 
     ..... 
    }, 
    "main.nexe": { 
      "x86-64": { 
        "url": "hello_loda_x86_64.nexe" 
      }, 
      ..... 
    }, 
    "libdl.so.3c8d1f2e": { 
      ..... 
    }, 
    "libc.so.3c8d1f2e": { 
    ..... 
    }, 
    "libpthread.so.3c8d1f2e": { 
     ..... 
    }, 
  "program": { 
     "x86-64": { 
      "url": "lib64/runnable-ld.so" 
    }, 
   ..... 
  } 
} 
46
End 
47