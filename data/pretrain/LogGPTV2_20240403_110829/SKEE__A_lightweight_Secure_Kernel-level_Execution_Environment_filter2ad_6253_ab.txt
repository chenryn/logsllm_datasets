istic method to switch the context between the kernel
and the isolated environment.
Providing the isolated environment with the required
capabilities to do effective kernel monitoring and
protection.
Full prototype implementation and rigorous evaluation
of SKEE using popular mobile devices.
•
•
•
•
This paper is organized as follows: Section II provides
background information. Section III discusses threat model,
security guarantees and assumptions. Section IV presents
SKEE in detail. Section V presents prototype implementation
and evaluation. Section VI presents related work. Section VII
concludes this paper with some future research directions.
II. BACKGROUND
SKEE’s isolation employs basic MMU operations. This
section gives a necessary background on how the MMU
controls virtual memory translation on ARM.
Memory Management in 32-bit ARMv7: On ARMv7, control-
ling the MMU is done through special instructions that move
the value of general purpose registers to system management
registers of coprocessor 15 (CP15).
3
  Table I.
EFFECT OF TTBCR.N ON ADDRESS TRANSLATION ON 32-BIT
ARMV7 USING SHORT DESCRIPTOR FORMAT
TTBCR.N value
0b000
0b001
0b010
0b011
0b100
0b101
0b110
0b111
Starting address of TTBR1 translation
TTBR1 not used
0x8000 0000
0x4000 0000
0x2000 0000
0x1000 0000
0x0800 0000
0x0400 0000
0x0200 0000
Memory translation on 32-bit ARMv7 involves three MMU
control registers: Translation Table Base Control Register
(TTBCR), Translation Table Base Register 0 (TTBR0) and
Translation Table Base Register 1 (TTBR1). TTBR0 and
TTBR1 point to different sets of memory translation tables.
TTBCR chooses which of the two sets is used when translating
a particular memory address. TTBCR contains a 3 bit called
TTBCR.N that determines the virtual address range translated
by each of the two registers as shown in Figure 1.
Memory translation on ARMv7 supports both short de-
scriptor and long descriptor translation table formats. For the
sake of clarity, we only focus on the short descriptor translation
table format. In this format, the effect of TTBCR.N is shown in
Table I. If the value of TTBCR.N is 0, then TTBR1 is not used,
otherwise both TTBR0 and TTBR1 are used. TTBR0 memory
translation tables are used to map the virtual address range
that starts from address 0x0 to the starting address of TTBR1’s
translation range, which is always smaller than 0x8000 0000
(2GB) as shown in Table I.
Memory Management in 64-bit ARMv8: On ARMv8, a.k.a.
AArch64, the 64-bit virtual address range is split into two
subranges. The ﬁrst, which is translated using TTBR0, is at the
bottom of the address space. The second, which is translated
using TTBR1, is at the top of the address space. A typical
use of this arrangement is that the kernel is mapped at the
top subrange of the virtual address space using TTBR1 tables,
while the user processes is mapped at the bottom subrange of
the virtual address space using TTBR0 tables.
On ARMv8, the MMU control registers can be changed by
the MSR instruction, which moves the value of general purpose
registers to system registers. The MSR instruction can use the
Zero Register (XZR) to move the value zero to any of the
special registers.
Address Space Identiﬁer (ASID): Memory translation tables
also control if a certain virtual memory mapping is either
global or non-global using the non-Global (nG) bit in transla-
tion table descriptors
A global virtual memory page is available for all processes
on the system, so a single cache entry can exist for this page
translation in the Translation Lookaside Buffer (TLB).
A non-global virtual memory page is process speciﬁc,
meaning it is associated with a speciﬁc ASID. Hence, multiple
TLB entries can exist for the same page translation. The soft-
ware is expected so switch the ASID when switching between
different processes. Only TLB entries that are associated with
the current ASID are available to the CPU.
On ARMv7, the current ASID is deﬁned by the Context
4
ID Register (CONTEXTIDR). On ARMv8, the ASID is deﬁned
by the translation table base registers. The ASID is used to
enhance the performance by eliminating the need of ﬂushing
the TLB on every process switch.
Memory Management in Virtualization Layer: ARM’s virtu-
alization extensions provide an additional mode of privileged
execution to host the hypervisor. This privileged mode is also
equipped with an additional memory translation layer, called
Second Stage (S2) address translation, which is pointed to
by the vttbr register. If S2 memory address translation is
enabled,
then physical memory access from the guest OS
is treated as Intermediate Physical Addresses (IPA) and is
translated to actual physical addresses using the S2 memory
translation tables. S2 memory address translation is used by the
hypervisor to customize the physical address range available
to the guest OS.
III. THREAT MODEL, SECURITY GUARANTEES AND
ASSUMPTIONS
Threat model: SKEE considers all software attacks against the
kernel. It assumes attackers can successfully exploit existing
kernel vulnerability. For the sake of presentation, attacks
against the kernel are classiﬁed into three classes.
The ﬁrst class aims at modifying, amending, or relocating
the kernel executable. SKEE prevents this class of attacks as
an essential part of its secure operations. Just using SKEE on
a system eliminates the threat of running unveriﬁed malicious
code in the privileged kernel mode.
The second class aims at exploiting a vulnerability to alter
the kernel data or control ﬂow so that existing kernel code
shows unexpected malicious behavior. These attacks can cause
a wide range of damage to the system. One example of these
threats is to escalate the privilege of malicious user processes
by modifying the kernel data that deﬁnes process credentials.
Another example of these threats is return oriented attacks [29],
[47] that allow an attacker to run malicious logic using existing
kernel code. SKEE provides a safe environment that hosts
security tools to detect
these exploits. The exact anomaly
detection technique or the integrity properties to be measured
is determined by the security tool as an orthogonal system and
is out of scope of this paper.
The third class aims at compromising kernel monitor
and protection tools by compromising the SKEE isolated
environment. SKEE guarantees that these attacks can neither
compromise the isolation nor bypass the monitoring.
Security Guarantees: SKEE provides two main security guar-
antees to the isolated environment. First, it prohibits the kernel
from modifying the memory layout or access permission of the
system. As a result, even if an attack completely compromises
the kernel, it would not be able to revoke the access protection
of the isolated environment. Second, SKEE guarantees that
switching from the potentially compromised kernel
to the
isolated environment exclusively passes through a strictly
controlled switch gate. As a result, the isolated environment
can safely inspect input parameters passed from the kernel
for potential security threats. For example, SKEE inspects
requested changes to the memory layout to conﬁrm that they
do not violate the guaranteed isolation.
Given these two security guarantees, SKEE uses its con-
trol of the system memory layout to prevent attackers from
bypassing the monitor.
Assumptions: SKEE assumes the whole system is loaded
securely. Hence, the isolated environment is setup securely
during boot up time. This process is straightforward using se-
cure boot. Intuitively, secure boot only guarantees the integrity
of the kernel during the boot up process. It cannot guarantee
the integrity of the kernel after the system runs and starts to
interact with potential attackers.
SKEE also assumes that the kernel supports W⊕X memory
mapping (i.e., it does not use memory pages that include both
data and code). SKEE assumes that the hardware platform
implements the Privileged eXecute Never (PXN) memory
access permission as deﬁned by the ARM architecture.
On 32-bit ARMv7 architecture, SKEE requires the kernel
to only use TTBR0 for mapping the OS memory, while
leaving TTBR1 to be exclusively used by SKEE. Moreover,
it assumes the lowest 2GB of the virtual address space is
exclusively used by non-privileged user space code. These two
requirements do not affect the OS functionality because both
TTBR0 and TTBR1 map the same virtual address range, so
only TTBR0 is sufﬁcient to map the whole system memory.
Most commodity OSes use at least 2GB of memory for the
user address space. In fact, Linux satisﬁes both requirements
in its default conﬁgurations because it relies on a 3GB user
space to 1GB kernel space split, which cannot be achieved if
TTBR1 is in use.
this requirement
On 64-bit ARMv8 architecture, SKEE requires the pres-
ence of a memory page at physical address 0x0. It assumes
this particular page is exclusively used by SKEE. The same
address range is usually used to place the ROM that starts
the system boot process. Nevertheless,
is
easily fulﬁlled using virtualization to provide an accessible
intermediate physical address 0x0 using S2 memory translation
tables as mentioned in Section II. The S2 translation remaps
this intermediate physical address to another existing physical
address. The OS is forced to translate through the S2 tables,
so it always sees this page as address 0x0. Higher privileged
software still sees the original physical address 0x0 and can
still use it
in the booting process. Using virtualization in
this case does not conﬂict with SKEE’s objective. Other than
setting up the S2 translation tables, the virtualization layer is
completely passive and does not interfere in any SKEE related
operations.
IV. SKEE DESIGN
This section presents the design of SKEE. The main goal
is to provide a lightweight execution environment to enable a
security tool to run in isolation from the kernel without active
involvement of higher privileged system components, such as
TrustZone or virtualization layer.
The basic idea behind SKEE is to create a new self-
protected virtual address space that hosts the isolated execution
environment. This virtual address space is created as a part of
the system boot up sequence. As mentioned is Section III,
SKEE assumes the presence of secure boot, which guarantees
that the system boots in a known secure state. The secure boot
Figure 2. An overview of the SKEE approach
sequence is modiﬁed so that it creates two separate address
spaces for the kernel and SKEE, as shown in Figure 2. The
boot sequence also loads the veriﬁed binaries of both the kernel
and SKEE in their relevant locations.
After the secure boot sequence, the system becomes subject
to potential attacks. These attacks cannot compromise SKEE,
which runs in its own address space. Hence, a security tool
hosted by SKEE would be able to continuously monitor the
kernel to detect, and possibly eliminate, these attacks.
To securely achieve this objective, there are three main
requirements that need to be met; isolation, secure context
switching and the ability to monitor and protect the kernel.
In the following, we ﬁrst present how SKEE achieves the
required isolation by preventing the kernel from accessing this
protected address space. Then, we present how SKEE achieves
secure context switching on both 32-bit ARMv7 and 64-
bit ARMv8 architectures. Afterwards, we discuss how SKEE
uses these features to achieve the required monitoring and
protection of the kernel. Finally, we summarize the security
guarantees provided by SKEE.
A. SKEE Isolation
The kernel accesses physical memory through virtual mem-
ory mappings deﬁned by memory translation tables, a.k.a.
page tables. These mappings also set the access permission
corresponding to each translation. The presence of a translation
table entry that maps to a physical address is a key precondition
to the kernel’s ability to access this physical address. If this
precondition is not met, this physical address is not accessible
to the kernel. Based on this precondition, SKEE uses a two-
step solution to prevent
the kernel from accessing certain
physical memory ranges.
Creating a Protected Address Space: The ﬁrst step is to have
separate address spaces for SKEE and the kernel. As shown in
Figure 3, the kernel address space, which is controlled by the
kernel’s memory translation tables, is instrumented to enforce
the following rules: 1) removing all entries that map to either
the SKEE environment or the kernel’s memory translation
tables, 2) mapping the kernel code and the SKEE switch gate
5
  as read-only, 3) restricting all other memory areas, including
kernel data and user level memory, from executing privileged
code using the PXN bit. Enforcing these rules prevents the
kernel from modifying its own code or accessing SKEE’s
address space. It also prevents the kernel from modifying its
own memory translation tables to escape this protection.
On the other hand, SKEE’s address space has valid map-
pings of the entire memory. However,
the kernel code is
not allowed to execute so that the kernel is prevented from
regaining control while the SKEE address space is active. The
switch gate is also mapped in the SKEE address space and
has execution permission to allow SKEE to jump back to the
kernel securely.
Restrict Kernel Access to the MMU: To prevent the kernel
from violating the address space separation, it is only allowed
to use instrumented memory translation tables. This objective
is achieved by restricting the kernel from modifying certain
MMU registers. In particular, the kernel is not allowed to
change translation table base registers.
SKEE removes certain control instructions from the kernel
code and replaces them with hooks that jump to the switch
gate. Identifying speciﬁc instructions among the kernel binary
is straightforward (i.e., without false positives or false nega-
tives) because ARM uses ﬁxed size aligned instruction set.
This technique requires the following four conditions:
1) these instructions are only allowed to execute in the privi-
leged mode, 2) the instrumented kernel is the only privileged
code in its own address space, 3) the kernel code is mapped
read-only, and 4) the instrumented kernel code is instruments
to remove all executable words that match the op codes of
these instructions. If all these four conditions are satisﬁed,
then the kernel cannot execute these instructions unless they
are emulated by SKEE. The same technique was used by TZ-
RKP [11] and SPROPES [25].
After the system is booted,
the Linux kernel supports
Loadable Kernel Modules (LKM) to be dynamically loaded.
LKM code runs in the same privilege level as the kernel.
SKEE supports LKMs to be loaded as long as they stick to the
W⊕X mapping so that they are not be used to inject unknown
instructions to the kernel. LKMs have to be loaded by SKEE
because it controls the whole system’s memory mappings.
Hence, SKEE is able to verify that the LKM code region
does not contain any of the privileged instructions that were
removed from the kernel.
B. SKEE Secure Context Switching
To allow secure switching between SKEE and the kernel,
the switching mechanism prevents the kernel from regaining
control while SKEE’s address space is accessible.
As shown in Figure 2, context switching is done through
a special switch gate. This gate is designed to be atomic,
deterministic and exclusive. Having these properties is essential
to preserve the isolation between the two environments.
Atomic Execution through the Switch Gate: Before the
kernel enters the switch gate, the SKEE address space is not