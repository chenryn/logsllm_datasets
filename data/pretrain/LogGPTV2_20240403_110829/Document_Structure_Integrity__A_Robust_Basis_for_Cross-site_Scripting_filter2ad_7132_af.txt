### Our Techniques for Minimizing the Impact of DSI-Compliant Web Pages

Our techniques aim to minimize the impact of rendering DSI (Data Sanitization and Isolation) compliant web pages on existing web browsers, facilitating a smooth transition to DSI compliance. However, it is also important to investigate schemes that seamlessly integrate DSI while ensuring static DSI. Recent work by Louw et al. [21] addresses the problem of isolating untrusted content in static HTML markup. They compare prevalent isolation mechanisms in HTML and conclude that there is no single solution that fits all scenarios. In contrast, our approach outlines techniques that address both static and dynamic isolation of untrusted data. We hope that our work will provide additional insights for the development of new language primitives for isolation. Additionally, false positives are a concern for usability. While we did not encounter any false positives in our preliminary evaluation and testing, this does not rule out the possibility in a full-scale deployment.

### Related Work

XSS (Cross-Site Scripting) defense techniques can be broadly classified into detection and prevention methods. Prevention techniques have been discussed in Section 8; in this section, we focus on detection techniques and other related work.

#### XSS Detection Techniques

XSS detection techniques aim to identify vulnerabilities in web application code that could lead to security breaches. Most vulnerability detection techniques have focused on server-side application code. We classify these techniques based on their analysis nature:

- **Static and Quasi-Static Techniques**: Static analysis [13, 16, 23] and model checking techniques [22] aim to identify cases where web application code fails to sanitize input before output. Many static analysis tools assume that once data passes through a custom sanitization check, such as PHP's `htmlspecialchars` function, it is safe. However, Balzarotti et al. [3] demonstrate that XSS attacks can still occur even if certain sanitization is performed due to deficiencies in the sanitization routines. They propose a combined static and dynamic analysis to find such security bugs.

- **Server-Side Dynamic Detection Techniques**: These techniques address the distributed nature of server-side checks. Taint-tracking [44, 5, 27, 30] centralizes sanitization checks at the output interface using taint metadata. These methods assume that server-side processing is consistent with client-side rendering, which is a significant design difference. Taint-tracking can also be used as a prevention technique. Our work extends taint-tracking to the client side to eliminate inconsistencies between server and browser and to safeguard client-side code. Some practical challenges we share with previous taint-tracking work include tracking taint correctly through multiple components of the web server platform efficiently. Cross-component taint tracking [25] and efficient taint-tracking designs [33, 31, 19] for server-side mitigation are active areas of research that our architecture can benefit from.

Other works have targeted fortifying the web browser's same-origin policy enforcement mechanisms to isolate entities from different domains. Browser-side taint tracking is used to fortify domain isolation [8] and tighten sharing mechanisms such as iframe communication [4]. These approaches address a class of XSS attacks that arise from purely browser-side bugs or weak enforcement policies in isolating web content across different pages. In contrast, our paper focuses on reflected and stored XSS attacks. MashupOS [41] discusses isolation and communication primitives for web applications to specify trust associated with external code from untrusted sources. Our work introduces primitives for isolating and confining inline untrusted data embedded in web pages.

Finally, parser-level isolation is a widely used mechanism. Prepared statements [9] in SQL are built on this principle, and Su et al. [35] demonstrated a parser-level defense against SQL injection attacks. For today's web applications, the problem is significantly different, as untrusted data is processed dynamically on both the client browser and the web server. Randomization techniques have been proposed for SQL injection attacks [6], control hijacking in binary code [17], and even informal proposals for confinement in HTML using the `<iframe>` tag [7, 21]. Our work offers a comprehensive framework that improves the security properties of the `<iframe>` element for static DSI (as explained in Section 4) and provides dynamic integrity as well.

### Conclusion

We proposed a new approach that models XSS as a privilege escalation vulnerability rather than a sanitization problem. This approach employs parser-level isolation to confine user-generated data throughout the lifetime of the web application. We demonstrated that this scheme is practically feasible in an architecture that is backward-compatible with current browsers. Our empirical evaluation over 5,328 real-world vulnerable websites shows that our default policy thwarts over 98% of attacks, and we explained how flexible server-side policies can be used in conjunction to provide robust XSS defense with no false positives.

### Acknowledgments

We are grateful to Adam Barth, Chris Karloff, and David Wagner for their valuable feedback and insightful discussions during our design. We also thank Robert Oâ€™Callahan for providing us with the Mozilla Firefox test suite and Nikhil Swamy for his contributions during the writing process. We appreciate the useful feedback and suggestions from our anonymous reviewers on experiments and improvements. This work is supported by the NSF TRUST grant number CCF-0424422, NSF TC grant number 0311808, NSF CAREER grant number 0448452, and the NSF Detection grant number 0627511.

### References

[References remain unchanged]

### Appendix: Unicode Whitespace Points

Table 1 lists the Unicode points used to implement the delimiters as discussed in Section 6.

| Unicode Point | Description |
|---------------|-------------|
| U+0009       | Tab         |
| U+000A       | Line Feed   |
| U+000B       | Vertical Tab|
| U+000C       | Form Feed   |
| U+000D       | Carriage Return |
| U+0020       | Space       |
| U+00A0       | No-Break Space |
| U+2000       | En Quad     |
| U+2001       | Em Quad     |
| U+2002       | En Space    |
| U+2003       | Em Space    |
| U+2004       | Three-Per-Em Space |
| U+2005       | Four-Per-Em Space |
| U+2006       | Six-Per-Em Space  |
| U+2007       | Figure Space |
| U+2008       | Punctuation Space |
| U+2009       | Thin Space  |
| U+200A       | Hair Space  |
| U+2028       | Line Separator |
| U+2029       | Paragraph Separator |

**Table 1: Unicode Whitespace Points**