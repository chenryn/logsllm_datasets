Our techniques aim to minimize the impact of rendering
DSI compliant web pages on existing web browsers for ease
of transition to DSI compliance; however, investigation of
schemes that integrate DSI seamlessly while ensuring static
DSI are important. Recent work but Louw et. al. formu-
lates the problem of isolation of untrusted content in static
HTML markup [21]; they present a comparison of prevalent
isolation mechanisms in HTML and show that there is no
single silver bullet. In contrast, we outline techniques that
address static as well as dynamic isolation of untrusted data.
We hope that our work provides additional insight for devel-
opment of newer language primitives for isolation. Finally,
false positives are another concern for usability. We did not
encounter false positives in our preliminary evaluation and
testing, but this not sufﬁcient to rule out its possibility in a
full-deployment of this scheme.
10 Related Work
XSS defense techniques can be largely classiﬁed into de-
tection techniques and prevention techniques. The latter
has been directly discussed in Section 8; in this section, we
discuss detection techniques and other work that relates to
ours.
XSS detection techniques focus on identifying holes in
web application code that could result in vulnerabilities.
Most of the vulnerability detection techniques have focused
on server-side application code. We classify them based on
the nature of the analysis, below.
• Static and Quasi-static techniques. Static analysis [13,
16, 23] and model checking techniques [22] aim to
identify cases where the web application code fails to
sanitize the input before output. Most static analy-
sis tools are equipped with the policy that once data
is passed through a custom sanity check, such as
htmpspecialchars PHP function, then the input
is safe. Balzarotti et al. [3] show that often XSS at-
tacks are possible even if the develop performs certain
sanitization on input data due to deﬁciencies in saniti-
zation routines. They also describe a combined static
and dynamic analysis to ﬁnd such security bugs.
• Server-side dynamic detection techniques have been
proposed to deal with the distributed nature of the
server side checks. Taint-tracking [44, 5, 27, 30] on the
server-side aims to centralize sanitization checks at the
output interface with the use of taint metadata. These
have relied on the assumption that server side process-
ing is consistent with client side rendering, which is
a signiﬁcant design difference. These can be used as
prevention techniques as well. Our work extends the
foundation of taint-tracking to client-side tracking to
eliminate difﬁculties of server-browser inconsistencies
and to safeguard client-side code as well. Some of the
practical challenges that we share with previous work
on taint-tracking are related to tracking taint correctly
through multiple components of the web server plat-
form efﬁciently. Cross-component taint tracking [25]
and efﬁcient designs of taint-tracking [33, 31, 19] for
server-side mitigation are an active area of research
which our architecture would readily beneﬁt from.
Several other works have targeted fortiﬁcation of web
browser’s same-origin policy enforcement mechanisms to
isolate entities from different domains. Browser-side taint
tracking is also used to fortify domain isolation [8], as
well as tightening the sharing mechanisms such as iframe
communication[4] and navigation. These address a class
of XSS attacks that arise out of purely browser-side bugs
or weak enforcement policies in isolating web content
across different web page, whereas in this paper, we have
analyzed the class of reﬂected and stored XSS attacks
only. MashupOS[41] discussed isolation and communica-
tion primitives for web applications to specify trust asso-
ciated with external code available from untrusted source.
Our work introduces primitives for isolation and conﬁne-
ment of inline untrusted data that is embedded in the web
page.
Finally, the idea of parser-level isolation is a pervasively
used mechanism. Prepared statements [9] in SQL are built
on this principle, and Su et al. demonstrated a parser-level
defense technique against SQL injection attacks[35]. As we
show, for today’s web applications the problem is signif-
icantly different than dealing with SQL, as untrusted data
is processed dynamically both on the client browser and
in the web server. The approach of using randomization
techniques has been proposed for SQL injection attacks [6],
control hijacking in binary code [17], and even in infor-
mal proposals for conﬁnement in HTML using 
tag [7, 21]. Our work offers a comprehensive framework
that improves on the security properties of  ele-
ment for static DSI (as explained in Section 4), and provides
dynamic integrity as well.
11 Conclusion
We proposed a new approach that models XSS as a priv-
ilege escalation vulnerability, as opposed to a sanitization
problem. It employs parser-level isolation for conﬁnement
of user-generated data through out the lifetime of the web
application. We showed this scheme is practically possible
in an architecture that is backwards compatible with current
browsers. Our empirical evaluation over 5,328 real-world
vulnerable web sites shows that our default policy thwarts
over 98% of the attacks, and we explained how ﬂexible
server-side policies could be used in conjunction, to provide
robust XSS defense with no false positives.
12 Acknowledgments
We are thankful to Adam Barth, Chris Karloff and David
Wagner for helpful feedback and insightful discussions dur-
ing our design. We also thank Robert O’Callahan for pro-
viding us with the Mozilla Firefox test suite and Nikhil
Swamy for discussions during writing. We are grateful
to our anonymous reviewers for useful feedback on ex-
periments and suggestions for improving our work. This
work is supported by the NSF TRUST grant number CCF-
0424422, NSF TC grant number 0311808, NSF CAREER
grant number 0448452, and the NSF Detection grant num-
ber 0627511.
References
[1] ab.
Apache HTTP server
benchmarking
tool.
http://httpd.apache.org/docs/2.0/
programs/ab.html.
[2] alexa.com.
Alexa top 500 sites.
http://www.
alexa.com/site/ds/top sites?ts mode=
global&lang=none, 2008.
[3] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic,
E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing
Static and Dynamic Analysis to Validate Sanitization in Web
Applications. In Proceedings of the IEEE Symposium on Se-
curity and Privacy, Oakland, CA, May 2008.
[4] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame
communication in browsers.
In Proceedings of the 17th
USENIX Security Symposium (USENIX Security 2008),
2008.
[5] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD: precise
dynamic prevention of cross-site scripting attacks. In Detec-
tion of Intrusions and Malware, and Vulnerability Assess-
ment, 2008.
[6] S. W. Boyd and A. D. Keromytis. Sqlrand: Preventing sql
injection attacks. In Proceedings of the 2nd Applied Cryp-
tography and Network Security (ACNS) Conference, pages
292–302, 2004.
[7] C. M. C. Brendan Eich.
Javascript: Mobility & ubiq-
http://kathrin.dagstuhl.
Presentation.
uity.
de/files/Materials/07/07091/07091.
EichBrendan.Slides.pdf.
[8] S. Chen, D. Ross, and Y.-M. Wang. An analysis of browser
domain-isolation bugs and a light-weight transparent de-
fense mechanism.
In Proceedings of the 14th ACM con-
ference on Computer and communications security, pages
2–11, New York, NY, USA, 2007. ACM.
[9] H. Fisk.
Prepared statements.
http://dev.
mysql.com/tech-resources/articles/4.
1/prepared-statements.html, 2004.
[10] M. V. Gundy and H. Chen. Noncespaces: using randomiza-
tion to enforce information ﬂow tracking and thwart cross-
site scripting attacks. 16th Annual Network & Distributed
System Security Symposium, 2009.
[11] R. Hansen. Clickjacking. http://ha.ckers.org/
blog/20081007/clickjacking-details/.
[12] R. Hansen. Xss cheat sheet. http://ha.ckers.org/
xss.html.
[13] Y. Huang, F. Yu, C. Hang, C. Tsai, D. Lee, and S. Kuo. Se-
curing web application code by static analysis and runtime
protection. DSN, 2004.
[19] L. C. Lam and T. Chiueh. A general dynamic information
ﬂow tracking framework for security applications. In Pro-
ceedings of the 22nd Annual Computer Security Applica-
tions Conference on Annual Computer Security Applications
Conference, 2006.
[20] J. Lavoie. Myspace.com -
intricate script
injection.
www.derkeiler.com/pdf/Mailing-Lists/securityfocus/vuln-
dev/2006-04/msg00016.pdf.
[21] M. T. Louw, P. Bisht, and V. Venkatakrishnan. Analysis of
hypertext isolation techniques for XSS prevention. Work-
shop on Web 2.0 Security and Privacy (W2SP), 2008.
[22] M. Martin and M. S. Lam. Automatic generation of XSS and
SQL injection attacks with goal-directed model checking. In
17th USENIX Security Symposium, 2008.
[23] M. C. Martin, V. B. Livshits, and M. S. Lam. Finding appli-
cation errors and security ﬂaws using PQL: a program query
language. In Object-Oriented Programming, Systems, Lan-
guages, and Applications, 2005.
[24] Mozilla Foundation.
Tp2 pageloader framecycle test.
http://mxr.mozilla.org/mozilla/source/
tools/performance/pageload/.
[25] S. Nanda, L.-C. Lam, and T. Chiueh. Dynamic multi-
process information ﬂow tracking for web application se-
curity. In Proceedings of the 8th ACM/IFIP/USENIX inter-
national conference on Middleware, 2007.
[26] Netcraft.
Banks hit by cross-frame phishing attacks.
http://news.netcraft.com/archives/2005/
03/17/banks hit by crossframe phishing
attacks.html, 2005.
[27] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and
D. Evans. Automatically hardening web applications using
precise tainting. 20th IFIP International Information Secu-
rity Conference, 2005.
[28] NoScript. Noscript. http://noscript.net/, 2008.
[29] S. D. Paola and G. Fedon. Subverting ajax. In CCC Confer-
ence, 2006.
[30] T. Pietraszek and C. V. Berghe. Defending against injection
attacks through context-sensitive string evaluation. In RAID,
2004.
[31] F. Qin, C. Wang, Z. Li, H. seop Kim, Y. Zhou, and Y. Wu.
Lift: A low-overhead practical information ﬂow tracking
system for detecting security attacks. In Proceedings of the
39th Annual IEEE/ACM International Symposium on Mi-
croarchitecture, 2006.
[32] Samy. I’m popular. Description of the MySpace worm by
[14] IE
8
Blog:
Security Vulnerability
IE
implementation.
& Defense.
and
technet.com/swi/archive/2008/08/18/
ie-8-xss-filter-architecture-implementation.
aspx, 2008.
Research
ﬁlter
architecture
http://blogs.
8 XSS
[15] T. Jim, N. Swamy, and M. Hicks. Beep: Browser-enforced
embedded policies. 16th International World World Web
Conference, 2007.
[16] N. Jovanovic, C. Kr¨ugel, and E. Kirda. Pixy: A static anal-
ysis tool for detecting web application vulnerabilities (short
paper). In IEEE Symposium on Security and Privacy, 2006.
[17] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering
code-injection attacks with instruction-set randomization. In
Proceedings of the 10th ACM conference on Computer and
communications security, 2003.
[18] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes:
a client-side solution for mitigating cross-site scripting at-
tacks. In Proceedings of the 2006 ACM symposium on Ap-
plied computing, 2006.
the author, including a technical explanation., Oct 2005.
[33] P. Saxena, R. Sekar, and V. Puranik. Efﬁcient ﬁne-grained
binary instrumentationwith applications to taint-tracking. In
Proceedings of the sixth annual IEEE/ACM international
symposium on Code generation and optimization, 2008.
[34] A. Sotirov. Blackbox reversing of XSS ﬁlters. RECON,
2008.
[35] Z. Su and G. Wassermann. The essence of command injec-
tion attacks in web applications. 2006.
[36] Symantec Corp. Symantec internet security threat report.
Technical report, Symantec Corp., April 2008.
[37] Unicode, Inc. Unicode character database. http://
unicode.org/Public/UNIDATA/PropList.txt,
2008.
[38] W.
Venema.
Taint
support
for
PHP.
ftp://ftp.porcupine.org/pub/php/php-5.2.3-taint-
20071103.README.html, 2007.
[39] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross-Site Scripting Prevention with Dy-
namic Data Tainting and Static Analysis.
In Proceeding
of the Network and Distributed System Security Symposium
(NDSS), San Diego, CA, February 2007.
[40] W3C. HTML 5 speciﬁcation. http://www.w3.org/
TR/html5/.
[44] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy en-
forcement: A practical approach to defeat a wide range of
attacks. USENIX Security Symposium, 2006.
A Unicode Whitespace Points
Table 1 contains the Unicode points used to implement
the delimiters as discussed in Section 6.
[41] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection
and communication abstractions for web browsers in mashu-
pos. In SOSP, 2007.
[42] Web Application
Security Consortium.
Web
2007.
security
project
application
http://www.webappsec.org/projects/
statistics/wasc wass 2007.pdf.
statistics
[43] XSSed.com. Famous XSS exploits. http://xssed.
com/archive/special=1, 2008.
U+0009 U+000A U+000B U+000C U+000D
U+2002
U+2001
U+0020 U+00A0 U+2000
U+2007
U+2005
U+2003 U+2004
U+2006
U+200A U+2028
U+2008 U+2009
U+2029
Table 1: Unicode Whitespace Points