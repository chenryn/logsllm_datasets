Field Boundary Fixed, Direction, Separator
Field Type
Field Keywords Position and value of the ﬁeld’s keywords
Direction, Non-Direction
Table 1: Field format attributes used in this paper.
application data. There are other protocol constants that do
not appear in the protocol application data and thus are not
keywords, such as the maximum length of a variable-length
ﬁeld, known to the parties but never sent over the network.
Extracting the keywords is important because they al-
low to diﬀerentiate which parts of the ﬁeld are protocol-
dependant and which are user or session dependant. This
information is useful for multiple problems such as ﬁnger-
print generation, application dialogue replay and error de-
tection. In addition, keywords can be used to map traﬃc to
speciﬁc protocols, which in turn can be used to identify tun-
neled protocols, such as P2P traﬃc over HTTP, and services
running on non-standard ports [21, 25].
2.2 Problem Deﬁnition
This paper deals with the problem of extracting the proto-
col message format. The protocol message format includes
multiple message formats. Our problem is then, given a
number of messages received by a program binary imple-
menting the protocol, to individually extract the message
format of each of those messages.
The main challenge in extracting the message format is
to ﬁnd the ﬁeld boundaries. Protocols include both ﬁxed-
length and variable-length ﬁelds. For ﬁxed-length ﬁelds, the
boundary is known a priori by the program. The diﬃculty is
to determine the boundary between consecutive ﬁxed-length
ﬁelds, to avoid joining two ﬁxed-length ﬁelds together or
splitting a single ﬁxed-length ﬁeld into two. We deal with
the problem of ﬁnding the boundary of ﬁxed-length ﬁelds in
Section 6.
For variable-length ﬁelds, the program needs to determine
the ﬁeld boundary dynamically. Here, the diﬃculty is that
protocols can use diﬀerent elements to mark the ﬁeld bound-
ary such as 1) direction ﬁelds, that store information about
the location of another target ﬁeld in the message, for ex-
ample length ﬁelds and pointer ﬁelds, and 2) separators, i.e.,
constant values that mark the boundary of the ﬁeld. Thus,
we ﬁrst need to locate these elements. We deal with the
problem of ﬁnding the boundary of variable-length ﬁelds us-
ing direction ﬁelds in Section 4.1, and using separators in
Section 5.1.
Another challenge in extracting the message format, is
to identify the keywords contained in each ﬁeld. We deal
with the problem of extracting the protocol keywords in Sec-
tion 5.2.
More complex properties: Polyglot extracts the mes-
sage format of a single message. However some properties
might require analyzing information about multiple mes-
sages simultaneously. For example, some protocols such as
HTTP allow some of their ﬁelds to be ordered diﬀerently.
We term a ﬁeld with this property to be a ﬂoating ﬁeld. This
in turn, means that keywords associated with a ﬂoating ﬁeld
can appear in diﬀerent positions in the message. Currently,
given two messages with the same keywords in diﬀerent po-
sitions, we can identify for each individual message what
keywords it contains. Clearly, without looking at multiple
messages, we cannot determine that the keywords (and their
associated ﬁelds) are ﬂoating, i.e., they can appear at diﬀer-
ent positions. Thus, we rely on an analyst to infer this kind
of properties when given the message formats for multiple
messages (possibly with keywords present in multiple diﬀer-
ent positions). We leave the automatic extraction of such
properties for future work.
To summarize, our problem statement is as follows:
Problem Deﬁnition: Given an implementation of a pro-
tocol in the form of a program binary and a message received
by that program, our problem is to output the message for-
mat, with no a priori knowledge about the protocol that the
message belongs to. Extracting the message format consists
of two main tasks: 1) ﬁnd the ﬁeld boundaries for ﬁxed-
length and variable-length ﬁelds, which includes identifying
the separators and direction ﬁelds, and 2) identify the key-
words in each ﬁeld.
3. APPROACH AND SYSTEM
ARCHITECTURE
In this section we present our approach and introduce the
system architecture of Polyglot.
Our approach, using dynamic analysis for protocol reverse
engineering, is based on a unique intuition—the way that an
implementation of a protocol processes the received applica-
tion data reveals a wealth of information about the protocol
message format. Using this intuition, we propose shadow-
ing, a new paradigm based on dynamically analyzing how a
program binary processes its input to extract the format of
the received application data.
To enable dynamic analysis for automatic protocol reverse
engineering, the high-level architecture of Polyglot has two
phases. First, we watch over the program execution as it
processes a given message. This phase generates a record
of the program’s processing, which contains all necessary
information about the execution. Second, we analyze the
record of the program’s processing and extract information
about the ﬁeld boundaries and the keywords that form the
basis for the message format.
Figure 1 shows the system architecture. The ﬁrst phase
is implemented by the execution monitor [37]. It takes as
input the program’s binary and the application data, and
dynamically monitors how the program processes the ap-
plication data. The output of the execution monitor is an
execution trace that contains a record of all the instructions
performed by the program. The execution trace forms the
input to our analysis in the second phase.
The execution monitor implements dynamic taint analy-
sis [13, 14, 15, 28, 34, 35].
In dynamic taint analysis, in-
put data of interest is marked (i.e., tainted) when it arrives
and any instruction that operates on the tainted data (e.g.,
moving it to another location or performing an arithmetic or
logical operation), propagates the taint information to the
destination. For our purposes, we taint any data received
from the network. Thus, the execution trace contains, for
each tainted register and memory location used in an in-
struction, the oﬀset positions that were used to compute its
value. For example, if the method ﬁeld in Figure 2 is moved
to a processor register (e.g., EAX), the register gets tainted
with positions 0 through 3, corresponding to the original
oﬀset in the received data. Dynamic taint analysis is well
understood and we provide its details in Appendix A.
In the second phase, we analyze the execution trace to
locate the ﬁeld boundaries and the keywords. Note that
currently our analysis is oﬄine (using the execution trace),
but it could also be performed online, integrated with the
execution monitor. This phase consists of four modules:
the separator, direction ﬁeld, keyword and message format
extraction modules, which we now describe.
First, the direction ﬁeld and the separator extraction mod-
ules take care of ﬁnding the boundaries of variable-length
ﬁelds. We introduce them in Sections 4.1 and 5.1 respec-
tively. Next, the keyword extraction module takes as in-
put the separators and the execution trace and outputs the
keywords. We present the keyword extraction module in
Section 5.2. Finally, the message format extraction mod-
ule takes care of ﬁnding the boundaries of ﬁxed-length ﬁelds
and of combining all previous information to generate the
message format. It takes as input the previously found sepa-
rators, direction ﬁelds and keywords, as well as the execution
trace, and outputs the message format.
4. DIRECTION FIELD EXTRACTION
In this section we describe our techniques for identifying
direction ﬁelds, which store information about the location
of another target ﬁeld in the message.
4.1 Direction Field Extraction
4.1.1 What is a direction ﬁeld?
Direction ﬁelds are ﬁelds that store information about the
location of another ﬁeld in the message (called the target
ﬁeld). The most common direction ﬁelds are length ﬁelds,
whose value encodes the length of a target ﬁeld. The target
ﬁeld usually has variable-length and the length ﬁeld allows
to ﬁnd the end of the target ﬁeld. Figure 3 shows an example
length ﬁeld and its target. In addition to length ﬁelds, other
types of direction ﬁelds are: pointer ﬁelds and counter ﬁelds.
Pointer ﬁelds, encode the displacement of a ﬁeld start with
respect to some other position in the message. One example
of an pointer ﬁeld is the compression scheme used in DNS
labels to avoid repetition, which represents a position from
the beginning of the DNS header. Counter ﬁelds encode
the position of a ﬁeld in a list of items. One example of a
counter ﬁeld is the number of DNS authoritative records in
a DNS response.
4.1.2 Techniques for identifying direction ﬁelds:
The intuition behind our techniques for direction ﬁeld de-
tection is the following. The application data is stored in
a memory buﬀer before it is accessed (it might be moved
from disk to memory ﬁrst). Then a pointer is used to access
the diﬀerent positions in the buﬀer. Now when the program
has located the beginning of a variable-length ﬁeld, whose
length is determined by a direction ﬁeld, it needs to use
some value derived from the direction ﬁeld to advance the
pointer to the end of the ﬁeld. Thus, we identify direction
ﬁelds when they are used to increment the value of a pointer
to the tainted data. For example, in Figure 3 we identify
the length ﬁeld at positions 12-13 when it is used to access
positions 18-20.
13(cid:13)
12(cid:13)
Length field(cid:13)
14(cid:13)
15(cid:13)
16(cid:13)
17(cid:13)
18(cid:13)
19(cid:13)
20(cid:13)
Variable-length field(cid:13)
Fixed-length field(cid:13)
Direction field(cid:13)
Target Field(cid:13)
Figure 3: Direction ﬁeld example.
We consider two possibilities to determine whether a ﬁeld
Program(cid:13)
binary(cid:13)
Message(cid:13)
Execution(cid:13)
trace(cid:13)
Execution(cid:13)
Monitor(cid:13)
Separator(cid:13)
extraction(cid:13)
Separators(cid:13)
Keyword(cid:13)
extraction(cid:13)
Keywords(cid:13)
Message(cid:13)
format(cid:13)
Message format(cid:13)
extraction(cid:13)
Direction field(cid:13)
extraction(cid:13)
Direction fields(cid:13)
Figure 1: System Architecture.
Positions(cid:13)
0(cid:13)
G(cid:13)
1(cid:13)
E(cid:13)
2(cid:13)
T(cid:13)
3(cid:13)
4(cid:13)
5(cid:13)
6(cid:13)
7(cid:13)
8(cid:13)
9(cid:13)
10(cid:13)
11(cid:13)
12(cid:13)
/(cid:13)
H(cid:13)
T(cid:13)
T(cid:13)
P(cid:13)
/(cid:13)
1(cid:13)
13(cid:13)
.(cid:13)
14(cid:13)
1(cid:13)
\r(cid:13)
15(cid:13)
\n(cid:13)
Method(cid:13)
Sep.(cid:13)
URL(cid:13)
Sep.(cid:13)
Version(cid:13)
Separator(cid:13)
Figure 2: Simple HTTP GET query. When the program moves or operates on the input data, the destination
gets tainted with the original oﬀset position of the input data.
is being used as a direction ﬁeld: 1) Either the program
computes the value of the pointer increment from the direc-
tion ﬁeld and adds this increment to the current value of
the pointer using arithmetic operations; or 2) the program
increments the pointer by one or some other constant in-
crement using a loop, until it reaches the end of the ﬁeld,
indicated by a stop condition.
Below, we describe how to identify the direction ﬁelds in
these two cases.
Incrementing the pointer using arithmetic opera-
tions: For the ﬁrst case, the program performs an indi-
rect memory access where the destination address has been
computed from some tainted data. Thus, when we ﬁnd an
indirect memory access that: 1) accesses a tainted mem-
ory position, and 2) where the destination address has been
computed from tainted data (i.e., the base or index regis-
ters used to compute the memory address were tainted),
we mark all the consecutive positions used to compute the
destination address as part of a length ﬁeld.
In addition,
we mark the smallest position in the destination address as
the end of target ﬁeld. For example, in Figure 3 if the in-
struction is accessing positions 18-20, and the address of the
smallest position (i.e., 18) was calculated using taint data
coming from positions 12-13, then we mark position 12 as
the start of a direction ﬁeld with length 2, and position 18
as the end of the target ﬁeld. If a direction ﬁeld is used to
access multiple positions in the buﬀer, we only record the
smallest position being accessed. For example, if we have
already found the length ﬁeld in Figure 3 directs to position
18, and it appears again in an indirect memory access to
position 27, we still consider the end of the target ﬁeld to
be position 18.
Incrementing the pointer using a loop: For the second
case, since the pointer increment is not tainted (i.e., it is a
constant) then the previous approach does not work.
In
this case we assume that the stop condition for the pointer
increment is calculated using a loop. Thus, we look for loops
in the trace that have a tainted condition.
Our loop detection component extracts the loops present
in the execution trace. For this, we search for sections of
repeated code that include a backwards jump, that is, a
jump to a lower instruction pointer. After extracting the
loops we check if the loop stop condition is generated from
tainted data, if so we ﬂag the loop as tainted. Every time
the program uses a new position, we check if the closest loop
was tainted. If so, we ﬂag a direction ﬁeld.
Our techniques are not complete because there are other
possibilities in which a program can indirectly increment the
pointer, for example using switch statements or conditionals.
But, these are hardly used since the number of conditions
could potentially grow very large, up to maximum value of
the direction ﬁeld. We plan to incorporate support for other
types of indirect increments in the future.
Variable-length ﬁelds:
Direction ﬁelds are normally
used to locate the end of the target ﬁeld, since the target
ﬁeld usually has variable length. To determine the start of
the target variable-length ﬁeld, without assuming any ﬁeld
encoding, we use the following approach. Direction ﬁelds
need to appear before their target ﬁeld, so they can be used
to skip it. Most often, as mentioned in [18] they precede the
target ﬁeld in the ﬁeld sequence. After we locate a direc-
tion ﬁeld, we consider that the sequence of bytes between