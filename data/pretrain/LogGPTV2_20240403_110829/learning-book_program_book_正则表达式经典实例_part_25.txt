点号匹配换行符：实例2.4
脱字符和美元符号匹配换行处：实例2.5
实例3.1和实例3.3讲解了如何在源代码中使用字面正则表达式，以及如何创建正则表
达式对象。当你创建一个正则表达式时候，就需要设置正则表达式选项。
3.5检查是否可以在目标字符串中找到匹配
问题描述
你想要检查是否在某个特定字符串中可以找到一个特定正则表达式的匹配。这里只需
要一个部分匹配就足够了。例如，正则表达式（regex·patterm）会部分匹配Theregex
114第3章
www.TopSage.com
---
## Page 131
pattermcanbefound。不必关心匹配的太多细节。只需要知道该正则表达式是否能匹配
这个字符串。
解决方案
C#
如果只是做一次性的快速检查，你可以使用如下的静态调用：
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
bool foundMatch =false;
try{
foundMatch = Regex.IsMatch(subjectString,UserInput);
}catch （ArgumentNullException ex)(
// Cannot pass null as the regular expression or subject string
}catch (ArgumentException ex){
// Syntax error in the regular expression
}
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Regex对象：
boolfoundMatch=false;
try{
Regex regexObj = new Regex(UserInput);
try(
foundMatch = regexObj.IsMatch(subjectString);
}catch (ArgumentNullException ex)(
// Cannot pass null as the regular expression or subject string
）
}catch （ArgumentException ex){
//Syntax error in the regular expression
VB.NET
如果只是做一次性的快速检查，你可以使用如下的静态调用：
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
使用正则表达式编程
115
www.TopSage.com
---
## Page 132
Dim FoundMatch As Boolean
Try
FoundMatch = Regex.IsMatch(SubjectString,UserInput)
Catch ex As ArgumentNullException
'Cannot pass Nothing as the regular expression or subject string
Catch ex As ArgumentException
'Syntax error in the regular expression
End Try
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
Dim RegexObj As New Regex("regex pattern")
Dim FoundMatch = RegexObj.IsMatch(SubjectString)
其中的IsMatchO调用应当使用SubjectString作为唯一的参数，并且该调用应当由
RegexObj发起，而不是由Regex类来发起：
Dim FoundMatch = RegexObj.IsMatch(SubjectString)
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Regex对象：
Dim FoundMatch As Boolean
Try
Dim RegexObj As New Regex (UserInput)
Try
FoundMatch = Regex.IsMatch(SubjectString)
Catch ex As ArgumentNullException
'Cannot pass Nothing as the regular expression or subject string
End Try
Catch ex As ArgumentException
'Syntax error in the regular expression
End Try
Java
能够检查部分匹配的唯一途径是创建一个Matcher：
Pattern regex = Pattern.compile("regex pattern");
boolean foundMatch = regexMatcher.find();
如果该正则式是由最终用户提供的，那么你还应当使用例外处理：
boolean foundMatch = false;
tryf
Pattern regex = Pattern.compile(UserInput);
Matcher regexMatcher = regex.matcher(subjectString);
foundMatch = regexMatcher.find();
)catch （PatternSyntaxException ex）{
// Syntax error in the regular expression
116
第3章
www.TopSage.com
---
## Page 133
JavaScript
if (/regex pattern/.test(subject))(
// Successful match
}else{
//Match attempt failed
PHP
if (preg_match('/regex pattern/'，$subject)）(
# Successful match
}else{
#Match attempt failed
Perl
如果目标字符串保存在特殊变量S_中：
if (m/regex pattern/)(
# Successful match
}else{
# Match attempt failed
如果目标字符串保存在特殊变量Ssubject中：
if （$subject =~m/regex pattern/){
 Successful match
}else{
Match attempt failed
使用一个预编译好的正则表达式：
$regex =qr/regex pattern/;
if ($subject =~$regex){
# Successful match
}else{
#Match attempt failed
Python
如果只是做一次性的快速检查，你可以使用如下的全局函数：
if re.search("regex pattern", subject):
# Successful match
else:
#Match attempt failed
使用正则表达式编程
117
www.TopSage.com
---
## Page 134
要想重复使用同一个正则表达式，就需要使用一个编译好的对象：
reobj = re.compile("regex pattern")
if reobj.search(subject):
Successful match
else:
Match attempt failed
Ruby
if subject=~/regex pattern/
Successful match
else
Match attempt failed
end
下面的代码会完成同样的功能：
if/regex pattern/=~ subject
Successful match
else
Match attempt failed
end
讨论
正则表达式最基本的任务就是检查一个字符串是否会匹配该正则表达式。在大多数编
程语言中，只需要一个部分匹配就可以使匹配函数返回true。匹配函数会扫描整个自标
字符串，检查是否该正则表达式会匹配其中的任何子串。一旦找到一个匹配，该函数
会立即返回true。只有当它到达了字符串的结尾，并未找到任何匹配的情形下，才会返
回false。
在这个实例中的代码示例可以用于检查一个字符串中是否包含特定的数据。如果想要
检查一个字符串是否能够整体匹配某个特定的模式（比如，用于用户输入的验证），那
么你需要使用下一个实例。
C#andVB.NET
Regex类提供了IsMatchO方法的4个重载版本，其中的两个版本是静态方法。这样我
们就可以使用不同的参数来调用IsMatchO。目标字符串总是第一个参数。它就是正则
表达式要试图在其中寻找匹配的那个字符事。第一个参数一定不能是null。否则，
IsMatch（会产生一个ArgumentNullException例外。
你可以只使用一行代码，不必构造Regex对象，只通过调用Regex.IsMatchO就可以完
成这个检查。只需要把正则表达式作为第二个参数，而把正则选项作为可选的第三个
参数传递给这个函数。如果你的正则表达式出现了语法错误，那么IsMatchO会产生一
118第3章
www.TopSage.com
---
## Page 135
个ArgumentException例外。如果你的正则式是合法的，那么如果找到部分匹配，这个
调用就会返回true，或者如果没有找到匹配，就会返回false。
如果想要把同一个正则表达式用于多个字符串之上，那么可以通过首先构造一个
Regex对象，然后再用该对象来调用IsMatchO，这样可以使你的代码更有效率。这
样的话，只有第一个保存目标字符事的参数才是必需的。你还可以指定一个可选的
第二个参数来说明正则表达式应当开始检查的字符位置。实质上，传递给第二个参
数的数值，也就是你希望正则表达式忽略的目标字符串开始字符的数量。当你已经
处理了这个字符串的一部分，而想要检查是否剩余部分会有匹配的时候，会用到这
样的方式。如果你指定了一个数量，它必须大于或等于0，而且要小于或者等于目
标字符串的长度。否则的话，IsMatchO会产生一个ArgumentOutOfRangeException
例外。
静态重载并不支持使用参数来指定正则表达式应该在字符事中开始尝试的位置。也不
存在一个重载函数支持你告诉IsMatchO在字符串结束之前的某个位置停止。如果需要
这样做，那么你可以调用Regex.Match("subject"，start，stop)，然后检查返回的Match对
象的Success属性。更多细节，请参考实例3.8。
Java
要想检查个正则表达式是否可以部分或者整体匹配一个字符串，需要按照在实例3.3
中讲解的方式来实例化一个Matcher对象。然后使用新创建的或者刚重置过的匹配器来
调用findO函数。
求正则表达式匹配整个学符串。
JavaScript
要检查一个正则表达式能否匹配某个字符串的一部分，用你的正则表达式调用testO函
数。把目标字符串作为唯一的参数。
如果该正则表达式会匹配目标字符串的一部分或者全部，那么regexp.testO就会返回
true，否则返回false。
PHP
函数preg_matchO可以用于不同的目的。调用它的最基本的方式是只需用两个必须的参
数：包含正则表达式的字符串，以及包含你想要正则表达式搜索的目标文本的字符串。
如果preg_matchO能够找到匹配，就会返回1；如果正则式没有产生匹配，那么函数会
返回0。
本章稍后的一些实例中会讲解你可以传递给preg_matchO的可选参数。
使用正则表达式编程119
www.TopSage.com
---
## Page 136
Perl
在Perl中，m/实际上是一个正则表达式操作符，而不仅仅是一个正则表达式容器。
如果你只是使用m/自身，它会使用$_变量来作为目标字符串。
如果你想要把匹配操作符用于另外一个变量的内容，就需要使用绑定操作符=～，把正则
操作符和你的变量关联起来。把正则式绑定到一个字符串会立即执行该正则式。如果正
则式匹配目标字符事的一部分的话，那么模式匹配操作符会返回true，否则返回false。
如果你想要检查正则表达式是否不能匹配一个字符串，那么你可以使用！～，其含义正
好与=~相反。
Python
在re模块中的searchO函数会搜索一个字符串来查找正则表达式是否可以匹配其中的一