(cid:32)
(cid:32)
q-type, KOE
DL
CRHF
CRHF
SIS
CRHF
CRHF
DL
q-type, KOE
q-type, KOE
AGM
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
Size
PQ? Universal? Untrusted setup? Assumptions
Table 1: Asymptotic efficiency comparison of zero-knowledge proofs for arithmetic circuits. Here n is the number of gates, d is the depth of
the circuit, h is the width of the subcircuits, c is the number of copies of the subcircuits, ℓ is the size of the instance, and w is the size of the
witness. An empty circle denotes that the scheme does not have this property and a full circle denotes that the scheme does have this property.
A half circle for post-quantum security denotes that it is feasibly post-quantum secure but that there is no proof. A half circle for untrusted
setup denotes that the scheme is updatable. DL stands for discrete log, CRHF stands for collision-resistant hash functions, KOE stands for
knowledge-of-exponent, and AGM stands for algebraic group model.
Scheme
Groth’16 [45]
Bulletproofs
This work (helped)
This work (unhelped)
—
n2 G
4dG
4dG
Universal SRS Circuit SRS
3n + m G
Size
3 G
2 log2(n) + 6 G
7 G, 5 F
20 G, 16 F
Prover computation Verifier computation
4n + m − ℓ Ex
8n Ex
18n Ex
273n Ex
3P + ℓ Ex
4n Ex
10P
13P
—
12n G
36n G
Table 2: Comparison of helped and unhelped Sonic against a pairing-based zk-SNARK and against Bulletproofs (which do not require pairing
groups) for arithmetic circuit satisfiability with d the maximum size of committed polynomials, ℓ-element known circuit inputs, m wires,
and n gates. Computational costs are measured in terms of number of group exponentiations and pairings. G means group elements in either
source group, F means field elements, Ex means group exponentiations, and P means pairings. Helped Sonic has 2 additional group elements
per batch. Unhelped Sonic has approximately three times the number of constraints due to the need to convert the circuit into one that is
uniformly sparse, and this has been taken into account in our estimates for the circuit SRS and the prover computation.
2 RELATED WORK
An efficiency comparison of all of the schemes we discuss is pro-
vided in Table 1. We also give a more concrete efficiency comparison
in Table 2 of Sonic against the fastest zk-SNARK in the literature
(Groth 2016 [45]) and Bulletproofs [26].
Hyrax [61] is a zero-knowledge protocol that processes circuits
using a sum-check protocol originally introduced from the verifiable
computation scheme by Goldwasser et al [43] and improved by
Cormode et al. [33]. It is especially well-suited to circuits with a
high level of parallelisation, such as showing that a committed
value is included in a Merkle tree. Additionally, the protocol is
ideal for circuits with small witnesses. It directly uses a parallelised
sum-check protocol on the instance wires, and on the witness wires
it applies a zero-knowledge variant of the sum-check protocol.
Their sum-check protocol uses an adaptation of the inner-product
argument from Bulletproofs to check multiplication constraints.
Originally designed for handling SQL queries, Zhang et al. de-
signed a zero-knowledge variant of vSQL [65]. Their scheme also
processes circuits using techniques by Cormode et al. [33]. This
means that their techniques also have better efficiency for highly
parallelised circuits. Like our scheme, they rely on a polynomial
commitment scheme. However, rather than design their scheme
around Kate et al.’s single variant scheme, they use Papamanthou
et al.’s multivariate scheme [58]. This multivariate scheme is useful
for vSQL because they can use multivariate polynomials where
each variable has degree 1. For our scheme, there are two variables
of degree O(n), so Papamanthou et al.’s scheme would result in a
quadratic-sized reference string and quadratic prover computation.
Symmetric primitives such as Reed-Solomon codes have recently
been gaining attention for their post-quantum potential, as there are
no known quantum attacks on error-correcting codes and protocols
that use them do not require expensive and trusted pre-processing
phases. Schemes that use these techniques [2, 9, 23] are typically
made non-interactive in the random oracle model, as opposed to
the quantum random oracle model, and designing efficient zero-
knowledge protocols in the quantum random oracle model [21]
remains an open problem. The codes are typically cheap to compute
for the prover. The downside to this style of proof is that they
require very large circuits before the asymptotics can take effect,
because the constants are relatively large.
Ligero [2] uses Reed-Solomon codes for security. This work
stems from the “MPC-in-the-head” paradigm [30, 42, 49]. The idea
3
is to model the computation as being carried out by a multiparty
computation, but then have the prover and verifier simulate mul-
tiple parties. A large part of its overhead comes from compiling
the addition gates, and the authors observed that when there are
many repetitions of the same addition gates in the same layer, it
is possible to batch the compilation. Bootle et al. [23] introduce a
model that they call the ideal linear commitment (ILC) model in
which a prover can commit to vectors by sending them to a chan-
nel, and a verifier can query the channel on linear combinations of
the committed vectors. They then compile the ILC programs into
proofs using a code by Ishai et al. [48] which can be computed in
linear time. As a result, they prove the possibility of zk-proofs that
have linear prover overhead. STARKs [9] look to simultaneously
minimise proof size and verifier computation and show, with an im-
plementation, that protocols based on interactive oracle proofs [14]
can be practical. Indeed their prover, when applied to a circuit
with 227 gates, takes roughly 1 minute to run. However, proof sizes
are still over 100kB, even for relatively small circuits. Aurora [13]
uses similar techniques to STARKs, except that it is designed to
run directly over constraint systems like those used in zk-SNARKs.
As such, they avoid the concrete overhead that STARKs require
for compiling a program into a constraint system. Baum et al. [4]
introduced the first lattice-based protocol with sublinear communi-
cation costs. They achieve this by designing a proof of knowledge
for committed values using techniques by Cramer et al. [34]. The
proof of knowledge is efficient in the amortised setting. They apply
this proof of knowledge to circuits processed using Bulletproof
techniques. As a result their verifier time is high.
Bulletproofs [22, 26] are based on the discrete logarithm problem
and have no trusted setup. Their proof sizes are logarithmic, which
is achieved through the use of an inner product argument. On
the downside the verification time is high. Although Bulletproofs
lend themselves well to batching, even batched proofs require a
computation per proof that depends on the size of the circuit. The
prover costs for Bulletproofs are typically high due to the use of
expensive cryptographic operations. For very small circuits, such
as for range proofs, Bulletproofs have the advantage of having
relatively low concrete overhead.
Using knowledge assumptions, it is possible to build zk-SNARKs
[15, 18, 35, 45, 47, 54, 59]. These have constant-sized proofs and
verifier times that depend solely on the instance. However, they
typically rely on using circuit-specific quadratic span programs or
quadratic arithmetic programs [40]. As such the common reference
strings are not updatable or universal [12]. The prover costs for
zk-SNARKs are typically high due to the use of expensive crypto-
graphic operations, although recent work has looked into methods
to distribute these costs [64].
Alternative methods to achieve universal setups include gener-
ating a circuit-specific reference string for a universal circuit such
as Valiant’s universal circuit construction [55, 60]. Universal cir-
cuits must define the path taken by the input data and the cost
of this universal routing is O(n log(n)) gates. Practically speaking
universal circuits incur a large overhead on the prover computation.
Ben-Sasson et al. discuss using a TinyRAM architecture to describe
universal computations as simple programs [11, 15]. They have a
unique SRS representing each instruction in the architecture, and
they recursively compose the proofs to achieve succinctness. While
useful for programmers that wish to convert between C programs
and constraint systems for zk-SNARKs, these approaches incur a
large overhead on the prover computation.
Groth et al. [46] introduced the notion of updatability for struc-
tured reference strings and built a zk-SNARK from an updatable
and universal string. They achieved these results by including a
null space argument to show that a quadratic arithmetic circuit is
satisfied. However, computing this null space requires expensive
Gaussian elimination. Even as a one-off cost, this is often unrealistic.
Further, although they can have linear-sized structured reference
strings for the prover and verifier, to allow for updatability they
require a global string with O(n
2) elements.
3 DEFINITIONS FOR UPDATABLE
REFERENCE STRINGS
In this section, we revisit the definitions around updatable SRS
schemes due to Groth et al. [46], in terms of defining properties
of zero-knowledge proofs in the case in which the adversary may
subvert or participate in the generation of the common reference
string. Given that our protocol in Section 6 is interactive (but made
non-interactive in the random oracle model), we also present new
definitions for interactive protocols that take into account these
alternative methods of SRS generation.
3.1 Notation
If x is a binary string then |x| denotes its bit length. If S is a finite
$←− S denotes sampling a member
set then |S| denotes its size and x
uniformly from S and assigning it to x. We use λ ∈ N to denote the
security parameter and 1λ to denote its unary representation. We
use ε to denote the empty string.
Algorithms are randomized unless explicitly noted otherwise.
“PPT” stands for “probabilistic polynomial time” and “DPT” stands
for “deterministic polynomial time.” We use y ← A(x; r) to denote
running algorithm A on inputs x and random coins r and assigning
r←− A(x) (when we want to
its output to y. We write y
refer to r later on) to denote y ← A(x; r) for r sampled uniformly
at random.
We use code-based games in security definitions and proofs [8].
A game SecA(λ), played with respect to a security notion Sec and
adversary A, has a main procedure whose output is the output of
the game. The notation Pr[SecA(λ)] is used to denote the probabil-
ity that this output is 1.
$←− A(x) or y
3.2 The Subvertible SRS Model
Intuitively, the subvertible SRS model [7] allows the adversary to
fully generate the reference string itself, and the updatable SRS
model [46] allows the adversary to partially contribute to its gen-
eration by performing some update. Formally, an updatable SRS
scheme is defined by two PPT algorithms Setup and Update, and a
DPT algorithm VerifySRS. These behave as follows:
• (srs, ρ) $←− Setup(1λ) takes as input the security parameter
and returns a SRS and proof of its correctness.
4
• (srs′, ρ′)
$←− Update(1λ, srs,(ρi)n
i =1) takes as input the
security parameter, a SRS, and a list of update proofs. It
outputs an updated SRS and a proof of the correctness of
the update.
i =1) takes as input the secu-
rity parameter, a SRS, and a list of proofs. It outputs a bit
indicating acceptance (b = 1), or rejection (b = 0).
• b ← VerifySRS(1λ, srs,(ρi)n
We consider an updatable SRS to be perfectly correct if an honest
updater always convinces an honest verifier.
(cid:20)
(cid:21)
Definition 3.1. An updatable SRS scheme is perfectly correct if
Pr
(srs, ρ) $←− Setup(1λ) : VerifySRS(1λ, srs, ρ) = 1
i =1) where VerifySRS(1λ, srs,(ρ)n
(cid:34) (srs′, ρn+1) $←− Update(1λ, srs,(ρi)n
and if for all (λ, srs,(ρi)n
we have that
= 1,
i =1) = 1,
(cid:35)
i =1) :
Pr
= 1.
VerifySRS(1λ, srs′,(ρ)n+1
i =1 ) = 1
In terms of the usage of these SRSs, a protocol cannot satisfy
both subvertible zero-knowledge and subvertible soundness [7].
That is, assuming the adversary knows all the randomness used
to generate the SRS, they can either break the zero-knowledge
property of the scheme or they can break the soundness property
of the scheme. We thus recall here the two strongest properties
we can hope to satisfy, which are subvertible zero-knowledge and
updatable knowledge soundness. The definitions of these properties
are simplified versions of the ones given by Groth et al. [46], with
the addition of a random oracle H (which behaves as expected, so
we omit its description).
Let R be a polynomial-time decidable relation with triples(srs, ϕ,
w). We say w is a witness to the instance ϕ being in the relation
defined by srs when (srs, ϕ, w) ∈ R. We consider an argument
(Prove, Verify) to be subversion zero-knowledge if an adversarial
verifier, including one that (fully) generates the SRS, cannot differ-
entiate between real and simulated proofs.
Definition 3.2 (Subvertible Zero-Knowledge). An argument for
the relation R is S-zero-knowledge if for all PPT algorithms A there
exists a PPT extractor X and a simulator SimProve such that the
advantage |2 Pr[S-ZKA,X(1λ)] − 1| is negligible in λ, where this
game is defined as follows:
main S-ZKA,XA(λ)
$←− {0, 1}
b
(srs,(ρi)n
i =1) r←− AH(1λ)
$←− XA(r)
τ
if VerifySRS(1λ, srs,(ρi)n
b′ ← AH, Opf(r)
return b′ = b
Opf(ϕ, w)
if (srs, ϕ, w) (cid:60) R return ⊥
if b = 0 return SimProve(srs, τ , ϕ)
else return Prove(srs, ϕ, w)
i =1) = 0 return 0
To define update knowledge-soundness, we consider an adver-
sary that can influence the generation of the SRS. To do this, it can
query an oracle with an intent set to “setup” (for the first update
proof), “update” (for all subsequent update proofs), or “final” (to
signal the SRS for which it will attempt to forge proofs). The ora-
cle sets the SRS only if: (1) all update proofs verify; and (2) it was
responsible for generating at least one of the update proofs. We
do not use updatable knowledge soundness directly, but this part
of the security game (in which A and U-Os interact to create the
SRS) can be re-purposed for any cryptographic primitive. In this
paper we use this updatability notion mainly for the polynomial
commitment scheme we present in Section 6.2.
Definition 3.3 (Updatable Knowledge Soundness). An argument
for the relation R is U-knowledge-sound if for all PPT algorithms A
there exists a PPT extractor XA such that Pr[U-KSNDA,XA(1λ)]