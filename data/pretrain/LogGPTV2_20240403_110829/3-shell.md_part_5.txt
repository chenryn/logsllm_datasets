[案例1：使用for循环结构](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY03/CASE/01/index.html#case1)
[案例2：使用while循环结构](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY03/CASE/01/index.html#case2)
[案例3：基于case分支编写脚本](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY03/CASE/01/index.html#case3)
[案例4：使用Shell函数](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY03/CASE/01/index.html#case4)
[案例5：中断及退出](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY03/CASE/01/index.html#case5)
## 1 案例1：使用for循环结构
> 在Shell脚本应用中，常见的for循环采用遍历式、列表式的执行流程，通过指定变量从值列表中循环赋值，每次复制后执行固定的一组操作。
>
> for循环的语法结构如下所示：
1.  for 变量名 in 值列表 \-\--值列表可多个,例如 a b c
2.  do
3.  命令序列
4.  done
5.  
6.  for 变量名 in {1..5}
7.  do
8.  命令序列
9.  done
10. 
11. for 变量名 in \`seq 5\` \-\-\--5个序号
12. do
13. 命令序列
14. done
15. 
16. for 变量名 in \`ls /etc/\*.conf\`
17. do
18. 命令序列
19. Done
\-\-\-\-\-\-\-\-\-\--脚本\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
for i in \`seq 5\`
do
echo \$i
done
\~
\[root@server0 opt\]# bash test1.sh
1
2
3
4
5
\-\-\-\-\-\-\-\-\-\--脚本\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
for i in \`seq 5 10\`   
do
echo \$i
done
\~
\[root@server0 opt\]# bash test1.sh
1
2
3
4
5
\-\-\-\-\-\-\-\-\-\-\-\--脚本\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
for i in \`seq \$1\`
do
echo \$i
done
\[root@server0 opt\]# bash test1.sh 4
1
2
3
4
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
for i in \`seq \$1\`
do
echo nb \-\-\--并不一定取用 \$1变量值,
done
\~
\[root@server0 opt\]# bash test1.sh 4
nb
nb
nb
nb
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\-\-\-\-\-\--测试一个网络地址范围是否通-脚本１\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
read -p \"请输入主机范围\" a
ip=172.25.0. #设置IP地址段
c=2 #设置测试包数
i=0.2 #设置发包间隔
W=1 #设置反馈超时秒数
for zj in \`seq \$a\`
do
ping -c \$c -i \$i -W \$W \$ip\$zj #&\>/dev/null
\[ \$? -eq 0 \] && echo \"\$ip\$zj 通了\" \|\| echo \"\$ip\$zj 不通\"
done
\-\-\-\-\-\--测试一个网络地址范围是否通-脚本２\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
read -p \"请输入主机范围\" a
ip=172.25.0. #设置IP地址段
c=2 #设置测试包数
i=0.2   #设置发包间隔
W=1 #设置反馈超时秒数
for zj in \`seq \$a\`
do
ping -c \$c -i \$i -W \$W \$ip\$zj &\>/dev/null
if \[ \$? -eq 0 \];then echo \"\$ip\$zj 通了\"
else
echo \"\$ip\$zj 不通\"
fi
done
\~
\-\-\--测试一个网络地址范围是否通-脚本3\-\--统计成功不成功数量\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
a=0
b=0
for i in \`seq \$1\`
do
ping -c 2 -i 0.2 -W 1 172.25.0.\$i &\>/dev/null
if \[ \$? -eq 0 \];then
echo \"通了\"
let a++
else
echo \"不通\"
let b++
fi
done
echo \"\$a 台通了\"
echo \"\$b 台不通\"
\~
\-\-\-\-\--按名单文件创建用户,设置默认密码\-\-\--脚本1\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
a=123456 #请在此定义默认密码
b=/opt/user #请在此定义账户文件
for i in \$(cat \$b)
do
useradd \$i
echo \$a \| passwd \--stdin \$i #设置默认密码
echo \"\$i 用户创建成功,密码为默认\"
done
\-\-\-\-\--按名单文件创建用户,设置默认密码\-\--脚本2\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
a=/opt/pass1 #请在此定义默认密码
b=/opt/user1 #请在此定义账户文件
n=\`cat \$b \| wc -l\` #统计账户文件中账户个数
for i in \`seq \$n\` #按照账户统计数循环次数
do
useradd \`head -\$i \$b \| tail -1\`
echo \`head -\$i \$a \| tail -1\` \| passwd \--stdin \`head -\$i \$b \|
tail -1\`
done
## 2 案例2：使用while循环结构
while循环属于条件式的执行流程，会反复判断指定的测试条件，只要条件成立即执行固定的一组操作，直到条件变化为不成立为止。所以while循环的条件一般通过变量来进行控制，在循环体内对变量值做相应改变，以便在适当的时候退出，避免陷入死循环。
\-\-\-\-\--猜数字游戏
并记录回显猜的次数,无输入将退出\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
a=\$\[RANDOM%100+1\]
b=1
while : \-\-\--死循环,满足继续循环,知道不满足条件
do
read -p \"请输入一个数组(1-100):\" n
if \[ -z \$n \];then
echo \"无输入,2s后退出\"
sleep 2
exit
elif \[ \$n -eq \$a \];then
echo \"猜对了,游戏结束\"
echo \"总共猜了 \$b 次\"
exit
elif \[ \$n -gt \$a \];then
echo \"大了\"
else
echo \"小了\"
fi
let b++
done
**3 案例3：基于case分支编写脚本**
> case分支属于匹配执行的方式，它针对指定的变量预先设置一个可能的取值，判断该变量的实际取值是否与预设的某一个值相匹配，如果匹配上了，就执行相应的一组操作，如果没有任何值能够匹配，就执行预先设置的默认操作。
>
> case分支的语法结构如下所示：
1.  case 变量 in
2.  模式1)
3.  命令序列1 ;;
4.  模式2)
5.  命令序列2 ;;
6.  .. ..
7.  \*)
8.  默认命令序列
9.  Esac
\-\-\-\-\--实现简单的功能,-脚本1\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
case \$1 in
t\)
echo \"已创建 \$2 文件\"
touch \$2 ;;
vim)
echo \"已打开 \$2 文件\"
vim \$2;;
m\)
echo \"已创建 \$2 目录\"
mkdir \$2;;
\*)
echo \"请在命令后面输入t,v,m\"
esac
\[root@server0 opt\]# bash test6.sh t 123qwe
已创建 123qwe 文件
\-\-\-\-\-\--实现简单的功能,-脚本2\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
case \$1 in
t\|-t\|T) #定义t,-t,T效果一样
echo \"已创建 \$2 文件\"
touch \$2 ;;
vim\|VIM\|-vim) #定义 vim,VIM,-vim 效果一样
echo \"已打开 \$2 文件\"
vim \$2;;
m\)
echo \"已创建 \$2 目录\"
mkdir \$2;;
\*)
echo \"请在命令后面输入t,v,m\"
esac
\~
## 4 案例4：使用Shell函数
> 在Shell脚本中，将一些需重复使用的操作，定义为公共的语句块，即可称为函数。通过使用函数，可以使脚本代码更加简洁，增强易读性，提高Shell脚本的执行效率
>
> **1）函数的定义方法**
>
> 格式1：
1.  **function** 函数名 **{**
2.  命令序列
3.  **..** **..**
4.  **}**
> 格式2：
1.  函数名**()** **{**
2.  命令序列
3.  **..** **..**
4.  **}**
\[root@server0 opt\]# abc(){ \-\--开始定义函数abc
\> mkdir \$1
\> cd \$1
\> echo 这是个函数
\> }
\[root@server0 opt\]# abc 123 \-\--使用abc函数,创建123目录,并进入
这是个函数
\[root@server0 123\]# pwd \-\--查看当前目录,已进入新建的目录123
/opt/123
\[root@server0 123\]# type abc \-\-\--查看abc详情
abc 是函数
abc ()
{