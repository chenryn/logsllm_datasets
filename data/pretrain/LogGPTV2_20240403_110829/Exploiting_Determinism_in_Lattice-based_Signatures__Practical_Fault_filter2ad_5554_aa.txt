# Title: Exploiting Determinism in Lattice-based Signatures: Practical Fault Attacks on pqm4 Implementations of NIST Candidates

## Authors:
- Prasanna Ravi
- Mahabir Prasad Jhanwar
- James Howe
- Anupam Chattopadhyay
- Shivam Bhasin

## Abstract
In this paper, we analyze the implementation-level fault vulnerabilities of deterministic lattice-based signature schemes. Specifically, we extend the practicality of skip-addition fault attacks by exploiting the determinism in Dilithium and qTESLA, two leading candidates for NIST standardization of post-quantum cryptography. We demonstrate that single targeted faults injected during the signing procedure can recover a significant portion of the secret key. Although these faults do not reveal all secret key elements, we propose a novel forgery algorithm that allows an attacker to sign any given message using only the extracted portion of the secret key. Our experimental validation uses Electromagnetic (EM) fault injection on reference implementations from the pqm4 library, a benchmarking and testing framework for post-quantum cryptographic implementations on the ARM Cortex-M4 microcontroller. We also show that our attacks break two well-known countermeasures designed to protect against skip-addition fault attacks. Additionally, we propose an efficient mitigation strategy that exponentially increases the attacker's complexity with almost no increase in computational overhead.

## CCS Concepts
- **Security and Privacy** → Digital signatures; Hardware attacks and countermeasures; Side-channel analysis and countermeasures; Embedded systems security.

## Keywords
- Deterministic Lattice Signatures
- pqm4
- Fault Attack
- Lattice-based Cryptography

## ACM Reference Format
Prasanna Ravi, Mahabir Prasad Jhanwar, James Howe, Anupam Chattopadhyay, and Shivam Bhasin. 2019. Exploiting Determinism in Lattice-based Signatures: Practical Fault Attacks on pqm4 Implementations of NIST Candidates. In ACM Asia Conference on Computer and Communications Security (AsiaCCS '19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3321705.3329821

## 1 Introduction
Recently, NIST has called for proposals to standardize post-quantum cryptographic schemes for public-key encryption, digital signatures, and key establishment protocols [22]. This initiative is partly driven by the potential advent of practical and scalable quantum computers [4], which has motivated the development of cryptographic schemes resistant to quantum algorithms. Among the initial candidates, lattice-based cryptography stands out, with 28 of 80 submissions. NIST [24] emphasizes that "schemes that can be made resistant to side-channel attacks at minimal cost are more desirable than those whose performance is severely hampered by such attempts." Therefore, it is essential to analyze the implementation security of these proposals against active and passive side-channel attacks.

Over the years, significant research has been conducted on lattice-based cryptographic algorithms, particularly on initial proposals for lattice-based signature schemes such as GLP [16], BLISS [12], and the Bai-Galbraith (BG) [3] schemes. These schemes attracted attention due to their security and efficiency. A notable characteristic of these schemes is the use of ephemeral nonces during signature generation, similar to elliptic curve signature schemes like DSA and ECDSA. While early lattice-based signature schemes [12, 16] used randomly generated nonces, current candidates like Dilithium [19] and qTESLA [7] employ deterministic procedures for nonce generation, making the signature scheme completely deterministic. Determinism ensures that the signing procedure always outputs a unique signature for a given message. However, this determinism has come under scrutiny and has become a target for fault and side-channel attacks [2, 5].

This naturally raises questions about the introduction of similar implementation-level vulnerabilities in lattice-based signature schemes. As the first and only work in exploiting determinism through implementation attacks, Bruinderink and Pessl [11] proposed differential fault attacks on Dilithium and qTESLA. Another question is whether determinism can be exploited to enhance the practicality or strengthen existing theoretical implementation attacks against lattice-based signature schemes.

As a step towards answering these questions, we extend the applicability and practicality of skip-addition fault attacks to deterministic variants of lattice-based signature schemes, specifically Dilithium and qTESLA. Theoretical skip-addition fault attacks were first reported by Bindel et al. [8] on non-deterministic lattice-based signature schemes GLP, BLISS, and Ring-TESLA. However, their attack requires a high number of precisely targeted faults (≈ 1000 for typical parameters) within a single run of the signing procedure, making it impractical due to synchronization and fault detectability issues. In contrast, our proposed attack works with a single-fault injection model, requiring only one fault per run. This model is more relaxed for both equipment and key recovery analysis. Our attack also works against two well-known implementation-level countermeasures used to protect against skip-addition fault attacks, further enhancing its practicality through the exploitation of determinism in lattice-based signature schemes.

### 1.1 Contribution
The contributions of this work are as follows:

- **Extension of Skip-Addition Fault Attacks**: We extend the applicability and practicality of skip-addition fault attacks to deterministic lattice-based signature schemes. We show that the deterministic nature of Dilithium and qTESLA can be exploited to extract the primary component of the secret key with only a single targeted fault injected during the signing procedure.
- **Forgery Algorithm**: We propose an alternative signature forgery algorithm for Dilithium, allowing the generation of valid signatures with only the extracted primary component of the secret key from the fault attack. Our forgery algorithm involves fewer computations compared to the original signing procedure, albeit with a non-negligible failure probability.
- **Experimental Validation**: The fault vulnerabilities are validated using electromagnetic fault injection on the ARM Cortex-M4 microcontroller [17]. We performed practical fault attacks on reference implementations from the pqm4 library, a testing and benchmarking framework for post-quantum cryptographic schemes on the ARM Cortex-M4 microcontroller.
- **Target Identification**: Given the need for precisely targeted faults, we propose a systematic approach to identify target operations for fault injection using a two-order pattern matching technique over Electromagnetic Emanation traces collected through the EM side channel.
- **Countermeasure Attacks**: We demonstrate practical attacks against two well-known implementation-level countermeasures proposed to protect against skip-addition fault attacks [8, 9], made possible by the deterministic nature of Dilithium.
- **Mitigation Strategy**: Finally, we propose a zero-cost mitigation technique against our skip-addition fault attack, which exponentially increases the attacker's complexity through simple reordering of operations within the signing procedure.

## 2 Preliminaries

### Notation
Let \( q \in \mathbb{N} \) be a prime. Elements in the ring \( \mathbb{Z} \) or \( \mathbb{Z}_q \) are denoted by regular font letters, e.g., \( a, b \in \mathbb{Z} \) or \( \mathbb{Z}_q \). For an integer \( r \) and an even positive integer \( \alpha \), we define centered reduction modulo \( q \), denoted as \( r \mod \pm \alpha \), to be the unique integer \( r_0 \) such that \( r \equiv r_0 \pmod{\alpha} \) and \( -\frac{\alpha}{2} < r_0 \leq \frac{\alpha}{2} \).

### 2.1 Dilithium

Dilithium is a deterministic lattice-based signature scheme whose security is based on the MLWE and MSIS problems. Specifically, security against key-recovery attacks under the classical random oracle model is based on the hardness assumption of the MLWE problem, while security against existential signature forgery is based on the MSIS hardness assumption. The authors also discuss the scheme's security against strong signature forgery attacks under the quantum random oracle model [19].

#### 2.1.1 Rounding Algorithms
This section briefly describes the various rounding procedures used in Dilithium. These procedures aim to provide better compression of Dilithium's public keys and signatures. For non-negative integers \( r \) and \( \alpha \), the procedure \( r \mod \pm \alpha \) outputs a unique integer \( r_0 \) in \( -\frac{\alpha}{2} < r_0 \leq \frac{\alpha}{2} \) such that \( r \equiv r_0 \pmod{\alpha} \). The procedure \( \text{Decompose}: D_q(r, \alpha) \) decomposes \( r \) into a pair of integers \( (r_1, r_0) \), and the procedures \( \text{HighBits}: HB_q(r, \alpha) \) and \( \text{LowBits}: LB_q(r, \alpha) \) extract \( r_1 \) and \( r_0 \) from \( D_q(r, \alpha) \) respectively. The procedure \( \text{MakeHint}: MH_q(u, r, \alpha) \) produces a bit \( h \in \{0, 1\} \), and the procedure \( \text{UseHint}: UH_q(h, r, \alpha) \) shows how to use the bit \( h \) as a hint to derive \( HB_q(u + r, \alpha) \). The relationship between these procedures is stated in the following lemma.

**Lemma 2.1 ([19])**. For \( r, z \in \mathbb{Z}_q \) with \( ||z||_\infty \leq \frac{\alpha}{2} \), we have:
\[ UH_q(MH_q(z, r, \alpha), r, \alpha) = HB_q(r + z, \alpha) \]

The exact details of these algorithms are provided in Algorithm 4 in Appendix A. These algorithms naturally extend to higher abstractions like matrices, vectors, rings, and modules by performing the same computations over their individual elements.

#### 2.1.2 Description of Dilithium
We recall the details of the Dilithium signature scheme [19]. The underlying approach of the scheme is based on the "Fiat-Shamir with Aborts" framework [18], and the scheme itself is an improved variant of the lattice-based signature scheme proposed by Bai and Galbraith [3]. The scheme operates over the base ring \( R_q \) with \( n, q = (256, 8380417) \) while offering flexibility with the module parameters \( (k, \ell) \), allowing operation over varying dimensions \( (k \times \ell) \) for different security levels. Since most of our analysis deals with the signing procedure of Dilithium, we present the details of the signing process.