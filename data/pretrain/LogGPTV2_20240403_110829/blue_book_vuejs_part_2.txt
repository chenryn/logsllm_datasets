...
...
```
### [Key Modifiers](https://vuejs.org/guide/essentials/event-handling.html#key-modifiers)
When listening for keyboard events, we often need to check for specific keys.
Vue allows adding key modifiers for `v-on` or `@` when listening for key events:
```html
```
You can directly use any valid key names exposed via
[`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)
as modifiers by converting them to kebab-case.
```html
```
Vue provides aliases for the most commonly used keys:
* `.enter`
* `.tab`
* `.delete` (captures both "Delete" and "Backspace" keys)
* `.esc`
* `.space`
* `.up`
* `.down`
* `.left`
* `.right`
You can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:
* `.ctrl`
* `.alt`
* `.shift`
* `.meta`
For example:
```html
Do something
```
The `.exact` modifier allows control of the exact combination of system
modifiers needed to trigger an event.
```html
A
A
A
```
### Mouse Button Modifiers
* `.left`
* `.right`
* `.middle`
These modifiers restrict the handler to events triggered by a specific mouse
button.
## [Form bindings](https://vuejs.org/tutorial/#step-5)
### [Basic usage](https://vuejs.org/guide/essentials/forms.html#text)
#### Text
Using `v-bind` and `v-on` together, we can create two-way bindings on form input
elements:
```vue
{{ text }}
```
```javascript
methods: {
  onInput(e) {
    // a v-on handler receives the native DOM event
    // as the argument.
    this.text = e.target.value
  }
}
```
To simplify two-way bindings, Vue provides a directive, `v-model`, which is
essentially a syntax sugar for the above:
```html
```
`v-model` automatically syncs the ``'s value with the bound state, so we
no longer need to use a event handler for that.
`v-model` works not only on text inputs, but also other input types such as
checkboxes, radio buttons, and select dropdowns.
#### Multiline text
```html
Multiline message is:
{{ message }}
```
#### Checkbox
```html
{{ checked }}
```
We can also bind multiple checkboxes to the same array or Set value:
```javascript
export default {
  data() {
    return {
      checkedNames: []
    }
  }
}
```
```html
Checked names: {{ checkedNames }}
Jack
John
Mike
```
#### Radio checkboxes
```html
Picked: {{ picked }}
One
Two
```
#### Select
Single select:
```html
Selected: {{ selected }}
  Please select one
  A
  B
  C
```
Multiple select (bound to array):
```html
Selected: {{ selected }}
  A
  B
  C
```
Select options can be dynamically rendered with `v-for`:
```javascript
export default {
  data() {
    return {
      selected: 'A',
      options: [
        { text: 'One', value: 'A' },
        { text: 'Two', value: 'B' },
        { text: 'Three', value: 'C' }
      ]
    }
  }
}
```
```html
    {{ option.text }}
Selected: {{ selected }}
```
### [Value bindings](https://vuejs.org/guide/essentials/forms.html#value-bindings)
For radio, checkbox and select options, the `v-model` binding values are usually
static strings (or booleans for checkbox):.
```html
  ABC
```
But sometimes we may want to bind the value to a dynamic property on the current
active instance. We can use `v-bind` to achieve that. In addition, using
`v-bind` allows us to bind the input value to non-string values.
#### Checkbox
```html
```
`true-value` and `false-value` are Vue-specific attributes that only work with
`v-model`. Here the toggle property's value will be set to 'yes' when the box is
checked, and set to 'no' when unchecked. You can also bind them to dynamic
values using `v-bind`:
```html
```
#### Radio
```html
```
`pick` will be set to the value of first when the first radio input is checked, and set to the value of second when the second one is checked.
#### Select Options
```html
  123
```
`v-model` supports value bindings of non-string values as well! In the above
example, when the option is selected, selected will be set to the object literal
value of `{ number: 123 }`.
### [Form modifiers](https://vuejs.org/guide/essentials/forms.html#modifiers)
#### `.lazy`
By default, `v-model` syncs the input with the data after each input event. You can add the lazy modifier to instead sync after change events:
```html
```
#### `.number`
If you want user input to be automatically typecast as a number, you can add the
number modifier to your `v-model` managed inputs:
```html
```
If the value cannot be parsed with `parseFloat()`, then the original value is used instead.
The number modifier is applied automatically if the input has `type="number"`.
#### `.trim`
If you want whitespace from user input to be trimmed automatically, you can add
the trim modifier to your `v-model` managed inputs:
```html
```
## [Conditional rendering](https://vuejs.org/tutorial/#step-6)
We can use the `v-if` directive to conditionally render an element:
```html
Vue is awesome!
```
This `` will be rendered only if the value of `awesome` is truthy. If
awesome changes to a falsy value, it will be removed from the DOM.
We can also use `v-else` and `v-else-if` to denote other branches of the condition:
```html
Vue is awesome!
Oh no ðŸ˜¢
```
Because `v-if` is a directive, it has to be attached to a single element. But
what if we want to toggle more than one element? In this case we can use `v-if`
on a `` element, which serves as an invisible wrapper. The final
rendered result will not include the `` element.
```html
  Title
  Paragraph 1
  Paragraph 2
```
Another option for conditionally displaying an element is the `v-show`
directive. The usage is largely the same:
```html
Hello!
```
The difference is that an element with `v-show` will always be rendered and
remain in the DOM; `v-show` only toggles the display CSS property of the element.
`v-show` doesn't support the `` element, nor does it work with
`v-else`.
Generally speaking, `v-if` has higher toggle costs while `v-show` has higher
initial render costs. So prefer `v-show` if you need to toggle something very
often, and prefer `v-if` if the condition is unlikely to change at runtime.
## [List rendering](https://vuejs.org/tutorial/#step-7)
We can use the `v-for` directive to render a list of elements based on a source
array:
```html
    {{ todo.text }}
```
Here `todo` is a local variable representing the array element currently being
iterated on. It's only accessible on or inside the `v-for` element.
Notice how we are also giving each todo object a unique `id`, and binding it as
the special key attribute for each ``. The key allows Vue to accurately move
each `` to match the position of its corresponding object in the array.
There are two ways to update the list:
* Call mutating methods on the source array:
    ```javascript
    this.todos.push(newTodo)
    ```
* Replace the array with a new one:
    ```javascript
    this.todos = this.todos.filter(/* ... */)
    ```
Example:
```vue
    Add Todo
      {{ todo.text }}
      X
```
`v-for` also supports an optional second alias for the index of the current item:
```javascript
data() {
  return {
    parentMessage: 'Parent',
    items: [{ message: 'Foo' }, { message: 'Bar' }]
  }
}
```
```html
  {{ parentMessage }} - {{ index }} - {{ item.message }}
```
Similar to template `v-if`, you can also use a `` tag with `v-for` to
render a block of multiple elements. For example:
```html
    {{ item.msg }}
```
It's not recommended to use `v-if` and `v-for` on the same element due
to implicit precedence. Instead of:
```html
  {{ todo.name }}
```
Use:
```html
    {{ todo.name }}
```
### [`v-for` with an object](https://vuejs.org/guide/essentials/list.html#v-for-with-an-object)
You can also use `v-for` to iterate through the properties of an object.
```javascript
data() {
  return {
    myObject: {
      title: 'How to do lists in Vue',
      author: 'Jane Doe',
      publishedAt: '2016-04-10'
    }
  }
}
```
```html
    {{ value }}
```
You can also provide a second alias for the property's name:
```html
  {{ key }}: {{ value }}
```
And another for the index:
```html
  {{ index }}. {{ key }}: {{ value }}
```
### v-for with a Range
`v-for` can also take an integer. In this case it will repeat the template that
many times, based on a range of `1...n`.
```html
{{ n }}
```
Note here `n` starts with an initial value of 1 instead of 0.