(cid:6)(cid:6)(cid:6)(cid:6)⇀
y ↦ (cid:3), ˆτ ⊢ e1 ∶ τ1 ⇛ ˆe1 ∶ ˆτ1 ⊣
G;
G ⊢ let d = λ
(cid:6)(cid:6)⇀
y ∶ τ . e1 ∶ τ1 ⇛ let d = λ
(cid:6)(cid:6)(cid:6)(cid:6)⇀
y ↦ (cid:3), ˆτ
′
(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)⇀
′ ⋅
, ˆτ
x ↦ (cid:3)
(cid:6)(cid:6)(cid:6)⇀
(cid:6)(cid:6)⇀
′
′ ∶ ˆτ
(cid:3) ∶ ˆτ .
(cid:3)
, ˆe1 ∶ ˆτ1
VAR
V (x) = (cid:3), τ
G; V ⊢ x ⇛ (cid:3) ∶ τ ⊣ V
BUFWRITE
G; V ⊢ writeB (e1 + e2 × size τ1) e3 ⇛ ˆe ⊣ V
G; V ⊢ writebuf (e1 ∶ τ1) e2 e3 ⇛ ˆe ∶ unit ⊣ V
′
′
WRITEINT32
′ ⊢ e2 ⇛ ˆe2 ⊣ V
G; V ⊢ e1 ⇛ ˆe1 ⊣ V
G; V ⊢ writeB e1 (e2 ∶ int32) ⇛ write4 ˆe1 ˆe2 ⊣ V
G; V
′
′′
WRITELITERAL
G; Vi ⊢ writeB (e + oﬀset (
(cid:6)(cid:6)(cid:6)(cid:6)⇀
f = e ∶ τ }) ⇛ ˆe0; . . . ; ˆen−1 ⊣ Vn
(cid:6)(cid:6)⇀
f ∶ τ , fi)) ei ⇛ ˆei ⊣ Vi+1
G; V0 ⊢ writeB e ({
WRITEDEREF
(cid:3) fresh
′ = (cid:3), int32 ⋅ V
V
G; V ⊢ vi ⇛ ˆvi ⊣ V
memcpy v1 v2 n = for (cid:3) ∈ [0; n) write1 (v1 + (cid:3)) (read1 (v2 + (cid:3)) 1)
G; V ⊢ writeB v1 (readbuf (v2 ∶ τ2) 0) ⇛ memcpy v1 v2 (size τ2) ⊣ V
BUFNEW
′ fresh
(cid:3), (cid:3)
G; x ↦ ((cid:3), int32) ⋅ y ↦ ((cid:3)
′
, int32) ⋅ V ⊢ writeB (x + size τ × y) v1 ⇛ ˆe ⊣ V
′
G; V ⊢ newbuf n (v ∶ τ ) ⇛ (cid:3) ∶= new (n × size τ ); for (cid:3)
′ ∈ [0; n) ˆe; (cid:3) ⊣ V
′
Fig. 8. Translating from λow∗ to C♭ (selected rules)
′′
′
to a function on the operand stack before issuing a call
(cid:6)⇀
i2 pushes two arguments on the
instruction: the sequence
operand stack, one for the 32-bit address, and one for the
32-bit value. The store instruction then consumes these two
arguments.
(cid:6)⇀
i1 ;
By virtue of typing, this expression has type unit; for the
translation to be valid, we must push a unit value on the
operand stack, compiled as i32.const 0. A similar mechanism
operates in FOR, where we drop the unit value pushed by the
loop body on the operand stack (a loop growing the operand
stack would be ill-typed in WebAssembly), and push it back
after the loop has ﬁnished.
WebAssembly only offers a ﬂat view of memory, but Low∗
programs are written against a memory stack where array
allocations take place. We thus need to implement run-time
memory management, the only non-trivial bit of our transla-
tion. Our implementation strategy is as follows. At address 0,
the memory always contains the address of the top of the stack,
which is initially 1. We provide three functions for run-time
memory stack management.
get stack
set stack
= func [] → i32 local []
i32.const 0; i32.load
= func i32 → [] local
(cid:6)(cid:6)(cid:6)⇀
(cid:3) ∶ i32
(cid:6)(cid:6)(cid:6)⇀
(cid:3) ∶ i32
i32.const 0; get local (cid:3); i32.store
grow stack = func i32 → i32 local
call get stack; get local (cid:3); i32.op+;
call set stack; call get stack
Thus, allocating uninitialized memory on the memory stack
merely amounts to a call to grow stack (rule NEW). Functions
save the top of the memory stack on top of the operand stack,
then restore it before returning their value (rule FUNC).
Combining all these rules, the earlier fadd is compiled as
shown in Figure 10.
Looking forward. This formalization serves as a succinct
description of our compiler as well as a strong foundation
for future theoretical developments, while subsequent sections
demonstrate the applicability and usefulness of our approach.
This is, we hope, only one of many future papers connecting
state-of-the-art veriﬁcation tools to WASM. As such,
the
present paper leaves many areas to be explored. In partic-
ular, we leave proofs for these translations to future work.
The original formalization only provides paper proofs in the
appendix [9]; since we target simpler and cleaner semantics
(WASM instead of C), we believe the next ambitious result
should be to perform a mechanical proof of our translation,
leveraging recent formalizations of the WASM semantics [5].
IV. VERIFIED CRYPTOGRAPHY IN WEBASSEMBLY
We now describe the ﬁrst application of our toolchain:
WHACL∗, a WebAssembly version of the (previously exist-
ing) veriﬁed HACL∗ crypto library [18]. Compiling such a
large body of code demonstrates the viability of our toolchain
approach. In addition, we validate the generated code using a
new secret independence checker for WebAssembly.
A. The source: HACL∗
HACL∗ is a veriﬁed library of cryptographic primitives that
is implemented in Low∗ and compiled to C via KreMLin [18].
It includes implementations of Chacha20 and Salsa20, AES,
GCM, Curve25519, Poly1305, Ed25519, HMAC-SHA256,
and the SHA2 family. Hence, it provides a full implementation
of the NaCl API [30] and many of the key cryptographic
algorithms used in modern protocols like TLS 1.3 and Signal.
HACL∗ code is currently used by the Firefox browser and
WireGuard VPN, among others.
HACL∗ is a choice application for our toolchain: it im-
plements many of the newer cryptographic algorithms that
are supported by neither WebCrypto nor older versions of
OpenSSL. Indeed, WebCrypto supports none of: the Salsa fam-
ily; Poly1305; or any of the Curve25519 family of APIs [11].
In contrast, WebAssembly is already available for 81% [31]
of the userbase, and this number is only going to increase.
Furthermore, developers now have access to a uniﬁed ver-
iﬁed cryptographic library for both their C and Web-based
1263
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
WRITE32
(cid:6)⇀
ˆe1 ⇛
i1
(cid:6)⇀
i1 ;
ˆe2 ⇛
(cid:6)⇀
i2
write4 ˆe1 ˆe2 ⇛
(cid:6)⇀
i2 ; i32.store; i32.const 0
NEW
new ˆe ⇛
(cid:6)⇀
i
ˆe ⇛
(cid:6)⇀
i ; call grow stack
FOR
(cid:6)⇀
i
ˆe ⇛
for (cid:3) ∈ [0; n) ˆe ⇛
loop(
(cid:6)⇀
i ; drop;
get local (cid:3); i32.const 1; i32.op+; tee local (cid:3);
i32.const n; i32.op =; br if); i32.const 0
FUNC
let d = λ
d = func
(cid:6)⇀
i
ˆe ⇛
ˆτi ⇛ ti
(cid:6)(cid:6)(cid:6)⇀
(cid:3)2 ∶ ˆτ2, ˆe ∶ ˆτ ⇛
(cid:6)(cid:6)(cid:6)⇀
(cid:3)1 ∶ ˆτ1.
(cid:6)⇀
t1 → t local
call get stack;
(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)⇀
(cid:3)1 ∶ t1 ⋅ (cid:3)2 ∶ t2 ⋅ (cid:3) ∶ t.
(cid:6)⇀
i ; store local (cid:3) ; call set stack; get local (cid:3)
Fig. 9. Translating from C♭ to WebAssembly (selected rules)
f add = func [int32; int32; int32] → []
local [(cid:3)0, (cid:3)1, (cid:3)2 ∶ int32; (cid:3)3 ∶ int32; (cid:3) ∶ int32].
call get stack; loop(
// Push dst + 8*i on the stack
get local (cid:3)0; get local (cid:3)3; i32.const 8; i32.binop∗; i32.binop+
// Load a + 8*i on the stack
get local (cid:3)1; get local (cid:3)3; i32.const 8; i32.binop∗; i32.binop+
i64.load
// Load b + 8*i on the stack (elided, same as above)
// Add a.[i] and b.[i], store into dst.[i]
i64.binop+; i64.store
// Per the rules, return unit
i32.const 0; drop
// Increment i; break if i == 5
get local (cid:3)3; i32.const 1; i32.binop+; tee local (cid:3)3
i32.const 5; i32.op =; br if
); i32.const 0
store local (cid:3) ; call set stack; get local (cid:3)
Fig. 10. Compilation of the fadd example to WebAssembly
applications; rather than dealing with two different toolchains,
a single API is used for both worlds. This comes in contrast to
applications that use various unveriﬁed versions of platform-
speciﬁc crypto libraries through C, Java, or JavaScript APIs.
B. The WebAssembly translation: WHACL∗
We successfully compiled all the algorithms above to Web-
Assembly using KreMLin, along with their respective test
suites, and dub the resulting library WHACL∗, for Web-
HACL∗, a novel contribution. All test vectors pass when the
resulting WebAssembly code is run in a browser or in node.js,
which serves as experimental validation for our compiler.
Once compiled to WebAssembly, there are several ways
clients can leverage WHACL∗. In a closed-world setting,
the whole application can be written in Low∗, meaning one
compiles the entire client program with KreMLin in a single
pass (which we do with Signal∗ in V). In this scenario,
JavaScript only serves as an entry point, and the rest of
the program execution happens solely within WebAssembly.
KreMLin automatically generates boilerplate code to: load
the WebAssembly modules; link them together, relying on
JavaScript for only a few library functions (e.g. for debugging).
Primitive (blocksize, #rounds)
Curve25519 (1k)
Chacha20 (4kB, 100k)
Salsa20 (4kB, 100k)
Ed25519 sign (16kB, 1k)
Ed25519 verify (16kB, 1k)
Poly1305 32 (16kB, 10k)
Poly1305 64 (16kB, 10k)
SHA2 256 (16kB, 10k)
SHA2 512 (16kB, 10k)
(A)
0.83 s
1.86 s
1.55 s
3.01 s
3.07 s
0.27 s
1.93 s
1.64 s
1.16 s
(B)
0.15 s
1.74 s
2.24 s
0.27 s
0.24 s
0.19 s
0.19 s
1.84 s
1.21 s
(C)
4.05 s
6.62 s
5.52 s
15.6 s
15.6 s
11.5 s
3.5 s
3.2 s
Fig. 11.
libsodium and (C) is WHACL∗.
Performance evaluation of HACL∗. (A) is HACL∗/C, (B) is
In an open-world setting, clients will want to use WHACL∗
from JavaScript. We rely on the KreMLin compiler to en-
sure that only the top-level API of WHACL∗ is exposed
(via the exports mechanism of WebAssembly) to JavaScript.
These top-level entry points abide by the restrictions of the
WebAssembly-JavaScript FFI, and only use 32-bit integers
(64-bit integers are not representable in JavaScript). Next,
we automatically generate a small amount of glue code; this
code is aware of the KreMLin compilation scheme, and takes
JavaScript ArrayBuffers as input, copies their contents into the
WebAssembly memory, calls the top-level entry point, and
marshals back the data from the WebAssembly memory into
a JavaScript value. We package the resulting code as a portable
node.js module for easy distribution.