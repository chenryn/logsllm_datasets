21.1.1DES/AES基本加解密
685/1144
在Python中，我们使用PyCrypto进行DES/AES的加解密，这里选
取AES进行介绍（DES的方法与之相同），代码如下：
from Crypto.CipherimportAES
m="flag(aes_666666)
key=1234567890abcdef
iv="fedcba0987654321"
cipher=AES.new(key,AES.MODE_CBC,iv)
c=cipher.encrypt（m)
print c.encode(hex")
cipher=AES.new（key,AES.MODE_CBC,iv)
m=cipher.decrypt(c)
print m
输出结果如下：
f5e6826d043126e68533c613a78e8618
flag(aes_666666)
因为密文里面包含不可见字符，所以在输出时使用了hex编码。
---
## Page 686
CTF特训营：技术详解、解题方法与
21.1.2分组密码CBCbit翻转攻击
686/1144
21.1.2分组密码CBCbit翻转攻击
首先来了解两种加密模式。
ECB：一种基础的加密模式，密文被分割成分组长度相等的块
（若不足则补齐），然后单独逐个加密，并逐个输出组成密文
CBC：一种循环模式，前一个分组的密文与当前分组的明文进
行异或操作后再加密，这样做的目的是增强破解难度
在CBC模式下，明文分组并与前一组密文进行异或操作的模式造
就了CBC模式的bit翻转攻击。
在CBC模式的密文中，在不知道密钥的情况下，如果我们有一组
明密文，就可以通过修改密文，来使密文解密出来的特定位置的学符
变成我们想要的字符了。
原理很简单，首先我们进行一次完整的AES的CBC模式的加密
代码如下：
fromCrypto.CipherimportAES
m=hahahahahahahaha=1;admin=0;uid=1
key="1234567890abcdef
---
## Page 687
CTF特训营：技术详解、解题方法与
21.1.2分组密码CBCbit翻转攻击
687/1144
iv=fedcba0987654321"
cipher=AES.new（key,AES.MODE_CBC,iv)
c=cipher.encrypt(m)
print c.encode("hex")
输出结果如下：
49a98685a527bdfa4077c400963a4e3c9effb4148566f10bce9e07ccbb731896
在CBC模式的加密过程中，明文长度是32字节，16字节为一
组，实际上是被分成了两组，如下：
hahahahahahahaha
=1;admin=0;uid=1
在CBC模式下首先对第一组进行加密，并与初始向量iv进行异或
操作，再对第二组进行加密，并与第一组的密文进行异或操作。因为
第二组加密后与第一组进行异或操作了，所以，可以利用异或操作来
进行明文的修改。
首先，我们找到想要修改的位置：
=1;admin=0;uid=1
我们想要将admin=0改成admin=1，也就是将第二组的第10个字
---
## Page 688
CTF特训营：技术详解、解题方法与
21.1.2分组密码CBCbit翻转攻击
688/1144
符从“0”变成”1”。已知分组密码的明文和密文的长度都是相同的
都是两组，而第二组的第10个字符的密文异或过第一组的第10个字
符的密文，如果我们通过异或“0”再异或“1”，那么在解密的时候
“0”异或“0”就变成了0，也就是说，明文就变成了“1”。下面使
用Python写一个攻击的函数，代码如下：
def cbc_bit_attack_mul（c,m,position,target:
1=len（position)
r=C
for i in range(l):
change=position[]-16
tmp=chr(ord（m[position[i])^ord(target[i])^ord(c[change])
r=r[0:change]+tmp+r[change+1:]
return r
其中c是密文，m是明文，position和target是两个长度相同的
list，position代表想要改变的字符在明文中的位置（从o开始），target
代表想要改变的字符。使用此函数进行攻击，代码如下
fromCrypto.CipherimportAES
m="hahahahahahahaha=1;admin=0;uid=1
key="1234567890abcdef
iv="fedcba0987654321"
cipher=AES.new(key,AES.MODE_CBC,iv)
c=cipher.encrypt(m)
print c.encode("hex")
defcbc_bit_attack_mul(c,m,position,target)：
|=len(position)
r=c
for i in range(l):
---
## Page 689
CTF特训营：技术详解、解题方法与
21.1.2分组密码CBCbit翻转攻击
689/1144
change=position[ij-16
r=r[0:change]+tmp+r[change+1:]
returnr
c_new=cbc_bit_attack_mul（c,m,[16+10-1],[1])
cipher = AES.new(key, AES.MODE_CBC,iv)
m=cipher.decrypt(c_new)
print m
输出结果如下：
49a98685a527bdfa4077c400963a4e3c9effb4148566f10bce9e07ccbb731896
9(riCoo=1;admin=1;uid=1
可以看到，通过对攻击获取到的c_new进行解密后，admin的值
成功变成了1，但是，第一组的明文变成了乱码。通常，如果CTF赛
题的考点是bit翻转攻击的话，那么第一组的明文一般是无关紧要的
所以可以不用考虑这个乱码的问题。
---
## Page 690
CTF特训营：技术详解、解题方法与
21.1.3分组密码CBC选择密文攻击
690/1144
21.1.3分组密码CBC选择密文攻击
通过CBC模式选择密文攻击，可以很快恢复出AES的向量IV。
CBC模式下，明文每次加密前都会与IV异或，每组IV都会更新为上一
组的密文。如果构造两个相同的C，也就是待解密的密文为CIC时
那么我们得到的密文是通过如下步骤得到的：
Decrypt(C)C=M
Decrypt(C)IV=Mo
所以：
Decrypt（C)C^Decrypt(C)IV=MMo
IV=M^M^C
即可获得IV。
def cbc_chosen_cipher_recover_iv(cc,mm)：
assert cc[0:16]==cc[16:32]
def _xorstr(a,b):
S =
foriinrange(16):
s+=chr（ord（a[])ord(b[i])）)
return s
---
## Page 691
CTF特训营：技术详解、解题方法与
21.1.3分组密码CBC选择密文攻击
691/1144
p0=mm[0:16]
p1=mm[16:32]
return_xorstr（_xorstr（p0,p1),cc[0:16])
printcbc_chosen_cipher_recover_iv(1"*32,3eXZvNanqYff/
kGAyqkXJ4Wi1eaC78ffnZAU0JX/Q2Q=".decode(base64"))
输出结果如下：
iv=key_is_danger
---
## Page 692
CTF特训营：技术详解、解题方法与
21.1.4分组密码CBCpaddingoracle攻击
692/1144
21.1.4分组密码CBCpaddingoracle攻击
分组密码CBC模式的paddingoracle攻击需要满足如下特定条
件：
1）加密时采用了PKCS5的填充（填充的数值是填充的字符个
数)；
2）攻击者可以和服务器进行交互，可以获取密文，服务器会以
某种返回信息告知客户端的padding是否正常。
攻击效果是在不清楚key和iIV的时候解密任意给定的密文
paddingoracle攻击是利用服务器通过对padding检查时的不同回
显进行的。这是一种侧信道攻击。利用服务器对padding的检查，可
以从末位开始逐位爆破明文。
在CBC模式下对某一个blockC2的解密是根据如下算式进行的：
M2=Dk（C2)^C1。可以在C2前拼接一个我们构造的F，向服务器发送F
C2解密。因此爆破最后一位明文的流程如下：
1）枚举M2的最后一位x；
---
## Page 693
CTF特训营：技术详解、解题方法与
21.1.4分组密码CBCpaddingoracle攻击
693/1144
2）构造F的最后一位为×^1；
3）发送并观察padding的判断结果是否正确，若错误则返回1。
使用以上方法的原因是，当F的最后一位为x^1时，如果x的值和
M2的最后一位相同，那么，在解密的时候有：Dk（C2)[-1}x^1=1，为
padding的长度，进而可以确认Dk（C2)-1]的值。同理依次可以逆推出
倒数第二位，第三位。
---
## Page 694
CTF特训营：技术详解、解题方法与
21.1.5Feistel结构分析
694/1144
21.1.5Feistel结构分析
在Feiste结构中，如果右边的加密是线性的话，那么可以实现已
知明文攻击。分析如下题目：
import os
def xor(a,b):
assert len(a)==len(b)
C=*
for i in range(len(a)):
c+=chr(ord（a[i])^ord(b[i]))
returnc
def f(x,k):
return xor(xor(x,k),7)
def round(M,K):
L=M[0:27]
R=M[27:54]
newI=R
new_r=xor(xor(R,L),K)
return new_I+new_r
def fez(m,K):
foriinK:
m=round(m,i)
return m
K=
foriin range(7):
K.append(os.urandom(27))
m=open("flag","rb").read()
assert len(m)<54
m+=os.urandom(54-len(m))
test=os.urandom(54)
print test.encode("hex")
printfez(test,K).encode("hex")
print fez(m,K).encode(hex")
---
## Page 695
CTF特训营：技术详解、解题方法与
21.1.5Feistel结构分析
695/1144
我们可以看到F函数就是简单的LRk，并且只有7轮，那么我们
列出7轮密钥和明密文的关系，可以很容易推理出k的值，然后用K再
去异或密文就可以得到flag。
def xor(a,b):
assert len(a)==len(b)
C=
fori in range(len(a):
c+=chr（ord（a[j])ord(b[i]))
returnc
m1="
c8b84d08e5a8e60a49578f387fff5a90e9e7c181734bf05be4f5403c9ea24a0b8741a3
29991637e11fa69019cd3b01d7c95b65f5abd5".decode("hex")
c1="
5c3660c27cb9b3785a5ce06022e88bc831017e882d39475ea85d919ad9e5ac498f86
c553216cab1f8f7468353d46ba8971efa9ca8c81".decode(hex")
c2=
519ab6fc0e435da00516b844f8fe664bfe9445992f478dc650701739a11ffda5bbeb643
159d7e8cd03a2104c798a1ca734b905ee6c76".decode("hex")
#m1=
a58d3c144a0a43268de2ef69c550f795cc73fe0edc9026c624c95653c06b71e17abba
b4e78c61040fecd88a5df302c7e379930451298".decode(hex")
#c1="
060bbfdccd57baef9f7c712be4546f8a63d12abd9b9c2e4a853046f072089125b69179
0a7b30e31506c22f25f231496945fb7ad4cea3".decode("hex")
#c2="
9101661585e8e39fde9cdaee916763c7781a5688ce868e09750efea4919e2d5467ed
4bb518072bc3015884962cf9cb7039339cc82be7".decode(hex)
c1|=c1[0:27]
c1r=c1[27:54]
c2|=c2[0:27]
c2r=c2[27:54]
m11=m1[0:27]
m1r=m1[27:54]
r=xor(xor(c1l,c2l),m1r)
print r.encode("hex")
printxor(c1r,xor（m1r,xor(m1l,xor(c2r,r)))
print r
---
## Page 696
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
696/1144
21.1.6攻击伪随机数发生器
机序列（也称为乱数序列）与明文简单结合生成密文。我们将与明文
结合的元素称为密钥流（也称之为乱数），将产生密钥流元素的部件
称为密钥流发生器。一个序列密码方案是否具有很高的密码强度主要
取决于密钥流发生器的设计。
计算机中的随机数有多种生成方式，但是很多方式都存在看脆弱
性，可以实现一定程度的攻击。
首先最简单的是，如果随机数发生器使用时间作为种子，那么可
以对时间种子进行爆破，实现攻击。观察如下题目：
class Unbuffered(object):
definit（self,stream):
self.stream= stream
def write(self, data):
self.stream.write(data)
self.stream.flush()
def getattr_（self, attr):
return getattr(self.stream, attr)
importsys
sys.stdout = Unbuffered(sys.stdout)
import signal
signal.alarm(600)
import random
---
## Page 697
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
697/1144
import time
flag=open(/root/level0/flag","r").read()
random.seed(int(time.time()))
def check():
recv=int(raw_input())
ifrecv==random.randint(0,2**64):
print flag
return True
else:
print “tql"
returnFalse
while 1:
if check():
break
该题目中使用了int（time.time（））作为种子，这是很容易爆破的
那么我们可以根据当前时间向前逆推，实现爆破。攻击代码如下：
from zio import *
importtime
import random
target=(47.74.44.24",10000)
io=zio(target)
def getstream（times):
for i in range(times-1):
random.randint(0,2*64)
returnrandom.randint(0,2**64)
times=0
now=int（time.time()+10
while 1:
now-=1
times+=1
seed=random.seed(now)
io.writeline(str(getstream(times))
if"atum”not in io.readline():
break
---
## Page 698
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
698/1144
除了爆破种子外，还有其他的攻击方式。首先我们简单介绍一下
伪随机数发生器中常常使用的一种结构，如图21-1所示。
State:
ndno
图21-1伪随机数发生器结构示意图
当种子被输入后，通过某种算法会生成stateo到staten，通过另
外一种算法，每个state可以生成我们的output。我们可以通过若干个
output逆推出一个完整的state，进而实现随机数的预测。以
java.util.Random为例，首先它使用48bit的seed作为初态，然后state
之间的变换函数为：
next_state=(state*multiplier+addend)mod(2^precision)
其中：
multiplier=25214903917
---
## Page 699
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
699/1144
addend=11