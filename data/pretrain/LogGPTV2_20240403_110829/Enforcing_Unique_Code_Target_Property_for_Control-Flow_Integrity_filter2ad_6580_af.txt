enforce the UCT property.
However, we believe the performance number of µCFI on these
benchmarks will be better than that reported in PittyPat, and
will be more efficient than existing memory safety solutions. As
we discuss in §5.3, µCFI takes the same structure as PittyPat to
perform online point-to analysis, but with significantly less PT
packets and accurate (unique) target for each control data (shown
in Figure 8). Therefore, the enforcement by µCFI is more lightweight
and robust. µCFI also performs better than existing memory safety
solutions. For example, Softbound [42], the commonly referred
memory safety solution, introduces about 250% overhead to the
benchmark h264ref, while µCFI only introduces 25% slow down. For
benchmark sjeng, the overhead is about 80% for Softbound, while
only about 18% for µCFI. Therefore, we strongly believe even in
our missed benchmarks, µCFI is likely to be efficient than existing
memory safety solutions.
6.5 Future work
A common challenge for CFI systems is validating control-flow
changes caused by signals [9] and exceptions [55]. Considering that
signal handling and exception handling are OS-dependent, we leave
them as future work. µCFI can be extended to handle these cases,
as Intel PT by default records the targets of signals and exceptions
in FUP packets. We can label the structures used to register and
store handler data as constraining data, and record them with our
technique for arbitrary data collection. In the monitor, we can save
these data structures, and use them to check with the FUP packets to
validate the control-flow transfers caused by signals and exceptions.
Another challenge for CFI systems is validating the edges in dy-
namically loaded code (e.g., shared libraries). Other works address
this problem using modular CFI [46, 47]. We choose to focus on
protecting the main binary in µCFI, and model a set of well-known
library functions to guarantee the correctness of the points-to anal-
ysis, like memcpy and malloc. Our techniques also apply to libraries,
and we leave the stitching of our models at runtime to future work.
7 RELATED WORK
Control-flow attacks are the predominate method to exploit mem-
ory errors. The attack method has evolved from code injection
to code reuse, in which code snippets in the victim program are
chained to achieve expressive attacks, like ret2libc [45] and return-
oriented programming (ROP) [7–9, 13, 56, 57]. Researchers have pro-
posed randomization techniques to mitigate code-reuse attacks [4,
5, 16, 19, 39, 40, 64]. For example, address space layout randomiza-
tion (ASLR) is widely deployed in modern operating systems [51].
However, recent works [26, 27, 49] demonstrate that randomization-
based solutions have inherent weaknesses and can still be bypassed.
CFI is a principled solution to prevent control-hijacking attacks [1].
The idea is to statically draw a control-flow graph (CFG) to define
all legitimate control-flow transfers and dynamically check the exe-
cution against the CFG. µCFI follows the idea of CFI, and proposes
online points-to analysis with full execution context to achieve the
strongest CFI enforcement.
Coarse-grained CFI solutions, like CCFIR [68] and BinCFI [69],
achieve strong compatibility and good performance, but fail to
provide strong security guarantee to eliminate all control-hijacking
attacks [10, 25, 55]. Fine-grained CFI, like type-based CFI [46, 59,
62], significantly reduces the number of allowed targets. However,
none of them can guarantee the UCT property, due to the missing
execution context. Our system µCFI is the first work that guarantees
the UCT property while introducing small performance overhead.
Several hardware features are used to provide efficient CFI en-
forcement, like branch tracing store [65], and last branch record [15,
50]. However, following works [11, 25] have demonstrated attacks
against these efficient CFI solutions. Recent works [23, 28] use PT
to record the complete execution path and validate the ICT with a
static control-flow graph. However, these solutions are best-effort
and over-approximate the set of valid targets due to the limitation
of static analysis. PittyPat [21] performs online points-to analysis
using the PT trace, but fails to enforce the UCT property due to the
missing constraining data. µCFI utilizes full execution context to
perform the points-to analysis, and thus is able to get the unique
code target for each invocation of each ICT instruction.
Memory safety detects memory errors at runtime and thus pre-
vents subsequent exploitation. Spatial memory safety guarantees
that each memory access is within the expected boundary and
prevents errors like buffer overflow and NULL-pointer derefer-
ence [3, 35, 42, 44, 67], while temporal memory safety detects access
violations due to incorrect memory release and reuse, like user-
after-free [18, 37, 60, 66]. Unfortunately, memory safety solutions
introduce high overhead (usually over 100%) and make runtime
hardening impractical. µCFI is a lightweight solution focusing on
control data for better performance.
8 CONCLUSION
In this paper, we present the Unique Code Target (UCT) property
for CFI, which guarantees that for each invocation of any indirect
control-transfer instruction, there is one and only one allowed
target. A CFI implementation enforcing the UCT property can stop
all control-flow hijacking attacks that compromise control data. We
prototype the first CFI system that satisfies the UCT property. Our
system, µCFI, combines static program instrumentation with online
points-to analysis to infer the unique code target. The evaluation
shows that µCFI successfully enforces the UCT property for all
protected programs, and stops real-world and advanced control-
hijacking attacks while incurring less than 10% overhead.
ACKNOWLEDGMENT
We thank the anonymous reviewers for their helpful feedback.
This research was supported in part by the DARPA Transparent
Computing program under contract DARPA-15-15-TC-FP006, by
the ONR under grants N00014-17-1-2895, N00014-15-1-2162 and
N00014-18-1-2662. Any opinions, findings, conclusions or recom-
mendations expressed in this material are those of the authors and
do not necessarily reflect the views of DARPA and ONR.
REFERENCES
[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-flow
Integrity. In Proceedings of the 12th ACM Conference on Computer and Communi-
cations Security.
[2] Ali Juanquan. 2017. FFmpeg CVE-2016-10191. http://www.freebuf.com/vuls/
148389.html.
[3] Todd M. Austin, Scott E. Breach, and Gurindar S. Sohi. 1994. Efficient Detection
of All Pointer and Array Access Errors. In Proceedings of the ACM SIGPLAN 1994
Conference on Programming Language Design and Implementation.
[4] Michael Backes and Stefan Nürnberger. 2014. Oxymoron: Making Fine-grained
Memory Randomization Practical by Allowing Code Sharing. In Proceedings of
the 23rd USENIX Conference on Security Symposium.
[5] David Bigelow, Thomas Hobson, Robert Rudd, William Streilein, and Hamed
Okhravi. 2015. Timely Rerandomization for Mitigating Memory Disclosures. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications
Security.
[6] bird. 2017. CVE-2016-10190 FFmpeg Heap Overflow. https://security.tencent.
com/index.php/blog/msg/116.
[7] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and Dan Boneh.
2014. Hacking Blind. In Proceedings of the 35th IEEE Symposium on Security and
Privacy.
[8] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-
Oriented Programming: A New Class of Code-reuse Attack. In Proceedings of the
6th ACM Symposium on Information, Computer and Communications Security.
[9] Erik Bosman and Herbert Bos. 2014. Framing Signals - A Return to Portable
Shellcode. In Proceedings of the 35th IEEE Symposium on Security and Privacy.
[10] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R.
Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow In-
tegrity. In Proceedings of the 24th USENIX Security Symposium.
[11] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking
Modern Defenses. In Proceedings of the 23rd USENIX Conference on Security
Symposium.
[12] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing Software by
Enforcing Data-Flow Integrity. In Proceedings of the 7th Symposium on Operating
Systems Design and Implementation.
[13] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi,
Hovav Shacham, and Marcel Winandy. 2010. Return-Oriented Programming
Without Returns. In Proceedings of the 17th ACM Conference on Computer and
Communications Security.
[14] Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravishankar K. Iyer.
2005. Non-Control-Data Attacks Are Realistic Threats. In Proceedings of the 14th
USENIX Security Symposium.
[15] Yueqiang Cheng, Zongwei Zhou, Miao Yu, Xuhua Ding, and Robert H Deng.
2014. ROPecker: A generic and practical approach for defending against ROP
attacks. In Proceedings of the 21st Annual Network and Distributed System Security
Symposium.
[16] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen,
Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor:
Practical Code Randomization Resilient to Memory Disclosure. In Proceedings of
the 36th IEEE Symposium on Security and Privacy.
[17] Thurston H.Y. Dang, Petros Maniatis, and David Wagner. 2015. The Performance
Cost of Shadow Stacks and Stack Canaries. In Proceedings of the 10th ACM
Symposium on Information, Computer and Communications Security.
[18] Thurston H.Y. Dang, Petros Maniatis, and David Wagner. 2017. Oscar: A Practical
Page-Permissions-Based Scheme for Thwarting Dangling Pointers. In Proceedings
of the 26th USENIX Security Symposium.
[19] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and
Fabian Monrose. 2015. Isomeron: Code Randomization Resilient to (Just-In-Time)
Return-Oriented Programming. In Proceedings of the 22nd Annual Network and
Distributed System Security Symposium.
https://github.com/dctf/exploits/blob/master/
[20] dctf. 2017.
sploit.php.
CVE-2015-8617/sploit.php.
[21] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim, and Wenke
Lee. 2017. Efficient Protection of Path-Sensitive Control Security. In Proceedings
of the 26th USENIX Security Symposium.
[22] Aeon Flux. 2013. sudo 1.8.0 < 1.8.3p1 - ’sudo_debug’ glibc FORTIFY_SOURCE
Bypass + Privilege Escalation. https://www.exploit-db.com/exploits/25134/.
[23] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. GRIFFIN: Guarding Con-
trol Flows Using Intel Processor Trace. In Proceedings of the 22nd International
Conference on Architectural Support for Programming Languages and Operating
Systems.
[24] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. Griffin Trace. https://github.
com/TJAndHisStudents/Griffin-Trace.
[25] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Gerogios Portokalidis. 2014.
Out of Control: Overcoming Control-Flow Integrity. In Proceedings of the 35th
IEEE Symposium on Security and Privacy.
[26] Enes Göktaş, Robert Gawlik, Benjamin Kollenda, Elias Athanasopoulos, Georgios
Portokalidis, Cristiano Giuffrida, and Herbert Bos. 2016. Undermining Informa-
tion Hiding (and What to Do about It). In Proceedings of the 25th USENIX Security
Symposium.
[27] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017.
ASLR on the Line: Practical Cache Attacks on the MMU. In Proceedings of the
24th Annual Network and Distributed System Security Symposium.
[28] Yufei Gu, Qingchuan Zhao, Yinqian Zhang, and Zhiqiang Lin. 2017. PT-CFI:
Transparent Backward-Edge Control Flow Violation Detection Using Intel Pro-
cessor Trace. In Proceedings of the 7th ACM on Conference on Data and Application
Security and Privacy.
[29] Fan Guo, Yongkun Li, Yinlong Xu, Song Jiang, and John C. S. Lui. 2017. SmartMD:
A High Performance Deduplication Engine with Mixed Pages. In Proceedings of
the 2017 USENIX Annual Technical Conference.
[30] Istvan Haller, Yuseok Jeon, Hui Peng, Mathias Payer, Cristiano Giuffrida, Her-
bert Bos, and Erik van der Kouwe. 2016. TypeSan: Practical Type Confusion
Detection. In Proceedings of the 23rd ACM SIGSAC Conference on Computer and
Communications Security.
[31] Michael Hicks. 2014. What is memory safety? http://www.pl-enthusiast.net/
2014/07/21/memory-safety/.
[32] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek Saxena,
and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness of
Non-control Data Attacks. In Proceedings of the 37th IEEE Symposium on Security
and Privacy.
[33] Intel. 2016.
Intel Releases New Technology Specifications to Protect
https://software.intel.com/en-us/blogs/2016/06/09/
Against ROP attacks.
intel-release-new-technology-specifications-protect-rop-attacks.
[34] Kangkook Jee, Vasileios P. Kemerlis, Angelos D. Keromytis, and Georgios Por-
tokalidis. 2013. ShadowReplica: Efficient Parallelization of Dynamic Data Flow
Tracking. In Proceedings of the 20th ACM SIGSAC Conference on Computer and
Communications Security.
[35] Trevor Jim, J. Greg Morrisett, Dan Grossman, Michael W. Hicks, James Cheney,
and Yanling Wang. 2002. Cyclone: A Safe Dialect of C. In Proceedings of the
USENIX Annual Technical Conference.
[36] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R. Sekar,
and Dawn Song. 2014. Code-pointer Integrity. In Proceedings of the 11th USENIX
Conference on Operating Systems Design and Implementation.
[37] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo Kim, Long
Lu, and Wenke Lee. 2015. Preventing Use-after-free with Dangling Pointers
Nullification. In Proceedings of the 22nd Annual Network and Distributed System
Security Symposium.
[38] Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee. 2015. Type
Casting Verification: Stopping an Emerging Attack Vector. In Proceedings of the
24th USENIX Security Symposium.
[39] Kangjie Lu, Stefan Nürnberger, Michael Backes, and Wenke Lee. 2016. How to
Make ASLR Win the Clone Wars: Runtime Re-Randomization. In Proceedings of
the 23rd Annual Network and Distributed System Security Symposium.
[40] Kangjie Lu, Chengyu Song, Byoungyoung Lee, Simon P. Chung, Taesoo Kim, and
Wenke Lee. 2015. ASLR-Guard: Stopping Address Space Leakage for Code Reuse
Attacks. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security.
[41] Konrad Miller, Fabian Franz, Marc Rittinghaus, Marius Hillenbrand, and Frank
Bellosa. 2013. XLH: More Effective Memory Deduplication Scanners Through
Cross-layer Hints. In Proceedings of the 2013 USENIX Annual Technical Conference.
[42] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic.
2009. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C.
In Proceedings of the 30th ACM SIG-PLAN Conference on Programming Language
Design and Implementation.
[43] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic.
2010. CETS: Compiler Enforced Temporal Safety for C. In Proceedings of the 9th
International Symposium on Memory Management.
[44] George C. Necula, Scott McPeak, and Westley Weimer. 2002. CCured: Type-safe
Retrofitting of Legacy Code. In Proceedings of the 29th ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Languages.
[45] Nergal. 2001. The Advanced Return-into-lib(c) Exploits. http://phrack.org/issues/
[46] Ben Niu and Gang Tan. 2014. Modular Control-flow Integrity. In Proceedings
of the 35th ACM SIGPLAN Conference on Programming Language Design and
Implementation.
[47] Ben Niu and Gang Tan. 2014. RockJIT: Securing just-in-time compilation using
modular control-flow integrity. In Proceedings of the 21st ACM SIGSAC Conference
on Computer and Communications Security.
[48] Ben Niu and Gang Tan. 2015. Per-Input Control-Flow Integrity. In Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications Security.
[49] Angelos Oikonomopoulos, Elias Athanasopoulos, Herbert Bos, and Cristiano
Giuffrida. 2016. Poking Holes in Information Hiding. In Proceedings of the 25th
USENIX Security Symposium.
[50] Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis. 2013. Trans-
parent ROP Exploit Mitigation Using Indirect Branch Tracing. In Proceedings of
the 22nd USENIX Security Symposium.
[51] PaX Team. 2003. PaX Address Space Layout Randomization (ASLR). http://pax.
58/4.html.
grsecurity.net/docs/aslr.txt.
whole-program-llvm.
[52] Tristan Ravitch. 2017. Whole Program LLVM. https://github.com/travitch/
[53] Karlsruhe Institute of Technology. 2016. Exploitation Training – CVE-2013-2028:
Nginx Stack Based Buffer Overflow . https://github.com/kitctf/nginxpwn.
[54] Tencent Xuanwu Lab. 2016. Return Flow Guard. http://xlab.tencent.com/en/
2016/11/02/return-flow-guard/.
[55] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming:
On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In
Proceedings of the 36th IEEE Symposium on Security and Privacy.
[56] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-
into-libc Without Function Calls (on the x86). In Proceedings of the 14th ACM
Conference on Computer and Communications Security.
[57] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2013. Just-In-Time Code Reuse: On the Ef-
fectiveness of Fine-Grained Address Space Layout Randomization. In Proceedings
of the 34th IEEE Symposium on Security and Privacy.
[58] Chengyu Song, Byoungyoung Lee, Kangjie Lu, William R. Harris, Taesoo Kim,
and Wenke Lee. 2016. Enforcing Kernel Security Invariants with Data Flow
Integrity. In Proceedings of the 23th Annual Network and Distributed System
Security Symposium.
[59] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-edge Control-
flow Integrity in GCC & LLVM. In Proceedings of the 23rd USENIX Security
Symposium.
[60] Erik van der Kouwe, Vinod Nigade, and Cristiano Giuffrida. 2017. DangSan: Scal-
able Use-after-free Detection. In Proceedings of the Twelfth European Conference
on Computer Systems.
[61] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical Context-
Sensitive CFI. In Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security.
[62] Victor van der Veen, Enes Goktas, Moritz Contag, Andre Pawlowski, Xi Chen,
Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano
Giuffrida. 2016. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the
Binary Level. In Proceedings of the 37th IEEE Symposium on Security and Privacy.
[63] w00d. 2013. Analysis of nginx 1.3.9/1.4.0 stack buffer overflow and x64 ex-
ploitation (CVE-2013-2028). http://www.vnsecurity.net/research/2013/05/21/
analysis-of-nginx-cve-2013-2028.html.
[64] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012.
Binary Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary
Code. In Proceedings of the 19th ACM SIGSAC Conference on Computer and Com-
munications Security.
[65] Yubin Xia, Yutao Liu, Haibo Chen, and Binyu Zang. 2012. CFIMon: Detecting
Violation of Control Flow Integrity Using Performance Counters. In Proceedings
of the 42nd Annual IEEE/IFIP International Conference on Dependable Systems and
Networks.
[66] Yves Younan. 2015. FreeSentry: Protecting Against Use-After-Free Vulnerabil-
ities Due to Dangling Pointers. In Proceedings of the 22nd Annual Network and
Distributed System Security Symposium.
[67] Yves Younan, Pieter Philippaerts, Lorenzo Cavallaro, R. Sekar, Frank Piessens, and
Wouter Joosen. 2010. PAriCheck: An Efficient Pointer Arithmetic Checker for C
Programs. In Proceedings of the 5th ACM Symposium on Information, Computer
and Communications Security.
[68] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dawn Song, and Wei Zou. 2013. Practical Control Flow Integrity and
Randomization for Binary Executables. In Proceedings of the 34th IEEE Symposium
on Security and Privacy.
[69] Mingwei Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries. In
Proceedings of the 22nd USENIX Security Symposium.
A FORMAL RESULTS
In this section, we formally express and prove the correctness of
our approach. In particular, we define the syntax (§A.1) and seman-
tics (§A.2) of a core low-level language that we use to define our
approach. We then formally define the problem that we address
(§A.3) and our mechanism for protecting control security (§A.4).
A.1 Syntax
Figure 9 contains the syntax of a space of program instructions,
Instrs. Instrs is defined over a space of disjoint sets of data regis-
ters RegsD, code-pointer registers RegsC, and data-pointer registers
RegsP . An instruction may operate over data values (Equation 1),
set a value as an offset for pointer arithmetic (Equation 2), load
data from memory to a register (Equation 3), store data in a register
to memory (Equation 4), branch to the address in a code pointer
(Equation 5), load a code pointer from memory into a register (Equa-
tion 6), store a code pointer in a register to memory (Equation 7),
Instrs := x := y + z
| offset:=x
| x := *p
| *p := x