    fffff805`5acac549 ebdc            jmp     nt!NtQueryPerformanceCounter+0x67 (fffff805`5acac527)
    nt!NtQueryPerformanceCounter+0x8b:
    fffff805`5acac54b e8102a0d00      call    nt!ExRaiseDatatypeMisalignment (fffff805`5ad7ef60)
    fffff805`5acac550 90              nop
    fffff805`5acac551 eb02            jmp     nt!NtQueryPerformanceCounter+0x95 (fffff805`5acac555)
    nt!NtQueryPerformanceCounter+0x93:
    fffff805`5acac553 33c0            xor     eax,eax
    nt!NtQueryPerformanceCounter+0x95:
    fffff805`5acac555 488b5c2430      mov     rbx,qword ptr [rsp+30h]
    fffff805`5acac55a 4883c420        add     rsp,20h
    fffff805`5acac55e 5f              pop     rdi
    fffff805`5acac55f c3              ret
查看KeQueryPerformanceCounter的反汇编代码
在下面代码的第八行看到了HalpPerformanceCounter，nt!KeQueryPerformanceCounter+0x56这里把[[HalpPerformanceCounter]+0x70]的值传进了rax后调用了nt!guard_dispatch_icall
> 控制流防护（CFG）作为Win
> 8.1+的新安全保护机制，其实并不知名。它被用于阻止针对可执行文件间接调用的恶意利用。CFG保护十分高效，同时它是一种编译器和操作系统相结合的防护手段。
实质上就是一个调用，调用了[[HalpPerformanceCounter]+0x70]处指向的函数。
原本调用地址nt!HalpHvCounterQueryCounter，把此处函数指针修改为指向自己的函数就能实现控制堆栈，进而控制函数返回地址至我们的函数操作NtQueryPerformanceCounter的参数实现变速。
    0: kd> uf nt!KeQueryPerformanceCounter
    nt!KeQueryPerformanceCounter:
    fffff805`5a8f8940 48895c2420      mov     qword ptr [rsp+20h],rbx
    fffff805`5a8f8945 56              push    rsi
    fffff805`5a8f8946 4883ec20        sub     rsp,20h
    fffff805`5a8f894a 48897c2430      mov     qword ptr [rsp+30h],rdi
    fffff805`5a8f894f 488bf1          mov     rsi,rcx
    fffff805`5a8f8952 488b3daf549600  mov     rdi,qword ptr [nt!HalpPerformanceCounter (fffff805`5b25de08)]
    fffff805`5a8f8959 4c89742440      mov     qword ptr [rsp+40h],r14
    fffff805`5a8f895e 83bfe400000005  cmp     dword ptr [rdi+0E4h],5
    fffff805`5a8f8965 0f8581000000    jne     nt!KeQueryPerformanceCounter+0xac (fffff805`5a8f89ec)
    nt!KeQueryPerformanceCounter+0x2b:
    fffff805`5a8f896b 48833da555960000 cmp     qword ptr [nt!HalpTimerReferencePage (fffff805`5b25df18)],0
    fffff805`5a8f8973 48c744243880969800 mov   qword ptr [rsp+38h],989680h
    fffff805`5a8f897c 0f84fe511100    je      nt!KeQueryPerformanceCounter+0x115240 (fffff805`5aa0db80)
    nt!KeQueryPerformanceCounter+0x42:
    fffff805`5a8f8982 f787e000000000000100 test dword ptr [rdi+0E0h],10000h
    fffff805`5a8f898c 0f8506531100    jne     nt!KeQueryPerformanceCounter+0x115358 (fffff805`5aa0dc98)
    nt!KeQueryPerformanceCounter+0x52:
    fffff805`5a8f8992 488b4f48        mov     rcx,qword ptr [rdi+48h]
    nt!KeQueryPerformanceCounter+0x56:
    fffff805`5a8f8996 488b4770        mov     rax,qword ptr [rdi+70h]
    fffff805`5a8f899a e841011000      call    nt!guard_dispatch_icall (fffff805`5a9f8ae0)
    fffff805`5a8f899f 488bc8          mov     rcx,rax
    fffff805`5a8f89a2 49b8b803000080f7ffff mov r8,0FFFFF780000003B8h
    fffff805`5a8f89ac 488b0565559600  mov     rax,qword ptr [nt!HalpTimerReferencePage (fffff805`5b25df18)]
    fffff805`5a8f89b3 488b4008        mov     rax,qword ptr [rax+8]
    fffff805`5a8f89b7 4d8b00          mov     r8,qword ptr [r8]
    fffff805`5a8f89ba 48f7e1          mul     rax,rcx
    fffff805`5a8f89bd 498d0410        lea     rax,[r8+rdx]
有了思路就能开始写代码了。
首先从fIappy大表哥那抄一份获取SSDT函数、HalpPerformanceCounter定位代码。
(抄，我疯狂的抄)
> 
当然代码做了修改，原来的代码在19041.508版本下HalpPerformanceCounter会定位飞。
    NTSTATUS getKernelModuleByName(const char* moduleName, std::uintptr_t* moduleStart, std::size_t* moduleSize) {
        if (!moduleStart || !moduleSize)
            return STATUS_INVALID_PARAMETER;
        std::size_t size{};
        ZwQuerySystemInformation(0xB, nullptr, size, reinterpret_cast(&size));/* 0xB  SystemModuleInformation */
        const auto listHeader = ExAllocatePool(NonPagedPool, size);
        if (!listHeader)
            return STATUS_MEMORY_NOT_ALLOCATED;
        if (const auto status = ZwQuerySystemInformation(0xB, listHeader, size, reinterpret_cast(&size)))
            return status;
        auto currentModule = reinterpret_cast(listHeader)->Module;
        for (std::size_t i{}; i (listHeader)->Count; ++i, ++currentModule) {
            const auto currentModuleName = reinterpret_cast(currentModule->FullPathName + currentModule->OffsetToFileName);
            if (!strcmp(moduleName, currentModuleName)) {
                *moduleStart = reinterpret_cast(currentModule->ImageBase);
                *moduleSize = currentModule->ImageSize;
                return STATUS_SUCCESS;
            }
        }
        return STATUS_NOT_FOUND;
    }
    std::uintptr_t getImageSectionByName(const std::uintptr_t imageBase, const char* sectionName, std::size_t* sizeOut) {
        if (reinterpret_cast(imageBase)->e_magic != 0x5A4D)
            return {};
        const auto ntHeader = reinterpret_cast(
            imageBase + reinterpret_cast(imageBase)->e_lfanew);
        const auto sectionCount = ntHeader->FileHeader.NumberOfSections;
        auto sectionHeader = IMAGE_FIRST_SECTION(ntHeader);
        for (std::size_t i{}; i (sectionHeader->Name))) {
                if (sizeOut)
                    *sizeOut = sectionHeader->Misc.VirtualSize;
                return imageBase + sectionHeader->VirtualAddress;
            }
        }
        return {};
    }
    std::uintptr_t getServiceDescriptorTable() {
        std::uintptr_t ntoskrnlBase{};
        std::size_t ntoskrnlSize{};
        if (!NT_SUCCESS(getKernelModuleByName("ntoskrnl.exe", &ntoskrnlBase, &ntoskrnlSize)))
            return {};
        std::size_t ntoskrnlTextSize{};
        const auto ntoskrnlText = getImageSectionByName(ntoskrnlBase, ".text", &ntoskrnlTextSize);
        if (!ntoskrnlText)
            return {};
        auto keServiceDescriptorTableShadow = scanPattern(reinterpret_cast(ntoskrnlText), ntoskrnlTextSize,
            "\xC1\xEF\x07\x83\xE7\x20\x25\xFF\x0F", "xxxxxxxxx");
        if (!keServiceDescriptorTableShadow)
            return {};
        keServiceDescriptorTableShadow += 21;
        keServiceDescriptorTableShadow += *reinterpret_cast(keServiceDescriptorTableShadow) + sizeof(std::int32_t);
        return keServiceDescriptorTableShadow;
    }
    std::uintptr_t GetSystemServiceDescriptorTableFunction(std::int32_t Index)
    {
        if (keServiceDescriptorTable == NULL)
            keServiceDescriptorTable = getServiceDescriptorTable();
        const auto serviceTable = *reinterpret_cast(keServiceDescriptorTable);
        return reinterpret_cast(serviceTable) + (serviceTable[Index & 0xFFF] >> 4);
    }
    std::uintptr_t scanPattern(std::uint8_t* base, const std::size_t size, char* pattern, char* mask) {
        const auto patternSize = strlen(mask);
        for (std::size_t i = {}; i (base + i + j) != static_cast(pattern[j]))
                    break;
                if (j == patternSize - 1)
                    return reinterpret_cast(base) + i;
            }
        }
        return {};
    }
    NTSTATUS hookPerformanceCounterRoutine()
    {
        UNICODE_STRING keQueryPerformanceCounterUnicode = RTL_CONSTANT_STRING(L"KeQueryPerformanceCounter");
        const auto keQueryPerformanceCounter = reinterpret_cast(
            MmGetSystemRoutineAddress(&keQueryPerformanceCounterUnicode));
        if (!keQueryPerformanceCounter)//如果nt!KeQueryPerformanceCounter没有定位到直接退出
            return STATUS_NOT_FOUND;
        //1: kd > u KeQueryPerformanceCounter
        //    nt!KeQueryPerformanceCounter:
        //  fffff805`5a8f8940 48895c2420      mov     qword ptr[rsp + 20h], rbx
        //    fffff805`5a8f8945 56              push    rsi
        //    fffff805`5a8f8946 4883ec20        sub     rsp, 20h
        //    fffff805`5a8f894a 48897c2430      mov     qword ptr[rsp + 30h], rdi
        //    fffff805`5a8f894f 488bf1          mov     rsi, rcx //;rsi pPerformanceFrequency
        //    fffff805`5a8f8952 488b3daf549600  mov     rdi, qword ptr[nt!HalpPerformanceCounter(fffff805`5b25de08)]
        auto halpPerformanceCounter = scanPattern(reinterpret_cast(keQueryPerformanceCounter),
            0x100, "\xf1\x48\x8b\x3d", "xxxx");
        halpPerformanceCounter += 4;
        halpPerformanceCounter = halpPerformanceCounter + *reinterpret_cast(halpPerformanceCounter) + 4;
        return STATUS_SUCCESS;
    }
之后保存一份nt!HalpHvCounterQueryCounter地址，用于恢复变速，山寨函数中跳转到原函数使用。
    halCounterQueryRoutine = *reinterpret_cast( *reinterpret_cast(halpPerformanceCounter) + 0x70);
    *reinterpret_cast(*reinterpret_cast(halpPerformanceCounter) + 0x70) = reinterpret_cast(&temper);
​
修改指针至temper山寨函数。temper中保存rcx（keQueryPerformanceCounterHook需要用到一个参数），并将rsp作为参数传入keQueryPerformanceCounterHook。
    temper PROC
        push rcx
        mov rcx,rsp
        call keQueryPerformanceCounterHook
        pop rcx
        mov rax, halCounterQueryRoutine
        jmp rax
    temper ENDP
    EXTERN_C void keQueryPerformanceCounterHook(ULONG_PTR* pStack) {
        if (ExGetPreviousMode() == KernelMode) {
            return;
        }
        //for (size_t i = 0; i  g
        //HalpPerformanceCounter:FFFFF8055B25DE08  halCounterQueryRoutine:FFFFF8055A98AB20
        //[+]7 5F
        //[+]7 5F
        //[+]7 5F
        //[+]7 5F
        //获得了pStack[7]中返回位置为NtQueryPerformanceCounter+0x5F，可以修改pStack[7]让它返回至自己的代理函数实现变速。
        auto name = PsGetProcessImageFileName(PsGetCurrentProcess());
        if (strstr(name,"counter")!= NULL && pStack[7] ==  static_cast(pNtQueryPerformanceCounter) + 0x5F)
        {    
            //将返回地址重定向至自己的代理函数,用作处理KeQueryPerformanceCounter的返回值
            pStack[7] = reinterpret_cast(handler);
        }
    }
在handler代理函数中，保存了rcx,rdx用于计算，将计算后的结果打入rdi(NtQueryPerformanceCounter的第二个参数pPerformanceCounter)，实现修改NtQueryPerformanceCounter参数作用。最后跳转回NtQueryPerformanceCounter+0x62的位置执行NtQueryPerformanceCounter原本的流程。
    nt!NtQueryPerformanceCounter+0x55:
    fffff805`5acac515 488d4c2440      lea     rcx,[rsp+40h]
    fffff805`5acac51a e821c4c4ff      call    nt!KeQueryPerformanceCounter (fffff805`5a8f8940)
    fffff805`5acac51f 488907          mov     qword ptr [rdi],rax //*pPerformanceCounter = ret
    fffff805`5acac522 4885db          test    rbx,rbx  //;62H
    handler PROC
        push rcx
        push rdx
        mov rdx,rax  ;rdx保存这次的时间
        mov rcx,time ;rcx就是上次的时间
        sub rax,rcx
        lea rax,[rcx+rax*2] ;当前返回时间 = 上次返回时间 + (当前返回时间 - 上次返回时间) * 倍数 
        mov [rdi],rax
        mov time,rdx
        pop rdx
        pop rcx
        mov rax,[pNtQueryPerformanceCounter]
        add rax,62h
        jmp rax
    handler ENDP
最终别忘了修改SharedUserData.
    *(BYTE*)(&SharedUserData->QpcData) = *(BYTE*)(&SharedUserData->QpcData) & 0xFFFE;
打开counter.exe，过几秒加载驱动，可以很明显看到计时器被加速。
因为只修改了数据段，ARK工具扫不到R0和R3的钩子，也不会触发PatchGuard.
####  检测方案
​
只要检测SharedUserData->QpcData最低位，[[HalpPerformanceCounter]+0x70]处指针指向的地址是否是nt!HalpHvCounterQueryCounter就行了。
完整工程地址：
> 