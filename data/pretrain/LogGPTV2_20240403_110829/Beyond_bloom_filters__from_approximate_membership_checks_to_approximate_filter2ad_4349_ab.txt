ality over Bloom ﬁlters and Bloomier ﬁlters have recently
been suggested [17]; however, while the theory of these al-
ternatives has been studied, at this point we are not aware of
any practical implementations or uses. These constructions
are much more complicated than the simple but eﬀective
hashing methods underlying Bloom ﬁlters. We consider this
simplicity a virtue for practical use, and aim to keep our
structures similarly simple when possible.
3. THE STATE MACHINE SETTING
In order to provide as concrete an analysis as possible, we
specify the setting for our analysis and experiments. We are
given a single state machine, and a collection of ﬂows. We
work in a streaming model, where our data stream consists
of a sequence of state updates for the collection of ﬂows. A
ﬂow has an associated ﬂow-id to identify the ﬂow. A ﬂow
becomes extant when initiated, which we model as beginning
at some initial state, and ceases to be extant when it is
terminated, which we model as reaching some terminal state.
Each extant ﬂow is associated with a current state. The
data stream provides transitions, corresponding to (ﬂow-id,
string) pairs; that is, there is a function from state-string
pairs to states corresponding to the transitions of the state
machine. For example, a transition for a ﬂow could take the
form “Go to state 7,”, or “If in state 5, go to state 3,” or
“Add 1 to the current state.” We desire a data structure
that will track the state for each ﬂow eﬃciently, reacting to
each transition in the stream.
Initially, we will consider systems that are well-behaved, in
the following sense: every ﬂow is properly initiated by an ini-
tiation transition, every transition requested for every ﬂow
is valid, and every ﬂow is (eventually) properly terminated
by a termination transition. In many real-world situations,
systems are not entirely well-behaved. When we consider
ill-behaved systems, we must consider that an adversary or
errors within the system may lead to faulty behaviors, in-
cluding speciﬁcally: transitions may be introduced into the
stream for non-extant ﬂows; a ﬂow transition might not be
valid (in which case we assume the ﬂow should remain in its
current state); and a ﬂow might not terminate properly. For
example, in a network measurement application, when the
analysis starts it may have to deal with ﬂows that were al-
ready active before the measurement started. We note that
well-behaved systems are much easier to analyze formally.
In this setting, there are four natural operations that we
desire of our data structure:
• InsertEntry( ﬂow, state)
• ModifyEntry( ﬂow, newstate )
• Lookup( ﬂow ) outputs ( state )
• DeleteEntry( ﬂow )
When faced with a possible state transition, one can perform
a lookup to ﬁnd the current state for a ﬂow, determine the
subsequent state according to the transition, and modify
the state accordingly.
(Alternatively, the current state of
the ﬂow could be given as part of the input to the Lookup
operation; we discuss this further below.)
There are various types of errors that can occur. Suppose
a lookup is done on a non-extant ﬂow, i.e. a ﬂow that has not
been properly initialized, and the result is that it appears
to have a valid state. We call this a false positive. Note
that this should be distinguished from a false positive on a
Bloom ﬁlter (that may be a part of an ACSM); this is a false
positive on a ﬂow, and we will strive to keep the terminology
clear. Suppose that no state is given for an extant ﬂow. We
call this a false negative. If an erroneous state is given for
an extant ﬂow, we call this a false return state. Finally, we
introduce a new type of error that we think is interesting
and useful in its own right; in particular, it allows us to
avoid the lower bounds determined by work on Bloomier
ﬁlters. We allow that for an extant or non-extant ﬂow the
data structure returns a“don’t know” (hereon, abbreviated
as DK) state. Returning DK is generally far less damaging
for an application than a false negative or a false return
state. For example, it may be that the concurrent state
machine is used as a fast path for packet classiﬁcation, but
in the case of a DK response a slower path classiﬁcation
routine can be used. Obviously, we want all types of errors to
occur with very small probability, including DK errors. The
best tradeoﬀ among the diﬀerent types of errors is highly
application dependent, suggesting that data structures that
allow such tradeoﬀs are more valuable.
As a concrete example, consider using an ACSM for iden-
tifying Peer-to-Peer (P2P) Traﬃc as we do in Section 5.2.2
in order to rate-limit such traﬃc. A false-positive implies
that we will (wrongly) rate-limit the traﬃc that is not P2P.
While this is clearly bad, our approach uses existing heuris-
tics [11] that already have false positives. Similarly, false
negatives imply that we miss some P2P traﬃc, but then so
does the existing approach. In this application, if no action
is taken on a DK, a DK can at most increase the false nega-
tive probability. The bottom line is ACSMs may be justiﬁed
if the space for the application can be reduced considerably
at the cost of a very small increase in the false negative and
positive rate. This is especially so if the reduction in space
allows the application to be done in faster memory.
Flow: X  State: 3 to 5
Before
0
0
1
0
2
3
0
1
1
0
0
0
(X,3)
(X,5)
After
0
0
0
0
1
3
1
0
2
0
1
0
Figure 1: A state change with a DBF ACSM (as-
suming the old and new states are given). The
counters for the old ﬂow-state pair are decremented,
the counters for the new ﬂow-state pair are incre-
mented.
3.1 A Direct Bloom Filter Approach
There is a simple approach directly using a Bloom ﬁlter to
obtain a concurrent state machine, which we call the direct
Bloom ﬁlter (DBF) ACSM. The current set to be stored con-
sists of (ﬂow-id, current state) pairs. We assume the state
is represented as a value in the range [1, V ]. Because we
will want to handle deletions, we describe the approach us-
ing counting Bloom ﬁlters; alternatively, deletions may also
be accomplished using timing-based mechanisms, as we de-
scribe in Section 3.2 below. This approach, while seemingly
obvious and natural, is quite limited and recommended only
in very special cases.
Let us ﬁrst consider the situation when the system is well-
behaved.
Insertion is straightforward. Lookup operations
are easily done if one is also given a state as input; that is,
one can check if a ﬂow is in a speciﬁc state easily by checking
for the appropriate (ﬂow-id,state) pair. However, if the state
is not part of the lookup input, then one has to check all
possible states. In this case, the time to check for a state
is proportional to the number of states; moreover, because
of false positives in the Bloom ﬁlter, it is possible that a
ﬂow appears to be in multiple states, in which case a DK
must be returned. (This situation would also be problematic
when having to delete a ﬂow; either the state must be given,
or if the ﬂow appears to be in multiple states, a deletion
cannot be accomplished without risk of error, so timing-
based methods must be used.) This approach is therefore
most suitable when either there is a very small number of
states, or the transitions themselves specify the start state
and end state for the transition. Many state machines have
the property that the current state is naturally encoded as
part of the transition. For example, when state transitions
are unique, so that the input that causes the state to change
from A to B is unique to both of the states A and B, then
this information informs the lookup. Deletions of ﬂows are
also straightforward using a counting Bloom ﬁlter when the
state is also given. Modifying an entry corresponds to a
lookup, deletion, and insertion of a new (ﬂow-id,state) pair.
An example of modifying an entry is given in Figure 1.
Analysis of the DBF ACSM is straightforward, assuming
that states are given as part of the input when performing a
deletion. If there are n extant ﬂows , with m counters and
k hash functions used in the ﬁlter, the probability of a false
positive f is just that for a standard Bloom ﬁlter [4, 16]:
”k ≈ (1 − ekn/m
k.
)
“
f ≈
1 − (1 − 1/m)
kn
It is well known that for a ﬁxed value of m and n, the optimal
choice for k to minimize f is (m/n) ln 2, giving f ≈ (0.6)m/n.
For a lookup on an extant ﬂow with no state information as
part of the input, the probability of returning a DK with s
states is the probability of not having a false positive for the
ﬂow on the s − 1 other states, or (when f << 1/(s − 1))
1 − (1 − f )
s−1 ≈ f (s − 1) ≈ s(0.6)
m/n.
We now consider problems that may arise in a system that
is not well-behaved. A false positive for a non-extant ﬂow
can occur, if the underlying Bloom ﬁlter gives a false posi-
tive. Notice that a false positive can have ongoing eﬀect in
the following case: if a false positive causes an invalid state
transition to occur, it will change the ﬁlter. The changes
may later cause future false negatives, false positives, false
return states, or DK results; such dynamic interactions are
naturally hard to analyze systematically. A ﬂow-level false
negative can also occur for an extant ﬂow if an invalid state
transition is attempted, and a false positive from the Bloom
ﬁlter makes it appear that the ﬂow is in the wrong state.
(This cannot happen if all possible states are tested, as then
a DK should be returned, but if the transition speciﬁes the
initial state, this may not be done to save time, as previ-
ously explained.) Non-terminating ﬂows eventually would
cause the ﬁlter itself to saturate with non-zero entries, un-
less timing-based mechanisms are used.
3.2 Timing-Based Deletion
Before describing improved structures, it seems best to de-
scribe our approach to timing-based deletion in some detail
in the context of DBF ACSMs. They will work in entirely
similar ways for our other proposed structures.
We have seen that non-terminating or otherwise ill-behaving
ﬂows require a mechanism for cleaning out of the data struc-
ture after a certain amount of time. Similarly, in cases where
deletions might not normally be possible (such as if the state
is not given for a deletion request, and a ﬂow appears to be
in multiple states according to the ﬁlter), a timing-based
deletion mechanism will ensure that an uncompleted dele-
tion eventually happens.
A straightforward method uses a single ﬂag bit per cell
and a single global counter, and breaks time into phases,
where a new phase begins for example after a certain number
of operations. The counter tracks the number of operations
until a new phase begins. At the beginning of a phase, all
ﬂag bits should be set to 0. During a phase, every cell that is
touched has its ﬂag bit set to 1. The appropriate deﬁnition
of touched may depend on the context; in our settings, it is
best to say that a cell is touched if it is used in a lookup
or insert operation, or if the cell value is modiﬁed, but not
if the cell is deleted. At the end of a phase, all unﬂagged
cells are reset to the appropriate value for a cell that has no
ﬂows hashed to it; generally this is 0. Also, all ﬂagged cells
retain their value, and all ﬂags are reset to 0. In this way,
any cell not touched during a phase is reset, so that any ﬂow
that has not taken part in an operation will eventually be
removed from the ACSM.
When using this timing-based approach, counters may no
longer be necessary, greatly reducing the space required. For
Before
After
1
2
0
2
0
1
0
0
0
0
0
0
0
0
0
0
1
2
1
3
0
2
1
1
Global Reset
0
2
0
3
0
0
0
1
Timing Bits
Cells
Timing Bits
Cells
Figure 2: Example of timer-based deletion. One bit
is used for each cell; when the global timer goes oﬀ,
untouched cells (in grey) are reset to 0.
example, we described the DBF (direct Bloom ﬁlter) ACSM
as using counters to allow deletions, but once we introduce
this timing mechanism, there is no reason to use counters at
all. The space might be better used by simply using a stan-
dard Bloom ﬁlter (with more bits). Alternatively, with the
DBF ACSM, you might use a combination of counters and
the timing scheme. A small counter would be useful when
ﬂows change state often within a timing phase; otherwise,
the ﬁlter will be highly polluted. The timing-based deletion
remove non-terminating ﬂows. An example of a timer reset
is given in Figure 2.
The aging process is hard to analyze without some neces-
sarily inaccurate model of deletions; in this paper, we focus
on studying the use of timers via experimental evaluation.
We note, however, that the number of phases required be-
fore a cell resets itself to empty is essentially geometrically
distributed. That is, if a ﬂow is deleted, the probability
that some new ﬂow hits that cell in the next phase is easily
determined given the number of new ﬂows in that phase;
assuming that the number of new ﬂows is roughly the same
from round to round, and that existing well-behaved ﬂows
tend to terminate within a round, the number of phases be-
fore a cell is untouched (and hence reset) is geometrically
distributed. It follows that a well-behaved, suﬃciently large
ﬁlter will reach a fairly consistent steady-state over time.
3.3 A Stateful Bloom Filter Approach
The DBF ACSM is rather na¨ıve; one might suspect that
a similar structure making more careful use of the states
would perform better. We now describe such an alterna-
tive structure, which we call a stateful Bloom ﬁlter (SBF)
ACSM. Again the underlying structure is like a Bloom ﬁlter,
but the Bloom ﬁlter cells are neither bits nor counters but
instead a value corresponding to the state. This is similar
in spirit to an idea used in recent hash table constructions
[12], although the application is quite diﬀerent.
Each of the m cells in our ﬁlter can store a value (in
[1, V ]∪{null}) and a counter. Null with a 0 count represents