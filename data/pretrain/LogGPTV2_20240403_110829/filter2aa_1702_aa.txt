FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
NAME
ﬂawﬁnder − lexically ﬁnd potential security ﬂaws ("hits") in source code
SYNOPSIS
ﬂawﬁnder [−−help|−h] [−−version] [−−listrules]
[−−allowlink] [−−followdotdir] [−−nolink]
[−−patch=ﬁlename|−P ﬁlename]
[−−inputs|−I] [ −−minlevel=X | −m X ] [−−falsepositive|−F]
[−−neverignore|−n]
[−−regex=PA TTERN | −e PA TTERN]
[−−context|−c] [−−columns|−C] [−−csv] [−−dataonly|−D] [−−html|−H] [−−immediate|-i] [−−single-
line|−S] [−−omittime] [−−quiet|−Q]
[−−loadhitlist=F] [−−savehitlist=F] [−−diffhitlist=F]
[−−] [ source code ﬁle or source root directory ]+
DESCRIPTION
Flawﬁnder searches through C/C++ source code looking for potential security ﬂaws. To run ﬂawﬁnder,
simply give ﬂawﬁnder a list of directories or ﬁles. For each directory given, all ﬁles that have C/C++ ﬁle-
name extensions in that directory (and its subdirectories, recursively) will be examined. Thus, for most
projects, simply give ﬂawﬁnder the name of the source code’s topmost directory (use ‘‘.’’ for the current
directory), and ﬂawﬁnder will examine all of the project’s C/C++ source code. Flawﬁnder does not require
that you be able to build your software, so it can be used even with incomplete source code. If you only
want to have changes reviewed, save a uniﬁed diff of those changes (created by GNU "diff -u" or "svn diff"
or "git diff") in a patch ﬁle and use the −−patch (−P) option.
Flawﬁnder will produce a list of ‘‘hits’’ (potential security ﬂaws, also called ﬁndings), sorted by risk; the
riskiest hits are shown ﬁrst. The risk level is shown inside square brackets and varies from 0, very little
risk, to 5, great risk. This risk level depends not only on the function, but on the values of the parameters of
the function. For example, constant strings are often less risky than fully variable strings in many contexts,
and in those contexts the hit will have a lower risk level. Flawﬁnder knows about gettext (a common
library for internationalized programs) and will treat constant strings passed through gettext as though they
were constant strings; this reduces the number of false hits in internationalized programs. Flawﬁnder will
do the same sort of thing with _T() and _TEXT(), common Microsoft macros for handling internationalized
programs. Flawﬁnder correctly ignores text inside comments and strings. Normally ﬂawﬁnder shows all
hits with a risk level of at least 1, but you can use the −−minlevel option to show only hits with higher risk
levels if you wish. Hit descriptions also note the relevant Common Weakness Enumeration (CWE) identi-
ﬁer(s) in parentheses, as discussed below. Flawﬁnder is ofﬁcially CWE-Compatible. Hit descriptions with
"[MS-banned]" indicate functions that are in the banned list of functions released by Microsoft; see
http://msdn.microsoft.com/en-us/library/bb288454.aspx for more information about banned functions.
Not every hit (aka ﬁnding) is actually a security vulnerability, and not every security vulnerability is neces-
sarily found. Nevertheless, ﬂawﬁnder can be an aid in ﬁnding and removing security vulnerabilities. A
common way to use ﬂawﬁnder is to ﬁrst apply ﬂawﬁnder to a set of source code and examine the highest-
risk items. Then, use −−inputs to examine the input locations, and check to make sure that only legal and
safe input values are accepted from untrusted users.
Once you’ve audited a program, you can mark source code lines that are actually ﬁne but cause spurious
warnings so that ﬂawﬁnder will stop complaining about them. To mark a line so that these warnings are
suppressed, put a specially-formatted comment either on the same line (after the source code) or all by
itself in the previous line. The comment must have one of the two following formats:
•
// Flawﬁnder: ignore
•
/* Flawﬁnder: ignore */
For compatibility’s sake, you can replace "Flawﬁnder:" with "ITS4:" or "RATS:" in these specially-format-
ted comments. Since it’s possible that such lines are wrong, you can use the −−neverignore option, which
causes ﬂawﬁnder to never ignore any line no matter what the comment directives say (more confusingly,
−−neverignore ignores the ignores).
Flawﬁnder 
26 Aug 2017
1
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
Flawﬁnder uses an internal database called the ‘‘ruleset’’; the ruleset identiﬁes functions that are common
causes of security ﬂaws. The standard ruleset includes a large number of different potential problems,
including both general issues that can impact any C/C++ program, as well as a number of speciﬁc Unix-like
and Windows functions that are especially problematic. The −−listrules option reports the list of current
rules and their default risk levels. As noted above, every potential security ﬂaw found in a given source
code ﬁle (matching an entry in the ruleset) is called a ‘‘hit,’’ and the set of hits found during any particular
run of the program is called the ‘‘hitlist.’’ Hitlists can be saved (using −−savehitlist), reloaded back for
redisplay (using −−loadhitlist), and you can show only the hits that are different from another run (using
−−diffhitlist).
Flawﬁnder is a simple tool, leading to some fundamental pros and cons. Flawﬁnder works by doing simple
lexical tokenization (skipping comments and correctly tokenizing strings), looking for token matches to the
database (particularly to ﬁnd function calls). Flawﬁnder is thus similar to RATS and ITS4, which also use
simple lexical tokenization. Flawﬁnder then examines the text of the function parameters to estimate risk.
Unlike tools such as splint, gcc’s warning ﬂags, and clang, ﬂawﬁnder does not use or have access to infor-
mation about control ﬂow, data ﬂow, or data types when searching for potential vulnerabilities or estimating
the level of risk. Thus, ﬂawﬁnder will necessarily produce many false positives for vulnerabilities and fail
to report many vulnerabilities. On the other hand, ﬂawﬁnder can ﬁnd vulnerabilities in programs that can-
not be built or cannot be linked. It can often work with programs that cannot even be compiled (at least by
the reviewer’s tools). Flawﬁnder also doesn’t get as confused by macro deﬁnitions and other oddities that
more sophisticated tools have trouble with. Flawﬁnder can also be useful as a simple introduction to static
analysis tools in general, since it is easy to start using and easy to understand.
Any ﬁlename given on the command line will be examined (even if it doesn’t hav e a usual C/C++ ﬁlename
extension); thus you can force ﬂawﬁnder to examine any speciﬁc ﬁles you desire. While searching directo-
ries recursively, ﬂawﬁnder only opens and examines regular ﬁles that have C/C++ ﬁlename extensions.
Flawﬁnder presumes that ﬁles are C/C++ ﬁles if they hav e the extensions ".c", ".h", ".ec", ".ecp", ".pgc",
".C", ".cpp", ".CPP", ".cxx", ".cc", ".CC", ".pcc", ".hpp", or ".H". The ﬁlename ‘‘−’’ means the standard
input. To prevent security problems, special ﬁles (such as device special ﬁles and named pipes) are always
skipped, and by default symbolic links are skipped (the −−allowlink option follows symbolic links).
After the list of hits is a brief summary of the results (use -D to remove this information). It will show the
number of hits, lines analyzed (as reported by wc −l), and the physical source lines of code (SLOC) ana-
lyzed. A physical SLOC is a non-blank, non-comment line. It will then show the number of hits at each
level; note that there will never be a hit at a level lower than minlevel (1 by default). Thus, "[0] 0 [1] 9"
means that at level 0 there were 0 hits reported, and at level 1 there were 9 hits reported. It will next show
the number of hits at a given lev el or larger (so level 3+ has the sum of the number of hits at level 3, 4, and
5). Thus, an entry of "[0+] 37" shows that at level 0 or higher there were 37 hits (the 0+ entry will always
be the same as the "hits" number above). Hits per KSLOC is next shown; this is each of the "level or
higher" values multiplied by 1000 and divided by the physical SLOC. If symlinks were skipped, the count
of those is reported. If hits were suppressed (using the "ignore" directive in source code comments as
described above), the number suppressed is reported. The minimum risk level to be included in the report
is displayed; by default this is 1 (use −−minlevel to change this). The summary ends with important
reminders: Not every hit is necessarily a security vulnerability, and there may be other security vulnerabili-
ties not reported by the tool.
Flawﬁnder is released under the GNU GPL license version 2 or later (GPLv2+).
Flawﬁnder works similarly to another program, ITS4, which is not fully open source software (as deﬁned in
the Open Source Deﬁnition) nor free software (as deﬁned by the Free Software Foundation). The author of
Flawﬁnder has never seen ITS4’s source code. Flawﬁnder is similar in many ways to RATS, if you are
familiar with RATS.
BRIEF TUTORIAL
Here’s a brief example of how ﬂawﬁnder might be used. Imagine that you have the C/C++ source code for
some program named xyzzy (which you may or may not have written), and you’re searching for security
vulnerabilities (so you can ﬁx them before customers encounter the vulnerabilities). For this tutorial, I’ll
Flawﬁnder 
26 Aug 2017
2
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
assume that you’re using a Unix-like system, such as Linux, OpenBSD, or MacOS X.
If the source code is in a subdirectory named xyzzy, you would probably start by opening a text window
and using ﬂawﬁnder’s default settings, to analyze the program and report a prioritized list of potential secu-
rity vulnerabilities (the ‘‘less’’ just makes sure the results stay on the screen):
ﬂawﬁnder xyzzy | less
At this point, you will see a large number of entries. Each entry has a ﬁlename, a colon, a line number, a
risk level in brackets (where 5 is the most risky), a category, the name of the function, and a description of
why ﬂawﬁnder thinks the line is a vulnerability. Flawﬁnder normally sorts by risk level, showing the riski-
est items ﬁrst; if you have limited time, it’s probably best to start working on the riskiest items and continue
until you run out of time. If you want to limit the display to risks with only a certain risk level or higher,
use the −−minlevel option. If you’re getting an extraordinary number of false positives because variable
names look like dangerous function names, use the −F option to remove reports about them. If you don’t
understand the error message, please see documents such as the Writing Secure Pro grams HOWTO
〈http://www.dwheeler.com/secure-programs〉 at http://www.dwheeler.com/secure-programs which provides
more information on writing secure programs.
Once you identify the problem and understand it, you can ﬁx it. Occasionally you may want to re-do the
analysis, both because the line numbers will change and to make sure that the new code doesn’t introduce
yet a different vulnerability.
If you’ve determined that some line isn’t really a problem, and you’re sure of it, you can insert just before
or on the offending line a comment like
/* Flawﬁnder: ignore */
to keep them from showing up in the output.
Once you’ve done that, you should go back and search for the program’s inputs, to make sure that the pro-
gram strongly ﬁlters any of its untrusted inputs. Flawﬁnder can identify many program inputs by using the
−−inputs option, like this:
ﬂawﬁnder −−inputs xyzzy
Flawﬁnder can integrate well with text editors and integrated development environments; see the examples
for more information.
Flawﬁnder includes many other options, including ones to create HTML versions of the output (useful for
prettier displays). The next section describes those options in more detail.
OPTIONS
Flawﬁnder has a number of options, which can be grouped into options that control its own documentation,
select input data, select which hits to display, select the output format, and perform hitlist management.
The commonly-used ﬂawﬁnder options support the standard option syntax deﬁned in the POSIX (Issue 7,
2013 Edition) section ‘‘Utility Conventions’’. Flawﬁnder also supports the GNU long options (double-dash
options of form −−option) as deﬁned in the GNU C Library Reference Manual ‘‘Program Argument Syntax
Conventions’’ and GNU Coding Standards ‘‘Standards for Command Line Interfaces’’. Long option argu-
ments can be provided as ‘‘--name=value’’ or ‘‘-name value’’. All options can be accessed using the more
readable GNU long option conventions; some less commonly used options can only be accessed using long
option conventions.
Documentation
−−help
−h
Show usage (help) information.
−−version
Shows (just) the version number and exits.
Flawﬁnder 
26 Aug 2017
3
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
−−listrules