# Type Casting Verification: Stopping an Emerging Attack Vector

**Authors:**  
Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee  
School of Computer Science, Georgia Institute of Technology

**Publication Details:**  
Proceedings of the 24th USENIX Security Symposium  
August 12–14, 2015 • Washington, D.C.  
ISBN 978-1-939133-11-3  
Open access to the Proceedings is sponsored by USENIX

## Abstract
Many applications, such as the Chrome and Firefox browsers, are primarily implemented in C++ due to its performance and modularity. Type casting, which converts one object type to another, is essential for enabling polymorphism in C++. However, if not used correctly, it can lead to bad-casting or type-confusion vulnerabilities. These vulnerabilities can cause memory corruption, making them critical security issues. Despite the increasing number of bad-casting vulnerabilities, there has been a lack of effective detection tools.

In this paper, we introduce CAVER, a runtime bad-casting detection tool. CAVER performs program instrumentation at compile time and uses a new runtime type tracing mechanism called the Type Hierarchy Table (THTable) to efficiently verify type casting dynamically. CAVER is easy to integrate into existing applications, provides broad detection coverage, and incurs reasonable runtime overhead. We applied CAVER to large-scale software, including Chrome and Firefox, and discovered 11 previously unknown security vulnerabilities: nine in GNU libstdc++ and two in Firefox, all of which have been confirmed and fixed by vendors. Our evaluation showed that CAVER imposes up to 7.6% and 64.6% overhead for performance-intensive benchmarks on the Chromium and Firefox browsers, respectively.

## 1. Introduction
Object-oriented programming (OOP) is widely used for developing large and complex applications due to its encapsulation of data structures and algorithms into objects, facilitating cleaner design, better code reuse, and easier maintenance. C++ is particularly popular for performance-critical applications, such as major web browsers like Internet Explorer, Chrome, Firefox, and Safari.

Type casting in C++ allows an object of one type to be converted to another, enabling polymorphism. C++ supports two types of type conversions: `static_cast` and `dynamic_cast`. `static_cast` verifies the correctness of conversion at compile time, while `dynamic_cast` verifies type safety at runtime using runtime type information (RTTI). `static_cast` is more efficient but carries a security risk because compile-time information is insufficient to fully verify the safety of type conversions. Unsafe downcasting, known as bad-casting or type-confusion, can lead to memory corruption and undefined behavior.

Bad-casting has significant security implications. It is undefined behavior as specified in the C++ standard, and compilers cannot guarantee the correctness of program execution after bad-casting occurs. Bad-casting is similar to other memory corruption vulnerabilities, such as stack/heap overflows and use-after-free. A bad-casted pointer violates the programmer's intended pointer semantics, allowing an attacker to corrupt memory beyond the true boundary of an object. For example, a bad-casting vulnerability in Chrome (CVE-2013-0912) was exploited in the Pwn2Own 2013 competition to leak and corrupt a security-sensitive memory region.

To avoid bad-casting issues, some C++ projects use custom RTTI, which manually keeps type information at runtime and verifies the type conversion safety of `static_cast`. However, implementing custom RTTI in existing programs requires significant manual modifications. Another approach, implemented by Google in the Undefined Behavior Sanitizer (UBSAN), optimizes `dynamic_cast` and replaces all `static_cast` with `dynamic_cast`. This approach is limited because `dynamic_cast` only supports polymorphic classes, leading to runtime crashes when applied to non-polymorphic classes. UBSAN relies on manual blacklists to avoid these crashes, which is impractical for large-scale projects.

## 2. CAVER: Runtime Bad-Casting Detection Tool
We present CAVER, a runtime bad-casting detection tool that can be seamlessly integrated with large-scale applications. CAVER takes a program's source code as input and automatically instruments the program to verify type castings at runtime. We designed a new metadata structure, the Type Hierarchy Table (THTable), to efficiently track rich type information. Unlike RTTI, THTable uses a disjoint metadata scheme, allowing CAVER to support both polymorphic and non-polymorphic classes while preserving the C++ ABI and working seamlessly with legacy code.

CAVER achieves three main goals:
1. **Ease of Deployment:** CAVER can be easily adopted into existing C++ programs without manual effort. We demonstrated this by integrating CAVER into Chromium and Firefox with minimal build configuration changes.
2. **Coverage:** CAVER can protect all type castings of both polymorphic and non-polymorphic classes. Compared to UBSAN, CAVER covers 241% and 199% more classes and their castings, respectively.
3. **Performance:** CAVER employs optimization techniques to reduce runtime overheads. Our evaluation shows that CAVER imposes up to 7.6% and 64.6% overheads for performance-intensive benchmarks on the Chromium and Firefox browsers, respectively. In contrast, UBSAN is 13.8% slower than CAVER on the Chromium browser and cannot run the Firefox browser due to runtime crashes.

## 3. Contributions
Our contributions include:
1. **Security Analysis of Bad-Casting:** We provide a detailed analysis of bad-casting and its security implications, offering a better understanding of this emerging attack vector.
2. **Bad-Casting Detection Tool:** We designed and implemented CAVER, a general, automated, and easy-to-deploy tool that can detect and mitigate bad-casting vulnerabilities in any C++ application. We shared CAVER with the Firefox team and made our source code publicly available.
3. **New Vulnerabilities:** During our evaluation, we discovered eleven previously unknown bad-casting vulnerabilities in GNU libstdc++ and Firefox. All vulnerabilities have been reported and fixed in the latest releases. We expect that integration with unit tests and fuzzing infrastructure will allow CAVER to discover more bad-casting vulnerabilities in the future.

## 4. Organization of the Paper
This paper is organized as follows:
- **Section 2:** Explains bad-casting issues and their security implications.
- **Section 3:** Illustrates high-level ideas and usages of CAVER.
- **Section 4:** Describes the design of CAVER.
- **Section 5:** Details the implementation of CAVER.
- **Section 6:** Evaluates various aspects of CAVER.
- **Section 7:** Discusses applications and limitations of CAVER.
- **Section 8:** Reviews related work.
- **Section 9:** Concludes the paper.

## 5. Type Castings in C++
C++ provides four explicit casting operations: `static_cast`, `dynamic_cast`, `const_cast`, and `reinterpret_cast`. We focus on `static_cast` and `dynamic_cast` because they can perform downcasting and result in bad-casting. The key differences between these casts are:
1. **Time of Verification:** `static_cast` checks the correctness of a type conversion at compile time, while `dynamic_cast` checks at runtime.
2. **Runtime Support (RTTI):** `dynamic_cast` requires runtime support (RTTI) to provide type information for polymorphic objects.

### Example 1: Code Example
```cpp
class SVGElement : public Element { ... };

Element *pDom = new Element();
SVGElement *pCanvas = new SVGElement();

// (1) Valid upcast from pCanvas to pEle
Element *pEle = static_cast<Element*>(pCanvas);

// (2) Valid downcast from pEle to pCanvasAgain (== pCanvas)
SVGElement *pCanvasAgain = static_cast<SVGElement*>(pEle);

// (3) Invalid downcast (-> undefined behavior)
SVGElement *p = static_cast<SVGElement*>(pDom);

// (4) Leads to memory corruption
p->m_className = "my-canvas";

// (5) Invalid downcast with dynamic_cast, but no corruption
SVGElement *p = dynamic_cast<SVGElement*>(pDom);
if (p) {
    p->m_className = "my-canvas";
}
```
- (1) is a valid upcast.
- (2) is a valid downcast.
- (3) is an invalid downcast, leading to memory corruption.
- (4) Memory access via the invalid pointer results in memory corruption and undefined behavior.
- (5) Using `dynamic_cast`, the program can check the correctness of downcasting and avoid memory corruption.

### Practical Implications
Although `dynamic_cast` ensures type safety, it is computationally expensive. On average, `dynamic_cast` is 90 times slower than `static_cast`. For large applications like the Chrome browser, such performance overhead is unacceptable. Therefore, despite its security benefits, `dynamic_cast` is strictly forbidden in Chrome development.

A common workaround is to implement custom RTTI, where classes have methods like `isSVGElement()` to check the true allocated type of an object. This allows programmers to decouple `dynamic_cast` into an explicit type check followed by `static_cast`. However, implementing custom RTTI in existing complex programs is challenging and error-prone, leading to bad-casting bugs even with custom RTTI.

### Security Implications
The C++ standard specifies that incorrect `static_cast` results in undefined behavior. Exploiting bad-casting vulnerabilities can involve out-of-bound memory accesses or incorrect pointer adjustments. Understanding the security implications and exploitability of bad-casting requires deep knowledge of compiler implementations.

## 6. Conclusion
In this paper, we introduced CAVER, a runtime bad-casting detection tool that addresses the limitations of existing approaches. CAVER is easy to deploy, provides broad coverage, and incurs reasonable runtime overhead. We discovered several previously unknown bad-casting vulnerabilities in mature open-source projects and shared CAVER with the Firefox team for regression testing. Future work includes integrating CAVER with unit tests and fuzzing infrastructure to discover more bad-casting vulnerabilities.