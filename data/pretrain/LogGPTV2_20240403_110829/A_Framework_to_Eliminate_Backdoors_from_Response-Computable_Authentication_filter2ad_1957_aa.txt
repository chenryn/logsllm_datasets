title:A Framework to Eliminate Backdoors from Response-Computable Authentication
author:Shuaifu Dai and
Tao Wei and
Chao Zhang and
Tielei Wang and
Yu Ding and
Zhenkai Liang and
Wei Zou
2012 IEEE Symposium on Security and Privacy
A Framework to Eliminate Backdoors from Response-Computable
Authentication
Shuaifu Dai1, Tao Wei1,2∗, Chao Zhang1, Tielei Wang3, Yu Ding1, Zhenkai Liang4, Wei Zou1
1Beijing Key Lab of Internet Security Technology
Institute of Computer Science and Technology
Peking University, China
2University of California, Berkeley
3College of Computing, Georgia Institute of Technology
4School of Computing, National University of Singapore
Abstract—Response-computable authentication (RCA)
is a two-party authentication model widely adopted by
authentication systems, where an authentication system
independently computes the expected user response and
authenticates a user if the actual user response matches
the expected value. Such authentication systems have
long been threatened by malicious developers who can
plant backdoors to bypass normal authentication, which
is often seen in insider-related incidents. A malicious
developer can plant backdoors by hiding logic in source
code, by planting delicate vulnerabilities, or even by using
weak cryptographic algorithms. Because of the common
usage of cryptographic techniques and code protection in
authentication modules, it is very difﬁcult to detect and
eliminate backdoors from login systems. In this paper,
we propose a framework for RCA systems to ensure that
the authentication process is not affected by backdoors.
Our approach decomposes the authentication module into
components. Components with simple logic are veriﬁed
by code analysis for correctness; components with cryp-
tographic/obfuscated logic are sandboxed and veriﬁed
through testing. The key component of our approach is
NaPu, a native sandbox to ensure pure functions, which
protects the complex and backdoor-prone part of a login
module. We also use a testing-based process to either detect
backdoors in the sandboxed component or verify that the
component has no backdoors that can be used practically.
We demonstrated the effectiveness of our approach in
real-world applications by porting and verifying several
popular login modules into this framework.
I. INTRODUCTION
User authentication is the basis of access control and
auditing. Through the login process, the authentication
system veriﬁes a user’s identity to grant the user proper
privilege in the system. The important role of a login
module makes it an attractive target for attackers. A
common type of login module attacks is through back-
doors: malicious developers intentionally leave code
in a login module to bypass normal authentication,
allowing them to get unauthorized privilege. There have
been many incidents where insiders left backdoors in
login modules to gain unauthorized access to computer
systems, e.g., the backdoor in Cart32 Shopping Cart [5].
*Corresponding author. Email: wei PI:EMAIL
Due to the complexity of large software systems, it is
very hard to completely detect this type of threats.
Based on how the authentication system interacts with
users, it typically falls into two categories: after a user
responds to the authentication challenge, the authentica-
tion system either compares the user’s response with an
expected value computed from known credentials of the
user, or uses the user’s response as part of a complicated
authentication computation. The authentication system
of the ﬁrst type computes the expected response value
using credentials on the server. The user is authenticated
if the computed value matches the user’s response.
We refer to this type of authentication as response-
computable authentication (RCA). In the other type of
authentication systems, the user response is used as an
input to the authentication computation, which is based
on techniques such as public-key cryptography [26] and
zero-knowledge proof [6]. In this paper, we focus on
backdoors in the ﬁrst type of authentication system,
response-computable authentication (RCA), which is
widely used in authentication systems.
Malicious developers have various ways to plant and
hide backdoors in RCA login modules. The simplest
way is to add a hard-coded username/password pair.
Alternatively, a backdoor condition can be an obfus-
cated relationship between the username and password.
Besides user inputs, a backdoor may also be triggered
by system events or internal state of the authentication
process. Moreover, malicious developers can exploit a
vulnerability in the login module to circumvent
the
normal authentication process. They can also embed
cryptographic backdoors in RCA modules, e.g., using
a carefully constructed insecure hash function to make
two responses collide at a controllable probability to
allow the backdoor’s creator to login.
it
is very difﬁcult
Although it is straightforward to detect hard-coded
username/password pairs,
to use
program analysis to ﬁnd backdoors in login modules
that involve heavy cryptographic computations or code
protection and obfuscation. Manual source code review
is also difﬁcult to detect cryptographic backdoors. Fur-
thermore, a malicious developer can directly instrument
, Shhuaifu Dai. Under license tou
© 2012,,,
DOI 10.1109/SP.2012.10
h IEEE.
3
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:58 UTC from IEEE Xplore.  Restrictions apply. 
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
a
i
h
a
h
h
h
h
h
h
h
h
User
Server
0) login request
1) Challenge
Usually, step 2-4 
are combined to 
a function L()
Compute Response
based on 
(Password, Challenge)
2) Response
REJECT
3) Response
=
4') N
4) Y
ACCEPT
Figure 1.
(RCA).
Typical steps in Response-Computable Authentication
backdoors at the binary level. For example, a trojaned
compiler can create a backdoor in the programs it gen-
erates, which is based on hard-coded passwords [32].
Figure 1 illustrates the process of a typical two-party
login protocol using RCA, based on techniques such
as plain text password, CRAM-MD5 [21], RSA Se-
cureID [3], time-based one-time password (TOTP) [4],
and HMAC-based one-time password (HOTP) [24]. On
receiving the authentication request (step 0), the server
generates a challenge to the user (step 1). After it
receives the response from the user (step 2), the server
computes the expected response value using the cre-
dentials on the server (step 3). It authenticates the user
if the user’s response matches the server’s computed
response value (step 4). Step 3 and step 4 form the
RCA authentication procedure. We use L() to denote
the RCA decision function. It maps user response to
a boolean value, TRUE for “accept” and FALSE for
“reject”.
By studying several types of RCA backdoors, we
observe that all such systems treat the decision function
L() as a blackbox:
they authenticate users only by
the return value of L(), no matter how this return
value is generated. As a result, they cannot distinguish
authentication decisions resulted from authentic user
response and those resulted from backdoors. For ex-
ample, when the L() contains a backdoor using a hard-
coded username, it immediately returns true when the
username is provided.
In this paper, we design a secure framework for RCA
to ensure that the authentication result is not affected by
backdoors. Since backdoors in login modules are caused
4
by the blackbox nature of the authentication process, the
high-level idea is to decompose the RCA login module
into components: for components with simple logic,
verify theirs correctness by code review and analysis;
for components with cryptographic/obfuscated logic,
sandbox them to prevent the logic from being affected
by attackers, and then verify the logic through testing.
The decision function L() has two main components,
response computation (denoted as f ()) and response
comparison. The response comparison is a simple com-
ponents that can be directly veriﬁed by code review,
but we need to make sure it cannot be bypassed.
The response-computation function depends on assistant
components, such as reading the password database.
The assistant components are typically simple and can
be checked for backdoors by code review and anal-
ysis. The major challenge arises from the response-
computation function, which often contains a lot of
cryptographic operations, making it very difﬁcult
to
detect backdoors by code inspection. Our solution en-
sures that the response-computation function to be a
pure function, which returns the same result without
side effects each time it is invoked on the same set of
arguments [14].
Our approach ensures response-computation function
to be free of backdoors based on the following ob-
servation: for one login try, there is only one correct
response which we can explicitly get from the response-
computation function. Following this observation, we
use formal analysis to identify the upper bound of
backdoor usability in a login module, which forms a
theoretical basis of our testing methods. Through the
testing, either we can detect the possible backdoor or we
can ensure the backdoor cannot be used by its creator.
To the best of our knowledge, this approach is the ﬁrst
to give formal analysis of probability of authentication
backdoor usability.
To achieve this goal, we design NaPu, a native
sandbox to ensure pure functions, and use it to purify
the response-computation function. NaPu has several
features: vulnerability isolation, global state isolation,
and internal state reset. These features can prevent an
attacker from triggering backdoors stealthily. We build
the NaPu sandbox based on Native Client (NaCl) [37],
and implement our framework to secure RCA modules.
We ported several widely used login modules, such as
CRAM-MD5, HOTP, TOTP, into this framework, and
veriﬁed that these ported libraries are backdoor-free.
Our results showed that our solution can be easily ap-
plied to real-world systems with acceptable performance
overhead.
In summary, we develop a solution to ensure that
response-computable authentication is free of impacts
from backdoors. Our solution either detects hidden
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:58 UTC from IEEE Xplore.  Restrictions apply. 
backdoors or ensures the malicious developer cannot
bypass authentication even with a backdoor planted
in the authentication process. Our solution makes the
following contributions:
• We propose a novel framework to guarantee that
the decision of an RCA login module is not affect-
ed by backdoors. The key idea is to ensure each
sub-component of the authentication process free
of backdoor inﬂuence, either by analysis of simple
application logic, or by sandboxing and testing
cryptographic/obfuscated logic.
• We give a systematic analysis of authentication
backdoors, and formally prove the upper bound of
possibility that a backdoor can be used by attackers
in an RCA login module.
• We build NaPu, a NaCl-based pure-function-
enforcing sandbox, to support the framework.
• We have prototyped our framework and ported
many widely-used login modules. Our evaluation
veriﬁed that they are free of backdoors.
The rest of this paper is organized as follows: Sec-
tion II introduces RCA backdoors and the adversary
model. Section III describes our intuition and approach
design. Section IV analyzes the security of our solution.
Section V explains our prototype implementation. We
present the evaluation results in Section VI. Section VII
discusses limitation of our solution. We discuss related
work in Section VIII. Section IX concludes this paper.
II. BACKGROUND
In this section, we describe the adversary model for
our approach, i.e., what malicious developers can do and
what they cannot to launch an RCA-backdoor attack.
Furthermore, we discuss characteristics of backdoors in
RCA login modules, and categorize these backdoors.
We also introduce the concept of pure function, which
is the basis of our solution.
A. Adversary Model
We focus on RCA backdoors in login modules. The
backdoors are implemented by malicious developers
who have the opportunity to access developing envi-
ronments and modify code or binaries. These malicious
developers include malicious insider developers and
even intruders. They can implement backdoors in soft-
ware during the development process, but they cannot
interfere in the deployment environment.
Methods to plant backdoors. Backdoors can be plant-
ed in different ways. The straightforward way is to
modify the source code directly. For example, in the
ProFTPD incident [2], the intruder concealed a back-
door in the source code package. The malicious de-
veloper can modify the development environment, such
as the compiler. Thompson’s compiler backdoor [32]
5
is such an example. The malicious developer can also
directly modify the binary code to insert a backdoor.
The latter two types of backdoor-planting methods
cannot be detected by source code review.
Methods to avoid detection. We assume malicious
developers cannot use obfuscation or anti-debugging
techniques to build backdoors, which are not permitted
when code review is required. However, the attacker
still has a number of ways to prevent the backdoor
from being detected. They may construct a subtle
vulnerability that eludes source code inspections, and
gain system privilege by a malformed input. They may
design and use a weak cryptographic algorithm in
the login modules, for example, using insecure hash
functions with a weak collision probability.
Attacker’s Limitations. Similar to [18], we assume
that only few developers act maliciously, and they
cannot compromise the source code review and software
testing process. Moreover, they cannot compromise the
deployed systems where the login module runs, so the
operating system modules are trusted, which provide
ﬁle reads, network communication, and random number
generation. In other words, we do not consider the
attacks in which the user-space login module with
backdoors can directly control the kernel of operating
system (e.g., a rootkit) or modify system libraries. In
addition, we assume the backdoor creators cannot mod-
ify the password database in the deployed systems. Such
attacks can be simply identiﬁed by database auditing.
B. Types of RCA Backdoor
A general RCA decision function L(), shown in
Figure 1, takes inputs from users U and global states G,
maintains internal states I, and returns a boolean value,
T RU E for accept and F ALSE for reject. Speciﬁcally,
the response-computation component of L() generates
an expected response Response(cid:2), and the response-
comparison component of L() compares Response(cid:2)
with the user’s response Response. Based on how
Response is used in the login module with a backdoor,
we classify backdoors into two categories:
comparison
(Response(cid:2) (cid:2)= Response): In this category, the attack-
er can authenticate successfully regardless of the value
of Response and Response(cid:2), because the response-
comparison step is bypassed. The attacker can login
even when the response-computation function f () does
not compute any response at all. The bypassing is
usually triggered when some special conditions are met:
Based on L()’s input type, there are three basic types
of trigger conditions, listed as follows.
Type T1: Bypassing
response
• U-triggered backdoors. Special user inputs U can
be used to trigger hidden logic or intended vulner-
abilities in L() to bypass the comparison statement
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:58 UTC from IEEE Xplore.  Restrictions apply. 
static int i=0;
...
i++ //record the login attempt number
if (i%10==0)
{
response = str.revert(challenge);
// transform based on the challenge
}
return response;
...