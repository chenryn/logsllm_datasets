In our second exploit, we assume state-of-the-art mitigations against
code reuse and speculative execution to be enabled. In this exploita-
tion scenario, starting after the code region probing step detailed
earlier, we use our gadget probing primitive to find a Stage 2 Spectre
probing primitive.
Locating a Spectre gadget. We pick the following out-of-band
Spectre gadget to be probed using our gadget probing:
0 x4f8990 : // function prologue
...
r13 , rdi
0 x4f89a4 : mov
0 x4f89a7 : push r12
0 x4f89a9 : push rbx
0 x4f89aa : mov
0 x4f89b1 : mov
0 x4f89b5 : cmp
0 x4f89b8 : je
0 x4f89ba : cmp
0 x4f89c2 : mov
0 x4f89c7 : je
0 x4f89c9 : mov
0 x4f89d0 : mov
0 x4f89d2 : mov
Listing 2: Gadget in vp_del_vqs and at kernel image offset
0x4f89a4. The rdi register points to the packet socket object.
r12 , qword ptr [ rdi + 0 x2f8 ]
rbx , qword ptr [ r12 ]
r12 , r14
0 xffffffff88cf8a0f
byte ptr [ r13 + 0 x3b0 ], 0
esi , dword ptr [ r12 + 0 x28 ]
0 xffffffff88cf89f7
rdx , qword ptr [ r13 + 0 x380 ]
eax , esi
rax , qword ptr [ rdx + rax *8]
While probing for this gadget, we arrange the memory at the
corrupted function pointer such that, when our probe targets this
gadget, the instruction at 0x4f89d2 leaves a signal in an expected
cache set. Data to be leaked (i.e., rax) is added to an array pointer
(i.e., rdx) and then the resulting pointer is dereferenced. Note that
the data pointer (i.e., r12) and the array pointer are both loaded
from the non-linear out-of-bound write region using the rdi reg-
ister. This means we only need to provide the gadget with valid
pointers to dereference in order to get a signal in our target cache
set. Next we look at two important aspects of our Spectre gadget
before discussing two optimizations to speed up the execution of
the exploit using this gadget.
Bypassing mitigations. Note that our target gadget is resistant
to both Spectre (since it is out-of-band and not protected by ar-
ray index masking) and randomization mitigations. In particular,
since this gadget does not feature function calls or branching code,
it is resistant to function-level and basic block-level randomiza-
tion by construction. We also experimentally confirmed our gadget
is resilient to FGKASLR [4]—a recent fine-grained function-level
randomization scheme proposed by Intel and currently being con-
sidered for the mainline Linux kernel.
Moreover, all the gadget’s required inputs are derived from the
rdi register which cannot be randomized with register-level ran-
domization since it is an argument (not a general-purpose) regis-
ter [23]. Hence, our Spectre gadget has no internal entropy and we
can probe for it even with strong fine-grained and leakage-resistant
randomization. Furthermore, since this piece of code is not expected
to process user-provided input, it is not guarded against speculative
execution attacks using e.g., lfence or array index masking.
The gadget’s longevity. Notably, we found our target Spectre
gadget is available from Linux kernel v3.19 until v5.8 (i.e., the most
recent version at the the time of writing), surviving 31 major Linux
kernel releases across over 5 years. This shows an attacker armed
with a write vulnerability can perform BlindSide attacks on a wide
range of recent production Linux kernel versions even when blind
to the particular kernel version.
Optimization: single cache set. Since we have only leaked the
kernel image location so far, we can only provide pointers to the
kernel image and not the heap. We use pointers to enum constants
to be used as data pointers and a pointer to the kernel image as the
array pointer. By using a code page as the array pointer, we are able
to distinguish the color of the page through code region probing.
Discovering the color of the array allows us to check for a signal in
only one cache set out of the many that map to different colors.
Optimization: function alignment. Because the gadget still gives
a signal when executed from the function entry point, we used a
step size of 16 bytes (i.e., function entry point alignment).
Results. While searching for the Spectre gadget, we measured a
probing speed using p+p of 3,650.4 code locations per second with
44 repetitions per cache set. On average, it takes around 76.7s to
find the gadget (i.e., on average located in the middle of the code).
Enabling flush+reload. After leaking the kernel heap base sim-
ilar to Exploit 1, we probe for a mapped user page with a signature
in the physmap with a step size of 2 MB to enable f+r. We measured
a probing speed of 3,658.0 pages per second with 44 repetitions per
cache set. On average, it takes around 1.1s to find the target user
page (i.e., on average located located in the middle of the physmap).
Leaking the root password hash with Spectre probing. assum-
ing strong mitigations against architectural code-reuse attacks, we
show how one can still leak sensitive information using Spectre
probing. As an example, we aim to leak the root password hash in
a data-only attack.
We force the system to load the contents of the /etc/shadow file
into the page cache by performing an unsuccessful authentication
using sudo, similar in spirit to prior hardware-based attacks [72, 94].
The memory page that stores the contents of /etc/shadow file
starts with the root:$ prefix. We use Spectre probing to leak the
first 4 bytes of each 4 KB page and in case of match with ‘root’, we
verify the hit by also checking the 4 bytes ‘ot:$’ at page offset 2.
Upon a match, we continue and leak the root password hash.
Results. While searching for the root:\$ snippet, we measured
a probing speed using f+r with Spectre probing of 19,520.5 pages
per second with 8 repetitions per cache line, looking for 1 hit in
the target cache line. On average, it takes around 107.4s to find the
snippet assuming that it is located in the middle of the kernel heap.
Cracking the root password hash. Assuming a default SHA-512
root password hash on Linux, a 60 node GPU cluster can brute-
force an eight character alphanumeric password in roughly one
hour [31]. On Amazon EC2 [1], this would cost less than $ 32.
6.5 Exploit 3: Breaking Software-based XoM
Our gadget probing primitive can leak gadgets regardless of the de-
ployed randomization technique. The target gadgets, however, need
to leave an observable trace in the LLC. Furthermore, analyzing the
suitability of each gadget for gadget probing can be burdensome:
as an example, our ROP chain requires eight gadgets for successful
exploitation. In our last exploit, we show that our Spectre probing
primitive provides a powerful arbitrary memory read primitive that
can even speculatively read code and bypass mitigations.
We simply aim our Spectre probing to the kernel image lo-
cation to leak the code contents. To our surprise, this bypasses
software-based XoM techniques for the kernel [71] by simply read-
ing code blocks that are protected by code randomization. In par-
ticular, this simple strategy trivially bypasses the software-based
range checks (skipped in nested speculative execution) proposed
in [71] even when they are enhanced by hardware support (i.e.,
Intel MPX, whose bounds checks are also deferred in speculative
execution). Other software-based implementations such as pointer
masking [55] can also be bypassed with the right gadgets (i.e., by
skipping over the mask operation), but we decided against com-
plicating our exploit since pointer masking is anyway difficult to
support in the kernel’s non-linear address space [71].
Our investigation also shows that execute-only memory defenses
that rely on hardware-enforced permission checks such as EPT [14,
32] are protected against Spectre probing. This is due to the fact
that speculative execution does not load data from the cache lines
that are marked as execute-only by EPT.
Dealing with aliasing. While leaking the entire kernel code, we
encountered multiple issues at certain memory addresses due to
address aliasing handling in modern CPUs. An example was an
aliasing issue caused by a stack store instruction at the beginning of
the Spectre gadget. When the given load address to leak from hap-
pened to 4k-alias the address of the earlier stack store instruction,
a stall introduced by the store-to-load forwarding logic [67, 83]
disrupted the signal. To address this issue, an option is to chain to-
gether multiple speculative gadgets [8] and perform stack pivoting
before executing the Spectre gadget. We confirmed this strategy
eliminates the issue, but also requires blindly probing for another
gadget. To lift this requirement, we opted for a simpler approach,
namely having the PoC switch to the legacy int 0x80 syscall inter-
face to misalign the kernel stack (compared to the regular syscall
interface) when needed. Another example was an aliasing issue
caused by a lock-prefixed load instruction in the vulnerable code
path disrupting the signal when leaking from the same page off-
set. To address this issue, we relied on multiple vulnerable objects
with different addresses for the lock-prefixed load instruction. By
applying these and other aliasing remedies, we were able to leak
all but 4 of the 8,961,112 kernel code bytes (due to residual aliasing
issues). To recover the missing 4 bytes, rather than further compli-
cating the exploit, one can simply perform disassembly and mount
a straightforward code inference attack [81].
Results. After probing for a mapped user page to enable f+r similar
to Exploit 2, we dumped the entire kernel code. We measured a
leakage speed using f+r with Spectre probing of 2,645.7 bytes per
second with 7 repetitions per cache line. This resulted in leaking
the entire kernel code in around 56 minutes.
6.6 Exploit Finalization
We finalize the exploits by escalating privileges to root. For Ex-
ploit 2, we can simply use the cracked root password. For Exploit 1
and Exploit 3, we trigger the control-flow hijack in regular (non-
speculative) execution, diverting to a ROP chain with 8 gadgets
disclosed from the code region. The ROP chain disables SMAP/S-
MEP and finally diverts execution to user memory a la ret2usr [50].
Executing directly in user space releases the attacker from the com-
plexities of a ROP attack. The user-space code essentially updates
the credentials of the controlled process to root as follows:
commit_creds ( p r e p a r e _ k e r n e l _ c r e d ( 0 ) ) ;
Listing 3: Code snippet updating process credentials to root.
To build the ROP chain, we use the disclosed ROP payload loca-
tion as a way to move a value from one register to another since we
miss a convenient gadget that does this specifically for the rax-rdi
transfer. Essentially, we need to move an updated control register
value from rax into rdi, which we then move to the CR4 control
register to disable SMAP/SMEP. We achieve the transfer by writ-
ing the value in rax back into the ROP payload and then popping
it again into rdi. During the just-in-time ROP payload prepara-
tion, we use the payload’s disclosed location to prepare a pointer
in the payload that points to the ROP payload location where a
`pop rdi; ret' gadget pops from.
After privilege escalation, the user-space code restores the kernel
stack pointer and returns to the hijacked indirect branch to continue
normal execution instead of instantly context switching to the user-
space using an iret instruction. Resuming normal execution from the
hijacked indirect branch ensures that locked resources are released.
7 DETAILED ANALYSIS
We have so far evaluated the throughput of our probing primitives
and the time to reliably complete the corresponding exploitation
steps. In this section, we present additional experiments to show
(i) we can effectively exploit kernel indirect branches to implement
our speculative control-flow hijacking building block for blind prob-
ing (Stage 1) and (ii) exploit disclosed kernel code to implement
1
c l f l u s h ( obj −>fp ) ;
1
2
3 mfence ( ) ;
4
5
i f ( f l u s h _ f p )
c l f l u s h ( obj −>f p _ e n a b l e d ) ;
i f
( obj −>f p _ e n a b l e d )
obj −>fp ( obj , o f f s e t ) ;
/ / => obj −>array [ ( o f f s e t +FID ) ∗ 5 1 2 ]
Listing 4: Code snippet in our kernel module. The comment
illustrates the body of the targeted function. FID is a
hardcoded function id, distinct for each function.
usable gadgets for more informed probing (Stage 2). We refer the in-
terested reader to Appendix A for a detailed analysis on the impact
of the number of repetitions on the success rate of our speculative
probing primitives.
For our gadget analysis, we used the Capstone (v4.0.1) disassem-
bler and statically analyzed the vulnerable Linux kernel version
4.8.0 used for our proof-of-concept exploits. To find potentially
exploitable indirect branches on the same kernel version, we used
the IdaPro (v7.2) interactive disassembler. We preferred IdaPro over
Capstone for this analysis as we performed backward analysis from
the indirect branches which required the cross-reference informa-
tion added by IdaPro.
To verify that the identified indirect branches, and speculative
probing in general, are not hindered by state-of-the-art mitiga-
tions against speculative execution attacks, we tested a recent (non-
vulnerable) Linux kernel version 5.3.0-40-generic with all the miti-
gations (e.g., Retpoline) enabled on an Intel i7-8565U CPU with the
microcode update for the IBPB, IBRS and STIBP mitigations.
7.1 Mitigation Resistance
We evaluate speculative probing’s ability to bypass mitigations