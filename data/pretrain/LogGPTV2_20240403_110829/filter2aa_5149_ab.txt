fmt.Println(v1)     // => 7
fmt.Println(len(m)) // => 2
delete(m, "k2")
fmt.Println(m) // => map[k1:7]
_, prs := m["k2"]
fmt.Println(prs) // => false
n := map[string]int{"foo": 1, "bar": 2}
fmt.Println(n) // => map[bar:2 foo:1]
```
### Pointers to structs
```go
v := &Vertex{1, 2}
v.X = 2
```
Doing `v.X` is the same as doing `(*v).X`, when `v` is a pointer.
Go Functions
--------
### Multiple arguments
```go
func plus(a int, b int) int {
    return a + b
}
func plusPlus(a, b, c int) int {
    return a + b + c
}
fmt.Println(plus(1, 2))
fmt.Println(plusPlus(1, 2, 3))
```
### Multiple return
```go
func vals() (int, int) {
    return 3, 7
}
a, b := vals()
fmt.Println(a)    // => 3
fmt.Println(b)    // => 7
```
### Function literals
```go
r1, r2 := func() (string, string) {
    x := []string{"hello", "quickref.me"}
    return x[0], x[1]
}()
// => hello quickref.me
fmt.Println(r1, r2)
```
### Naked returns
```go
func split(sum int) (x, y int) {
  x = sum * 4 / 9
  y = sum - x
  return
}
x, y := split(17)
fmt.Println(x)   // => 7
fmt.Println(y)   // => 10
```
Note that using naked returns hurts readability.
### Variadic functions
```go
func sum(nums ...int) {
    fmt.Print(nums, " ")
    total := 0
    for _, num := range nums {
        total += num
    }
    fmt.Println(total)
}
sum(1, 2)     //=> [1 2] 3
sum(1, 2, 3)  // => [1 2 3] 6
nums := []int{1, 2, 3, 4}
sum(nums...)  // => [1 2 3 4] 10
```
### init function
```go
import --> const --> var --> init()
```
---
```go
var num = setNumber()
func setNumber() int {
    return 42
}
func init() {
    num = 0
}
func main() {
    fmt.Println(num) // => 0
}
```
### Functions as values
```go
func main() {
    // assign a function to a name
    add := func(a, b int) int {
        return a + b
    }
    // use the name to call the function
    fmt.Println(add(3, 4)) // => 7
}
```
### Closures 1
```go
func scope() func() int{
    outer_var := 2
    foo := func() int {return outer_var}
    return foo
}
// Outpus: 2
fmt.Println(scope()())
```
### Closures 2
```go
func outer() (func() int, int) {
    outer_var := 2
    inner := func() int {
        outer_var += 99
        return outer_var
    }
    inner()
    return inner, outer_var
}
inner, val := outer()
fmt.Println(inner()) // => 200
fmt.Println(val)     // => 101
```
Go Packages
--------
### Importing {.row-span-2}
```go
import "fmt"
import "math/rand"
```
#### Same as
```go
import (
  "fmt"        // gives fmt.Println
  "math/rand"  // gives rand.Intn
)
```
See: [Importing](https://tour.go.dev/basics/1)
### Aliases {.row-span-2}
```go
import r "math/rand"
```
---
```go
import (
    "fmt"
    r "math/rand"
)
```
---
```go
r.Intn()
```
### Packages
```go
package main
// An internal package may be imported only by another package
// that is inside the tree rooted at the parent of the internal directory
package internal
```
See: [Internal packages](https://go.dev/doc/go1.4#internalpackages)
### Exporting names
```go
// Begin with a capital letter
func Hello () {
  ···
}
```
See: [Exported names](https://tour.go.dev/basics/3)
Go Concurrency
--------
### Goroutines {.row-span-2}
```go
package main
import (
	"fmt"
	"time"
)
func f(from string) {
	for i := 0; i   | >=  | { | } |
| / | > | %=  | >>= | --   | !  | ... | . | : |
|   | &^ | &^= |     |      |    |     |   |   |
Also see {.cols-1}
--------
- [Devhints](https://devhints.io/go) _(devhints.io)_
- [A tour of Go](https://tour.go.dev/welcome/1) _(tour.go.dev)_
- [Go wiki](https://github.com/golang/go/wiki/) _(github.com)_
- [Effective Go](https://go.dev/doc/effective_go) _(go.dev)_
- [Go by Example](https://gobyexample.com/) _(gobyexample.com)_
- [Awesome Go](https://awesome-go.com/) _(awesome-go.com)_
- [JustForFunc Youtube](https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw) _(youtube.com)_
- [Style Guide](https://github.com/golang/go/wiki/CodeReviewComments) _(github.com)_