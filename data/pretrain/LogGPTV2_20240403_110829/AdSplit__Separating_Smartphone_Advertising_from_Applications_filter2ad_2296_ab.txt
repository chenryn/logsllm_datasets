one or more activities, which are roughly analogous to
windows in a traditional window system. Activities in
Figure 3: Screen sharing between host and advertisement
apps.
Android are maintained on a stack, simplifying the user
interface and enabling the “back” button to work consis-
tently across applications. This switching between activ-
ities as well as other related functions to activity lifecycle
are performed by the ActivityManager service.
When an activity is started, the ActivityManager cre-
ates appropriate data structures for the activity, schedules
the creation of a process for activity, and puts activity-
related information on a stack. There is a separate Win-
dowManager that manages the z-order of windows and
maintains their association with activities. The Activity-
Manager informs the WindowManager about changes to
activity conﬁguration. Since we want to factor out the
advertising code into a separate process / activity, this
will require a variety of changes to ensure that the user
experience is unchanged.
An app using AdSplit will require the collaboration of
three major components: the host activity, the advertise-
ment activity, and the advertisement service. The host
activity is the app that the user wants to run, whether a
game, a utility, or whatever else. It then “hosts” the ad-
vertisement activity, which displays the advertisement.
There is a one-to-one mapping between host activity and
advertisement activity instances. The Unix processes be-
hind these activities have distinct user-ids and distinct
permissions granted to them. To coordinate these two
activities, we have a central advertisement service. The
ad service is responsible for delivering UI events to the
ad activity. It also veriﬁes that the ad activity is being
properly displayed and that the UI clicks aren’t forged.
(More on the veriﬁcation task in Section 4.4.)
AdSplit builds on Quire [13], which prototyped a fea-
AdBuy! Cool! Stuff!Sample App(transparent, so ad is visible)ture shown in Fig. 3, allowing the host and advertise-
ment activities to share the screen together. First the
window for advertisement activity is layered just below
the host activity window. The host activity window con-
tains transparent regions where advertisement will be
displayed. Standard Android features allow the adver-
tisement activity to verify that the user can actually see
the ads.
4.2 Advertisement pairing
In AdSplit, we wish to take existing Android applications
and separate out their advertising to follow the model de-
scribed above. We ﬁrst must explain the variety of dif-
ferent ways in which an existing application might ar-
range for an advertisement to be displayed. We will use
Google’s AdMob system as a running example. Other
advertisement systems behave similarly, at least with re-
spect to displaying banner ads. (For simplicity of discus-
sion, we ignore full-screen interstitial ads.)
With current Android applications,
if a developer
wants to include an advertisement from AdMob in an ac-
tivity of her application, she imports the AdMob library,
and then either declares an AdMob.AdView in the XML
layout, or she generates an instance of AdMob.AdView
and inserts it in directly into the view hierarchy. This
works without issue since all AdMob classes are loaded
alongside the hosting application; they are separated only
by having diﬀerent package names.
Once we separate advertisements from applications,
neither of these techniques will work, since the code
isn’t there any more. We ﬁrst need a new mechanism.
Later, in Section 6, we will describe how AdSplit does
this transformation automatically.
We added a AppFrame element, which can appear in
the XML manifest, allowing the system to attach a sub-
sidiary activity to its host. This results in a distinct activ-
ity for the advertisement as well as a local stub to support
the same API as if the advertisement code was still local
to the host application. The stub packages up requests
and passes them onto the advertisement service.
One complication of this process is that advertising li-
braries like AdMob were engineered to have one copy
running in each process.
If we create a single, global
instance of any given advertising library, it won’t have
been engineered to maintain the state of the many origi-
nal applications which hosted it.
Consequently, the advertisement service must manage
distinct advertisement applications for each host applica-
tion. If ten diﬀerent applications include AdMob, then
there need to be ten diﬀerent AdMob user-ids in the sys-
tem, mapping one-to-one with the host applications. The
advertisement service is then responsible for ensuring
that the proper host application speaks to the proper ad-
vertising application.
This is suﬃcient to ensure that the existing advertising
libraries can run without requiring modiﬁcations. One
complication concerns Android’s mechanism for sharing
processes across related activities. When a new activ-
ity is launched and there is already a process associated
with the user-id of the application, Android will launch
the new activity in the same process as the old one [2].
If there is already an instance of an activity running, for
example, then Android will just resume the activity and
bring its activity window to the front of the stack. This
is normally a feature, ensuring that there is only a sin-
gle process at a time for any given application. However,
for AdSplit, we need to ensure that advertising apps map
one-to-one with hosting apps and we must ensure that
their activity windows stay “glued” to their hosts’ ac-
tivities. Consequently, we changed the default Android
behavior such that advertisement activities are diﬀerenti-
ated based not only by user-id, but also by the host activ-
ity. AdSplit thus required modest changes in how activ-
ities are launched and resumed as well as how windows
are managed.
4.3 Permission separation
With Android’s install-time permission system, an appli-
cation requests every permission it needs at the time of
its installation. As we described in Section 2, advertis-
ing libraries cause signiﬁcant bloat in the permission re-
quests made by their hosting applications. Our AdSplit
architecture allows the advertisements to run as separate
Android users with their own isolated permissions. Host
applications no longer need to request permissions on be-
half of their advertisement libraries.
We note that AdSplit makes no attempt to block a host
application from explicitly delegating permissions to its
advertisements. For example, the host application might
obtain ﬁne-grained location permissions (i.e., GPS coor-
dinates with meter-level accuracy) and pass these coor-
dinates to an advertising library which lacks any loca-
tion permissions. Plenty of other Android extensions, in-
cluding TaintDroid [15] and Paranoid Android [46], oﬀer
information-ﬂow mechanisms that might be able to for-
bid this sort of thing if it was considered undesirable. We
believe these techniques are complementary to our own,
but we note that if we cannot create a hospitable environ-
ment for advertisers, they will have no incentive to run in
an environment like AdSplit. We discuss this and other
policy issues further in Section 8.
4.4 Click fraud
AdSplit leverages mechanisms from Quire [13] to detect
counterfeit events, thus defeating the opportunity for an
Android host application to perform a click fraud attack
against its advertisers. While a variety of strategies are
used to defeat click fraud on the web (see, e.g., Juels
et al. [31]), we need distinct mechanisms for AdSplit,
since a smartphone is a very diﬀerent environment from
a web browser.
Quire uses an system built around HMAC-SHA1
where every process has a shared key with a system
service. This allows any process to cheaply compute a
“signed statement” and send it anywhere else in the sys-
tem. The ultimate recipient can then ask the system ser-
vice to verify the statement. Quire uses this on user-
generated click events, before they are passed to the host
activity. The host activity can then delegate a click or
any other UI event, passing it to the advertising activity
which will then validate it without being required to trust
the host activity. The performance overhead is minimal.
Quire has support for making these signed statements
meaningful to remote network services. Unlike the web,
where we might trust a browser to speak truthfully about
the context of an event (see Section 3.1), any app might
potentially send any message to any network service. In-
stead, Quire provides a system service that can validate
one of these messages, re-sign it using traditional public-
key cryptography, and send it to a remote service over
the network.
Quire’s event delivery mechanism is summarized in
Fig. 4. The touch event is ﬁrst signed by the input sys-
tem and delivered to the host activity. The stub in the
host activity then forwards the touch event to advertise-
ment service which veriﬁes the touch event and forwards
it to the advertisement activity instance. This could
then be passed to another system service (not shown)
which would resign and transmit the message as de-
scribed above.
Despite Quire’s security mechanisms, there are still
several ways the host might attempt to defraud the adver-
tiser. First, a host application might save old click events
with valid signatures, potentially replaying them onto an
advertisement. We thus include timestamps for adver-
tisements to validate message freshness. Second, a host
may send genuine click events but move the AdView, we
prevent this kind of tampering by allowing the advertise-
ment service to query layout information about the host
activity. Third, a host application might attempt to hide
the advertising. Android already includes mechanism
for an activity to sort out its visibility to the screen [21]
(touch events may include a ﬂag that indicates the win-
dow is obscured); our advertising service uses these to
ensure that the ad was being displayed at the time the
click occurred.
It’s also conceivable that the host application could
simply drop input events rather than passing them to
the advertising application. This is not a concern be-
Figure 4: Motion event delivery to the advertisement ac-
tivity.
cause the host application has no incentive to do this.
The host only makes money from clicks that go through,
not from clicks that are denied. (Advertising generally
works on two diﬀerent business models: payment per
impression and payment per click.
In our AdSplit ef-
forts, we’re focused on per-click payments, but the same
Quire authenticated RPC mechanisms could be used in
per-impression systems, with the advertisement service
making remotely veriﬁable statements about the state of
the screen.) The host activity can also use a clickjacking
attack by anticipating the location of user touch and mov-
ing AdView to the intended location. Our implementa-
tion currently does not prevent this attack; ads could cer-
tainly check that they were visible at the proper location
for at least some minimum duration before considering a
click to be valid.
4.5 Summary
AdSplit, as we’ve described it so far, would not leverage
the Quire RPC mechanisms by default, since no oﬀ-the-
shelf advertising library has been engineered to use it.
There are other pragmatic issues, such as how the adver-
tisement applications might be installed and managed.
We address these issues in Sections 7 and 8. Nonetheless,
we now have a workable skeleton design for AdSplit that
we have implemented and benchmarked.
Input Event SystemHost ActivityQuire Authority ManagerAd ActivityAdd HMAC signatureVerify HMAC5 Performance
In order to evaluate the performance overhead of our sys-
tem we performed our experiments on a standard An-
droid developer phone, the Nexus One, which has a
1GHz ARM core (a Qualcomm QSD 8250), 512MB of
RAM, and 512MB of internal Flash storage. We con-
ducted our experiments with the phone displaying the
home screen and running the normal set of applications
that spawn at start up. We replaced the default “live wall-
paper” with a static image to eliminate its background
CPU load. All of our benchmarks are measured using
the Android Open Source Project’s (AOSP) Android 2.3
(“Gingerbread”) plus the relevant portions of Quire, as
discussed earlier.
Our performance analysis focuses on the eﬀect of Ad-
Split on user interface responsiveness as well as the extra
CPU and memory overhead.
5.1 Eﬀect on UI responsiveness
We performed benchmarking to determine the overhead
of AdSplit on touch event throughput. By default An-
droid has a 60 event per second hard coded limit; for our
experiments we removed this limit. Table 2 shows the
event throughput in terms of number of touch events per
second.
(The overhead added by our system is due to
passing touch events from the host activity to the adver-
tisement activity. There is also additional overhead due
to the additional traversal of the view hierarchy in the ad-
vertisement activity.) We can see the our system can still
support about 183 events per second which is well above
the default limit of 60. Furthermore, the Nexus One is
much slower than current-generation Android hardware.
CPU overhead, even in this extreme case, appears to be
a non-issue.
Stock Android AdSplit Ratio
0.796
229.96
183.12
tivity already has a WebView instance, a fairly common
practice, and it includes an advertisement, then most of
the code for the advertisement WebView will be shared,
yielding a relatively low additional overhead for the ad-
vertisement. (In our experiments we found out that mul-
tiple WebViews in the same activity will share their cook-
ies, which means that an advertisement can steal cookies
from any other WebViews in the activity.)
Consequently, in order to determine the actual mem-
ory overhead of separating advertisements from their
host applications, we need to diﬀerentiate between the
cases when host activities contain an instance of Web-
View and when they don’t. We did our measurements
by running the AdMob library, both inside the applica-
tion and in a separate advertisement activity. To measure
memory overhead we used procrank [14], which tells us
the proportional set size (Pss) and unique set size (Uss).
Pss is the amount of memory shared with other pro-
cesses, divided equally among the processes who share
it. Uss is the amount of memory used uniquely by the
one process. Table 3 lists our results for the memory
measurements.
Activity setup
and
Without Ad or
WebView
Only WebView
Only AdMob
WebView
AdMob
AdMob with Ad-
Split
WebView
AdMob
AdSplit
and
with
Memory Overhead (MB)
Host Activity Ad Activity
Pss
Uss
-
2.46
Uss
1.44
Pss
-
5.52
9.67
9.82
3.30
6.58
6.73
-
-
-
-
-
-
2.46
1.56
9.55
6.56
5.15
3.35
9.29
6.58
Table 2: Comparison of click throughput (Events/sec),
averaged over 1 million events.
5.2 Memory and CPU overhead
Measuring memory overhead on Android is complicated
since Android optimizes memory usage by sharing read-
only data for common libraries. Consequently, if an ac-
tivity has several copies of a UI widget, the eﬀective
overhead of adding a new instance of the same widget is
low. Every advertisement library that we examined dis-
plays advertisements by embedding a WebView. A We-
bView is an instance of web browser. When the host ac-
Table 3: Memory overhead for host and advertisement
activities with diﬀerent system conﬁgurations.
In interpreting our results we are primarily concerned
with the sum of Pss and Uss. From the table, we see
that starting with a simply activity without any WebView
(due to AdMob or its own), consumes about 3.9 MB.
This increases to about 9 MB if the activity has a We-
bView. Having AdMob loaded and displaying an adver-
tisement takes about 16.3 MB of memory. When an ac-
tivity has both WebView and AdMob, the total memory
used is only about 16.5 MB, demonstrating the eﬃciency
of Android’s memory sharing.
With AdMob in a separate process, we expect to pay
additional costs for Android to manage two separate ac-
cause of concern (see, e.g., the U.S. government’s Fed-
eral Trade Commission study of privacy disclosures for
children’s smartphone apps [17]). To some extent, the
potential for information leakage is driven by advertise-
ment permission bloat, so separating out the ad systems
and treating them distinctly is a valuable goal.
As we showed in Section 2, a signiﬁcant number of
current apps with embedded advertising libraries would
immediately beneﬁt from AdSplit, reducing the permis-
sion bloat necessary to host embedded ads. This section
describes a proof-of-concept implementation that can au-
tomatically rewrite an Android application to use Ad-
Split. Something like this could be deployed in an app
store or even directly on the smartphone itself.
Figure 6 sketches the rewriting process. First the ap-
plication is decompiled using android-apktool, convert-
ing dex bytecode into smali ﬁles. (Smali is to dex byte-
code what assembly language is to binary machine code;
smali is the human-readable version.) Because smali
ﬁles are organized into directories based on their pack-
age names, it’s trivial to distinguish the advertisement
libraries from their hosting applications. All we have to
do is delete the advertisement code and drop in a stub
library, supporting the same API, which calls out to the
AdSplit advertisement service. We also analyze the per-
missions required without the advertisement present (see
Section 2), remove permissions which are no longer nec-
essary, and edit the manifest appropriately.
For our proof of concept, we decided to focus our at-
tention on AdMob. Our techniques would easily gen-
eralize to support other advertising libraries, if desired.