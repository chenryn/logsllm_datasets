# Vulnerability and Reference List

| **Vulnerability Name** | **Description** |
| --- | --- |
| vuln-asn1 | ASN.1 Vulnerability Could Allow Code Execution (MS04-007) |
| vuln-bagle | Emulation of backdoor from Bagle worm |
| vuln-dcom | Buffer Overrun in RPC Interface (MS03-026) |
| vuln-iis | IIS SSL Vulnerability (MS04-011 and CAN-2004-0120) |
| vuln-kuang2 | Emulation of backdoor from Kuang2 worm |
| vuln-lsass | LSASS vulnerability (MS04-011 and CAN-2003-0533) |
| vuln-msdtc | Vulnerabilities in MSDTC Could Allow Remote Code Execution (MS05-051) |
| vuln-msmq | Vulnerability in Message Queuing Could Allow Code Execution (MS05-017) |
| vuln-mssql | Buffer Overruns in SQL Server 2000 Resolution Service (MS02-039) |
| vuln-mydoom | Emulation of backdoor from myDoom/Novarg worm |
| vuln-optix | Emulation of backdoor from Optix Pro trojan |
| vuln-pnp | Vulnerability in Plug and Play Could Allow Remote Code Execution (MS05-039) |
| vuln-sasserftpd | Sasser Worm FTP Server Buffer Overflow (OSVDB ID: 6197) |
| vuln-ssh | Logging of SSH password brute-forcing attacks |
| vuln-sub7 | Emulation of backdoor from Sub7 trojan |
| vuln-wins | Vulnerability in WINS Could Allow Remote Code Execution (MS04-045) |

## Overview of the Nepenthes Platform

The selection of emulated vulnerabilities listed above has proven to be sufficient for handling most autonomous spreading malware observed in the wild. These modules enable us to gather more information about propagating malware. If a packet flow cannot be handled by any vulnerability module, all collected data is stored on disk for later analysis. This allows us to detect changes in attack patterns, identify new trends, and develop new modules. In the case of a zero-day vulnerability, where no public information is available, this approach facilitates rapid analysis as the initial stages of the attack are already captured.

### Potential Drawbacks
One drawback of this approach is that an attacker can send random data to a network port, causing Nepenthes to store this data on disk. This could lead to a Denial-of-Service (DoS) condition if the attacker sends a large amount of bogus traffic. However, we have not experienced any significant issues with this, and the problem can be mitigated by implementing upper bounds on the amount of traffic stored on disk.

### Developing New Vulnerability Modules
Developing a new vulnerability module to emulate a novel security vulnerability or capture a propagating zero-day exploit is a straightforward process. On average, writing less than 500 lines of C++ code (including comments and blank lines) is required to implement the necessary functionality. This task can be completed quickly, sometimes in just a few minutes, with some experience.

### Case Study: Zotob Worm
As an example, consider our experience with the Zotob worm. On August 9, 2005, Microsoft announced a critical security vulnerability in the Plug and Play service of Windows 2000 and Windows XP (MS05-039). Two days later, a proof-of-concept exploit was released, which provided enough information to implement a vulnerability module for Nepenthes. Without the proof-of-concept, it would have been more complex to build a module based solely on the security advisory. Nevertheless, it was feasible. Three days after the release of the proof-of-concept, the Zotob worm began exploiting this vulnerability in the wild. By this time, Nepenthes was already capable of capturing such worms. Similarly, the process of emulating the vulnerability in Microsoft Distributed Transaction Coordinator (MSDTC), published in MS05-051, took only a small amount of time.

## Scalability Evaluation

To evaluate the scalability of the Nepenthes platform, we used a testbed with a 2.4GHz Pentium III, 2 GB of physical memory, and a 100 MB Ethernet NIC running Debian Linux 3.0 and version 2.6.12 of the Linux kernel. The system ran Nepenthes 0.1.5 in its default configuration, using all 21 vulnerability modules, resulting in 29 TCP sockets emulating vulnerable services.

We tested the implementation with a varying number of emulated systems, ranging from 256 to 32,000 honeypots. For each configuration, we measured the number of established TCP connections, system load, and memory consumption over one hour. The results showed nearly linear scalability up to 8,192 IP addresses, with a system load below 1. Beyond this point, the number of established TCP connections decreased due to a system load above 1, indicating the system was fully occupied with I/O operations.

### Long-Term Performance
We also evaluated the long-term performance of the Nepenthes platform emulating a /18 network (about 16,000 IP addresses) over five months. The system was stable, with occasional kernel crashes caused by instabilities in the Linux kernel. The average number of established TCP connections was 796, with peaks of up to 1,172. The system could handle bursts of more than 1,300 concurrent connections, and the average load was slightly above 1, indicating the processor was never idle.

### Network Throughput
The average incoming network throughput was 308.8 kB/s, with a maximum of 369.7 kB/s. The outgoing throughput averaged 86.6 kB/s, with a peak of 105.4 kB/s. Despite high volatility in concurrent TCP connections, the network throughput remained stable.

### Malware Collection Statistics
Over a four-month period, we collected more than 15,500 unique binaries, totaling approximately 1,400 MB of data. Uniqueness was determined by different MD5 sums of the collected binaries. The detection rates of various antivirus engines for the complete set and the latest 24 hours are shown in Table 2. The top ten types of collected malware are listed in Table 3.

| **Table 2: Detection Rates of Different Antivirus Engines** |
| --- |
| **Complete Set (14,414 binaries)** | **Latest 24 Hours (460 binaries)** |
| **AV Engine 1** | 78.1% | 85.0% |
| **AV Engine 2** | 73.1% | 82.6% |
| **AV Engine 3** | 90.2% | 85.3% |
| **AV Engine 4** | 84.1% | 77.8% |

| **Table 3: Top Ten Types of Collected Malware** |
| --- |
| **Place** | **Name According to ClamAV** | **Number of Captured Samples** |
| 1 | [Malware Type 1] | 1,369 |
| 2 | [Malware Type 2] | 906 |
| 3 | [Malware Type 3] | 698 |

This comprehensive evaluation demonstrates the effectiveness and efficiency of the Nepenthes platform in collecting and analyzing malware.