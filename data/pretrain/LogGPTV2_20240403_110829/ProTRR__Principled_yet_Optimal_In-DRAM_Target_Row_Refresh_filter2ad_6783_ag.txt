be traded-off with each other (Flex.,
). For flexibility, we
further analyze if the mitigation’s required storage size is
), hence is more wasteful, or scales with
always the same (
). The security category
the system’s connected devices (
includes the mitigations’ guarantees, which are either determin-
istic (Det.,
). Deterministic mitigations
provide a stronger guarantee against bit flips. Further, we
consider if a mitigation provides a formal proof (FP) for its
design (
). Lastly, we highlight those mitigations for which
we (or existing work) revealed vulnerabilities (Vuln.), and we
distinguish between minor issues (
) and fundamental flaws
). An extensive support of different DRAM
in the design (
standards (DDR4, DDR5) is essential to ensure practicality and
widespread adoption. We further analyze whether mitigations
require changes to the DRAM protocol (
).
Finally, we consider the system integration effort by describing
which components need to be modified. Minimizing the
effort is critical for real-world adoption as indirectly affected
manufacturers (i.e., CPU/OS vendors) may not be willing to
implement complex solutions.
Scalability. Only two mitigations (PROTRR and Graphene)
are optimal w.r.t. counters and refresh requirements. PROTRR
is the only solution that can flexibly trade-off storage with
additional refreshes. PROTRR, ProHIT and Panopticon are
the only mitigations that have counters in-DRAM, i.e., their
required storage scales per connected device. Panopticon’s
storage is flexible as the counter table uses DRAM memory.
PARA is completely stateless and does not require any storage.
Similarly, MRLoc has negligible storage requirements. All other
hardware-based mitigations are implemented in the memory
controller; hence vendors need to provision enough storage for
the system’s maximum supported DRAM size.
Security. Few mitigations provide formal security guarantees
for protection against Rowhammer attacks. We denote mit-
igations without known vulnerabilities by “—”. Based on
our security analysis (§ IX) and previous work [19], most
of the hardware-based mitigations suffer from vulnerabilities.
PARA’s security is probabilistic, and to protect modern devices
the overhead can be substantial [21]. Instead, all software
mitigations provide a partial protection because of blindness to
internal row remapping, and to newer Rowhammer variants like
half-double [34]. Previous work has also shown design-level
flaws in ANVIL [8], [44], [66] and GuardION [42].
Support. None of the existing hardware-based mitigations are
DDR5-ready, except PROTRR, which considers the new RFM
extension introduced in the DDR5 standard [30]. Software-
based mitigations are agnostic to the DDR technology. PROTRR,
ProHIT, and Blockhammer are the only three mitigations that do
not require changing the DRAM protocol. TWiCe and Graphene
require adding new DRAM commands for refreshing rows
adjacent to the aggressors, and PARA requires communicating
the mapping of internal rows to the CPU. All other mitigations
implicitly assume that there exists a DRAM command for
refreshing a specific row – which currently does not exist.
Integration. Our comparison shows that all hardware-based
solutions require modifications to the CPU (e.g., memory
controller), except for PRoHIT, and PROTRR, which can
be fully implemented in-DRAM. PRoHIT is vulnerable to
specific patterns [19]. Panopticon [65] requires the CPU’s
memory controller to handle the ALERT signal gracefully, and
as discussed in Section IX, some of its security aspects remain
unclear. Instead, PROTRR is the only solution with deterministic
and formal security guarantees. Software-based solutions are
often integrated into the operating system’s kernel. None has
seen widespread adoption so far.
XI. CONCLUSION
We introduced PROTRR, the first in-DRAM Rowhammer
mitigation with formal security guarantees, for which we also
proved that it is optimal in terms of storage and refresh overhead
for any given DRAM technology. PROTRR is secure against
FEINTING, the best possible attack we have formally constructed
against a perfect in-DRAM TRR. Moreover, we used insights
from FEINTING to provide a flexible trade-off between needed
storage and refreshes given a DRAM device with a certain
degree of vulnerability to Rowhammer. PROTRR is compatible
with DDR4 and leverages the recent RFM extension in
DDR5 to support future devices that are more susceptible
to Rowhammer. We evaluated PROTRR’s space, performance,
and power overhead using an ASIC implementation and
cycle-accurate simulation. In summary, PROTRR can protect
current and future devices while requiring minimal storage and
incurring negligible power and performance overhead.
ACKNOWLEDGMENTS
We thank our anonymous reviewers, also Stefan Saroiu
and Hans Diesing for their valuable feedback. We thank
Kubo Takashi for sharing valuable insights into DRAM
technology. This research was supported by the Swiss National
Science Foundation under NCCR Automation, grant agreement
51NF40 180545, and in part by the Netherlands Organisation
for Scientific Research through grant NWO 016.Veni.192.262.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
749
REFERENCES
[1] P. Frigo, E. Vannacci, H. Hassan, V. van der Veen, O. Mutlu, C. Giuffrida,
H. Bos, and K. Razavi, “TRRespass: Exploiting the Many Sides of Target
Row Refresh,” in IEEE S&P, 2020.
[2] H. Hassan, Y. C. Tugrul, J. S. Kim, V. Van der Veen, K. Razavi, and
O. Mutlu, “Uncovering in-dram rowhammer protection mechanisms:
A new methodology, custom rowhammer patterns, and implications,”
in MICRO-54: 54th Annual IEEE/ACM International Symposium on
Microarchitecture, 2021, pp. 1198–1213.
[3] P. Jattke, V. van der Veen, P. Frigo, S. Gunter, and K. Razavi, “Blacksmith:
Scalable Rowhammering in the Frequency Domain,” in IEEE S&P, May
2022.
[4] F. de Ridder, P. Frigo, E. Vannacci, H. Bos, C. Giuffrida, and
K. Razavi, “SMASH: Synchronized Many-sided Rowhammer Attacks
from JavaScript,” in USENIX Security, 2021.
[5] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.Js: A Remote
Software-Induced Fault Attack in JavaScript,” in DIMVA, 2016.
[6] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida, “Dedup Est Machina:
Memory Deduplication as an Advanced Exploitation Vector,” in IEEE
S&P, 2016.
[7] P. Frigo, C. Giuffrida, H. Bos, and K. Razavi, “Grand Pwning Unit:
Accelerating Microarchitectural Attacks with the GPU,” in IEEE S&P,
2018.
[8] V. van der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss, C. Maurice,
G. Vigna, H. Bos, K. Razavi, and C. Giuffrida, “Drammer: Deterministic
Rowhammer Attacks on Mobile Platforms,” in ACM SIGSAC, ser. CCS
’16. New York, NY, USA: Association for Computing Machinery, 2016,
pp. 1675–1689.
[9] V. van der Veen, M. Lindorfer, Y. Fratantonio, H. P. Pillai, G. Vigna,
C. Kruegel, H. Bos, and K. Razavi, “Guardion: Practical Mitigation of
DMA-Based Rowhammer Attacks on ARM,” in DIMVA, 2018.
[10] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida, and H. Bos,
“Flip Feng Shui: Hammering a Needle in the Software Stack,” in USENIX
Security, 2016.
[11] Y. Xiao, X. Zhang, Y. Zhang, and R. Teodorescu, “One Bit Flips, One
Cloud Flops: Cross-VM Row Hammer Attacks and Privilege Escalation.”
in USENIX Security, 2016.
[12] A. Tatar, R. K. Konoth, E. Athanasopoulos, C. Giuffrida, H. Bos, and
K. Razavi, “Throwhammer: Rowhammer Attacks over the Network and
Defenses,” in USENIX ATC, 2018.
[13] M. Lipp, M. Schwarz, L. Raab, L. Lamster, M. T. Aga, C. Maurice, and
D. Gruss, “Nethammer: Inducing Rowhammer Faults Through Network
Requests,” in EuroS&PW, 2020, pp. 710–719.
[14] M. Seaborn and T. Dullien, “Exploiting the DRAM Rowhammer Bug to
Gain Kernel Privileges,” in Black Hat USA, 2015.
[15] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu, “Flipping bits in memory without accessing them:
An experimental study of DRAM disturbance errors,” in ISCA, 2014.
[16] I. Kang, E. Lee, and J. H. Ahn, “CAT-TWO: Counter-Based Adaptive
Tree, Time Window Optimized for DRAM Row-Hammer Prevention,”
IEEE Access, vol. 8, pp. 17 366–17 377, 2020.
[17] J. M. You and J.-S. Yang, “MRLoc: Mitigating Row-hammering based
on Memory Locality,” in DAC.
IEEE, 2019, pp. 1–6.
[18] E. Lee, I. Kang, S. Lee, G. Edward Suh, and J. Ho Ahn, “TWiCe:
Preventing Row-hammering by Exploiting Time Window Counters,” in
ISCA, 2019.
[19] Y. Park, W. Kwon, E. Lee, T. J. Ham, J. H. Ahn, and J. W. Lee, “Graphene:
IEEE,
Strong yet Lightweight Row Hammer Protection,” in MICRO.
2020, pp. 1–13.
[20] A. G. Ya˘glikc¸i, M. Patel, J. S. Kim, R. Azizi, A. Olgun, L. Orosa,
H. Hassan, J. Park, K. Kanellopoulos, T. Shahroodi, S. Ghose, and
O. Mutlu, “BlockHammer: Preventing RowHammer at Low Cost by
Blacklisting Rapidly-Accessed DRAM Rows,” in HPCA, 2021, pp. 345–
358.
[21] J. S. Kim, M. Patel, A. G. Ya˘glıkc¸ı, H. Hassan, R. Azizi, L. Orosa,
and O. Mutlu, “Revisiting RowHammer: An Experimental Analysis of
Modern DRAM Devices and Mitigation Techniques,” in ISCA, 2020, pp.
638–651.
[22] Z. B. Aweke, S. F. Yitbarek, R. Qiao, R. Das, M. Hicks, Y. Oren, and
T. Austin, “ANVIL: Software-Based Protection Against Next-Generation
Rowhammer Attacks,” in ASPLOS, 2016.
[23] L. Cojocar, K. Razavi, C. Giuffrida, and H. Bos, “Exploiting Correcting
Codes: On the Effectiveness of ECC Memory Against Rowhammer
Attacks,” in IEEE S&P, 2019.
[24] F. Brasser, L. Davi, D. Gens, C. Liebchen, and A.-R. Sadeghi, “CAn’t
Touch This: Software-Only Mitigation against Rowhammer Attacks
targeting Kernel Memory,” in USENIX Security, 2017.
[25] R. K. Konoth, M. Oliverio, A. Tatar, D. Andriesse, H. Bos, C. Giuffrida,
and K. Razavi, “ZebRAM: Comprehensive and Compatible Software
Protection Against Rowhammer Attacks,” in USENIX OSDI, 2018.
[26] Z. Zhang, Y. Cheng, D. Liu, S. Nepal, Z. Wang, and Y. Yarom,
“PThammer: Cross-User-Kernel-Boundary Rowhammer through Implicit
Accesses,” in MICRO, 2020, pp. 28–41.
[27] J.-B. Lee, “Green Memory Solution,” 2014.
[28] Micron, “DDR4 SDRAM Datasheet,” Tech. Rep., 2016.
[29] JEDEC Solid State Technology Association, “JESD79-4B, DDR4
Specification,” 2017.
[30] ——, “JESD79-5, DDR5 Specification,” 2020.
[31] J. Misra and D. Gries, “Finding repeated elements,” Science of Computer
Programming, vol. 2, no. 2, pp. 143–152, 1982.
[32] Y. Kim, V. Seshadri, D. Lee, J. Liu, and O. Mutlu, “A case for exploiting
IEEE, 2012,
subarray-level parallelism (SALP) in DRAM,” in ISCA.
pp. 368–379.
[33] O. Mutlu, “The RowHammer Problem and Other Issues We May Face
as Memory Becomes Denser,” in DATE, 2017.
[34] G. LLC, “Half-Double: Next-Row-Over Assisted Rowhammer,” Google
LLC, Tech. Rep., May 2021.
[35] M. T. Aga, Z. B. Aweke, and T. Austin, “When Good Protections Go
Bad: Exploiting Anti-DoS Measures to Accelerate Rowhammer Attacks,”
in HOST, 2017.
[36] S. Bhattacharya and D. Mukhopadhyay, “Curious Case of Rowhammer:
Flipping Secret Exponent Bits Using Timing Analysis,” in CHES, 2016.
[37] ——, “Advanced Fault Attacks in Software: Exploiting the Rowhammer
Bug,” in Fault Tolerant Architectures for Cryptography and Hardware
Security, S. Patranabis and D. Mukhopadhyay, Eds. Singapore: Springer
Singapore, 2018, pp. 111–135.
[38] A. P. Fournaris, L. Pocero Fraile, and O. Koufopavlou, “Exploiting
Hardware Vulnerabilities to Attack Embedded System Devices: A Survey
of Potent Microarchitectural Attacks,” Electronicsweek, 2017.
[39] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard, “DRAMA:
Exploiting DRAM Addressing for Cross-CPU Attacks,” in USENIX
Security, 2016.
[40] D. Poddebniak, J. Somorovsky, S. Schinzel, M. Lochter, and P. R¨osler,
“Attacking Deterministic Signature Schemes Using Fault Attacks,” in
EuroS&P, 2018.
[41] R. Qiao and M. Seaborn, “A New Approach for Rowhammer Attacks,”
in HOST, 2016.
[42] Z. Zhang, Z. Zhan, D. Balasubramanian, X. Koutsoukos, and G. Karsai,
“Triggering Rowhammer Hardware Faults on ARM: A Revisit,” in ASHES,
2018.
[43] X.-C. Wu, T. Sherwood, F. T. Chong, and Y. Li, “Protecting Page Tables
from RowHammer Attacks Using Monotonic Pointers in DRAM True-
Cells,” in ASPLOS. New York, NY, USA: Association for Computing
Machinery, 2019, pp. 645–657.
[44] D. Gruss, M. Lipp, M. Schwarz, D. Genkin, J. Juffinger, S. O’Connell,
W. Schoechl, and Y. Yarom, “Another Flip in the Wall of Rowhammer
Defenses,” in IEEE S&P, 2018.
[45] S. M. Seyedzadeh, A. K. Jones, and R. Melhem, “Counter-Based Tree
Structure for Row Hammering Mitigation in DRAM,” IEEE Computer
Architecture Letters, vol. 16, no. 1, pp. 18–21, 2016.
[46] M. Kaczmarski, “Thoughts on Intel Xeon E5-2600 v2 Product Family
Performance Optimisation Component Selection Guidelines,” 2014.
[47] A. Kwong, D. Genkin, D. Gruss, and Y. Yarom, “RAMBleed: Reading
Bits in Memory Without Accessing Them,” in IEEE S&P, 2020.
[48] M. Son, H. Park, J. Ahn, and S. Yoo, “Making DRAM Stronger Against
Row Hammering,” in DAC, 2017, pp. 1–6.
[49] E. D. Demaine, A. L´opez-Ortiz, and J. I. Munro, “Frequency Estimation
Springer,
of Internet Packet Streams with Limited Space,” in ESA.
2002, pp. 348–360.
[50] S. Ayyapureddi and R. Sreeramaneni, “Apparatus and method including
analog accumulator for determining row access rate and target row
address used for refresh operation,” US Patent US10 964 378B2, Mar.,
2021.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
750
[51] Y.-C. Lai, P.-H. Wu, and J.-S. Hsu, “Target row refresh mechanism
capable of effectively determining target row address to effectively
mitigate row hammer errors without using counter circuit,” US Patent
US10 916 293B1, Feb., 2021.
[52] K. et al., “A 1.2v 38nm 2.4gb/s/pin 2gb ddr4 sdram with bank group
and ×4 half-page architecture,” 2012, pp. 40–41.
[53] T. Vogelsang, “Understanding the energy consumption of dynamic
random access memories,” in 2010 43rd Annual IEEE/ACM International
Symposium on Microarchitecture.
IEEE, 2010, pp. 363–374.
[54] N. Chatterjee, N. Muralimanohar, R. Balasubramonian, A. Davis, and
N. P. Jouppi, “Staged reads: Mitigating the impact of dram writes on
dram reads,” in IEEE International Symposium on High-Performance
Comp Architecture.
IEEE, 2012, pp. 1–12.
[55] C. et al., “A 16gb lpddr4x sdram with an nbti-tolerant circuit solution, an
swd pmos gidl reduction technique, an adaptive gear-down scheme and
a metastable-free dqs aligner in a 10nm class dram process,” in 2018
IEEE International Solid - State Circuits Conference - (ISSCC), 2018,
pp. 206–208.
[56] S. et al., “A 16gb 1.2v 3.2gb/s/pin ddr4 sdram with improved power
distribution and repair strategy,” in 2018 IEEE International Solid - State
Circuits Conference - (ISSCC), 2018, pp. 212–214.
[57] J. Bucek, K.-D. Lange, and J. v. Kistowski, “SPEC CPU2017: Next-
Generation Compute Benchmark,” in ICPE, 2018, pp. 41–42.
[58] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi, A. Basu,
J. Hestness, D. R. Hower, T. Krishna, S. Sardashti, R. Sen, K. Sewell,