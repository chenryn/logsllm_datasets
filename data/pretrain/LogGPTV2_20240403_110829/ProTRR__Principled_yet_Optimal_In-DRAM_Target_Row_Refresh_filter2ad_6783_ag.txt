### Trade-Offs and Analysis

When evaluating mitigation techniques, flexibility is a key factor. Specifically, we analyze whether the required storage size for a given mitigation is constant or scales with the number of connected devices. A constant storage requirement can be more wasteful, while a scalable solution (e.g., PROTRR) can adapt to the number of devices, making it more efficient. 

In the security category, we consider the guarantees provided by each mitigation. These guarantees can be deterministic (Det.) or probabilistic. Deterministic mitigations offer stronger protection against bit flips. Additionally, we examine whether a mitigation provides a formal proof (FP) of its design. We also highlight any known vulnerabilities (Vuln.), distinguishing between minor issues and fundamental flaws.

Support for different DRAM standards (e.g., DDR4, DDR5) is essential for practicality and widespread adoption. We further analyze whether a mitigation requires changes to the DRAM protocol. Finally, we consider the system integration effort, describing which components need to be modified. Minimizing this effort is critical, as indirectly affected manufacturers (e.g., CPU/OS vendors) may not be willing to implement complex solutions.

### Scalability

Only two mitigations, PROTRR and Graphene, are optimal in terms of counters and refresh requirements. PROTRR uniquely allows for a flexible trade-off between storage and additional refreshes. PROTRR, ProHIT, and Panopticon are the only mitigations that store counters in-DRAM, meaning their storage requirements scale with the number of connected devices. Panopticon's storage is flexible because the counter table uses DRAM memory. PARA is completely stateless and does not require any storage, while MRLoc has negligible storage requirements. All other hardware-based mitigations are implemented in the memory controller, requiring sufficient storage for the system's maximum supported DRAM size.

### Security

Few mitigations provide formal security guarantees against Rowhammer attacks. We denote mitigations without known vulnerabilities by “—”. Based on our security analysis (§ IX) and previous work [19], most hardware-based mitigations suffer from vulnerabilities. PARA’s security is probabilistic, and protecting modern devices can result in substantial overhead [21]. Software-based mitigations provide partial protection due to blindness to internal row remapping and newer Rowhammer variants like half-double [34]. Previous work has also revealed design-level flaws in ANVIL [8], [44], [66] and GuardION [42].

### Support

None of the existing hardware-based mitigations, except PROTRR, are DDR5-ready. PROTRR considers the new RFM extension introduced in the DDR5 standard [30]. Software-based mitigations are agnostic to the DDR technology. PROTRR, ProHIT, and Blockhammer are the only three mitigations that do not require changing the DRAM protocol. TWiCe and Graphene require adding new DRAM commands for refreshing rows adjacent to aggressors, and PARA requires communicating the mapping of internal rows to the CPU. All other mitigations assume the existence of a DRAM command for refreshing specific rows, which currently does not exist.

### Integration

Our comparison shows that all hardware-based solutions, except PRoHIT and PROTRR, require modifications to the CPU (e.g., memory controller). PRoHIT is vulnerable to specific patterns [19], and Panopticon [65] requires the CPU’s memory controller to handle the ALERT signal gracefully. Some of Panopticon's security aspects remain unclear. PROTRR is the only solution with deterministic and formal security guarantees. Software-based solutions are often integrated into the operating system’s kernel, but none have seen widespread adoption so far.

### Conclusion

We introduced PROTRR, the first in-DRAM Rowhammer mitigation with formal security guarantees. We proved that PROTRR is optimal in terms of storage and refresh overhead for any given DRAM technology. PROTRR is secure against FEINTING, the best possible attack we have formally constructed against a perfect in-DRAM TRR. We used insights from FEINTING to provide a flexible trade-off between needed storage and refreshes given a DRAM device with a certain degree of vulnerability to Rowhammer. PROTRR is compatible with DDR4 and leverages the recent RFM extension in DDR5 to support future devices that are more susceptible to Rowhammer. We evaluated PROTRR’s space, performance, and power overhead using an ASIC implementation and cycle-accurate simulation. In summary, PROTRR can protect current and future devices while requiring minimal storage and incurring negligible power and performance overhead.

### Acknowledgments

We thank our anonymous reviewers, Stefan Saroiu, and Hans Diesing for their valuable feedback. We also thank Kubo Takashi for sharing valuable insights into DRAM technology. This research was supported by the Swiss National Science Foundation under NCCR Automation, grant agreement 51NF40 180545, and in part by the Netherlands Organisation for Scientific Research through grant NWO 016.Veni.192.262.

### References

[References are listed as in the original text, with no changes made.]

---

This version of the text is more organized, clear, and professional, with improved flow and coherence.