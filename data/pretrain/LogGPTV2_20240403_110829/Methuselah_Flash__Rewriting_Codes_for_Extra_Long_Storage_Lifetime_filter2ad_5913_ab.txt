multi-level cells (m), where each cells has a number of levels 
(L). By increasing the level of one or more of the m different 
cells you can re-program the b bits to a different value. 
How the different sequences of b-bits are mapped to the 
 possible  values  of  the  cells  depends  on  the  specific 
implementation.  A  simple  example  of  a  WOM  code  is 
presented in Figure 4, where 3 2-level cells (ovals) are used to 
store  2  bits  (values  above  or  below  the  ovals).  This  WOM 
code enables two writes before erasing. 
ܮ௠
  Coset Coding for Endurance 
In this section we present the basic idea of coset codes and 
how they can be used in order to increase Flash lifetime. We 
also demonstrate how coset codes are generated, focusing on 
the  particular  coset  codes  that  are  the  basis  for  Methuselah 
Flash Codes. 
1)  Using Cosets 
Consider a single Flash page to be written, and assume the 
page-sized  dataword  to  be  stored  is  X.    In  typical  storage 
systems,  there  is  a  one-to-one  mapping  between  X  and  the 
codeword that is actually written, which we denote as Y.  Y 
could, for example, be X augmented with parity bits in an error 
correcting code (ECC). 
The key feature of coset coding is that it changes the model 
from  a  one-to-one  mapping  to  a  one-to-many  mapping.  
Consider  a  system  with  k-bit  datawords  and  n-bit  (n=k+c) 
codewords.   With coset coding, we divide the n-bit space into 
equal sized cosets.   We perform a one-to-one mapping of each 
k-bit  dataword  to  a  coset,  i.e.,  we  have 2k  cosets,  each  with 
E=2c codewords.  That is, for any given dataword X, there are 
E possible codewords {Y1…YE} that we can write.   There is a 
one-to-one  mapping  from  a  dataword  to  coset  but  a  one-to-
many mapping from a dataword to possible codewords. 
Figure 3. Waterfall Coding for ideal MLCs. 
Figure 4. A WOM code example. Writing two bits twice in three 2-level 
cells. 
182
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:41 UTC from IEEE Xplore.  Restrictions apply. 
Benefit: We choose the codeword that optimizes an objective, 
and  our  high-level  objective  in  this  work  is  postponing 
wearout.    In  Section  V.A,  we  precisely  state  the  concrete 
objectives that enable us to postpone wearout. 
Cost: The cost of coset coding is its overhead for representing 
a codeword.  Each codeword has n=k+c bits, and the extra c 
bits  are  the  overhead  for  the  code.    A  code’s  cost  is  often 
referred to as its rate, which is defined as the dataword size 
divided by codeword size. 
2)  Generating Cosets 
The key to coset coding is coset generation, which is the 
process of dividing the codeword space into 2k cosets, where 
each  coset  has E=2c codewords.  Coset  generation 
is 
performed using a code, and there are many codes that can be 
used for this process.  These codes include block codes and 
convolutional codes. Different codes offer different trade-offs 
between overhead (i.e., how many extra bits are required to 
represent a codeword compared to a dataword) and flexibility 
(i.e., how many options are in each coset). The drawback with 
block  codes  is  the  difficulty  in  matching  bit  patterns  across 
block  boundaries.  However,  convolutional  codes  have  no 
block boundaries except at the beginning and at the end and 
therefore convolutional codes are more suitable for our work. 
In this paper, we use convolutional codes of rate 1/2, 1/3, 1/4, 
and  1/5  to  create  coset  codes  of  rate  1/2,  2/3,  3/4,  and  4/5, 
respectively. 
There  are  various  characteristics 
that  define  a 
convolutional  code,  such  as  rate  and  number  of  states.  As 
mentioned above, we consider various rates in this work. We 
also  considered  multiple  rate-1/2  convolutional  codes  with 
different number of states.  Increasing the number of states in 
the state machine provides a bigger set of codewords to choose 
from;  therefore  allowing  greater  benefits  to  be  achieved. 
These  greater  benefits  come  at  the  cost  of  negligibly  lower 
rates.   
All of the information required to construct the codes we 
use  can  be  found  in  Table  12.1  (c)  of  Lin  and  Costello’s 
textbook [18].  
IV.  VIRTUALIZING FLASH CELLS 
Our  first  goal  is  to  bridge  the  gap  between  the  interface 
provided by the FTL software in Flash memories and the ideal 
multi-level cell interface assumed by prior work in coding.  
The  ideal  interface—the  interface  assumed  by  most 
coding theorists and the interface we seek to provide with our 
virtual cells—provides the illusion of a cell with levels 0 to L-
1,  and  each  level  can  be  increased  from  level i  to  level j  as 
long  as i<j.    If  a  cell  reaches  level L-1,  it  can  no  longer  be 
programed until the cell is erased (as part of the block being 
erased). 
To  achieve  this  ideal  interface,  we  build  on  the  existing 
interface that provides pages with bits. We provide a general 
solution that can be used to generate virtual cells (v-cells) with 
any number of levels, independent of the type of physical cells 
that  are  used  in  the  Flash  chip  (SLC,  MLC,  or  TLC).  
Regardless  of  the  technology,  our  approach  to  all  v-cell 
designs remains the same: interpret the values of multiple bits 
of the same page as the levels of a single v-cell.  
Our  approach  overcomes  the  limitations  imposed  by  the 
interface provided by Flash chips, which is pages of bits rather 
than cells with levels.  Although there are other possibilities, 
we  choose  to  implement  the  virtual  cell  interface  by 
augmenting  the  FTL  software,  which  serves  as  the  bridge 
between the device driver software on the host computer and 
the Flash chips.  As illustrated in Figure 5, we extend the FTL 
with the ability to perform coding on top of v-cells; extensions 
are shown as shaded software modules within the FTL.  The 
software module that implements v-cells provides the v-cell 
interface 
independently  written  coding 
modules.  None of these changes to the FTL are visible to the 
host computer. 
that  supports 
We  now  present  two  examples of  virtual  MLCs  that  we 
have developed. 
  Example 1: A 4-Level Virtual Cell  
In  order  to  create  each  4-level  v-cell,  we  group  three 
consecutive  bits  of  a  page.  The  level  of  the  v-cell  is 
determined by counting how many of the three bits are at a 
value of 1. Thus a v-cell in level L0 has its three bits at value 
000.  A v-cell in level L1 has its three bits at value 001, 010, 
or 100, a v-cell in level L2 has its bits at 011, 101, or 110, and 
a v-cell in level L3 has its bits at 111.  We illustrate this v-cell 
and  the  mappings  from  levels  to  bits  in  Figure  6.    Because 
some  levels  have  multiple  bit  representations,  we  can 
transition between them in different ways. 
We  can  now  use  this  v-cell  as  an  ideal  MLC.  We  can 
choose to store one or more bits in it. We can also implement 
Figure 5. Implementing the virtual cell interface by extending the FTL software.  
183
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:41 UTC from IEEE Xplore.  Restrictions apply. 
Figure 6. Using the v-cell technique to create an ideal 4-level cell. 
waterfall codes, WOM codes, coset codes or any other code 
on top of it. 
  Example 2: A 8-Level Virtual Cell  
To  create  an  8-level  v-cell  we  need  to  group  the  bits  in 
sequences  of  7  bits.  Notice  that  any  L-level  v-cell  can  be 
generated  by  grouping  L-1  bits  together.  This  grouping 
provides us with a “bigger” cell that is shown in Figure 7. 
For simplicity we do not show all the transitions and all 
the  representations  for  each  level.  However  one  can  reason 
about them by using the same procedure as we did for creating 
the ideal 4-level cell.  
V.  METHUSELAH FLASH 
Methuselah Flash Codes (MFCs) build upon the theory of 
coset  coding.    Our  key  innovation  in  this  work—beyond 
developing  the  v-cells  that  facilitate  coding—is  developing 
heuristics for choosing codewords in cosets so as to provide 
the best Flash endurance.  A MFC is a coset code that uses our 
heuristics. In our evaluation later in this paper, we experiment 
with  different  coset  codes,  but  we  use  the  same  codeword 
selection algorithms.  Without loss of generality, we assume 
that all MFCs are implemented on top of ideal 4-level v-cells. 
  Codeword Selection Objectives 
With  coset  coding,  a  dataword  maps  to  a  coset  of 
codewords, and we can select any codeword from that coset 
to write.  We now use three examples, shown in Figure 8, to 
illustrate our three objectives in this selection process. Figure 
8(a) shows the initial value of a page with 12 4-level v-cells 
and we use this same initial value in all three examples. The 
numbers indicate the level of each v-cell.   
(1)  Avoid  Codewords  that  Increment  Saturated  Cells. 
Example  1,  in  Figure  8(b),  shows  two  possible  options  for 
which cells to increment, assuming that we have used coset 
coding to provide two possible codewords, Yi and Yj, for each 
dataword  X.  The  top  option,  Yi,  is  unwriteable,  because  it 
requires an increment of a cell (shaded in the figure) that is 
already at level L3.  The bottom option, Yj, does not increment 
that  cell  and  thus  choosing  it  postpones  the  need  to  erase.  
Intuitively, our goal is to avoid incrementing cells at L3 and, 
184
Figure 7. Using the v-cell technique to create an ideal 8-level cell. 
in turn, to avoid incrementing cells to L3 if other cells can be 
incremented instead.   
(2) Minimize the Number of Cells Incremented. Example 
2, in Figure 8(c), shows another two options for writing.  In 
this example, Yj is preferable to Yi because it increments fewer 
cells and thus, all other things being equal, postpones erasing 
for longer.   
(3) Balance Increments Across Cells. Example 3, in Figure 
8(d),  shows  two  more  options  for  writing,  where  both 
increment  the  same  number  of  cells.    Despite  this  seeming 
Figure 8. Codeword Selection Examples 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:41 UTC from IEEE Xplore.  Restrictions apply. 
equivalence, Yj is preferable to Yi because it balances the way 
that  cells  are  incremented  better;  the  top  option  increments 
cells at L2 (shaded), whereas the bottom option preferentially 
increments cells at L0 or L1.  The bottom option is thus better 
at postponing erasing. 
MFCs integrate these three objectives into a unified metric 
function  that  determines  a  cost  for  each  possible  codeword 
that we could write. This metric function is used by the Viterbi 
algorithm  to  search  a  coset  and  decide  which  codeword 
achieves the best (minimum) cost, i.e., performs better in all 
of these three objectives. 
The  overall  goal  is  to  minimize  the  cost  of  writing  to  a 
page, which is the sum of the costs of writing to each cell in 
that page. 
ܿ݋ݏݐ௣௔௚௘ =෍ܿ݋ݏݐ௖௘௟௟೔
௡
௜ୀଵ
The cost to write a given cell in a page is a function of the 
current level of the cell (l), the level to which it would need to 
be increased (l’), and the maximum number of levels in the 
cell (L).   
ܿ݋ݏݐ௖௘௟௟೔ =݂(݈,݈ᇱ,ܮ) 
avoid codewords that increment saturated cells by setting f=∞ 
The  function  f  considers  our  three  objectives.  First,  we 
for  saturated  cells  (i.e.,  l=L-1).    Second,  we  minimize  the 
number of cells incremented by setting f=0 for cells that do 
not  need  to  be  programmed  (i.e.,  l=l’).    Third,  we  balance 
increments by setting f=l’ and thus favoring cell writes with 
lower post-write levels. 
݂(݈,݈ᇱ,ܮ)=൝ 0,
∞,
݈′,
݈ =݈′
݈ ≠݈ᇱܣܰܦ ݈ =ܮ−1
݈ ≠݈ᇱܣܰܦ ݈ <ܮ−1 
The  Viterbi  algorithm  efficiently  decides  which  of  the 
candidate  codewords  achieves  the  minimum  cost.  Note  that 
the  current  level  of  each  v-cell,  as  well  as  the  maximum 
number  of  levels  in  the  v-cells,  are  independent  of  the 
codewords. However each codeword leads to different post-
write cell levels and thus a different cost. 
  Integration with Error Correction 
Flash  chips  are  expected  to  tolerate  errors  in  cells.  
Transient  and  permanent  errors  can  affect  cells,  and  current 
Flash standards require the ability to correct at least one error 
per  1024  cells.    For  example,  current  SSDs  use  error 
correcting codes (ECC) for this purpose. 
Although error correction is mostly complementary to our 
goals and not the focus of this paper, it is important to note 
that the coset coding technique we use [6] has already been 
shown to be compatible with error correction.  The key idea is 
to  ensure  that  cosets  consist  solely  of  valid  ECC-protected 
codewords.  We still have a mapping from a dataword X to a 
coset of codewords {Y1…YE}, and we can now ensure that all 
elements Yi are valid ECC-protected codewords.   
To maintain the same number of elements per coset while 
providing error correction, we must increase the size of each 
codeword and thus decrease the rate of the code. Recall that 
each  coset  contains  E=2c  codewords.  Without  error 
correction, all 2c c-bit vectors could belong to cosets, but to 
provide error correction we must discard those c-bit vectors 
185
that are not valid ECC-protected codewords.  Thus we need a 
larger value of c if we are not going to use all of the vectors in 
the space of c-bit vectors.  In this way, adding error correction 
increases the storage cost of coset coding. 
There are two considerations when choosing the specific 