however, CirC performs slightly worse, likely due to missed
inlining opportunities. CirC uses 11.9x fewer constraints for
small arrays (ptrs-8) because CirC optimizes its memory
representation for memory size (as in xJsnark [10]), whereas
Pequin uses a single memory representation that is asymptot-
ically cheap but concretely costly for small arrays.
2257
Pequin performs better on one benchmark, u32log2-
array, which computes integer logarithms by decomposing
the input into an (integer-typed) array of bits, then scanning
that array. CirC does not yet optimize integer-typed arrays
containing only boolean values, so it treats the intermediate
array as if it contains integers rather than bits, yielding much
worse performance than Pequin. (This is a relatively simple
optimization; adding it
is future work.) When we instead
evaluate a version of this function written in a more standard
way (u32log2; Fig. 17), CirC outperforms Pequin slightly.
For consistency with prior work, Appendix A compares
CirC and Pequin on the benchmark set from [11]. On these
benchmarks, CirC produces between 1x and 10x fewer con-
straints than Pequin. This is because small array accesses are
the bottleneck in many of these benchmarks.
ZoKrates-to-R1CS. We evaluate CirC’s ZoKrates-to-R1CS
pipeline relative to the ZoKrates compiler, version 0.6.1. (We
use this version because CirC’s ZoKrates front-end is fully
compatible with it (§4.1).) This comparison tests how CirC
performs when the source language includes R1CS-friendly
features like ﬁeld elements and control-ﬂow limitations.
We benchmark all major modules in the ZoKrates stan-
dard library. The modules (and benchmarks) are: utili-
ties (mux3, field-to-bools, u32s-to-bools), hashes
(mimc7, pedersen, sha2round), elliptic curve operations
(ec-scalar-mult, ec-add), and signature veriﬁcation
(eddsa). In Appendix A, we evaluate on the entire standard
library. As above, we report the ratio of constraint counts.
Figure 11 shows the results: CirC slightly outperforms the
reference compiler. On straight-line computations with sim-
ple operations (mimc7, fields-to-bools, u32s-to-
bools), the compilers perform similarly. When there are
opportunities for common sub-expression elimination (ec-
scalar-mult, ec-add), or when CirC can optimize con-
ditional expressions (pedersen, mux3signed), CirC per-
forms better. In one case, sha2round, CirC performs very
slightly worse, likely due to missed inlining opportunities. Our
evaluation on the whole ZoKrates standard library (App. A)
corroborates these results.
Circom-To-R1CS. Circom [15] is effectively a hardware de-
scription language for R1CS. We support it in CirC by writing
a front-end that directly targets R1CS. Thus, compiling Circom
to R1CS is a test of CirC’s R1CS-speciﬁc optimizations (§3).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
We evaluate CirC against the Circom compiler (v0.0.30) on the
test suite for Circom’s standard library. The compilers perform
identically on all nearly all benchmarks. This is because
Circom designs explicitly describe R1CS constraints, and the
compilers apply the same R1CS optimizations. Appendix A
contains the details of the evaluation.
5.2. Performance on a ZK proof application
We evaluate CirC’s ZoKrates compilation pipeline on a key
primitive for zero-knowledge proof applications: Merkle path
validation. A valid Merkle path establishes that an element x is
in a committed set S. By implementing Merkle path validation
inside a zero-knowledge proof, one can prove that a secret x
is in some publicly committed S. This is used, for example, in
the Zcash cryptocurrency [1, 2]: a private transaction contains
a proof that the coin being spent is in the global set of unspent
coins. Since the proof hides which coin is being spent, an
analyst cannot trace the ﬂow of funds through the system.
We start by implementing a simple 6-line ZoKrates func-
tion that veriﬁes a Merkle proof using an elliptic curve–based
hash function from the ZoKrates standard library. Figure 12
compares cost in constraints versus depth of Merkle tree.
Compared to the ZoKrates reference compiler, CirC produces
≈21% fewer constraints for this naive implementation.
Zcash’s deployed Sapling implementation [116], however,
has less than half as many constraints as CirC produces in
the naive approach. The reason for this discrepancy is that the
Sapling constraint system uses algorithmic optimizations that
are not reﬂected in ZoKrates’s standard library.9 CirC makes
it easy to implement Sapling’s optimized algorithm: we do so
in just 87 lines of ZoKrates code (and without using the stan-
dard library), whereas Sapling requires well over 1500 lines
of Rust10 to generate constraints using Bellman [59], which
is effectively a macro assembler for R1CS. CirC generates
essentially the same number of constraints as in Sapling’s
implementation, and ≈20% less than the ZoKrates reference
compiler on our optimized ZoKrates code (Fig. 12).
Our optimized ZoKrates implementation is available in the
extended version of this paper [118], Appendix D.
5.3. Correctness
To evaluate the correctness of CirC’s output, we run it
on a subset of the tests from the Software Veriﬁcation Com-
petition (sv-comp). This annual competition includes many
benchmarks that stress the speed and accuracy of software
veriﬁers. By extending CirC’s C front-end to support sv-comp
conventions for existential inputs, assertions, and assumptions
(≈40 LOC), we can run CirC on sv-comp benchmarks.
We run CirC on two benchmark categories: signedint-
egeroverflow-regression, which tests the precision
with which overﬂow is modeled, and bitvector-loops,
which tests the precision with which branches, stack arrays,
9. Sapling’s elliptic curve–based hash function uses optimized point repre-
sentations and incomplete arithmetic formulas. This optimization is thus un-
sound, but the Zcash developers show that this unsoundness is computationally
infeasible to exploit assuming the hardness of discrete log [2, §A.3.3.9].
10. This count
includes the Sapling pedersen_hash implementa-
tion [117] and transitive dependencies within the Sapling codebase; it does
not include external libraries, unrelated functionality, or tests.
2258
Figure 12. Constraint cost for Merkle path validation versus tree depth (§5.2).
“ZoKrates” denotes the reference compiler; “Sapling” denotes the Zcash
constraint generation library [116]. For ZoKrates and CirC, “(std)” is a naive
implementation using the ZoKrates standard library, whereas “(opt)” incorpo-
rates algorithmic optimizations from Sapling. CirC consistently outperforms
the ZoKrates reference compiler, and matches Sapling’s hand-tuned constraint
count on the Sapling algorithm.
and basic pointers-to-stack-arrays are modeled. We choose
these categories since they exercise most of CirC’s support
for C semantics (§3). CirC is correct in both categories.
We do not compare CirC’s performance (e.g., the SMT
solver’s execution time) on sv-comp benchmarks relative to
other systems. While CirC supports simple IR-level optimiza-
tion passes, it does not currently include machinery for sophis-
ticated static analysis (e.g., SMACK’s static analysis for its
memory representation [25]). Moreover, though CirC handles
the “compilation to SMT” piece of a veriﬁer, it is often not
comparable to the whole veriﬁer or symbolic execution engine
(e.g., CirC does not currently support a front-end forking
phase like KLEE [37]). We discuss combining CirC with
existing veriﬁers and high-performance veriﬁcation strategies
in Section 8.
6. Common performance characteristics
This section shows how SMT solvers and proof systems
have similar performance characteristics, which means that
optimizations for one pipeline (e.g., C-to-R1CS) can improve
performance in another pipeline (e.g., C-to-SMT). This fact is
not obvious at ﬁrst glance. Proof system performance metrics
(i.e., prover runtime) are almost entirely determined by the
number of rank-1 constraints in the input circuit, while SMT
solver performance metrics (i.e., solver runtime) are more difﬁ-
cult to understand—and are sometimes surprising [119, 120].
Nevertheless, CirC’s optimization passes reveal performance
similarities between both targets. We ﬁnd that CirC’s SMT-
inspired constant-folding helps proof systems,
too, (§6.1),
and that CirC’s oblivious array elimination pass (§6.2) and
granular array modeling (§6.3) help both solver and proof
system back-ends.
6.1. Constant folding
SMT term rewriting—replacing one SMT term with an
equivalent one to assist
in SMT solving—is an old tech-
nique [121] used in all major solvers [122–127]. Constant
folding refers to a simple but important class of rewrites such
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
03060900510152025DepthConstraints (k)SystemZoKrates (std)CirC (std)ZoKrates (opt)CirC (opt)SaplingFigure 13. Solver and proof system performance when operating on the
predicate ∃x.H(x)[0..8] = 0 (§6.1). Constant folding improves performance
for both back-ends.
Figure 14. Solver and proof system performance are both improved by
oblivious array elimination (§6.2).
as replacing 4+5 with 9 or replacing the bit-vector term x= 0 && i >= 1u;
}
return n_bits - 1;
}
Figure 17. This function computes (cid:98)log2 x(cid:99). The SMT solver determines
how many iterations to unroll (§7.1).
pile
m
b e gin c o
C program
with loop
continue
continueﬁnish
CirC-IR
(1 unroll)
...
CirC-IR
(32 unrolls)
CirC-IR
(33 unrolls)
SMT
SAT
lower
solve
SMT
SAT
SMT
UNSAT
Figure 16. Effect of array granularity on solver and proof system performance
(§6.3). Increasing x-axis corresponds to increasingly coarse-grained array
representations, which increase costs for both the SMT and proof back-ends.
lower
R1CS
CirC-IR
(ﬁnal)
7. Crossover applications and techniques
In contrast to traditional compilers, CirC’s targets serve
substantially different purposes. This opens the door to appli-
cations that combine targets, and to techniques that use one
target to help another. In this section, we discuss four such
cross-overs: SMT-driven optimization of R1CS size, SMT-
based analysis of ZKlog code, automatic detection and zero-
knowledge proof of bugs, and automatic optimization and
zero-knowledge proof of high value. With CirC, these cross-
overs are easy to implement: each requires between 16 and
≈60 new lines of code.
7.1. Optimizing R1CS using SMT
SMT-guided optimization is an old idea, and SMT solvers
have been used to optimize everything from code [130] to
smart contracts [131] to TensorFlow graphs [132]. CirC makes
it easy to apply SMT-guided optimizations to R1CS, too.
the bound is respected (§2). If N is too small,
To illustrate this, we use one critical compilation task—