LD_PRELOAD 条件苛刻不考虑),也就是使用-f参数的时候-l参数并未生效.
    frida -U -f com.example.mennomorsink.webviewtest2 --no-pause -l sharecode/objectionUnpinning.js
改由python 来完成spawn注入
    #!/usr/bin/python  
    # -*- coding: utf-8 -*-    import frida, sys, re, sys, os
    from subprocess import Popen, PIPE, STDOUT
    import codecs, time
    if (len(sys.argv) > 1):
        APP_NAME = str(sys.argv[1])
    else:
        APP_NAME = "sg.vantagepoint.uncrackable3"
    def sbyte2ubyte(byte):
        return (byte % 256)
    def print_result(message):
        print ("[!] Received: [%s]" %(message))
    def on_message(message, data):
        if 'payload' in message:
            data = message['payload']
            if type(data) is str:
                print_result(data)
            elif type(data) is list:
                a = data[0]
                if type(a) is int:
                    hexstr = "".join([("%02X" % (sbyte2ubyte(a))) for a in data])
                    print_result(hexstr)
                    print_result(hexstr.decode('hex'))
                else:
                    print_result(data)
                    print_result(hexstr.decode('hex'))
            else:
                print_result(data)
        else:
            if message['type'] == 'error':
                print (message['stack'])
            else:
                print_result(message)
    def kill_process():
        cmd = "adb shell pm clear {} 1> /dev/null".format(APP_NAME)
        os.system(cmd)
    kill_process()
    try:
        with codecs.open("hooks.js", 'r', encoding='utf8') as f:
            jscode  = f.read()
            device  = frida.get_usb_device(timeout=5)
            pid     = device.spawn([APP_NAME])
            session = device.attach(pid)
            script  = session.create_script(jscode)
            device.resume(APP_NAME)
            script.on('message', on_message)
            print ("[*] Intercepting on {} (pid:{})...".format(APP_NAME,pid))
            script.load()
            sys.stdin.read()
    except KeyboardInterrupt:
            print ("[!] Killing app...")
            kill_process()
            time.sleep(1)
            kill_process()
成功Unpinning .(app启动后需要前后台切换一次才会成功hook到init,猜测是因为pinning初始化是在Activity
onCreate时完成的.frida注入onCreate有点问题.)
    'use strict';
    setImmediate(function() {
      send("hooking started");
      Java.perform(function() {
      var X509TrustManager = Java.use('javax.net.ssl.X509TrustManager');
      var SSLContext = Java.use('javax.net.ssl.SSLContext');
      var TrustManager = Java.registerClass({
          name: 'com.sensepost.test.TrustManager',
          implements: [X509TrustManager],
          methods: {
              checkClientTrusted: function (chain, authType) {
              },
              checkServerTrusted: function (chain, authType) {
              },
              getAcceptedIssuers: function () {
                  return [];
              }
          }
      });
      // Prepare the TrustManagers array to pass to SSLContext.init()
      var TrustManagers = [TrustManager.$new()];
      send("Custom, Empty TrustManager ready");
      // Override the init method, specifying our new TrustManager
      SSLContext.init.implementation = function (keyManager, trustManager, secureRandom) {
          send("Overriding SSLContext.init() with the custom TrustManager");
          this.init.call(this, keyManager, TrustManagers, secureRandom);
      };
      });
    });
日志如下
    » python application.py com.example.mennomorsink.webviewtest2
    [*] Intercepting on com.example.mennomorsink.webviewtest2 (pid:1629)...
    [!] Received: [hooking started]
    [!] Received: [Custom, Empty TrustManager ready]
    [!] Received: [Overriding SSLContext.init() with the custom TrustManager]
## 0x04 Native hook
没有合适公开的例子,就拿  帖子中提到的无法 hook ndk
中 getInt 函数问题来做演示.
ndk代码
    #define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO, "hooktest", __VA_ARGS__)
    int getInt(int i)
    {
        return i+99;
    }
    extern "C"   JNIEXPORT jstring   JNICALL Java_mi_ndk4frida_MainActivity_stringFromJNI(
            JNIEnv *env,
            jobject /* this */) {
        LOGI("[+] %d\n", getInt(2));
        return env->NewStringUTF("Hello from C++");
    }
关键在于对指针和函数入口的理解,例子用了偏移寻址和符号寻址两种方式做对比,偏移和导出符号均可通过IDA静态分析取得,最后效果是一样的.
hook 代码
    var fctToHookPtr = Module.findBaseAddress("libnative-lib.so").add(0x5A8);
    console.log("fctToHookPtr is at " + fctToHookPtr.or(1));
    var getIntAddr = Module.findExportByName("libnative-lib.so" , "_Z6getInti");
    console.log("getIntAddr is at " + getIntAddr);
    var errorAddr = Module.findExportByName("libnative-lib.so","getInt");
    var absoluteAddr;
    exports = Module.enumerateExportsSync("libnative-lib.so");
    for(i=0; i " + fungetInt(99) );
    } catch (e) {
        console.log("invoke getInt failed >>> " + e.message);
    } finally {
    }
    Interceptor.attach(getIntAddr, {
        onEnter: function(args) {
            //args and retval are nativePointer...
            console.log("arg = " + args[0].toInt32());
            // //Error: access violation accessing 0x2
            // console.log(hexdump(Memory.readInt(args[0]), {
            //                           offset: 0,
            //                           length: 32,
            //                           header: true,
            //                           ansi: true
            //                         }));
            args[0] = ptr("0x100");
        },
        onLeave:function(retval){
            console.log("ret = " + retval.toInt32());
            // retval.replace(ptr("0x1"));
            retval.replace(222);
        }
    });
## 0x05 tips
**获取app context**
    var currentApplication = Dalvik.use("android.app.ActivityThread").currentApplication(); 
        var context = currentApplication.getApplicationContext();
**创建对象示例**
    obj.$new();
**hook 构造方法**
    obj.$init.implementation = function (){
    }
**实现java接口**
java接口使用参考,其中X509TrustManager是interface类型.TrustManager为其实现类.manager为实例.
我就成功过这一个接口,其他接口比如Runnable , HostNamerVerifier都没成功.
    'use strict';
    var TrustManager;
    var manager;
    Java.perform(function () {
      var X509TrustManager = Java.use('javax.net.ssl.X509TrustManager');
      TrustManager = Java.registerClass({
        name: 'com.example.TrustManager',
        implements: [X509TrustManager],
        methods: {
          checkClientTrusted: function (chain, authType) {
            console.log('checkClientTrusted');
          },
          checkServerTrusted: function (chain, authType) {
            console.log('checkServerTrusted');
          },
          getAcceptedIssuers: function () {
            console.log('getAcceptedIssuers');
            return [];
          }
        }
      });
      manager = TrustManager.$new();
    });
**str int指针操作,有点乱**  
utf8 string写  
`Memory.allocUtf8String(str)`  
`var stringVar = Memory.allocUtf8String("string");`  
utf8 string读  
`Memory.readUtf8String(address[, size = -1])`
int写  
`var intVar = ptr("0x100");`  
`var intVar = ptr("256");`  
int读  
`toInt32()`: cast this NativePointer to a signed 32-bit integer
二进制读取  
`hexdump(target[, options])`: generate a hexdump from the provided
_ArrayBuffer_ or _NativePointer_ `target`, optionally with `options` for
customizing the output.
## 0x06 推荐工具和阅读
frida api  
中文翻译  
工具推荐  
appmon :   
droidSSLUnpinning :   
objection : 
## 0x07 reference
* * *