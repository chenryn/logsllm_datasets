他们给出的方案却并不优雅。
RDBMS。许多开发人员试图在它们选择的语言中解决问题而不使用他们的模型API，通常
能提供非常有用的工具，如模式（schema）的升降级。重要的是要了解它并不能完全替代
都依赖抽象层。
地利用数据库，必须对 SQL和 RDBMS 有深入了解以便能直接写自己的查询而无需每件事
自己处理。但是，你迟早会发现有些想做的数据库操作是这个抽象层不允许的。为了更有效
表映射到Python的类都无法得到最优的结果。
和面向对象程序对数据有不同的表示方式，彼此之间不能很好地映射：不管怎么做，将SQL
http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch）。根本在于，关系型数据库
ORM有许多常见的困难，统称为对象关系阻抗失配（object-relational impedance mismatch，
二者结合就可以对数据进行存储，同时回答关于数据的问题。然而，在面向对象程序中使用
当开发人员选择使用关系型数据库时，它们通常会选择某种ORM库。
许多应用程序都需要存储某种形式的数据，而开发人员通常会选择使用关系型数据库。并且
第12章
本章将不再过多以Python 中心，请多多包含。这里只讨论关系型数据库，但是这里涉及
注意
（Object-Relational Mapping，对象关系映射）是一个不太讨好的题目，但是早晚都要处理。
但这不是说要完全避免用ORM。ORM库可以帮助快速建立应用模型的原型，有些甚至
RDBMS是关于将数据以普通表单的形式存储的，而SQL是关于如何处理关系代数的。
RDBMS（Relational DataBase Management System，关系型数据库管理系统）和 ORM
RDBMS 和 ORM
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 179
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
可能）在 SQL中实现的约束。
数据库看作是单纯的存储并且在他们的控制器代码而不是他们的模型中重复他们已经（或者
题。这是一种非常简单的模式，而且和ORM完全没有冲突。这个问题在于开发人员将SQL
的字符串列。
172
将 SQL 后端看作是模型 API是有效利用它的好方法。通过它本身的过程性语言编写简
这段代码以更有效的方式获得了同样的效果而且没有任何竞态条件（race condition）问
·没有考虑到在调用 select_by_id之后程序代码 insert 之前,可能有其他人插入
·执行了两次 SQL 查询，SQL 查询的执行可能会时间很长而且需要与 SQL 服务器往
·它实现了一个已经在SQL模式中定义了的约束，所以有点儿代码重复。
我们希望收到消息时避免重复记录，所以一个典型的开发人员会这么写：
设想一个用来记录消息的 SQL 表。它有一个名为 id 的列作为主键和一个用来存放消息
except UniqueViolationError:
try:
下面是一种更好的方式，但需要同RDBMS服务器合作而不是将其看作是单纯的存储。
这在大多数情况下肯定可行，但它有些主要的端。
else:
if message_table.select by_id(message.id):
CREATE TABLE message (
content text
id serial PRIMARY KEY,
raise DuplicateMessage(message)
一个重复消息的可能性，这会引发程序抛出异常。
返的通信，造成额外的延迟。
message_table.insert (message)
第12章
#Duplicate
message_table.insert(message)
# Insert the message
#Insert the message
raise DuplicateMessage (message) 
RDBMS和ORM
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 180
熊猫爱中国www.xiongmaoi.com
能浆
①如果犹豫不决的话，选PostgreSQL（htp://www.postgresql.org/）。
比，内置的库与框架集成得更好。
以通过第三方库完成，如 alembic（https://pypi.python.org/pypi/alembic）。
sqlalchemy.org/）。它支持大量的不同后端并且对大多数通用操作都提供了抽象。模式升级可
myapp.storag。
myapp.storage。这种方法应该只在高度抽象的层面输出数据操作的函数和方法。ORM
如果选择使用一个框架，那么使用内置的库是明智的选择，通常（显然）与外部ORM库相
充分利用它们的潜力有多么重要。
关于其优缺点的讨论。本节的重点在于帮你理解对 SQL和 RDBMS 充分了解在应用程序中
地方对其进行优化，越过大多数ORM引用。
法不仅可以在需要时轻松将ORM库切换到另一个，而且可以在发现查询的使用效率不高的
程序的 RDBMS 时要更加仔细?。
戳操作。如果代码写成了与RDBMS 无关的就更是如此。基于这一点，在选择适合你的应用
功能。
基本的功能（或者你容忍），而且将不能在不破坏抽象层的情况下使用任何RDBMS 的高级
能提供对所有RDBMS功能的抽象，所以你将不得不削减你的代码，只支持那些RDBMS 最
能来吹捧，但它实际上却是个陷阱，等待诱捕那些毫无防备的开发人员。没有任何ORM库
单的函数调用即可操作存储在 RDBMS 中的数据。
Python 中最常使用的（和有争议的事实标准）ORM库是SQLAlchemy（http://www.
有些框架，
最后，本节的目标不是要在是否使用ORM的辩论中做出选择，互联网上已经有大量的
建立这种隔离的一种简单办法是只在应用的某一个模块中使用ORM，如
减轻ORM库的这个问题的可行办法就是像2.3节描述的那样对它们进行隔离。这种方
另外需要强调的一点是，ORM支持多种数据库后端。许多ORM库都将其作为一项功
：如Django（https://www.djangoproject.com/），提供了它们自己的ORM库。
本电子书仅限学习交流使用，请勿用于商业用途
第12章RDBMS和ORM
173
---
## Page 181
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
的消息，这个函数由用户提供，由PostgreSQL 执行，如示例12.2所示。
（http://www.postgresql.org/docs/9.2/static/sql-notify.html）功能。这些功能可以监听来自函数
PostgreSQL 的 LISTEN（http:/www.postgresql.org/docs/9.2/static/sql-listen.html） 和 NOTIFY
示例12.1创建 message 表
类型的content 组成。创建这个表的代码非常简单，如示例 12.1所示。
息的访问。每个消息由一个整数类型的channel、一个字符串类型的 source、一个字符串
高级特性构造一个HTTP事件流系统。
12.1用Flask 和 PostgreSQL 流化数据
时更容易地切换到另外一种存储技术上。
174
据模型而不是组成它的数据模型，这能提供更好的可测试性和更好的隔离，也可以在需要
使用的模型（model）都将被ORM直接使用。这是应该避免的。应该写包含ORM库的数
中直接实现ORM，但却没有足够的抽象，任何在视图（view）和控制器（controller）中
大多数框架依赖的MVC（Model View Controller）架构很容易被滥用。它们在它们的模型
警告
这个小应用的目的是将消息存储在一个SQL表中并通过HTTPRESTAPI提供对这些消
CREATE OR REPLACE FUNCTION notify_on_insert() RETURNS trigger AS ss
另外还需要做的是序列化这些消息，以便客户端能够实时对它们进行处理。这需要用到
CREATE TABLE message (
前面一节讨论了掌握数据存储系统有多么重要。这里将展示如何用 PostgreSQL 的一个
BEGIN
PERFORM pg_notify('channel_' II NEW.channel,
content TEXT NOT NULL
channel INTEGER NOT NULL,
id SERIAL PRIMARY KEY,
source TEXT NOT NULL,
第12章RDBMS和ORM
CAST(row_to_json (NEW) AS TEXT));
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 182
熊猫爱中国www.xiongmaoi.com
熊猫
执行。
爱中
件上出发这个函数，如示例12.3所示。
个行。没错，PostgreSQL 原生地就知道如何将行转换为 JSON。
channel列在行内的的值来动态定义信道。在这个例子中，净荷是以JSON 格式表示的整
代表一个信道的字符串，第二个参数是携带实际净荷（palyload）的字符串。这里根据
嵌入 Python 解释器支持pl/python 语言的。
需要注意的是，这个函数也可以用其他语言编写，如 Python 本身，因为 PostgreSQL 是通过
received from server process with PID 26393.
"("id":1,"channel":1,"source":"jd","content";"hello world")"
可以通过 psql 中的 LISTEN 操作检查它是否工作正常：
搞定。这个函数已经插入并且在 message 表每一次 INSERT 操作成功后都会被
CREATE TRIGGER notify_on_message_insert AFTER INSERT ON message
我们希望对 message 表的每一次 INSERT 操作都发送通知消息，所以需要在这样的事
Asynchronous notification "channel_1" with payload
INSERTO1
mydatabase->VALUEs(l,'jd','helloworld'）;
mydatabase=> LISTEN channel_1;
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
psql(9.3rc1)
Tbsds
FOR EACH ROW EXECUTE PROCEDURE notify_on_insert();
函数会执行一个对 pg_notify 的调用。这是实际发送通知的函数。第一个参数是一个
这会创建一个用 pl/pgsql 编写的触发器函数，pl/pgsql 语言只有 PostgreSQL 可以理解。
Type "help" for help.
$$ LANGUAGE plpgsql;
END;
RETURN NULL;
本电子书仅限学习交流使用，请勿用于商业用途
12.1
用 Flask 和PostgreSQL 流化数据
175
---
## Page 183
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
这个程序并向 message 表中插入一行，则会得到如下输出：
不需要任何ORM库提供的其他功能。
访问底层数据库连接去执行代码也是可能的，但是在这个例子中没必要那么做，因为这里并
如 SQLAlchemy，但是它们都无法提供对 PostgreSQLLISTEN/NOTIFY 功能的访问。通过
示例12.4在Python中接收通知
做的就是构建 Python 应用对这个事件进行流化（stream），如示例12.4 所示。
176
这个程序会在channel_1上进行监听。一旦收到通知则将其打印到屏幕上。如果运行
上面的代码利用库 psycopg2连接 PostgreSQL。也可以使用一个提供了抽象层的库,
一旦行被插入，通知就被发送，并且可以通过 PostgreSQL 客户端进行接收。现在需要
("id":10,"channel":1,"source":"jd","content":"hello world")
Got NOTIFY:28797 channel_1
while True:
curs.execute("LISTEN channel_1;")
curs =conn.cursor()
conn.set_isolation_level(
conn = psycopg2.connect (database='mydatabase', user='myuser',
import select
import psycopg2.extensions
import psycopg2
第12章RDBMS和ORM
select.select([conn],[], [])
psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
while conn.notifies:
conn.poll()
print("Got NoTIFy:", notify.pid, notify.channel, notify.payload)
notify = conn.notifies.pop()
本电子书仅限学习交流使用，请勿用于商业用途
 password='idkfa', host='localhost')
---
## Page 184
熊猫爱中国www.xiongmaoi.com
熊猫爱
①另一种选择是使用HTTP/1.1中定义的Transfer-Encoding:chunked。
示例12.5Flask流化应用程序
WD-eventsource-20090423/）消息协议，如示例12.5所示。
用程序。这里将使用由HTML5中定义的Server-SentEvents（http://www.w3.org/TR/2009/
中国
这个应用程序非常简单并且只是为这个例子支持了流化。我们使用Flask 将请求路由到
if
def get _messages(channel):
@app.route("/message/",
def stream_messages(channel):
app.run()
import select
import psycopg2.extensions
import
import flask
return flask.Response (stream_messages (channel),
while True:
curs.execute("LISTEN channel_%d;"% int(channel))
curs = conn.cursor()
conn.set_isolation_level(
while conn.notifies:
conn.poll()
select.select([conn], [], [])
psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
psycopg2
yield "data:"+ notify.payload + "\n\n"
notify =, conn,notifies.pop()
main
本电子书仅限学习交流使用，请勿用于商业用途
mimetype='text/event-stream')
password='mydatabase', host='localhost')
methods=['GET'])
12.1用 Flask 和 PostgreSQL 流化数据
177
---
## Page 185
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
收据并且连接保持开放状态。
送JSON数据给HTTP客户端没有任何问题，所以无需转换编码。
PostgreSQL 的 JSON 编码函数，所以从 PostgreSQL 收到的就是JSON 格式的数据，因为发
信道 Id 作为参数，监听这个信道，并生成其有效载荷。记住，我们在触发器函数中用的是
函数并在每次生成器生成东西时发送结果。
stream 的格式进行响应，发回一个生成器函数而非一个字符串。Flask 接下来将调用这个
为简单起见，这个示例应用程序被写在了一个单独的文件中。在一本书中描述一个横跨多
注意
178
放到一个自己的 Python 模块中。
个模块的例子有点儿困难。如果这是一个真正的应用程序，那么最好是将存储处理的实现
 $ python listen+http.py
现在可以运行这个服务器了：
生成器 stream_messages 重用了之前写的用来监听 PostgreSQL 通知的代码。它接收
但一旦插入一些行到message 表中时：
在另一个终端中，可以进行连接并在事件进入时对数据进行抽取。在连接时，不会接收
* Running on http://127.0.0.1:5000/
Accept:*/*
User-Agent: curl/7.32.0
Adding handle:recv:0
About to connect() to 127.0.0.1 port 5000 (#0)
 curl -v http://127.0.0.1:5000/message/1