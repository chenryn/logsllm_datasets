### FragDroid: An Android Testing Framework for Sensitive Operations Detection

FragDroid is an Android testing framework designed to detect sensitive operations. For this purpose, we selected common sensitive operation functions as defined by XPrivacy [20]. The sensitive APIs of interest in this experiment are related to various types of information and operations, including account, identification, Internet, IPC, location, media, network, phone, and storage.

#### Sensitive API Invocations
In Table II, we present the discovered invocation relationships between sensitive APIs and Activities and/or Fragments across 15 tested applications. For each sensitive API listed, there are three possible scenarios:
- **Invoked by Activity**: (cid:2)
- **Invoked by Fragment**: (cid:3)
- **Invoked by Both Activity and Fragment**: (cid:8)

The results indicate that FragDroid detected 46 sensitive APIs. Additionally, API invocations associated with Fragments account for 49% of the total invocations. Traditional approaches based on Activity alone would miss at least 9.6% of API calls invoked in Fragments.

### Limitations and Future Work
1. **Sample Size**: The small sample size in our experiments limits the generalizability of the analysis results.
2. **Coverage**: Some specific development methods and techniques are not accounted for in FragDroid, leading to a small portion of Activities and Fragments being missed during testing.
3. **Focus on Fragments**: FragDroid is primarily focused on Fragments and does not consider other factors affecting its performance, such as input generation in test cases.

Future work will involve integrating more advanced app development and testing techniques, as well as improving input generation methods to enhance the effectiveness of FragDroid.

### Related Work
Recent testing tools have employed diverse approaches to address various challenges in Android app testing. Due to cross-platform and cross-version incompatibilities, manual app analysis is costly and time-consuming. The rapid growth in the number of apps has also led to increased security threats and malicious attacks. Consequently, there has been significant research into static and dynamic analysis of Android apps.

- **SmartDroid [24]**: This tool uses both static and dynamic analysis to discover and test UI trigger conditions. During static analysis, it creates an Activity switch path leading to sensitive API calls. In dynamic analysis, SmartDroid traverses the view tree of an Activity and triggers event listeners, ensuring that only relevant Activities are activated.
- **AndroidRipper [25]**: An automated test technique that explores the GUI of Android apps in a structured manner. It has been evaluated on open-source Android apps and has shown the ability to detect severe and previously unknown faults.
- **Dynodroid [15]**: A system that interacts with UI widgets dynamically. It generates intelligent UI interactions and system events by observing the UI layout, composing and selecting interactions, and executing them. Dynodroid requires access to the app's source code.
- **A3E [26]**: A system for UI exploration with two approaches: Targeted Exploration and Depth-First Exploration. While effective, A3E is not suitable for large-scale testing due to its long test times.
- **AspectDroid [27]**: An app-level system that investigates potential unwanted Activities using static bytecode instrumentation and dynamic instrumentation capabilities. It provides data flow and sensitive API usage information.
- **TrimDroid [13]**: A framework for generating test cases for GUI testing, achieving high coverage with fewer test cases. Unlike FragDroid, TrimDroid does not consider Fragments.

Most existing testing tools focus on the Activity layer, but our analysis reveals that Fragments can also contain sensitive operations and security threats. FragDroid addresses these issues by providing a comprehensive model that includes both Activities and Fragments, making it a more comprehensive and innovative tool.

### Conclusion
In this paper, we introduce FragDroid, the first Android automated UI testing framework that supports both Activity and Fragment analysis. Using an Activity & Fragment Transition Model, FragDroid generates test cases through automated UI interaction to detect security information such as sensitive APIs and potential vulnerabilities. Our analysis of top-ranked apps shows a high proportion of apps using Fragments. In our experiment, FragDroid was applied to 15 selected apps, achieving an average coverage rate of 71.94% for Activities and 66% for Fragments. We detected 269 invocations of sensitive APIs, with nearly half associated with Fragments.

### Acknowledgments
We thank our shepherd Ilir Gashi for his guidance and anonymous reviewers for their insightful comments. This work is partially supported by the National Natural Science Foundation of China (91546203), the Key Science Technology Project of Shandong Province (2015GGX101046), the Shandong Provincial Natural Science Foundation (ZR2014FM020), Major Scientific and Technological Innovation Projects of Shandong Province, China (No.2017CXGC0704), and the Fundamental Research Fund of Shandong Academy of Sciences (NO.2018:12-16).

### References
[References listed here as per the original text]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.