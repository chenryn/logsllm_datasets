app. As an Android testing framework, FragDroid offers a
way to detect sensitive operations. We select some common
sensitive operation functions deﬁned by XPrivacy [20] for
testing. The sensitive APIs concerned in this experiment are
mainly related to the information or operations like account,
identiﬁcation, Internet, IPC, location, media, network, phone,
store. In Table II, we could ﬁnd the discovered invocation rela-
tions between sensitive APIs and Activities and/or Fragments
on 15 tested applications. For an individual tested app, each
sensitive API listed has three possible situations, as shown
below, where the symbols represent that a sensitive operation
or permission is invoked by Activity and/or Fragment.
• Invoked by Activity: (cid:2)
• Invoked by Fragment: (cid:3)
• Invoked by Both Activity and Fragment: (cid:8)
The results show 46 sensitive APIs were found by Frag-
Droid. Also, the API invocations associated with Fragments
account for 49% of the total
invocations. The traditional
approaches based on Activity have to miss at least 9.6% of
API calls invoked in Fragments.
VIII. LIMITATION AND FUTURE WORK
At ﬁrst, the small sample size in the experiment for imple-
menting FragDroid limits the evaluation of analysis results.
Secondly, there are some speciﬁc development methods and
techniques which are not counted in FragDroid. Hence, a small
portion of Activities and Fragments are missed out during the
test. Moreover, FragDroid proposed in this paper is an Android
application testing framework focusing on Fragments, without
regard to other factors affecting its performance, such as input
generation in test cases.
In the future, to optimize the effectiveness of FragDroid,
more techniques related to app developing and testing will
be considered, and better input generation methods will be
integrated into it.
IX. RELATED WORK
Recent works on testing tools have taken numerous, diverse
approaches to achieve different results. Due to that Android
apps often suffer from cross-platform and cross-version incom-
patibilities, it is costly for the manual app analysis. Moreover,
the rapid growth of the number of apps makes those encoun-
tered different security threats and malicious attacks. So, there
has been a great deal of research in static analysis and test of
Android apps. We can ﬁnd many tools do test input generation
and extract the model of the app automatically. There are also
some systems leveraging automated UI interfaces to trigger the
functions [21], [22], [23], especially getting useful information
or analyze data of apps by targeting speciﬁc Activities.
SmartDroid [24], applying both static and dynamic analysis,
is a tool to discover and test UI trigger conditions using a
hybrid approach. During static analysis, it creates an Activity
AndroidRipper [25] is an automated test technique which
uses their Graphical User Interface (GUI) for Android apps.
AndroidRipper is based on a user-interface driven ripper that
aims at automatically exploring the GUI of apps in a structured
manner. It is evaluated on open-source Android apps. The
results show that those test cases, which are based on GUI,
are able to detect severe and previously unknown faults in the
underlying code, and its structured exploration outperforms a
random approach.
Dynodroid [15] proposes a system to interact with UI wid-
gets dynamically. The authors implemented a mechanism that
attempts to generate a sequence of intelligent UI interactions
and system events through observing the UI layout, composing
and selecting a set of interactions, and executing those actions.
Dynodroid leverages the Hierarchy Viewer, a tool packaged
with the Android platform to infer a UI model during exe-
cution, to determine an Activity layout. We note that if the
user intends to enable this capability, it is essential to make
changes to the SDK source code. Finally, but most importantly,
Dynodroid requires the tester has access to the source code of
an app, as the use of the Android instrumentation framework
is necessary. Contrarily, CuriousDroid can test any APK ﬁle
without source code on account of the fact that it instruments
the app bytecode dynamically.
switch path that leads to the sensitive API calls. In dynamic
analysis, SmartDroid traverses the view tree of an Activity and
triggers the event listeners while waiting for each UI element
to arise. Very similar to our work, SmartDroid determines
whether a new Activity is on the switch path when the event
listener invokes the start of it. If not, it will block the call
to that Activity and continue to traverse the current Activities
view tree until the correct element is activated. It will exclude
the calls to dynamically loaded code or native libraries because
of only relying on static analysis to reveal sensitive behaviors.
In addition, SmartDroid requires modiﬁcation to the SDK as
well as the modiﬁed emulator.
A3E [26] proposes a system for UI exploration of Android
apps that has two approaches. One is Targeted Exploration
which generates a CFG during static analysis and then uses
the CFG to develop a strategy for exploration by targeting
speciﬁc Activities. Another is depth-ﬁrst Exploration which
attempts to mimic user interactions to drive execution in a
more systematic, albeit slower, way. We can see that A3E is
not proper for large-scale test on account of the fact that its
long test time required for each app. A3E was tested on only
25 apps, and during each test, it costs an average runtime of
87 minutes for targeted exploration method and 104 minutes
per app averagely for the depth-ﬁrst exploration.
AspectDroid [27] is an app-level system designed to in-
vestigate Android apps for possible unwanted Activities. As-
pectDroid is comprised of application instrumentation, auto-
mated test, and containment systems. By using static bytecode
instrumentation, AspectDroid weaves monitoring code into
an existing app and provides data ﬂow and sensitive API
usage as well as dynamic instrumentation capabilities. The
newly repackaged app is then executed either manually or via
407
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:55 UTC from IEEE Xplore.  Restrictions apply. 
an automated test module. Finally, the ﬂexible containment
provided by AspectDroid adds a layer of protection so that
malicious Activities can be prevented from affecting other
devices. The accuracy score of AspectDroid, when tested on
105 DroidBench corpus, shows it can detect tagged data with
95.29%.
TrimDroid [13] is a framework to generate test cases for
GUI test of Android apps, with the ability to achieve a
comparable coverage as it possible under exhaustive GUI test
using fewer test cases. The work of TrimDriod uses prime
path coverage to generate the event sequences and generate
the inputs for GUI widgets in a combinatorial fashion rather
than using randomly generated input. Similar to FragDroid,
TrimDroid extracts the interface models and Activity transi-
tion models of apps. Note that TrimDroid does not involve
Fragments, but FragDroid considers them.
Those testing tools mainly research the Activity layer. How-
ever, based on a signiﬁcant amount of analysis we have done,
there are some sensitive operations and embedded WebView
as well as security threats brought by library reference in
Fragments. Compared with those tools, FragDroid completes
a lot of work on Fragments and provides a model, including
not only Activities but also Fragments and all the transition
relationship, to be utilized to understand the architecture of the
entire app better and do some security research. The test result
shows FragDroid can be considered as a more comprehensive
and brand-new tool.
X. CONCLUSION
In this paper, we propose FrogDroid,
the ﬁrst Android
automated UI testing framework supporting both Activity and
Fragment analysis. In this framework, an Activity & Fragment
Transition Model is introduced, with the use of which, test
cases can be generated through automated UI interaction. Frag-
Droid runs test cases to visit Activities and Fragments in the
tested app for detecting security information, such as sensitive
APIs and potential vulnerabilities. The analysis of top-rank
apps reveals a high proportion of apps applying Fragments.
During the experiment, FragDroid is applied to 15 selected
apps involving Fragments. On average, the coverage rate of
FragDroid on Activity is 71.94% while that on Fragment
reaches 66%. There are 269 invocations of sensitive APIs
detected from 15 tested apps, and nearly half of them have
an association with Fragment.
XI. ACKNOWLEDGE
We thank our shepherd Ilir Gashi for his guidance on
improving this paper and anonymous reviewers for their
insightful comments. This work is partially supported by
National Natural Science Foundation of China (91546203),
the Key Science Technology Project of Shandong Province
(2015GGX101046), the Shandong Provincial Natural Science
Foundation (ZR2014FM020), Major Scientiﬁc and Techno-
logical Innovation Projects of Shandong Province, China
(No.2017CXGC0704) and Fundamental Research Fund of
Shandong Academy of Sciences (NO.2018:12-16).
REFERENCES
[1] “UI/Application Exerciser Monkey,” https://developer.android.com/
studio/test/monkey.html.
[2] L. Gomez, I. Neamtiu, T. Azim, and T. Millstein, “Reran: Timing-and
touch-sensitive record and replay for android,” in 2013 35th Interna-
tional Conference on Software Engineering (ICSE).
IEEE, 2013, pp.
72–81.
[3] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos, “Paranoid
android: versatile protection for smartphones,” in Proceedings of the 26th
Annual Computer Security Applications Conference, 2010, pp. 347–356.
https://developer.android.com/training/testing/espresso/
[4] “Espresso,”
index.html.
[5] “Appium,” http://appium.io/.
[6] “Robotium,” http://www.methodsandtools.com/tools/robotium.php.
[7] “Introduction
https://developer.android.com/guide/
activities,”
to
components/activities/intro-activities.html.
[8] D. Hackborn, “The android 3.0 fragments api,” https://android-
developers.googleblog.com/2011/02/android-30-fragments-api.html,
2011.
[9] “Fragment,” https://developer.android.com/guide/components/fragments.
html.
[10] “Fragmenttransaction,” https://developer.android.com/reference/android/
app/FragmentTransaction.html.
[11] “Apktool,” https://ibotpeaches.github.io/Apktool/.
[12] “Jd-core-java,” https://github.com/nviennot/jd-core-java.
[13] N. Mirzaei, J. Garcia, H. Bagheri, A. Sadeghi, and S. Malek, “Reducing
combinatorics in gui testing of android applications,” in Proceedings of
the 38th International Conference on Software Engineering, ser. ICSE
’16, 2016, pp. 559–570.
[14] J. Chen, X. Cui, Z. Zhao, J. Liang, and S. Guo, “Toward discovering
and exploiting private server-side web apis,” in Web Services (ICWS),
2016 IEEE International Conference on.
IEEE, 2016, pp. 420–427.
[15] A. Machiry, R. Tahiliani, and M. Naik, “Dynodroid: An input generation
system for android apps,” in Proceedings of the 2013 9th Joint Meeting
on Foundations of Software Engineering, ser. ESEC/FSE 2013, 2013,
pp. 224–234.
[16] “Android
debug
bridge,”
https://developer.android.com/studio/
command-line/adb.html.
[17] “Apache Ant,” https://ant.apache.org/.
[18] “Navigation
drawer,”
implementing-navigation/nav-drawer.html.
https://developer.android.com/training/
[19] “App bar,” https://developer.android.com/training/appbar/index.html.
[20] “Xprivacy,” https://github.com/M66B/XPrivacy/blob/master/res/values/
functions.xml.
[21] W. Yang, M. R. Prasad, and T. Xie, “A grey-box approach for auto-
mated GUI-model generation of mobile applications,” in Fundamental
Approaches to Software Engineering. Springer, 2013, pp. 250–265.
[22] D. Amalﬁtano, A. R. Fasolino, P. Tramontana, S. De Carmine, and
A. M. Memon, “Using GUI ripping for automated testing of Android
applications,” in Proceedings of
the 27th IEEE/ACM International
Conference on Automated Software Engineering, 2012, pp. 258–261.
[23] S. Hao, B. Liu, S. Nath, W. G. Halfond, and R. Govindan, “PUMA:
Programmable UI-automation for large-scale dynamic analysis of mobile
apps,” in Proceedings of the 12th annual international conference on
Mobile systems, applications, and services, 2014, pp. 204–217.
[24] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and W. Zou, “Smart-
droid: An automatic system for revealing ui-based trigger conditions in
android applications,” in Proceedings of the Second ACM Workshop on
Security and Privacy in Smartphones and Mobile Devices, ser. SPSM
’12, 2012, pp. 93–104.
[25] D. Amalﬁtano, A. R. Fasolino, P. Tramontana, S. De Carmine, and
A. M. Memon, “Using gui ripping for automated testing of android
applications,” in Proceedings of
the 27th IEEE/ACM International
Conference on Automated Software Engineering, ser. ASE 2012, 2012,
pp. 258–261.
[26] T. Azim and I. Neamtiu, “Targeted and depth-ﬁrst exploration for
systematic testing of android apps,” SIGPLAN Not., vol. 48, no. 10,
pp. 641–660, Oct. 2013.
[27] A. Ali-Gombe, I. Ahmed, G. G. Richard, III, and V. Roussev, “As-
pectdroid: Android app analysis system,” in Proceedings of the Sixth
ACM Conference on Data and Application Security and Privacy, ser.
CODASPY ’16, 2016, pp. 145–147.
408
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:55 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: Sensitive Operations Detection
Sensitive APIs
Package Name
Usage
o
r
g
.
r
b
c
.
o
d
b
c
o
m
.
a
d
o
b
e
.
r
e
a
d
e
r
c
o
m
.
a
i
r
c
r
u
n
c
h
.
s
h
o
p
a
l
e
r
t
s
Browser
Identiﬁcation
Internet
IPC
Location
Media
Messages
Network
Phone
Shell
Storage
System
View
browser/Downloads
identiﬁcation//proc
identiﬁcation/getString
identiﬁcation/SERIAL
internet/connect
internet/Connectivity.getActiveNetworkInfo
internet/Connectivity.getNetworkInfo
internet/inet
internet/InetAddress.getAllByName
internet/InetAddress.getByAddress
internet/InetAddress.getByName
internet/IpPreﬁx.getAddress
internet/LinkProperties.getLinkAddresses
internet/NetworkInfo.getDetailedState
internet/NetworkInfo.isConnected
internet/NetworkInfo.isConnectedOrConnecting
internet/NetworkInterface.getNetworkInterfaces
internet/WiFi.getConnectionInfo
ipc/Binder
location/getAllProviders
location/getProviders
location/isProviderEnabled
location/requestLocationUpdates
media/Camera.setPreviewTexture
media/Camera.startPreview
messages/MmsProvider
network/NetworkInterface.getInetAddresses
network/WiFi.getConﬁguredNetworks
network/WiFi.getConnectionInfo
phone/Conﬁguration.MCC
phone/Conﬁguration.MNC
phone/getDeviceId
phone/getNetworkCountryIso
phone/getNetworkOperatorName
shell/loadLibrary
storage/getExternalStorageState
storage/open
storage/sdcard
system/getInstalledApplications
system/getRunningAppProcesses
system/queryIntentActivities
system/queryIntentServices
view/getUserAgentString
view/initUserAgentString
view/loadUrl
view/setUserAgentString
a
u
.
.
c
o
m
d
i
g
i
t
a
l
s
t
a
m
p
e