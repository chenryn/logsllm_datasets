[34] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang, Baishakhi Ray,
and Suman Jana. Neuzz: Efficient fuzzing with neural program smoothing.
In Proceedings of the 40th IEEE Symposium on Security and Privacy
(Oakland), San Francisco, CA, May 2019.
[35] Theofilos Petsios, Adrian Tang, Salvatore Stolfo, Angelos D Keromytis,
and Suman Jana. Nezha: Efficient domain-independent differential testing.
In Proceedings of the 38th IEEE Symposium on Security and Privacy
(Oakland), San Jose, CA, May 2017.
[36] Changwoo Min, Sanidhya Kashyap, Byoungyoung Lee, Chengyu Song,
and Taesoo Kim. Cross-checking semantic correctness: The case of
finding file system bugs. In Proceedings of the 25th ACM Symposium
on Operating Systems Principles (SOSP), Monterey, CA, October 2015.
[37] Risc-v torture test. https://github.com/ucb-bar/riscv-torture.
[38] Memory controller ip core. https://opencores.org/projects/mem ctrl.
[39] Open source hardware association. https://www.oshwa.org/.
[40] Boom: Berkeley out-of-order machine. https://github.com/riscv-boom/
[41] Rocket chip generator. https://github.com/chipsalliance/rocket-chip.
[42] Risc-v isa manual (privileged). https://riscv.org/specifications/privileged-
riscv-boom.
isa/.
[43] Openrisc isa manual. https://openrisc.io/or1k.html.
[44] Pyverilog: Python-based hardware design processing toolkit for verilog
hdl. https://github.com/PyHDI/Pyverilog.
[45] Chisel 3: A modern hardware design language. https://github.com/
freechipsproject/chisel3.
[46] Cocotb, a coroutine based cosimulation library for writing vhdl and
verilog testbenches in python. https://github.com/cocotb/cocotb.
[47] Verilator open-source systemverilog simulator and lint system. https:
//github.com/verilator/verilator.
[48] Icarus verilog. http://iverilog.icarus.com/.
[49] https://bar.eecs.berkeley.edu/projects/firesim.html.
[50] Aws ec2 fpga development kit. https://github.com/aws/aws-fpga.
[51] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks.
Evaluating fuzz testing. In Proceedings of the 25th ACM Conference
on Computer and Communications Security (CCS), Toronto, Canada,
October 2018.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1301
[52] Andr´as Vargha and Harold D Delaney. A critique and improvement
of the cl common language effect size statistics of mcgraw and wong.
Journal of Educational and Behavioral Statistics, 25(2):101–132, 2000.
[53] Patrick E McKnight and Julius Najab. Mann-whitney u test. The Corsini
encyclopedia of psychology, pages 1–1, 2010.
[54] Risc-v isa manual
(unprivileged).
https://riscv.org/specifications/
unprivileged-isa/.
[55] Michael Kantrowitz and Lisa M Noack. I’m done simulating; now what?
verification coverage analysis and correctness checking of the decchip
21164 alpha microprocessor. In Proceedings of the 33rd annual Design
Automation Conference (DAC), Las Vegas, NV, June 1996.
[56] Shai Fine and Avi Ziv. Coverage directed test generation for functional
verification using bayesian networks. In Proceedings of the 40th annual
Design Automation Conference (DAC), Anaheim, CA, June 2003.
[57] Giovanni Squillero. Microgpan evolutionary assembly program generator.
Genetic Programming and Evolvable Machines, 6:247–263, 09 2005.
[58] Sv/uvm based open-source instruction generator for risc-v processor
verification. https://github.com/google/riscv-dv.
[59] Sandsifter: the x86 processor fuzzer. https://github.com/xoreaxeaxeax/
sandsifter.
[60] Xixing Li, Zehui Wu, Qiang Wei, and Haolan Wu. Uisfuzz: An efficient
IEEE
fuzzing method for cpu undocumented instruction searching.
Access, 7:149224–149236, 2019.
[61] Serdar Tasiran and Kurt Keutzer. Coverage metrics for functional
IEEE Design & Test of Computers,
validation of hardware designs.
2001.
[62] Vineeth V Acharya, Sharad Bagri, and Michael S Hsiao. Branch guided
functional test generation at the rtl. In 2015 20th IEEE European Test
Symposium (ETS), Cluj-Napoca, Romania, May 2015.
[63] Rui Zhang, Calvin Deutschbein, Peng Huang, and Cynthia Sturton.
End-to-end automated exploit generation for validating the security
of processor designs. In Proceedings of the 51st Annual IEEE/ACM
International Symposium on Microarchitecture (MICRO), Fukuoka, Japan,
October 2018.
[64] Yuting Chen, Ting Su, and Zhendong Su. Deep differential testing of jvm
implementations. In Proceedings of the 41st International Conference
on Software Engineering (ICSE), Minneapolis, MN, May 2007.
[65] Yuting Chen, Ting Su, Chengnian Sun, Zhendong Su, and Jianjun
Zhao. Coverage-directed differential testing of jvm implementations. In
Proceedings of the 2016 ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), Santa Barbara, CA, June
2016.
[66] Prem C Consul and Gaurav C Jain. A generalization of the poisson
distribution. Technometrics, 15(4):791–799, 1973.
XI. APPENDIX
This appendix section provides supplementary information
regarding this paper.
Listing of Motivation Example.
Figure 24 shows the
appended Verilog code to the original code (shown in Figure 22)
for the instrumentation. Only stateS and stateF registers are
used because they are wired into the mux control signal. The
registers are hashed into regstate through random offset ({ })
and xor operation (ˆ). Then, the logic for covmap and covsum
is instrumented.
Calculation on Collision Probability. Since DIFUZZRTL
hashes control register value into the regstate, collision could
happen where different control register values are hashed into
the same regstate value. To this end, DIFUZZRTL allocates
more space for each variables (i.e. regstate, covmap and
covsum) as the number of control registers increases. However,
the collision is unavoidable if the total bit width of control
registers is larger than the maximum size of regstate.
In order to understand the collision probability, we measured
the register-coverage instrumentation details. While the maxi-
mum size of variables is a configurable parameter, we set the
input clock,
(state_flash == ‘BUSY_F);
output
output
sdram_ready,
flash_ready,
state_flash; // READY, BUSY
reg[7:0] data_sdram;
reg[7:0] data_flash;
assign out_valid = (state_sdram == ‘BUSY_S) ||
input
input [3:0]
input
input [7:0]
output
output [7:0] out_data
out_valid,
sdram_valid,
sdram_data_i,
flash_valid,
flash_data_i,
assign out_data = (state_sdram == ‘BUSY_S) ?
data_sdram : data_flash;
assign sdram_ready = (state_sdram != ‘BUSY_S);
assign flash_ready = (state_flash != ‘BUSY_F);
reg[1:0] state_sdram; // READY, RECEIVING, BUSY
reg
1 module mem_ctrl(
2
3
4
5
6
7
8
9
10
11
12
13
14 );
15
16
17
18
19
20
21
22 /********** combinational **********/
23
24
25
26
27
28
29
30
31
32 /********** sequential **********/
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58 endmodule
Fig. 22: Verilog code example of a simple memory controller
which connects sdram and flash memory to the outer world.
Bug is triggered when both stateS and stateF at BUSY.
state_sdram <= ‘BUSY_S;
data_sdram <= {sdram_data_i, 4’b0000} | data_sdram;
state_sdram <= ‘PENDING_S;
data_sdram <= {4’b0000, sdram_data_i};
state_flash <= ‘BUSY_F;
data_flash <= flash_data_i;
end else if (state_sdram == ‘PENDING_S) begin
end else if (state_sdram == ‘BUSY_S) begin
end else if (state_flash == ‘BUSY_F) begin
if (state_sdram == ‘READY_S) begin
if (state_flash == ‘READY_F) begin
always @(posedge clock) begin
state_sdram <= ‘PENDING_S;
end
end
end
end
end
end
state_flash <= ‘READY_F;
if (sdram_valid) begin
if (sdram_valid) begin
if (flash_valid) begin
maximum size of regstate to be 20-bits for this evaluation,
which covers up to 220 bits (i.e. 1 Mb). In the case of Boom core,
five out of 151 modules were instrumented using the maximum
size variables, and LSU was the module which had the most
control registers. The total bit width of control registers in LSU
was 156 bits. When all the control registers are hashed into 20
bits regstate, the collision probability becomes 1− (1− p)kC2
where p is a probability of two different states being hashed
to the same regstate value and k is the number of simulated
cycles. Thus, the total collision probability converges to 1
as the simulated cycle increases, reaching 99.9 % at 5,384
simulated cycles. Since the number of collisions follows a
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1302
state_flash <= ‘FLASH_BUSY;
if (state_sdram != ‘SDRAM_BUSY) begin
1 /********** patch **********/
2
3 end else if (state_flash == ‘FLASH_BUSY) begin
4
5
6
7 end
Fig. 23: Bug fix for Figure 22. stateF waits until stateS is
not busy
end
covmap[8:0];
reg_state <= { state_sdram, 1’h0 } ˆ { 2’h0, state_flash };
covmap[reg_state] <= 1;
1 /********** instrumented **********/
2
3 reg[2:0] reg_state;
4 reg[2:0] covsum;
5 reg
6
7 always @(posedge clock) begin
8
9
10
11
12
13
14 end
Fig. 24: Instrumented result of Figure 22; Only stateS and
stateF registers are instrumented.
if (!covmap[reg_state]) begin
covsum <= covsum + 1;
end
result in critical security damages. DIFUZZRTL found several
hardware flaws that can be potentially destructive, thus assigned
with CVE reference numbers.
Among those, CVE-2020-13455, CVE-2020-13453, CVE-
2020-13251, and CVE-2020-29561 directly harm the memory
consistency of the processors, thus can result in potential race
bugs. It is widely known that the race bugs are harmful to
the security of the entire system and the attackers can abuse
such bugs to compromise the system. More critically, it would
take long time to identify that the root causes of such bugs
are hardware flaws since the race bugs are already too subtle
and non-deterministic to be detected.
CVE-2020-13454 and CVE-2020-13453 can be abused by
the attackers to bypass ROP defense schemes. Conventional
defense tools against ROP attacks would not assume those
instructions as a potential gadgets because the instructions
should result in an exception in correct semantics. However,
attackers with the knowledge of these hardware flaws could
rely on the fact that the victim instructions do not trap, avoiding
the expected exceptions and thus completing the ROP attacks.
Poisson distribution, we conclude that average 6 collisions
occur in one iteration [66].
While this collision probability suggests that the collision
is unavoidable given the large state space of RTL modules,
we believe a loss would be minimal. This is because an input
which discovers a new state further reaches multiple new states
in one iteration, and DIFUZZRTL will save the input as a new
seed if at least one new non-colliding state is discovered. Also,
a carefully designed hashing algorithm for coverage-guided
fuzzing would be able to reduce the collision probability as
proposed by collAFL [26].
Fundamental Differences between Register-coverage and
Mux-coverage.
To shortly summarize, register-coverage
of DIFUZZRTL has three fundamental differences from mux-
coverage of RFuzz [14], making DIFUZZRTL’s simulation
more efficient. First, instrumenting control registers is more ef-
ficient than instrumenting all the muxes. Second, DIFUZZRTL
summarizes the coverage in each module and wires only the
sum of coverage until the top level module, but RFuzz needs to
propagate all the mux control signals upto the top level module.
Third, DIFUZZRTL employs simple hashing for the coverage
computation while RFuzz requires a saturating counter for each
mux.
As a result, assuming the number of modules in a design
is M and the number of elements (i.e., control registers
for DIFUZZRTL, muxes for RFuzz) in a module is N,
DIFUZZRTL requires O(M ·N +M ) of computation resources
for hashing control registers and connecting the sum of
coverage to the top level module. On the other hand, RFuzz
requires O(M 2 · N + M · N ) resources for connecting all the
mux control signals to the top level module and attaching a
saturating monitor for each mux.
Potential Security Impacts of Hardware Flaws. Abnormal
behaviors of the processors failing to follow the ISA could
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1303