to extract original watermarks from the modiﬁed apps. Many
static watermarking mechanisms are highly susceptible to distortive
attacks since they leverage the code or data syntax to encode the
watermark, which is very sensitive to semantic-preserving transfor-
mations. Dynamic watermarking, however, never depends on any
syntax structure in application code, but instead encodes watermark
object into the execution state of the application. Furthermore, the
semantic of runtime graph data structures is usually hard to analyze
without executing it in real environment, because of the inherent
difﬁculty in analyzing point-to relationships [14, 45]. These factors
make it very hard for any static transformation to change these
graph structures without changing the application semantics. For
these reasons, most semantic-preserving transformations cannot
affect the execution states of apps, and theoretically dynamic graph
watermarking is resistant to distortive attacks. To further conﬁrm
AppInk’s robustness in this aspect, we evaluate AppInk against a
series of semantic-preserving transformations available in two open
source tools 1, and report our results later in this section.
Subtractive attacks: This type of attacks tries to remove wa-
termarking relevant code segments in an application, and usually
needs manual analysis to identify the location of these code seg-
ments in the ﬁrst place. The dynamic graph based watermarking
mechanism adopted in AppInk makes it relatively easier to defend
against subtractive attacks. First, since the arbitrators are in general
trustworthy, we can assume the manifest app is kept as secret. So
although the watermarking mechanism used in AppInk can become
public knowledge, the secrecy of manifest app provides one layer
of protection for the watermarking code segments. Second, the
data structures used in AppInk are commonly used in normal Java
applications, which makes it hard to separate these watermarking
code segments from other functional code.
What is more, we can also leverage the inherent difﬁculty of alias
analysis [14, 45] to add another layer of protection against subtrac-
tive attacks. Since the runtime graph data structures in AppInk have
reference relationships among themselves, an app developer can
easily know the correct reference relationships among the inserted
graphic nodes. Instead, without this pre-knowledge, attackers have
great difﬁculty in identifying these reference relationships through
reverse engineering. Therefore we can create bogus dependency
relationships between the original code and the newly inserted
code [7]. The attempt to remove or modify the watermarking graph
code segments will have high probability to damage the original
application logic, making it useless after repackaging.
This type of attacks tries to add another
Additive attacks:
watermark on a watermarked app, with the assumption that at-
tackers somehow understand and implement the same watermark
embedding algorithm as presented in AppInk.
In the defense
model applied in centralized app markets (cf. Section 1), there
is an inherent timing gap between the submission of the original
app and the repackaged app. That is, the original author always
submits her AppInk-protected app before an attacker succeeds in
executing an additive attack on that app. Therefore when the
attacker submits his repackaged app to the app market, the app
market can detect that there is an earlier app which has the same
functionality but has a different watermark extracted. The operator
can then launch another watermark extracting session on the app
under review, using the manifest app for the earlier app as the
watermark extraction driver.
If the same watermark is extracted
as the earlier published app, it is derived that the second is a
repackaged one. However, this does not prevent the attacker from
downloading an app from one store and publishing in another one
where the original app has not been published yet.
In the postmortem arbitrary model, when an app author suspects
that one app is a repackaged version of her own, she can apply the
watermark recognizer with her own manifest app on the suspected
app.
If the extracted watermark is identical with the one from
her own app, she can submit this as evidence to prove that the
suspected app is a repackaged version of her own one.
In case
that an attacker can somehow embed his own watermark into the
AppInk-protected app and generate his own manifest app, two
watermarks can be extracted by using their corresponding manifest
apps. Under this confusion, the original author can present another
1They can be used for app repackaging as well.
evidence to show that her watermark is original, and the other is
additional. The evidence is that her manifest app can extract the
same watermark from both her original app and the repackaged
app, but the attacker’s manifest app can only extract his own
watermark from the repackaged app.
Next we evaluate the AppInk’s robustness against real repack-
aging tools. With our best effort we do not ﬁnd any available tool
for subtractive and additive attacks. Therefore our evaluation is for
distortive attacks only.
5.2 Evaluation with Repackaging Tools
We evaluate AppInk against
two open-source tools, which
apply semantic-preserving transformations on Android app
code and therefore can simulate the aforementioned dis-
tortive attacks. We have ﬁve Android apps under eval-
uation, one named AndroidCalculator from Robotium,
and the other
from Android SDK samples (including
ContactManager, NotePad, HoneycombGallery, and
SearchableDictionary).
We ﬁrst apply AppInk to
embed watermarks on these apps, and then apply the available
transformations present in the above tools to the watermarked apps.
Last we feed the modiﬁed apps to the AppInk watermark recognizer
to see if the originally embedded watermarks can be extracted.
four
The ﬁrst snapshot
ADAM: We ﬁrst evaluate AppInk against an automatic Android
app repackaging tool named ADAM [51], which operates on
Android apps (.apk ﬁles) directly and automatically repackages
apps with different code transformation techniques. Figure 10
shows the above three-step evaluation process for
the app
named NotePad.
(Figure 10a) shows
the embedding session on NotePad.apk, with a string of
1234567890abcdef as the watermark value.
It clearly
demonstrates the working process of the three AppInk components.
The second snapshot (Figure 10b) shows the repackaging ses-
sion, where we apply seven semantic-preserving transformations
from ADAM on NotePad.apk. Among these transformations,
three do not modify the app code but change other phases in
the app packaging process. For example, resign transformation
disassembles the app and re-signs the app using attacker’s signing
key, rebuild transformation disassembles the app and re-assembles
the components into a new one with the open-source tool named
apktool [44], and zipalign transformation realigns the locations of
different data in the app package in a different and pre-determined
way. Four other techniques apply various code obfuscation trans-
formations on the app code, including defunct code insertion, iden-
tiﬁer renaming (include packages, classes, methods, and ﬁelds),
control ﬂow obfuscation, and string encryption. To conduct the
evaluation, we apply these seven transformations on the water-
marked code with a bash script, and output the repackaged apps
into a directory.
The third snapshot (Figure 10c) shows the recognizing session.
We create a script to feed each of these seven repackaged apps
into the watermark recognizer, and check the extracted watermark
value.
The ﬁrst attempt shows that AppInk recognizes the
watermark value of 1234567890abcdef correctly from six
of these repackaged apps. The app repackaged with identiﬁer
renaming obfuscation fails the ﬁrst attempt. Further analysis shows
that ADAM incorrectly renames one Android API method, which
results in the incorrect execution of the repackaged app. After
ﬁxing this bug in ADAM, AppInk recognizes the correct watermark
from all these repackaged apps (Figure 10c shows the result after
ﬁxing the ADAM bug).
Proguard: Our second evaluation is against a popular Android
app obfuscation tool named Proguard [29]. Different from ADAM
(a) Snapshot of AppInk watermark embedding
(b) Snapshot of ADAM repackaging
(c) Snapshot of AppInk watermark recognizing
Figure 10: Snapshots for watermark embedding, app repackaging, and watermark recognizing.
Figure 11: Execution time of watermarked app.
Figure 12: Extraction time of watermarked app.
which works directly on ﬁnal .apk ﬁles, Proguard operates on
class ﬁles generated in Android app building process. To conduct
this evaluation, we modify the watermarking embedding process
as presented in Section 3, by adding Proguard obfuscation as a
post-compilation action into the app building process 2. With this
extra action, the generated class ﬁles are optimized and obfuscated
ﬁrst, and then packaged into the ﬁnal released apps. Last we feed
these obfuscated apps into the AppInk recognizer. Our experiments
show that AppInk recognizer can extract the correct watermarks
embedded into all of these transformed apps successfully.
These two sets of evaluations demonstrate that AppInk has high
resistance against currently available repackaging and transforma-
tion tools, and thus is very robust against distortive attacks.
5.3 Performance Evaluation
evaluation
in
two
apps
three
We
conduct
performance
different Android
aspects
(ContactManager,
with
As the size
SearchableDictionary, and NotePad).
of the permutation graph is the main factor to decide the extra code
size and thus the ﬁnal performance, we watermark each of these
three apps with ﬁve different watermark values, which encode
permutation graphs with sizes of 5, 10, 15, 20, and 25, respectively.
These values can encode a number from 24 to 1.6*1025. Our
experiments show that even the longest watermark value only
introduces trivial performance overhead.
their devices. To reduce the undecidability of human input and also
exercise all these watermarking code, we use the manifest apps to
drive these apps in a normal Android emulator. Figure 11 shows the
times in seconds to ﬁnish each watermarked app. Please note that
for each app, the ﬁrst column shows the time to execute the original
(un-watermarked) app. The small differences between the ﬁve
watermarked apps and the original apps show that AppInk causes
very small runtime overhead (2.4% at most in our evaluation).
Second, we measure how much time is required to recognize
a watermark. This is the time that an arbitrating party needs
to verify an app’s originality. For that purpose, we feed these
watermarked apps into the extended Android emulator as presented
in Section 3.4, and measure how much time elapses when AppInk
recognizes the watermark values. Figure 12 shows the measure-
ment results in seconds. As shown, it takes 7 seconds to 28
seconds to verify these apps. Additionally, a longer watermark
value in general requires more time to be recognized, but the
difference is small. Compared with the data in Figure 11, we
ﬁnd that most time for watermark recognition is spent on the app
execution itself. The time differences for the same watermarked
apps in these two ﬁgures show the execution time dedicated to the
watermark extraction, is from 1.3 seconds to 1.6 seconds. With this
scale of time requirement, AppInk’s watermark recognition can be
deployed at current largest app market to handle thousands of app
submissions every day.
First, we measure how much extra time is required to execute
these watermarked apps, which affects the user experience of an
end mobile user when running these AppInk protected apps on
6. DISCUSSION
2Concretely, we add a new Proguard conﬁguration ﬁle and
Proguard action into one ant [20] building script.
the effectiveness of AppInk for preventing the propagation of repack-
aged Android apps and deployable capability for general Android
Our prototype implementation and evaluation have demonstrated
app development practice. In this section, we examine possible lim-
itations in the current prototype and discuss future improvements.
First, AppInk uses a conservative model-based test generation
algorithm to generate manifest apps, which may not be the opti-
mum for watermarking purpose. One possible enhancement is to
investigate the latest automatic test case generation methods that
have been studied by researchers in software engineering ﬁeld. For
example, the concolic execution based and GUI ripping based tech-
niques [1, 2, 33] are actively investigated in software engineering
community to enable automatic generation of high-coverage test
inputs for Android apps. We plan to study these methods to see if
they can be leveraged by AppInk for watermarking purpose.
Second, our AppInk prototype supports user input events only,
which are the primary driver for app functionality, but ignores
possible discrete system events, such as short messages received,
incoming phone calls, and various sensor events. We plan to study
the working mechanisms of all these events and explore ways to
incorporate them into AppInk.
7. RELATED WORK
Static watermarking embeds water-
Software watermarking:
marks into the code or data of applications [35, 37], which usu-
ally involves syntax transformation and is vulnerable to semantic-
preserving transformations. A variety of dynamic watermarking
mechanisms have been proposed to overcome these attacks, in-
cluding graph based [6, 39], thread based [36], and path based
watermarking [4]. AppInk does not claim any novel contribution
in this aspect. We instead leverage existing dynamic graph based
watermark to improve Android app’s capability in preventing and
defending against common app repackaging attacks.
Java software protection: Android apps are mainly written in
Java. Due to its high-level expressiveness, Java code is relatively
easier to be decompiled and reversed [43] than native code. To
protect software written in Java, various solutions are pursued
since its inception. One popular solution is to apply different
levels of obfuscation to Java code, such as code or data layout
obfuscation, control ﬂow obfuscation, and string encryption [3, 9,
12]. Watermarking is also used to prove the ownership of Java code
and to discourage Java software piracy [6,35]. SandMark [5] is one
popular research platform to study how well different obfuscation
and watermarking mechanisms work in protecting Java software.
Android app protection: To protect Android apps from piracy
and foster the healthy development of Android app economy, Google
has introduced several mechanisms. For example, Google rec-
ommends developers to leverage ProGuard [29] to optimize and
obfuscate apps. Google also provides licensing veriﬁcation li-
brary [17] to query a server to verify if an app running on a mobile
device has been properly downloaded from Google’s app market.
There are also attempts from other parties in this aspect. For
example, Amazon and Verizon have introduced their own digital
right management solutions for Android apps available in their
app markets [41]. These mechanisms can increase the difﬁculty
of reverse engineering Android apps, but are not strong enough to
deter determined attackers from repackaging through more labori-
ous manual analysis. For example, open source tools are available
to automatically crack these protections [30–32].
More recently, there are a series of work studying the app repack-
aging problem in Android platform [8, 16, 42, 52, 53]. Different
from the dynamic watermarking mechanism proposed by AppInk,
all these systems attack the app repackaging problem from the point
of view of measuring the apps similarity. DroidMOSS [53] uses
fuzzy hashing to speed up the pair-wise similarity comparison at
the opcode level. Potharaju et al. [42] compares each app pair