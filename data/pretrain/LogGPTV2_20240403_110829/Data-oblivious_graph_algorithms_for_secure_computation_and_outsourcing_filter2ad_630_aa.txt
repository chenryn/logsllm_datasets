title:Data-oblivious graph algorithms for secure computation and outsourcing
author:Marina Blanton and
Aaron Steele and
Mehrdad Aliasgari
Data-Oblivious Graph Algorithms for Secure Computation
and Outsourcing
Marina Blanton, Aaron Steele, and Mehrdad Aliasgari
Department of Computer Science and Engineering
University of Notre Dame
{mblanton,asteele2,maliasga}@nd.edu
ABSTRACT
This work treats the problem of designing data-oblivious al-
gorithms for classical and widely used graph problems. A
data-oblivious algorithm is deﬁned as having the same se-
quence of operations regardless of the input data and data-
independent memory accesses. Such algorithms are suit-
able for secure processing in outsourced and similar envi-
ronments, which serves as the main motivation for this work.
We provide data-oblivious algorithms for breadth-ﬁrst search,
single-source single-destination shortest path, minimum span-
ning tree, and maximum ﬂow, the asymptotic complexities
of which are optimal, or close to optimal, for dense graphs.
Categories and Subject Descriptors
G.2.2 [Discrete Mathematics]: Graph Theory—graph al-
gorithms; K.6 [Management of Computing and Infor-
mation Systems]: Security and Protection
Keywords
Graph algorithms; oblivious execution; secure computation
1.
INTRODUCTION
Cloud computing has become prevalent today and allows
for convenient on-demand access to computing resources
which enable clients to meet their unique needs. Such ser-
vices are used for as diverse a range of applications as man-
agement of personal photos, carrying out computationally
intensive scientiﬁc tasks, or outsourcing building and main-
tenance of an organization’s computing infrastructure. Plac-
ing large volumes of one’s data and computation outside
one’s immediate control, however, raises serious security and
privacy concerns, especially when the data contains per-
sonal, proprietary, or otherwise sensitive information. To
protect such information while being able to utilize exter-
nal computing resources, secure processing of data used for
specialized tasks has become an active area of research. Ex-
amples of such results include secure and veriﬁable storage
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
outsourcing (e.g., [19]) and secure outsourcing of common
tasks such as linear algebra operations (e.g., [4]) or sequence
comparisons (e.g., [6]). There is, however, a lack of eﬃ-
cient techniques for computation on protected data in out-
sourced environments for most commonly used algorithms
and data structures. To help eliminate this void, we de-
velop data-oblivious algorithms for fundamental graph prob-
lems. Data-oblivious, or just oblivious, execution is deﬁned
as having the same sequence of operations regardless of the
input data and data-independent memory accesses, which
makes it suitable for use in outsourced tasks. Note that the
great majority of data structures and algorithms commonly
used in practice are not data-oblivious and thus reveal in-
formation about data, while naive approaches for achieving
data-obliviousness incur a substantial increase in computa-
tion time over best-known solutions (consider, e.g., search,
binary trees, etc.). Therefore, a careful design of data struc-
tures and algorithms is essential for bringing the complexity
of oblivious execution as close to the complexity of its non-
oblivious counterpart as possible.
While secure computation on sensitive data in outsourced
and similar environments serves as the main motivation for
our data-oblivious techniques, we would like to abstract the
presentation of the developed techniques from a concrete set-
ting or underlying mechanisms for securing the data. Nev-
ertheless, to guarantee privacy of the data used in the com-
putation, throughout this work we assume that the compu-
tation proceeds on protected data (e.g., using suitable se-
cure multi-party computation techniques) and the only val-
ues that can be observed are memory accesses and results
of the computation that lead to accessing speciﬁc memory
locations. Data privacy is then guaranteed if the memory
accesses are data-independent or oblivious.
In this work we focus on classical graph problems such as
breadth-ﬁrst search (BFS), shortest path, minimum span-
ning tree, and maximum ﬂow and construct data-oblivious
algorithms of practical performance. Several of them are
fundamental graph problems with many uses both by them-
selves (e.g., for traversing a social network graph) and as
building blocks for more complex problems on graphs.
It
therefore would be desirable to obtain data-oblivious solu-
tions suitable for use in secure computation and outsourcing
for the above problems.
1.1 Related work
One topic closely related to secure and oblivious compu-
tation is Oblivious RAM (ORAM) [23, 33, 24]. ORAM was
introduced as the means of secure program execution in an
untrusted environment. Only the CPU with a small amount
of internal memory (O(1) or O(na) for 0 < a < 1, where
n is the size of used external memory) is assumed to be
trusted, while the program itself and the data are stored
encrypted on untrusted storage. The goal is to ensure that
no information about the program is revealed by observing
its memory accesses and therefore the accesses must appear
random and independent of the actual sequence of accesses
made by the program. There is a renewed interest in ORAM
due to the emergence of cloud computing and storage ser-
vices, and recent results include [39, 40, 34, 1, 17, 27, 7,
36, 37, 29]. ORAM techniques then can be used to make
a non-oblivious algorithm oblivious at the cost of polyloga-
rithmic (in the size of the data) amortized cost per access.
Current solutions achieve O((log n)2) overhead per access (if
random functions are used or server’s storage is superlinear
in n; otherwise, the overhead is O((log n)3) per access). A
comparison of several ORAM schemes and their complexi-
ties can be found in [1].
Another related topic is private information retrieval (PIR)
(see, e.g., [14, 15, 30, 11, 22, 31, 38] among others), where
a server holds a database and a clients wants to a retrieve
a record at a speciﬁc position with the goal that the server
should not learn what record was accessed. Symmetric PIR
(SPIR) solutions also require that the user should not learn
anything about any other records in the database except the
record of interest. Current PIR solutions exist in both the
information-theoretic and computational settings.
Privacy-preserving graph algorithms have become a re-
cent area of interest with the prevalent adoption of location
based services (LBS) for cloud services and mobile devices.
With the widespread use of LBS there is an increased need
for maintaining users’ privacy. The approach in [32] utilizes
PIR techniques to query a data-set while keeping the user’s
position, path, and desired destination private. Also moti-
vated by LBS is the work proposed in [18]. It introduced
data-oblivious algorithms for calculating classical geomet-
ric problems, such as convex hull and all nearest neighbors,
using secure multi-party computation.
Other solutions that focus on privacy-preserving graph al-
gorithms include algorithms designed for a public or joint
graph.
In particular, [8] presents a two-party solution for
computing all pairs shortest distance and single source short-
est path when each party holds a portion of the graph. The
solution uses Yao’s protocol [41] as the primary building
block and achieves better eﬃciency than naively applying
Yao’s protocol to existing graph algorithms. Similarly, [20]
presents a two-party method for privately performing an A(cid:63)
search over a public graph where diﬀerent parties hold the
edge weights and the heuristics. Additionally, there are sev-
eral techniques for constructing a graph privately. One such
solution is [21], which shows how many clients, each pos-
sessing a portion of the distributed graph, can privately
construct a graph so that an adversary is unable to de-
anonymize any part of it after the construction process.
There are also recent data-oblivious graph algorithms de-
signed for the external-memory model. This model assumes
that the client has access to some amount of working-memory
that is inaccessible to any adversary, but the remaining stor-
age is outsourced. The solution in [26] introduces data-
oblivious algorithms for compaction, selection, and sorting.
A ﬁnal technique of interest is [28], which introduces data-
oblivious algorithms for graph drawing problems (e.g., Euler
Tours, Treemap Drawings) and develops eﬃcient compressed-
scanning techniques, which in turn allow for private data to
be searched in an eﬃcient manner.
Similar to the external-memory model is the cache-oblivious
model, where algorithms are designed to perform optimally
using a CPU-cache without the size of the cache as an explicit-
parameter. Several cache-oblivious algorithms and data struc-
tures are described in [2, 10, 9, 3]. Of particular interest is
[10], where the authors describe cache-oblivious solutions for
breadth-ﬁrst search and shortest path.
1.2 Our contributions
In this work, we present data-oblivious algorithms for sev-
eral fundamental graph algorithms, namely, breadth-ﬁrst
search, single-source single-destination (SSSD) shortest path,
minimum spanning tree, and maximum ﬂow. Given graph
G = (V, E) as the input, our solutions assume adjacency
matrix representation of the graph, which has size Θ(|V |2)
and is asymptotically optimal for dense graphs with |E| =
Θ(|V |2). Our oblivious solutions achieve the following com-
plexities: O(|V |2) for BFS, O(|V |2) for SSSD shortest path,
O(|V |2) for the minimum spanning tree, and O(|V |3|E| log(|V |))
for the maximum ﬂow. This performance is optimal, or
close to optimal, for dense graphs and outperforms applying
ORAM techniques to the fastest conventional non-oblivious
algorithms for these problems.
Because our algorithms use adjacency matrix representa-
tion, they are not well suited for sparse graphs. For such
graphs, combining ORAM with the best non-oblivious algo-
rithm is likely to result in superior performance, even though
ORAM techniques are often not particularly fast in prac-
tice. We leave the design of eﬃcient oblivious algorithms for
sparse graphs as a direction for future work.
Our solutions assume that numeric values can be com-
pared, multiplied, and added in a protected form; the cost of
such operations is considered to be constant (see section 1.3
for a speciﬁc instantiation of these operations). We also rely
on random permutation of a vector as our building block.
This functionality can be accomplished by assigning random
values to each element of the vector and sorting them accord-
ing to the assigned values. Oblivious sorting can be accom-
plished, e.g., using the techniques in [25] at cost O(n log n)
for a set of size n. We therefore assume that a vector can
be randomly permuted at the same asymptotic cost.
All of the graph algorithms considered in this work pro-
ceed in iterations. At the core of achieving the above com-
plexities obliviously is the idea that we do not need to touch
all locations of the adjacency matrix at each iteration to hide
information about the access pattern, but are able to access
a single row of the matrix per iteration. Because we access
each row of the matrix exactly once and the accesses are per-
formed in random order, we show that the accesses are data
oblivious. We ﬁrst develop our solution for the BFS prob-
lem and then extend it with path reconstruction to obtain a
solution to the SSSD shortest path problem. Both BFS and
SSSD shortest path solutions are consecutively used to build
our data-oblivious algorithm for the maximum ﬂow problem.
Lastly, we also present an oblivious algorithm for the mini-
mum spanning tree problem that utilizes similar techniques.
1.3 Applications to secure computation and out-
sourcing
As mentioned earlier, secure outsourcing serves as the
main motivation for our data-oblivious graph algorithms.
We therefore sketch how our algorithms can be used in out-
sourced environments for securely computing on protected
data. We utilize the setting in which the computation is car-
ried out by multiple computational nodes, which allows us to
formulate the problem as secure multi-party computation.
To allow for as general problem formulation as possible,
we place all participants into the following three categories:
(i) the party or parties who hold private inputs; (ii) the
party or parties who learn the outcome of the computation,
and (iii) the parties who conduct the computation. There
are no constraints on how these three groups are formed,
and a single entity can be involved in a solution taking on
one or more of the above roles. This framework formula-
tion naturally ﬁts several broad categories of collaborative
and individual computing needs. For example, a number
of parties with private inputs can engage in secure function
evaluation among themselves and learn the result (or their
respective results). They can also choose a subset among
themselves, a number of outside parties, or a combination
of the above to carry out the computation. Note that this
includes the important use case of a single entity outsourc-
ing its computation to computational servers, in which case
the data owner is the only input and output party.
The algorithms that we present can be realized in this
setting using a number of underlying techniques such as lin-
ear secret sharing, threshold homomorphic encryption, or
Boolean garbled circuits. Then if we, for instance, utilize an
information-theoretically secure linear secret sharing scheme
(such as [35]), any linear combination of secret-shared val-
ues is computed locally and multiplication is the very basic
interactive building block. Comparisons such as less-than
and equality tests can be performed eﬃciently using, for in-
stance, techniques of [13]. In this setting, the arithmetic is
eﬃcient and complexity is measured in the number of inter-
active operations (while in settings that rely on public-key
cryptography, the complexity will additionally need to be
measured in the number of modular exponentiations). This
gives us a secure implementation of our data-oblivious graph
algorithms which are suitable for outsourced environments
as the sequence of operations they execute does not reveal
any information about the data.
2. PROBLEM DEFINITION
In this work we consider graph problems which take graph
G = (V, E) as part of their input. We assume that the graph
is speciﬁed in the form of the adjacency matrix M . To avoid
ambiguities, we explicitly specify the adjacency matrix rep-
resentation used in our description. The adjacency matrix
M is a |V | × |V | matrix containing Boolean values (if the
edges do not have weights), where the row corresponding to
node v ∈ V contains information about the edges leaving v.
If (v, u) ∈ E, then the cell at row v and column u is set to 1;
otherwise, it is set to 0. For undirected graphs, both Mv,u
and Mu,v are set to 1, where Mi,j refers to the cell at row i
and column j. Mv,v is set to 0. Without loss of generality,
we assume that the nodes are numbered 1 through |V |. For
problems that use weighted graph G, we will specify the dif-
ferences to the adjacency matrix representation at the time
of specifying the respective graph problem.
Because secure outsourced computation is used to moti-
vate this work, we assume that the computation proceeds
on properly protected data. This means that all inputs and
intermediate results are not known to the party or parties
carrying out the computation unless we explicitly open their
values for the purposes of accessing data at speciﬁc loca-
tions. For concreteness of exposition, we use notation [x] to
indicate that the value of x is protected from the entities
performing the computation.
To maintain data privacy, we must guarantee that the
computational parties do not learn anything about the data
during the execution of the algorithm. Because each pri-
vate value is assumed to be adequately protected, the only
way for the computational parties to deduce information
about the private data is when the sequence of instructions
or algorithm’s memory access pattern depends on the data.
Thus, to guarantee data privacy, we formally formulate data-
oblivious execution of a deterministic algorithm as follows:
Definition 1. Let d denote input to a graph algorithm.
Also, let A(d) denote the sequence of memory accesses that
the algorithm makes. The algorithm is considered data-oblivious
if for two inputs d and d(cid:48) of equal length, the algorithm exe-