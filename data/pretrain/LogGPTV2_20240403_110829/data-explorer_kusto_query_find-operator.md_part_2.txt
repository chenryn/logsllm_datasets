find in (database('*').*) where * has "Kusto"
```
### Term lookup across all tables and databases matching a name pattern in the cluster
The query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.
The resulting records are transformed according to the [output schema](#output-schema).
> [!div class="nextstepaction"]
> Run the query
```kusto
find in (database("S*").C*) where * has "Kusto"
```
### Term lookup in several clusters
The query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.
The resulting records are transformed according to the [output schema](#output-schema).
```kusto
find in (cluster("cluster1").database("B*").K*, cluster("cluster2").database("C*".*))
where * has "Kusto"
```
::: zone-end
::: zone pivot="azuremonitor"
### Term lookup across all tables
The query finds all rows from all tables in which any column includes the word `Kusto`.
The resulting records are transformed according to the [output schema](#output-schema).
```kusto
find "Kusto"
```
::: zone-end
## Examples of `find` output results  
The following examples show how `find` can be used over two tables: *EventsTable1* and *EventsTable2*.
Assume we have the next content of these two tables:
### EventsTable1
|Session_Id|Level|EventText|Version
|---|---|---|---|
|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|v1.0.0
|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|v1.0.0
|28b8e46e-3c31-43cf-83cb-48921c3986fc|Error|Some Text3|v1.0.1
|8f057b11-3281-45c3-a856-05ebb18a3c59|Information|Some Text4|v1.1.0
### EventsTable2
|Session_Id|Level|EventText|EventName
|---|---|---|---|
|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Information|Some Other Text1|Event1
|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|Event2
|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|Event3
|15eaeab5-8576-4b58-8fc6-478f75d8fee4|Error|Some Other Text4|Event4
### Search in common columns, project common and uncommon columns, and pack the rest  
```kusto
find in (EventsTable1, EventsTable2) 
     where Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e' and Level == 'Error' 
     project EventText, Version, EventName, pack_all()
```
**Output**
|source_|EventText|Version|EventName|pack_
|---|---|---|---|---|
|EventsTable1|Some Text2|v1.0.0||{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error"}
|EventsTable2|Some Other Text3||Event3|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error"}
### Search in common and uncommon columns
```kusto
find Version == 'v1.0.0' or EventName == 'Event1' project Session_Id, EventText, Version, EventName
```
**Output**
|source_|Session_Id|EventText|Version|EventName|
|---|---|---|---|---|
|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text1|v1.0.0
|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text2|v1.0.0
|EventsTable2|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Some Other Text1||Event1
Note: in practice, *EventsTable1* rows will be filtered with ```Version == 'v1.0.0'``` predicate and *EventsTable2* rows will be filtered with ```EventName == 'Event1'``` predicate.
### Use abbreviated notation to search across all tables in the current database
```kusto
find Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e'
```
**Output**
|source_|Session_Id|Level|EventText|pack_|
|---|---|---|---|---|
|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|{"Version":"v1.0.0"}
|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|{"Version":"v1.0.0"}
|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|{"EventName":"Event2"}
|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|{"EventName":"Event3"}
### Return the results from each row as a property bag
```kusto
find Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e' project pack_all()
```
**Output**
|source_|pack_|
|---|---|
|EventsTable1|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Information", "EventText":"Some Text1", "Version":"v1.0.0"}
|EventsTable1|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error", "EventText":"Some Text2", "Version":"v1.0.0"}
|EventsTable2|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Information", "EventText":"Some Other Text2", "EventName":"Event2"}
|EventsTable2|{"Session_Id":"acbd207d-51aa-4df7-bfa7-be70eb68f04e", "Level":"Error", "EventText":"Some Other Text3", "EventName":"Event3"}
## Examples of cases where `find` will act as `union`
### Using a non-tabular expression as find operand
```kusto
let PartialEventsTable1 = view() { EventsTable1 | where Level == 'Error' };
find in (PartialEventsTable1, EventsTable2) 
     where Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e'
```
### Referencing a column that appears in multiple tables and has multiple types
Assume we've created two tables by running:
```kusto
.create tables 
  Table1 (Level:string, Timestamp:datetime, ProcessId:string),
  Table2 (Level:string, Timestamp:datetime, ProcessId:int64)
```
* The following query will be executed as `union`.
```kusto
find in (Table1, Table2) where ProcessId == 1001
```
The output result schema will be *(Level:string, Timestamp, ProcessId_string, ProcessId_int)*.
* The following query will also be executed as `union`, but will produce a different result schema.
```kusto
find in (Table1, Table2) where ProcessId == 1001 project Level, Timestamp, ProcessId:string 
```
The output result schema will be *(Level:string, Timestamp, ProcessId_string)*